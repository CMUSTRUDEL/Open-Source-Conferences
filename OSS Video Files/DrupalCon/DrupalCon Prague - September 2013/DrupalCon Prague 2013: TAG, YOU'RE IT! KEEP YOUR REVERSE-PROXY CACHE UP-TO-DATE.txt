Title: DrupalCon Prague 2013: TAG, YOU'RE IT! KEEP YOUR REVERSE-PROXY CACHE UP-TO-DATE
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	Accelerating your Drupal site with Varnish, Squid, or Nginx?  Check.
Expiring your content with Expire module?  Check.
Invalidating outdated pages with Purge module?  Check.
Tearing your hair out because you still don't see that update you made?  Ugh . . . check!

There's no doubt that reverse-proxy caches like Varnish can greatly improve the performance and scalability of a Drupal site. Unfortunately, we often configure our production environments in ways that allow some of our outdated content to persist even after it has been updated. Expire and Purge modules go a long way in reducing these kinds of issues, but sometimes they're just not enough.

At Columbia Law School, we've synthesized and developed a silver bullet approach to maximize our use of Varnish while ensuring it always returns the most up-to-date Drupal content to the user. We tag it.

The session will cover:

Current reverse-proxy cache invalidation techniques and why they don't work for some of us

Developments in building smarter caches
- Drupal 8
- Varnish Cache Tagging

HTTP Cache Tag Auto module
- A Drupal 7 module developed by Columbia Law School to solve the age old stale cache issue
- Automatically supports tagging and invalidating pages based on entities, menu items, theme, blocks, taxonomy terms, contexts, cache tag context reaction, views
- Provides Rules integration
- Provides hooks to allow other modules to add their own tags and respond to cache invalidation requests
- Provides sample reverse-proxy cache configuration files
Captions: 
	00:00:00,000 --> 00:00:05,790
hi everyone thanks for picking our

00:00:02,730 --> 00:00:08,550
session this morning so this is

00:00:05,790 --> 00:00:13,440
Tigerettes keep your reverse proxy cache

00:00:08,550 --> 00:00:15,470
up to date and so you've probably seen

00:00:13,440 --> 00:00:22,140
some of these things from some of these

00:00:15,470 --> 00:00:23,640
questions from clients when they can't

00:00:22,140 --> 00:00:25,830
see that their content is actually

00:00:23,640 --> 00:00:33,180
updated even though they've actually

00:00:25,830 --> 00:00:40,430
just made that update so where your

00:00:33,180 --> 00:00:43,020
session presenters and I'm Christian and

00:00:40,430 --> 00:00:45,780
it's just a couple little pictures and

00:00:43,020 --> 00:00:50,969
things of me I live in New York City's

00:00:45,780 --> 00:00:54,780
theater district and this is me flying

00:00:50,969 --> 00:00:58,489
fee fee which is one of the last of its

00:00:54,780 --> 00:01:01,050
kind in particular kind of aircraft and

00:00:58,489 --> 00:01:02,879
also hiking on top of the state of

00:01:01,050 --> 00:01:09,450
Vermont's tallest mountain Mount

00:01:02,879 --> 00:01:11,520
Mansfield I live in hoboken new jersey

00:01:09,450 --> 00:01:14,970
which is across the river from manhattan

00:01:11,520 --> 00:01:17,850
which one of the most fabulous views of

00:01:14,970 --> 00:01:21,509
Manhattan I was recently introduced to

00:01:17,850 --> 00:01:23,159
four wheeling ATVs and had so much fun

00:01:21,509 --> 00:01:27,600
now I want to learn how to drive a race

00:01:23,159 --> 00:01:30,390
car and on the lower corner there is my

00:01:27,600 --> 00:01:34,259
roommate my co-conspirator my partner in

00:01:30,390 --> 00:01:36,090
crime Harvey the shelter dog and

00:01:34,259 --> 00:01:38,430
christian and i are from columbia

00:01:36,090 --> 00:01:41,939
university one of the world's great

00:01:38,430 --> 00:01:45,600
universities located in new york city it

00:01:41,939 --> 00:01:48,450
was founded in 1754 originally called

00:01:45,600 --> 00:01:53,670
King's College and then we had a little

00:01:48,450 --> 00:01:57,079
revolution and the school was renamed to

00:01:53,670 --> 00:02:01,110
Columbia which means new America

00:01:57,079 --> 00:02:04,469
Columbia has about 29,000 students 18

00:02:01,110 --> 00:02:07,409
schools and boasts the largest number of

00:02:04,469 --> 00:02:11,370
Nobel laureates of any other university

00:02:07,409 --> 00:02:13,430
at 82 Christian and I actually worked

00:02:11,370 --> 00:02:16,159
for the law school Columbia Law School

00:02:13,430 --> 00:02:18,980
which has expertise in many areas of the

00:02:16,159 --> 00:02:21,430
law of particular attention to this

00:02:18,980 --> 00:02:24,349
group might be our intellectual property

00:02:21,430 --> 00:02:27,829
faculty and our digital technology law

00:02:24,349 --> 00:02:30,739
faculty picture it is Professor Tim Wu

00:02:27,829 --> 00:02:33,790
who some of you may know as having

00:02:30,739 --> 00:02:36,379
coined the term net neutrality and

00:02:33,790 --> 00:02:38,540
another member of our faculty who may be

00:02:36,379 --> 00:02:42,469
familiar to you was named eben moblin

00:02:38,540 --> 00:02:46,220
he's been a very dynamic advocate for

00:02:42,469 --> 00:02:47,269
the open source movement I'll tell a

00:02:46,220 --> 00:02:52,189
little bit about what we're covering

00:02:47,269 --> 00:02:54,560
today the complex caching issues that we

00:02:52,189 --> 00:02:58,280
faced at columbia law school and how we

00:02:54,560 --> 00:03:00,799
solve them why it's critical for your

00:02:58,280 --> 00:03:04,939
site to reflect updated published

00:03:00,799 --> 00:03:07,370
information as soon as possible current

00:03:04,939 --> 00:03:10,340
and validation techniques and why they

00:03:07,370 --> 00:03:12,919
don't always work for all of us as well

00:03:10,340 --> 00:03:19,310
as developments in building smarter

00:03:12,919 --> 00:03:23,870
caches and Drupal 8 when i arrived at

00:03:19,310 --> 00:03:26,959
columbia I was faced with some

00:03:23,870 --> 00:03:30,319
challenges as far as web goes we had a

00:03:26,959 --> 00:03:34,939
legacy system that had more than 10,000

00:03:30,319 --> 00:03:36,799
pages of unstructured content to even

00:03:34,939 --> 00:03:38,540
bring it into some sort of usable site

00:03:36,799 --> 00:03:41,959
we were looking at about two years worth

00:03:38,540 --> 00:03:45,620
of development to deliver services that

00:03:41,959 --> 00:03:47,509
were sorely overdue the problem was that

00:03:45,620 --> 00:03:52,669
our legacy system really had no future

00:03:47,509 --> 00:03:54,199
there was no community there was no more

00:03:52,669 --> 00:03:58,099
core development being done by the

00:03:54,199 --> 00:04:01,759
vendor and there was no stakeholder

00:03:58,099 --> 00:04:05,229
support so we started to look for a new

00:04:01,759 --> 00:04:08,599
content management system and we had to

00:04:05,229 --> 00:04:10,879
establish guiding principles to what it

00:04:08,599 --> 00:04:13,329
was going to be the first one is that we

00:04:10,879 --> 00:04:16,310
were looking for an open source solution

00:04:13,329 --> 00:04:19,250
the solution had to be scalable but also

00:04:16,310 --> 00:04:21,799
infinitely flexible for the vast number

00:04:19,250 --> 00:04:24,080
of customizations that we needed to be

00:04:21,799 --> 00:04:26,350
able to do and we were looking for

00:04:24,080 --> 00:04:28,900
something that was supported by

00:04:26,350 --> 00:04:32,020
a community that was as vibrant and as

00:04:28,900 --> 00:04:36,940
innovative as our own we discovered

00:04:32,020 --> 00:04:40,350
Drupal a little bit about our production

00:04:36,940 --> 00:04:46,000
environment we have about 5,500

00:04:40,350 --> 00:04:51,310
authenticated users we have 250 active

00:04:46,000 --> 00:04:54,910
editors of very robust public sites we

00:04:51,310 --> 00:04:57,910
also have about 3,700 total unique

00:04:54,910 --> 00:04:59,590
visitors during peak periods right now

00:04:57,910 --> 00:05:02,790
would be one of them for us because we

00:04:59,590 --> 00:05:02,790
just started school

00:05:07,060 --> 00:05:12,800
alright so when it comes to our content

00:05:10,870 --> 00:05:16,480
currently and we're not completely

00:05:12,800 --> 00:05:19,100
migrated from the legacy CMS yet

00:05:16,480 --> 00:05:21,110
anonymous users have access to request

00:05:19,100 --> 00:05:22,910
so this is just anonymous users we have

00:05:21,110 --> 00:05:26,810
a lot more content that authenticated

00:05:22,910 --> 00:05:30,170
users can access but for anonymous users

00:05:26,810 --> 00:05:32,150
we have about 10,000 entities and

00:05:30,170 --> 00:05:35,360
roughly half of them are extremely

00:05:32,150 --> 00:05:37,370
volatile meaning that we the data change

00:05:35,360 --> 00:05:39,410
is very often and at times we don't know

00:05:37,370 --> 00:05:43,250
exactly when it changes we have a lot of

00:05:39,410 --> 00:05:47,110
editors and you know the central team

00:05:43,250 --> 00:05:51,290
isn't always able to keep up with them

00:05:47,110 --> 00:05:55,280
about 4,700 menu links belong to about

00:05:51,290 --> 00:05:58,160
115 custom menus use custom menus to

00:05:55,280 --> 00:06:02,050
permission out those those menu

00:05:58,160 --> 00:06:02,050
authorizations to different editors a

00:06:02,410 --> 00:06:11,170
little more than 11,000 custom path

00:06:06,500 --> 00:06:14,390
aliases thousand redirects using

00:06:11,170 --> 00:06:19,030
redirect so these are interactively

00:06:14,390 --> 00:06:25,310
configured and not in HT access or or

00:06:19,030 --> 00:06:31,190
encode about 150 contexts right now in

00:06:25,310 --> 00:06:34,070
we use context module 120 views not that

00:06:31,190 --> 00:06:35,810
many where now but we're working up the

00:06:34,070 --> 00:06:37,520
same thing with taxonomy terms we

00:06:35,810 --> 00:06:40,970
haven't really converted most of our big

00:06:37,520 --> 00:06:43,460
article libraries yet and so are our

00:06:40,970 --> 00:06:49,460
vocabularies in terms in text and

00:06:43,460 --> 00:06:51,320
taxonomy are pretty low at this point so

00:06:49,460 --> 00:06:54,050
our infrastructure when we decided to

00:06:51,320 --> 00:06:56,000
make this change over we this was

00:06:54,050 --> 00:06:57,830
actually just before Drupal 7 was

00:06:56,000 --> 00:07:05,240
released and we decided not to go with

00:06:57,830 --> 00:07:06,470
Drupal 6 for varying reasons but the

00:07:05,240 --> 00:07:08,930
thing that we were sort of concerned

00:07:06,470 --> 00:07:13,220
about with Drupal 7 was with performance

00:07:08,930 --> 00:07:18,560
and so we decided still to go with

00:07:13,220 --> 00:07:19,790
Drupal 7 but that we had to definitely

00:07:18,560 --> 00:07:22,880
do our research and our home

00:07:19,790 --> 00:07:28,540
work so right now we currently have 190

00:07:22,880 --> 00:07:28,540
total enabled modules about 134 for

00:07:34,630 --> 00:07:40,870
contribute soup for some of the

00:07:37,040 --> 00:07:40,870
technology that we use to run the site

00:07:47,729 --> 00:07:52,919
so when present someone like me I'm not

00:07:50,969 --> 00:07:55,949
a developer I'm a communications

00:07:52,919 --> 00:07:59,490
director and I get presented with this

00:07:55,949 --> 00:08:02,930
and I really have no idea what needs to

00:07:59,490 --> 00:08:13,460
happen except that we have to fix it so

00:08:02,930 --> 00:08:13,460
how do we deal with all of this well to

00:08:14,809 --> 00:08:18,960
quickly say that we had to take a look

00:08:17,099 --> 00:08:23,819
at the actual performance implications

00:08:18,960 --> 00:08:26,610
and so because our team and the school

00:08:23,819 --> 00:08:29,219
really relies on having content being up

00:08:26,610 --> 00:08:33,349
to date at all times we have to make

00:08:29,219 --> 00:08:35,969
sure that we could actually do that so

00:08:33,349 --> 00:08:38,039
when we looked at performance in general

00:08:35,969 --> 00:08:40,019
when we heard that there may be some

00:08:38,039 --> 00:08:42,599
more concerns with Drupal 7 than Drupal

00:08:40,019 --> 00:08:45,029
6 we made sure that we took a look at

00:08:42,599 --> 00:08:46,889
other peoples other organizations

00:08:45,029 --> 00:08:48,269
infrastructure so of course one of the

00:08:46,889 --> 00:08:51,360
things that we added into the mix was

00:08:48,269 --> 00:08:53,510
reverse proxy cache serving fortunately

00:08:51,360 --> 00:08:57,149
it also brings some problems with

00:08:53,510 --> 00:09:00,149
updated content so let me first just go

00:08:57,149 --> 00:09:03,500
into how how many of you know that

00:09:00,149 --> 00:09:03,500
normal page serving works

00:09:08,190 --> 00:09:12,540
so normally you would have your drupal

00:09:10,740 --> 00:09:15,540
web app servers probably load balancer

00:09:12,540 --> 00:09:18,060
in front of that and all requests are

00:09:15,540 --> 00:09:20,490
processed directly by those Drupal

00:09:18,060 --> 00:09:22,050
servers and even for pages that haven't

00:09:20,490 --> 00:09:25,710
changed of course that's not very

00:09:22,050 --> 00:09:31,280
performant in this case an editor

00:09:25,710 --> 00:09:34,650
updates for example an event node and

00:09:31,280 --> 00:09:38,250
that event node gets processed by drupal

00:09:34,650 --> 00:09:40,470
and comes back to it and also a visitor

00:09:38,250 --> 00:09:43,170
let's say requests that same event page

00:09:40,470 --> 00:09:46,200
and even though it may have been

00:09:43,170 --> 00:09:49,440
requested 150 times in that last minute

00:09:46,200 --> 00:09:51,120
Drupal still processes that request so

00:09:49,440 --> 00:09:53,540
that's not very performant because the

00:09:51,120 --> 00:09:58,320
same thing happened over and over again

00:09:53,540 --> 00:10:00,420
with the same response of course with

00:09:58,320 --> 00:10:04,110
reverse proxy caching normally what

00:10:00,420 --> 00:10:06,840
happens is what we do is we add another

00:10:04,110 --> 00:10:09,510
tier here we add the reverse proxy cache

00:10:06,840 --> 00:10:12,180
server which maybe varnish or squid or

00:10:09,510 --> 00:10:14,700
ingenix and you may even actually look

00:10:12,180 --> 00:10:19,380
at some work that's been done with

00:10:14,700 --> 00:10:22,590
Apache recently but in this case the

00:10:19,380 --> 00:10:26,130
event the editor still events in still

00:10:22,590 --> 00:10:27,930
updates an event it goes passes through

00:10:26,130 --> 00:10:35,250
the reverse proxy cache update because

00:10:27,930 --> 00:10:37,350
it's it's a post HTTP request in this

00:10:35,250 --> 00:10:40,200
case normally what happens when you

00:10:37,350 --> 00:10:42,120
configure this sort of setup is that the

00:10:40,200 --> 00:10:44,490
event triggers somehow the cast server

00:10:42,120 --> 00:10:47,310
to expire the previous version of the

00:10:44,490 --> 00:10:49,740
xpac of the event page so now when a

00:10:47,310 --> 00:10:54,030
visitor requests that same particular

00:10:49,740 --> 00:10:57,180
event page request is routed to the

00:10:54,030 --> 00:10:58,740
reverse proxy cache server and because

00:10:57,180 --> 00:11:01,800
the reverse proxy cache server had

00:10:58,740 --> 00:11:05,880
already received a request to to

00:11:01,800 --> 00:11:09,060
invalidate that page from its cache it

00:11:05,880 --> 00:11:13,310
now requests the new updated page from

00:11:09,060 --> 00:11:18,680
the Drupal servers and it stores it in

00:11:13,310 --> 00:11:22,520
its cache and then directs the response

00:11:18,680 --> 00:11:22,520
back to the anonymous

00:11:25,139 --> 00:11:29,260
but sometimes this doesn't always work

00:11:27,430 --> 00:11:31,389
right because sometimes we're not

00:11:29,260 --> 00:11:33,880
actually talking about the one event

00:11:31,389 --> 00:11:36,519
page that was that one event no that was

00:11:33,880 --> 00:11:40,240
created maybe it was embedded content or

00:11:36,519 --> 00:11:42,699
maybe it was a rendered token or maybe

00:11:40,240 --> 00:11:44,860
it wasn't even anything that's had to do

00:11:42,699 --> 00:11:47,769
with a particular piece of content maybe

00:11:44,860 --> 00:11:52,889
it was more like an attribute sort of

00:11:47,769 --> 00:11:56,560
environmental attribute in this case a

00:11:52,889 --> 00:11:59,820
visitor requests a different page that

00:11:56,560 --> 00:12:02,260
happens to embed the events in some way

00:11:59,820 --> 00:12:04,750
it goes to the reverse proxy cache

00:12:02,260 --> 00:12:07,449
server this time the cache server

00:12:04,750 --> 00:12:09,610
doesn't know that to expire that page or

00:12:07,449 --> 00:12:11,560
to request a new version of it because

00:12:09,610 --> 00:12:15,010
it never really received a response a

00:12:11,560 --> 00:12:18,220
request from Drupal originally to say to

00:12:15,010 --> 00:12:21,130
invalidate anything with that with that

00:12:18,220 --> 00:12:22,810
event on it so it's just doing its job

00:12:21,130 --> 00:12:25,839
and it actually just serves right back

00:12:22,810 --> 00:12:28,209
that exact page that it had even though

00:12:25,839 --> 00:12:31,920
that the events that may be included

00:12:28,209 --> 00:12:31,920
some wear on it has been updated

00:12:36,110 --> 00:12:40,579
so some of you might be saying to

00:12:37,820 --> 00:12:43,100
yourselves so what do we really have to

00:12:40,579 --> 00:12:46,610
worry about these edge cases can't

00:12:43,100 --> 00:12:49,640
clients just wait 15-20 minutes for

00:12:46,610 --> 00:12:52,250
content to expire by itself and the

00:12:49,640 --> 00:12:55,279
answer is no and the reason why is

00:12:52,250 --> 00:12:58,519
because whether your communications

00:12:55,279 --> 00:13:00,890
professional or a web developer you're

00:12:58,519 --> 00:13:04,010
working for an organization or an entity

00:13:00,890 --> 00:13:07,250
that has a brand and brand management is

00:13:04,010 --> 00:13:09,380
actually everybody's responsibility any

00:13:07,250 --> 00:13:12,589
piece of content any interaction that

00:13:09,380 --> 00:13:15,589
you have with a client a customer is an

00:13:12,589 --> 00:13:17,899
exchange a contract if you will you're

00:13:15,589 --> 00:13:19,959
setting up expectations about what

00:13:17,899 --> 00:13:22,610
you're going to deliver to that person

00:13:19,959 --> 00:13:24,950
so when you have public facing

00:13:22,610 --> 00:13:28,490
information and it's not up to date

00:13:24,950 --> 00:13:32,240
you're going to be diminishing the value

00:13:28,490 --> 00:13:33,800
of your brand every touch point that you

00:13:32,240 --> 00:13:36,709
have with a customer should be a

00:13:33,800 --> 00:13:38,000
positive experience so that they trust

00:13:36,709 --> 00:13:42,949
they're going to be getting what they're

00:13:38,000 --> 00:13:45,589
purchasing from you brand stakeholders

00:13:42,949 --> 00:13:47,570
also the people who pay our salaries

00:13:45,589 --> 00:13:49,790
want to know that updates have been

00:13:47,570 --> 00:13:52,399
confirmed even if they're pieces of

00:13:49,790 --> 00:13:59,360
content that some might consider to be

00:13:52,399 --> 00:14:04,370
routine what so you say okay well that

00:13:59,360 --> 00:14:06,709
makes all sense now aren't there

00:14:04,370 --> 00:14:09,589
contribs that already do this well there

00:14:06,709 --> 00:14:11,930
are to an extent so there's cash

00:14:09,589 --> 00:14:14,930
expiration right so there's actually a

00:14:11,930 --> 00:14:21,290
really great job in in let's pair it up

00:14:14,930 --> 00:14:27,709
with purge module and also varnish HTTP

00:14:21,290 --> 00:14:30,470
accelerator integration module so expire

00:14:27,709 --> 00:14:33,019
actually tries to predict the expired

00:14:30,470 --> 00:14:37,399
paths or the ones that are likely to be

00:14:33,019 --> 00:14:44,839
expired by an event such as a an update

00:14:37,399 --> 00:14:47,410
delete and insert hook and it works well

00:14:44,839 --> 00:14:50,500
for most sort of kasic

00:14:47,410 --> 00:14:52,810
operation events and invalidation events

00:14:50,500 --> 00:14:54,910
sort of using the two interchangeably

00:14:52,810 --> 00:14:56,440
although I do realize that there's a

00:14:54,910 --> 00:15:00,660
there's a difference but for this

00:14:56,440 --> 00:15:00,660
purpose I'll use them interchangeably

00:15:01,560 --> 00:15:07,209
fortunately this is not really for

00:15:03,610 --> 00:15:09,579
complex scenarios right it it's

00:15:07,209 --> 00:15:14,079
impossible to predict every single path

00:15:09,579 --> 00:15:17,319
that that a piece of content may be on

00:15:14,079 --> 00:15:19,509
you can do a pretty good job with it but

00:15:17,319 --> 00:15:22,329
for embedded content for sometimes with

00:15:19,509 --> 00:15:26,889
render tokens with renter density tokens

00:15:22,329 --> 00:15:28,500
with with attributes environmental

00:15:26,889 --> 00:15:33,370
attributes there's really no way of

00:15:28,500 --> 00:15:37,389
figuring that out purchase of course

00:15:33,370 --> 00:15:41,649
just to explain sends a purge HTTP

00:15:37,389 --> 00:15:44,170
command over to request over to varnish

00:15:41,649 --> 00:15:49,480
or ingenix or whatever reverse proxy

00:15:44,170 --> 00:15:51,430
cast server you're using varnish HTTP

00:15:49,480 --> 00:15:57,130
accelerator integration communicates

00:15:51,430 --> 00:15:59,829
instead over an admin socket and an

00:15:57,130 --> 00:16:01,779
implement course cache API and acts as a

00:15:59,829 --> 00:16:06,430
sort of pseudo page cache even though it

00:16:01,779 --> 00:16:11,030
doesn't really cash anything that Drupal

00:16:06,430 --> 00:16:13,640
can actually pull up

00:16:11,030 --> 00:16:27,860
it's only as smart as core went and

00:16:13,640 --> 00:16:30,380
expand core and contribute rodizio with

00:16:27,860 --> 00:16:33,980
this problem well there's a couple of

00:16:30,380 --> 00:16:36,410
ways the first is shorter ttls our time

00:16:33,980 --> 00:16:40,070
to lives so this is the amount of time

00:16:36,410 --> 00:16:44,390
that a piece of a page can actually

00:16:40,070 --> 00:16:46,910
remain in the cache before it's it's

00:16:44,390 --> 00:16:49,420
booted out but unfortunately this is on

00:16:46,910 --> 00:16:53,150
sort of a per-user basis once that

00:16:49,420 --> 00:16:55,040
content gets delivered to the user so if

00:16:53,150 --> 00:16:56,870
an important change is needed site

00:16:55,040 --> 00:16:59,030
editors and owners can't override the

00:16:56,870 --> 00:17:02,540
setting once a user's browser receives

00:16:59,030 --> 00:17:05,270
the page so if we set the TTL to 15

00:17:02,540 --> 00:17:10,130
minutes that means that it could take up

00:17:05,270 --> 00:17:13,310
to 15 minutes for that particular for

00:17:10,130 --> 00:17:17,300
instance for that particular page to be

00:17:13,310 --> 00:17:20,030
updated in reverse proxy cache or if

00:17:17,300 --> 00:17:23,150
that was propagated to the users browser

00:17:20,030 --> 00:17:26,060
in the users browser after they received

00:17:23,150 --> 00:17:29,930
it from the reverse proxy cache so does

00:17:26,060 --> 00:17:34,310
15 minutes work and livi would respond

00:17:29,930 --> 00:17:36,770
no so then there's mass and validation

00:17:34,310 --> 00:17:39,740
right so this is just sort of wiping

00:17:36,770 --> 00:17:42,200
everything out but this is highly it's

00:17:39,740 --> 00:17:44,030
really not performing right because I'm

00:17:42,200 --> 00:17:46,340
if you have a large site with a huge

00:17:44,030 --> 00:17:48,560
cash you have considerable performance

00:17:46,340 --> 00:17:52,970
issues trying to warm back cash back up

00:17:48,560 --> 00:17:54,440
again so that doesn't work either well

00:17:52,970 --> 00:17:58,810
here's one that I sort of like because I

00:17:54,440 --> 00:18:01,580
don't have to deal with it essentially a

00:17:58,810 --> 00:18:03,200
manual search and handpick pages so if

00:18:01,580 --> 00:18:05,120
you really know your content right so

00:18:03,200 --> 00:18:10,490
you can go through the pages and maybe

00:18:05,120 --> 00:18:13,280
have a have a link to actually purge

00:18:10,490 --> 00:18:15,920
each of those pages little block that

00:18:13,280 --> 00:18:17,300
allows you to do that unfortunately this

00:18:15,920 --> 00:18:19,750
doesn't really work when you're dealing

00:18:17,300 --> 00:18:22,100
with a huge site with multiple editors

00:18:19,750 --> 00:18:22,490
because it takes considerable time and

00:18:22,100 --> 00:18:24,320
it

00:18:22,490 --> 00:18:26,630
stillen sort of impossible to ensure

00:18:24,320 --> 00:18:30,290
that you've got all the affected pages

00:18:26,630 --> 00:18:32,809
under control so then there's another

00:18:30,290 --> 00:18:35,170
one you could hard code the rules into

00:18:32,809 --> 00:18:40,040
the reverse proxy cache or you could add

00:18:35,170 --> 00:18:42,350
some additional logic in your module to

00:18:40,040 --> 00:18:44,990
sort of manipulate page headers in

00:18:42,350 --> 00:18:48,080
Drupal but this is really difficult to

00:18:44,990 --> 00:18:50,240
manage and it's equally difficult to

00:18:48,080 --> 00:18:53,240
explain to stakeholders and content

00:18:50,240 --> 00:18:55,250
editors of like what actually triggers

00:18:53,240 --> 00:18:57,650
something to be updated in the reverse

00:18:55,250 --> 00:18:59,420
proxy cache because they're not they

00:18:57,650 --> 00:19:03,350
don't tend to be very technical all the

00:18:59,420 --> 00:19:05,600
time and the other thing is that you may

00:19:03,350 --> 00:19:07,730
have this challenge but if you have if

00:19:05,600 --> 00:19:10,820
your onboarding new team members often

00:19:07,730 --> 00:19:13,960
it presents a significant learning curve

00:19:10,820 --> 00:19:13,960
to them

00:19:19,590 --> 00:19:23,640
so my role in this in this endeavor is

00:19:22,440 --> 00:19:26,460
that I'm the one who gets all the

00:19:23,640 --> 00:19:28,620
complaints and nobody wants to know how

00:19:26,460 --> 00:19:32,850
we do it or why we do it they just want

00:19:28,620 --> 00:19:35,220
to fix it so I come to Christian and I

00:19:32,850 --> 00:19:37,740
say this is nice all these things sound

00:19:35,220 --> 00:19:41,700
great but they're not enterprise level

00:19:37,740 --> 00:19:43,919
solutions so what do we do there's got

00:19:41,700 --> 00:19:45,510
to be something that automatically can

00:19:43,919 --> 00:19:50,340
update content it just can't be that

00:19:45,510 --> 00:19:54,270
hard what is it so that's when I went to

00:19:50,340 --> 00:19:58,559
do and took a look also at what the w3c

00:19:54,270 --> 00:20:02,039
was doing and what other other sort of

00:19:58,559 --> 00:20:04,200
big cdns were doing like Akamai and so

00:20:02,039 --> 00:20:07,710
some of the things that other people

00:20:04,200 --> 00:20:09,480
were doing were like cash channels which

00:20:07,710 --> 00:20:12,120
sort of allowed you to have like a

00:20:09,480 --> 00:20:14,840
grouping and then just clear the

00:20:12,120 --> 00:20:17,490
grouping and sort of some other

00:20:14,840 --> 00:20:20,789
invalidation techniques and one that

00:20:17,490 --> 00:20:26,370
came to mind pretty quickly was this

00:20:20,789 --> 00:20:31,620
idea of tagged cache and validation so

00:20:26,370 --> 00:20:36,899
we started to just tag things let me

00:20:31,620 --> 00:20:40,110
explain that a little bit more so first

00:20:36,899 --> 00:20:42,390
we add attack in this case we'll call it

00:20:40,110 --> 00:20:44,640
a cache tag but its its attack for that

00:20:42,390 --> 00:20:45,990
piece of content so we still have the

00:20:44,640 --> 00:20:48,570
same sort of set up here with the

00:20:45,990 --> 00:20:51,690
reverse proxy cache server in the middle

00:20:48,570 --> 00:20:55,230
and now a visitor anonymous visitor

00:20:51,690 --> 00:20:57,149
requests a page and let's just say for

00:20:55,230 --> 00:20:59,429
this instance the reverse proxy cache

00:20:57,149 --> 00:21:01,679
server hasn't ever dealt with this page

00:20:59,429 --> 00:21:04,980
before so since it doesn't have it in

00:21:01,679 --> 00:21:07,980
its cache it's going to go to Drupal to

00:21:04,980 --> 00:21:12,750
request it and actually process that

00:21:07,980 --> 00:21:19,110
response that request so now what

00:21:12,750 --> 00:21:21,210
happens is Drupal adds a tag to it so in

00:21:19,110 --> 00:21:25,110
the basic layers of it if it's an event

00:21:21,210 --> 00:21:28,860
page it's going to at least add a event

00:21:25,110 --> 00:21:31,090
page tag to it and now it's going to

00:21:28,860 --> 00:21:33,280
date that event page

00:21:31,090 --> 00:21:36,040
that updated page is then served to the

00:21:33,280 --> 00:21:39,640
anonymous user so the reverse proxy cafs

00:21:36,040 --> 00:21:42,610
stores that tag which may be in will we

00:21:39,640 --> 00:21:47,550
use actually X invalidates and X and

00:21:42,610 --> 00:21:49,990
validated by as our HTTP header tags

00:21:47,550 --> 00:21:52,740
stores that information and it just

00:21:49,990 --> 00:21:56,680
sends the response back to the visitor

00:21:52,740 --> 00:21:59,020
so how does that all work right let's

00:21:56,680 --> 00:22:02,490
take a look at the the scenario that an

00:21:59,020 --> 00:22:06,480
editor updates an event again so that

00:22:02,490 --> 00:22:08,650
that post gets sent all the way through

00:22:06,480 --> 00:22:12,180
passes through the reverse proxy cache

00:22:08,650 --> 00:22:15,010
server and goes directly to Drupal and

00:22:12,180 --> 00:22:17,890
that update however you'd like to do it

00:22:15,010 --> 00:22:19,780
trigger is the cache server to expire or

00:22:17,890 --> 00:22:22,540
invalidate the previous version of the

00:22:19,780 --> 00:22:26,410
event page and any pages tagged with

00:22:22,540 --> 00:22:30,360
that sort of basic tag so now when an

00:22:26,410 --> 00:22:35,500
anonymous visitor comes along and

00:22:30,360 --> 00:22:38,140
requests an event page that's routed to

00:22:35,500 --> 00:22:40,660
the reverse proxy cache server and since

00:22:38,140 --> 00:22:44,890
it was just moments before updated by

00:22:40,660 --> 00:22:47,710
the by the by an editor it knew that it

00:22:44,890 --> 00:22:50,890
actually had either purged or banned it

00:22:47,710 --> 00:22:56,310
from its cache and so it goes to Drupal

00:22:50,890 --> 00:23:00,040
to process that request and Drupal

00:22:56,310 --> 00:23:05,020
answers and responds and adds a header

00:23:00,040 --> 00:23:07,900
tag and reverse proxy cache server

00:23:05,020 --> 00:23:12,190
stores it and sends the response back to

00:23:07,900 --> 00:23:13,870
the visitor but this is how this sort of

00:23:12,190 --> 00:23:15,820
fails right so if we're only adding one

00:23:13,870 --> 00:23:18,940
tag for it like that main piece of

00:23:15,820 --> 00:23:23,200
content still doesn't work for embedded

00:23:18,940 --> 00:23:25,090
content so if visitor requests a

00:23:23,200 --> 00:23:28,030
different page that just happens to

00:23:25,090 --> 00:23:30,940
embed the updated event or an act

00:23:28,030 --> 00:23:32,770
reviewed of some kind then it's still

00:23:30,940 --> 00:23:35,530
routed to the reverse proxy cache server

00:23:32,770 --> 00:23:38,860
except since it's a different page with

00:23:35,530 --> 00:23:41,470
possibly it may be a different tag that

00:23:38,860 --> 00:23:43,570
it might have put on it or a different

00:23:41,470 --> 00:23:45,800
URL

00:23:43,570 --> 00:23:49,250
and calf server still doesn't know to

00:23:45,800 --> 00:23:51,530
expire that a different page since it

00:23:49,250 --> 00:23:53,990
wasn't tagged as having included that

00:23:51,530 --> 00:23:56,720
embedded content it still serves an old

00:23:53,990 --> 00:24:03,200
version of it so that sort of still

00:23:56,720 --> 00:24:06,020
fails we have to figure out how they

00:24:03,200 --> 00:24:08,770
deal with this issue and when we looked

00:24:06,020 --> 00:24:13,720
at a couple other modules like cash tags

00:24:08,770 --> 00:24:16,430
and looking at how expire module works

00:24:13,720 --> 00:24:20,420
we sort of saw that we couldn't

00:24:16,430 --> 00:24:23,360
necessarily use anything that really

00:24:20,420 --> 00:24:25,610
exactly worked with Korres caching API

00:24:23,360 --> 00:24:29,500
there's a couple reasons for that we

00:24:25,610 --> 00:24:32,510
don't always cash everything in in core

00:24:29,500 --> 00:24:36,710
there's also a lot of things that aren't

00:24:32,510 --> 00:24:38,330
really cacheable such as you know sort

00:24:36,710 --> 00:24:41,510
of elements of like what theme you're

00:24:38,330 --> 00:24:46,430
using so we have to figure out another

00:24:41,510 --> 00:24:49,460
way that's how we basically built HTTP

00:24:46,430 --> 00:24:52,160
cache tag auto which makes reverse proxy

00:24:49,460 --> 00:24:58,550
cache tags if you will mark work a hell

00:24:52,160 --> 00:25:02,480
of a lot better so it's an experimental

00:24:58,550 --> 00:25:05,030
Drupal 7 module to solve these complex

00:25:02,480 --> 00:25:06,860
cash and validation issues it builds on

00:25:05,030 --> 00:25:11,630
some of the best innovations out there

00:25:06,860 --> 00:25:14,060
by our Drupal community and it can

00:25:11,630 --> 00:25:17,960
automatically tag and invalidate pages

00:25:14,060 --> 00:25:26,720
based on rendered entities the current

00:25:17,960 --> 00:25:28,490
theme blocks taxonomy terms contexts can

00:25:26,720 --> 00:25:30,530
do menu items but that can get a little

00:25:28,490 --> 00:25:36,110
hairy sometimes when you have a lot that

00:25:30,530 --> 00:25:39,080
you're actually rendering use so let's

00:25:36,110 --> 00:25:41,390
take a look at how that works first it

00:25:39,080 --> 00:25:43,280
actually adds all the relevant but

00:25:41,390 --> 00:25:45,560
missing tags and this is through a

00:25:43,280 --> 00:25:47,270
combination of any kind of hooks that

00:25:45,560 --> 00:25:50,630
you want to desire right that you

00:25:47,270 --> 00:25:54,980
actually want to you want to use to add

00:25:50,630 --> 00:25:56,960
tags so we have a few that we actually

00:25:54,980 --> 00:25:58,909
hook into right right away that we

00:25:56,960 --> 00:26:04,190
use but you can add more as well because

00:25:58,909 --> 00:26:06,559
we've we've added a hook to allow you to

00:26:04,190 --> 00:26:09,169
alter these tags and also a just another

00:26:06,559 --> 00:26:13,279
function that allows you to add tags on

00:26:09,169 --> 00:26:17,770
the fly in your own hooks and so this

00:26:13,279 --> 00:26:20,600
time an anonymous visitor requests a

00:26:17,770 --> 00:26:22,580
page let's say and it still gets routed

00:26:20,600 --> 00:26:27,380
through the reverse proxy cache server

00:26:22,580 --> 00:26:29,240
but this time Drupal adds a bunch of

00:26:27,380 --> 00:26:32,090
different tags so in this case it adds

00:26:29,240 --> 00:26:33,980
the still that event tag because the

00:26:32,090 --> 00:26:38,260
visitor requested some type of event

00:26:33,980 --> 00:26:41,299
page in our case it also tagged it as

00:26:38,260 --> 00:26:44,690
having a person embedded and we're

00:26:41,299 --> 00:26:48,559
relating to a professor professor doe in

00:26:44,690 --> 00:26:52,159
this case a term so maybe that event was

00:26:48,559 --> 00:26:53,659
a conference and related to tax law and

00:26:52,159 --> 00:26:55,549
a bunch of other things maybe there was

00:26:53,659 --> 00:26:58,520
a block that actually rendered a news

00:26:55,549 --> 00:27:01,250
item on it so we include that on it

00:26:58,520 --> 00:27:04,159
because that news item might change and

00:27:01,250 --> 00:27:06,710
then maybe it also rendered a custom

00:27:04,159 --> 00:27:09,950
block of some kind with some you know

00:27:06,710 --> 00:27:11,779
some arbitrary HTML and any sort of

00:27:09,950 --> 00:27:14,950
other additional tags may be at the

00:27:11,779 --> 00:27:14,950
context that it was in

00:27:17,430 --> 00:27:22,920
so now drupal serves those tags the

00:27:20,940 --> 00:27:27,750
reverse proxy cache server stores them

00:27:22,920 --> 00:27:31,500
and that response is sent back to the

00:27:27,750 --> 00:27:33,150
anonymous visitor so let's see just how

00:27:31,500 --> 00:27:35,850
that all works now that we've added

00:27:33,150 --> 00:27:38,100
those tags so we have still have the

00:27:35,850 --> 00:27:42,810
same setup with the reverse proxy cache

00:27:38,100 --> 00:27:46,590
server tier in the middle an editor

00:27:42,810 --> 00:27:48,300
updates an event that's routed through

00:27:46,590 --> 00:27:51,900
and passes through the proxy cache

00:27:48,300 --> 00:27:55,200
server so this time however you'd like

00:27:51,900 --> 00:27:57,630
to do it if you use purge or if you want

00:27:55,200 --> 00:28:00,060
to sort of use a some other kind of

00:27:57,630 --> 00:28:01,800
different module you can or maybe you're

00:28:00,060 --> 00:28:04,890
going to use Q because you don't want to

00:28:01,800 --> 00:28:11,280
necessarily have those requests lock up

00:28:04,890 --> 00:28:13,470
a the actual requests to the page to the

00:28:11,280 --> 00:28:15,240
reverse proxy cache maybe you want to

00:28:13,470 --> 00:28:17,280
set them up so that you're not dealing

00:28:15,240 --> 00:28:19,500
with the actual current flow of the

00:28:17,280 --> 00:28:21,390
requests for that event user so maybe

00:28:19,500 --> 00:28:24,540
you put them in a queue but it's really

00:28:21,390 --> 00:28:28,340
up to you and at that point then all

00:28:24,540 --> 00:28:31,170
pages tagged with that event tag are

00:28:28,340 --> 00:28:35,430
invalidated or expired however you set

00:28:31,170 --> 00:28:38,190
that up so now when a visitor requests

00:28:35,430 --> 00:28:41,270
that event page goes to the reverse

00:28:38,190 --> 00:28:44,250
proxy cache server and since we had

00:28:41,270 --> 00:28:47,610
actually invalidated or expired that

00:28:44,250 --> 00:28:51,030
page from the reverse proxy cache server

00:28:47,610 --> 00:28:53,160
by using that tag then the cache server

00:28:51,030 --> 00:28:57,570
actually requests the updated event page

00:28:53,160 --> 00:29:01,620
from Drupal Drupal processes it sends

00:28:57,570 --> 00:29:06,150
along multiple tags including the event

00:29:01,620 --> 00:29:08,640
tag specifically the event tag it stores

00:29:06,150 --> 00:29:11,300
them and sends it that response back up

00:29:08,640 --> 00:29:11,300
to the visitor

00:29:12,770 --> 00:29:18,140
so let's see if the litmus test let's

00:29:15,530 --> 00:29:20,900
run the litmus test right so those two

00:29:18,140 --> 00:29:24,140
things work before right in in in every

00:29:20,900 --> 00:29:26,570
scenario but the real problem was when

00:29:24,140 --> 00:29:28,970
we actually did the embedded content or

00:29:26,570 --> 00:29:30,980
that you know that attribute that really

00:29:28,970 --> 00:29:33,490
wasn't cacheable in any other kind of

00:29:30,980 --> 00:29:36,050
way so let's see if it still holds up

00:29:33,490 --> 00:29:38,060
well the visitor requests let's say a

00:29:36,050 --> 00:29:43,070
different page happens to embed that

00:29:38,060 --> 00:29:45,860
piece of content so at this point it

00:29:43,070 --> 00:29:47,720
still holds up because it goes that

00:29:45,860 --> 00:29:50,660
request is routed still again to the

00:29:47,720 --> 00:29:54,080
reverse proxy cache server and the cast

00:29:50,660 --> 00:29:55,910
server requests the page because that

00:29:54,080 --> 00:29:59,540
page had been actually tagged with that

00:29:55,910 --> 00:30:04,670
event tag even though it wasn't a an

00:29:59,540 --> 00:30:06,950
event node page and Drupal goes ahead

00:30:04,670 --> 00:30:08,740
and sends all the requisite tags up

00:30:06,950 --> 00:30:11,210
again because there may be another

00:30:08,740 --> 00:30:15,370
another tag that God included this time

00:30:11,210 --> 00:30:18,170
because maybe a news story changed it

00:30:15,370 --> 00:30:20,480
stores those tags stores the response

00:30:18,170 --> 00:30:23,630
from Drupal and then it serves it back

00:30:20,480 --> 00:30:29,810
up to the visitor so it still works in

00:30:23,630 --> 00:30:32,870
this case so this experimental module

00:30:29,810 --> 00:30:34,640
also provides a hook allowing you to so

00:30:32,870 --> 00:30:38,510
like I said a function that allows you

00:30:34,640 --> 00:30:41,300
just to add very easily a X invalidates

00:30:38,510 --> 00:30:42,740
or X and validated by it's really just

00:30:41,300 --> 00:30:48,380
to help our module because you could do

00:30:42,740 --> 00:30:50,930
that very easily yourself it adds a

00:30:48,380 --> 00:30:55,460
sample reverse proxy cache configuration

00:30:50,930 --> 00:30:59,930
rule for varnish so you can see how to

00:30:55,460 --> 00:31:04,400
set that up and we'll have rules and

00:30:59,930 --> 00:31:06,730
contacts support so it's available for

00:31:04,400 --> 00:31:11,180
you just to take a look at conceptually

00:31:06,730 --> 00:31:14,980
add a lava columbia.edu forward slash

00:31:11,180 --> 00:31:16,770
open source then also directly at our

00:31:14,980 --> 00:31:20,790
sandbox

00:31:16,770 --> 00:31:22,650
URL so some things you might want to

00:31:20,790 --> 00:31:25,680
take a look at this doesn't implement

00:31:22,650 --> 00:31:27,420
directly the cache API as we said

00:31:25,680 --> 00:31:29,760
because there's not everything is

00:31:27,420 --> 00:31:33,360
necessarily cacheable nor do we want to

00:31:29,760 --> 00:31:36,030
make it cashable in core but some things

00:31:33,360 --> 00:31:40,260
that you should take a look at is cash

00:31:36,030 --> 00:31:44,760
tags certainly which in Drupal 7 changes

00:31:40,260 --> 00:31:47,220
course a cache API it does support

00:31:44,760 --> 00:31:49,230
varnish now but it's still only limited

00:31:47,220 --> 00:31:51,240
to the items that are are actually

00:31:49,230 --> 00:31:55,440
cacheable bike or are made cacheable

00:31:51,240 --> 00:31:57,390
bike or through contribs but you should

00:31:55,440 --> 00:31:59,610
definitely take a look at cache API and

00:31:57,390 --> 00:32:02,880
Drupal 8 here's just a couple of nodes

00:31:59,610 --> 00:32:06,530
that you should take a look at the cache

00:32:02,880 --> 00:32:11,970
tags being included in validation and

00:32:06,530 --> 00:32:14,490
the new cleaner API in addition you may

00:32:11,970 --> 00:32:16,800
want to take a look at tagged cache

00:32:14,490 --> 00:32:22,230
invalidation in general because there is

00:32:16,800 --> 00:32:26,310
a w3c well it seems like there is going

00:32:22,230 --> 00:32:29,280
to be a spec that's going to be proposed

00:32:26,310 --> 00:32:31,620
with the w3c because essentially right

00:32:29,280 --> 00:32:34,010
now we use X invalidates and X and

00:32:31,620 --> 00:32:37,830
validated by some of you may know that

00:32:34,010 --> 00:32:42,890
w3c has essentially said anything any

00:32:37,830 --> 00:32:46,800
custom HTTP header is is deprecated so

00:32:42,890 --> 00:32:48,900
we actually we don't actually ever send

00:32:46,800 --> 00:32:52,050
those headers directly to a browser we

00:32:48,900 --> 00:32:54,690
once they get to varnish we we remove

00:32:52,050 --> 00:32:57,120
them so that the browser the client

00:32:54,690 --> 00:32:58,850
never sees them they are invalidated so

00:32:57,120 --> 00:33:01,500
hopefully what will happen is that

00:32:58,850 --> 00:33:04,470
aspect and a proposal will be drafted

00:33:01,500 --> 00:33:08,760
that will extend the current

00:33:04,470 --> 00:33:10,500
cache-control extension for HTTP so that

00:33:08,760 --> 00:33:13,520
would be the the best thing that would

00:33:10,500 --> 00:33:13,520
happen at this point

00:33:22,029 --> 00:33:29,879
or how we implement things or or why we

00:33:26,830 --> 00:33:29,879
did something a different way

00:33:36,269 --> 00:33:40,769
right

00:33:38,820 --> 00:33:44,100
right so the question was whether we

00:33:40,769 --> 00:33:47,009
could a actually tagged a view and and

00:33:44,100 --> 00:33:48,659
specifically the views content right so

00:33:47,009 --> 00:33:54,630
in that case what I would suggest is

00:33:48,659 --> 00:33:56,909
that you use vuze content cash I believe

00:33:54,630 --> 00:34:01,320
it's called which is a new module that

00:33:56,909 --> 00:34:04,130
use it has a cash back end for views and

00:34:01,320 --> 00:34:09,270
in that case you would probably use the

00:34:04,130 --> 00:34:13,409
cash tags module you would have to patch

00:34:09,270 --> 00:34:15,780
core if you're using Drupal 7 and then I

00:34:13,409 --> 00:34:19,530
would change the varnish back-end to

00:34:15,780 --> 00:34:23,040
instead of sending the X cash tags

00:34:19,530 --> 00:34:28,020
header to instead send over the X

00:34:23,040 --> 00:34:29,669
invalidates question thank you for

00:34:28,020 --> 00:34:32,190
presentation thank you I'm very

00:34:29,669 --> 00:34:34,919
interested like in practical example

00:34:32,190 --> 00:34:38,609
like can you open the page and explain

00:34:34,919 --> 00:34:41,849
like where and which tags you add and

00:34:38,609 --> 00:34:43,889
how you in which hooks you add them and

00:34:41,849 --> 00:34:47,010
in which case is you invalidate them

00:34:43,889 --> 00:34:48,839
right I would take a look I think it's a

00:34:47,010 --> 00:34:50,639
little hairy to do it right here so i

00:34:48,839 --> 00:34:52,829
would take a look at the the code and i

00:34:50,639 --> 00:34:56,369
can certainly answer any questions via

00:34:52,829 --> 00:35:01,290
email as well but for instance if we go

00:34:56,369 --> 00:35:06,810
through a sample page that has let's say

00:35:01,290 --> 00:35:09,720
a node that has a an event and maybe has

00:35:06,810 --> 00:35:13,410
a block as well that has two news

00:35:09,720 --> 00:35:18,270
stories what would happen is that we

00:35:13,410 --> 00:35:20,700
would call hook entity load and that

00:35:18,270 --> 00:35:23,520
would actually pretty much solve both of

00:35:20,700 --> 00:35:25,530
those concerns at that point you could

00:35:23,520 --> 00:35:29,160
use hook and to TPU the problem with

00:35:25,530 --> 00:35:33,960
hook entity view is that it's not always

00:35:29,160 --> 00:35:35,819
going to to catch everything so because

00:35:33,960 --> 00:35:38,220
that's all that's really only rendered

00:35:35,819 --> 00:35:40,230
entities and so you may not get that if

00:35:38,220 --> 00:35:42,210
you're loading something up now the

00:35:40,230 --> 00:35:45,980
thing is is you still have to figure out

00:35:42,210 --> 00:35:45,980
whether you know what you're actually

00:35:46,069 --> 00:35:49,590
what you're actually showing to the to

00:35:49,230 --> 00:35:54,480
the you

00:35:49,590 --> 00:35:56,460
is loaded or if it's just viewed so in

00:35:54,480 --> 00:35:58,500
in many cases you may want to change the

00:35:56,460 --> 00:36:00,930
actual hook that you're using but if you

00:35:58,500 --> 00:36:02,760
use load you're probably never going to

00:36:00,930 --> 00:36:04,530
get it wrong except that you're you're

00:36:02,760 --> 00:36:07,980
you are going to probably invalidate a

00:36:04,530 --> 00:36:15,300
lot more pages than then you would with

00:36:07,980 --> 00:36:18,960
you okay thank you thank you I nice work

00:36:15,300 --> 00:36:21,660
I had two questions the first is our

00:36:18,960 --> 00:36:23,160
entity reference feels also correctly

00:36:21,660 --> 00:36:26,280
supported it sounds like they are

00:36:23,160 --> 00:36:28,680
because of your twist to use hook entity

00:36:26,280 --> 00:36:30,990
load instead of kinds of view they they

00:36:28,680 --> 00:36:33,690
are they are we don't use entity

00:36:30,990 --> 00:36:35,670
reference right now and so that wasn't

00:36:33,690 --> 00:36:38,310
something that was directly something

00:36:35,670 --> 00:36:41,540
that we needed to build into it but I

00:36:38,310 --> 00:36:44,250
because it's using hook entity load I

00:36:41,540 --> 00:36:46,650
think it would work right but I haven't

00:36:44,250 --> 00:36:48,810
tested it but as you said it would catch

00:36:46,650 --> 00:36:50,580
too many things so you could catch too

00:36:48,810 --> 00:36:54,750
many right so that's why I mean you

00:36:50,580 --> 00:36:56,340
really have to sort of know your site so

00:36:54,750 --> 00:36:59,010
that you're using the right hooks in

00:36:56,340 --> 00:37:00,600
that case right so second question I've

00:36:59,010 --> 00:37:03,630
also been working with the cash tech

00:37:00,600 --> 00:37:05,280
support in the triple eight core and you

00:37:03,630 --> 00:37:07,890
mentioned it as mentioned is as well but

00:37:05,280 --> 00:37:09,390
it sounds like everything that is

00:37:07,890 --> 00:37:11,280
problematic in that regards McKenzie's

00:37:09,390 --> 00:37:12,859
if you were to soak entity load that's

00:37:11,280 --> 00:37:15,319
going to be soft and Trubel

00:37:12,859 --> 00:37:18,140
because their things are being taxed

00:37:15,319 --> 00:37:20,029
correctly as of think two or three days

00:37:18,140 --> 00:37:22,190
ago we have entity random cashing in

00:37:20,029 --> 00:37:24,470
Drupal core based on cash tags yes

00:37:22,190 --> 00:37:27,640
thanks to mot co not sure if he's here

00:37:24,470 --> 00:37:31,430
but great job of Matisse car that's good

00:37:27,640 --> 00:37:33,380
exactly so question is do you plan to

00:37:31,430 --> 00:37:34,910
work on a triple 8 version of this as

00:37:33,380 --> 00:37:37,670
well because if you start working on

00:37:34,910 --> 00:37:39,349
that soonish you are still in a good

00:37:37,670 --> 00:37:42,109
position to make changes to triple core

00:37:39,349 --> 00:37:44,359
if necessary and then you have a perfect

00:37:42,109 --> 00:37:46,160
solution and you won't have to do any

00:37:44,359 --> 00:37:47,869
sort of facts like using hook entity

00:37:46,160 --> 00:37:50,779
load instead of the TV instead of you

00:37:47,869 --> 00:37:52,630
right right so if you are yeah I've been

00:37:50,779 --> 00:37:56,450
trying to keep up pretty well with with

00:37:52,630 --> 00:37:59,989
with those issues so i would say that

00:37:56,450 --> 00:38:01,730
yes I also would hope to do that yeah

00:37:59,989 --> 00:38:03,799
also would be great i mean this is more

00:38:01,730 --> 00:38:06,319
of just like a concept than anything

00:38:03,799 --> 00:38:09,259
else so yeah I think that would be great

00:38:06,319 --> 00:38:12,019
yeah absolutely well yep then we would

00:38:09,259 --> 00:38:14,029
have reliable internal page cache in

00:38:12,019 --> 00:38:15,859
Drupal 8 as in without furnish and write

00:38:14,029 --> 00:38:17,749
your solution with then make sure that

00:38:15,859 --> 00:38:20,059
also works perfectly with our external

00:38:17,749 --> 00:38:22,599
right would be awesome if all that work

00:38:20,059 --> 00:38:26,779
just without any pains headaches and

00:38:22,599 --> 00:38:29,529
frustrations right late but yeah thank

00:38:26,779 --> 00:38:32,359
you for your question and comments I

00:38:29,529 --> 00:38:34,489
thank you for the presentation and hey

00:38:32,359 --> 00:38:37,309
still new to Drupal so how would this

00:38:34,489 --> 00:38:39,499
work if your page is heavily Ajax you

00:38:37,309 --> 00:38:42,980
know if you have a lot of blocks loading

00:38:39,499 --> 00:38:46,099
through ajax and always new stories are

00:38:42,980 --> 00:38:49,260
being loaded how would the cash work in

00:38:46,099 --> 00:38:55,329
that case with some new content

00:38:49,260 --> 00:39:00,700
right now to you in your varnish set up

00:38:55,329 --> 00:39:02,589
to you cash your Ajax responses yes you

00:39:00,700 --> 00:39:04,930
see we don't either because there's so

00:39:02,589 --> 00:39:09,250
many I mean there's a lot of we also

00:39:04,930 --> 00:39:11,500
don't use it too terribly often so in

00:39:09,250 --> 00:39:14,980
our context we don't however if you're

00:39:11,500 --> 00:39:16,690
still using load if you're still loading

00:39:14,980 --> 00:39:19,390
entities right it's still going to

00:39:16,690 --> 00:39:23,319
happen so if if you haven't changed your

00:39:19,390 --> 00:39:27,220
varnish set up to to actually not cash

00:39:23,319 --> 00:39:29,769
those responses then it would still

00:39:27,220 --> 00:39:34,480
actually have those HTTP header tags in

00:39:29,769 --> 00:39:37,539
them so so if you left sort of

00:39:34,480 --> 00:39:40,569
everything set correctly then in theory

00:39:37,539 --> 00:39:42,490
you would actually still you know

00:39:40,569 --> 00:39:44,440
invalidate them at the correct points

00:39:42,490 --> 00:39:46,390
because there's still nothing different

00:39:44,440 --> 00:39:49,210
in that response it's just that you're

00:39:46,390 --> 00:39:52,930
serving up you know a different a

00:39:49,210 --> 00:39:57,160
different content type HTTP content type

00:39:52,930 --> 00:39:59,710
instead of HTML you're serving up a JSON

00:39:57,160 --> 00:40:02,230
or you know so it in theory it should

00:39:59,710 --> 00:40:06,670
work exactly the same but we don't

00:40:02,230 --> 00:40:12,119
happen to cash right now are our Ajax

00:40:06,670 --> 00:40:12,119
responses thank you thank you

00:40:12,510 --> 00:40:18,540
I do you have any problems where tag

00:40:15,690 --> 00:40:19,950
might affect every page accidentally and

00:40:18,540 --> 00:40:24,810
you might end up in validating your

00:40:19,950 --> 00:40:26,880
entire site and you might be lying yes

00:40:24,810 --> 00:40:28,830
what strategies do you have around that

00:40:26,880 --> 00:40:30,330
the many ways of doing say certain

00:40:28,830 --> 00:40:33,540
things on different time schedules are

00:40:30,330 --> 00:40:35,460
the things right those we haven't we

00:40:33,540 --> 00:40:37,670
haven't terribly dealt with that but we

00:40:35,460 --> 00:40:40,350
know that it's it's certainly a concern

00:40:37,670 --> 00:40:42,960
in some cases we want that to happen

00:40:40,350 --> 00:40:45,360
right so when we when we add the actual

00:40:42,960 --> 00:40:47,310
current theme it's really quite nice

00:40:45,360 --> 00:40:49,110
because we do have a couple of themes

00:40:47,310 --> 00:40:51,530
that we use throughout the site and and

00:40:49,110 --> 00:40:54,810
we don't necessarily want to invalidate

00:40:51,530 --> 00:40:58,770
the entire cache but we're still in

00:40:54,810 --> 00:41:01,980
validating like a huge portion of the

00:40:58,770 --> 00:41:04,500
pages that are stored in the cache you

00:41:01,980 --> 00:41:07,590
know I think what what has to be done is

00:41:04,500 --> 00:41:09,510
probably a decent logging of what cash

00:41:07,590 --> 00:41:11,760
tags are actually being sent in some

00:41:09,510 --> 00:41:13,200
type of aggregated way I wouldn't say

00:41:11,760 --> 00:41:16,470
that to the database though I would

00:41:13,200 --> 00:41:20,520
probably save that to you know mem Cass

00:41:16,470 --> 00:41:23,400
or some kind of system where you know it

00:41:20,520 --> 00:41:25,980
could quickly actually update those you

00:41:23,400 --> 00:41:28,290
would just need it to see sort of the

00:41:25,980 --> 00:41:30,270
aggregate and make sure that you know

00:41:28,290 --> 00:41:32,760
this is not happening everywhere but you

00:41:30,270 --> 00:41:34,050
could also take a look at you know when

00:41:32,760 --> 00:41:36,450
you're actually running your site in

00:41:34,050 --> 00:41:38,160
peak times to look at varnished top and

00:41:36,450 --> 00:41:40,200
see what's actually happening as we

00:41:38,160 --> 00:41:42,150
mentioned about using keys maybe there's

00:41:40,200 --> 00:41:44,940
a way of saying watch you can do this

00:41:42,150 --> 00:41:46,800
one much later so expire this tag now

00:41:44,940 --> 00:41:48,480
but expire these in 15 minutes I think

00:41:46,800 --> 00:41:50,340
that's I think that makes a lot of sense

00:41:48,480 --> 00:41:52,110
yeah that's a great idea why there's

00:41:50,340 --> 00:41:56,570
just a thought yeah no I think that's

00:41:52,110 --> 00:41:56,570
awesome definitely thank you thank you

00:41:58,119 --> 00:42:04,140
as far as I understand you only cash

00:42:01,089 --> 00:42:04,140
pages being

00:42:15,269 --> 00:42:21,589
I mean why c'mon wine shops recently

00:42:18,199 --> 00:42:21,589
basically compare

00:42:21,940 --> 00:42:29,760
right

00:42:23,950 --> 00:42:32,080
so is the question that for still for

00:42:29,760 --> 00:42:35,500
anonymous users right you may have a

00:42:32,080 --> 00:42:38,260
block that is specific to them in some

00:42:35,500 --> 00:42:41,460
regard well in our case if they have you

00:42:38,260 --> 00:42:44,170
know sort of any any cookie that's

00:42:41,460 --> 00:42:48,280
specific to the user then we actually

00:42:44,170 --> 00:42:50,590
bypass the the entire cache we haven't

00:42:48,280 --> 00:42:53,350
needed that kind of capability because

00:42:50,590 --> 00:42:55,210
well essentially we almost always any

00:42:53,350 --> 00:42:57,790
kind of interactive experience we have a

00:42:55,210 --> 00:42:59,590
Columbia Law School we create an account

00:42:57,790 --> 00:43:01,900
for that user and so then they're

00:42:59,590 --> 00:43:06,670
authenticated so we're probably not the

00:43:01,900 --> 00:43:08,590
best you know the the best at answering

00:43:06,670 --> 00:43:13,260
sort of those questions when it comes to

00:43:08,590 --> 00:43:16,560
more so you know sort of product

00:43:13,260 --> 00:43:16,560
commerce sites

00:43:20,079 --> 00:43:22,829
hmm

00:43:23,160 --> 00:43:28,620
well you could do it through ECI aesi as

00:43:26,250 --> 00:43:29,850
well right which is I mean seems like

00:43:28,620 --> 00:43:35,240
it's going to be a heck of a lot easier

00:43:29,850 --> 00:43:35,240
to do in in Drupal 8 as well so

00:43:40,820 --> 00:43:47,630
or four different roles right right yeah

00:43:46,010 --> 00:43:49,300
I mean you know they're this whole

00:43:47,630 --> 00:43:51,920
concept could be extended to

00:43:49,300 --> 00:43:54,020
authenticated cash to write if you if

00:43:51,920 --> 00:43:57,740
you could figure out the pages that

00:43:54,020 --> 00:44:03,020
really changed because you could cash a

00:43:57,740 --> 00:44:05,390
page with a user tag or a roll tag in

00:44:03,020 --> 00:44:07,940
which case then it would only invalidate

00:44:05,390 --> 00:44:14,870
it based on you know that specific

00:44:07,940 --> 00:44:17,750
scenario thank you I it was pretty much

00:44:14,870 --> 00:44:21,050
the same question but I'm to do with

00:44:17,750 --> 00:44:25,610
HTTPS I take it you're anonymous users

00:44:21,050 --> 00:44:29,870
don't visit the site through https they

00:44:25,610 --> 00:44:33,230
yes we well that's the that's sort of

00:44:29,870 --> 00:44:37,210
different because you can use HTTPS

00:44:33,230 --> 00:44:40,580
through varnish so you just have to use

00:44:37,210 --> 00:44:42,800
well it seems like it's it's much easier

00:44:40,580 --> 00:44:45,980
in varnish three and so we let we've

00:44:42,800 --> 00:44:48,620
actually decided to sort of probably

00:44:45,980 --> 00:44:50,510
move in that direction and what's even

00:44:48,620 --> 00:44:55,520
even better with varnish three is that

00:44:50,510 --> 00:44:57,080
it does support gzip I'm away so you

00:44:55,520 --> 00:45:00,290
know you can actually get a better

00:44:57,080 --> 00:45:02,570
performance on on the user side as well

00:45:00,290 --> 00:45:06,700
so there's there's a lot of pluses in

00:45:02,570 --> 00:45:09,850
moving into the varnish three direction

00:45:06,700 --> 00:45:09,850
thank you

00:45:14,150 --> 00:45:20,089
well thank you so much for all of your

00:45:16,309 --> 00:45:21,470
time it's been a pleasure and I hope

00:45:20,089 --> 00:45:24,380
that if you have any other suggestions

00:45:21,470 --> 00:45:26,960
or you know anything that you find that

00:45:24,380 --> 00:45:29,869
we may be able to do better or or have

00:45:26,960 --> 00:45:31,700
any questions or want to talk about you

00:45:29,869 --> 00:45:35,660
know share ideas then you can certainly

00:45:31,700 --> 00:45:39,819
contact us this is my email address see

00:45:35,660 --> 00:45:45,380
stuck at laga columbia.edu and also just

00:45:39,819 --> 00:45:47,390
the the prague URL and Livi's if you

00:45:45,380 --> 00:45:49,220
particularly if you have concerns about

00:45:47,390 --> 00:45:52,940
what the client expects and what the

00:45:49,220 --> 00:46:02,599
client needs when it comes to updated

00:45:52,940 --> 00:46:06,650
content and so you know one thing that

00:46:02,599 --> 00:46:09,260
we'd love for you to do is tell us what

00:46:06,650 --> 00:46:12,950
you think and take the survey so you can

00:46:09,260 --> 00:46:15,230
take that at frog 2013 drupal.org for it

00:46:12,950 --> 00:46:18,170
/schedule and then click on the take the

00:46:15,230 --> 00:46:19,369
survey link so thank you so much for

00:46:18,170 --> 00:46:22,789
your time and I hope this has been

00:46:19,369 --> 00:46:25,150
helpful and have a great time the rest

00:46:22,789 --> 00:46:25,150
of the conference

00:46:37,600 --> 00:46:39,660

YouTube URL: https://www.youtube.com/watch?v=xyOfnUPHI0w


