Title: DrupalCon Prague 2013: Evolving frontend development; dancing on the tip of a hurtling rocket
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	Front end development is a fickle, fickle game. Tools, best practice and standards shift like memes in a feed. Even in the 6 years since the introduction of the iPhone we've seen progressive enhancement, responsive design, version-less browsers, HTML5, JavaScript frameworks, native mobile applications, 4G speeds, and staggering mobile web access increases just to name a few things. When work opened on Drupal 7 only hints of this future existed. Here we are again, on the cusp of another major Drupal release staring into our crystal balls trying to predict the nature of front end development for the next five years. 

Out of the box, Drupal 7 produced HTML. From a default Drupal 8 installation, we can now request JSON in addition to HTML. With this fundamental shift in the basic architecture of Drupal, we have the potential to power dynamic front end applications with it. But we may not get all the necessary tools from a default Drupal 8 installation. For instance, the entity CRUD API will be incomplete. Contrib module developers will find themselves filling in the gaps. The future will arrive and its distribution will be uneven.
Captions: 
	00:00:00,000 --> 00:00:05,970
good afternoon I hope you all enjoyed

00:00:02,460 --> 00:00:08,360
your coffee and your short break I have

00:00:05,970 --> 00:00:11,550
the pleasure of introducing Jersey beach

00:00:08,360 --> 00:00:13,139
one of the overarching themes of the

00:00:11,550 --> 00:00:15,470
front end track this year is pushing

00:00:13,139 --> 00:00:17,789
boundaries going beyond Drupal and

00:00:15,470 --> 00:00:21,289
taking what is already a powerful tool

00:00:17,789 --> 00:00:23,550
and pushing it to become even more so

00:00:21,289 --> 00:00:25,500
naturally I reach that too Jessie

00:00:23,550 --> 00:00:27,900
because she is one of the persons one of

00:00:25,500 --> 00:00:29,400
the people have been pushing Drupal you

00:00:27,900 --> 00:00:32,160
shall reach his keynote this morning you

00:00:29,400 --> 00:00:34,559
saw the accessibility maybe show the

00:00:32,160 --> 00:00:36,750
toolbar this is the work jessie has been

00:00:34,559 --> 00:00:39,600
working on and taking an already complex

00:00:36,750 --> 00:00:42,300
system and then pushing it and yesterday

00:00:39,600 --> 00:00:44,460
I was tweeting with her and she was at

00:00:42,300 --> 00:00:46,829
the sprints and naturally she was in the

00:00:44,460 --> 00:00:50,820
heart problems sprint cracking the

00:00:46,829 --> 00:00:52,710
problems that nobody else can so so

00:00:50,820 --> 00:01:03,510
without any further ado introduce you

00:00:52,710 --> 00:01:06,810
Jesse beach so how many people here are

00:01:03,510 --> 00:01:08,369
front-end developers an tastic I am too

00:01:06,810 --> 00:01:10,110
excellent I was hoping I get a lot of

00:01:08,369 --> 00:01:12,150
people in the room front-end developers

00:01:10,110 --> 00:01:13,470
so the name of this talk is evolving

00:01:12,150 --> 00:01:16,259
front-end development but it's a bit of

00:01:13,470 --> 00:01:18,240
a pun because front-end development is

00:01:16,259 --> 00:01:19,380
something that we are evolving in Drupal

00:01:18,240 --> 00:01:23,369
we're making it better but it's also

00:01:19,380 --> 00:01:26,490
something that evolves around us and I

00:01:23,369 --> 00:01:28,890
like to refer to this field as dancing

00:01:26,490 --> 00:01:30,600
on the tip of a hurtling rocket because

00:01:28,890 --> 00:01:32,400
as front-end developers we're in a field

00:01:30,600 --> 00:01:38,880
that changes what feels like almost

00:01:32,400 --> 00:01:41,430
daily so I absolutely love the web this

00:01:38,880 --> 00:01:43,200
picture to me just expresses the feeling

00:01:41,430 --> 00:01:45,420
that I have almost every day when I get

00:01:43,200 --> 00:01:50,970
to sit down and write code to invent

00:01:45,420 --> 00:01:53,729
things and to make content findable but

00:01:50,970 --> 00:01:55,740
the front end is also a place of mystery

00:01:53,729 --> 00:01:57,840
and and in fact terror some days I feel

00:01:55,740 --> 00:01:59,850
like you know I'm presented with

00:01:57,840 --> 00:02:02,700
problems very often that I don't know

00:01:59,850 --> 00:02:08,250
how to solve that require me to you know

00:02:02,700 --> 00:02:10,349
dive into forums and you know lists so I

00:02:08,250 --> 00:02:12,180
wanted to kind of get a sense of how

00:02:10,349 --> 00:02:13,680
much information is out there that a

00:02:12,180 --> 00:02:16,019
front-end developer might pass

00:02:13,680 --> 00:02:19,280
I have to know for you know becoming an

00:02:16,019 --> 00:02:20,909
expert so I counted all of the

00:02:19,280 --> 00:02:23,760
specifications and the recommendations

00:02:20,909 --> 00:02:25,950
out there in the w3c that you know you

00:02:23,760 --> 00:02:27,810
might in one day have to read or have to

00:02:25,950 --> 00:02:32,280
be familiar with things like you know

00:02:27,810 --> 00:02:35,750
css3 CSS to the akron scripts but also

00:02:32,280 --> 00:02:40,980
you know really esoteric ones like

00:02:35,750 --> 00:02:43,049
geolocation or web workers and it ends

00:02:40,980 --> 00:02:44,879
up being a lot of documentation i mean

00:02:43,049 --> 00:02:46,319
just for javascript there are over 80

00:02:44,879 --> 00:02:48,900
things you might have to read and

00:02:46,319 --> 00:02:52,200
they're not exciting reading to say the

00:02:48,900 --> 00:02:53,819
least and as i was counting those

00:02:52,200 --> 00:02:57,989
numbers i got this tweet from kevin

00:02:53,819 --> 00:02:59,939
subtle talking about display properties

00:02:57,989 --> 00:03:01,560
that i hadn't known about up to that

00:02:59,939 --> 00:03:03,239
point and i just had this moment where I

00:03:01,560 --> 00:03:05,340
was like and now there's something else

00:03:03,239 --> 00:03:07,950
I have to go in research like I have no

00:03:05,340 --> 00:03:09,030
idea what indent edge reset is for

00:03:07,950 --> 00:03:11,430
display mode and I felt like I

00:03:09,030 --> 00:03:17,120
understood CSS completely up to that

00:03:11,430 --> 00:03:18,569
point I also put together a list of

00:03:17,120 --> 00:03:20,940
responsibilities that a front-end

00:03:18,569 --> 00:03:22,919
developer might have and went and

00:03:20,940 --> 00:03:24,449
counted all of the different libraries

00:03:22,919 --> 00:03:26,190
like the third party libraries that you

00:03:24,449 --> 00:03:28,079
might have to someday evaluate or

00:03:26,190 --> 00:03:31,290
understand to know like should I go with

00:03:28,079 --> 00:03:35,040
angular or backbone how we're going to

00:03:31,290 --> 00:03:37,109
do our behavior driven development you

00:03:35,040 --> 00:03:38,669
know any type of responsibility that you

00:03:37,109 --> 00:03:40,650
have as front-end developer is probably

00:03:38,669 --> 00:03:42,930
already represented in some library and

00:03:40,650 --> 00:03:44,609
there's probably 15 of them that do the

00:03:42,930 --> 00:03:46,169
thing that you need to do and it just

00:03:44,609 --> 00:03:47,970
creates a lot of noise in the front and

00:03:46,169 --> 00:03:50,639
development space to understand you know

00:03:47,970 --> 00:03:54,930
how do you choose the best path to get

00:03:50,639 --> 00:03:58,139
your job done so I tweeted out this list

00:03:54,930 --> 00:04:00,750
and I asked for input from people that

00:03:58,139 --> 00:04:02,430
follow me and mark drummond responded

00:04:00,750 --> 00:04:04,439
that of the list of things that I had

00:04:02,430 --> 00:04:07,229
put up as responsibilities for front-end

00:04:04,439 --> 00:04:08,459
developer i forgot crying and i had to

00:04:07,229 --> 00:04:10,769
agree with him when you look at this

00:04:08,459 --> 00:04:14,040
list that has like 60 responsibilities

00:04:10,769 --> 00:04:15,930
it feels completely overwhelming so

00:04:14,040 --> 00:04:18,090
whereas some days you know i feel like

00:04:15,930 --> 00:04:20,190
this most days there are definitely some

00:04:18,090 --> 00:04:23,370
days where I feel like this looking at

00:04:20,190 --> 00:04:25,289
you know how we as runnin developers

00:04:23,370 --> 00:04:26,610
complete the requirements we have to do

00:04:25,289 --> 00:04:27,180
and how we do it in the best way

00:04:26,610 --> 00:04:30,389
possible

00:04:27,180 --> 00:04:35,220
that makes our users as successful as

00:04:30,389 --> 00:04:36,720
possible so during this talk I really

00:04:35,220 --> 00:04:38,520
want you at the end to feel good about

00:04:36,720 --> 00:04:40,740
what you already know as a front-end

00:04:38,520 --> 00:04:42,650
developer and to understand that there

00:04:40,740 --> 00:04:44,820
are areas that we all don't understand

00:04:42,650 --> 00:04:46,410
within this community we're constantly

00:04:44,820 --> 00:04:48,500
learning from each other and with in

00:04:46,410 --> 00:04:51,210
Drupal 8 itself we're trying to build in

00:04:48,500 --> 00:04:53,910
support structures and features that

00:04:51,210 --> 00:04:56,460
allow us to develop you know as quickly

00:04:53,910 --> 00:05:01,460
and and to the best practices as

00:04:56,460 --> 00:05:04,050
possible so we have to talk about doubt

00:05:01,460 --> 00:05:06,539
doubt to me is something that I feel

00:05:04,050 --> 00:05:09,990
every day and I like to express this

00:05:06,539 --> 00:05:15,090
because I think too often we we get the

00:05:09,990 --> 00:05:18,210
sense that people that we aspire to or

00:05:15,090 --> 00:05:19,889
esteem know a lot more than we think

00:05:18,210 --> 00:05:22,169
they do I certainly feel this when I

00:05:19,889 --> 00:05:23,820
look at someone like leave Aroo I get

00:05:22,169 --> 00:05:25,680
the sense that I just don't understand

00:05:23,820 --> 00:05:29,000
CSS given you know the types of things

00:05:25,680 --> 00:05:32,280
that she's she's doing in her research

00:05:29,000 --> 00:05:35,760
so a really good example of you know

00:05:32,280 --> 00:05:36,900
this kind of fundamental moment of doubt

00:05:35,760 --> 00:05:39,240
to be experienced came during the

00:05:36,900 --> 00:05:42,750
development process of Drupal 8 so in

00:05:39,240 --> 00:05:45,960
2011 Drupal kind of opened its arms wide

00:05:42,750 --> 00:05:49,409
to outside libraries you know we pulled

00:05:45,960 --> 00:05:50,669
in Symphony we pulled in guzzle a little

00:05:49,409 --> 00:05:52,380
bit later on but we also pulled in some

00:05:50,669 --> 00:05:55,889
things in the front end we pulled in two

00:05:52,380 --> 00:06:00,030
libraries one was create j/s crate j/s

00:05:55,889 --> 00:06:01,770
is a library that essentially looks to

00:06:00,030 --> 00:06:04,860
the page finds anything that's editable

00:06:01,770 --> 00:06:07,020
makes that editable takes those changes

00:06:04,860 --> 00:06:09,990
saved them and provides them through an

00:06:07,020 --> 00:06:12,300
API for you to push back to whatever you

00:06:09,990 --> 00:06:14,610
know system you have behind that to save

00:06:12,300 --> 00:06:17,220
that content in our case it was Drupal

00:06:14,610 --> 00:06:19,199
so this allowed us to very quickly you

00:06:17,220 --> 00:06:20,820
know short circuit that piece of the

00:06:19,199 --> 00:06:23,220
puzzle that we were trying to solve for

00:06:20,820 --> 00:06:25,740
in place editing by giving us something

00:06:23,220 --> 00:06:27,120
that understood the Dom understood its

00:06:25,740 --> 00:06:28,979
semantically and then gave us

00:06:27,120 --> 00:06:34,349
information about how users were editing

00:06:28,979 --> 00:06:36,419
those pieces create j/s was also nicely

00:06:34,349 --> 00:06:39,060
coupled with a front and editor that we

00:06:36,419 --> 00:06:40,920
wanted to put into core Aloha Aloha was

00:06:39,060 --> 00:06:44,970
being developed as an html5

00:06:40,920 --> 00:06:50,970
of standards first in place editor just

00:06:44,970 --> 00:06:54,420
like ckeditor tiny MCE we had this

00:06:50,970 --> 00:06:56,580
crisis moment in late 2012 when we had

00:06:54,420 --> 00:06:59,640
been pushing forward with Aloha editor

00:06:56,580 --> 00:07:01,470
we knew there was some gaps in the

00:06:59,640 --> 00:07:03,270
function Ellen did they supported one

00:07:01,470 --> 00:07:05,130
very striking gap was the fact that you

00:07:03,270 --> 00:07:06,930
couldn't use Aloha on the back end on a

00:07:05,130 --> 00:07:08,730
back-end form to edit your content and

00:07:06,930 --> 00:07:09,840
we kind of had the sense that we're

00:07:08,730 --> 00:07:12,480
going to have to solve that problem in

00:07:09,840 --> 00:07:14,730
the future but then out of the darkness

00:07:12,480 --> 00:07:16,620
of their closets were they were

00:07:14,730 --> 00:07:19,800
developing the ckeditor folks emerged

00:07:16,620 --> 00:07:21,030
with not only an in-place editor but an

00:07:19,800 --> 00:07:23,790
editor that could work on the backend

00:07:21,030 --> 00:07:26,430
that had 10 years of development behind

00:07:23,790 --> 00:07:28,890
it and had excellent support for

00:07:26,430 --> 00:07:30,900
accessibility they also came to us with

00:07:28,890 --> 00:07:33,390
about four developers in two weeks of

00:07:30,900 --> 00:07:37,980
their time to make an integration with

00:07:33,390 --> 00:07:39,510
Drupal we we reached this point where we

00:07:37,980 --> 00:07:42,090
had to make an incredibly painful

00:07:39,510 --> 00:07:44,640
decision to break the ties with Aloha

00:07:42,090 --> 00:07:46,170
the relationships we had formed and to

00:07:44,640 --> 00:07:48,150
also give up in about eight months of

00:07:46,170 --> 00:07:53,060
work that we put in up to that point and

00:07:48,150 --> 00:07:55,380
essentially take a dive off a cliff and

00:07:53,060 --> 00:07:57,450
take a chance that we were going to make

00:07:55,380 --> 00:07:59,160
the right decision to switch editors

00:07:57,450 --> 00:08:05,730
essentially while the plane was in

00:07:59,160 --> 00:08:07,110
midair so I want to take this point just

00:08:05,730 --> 00:08:08,490
to mention and this is something that I

00:08:07,110 --> 00:08:10,250
think about is a front-end developer

00:08:08,490 --> 00:08:13,260
everyday that behind every line of code

00:08:10,250 --> 00:08:16,340
there's a fragile ego seeking

00:08:13,260 --> 00:08:18,540
affirmation you know we write code

00:08:16,340 --> 00:08:19,860
because I think we love it and when

00:08:18,540 --> 00:08:22,620
someone else loves it as well it's a

00:08:19,860 --> 00:08:26,130
good feeling I know that some days I'm

00:08:22,620 --> 00:08:28,710
not the best at being a positive force

00:08:26,130 --> 00:08:31,410
in development specifically when people

00:08:28,710 --> 00:08:34,440
mess with my passwords not making or

00:08:31,410 --> 00:08:37,380
allowing me to make my passwords as a as

00:08:34,440 --> 00:08:38,820
strong as i'd like them to be i actually

00:08:37,380 --> 00:08:40,890
think about this tweet a lot when I'm

00:08:38,820 --> 00:08:42,900
just about to like rage on somebody for

00:08:40,890 --> 00:08:44,070
doing something stupid I step back and

00:08:42,900 --> 00:08:46,860
you say know what I've probably done

00:08:44,070 --> 00:08:49,380
something stupid like that as well all

00:08:46,860 --> 00:08:51,570
right anyway so back to create we pulled

00:08:49,380 --> 00:08:54,730
out Aloha replace with ckeditor the

00:08:51,570 --> 00:08:57,910
reason that we had create in Cornell was

00:08:54,730 --> 00:08:59,410
coming less and less salient and we were

00:08:57,910 --> 00:09:02,139
running into problems with the model

00:08:59,410 --> 00:09:04,899
that create has for editing content in

00:09:02,139 --> 00:09:06,399
place they have a field based model so

00:09:04,899 --> 00:09:08,920
you added one thing you make a change

00:09:06,399 --> 00:09:10,779
you save it and that change gets pushed

00:09:08,920 --> 00:09:13,060
you know back into your content

00:09:10,779 --> 00:09:15,850
management system we were trying to move

00:09:13,060 --> 00:09:17,290
to an entity based editing model where

00:09:15,850 --> 00:09:19,720
you'd edit multiple fields in the front

00:09:17,290 --> 00:09:21,940
end get all those changes into a package

00:09:19,720 --> 00:09:24,579
and then push that change back into what

00:09:21,940 --> 00:09:29,529
maps nicely to a revision on the back

00:09:24,579 --> 00:09:31,540
end in Drupal the problem was that the

00:09:29,529 --> 00:09:34,060
model inside of create was almost

00:09:31,540 --> 00:09:37,000
impossible to change and I personally

00:09:34,060 --> 00:09:39,279
SAT there for about 48 hours coming up

00:09:37,000 --> 00:09:41,410
to a weekend trying to decide if I just

00:09:39,279 --> 00:09:43,300
didn't understand it as well as I could

00:09:41,410 --> 00:09:45,579
you know was I not understanding this

00:09:43,300 --> 00:09:49,449
library or did it really not do what we

00:09:45,579 --> 00:09:54,300
what we needed it to do so I spent a

00:09:49,449 --> 00:09:57,160
weekend looking at the possibility of

00:09:54,300 --> 00:09:58,720
running through this codes essentially

00:09:57,160 --> 00:09:59,769
bypassing create and getting to the

00:09:58,720 --> 00:10:01,149
point where I could edit something on

00:09:59,769 --> 00:10:02,920
the front and of Drupal and save it on

00:10:01,149 --> 00:10:06,370
the back end without create doing

00:10:02,920 --> 00:10:08,529
anything and I managed to do that so

00:10:06,370 --> 00:10:10,420
with that very happy prototype in place

00:10:08,529 --> 00:10:12,760
we looked at some of the other factors

00:10:10,420 --> 00:10:15,790
that affected this decision one of them

00:10:12,760 --> 00:10:17,860
being the commit history of create up to

00:10:15,790 --> 00:10:19,630
the point in April where we were faced

00:10:17,860 --> 00:10:22,449
with this decision to to pull it out and

00:10:19,630 --> 00:10:26,380
you know build our own code or to keep

00:10:22,449 --> 00:10:27,940
it and we had to recognize that there

00:10:26,380 --> 00:10:29,680
just wasn't the activity in this project

00:10:27,940 --> 00:10:32,230
that we had hoped was going to be there

00:10:29,680 --> 00:10:34,360
especially because there are other CMS's

00:10:32,230 --> 00:10:38,319
that were supposedly using this this

00:10:34,360 --> 00:10:40,930
piece of code so around April last year

00:10:38,319 --> 00:10:43,779
we made another decision to jump up a

00:10:40,930 --> 00:10:45,040
cliff essentially and validate 10 months

00:10:43,779 --> 00:10:48,930
of code that we would put into place at

00:10:45,040 --> 00:10:48,930
that point rip it out and write our own

00:10:53,170 --> 00:10:58,520
and this to me was probably the scariest

00:10:56,660 --> 00:11:01,130
decision I've ever taken as a developer

00:10:58,520 --> 00:11:03,350
because we didn't know if this was going

00:11:01,130 --> 00:11:05,240
to work we had no idea if we were going

00:11:03,350 --> 00:11:08,720
to you know bog ourselves down in custom

00:11:05,240 --> 00:11:10,340
code and then have to backtrack or you

00:11:08,720 --> 00:11:12,560
know waste time that we could spend

00:11:10,340 --> 00:11:21,170
developing other things fixing our bad

00:11:12,560 --> 00:11:24,490
decision and I've kind of come to this

00:11:21,170 --> 00:11:26,960
place with front-end development where

00:11:24,490 --> 00:11:30,290
the strike that i'm anticipating the

00:11:26,960 --> 00:11:31,580
sting of that decision i find is never

00:11:30,290 --> 00:11:34,340
as bad as i think it's going to be

00:11:31,580 --> 00:11:36,410
because the time that you spend you know

00:11:34,340 --> 00:11:38,210
building out one approach to a solution

00:11:36,410 --> 00:11:41,090
is often the time you need to understand

00:11:38,210 --> 00:11:43,370
the problem so for us the 10 months that

00:11:41,090 --> 00:11:45,140
we spent integrating create and a low

00:11:43,370 --> 00:11:47,150
editor was time for us to really

00:11:45,140 --> 00:11:49,490
understand what in place editing meant

00:11:47,150 --> 00:11:52,040
in Drupal so when it came time for us to

00:11:49,490 --> 00:11:53,240
build our own version of creating you

00:11:52,040 --> 00:11:57,950
know it really only took about five

00:11:53,240 --> 00:12:01,040
weeks and this comes down to this idea

00:11:57,950 --> 00:12:05,510
of confidence in front end coding so

00:12:01,040 --> 00:12:08,060
when I'm feeling a lack of confidence

00:12:05,510 --> 00:12:10,430
let's say I like to think about World of

00:12:08,060 --> 00:12:13,040
Warcraft so do we have any world of

00:12:10,430 --> 00:12:17,450
warcraft players in here any recovering

00:12:13,040 --> 00:12:19,880
so i'm a level 55 hunter i got out of

00:12:17,450 --> 00:12:23,480
warcraft just out of grad school where

00:12:19,880 --> 00:12:25,400
my addiction started and I remember

00:12:23,480 --> 00:12:29,120
something very specific about Warcraft

00:12:25,400 --> 00:12:30,470
when I'm feeling that I don't understand

00:12:29,120 --> 00:12:33,080
a problem so when you're fighting a

00:12:30,470 --> 00:12:35,240
monster in Warcraft you have the monster

00:12:33,080 --> 00:12:39,470
up in this little circle and you have

00:12:35,240 --> 00:12:41,480
its power represented by a number and

00:12:39,470 --> 00:12:43,040
the color of that number tells you your

00:12:41,480 --> 00:12:45,980
chances that you're going to be able to

00:12:43,040 --> 00:12:47,630
either defeat it or or not so yellow

00:12:45,980 --> 00:12:50,060
means that you've got a pretty good shot

00:12:47,630 --> 00:12:51,170
as long as you're clever red means that

00:12:50,060 --> 00:12:52,370
you're probably not going to survive but

00:12:51,170 --> 00:12:54,410
if you're lucky you might make it

00:12:52,370 --> 00:12:58,850
through and if it's the skull you just

00:12:54,410 --> 00:13:00,950
run so for me the skulls are anything to

00:12:58,850 --> 00:13:03,760
do with PHP in Drupal when I see that I

00:13:00,950 --> 00:13:03,760
just want to take off

00:13:03,830 --> 00:13:07,950
but anything to do a javascript is kind

00:13:06,330 --> 00:13:09,300
of a yellow at this point and what

00:13:07,950 --> 00:13:12,120
happens with the monsters in world of

00:13:09,300 --> 00:13:14,730
warcraft is as as you level they become

00:13:12,120 --> 00:13:17,250
relatively easier to tackle you know

00:13:14,730 --> 00:13:19,890
every time you go up to 81 and 82 is not

00:13:17,250 --> 00:13:26,610
that bad when you get to 84 and 82 was

00:13:19,890 --> 00:13:28,110
boring so I read this in a blog post and

00:13:26,610 --> 00:13:30,180
I wish I could I think it might have

00:13:28,110 --> 00:13:32,960
been Sarah Mae who said this I wish I

00:13:30,180 --> 00:13:35,070
could remember but she says that for

00:13:32,960 --> 00:13:36,690
expertise really comes down to the

00:13:35,070 --> 00:13:38,880
number of tricks that you develop over

00:13:36,690 --> 00:13:41,130
time a seasoned developer just has more

00:13:38,880 --> 00:13:43,410
tricks that they can bring to bear in a

00:13:41,130 --> 00:13:44,870
problem and one of those tricks just to

00:13:43,410 --> 00:13:48,930
give you an example that I have is

00:13:44,870 --> 00:13:51,750
jQuery underscore data so this little

00:13:48,930 --> 00:13:53,340
method which is extremely poorly

00:13:51,750 --> 00:13:54,780
documented I think I found it like

00:13:53,340 --> 00:13:57,030
looking through the jQuery object one

00:13:54,780 --> 00:14:00,540
day allows you to pass in a Dom element

00:13:57,030 --> 00:14:01,800
into the first argument and if you want

00:14:00,540 --> 00:14:03,210
you can ask for the events you can just

00:14:01,800 --> 00:14:05,670
pass in the element and get an object

00:14:03,210 --> 00:14:07,560
with the events key back but it'll tell

00:14:05,670 --> 00:14:10,350
you on any particular Dom element in the

00:14:07,560 --> 00:14:12,900
page what events are suicid with that

00:14:10,350 --> 00:14:14,640
Dom element what this allows you to do

00:14:12,900 --> 00:14:16,710
is to say like well I have an a tag that

00:14:14,640 --> 00:14:19,200
has a click event on it it's messing up

00:14:16,710 --> 00:14:21,480
I can go through and tunnel back to the

00:14:19,200 --> 00:14:23,220
function right click on the function get

00:14:21,480 --> 00:14:24,780
back to its declaration in the file and

00:14:23,220 --> 00:14:29,160
figure out what's causing the behavior

00:14:24,780 --> 00:14:30,870
that's you know the mystery and before I

00:14:29,160 --> 00:14:32,460
knew about this I would go from the

00:14:30,870 --> 00:14:34,320
other direction you know gripping the

00:14:32,460 --> 00:14:36,240
code base to find something that look

00:14:34,320 --> 00:14:38,850
familiar to get back to to the bad

00:14:36,240 --> 00:14:40,110
behavior so this is a you know just a

00:14:38,850 --> 00:14:42,600
little trick that I've had over time and

00:14:40,110 --> 00:14:45,420
the other bit about expertise that I've

00:14:42,600 --> 00:14:46,589
learned is that edge case awareness is

00:14:45,420 --> 00:14:49,440
something that you kind of develop

00:14:46,589 --> 00:14:53,190
intuitively and to give you an example

00:14:49,440 --> 00:14:56,010
of that I see a lot of new developers in

00:14:53,190 --> 00:14:57,780
Drupal who don't realize that this

00:14:56,010 --> 00:15:00,000
attached behaviors method is going to be

00:14:57,780 --> 00:15:02,250
called over and over and over again on a

00:15:00,000 --> 00:15:04,560
particular page load when an AJAX call

00:15:02,250 --> 00:15:06,060
is made anytime that there's new Dom

00:15:04,560 --> 00:15:08,190
elements coming from the server side

00:15:06,060 --> 00:15:10,020
into the page that need to get

00:15:08,190 --> 00:15:12,030
reinitialized this method gets called

00:15:10,020 --> 00:15:13,920
again and it's the source of a lot of

00:15:12,030 --> 00:15:16,110
trouble because if you have code in

00:15:13,920 --> 00:15:16,320
there that gets run functions that get

00:15:16,110 --> 00:15:18,090
to

00:15:16,320 --> 00:15:21,080
clared variables that get declared they

00:15:18,090 --> 00:15:23,220
all happen that all gets run again and

00:15:21,080 --> 00:15:26,180
until you realize that you just have to

00:15:23,220 --> 00:15:30,030
run jquery once to prevent this sort of

00:15:26,180 --> 00:15:31,230
reinitialize ation you end up you know

00:15:30,030 --> 00:15:33,540
banging your head on drupal and then

00:15:31,230 --> 00:15:37,590
like a level 6 monster becomes nothing

00:15:33,540 --> 00:15:41,340
when you're up in an 82 so I was trying

00:15:37,590 --> 00:15:44,610
to think of some tips for honing

00:15:41,340 --> 00:15:47,070
personal value a sort of personal value

00:15:44,610 --> 00:15:48,270
an expertise as developer and I just put

00:15:47,070 --> 00:15:50,250
it the list of things that I'm working

00:15:48,270 --> 00:15:51,810
on right now but I think they're they

00:15:50,250 --> 00:15:53,070
have a lot of value for developers you

00:15:51,810 --> 00:15:54,150
know as you're coming up and the one

00:15:53,070 --> 00:15:57,000
thing that I've really learned to value

00:15:54,150 --> 00:15:58,950
is writing tests they're really painful

00:15:57,000 --> 00:16:00,450
if you follow me on Twitter you'll know

00:15:58,950 --> 00:16:05,130
the day that I'm writing tests because I

00:16:00,450 --> 00:16:06,420
am just a whiny whiny son of a gun but

00:16:05,130 --> 00:16:08,010
once you have them they're amazing

00:16:06,420 --> 00:16:09,240
because you can make changes and not

00:16:08,010 --> 00:16:12,090
have to worry so much about what you're

00:16:09,240 --> 00:16:15,690
breaking I'm currently reading a lot

00:16:12,090 --> 00:16:16,710
about performance in JavaScript just

00:16:15,690 --> 00:16:20,160
trying to understand like how do you

00:16:16,710 --> 00:16:22,260
make a loop more performance and the

00:16:20,160 --> 00:16:24,870
things that seemed to be surfacing

00:16:22,260 --> 00:16:27,090
within the front-end worlds that I think

00:16:24,870 --> 00:16:28,740
will have value going forward are the

00:16:27,090 --> 00:16:31,440
basics like we're coming back to the

00:16:28,740 --> 00:16:33,300
basics after a decade of abstraction and

00:16:31,440 --> 00:16:35,970
libraries on top of those like Dom

00:16:33,300 --> 00:16:38,540
methods the query selector enquiry

00:16:35,970 --> 00:16:40,740
select all that find things on the page

00:16:38,540 --> 00:16:42,300
what you know in the past would have

00:16:40,740 --> 00:16:44,910
been something to use jQuery for are

00:16:42,300 --> 00:16:47,040
coming back because the browser's in the

00:16:44,910 --> 00:16:51,690
and the user agents we work in actually

00:16:47,040 --> 00:16:54,990
support them and I had the opportunity

00:16:51,690 --> 00:16:57,750
last Tuesday to meet Brendan I in

00:16:54,990 --> 00:16:59,520
Douglas Crockford at the tc39 meeting in

00:16:57,750 --> 00:17:02,460
Boston they're talking about the ACMA

00:16:59,520 --> 00:17:04,790
script the ACMA script 6 specification

00:17:02,460 --> 00:17:06,780
that should be coming up pretty soon

00:17:04,790 --> 00:17:08,579
sorry that was just like it was a big

00:17:06,780 --> 00:17:11,370
moment for me Brendan I she was the guy

00:17:08,579 --> 00:17:16,050
who invented JavaScript like 16 years

00:17:11,370 --> 00:17:18,180
ago so my recommendation to you as if

00:17:16,050 --> 00:17:20,010
you're like sort of a novice front-end

00:17:18,180 --> 00:17:21,810
developer is really focus on the basics

00:17:20,010 --> 00:17:22,890
of acma script five and six I know

00:17:21,810 --> 00:17:24,930
there's a lot of talk about the copy

00:17:22,890 --> 00:17:26,400
script and stuff like that but knowing

00:17:24,930 --> 00:17:27,709
the basics allows you to understand

00:17:26,400 --> 00:17:28,700
those

00:17:27,709 --> 00:17:30,890
structures in those higher-level

00:17:28,700 --> 00:17:33,770
languages in a way that I should become

00:17:30,890 --> 00:17:36,860
a better developer and then although I

00:17:33,770 --> 00:17:38,330
love SAS I can't say enough that when I

00:17:36,860 --> 00:17:39,770
have someone come up to me and say that

00:17:38,330 --> 00:17:42,049
and this happened at a drupal meetup

00:17:39,770 --> 00:17:43,940
embossing the day she said I kind of

00:17:42,049 --> 00:17:45,710
know CSS but I really have to learn sass

00:17:43,940 --> 00:17:47,299
and I said to her you don't really have

00:17:45,710 --> 00:17:49,970
to learn sass you really have to learn

00:17:47,299 --> 00:17:51,140
CSS when you get good at that SAS is

00:17:49,970 --> 00:17:58,130
going to be the thing that makes you a

00:17:51,140 --> 00:17:59,960
better developer and then working with

00:17:58,130 --> 00:18:01,820
someone who's better than you is

00:17:59,960 --> 00:18:03,710
probably the best way to become a better

00:18:01,820 --> 00:18:05,690
develop but but I've also found and

00:18:03,710 --> 00:18:07,580
there are many people here who will

00:18:05,690 --> 00:18:10,190
agree with this that mentoring someone

00:18:07,580 --> 00:18:13,909
who isn't good yet is probably the best

00:18:10,190 --> 00:18:15,710
way to get better and then the Pythia

00:18:13,909 --> 00:18:18,740
stand best piece of advice I have from

00:18:15,710 --> 00:18:20,990
my she's never the mentor I father on

00:18:18,740 --> 00:18:24,110
Twitter she's really quite good as just

00:18:20,990 --> 00:18:25,610
try hard shed so if you don't know how

00:18:24,110 --> 00:18:27,649
something works and I tell this to my

00:18:25,610 --> 00:18:31,070
JavaScript students all the time you

00:18:27,649 --> 00:18:36,110
can't break a page you can only you know

00:18:31,070 --> 00:18:37,640
break it for that one refresh alright so

00:18:36,110 --> 00:18:41,600
we've talked a bit about how to become a

00:18:37,640 --> 00:18:42,740
better developer and I find that one of

00:18:41,600 --> 00:18:44,360
the shortcuts becoming a better

00:18:42,740 --> 00:18:47,059
developer is to talk to people who

00:18:44,360 --> 00:18:48,980
already know what they're doing but in

00:18:47,059 --> 00:18:51,620
our industry in particular we seem to

00:18:48,980 --> 00:18:53,809
have a lot of what I call celebrity

00:18:51,620 --> 00:18:55,520
developers who gained a lot of the

00:18:53,809 --> 00:19:00,260
oxygen in the room they really kind of

00:18:55,520 --> 00:19:02,630
steal the spotlight and this becomes a

00:19:00,260 --> 00:19:05,179
problem because the problems that we

00:19:02,630 --> 00:19:08,299
focus on as a community tend to be the

00:19:05,179 --> 00:19:13,429
most rarified and you know important but

00:19:08,299 --> 00:19:15,200
somewhat I don't assay insignificant to

00:19:13,429 --> 00:19:17,090
to downplay the problem but they're very

00:19:15,200 --> 00:19:20,929
particular so let me give you one

00:19:17,090 --> 00:19:23,570
example we have 20 million high density

00:19:20,929 --> 00:19:25,340
screen devices sold in 2011 this was by

00:19:23,570 --> 00:19:27,890
Apple's we have you know high density

00:19:25,340 --> 00:19:33,830
screens on laptops iPhones and whatnot

00:19:27,890 --> 00:19:35,899
in that same year they're about 6.5

00:19:33,830 --> 00:19:38,690
million Americans with visual

00:19:35,899 --> 00:19:41,370
impairments that lived in the United

00:19:38,690 --> 00:19:46,920
States so either completely blind or

00:19:41,370 --> 00:19:49,890
what I'm visually impaired I had this

00:19:46,920 --> 00:19:51,840
tweet come across my Twitter stream you

00:19:49,890 --> 00:19:53,280
know if you're into front-end

00:19:51,840 --> 00:19:55,559
development you probably follow Brad

00:19:53,280 --> 00:19:58,500
Frost you probably hear about these

00:19:55,559 --> 00:20:00,990
responsive patterns days so we have

00:19:58,500 --> 00:20:02,700
responsive patterns with Brad faust sold

00:20:00,990 --> 00:20:07,410
out over the weekend he agreed to add

00:20:02,700 --> 00:20:10,730
four more seats fantastic how many of

00:20:07,410 --> 00:20:12,960
you can imagine a tweet like this

00:20:10,730 --> 00:20:15,179
accessible authoring tool patterns with

00:20:12,960 --> 00:20:16,650
awesome dev sold out over the weekend

00:20:15,179 --> 00:20:20,580
and then she agreed to add four more

00:20:16,650 --> 00:20:24,720
seats fantastic I personally can't

00:20:20,580 --> 00:20:27,630
imagine having an accessibility event be

00:20:24,720 --> 00:20:30,059
as popular as we might imagine you know

00:20:27,630 --> 00:20:35,309
responsive web design or some sort of

00:20:30,059 --> 00:20:39,990
semantic authoring tool but the thing is

00:20:35,309 --> 00:20:41,640
if we look at our user bases we find

00:20:39,990 --> 00:20:44,490
that there are a lot more people than

00:20:41,640 --> 00:20:47,040
them you know we might realize who are

00:20:44,490 --> 00:20:49,500
accessing content then we're trying to

00:20:47,040 --> 00:20:51,090
provide to them in ways that are not

00:20:49,500 --> 00:20:55,620
visual that have nothing to do with

00:20:51,090 --> 00:20:58,230
responsive you know screens so in 2012

00:20:55,620 --> 00:21:00,660
the web aim survey surveyed seventeen

00:20:58,230 --> 00:21:02,309
hundred and eighty-two visually impaired

00:21:00,660 --> 00:21:03,720
individuals and asked them how do you

00:21:02,309 --> 00:21:06,270
access the internet how do you access

00:21:03,720 --> 00:21:09,210
information and when they ask them about

00:21:06,270 --> 00:21:11,820
mobile devices what they found is that

00:21:09,210 --> 00:21:13,590
seventy two percent of those visually

00:21:11,820 --> 00:21:15,720
impaired people access the internet

00:21:13,590 --> 00:21:17,910
through a mobile device of that seventy

00:21:15,720 --> 00:21:21,210
two percent fifty-eight percent access

00:21:17,910 --> 00:21:23,570
the internet through an iphone so that's

00:21:21,210 --> 00:21:25,770
if you do the numbers 6.5 million

00:21:23,570 --> 00:21:27,240
visually impaired people seventy percent

00:21:25,770 --> 00:21:29,700
you know fifty two percent you end up

00:21:27,240 --> 00:21:31,770
with like two million people the United

00:21:29,700 --> 00:21:34,590
States potentially are using their

00:21:31,770 --> 00:21:37,950
iPhone with your slick and squishy

00:21:34,590 --> 00:21:40,590
responsive web design with absolutely no

00:21:37,950 --> 00:21:42,270
need for that slick squishiness they're

00:21:40,590 --> 00:21:45,470
going right past it to the content

00:21:42,270 --> 00:21:45,470
through the screen

00:21:49,720 --> 00:21:57,559
but what I don't see in our industry is

00:21:52,820 --> 00:22:01,909
the type of interest and enthusiasm

00:21:57,559 --> 00:22:03,679
about that kind of content access that

00:22:01,909 --> 00:22:05,809
we have for these sort of high-profile

00:22:03,679 --> 00:22:09,080
things like css3 and animations

00:22:05,809 --> 00:22:11,870
gradients and responsive web design so

00:22:09,080 --> 00:22:14,270
Nathan Smith it's fantastic person to

00:22:11,870 --> 00:22:16,460
follow on Twitter he expressed the

00:22:14,270 --> 00:22:19,429
sentiment that I was feeling as I was

00:22:16,460 --> 00:22:20,900
writing this presentation that you know

00:22:19,429 --> 00:22:26,330
these concepts of responsive web design

00:22:20,900 --> 00:22:27,799
and Ajax have come in and killed as a

00:22:26,330 --> 00:22:30,500
strong word and you'll notice that um

00:22:27,799 --> 00:22:32,630
Ethan Marcotte gets a little and sense

00:22:30,500 --> 00:22:35,840
at the bottom there athan apologize a

00:22:32,630 --> 00:22:37,970
little bit but they've overshadowed

00:22:35,840 --> 00:22:41,330
let's say progressive enhancement which

00:22:37,970 --> 00:22:42,590
really underlies responsive web design I

00:22:41,330 --> 00:22:44,419
mean responsive web design is

00:22:42,590 --> 00:22:53,390
progressive enhancement for visual

00:22:44,419 --> 00:22:54,799
interfaces so let's take an analogy to

00:22:53,390 --> 00:22:58,280
understand what progressive enhancement

00:22:54,799 --> 00:23:00,320
really means I Drupal gov days a couple

00:22:58,280 --> 00:23:02,720
months ago Kathryn McNally was talking

00:23:00,320 --> 00:23:06,590
about accessibility and one of her

00:23:02,720 --> 00:23:08,330
examples was this idea of an elevator so

00:23:06,590 --> 00:23:11,630
let's say you're a developer who's

00:23:08,330 --> 00:23:14,150
building elevators you have to be sure

00:23:11,630 --> 00:23:16,460
that your elevator this slick you know

00:23:14,150 --> 00:23:19,370
the futuristic transportation method is

00:23:16,460 --> 00:23:21,470
a hundred percent safe it can't fall I

00:23:19,370 --> 00:23:23,690
can't stop when your elevator breaks

00:23:21,470 --> 00:23:25,159
you've essentially trapped people inside

00:23:23,690 --> 00:23:29,780
of the box that they have no way of

00:23:25,159 --> 00:23:32,570
getting out of in contrast if we look at

00:23:29,780 --> 00:23:34,789
something like an escalator it does the

00:23:32,570 --> 00:23:37,309
same job carries people from one level

00:23:34,789 --> 00:23:40,010
to another but when it breaks it becomes

00:23:37,309 --> 00:23:44,150
a flight of stairs you can still get to

00:23:40,010 --> 00:23:47,750
the top of that conveyance without you

00:23:44,150 --> 00:23:49,250
know needing outside assistance and I've

00:23:47,750 --> 00:23:50,330
been working on an accessibility up to

00:23:49,250 --> 00:23:53,120
this point for a couple of months but

00:23:50,330 --> 00:23:54,860
this analogy really struck home for me

00:23:53,120 --> 00:23:58,429
about what progressive enhancement is

00:23:54,860 --> 00:24:00,409
it's starting with escalators starting

00:23:58,429 --> 00:24:02,390
with stairs and building the escalators

00:24:00,409 --> 00:24:05,090
on top of them it's making sure that the

00:24:02,390 --> 00:24:07,910
the fundamental pieces of our interfaces

00:24:05,090 --> 00:24:16,010
are going to work when when everything

00:24:07,910 --> 00:24:17,660
breaks down so personally as I think

00:24:16,010 --> 00:24:20,810
about the front-end development space

00:24:17,660 --> 00:24:25,250
I'm trying to distill it down into the

00:24:20,810 --> 00:24:29,000
primary the primary values one of those

00:24:25,250 --> 00:24:32,810
is content so to me what we do as

00:24:29,000 --> 00:24:35,210
developers is provide content and we

00:24:32,810 --> 00:24:36,650
provide access to that content that is

00:24:35,210 --> 00:24:38,360
essentially the the value that we

00:24:36,650 --> 00:24:40,370
provide is professionals there's

00:24:38,360 --> 00:24:41,780
information out there we're making it

00:24:40,370 --> 00:24:43,910
possible for individuals out in the

00:24:41,780 --> 00:24:46,670
world to get to that content no matter

00:24:43,910 --> 00:24:49,760
what means they have available you know

00:24:46,670 --> 00:24:52,730
if they're cited they're not cited if

00:24:49,760 --> 00:24:57,830
they can only use their you know tactile

00:24:52,730 --> 00:24:59,750
sensory inputs and I really have to

00:24:57,830 --> 00:25:01,670
remind myself all the time that the page

00:24:59,750 --> 00:25:03,260
is not the content the page is one of

00:25:01,670 --> 00:25:09,710
the means that we use to present the

00:25:03,260 --> 00:25:12,860
content so by training before i got into

00:25:09,710 --> 00:25:16,340
development i was a linguist i focused

00:25:12,860 --> 00:25:17,990
on studying language of the world what

00:25:16,340 --> 00:25:22,750
we call topology or comparative

00:25:17,990 --> 00:25:26,330
linguistics and i wrote a grammar of

00:25:22,750 --> 00:25:30,020
verbs and mounded luncheon in a now

00:25:26,330 --> 00:25:32,540
extinct native american language but the

00:25:30,020 --> 00:25:36,680
thing that struck me i think is a

00:25:32,540 --> 00:25:38,150
freshman one day was a professor who

00:25:36,680 --> 00:25:42,830
focused on child language acquisition

00:25:38,150 --> 00:25:45,470
and her thesis was that we don't know of

00:25:42,830 --> 00:25:47,150
an upper limit for children and the

00:25:45,470 --> 00:25:48,860
acquisition of language she was

00:25:47,150 --> 00:25:51,440
personally studying children acquiring

00:25:48,860 --> 00:25:54,470
four languages at once English French

00:25:51,440 --> 00:25:58,250
American Sign Language and Kip Makua

00:25:54,470 --> 00:25:59,750
sign language and once she you know

00:25:58,250 --> 00:26:02,600
proved to us over the course of a

00:25:59,750 --> 00:26:08,360
semester was that the human capacity for

00:26:02,600 --> 00:26:10,460
language is not expressed or bound up in

00:26:08,360 --> 00:26:12,380
any of the medium or the media that we

00:26:10,460 --> 00:26:14,840
use to express it

00:26:12,380 --> 00:26:18,400
so specifically language is not speech

00:26:14,840 --> 00:26:23,660
and we can see this in the way that a

00:26:18,400 --> 00:26:42,980
child learns how to babble and sign

00:26:23,660 --> 00:26:45,440
language so that child wasn't saying

00:26:42,980 --> 00:26:48,980
anything with those hand movements they

00:26:45,440 --> 00:26:51,920
were like you know ma ma ma ba ba ba has

00:26:48,980 --> 00:26:53,840
its learning to articulate this

00:26:51,920 --> 00:26:55,940
professor said to us that you know

00:26:53,840 --> 00:26:58,550
there's a common held miss belief that

00:26:55,940 --> 00:27:01,100
if you teach a child sign language it's

00:26:58,550 --> 00:27:02,720
going to learn how to speak sooner learn

00:27:01,100 --> 00:27:05,960
how to communicate sooner than it would

00:27:02,720 --> 00:27:07,700
if it were taught spoken language but

00:27:05,960 --> 00:27:09,500
the reality is that the child is

00:27:07,700 --> 00:27:11,570
incapable of producing the spoken

00:27:09,500 --> 00:27:13,490
language until about two months after

00:27:11,570 --> 00:27:16,490
it's capable of producing signed

00:27:13,490 --> 00:27:17,960
language what you're doing by teaching

00:27:16,490 --> 00:27:21,350
the child sign language is you're

00:27:17,960 --> 00:27:25,520
accessing the capacity for speech or for

00:27:21,350 --> 00:27:28,310
language that exists there already you

00:27:25,520 --> 00:27:31,130
know at the age of eight or nine months

00:27:28,310 --> 00:27:33,140
they're already capable of producing you

00:27:31,130 --> 00:27:40,400
know words and babbling you can just get

00:27:33,140 --> 00:27:41,810
to that capacity faster through hands so

00:27:40,400 --> 00:27:43,520
I'd like to take this analogy from my

00:27:41,810 --> 00:27:46,550
past life and bring it forward to the

00:27:43,520 --> 00:27:48,830
current and understand that the content

00:27:46,550 --> 00:27:52,670
that we're providing to end-users is

00:27:48,830 --> 00:27:55,370
like our capacity for language it exists

00:27:52,670 --> 00:27:56,840
and we as professionals are simply

00:27:55,370 --> 00:27:59,420
providing the means of getting to it

00:27:56,840 --> 00:28:00,620
where you know teaching our users to

00:27:59,420 --> 00:28:06,880
speak we're teaching them to sign

00:28:00,620 --> 00:28:08,700
through the interfaces that we build and

00:28:06,880 --> 00:28:11,040
I personally

00:28:08,700 --> 00:28:13,920
the delivery of content down into four

00:28:11,040 --> 00:28:16,500
different areas the first and most

00:28:13,920 --> 00:28:19,080
important to me is accessibility and I

00:28:16,500 --> 00:28:21,390
don't define accessibility as simply non

00:28:19,080 --> 00:28:23,160
visual interfaces I lump visual

00:28:21,390 --> 00:28:25,650
interfaces in that category of

00:28:23,160 --> 00:28:27,960
accessibility because what we're doing

00:28:25,650 --> 00:28:30,870
is making content accessible to visual

00:28:27,960 --> 00:28:33,570
people as a profession we tend to think

00:28:30,870 --> 00:28:35,070
about our interfaces as visual things we

00:28:33,570 --> 00:28:37,500
get caught up in responsive web design

00:28:35,070 --> 00:28:41,100
we get caught up in high-density

00:28:37,500 --> 00:28:44,070
scalable images it's probably true that

00:28:41,100 --> 00:28:47,640
the major percentage of our user base is

00:28:44,070 --> 00:28:49,350
visual but at the same time we can't

00:28:47,640 --> 00:28:52,770
focus on that exclusively it's it's like

00:28:49,350 --> 00:28:55,020
building you know an apple tree that

00:28:52,770 --> 00:28:56,820
only 10 foot pachyderm standing at a

00:28:55,020 --> 00:28:59,100
time legs at the forefoot trunk is able

00:28:56,820 --> 00:29:00,690
to access and saying that those are the

00:28:59,100 --> 00:29:02,220
users were going to support the rest of

00:29:00,690 --> 00:29:06,030
those people on the ground can figure it

00:29:02,220 --> 00:29:09,480
out for themselves the other aspect of

00:29:06,030 --> 00:29:14,580
content is find ability and what this

00:29:09,480 --> 00:29:17,790
essentially comes down to is the URL so

00:29:14,580 --> 00:29:20,010
if you remember back in 2010 when

00:29:17,790 --> 00:29:22,230
Twitter broke the internet they

00:29:20,010 --> 00:29:26,160
introduced the hash bang pattern into

00:29:22,230 --> 00:29:29,070
their URLs and they turned what was a

00:29:26,160 --> 00:29:31,440
findable locatable resource into a

00:29:29,070 --> 00:29:34,710
hidden resource so they took a tweet

00:29:31,440 --> 00:29:37,740
that you were able to you know address

00:29:34,710 --> 00:29:39,330
through a single URL and turned it into

00:29:37,740 --> 00:29:40,890
something that had to be interpreted by

00:29:39,330 --> 00:29:44,450
a user agent in order to get that

00:29:40,890 --> 00:29:44,450
content they broke the internet

00:29:45,530 --> 00:29:52,500
yesterday I had someone come up to me

00:29:47,990 --> 00:29:55,610
here and say we have to build for Drupal

00:29:52,500 --> 00:29:58,230
8 a completely separate content

00:29:55,610 --> 00:30:00,510
administration layer in backbone or

00:29:58,230 --> 00:30:02,490
angular what have you and just rip out

00:30:00,510 --> 00:30:05,400
the theming layer and I said yes I

00:30:02,490 --> 00:30:07,530
totally agree and then I asked but the

00:30:05,400 --> 00:30:09,540
the one problem I have with that

00:30:07,530 --> 00:30:12,470
solution is what happens when you go to

00:30:09,540 --> 00:30:16,500
node 1 if we rip out the theming layer

00:30:12,470 --> 00:30:20,460
how do we provide content someone who's

00:30:16,500 --> 00:30:21,420
arriving at our website through a stable

00:30:20,460 --> 00:30:23,100
URL the

00:30:21,420 --> 00:30:25,820
perhaps hasn't you know gotten into our

00:30:23,100 --> 00:30:28,500
application yet that we've built on top

00:30:25,820 --> 00:30:30,870
and I think we always have to remember

00:30:28,500 --> 00:30:32,070
as front-end developers that it's the

00:30:30,870 --> 00:30:34,500
content that we're getting to the end

00:30:32,070 --> 00:30:38,130
user all the you know goodness that we

00:30:34,500 --> 00:30:42,890
sprinkle on top cannot make that you

00:30:38,130 --> 00:30:42,890
know cannot undermine that basic tenant

00:30:45,680 --> 00:30:51,960
so another piece of content is

00:30:48,090 --> 00:30:53,400
personalization and this is something i

00:30:51,960 --> 00:30:55,350
think that's coming up more and more in

00:30:53,400 --> 00:30:58,250
triple development i'm certainly getting

00:30:55,350 --> 00:31:00,960
pressure from people above me at aqua to

00:30:58,250 --> 00:31:04,080
to work on this the problem with

00:31:00,960 --> 00:31:08,820
personalization is I conflicts with

00:31:04,080 --> 00:31:12,570
performance so in Drupal 7 and into

00:31:08,820 --> 00:31:14,630
Drupal 8 we had the situation on node

00:31:12,570 --> 00:31:18,180
Pages especially list of known pages

00:31:14,630 --> 00:31:20,640
where you were told you know how many

00:31:18,180 --> 00:31:22,800
comments in a particular node you hadn't

00:31:20,640 --> 00:31:25,350
read yet this is a really interesting

00:31:22,800 --> 00:31:27,030
piece of personalization because when

00:31:25,350 --> 00:31:28,830
you are on a you know list of 10 nodes

00:31:27,030 --> 00:31:32,010
you can know immediately how many you

00:31:28,830 --> 00:31:36,090
have to drill into to see comments the

00:31:32,010 --> 00:31:38,010
problem arises is this information is

00:31:36,090 --> 00:31:40,260
specific to you how many things you've

00:31:38,010 --> 00:31:42,150
looked at already and once we get into

00:31:40,260 --> 00:31:45,630
user-specific information on a page

00:31:42,150 --> 00:31:49,020
we've got into user specific cash right

00:31:45,630 --> 00:31:52,500
we can only cash this item and reuse it

00:31:49,020 --> 00:31:54,450
for you personally so when Lyra's spent

00:31:52,500 --> 00:31:56,490
quite a bit of time over the past five

00:31:54,450 --> 00:31:58,140
months figuring out a way for us to

00:31:56,490 --> 00:32:00,510
provide this information to the end user

00:31:58,140 --> 00:32:02,660
in a way that doesn't make the page

00:32:00,510 --> 00:32:04,710
itself from the server unique

00:32:02,660 --> 00:32:07,490
essentially you know providing the

00:32:04,710 --> 00:32:12,570
information on the on the client side

00:32:07,490 --> 00:32:14,730
and then the other aspect of content

00:32:12,570 --> 00:32:16,530
delivery is speed we have to get

00:32:14,730 --> 00:32:20,820
information to people as fast as

00:32:16,530 --> 00:32:23,250
possible but we're also limited by the

00:32:20,820 --> 00:32:27,840
devices and the user agents that we're

00:32:23,250 --> 00:32:29,280
working with so something that I think

00:32:27,840 --> 00:32:31,470
just came to my attention within the

00:32:29,280 --> 00:32:34,470
past couple of months is that a mobile

00:32:31,470 --> 00:32:35,850
device spends about 450 milliseconds

00:32:34,470 --> 00:32:38,190
before it's even gotten

00:32:35,850 --> 00:32:40,230
any information from the server just

00:32:38,190 --> 00:32:42,600
establishing communication between your

00:32:40,230 --> 00:32:45,929
device in the server so about 150

00:32:42,600 --> 00:32:48,840
milliseconds just send out 150 to get a

00:32:45,929 --> 00:32:54,929
response 150 to say I got your response

00:32:48,840 --> 00:32:58,980
and then we get data so as we're trying

00:32:54,929 --> 00:33:01,490
to make Drupal 8 faster we're very aware

00:32:58,980 --> 00:33:03,780
that we have these very hard limits

00:33:01,490 --> 00:33:06,299
sitting just underneath us if we make a

00:33:03,780 --> 00:33:12,539
page load in 20 milliseconds it's still

00:33:06,299 --> 00:33:15,809
going to be 470 on your phone okay so

00:33:12,539 --> 00:33:16,740
with that incredibly long preamble let's

00:33:15,809 --> 00:33:29,610
look at some of the things we're going

00:33:16,740 --> 00:33:31,320
to get and Drupal 8 personally the thing

00:33:29,610 --> 00:33:34,380
that I'm most excited about in Drupal 8

00:33:31,320 --> 00:33:36,720
is a rest built right into core I've

00:33:34,380 --> 00:33:38,580
tried to install services module maybe

00:33:36,720 --> 00:33:42,000
like five tons in my life and I've never

00:33:38,580 --> 00:33:44,880
succeeded in getting it to work rest for

00:33:42,000 --> 00:33:48,929
me works right out of the box most of

00:33:44,880 --> 00:33:52,740
the time and sorry I just like that

00:33:48,929 --> 00:33:54,450
picture a lot when I think about HD HTTP

00:33:52,740 --> 00:33:55,770
methods I think about throwing fish and

00:33:54,450 --> 00:33:59,960
how like if someone threw fish at me I'd

00:33:55,770 --> 00:33:59,960
be like four or three not accepting that

00:34:00,980 --> 00:34:08,940
all right so here's a bit of a video i'm

00:34:03,990 --> 00:34:10,350
using postman to do a post into my

00:34:08,940 --> 00:34:18,750
Drupal installation we're going to

00:34:10,350 --> 00:34:20,879
create a node with some data we've got a

00:34:18,750 --> 00:34:24,899
title and a couple of things you have to

00:34:20,879 --> 00:34:26,639
send to it we get a response back 201

00:34:24,899 --> 00:34:28,440
this thing was created inside the

00:34:26,639 --> 00:34:30,359
headers that we get back we're told the

00:34:28,440 --> 00:34:32,780
location of that new piece of content we

00:34:30,359 --> 00:34:32,780
just created

00:34:36,630 --> 00:34:50,190
and we can go look at it right so we got

00:34:48,750 --> 00:34:55,910
that piece of content we just created

00:34:50,190 --> 00:34:58,260
through an HTTP method back as JSON and

00:34:55,910 --> 00:34:59,970
if we look at an installation that had

00:34:58,260 --> 00:35:06,420
no content up to that point we see that

00:34:59,970 --> 00:35:08,910
we now have a new node so you can

00:35:06,420 --> 00:35:11,370
imagine what this means for your front

00:35:08,910 --> 00:35:13,680
end applications you can very easily

00:35:11,370 --> 00:35:17,310
create content update content delete

00:35:13,680 --> 00:35:21,180
content we're working at the moment on a

00:35:17,310 --> 00:35:24,090
backbone module that extends the

00:35:21,180 --> 00:35:27,360
backbone model for you and creates the

00:35:24,090 --> 00:35:30,720
sinking endpoints to update things like

00:35:27,360 --> 00:35:32,910
nodes and you know pages and articles a

00:35:30,720 --> 00:35:34,890
layer that automatically understands the

00:35:32,910 --> 00:35:37,380
structure of that data that is coming

00:35:34,890 --> 00:35:40,430
back from Drupal and will allow you to

00:35:37,380 --> 00:35:45,810
simply extend the Drupal backbone module

00:35:40,430 --> 00:35:52,020
extension of the backbone model I was a

00:35:45,810 --> 00:35:56,220
lot of very similar words so we're

00:35:52,020 --> 00:35:58,500
getting back bone with the Drupal this

00:35:56,220 --> 00:36:00,090
was an incredibly consent or contentious

00:35:58,500 --> 00:36:02,250
decision when we decided to go with

00:36:00,090 --> 00:36:06,870
backbone it took months of back and

00:36:02,250 --> 00:36:09,240
forth to get this into core but once we

00:36:06,870 --> 00:36:11,520
got it we really took off and you know

00:36:09,240 --> 00:36:14,130
started using it heavily I think there

00:36:11,520 --> 00:36:19,860
are many good examples inside of court

00:36:14,130 --> 00:36:22,170
now of let's see here we go of patterns

00:36:19,860 --> 00:36:24,120
that we're developing that take this

00:36:22,170 --> 00:36:26,760
idea of content you know sort of a

00:36:24,120 --> 00:36:30,300
capital C content and expose it to the

00:36:26,760 --> 00:36:32,580
end user through whatever medium they're

00:36:30,300 --> 00:36:35,460
most comfortable with specifically we've

00:36:32,580 --> 00:36:38,130
broken the interface into visual and

00:36:35,460 --> 00:36:40,500
oral components that odd that are all

00:36:38,130 --> 00:36:42,240
driven from a common backbone model so

00:36:40,500 --> 00:36:43,980
this model stores the state of the

00:36:42,240 --> 00:36:46,530
application so the state of your toolbar

00:36:43,980 --> 00:36:47,470
or the state of your contextual edit

00:36:46,530 --> 00:36:50,560
links

00:36:47,470 --> 00:36:53,980
and it expresses that state to the end

00:36:50,560 --> 00:36:55,450
user in whatever form you know they're

00:36:53,980 --> 00:36:59,080
most comfortable in specifically with

00:36:55,450 --> 00:37:01,150
the oral when we have something like the

00:36:59,080 --> 00:37:04,150
open or closed state of the tray change

00:37:01,150 --> 00:37:07,180
we're able to express that out to a

00:37:04,150 --> 00:37:08,950
spoken user agent at the same time we

00:37:07,180 --> 00:37:11,530
express that state of the model out to

00:37:08,950 --> 00:37:14,560
the visual layer to the screen by

00:37:11,530 --> 00:37:18,940
opening or closing that drawer and this

00:37:14,560 --> 00:37:24,310
leverages some bits we've gotten to core

00:37:18,940 --> 00:37:26,950
here the the Drupal announced bent so

00:37:24,310 --> 00:37:29,740
again we're thinking with backbone in a

00:37:26,950 --> 00:37:33,460
Content first way and using it to

00:37:29,740 --> 00:37:34,810
enhance the experience I know you've

00:37:33,460 --> 00:37:37,330
probably heard about twig templates like

00:37:34,810 --> 00:37:38,590
a bazillion times so far and it's only

00:37:37,330 --> 00:37:40,270
tuesday and you're only going to hear

00:37:38,590 --> 00:37:41,470
about the more the only reason i really

00:37:40,270 --> 00:37:42,520
bring it up at this point is because i

00:37:41,470 --> 00:37:46,180
need to tell you about something we're

00:37:42,520 --> 00:37:47,590
not going to get later on but for anyone

00:37:46,180 --> 00:37:49,599
who hasn't heard about them because

00:37:47,590 --> 00:37:52,660
you've been under a rock perhaps for

00:37:49,599 --> 00:37:56,920
like the past 12 hours the twix

00:37:52,660 --> 00:38:00,430
templates on the server side are brought

00:37:56,920 --> 00:38:03,790
in from the symphony import and they

00:38:00,430 --> 00:38:05,710
allow us to expose content to end users

00:38:03,790 --> 00:38:07,359
without using PHP so you don't have

00:38:05,710 --> 00:38:09,339
things like database access in a twig

00:38:07,359 --> 00:38:11,859
template and we also have a kind of a

00:38:09,339 --> 00:38:14,109
common ish syntax this percentage syntax

00:38:11,859 --> 00:38:16,300
that a lot of other templating languages

00:38:14,109 --> 00:38:20,800
use so if someone coming in from a

00:38:16,300 --> 00:38:22,300
different project you know using smarty

00:38:20,800 --> 00:38:23,740
templates i think uses the same thing

00:38:22,300 --> 00:38:27,460
they're going to recognize this syntax

00:38:23,740 --> 00:38:31,359
and be able to use it really quickly and

00:38:27,460 --> 00:38:32,920
then the fourth bit in Drupal 8 for fun

00:38:31,359 --> 00:38:34,780
and developers that I'm completely

00:38:32,920 --> 00:38:36,400
excited about it's something i'm

00:38:34,780 --> 00:38:41,070
personally naming the semantic

00:38:36,400 --> 00:38:44,790
application layer so this comes from

00:38:41,070 --> 00:38:47,320
work we've been doing in the

00:38:44,790 --> 00:38:50,290
accessibility side we're taking in this

00:38:47,320 --> 00:38:52,440
technology called uh what is it

00:38:50,290 --> 00:38:56,589
accessible rich Internet applications

00:38:52,440 --> 00:38:59,109
its acronym as aria and we're taking

00:38:56,589 --> 00:39:00,430
this capability that was meant to to

00:38:59,109 --> 00:39:01,930
provide a way to

00:39:00,430 --> 00:39:04,510
express the semantics of an application

00:39:01,930 --> 00:39:06,040
to a screen reader and we're using it to

00:39:04,510 --> 00:39:08,910
drive the semantics of the application

00:39:06,040 --> 00:39:12,630
for everybody essentially it's a way of

00:39:08,910 --> 00:39:16,630
describing the state of your application

00:39:12,630 --> 00:39:20,230
through a layer that is agnostic to the

00:39:16,630 --> 00:39:25,630
means of presentation so if we look at a

00:39:20,230 --> 00:39:29,050
quick example I've got a eight page and

00:39:25,630 --> 00:39:31,510
you're going to recognize Aria in the

00:39:29,050 --> 00:39:33,640
role attribute I think WordPress

00:39:31,510 --> 00:39:35,680
introduces like four years ago and their

00:39:33,640 --> 00:39:38,140
standard template and we put it in sense

00:39:35,680 --> 00:39:41,320
this is essentially telling a user agent

00:39:38,140 --> 00:39:44,830
that this piece of HTML is going to act

00:39:41,320 --> 00:39:47,760
as something else rather than the need

00:39:44,830 --> 00:39:51,160
of semantics it's become a bit redundant

00:39:47,760 --> 00:39:54,400
because we have things now like the nav

00:39:51,160 --> 00:39:57,910
element we just got the main element but

00:39:54,400 --> 00:40:00,310
it's not redundant four pieces of HTML

00:39:57,910 --> 00:40:04,240
that don't have native semantics yet

00:40:00,310 --> 00:40:11,980
like content info or application toolbar

00:40:04,240 --> 00:40:13,750
group so what we're doing on the

00:40:11,980 --> 00:40:16,360
semantic application layers we're taking

00:40:13,750 --> 00:40:18,630
a concept like active and we're encoding

00:40:16,360 --> 00:40:21,370
it instead in this aria-pressed

00:40:18,630 --> 00:40:24,160
attribute so when something is pressed

00:40:21,370 --> 00:40:25,810
we switch the boolean in this attribute

00:40:24,160 --> 00:40:28,840
from true to false and false the true

00:40:25,810 --> 00:40:32,680
and the fact that it has a class active

00:40:28,840 --> 00:40:34,750
is just an artifact of the visual

00:40:32,680 --> 00:40:37,660
presentation layer we're not using that

00:40:34,750 --> 00:40:40,750
class to drive any of the behavior that

00:40:37,660 --> 00:40:42,430
class appears because of the state that

00:40:40,750 --> 00:40:44,410
we're representing and farther down and

00:40:42,430 --> 00:40:46,390
this is a really big mental change

00:40:44,410 --> 00:40:48,340
because in the past where we normally do

00:40:46,390 --> 00:40:50,200
is we create a class we put on the Dom

00:40:48,340 --> 00:40:52,390
when we want to know what state that

00:40:50,200 --> 00:40:54,280
piece of Dom is in we go get as classes

00:40:52,390 --> 00:40:56,800
and say do you have an active class all

00:40:54,280 --> 00:40:58,440
you do you must be an active state let

00:40:56,800 --> 00:40:59,980
me do a bunch of stuff here that

00:40:58,440 --> 00:41:02,230
responds to the fact that you're

00:40:59,980 --> 00:41:04,420
inactive state we're doing all that

00:41:02,230 --> 00:41:06,840
stuff and at the end we're throwing the

00:41:04,420 --> 00:41:06,840
class on

00:41:09,330 --> 00:41:17,680
we also have Aria to change again this

00:41:14,770 --> 00:41:20,740
role you know an a tag that's acting as

00:41:17,680 --> 00:41:22,090
a button we say hey user agent this is

00:41:20,740 --> 00:41:23,950
not really an a tag this is really a

00:41:22,090 --> 00:41:25,810
button and when you have a spoken user

00:41:23,950 --> 00:41:29,290
agent go through the Dom instead of

00:41:25,810 --> 00:41:30,960
saying link it now says button and with

00:41:29,290 --> 00:41:41,170
the aria-pressed attribute it says

00:41:30,960 --> 00:41:42,820
button active I'm not sure if this is

00:41:41,170 --> 00:41:44,590
going to be a thing yet the semantic

00:41:42,820 --> 00:41:46,420
application layer but if you all start

00:41:44,590 --> 00:41:48,490
using that word I think we're going to

00:41:46,420 --> 00:41:50,640
make it a thing it's kind of like a

00:41:48,490 --> 00:41:54,640
fetch we're going to make it a thing

00:41:50,640 --> 00:41:58,810
okay so all the good stuff we're going

00:41:54,640 --> 00:42:00,610
to get there are big gaps and what we're

00:41:58,810 --> 00:42:02,530
going to get in Drupal 8 in terms of

00:42:00,610 --> 00:42:08,290
front and support that are going to have

00:42:02,530 --> 00:42:10,840
to be filled in the contribs base to me

00:42:08,290 --> 00:42:12,910
the most important one is this idea of a

00:42:10,840 --> 00:42:16,390
big pipe so if you're familiar with

00:42:12,910 --> 00:42:18,460
Facebook they have this capability of

00:42:16,390 --> 00:42:21,250
taking all the requests for information

00:42:18,460 --> 00:42:23,950
that come from their page bundling them

00:42:21,250 --> 00:42:26,080
up sending them as one request back to

00:42:23,950 --> 00:42:28,360
their server processing all those

00:42:26,080 --> 00:42:30,370
requests bundling them back up again and

00:42:28,360 --> 00:42:33,250
send them back to your clients or they

00:42:30,370 --> 00:42:34,270
get disassembled and then passed to the

00:42:33,250 --> 00:42:40,090
different pieces in the page that

00:42:34,270 --> 00:42:42,220
requested that information for us we're

00:42:40,090 --> 00:42:43,840
essentially making a single request per

00:42:42,220 --> 00:42:46,630
piece of information do you need to know

00:42:43,840 --> 00:42:49,720
if you're a comment if your node needs a

00:42:46,630 --> 00:42:51,700
comment link do a request do you need

00:42:49,720 --> 00:42:54,460
the submenu items from your toolbar make

00:42:51,700 --> 00:42:57,730
a request it's not that bad now and

00:42:54,460 --> 00:42:59,310
we're taking steps for the requests that

00:42:57,730 --> 00:43:02,050
we know about to make them less

00:42:59,310 --> 00:43:03,790
aggressive so we're only making them you

00:43:02,050 --> 00:43:07,810
know when when something in the cache

00:43:03,790 --> 00:43:09,610
changes but going into contribs I have

00:43:07,810 --> 00:43:12,490
this fear that we're going to see our

00:43:09,610 --> 00:43:14,920
pages get really greedy for requests

00:43:12,490 --> 00:43:16,600
from the server and I'd like to see us

00:43:14,920 --> 00:43:18,640
as a community focus on how we solve

00:43:16,600 --> 00:43:21,010
that problem you know some sort of

00:43:18,640 --> 00:43:22,609
common system where I can register the

00:43:21,010 --> 00:43:25,549
fact that I need data

00:43:22,609 --> 00:43:27,259
with a controller on the page and it

00:43:25,549 --> 00:43:30,039
takes care of you know fetching it and

00:43:27,259 --> 00:43:33,440
giving it back to me in an efficient way

00:43:30,039 --> 00:43:39,319
alright so the twig templates is twig

00:43:33,440 --> 00:43:42,410
sharing get it so yeah we're not going

00:43:39,319 --> 00:43:44,869
to get sharing of twig templates from

00:43:42,410 --> 00:43:47,269
the server side to the client side which

00:43:44,869 --> 00:43:49,369
means as a developer is a module

00:43:47,269 --> 00:43:50,509
developer you define what a node that is

00:43:49,369 --> 00:43:52,549
supposed to look like you provide that

00:43:50,509 --> 00:43:55,519
template and then you get to the client

00:43:52,549 --> 00:43:59,569
side and you have no idea what that

00:43:55,519 --> 00:44:01,730
definition is on the client side it's a

00:43:59,569 --> 00:44:03,289
very tricky problem because in order to

00:44:01,730 --> 00:44:05,119
get that template from the server side

00:44:03,289 --> 00:44:06,680
we have to run through the entire

00:44:05,119 --> 00:44:08,809
process of determining what template to

00:44:06,680 --> 00:44:10,579
get do you want the one from core or

00:44:08,809 --> 00:44:12,589
from a module or from your you know

00:44:10,579 --> 00:44:14,410
theme and then we have to check access

00:44:12,589 --> 00:44:17,930
we have to run all the altars and

00:44:14,410 --> 00:44:20,029
everything until we figure out you know

00:44:17,930 --> 00:44:21,980
what that template is and then give it

00:44:20,029 --> 00:44:23,960
to you and your kind of still

00:44:21,980 --> 00:44:26,349
responsible for formatting the data

00:44:23,960 --> 00:44:28,519
correctly to pass into that template

00:44:26,349 --> 00:44:31,069
it's a tricky problem and at the moment

00:44:28,519 --> 00:44:32,749
we just don't have a solution we're

00:44:31,069 --> 00:44:36,529
still using the old Drupal 7 you know

00:44:32,749 --> 00:44:40,609
drupal theme create a string pass it up

00:44:36,529 --> 00:44:43,249
to whatever your caller is we also

00:44:40,609 --> 00:44:45,349
didn't get theme agnostic layouts so

00:44:43,249 --> 00:44:47,269
that means that when you put a block in

00:44:45,349 --> 00:44:50,029
a region that region is still associated

00:44:47,269 --> 00:44:52,460
with the theme we don't yet have a

00:44:50,029 --> 00:44:56,119
construct that is theme independent

00:44:52,460 --> 00:44:59,119
where you can specify regions you know

00:44:56,119 --> 00:45:04,369
respond civet e-block placements and

00:44:59,119 --> 00:45:05,509
then share them across themes I really

00:45:04,369 --> 00:45:09,499
see this as something that would have

00:45:05,509 --> 00:45:11,930
made composable front and applications a

00:45:09,499 --> 00:45:15,200
lot easier if we were able to request

00:45:11,930 --> 00:45:17,749
you know large chunks of the page to

00:45:15,200 --> 00:45:22,630
slot in on our basic piece of content

00:45:17,749 --> 00:45:25,009
and we're also not getting some sort of

00:45:22,630 --> 00:45:27,739
conditional asset loading so this would

00:45:25,009 --> 00:45:30,710
be a library like require or yep nope

00:45:27,739 --> 00:45:34,339
that checks the feature capabilities of

00:45:30,710 --> 00:45:36,260
the user agent before loading the

00:45:34,339 --> 00:45:39,950
JavaScript or the code that's going to

00:45:36,260 --> 00:45:42,320
you know respond to that feature at the

00:45:39,950 --> 00:45:44,210
moment it's still triple seven we

00:45:42,320 --> 00:45:46,640
statically define all of the code that

00:45:44,210 --> 00:45:48,440
you might possibly need you know we've

00:45:46,640 --> 00:45:51,350
run through the the library dependencies

00:45:48,440 --> 00:45:53,750
and you get this big chunk on the front

00:45:51,350 --> 00:45:55,790
end even if your user agent doesn't

00:45:53,750 --> 00:45:59,480
support any of the features that that

00:45:55,790 --> 00:46:02,090
code drives we could vastly reduce the

00:45:59,480 --> 00:46:04,730
amount of information we're sending if

00:46:02,090 --> 00:46:06,560
we had a way of holding off on

00:46:04,730 --> 00:46:16,850
requesting assets until we knew what the

00:46:06,560 --> 00:46:19,880
user agent was doing all right so really

00:46:16,850 --> 00:46:21,530
quickly run through this so I wanted to

00:46:19,880 --> 00:46:23,420
end on another linguistic thing just to

00:46:21,530 --> 00:46:25,700
kind of get your minds like warmed up

00:46:23,420 --> 00:46:27,740
for the rest of the conference metaphors

00:46:25,700 --> 00:46:29,780
to me are an incredibly powerful tool

00:46:27,740 --> 00:46:32,450
for anyone for designers for developers

00:46:29,780 --> 00:46:34,400
they define the way that we understand a

00:46:32,450 --> 00:46:36,590
problem so let's take a problem like

00:46:34,400 --> 00:46:40,970
time a problem you didn't even know you

00:46:36,590 --> 00:46:44,210
had when we think about time we think

00:46:40,970 --> 00:46:46,460
about moving into the future right we

00:46:44,210 --> 00:46:48,020
move forward the futures ahead of us the

00:46:46,460 --> 00:46:56,060
past is behind us for constant making

00:46:48,020 --> 00:46:59,300
progress the drop never stops there we

00:46:56,060 --> 00:47:00,920
go so down in South America there is a

00:46:59,300 --> 00:47:03,620
group a linguistic group of people

00:47:00,920 --> 00:47:06,470
called the Aymara and for them they have

00:47:03,620 --> 00:47:08,840
a completely reversed model of time for

00:47:06,470 --> 00:47:11,600
them moving into the future is moving

00:47:08,840 --> 00:47:13,340
backwards and everything that you know

00:47:11,600 --> 00:47:15,680
everything you can see is in front of

00:47:13,340 --> 00:47:17,510
you that's the past this is encoded into

00:47:15,680 --> 00:47:21,340
their language directly so when you ask

00:47:17,510 --> 00:47:23,840
them you know how was the movie they say

00:47:21,340 --> 00:47:25,790
or when was something they'd say well it

00:47:23,840 --> 00:47:30,050
was you know in front of me a couple of

00:47:25,790 --> 00:47:32,930
days to them the things that we can see

00:47:30,050 --> 00:47:34,930
are the things that we know when I first

00:47:32,930 --> 00:47:37,010
learned about this group of people it

00:47:34,930 --> 00:47:39,370
completely floored me that something is

00:47:37,010 --> 00:47:42,320
fundamental as our concept of time is

00:47:39,370 --> 00:47:45,170
completely arbitrary it's plastic

00:47:42,320 --> 00:47:47,120
it's you know the outcome of our society

00:47:45,170 --> 00:47:49,460
and our language the constructs that are

00:47:47,120 --> 00:47:51,050
built for us and when I'm thinking about

00:47:49,460 --> 00:47:56,660
front-end development I like to come

00:47:51,050 --> 00:47:59,330
back to this example because it it

00:47:56,660 --> 00:48:01,040
causes me and pushes me to question the

00:47:59,330 --> 00:48:04,190
fundamental assumptions we have about

00:48:01,040 --> 00:48:07,030
what we're building right I didn't

00:48:04,190 --> 00:48:09,200
arrive at accessibility because I wanted

00:48:07,030 --> 00:48:10,610
necessarily to make things accessible i

00:48:09,200 --> 00:48:14,120
arrived there because I was starting to

00:48:10,610 --> 00:48:16,490
question the infallible and sort of

00:48:14,120 --> 00:48:18,260
omnipresent nature of these these

00:48:16,490 --> 00:48:19,520
screens that we were working with I was

00:48:18,260 --> 00:48:21,200
wondering is there some other way that

00:48:19,520 --> 00:48:24,200
we you know we're going to be delivering

00:48:21,200 --> 00:48:28,550
information in the future and it just

00:48:24,200 --> 00:48:31,660
happened that accessibility is a model

00:48:28,550 --> 00:48:34,880
and in a way of thinking about content

00:48:31,660 --> 00:48:37,910
that is going to prepare us for a future

00:48:34,880 --> 00:48:40,900
of auditory interfaces you know screens

00:48:37,910 --> 00:48:44,600
and devices that we talk to rather than

00:48:40,900 --> 00:48:48,710
interacting with our fingers so just to

00:48:44,600 --> 00:48:50,120
sum up big points content content is the

00:48:48,710 --> 00:48:53,210
primary asset that we're working with

00:48:50,120 --> 00:48:55,100
this front-end developers access is the

00:48:53,210 --> 00:48:59,630
thing that we as professionals provide

00:48:55,100 --> 00:49:01,430
be that visual or auditory and we're

00:48:59,630 --> 00:49:03,650
building escalators we're not building

00:49:01,430 --> 00:49:06,260
elevators when you build something ask

00:49:03,650 --> 00:49:07,340
yourself when this breaks what is it

00:49:06,260 --> 00:49:10,640
going to look like when it falls

00:49:07,340 --> 00:49:12,620
backwards so just to sum up if you're

00:49:10,640 --> 00:49:15,290
interested in backbone and learning more

00:49:12,620 --> 00:49:17,120
about backbone and Drupal 8 i recommend

00:49:15,290 --> 00:49:23,030
the talk right after this one in the

00:49:17,120 --> 00:49:24,320
north hall by deal answer there's a buff

00:49:23,030 --> 00:49:25,670
where we're going to be talking about

00:49:24,320 --> 00:49:29,120
the backbone module in Drupal

00:49:25,670 --> 00:49:33,770
specifically happening on wednesday at 3

00:49:29,120 --> 00:49:35,750
45 and if you are interested in helping

00:49:33,770 --> 00:49:38,060
out with any of the front-end code come

00:49:35,750 --> 00:49:42,920
to this prince on friday and i will be

00:49:38,060 --> 00:49:55,549
there as well there we go

00:49:42,920 --> 00:50:15,140
I guess people ask questions at this

00:49:55,549 --> 00:50:17,630
point mm to have them on your earlier

00:50:15,140 --> 00:50:19,450
sore points they made about having

00:50:17,630 --> 00:50:22,700
unique URLs having web accessible

00:50:19,450 --> 00:50:25,099
content using backbone say you were

00:50:22,700 --> 00:50:27,619
building a Drupal site that use Drupal

00:50:25,099 --> 00:50:29,210
as a back-end and backbone as a front

00:50:27,619 --> 00:50:32,089
end would that be something you just say

00:50:29,210 --> 00:50:33,290
never do or other ways you could make

00:50:32,089 --> 00:50:35,530
that better that you could do it

00:50:33,290 --> 00:50:37,220
differently because some cases

00:50:35,530 --> 00:50:39,799
JavaScript web app seem to work very

00:50:37,220 --> 00:50:41,510
well for certain things but I definitely

00:50:39,799 --> 00:50:43,069
see your point that it's not necessarily

00:50:41,510 --> 00:50:47,359
the most accessible the most web

00:50:43,069 --> 00:50:49,640
friendly way of influencing it yeah so

00:50:47,359 --> 00:50:54,680
it can be accessible JavaScript doesn't

00:50:49,640 --> 00:50:56,480
mean inaccessible 98.6 percent then they

00:50:54,680 --> 00:50:59,329
point four percent of people that access

00:50:56,480 --> 00:51:01,970
information through spoken user agent

00:50:59,329 --> 00:51:03,650
have javascript enabled and it's

00:51:01,970 --> 00:51:05,390
actually point two percent more than the

00:51:03,650 --> 00:51:07,309
general population so you have a better

00:51:05,390 --> 00:51:10,940
coverage in JavaScript with with blind

00:51:07,309 --> 00:51:12,950
people um what makes it inaccessible is

00:51:10,940 --> 00:51:15,260
when you change things on the page

00:51:12,950 --> 00:51:19,010
without telling someone about it so just

00:51:15,260 --> 00:51:20,630
changing you know a class on an element

00:51:19,010 --> 00:51:22,160
isn't going to be apparent to someone

00:51:20,630 --> 00:51:24,349
who doesn't see the color of that

00:51:22,160 --> 00:51:28,790
element change so you you have to be

00:51:24,349 --> 00:51:30,470
expressing these changes through this

00:51:28,790 --> 00:51:33,349
semantic application that I'm talking

00:51:30,470 --> 00:51:36,020
about so using Aria and then to address

00:51:33,349 --> 00:51:39,410
you know putting some sort of backbone

00:51:36,020 --> 00:51:41,569
front ends on top of Drupal I love that

00:51:39,410 --> 00:51:44,359
idea I would rather be doing front-end

00:51:41,569 --> 00:51:46,309
code in the browser then kind of like

00:51:44,359 --> 00:51:47,960
half composing it over in the server and

00:51:46,309 --> 00:51:51,440
you know sending half of it over to the

00:51:47,960 --> 00:51:54,500
browser I think the thing we really need

00:51:51,440 --> 00:51:56,299
to solve is what is the layer just

00:51:54,500 --> 00:51:56,660
underneath there before the JavaScript

00:51:56,299 --> 00:51:59,059
run

00:51:56,660 --> 00:52:01,039
we want to make sure that the content

00:51:59,059 --> 00:52:03,940
items you know all the nodes and the

00:52:01,039 --> 00:52:07,280
entities in the site have some sort of

00:52:03,940 --> 00:52:09,589
representation which may be completely

00:52:07,280 --> 00:52:12,349
bare bones maybe you know like a header

00:52:09,589 --> 00:52:16,010
and some navigation links and then item

00:52:12,349 --> 00:52:17,960
no sidebars no related nonsense do all

00:52:16,010 --> 00:52:20,839
that you know in your and your client

00:52:17,960 --> 00:52:23,510
but we need something there so when

00:52:20,839 --> 00:52:26,150
Google comes by and crawls that site it

00:52:23,510 --> 00:52:29,059
has to find you know some semantically

00:52:26,150 --> 00:52:32,059
significant piece of information and I

00:52:29,059 --> 00:52:35,089
think you know triple is well poised to

00:52:32,059 --> 00:52:38,930
be the system that kind of sits in that

00:52:35,089 --> 00:52:40,369
middle produces semantic output but just

00:52:38,930 --> 00:52:43,549
enough to get you to that at that point

00:52:40,369 --> 00:52:49,480
and then says go you know go build your

00:52:43,549 --> 00:52:49,480
crazy interactive thing cool thanks

00:53:04,620 --> 00:53:18,300
yeah running around oh my god he's

00:53:14,530 --> 00:53:18,300
really he's like doing the stair climb

00:53:19,290 --> 00:53:27,040
with the semantic semantic markup of the

00:53:23,110 --> 00:53:29,590
area rolls and that sort of thing it's

00:53:27,040 --> 00:53:31,030
is there like a standard that we should

00:53:29,590 --> 00:53:33,790
be should be following I know there is

00:53:31,030 --> 00:53:35,230
for the it's usually targeted at screen

00:53:33,790 --> 00:53:37,000
readers and that sort of stuff but I

00:53:35,230 --> 00:53:39,580
really like the idea of actually using

00:53:37,000 --> 00:53:41,770
it for just everything on the page and

00:53:39,580 --> 00:53:43,690
maybe having something like when you

00:53:41,770 --> 00:53:45,160
build a view in Drupal usually you just

00:53:43,690 --> 00:53:47,020
have a little custom class that you can

00:53:45,160 --> 00:53:48,880
put in but maybe having a role that you

00:53:47,020 --> 00:53:50,380
can put in there or for javascript

00:53:48,880 --> 00:53:52,570
events for triggering for telling

00:53:50,380 --> 00:53:55,150
something to the screen reader is it

00:53:52,570 --> 00:53:56,770
something because the html5 ones like

00:53:55,150 --> 00:53:58,690
the nav and the header and the footer I

00:53:56,770 --> 00:54:00,220
just don't think they're enough and we

00:53:58,690 --> 00:54:02,110
usually end up just running out of them

00:54:00,220 --> 00:54:04,390
and just doing section class their

00:54:02,110 --> 00:54:06,190
section class that and I think the area

00:54:04,390 --> 00:54:07,540
roles seem to be much better way of

00:54:06,190 --> 00:54:09,370
doing it is there like a standards

00:54:07,540 --> 00:54:13,330
moving to use those a semantics and

00:54:09,370 --> 00:54:17,290
ignore the rest of them oh yeah there is

00:54:13,330 --> 00:54:23,910
a standard you know if you google aria

00:54:17,290 --> 00:54:27,400
you'll find it the language isn't

00:54:23,910 --> 00:54:28,960
completely built out like I often run

00:54:27,400 --> 00:54:31,120
into a point where I can't find an

00:54:28,960 --> 00:54:33,060
attribute that describes well the thing

00:54:31,120 --> 00:54:36,060
I'm trying to do so I try to do the best

00:54:33,060 --> 00:54:39,520
that I can with it it's always evolving

00:54:36,060 --> 00:54:41,620
but it's not it's not an open set you

00:54:39,520 --> 00:54:43,090
can't just invent you know Aria hyphen

00:54:41,620 --> 00:54:46,060
something and expect it to do anything

00:54:43,090 --> 00:54:50,920
and even the user agents you know like

00:54:46,060 --> 00:54:52,930
jaws and voiceover and chromevox like

00:54:50,920 --> 00:54:55,720
there's still developing support for it

00:54:52,930 --> 00:54:57,490
and blind people are you know people

00:54:55,720 --> 00:54:58,960
that use screen readers are still

00:54:57,490 --> 00:55:04,660
learning how to use this stuff it's kind

00:54:58,960 --> 00:55:06,610
of new but I i think you know on a

00:55:04,660 --> 00:55:10,180
project like this we should be pushing

00:55:06,610 --> 00:55:12,890
that sort of the envelope of that

00:55:10,180 --> 00:55:16,130
technology because it is the adopted

00:55:12,890 --> 00:55:18,350
standard in the accessibility worlds and

00:55:16,130 --> 00:55:20,660
it's something that we can co-opt in a

00:55:18,350 --> 00:55:23,420
really good way like you're saying to

00:55:20,660 --> 00:55:25,430
define the semantics I don't think it's

00:55:23,420 --> 00:55:30,530
been explored completely yet you know in

00:55:25,430 --> 00:55:33,380
terms of performance in terms of just

00:55:30,530 --> 00:55:36,920
the edges of how you can semantically

00:55:33,380 --> 00:55:38,810
describe your application but I think it

00:55:36,920 --> 00:55:41,210
has more promise than just using

00:55:38,810 --> 00:55:43,190
arbitrary classes so I'm kind of

00:55:41,210 --> 00:55:57,440
committed to finding out you know what

00:55:43,190 --> 00:56:00,520
are the limits of oven all right go

00:55:57,440 --> 00:56:00,520

YouTube URL: https://www.youtube.com/watch?v=OdWtqjqukf8


