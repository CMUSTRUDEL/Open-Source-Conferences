Title: DrupalCon Prague 2013: BUILDING REALLY FAST WEBSITES WITH DRUPAL 8
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	Drupal 8 is going to have better front-end performance for anonymous users out of the box: it is now smart enough to no longer load unnecessary JavaScript. It's also (finally!) going to cache all entities efficiently, so that it doesn't waste time re-rendering the same content over and over again.

Because less time needs to be spent on generating the HTML, the page will show up faster on visitors' devices â€” also mobile devices.

However, you of course still want pages to be personalized. Different visitors have different permissions (and hence different contextual links), different interests (and hence have "new" or "updated" indicators in different places), and so on.
In Drupal 8, we've introduced the necessary foundations to easily serve the same HTML, yet still personalize the page by using client-side caching (localStorage/sessionStorage) in combination with clever client-side cache invalidation.

Furthermore, we finally have pluggable CSS and JavaScript optimization (aggregation), where you can easily plug in a specific JS minifier, or data-mining-applied-to-visitor-navigation-paths-powered CSS/JS grouping (to calculate globally optimal groups)!

The end result: really fast websites, with superb perceived performance!

Note: where possible, I'll explain how to achieve the same in Drupal 7.
Captions: 
	00:00:05,420 --> 00:00:12,090
good afternoon everybody is this too

00:00:08,189 --> 00:00:16,199
loud not loud enough great I guess it's

00:00:12,090 --> 00:00:19,199
good okay so my name is a limb Lear's

00:00:16,199 --> 00:00:24,449
and this session is about deliberately

00:00:19,199 --> 00:00:26,130
fast websites and I'm a speed freak so I

00:00:24,449 --> 00:00:28,830
really hated my website slowed slowly

00:00:26,130 --> 00:00:30,960
maybe one of you also has the habit of

00:00:28,830 --> 00:00:32,759
on a mobile device when you're loading a

00:00:30,960 --> 00:00:34,020
website counting to five and if it's

00:00:32,759 --> 00:00:36,239
really long enough five seconds just

00:00:34,020 --> 00:00:37,710
closing in town because it's annoying

00:00:36,239 --> 00:00:41,100
the hell out of you at least that's what

00:00:37,710 --> 00:00:42,960
I do so my goal is really to have every

00:00:41,100 --> 00:00:46,379
website load fast so mobile devices are

00:00:42,960 --> 00:00:48,660
not so I actually worked for aquia on

00:00:46,379 --> 00:00:50,430
the spark project which you may know but

00:00:48,660 --> 00:00:52,710
it doesn't mean and I work just on spark

00:00:50,430 --> 00:00:55,440
stuff I also work on related stuff and

00:00:52,710 --> 00:00:57,030
Drupal 8 or in the past few months I've

00:00:55,440 --> 00:00:58,559
been spending some time working on the

00:00:57,030 --> 00:01:00,989
performance improvement specifically

00:00:58,559 --> 00:01:02,370
interpolate and this talk is going to be

00:01:00,989 --> 00:01:04,019
about some of the improvements

00:01:02,370 --> 00:01:05,610
interpolated should make your lives

00:01:04,019 --> 00:01:08,549
easier your site's faster and your

00:01:05,610 --> 00:01:11,729
site's more scalable these are not

00:01:08,549 --> 00:01:13,110
things that were built just by me these

00:01:11,729 --> 00:01:15,479
are things that were built by community

00:01:13,110 --> 00:01:17,580
by consensus lots of smart people

00:01:15,479 --> 00:01:19,650
collaborated on this and these are just

00:01:17,580 --> 00:01:21,630
this is not everything this is just a

00:01:19,650 --> 00:01:24,060
few things that I find personally really

00:01:21,630 --> 00:01:25,560
interesting so they're better instead I

00:01:24,060 --> 00:01:28,290
replied in Drupal 8 some of which you

00:01:25,560 --> 00:01:31,140
can apply in Drupal 7 as well and I hope

00:01:28,290 --> 00:01:33,900
that they are abuses of use to you as

00:01:31,140 --> 00:01:35,400
well and that you can really leverage

00:01:33,900 --> 00:01:37,680
them so hopefully you'll find it

00:01:35,400 --> 00:01:39,630
interesting so what this talk is about

00:01:37,680 --> 00:01:42,990
it with Drupal 8 oz better than 70

00:01:39,630 --> 00:01:44,909
rounder caching client-side caching and

00:01:42,990 --> 00:01:46,560
pluggable CSS and JavaScript

00:01:44,909 --> 00:01:48,450
optimization which is a whole lot of

00:01:46,560 --> 00:01:49,979
words but you'll see that it's actually

00:01:48,450 --> 00:01:52,380
really interesting and not that hard

00:01:49,979 --> 00:01:54,630
anymore interpolate and of course some

00:01:52,380 --> 00:01:56,189
of the things that we should have and

00:01:54,630 --> 00:01:57,689
hopefully we'll have but that aren't

00:01:56,189 --> 00:02:00,060
there yet so some of the things that

00:01:57,689 --> 00:02:04,200
still need to happen so let's get

00:02:00,060 --> 00:02:06,479
started the first thing my personal

00:02:04,200 --> 00:02:10,020
website was for a very long time on

00:02:06,479 --> 00:02:11,310
Drupal five until 2011 when triple seven

00:02:10,020 --> 00:02:13,620
was already around for quite some time

00:02:11,310 --> 00:02:16,409
and I didn't find the time to upgrade

00:02:13,620 --> 00:02:18,810
60 I skip six went from fri from five to

00:02:16,409 --> 00:02:20,640
seven and since i'm a speed freak I

00:02:18,810 --> 00:02:22,140
really care about performance I wanted

00:02:20,640 --> 00:02:23,970
to make sure that my website loaded as

00:02:22,140 --> 00:02:25,950
fast as possible so it could be some

00:02:23,970 --> 00:02:27,659
sort of example of how you can make a

00:02:25,950 --> 00:02:29,849
simple website of course because it's

00:02:27,659 --> 00:02:32,909
not complex how we can make it fast and

00:02:29,849 --> 00:02:35,610
to my surprise and i'm not sure if many

00:02:32,909 --> 00:02:37,049
of you have noticed this or many of you

00:02:35,610 --> 00:02:40,110
have tried this but if you try to make a

00:02:37,049 --> 00:02:42,989
website on Drupal 7 or even a single

00:02:40,110 --> 00:02:45,209
page load with our JavaScript good luck

00:02:42,989 --> 00:02:47,730
but it won't work because Drupal 7 will

00:02:45,209 --> 00:02:51,540
always load Jake righteous through

00:02:47,730 --> 00:02:53,609
peluche s and Drupal settings so that's

00:02:51,540 --> 00:02:57,989
not so great of course and in Drupal 7

00:02:53,609 --> 00:03:00,690
we fix that so in Drupal droop in Drupal

00:02:57,989 --> 00:03:02,010
8 we fix that of course not seven so in

00:03:00,690 --> 00:03:03,870
interplay what we're doing is too

00:03:02,010 --> 00:03:05,579
important things we're declaring all

00:03:03,870 --> 00:03:07,409
dependency so whenever you load a

00:03:05,579 --> 00:03:09,599
certain assets you declare which things

00:03:07,409 --> 00:03:11,040
it depends upon so the trip will know is

00:03:09,599 --> 00:03:12,450
which things to load so that it doesn't

00:03:11,040 --> 00:03:15,030
have to be due to stupid thing anymore

00:03:12,450 --> 00:03:17,669
of always loading jquery and drupal two

00:03:15,030 --> 00:03:20,459
chairs and we're using power and

00:03:17,669 --> 00:03:22,799
attached or hash attached instead of

00:03:20,459 --> 00:03:26,160
drupal at css3 will add chase and drupal

00:03:22,799 --> 00:03:29,129
at library and I'll explain why that's

00:03:26,160 --> 00:03:30,750
much better in a second and sadly this

00:03:29,129 --> 00:03:33,090
problem as in the problem of Jake

00:03:30,750 --> 00:03:35,160
redditch a stupid a yes and drupal

00:03:33,090 --> 00:03:37,019
settings always loading is something

00:03:35,160 --> 00:03:39,180
that is utterly unfixable and rupal

00:03:37,019 --> 00:03:41,430
seven unless you break the API and

00:03:39,180 --> 00:03:43,739
ethics I'm not sure if he's here Peter

00:03:41,430 --> 00:03:46,109
drug baited hook notes attached a

00:03:43,739 --> 00:03:48,540
Belgian guy he's bravely working on a

00:03:46,109 --> 00:03:50,370
workaround but yeah it relies on a

00:03:48,540 --> 00:03:51,810
settings of PHP setting it essentially

00:03:50,370 --> 00:03:54,329
changes the API so there is no way to

00:03:51,810 --> 00:03:55,949
make it work good in triple seven out of

00:03:54,329 --> 00:03:58,709
the box without breaking the API as

00:03:55,949 --> 00:04:00,209
breaking all of contrib so we can do

00:03:58,709 --> 00:04:01,889
that but we can you can't fix it for

00:04:00,209 --> 00:04:03,660
individual sites by applying his patch

00:04:01,889 --> 00:04:05,069
hopefully it will end in core and then

00:04:03,660 --> 00:04:06,599
you can do it as well but then you will

00:04:05,069 --> 00:04:08,340
have to declare all your dependencies

00:04:06,599 --> 00:04:10,379
and if you use contributed modules that

00:04:08,340 --> 00:04:14,970
don't do that you'll have to update

00:04:10,379 --> 00:04:17,760
those in any case I let's take a look at

00:04:14,970 --> 00:04:19,859
fixed so if you look at an example JS

00:04:17,760 --> 00:04:22,979
file for example table select ljs and

00:04:19,859 --> 00:04:25,260
Drupal 8 there is some javascript in

00:04:22,979 --> 00:04:26,970
there and we're using to

00:04:25,260 --> 00:04:28,590
things that aren't part of JavaScript

00:04:26,970 --> 00:04:30,150
itself we're using Drupal tupelo

00:04:28,590 --> 00:04:32,850
behaviors is what you see up there and

00:04:30,150 --> 00:04:35,190
we're also using jQuery the dollar sign

00:04:32,850 --> 00:04:37,080
dollar complexed so those are the two

00:04:35,190 --> 00:04:38,610
things we're using and if we're using

00:04:37,080 --> 00:04:41,250
those then we should import them into

00:04:38,610 --> 00:04:43,170
the current closure so jQuery is use

00:04:41,250 --> 00:04:44,970
Drupal is used and you see these things

00:04:43,170 --> 00:04:47,130
at the top and at the bottom of the code

00:04:44,970 --> 00:04:49,440
example what we're doing essentially is

00:04:47,130 --> 00:04:51,150
we're declaring or using jQuery or

00:04:49,440 --> 00:04:53,400
declaring we're using Drupal the Drupal

00:04:51,150 --> 00:04:56,010
object that is available through Triple

00:04:53,400 --> 00:04:58,980
H yes and we put them in the closure so

00:04:56,010 --> 00:05:00,060
we rename jQuery to dollar sign so

00:04:58,980 --> 00:05:02,370
that's easier to use that's the

00:05:00,060 --> 00:05:05,190
convention you can you can rename it a

00:05:02,370 --> 00:05:07,170
llama if you want doesn't matter so if

00:05:05,190 --> 00:05:11,520
you use it you declare it in the closure

00:05:07,170 --> 00:05:13,920
I keep pressing the wrong key this is

00:05:11,520 --> 00:05:15,990
the right one so that's the JavaScript

00:05:13,920 --> 00:05:17,310
site you declare you your dependencies

00:05:15,990 --> 00:05:19,200
by putting them in the closure the

00:05:17,310 --> 00:05:21,870
second step is to do the similar thing

00:05:19,200 --> 00:05:23,400
on the phb side because Drupal needs to

00:05:21,870 --> 00:05:25,590
know which things it needs to load so

00:05:23,400 --> 00:05:28,140
the PHP needs to know right so we have

00:05:25,590 --> 00:05:29,760
table select HS in the library but the

00:05:28,140 --> 00:05:32,370
library also declares to dependencies

00:05:29,760 --> 00:05:34,740
one on jQuery one on Drupal very simple

00:05:32,370 --> 00:05:36,840
so the rule is jQuery and Drupal are in

00:05:34,740 --> 00:05:38,190
the closure of the javascript file so we

00:05:36,840 --> 00:05:41,340
should also declare dependencies on the

00:05:38,190 --> 00:05:43,830
PHP side very simple the next step is to

00:05:41,340 --> 00:05:46,470
abandon Drupal add CSS and J's because

00:05:43,830 --> 00:05:47,940
we don't want individual assets anymore

00:05:46,470 --> 00:05:49,650
because you can't declare dependencies

00:05:47,940 --> 00:05:51,510
for those so instead you should use

00:05:49,650 --> 00:05:53,790
triple at library you should always

00:05:51,510 --> 00:05:55,350
always use libraries because then you

00:05:53,790 --> 00:05:57,900
can declare the dependencies properly

00:05:55,350 --> 00:05:59,910
however you should always also abandon

00:05:57,900 --> 00:06:02,610
Drupal at library because you should be

00:05:59,910 --> 00:06:04,590
using barn detached so what you're doing

00:06:02,610 --> 00:06:06,180
is essentially the same thing but you're

00:06:04,590 --> 00:06:07,740
doing it in a slightly different way and

00:06:06,180 --> 00:06:09,600
the reason you can't use it you will add

00:06:07,740 --> 00:06:11,580
functions anymore is because they use

00:06:09,600 --> 00:06:13,800
global state and that breaks caching

00:06:11,580 --> 00:06:16,800
because for example if you have a block

00:06:13,800 --> 00:06:19,800
and a block uses food at CSS and you add

00:06:16,800 --> 00:06:22,100
it through Drupal at CSS and it's done

00:06:19,800 --> 00:06:24,600
cashed in the render cash in the server

00:06:22,100 --> 00:06:26,010
database and then you retrieve it at a

00:06:24,600 --> 00:06:28,350
later point in time because some other

00:06:26,010 --> 00:06:30,360
page wants to use that then the Drupal

00:06:28,350 --> 00:06:32,790
at CSS goal won't occur anymore because

00:06:30,360 --> 00:06:34,920
the code that generated the block won't

00:06:32,790 --> 00:06:36,540
be run because it's already cashed the

00:06:34,920 --> 00:06:38,250
HTML is cached in the database you

00:06:36,540 --> 00:06:38,820
retrieve it hence the CSS won't be out

00:06:38,250 --> 00:06:41,220
of times

00:06:38,820 --> 00:06:44,430
I brakes released won't look as it

00:06:41,220 --> 00:06:46,590
should look so don't use to Drupal add

00:06:44,430 --> 00:06:48,360
functions you can do it in Drupal 7 you

00:06:46,590 --> 00:06:50,820
can use parent attached in Drupal 7 as

00:06:48,360 --> 00:06:54,240
well because it breaks caching just use

00:06:50,820 --> 00:06:56,160
pound attached always the conclusion

00:06:54,240 --> 00:06:58,980
here is really simple you should always

00:06:56,160 --> 00:07:01,440
load assets by attaching libraries

00:06:58,980 --> 00:07:03,600
that's it results in better DX because

00:07:01,440 --> 00:07:05,640
there's less or no magic rather going on

00:07:03,600 --> 00:07:06,870
you have cacheable ran their race which

00:07:05,640 --> 00:07:11,580
you wouldn't have otherwise because if

00:07:06,870 --> 00:07:15,240
you use triple add functions something

00:07:11,580 --> 00:07:18,420
is happening with lloyds okay so you

00:07:15,240 --> 00:07:19,770
should should always the advantage is

00:07:18,420 --> 00:07:20,670
also that you have casual event arrays

00:07:19,770 --> 00:07:22,200
which you wouldn't have otherwise

00:07:20,670 --> 00:07:24,420
because it would be calling triple add

00:07:22,200 --> 00:07:26,550
functions only the required SS will be

00:07:24,420 --> 00:07:28,260
loading so loaded so no more jQuery that

00:07:26,550 --> 00:07:31,110
is loaded while you don't even need it

00:07:28,260 --> 00:07:33,060
and dynamic content as in the one that

00:07:31,110 --> 00:07:35,610
you HX in will also have the proper

00:07:33,060 --> 00:07:37,410
exits without having may be the same as

00:07:35,610 --> 00:07:38,670
loaded twice or all sorts of weird

00:07:37,410 --> 00:07:40,770
things that can happen when you use the

00:07:38,670 --> 00:07:42,990
triple add functions and all of this you

00:07:40,770 --> 00:07:45,000
can do in Drupal 7 so to prepare to move

00:07:42,990 --> 00:07:46,650
to Drupal 8 just do things correctly or

00:07:45,000 --> 00:07:49,290
as well as you could in Drupal 7 and

00:07:46,650 --> 00:07:52,200
you'll be s or twice you'll be very

00:07:49,290 --> 00:07:54,330
it'll be super easy to upgrade so it's

00:07:52,200 --> 00:07:59,580
one thing it's a tiny thing but can have

00:07:54,330 --> 00:08:01,440
a big impact so the next thing one of

00:07:59,580 --> 00:08:03,330
the things that has gotten much more

00:08:01,440 --> 00:08:05,730
expensive in Drupal 8 is a rendering of

00:08:03,330 --> 00:08:07,590
entities and to get to Drupal 7 or

00:08:05,730 --> 00:08:09,600
better performance levels we need to

00:08:07,590 --> 00:08:11,130
finally achieve render caching of

00:08:09,600 --> 00:08:13,410
entities we've had to render cache API

00:08:11,130 --> 00:08:15,540
since seven at least maybe six I don't

00:08:13,410 --> 00:08:17,180
think so but we've had it in seven but

00:08:15,540 --> 00:08:19,560
we aren't really putting it to use

00:08:17,180 --> 00:08:21,450
because there are still too many things

00:08:19,560 --> 00:08:24,660
breaking the render cash and that's what

00:08:21,450 --> 00:08:26,400
we're fixing an eight so essentially

00:08:24,660 --> 00:08:28,260
what this means is if render caching

00:08:26,400 --> 00:08:30,240
works for entities and users with the

00:08:28,260 --> 00:08:33,240
same combinations of roles for example

00:08:30,240 --> 00:08:36,270
editor and authenticated all those users

00:08:33,240 --> 00:08:37,950
maybe ten maybe hundreds maybe a

00:08:36,270 --> 00:08:39,990
thousands they will all get the same

00:08:37,950 --> 00:08:42,060
chunk of HTML without having to

00:08:39,990 --> 00:08:43,890
regenerate at HTML over and over and

00:08:42,060 --> 00:08:46,440
over again which is pretty expensive so

00:08:43,890 --> 00:08:48,300
the goal is essentially to really use

00:08:46,440 --> 00:08:51,240
render cashing it was already available

00:08:48,300 --> 00:08:52,660
but we weren't really using it and the

00:08:51,240 --> 00:08:56,440
thing it was blocking it was

00:08:52,660 --> 00:08:58,300
we're not yet putting the right data in

00:08:56,440 --> 00:09:01,389
there but we'll get to that in a second

00:08:58,300 --> 00:09:03,579
so before we're almost I we're not yet

00:09:01,389 --> 00:09:05,709
there we're almost there and while this

00:09:03,579 --> 00:09:07,149
conference was going on two days ago the

00:09:05,709 --> 00:09:09,430
patch got committed that adds through an

00:09:07,149 --> 00:09:11,079
entity grinder caching but it doesn't

00:09:09,430 --> 00:09:12,310
yet at the render caching for notes and

00:09:11,079 --> 00:09:14,879
comments which are the most common

00:09:12,310 --> 00:09:16,930
entities of course so that's coming soon

00:09:14,879 --> 00:09:20,170
but it's not there yet we're almost

00:09:16,930 --> 00:09:22,389
there but before we got there we had to

00:09:20,170 --> 00:09:24,040
do quite a lot of things and these are

00:09:22,389 --> 00:09:26,230
this is just a tiny selection of thing

00:09:24,040 --> 00:09:28,000
so cash tech support is something very

00:09:26,230 --> 00:09:29,889
cool very interesting you can do a lot

00:09:28,000 --> 00:09:31,660
of things with it and it's useful for

00:09:29,889 --> 00:09:33,600
many things not just for render caching

00:09:31,660 --> 00:09:35,620
you should definitely look at it

00:09:33,600 --> 00:09:37,120
contextual links were fundamentally

00:09:35,620 --> 00:09:38,649
incompatible with around cash this is

00:09:37,120 --> 00:09:41,529
what one of the reasons it couldn't work

00:09:38,649 --> 00:09:43,899
in Drupal 7 the new indicator the new

00:09:41,529 --> 00:09:45,970
and updated indicators are at small

00:09:43,899 --> 00:09:48,430
markers they were also fundamentally

00:09:45,970 --> 00:09:50,379
incompatible so does another reason why

00:09:48,430 --> 00:09:52,680
Drupal 7 couldn't do that so we're

00:09:50,379 --> 00:09:55,449
almost there but still not yet and that

00:09:52,680 --> 00:09:56,740
actually brings us to this nice quote

00:09:55,449 --> 00:09:58,660
that I'm sure most of you have already

00:09:56,740 --> 00:09:59,769
seen at some point in time there are

00:09:58,660 --> 00:10:01,839
only two hard problems in computer

00:09:59,769 --> 00:10:04,209
science naming things and cash in

00:10:01,839 --> 00:10:06,189
validation and naming thing is

00:10:04,209 --> 00:10:08,649
irrelevant here cache invalidation

00:10:06,189 --> 00:10:10,990
though is very relevant because caching

00:10:08,649 --> 00:10:12,699
itself is super easy as in you do this

00:10:10,990 --> 00:10:14,680
complex thing that is very expensive to

00:10:12,699 --> 00:10:15,970
do you store it somewhere and then you

00:10:14,680 --> 00:10:17,199
retrieve it later so that you don't have

00:10:15,970 --> 00:10:18,930
to repeat the same expensive

00:10:17,199 --> 00:10:22,120
calculations over and over again and

00:10:18,930 --> 00:10:24,339
that's easy but once you start going to

00:10:22,120 --> 00:10:26,019
the point of invalidating things as in

00:10:24,339 --> 00:10:27,430
determining when something in the cache

00:10:26,019 --> 00:10:29,910
should no longer be used because it's

00:10:27,430 --> 00:10:34,029
inaccurate well that's the hard part

00:10:29,910 --> 00:10:35,589
because you can do it in a very

00:10:34,029 --> 00:10:37,630
efficient way or you can do it in a very

00:10:35,589 --> 00:10:40,480
inefficient way as in you could clear

00:10:37,630 --> 00:10:41,889
everything if you change us sorry you

00:10:40,480 --> 00:10:44,800
could clear all the entries in the cache

00:10:41,889 --> 00:10:46,509
if you just change one thing that works

00:10:44,800 --> 00:10:48,870
but it's very inefficient because then

00:10:46,509 --> 00:10:51,819
every cache entry has only a very short

00:10:48,870 --> 00:10:54,490
amount of time where it can it may make

00:10:51,819 --> 00:10:55,809
itself useful whereas if you clear just

00:10:54,490 --> 00:10:58,059
the things that are affected by changes

00:10:55,809 --> 00:11:00,129
on your website it will be very

00:10:58,059 --> 00:11:03,430
efficient because it needs to generate

00:11:00,129 --> 00:11:05,410
things far less often so really the

00:11:03,430 --> 00:11:06,370
reason for poor performance when you're

00:11:05,410 --> 00:11:08,980
using caching is

00:11:06,370 --> 00:11:11,020
for cash and validation and that's the

00:11:08,980 --> 00:11:12,490
thing that we have to solve so really we

00:11:11,020 --> 00:11:16,600
want to first make sure that drupal has

00:11:12,490 --> 00:11:18,490
solid cache invalidation and only then

00:11:16,600 --> 00:11:20,620
we want to make sure that we fill the

00:11:18,490 --> 00:11:23,560
cash correctly so Phil cash correctly

00:11:20,620 --> 00:11:25,750
and solid cache invalidation those are

00:11:23,560 --> 00:11:28,230
the two things that really matter before

00:11:25,750 --> 00:11:30,730
we continue just a very small acronym

00:11:28,230 --> 00:11:33,370
instead of me repeating it every time in

00:11:30,730 --> 00:11:36,040
full on the slides just like we have I

00:11:33,370 --> 00:11:38,890
18m for internationalization you have

00:11:36,040 --> 00:11:43,480
also got p15 and for personalization so

00:11:38,890 --> 00:11:45,790
personalization be 59 let's start with

00:11:43,480 --> 00:11:49,150
the first one cache invalidation gash in

00:11:45,790 --> 00:11:52,180
validation is hard I'm sure many or if

00:11:49,150 --> 00:11:53,980
not all of you have seen this particular

00:11:52,180 --> 00:11:56,560
page is a performance settings page in

00:11:53,980 --> 00:11:58,839
Drupal 7 and one thing is not blurred

00:11:56,560 --> 00:12:00,640
out as a thing that matters it's the

00:11:58,839 --> 00:12:03,430
setting cold cash pages for anonymous

00:12:00,640 --> 00:12:05,230
users and I think most of you are

00:12:03,430 --> 00:12:06,790
familiar with this but i'm not sure if

00:12:05,230 --> 00:12:09,580
most of you are familiar with the fact

00:12:06,790 --> 00:12:12,310
that if you enable this which is fine

00:12:09,580 --> 00:12:14,589
and of itself but if you create any new

00:12:12,310 --> 00:12:16,690
note or edit any node or any anonymous

00:12:14,589 --> 00:12:18,700
user that creates a new comments it will

00:12:16,690 --> 00:12:21,370
actually clear all of the cached pages

00:12:18,700 --> 00:12:23,110
everything and that's not very great is

00:12:21,370 --> 00:12:26,290
it because then you're not really using

00:12:23,110 --> 00:12:29,020
your cash properly so it clears the

00:12:26,290 --> 00:12:30,760
entire page cache every single time with

00:12:29,020 --> 00:12:33,220
the reason is that cash clearing in

00:12:30,760 --> 00:12:35,110
Drupal 7 only had a very limited ABI so

00:12:33,220 --> 00:12:38,560
you could clear a specific cache entry

00:12:35,110 --> 00:12:41,110
cache clear all some ID some cashman you

00:12:38,560 --> 00:12:43,540
could clear a course set of cache

00:12:41,110 --> 00:12:45,820
entries meaning everything that is in

00:12:43,540 --> 00:12:47,800
the cache that matches a certain prefix

00:12:45,820 --> 00:12:50,980
so everything that starts with full

00:12:47,800 --> 00:12:53,529
colon content colon you can clear all

00:12:50,980 --> 00:12:55,540
those and the final possibility that you

00:12:53,529 --> 00:12:57,100
have is clearing all cache entries in a

00:12:55,540 --> 00:13:00,400
catchment and that's of course the least

00:12:57,100 --> 00:13:03,100
efficient of all so the question is if I

00:13:00,400 --> 00:13:06,209
edit note 42 how can i clear all those

00:13:03,100 --> 00:13:09,160
cache entries chest containing node 42

00:13:06,209 --> 00:13:11,260
the answer is it's impossible in Drupal

00:13:09,160 --> 00:13:13,510
7 you just don't have the API to do that

00:13:11,260 --> 00:13:16,240
because you can know which cache entries

00:13:13,510 --> 00:13:20,290
all contain note 42 there is no way to

00:13:16,240 --> 00:13:23,320
predict all ids as in the cache ids

00:13:20,290 --> 00:13:25,480
that may contain or 42 because any

00:13:23,320 --> 00:13:28,060
country must who can create any sort of

00:13:25,480 --> 00:13:30,389
cash ID'd at once and there is no way of

00:13:28,060 --> 00:13:33,850
figuring out which things that contains

00:13:30,389 --> 00:13:35,170
so really that's that's the crux of the

00:13:33,850 --> 00:13:36,850
problem we couldn't do better cache

00:13:35,170 --> 00:13:39,009
invalidation in seven because we didn't

00:13:36,850 --> 00:13:40,660
have the API for it now in Drupal 8 we

00:13:39,009 --> 00:13:43,720
have something new called cash tags and

00:13:40,660 --> 00:13:46,600
that's really the thing that makes a lot

00:13:43,720 --> 00:13:48,040
of new things possible so in Drupal 7

00:13:46,600 --> 00:13:49,509
you have the cash underscore SAT

00:13:48,040 --> 00:13:52,000
function this is the equivalent in

00:13:49,509 --> 00:13:53,740
Drupal 8 so you call the cash function

00:13:52,000 --> 00:13:55,959
you specify a bin you call the set

00:13:53,740 --> 00:13:59,079
method on it is specify a comment ID

00:13:55,959 --> 00:14:01,509
comment I a cache ID of course you

00:13:59,079 --> 00:14:03,310
specify a value to be cached you specify

00:14:01,509 --> 00:14:04,779
for example cash permanent which means

00:14:03,310 --> 00:14:07,360
that it won't expire automatically and

00:14:04,779 --> 00:14:09,610
then the new parameter tags you can

00:14:07,360 --> 00:14:10,959
specify cash tags there so they look

00:14:09,610 --> 00:14:12,339
somewhat like this so if you want

00:14:10,959 --> 00:14:15,069
something in the page cache you would

00:14:12,339 --> 00:14:17,649
specify the contents cash tag if it's

00:14:15,069 --> 00:14:19,990
just some HTML containing just a title

00:14:17,649 --> 00:14:23,019
over the note of note 42 or maybe the

00:14:19,990 --> 00:14:25,269
author of North 32 or some thump thing

00:14:23,019 --> 00:14:29,050
of note 42 and you could tag it with

00:14:25,269 --> 00:14:30,730
note 42 and if it's a full note with for

00:14:29,050 --> 00:14:35,079
example to take so no midterms then we

00:14:30,730 --> 00:14:37,630
look like this a note note 42 a user the

00:14:35,079 --> 00:14:39,459
users ID which is the author and then to

00:14:37,630 --> 00:14:41,290
tech sonometer my DS and now you have

00:14:39,459 --> 00:14:43,360
all the information of the things that

00:14:41,290 --> 00:14:44,949
are embedded within the note as in the

00:14:43,360 --> 00:14:49,240
things that are within the render cache

00:14:44,949 --> 00:14:51,190
entry so really in Drupal 7 you could

00:14:49,240 --> 00:14:53,800
only clear one specific entry all

00:14:51,190 --> 00:14:55,540
entries or a core set of entries which

00:14:53,800 --> 00:14:57,490
kind of is like this but not really

00:14:55,540 --> 00:14:59,889
because it doesn't allow you to find

00:14:57,490 --> 00:15:01,569
which specific entries contain a certain

00:14:59,889 --> 00:15:03,850
thing there's allows you to do that and

00:15:01,569 --> 00:15:06,790
this is what enables much better cash

00:15:03,850 --> 00:15:08,139
handling so using cash tax and render

00:15:06,790 --> 00:15:11,050
arrays in triple 8 looks somewhat like

00:15:08,139 --> 00:15:14,380
this the keys and granularity parameters

00:15:11,050 --> 00:15:15,819
to the pound cache key already existed

00:15:14,380 --> 00:15:17,589
in seven they are the things that make

00:15:15,819 --> 00:15:22,509
up the cache ID they automatically

00:15:17,589 --> 00:15:25,089
generate a cache ID but then the tax key

00:15:22,509 --> 00:15:27,100
is a new thing and in this case it's

00:15:25,089 --> 00:15:28,810
generic for all entities so entity type

00:15:27,100 --> 00:15:31,990
of expense to know it for example in our

00:15:28,810 --> 00:15:33,190
example entity ID expensive 42 so this

00:15:31,990 --> 00:15:36,670
is tagged with note 42

00:15:33,190 --> 00:15:39,070
but you may wonder note 42 it does not

00:15:36,670 --> 00:15:45,460
contain just note 42 because also on the

00:15:39,070 --> 00:15:48,970
previous slide or we saw there was for

00:15:45,460 --> 00:15:50,830
example this note 42 user 314 the

00:15:48,970 --> 00:15:53,590
economy term to text nanami term so how

00:15:50,830 --> 00:15:55,600
do these two additional things get on

00:15:53,590 --> 00:16:00,850
there because this are really only

00:15:55,600 --> 00:16:04,570
affects note 42 the answer is every

00:16:00,850 --> 00:16:07,090
field within a node is a child of the

00:16:04,570 --> 00:16:09,100
random array of the node and what we're

00:16:07,090 --> 00:16:10,870
doing is we're traversing from the top

00:16:09,100 --> 00:16:13,030
level which is the node itself into the

00:16:10,870 --> 00:16:15,280
child levels as in the fields themselves

00:16:13,030 --> 00:16:16,480
and they also have cash tags and we just

00:16:15,280 --> 00:16:18,490
collect them and put them at a top level

00:16:16,480 --> 00:16:20,650
and that's what the troop will render

00:16:18,490 --> 00:16:22,330
collect cash to X function does just

00:16:20,650 --> 00:16:23,650
merges it collects all the cash tags

00:16:22,330 --> 00:16:25,120
that are relevant with some at the top

00:16:23,650 --> 00:16:28,150
levels so we know which things are

00:16:25,120 --> 00:16:30,790
inside of the hole and that's it

00:16:28,150 --> 00:16:32,650
essentially but clearing gashes is what

00:16:30,790 --> 00:16:35,320
is wash cold in Drupal 7 you can't cash

00:16:32,650 --> 00:16:37,420
clear all now in 8 we have something

00:16:35,320 --> 00:16:39,580
slightly different you have more more

00:16:37,420 --> 00:16:41,710
granularity in what you can do you can

00:16:39,580 --> 00:16:43,270
use delete tags which means delete all

00:16:41,710 --> 00:16:45,820
cache entries that contain these tags

00:16:43,270 --> 00:16:47,800
immediately which prevents still content

00:16:45,820 --> 00:16:49,420
because you delete stuff immediately but

00:16:47,800 --> 00:16:52,360
there's also invalidate X which allows

00:16:49,420 --> 00:16:55,180
you to keep still contents because maybe

00:16:52,360 --> 00:16:56,890
your code doesn't really require you or

00:16:55,180 --> 00:16:58,780
your use case maybe doesn't require you

00:16:56,890 --> 00:17:01,180
to have the very latest content maybe

00:16:58,780 --> 00:17:02,470
it's okay to serve slightly stale

00:17:01,180 --> 00:17:04,959
Compton in that case you can say

00:17:02,470 --> 00:17:07,060
invalidate X which marks them as

00:17:04,959 --> 00:17:08,170
outdated but you can bet the cache

00:17:07,060 --> 00:17:09,850
entries are not delete it so you can

00:17:08,170 --> 00:17:12,250
still use them so as you can see you

00:17:09,850 --> 00:17:16,900
have more control of what you depending

00:17:12,250 --> 00:17:18,910
on your use case so we handled cache

00:17:16,900 --> 00:17:21,699
invalidation I think I hope it's clear

00:17:18,910 --> 00:17:23,560
to you guys that invalidation is a lot

00:17:21,699 --> 00:17:25,689
more flexible and fine grains and you

00:17:23,560 --> 00:17:28,120
can do a lot more with it in triple 8 so

00:17:25,689 --> 00:17:30,070
the next thing caching is easy right

00:17:28,120 --> 00:17:31,540
that's what it feels like always you

00:17:30,070 --> 00:17:34,690
just generate something store it

00:17:31,540 --> 00:17:36,270
somewhere that's caching however it'll

00:17:34,690 --> 00:17:38,530
be more interesting and promise

00:17:36,270 --> 00:17:40,330
contextual links in Drupal 7 for example

00:17:38,530 --> 00:17:41,830
it looked like this it's a dutch

00:17:40,330 --> 00:17:43,510
complexion planks but doesn't really

00:17:41,830 --> 00:17:46,450
matter the thing in the top right hand

00:17:43,510 --> 00:17:46,990
corner is what the contextual links are

00:17:46,450 --> 00:17:48,820
in case you

00:17:46,990 --> 00:17:51,970
seen it yet and that particular thing

00:17:48,820 --> 00:17:54,010
looks in the HTML somewhat like this so

00:17:51,970 --> 00:17:57,370
there is a tiff containing a ul

00:17:54,010 --> 00:17:59,920
containing links those links are access

00:17:57,370 --> 00:18:02,350
based as in not every user has access to

00:17:59,920 --> 00:18:04,809
all these links for example an anonymous

00:18:02,350 --> 00:18:07,450
user doesn't have the ability to delete

00:18:04,809 --> 00:18:09,160
a note right so it's depending on the

00:18:07,450 --> 00:18:11,470
current users permission so its role

00:18:09,160 --> 00:18:13,090
dependent but not only that you also see

00:18:11,470 --> 00:18:15,130
the query parameter to the URL so

00:18:13,090 --> 00:18:17,890
there's ? destination equals node and

00:18:15,130 --> 00:18:20,170
that's path dependent because what it's

00:18:17,890 --> 00:18:22,120
doing is it says okay if you click this

00:18:20,170 --> 00:18:24,429
link you can go to the letus node and

00:18:22,120 --> 00:18:26,650
then once that's done you should be

00:18:24,429 --> 00:18:29,170
redirected to the destination is the

00:18:26,650 --> 00:18:31,630
node path which is a front page in

00:18:29,170 --> 00:18:35,020
Drupal so it's not only rolled up banner

00:18:31,630 --> 00:18:37,120
but it's also path dependence so really

00:18:35,020 --> 00:18:39,130
there is a problem here because we have

00:18:37,120 --> 00:18:40,990
HTML is embedded in the notes HTML and

00:18:39,130 --> 00:18:43,330
it's adapted to the user's permissions

00:18:40,990 --> 00:18:45,460
and to the current page and that just

00:18:43,330 --> 00:18:47,770
breaks around the caching because this

00:18:45,460 --> 00:18:50,170
specific ref render cache entry if it

00:18:47,770 --> 00:18:52,360
were to go into the render cash we'd

00:18:50,170 --> 00:18:54,790
only be useful in very specific

00:18:52,360 --> 00:18:57,940
circumstances which is this page imagine

00:18:54,790 --> 00:18:59,610
having done thousand locations where

00:18:57,940 --> 00:19:01,660
this no it appears then you would have

00:18:59,610 --> 00:19:03,910
10,000 cash and trees instead of just

00:19:01,660 --> 00:19:06,250
one and that's of course not very ideal

00:19:03,910 --> 00:19:09,190
so we have to find figure out a way to

00:19:06,250 --> 00:19:11,170
make it work with render caching and

00:19:09,190 --> 00:19:12,760
still have the personalization because

00:19:11,170 --> 00:19:14,860
this is what what's personalization is

00:19:12,760 --> 00:19:17,950
right the links are to the specific

00:19:14,860 --> 00:19:21,030
current user so in Drupal 8 what we did

00:19:17,950 --> 00:19:24,820
was instead of having the entire HTML

00:19:21,030 --> 00:19:27,220
like this we made it look like this just

00:19:24,820 --> 00:19:28,750
a diff there is a invisible placeholder

00:19:27,220 --> 00:19:30,820
with a data attribute that contains the

00:19:28,750 --> 00:19:34,720
relevant metadata that is used to

00:19:30,820 --> 00:19:36,670
generate the contextual links it's also

00:19:34,720 --> 00:19:38,260
embedded in the noise HTML however it's

00:19:36,670 --> 00:19:40,120
an invisible placeholder that doesn't

00:19:38,260 --> 00:19:44,350
contain anything user-specific so it is

00:19:40,120 --> 00:19:46,360
compatible with the render cash so how

00:19:44,350 --> 00:19:48,280
does this expand into the actual

00:19:46,360 --> 00:19:50,080
contextual links into belaid's well we

00:19:48,280 --> 00:19:51,640
have the contextual ID that's what they

00:19:50,080 --> 00:19:55,630
what they're called we have those in the

00:19:51,640 --> 00:19:57,220
HTML we load some JavaScript that is

00:19:55,630 --> 00:19:58,450
only added to the page when the user

00:19:57,220 --> 00:20:00,940
actually has permission to use

00:19:58,450 --> 00:20:02,230
contextual links and that javascript is

00:20:00,940 --> 00:20:04,840
going to make sure that a contextual

00:20:02,230 --> 00:20:06,490
link show up by posting those contextual

00:20:04,840 --> 00:20:09,190
IDs the identifiers in the invisible

00:20:06,490 --> 00:20:13,150
placeholders to a certain path route in

00:20:09,190 --> 00:20:15,610
Drupal 8 and getting back d rendered

00:20:13,150 --> 00:20:17,260
contextual links that's it and the

00:20:15,610 --> 00:20:19,390
result is we have the same HTML for all

00:20:17,260 --> 00:20:21,610
users so it can be served very fast

00:20:19,390 --> 00:20:23,500
immediately to all users is the same for

00:20:21,610 --> 00:20:34,510
everybody the personalization can be

00:20:23,500 --> 00:20:36,640
applied later yes okay can somebody turn

00:20:34,510 --> 00:20:41,710
of the lights because they were there

00:20:36,640 --> 00:20:47,950
being turned off earlier thanks for

00:20:41,710 --> 00:20:52,030
saying that by the way okay I wish

00:20:47,950 --> 00:20:53,590
somebody gets poking up sooner though in

00:20:52,030 --> 00:20:57,970
any case I hope the explanations were

00:20:53,590 --> 00:21:00,100
sufficient in in that case so contextual

00:20:57,970 --> 00:21:02,020
links in contextual IDs in HTML

00:21:00,100 --> 00:21:04,930
Javascript loaded only if the current

00:21:02,020 --> 00:21:06,460
user can use contextual links a request

00:21:04,930 --> 00:21:08,050
to the server to generate them and then

00:21:06,460 --> 00:21:10,240
is inserted into the page results same

00:21:08,050 --> 00:21:12,430
HTML for all users personalization is

00:21:10,240 --> 00:21:14,410
applied later as in not when the page is

00:21:12,430 --> 00:21:17,350
served but only applied when the

00:21:14,410 --> 00:21:19,090
javascript is doing its thing similar

00:21:17,350 --> 00:21:21,580
story for the new comment marker so you

00:21:19,090 --> 00:21:24,070
had a new marker and updated market for

00:21:21,580 --> 00:21:26,050
drupal 8 comments effort in governments

00:21:24,070 --> 00:21:28,510
in general and you see a small diff at

00:21:26,050 --> 00:21:30,550
the top of the slide and before it was

00:21:28,510 --> 00:21:32,380
really just printing the final result

00:21:30,550 --> 00:21:34,300
immediately so it was calculating for

00:21:32,380 --> 00:21:36,970
every comment for the current user if

00:21:34,300 --> 00:21:39,310
the user had seen it already or not and

00:21:36,970 --> 00:21:41,050
if so apply a newer updated common

00:21:39,310 --> 00:21:44,230
marker and instead what we're doing now

00:21:41,050 --> 00:21:46,240
is again a hidden place holder with a

00:21:44,230 --> 00:21:48,960
data attribute that contains some useful

00:21:46,240 --> 00:21:51,250
metadata that is the same for everybody

00:21:48,960 --> 00:21:53,080
another thing we're adding is because

00:21:51,250 --> 00:21:54,850
just a common time stamp which is a data

00:21:53,080 --> 00:21:56,740
being added for each comment is not

00:21:54,850 --> 00:21:58,090
sufficient to be able to figure out if

00:21:56,740 --> 00:22:01,360
the user has seen it already we also

00:21:58,090 --> 00:22:03,070
need to know which note it is so in hook

00:22:01,360 --> 00:22:04,960
know if you alter we're adding a data

00:22:03,070 --> 00:22:07,180
attribute to the note so we can

00:22:04,960 --> 00:22:09,190
correlate the common timestamps with a

00:22:07,180 --> 00:22:11,200
note IDs and figure out what the

00:22:09,190 --> 00:22:13,420
appropriate marker is for the current

00:22:11,200 --> 00:22:15,520
user so again we have embedded

00:22:13,420 --> 00:22:18,130
stuff that is embedded in noise HTML

00:22:15,520 --> 00:22:21,280
again an invisible placeholder and again

00:22:18,130 --> 00:22:23,230
compatible with the render cash so the

00:22:21,280 --> 00:22:25,960
logic for this and Drupal 8 is similar

00:22:23,230 --> 00:22:27,670
to what we just saw no tidy data

00:22:25,960 --> 00:22:29,650
attributes common timestamp data

00:22:27,670 --> 00:22:31,120
attributes some JavaScript that is

00:22:29,650 --> 00:22:32,980
lowered its only if a fanta gate because

00:22:31,120 --> 00:22:36,450
authenticated users are the only ones

00:22:32,980 --> 00:22:39,490
that can use or see rather these markers

00:22:36,450 --> 00:22:42,070
we post the note IDs in this case to a

00:22:39,490 --> 00:22:44,440
certain location on the server we get a

00:22:42,070 --> 00:22:46,120
response back the result is same HTML

00:22:44,440 --> 00:22:47,530
serves to all users and the

00:22:46,120 --> 00:22:50,650
personalization is applied later through

00:22:47,530 --> 00:22:52,150
JavaScript track your new and updated

00:22:50,650 --> 00:22:54,730
markers which is somewhere X new

00:22:52,150 --> 00:22:57,100
comments links it's all similar general

00:22:54,730 --> 00:22:59,500
gist is Drupal 7 use a specific date on

00:22:57,100 --> 00:23:01,120
HTML which is problematic in Drupal 8 we

00:22:59,500 --> 00:23:03,250
have data attributes with universal

00:23:01,120 --> 00:23:04,900
truths if you will perhaps on invisible

00:23:03,250 --> 00:23:07,720
placeholders perhaps somewhere else like

00:23:04,900 --> 00:23:09,850
for example on the node denotes HTML of

00:23:07,720 --> 00:23:11,980
course we load some JavaScript if the

00:23:09,850 --> 00:23:14,650
user has a proper permission and only

00:23:11,980 --> 00:23:16,030
then we cache and then we cache use a

00:23:14,650 --> 00:23:18,540
specific date on the client side and

00:23:16,030 --> 00:23:21,370
only if necessary we talk to the server

00:23:18,540 --> 00:23:24,310
so really the conclusion here is to use

00:23:21,370 --> 00:23:25,900
cash tags precisely because if they're

00:23:24,310 --> 00:23:28,330
not the right ones are not granular

00:23:25,900 --> 00:23:31,780
enough not specific enough then they

00:23:28,330 --> 00:23:34,420
won't be of much use as it could be we

00:23:31,780 --> 00:23:36,580
tag random arrays with cash tags you can

00:23:34,420 --> 00:23:38,110
delete tech cash tags to prevent cell

00:23:36,580 --> 00:23:40,120
contents invalidate them to allow for

00:23:38,110 --> 00:23:42,340
still contents personalized via

00:23:40,120 --> 00:23:44,530
JavaScript on the cup and cashing on the

00:23:42,340 --> 00:23:46,030
client side that allows you to have

00:23:44,530 --> 00:23:48,010
cacheable render arrays which can be

00:23:46,030 --> 00:23:49,330
served to everybody at least to

00:23:48,010 --> 00:23:52,090
everybody with the same combination of

00:23:49,330 --> 00:23:54,160
roles you apply universal truths through

00:23:52,090 --> 00:23:55,660
data attributes and you personalize

00:23:54,160 --> 00:23:57,880
through JavaScript in combination with

00:23:55,660 --> 00:23:59,890
local storage if you wish so the upper

00:23:57,880 --> 00:24:01,960
half use cash to exercise is about cache

00:23:59,890 --> 00:24:04,330
invalidation which is a tricky part and

00:24:01,960 --> 00:24:05,980
then cash filling as long as you're not

00:24:04,330 --> 00:24:07,510
doing user specific stuff you're safe

00:24:05,980 --> 00:24:12,340
and if you're doing user specific stuff

00:24:07,510 --> 00:24:14,710
use this approach now that was render

00:24:12,340 --> 00:24:17,230
caching the next thing is caching all

00:24:14,710 --> 00:24:19,600
the things on the client side because I

00:24:17,230 --> 00:24:21,610
think some of you if not many of you are

00:24:19,600 --> 00:24:25,960
thinking didn't you make Drupal a whole

00:24:21,610 --> 00:24:26,780
lot slower well the answer is so far

00:24:25,960 --> 00:24:28,640
from what you've

00:24:26,780 --> 00:24:30,730
what we've seen so far the answer is yes

00:24:28,640 --> 00:24:33,260
because we have separate requests for

00:24:30,730 --> 00:24:36,590
the triple-eight toolbar to render the

00:24:33,260 --> 00:24:38,870
entire menu tree for the new and updated

00:24:36,590 --> 00:24:40,430
common markers for the contextual links

00:24:38,870 --> 00:24:42,260
and frame place editing so if you have

00:24:40,430 --> 00:24:44,480
all those things enabled that's four

00:24:42,260 --> 00:24:47,090
separate requests so from one request

00:24:44,480 --> 00:24:49,940
per page 25 requests per page and that's

00:24:47,090 --> 00:24:52,550
not great of course so let's take a step

00:24:49,940 --> 00:24:54,530
back and look at our goals the goals are

00:24:52,550 --> 00:24:58,370
to make Drupal itself more scalable as

00:24:54,530 --> 00:25:00,230
in more requests answered per second the

00:24:58,370 --> 00:25:02,090
second thing is better perceived

00:25:00,230 --> 00:25:03,440
performance is what matters not better

00:25:02,090 --> 00:25:05,780
performance in general but better

00:25:03,440 --> 00:25:10,370
perceived performance as in how fast

00:25:05,780 --> 00:25:12,680
user sees things on his device so what

00:25:10,370 --> 00:25:14,180
we're doing is by serving HTML faster

00:25:12,680 --> 00:25:16,040
because we don't need to personalize on

00:25:14,180 --> 00:25:17,570
the server side we can just do very

00:25:16,040 --> 00:25:19,970
little computation on the server side

00:25:17,570 --> 00:25:23,180
and send HTML as fast as possible we

00:25:19,970 --> 00:25:24,350
personalize via JavaScript meaning that

00:25:23,180 --> 00:25:25,850
it doesn't have to happen on the server

00:25:24,350 --> 00:25:28,430
now we catch things on the client side

00:25:25,850 --> 00:25:30,470
what we get done is we get always a

00:25:28,430 --> 00:25:32,210
faster time to glass and time the glass

00:25:30,470 --> 00:25:33,530
is really the time between requesting a

00:25:32,210 --> 00:25:36,590
page and actually seeing something

00:25:33,530 --> 00:25:37,700
appear on your screen so it's always

00:25:36,590 --> 00:25:38,930
going to be faster because less

00:25:37,700 --> 00:25:41,960
calculations have to happen on the

00:25:38,930 --> 00:25:43,580
server side and what we're doing is

00:25:41,960 --> 00:25:45,380
we're just moving personalization from

00:25:43,580 --> 00:25:47,210
the server side to the client side and

00:25:45,380 --> 00:25:49,550
then the personalization our clients

00:25:47,210 --> 00:25:51,650
like what it's doing is is indeed making

00:25:49,550 --> 00:25:53,420
things slower if the cache is called

00:25:51,650 --> 00:25:54,890
meaning there is nothing in local

00:25:53,420 --> 00:25:57,020
storage nothing in the client-side cash

00:25:54,890 --> 00:25:59,810
because then we would need five requests

00:25:57,020 --> 00:26:02,360
per page which is not very great but it

00:25:59,810 --> 00:26:04,580
won't happen every time because once the

00:26:02,360 --> 00:26:06,290
cache is warm it will things will be a

00:26:04,580 --> 00:26:08,720
lot faster because imagine that you have

00:26:06,290 --> 00:26:10,400
to send the entire toolbar menu tree

00:26:08,720 --> 00:26:12,740
which is the entire admin menu tree

00:26:10,400 --> 00:26:14,300
which can be quite large if you install

00:26:12,740 --> 00:26:17,900
additional contributed modules which

00:26:14,300 --> 00:26:19,880
everybody does right and you have to

00:26:17,900 --> 00:26:21,800
send those many kilobytes of HTML with

00:26:19,880 --> 00:26:23,750
every single page request that will make

00:26:21,800 --> 00:26:25,250
things quite a bit slower and if you can

00:26:23,750 --> 00:26:28,520
just catch it on the client side and use

00:26:25,250 --> 00:26:30,110
it from there it will be a lot faster so

00:26:28,520 --> 00:26:33,350
really what what this is about is about

00:26:30,110 --> 00:26:35,480
having an HTML skeleton contains the

00:26:33,350 --> 00:26:38,450
main content of the page plus java

00:26:35,480 --> 00:26:40,580
screen that's going to be faster as long

00:26:38,450 --> 00:26:43,580
as the client says blindside cash is

00:26:40,580 --> 00:26:44,779
and another important fact that I think

00:26:43,580 --> 00:26:46,610
many of us in the triple world I've

00:26:44,779 --> 00:26:50,029
forgotten is more personalization

00:26:46,610 --> 00:26:51,970
implies a slower website because how

00:26:50,029 --> 00:26:54,710
many of you did think of the fact that

00:26:51,970 --> 00:26:56,630
something simple stupid tiny as the

00:26:54,710 --> 00:26:59,539
commons new and updated markers we're

00:26:56,630 --> 00:27:01,519
actually making your site slower and

00:26:59,539 --> 00:27:04,039
then there's many of these kind of

00:27:01,519 --> 00:27:05,630
subtle small things that we are maybe

00:27:04,039 --> 00:27:07,190
forgetting about and we really should

00:27:05,630 --> 00:27:09,590
take into account if we want to make her

00:27:07,190 --> 00:27:11,419
or websites faster and as fast as

00:27:09,590 --> 00:27:14,480
possible really so the real question

00:27:11,419 --> 00:27:16,460
here is how to keep the cash warm

00:27:14,480 --> 00:27:19,549
because as one of the cache is nice and

00:27:16,460 --> 00:27:21,649
warm things will be faster especially on

00:27:19,549 --> 00:27:24,320
mobile devices and that brings us to

00:27:21,649 --> 00:27:27,110
again the same quote essentially cache

00:27:24,320 --> 00:27:28,639
invalidation is really hard so not only

00:27:27,110 --> 00:27:31,070
have to do we have to solve it on the

00:27:28,639 --> 00:27:33,200
server side with cash tags render arrays

00:27:31,070 --> 00:27:35,480
and so on but we also have to solve it

00:27:33,200 --> 00:27:37,309
on the client side because again caching

00:27:35,480 --> 00:27:39,590
is easy for cache invalidation is hard

00:27:37,309 --> 00:27:41,840
and poor cache invalidation that's what

00:27:39,590 --> 00:27:43,549
really leads to poor performance so

00:27:41,840 --> 00:27:46,159
let's look at an example an example is a

00:27:43,549 --> 00:27:47,929
toolbar in Drupal 8 before the

00:27:46,159 --> 00:27:51,470
optimization that went in I think last

00:27:47,929 --> 00:27:53,029
week we had one HTTP requests per page

00:27:51,470 --> 00:27:55,580
to load the menu tree that you see on

00:27:53,029 --> 00:27:58,460
the left-hand side and that's not good

00:27:55,580 --> 00:27:59,990
of course that's very very bad but now

00:27:58,460 --> 00:28:02,870
after the optimization we only have one

00:27:59,990 --> 00:28:05,840
setting per page as in a one tiny string

00:28:02,870 --> 00:28:09,500
of information that's it that's the only

00:28:05,840 --> 00:28:11,389
overhead we have and how did that how do

00:28:09,500 --> 00:28:13,100
we do it there well a new page build

00:28:11,389 --> 00:28:15,740
which is kind of like hooking it in

00:28:13,100 --> 00:28:18,529
Drupal 7 what we're doing there is we're

00:28:15,740 --> 00:28:20,389
adding a setting that contains a hash a

00:28:18,529 --> 00:28:23,120
hash that identifies the content that

00:28:20,389 --> 00:28:24,830
should be cached on the client side and

00:28:23,120 --> 00:28:26,419
we make sure of course that calculating

00:28:24,830 --> 00:28:28,700
the hash itself is also fast because

00:28:26,419 --> 00:28:32,120
otherwise this is expensive and we're

00:28:28,700 --> 00:28:34,940
not really winning anything and this

00:28:32,120 --> 00:28:36,980
hash is what identifies the toolbar menu

00:28:34,940 --> 00:28:39,710
tree that we should have my client side

00:28:36,980 --> 00:28:42,169
cash and it depends it changes whenever

00:28:39,710 --> 00:28:44,899
they use a Rolls permissions change a

00:28:42,169 --> 00:28:46,760
user's role change a menu link in the

00:28:44,899 --> 00:28:48,679
admin menu not just any menu but to

00:28:46,760 --> 00:28:51,529
admin menu changes and when any module

00:28:48,679 --> 00:28:54,410
is installer and installed so anything

00:28:51,529 --> 00:28:58,160
that might affect what is contained in

00:28:54,410 --> 00:29:00,620
the admin menu tree so the hash changes

00:28:58,160 --> 00:29:01,840
whenever anything changes in what it

00:29:00,620 --> 00:29:04,430
should look like what it should contain

00:29:01,840 --> 00:29:08,510
now combine the fact that we're adding

00:29:04,430 --> 00:29:10,670
that setting to the page combine it with

00:29:08,510 --> 00:29:13,670
this JavaScript so this is somewhat

00:29:10,670 --> 00:29:15,170
simplified but it gets to just across so

00:29:13,670 --> 00:29:16,490
we're retrieving the first thing we're

00:29:15,170 --> 00:29:18,530
doing in the load function or so we're

00:29:16,490 --> 00:29:21,020
renaming local storage to LS to keep

00:29:18,530 --> 00:29:24,320
things schroeder we're retrieving the

00:29:21,020 --> 00:29:25,520
hash from Drupal settings it's Drupal

00:29:24,320 --> 00:29:27,200
settings one word now and through

00:29:25,520 --> 00:29:29,270
instead of triple dot settings in Drupal

00:29:27,200 --> 00:29:31,460
7 but that's just a detail which we

00:29:29,270 --> 00:29:33,410
retrieve the hash now we look at the

00:29:31,460 --> 00:29:36,020
hash that is stored in client-side cash

00:29:33,410 --> 00:29:38,360
because if those two are the same which

00:29:36,020 --> 00:29:39,530
is the f-test that comes up next then

00:29:38,360 --> 00:29:41,780
that means that the thing that we have

00:29:39,530 --> 00:29:43,070
cashed in the client side is exactly the

00:29:41,780 --> 00:29:44,990
same as the thing that we should be

00:29:43,070 --> 00:29:47,630
showing so we don't have to do any work

00:29:44,990 --> 00:29:51,140
except for getting the stuff the menu

00:29:47,630 --> 00:29:53,900
tree from local storage bar sits to json

00:29:51,140 --> 00:29:56,600
again and then just set it as in loaded

00:29:53,900 --> 00:29:58,370
show it to the user however if the

00:29:56,600 --> 00:30:00,830
hashes are not the same meaning that the

00:29:58,370 --> 00:30:02,660
thing that the use that server says we

00:30:00,830 --> 00:30:03,920
should be showing is different from the

00:30:02,660 --> 00:30:06,500
thing that we have cached on the client

00:30:03,920 --> 00:30:09,230
side then we should remove the thing

00:30:06,500 --> 00:30:11,410
that is cached on the client side do an

00:30:09,230 --> 00:30:14,510
AJAX call back to start loading it and

00:30:11,410 --> 00:30:16,640
remember the hash that we are now

00:30:14,510 --> 00:30:19,100
supposed to be showing and then once the

00:30:16,640 --> 00:30:21,170
HX call back fires we have the safe

00:30:19,100 --> 00:30:22,910
method that's at the bottom that's

00:30:21,170 --> 00:30:24,950
storing in client side cash and then

00:30:22,910 --> 00:30:28,060
showing its to the user so as you can

00:30:24,950 --> 00:30:30,500
see the offer logic is not hard at all

00:30:28,060 --> 00:30:32,120
most of the logic that sits on the

00:30:30,500 --> 00:30:34,190
server site where you determine this

00:30:32,120 --> 00:30:36,170
sketch did this hash that you can use

00:30:34,190 --> 00:30:38,570
which you can kind of view as a client

00:30:36,170 --> 00:30:43,240
side cash tag like we have on the server

00:30:38,570 --> 00:30:45,740
side in Drupal so that's it essentially

00:30:43,240 --> 00:30:49,070
another example is the new Common Market

00:30:45,740 --> 00:30:51,110
that I explained earlier so that I told

00:30:49,070 --> 00:30:53,000
you that it was doing additional HTTP

00:30:51,110 --> 00:30:55,010
requests but that's not really the case

00:30:53,000 --> 00:30:57,020
it's trying to be smart about it it's

00:30:55,010 --> 00:30:58,610
applying Urist Ock's to make sure that

00:30:57,020 --> 00:31:00,850
it's only doing HTTP requests when it's

00:30:58,610 --> 00:31:03,950
really really necessary for example

00:31:00,850 --> 00:31:06,620
Drupal forever or at least in seven I

00:31:03,950 --> 00:31:09,230
think in six as well has never shown up

00:31:06,620 --> 00:31:11,780
or new comment markers whenever the

00:31:09,230 --> 00:31:13,670
comptons was older than 30 days so

00:31:11,780 --> 00:31:15,860
drupal essentially assumes if content is

00:31:13,670 --> 00:31:18,770
older than 30 days well the user should

00:31:15,860 --> 00:31:21,020
have seen it already I don't care if its

00:31:18,770 --> 00:31:22,520
relative to that user new or updated we

00:31:21,020 --> 00:31:24,110
just assume it's already been read so

00:31:22,520 --> 00:31:27,050
that means that for anything that solved

00:31:24,110 --> 00:31:28,910
in 30 days which on big website is

00:31:27,050 --> 00:31:30,890
usually a lot we just don't have to do

00:31:28,910 --> 00:31:32,930
any requests at all because Drupal

00:31:30,890 --> 00:31:35,540
already was assuming that it was read so

00:31:32,930 --> 00:31:38,390
no work for us great that's a lot less

00:31:35,540 --> 00:31:39,679
things that we have to do however for

00:31:38,390 --> 00:31:41,360
those things that are newer what we're

00:31:39,679 --> 00:31:43,220
doing is we're storing the last reads

00:31:41,360 --> 00:31:45,770
timestamps and local storage for a node

00:31:43,220 --> 00:31:47,720
so how the new and updated comp markers

00:31:45,770 --> 00:31:49,550
work is essentially attracts for each

00:31:47,720 --> 00:31:52,970
note when the last time is that a user

00:31:49,550 --> 00:31:54,770
has seen that node very simple and what

00:31:52,970 --> 00:31:56,660
we're doing is we're cashing those take

00:31:54,770 --> 00:31:58,760
that information on the client side as

00:31:56,660 --> 00:31:59,929
well to be able to determine based on

00:31:58,760 --> 00:32:02,090
the common times time that we are

00:31:59,929 --> 00:32:03,950
already embedding for each comments and

00:32:02,090 --> 00:32:06,230
now we can compare that information with

00:32:03,950 --> 00:32:07,760
the last time a user has seen the node

00:32:06,230 --> 00:32:10,010
and then we can just match them and

00:32:07,760 --> 00:32:11,900
figure out if it's new or updated for

00:32:10,010 --> 00:32:13,460
using what's interesting in this case is

00:32:11,900 --> 00:32:15,770
that we don't need something like to

00:32:13,460 --> 00:32:17,450
wear where we had this hash that changed

00:32:15,770 --> 00:32:20,000
whenever some things on the server side

00:32:17,450 --> 00:32:22,070
configuration changed and why is that

00:32:20,000 --> 00:32:24,050
the case because well what has been seen

00:32:22,070 --> 00:32:27,320
cannot be unseen in Drupal because you

00:32:24,050 --> 00:32:29,030
cannot mark something as unread if

00:32:27,320 --> 00:32:33,320
you've seen something at Point a and

00:32:29,030 --> 00:32:35,090
time then if you're progressing a week

00:32:33,320 --> 00:32:37,220
then that thing was still seeing a point

00:32:35,090 --> 00:32:39,290
a and time right so anything any

00:32:37,220 --> 00:32:42,440
comments that was created before point a

00:32:39,290 --> 00:32:44,809
and time will by definition already have

00:32:42,440 --> 00:32:47,020
been seen so we can that may sound very

00:32:44,809 --> 00:32:50,090
verbose but it's actually really simple

00:32:47,020 --> 00:32:55,760
so if you put it on paper I'm sure you

00:32:50,090 --> 00:32:57,860
will find it very sensible so in this

00:32:55,760 --> 00:33:00,080
case no hash is necessary so you can see

00:32:57,860 --> 00:33:01,760
that there is very various use cases and

00:33:00,080 --> 00:33:03,530
they all have very different properties

00:33:01,760 --> 00:33:04,910
but you can do very clever things to

00:33:03,530 --> 00:33:07,550
make sure that you have to do as few

00:33:04,910 --> 00:33:10,160
work as possible as little work as

00:33:07,550 --> 00:33:12,530
possible so ideally we would have many

00:33:10,160 --> 00:33:16,070
hashes many clients I'd cash tax

00:33:12,530 --> 00:33:18,410
essentially and today we only have one

00:33:16,070 --> 00:33:20,419
and it's not really even a hash it's

00:33:18,410 --> 00:33:21,710
just the user ID so that you can

00:33:20,419 --> 00:33:23,090
for example in the case of the

00:33:21,710 --> 00:33:25,609
government new marker that's what it

00:33:23,090 --> 00:33:27,499
uses for it knows which user has which

00:33:25,609 --> 00:33:29,239
reads timestamp so you can do user

00:33:27,499 --> 00:33:30,649
specific stuff and cash use a specific

00:33:29,239 --> 00:33:34,220
stuff on the client side so that you

00:33:30,649 --> 00:33:36,200
know which user it belongs to one thing

00:33:34,220 --> 00:33:38,929
we will probably have but we don't have

00:33:36,200 --> 00:33:41,119
yet is a permission / which is kind of

00:33:38,929 --> 00:33:44,840
similar to the toolbar hash that we saw

00:33:41,119 --> 00:33:47,989
earlier and what it does is it isn't it

00:33:44,840 --> 00:33:49,879
is a hash that reflects all the

00:33:47,989 --> 00:33:52,369
permissions that the current user has so

00:33:49,879 --> 00:33:54,499
if any permission is added or removed or

00:33:52,369 --> 00:33:56,330
even renamed I think this hash will

00:33:54,499 --> 00:33:58,369
change which means that anything that is

00:33:56,330 --> 00:34:00,950
permission dependent that is cached on

00:33:58,369 --> 00:34:03,350
the client side should be cleared on the

00:34:00,950 --> 00:34:05,119
client side whenever that has changes so

00:34:03,350 --> 00:34:06,769
anything is permission dependence can

00:34:05,119 --> 00:34:09,349
use this sort of that can use this

00:34:06,769 --> 00:34:12,230
Pacific ash and that's something that we

00:34:09,349 --> 00:34:13,730
will use in getting rid of context of

00:34:12,230 --> 00:34:15,829
the additional HTTP requests for

00:34:13,730 --> 00:34:19,220
contextual links and in place editing

00:34:15,829 --> 00:34:21,740
and that's just the top of the iceberg

00:34:19,220 --> 00:34:23,839
we can hopefully add more and if not you

00:34:21,740 --> 00:34:25,549
can easily add more yourself it's just

00:34:23,839 --> 00:34:27,319
as simple as creating a Drupal setting

00:34:25,549 --> 00:34:30,649
passing it to the client site then have

00:34:27,319 --> 00:34:32,329
JavaScript it leverages it that's it so

00:34:30,649 --> 00:34:35,059
conclusion for client-side caching um

00:34:32,329 --> 00:34:36,379
you should only catch slowly changing

00:34:35,059 --> 00:34:38,510
data because it doesn't make sense to

00:34:36,379 --> 00:34:41,899
catch data that changes every second

00:34:38,510 --> 00:34:43,549
like stock information you should

00:34:41,899 --> 00:34:45,379
probably use it for personalization and

00:34:43,549 --> 00:34:46,760
in general really you should use it for

00:34:45,379 --> 00:34:48,740
anything that is expensive to send

00:34:46,760 --> 00:34:51,200
because it's a lot of bytes to put on

00:34:48,740 --> 00:34:52,940
the wire or anything that is expensive

00:34:51,200 --> 00:34:56,569
to calculate because it requires a lot

00:34:52,940 --> 00:34:58,220
of server CPU and in general what's also

00:34:56,569 --> 00:35:00,710
really really important if you want

00:34:58,220 --> 00:35:02,359
things to remain fast and not have to do

00:35:00,710 --> 00:35:04,790
additional HTTP requests every single

00:35:02,359 --> 00:35:07,099
time is to minimize number of HTTP

00:35:04,790 --> 00:35:09,680
requests obviously try to apply us six

00:35:07,099 --> 00:35:12,799
like we're doing for the commons new and

00:35:09,680 --> 00:35:17,839
updated markers and use hashes as kind

00:35:12,799 --> 00:35:20,630
of client-side cash tags so that's all

00:35:17,839 --> 00:35:22,670
about caching this is the last thing I

00:35:20,630 --> 00:35:26,599
wanted to talk about which i also find

00:35:22,670 --> 00:35:28,790
really interesting so optimize away all

00:35:26,599 --> 00:35:30,799
the necessary bytes this is about asset

00:35:28,790 --> 00:35:33,400
handling for the longest time we have

00:35:30,799 --> 00:35:35,350
had aggregation and Drupal core

00:35:33,400 --> 00:35:37,270
for also the longest time we haven't had

00:35:35,350 --> 00:35:40,720
we haven't had javascript minification

00:35:37,270 --> 00:35:42,990
and gore and in Triple Eight it should

00:35:40,720 --> 00:35:45,220
become trivial to write your own

00:35:42,990 --> 00:35:48,580
javascript minification or plug it in

00:35:45,220 --> 00:35:50,530
very easily without worries like you

00:35:48,580 --> 00:35:53,110
would have worries in Drupal 7 and

00:35:50,530 --> 00:35:55,150
before so the API if you could call it

00:35:53,110 --> 00:35:57,430
that in Drupal 7 look like this for

00:35:55,150 --> 00:35:59,380
aggregation you had a aggregates call

00:35:57,430 --> 00:36:02,140
back at a group call back and that was

00:35:59,380 --> 00:36:04,600
it you could override the whole

00:36:02,140 --> 00:36:06,370
implement both or nothing or apply hex

00:36:04,600 --> 00:36:09,040
and hacks is the thing that most people

00:36:06,370 --> 00:36:11,140
chose because that was the only way to

00:36:09,040 --> 00:36:14,920
get something meaningful done it felt at

00:36:11,140 --> 00:36:16,480
least in Drupal 7 so the end results

00:36:14,920 --> 00:36:18,460
that you had incompatibility hell

00:36:16,480 --> 00:36:20,770
essentially because the Omega team for

00:36:18,460 --> 00:36:24,520
example is doing some special stuff with

00:36:20,770 --> 00:36:27,430
I believe CSS in the header to do I

00:36:24,520 --> 00:36:29,440
dunno maybe sassy stuff then there is

00:36:27,430 --> 00:36:32,050
the CDN module that also tries to do

00:36:29,440 --> 00:36:33,910
well it just tries to implement CDN

00:36:32,050 --> 00:36:35,740
integration but it uses the same

00:36:33,910 --> 00:36:37,780
technique and because there is not

00:36:35,740 --> 00:36:41,020
really an API for this they conflict it

00:36:37,780 --> 00:36:43,240
and they just it was a mess it wasn't

00:36:41,020 --> 00:36:44,410
possible to get to work reliably now

00:36:43,240 --> 00:36:47,320
what we did in Drupal 8 it was

00:36:44,410 --> 00:36:49,750
essentially made eip ABI more explicit

00:36:47,320 --> 00:36:52,510
so that you really know what's going on

00:36:49,750 --> 00:36:54,190
and more building blocks so that you can

00:36:52,510 --> 00:36:57,670
override individual building blocks and

00:36:54,190 --> 00:36:59,590
instead of overriding a whole logic is

00:36:57,670 --> 00:37:01,420
really identical so don't expect

00:36:59,590 --> 00:37:03,880
javascript minification core just yet

00:37:01,420 --> 00:37:05,860
don't expect any special new features

00:37:03,880 --> 00:37:08,350
just yet it's just restructuring

00:37:05,860 --> 00:37:09,880
refactoring into building blocks and the

00:37:08,350 --> 00:37:12,040
building blocks look like this the first

00:37:09,880 --> 00:37:13,420
one is the asset collection optimize

00:37:12,040 --> 00:37:15,850
your interface and it sounds like a

00:37:13,420 --> 00:37:17,500
mouthful but it's really simple

00:37:15,850 --> 00:37:19,660
essentially so this is an interface it's

00:37:17,500 --> 00:37:20,920
implemented both for CSS and JavaScript

00:37:19,660 --> 00:37:23,860
those are the two different asset types

00:37:20,920 --> 00:37:25,930
that we have a collection of CSS files

00:37:23,860 --> 00:37:28,480
is essentially for example all the CSS

00:37:25,930 --> 00:37:30,760
on your page is one CSS collection so

00:37:28,480 --> 00:37:33,310
this is for implementing the optimizer

00:37:30,760 --> 00:37:36,190
for all the CSS files on the page what

00:37:33,310 --> 00:37:38,080
it uses is the asset collection group or

00:37:36,190 --> 00:37:40,060
interface this is what groups the sites

00:37:38,080 --> 00:37:41,950
which which sees as files to combine so

00:37:40,060 --> 00:37:43,780
if you had 30 CSS files on your page

00:37:41,950 --> 00:37:45,730
well probably would have something like

00:37:43,780 --> 00:37:47,050
maybe three groups each group contains

00:37:45,730 --> 00:37:49,180
three files and

00:37:47,050 --> 00:37:52,930
contained 10 files three groups 10 files

00:37:49,180 --> 00:37:54,430
each makes 30 and then those 10 files

00:37:52,930 --> 00:37:57,220
per bundle would be concatenated

00:37:54,430 --> 00:37:59,110
together and minified that's what is us

00:37:57,220 --> 00:38:01,600
this is the thing that decides which the

00:37:59,110 --> 00:38:04,240
groups are then you have the optimizer

00:38:01,600 --> 00:38:06,130
so given a asset optimized meaning

00:38:04,240 --> 00:38:08,770
minify it meaning for example strip out

00:38:06,130 --> 00:38:10,330
all the white space and then there is a

00:38:08,770 --> 00:38:13,240
dumper which is essentially free to book

00:38:10,330 --> 00:38:15,970
or write it to disk as in I have to

00:38:13,240 --> 00:38:17,830
public colon slash slash files like CSS

00:38:15,970 --> 00:38:20,560
something like that just some location

00:38:17,830 --> 00:38:22,210
to write a time and then finally the

00:38:20,560 --> 00:38:24,940
asset collection renderer interface so

00:38:22,210 --> 00:38:27,190
given the optimized collection so from

00:38:24,940 --> 00:38:29,440
our 30 files we went to three optimized

00:38:27,190 --> 00:38:31,060
files those three optimized files are

00:38:29,440 --> 00:38:33,340
passed to the asset collection renderer

00:38:31,060 --> 00:38:34,780
and that generates the renderer rate

00:38:33,340 --> 00:38:37,750
that will eventually result in for

00:38:34,780 --> 00:38:41,530
example the script tags on the page so

00:38:37,750 --> 00:38:43,630
that's all it does and really the nice

00:38:41,530 --> 00:38:45,610
thing about its this approach is that

00:38:43,630 --> 00:38:47,350
you can override individual things at

00:38:45,610 --> 00:38:49,240
will so in Drupal 8 we have this thing

00:38:47,350 --> 00:38:52,530
called services and each of these

00:38:49,240 --> 00:38:55,180
aspects is a service so you have the CSS

00:38:52,530 --> 00:38:56,860
optimizer which optimizes an individual

00:38:55,180 --> 00:38:58,870
CSS file but you also have a JavaScript

00:38:56,860 --> 00:39:01,030
optimizer which optimizes an individual

00:38:58,870 --> 00:39:03,520
javascript file and the things that we

00:39:01,030 --> 00:39:05,140
get with this are really cool at least

00:39:03,520 --> 00:39:07,780
as a speed freak I find really

00:39:05,140 --> 00:39:10,420
interesting so possibilities are amongst

00:39:07,780 --> 00:39:12,370
others you can override just the asset

00:39:10,420 --> 00:39:13,990
number retain everything else and then

00:39:12,370 --> 00:39:17,110
write your files to an external server

00:39:13,990 --> 00:39:19,330
and a CD ms3 whatever you want so that's

00:39:17,110 --> 00:39:21,580
one class one tiny tiny glass is one

00:39:19,330 --> 00:39:23,620
method just implement that override a

00:39:21,580 --> 00:39:26,620
service that's it and your files will be

00:39:23,620 --> 00:39:28,360
written to s3 for example you can

00:39:26,620 --> 00:39:30,340
override just a JavaScript optimizer

00:39:28,360 --> 00:39:32,050
because if your hipster you might be

00:39:30,340 --> 00:39:33,820
using notes yes and you might want to

00:39:32,050 --> 00:39:35,260
use uglify chase and then your

00:39:33,820 --> 00:39:38,710
javascript can be minified again by

00:39:35,260 --> 00:39:41,680
writing a single class j/s collection

00:39:38,710 --> 00:39:43,540
renderer you could implement you could

00:39:41,680 --> 00:39:45,460
override the way things are rendered to

00:39:43,540 --> 00:39:47,470
not just render to strip tags but use

00:39:45,460 --> 00:39:50,110
the lab jscript loader if you're into

00:39:47,470 --> 00:39:51,820
that you could do really really

00:39:50,110 --> 00:39:53,860
interesting and amazing things if you

00:39:51,820 --> 00:39:55,780
are collecting enough log data so that

00:39:53,860 --> 00:39:58,090
you can use a third party or write your

00:39:55,780 --> 00:40:00,400
own data mining thing and then you can

00:39:58,090 --> 00:40:01,539
calculate globally optimal groups

00:40:00,400 --> 00:40:04,000
and that's something that has been a

00:40:01,539 --> 00:40:06,069
problem forever in Drupal we group files

00:40:04,000 --> 00:40:09,039
together but we don't really know enough

00:40:06,069 --> 00:40:10,450
to make sure that the file the files

00:40:09,039 --> 00:40:12,640
within a group won't appear in another

00:40:10,450 --> 00:40:14,470
group on another page and then we might

00:40:12,640 --> 00:40:16,390
be ending up downloading the same files

00:40:14,470 --> 00:40:18,190
but part of a different group over and

00:40:16,390 --> 00:40:21,039
over again this is where I can solve

00:40:18,190 --> 00:40:22,720
that you can override the entire

00:40:21,039 --> 00:40:25,119
collection optimizer so that's the whole

00:40:22,720 --> 00:40:26,380
thing that receives all your CSS files

00:40:25,119 --> 00:40:28,510
on the page and returns the optimized

00:40:26,380 --> 00:40:30,190
ones you could make it so that for

00:40:28,510 --> 00:40:32,200
example a new aggregate is generated

00:40:30,190 --> 00:40:34,240
whenever the M time changes of any of

00:40:32,200 --> 00:40:35,650
the files within the aggregate or you

00:40:34,240 --> 00:40:38,380
could just do the really cool thing

00:40:35,650 --> 00:40:40,180
which is say goodbye Drupal architecture

00:40:38,380 --> 00:40:42,369
for asset handling I don't want any of

00:40:40,180 --> 00:40:44,200
you so just override the asset

00:40:42,369 --> 00:40:46,660
collection optimizer and use your entire

00:40:44,200 --> 00:40:48,579
custom architecture just return the

00:40:46,660 --> 00:40:50,109
optimized files and that's it you can do

00:40:48,579 --> 00:40:54,490
whatever you want without having to heck

00:40:50,109 --> 00:40:56,440
core and that's really conclusion you

00:40:54,490 --> 00:40:59,319
can override individual asset services

00:40:56,440 --> 00:41:01,299
in Drupal 8 because you can then improve

00:40:59,319 --> 00:41:03,369
individual as it surfaces and keep

00:41:01,299 --> 00:41:05,260
everything else as it is just because

00:41:03,369 --> 00:41:07,390
for example you really need chase

00:41:05,260 --> 00:41:10,029
magnification you can get you can do

00:41:07,390 --> 00:41:12,010
just that or you can apply your entire

00:41:10,029 --> 00:41:18,760
own architecture which was unthinkable

00:41:12,010 --> 00:41:23,440
in Drupal 8 7 so looking back at things

00:41:18,760 --> 00:41:26,220
we covered first up asset loading always

00:41:23,440 --> 00:41:29,020
load assets by attaching libraries

00:41:26,220 --> 00:41:31,440
render gashing use cash tags precisely

00:41:29,020 --> 00:41:34,150
to do proper cash and validation

00:41:31,440 --> 00:41:38,039
personalized via JavaScript and cash on

00:41:34,150 --> 00:41:40,569
a client site to do correct cash filling

00:41:38,039 --> 00:41:43,900
client-side caching only do that for

00:41:40,569 --> 00:41:46,210
slowly changing data and keep the cash

00:41:43,900 --> 00:41:47,470
warm if you wanted to remain fast

00:41:46,210 --> 00:41:50,619
because otherwise you'll just make

00:41:47,470 --> 00:41:53,130
things slower and asset handling you can

00:41:50,619 --> 00:41:55,240
now override individual asset services

00:41:53,130 --> 00:41:57,279
so things that still need to help it

00:41:55,240 --> 00:41:59,559
happen there this is just a tiny

00:41:57,279 --> 00:42:01,720
selection entity render caching just

00:41:59,559 --> 00:42:03,819
landed so yay for that but there is a

00:42:01,720 --> 00:42:05,260
follow-up issue for that to enable

00:42:03,819 --> 00:42:07,390
entity render caching for notes and

00:42:05,260 --> 00:42:08,980
comments so that's the last to happen it

00:42:07,390 --> 00:42:11,079
would be really really cool if we could

00:42:08,980 --> 00:42:13,539
have views work with cash tax because

00:42:11,079 --> 00:42:14,230
imagine that views are really fast

00:42:13,539 --> 00:42:15,790
because they can be

00:42:14,230 --> 00:42:18,160
cash properly and only when things

00:42:15,790 --> 00:42:19,990
change only then the viewers will be

00:42:18,160 --> 00:42:22,600
cleared and that means that views will

00:42:19,990 --> 00:42:25,170
be faster for everybody we could even

00:42:22,600 --> 00:42:28,570
work on enabling CSS and JavaScript

00:42:25,170 --> 00:42:30,250
added box finally in Drupal 8 because

00:42:28,570 --> 00:42:32,980
now it's much easier to reason about

00:42:30,250 --> 00:42:37,030
things so we can have Drupal core react

00:42:32,980 --> 00:42:38,619
to changed files automatically and the

00:42:37,030 --> 00:42:40,900
permission / thing that I explained

00:42:38,619 --> 00:42:42,190
earlier it will remove two HTTP requests

00:42:40,900 --> 00:42:44,560
per page as it currently stands in

00:42:42,190 --> 00:42:45,910
Drupal 8 and really in general anything

00:42:44,560 --> 00:42:48,490
if you're interested in this stuff

00:42:45,910 --> 00:42:52,990
anything that is cached with d8 cash

00:42:48,490 --> 00:42:55,750
ability we can use your help please join

00:42:52,990 --> 00:42:58,390
us so that was it I hope you liked it

00:42:55,750 --> 00:43:00,720
and if you have any questions feel free

00:42:58,390 --> 00:43:00,720
to ask

00:43:11,240 --> 00:43:14,900
that might be better yeah

00:43:20,980 --> 00:43:25,150
I know it's that the caching system and

00:43:23,890 --> 00:43:27,250
the moment doesn't know like it uses any

00:43:25,150 --> 00:43:28,690
kind of object orientation is it is it

00:43:27,250 --> 00:43:30,490
something we can expect that the caching

00:43:28,690 --> 00:43:33,430
system is going to move to object based

00:43:30,490 --> 00:43:35,560
things going forwards so the question is

00:43:33,430 --> 00:43:37,890
the caching API in Drupal 8 doesn't use

00:43:35,560 --> 00:43:40,660
object orientation yet essentially right

00:43:37,890 --> 00:43:42,340
yeah so you end up with a lots of a

00:43:40,660 --> 00:43:44,890
raise again thanks Lee is the problem

00:43:42,340 --> 00:43:46,840
right so are you specifically asking if

00:43:44,890 --> 00:43:48,460
the render system will change the object

00:43:46,840 --> 00:43:50,820
to being object oriented because that's

00:43:48,460 --> 00:43:53,140
why you have these giant erase still

00:43:50,820 --> 00:43:54,550
well I mean for the tag so we're talking

00:43:53,140 --> 00:43:55,840
about caching tags and things of that

00:43:54,550 --> 00:43:58,030
and you're putting together a big array

00:43:55,840 --> 00:43:59,890
of tags and things like the caching

00:43:58,030 --> 00:44:01,270
system itself more than the render

00:43:59,890 --> 00:44:04,000
system but that's a good follow-up

00:44:01,270 --> 00:44:06,760
question as well so the caching system

00:44:04,000 --> 00:44:09,130
itself has been is now object oriented

00:44:06,760 --> 00:44:12,130
essentially but it's just the the aspect

00:44:09,130 --> 00:44:13,869
of defining which things are within a

00:44:12,130 --> 00:44:16,650
random array the cash tags for those

00:44:13,869 --> 00:44:19,030
those are still indeed array-based but I

00:44:16,650 --> 00:44:20,920
that's not really a problem though but

00:44:19,030 --> 00:44:22,900
ideally eventually we would move away

00:44:20,920 --> 00:44:24,970
indeed from an array based around their

00:44:22,900 --> 00:44:27,670
system so i hope that kind of answers

00:44:24,970 --> 00:44:30,640
your question but not really so it's not

00:44:27,670 --> 00:44:33,990
now but soon what's that is you say not

00:44:30,640 --> 00:44:36,640
now but soon regret it for enduro wait

00:44:33,990 --> 00:44:38,470
saying it's a long term goal for enduro

00:44:36,640 --> 00:44:44,380
race yes it's a long term goal it won't

00:44:38,470 --> 00:44:51,550
happen interpolate okay thanks I wanted

00:44:44,380 --> 00:44:54,910
to ask for the clean side caching also

00:44:51,550 --> 00:44:57,760
for the server side so is there any api

00:44:54,910 --> 00:45:01,740
for altering these tags i mean if i have

00:44:57,760 --> 00:45:05,350
an an entity cash and i want to

00:45:01,740 --> 00:45:08,049
calculate a different hash Fred language

00:45:05,350 --> 00:45:11,599
is something that I can do in

00:45:08,049 --> 00:45:13,700
language model so it's a question can I

00:45:11,599 --> 00:45:17,450
alter cash tax or is a question can I

00:45:13,700 --> 00:45:19,640
alter the hashes that we saw both okay

00:45:17,450 --> 00:45:21,260
so cash tags yes you can alter those

00:45:19,640 --> 00:45:23,210
because it's essentially ran away so

00:45:21,260 --> 00:45:24,950
anything any hook that can alter the

00:45:23,210 --> 00:45:26,569
render already you can modify the cash

00:45:24,950 --> 00:45:30,049
text there you can just add your own or

00:45:26,569 --> 00:45:34,400
remove some though I'd be very careful

00:45:30,049 --> 00:45:37,180
with removing so and for the hash that's

00:45:34,400 --> 00:45:40,130
being generated as a very good question

00:45:37,180 --> 00:45:42,109
it should be possible but I'm not sure

00:45:40,130 --> 00:45:45,559
right now if it is because we only have

00:45:42,109 --> 00:45:47,720
one essentially in core but that's a

00:45:45,559 --> 00:45:49,790
very good point and please open an issue

00:45:47,720 --> 00:45:57,710
for that against silver module that we

00:45:49,790 --> 00:46:00,799
ensure that that's the case hi so you

00:45:57,710 --> 00:46:04,430
discussed about using a client-side cash

00:46:00,799 --> 00:46:06,890
with the local storage but I think local

00:46:04,430 --> 00:46:08,720
storage is quite limited right now like

00:46:06,890 --> 00:46:12,290
their limits in some browsers that are

00:46:08,720 --> 00:46:16,579
about 2.5 megabytes which is which is

00:46:12,290 --> 00:46:18,740
not bad but it's not unlimited by far I

00:46:16,579 --> 00:46:21,170
was wonder did you discuss this are you

00:46:18,740 --> 00:46:23,720
worried about this because I mean I know

00:46:21,170 --> 00:46:25,520
with the standard installation it would

00:46:23,720 --> 00:46:27,859
probably won't be a problem but then I'm

00:46:25,520 --> 00:46:31,299
thinking with many modules maybe

00:46:27,859 --> 00:46:34,220
everyone will use this kind set cash

00:46:31,299 --> 00:46:36,680
that's a good question um so as far as i

00:46:34,220 --> 00:46:38,660
know the limit across the minimum limit

00:46:36,680 --> 00:46:40,250
across all browsers is 5 megabytes so

00:46:38,660 --> 00:46:46,160
it's somewhat more but indeed it's still

00:46:40,250 --> 00:46:48,109
very limited so yes if you're doing a

00:46:46,160 --> 00:46:50,210
lot of clients at cashing you might run

00:46:48,109 --> 00:46:53,210
into trouble but at the same time 5

00:46:50,210 --> 00:46:55,430
megabytes worth of HTML I thing seems

00:46:53,210 --> 00:46:56,839
like quite a lot so indeed with core you

00:46:55,430 --> 00:46:58,369
wouldn't run into problems and I think

00:46:56,839 --> 00:47:00,859
that you would only run into problems if

00:46:58,369 --> 00:47:03,799
you I did doing something super complex

00:47:00,859 --> 00:47:06,079
or super big which kind of is the same

00:47:03,799 --> 00:47:07,460
thing maybe but I think only then you

00:47:06,079 --> 00:47:10,630
will need to start looking into this and

00:47:07,460 --> 00:47:13,369
indeed it we need to be optimized in a

00:47:10,630 --> 00:47:16,309
neighbor side basis i think maybe in the

00:47:13,369 --> 00:47:19,309
future once this is more common to do

00:47:16,309 --> 00:47:21,200
and in drupal 9 possibly we have a full

00:47:19,309 --> 00:47:23,570
api on the client site to handle this

00:47:21,200 --> 00:47:26,030
things then that API might be

00:47:23,570 --> 00:47:27,890
responsible for handling and detecting a

00:47:26,030 --> 00:47:29,330
full client site occasion dealing with

00:47:27,890 --> 00:47:32,300
that but for now I think the current

00:47:29,330 --> 00:47:34,700
solution should be sufficient and worst

00:47:32,300 --> 00:47:40,010
case if we're really running into limits

00:47:34,700 --> 00:47:42,380
their Drupal 8 contrib parts of Drupal

00:47:40,010 --> 00:47:45,230
to a triple a country bar subgroup of

00:47:42,380 --> 00:47:47,450
eight course JavaScript to make it work

00:47:45,230 --> 00:47:49,580
with a contrib developed API that

00:47:47,450 --> 00:47:52,130
handles this kind of thing but I think

00:47:49,580 --> 00:47:53,540
we're very very far away from that being

00:47:52,130 --> 00:47:57,050
a problem and once it becomes a problem

00:47:53,540 --> 00:48:01,070
we're probably in a good place hey I

00:47:57,050 --> 00:48:06,200
tried 2.5 here okay good to know okay

00:48:01,070 --> 00:48:08,930
thank you thank you this might be

00:48:06,200 --> 00:48:11,440
something very basic but I just want to

00:48:08,930 --> 00:48:13,970
ask you like be saying that if

00:48:11,440 --> 00:48:17,060
javascript is disabled we may not see

00:48:13,970 --> 00:48:19,130
something and because most of them it

00:48:17,060 --> 00:48:24,200
looks like we are going towards the

00:48:19,130 --> 00:48:26,000
client side and it it's a good question

00:48:24,200 --> 00:48:27,380
so the question is essentially if we're

00:48:26,000 --> 00:48:29,150
depending on JavaScript and are we

00:48:27,380 --> 00:48:30,680
risking that the end user doesn't see

00:48:29,150 --> 00:48:33,560
some important stuff right that's the

00:48:30,680 --> 00:48:36,200
question yeah so I didn't mention this

00:48:33,560 --> 00:48:38,420
in my talk and I should have but the

00:48:36,200 --> 00:48:41,930
idea is for now at least that you should

00:48:38,420 --> 00:48:44,630
only be doing this kind of thing for not

00:48:41,930 --> 00:48:47,000
the basic essential primary content on

00:48:44,630 --> 00:48:48,620
your websites things like new and common

00:48:47,000 --> 00:48:50,510
markers it's fine to load a page without

00:48:48,620 --> 00:48:53,030
initially rights because it's just these

00:48:50,510 --> 00:48:55,040
tiny additional things contextual links

00:48:53,030 --> 00:48:57,080
is another example they're not visible

00:48:55,040 --> 00:49:00,230
there that the primary content by

00:48:57,080 --> 00:49:01,880
default so this it's not bad if it loads

00:49:00,230 --> 00:49:03,650
only half a second after the page itself

00:49:01,880 --> 00:49:07,790
is loaded for example if an additional

00:49:03,650 --> 00:49:10,070
HTTP request is to be made so yes it's

00:49:07,790 --> 00:49:12,350
very important that you pay attention to

00:49:10,070 --> 00:49:14,870
not loading your primary content in this

00:49:12,350 --> 00:49:16,190
way unless you really aren't you know

00:49:14,870 --> 00:49:17,870
what you're doing and and you really

00:49:16,190 --> 00:49:19,760
have weighed all the benefits and

00:49:17,870 --> 00:49:22,430
downsides but that's a really good point

00:49:19,760 --> 00:49:24,290
yes do not do this for your main content

00:49:22,430 --> 00:49:26,980
unless you have a really compelling

00:49:24,290 --> 00:49:26,980
reason to do so

00:49:27,670 --> 00:49:32,020
one more question so you mentioned that

00:49:29,650 --> 00:49:34,390
we have a lot of sub requests after the

00:49:32,020 --> 00:49:37,240
main page load I'll be doing something

00:49:34,390 --> 00:49:39,849
like simple any kind of thing like not

00:49:37,240 --> 00:49:42,579
doing full bootstrap just doing things

00:49:39,849 --> 00:49:44,740
that we need so the question is I

00:49:42,579 --> 00:49:46,270
produce HTTP requests that we do for

00:49:44,740 --> 00:49:48,609
getting the additional metadata and

00:49:46,270 --> 00:49:50,200
stuff do we do a full bootstrap which is

00:49:48,609 --> 00:49:52,390
slow or do we have something more

00:49:50,200 --> 00:49:55,150
efficient and the goal is to have that

00:49:52,390 --> 00:49:56,770
but as far as I know and somebody in the

00:49:55,150 --> 00:49:58,089
room who knows is better than me you're

00:49:56,770 --> 00:49:59,170
familiar with the whiskey internals and

00:49:58,089 --> 00:50:00,970
that's what's going on there please

00:49:59,170 --> 00:50:03,190
correct me but I don't think that's

00:50:00,970 --> 00:50:07,990
happening yet but it will be for Drupal

00:50:03,190 --> 00:50:10,540
8 is released so it will be or it should

00:50:07,990 --> 00:50:13,180
be at least right now not yet so it's

00:50:10,540 --> 00:50:19,740
part of another subsystem of triple that

00:50:13,180 --> 00:50:23,290
is still in progress thank you could you

00:50:19,740 --> 00:50:24,910
expand a bit on cash tags and perhaps

00:50:23,290 --> 00:50:28,630
the performance impact they have

00:50:24,910 --> 00:50:31,390
tracking a an array of tags on a caged

00:50:28,630 --> 00:50:33,640
object so it's a good question so the

00:50:31,390 --> 00:50:35,770
question is essentially we're using cash

00:50:33,640 --> 00:50:37,990
tax but doesn't that cause performance

00:50:35,770 --> 00:50:39,910
regressions society or doesn't that

00:50:37,990 --> 00:50:42,730
itself cause performance problems when

00:50:39,910 --> 00:50:44,799
you're clearing cache entries I don't

00:50:42,730 --> 00:50:46,150
know the exact performance

00:50:44,799 --> 00:50:48,730
characteristics but the way it is

00:50:46,150 --> 00:50:50,290
implemented is we have similar cash

00:50:48,730 --> 00:50:52,839
tables like we had in all previous

00:50:50,290 --> 00:50:55,270
Drupal versions but now we have a new

00:50:52,839 --> 00:50:58,710
column called cash 2x or just tags and

00:50:55,270 --> 00:51:01,990
in there we're listing all the cash tags

00:50:58,710 --> 00:51:04,000
and we can then just query by those find

00:51:01,990 --> 00:51:06,250
the cache entries that contained our

00:51:04,000 --> 00:51:08,109
sched tags and lead them I'm it's

00:51:06,250 --> 00:51:10,750
possible that it's that there are still

00:51:08,109 --> 00:51:13,059
performs improvements wait awaiting

00:51:10,750 --> 00:51:14,380
there but for now that's how it works

00:51:13,059 --> 00:51:16,030
and I don't think it has major

00:51:14,380 --> 00:51:19,140
performance regressions and marks all I

00:51:16,030 --> 00:51:19,140
wanted to comment on that

00:51:27,330 --> 00:51:31,060
right now there is a bit of a

00:51:29,050 --> 00:51:33,790
performance problem on with cash tags

00:51:31,060 --> 00:51:35,560
with mysql but there's an issue to that

00:51:33,790 --> 00:51:37,930
prompted an issue to actually d couple

00:51:35,560 --> 00:51:39,730
the cash tags API from the cache API

00:51:37,930 --> 00:51:42,610
because there's not really a reason that

00:51:39,730 --> 00:51:45,310
you need to store cash tags for certain

00:51:42,610 --> 00:51:47,590
bin along with whatever been that bin

00:51:45,310 --> 00:51:48,990
storage you have for that so the

00:51:47,590 --> 00:51:51,280
performance characteristics will improve

00:51:48,990 --> 00:51:56,820
but we will get them to a point where

00:51:51,280 --> 00:51:56,820
there won't be an impact thank you Mark

00:51:57,810 --> 00:52:04,560
any more questions okay thank

00:52:24,630 --> 00:52:30,429
hey thanks for your talk i'm stefan one

00:52:27,640 --> 00:52:33,759
of the pack chairs okay i have like yeah

00:52:30,429 --> 00:52:38,170
i think we met in unit yeah it's a to

00:52:33,759 --> 00:52:40,839
you remember a free license line very

00:52:38,170 --> 00:52:43,779
good okay great thank you i hope that

00:52:40,839 --> 00:52:45,160
they they explained to performance

00:52:43,779 --> 00:52:47,650
patterns so that we applied in triple-a

00:52:45,160 --> 00:52:59,369
we've talked a little slower okay that's

00:52:47,650 --> 00:52:59,369

YouTube URL: https://www.youtube.com/watch?v=lKuyGFOhWxU


