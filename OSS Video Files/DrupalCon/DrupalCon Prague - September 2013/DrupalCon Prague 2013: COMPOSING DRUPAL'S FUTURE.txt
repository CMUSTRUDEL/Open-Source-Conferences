Title: DrupalCon Prague 2013: COMPOSING DRUPAL'S FUTURE
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	Composer is a PHP Dependency Management tool. Drupal 8 has already embraced it by fulfilling dependencies such as Symfony components, Guzzle, Doctrine & more through Composer. With the advent of PSR-0 autoloading & the increasingly componentizable nature of php, Drupal 8 has begun to provide components of its own that could stand separate from the Drupal code base.

Come see how these components could give benefit to the entire Drupal community by spreading the influence of our code and our culture into the greater PHP world. This session will outline both the current state of Drupal components & what a possible future of Drupal components could look like.
Captions: 
	00:00:00,000 --> 00:00:06,960
this is core conversations composing

00:00:02,760 --> 00:00:16,859
Drupal's future it's just going to be me

00:00:06,960 --> 00:00:22,949
Larry and classy exactly awesome all

00:00:16,859 --> 00:00:26,269
right well we're up against who really

00:00:22,949 --> 00:00:29,640
awesome sessions right now no there's

00:00:26,269 --> 00:00:33,600
Angie Angie's doing angie oo quia

00:00:29,640 --> 00:00:36,059
whatever is upgrade your module to d8

00:00:33,600 --> 00:00:43,980
and there's the B hat lab going on right

00:00:36,059 --> 00:00:48,510
now as well yeah its front end packet

00:00:43,980 --> 00:00:52,199
man package management yeah I have no

00:00:48,510 --> 00:00:58,800
idea are you asking me to justify you

00:00:52,199 --> 00:01:01,829
leaving my session oh no no no totally

00:00:58,800 --> 00:01:05,339
not yeah no i don't i don't think so at

00:01:01,829 --> 00:01:07,799
all so okay well um i am going to get

00:01:05,339 --> 00:01:12,770
started then this is a composing

00:01:07,799 --> 00:01:14,700
Drupal's future look at that it's good

00:01:12,770 --> 00:01:18,240
stuff in it I probably should have

00:01:14,700 --> 00:01:19,350
filled in I'm Chris Vander water I'm

00:01:18,240 --> 00:01:22,740
with Commerce guys I'm a senior

00:01:19,350 --> 00:01:26,100
developer there um I am at eclipse GC on

00:01:22,740 --> 00:01:27,840
twitter i'm also the drupal 8 blocks and

00:01:26,100 --> 00:01:30,420
layout initiative owner commonly known

00:01:27,840 --> 00:01:32,310
as scotch i do a little bit of

00:01:30,420 --> 00:01:33,869
maintaining of CTools whenever i can get

00:01:32,310 --> 00:01:35,670
around to it and a little bit of

00:01:33,869 --> 00:01:39,900
maintaining of my own module context

00:01:35,670 --> 00:01:43,159
admin you know when i feel like it so

00:01:39,900 --> 00:01:47,040
those are just some quick about me

00:01:43,159 --> 00:01:49,020
welcome I want to talk a little bit

00:01:47,040 --> 00:01:52,680
about the objectives that I have for

00:01:49,020 --> 00:01:55,259
this conversation because what I'm

00:01:52,680 --> 00:01:57,240
suggesting here is kind of crazy to a

00:01:55,259 --> 00:01:59,520
certain degree and kind of sane on the

00:01:57,240 --> 00:02:01,860
flip side of that coin but at the same

00:01:59,520 --> 00:02:04,799
time I think it's good to lay out some

00:02:01,860 --> 00:02:07,020
objectives that I would like to see both

00:02:04,799 --> 00:02:08,940
for the conversation and if ultimately

00:02:07,020 --> 00:02:11,400
we end up doing this for Drupal in

00:02:08,940 --> 00:02:13,680
general so the things that I really want

00:02:11,400 --> 00:02:16,560
to hit here are component ization and

00:02:13,680 --> 00:02:19,319
what that means to me in terms of Drupal

00:02:16,560 --> 00:02:21,569
and PHP and general interoperability

00:02:19,319 --> 00:02:25,230
both with our own components and with

00:02:21,569 --> 00:02:27,689
other components and then wouldn't what

00:02:25,230 --> 00:02:30,359
I hope that ultimately leads to which is

00:02:27,689 --> 00:02:32,549
the ability to give us more influence in

00:02:30,359 --> 00:02:36,030
the greater PHP community through Expo

00:02:32,549 --> 00:02:39,780
exporting our code and our culture to

00:02:36,030 --> 00:02:41,609
them and ultimately our expertise so

00:02:39,780 --> 00:02:46,200
let's talk a little bit about component

00:02:41,609 --> 00:02:48,030
ization here symphony has a definition

00:02:46,200 --> 00:02:50,489
for this and I looked for a little while

00:02:48,030 --> 00:02:52,079
to find it and so I'm just going to read

00:02:50,489 --> 00:02:55,260
this to you symphonies definition of

00:02:52,079 --> 00:02:57,180
components is this symphony components

00:02:55,260 --> 00:02:59,219
implement common features needed to

00:02:57,180 --> 00:03:00,870
develop websites they are the foundation

00:02:59,219 --> 00:03:02,790
of symphony full stack frame work but

00:03:00,870 --> 00:03:04,319
they can also be used standalone even if

00:03:02,790 --> 00:03:06,419
you don't use the framework as they

00:03:04,319 --> 00:03:09,239
don't have any mandatory dependencies

00:03:06,419 --> 00:03:11,340
that's a very interesting kind of

00:03:09,239 --> 00:03:15,450
mission statement almost for the code

00:03:11,340 --> 00:03:17,340
that they're building and so so I looked

00:03:15,450 --> 00:03:19,470
around then I said well does Drupal have

00:03:17,340 --> 00:03:25,169
one of these and I didn't find one at

00:03:19,470 --> 00:03:28,290
first so I made up my own and so that's

00:03:25,169 --> 00:03:29,729
why there's ? here i said maybe drupal

00:03:28,290 --> 00:03:32,310
components provide common features

00:03:29,729 --> 00:03:34,439
needed from modern CMS they provide the

00:03:32,310 --> 00:03:36,569
foundation of Drupal but can be used

00:03:34,439 --> 00:03:39,449
stand alone with limited dependencies

00:03:36,569 --> 00:03:41,699
there is actually a definition for this

00:03:39,449 --> 00:03:45,659
if you go looking within Drupal

00:03:41,699 --> 00:03:48,810
component which I happen to have open

00:03:45,659 --> 00:03:51,299
right here so the official Drupal

00:03:48,810 --> 00:03:53,159
statement of what a component is is this

00:03:51,299 --> 00:03:55,019
dribble components are independent

00:03:53,159 --> 00:03:57,209
libraries that do not depend on the rest

00:03:55,019 --> 00:03:58,919
of Drupal in order to function that I am

00:03:57,209 --> 00:04:04,259
reading from a readme in Drupal core by

00:03:58,919 --> 00:04:06,479
the way what are you doing males telling

00:04:04,259 --> 00:04:11,669
me I need to be doing stuff probably go

00:04:06,479 --> 00:04:14,220
away okay that's what I get for not

00:04:11,669 --> 00:04:15,569
closing everything components may depend

00:04:14,220 --> 00:04:17,609
on other components but that is

00:04:15,569 --> 00:04:19,500
discouraged components may not depend on

00:04:17,609 --> 00:04:22,310
yeah blah blah blah you can read this

00:04:19,500 --> 00:04:25,529
it's in here I'll show you where it is

00:04:22,310 --> 00:04:27,370
it's in core lib Drupal component

00:04:25,529 --> 00:04:30,190
readme.txt

00:04:27,370 --> 00:04:38,650
right suffice it to say we have one and

00:04:30,190 --> 00:04:40,780
of course why me so I kind of wonder

00:04:38,650 --> 00:04:44,320
what PHP's definition is for this I

00:04:40,780 --> 00:04:47,800
couldn't find one but I bet it's

00:04:44,320 --> 00:04:50,050
something having to do with this work

00:04:47,800 --> 00:04:52,780
stand alone and you can just use it

00:04:50,050 --> 00:04:54,430
right because that's what the rest of

00:04:52,780 --> 00:04:58,210
our good examples here are kind of

00:04:54,430 --> 00:05:01,330
getting at so let's talk a little bit

00:04:58,210 --> 00:05:04,510
about Drupal 7 we've kind of done this

00:05:01,330 --> 00:05:06,789
before to a certain degree includes

00:05:04,510 --> 00:05:09,729
we're kind of components some of them

00:05:06,789 --> 00:05:11,860
were swappable you could write your own

00:05:09,729 --> 00:05:14,949
include file that had all the exact same

00:05:11,860 --> 00:05:18,160
function names and then swap out certain

00:05:14,949 --> 00:05:21,490
things like say maybe session or there

00:05:18,160 --> 00:05:22,780
were a few of these password was the

00:05:21,490 --> 00:05:24,729
more common one I actually wrote a

00:05:22,780 --> 00:05:28,360
module to do that for you and was very

00:05:24,729 --> 00:05:33,690
scared when I stopped hatching passwords

00:05:28,360 --> 00:05:36,789
and just saved them clear text yeah yeah

00:05:33,690 --> 00:05:38,830
modules are kind of sort of this idea

00:05:36,789 --> 00:05:41,110
right you know at least if you think of

00:05:38,830 --> 00:05:44,010
it in terms of Drupal when you go asking

00:05:41,110 --> 00:05:47,229
for a module you say I expect this

00:05:44,010 --> 00:05:48,849
self-contained bit of code it may state

00:05:47,229 --> 00:05:51,310
that it has some dependencies on other

00:05:48,849 --> 00:05:53,260
stuff but it's going to slot into the

00:05:51,310 --> 00:05:56,410
system that I'm choosing to use and it's

00:05:53,260 --> 00:05:59,349
just going to work there so this is you

00:05:56,410 --> 00:06:01,599
know conceptually not that different so

00:05:59,349 --> 00:06:03,490
to a certain degree we kind of invented

00:06:01,599 --> 00:06:05,590
this before PHP got around to it and

00:06:03,490 --> 00:06:09,070
i'll show how PHP's gotten around to it

00:06:05,590 --> 00:06:11,500
here in Drupal 8 we have very

00:06:09,070 --> 00:06:14,830
consciously chosen to begin component

00:06:11,500 --> 00:06:16,840
izing things and so the real components

00:06:14,830 --> 00:06:19,570
live in drupal component which was the

00:06:16,840 --> 00:06:23,080
readme i was just reading from and then

00:06:19,570 --> 00:06:26,199
there are extensions of those and some

00:06:23,080 --> 00:06:29,560
more standalone things like database TNG

00:06:26,199 --> 00:06:32,470
that live in Drupal core and ultimately

00:06:29,560 --> 00:06:34,599
I think we can probably start to really

00:06:32,470 --> 00:06:37,390
seriously component eyes all of these

00:06:34,599 --> 00:06:40,849
things because what these encapsulate to

00:06:37,390 --> 00:06:43,789
some degree are a no assumptions feature

00:06:40,849 --> 00:06:46,849
component of a system like drupal and

00:06:43,789 --> 00:06:49,099
then our Drupal core code is basically

00:06:46,849 --> 00:06:51,559
the Drupal assumptions layered on top of

00:06:49,099 --> 00:06:53,659
that and that's actually kind of a

00:06:51,559 --> 00:06:55,550
valuable thing what we haven't done is

00:06:53,659 --> 00:06:58,069
we haven't really begun replacing it

00:06:55,550 --> 00:06:59,899
with regard to modules modules are still

00:06:58,069 --> 00:07:02,479
modules are still modules we have a dot

00:06:59,899 --> 00:07:06,259
module file the dot module file can have

00:07:02,479 --> 00:07:09,499
hooks in it more importantly when you

00:07:06,259 --> 00:07:11,659
look at a module modules can have

00:07:09,499 --> 00:07:14,689
classes in them and these classes can be

00:07:11,659 --> 00:07:16,550
componentized in the exact same way that

00:07:14,689 --> 00:07:19,539
code within core can be componentized

00:07:16,550 --> 00:07:22,580
that problem is is that they aren't

00:07:19,539 --> 00:07:24,889
abstracted enough to be reused they

00:07:22,580 --> 00:07:28,519
exist within a drupal module so they are

00:07:24,889 --> 00:07:31,189
bound to Drupal and as we've shown with

00:07:28,519 --> 00:07:32,569
a few interesting pieces that have gone

00:07:31,189 --> 00:07:35,330
into Drupal 8 that doesn't necessarily

00:07:32,569 --> 00:07:38,389
have to be the case for example date

00:07:35,330 --> 00:07:40,129
module doesn't really exist because we

00:07:38,389 --> 00:07:42,709
have a date component now there may be a

00:07:40,129 --> 00:07:44,449
module that interfaces it to Drupal I I

00:07:42,709 --> 00:07:47,139
don't know I think there probably is

00:07:44,449 --> 00:07:51,469
four fields and those sorts of things

00:07:47,139 --> 00:07:53,749
but in terms of of really beginning to

00:07:51,469 --> 00:07:55,639
adopt with the rest of PHP is doing you

00:07:53,749 --> 00:07:57,379
look at Symphony and their bundles and

00:07:55,639 --> 00:07:58,909
and they're not the only people doing

00:07:57,379 --> 00:08:01,309
this but they're the one we're going to

00:07:58,909 --> 00:08:03,949
identify with the most Symphony bundles

00:08:01,309 --> 00:08:07,039
are very very close to being Drupal

00:08:03,949 --> 00:08:09,349
modules in many respects only they have

00:08:07,039 --> 00:08:11,389
some advantages we don't have like being

00:08:09,349 --> 00:08:13,939
able to generate a class map because all

00:08:11,389 --> 00:08:17,240
of their bundles are inside of their

00:08:13,939 --> 00:08:18,860
composure documentation so so I'm

00:08:17,240 --> 00:08:20,749
standing up here asking a couple of

00:08:18,860 --> 00:08:23,809
questions and amongst them is do we even

00:08:20,749 --> 00:08:25,550
need module files in Drupal 8 the answer

00:08:23,809 --> 00:08:31,339
is yes because we haven't gotten rid of

00:08:25,550 --> 00:08:32,810
hooks but in Drupal 9 maybe maybe not so

00:08:31,339 --> 00:08:36,349
let's talk a little bit about

00:08:32,810 --> 00:08:38,810
interoperability if we didn't have any

00:08:36,349 --> 00:08:40,130
modules how do we operate both with

00:08:38,810 --> 00:08:42,709
ourselves and with the rest of the world

00:08:40,130 --> 00:08:45,319
right because we've done this for so

00:08:42,709 --> 00:08:48,860
long you know that becomes a really

00:08:45,319 --> 00:08:50,779
important question to answer and so the

00:08:48,860 --> 00:08:52,880
first step in doing this is to really

00:08:50,779 --> 00:08:54,500
begin conforming conforming to a

00:08:52,880 --> 00:08:57,350
namespace space

00:08:54,500 --> 00:08:59,150
named spec right and we're doing that in

00:08:57,350 --> 00:09:02,570
Drupal 8 in fact our modules are doing

00:08:59,150 --> 00:09:05,150
it now if you open up a class that's

00:09:02,570 --> 00:09:06,800
inside of a module that class has a full

00:09:05,150 --> 00:09:11,270
name space based upon that module

00:09:06,800 --> 00:09:13,730
already in there so views for example if

00:09:11,270 --> 00:09:16,520
you've ever looked at a views class of

00:09:13,730 --> 00:09:18,650
which there are many they will have a

00:09:16,520 --> 00:09:21,740
name space on them that tells you this

00:09:18,650 --> 00:09:23,570
came from views right I don't need to

00:09:21,740 --> 00:09:25,490
get too detailed with that just suffice

00:09:23,570 --> 00:09:27,350
it to say you can just look at any

00:09:25,490 --> 00:09:28,940
individual class and have a really good

00:09:27,350 --> 00:09:31,610
idea where it came from because they

00:09:28,940 --> 00:09:33,380
have independent naming mechanisms built

00:09:31,610 --> 00:09:35,360
in and this is something that was

00:09:33,380 --> 00:09:37,700
developed outside of Drupal we just

00:09:35,360 --> 00:09:40,640
adopted it so when I start talking about

00:09:37,700 --> 00:09:42,200
component ization this is what I'm

00:09:40,640 --> 00:09:44,960
talking about these things which are

00:09:42,200 --> 00:09:46,940
already namespace they can't by design

00:09:44,960 --> 00:09:49,400
collide with anything that's not just

00:09:46,940 --> 00:09:52,130
named identical up at that very high

00:09:49,400 --> 00:09:54,080
level and and there are some interesting

00:09:52,130 --> 00:09:57,920
things to help you separate that apart

00:09:54,080 --> 00:10:00,560
too we can leverage symphonies of event

00:09:57,920 --> 00:10:03,320
dispatcher or something similar event

00:10:00,560 --> 00:10:06,130
dispatching is babe basically giving

00:10:03,320 --> 00:10:09,110
classes the ability to respond to hooks

00:10:06,130 --> 00:10:10,880
instead of having a dot module file that

00:10:09,110 --> 00:10:12,580
responds to hugs and that's really

00:10:10,880 --> 00:10:15,530
compelling on a number of levels

00:10:12,580 --> 00:10:18,740
especially because it means that every

00:10:15,530 --> 00:10:20,839
class in your in your library of classes

00:10:18,740 --> 00:10:22,790
could potentially respond to a given

00:10:20,839 --> 00:10:25,250
hook it's not likely that it would and

00:10:22,790 --> 00:10:28,610
only classes that implement certain

00:10:25,250 --> 00:10:31,339
interfaces can but what it means is that

00:10:28,610 --> 00:10:33,710
a collection which we think of as as a

00:10:31,339 --> 00:10:36,589
module could actually subscribe multiple

00:10:33,710 --> 00:10:38,089
times to the same event we cannot do

00:10:36,589 --> 00:10:39,680
that in hooks right now you have switch

00:10:38,089 --> 00:10:42,080
statement and you have to follow logic

00:10:39,680 --> 00:10:43,400
and figure out what's going on and we

00:10:42,080 --> 00:10:45,230
did a lot of things to mitigate that

00:10:43,400 --> 00:10:46,760
during the d8 cycle but there's still

00:10:45,230 --> 00:10:48,620
plenty of it there and a full-on

00:10:46,760 --> 00:10:51,530
adoption of the event dispatcher out of

00:10:48,620 --> 00:10:54,170
symphony gives us the ability to do away

00:10:51,530 --> 00:10:56,480
with dot module files by and large and

00:10:54,170 --> 00:10:58,850
it gives us the ability to really begin

00:10:56,480 --> 00:11:00,500
packaging up our individual software

00:10:58,850 --> 00:11:03,590
components in such a way that they could

00:11:00,500 --> 00:11:06,710
be run outside of Drupal

00:11:03,590 --> 00:11:09,980
which brings me to my next point by

00:11:06,710 --> 00:11:13,550
doing this we set our code free right we

00:11:09,980 --> 00:11:15,170
begin to um when you look at our info

00:11:13,550 --> 00:11:17,510
files which have become info gamma files

00:11:15,170 --> 00:11:19,850
but whatever they state their

00:11:17,510 --> 00:11:23,090
dependencies if you look at a composer

00:11:19,850 --> 00:11:24,890
file it states its dependencies it's

00:11:23,090 --> 00:11:27,050
basically just a meta data wrapper that

00:11:24,890 --> 00:11:29,870
most important job is to state its

00:11:27,050 --> 00:11:32,240
dependencies that's what an info file

00:11:29,870 --> 00:11:34,640
really is right it's a metadata lat

00:11:32,240 --> 00:11:36,200
rapper that tells you its dependencies

00:11:34,640 --> 00:11:39,260
so you've never end up with something

00:11:36,200 --> 00:11:44,270
you can't actually run so I mean in

00:11:39,260 --> 00:11:45,950
these terms composer PS r0 packages

00:11:44,270 --> 00:11:49,850
which I haven't talked about at all but

00:11:45,950 --> 00:11:53,420
i will like these replace something we

00:11:49,850 --> 00:11:55,850
invented almost a decade ago and we

00:11:53,420 --> 00:11:58,040
adopted it most of the way for Drupal 8

00:11:55,850 --> 00:12:00,500
if we adopt it all the way during the

00:11:58,040 --> 00:12:03,140
next cycle we could find ourselves in a

00:12:00,500 --> 00:12:05,900
situation where we can actually begin to

00:12:03,140 --> 00:12:09,770
use our code on something that's not

00:12:05,900 --> 00:12:13,640
strictly Drupal and so I asked the

00:12:09,770 --> 00:12:15,350
question if database TNG were out in the

00:12:13,640 --> 00:12:16,880
wild and plugins were out in the wild

00:12:15,350 --> 00:12:19,430
and entities were out in the wild and

00:12:16,880 --> 00:12:21,260
you could just pick one up grab any of

00:12:19,430 --> 00:12:23,450
the additional Drupal dependencies it

00:12:21,260 --> 00:12:28,370
might have and drop it into a non Drupal

00:12:23,450 --> 00:12:30,470
project would you more importantly if

00:12:28,370 --> 00:12:32,960
somebody not in the Drupal community

00:12:30,470 --> 00:12:34,520
found a full-featured system that did

00:12:32,960 --> 00:12:36,470
what they wanted and it just happened to

00:12:34,520 --> 00:12:38,330
come from Drupal would they use it and

00:12:36,470 --> 00:12:40,960
if they did and had a problem with it

00:12:38,330 --> 00:12:40,960
who would they call

00:12:48,920 --> 00:12:53,700
which is where we get to exporting our

00:12:51,150 --> 00:12:57,660
code and exporting our culture I think

00:12:53,700 --> 00:13:00,540
it's a really important point that we

00:12:57,660 --> 00:13:03,750
make these easy to include and luckily

00:13:00,540 --> 00:13:05,960
between composer and packages we can do

00:13:03,750 --> 00:13:08,820
that for those of you who may not know

00:13:05,960 --> 00:13:12,380
package just is a site that keeps track

00:13:08,820 --> 00:13:15,120
of various composer components and

00:13:12,380 --> 00:13:16,710
composer leverages that site when

00:13:15,120 --> 00:13:18,120
fulfilling the requirements of those

00:13:16,710 --> 00:13:21,420
components so if you've ever used

00:13:18,120 --> 00:13:24,090
something like drush p.m. download or dl

00:13:21,420 --> 00:13:25,620
or you know drush make anything like

00:13:24,090 --> 00:13:27,180
that it's actually more akin to just

00:13:25,620 --> 00:13:29,010
make than it is anything else because

00:13:27,180 --> 00:13:32,040
you can have a single composer JSON file

00:13:29,010 --> 00:13:34,920
that says I need these things and then

00:13:32,040 --> 00:13:36,420
you run composer install and it grabs

00:13:34,920 --> 00:13:38,070
all of those things and anything in that

00:13:36,420 --> 00:13:39,600
that says I need these things it goes

00:13:38,070 --> 00:13:41,190
and it gets those and it proceeds to do

00:13:39,600 --> 00:13:42,900
this until it has all of the various

00:13:41,190 --> 00:13:44,190
dependencies that are required and then

00:13:42,900 --> 00:13:46,620
it dumps that all in a place that it

00:13:44,190 --> 00:13:51,900
knows about and boom you have all your

00:13:46,620 --> 00:13:55,170
code and you can begin developing um so

00:13:51,900 --> 00:13:58,020
yeah that's what I just said so these

00:13:55,170 --> 00:13:59,640
these systems all leverage the the class

00:13:58,020 --> 00:14:03,740
autoloading and namespacing I was

00:13:59,640 --> 00:14:08,670
talking about earlier packages composer

00:14:03,740 --> 00:14:10,290
gives you the actual code base but it's

00:14:08,670 --> 00:14:12,089
pulling these code bases from all over

00:14:10,290 --> 00:14:13,740
some of this might come from github some

00:14:12,089 --> 00:14:17,790
of it could come from drupal.org some of

00:14:13,740 --> 00:14:19,530
it could come from you know a git server

00:14:17,790 --> 00:14:22,830
that just happens to be public to the

00:14:19,530 --> 00:14:27,210
world so long as it is we can get it

00:14:22,830 --> 00:14:30,270
here so it means that if it's easy to

00:14:27,210 --> 00:14:32,280
include which these tools make and the

00:14:30,270 --> 00:14:34,080
rest of PHP is using these tools then

00:14:32,280 --> 00:14:36,630
when they find them I think it will be

00:14:34,080 --> 00:14:39,330
natural for them to include and so

00:14:36,630 --> 00:14:41,070
packages specifically can help you find

00:14:39,330 --> 00:14:42,750
out whether a namespace already exists

00:14:41,070 --> 00:14:45,180
and you can create code in a different

00:14:42,750 --> 00:14:47,220
name space and people can begin browsing

00:14:45,180 --> 00:14:49,710
for it it's like a module browser but

00:14:47,220 --> 00:14:50,970
it's for all of PHP you know guzzles and

00:14:49,710 --> 00:14:53,180
their symphony components are and their

00:14:50,970 --> 00:14:55,880
doctrines and their aesthetics and there

00:14:53,180 --> 00:14:59,670
why aren't drupal components in there

00:14:55,880 --> 00:15:01,220
right why why are we the only people

00:14:59,670 --> 00:15:03,960
benefiting from our code

00:15:01,220 --> 00:15:05,580
and of course if people begin to include

00:15:03,960 --> 00:15:08,850
our projects in theirs they will come

00:15:05,580 --> 00:15:11,430
looking for us and they will probably

00:15:08,850 --> 00:15:13,830
begin contributing at least to the

00:15:11,430 --> 00:15:17,460
projects they're using if not to other

00:15:13,830 --> 00:15:19,170
projects that expand on it because if

00:15:17,460 --> 00:15:20,760
entity is dependent upon plug-in and

00:15:19,170 --> 00:15:22,320
they find entities and they find plugins

00:15:20,760 --> 00:15:23,670
you know at some point they're probably

00:15:22,320 --> 00:15:30,110
going to want to contribute to both of

00:15:23,670 --> 00:15:34,650
those things something so I I've had the

00:15:30,110 --> 00:15:37,740
good fortune of picking Angie's brain a

00:15:34,650 --> 00:15:39,540
little bit on this and the next two

00:15:37,740 --> 00:15:41,160
slides are really like I put these there

00:15:39,540 --> 00:15:43,020
because I had a long conversation with

00:15:41,160 --> 00:15:45,750
her and she had a lot of objections and

00:15:43,020 --> 00:15:47,400
I think that they're really valid so I'm

00:15:45,750 --> 00:15:49,230
just gonna like show my cards completely

00:15:47,400 --> 00:15:52,110
here because I don't really want to be

00:15:49,230 --> 00:15:53,520
holding anything back when we start

00:15:52,110 --> 00:15:58,290
discussing this we're really talking

00:15:53,520 --> 00:15:59,610
about packaging core right because the

00:15:58,290 --> 00:16:00,780
way we packaged core is completely

00:15:59,610 --> 00:16:02,580
different than how we package any

00:16:00,780 --> 00:16:05,520
install profile that exists on drupal

00:16:02,580 --> 00:16:07,980
org org it's completely different than

00:16:05,520 --> 00:16:10,740
how pretty much any Drupal project

00:16:07,980 --> 00:16:12,510
anywhere is packaged and what we'd be

00:16:10,740 --> 00:16:14,640
talking about is basically a package

00:16:12,510 --> 00:16:16,500
standardization of sorts which means

00:16:14,640 --> 00:16:18,300
we're gonna have to write some serious

00:16:16,500 --> 00:16:20,610
tools right we're going to have to

00:16:18,300 --> 00:16:22,710
change the way we're doing things things

00:16:20,610 --> 00:16:24,630
um it also means if we begin to take

00:16:22,710 --> 00:16:26,250
code and extract it out of Drupal and

00:16:24,630 --> 00:16:27,840
make it available to the rest of the

00:16:26,250 --> 00:16:30,150
world that we have some serious problems

00:16:27,840 --> 00:16:32,430
with regard to our existing core

00:16:30,150 --> 00:16:33,780
gateways I maintained to a certain

00:16:32,430 --> 00:16:36,740
degree that we already have this problem

00:16:33,780 --> 00:16:41,070
because we've included third-party code

00:16:36,740 --> 00:16:42,420
but the fact remains you know I continue

00:16:41,070 --> 00:16:44,580
to use the plug-in system as my example

00:16:42,420 --> 00:16:46,500
because from day one we designed it to

00:16:44,580 --> 00:16:48,330
be able to live outside of Drupal core

00:16:46,500 --> 00:16:51,990
and I have some really great examples of

00:16:48,330 --> 00:16:54,810
it doing so but you know from

00:16:51,990 --> 00:16:56,550
documentation perspective like if I were

00:16:54,810 --> 00:16:58,710
just in charge of that git repository I

00:16:56,550 --> 00:17:01,530
could technically do anything I want I

00:16:58,710 --> 00:17:03,240
wouldn't but I could write so if I

00:17:01,530 --> 00:17:04,740
didn't document stuff properly or it

00:17:03,240 --> 00:17:07,530
weren't performant or there were an

00:17:04,740 --> 00:17:10,680
accessibility issue composing drupal's

00:17:07,530 --> 00:17:13,550
future composing drupal's future or you

00:17:10,680 --> 00:17:13,550
looking for the lab H

00:17:13,870 --> 00:17:18,740
needless to say the gateways exist for a

00:17:16,820 --> 00:17:20,750
reason and we probably need to come up

00:17:18,740 --> 00:17:23,570
with a way to continue to conform with

00:17:20,750 --> 00:17:25,280
them even if we begin abstracting code

00:17:23,570 --> 00:17:27,860
out and if we have multiple git

00:17:25,280 --> 00:17:29,360
repositories that these that the

00:17:27,860 --> 00:17:30,860
documentation people have to deal with

00:17:29,360 --> 00:17:34,820
like they're not going to be super happy

00:17:30,860 --> 00:17:37,670
with me right so we have some hurdles to

00:17:34,820 --> 00:17:39,080
to get over here in addition to this I'd

00:17:37,670 --> 00:17:41,600
just like to point out that like

00:17:39,080 --> 00:17:45,500
maintenance and ownership of the code

00:17:41,600 --> 00:17:46,820
base becomes a bit of a topic and I just

00:17:45,500 --> 00:17:51,790
want to say first of all it's not about

00:17:46,820 --> 00:17:54,410
control right it's about iteration if I

00:17:51,790 --> 00:17:57,590
have my way and I got two separate

00:17:54,410 --> 00:18:00,710
plugins out from Drupal 8 right that'd

00:17:57,590 --> 00:18:02,300
be like let's say 1 point 0 point 0 by

00:18:00,710 --> 00:18:03,860
virtue of the fact that anyone on the

00:18:02,300 --> 00:18:06,080
planet is using that I've kind of

00:18:03,860 --> 00:18:07,910
already given up control of it to a

00:18:06,080 --> 00:18:10,700
certain degree really all I can do is to

00:18:07,910 --> 00:18:12,530
begin to fix bugs I might be able to add

00:18:10,700 --> 00:18:14,510
new features so long as they don't break

00:18:12,530 --> 00:18:16,310
backward compatibility but I can't go

00:18:14,510 --> 00:18:19,430
breaking something in there otherwise

00:18:16,310 --> 00:18:23,000
all hell breaks loose what i can do is

00:18:19,430 --> 00:18:26,480
create a new branch and do a 2x while

00:18:23,000 --> 00:18:28,100
drupal 8 runs on 1x and if I find that

00:18:26,480 --> 00:18:30,380
I've hit the end of that life cycle and

00:18:28,100 --> 00:18:32,690
I begin a 3x and we get that to stable

00:18:30,380 --> 00:18:35,210
before Drupal 9 chips I got a full

00:18:32,690 --> 00:18:39,680
iteration into the plug-in system before

00:18:35,210 --> 00:18:43,130
drupal 9 got out that's a good thing not

00:18:39,680 --> 00:18:44,390
a bad thing by the same token if it's

00:18:43,130 --> 00:18:46,250
stable enough and doesn't go anywhere

00:18:44,390 --> 00:18:49,520
there's really no harm in just staying

00:18:46,250 --> 00:18:50,900
on 1x so you know we have to begin

00:18:49,520 --> 00:18:52,430
thinking about long-term support

00:18:50,900 --> 00:18:53,810
releases because that's essentially what

00:18:52,430 --> 00:18:56,660
these are like you look at the

00:18:53,810 --> 00:19:01,180
development lifetime of a Drupal release

00:18:56,660 --> 00:19:03,110
and a 1 point 0 point 0 code a1 xcode of

00:19:01,180 --> 00:19:05,710
something that we extract from Drupal

00:19:03,110 --> 00:19:08,420
has to support Drupal 8 long-term

00:19:05,710 --> 00:19:10,310
because that's at least a three-year

00:19:08,420 --> 00:19:13,370
commitment at least probably more like a

00:19:10,310 --> 00:19:15,880
five or six year commitment I'm getting

00:19:13,370 --> 00:19:15,880
knots

00:19:17,610 --> 00:19:23,400
so that's kind of where I'm at at this

00:19:21,420 --> 00:19:27,380
point I'm hoping you all have some

00:19:23,400 --> 00:19:27,380
thoughts that you would like to share

00:19:27,950 --> 00:19:32,910
one thing I want to clarify are you

00:19:30,240 --> 00:19:34,799
talking about taking stuff from Drupal

00:19:32,910 --> 00:19:36,750
component and moving it out to develop

00:19:34,799 --> 00:19:38,640
in the separate posit or e or you're

00:19:36,750 --> 00:19:40,110
talking about what symphony does which

00:19:38,640 --> 00:19:43,890
is everything's developed in a single

00:19:40,110 --> 00:19:46,049
repository but they do some get magic so

00:19:43,890 --> 00:19:47,429
that every commit the components get

00:19:46,049 --> 00:19:49,200
pushed out with own repositories that

00:19:47,429 --> 00:19:51,600
are read-only and those are listed on

00:19:49,200 --> 00:19:54,480
packages I think that that is an

00:19:51,600 --> 00:19:56,250
implementation detail I'm not horribly

00:19:54,480 --> 00:19:58,020
swayed one way or the other I think the

00:19:56,250 --> 00:19:59,370
big benefit of them being separate

00:19:58,020 --> 00:20:01,110
repositories means that you can

00:19:59,370 --> 00:20:02,640
literally put lieutenant in charge of

00:20:01,110 --> 00:20:06,870
them I don't know whether we can do that

00:20:02,640 --> 00:20:09,630
with sub modules thats I say that's more

00:20:06,870 --> 00:20:11,850
the implementation detail the main

00:20:09,630 --> 00:20:13,350
difference is if it's a common

00:20:11,850 --> 00:20:15,390
repository then it follows our

00:20:13,350 --> 00:20:17,070
development cycle right which means we

00:20:15,390 --> 00:20:19,429
can still in force all of the gates on

00:20:17,070 --> 00:20:22,049
that code if it's a separate repository

00:20:19,429 --> 00:20:24,000
then we can't enforce those gates

00:20:22,049 --> 00:20:28,020
whether that's good or bad as a separate

00:20:24,000 --> 00:20:30,630
debate right um so I think that that's

00:20:28,020 --> 00:20:33,780
you know that's kind of into the

00:20:30,630 --> 00:20:37,290
difficult problems side of this that I

00:20:33,780 --> 00:20:39,179
don't really have answers for I'm more

00:20:37,290 --> 00:20:41,549
interested in throwing out questions and

00:20:39,179 --> 00:20:43,110
seeing what the answers are three to six

00:20:41,549 --> 00:20:48,750
months from now to a certain degree

00:20:43,110 --> 00:20:53,160
especially on the really like like that

00:20:48,750 --> 00:20:56,690
stuff I don't have answers do right and

00:20:53,160 --> 00:21:01,440
no one in here is a core maintainer so

00:20:56,690 --> 00:21:03,270
and I mean they're the people who are

00:21:01,440 --> 00:21:06,660
going to have the experience to know

00:21:03,270 --> 00:21:07,950
just exactly how much of a problem the

00:21:06,660 --> 00:21:11,040
sort of thing might be in their

00:21:07,950 --> 00:21:12,690
development cycle but you know by the

00:21:11,040 --> 00:21:15,600
same token i think it's worth discussing

00:21:12,690 --> 00:21:19,890
because like the ultimate objective here

00:21:15,600 --> 00:21:21,690
has to be one of light like i said it's

00:21:19,890 --> 00:21:23,250
not about control it's about iteration

00:21:21,690 --> 00:21:25,679
and i think this is true for Drupal core

00:21:23,250 --> 00:21:28,080
as well because if we get into component

00:21:25,679 --> 00:21:31,410
ties what we already have sitting there

00:21:28,080 --> 00:21:33,750
and you know I say

00:21:31,410 --> 00:21:36,090
in charge of that who are already like

00:21:33,750 --> 00:21:38,850
very invested in that code and can be

00:21:36,090 --> 00:21:41,850
trusted to maintain it for a given

00:21:38,850 --> 00:21:43,470
release you know then what we what we

00:21:41,850 --> 00:21:45,450
end up with is a whole bunch of people

00:21:43,470 --> 00:21:49,740
who are taking care of a whole bunch of

00:21:45,450 --> 00:21:53,160
problems and keeping a unified API on

00:21:49,740 --> 00:21:56,220
the edges and it turns drupal into

00:21:53,160 --> 00:21:58,230
basically an interpretation of how those

00:21:56,220 --> 00:21:59,900
components should work together it

00:21:58,230 --> 00:22:02,700
reduces the size of Drupal core

00:21:59,900 --> 00:22:04,890
significantly which means we can iterate

00:22:02,700 --> 00:22:06,660
a whole lot faster people keep talking

00:22:04,890 --> 00:22:10,440
oh we want to one your development cycle

00:22:06,660 --> 00:22:12,530
good luck but I'm offering you something

00:22:10,440 --> 00:22:16,530
that in the long term might buy us that

00:22:12,530 --> 00:22:18,270
right in the long term if we invest what

00:22:16,530 --> 00:22:20,400
it takes to begin abstracting these

00:22:18,270 --> 00:22:25,920
things out into standalone components

00:22:20,400 --> 00:22:29,520
that either provide a cohesive this is

00:22:25,920 --> 00:22:32,220
what I do or are a drupal interpretation

00:22:29,520 --> 00:22:33,930
that extends that you know we've greatly

00:22:32,220 --> 00:22:36,870
reduced the amount of code we have to

00:22:33,930 --> 00:22:39,140
maintain with in Drupal core while not

00:22:36,870 --> 00:22:44,510
really forfeiting any of the benefits of

00:22:39,140 --> 00:22:47,940
Drupal core so yes it does bring about

00:22:44,510 --> 00:22:50,700
some specific objections with regard to

00:22:47,940 --> 00:22:55,170
how do we maintain this how do we you

00:22:50,700 --> 00:22:56,400
know test it how do we but you know we

00:22:55,170 --> 00:22:58,650
might be able to get away with just

00:22:56,400 --> 00:23:00,810
nightly builds pulling everything from

00:22:58,650 --> 00:23:04,710
everybody and no early and often whether

00:23:00,810 --> 00:23:06,840
somebody broke something right a lot of

00:23:04,710 --> 00:23:08,640
other systems do nightly builds across

00:23:06,840 --> 00:23:10,650
all of the stuff that they're working on

00:23:08,640 --> 00:23:14,390
and I think we could we could probably

00:23:10,650 --> 00:23:14,390
put something very similar in place

00:23:17,270 --> 00:23:24,080
I really thought what I proposed was

00:23:20,060 --> 00:23:25,490
more radical than this just I guess

00:23:24,080 --> 00:23:27,860
you're saying this is like not something

00:23:25,490 --> 00:23:29,590
that could be done until Drupal 9 cycle

00:23:27,860 --> 00:23:33,260
but like is there thoughts of like this

00:23:29,590 --> 00:23:35,840
from maybe I'm totally wrong but there's

00:23:33,260 --> 00:23:38,000
this is really like it's the core

00:23:35,840 --> 00:23:40,070
packaging is to change under Lord not an

00:23:38,000 --> 00:23:41,300
easy thing means it and the habits of

00:23:40,070 --> 00:23:44,060
core developers need to change to

00:23:41,300 --> 00:23:46,550
actually stuck the running composer

00:23:44,060 --> 00:23:47,780
install as part of their they should

00:23:46,550 --> 00:23:50,330
probably be doing that at this point

00:23:47,780 --> 00:23:53,230
anyway but it doesn't need it doesn't

00:23:50,330 --> 00:23:56,270
need a restructure of how like what the

00:23:53,230 --> 00:23:58,400
layout of what Drupal would be any

00:23:56,270 --> 00:24:00,380
houses the composer installers module

00:23:58,400 --> 00:24:02,500
and you can actually you can still drop

00:24:00,380 --> 00:24:05,000
them into the same the same places

00:24:02,500 --> 00:24:06,980
basically so you could strip out modules

00:24:05,000 --> 00:24:08,600
as they exist now and forget about that

00:24:06,980 --> 00:24:11,300
you know from people what the benefits

00:24:08,600 --> 00:24:12,710
are of actually component izing in a

00:24:11,300 --> 00:24:15,650
different way which is like hey let's do

00:24:12,710 --> 00:24:17,060
how we always do and let's just rip all

00:24:15,650 --> 00:24:19,160
these out of a separate modules yeah

00:24:17,060 --> 00:24:20,600
just no I mean use composer install it

00:24:19,160 --> 00:24:23,210
and drop them right where they always

00:24:20,600 --> 00:24:25,040
are but now you can have people in

00:24:23,210 --> 00:24:27,140
charge of basically people in charge of

00:24:25,040 --> 00:24:29,210
you know the lieutenant's of those of

00:24:27,140 --> 00:24:30,560
those modules are nap it's out to them

00:24:29,210 --> 00:24:31,640
how they want to start thinking

00:24:30,560 --> 00:24:33,170
differently and working

00:24:31,640 --> 00:24:34,790
currently and putting you know

00:24:33,170 --> 00:24:35,870
separating their pieces I would spent

00:24:34,790 --> 00:24:37,010
maybe people outside the Drupal

00:24:35,870 --> 00:24:39,080
community can use and it doesn't have to

00:24:37,010 --> 00:24:42,110
be a whole cohesive let's move

00:24:39,080 --> 00:24:43,400
everything as a single unit right I

00:24:42,110 --> 00:24:46,790
think I think we're going to have to

00:24:43,400 --> 00:24:48,770
stage out the code that we can extract

00:24:46,790 --> 00:24:52,790
over a period of time because as you

00:24:48,770 --> 00:24:54,380
begin to abstract code you know

00:24:52,790 --> 00:24:58,760
determining whether that's a cohesive

00:24:54,380 --> 00:25:00,440
piece that that is useful it is really I

00:24:58,760 --> 00:25:03,080
mean that takes a little bit of effort

00:25:00,440 --> 00:25:06,440
you think like let's take a user for

00:25:03,080 --> 00:25:08,120
example right if there were a user class

00:25:06,440 --> 00:25:10,730
or interface or something like that that

00:25:08,120 --> 00:25:13,220
the entire PHP world could just say

00:25:10,730 --> 00:25:15,080
we're using this right you would have

00:25:13,220 --> 00:25:17,540
user interoperability across like

00:25:15,080 --> 00:25:19,280
everybody's platform now it's not likely

00:25:17,540 --> 00:25:20,930
that that's going to happen but you

00:25:19,280 --> 00:25:24,050
begin actually considering that as you

00:25:20,930 --> 00:25:26,510
start to abstract our own user module

00:25:24,050 --> 00:25:27,890
out and you say oh we have sessions

00:25:26,510 --> 00:25:29,060
stuff are we going to use Symphony

00:25:27,890 --> 00:25:30,800
sessions are we going to roll our own

00:25:29,060 --> 00:25:32,330
session that sits on top of the symphony

00:25:30,800 --> 00:25:34,640
components what are we going to do here

00:25:32,330 --> 00:25:35,870
you know we have accounts and we have

00:25:34,640 --> 00:25:37,130
permissions and what's the difference

00:25:35,870 --> 00:25:40,130
between authentication and authorization

00:25:37,130 --> 00:25:42,260
and the list goes on and on and it's

00:25:40,130 --> 00:25:45,320
like that's a lot of work and I was only

00:25:42,260 --> 00:25:46,700
really talking about user right we

00:25:45,320 --> 00:25:50,090
didn't even talk about entity which is

00:25:46,700 --> 00:25:52,970
dependent upon I guess it's just so that

00:25:50,090 --> 00:25:54,980
or fields that you can think about our

00:25:52,970 --> 00:25:56,360
order of operations is it that we make

00:25:54,980 --> 00:25:57,950
each of these components useful to

00:25:56,360 --> 00:26:00,620
everyone else and then think about

00:25:57,950 --> 00:26:02,390
changing how we package it and build it

00:26:00,620 --> 00:26:03,980
or is it that we just like without

00:26:02,390 --> 00:26:06,710
changing without making useful to anyone

00:26:03,980 --> 00:26:09,410
else at all imma get go just we can

00:26:06,710 --> 00:26:11,360
separate them out into into packages and

00:26:09,410 --> 00:26:13,640
then well that's what modules are to a

00:26:11,360 --> 00:26:15,050
certain degree like let that fuel people

00:26:13,640 --> 00:26:18,090
to want to rebuild it in a different way

00:26:15,050 --> 00:26:20,130
and it can happen a lot sooner I guess

00:26:18,090 --> 00:26:21,029
and then well I but but what's the

00:26:20,130 --> 00:26:25,169
difference between that and just

00:26:21,029 --> 00:26:27,360
maintaining the status quo by using a

00:26:25,169 --> 00:26:29,490
package manager really catalyzes a lot

00:26:27,360 --> 00:26:31,080
of changes that you know and many people

00:26:29,490 --> 00:26:32,490
don't you know they they don't get on

00:26:31,080 --> 00:26:34,350
board until they actually start using it

00:26:32,490 --> 00:26:35,730
right so you're saying use composer but

00:26:34,350 --> 00:26:37,320
don't bother with making it work with

00:26:35,730 --> 00:26:38,700
anything but dribble and just assume

00:26:37,320 --> 00:26:40,289
that that would be driven by this well

00:26:38,700 --> 00:26:42,480
maybe he will see the benefits and they

00:26:40,289 --> 00:26:45,270
realize oh it just separate this out

00:26:42,480 --> 00:26:47,279
into its own package sure yeah sure I

00:26:45,270 --> 00:26:49,620
mean like to a certain degree that makes

00:26:47,279 --> 00:26:51,690
some sense there is a hard problem that

00:26:49,620 --> 00:26:52,950
I haven't mentioned yet with regard to

00:26:51,690 --> 00:26:55,409
this and I've been thinking about it a

00:26:52,950 --> 00:26:57,600
little bit but you know if you look at

00:26:55,409 --> 00:27:01,340
say who in the room is installed

00:26:57,600 --> 00:27:03,480
symphony full stack like four people um

00:27:01,340 --> 00:27:04,620
so if you look at symphony full stack

00:27:03,480 --> 00:27:07,860
they do this thing where they have

00:27:04,620 --> 00:27:11,250
bundles bundles are exactly what I'm

00:27:07,860 --> 00:27:16,740
talking about right that's that's great

00:27:11,250 --> 00:27:18,600
but from the perspective of like modules

00:27:16,740 --> 00:27:21,289
and the things we do with them we do

00:27:18,600 --> 00:27:24,240
some really crazy crap with modules like

00:27:21,289 --> 00:27:27,450
we can segment the modules you're using

00:27:24,240 --> 00:27:31,590
per site we can segment the modules

00:27:27,450 --> 00:27:34,649
you're using / profile we can just drop

00:27:31,590 --> 00:27:36,390
them into a common spot you can have the

00:27:34,649 --> 00:27:39,450
same module exist in all three of those

00:27:36,390 --> 00:27:41,039
places and we only use one depending

00:27:39,450 --> 00:27:43,980
upon the site you're running or the

00:27:41,039 --> 00:27:46,590
profile depending upon granularity I

00:27:43,980 --> 00:27:48,779
mean we support multi site so you know

00:27:46,590 --> 00:27:51,600
this is this is an interesting thing

00:27:48,779 --> 00:27:53,730
because like if you look at Symphony set

00:27:51,600 --> 00:27:55,710
up at least as far as I understand full

00:27:53,730 --> 00:27:58,289
stack thus far and I don't claim to be

00:27:55,710 --> 00:28:00,179
an expert there they just have like a

00:27:58,289 --> 00:28:03,690
source turd that you toss all this stuff

00:28:00,179 --> 00:28:05,580
into and like the disadvantage is that

00:28:03,690 --> 00:28:07,710
everything I just said like totally

00:28:05,580 --> 00:28:09,990
isn't going to work in that case but the

00:28:07,710 --> 00:28:11,700
advantage of it is that they know

00:28:09,990 --> 00:28:13,830
exactly where all their classes are at

00:28:11,700 --> 00:28:15,600
all times if you look at our module

00:28:13,830 --> 00:28:18,029
system and the way it works in Drupal 8

00:28:15,600 --> 00:28:20,070
right now the name spaced classes we

00:28:18,029 --> 00:28:23,279
have access to are all added later

00:28:20,070 --> 00:28:25,289
composer doesn't know about them and so

00:28:23,279 --> 00:28:27,390
we can't get the full benefit of things

00:28:25,289 --> 00:28:28,919
like building a class map and knowing

00:28:27,390 --> 00:28:30,659
where every single classes and not

00:28:28,919 --> 00:28:31,080
needing to do a file exists check on

00:28:30,659 --> 00:28:33,450
every

00:28:31,080 --> 00:28:34,950
single class before we load it so you

00:28:33,450 --> 00:28:36,149
know there are little things like that

00:28:34,950 --> 00:28:38,429
and we probably have to make some

00:28:36,149 --> 00:28:40,080
concessions but like those are the sort

00:28:38,429 --> 00:28:41,880
of things that are going to ultimately

00:28:40,080 --> 00:28:44,970
end up being like the hairy

00:28:41,880 --> 00:28:50,700
implementation details of component

00:28:44,970 --> 00:28:55,860
izing our code Larry so an earlier step

00:28:50,700 --> 00:28:58,320
that I think is more important you can

00:28:55,860 --> 00:29:01,230
use composer with a module today in

00:28:58,320 --> 00:29:03,779
Drupal 7 and i have written modules for

00:29:01,230 --> 00:29:06,870
drupal 7 where most of the logic is in a

00:29:03,779 --> 00:29:09,000
standalone PHP library written for that

00:29:06,870 --> 00:29:10,080
project it's up on packages and then

00:29:09,000 --> 00:29:11,909
there's a drupal module that just

00:29:10,080 --> 00:29:13,649
bridges to it and so you're really

00:29:11,909 --> 00:29:16,559
suggesting like leveraging modules as

00:29:13,649 --> 00:29:21,289
adapters it modules as glue code to

00:29:16,559 --> 00:29:27,210
bring in a third party library problem

00:29:21,289 --> 00:29:29,639
rotten tomatoes it is PHP library that

00:29:27,210 --> 00:29:32,309
does the actual talking to the rotten

00:29:29,639 --> 00:29:33,690
tomatoes API using guzzle I didn't

00:29:32,309 --> 00:29:35,700
actually do it the best way I could have

00:29:33,690 --> 00:29:36,960
in hindsight but it does work I'm and

00:29:35,700 --> 00:29:39,690
then this drupal module that does all

00:29:36,960 --> 00:29:41,039
right using that data dump data from

00:29:39,690 --> 00:29:42,750
rotten tomatoes into Drupal it's kind of

00:29:41,039 --> 00:29:47,730
nice I'm doing exactly that for the

00:29:42,750 --> 00:29:51,919
diablo 3 api right now sweet notice our

00:29:47,730 --> 00:29:54,690
priority yes but and here's the problem

00:29:51,919 --> 00:29:58,139
core doesn't provide any way even in do

00:29:54,690 --> 00:29:59,700
grupo eight from modules to pull in

00:29:58,139 --> 00:30:03,809
composer libraries like that as a

00:29:59,700 --> 00:30:06,059
first-class operation and the big

00:30:03,809 --> 00:30:08,789
challenge to doing so is composer

00:30:06,059 --> 00:30:10,440
assumes you have shell access Drupal

00:30:08,789 --> 00:30:12,600
cannot assume you have shell access to

00:30:10,440 --> 00:30:15,090
install a module right that's a problem

00:30:12,600 --> 00:30:16,559
we need to solve even if we do nothing

00:30:15,090 --> 00:30:18,210
else in terms of sharing code to the

00:30:16,559 --> 00:30:20,070
rest of the world that's a problem we

00:30:18,210 --> 00:30:22,019
need to solve to encourage module

00:30:20,070 --> 00:30:24,570
developers to write less Drupal specific

00:30:22,019 --> 00:30:26,370
code yeah I wish I had an answer to that

00:30:24,570 --> 00:30:28,139
that was easy but I don't know if anyone

00:30:26,370 --> 00:30:32,000
has one please share it because I'd love

00:30:28,139 --> 00:30:34,799
to have one I think there's the third so

00:30:32,000 --> 00:30:37,139
compose the way composer works you have

00:30:34,799 --> 00:30:39,539
a makefile essentially a composer Jason

00:30:37,139 --> 00:30:40,559
file that specifies this is what this

00:30:39,539 --> 00:30:43,139
package is and here's just other

00:30:40,559 --> 00:30:44,490
dependencies and so forth and you

00:30:43,139 --> 00:30:46,380
install pack

00:30:44,490 --> 00:30:48,120
is with composer by running a

00:30:46,380 --> 00:30:50,160
command-line tool that downloads the

00:30:48,120 --> 00:30:51,630
files puts in the right place and sets

00:30:50,160 --> 00:30:53,610
up an autoloader that knows where all of

00:30:51,630 --> 00:30:55,700
them are that's great if you have shell

00:30:53,610 --> 00:30:58,800
access to run that composure command

00:30:55,700 --> 00:31:01,080
Drupal by design lets you install a

00:30:58,800 --> 00:31:02,910
module by just ft peeing it in with

00:31:01,080 --> 00:31:04,830
that's the only access you have or by

00:31:02,910 --> 00:31:09,450
going through the UI and just dropping a

00:31:04,830 --> 00:31:11,550
URL into a web form and it downloads the

00:31:09,450 --> 00:31:15,179
module for you and installs it using

00:31:11,550 --> 00:31:19,559
some weird funky screwy logic to keep it

00:31:15,179 --> 00:31:24,090
secure ish ish yeah the ish is the

00:31:19,559 --> 00:31:26,640
problem because if you know if I want to

00:31:24,090 --> 00:31:30,090
install that rotten tomatoes module then

00:31:26,640 --> 00:31:33,000
I can't really do so unless I have shell

00:31:30,090 --> 00:31:34,679
access because right now every module

00:31:33,000 --> 00:31:36,420
will have its own composer file have to

00:31:34,679 --> 00:31:38,340
go into that module directory and run

00:31:36,420 --> 00:31:40,200
composer manually and then install the

00:31:38,340 --> 00:31:42,600
composer auto load module actually can't

00:31:40,200 --> 00:31:45,480
you just do that from from core and it

00:31:42,600 --> 00:31:47,429
like if you do that doesn't it go down

00:31:45,480 --> 00:31:50,070
and look for composer JSON files

00:31:47,429 --> 00:31:53,309
everywhere no with Drupal I'm pretty

00:31:50,070 --> 00:31:56,460
sure I saw KMP demo exactly that it

00:31:53,309 --> 00:31:58,290
recursively looks at composer JSON files

00:31:56,460 --> 00:32:01,559
referenced from the composer Jason file

00:31:58,290 --> 00:32:03,150
but if you have okay yeah if you if you

00:32:01,559 --> 00:32:05,460
today in Drupal 8 have the composer

00:32:03,150 --> 00:32:06,780
Jason file that ships with core and one

00:32:05,460 --> 00:32:07,920
down in a module somewhere and you run

00:32:06,780 --> 00:32:10,650
composer install in the root directory

00:32:07,920 --> 00:32:11,880
that module is not even relevant okay

00:32:10,650 --> 00:32:14,700
because it's not being referenced from

00:32:11,880 --> 00:32:19,140
that global composer file so i would

00:32:14,700 --> 00:32:22,500
love to use composure more but drupal

00:32:19,140 --> 00:32:24,630
being at the top rather than being

00:32:22,500 --> 00:32:26,190
itself a library the way it is in that

00:32:24,630 --> 00:32:28,500
way symphony would be an application

00:32:26,190 --> 00:32:30,360
framework I don't know how to get around

00:32:28,500 --> 00:32:31,800
these problems well and I really want to

00:32:30,360 --> 00:32:33,059
and you know there are a couple other

00:32:31,800 --> 00:32:35,100
things that are worth mentioning here

00:32:33,059 --> 00:32:39,690
like the second composer knows about

00:32:35,100 --> 00:32:41,250
your code you can load it whether the

00:32:39,690 --> 00:32:44,670
module that it belongs to is turned on

00:32:41,250 --> 00:32:48,330
or not now we don't have this problem in

00:32:44,670 --> 00:32:51,090
Drupal 8 because as I said module module

00:32:48,330 --> 00:32:54,240
name spaces are added to the autoloader

00:32:51,090 --> 00:32:55,770
later they aren't in composer but in a

00:32:54,240 --> 00:32:56,970
system where composer is actually

00:32:55,770 --> 00:32:57,990
managing that which is what I'm

00:32:56,970 --> 00:33:00,300
proposing

00:32:57,990 --> 00:33:04,410
you could have code that you didn't have

00:33:00,300 --> 00:33:05,640
enabled but you could say new and give

00:33:04,410 --> 00:33:08,520
it a class name and that would

00:33:05,640 --> 00:33:10,290
instantiate and that's I mean like on

00:33:08,520 --> 00:33:12,330
the one hand that's like OMG on the

00:33:10,290 --> 00:33:14,160
other hand it's like well it's a class

00:33:12,330 --> 00:33:16,620
that's in your library of code whether

00:33:14,160 --> 00:33:19,110
you have code that is actively executing

00:33:16,620 --> 00:33:20,550
it or not and appropriately dependency

00:33:19,110 --> 00:33:23,460
injecting it and all these other things

00:33:20,550 --> 00:33:25,230
that you would get by turning it on is a

00:33:23,460 --> 00:33:27,660
completely different discussion but it's

00:33:25,230 --> 00:33:29,760
worth mentioning that that is a change

00:33:27,660 --> 00:33:32,340
you can't do that in Drupal today you

00:33:29,760 --> 00:33:34,710
can't say give me some class out of this

00:33:32,340 --> 00:33:37,020
disabled module I mean you could I guess

00:33:34,710 --> 00:33:41,280
if you you know manually included the

00:33:37,020 --> 00:33:42,840
file but because that's what composers

00:33:41,280 --> 00:33:44,370
doing for you at that point is it it

00:33:42,840 --> 00:33:46,050
knows where it exists whether it was

00:33:44,370 --> 00:33:49,880
turned on or not so it can manually

00:33:46,050 --> 00:33:52,950
include the file does that make sense

00:33:49,880 --> 00:33:55,950
one other note the Drupal component

00:33:52,950 --> 00:33:57,780
directory exists exactly for this reason

00:33:55,950 --> 00:34:01,260
yes so that we could do the exact same

00:33:57,780 --> 00:34:03,420
split logic that symphony's doing that

00:34:01,260 --> 00:34:05,460
was very deliberate and that's why that

00:34:03,420 --> 00:34:09,899
that's what exists for that purpose and

00:34:05,460 --> 00:34:11,310
that is probably worth showing I can

00:34:09,899 --> 00:34:14,869
take the blame for writing that readme

00:34:11,310 --> 00:34:20,490
file okay which is why you knew about it

00:34:14,869 --> 00:34:23,030
um let's see core lib Drupal why didn't

00:34:20,490 --> 00:34:23,030
I capitalize that

00:34:26,090 --> 00:34:36,040
what in the world okay

00:34:44,870 --> 00:34:47,870
generation

00:34:51,210 --> 00:34:53,629
and

00:34:56,710 --> 00:35:02,990
yeah actually i'll show you exactly what

00:34:59,690 --> 00:35:05,060
Larry's talking about um so this is the

00:35:02,990 --> 00:35:10,099
component library you may not be able to

00:35:05,060 --> 00:35:11,960
see this maybe maybe that's better so we

00:35:10,099 --> 00:35:14,900
have like annotation archiver bridge

00:35:11,960 --> 00:35:23,890
date time diff discovery you know and so

00:35:14,900 --> 00:35:23,890
on um really like excuse me for a moment

00:35:24,040 --> 00:35:34,990
can I committed okay sorry um so yeah

00:35:31,250 --> 00:35:39,349
that's that's great news for me uh so

00:35:34,990 --> 00:35:41,839
yeah so anything in here could ideally

00:35:39,349 --> 00:35:46,849
be separated out I've been working

00:35:41,839 --> 00:35:49,790
towards getting the plug-in system the

00:35:46,849 --> 00:35:51,500
annotation system and the utility system

00:35:49,790 --> 00:35:53,000
all separated out and I know what my

00:35:51,500 --> 00:35:58,250
evening is going to consist of since

00:35:53,000 --> 00:36:01,160
that patch landed um but but we could do

00:35:58,250 --> 00:36:03,140
that with any of these assuming that

00:36:01,160 --> 00:36:05,410
they've been kept pure and don't

00:36:03,140 --> 00:36:08,990
actually make calls to other Drupal

00:36:05,410 --> 00:36:11,750
classes or anything like that and by and

00:36:08,990 --> 00:36:13,010
large the coverage on on making sure

00:36:11,750 --> 00:36:15,650
that doesn't happen in here has been

00:36:13,010 --> 00:36:20,180
pretty good I think the people who have

00:36:15,650 --> 00:36:21,859
have been you know heavily responsible

00:36:20,180 --> 00:36:24,050
for creating these directories have

00:36:21,859 --> 00:36:25,790
generally been consulted before patches

00:36:24,050 --> 00:36:28,490
went into them and they've reviewed them

00:36:25,790 --> 00:36:30,260
and said no you can't do that or change

00:36:28,490 --> 00:36:33,470
it to this or you know stuff like that

00:36:30,260 --> 00:36:36,560
so by and large I think that this is a

00:36:33,470 --> 00:36:40,940
really good first step for us what

00:36:36,560 --> 00:36:43,400
upsets me and probably Larry is that you

00:36:40,940 --> 00:36:47,060
know there there's a lot more here in

00:36:43,400 --> 00:36:49,069
core amongst them database which is like

00:36:47,060 --> 00:36:53,300
almost perfectly usable outside of

00:36:49,069 --> 00:36:57,020
Drupal core it needs a little bit of

00:36:53,300 --> 00:36:59,829
love to migrate over to component but

00:36:57,020 --> 00:37:02,510
there are a lot of things in here that

00:36:59,829 --> 00:37:05,390
to some degree could be seriously

00:37:02,510 --> 00:37:07,160
considered for having stuff abstracted

00:37:05,390 --> 00:37:09,829
out of them and put into component and

00:37:07,160 --> 00:37:10,190
what you see here is you'll see there is

00:37:09,829 --> 00:37:12,230
X

00:37:10,190 --> 00:37:14,330
a plug-in directory here and the plug-in

00:37:12,230 --> 00:37:15,500
directory in here is going to extend a

00:37:14,330 --> 00:37:16,730
whole bunch of things that were provided

00:37:15,500 --> 00:37:18,320
by component and they're going to

00:37:16,730 --> 00:37:20,950
provide a bunch of Drupal assumptions on

00:37:18,320 --> 00:37:23,690
top of them that's pretty like

00:37:20,950 --> 00:37:26,090
sustainable way to go about Delta

00:37:23,690 --> 00:37:27,710
component ad Drupal's assumptions build

00:37:26,090 --> 00:37:30,110
a component add drupal's assumptions

00:37:27,710 --> 00:37:32,870
it's worked very well in the couple of

00:37:30,110 --> 00:37:35,720
places that we've used it thus far and I

00:37:32,870 --> 00:37:39,350
think there's probably a lot of code

00:37:35,720 --> 00:37:41,360
sitting inside of core that just was not

00:37:39,350 --> 00:37:43,880
the people doing it at the time were

00:37:41,360 --> 00:37:45,800
either under too big of a deadline to

00:37:43,880 --> 00:37:48,050
bother abstracting it to that level or

00:37:45,800 --> 00:37:50,720
you know didn't feel comfortable trying

00:37:48,050 --> 00:37:52,400
to conform to it I don't know because I

00:37:50,720 --> 00:37:53,540
wasn't involved in a lot of these but

00:37:52,400 --> 00:37:55,100
there are a lot of these that could

00:37:53,540 --> 00:37:58,460
probably ultimately move into the

00:37:55,100 --> 00:37:59,990
component library given a bit of effort

00:37:58,460 --> 00:38:02,600
and you can see how much code we've

00:37:59,990 --> 00:38:05,530
already done in Drupal 8 that is moving

00:38:02,600 --> 00:38:10,120
this direction before we've even touched

00:38:05,530 --> 00:38:12,770
modules and you know if I go up here

00:38:10,120 --> 00:38:14,690
like we still have an includes directory

00:38:12,770 --> 00:38:17,120
with a whole bunch of stuff in it and

00:38:14,690 --> 00:38:18,980
much of this ultimately not all of it

00:38:17,120 --> 00:38:22,220
probably but a lot of it ultimately

00:38:18,980 --> 00:38:24,260
wants to be moving into that class based

00:38:22,220 --> 00:38:28,360
componentized architecture that is

00:38:24,260 --> 00:38:33,110
reusable on I find myself being

00:38:28,360 --> 00:38:40,040
interested in what is in utility how

00:38:33,110 --> 00:38:42,800
many lines is this oh it's 25 so someone

00:38:40,040 --> 00:38:45,650
file an issue to replace all Drupal VAR

00:38:42,800 --> 00:38:47,480
exports with static calls to variable

00:38:45,650 --> 00:38:53,080
export and we can get rid of this file

00:38:47,480 --> 00:38:53,080
right I wonder why this exists

00:38:54,080 --> 00:38:57,630
but there's going to be quite a bit of

00:38:56,580 --> 00:39:00,510
that sort of stuff because we've just

00:38:57,630 --> 00:39:03,030
got some cruft from trying to build out

00:39:00,510 --> 00:39:06,150
these sorts of systems um let's see I

00:39:03,030 --> 00:39:10,770
said I was going to let sink or vendor

00:39:06,150 --> 00:39:12,900
right yeah so these are all of the real

00:39:10,770 --> 00:39:16,860
legitimate components we actually have

00:39:12,900 --> 00:39:25,290
in Drupal today and well that's not

00:39:16,860 --> 00:39:30,360
entirely true oh I've got that on a

00:39:25,290 --> 00:39:32,520
separate tab yay these right here are

00:39:30,360 --> 00:39:35,520
all the components that we actually have

00:39:32,520 --> 00:39:38,610
with in Drupal 8 today so we have you

00:39:35,520 --> 00:39:41,390
know who I didn't know I could do that

00:39:38,610 --> 00:39:41,390
in them

00:39:44,900 --> 00:39:50,270
there we go so we have a bunch of

00:39:47,390 --> 00:39:52,070
symphony stuff and then we have twig of

00:39:50,270 --> 00:39:54,980
course and doctrine and guzzle an

00:39:52,070 --> 00:40:00,170
ascetic some stuff from symphony CMS and

00:39:54,980 --> 00:40:02,570
so on so when I look here like that this

00:40:00,170 --> 00:40:04,540
directory was generated directly in

00:40:02,570 --> 00:40:10,130
response to the file we just looked at

00:40:04,540 --> 00:40:12,770
and so you know we have a symphony

00:40:10,130 --> 00:40:15,590
directory and in the symphony directory

00:40:12,770 --> 00:40:16,520
we have class letter and debugging we're

00:40:15,590 --> 00:40:17,840
in fact we're going to have a couple of

00:40:16,520 --> 00:40:20,630
things in here that aren't in that

00:40:17,840 --> 00:40:23,570
require statement because they were

00:40:20,630 --> 00:40:27,740
subsequently required by other symphony

00:40:23,570 --> 00:40:32,060
components so interesting things there

00:40:27,740 --> 00:40:34,040
but what Larry was talking about was

00:40:32,060 --> 00:40:37,190
that if we if we look in here there's an

00:40:34,040 --> 00:40:39,590
auto load PHP right and so I can look at

00:40:37,190 --> 00:40:42,380
that and this is a generated file we are

00:40:39,590 --> 00:40:44,990
generating PHP in Drupal 8 and this is

00:40:42,380 --> 00:40:47,990
just returning this generated classes

00:40:44,990 --> 00:40:53,030
static method get loader and so if we go

00:40:47,990 --> 00:40:56,990
into a composer you're going to find

00:40:53,030 --> 00:40:59,930
that we have a number of of PHP files

00:40:56,990 --> 00:41:03,220
here that have been generated and so the

00:40:59,930 --> 00:41:06,170
one it was looking at was autoload real

00:41:03,220 --> 00:41:07,760
which has that crazy class name again

00:41:06,170 --> 00:41:09,980
and it's going to have to get loader

00:41:07,760 --> 00:41:14,540
which does all this sort of stuff but

00:41:09,980 --> 00:41:17,450
most importantly we have this namespaces

00:41:14,540 --> 00:41:19,570
der which actually knows where all your

00:41:17,450 --> 00:41:22,550
classes for a particular namespace live

00:41:19,570 --> 00:41:24,820
that's really cool you want to see

00:41:22,550 --> 00:41:24,820
something cool

00:41:29,710 --> 00:41:34,720
this is a class map of every class that

00:41:32,109 --> 00:41:36,730
exists within any of our vendors it

00:41:34,720 --> 00:41:40,390
knows exactly where they live and so

00:41:36,730 --> 00:41:41,830
when you ask for a vendor class name it

00:41:40,390 --> 00:41:43,930
doesn't even have to do a file exists

00:41:41,830 --> 00:41:47,500
check on these it already verified there

00:41:43,930 --> 00:41:50,530
there it just loads the file and hands

00:41:47,500 --> 00:41:55,420
you the class I'm not even out of the DS

00:41:50,530 --> 00:42:00,730
yet it's long i'm like 257 lines in it

00:41:55,420 --> 00:42:03,220
is 20 286 lines long right so there are

00:42:00,730 --> 00:42:06,130
a lot of classes in here if you think of

00:42:03,220 --> 00:42:09,730
those each being as one class for one

00:42:06,130 --> 00:42:12,880
line which is what it is so that's not

00:42:09,730 --> 00:42:14,800
including any of the modules classes no

00:42:12,880 --> 00:42:16,510
module classes in here so we don't get

00:42:14,800 --> 00:42:18,910
the benefit of them being in the glass

00:42:16,510 --> 00:42:20,410
map which is exactly one of the benefits

00:42:18,910 --> 00:42:23,740
we would get from adopting this sort of

00:42:20,410 --> 00:42:27,369
a strategy so um let's see why does that

00:42:23,740 --> 00:42:31,869
keep coming up I've got about 15 more

00:42:27,369 --> 00:42:33,070
minutes I think anybody have any

00:42:31,869 --> 00:42:39,400
additional comments they want to toss

00:42:33,070 --> 00:42:41,440
out just seeing that class map I think

00:42:39,400 --> 00:42:43,599
we remove the ability to disable what is

00:42:41,440 --> 00:42:47,250
knowledgeable eight so it should be

00:42:43,599 --> 00:42:47,250
easier for us to build a class map right

00:42:48,359 --> 00:42:52,450
well we still have the problem we don't

00:42:50,470 --> 00:42:53,950
actually know where the class exists

00:42:52,450 --> 00:42:55,690
like where the module exists because

00:42:53,950 --> 00:42:58,180
there are like a dozen different places

00:42:55,690 --> 00:43:01,270
that technically can exist no and the

00:42:58,180 --> 00:43:04,359
class maps only for your your your code

00:43:01,270 --> 00:43:06,130
base not for your site if we can figure

00:43:04,359 --> 00:43:08,520
out how to build a class map / site then

00:43:06,130 --> 00:43:10,720
we might be able to get away with that

00:43:08,520 --> 00:43:13,770
exactly site is actually what I meant

00:43:10,720 --> 00:43:13,770
yeah yeah that's true

00:43:21,090 --> 00:43:33,600
I'm just gonna troll you okay licensing

00:43:24,240 --> 00:43:37,620
discuss Oh anybody else so an awful lot

00:43:33,600 --> 00:43:42,480
of the code that we have included is MIT

00:43:37,620 --> 00:43:45,360
right yeah sums MIT sums bsd all bits do

00:43:42,480 --> 00:43:50,280
a licensed GPL though for US isn't it no

00:43:45,360 --> 00:43:52,520
okay yeah but some of it is like they

00:43:50,280 --> 00:43:57,000
did for something you don't they know

00:43:52,520 --> 00:43:58,650
okay so yeah there's there's a war

00:43:57,000 --> 00:44:02,040
raging and we are caught in the middle

00:43:58,650 --> 00:44:06,600
um and I have no clue whose side I'm on

00:44:02,040 --> 00:44:10,320
so you know I think it's one of those

00:44:06,600 --> 00:44:12,090
things where you know I thought about

00:44:10,320 --> 00:44:14,490
this a lot with plugins and plugins was

00:44:12,090 --> 00:44:17,280
birthed out of Drupal 8 and even if I

00:44:14,490 --> 00:44:21,570
thought hey MIT is great which I'm not

00:44:17,280 --> 00:44:27,080
sure I do but supposing I did I don't

00:44:21,570 --> 00:44:27,080
think I can likely ever make that MIT

00:44:29,120 --> 00:44:36,570
right and CH x is probably not on board

00:44:32,420 --> 00:44:38,670
which is fine right I mean like you know

00:44:36,570 --> 00:44:40,680
that going in you say okay we're

00:44:38,670 --> 00:44:44,880
building stuff for Drupal it's GPL 2

00:44:40,680 --> 00:44:47,040
plus so I know oh that's actually

00:44:44,880 --> 00:44:49,380
another thing I've wondered for a long

00:44:47,040 --> 00:44:58,520
time whether we were you know 2 or 2

00:44:49,380 --> 00:44:58,520
plus or whatever yeah I did it anyway

00:44:59,140 --> 00:45:07,270
Hey look at that right uh anyway I I

00:45:05,470 --> 00:45:09,160
think at the end of the day you know

00:45:07,270 --> 00:45:11,710
triple component you're probably going

00:45:09,160 --> 00:45:15,520
to need to be GPL 2 plus right like

00:45:11,710 --> 00:45:17,380
that's just what makes sense and if we

00:45:15,520 --> 00:45:19,810
end up getting to a point where modules

00:45:17,380 --> 00:45:23,470
go away and we're adopting this more

00:45:19,810 --> 00:45:25,480
componentized framework ii approach then

00:45:23,470 --> 00:45:29,500
we may find yourself with a mixture of

00:45:25,480 --> 00:45:32,350
code on any given site beyond what's

00:45:29,500 --> 00:45:37,180
already defined for drupal 8 right we

00:45:32,350 --> 00:45:38,620
may find that you know it's it's not

00:45:37,180 --> 00:45:41,230
like the need for drupal.org goes away

00:45:38,620 --> 00:45:42,400
and all of the sort of code maintenance

00:45:41,230 --> 00:45:46,920
that we've done there because that's

00:45:42,400 --> 00:45:49,570
still very valuable and I I think that

00:45:46,920 --> 00:45:51,130
you know we're going to continue hosting

00:45:49,570 --> 00:45:52,810
things there and those things obviously

00:45:51,130 --> 00:45:54,790
you're going to continue to be GPL

00:45:52,810 --> 00:45:58,600
because we strictly say if you're

00:45:54,790 --> 00:46:01,480
uploading it to our get server it's GPL

00:45:58,600 --> 00:46:04,210
2 plus right I mean that's what you

00:46:01,480 --> 00:46:07,200
agree to so anybody who continues to

00:46:04,210 --> 00:46:10,420
think of what they're doing as being

00:46:07,200 --> 00:46:12,820
Drupal is just going to continue to use

00:46:10,420 --> 00:46:16,090
that license and anybody who decides to

00:46:12,820 --> 00:46:18,490
go out onto github or you know bitbucket

00:46:16,090 --> 00:46:20,020
or I don't know where like they're going

00:46:18,490 --> 00:46:23,050
to have to actually make that decision

00:46:20,020 --> 00:46:24,940
for themselves I'm not sure it actually

00:46:23,050 --> 00:46:27,610
ends up affecting us a whole lot because

00:46:24,940 --> 00:46:29,440
I think you know that that should

00:46:27,610 --> 00:46:32,890
probably sale the decade or go or

00:46:29,440 --> 00:46:35,560
something right on unless we decided to

00:46:32,890 --> 00:46:37,540
just redo everything as three you know

00:46:35,560 --> 00:46:40,720
there's not a lot of a licensing

00:46:37,540 --> 00:46:43,210
discussion to have around around Drupal

00:46:40,720 --> 00:46:44,950
specific components we're abstracting

00:46:43,210 --> 00:46:46,600
them out of Drupal already how much

00:46:44,950 --> 00:46:48,340
effort would it be to go around and find

00:46:46,600 --> 00:46:50,710
every single person who's to blame for

00:46:48,340 --> 00:46:52,180
that code before we abstracted it into a

00:46:50,710 --> 00:46:57,970
component and then get them to agree to

00:46:52,180 --> 00:46:59,050
something else no it's GPL 2 plus my

00:46:57,970 --> 00:47:01,210
impression was that

00:46:59,050 --> 00:47:02,440
if we don't we don't need to store the

00:47:01,210 --> 00:47:04,000
other external libraries it doesn't

00:47:02,440 --> 00:47:05,380
matter what they are we're on me we're

00:47:04,000 --> 00:47:07,750
always during the composer files doesn't

00:47:05,380 --> 00:47:09,700
that get around it or is it does it they

00:47:07,750 --> 00:47:12,520
know when we build it we host a tarball

00:47:09,700 --> 00:47:20,740
the build version is that technically

00:47:12,520 --> 00:47:25,810
against you deserve this Larry so MIT

00:47:20,740 --> 00:47:28,530
and BSD license code are non copyleft

00:47:25,810 --> 00:47:30,730
licenses their permissive licenses so

00:47:28,530 --> 00:47:32,380
technically speaking it is legal for us

00:47:30,730 --> 00:47:36,150
to redistribute that code under the GPL

00:47:32,380 --> 00:47:38,290
if we wanted to we still have the MIT

00:47:36,150 --> 00:47:42,160
copyright statements that they come with

00:47:38,290 --> 00:47:44,680
and our license file says includes these

00:47:42,160 --> 00:47:48,700
other libraries under their own licenses

00:47:44,680 --> 00:47:49,810
so I if you put a gun to my head I

00:47:48,700 --> 00:47:51,370
couldn't actually tell you if

00:47:49,810 --> 00:47:53,050
technically speaking you're getting them

00:47:51,370 --> 00:47:54,880
under MIT or GPL when you download from

00:47:53,050 --> 00:47:56,680
drupal.org I will tell you it doesn't

00:47:54,880 --> 00:47:58,240
actually matter to anyone who's not even

00:47:56,680 --> 00:48:01,480
more of a pendant than I am and that's

00:47:58,240 --> 00:48:04,840
saying great deal the bigger question is

00:48:01,480 --> 00:48:06,760
more if Drupal starts breaking out our

00:48:04,840 --> 00:48:08,440
code into components either the ones we

00:48:06,760 --> 00:48:10,990
have now or if we start writing new ones

00:48:08,440 --> 00:48:13,510
in the future do we think about saying

00:48:10,990 --> 00:48:16,780
hey this new component we are about to

00:48:13,510 --> 00:48:18,790
write we want to make under MIT or lgpl

00:48:16,780 --> 00:48:21,580
or something so that it can be used by

00:48:18,790 --> 00:48:23,290
more people maybe maybe not you'll find

00:48:21,580 --> 00:48:26,920
very loud very angry people on both

00:48:23,290 --> 00:48:28,540
sides that question but if we start

00:48:26,920 --> 00:48:30,850
developing any of these outside of the

00:48:28,540 --> 00:48:33,070
existing Drupal repository that question

00:48:30,850 --> 00:48:34,810
becomes a valid question to ask yeah I

00:48:33,070 --> 00:48:38,080
mean to a certain degree this this is a

00:48:34,810 --> 00:48:39,460
holy war and I you know that's why i

00:48:38,080 --> 00:48:44,470
said i'm trolling you by asking right

00:48:39,460 --> 00:48:48,160
yeah and and i am i am a pathetic and

00:48:44,470 --> 00:48:52,510
i'm not sure i have a god in this war so

00:48:48,160 --> 00:48:57,220
you know yeah i guess to to a certain

00:48:52,510 --> 00:48:58,420
degree i can see both sides of it you

00:48:57,220 --> 00:48:59,830
know you just have to figure out which

00:48:58,420 --> 00:49:03,730
one you think is short-sighted and go

00:48:59,830 --> 00:49:05,710
with the other i think the the easy

00:49:03,730 --> 00:49:07,540
answer for right now the easy step we

00:49:05,710 --> 00:49:09,310
could take is throw a bunch of composer

00:49:07,540 --> 00:49:11,800
JSON files into all of the drupal

00:49:09,310 --> 00:49:12,400
component libraries and do the same kind

00:49:11,800 --> 00:49:14,980
of split

00:49:12,400 --> 00:49:16,359
does that doesn't take any effort at all

00:49:14,980 --> 00:49:17,559
doesn't change our development process

00:49:16,359 --> 00:49:20,130
and slightest but still get to the code

00:49:17,559 --> 00:49:22,420
out somewhere yeah I think that that's a

00:49:20,130 --> 00:49:24,609
really good discussion to have offline

00:49:22,420 --> 00:49:26,020
because I was intending on just creating

00:49:24,609 --> 00:49:27,670
my own repos and passing composer

00:49:26,020 --> 00:49:30,339
Jason's in there and just keeping those

00:49:27,670 --> 00:49:31,630
repos up to date with Drupal core let's

00:49:30,339 --> 00:49:35,680
just file a patch against corn yellow

00:49:31,630 --> 00:49:38,950
trees a lot I'm okay with that we I

00:49:35,680 --> 00:49:41,980
guess we documented that so yeah any

00:49:38,950 --> 00:49:43,450
other questions at this point we have

00:49:41,980 --> 00:49:45,700
about ten more minutes so I mean you

00:49:43,450 --> 00:49:49,029
control me further we can end early and

00:49:45,700 --> 00:49:51,880
you can go seeking coffee I can stand up

00:49:49,029 --> 00:50:01,210
here and show you plugins I mean we

00:49:51,880 --> 00:50:05,039
could do a whole bunch of things modules

00:50:01,210 --> 00:50:05,039
would lead need a whole lot more effort

00:50:09,670 --> 00:50:15,080
it's not it like there are there are

00:50:13,220 --> 00:50:19,970
implications with regard to name spacing

00:50:15,080 --> 00:50:26,630
and other stuff there no it doesn't it

00:50:19,970 --> 00:50:28,370
drops kit can I like can I say yeah

00:50:26,630 --> 00:50:30,020
there's a project called composer

00:50:28,370 --> 00:50:32,210
installers and it's basically someone

00:50:30,020 --> 00:50:34,040
creating something to allow composer to

00:50:32,210 --> 00:50:35,510
to allow you to drop things like Drupal

00:50:34,040 --> 00:50:37,610
modules into place and drop things like

00:50:35,510 --> 00:50:40,610
type 3 whatever they're called plug in

00:50:37,610 --> 00:50:42,680
this type yeah 3 so it's for like this

00:50:40,610 --> 00:50:44,060
one installers repo helps you resolve

00:50:42,680 --> 00:50:45,950
this problem for like pretty much every

00:50:44,060 --> 00:50:47,540
frame work out there interesting I know

00:50:45,950 --> 00:50:49,340
nothing of it but i'm super-interested

00:50:47,540 --> 00:50:50,750
to see it it can be like a zero effort

00:50:49,340 --> 00:50:52,280
like this can just everything to be

00:50:50,750 --> 00:50:53,240
turned into components and sorry that's

00:50:52,280 --> 00:50:54,620
what I was talking about before when I

00:50:53,240 --> 00:50:56,510
was saying like you could just split it

00:50:54,620 --> 00:50:59,690
or not re architect anything and just

00:50:56,510 --> 00:51:02,890
let that incentivize the the change in

00:50:59,690 --> 00:51:05,570
how we think about the modules program

00:51:02,890 --> 00:51:08,630
the problem there is again the how do

00:51:05,570 --> 00:51:11,600
you install it without command line if

00:51:08,630 --> 00:51:13,400
we install all of our modules by telling

00:51:11,600 --> 00:51:15,350
people hey go to the composer Jason

00:51:13,400 --> 00:51:17,120
filed in the root directory add a line

00:51:15,350 --> 00:51:19,580
to it for the module you want to use and

00:51:17,120 --> 00:51:21,440
rerun composer install then what you're

00:51:19,580 --> 00:51:22,970
describing would work wonderfully well

00:51:21,440 --> 00:51:24,860
yeah but this Li say that yet this

00:51:22,970 --> 00:51:27,980
actually gives you the ability to use

00:51:24,860 --> 00:51:29,630
composer in order to compose your your

00:51:27,980 --> 00:51:32,900
modules together but like just because

00:51:29,630 --> 00:51:35,150
we added composer JSON files to all of

00:51:32,900 --> 00:51:38,570
the repos for modules does not mean that

00:51:35,150 --> 00:51:42,590
Rushdi elf stops working or any of our

00:51:38,570 --> 00:51:43,850
other solutions right true it's more a

00:51:42,590 --> 00:51:47,930
matter of just adding that composer

00:51:43,850 --> 00:51:51,800
Jason file doesn't actually have benefit

00:51:47,930 --> 00:51:54,620
I think I guess that depends upon how

00:51:51,800 --> 00:51:56,390
robust this solution is because if if I

00:51:54,620 --> 00:51:58,580
can do something like say I want you to

00:51:56,390 --> 00:52:00,170
get this this module and I want you to

00:51:58,580 --> 00:52:02,120
put it in this directory that's the

00:52:00,170 --> 00:52:03,800
modules dirt inside the contributor

00:52:02,120 --> 00:52:06,350
inside of the modules turns out of you

00:52:03,800 --> 00:52:09,620
know the open atrium profile I mean then

00:52:06,350 --> 00:52:13,400
I could begin building class maps off of

00:52:09,620 --> 00:52:15,080
that could actually use you know the

00:52:13,400 --> 00:52:17,600
composed of Jason file and you know the

00:52:15,080 --> 00:52:20,750
replaced rush make with hey go edit the

00:52:17,600 --> 00:52:22,080
Jason file in Drupal root and say that's

00:52:20,750 --> 00:52:24,420
not hacking core

00:52:22,080 --> 00:52:25,380
then that might be very interesting

00:52:24,420 --> 00:52:27,000
thing to do I don't know if that would

00:52:25,380 --> 00:52:28,620
work or not I I guess they're just a lot

00:52:27,000 --> 00:52:30,360
of really interesting things that could

00:52:28,620 --> 00:52:31,950
be done at this point I was completely

00:52:30,360 --> 00:52:34,560
unaware of this but this opens up a lot

00:52:31,950 --> 00:52:37,140
of interesting ideas is it's right now I

00:52:34,560 --> 00:52:39,600
like the installers project poser

00:52:37,140 --> 00:52:41,850
installs isn't very sure of this stuff

00:52:39,600 --> 00:52:44,130
it is a very real more directly into it

00:52:41,850 --> 00:52:45,630
oh gotcha yeah I don't think it's very

00:52:44,130 --> 00:52:48,510
robust and it pretty much only takes one

00:52:45,630 --> 00:52:50,850
install path and no one's really been

00:52:48,510 --> 00:52:53,070
like well then we need to commit an

00:52:50,850 --> 00:52:54,600
upstream patch I mean yeah yeah so right

00:52:53,070 --> 00:52:56,070
right now it could work if we're saying

00:52:54,600 --> 00:52:57,810
hey we just want to treat core modules

00:52:56,070 --> 00:52:59,220
like this we're test out this approach

00:52:57,810 --> 00:53:01,980
we're using composer and Korra already

00:52:59,220 --> 00:53:03,690
like contribute you know we need to fix

00:53:01,980 --> 00:53:05,270
up the installers thing and make it so

00:53:03,690 --> 00:53:08,100
it could actually have two different

00:53:05,270 --> 00:53:11,060
modules directories that it can that can

00:53:08,100 --> 00:53:11,060
drop into any way

00:53:13,740 --> 00:53:18,820
okay cool well I'm gonna let y'all go

00:53:16,120 --> 00:53:25,330
like five minutes early so thank you for

00:53:18,820 --> 00:53:29,410
coming I appreciate it oh oh and please

00:53:25,330 --> 00:53:32,380
tell them i did a good job oh wow this

00:53:29,410 --> 00:53:33,550
is this is printing this is what did you

00:53:32,380 --> 00:53:36,790
think oh look at that it's got

00:53:33,550 --> 00:53:39,370
animations all right yeah so so I guess

00:53:36,790 --> 00:53:41,110
I do have a couple more minutes so yes

00:53:39,370 --> 00:53:43,600
please tell them i did a good job go

00:53:41,110 --> 00:53:47,680
take the survey I could use the Karma

00:53:43,600 --> 00:53:50,410
and then there is a sprint on friday so

00:53:47,680 --> 00:53:52,240
i was asked to tell you all this and i

00:53:50,410 --> 00:53:53,710
will happily do so because you should

00:53:52,240 --> 00:53:57,100
absolutely be at the sprint on friday

00:53:53,710 --> 00:53:59,260
will be doing lots and lots of stuff we

00:53:57,100 --> 00:54:01,930
have tasks for every skill set mentors

00:53:59,260 --> 00:54:03,370
available for new contributors I'm not

00:54:01,930 --> 00:54:07,980
gonna do any more of the sales pitch you

00:54:03,370 --> 00:54:07,980
all know it cool

00:54:11,160 --> 00:54:14,160

YouTube URL: https://www.youtube.com/watch?v=bDysnPxLWHc


