Title: DrupalCon Prague 2013: MANAGE THOSE DEPENDENCIES
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	Package- and dependency management is like source control; somehow we manage to survive without it, but it's a pain in the ass. For some reason, web development has been a place of medival darkness without proper tools for handling packages and dependencies. Until now.

This presentation will showcase how you can leverage NPM, Browserify, Yarnify, Bower, Jam, RequireJS and all of their friends to bring your application and your development process to the age of Enlightenment.
Captions: 
	00:00:00,000 --> 00:00:07,890
okay I guess we should get started and I

00:00:04,830 --> 00:00:10,620
hate microphones I can't move around and

00:00:07,890 --> 00:00:14,759
like wave my arms with them but I'll

00:00:10,620 --> 00:00:17,369
have to make do anyway so this is a

00:00:14,759 --> 00:00:21,150
session called manage those dependencies

00:00:17,369 --> 00:00:23,850
and as you could guess already my name

00:00:21,150 --> 00:00:26,810
is Jacob and my twitter handle happens

00:00:23,850 --> 00:00:29,640
to be exactly my name so if you want to

00:00:26,810 --> 00:00:32,009
say something during during the talk

00:00:29,640 --> 00:00:33,809
give some feedback or maybe you just

00:00:32,009 --> 00:00:35,760
want to access the slides afterwards

00:00:33,809 --> 00:00:42,000
then i'm going to write those things on

00:00:35,760 --> 00:00:44,550
on twitter and I've been encoding a lot

00:00:42,000 --> 00:00:47,070
for a long time many different companies

00:00:44,550 --> 00:00:49,680
many different languages and so on but I

00:00:47,070 --> 00:00:52,140
don't want to stand here and like recite

00:00:49,680 --> 00:00:55,410
my resume so you can just look me up

00:00:52,140 --> 00:00:59,160
yourselves if you want to what I do want

00:00:55,410 --> 00:01:01,590
to say is that I'm from Sweden and is

00:00:59,160 --> 00:01:03,750
anyone else in here from Sweden they're

00:01:01,590 --> 00:01:08,909
actually two awesome then you can talk

00:01:03,750 --> 00:01:12,030
now because when I go places and say

00:01:08,909 --> 00:01:15,000
that I'm from Sweden people most often

00:01:12,030 --> 00:01:18,780
at least have some some kind of idea of

00:01:15,000 --> 00:01:23,640
what Sweden is like and most people

00:01:18,780 --> 00:01:28,170
think something like this everyone works

00:01:23,640 --> 00:01:31,799
around and like a coat and like this

00:01:28,170 --> 00:01:34,820
brutish men and and always complaining

00:01:31,799 --> 00:01:38,460
about the fact that winter is coming but

00:01:34,820 --> 00:01:42,780
but I tell you Sweden is nothing like

00:01:38,460 --> 00:01:45,030
that because Ned Stark have no idea what

00:01:42,780 --> 00:01:48,450
winter is like you have no idea what

00:01:45,030 --> 00:01:55,320
winter is like this is what winter is

00:01:48,450 --> 00:01:57,259
like so anyway I'm not here to talk

00:01:55,320 --> 00:02:04,399
about the weather but to talk about

00:01:57,259 --> 00:02:09,049
dependency management once again and

00:02:04,399 --> 00:02:09,049
before I start I just want to say this

00:02:14,450 --> 00:02:22,710
so yeah use your brain like don't take

00:02:18,870 --> 00:02:24,890
everything as truth but yeah you use the

00:02:22,710 --> 00:02:28,590
bits and pieces that you find useful and

00:02:24,890 --> 00:02:30,630
question everything and also I am NOT

00:02:28,590 --> 00:02:32,730
here to talk about building like home

00:02:30,630 --> 00:02:35,670
pages for your kitten I'm here to talk

00:02:32,730 --> 00:02:38,490
about actual apps building building real

00:02:35,670 --> 00:02:42,090
apps that are complex and somewhat huge

00:02:38,490 --> 00:02:44,880
at least and let's start with some so

00:02:42,090 --> 00:02:48,960
quizzing I actually found this quote a

00:02:44,880 --> 00:02:50,640
while back that said it was talking

00:02:48,960 --> 00:02:53,100
about the particular piece of technology

00:02:50,640 --> 00:02:54,870
and it said that it's a piece of the

00:02:53,100 --> 00:02:57,390
stack that's been notably missing for

00:02:54,870 --> 00:03:00,630
years and after using it for a while now

00:02:57,390 --> 00:03:02,820
I'm not sure how I lived without it and

00:03:00,630 --> 00:03:04,590
when I googled around for this a bit I

00:03:02,820 --> 00:03:07,650
realized that people have had been

00:03:04,590 --> 00:03:09,750
saying this about source control like I

00:03:07,650 --> 00:03:12,000
started out coding without source

00:03:09,750 --> 00:03:14,640
control for I think maybe three years or

00:03:12,000 --> 00:03:17,880
so when I was in high school and I often

00:03:14,640 --> 00:03:20,790
copied my folders to like back up things

00:03:17,880 --> 00:03:22,860
in case I would screw something up until

00:03:20,790 --> 00:03:25,380
next day or whatever so this could

00:03:22,860 --> 00:03:28,080
definitely be said about source control

00:03:25,380 --> 00:03:32,670
but it has also been said about

00:03:28,080 --> 00:03:34,890
something else in this case and you can

00:03:32,670 --> 00:03:39,090
probably guess but let's rewind the tape

00:03:34,890 --> 00:03:42,500
and and look about what's happened in in

00:03:39,090 --> 00:03:45,060
a couple of different environments so I

00:03:42,500 --> 00:03:47,310
personally at least discovered unix in

00:03:45,060 --> 00:03:50,430
about ninety nine before that I was

00:03:47,310 --> 00:03:53,070
purely a windows guy and the thing I

00:03:50,430 --> 00:03:55,730
found coolest about unix of all the

00:03:53,070 --> 00:03:59,610
things was the fact that you never like

00:03:55,730 --> 00:04:01,230
downloaded these executable files to

00:03:59,610 --> 00:04:02,910
install stuff and had to choose which

00:04:01,230 --> 00:04:04,980
directory and we're in your Start menu

00:04:02,910 --> 00:04:07,200
you wanted things to be installed you

00:04:04,980 --> 00:04:09,240
had a command a simple one-liner that

00:04:07,200 --> 00:04:11,370
installed something for you and you

00:04:09,240 --> 00:04:13,440
could put this as part of a script that

00:04:11,370 --> 00:04:15,450
would like install the whole setup for

00:04:13,440 --> 00:04:17,700
an install a machine to the exact

00:04:15,450 --> 00:04:20,670
specifications that you want it and that

00:04:17,700 --> 00:04:23,460
that was really cool in my opinion

00:04:20,670 --> 00:04:25,470
mm as time went by I discovered the Mac

00:04:23,460 --> 00:04:27,120
as well and realized that Oh their

00:04:25,470 --> 00:04:29,280
software for the mac that can actually

00:04:27,120 --> 00:04:33,660
do this as well even if it's not as out

00:04:29,280 --> 00:04:35,250
of the box as as pure unix and suddenly

00:04:33,660 --> 00:04:37,710
it started appearing in programming

00:04:35,250 --> 00:04:41,520
languages as well I first encountered it

00:04:37,710 --> 00:04:42,750
in Ruby where you have Ruby gems well

00:04:41,520 --> 00:04:44,970
you do exactly the same thing you

00:04:42,750 --> 00:04:47,370
install the the piece of software that

00:04:44,970 --> 00:04:51,900
you want to use alongside your own code

00:04:47,370 --> 00:04:53,760
and it's not limited to two software in

00:04:51,900 --> 00:04:57,240
order to building software anymore but

00:04:53,760 --> 00:04:59,090
even actual actual end users follow this

00:04:57,240 --> 00:05:02,070
pattern now sin since the App Store

00:04:59,090 --> 00:05:03,660
where you just you go to someplace and

00:05:02,070 --> 00:05:06,150
you download and you install and it's

00:05:03,660 --> 00:05:09,180
done can't really script it but it's

00:05:06,150 --> 00:05:12,090
pretty much the same thing and lately

00:05:09,180 --> 00:05:13,500
I've been doing a lot of know Jas where

00:05:12,090 --> 00:05:18,120
you have exactly the same thing again

00:05:13,500 --> 00:05:22,020
with NPM so of course you know what i'm

00:05:18,120 --> 00:05:26,040
getting at already the theme at least so

00:05:22,020 --> 00:05:28,680
this quote once again was taken from one

00:05:26,040 --> 00:05:30,930
of the microsoft evangelists talking

00:05:28,680 --> 00:05:34,290
about the Microsoft stack and in

00:05:30,930 --> 00:05:35,970
particular the tool called nugget which

00:05:34,290 --> 00:05:40,290
does exactly this for the.net framework

00:05:35,970 --> 00:05:42,630
so so even Microsoft is catching on but

00:05:40,290 --> 00:05:45,750
what I want to ask here today and since

00:05:42,630 --> 00:05:48,840
this is the front end track is what's

00:05:45,750 --> 00:05:51,330
the JS approach to this i am not talking

00:05:48,840 --> 00:05:53,910
no j us i'm talking about client-side

00:05:51,330 --> 00:05:57,300
browser stuff how do we manage

00:05:53,910 --> 00:05:59,940
dependencies in general and that as

00:05:57,300 --> 00:06:02,280
usual with all kinds of technologies and

00:05:59,940 --> 00:06:05,010
all processes and so on there's a ton of

00:06:02,280 --> 00:06:08,430
different ways but the most common one

00:06:05,010 --> 00:06:12,900
and the one I think you've all used from

00:06:08,430 --> 00:06:15,240
time to time maybe still is to find the

00:06:12,900 --> 00:06:17,970
library that you want to use like jQuery

00:06:15,240 --> 00:06:20,960
everyone wants to use jQuery so you look

00:06:17,970 --> 00:06:23,300
it up on the web you download the source

00:06:20,960 --> 00:06:27,300
you put it in a folder somewhere

00:06:23,300 --> 00:06:30,370
structured in your project and then you

00:06:27,300 --> 00:06:32,960
let the global pollution begin

00:06:30,370 --> 00:06:35,900
because you want another library and you

00:06:32,960 --> 00:06:38,630
want another library so this pollution

00:06:35,900 --> 00:06:40,850
that's just the beginning you start like

00:06:38,630 --> 00:06:42,860
piling these things on top of each other

00:06:40,850 --> 00:06:46,460
like all these different things that you

00:06:42,860 --> 00:06:48,050
want to use you find somewhere and and

00:06:46,460 --> 00:06:49,880
this picture is even not that

00:06:48,050 --> 00:06:53,540
descriptive I feel it's more like this

00:06:49,880 --> 00:06:56,750
usually and it becomes a maintenance

00:06:53,540 --> 00:06:58,610
nightmare and I suppose most of you have

00:06:56,750 --> 00:07:01,400
actually felt this if you work with

00:06:58,610 --> 00:07:04,400
front-end development then catch the

00:07:01,400 --> 00:07:06,410
wires yeah don't touch the dependencies

00:07:04,400 --> 00:07:08,270
we downloaded because this thing only

00:07:06,410 --> 00:07:10,070
works with this version and this theme

00:07:08,270 --> 00:07:12,860
only works with that and it's a house of

00:07:10,070 --> 00:07:16,040
cards and it that's not the whole story

00:07:12,860 --> 00:07:19,790
because it also brings a whole bunch of

00:07:16,040 --> 00:07:24,320
stupid habits going about this in this

00:07:19,790 --> 00:07:26,930
way so for example we start to we want

00:07:24,320 --> 00:07:29,750
two minima Phi are our sources right and

00:07:26,930 --> 00:07:31,550
concat files before we deploy and that's

00:07:29,750 --> 00:07:34,310
kind of a problem because if there's not

00:07:31,550 --> 00:07:36,020
a semicolon in the end of a file that

00:07:34,310 --> 00:07:37,940
you're concatenating with another you

00:07:36,020 --> 00:07:39,800
can run into problems so people start

00:07:37,940 --> 00:07:43,070
adding semicolons to the beginning of

00:07:39,800 --> 00:07:46,340
their files which is like what what are

00:07:43,070 --> 00:07:48,890
you doing why do we need to do stupid

00:07:46,340 --> 00:07:51,080
hacks like that and we start to do like

00:07:48,890 --> 00:07:53,780
premature minima fication every

00:07:51,080 --> 00:07:56,480
everything we download can be downloaded

00:07:53,780 --> 00:07:58,370
as a minima fide version or an eminent

00:07:56,480 --> 00:07:59,510
version and if we download the non

00:07:58,370 --> 00:08:01,820
minima fight we have to do it ourselves

00:07:59,510 --> 00:08:05,090
and if we download that minima fight one

00:08:01,820 --> 00:08:07,310
we have to we have a hard time debugging

00:08:05,090 --> 00:08:10,070
our code so maybe we download both of

00:08:07,310 --> 00:08:13,250
them and even start increasing the mess

00:08:10,070 --> 00:08:16,520
even more because we want two minima Phi

00:08:13,250 --> 00:08:20,060
on the end anyway not like before we've

00:08:16,520 --> 00:08:22,480
finished and there's also no choice but

00:08:20,060 --> 00:08:24,710
to check in dependencies that's like a

00:08:22,480 --> 00:08:27,650
discussion of its own whether or not you

00:08:24,710 --> 00:08:29,270
should actually do that but in this case

00:08:27,650 --> 00:08:32,210
you have to because you have downloaded

00:08:29,270 --> 00:08:34,640
them from an arbitrary source and and

00:08:32,210 --> 00:08:38,390
you have to put them alongside your code

00:08:34,640 --> 00:08:41,750
and since we're already copy and pasting

00:08:38,390 --> 00:08:42,510
libraries like jQuery this and this full

00:08:41,750 --> 00:08:44,570
version +

00:08:42,510 --> 00:08:47,130
r square this and that version and so on

00:08:44,570 --> 00:08:49,440
why not copy and paste some small pieces

00:08:47,130 --> 00:08:50,850
of code that we have in our different

00:08:49,440 --> 00:08:53,700
projects because those are like

00:08:50,850 --> 00:08:56,700
libraries right so we kind of encourage

00:08:53,700 --> 00:08:59,970
copy and paste coding bye bye that just

00:08:56,700 --> 00:09:02,730
downloading source and putting it in in

00:08:59,970 --> 00:09:06,480
our projects so if you ask me the whole

00:09:02,730 --> 00:09:11,880
thing is like this is my feeling about

00:09:06,480 --> 00:09:15,630
it it's just and you can ask like

00:09:11,880 --> 00:09:19,800
why why is it this way why why are we

00:09:15,630 --> 00:09:22,950
developing this way by why are we as web

00:09:19,800 --> 00:09:25,680
developers doing this in a different way

00:09:22,950 --> 00:09:29,040
than other people and I think the

00:09:25,680 --> 00:09:33,120
problem of course originates with the

00:09:29,040 --> 00:09:36,150
fact that the verb is is like a toy it's

00:09:33,120 --> 00:09:39,030
like JavaScript it's it's for adding

00:09:36,150 --> 00:09:42,870
adding stars that blink on on your

00:09:39,030 --> 00:09:44,820
site's right so the developers for a

00:09:42,870 --> 00:09:47,760
very long time have been seen like this

00:09:44,820 --> 00:09:50,310
for more like system closed developers

00:09:47,760 --> 00:09:53,700
it's like a toy language a toy

00:09:50,310 --> 00:09:56,580
environment where you do toy things like

00:09:53,700 --> 00:10:00,510
a an ad person or something creating a

00:09:56,580 --> 00:10:02,730
website but it is not true anymore right

00:10:00,510 --> 00:10:05,640
it's not like that and haters gonna hate

00:10:02,730 --> 00:10:07,830
but front and Bev's work x squared

00:10:05,640 --> 00:10:12,560
kitties it's not like that anymore right

00:10:07,830 --> 00:10:16,200
and you know it and just to back it up

00:10:12,560 --> 00:10:20,460
javascript is like super popular if you

00:10:16,200 --> 00:10:22,830
look at github and javascript is it's

00:10:20,460 --> 00:10:27,690
actually twenty one percent of the

00:10:22,830 --> 00:10:30,480
entire code there and I actually

00:10:27,690 --> 00:10:33,480
actually updated this slide just a month

00:10:30,480 --> 00:10:36,120
ago and I created it first a year ago

00:10:33,480 --> 00:10:38,790
and obviously javascript is even more

00:10:36,120 --> 00:10:41,280
popular now it was like 19 before and

00:10:38,790 --> 00:10:43,740
now 21 and the funny thing is that none

00:10:41,280 --> 00:10:45,900
of the others had changed at all except

00:10:43,740 --> 00:10:48,000
one that change one percent I don't

00:10:45,900 --> 00:10:50,430
remember which one but the big change

00:10:48,000 --> 00:10:52,380
that happen was that CoffeeScript was

00:10:50,430 --> 00:10:54,240
suddenly here one year ago CoffeeScript

00:10:52,380 --> 00:10:55,410
wasn't on the top 10 chart so these

00:10:54,240 --> 00:10:56,360
three percent they're actually

00:10:55,410 --> 00:10:59,899
JavaScript as well

00:10:56,360 --> 00:11:02,450
in a sense so javascript is really

00:10:59,899 --> 00:11:04,970
really increasing in popularity and and

00:11:02,450 --> 00:11:07,399
the medieval ages are kind of over we're

00:11:04,970 --> 00:11:11,510
not doing it what to do we don't want to

00:11:07,399 --> 00:11:14,410
do things and playfully just copy and

00:11:11,510 --> 00:11:17,600
pasting kind of way anymore so that's

00:11:14,410 --> 00:11:22,279
that's what this talk is is all about

00:11:17,600 --> 00:11:25,370
and my idea is to cover a couple of

00:11:22,279 --> 00:11:30,709
different methods for dealing with this

00:11:25,370 --> 00:11:35,300
or tools rather so these are the ones

00:11:30,709 --> 00:11:37,610
that I want to talk about and I could

00:11:35,300 --> 00:11:40,190
start by asking is there anyone in here

00:11:37,610 --> 00:11:41,959
who know what all of these are just from

00:11:40,190 --> 00:11:45,829
looking at the logos up with your hands

00:11:41,959 --> 00:11:47,300
in that case one may be okay then then

00:11:45,829 --> 00:11:49,820
we can leave because you know everything

00:11:47,300 --> 00:11:51,290
already but the rest of you have

00:11:49,820 --> 00:11:53,420
something to learn at least and

00:11:51,290 --> 00:11:57,760
hopefully you'll learn something new as

00:11:53,420 --> 00:12:01,279
well so I'm going to run through these

00:11:57,760 --> 00:12:03,740
rather quickly but just talk about what

00:12:01,279 --> 00:12:06,019
is it how is it different compared to

00:12:03,740 --> 00:12:08,300
the other ones and what's there like

00:12:06,019 --> 00:12:11,449
strengths and weaknesses in each of

00:12:08,300 --> 00:12:14,860
these approaches but before we actually

00:12:11,449 --> 00:12:17,890
get to these browser centric tools I

00:12:14,860 --> 00:12:22,250
first won't say something about em p.m.

00:12:17,890 --> 00:12:25,070
which is the node package manager and I

00:12:22,250 --> 00:12:26,829
suppose most of you know about node at

00:12:25,070 --> 00:12:29,449
least which is a JavaScript environment

00:12:26,829 --> 00:12:31,940
or a platform for running JavaScript on

00:12:29,449 --> 00:12:36,769
the server but how many in here have

00:12:31,940 --> 00:12:39,800
actually worked with note just a few ok

00:12:36,769 --> 00:12:47,240
but so then it's useful to actually go

00:12:39,800 --> 00:12:48,680
through this so in in the note you you

00:12:47,240 --> 00:12:52,640
simply do something like this when you

00:12:48,680 --> 00:12:54,920
want to to install a library of that

00:12:52,640 --> 00:12:58,459
someone else has written on the command

00:12:54,920 --> 00:13:00,649
line is actually really dark well I hope

00:12:58,459 --> 00:13:02,779
you can see it otherwise you simply have

00:13:00,649 --> 00:13:05,510
to have to look up the slides afterwards

00:13:02,779 --> 00:13:09,550
and what I'm saying will hopefully be

00:13:05,510 --> 00:13:11,890
enough so we we

00:13:09,550 --> 00:13:13,600
use it to install packages and we do it

00:13:11,890 --> 00:13:15,940
by just saying MPM install and then

00:13:13,600 --> 00:13:19,269
whatever on the command line and it

00:13:15,940 --> 00:13:20,800
installs that library into the project

00:13:19,269 --> 00:13:22,690
that you're currently in and then you

00:13:20,800 --> 00:13:28,329
can start using it in your in your

00:13:22,690 --> 00:13:30,279
server side JavaScript note code and you

00:13:28,329 --> 00:13:34,540
do I wonder if we can actually increase

00:13:30,279 --> 00:13:43,360
the light somehow I guess you can't read

00:13:34,540 --> 00:13:49,380
this button back over there right I'm

00:13:43,360 --> 00:13:49,380
not much to do about that now sorry

00:13:54,300 --> 00:14:00,360
wonder where is to switch yeah someone

00:13:58,060 --> 00:14:00,360
can try

00:14:10,069 --> 00:14:18,569
talking darkness yeah okay good tell me

00:14:15,779 --> 00:14:22,019
that it's not filming my face and I

00:14:18,569 --> 00:14:25,259
think the highlighting most of the Texas

00:14:22,019 --> 00:14:27,779
right so only parts will be hard to read

00:14:25,259 --> 00:14:31,799
and most of it will probably be seen

00:14:27,779 --> 00:14:34,199
anyway so and and you can do this if you

00:14:31,799 --> 00:14:37,949
really want to if you go to speaker deck

00:14:34,199 --> 00:14:40,049
calm / jacob Matson you can find this

00:14:37,949 --> 00:14:44,509
presentation and follow it on your own

00:14:40,049 --> 00:14:46,649
laptop or whatever but anyway yeah

00:14:44,509 --> 00:14:48,179
another controller question before we

00:14:46,649 --> 00:14:50,660
continue how many people in here are

00:14:48,179 --> 00:14:52,889
actually writing JavaScript now and then

00:14:50,660 --> 00:14:57,449
okay pretty much everyone that's good

00:14:52,889 --> 00:14:59,819
and so all code here is just regular

00:14:57,449 --> 00:15:03,029
JavaScript except for this require

00:14:59,819 --> 00:15:04,860
function which we use to import one of

00:15:03,029 --> 00:15:06,629
the the modules that we've been solved

00:15:04,860 --> 00:15:11,939
and then we can use whatever functions

00:15:06,629 --> 00:15:14,459
it exposes like this we get the object

00:15:11,939 --> 00:15:17,669
foo and then we we call the square

00:15:14,459 --> 00:15:19,949
method on on the food objects and it's

00:15:17,669 --> 00:15:24,419
really easy to like publish a package

00:15:19,949 --> 00:15:27,720
using NPM you just the clarifying like

00:15:24,419 --> 00:15:30,029
this called the package.json where you

00:15:27,720 --> 00:15:31,889
say the name of your file which or the

00:15:30,029 --> 00:15:33,480
main name of your project which has to

00:15:31,889 --> 00:15:36,419
be unique and then you have some

00:15:33,480 --> 00:15:38,069
metadata hear about like what does it do

00:15:36,419 --> 00:15:42,749
so people understand it and what version

00:15:38,069 --> 00:15:45,959
is this and what other packages is this

00:15:42,749 --> 00:15:48,169
depending on and so on so that's what

00:15:45,959 --> 00:15:51,509
how AM PM works and how we work with

00:15:48,169 --> 00:15:54,660
with packages on server side JavaScript

00:15:51,509 --> 00:15:57,569
and I'm going to relate back to that one

00:15:54,660 --> 00:15:59,639
we look at the browser here so let's

00:15:57,569 --> 00:16:02,759
start from the beginning and look at the

00:15:59,639 --> 00:16:05,179
one I think was developed first and at

00:16:02,759 --> 00:16:09,299
least was the one I encountered first

00:16:05,179 --> 00:16:11,139
which is called ender and the the guys

00:16:09,299 --> 00:16:13,809
develop who develop tender

00:16:11,139 --> 00:16:16,809
thought of it as the the male library

00:16:13,809 --> 00:16:18,939
library that instead of putting down

00:16:16,809 --> 00:16:21,819
lots of different libraries you were

00:16:18,939 --> 00:16:24,489
supposed to kind of specify that which

00:16:21,819 --> 00:16:27,549
libraries you want and bundle them to

00:16:24,489 --> 00:16:32,379
get their into like the complete package

00:16:27,549 --> 00:16:34,029
so to speak that you need and it's it's

00:16:32,379 --> 00:16:36,160
also a team that you use on the command

00:16:34,029 --> 00:16:38,619
line us down under and then you say

00:16:36,160 --> 00:16:43,709
under build and then you learn lots of

00:16:38,619 --> 00:16:43,709
packages that you want to install and

00:16:43,949 --> 00:16:50,319
another agenda they kind of had was to

00:16:46,839 --> 00:16:52,269
to replace jQuery which was kind of

00:16:50,319 --> 00:16:54,309
monolithic where you got all these

00:16:52,269 --> 00:16:56,139
features at once and maybe you didn't

00:16:54,309 --> 00:16:59,230
need all of them so they built a couple

00:16:56,139 --> 00:17:00,970
of packages that exposed parts of the

00:16:59,230 --> 00:17:03,999
similar functionality the jQuery had

00:17:00,970 --> 00:17:07,870
like Adam webby function a query

00:17:03,999 --> 00:17:10,389
language for for querying Dom node using

00:17:07,870 --> 00:17:12,579
CSS selectors and so on and then the

00:17:10,389 --> 00:17:14,500
other packages like underscore and yeah

00:17:12,579 --> 00:17:17,079
whatever could be installed using ender

00:17:14,500 --> 00:17:18,669
so you just say the members of your

00:17:17,079 --> 00:17:20,769
packages that you want an Ender

00:17:18,669 --> 00:17:22,329
automatically fetches them and puts them

00:17:20,769 --> 00:17:24,939
into a file and you can include that

00:17:22,329 --> 00:17:26,860
file commander j/s on your site and now

00:17:24,939 --> 00:17:29,049
all these things are there so you don't

00:17:26,860 --> 00:17:33,519
have to go out and browse the web for

00:17:29,049 --> 00:17:35,710
these things and you just use it the

00:17:33,519 --> 00:17:38,380
jQuery way so to speak it adds all of

00:17:35,710 --> 00:17:41,980
these libraries on to the dollar so you

00:17:38,380 --> 00:17:45,159
can use the map function from from under

00:17:41,980 --> 00:17:50,740
square you can use the querying from the

00:17:45,159 --> 00:17:52,929
query package and so on but I don't

00:17:50,740 --> 00:17:54,580
think this is really really that useful

00:17:52,929 --> 00:17:56,350
because it makes them is a little

00:17:54,580 --> 00:17:59,500
simpler you kind of eliminate the need

00:17:56,350 --> 00:18:02,679
to to do things arbitrarily and you have

00:17:59,500 --> 00:18:04,570
a systematic approach but it's not

00:18:02,679 --> 00:18:06,399
really structuring things differently

00:18:04,570 --> 00:18:11,490
because everything ends up on the dollar

00:18:06,399 --> 00:18:14,889
so everything you add is kind of global

00:18:11,490 --> 00:18:16,899
there's no no like resolution or

00:18:14,889 --> 00:18:18,580
management of how how these things are

00:18:16,899 --> 00:18:21,250
supposed to interact everything's just

00:18:18,580 --> 00:18:23,260
crammed together and obviously it

00:18:21,250 --> 00:18:24,550
doesn't play well with jquery because it

00:18:23,260 --> 00:18:27,310
uses the dollar

00:18:24,550 --> 00:18:30,550
I found that quite challenging because

00:18:27,310 --> 00:18:33,850
it's honestly it's hard to to be without

00:18:30,550 --> 00:18:35,920
jquery and even if you don't use jQuery

00:18:33,850 --> 00:18:38,560
itself maybe you need a plugin or two

00:18:35,920 --> 00:18:44,980
that depends on jQuery and yeah then

00:18:38,560 --> 00:18:48,070
you're so moving on there are

00:18:44,980 --> 00:18:51,940
some other two is then that have like a

00:18:48,070 --> 00:18:55,540
larger idea and one what I really like

00:18:51,940 --> 00:18:58,930
is the one called blood sir if I and if

00:18:55,540 --> 00:19:01,660
any of you actually work with this or or

00:18:58,930 --> 00:19:04,720
use it then you will know that this is

00:19:01,660 --> 00:19:06,490
the version one browserify logo not the

00:19:04,720 --> 00:19:08,440
second one I've actually not migrated

00:19:06,490 --> 00:19:10,000
myself so it would be kind of a light to

00:19:08,440 --> 00:19:14,770
use the new one up there when I'm

00:19:10,000 --> 00:19:17,740
talking but the idea of it is to enable

00:19:14,770 --> 00:19:22,960
the node style package management in the

00:19:17,740 --> 00:19:24,760
browser yeah and it uses the same

00:19:22,960 --> 00:19:27,850
pattern as a note which is called

00:19:24,760 --> 00:19:29,920
commonjs which is a project with the

00:19:27,850 --> 00:19:31,870
goal of specifying an ecosystem for

00:19:29,920 --> 00:19:34,240
javascript outside of the browser and

00:19:31,870 --> 00:19:35,980
the weird thing now is of course that we

00:19:34,240 --> 00:19:40,900
bring it back to the browser but yeah

00:19:35,980 --> 00:19:45,670
anyway so it looks like this exactly

00:19:40,900 --> 00:19:48,100
like like when we run code a mode except

00:19:45,670 --> 00:19:51,160
that now we say require and then we give

00:19:48,100 --> 00:19:55,060
a file path which is where we'll find

00:19:51,160 --> 00:19:57,250
the files that we want to include so

00:19:55,060 --> 00:20:00,870
instead of running a large JavaScript as

00:19:57,250 --> 00:20:05,470
a long series of things in the same file

00:20:00,870 --> 00:20:08,700
executing and at once we can now split

00:20:05,470 --> 00:20:11,950
our program in two separate files and

00:20:08,700 --> 00:20:16,510
delay the run rule of them until we say

00:20:11,950 --> 00:20:18,460
require mm for jas orb rjs and so on and

00:20:16,510 --> 00:20:22,360
then we can start using the things they

00:20:18,460 --> 00:20:25,120
are exposing and the way you you would

00:20:22,360 --> 00:20:27,730
define the package in this case for

00:20:25,120 --> 00:20:33,370
example food ojs would be to do

00:20:27,730 --> 00:20:37,270
something like this we say experts dot

00:20:33,370 --> 00:20:38,080
square so we put the square function on

00:20:37,270 --> 00:20:40,720
and

00:20:38,080 --> 00:20:42,370
magical objects called exports and then

00:20:40,720 --> 00:20:48,039
we define a function to do whatever we

00:20:42,370 --> 00:20:51,159
want it to do squaring hopefully so this

00:20:48,039 --> 00:20:55,510
will then this exploit subject will be

00:20:51,159 --> 00:20:59,350
the film returned to the full variable

00:20:55,510 --> 00:21:01,539
when we say require foo so everything

00:20:59,350 --> 00:21:06,549
will be available that we put on the

00:21:01,539 --> 00:21:09,580
export subject and this print line here

00:21:06,549 --> 00:21:12,630
console.log loaded foo will be run as

00:21:09,580 --> 00:21:14,860
well when we include the full package

00:21:12,630 --> 00:21:17,769
and then we do exactly the same thing

00:21:14,860 --> 00:21:20,730
with the bar package we just expose some

00:21:17,769 --> 00:21:26,320
some variable we expose some function

00:21:20,730 --> 00:21:30,190
yeah we'll print something so if we run

00:21:26,320 --> 00:21:32,559
this what will happen is that the

00:21:30,190 --> 00:21:35,940
exploit subjects are returned from foo

00:21:32,559 --> 00:21:38,639
and bar respectively and then we print

00:21:35,940 --> 00:21:40,899
we want to prove the square of flow and

00:21:38,639 --> 00:21:43,899
you have the version of bar and the

00:21:40,899 --> 00:21:45,549
queue before so the river that things

00:21:43,899 --> 00:21:48,190
will be printed here is that first it

00:21:45,549 --> 00:21:49,990
will say little bit foo then it will

00:21:48,190 --> 00:21:52,169
print the square for then it will say

00:21:49,990 --> 00:21:55,269
loaded bar and then it will print the

00:21:52,169 --> 00:21:58,210
remaining two things so the code in

00:21:55,269 --> 00:22:00,669
these files are it's not executed until

00:21:58,210 --> 00:22:05,320
you run require and that's kind of the

00:22:00,669 --> 00:22:07,360
important thing and I'm just talking

00:22:05,320 --> 00:22:09,309
about files that you have locally of

00:22:07,360 --> 00:22:11,889
course but the point is to use this

00:22:09,309 --> 00:22:13,539
regarding other people's code of course

00:22:11,889 --> 00:22:18,340
so you include something else than what

00:22:13,539 --> 00:22:21,659
you've written yourself and something

00:22:18,340 --> 00:22:24,250
that we can do is to load code

00:22:21,659 --> 00:22:26,230
dynamically because the require function

00:22:24,250 --> 00:22:29,590
takes a string as an argument and that

00:22:26,230 --> 00:22:31,960
string is not like nothing is done with

00:22:29,590 --> 00:22:35,309
it at compile time it executes when it

00:22:31,960 --> 00:22:37,600
executes so we could toss a coin and

00:22:35,309 --> 00:22:42,039
randomize whether we want to load the

00:22:37,600 --> 00:22:44,169
fool or the bar package and then try to

00:22:42,039 --> 00:22:47,230
use the result that comes out of that

00:22:44,169 --> 00:22:49,690
and unlock the version of that package

00:22:47,230 --> 00:22:50,900
and since the full package we have

00:22:49,690 --> 00:22:54,260
before then come

00:22:50,900 --> 00:22:55,880
a version variable that will be print

00:22:54,260 --> 00:22:57,800
undefined if it loads the full package

00:22:55,880 --> 00:23:00,770
and if it loads the bar package it will

00:22:57,800 --> 00:23:04,520
print yeah whatever version we put in

00:23:00,770 --> 00:23:08,480
there so so you can do this it's kind of

00:23:04,520 --> 00:23:11,720
weird I am not sure if it's if it's

00:23:08,480 --> 00:23:14,000
something anyone has ever done for a

00:23:11,720 --> 00:23:19,520
good reason in production but it's

00:23:14,000 --> 00:23:22,640
possible so we're we're browserify comes

00:23:19,520 --> 00:23:25,760
in here is that browserify is a little

00:23:22,640 --> 00:23:28,760
tool that takes this code that you write

00:23:25,760 --> 00:23:33,470
in this way and adds kind of the glue to

00:23:28,760 --> 00:23:35,570
make this work in the browser so once

00:23:33,470 --> 00:23:38,000
again after you've written your code you

00:23:35,570 --> 00:23:41,570
have to we have to use a command line

00:23:38,000 --> 00:23:46,460
tool to say that I want to browser if I

00:23:41,570 --> 00:23:49,430
my main Jes file and I wanted to output

00:23:46,460 --> 00:23:51,560
a new file called bundle Jes and it will

00:23:49,430 --> 00:23:55,310
open the main.js file and it will figure

00:23:51,560 --> 00:23:58,070
out what other files it depends on and

00:23:55,310 --> 00:24:00,080
then produce this bundle file and then

00:23:58,070 --> 00:24:09,380
you can add the bundle file into your

00:24:00,080 --> 00:24:13,300
site just as with the with ender so like

00:24:09,380 --> 00:24:16,910
I said we can use this relative required

00:24:13,300 --> 00:24:20,060
to face that we have an heir own file

00:24:16,910 --> 00:24:22,250
system where we can say require and then

00:24:20,060 --> 00:24:25,460
the nail level module for example dumb

00:24:22,250 --> 00:24:27,230
ready which exposes a module that we

00:24:25,460 --> 00:24:30,590
have not written but is stored in the

00:24:27,230 --> 00:24:33,610
npm index and is put right into our

00:24:30,590 --> 00:24:37,510
program automatically so it's it's like

00:24:33,610 --> 00:24:41,450
ender in the way that you install

00:24:37,510 --> 00:24:43,370
packages by naming them but it doesn't

00:24:41,450 --> 00:24:45,260
put everything into the global scope and

00:24:43,370 --> 00:24:47,540
makes it available everywhere but it

00:24:45,260 --> 00:24:50,630
returns it to a particular variable and

00:24:47,540 --> 00:24:52,430
then we can use that in its own context

00:24:50,630 --> 00:24:55,460
you can include it in just one of your

00:24:52,430 --> 00:24:57,770
files you can include it inside a

00:24:55,460 --> 00:25:01,070
function I think I actually have an

00:24:57,770 --> 00:25:03,710
example of that yeah instead of just

00:25:01,070 --> 00:25:06,289
requiring a file

00:25:03,710 --> 00:25:08,690
everywhere you can put it inside of a

00:25:06,289 --> 00:25:10,460
function scope and just use it where you

00:25:08,690 --> 00:25:12,440
need to use it and then it won't clash

00:25:10,460 --> 00:25:16,490
with other things that your program

00:25:12,440 --> 00:25:18,710
depends on and it's it works really

00:25:16,490 --> 00:25:21,320
simply it's a really simple process

00:25:18,710 --> 00:25:23,090
actually you don't really have to

00:25:21,320 --> 00:25:25,190
understand it but the only thing it does

00:25:23,090 --> 00:25:27,950
is that it wraps all of the files that

00:25:25,190 --> 00:25:33,260
you've written that looks like regular

00:25:27,950 --> 00:25:35,980
global JavaScript code into it pastes it

00:25:33,260 --> 00:25:38,510
into a boilerplate that looks like this

00:25:35,980 --> 00:25:40,580
where the top is the name of the file

00:25:38,510 --> 00:25:43,490
and then it exposes a few variables that

00:25:40,580 --> 00:25:45,500
are the magic ones that enables this

00:25:43,490 --> 00:25:47,539
something like the exports we've already

00:25:45,500 --> 00:25:52,880
seen and they're required to to load the

00:25:47,539 --> 00:25:55,580
other files and of course require our

00:25:52,880 --> 00:25:57,440
browserify crates this require and this

00:25:55,580 --> 00:25:59,539
define function that's that's running

00:25:57,440 --> 00:26:01,370
here but you don't really have to know

00:25:59,539 --> 00:26:04,610
the details you can read read about it

00:26:01,370 --> 00:26:10,250
yourself and a cool thing is that this

00:26:04,610 --> 00:26:13,510
resolves nested dependencies so if I say

00:26:10,250 --> 00:26:17,510
if i use browserify and I love jquery

00:26:13,510 --> 00:26:20,600
then when I say require jquery i will

00:26:17,510 --> 00:26:22,820
get a variable back that is my jquery

00:26:20,600 --> 00:26:24,770
object and i don't have to put that on

00:26:22,820 --> 00:26:26,750
the dollar i can name it whatever i want

00:26:24,770 --> 00:26:31,130
to so if I have something else that uses

00:26:26,750 --> 00:26:33,320
the dollar it's totally okay and if I

00:26:31,130 --> 00:26:35,630
want to require one one version of

00:26:33,320 --> 00:26:37,460
jQuery one function and another version

00:26:35,630 --> 00:26:39,260
of jQuery in another function that's

00:26:37,460 --> 00:26:41,240
also completely okay because those

00:26:39,260 --> 00:26:43,190
functions are isolated and if I require

00:26:41,240 --> 00:26:47,450
two different j queries that works

00:26:43,190 --> 00:26:50,450
perfectly fine and even better if i use

00:26:47,450 --> 00:26:54,230
a plug-in or i use some code that

00:26:50,450 --> 00:26:57,770
requires some version of jQuery mpm will

00:26:54,230 --> 00:27:01,730
automatically get that dependency for me

00:26:57,770 --> 00:27:05,000
if I need for example maybe some of you

00:27:01,730 --> 00:27:08,090
have used the backbone for building like

00:27:05,000 --> 00:27:11,179
a client-side architecture MVC so and so

00:27:08,090 --> 00:27:14,419
on it uses underscore as a dependency

00:27:11,179 --> 00:27:17,030
and if if you're using a jquery plugin

00:27:14,419 --> 00:27:20,810
that obviously requires jquery to run

00:27:17,030 --> 00:27:22,370
so you just have to you just have to ask

00:27:20,810 --> 00:27:24,320
for anything you want and other

00:27:22,370 --> 00:27:26,210
dependencies that are needed to make

00:27:24,320 --> 00:27:28,910
that work are downloaded automatically

00:27:26,210 --> 00:27:31,670
and hidden inside of that you don't even

00:27:28,910 --> 00:27:33,380
know that its installed and therefore

00:27:31,670 --> 00:27:35,180
you can have different versions of

00:27:33,380 --> 00:27:39,040
jQuery at the same time supporting

00:27:35,180 --> 00:27:41,660
different different plugins that you are

00:27:39,040 --> 00:27:47,450
and you don't see any of that complexity

00:27:41,660 --> 00:27:49,700
it just works so in summary it kind of

00:27:47,450 --> 00:27:51,710
unites the way you think of server and

00:27:49,700 --> 00:27:53,540
client if if you work with node and

00:27:51,710 --> 00:27:55,490
javascript in that way you just do

00:27:53,540 --> 00:28:01,790
exactly the same way as you would if you

00:27:55,490 --> 00:28:04,460
were in the server environment and if we

00:28:01,790 --> 00:28:06,560
look at the pros and cons then it's kind

00:28:04,460 --> 00:28:09,620
of a very simple and reasonable model

00:28:06,560 --> 00:28:11,240
you just you just ask for things you

00:28:09,620 --> 00:28:13,250
want and if they are available in the

00:28:11,240 --> 00:28:15,500
global register it downloads them from

00:28:13,250 --> 00:28:17,900
their putting it in gets all the

00:28:15,500 --> 00:28:20,060
dependencies you only worry about the

00:28:17,900 --> 00:28:22,790
top layer you don't have to think about

00:28:20,060 --> 00:28:24,770
what's underneath and you get all the

00:28:22,790 --> 00:28:28,850
power and popularity of NPM which is the

00:28:24,770 --> 00:28:34,850
fastest growing package manager right

00:28:28,850 --> 00:28:37,450
now and a downside of course is that it

00:28:34,850 --> 00:28:43,880
still bundles everything into one file

00:28:37,450 --> 00:28:48,590
so you can't really control how to how

00:28:43,880 --> 00:28:51,320
to load these scripts on your site for

00:28:48,590 --> 00:28:53,450
example if you want different scripts on

00:28:51,320 --> 00:28:55,730
different pages on your site then you

00:28:53,450 --> 00:28:58,790
have to run browserify multiple times

00:28:55,730 --> 00:29:00,980
once for each site and you can do

00:28:58,790 --> 00:29:03,980
dynamic thing or you can do dynamic

00:29:00,980 --> 00:29:06,800
things but if you want to for example

00:29:03,980 --> 00:29:08,900
load something when someone not open a

00:29:06,800 --> 00:29:13,910
new page but clicks a particular button

00:29:08,900 --> 00:29:15,800
or or delete something or whatever if

00:29:13,910 --> 00:29:17,480
you want to load a new javascript file

00:29:15,800 --> 00:29:20,000
at that moment to use some some new

00:29:17,480 --> 00:29:24,020
features then you have to package that

00:29:20,000 --> 00:29:26,720
using browserify as well so you have to

00:29:24,020 --> 00:29:29,120
run browserify once for each little use

00:29:26,720 --> 00:29:30,400
case you have in your application if you

00:29:29,120 --> 00:29:32,080
can't just bundle everything

00:29:30,400 --> 00:29:36,370
into one file and you're satisfied with

00:29:32,080 --> 00:29:39,460
that so that brings us to the next one

00:29:36,370 --> 00:29:42,330
which is required jeaious which I

00:29:39,460 --> 00:29:45,550
suppose a few of you have heard about

00:29:42,330 --> 00:29:47,590
some hands to see up with your hands if

00:29:45,550 --> 00:29:53,490
you're hard about it or used it not that

00:29:47,590 --> 00:29:56,590
many ok so the goal we require Jas is

00:29:53,490 --> 00:29:58,960
kind of the same thing there they also

00:29:56,590 --> 00:30:03,070
want to solve this problem but they do

00:29:58,960 --> 00:30:05,440
it in a quite quite different way and an

00:30:03,070 --> 00:30:07,930
important difference compared to the MPN

00:30:05,440 --> 00:30:11,620
browserify solution is that required

00:30:07,930 --> 00:30:14,980
jess is not a package manager browserify

00:30:11,620 --> 00:30:17,470
is not a package manager either mmm p.m.

00:30:14,980 --> 00:30:18,880
is the package manager it has all the

00:30:17,470 --> 00:30:21,520
packages it knows all about the

00:30:18,880 --> 00:30:24,940
dependencies and so on verify is a tool

00:30:21,520 --> 00:30:26,740
to download these dependencies and put

00:30:24,940 --> 00:30:29,860
them together in a structured way that

00:30:26,740 --> 00:30:33,460
makes it usable for you so what

00:30:29,860 --> 00:30:35,470
requirejs is is similar to those who

00:30:33,460 --> 00:30:38,500
find it doesn't download anything for

00:30:35,470 --> 00:30:41,020
you all right well it's even if it's

00:30:38,500 --> 00:30:42,730
even more specific than browserify it

00:30:41,020 --> 00:30:44,740
doesn't download anything for you the

00:30:42,730 --> 00:30:47,020
same way browserify does it's not aware

00:30:44,740 --> 00:30:52,090
of any package managing system it's not

00:30:47,020 --> 00:30:55,150
aware of NPM it's just a way to to

00:30:52,090 --> 00:30:57,820
bundle files together in a more generic

00:30:55,150 --> 00:31:00,990
way than the other tools did so let's

00:30:57,820 --> 00:31:04,900
look quickly at how that works

00:31:00,990 --> 00:31:07,990
confusingly require also creates a

00:31:04,900 --> 00:31:09,880
global function called require just like

00:31:07,990 --> 00:31:11,800
buzzer if I did but it's not the same

00:31:09,880 --> 00:31:15,250
function this is a completely different

00:31:11,800 --> 00:31:19,450
one they just use the same name so

00:31:15,250 --> 00:31:21,520
competition looks this required function

00:31:19,450 --> 00:31:25,480
does not return a value it's

00:31:21,520 --> 00:31:27,670
asynchronous like like a using Ajax or

00:31:25,480 --> 00:31:32,170
set time mode or whatever it takes a

00:31:27,670 --> 00:31:34,780
function as a callback argument so here

00:31:32,170 --> 00:31:37,680
is that you give it an array of all the

00:31:34,780 --> 00:31:41,740
files or or packages that you want to

00:31:37,680 --> 00:31:44,160
include and then this function will

00:31:41,740 --> 00:31:47,290
return objects

00:31:44,160 --> 00:31:49,990
containing those those files or her

00:31:47,290 --> 00:31:52,660
packages so that you can use them inside

00:31:49,990 --> 00:31:55,690
of this function doesn't return it in

00:31:52,660 --> 00:31:59,230
the normal way and obviously there's a

00:31:55,690 --> 00:32:04,059
big difference here because this enables

00:31:59,230 --> 00:32:06,340
us to to delay the loading of this this

00:32:04,059 --> 00:32:08,350
package we don't have to return it so if

00:32:06,340 --> 00:32:12,429
we have to wait a while if it has to be

00:32:08,350 --> 00:32:14,350
downloaded like on the fly this would

00:32:12,429 --> 00:32:18,340
not block the program in the same way as

00:32:14,350 --> 00:32:20,530
browser if I would have done because

00:32:18,340 --> 00:32:22,090
JavaScript only has one thread and if a

00:32:20,530 --> 00:32:23,620
function takes a long time to return we

00:32:22,090 --> 00:32:25,450
can't do anything else so that's not

00:32:23,620 --> 00:32:29,890
okay but in this case the program could

00:32:25,450 --> 00:32:34,260
continue running an idea is exactly the

00:32:29,890 --> 00:32:38,110
same as in in browser if I you just

00:32:34,260 --> 00:32:39,880
build up an object that exposes all the

00:32:38,110 --> 00:32:42,429
functionality that you want to expose

00:32:39,880 --> 00:32:44,679
from your package and you return it but

00:32:42,429 --> 00:32:49,330
obviously it doesn't return immediately

00:32:44,679 --> 00:32:51,309
like I said instead you just you return

00:32:49,330 --> 00:32:53,410
it from this function inside here so we

00:32:51,309 --> 00:32:57,809
can expose a function called through and

00:32:53,410 --> 00:33:00,490
the variable called bar for example and

00:32:57,809 --> 00:33:03,700
instead of writing the dependencies this

00:33:00,490 --> 00:33:06,940
way where we say that I want I want to

00:33:03,700 --> 00:33:09,370
depend on object 1 and object to and

00:33:06,940 --> 00:33:12,250
then have them pass them to this

00:33:09,370 --> 00:33:15,820
function I can actually use the the same

00:33:12,250 --> 00:33:19,000
syntax as in the common areas like

00:33:15,820 --> 00:33:21,160
alternative that browserify uses we can

00:33:19,000 --> 00:33:22,720
just say require and then the name of

00:33:21,160 --> 00:33:25,990
the dependency and and get it back

00:33:22,720 --> 00:33:28,660
immediately if we don't pass the array

00:33:25,990 --> 00:33:31,000
and give a require argument instead and

00:33:28,660 --> 00:33:32,920
this is just syntactic sugar it does

00:33:31,000 --> 00:33:35,140
exactly the same thing as what you saw

00:33:32,920 --> 00:33:39,100
before it's still a synchronous it's

00:33:35,140 --> 00:33:41,230
still it still works exactly this way

00:33:39,100 --> 00:33:44,140
it's just a different syntax for

00:33:41,230 --> 00:33:48,040
specifying these names that might look

00:33:44,140 --> 00:33:50,050
more familiar but the the difference of

00:33:48,040 --> 00:33:54,700
course is that this is statically

00:33:50,050 --> 00:33:57,800
analyzed required j/s looks through your

00:33:54,700 --> 00:34:02,340
source code and reads on these require

00:33:57,800 --> 00:34:07,129
statements to know what it should be

00:34:02,340 --> 00:34:11,100
loading when this function starts so so

00:34:07,129 --> 00:34:13,290
having these dynamic dependencies like

00:34:11,100 --> 00:34:15,270
we did before with the time costs and

00:34:13,290 --> 00:34:21,240
unloading something arbitrarily that

00:34:15,270 --> 00:34:23,669
won't work here because they're the

00:34:21,240 --> 00:34:27,600
packages will start to load before the

00:34:23,669 --> 00:34:30,000
code is run like here we start loading

00:34:27,600 --> 00:34:32,399
dependency one dependency two before

00:34:30,000 --> 00:34:35,720
this function executes so they are

00:34:32,399 --> 00:34:37,980
passed into the function as arguments

00:34:35,720 --> 00:34:40,200
that's not really a problem because no

00:34:37,980 --> 00:34:45,990
one does that anyway but just understand

00:34:40,200 --> 00:34:48,600
the kind of limitation so the difference

00:34:45,990 --> 00:34:52,110
here is that the level of our modules is

00:34:48,600 --> 00:34:55,730
lazy it doesn't happen as we write it

00:34:52,110 --> 00:34:59,010
and we then have to wait for it but it

00:34:55,730 --> 00:35:01,650
it starts when we write that we want to

00:34:59,010 --> 00:35:04,590
use them but it doesn't continue running

00:35:01,650 --> 00:35:07,770
the piece of code that uses them until

00:35:04,590 --> 00:35:09,960
they're ready and like I said also

00:35:07,770 --> 00:35:13,200
there's no package manager coupling it

00:35:09,960 --> 00:35:16,710
doesn't depend on a particular system to

00:35:13,200 --> 00:35:18,990
fetch these these packages but you can

00:35:16,710 --> 00:35:26,970
add you can use any package manager

00:35:18,990 --> 00:35:32,810
that's compatible with require and so if

00:35:26,970 --> 00:35:36,750
we in this case once too we want to load

00:35:32,810 --> 00:35:38,460
some new code when we click a particular

00:35:36,750 --> 00:35:40,260
button or someone we don't move to a new

00:35:38,460 --> 00:35:42,150
page so we don't reload the page

00:35:40,260 --> 00:35:45,840
automatically but we just want some new

00:35:42,150 --> 00:35:51,930
code to be usable then this would be a

00:35:45,840 --> 00:35:54,110
perfect approach because yeah we it will

00:35:51,930 --> 00:35:57,540
be able to load that on demand like

00:35:54,110 --> 00:36:00,570
exactly when that code executes Sun not

00:35:57,540 --> 00:36:04,590
block and it automatically generates

00:36:00,570 --> 00:36:08,480
like which it splits your program up to

00:36:04,590 --> 00:36:08,480
different files that you can load

00:36:08,710 --> 00:36:15,529
separately so this let me go back this

00:36:12,680 --> 00:36:17,869
one that depends on one and two that can

00:36:15,529 --> 00:36:20,900
be bundled into one file so that starts

00:36:17,869 --> 00:36:24,710
loading when this when this code is run

00:36:20,900 --> 00:36:26,539
but you don't have to load that file up

00:36:24,710 --> 00:36:29,960
immediately in your program you can

00:36:26,539 --> 00:36:31,400
start loading it when you need it but

00:36:29,960 --> 00:36:35,390
that's that's what will happen

00:36:31,400 --> 00:36:38,269
automatically the downside to this

00:36:35,390 --> 00:36:40,099
compared to browserify is that while

00:36:38,269 --> 00:36:43,069
browserify the blow through fine model

00:36:40,099 --> 00:36:48,410
is is simple and easy to understand and

00:36:43,069 --> 00:36:51,049
it's synchronous and so on the price

00:36:48,410 --> 00:36:54,079
that you're paying for doing things

00:36:51,049 --> 00:36:56,839
asynchronously is is as as usual when

00:36:54,079 --> 00:36:59,089
we're doing asynchronous things that it

00:36:56,839 --> 00:37:02,480
suddenly starts to get hard to

00:36:59,089 --> 00:37:05,480
understand what's going on let's loaded

00:37:02,480 --> 00:37:09,440
when and how do i optimize the order of

00:37:05,480 --> 00:37:13,819
when these things happen like how big

00:37:09,440 --> 00:37:17,150
chunks should I split my application

00:37:13,819 --> 00:37:18,950
code into to optimize performance one

00:37:17,150 --> 00:37:21,289
huge bundle well that takes a long time

00:37:18,950 --> 00:37:23,900
to load when the app starts so that's

00:37:21,289 --> 00:37:27,230
bad but let's and files to load in

00:37:23,900 --> 00:37:28,970
parallel and load all of the time when I

00:37:27,230 --> 00:37:31,160
move around in my application that's

00:37:28,970 --> 00:37:34,009
that's not the best solution either you

00:37:31,160 --> 00:37:35,720
have to find the middle way and when

00:37:34,009 --> 00:37:38,319
browserify doesn't allow you to do that

00:37:35,720 --> 00:37:41,509
but always bunnies it into one thing

00:37:38,319 --> 00:37:43,549
requirejs allows you to do it but it

00:37:41,509 --> 00:37:45,380
doesn't really help you do it you have

00:37:43,549 --> 00:37:53,509
to figure out the best way to go about

00:37:45,380 --> 00:37:55,309
it yourself so moving on if you have any

00:37:53,509 --> 00:37:57,049
questions by the way you can just yell

00:37:55,309 --> 00:38:04,220
them out but otherwise will you do a

00:37:57,049 --> 00:38:06,680
session at the end so now now lastly I

00:38:04,220 --> 00:38:10,279
talked about two different ways to in

00:38:06,680 --> 00:38:12,289
your code organized what should below

00:38:10,279 --> 00:38:15,049
that when and how things depend on each

00:38:12,289 --> 00:38:18,980
other if we look at the other part of

00:38:15,049 --> 00:38:21,660
this which is actually actually storing

00:38:18,980 --> 00:38:24,510
and retrieving these packages

00:38:21,660 --> 00:38:27,270
our reusable pieces of code we can look

00:38:24,510 --> 00:38:29,490
at this thing called gem which is a

00:38:27,270 --> 00:38:34,369
package manager for JavaScript just like

00:38:29,490 --> 00:38:37,140
mpm but unlike other repositories

00:38:34,369 --> 00:38:41,099
they're talking about NPM of course we

00:38:37,140 --> 00:38:44,400
put the browser first and this is not

00:38:41,099 --> 00:38:46,440
going to be very very different from

00:38:44,400 --> 00:38:48,210
what you've seen before it's exactly the

00:38:46,440 --> 00:38:50,069
same thing where the new program this

00:38:48,210 --> 00:38:52,619
time it's called jam and we say jam in

00:38:50,069 --> 00:38:58,049
stone jquery and this instance jquery

00:38:52,619 --> 00:39:00,119
onto your current project but it has no

00:38:58,049 --> 00:39:02,849
way to load them to integrate them into

00:39:00,119 --> 00:39:06,630
your javascript code so you have to use

00:39:02,849 --> 00:39:10,349
some some dependency management system

00:39:06,630 --> 00:39:13,470
for module loader on top of that for

00:39:10,349 --> 00:39:15,599
example require and if you if you've

00:39:13,470 --> 00:39:17,400
specified that you want to use gem and

00:39:15,599 --> 00:39:20,069
require together if we create a file

00:39:17,400 --> 00:39:22,920
called yeah in this case gem / required

00:39:20,069 --> 00:39:28,980
ojs that you can load so this is the

00:39:22,920 --> 00:39:31,200
symbiosis between these two and yeah

00:39:28,980 --> 00:39:33,029
since it's used with required jas it

00:39:31,200 --> 00:39:35,299
looks exactly the same as the thing we

00:39:33,029 --> 00:39:37,890
saw before we can say required jquery

00:39:35,299 --> 00:39:39,630
the function gets back the jquery object

00:39:37,890 --> 00:39:43,109
and then we can start using it right

00:39:39,630 --> 00:39:45,470
there and we can publish packages the

00:39:43,109 --> 00:39:48,720
same way pretty much as we did with NPM

00:39:45,470 --> 00:39:50,730
but the file looks slightly different

00:39:48,720 --> 00:39:53,670
and it has a different name that we

00:39:50,730 --> 00:39:56,010
still specify like what's this piece of

00:39:53,670 --> 00:39:57,960
code that I've written called what's the

00:39:56,010 --> 00:40:04,529
current version what other dependencies

00:39:57,960 --> 00:40:06,240
do I have and and so on and you can do

00:40:04,529 --> 00:40:07,680
it at the same time this is actually an

00:40:06,240 --> 00:40:11,690
example of doing it at the same time

00:40:07,680 --> 00:40:16,529
where the dependencies object up here is

00:40:11,690 --> 00:40:19,109
for EM p.m. and the jam dependency is

00:40:16,529 --> 00:40:24,180
down there are 44 jam if they for some

00:40:19,109 --> 00:40:27,210
reason would be different so yeah gem

00:40:24,180 --> 00:40:30,029
compared to mpm is is targeted at

00:40:27,210 --> 00:40:33,550
browsers mpm has lots of packages that

00:40:30,029 --> 00:40:36,720
depend on access to the file system

00:40:33,550 --> 00:40:40,330
web server stuff other protocols like

00:40:36,720 --> 00:40:42,130
TCP and so on that you can't really use

00:40:40,330 --> 00:40:45,910
in the browser you can install packages

00:40:42,130 --> 00:40:47,380
that are not usable while gem is just

00:40:45,910 --> 00:40:51,400
for the browser it contains browser

00:40:47,380 --> 00:40:54,660
stuff only and the downside is that the

00:40:51,400 --> 00:40:59,350
index is definitely not as large as NPM

00:40:54,660 --> 00:41:01,120
it's the little brother and it adds some

00:40:59,350 --> 00:41:03,520
packaging overhead if you want to work

00:41:01,120 --> 00:41:05,200
with both systems and if you want to be

00:41:03,520 --> 00:41:06,940
compatible with both everyone who

00:41:05,200 --> 00:41:11,550
creates a package suddenly has to

00:41:06,940 --> 00:41:17,110
maintain twice as much complexity and

00:41:11,550 --> 00:41:21,160
integration so there's an even simpler

00:41:17,110 --> 00:41:24,510
or more i should say less abstract

00:41:21,160 --> 00:41:27,310
version of these that's called bauer

00:41:24,510 --> 00:41:30,430
which has gained a lot of traction like

00:41:27,310 --> 00:41:34,210
the last year or so it's created by

00:41:30,430 --> 00:41:38,350
Twitter and that as well as a package

00:41:34,210 --> 00:41:40,330
manager like mpm and like jam but what

00:41:38,350 --> 00:41:43,900
they're trying to achieve is to equip

00:41:40,330 --> 00:41:45,730
them the dimeric an opinionated solution

00:41:43,900 --> 00:41:48,850
to the problem of front-end package

00:41:45,730 --> 00:41:51,220
management so they want to be kind of

00:41:48,850 --> 00:41:56,590
the platform for all the other tools to

00:41:51,220 --> 00:42:00,750
to build upon and it's actually Deb

00:41:56,590 --> 00:42:07,060
simple because borrow does not store

00:42:00,750 --> 00:42:09,250
store files it just it's just like it's

00:42:07,060 --> 00:42:13,900
more like a name server or something it

00:42:09,250 --> 00:42:16,270
Maps named to whatever yeah you want

00:42:13,900 --> 00:42:19,390
those names to me so you can use

00:42:16,270 --> 00:42:22,900
borrowed to say install jquery or you

00:42:19,390 --> 00:42:26,650
can in turn a get URL you can install

00:42:22,900 --> 00:42:29,800
your relative a jealous file you can

00:42:26,650 --> 00:42:32,260
install something that you have locally

00:42:29,800 --> 00:42:34,420
whatever can be installed them and when

00:42:32,260 --> 00:42:37,210
you say like in the first one borrower

00:42:34,420 --> 00:42:40,420
on jquery what the best is the same

00:42:37,210 --> 00:42:43,120
thing as in the three next lines it just

00:42:40,420 --> 00:42:45,430
installed some file somewhere and the

00:42:43,120 --> 00:42:49,359
people who have created jquery have

00:42:45,430 --> 00:42:51,760
have have submitted to borrow what

00:42:49,359 --> 00:42:55,690
jQuery points to what file does that

00:42:51,760 --> 00:43:02,290
mean so it's pretty much just a URL as

00:42:55,690 --> 00:43:05,140
well but masked behind the name so just

00:43:02,290 --> 00:43:07,930
as with others you can create a file you

00:43:05,140 --> 00:43:11,829
can say my project I want these

00:43:07,930 --> 00:43:13,690
different packages I want to smoke I

00:43:11,829 --> 00:43:15,220
want to use angular I want to select to

00:43:13,690 --> 00:43:17,920
go I want to use bootstrap I want to use

00:43:15,220 --> 00:43:21,579
jQuery and then you do a power in style

00:43:17,920 --> 00:43:22,869
same way as with other tools and all of

00:43:21,579 --> 00:43:26,520
those are installed and readily

00:43:22,869 --> 00:43:29,050
available for you to use except that

00:43:26,520 --> 00:43:31,690
there is no system here to load these

00:43:29,050 --> 00:43:33,369
files and so on this puts puts on the

00:43:31,690 --> 00:43:35,890
files that you wanted into your file

00:43:33,369 --> 00:43:37,660
system and then you you have to load

00:43:35,890 --> 00:43:40,359
them the old-fashioned way using a

00:43:37,660 --> 00:43:45,069
script tag pointing to that particular

00:43:40,359 --> 00:43:50,260
file so the idea that bar has is that

00:43:45,069 --> 00:43:53,589
the other tools there the jam jam

00:43:50,260 --> 00:43:56,280
package manager or require and so on can

00:43:53,589 --> 00:43:59,910
be built to support power to use power

00:43:56,280 --> 00:44:03,130
under the hood to fetch things but then

00:43:59,910 --> 00:44:10,920
supply the more abstract way of of using

00:44:03,130 --> 00:44:14,290
them so the difference here is that it's

00:44:10,920 --> 00:44:17,380
this is like super simple borrow is just

00:44:14,290 --> 00:44:19,180
one liners on on your command line and

00:44:17,380 --> 00:44:22,900
you fetch the files and it looks as if

00:44:19,180 --> 00:44:24,730
you had downloaded it yourself but you

00:44:22,900 --> 00:44:26,559
don't have to search the web and like

00:44:24,730 --> 00:44:31,329
figure out what versions you need and so

00:44:26,559 --> 00:44:32,680
on at time you you download you write

00:44:31,329 --> 00:44:34,599
these fine lines that say on the

00:44:32,680 --> 00:44:38,770
versions at once and it's all there

00:44:34,599 --> 00:44:43,630
specif specified in a structured way and

00:44:38,770 --> 00:44:47,079
it's very flexible you can you can can

00:44:43,630 --> 00:44:50,770
use it or is really supposed to be able

00:44:47,079 --> 00:44:53,200
to use it together with data tools and

00:44:50,770 --> 00:44:55,299
enter downsides of course is that using

00:44:53,200 --> 00:44:58,030
just power doesn't really do a whole lot

00:44:55,299 --> 00:44:59,140
for you it doesn't take take it the

00:44:58,030 --> 00:45:02,140
whole way it

00:44:59,140 --> 00:45:04,720
just downloads files for you but it's

00:45:02,140 --> 00:45:08,050
it's add very simple to get started with

00:45:04,720 --> 00:45:10,300
if you've never used any of these to

00:45:08,050 --> 00:45:16,480
just see kind of the idea and what it's

00:45:10,300 --> 00:45:19,720
all about so if we try to draw some

00:45:16,480 --> 00:45:23,260
conclusions from this like very very

00:45:19,720 --> 00:45:25,120
brief of overviews I definitely had not

00:45:23,260 --> 00:45:28,420
cover covered exactly how to use

00:45:25,120 --> 00:45:30,460
everything and like how they work but

00:45:28,420 --> 00:45:34,720
now you know of some of them and can

00:45:30,460 --> 00:45:36,760
start looking but just as as like

00:45:34,720 --> 00:45:40,810
templating engines in the JavaScript

00:45:36,760 --> 00:45:43,810
world is is like a weed there are so

00:45:40,810 --> 00:45:46,480
many I I guess a lot of you have seen

00:45:43,810 --> 00:45:48,670
low teens comparison when they wanted to

00:45:46,480 --> 00:45:53,080
choose a template engine for their new

00:45:48,670 --> 00:45:55,570
site and they did this this study of 38

00:45:53,080 --> 00:45:58,390
different templating engines in order to

00:45:55,570 --> 00:46:00,310
find the best one in 38 solutions to

00:45:58,390 --> 00:46:04,060
exactly the same problem that's like

00:46:00,310 --> 00:46:07,330
crazy and frameworks are like a weed

00:46:04,060 --> 00:46:10,090
these days as well right jquery and less

00:46:07,330 --> 00:46:11,740
some backbone and knock out and yeah

00:46:10,090 --> 00:46:15,430
everything well frameworks for

00:46:11,740 --> 00:46:17,080
everything so well when javascript is

00:46:15,430 --> 00:46:18,910
great because it has so many different

00:46:17,080 --> 00:46:21,580
environments and different solutions

00:46:18,910 --> 00:46:23,830
javascript is also hard for the same

00:46:21,580 --> 00:46:25,960
reason and that applies to this package

00:46:23,830 --> 00:46:28,320
management and dependency management as

00:46:25,960 --> 00:46:31,210
well like which one should i be using

00:46:28,320 --> 00:46:35,020
and which one is right for my use case

00:46:31,210 --> 00:46:43,510
and yeah where where should I start

00:46:35,020 --> 00:46:45,670
that's the problem and I think we what

00:46:43,510 --> 00:46:50,590
we should be more like this and just

00:46:45,670 --> 00:46:52,840
like embracing embracing the fact that

00:46:50,590 --> 00:46:54,550
we can't blow everything up front we

00:46:52,840 --> 00:46:56,860
just have to start using something and

00:46:54,550 --> 00:46:59,380
see where it takes us and so on and

00:46:56,860 --> 00:47:00,910
developers are more like this I want to

00:46:59,380 --> 00:47:02,500
have the coolest tools I want to do

00:47:00,910 --> 00:47:06,450
everything the most awesome way right

00:47:02,500 --> 00:47:06,450
away and everything should be awesome

00:47:06,640 --> 00:47:13,390
but let's let's just do a quick review

00:47:10,210 --> 00:47:16,990
of some use cases for for when they

00:47:13,390 --> 00:47:20,470
would be applicable so I would say that

00:47:16,990 --> 00:47:22,690
if you have a smell app and you don't

00:47:20,470 --> 00:47:25,079
reload a lot maybe you're writing a like

00:47:22,690 --> 00:47:28,690
a single page application or such and

00:47:25,079 --> 00:47:31,750
maybe you'll note jas fan any of these

00:47:28,690 --> 00:47:35,559
then MP mm browserify is a really good

00:47:31,750 --> 00:47:38,230
way to go while if you have a huge

00:47:35,559 --> 00:47:40,599
application that's really hard to get a

00:47:38,230 --> 00:47:44,230
grasp on you definitely don't load all

00:47:40,599 --> 00:47:48,369
of the code up front and it's really

00:47:44,230 --> 00:47:50,769
hard to optimize that by hand then look

00:47:48,369 --> 00:47:52,930
at gem and requirejs instead because

00:47:50,769 --> 00:47:56,529
they are designed to tackle that

00:47:52,930 --> 00:47:59,769
particular use case and if you're more

00:47:56,529 --> 00:48:02,049
like I want to take some baby steps I

00:47:59,769 --> 00:48:04,420
just want to start scratching the

00:48:02,049 --> 00:48:08,049
surface of this thing or maybe you're

00:48:04,420 --> 00:48:10,420
you're actually having an idea of an

00:48:08,049 --> 00:48:13,420
even better way to do all of this then

00:48:10,420 --> 00:48:15,160
what's already out there then Bauer is

00:48:13,420 --> 00:48:18,099
really good because then you don't have

00:48:15,160 --> 00:48:20,049
to start from the absolute bottom where

00:48:18,099 --> 00:48:22,769
we just download sources from all over

00:48:20,049 --> 00:48:24,759
the internet but you can reuse something

00:48:22,769 --> 00:48:27,039
and if there's something you should

00:48:24,759 --> 00:48:29,589
never do for for any reason because it

00:48:27,039 --> 00:48:33,700
just doesn't make sense is to use

00:48:29,589 --> 00:48:36,519
something like the ender library it was

00:48:33,700 --> 00:48:38,500
written way back before the rest of

00:48:36,519 --> 00:48:41,140
these ideas emerged and there's not

00:48:38,500 --> 00:48:43,960
really any reason to use it anymore but

00:48:41,140 --> 00:48:46,150
I would say that the most important

00:48:43,960 --> 00:48:48,849
thing is to just do your homework use

00:48:46,150 --> 00:48:52,779
your use your brain think about what is

00:48:48,849 --> 00:48:55,390
it that I want and go with that and just

00:48:52,779 --> 00:49:00,400
whatever you do just stop piling things

00:48:55,390 --> 00:49:03,329
on top of each other that's it for me

00:49:00,400 --> 00:49:03,329
thank you

00:49:08,449 --> 00:49:16,789
so that's a rush through different

00:49:12,499 --> 00:49:16,789
technologies any questions

00:49:22,500 --> 00:49:35,700
everyone is just keen to try something

00:49:25,710 --> 00:49:38,820
out get their hands dirty I don't have a

00:49:35,700 --> 00:49:42,390
live example with Drupal but I have live

00:49:38,820 --> 00:49:46,170
examples with all the rest and I can I

00:49:42,390 --> 00:49:49,400
can tweet some links so if you there's

00:49:46,170 --> 00:49:57,480
my my twitter handle follow it and i'll

00:49:49,400 --> 00:50:00,150
let you know and they're all compatible

00:49:57,480 --> 00:50:02,520
with all back end frameworks they're not

00:50:00,150 --> 00:50:09,570
coupled in any way with note or anything

00:50:02,520 --> 00:50:12,150
else so Drupal is perfectly fine okay if

00:50:09,570 --> 00:50:14,300
there's nothing else then thank you so

00:50:12,150 --> 00:50:14,300

YouTube URL: https://www.youtube.com/watch?v=0i36LfgT8Os


