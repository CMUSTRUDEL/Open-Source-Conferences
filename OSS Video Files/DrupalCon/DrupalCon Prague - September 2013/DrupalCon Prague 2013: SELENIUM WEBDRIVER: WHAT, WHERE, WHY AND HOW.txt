Title: DrupalCon Prague 2013: SELENIUM WEBDRIVER: WHAT, WHERE, WHY AND HOW
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	Selenium has been talked about in the Drupal circles for sometime now. It offers great promise in that it is a way to ensure all features of a site work across browsers and a way to hedge against regressions.

OVERVIEW

Like any great powerful tool though, sometimes it helps to know "Where do I start?" and "How are others using it?". At The Economist, we use Selenium in our Continuous Integration environment. We have had our fair share ( more than I would like to admit :) ) of headaches with Selenium. I personally have worked with Selenium in both PHP and Java environments. I also used Selenium against Drupal sites and websites in general, so I hope to cover this topic not only specifically from a PHP/Drupal perspective, but also from a general framework and programming perspective also.

Further, although I hope to cover Selenium mostly in this talk, some of the talk, for example scaling out your testing environment, can be applied to your testing framework of choice ( e.g. Windmill, etc. ).

WHAT WILL WE LEARN/COVER?

What is and is NOT Selenium?
What is Webdriver and should I use it?
Making an API to help your Selenium framework ( e.g. testdata module )
Why are my tests unstable ( how to write better Selenium tests, patterns, Page Objects, etc. )
Great, I have tests, but I have hundreds of them and it takes 2+ hours to run, how do I scale? ( Selenium Grid, and creating a webapp copy/cloud servers )
What are some 3rd party sites and tools to help me?
If time permits, we may go over migrating from SeleniumRC to Webdriver
TARGET AUDIENCE

I hope to start basic, but I will go into some advanced topics such as Virtual Servers ( Xen/VMWare), VM tasks such as snapshots-backups, Puppet [briefly], Selenium Grid, and fully integrating into a CI. One should have knowledge of a CI and perhaps have worked in one and one should have a basic understanding of Selenium and Selenium Grid. I will try and briefly summarize each tool however during the talk.
Captions: 
	00:00:00,000 --> 00:00:03,720
24 so everything gets kind of scrunched

00:00:02,340 --> 00:00:12,120
down so it'll be some kind of flickering

00:00:03,720 --> 00:00:17,570
back and forth so make sure we got

00:00:12,120 --> 00:00:17,570
everything set up over there dump them

00:00:20,689 --> 00:00:28,199
all right I know it's kind of small I

00:00:23,010 --> 00:00:29,720
hope everyone can see this so this is

00:00:28,199 --> 00:00:33,239
the basic test we're going to go over

00:00:29,720 --> 00:00:36,149
I'm we're using PHP unit and PHP unit

00:00:33,239 --> 00:00:38,640
has a plugin for selenium and for those

00:00:36,149 --> 00:00:41,640
who aren't familiar with it I'm just

00:00:38,640 --> 00:00:43,920
going to quickly go go through this so

00:00:41,640 --> 00:00:46,289
I'm extending a webdriver test case

00:00:43,920 --> 00:00:48,780
which is just a general object pattern

00:00:46,289 --> 00:00:58,109
of inheritance and this then obviously

00:00:48,780 --> 00:00:59,910
then extends a Drupal selenium test case

00:00:58,109 --> 00:01:01,800
which is just another general object

00:00:59,910 --> 00:01:06,830
kind of a helper object that I made and

00:01:01,800 --> 00:01:06,830
then this I can open that up

00:01:10,390 --> 00:01:16,330
this the next sentence phpunit extension

00:01:13,450 --> 00:01:18,610
selenium test case and this is PHP PHP

00:01:16,330 --> 00:01:20,979
units plugin that does the selenium

00:01:18,610 --> 00:01:24,479
testing for you and like I said it's

00:01:20,979 --> 00:01:26,530
since it's open source we can go and

00:01:24,479 --> 00:01:31,750
just kind of give anyone who's not

00:01:26,530 --> 00:01:34,320
familiar with an idea so I'm just hoping

00:01:31,750 --> 00:01:34,320
it this way

00:01:42,960 --> 00:01:49,740
and inside of this PHP you can see it's

00:01:45,869 --> 00:01:52,500
phpunit selenium and then inside of this

00:01:49,740 --> 00:01:54,240
class is this function to command and

00:01:52,500 --> 00:01:55,560
all i want to show you here is that it

00:01:54,240 --> 00:01:59,100
takes these commands that we're sending

00:01:55,560 --> 00:02:01,320
it for example open wait for element

00:01:59,100 --> 00:02:02,909
present takes command send it to the

00:02:01,320 --> 00:02:05,700
selenium server that's waiting at that

00:02:02,909 --> 00:02:07,740
endpoint and just use this good old curl

00:02:05,700 --> 00:02:09,300
since dhcp command gets information back

00:02:07,740 --> 00:02:10,709
and that's the workflow that we're

00:02:09,300 --> 00:02:15,650
working with so i'm just going to run a

00:02:10,709 --> 00:02:15,650
simple workflow here or a simple test

00:02:23,550 --> 00:02:28,260
and the first thing I'm going to do is

00:02:25,290 --> 00:02:30,990
I'm going to spin up the selenium server

00:02:28,260 --> 00:02:32,700
itself on my local machine so you can

00:02:30,990 --> 00:02:35,190
see I have this jar file here a selenium

00:02:32,700 --> 00:02:39,800
server which you just download from the

00:02:35,190 --> 00:02:42,300
selenium site going to run it standalone

00:02:39,800 --> 00:02:44,640
you just run it like a simple jar file

00:02:42,300 --> 00:02:47,040
you'll see it's launched the selenium

00:02:44,640 --> 00:02:50,100
server and if I go to this port you'll

00:02:47,040 --> 00:02:53,760
see it started on port 44 for you can

00:02:50,100 --> 00:02:55,020
see that it's running and don't worry

00:02:53,760 --> 00:02:59,460
about the air is because we didn't send

00:02:55,020 --> 00:03:05,960
the right information and then I'm just

00:02:59,460 --> 00:03:05,960
going to run this simple login test I

00:03:06,380 --> 00:03:10,380
put some sleep send because it goes

00:03:08,550 --> 00:03:18,270
really fast so I tried to slow it down a

00:03:10,380 --> 00:03:20,300
little bit and actually apologized for

00:03:18,270 --> 00:03:20,300
that

00:03:24,290 --> 00:03:29,640
so these two lines are a way I switch

00:03:27,750 --> 00:03:31,500
between webdriver and selenium so late

00:03:29,640 --> 00:03:32,910
in the talk will go through that but

00:03:31,500 --> 00:03:35,580
what I want to want to run that test

00:03:32,910 --> 00:03:36,990
again to show one thing and this will

00:03:35,580 --> 00:03:39,270
help when we go to the difference

00:03:36,990 --> 00:03:42,210
between selenium and our selenium one

00:03:39,270 --> 00:03:45,060
and webdriver so you'll see we have this

00:03:42,210 --> 00:03:52,440
control window up here and in the bottom

00:03:45,060 --> 00:03:56,310
we actually have the actual test run so

00:03:52,440 --> 00:03:57,450
plain and simple and I think we all

00:03:56,310 --> 00:04:03,080
understand that are there any questions

00:03:57,450 --> 00:04:03,080
so far we're all good okay

00:04:09,480 --> 00:04:13,390
alright so we did our simple tests so

00:04:12,489 --> 00:04:17,079
now we kind of want to talk about

00:04:13,390 --> 00:04:19,269
webdriver so webdriver is selenium to I

00:04:17,079 --> 00:04:20,859
if you if you want we can go into the

00:04:19,269 --> 00:04:23,800
history but it was a separate project

00:04:20,859 --> 00:04:27,120
but webdriver selenium two and one of

00:04:23,800 --> 00:04:29,950
the main things that will that was

00:04:27,120 --> 00:04:33,520
that's kind of important about it is

00:04:29,950 --> 00:04:34,900
that it's kind of they want to drive it

00:04:33,520 --> 00:04:36,910
from the users point of view they don't

00:04:34,900 --> 00:04:38,500
want to drive it as a browser so to

00:04:36,910 --> 00:04:41,169
speak and as I mentioned before they

00:04:38,500 --> 00:04:44,650
drive it by the by the browser's native

00:04:41,169 --> 00:04:45,700
API so for example Internet Explorer if

00:04:44,650 --> 00:04:47,200
you were going to write something for

00:04:45,700 --> 00:04:49,780
internet explorer in the most efficient

00:04:47,200 --> 00:04:52,570
way you'd probably fire up visual studio

00:04:49,780 --> 00:04:55,320
and probably program in C++ because this

00:04:52,570 --> 00:04:59,050
automation bindings are in C++ and

00:04:55,320 --> 00:05:01,060
firefox has I think xpcom which is its

00:04:59,050 --> 00:05:03,639
kind of plug-in device that's native to

00:05:01,060 --> 00:05:06,310
it and that's what webdriver does its it

00:05:03,639 --> 00:05:07,960
drives a browser by its native API so

00:05:06,310 --> 00:05:09,790
when you for example even though it's

00:05:07,960 --> 00:05:11,560
written in java java has something

00:05:09,790 --> 00:05:16,120
called J&I which is java native

00:05:11,560 --> 00:05:19,440
interface which allows you to run c++

00:05:16,120 --> 00:05:22,150
almost as if you're you know natively

00:05:19,440 --> 00:05:25,080
working with it and so that's that's the

00:05:22,150 --> 00:05:28,060
way they wrote what our web drivers

00:05:25,080 --> 00:05:30,820
architecture is set up it's also a

00:05:28,060 --> 00:05:32,140
actual standard you can go in google w3c

00:05:30,820 --> 00:05:34,180
web driver and they're trying to make it

00:05:32,140 --> 00:05:36,460
a standard so that other things can

00:05:34,180 --> 00:05:38,169
interface with it so I want to go back

00:05:36,460 --> 00:05:40,000
to I don't wanna get too bogged down in

00:05:38,169 --> 00:05:42,430
the details of architecture that one

00:05:40,000 --> 00:05:45,340
statement of they're tryin a driver from

00:05:42,430 --> 00:05:47,470
the users point of view is kind of very

00:05:45,340 --> 00:05:48,729
important and it kind of also changes

00:05:47,470 --> 00:05:52,389
the way you write tests and it can also

00:05:48,729 --> 00:05:54,840
break your tests so i have this simple

00:05:52,389 --> 00:05:57,220
example i call it the fortune teller and

00:05:54,840 --> 00:06:00,250
we're just going to show is how you know

00:05:57,220 --> 00:06:03,340
this concept in in place assouline one

00:06:00,250 --> 00:06:05,500
versus selenium too and also some of the

00:06:03,340 --> 00:06:07,539
side effects of writing in selenium one

00:06:05,500 --> 00:06:10,060
how you can actually you know have tests

00:06:07,539 --> 00:06:12,070
that pass that shouldn't pass so let's

00:06:10,060 --> 00:06:14,100
go ahead and go through the fortune

00:06:12,070 --> 00:06:14,100
teller

00:06:22,160 --> 00:06:27,860
I'm going to go through it manually

00:06:24,180 --> 00:06:27,860
first just so we know how its set up

00:06:32,510 --> 00:06:37,530
okay so it's really simple it's not and

00:06:36,030 --> 00:06:45,360
I'm almost out of power I apologize

00:06:37,530 --> 00:06:48,420
plugin so I put in any name favorite

00:06:45,360 --> 00:06:51,150
color let's go with red predict my

00:06:48,420 --> 00:06:53,130
future and it says Jim Brown you're okay

00:06:51,150 --> 00:06:58,140
it's very simple I wish fortune tellers

00:06:53,130 --> 00:07:05,640
were that nice so so our test if we go

00:06:58,140 --> 00:07:07,800
look at our test is pretty

00:07:05,640 --> 00:07:10,470
straightforward we're going to open the

00:07:07,800 --> 00:07:12,510
webpage we're going to get a unique name

00:07:10,470 --> 00:07:13,860
just a random name we're going to put

00:07:12,510 --> 00:07:16,740
the name in we're going to click the

00:07:13,860 --> 00:07:19,350
next button like I did wait for the

00:07:16,740 --> 00:07:21,960
color text box to come up and we're

00:07:19,350 --> 00:07:23,610
going to put in a color arbitrarily

00:07:21,960 --> 00:07:24,750
chose blue and then we're going to click

00:07:23,610 --> 00:07:29,550
Next and we're going to look for that

00:07:24,750 --> 00:07:30,720
link that says start over now just a

00:07:29,550 --> 00:07:33,780
little background about the fortune

00:07:30,720 --> 00:07:37,050
teller I use the basic Drupal AHA

00:07:33,780 --> 00:07:40,590
framework for Ajax forms so can anyone

00:07:37,050 --> 00:07:45,270
guess I guess you can't what will happen

00:07:40,590 --> 00:07:47,190
when i run this at selenium one because

00:07:45,270 --> 00:07:48,870
we did the user login tests which means

00:07:47,190 --> 00:07:50,760
you put in to text you put in the

00:07:48,870 --> 00:07:52,410
information the two text fields and you

00:07:50,760 --> 00:07:53,700
told to click the button we're doing the

00:07:52,410 --> 00:07:58,070
same thing here which is what i just did

00:07:53,700 --> 00:07:58,070
manually so let's go ahead and run it

00:08:02,760 --> 00:08:12,050
i really wish i had a not a 10 x 24

00:08:06,660 --> 00:08:12,050
screen yep not small enough yet

00:08:25,710 --> 00:08:29,340
it's the yes

00:08:35,779 --> 00:08:39,740
so it did put in the name and actually

00:08:38,089 --> 00:08:41,240
to make this easier for you guys came

00:08:39,740 --> 00:08:43,509
I'm going to run this in single window

00:08:41,240 --> 00:08:43,509
mode

00:09:06,380 --> 00:09:13,250
okay so one hint is that the end you can

00:09:11,570 --> 00:09:15,500
see it's now just waiting for that

00:09:13,250 --> 00:09:17,840
element to come up for the edit for the

00:09:15,500 --> 00:09:21,200
color question to come up one hint is

00:09:17,840 --> 00:09:23,360
that the AHA framework actually doesn't

00:09:21,200 --> 00:09:24,920
fire it attaches his button using a

00:09:23,360 --> 00:09:29,030
mouse down event and as we mentioned

00:09:24,920 --> 00:09:30,290
before the selenium one drive through

00:09:29,030 --> 00:09:32,150
JavaScript so when you say click the

00:09:30,290 --> 00:09:33,560
button it uses JavaScript and actually

00:09:32,150 --> 00:09:35,870
clicks a button it fires the click event

00:09:33,560 --> 00:09:38,420
and the problem is it only fires a click

00:09:35,870 --> 00:09:39,920
event it doesn't actually do i click on

00:09:38,420 --> 00:09:41,240
the button which would fire all the

00:09:39,920 --> 00:09:46,940
events that would happen in the button

00:09:41,240 --> 00:09:50,660
the mouse down mouse up and the click so

00:09:46,940 --> 00:09:58,910
the difference is when I run the same

00:09:50,660 --> 00:10:01,850
test switching to webdriver mode and all

00:09:58,910 --> 00:10:03,590
does is extend a different extends

00:10:01,850 --> 00:10:04,670
phpunit selenium to implementation

00:10:03,590 --> 00:10:07,090
instead of the selenium one

00:10:04,670 --> 00:10:07,090
implementation

00:10:18,610 --> 00:10:22,769
let me see it works perfectly fine

00:10:20,170 --> 00:10:25,089
because it's driving it from the native

00:10:22,769 --> 00:10:27,670
from the native bindings and it actually

00:10:25,089 --> 00:10:31,149
just does like a mouse clicked here and

00:10:27,670 --> 00:10:32,890
then that I am that bubbles down and

00:10:31,149 --> 00:10:36,060
does all the events that happen on that

00:10:32,890 --> 00:10:38,320
button so if you've ever done

00:10:36,060 --> 00:10:39,820
autocomplete fields for example the

00:10:38,320 --> 00:10:42,040
onblur event usually you have to do a

00:10:39,820 --> 00:10:44,649
fire event on blur because when you lose

00:10:42,040 --> 00:10:46,360
focus it actually doesn't fire the the

00:10:44,649 --> 00:10:48,279
blur event when you use webdriver it

00:10:46,360 --> 00:10:50,470
actually fires when you lose focus and

00:10:48,279 --> 00:10:51,850
go someplace else it actually fires a

00:10:50,470 --> 00:10:53,709
blur event because it's actually driving

00:10:51,850 --> 00:10:55,180
it like a user instead of through

00:10:53,709 --> 00:10:59,820
JavaScript where you're kind of only

00:10:55,180 --> 00:10:59,820
doing one item and not the full stack

00:11:01,920 --> 00:11:11,010
and I have another example but do you

00:11:05,440 --> 00:11:11,010
guys all I understand that okay

00:11:18,120 --> 00:11:22,070
and the other example real quick is that

00:11:32,819 --> 00:11:38,459
so what I did was I put in some

00:11:35,579 --> 00:11:42,899
JavaScript that just disables the name

00:11:38,459 --> 00:11:46,859
field and again if we go by charges are

00:11:42,899 --> 00:11:48,479
a simple basic login test and i just

00:11:46,859 --> 00:11:50,389
made a test called basic typing is just

00:11:48,479 --> 00:11:52,739
going to type in those fields and do an

00:11:50,389 --> 00:11:56,459
absolute assertion which will always be

00:11:52,739 --> 00:11:59,600
true totality if you will and if i do

00:11:56,459 --> 00:11:59,600
this in selenium one

00:12:20,320 --> 00:12:23,250
ah yes

00:12:37,620 --> 00:12:42,900
we'll see that even though it's disabled

00:12:39,360 --> 00:12:45,300
it puts the username in there and if I

00:12:42,900 --> 00:12:47,570
if I switch that or if I just switched a

00:12:45,300 --> 00:12:47,570
webdriver

00:12:59,830 --> 00:13:03,550
so it's not even gonna type it because

00:13:01,930 --> 00:13:06,400
to webdriver it says that fields not

00:13:03,550 --> 00:13:08,050
available for me to manipulate so again

00:13:06,400 --> 00:13:09,730
from the users point of view that one

00:13:08,050 --> 00:13:11,730
line just changes how you write your

00:13:09,730 --> 00:13:13,840
tests and how webdriver goes about

00:13:11,730 --> 00:13:15,700
throwing errors and seeing what's

00:13:13,840 --> 00:13:17,650
available for it for it to do so you get

00:13:15,700 --> 00:13:20,800
like on a real feedback and these are

00:13:17,650 --> 00:13:22,150
very basic simple examples but it once

00:13:20,800 --> 00:13:24,760
you start getting kind of into more

00:13:22,150 --> 00:13:27,220
complicated items you'll get hit with

00:13:24,760 --> 00:13:29,170
things like if you have a drop-down menu

00:13:27,220 --> 00:13:30,790
and you try and do a get text to see

00:13:29,170 --> 00:13:34,780
what's in there selenium one will give

00:13:30,790 --> 00:13:38,370
you the full UL the full ordered list oh

00:13:34,780 --> 00:13:38,370
yes that's okay

00:13:53,430 --> 00:14:02,140
it's it's up to the group we would need

00:13:59,740 --> 00:14:04,600
about 15 to 20 minutes to pull cables

00:14:02,140 --> 00:14:05,830
out with the chairs and so if you want

00:14:04,600 --> 00:14:17,380
to do this we just need to know what

00:14:05,830 --> 00:14:19,300
time you'd like to go break okay I I'm

00:14:17,380 --> 00:14:22,840
almost to the next to the next section

00:14:19,300 --> 00:14:24,460
of organization so like five minutes yep

00:14:22,840 --> 00:14:30,810
five minutes and yeah I could really

00:14:24,460 --> 00:14:43,870
some coffee anyway so that's good um

00:14:30,810 --> 00:14:47,680
where was I oh yes oh yes no and

00:14:43,870 --> 00:14:51,040
actually that's my next slide so so I'm

00:14:47,680 --> 00:14:52,540
glad yes um so you know that's that's

00:14:51,040 --> 00:14:54,250
kind of the difference of from a user's

00:14:52,540 --> 00:14:56,980
point point of view so and when you do

00:14:54,250 --> 00:14:58,630
get texts with with webdriver you'll

00:14:56,980 --> 00:14:59,860
only see what the user can see you only

00:14:58,630 --> 00:15:01,630
see the my account you won't see their

00:14:59,860 --> 00:15:03,580
log out or the other or drop downs in

00:15:01,630 --> 00:15:04,960
there so it really is kind of saying and

00:15:03,580 --> 00:15:06,760
then you can do more complicated things

00:15:04,960 --> 00:15:08,080
something's overlaying that you know the

00:15:06,760 --> 00:15:10,420
user couldn't click you know it really

00:15:08,080 --> 00:15:14,410
does kind of go from what the user can

00:15:10,420 --> 00:15:17,020
do so that said I was you know excited

00:15:14,410 --> 00:15:18,580
about webdriver and it's nice and my

00:15:17,020 --> 00:15:21,160
tests are slow and isn't just going to

00:15:18,580 --> 00:15:26,470
fix it because it's new and fancy and

00:15:21,160 --> 00:15:29,470
the one thing I found out is that web

00:15:26,470 --> 00:15:30,880
driver gives me stability it's more

00:15:29,470 --> 00:15:39,660
human-like like we just went over oh

00:15:30,880 --> 00:15:39,660
it's good okay uh yeah I think

00:15:41,880 --> 00:15:48,840
oh yeah that's fine but i think i only

00:15:44,670 --> 00:15:50,010
have i'm only til 1145 yeah yeah what

00:15:48,840 --> 00:15:59,940
but it's only that i only have an hour

00:15:50,010 --> 00:16:01,950
session yeah yeah yeah that's again and

00:15:59,940 --> 00:16:03,990
there's late less what i call javascript

00:16:01,950 --> 00:16:05,880
hacking I'm if you've worked with Tess

00:16:03,990 --> 00:16:07,920
I'm sure we've all done weird fire

00:16:05,880 --> 00:16:09,870
events or we've actually pulled the

00:16:07,920 --> 00:16:11,430
browser bot which if someone's not

00:16:09,870 --> 00:16:14,460
familiar with the browser bot it's the

00:16:11,430 --> 00:16:16,590
actual JavaScript from selenium one that

00:16:14,460 --> 00:16:19,050
drives a browser and kind of gives you a

00:16:16,590 --> 00:16:20,460
true picture so that said the one thing

00:16:19,050 --> 00:16:24,240
I didn't mention and the difference is

00:16:20,460 --> 00:16:27,960
was speed and even though it's using you

00:16:24,240 --> 00:16:29,130
know the native ap is stability in the

00:16:27,960 --> 00:16:31,500
users point of view was really what they

00:16:29,130 --> 00:16:33,990
were driving for and what I found is

00:16:31,500 --> 00:16:36,660
there's not really a big difference in

00:16:33,990 --> 00:16:38,040
speed between the two if anything I

00:16:36,660 --> 00:16:40,350
think webdriver might be a slightly

00:16:38,040 --> 00:16:43,680
slower a tidbit you know here and there

00:16:40,350 --> 00:16:45,210
but I you don't it's not a magic pill

00:16:43,680 --> 00:16:46,950
where if you're having slower tests

00:16:45,210 --> 00:16:48,870
going to webdriver two are going to

00:16:46,950 --> 00:16:50,820
webdriver is just going to give you this

00:16:48,870 --> 00:16:53,640
mess or it I'm a stood like a 20-percent

00:16:50,820 --> 00:16:55,050
speed increase from working with it and

00:16:53,640 --> 00:16:57,270
from you know doing some tests

00:16:55,050 --> 00:16:58,980
implementations I haven't found any

00:16:57,270 --> 00:17:00,840
difference I shouldn't say any

00:16:58,980 --> 00:17:01,860
difference but what much difference

00:17:00,840 --> 00:17:04,319
between the two if you're looking for

00:17:01,860 --> 00:17:07,380
speed moving to webdriver isn't going to

00:17:04,319 --> 00:17:11,000
solve that problem so to answer your

00:17:07,380 --> 00:17:16,319
your performance and speed question no I

00:17:11,000 --> 00:17:18,630
44 from my personal experience so from

00:17:16,319 --> 00:17:21,930
from there I guess we're not breaking

00:17:18,630 --> 00:17:27,120
should I just go on to organization of

00:17:21,930 --> 00:17:29,490
tests what no all right so um that's

00:17:27,120 --> 00:17:36,200
pretty cool we've got a new tool it's

00:17:29,490 --> 00:17:39,990
it's fun play oh yes I'm to webdriver

00:17:36,200 --> 00:17:41,910
the drawbacks to webdriver writing tests

00:17:39,990 --> 00:17:44,730
can but it's nice from a developer's

00:17:41,910 --> 00:17:47,190
point of view to be able to do

00:17:44,730 --> 00:17:49,470
javascript packs or for example like it

00:17:47,190 --> 00:17:51,300
it is frustrating to like you you want

00:17:49,470 --> 00:17:53,970
to check to see if something's in this

00:17:51,300 --> 00:17:55,560
in this drop-down or in this element

00:17:53,970 --> 00:17:55,830
that maybe the user can't see but for

00:17:55,560 --> 00:17:57,059
you

00:17:55,830 --> 00:17:59,970
you just need to assert that it's there

00:17:57,059 --> 00:18:01,590
but you have to you have to kind of test

00:17:59,970 --> 00:18:03,750
it in some other way something that the

00:18:01,590 --> 00:18:07,140
user can see so it's a little

00:18:03,750 --> 00:18:08,940
frustrating that regard secondly it's

00:18:07,140 --> 00:18:12,000
nice that it's using the native API so

00:18:08,940 --> 00:18:15,210
that also makes development slower so

00:18:12,000 --> 00:18:16,350
you know if you're using selenium you

00:18:15,210 --> 00:18:18,929
know they they kind of have a fast

00:18:16,350 --> 00:18:21,029
release cycle especially with firefox

00:18:18,929 --> 00:18:23,549
see me to release every month and

00:18:21,029 --> 00:18:25,679
updates but it does make it slower

00:18:23,549 --> 00:18:31,019
because you have this translation going

00:18:25,679 --> 00:18:32,190
on another drawback to webdriver I think

00:18:31,019 --> 00:18:35,240
those really does the two major ones

00:18:32,190 --> 00:18:39,539
that for me that I wanted to mention was

00:18:35,240 --> 00:18:41,399
it's it's not a magic pill it in my

00:18:39,539 --> 00:18:47,190
experience has made testing sometimes a

00:18:41,399 --> 00:18:49,289
little frustrating or harder and it from

00:18:47,190 --> 00:18:50,760
and unfortunately I'm not working on it

00:18:49,289 --> 00:18:52,649
but if I was working on the driver

00:18:50,760 --> 00:18:55,970
implementations it makes it a little bit

00:18:52,649 --> 00:18:55,970
slower because this

00:19:17,549 --> 00:19:20,509
weak again

00:19:31,539 --> 00:19:38,510
well I guess that's a that's a double

00:19:34,190 --> 00:19:40,340
bed yes yes the question was someone new

00:19:38,510 --> 00:19:42,590
to the organization writing tests and

00:19:40,340 --> 00:19:45,830
they were able to use the there's a

00:19:42,590 --> 00:19:48,020
firefox plugin that allows you to

00:19:45,830 --> 00:19:52,250
basically record your test it's what

00:19:48,020 --> 00:19:55,640
they call the HTML a dismal unit tests

00:19:52,250 --> 00:19:57,110
is the HTML unit yes yes and and so it

00:19:55,640 --> 00:19:59,120
allows you just be to record your test

00:19:57,110 --> 00:20:00,380
and then replay them so instead of

00:19:59,120 --> 00:20:03,950
writing them like this you're able to

00:20:00,380 --> 00:20:06,770
record your test and replay them and the

00:20:03,950 --> 00:20:09,169
question is what does is well webdriver

00:20:06,770 --> 00:20:10,640
allow this because it seems you know it

00:20:09,169 --> 00:20:13,909
can only be used in the hands of a

00:20:10,640 --> 00:20:15,770
programmer and I think that's a it's

00:20:13,909 --> 00:20:18,530
complicated question so for example with

00:20:15,770 --> 00:20:20,990
the IDE yeah you can you can record the

00:20:18,530 --> 00:20:23,330
tests but some some tests are more

00:20:20,990 --> 00:20:26,179
complicated where you need you know you

00:20:23,330 --> 00:20:29,510
need a developer to write the test you

00:20:26,179 --> 00:20:32,270
have to do it by hand and also i would i

00:20:29,510 --> 00:20:33,679
would say yes you know you will always

00:20:32,270 --> 00:20:36,260
be able to like I when I'm switching

00:20:33,679 --> 00:20:38,240
between the two in terms of selenium one

00:20:36,260 --> 00:20:40,880
in selenium to you know you can use an

00:20:38,240 --> 00:20:45,140
ID and ID and record your test and run

00:20:40,880 --> 00:20:47,630
it against run it that way so with that

00:20:45,140 --> 00:20:49,070
regard yes but you'll always I think

00:20:47,630 --> 00:20:50,929
need and especially in a larger

00:20:49,070 --> 00:20:52,850
organization are more complicated site a

00:20:50,929 --> 00:20:55,850
developer to write the test anyway so I

00:20:52,850 --> 00:20:57,409
do agree it there will be an ID and they

00:20:55,850 --> 00:21:00,289
can use the ID but you always have these

00:20:57,409 --> 00:21:03,169
complicated tests that you'll need a

00:21:00,289 --> 00:21:04,850
developer for and not not only the

00:21:03,169 --> 00:21:07,490
testing but when you you know the

00:21:04,850 --> 00:21:09,169
architecture of fixtures and you know

00:21:07,490 --> 00:21:11,539
tear down and set up and you know it

00:21:09,169 --> 00:21:12,740
when you when you start to get into a

00:21:11,539 --> 00:21:15,860
lot of tests like when we go through

00:21:12,740 --> 00:21:18,860
organizing tests you know it's if for

00:21:15,860 --> 00:21:20,809
example if you have 54 so you have a

00:21:18,860 --> 00:21:23,090
hundred test and they're testing some

00:21:20,809 --> 00:21:26,390
widget and then the UX comes in and they

00:21:23,090 --> 00:21:29,419
totally redo the CSS which or in the Dom

00:21:26,390 --> 00:21:31,280
structure changes usually the IDE uses

00:21:29,419 --> 00:21:32,960
xpath and if the Dom changes you have to

00:21:31,280 --> 00:21:35,630
then go back and redo all those

00:21:32,960 --> 00:21:36,919
recordings where if you have well we'll

00:21:35,630 --> 00:21:39,890
talk about this but you know there's

00:21:36,919 --> 00:21:41,630
ways to mitigate those those changes

00:21:39,890 --> 00:21:43,410
where they're not as painful where you

00:21:41,630 --> 00:21:45,930
can kind of go into one place

00:21:43,410 --> 00:21:48,240
update this area and then go forward so

00:21:45,930 --> 00:21:50,790
it's it's it's a kind of catch-22

00:21:48,240 --> 00:21:51,630
depending on which specific area we're

00:21:50,790 --> 00:22:07,140
talking about does that answer your

00:21:51,630 --> 00:22:08,820
question okay yes it is well but I

00:22:07,140 --> 00:22:10,880
should I should with a caveat say that

00:22:08,820 --> 00:22:13,560
underneath I do have a translation layer

00:22:10,880 --> 00:22:14,610
and I just in for this talk since I only

00:22:13,560 --> 00:22:16,980
have an hour I didn't want to go too

00:22:14,610 --> 00:22:18,660
deep into and we can do that if we have

00:22:16,980 --> 00:22:21,870
time at the end migrating from Sony once

00:22:18,660 --> 00:22:23,520
onium too but for example there's just

00:22:21,870 --> 00:22:26,430
there's a slight translation layer but

00:22:23,520 --> 00:22:28,680
it is the translation layer took me you

00:22:26,430 --> 00:22:31,020
know uh a couple hours to write you know

00:22:28,680 --> 00:22:32,730
it's not complicated it's just you know

00:22:31,020 --> 00:22:34,290
slightly different functions and so it's

00:22:32,730 --> 00:22:35,670
like if you call this function I just

00:22:34,290 --> 00:23:07,380
override it and this is the one that you

00:22:35,670 --> 00:23:09,840
should call yeah me personally I would

00:23:07,380 --> 00:23:12,120
say no so the problem that I'd say the

00:23:09,840 --> 00:23:14,790
problem so with selenium like like like

00:23:12,120 --> 00:23:16,710
this open and wait for element those are

00:23:14,790 --> 00:23:18,630
selenium commands but like I said

00:23:16,710 --> 00:23:21,120
there's a translation layer underneath

00:23:18,630 --> 00:23:23,280
so if you were to abstract it into your

00:23:21,120 --> 00:23:24,440
own kind of domain language or pseudo

00:23:23,280 --> 00:23:26,550
language and then have your own

00:23:24,440 --> 00:23:28,860
translation layer under it under it

00:23:26,550 --> 00:23:30,180
which some languages do do they kind of

00:23:28,860 --> 00:23:32,130
have an abstraction layer and you can

00:23:30,180 --> 00:23:34,110
use whatever implementation underneath

00:23:32,130 --> 00:23:35,880
you want to then I would say you're not

00:23:34,110 --> 00:23:39,270
really locked in because I could if you

00:23:35,880 --> 00:23:42,360
know something if something's method for

00:23:39,270 --> 00:23:43,590
opening a page is get the page then I

00:23:42,360 --> 00:23:45,470
would just override the open function

00:23:43,590 --> 00:23:47,820
you know just general you know

00:23:45,470 --> 00:23:49,320
object-oriented programming and just

00:23:47,820 --> 00:23:52,080
override it and say instead of that use

00:23:49,320 --> 00:23:53,460
this you know and so I would I i would

00:23:52,080 --> 00:23:55,470
say yet on one hand you are because

00:23:53,460 --> 00:23:59,100
you're used to wait for element and what

00:23:55,470 --> 00:24:00,450
not and use that one language but on the

00:23:59,100 --> 00:24:01,590
other hand you if you really needed to

00:24:00,450 --> 00:24:02,850
and this was really going to help you

00:24:01,590 --> 00:24:06,240
then you can go that way but then that's

00:24:02,850 --> 00:24:12,740
a question of do just redo it anyway so

00:24:06,240 --> 00:24:12,740
I hope I answer your question yeah yes

00:24:20,120 --> 00:24:28,260
there there is a test runner for the IDE

00:24:23,610 --> 00:24:30,059
test I've and webdriver I'm actually not

00:24:28,260 --> 00:24:32,070
sure if there is i'm pretty sure there

00:24:30,059 --> 00:24:34,380
is and you could definitely because you

00:24:32,070 --> 00:24:36,480
it's just an HTML table so from a

00:24:34,380 --> 00:24:38,490
programming standpoint yes you can as

00:24:36,480 --> 00:24:41,730
far as one standard standard standard

00:24:38,490 --> 00:24:43,049
implementation i believe i'm pretty sure

00:24:41,730 --> 00:24:46,710
there is i know there I know there is in

00:24:43,049 --> 00:24:49,740
Java so I'm pretty sure there is for web

00:24:46,710 --> 00:24:58,610
darby to a test runner for the for the

00:24:49,740 --> 00:24:58,610
ID or the HTML ones okay see

00:25:00,800 --> 00:25:07,700
okay yeah so we're going to go through

00:25:05,210 --> 00:25:10,250
organizing tests so when you start using

00:25:07,700 --> 00:25:15,440
the tool you'll start excuse me writing

00:25:10,250 --> 00:25:17,440
a lot of tests as a caveat this

00:25:15,440 --> 00:25:20,120
information is taken from selenium

00:25:17,440 --> 00:25:21,770
selenium zone on website they have some

00:25:20,120 --> 00:25:24,800
great information and resources there

00:25:21,770 --> 00:25:29,270
it's also just from my personal

00:25:24,800 --> 00:25:31,460
experience doing tests both in you know

00:25:29,270 --> 00:25:34,280
I've done selenium under Java with j

00:25:31,460 --> 00:25:37,850
unit and also you know PHP so just some

00:25:34,280 --> 00:25:39,920
some practices that I found out in

00:25:37,850 --> 00:25:43,310
consulting and also at my current job

00:25:39,920 --> 00:25:46,340
with the economist so the first thing

00:25:43,310 --> 00:25:49,760
we're going to go over our page objects

00:25:46,340 --> 00:25:53,240
and page objects allow you to get this

00:25:49,760 --> 00:25:57,770
separate this separation of test code

00:25:53,240 --> 00:25:59,240
and and and what I what's called I like

00:25:57,770 --> 00:26:00,770
they say page objects but I'd like to

00:25:59,240 --> 00:26:02,480
just call an object because I think that

00:26:00,770 --> 00:26:06,110
better describes it and the object is

00:26:02,480 --> 00:26:08,000
just some resource like a user or a home

00:26:06,110 --> 00:26:11,240
page or you know kind of think of it as

00:26:08,000 --> 00:26:13,030
like maybe some feature and users is a

00:26:11,240 --> 00:26:15,830
good example and I'm going to go through

00:26:13,030 --> 00:26:17,720
the user example but they're definitely

00:26:15,830 --> 00:26:21,890
useful for objects that you use a lot a

00:26:17,720 --> 00:26:26,470
lot of the time so for page objects

00:26:21,890 --> 00:26:26,470
we're going to look at two to test

00:26:30,020 --> 00:26:36,550
and so we have our our basic login test

00:26:33,950 --> 00:26:38,870
that we remember from from previously

00:26:36,550 --> 00:26:42,260
opens the user puts in using a password

00:26:38,870 --> 00:26:45,200
and hit submit and then I've made this

00:26:42,260 --> 00:26:47,240
test peel login which is paid page

00:26:45,200 --> 00:26:49,130
object you'll see I have this new object

00:26:47,240 --> 00:26:52,340
here called user and I just give it you

00:26:49,130 --> 00:26:55,910
know an instance of of the phpunit

00:26:52,340 --> 00:26:57,400
selenium test class and you can see the

00:26:55,910 --> 00:27:01,640
difference between the test instead of

00:26:57,400 --> 00:27:04,070
me having to know in my tests and I

00:27:01,640 --> 00:27:05,600
shouldn't care but am I my test vlog in

00:27:04,070 --> 00:27:07,850
that I have to type into edit name and a

00:27:05,600 --> 00:27:09,380
password and edit you know my edit name

00:27:07,850 --> 00:27:11,270
i add it past what the username password

00:27:09,380 --> 00:27:13,100
is I have this user object I can tell

00:27:11,270 --> 00:27:15,740
the user object to do certain things and

00:27:13,100 --> 00:27:17,960
then do my assertions after it has done

00:27:15,740 --> 00:27:20,300
its work so if you have a login you know

00:27:17,960 --> 00:27:21,950
I shouldn't have to care about okay how

00:27:20,300 --> 00:27:23,060
do I do that and usually have to go find

00:27:21,950 --> 00:27:25,010
an example I should be able to

00:27:23,060 --> 00:27:30,230
instantiate an object and tell it to do

00:27:25,010 --> 00:27:35,210
a login or some other complicated not

00:27:30,230 --> 00:27:40,340
method but workflow so inside of this DC

00:27:35,210 --> 00:27:43,790
user object is we just have a

00:27:40,340 --> 00:27:49,640
constructor and we have a registered

00:27:43,790 --> 00:27:54,970
user function and the registered user

00:27:49,640 --> 00:27:54,970
function just where does that go

00:27:56,519 --> 00:28:03,789
sorry create user function just creates

00:27:59,860 --> 00:28:05,470
a random name goes to the register page

00:28:03,789 --> 00:28:10,000
fills all the information registers the

00:28:05,470 --> 00:28:11,710
user and then returns it registers using

00:28:10,000 --> 00:28:13,600
them reader and then returns the object

00:28:11,710 --> 00:28:15,640
so from there you have a user object and

00:28:13,600 --> 00:28:17,110
the user and the object knows okay this

00:28:15,640 --> 00:28:18,460
is my username this is my password I

00:28:17,110 --> 00:28:19,510
know the information about myself what

00:28:18,460 --> 00:28:25,210
do you want to ask me what do you want

00:28:19,510 --> 00:28:26,890
me to do now and then with that I tell

00:28:25,210 --> 00:28:30,789
it to log out and then I tell it to

00:28:26,890 --> 00:28:33,250
login I just do a simple assertion now

00:28:30,789 --> 00:28:36,010
you can see this is a very basic example

00:28:33,250 --> 00:28:37,299
but you can see if you're and we've all

00:28:36,010 --> 00:28:38,740
been there if your registration and

00:28:37,299 --> 00:28:40,269
login prosper and login process

00:28:38,740 --> 00:28:42,100
especially registration process is

00:28:40,269 --> 00:28:44,679
pretty complicated and you need to do it

00:28:42,100 --> 00:28:47,559
all the time you could one abstract into

00:28:44,679 --> 00:28:51,669
a function register user but with a page

00:28:47,559 --> 00:28:53,230
object it it's it's more abstract and

00:28:51,669 --> 00:28:54,580
more powerful because you don't just

00:28:53,230 --> 00:28:56,169
register it knows how to do all the

00:28:54,580 --> 00:28:58,000
things that that feature should do it

00:28:56,169 --> 00:28:59,649
notice how to register or sindh itself

00:28:58,000 --> 00:29:02,350
an email or check its email and then you

00:28:59,649 --> 00:29:05,380
do your servants off off of that does

00:29:02,350 --> 00:29:06,519
that concept make sense ok I just wanna

00:29:05,380 --> 00:29:10,029
make sure I'm explaining everything very

00:29:06,519 --> 00:29:13,510
well so I can run through this example

00:29:10,029 --> 00:29:15,039
where x kind of kind of short doesn't

00:29:13,510 --> 00:29:22,630
yep it does anyone want to run through

00:29:15,039 --> 00:29:23,740
it no ok so next I want to go over the

00:29:22,630 --> 00:29:31,419
example I kind of talked about before

00:29:23,740 --> 00:29:32,860
which is user interface mapping so like

00:29:31,419 --> 00:29:35,919
we were talking about I kind of

00:29:32,860 --> 00:29:38,500
mentioned before if you you've got this

00:29:35,919 --> 00:29:39,820
all these tests and you can think you

00:29:38,500 --> 00:29:42,130
know down the road someone's going to

00:29:39,820 --> 00:29:43,210
say we wanted we want to change you know

00:29:42,130 --> 00:29:45,639
this feature we're going to change how

00:29:43,210 --> 00:29:46,990
it looks or we need to put in a new

00:29:45,639 --> 00:29:48,730
element and then you've got to go

00:29:46,990 --> 00:29:51,850
through all your tests that reference

00:29:48,730 --> 00:29:53,620
that that location whether via xpath or

00:29:51,850 --> 00:29:55,210
some other locator because once the Dom

00:29:53,620 --> 00:29:57,880
structure changes to locate it you have

00:29:55,210 --> 00:29:59,620
to change you know you have to change

00:29:57,880 --> 00:30:01,919
how you how you find it and what you I

00:29:59,620 --> 00:30:03,940
my ping does is it allows you basically

00:30:01,919 --> 00:30:06,429
from a simplistic point of view it's

00:30:03,940 --> 00:30:08,750
just constants it's just for for the

00:30:06,429 --> 00:30:21,640
location strategy instead of

00:30:08,750 --> 00:30:24,200
like text so so in this basic UI login

00:30:21,640 --> 00:30:25,760
and I what I did was I i extracted it

00:30:24,200 --> 00:30:28,880
out so we didn't have to go into the DC

00:30:25,760 --> 00:30:31,490
user so if you if you wanted to kind of

00:30:28,880 --> 00:30:34,220
build upon you know all these all these

00:30:31,490 --> 00:30:35,900
practices you would you would take this

00:30:34,220 --> 00:30:38,360
practice and then put it inside of your

00:30:35,900 --> 00:30:40,370
page object so that way you we now have

00:30:38,360 --> 00:30:43,490
one point of reference for a location

00:30:40,370 --> 00:30:46,870
strategy but you'll see this DC user you

00:30:43,490 --> 00:30:49,730
I log and user submit and in this class

00:30:46,870 --> 00:30:52,220
you'll see these just constants and so

00:30:49,730 --> 00:30:54,950
you can see for a name at a past I've

00:30:52,220 --> 00:30:58,880
submit and then the login user account

00:30:54,950 --> 00:31:00,860
link until when i run this i use those

00:30:58,880 --> 00:31:03,200
instead of having to type out the text

00:31:00,860 --> 00:31:06,920
so now if someone wants to change the

00:31:03,200 --> 00:31:09,050
name of the login feel or maybe it's

00:31:06,920 --> 00:31:11,000
maybe I use xpath and then where there's

00:31:09,050 --> 00:31:13,490
a new div around it so I have to change

00:31:11,000 --> 00:31:15,860
you know my xpath location strategy then

00:31:13,490 --> 00:31:20,540
I just do it in this one area and for

00:31:15,860 --> 00:31:22,430
the 15 other tests that are that are

00:31:20,540 --> 00:31:24,020
using it if they're using this UI login

00:31:22,430 --> 00:31:25,580
I don't have to touch those so we're

00:31:24,020 --> 00:31:27,560
kind of centralizing all the changes

00:31:25,580 --> 00:31:29,750
that we would need to make that are kind

00:31:27,560 --> 00:31:30,950
of your day to day thing like you're

00:31:29,750 --> 00:31:32,870
going to change the color of the website

00:31:30,950 --> 00:31:34,220
and you're going to add a new button and

00:31:32,870 --> 00:31:36,350
just making it easier to move forward

00:31:34,220 --> 00:31:41,900
and not have so much pain when things

00:31:36,350 --> 00:31:44,630
change and the other thing I wanted to

00:31:41,900 --> 00:31:47,300
mention from from the page object

00:31:44,630 --> 00:31:50,390
perspective is that the page object

00:31:47,300 --> 00:31:52,430
shouldn't usually don't want to do

00:31:50,390 --> 00:31:54,440
assertions inside of your object you

00:31:52,430 --> 00:31:59,510
want to leave that to your test you just

00:31:54,440 --> 00:32:02,090
want the object to do the services that

00:31:59,510 --> 00:32:03,410
it should register your log off it's a

00:32:02,090 --> 00:32:04,760
home page create yourself and make

00:32:03,410 --> 00:32:07,400
yourself the most current not the

00:32:04,760 --> 00:32:14,750
current and what I what I mean with that

00:32:07,400 --> 00:32:16,580
in practice is I wouldn't have you know

00:32:14,750 --> 00:32:18,830
you my user object and I wouldn't tell

00:32:16,580 --> 00:32:22,809
it to

00:32:18,830 --> 00:32:25,460
a cert you know assert is logged in

00:32:22,809 --> 00:32:28,610
because then my assertion is now in my

00:32:25,460 --> 00:32:38,510
and my user object the way to do it is

00:32:28,610 --> 00:32:40,039
that I do have in here this is my

00:32:38,510 --> 00:32:44,480
account we present and all I tells me is

00:32:40,039 --> 00:32:52,970
a present or not and so my assertion

00:32:44,480 --> 00:32:55,010
test would be so does that it's a slight

00:32:52,970 --> 00:32:57,169
thing it's a slight change but it's kind

00:32:55,010 --> 00:33:00,500
of important when you're making a lot of

00:32:57,169 --> 00:33:02,230
objects is keeping the assertions out of

00:33:00,500 --> 00:33:05,269
the object and keeping them in your test

00:33:02,230 --> 00:33:06,889
obviously and in the real world you do

00:33:05,269 --> 00:33:08,120
put some assertions in there like am I

00:33:06,889 --> 00:33:10,940
on the right page if I'm not on the

00:33:08,120 --> 00:33:12,740
right page get on the right page or you

00:33:10,940 --> 00:33:14,570
know if you want a dependency I couldn't

00:33:12,740 --> 00:33:16,010
do this because of XY and Z so the whole

00:33:14,570 --> 00:33:18,049
thing is not going to work but in

00:33:16,010 --> 00:33:20,899
practice you want to keep your sir sins

00:33:18,049 --> 00:33:23,360
in your test and you want to eat and you

00:33:20,899 --> 00:33:26,590
want to keep them out of your object was

00:33:23,360 --> 00:33:30,100
there a question you know okay good so

00:33:26,590 --> 00:33:30,100
hopefully that makes sense

00:33:38,970 --> 00:33:47,850
I'm sure we're doing okay on time okay

00:33:45,409 --> 00:33:51,000
okay and then next I'm going to talk

00:33:47,850 --> 00:33:53,700
about test ap is and I probably should

00:33:51,000 --> 00:33:56,460
have rename these rename this just about

00:33:53,700 --> 00:33:59,940
helper functions I'm kind of to the

00:33:56,460 --> 00:34:01,770
point of a new developer coming in I you

00:33:59,940 --> 00:34:03,299
should test should be super easy to

00:34:01,770 --> 00:34:05,580
write you should have tons of helper

00:34:03,299 --> 00:34:07,590
functions just so when you write a test

00:34:05,580 --> 00:34:09,510
your kind of talking to yourself it's

00:34:07,590 --> 00:34:12,149
like okay I want to open a page put some

00:34:09,510 --> 00:34:13,649
text in the header see if it's there not

00:34:12,149 --> 00:34:15,990
thinking okay what's the name of that

00:34:13,649 --> 00:34:17,820
element up there you know how do I get

00:34:15,990 --> 00:34:20,280
enough words to put up there it should

00:34:17,820 --> 00:34:22,290
just be a very simple conversation with

00:34:20,280 --> 00:34:23,340
yourself so that even if a new developer

00:34:22,290 --> 00:34:24,599
was to read through it it's very

00:34:23,340 --> 00:34:27,149
straightforward they're not thinking

00:34:24,599 --> 00:34:29,010
about all the technical or the

00:34:27,149 --> 00:34:30,990
technicalities of you know how do how do

00:34:29,010 --> 00:34:32,909
i do that are for example a page object

00:34:30,990 --> 00:34:35,580
you know you use those to help someone

00:34:32,909 --> 00:34:37,320
our new developer or anyone on the team

00:34:35,580 --> 00:34:39,090
say okay how do I create a user you know

00:34:37,320 --> 00:34:40,470
how many registration feels do we have

00:34:39,090 --> 00:34:43,200
they shouldn't they should be able to

00:34:40,470 --> 00:34:44,849
say I need a user I need a login you

00:34:43,200 --> 00:34:46,770
know that's two lines of code instead of

00:34:44,849 --> 00:34:48,750
having to research and it's also time

00:34:46,770 --> 00:34:50,760
saved having to research do we have new

00:34:48,750 --> 00:34:54,750
fields we have you know someone and so

00:34:50,760 --> 00:34:56,550
forth I say keep the keep the actual

00:34:54,750 --> 00:34:59,400
test a small one liners what I mean by

00:34:56,550 --> 00:35:00,630
that is you know not having to I need to

00:34:59,400 --> 00:35:01,980
register user so you have a block of

00:35:00,630 --> 00:35:03,839
code that registers a user you know

00:35:01,980 --> 00:35:06,060
split that down into one you know with a

00:35:03,839 --> 00:35:08,190
with a user object that says register

00:35:06,060 --> 00:35:09,810
user done you know next line assert that

00:35:08,190 --> 00:35:12,000
he was registered or that he got an

00:35:09,810 --> 00:35:13,619
email you know or whatever but you know

00:35:12,000 --> 00:35:15,330
trying to it's nice to keep them into

00:35:13,619 --> 00:35:18,990
one line so it does then read like a

00:35:15,330 --> 00:35:20,790
story utility function interfit are your

00:35:18,990 --> 00:35:22,609
friend obviously you're going to wrap

00:35:20,790 --> 00:35:26,880
some calls to make make things better

00:35:22,609 --> 00:35:29,310
and then we we use this module called

00:35:26,880 --> 00:35:36,140
test data with Drupal is anyone familiar

00:35:29,310 --> 00:35:39,839
with it okay Oh test data is a way to

00:35:36,140 --> 00:35:42,630
help you get your testing data and an

00:35:39,839 --> 00:35:47,300
efficient manner and that's of I think a

00:35:42,630 --> 00:35:47,300
good summary of it the way it works

00:35:48,000 --> 00:36:05,190
oh great while I start that back up do

00:36:03,690 --> 00:36:07,920
you guys mind if I just go through the

00:36:05,190 --> 00:36:17,550
code I okay because we're running a

00:36:07,920 --> 00:36:24,420
little short on time so Oh No why am I

00:36:17,550 --> 00:36:27,090
looking in there okay so this is kind of

00:36:24,420 --> 00:36:29,160
a key area of it and the test data is

00:36:27,090 --> 00:36:32,070
just a framework to allow you to get a

00:36:29,160 --> 00:36:34,830
set of data cache it and then loop

00:36:32,070 --> 00:36:36,480
through it so if you think about you

00:36:34,830 --> 00:36:39,210
know a site that's got a lot of blog

00:36:36,480 --> 00:36:42,180
posts and but this blog posts may have

00:36:39,210 --> 00:36:44,940
different states so let's take a lot of

00:36:42,180 --> 00:36:47,400
blog posts so I need you know I need

00:36:44,940 --> 00:36:48,660
I've got 100 tests and each of those are

00:36:47,400 --> 00:36:50,790
testing something about a blog doesn't

00:36:48,660 --> 00:36:52,740
how the right header can i edit it can

00:36:50,790 --> 00:36:54,060
if I login as an editor can i edit it a

00:36:52,740 --> 00:36:55,800
regular user shouldn't be able to you've

00:36:54,060 --> 00:36:58,590
got all these iterations and you always

00:36:55,800 --> 00:37:00,870
need a random blog post so every time a

00:36:58,590 --> 00:37:02,400
test starts and we'll get to the scale

00:37:00,870 --> 00:37:03,720
you let's say you've got 30 test each of

00:37:02,400 --> 00:37:09,230
them are hitting the database all trying

00:37:03,720 --> 00:37:12,660
to pull a random blog publish or a

00:37:09,230 --> 00:37:14,250
random blog entry and if you ever use

00:37:12,660 --> 00:37:17,490
the ran function with my sequel it's it

00:37:14,250 --> 00:37:23,390
can be a little slow so what test data

00:37:17,490 --> 00:37:25,800
does is allows you to basically set

00:37:23,390 --> 00:37:27,840
different data sets so for example i

00:37:25,800 --> 00:37:31,080
have a random blog one and then i give

00:37:27,840 --> 00:37:32,580
it a query and i tell it how what size I

00:37:31,080 --> 00:37:35,160
want i think i have it set at two

00:37:32,580 --> 00:37:38,760
hundred two thousand and the URL format

00:37:35,160 --> 00:37:42,060
that that is going to use to get to that

00:37:38,760 --> 00:37:44,880
item or two to that ID so you see the

00:37:42,060 --> 00:37:47,340
nid here and then you see the URL format

00:37:44,880 --> 00:37:50,370
and it's just going to replace whatever

00:37:47,340 --> 00:37:53,010
comes back from here with that and but

00:37:50,370 --> 00:37:54,990
this stays in cash so this query it runs

00:37:53,010 --> 00:37:56,730
it and then it puts them all in cash so

00:37:54,990 --> 00:37:59,940
when you come back and you say i need a

00:37:56,730 --> 00:38:01,010
random a random blog entry it gives you

00:37:59,940 --> 00:38:03,080
one from cash

00:38:01,010 --> 00:38:06,380
next one it's got an internal pointer so

00:38:03,080 --> 00:38:08,210
then you have a data set and then end it

00:38:06,380 --> 00:38:09,500
and then you can just go through it from

00:38:08,210 --> 00:38:11,000
cash instead of ever happened it hit

00:38:09,500 --> 00:38:14,030
your database this helps to speed up

00:38:11,000 --> 00:38:17,330
your test depending on usually you run

00:38:14,030 --> 00:38:18,650
this on your same site that you're

00:38:17,330 --> 00:38:21,200
testing obviously because it needs

00:38:18,650 --> 00:38:22,730
access to the database and you can loop

00:38:21,200 --> 00:38:24,470
through it through cash and then

00:38:22,730 --> 00:38:26,120
obviously so like we said we have

00:38:24,470 --> 00:38:29,110
different states so one might need a

00:38:26,120 --> 00:38:31,760
random blog one might need a random blog

00:38:29,110 --> 00:38:33,740
with comments one might need one without

00:38:31,760 --> 00:38:36,350
comments one might need one with

00:38:33,740 --> 00:38:37,670
comments are disabled you can think of

00:38:36,350 --> 00:38:40,040
like all the different iterations that

00:38:37,670 --> 00:38:41,330
you'll need and instead of having to all

00:38:40,040 --> 00:38:43,430
you know come up with this framework

00:38:41,330 --> 00:38:44,810
okay you know how do I get that or

00:38:43,430 --> 00:38:47,000
you've got this one query sitting in

00:38:44,810 --> 00:38:49,250
your test area it all sits in here it

00:38:47,000 --> 00:38:51,740
all states cash and in it and it helps

00:38:49,250 --> 00:38:55,460
your performance of your tests zep

00:38:51,740 --> 00:38:58,970
framework makes sense and you can see it

00:38:55,460 --> 00:39:01,190
in action here where it does it looks

00:38:58,970 --> 00:39:05,750
for everything that's implemented a

00:39:01,190 --> 00:39:07,760
certain hook and then it pulls the test

00:39:05,750 --> 00:39:09,170
data from from that and it then it goes

00:39:07,760 --> 00:39:13,240
to the next one so it's like go to the

00:39:09,170 --> 00:39:16,130
and your url formats are go to and then

00:39:13,240 --> 00:39:18,200
go to next and then whatever your test

00:39:16,130 --> 00:39:20,300
data set it so I'd say go to next random

00:39:18,200 --> 00:39:24,460
blog go to next random blog without

00:39:20,300 --> 00:39:24,460
comments and it's all coming from cash

00:39:24,520 --> 00:39:30,560
there is currently not a d7 version of

00:39:27,290 --> 00:39:34,520
that I don't know if there will be if

00:39:30,560 --> 00:39:37,460
unless the community writes it but or

00:39:34,520 --> 00:39:40,280
unless we write it well which is maybe a

00:39:37,460 --> 00:39:42,590
possibility but it's the basic premise

00:39:40,280 --> 00:39:44,690
of it is not very complicated it's it

00:39:42,590 --> 00:39:46,970
wouldn't be a very hard I should say not

00:39:44,690 --> 00:39:49,160
very complicated but it's not something

00:39:46,970 --> 00:39:51,880
that would be very hard to rewrite Indy

00:39:49,160 --> 00:39:51,880
Indy 7

00:39:54,960 --> 00:40:03,580
no all the examples I've given here are

00:39:58,170 --> 00:40:06,580
using d6 but these examples are supposed

00:40:03,580 --> 00:40:09,190
to be agnostic of any Drupal imitation

00:40:06,580 --> 00:40:11,800
it's really about testing an application

00:40:09,190 --> 00:40:13,540
so with test data you could write this

00:40:11,800 --> 00:40:16,060
and a different language Ruby or

00:40:13,540 --> 00:40:18,430
something you know it's more the

00:40:16,060 --> 00:40:21,070
concepts that I kind of want everyone to

00:40:18,430 --> 00:40:24,100
take away from not so much the specific

00:40:21,070 --> 00:40:25,390
implementation of Drupal or anything for

00:40:24,100 --> 00:40:27,700
example organizing your test is

00:40:25,390 --> 00:40:30,340
something you can do with any testing

00:40:27,700 --> 00:40:32,680
framework but yeah the examples I've i'm

00:40:30,340 --> 00:40:35,770
using in terms of the only thing that's

00:40:32,680 --> 00:40:37,930
d6 is the site and also the module i

00:40:35,770 --> 00:40:40,420
made as a helper which i haven't really

00:40:37,930 --> 00:40:45,900
touched on phpunit is what we've mostly

00:40:40,420 --> 00:40:50,100
been in and i believe i'm using 373 17

00:40:45,900 --> 00:41:01,540
but yeah so they've been in d6 but yeah

00:40:50,100 --> 00:41:04,080
yes absolutely one more time did the the

00:41:01,540 --> 00:41:04,080
feature files

00:41:09,190 --> 00:41:32,800
oh um a feature fixture feature for

00:41:15,849 --> 00:41:34,690
feature files right yeah yeah what so

00:41:32,800 --> 00:41:38,140
why did I choose phpunit to make the

00:41:34,690 --> 00:41:39,550
test well for it because I want to use

00:41:38,140 --> 00:41:41,230
for this type for this talk with

00:41:39,550 --> 00:41:42,520
webdriver in selenium and for something

00:41:41,230 --> 00:41:44,680
like B hat and what you're talking about

00:41:42,520 --> 00:41:48,700
it's a different paradigm it to me

00:41:44,680 --> 00:41:51,040
anyway it's something that is everyone

00:41:48,700 --> 00:41:53,440
familiar with B hat and how it works so

00:41:51,040 --> 00:41:55,150
B hat and I believe what you're

00:41:53,440 --> 00:41:57,099
mentioning features you actually write

00:41:55,150 --> 00:42:00,670
out text you say you know given that a

00:41:57,099 --> 00:42:02,800
user has logged in next line check check

00:42:00,670 --> 00:42:05,740
that they have on my account link and

00:42:02,800 --> 00:42:08,290
then it splits this out and to test it

00:42:05,740 --> 00:42:10,150
take sexual you know natural language

00:42:08,290 --> 00:42:12,400
and splits it out into n2 text and then

00:42:10,150 --> 00:42:14,890
you basically fill in those tests but

00:42:12,400 --> 00:42:17,560
from there then anytime someone says

00:42:14,890 --> 00:42:19,060
given and it uses regex so given a users

00:42:17,560 --> 00:42:21,130
logged in that test is already written

00:42:19,060 --> 00:42:23,619
and so you get all these little tests

00:42:21,130 --> 00:42:26,800
and people can just write paragraphs you

00:42:23,619 --> 00:42:31,470
know our test and natural English you

00:42:26,800 --> 00:42:31,470
know very easy if I might following yep

00:42:32,310 --> 00:42:43,900
so I'm sorry

00:42:34,840 --> 00:42:45,910
oh I haven't used it yeah so yeah so we

00:42:43,900 --> 00:42:49,540
use yeah Java does have it but we use

00:42:45,910 --> 00:42:51,850
we're using PHP or using PHP unit just

00:42:49,540 --> 00:42:54,070
because we in our organization we don't

00:42:51,850 --> 00:42:56,500
have a lot of Java developers but Java

00:42:54,070 --> 00:42:58,900
usually always has a better

00:42:56,500 --> 00:43:01,450
implementation even in selenium one than

00:42:58,900 --> 00:43:03,040
the other bindings we're the webdriver

00:43:01,450 --> 00:43:06,370
actually uses that what's called the

00:43:03,040 --> 00:43:08,080
JSON wire protocol that's what phpunit

00:43:06,370 --> 00:43:11,860
uses so it doesn't have the close

00:43:08,080 --> 00:43:15,520
relationship with with selenium that

00:43:11,860 --> 00:43:17,830
Java that Java does and I i believe net

00:43:15,520 --> 00:43:19,720
has a has a close relationship also in

00:43:17,830 --> 00:43:22,300
terms of its implementation so a PHP

00:43:19,720 --> 00:43:24,610
implementation is using the JSON wire

00:43:22,300 --> 00:43:26,380
protocol and and it's only only those

00:43:24,610 --> 00:43:28,120
things are available to it unless we go

00:43:26,380 --> 00:43:29,800
use something like B hat which kind of

00:43:28,120 --> 00:43:31,150
implements that but yeah I mean yeah

00:43:29,800 --> 00:43:34,000
you're right and I think that'll always

00:43:31,150 --> 00:43:36,580
be like that because it's I think ously

00:43:34,000 --> 00:43:38,890
there selenium is in Java and it and

00:43:36,580 --> 00:43:41,110
they always take the interface and they

00:43:38,890 --> 00:43:42,970
you know I was frustrating until you won

00:43:41,110 --> 00:43:44,620
because you've got this interface in

00:43:42,970 --> 00:43:46,690
Java you can go read the javadocs like

00:43:44,620 --> 00:43:48,340
that's the function i need you go and

00:43:46,690 --> 00:43:50,290
look for it you know on the on their

00:43:48,340 --> 00:43:54,340
interface the other protocols like odds

00:43:50,290 --> 00:44:03,550
it's not available there that I answer

00:43:54,340 --> 00:44:06,490
your question there yeah yes hmm yep yep

00:44:03,550 --> 00:44:09,700
i can actually yet we we run a full

00:44:06,490 --> 00:44:12,010
headless test system and all the tests

00:44:09,700 --> 00:44:15,580
work with Jenkins and we have a you know

00:44:12,010 --> 00:44:16,360
it yeah we we run builds based on we

00:44:15,580 --> 00:44:18,220
have a continuous integration

00:44:16,360 --> 00:44:20,200
environment in the last step of it it

00:44:18,220 --> 00:44:28,570
runs a simple tests and then it runs all

00:44:20,200 --> 00:44:33,760
of our selenium tests do it yeah um so I

00:44:28,570 --> 00:44:35,770
wanted to go through actually I want to

00:44:33,760 --> 00:44:38,710
go through an example of scaling out

00:44:35,770 --> 00:44:39,700
your development environment but enough

00:44:38,710 --> 00:44:40,720
but I was not going to go through

00:44:39,700 --> 00:44:42,670
setting up a continuous integration

00:44:40,720 --> 00:44:44,860
environment though on that that's kind

00:44:42,670 --> 00:44:47,710
of beyond I mean it's going to be on

00:44:44,860 --> 00:44:48,520
this but yeah I did want to go through

00:44:47,710 --> 00:44:49,750
scaling you know

00:44:48,520 --> 00:44:51,910
or just at least talk about it I don't

00:44:49,750 --> 00:44:54,850
think we're gonna have time for it but

00:44:51,910 --> 00:44:59,140
no I wasn't going to go through a CI SEI

00:44:54,850 --> 00:45:01,420
today just as a side note there was a

00:44:59,140 --> 00:45:03,730
mention of B hat which will be the next

00:45:01,420 --> 00:45:08,200
session on this track after lunch and

00:45:03,730 --> 00:45:10,750
there will also be talks about CI and

00:45:08,200 --> 00:45:18,940
Drupal see I processes and things like

00:45:10,750 --> 00:45:23,710
that so just stay tuned and see so last

00:45:18,940 --> 00:45:26,320
one at least okay mm-hmm ok we have a

00:45:23,710 --> 00:45:36,640
PowerPoint back I apologize about

00:45:26,320 --> 00:45:41,860
Microsoft oh yeah it's true did someone

00:45:36,640 --> 00:45:43,480
call them over okay well while that's

00:45:41,860 --> 00:45:48,160
loading up I can I I know what I'm

00:45:43,480 --> 00:45:50,620
talking about so our next anyway so in

00:45:48,160 --> 00:45:53,410
terms of scaling there's there's kind of

00:45:50,620 --> 00:45:57,070
I think of it in three steps scaling

00:45:53,410 --> 00:46:01,140
scaling your tests and then scaling a

00:45:57,070 --> 00:46:01,140
dev environment I'll witnessing

00:46:07,079 --> 00:46:22,619
I can't click anywhere yeah cuz i'm on a

00:46:16,079 --> 00:46:24,739
1024 oh my goodness oh yeah that always

00:46:22,619 --> 00:46:24,739
works

00:46:27,290 --> 00:46:46,280
I can't even uh oh thank you yep you

00:46:39,470 --> 00:47:00,350
give me hope though there we go that

00:46:46,280 --> 00:47:06,880
always works uh I'm gonna go I've got it

00:47:00,350 --> 00:47:06,880
I gotta fix for this look at that

00:47:19,940 --> 00:47:28,880
ok so I just started oh cuz i'm looking

00:47:26,369 --> 00:47:28,880
at the PDF

00:47:32,010 --> 00:47:39,450
alright so the first thing I want to

00:47:34,470 --> 00:47:42,720
talk about was scaling the test and is

00:47:39,450 --> 00:47:45,750
anyone here familiar with para test so

00:47:42,720 --> 00:47:48,270
para test is a multi-threaded runner for

00:47:45,750 --> 00:48:01,080
for phpunit they aim to run for you know

00:47:48,270 --> 00:48:03,540
any testing framework okay we're back so

00:48:01,080 --> 00:48:04,950
you know scale the tests and then scale

00:48:03,540 --> 00:48:07,320
selenium we're in top of the selenium

00:48:04,950 --> 00:48:11,640
grid and then scale the test environment

00:48:07,320 --> 00:48:13,710
and I would say the hardest of these is

00:48:11,640 --> 00:48:16,560
a third one your development environment

00:48:13,710 --> 00:48:18,690
and the and the reason I mentioned this

00:48:16,560 --> 00:48:20,730
is failing a test is pretty

00:48:18,690 --> 00:48:22,500
straightforward there's things I will

00:48:20,730 --> 00:48:24,720
just break it out into like 30-40

00:48:22,500 --> 00:48:26,490
threads and you can you know pound at it

00:48:24,720 --> 00:48:29,430
there's third parties that will help you

00:48:26,490 --> 00:48:32,250
you know run multiple selenium on the

00:48:29,430 --> 00:48:34,470
grid like sauce labs I'm sure like

00:48:32,250 --> 00:48:36,300
people familiar with but after that

00:48:34,470 --> 00:48:38,400
you've got 60 tests running at the same

00:48:36,300 --> 00:48:41,250
time but if but if you don't have a test

00:48:38,400 --> 00:48:43,380
environment that can handle 60 tests

00:48:41,250 --> 00:48:44,820
pounding at it you know then you know

00:48:43,380 --> 00:48:46,680
it's all for nothing you know that

00:48:44,820 --> 00:48:49,620
that's your one bottle neck and so I

00:48:46,680 --> 00:48:51,290
would say if if you were going you know

00:48:49,620 --> 00:48:53,190
if you're if you're dealing with this

00:48:51,290 --> 00:48:54,600
you know you can scale the test to a

00:48:53,190 --> 00:48:56,550
certain point but at some point you're

00:48:54,600 --> 00:48:58,860
going to need to scale your development

00:48:56,550 --> 00:48:59,970
environment you know taking your one

00:48:58,860 --> 00:49:01,650
environment may be putting on four

00:48:59,970 --> 00:49:04,230
machines and then doing a round robin if

00:49:01,650 --> 00:49:06,810
you have that you know the wherewithal

00:49:04,230 --> 00:49:08,460
and the resources to put in a load

00:49:06,810 --> 00:49:11,070
balancer in front so it does it for you

00:49:08,460 --> 00:49:13,110
but just something that either loads it

00:49:11,070 --> 00:49:14,910
out or you can spend the money and buy

00:49:13,110 --> 00:49:16,650
like a 16 node cluster or something like

00:49:14,910 --> 00:49:20,300
that but you know I think it'd probably

00:49:16,650 --> 00:49:24,060
be easier to to scale it out so first

00:49:20,300 --> 00:49:26,120
we'll talk about para tests and I chose

00:49:24,060 --> 00:49:28,590
the three-headed monster because it's

00:49:26,120 --> 00:49:31,620
anytime you have threads it can be be a

00:49:28,590 --> 00:49:33,810
little scary paratus is multi-threaded

00:49:31,620 --> 00:49:36,660
running for phpunit that's the only one

00:49:33,810 --> 00:49:38,730
I found that actually works well because

00:49:36,660 --> 00:49:41,010
if you if you have a dependency for

00:49:38,730 --> 00:49:43,410
example and phpunit has the ability to

00:49:41,010 --> 00:49:44,980
filter so if you have to filter on one

00:49:43,410 --> 00:49:52,660
test so if I do

00:49:44,980 --> 00:50:00,310
command like phpunit and I want to

00:49:52,660 --> 00:50:04,450
filter oh oh sorry thank you yeah so if

00:50:00,310 --> 00:50:06,940
I do you know like filter that then I

00:50:04,450 --> 00:50:08,560
then it will only run that one test the

00:50:06,940 --> 00:50:09,820
problem is if that test is dependency

00:50:08,560 --> 00:50:13,210
it's in another file it will fail

00:50:09,820 --> 00:50:15,190
because phpunit isn't smart enough to go

00:50:13,210 --> 00:50:16,750
and load the other file as a dependency

00:50:15,190 --> 00:50:20,050
so that when the test runs it runs a

00:50:16,750 --> 00:50:22,720
dependency and then runs that test para

00:50:20,050 --> 00:50:24,190
tests gets around that because it does

00:50:22,720 --> 00:50:25,810
then it looks at all the tests and it

00:50:24,190 --> 00:50:27,460
kind of knows the dependency tree so

00:50:25,810 --> 00:50:28,390
when it goes and if you think about if

00:50:27,460 --> 00:50:30,100
you're going to do this yourself the

00:50:28,390 --> 00:50:31,510
first thing you would do is find out how

00:50:30,100 --> 00:50:33,190
many tests you have split those into

00:50:31,510 --> 00:50:35,230
different threads you know make a thread

00:50:33,190 --> 00:50:36,820
stack and put them you know on each one

00:50:35,230 --> 00:50:38,859
and that's when you run the dependency

00:50:36,820 --> 00:50:40,750
problem para test basically does that

00:50:38,859 --> 00:50:42,310
but it then it's smart enough to load it

00:50:40,750 --> 00:50:44,080
the correct way to say okay this test

00:50:42,310 --> 00:50:45,700
has this dependency this file needs be

00:50:44,080 --> 00:50:51,010
loaded with it so then that test can go

00:50:45,700 --> 00:50:54,060
out and be run anyone see my mouse

00:50:51,010 --> 00:50:54,060
pointer there it is

00:50:57,680 --> 00:51:05,549
so I do like para tests and I don't

00:51:02,489 --> 00:51:08,400
really have other suggestions for doing

00:51:05,549 --> 00:51:12,180
it it's it's a successor to sauce labs

00:51:08,400 --> 00:51:15,960
started it with another test runner and

00:51:12,180 --> 00:51:18,539
then this is kind of the the successor

00:51:15,960 --> 00:51:23,729
to it and it's pretty good next is the

00:51:18,539 --> 00:51:24,869
grid selenium grid is a way to for

00:51:23,729 --> 00:51:26,999
example are running out my local machine

00:51:24,869 --> 00:51:29,999
and the grid puts it out onto multiple

00:51:26,999 --> 00:51:33,119
machines so I can then take you know six

00:51:29,999 --> 00:51:35,190
different computers and and each one

00:51:33,119 --> 00:51:36,599
with different configurations and run

00:51:35,190 --> 00:51:38,609
them from one area and when I run my

00:51:36,599 --> 00:51:40,319
test it puts them out on different

00:51:38,609 --> 00:51:41,940
machines it's also smart enough to know

00:51:40,319 --> 00:51:43,799
that this machine only has internet

00:51:41,940 --> 00:51:45,509
explorer on it this one has Firefox and

00:51:43,799 --> 00:51:48,359
Internet Explorer so when you send it

00:51:45,509 --> 00:51:49,799
send it to the right machine and I can

00:51:48,359 --> 00:51:53,039
go over the grid how many people have

00:51:49,799 --> 00:51:54,809
worked with the selenium grid before ok

00:51:53,039 --> 00:52:02,700
so I'm going to do a quick example of

00:51:54,809 --> 00:52:03,749
both the grid and para test so the first

00:52:02,700 --> 00:52:05,729
thing I'm going to do is I'm going to

00:52:03,749 --> 00:52:09,059
shut down my standalone server oh you

00:52:05,729 --> 00:52:14,460
guys can't see that can you let me turn

00:52:09,059 --> 00:52:21,349
on mirroring ok the first thing I'm

00:52:14,460 --> 00:52:23,549
going to do is um so I've shut down my

00:52:21,349 --> 00:52:26,009
standalone server and what I'm going to

00:52:23,549 --> 00:52:29,789
do is I'm going to start a hub and all

00:52:26,009 --> 00:52:30,869
this is it's the same jar file and the

00:52:29,789 --> 00:52:33,180
nice part about this is everything

00:52:30,869 --> 00:52:36,150
selenium one selenium to slam grid it's

00:52:33,180 --> 00:52:40,469
all in the same file if you get the big

00:52:36,150 --> 00:52:46,890
one so anyway it run the jar file and we

00:52:40,469 --> 00:52:49,219
just run it as a hub so I'm gonna start

00:52:46,890 --> 00:52:49,219
the hub

00:52:53,329 --> 00:53:01,470
and then I'm going to start two nodes

00:52:58,789 --> 00:53:03,930
and you'll see what I've done here I

00:53:01,470 --> 00:53:06,029
just changed the role to note I told her

00:53:03,930 --> 00:53:08,579
where the hub is and i also told it that

00:53:06,029 --> 00:53:11,220
the maximum recessions is one just

00:53:08,579 --> 00:53:13,559
because my laptop can't really handle a

00:53:11,220 --> 00:53:15,450
lot of things so I'm going to start two

00:53:13,559 --> 00:53:17,339
nodes each with a maximum of one session

00:53:15,450 --> 00:53:20,970
so you can see that the grid is going to

00:53:17,339 --> 00:53:23,640
put one test on one note and the other

00:53:20,970 --> 00:53:29,190
test in the other node so I'm going to

00:53:23,640 --> 00:53:35,400
go ahead and start that up I'm gonna

00:53:29,190 --> 00:53:37,079
start a second node over here I'm just

00:53:35,400 --> 00:53:40,170
giving them different port numbers to

00:53:37,079 --> 00:53:41,579
that number afterwards is so what the

00:53:40,170 --> 00:53:43,230
with the nodes do they start up and I

00:53:41,579 --> 00:53:45,150
told it where the hub is and then they

00:53:43,230 --> 00:53:47,099
pull for the for the hub and they

00:53:45,150 --> 00:53:50,430
register themselves and they also all

00:53:47,099 --> 00:53:52,349
this information here is is its

00:53:50,430 --> 00:53:56,279
capabilities so the node will tell the

00:53:52,349 --> 00:54:01,470
hub these are my capabilities running

00:53:56,279 --> 00:54:04,559
out of time okay so you can see it here

00:54:01,470 --> 00:54:06,960
you can see I've got two row proxies and

00:54:04,559 --> 00:54:09,200
then I'm going to go ahead and run pair

00:54:06,960 --> 00:54:09,200
test

00:54:14,519 --> 00:54:23,079
just make sure you do the right one and

00:54:20,579 --> 00:54:25,209
I'm telling it just to use two processes

00:54:23,079 --> 00:54:27,579
so I don't wanna kill my computer and

00:54:25,209 --> 00:54:29,529
then the dash F just means functional by

00:54:27,579 --> 00:54:31,119
default it does sweets in each thread

00:54:29,529 --> 00:54:35,650
and I just want it to do each single

00:54:31,119 --> 00:54:37,420
function and one thread so we don't

00:54:35,650 --> 00:54:38,709
really care about the test running it's

00:54:37,420 --> 00:54:41,009
going to run it and we're going to see

00:54:38,709 --> 00:54:41,009
them pop up

00:54:45,540 --> 00:54:54,420
so there's one and there's the other and

00:54:51,510 --> 00:54:55,860
then if I go to the grid you'll see

00:54:54,420 --> 00:54:57,420
these are dimmed out because now it's

00:54:55,860 --> 00:54:58,980
saying we've got one concurrent tests

00:54:57,420 --> 00:55:00,360
and then it's just going to keep going

00:54:58,980 --> 00:55:02,280
because now it's putting it between the

00:55:00,360 --> 00:55:03,480
two and you see this is one node this is

00:55:02,280 --> 00:55:05,610
the other node and it's splitting it

00:55:03,480 --> 00:55:07,710
between the two as a test come in so

00:55:05,610 --> 00:55:09,090
that's how the note that's how the grid

00:55:07,710 --> 00:55:11,010
works and you can scale this out to

00:55:09,090 --> 00:55:13,350
multiple machines as you can guess I

00:55:11,010 --> 00:55:15,150
could do a tunnel to my remote machine

00:55:13,350 --> 00:55:16,680
that's headless and put input test over

00:55:15,150 --> 00:55:19,350
there so then you can start to scale at

00:55:16,680 --> 00:55:20,820
your test so now we've got para test

00:55:19,350 --> 00:55:22,590
running in parallel we've got our grid

00:55:20,820 --> 00:55:24,030
set up and honestly the last thing is

00:55:22,590 --> 00:55:25,260
after you scale that up you've got to

00:55:24,030 --> 00:55:27,600
scale your development environment if

00:55:25,260 --> 00:55:29,070
because if you've got you know 30

00:55:27,600 --> 00:55:30,930
threads run at the same time you've got

00:55:29,070 --> 00:55:33,960
to be able to handle that that kind of

00:55:30,930 --> 00:55:35,940
load and i think i might be at a time I

00:55:33,960 --> 00:55:39,450
want to leave some Q&A does anyone have

00:55:35,940 --> 00:55:50,940
any any questions or comments are fine

00:55:39,450 --> 00:55:53,300
too yes but with the Oh with contact

00:55:50,940 --> 00:55:53,300
information

00:55:59,540 --> 00:56:12,640
about this one oh oh yes is this okay

00:56:21,320 --> 00:56:32,820
no 10 wave driver ready it is it can be

00:56:29,280 --> 00:56:35,790
used again with the drawbacks of

00:56:32,820 --> 00:56:39,180
webdriver I I also should have mentioned

00:56:35,790 --> 00:56:42,480
like anything there are some bugs for

00:56:39,180 --> 00:56:44,040
examples in chrome and I know the

00:56:42,480 --> 00:56:46,020
specifics but one of the event fires

00:56:44,040 --> 00:56:48,990
isn't isn't perfect they're working on

00:56:46,020 --> 00:56:51,870
that and you need a separate download a

00:56:48,990 --> 00:56:53,430
driver because like we said each browser

00:56:51,870 --> 00:56:55,560
uses its native driver so you can

00:56:53,430 --> 00:56:57,930
download a driver for Chrome for it to

00:56:55,560 --> 00:57:00,270
drive effort to be driven but I would

00:56:57,930 --> 00:57:02,430
say it's ready to be used definitely

00:57:00,270 --> 00:57:03,990
they've already deprecated selenium one

00:57:02,430 --> 00:57:06,690
so slim to is where they're going at

00:57:03,990 --> 00:57:08,310
webdriver but I but it's like again not

00:57:06,690 --> 00:57:09,810
a magic pill there's like anything going

00:57:08,310 --> 00:57:11,400
to be some bugs here and there and some

00:57:09,810 --> 00:57:21,090
growing pains but i'd say it's ready to

00:57:11,400 --> 00:57:23,730
be used yes well I again so with that a

00:57:21,090 --> 00:57:26,100
bit hat talk it's really I think it

00:57:23,730 --> 00:57:28,050
should go to it I think for me I take

00:57:26,100 --> 00:57:31,350
the hat as a different animal because

00:57:28,050 --> 00:57:35,190
this is this is a testing tool and the

00:57:31,350 --> 00:57:37,020
hat is is it's almost something like it

00:57:35,190 --> 00:57:39,060
suppose you have an organization a lot

00:57:37,020 --> 00:57:41,370
of buy-in because you could you know you

00:57:39,060 --> 00:57:42,570
for example you user story and you have

00:57:41,370 --> 00:57:43,920
someone who wants something done or even

00:57:42,570 --> 00:57:46,200
if your consultant you give them the

00:57:43,920 --> 00:57:48,780
functional paragraph like given the

00:57:46,200 --> 00:57:51,270
users logged in and it's you know eight

00:57:48,780 --> 00:57:52,920
o'clock give them a lottery ticket right

00:57:51,270 --> 00:57:54,390
and then you put that functionality you

00:57:52,920 --> 00:57:56,190
give it to your client client like yes I

00:57:54,390 --> 00:57:57,630
sign off on that and that contract is

00:57:56,190 --> 00:57:59,520
now kind of living breathing because now

00:57:57,630 --> 00:58:01,680
you have tests that adhere to this exact

00:57:59,520 --> 00:58:03,810
contract and so now it's kind of a more

00:58:01,680 --> 00:58:05,040
I take it as a kind of an organizational

00:58:03,810 --> 00:58:07,470
thing I mean you could use it just as a

00:58:05,040 --> 00:58:10,740
PQ a tool but I don't really see much

00:58:07,470 --> 00:58:13,140
benefit of that over all the other

00:58:10,740 --> 00:58:15,090
things that are out there for QA tools

00:58:13,140 --> 00:58:16,740
of just driving a browser based upon

00:58:15,090 --> 00:58:18,150
because you know you get the specs like

00:58:16,740 --> 00:58:20,010
okay they use needs to log in and look

00:58:18,150 --> 00:58:21,360
at this and look okay well you translate

00:58:20,010 --> 00:58:24,030
it you put it there but you're always

00:58:21,360 --> 00:58:25,770
doing a proxy in between you and the

00:58:24,030 --> 00:58:26,640
person who wants the feature you know

00:58:25,770 --> 00:58:28,020
they're seeing one thing you're

00:58:26,640 --> 00:58:29,610
implementing that the test and you might

00:58:28,020 --> 00:58:31,860
have to tweak is like I meant this you

00:58:29,610 --> 00:58:33,720
know but when you have you have this

00:58:31,860 --> 00:58:34,450
like natural language that says like

00:58:33,720 --> 00:58:36,099
giving

00:58:34,450 --> 00:58:38,560
users logged in and at six o'clock or

00:58:36,099 --> 00:58:40,630
you or you specify more like oh actually

00:58:38,560 --> 00:58:42,640
I need the background the lottery ticket

00:58:40,630 --> 00:58:44,320
to be gray given the users logged in and

00:58:42,640 --> 00:58:46,180
it's after eight o'clock give them a

00:58:44,320 --> 00:58:47,619
lottery ticket that is gray and now

00:58:46,180 --> 00:58:49,270
you're now you have you know ok now we

00:58:47,619 --> 00:58:52,540
have a contract that says this is what

00:58:49,270 --> 00:58:55,180
we want so I to me that they don't

00:58:52,540 --> 00:58:56,470
purely totally equate on a technical

00:58:55,180 --> 00:58:58,980
level maybe because you can write things

00:58:56,470 --> 00:59:02,290
under them like the Hat can use

00:58:58,980 --> 00:59:04,510
webdriver wait waiter anything

00:59:02,290 --> 00:59:08,349
underneath to drive the test it has a

00:59:04,510 --> 00:59:09,940
pure HTTP tester that'll just do curl

00:59:08,349 --> 00:59:11,589
commands so it doesn't even fire /

00:59:09,940 --> 00:59:12,700
browser so if you need like you know

00:59:11,589 --> 00:59:16,599
pure speed and you know you don't need

00:59:12,700 --> 00:59:18,940
JavaScript it'll just do that but you

00:59:16,599 --> 00:59:20,440
know I think with all that architecture

00:59:18,940 --> 00:59:21,700
I think there's something else there

00:59:20,440 --> 00:59:23,200
when you when you're when you're talking

00:59:21,700 --> 00:59:25,810
about you know like natural language and

00:59:23,200 --> 00:59:28,329
and and whatnot pected so that that's my

00:59:25,810 --> 00:59:31,180
personal opinion I'm sorry but we'll

00:59:28,329 --> 00:59:35,170
have to end here we continue the testing

00:59:31,180 --> 00:59:38,320
threat in the subsequent sessions and of

00:59:35,170 --> 00:59:44,140
course artist is available to you for

00:59:38,320 --> 00:59:48,690
personal talks so a but will have the ND

00:59:44,140 --> 00:59:48,690
the official session here thank you

01:00:04,390 --> 01:00:16,490
yeah with the most simple test covers

01:00:12,740 --> 01:00:18,950
the need for functions but for energy

01:00:16,490 --> 01:00:21,770
integration tests for example Ajax forms

01:00:18,950 --> 01:00:23,540
and full stack integration things you

01:00:21,770 --> 01:00:26,570
need something like like webdriver that

01:00:23,540 --> 01:00:28,849
exit launches browser that doesn't pop

01:00:26,570 --> 01:00:33,170
up windows because simple tests has a

01:00:28,849 --> 01:00:35,300
very simple mechanism for it does a

01:00:33,170 --> 01:00:38,359
basic curl commands when it does our

01:00:35,300 --> 01:00:42,530
posting Sophia fini de Tesla you know

01:00:38,359 --> 01:00:45,349
when I my hover over this text box pops

01:00:42,530 --> 01:00:49,790
up yo you can't you can't do that in

01:00:45,349 --> 01:00:52,640
something but condé selenium drive and

01:00:49,790 --> 01:00:54,320
phpunit you can do anything of it

01:00:52,640 --> 01:00:58,760
doesn't cover all what you know what you

01:00:54,320 --> 01:01:01,609
can do in synchronism thank ya the PHP

01:00:58,760 --> 01:01:03,920
and then you can cover anything that you

01:01:01,609 --> 01:01:05,330
are doing with simple disguise yes it's

01:01:03,920 --> 01:01:08,359
far better yeah it's far better the

01:01:05,330 --> 01:01:10,460
migration of chp to PHP unit testing

01:01:08,359 --> 01:01:12,560
because so why didn't you to go all the

01:01:10,460 --> 01:01:13,580
way and just a min has to because it

01:01:12,560 --> 01:01:15,320
because if you're if you're gonna

01:01:13,580 --> 01:01:17,119
present both i need you to just test

01:01:15,320 --> 01:01:20,450
like an algorithm I need to make sure

01:01:17,119 --> 01:01:22,550
that this does 1 plus 1 is equal to 2

01:01:20,450 --> 01:01:24,770
you know I can just test that function

01:01:22,550 --> 01:01:26,810
simple test very quickly we're like you

01:01:24,770 --> 01:01:29,250
saw the subtle when this is gone

01:01:26,810 --> 01:01:32,310
wait for the browser to pop up so its

01:01:29,250 --> 01:01:35,430
speed and it's just all right with the

01:01:32,310 --> 01:01:36,900
ambiguous listed I've got I've gotta

01:01:35,430 --> 01:01:39,450
talk that goes into this time I doing it

01:01:36,900 --> 01:01:40,860
here but it basically yeah unit-testing

01:01:39,450 --> 01:01:42,000
well just things like the function

01:01:40,860 --> 01:01:44,550
you're talking about and then you have a

01:01:42,000 --> 01:01:46,320
UI testing which is never got level a

01:01:44,550 --> 01:01:48,600
lot of what he was showing is that

01:01:46,320 --> 01:01:50,820
higher level we still need to do all of

01:01:48,600 --> 01:01:52,980
the other testicle and you can do it in

01:01:50,820 --> 01:01:54,540
phpunit you can do in a simple task of

01:01:52,980 --> 01:01:57,690
the reason everything is migrating

01:01:54,540 --> 01:02:00,600
awaited simple test PHP interesting is

01:01:57,690 --> 01:02:03,570
enforced Angela Kate helping that

01:02:00,600 --> 01:02:05,190
recommend doing all your tests and maybe

01:02:03,570 --> 01:02:07,980
that relates to the other question that

01:02:05,190 --> 01:02:11,310
i have is is anything of that can also

01:02:07,980 --> 01:02:15,810
cover the need for testing theming level

01:02:11,310 --> 01:02:18,210
or you because you showed only things

01:02:15,810 --> 01:02:20,940
like forms and actually I wouldn't give

01:02:18,210 --> 01:02:23,130
examples various ways I didn't want

01:02:20,940 --> 01:02:24,870
people to get caught up and how many is

01:02:23,130 --> 01:02:26,910
that you keep feet and I wanted to use

01:02:24,870 --> 01:02:28,140
the same example throughout so everyone

01:02:26,910 --> 01:02:29,400
kind of could build off and see I've

01:02:28,140 --> 01:02:31,530
seen that before what's different from

01:02:29,400 --> 01:02:34,200
Caleb it was a good news a good intro as

01:02:31,530 --> 01:02:35,670
well yeah isn't you covered you covered

01:02:34,200 --> 01:02:37,440
basics and you step through it was it

01:02:35,670 --> 01:02:43,260
was good you got it you got bit by

01:02:37,440 --> 01:02:45,270
Murphy's Law two or three times and you

01:02:43,260 --> 01:02:47,220
also get to do first one thank you thank

01:02:45,270 --> 01:02:49,850
you for taking up the bullet do their

01:02:47,220 --> 01:02:49,850
own letters over

01:02:53,060 --> 01:02:58,100
yeah so I can bring that up oh and

01:02:56,630 --> 01:02:59,450
that's supposed to say miss I went ahead

01:02:58,100 --> 01:03:01,940
and started trying to do a continuous

01:02:59,450 --> 01:03:03,440
integration page then he came so long

01:03:01,940 --> 01:03:05,120
that it was I couldn't do it with me a

01:03:03,440 --> 01:03:07,220
great lighter so don't feel bad that I

01:03:05,120 --> 01:03:13,390
think that's a huge pc the whole lap any

01:03:07,220 --> 01:03:13,390
exactly I'll talk to you later okay yeah

01:03:14,560 --> 01:03:20,450
there there is but I I don't know if

01:03:18,290 --> 01:03:26,900
we're going to headless silentium so but

01:03:20,450 --> 01:03:28,640
yeah it'll get you started um there's no

01:03:26,900 --> 01:03:31,490
there's no display so there could be a

01:03:28,640 --> 01:03:33,800
boxer but it's running firefox it does

01:03:31,490 --> 01:03:35,980
is doing Ajax rice and pop ups but we

01:03:33,800 --> 01:03:40,310
call it had let's go there's no display

01:03:35,980 --> 01:03:41,540
mmm yum yep we saw the other next vfe

01:03:40,310 --> 01:03:44,480
buffer and then it just rides in the

01:03:41,540 --> 01:03:47,380
frames so yeah this is this is ours and

01:03:44,480 --> 01:03:47,380
all of our tester

01:03:51,309 --> 01:03:57,709
yeah yeah yeah i'll be around all day i

01:03:54,349 --> 01:04:01,989
have another talk tomorrow I'm so so I

01:03:57,709 --> 01:04:01,989

YouTube URL: https://www.youtube.com/watch?v=ZvBuX0VsDXQ


