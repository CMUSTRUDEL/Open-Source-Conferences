Title: DrupalCon Prague 2013: MONITORING DRUPAL IN AN INFRASTRUCTURE AS CODE AGE
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	Monitoring an infrastructure is still one of the most complex tasks at hand. Yet in this age of Infrastructure as Code a lot of people are still stuck using tools that haven't adapted. This talk will explain you how to look at monitoring your infrastructure from another angle, an automated angle, and what tools play well with Drupal.
Captions: 
	00:00:00,020 --> 00:00:06,960
so I'm the last guy standing between you

00:00:03,300 --> 00:00:08,700
and bears some of you might expect them

00:00:06,960 --> 00:00:10,830
en torno here talking about distributed

00:00:08,700 --> 00:00:14,549
systems but he pulled this talk two

00:00:10,830 --> 00:00:17,550
weeks ago and during one of the tractor

00:00:14,549 --> 00:00:19,560
calls I got pulled out as being his

00:00:17,550 --> 00:00:21,779
backup so that's why today I'll be

00:00:19,560 --> 00:00:23,550
talking about monitoring in an

00:00:21,779 --> 00:00:25,590
infrastructure monitoring Drupal in an

00:00:23,550 --> 00:00:26,910
infrastructure as code H if you feel

00:00:25,590 --> 00:00:28,410
like you're in the wrong talk and you

00:00:26,910 --> 00:00:31,650
don't want to see this feel free to

00:00:28,410 --> 00:00:33,390
actually still leave because I can

00:00:31,650 --> 00:00:35,430
understand if you feel that way in 10

00:00:33,390 --> 00:00:40,170
minutes you can also do but please bring

00:00:35,430 --> 00:00:43,670
me a beer then so yeah let me first

00:00:40,170 --> 00:00:43,670
introduce myself I'm pleased about that

00:00:43,820 --> 00:00:49,890
there's a faq out there I'm not related

00:00:46,739 --> 00:00:53,940
to dress but we do know each other since

00:00:49,890 --> 00:00:56,340
before Drupal existed ages ago I used to

00:00:53,940 --> 00:00:59,579
be a software developer even wrote bhp

00:00:56,340 --> 00:01:01,500
and then I became an Operations person

00:00:59,579 --> 00:01:03,719
because I need to deploy stuff and I was

00:01:01,500 --> 00:01:06,689
the guy constantly rocking machines and

00:01:03,719 --> 00:01:09,720
putting stuff in production today my

00:01:06,689 --> 00:01:11,850
role is I'm the CTO of one of the larger

00:01:09,720 --> 00:01:14,820
open-source consultancy firms in Europe

00:01:11,850 --> 00:01:17,850
we are in Nuits we have offices in

00:01:14,820 --> 00:01:19,530
Belgium the Netherlands in Kiev we do a

00:01:17,850 --> 00:01:24,630
lot of Drupal work but we're not a

00:01:19,530 --> 00:01:28,189
Drupal shop so if i look at what i do

00:01:24,630 --> 00:01:31,170
today i'm mostly building large-scale

00:01:28,189 --> 00:01:34,680
infrastructures doing it the dev up

00:01:31,170 --> 00:01:38,610
style so doing continuous delivery doing

00:01:34,680 --> 00:01:44,670
automated infrastructure who can tell me

00:01:38,610 --> 00:01:50,189
what DevOps is this is DevOps track guys

00:01:44,670 --> 00:01:52,770
who can tell me what DevOps is are you

00:01:50,189 --> 00:01:58,310
all afraid to reply to questions or does

00:01:52,770 --> 00:01:58,310
nobody know who was in my talk last year

00:01:59,149 --> 00:02:05,840
okay so nobody knows what DevOps is to

00:02:05,549 --> 00:02:13,819
pee

00:02:05,840 --> 00:02:17,239
okay be sure collaboration of operations

00:02:13,819 --> 00:02:20,930
and developers now it give that a

00:02:17,239 --> 00:02:26,450
50-percent score so this is what DevOps

00:02:20,930 --> 00:02:28,940
is to me it's about culture it's about

00:02:26,450 --> 00:02:33,080
how developers and operations people

00:02:28,940 --> 00:02:34,819
work together it's about automation and

00:02:33,080 --> 00:02:36,379
when we talk about automation we mean

00:02:34,819 --> 00:02:38,660
ultimate all the thing we want to test

00:02:36,379 --> 00:02:39,920
automation or ultimate the builds we

00:02:38,660 --> 00:02:42,560
want to automate the deployments with

00:02:39,920 --> 00:02:44,239
one automated monitoring basically when

00:02:42,560 --> 00:02:46,910
we talk about automation we think about

00:02:44,239 --> 00:02:48,950
infrastructure as code and when we think

00:02:46,910 --> 00:02:50,870
about DevOps we also think about

00:02:48,950 --> 00:02:53,870
monitoring metrics and all that stuff

00:02:50,870 --> 00:02:56,379
and we also talked about sharing and

00:02:53,870 --> 00:03:00,349
that's the camps the clams keyboards

00:02:56,379 --> 00:03:01,700
which was coined by John Edwards Damon

00:03:00,349 --> 00:03:05,390
Edwards and John Willis we have a

00:03:01,700 --> 00:03:06,860
podcast called DevOps cafe and the L the

00:03:05,390 --> 00:03:09,079
influence of the lean movement has been

00:03:06,860 --> 00:03:10,549
introduced by Jean Kim because they

00:03:09,079 --> 00:03:12,980
figured out well there's a lot of lean

00:03:10,549 --> 00:03:16,489
stuff in this and there's a lot of stuff

00:03:12,980 --> 00:03:19,160
which is based on and it's also cool

00:03:16,489 --> 00:03:20,540
because if you had just the camps

00:03:19,160 --> 00:03:21,920
without the L in there lots of people

00:03:20,540 --> 00:03:24,049
figured out well if you make an anagram

00:03:21,920 --> 00:03:29,470
out of it it's just a scam which it's

00:03:24,049 --> 00:03:37,099
absolutely not so how many of you are

00:03:29,470 --> 00:03:40,220
testing your double coat okay some of

00:03:37,099 --> 00:03:43,069
you you have continuous integration you

00:03:40,220 --> 00:03:45,950
have stuff where you actually put in

00:03:43,069 --> 00:03:50,150
place an environment where software is

00:03:45,950 --> 00:03:52,430
being pushed to production with a set of

00:03:50,150 --> 00:03:55,239
rules with a set of checks which you

00:03:52,430 --> 00:03:55,239
want to succeed

00:03:59,500 --> 00:04:05,720
and that's how big organizations work

00:04:04,070 --> 00:04:07,340
that's how organizations work they're

00:04:05,720 --> 00:04:09,620
afraid of pushing software into

00:04:07,340 --> 00:04:11,360
production and they want to have tests

00:04:09,620 --> 00:04:14,660
in place that make sure that stuff goes

00:04:11,360 --> 00:04:17,030
the right way but for some reason on the

00:04:14,660 --> 00:04:19,100
infrastructure level on the actual

00:04:17,030 --> 00:04:21,530
operating system level we've been

00:04:19,100 --> 00:04:25,010
tolerating that people logged on to

00:04:21,530 --> 00:04:29,000
machines manually and started deploying

00:04:25,010 --> 00:04:30,950
stuff in there we didn't allow the

00:04:29,000 --> 00:04:33,910
software developers to do that but the

00:04:30,950 --> 00:04:38,930
infrastructure people well that was fine

00:04:33,910 --> 00:04:43,040
so with the advent of clouds and

00:04:38,930 --> 00:04:44,450
large-scale deployments there's a lot of

00:04:43,040 --> 00:04:46,730
new tooling that came on the market

00:04:44,450 --> 00:04:49,460
which allowed us to do this different

00:04:46,730 --> 00:04:52,730
and that's basically what infrastructure

00:04:49,460 --> 00:04:56,660
as code is about infrastructure as code

00:04:52,730 --> 00:04:59,330
makes us think again about how we build

00:04:56,660 --> 00:05:02,030
our infrastructure today how we model it

00:04:59,330 --> 00:05:04,700
how we can fastly reproduce the platform

00:05:02,030 --> 00:05:06,680
and how we can basically have disaster

00:05:04,700 --> 00:05:09,500
recovery for free the same way we build

00:05:06,680 --> 00:05:14,030
software and if I look at a platform

00:05:09,500 --> 00:05:16,640
these days there's a large part of that

00:05:14,030 --> 00:05:19,280
which I want to completely reproducible

00:05:16,640 --> 00:05:21,919
think about it like Drupal core nobody's

00:05:19,280 --> 00:05:25,490
going to touch this part or three skills

00:05:21,919 --> 00:05:27,530
a kitty and this part is completely in

00:05:25,490 --> 00:05:29,000
source codes everything there if i'm

00:05:27,530 --> 00:05:32,200
running a platform in production

00:05:29,000 --> 00:05:35,810
acceptance or testing it's identical

00:05:32,200 --> 00:05:38,840
then on top of that i have a part where

00:05:35,810 --> 00:05:40,550
i give it an identity like the sides

00:05:38,840 --> 00:05:43,250
directory where you basically give this

00:05:40,550 --> 00:05:44,630
is the v host it's this site you give it

00:05:43,250 --> 00:05:46,490
an identity with some specific

00:05:44,630 --> 00:05:48,260
configuration enable these modules and

00:05:46,490 --> 00:05:51,710
for the operating system for the whole

00:05:48,260 --> 00:05:54,470
stack it's pretty similar you add some

00:05:51,710 --> 00:05:56,660
business rules and the whole block down

00:05:54,470 --> 00:05:58,190
here that's something which is in

00:05:56,660 --> 00:05:59,750
version control which you can manage

00:05:58,190 --> 00:06:02,000
them which you can redeploy over and

00:05:59,750 --> 00:06:04,490
over and over again you need some scale

00:06:02,000 --> 00:06:07,039
out maybe you have some custom parts but

00:06:04,490 --> 00:06:09,349
it's all automated and that's something

00:06:07,039 --> 00:06:11,910
you can rebuild the thing you need to

00:06:09,349 --> 00:06:13,320
add anything you need to back up

00:06:11,910 --> 00:06:15,000
the actual user generated content

00:06:13,320 --> 00:06:17,640
because that's something which you

00:06:15,000 --> 00:06:19,920
cannot version it's going to be volatile

00:06:17,640 --> 00:06:22,080
it's going to change frequently but the

00:06:19,920 --> 00:06:23,460
whole lower stack you have to think you

00:06:22,080 --> 00:06:27,260
have to start thinking about that as

00:06:23,460 --> 00:06:27,260
code and make sure it can be reproduced

00:06:28,250 --> 00:06:33,600
infrastructure as code also means that

00:06:30,780 --> 00:06:35,280
as infrastructure people are doing this

00:06:33,600 --> 00:06:37,260
we need to start thinking as developers

00:06:35,280 --> 00:06:38,760
I mean I come from a development

00:06:37,260 --> 00:06:40,590
background a lot of other people come

00:06:38,760 --> 00:06:43,410
from a development background but we

00:06:40,590 --> 00:06:45,390
really think about our infrastructure as

00:06:43,410 --> 00:06:47,790
code we have quality checks in there we

00:06:45,390 --> 00:06:49,200
also use version control we also use

00:06:47,790 --> 00:06:52,040
testing we also use continuous

00:06:49,200 --> 00:06:54,870
integration and continuous delivery and

00:06:52,040 --> 00:06:56,820
that means we build up our core

00:06:54,870 --> 00:06:59,160
infrastructure that way we add the

00:06:56,820 --> 00:07:01,830
middleware deployment in this way apache

00:06:59,160 --> 00:07:05,280
solr engine eggs all the components that

00:07:01,830 --> 00:07:06,930
are used to build a website and we do

00:07:05,280 --> 00:07:09,390
this in an automated fashion we do

00:07:06,930 --> 00:07:12,480
continuous delivery of the full stack we

00:07:09,390 --> 00:07:14,100
and for security rules in there so we

00:07:12,480 --> 00:07:16,290
actually tune the parameters for this

00:07:14,100 --> 00:07:19,890
firewalls and all stuff automatically so

00:07:16,290 --> 00:07:22,800
when we deploy stuff we deploy a host a

00:07:19,890 --> 00:07:25,170
service and the application with the

00:07:22,800 --> 00:07:28,760
monitoring and that's the link to the

00:07:25,170 --> 00:07:36,440
monitoring part configured automatically

00:07:28,760 --> 00:07:36,440
so monitoring who likes monitoring

00:07:37,640 --> 00:07:40,640
really

00:07:48,000 --> 00:07:54,540
I mean about two years ago John Vincent

00:07:51,960 --> 00:07:57,570
losses on Twitter was really fed up with

00:07:54,540 --> 00:08:00,270
all the monitoring things we were having

00:07:57,570 --> 00:08:05,550
any basically tweeted with the hashtag

00:08:00,270 --> 00:08:07,920
monitoring sucks and he put up a git

00:08:05,550 --> 00:08:10,830
repository put in all the different

00:08:07,920 --> 00:08:12,900
tools he know and we pretty much started

00:08:10,830 --> 00:08:14,400
looking at what is out there what tools

00:08:12,900 --> 00:08:17,880
are out there what do we need to change

00:08:14,400 --> 00:08:22,500
what's new and then how can we improve

00:08:17,880 --> 00:08:25,110
this thing which is monitoring to me

00:08:22,500 --> 00:08:28,430
basically the monitoring sucks movement

00:08:25,110 --> 00:08:30,720
is a sub movement of the DevOps movement

00:08:28,430 --> 00:08:32,760
it's people who care about open source

00:08:30,720 --> 00:08:35,550
will care about monitoring and improving

00:08:32,760 --> 00:08:39,330
the monitoring space in the open source

00:08:35,550 --> 00:08:41,909
world and one of the reasons why

00:08:39,330 --> 00:08:43,979
monitoring sucks is well a lot of those

00:08:41,909 --> 00:08:46,260
tools are not built for scaling they

00:08:43,979 --> 00:08:47,910
have a GUI which is one page and if I

00:08:46,260 --> 00:08:51,870
five doesn't notes i'm going to go Paige

00:08:47,910 --> 00:08:53,700
Paige Paige monitoring usually before

00:08:51,870 --> 00:08:55,620
the infrastructure of code age is

00:08:53,700 --> 00:08:57,180
something that was an afterthought it

00:08:55,620 --> 00:08:58,890
was not in sync with reality you had

00:08:57,180 --> 00:09:00,510
added four new services but you never

00:08:58,890 --> 00:09:03,720
modified the actual monitoring comfy

00:09:00,510 --> 00:09:06,570
because it was all done manually it was

00:09:03,720 --> 00:09:08,430
mostly targeted at monitoring a host so

00:09:06,570 --> 00:09:10,830
you're monitoring your web server it

00:09:08,430 --> 00:09:12,510
pings Apache is running on it and Gen X

00:09:10,830 --> 00:09:14,580
is running in it but you're not actually

00:09:12,510 --> 00:09:17,430
monitoring all the different services on

00:09:14,580 --> 00:09:19,710
it because you don't have time to map

00:09:17,430 --> 00:09:21,600
that there's maybe one default free host

00:09:19,710 --> 00:09:23,160
which you're monitoring but all the

00:09:21,600 --> 00:09:24,600
other V host might have broken database

00:09:23,160 --> 00:09:28,500
connections and you're not monitoring

00:09:24,600 --> 00:09:30,210
that because it's manual so the services

00:09:28,500 --> 00:09:32,760
sometimes are monitored Apache desert

00:09:30,210 --> 00:09:36,210
the actual application never and that

00:09:32,760 --> 00:09:40,020
basically ends up in chaos and

00:09:36,210 --> 00:09:42,810
monitoring not being done correctly so

00:09:40,020 --> 00:09:45,990
fast forward a couple of months and at

00:09:42,810 --> 00:09:47,580
Devil's days Rome wolf Manson from

00:09:45,990 --> 00:09:49,589
recorded future he basically gave an

00:09:47,580 --> 00:09:52,740
ignite talk about his newfound love for

00:09:49,589 --> 00:09:55,350
monitoring he had found a way where he

00:09:52,740 --> 00:09:57,780
had integrated a bunch of new tools in

00:09:55,350 --> 00:10:00,080
his case ensel and Nick stila will be

00:09:57,780 --> 00:10:03,800
talking about sensu tomorrow

00:10:00,080 --> 00:10:10,370
and he started to find a newfound love

00:10:03,800 --> 00:10:12,560
for monetary so that ended up in we

00:10:10,370 --> 00:10:16,460
hosting monitoring hack sessions in our

00:10:12,560 --> 00:10:17,990
office people started organizing and

00:10:16,460 --> 00:10:19,850
dedicated conference bat monitoring

00:10:17,990 --> 00:10:22,490
called monitor ama which had the first

00:10:19,850 --> 00:10:26,990
event in Boston earlier this year and

00:10:22,490 --> 00:10:31,070
the European event was in Berlin last

00:10:26,990 --> 00:10:33,590
week where yet Stanek was there kara was

00:10:31,070 --> 00:10:35,390
there but he's not here so there were

00:10:33,590 --> 00:10:36,620
people a couple of people were there

00:10:35,390 --> 00:10:39,250
already from the Drupal community

00:10:36,620 --> 00:10:42,980
figuring out how to improve monitoring

00:10:39,250 --> 00:10:46,490
so quickly what's wrong with the current

00:10:42,980 --> 00:10:48,530
tools we were using I mean a lot of the

00:10:46,490 --> 00:10:50,330
tools were just not built to integrate

00:10:48,530 --> 00:10:53,390
with conflict management they either had

00:10:50,330 --> 00:10:56,600
no api to talk to it all or the api was

00:10:53,390 --> 00:11:00,170
completely broken or we changed every

00:10:56,600 --> 00:11:03,440
time they had absolutely no relation to

00:11:00,170 --> 00:11:05,480
scaling environment and they were

00:11:03,440 --> 00:11:08,150
focusing on stuff we don't care about

00:11:05,480 --> 00:11:09,500
like also detecting new services we

00:11:08,150 --> 00:11:11,510
don't care about also detecting new

00:11:09,500 --> 00:11:17,570
service because we are defining them in

00:11:11,510 --> 00:11:22,460
code to slack xenos sabic does it does

00:11:17,570 --> 00:11:24,770
anybody use those yesterday John topper

00:11:22,460 --> 00:11:28,790
was talking about how he loves zabbix

00:11:24,770 --> 00:11:31,010
and I love zabbix do if I have a 20 node

00:11:28,790 --> 00:11:32,630
environment because once i reach 100

00:11:31,010 --> 00:11:36,740
notes i need a full-time DBA to actually

00:11:32,630 --> 00:11:39,430
manage the database it's using the same

00:11:36,740 --> 00:11:42,740
with cacti the same with other tools

00:11:39,430 --> 00:11:44,900
then there were tools that are using

00:11:42,740 --> 00:11:46,970
round-robin databases like our rd tool

00:11:44,900 --> 00:11:50,990
which is an awesome tool if you live in

00:11:46,970 --> 00:11:52,970
the 80s but x use databases have evolved

00:11:50,990 --> 00:11:54,530
and now it's much easier to actually

00:11:52,970 --> 00:11:58,220
create metrics and monitoring and i'll

00:11:54,530 --> 00:11:59,720
come back to that later so there's a lot

00:11:58,220 --> 00:12:02,210
of tools which have been trying to do

00:11:59,720 --> 00:12:03,470
stuff good but there's a new generation

00:12:02,210 --> 00:12:05,450
of tools out there which is going to

00:12:03,470 --> 00:12:10,310
allow you to do stuff much flexible much

00:12:05,450 --> 00:12:12,310
better so we've defined infrastructure

00:12:10,310 --> 00:12:14,650
as code we've defined

00:12:12,310 --> 00:12:15,910
why monitoring sucked and why we really

00:12:14,650 --> 00:12:18,730
want to build something that now the

00:12:15,910 --> 00:12:20,560
next question is where do you start

00:12:18,730 --> 00:12:22,690
monitoring so where do you start

00:12:20,560 --> 00:12:29,500
monitoring what systems are you

00:12:22,690 --> 00:12:33,930
monitoring I heard somebody say

00:12:29,500 --> 00:12:37,210
something you monitor all the things

00:12:33,930 --> 00:12:39,580
indeed you monitor from in development

00:12:37,210 --> 00:12:41,020
you monitor your acceptance platform

00:12:39,580 --> 00:12:42,880
your production platform and a lot of

00:12:41,020 --> 00:12:44,980
organizations I work with they only

00:12:42,880 --> 00:12:48,100
monitored production because that's all

00:12:44,980 --> 00:12:50,380
they care about they have no idea about

00:12:48,100 --> 00:12:52,270
the load their application is generating

00:12:50,380 --> 00:12:55,120
in the test environment because they're

00:12:52,270 --> 00:12:57,300
not monitoring it and also they only

00:12:55,120 --> 00:12:59,710
have to have one monitoring platform

00:12:57,300 --> 00:13:01,210
they don't have a test platform for

00:12:59,710 --> 00:13:02,800
their monitoring tools so everything

00:13:01,210 --> 00:13:04,810
they try to monitor their actually

00:13:02,800 --> 00:13:06,250
breaking production live for than doing

00:13:04,810 --> 00:13:08,350
it and they're missing out on metrics

00:13:06,250 --> 00:13:13,240
because they're playing with their

00:13:08,350 --> 00:13:15,640
monitoring platform so we really want to

00:13:13,240 --> 00:13:17,290
have a feedback loop between developers

00:13:15,640 --> 00:13:19,300
and operations people as fast as

00:13:17,290 --> 00:13:21,010
possible in the development cycle if the

00:13:19,300 --> 00:13:23,080
developer adds a new feature if it

00:13:21,010 --> 00:13:25,120
creates a new view I want to see the

00:13:23,080 --> 00:13:27,790
metrics of the database I want to see

00:13:25,120 --> 00:13:29,470
that he created a slow query and I want

00:13:27,790 --> 00:13:31,240
to know that the moment he actually does

00:13:29,470 --> 00:13:33,880
the commit and the moment he creates

00:13:31,240 --> 00:13:36,160
that view if I only see that when he

00:13:33,880 --> 00:13:38,770
pushes it to production I'm gonna be

00:13:36,160 --> 00:13:40,990
about a week too late to tell him that

00:13:38,770 --> 00:13:42,940
well we need to add some indexes well

00:13:40,990 --> 00:13:45,210
you know the way you create that view

00:13:42,940 --> 00:13:47,950
maybe we should do it different and

00:13:45,210 --> 00:13:49,360
that's part of it from the lean movement

00:13:47,950 --> 00:13:50,950
that's what DevOps is about is by

00:13:49,360 --> 00:13:54,190
creating a fast feedback loop between

00:13:50,950 --> 00:13:56,980
developers and operations so you get to

00:13:54,190 --> 00:13:59,860
know how the system works before it

00:13:56,980 --> 00:14:03,730
reaches production before you need to

00:13:59,860 --> 00:14:05,110
scale it to a talent notes if you look

00:14:03,730 --> 00:14:07,930
at it from an architectural point of

00:14:05,110 --> 00:14:10,450
view lots of the tools we don't like are

00:14:07,930 --> 00:14:13,029
big and bloated tools where they have

00:14:10,450 --> 00:14:16,480
everything in one and they think they

00:14:13,029 --> 00:14:18,880
can do it all tink HP openview think

00:14:16,480 --> 00:14:21,459
tivoli the typical enterprise tools and

00:14:18,880 --> 00:14:22,990
a lot of the promising open source

00:14:21,459 --> 00:14:25,089
projects like hype arrogance you know if

00:14:22,990 --> 00:14:25,870
they try to emulate that but it doesn't

00:14:25,089 --> 00:14:27,400
work

00:14:25,870 --> 00:14:29,140
we need to take a step back and think

00:14:27,400 --> 00:14:32,020
about the good old UNIX philosophy where

00:14:29,140 --> 00:14:34,690
you have a bunch of small components

00:14:32,020 --> 00:14:38,860
that are all really good at doing their

00:14:34,690 --> 00:14:40,360
job and in that philosophy we need to

00:14:38,860 --> 00:14:43,510
have tools that are capable of

00:14:40,360 --> 00:14:46,360
collecting metrics transporting metrics

00:14:43,510 --> 00:14:51,100
to somewhere else typically that's a

00:14:46,360 --> 00:14:54,460
queuing system maybe transfer form and

00:14:51,100 --> 00:14:57,640
change metrics like drop data we really

00:14:54,460 --> 00:14:59,650
don't care about now we need a third

00:14:57,640 --> 00:15:01,990
part where tools are actually doing the

00:14:59,650 --> 00:15:05,230
analytics analyzing what's really going

00:15:01,990 --> 00:15:06,970
on and act on that and of course we also

00:15:05,230 --> 00:15:09,850
need to satisfy management so we need to

00:15:06,970 --> 00:15:12,610
be able to build nice looking graphics

00:15:09,850 --> 00:15:20,140
so they can see hey we've got more users

00:15:12,610 --> 00:15:22,839
and hey we've got more revenue so how do

00:15:20,140 --> 00:15:24,310
we start doing that first thing we need

00:15:22,839 --> 00:15:26,890
to do when we build infrastructure is

00:15:24,310 --> 00:15:29,470
code is to start monitoring a baseline

00:15:26,890 --> 00:15:30,730
each time when we deploy a new host

00:15:29,470 --> 00:15:32,230
which is going to be part of our

00:15:30,730 --> 00:15:34,360
infrastructure we're going to

00:15:32,230 --> 00:15:36,670
automatically add the monitoring we're

00:15:34,360 --> 00:15:38,980
going to automatically add all the tools

00:15:36,670 --> 00:15:42,520
to do the collection so it starts

00:15:38,980 --> 00:15:44,730
collecting the baseline and we're also

00:15:42,520 --> 00:15:48,220
going to add check definitions and

00:15:44,730 --> 00:15:50,050
update the monitoring tool when we

00:15:48,220 --> 00:15:54,279
deploy a new note the monitoring tool

00:15:50,050 --> 00:15:56,500
needs to know that a new note exists so

00:15:54,279 --> 00:16:01,930
that kind of brings you to an

00:15:56,500 --> 00:16:03,940
architecture which looks like this who

00:16:01,930 --> 00:16:06,790
knows or who uses components in his

00:16:03,940 --> 00:16:08,560
architecture and if you can read it from

00:16:06,790 --> 00:16:10,600
the back but there's basically well

00:16:08,560 --> 00:16:12,250
there's one this is a general overview

00:16:10,600 --> 00:16:13,959
there's a lot of java stuff in there

00:16:12,250 --> 00:16:18,160
which you might interest if you're using

00:16:13,959 --> 00:16:20,290
solar or elasticsearch in the back but

00:16:18,160 --> 00:16:23,670
if you look at basically the apache

00:16:20,290 --> 00:16:28,390
stuff then it's log shipping its

00:16:23,670 --> 00:16:29,950
monitoring from for example nodules as

00:16:28,390 --> 00:16:34,750
mentioned in one of the previous talks

00:16:29,950 --> 00:16:37,450
and it's shipping the light blue part is

00:16:34,750 --> 00:16:39,670
basically data collection the darker

00:16:37,450 --> 00:16:43,720
blue part is data shipping

00:16:39,670 --> 00:16:46,090
and then the green part is the actual

00:16:43,720 --> 00:16:49,150
tools that are storing nemetrix and

00:16:46,090 --> 00:16:52,450
maybe doing stuff with it and then the

00:16:49,150 --> 00:16:55,150
red part is actually reaction what is it

00:16:52,450 --> 00:16:57,820
happening on the platform but this is a

00:16:55,150 --> 00:17:00,880
whole set of tools which you need to

00:16:57,820 --> 00:17:05,260
integrate a bunch of them are still old

00:17:00,880 --> 00:17:09,670
school like Nigel's lucky kinga but a

00:17:05,260 --> 00:17:11,350
lot of them are from the new tools so if

00:17:09,670 --> 00:17:15,520
you think about that an infrastructure

00:17:11,350 --> 00:17:17,680
as code age that means that the contrast

00:17:15,520 --> 00:17:20,640
is not good enough this is an example

00:17:17,680 --> 00:17:22,630
how you could configure that in puppet

00:17:20,640 --> 00:17:33,000
can we turn on the light may be

00:17:22,630 --> 00:17:33,000
completely because yeah

00:17:34,660 --> 00:17:41,299
okay much better so basically when you

00:17:37,940 --> 00:17:43,270
do that in I've examples in public but

00:17:41,299 --> 00:17:46,910
you could do the same using chef or

00:17:43,270 --> 00:17:48,500
sieve engine or any other configuration

00:17:46,910 --> 00:17:50,059
management tool you want to use like

00:17:48,500 --> 00:17:51,950
John topper said yesterday the question

00:17:50,059 --> 00:17:54,470
is not about worry to use chef or puppet

00:17:51,950 --> 00:17:57,740
the question is about use a tool and

00:17:54,470 --> 00:18:00,890
start automating stuff so basically when

00:17:57,740 --> 00:18:02,960
I define a host which is going to run an

00:18:00,890 --> 00:18:05,120
Apache instance I usually have a

00:18:02,960 --> 00:18:07,270
metaclass which is my way of installing

00:18:05,120 --> 00:18:10,760
apache or our way of installing apache

00:18:07,270 --> 00:18:14,500
we include apache we include mod rewrite

00:18:10,760 --> 00:18:17,330
to do stuff we install PHP PHP with a PC

00:18:14,500 --> 00:18:20,929
we basically configure the logging to go

00:18:17,330 --> 00:18:23,600
different and we have the PHP class

00:18:20,929 --> 00:18:25,880
installed before we configure a PC

00:18:23,600 --> 00:18:27,500
because otherwise we cannot install and

00:18:25,880 --> 00:18:29,360
as I told you earlier we have a baseline

00:18:27,500 --> 00:18:31,250
which already installs collect d to do

00:18:29,360 --> 00:18:33,440
monitoring we use collected for

00:18:31,250 --> 00:18:35,000
monitoring for metrics collection but on

00:18:33,440 --> 00:18:38,600
this host since it's also running Apache

00:18:35,000 --> 00:18:43,370
we configure the collect d plugin to do

00:18:38,600 --> 00:18:44,750
apache who knows collect d okay now i

00:18:43,370 --> 00:18:49,190
can see anymore how many people are

00:18:44,750 --> 00:18:51,650
raising their hands so colic d is one of

00:18:49,190 --> 00:18:54,890
t tools which allows you to collect all

00:18:51,650 --> 00:18:56,600
kinds of metrics store them centralize

00:18:54,890 --> 00:18:59,390
them or ship them to a monitoring tool

00:18:56,600 --> 00:19:01,520
shift into a matrix so it's really good

00:18:59,390 --> 00:19:03,919
and its really scalable to build these

00:19:01,520 --> 00:19:07,220
things so when we define our apache we

00:19:03,919 --> 00:19:09,559
pretty much define how we can figure a

00:19:07,220 --> 00:19:12,980
patchy with which parameters that we

00:19:09,559 --> 00:19:15,080
want to get metrics from there and that

00:19:12,980 --> 00:19:16,910
we also want to define the logging

00:19:15,080 --> 00:19:18,679
because how many people do actually

00:19:16,910 --> 00:19:20,240
configure lock rotation when they add

00:19:18,679 --> 00:19:22,429
new vhosts when they had new files

00:19:20,240 --> 00:19:25,610
usually everybody forgets that so the

00:19:22,429 --> 00:19:27,620
disk flood we have that in there and we

00:19:25,610 --> 00:19:30,020
have the firewall in there pretty much

00:19:27,620 --> 00:19:32,350
defining the full container of water

00:19:30,020 --> 00:19:34,190
services are being built on encode

00:19:32,350 --> 00:19:39,980
reproducible and if I need to deploy

00:19:34,190 --> 00:19:42,890
under service it's fine so that's the

00:19:39,980 --> 00:19:45,500
definition on one note now I've defined

00:19:42,890 --> 00:19:46,620
one come fig and OneNote knows how this

00:19:45,500 --> 00:19:49,110
stuff works

00:19:46,620 --> 00:19:50,700
does anybody of an idea how to make this

00:19:49,110 --> 00:19:52,350
distribute it you see there's

00:19:50,700 --> 00:20:01,860
distributed content in this tall can you

00:19:52,350 --> 00:20:07,470
have the example is perfect here but it

00:20:01,860 --> 00:20:11,790
works with pretty much any other yeah

00:20:07,470 --> 00:20:14,670
well ok so the puppet architecture can

00:20:11,790 --> 00:20:16,710
be different ways you can usually have a

00:20:14,670 --> 00:20:19,020
puppet master where there's catalogs

00:20:16,710 --> 00:20:20,400
being built there's a client which

00:20:19,020 --> 00:20:22,890
connects to the puppet master says hi

00:20:20,400 --> 00:20:25,470
I'm no Dex give me the configuration for

00:20:22,890 --> 00:20:28,530
node X and the puppet master will then

00:20:25,470 --> 00:20:30,840
ship that's so Ricardo says the puppet

00:20:28,530 --> 00:20:33,990
master will know well yeah the puppet

00:20:30,840 --> 00:20:36,630
master knows the definition of that note

00:20:33,990 --> 00:20:39,300
it does not know what the note next to

00:20:36,630 --> 00:20:42,000
it is using so we need to think about

00:20:39,300 --> 00:20:44,490
using a feature in puppet which allows

00:20:42,000 --> 00:20:47,640
you to collect and store configurations

00:20:44,490 --> 00:20:49,440
for other nodes and that's for example

00:20:47,640 --> 00:20:53,580
in puppet language that's stored come

00:20:49,440 --> 00:20:55,740
fix now ID is there that you have a note

00:20:53,580 --> 00:20:58,200
which is running which where you are

00:20:55,740 --> 00:21:01,200
including the Apache clause which then

00:20:58,200 --> 00:21:05,309
has a config which is going to store in

00:21:01,200 --> 00:21:07,890
a database and when there's for example

00:21:05,309 --> 00:21:09,840
the nodule server connecting it's going

00:21:07,890 --> 00:21:11,940
to know from that database that there's

00:21:09,840 --> 00:21:13,890
five new nodes who have the Apache

00:21:11,940 --> 00:21:18,630
clause installed which it needs to start

00:21:13,890 --> 00:21:21,990
monitoring basically it means you export

00:21:18,630 --> 00:21:27,179
a note with a tad resource and you

00:21:21,990 --> 00:21:33,600
collect it with a spaceship and this

00:21:27,179 --> 00:21:36,080
piece of code actually shows that so we

00:21:33,600 --> 00:21:41,179
have we use a king as a variant of

00:21:36,080 --> 00:21:43,860
Nigel's for all kinds of fun reasons

00:21:41,179 --> 00:21:46,290
part of it is that they're not just fork

00:21:43,860 --> 00:21:47,970
is the original not just built is pretty

00:21:46,290 --> 00:21:50,700
much going open core rather than open

00:21:47,970 --> 00:21:53,550
source and development really isn't

00:21:50,700 --> 00:21:55,350
moving on that's an example of how Forks

00:21:53,550 --> 00:21:57,570
are really bad sometimes but Forks can

00:21:55,350 --> 00:21:59,910
also be good because the fork a kinga is

00:21:57,570 --> 00:22:00,450
european-based those guys pretty good

00:21:59,910 --> 00:22:02,490
parties in

00:22:00,450 --> 00:22:04,050
numbered and they're actually improving

00:22:02,490 --> 00:22:06,870
and heading in a direction that people

00:22:04,050 --> 00:22:09,240
like you so on the server we basically

00:22:06,870 --> 00:22:12,180
collect all the resources we've exported

00:22:09,240 --> 00:22:14,760
and on the client we're exporting them

00:22:12,180 --> 00:22:17,610
and we do that for check ping but also

00:22:14,760 --> 00:22:23,400
for the Apache stuff and for monitoring

00:22:17,610 --> 00:22:26,100
the host so in my apache config there's

00:22:23,400 --> 00:22:28,860
also this check which we defined because

00:22:26,100 --> 00:22:31,890
this is in my apache clause we check

00:22:28,860 --> 00:22:33,690
each time when do you want to check what

00:22:31,890 --> 00:22:36,420
you want to check and that code is being

00:22:33,690 --> 00:22:38,550
executed while we are collecting the

00:22:36,420 --> 00:22:41,370
data so when I define a new apache

00:22:38,550 --> 00:22:44,280
server automatically puppet will

00:22:41,370 --> 00:22:46,200
reconfigure nagios and it will relaunch

00:22:44,280 --> 00:22:51,240
it and a new note will immediately be

00:22:46,200 --> 00:22:54,750
monitored so infrastructure as code what

00:22:51,240 --> 00:22:57,060
does it help us there that we will be

00:22:54,750 --> 00:23:00,570
capable of knowing when new nodes appear

00:22:57,060 --> 00:23:02,130
and we don't need to do manual stuff so

00:23:00,570 --> 00:23:07,050
quickly if you look at the King ionath

00:23:02,130 --> 00:23:09,030
nat geo's I stole this afternoon there's

00:23:07,050 --> 00:23:10,290
a bunch of plugins for both Drupal and

00:23:09,030 --> 00:23:12,720
for nachos where you can check if

00:23:10,290 --> 00:23:14,510
there's update missing when you can see

00:23:12,720 --> 00:23:17,010
the health of your Drupal instance and

00:23:14,510 --> 00:23:18,570
basically those need to be there you

00:23:17,010 --> 00:23:20,820
also want to check when the cron job has

00:23:18,570 --> 00:23:22,650
lost been run if there's long-running

00:23:20,820 --> 00:23:25,710
cron jobs and if they're not being

00:23:22,650 --> 00:23:28,440
blocking the platform but that's a check

00:23:25,710 --> 00:23:36,150
we do by default when we export the

00:23:28,440 --> 00:23:38,970
apache config so the thing is we are now

00:23:36,150 --> 00:23:42,090
monitoring not only Apache but also

00:23:38,970 --> 00:23:45,900
every time we export a V host every time

00:23:42,090 --> 00:23:49,340
we deploy a new instance we monitor the

00:23:45,900 --> 00:23:49,340
service yes there was a question there

00:24:05,010 --> 00:24:12,360
so yes you need to clean out notes that

00:24:09,810 --> 00:24:17,310
disappear in puppet that's basically

00:24:12,360 --> 00:24:20,190
puppet note clean and Nick steel I will

00:24:17,310 --> 00:24:21,450
be talking to my robot sensor sensor is

00:24:20,190 --> 00:24:22,710
going to drastically take a different

00:24:21,450 --> 00:24:24,180
approach for that but I'm not going to

00:24:22,710 --> 00:24:27,090
give this all talk there-there's to me

00:24:24,180 --> 00:24:29,220
two ways in using the monitoring tools

00:24:27,090 --> 00:24:31,320
you stick with nagios if you have

00:24:29,220 --> 00:24:34,500
environment which is pretty fixed which

00:24:31,320 --> 00:24:36,180
is only going to grow because it's easy

00:24:34,500 --> 00:24:38,310
to configure there's a lot of community

00:24:36,180 --> 00:24:40,980
around it and there's a lot of tools you

00:24:38,310 --> 00:24:43,020
can already reuse if you are indeed

00:24:40,980 --> 00:24:45,870
running into the environment where I've

00:24:43,020 --> 00:24:47,400
got 200 notes today 30 tomorrow there's

00:24:45,870 --> 00:24:49,890
going to be 60 new ones popping up the

00:24:47,400 --> 00:24:52,740
day after and three hours later you're

00:24:49,890 --> 00:24:54,690
going to have 5,000 then we start

00:24:52,740 --> 00:24:56,520
thinking about new architectures and we

00:24:54,690 --> 00:24:58,050
start thinking by tools like Sen su and

00:24:56,520 --> 00:25:00,300
if you're really interested in that kind

00:24:58,050 --> 00:25:01,890
of stuff a lot of the approaches on how

00:25:00,300 --> 00:25:03,180
to configure that and the ID that you

00:25:01,890 --> 00:25:06,420
also need to do that as infrastructure

00:25:03,180 --> 00:25:08,070
as code that still applies but a tool is

00:25:06,420 --> 00:25:10,800
just being replaced there you actually

00:25:08,070 --> 00:25:12,270
choose another tool like Sen su I think

00:25:10,800 --> 00:25:17,750
Nick will explain how to convey with

00:25:12,270 --> 00:25:20,550
with Jeff but the ids are still the same

00:25:17,750 --> 00:25:27,000
so yeah there's a couple of slides

00:25:20,550 --> 00:25:29,900
further round yeah so now we're both

00:25:27,000 --> 00:25:34,110
monitoring the actual application and

00:25:29,900 --> 00:25:38,250
apache so for a lot of organizations

00:25:34,110 --> 00:25:44,450
that is a huge achievement who few is

00:25:38,250 --> 00:25:46,920
using scrum in here how not too many

00:25:44,450 --> 00:25:49,050
weird I'm used to talking to developers

00:25:46,920 --> 00:25:51,360
where they're pretty much only using

00:25:49,050 --> 00:25:52,500
scrum of the development methodology so

00:25:51,360 --> 00:25:55,200
you guys don't know what the definition

00:25:52,500 --> 00:26:00,990
of done is right who knows what the

00:25:55,200 --> 00:26:02,730
definition of done is Ricardo so for a

00:26:00,990 --> 00:26:06,570
lot of people would think that DevOps is

00:26:02,730 --> 00:26:10,740
about introducing scrum two systems

00:26:06,570 --> 00:26:12,570
people we were really happy that we

00:26:10,740 --> 00:26:14,100
could include in the definition of done

00:26:12,570 --> 00:26:17,870
of a development team that it was

00:26:14,100 --> 00:26:17,870
actually monitored and in production

00:26:17,940 --> 00:26:29,519
now now we had actual software deployed

00:26:20,100 --> 00:26:33,539
which was monitored and then it's done

00:26:29,519 --> 00:26:36,200
right to me a software project is not

00:26:33,539 --> 00:26:40,559
done until your last NT user is dead

00:26:36,200 --> 00:26:48,120
until you don't run that application

00:26:40,559 --> 00:26:52,409
anymore so in which time zone do you

00:26:48,120 --> 00:27:02,190
need a wake-up call at 528 or is that

00:26:52,409 --> 00:27:04,200
not just going off so software

00:27:02,190 --> 00:27:06,809
development has evolved the way we

00:27:04,200 --> 00:27:08,490
deploy software is not in two weeks

00:27:06,809 --> 00:27:10,529
prints anymore where there's new

00:27:08,490 --> 00:27:12,590
features at the end of the sprint with

00:27:10,529 --> 00:27:15,389
monitoring include no software is

00:27:12,590 --> 00:27:17,549
constantly on and we need to be able to

00:27:15,389 --> 00:27:20,159
monitor and make sure that as long as

00:27:17,549 --> 00:27:23,190
there's users we know it's up and

00:27:20,159 --> 00:27:24,509
running so I'm not a big fan of the

00:27:23,190 --> 00:27:29,129
definition of done in soooo many more

00:27:24,509 --> 00:27:31,620
actually want to get rid of it but it

00:27:29,129 --> 00:27:33,240
also means that when you say you want to

00:27:31,620 --> 00:27:34,830
stop monitoring and you stopped

00:27:33,240 --> 00:27:37,200
maintaining the application when you

00:27:34,830 --> 00:27:41,009
last NT user is that you need to figure

00:27:37,200 --> 00:27:44,909
out if he's still alive so how do you do

00:27:41,009 --> 00:27:49,769
that I've been in a couple of setups

00:27:44,909 --> 00:27:51,990
where I was pretty much we were

00:27:49,769 --> 00:27:55,259
practicing well not even practicing we

00:27:51,990 --> 00:27:57,059
were actually doing an upgrade and so

00:27:55,259 --> 00:27:59,039
there's a distributed system where

00:27:57,059 --> 00:28:00,690
there's stuff coming in on one side

00:27:59,039 --> 00:28:04,200
you're zipping I guys calls being made

00:28:00,690 --> 00:28:06,509
and the server is sitting there and we

00:28:04,200 --> 00:28:10,500
need to upgrade it this was pre

00:28:06,509 --> 00:28:11,909
continuous delivery so you sit there

00:28:10,500 --> 00:28:13,740
next to the developers and I say yeah

00:28:11,909 --> 00:28:16,169
well we're gonna plan the upgrades okay

00:28:13,740 --> 00:28:18,990
sure so when one when can we do it well

00:28:16,169 --> 00:28:22,019
when there's no users anymore how do you

00:28:18,990 --> 00:28:25,620
know well we don't know we check the

00:28:22,019 --> 00:28:27,029
Apache log okay so you keep watching the

00:28:25,620 --> 00:28:31,530
Apache log for four minutes and then

00:28:27,029 --> 00:28:33,390
there's one you hit so there's one user

00:28:31,530 --> 00:28:36,060
is this can we kill him off can we shut

00:28:33,390 --> 00:28:37,440
him up that's one approach you wait till

00:28:36,060 --> 00:28:39,780
there is actually nobody there anymore

00:28:37,440 --> 00:28:41,280
the other approach is well we put a

00:28:39,780 --> 00:28:44,520
firewall in place it's going to error

00:28:41,280 --> 00:28:47,490
stuff and it's going to break stuff but

00:28:44,520 --> 00:28:48,960
the actual way to do this is measure all

00:28:47,490 --> 00:28:51,030
the things which is one of the devops

00:28:48,960 --> 00:28:52,860
mattress we really want to measure all

00:28:51,030 --> 00:28:55,260
the things and sometimes we even measure

00:28:52,860 --> 00:28:57,540
too much but the thing is you can throw

00:28:55,260 --> 00:29:00,950
metrics away afterwards but you cannot

00:28:57,540 --> 00:29:03,810
recreate it you cannot reinvent metrics

00:29:00,950 --> 00:29:05,790
so we start measuring and monitoring

00:29:03,810 --> 00:29:10,740
stuff from within the beginning we want

00:29:05,790 --> 00:29:12,300
to measure deployment statistics I was

00:29:10,740 --> 00:29:15,240
actually going to replace the screen

00:29:12,300 --> 00:29:17,040
shot with the actual front end deploys

00:29:15,240 --> 00:29:19,500
of one of our Drupal sites we're doing

00:29:17,040 --> 00:29:21,870
but basically we use the tool called

00:29:19,500 --> 00:29:27,930
graphite graphite when we use this

00:29:21,870 --> 00:29:31,160
graphite okay for people for the others

00:29:27,930 --> 00:29:33,380
graphite is awesome it's a

00:29:31,160 --> 00:29:37,350
next-generation time series data base

00:29:33,380 --> 00:29:41,250
it's scalable unlike stuff like cacti M

00:29:37,350 --> 00:29:43,710
Union and it's I mean every developer in

00:29:41,250 --> 00:29:45,450
this room can send metrics to graphite

00:29:43,710 --> 00:29:47,850
you open a socket to power to thousands

00:29:45,450 --> 00:29:51,480
entry and basically send a time stamp

00:29:47,850 --> 00:29:56,100
and name and a value and that's it you

00:29:51,480 --> 00:30:00,510
cannot write that in PHP you're not a

00:29:56,100 --> 00:30:03,000
PHP developer okay then write it in

00:30:00,510 --> 00:30:05,610
shell usenet get whatever it's so

00:30:03,000 --> 00:30:08,040
trivial and what we do when we deploy

00:30:05,610 --> 00:30:10,890
new software is we basically send a null

00:30:08,040 --> 00:30:13,650
metric and graphite allows us to draw a

00:30:10,890 --> 00:30:15,690
line as infinite on every no metric what

00:30:13,650 --> 00:30:16,980
it also does is this gives you a point

00:30:15,690 --> 00:30:20,160
in time where new software has been

00:30:16,980 --> 00:30:22,410
deployed and when you map that to the

00:30:20,160 --> 00:30:23,940
actual behavior of the application you

00:30:22,410 --> 00:30:28,230
can go back and talk to the developer

00:30:23,940 --> 00:30:30,600
and say you know last Monday at 5pm we

00:30:28,230 --> 00:30:34,920
deployed this new feature from your git

00:30:30,600 --> 00:30:38,040
commit and they'll say yeah that's right

00:30:34,920 --> 00:30:41,400
and after that our database queries went

00:30:38,040 --> 00:30:42,850
up to 20,000 per second what the

00:30:41,400 --> 00:30:48,100
did you do

00:30:42,850 --> 00:30:50,860
and they'll be like well I unable to

00:30:48,100 --> 00:30:52,540
debug parameter and they'll disable it

00:30:50,860 --> 00:30:54,310
and you'll exactly see when they

00:30:52,540 --> 00:30:59,920
introduce the fixed and they're all be

00:30:54,310 --> 00:31:02,350
happy again so what do you want to

00:30:59,920 --> 00:31:05,710
metric self you want metrics of a lot of

00:31:02,350 --> 00:31:07,480
stuff you want to be able to know when

00:31:05,710 --> 00:31:09,460
you can pull the application than so you

00:31:07,480 --> 00:31:12,130
want metrics on the actual concurrent

00:31:09,460 --> 00:31:14,860
users and not once you see in the Drupal

00:31:12,130 --> 00:31:16,780
dashboard you want to see if you're

00:31:14,860 --> 00:31:18,490
running a service the number of signups

00:31:16,780 --> 00:31:20,650
you're having the response time of your

00:31:18,490 --> 00:31:22,570
service you want to see if you have

00:31:20,650 --> 00:31:24,280
documents being generated or cute you

00:31:22,570 --> 00:31:28,390
want to see how fast they actually go

00:31:24,280 --> 00:31:30,250
through your usage you want to see how

00:31:28,390 --> 00:31:34,360
many times people have restarted engine

00:31:30,250 --> 00:31:37,960
XM php-fpm because people do that behind

00:31:34,360 --> 00:31:41,650
your back because it's unstable by

00:31:37,960 --> 00:31:44,020
nature and you want to figure out with

00:31:41,650 --> 00:31:46,450
your team with your management what's

00:31:44,020 --> 00:31:48,940
actually specifically valuable for you

00:31:46,450 --> 00:31:50,410
specific application and it brings you

00:31:48,940 --> 00:31:53,170
to the next point where you can actually

00:31:50,410 --> 00:31:55,840
build self-service matrix where if your

00:31:53,170 --> 00:31:58,450
developer it's interested in the number

00:31:55,840 --> 00:32:01,000
of times it does a certain operation you

00:31:58,450 --> 00:32:05,200
just let him send metrics you just let

00:32:01,000 --> 00:32:07,540
him build his own dashboard and he'll

00:32:05,200 --> 00:32:10,620
also will be wanting to look at all the

00:32:07,540 --> 00:32:13,840
Drupal errors logs over 25 sites

00:32:10,620 --> 00:32:16,840
correlated so we need to give him tools

00:32:13,840 --> 00:32:18,490
which allow him to learn from his

00:32:16,840 --> 00:32:20,050
existing platform and there's another

00:32:18,490 --> 00:32:25,240
tool i like to use for that and that's

00:32:20,050 --> 00:32:29,830
called log stash who knows log stash was

00:32:25,240 --> 00:32:32,350
using log stash okay so log stash is a

00:32:29,830 --> 00:32:34,930
tool written by Jordan Cecil and Jordan

00:32:32,350 --> 00:32:37,450
is a guy who does anger driven

00:32:34,930 --> 00:32:39,550
development if he doesn't like something

00:32:37,450 --> 00:32:42,550
if he's frustrated with something he

00:32:39,550 --> 00:32:44,260
writes a tool to fix that and trust me

00:32:42,550 --> 00:32:47,080
he has written a lot of tools maybe a

00:32:44,260 --> 00:32:50,170
bit too much and every month I figure

00:32:47,080 --> 00:32:53,980
out that he read another tool even last

00:32:50,170 --> 00:32:56,020
week and lock stash can collect software

00:32:53,980 --> 00:32:56,580
and metric can collect log files from

00:32:56,020 --> 00:32:59,630
everywhere

00:32:56,580 --> 00:33:03,240
and if you see in the top corner there

00:32:59,630 --> 00:33:05,669
it actually gets metrics from Drupal

00:33:03,240 --> 00:33:09,269
logs it actually knows how to understand

00:33:05,669 --> 00:33:13,950
and parse those default it can also get

00:33:09,269 --> 00:33:17,190
stuff from my log4j or Apache or syslog

00:33:13,950 --> 00:33:18,630
whatever format it has it knows it can

00:33:17,190 --> 00:33:20,760
lose them filtering on that so throw

00:33:18,630 --> 00:33:22,529
away stuff think back about the queuing

00:33:20,760 --> 00:33:25,950
about the small tools i mentioned that

00:33:22,529 --> 00:33:30,240
are capable of doing cool stuff and then

00:33:25,950 --> 00:33:31,860
it can store it into a lot of tools now

00:33:30,240 --> 00:33:34,950
the default oral people want to store

00:33:31,860 --> 00:33:39,029
things in is elastic search who knows

00:33:34,950 --> 00:33:46,820
elasticsearch who has learned the tool

00:33:39,029 --> 00:33:49,169
here up till this so elastic search is

00:33:46,820 --> 00:33:53,130
think about it as the next generation of

00:33:49,169 --> 00:33:56,460
solar not really one hundred percent

00:33:53,130 --> 00:33:59,130
correct but it's in that direction it it

00:33:56,460 --> 00:34:01,860
allows you to really search fast in your

00:33:59,130 --> 00:34:05,460
data it scalable its cluster abell and

00:34:01,860 --> 00:34:09,300
if you have elastic search with a cabana

00:34:05,460 --> 00:34:12,839
dashboard for your logs you can actually

00:34:09,300 --> 00:34:15,480
have people search distributed set of

00:34:12,839 --> 00:34:17,129
log files much faster and it will also

00:34:15,480 --> 00:34:19,080
give you the opportunity to build

00:34:17,129 --> 00:34:21,240
metrics out of those logs and because

00:34:19,080 --> 00:34:24,780
one of the things that's in here as an

00:34:21,240 --> 00:34:27,960
output is graphite exact same tool I

00:34:24,780 --> 00:34:31,080
used before so if you want to know how

00:34:27,960 --> 00:34:34,139
many times there's failed user logins on

00:34:31,080 --> 00:34:36,000
your site you can find that if you want

00:34:34,139 --> 00:34:40,260
to find how many times Mollom actually

00:34:36,000 --> 00:34:42,810
did not scan correctly and didn't catch

00:34:40,260 --> 00:34:44,700
your spam you can get graphs out of that

00:34:42,810 --> 00:34:47,099
better than the ones on the Mollom site

00:34:44,700 --> 00:34:49,260
if you want to see how many times you

00:34:47,099 --> 00:34:50,940
gotta capture because somebody tried to

00:34:49,260 --> 00:34:53,460
spam something you actually can build

00:34:50,940 --> 00:34:55,740
those metrics on your own dashboards and

00:34:53,460 --> 00:34:56,849
you can also integrate it with all the

00:34:55,740 --> 00:35:02,130
other error messages and all the

00:34:56,849 --> 00:35:04,020
messages in your system there's another

00:35:02,130 --> 00:35:06,390
way to do that there's a drupal module

00:35:04,020 --> 00:35:10,109
which allows you to ship stuff to log

00:35:06,390 --> 00:35:12,029
stash so anyhow

00:35:10,109 --> 00:35:14,339
how you want to use it you want to use

00:35:12,029 --> 00:35:17,489
the log files from Drupal sent them to

00:35:14,339 --> 00:35:20,160
syslog or use this module or use the

00:35:17,489 --> 00:35:22,920
plug-in where it does it where it grabs

00:35:20,160 --> 00:35:25,319
the logs from the database there is no

00:35:22,920 --> 00:35:27,390
excuse not to ship those logs centrally

00:35:25,319 --> 00:35:31,230
and to correlate them people have been

00:35:27,390 --> 00:35:35,160
doing this on a lot of sites before so

00:35:31,230 --> 00:35:36,809
now you have metrics you have numbers

00:35:35,160 --> 00:35:39,749
and figures and you want to get

00:35:36,809 --> 00:35:42,900
statistics out of this and then there's

00:35:39,749 --> 00:35:45,239
a tool called stats d which is basically

00:35:42,900 --> 00:35:47,220
a tool written by the guys from etsy it

00:35:45,239 --> 00:35:49,619
has been written in all kinds of

00:35:47,220 --> 00:35:52,200
languages and it does the simple Matt

00:35:49,619 --> 00:35:55,559
for you this is an example of an Apache

00:35:52,200 --> 00:35:59,099
log and the events correlated to that so

00:35:55,559 --> 00:36:03,239
here you see the graphs of how many

00:35:59,099 --> 00:36:06,150
events were there stats d will build

00:36:03,239 --> 00:36:08,130
that for you it will ship it to graphite

00:36:06,150 --> 00:36:10,140
and your developers then can build new

00:36:08,130 --> 00:36:12,630
dashboard because graphite also has an

00:36:10,140 --> 00:36:14,940
API this taking the top it's basically

00:36:12,630 --> 00:36:17,940
something you can build up from within

00:36:14,940 --> 00:36:19,470
PHP code and people think can start

00:36:17,940 --> 00:36:23,630
building their own dashboards and start

00:36:19,470 --> 00:36:27,049
sharing things they want there's

00:36:23,630 --> 00:36:33,779
surprise surprise also a drupal module

00:36:27,049 --> 00:36:35,519
to directly send stuff to stats d + this

00:36:33,779 --> 00:36:38,430
sense stuff to stan's the stats the

00:36:35,519 --> 00:36:41,269
flushes its matrix the graphite so this

00:36:38,430 --> 00:36:46,069
is basically a metric from a drupal site

00:36:41,269 --> 00:36:46,069
generated right into my graphite system

00:36:46,430 --> 00:36:52,650
so now i have a lot of metrics now i

00:36:48,660 --> 00:36:55,220
have a lot of things to play with what's

00:36:52,650 --> 00:36:55,220
the next step

00:36:57,570 --> 00:37:05,370
do something with it what do you want to

00:36:59,940 --> 00:37:07,200
do with it I saw a slight this afternoon

00:37:05,370 --> 00:37:12,870
where there was a metric of the disk

00:37:07,200 --> 00:37:16,700
usage and a threshold about well if you

00:37:12,870 --> 00:37:18,660
reach this part you're gonna be screwed

00:37:16,700 --> 00:37:22,320
frankly I don't care about that anymore

00:37:18,660 --> 00:37:25,020
what I want to know is dis Pete my disk

00:37:22,320 --> 00:37:27,030
usage changes because I'll know upfront

00:37:25,020 --> 00:37:30,750
my disk usage is going to reach a

00:37:27,030 --> 00:37:33,390
certain limit and I know when my site is

00:37:30,750 --> 00:37:35,940
active that it's going to be in four

00:37:33,390 --> 00:37:39,600
weeks but when suddenly activity changes

00:37:35,940 --> 00:37:45,360
and there's a huge change in the normal

00:37:39,600 --> 00:37:47,250
drought or even a huge drop in the

00:37:45,360 --> 00:37:49,920
normal load that's when something's

00:37:47,250 --> 00:37:52,530
going wrong that's when there's a real

00:37:49,920 --> 00:37:55,380
anomaly in your platform so it's time to

00:37:52,530 --> 00:37:59,250
go back to our math books and read all

00:37:55,380 --> 00:38:02,640
this stuff about acceleration and all

00:37:59,250 --> 00:38:06,480
that stuff and even go step further to

00:38:02,640 --> 00:38:07,980
actual statistics graphite allows you to

00:38:06,480 --> 00:38:11,630
do a lot of these things it allows you

00:38:07,980 --> 00:38:14,820
to map things on what happened last week

00:38:11,630 --> 00:38:17,340
it allows you to do forecast it allows

00:38:14,820 --> 00:38:23,730
you to do all the stuff that decisions

00:38:17,340 --> 00:38:26,670
are really fun with and well if there is

00:38:23,730 --> 00:38:30,690
such a huge drop in your system you also

00:38:26,670 --> 00:38:32,040
want to get an alert on that so we have

00:38:30,690 --> 00:38:35,040
basically and this is an example on how

00:38:32,040 --> 00:38:38,820
to do that on a Java gmx if i'm not

00:38:35,040 --> 00:38:40,590
mistaken yeah so this is basically an

00:38:38,820 --> 00:38:42,950
example but it could be used for any

00:38:40,590 --> 00:38:45,720
other metric if you see a certain drop

00:38:42,950 --> 00:38:47,610
you can check that on the graphs you can

00:38:45,720 --> 00:38:51,420
trigger and not just alert based on that

00:38:47,610 --> 00:38:55,230
truck not drop or if you have a system

00:38:51,420 --> 00:38:57,930
where basically if it's well as long as

00:38:55,230 --> 00:38:59,940
over the past 50 minutes we stay over

00:38:57,930 --> 00:39:02,280
that load or the past half hour we stay

00:38:59,940 --> 00:39:04,980
over those actions it's fine but if it

00:39:02,280 --> 00:39:08,130
keeps longer and we learn that from the

00:39:04,980 --> 00:39:11,440
graphs and there's an issue and they're

00:39:08,130 --> 00:39:15,190
the same we can trigger basically alert

00:39:11,440 --> 00:39:18,960
on those graphs this code snippet isn't

00:39:15,190 --> 00:39:21,730
that interesting for you guys so we have

00:39:18,960 --> 00:39:24,940
monitoring which is automated we have

00:39:21,730 --> 00:39:27,819
metrics from the monitoring from the

00:39:24,940 --> 00:39:31,540
other usage from the platforms and we

00:39:27,819 --> 00:39:33,640
build dashboards with that dashboards

00:39:31,540 --> 00:39:35,490
which developers can self service from

00:39:33,640 --> 00:39:38,050
where they can learn and add new stuff

00:39:35,490 --> 00:39:40,750
but also stuff which we care about like

00:39:38,050 --> 00:39:41,950
my sequel replication lag and one of the

00:39:40,750 --> 00:39:43,720
tools that allows you to build those

00:39:41,950 --> 00:39:45,640
dashboards there's plenty of them out

00:39:43,720 --> 00:39:49,180
there but this is an example using G

00:39:45,640 --> 00:39:52,480
dash it's just a simple templating

00:39:49,180 --> 00:39:54,359
engine which allows you to write the

00:39:52,480 --> 00:39:57,040
metrics on one line which you want and

00:39:54,359 --> 00:39:59,319
this is something you can then template

00:39:57,040 --> 00:40:01,859
and give to developers and they can

00:39:59,319 --> 00:40:06,069
start building their own dashboards and

00:40:01,859 --> 00:40:09,400
sharing metrics so what's the next thing

00:40:06,069 --> 00:40:12,040
people need to do they want to start

00:40:09,400 --> 00:40:13,869
learning from that data they want to

00:40:12,040 --> 00:40:15,339
start actually do machine learning and

00:40:13,869 --> 00:40:19,060
big data analytics on those platforms

00:40:15,339 --> 00:40:21,010
and a lot of the large scale sites are

00:40:19,060 --> 00:40:22,540
already doing this if they're doing any

00:40:21,010 --> 00:40:23,950
commercial they really want to see the

00:40:22,540 --> 00:40:25,210
forecast of what's going to happen and

00:40:23,950 --> 00:40:30,640
that's where machine learning is going

00:40:25,210 --> 00:40:34,589
to come in and then we're down to the

00:40:30,640 --> 00:40:40,680
last part in camps it's about sharing

00:40:34,589 --> 00:40:44,200
and part of the sharing is visualizing

00:40:40,680 --> 00:40:46,540
visualizing the revenue visualizing the

00:40:44,200 --> 00:40:49,329
sales turnover visualizing the sign ups

00:40:46,540 --> 00:40:51,130
and part of the sharing is basically

00:40:49,329 --> 00:40:53,609
doing that on dashboards and this is

00:40:51,130 --> 00:40:55,839
then Luke screenshot of one of those

00:40:53,609 --> 00:41:00,310
dashboards you can build with graphite

00:40:55,839 --> 00:41:05,290
and G dash and on our story on that part

00:41:00,310 --> 00:41:07,359
is sharing these dashboards like in the

00:41:05,290 --> 00:41:09,250
coffee room or lunch room where

00:41:07,359 --> 00:41:12,490
everybody sits together where everybody

00:41:09,250 --> 00:41:14,680
meets CEOs will walk by the dashboard

00:41:12,490 --> 00:41:16,630
and figure out what is that spike and

00:41:14,680 --> 00:41:18,579
they'll talk to the operations people in

00:41:16,630 --> 00:41:20,619
the talk to developers what happened

00:41:18,579 --> 00:41:23,890
here and you create discussion you share

00:41:20,619 --> 00:41:25,270
experiences and sharing experiences

00:41:23,890 --> 00:41:27,700
that's also what DevOps is about

00:41:25,270 --> 00:41:30,700
what a lot of people are doing in this

00:41:27,700 --> 00:41:36,910
DevOps track I think I want you guys to

00:41:30,700 --> 00:41:39,580
share now is your feedback I was

00:41:36,910 --> 00:41:46,960
basically my message to you today any

00:41:39,580 --> 00:41:55,800
questions nobody wants to know where the

00:41:46,960 --> 00:41:55,800

YouTube URL: https://www.youtube.com/watch?v=xnBFfpNZFww


