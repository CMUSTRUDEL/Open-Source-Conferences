Title: DrupalCon Prague 2013: AUTOMATED ACCEPTANCE TESTS WITH BEHAT
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	In March 2006, Dan North published an article in Better Software magazine entitled, "INTRODUCING BDD". BDD or Behavioural Driven Development is now understood to not be just a means to test our applications but to deliver applications that matter - applications that do what they were intended to do.

Behat is a tool that makes Behavioural Driven Development possible.

- Learn about Agile Project Development and the challenges in delivering and getting all the stake holders on board.
- Learn how testing can help us to deliver confidently.
- But where do we begin? What should we test? Where are the priorities?
- How do we sell testing to those paying for it?
- How shall the tests be written.
- Would you like a demo? You'll see one.
Captions: 
	00:00:04,879 --> 00:00:11,130
my name is Nathan Lascaux this is my

00:00:08,010 --> 00:00:13,019
Twitter alias of my IRC tag please note

00:00:11,130 --> 00:00:15,780
it down because i forgot ibly at the end

00:00:13,019 --> 00:00:18,029
so yeah please get in touch and give me

00:00:15,780 --> 00:00:19,619
feedback after this is a presentation

00:00:18,029 --> 00:00:22,949
but it's all part of the discussion and

00:00:19,619 --> 00:00:26,939
I just hope to so add my voice to to

00:00:22,949 --> 00:00:29,730
this interesting topic so I've been

00:00:26,939 --> 00:00:32,160
working with Drupal since early 2008 and

00:00:29,730 --> 00:00:35,550
this is my fourth drupalcon and I'm a

00:00:32,160 --> 00:00:37,500
seasoned drupalcon presenter I'm

00:00:35,550 --> 00:00:39,660
passionate about delivering quality

00:00:37,500 --> 00:00:43,590
applications that meet real business

00:00:39,660 --> 00:00:47,780
needs so the last time i was in Prague

00:00:43,590 --> 00:00:50,100
was for my honeymoon in December 2006

00:00:47,780 --> 00:00:51,899
and I fell in love with this beautiful

00:00:50,100 --> 00:00:54,030
city and I knew that I'd return one day

00:00:51,899 --> 00:00:57,300
but I didn't know that this would be the

00:00:54,030 --> 00:00:59,449
circumstance of my return and what

00:00:57,300 --> 00:01:02,340
Drupal hadn't arrived yet in my life

00:00:59,449 --> 00:01:04,860
that came along and Drupal tooth out in

00:01:02,340 --> 00:01:06,930
in the year two thousand eight and eight

00:01:04,860 --> 00:01:09,240
and it was a former colleague of mine

00:01:06,930 --> 00:01:12,210
map fielding who suggested that we might

00:01:09,240 --> 00:01:14,640
use Drupal to meet the requirements of a

00:01:12,210 --> 00:01:16,890
project that had a quite a unique

00:01:14,640 --> 00:01:20,549
feature set and that we never delivered

00:01:16,890 --> 00:01:22,950
before and the decision to use Drupal or

00:01:20,549 --> 00:01:25,830
any framework or CMS is often prompted

00:01:22,950 --> 00:01:28,619
by a need to deliver a bunch of features

00:01:25,830 --> 00:01:31,799
that we've not had to deliver before and

00:01:28,619 --> 00:01:33,450
it's not that when up it's not that

00:01:31,799 --> 00:01:35,750
we're not willing to venture into the

00:01:33,450 --> 00:01:38,159
unknown we've all done that before I

00:01:35,750 --> 00:01:40,040
mean I've been doing web development for

00:01:38,159 --> 00:01:43,380
14 years so you can be sure I've

00:01:40,040 --> 00:01:45,960
ventured into new ground whether for me

00:01:43,380 --> 00:01:48,060
at least you know so it's that we

00:01:45,960 --> 00:01:50,520
acknowledge that the fact that someone

00:01:48,060 --> 00:01:52,829
has covered that ground before might

00:01:50,520 --> 00:01:55,320
actually benefit us and it might

00:01:52,829 --> 00:01:59,610
actually produce a higher quality of

00:01:55,320 --> 00:02:03,000
product so the code and features that we

00:01:59,610 --> 00:02:05,549
use in Drupal core should contrib a far

00:02:03,000 --> 00:02:07,229
more robust than the code or features

00:02:05,549 --> 00:02:09,030
that we could hope to create alone and

00:02:07,229 --> 00:02:11,400
the fact that this code is tested in the

00:02:09,030 --> 00:02:12,720
community and essentially in production

00:02:11,400 --> 00:02:15,000
across many sites

00:02:12,720 --> 00:02:17,160
it's what it's part of the reason why we

00:02:15,000 --> 00:02:19,080
can get excited about the the Drupal

00:02:17,160 --> 00:02:22,530
project and it's what distinguishes it

00:02:19,080 --> 00:02:24,450
from some other projects some of us may

00:02:22,530 --> 00:02:28,290
feel that we can't deliver much without

00:02:24,450 --> 00:02:30,240
Drupal but it can be done we use Drupal

00:02:28,290 --> 00:02:32,070
because it has a large and flexible

00:02:30,240 --> 00:02:34,200
flexible feature set and the way in

00:02:32,070 --> 00:02:36,990
which the code is distributed and

00:02:34,200 --> 00:02:39,780
maintained means that our sites features

00:02:36,990 --> 00:02:42,420
are being tested fixed and improved to a

00:02:39,780 --> 00:02:44,580
greater extent that then our own used

00:02:42,420 --> 00:02:48,209
whether in development testing or

00:02:44,580 --> 00:02:51,720
production could ever yield testing is

00:02:48,209 --> 00:02:53,670
an important aspect of what makes Drupal

00:02:51,720 --> 00:02:56,120
a great platform to work with this is a

00:02:53,670 --> 00:02:58,440
strong selling point for our clients

00:02:56,120 --> 00:03:00,180
they understand this and that's the

00:02:58,440 --> 00:03:04,800
reason why many of them are attracted to

00:03:00,180 --> 00:03:06,840
Drupal for the next period we have the

00:03:04,800 --> 00:03:10,530
opportunity to look at B hat and how it

00:03:06,840 --> 00:03:13,920
can help us to do to deliver quality in

00:03:10,530 --> 00:03:17,220
this room we have represented various

00:03:13,920 --> 00:03:20,640
levels of experience I'd imagine with

00:03:17,220 --> 00:03:22,709
over a variety of areas of expertise but

00:03:20,640 --> 00:03:24,540
we all have something in common and it's

00:03:22,709 --> 00:03:26,850
Drupal that brings us to this conference

00:03:24,540 --> 00:03:28,440
today but I'm not going to focus so much

00:03:26,850 --> 00:03:32,430
upon Drupal because this is a tool that

00:03:28,440 --> 00:03:35,370
can apply whatever platform you use but

00:03:32,430 --> 00:03:36,840
we have that commonality of all being

00:03:35,370 --> 00:03:40,170
involved in the development of web

00:03:36,840 --> 00:03:42,090
applications not only do we have many

00:03:40,170 --> 00:03:43,890
diverse disciplines represented here

00:03:42,090 --> 00:03:47,100
which should be the case in the DevOps

00:03:43,890 --> 00:03:48,900
track and I don't know about you but the

00:03:47,100 --> 00:03:51,360
first time I come I come across the word

00:03:48,900 --> 00:03:52,950
DevOps it was it was almost like the

00:03:51,360 --> 00:03:55,080
first time i came across the word email

00:03:52,950 --> 00:03:58,049
i just had no no idea what i'm in and

00:03:55,080 --> 00:03:59,640
please explain it to me and and you kind

00:03:58,049 --> 00:04:01,620
of like look to point the finger and

00:03:59,640 --> 00:04:03,840
think is he that helps guy is he the

00:04:01,620 --> 00:04:05,880
DevOps guy and then as you learn about

00:04:03,840 --> 00:04:09,320
it more it's it's rather than it being

00:04:05,880 --> 00:04:11,250
the role of an individual it's it's a

00:04:09,320 --> 00:04:16,049
principle that needs to be shared

00:04:11,250 --> 00:04:18,780
amongst all men members of the team we

00:04:16,049 --> 00:04:20,849
gather some requirements we develop some

00:04:18,780 --> 00:04:23,190
designs and maybe we we build some

00:04:20,849 --> 00:04:25,050
interactive prototypes and then perhaps

00:04:23,190 --> 00:04:26,849
we begin development

00:04:25,050 --> 00:04:28,680
and these are of course loose

00:04:26,849 --> 00:04:32,699
definitions of far more involved

00:04:28,680 --> 00:04:34,440
processes but we it's not uncommon for

00:04:32,699 --> 00:04:37,169
us to sort of check over our work and

00:04:34,440 --> 00:04:40,110
make sure that it's working at least how

00:04:37,169 --> 00:04:42,210
we expect and then when we believe that

00:04:40,110 --> 00:04:44,190
we've met we've reached the point that

00:04:42,210 --> 00:04:46,710
we've met our obligation to the client

00:04:44,190 --> 00:04:48,300
we then show the client and if the

00:04:46,710 --> 00:04:51,270
client likes what they see then we'll

00:04:48,300 --> 00:04:54,810
push it to live or we'll go into the

00:04:51,270 --> 00:04:57,530
next phase of development each piece of

00:04:54,810 --> 00:05:01,229
this process might be handled by a

00:04:57,530 --> 00:05:02,909
distinct member of the team we all were

00:05:01,229 --> 00:05:04,979
all good at what we do in this room

00:05:02,909 --> 00:05:08,729
right so when things go wrong and

00:05:04,979 --> 00:05:13,319
invariably they do who do we blame for

00:05:08,729 --> 00:05:15,599
this failure maybe the world the clients

00:05:13,319 --> 00:05:17,159
expectations they see the the site and

00:05:15,599 --> 00:05:21,690
they say it doesn't quite work as we

00:05:17,159 --> 00:05:23,219
anticipated so he's a fault did the

00:05:21,690 --> 00:05:25,319
client not explain their requirements

00:05:23,219 --> 00:05:28,110
well enough maybe they didn't even know

00:05:25,319 --> 00:05:30,360
what they wanted and the loose

00:05:28,110 --> 00:05:32,969
specifications document that that was

00:05:30,360 --> 00:05:34,830
produced as a result was seen as a sort

00:05:32,969 --> 00:05:37,620
of vote of confidence in your team and

00:05:34,830 --> 00:05:39,870
they believed in your team so much that

00:05:37,620 --> 00:05:41,880
they knew that whatever you deliver

00:05:39,870 --> 00:05:44,759
would just be exactly what they needed

00:05:41,880 --> 00:05:47,460
and that might have happened for you

00:05:44,759 --> 00:05:49,789
this rare phenomenon but the problem

00:05:47,460 --> 00:05:52,440
with proceeding with this loose

00:05:49,789 --> 00:05:54,509
specifications document is that it's a

00:05:52,440 --> 00:05:57,150
weak defense when the clients

00:05:54,509 --> 00:05:59,699
expectations have not been met for you

00:05:57,150 --> 00:06:03,779
to say well you didn't tell us you know

00:05:59,699 --> 00:06:06,060
you didn't explain it and we like as a

00:06:03,779 --> 00:06:07,520
developer I would be dissatisfied if I

00:06:06,060 --> 00:06:10,409
was not involved in delivering

00:06:07,520 --> 00:06:11,699
applications that met a real business

00:06:10,409 --> 00:06:13,560
need you know it's not just about

00:06:11,699 --> 00:06:20,940
delivering something it's about

00:06:13,560 --> 00:06:23,159
delivering quality so no team effort not

00:06:20,940 --> 00:06:26,039
in a team effort rather no individual

00:06:23,159 --> 00:06:29,219
sex success can compensate for the

00:06:26,039 --> 00:06:32,940
project failure either completely or in

00:06:29,219 --> 00:06:34,500
a stage of development just as in a

00:06:32,940 --> 00:06:36,960
football team there are different roles

00:06:34,500 --> 00:06:38,880
you know we might

00:06:36,960 --> 00:06:41,130
the defense might played a really good

00:06:38,880 --> 00:06:43,889
game the goalkeeper whatever but if the

00:06:41,130 --> 00:06:47,160
team loses then then that sting of

00:06:43,889 --> 00:06:48,750
project failure is is going to you know

00:06:47,160 --> 00:06:52,440
it's going to be felt throughout no

00:06:48,750 --> 00:06:55,139
matter how well an individual played so

00:06:52,440 --> 00:06:57,210
let's set our roles aside for a second

00:06:55,139 --> 00:07:01,530
what is it that we in the application

00:06:57,210 --> 00:07:03,660
world do we deliver all of us you know

00:07:01,530 --> 00:07:05,699
whatever would specific piece of work

00:07:03,660 --> 00:07:09,240
that we do we should all have our eye on

00:07:05,699 --> 00:07:13,289
the prize we should all have a route to

00:07:09,240 --> 00:07:16,080
success so what is it that we are

00:07:13,289 --> 00:07:18,030
delivering Theodore Levitt said people

00:07:16,080 --> 00:07:20,940
don't want a quarter-inch drill they

00:07:18,030 --> 00:07:22,590
want a quarter inch hole as each member

00:07:20,940 --> 00:07:25,349
of the team understands what the real

00:07:22,590 --> 00:07:28,050
problem is and the real value in the

00:07:25,349 --> 00:07:30,060
application that were developing then we

00:07:28,050 --> 00:07:32,610
can begin to engender more quality in

00:07:30,060 --> 00:07:33,960
the work that we do by the way this is a

00:07:32,610 --> 00:07:35,819
principle that not only applies to

00:07:33,960 --> 00:07:39,000
software development for entertaining

00:07:35,819 --> 00:07:41,490
any doll we must communicate amongst all

00:07:39,000 --> 00:07:44,190
stakeholders what the value is in the

00:07:41,490 --> 00:07:46,620
work that we are doing ultimately the

00:07:44,190 --> 00:07:48,630
complexity or the time intensity of the

00:07:46,620 --> 00:07:51,570
work that you've done will pale into

00:07:48,630 --> 00:07:53,400
insignificance when it the work that

00:07:51,570 --> 00:07:55,919
you've done is considered to meet a real

00:07:53,400 --> 00:07:58,169
business need they of course they're

00:07:55,919 --> 00:08:00,090
going to pay you for that work but they

00:07:58,169 --> 00:08:02,039
don't care that it took a long time they

00:08:00,090 --> 00:08:03,509
don't care that it was really complex if

00:08:02,039 --> 00:08:05,460
it meets a real business need if you

00:08:03,509 --> 00:08:08,340
want to make your client happy then meet

00:08:05,460 --> 00:08:13,800
that need you know yeah work hard that's

00:08:08,340 --> 00:08:15,479
part of it in order for us to ensure

00:08:13,800 --> 00:08:17,550
that we are solving the right problems

00:08:15,479 --> 00:08:20,370
we need to create a framework to offer

00:08:17,550 --> 00:08:22,650
assurances to all stakeholders that we

00:08:20,370 --> 00:08:24,870
are on the right track this is a good

00:08:22,650 --> 00:08:26,669
time to talk about Dan north dan north

00:08:24,870 --> 00:08:29,310
created the first-ever behavior driven

00:08:26,669 --> 00:08:31,940
development framework or BDD framework

00:08:29,310 --> 00:08:34,909
and that was called J behave follow

00:08:31,940 --> 00:08:37,469
followed by a story level BDD framework

00:08:34,909 --> 00:08:40,409
for Ruby called our behave which was

00:08:37,469 --> 00:08:42,510
later integrated into the aspect project

00:08:40,409 --> 00:08:45,000
and our spec was later replaced by the

00:08:42,510 --> 00:08:46,769
cucumber project which some of you may

00:08:45,000 --> 00:08:50,559
have heard of

00:08:46,769 --> 00:08:52,509
done naughts introducing BDD article

00:08:50,559 --> 00:08:55,239
appeared in the march two thousand and

00:08:52,509 --> 00:08:58,600
two thousand and six edition a better

00:08:55,239 --> 00:09:00,569
software magazine the idea of behavior

00:08:58,600 --> 00:09:02,860
driven development evolved is done

00:09:00,569 --> 00:09:05,079
articulated his response to many of the

00:09:02,860 --> 00:09:07,899
concerns that he was being based with

00:09:05,079 --> 00:09:09,239
when encouraging development teams to

00:09:07,899 --> 00:09:12,149
approach their projects using

00:09:09,239 --> 00:09:16,119
test-driven development they would ask

00:09:12,149 --> 00:09:19,629
where do we begin testing what do we

00:09:16,119 --> 00:09:22,209
test and what do we not test how much do

00:09:19,629 --> 00:09:26,860
we test in one go and what should we

00:09:22,209 --> 00:09:30,879
call our tests and how do we understand

00:09:26,860 --> 00:09:33,249
why a test fails i hope to cause some of

00:09:30,879 --> 00:09:36,189
these responses as we look at what be

00:09:33,249 --> 00:09:38,529
had camberley delivered to us as a BD BD

00:09:36,189 --> 00:09:40,509
d framework but i recommend that you all

00:09:38,529 --> 00:09:45,189
read this article on appalling to in

00:09:40,509 --> 00:09:47,019
slides key to all of this is that we

00:09:45,189 --> 00:09:49,480
need to communicate more effectively in

00:09:47,019 --> 00:09:53,410
our teams what the acceptance criteria

00:09:49,480 --> 00:09:56,230
are for the work that lies ahead we need

00:09:53,410 --> 00:09:58,269
a common language one sure way of not

00:09:56,230 --> 00:09:59,799
meeting the client's needs is for the

00:09:58,269 --> 00:10:03,459
development team to have their own way

00:09:59,799 --> 00:10:06,519
of describing things and they adopt a

00:10:03,459 --> 00:10:09,309
different language if we cannot make the

00:10:06,519 --> 00:10:11,319
effort to adequately articulate the

00:10:09,309 --> 00:10:12,939
expected behavior of our application

00:10:11,319 --> 00:10:15,489
then we should not be in the business of

00:10:12,939 --> 00:10:18,369
developing quality enterprise standard

00:10:15,489 --> 00:10:20,980
applications we need a ubiquitous

00:10:18,369 --> 00:10:23,499
language that acts as a vehicle for our

00:10:20,980 --> 00:10:25,899
communication between different roles in

00:10:23,499 --> 00:10:28,389
the software project everything that we

00:10:25,899 --> 00:10:31,749
do should revolve around a business a

00:10:28,389 --> 00:10:34,029
business value or user need we have

00:10:31,749 --> 00:10:35,709
attended too many users story workshops

00:10:34,029 --> 00:10:38,019
where the focus of the meeting became

00:10:35,709 --> 00:10:40,089
more about convincing the client that we

00:10:38,019 --> 00:10:41,470
cared about the user than actually

00:10:40,089 --> 00:10:44,470
trying to draw out what the real

00:10:41,470 --> 00:10:49,329
problems were what the real solutions

00:10:44,470 --> 00:10:52,149
that these are needed if a feature being

00:10:49,329 --> 00:10:54,639
discussed does not deliver a benefit to

00:10:52,149 --> 00:10:56,529
a given user then we should be in a

00:10:54,639 --> 00:10:59,019
position to challenge it the process

00:10:56,529 --> 00:11:00,460
will help us to deliver not features

00:10:59,019 --> 00:11:03,070
what business Val

00:11:00,460 --> 00:11:04,900
use the document that comes out of such

00:11:03,070 --> 00:11:08,530
an exercise can then become a measure

00:11:04,900 --> 00:11:11,440
for delivery our work is done when the

00:11:08,530 --> 00:11:14,320
agreed business needs have been met so a

00:11:11,440 --> 00:11:17,620
feature declaration should contain a

00:11:14,320 --> 00:11:21,060
user a benefit to that user and a

00:11:17,620 --> 00:11:23,680
feature that delivers that benefit

00:11:21,060 --> 00:11:28,120
consider the feature declaration as a

00:11:23,680 --> 00:11:31,360
website user I want a user registration

00:11:28,120 --> 00:11:35,380
form so that the site admins can have my

00:11:31,360 --> 00:11:36,820
information there we have a benefit that

00:11:35,380 --> 00:11:38,230
we should feel inclined to challenge

00:11:36,820 --> 00:11:40,270
because we need to consider what the

00:11:38,230 --> 00:11:42,910
benefit is for the user that is

00:11:40,270 --> 00:11:45,640
encountering the feature so this process

00:11:42,910 --> 00:11:47,500
is not only just about getting

00:11:45,640 --> 00:11:49,390
requirements it's about challenging

00:11:47,500 --> 00:11:53,190
requirements and ensuring that what you

00:11:49,390 --> 00:11:53,190
do will bring real business value

00:11:53,850 --> 00:11:57,880
unfortunately a feature declaration

00:11:55,930 --> 00:12:00,040
alone will not allow us to comfort

00:11:57,880 --> 00:12:02,230
confidently deliver an acceptable

00:12:00,040 --> 00:12:04,740
product to our client our client will

00:12:02,230 --> 00:12:07,360
have or should be encouraged to develop

00:12:04,740 --> 00:12:09,820
expectations about the behavior of a

00:12:07,360 --> 00:12:12,400
given feature in the case of a user

00:12:09,820 --> 00:12:14,830
registration form they must visualize

00:12:12,400 --> 00:12:16,240
the process of filling out that form on

00:12:14,830 --> 00:12:18,430
what would happen when the form is

00:12:16,240 --> 00:12:19,900
submitted because if they don't do it at

00:12:18,430 --> 00:12:20,800
the beginning of the project you can bet

00:12:19,900 --> 00:12:23,770
we're going to do it when they actually

00:12:20,800 --> 00:12:26,590
test the thing if our imagination is

00:12:23,770 --> 00:12:28,630
lacking in the planning stage then it

00:12:26,590 --> 00:12:31,600
needs to be awakened because resource is

00:12:28,630 --> 00:12:33,160
expensive and our top developers are

00:12:31,600 --> 00:12:36,760
about to embark on solving the wrong

00:12:33,160 --> 00:12:39,190
problem if we can adequately describe

00:12:36,760 --> 00:12:41,830
and document the various scenarios that

00:12:39,190 --> 00:12:44,350
our users will face when encountering

00:12:41,830 --> 00:12:46,240
this new or improved feature of our

00:12:44,350 --> 00:12:48,640
website then we can find ourselves in a

00:12:46,240 --> 00:12:51,130
position where the client will say if

00:12:48,640 --> 00:12:53,470
the feature behaves in the way that we

00:12:51,130 --> 00:12:58,060
have described here then we consider

00:12:53,470 --> 00:13:00,880
this to be acceptable so a story's

00:12:58,060 --> 00:13:04,540
behavior is it is simply its acceptance

00:13:00,880 --> 00:13:07,150
criteria given some initial context when

00:13:04,540 --> 00:13:10,930
an event occurs then ensure some

00:13:07,150 --> 00:13:12,780
outcomes let's take a look what a real

00:13:10,930 --> 00:13:15,060
example might look like

00:13:12,780 --> 00:13:17,610
I've taken this example from the be hot

00:13:15,060 --> 00:13:20,370
dog tutorial and the featuring question

00:13:17,610 --> 00:13:23,130
is search this is a perfect introduction

00:13:20,370 --> 00:13:25,860
to the gerkin language which was account

00:13:23,130 --> 00:13:27,810
the first with the cucumber project we

00:13:25,860 --> 00:13:31,860
can see here that we have a structure

00:13:27,810 --> 00:13:34,110
for how to layout are you our feature

00:13:31,860 --> 00:13:36,930
declarations and the scenarios that

00:13:34,110 --> 00:13:39,600
describe the expected behavior of this

00:13:36,930 --> 00:13:42,630
feature this document is our high-level

00:13:39,600 --> 00:13:45,390
acceptance test this document could be

00:13:42,630 --> 00:13:48,630
could be used by a tested to verify that

00:13:45,390 --> 00:13:53,190
the feature works as expected any test

00:13:48,630 --> 00:13:55,650
is in the room would you be happy with a

00:13:53,190 --> 00:13:59,030
document like that to accompany the user

00:13:55,650 --> 00:14:02,760
interface that you are about to test

00:13:59,030 --> 00:14:04,500
you'd be clear on what was expected so

00:14:02,760 --> 00:14:06,090
so what are we delivering we are

00:14:04,500 --> 00:14:07,680
delivering these clearly defined

00:14:06,090 --> 00:14:10,410
features that the client has deemed

00:14:07,680 --> 00:14:12,000
acceptable developers in the room would

00:14:10,410 --> 00:14:13,980
you be happy with a document like the

00:14:12,000 --> 00:14:16,290
one we saw on the previous slide to

00:14:13,980 --> 00:14:18,000
direct your work on a given feature I'm

00:14:16,290 --> 00:14:19,710
a developer and one of the first things

00:14:18,000 --> 00:14:21,930
that I concern myself with when I get a

00:14:19,710 --> 00:14:23,940
new project is what is it going to feel

00:14:21,930 --> 00:14:25,470
like at the end you know are we going to

00:14:23,940 --> 00:14:27,390
have a happy client at the end and when

00:14:25,470 --> 00:14:29,520
i get a loose specifications document

00:14:27,390 --> 00:14:31,350
that worries me because it's not clear

00:14:29,520 --> 00:14:33,300
to me what i need to do in order to make

00:14:31,350 --> 00:14:35,330
the client happy in order to meet their

00:14:33,300 --> 00:14:40,620
expectations in order to bring value to

00:14:35,330 --> 00:14:43,230
them we stop developing when the

00:14:40,620 --> 00:14:46,020
business value has been delivered we may

00:14:43,230 --> 00:14:48,150
be tempted to deliver more than what is

00:14:46,020 --> 00:14:50,850
expected this is a common trap with

00:14:48,150 --> 00:14:52,740
Drupal development particularly with

00:14:50,850 --> 00:14:55,410
modules that do more than what you

00:14:52,740 --> 00:14:56,610
expect them to do this might work out

00:14:55,410 --> 00:14:59,880
but you may wish to tread lightly

00:14:56,610 --> 00:15:02,430
because any feature or behavior will

00:14:59,880 --> 00:15:05,370
need to be supported and that new behave

00:15:02,430 --> 00:15:07,290
behavior which was not documented might

00:15:05,370 --> 00:15:09,630
not working quite the way that the

00:15:07,290 --> 00:15:12,990
client expects and cause you more pain

00:15:09,630 --> 00:15:15,060
than you imagined when we achieve the

00:15:12,990 --> 00:15:19,550
accepted be here behavior of a feature

00:15:15,060 --> 00:15:19,550
we know that we can confidently deliver

00:15:20,660 --> 00:15:32,529
oh I just cover that five sorry in order

00:15:29,000 --> 00:15:35,870
to deliver we must test and test often a

00:15:32,529 --> 00:15:38,629
few years ago I was banned for driving

00:15:35,870 --> 00:15:40,579
for six months it wasn't for excessive

00:15:38,629 --> 00:15:42,560
speeding but it was for speeding on a

00:15:40,579 --> 00:15:46,279
number of occasions for accruing points

00:15:42,560 --> 00:15:49,610
I ought to have verified my speed more

00:15:46,279 --> 00:15:54,050
frequently I have the tools available

00:15:49,610 --> 00:15:55,939
for me to stay within the speed limit in

00:15:54,050 --> 00:15:58,459
order to avoid speeding I must know the

00:15:55,939 --> 00:16:01,029
acceptable speed in the area that I'm in

00:15:58,459 --> 00:16:03,949
and I must know what my current speed is

00:16:01,029 --> 00:16:06,230
however frustrating is to get a speeding

00:16:03,949 --> 00:16:08,300
ticket imagine the struggle to stay

00:16:06,230 --> 00:16:11,480
within the speed limit if we did not

00:16:08,300 --> 00:16:14,120
have available to us the the speed limit

00:16:11,480 --> 00:16:17,959
in the current area and if our car was

00:16:14,120 --> 00:16:21,050
not fitted with a speedometer as a

00:16:17,959 --> 00:16:23,720
developer I should be interested in my

00:16:21,050 --> 00:16:25,639
ability to meet an acceptable level of

00:16:23,720 --> 00:16:27,889
quality when working on a particular

00:16:25,639 --> 00:16:30,769
feature in fact this might be a good

00:16:27,889 --> 00:16:32,000
time to mention your unit tests I want

00:16:30,769 --> 00:16:34,519
to make it clear that there is no

00:16:32,000 --> 00:16:36,709
conflict with a kind of tests that will

00:16:34,519 --> 00:16:38,689
cover the behavior of an application and

00:16:36,709 --> 00:16:40,430
the tests that will that will ensure

00:16:38,689 --> 00:16:42,800
that the smallest components of our

00:16:40,430 --> 00:16:45,649
application that i may be the unseen

00:16:42,800 --> 00:16:49,009
heroes of our application canon ought to

00:16:45,649 --> 00:16:50,839
be tested on a unit level while unit

00:16:49,009 --> 00:16:52,579
tests can help to ensure that we build

00:16:50,839 --> 00:16:54,769
the right build the thing right

00:16:52,579 --> 00:16:59,269
acceptance tests ensure that we built

00:16:54,769 --> 00:17:04,939
the right thing making a habit of the

00:16:59,269 --> 00:17:08,740
time so yeah this is the slide now these

00:17:04,939 --> 00:17:11,030
slides will be available later and

00:17:08,740 --> 00:17:13,189
acceptance s verifies that the feature

00:17:11,030 --> 00:17:16,039
works exactly the way the customer team

00:17:13,189 --> 00:17:17,780
expects it to as mentioned it ensures

00:17:16,039 --> 00:17:21,049
that we are built but think the right

00:17:17,780 --> 00:17:22,970
thing when an acceptance test passes it

00:17:21,049 --> 00:17:25,429
indicates that the stakeholder will deem

00:17:22,970 --> 00:17:28,250
your work acceptable this is when

00:17:25,429 --> 00:17:32,559
applications go live this is when final

00:17:28,250 --> 00:17:34,280
invoices are paid so let's mention beha

00:17:32,559 --> 00:17:36,230
be hat is a p

00:17:34,280 --> 00:17:38,900
HP framework for testing your business

00:17:36,230 --> 00:17:41,390
expectations it is heavily inspired by

00:17:38,900 --> 00:17:43,580
the Ruby cucumber project and we owe a

00:17:41,390 --> 00:17:45,770
lot to this man Constantine could

00:17:43,580 --> 00:17:48,410
reassure for his dedication in

00:17:45,770 --> 00:17:52,220
successfully port in this project to PHP

00:17:48,410 --> 00:17:53,930
and being such an advocate for BDD maybe

00:17:52,220 --> 00:17:55,700
before this presentation is through or

00:17:53,930 --> 00:17:57,320
immediately after you can tell him on

00:17:55,700 --> 00:18:00,560
Twitter how excited you are about be

00:17:57,320 --> 00:18:02,450
here the significance for us in the

00:18:00,560 --> 00:18:04,880
Draper world is that this library is

00:18:02,450 --> 00:18:08,320
written in PHP and many of us are quite

00:18:04,880 --> 00:18:08,320
confident programming in that language

00:18:09,280 --> 00:18:14,570
so let's take a look at be halet a

00:18:11,900 --> 00:18:17,750
little closer feature declarations are

00:18:14,570 --> 00:18:19,790
written in the gherkin language these

00:18:17,750 --> 00:18:22,610
documents are passed by the B hat script

00:18:19,790 --> 00:18:24,380
library the behavior of the feature is

00:18:22,610 --> 00:18:26,300
simulated as the steps that have been

00:18:24,380 --> 00:18:28,760
written in the structured feature

00:18:26,300 --> 00:18:31,790
documents are used to trigger browser

00:18:28,760 --> 00:18:34,220
events or to report on what is returned

00:18:31,790 --> 00:18:36,770
in the browser the result of the B hat

00:18:34,220 --> 00:18:43,520
tests is a report telling you if the

00:18:36,770 --> 00:18:45,350
feature works as expected the steps in

00:18:43,520 --> 00:18:48,290
each scenario are matched up with

00:18:45,350 --> 00:18:51,470
functions in a feature in a feature

00:18:48,290 --> 00:18:53,870
context subject using annotations on the

00:18:51,470 --> 00:18:56,450
screen we see steps that are available

00:18:53,870 --> 00:18:59,030
in the mink contest which is a B hat

00:18:56,450 --> 00:19:02,330
extension this shows us how the human

00:18:59,030 --> 00:19:06,610
readable gerken language what's that

00:19:02,330 --> 00:19:08,840
sorry on this one this is this here is a

00:19:06,610 --> 00:19:13,850
screenshot so I can't on this I will on

00:19:08,840 --> 00:19:15,590
the demos okay sorry so this shows us

00:19:13,850 --> 00:19:17,480
how the human readable Gherkin language

00:19:15,590 --> 00:19:20,870
of our feature declarations and

00:19:17,480 --> 00:19:23,690
scenarios is mapped to a test that can

00:19:20,870 --> 00:19:26,270
be automated for us the step given I am

00:19:23,690 --> 00:19:28,580
on forward slash user is passed and

00:19:26,270 --> 00:19:30,590
triggers the visit method and passes in

00:19:28,580 --> 00:19:33,170
the forward slash user as a parameter to

00:19:30,590 --> 00:19:35,210
that function it is easy to see why

00:19:33,170 --> 00:19:37,160
someone may have packaged together a

00:19:35,210 --> 00:19:39,230
bunch of step declarations that we

00:19:37,160 --> 00:19:41,750
encounter commonly with all web

00:19:39,230 --> 00:19:44,180
applications we will find that for many

00:19:41,750 --> 00:19:46,160
of our applications that many of the

00:19:44,180 --> 00:19:47,580
steps that we would call upon have

00:19:46,160 --> 00:19:50,010
actually been predefined

00:19:47,580 --> 00:19:52,050
in the mink extension so it is possible

00:19:50,010 --> 00:19:54,420
to cover much of the behavior of our

00:19:52,050 --> 00:19:58,050
applications without having to write

00:19:54,420 --> 00:20:01,020
much or any PHP code of course we should

00:19:58,050 --> 00:20:04,050
we should challenge the language used in

00:20:01,020 --> 00:20:06,840
the steps even though the behavior of a

00:20:04,050 --> 00:20:08,610
step might match your requirements if

00:20:06,840 --> 00:20:11,010
you do not believe that the human

00:20:08,610 --> 00:20:12,540
readable language is adequate then I

00:20:11,010 --> 00:20:14,340
suggest that you go ahead and write this

00:20:12,540 --> 00:20:17,340
step in a language that means something

00:20:14,340 --> 00:20:19,320
to your team and then write a PHP method

00:20:17,340 --> 00:20:21,660
and your behalf feature context that

00:20:19,320 --> 00:20:24,240
routes to that function which will

00:20:21,660 --> 00:20:28,620
trigger the expected behavior do not

00:20:24,240 --> 00:20:33,180
compromise on the language used again

00:20:28,620 --> 00:20:35,400
sorry fellas the funder I was excited to

00:20:33,180 --> 00:20:36,930
learn that there is a Drupal extension

00:20:35,400 --> 00:20:39,240
available for B hat that makes some

00:20:36,930 --> 00:20:41,370
additional steps available that may be

00:20:39,240 --> 00:20:44,280
considered common for Drupal sites and

00:20:41,370 --> 00:20:47,240
also that bridge from functional gaps

00:20:44,280 --> 00:20:50,580
that you would encounter on your own

00:20:47,240 --> 00:20:52,530
otherwise sorry when you would be faced

00:20:50,580 --> 00:20:54,000
with the task of writing a function that

00:20:52,530 --> 00:20:57,090
determined that you were logged in on a

00:20:54,000 --> 00:20:58,680
Drupal site or actually logged you in so

00:20:57,090 --> 00:21:01,830
that you could perform some tests for

00:20:58,680 --> 00:21:03,240
authenticated users the efforts of those

00:21:01,830 --> 00:21:06,120
who have contributed to the mink

00:21:03,240 --> 00:21:07,710
extension project and the Drupal X so

00:21:06,120 --> 00:21:09,450
yeah I just wanted to mention so we've

00:21:07,710 --> 00:21:11,880
got Jonathan Hedstrom and Melissa

00:21:09,450 --> 00:21:14,240
Anderson to thank for actively working

00:21:11,880 --> 00:21:17,100
on that project on the Drupal extension

00:21:14,240 --> 00:21:19,530
and the efforts of those of those two

00:21:17,100 --> 00:21:20,760
and others who have worked on the Drupal

00:21:19,530 --> 00:21:23,910
extension and those who have worked on a

00:21:20,760 --> 00:21:26,700
mink extension means that in some cases

00:21:23,910 --> 00:21:28,710
covering your web applications with be

00:21:26,700 --> 00:21:31,320
HAP tests will not require you you to

00:21:28,710 --> 00:21:32,970
write a single line of PHP code because

00:21:31,320 --> 00:21:35,130
the steps available for these extensions

00:21:32,970 --> 00:21:36,810
may adequately cover the expected

00:21:35,130 --> 00:21:41,610
behavior of the features of your

00:21:36,810 --> 00:21:43,470
application beha is an acceptance

00:21:41,610 --> 00:21:45,780
testing framework with the mink

00:21:43,470 --> 00:21:47,670
extension enabled it becomes an

00:21:45,780 --> 00:21:50,460
acceptance testing framework for web

00:21:47,670 --> 00:21:54,090
applications the browser is the window

00:21:50,460 --> 00:21:56,130
window through which web users interact

00:21:54,090 --> 00:21:58,430
with web applications and and other

00:21:56,130 --> 00:21:58,430
users

00:22:00,860 --> 00:22:05,760
users are always talking with web

00:22:03,540 --> 00:22:07,560
applications through the browser in

00:22:05,760 --> 00:22:09,630
order to test that our web application

00:22:07,560 --> 00:22:11,370
behaves correctly we need a way to

00:22:09,630 --> 00:22:13,230
simulate this interaction between

00:22:11,370 --> 00:22:17,400
browser and web application in our tests

00:22:13,230 --> 00:22:19,320
we need me to do this mink is a common

00:22:17,400 --> 00:22:22,200
gateway between our application and the

00:22:19,320 --> 00:22:23,640
browser we still need a browser if we

00:22:22,200 --> 00:22:26,220
want to test their applications in

00:22:23,640 --> 00:22:27,840
browsers that were familiar with then we

00:22:26,220 --> 00:22:29,970
need to use the selenium aur sahi

00:22:27,840 --> 00:22:31,890
service we should be running on the

00:22:29,970 --> 00:22:34,800
machine at the time of the tests are on

00:22:31,890 --> 00:22:36,660
the benefit of using actual browsers is

00:22:34,800 --> 00:22:39,450
that you can determine that the site

00:22:36,660 --> 00:22:43,130
work it works as expected in browsers

00:22:39,450 --> 00:22:45,450
that are actually used in production and

00:22:43,130 --> 00:22:48,330
also these regular browsers support

00:22:45,450 --> 00:22:50,430
javascript inherently for many of the

00:22:48,330 --> 00:22:53,160
tests it may be fine to use a headless

00:22:50,430 --> 00:22:58,890
browser and the default that ships would

00:22:53,160 --> 00:23:00,810
be hat is so GU the boot browser and we

00:22:58,890 --> 00:23:03,030
can benefit from the speed speed gains

00:23:00,810 --> 00:23:06,480
involved for the scenario as a website

00:23:03,030 --> 00:23:09,090
user when I visit the homepage I should

00:23:06,480 --> 00:23:11,220
see five news articles unless that

00:23:09,090 --> 00:23:13,620
content is served up by ajax then it

00:23:11,220 --> 00:23:16,830
might be sufficient to allow that to run

00:23:13,620 --> 00:23:20,670
in a headless browser phantom j/s is a

00:23:16,830 --> 00:23:22,800
headless browser which saw he can

00:23:20,670 --> 00:23:25,800
interface with I've been able to use

00:23:22,800 --> 00:23:27,960
this with good results we can target

00:23:25,800 --> 00:23:30,300
specific scenarios to be tested in a

00:23:27,960 --> 00:23:32,340
JavaScript browser while others can be

00:23:30,300 --> 00:23:34,680
run in a non JavaScript headless browser

00:23:32,340 --> 00:23:36,480
we do this by writing the tag at

00:23:34,680 --> 00:23:39,450
javascript above the appropriate

00:23:36,480 --> 00:23:42,030
scenarios and in the config llamo file

00:23:39,450 --> 00:23:44,280
if we have listed which browser and

00:23:42,030 --> 00:23:45,630
driver to use for javascript then it

00:23:44,280 --> 00:23:50,000
will run that test in the JavaScript

00:23:45,630 --> 00:23:56,300
browser so now I'm going to do a demo

00:23:50,000 --> 00:23:56,300
okay through the magic 3g

00:23:57,130 --> 00:24:03,590
okay so I've deliberately so I've honed

00:23:59,690 --> 00:24:05,060
around this the tests that the features

00:24:03,590 --> 00:24:07,190
that are written on the be hott Dogg

00:24:05,060 --> 00:24:10,280
website because I want everyone to come

00:24:07,190 --> 00:24:11,360
out of this so you get to learn you get

00:24:10,280 --> 00:24:13,970
to do a bit more than you have already

00:24:11,360 --> 00:24:15,440
done some of you may be more experienced

00:24:13,970 --> 00:24:17,450
than me but if you haven't used be happy

00:24:15,440 --> 00:24:19,990
or please go on the behalf of website

00:24:17,450 --> 00:24:22,550
and run through some of these kind of

00:24:19,990 --> 00:24:25,940
tutorials and you're happy you'll have a

00:24:22,550 --> 00:24:26,960
good experience with it so and the first

00:24:25,940 --> 00:24:29,600
thing that I wanted to sort of

00:24:26,960 --> 00:24:31,700
demonstrate is that we have a lot of

00:24:29,600 --> 00:24:36,350
step back declarations available to it

00:24:31,700 --> 00:24:45,440
what's the font size like there no it's

00:24:36,350 --> 00:24:54,040
not good what can I do about that turn

00:24:45,440 --> 00:24:59,140
out well can we do the lights actually a

00:24:54,040 --> 00:24:59,140
possibility I do

00:25:00,270 --> 00:25:14,590
so better no come closer shall I go on

00:25:06,430 --> 00:25:16,660
or is it terrible okay let's go good the

00:25:14,590 --> 00:25:18,340
first thing that I wanted to demo is the

00:25:16,660 --> 00:25:20,350
fact that like when you get be hot down

00:25:18,340 --> 00:25:21,760
and we use compel the composer package

00:25:20,350 --> 00:25:23,140
managers to do that and I'm not going to

00:25:21,760 --> 00:25:24,790
cover the install here it's just too

00:25:23,140 --> 00:25:26,200
it'll take too long and we've got

00:25:24,790 --> 00:25:28,600
problems with the internet anyway and

00:25:26,200 --> 00:25:30,850
what you install it and then the first

00:25:28,600 --> 00:25:34,240
time you're on bihar not much will

00:25:30,850 --> 00:25:38,910
happen but if you there are there's a

00:25:34,240 --> 00:25:41,470
parameter that you can kind of pass that

00:25:38,910 --> 00:25:44,830
that lists all of the steps that are

00:25:41,470 --> 00:25:48,190
available actually you seen there what

00:25:44,830 --> 00:25:50,440
would be output with a mink context but

00:25:48,190 --> 00:25:52,540
i'm going to just revert back to using

00:25:50,440 --> 00:25:56,410
the B hat context which is why it ships

00:25:52,540 --> 00:25:58,030
with and you'll see there it comes out

00:25:56,410 --> 00:26:00,730
with no step declaration so you're going

00:25:58,030 --> 00:26:03,750
to want to extend the mink extension so

00:26:00,730 --> 00:26:03,750
I'll go back and do that

00:26:07,500 --> 00:26:12,870
then you've got a bunch of sort of step

00:26:09,570 --> 00:26:15,060
declarations that will cover much of the

00:26:12,870 --> 00:26:16,980
behavior of a web app web application

00:26:15,060 --> 00:26:20,220
and you get even more with the Drupal

00:26:16,980 --> 00:26:21,990
extension so the first feature that

00:26:20,220 --> 00:26:24,330
we're going to sort of demonstrate and

00:26:21,990 --> 00:26:27,840
will will we're going to build on this

00:26:24,330 --> 00:26:29,820
one is the just one scenario for a

00:26:27,840 --> 00:26:32,220
search feature so we've declared our

00:26:29,820 --> 00:26:34,680
search feature here we've specified a

00:26:32,220 --> 00:26:36,990
benefit we specified the user and we've

00:26:34,680 --> 00:26:38,700
specified the feature in the descriptive

00:26:36,990 --> 00:26:41,550
way in a way that could mean something

00:26:38,700 --> 00:26:43,950
to every member of the team and we've

00:26:41,550 --> 00:26:45,870
created a scenario given I am on this

00:26:43,950 --> 00:26:47,730
page when I fill in the search with

00:26:45,870 --> 00:26:49,770
behavior driven development and I I

00:26:47,730 --> 00:26:52,200
press the Search button then I should

00:26:49,770 --> 00:26:54,240
see agile software development and I'm

00:26:52,200 --> 00:27:00,000
going to run this in the headless group

00:26:54,240 --> 00:27:01,500
browser by default it would actually go

00:27:00,000 --> 00:27:03,930
through all of the features but I just

00:27:01,500 --> 00:27:05,280
want to target this one feature so I'm

00:27:03,930 --> 00:27:10,950
just going to use the tag that I've

00:27:05,280 --> 00:27:14,130
created for it called search 01 and it's

00:27:10,950 --> 00:27:19,170
stepping through they're just going to

00:27:14,130 --> 00:27:22,260
do this in it 3g yay so it's gone

00:27:19,170 --> 00:27:25,230
through so two steps of past could be a

00:27:22,260 --> 00:27:30,200
long day how much time do we have

00:27:25,230 --> 00:27:33,060
because i forgot the start but i'm ok

00:27:30,200 --> 00:27:36,030
all right so it passed we had one

00:27:33,060 --> 00:27:42,450
scenario there and then four steps and

00:27:36,030 --> 00:27:45,030
it all past in our headless browser so

00:27:42,450 --> 00:27:48,300
I've just felt upon that here and I used

00:27:45,030 --> 00:27:50,400
a scenario but we want to pass multiple

00:27:48,300 --> 00:27:51,870
so we want to do multiple tests around

00:27:50,400 --> 00:27:53,550
that scenario we're not going to accept

00:27:51,870 --> 00:27:55,380
that it works just because we put in

00:27:53,550 --> 00:27:56,910
behavior driven development and it

00:27:55,380 --> 00:28:01,260
returned what we expected we'll put a

00:27:56,910 --> 00:28:03,930
number of things in there and so what

00:28:01,260 --> 00:28:05,490
I've done here is I've got that example

00:28:03,930 --> 00:28:07,080
rather than in a scenario it's a

00:28:05,490 --> 00:28:09,210
scenario outline which acts as a

00:28:07,080 --> 00:28:11,100
template and it will consider this to be

00:28:09,210 --> 00:28:13,910
one scenario because we've only provided

00:28:11,100 --> 00:28:16,450
one input but we could add to that and

00:28:13,910 --> 00:28:20,850
so we could add like

00:28:16,450 --> 00:28:26,490
when I type in clowns expect to see evil

00:28:20,850 --> 00:28:26,490
because you do right so let's run that

00:28:28,350 --> 00:28:32,820
again this is in the goop headless

00:28:30,670 --> 00:28:32,820
browser

00:28:56,010 --> 00:29:01,310
this would normally work much quicker

00:29:08,360 --> 00:29:13,490
okay so we had one set scenario outline

00:29:11,240 --> 00:29:15,020
but two that's considered to be two

00:29:13,490 --> 00:29:17,690
scenarios because we've run through it

00:29:15,020 --> 00:29:22,490
twice they both passed and there were

00:29:17,690 --> 00:29:24,799
eight steps are passed so the next step

00:29:22,490 --> 00:29:26,420
I'm running that one again and actually

00:29:24,799 --> 00:29:28,370
because of the speed I'm actually going

00:29:26,420 --> 00:29:30,950
to remove the foot we know that that

00:29:28,370 --> 00:29:37,040
kind of works correctly I just wanted to

00:29:30,950 --> 00:29:39,290
introduce a second the scenario so we're

00:29:37,040 --> 00:29:41,059
covering what searching for a page that

00:29:39,290 --> 00:29:43,700
does exist and now we're going to search

00:29:41,059 --> 00:29:45,470
for a page that does not exist and we're

00:29:43,700 --> 00:29:48,280
just using the scenario rather than the

00:29:45,470 --> 00:29:48,280
scenario outline

00:30:10,800 --> 00:30:15,450
after this one I'll probably just rather

00:30:13,260 --> 00:30:19,140
than running all of them I'll target a

00:30:15,450 --> 00:30:21,180
couple and so we can just see some some

00:30:19,140 --> 00:30:22,410
of the other aspects of this had this

00:30:21,180 --> 00:30:24,420
have been running quicker I would have

00:30:22,410 --> 00:30:27,770
liked to have taken to you about sort of

00:30:24,420 --> 00:30:27,770
ten different ones

00:30:34,680 --> 00:30:39,780
so it ran through the first one which

00:30:36,690 --> 00:30:42,870
was searching for a page as expecting

00:30:39,780 --> 00:30:44,310
that the page would return a result and

00:30:42,870 --> 00:30:46,290
then the other one is expecting that the

00:30:44,310 --> 00:30:48,660
page would not return a result given a

00:30:46,290 --> 00:30:55,440
search search them was added and both of

00:30:48,660 --> 00:30:59,910
those past so we're building up you know

00:30:55,440 --> 00:31:03,480
are so library here and here I've got a

00:30:59,910 --> 00:31:05,070
scenario outline just as before and I'm

00:31:03,480 --> 00:31:07,340
going to remove this one entirely just

00:31:05,070 --> 00:31:10,410
so that it'll run a bit quicker for us

00:31:07,340 --> 00:31:12,990
and here I've converted this to a

00:31:10,410 --> 00:31:15,150
scenario outline and just so that that

00:31:12,990 --> 00:31:17,190
you can see this actually working in a

00:31:15,150 --> 00:31:19,170
real browser and I've tagged it with

00:31:17,190 --> 00:31:21,930
that JavaScript we don't need JavaScript

00:31:19,170 --> 00:31:26,940
to run this and but we'll see it

00:31:21,930 --> 00:31:29,430
happening so the B hat yeah mol file

00:31:26,940 --> 00:31:32,160
which contains the default configuration

00:31:29,430 --> 00:31:35,010
for this just contains the path though

00:31:32,160 --> 00:31:38,130
where I want my beach context live and

00:31:35,010 --> 00:31:40,530
also what the URL is that I'm targeting

00:31:38,130 --> 00:31:42,150
so if you were targeting the death URL

00:31:40,530 --> 00:31:44,220
then you would probably have a separate

00:31:42,150 --> 00:31:46,970
be happy Amal or there are other ways to

00:31:44,220 --> 00:31:50,010
do it which would specify the the deb

00:31:46,970 --> 00:31:51,390
URL rather than the production one and

00:31:50,010 --> 00:31:55,020
i've also specified that we're going to

00:31:51,390 --> 00:31:58,860
use view as well but for the detector in

00:31:55,020 --> 00:32:01,110
chrome I've asked it to use Shahid to

00:31:58,860 --> 00:32:05,700
generate the JavaScript session and to

00:32:01,110 --> 00:32:08,550
use the chrome browser sahi when you

00:32:05,700 --> 00:32:10,710
install it by default is ready to go

00:32:08,550 --> 00:32:13,230
with chrome firefox and safari i believe

00:32:10,710 --> 00:32:17,090
i've also added to support for phantom

00:32:13,230 --> 00:32:19,170
GS not me added support by enabled it

00:32:17,090 --> 00:32:21,830
there's plenty of tutorials are

00:32:19,170 --> 00:32:24,810
available online to help you to do that

00:32:21,830 --> 00:32:28,640
so I'm actually going to specify that we

00:32:24,810 --> 00:32:28,640
use that llamo file

00:32:35,210 --> 00:32:37,270
ah

00:32:45,700 --> 00:32:48,750
starts I

00:32:54,530 --> 00:32:56,530
Oh

00:33:20,630 --> 00:33:23,980
so slow ting up page

00:33:33,480 --> 00:33:39,210
it's actually made this will work

00:33:37,380 --> 00:33:40,410
because it doesn't require JavaScript we

00:33:39,210 --> 00:33:43,620
may struggle to demonstrate the

00:33:40,410 --> 00:33:47,419
javascript stuff because I have it died

00:33:43,620 --> 00:33:56,250
after a certain amount yeah which is

00:33:47,419 --> 00:33:58,610
reasonable yeah we still is internet

00:33:56,250 --> 00:33:58,610
still that

00:34:12,950 --> 00:34:19,909
so it's typed in fish and in England we

00:34:17,149 --> 00:34:22,389
eat fish and chips that should be

00:34:19,909 --> 00:34:22,389
expected

00:34:25,590 --> 00:34:31,200
and I'll break out up after this one I

00:34:27,720 --> 00:34:38,430
think I had to going so it's looking on

00:34:31,200 --> 00:34:40,170
the results page exit you haven't seen

00:34:38,430 --> 00:34:42,570
that before but the first one run

00:34:40,170 --> 00:34:47,580
through successfully anyway so I'm happy

00:34:42,570 --> 00:34:52,200
enough to move on on that one so in the

00:34:47,580 --> 00:34:53,850
next one obviously that doesn't require

00:34:52,200 --> 00:34:57,390
javascript to do that I just wanted to

00:34:53,850 --> 00:34:59,970
demo it coming through on chrome and now

00:34:57,390 --> 00:35:01,140
the next step that we want to do is we

00:34:59,970 --> 00:35:03,660
want to test the autocomplete

00:35:01,140 --> 00:35:05,460
functionality so when we're searching

00:35:03,660 --> 00:35:07,410
for a page with auto complete when we

00:35:05,460 --> 00:35:10,440
fell in the search with a given term and

00:35:07,410 --> 00:35:14,190
you wait a designated amount of time

00:35:10,440 --> 00:35:16,290
three seconds they increase 60 seconds

00:35:14,190 --> 00:35:18,930
then I should see behavior driven

00:35:16,290 --> 00:35:20,640
development but the you know what like

00:35:18,930 --> 00:35:23,310
if we don't get to see this that it'd be

00:35:20,640 --> 00:35:24,870
a shame but I'm there is a step here

00:35:23,310 --> 00:35:29,970
that I want to introduce so it's going

00:35:24,870 --> 00:35:33,000
to fail anyway and I'm going to just

00:35:29,970 --> 00:35:38,220
remove this for now just to show you

00:35:33,000 --> 00:35:42,660
what I hope to demo here so this is I'm

00:35:38,220 --> 00:35:46,700
not going to use the JavaScript browser

00:35:42,660 --> 00:35:46,700
here just going to use the goop browser

00:35:48,500 --> 00:35:55,080
still slow isn't it but it's going to

00:35:52,500 --> 00:35:57,660
break basically on the step that says

00:35:55,080 --> 00:36:00,350
and I want and I wait a number of

00:35:57,660 --> 00:36:04,650
seconds that step doesn't exist yet and

00:36:00,350 --> 00:36:06,780
it'll prompt us to add that as a step in

00:36:04,650 --> 00:36:09,360
our feature context so even going to

00:36:06,780 --> 00:36:10,800
give us the code to inject into the

00:36:09,360 --> 00:36:15,300
future context as well so we can just

00:36:10,800 --> 00:36:16,760
copy and paste it in there are there's

00:36:15,300 --> 00:36:22,050
also a parameter that you can pass

00:36:16,760 --> 00:36:23,610
called append append snippets which will

00:36:22,050 --> 00:36:26,220
actually inject it into the feature

00:36:23,610 --> 00:36:27,930
context directly for you so you don't

00:36:26,220 --> 00:36:29,160
even need to copy and paste and when I

00:36:27,930 --> 00:36:31,860
saw that first time I thought man

00:36:29,160 --> 00:36:32,859
whoever implemented that has way more

00:36:31,860 --> 00:36:35,049
time than I

00:36:32,859 --> 00:36:38,710
but I feel that about a lot of these

00:36:35,049 --> 00:36:40,630
projects as well I feel you know in or

00:36:38,710 --> 00:36:42,220
of the the people that contribute these

00:36:40,630 --> 00:36:44,890
tools because they have put a lot of

00:36:42,220 --> 00:36:48,819
working at the wrong cost and timing and

00:36:44,890 --> 00:36:51,069
we do appreciate that then so this this

00:36:48,819 --> 00:36:55,200
is a timing out all over the place

00:36:51,069 --> 00:36:59,099
because the 3g and but needless to say

00:36:55,200 --> 00:37:01,150
the we're encouraged to use the step

00:36:59,099 --> 00:37:02,589
declarations that are available to us in

00:37:01,150 --> 00:37:04,869
the mint context and we've got the

00:37:02,589 --> 00:37:10,989
drupal context available to us but we

00:37:04,869 --> 00:37:15,249
can add additional steps so if i go to

00:37:10,989 --> 00:37:17,259
the feature context it's quite bare at

00:37:15,249 --> 00:37:19,720
the moment i've added this I'll explain

00:37:17,259 --> 00:37:24,279
that one is in a second but here we've

00:37:19,720 --> 00:37:27,190
got like just an example script that we

00:37:24,279 --> 00:37:28,809
could use to create our own step and I'm

00:37:27,190 --> 00:37:32,230
going to create a step that would have

00:37:28,809 --> 00:37:35,670
been useful for us if we wanted to wait

00:37:32,230 --> 00:37:35,670
a designated amount of time

00:37:39,599 --> 00:37:43,650
all you see sublime giri's are probably

00:37:42,359 --> 00:37:49,890
thinking what the heck is he doing right

00:37:43,650 --> 00:37:54,869
now I'm learning okay so the test that

00:37:49,890 --> 00:37:57,539
we wanted to run is the step that we

00:37:54,869 --> 00:37:59,640
wanted to run rather I just just jump

00:37:57,539 --> 00:38:02,130
straight ahead for this one so and I and

00:37:59,640 --> 00:38:04,200
I wait for the suggestion box to appear

00:38:02,130 --> 00:38:06,359
because the first one was and I wait a

00:38:04,200 --> 00:38:08,519
designated amount on toes and I wait

00:38:06,359 --> 00:38:10,109
three seconds and the cool thing that it

00:38:08,519 --> 00:38:12,269
would have done as well that would have

00:38:10,109 --> 00:38:14,700
generated an example method but it would

00:38:12,269 --> 00:38:16,799
have also detected that there was an

00:38:14,700 --> 00:38:19,309
integer in that string I would have

00:38:16,799 --> 00:38:25,019
replaced that integer with a bracket

00:38:19,309 --> 00:38:27,539
back a backslash d plus and so that it

00:38:25,019 --> 00:38:30,029
can actually pass the integer as a

00:38:27,539 --> 00:38:31,979
parameter to that function so that it

00:38:30,029 --> 00:38:34,739
makes it just more useful for when you

00:38:31,979 --> 00:38:36,509
you want to use the same step to just

00:38:34,739 --> 00:38:38,670
designate different to wait for

00:38:36,509 --> 00:38:41,849
different amounts of time now what it

00:38:38,670 --> 00:38:43,589
was decided on this step declaration is

00:38:41,849 --> 00:38:45,269
that it didn't it wasn't really using

00:38:43,589 --> 00:38:47,039
language that many something to the team

00:38:45,269 --> 00:38:49,289
we don't wait a designated amount of

00:38:47,039 --> 00:38:51,089
time we wait for the suggestion box to

00:38:49,289 --> 00:38:53,219
appear so we've changed the language

00:38:51,089 --> 00:38:57,809
here to say and I wait for the

00:38:53,219 --> 00:39:00,920
suggestion box to appear and go to the

00:38:57,809 --> 00:39:00,920
feature context given

00:39:15,859 --> 00:39:26,339
it is submit there's something to that

00:39:22,049 --> 00:39:28,979
effect and then it'll it'll suggest that

00:39:26,339 --> 00:39:33,419
we write our methods in a way that

00:39:28,979 --> 00:39:35,149
resembles the language of the step so it

00:39:33,419 --> 00:39:39,509
will be something like this suggestion

00:39:35,149 --> 00:39:47,489
box to appear that doesn't need a

00:39:39,509 --> 00:39:51,269
parameter and then the command that we

00:39:47,489 --> 00:39:57,359
would the code that would allow us to

00:39:51,269 --> 00:40:02,279
wait that I'm at time there's something

00:39:57,359 --> 00:40:04,619
to this effect so that the next time it

00:40:02,279 --> 00:40:06,149
was ruined that step would it would come

00:40:04,619 --> 00:40:08,880
across that step it would match it over

00:40:06,149 --> 00:40:10,890
the annotation that existed in that in

00:40:08,880 --> 00:40:13,109
the picture context it would run that

00:40:10,890 --> 00:40:15,479
function and then it would either wait

00:40:13,109 --> 00:40:19,259
five seconds which I designated as a

00:40:15,479 --> 00:40:22,439
timeout time or it would stop when the

00:40:19,259 --> 00:40:23,639
suggestion results box appeared and that

00:40:22,439 --> 00:40:25,829
can save us a bit of time when the

00:40:23,639 --> 00:40:29,849
JavaScript browser as well and it also

00:40:25,829 --> 00:40:31,409
just enables it to work it it covers the

00:40:29,849 --> 00:40:36,719
expected behavior because that's what

00:40:31,409 --> 00:40:38,489
our users would expect to happen so

00:40:36,719 --> 00:40:39,989
again here I've got a scenario outlined

00:40:38,489 --> 00:40:41,909
that that we would have used in that

00:40:39,989 --> 00:40:43,949
instance and it's waiting for the

00:40:41,909 --> 00:40:45,479
suggestion box to appear and we can just

00:40:43,949 --> 00:40:47,819
supply different results and if either

00:40:45,479 --> 00:40:49,859
run this in the Chrome browser we would

00:40:47,819 --> 00:40:51,749
have seen it filling the results the

00:40:49,859 --> 00:40:56,069
suggestion box appear it would verify

00:40:51,749 --> 00:40:57,989
this that the suggestion is there and

00:40:56,069 --> 00:40:59,609
then it would pass it and then it just

00:40:57,989 --> 00:41:06,029
run through them all and say that all

00:40:59,609 --> 00:41:08,549
your tests had passed another thing that

00:41:06,029 --> 00:41:10,919
I could have demoed as well is that on a

00:41:08,549 --> 00:41:12,869
failure it might be useful to sort of

00:41:10,919 --> 00:41:14,309
trigger an event and the other day on

00:41:12,869 --> 00:41:16,859
twitter us all that somebody had

00:41:14,309 --> 00:41:19,979
integrated it with mantis which was

00:41:16,859 --> 00:41:23,669
their sort of issue queue platform and

00:41:19,979 --> 00:41:26,279
on a fail it would create an issue as to

00:41:23,669 --> 00:41:27,410
notify the the appropriate team member

00:41:26,279 --> 00:41:32,660
to do that and you can

00:41:27,410 --> 00:41:34,789
screenshot as well phantom jas allows

00:41:32,660 --> 00:41:38,299
you to write sort of scripts that can be

00:41:34,789 --> 00:41:41,390
run and there's this in my feature

00:41:38,299 --> 00:41:43,670
context here this after separate

00:41:41,390 --> 00:41:46,130
function gets ruined at the end of a

00:41:43,670 --> 00:41:48,920
step and I'm just saying here if the

00:41:46,130 --> 00:41:54,890
browser name is phantom j/s and the

00:41:48,920 --> 00:41:59,630
event just returned and the event get

00:41:54,890 --> 00:42:02,299
result is step event failed then execute

00:41:59,630 --> 00:42:04,299
a script and that script takes a

00:42:02,299 --> 00:42:06,980
screenshot and it saves it into a

00:42:04,299 --> 00:42:09,049
designated folder and puts a date stamp

00:42:06,980 --> 00:42:11,299
on it so you can trigger all the other

00:42:09,049 --> 00:42:13,640
events around there now there are a lot

00:42:11,299 --> 00:42:15,020
of the cool thing about be hat is it's

00:42:13,640 --> 00:42:17,869
just a script library at the end of the

00:42:15,020 --> 00:42:20,329
day you can you can inject it into your

00:42:17,869 --> 00:42:21,559
code base so it can be part of you've

00:42:20,329 --> 00:42:24,079
got your duck root and then you've got

00:42:21,559 --> 00:42:26,809
you be hat tests and a lot of people

00:42:24,079 --> 00:42:29,780
have made be hard tests that cover sites

00:42:26,809 --> 00:42:32,990
that were aware of like drupal.org or

00:42:29,780 --> 00:42:34,940
commerce kickstart and you can just

00:42:32,990 --> 00:42:39,430
download them and run them on a site

00:42:34,940 --> 00:42:43,339
that's already up there and the this

00:42:39,430 --> 00:42:44,960
there was a the be half the test full

00:42:43,339 --> 00:42:46,880
commerce kickstart I've been put

00:42:44,960 --> 00:42:48,799
together by Graham Taylor I think it's

00:42:46,880 --> 00:42:51,950
sort of a work in progress but it's just

00:42:48,799 --> 00:42:53,510
a proof of concept so you can commerce

00:42:51,950 --> 00:42:56,270
kickstart install it on your machine and

00:42:53,510 --> 00:43:00,920
then run these tests that are written

00:42:56,270 --> 00:43:07,480
written up in these features how much

00:43:00,920 --> 00:43:16,460
Sam got sorry okay cool

00:43:07,480 --> 00:43:17,740
right so I apologize that about the

00:43:16,460 --> 00:43:21,590
internet I would have liked to have

00:43:17,740 --> 00:43:23,540
shown you some flashy demos and stuff

00:43:21,590 --> 00:43:26,090
what I hope that the value in what and

00:43:23,540 --> 00:43:29,300
we did see some demos we saw JavaScript

00:43:26,090 --> 00:43:31,520
working and I would have liked I've got

00:43:29,300 --> 00:43:33,860
commerce kickstart installed and I

00:43:31,520 --> 00:43:38,200
should have really thought I had but the

00:43:33,860 --> 00:43:42,200
internet and I die it's sorry sorry okay

00:43:38,200 --> 00:43:43,400
so now that we've seen a demo I hope

00:43:42,200 --> 00:43:45,110
that you can see that this is something

00:43:43,400 --> 00:43:46,820
that you could easily incorporate into

00:43:45,110 --> 00:43:48,260
your projects I hope you can take

00:43:46,820 --> 00:43:51,080
something away from this presentation

00:43:48,260 --> 00:43:53,840
whatever your experience of applying

00:43:51,080 --> 00:43:57,320
user stories developing acceptance tests

00:43:53,840 --> 00:43:59,090
or using b-hat itself if you if you have

00:43:57,320 --> 00:44:01,970
never installed behalf please over the

00:43:59,090 --> 00:44:04,310
next few days install it and have a play

00:44:01,970 --> 00:44:05,960
if you've used be HAP before maybe

00:44:04,310 --> 00:44:08,240
you've been prompted to use it in a

00:44:05,960 --> 00:44:11,150
different way or maybe you were fair

00:44:08,240 --> 00:44:13,430
fairly familiar with B hat but you were

00:44:11,150 --> 00:44:16,310
struggling to communicate to all the

00:44:13,430 --> 00:44:18,470
stakeholders the value in behavior

00:44:16,310 --> 00:44:20,960
driven development and I hope maybe that

00:44:18,470 --> 00:44:23,240
I've helped you to articulate a little

00:44:20,960 --> 00:44:25,820
better the value in using V hat to

00:44:23,240 --> 00:44:28,570
protect a project from failure and to

00:44:25,820 --> 00:44:30,890
assist you in delivering business values

00:44:28,570 --> 00:44:33,020
so this is a tool for those who care

00:44:30,890 --> 00:44:34,820
about quality for those who care about

00:44:33,020 --> 00:44:39,950
delivery and it's a structured approach

00:44:34,820 --> 00:44:42,350
to delivering quality for me the

00:44:39,950 --> 00:44:44,180
ultimate expression of automated

00:44:42,350 --> 00:44:46,550
acceptance testing is in aid in

00:44:44,180 --> 00:44:49,520
continuous integration and continuous

00:44:46,550 --> 00:44:52,370
deployment this might be considered the

00:44:49,520 --> 00:44:54,560
crucial measure that our latest commit

00:44:52,370 --> 00:44:57,770
has not compromised the integrity of our

00:44:54,560 --> 00:45:01,100
application in its ability to behave as

00:44:57,770 --> 00:45:04,040
expected having the application covered

00:45:01,100 --> 00:45:07,700
with automated acceptance tests makes it

00:45:04,040 --> 00:45:11,060
easier to confidently deploy a fix or

00:45:07,700 --> 00:45:13,100
feature enhancement to a site I'm not

00:45:11,060 --> 00:45:15,800
going to talk about the merits and

00:45:13,100 --> 00:45:17,210
challenges of continuous deployment but

00:45:15,800 --> 00:45:19,670
for those who would hope to be in a

00:45:17,210 --> 00:45:20,780
position to introduce automation through

00:45:19,670 --> 00:45:23,330
the release process

00:45:20,780 --> 00:45:26,090
can you envisage a scenario where you

00:45:23,330 --> 00:45:28,300
introduce a fix to a website and commit

00:45:26,090 --> 00:45:31,220
the code into the appropriate get branch

00:45:28,300 --> 00:45:33,440
the simple act of committing that code

00:45:31,220 --> 00:45:35,570
could trigger a chain of events that

00:45:33,440 --> 00:45:37,640
could deploy a clone of your production

00:45:35,570 --> 00:45:40,010
site in code files database and

00:45:37,640 --> 00:45:41,950
environment your new code could be

00:45:40,010 --> 00:45:44,630
introduced and a few Jewish commands

00:45:41,950 --> 00:45:47,420
automatically run to trigger the pending

00:45:44,630 --> 00:45:50,180
update hooks and clear cache because you

00:45:47,420 --> 00:45:52,540
have B hat tests in the git repo you

00:45:50,180 --> 00:45:54,980
should trigger those those tests and

00:45:52,540 --> 00:45:57,590
simulate the behavior of the whole site

00:45:54,980 --> 00:46:00,530
and determine whether everything works

00:45:57,590 --> 00:46:02,870
as expected a successful run of the B

00:46:00,530 --> 00:46:05,330
hat tests could trigger a get tagged

00:46:02,870 --> 00:46:07,060
being created and deployment being

00:46:05,330 --> 00:46:10,880
scheduled to the production environment

00:46:07,060 --> 00:46:13,100
if the B hat test fails then we could

00:46:10,880 --> 00:46:15,230
automatically generate a screenshot of

00:46:13,100 --> 00:46:17,810
the interface at the point of failure

00:46:15,230 --> 00:46:20,690
and advise the interested parties that

00:46:17,810 --> 00:46:22,430
an unexpected failure had occurred for

00:46:20,690 --> 00:46:25,250
each release of our application we

00:46:22,430 --> 00:46:26,840
should only have the tests in the code

00:46:25,250 --> 00:46:29,600
that cover the behavior of the

00:46:26,840 --> 00:46:31,190
application in its current state and not

00:46:29,600 --> 00:46:36,320
the tests that cover the behavior of

00:46:31,190 --> 00:46:38,780
features yet to be developed integration

00:46:36,320 --> 00:46:41,990
is often very painful it's a painful

00:46:38,780 --> 00:46:44,870
process if this is true on your project

00:46:41,990 --> 00:46:46,790
integrate every time somebody checks in

00:46:44,870 --> 00:46:49,880
and do it from the start of the project

00:46:46,790 --> 00:46:51,830
if testing is a painful process that

00:46:49,880 --> 00:46:55,160
occurs just before release don't do it

00:46:51,830 --> 00:46:57,890
at the end instead do it continually

00:46:55,160 --> 00:47:00,290
from the beginning of the project if

00:46:57,890 --> 00:47:02,840
releasing software is painful aim to

00:47:00,290 --> 00:47:05,060
release it every time somebody checks in

00:47:02,840 --> 00:47:08,180
a change that passes all the automated

00:47:05,060 --> 00:47:10,760
tests reaching a level of active

00:47:08,180 --> 00:47:13,460
acceptance tests that can be considered

00:47:10,760 --> 00:47:16,280
a benchmark for quality would open up

00:47:13,460 --> 00:47:17,990
the door to such a possibility whatever

00:47:16,280 --> 00:47:20,840
the challenges are for implementing

00:47:17,990 --> 00:47:22,120
continuous delivery one thing is for

00:47:20,840 --> 00:47:24,800
sure we could not do it without

00:47:22,120 --> 00:47:27,860
automating our acceptance tests and B

00:47:24,800 --> 00:47:29,750
hat helps us to do that in closing I

00:47:27,860 --> 00:47:32,840
want to say something about the word

00:47:29,750 --> 00:47:33,800
acceptance or acceptable I used it in my

00:47:32,840 --> 00:47:36,050
session title

00:47:33,800 --> 00:47:38,360
and we encounter it most commonly in the

00:47:36,050 --> 00:47:41,330
phase of project delivery called user

00:47:38,360 --> 00:47:43,040
acceptance testing maybe when you

00:47:41,330 --> 00:47:47,030
started out in this business you hope to

00:47:43,040 --> 00:47:49,730
do more than acceptable work maybe when

00:47:47,030 --> 00:47:51,530
you started so you hoped you would be

00:47:49,730 --> 00:47:54,290
involved in delivering exceptional work

00:47:51,530 --> 00:47:56,930
let me say this in order to exceed a

00:47:54,290 --> 00:47:59,210
client's expectations you must first

00:47:56,930 --> 00:48:01,880
pass the post of achieving their

00:47:59,210 --> 00:48:04,670
expectations giving a client what they

00:48:01,880 --> 00:48:06,620
expect is not to be underestimated the

00:48:04,670 --> 00:48:08,630
expected behavior of a set of features

00:48:06,620 --> 00:48:11,270
designed to meet the real business needs

00:48:08,630 --> 00:48:13,850
of the users of an application is the

00:48:11,270 --> 00:48:23,960
foundation of exceptional work thank you

00:48:13,850 --> 00:48:26,210
I invite any questions if you do have a

00:48:23,960 --> 00:48:31,550
question or comment please come to the

00:48:26,210 --> 00:48:32,750
mic and then I do really want your

00:48:31,550 --> 00:48:34,280
comments as well if there's something

00:48:32,750 --> 00:48:35,720
that you've been itching for me to say

00:48:34,280 --> 00:48:37,790
you know you've been using be hot in a

00:48:35,720 --> 00:48:40,570
cool way then please come up and and

00:48:37,790 --> 00:48:40,570
tell us about it

00:48:43,910 --> 00:48:47,720
and do you mind coming up to the mic is

00:48:45,950 --> 00:48:49,849
ok because then we can get it on the

00:48:47,720 --> 00:49:01,369
tape it's just in a little middle of the

00:48:49,849 --> 00:49:03,980
room the practice I've actually seen

00:49:01,369 --> 00:49:06,799
down with your client and writing your

00:49:03,980 --> 00:49:09,349
specification in this format what are

00:49:06,799 --> 00:49:10,849
the tools for actually getting the

00:49:09,349 --> 00:49:13,039
things written you know you can sit down

00:49:10,849 --> 00:49:14,690
there and end up with pages and pages of

00:49:13,039 --> 00:49:16,670
these ducks but what are you trying to

00:49:14,690 --> 00:49:20,119
do when you set up done with a client

00:49:16,670 --> 00:49:21,799
and write up the specification in this

00:49:20,119 --> 00:49:23,690
BDD language is that because that is

00:49:21,799 --> 00:49:26,180
part of your mission isn't it your spec

00:49:23,690 --> 00:49:28,549
is your test yeah well it's important

00:49:26,180 --> 00:49:31,520
first of all that whatever we produce is

00:49:28,549 --> 00:49:33,640
considered to be the definition you know

00:49:31,520 --> 00:49:36,799
so what we want to get away from is

00:49:33,640 --> 00:49:38,450
having you know this is the best we

00:49:36,799 --> 00:49:41,359
could do in this meeting and then have

00:49:38,450 --> 00:49:43,609
it translated you know and then we all

00:49:41,359 --> 00:49:45,799
will write the profits specification you

00:49:43,609 --> 00:49:47,210
start giving at a later time because

00:49:45,799 --> 00:49:52,190
you'll lose some of the value of the

00:49:47,210 --> 00:49:56,690
application and so what people are

00:49:52,190 --> 00:49:58,760
worried that the these meetings that you

00:49:56,690 --> 00:50:00,470
have with the client to draw out all the

00:49:58,760 --> 00:50:02,299
scenarios that might cover the accepted

00:50:00,470 --> 00:50:05,660
behavior would be long and laborious

00:50:02,299 --> 00:50:08,029
them but we only need to get to the

00:50:05,660 --> 00:50:11,990
point where as I said in a presentation

00:50:08,029 --> 00:50:14,869
if if it works as documented in this

00:50:11,990 --> 00:50:17,029
document and we've got the facility here

00:50:14,869 --> 00:50:18,829
of the Gherkin language so so we can use

00:50:17,029 --> 00:50:21,109
that as a structure and I believe that

00:50:18,829 --> 00:50:23,690
there are plugins I'd have been worked

00:50:21,109 --> 00:50:27,920
on or available for various text editors

00:50:23,690 --> 00:50:29,510
and if it works as described here then

00:50:27,920 --> 00:50:32,180
it's acceptable and you need to get sign

00:50:29,510 --> 00:50:34,369
off on that yeah does that solve an

00:50:32,180 --> 00:50:36,770
through it yeah it's just a matter of

00:50:34,369 --> 00:50:39,260
how easy is it to say with your client

00:50:36,770 --> 00:50:41,779
in a meeting and write these things in a

00:50:39,260 --> 00:50:45,500
way that is useful so you don't rewrite

00:50:41,779 --> 00:50:49,450
them again it's it easier than handling

00:50:45,500 --> 00:50:49,450
the fallout of not doing it yeah

00:50:55,550 --> 00:51:00,870
so Simon said that there is a deer

00:50:58,650 --> 00:51:03,180
extension which allows you to put the

00:51:00,870 --> 00:51:04,740
tests in here and that's true I know

00:51:03,180 --> 00:51:06,450
some people that are doing it up not

00:51:04,740 --> 00:51:09,260
implemented it myself so you can

00:51:06,450 --> 00:51:11,700
actually put them in JIRA and it will

00:51:09,260 --> 00:51:15,360
you enable the Giro extension and not

00:51:11,700 --> 00:51:16,830
actually so use the api's and get the

00:51:15,360 --> 00:51:19,080
test from zero and that can be helpful

00:51:16,830 --> 00:51:20,580
as well but I think it's important that

00:51:19,080 --> 00:51:22,680
they're also encode as well so that

00:51:20,580 --> 00:51:25,710
we've got you can just check out the

00:51:22,680 --> 00:51:27,180
code and know what tests to run for that

00:51:25,710 --> 00:51:31,500
code because you might want to roll back

00:51:27,180 --> 00:51:33,660
for something like that yeah a question

00:51:31,500 --> 00:51:36,240
as well and kind of new to this may be a

00:51:33,660 --> 00:51:39,090
stupid question but suppose you have a

00:51:36,240 --> 00:51:41,640
test and it it changes your data some

00:51:39,090 --> 00:51:43,740
way and you have a lot of tests how do

00:51:41,640 --> 00:51:48,030
you prevent that the change of the data

00:51:43,740 --> 00:51:52,830
in test a as an influence on another

00:51:48,030 --> 00:51:56,190
test yeah ideally every test every

00:51:52,830 --> 00:51:59,040
scenario should be used in isolation and

00:51:56,190 --> 00:52:01,380
there's a there's different ways of

00:51:59,040 --> 00:52:03,150
doing it bluffing with a Drupal API

00:52:01,380 --> 00:52:05,160
extension so I was using the dress

00:52:03,150 --> 00:52:07,080
extension or I would have been using the

00:52:05,160 --> 00:52:09,480
dress extension to log in to a site and

00:52:07,080 --> 00:52:12,300
perform a test as an automated user and

00:52:09,480 --> 00:52:14,850
is that rightly it's making changes to

00:52:12,300 --> 00:52:18,300
the database but cleanup could be done

00:52:14,850 --> 00:52:20,580
after every test and so that it's as it

00:52:18,300 --> 00:52:23,040
so that you could target that test and

00:52:20,580 --> 00:52:25,950
no other tests would impact upon it so

00:52:23,040 --> 00:52:28,050
you just after the test you'll delivery

00:52:25,950 --> 00:52:29,910
delete the user if you've created users

00:52:28,050 --> 00:52:32,070
so you may create a dementia to run a

00:52:29,910 --> 00:52:34,500
test delete the content yeah okay

00:52:32,070 --> 00:52:46,830
together that would be the the desired

00:52:34,500 --> 00:52:49,140
effect yeah it wouldn't get run online

00:52:46,830 --> 00:52:51,510
so we made a deployment that created

00:52:49,140 --> 00:52:53,850
them had a test and creating new content

00:52:51,510 --> 00:52:55,830
to see that worked when we can't we'd

00:52:53,850 --> 00:52:57,660
run that on a dev environment we never

00:52:55,830 --> 00:53:00,300
sort of went live with that and then we

00:52:57,660 --> 00:53:01,590
had a clean up that's a really useful

00:53:00,300 --> 00:53:03,210
thing I'm going to repeat that because

00:53:01,590 --> 00:53:07,500
it was on the mic so he's saying there

00:53:03,210 --> 00:53:08,850
that he was able to identify test that

00:53:07,500 --> 00:53:10,680
would be destructive and that you would

00:53:08,850 --> 00:53:13,140
never want to run on life some test

00:53:10,680 --> 00:53:15,300
you're willing to run on life so rightly

00:53:13,140 --> 00:53:18,480
so you can tag those those tests those

00:53:15,300 --> 00:53:20,970
scenarios and just as I tagged I was

00:53:18,480 --> 00:53:22,740
running just a specific tag if you

00:53:20,970 --> 00:53:25,920
rather than using the ampersand you use

00:53:22,740 --> 00:53:27,960
the tyndall you can say run everything

00:53:25,920 --> 00:53:31,190
except and so that's what you've been

00:53:27,960 --> 00:53:31,190
doing there and he's found that useful

00:53:31,370 --> 00:53:38,760
so with well a behavior tests you're

00:53:36,390 --> 00:53:40,260
really testing more the user interface

00:53:38,760 --> 00:53:42,330
so the thing that you can actually

00:53:40,260 --> 00:53:44,180
explain to the client and then you have

00:53:42,330 --> 00:53:47,040
unit tests which are really technical

00:53:44,180 --> 00:53:49,770
sometimes there are some tests which are

00:53:47,040 --> 00:53:51,780
really so integration tests acceptant

00:53:49,770 --> 00:53:53,640
test but are really something that only

00:53:51,780 --> 00:53:56,550
your developers will understand so you

00:53:53,640 --> 00:53:58,440
want to test some edge case how do you

00:53:56,550 --> 00:54:01,950
really integrate those do you put them

00:53:58,440 --> 00:54:03,120
in in some I want to test crazy edge

00:54:01,950 --> 00:54:06,690
case and then you actually implement

00:54:03,120 --> 00:54:07,860
that or there's probably a multitude of

00:54:06,690 --> 00:54:10,050
answers for that because it would depend

00:54:07,860 --> 00:54:12,630
upon circumstances it may be that if you

00:54:10,050 --> 00:54:15,510
cannot describe it in a way that

00:54:12,630 --> 00:54:17,910
actually aligns it with some business

00:54:15,510 --> 00:54:20,580
value then then maybe there's a missed

00:54:17,910 --> 00:54:21,750
opportunity there and you could go back

00:54:20,580 --> 00:54:24,540
to the drawing board a little bit

00:54:21,750 --> 00:54:26,640
because is sort of well-documented that

00:54:24,540 --> 00:54:28,980
if you actually tie everything around

00:54:26,640 --> 00:54:31,490
the user need that that you can so it's

00:54:28,980 --> 00:54:35,040
a process of creation of innovation and

00:54:31,490 --> 00:54:37,020
but and people are using be hat in

00:54:35,040 --> 00:54:38,670
different ways the be high yourself

00:54:37,020 --> 00:54:40,650
without the mink extension it's an

00:54:38,670 --> 00:54:42,180
acceptance testing framework but and

00:54:40,650 --> 00:54:45,090
people are using it for units s

00:54:42,180 --> 00:54:48,690
functional tests and so if it helps use

00:54:45,090 --> 00:54:50,370
it yeah I think the key message here and

00:54:48,690 --> 00:54:53,070
I think that what I really like about

00:54:50,370 --> 00:54:55,440
the guys who have written be hat is the

00:54:53,070 --> 00:54:58,440
saying the right things initially one

00:54:55,440 --> 00:55:00,330
constant in and began writing the B hat

00:54:58,440 --> 00:55:01,590
till he didn't in visit using it in the

00:55:00,330 --> 00:55:03,030
ways that it's been used

00:55:01,590 --> 00:55:06,270
and the first time that I saw him

00:55:03,030 --> 00:55:08,760
present on it was a symphony live London

00:55:06,270 --> 00:55:12,870
last year and then I saw him again in

00:55:08,760 --> 00:55:15,540
Manchester and he didn't do a demo at

00:55:12,870 --> 00:55:16,920
all and I was like if I'd have known

00:55:15,540 --> 00:55:18,840
ahead of time that he wasn't going to

00:55:16,920 --> 00:55:21,900
show us his mad VIN skills and I would

00:55:18,840 --> 00:55:24,060
have been disappointed because in London

00:55:21,900 --> 00:55:26,490
he was doing it in front of your eyes of

00:55:24,060 --> 00:55:29,670
like important stuff like tests doing

00:55:26,490 --> 00:55:31,530
tests and then and then not doing any

00:55:29,670 --> 00:55:33,690
development until there's a test to

00:55:31,530 --> 00:55:36,690
cover it but what he talked about is its

00:55:33,690 --> 00:55:38,880
ability to have assist you in delivering

00:55:36,690 --> 00:55:41,730
quality and ensuring that that agile

00:55:38,880 --> 00:55:43,380
process is protected and and this is the

00:55:41,730 --> 00:55:45,870
message that we need testing is

00:55:43,380 --> 00:55:48,150
important but what we've struggled with

00:55:45,870 --> 00:55:50,490
is selling it to every member of the

00:55:48,150 --> 00:55:53,810
team this isn't just about testing it's

00:55:50,490 --> 00:55:53,810
about delivering what the client needs

00:55:56,060 --> 00:55:59,060

YouTube URL: https://www.youtube.com/watch?v=pMvW2IK8Hl0


