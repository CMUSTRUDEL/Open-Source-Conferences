Title: DrupalCon Prague 2013: DELIVERING DRUPAL AT SCALE
Publication date: 2013-09-26
Playlist: DrupalCon Prague - September 2013
Description: 
	A series of lightning talks from the team at Capgemini, showcasing some approaches to the common issues of large scale development teams.

BUILDING A SCALABLE DEVELOPER WORKFLOW
As your development team grows, and the rate of change of your project increases, it's inevitable that you'll encounter some issues with scaling your development process and keeping on top of all that change. With some lessons learnt at the coalface, we'll look at things that have worked, and some things that didn't go so well.

BDD AND BEHAT: GET YOUR CLIENTS TO WRITE YOUR TESTS
We'll give you the lowdown on Behaviour Driven Development (BDD), a technique for agile requirements gathering and testing that takes the best of TDD (Test Driven Development) and enables non-technical stakeholders to write all of your acceptance tests in plain English.

We'll give an insight on how you can use Behat to drive the development of your projects and enable your software developers and clients to have a shared tool and process to collaborate.

GET YOUR BITS IN: EASIER SITE MIGRATION
It's highly unusual for enterprise clients to be building their first website. We'll look at the tools we've adopted and practices we've developed to take a structured, repeatable and testable approach to content migration.
Captions: 
	00:00:00,000 --> 00:00:05,310
hey everyone I'm my name is Graham

00:00:02,550 --> 00:00:09,870
Taylor these are my colleagues this is

00:00:05,310 --> 00:00:11,219
Elliot to my left and Andrew everybody

00:00:09,870 --> 00:00:12,990
here you you probably just like hit the

00:00:11,219 --> 00:00:17,100
jackpot because not only do you get to

00:00:12,990 --> 00:00:19,289
your one talk you get to hear 3 and 0 if

00:00:17,100 --> 00:00:20,400
I leave like after I've done my bet it's

00:00:19,289 --> 00:00:22,830
not because I don't want to answer your

00:00:20,400 --> 00:00:24,840
questions it's because there's a

00:00:22,830 --> 00:00:26,910
scheduling clash and I'm actually meant

00:00:24,840 --> 00:00:30,330
to be presenting downstairs as well I

00:00:26,910 --> 00:00:32,880
can clone myself in time at the behat

00:00:30,330 --> 00:00:36,149
lab so if you do have any questions for

00:00:32,880 --> 00:00:38,610
me then we've got a stand come and see

00:00:36,149 --> 00:00:40,079
me but hopefully these guys will be able

00:00:38,610 --> 00:00:45,390
to answer your questions if you happen

00:00:40,079 --> 00:00:49,530
um so let's get started who are we so we

00:00:45,390 --> 00:00:51,840
all work for cap gemini some of you

00:00:49,530 --> 00:00:53,329
probably know capgemini i guess most of

00:00:51,840 --> 00:00:57,660
you probably do a bit of large

00:00:53,329 --> 00:01:00,059
multinational organization we are have

00:00:57,660 --> 00:01:02,160
we do drupal that's only a small slice

00:01:00,059 --> 00:01:05,760
of the pie and organization as you can

00:01:02,160 --> 00:01:08,610
imagine but it is growing most of our

00:01:05,760 --> 00:01:11,040
Drupal projects at least the biggest

00:01:08,610 --> 00:01:13,850
ones are based out of the UK but we also

00:01:11,040 --> 00:01:18,780
have Drupal teams in France and India

00:01:13,850 --> 00:01:23,869
Belgium Sweden the Netherlands in the UK

00:01:18,780 --> 00:01:26,880
we around 30 drupal developer strong and

00:01:23,869 --> 00:01:29,070
yeah we have a stand here as I mentioned

00:01:26,880 --> 00:01:31,799
before we've given away kazoos so come

00:01:29,070 --> 00:01:33,360
along and give us a tuner because they

00:01:31,799 --> 00:01:37,409
will record you put on YouTube you can

00:01:33,360 --> 00:01:39,360
win some prizes and so what do we do

00:01:37,409 --> 00:01:42,090
here are some of the clients that we

00:01:39,360 --> 00:01:45,110
work with our biggest project in the UK

00:01:42,090 --> 00:01:48,860
is the Royal Mail which also includes

00:01:45,110 --> 00:01:51,180
parcelforce and the post office websites

00:01:48,860 --> 00:01:54,570
Royal Mail just to give you some stats

00:01:51,180 --> 00:01:58,229
on average is doing around 21 million

00:01:54,570 --> 00:02:00,469
Commerce orders per year our next

00:01:58,229 --> 00:02:03,119
biggest project is probably Eurostar

00:02:00,469 --> 00:02:07,380
which is averaging around two million in

00:02:03,119 --> 00:02:11,209
revenue per day so obviously as you can

00:02:07,380 --> 00:02:13,140
see we do big sites

00:02:11,209 --> 00:02:15,890
I'm going to talk a little bit about

00:02:13,140 --> 00:02:19,400
building a scalable developer workflow

00:02:15,890 --> 00:02:23,370
so let's drill into that a little bit

00:02:19,400 --> 00:02:26,909
the first thing you'll need is developer

00:02:23,370 --> 00:02:28,260
obviously if if you're doing things that

00:02:26,909 --> 00:02:30,480
scaled it's likely you're going to have

00:02:28,260 --> 00:02:35,069
more than one so you're gonna have

00:02:30,480 --> 00:02:37,200
multiple developers first thing I think

00:02:35,069 --> 00:02:40,470
is that's really poor important is that

00:02:37,200 --> 00:02:43,200
you have the right people on the bus and

00:02:40,470 --> 00:02:46,260
the right blend of people as well so you

00:02:43,200 --> 00:02:49,079
need to decide do you need three senior

00:02:46,260 --> 00:02:52,260
developers one mid level one junior test

00:02:49,079 --> 00:02:54,209
or business analyst it's really

00:02:52,260 --> 00:02:56,069
important that you have the right blend

00:02:54,209 --> 00:02:57,480
of people in your development team and

00:02:56,069 --> 00:03:00,470
because it's really important to get off

00:02:57,480 --> 00:03:04,889
on the right foot I've seen project

00:03:00,470 --> 00:03:08,609
starting were basically massive project

00:03:04,889 --> 00:03:11,129
start more developers arrive on day one

00:03:08,609 --> 00:03:14,340
it's just lots of other people other

00:03:11,129 --> 00:03:16,109
disciplines so not not really any

00:03:14,340 --> 00:03:18,510
technical people on the project at all

00:03:16,109 --> 00:03:22,169
things the decisions are being made

00:03:18,510 --> 00:03:24,359
things that can get out of hand you

00:03:22,169 --> 00:03:27,079
should always have a technical input I

00:03:24,359 --> 00:03:29,340
believe at the start of your project

00:03:27,079 --> 00:03:32,819
I've also seen other project we have

00:03:29,340 --> 00:03:36,209
like many junior developers the blend

00:03:32,819 --> 00:03:37,590
isn't quite right and again think things

00:03:36,209 --> 00:03:40,650
don't exactly get off on the right foot

00:03:37,590 --> 00:03:42,660
and you kind of end up with a Barban or

00:03:40,650 --> 00:03:44,699
things that you need to fix while the

00:03:42,660 --> 00:03:47,639
projects in flight which becomes more

00:03:44,699 --> 00:03:49,049
difficult aside from having the right

00:03:47,639 --> 00:03:50,970
people on the bus you also need to make

00:03:49,049 --> 00:03:54,870
sure that everybody has what they need

00:03:50,970 --> 00:03:58,169
to do their job so make sure your

00:03:54,870 --> 00:04:00,299
development team is tooled up make sure

00:03:58,169 --> 00:04:02,190
they are a comfortable environment like

00:04:00,299 --> 00:04:03,659
all these things are fairly obvious

00:04:02,190 --> 00:04:06,870
right these are some of the tools that

00:04:03,659 --> 00:04:09,510
we use it doesn't really matter what you

00:04:06,870 --> 00:04:11,940
use as long as you know what you're

00:04:09,510 --> 00:04:13,409
going to use and as long as you have

00:04:11,940 --> 00:04:15,810
everything you need when you start

00:04:13,409 --> 00:04:18,870
project so yeah we use

00:04:15,810 --> 00:04:21,060
in phpstorm XD bug that was really

00:04:18,870 --> 00:04:24,510
important for your developers get every

00:04:21,060 --> 00:04:28,230
developer get them set up properly with

00:04:24,510 --> 00:04:30,180
a development environment so that they

00:04:28,230 --> 00:04:33,210
have everything they need and everything

00:04:30,180 --> 00:04:37,110
at their disposal to work properly the

00:04:33,210 --> 00:04:40,169
amount of times I've had to help people

00:04:37,110 --> 00:04:43,380
get set up and because if not quite able

00:04:40,169 --> 00:04:44,370
to work as productively could of so make

00:04:43,380 --> 00:04:50,610
sure that's really important make sure

00:04:44,370 --> 00:04:52,020
they have everything so back to the back

00:04:50,610 --> 00:04:55,740
to the I've talked a little bit about

00:04:52,020 --> 00:04:58,139
developers and what you kind of about

00:04:55,740 --> 00:05:03,630
bland people and what they need so let's

00:04:58,139 --> 00:05:10,080
talk a little bit about workflow so the

00:05:03,630 --> 00:05:13,280
first thing is communication it really

00:05:10,080 --> 00:05:16,680
is key it doesn't really you can have

00:05:13,280 --> 00:05:19,350
the best workflow in the world but if

00:05:16,680 --> 00:05:22,680
nobody talks to each other things will

00:05:19,350 --> 00:05:24,780
fall apart so make sure you have you

00:05:22,680 --> 00:05:26,760
decide on your communication channels

00:05:24,780 --> 00:05:30,720
like a are you going to use skype are

00:05:26,760 --> 00:05:32,880
you going to use IRC and you're going to

00:05:30,720 --> 00:05:34,590
have regular daily stand-ups how your

00:05:32,880 --> 00:05:37,050
projects going to work make sure you

00:05:34,590 --> 00:05:38,400
decide on that all up front and you know

00:05:37,050 --> 00:05:40,320
how you're going to communicate with

00:05:38,400 --> 00:05:42,330
your developers and with your client and

00:05:40,320 --> 00:05:43,710
how that how you can bridge the gap

00:05:42,330 --> 00:05:48,930
between your developers on your client

00:05:43,710 --> 00:05:53,039
as well yeah and don't run before you

00:05:48,930 --> 00:05:56,039
can walk don't promise 1 million things

00:05:53,039 --> 00:05:59,160
to your client on day one I don't sell a

00:05:56,039 --> 00:06:01,169
project on the Friday and expect your

00:05:59,160 --> 00:06:08,220
team to be fully up and running on the

00:06:01,169 --> 00:06:12,450
Monday if you can what we try and do is

00:06:08,220 --> 00:06:16,200
as have like bootstrap iterations where

00:06:12,450 --> 00:06:19,320
we go in and tool up and set up and that

00:06:16,200 --> 00:06:21,120
may last for weeks it may last eight

00:06:19,320 --> 00:06:23,610
weeks it depends on the size of the

00:06:21,120 --> 00:06:25,260
project but make sure i would recommend

00:06:23,610 --> 00:06:27,270
you to do this and spend time up front

00:06:25,260 --> 00:06:27,880
with your development team to make sure

00:06:27,270 --> 00:06:30,700
they have

00:06:27,880 --> 00:06:31,990
the processes and tools in place to do

00:06:30,700 --> 00:06:35,710
the job properly because it'll make your

00:06:31,990 --> 00:06:37,060
life a hell of a lot easier if you try

00:06:35,710 --> 00:06:43,750
and do these things mid-flight it's

00:06:37,060 --> 00:06:46,240
painful clarity of purpose if your team

00:06:43,750 --> 00:06:49,120
this is really important you because

00:06:46,240 --> 00:06:52,090
your team without knowing how to do

00:06:49,120 --> 00:06:54,600
anything nothing will start and without

00:06:52,090 --> 00:06:57,370
knowing what's done you'll never finish

00:06:54,600 --> 00:06:59,770
without knowing what's good you'll

00:06:57,370 --> 00:07:03,370
inevitably end up taking shortcuts and

00:06:59,770 --> 00:07:05,440
your approach are just to get the job

00:07:03,370 --> 00:07:08,740
done so the team really needs to know

00:07:05,440 --> 00:07:12,480
how to do things well what it means to

00:07:08,740 --> 00:07:15,280
get things done and what good looks like

00:07:12,480 --> 00:07:16,510
so i guess if you're going to set up a

00:07:15,280 --> 00:07:19,230
developer work for the first thing

00:07:16,510 --> 00:07:21,280
you're going to need is version control

00:07:19,230 --> 00:07:25,570
i'm probably telling you all to like

00:07:21,280 --> 00:07:28,870
suck eggs is great obvious most people

00:07:25,570 --> 00:07:30,490
nowadays use get but you can use svn if

00:07:28,870 --> 00:07:35,590
you want or you can use something else

00:07:30,490 --> 00:07:37,780
but i'd recommend get because pretty

00:07:35,590 --> 00:07:39,160
soon what's going to happen when you

00:07:37,780 --> 00:07:40,420
start building things and especially if

00:07:39,160 --> 00:07:41,920
you're doing things at scale as well

00:07:40,420 --> 00:07:44,230
what what you're going to want to do is

00:07:41,920 --> 00:07:48,100
have lots of things happening in

00:07:44,230 --> 00:07:50,530
parallel for example on the Royal Mail

00:07:48,100 --> 00:07:53,110
project we have a larger development

00:07:50,530 --> 00:07:56,050
team which at the moment is about 20

00:07:53,110 --> 00:07:57,940
developers that's all split up into like

00:07:56,050 --> 00:08:00,010
sub teams within the larger development

00:07:57,940 --> 00:08:04,390
teams that we have about six streams are

00:08:00,010 --> 00:08:06,220
like six sub teams of like maybe 436 it

00:08:04,390 --> 00:08:08,500
depends on what the nature of the work

00:08:06,220 --> 00:08:11,890
is and they're all doing things in

00:08:08,500 --> 00:08:13,690
parallel so one team may be doing

00:08:11,890 --> 00:08:15,310
effects with new features one may be

00:08:13,690 --> 00:08:17,200
doing box fixes one may be doing

00:08:15,310 --> 00:08:19,540
enhancements but that's all happening at

00:08:17,200 --> 00:08:22,090
the same time and that's all coming

00:08:19,540 --> 00:08:23,920
together in the end I'll explain a

00:08:22,090 --> 00:08:26,620
little bit about how that all comes

00:08:23,920 --> 00:08:28,060
together but yeah version control is

00:08:26,620 --> 00:08:30,910
really key so you can you can have

00:08:28,060 --> 00:08:34,719
branches and lots of things happen in

00:08:30,910 --> 00:08:37,099
parallel and for workflow like you don't

00:08:34,719 --> 00:08:39,610
need to reinvent the wheel

00:08:37,099 --> 00:08:44,240
before like you'd get workflow so

00:08:39,610 --> 00:08:47,600
example we use the get floor workflow we

00:08:44,240 --> 00:08:48,829
find it as a good fit for us but check

00:08:47,600 --> 00:08:52,100
out link there's other workflows and

00:08:48,829 --> 00:08:54,769
they're really depends what how you want

00:08:52,100 --> 00:08:56,319
how your project wants to work pick one

00:08:54,769 --> 00:09:00,980
that suits you but I would advise not to

00:08:56,319 --> 00:09:03,019
invent a completely new workflow pick

00:09:00,980 --> 00:09:10,459
one that's already established and

00:09:03,019 --> 00:09:12,139
documented on the web standards this is

00:09:10,459 --> 00:09:14,149
kind of links back to my clarity of

00:09:12,139 --> 00:09:16,250
purpose like your team needs to know how

00:09:14,149 --> 00:09:18,290
to do things and what good looks like so

00:09:16,250 --> 00:09:20,120
we already have these things available

00:09:18,290 --> 00:09:22,250
the drifting triple coding standards

00:09:20,120 --> 00:09:25,699
your team should follow those if there

00:09:22,250 --> 00:09:27,709
are in Drupal modules I mentioned on the

00:09:25,699 --> 00:09:29,329
tools page that we one of the tools we

00:09:27,709 --> 00:09:31,160
had there was phpstorm we like to use

00:09:29,329 --> 00:09:34,699
that a lot if you check out those two

00:09:31,160 --> 00:09:37,790
articles that i'll give you help to get

00:09:34,699 --> 00:09:43,399
your IDE configured properly for the

00:09:37,790 --> 00:09:45,259
triple projects so i'd recommend like I

00:09:43,399 --> 00:09:48,639
love PHP song but I'm not going to get

00:09:45,259 --> 00:09:50,420
into like ID wharves and in this session

00:09:48,639 --> 00:09:52,490
but yeah if you like you should be

00:09:50,420 --> 00:09:53,870
trying to check those out make sure if

00:09:52,490 --> 00:09:55,189
you want to use it get your developer

00:09:53,870 --> 00:09:58,130
set up get them all set up in the same

00:09:55,189 --> 00:09:59,569
way and I'm so it's easy people can help

00:09:58,130 --> 00:10:02,240
each other people can pair program

00:09:59,569 --> 00:10:05,779
together it just makes up those things a

00:10:02,240 --> 00:10:08,630
lot easier and then finally commit

00:10:05,779 --> 00:10:10,550
messages so yeah check that link make

00:10:08,630 --> 00:10:17,029
sure you commit messages basically they

00:10:10,550 --> 00:10:18,319
know don't assume that the reviewer of

00:10:17,029 --> 00:10:21,380
the code knows what the original problem

00:10:18,319 --> 00:10:25,269
was and in your commit message make a

00:10:21,380 --> 00:10:29,959
descriptive about why etc it's actually

00:10:25,269 --> 00:10:34,269
called review so this graph I'll explain

00:10:29,959 --> 00:10:37,220
it a little bit the top the top graph is

00:10:34,269 --> 00:10:40,279
the percentage of cord committed over

00:10:37,220 --> 00:10:42,350
time that has been reviewed and the

00:10:40,279 --> 00:10:45,649
bottom graph is the number of bugs

00:10:42,350 --> 00:10:48,120
raised per week over the same time

00:10:45,649 --> 00:10:51,900
period and this is like a graph

00:10:48,120 --> 00:10:54,000
they're from one of our project as you

00:10:51,900 --> 00:10:58,380
can see as more quarters being reviewed

00:10:54,000 --> 00:11:00,900
we have less box always make sure that

00:10:58,380 --> 00:11:04,529
you do code review it's the same for

00:11:00,900 --> 00:11:06,029
like drupal 8 right any patch can't get

00:11:04,529 --> 00:11:09,089
into Drupal 8 without being reviewed by

00:11:06,029 --> 00:11:10,410
at least two other people so a core

00:11:09,089 --> 00:11:14,240
committer can't commit it until it's

00:11:10,410 --> 00:11:18,330
been our TV seed by at least two others

00:11:14,240 --> 00:11:20,490
for code review we use crucible which is

00:11:18,330 --> 00:11:22,490
a part of that lasting stack but if

00:11:20,490 --> 00:11:24,750
you're using things like github or

00:11:22,490 --> 00:11:27,270
whatever that's got code review tools

00:11:24,750 --> 00:11:30,480
bill n you can use other tools to like

00:11:27,270 --> 00:11:34,890
fabricator which is a Facebook code

00:11:30,480 --> 00:11:44,220
review to pick one fits best for you and

00:11:34,890 --> 00:11:47,370
review cold testing so if you i would

00:11:44,220 --> 00:11:49,410
highly recommend if you can to do either

00:11:47,370 --> 00:11:51,000
test driven development or behavior

00:11:49,410 --> 00:11:53,430
driven development and andrew is going

00:11:51,000 --> 00:11:55,170
to speak slightly later on about

00:11:53,430 --> 00:11:58,200
behavior driven development and the kind

00:11:55,170 --> 00:12:01,470
of things we do capgemini to relate to

00:11:58,200 --> 00:12:03,990
that but it's really important to know

00:12:01,470 --> 00:12:07,170
how you're going to test your cord

00:12:03,990 --> 00:12:09,720
before you even write single line so are

00:12:07,170 --> 00:12:12,089
you going to test it manually are you

00:12:09,720 --> 00:12:15,110
going to write a PHP unit test for that

00:12:12,089 --> 00:12:20,220
are you going to write at the Hat test

00:12:15,110 --> 00:12:22,380
and if you have tests particularly

00:12:20,220 --> 00:12:24,510
phpunit or behat tests you can automate

00:12:22,380 --> 00:12:29,570
all those things so you can have your

00:12:24,510 --> 00:12:33,060
test running on comet on a nightly build

00:12:29,570 --> 00:12:35,880
before a developer pushes to a branch

00:12:33,060 --> 00:12:38,959
etc you can slice and dice however you

00:12:35,880 --> 00:12:46,620
want once you have these things in place

00:12:38,959 --> 00:12:50,260
which leads me on some builds if you can

00:12:46,620 --> 00:12:53,170
you should automate everything then that

00:12:50,260 --> 00:12:55,449
includes automating your environments as

00:12:53,170 --> 00:12:57,339
well so the creation of your test

00:12:55,449 --> 00:13:00,519
environment the creation of your uat

00:12:57,339 --> 00:13:03,040
environment we use so these are some of

00:13:00,519 --> 00:13:05,709
the tools that we use internally yeah

00:13:03,040 --> 00:13:08,110
logo in the top left is puppet so that's

00:13:05,709 --> 00:13:11,889
for environment automation thing we use

00:13:08,110 --> 00:13:13,930
that to build files or build the Drupal

00:13:11,889 --> 00:13:16,660
site files in combination with rush make

00:13:13,930 --> 00:13:18,820
a breeze Capistrano for deployment of

00:13:16,660 --> 00:13:21,639
that to like clustered machine so if you

00:13:18,820 --> 00:13:24,190
have to deploy your web application

00:13:21,639 --> 00:13:26,670
which includes a bunch of files and a

00:13:24,190 --> 00:13:29,370
database to 15 different machines

00:13:26,670 --> 00:13:32,709
Capistrano can handle that quite nicely

00:13:29,370 --> 00:13:37,180
these jenkins for running overnight

00:13:32,709 --> 00:13:39,579
builds of so we refresh our test

00:13:37,180 --> 00:13:42,190
environment daily or we use Jenkins to

00:13:39,579 --> 00:13:44,949
trigger phpunit test things like that

00:13:42,190 --> 00:13:47,410
but I would highly recommend setting up

00:13:44,949 --> 00:13:49,600
a continuous integration environment at

00:13:47,410 --> 00:13:52,089
the start of your project which is

00:13:49,600 --> 00:13:55,750
allows you to feel fast and feel early

00:13:52,089 --> 00:13:57,880
and allows you to catch issues before

00:13:55,750 --> 00:13:59,949
you deploy it to production and it

00:13:57,880 --> 00:14:02,440
allows you to practice your deployments

00:13:59,949 --> 00:14:05,290
of production on a daily basis and you

00:14:02,440 --> 00:14:06,550
should deploy often including to

00:14:05,290 --> 00:14:12,010
production you should deploy often to

00:14:06,550 --> 00:14:13,990
production as often as you can so yeah I

00:14:12,010 --> 00:14:17,199
would highly recommend setting up at the

00:14:13,990 --> 00:14:21,430
start of a project I've seen projects

00:14:17,199 --> 00:14:23,370
were that didn't have a build system or

00:14:21,430 --> 00:14:25,569
a continuous integration system and

00:14:23,370 --> 00:14:26,889
halfway through its had to be

00:14:25,569 --> 00:14:29,920
implemented because there was lots of

00:14:26,889 --> 00:14:36,010
issues lots of products looking into

00:14:29,920 --> 00:14:38,230
production no way to build unknown state

00:14:36,010 --> 00:14:40,720
of the cold and implementing that

00:14:38,230 --> 00:14:43,449
halfway through a project is very

00:14:40,720 --> 00:14:46,529
painful in you will never they end up

00:14:43,449 --> 00:14:49,470
taking shortcuts to get it in there so

00:14:46,529 --> 00:14:52,839
spend the time upfront to set this up

00:14:49,470 --> 00:14:55,120
and I mentioned some tools that we use

00:14:52,839 --> 00:14:57,910
on the previous slide but it doesn't

00:14:55,120 --> 00:14:59,470
really matter what you use you can use

00:14:57,910 --> 00:15:01,560
whatever you want

00:14:59,470 --> 00:15:03,910
as long as it's reliable and repeatable

00:15:01,560 --> 00:15:05,860
it's good so you can have everything in

00:15:03,910 --> 00:15:11,530
shell scripts if you want it's up to you

00:15:05,860 --> 00:15:13,330
i wouldn't recommend that but as long as

00:15:11,530 --> 00:15:14,950
it's reliable and repeatable you're

00:15:13,330 --> 00:15:20,410
doing the same thing all the time then

00:15:14,950 --> 00:15:22,210
and it works it doesn't matter and have

00:15:20,410 --> 00:15:27,490
your developers work smarter not harder

00:15:22,210 --> 00:15:30,570
so although the Royal mail.com is on

00:15:27,490 --> 00:15:33,190
Drupal 6 we still try to use

00:15:30,570 --> 00:15:36,760
object-oriented patterns wherever

00:15:33,190 --> 00:15:38,740
possible we're using some components

00:15:36,760 --> 00:15:41,980
from symphony so we're using the event

00:15:38,740 --> 00:15:47,410
dispatcher and this other thing so we

00:15:41,980 --> 00:15:51,130
were pouring concepts and tools from the

00:15:47,410 --> 00:15:53,530
PHP community that are invented

00:15:51,130 --> 00:15:56,350
elsewhere and finally listened to the de

00:15:53,530 --> 00:15:59,770
risa note or to Alex parts presentation

00:15:56,350 --> 00:16:02,020
yesterday the line was from not invented

00:15:59,770 --> 00:16:04,990
here to proudly found elsewhere so

00:16:02,020 --> 00:16:08,800
always trying to reuse all those code if

00:16:04,990 --> 00:16:11,640
it's stable reliable and tested you

00:16:08,800 --> 00:16:14,200
don't have to be on Drupal 8 to use

00:16:11,640 --> 00:16:15,670
symphony we are we were we're already

00:16:14,200 --> 00:16:17,620
doing on a triple sec project we're

00:16:15,670 --> 00:16:21,700
using ghazal on a Drupal 6 project as

00:16:17,620 --> 00:16:26,320
well it doesn't matter it's just PHP at

00:16:21,700 --> 00:16:28,030
the end of the day and in terms of

00:16:26,320 --> 00:16:30,730
working smarter not harder yet automate

00:16:28,030 --> 00:16:34,170
as much as you can anytime you have a

00:16:30,730 --> 00:16:36,760
manual step in your deployment process

00:16:34,170 --> 00:16:39,460
something will go wrong somebody will

00:16:36,760 --> 00:16:45,190
forget to do that on the on the night of

00:16:39,460 --> 00:16:49,840
the release so yeah and aside from that

00:16:45,190 --> 00:16:53,670
trust your developers let them let them

00:16:49,840 --> 00:16:55,930
experiment on things without the am

00:16:53,670 --> 00:16:59,500
component from sympathy that might help

00:16:55,930 --> 00:17:01,660
your team maybe don't do it like right

00:16:59,500 --> 00:17:04,810
in a live project but let them

00:17:01,660 --> 00:17:07,450
experiment what we do at capgemini is we

00:17:04,810 --> 00:17:09,780
have every second Friday we have a whole

00:17:07,450 --> 00:17:11,959
day our developers can basically do

00:17:09,780 --> 00:17:14,779
whatever they want for that whole

00:17:11,959 --> 00:17:18,949
they can hack on angularjs if they want

00:17:14,779 --> 00:17:21,500
ignored GS it just allows them a bit of

00:17:18,949 --> 00:17:23,480
freedom to experiment and and some of

00:17:21,500 --> 00:17:25,760
the things that we hack on those days

00:17:23,480 --> 00:17:29,149
end up going into life projects so the

00:17:25,760 --> 00:17:34,520
benefit is coming back to your teams all

00:17:29,149 --> 00:17:37,789
the time and lastly don't be afraid to

00:17:34,520 --> 00:17:40,850
fail like failure is inevitable it's

00:17:37,789 --> 00:17:46,070
what you learn and how you improve the

00:17:40,850 --> 00:17:48,020
matters in relation to the

00:17:46,070 --> 00:17:51,350
experimentation it's always good if you

00:17:48,020 --> 00:17:53,179
don't feel in a live project so if you

00:17:51,350 --> 00:17:56,179
can and you want to do experiment

00:17:53,179 --> 00:17:58,250
experiment experimental projects and try

00:17:56,179 --> 00:18:00,580
and do them on the side we have an

00:17:58,250 --> 00:18:02,870
innovation team capgemini that's

00:18:00,580 --> 00:18:05,690
currently working on things like

00:18:02,870 --> 00:18:06,710
angularjs and nod yes and some of the

00:18:05,690 --> 00:18:10,130
work that they've been doing is actually

00:18:06,710 --> 00:18:12,890
going to come in to our project so we're

00:18:10,130 --> 00:18:16,070
now looking at using angularjs on the

00:18:12,890 --> 00:18:17,990
Royal milcom for example as part of the

00:18:16,070 --> 00:18:19,309
new journey things like that so yeah

00:18:17,990 --> 00:18:21,799
don't be afraid to try things don't be

00:18:19,309 --> 00:18:24,830
afraid to fail and we're all here till I

00:18:21,799 --> 00:18:26,330
am as long as you're getting value at

00:18:24,830 --> 00:18:30,940
the end of the day after that Philly

00:18:26,330 --> 00:18:33,320
other than that's good so in summary

00:18:30,940 --> 00:18:35,870
linking back to my clarity of purpose

00:18:33,320 --> 00:18:38,450
your team must know how to do things so

00:18:35,870 --> 00:18:42,080
I went over to get workflow cording

00:18:38,450 --> 00:18:43,429
sounders what tools to use they must

00:18:42,080 --> 00:18:45,230
know the definition of done so that

00:18:43,429 --> 00:18:48,970
means does that mean your cord has been

00:18:45,230 --> 00:18:52,340
reviewed as it's it's got documentation

00:18:48,970 --> 00:18:55,669
it's got unit test applied with it has a

00:18:52,340 --> 00:18:58,909
the Hat test play with it you need to

00:18:55,669 --> 00:19:04,279
define these things of and then finally

00:18:58,909 --> 00:19:06,020
what good looks like so if it developers

00:19:04,279 --> 00:19:08,809
approaching a problem that's already

00:19:06,020 --> 00:19:11,320
been solved then do we know what parm to

00:19:08,809 --> 00:19:16,779
what pattern to apply in that scenario

00:19:11,320 --> 00:19:20,950
and as you called tested built to

00:19:16,779 --> 00:19:20,950
environment automatically unworkable

00:19:23,530 --> 00:19:33,800
so that is me I'm going to pass on to

00:19:29,500 --> 00:19:36,200
who's up next Andrew who's going to talk

00:19:33,800 --> 00:19:37,580
a little bit about the Hat and behavior

00:19:36,200 --> 00:19:41,680
driven development and some of the

00:19:37,580 --> 00:19:41,680
things we do come join me on that

00:20:04,659 --> 00:20:09,659
so I get a slice and technical different

00:20:06,759 --> 00:20:09,659
difficulty here

00:20:41,149 --> 00:20:46,729
okay sorry about that a slight technical

00:20:43,489 --> 00:20:50,200
difficulty and so I'm going to speak to

00:20:46,729 --> 00:20:53,779
you about behavior driven development so

00:20:50,200 --> 00:20:55,129
has anyone heard it BDD or perhaps stuff

00:20:53,779 --> 00:20:57,710
for that year a few hands going up good

00:20:55,129 --> 00:21:00,139
so they'd been a lot of quite a few

00:20:57,710 --> 00:21:02,779
sessions about BDD and stuff from

00:21:00,139 --> 00:21:07,909
various different camps and drupalcon

00:21:02,779 --> 00:21:10,999
today but philosoraptor to ask the

00:21:07,909 --> 00:21:14,119
question there's a lot of the talks sort

00:21:10,999 --> 00:21:18,039
of sent around perhaps which is a PHP

00:21:14,119 --> 00:21:20,929
driver for doing certain elements of PGD

00:21:18,039 --> 00:21:24,109
but the question can be imposed i'm

00:21:20,929 --> 00:21:27,710
using p hat am i doing ddd is quite an

00:21:24,109 --> 00:21:30,080
interesting one so just because using

00:21:27,710 --> 00:21:31,519
behat which is an alteration framework

00:21:30,080 --> 00:21:36,529
doesn't necessarily mean you're doing

00:21:31,519 --> 00:21:39,229
BDD you might just doing behavior we

00:21:36,529 --> 00:21:41,229
have driven testing which means you know

00:21:39,229 --> 00:21:43,759
you might just be using half of the tool

00:21:41,229 --> 00:21:48,409
not necessarily getting the full benefit

00:21:43,759 --> 00:21:49,669
of what you could be doing and behavior

00:21:48,409 --> 00:21:52,039
driven development isn't about tools

00:21:49,669 --> 00:21:56,659
it's not about you know the hat or milk

00:21:52,039 --> 00:21:58,219
or cucumber any of these things so the

00:21:56,659 --> 00:22:01,070
guy who came up with the hat was a

00:21:58,219 --> 00:22:04,309
chapel sorry big BDDs Chappell Dan north

00:22:01,070 --> 00:22:06,589
and a few years ago it came up with this

00:22:04,309 --> 00:22:09,559
definition of being you the second

00:22:06,589 --> 00:22:12,440
generation outside in pull base multiple

00:22:09,559 --> 00:22:15,289
stakeholder multiple scale hi automation

00:22:12,440 --> 00:22:19,099
agile methodology which I'm sure is

00:22:15,289 --> 00:22:23,179
cleared protocol that's usual as usual

00:22:19,099 --> 00:22:25,429
reaction to that and so we can sort of

00:22:23,179 --> 00:22:28,609
take this apart a bit in the next few

00:22:25,429 --> 00:22:32,320
slides but basically it's a process in a

00:22:28,609 --> 00:22:34,669
framework for actually looking at not

00:22:32,320 --> 00:22:36,259
looking at this is the requirements of

00:22:34,669 --> 00:22:39,019
your project in the behavior of your

00:22:36,259 --> 00:22:42,649
project rather than any necessarily any

00:22:39,019 --> 00:22:46,729
way of particularly testing so the

00:22:42,649 --> 00:22:51,240
problem we have is one around language

00:22:46,729 --> 00:22:54,150
and communications you know

00:22:51,240 --> 00:22:56,220
we have generally in terms of web

00:22:54,150 --> 00:22:58,679
development we have complex

00:22:56,220 --> 00:23:01,230
communication problems you know we don't

00:22:58,679 --> 00:23:02,820
really have technical bottoms it's the

00:23:01,230 --> 00:23:04,860
underside say it's just PHP and it's

00:23:02,820 --> 00:23:07,110
just the web is not searching for

00:23:04,860 --> 00:23:09,360
wormholes in distant galaxies it'll all

00:23:07,110 --> 00:23:13,380
searching for cures for cancer it's just

00:23:09,360 --> 00:23:17,179
PHP but the reason why we fail a lot is

00:23:13,380 --> 00:23:19,800
because we don't necessarily communicate

00:23:17,179 --> 00:23:21,240
well or in a standard manner to each

00:23:19,800 --> 00:23:25,200
other and to all the stakeholders in the

00:23:21,240 --> 00:23:26,970
project so we have things like jargons

00:23:25,200 --> 00:23:28,860
of people using terms that aren't

00:23:26,970 --> 00:23:31,350
necessarily well known across them for

00:23:28,860 --> 00:23:34,620
every one language so you might be

00:23:31,350 --> 00:23:36,210
speaking to people whose native language

00:23:34,620 --> 00:23:38,400
is a difference or their communication

00:23:36,210 --> 00:23:40,170
issues they're Chinese whispers where

00:23:38,400 --> 00:23:42,000
you don't get direct communication to

00:23:40,170 --> 00:23:44,370
all stakeholders you get message

00:23:42,000 --> 00:23:47,820
messages passed down the line and things

00:23:44,370 --> 00:23:49,850
get missed out confused and early

00:23:47,820 --> 00:23:52,890
solution izing and imply that I mean

00:23:49,850 --> 00:23:55,950
people clients coming up with ideas

00:23:52,890 --> 00:23:57,809
about what they want how they want or

00:23:55,950 --> 00:23:59,520
ideas about how you solve a problem

00:23:57,809 --> 00:24:03,660
rather than what their requirements are

00:23:59,520 --> 00:24:04,980
and you know unknown unknown so you know

00:24:03,660 --> 00:24:07,350
if you are you think about your last

00:24:04,980 --> 00:24:09,720
projects and guess how long it would

00:24:07,350 --> 00:24:12,120
take you to redo that project it would

00:24:09,720 --> 00:24:13,890
be a lot less time than it took you to

00:24:12,120 --> 00:24:15,360
actually in the project because you

00:24:13,890 --> 00:24:17,610
coming to the end of a project you know

00:24:15,360 --> 00:24:19,530
about all the things you you didn't know

00:24:17,610 --> 00:24:22,350
about at the beginning the project so

00:24:19,530 --> 00:24:23,429
like donald rumsfeld thing so the

00:24:22,350 --> 00:24:26,160
consequences this kind of language

00:24:23,429 --> 00:24:27,720
problem is that we're not Tim often to

00:24:26,160 --> 00:24:30,030
delivering late delayed or the wrong

00:24:27,720 --> 00:24:31,620
products which is even worse before

00:24:30,030 --> 00:24:33,059
we've even committed to writing a line

00:24:31,620 --> 00:24:35,429
of code or written and architecture

00:24:33,059 --> 00:24:37,230
patent or anything like that and that's

00:24:35,429 --> 00:24:40,460
neatly kind of summed up in this slide

00:24:37,230 --> 00:24:45,510
you've probably all seen before which is

00:24:40,460 --> 00:24:47,070
one the classy kind of agile slides so

00:24:45,510 --> 00:24:49,380
this is kind of how the customer

00:24:47,070 --> 00:24:51,390
explained it but this is what they

00:24:49,380 --> 00:24:54,030
actually wanted and these all kind of

00:24:51,390 --> 00:24:56,429
various misinterpretations a long way by

00:24:54,030 --> 00:24:58,860
various different stakeholders in the

00:24:56,429 --> 00:25:00,530
projects and this is like classic and

00:24:58,860 --> 00:25:02,570
and we're still doing this

00:25:00,530 --> 00:25:03,920
everyone's still getting these Kings

00:25:02,570 --> 00:25:06,380
confused and we're testing the wrong

00:25:03,920 --> 00:25:11,570
things delivering the wrong things not

00:25:06,380 --> 00:25:16,850
living up to expectations so you know

00:25:11,570 --> 00:25:19,040
tdd was kind of a precursor or it's a

00:25:16,850 --> 00:25:22,490
different way of approaching development

00:25:19,040 --> 00:25:27,470
it's where you do inside out testing so

00:25:22,490 --> 00:25:30,190
unit test bit small bits of code so it's

00:25:27,470 --> 00:25:32,570
a very kind of granular approach testing

00:25:30,190 --> 00:25:34,160
and it's you know often tap deserves

00:25:32,570 --> 00:25:35,630
because I things doing it is a good

00:25:34,160 --> 00:25:38,440
thing too it doesn't solve our main

00:25:35,630 --> 00:25:40,580
problems of language of communications

00:25:38,440 --> 00:25:42,920
focuses on how it focuses on the

00:25:40,580 --> 00:25:44,060
implementation so presupposes you

00:25:42,920 --> 00:25:47,030
actually know what you want in the first

00:25:44,060 --> 00:25:49,160
place it suffers from a refactoring

00:25:47,030 --> 00:25:50,720
problem where you know whereby you could

00:25:49,160 --> 00:25:52,070
change bits of code would we don't

00:25:50,720 --> 00:25:53,870
listen you want to change the behavior

00:25:52,070 --> 00:25:56,780
of the whole application it can only

00:25:53,870 --> 00:26:00,050
test small discrete parts of the code

00:25:56,780 --> 00:26:03,380
base and also the accessibility problem

00:26:00,050 --> 00:26:05,030
so the only people who can actually read

00:26:03,380 --> 00:26:07,610
and validate these tests are in all

00:26:05,030 --> 00:26:09,470
likelihood mid to senior developers you

00:26:07,610 --> 00:26:11,660
know like quite like the junior

00:26:09,470 --> 00:26:13,880
Bedford's may not have the skills or

00:26:11,660 --> 00:26:17,060
experience yet to to know what good tip

00:26:13,880 --> 00:26:18,890
TDD tests look like certainly your QA

00:26:17,060 --> 00:26:20,780
testing probably calendar clear and prop

00:26:18,890 --> 00:26:22,220
almost at your clients can't validate

00:26:20,780 --> 00:26:26,000
these tests and they're the guys who

00:26:22,220 --> 00:26:29,840
actually paying for your deliverable so

00:26:26,000 --> 00:26:33,620
what is BD d so it's process is a

00:26:29,840 --> 00:26:39,980
technique for looking at requirements

00:26:33,620 --> 00:26:41,990
and it combines TDD which is some out of

00:26:39,980 --> 00:26:46,240
Edwards that which entails you write it

00:26:41,990 --> 00:26:49,790
first it's repeatable and it's automated

00:26:46,240 --> 00:26:51,680
it takes elements of thing called domain

00:26:49,790 --> 00:26:53,720
driven design which is comes out of

00:26:51,680 --> 00:26:55,490
written by a guy called Eric Evan so

00:26:53,720 --> 00:26:56,960
that if you've read if it is certain is

00:26:55,490 --> 00:26:58,430
something that some anyone who's

00:26:56,960 --> 00:27:02,680
building software should at least look

00:26:58,430 --> 00:27:05,630
at and he talks about describing

00:27:02,680 --> 00:27:07,790
describing requirements and solutions in

00:27:05,630 --> 00:27:10,260
terms of the business domain so for

00:27:07,790 --> 00:27:12,730
instance if you were talking about

00:27:10,260 --> 00:27:15,190
let's talk about a conference side right

00:27:12,730 --> 00:27:16,960
you would talk about sessions and

00:27:15,190 --> 00:27:18,100
schedules and visitors and things like

00:27:16,960 --> 00:27:20,980
you wouldn't necessarily talk about

00:27:18,100 --> 00:27:22,960
individual pages or forms because that's

00:27:20,980 --> 00:27:25,000
not what the what the solution is about

00:27:22,960 --> 00:27:28,000
the solution is about delivering access

00:27:25,000 --> 00:27:29,440
to sessions and booking both sessions

00:27:28,000 --> 00:27:31,900
and things like that it's not filling

00:27:29,440 --> 00:27:34,540
out forms so you speak in the language

00:27:31,900 --> 00:27:37,780
that the business domain of the thing

00:27:34,540 --> 00:27:39,160
you're actually delivering and you start

00:27:37,780 --> 00:27:43,090
by looking at business outcomes to come

00:27:39,160 --> 00:27:46,420
up with behavioral stories so rather

00:27:43,090 --> 00:27:49,300
than saying you know you want to drive

00:27:46,420 --> 00:27:50,890
traffic through this certain funnel then

00:27:49,300 --> 00:27:52,000
that's your business outcome and then

00:27:50,890 --> 00:27:54,130
you come up with the acceptance criteria

00:27:52,000 --> 00:27:55,920
to work out what is the best way of

00:27:54,130 --> 00:28:00,370
testing that and understanding and

00:27:55,920 --> 00:28:04,180
showing people how to deliver that and

00:28:00,370 --> 00:28:05,620
it's supported and it uses something we

00:28:04,180 --> 00:28:07,510
use a lot of established tools the

00:28:05,620 --> 00:28:10,690
things like the gherkin is a language

00:28:07,510 --> 00:28:12,730
behat is a testing framework and jeer

00:28:10,690 --> 00:28:14,430
and jenkins or Graham just talked about

00:28:12,730 --> 00:28:18,900
just now so but these are kind of

00:28:14,430 --> 00:28:20,920
established tools that we do use so

00:28:18,900 --> 00:28:23,560
requirements this is quite a nice quote

00:28:20,920 --> 00:28:26,380
on requirements it's apocryphal I think

00:28:23,560 --> 00:28:27,310
but determine if I cast customers what

00:28:26,380 --> 00:28:30,850
they wanted they would have said a

00:28:27,310 --> 00:28:32,530
faster horse they say they you know you

00:28:30,850 --> 00:28:36,070
can you can look at requirements from

00:28:32,530 --> 00:28:40,390
many different perspectives but no one

00:28:36,070 --> 00:28:42,070
person has kind of like their the full

00:28:40,390 --> 00:28:43,210
knowledge of the entire project or the

00:28:42,070 --> 00:28:45,850
full knowledge of the entire domain

00:28:43,210 --> 00:28:47,950
every team members come from a different

00:28:45,850 --> 00:28:49,300
background and got different experiences

00:28:47,950 --> 00:28:51,250
may have different ways of solving the

00:28:49,300 --> 00:28:55,830
same problem and can offer many

00:28:51,250 --> 00:28:58,150
different insights and so as a team

00:28:55,830 --> 00:29:01,930
basically need to get together with the

00:28:58,150 --> 00:29:04,240
business stakeholders and discuss your

00:29:01,930 --> 00:29:08,320
business outcomes and then work out the

00:29:04,240 --> 00:29:10,750
best way of delivering these typically

00:29:08,320 --> 00:29:12,430
we do that within during sprinting

00:29:10,750 --> 00:29:14,230
design clinics or faculty learning

00:29:12,430 --> 00:29:16,180
sessions things like that so you kind of

00:29:14,230 --> 00:29:19,540
find time to fit these very important

00:29:16,180 --> 00:29:21,790
sessions in because it's only by you

00:29:19,540 --> 00:29:22,770
know directly communicating with the

00:29:21,790 --> 00:29:24,510
client

00:29:22,770 --> 00:29:26,070
the delivery team the sprint team that

00:29:24,510 --> 00:29:29,430
you'll actually come anywhere near

00:29:26,070 --> 00:29:34,170
getting this the whole question about

00:29:29,430 --> 00:29:38,010
requirements and things like that fixed

00:29:34,170 --> 00:29:42,210
and you know during these sessions you

00:29:38,010 --> 00:29:44,100
need to make sure that everyone is free

00:29:42,210 --> 00:29:45,840
to ask questions everyone's free to

00:29:44,100 --> 00:29:48,060
question assumptions breaking the model

00:29:45,840 --> 00:29:50,190
and that you go on this kind of path

00:29:48,060 --> 00:29:51,990
around deliberate discovery so you you

00:29:50,190 --> 00:29:53,100
actually set out to discover things you

00:29:51,990 --> 00:29:55,800
kind of admit your ignorance and you

00:29:53,100 --> 00:29:57,930
sort of galletas work out what is the

00:29:55,800 --> 00:30:00,900
best method of achieving these business

00:29:57,930 --> 00:30:02,790
outcomes and what you should get at the

00:30:00,900 --> 00:30:05,340
end of each session is a set of

00:30:02,790 --> 00:30:10,110
acceptance criteria for each of your

00:30:05,340 --> 00:30:13,320
requirements ideally lists on form so

00:30:10,110 --> 00:30:16,860
it's it's in kind of standard kind of

00:30:13,320 --> 00:30:19,350
given when then which basically means is

00:30:16,860 --> 00:30:21,690
it's repeatable it's automate is able to

00:30:19,350 --> 00:30:24,270
be automated and it's also in a language

00:30:21,690 --> 00:30:25,980
because if you're using domain business

00:30:24,270 --> 00:30:28,140
domain language and your testers can

00:30:25,980 --> 00:30:29,340
look at out your validate it your client

00:30:28,140 --> 00:30:30,840
can validate that you're actually doing

00:30:29,340 --> 00:30:33,060
the right thing because they can read

00:30:30,840 --> 00:30:35,820
the test here they're not to know

00:30:33,060 --> 00:30:40,260
reading some PHP code is marked PHP code

00:30:35,820 --> 00:30:42,450
they wouldn't know how to interpret so

00:30:40,260 --> 00:30:44,160
this is something that we've come up

00:30:42,450 --> 00:30:46,830
with is an acceptance criteria for

00:30:44,160 --> 00:30:48,690
acceptance criteria so we try to ensure

00:30:46,830 --> 00:30:52,560
that all where I acceptance criteria for

00:30:48,690 --> 00:30:54,420
any particular piece of work is complete

00:30:52,560 --> 00:30:55,830
so it's fully describes everything so

00:30:54,420 --> 00:30:57,540
there's no scope for the client to come

00:30:55,830 --> 00:30:59,730
back to say actually I meant to do this

00:30:57,540 --> 00:31:01,170
or I've forgotten about that so

00:30:59,730 --> 00:31:04,470
everyone's fully aware of the entire

00:31:01,170 --> 00:31:06,330
scope of the requirement but it's clear

00:31:04,470 --> 00:31:08,400
though all team members have got a clear

00:31:06,330 --> 00:31:09,900
understanding so there's any jargon in

00:31:08,400 --> 00:31:11,490
there is you know jarvan's you know

00:31:09,900 --> 00:31:13,590
you're not going to get rid of it but at

00:31:11,490 --> 00:31:16,110
all everyone understands what is meant

00:31:13,590 --> 00:31:18,180
by each term the next time and it's

00:31:16,110 --> 00:31:21,240
testable so you have specific events

00:31:18,180 --> 00:31:23,460
that are you know repeatable so you push

00:31:21,240 --> 00:31:25,710
something to the system I get a fixed

00:31:23,460 --> 00:31:27,180
set of things out so one of the things

00:31:25,710 --> 00:31:28,150
we do a lot of these systems integration

00:31:27,180 --> 00:31:30,250
so we

00:31:28,150 --> 00:31:32,070
internet third-party systems you have to

00:31:30,250 --> 00:31:36,520
work with a lot of things like fixtures

00:31:32,070 --> 00:31:39,580
so basically you build a set of you can

00:31:36,520 --> 00:31:42,400
use a set of mock objects and things

00:31:39,580 --> 00:31:44,530
like that kind of more casual services

00:31:42,400 --> 00:31:46,720
so you're actually calling the backend

00:31:44,530 --> 00:31:48,550
services directly because you may get

00:31:46,720 --> 00:31:50,410
sort of the real results out you just

00:31:48,550 --> 00:31:51,550
want something you can test against you

00:31:50,410 --> 00:31:59,110
want something you could that is

00:31:51,550 --> 00:32:01,510
predictable repeatable so this is this

00:31:59,110 --> 00:32:05,710
is kind of a very very simple but it's

00:32:01,510 --> 00:32:07,480
kind of instructive about how we might

00:32:05,710 --> 00:32:12,100
go about in the theater and acceptance

00:32:07,480 --> 00:32:16,960
criteria for cap geminis sponsorship of

00:32:12,100 --> 00:32:18,280
Drupal comprar so so this is this is our

00:32:16,960 --> 00:32:21,150
featured you might recognize this from a

00:32:18,280 --> 00:32:23,770
like a scrum and agile user story

00:32:21,150 --> 00:32:25,240
although this is in terms of actually

00:32:23,770 --> 00:32:28,420
testing that this is just here is fun

00:32:25,240 --> 00:32:30,490
annotation but you see as the marketing

00:32:28,420 --> 00:32:32,200
director on CCAP Geminoid logo on the

00:32:30,490 --> 00:32:33,910
homepage and sponsors page that site

00:32:32,200 --> 00:32:35,590
visitors the CCAP generalized commitment

00:32:33,910 --> 00:32:37,510
to the Drupal community it's all very

00:32:35,590 --> 00:32:39,310
good interesting here is we're looking

00:32:37,510 --> 00:32:41,230
at it from as the marketing directors

00:32:39,310 --> 00:32:42,970
and not not as a user because quite

00:32:41,230 --> 00:32:45,580
often you know everyone writes his user

00:32:42,970 --> 00:32:47,380
stories as a user but the user is

00:32:45,580 --> 00:32:49,180
normally or quite often it's not the

00:32:47,380 --> 00:32:51,190
most often you know the regular

00:32:49,180 --> 00:32:53,860
stakeholder it could be marketing

00:32:51,190 --> 00:32:56,440
director these are stakeholder in in in

00:32:53,860 --> 00:32:59,950
the in the delivered all he wants to see

00:32:56,440 --> 00:33:02,170
there the logo on the on various

00:32:59,950 --> 00:33:04,420
different pages so this is our actual

00:33:02,170 --> 00:33:07,900
acceptance criteria and it's just a

00:33:04,420 --> 00:33:10,030
small demonstrating one so give an arm

00:33:07,900 --> 00:33:12,100
on the homepage then actually should see

00:33:10,030 --> 00:33:13,900
the capgemini that ago when I follow

00:33:12,100 --> 00:33:16,150
sponsors and that's just a link on the

00:33:13,900 --> 00:33:20,170
site then I should see the capgemini

00:33:16,150 --> 00:33:22,660
logo now that's a test and actually run

00:33:20,170 --> 00:33:24,790
through P hat and that's which means it

00:33:22,660 --> 00:33:26,620
will be automated we've run through

00:33:24,790 --> 00:33:28,870
firefox so we can do regression testing

00:33:26,620 --> 00:33:31,150
on it we know when we're done because

00:33:28,870 --> 00:33:33,070
when this test passes then we're done

00:33:31,150 --> 00:33:36,550
and complete but also see there's

00:33:33,070 --> 00:33:38,190
nothing about divs or forms or buttons

00:33:36,550 --> 00:33:41,220
or CSS selector

00:33:38,190 --> 00:33:43,529
that is written in the domain of the the

00:33:41,220 --> 00:33:45,320
problem you know problem areas makes

00:33:43,529 --> 00:33:48,299
your capture my logo appears everywhere

00:33:45,320 --> 00:33:51,000
so its specification it also acts as

00:33:48,299 --> 00:33:53,279
documentation so you can you've got this

00:33:51,000 --> 00:33:56,909
kind of built in organic evolving

00:33:53,279 --> 00:34:04,169
documentation as well so it acts as that

00:33:56,909 --> 00:34:10,230
as also as a regression test so I'm now

00:34:04,169 --> 00:34:11,940
going to very quickly switch to a demo

00:34:10,230 --> 00:34:17,190
and hopefully if the Wi-Fi hole is

00:34:11,940 --> 00:34:20,010
holding up so just to prove this isn't

00:34:17,190 --> 00:34:22,109
magic this is actually the feature we

00:34:20,010 --> 00:34:30,480
running that's just look you can't see

00:34:22,109 --> 00:34:34,560
anything yeah so that is the feature

00:34:30,480 --> 00:34:36,829
we're running and hopefully if this

00:34:34,560 --> 00:34:36,829
works

00:34:39,820 --> 00:34:48,860
you should fire up Firefox and you'll

00:34:44,300 --> 00:34:50,149
just go to the homepage going to go to

00:34:48,860 --> 00:34:54,320
the sponsors page and its failure

00:34:50,149 --> 00:34:56,960
typically now we do a live demo ok but

00:34:54,320 --> 00:34:59,480
so the first one part right so get on a

00:34:56,960 --> 00:35:01,490
page and I see of Captain my logo so

00:34:59,480 --> 00:35:02,810
that's a great regression test because

00:35:01,490 --> 00:35:05,210
obviously somewhere something has failed

00:35:02,810 --> 00:35:14,150
and we've got red so we can then go back

00:35:05,210 --> 00:35:15,920
and fix that in our next sprint so but

00:35:14,150 --> 00:35:18,590
that's just things also that can that

00:35:15,920 --> 00:35:21,110
show you that you know the game open the

00:35:18,590 --> 00:35:23,150
the test can be run in automated fashion

00:35:21,110 --> 00:35:25,960
but it's also written in a very clear

00:35:23,150 --> 00:35:25,960
and plain language

00:35:28,750 --> 00:35:34,630
so in summary BDDs isn't about the tools

00:35:32,410 --> 00:35:38,970
it's about communication and solving the

00:35:34,630 --> 00:35:42,400
communication issues is it's a framework

00:35:38,970 --> 00:35:44,440
about Ana process but it's not about

00:35:42,400 --> 00:35:49,450
testing it's also about main parties

00:35:44,440 --> 00:35:53,530
about requirements and discovery of the

00:35:49,450 --> 00:35:55,990
problem domain got some resources here

00:35:53,530 --> 00:35:59,710
so some readings are these are just some

00:35:55,990 --> 00:36:00,850
blog posts these are kind of interesting

00:35:59,710 --> 00:36:02,590
people to follow if you're interested in

00:36:00,850 --> 00:36:06,300
this sort of things and north than this

00:36:02,590 --> 00:36:08,380
key owen eric evans these are some

00:36:06,300 --> 00:36:11,200
things that are interesting that we had

00:36:08,380 --> 00:36:14,590
is the testing framework there's a

00:36:11,200 --> 00:36:18,070
drupal extension which was which is

00:36:14,590 --> 00:36:20,800
Mabel's you to do kind of testing on

00:36:18,070 --> 00:36:22,120
Drupal site so it contains vocabularies

00:36:20,800 --> 00:36:23,920
and grammars for doing testing like them

00:36:22,120 --> 00:36:24,940
testing for anonymous users testing

00:36:23,920 --> 00:36:29,140
whether your love doing that sort of

00:36:24,940 --> 00:36:32,400
thing and do be is a project for do BTW

00:36:29,140 --> 00:36:35,650
name do be is a project for testing

00:36:32,400 --> 00:36:39,280
drupal.org so do dog does some form of

00:36:35,650 --> 00:36:40,840
BDD testing so and there's a quick

00:36:39,280 --> 00:36:42,850
staffer that I've put together for

00:36:40,840 --> 00:36:46,030
setting up BDD tools and all the

00:36:42,850 --> 00:36:48,610
framework that you need for that so

00:36:46,030 --> 00:36:50,530
that's some BD dinner in a 50-minute

00:36:48,610 --> 00:36:52,180
nutshell i'm going to hand over my

00:36:50,530 --> 00:36:59,950
colleague ground lose control plant

00:36:52,180 --> 00:37:03,580
vibration I think you've got a missed

00:36:59,950 --> 00:37:05,950
call on their own directions so my name

00:37:03,580 --> 00:37:11,740
is Elliot Ward's I'm a project lead at

00:37:05,950 --> 00:37:12,760
capgemini and migration is a hot topic

00:37:11,740 --> 00:37:15,570
when you're dealing with large

00:37:12,760 --> 00:37:19,350
enterprise sites for a number of reasons

00:37:15,570 --> 00:37:21,730
you are not going to be doing an

00:37:19,350 --> 00:37:23,200
enterprise clients very first web site

00:37:21,730 --> 00:37:24,520
so it's very likely they've got content

00:37:23,200 --> 00:37:27,610
from an existing site they'll want to

00:37:24,520 --> 00:37:29,080
start pulling in it's also as any of

00:37:27,610 --> 00:37:30,340
you've been involved with Drupal

00:37:29,080 --> 00:37:31,990
upgrades know that they can be very

00:37:30,340 --> 00:37:34,300
problematic and an alternative strategy

00:37:31,990 --> 00:37:36,040
rather than using the Drupal upgrade

00:37:34,300 --> 00:37:40,570
path is actually to build a new site and

00:37:36,040 --> 00:37:42,070
migrate your content into it so the best

00:37:40,570 --> 00:37:45,180
way to actually perform

00:37:42,070 --> 00:37:48,160
my great is by using the migrate module

00:37:45,180 --> 00:37:50,500
there are many other ways you can try

00:37:48,160 --> 00:37:52,660
and do using feeds module for instance

00:37:50,500 --> 00:37:55,000
as an alternative approach but I

00:37:52,660 --> 00:37:56,590
realized that I definitely had geek

00:37:55,000 --> 00:37:59,470
credentials when I realized I had a

00:37:56,590 --> 00:38:02,440
favorite drupal module and it is my

00:37:59,470 --> 00:38:05,140
great it's been around for a while it's

00:38:02,440 --> 00:38:07,120
been really textured at least once and

00:38:05,140 --> 00:38:08,440
and it's currently got a major

00:38:07,120 --> 00:38:09,760
architects of going on it's currently

00:38:08,440 --> 00:38:11,940
release candidate so some of the things

00:38:09,760 --> 00:38:17,230
that I'm going to talk about will

00:38:11,940 --> 00:38:21,970
probably change so what is it in a

00:38:17,230 --> 00:38:24,940
picture my great is a module that can

00:38:21,970 --> 00:38:30,520
take data from any of these different

00:38:24,940 --> 00:38:34,480
sources Pulido and then create familiar

00:38:30,520 --> 00:38:37,420
drupal entities such as nodes terms menu

00:38:34,480 --> 00:38:40,180
items comments and users and it's

00:38:37,420 --> 00:38:43,690
designed to be completely extendable so

00:38:40,180 --> 00:38:45,130
that you can have your extension if you

00:38:43,690 --> 00:38:47,260
define a data source that isn't

00:38:45,130 --> 00:38:49,450
supported by anybody and as those out

00:38:47,260 --> 00:38:52,540
there in contrib as well as that come

00:38:49,450 --> 00:38:55,630
with the migrated module you can extend

00:38:52,540 --> 00:38:57,070
it to deal with the content types so for

00:38:55,630 --> 00:38:59,620
the data sources that you need and

00:38:57,070 --> 00:39:03,150
similarly if you can't find a handler at

00:38:59,620 --> 00:39:06,220
the end to create your Drupal elements

00:39:03,150 --> 00:39:07,570
you can create your own here as well so

00:39:06,220 --> 00:39:08,800
an example of that we found there wasn't

00:39:07,570 --> 00:39:12,640
a particularly good one for migrating

00:39:08,800 --> 00:39:17,260
mini panels into site so we created our

00:39:12,640 --> 00:39:19,000
own there so just blowing up that little

00:39:17,260 --> 00:39:21,250
circle that we just have them migrate as

00:39:19,000 --> 00:39:24,330
the as the piece in the middle of that

00:39:21,250 --> 00:39:27,640
puzzle there's a few pieces to it

00:39:24,330 --> 00:39:29,770
there's the migrate module itself that

00:39:27,640 --> 00:39:31,630
comes with a migrate yui in the same way

00:39:29,770 --> 00:39:35,290
that views has abused yuri so you have a

00:39:31,630 --> 00:39:37,000
separate module handling the code for

00:39:35,290 --> 00:39:40,000
user interface that you can disable when

00:39:37,000 --> 00:39:42,610
you're actually on production there's

00:39:40,000 --> 00:39:46,210
another module called my great extras

00:39:42,610 --> 00:39:47,770
and that's becoming deprecated what that

00:39:46,210 --> 00:39:49,270
was that was a kind of collection for

00:39:47,770 --> 00:39:54,740
all kind of extra pieces of content

00:39:49,270 --> 00:39:56,670
around new data sources and new

00:39:54,740 --> 00:40:00,060
destinations different types of data

00:39:56,670 --> 00:40:01,589
within your drupal site but that's no

00:40:00,060 --> 00:40:03,540
longer having anything added to it the

00:40:01,589 --> 00:40:04,740
ideas if you create a new content type

00:40:03,540 --> 00:40:06,599
or something you distribute it in a

00:40:04,740 --> 00:40:08,220
feature if you want to put your my great

00:40:06,599 --> 00:40:12,089
support into your own module that you're

00:40:08,220 --> 00:40:14,460
distributing that got a few more extra

00:40:12,089 --> 00:40:18,869
requirements on d6 and i'm still using

00:40:14,460 --> 00:40:19,890
d6 lots of d6 still out there was

00:40:18,869 --> 00:40:21,390
wondering whether i should pull that out

00:40:19,890 --> 00:40:24,480
but i think there's enough d6 still

00:40:21,390 --> 00:40:28,470
going so it uses the auto load that is

00:40:24,480 --> 00:40:30,690
just included in d7 it uses DB TNG

00:40:28,470 --> 00:40:32,569
database of next generation so actually

00:40:30,690 --> 00:40:34,680
when you're writing your database code

00:40:32,569 --> 00:40:37,260
you write it in the same way that you

00:40:34,680 --> 00:40:39,119
would do for drupal 7 one of the major

00:40:37,260 --> 00:40:42,119
reasons for using DB TNG in all places

00:40:39,119 --> 00:40:44,819
is a it keeps the d6 and d7 versions of

00:40:42,119 --> 00:40:46,950
the module as close as they can be from

00:40:44,819 --> 00:40:48,210
a code point of view or so DV TNG is

00:40:46,950 --> 00:40:50,430
much better at handling multiple

00:40:48,210 --> 00:40:51,900
databases which is exactly what you

00:40:50,430 --> 00:40:55,290
might be doing if you're a migrating

00:40:51,900 --> 00:40:58,380
data from one place to the other it's

00:40:55,290 --> 00:41:00,690
also got an elements in d6 as well just

00:40:58,380 --> 00:41:03,990
for some of the UV stuff that's in seven

00:41:00,690 --> 00:41:05,819
but not in six and unfortunately because

00:41:03,990 --> 00:41:07,230
this is the business truck one of the

00:41:05,819 --> 00:41:08,880
final piece that you're going to need to

00:41:07,230 --> 00:41:11,640
actually do anything with my great is

00:41:08,880 --> 00:41:13,680
implement your own migration module that

00:41:11,640 --> 00:41:14,880
will have a dependency on my great this

00:41:13,680 --> 00:41:18,800
is one of the really interesting things

00:41:14,880 --> 00:41:21,810
that is possibly changing in the latest

00:41:18,800 --> 00:41:24,000
726 release candidate because that's

00:41:21,810 --> 00:41:25,920
going to have a wizard that you're going

00:41:24,000 --> 00:41:33,180
to be able to use to create your

00:41:25,920 --> 00:41:34,980
migration structures life either fun so

00:41:33,180 --> 00:41:36,329
it'd be interesting to see how far you

00:41:34,980 --> 00:41:38,910
can get with that whether you can

00:41:36,329 --> 00:41:40,079
implement everything or whether you're

00:41:38,910 --> 00:41:42,030
still going to need to get your hands

00:41:40,079 --> 00:41:43,650
dirty with code for some of the finer

00:41:42,030 --> 00:41:50,069
details when you're mapping your data

00:41:43,650 --> 00:41:52,050
from one place to the other so what you

00:41:50,069 --> 00:41:53,700
need to do in that module what's the

00:41:52,050 --> 00:41:57,030
actual work that you're going to have to

00:41:53,700 --> 00:42:00,750
do when you are migrating your content

00:41:57,030 --> 00:42:03,599
from one place to the other bulk of the

00:42:00,750 --> 00:42:05,800
work comes by creating subclasses of

00:42:03,599 --> 00:42:07,870
some of the classes that you will get

00:42:05,800 --> 00:42:11,170
my great for free so the class hierarchy

00:42:07,870 --> 00:42:13,060
for my great has this migration class

00:42:11,170 --> 00:42:16,240
and you're going to want to subclass

00:42:13,060 --> 00:42:18,280
that for each type of type of thing that

00:42:16,240 --> 00:42:20,440
you're going to migrate so if you've got

00:42:18,280 --> 00:42:23,440
multiple know types in your destination

00:42:20,440 --> 00:42:26,590
system you are going to have to subclass

00:42:23,440 --> 00:42:27,700
the migrate node one for each you have

00:42:26,590 --> 00:42:30,490
to create a class if you're migrating

00:42:27,700 --> 00:42:34,810
users by surpassing my great you shoot

00:42:30,490 --> 00:42:36,280
migration users class and also migration

00:42:34,810 --> 00:42:38,380
terms and there's other things that you

00:42:36,280 --> 00:42:40,720
can migrate in these suggest to some

00:42:38,380 --> 00:42:45,630
examples that I pulled off previous

00:42:40,720 --> 00:42:48,730
demonstration for each of those classes

00:42:45,630 --> 00:42:51,220
you need to put them in a migration

00:42:48,730 --> 00:42:53,980
group migration group doesn't actually

00:42:51,220 --> 00:42:56,110
have any impact on the data once it's in

00:42:53,980 --> 00:42:58,870
the destination system it's more for

00:42:56,110 --> 00:43:00,540
control and reporting purposes so you

00:42:58,870 --> 00:43:02,920
can decide you want to migrate all

00:43:00,540 --> 00:43:05,080
migration classes in a certain group at

00:43:02,920 --> 00:43:08,230
a time or just pull up a report on how

00:43:05,080 --> 00:43:12,310
many have been migrated for a certain

00:43:08,230 --> 00:43:14,050
group you need to create a my great

00:43:12,310 --> 00:43:16,120
source instance so you don't need to

00:43:14,050 --> 00:43:18,790
subclass this if this is one of the

00:43:16,120 --> 00:43:22,450
already supported data sources that we

00:43:18,790 --> 00:43:25,840
saw a few slides ago so fits for any of

00:43:22,450 --> 00:43:29,080
these you don't need to actually create

00:43:25,840 --> 00:43:30,610
that surplus there will be one available

00:43:29,080 --> 00:43:32,830
for you to use and it's how you actually

00:43:30,610 --> 00:43:35,200
instantiate that subclass will give you

00:43:32,830 --> 00:43:39,040
your specific details on what data you

00:43:35,200 --> 00:43:40,540
want from that data source because we've

00:43:39,040 --> 00:43:42,940
got a my sequel one we can just hang

00:43:40,540 --> 00:43:46,030
WordPress PHP v and drupal to drupal

00:43:42,940 --> 00:43:47,920
site migrations through that one there

00:43:46,030 --> 00:43:49,900
is a dedicated one for wordpress now and

00:43:47,920 --> 00:43:54,190
as a separate project with drupal to

00:43:49,900 --> 00:43:56,410
drupal migrate but you may as well just

00:43:54,190 --> 00:44:01,720
use the in my experience use the M my

00:43:56,410 --> 00:44:04,060
sequel source for that you also need to

00:44:01,720 --> 00:44:08,620
create a migration my great destination

00:44:04,060 --> 00:44:10,480
and that maps to these items here so

00:44:08,620 --> 00:44:12,370
again we implemented a new migration

00:44:10,480 --> 00:44:13,990
destination for the mini panels when we

00:44:12,370 --> 00:44:15,060
found that there was something that

00:44:13,990 --> 00:44:22,800
wasn't too

00:44:15,060 --> 00:44:25,290
the handled in the ecosystem trade for

00:44:22,800 --> 00:44:27,270
your mappings so you say where your data

00:44:25,290 --> 00:44:30,330
is coming from in the source and then

00:44:27,270 --> 00:44:35,100
which fields on your destination objects

00:44:30,330 --> 00:44:37,080
that's going to correlate to and list

00:44:35,100 --> 00:44:39,210
anything that you are selecting a data

00:44:37,080 --> 00:44:40,980
that is explicitly unmet or anything

00:44:39,210 --> 00:44:43,140
that could be put into your destination

00:44:40,980 --> 00:44:45,210
system where you're not actually going

00:44:43,140 --> 00:44:46,980
to map it that doesn't have any

00:44:45,210 --> 00:44:48,480
practical effect but it does help you

00:44:46,980 --> 00:44:54,210
with some of the audit tools that

00:44:48,480 --> 00:44:58,680
migrate will provide you also need to

00:44:54,210 --> 00:45:00,870
define how your data is mapped between

00:44:58,680 --> 00:45:03,000
the two systems so you need to tell my

00:45:00,870 --> 00:45:04,650
great module how a particular data

00:45:03,000 --> 00:45:07,110
element you're going to select from your

00:45:04,650 --> 00:45:10,200
source information is going to end up in

00:45:07,110 --> 00:45:12,090
your destination data because all we're

00:45:10,200 --> 00:45:13,800
doing is pulling this across so it will

00:45:12,090 --> 00:45:16,020
build a database table and you need to

00:45:13,800 --> 00:45:19,410
tell it how to construct these source

00:45:16,020 --> 00:45:21,200
IDs and a destination IDs so typically

00:45:19,410 --> 00:45:24,420
the destination ID will just be a node

00:45:21,200 --> 00:45:26,370
source ID will completely depend on what

00:45:24,420 --> 00:45:28,950
the system is that you're migrating from

00:45:26,370 --> 00:45:30,660
ok because we've got this map that means

00:45:28,950 --> 00:45:32,520
that we can actually run migrate

00:45:30,660 --> 00:45:34,620
multiple times without migrating the

00:45:32,520 --> 00:45:36,510
same content unless it's changed it

00:45:34,620 --> 00:45:38,430
means that we can accurately map how far

00:45:36,510 --> 00:45:47,430
am I great we are we can batch it

00:45:38,430 --> 00:45:49,320
effectively as well yes we will come to

00:45:47,430 --> 00:45:53,850
that and it's interesting and that

00:45:49,320 --> 00:45:54,960
question comes up every time I I have a

00:45:53,850 --> 00:45:56,250
longer version of this talk where we

00:45:54,960 --> 00:45:57,870
actually go into a lot more detail and

00:45:56,250 --> 00:45:59,430
we're kind of flying through at the

00:45:57,870 --> 00:46:01,470
moment but there's a talk online that'll

00:45:59,430 --> 00:46:05,340
be in the references we're actually does

00:46:01,470 --> 00:46:07,110
demos and code samples of an example

00:46:05,340 --> 00:46:09,810
migrate that's kind of designed to be a

00:46:07,110 --> 00:46:11,340
really good job jumping end point for

00:46:09,810 --> 00:46:16,020
people who need to get up and running

00:46:11,340 --> 00:46:17,790
with my break so once you've defined all

00:46:16,020 --> 00:46:19,260
those things you can actually the my

00:46:17,790 --> 00:46:20,340
great tool one of the reasons why it's

00:46:19,260 --> 00:46:22,560
great as it gives you really good

00:46:20,340 --> 00:46:24,120
auditing tools so this is going through

00:46:22,560 --> 00:46:26,250
the ue but there's equivalent brush

00:46:24,120 --> 00:46:28,110
functionality as well and this is just

00:46:26,250 --> 00:46:28,950
telling us for some migration classes

00:46:28,110 --> 00:46:32,789
that we've

00:46:28,950 --> 00:46:36,520
implemented or we've subclassed how many

00:46:32,789 --> 00:46:38,920
rows we have to migrate in the Destin in

00:46:36,520 --> 00:46:41,980
the source system how many we've

00:46:38,920 --> 00:46:43,960
imported so far how many unimportant and

00:46:41,980 --> 00:46:45,849
so on you can also get any messages if

00:46:43,960 --> 00:46:48,010
we have any failures or anything

00:46:45,849 --> 00:46:51,309
interesting and that's happened once we

00:46:48,010 --> 00:46:53,049
try to update their so that gives you an

00:46:51,309 --> 00:46:57,369
overview for all the things that you're

00:46:53,049 --> 00:47:01,809
going to migrate you also have auditing

00:46:57,369 --> 00:47:03,069
on the level of detail here so here I

00:47:01,809 --> 00:47:04,539
know these are particularly readable

00:47:03,069 --> 00:47:06,270
apologies for that but what this is is a

00:47:04,539 --> 00:47:09,280
list of field so we've got in our

00:47:06,270 --> 00:47:11,039
destination no type that and it's

00:47:09,280 --> 00:47:13,420
showing us either we have mapped them

00:47:11,039 --> 00:47:16,869
these ones that already knows where it's

00:47:13,420 --> 00:47:19,720
going to come from and down here are the

00:47:16,869 --> 00:47:21,309
ones we haven't yet mapped so migrate is

00:47:19,720 --> 00:47:23,770
flagging that you could have some data

00:47:21,309 --> 00:47:27,520
here and it's in your data types why

00:47:23,770 --> 00:47:29,230
haven't we got it in your migration so I

00:47:27,520 --> 00:47:31,390
hope you need to audit how far through

00:47:29,230 --> 00:47:33,369
your implementation of those migrate

00:47:31,390 --> 00:47:34,599
classes you are if there's anything that

00:47:33,369 --> 00:47:36,940
you actually don't want to migrate

00:47:34,599 --> 00:47:39,309
across you can flag it in your migration

00:47:36,940 --> 00:47:41,200
classes do not migrate and then it will

00:47:39,309 --> 00:47:42,789
no longer show up in red and you can

00:47:41,200 --> 00:47:44,770
list it under one of these vertical taps

00:47:42,789 --> 00:47:48,960
you can see let my great know that you

00:47:44,770 --> 00:47:52,210
are deliberately not importing that data

00:47:48,960 --> 00:47:54,119
so that's a very whistle stop tour of

00:47:52,210 --> 00:47:56,920
how you would implement a migration

00:47:54,119 --> 00:47:58,299
using the my grade class and I had to

00:47:56,920 --> 00:48:00,670
give you that so i can highlight some of

00:47:58,299 --> 00:48:05,170
the difficulties as that you might

00:48:00,670 --> 00:48:08,740
encounter along the way so i put non

00:48:05,170 --> 00:48:12,150
good references or unit but unique ids

00:48:08,740 --> 00:48:13,960
as raised and are an interesting point

00:48:12,150 --> 00:48:18,640
migration order can have an issue

00:48:13,960 --> 00:48:21,549
circular references stubbing many-to-one

00:48:18,640 --> 00:48:23,200
mappings and developing alongside moving

00:48:21,549 --> 00:48:24,700
targets will go through these and look

00:48:23,200 --> 00:48:29,079
at how you might have a strategy for

00:48:24,700 --> 00:48:30,910
these so if I've got a kind of

00:48:29,079 --> 00:48:33,670
relationship between my data here so

00:48:30,910 --> 00:48:37,329
this is an example from a from a demo

00:48:33,670 --> 00:48:41,230
where a monkey has an ID mapping to its

00:48:37,329 --> 00:48:45,319
favorite tree in your sources

00:48:41,230 --> 00:48:48,049
when you actually map those across the

00:48:45,319 --> 00:48:50,150
ideas that Drupal will allocate the noo

00:48:48,049 --> 00:48:52,369
tidies won't actually be the same and

00:48:50,150 --> 00:48:55,880
I'll be pointing in all the kind of

00:48:52,369 --> 00:48:58,069
wrong wrong elements may be pointing it

00:48:55,880 --> 00:49:02,539
nothing or may point it a completely

00:48:58,069 --> 00:49:05,630
different note I'd so the way we would

00:49:02,539 --> 00:49:07,430
deal with that in in this kind of simple

00:49:05,630 --> 00:49:09,680
case with my great is you actually just

00:49:07,430 --> 00:49:13,099
have to let my great know that these are

00:49:09,680 --> 00:49:16,039
dependent and then when you've run you

00:49:13,099 --> 00:49:18,529
on my great always run the referenced

00:49:16,039 --> 00:49:21,589
class my great first so here if we bring

00:49:18,529 --> 00:49:24,109
in all the trees first and then migrate

00:49:21,589 --> 00:49:25,880
the monkeys then there will be no

00:49:24,109 --> 00:49:28,009
problems and it will remember that it

00:49:25,880 --> 00:49:31,249
has to work out the new mapping for each

00:49:28,009 --> 00:49:36,249
one by reference to the map that we set

00:49:31,249 --> 00:49:36,249
up when we were defining our classes

00:49:36,849 --> 00:49:43,039
circular references a bit more difficult

00:49:39,769 --> 00:49:45,170
to deal with obviously here we've got a

00:49:43,039 --> 00:49:51,019
monkey that has a relationship with

00:49:45,170 --> 00:49:52,670
another monkey so we can't migrate all

00:49:51,019 --> 00:49:54,019
of these before we migrate all of these

00:49:52,670 --> 00:49:55,190
because they may point back at

00:49:54,019 --> 00:49:58,609
themselves they're the same class

00:49:55,190 --> 00:50:00,499
doesn't make any sense so you will have

00:49:58,609 --> 00:50:03,470
some work to do here but my great helps

00:50:00,499 --> 00:50:07,539
you out by having a mechanism by which

00:50:03,470 --> 00:50:12,410
you can define a stub when my great

00:50:07,539 --> 00:50:15,619
comes to migrate one of these data

00:50:12,410 --> 00:50:18,319
elements it will have a look and see if

00:50:15,619 --> 00:50:20,930
the referenced element has been created

00:50:18,319 --> 00:50:23,720
yet if it has there's no problems and it

00:50:20,930 --> 00:50:24,829
just uses the new reference if it hasn't

00:50:23,720 --> 00:50:27,109
what it will do is it will actually

00:50:24,829 --> 00:50:30,859
create you a blank node in this instance

00:50:27,109 --> 00:50:35,599
and it will just remember the mapping

00:50:30,859 --> 00:50:39,130
for the old value of that reference in

00:50:35,599 --> 00:50:41,660
the source system and what the new

00:50:39,130 --> 00:50:43,160
reference is so it'll create a blank

00:50:41,660 --> 00:50:45,349
note and then when it comes to migrate

00:50:43,160 --> 00:50:48,559
like that later it will find that it's

00:50:45,349 --> 00:50:50,480
already studied the reason we can't use

00:50:48,559 --> 00:50:53,580
you you IDs to get around this problem

00:50:50,480 --> 00:50:56,190
is because you may not be in control

00:50:53,580 --> 00:50:57,990
of that source system you may not

00:50:56,190 --> 00:51:00,150
actually be able to go and recode it if

00:50:57,990 --> 00:51:02,250
it's not already using your your IDs

00:51:00,150 --> 00:51:06,090
it's probably a site that you're

00:51:02,250 --> 00:51:13,260
migrating away from it could be a

00:51:06,090 --> 00:51:15,180
staging cycle okay so another big source

00:51:13,260 --> 00:51:17,150
of problems that you could have is that

00:51:15,180 --> 00:51:20,730
you are always developing your migration

00:51:17,150 --> 00:51:22,680
amongst a sea of changing things you're

00:51:20,730 --> 00:51:24,900
changing the migration code so as with

00:51:22,680 --> 00:51:27,000
anything you could break it there but

00:51:24,900 --> 00:51:28,470
you might all but you also be having the

00:51:27,000 --> 00:51:30,660
source content you're going to might be

00:51:28,470 --> 00:51:34,530
migrating that might still be changing

00:51:30,660 --> 00:51:35,970
that might be changing every day you

00:51:34,530 --> 00:51:38,340
might still be building the site that

00:51:35,970 --> 00:51:40,620
you're going to migrate it to you might

00:51:38,340 --> 00:51:41,910
actually have existing on the content on

00:51:40,620 --> 00:51:44,370
a slightly you're going to migrate it

00:51:41,910 --> 00:51:46,170
too and you've got your own migration

00:51:44,370 --> 00:51:47,820
code change that you're making all of

00:51:46,170 --> 00:51:50,400
these are a lot of different things that

00:51:47,820 --> 00:51:52,140
can cause you problems so you need to

00:51:50,400 --> 00:51:53,310
have a robust strategy going back to

00:51:52,140 --> 00:51:55,290
what grain was talking about having

00:51:53,310 --> 00:52:02,760
these reliable development processes and

00:51:55,290 --> 00:52:04,590
that this is built into so the way we

00:52:02,760 --> 00:52:06,780
would typically do this and the way that

00:52:04,590 --> 00:52:12,600
we did this very successfully for a very

00:52:06,780 --> 00:52:17,030
large migration we did this year is by a

00:52:12,600 --> 00:52:21,090
kind of continuous integration process

00:52:17,030 --> 00:52:22,770
with overnight builds where overnight we

00:52:21,090 --> 00:52:26,300
would take the destination system which

00:52:22,770 --> 00:52:29,070
was already alive an operational system

00:52:26,300 --> 00:52:32,400
we'd pull that back code and database to

00:52:29,070 --> 00:52:35,660
our test platform we'd apply all our new

00:52:32,400 --> 00:52:37,920
code changes immediately to that and

00:52:35,660 --> 00:52:39,060
then after we've got on your code and

00:52:37,920 --> 00:52:40,770
this could be a new code being developed

00:52:39,060 --> 00:52:42,210
not just the migration code but all the

00:52:40,770 --> 00:52:45,120
code that's being developed for that

00:52:42,210 --> 00:52:47,100
site and then only once we've got all

00:52:45,120 --> 00:52:48,690
that in what we actually test the

00:52:47,100 --> 00:52:50,250
migration the really important thing

00:52:48,690 --> 00:52:52,470
about this is you need to do it every

00:52:50,250 --> 00:52:53,910
day you need to get your developers to

00:52:52,470 --> 00:52:55,860
do it every day so they will spot any

00:52:53,910 --> 00:52:58,500
problems and you need to get your

00:52:55,860 --> 00:53:01,620
testers testing it every day and those

00:52:58,500 --> 00:53:03,750
testers should genuinely be the people

00:53:01,620 --> 00:53:05,270
actually writing the content on the

00:53:03,750 --> 00:53:10,800
the customer as well as your own

00:53:05,270 --> 00:53:13,380
technical testers the other things that

00:53:10,800 --> 00:53:14,670
you need to be aware of is all those

00:53:13,380 --> 00:53:17,280
pain points so that you can plan your

00:53:14,670 --> 00:53:19,440
migration it's very difficult to predict

00:53:17,280 --> 00:53:21,480
a timeline for a migration task quickly

00:53:19,440 --> 00:53:23,790
you need to find out where all your

00:53:21,480 --> 00:53:26,430
references are all your pain points pull

00:53:23,790 --> 00:53:29,160
them up out front and because data

00:53:26,430 --> 00:53:32,820
migration often gets overlooked compared

00:53:29,160 --> 00:53:34,920
to functional development people tend to

00:53:32,820 --> 00:53:36,660
want estimates quickly because they

00:53:34,920 --> 00:53:38,190
suddenly realize they haven't done it or

00:53:36,660 --> 00:53:44,220
haven't allocated time because they were

00:53:38,190 --> 00:53:45,330
getting the real work done so I've kind

00:53:44,220 --> 00:53:46,560
of ways through that and some of the

00:53:45,330 --> 00:53:49,020
potential pain points because we don't

00:53:46,560 --> 00:53:52,200
have much time but there is a fuller

00:53:49,020 --> 00:53:58,560
version of that talk both on vimeo and

00:53:52,200 --> 00:54:01,590
slides on prezi that goes in has all

00:53:58,560 --> 00:54:04,080
your own code and actually live demos of

00:54:01,590 --> 00:54:07,140
how it reacts when and all the different

00:54:04,080 --> 00:54:09,720
ways you can audit or a migration Mike

00:54:07,140 --> 00:54:12,840
Ryan is the driving force behind my

00:54:09,720 --> 00:54:14,910
great so have a look at his blog he

00:54:12,840 --> 00:54:19,640
blogs occasionally interesting to see

00:54:14,910 --> 00:54:22,230
the contributions that he's making and

00:54:19,640 --> 00:54:25,200
also there's a bunch of great extra

00:54:22,230 --> 00:54:30,180
resources on my great project itself on

00:54:25,200 --> 00:54:32,220
the homepage so does anybody have any

00:54:30,180 --> 00:54:34,230
questions about what either Andrews

00:54:32,220 --> 00:54:37,020
talked about or what Graham's talked

00:54:34,230 --> 00:54:41,030
about or what I've talked about we've

00:54:37,020 --> 00:54:41,030
got about five minutes I think

00:54:44,360 --> 00:54:57,120
yes so the question was do we have

00:54:54,360 --> 00:55:01,170
experience of updating data with my

00:54:57,120 --> 00:55:03,240
great yes we definitely do so my great

00:55:01,170 --> 00:55:05,160
is designed so that you can run it

00:55:03,240 --> 00:55:08,010
multiple times on the same day triple

00:55:05,160 --> 00:55:10,350
check that it's been updated and then

00:55:08,010 --> 00:55:11,700
pulling the latest content only if it's

00:55:10,350 --> 00:55:15,180
changed so you can definitely use that

00:55:11,700 --> 00:55:16,470
in that configuration and in that

00:55:15,180 --> 00:55:18,870
release candidate that I mentioned

00:55:16,470 --> 00:55:21,840
there's been some changes around hashing

00:55:18,870 --> 00:55:25,440
the data in the source system so that

00:55:21,840 --> 00:55:29,250
you can eat more easily identify whether

00:55:25,440 --> 00:55:31,020
it has changed when we were doing that

00:55:29,250 --> 00:55:33,210
large migration which was tens of

00:55:31,020 --> 00:55:34,950
thousands of nodes because our database

00:55:33,210 --> 00:55:37,320
servers we were running on was so quick

00:55:34,950 --> 00:55:39,120
we ran it and we're doing other work to

00:55:37,320 --> 00:55:42,120
do with the mic with the upgrade whilst

00:55:39,120 --> 00:55:45,810
that ran and it ran so quickly we

00:55:42,120 --> 00:55:47,010
assumed it had failed and rerun it so

00:55:45,810 --> 00:55:48,480
you can definitely run it multiple times

00:55:47,010 --> 00:55:51,720
on the same day at certain it won't make

00:55:48,480 --> 00:55:53,280
further changes you might want to

00:55:51,720 --> 00:55:56,490
consider whether you want all that code

00:55:53,280 --> 00:56:00,330
to be enabled all the time if you're

00:55:56,490 --> 00:56:02,190
using it to do continuous continuous

00:56:00,330 --> 00:56:03,780
pulling of content and it may be the

00:56:02,190 --> 00:56:06,770
something like feet may be a better fit

00:56:03,780 --> 00:56:06,770
for that

00:56:11,540 --> 00:56:28,280
yes so the question is what's what's

00:56:26,210 --> 00:56:31,640
your experience migrating the themes and

00:56:28,280 --> 00:56:33,560
blocks and other stuff so yes you have

00:56:31,640 --> 00:56:35,510
to be practical at looking what is

00:56:33,560 --> 00:56:37,850
content that you're going to migrate and

00:56:35,510 --> 00:56:41,450
what is content that you are going to

00:56:37,850 --> 00:56:43,940
put into a feature and implement on your

00:56:41,450 --> 00:56:47,780
new site that way so certainly things

00:56:43,940 --> 00:56:50,600
like notes sorry content types

00:56:47,780 --> 00:56:51,800
definitely put those in features I'd be

00:56:50,600 --> 00:56:55,420
anything that's more kind of

00:56:51,800 --> 00:56:58,280
configuration than content as such I

00:56:55,420 --> 00:56:59,660
would not look to deploy it with my

00:56:58,280 --> 00:57:05,230
grateful though there's absolutely no

00:56:59,660 --> 00:57:05,230
reason why you couldn't yes

00:57:23,989 --> 00:57:29,429
yes you absolutely could use it and we

00:57:27,329 --> 00:57:32,279
have done and projects where we have

00:57:29,429 --> 00:57:36,029
used it in that capacity not so much as

00:57:32,279 --> 00:57:38,249
an ongoing deployment again it may be

00:57:36,029 --> 00:57:40,739
that deploy is better suited see that

00:57:38,249 --> 00:57:42,569
but yes you certainly could do that it

00:57:40,739 --> 00:57:44,599
would work because you have this

00:57:42,569 --> 00:57:47,509
repeatable migrate and the identify and

00:57:44,599 --> 00:57:50,549
identification of the changed content

00:57:47,509 --> 00:57:54,329
you can always have a job that will

00:57:50,549 --> 00:57:55,859
disable migrate and then run it and then

00:57:54,329 --> 00:57:57,239
run the migrate commands that will

00:57:55,859 --> 00:58:01,670
actually transfer the data and then

00:57:57,239 --> 00:58:01,670
disable my great after that

00:58:09,670 --> 00:58:14,109
okay if there's no other questions leave

00:58:12,190 --> 00:58:21,280
it there thanks sir on behalf of Andrew

00:58:14,109 --> 00:58:23,890
Graham and I fer attending thank you and

00:58:21,280 --> 00:58:26,109
if you wouldn't mind racing on a Drupal

00:58:23,890 --> 00:58:27,250
on site and it really helps to get

00:58:26,109 --> 00:58:28,359
feedback to work out whether we're

00:58:27,250 --> 00:58:31,410
talking about the kind of things that

00:58:28,359 --> 00:58:31,410

YouTube URL: https://www.youtube.com/watch?v=ZSZJNAjIDD4


