Title: DrupalCon New Orleans 2016: Altering, Extending, and Enhancing Drupal 8
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	A large part of Drupal's appeal lies in its flexibility. The fact that a developer can alter, extend, and enhance almost any aspect of Drupal without having to hack core. Historically this versatility has been made possible through the existence of hooks. Specially named PHP functions that are executed at critical points during the fulfillment of a request. And they've served the framework well for years. But times are changing, and Drupal 8 offers a variety of new patterns that all module developers will be required to learn, and understand.

Drawing from my experience helping to document and explain these new patterns in various formats I hope to answer these questions:

What are hooks, plugins, events, and services?
What problems do these patterns seek to solve?
How do I decide which method to use and when?
Looking ahead to the future, how do these patterns affect the code I write today?
If you're currently writing modules for Drupal 8, porting modules from Drupal 7, or think that you might have to sometime in the future, or even if you're just curious how the module ecosystem fits together behind the scenes  this session contains critical information for you. After attending this session you should have all the background information you need to make informed decisions about how your custom code can, and should, talk to Drupal in order to uphold best practices and write modules that are easy to maintain and play well with others in a post hook world.
Captions: 
	00:00:00,000 --> 00:00:04,290
good morning and welcome to the session

00:00:01,829 --> 00:00:08,849
on altering extending and enhancing

00:00:04,290 --> 00:00:11,070
Drupal 8 this is room 271 dash 273 I'm

00:00:08,849 --> 00:00:14,219
going to be talking about various ways

00:00:11,070 --> 00:00:16,949
that module developers can interact with

00:00:14,219 --> 00:00:19,320
the Drupal runtime in order to do

00:00:16,949 --> 00:00:20,850
whatever it is that your modules do if

00:00:19,320 --> 00:00:22,650
that doesn't sound like what you're

00:00:20,850 --> 00:00:24,420
interested in or if like partway through

00:00:22,650 --> 00:00:26,820
the session you're like I'm still not

00:00:24,420 --> 00:00:28,800
interested I all the sessions are

00:00:26,820 --> 00:00:30,359
recorded totally feel free to get up and

00:00:28,800 --> 00:00:34,070
find something that is of interest to

00:00:30,359 --> 00:00:34,070
you I will have no hard feelings

00:00:34,370 --> 00:00:40,559
otherwise there's a link on this slide a

00:00:37,770 --> 00:00:43,379
URL that you can go to that it is a link

00:00:40,559 --> 00:00:45,120
to the slide deck itself so you can keep

00:00:43,379 --> 00:00:47,460
the slides for later the other thing is

00:00:45,120 --> 00:00:49,590
there's a lot of a bunch of slides in

00:00:47,460 --> 00:00:51,480
here that are really just lists of links

00:00:49,590 --> 00:00:53,430
to various resources that I've found

00:00:51,480 --> 00:00:55,320
useful in order to help explain some of

00:00:53,430 --> 00:00:56,879
these concepts I'm not going to actually

00:00:55,320 --> 00:00:58,800
like expect you to write down all of

00:00:56,879 --> 00:01:00,719
those ones so just write down this one

00:00:58,800 --> 00:01:04,260
and you can get links for the rest of

00:01:00,719 --> 00:01:06,270
them very easily before I get started

00:01:04,260 --> 00:01:08,580
why I guess I already started before I

00:01:06,270 --> 00:01:11,070
get too far a little bit about myself my

00:01:08,580 --> 00:01:13,200
name is joe i work for drupal eyes dot

00:01:11,070 --> 00:01:16,530
me I've been doing drupal development

00:01:13,200 --> 00:01:18,210
for at least 10 years at this point I

00:01:16,530 --> 00:01:19,560
kind of lost track somewhere along the

00:01:18,210 --> 00:01:21,210
line and decided that it didn't really

00:01:19,560 --> 00:01:23,580
matter so I usually just have been doing

00:01:21,210 --> 00:01:25,439
this for a long time and I really love

00:01:23,580 --> 00:01:28,049
doing it which is why I'm still doing

00:01:25,439 --> 00:01:29,850
drupal development at drupa lies dot me

00:01:28,049 --> 00:01:32,189
I spend a lot of time working as a

00:01:29,850 --> 00:01:34,140
trainer I help produce training material

00:01:32,189 --> 00:01:36,630
that does things like explain how you

00:01:34,140 --> 00:01:39,780
might interact with Drupal's runtime I

00:01:36,630 --> 00:01:40,799
really get excited about like sitting

00:01:39,780 --> 00:01:42,960
around and trying to come up with

00:01:40,799 --> 00:01:45,210
analogies for how you can take something

00:01:42,960 --> 00:01:47,159
like drupal Z vent system and relate it

00:01:45,210 --> 00:01:49,140
to other real world things that people

00:01:47,159 --> 00:01:50,850
might know about so if you like complex

00:01:49,140 --> 00:01:52,680
analogies that explain technical

00:01:50,850 --> 00:01:54,060
concepts we can totally hang out and

00:01:52,680 --> 00:01:54,950
have a beer and talk about that it'll be

00:01:54,060 --> 00:01:59,539
fun

00:01:54,950 --> 00:02:01,159
I promise otherwise yeah I've been I do

00:01:59,539 --> 00:02:03,020
that I spend a lot of time teaching

00:02:01,159 --> 00:02:04,429
people Drupal and these types of

00:02:03,020 --> 00:02:07,159
concepts which is why this is a

00:02:04,429 --> 00:02:08,599
particularly exciting presentation for

00:02:07,159 --> 00:02:10,340
me to be able to give because it's

00:02:08,599 --> 00:02:12,739
really like this is the kind of thing

00:02:10,340 --> 00:02:15,380
that I enjoy doing being able to help

00:02:12,739 --> 00:02:17,420
explain some of the more technical bits

00:02:15,380 --> 00:02:19,280
of Drupal and hopefully make it a little

00:02:17,420 --> 00:02:24,049
bit less complex and a little easier to

00:02:19,280 --> 00:02:27,799
understand see if my slides actually

00:02:24,049 --> 00:02:30,049
change there we go so this presentation

00:02:27,799 --> 00:02:32,390
is going to cover a handful of things

00:02:30,049 --> 00:02:34,910
mostly I'm going to be talking about the

00:02:32,390 --> 00:02:38,090
various ways that a module developer or

00:02:34,910 --> 00:02:42,079
really a module can extend Drupal core

00:02:38,090 --> 00:02:43,910
the ways that during the process the

00:02:42,079 --> 00:02:46,190
Drupal goes through to build a page or

00:02:43,910 --> 00:02:47,959
service or request that you can interact

00:02:46,190 --> 00:02:52,340
with Drupal and the things that it's

00:02:47,959 --> 00:02:54,140
doing in Drupal 8 there are a handful of

00:02:52,340 --> 00:02:57,200
ways that you can do this including

00:02:54,140 --> 00:02:58,610
plugins services events and hooks all of

00:02:57,200 --> 00:03:00,560
which will cover I'm going to give

00:02:58,610 --> 00:03:02,269
examples of kind of the use case for

00:03:00,560 --> 00:03:04,040
each of these different methods and talk

00:03:02,269 --> 00:03:06,019
about sort of compare and contrast them

00:03:04,040 --> 00:03:07,489
and the hope is that when you leave this

00:03:06,019 --> 00:03:09,530
session you'll have a better idea of

00:03:07,489 --> 00:03:11,150
what tools are available to you so the

00:03:09,530 --> 00:03:12,769
you when you're writing a module you'd

00:03:11,150 --> 00:03:16,370
kind of get an idea of how you can

00:03:12,769 --> 00:03:18,350
participate in that request service and

00:03:16,370 --> 00:03:20,510
then also allowing you to be able to

00:03:18,350 --> 00:03:22,430
choose or make an informed decision

00:03:20,510 --> 00:03:24,410
about do I want to create a plug-in for

00:03:22,430 --> 00:03:26,569
this or should i be using services and

00:03:24,410 --> 00:03:28,609
being able to compare a little bit of

00:03:26,569 --> 00:03:30,049
those things there's there's not a lot

00:03:28,609 --> 00:03:33,350
of code there are a couple of code

00:03:30,049 --> 00:03:34,609
examples mostly just to show some kind

00:03:33,350 --> 00:03:36,470
of a little bit about how things work

00:03:34,609 --> 00:03:38,269
but mostly this presentation is geared

00:03:36,470 --> 00:03:41,000
towards helping you make that decision

00:03:38,269 --> 00:03:43,269
and understand what each of the methods

00:03:41,000 --> 00:03:43,269
are

00:03:44,040 --> 00:03:49,510
won't change my slides this is going to

00:03:46,239 --> 00:03:51,700
be an adventure here we go so and the

00:03:49,510 --> 00:03:53,620
reason that we talked about this and why

00:03:51,700 --> 00:03:55,659
I think this is important in the Drupal

00:03:53,620 --> 00:03:58,450
community we have this sort of phrase or

00:03:55,659 --> 00:04:01,870
axiom don't hack core the idea being

00:03:58,450 --> 00:04:03,849
that as a drupal developer I should be

00:04:01,870 --> 00:04:06,159
able to write code that interacts with

00:04:03,849 --> 00:04:08,439
anything that your pool does or change

00:04:06,159 --> 00:04:10,900
anything that Drupal does without having

00:04:08,439 --> 00:04:12,819
to modify the core code I should be able

00:04:10,900 --> 00:04:15,670
to alter the login process I should be

00:04:12,819 --> 00:04:17,949
able to add new features kind of adds a

00:04:15,670 --> 00:04:19,150
module developer the hope is any ways

00:04:17,949 --> 00:04:23,410
that you can do all of these things

00:04:19,150 --> 00:04:26,229
without modifying court the benefit is

00:04:23,410 --> 00:04:28,720
if you can write your code without

00:04:26,229 --> 00:04:30,729
having to change Drupal cores code it

00:04:28,720 --> 00:04:32,440
makes things like making security

00:04:30,729 --> 00:04:34,270
updates easier you don't have to keep

00:04:32,440 --> 00:04:36,340
track of the modifications that you made

00:04:34,270 --> 00:04:39,160
every time you're applying you know

00:04:36,340 --> 00:04:41,289
Drupal 8 dot one comes out or 811 with

00:04:39,160 --> 00:04:42,669
some security enhancements you don't

00:04:41,289 --> 00:04:44,320
have to keep track of what did I change

00:04:42,669 --> 00:04:47,860
and do I need to apply those changes

00:04:44,320 --> 00:04:54,699
again or did they get applied already so

00:04:47,860 --> 00:04:59,560
and then there's also now lost my train

00:04:54,699 --> 00:05:02,409
of thought hold on hmm so but the other

00:04:59,560 --> 00:05:04,419
thing that I would say about this is if

00:05:02,409 --> 00:05:07,060
you find that you're in a scenario where

00:05:04,419 --> 00:05:09,159
you feel like you would like to write

00:05:07,060 --> 00:05:12,159
code that changes Drupal and you can't

00:05:09,159 --> 00:05:14,199
without modifying Drupal core I would

00:05:12,159 --> 00:05:15,820
probably consider that to be a bug in

00:05:14,199 --> 00:05:17,650
Drupal core and that that's something

00:05:15,820 --> 00:05:19,630
that's worth creating an issue for and

00:05:17,650 --> 00:05:22,750
filing a patch making it possible for

00:05:19,630 --> 00:05:24,280
others to extend or enhance that aspect

00:05:22,750 --> 00:05:27,250
of Drupal without having to have core

00:05:24,280 --> 00:05:29,800
and then the hope is that we end up with

00:05:27,250 --> 00:05:31,180
this infinitely flexible Drupal core and

00:05:29,800 --> 00:05:32,860
what you are free to come along and

00:05:31,180 --> 00:05:37,240
change anything that you would like at

00:05:32,860 --> 00:05:38,409
any point more or less the other reason

00:05:37,240 --> 00:05:40,510
I think it's nice to talk about these

00:05:38,409 --> 00:05:42,490
tools is because as module developers

00:05:40,510 --> 00:05:44,380
we're often trying to create tools that

00:05:42,490 --> 00:05:46,930
are somewhat generic like Drupal core

00:05:44,380 --> 00:05:48,669
that other people can alter and enhance

00:05:46,930 --> 00:05:50,500
without having to hack our module for

00:05:48,669 --> 00:05:52,360
all of the same reasons I would like to

00:05:50,500 --> 00:05:55,240
be able to develop a module like for

00:05:52,360 --> 00:05:57,160
example devoting API module and allow

00:05:55,240 --> 00:05:59,350
other people to provide new plug

00:05:57,160 --> 00:06:01,060
for how you might tally votes or

00:05:59,350 --> 00:06:02,470
interact with the forms that the module

00:06:01,060 --> 00:06:05,380
creates without having to hack that

00:06:02,470 --> 00:06:07,810
module themself and so if you understand

00:06:05,380 --> 00:06:09,820
how all of these interaction points work

00:06:07,810 --> 00:06:11,440
you can both implement them in your code

00:06:09,820 --> 00:06:13,660
but you can also make it so that other

00:06:11,440 --> 00:06:15,610
people can use those tools to

00:06:13,660 --> 00:06:17,470
participate in whatever it is that your

00:06:15,610 --> 00:06:19,060
module is doing tallying votes are

00:06:17,470 --> 00:06:22,240
displaying things on the screen or

00:06:19,060 --> 00:06:23,680
whatever that case may be so in addition

00:06:22,240 --> 00:06:25,450
to looking at how you could implement

00:06:23,680 --> 00:06:26,980
each of these patterns will also talk a

00:06:25,450 --> 00:06:29,380
little bit how about you could about how

00:06:26,980 --> 00:06:31,660
you could invoke one of the patterns so

00:06:29,380 --> 00:06:40,810
dispatch events or invoke cooks and so

00:06:31,660 --> 00:06:42,790
forth I think that when you start trying

00:06:40,810 --> 00:06:44,530
to break down each of these concepts and

00:06:42,790 --> 00:06:46,330
understand which ones you should use and

00:06:44,530 --> 00:06:48,850
why it helps to have a little bit of a

00:06:46,330 --> 00:06:51,910
background on the types of things that

00:06:48,850 --> 00:06:54,910
Drupal is trying to do or might want to

00:06:51,910 --> 00:06:56,790
ask your code about and so I kind of

00:06:54,910 --> 00:06:59,980
break this up into like four different

00:06:56,790 --> 00:07:03,520
tasks that a module might do one of them

00:06:59,980 --> 00:07:05,860
is respond to information or events so

00:07:03,520 --> 00:07:07,540
certain things certain all kinds of

00:07:05,860 --> 00:07:10,480
things happen whenever someone's viewing

00:07:07,540 --> 00:07:12,910
a page in Drupal and when a node gets

00:07:10,480 --> 00:07:16,500
saved or when somebody logs in or when

00:07:12,910 --> 00:07:19,720
the page itself is first loaded Drupal

00:07:16,500 --> 00:07:21,280
dispatches events or says hey anyone

00:07:19,720 --> 00:07:22,660
that would like to participate in the

00:07:21,280 --> 00:07:24,700
fact that someone just entered their

00:07:22,660 --> 00:07:26,950
password and submitted the form now is

00:07:24,700 --> 00:07:28,960
your chance to do so if you'd like to so

00:07:26,950 --> 00:07:30,700
basically providing opportunities along

00:07:28,960 --> 00:07:32,260
the way for someone to step in and say

00:07:30,700 --> 00:07:34,050
hold on a second I'd like to do

00:07:32,260 --> 00:07:36,280
something a little bit different here

00:07:34,050 --> 00:07:39,580
another thing that modules do a lot of

00:07:36,280 --> 00:07:40,720
in Drupal is answer questions in if

00:07:39,580 --> 00:07:42,340
you're familiar with Drupal 7

00:07:40,720 --> 00:07:44,140
development this is often done in the

00:07:42,340 --> 00:07:46,090
form of like an info hug but there are

00:07:44,140 --> 00:07:47,320
questions like hey module do you have

00:07:46,090 --> 00:07:48,820
any blocks that you would like to

00:07:47,320 --> 00:07:50,320
provide so I can put them in the user

00:07:48,820 --> 00:07:52,030
interface so that someone could choose

00:07:50,320 --> 00:07:53,800
one of your blocks or do you provide any

00:07:52,030 --> 00:07:54,790
new field types that someone should be

00:07:53,800 --> 00:07:57,160
able to choose from when they're

00:07:54,790 --> 00:07:59,169
creating new content types or things

00:07:57,160 --> 00:08:01,000
like that so basically your code needs

00:07:59,169 --> 00:08:03,310
to be able to answer questions that

00:08:01,000 --> 00:08:06,270
Drupal has about the functionality that

00:08:03,310 --> 00:08:09,279
that code provides

00:08:06,270 --> 00:08:11,529
modules provide new functionality so

00:08:09,279 --> 00:08:13,509
Drupal core does a lot but there's also

00:08:11,529 --> 00:08:15,069
a bunch of things it doesn't do and so

00:08:13,509 --> 00:08:17,069
one of the primary reasons you would

00:08:15,069 --> 00:08:19,839
write a module is to add a new feature

00:08:17,069 --> 00:08:22,479
whether that say a tool for building web

00:08:19,839 --> 00:08:25,089
forms or a system for tallying votes or

00:08:22,479 --> 00:08:27,249
or whatever the case may be adding

00:08:25,089 --> 00:08:30,279
additional functionality above and

00:08:27,249 --> 00:08:32,800
beyond what core already provides and

00:08:30,279 --> 00:08:35,289
the corollary to that is altering

00:08:32,800 --> 00:08:39,909
functionality that core already provides

00:08:35,289 --> 00:08:42,010
so the the various modules that are in

00:08:39,909 --> 00:08:43,870
core that for example provide a list of

00:08:42,010 --> 00:08:46,540
blocks or make it possible to create a

00:08:43,870 --> 00:08:48,459
contact form rather than just get rid of

00:08:46,540 --> 00:08:50,920
that module completely and replace it

00:08:48,459 --> 00:08:52,660
with new but only slightly different

00:08:50,920 --> 00:08:54,610
functionality your module could also

00:08:52,660 --> 00:08:56,649
choose to alter the existing

00:08:54,610 --> 00:08:59,350
functionality so these are kind of the

00:08:56,649 --> 00:09:01,870
types of things that a module might want

00:08:59,350 --> 00:09:05,670
to do during the process of servicing a

00:09:01,870 --> 00:09:05,670
request for a page in Drupal

00:09:09,120 --> 00:09:14,910
which again comes back to that idea

00:09:10,880 --> 00:09:16,800
don't hack or instead take the

00:09:14,910 --> 00:09:18,930
opportunity to do things like answer a

00:09:16,800 --> 00:09:20,610
question with a hook or use a plug-in to

00:09:18,930 --> 00:09:22,020
provide additional functionality or

00:09:20,610 --> 00:09:23,880
write a service that provides new

00:09:22,020 --> 00:09:26,010
functionality or respond to the fact

00:09:23,880 --> 00:09:28,890
that someone's trying to login and you'd

00:09:26,010 --> 00:09:31,589
like to change the password verification

00:09:28,890 --> 00:09:33,480
system by responding to that event we're

00:09:31,589 --> 00:09:37,050
going to talk about these four methods

00:09:33,480 --> 00:09:42,000
for altering Drupal hooks plugins

00:09:37,050 --> 00:09:44,430
services and events in no particular

00:09:42,000 --> 00:09:45,810
order either I really I have no

00:09:44,430 --> 00:09:47,220
explanation for why they are in this

00:09:45,810 --> 00:09:48,660
order it's not like this one's more

00:09:47,220 --> 00:09:49,920
important than the other ones it just

00:09:48,660 --> 00:09:52,680
happen to be the order that I felt like

00:09:49,920 --> 00:09:55,170
talking about them in the first one is

00:09:52,680 --> 00:09:57,660
plugins plugins is a system that's new

00:09:55,170 --> 00:10:02,089
in Drupal 8 actually all of them except

00:09:57,660 --> 00:10:05,600
for hooks are new systems in Drupal 8 I

00:10:02,089 --> 00:10:08,310
think that likely as a module developer

00:10:05,600 --> 00:10:09,990
making the transition from Drupal 7 to

00:10:08,310 --> 00:10:11,700
Drupal 8 or even if you're just getting

00:10:09,990 --> 00:10:14,880
started the first time with Drupal 8

00:10:11,700 --> 00:10:17,730
plugins are probably one of the first if

00:10:14,880 --> 00:10:20,700
not the first developer experience

00:10:17,730 --> 00:10:22,410
you'll have creating a module usually

00:10:20,700 --> 00:10:24,300
people get started to trying to do

00:10:22,410 --> 00:10:26,459
relatively simple tasks like create a

00:10:24,300 --> 00:10:29,910
new custom block that's something that

00:10:26,459 --> 00:10:31,140
might be implemented as a plug-in but so

00:10:29,910 --> 00:10:32,310
we talked about this because it's

00:10:31,140 --> 00:10:37,980
probably something you'll encounter

00:10:32,310 --> 00:10:41,339
pretty early on what are plugins plugins

00:10:37,980 --> 00:10:44,790
are a combination of a tool that answers

00:10:41,339 --> 00:10:46,830
a question so drupal has some context in

00:10:44,790 --> 00:10:48,600
which it needs to know what are all of

00:10:46,830 --> 00:10:50,760
the things that provide blocks what are

00:10:48,600 --> 00:10:52,230
all of the things that provide fields

00:10:50,760 --> 00:10:54,540
what are all the things that provide

00:10:52,230 --> 00:10:57,180
functionality X so a plugin needs to

00:10:54,540 --> 00:10:59,160
provide metadata about the functionality

00:10:57,180 --> 00:11:01,380
that it provides and then plugins also

00:10:59,160 --> 00:11:08,580
add new functionality that doesn't

00:11:01,380 --> 00:11:11,089
already exist in Drupal set lake is your

00:11:08,580 --> 00:11:11,089
the feedback

00:11:12,060 --> 00:11:18,760
alright well I'll try to I have no idea

00:11:15,970 --> 00:11:24,220
why that happens but plugins I know all

00:11:18,760 --> 00:11:26,770
about so some of the things that I like

00:11:24,220 --> 00:11:28,660
like about plugins they think about

00:11:26,770 --> 00:11:31,090
plugins as a way of providing new

00:11:28,660 --> 00:11:33,250
configurable functionality for various

00:11:31,090 --> 00:11:35,080
components within Drupal almost always

00:11:33,250 --> 00:11:36,520
where you have a scenario where in

00:11:35,080 --> 00:11:38,620
Drupal 7 you would have done something

00:11:36,520 --> 00:11:40,660
like implements and info hook that

00:11:38,620 --> 00:11:42,130
describes the functionality and then a

00:11:40,660 --> 00:11:43,840
bunch of callback functions that

00:11:42,130 --> 00:11:45,640
implement the functionality that's

00:11:43,840 --> 00:11:49,450
generally in Drupal 8 going to be

00:11:45,640 --> 00:11:51,700
replaced with plugins otherwise it's

00:11:49,450 --> 00:11:54,190
fairly similar you've got a system

00:11:51,700 --> 00:11:57,190
provide for providing metadata about the

00:11:54,190 --> 00:11:59,650
functionality and then the code that

00:11:57,190 --> 00:12:01,720
actually provides it I like plugins a

00:11:59,650 --> 00:12:03,910
lot I feel like plugins provide a bit

00:12:01,720 --> 00:12:05,920
more of a consistent experience for

00:12:03,910 --> 00:12:08,380
people that are learning how to write

00:12:05,920 --> 00:12:10,060
code for Drupal in Drupal 7 you would

00:12:08,380 --> 00:12:12,520
often end up with like you know

00:12:10,060 --> 00:12:16,210
implementing a new block in Drupal 7

00:12:12,520 --> 00:12:17,560
it's it's it's not necessarily hard but

00:12:16,210 --> 00:12:19,420
you have to learn all of the right

00:12:17,560 --> 00:12:21,190
pieces and it's hard to understand what

00:12:19,420 --> 00:12:23,260
those are you learn that you have to

00:12:21,190 --> 00:12:25,390
create an info hook so that the admin UI

00:12:23,260 --> 00:12:27,940
can find the block and then you also

00:12:25,390 --> 00:12:30,010
have to like create a you know hook

00:12:27,940 --> 00:12:31,960
block view and hook block save but

00:12:30,010 --> 00:12:33,850
there's nothing that really ties all of

00:12:31,960 --> 00:12:35,950
that together other than they happen to

00:12:33,850 --> 00:12:37,720
be hooked underscore block underscore

00:12:35,950 --> 00:12:40,300
something so you figure out how that

00:12:37,720 --> 00:12:42,490
works by searching API drupal.org for

00:12:40,300 --> 00:12:44,320
hook block and then see what pops up in

00:12:42,490 --> 00:12:46,570
the automatic list that kind of sounds

00:12:44,320 --> 00:12:49,300
like what I want to do the nice thing

00:12:46,570 --> 00:12:51,160
about plugins is that when it comes time

00:12:49,300 --> 00:12:53,170
to implement the functionality you're

00:12:51,160 --> 00:12:55,540
almost always going to be working off of

00:12:53,170 --> 00:12:57,370
a class so you'll have an interface that

00:12:55,540 --> 00:12:59,290
you can implement which describes

00:12:57,370 --> 00:13:01,210
basically the types of things that you

00:12:59,290 --> 00:13:02,980
could do with this plug-in and you also

00:13:01,210 --> 00:13:05,200
get to put all of the code that provides

00:13:02,980 --> 00:13:06,610
the functionality in one place instead

00:13:05,200 --> 00:13:09,670
of spreading it across a bunch of

00:13:06,610 --> 00:13:11,530
different randomly named functions or

00:13:09,670 --> 00:13:13,600
callbacks you've just generally will

00:13:11,530 --> 00:13:15,580
create a single class that provides the

00:13:13,600 --> 00:13:17,500
plug-in and encapsulates all of that

00:13:15,580 --> 00:13:19,290
functionality in one place is pretty

00:13:17,500 --> 00:13:22,480
slick

00:13:19,290 --> 00:13:25,780
examples of things that are plugins in

00:13:22,480 --> 00:13:29,050
Drupal 8 blocks is the kind of example

00:13:25,780 --> 00:13:36,160
that I come up with the most it's a

00:13:29,050 --> 00:13:37,810
classic example of theirs sorry the

00:13:36,160 --> 00:13:39,730
system in which Drupal needs to be able

00:13:37,810 --> 00:13:42,370
to get a list of all of the things that

00:13:39,730 --> 00:13:46,230
provide this type of functionality and

00:13:42,370 --> 00:13:46,230
the Drupal also needs to be able to

00:13:59,430 --> 00:14:16,840
thanks really that's the thing i'm going

00:14:09,910 --> 00:14:19,090
to get applause for all right so so

00:14:16,840 --> 00:14:20,950
plugins blocks is a great example of a

00:14:19,090 --> 00:14:22,300
system where drupal needs to know how to

00:14:20,950 --> 00:14:23,710
get a list of all of the blocks that are

00:14:22,300 --> 00:14:25,330
provided by all the modules that are

00:14:23,710 --> 00:14:27,190
currently installed on this particular

00:14:25,330 --> 00:14:29,140
site but not only that it needs to be

00:14:27,190 --> 00:14:31,270
able to do things like consistently be

00:14:29,140 --> 00:14:32,680
able to know what the label is of the

00:14:31,270 --> 00:14:34,780
block that it needs to display in the

00:14:32,680 --> 00:14:36,850
admin UI or it needs to have a mess a

00:14:34,780 --> 00:14:39,010
known method that it can always call to

00:14:36,850 --> 00:14:42,730
display whatever the content of that

00:14:39,010 --> 00:14:45,400
block is field types field for matters

00:14:42,730 --> 00:14:47,470
view styles and actions in Drupal are

00:14:45,400 --> 00:14:50,410
also other instances of things that

00:14:47,470 --> 00:14:52,840
would be plugins one of the things that

00:14:50,410 --> 00:14:55,500
I find frustrating about plugins is I

00:14:52,840 --> 00:14:58,540
can't really figure out the best way to

00:14:55,500 --> 00:15:00,400
know what all of the different types of

00:14:58,540 --> 00:15:04,870
plugins that I might want to implement

00:15:00,400 --> 00:15:07,720
our I generally will look at Corp for an

00:15:04,870 --> 00:15:09,490
example of if I know that I want to add

00:15:07,720 --> 00:15:11,200
a new field for matter i'll try to go

00:15:09,490 --> 00:15:13,210
find a module in cord that's adding a

00:15:11,200 --> 00:15:14,590
new field for matter once i see the code

00:15:13,210 --> 00:15:16,540
and we'll take a look at some examples

00:15:14,590 --> 00:15:18,160
you'll pretty be able you'll pretty

00:15:16,540 --> 00:15:21,310
quickly be able to recognize that this

00:15:18,160 --> 00:15:24,100
is a plug-in implementation but there

00:15:21,310 --> 00:15:28,070
there isn't that i know of yet any like

00:15:24,100 --> 00:15:30,860
one page that you can go to the lists

00:15:28,070 --> 00:15:37,280
so that lists all of the different

00:15:30,860 --> 00:15:44,300
plug-in types all right fine we'll go to

00:15:37,280 --> 00:15:46,310
the next slide the recipe for

00:15:44,300 --> 00:15:48,050
implementing a plug-in so once you know

00:15:46,310 --> 00:15:49,970
that the thing that you're trying to

00:15:48,050 --> 00:15:52,790
create in your module is a plug-in

00:15:49,970 --> 00:15:54,470
here's what you need to do first you

00:15:52,790 --> 00:15:56,390
need to figure out what type of plug in

00:15:54,470 --> 00:15:59,240
it is that you're implementing is that a

00:15:56,390 --> 00:16:02,120
block is it a field for matter is it a

00:15:59,240 --> 00:16:03,950
field widget knowing what type of plug

00:16:02,120 --> 00:16:06,290
in it is and there's actually a handful

00:16:03,950 --> 00:16:08,870
of different plug-in that there's the

00:16:06,290 --> 00:16:10,580
type for example it's a block plugin but

00:16:08,870 --> 00:16:13,790
then there's also various ways in which

00:16:10,580 --> 00:16:15,830
the plug-in system can discover plugins

00:16:13,790 --> 00:16:18,290
of a given type so is it an annotated

00:16:15,830 --> 00:16:21,800
plug-in is it based on the yamo file and

00:16:18,290 --> 00:16:23,900
so forth knowing that will inform the

00:16:21,800 --> 00:16:26,780
rest of what you need to do in order to

00:16:23,900 --> 00:16:29,300
implement something of that type so once

00:16:26,780 --> 00:16:31,790
I know that it's a block plugin I also

00:16:29,300 --> 00:16:34,040
know okay block plugins are annotated

00:16:31,790 --> 00:16:35,780
plug-in which means that the metadata

00:16:34,040 --> 00:16:37,220
that I need to provide because you're

00:16:35,780 --> 00:16:39,140
going to have to provide information for

00:16:37,220 --> 00:16:41,690
any plugin so the Drupal can read that

00:16:39,140 --> 00:16:42,980
and create a list the metadata in this

00:16:41,690 --> 00:16:45,440
case is going to be part of an

00:16:42,980 --> 00:16:47,810
annotation on a class and it'll also

00:16:45,440 --> 00:16:49,940
inform in this in that case for an

00:16:47,810 --> 00:16:53,240
annotated plug-in where the class should

00:16:49,940 --> 00:16:54,770
live in the code base so what namespace

00:16:53,240 --> 00:16:59,180
that should live in so the Drupal can

00:16:54,770 --> 00:17:01,850
discover it there is I believe there is

00:16:59,180 --> 00:17:04,820
actually always in core though this may

00:17:01,850 --> 00:17:06,829
not be true so it may be almost always a

00:17:04,820 --> 00:17:09,350
base class that you can extend for a

00:17:06,829 --> 00:17:11,930
given plug-in type you think about it

00:17:09,350 --> 00:17:15,470
tools like blocks for example a lot of

00:17:11,930 --> 00:17:17,839
the functionality between all blocks is

00:17:15,470 --> 00:17:19,550
fairly similar like most blocks in

00:17:17,839 --> 00:17:21,140
Drupal have a configuration form that

00:17:19,550 --> 00:17:23,240
allow you to choose which pages that's

00:17:21,140 --> 00:17:25,280
going to show up on set the title and

00:17:23,240 --> 00:17:27,020
some other basic information and so

00:17:25,280 --> 00:17:29,150
instead of having to repeat that for

00:17:27,020 --> 00:17:30,860
every single block plug-in I could

00:17:29,150 --> 00:17:33,980
extend the base class which provides

00:17:30,860 --> 00:17:36,260
that configuration autumn already I can

00:17:33,980 --> 00:17:38,150
alter it if i want to buy optionally

00:17:36,260 --> 00:17:40,130
like overriding that method or i can

00:17:38,150 --> 00:17:40,940
just leave it as is and get away with

00:17:40,130 --> 00:17:42,710
kind of do

00:17:40,940 --> 00:17:44,570
the bare minimum amount of work so I

00:17:42,710 --> 00:17:46,460
highly recommend extending the base

00:17:44,570 --> 00:17:48,290
class when it exists and you're

00:17:46,460 --> 00:17:49,910
implementing a plugin and finally

00:17:48,290 --> 00:17:51,980
depending on the plug-in type there will

00:17:49,910 --> 00:17:54,110
also be an interface this is required

00:17:51,980 --> 00:17:55,850
for every plug-in type so you'll find

00:17:54,110 --> 00:17:57,800
the class that is the interface for that

00:17:55,850 --> 00:17:59,660
plug-in type and the the awesome thing

00:17:57,800 --> 00:18:01,100
about this is now I know all of the

00:17:59,660 --> 00:18:03,050
different methods that I could implement

00:18:01,100 --> 00:18:04,790
for this plug-in type in what they're

00:18:03,050 --> 00:18:07,700
going to do instead of having to go to

00:18:04,790 --> 00:18:09,530
API drupal.org and search for hook

00:18:07,700 --> 00:18:11,240
underscore block underscore and then

00:18:09,530 --> 00:18:13,880
wait for the list to populate so I can

00:18:11,240 --> 00:18:15,500
figure out what do these things do I can

00:18:13,880 --> 00:18:17,330
just look at the interface all the

00:18:15,500 --> 00:18:18,740
documentation will be right there I can

00:18:17,330 --> 00:18:20,180
say oh yeah the thing that I want to do

00:18:18,740 --> 00:18:23,170
is change the content that's displayed

00:18:20,180 --> 00:18:26,810
so I'm going to override this method

00:18:23,170 --> 00:18:30,260
this is a very simple somewhat contrived

00:18:26,810 --> 00:18:34,400
example of what a plug-in might look

00:18:30,260 --> 00:18:36,050
like it's a class it's extending a base

00:18:34,400 --> 00:18:37,490
class so this plug-in provides new

00:18:36,050 --> 00:18:40,940
flavors of ice cream because who doesn't

00:18:37,490 --> 00:18:43,280
like ice cream it lives in a namespace

00:18:40,940 --> 00:18:45,260
that was determined based on me knowing

00:18:43,280 --> 00:18:47,840
that I'm adding a new ice cream flavor

00:18:45,260 --> 00:18:50,060
plug-in it provides the metadata that

00:18:47,840 --> 00:18:51,980
Drupal needs in order to discover like

00:18:50,060 --> 00:18:53,630
the list of plugins that here in the

00:18:51,980 --> 00:18:55,610
comment at the top of the class this is

00:18:53,630 --> 00:18:58,210
called an annotation and then the

00:18:55,610 --> 00:19:00,890
functionality of what that plug-in does

00:18:58,210 --> 00:19:03,560
if you're a module developer and you

00:19:00,890 --> 00:19:07,420
would like to add a new plug-in type the

00:19:03,560 --> 00:19:10,130
recipe for doing so is is as follows

00:19:07,420 --> 00:19:12,470
examples of when you might want to add a

00:19:10,130 --> 00:19:14,180
new plug-in type or anytime that your

00:19:12,470 --> 00:19:16,430
module provides some kind of

00:19:14,180 --> 00:19:19,520
functionality that you would like others

00:19:16,430 --> 00:19:21,620
to be able to add to the list so that an

00:19:19,520 --> 00:19:24,440
administrator can choose one or more

00:19:21,620 --> 00:19:26,390
items from that list i use the voting

00:19:24,440 --> 00:19:29,000
api module as an example a lot for this

00:19:26,390 --> 00:19:30,890
and so if you're the maintainer of a

00:19:29,000 --> 00:19:32,840
module like voting api you might want to

00:19:30,890 --> 00:19:35,210
provide one simple way of tallying votes

00:19:32,840 --> 00:19:37,190
but leave it open for people to provide

00:19:35,210 --> 00:19:38,930
infinite number of other ways of

00:19:37,190 --> 00:19:40,460
tallying votes so i might do you know

00:19:38,930 --> 00:19:42,020
just add them all together but you might

00:19:40,460 --> 00:19:43,760
need instant runoff or you might need

00:19:42,020 --> 00:19:46,490
your votes are worth two if you vote on

00:19:43,760 --> 00:19:49,310
tuesday at two p.m. whatever the case

00:19:46,490 --> 00:19:51,350
maybe you could write those plugins

00:19:49,310 --> 00:19:53,350
Drupal will provide a list that it

00:19:51,350 --> 00:19:54,700
administrator could choose from

00:19:53,350 --> 00:19:57,220
which one of those would be active at

00:19:54,700 --> 00:19:59,500
any given time if you want to implement

00:19:57,220 --> 00:20:01,000
a new if you want to allow for plugins

00:19:59,500 --> 00:20:04,360
what you need to do is declare a new

00:20:01,000 --> 00:20:07,570
plug-in type the easiest way to do so is

00:20:04,360 --> 00:20:10,450
by extending the default plug-in manager

00:20:07,570 --> 00:20:12,400
class that's part of Drupal core this

00:20:10,450 --> 00:20:14,710
will go through and basically set up a

00:20:12,400 --> 00:20:17,130
whole bunch of saying defaults for you

00:20:14,710 --> 00:20:19,960
in terms of how to collect metadata

00:20:17,130 --> 00:20:21,669
where the code should live but still

00:20:19,960 --> 00:20:25,539
give you the chance to override any of

00:20:21,669 --> 00:20:27,010
those as you need to this slide has a

00:20:25,539 --> 00:20:28,690
lot of links on it which is not very

00:20:27,010 --> 00:20:30,850
useful when we're in a conference room

00:20:28,690 --> 00:20:33,100
like this so like I said you can

00:20:30,850 --> 00:20:34,809
download the slides at this link down in

00:20:33,100 --> 00:20:36,909
the bottom corner and this has a lot of

00:20:34,809 --> 00:20:39,900
resources that I've found useful when

00:20:36,909 --> 00:20:42,760
trying to understand the plug-in system

00:20:39,900 --> 00:20:47,890
services is another way that we can

00:20:42,760 --> 00:20:50,460
alter Drupal services are probably best

00:20:47,890 --> 00:20:53,860
used when you're trying to provide new

00:20:50,460 --> 00:20:55,990
functionality to Drupal so similar to

00:20:53,860 --> 00:20:58,419
plugins the difference the primary

00:20:55,990 --> 00:21:00,880
difference I think is probably that with

00:20:58,419 --> 00:21:06,190
plugins you would like to allow

00:21:00,880 --> 00:21:08,320
administrators to choose from a list of

00:21:06,190 --> 00:21:10,600
many plugins and be able to have more

00:21:08,320 --> 00:21:13,630
than one active at any given time so

00:21:10,600 --> 00:21:16,059
blocks again a page might have multiple

00:21:13,630 --> 00:21:18,130
blocks on it at the same time where

00:21:16,059 --> 00:21:19,690
services are generally useful for

00:21:18,130 --> 00:21:22,690
functionality whether you'll probably

00:21:19,690 --> 00:21:24,909
only ever have one active instance of

00:21:22,690 --> 00:21:27,039
that functionality you'll only ever have

00:21:24,909 --> 00:21:29,850
one database connection you'll probably

00:21:27,039 --> 00:21:35,909
only ever have one Twitter API client

00:21:29,850 --> 00:21:38,250
service functionality at any given time

00:21:35,909 --> 00:21:41,110
services are a way of encapsulating

00:21:38,250 --> 00:21:43,179
functionality into a bundle like

00:21:41,110 --> 00:21:46,150
generally just a class with a known

00:21:43,179 --> 00:21:47,950
interface making it easy to access any

00:21:46,150 --> 00:21:50,110
of the functionality that thing provides

00:21:47,950 --> 00:21:52,120
without necessarily having to understand

00:21:50,110 --> 00:21:54,760
the internal mechanics of how it works

00:21:52,120 --> 00:21:57,250
so you could say hey Drupal database

00:21:54,760 --> 00:21:59,590
service make a query to the database and

00:21:57,250 --> 00:22:01,929
you could you know called the query

00:21:59,590 --> 00:22:04,120
method but it doesn't really matter what

00:22:01,929 --> 00:22:05,420
happens during the time its might be

00:22:04,120 --> 00:22:08,270
querying it might be

00:22:05,420 --> 00:22:11,640
mysql it might be querying some external

00:22:08,270 --> 00:22:14,040
database elsewhere on a ret on a API or

00:22:11,640 --> 00:22:16,590
something as far as I'm the developer

00:22:14,040 --> 00:22:18,960
I'm concerned I know I can call this

00:22:16,590 --> 00:22:25,020
method and expect this output when that

00:22:18,960 --> 00:22:26,760
happens services are awesome they they

00:22:25,020 --> 00:22:29,760
provide a way of allowing the

00:22:26,760 --> 00:22:31,350
functionality that we use to interact

00:22:29,760 --> 00:22:34,410
with all the various different things

00:22:31,350 --> 00:22:36,480
like external API or create forms in

00:22:34,410 --> 00:22:39,600
Drupal or even the implementation of a

00:22:36,480 --> 00:22:43,650
plug-in type to be decoupled from Drupal

00:22:39,600 --> 00:22:46,620
itself this allows for better testing it

00:22:43,650 --> 00:22:48,870
also allows so basically you can swap

00:22:46,620 --> 00:22:50,340
out one service for another as assuming

00:22:48,870 --> 00:22:52,679
they implement the same interface you

00:22:50,340 --> 00:22:54,900
could say the Twitter module has a

00:22:52,679 --> 00:22:57,030
service for querying the Twitter API but

00:22:54,900 --> 00:22:58,860
when I'm running tests I'd like to use a

00:22:57,030 --> 00:23:00,510
mock version of that service that

00:22:58,860 --> 00:23:02,580
doesn't actually do all of the work of

00:23:00,510 --> 00:23:04,110
going out in query encoder and getting

00:23:02,580 --> 00:23:07,290
the information back it'll just respond

00:23:04,110 --> 00:23:08,820
every time with a known message making

00:23:07,290 --> 00:23:12,990
the tests run really fast and a little

00:23:08,820 --> 00:23:16,950
bit easier for me to write services

00:23:12,990 --> 00:23:19,020
typically replace what in Drupal 7 work

00:23:16,950 --> 00:23:21,030
like global functions so you'd have all

00:23:19,020 --> 00:23:23,670
these PHP functions like for example to

00:23:21,030 --> 00:23:25,440
access Drupal's database abstraction

00:23:23,670 --> 00:23:28,110
layer that were like DB underscore

00:23:25,440 --> 00:23:29,520
something and there in the global name

00:23:28,110 --> 00:23:32,040
space so that you can make use of them

00:23:29,520 --> 00:23:35,040
from everywhere in Drupal 8 those are

00:23:32,040 --> 00:23:38,059
almost always replaced by services and

00:23:35,040 --> 00:23:40,350
then services are accessed through the

00:23:38,059 --> 00:23:42,360
services container which is basically

00:23:40,350 --> 00:23:44,370
just a giant repository of all of the

00:23:42,360 --> 00:23:46,920
services that Drupal knows about and a

00:23:44,370 --> 00:23:48,929
method for saying hey give me a copy of

00:23:46,920 --> 00:23:52,650
the database service or hey give me a

00:23:48,929 --> 00:23:54,300
copy of the form building service some

00:23:52,650 --> 00:23:56,280
of the things that are services in

00:23:54,300 --> 00:23:59,280
Drupal 8 include like I said the

00:23:56,280 --> 00:24:04,200
database access is a really commonly

00:23:59,280 --> 00:24:06,020
used example the caching system the all

00:24:04,200 --> 00:24:10,020
of the various tools that are used

00:24:06,020 --> 00:24:12,809
optimize and collect the various CSS and

00:24:10,020 --> 00:24:15,030
JavaScript assets in your site plug-in

00:24:12,809 --> 00:24:16,210
managers is actually kind of cool the

00:24:15,030 --> 00:24:19,020
services

00:24:16,210 --> 00:24:20,710
are used to provide all of the other

00:24:19,020 --> 00:24:22,800
functionalities that we're talking about

00:24:20,710 --> 00:24:25,210
here so hooks are provided by a service

00:24:22,800 --> 00:24:28,480
events are provided by a service and

00:24:25,210 --> 00:24:31,590
plug-ins each plug-in type at which is a

00:24:28,480 --> 00:24:35,080
plug-in manager is a service of its own

00:24:31,590 --> 00:24:37,540
if you are writing new modules probably

00:24:35,080 --> 00:24:40,420
that the most common use case for when

00:24:37,540 --> 00:24:43,150
you would create a new service or things

00:24:40,420 --> 00:24:46,090
like I'm providing functionality to

00:24:43,150 --> 00:24:47,770
interact with in an API I for example

00:24:46,090 --> 00:24:51,520
the Twitter module would provide a

00:24:47,770 --> 00:24:54,270
Twitter client service or any other time

00:24:51,520 --> 00:24:57,010
that your module is attempting to

00:24:54,270 --> 00:24:59,320
provide functionality that both your

00:24:57,010 --> 00:25:01,000
module and others might want to make use

00:24:59,320 --> 00:25:02,980
of so instead of declaring a bunch of

00:25:01,000 --> 00:25:05,440
global functions you create a new

00:25:02,980 --> 00:25:08,500
service declare to dribble and others

00:25:05,440 --> 00:25:11,230
can make use of it as well there is a

00:25:08,500 --> 00:25:13,180
ton of different services in Drupal 8

00:25:11,230 --> 00:25:14,680
and I find that the best way at the

00:25:13,180 --> 00:25:17,110
moment to figure out what those all ours

00:25:14,680 --> 00:25:19,570
if you go to api drupal org over on the

00:25:17,110 --> 00:25:22,000
right-hand column there's a link for

00:25:19,570 --> 00:25:23,770
services it will give you a big list of

00:25:22,000 --> 00:25:25,450
the services that are available in core

00:25:23,770 --> 00:25:27,760
and you can start to filter through that

00:25:25,450 --> 00:25:29,740
list and find the things that you're

00:25:27,760 --> 00:25:32,800
after whether it's a the tool for

00:25:29,740 --> 00:25:35,560
connecting to the database or the you

00:25:32,800 --> 00:25:42,480
know HTTP client for making requests to

00:25:35,560 --> 00:25:42,480
others api's excuse me

00:25:44,600 --> 00:25:50,490
if you want to create a new service in

00:25:47,760 --> 00:25:53,130
your module so bundling up some

00:25:50,490 --> 00:25:55,890
functionality both for yourself to keep

00:25:53,130 --> 00:25:57,720
it decoupled and easy to test so you

00:25:55,890 --> 00:26:00,090
could maybe provide a mock version of

00:25:57,720 --> 00:26:02,010
that service and so that other modules

00:26:00,090 --> 00:26:04,140
could make use of the service what you

00:26:02,010 --> 00:26:05,340
would do is the following the first

00:26:04,140 --> 00:26:07,260
thing you need to do is choose a unique

00:26:05,340 --> 00:26:09,420
name for your service which basically

00:26:07,260 --> 00:26:11,730
means make sure that you prefix your

00:26:09,420 --> 00:26:13,110
service name with the name of your

00:26:11,730 --> 00:26:16,440
module so you might end up with

00:26:13,110 --> 00:26:23,780
something like my module dot Twitter API

00:26:16,440 --> 00:26:26,580
or my module dot you know voting counter

00:26:23,780 --> 00:26:31,320
the next thing you need to do is define

00:26:26,580 --> 00:26:33,900
a interface for your service even if

00:26:31,320 --> 00:26:36,570
you're only going to provide one version

00:26:33,900 --> 00:26:39,180
of that service I still highly recommend

00:26:36,570 --> 00:26:40,700
providing an interface so that one

00:26:39,180 --> 00:26:42,810
you'll have really good and consistent

00:26:40,700 --> 00:26:44,910
documentation of the things that someone

00:26:42,810 --> 00:26:47,250
could do with that service so your

00:26:44,910 --> 00:26:49,050
interface defines all of the methods on

00:26:47,250 --> 00:26:52,740
that class that someone can make use of

00:26:49,050 --> 00:26:55,440
and two it ensures that like future you

00:26:52,740 --> 00:26:57,510
or anybody else could write another

00:26:55,440 --> 00:27:00,570
service that could be just as easily

00:26:57,510 --> 00:27:03,570
swapped in for the one that you were

00:27:00,570 --> 00:27:06,570
providing you'll need to register your

00:27:03,570 --> 00:27:08,880
service with Drupal so you add a dot yml

00:27:06,570 --> 00:27:11,340
file that provides Drupal with a bit of

00:27:08,880 --> 00:27:13,230
information about the service so that it

00:27:11,340 --> 00:27:15,390
can add it to its service container

00:27:13,230 --> 00:27:17,580
making sure that when you're ready to

00:27:15,390 --> 00:27:19,740
use the service you can get a copy of it

00:27:17,580 --> 00:27:22,560
from the service container just use that

00:27:19,740 --> 00:27:24,030
to identify it by name Drupal's be like

00:27:22,560 --> 00:27:25,830
sweet I know where to find that code

00:27:24,030 --> 00:27:29,400
here's a copy of the class that you're

00:27:25,830 --> 00:27:32,460
after and then finally inside of your

00:27:29,400 --> 00:27:35,250
code you would access that service via

00:27:32,460 --> 00:27:36,690
the service container this is a one

00:27:35,250 --> 00:27:38,790
example of how you might do that the

00:27:36,690 --> 00:27:40,530
sort of globally asking the service

00:27:38,790 --> 00:27:43,680
container saying hey give me a copy of

00:27:40,530 --> 00:27:46,020
the service by name probably what you

00:27:43,680 --> 00:27:48,810
would more likely end up doing is using

00:27:46,020 --> 00:27:52,110
dependency injection so that the service

00:27:48,810 --> 00:27:54,630
gets injected into your controller

00:27:52,110 --> 00:27:55,210
that's displaying the page and this is

00:27:54,630 --> 00:27:57,419
part of

00:27:55,210 --> 00:28:00,010
that whole process of being able to

00:27:57,419 --> 00:28:02,049
allow things to be more decoupled so

00:28:00,010 --> 00:28:04,149
that they can be tested if you're

00:28:02,049 --> 00:28:06,190
injecting the service as a dependency

00:28:04,149 --> 00:28:08,919
into your class it makes it much easier

00:28:06,190 --> 00:28:11,080
for someone to say you know what in this

00:28:08,919 --> 00:28:13,570
particular context instead of injecting

00:28:11,080 --> 00:28:17,980
the full-blown Twitter API go ahead and

00:28:13,570 --> 00:28:19,570
just use my mock client instead this is

00:28:17,980 --> 00:28:23,740
a page just a bunch of links that's not

00:28:19,570 --> 00:28:25,059
that useful here but again you can

00:28:23,740 --> 00:28:26,950
download these slides and these links

00:28:25,059 --> 00:28:28,600
help provide more information about what

00:28:26,950 --> 00:28:31,419
services are available and how you can

00:28:28,600 --> 00:28:34,149
make use of them in your own code there

00:28:31,419 --> 00:28:36,730
is also a presentation today at 1pm

00:28:34,149 --> 00:28:38,169
that's going to talk about dependency

00:28:36,730 --> 00:28:41,799
injection that the title of the

00:28:38,169 --> 00:28:43,360
presentation is what is services and

00:28:41,799 --> 00:28:46,120
dependency injection and how does it

00:28:43,360 --> 00:28:47,260
help me if you're interested in this

00:28:46,120 --> 00:28:49,090
stuff that seems like would be a really

00:28:47,260 --> 00:28:51,190
good presentation to attend to get a

00:28:49,090 --> 00:28:53,950
better idea of how this aspect of

00:28:51,190 --> 00:28:56,200
extending Drupal will work there's also

00:28:53,950 --> 00:28:59,230
a presentation tomorrow at three

00:28:56,200 --> 00:29:02,140
forty-five titled 00 p is nothing to be

00:28:59,230 --> 00:29:04,919
afraid of which i was going to cover a

00:29:02,140 --> 00:29:07,240
lot of some of the basics of

00:29:04,919 --> 00:29:08,649
implementing interfaces and creating

00:29:07,240 --> 00:29:11,110
interfaces and how all of that works

00:29:08,649 --> 00:29:13,059
again a great thing to attend if this

00:29:11,110 --> 00:29:14,799
idea of creating services in dependency

00:29:13,059 --> 00:29:17,399
injection and that is a little like whoa

00:29:14,799 --> 00:29:19,690
I don't know what I'm getting into

00:29:17,399 --> 00:29:23,740
another way that you can extend Drupal

00:29:19,690 --> 00:29:25,960
is events events are used in instances

00:29:23,740 --> 00:29:28,149
where the Drupal system needs to be able

00:29:25,960 --> 00:29:30,429
to broadcast to anyone that might care

00:29:28,149 --> 00:29:35,649
this is what just happened feel free to

00:29:30,429 --> 00:29:38,140
do something right now an example of

00:29:35,649 --> 00:29:41,289
that might be something like when a user

00:29:38,140 --> 00:29:43,090
logs into the site drupal wants to be

00:29:41,289 --> 00:29:45,610
able to allow anyone that's interested

00:29:43,090 --> 00:29:48,370
to respond to the fact that a user just

00:29:45,610 --> 00:29:50,380
logged in now you're probably not making

00:29:48,370 --> 00:29:52,000
any changes to that you're not saying

00:29:50,380 --> 00:29:54,100
necessarily altering the fact that they

00:29:52,000 --> 00:29:55,779
logged in but you're responding and

00:29:54,100 --> 00:29:57,789
saying oh hey whenever somebody logs in

00:29:55,779 --> 00:30:01,289
I also want to do this other thing above

00:29:57,789 --> 00:30:01,289
and beyond what Drupal already does

00:30:02,590 --> 00:30:06,820
so basically events are a way of

00:30:04,880 --> 00:30:09,530
allowing you to react to different

00:30:06,820 --> 00:30:11,030
actions that take place within the

00:30:09,530 --> 00:30:14,299
application without making changes to

00:30:11,030 --> 00:30:16,850
itself events are new in Drupal 8 and

00:30:14,299 --> 00:30:19,549
they're actually sort of fairly limited

00:30:16,850 --> 00:30:22,340
at the moment there aren't a lot of them

00:30:19,549 --> 00:30:25,630
at the moment you will encounter them

00:30:22,340 --> 00:30:28,669
there are a handful of instances where

00:30:25,630 --> 00:30:30,049
events are being used to replace what

00:30:28,669 --> 00:30:34,549
you probably would have done in the past

00:30:30,049 --> 00:30:35,929
by just implementing a hook they the

00:30:34,549 --> 00:30:38,120
reason that they're being incorporated

00:30:35,929 --> 00:30:40,790
initially is because Drupal 8 builds a

00:30:38,120 --> 00:30:43,250
lot on Symphony components and Symphony

00:30:40,790 --> 00:30:45,650
makes heavy use of events in order to

00:30:43,250 --> 00:30:47,540
allow people to modify the way that

00:30:45,650 --> 00:30:49,010
different Symphony components work and

00:30:47,540 --> 00:30:51,200
then Drupal has started to implement

00:30:49,010 --> 00:30:53,540
some of this as well the places that

00:30:51,200 --> 00:30:57,770
I've most commonly seen them so far are

00:30:53,540 --> 00:30:59,900
in when Drupal is building a list of

00:30:57,770 --> 00:31:02,480
routes so the paths that someone could

00:30:59,900 --> 00:31:03,860
use in order to access content there are

00:31:02,480 --> 00:31:05,570
a couple of different events that are

00:31:03,860 --> 00:31:07,580
triggered during that process that you

00:31:05,570 --> 00:31:09,710
can respond to in order to change the

00:31:07,580 --> 00:31:12,919
list of routes or how they work they're

00:31:09,710 --> 00:31:15,320
also used a lot by the the migration API

00:31:12,919 --> 00:31:17,380
in order to allow you to do things at

00:31:15,320 --> 00:31:20,240
various different points during that

00:31:17,380 --> 00:31:23,929
extract transform load process that your

00:31:20,240 --> 00:31:26,600
migration goes through events are a

00:31:23,929 --> 00:31:29,570
really common pattern outside of Drupal

00:31:26,600 --> 00:31:31,220
in the larger 00 p world and i think

00:31:29,570 --> 00:31:33,470
part of what we'll we'll see is that

00:31:31,220 --> 00:31:35,210
over time more and more of the things

00:31:33,470 --> 00:31:37,070
that we're used to doing with hooks in

00:31:35,210 --> 00:31:42,320
Drupal will start to transition to being

00:31:37,070 --> 00:31:44,360
events when you talk about events you're

00:31:42,320 --> 00:31:47,059
going to do one of two things you're

00:31:44,360 --> 00:31:50,360
either going to subscribe to an event

00:31:47,059 --> 00:31:53,720
that someone else is broadcasting you're

00:31:50,360 --> 00:31:56,480
going to tell Drupal hey anytime someone

00:31:53,720 --> 00:31:58,549
performs this event let me know because

00:31:56,480 --> 00:32:00,350
I'd like to do something well at least

00:31:58,549 --> 00:32:01,730
I'd like to figure out if I'd like to do

00:32:00,350 --> 00:32:03,910
something I just want to know that this

00:32:01,730 --> 00:32:06,260
is happening and you do that by

00:32:03,910 --> 00:32:08,059
subscribing to an event you need to

00:32:06,260 --> 00:32:10,909
figure out what the name of the event is

00:32:08,059 --> 00:32:15,070
that you're going to subscribe to you

00:32:10,909 --> 00:32:18,519
need to inside of your service

00:32:15,070 --> 00:32:20,529
is that yml file in your module you need

00:32:18,519 --> 00:32:21,639
to provide a bit of metadata this is the

00:32:20,529 --> 00:32:25,210
part where you're basically telling

00:32:21,639 --> 00:32:27,490
Drupal hey whenever this event happens

00:32:25,210 --> 00:32:30,220
let me know and here's why I would like

00:32:27,490 --> 00:32:32,769
you to send the message to and then you

00:32:30,220 --> 00:32:34,750
need to provide the code that deals with

00:32:32,769 --> 00:32:35,980
getting that message so you you might

00:32:34,750 --> 00:32:38,649
have a class that looks something like

00:32:35,980 --> 00:32:42,279
this which has a couple of methods that

00:32:38,649 --> 00:32:43,990
say you know give me the data this event

00:32:42,279 --> 00:32:45,730
just happened call this method and give

00:32:43,990 --> 00:32:47,500
me the data and I can choose if I want

00:32:45,730 --> 00:32:51,700
to do anything with that information or

00:32:47,500 --> 00:32:54,700
not and so that's useful if what you're

00:32:51,700 --> 00:32:57,159
trying to do is respond to events

00:32:54,700 --> 00:32:58,809
provided by some other module or by

00:32:57,159 --> 00:33:01,330
Drupal core the other thing you might

00:32:58,809 --> 00:33:05,289
want to do is dispatch your own events

00:33:01,330 --> 00:33:09,039
so if the voting API module wanted to

00:33:05,289 --> 00:33:10,779
allow people to modify the way that

00:33:09,039 --> 00:33:12,669
things work or simply respond to the

00:33:10,779 --> 00:33:15,009
fact that someone had just cast a vote

00:33:12,669 --> 00:33:17,559
maybe the module would broadcast an

00:33:15,009 --> 00:33:19,690
event so anytime someone cast a vote it

00:33:17,559 --> 00:33:22,179
would say hey is there anybody that's

00:33:19,690 --> 00:33:24,220
subscribed to this particular event and

00:33:22,179 --> 00:33:26,039
if there is go ahead and notify them

00:33:24,220 --> 00:33:31,409
right now that that event just happened

00:33:26,039 --> 00:33:34,929
you can do that by creating a new class

00:33:31,409 --> 00:33:39,429
using the events namespace so this is

00:33:34,929 --> 00:33:41,080
the PSR for namespace pattern that you

00:33:39,429 --> 00:33:43,350
would need to use for implementing an

00:33:41,080 --> 00:33:43,350
event

00:33:47,120 --> 00:33:51,440
and you need to provide a couple of

00:33:49,280 --> 00:33:53,630
different classes the first one you need

00:33:51,440 --> 00:33:55,220
to provide is religious documentation so

00:33:53,630 --> 00:33:57,650
you provide a new class that's in this

00:33:55,220 --> 00:33:59,330
event namespace and if I remember

00:33:57,650 --> 00:34:01,580
correctly off the top my head it just

00:33:59,330 --> 00:34:03,710
has like one or maybe two different

00:34:01,580 --> 00:34:05,090
properties that are like this is the

00:34:03,710 --> 00:34:06,559
name of the event and it gives you an

00:34:05,090 --> 00:34:08,240
opportunity to say here's the

00:34:06,559 --> 00:34:11,990
documentation for what this event does

00:34:08,240 --> 00:34:16,629
for anybody that would like to know and

00:34:11,990 --> 00:34:19,810
then you need to add a new class to the

00:34:16,629 --> 00:34:19,810
excuse me

00:34:23,879 --> 00:34:29,259
you basically need to add another class

00:34:26,769 --> 00:34:31,719
that is an extension of the more adds to

00:34:29,259 --> 00:34:34,269
this the symphony event dispatcher so

00:34:31,719 --> 00:34:35,499
like I said the events that or the fact

00:34:34,269 --> 00:34:37,539
that Drupal is starting to make use of

00:34:35,499 --> 00:34:38,799
events started at least from the fact

00:34:37,539 --> 00:34:40,299
that we were making use of symphony

00:34:38,799 --> 00:34:42,549
components we're building off of

00:34:40,299 --> 00:34:44,799
symphonies event dispatcher we basically

00:34:42,549 --> 00:34:47,259
need to declare to that event dispatcher

00:34:44,799 --> 00:34:49,509
hey I've got events that I would like

00:34:47,259 --> 00:34:51,969
you to be able to know about so that I

00:34:49,509 --> 00:34:55,059
can broadcast them and then finally in

00:34:51,969 --> 00:34:57,129
your own code whenever you reach the

00:34:55,059 --> 00:34:59,589
point in the flow of that code where for

00:34:57,129 --> 00:35:02,529
example someone just submitted a new

00:34:59,589 --> 00:35:04,809
vote or just logged in you need to tell

00:35:02,529 --> 00:35:06,369
the event dispatcher that that just

00:35:04,809 --> 00:35:08,319
happened go ahead and send out the

00:35:06,369 --> 00:35:09,939
message to everyone that's listening you

00:35:08,319 --> 00:35:11,920
can also at that time provide some

00:35:09,939 --> 00:35:13,959
additional context there's basically you

00:35:11,920 --> 00:35:16,180
can say not only do I want you to notify

00:35:13,959 --> 00:35:17,619
everybody here's the message that I

00:35:16,180 --> 00:35:21,339
would like you to put in the envelope

00:35:17,619 --> 00:35:25,089
when you send it again some links to

00:35:21,339 --> 00:35:28,179
resources on responding to events I this

00:35:25,089 --> 00:35:30,549
the second one on this list is in one of

00:35:28,179 --> 00:35:32,019
my favorite it's from the symphony

00:35:30,549 --> 00:35:34,890
documentation and I feel like it does a

00:35:32,019 --> 00:35:37,959
really great job of not only explaining

00:35:34,890 --> 00:35:39,849
how to how to dispatch or subscribe to

00:35:37,959 --> 00:35:45,400
events but just kind of the principle of

00:35:39,849 --> 00:35:47,109
events in general and there's a session

00:35:45,400 --> 00:35:49,630
about the symphony event dispatcher

00:35:47,109 --> 00:35:51,189
today at two-fifteen p.m. so if you want

00:35:49,630 --> 00:35:53,170
to know more about the innards of how

00:35:51,189 --> 00:35:57,689
dispatching events in Drupal 8 works

00:35:53,170 --> 00:35:59,799
that would be a great one to attend and

00:35:57,689 --> 00:36:01,900
finally we got to talk about hooks

00:35:59,799 --> 00:36:06,369
because without hooks we wouldn't really

00:36:01,900 --> 00:36:08,439
have Drupal hooks are not new hooks have

00:36:06,369 --> 00:36:10,089
been around since basically forever I

00:36:08,439 --> 00:36:11,559
tried to look this up for this

00:36:10,089 --> 00:36:15,009
presentation to see what hooks were

00:36:11,559 --> 00:36:16,929
first added to Drupal core and like bike

00:36:15,009 --> 00:36:18,849
like repping through the law history and

00:36:16,929 --> 00:36:21,039
all of that I ultimately decided that is

00:36:18,849 --> 00:36:24,099
probably sometime around March or April

00:36:21,039 --> 00:36:26,349
of 2001 is when the concept of hooks

00:36:24,099 --> 00:36:28,209
were introduced and then I looked at the

00:36:26,349 --> 00:36:30,910
code that's in like whatever version of

00:36:28,209 --> 00:36:32,439
Drupal is from 2001 that was like the

00:36:30,910 --> 00:36:34,239
implementation of the hooks and I

00:36:32,439 --> 00:36:36,760
compared it to the code that we use to

00:36:34,239 --> 00:36:38,800
like invoke in dispatch hooks today

00:36:36,760 --> 00:36:41,500
and it's like basically the same thing

00:36:38,800 --> 00:36:44,470
which is kind of crazy to me but I think

00:36:41,500 --> 00:36:46,210
it also helps give a sense of like just

00:36:44,470 --> 00:36:48,070
the fact that like hooks work really

00:36:46,210 --> 00:36:52,120
well and they've served us really well

00:36:48,070 --> 00:36:54,310
for a long time in previous versions of

00:36:52,120 --> 00:36:55,960
Drupal everything that we've just talked

00:36:54,310 --> 00:36:58,120
about would have been handled with the

00:36:55,960 --> 00:37:00,330
hook providing new functionality

00:36:58,120 --> 00:37:02,620
altering existing functionality

00:37:00,330 --> 00:37:04,450
enhancing Drupal all of that was done

00:37:02,620 --> 00:37:07,120
through hooks and now we have things

00:37:04,450 --> 00:37:09,940
like plugins services and events that

00:37:07,120 --> 00:37:12,820
accomplish similar things in ways that

00:37:09,940 --> 00:37:15,550
are hopefully a bit more easier to

00:37:12,820 --> 00:37:22,150
understand easier to document and make

00:37:15,550 --> 00:37:25,030
use of the so hooks work by basically

00:37:22,150 --> 00:37:28,210
providing a function in your module that

00:37:25,030 --> 00:37:30,010
follows a specific naming convention as

00:37:28,210 --> 00:37:32,110
long as you name your function the right

00:37:30,010 --> 00:37:34,330
way if your module is enabled Drupal

00:37:32,110 --> 00:37:36,490
will call that function and this is

00:37:34,330 --> 00:37:38,860
that's what this code does it basically

00:37:36,490 --> 00:37:40,780
says if the function exists called the

00:37:38,860 --> 00:37:44,140
function and like the major difference

00:37:40,780 --> 00:37:46,780
between 2001 and 2016 is now there's

00:37:44,140 --> 00:37:51,850
like 13 layers of try-catch statements

00:37:46,780 --> 00:37:54,670
before it calls the function hooks are

00:37:51,850 --> 00:37:57,010
awesome for situations in Drupal where

00:37:54,670 --> 00:37:59,020
you need to alter some existing data and

00:37:57,010 --> 00:38:00,930
this is probably well your income where

00:37:59,020 --> 00:38:03,670
you will encounter them the most as a

00:38:00,930 --> 00:38:06,280
module developer things like for example

00:38:03,670 --> 00:38:08,470
Drupal has just gathered a list of all

00:38:06,280 --> 00:38:10,240
of the block plugins and it would like

00:38:08,470 --> 00:38:12,040
to give you a chance to make changes to

00:38:10,240 --> 00:38:15,190
that list before it does something with

00:38:12,040 --> 00:38:17,380
it or Drupal has just used the form API

00:38:15,190 --> 00:38:19,630
service to build a form that it's going

00:38:17,380 --> 00:38:22,240
to display on the page and wants to give

00:38:19,630 --> 00:38:24,520
anyone that it was participating the

00:38:22,240 --> 00:38:27,790
opportunity to make changes to that form

00:38:24,520 --> 00:38:31,750
definition before it's displayed hooks

00:38:27,790 --> 00:38:33,580
are super fast it's just simply a call

00:38:31,750 --> 00:38:35,260
the check to see if a function exists

00:38:33,580 --> 00:38:36,790
and if it does it calls it where are

00:38:35,260 --> 00:38:40,270
some of the other things like the event

00:38:36,790 --> 00:38:41,740
dispatcher are I don't mean I don't want

00:38:40,270 --> 00:38:43,510
to be like wow it's super slow don't

00:38:41,740 --> 00:38:45,040
ever use it but it's certainly a little

00:38:43,510 --> 00:38:47,110
bit slower it has a bit more overhead

00:38:45,040 --> 00:38:49,160
Drupal provides a lot of functionality

00:38:47,110 --> 00:38:50,660
to make that faster

00:38:49,160 --> 00:38:52,490
one of the things one of the reasons

00:38:50,660 --> 00:38:54,559
that we still see a lot of hooks in

00:38:52,490 --> 00:38:56,210
Drupal 8 despite the introduction of

00:38:54,559 --> 00:39:00,740
events is because they're just really

00:38:56,210 --> 00:39:02,599
fast and there's also just an element of

00:39:00,740 --> 00:39:04,369
like they exist because at the time that

00:39:02,599 --> 00:39:07,099
they were added to Drupal core there

00:39:04,369 --> 00:39:10,299
wasn't really a good way to do these

00:39:07,099 --> 00:39:13,760
other things there wasn't PHP's

00:39:10,299 --> 00:39:16,130
object-oriented syntax infrastructure

00:39:13,760 --> 00:39:18,020
was not nearly as good as it as it is

00:39:16,130 --> 00:39:20,180
today and didn't really allow us to do

00:39:18,020 --> 00:39:26,000
things like dependency injection with

00:39:20,180 --> 00:39:27,920
services plugins and so forth I don't

00:39:26,000 --> 00:39:30,859
actually know of any presentation this

00:39:27,920 --> 00:39:32,450
week that is going to cover hooks but I

00:39:30,859 --> 00:39:34,430
bet if you went and looked up every

00:39:32,450 --> 00:39:37,990
single previous drupalcon you could

00:39:34,430 --> 00:39:40,700
probably find a presentation about hooks

00:39:37,990 --> 00:39:42,020
examples of hooks the one that you're

00:39:40,700 --> 00:39:44,660
going to encounter first and use the

00:39:42,020 --> 00:39:46,880
most is definitely hook form alter this

00:39:44,660 --> 00:39:54,920
is allowing you to make changes to any

00:39:46,880 --> 00:39:56,240
form that's displayed within Drupal the

00:39:54,920 --> 00:39:58,160
other time that I see it used a lot

00:39:56,240 --> 00:40:01,549
still is anytime that you're trying to

00:39:58,160 --> 00:40:03,770
make changes to lists of data that

00:40:01,549 --> 00:40:09,160
Drupal is already aggregated from some

00:40:03,770 --> 00:40:09,160
other system like plugins or a service

00:40:09,549 --> 00:40:15,020
the hook for alter one is particularly

00:40:12,619 --> 00:40:16,220
interesting I think that again over time

00:40:15,020 --> 00:40:18,829
we're going to see more and more of

00:40:16,220 --> 00:40:20,839
Drupal move towards using events just

00:40:18,829 --> 00:40:22,549
because it's a more widely used pattern

00:40:20,839 --> 00:40:25,400
and the rest of the PHP world and just

00:40:22,549 --> 00:40:26,599
programming in general it's a bit more

00:40:25,400 --> 00:40:30,890
if you were at the keynote this morning

00:40:26,599 --> 00:40:32,390
dreese talked about one of the desires

00:40:30,890 --> 00:40:34,640
that came out of the results of this

00:40:32,390 --> 00:40:36,440
survey that he did was people really

00:40:34,640 --> 00:40:38,569
felt strongly that Drupal needed to move

00:40:36,440 --> 00:40:40,609
even more towards a fully object

00:40:38,569 --> 00:40:43,430
oriented architecture and and hooks are

00:40:40,609 --> 00:40:45,380
kind of like the like exact opposite of

00:40:43,430 --> 00:40:48,799
that they're specially named functions

00:40:45,380 --> 00:40:50,779
that live in a file that like they all

00:40:48,799 --> 00:40:53,839
live in the same file it's not very well

00:40:50,779 --> 00:40:55,819
organized by man they're fast but one of

00:40:53,839 --> 00:40:57,500
the reasons that like we still have a

00:40:55,819 --> 00:40:59,329
lot of them is during the Drupal 8

00:40:57,500 --> 00:41:01,040
development cycle there was work done to

00:40:59,329 --> 00:41:03,800
try try to convert

00:41:01,040 --> 00:41:05,840
everything to events but it became

00:41:03,800 --> 00:41:08,090
pretty quickly apparent that the hook

00:41:05,840 --> 00:41:11,120
for Moltres specifically was going to be

00:41:08,090 --> 00:41:13,430
quite a challenge to work as an event

00:41:11,120 --> 00:41:15,350
and for it to be really as performant as

00:41:13,430 --> 00:41:17,210
it is currently with just calling this

00:41:15,350 --> 00:41:18,620
function but again I think that over

00:41:17,210 --> 00:41:21,050
time that will get worked out and we'll

00:41:18,620 --> 00:41:22,670
see a lot of this move towards events if

00:41:21,050 --> 00:41:24,980
you want to implement a hook it looks

00:41:22,670 --> 00:41:26,210
like this determine the name of the hook

00:41:24,980 --> 00:41:28,280
you want to implement which basically

00:41:26,210 --> 00:41:31,250
means go to API drupal.org and type hook

00:41:28,280 --> 00:41:33,170
underscore and then wait for the list to

00:41:31,250 --> 00:41:34,700
populate and then find one that sounds

00:41:33,170 --> 00:41:37,340
like it resembles what you want to do

00:41:34,700 --> 00:41:38,780
and then go read the documentation for

00:41:37,340 --> 00:41:40,220
it and discover that that's not actually

00:41:38,780 --> 00:41:44,840
the one you want so go find the other

00:41:40,220 --> 00:41:46,760
one in your dot module file you create a

00:41:44,840 --> 00:41:50,210
new function where you replace the word

00:41:46,760 --> 00:41:51,800
hook in the the name of the hook with

00:41:50,210 --> 00:41:53,270
the name of your module and then you

00:41:51,800 --> 00:41:55,370
write your code inside of that function

00:41:53,270 --> 00:41:57,950
and that's it as long as your module is

00:41:55,370 --> 00:42:00,170
enabled whenever Drupal needs to execute

00:41:57,950 --> 00:42:02,660
or invoke that hook it will check if the

00:42:00,170 --> 00:42:03,860
function exists and calls it one of the

00:42:02,660 --> 00:42:05,480
things you want to make sure this is

00:42:03,860 --> 00:42:08,050
actually true of all of these things we

00:42:05,480 --> 00:42:10,460
talked about but hooks in particular

00:42:08,050 --> 00:42:12,620
after you add a new hook to your module

00:42:10,460 --> 00:42:14,510
file you should make sure you clear

00:42:12,620 --> 00:42:18,830
Drupal's cash there are a lot of hooks

00:42:14,510 --> 00:42:21,050
that the fact that it exists is cached

00:42:18,830 --> 00:42:24,920
so the Drupal doesn't have to look it up

00:42:21,050 --> 00:42:27,050
in the same way every single time that's

00:42:24,920 --> 00:42:29,450
true of pretty much all of the ways that

00:42:27,050 --> 00:42:31,370
we extend or alter Drupal if it feels

00:42:29,450 --> 00:42:33,260
like your functionality isn't working or

00:42:31,370 --> 00:42:38,120
isn't being added try clearing the cache

00:42:33,260 --> 00:42:40,880
and see if it's working then if you

00:42:38,120 --> 00:42:42,590
would like to invoke hooks from within

00:42:40,880 --> 00:42:44,780
your module the pattern for doing that

00:42:42,590 --> 00:42:48,530
is this you need to pick a unique name

00:42:44,780 --> 00:42:50,330
for your hook I again recommend probably

00:42:48,530 --> 00:42:52,880
using the name of your module so it

00:42:50,330 --> 00:42:56,150
might be hook underscore name of my

00:42:52,880 --> 00:42:57,800
module underscore name of my hook to try

00:42:56,150 --> 00:42:59,000
to ensure that it's unique this is

00:42:57,800 --> 00:43:01,790
actually one of the things that's great

00:42:59,000 --> 00:43:04,430
about things like plugins or services or

00:43:01,790 --> 00:43:06,440
events is we're no longer running into

00:43:04,430 --> 00:43:07,760
the same namespace collision problem

00:43:06,440 --> 00:43:10,370
that we have with hooks where you have

00:43:07,760 --> 00:43:11,420
to be really careful about the way that

00:43:10,370 --> 00:43:12,339
you name things so that you're not

00:43:11,420 --> 00:43:15,279
accidentally

00:43:12,339 --> 00:43:17,999
implementing like node hook node altar

00:43:15,279 --> 00:43:21,819
in your node underscore form module

00:43:17,999 --> 00:43:25,239
things like that and then you use the

00:43:21,819 --> 00:43:29,680
module handler service in Drupal core in

00:43:25,239 --> 00:43:32,920
order to invoke that hook if you want to

00:43:29,680 --> 00:43:34,359
learn more about hooks API triple org

00:43:32,920 --> 00:43:36,430
has a list of all of the hooks that are

00:43:34,359 --> 00:43:38,410
available in Drupal core and you can

00:43:36,430 --> 00:43:40,569
also for any module that provides them

00:43:38,410 --> 00:43:46,029
they should provide documentation of the

00:43:40,569 --> 00:43:51,640
hook in a file of the name of the module

00:43:46,029 --> 00:43:53,729
api PHP I talked about this a little and

00:43:51,640 --> 00:43:56,170
I'm going to bring it up again because

00:43:53,729 --> 00:43:58,599
not only are we looking at a scenario

00:43:56,170 --> 00:44:00,279
where likely in the future Drupal is

00:43:58,599 --> 00:44:02,529
going to move more and more towards the

00:44:00,279 --> 00:44:05,109
use of events in a way from hooks but

00:44:02,529 --> 00:44:07,569
it's also like as a module developer how

00:44:05,109 --> 00:44:12,519
do I decide should my module invoke

00:44:07,569 --> 00:44:14,890
hooks or dispatch events personally I

00:44:12,519 --> 00:44:17,079
think events are the way of the future

00:44:14,890 --> 00:44:18,849
and that again we're going to move more

00:44:17,079 --> 00:44:21,489
and more in that direction and I would

00:44:18,849 --> 00:44:24,940
advocate for probably in most cases if

00:44:21,489 --> 00:44:27,130
you are writing a module dispatching

00:44:24,940 --> 00:44:29,559
events from that module documenting

00:44:27,130 --> 00:44:33,119
those events I think that it'll help

00:44:29,559 --> 00:44:33,119
make your code a bit more future proof

00:44:36,660 --> 00:44:42,249
but I also don't think hooks are going

00:44:39,430 --> 00:44:43,960
to go away anytime soon necessarily I

00:44:42,249 --> 00:44:46,239
it's certainly going to be for the

00:44:43,960 --> 00:44:49,599
lifetime of Drupal 8 we will continue to

00:44:46,239 --> 00:44:51,549
have hooks maybe by drupal 9 you might

00:44:49,599 --> 00:44:53,499
see a scenario in which everything all

00:44:51,549 --> 00:44:55,809
of the hooks as we know them at least

00:44:53,499 --> 00:44:59,229
are removed maybe we'll finally remove

00:44:55,809 --> 00:45:03,009
that code from april of 2001 but

00:44:59,229 --> 00:45:06,519
probably not the scenario that i come up

00:45:03,009 --> 00:45:10,390
with in which i would probably use hooks

00:45:06,519 --> 00:45:13,049
inside of my own module is kind of if my

00:45:10,390 --> 00:45:15,729
module deals a lot with forms

00:45:13,049 --> 00:45:17,200
particularly because of hook form altar

00:45:15,729 --> 00:45:19,329
and the fact that that's kind of your

00:45:17,200 --> 00:45:22,269
primary way of interacting with drupal's

00:45:19,329 --> 00:45:23,710
form API as a module in order to alter

00:45:22,269 --> 00:45:26,530
someone else's code

00:45:23,710 --> 00:45:27,849
I kind of feel like if I was doing a

00:45:26,530 --> 00:45:30,130
bunch of hook for Moltres and

00:45:27,849 --> 00:45:32,170
interacting with making use of the forum

00:45:30,130 --> 00:45:34,180
API I might stick with using hooks

00:45:32,170 --> 00:45:36,820
primarily because I think it might get

00:45:34,180 --> 00:45:38,500
confusing if my module was like like

00:45:36,820 --> 00:45:40,390
half the things that did were hooks and

00:45:38,500 --> 00:45:41,710
half of them were events I'm now you end

00:45:40,390 --> 00:45:43,030
up in the same scenario that we are here

00:45:41,710 --> 00:45:44,440
it's like is that a hook or is it an

00:45:43,030 --> 00:45:46,890
event and it's like well them it's

00:45:44,440 --> 00:45:50,280
probably a hook but it might be an event

00:45:46,890 --> 00:45:52,720
mostly I would look for a consistency

00:45:50,280 --> 00:45:54,790
but either way I don't think hooks are

00:45:52,720 --> 00:45:56,440
going to go away anytime soon so I

00:45:54,790 --> 00:46:02,020
certainly wouldn't say you should never

00:45:56,440 --> 00:46:04,390
use hooks to sort of tie this all

00:46:02,020 --> 00:46:06,339
together but this is like how I might

00:46:04,390 --> 00:46:08,560
use each of these different things in

00:46:06,339 --> 00:46:10,930
the process of writing some hypothetical

00:46:08,560 --> 00:46:13,180
module so i'm going to write a module

00:46:10,930 --> 00:46:15,599
that offers the ability to take a video

00:46:13,180 --> 00:46:18,820
file and encode it to different formats

00:46:15,599 --> 00:46:21,520
i might want to do something like have

00:46:18,820 --> 00:46:23,109
my module allow for an end user to

00:46:21,520 --> 00:46:25,450
choose from one of a bunch of different

00:46:23,109 --> 00:46:29,800
encoding utilities it might be something

00:46:25,450 --> 00:46:31,359
like encoding com or ffmpeg or Zen coder

00:46:29,800 --> 00:46:33,339
there's a lot of different tools that

00:46:31,359 --> 00:46:35,290
could be used to process the file so I

00:46:33,339 --> 00:46:37,869
would create a new plug-in type that was

00:46:35,290 --> 00:46:39,609
I don't know encoding utility and maybe

00:46:37,869 --> 00:46:41,770
provide one or two of those with my

00:46:39,609 --> 00:46:43,990
module but this opens up the possibility

00:46:41,770 --> 00:46:47,520
for any any one of you to come along and

00:46:43,990 --> 00:46:50,140
say you know what you should really use

00:46:47,520 --> 00:46:54,550
some other encoding thing those are the

00:46:50,140 --> 00:46:56,680
three that I know so I would create a

00:46:54,550 --> 00:46:58,480
new plug-in type there I would implement

00:46:56,680 --> 00:47:00,640
that at least once so that you had some

00:46:58,480 --> 00:47:02,530
functionality with the module itself and

00:47:00,640 --> 00:47:04,660
I would provide an interface so that

00:47:02,530 --> 00:47:07,300
anybody else that wanted to could create

00:47:04,660 --> 00:47:09,670
a new encoding utility I would also

00:47:07,300 --> 00:47:11,410
probably then create a new service the

00:47:09,670 --> 00:47:16,119
responsibility of this service would be

00:47:11,410 --> 00:47:18,550
say to take a file and encode it and

00:47:16,119 --> 00:47:20,290
give me the output the benefit again of

00:47:18,550 --> 00:47:22,390
it being that these services within

00:47:20,290 --> 00:47:24,700
interfaces I don't really need to know

00:47:22,390 --> 00:47:26,859
everything about how it works inside I

00:47:24,700 --> 00:47:28,950
just need to know I can give it a file

00:47:26,859 --> 00:47:32,020
it will do whatever it needs to do to

00:47:28,950 --> 00:47:33,060
figure out what type of file it is what

00:47:32,020 --> 00:47:35,790
plugin

00:47:33,060 --> 00:47:38,580
the user has selected to use as an

00:47:35,790 --> 00:47:40,170
encoder how to encode it get the file

00:47:38,580 --> 00:47:42,330
back and ultimately I'm just handed the

00:47:40,170 --> 00:47:44,460
newly encoded version of it without

00:47:42,330 --> 00:47:49,520
really carrying what happened inside of

00:47:44,460 --> 00:47:52,920
that factory or black box I might also

00:47:49,520 --> 00:47:56,930
implement another service for implement

00:47:52,920 --> 00:48:00,450
irak ting with the various encoder

00:47:56,930 --> 00:48:03,990
utilities so a lot of times what you'll

00:48:00,450 --> 00:48:06,840
see is there's a plug-in type which just

00:48:03,990 --> 00:48:09,060
allows for that definition of the

00:48:06,840 --> 00:48:10,830
functionality to Drupal and allows for

00:48:09,060 --> 00:48:12,600
an administrator to choose from a list

00:48:10,830 --> 00:48:14,910
of functionality but then the plug-in

00:48:12,600 --> 00:48:17,360
might just be a loose wrapper around a

00:48:14,910 --> 00:48:19,770
service which does the bulk of the work

00:48:17,360 --> 00:48:21,300
in this case that might be a service

00:48:19,770 --> 00:48:24,510
that interacts with for example the

00:48:21,300 --> 00:48:27,150
encoding com API so now I've got an

00:48:24,510 --> 00:48:29,100
encoding com client that can deal with

00:48:27,150 --> 00:48:31,440
sending files to and getting him back

00:48:29,100 --> 00:48:34,890
but it's also something because it's a

00:48:31,440 --> 00:48:36,990
service i can easily mock that api

00:48:34,890 --> 00:48:39,000
client and write tests so i could say

00:48:36,990 --> 00:48:41,280
you know I actually don't want to send

00:48:39,000 --> 00:48:43,080
this to gigabyte file and wait for 15

00:48:41,280 --> 00:48:44,520
minutes and spend twenty dollars to

00:48:43,080 --> 00:48:45,870
encode the file I just want you to

00:48:44,520 --> 00:48:47,340
pretend like you did it and tell me that

00:48:45,870 --> 00:48:50,430
it worked or didn't work so i can write

00:48:47,340 --> 00:48:53,820
tests I would probably dispatch some

00:48:50,430 --> 00:48:58,020
events as well an example of that would

00:48:53,820 --> 00:49:00,090
be right before starting the process of

00:48:58,020 --> 00:49:01,980
encoding a file I would say hey I'm

00:49:00,090 --> 00:49:04,260
about to encode a file does anybody want

00:49:01,980 --> 00:49:07,290
to make changes to that file or change

00:49:04,260 --> 00:49:09,750
the parameters that I'm using to pass to

00:49:07,290 --> 00:49:11,850
the encoder and I would also probably

00:49:09,750 --> 00:49:13,530
trigger another event immediately after

00:49:11,850 --> 00:49:16,050
it happened I would say hey i just got a

00:49:13,530 --> 00:49:18,450
file back from encoding here's a copy of

00:49:16,050 --> 00:49:20,760
that newly encoded file in case you want

00:49:18,450 --> 00:49:23,280
to do anything like maybe upload it to

00:49:20,760 --> 00:49:26,240
youtube or post it on our site or

00:49:23,280 --> 00:49:26,240
whatever the case may be

00:49:29,290 --> 00:49:35,540
and then finally you might inside of all

00:49:32,420 --> 00:49:37,010
of that code your plug-in types that

00:49:35,540 --> 00:49:38,569
work with it encoder probably do

00:49:37,010 --> 00:49:40,849
something like have configuration

00:49:38,569 --> 00:49:42,680
options for you know the different

00:49:40,849 --> 00:49:44,210
parameters that the encoder takes and

00:49:42,680 --> 00:49:47,000
how it should deal with the file I would

00:49:44,210 --> 00:49:49,010
probably want to provide a way for other

00:49:47,000 --> 00:49:51,440
modules to make changes to the

00:49:49,010 --> 00:49:53,150
configuration being passed to the

00:49:51,440 --> 00:49:54,440
encoder before that happens and that

00:49:53,150 --> 00:49:57,140
would probably be a good candidate for

00:49:54,440 --> 00:49:58,339
using an altar hook so you you created

00:49:57,140 --> 00:49:59,839
an array that is all of the

00:49:58,339 --> 00:50:01,700
configuration options you're going to

00:49:59,839 --> 00:50:03,200
use for that particular file right

00:50:01,700 --> 00:50:04,760
before you encode you said is anybody

00:50:03,200 --> 00:50:09,589
want to change the configuration before

00:50:04,760 --> 00:50:11,030
I start this task and and that's our

00:50:09,589 --> 00:50:12,200
module and an example of how we might

00:50:11,030 --> 00:50:17,660
make use of all of those different

00:50:12,200 --> 00:50:19,940
things within our own module as a quick

00:50:17,660 --> 00:50:21,890
recap of the things that we covered we

00:50:19,940 --> 00:50:24,349
talked about plugins which are primarily

00:50:21,890 --> 00:50:26,660
a way of providing new units of

00:50:24,349 --> 00:50:29,180
interchangeable functionality to Drupal

00:50:26,660 --> 00:50:31,040
this the best example and I think

00:50:29,180 --> 00:50:34,730
easiest to conceptualize being blocks

00:50:31,040 --> 00:50:36,740
but also used in almost any case where

00:50:34,730 --> 00:50:40,640
drupal needs to get a list of things

00:50:36,740 --> 00:50:42,920
that can do X and provide an end user

00:50:40,640 --> 00:50:45,829
with the option to choose one or more

00:50:42,920 --> 00:50:47,839
items from that list we talked about

00:50:45,829 --> 00:50:49,670
services which are basically a

00:50:47,839 --> 00:50:52,400
replacement for things that used to be

00:50:49,670 --> 00:50:54,140
global functions encapsulated a bunch of

00:50:52,400 --> 00:50:56,299
functionality like for example the

00:50:54,140 --> 00:50:59,799
utility for accessing a database or

00:50:56,299 --> 00:51:02,720
encoding a video into a single class

00:50:59,799 --> 00:51:05,809
with so you've got that discrete unit of

00:51:02,720 --> 00:51:08,299
functionality providing an interface for

00:51:05,809 --> 00:51:10,670
the functionality and describing it for

00:51:08,299 --> 00:51:13,520
drupal service container so that those

00:51:10,670 --> 00:51:16,700
services can easily be mocked or swapped

00:51:13,520 --> 00:51:18,410
out for testing or just you know swapped

00:51:16,700 --> 00:51:20,750
out with a different database service if

00:51:18,410 --> 00:51:24,020
you rather use postgrads instead of my

00:51:20,750 --> 00:51:28,280
sequel we talked about events which are

00:51:24,020 --> 00:51:29,750
a way of allowing code that's executing

00:51:28,280 --> 00:51:32,540
within the context of Drupal to

00:51:29,750 --> 00:51:35,030
communicate with any unknown number of

00:51:32,540 --> 00:51:37,460
potential listen listeners what's going

00:51:35,030 --> 00:51:39,200
on saying things like hey i just got a

00:51:37,460 --> 00:51:39,690
file back from the encoding service do

00:51:39,200 --> 00:51:42,170
you want to do

00:51:39,690 --> 00:51:45,030
anything about it events work by

00:51:42,170 --> 00:51:47,310
allowing code to either dispatch events

00:51:45,030 --> 00:51:50,130
to say this is what I'm doing right now

00:51:47,310 --> 00:51:53,250
if you'd like to react to that or to

00:51:50,130 --> 00:51:55,470
subscribe to events dispatched by other

00:51:53,250 --> 00:51:58,200
pieces of code to say whenever that

00:51:55,470 --> 00:52:01,550
happens I'd like to participate as well

00:51:58,200 --> 00:52:04,980
and finally hooks sort of the the

00:52:01,550 --> 00:52:08,490
ongoing workhorse of Drupal hooks are

00:52:04,980 --> 00:52:11,490
especially named functions that in some

00:52:08,490 --> 00:52:14,220
sense do all of these same things they

00:52:11,490 --> 00:52:16,349
allow you to add new functionality alter

00:52:14,220 --> 00:52:20,550
existing functionality I'm and provide

00:52:16,349 --> 00:52:22,800
services primarily where I think you'll

00:52:20,550 --> 00:52:24,030
see them used initially at least when

00:52:22,800 --> 00:52:25,980
you're getting into module development

00:52:24,030 --> 00:52:27,660
is for working with the form API in

00:52:25,980 --> 00:52:29,700
altering the different forms that

00:52:27,660 --> 00:52:35,910
modules in Drupal or other modules are

00:52:29,700 --> 00:52:39,240
providing it's basically anything that

00:52:35,910 --> 00:52:44,849
isn't a plug-in a service or an event is

00:52:39,240 --> 00:52:48,390
probably a hook and that's what I know

00:52:44,849 --> 00:52:50,550
about writing modules for Drupal 8 i'm

00:52:48,390 --> 00:52:52,290
happy to answer questions now or if

00:52:50,550 --> 00:52:55,319
you've got questions later you can tweet

00:52:52,290 --> 00:52:57,510
them at me and it would be awesome see

00:52:55,319 --> 00:53:00,329
how good i did at providing the link for

00:52:57,510 --> 00:53:01,890
you to go give me feedback maybe it

00:53:00,329 --> 00:53:03,329
could provide feedback like it'd be nice

00:53:01,890 --> 00:53:05,609
if you would put a link to the page

00:53:03,329 --> 00:53:08,000
where i could provide feedback thanks

00:53:05,609 --> 00:53:08,000
for coming

00:53:12,520 --> 00:53:15,820
and and we've got a couple of minutes if

00:53:14,380 --> 00:53:19,950
anyone's got questions I'm happy to

00:53:15,820 --> 00:53:19,950
attempt to answer them yeah

00:53:33,880 --> 00:53:39,640
sure so the question is our events

00:53:36,600 --> 00:53:41,800
synchronous or asynchronous and so when

00:53:39,640 --> 00:53:44,170
you trigger any vent do you have to if

00:53:41,800 --> 00:53:47,590
there's five listeners do I have to wait

00:53:44,170 --> 00:53:53,380
for each one to finish before I can do

00:53:47,590 --> 00:53:57,850
my thing it's PHP so there it's

00:53:53,380 --> 00:53:59,380
basically they're synchronous so but and

00:53:57,850 --> 00:54:04,510
then the other part of the question was

00:53:59,380 --> 00:54:06,370
if if you send something off to be

00:54:04,510 --> 00:54:12,990
encoded would you have to wait until it

00:54:06,370 --> 00:54:12,990
came back to trigger the event yeah

00:54:20,680 --> 00:54:26,420
yeah I think so the question is like if

00:54:24,020 --> 00:54:29,120
I sent something to be encoded and it

00:54:26,420 --> 00:54:33,260
takes 15 minutes to happen do I have to

00:54:29,120 --> 00:54:36,350
wait 15 minutes to respond and and the

00:54:33,260 --> 00:54:38,000
answer is yes and probably likely the

00:54:36,350 --> 00:54:41,230
situation you're looking at it in that

00:54:38,000 --> 00:54:44,750
scenario is like your code would trigger

00:54:41,230 --> 00:54:47,930
ffmpeg to start the encoding and then

00:54:44,750 --> 00:54:51,560
you would also tell ffmpeg let me know

00:54:47,930 --> 00:54:54,110
when you're done call this PHP method

00:54:51,560 --> 00:54:57,110
when you're done and so like I could

00:54:54,110 --> 00:54:59,210
kind of dispatch to the encoder and then

00:54:57,110 --> 00:55:01,130
continue on doing whatever it was I was

00:54:59,210 --> 00:55:04,190
doing in my code and I would expect that

00:55:01,130 --> 00:55:05,720
the encoder would call back to and

00:55:04,190 --> 00:55:08,030
basically create a whole new request

00:55:05,720 --> 00:55:13,120
that says hey the thing is done does

00:55:08,030 --> 00:55:13,120
that make sense okay cool the question I

00:55:14,920 --> 00:55:18,910
can repeat it if it doesn't work

00:55:31,230 --> 00:55:34,040
mm-hmm

00:55:35,750 --> 00:55:38,470
sure

00:55:50,220 --> 00:55:57,510
yeah sure so the question is in Drupal

00:55:54,780 --> 00:56:00,560
8.1 the migrated ap I switched from

00:55:57,510 --> 00:56:02,900
using configuration entities to

00:56:00,560 --> 00:56:04,920
implementing a migration as a plug-in

00:56:02,900 --> 00:56:07,800
and kind of what's the difference

00:56:04,920 --> 00:56:09,210
between the configuration entity and

00:56:07,800 --> 00:56:12,480
plug-in or why would you choose one or

00:56:09,210 --> 00:56:15,859
the other and then why did migrate make

00:56:12,480 --> 00:56:18,210
that choice I think that like

00:56:15,859 --> 00:56:21,119
fundamentally plugins and configuration

00:56:18,210 --> 00:56:24,570
entities perform two totally different

00:56:21,119 --> 00:56:25,760
tasks a configuration entity is like it

00:56:24,570 --> 00:56:30,000
the idea is that it provides

00:56:25,760 --> 00:56:33,660
configuration data so something like the

00:56:30,000 --> 00:56:36,630
settings that you would send to ffmpeg

00:56:33,660 --> 00:56:40,380
for encoding like that's configuration a

00:56:36,630 --> 00:56:42,840
plug-in provides new functionality to

00:56:40,380 --> 00:56:46,740
generally require some execution of a

00:56:42,840 --> 00:56:50,010
code path in order to work the the

00:56:46,740 --> 00:56:52,830
migrated one is like you said it's

00:56:50,010 --> 00:56:54,720
tricky and I don't necessarily fall

00:56:52,830 --> 00:56:56,250
strongly on one side or the other of

00:56:54,720 --> 00:56:59,369
whether they should be configuration

00:56:56,250 --> 00:57:01,140
entities or plugins and a lot of really

00:56:59,369 --> 00:57:03,060
smart people made some decisions about

00:57:01,140 --> 00:57:05,130
that and now it's so they're currently

00:57:03,060 --> 00:57:07,800
plugins I think they were originally

00:57:05,130 --> 00:57:09,390
written as configuration entities

00:57:07,800 --> 00:57:13,710
because the idea being it would be nice

00:57:09,390 --> 00:57:15,359
if you could like what a migration it

00:57:13,710 --> 00:57:16,890
and the part of it that changed is

00:57:15,359 --> 00:57:19,830
basically the thing that does the field

00:57:16,890 --> 00:57:22,109
mapping where you're saying this field

00:57:19,830 --> 00:57:25,619
and the database over here is the title

00:57:22,109 --> 00:57:28,470
of the node over here and it was sort of

00:57:25,619 --> 00:57:30,480
this weird like is that configuration

00:57:28,470 --> 00:57:31,589
because it would be nice if it was

00:57:30,480 --> 00:57:33,540
because then you could for example

00:57:31,589 --> 00:57:35,490
provide a user interface that allowed

00:57:33,540 --> 00:57:38,040
someone to create that mapping you could

00:57:35,490 --> 00:57:39,570
save it as configuration persist it so

00:57:38,040 --> 00:57:43,349
they could come back later and edit it

00:57:39,570 --> 00:57:45,750
and make changes or is that a plug-in

00:57:43,349 --> 00:57:48,480
because it requires adding new

00:57:45,750 --> 00:57:53,609
functionality through a code execution

00:57:48,480 --> 00:57:57,560
path therein lies the real question is

00:57:53,609 --> 00:57:59,540
like which one should it be I think that

00:57:57,560 --> 00:58:03,530
the

00:57:59,540 --> 00:58:08,390
it becoming plugins in Drupal 8.1 has a

00:58:03,530 --> 00:58:11,690
lot to do with that question of like are

00:58:08,390 --> 00:58:12,710
they actually configuration is like is

00:58:11,690 --> 00:58:15,950
the migration paths actually

00:58:12,710 --> 00:58:19,760
configuration and then also concerns

00:58:15,950 --> 00:58:21,680
about like polluting the the data store

00:58:19,760 --> 00:58:24,140
with a bunch of information that was

00:58:21,680 --> 00:58:26,300
related to the migration that later on

00:58:24,140 --> 00:58:27,770
you're like we're done migrating we

00:58:26,300 --> 00:58:31,160
don't need all of this configuration

00:58:27,770 --> 00:58:33,170
anymore in some of that to be totally

00:58:31,160 --> 00:58:35,170
honest I don't know exactly why it

00:58:33,170 --> 00:58:37,520
switched and it was one of those like I

00:58:35,170 --> 00:58:39,830
guess it changed and now I have to learn

00:58:37,520 --> 00:58:42,230
a new thing there's a really really long

00:58:39,830 --> 00:58:44,950
thread about it on drupal.org that kind

00:58:42,230 --> 00:58:47,810
of discusses the pros and cons of

00:58:44,950 --> 00:58:51,440
plugins versus configuration in that

00:58:47,810 --> 00:58:54,620
instance I also think that in your own

00:58:51,440 --> 00:58:56,600
code that's probably it's probably in

00:58:54,620 --> 00:58:58,640
most cases going to be a pretty clear

00:58:56,600 --> 00:59:00,980
delineation between things that are

00:58:58,640 --> 00:59:02,540
configuration like for example settings

00:59:00,980 --> 00:59:05,920
about how you're going to optimize

00:59:02,540 --> 00:59:10,670
images versus things that are plugins

00:59:05,920 --> 00:59:13,370
like for example a class that runs a

00:59:10,670 --> 00:59:16,160
bunch of PHP code that you know goes off

00:59:13,370 --> 00:59:18,110
to get information from amazon.com and

00:59:16,160 --> 00:59:24,280
store it locally as part of a field for

00:59:18,110 --> 00:59:24,280
matter so that help at all okay cool

00:59:29,210 --> 00:59:37,500
yep yeah so the question is should I

00:59:35,970 --> 00:59:40,260
extend the class or should i implement

00:59:37,500 --> 00:59:45,300
the interface and how do I know which

00:59:40,260 --> 00:59:47,790
one to do i would say it depends on what

00:59:45,300 --> 00:59:49,770
the class that you're extending does and

00:59:47,790 --> 00:59:54,690
whether or not the thing that it does is

00:59:49,770 --> 00:59:57,780
useful to you and so if if you are

00:59:54,690 --> 00:59:59,430
extending the class but really don't

00:59:57,780 --> 01:00:01,680
care about any of the things that the

00:59:59,430 --> 01:00:03,990
base class is providing any of that sort

01:00:01,680 --> 01:00:05,340
of prepackaged functionality go ahead

01:00:03,990 --> 01:00:08,550
and just implement the interface and

01:00:05,340 --> 01:00:11,280
skip extending that base class where

01:00:08,550 --> 01:00:14,070
it's nice is when a base class provides

01:00:11,280 --> 01:00:16,080
a bunch of like generic functionality

01:00:14,070 --> 01:00:19,260
that you would probably make use of a

01:00:16,080 --> 01:00:21,900
common example would be block plugins

01:00:19,260 --> 01:00:24,030
you probably are going to want access to

01:00:21,900 --> 01:00:26,400
things like the service container

01:00:24,030 --> 01:00:28,170
injected into your block plugin and

01:00:26,400 --> 01:00:29,580
you're going to want to use drupal's

01:00:28,170 --> 01:00:31,470
translation system because you're going

01:00:29,580 --> 01:00:33,630
to have strings in that block plug-in

01:00:31,470 --> 01:00:35,430
and if you extend the base class those

01:00:33,630 --> 01:00:37,500
things are already made available for

01:00:35,430 --> 01:00:39,960
you but if your block doesn't have any

01:00:37,500 --> 01:00:41,480
user interface strings and doesn't use

01:00:39,960 --> 01:00:47,250
the service container sure you could

01:00:41,480 --> 01:00:49,550
implement the interface it yes

01:00:47,250 --> 01:00:49,550
absolutely

01:01:01,319 --> 01:01:06,730
so they I mean the concern there would

01:01:03,609 --> 01:01:08,559
be like what happens if the person who

01:01:06,730 --> 01:01:11,230
maintains the module that provides the

01:01:08,559 --> 01:01:15,250
base class changes what the base class

01:01:11,230 --> 01:01:16,359
does I mean you could say the same thing

01:01:15,250 --> 01:01:18,040
about what if they change the interface

01:01:16,359 --> 01:01:20,290
that you're implementing it's a little

01:01:18,040 --> 01:01:21,760
bit of if you're working to extend

01:01:20,290 --> 01:01:23,980
someone else's code you're kind of

01:01:21,760 --> 01:01:25,089
always at their mercy a little bit

01:01:23,980 --> 01:01:28,750
because they could change things

01:01:25,089 --> 01:01:31,359
whenever they want to extending is

01:01:28,750 --> 01:01:33,819
almost always good because the reason

01:01:31,359 --> 01:01:36,280
that the base class exists is generally

01:01:33,819 --> 01:01:39,670
to provide like the eighty-five percent

01:01:36,280 --> 01:01:41,740
use case and now you just need to do you

01:01:39,670 --> 01:01:44,619
know fifteen percent of the work if it

01:01:41,740 --> 01:01:45,550
doesn't provide that then skip it right

01:01:44,619 --> 01:01:46,960
because now you've got like a

01:01:45,550 --> 01:01:48,640
performance problem where it's like

01:01:46,960 --> 01:01:50,230
you're you're loading and youth

01:01:48,640 --> 01:01:53,579
executing all this code you're not

01:01:50,230 --> 01:01:53,579
actually doing anything with

01:01:57,619 --> 01:02:04,820
or aventinus etch

01:02:02,370 --> 01:02:04,820
perhaps

01:02:05,210 --> 01:02:11,180
yep

01:02:08,150 --> 01:02:13,460
this getting my head around this

01:02:11,180 --> 01:02:15,349
yeah total and that's that's the

01:02:13,460 --> 01:02:17,240
weirdness of events and hooks is this

01:02:15,349 --> 01:02:19,640
kind of like hooks could do the same

01:02:17,240 --> 01:02:21,530
thing you could totally use a hook to

01:02:19,640 --> 01:02:23,059
say hey someone just logged in right

01:02:21,530 --> 01:02:24,650
like that's what Drupal 7 does hey a

01:02:23,059 --> 01:02:27,490
node was just saved hey someone just

01:02:24,650 --> 01:02:29,990
logged in do you want to do anything and

01:02:27,490 --> 01:02:31,309
and and so that's a little bit of the

01:02:29,990 --> 01:02:34,550
weirdness of trying to figure out should

01:02:31,309 --> 01:02:38,119
I use an event or should I use a hook my

01:02:34,550 --> 01:02:40,490
rule of thumb at the moment is I favor

01:02:38,119 --> 01:02:42,079
using hooks especially if it's a

01:02:40,490 --> 01:02:44,569
scenario where really I'm just kind of

01:02:42,079 --> 01:02:46,520
trying to announce this happened and

01:02:44,569 --> 01:02:51,890
provide context right because you can

01:02:46,520 --> 01:02:53,839
like hook or events are like events you

01:02:51,890 --> 01:02:56,240
can send a message you can say this just

01:02:53,839 --> 01:02:57,920
happened send an envelope with a bunch

01:02:56,240 --> 01:02:59,329
of data in the envelope and then the

01:02:57,920 --> 01:03:02,150
receiving code can do whatever it wants

01:02:59,329 --> 01:03:04,460
but it never gets a response back like

01:03:02,150 --> 01:03:08,390
the event doesn't say hey I finished

01:03:04,460 --> 01:03:11,210
here's some new things hooks handle that

01:03:08,390 --> 01:03:12,589
scenario currently we're so the form

01:03:11,210 --> 01:03:14,839
alter is a great one where you say

01:03:12,589 --> 01:03:16,250
here's the form do you want to make any

01:03:14,839 --> 01:03:18,290
changes but I need it back when you're

01:03:16,250 --> 01:03:20,329
done because I still need to display it

01:03:18,290 --> 01:03:21,589
or configuration for the video encoder

01:03:20,329 --> 01:03:23,930
it's kind of like here's the

01:03:21,589 --> 01:03:26,059
configuration we came up with but i

01:03:23,930 --> 01:03:32,049
still i need your modified version back

01:03:26,059 --> 01:03:32,049
afterwards yeah cool awesome yeah

01:03:37,180 --> 01:03:40,180
so

01:03:40,970 --> 01:03:43,970
that

01:03:49,000 --> 01:03:54,100
i leverage existing

01:03:52,010 --> 01:03:54,100
I

01:04:57,380 --> 01:05:00,160
essentially

01:05:22,810 --> 01:05:26,580
yeah so so for example

01:06:02,770 --> 01:06:05,770
president

01:06:15,890 --> 01:06:18,890
sure

01:06:20,440 --> 01:06:22,710
like

01:06:41,200 --> 01:06:44,800
there's something there

01:06:45,300 --> 01:06:48,320

YouTube URL: https://www.youtube.com/watch?v=tMM-I70ksQA


