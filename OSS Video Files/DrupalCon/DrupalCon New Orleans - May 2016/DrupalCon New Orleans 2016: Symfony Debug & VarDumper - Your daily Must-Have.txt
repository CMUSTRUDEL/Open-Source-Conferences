Title: DrupalCon New Orleans 2016: Symfony Debug & VarDumper - Your daily Must-Have
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	Are you confortable enough with your debugging environment? In this conference, I will show you how Symfony Debug & VarDumper components can help you get out of any situations. The first one is responsable for catching the most out of any failing PHP engine behavior. From autoloading to PHP notices, from exceptions to fatal errors, it helps with any context where you can possibly end up with. The second one extracts the state of the most simple up to the most complex PHP variables. It's able to represent any deeply nested and recursive PHP data structures; the kind of you're dealing with daily, and more. Combined, they may become preferred daily debuging tool. Let's see how!
Captions: 
	00:00:00,000 --> 00:00:05,609
hi I'm Ryan I just did a presentation

00:00:01,740 --> 00:00:06,810
before this i am not talking again but i

00:00:05,609 --> 00:00:08,970
like being in front of a microphone as

00:00:06,810 --> 00:00:10,920
you probably can tell so i'm going to

00:00:08,970 --> 00:00:12,809
introduce even though he's also going to

00:00:10,920 --> 00:00:15,990
introduce himself afterwards all spoiler

00:00:12,809 --> 00:00:18,690
a good friend of mine symphony core

00:00:15,990 --> 00:00:20,910
contributor probably like the number to

00:00:18,690 --> 00:00:22,199
Symphony guy so if you if you need

00:00:20,910 --> 00:00:23,670
something done in symphony if you don't

00:00:22,199 --> 00:00:26,640
like something in symphony if you guys

00:00:23,670 --> 00:00:28,320
barricade the doors after the talk you

00:00:26,640 --> 00:00:29,880
can sort of force him to do whatever you

00:00:28,320 --> 00:00:31,439
want he's also probably one of the

00:00:29,880 --> 00:00:32,640
smartest developers I've met I'm really

00:00:31,439 --> 00:00:34,649
lucky that we have in the symphony

00:00:32,640 --> 00:00:36,510
community he does the stuff that I can't

00:00:34,649 --> 00:00:39,600
figure out how to do and then I do the

00:00:36,510 --> 00:00:41,460
easy stuff like documentation so yeah so

00:00:39,600 --> 00:00:44,000
here is Nicholas cracka so now i'll

00:00:41,460 --> 00:00:44,000
leave it to him

00:00:57,579 --> 00:01:07,780
hello everyone Thank You Ryan um so my

00:01:05,229 --> 00:01:10,899
name is Nikolai grekes I'm Symphony core

00:01:07,780 --> 00:01:14,770
team member since two years I work also

00:01:10,899 --> 00:01:17,289
for black fire as CTO and I do open

00:01:14,770 --> 00:01:18,549
source since yours so maybe you know

00:01:17,289 --> 00:01:22,450
this quiz which is a JavaScript

00:01:18,549 --> 00:01:27,250
magnifier I wrote in 2003 patchwork

00:01:22,450 --> 00:01:30,100
utf-8 also I which is now today renamed

00:01:27,250 --> 00:01:32,950
and needed in a new project which is

00:01:30,100 --> 00:01:39,659
Symphony polyfill that provides many

00:01:32,950 --> 00:01:42,610
polyfills for PHP I'm also known by my

00:01:39,659 --> 00:01:44,440
co-workers as someone who wrote who

00:01:42,610 --> 00:01:48,549
write some cryptic code so an example is

00:01:44,440 --> 00:01:51,429
here raffle fun it's unicode so Patrick

00:01:48,549 --> 00:01:53,679
utf-8 unicode mixed with PHP as you can

00:01:51,429 --> 00:01:58,470
see it's were able in PHP to write

00:01:53,679 --> 00:02:01,209
single single character variables using

00:01:58,470 --> 00:02:03,190
combining unicode characters so this is

00:02:01,209 --> 00:02:11,140
a dollar with a combining car it's legal

00:02:03,190 --> 00:02:13,239
PHP you can run it puffin um so quickly

00:02:11,140 --> 00:02:15,640
this is a screenshot of black file black

00:02:13,239 --> 00:02:18,040
feather profiler and that's the only

00:02:15,640 --> 00:02:21,099
thing i'll tell you about life another

00:02:18,040 --> 00:02:24,910
topic today today we're going to talk

00:02:21,099 --> 00:02:28,450
about debugging fluency the goal today

00:02:24,910 --> 00:02:31,690
is to impor you into using tools so that

00:02:28,450 --> 00:02:33,879
you won't get this white page again and

00:02:31,690 --> 00:02:36,879
so that you can know how to get out of

00:02:33,879 --> 00:02:40,569
this white page and so the fatal error

00:02:36,879 --> 00:02:46,290
and any other night while debugging you

00:02:40,569 --> 00:02:49,750
might end up in too so what is debugging

00:02:46,290 --> 00:02:53,230
why dumping is linked it to debugging of

00:02:49,750 --> 00:02:56,950
course and the first thing is we need

00:02:53,230 --> 00:03:01,060
tools for fixing trivial errors trivial

00:02:56,950 --> 00:03:05,500
means that can be detected by the PHP

00:03:01,060 --> 00:03:10,330
engine that's a trivial arrow then when

00:03:05,500 --> 00:03:11,150
PHP says that everything is right you

00:03:10,330 --> 00:03:13,730
have a behavior

00:03:11,150 --> 00:03:17,870
them might be wrong and very often it's

00:03:13,730 --> 00:03:20,269
not right at the first version so you

00:03:17,870 --> 00:03:23,120
need tools to figure out what the

00:03:20,269 --> 00:03:25,849
behavior and how to fix it and of course

00:03:23,120 --> 00:03:28,519
this starts with understanding what's

00:03:25,849 --> 00:03:35,180
going on which means representing States

00:03:28,519 --> 00:03:38,900
because we deal with states in the first

00:03:35,180 --> 00:03:43,420
part i'd like to remind you how PHP

00:03:38,900 --> 00:03:48,950
works and how arrows work in PHP so

00:03:43,420 --> 00:03:51,139
errors in PHP are have yes several

00:03:48,950 --> 00:03:53,389
levels one is the warning level the

00:03:51,139 --> 00:03:56,239
notice level and deprecation these are

00:03:53,389 --> 00:04:01,579
kind of notices I'm sure you already saw

00:03:56,239 --> 00:04:04,760
many of them some undefined index some f

00:04:01,579 --> 00:04:09,430
open with permission file system issue

00:04:04,760 --> 00:04:12,950
and these are not important issues that

00:04:09,430 --> 00:04:14,930
low and they don't break the PHP online

00:04:12,950 --> 00:04:18,799
you just get under this and you can

00:04:14,930 --> 00:04:21,530
continue but usually it may be an issue

00:04:18,799 --> 00:04:24,590
that you have to fix and PHP is telling

00:04:21,530 --> 00:04:27,199
this might be something wrong then we

00:04:24,590 --> 00:04:29,060
have an intermediate level which is that

00:04:27,199 --> 00:04:31,520
which are the user errors and the

00:04:29,060 --> 00:04:35,870
recoverable errors I'll tell you just

00:04:31,520 --> 00:04:38,930
after why they are special then we have

00:04:35,870 --> 00:04:41,570
the fatal errors so the past ill you

00:04:38,930 --> 00:04:44,479
know that I'm sure the in defined

00:04:41,570 --> 00:04:48,470
function and n defined class and define

00:04:44,479 --> 00:04:50,599
method so whenever you have geo typo you

00:04:48,470 --> 00:04:53,780
miss some use statement at the beginning

00:04:50,599 --> 00:04:56,750
of your file a type error so type error

00:04:53,780 --> 00:04:58,610
is when you call a function with an

00:04:56,750 --> 00:05:00,409
array but the function is expecting some

00:04:58,610 --> 00:05:04,460
object you get this kind of fatal error

00:05:00,409 --> 00:05:07,520
and the last one is the most horrible

00:05:04,460 --> 00:05:09,800
one it's the out of memory error and in

00:05:07,520 --> 00:05:13,099
this case it's really really hard to

00:05:09,800 --> 00:05:15,380
debug things and etc because I'm sure

00:05:13,099 --> 00:05:22,669
you'll find many ways to trigger bugs

00:05:15,380 --> 00:05:24,830
there and so PHP triggers this kind of

00:05:22,669 --> 00:05:29,030
errors and PHP

00:05:24,830 --> 00:05:31,790
gives you gives us a hook which is set

00:05:29,030 --> 00:05:33,650
error handler with a call back if you

00:05:31,790 --> 00:05:36,590
register a call back using this function

00:05:33,650 --> 00:05:39,140
you will get the call by call whenever

00:05:36,590 --> 00:05:41,900
any of this function of these notices

00:05:39,140 --> 00:05:44,140
are triggered any of these means the

00:05:41,900 --> 00:05:48,980
first two warnings notices deprecation

00:05:44,140 --> 00:05:51,050
user errors and recoverable errors these

00:05:48,980 --> 00:05:54,400
are the only kind of errors that you can

00:05:51,050 --> 00:05:58,100
catch with the set or under in PHP and

00:05:54,400 --> 00:06:01,640
it's really useful because you can just

00:05:58,100 --> 00:06:03,950
plug what you want at this place so what

00:06:01,640 --> 00:06:09,530
people do usually what Drupal do what

00:06:03,950 --> 00:06:11,300
symphony does is logging because after

00:06:09,530 --> 00:06:16,520
that you can just read the log file and

00:06:11,300 --> 00:06:19,700
say okay I have something to fix the

00:06:16,520 --> 00:06:22,880
function is also able to sniff to read

00:06:19,700 --> 00:06:26,390
the ero reporting level at the current

00:06:22,880 --> 00:06:29,510
moment of the cult triggering whole time

00:06:26,390 --> 00:06:31,880
this means that you can detect and the

00:06:29,510 --> 00:06:33,890
callback can detect whenever a function

00:06:31,880 --> 00:06:36,260
is called and a trigger notice is

00:06:33,890 --> 00:06:39,470
triggered i'm using the silencing

00:06:36,260 --> 00:06:43,430
operator so you know maybe you've read

00:06:39,470 --> 00:06:47,000
about this at a thing which changes

00:06:43,430 --> 00:06:49,250
locally the error reporting level 20 so

00:06:47,000 --> 00:06:51,950
if you call error reporting into the

00:06:49,250 --> 00:06:54,500
callback function you can I read its

00:06:51,950 --> 00:06:57,620
return value which if it's zero most

00:06:54,500 --> 00:07:01,010
function most call back just ignore and

00:06:57,620 --> 00:07:03,200
return right now but when it's not zero

00:07:01,010 --> 00:07:04,940
it means it's not silence so you can do

00:07:03,200 --> 00:07:07,610
something with that at least the

00:07:04,940 --> 00:07:11,210
developer wants something to want to

00:07:07,610 --> 00:07:15,290
know about that user errors and

00:07:11,210 --> 00:07:19,760
recoverable errors are fatal when you do

00:07:15,290 --> 00:07:22,760
not plug a custom error handler so

00:07:19,760 --> 00:07:29,810
that's the behavior of PHP but if you

00:07:22,760 --> 00:07:32,900
plug one you can do something else then

00:07:29,810 --> 00:07:37,009
we have the other kind of error of the

00:07:32,900 --> 00:07:39,860
fatal errors and PHP allows us also

00:07:37,009 --> 00:07:44,119
Oh to have some information but then

00:07:39,860 --> 00:07:46,189
code against coaching this so pass

00:07:44,119 --> 00:07:51,830
arrows in define class type errors out

00:07:46,189 --> 00:07:54,740
of memories situation I'll trigger the

00:07:51,830 --> 00:07:58,159
end of the PHP enzyme and by the end of

00:07:54,740 --> 00:08:01,129
the PHP and shine it means PHP goes

00:07:58,159 --> 00:08:03,499
straight to the shutdown function so we

00:08:01,129 --> 00:08:06,469
still have user learn code that can be

00:08:03,499 --> 00:08:08,330
run at this stage and whenever you

00:08:06,469 --> 00:08:10,629
register certain functions from call

00:08:08,330 --> 00:08:14,180
back this callback will be called if

00:08:10,629 --> 00:08:15,919
fatal error is happening during your

00:08:14,180 --> 00:08:18,050
script execution of course you can do

00:08:15,919 --> 00:08:21,860
many thing in children functions

00:08:18,050 --> 00:08:24,529
cleaning many things but it's also hack

00:08:21,860 --> 00:08:27,319
and it's really great that PHP is so

00:08:24,529 --> 00:08:29,120
hackable that you can get fatal errors

00:08:27,319 --> 00:08:34,399
and still deal with them and do

00:08:29,120 --> 00:08:37,639
something so typically what this kind of

00:08:34,399 --> 00:08:40,190
call back shot on callback do is calling

00:08:37,639 --> 00:08:43,039
error get last which is a function that

00:08:40,190 --> 00:08:47,110
returns an array that contains the error

00:08:43,039 --> 00:08:51,350
message LF I the line and the level of

00:08:47,110 --> 00:08:56,930
the last error in this case of course

00:08:51,350 --> 00:08:59,630
the fatal error then we have another

00:08:56,930 --> 00:09:01,519
kind of errors which are exceptions of

00:08:59,630 --> 00:09:04,399
course exceptions have a very different

00:09:01,519 --> 00:09:07,339
handling mechanism and it's the the

00:09:04,399 --> 00:09:10,630
try-catch block so try catch some

00:09:07,339 --> 00:09:13,459
exception and do something with that

00:09:10,630 --> 00:09:17,000
usually use urlencode deal with them and

00:09:13,459 --> 00:09:21,380
if they are expecting and if I able to

00:09:17,000 --> 00:09:23,839
deal with not usually not every

00:09:21,380 --> 00:09:25,569
exception i mean the the slash exception

00:09:23,839 --> 00:09:28,329
in the root namespace but usually

00:09:25,569 --> 00:09:31,490
libraries did whether with their own

00:09:28,329 --> 00:09:33,310
namespace of exceptions and are able to

00:09:31,490 --> 00:09:37,160
cash and deal with them properly

00:09:33,310 --> 00:09:41,420
whenever a try-catch block is missing or

00:09:37,160 --> 00:09:45,260
a try-catch block is not catching some

00:09:41,420 --> 00:09:49,519
kind of exception and and whenever this

00:09:45,260 --> 00:09:53,999
exception good pops up to the root

00:09:49,519 --> 00:09:56,039
so out of the call stack the search the

00:09:53,999 --> 00:09:58,410
some exception handler can be called and

00:09:56,039 --> 00:10:00,989
it has to be registered before that with

00:09:58,410 --> 00:10:04,349
set exception handle so it's kind of set

00:10:00,989 --> 00:10:06,569
error handler so but in this case it's a

00:10:04,349 --> 00:10:11,009
callback that will be called whenever an

00:10:06,569 --> 00:10:13,470
exception is triggered and is not cut so

00:10:11,009 --> 00:10:16,439
of course the signature of this callback

00:10:13,470 --> 00:10:21,659
is just a function that takes one

00:10:16,439 --> 00:10:26,459
argument which is the exception with PHP

00:10:21,659 --> 00:10:30,599
7 we have new kind of exceptions which

00:10:26,459 --> 00:10:33,659
are throw balls and arrow so it's a new

00:10:30,599 --> 00:10:38,959
kind of object and throwable is an

00:10:33,659 --> 00:10:43,529
interface and error is the class and

00:10:38,959 --> 00:10:45,619
exception the class is an instance of

00:10:43,529 --> 00:10:47,909
implements the thurible exception error

00:10:45,619 --> 00:10:51,689
implements also the thurible exception

00:10:47,909 --> 00:10:55,559
but an error is not an exception which

00:10:51,689 --> 00:10:58,949
means that code that use the previous

00:10:55,559 --> 00:11:04,470
one this kind of code won't touch the

00:10:58,949 --> 00:11:06,959
arrow the arrow I will get out of the

00:11:04,470 --> 00:11:09,600
try-catch block and Bob and if you don't

00:11:06,959 --> 00:11:12,029
deal with them and most God do not deal

00:11:09,600 --> 00:11:16,739
with them because most cod are not PHP 7

00:11:12,029 --> 00:11:18,539
aware then the arrow will get up to the

00:11:16,739 --> 00:11:21,119
exception handler this time it's the

00:11:18,539 --> 00:11:23,220
same name is the same call back so the

00:11:21,119 --> 00:11:25,409
same callback will be called both for

00:11:23,220 --> 00:11:28,019
errors and exception at least it could

00:11:25,409 --> 00:11:29,189
be renamed set throwable handler but

00:11:28,019 --> 00:11:33,619
because of backward compatibility

00:11:29,189 --> 00:11:37,919
concern they did not do that a song

00:11:33,619 --> 00:11:40,229
called are used to have a tie pins on

00:11:37,919 --> 00:11:42,899
the exception argument of the callback

00:11:40,229 --> 00:11:45,509
of course PHP 7 broke that's because if

00:11:42,899 --> 00:11:47,549
you type in with backslash exception and

00:11:45,509 --> 00:11:53,549
you get an error there you'll get a

00:11:47,549 --> 00:11:55,739
fatal error okay so another kind of

00:11:53,549 --> 00:11:59,279
error and now we are in the daily

00:11:55,739 --> 00:12:01,580
process I'm sure daily maybe not daily

00:11:59,279 --> 00:12:06,890
but very often at least

00:12:01,580 --> 00:12:09,680
me we do typos and we do character case

00:12:06,890 --> 00:12:12,320
mistakes so when you write your class

00:12:09,680 --> 00:12:17,020
name you miss the uppercase C the

00:12:12,320 --> 00:12:22,100
uppercase first letter so these are

00:12:17,020 --> 00:12:26,210
usual errors that can be worked with in

00:12:22,100 --> 00:12:28,790
the autoloader so for that a trick we

00:12:26,210 --> 00:12:32,690
use and I will present you is to

00:12:28,790 --> 00:12:35,120
decorate all autoloader all functions

00:12:32,690 --> 00:12:39,230
that load your classes and by decorating

00:12:35,120 --> 00:12:43,640
them we can add checks and checks that

00:12:39,230 --> 00:12:46,760
verify that everything is good and I'll

00:12:43,640 --> 00:12:49,970
show you you'll see an example is this

00:12:46,760 --> 00:12:52,460
one so the last one is you can get a

00:12:49,970 --> 00:12:58,370
message saying calling you calling and

00:12:52,460 --> 00:13:00,760
define method foo and by looking at the

00:12:58,370 --> 00:13:04,280
message you can know that the class is

00:13:00,760 --> 00:13:08,240
bar so the message says calling and

00:13:04,280 --> 00:13:11,900
define method bar on class chromatid

00:13:08,240 --> 00:13:15,080
full glass bar and in this case we can

00:13:11,900 --> 00:13:17,510
hook into this and say okay let's

00:13:15,080 --> 00:13:20,330
inspect by reflection the world class

00:13:17,510 --> 00:13:25,430
and look at all the existing method and

00:13:20,330 --> 00:13:28,670
by levenshtein distance say ok the this

00:13:25,430 --> 00:13:31,510
must be a typo and the likely good

00:13:28,670 --> 00:13:34,400
method is this one and then you can have

00:13:31,510 --> 00:13:36,650
very user friendly friendly error

00:13:34,400 --> 00:13:42,800
message suggesting the correct version

00:13:36,650 --> 00:13:45,500
of the method in this case so that's for

00:13:42,800 --> 00:13:48,980
general error life cycle in PHP now

00:13:45,500 --> 00:13:51,800
let's see quickly what happens in let's

00:13:48,980 --> 00:13:54,350
start with Drupal so in Drupal by

00:13:51,800 --> 00:13:58,460
default notices PHP notices and PHP

00:13:54,350 --> 00:14:00,440
warnings are just log the error handler

00:13:58,460 --> 00:14:02,300
and the exception under if you look at

00:14:00,440 --> 00:14:05,440
their implementation they just called

00:14:02,300 --> 00:14:08,140
the logger that is inside of Drupal so

00:14:05,440 --> 00:14:11,210
by looking at the log you'll see just

00:14:08,140 --> 00:14:15,850
the error under the notices warning that

00:14:11,210 --> 00:14:18,259
happened and core exception

00:14:15,850 --> 00:14:21,620
trigger the cannon that exception even

00:14:18,259 --> 00:14:23,930
even so this means that the core of

00:14:21,620 --> 00:14:26,089
Drupal and in fact the core of the

00:14:23,930 --> 00:14:28,370
symphony kernel has a try-catch block

00:14:26,089 --> 00:14:31,730
and the try-catch catches exceptions and

00:14:28,370 --> 00:14:33,860
this exception is forwarded to an

00:14:31,730 --> 00:14:36,379
exception to the event dispatcher and

00:14:33,860 --> 00:14:39,740
the event dispatcher triggers this

00:14:36,379 --> 00:14:42,800
criminal exception event and I think the

00:14:39,740 --> 00:14:45,949
default is to cast the exception to a

00:14:42,800 --> 00:14:48,620
string so just displaying its message

00:14:45,949 --> 00:14:52,040
and the stack trace and then return the

00:14:48,620 --> 00:14:55,430
response with this body contents so that

00:14:52,040 --> 00:14:57,529
you have I'm sure seen this page which

00:14:55,430 --> 00:15:02,959
is quite white with the exception

00:14:57,529 --> 00:15:06,170
message and the stack trace behind in

00:15:02,959 --> 00:15:09,889
Symphony as so also in Drupal the PHP 7

00:15:06,170 --> 00:15:14,810
error throw balls are not catched by

00:15:09,889 --> 00:15:17,750
caught by the kernel class it's not we

00:15:14,810 --> 00:15:20,660
don't deal with them in symphony so they

00:15:17,750 --> 00:15:24,319
end up calling the set exception handler

00:15:20,660 --> 00:15:30,920
call back and and the default one is

00:15:24,319 --> 00:15:35,470
calling the lager same as before in

00:15:30,920 --> 00:15:35,470
Symphony web cannot different default

00:15:36,069 --> 00:15:41,630
notices and warnings are converted to

00:15:38,870 --> 00:15:44,660
exceptions this means that if you use

00:15:41,630 --> 00:15:47,540
some undefined variable in your Symphony

00:15:44,660 --> 00:15:50,120
code you'll get an exception so you will

00:15:47,540 --> 00:15:53,000
have to fix it to continue developing

00:15:50,120 --> 00:15:55,490
your controller or anything in Drupal

00:15:53,000 --> 00:15:59,120
it's not the case and so it means you

00:15:55,490 --> 00:16:02,389
can have undefined index and define

00:15:59,120 --> 00:16:04,579
variables things like that and PHP can

00:16:02,389 --> 00:16:08,059
deal with that and it won't tell you

00:16:04,579 --> 00:16:10,430
anything except in the log and execution

00:16:08,059 --> 00:16:14,540
will continue so that's another way to

00:16:10,430 --> 00:16:16,629
develop uncut exceptional trigger the

00:16:14,540 --> 00:16:21,920
kernel exception event that the same

00:16:16,629 --> 00:16:25,449
wiring system PHP seven arrows same

00:16:21,920 --> 00:16:27,290
thing and those difference because

00:16:25,449 --> 00:16:29,870
whenever

00:16:27,290 --> 00:16:33,649
and good exceptions end up in the error

00:16:29,870 --> 00:16:36,470
handler in the exception and then they

00:16:33,649 --> 00:16:39,380
are reinjected into the kernel which is

00:16:36,470 --> 00:16:42,230
something drupal does not right now but

00:16:39,380 --> 00:16:47,120
by having this we are airborne symphony

00:16:42,230 --> 00:16:49,759
to take fatal errors and deal with them

00:16:47,120 --> 00:16:51,769
as if they were exceptions which is

00:16:49,759 --> 00:16:54,620
really useful because we can then reuse

00:16:51,769 --> 00:16:57,949
all the nice displaying tools that we

00:16:54,620 --> 00:17:00,800
have for exceptions tools and logging

00:16:57,949 --> 00:17:04,990
and we have about clogging we have

00:17:00,800 --> 00:17:09,620
another option which is a to log all

00:17:04,990 --> 00:17:12,709
errors even the silenced one because

00:17:09,620 --> 00:17:14,059
it's really useful to know what's

00:17:12,709 --> 00:17:16,520
happening just in your application and

00:17:14,059 --> 00:17:19,549
just because some developer added an ad

00:17:16,520 --> 00:17:20,870
seen before some f 0 20 call or

00:17:19,549 --> 00:17:22,910
something like that doesn't mean that

00:17:20,870 --> 00:17:24,980
there is anything to look at there and

00:17:22,910 --> 00:17:28,189
maybe the word you're looking for is

00:17:24,980 --> 00:17:30,980
just silenced by that so what we do is

00:17:28,189 --> 00:17:32,240
we log it of course we can trigger an

00:17:30,980 --> 00:17:34,790
exception we don't want to break the

00:17:32,240 --> 00:17:36,860
code at this stage but if you look at

00:17:34,790 --> 00:17:39,610
those logs you can have more information

00:17:36,860 --> 00:17:45,559
and you have full information in fact

00:17:39,610 --> 00:17:48,110
with these settings okay so symphony as

00:17:45,559 --> 00:17:50,419
you know has several components one of

00:17:48,110 --> 00:17:53,480
them is the debug component the debug

00:17:50,419 --> 00:17:55,429
component is already in Drupal hate but

00:17:53,480 --> 00:17:57,169
it's not used it's already in duper

00:17:55,429 --> 00:18:00,260
duper it because it's a dependency or

00:17:57,169 --> 00:18:02,510
the HTTP Colonel component which is used

00:18:00,260 --> 00:18:05,890
by drupal which means you don't have to

00:18:02,510 --> 00:18:10,730
do anything to use it only right call

00:18:05,890 --> 00:18:15,890
what this component does is it takes all

00:18:10,730 --> 00:18:19,640
the PHP error levels and whenever one is

00:18:15,890 --> 00:18:24,830
triggered it's just map these notices

00:18:19,640 --> 00:18:29,480
warnings anything to the ps3 logging

00:18:24,830 --> 00:18:35,720
system so I'm do you know psl three yeah

00:18:29,480 --> 00:18:39,770
who knows okay so um ps3 so the PS a--

00:18:35,720 --> 00:18:40,820
our PHP standard recommendations which

00:18:39,770 --> 00:18:44,000
are star

00:18:40,820 --> 00:18:46,809
ads that are used by symphony by drupal

00:18:44,000 --> 00:18:50,210
and by many other projects to live with

00:18:46,809 --> 00:18:53,870
that define interfaces and one is the

00:18:50,210 --> 00:18:57,889
PSP SF 3 which defines some interfaces

00:18:53,870 --> 00:18:59,750
to log to log any message so there is a

00:18:57,889 --> 00:19:01,639
method that is called log another one

00:18:59,750 --> 00:19:03,019
which is called warning another one

00:19:01,639 --> 00:19:04,940
which is debug so it depends on the

00:19:03,019 --> 00:19:08,419
level you have several method one per

00:19:04,940 --> 00:19:11,559
level and what this does is it takes a

00:19:08,419 --> 00:19:14,840
PHP error and in math it maps that to

00:19:11,559 --> 00:19:18,980
logging level arrow which allows them to

00:19:14,840 --> 00:19:24,470
reuse any logging system that is PSR

00:19:18,980 --> 00:19:28,360
three standard another thing that is

00:19:24,470 --> 00:19:30,950
done by the debug component is

00:19:28,360 --> 00:19:32,450
converting PHP arrows into exceptions I

00:19:30,950 --> 00:19:35,230
told you about that because this is what

00:19:32,450 --> 00:19:38,779
Symphony is using by default so any

00:19:35,230 --> 00:19:43,909
error is converted to an exception this

00:19:38,779 --> 00:19:46,970
is an option so you can configure and

00:19:43,909 --> 00:19:48,590
get logging or throwing because just

00:19:46,970 --> 00:19:51,289
before I told you there's mapping when

00:19:48,590 --> 00:19:52,940
you can map of course PHP errors two

00:19:51,289 --> 00:19:54,350
exceptions which means no logging

00:19:52,940 --> 00:19:58,700
because you have the exception there's

00:19:54,350 --> 00:20:01,009
no need to log that the error handler

00:19:58,700 --> 00:20:04,059
mechanism of PHP allows you to have

00:20:01,009 --> 00:20:07,100
access to local verse to the local scope

00:20:04,059 --> 00:20:10,100
and so it means local variable that

00:20:07,100 --> 00:20:12,980
we're define at the time the arrow was

00:20:10,100 --> 00:20:15,620
triggered so with the error handler we

00:20:12,980 --> 00:20:17,990
are able to get them and lock them and

00:20:15,620 --> 00:20:20,149
put them in the exception what you want

00:20:17,990 --> 00:20:22,429
so that you can know what were the state

00:20:20,149 --> 00:20:25,100
in the local method that triggered the

00:20:22,429 --> 00:20:27,230
exception trigger of the message with a

00:20:25,100 --> 00:20:30,860
stack trace also so you have the message

00:20:27,230 --> 00:20:35,080
and you know how PHP ended up in this

00:20:30,860 --> 00:20:40,190
situation we have n silence

00:20:35,080 --> 00:20:42,440
configuration to tell to the logo or to

00:20:40,190 --> 00:20:45,200
the table component which arrow should

00:20:42,440 --> 00:20:48,259
not be silenced I told you already about

00:20:45,200 --> 00:20:50,210
that and we use it in symphony and it's

00:20:48,259 --> 00:20:53,269
able to turn fatal errors in two

00:20:50,210 --> 00:20:53,880
exceptions so this is done you know now

00:20:53,269 --> 00:20:56,340
how to

00:20:53,880 --> 00:20:58,470
that you register Sheldon function and

00:20:56,340 --> 00:21:00,780
in the Sheldon fashion you get you call

00:20:58,470 --> 00:21:04,080
air or gate last and with a returning

00:21:00,780 --> 00:21:06,050
array you do something like in

00:21:04,080 --> 00:21:08,280
instantiating an exception and

00:21:06,050 --> 00:21:11,100
forwarding it to something else

00:21:08,280 --> 00:21:15,090
somewhere else especially you can

00:21:11,100 --> 00:21:17,640
re-inject it into the logging system so

00:21:15,090 --> 00:21:19,530
that the job of the error handler we

00:21:17,640 --> 00:21:21,390
have another utility class which is the

00:21:19,530 --> 00:21:26,340
exception handler the exception handler

00:21:21,390 --> 00:21:29,310
has a job which is to generate HTML we

00:21:26,340 --> 00:21:33,210
by taking just an exception instance as

00:21:29,310 --> 00:21:36,750
argument you do a exception handler

00:21:33,210 --> 00:21:42,930
handler exception and it displays this

00:21:36,750 --> 00:21:45,480
kind of HTML pages the other thing the

00:21:42,930 --> 00:21:50,190
other useful class is the debug class

00:21:45,480 --> 00:21:54,480
loader so the DB class loader has three

00:21:50,190 --> 00:21:56,490
main use case one is to stack compile

00:21:54,480 --> 00:22:02,130
compile time error so this is really an

00:21:56,490 --> 00:22:05,250
edge case in PHP where some errors can

00:22:02,130 --> 00:22:07,670
be logged properly at some stage which

00:22:05,250 --> 00:22:10,320
is at some compiling stage in fact so

00:22:07,670 --> 00:22:13,260
you don't have to know full details

00:22:10,320 --> 00:22:17,090
about that but the DB class loader

00:22:13,260 --> 00:22:21,410
allows you to not end up in the trap

00:22:17,090 --> 00:22:26,730
which exists in PHP which is this one

00:22:21,410 --> 00:22:30,870
another feature is to first and select

00:22:26,730 --> 00:22:35,880
and silencing of past errors I'm sure or

00:22:30,870 --> 00:22:38,760
at least I did one day have a white page

00:22:35,880 --> 00:22:41,220
without any error message and this was

00:22:38,760 --> 00:22:44,280
because after several hours this was

00:22:41,220 --> 00:22:48,170
because of some ads seen in the front of

00:22:44,280 --> 00:22:53,100
an included so the ad scene set says

00:22:48,170 --> 00:22:55,710
just don't log any error this is really

00:22:53,100 --> 00:22:58,290
really bad when you have some pass error

00:22:55,710 --> 00:23:00,690
or some fatal error in the include in

00:22:58,290 --> 00:23:02,700
the foo PHP file because the other error

00:23:00,690 --> 00:23:05,310
you said to not log it so you don't have

00:23:02,700 --> 00:23:07,340
you have the eight closed and you can

00:23:05,310 --> 00:23:10,280
deal with that so what the devil

00:23:07,340 --> 00:23:14,600
does is that it changes locally the

00:23:10,280 --> 00:23:17,660
error reporting level and it forces past

00:23:14,600 --> 00:23:20,870
arrows and some other kind of errors to

00:23:17,660 --> 00:23:23,120
be n silence so that you will get them

00:23:20,870 --> 00:23:28,460
and you'll see them and i'm sure you'd

00:23:23,120 --> 00:23:30,980
never want to sense them another example

00:23:28,460 --> 00:23:35,260
and maybe the last feature of the dipper

00:23:30,980 --> 00:23:41,680
class module is sniffing and trying to

00:23:35,260 --> 00:23:44,780
find case mismatch between loaded

00:23:41,680 --> 00:23:47,810
declared class names and the file name

00:23:44,780 --> 00:23:51,920
in which you put your class declaration

00:23:47,810 --> 00:23:53,600
on line x this doesn't matter very much

00:23:51,920 --> 00:23:56,330
because on line is we have the case

00:23:53,600 --> 00:23:58,190
sensitive file system so whenever you do

00:23:56,330 --> 00:24:01,940
some typos you will get a fatal error

00:23:58,190 --> 00:24:06,080
saying okay but i'm sure many of you

00:24:01,940 --> 00:24:08,360
have mac OS and mac OS has cason

00:24:06,080 --> 00:24:10,870
insensitive file system and windows also

00:24:08,360 --> 00:24:13,520
have a case-insensitive file system and

00:24:10,870 --> 00:24:16,240
we added this to the devil components

00:24:13,520 --> 00:24:20,210
because one day one of our developer

00:24:16,240 --> 00:24:22,280
wrote something and we pushed it to prod

00:24:20,210 --> 00:24:26,020
and we broke the product because he

00:24:22,280 --> 00:24:28,460
wasn't mac and he has a typo so now

00:24:26,020 --> 00:24:30,980
fortunately we have this and this is

00:24:28,460 --> 00:24:34,360
able to check that this won't happen

00:24:30,980 --> 00:24:38,000
again it won't happen again to you also

00:24:34,360 --> 00:24:40,430
now so case mismatch between loaded in

00:24:38,000 --> 00:24:42,110
the correct class names trying to load

00:24:40,430 --> 00:24:45,740
the class with an invalid name this is

00:24:42,110 --> 00:24:48,170
really raw edge case fine the phone was

00:24:45,740 --> 00:24:51,230
found where the class was not in it so

00:24:48,170 --> 00:24:53,480
you look for food at PHP we find food at

00:24:51,230 --> 00:24:56,030
PHP we load food at PHP but there is no

00:24:53,480 --> 00:24:58,670
fruit class and food at PHP what does

00:24:56,030 --> 00:25:01,040
that mean so maybe you're missing the

00:24:58,670 --> 00:25:02,420
namespace something like that and then

00:25:01,040 --> 00:25:06,430
we also have the case with case which

00:25:02,420 --> 00:25:11,420
mismatch between class and filename a

00:25:06,430 --> 00:25:15,320
last feature is that the debug last

00:25:11,420 --> 00:25:17,030
order is able to inspect the method that

00:25:15,320 --> 00:25:18,950
you're calling the class that you're

00:25:17,030 --> 00:25:20,120
calling and the interface that you're

00:25:18,950 --> 00:25:22,790
using a new code

00:25:20,120 --> 00:25:24,770
and it's able to warn you by just adding

00:25:22,790 --> 00:25:28,430
a message in the log system to run you

00:25:24,770 --> 00:25:31,130
about deprecated interfaces abstract

00:25:28,430 --> 00:25:33,380
classes that you are using this may be

00:25:31,130 --> 00:25:35,900
not useful right now but one day you

00:25:33,380 --> 00:25:39,320
will have legacy code and one day this

00:25:35,900 --> 00:25:42,710
code will be deprecated by the main

00:25:39,320 --> 00:25:46,400
author the sort of some library and so

00:25:42,710 --> 00:25:48,470
you will know how to fix your code

00:25:46,400 --> 00:25:53,570
because the code will tell you this is

00:25:48,470 --> 00:25:55,550
deprecated you should use that now okay

00:25:53,570 --> 00:25:57,020
let's change component this is the

00:25:55,550 --> 00:26:00,380
second compound so the valuable

00:25:57,020 --> 00:26:03,140
component is about displaying the state

00:26:00,380 --> 00:26:06,530
of any variable so the mission statement

00:26:03,140 --> 00:26:09,760
of the component is to generate some

00:26:06,530 --> 00:26:15,050
easy-to-read HTML or common line output

00:26:09,760 --> 00:26:18,080
the second feature mission of the

00:26:15,050 --> 00:26:21,320
component is to provide an accurate very

00:26:18,080 --> 00:26:24,170
i create state representation of any

00:26:21,320 --> 00:26:28,340
variable an array of float and int we

00:26:24,170 --> 00:26:30,050
don't want to represent 1 and 10 in the

00:26:28,340 --> 00:26:31,700
same way so that you can know that this

00:26:30,050 --> 00:26:35,090
is a float this is an int and you have

00:26:31,700 --> 00:26:39,560
the hint to understand the very accurate

00:26:35,090 --> 00:26:41,840
state of any PHP variable PHP proof this

00:26:39,560 --> 00:26:44,510
is also very important because PHP is

00:26:41,840 --> 00:26:47,590
full of edge cases and when you are

00:26:44,510 --> 00:26:50,660
debugging you are in an edge case

00:26:47,590 --> 00:26:54,980
usually so it means that the component

00:26:50,660 --> 00:26:59,000
is not a load to break and we try very

00:26:54,980 --> 00:27:03,140
hard to test it in every crazy situation

00:26:59,000 --> 00:27:08,330
so that you can up dump in any situation

00:27:03,140 --> 00:27:11,780
and then last but not least we want it

00:27:08,330 --> 00:27:14,300
to be extensible and reusable which

00:27:11,780 --> 00:27:16,460
means that I will present you the

00:27:14,300 --> 00:27:19,070
components and you will see it from the

00:27:16,460 --> 00:27:21,650
outside and the outside is a one feature

00:27:19,070 --> 00:27:24,920
to represent the state so to dump it

00:27:21,650 --> 00:27:29,020
just a valve replacement and internally

00:27:24,920 --> 00:27:31,950
it's an API and interfaces and classes

00:27:29,020 --> 00:27:34,919
that allow you to

00:27:31,950 --> 00:27:37,440
just build something else on top of the

00:27:34,919 --> 00:27:40,679
core algorithm and core interfaces so

00:27:37,440 --> 00:27:42,570
that you can extend it and provide some

00:27:40,679 --> 00:27:48,149
other representation anything you want

00:27:42,570 --> 00:27:50,840
to build on top of that okay let's do

00:27:48,149 --> 00:27:54,120
some examples so this is a simple array

00:27:50,840 --> 00:27:56,490
so very easy to understand i guess so we

00:27:54,120 --> 00:27:58,860
have five elements a simple string in an

00:27:56,490 --> 00:28:01,350
array of five elements afloat and

00:27:58,860 --> 00:28:05,070
integral bullion and empty array as you

00:28:01,350 --> 00:28:08,549
can see it's pretty straightforward this

00:28:05,070 --> 00:28:11,279
is a kind of complex array so this array

00:28:08,549 --> 00:28:14,909
has internal references which means that

00:28:11,279 --> 00:28:19,049
some indexes are just aliases to other

00:28:14,909 --> 00:28:22,440
indexes and in this case we have the

00:28:19,049 --> 00:28:24,840
index zero index one and they both they

00:28:22,440 --> 00:28:26,549
both hold the same value but in fact not

00:28:24,840 --> 00:28:29,070
because that the same two at two

00:28:26,549 --> 00:28:32,100
different position because it's the same

00:28:29,070 --> 00:28:33,960
position both index our reference of

00:28:32,100 --> 00:28:36,600
each other which means that if you

00:28:33,960 --> 00:28:42,950
change index one you will change index

00:28:36,600 --> 00:28:46,830
zero so this is displayed with this a

00:28:42,950 --> 00:28:49,760
the ampersand one and we have the same

00:28:46,830 --> 00:28:52,860
representation just for an array so in

00:28:49,760 --> 00:28:55,919
index to index 3 we also have the

00:28:52,860 --> 00:29:00,299
malleus and in this case we put an array

00:28:55,919 --> 00:29:03,570
there so you can see that we opened the

00:29:00,299 --> 00:29:06,029
first one and we collapse thus the last

00:29:03,570 --> 00:29:08,760
one so this is something that you can

00:29:06,029 --> 00:29:11,580
not know currently with tools displaying

00:29:08,760 --> 00:29:13,710
tools and sometimes you will have a bag

00:29:11,580 --> 00:29:15,960
one day you will have a bird and the

00:29:13,710 --> 00:29:18,539
work will be related to this and you

00:29:15,960 --> 00:29:20,039
will need the tool to see what's the

00:29:18,539 --> 00:29:25,080
data structure that you're using oh

00:29:20,039 --> 00:29:27,120
maybe someone made you to use this is a

00:29:25,080 --> 00:29:30,240
simple object so a simple object has a

00:29:27,120 --> 00:29:34,710
one public property and so with a plus

00:29:30,240 --> 00:29:38,340
prefix so plus means public the sharp

00:29:34,710 --> 00:29:41,129
prefix protected property and the dash

00:29:38,340 --> 00:29:44,820
prefix for private properties and this

00:29:41,129 --> 00:29:45,059
plus sharp and dash is a convention that

00:29:44,820 --> 00:29:49,350
is

00:29:45,059 --> 00:29:51,480
using uml so if people some of you are

00:29:49,350 --> 00:29:53,490
used to that you should be familiar with

00:29:51,480 --> 00:29:56,070
that we could have invented something

00:29:53,490 --> 00:29:58,320
else but we shouldn't when there is

00:29:56,070 --> 00:30:00,779
standard it's better to make everyone

00:29:58,320 --> 00:30:07,759
aware of it and so that people rate

00:30:00,779 --> 00:30:12,600
their knowledge okay so let's talk about

00:30:07,759 --> 00:30:16,409
internal things so how does this work we

00:30:12,600 --> 00:30:18,240
have a variable which is dal / and first

00:30:16,409 --> 00:30:20,850
the first step to get this kind of

00:30:18,240 --> 00:30:22,649
representation is to take Val cloner

00:30:20,850 --> 00:30:24,210
object which is something that is

00:30:22,649 --> 00:30:32,279
implemented in the vertical component

00:30:24,210 --> 00:30:34,980
and to use it on our variable the output

00:30:32,279 --> 00:30:38,220
of this call which is there is a method

00:30:34,980 --> 00:30:42,600
which is called cloneville so whenever

00:30:38,220 --> 00:30:45,360
we do a cloner conv of VAS then we get

00:30:42,600 --> 00:30:48,409
back data object data object is again

00:30:45,360 --> 00:30:51,269
some internal thing and it's

00:30:48,409 --> 00:30:53,940
representing the exact state of the VAR

00:30:51,269 --> 00:30:58,619
variable but it's not viable anymore

00:30:53,940 --> 00:31:01,710
it's something else then what the velcro

00:30:58,619 --> 00:31:07,590
no does inside internally is that it

00:31:01,710 --> 00:31:10,950
uses casters to extract accurate

00:31:07,590 --> 00:31:13,679
representation about all your custom

00:31:10,950 --> 00:31:16,230
objects so this means that if you're

00:31:13,679 --> 00:31:19,379
using doctrine and you don't want your

00:31:16,230 --> 00:31:22,440
entities too dumb to be dumped with the

00:31:19,379 --> 00:31:24,450
entity manager which is very huge object

00:31:22,440 --> 00:31:26,639
then you can write to castor and the

00:31:24,450 --> 00:31:29,009
caster will have some implementation

00:31:26,639 --> 00:31:30,899
saying okay this is an entity I don't

00:31:29,009 --> 00:31:32,999
want the entity manager to be done

00:31:30,899 --> 00:31:34,769
because I don't care about it let's

00:31:32,999 --> 00:31:39,240
remove it from the Ripper from the

00:31:34,769 --> 00:31:41,730
representation and then represent it and

00:31:39,240 --> 00:31:45,179
what the VAT runner also does is that it

00:31:41,730 --> 00:31:48,059
enforce state extraction limits this

00:31:45,179 --> 00:31:52,080
just means that we can have a max level

00:31:48,059 --> 00:31:55,950
have max items Mac string length so that

00:31:52,080 --> 00:31:57,779
you don't dump the full PHP state but

00:31:55,950 --> 00:31:58,970
you can limit your representation to the

00:31:57,779 --> 00:32:05,009
first

00:31:58,970 --> 00:32:07,590
nesting levels of your objects so I'm

00:32:05,009 --> 00:32:11,220
the resulting data object from the

00:32:07,590 --> 00:32:13,950
cloning of the VAR variable is basically

00:32:11,220 --> 00:32:16,679
internally just a simple PHP array that

00:32:13,950 --> 00:32:19,980
holds full precision over the state of

00:32:16,679 --> 00:32:24,120
the initial valve which means that it's

00:32:19,980 --> 00:32:27,899
just if you remove all the limits it's

00:32:24,120 --> 00:32:30,330
an exact representation of the variable

00:32:27,899 --> 00:32:32,370
that you we are going to dump and you

00:32:30,330 --> 00:32:34,649
can sell your lies it and put it on a

00:32:32,370 --> 00:32:36,950
file you can store this object in the

00:32:34,649 --> 00:32:40,320
database do something else with it

00:32:36,950 --> 00:32:42,659
forward it to some remote server it has

00:32:40,320 --> 00:32:45,210
the state and you will be able to

00:32:42,659 --> 00:32:47,539
represent it later in the process if you

00:32:45,210 --> 00:32:50,519
want so there is a separation between

00:32:47,539 --> 00:32:54,679
extracting the state which generate this

00:32:50,519 --> 00:32:59,240
and then jumping representing this thing

00:32:54,679 --> 00:33:02,370
so then this is done this job

00:32:59,240 --> 00:33:04,740
representation is done by is what we

00:33:02,370 --> 00:33:07,409
call jumper object so we have to a clear

00:33:04,740 --> 00:33:10,230
dumper so command line jumper and HTML

00:33:07,409 --> 00:33:13,740
jumper maybe you don't / you can write

00:33:10,230 --> 00:33:15,750
one and this one turns the data object

00:33:13,740 --> 00:33:17,639
into a string representation a string

00:33:15,750 --> 00:33:21,200
representation is what is displayed on

00:33:17,639 --> 00:33:24,029
your screen so HTML command line thing

00:33:21,200 --> 00:33:28,200
and then the this string representation

00:33:24,029 --> 00:33:31,320
is written to any PHP stream or any line

00:33:28,200 --> 00:33:33,779
call back so you can hook into this and

00:33:31,320 --> 00:33:36,000
say okay I don't want this to be printed

00:33:33,779 --> 00:33:38,009
on the standard output and the output of

00:33:36,000 --> 00:33:40,080
my web page I want this to be output

00:33:38,009 --> 00:33:42,389
somewhere else maybe the file may be on

00:33:40,080 --> 00:33:44,490
the standard error stream may be on the

00:33:42,389 --> 00:33:46,049
network protocol string maybe on some

00:33:44,490 --> 00:33:48,149
call back so call back will be called

00:33:46,049 --> 00:33:50,309
for every line that is generally

00:33:48,149 --> 00:33:52,529
generated for the representation so that

00:33:50,309 --> 00:33:56,639
you can do anything any wiring you want

00:33:52,529 --> 00:33:59,370
with the output so this is another

00:33:56,639 --> 00:34:02,190
example this is a comp what I call a

00:33:59,370 --> 00:34:04,350
complex object why is it complex because

00:34:02,190 --> 00:34:06,690
it's so in this case it's a reddest

00:34:04,350 --> 00:34:11,760
objects already seized database and the

00:34:06,690 --> 00:34:14,490
ready subject is PHP driver

00:34:11,760 --> 00:34:18,240
lamentation that is able to connect to

00:34:14,490 --> 00:34:19,889
read is the same kind of its database

00:34:18,240 --> 00:34:23,639
connection readies database connection

00:34:19,889 --> 00:34:27,330
object and usually this is provided by

00:34:23,639 --> 00:34:29,669
the Redis PHP extension and if you dump

00:34:27,330 --> 00:34:32,280
this using werdum for example of using

00:34:29,669 --> 00:34:34,350
printer you will get only the first line

00:34:32,280 --> 00:34:37,560
the first line we tell you okay this is

00:34:34,350 --> 00:34:39,720
a ready subject and it holds one public

00:34:37,560 --> 00:34:42,810
property which is circuit which is a

00:34:39,720 --> 00:34:44,760
reggae ready circuit before russell's by

00:34:42,810 --> 00:34:47,130
using a caster and this is why i put

00:34:44,760 --> 00:34:51,120
this example here by using a caster you

00:34:47,130 --> 00:34:52,770
can add useful information so that you

00:34:51,120 --> 00:34:55,050
have more information when you're

00:34:52,770 --> 00:34:57,149
dumping this object in this case we have

00:34:55,050 --> 00:34:59,610
a radius connection and on the reddest

00:34:57,149 --> 00:35:03,600
objects even if it's not an internal

00:34:59,610 --> 00:35:06,240
property private or public there is date

00:35:03,600 --> 00:35:09,620
there is a state and the states can be

00:35:06,240 --> 00:35:13,140
read by using some is connected method

00:35:09,620 --> 00:35:15,120
get host method get poured get hot get

00:35:13,140 --> 00:35:18,270
DB number get time I would get

00:35:15,120 --> 00:35:22,380
persistent ID so if you're working with

00:35:18,270 --> 00:35:24,480
reddest object you have to know that you

00:35:22,380 --> 00:35:27,900
can inspect the state of the ready

00:35:24,480 --> 00:35:30,780
subject by using these methods what you

00:35:27,900 --> 00:35:32,910
can do with the vertical component is

00:35:30,780 --> 00:35:36,240
got that knowledge into a caster and

00:35:32,910 --> 00:35:39,000
then the caster will just know that for

00:35:36,240 --> 00:35:41,010
you and whenever you end up doing dump

00:35:39,000 --> 00:35:42,870
from some ready subject you will have

00:35:41,010 --> 00:35:48,890
this representation so this

00:35:42,870 --> 00:35:54,690
representation is ready so we're enjoy

00:35:48,890 --> 00:35:58,320
this is the implementation so the

00:35:54,690 --> 00:36:00,750
implementation says basically that it's

00:35:58,320 --> 00:36:02,940
conflict constructing some array as you

00:36:00,750 --> 00:36:05,100
can see and the array course of the

00:36:02,940 --> 00:36:07,830
interesting function on the reddest

00:36:05,100 --> 00:36:12,600
object so that then the presentation is

00:36:07,830 --> 00:36:14,760
generated by using this array that is

00:36:12,600 --> 00:36:16,650
constructed there ok so this is just a

00:36:14,760 --> 00:36:18,330
public static function which means there

00:36:16,650 --> 00:36:21,480
is no stay there is no object it's

00:36:18,330 --> 00:36:23,190
really simple if you know you maybe need

00:36:21,480 --> 00:36:24,030
to read some documentation about that to

00:36:23,190 --> 00:36:25,860
know the exact

00:36:24,030 --> 00:36:28,320
meaning of the arguments but anyway as

00:36:25,860 --> 00:36:31,650
you can see there is some knowledge here

00:36:28,320 --> 00:36:34,050
which is how to access the state of the

00:36:31,650 --> 00:36:38,130
reddest connection object and we have

00:36:34,050 --> 00:36:41,040
many of them and we add many more over

00:36:38,130 --> 00:36:44,060
time because this one is very new the

00:36:41,040 --> 00:36:48,030
previous one was maybe a postgresql

00:36:44,060 --> 00:36:49,590
connection display so yeah that you now

00:36:48,030 --> 00:36:54,300
have nice to display for this kind of

00:36:49,590 --> 00:36:57,210
object and so on ok this is the kind of

00:36:54,300 --> 00:37:00,630
code you need to do if you want to dump

00:36:57,210 --> 00:37:03,450
by hand so this is the implementation of

00:37:00,630 --> 00:37:05,640
what I try to explain you before as so

00:37:03,450 --> 00:37:07,800
at link for we create a closer so a new

00:37:05,640 --> 00:37:11,280
vault runner then we create a clear

00:37:07,800 --> 00:37:15,170
dumper and then we prepare some stream

00:37:11,280 --> 00:37:19,230
outputs so some PHP memory buffer and

00:37:15,170 --> 00:37:22,620
let's go and online aight we call cloner

00:37:19,230 --> 00:37:25,080
cloneville of some variable and then the

00:37:22,620 --> 00:37:27,210
output of this the return value is a

00:37:25,080 --> 00:37:30,480
data object we give this data object to

00:37:27,210 --> 00:37:33,180
dumper dump and dumper dump will

00:37:30,480 --> 00:37:36,480
generate the string on the output that

00:37:33,180 --> 00:37:38,160
is the last argument there then you get

00:37:36,480 --> 00:37:40,920
the output with 28 content and the

00:37:38,160 --> 00:37:42,240
output resource and that's it you have a

00:37:40,920 --> 00:37:48,900
variable with the string representation

00:37:42,240 --> 00:37:51,830
of the of the variable ok ok let's

00:37:48,900 --> 00:37:51,830
practice hard but I'm easy

00:37:54,119 --> 00:37:56,900
ok

00:38:02,200 --> 00:38:13,660
it's a lot simpler that one ma'am the

00:38:09,760 --> 00:38:16,450
first thing so symphony of a jumper is

00:38:13,660 --> 00:38:19,060
just a standard composer package that

00:38:16,450 --> 00:38:21,820
you can require so you do composite

00:38:19,060 --> 00:38:25,570
require symphony of a damper and that's

00:38:21,820 --> 00:38:28,450
it that's it each works on Drupal 6 on

00:38:25,570 --> 00:38:33,369
the 17 Drupal 8 and symphony on in fact

00:38:28,450 --> 00:38:35,740
any PHP application this means that when

00:38:33,369 --> 00:38:38,290
you composer require symphony version /

00:38:35,740 --> 00:38:40,900
you will get automatically a dumb

00:38:38,290 --> 00:38:43,720
function so then you just dump some

00:38:40,900 --> 00:38:46,500
variable done and that's it you get the

00:38:43,720 --> 00:38:49,060
representation this is able to automate

00:38:46,500 --> 00:38:52,720
automatically switch between HTML oakley

00:38:49,060 --> 00:38:54,790
depending on the runtime context you can

00:38:52,720 --> 00:38:59,050
also install that using composer global

00:38:54,790 --> 00:39:01,300
require and using also some auto in any

00:38:59,050 --> 00:39:03,880
setting configuration if you do computer

00:39:01,300 --> 00:39:05,710
global require and then auto prepon file

00:39:03,880 --> 00:39:09,250
in new PHP any file you will get done

00:39:05,710 --> 00:39:11,560
all the time without doing anything on

00:39:09,250 --> 00:39:17,520
all your project it will be installed

00:39:11,560 --> 00:39:17,520
globally on your laptop okay let's try

00:39:20,310 --> 00:39:27,730
so here i have a small drupal

00:39:22,900 --> 00:39:32,290
application okay so this is standard

00:39:27,730 --> 00:39:39,760
directory listing i have a demo PHP file

00:39:32,290 --> 00:39:44,069
okay let it's empty can you see i will

00:39:39,760 --> 00:39:44,069
say this one is okay so

00:39:46,050 --> 00:39:51,250
we need your Toyota of course to load

00:39:48,580 --> 00:40:03,310
our dependencies and then let's just

00:39:51,250 --> 00:40:04,660
dump okay one two three that's it we are

00:40:03,310 --> 00:40:07,210
not in the Drupal application we are

00:40:04,660 --> 00:40:10,930
just in the bare minimum script PHP

00:40:07,210 --> 00:40:22,810
script so we can try any variable here

00:40:10,930 --> 00:40:31,150
so of course an array here's our array

00:40:22,810 --> 00:40:34,540
and we can do some reddish connection up

00:40:31,150 --> 00:40:37,510
varies then I have a ready several

00:40:34,540 --> 00:40:42,450
running there so let's connect some

00:40:37,510 --> 00:40:42,450
local hosts

00:40:49,280 --> 00:40:53,340
we have a connection objecting this is

00:40:51,660 --> 00:41:03,300
the representation that you saw on the

00:40:53,340 --> 00:41:07,890
slides but now it's live okay back in a

00:41:03,300 --> 00:41:10,380
drupal application you can use this and

00:41:07,890 --> 00:41:14,160
you can enable everything I told you

00:41:10,380 --> 00:41:16,800
about by changing you settings local dot

00:41:14,160 --> 00:41:19,110
PHP files and if you add this at the end

00:41:16,800 --> 00:41:23,310
of the file you will get the debug

00:41:19,110 --> 00:41:27,240
component enabled so that you'll get a

00:41:23,310 --> 00:41:32,160
row reporting in this kind of stuff

00:41:27,240 --> 00:41:35,520
anyway so let's do that so I think okay

00:41:32,160 --> 00:41:40,620
the Drupal server is there it's just

00:41:35,520 --> 00:41:44,370
drupal server server running okay i have

00:41:40,620 --> 00:41:48,600
my application there so okay this is a

00:41:44,370 --> 00:41:57,300
vignette application and so the vineyard

00:41:48,600 --> 00:42:01,350
application has let's start ok so here

00:41:57,300 --> 00:42:05,640
is a controller with ok it's a new usual

00:42:01,350 --> 00:42:12,720
controller for drupal application and in

00:42:05,640 --> 00:42:15,450
this case let's say i want to dump my

00:42:12,720 --> 00:42:17,760
plane yet let's back i didn't unable the

00:42:15,450 --> 00:42:21,300
DBA component right now ok I'm back to

00:42:17,760 --> 00:42:24,630
do more time ok so we have an error and

00:42:21,300 --> 00:42:26,130
defined variable been yet so this is ok

00:42:24,630 --> 00:42:28,980
this is because I plugged in fact

00:42:26,130 --> 00:42:33,180
everything so this is the error page

00:42:28,980 --> 00:42:34,770
that I plugged with the dump function so

00:42:33,180 --> 00:42:38,400
that we don't whenever we have an

00:42:34,770 --> 00:42:40,290
exception so that we have more context

00:42:38,400 --> 00:42:43,500
and maybe more friendly display let's

00:42:40,290 --> 00:42:46,100
see this one so in this one we have we

00:42:43,500 --> 00:42:50,510
have some noticing and define variable

00:42:46,100 --> 00:42:53,300
Burnett which obviously has a typo and

00:42:50,510 --> 00:42:56,130
we have some context we have a number

00:42:53,300 --> 00:42:57,630
with variable which is called number and

00:42:56,130 --> 00:43:01,200
I guess and the code will see that there

00:42:57,630 --> 00:43:03,000
is a number variable

00:43:01,200 --> 00:43:05,280
and we also have one which is been yet

00:43:03,000 --> 00:43:09,630
which is the one I was trying to jump

00:43:05,280 --> 00:43:12,450
and it has strawberry it is totally

00:43:09,630 --> 00:43:18,030
filled can you see another may be able

00:43:12,450 --> 00:43:19,020
to zoom okay much better so let's

00:43:18,030 --> 00:43:21,540
continue because we have more

00:43:19,020 --> 00:43:24,720
information there we have a stack trace

00:43:21,540 --> 00:43:27,329
so the stack trace shows us the list of

00:43:24,720 --> 00:43:30,359
function that have been called up to our

00:43:27,329 --> 00:43:33,450
controller so if I go back at the end

00:43:30,359 --> 00:43:37,619
I'm in the main function which is the

00:43:33,450 --> 00:43:39,839
abstract root node and then this index

00:43:37,619 --> 00:43:41,670
PHP file in fact is calling Drupal

00:43:39,839 --> 00:43:43,500
Colonel handle and you know that because

00:43:41,670 --> 00:43:45,869
you maybe have already opened the

00:43:43,500 --> 00:43:49,950
index.php file and this one is calling

00:43:45,869 --> 00:43:53,130
this typed state HTTP cannot handle and

00:43:49,950 --> 00:43:56,040
so on so this is a typical Drupal call

00:43:53,130 --> 00:44:01,680
stack we end up triggering this

00:43:56,040 --> 00:44:05,339
exception with codec shop there showing

00:44:01,680 --> 00:44:10,980
that this is the line that is triggering

00:44:05,339 --> 00:44:13,410
the exception okay and we can inspect

00:44:10,980 --> 00:44:18,150
and get all the lines and their

00:44:13,410 --> 00:44:21,030
arguments so dumb and then we had one

00:44:18,150 --> 00:44:23,060
argument which was this one because we

00:44:21,030 --> 00:44:27,930
are still in the error handling part and

00:44:23,060 --> 00:44:30,930
we can continue and see there that we

00:44:27,930 --> 00:44:34,530
have okay Drupal is doing many things

00:44:30,930 --> 00:44:38,700
there with symphony head and we have

00:44:34,530 --> 00:44:40,500
many things so let's fix that but in

00:44:38,700 --> 00:44:45,800
fact we already saw the value and learn

00:44:40,500 --> 00:44:45,800
it for that what else

00:44:48,089 --> 00:44:54,730
okay so let's see this one up I don't

00:44:51,310 --> 00:45:00,550
need this up i'm in my settings default

00:44:54,730 --> 00:45:04,570
and then the settings local file so in

00:45:00,550 --> 00:45:07,690
this file have this which enables the

00:45:04,570 --> 00:45:09,970
world class loader so that whenever i do

00:45:07,690 --> 00:45:13,060
some typos i would get the right message

00:45:09,970 --> 00:45:15,790
i have the exception handler and i have

00:45:13,060 --> 00:45:18,070
also the error handler and this is why

00:45:15,790 --> 00:45:21,579
we are getting this strange error page

00:45:18,070 --> 00:45:26,910
with the black background and doing

00:45:21,579 --> 00:45:26,910
everything okay

00:45:32,210 --> 00:45:37,849
and there's also something else we can

00:45:35,119 --> 00:45:40,940
do maybe this is just advent and this is

00:45:37,849 --> 00:45:44,780
just to show you that you can also plug

00:45:40,940 --> 00:45:47,570
everything as you want in this case I

00:45:44,780 --> 00:45:50,270
plots and even subscriber for the

00:45:47,570 --> 00:45:51,740
colonel exception even because I told

00:45:50,270 --> 00:45:53,780
you that whenever an exception is

00:45:51,740 --> 00:45:56,599
triggered and is not dealt with by any

00:45:53,780 --> 00:45:59,270
code then it will end up in the colonel

00:45:56,599 --> 00:46:03,140
exception event and this is something

00:45:59,270 --> 00:46:09,890
you can listen for and in this case I

00:46:03,140 --> 00:46:11,990
have one listener so this is the part

00:46:09,890 --> 00:46:14,510
let's forget about this one but the

00:46:11,990 --> 00:46:16,609
first lines so this is the service

00:46:14,510 --> 00:46:21,290
declaration for our exception

00:46:16,609 --> 00:46:23,330
subscribers so we say whenever you need

00:46:21,290 --> 00:46:24,950
to okay if you need to register the

00:46:23,330 --> 00:46:29,260
event let's look at the exception

00:46:24,950 --> 00:46:29,260
subscriber class and this one will tell

00:46:29,770 --> 00:46:39,500
that we'll deal with this ok let's go

00:46:33,200 --> 00:46:46,089
with Z and then we have the class here

00:46:39,500 --> 00:46:48,710
and the class is just doing this sorry

00:46:46,089 --> 00:46:51,080
so this is the implementation and this

00:46:48,710 --> 00:46:53,630
is an event subscriber and the event

00:46:51,080 --> 00:46:56,270
subscriber has the bottom function is

00:46:53,630 --> 00:47:01,580
just a static declaration function

00:46:56,270 --> 00:47:03,230
saying this class the on Colonel

00:47:01,580 --> 00:47:05,210
exception method should be called

00:47:03,230 --> 00:47:07,070
whenever a kernel exception event is

00:47:05,210 --> 00:47:09,290
triggered so that's the last part and

00:47:07,070 --> 00:47:10,670
the first part is the function that is

00:47:09,290 --> 00:47:12,859
called whenever an exception is

00:47:10,670 --> 00:47:15,020
triggered and in this case what we do

00:47:12,859 --> 00:47:17,330
with the exception with the event in

00:47:15,020 --> 00:47:19,339
fact the beginning is get the exception

00:47:17,330 --> 00:47:21,740
that is inside the events and just dump

00:47:19,339 --> 00:47:24,589
it the same don't function that we used

00:47:21,740 --> 00:47:26,510
before and we set the restaurants with a

00:47:24,589 --> 00:47:28,670
new response which means blank page

00:47:26,510 --> 00:47:30,349
because dumped already outputted

00:47:28,670 --> 00:47:32,990
something so we don't anything we don't

00:47:30,349 --> 00:47:36,050
want anything else okay so this will

00:47:32,990 --> 00:47:42,040
display a very nice page nice in terms

00:47:36,050 --> 00:47:50,260
of this kind of page

00:47:42,040 --> 00:47:50,260
um if we have a few minutes and a few

00:47:51,610 --> 00:48:00,830
minutes of battery salsa well we can

00:47:57,380 --> 00:48:05,960
write something else which is some let's

00:48:00,830 --> 00:48:09,200
do our dd4 debug d function let's do it

00:48:05,960 --> 00:48:12,860
together so I want my d function to

00:48:09,200 --> 00:48:16,370
output somewhere else so let's create a

00:48:12,860 --> 00:48:21,440
clonal so this will be a new cloner

00:48:16,370 --> 00:48:24,200
object let's do some cleanup / because

00:48:21,440 --> 00:48:30,380
you'll see what I want to do later so

00:48:24,200 --> 00:48:31,940
when doing a clique jumper object then

00:48:30,380 --> 00:48:36,170
okay let's forget about invitation

00:48:31,940 --> 00:48:39,460
because it doesn't work then let's get

00:48:36,170 --> 00:48:45,050
out data from the viable so it's corner

00:48:39,460 --> 00:48:49,220
clone far from well okay so now we have

00:48:45,050 --> 00:48:52,760
the data object and let's dump it so

00:48:49,220 --> 00:48:54,500
click down from our data object and this

00:48:52,760 --> 00:48:57,310
is where I want something special to

00:48:54,500 --> 00:49:02,510
happen which is that I want the output

00:48:57,310 --> 00:49:12,850
on the standard error of our PHP process

00:49:02,510 --> 00:49:12,850
I hope there is no pass over there okay

00:49:15,380 --> 00:49:24,200
lets you did use it so let's d the

00:49:21,809 --> 00:49:24,200
controller

00:49:31,810 --> 00:49:36,330
nothing there but

00:49:38,510 --> 00:49:41,350
here it is

00:49:42,930 --> 00:49:49,660
in the log of our web server so we

00:49:46,840 --> 00:49:54,400
didn't alter the output at all and we

00:49:49,660 --> 00:50:10,630
have some console output even though we

00:49:54,400 --> 00:50:13,540
are in HTML context okay we did that so

00:50:10,630 --> 00:50:15,490
what's next maybe some native Drupal

00:50:13,540 --> 00:50:18,880
integration because some wiring are not

00:50:15,490 --> 00:50:22,600
that easy maybe a red room per module

00:50:18,880 --> 00:50:25,870
there is a one already existing I tried

00:50:22,600 --> 00:50:29,080
it they still work to do and don't wait

00:50:25,870 --> 00:50:31,450
after others which means you can write

00:50:29,080 --> 00:50:36,070
the code because it's an open source

00:50:31,450 --> 00:50:38,830
project and Drupal is and you already

00:50:36,070 --> 00:50:44,790
know how to use them just composer

00:50:38,830 --> 00:50:44,790
requires in 20 bumper and happy them

00:50:55,000 --> 00:51:00,250
so if you have any questions I'm here

00:50:57,410 --> 00:51:00,250
just come to me

00:51:09,690 --> 00:51:15,540
that's really good thanks learned a

00:51:12,430 --> 00:51:15,540

YouTube URL: https://www.youtube.com/watch?v=Pr2PV3DPfe0


