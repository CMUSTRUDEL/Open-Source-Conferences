Title: DrupalCon New Orleans 2016: Building Rich Apps with Angular 2 and Drupal
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	Angular is the most performant solution for building client-side web application. With version 2, Angular has been transformed from a framework for building web application to an application platform. Thanks to a rich ecosystem of components and tools and outstanding performance of the core framework, developers using Angular 2 can build modern applications that provide awesome user experiences. As a universal application platform, Angular 2 supports building applications that run everywhere from server to desktop and mobile.

The Angular and Drupal team have been colaborating on integrating Angular 2 with Drupal to combine the rich client-side user experience provided by Angular with the power of Drupal on the server-side.

During this talk we'll briefly discuss Angular 2, but we'll primarily focus on the Drupal integration, the current state and future directions. Developers interested in consolidating their JavaScript code will walk away with knowledge about how Angular 2 can seamlesly integrate with Drupal, how they will benefit from using Angular in their Drupal applications, and how they could build their own Drupal components with Angular 2.

The attendees are expected to have solid understanding of Drupal, building components with Drupal, and basic to intermediate JavaScript knowledge. No prior Angular knowledge is expected for this talk.
Captions: 
	00:00:00,140 --> 00:00:08,309
we're so if you have any people went to

00:00:03,689 --> 00:00:10,980
the first horizons talk okay Wow so

00:00:08,309 --> 00:00:13,679
actually smaller than I thought so this

00:00:10,980 --> 00:00:16,109
is the first in a series today of talks

00:00:13,679 --> 00:00:17,820
about oh I should okay let's back up my

00:00:16,109 --> 00:00:19,230
name is David I've with Jason in the

00:00:17,820 --> 00:00:21,330
back or your track shares with this new

00:00:19,230 --> 00:00:23,250
horizons track this was sort of an

00:00:21,330 --> 00:00:25,080
across between an experiment and a labor

00:00:23,250 --> 00:00:27,390
of love for us here this is a very new

00:00:25,080 --> 00:00:29,369
thing bringing in speakers from outside

00:00:27,390 --> 00:00:30,660
the Drupal universe and or speaking

00:00:29,369 --> 00:00:33,540
about things that weren't distinctly

00:00:30,660 --> 00:00:35,610
Drupal centric to bring new ideas to the

00:00:33,540 --> 00:00:37,200
table and as you can see with the idea

00:00:35,610 --> 00:00:39,300
audience here that's definitely

00:00:37,200 --> 00:00:42,020
definitely resonating with some people

00:00:39,300 --> 00:00:44,309
this is the first talk of a series today

00:00:42,020 --> 00:00:46,440
exploring integrations with various

00:00:44,309 --> 00:00:48,239
front-end frameworks following Stevens

00:00:46,440 --> 00:00:51,059
talk today they're also be a talk with

00:00:48,239 --> 00:00:54,090
Ed Faulkner from the Ember project and

00:00:51,059 --> 00:00:55,500
they're also talks on elm and tomorrow

00:00:54,090 --> 00:00:58,949
there'll be a talk about an integration

00:00:55,500 --> 00:01:00,989
with react from dick Olson so lots of

00:00:58,949 --> 00:01:02,460
stuff to talk about by no means is this

00:01:00,989 --> 00:01:04,290
an all JavaScript track there are other

00:01:02,460 --> 00:01:05,519
things within horizon so please don't

00:01:04,290 --> 00:01:06,630
expect we couldn't fit all the

00:01:05,519 --> 00:01:07,830
frameworks in there we probably kick

00:01:06,630 --> 00:01:09,420
yourself and then we'd have to rename

00:01:07,830 --> 00:01:13,049
this conference j/s comp jr. or

00:01:09,420 --> 00:01:15,720
something so I'm going to introduced

00:01:13,049 --> 00:01:18,180
Steven here I wanted to say Stefon by

00:01:15,720 --> 00:01:21,000
the way go warriors stephen is from the

00:01:18,180 --> 00:01:23,130
developer advocacy team and actually

00:01:21,000 --> 00:01:25,170
he's developer advocate with the Ember

00:01:23,130 --> 00:01:28,259
team oh my god the angular team at

00:01:25,170 --> 00:01:29,369
Google he just does stuff and he's going

00:01:28,259 --> 00:01:32,479
to talk about angular how about that

00:01:29,369 --> 00:01:32,479
i'll stop talking thank you everybody

00:01:36,520 --> 00:01:40,729
well thank you guys so much for having

00:01:38,750 --> 00:01:42,409
me can you hear me this Mike situations

00:01:40,729 --> 00:01:45,409
a little bit weird you hear me ok

00:01:42,409 --> 00:01:47,450
perfect all right so as he said I'm

00:01:45,409 --> 00:01:49,220
Stephen flew in I work for Google out in

00:01:47,450 --> 00:01:52,369
mountain view but I'm on the angular

00:01:49,220 --> 00:01:53,720
core team and I joined recently so I get

00:01:52,369 --> 00:01:55,310
to have a lot of fun and hang out with

00:01:53,720 --> 00:01:58,220
cool people like Igor and Michiko if

00:01:55,310 --> 00:01:59,450
anybody knows them we're going to see if

00:01:58,220 --> 00:02:01,399
the clicker is going to work that's

00:01:59,450 --> 00:02:03,080
gonna be the first failure alright so

00:02:01,399 --> 00:02:05,990
this presentation is really going to

00:02:03,080 --> 00:02:07,490
have about four sections so the first

00:02:05,990 --> 00:02:08,780
one a lot of you are probably new to

00:02:07,490 --> 00:02:11,150
angular so I'm going to do a little bit

00:02:08,780 --> 00:02:12,470
of background kind of on what your is

00:02:11,150 --> 00:02:15,110
where it comes from and where we are

00:02:12,470 --> 00:02:16,450
today then I'm going to go into a kind

00:02:15,110 --> 00:02:18,709
of three different case studies of

00:02:16,450 --> 00:02:20,840
community works that are involving

00:02:18,709 --> 00:02:22,940
angular and drupal and trying to bring

00:02:20,840 --> 00:02:25,489
kind of them together in the best ways

00:02:22,940 --> 00:02:28,810
possible so kind of get started how many

00:02:25,489 --> 00:02:31,370
people here are JavaScript developers

00:02:28,810 --> 00:02:33,560
okay that's more than half of you which

00:02:31,370 --> 00:02:34,880
is fantastic and then all of those

00:02:33,560 --> 00:02:37,970
JavaScript developers how many of you

00:02:34,880 --> 00:02:42,170
built something with angular whoo yes

00:02:37,970 --> 00:02:43,730
give yourself a round of applause all

00:02:42,170 --> 00:02:45,530
right and then of those people who've

00:02:43,730 --> 00:02:47,870
built things of angular how many people

00:02:45,530 --> 00:02:50,030
have build things with angular 2 all

00:02:47,870 --> 00:02:51,380
right a much smaller group but still

00:02:50,030 --> 00:02:54,980
significant so that that's kind of

00:02:51,380 --> 00:02:56,750
exciting how many saw about half of you

00:02:54,980 --> 00:02:58,430
had attended their earlier presentation

00:02:56,750 --> 00:03:00,709
so i'll try and put this presentation in

00:02:58,430 --> 00:03:02,930
context i'm going to specifically look

00:03:00,709 --> 00:03:04,640
at the angular parts of some of things

00:03:02,930 --> 00:03:06,170
that we were talking about earlier and

00:03:04,640 --> 00:03:08,060
then i'm going to go a little bit deeper

00:03:06,170 --> 00:03:11,420
into how to do some of the things that

00:03:08,060 --> 00:03:12,680
they were showing off so i'll start off

00:03:11,420 --> 00:03:14,090
for those of you that aren't familiar

00:03:12,680 --> 00:03:16,010
with an yura haven't built anything with

00:03:14,090 --> 00:03:19,190
angular and talk a little bit about what

00:03:16,010 --> 00:03:22,190
angular is so we just launched a new

00:03:19,190 --> 00:03:24,829
website last week and it really puts it

00:03:22,190 --> 00:03:27,170
in a really fantastic way how to start

00:03:24,829 --> 00:03:28,790
thinking about angular and your aims to

00:03:27,170 --> 00:03:30,470
simplify both the development and the

00:03:28,790 --> 00:03:32,570
testing

00:03:30,470 --> 00:03:33,890
web applications by providing a

00:03:32,570 --> 00:03:35,810
framework for client-side

00:03:33,890 --> 00:03:38,150
model-view-controller and model view

00:03:35,810 --> 00:03:39,740
viewmodel architectures along with

00:03:38,150 --> 00:03:42,020
components commonly used in rich

00:03:39,740 --> 00:03:43,280
Internet applications and so that I

00:03:42,020 --> 00:03:44,900
think actually comes from the wikipedia

00:03:43,280 --> 00:03:47,060
page and one of the things you're going

00:03:44,900 --> 00:03:49,400
to see is that the angular community is

00:03:47,060 --> 00:03:51,380
really at a turning point is progressing

00:03:49,400 --> 00:03:53,720
so angular came out about five years ago

00:03:51,380 --> 00:03:56,000
I think and for the past few years we've

00:03:53,720 --> 00:03:58,040
actually been working on the second

00:03:56,000 --> 00:03:59,540
version of angular which really focuses

00:03:58,040 --> 00:04:01,280
on fixing a lot of the things that we

00:03:59,540 --> 00:04:03,350
identified in the the first version of

00:04:01,280 --> 00:04:04,970
angular as allowing developers to kind

00:04:03,350 --> 00:04:07,850
of shoot themselves in the foot so to

00:04:04,970 --> 00:04:10,459
say so angular is a web application

00:04:07,850 --> 00:04:12,380
framework it really aims to simplify

00:04:10,459 --> 00:04:14,330
kind of both the development and the

00:04:12,380 --> 00:04:16,549
testing of Internet application so one

00:04:14,330 --> 00:04:17,660
of the the core fundamentals that we're

00:04:16,549 --> 00:04:18,799
going to talk about and kind of think

00:04:17,660 --> 00:04:21,230
about throughout this whole presentation

00:04:18,799 --> 00:04:22,640
is when you're building something how do

00:04:21,230 --> 00:04:23,690
you make it testable how do you make

00:04:22,640 --> 00:04:25,100
sure that as you're building something

00:04:23,690 --> 00:04:26,540
that's going to scale and function

00:04:25,100 --> 00:04:29,000
across teams are going to multiple

00:04:26,540 --> 00:04:30,980
developers touching it how do you test

00:04:29,000 --> 00:04:33,080
that how do you build these things in

00:04:30,980 --> 00:04:34,580
isolation because if you contrast that

00:04:33,080 --> 00:04:35,930
to some of the ways that we've written

00:04:34,580 --> 00:04:38,090
JavaScript over the past few years

00:04:35,930 --> 00:04:40,310
without a framework right where you've

00:04:38,090 --> 00:04:42,410
got your fantastic Drupal back end and

00:04:40,310 --> 00:04:44,660
then you're starting to apply kind of

00:04:42,410 --> 00:04:46,760
spot improvements to the experience with

00:04:44,660 --> 00:04:50,540
JavaScript those can kind of fall apart

00:04:46,760 --> 00:04:55,010
when you get to a certain scale how many

00:04:50,540 --> 00:04:57,229
people have seen whether calm almost

00:04:55,010 --> 00:04:58,520
everyone here so I think whether calm as

00:04:57,229 --> 00:05:01,460
they said the earlier presentation is

00:04:58,520 --> 00:05:03,890
actually a fantastic example of a site

00:05:01,460 --> 00:05:05,690
that is using both angular and Drupal

00:05:03,890 --> 00:05:06,979
and so what they're doing here is

00:05:05,690 --> 00:05:09,800
they're using Drupal for all the work

00:05:06,979 --> 00:05:11,240
flows all the management of content and

00:05:09,800 --> 00:05:13,010
so it really puts the structure in which

00:05:11,240 --> 00:05:15,080
they as an organization relate to their

00:05:13,010 --> 00:05:16,880
website but then what they're doing is

00:05:15,080 --> 00:05:19,310
they want a better developer experience

00:05:16,880 --> 00:05:21,320
for building these kind of rich moments

00:05:19,310 --> 00:05:23,450
within the application and so they're

00:05:21,320 --> 00:05:25,460
using angular to achieve that and some

00:05:23,450 --> 00:05:28,870
of that is with Matt's help here

00:05:25,460 --> 00:05:31,639
on angular really lets developers

00:05:28,870 --> 00:05:34,099
maintain large complex applications and

00:05:31,639 --> 00:05:35,840
so what do I mean by large complex

00:05:34,099 --> 00:05:38,449
application so I was referring earlier

00:05:35,840 --> 00:05:39,590
to this concept that you build a script

00:05:38,449 --> 00:05:41,509
right so historically you might have

00:05:39,590 --> 00:05:43,250
done that with jquery and then you build

00:05:41,509 --> 00:05:44,449
a modification in that script and now

00:05:43,250 --> 00:05:46,550
suddenly you've got about eight hundred

00:05:44,449 --> 00:05:49,370
lines of completely unmaintained well

00:05:46,550 --> 00:05:52,610
javascript does that happen anyone ok a

00:05:49,370 --> 00:05:53,690
few of you so the idea behind angular is

00:05:52,610 --> 00:05:55,460
that we're actually going to give you a

00:05:53,690 --> 00:05:58,310
framework and we're going to lay the

00:05:55,460 --> 00:06:00,080
groundwork for you to actually architect

00:05:58,310 --> 00:06:02,360
your application in a little bit more of

00:06:00,080 --> 00:06:06,050
a solid way that lets you scale and it

00:06:02,360 --> 00:06:08,360
lets you develop more effectively so a

00:06:06,050 --> 00:06:10,520
lot of people here had used angular 1

00:06:08,360 --> 00:06:11,900
but as you guys may know things are

00:06:10,520 --> 00:06:13,460
changing so I'm gonna give a brief

00:06:11,900 --> 00:06:16,729
status update kind of where we are as of

00:06:13,460 --> 00:06:20,479
May of 2016 so we had about a year ago

00:06:16,729 --> 00:06:22,190
we had one point whatever million or

00:06:20,479 --> 00:06:24,470
anything is 1.1 million angular

00:06:22,190 --> 00:06:26,569
developers according to our Doc's site

00:06:24,470 --> 00:06:28,190
which is really exciting I mean that

00:06:26,569 --> 00:06:30,440
that's a huge amount of growth since the

00:06:28,190 --> 00:06:34,250
creation of angular but then kind of

00:06:30,440 --> 00:06:36,919
flash floor to may of 2016 we're at 1.3

00:06:34,250 --> 00:06:38,840
million users of angular 1 so any other

00:06:36,919 --> 00:06:41,419
one is still a fantastically growing

00:06:38,840 --> 00:06:44,449
platform but even though and you're one

00:06:41,419 --> 00:06:47,139
up until last week was not it was still

00:06:44,449 --> 00:06:49,669
in beta stage we already have more than

00:06:47,139 --> 00:06:52,310
360,000 developers building with angular

00:06:49,669 --> 00:06:53,870
2 so that that's a very exciting kind of

00:06:52,310 --> 00:06:56,180
trend that we're expecting to see and I

00:06:53,870 --> 00:07:01,130
think really echoes very well the growth

00:06:56,180 --> 00:07:03,469
event drupal 7 8 from the keynote and

00:07:01,130 --> 00:07:05,870
then as last week we announced that we'd

00:07:03,469 --> 00:07:07,639
finally hit our C so release candidate

00:07:05,870 --> 00:07:10,250
status so we've been in alphas and betas

00:07:07,639 --> 00:07:12,110
for a few years now and so the anyone

00:07:10,250 --> 00:07:13,430
that had done anything with angular is

00:07:12,110 --> 00:07:15,349
quite excited about the release

00:07:13,430 --> 00:07:16,610
candidate status and what that means is

00:07:15,349 --> 00:07:18,560
that we've kind of figured out the

00:07:16,610 --> 00:07:20,419
architecture we figured out all the

00:07:18,560 --> 00:07:21,620
fundamentals of how the the pieces are

00:07:20,419 --> 00:07:23,300
going to go together how you can build

00:07:21,620 --> 00:07:25,099
applications and now we're just

00:07:23,300 --> 00:07:26,479
polishing the tooling and some of the

00:07:25,099 --> 00:07:30,139
kind of final components that make

00:07:26,479 --> 00:07:32,210
angular great so in this shift from

00:07:30,139 --> 00:07:34,260
angular 1 2 nu or two there's really

00:07:32,210 --> 00:07:36,570
this idea of shifting from a

00:07:34,260 --> 00:07:38,190
framework into more of a platform so if

00:07:36,570 --> 00:07:40,230
anyone had built with an angular 1

00:07:38,190 --> 00:07:42,480
application it's really easy to get

00:07:40,230 --> 00:07:44,970
started right you throw ng dash app up

00:07:42,480 --> 00:07:46,830
in your HTML tag and then you start kind

00:07:44,970 --> 00:07:48,210
of throwing JavaScript controllers onto

00:07:46,830 --> 00:07:50,730
the page doesn't really matter where you

00:07:48,210 --> 00:07:51,690
put them we have kind of a style guide

00:07:50,730 --> 00:07:53,490
and there's there's really good

00:07:51,690 --> 00:07:55,440
standards on how to build a great and

00:07:53,490 --> 00:07:56,820
you learn one application but there's

00:07:55,440 --> 00:07:58,740
not really a lot of enforcement of any

00:07:56,820 --> 00:07:59,880
of those things which can be very

00:07:58,740 --> 00:08:02,520
powerful it can be very easy to get

00:07:59,880 --> 00:08:04,590
started but it kind of lacks the ability

00:08:02,520 --> 00:08:06,480
to build one of these kind of true

00:08:04,590 --> 00:08:08,100
applications in terms of the way that's

00:08:06,480 --> 00:08:10,920
maintainable and testable that is what

00:08:08,100 --> 00:08:14,010
we're really trying to support and so as

00:08:10,920 --> 00:08:15,390
you look at angular 2 it's not just the

00:08:14,010 --> 00:08:17,250
the angular framework we're really

00:08:15,390 --> 00:08:18,510
looking at doing a number of different

00:08:17,250 --> 00:08:20,970
things that makes the whole application

00:08:18,510 --> 00:08:21,960
of element process easier I've got a few

00:08:20,970 --> 00:08:23,520
of these up here on the slides

00:08:21,960 --> 00:08:25,010
everything from we've got a command-line

00:08:23,520 --> 00:08:28,260
interface for building applications

00:08:25,010 --> 00:08:29,880
there's browser based tools like augury

00:08:28,260 --> 00:08:31,950
for inspecting state things like that

00:08:29,880 --> 00:08:34,770
and then we've got kind of this whole

00:08:31,950 --> 00:08:36,510
suite of components and modules such as

00:08:34,770 --> 00:08:37,710
material designs that you can apply some

00:08:36,510 --> 00:08:39,690
of the material design principles and

00:08:37,710 --> 00:08:40,680
use kind of off-the-shelf input elements

00:08:39,690 --> 00:08:42,840
that look a little bit better than the

00:08:40,680 --> 00:08:44,850
standard HTML ones as well as something

00:08:42,840 --> 00:08:47,820
called angular Universal which I'll talk

00:08:44,850 --> 00:08:50,490
a little bit about later angular

00:08:47,820 --> 00:08:53,010
Universal is this idea that because

00:08:50,490 --> 00:08:55,110
we've now rebuilt the platform from a UL

00:08:53,010 --> 00:08:56,940
110 you are too we can actually do a lot

00:08:55,110 --> 00:08:58,200
of really interesting things and one of

00:08:56,940 --> 00:08:59,760
those things that you're going to hear a

00:08:58,200 --> 00:09:02,970
lot about over the next few months is

00:08:59,760 --> 00:09:05,100
the ability to run JavaScript code on

00:09:02,970 --> 00:09:07,290
the server side and actually render

00:09:05,100 --> 00:09:08,700
pre-render pages in the same way that

00:09:07,290 --> 00:09:10,650
you render them on the client but render

00:09:08,700 --> 00:09:11,850
them on the server so that on first load

00:09:10,650 --> 00:09:14,040
you don't actually have to wait for any

00:09:11,850 --> 00:09:15,630
of that rendering so this sounds a

00:09:14,040 --> 00:09:17,490
little bit weird in the context of a

00:09:15,630 --> 00:09:19,380
Drupal conference where drupal's kind of

00:09:17,490 --> 00:09:20,520
historically handled a lot of that but

00:09:19,380 --> 00:09:22,880
there's some very nice ways that it can

00:09:20,520 --> 00:09:22,880
play together

00:09:23,130 --> 00:09:27,730
one of the things that we did just prior

00:09:26,050 --> 00:09:30,100
to the release candidate status of

00:09:27,730 --> 00:09:31,630
angular 2 is we actually broke and you

00:09:30,100 --> 00:09:34,360
are into a bunch of different kind of

00:09:31,630 --> 00:09:36,760
core modules so you've got core you've

00:09:34,360 --> 00:09:39,340
got common you've got compiler you've

00:09:36,760 --> 00:09:41,560
got browser and so reflecting on kind of

00:09:39,340 --> 00:09:43,630
angular 2 universe or angular universal

00:09:41,560 --> 00:09:45,760
we're really trying to allow developers

00:09:43,630 --> 00:09:47,590
to optimize for different things and so

00:09:45,760 --> 00:09:48,790
because we've got this modular structure

00:09:47,590 --> 00:09:51,340
you can actually build an application

00:09:48,790 --> 00:09:53,530
that is optimized for setup so those

00:09:51,340 --> 00:09:54,660
that are set of 2 the amount of set-up

00:09:53,530 --> 00:09:56,620
time it takes to build an application

00:09:54,660 --> 00:09:58,180
whether that's browser-based application

00:09:56,620 --> 00:10:00,370
or running something running on the

00:09:58,180 --> 00:10:01,960
server side either with no door with

00:10:00,370 --> 00:10:04,540
some of the other compilation tools or

00:10:01,960 --> 00:10:05,680
whether your payload sensitive and often

00:10:04,540 --> 00:10:07,320
what we see is that developers are

00:10:05,680 --> 00:10:09,910
actually at kind of different stages

00:10:07,320 --> 00:10:11,440
throughout the process there have

00:10:09,910 --> 00:10:12,580
different sensitivities right so when

00:10:11,440 --> 00:10:13,690
you first want to get started when you

00:10:12,580 --> 00:10:15,280
want to build your first angular

00:10:13,690 --> 00:10:16,600
component and use it within Drupal

00:10:15,280 --> 00:10:17,950
you're actually going to be much more

00:10:16,600 --> 00:10:19,210
setup sensitive you're right you don't

00:10:17,950 --> 00:10:20,650
want to worry about compilation you

00:10:19,210 --> 00:10:23,140
don't really care how big your your

00:10:20,650 --> 00:10:24,880
binary files are or your your compiled

00:10:23,140 --> 00:10:26,560
JavaScript files are you really just

00:10:24,880 --> 00:10:28,480
want it to work and see your code on the

00:10:26,560 --> 00:10:30,880
screen but then we also have the ability

00:10:28,480 --> 00:10:33,370
to do payload sensitive builds so if you

00:10:30,880 --> 00:10:34,660
care about the size of in the amount of

00:10:33,370 --> 00:10:35,980
JavaScript that you're actually sending

00:10:34,660 --> 00:10:38,350
down to a user for performance reasons

00:10:35,980 --> 00:10:41,440
there's a ton of optimization we can do

00:10:38,350 --> 00:10:43,750
around that even to the point of you can

00:10:41,440 --> 00:10:45,880
pre-render or pre compile all of your

00:10:43,750 --> 00:10:47,560
templates and then just ship the parts

00:10:45,880 --> 00:10:49,150
of angular that you actually need so in

00:10:47,560 --> 00:10:52,270
some cases you can get down to less than

00:10:49,150 --> 00:10:54,339
50 kilobytes for the framework and then

00:10:52,270 --> 00:10:56,439
you just need your app on top of that

00:10:54,339 --> 00:10:59,439
one of the things that we kind of have

00:10:56,439 --> 00:11:01,300
to talk about as part of any or two is

00:10:59,439 --> 00:11:03,220
this shift that we're making in terms of

00:11:01,300 --> 00:11:04,360
the kind of preferred way of writing and

00:11:03,220 --> 00:11:07,480
you or two so we still support

00:11:04,360 --> 00:11:09,610
javascript as well as dart but a lot of

00:11:07,480 --> 00:11:10,449
the code examples and a lot of the code

00:11:09,610 --> 00:11:12,819
that we're going to look at today is

00:11:10,449 --> 00:11:14,019
using typescript how many people here

00:11:12,819 --> 00:11:16,660
have written typescript or seen

00:11:14,019 --> 00:11:18,220
typescript before okay how do you guys

00:11:16,660 --> 00:11:21,699
feel about it you guys like it is it

00:11:18,220 --> 00:11:23,110
good I'm seeing some thumbs up so

00:11:21,699 --> 00:11:24,730
typescript for those of you that don't

00:11:23,110 --> 00:11:27,309
know about it it's really just an

00:11:24,730 --> 00:11:29,649
extension to JavaScript so if you look

00:11:27,309 --> 00:11:31,509
at what we have today the the lowest

00:11:29,649 --> 00:11:34,389
common denominator across all of the

00:11:31,509 --> 00:11:36,730
browsers is we call it es 5 or echamos

00:11:34,389 --> 00:11:38,019
script version 5 so that's the set of

00:11:36,730 --> 00:11:40,839
JavaScript functions that we all kind of

00:11:38,019 --> 00:11:43,209
have been used to building with but over

00:11:40,839 --> 00:11:44,680
the past year or two the standards

00:11:43,209 --> 00:11:46,779
bodies have actually picked up a ton of

00:11:44,680 --> 00:11:48,879
speed in terms of saying hey we can

00:11:46,779 --> 00:11:51,879
build a better language of JavaScript

00:11:48,879 --> 00:11:54,730
right because if you've ever built a new

00:11:51,879 --> 00:11:56,829
function for example you can lose things

00:11:54,730 --> 00:11:58,959
like this right what does this refer to

00:11:56,829 --> 00:12:00,429
and that gets very confusing and you get

00:11:58,959 --> 00:12:02,470
very lost when you're building any sort

00:12:00,429 --> 00:12:05,529
of application at scale and so they're

00:12:02,470 --> 00:12:07,300
starting to fix these things in yes 2015

00:12:05,529 --> 00:12:09,399
es 2016 these are the sets of standards

00:12:07,300 --> 00:12:12,249
that have come out but what typescript

00:12:09,399 --> 00:12:13,899
is is they supply a compiler on top of

00:12:12,249 --> 00:12:15,639
those things that actually gets you all

00:12:13,899 --> 00:12:17,379
the way back to JavaScript so the idea

00:12:15,639 --> 00:12:20,769
is you can write an entire application

00:12:17,379 --> 00:12:22,899
or platform using typescript which gives

00:12:20,769 --> 00:12:25,360
you all of the latest features of es2015

00:12:22,899 --> 00:12:27,550
yes 2016 as well as some of the draft

00:12:25,360 --> 00:12:29,649
stuff for me as 2017 but then you also

00:12:27,550 --> 00:12:32,040
get types and so for anyone that has

00:12:29,649 --> 00:12:35,110
come from a more of a dotnet Java world

00:12:32,040 --> 00:12:36,670
typing can be very very powerful because

00:12:35,110 --> 00:12:38,439
what it allows you to use it allows you

00:12:36,670 --> 00:12:40,779
to use static analysis of your code as

00:12:38,439 --> 00:12:43,059
you write it so that instead of waiting

00:12:40,779 --> 00:12:44,679
for runtime to see if something you're

00:12:43,059 --> 00:12:46,569
getting back from a method call is the

00:12:44,679 --> 00:12:48,399
right thing and then ending up in kind

00:12:46,569 --> 00:12:49,839
of an odd error situation especially if

00:12:48,399 --> 00:12:51,189
you're running code in production you

00:12:49,839 --> 00:12:52,740
can actually discover a lot of those

00:12:51,189 --> 00:12:55,020
types of errors

00:12:52,740 --> 00:12:56,910
right time right so that before you even

00:12:55,020 --> 00:12:59,279
ship that bug you're able to find that

00:12:56,910 --> 00:13:01,950
and resolve that the other thing that we

00:12:59,279 --> 00:13:03,089
can do because of typescript is I talked

00:13:01,950 --> 00:13:05,580
a lot about that and you are to

00:13:03,089 --> 00:13:07,770
Universal mentality and the ability to

00:13:05,580 --> 00:13:09,720
run and kind of prune these things on

00:13:07,770 --> 00:13:11,399
the server a lot of that uses types

00:13:09,720 --> 00:13:13,470
right because if we know what types of

00:13:11,399 --> 00:13:14,790
data your application is using we can

00:13:13,470 --> 00:13:18,060
make sure that we only load the right

00:13:14,790 --> 00:13:20,459
appropriate modules so I'm going to jump

00:13:18,060 --> 00:13:22,500
into those three kind of community

00:13:20,459 --> 00:13:24,810
contributions that I've been a little

00:13:22,500 --> 00:13:26,430
bit involved in and so the first one is

00:13:24,810 --> 00:13:29,040
going to be loading angular width in

00:13:26,430 --> 00:13:31,230
Drupal so this is one step towards the

00:13:29,040 --> 00:13:33,360
client so earlier today we talked about

00:13:31,230 --> 00:13:35,730
this idea that historically all of the

00:13:33,360 --> 00:13:38,010
rendering happens by the Drupal server

00:13:35,730 --> 00:13:40,110
by the templating engine and then gets

00:13:38,010 --> 00:13:42,450
shipped down to the user as a browser

00:13:40,110 --> 00:13:43,860
page and then anytime you want to

00:13:42,450 --> 00:13:45,810
perform action on that page or clicking

00:13:43,860 --> 00:13:47,940
on a button or taking an action that's

00:13:45,810 --> 00:13:49,680
another request back to the server a

00:13:47,940 --> 00:13:51,089
full round trip you need to reload all

00:13:49,680 --> 00:13:52,680
the elements and caching and help that

00:13:51,089 --> 00:13:55,020
but there's still a round trip necessary

00:13:52,680 --> 00:13:56,580
there whereas with when you start

00:13:55,020 --> 00:13:57,959
integrating angular you're actually able

00:13:56,580 --> 00:14:02,250
to do a lot of those things client-side

00:13:57,959 --> 00:14:03,899
I will warn you that this method is not

00:14:02,250 --> 00:14:05,550
the ideal method I just wanted to kind

00:14:03,899 --> 00:14:08,010
of show you one way of thinking about

00:14:05,550 --> 00:14:10,890
this and this is working with the latest

00:14:08,010 --> 00:14:14,120
version of angular as well so let's jump

00:14:10,890 --> 00:14:16,380
in and see if I can get this demo going

00:14:14,120 --> 00:14:18,420
and I'm going to go into this approach a

00:14:16,380 --> 00:14:21,480
little bit but I do want to say that if

00:14:18,420 --> 00:14:23,190
you are not interested in helping with

00:14:21,480 --> 00:14:24,480
the framework or understanding the

00:14:23,190 --> 00:14:25,649
underlying framework you can actually

00:14:24,480 --> 00:14:28,079
just take a lot of this boilerplate

00:14:25,649 --> 00:14:29,610
stuff and not have to deal with it so

00:14:28,079 --> 00:14:31,560
from the user perspective what we're

00:14:29,610 --> 00:14:34,200
going to see here is I'm on a Drupal

00:14:31,560 --> 00:14:38,100
site and what we've done is we've

00:14:34,200 --> 00:14:40,709
created a module called Jas exploration

00:14:38,100 --> 00:14:42,720
and what that module does is that loads

00:14:40,709 --> 00:14:44,670
the angular it declares all of the

00:14:42,720 --> 00:14:46,589
angular libraries as dependencies so

00:14:44,670 --> 00:14:49,110
that they get loaded by drupal when you

00:14:46,589 --> 00:14:50,730
load the page really loading any page

00:14:49,110 --> 00:14:55,050
and then what it's doing is it's

00:14:50,730 --> 00:14:56,550
replacing the comment rendering box with

00:14:55,050 --> 00:14:58,620
an angular 1 and so we're going to see

00:14:56,550 --> 00:15:01,770
these are comments by angular 2 you can

00:14:58,620 --> 00:15:03,360
see all those comments and so what's

00:15:01,770 --> 00:15:04,329
cool about this is you can actually run

00:15:03,360 --> 00:15:06,999
anything client side

00:15:04,329 --> 00:15:09,670
theoretically I could hit new comment

00:15:06,999 --> 00:15:11,860
get some text fields edit them submit

00:15:09,670 --> 00:15:13,449
that all without a page refresh and so I

00:15:11,860 --> 00:15:15,369
know that that's a very dumb small

00:15:13,449 --> 00:15:16,480
example but I want to show you a little

00:15:15,369 --> 00:15:18,720
bit about what's going on behind the

00:15:16,480 --> 00:15:18,720
scenes

00:15:40,520 --> 00:15:43,940
alright so there's really four things

00:15:42,380 --> 00:15:45,550
that we're doing here first we're

00:15:43,940 --> 00:15:47,330
loading the libraries onto the page

00:15:45,550 --> 00:15:49,070
second we're bootstrapping the

00:15:47,330 --> 00:15:51,230
application so this this is a standard

00:15:49,070 --> 00:15:53,870
part of any sort of angular app and then

00:15:51,230 --> 00:15:56,450
angular 2 is rendering all of the

00:15:53,870 --> 00:15:57,680
comments via components and then we're

00:15:56,450 --> 00:15:59,810
going to asynchronously load those

00:15:57,680 --> 00:16:04,010
comments so first thing loading

00:15:59,810 --> 00:16:05,750
libraries under the page we knew the

00:16:04,010 --> 00:16:10,490
internet would go down I think we all

00:16:05,750 --> 00:16:12,290
knew that right all right let's see if

00:16:10,490 --> 00:16:18,010
this loads otherwise I'm going to tether

00:16:12,290 --> 00:16:18,010
to my foot you said this would happen

00:16:18,290 --> 00:16:22,430
hey there we go all right I'll try and

00:16:21,290 --> 00:16:25,100
minimize the switching back and forth

00:16:22,430 --> 00:16:27,310
between the presentation so what we're

00:16:25,100 --> 00:16:31,759
doing here is this is just a standard

00:16:27,310 --> 00:16:34,009
Drupal llamo file so this is the module

00:16:31,759 --> 00:16:36,709
declaration and in the modulation I'm

00:16:34,009 --> 00:16:38,389
saying I depend on all the libraries in

00:16:36,709 --> 00:16:40,490
this file and then we're going to flip

00:16:38,389 --> 00:16:42,860
forward to that file and what i'm doing

00:16:40,490 --> 00:16:44,449
here is i'm loading that latest RC so if

00:16:42,860 --> 00:16:46,069
we talk if you remember talking about

00:16:44,449 --> 00:16:48,199
setup sensitive versus payload sensitive

00:16:46,069 --> 00:16:49,339
this is the setup sensitive one so I'm

00:16:48,199 --> 00:16:51,680
going to be loading all of these

00:16:49,339 --> 00:16:53,750
polyfills so a polyfill for those that

00:16:51,680 --> 00:16:56,029
have not really come from the JavaScript

00:16:53,750 --> 00:16:58,790
world a polyfill adds features into the

00:16:56,029 --> 00:17:01,190
browser so that you can use newer modern

00:16:58,790 --> 00:17:02,899
JavaScript and typescript capabilities

00:17:01,190 --> 00:17:04,850
without waiting for the browser to

00:17:02,899 --> 00:17:06,860
actually support it and so we're loading

00:17:04,850 --> 00:17:10,549
these modules and then we're defining

00:17:06,860 --> 00:17:12,709
both a config and an import then what we

00:17:10,549 --> 00:17:14,000
do is we within that configuration file

00:17:12,709 --> 00:17:15,410
and within that import file we're going

00:17:14,000 --> 00:17:17,780
to bootstrap our application with

00:17:15,410 --> 00:17:19,280
systems a/s and so in the angular world

00:17:17,780 --> 00:17:22,640
world that what that actually means is

00:17:19,280 --> 00:17:24,020
instead of loading every requirement

00:17:22,640 --> 00:17:27,079
every dependency that your application

00:17:24,020 --> 00:17:28,669
has as a script tag as a lot of us have

00:17:27,079 --> 00:17:31,730
been used to doing it's actually going

00:17:28,669 --> 00:17:33,440
to load those via ex hrs and so the the

00:17:31,730 --> 00:17:34,730
benefit of that is theoretically it's

00:17:33,440 --> 00:17:37,220
only going to load the things that you

00:17:34,730 --> 00:17:39,919
need when you need them right so if your

00:17:37,220 --> 00:17:41,690
application never uses a whole module of

00:17:39,919 --> 00:17:44,299
your app it's not going to actually load

00:17:41,690 --> 00:17:46,730
that into your applique into the memory

00:17:44,299 --> 00:17:49,580
of the browser so I'm defining here my

00:17:46,730 --> 00:17:51,500
application I'm defining that I want to

00:17:49,580 --> 00:17:54,530
transpile it so if we talked earlier

00:17:51,500 --> 00:17:55,309
about typescript this these kind of few

00:17:54,530 --> 00:17:57,169
lines of code will actually

00:17:55,309 --> 00:17:58,549
automatically handle turning the

00:17:57,169 --> 00:18:00,950
typescript into JavaScript that you can

00:17:58,549 --> 00:18:03,330
ship and run on the client side

00:18:00,950 --> 00:18:06,120
and then we've got an import JS file

00:18:03,330 --> 00:18:09,600
which is actually going to now run that

00:18:06,120 --> 00:18:11,870
that bootstrapping second what we're

00:18:09,600 --> 00:18:18,030
doing is we're using angular to render

00:18:11,870 --> 00:18:20,820
the comment components here so this is a

00:18:18,030 --> 00:18:21,840
very very standard and your component

00:18:20,820 --> 00:18:23,730
and I'll actually walk you through a

00:18:21,840 --> 00:18:25,800
very simple one a little bit later today

00:18:23,730 --> 00:18:27,900
so it's got a selector and what that

00:18:25,800 --> 00:18:30,060
selector does is it takes a standard

00:18:27,900 --> 00:18:31,050
HTML tag and then says hey whenever you

00:18:30,060 --> 00:18:32,640
see this we're actually going to be

00:18:31,050 --> 00:18:35,190
rendering it as a functional component

00:18:32,640 --> 00:18:37,500
it's taking in providers because we want

00:18:35,190 --> 00:18:39,000
to be able to access the web so we're

00:18:37,500 --> 00:18:42,750
going to use both the comment service

00:18:39,000 --> 00:18:44,340
that wraps the the way of reading and

00:18:42,750 --> 00:18:45,930
writing comments and then we're also

00:18:44,340 --> 00:18:47,790
going to look at HTT providers which

00:18:45,930 --> 00:18:49,680
allows us to access the web by X a jar

00:18:47,790 --> 00:18:51,720
and then we're going to have sub

00:18:49,680 --> 00:18:53,760
components via these directives that

00:18:51,720 --> 00:18:56,310
allows you to actually have a nested

00:18:53,760 --> 00:18:57,540
component and so I talked a little bit

00:18:56,310 --> 00:18:59,070
earlier about the testability and

00:18:57,540 --> 00:19:00,990
maintainability of large applications

00:18:59,070 --> 00:19:02,850
built with angular 2 and so this is

00:19:00,990 --> 00:19:04,800
really core to the concept that each of

00:19:02,850 --> 00:19:06,240
the times that you're going to nest an

00:19:04,800 --> 00:19:08,250
application you really want to be

00:19:06,240 --> 00:19:09,990
building new components and so those

00:19:08,250 --> 00:19:11,760
components really well correspond with

00:19:09,990 --> 00:19:13,620
kind of angular or with drupal

00:19:11,760 --> 00:19:18,150
components that dress was talking about

00:19:13,620 --> 00:19:19,500
earlier today and then using that that

00:19:18,150 --> 00:19:21,150
service that we mentioned in the

00:19:19,500 --> 00:19:22,560
previous slide we're actually going to

00:19:21,150 --> 00:19:25,200
now go out and get that so it's a very

00:19:22,560 --> 00:19:27,120
simple set of code when this component

00:19:25,200 --> 00:19:28,590
load so it's called ng on in it which is

00:19:27,120 --> 00:19:30,870
just the the callback for once it's

00:19:28,590 --> 00:19:32,160
loaded we're going to use that common

00:19:30,870 --> 00:19:33,480
service we're going to run get comments

00:19:32,160 --> 00:19:35,700
and we're going to pass in the path from

00:19:33,480 --> 00:19:37,320
Drupal so depending on the node that

00:19:35,700 --> 00:19:38,460
you're actually in with in Drupal we're

00:19:37,320 --> 00:19:42,750
going to load the the right set of

00:19:38,460 --> 00:19:45,390
comments so I want to give a huge thanks

00:19:42,750 --> 00:19:47,640
to these people so if you look at the

00:19:45,390 --> 00:19:49,260
github repo I've made a bunch of changes

00:19:47,640 --> 00:19:51,300
to bring this up to the latest RC within

00:19:49,260 --> 00:19:52,790
any or two but this really is kind of a

00:19:51,300 --> 00:19:55,500
Drupal and an angular community

00:19:52,790 --> 00:19:56,970
collaboration I'm also going to blame

00:19:55,500 --> 00:19:59,010
matt davis for any of the demos that go

00:19:56,970 --> 00:20:02,260
bad

00:19:59,010 --> 00:20:04,240
so then so that's kind of a naive way of

00:20:02,260 --> 00:20:05,620
pulling angular into an application and

00:20:04,240 --> 00:20:07,809
starting to build these these kind of

00:20:05,620 --> 00:20:10,990
asynchronous loading components and

00:20:07,809 --> 00:20:12,490
pieces a better way that's in progress

00:20:10,990 --> 00:20:14,050
here is progressively decoupled blocks

00:20:12,490 --> 00:20:15,670
so anyone that attended the the earlier

00:20:14,050 --> 00:20:18,850
presentation is already familiar with

00:20:15,670 --> 00:20:19,929
this strategy so just a little bit about

00:20:18,850 --> 00:20:22,540
the theory for those of you that weren't

00:20:19,929 --> 00:20:24,340
there a traditional application as we

00:20:22,540 --> 00:20:26,410
said is entirely rendered by drupal and

00:20:24,340 --> 00:20:27,550
then shipped to the browser if you look

00:20:26,410 --> 00:20:29,320
forward a little bit there's this idea

00:20:27,550 --> 00:20:33,280
of fully decoupled where you're really

00:20:29,320 --> 00:20:35,080
just using drupal as a backend API which

00:20:33,280 --> 00:20:36,730
in some ways gets rid of some of the

00:20:35,080 --> 00:20:38,290
value right so because Drupal has a lot

00:20:36,730 --> 00:20:41,400
of logging it's got a lot of caching

00:20:38,290 --> 00:20:43,360
optimization it can automatically

00:20:41,400 --> 00:20:44,380
concatenate all of your JavaScript files

00:20:43,360 --> 00:20:46,630
and put them in the header and things

00:20:44,380 --> 00:20:48,010
like that and a fully decoupled

00:20:46,630 --> 00:20:49,480
application loses some of those things

00:20:48,010 --> 00:20:51,460
and then you've got the idea of a

00:20:49,480 --> 00:20:53,110
finally I progressively decoupled where

00:20:51,460 --> 00:20:55,330
you're still loading the kind of

00:20:53,110 --> 00:20:56,830
standard page from Drupal but then

00:20:55,330 --> 00:20:58,360
you're you're swapping out components

00:20:56,830 --> 00:21:01,210
are you loading angular on top of a lot

00:20:58,360 --> 00:21:04,330
of those components so I'm going to do a

00:21:01,210 --> 00:21:06,540
brief demo here let's just try and flip

00:21:04,330 --> 00:21:06,540
it

00:21:13,670 --> 00:21:17,339
you

00:21:15,149 --> 00:21:19,649
alright so i have another drupal site

00:21:17,339 --> 00:21:21,359
here so just as Matt demoed a little bit

00:21:19,649 --> 00:21:23,429
earlier I can actually go into the

00:21:21,359 --> 00:21:31,789
structure it's a little bit hard to see

00:21:23,429 --> 00:21:31,789
I apologize if I miss is that structure

00:21:33,570 --> 00:21:38,550
all right I don't know what's going on

00:21:35,160 --> 00:21:40,530
there so I will just skip that part so

00:21:38,550 --> 00:21:42,180
I'm actually loaded here the what we

00:21:40,530 --> 00:21:44,760
call the tour of heroes so if you look

00:21:42,180 --> 00:21:46,560
on the angular o website the first thing

00:21:44,760 --> 00:21:48,270
that we're going to ask you to do is

00:21:46,560 --> 00:21:49,260
part of learning the platform is to do

00:21:48,270 --> 00:21:51,060
this tour of heroes where you're

00:21:49,260 --> 00:21:53,130
actually going to basically let render a

00:21:51,060 --> 00:21:55,050
list of items and then have a detail

00:21:53,130 --> 00:22:01,260
view for all those items and so we've

00:21:55,050 --> 00:22:03,810
got all of the so this is why I don't

00:22:01,260 --> 00:22:05,580
like page flips this is why I want more

00:22:03,810 --> 00:22:07,920
things to be client-side because you can

00:22:05,580 --> 00:22:12,870
preload them and then not have to worry

00:22:07,920 --> 00:22:14,070
about the internet as much all right we

00:22:12,870 --> 00:22:17,880
might just go back to the presentation

00:22:14,070 --> 00:22:19,080
here all right so anyone that really

00:22:17,880 --> 00:22:21,750
wants to see a demo come and ask me

00:22:19,080 --> 00:22:27,270
later or Matt his presentation should

00:22:21,750 --> 00:22:29,520
also have a version of that and so if we

00:22:27,270 --> 00:22:32,610
compare the two approaches one of the

00:22:29,520 --> 00:22:34,890
things that the progressively d couple

00:22:32,610 --> 00:22:38,010
blocks has on the other one is that it

00:22:34,890 --> 00:22:39,720
only loads the angular framework if you

00:22:38,010 --> 00:22:42,780
have a block on the page that's

00:22:39,720 --> 00:22:43,860
requiring it so if you compare on if you

00:22:42,780 --> 00:22:45,510
think about how we were doing it before

00:22:43,860 --> 00:22:48,960
we're loading it kind of no matter what

00:22:45,510 --> 00:22:50,820
globally this is is much better and then

00:22:48,960 --> 00:22:52,380
the other thing that is the benefit of

00:22:50,820 --> 00:22:54,660
this approach is that all of the

00:22:52,380 --> 00:22:59,820
components are contextually aware so

00:22:54,660 --> 00:23:01,290
they droop ille parameters variables

00:22:59,820 --> 00:23:03,930
fields all of those things that are

00:23:01,290 --> 00:23:06,540
accessible via a Drupal object within

00:23:03,930 --> 00:23:07,380
JavaScript but then we definitely kind

00:23:06,540 --> 00:23:09,660
of from the angular component

00:23:07,380 --> 00:23:11,040
testability perspective we definitely

00:23:09,660 --> 00:23:12,360
recommend you wrap those things in a

00:23:11,040 --> 00:23:13,980
service so that they're easier to mock

00:23:12,360 --> 00:23:16,150
out if you're building any sort of

00:23:13,980 --> 00:23:19,030
testability in your application

00:23:16,150 --> 00:23:21,070
I do want to call it a couple to dues on

00:23:19,030 --> 00:23:22,780
the progressively decoupled blocks so I

00:23:21,070 --> 00:23:24,550
know Matt and the team are actually

00:23:22,780 --> 00:23:26,920
running sprints so if you guys want to

00:23:24,550 --> 00:23:28,780
contribute definitely go help out with

00:23:26,920 --> 00:23:30,040
that but one of the things that it's

00:23:28,780 --> 00:23:31,660
missing right now is that all of the

00:23:30,040 --> 00:23:33,550
rendering of the components is being

00:23:31,660 --> 00:23:35,140
done client side whereas I think there's

00:23:33,550 --> 00:23:37,660
an opportunity to run render some of

00:23:35,140 --> 00:23:40,450
that server side using angular Universal

00:23:37,660 --> 00:23:43,720
so that on first load you get the full

00:23:40,450 --> 00:23:45,130
content and then the angular platform

00:23:43,720 --> 00:23:46,930
will actually automatically can replace

00:23:45,130 --> 00:23:49,150
those with live elements and so if you

00:23:46,930 --> 00:23:50,740
want to see any of that working kind of

00:23:49,150 --> 00:23:53,320
outside of the context of Drupal check

00:23:50,740 --> 00:23:56,020
out the angular universal website and

00:23:53,320 --> 00:23:57,580
then the other thing that it's still

00:23:56,020 --> 00:24:01,000
kind of i would say in progress is the

00:23:57,580 --> 00:24:03,250
ability to build bundle and compile the

00:24:01,000 --> 00:24:04,120
angular 2 so with angular 2 platform

00:24:03,250 --> 00:24:06,400
you're actually able to compile

00:24:04,120 --> 00:24:08,980
templates you're able to do all those

00:24:06,400 --> 00:24:10,180
kind of optimizations so that you get a

00:24:08,980 --> 00:24:11,980
much smaller binary you get a much

00:24:10,180 --> 00:24:14,830
smaller framework and much faster

00:24:11,980 --> 00:24:16,240
framework those things are not actually

00:24:14,830 --> 00:24:21,340
being loaded in the the kind of tech

00:24:16,240 --> 00:24:22,480
demo that we've got today so huge thanks

00:24:21,340 --> 00:24:26,710
to matt davis for progressive lead a

00:24:22,480 --> 00:24:28,210
couple blocks the last kind of tech demo

00:24:26,710 --> 00:24:31,240
that i want to show today is twig

00:24:28,210 --> 00:24:33,550
rendering so if anyone's been building

00:24:31,240 --> 00:24:35,770
on Drupal 8 you're probably familiar

00:24:33,550 --> 00:24:37,720
twig templates and so whenever you're

00:24:35,770 --> 00:24:40,450
rendering something via the server side

00:24:37,720 --> 00:24:42,010
that's being done by a twig and so you

00:24:40,450 --> 00:24:43,750
may be thinking hey we've got all these

00:24:42,010 --> 00:24:45,460
templates that we want to keep using as

00:24:43,750 --> 00:24:47,800
we kind of rebuild parts of replication

00:24:45,460 --> 00:24:50,500
as we build new components what do we do

00:24:47,800 --> 00:24:52,390
about that and so one of the community

00:24:50,500 --> 00:24:56,370
contributors is actually built a way

00:24:52,390 --> 00:24:59,020
that will automatically render angular

00:24:56,370 --> 00:25:01,210
components using twig templates and so

00:24:59,020 --> 00:25:04,090
we're going to jump over to another demo

00:25:01,210 --> 00:25:05,380
in a second here if it loads but this is

00:25:04,090 --> 00:25:07,990
really kind of three things so they've

00:25:05,380 --> 00:25:10,360
got what we call the twig decorator so

00:25:07,990 --> 00:25:11,500
in angular you're able to an in

00:25:10,360 --> 00:25:14,110
typescript you're able to supply

00:25:11,500 --> 00:25:16,330
metadata about any sort of object and so

00:25:14,110 --> 00:25:18,880
that metadata is specified using

00:25:16,330 --> 00:25:20,830
decorator syntax and then you can either

00:25:18,880 --> 00:25:23,290
have inline templates or you can specify

00:25:20,830 --> 00:25:25,180
them out to a template URL and then it

00:25:23,290 --> 00:25:27,040
also tries to leverage an already

00:25:25,180 --> 00:25:28,960
existing project called twig DJ s which

00:25:27,040 --> 00:25:30,020
is doing the specific rendering and

00:25:28,960 --> 00:25:33,290
replacements

00:25:30,020 --> 00:25:37,130
so we're going to try and do this wish

00:25:33,290 --> 00:25:40,430
me luck here all right so this is a

00:25:37,130 --> 00:25:41,660
clunker that's publicly available and

00:25:40,430 --> 00:25:45,760
what we're actually going to see here is

00:25:41,660 --> 00:25:50,030
that this is a set as I said before a

00:25:45,760 --> 00:25:52,010
and your to project that is using a twig

00:25:50,030 --> 00:25:53,300
template so this script tag here is just

00:25:52,010 --> 00:25:54,410
specifying a temple you could put this

00:25:53,300 --> 00:25:57,050
in a file you can put this really

00:25:54,410 --> 00:26:01,670
anywhere and so what we're doing here is

00:25:57,050 --> 00:26:03,110
if I could see we're using all of the

00:26:01,670 --> 00:26:05,510
kind of twig conditionals all of the

00:26:03,110 --> 00:26:07,340
twig looping the repeats the for each is

00:26:05,510 --> 00:26:09,590
the if conditions and then we're

00:26:07,340 --> 00:26:12,370
rendering that live here so if we go

00:26:09,590 --> 00:26:12,370
into the data model

00:26:17,170 --> 00:26:23,890
alright i'm not able to see that well

00:26:19,030 --> 00:26:25,390
enough but if you go into the data model

00:26:23,890 --> 00:26:27,010
what you can see is that what we're

00:26:25,390 --> 00:26:30,490
doing is we're loading all of the

00:26:27,010 --> 00:26:32,260
templates just by a kind of xhr via

00:26:30,490 --> 00:26:36,370
standard web requests and then we're

00:26:32,260 --> 00:26:37,660
using that twig j/s module or library to

00:26:36,370 --> 00:26:39,220
render all those in the same way that

00:26:37,660 --> 00:26:40,510
using angular templates so you can use

00:26:39,220 --> 00:26:44,040
standard angular templates or you can

00:26:40,510 --> 00:26:44,040
use twig now which is very exciting

00:27:04,620 --> 00:27:08,850
alright and so what I've got here is

00:27:06,750 --> 00:27:11,580
I've actually got the twig decorator TS

00:27:08,850 --> 00:27:13,080
file and so this is a part of that that

00:27:11,580 --> 00:27:14,580
library that we showed you and so what

00:27:13,080 --> 00:27:16,650
this is doing is it's just loading the

00:27:14,580 --> 00:27:17,940
template and then it's replacing all

00:27:16,650 --> 00:27:20,820
those arguments and then doing a full

00:27:17,940 --> 00:27:22,860
rendering so one of the things that it

00:27:20,820 --> 00:27:24,690
is still kind of open is make the

00:27:22,860 --> 00:27:25,980
template rendering a sink so one of the

00:27:24,690 --> 00:27:28,140
nice things about angular is that almost

00:27:25,980 --> 00:27:31,260
everything is done via a sink processes

00:27:28,140 --> 00:27:33,180
and observables but right now the twig

00:27:31,260 --> 00:27:34,260
template rendering is synchronous which

00:27:33,180 --> 00:27:36,410
means that it's going to block the

00:27:34,260 --> 00:27:39,000
rendering of whatever else you're doing

00:27:36,410 --> 00:27:42,150
so that's a project by the name of a

00:27:39,000 --> 00:27:44,220
gentleman and they was seemed he was at

00:27:42,150 --> 00:27:47,910
drupalcon last week which was really

00:27:44,220 --> 00:27:49,770
exciting and so the future as we think

00:27:47,910 --> 00:27:51,780
about loading some of these things in

00:27:49,770 --> 00:27:54,929
doing some of these things yourself I

00:27:51,780 --> 00:27:57,600
want to do a brief little final demo

00:27:54,929 --> 00:28:00,660
here so if you're looking to get started

00:27:57,600 --> 00:28:02,490
with any of these things the pdb get

00:28:00,660 --> 00:28:04,950
repo is where a lot of the development

00:28:02,490 --> 00:28:06,690
the mat is working on is going just cone

00:28:04,950 --> 00:28:08,820
it into your modules folder folder in

00:28:06,690 --> 00:28:10,500
any drupal install and then really start

00:28:08,820 --> 00:28:15,090
building components and so what i want

00:28:10,500 --> 00:28:18,300
to do is locally because i have this one

00:28:15,090 --> 00:28:20,130
offline i want to show you the

00:28:18,300 --> 00:28:23,090
complexity of building a new component

00:28:20,130 --> 00:28:25,200
using at yours in drupal so this is the

00:28:23,090 --> 00:28:27,390
basically the folder structure you're

00:28:25,200 --> 00:28:29,130
going to get from get and then what

00:28:27,390 --> 00:28:32,730
you're going to be able to do is if you

00:28:29,130 --> 00:28:34,950
see this components folder we're going

00:28:32,730 --> 00:28:38,660
to be able to open that if you will help

00:28:34,950 --> 00:28:38,660
me am I on the components all there

00:28:42,900 --> 00:28:45,650
alright

00:28:47,250 --> 00:28:51,480
great so what this is is this is as

00:28:49,830 --> 00:28:55,470
simple as it can get so this is an

00:28:51,480 --> 00:28:57,270
angular module component that is for

00:28:55,470 --> 00:28:58,980
basically a hello world application so

00:28:57,270 --> 00:29:01,140
we import requirements so we're

00:28:58,980 --> 00:29:03,060
importing what a component is from

00:29:01,140 --> 00:29:04,590
angular and then we're defining a

00:29:03,060 --> 00:29:06,420
component using that decorator syntax

00:29:04,590 --> 00:29:08,310
we're saying hey here's the selector

00:29:06,420 --> 00:29:10,440
that I want to use so that means here's

00:29:08,310 --> 00:29:12,630
the HTML tag that I want to replace and

00:29:10,440 --> 00:29:15,030
then here's the template and so what

00:29:12,630 --> 00:29:16,800
will happen is this will actually if you

00:29:15,030 --> 00:29:18,900
write the appropriate llamo file which

00:29:16,800 --> 00:29:21,000
is actually longer than the file itself

00:29:18,900 --> 00:29:23,010
this will give you a completely new

00:29:21,000 --> 00:29:24,860
block with in Drupal that has the

00:29:23,010 --> 00:29:27,600
functionality of that component and so

00:29:24,860 --> 00:29:28,710
it's kind of relatively trivial to start

00:29:27,600 --> 00:29:30,120
extending this so if you want to do

00:29:28,710 --> 00:29:31,710
write a constructor that initializes

00:29:30,120 --> 00:29:34,770
some state if you want to start pulling

00:29:31,710 --> 00:29:37,050
in data via web asynchronous web

00:29:34,770 --> 00:29:39,470
requests all of that code just kind of

00:29:37,050 --> 00:29:41,250
goes here and then you start nesting

00:29:39,470 --> 00:29:43,710
components as your application gets

00:29:41,250 --> 00:29:45,690
bigger and so getting started is

00:29:43,710 --> 00:29:47,220
intentionally very easy if you don't

00:29:45,690 --> 00:29:49,460
care about the framework kind of around

00:29:47,220 --> 00:29:49,460
it

00:30:00,669 --> 00:30:02,730
you

00:30:06,980 --> 00:30:12,710
alright um so I definitely recommend

00:30:09,919 --> 00:30:14,780
that you contribute by importing the PDB

00:30:12,710 --> 00:30:16,840
module build more components because I

00:30:14,780 --> 00:30:18,679
think one of the the nicest parts about

00:30:16,840 --> 00:30:20,000
doing this sort of component

00:30:18,679 --> 00:30:21,320
architecture which really reflects what

00:30:20,000 --> 00:30:24,200
the Drupal community has been doing for

00:30:21,320 --> 00:30:26,270
a long time is that we can all benefit

00:30:24,200 --> 00:30:28,370
from one person's work so if you're

00:30:26,270 --> 00:30:30,049
building a new commenting modular if

00:30:28,370 --> 00:30:31,520
you're building a tour of heroes or if

00:30:30,049 --> 00:30:33,650
you're building sort of anything maybe

00:30:31,520 --> 00:30:35,330
an alert notification system for your

00:30:33,650 --> 00:30:37,130
website that you want to load a lot of

00:30:35,330 --> 00:30:38,480
data asynchronously and allow kind of

00:30:37,130 --> 00:30:40,850
visual experiences they interact with

00:30:38,480 --> 00:30:43,940
that data I think everyone here could

00:30:40,850 --> 00:30:46,760
benefit from those components I would

00:30:43,940 --> 00:30:49,010
also recommend that follow angular as we

00:30:46,760 --> 00:30:50,390
approach GA so I think some of these

00:30:49,010 --> 00:30:52,309
examples some of the things that the

00:30:50,390 --> 00:30:53,960
Drupal commit community is doing are

00:30:52,309 --> 00:30:55,970
going to need a little bit of updates

00:30:53,960 --> 00:30:58,070
and then really take advantage of the

00:30:55,970 --> 00:31:01,510
template compiler and bundling so all of

00:30:58,070 --> 00:31:04,160
those things that as we move from paga

00:31:01,510 --> 00:31:06,860
complexity in developer time sensitivity

00:31:04,160 --> 00:31:08,360
to payload and user time sensitivity all

00:31:06,860 --> 00:31:11,570
of those things are definitely going to

00:31:08,360 --> 00:31:13,490
benefit your application and then I want

00:31:11,570 --> 00:31:15,559
to kind of end with just a little bit

00:31:13,490 --> 00:31:17,059
about kind of why angular because

00:31:15,559 --> 00:31:18,950
there's a lot of frameworks out there

00:31:17,059 --> 00:31:20,480
right we're going to hear from amber

00:31:18,950 --> 00:31:23,120
we're gonna hear from elm we're gonna

00:31:20,480 --> 00:31:26,000
hear from about react rich applications

00:31:23,120 --> 00:31:27,710
can really be built a lot of ways and a

00:31:26,000 --> 00:31:30,140
lot of people talk about this idea of

00:31:27,710 --> 00:31:32,350
kind of react versus angular but it's

00:31:30,140 --> 00:31:34,429
not really a versus game I think

00:31:32,350 --> 00:31:35,809
everyone in the JavaScript and everyone

00:31:34,429 --> 00:31:38,600
in the broader web development community

00:31:35,809 --> 00:31:40,010
we're all really trying to make the

00:31:38,600 --> 00:31:41,419
entire process of developing

00:31:40,010 --> 00:31:42,770
applications better and so I think

00:31:41,419 --> 00:31:44,600
there's there's something that everyone

00:31:42,770 --> 00:31:46,250
can learn from everyone else so for

00:31:44,600 --> 00:31:48,650
example we have a library and angular

00:31:46,250 --> 00:31:51,440
called ng Rx and so what that allows you

00:31:48,650 --> 00:31:53,360
to do is it allows you to use reactive

00:31:51,440 --> 00:31:55,100
programming methodologies to build

00:31:53,360 --> 00:31:56,929
functional applications so what that

00:31:55,100 --> 00:31:59,000
means is you can actually build for

00:31:56,929 --> 00:32:00,919
example a search box that allows

00:31:59,000 --> 00:32:03,350
type-ahead right so this is something

00:32:00,919 --> 00:32:05,150
that in a traditional server-side web

00:32:03,350 --> 00:32:07,040
application is very very hard right

00:32:05,150 --> 00:32:09,410
because you can't be pulling in new data

00:32:07,040 --> 00:32:11,510
on the fly as users typing but angular

00:32:09,410 --> 00:32:14,090
and especially ng RX makes very easy

00:32:11,510 --> 00:32:16,010
because you can say hey if they type if

00:32:14,090 --> 00:32:17,360
they type a character and it's been more

00:32:16,010 --> 00:32:18,650
than 300 milliseconds since the last

00:32:17,360 --> 00:32:19,549
character there in an issued a new

00:32:18,650 --> 00:32:20,809
search if

00:32:19,549 --> 00:32:21,830
last search hasn't finished then we're

00:32:20,809 --> 00:32:25,730
going to interrupt that we're going to

00:32:21,830 --> 00:32:27,590
render that out so reactive ideas and

00:32:25,730 --> 00:32:28,970
principles are very powerful and we

00:32:27,590 --> 00:32:31,759
definitely want angular apps to be able

00:32:28,970 --> 00:32:33,379
to take advantage of a lot of those the

00:32:31,759 --> 00:32:34,850
other place that I really think I dealer

00:32:33,379 --> 00:32:37,399
shines is when you think about

00:32:34,850 --> 00:32:38,899
enterprise if anyone has to build an

00:32:37,399 --> 00:32:41,960
application and manage it and maintain

00:32:38,899 --> 00:32:43,340
it for multiple years at a time that's

00:32:41,960 --> 00:32:46,850
part of the reason that companies choose

00:32:43,340 --> 00:32:50,269
Drupal right Drupal is a large scalable

00:32:46,850 --> 00:32:52,340
platform that can bend and flex to meet

00:32:50,269 --> 00:32:54,739
the needs of the business and angular's

00:32:52,340 --> 00:32:56,289
is in very much the same way you can

00:32:54,739 --> 00:32:59,960
build a large application this is not a

00:32:56,289 --> 00:33:01,970
three page wordpress site and then you

00:32:59,960 --> 00:33:03,859
can also kind of build and launch and

00:33:01,970 --> 00:33:04,909
run websites with Drupal and then

00:33:03,859 --> 00:33:06,919
hopefully the idea is that we're going

00:33:04,909 --> 00:33:09,830
to be able to do that server side as

00:33:06,919 --> 00:33:11,480
well at some point and then there were a

00:33:09,830 --> 00:33:14,090
few notes that I took earlier from the

00:33:11,480 --> 00:33:15,799
presentation so they were saying that

00:33:14,090 --> 00:33:17,600
the progressively decoupled approach

00:33:15,799 --> 00:33:20,330
doesn't handle some of these things so

00:33:17,600 --> 00:33:22,399
cross-site scripting input sanitization

00:33:20,330 --> 00:33:24,109
angular handles all of that kind of out

00:33:22,399 --> 00:33:26,119
of the box and it's actually a little

00:33:24,109 --> 00:33:28,669
bit funny watching angular and Drupal

00:33:26,119 --> 00:33:31,429
fight over that because the current

00:33:28,669 --> 00:33:33,919
Drupal restful webservices return kind

00:33:31,429 --> 00:33:35,809
of raj HTML and angular kind of

00:33:33,919 --> 00:33:37,489
automatically tries to sanitize that and

00:33:35,809 --> 00:33:39,590
says oh yeah you want you're sending the

00:33:37,489 --> 00:33:40,909
HTML let me render that to the screen

00:33:39,590 --> 00:33:42,679
for you and so it's already escaping

00:33:40,909 --> 00:33:45,200
everything so there's a little bit of a

00:33:42,679 --> 00:33:46,519
fight there one of the things that as

00:33:45,200 --> 00:33:48,859
you think about any sort of client-side

00:33:46,519 --> 00:33:51,200
framework is system notifications how do

00:33:48,859 --> 00:33:52,519
I know that as we move from everything

00:33:51,200 --> 00:33:53,629
running on the server to everything kind

00:33:52,519 --> 00:33:55,220
of running on the client or more things

00:33:53,629 --> 00:33:56,960
running on the client how do I know that

00:33:55,220 --> 00:34:00,220
things are working well and so there's

00:33:56,960 --> 00:34:02,359
companies like upbeat which allow you to

00:34:00,220 --> 00:34:04,279
deploy a module that works within

00:34:02,359 --> 00:34:06,919
angular and then can actually monitor

00:34:04,279 --> 00:34:09,919
and capture errors on the client side so

00:34:06,919 --> 00:34:12,109
let's say that that Firefox for example

00:34:09,919 --> 00:34:13,700
they ship a new bug into the browser and

00:34:12,109 --> 00:34:15,649
now suddenly that's affecting ten

00:34:13,700 --> 00:34:17,809
percent of your users who've updated to

00:34:15,649 --> 00:34:20,240
this latest version there are ways that

00:34:17,809 --> 00:34:21,470
you can hook into both angular as well

00:34:20,240 --> 00:34:23,960
as other web frameworks using something

00:34:21,470 --> 00:34:25,849
like upbeat and actually get web server

00:34:23,960 --> 00:34:27,740
based notifications that hey our users

00:34:25,849 --> 00:34:29,569
either the experience is suffering via

00:34:27,740 --> 00:34:30,050
errors or you can also monitor that

00:34:29,569 --> 00:34:32,060
perform

00:34:30,050 --> 00:34:33,620
is suffering so angular has this concept

00:34:32,060 --> 00:34:35,090
of routing so that you as you shift from

00:34:33,620 --> 00:34:36,740
page to page or from state to state

00:34:35,090 --> 00:34:38,330
within your application we can actually

00:34:36,740 --> 00:34:40,040
measure the performance of all of those

00:34:38,330 --> 00:34:42,170
transitions in a way that you can

00:34:40,040 --> 00:34:44,650
monitor over time and say hey there was

00:34:42,170 --> 00:34:47,510
a thirty percent increase what happened

00:34:44,650 --> 00:34:49,340
they talked about progressive loading

00:34:47,510 --> 00:34:52,850
how many people here have heard of

00:34:49,340 --> 00:34:54,380
progressive web apps oh very few that's

00:34:52,850 --> 00:34:56,120
actually the smallest number of hands

00:34:54,380 --> 00:34:57,980
I've seen today so progressive web apps

00:34:56,120 --> 00:35:00,020
are one of the most exciting things

00:34:57,980 --> 00:35:01,460
about the web today in my opinion so

00:35:00,020 --> 00:35:02,840
this is the idea that you build a

00:35:01,460 --> 00:35:05,930
website or you build a web application

00:35:02,840 --> 00:35:08,210
and parts of that application can be

00:35:05,930 --> 00:35:10,580
shipped and live on the user's browser

00:35:08,210 --> 00:35:12,890
and so that sounds a little bit scary to

00:35:10,580 --> 00:35:14,420
start but if we check each of your

00:35:12,890 --> 00:35:16,700
browser's there would probably be 20 or

00:35:14,420 --> 00:35:18,410
30 apps already doing this today in some

00:35:16,700 --> 00:35:19,700
form and so what progressive web apps

00:35:18,410 --> 00:35:22,280
actually allow you to do is allows you

00:35:19,700 --> 00:35:23,660
to specify a manifest which allows the

00:35:22,280 --> 00:35:25,490
browser to treat your application or

00:35:23,660 --> 00:35:26,870
your website more like an application so

00:35:25,490 --> 00:35:29,150
you can do things with for example

00:35:26,870 --> 00:35:31,520
service workers a recent JavaScript API

00:35:29,150 --> 00:35:34,400
that allows you to run a website

00:35:31,520 --> 00:35:36,530
entirely offline so imagine if suddenly

00:35:34,400 --> 00:35:38,930
you're your Drupal site you could still

00:35:36,530 --> 00:35:41,570
load it and it could show you some cash

00:35:38,930 --> 00:35:42,950
data that cashing in that those service

00:35:41,570 --> 00:35:44,720
workers also allow you to improve

00:35:42,950 --> 00:35:46,550
performance because now instead of

00:35:44,720 --> 00:35:48,170
trying to go to the website to render it

00:35:46,550 --> 00:35:50,240
for the first time you can actually load

00:35:48,170 --> 00:35:52,250
those assets locally so this is going to

00:35:50,240 --> 00:35:54,980
be the successor to the cache manifest

00:35:52,250 --> 00:35:56,720
if anyone remembers that and so

00:35:54,980 --> 00:35:58,310
progressive web and then there's a bunch

00:35:56,720 --> 00:36:01,700
of other features there such as the

00:35:58,310 --> 00:36:03,500
ability to do push notifications push

00:36:01,700 --> 00:36:04,700
notifications on the web that is one of

00:36:03,500 --> 00:36:07,340
the most the coolest things I've ever

00:36:04,700 --> 00:36:09,260
seen and installing a service worker and

00:36:07,340 --> 00:36:11,660
having this idea of a modern web

00:36:09,260 --> 00:36:13,580
application can be very beneficial and

00:36:11,660 --> 00:36:14,870
then there was also the comment that

00:36:13,580 --> 00:36:17,600
there's no accessible markup of user

00:36:14,870 --> 00:36:19,850
experience benefits I think the twig

00:36:17,600 --> 00:36:21,680
compilation is is a little bit of a game

00:36:19,850 --> 00:36:23,830
changer when it comes to Drupal

00:36:21,680 --> 00:36:25,910
applications to interact well with

00:36:23,830 --> 00:36:27,410
annular and client-side applications

00:36:25,910 --> 00:36:29,030
right so the ability to use the

00:36:27,410 --> 00:36:31,550
templates and run the modules that you

00:36:29,030 --> 00:36:34,530
already have in some form entirely

00:36:31,550 --> 00:36:38,720
client-side that that's awesome

00:36:34,530 --> 00:36:38,720
thank you and I will take any questions

00:36:43,859 --> 00:36:53,730
I think we have a mic right here in the

00:36:47,609 --> 00:36:55,249
middle hi yeah so as wonder if you could

00:36:53,730 --> 00:36:58,769
talk a little bit more about the

00:36:55,249 --> 00:37:01,859
universal j/s with if you're looking at

00:36:58,769 --> 00:37:04,470
is is that currently focused mostly on

00:37:01,859 --> 00:37:07,319
node based server rendering or as

00:37:04,470 --> 00:37:11,460
they're looking much effort towards the

00:37:07,319 --> 00:37:13,619
PHP VHS side of things sure so currently

00:37:11,460 --> 00:37:15,299
it's i'll talk about it kind of in two

00:37:13,619 --> 00:37:18,239
ways so on the angular universal side

00:37:15,299 --> 00:37:19,470
that is node based server so the idea is

00:37:18,239 --> 00:37:21,749
that we're going to be able to render

00:37:19,470 --> 00:37:23,339
using node the application using the

00:37:21,749 --> 00:37:25,470
same compiler that your browser would be

00:37:23,339 --> 00:37:26,970
doing client side but rendering on the

00:37:25,470 --> 00:37:28,859
server first and then shipping it to you

00:37:26,970 --> 00:37:30,539
and then progressively replacing those

00:37:28,859 --> 00:37:32,759
components with kind of live components

00:37:30,539 --> 00:37:35,130
than playing back any user input so

00:37:32,759 --> 00:37:36,839
that's all stuff that works today on the

00:37:35,130 --> 00:37:39,029
other side of things the the template

00:37:36,839 --> 00:37:41,940
compilation that's actually something

00:37:39,029 --> 00:37:43,170
that happens at development time so the

00:37:41,940 --> 00:37:45,390
idea is you're going to build this this

00:37:43,170 --> 00:37:47,130
large-scale application and then you're

00:37:45,390 --> 00:37:48,599
actually going to be building it in a

00:37:47,130 --> 00:37:50,220
way that you're going to bring down the

00:37:48,599 --> 00:37:52,589
binary size and it's going to use the

00:37:50,220 --> 00:37:54,809
types to follow your component tree and

00:37:52,589 --> 00:37:56,220
trim it and things like that all at

00:37:54,809 --> 00:37:57,480
development time so when you ship that

00:37:56,220 --> 00:38:00,710
doesn't matter if your ship serving it

00:37:57,480 --> 00:38:00,710
from PHP or any server

00:38:02,140 --> 00:38:09,660
yeah joint join you go to the micro

00:38:06,160 --> 00:38:09,660
otherwise I can repeat your question

00:38:15,869 --> 00:38:18,650
mm-hmm

00:38:21,090 --> 00:38:23,750
yep

00:38:27,079 --> 00:38:32,539
sure sure any oj s 2 is more than 10

00:38:30,469 --> 00:38:34,400
times more performance so I mean the big

00:38:32,539 --> 00:38:37,609
thing that we did between aur ji and

00:38:34,400 --> 00:38:39,920
your jasna or two is we really refined

00:38:37,609 --> 00:38:42,529
both the component model and the what's

00:38:39,920 --> 00:38:45,319
called the digest loop so in angular 1

00:38:42,529 --> 00:38:46,640
or angular j/s what we were doing is we

00:38:45,319 --> 00:38:49,819
were looking at all of your components

00:38:46,640 --> 00:38:51,410
anytime anything happened and then we

00:38:49,819 --> 00:38:52,579
were running all of the expressions on

00:38:51,410 --> 00:38:53,930
every page and saying did anything

00:38:52,579 --> 00:38:56,150
changed anything change that we need to

00:38:53,930 --> 00:38:58,489
rerender and if it changed then we would

00:38:56,150 --> 00:39:00,200
render it to the screen but due to the

00:38:58,489 --> 00:39:01,910
the kind of cascading nature of one

00:39:00,200 --> 00:39:03,410
change triggering another we would

00:39:01,910 --> 00:39:04,609
actually have to run that loop over and

00:39:03,410 --> 00:39:06,549
over and over and tell something stop

00:39:04,609 --> 00:39:08,839
changing which is horribly inefficient

00:39:06,549 --> 00:39:10,400
and so with any or two what we're doing

00:39:08,839 --> 00:39:13,069
is we're actually we make a tree of your

00:39:10,400 --> 00:39:16,160
components because just like the the web

00:39:13,069 --> 00:39:18,709
any you it's it's a sick it's

00:39:16,160 --> 00:39:20,329
non-cyclical right so we can tell we

00:39:18,709 --> 00:39:21,829
start at your root node and we follow

00:39:20,329 --> 00:39:23,450
all the notes down throw your components

00:39:21,829 --> 00:39:26,269
and we can say we can run the change

00:39:23,450 --> 00:39:28,009
detection once and then not loop and so

00:39:26,269 --> 00:39:29,509
then we also have the different

00:39:28,009 --> 00:39:31,400
mechanisms for actually changing how

00:39:29,509 --> 00:39:34,729
that works so you can change it to push

00:39:31,400 --> 00:39:36,709
so that applicator only certain events

00:39:34,729 --> 00:39:39,349
trigger that change detection so any or

00:39:36,709 --> 00:39:41,390
two is is much much much much much

00:39:39,349 --> 00:39:43,009
faster and that's one of the primary

00:39:41,390 --> 00:39:45,729
reasons that a lot to do i'll percent of

00:39:43,009 --> 00:39:45,729
switching any or two

00:39:52,010 --> 00:39:56,480
sure so the question was is there an

00:39:53,870 --> 00:39:58,490
angular 1 to n your to migration tool so

00:39:56,480 --> 00:40:00,440
there's definitely an upgrade path so

00:39:58,490 --> 00:40:05,090
for example what what version of angular

00:40:00,440 --> 00:40:08,780
want have used okay it doesn't matter so

00:40:05,090 --> 00:40:10,520
as we shifted from angular like 13 to 15

00:40:08,780 --> 00:40:12,140
which is the latest version of angular 1

00:40:10,520 --> 00:40:13,910
what we've done is we've been kind of

00:40:12,140 --> 00:40:16,100
back porting a lot of the features and

00:40:13,910 --> 00:40:18,370
the ideas most importantly so for

00:40:16,100 --> 00:40:21,650
example and you are 15 you can build a

00:40:18,370 --> 00:40:24,230
server a client-side web application

00:40:21,650 --> 00:40:25,970
using components using this whole idea

00:40:24,230 --> 00:40:28,660
of a component router component trees

00:40:25,970 --> 00:40:31,010
things like that which then are

00:40:28,660 --> 00:40:33,440
relatively straightforward to swap out

00:40:31,010 --> 00:40:36,230
and you or two and there's even a tool

00:40:33,440 --> 00:40:37,940
we've got called ng upgrade and so what

00:40:36,230 --> 00:40:40,820
that does is it will use the angular 2

00:40:37,940 --> 00:40:43,370
bootstrapping so that you can have both

00:40:40,820 --> 00:40:45,770
anywhere to and angular 1 running within

00:40:43,370 --> 00:40:47,330
the same application to make it easier

00:40:45,770 --> 00:40:51,430
for large applications to be ported over

00:40:47,330 --> 00:40:51,430
more slowly more gradually over time

00:40:51,850 --> 00:40:54,850
yeah

00:41:02,060 --> 00:41:09,350
sure so um I don't think I'm as versed

00:41:06,020 --> 00:41:11,570
on Drupal gap to answer that but for

00:41:09,350 --> 00:41:13,400
example a phonegap in the form of ionic

00:41:11,570 --> 00:41:15,410
and you are definitely one hundred

00:41:13,400 --> 00:41:16,730
percent works with that and the one of

00:41:15,410 --> 00:41:18,890
the kind of interesting things about

00:41:16,730 --> 00:41:20,480
angular is because we've got this kind

00:41:18,890 --> 00:41:23,540
of deeper semantic understanding of the

00:41:20,480 --> 00:41:25,250
application there's there's a platform

00:41:23,540 --> 00:41:27,680
of a library out there called native

00:41:25,250 --> 00:41:29,570
script if you've ever heard of that so

00:41:27,680 --> 00:41:31,310
what if for those of you that you have

00:41:29,570 --> 00:41:32,900
used phonegap or ionic or any of these

00:41:31,310 --> 00:41:35,210
platforms what they're doing is they're

00:41:32,900 --> 00:41:37,040
actually shipping a webview so they're

00:41:35,210 --> 00:41:38,050
shipping a little browser that they put

00:41:37,040 --> 00:41:40,030
in the application then they've got

00:41:38,050 --> 00:41:42,920
JavaScript libraries that kind of

00:41:40,030 --> 00:41:45,410
interface between local JavaScript calls

00:41:42,920 --> 00:41:48,050
and native functions like get a picture

00:41:45,410 --> 00:41:50,300
from the camera or look in the users

00:41:48,050 --> 00:41:54,290
contact database but what native script

00:41:50,300 --> 00:41:55,940
does is it uses the HTML and the CSS you

00:41:54,290 --> 00:41:59,060
write and it actually translates it into

00:41:55,940 --> 00:42:01,040
native UI components so for example if

00:41:59,060 --> 00:42:03,500
you write an input box in JavaScript and

00:42:01,040 --> 00:42:06,170
HTML native script will render that on

00:42:03,500 --> 00:42:08,360
Android as a text edit and on iOS is the

00:42:06,170 --> 00:42:09,770
appropriate equivalent and so what that

00:42:08,360 --> 00:42:11,750
doesn't you've actually got a native

00:42:09,770 --> 00:42:14,540
application running that was generated

00:42:11,750 --> 00:42:17,960
from your HTML Javascript CSS and so

00:42:14,540 --> 00:42:20,780
because angular doesn't actually depend

00:42:17,960 --> 00:42:22,070
on the browser anymore we it works very

00:42:20,780 --> 00:42:23,540
well with native script and we can

00:42:22,070 --> 00:42:26,060
actually convert more of the application

00:42:23,540 --> 00:42:29,410
than you would just shipping HTML and

00:42:26,060 --> 00:42:29,410
CSS in the native script

00:42:33,090 --> 00:42:37,070
if there's no more questions thank you

00:42:34,500 --> 00:42:37,070

YouTube URL: https://www.youtube.com/watch?v=PGneK_G5zhA


