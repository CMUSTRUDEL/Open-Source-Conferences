Title: DrupalCon New Orleans 2016: Next-level Drupal: Applied progressive decoupling with JavaScript
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	How do you balance the demands of your content editors and site builders against the need to stay abreast of the most up-and-coming technologies? Do you have a JavaScript development team itching to pursue new ideas at a faster rate than the rest of your developers or even Drupal itself can accommodate? How can you best avoid the pitfalls of fully decoupling Drupal and reinventing the many wheels you lose, such as layout management and a seamless administrative experience?

Join Matt Davis (Mediacurrent), Preston So (Acquia), and John Kennedy (Acquia) as we discuss the practice behind the theory of progressively decoupled Drupal, an approach that infuses graceful application-like interactivity into your site without jettisoning the features that make Drupal great on the front end. In this session, we’ll also delve into the key motivations for harnessing Drupal’s power as a CMS alongside another powerful framework on the front end via progressive decoupling.

Here are just a few of the questions we’ll answer together:

What should you think about when you decouple a Drupal site, whether fully or progressively?

What are the different flavors of decoupled Drupal increasingly emerging in the wild?

How has progressive decoupling been leveraged in production with success at scale?

How can you enable your front-end development team and content or site building team to pursue their own velocities without blocking one another?

Why is progressive decoupling the right approach for Drupal 8 as an assembled web tool?

And here are the themes and topics we’ll dive into:

“Headless” Drupal: The promise and perils of fully decoupling Drupal

Why front-end developers want to fully decouple, but editorial teams don't

Strict and broad definitions of progressive decoupling

Top five reasons to progressively decouple Drupal

Concrete architectures to implement progressive decoupling

Case study: weather.com and progressively decoupled Panels

Advantages and disadvantages of other decoupled cases

The spectrum of progressive decoupling: From 1-99% of the page

Balancing the needs of your site builders, content editors, and developers

This session is for decision-makers (technical managers, architects, directors of technology), front-end developers (particularly JavaScript developers), Drupal developers, and UX designers who are interested in learning more about progressively decoupled Drupal and how it advances the interests of both front-end developers working primarily in JavaScript and users working in Drupal site assembly and content creation.

You should expect to walk away from this session with a broad understanding of the range of possibilities that exist when considering a progressively decoupled architecture, the benefits and drawbacks of each, and concrete examples to guide you in picking the right approach among them to satisfy all the stakeholders for your next project.
Captions: 
	00:00:00,000 --> 00:00:04,710
hi everybody my name is David Wong I

00:00:02,460 --> 00:00:06,660
along with Jason want who was in the

00:00:04,710 --> 00:00:08,849
audience here in the back where your

00:00:06,660 --> 00:00:10,920
track chairs for this new for this new

00:00:08,849 --> 00:00:13,440
track the horizons track which was

00:00:10,920 --> 00:00:15,780
something of a shot the dark and also a

00:00:13,440 --> 00:00:17,820
labor of love for us it's a new track

00:00:15,780 --> 00:00:19,230
you'll notice that it's very JavaScript

00:00:17,820 --> 00:00:21,330
heavy especially on the front-end

00:00:19,230 --> 00:00:23,939
frameworks today we have speakers today

00:00:21,330 --> 00:00:25,619
from Google to talk about angular the

00:00:23,939 --> 00:00:27,269
maintainer of the ember project is

00:00:25,619 --> 00:00:29,250
speaking later about his experiments

00:00:27,269 --> 00:00:31,380
with them integrating with Drupal and

00:00:29,250 --> 00:00:32,940
then there's other stuff that's far

00:00:31,380 --> 00:00:34,920
afield of JavaScript throughout the week

00:00:32,940 --> 00:00:36,870
but this will be a good set up for what

00:00:34,920 --> 00:00:37,860
the rest of the day is like I know it's

00:00:36,870 --> 00:00:39,300
a topic that's not a lot of people's

00:00:37,860 --> 00:00:41,100
minds and I'm glad you all are here I

00:00:39,300 --> 00:00:42,510
was actually really afraid in the last

00:00:41,100 --> 00:00:44,129
week or so that nobody would show up and

00:00:42,510 --> 00:00:45,450
they you know like if I wanted to see

00:00:44,129 --> 00:00:46,950
the psycho to j/s count for something

00:00:45,450 --> 00:00:47,940
like that not a Drupal con so the kind

00:00:46,950 --> 00:00:49,379
of interest that you guys are showing

00:00:47,940 --> 00:00:51,660
here by showing up it's amazing and

00:00:49,379 --> 00:00:53,969
great and I'm just introduced the three

00:00:51,660 --> 00:00:55,590
speakers here we'll go from you know

00:00:53,969 --> 00:00:58,920
we're gonna do the Asian guy first just

00:00:55,590 --> 00:01:01,170
because this Preston so works in a

00:00:58,920 --> 00:01:05,189
taqueria he's development manager and

00:01:01,170 --> 00:01:07,020
octo right no aqua labs that Davis is a

00:01:05,189 --> 00:01:08,659
media current he's worked on some pretty

00:01:07,020 --> 00:01:10,680
high-profile things involving

00:01:08,659 --> 00:01:11,790
meteorological websites which I think

00:01:10,680 --> 00:01:15,390
you guys were talking about today and

00:01:11,790 --> 00:01:19,259
John Kennedy former 37th President of

00:01:15,390 --> 00:01:22,740
the United States back to life now his

00:01:19,259 --> 00:01:25,439
second stint in he's a program manager I

00:01:22,740 --> 00:01:27,210
think for lightning a takuya and also

00:01:25,439 --> 00:01:28,829
the lead for the model module

00:01:27,210 --> 00:01:30,270
acceleration program which you can hear

00:01:28,829 --> 00:01:32,369
about later today

00:01:30,270 --> 00:01:33,540
and so this will be a primer about sort

00:01:32,369 --> 00:01:34,710
of the topics you'll see throughout the

00:01:33,540 --> 00:01:36,540
day so if you like what you see here

00:01:34,710 --> 00:01:39,329
keep coming to the horizons track and at

00:01:36,540 --> 00:01:40,590
the end of the session please rate you

00:01:39,329 --> 00:01:42,030
know they do poorly that's fine you can

00:01:40,590 --> 00:01:43,229
crap on them but if they do great you

00:01:42,030 --> 00:01:46,100
know please leave your comments there as

00:01:43,229 --> 00:01:46,100
well thanks everybody

00:01:50,240 --> 00:01:56,690
all right thanks David for that

00:01:52,290 --> 00:02:01,410
wonderful introduction so how's it going

00:01:56,690 --> 00:02:02,850
how was the keynote awesome right I was

00:02:01,410 --> 00:02:04,350
actually really that mostly the first

00:02:02,850 --> 00:02:06,780
time I saw that videos it was pretty

00:02:04,350 --> 00:02:08,880
awesome right by the way there's a lot

00:02:06,780 --> 00:02:11,580
of seats up here front please don't be

00:02:08,880 --> 00:02:13,170
shy we don't we don't bite you know

00:02:11,580 --> 00:02:15,060
please you know feel free to get

00:02:13,170 --> 00:02:17,070
friendly filter into the middle here I

00:02:15,060 --> 00:02:18,720
always hate seeing people standing up in

00:02:17,070 --> 00:02:20,850
the back because you know there's always

00:02:18,720 --> 00:02:23,970
seats up here and we want to make sure

00:02:20,850 --> 00:02:26,340
anyone has a good time so just to be

00:02:23,970 --> 00:02:27,690
very clear this is next-level Drupal if

00:02:26,340 --> 00:02:31,350
you're looking for the tweets note that

00:02:27,690 --> 00:02:34,890
just happened already and this is not

00:02:31,350 --> 00:02:36,810
Bourbon Street but welcome and we're

00:02:34,890 --> 00:02:38,340
gonna have a good time today I'm really

00:02:36,810 --> 00:02:40,530
excited because we're introducing this

00:02:38,340 --> 00:02:41,700
horizons track and you know it's a very

00:02:40,530 --> 00:02:43,580
tall order I think we've got some really

00:02:41,700 --> 00:02:47,490
exciting stuff on the docket for today

00:02:43,580 --> 00:02:50,580
and all week on this track so should be

00:02:47,490 --> 00:02:53,100
very exciting so just to reiterate that

00:02:50,580 --> 00:02:54,510
introduction let me go ahead and

00:02:53,100 --> 00:02:56,310
introduce myself or actually let me

00:02:54,510 --> 00:03:04,020
start with Matt because he's the first

00:02:56,310 --> 00:03:06,060
one this is not hello my name is Matt

00:03:04,020 --> 00:03:11,070
Davis I'm a lead Drupal architect for

00:03:06,060 --> 00:03:13,830
media current I'm John Kennedy I'm the

00:03:11,070 --> 00:03:15,900
product manager for Acquia lightning is

00:03:13,830 --> 00:03:17,640
the enterprise authoring distribution

00:03:15,900 --> 00:03:19,470
that a cui is building and also the

00:03:17,640 --> 00:03:21,840
program manager for the module

00:03:19,470 --> 00:03:23,670
acceleration program and you should all

00:03:21,840 --> 00:03:27,750
come here about that at 2:15 today as

00:03:23,670 --> 00:03:29,670
well alrighty I'm Preston so I've been

00:03:27,750 --> 00:03:33,390
involved in Drupal since 2007 I'm

00:03:29,670 --> 00:03:36,209
developing manitoc wheel labs and very

00:03:33,390 --> 00:03:37,709
excited to be here today already so just

00:03:36,209 --> 00:03:39,390
to go through a little bit of what we're

00:03:37,709 --> 00:03:40,800
gonna talk about today this is gonna be

00:03:39,390 --> 00:03:42,150
a pretty wide-ranging session about a

00:03:40,800 --> 00:03:43,950
variety of different issues and I think

00:03:42,150 --> 00:03:45,540
we're gonna be able to provide a bit of

00:03:43,950 --> 00:03:47,730
an introduction to a lot of the things

00:03:45,540 --> 00:03:50,280
that we've been talking about quite a

00:03:47,730 --> 00:03:51,810
bit in the Drupal community I'd like to

00:03:50,280 --> 00:03:53,670
start by talking about risks and rewards

00:03:51,810 --> 00:03:55,830
of decoupling Drupal which i think is a

00:03:53,670 --> 00:03:58,380
good initial baseline for us to talk

00:03:55,830 --> 00:03:59,640
about and also I do want to talk about

00:03:58,380 --> 00:04:01,530
progressive decoupled

00:03:59,640 --> 00:04:03,600
which is which is a concept that trees

00:04:01,530 --> 00:04:05,069
promulgated last year and then we'll

00:04:03,600 --> 00:04:08,190
move into a couple of very interesting

00:04:05,069 --> 00:04:09,330
case studies and examples Mac Davis and

00:04:08,190 --> 00:04:11,370
John Kennedy are going to talk about

00:04:09,330 --> 00:04:13,380
whether calm very interesting use case

00:04:11,370 --> 00:04:15,569
as well as the decoupled blocks

00:04:13,380 --> 00:04:18,150
module in Drupal 8 and how that works

00:04:15,569 --> 00:04:20,280
and John will also delve into

00:04:18,150 --> 00:04:23,760
progressive decoupling how that looks in

00:04:20,280 --> 00:04:25,169
the outlook for aqueous lightning and as

00:04:23,760 --> 00:04:27,360
well as the future of what progressive

00:04:25,169 --> 00:04:29,130
decoupling might hold for Drupal so

00:04:27,360 --> 00:04:30,780
without further ado let me go ahead and

00:04:29,130 --> 00:04:32,010
and please well once again if you know

00:04:30,780 --> 00:04:33,780
for those of you in the back there's a

00:04:32,010 --> 00:04:35,460
couple of seats up here in the front you

00:04:33,780 --> 00:04:39,480
know please feel free to come up here

00:04:35,460 --> 00:04:42,810
and join us up front so alrighty let's

00:04:39,480 --> 00:04:44,490
go ahead and get started so what are the

00:04:42,810 --> 00:04:45,870
risks and rewards of decoupling Drupal

00:04:44,490 --> 00:04:47,490
you guys have probably heard the phrase

00:04:45,870 --> 00:04:49,620
decouple Drupal quite a bit lately or

00:04:47,490 --> 00:04:50,940
headless Drupal or API first scruple

00:04:49,620 --> 00:04:53,070
there's a lot of buzzwords going around

00:04:50,940 --> 00:04:56,070
and it's very important to clarify what

00:04:53,070 --> 00:04:58,560
exactly these things mean so just to be

00:04:56,070 --> 00:05:00,510
very clear decouple Drupal is the

00:04:58,560 --> 00:05:02,250
process of employing in this case what

00:05:00,510 --> 00:05:03,600
we're talking about here is the process

00:05:02,250 --> 00:05:05,580
of employing a different front-end from

00:05:03,600 --> 00:05:07,410
Drupal zone we're very familiar with a

00:05:05,580 --> 00:05:10,890
Drupal theme layer which we know which

00:05:07,410 --> 00:05:13,740
uses twig as a templating engine and

00:05:10,890 --> 00:05:15,630
it's most often used with a JavaScript

00:05:13,740 --> 00:05:16,860
or native application framework in this

00:05:15,630 --> 00:05:18,450
case today we're gonna be talking about

00:05:16,860 --> 00:05:20,910
JavaScript rainworks which are typically

00:05:18,450 --> 00:05:23,490
used in a universal or also known as

00:05:20,910 --> 00:05:25,830
isomorphic way which means that they are

00:05:23,490 --> 00:05:27,390
capable of executing Java are capable of

00:05:25,830 --> 00:05:27,870
being executed on both the client and

00:05:27,390 --> 00:05:30,540
the server

00:05:27,870 --> 00:05:33,000
now the decoupled front-end actually

00:05:30,540 --> 00:05:35,990
communicates with Drupal via what's

00:05:33,000 --> 00:05:38,010
called a restful api rest standing for

00:05:35,990 --> 00:05:39,840
representational state transfer the term

00:05:38,010 --> 00:05:41,610
promulgated by Roy fielding in his

00:05:39,840 --> 00:05:42,870
dissertation and you know just to

00:05:41,610 --> 00:05:46,680
distill it down to sort of the most

00:05:42,870 --> 00:05:48,810
basic tenets of this idea rest is the

00:05:46,680 --> 00:05:50,640
architecture of the web as we know it if

00:05:48,810 --> 00:05:53,190
you're familiar with HTTP and these

00:05:50,640 --> 00:05:55,289
methods that are used very often such as

00:05:53,190 --> 00:05:56,550
guest posts patch and delete these are

00:05:55,289 --> 00:05:59,580
things that are available right now in

00:05:56,550 --> 00:06:01,740
the Drupal 8 web services set of modules

00:05:59,580 --> 00:06:03,419
and are very powerful for communicating

00:06:01,740 --> 00:06:04,789
with Drupal without actually interacting

00:06:03,419 --> 00:06:08,340
with Drupal's front-end

00:06:04,789 --> 00:06:09,960
so using Drupal actually as a data

00:06:08,340 --> 00:06:11,520
service isn't a really new concept

00:06:09,960 --> 00:06:13,180
you know we had services in Drupal 6 and

00:06:11,520 --> 00:06:15,220
7 as well as the new version of

00:06:13,180 --> 00:06:16,870
certain services in Drupal 8 we had rest

00:06:15,220 --> 00:06:18,430
WS and a lot of other modules actually

00:06:16,870 --> 00:06:20,440
there's been a really rich ecosystem

00:06:18,430 --> 00:06:23,919
that's developed of restful modules in

00:06:20,440 --> 00:06:25,150
Drupal 7 8 and of course beyond now the

00:06:23,919 --> 00:06:26,860
thing to keep in mind is that you know

00:06:25,150 --> 00:06:28,449
Drupal can be used to back other

00:06:26,860 --> 00:06:30,070
primarily back in applications such as

00:06:28,449 --> 00:06:32,050
if you have a rails application or if

00:06:30,070 --> 00:06:34,270
you have a dotnet or others Symphony

00:06:32,050 --> 00:06:35,530
application let's say you know these

00:06:34,270 --> 00:06:38,259
days a lot of what we're talking about

00:06:35,530 --> 00:06:39,490
is really flexible you know allowing for

00:06:38,259 --> 00:06:41,560
a lot of flexibility on the front end

00:06:39,490 --> 00:06:44,500
meaning you know we can use Drupal to

00:06:41,560 --> 00:06:47,830
drive native applications or single page

00:06:44,500 --> 00:06:49,449
option applications now single page

00:06:47,830 --> 00:06:51,190
comments that applications tend to

00:06:49,449 --> 00:06:53,500
depend on what we call universal

00:06:51,190 --> 00:06:55,000
JavaScript and these are you know

00:06:53,500 --> 00:06:56,229
they're a lot of popular examples such

00:06:55,000 --> 00:06:58,270
as angular which we'll hear about later

00:06:56,229 --> 00:07:01,810
today as well as ember which we'll also

00:06:58,270 --> 00:07:03,580
hear about later today and react these

00:07:01,810 --> 00:07:05,320
clients you know are capable of

00:07:03,580 --> 00:07:06,550
performing client-side wee rendering

00:07:05,320 --> 00:07:08,560
without incurring additional page

00:07:06,550 --> 00:07:11,229
requests one of the things that is

00:07:08,560 --> 00:07:12,340
problematic or you know one of the

00:07:11,229 --> 00:07:15,130
important things to keep in mind about

00:07:12,340 --> 00:07:17,440
Drupal page based model is that you have

00:07:15,130 --> 00:07:20,139
a full page refresh every time you hit a

00:07:17,440 --> 00:07:21,400
new route native applications in this

00:07:20,139 --> 00:07:22,630
case usually have their own rendering

00:07:21,400 --> 00:07:26,080
systems because they're built in

00:07:22,630 --> 00:07:28,479
Objective C in the iOS case or Java in

00:07:26,080 --> 00:07:30,250
the Android case so just to give a

00:07:28,479 --> 00:07:32,710
little bit of history and to illustrate

00:07:30,250 --> 00:07:34,030
what this is all about right now the way

00:07:32,710 --> 00:07:35,849
that Drupal works is that let's say you

00:07:34,030 --> 00:07:37,539
have a newsletter subscribe form

00:07:35,849 --> 00:07:38,740
generally speaking when you hit that

00:07:37,539 --> 00:07:40,659
submit button that's gonna trigger a

00:07:38,740 --> 00:07:42,370
full page refresh and as you can see

00:07:40,659 --> 00:07:44,889
here what we've got is we've got two

00:07:42,370 --> 00:07:47,110
distinct bootstraps of Drupal the Drupal

00:07:44,889 --> 00:07:48,729
front-end is part and parcel of Drupal

00:07:47,110 --> 00:07:51,310
it's a monolithic architecture in this

00:07:48,729 --> 00:07:53,289
case data is being sent into templates

00:07:51,310 --> 00:07:54,699
and these templates are actually what's

00:07:53,289 --> 00:07:57,250
responsible for putting together the

00:07:54,699 --> 00:07:59,650
HTML that we actually see as a generated

00:07:57,250 --> 00:08:00,820
output now what happens here in this

00:07:59,650 --> 00:08:02,229
case is that you have to wait there's

00:08:00,820 --> 00:08:05,259
gonna be a white screen because the page

00:08:02,229 --> 00:08:08,800
is reloading this changed quite a bit in

00:08:05,259 --> 00:08:10,630
the early to mid-2000s with what a lot

00:08:08,800 --> 00:08:13,270
of people call Ajax asynchronous

00:08:10,630 --> 00:08:16,630
JavaScript and XML and in this case what

00:08:13,270 --> 00:08:19,090
happens is you have a you know your

00:08:16,630 --> 00:08:20,169
server-side is capable of consuming Ajax

00:08:19,090 --> 00:08:22,029
requests and in this case what happens

00:08:20,169 --> 00:08:23,409
is you have a little spinner you know

00:08:22,029 --> 00:08:25,120
when you hit submit you're gonna get a

00:08:23,409 --> 00:08:25,830
little spinner and a little update is

00:08:25,120 --> 00:08:28,650
going to happen that's

00:08:25,830 --> 00:08:29,700
very granular small Dom update and in

00:08:28,650 --> 00:08:31,380
this case what you have is you have an

00:08:29,700 --> 00:08:34,860
Ajax response which actually gives you

00:08:31,380 --> 00:08:36,990
let's say the success message now with

00:08:34,860 --> 00:08:38,880
dynamic pages and more client-side we're

00:08:36,990 --> 00:08:40,830
rendering these kinds of tenants have

00:08:38,880 --> 00:08:44,070
really shifted quite a bit rather than

00:08:40,830 --> 00:08:46,200
actually use you know Ajax to really

00:08:44,070 --> 00:08:48,870
perform very granular Dom updates we're

00:08:46,200 --> 00:08:52,080
actually using XML HTTP request which is

00:08:48,870 --> 00:08:54,540
a JavaScript API to actually allow us to

00:08:52,080 --> 00:08:56,550
access the REST API that lies on top of

00:08:54,540 --> 00:08:57,990
Drupal and in this case what we're

00:08:56,550 --> 00:08:59,370
talking about is a decoupled front-end

00:08:57,990 --> 00:09:01,680
which is completely separate from Drupal

00:08:59,370 --> 00:09:04,500
and interact solely with Drupal through

00:09:01,680 --> 00:09:05,640
an HTTP request and response pattern and

00:09:04,500 --> 00:09:07,290
as you can see what we've got here is

00:09:05,640 --> 00:09:09,930
we've got actually a rear end ring going

00:09:07,290 --> 00:09:12,420
on where the spinner in this case is in

00:09:09,930 --> 00:09:14,400
is indicating to the user that there is

00:09:12,420 --> 00:09:16,530
a state change here and this you know

00:09:14,400 --> 00:09:17,580
sort of left and right sidebar as you

00:09:16,530 --> 00:09:20,010
can see the right side bar completely

00:09:17,580 --> 00:09:23,610
rear Enders and it has the success

00:09:20,010 --> 00:09:26,040
message so decoupled Drupal obviously

00:09:23,610 --> 00:09:27,240
I'm sorry loops decoupled Drupal is very

00:09:26,040 --> 00:09:28,440
important because you know you can

00:09:27,240 --> 00:09:29,760
really use any language that you want

00:09:28,440 --> 00:09:33,360
any sort of technology that you choose

00:09:29,760 --> 00:09:34,770
on the front end and so in this case you

00:09:33,360 --> 00:09:36,330
know there's a lot of different examples

00:09:34,770 --> 00:09:38,330
of this the first is a single page

00:09:36,330 --> 00:09:41,790
application in Universal JavaScript

00:09:38,330 --> 00:09:43,500
which uses a REST API you can have a

00:09:41,790 --> 00:09:48,150
Java based native Android application

00:09:43,500 --> 00:09:50,220
and of course you can also have a single

00:09:48,150 --> 00:09:51,780
unified REST API that controls multiple

00:09:50,220 --> 00:09:53,610
applications and let's say that you

00:09:51,780 --> 00:09:55,620
might have a selects application that is

00:09:53,610 --> 00:09:57,360
written in PHP that you're serving data

00:09:55,620 --> 00:09:59,100
to so it really runs the gamut there's a

00:09:57,360 --> 00:10:01,620
wide spectrum of things that you can do

00:09:59,100 --> 00:10:03,120
with decoupled Drupal now what are some

00:10:01,620 --> 00:10:04,560
of the rewards of decoupled Drupal well

00:10:03,120 --> 00:10:05,580
the first is separation of concerns a

00:10:04,560 --> 00:10:07,560
lot of us are very concerned about

00:10:05,580 --> 00:10:09,630
structure versus presentation which

00:10:07,560 --> 00:10:11,130
means that structural data structured

00:10:09,630 --> 00:10:12,780
data should be separate from the

00:10:11,130 --> 00:10:15,360
presentational information that actually

00:10:12,780 --> 00:10:17,760
controls the aesthetic the aesthetic and

00:10:15,360 --> 00:10:19,110
appearance of that data also content

00:10:17,760 --> 00:10:20,370
syndication a lot of what we've been

00:10:19,110 --> 00:10:21,630
talking about today is the idea of

00:10:20,370 --> 00:10:23,010
writing once and publishing everywhere

00:10:21,630 --> 00:10:24,270
you want to be able to write content and

00:10:23,010 --> 00:10:26,550
have that sent out and distribute it out

00:10:24,270 --> 00:10:28,230
to all of your different clients also

00:10:26,550 --> 00:10:30,060
differentiated development velocities

00:10:28,230 --> 00:10:31,980
one of the things that a lot of people

00:10:30,060 --> 00:10:33,150
have a little too recently is that if

00:10:31,980 --> 00:10:34,620
you have a separate front-end team a

00:10:33,150 --> 00:10:36,240
completely distinct front-end team that

00:10:34,620 --> 00:10:38,310
only knows JavaScript and does not know

00:10:36,240 --> 00:10:39,420
PHP it can be very but you know very

00:10:38,310 --> 00:10:41,940
beneficial to actually have

00:10:39,420 --> 00:10:43,530
distinct velocities also a rich

00:10:41,940 --> 00:10:45,510
application ecosystem you can actually

00:10:43,530 --> 00:10:47,190
enable a very sort of large decoupled

00:10:45,510 --> 00:10:48,090
architecture with Drupal as the

00:10:47,190 --> 00:10:50,940
centerpiece of that application

00:10:48,090 --> 00:10:52,110
ecosystem now there are some risks of

00:10:50,940 --> 00:10:53,880
decoupling Drupal which I do want to

00:10:52,110 --> 00:10:55,260
highlight and I think many of us are

00:10:53,880 --> 00:10:56,760
aware of this if you've read some of the

00:10:55,260 --> 00:10:58,650
recent blog posts on this topic recently

00:10:56,760 --> 00:11:00,450
you'll probably have seen some of this

00:10:58,650 --> 00:11:02,130
the first is that oftentimes when you

00:11:00,450 --> 00:11:03,510
have an additional application that lies

00:11:02,130 --> 00:11:05,190
on top of Drupal you'll introduce an

00:11:03,510 --> 00:11:06,240
additional point of failure for example

00:11:05,190 --> 00:11:07,710
let's say that you're a front-end

00:11:06,240 --> 00:11:10,710
application is hosted on a different

00:11:07,710 --> 00:11:11,970
domain and then your Drupal site what

00:11:10,710 --> 00:11:13,530
might end up happening is that if your

00:11:11,970 --> 00:11:15,150
application goes down you no longer have

00:11:13,530 --> 00:11:18,990
an inlet for people to be able to

00:11:15,150 --> 00:11:21,960
actually browse your your your to use

00:11:18,990 --> 00:11:23,370
your experience also there's no

00:11:21,960 --> 00:11:25,290
cross-site scripting or empat

00:11:23,370 --> 00:11:26,760
sanitization which Drupal automatically

00:11:25,290 --> 00:11:28,230
provides out-of-the-box obviously a lot

00:11:26,760 --> 00:11:30,150
of the frameworks have their own systems

00:11:28,230 --> 00:11:31,950
for actually making sure that all of the

00:11:30,150 --> 00:11:35,370
output on all of the user input is

00:11:31,950 --> 00:11:36,930
sanitized third there's no in place or

00:11:35,370 --> 00:11:38,760
in-context editing or administration

00:11:36,930 --> 00:11:40,710
which means that contextual UIs things

00:11:38,760 --> 00:11:42,600
like contextual links tool bar in place

00:11:40,710 --> 00:11:44,370
editing which we know and love in Drupal

00:11:42,600 --> 00:11:45,480
8 are no longer available and some of

00:11:44,370 --> 00:11:48,420
your editors might be concerned about

00:11:45,480 --> 00:11:49,980
that also the concept of layout and

00:11:48,420 --> 00:11:52,710
display management you really don't have

00:11:49,980 --> 00:11:54,480
the ability to control layout anymore if

00:11:52,710 --> 00:11:55,920
you're using panels there's you know

00:11:54,480 --> 00:11:57,360
there's solutions out there for you to

00:11:55,920 --> 00:11:59,700
use the fully decoupled front end with

00:11:57,360 --> 00:12:01,920
panels but you don't necessarily get the

00:11:59,700 --> 00:12:04,740
full account the the full flexibility of

00:12:01,920 --> 00:12:06,440
doing that also no previous content

00:12:04,740 --> 00:12:08,760
workflow which means that if you have

00:12:06,440 --> 00:12:10,470
you know content workflow where you need

00:12:08,760 --> 00:12:12,840
to make sure embargoed content does not

00:12:10,470 --> 00:12:14,610
get served publicly that's something

00:12:12,840 --> 00:12:17,310
where you know it's very difficult to

00:12:14,610 --> 00:12:18,840
actually ascertain how to make the rest

00:12:17,310 --> 00:12:21,210
api serve out this content in a way

00:12:18,840 --> 00:12:24,150
that's robust and protected from the

00:12:21,210 --> 00:12:26,100
public also modules affecting the

00:12:24,150 --> 00:12:27,840
front-end if you have modules that are

00:12:26,100 --> 00:12:29,670
creating forms for your Drupal front-end

00:12:27,840 --> 00:12:31,740
oftentimes that is completely lost

00:12:29,670 --> 00:12:35,340
because you no longer have access to the

00:12:31,740 --> 00:12:36,810
form API in Drupal finally a lot of site

00:12:35,340 --> 00:12:38,480
builders and content editors rely

00:12:36,810 --> 00:12:42,180
heavily on system airs and notifications

00:12:38,480 --> 00:12:43,500
what we know as a DSM these things are

00:12:42,180 --> 00:12:46,710
no longer available when you're using

00:12:43,500 --> 00:12:49,590
Drupal as as solely a back-end a solely

00:12:46,710 --> 00:12:51,540
a data service also one of the big

00:12:49,590 --> 00:12:52,960
compelling features of Drupal 8 is

00:12:51,540 --> 00:12:54,970
what's called cache tag

00:12:52,960 --> 00:12:56,350
or cash ability metadata in which you

00:12:54,970 --> 00:12:58,060
can use cash tags to declare

00:12:56,350 --> 00:12:59,529
dependencies on data that's provided by

00:12:58,060 --> 00:13:00,640
Drupal and this is very important

00:12:59,529 --> 00:13:02,620
because you can have differentiated

00:13:00,640 --> 00:13:04,330
caching of page components and this

00:13:02,620 --> 00:13:05,920
actually enables what is one of the most

00:13:04,330 --> 00:13:07,870
compelling features of Drupal 8 which is

00:13:05,920 --> 00:13:10,420
big pipe progressive loading if you have

00:13:07,870 --> 00:13:12,580
a piece of content or a piece of your

00:13:10,420 --> 00:13:14,740
site which is you know a piece of your

00:13:12,580 --> 00:13:16,110
page which is less cacheable big pipe

00:13:14,740 --> 00:13:18,310
actually enables you to differentiate

00:13:16,110 --> 00:13:20,910
differentiated lis load that so that the

00:13:18,310 --> 00:13:23,320
less cashable content comes later

00:13:20,910 --> 00:13:25,209
finally last but not least no accessible

00:13:23,320 --> 00:13:26,680
markup or user experience benefits

00:13:25,209 --> 00:13:29,200
oftentimes if you are going to be

00:13:26,680 --> 00:13:30,760
decoupling Drupal fully you are going to

00:13:29,200 --> 00:13:33,459
need to worry a lot more about your user

00:13:30,760 --> 00:13:35,350
experience and your accessibility Drupal

00:13:33,459 --> 00:13:37,420
obviously has Aria rules built in

00:13:35,350 --> 00:13:40,120
completely and you know if you are

00:13:37,420 --> 00:13:42,160
needing to serve out you know served

00:13:40,120 --> 00:13:43,480
users who are relying on assistive

00:13:42,160 --> 00:13:45,520
technologies such as screen readers or

00:13:43,480 --> 00:13:48,040
refreshable Braille displays it's a very

00:13:45,520 --> 00:13:49,240
important thing that your that's your

00:13:48,040 --> 00:13:50,980
accessibility and user experience are

00:13:49,240 --> 00:13:52,810
first-class and so one thing I'd like to

00:13:50,980 --> 00:13:54,399
say is that if you are decoupling Drupal

00:13:52,810 --> 00:13:57,760
you have to become the markup and

00:13:54,399 --> 00:13:59,410
accessibility guru so when should you

00:13:57,760 --> 00:14:01,330
decouple Drupal actually well oftentimes

00:13:59,410 --> 00:14:03,040
when it comes to Drupal you might not

00:14:01,330 --> 00:14:05,440
want sort of the heavyweight bootstrap

00:14:03,040 --> 00:14:06,820
of Drupal to be on your back-end

00:14:05,440 --> 00:14:08,290
oftentimes you might want to use a micro

00:14:06,820 --> 00:14:11,050
service system like that so the way that

00:14:08,290 --> 00:14:12,700
Driss recommends decoupling Drupal is if

00:14:11,050 --> 00:14:14,410
you have a site that's pre-existing

00:14:12,700 --> 00:14:15,670
injury poll that's you know powers other

00:14:14,410 --> 00:14:18,220
sites or powers one or more other

00:14:15,670 --> 00:14:19,810
applications it's a really good idea to

00:14:18,220 --> 00:14:20,860
use that as the centerpiece of your

00:14:19,810 --> 00:14:22,420
application ecosystem

00:14:20,860 --> 00:14:23,560
you should not generally use it for

00:14:22,420 --> 00:14:26,230
standalone applications or standalone

00:14:23,560 --> 00:14:27,820
sites you don't really need the overhead

00:14:26,230 --> 00:14:29,080
of a decoupled architecture if you have

00:14:27,820 --> 00:14:30,870
a standalone site or application unless

00:14:29,080 --> 00:14:32,950
you are actually someone who's pursuing

00:14:30,870 --> 00:14:35,020
let's say a full-stack JavaScript

00:14:32,950 --> 00:14:37,600
architecture you can actually with

00:14:35,020 --> 00:14:39,579
Drupal lead to you know workarounds that

00:14:37,600 --> 00:14:41,920
will duplicate or obfuscate some of the

00:14:39,579 --> 00:14:43,060
integrity of end-to-end Drupal so

00:14:41,920 --> 00:14:44,079
there's actually a better solution out

00:14:43,060 --> 00:14:45,730
there which I call progressive

00:14:44,079 --> 00:14:48,040
decoupling how many people have heard of

00:14:45,730 --> 00:14:50,020
progressive decoupling okay great a lot

00:14:48,040 --> 00:14:52,089
of you have so why progressively

00:14:50,020 --> 00:14:53,709
decoupled Drupal well let's go back to

00:14:52,089 --> 00:14:55,570
what we were talking about in terms of

00:14:53,709 --> 00:14:56,829
this illustration of of the way that

00:14:55,570 --> 00:14:59,140
fully decoupled rupal works in the

00:14:56,829 --> 00:15:00,940
context of JavaScript well in this case

00:14:59,140 --> 00:15:02,140
once again you have an HTTP request

00:15:00,940 --> 00:15:04,029
that's coming in from the client side

00:15:02,140 --> 00:15:05,740
and the rest api will process that

00:15:04,029 --> 00:15:07,690
request and serve out

00:15:05,740 --> 00:15:09,340
a response that will actually be

00:15:07,690 --> 00:15:11,440
interpreted by the client-side and fill

00:15:09,340 --> 00:15:13,390
in the right sidebar in this case now

00:15:11,440 --> 00:15:14,620
generally speaking in this case what's

00:15:13,390 --> 00:15:15,850
happening is all of the rendering is

00:15:14,620 --> 00:15:17,590
taking place through the JavaScript

00:15:15,850 --> 00:15:18,670
framework and this can be really

00:15:17,590 --> 00:15:20,260
beneficial if you're a front-end

00:15:18,670 --> 00:15:23,980
developer and you really value that very

00:15:20,260 --> 00:15:25,750
strong rendering process however in

00:15:23,980 --> 00:15:27,760
progressively decoupled Drupal we turn

00:15:25,750 --> 00:15:29,410
this model on its head rather than using

00:15:27,760 --> 00:15:31,210
the JavaScript framework on its own

00:15:29,410 --> 00:15:32,980
we actually interpolate the JavaScript

00:15:31,210 --> 00:15:35,680
framework into Drupal's front-end and

00:15:32,980 --> 00:15:36,910
allow the REST API to serve as the as

00:15:35,680 --> 00:15:38,680
the means of communication between the

00:15:36,910 --> 00:15:40,720
Java framework that is inside of Drupal

00:15:38,680 --> 00:15:42,610
within drupal's front-end and Drupal

00:15:40,720 --> 00:15:44,260
itself and in this case what this

00:15:42,610 --> 00:15:45,550
schematic is illustrating is that the

00:15:44,260 --> 00:15:46,900
left sidebar it might be served out

00:15:45,550 --> 00:15:48,790
through drupal the overarching page

00:15:46,900 --> 00:15:50,770
structure structure as paged is served

00:15:48,790 --> 00:15:52,600
out by Drupal and then you have a right

00:15:50,770 --> 00:15:54,550
sidebar let's say which has a lot of

00:15:52,600 --> 00:15:56,620
client side we rendering which actually

00:15:54,550 --> 00:16:00,130
is controlled by a framework such as

00:15:56,620 --> 00:16:01,390
angular or ember now let's go back to

00:16:00,130 --> 00:16:02,680
these risks and let's talk about how

00:16:01,390 --> 00:16:05,860
Presley decoupled Drupal actually

00:16:02,680 --> 00:16:07,300
addresses all of these risks so one of

00:16:05,860 --> 00:16:09,400
the rewards of parisa decoupling is

00:16:07,300 --> 00:16:11,110
let's say that you have a Drupal site

00:16:09,400 --> 00:16:12,790
and you have a JavaScript framework if

00:16:11,110 --> 00:16:14,950
you are interpolating your JavaScript

00:16:12,790 --> 00:16:15,910
framework into your Drupal site that

00:16:14,950 --> 00:16:18,730
often means that you're going to be

00:16:15,910 --> 00:16:20,470
hosting the same at hosting both of them

00:16:18,730 --> 00:16:22,270
at the same location right so you avoid

00:16:20,470 --> 00:16:24,790
a lot of these issues of course which is

00:16:22,270 --> 00:16:26,320
a big point of contention right now or

00:16:24,790 --> 00:16:29,350
at the point of concern right now in the

00:16:26,320 --> 00:16:31,270
Drupal community you also get access to

00:16:29,350 --> 00:16:33,610
Drupal's form validation and cross-site

00:16:31,270 --> 00:16:35,020
scripting protection and finally if you

00:16:33,610 --> 00:16:36,730
are having editors who are really

00:16:35,020 --> 00:16:38,970
concerned about things like in-place

00:16:36,730 --> 00:16:40,990
editing things like preview things like

00:16:38,970 --> 00:16:43,810
contextual links that's actually

00:16:40,990 --> 00:16:45,160
provided for in this context as well so

00:16:43,810 --> 00:16:46,570
you can have your editors continue to

00:16:45,160 --> 00:16:51,790
preview continue to enjoy things like

00:16:46,570 --> 00:16:54,760
enjoy things like system errors in the

00:16:51,790 --> 00:16:56,440
context of Drupal also layout display

00:16:54,760 --> 00:16:57,580
management if you want to use panels and

00:16:56,440 --> 00:16:59,890
you want to continue to be able to

00:16:57,580 --> 00:17:01,330
leverage the block system in Drupal

00:16:59,890 --> 00:17:03,730
those are things that you can still

00:17:01,330 --> 00:17:06,220
leverage with a partially decoupled a

00:17:03,730 --> 00:17:07,600
progressively decoupled portion of the

00:17:06,220 --> 00:17:08,770
Drupal front-end and a lot of people

00:17:07,600 --> 00:17:10,570
actually refer to this as hybrid

00:17:08,770 --> 00:17:12,070
decoupling but that's a little bit

00:17:10,570 --> 00:17:15,130
confusing because of the term hybrid app

00:17:12,070 --> 00:17:16,990
which exists as well so the other big

00:17:15,130 --> 00:17:18,060
issue here is that you have preview pool

00:17:16,990 --> 00:17:19,740
content workflow

00:17:18,060 --> 00:17:22,470
embargoed content because of the way the

00:17:19,740 --> 00:17:24,750
drupal is able to serve out content that

00:17:22,470 --> 00:17:26,370
is embargoed and and and give you access

00:17:24,750 --> 00:17:30,000
to moderated content that is not

00:17:26,370 --> 00:17:31,110
publicly visible you can very easily do

00:17:30,000 --> 00:17:32,580
that with Drupal as well if you have

00:17:31,110 --> 00:17:35,550
let's say components of the page that

00:17:32,580 --> 00:17:37,170
are still content-based now if you do

00:17:35,550 --> 00:17:38,730
have modules affecting the front-end

00:17:37,170 --> 00:17:41,280
such as web form that's also something

00:17:38,730 --> 00:17:42,840
that can remain in Drupal but obviously

00:17:41,280 --> 00:17:44,640
you can also power your other forms

00:17:42,840 --> 00:17:46,080
let's say in the sidebar with the same

00:17:44,640 --> 00:17:49,500
approach that you would find in the jobs

00:17:46,080 --> 00:17:51,420
for framework finally big pipe is a

00:17:49,500 --> 00:17:53,220
really really big thing you know I think

00:17:51,420 --> 00:17:54,810
that a lot of us have seen demo that

00:17:53,220 --> 00:17:57,210
when Lear's has produced about how you

00:17:54,810 --> 00:17:59,460
can see the page actually loading in

00:17:57,210 --> 00:18:00,540
this sort of differentiated fashion and

00:17:59,460 --> 00:18:01,830
that's a very very compelling feature

00:18:00,540 --> 00:18:03,390
that I think is very important not to

00:18:01,830 --> 00:18:05,820
jettison in Drupal 8

00:18:03,390 --> 00:18:08,130
finally Drupal about once again has

00:18:05,820 --> 00:18:09,600
accessible markup out-of-the-box and a

00:18:08,130 --> 00:18:12,030
lot of UX benefits if you are using

00:18:09,600 --> 00:18:13,520
Drupal is built-in you eyes which means

00:18:12,030 --> 00:18:17,310
that a lot of those features can be

00:18:13,520 --> 00:18:19,170
leveraged right away so without further

00:18:17,310 --> 00:18:21,600
ado I'd like to go into a case study

00:18:19,170 --> 00:18:23,430
about whether com here's some further

00:18:21,600 --> 00:18:24,600
background for for some links and

00:18:23,430 --> 00:18:25,860
actually one of the things I keep in

00:18:24,600 --> 00:18:26,810
mind is that whether comm has actually

00:18:25,860 --> 00:18:29,820
been doing progressive the progressive

00:18:26,810 --> 00:18:31,890
decoupling for several years now they

00:18:29,820 --> 00:18:34,050
have you know with the help of media

00:18:31,890 --> 00:18:36,300
current have built this progressive lead

00:18:34,050 --> 00:18:38,730
a couple panels implementation which

00:18:36,300 --> 00:18:42,150
introduces which interpolates angular

00:18:38,730 --> 00:18:43,530
components into Drupal so just to really

00:18:42,150 --> 00:18:45,240
quickly go over what this looks like

00:18:43,530 --> 00:18:47,130
from a schematic point of view what's

00:18:45,240 --> 00:18:48,420
going on here is that as an editor if I

00:18:47,130 --> 00:18:50,880
want to manipulate the page layout

00:18:48,420 --> 00:18:52,950
layout and I want to have a left sidebar

00:18:50,880 --> 00:18:54,900
of content and a right sidebar that's

00:18:52,950 --> 00:18:56,940
more of like an application I am very

00:18:54,900 --> 00:18:57,900
able to do that and what happens here in

00:18:56,940 --> 00:18:59,370
this case is that you can have a

00:18:57,900 --> 00:19:03,030
component of your page which is

00:18:59,370 --> 00:19:05,040
controlled entirely by angular and so in

00:19:03,030 --> 00:19:07,110
this case you have server-side rendered

00:19:05,040 --> 00:19:08,820
output that is served by Drupal and you

00:19:07,110 --> 00:19:10,560
have client-side rendered output which

00:19:08,820 --> 00:19:12,090
is served by angular and in this case

00:19:10,560 --> 00:19:14,070
what can happen is that your server-side

00:19:12,090 --> 00:19:16,440
rendered output from Drupal can actually

00:19:14,070 --> 00:19:18,090
be the sort of starting point for

00:19:16,440 --> 00:19:19,440
angular and you can have and hate them

00:19:18,090 --> 00:19:22,290
you can basically have an have a

00:19:19,440 --> 00:19:23,940
handover to angular to enable you to

00:19:22,290 --> 00:19:27,270
have that initial server-side and render

00:19:23,940 --> 00:19:29,820
and not wait for the spinner to for the

00:19:27,270 --> 00:19:31,260
content to load so with that I'd like to

00:19:29,820 --> 00:19:31,800
introduce Matt Davis who will talk a

00:19:31,260 --> 00:19:41,850
little bit

00:19:31,800 --> 00:19:43,440
wthr.com in their approach thank you so

00:19:41,850 --> 00:19:46,500
thank you very much Preston for the

00:19:43,440 --> 00:19:49,230
introduction and as he mentioned whether

00:19:46,500 --> 00:19:53,340
comm is a Drupal site it launched in

00:19:49,230 --> 00:19:54,120
November 2014 and has been going along

00:19:53,340 --> 00:19:58,140
ever since

00:19:54,120 --> 00:20:00,000
so before weather came to us they were

00:19:58,140 --> 00:20:02,820
evaluating a bunch of different CMS's

00:20:00,000 --> 00:20:05,360
and when they first approached media

00:20:02,820 --> 00:20:07,650
current to architect a solution for them

00:20:05,360 --> 00:20:10,350
they presented us with some metrics

00:20:07,650 --> 00:20:11,970
about their current architecture so this

00:20:10,350 --> 00:20:13,830
is a little bit about it at the time

00:20:11,970 --> 00:20:16,380
they were running a hundred and

00:20:13,830 --> 00:20:18,060
forty-four origin servers and doing an

00:20:16,380 --> 00:20:20,370
average of about 50 million pageviews

00:20:18,060 --> 00:20:22,860
per day now one of the things that makes

00:20:20,370 --> 00:20:25,350
the weather.com site really unique is

00:20:22,860 --> 00:20:26,940
that although there's high traffic all

00:20:25,350 --> 00:20:29,100
the time there's also extremely high

00:20:26,940 --> 00:20:31,290
variability in traffic so on a normal

00:20:29,100 --> 00:20:33,150
weather day they may do 50 million

00:20:31,290 --> 00:20:35,300
pageviews but when a major weather event

00:20:33,150 --> 00:20:40,020
occurs it can spike up to like 800

00:20:35,300 --> 00:20:42,900
million pageviews per day so they were

00:20:40,020 --> 00:20:45,810
having serious problems even with 144

00:20:42,900 --> 00:20:48,120
origin servers keeping the site up when

00:20:45,810 --> 00:20:49,770
major weather events would happen part

00:20:48,120 --> 00:20:51,720
of that is also because another unique

00:20:49,770 --> 00:20:54,870
feature of weather comm is that it has

00:20:51,720 --> 00:20:57,450
to be hyper localized at the time they

00:20:54,870 --> 00:20:59,070
were doing about 2.9 million different

00:20:57,450 --> 00:21:01,530
locations they were serving unique data

00:20:59,070 --> 00:21:03,240
for now it's actually closer to a

00:21:01,530 --> 00:21:06,840
billion because they're down into sub

00:21:03,240 --> 00:21:08,370
zip codes so there's a very unique and

00:21:06,840 --> 00:21:11,430
challenging set of problems that we had

00:21:08,370 --> 00:21:12,930
to face just in terms of the traffic and

00:21:11,430 --> 00:21:16,770
the caching strategy that we wanted to

00:21:12,930 --> 00:21:18,990
implement so the overriding concern when

00:21:16,770 --> 00:21:21,420
architecting out a new weather comm was

00:21:18,990 --> 00:21:23,010
performance and caching but we also had

00:21:21,420 --> 00:21:24,090
other major considerations that we had

00:21:23,010 --> 00:21:26,430
to look at

00:21:24,090 --> 00:21:28,740
they had a large in-house front-end

00:21:26,430 --> 00:21:31,470
developer team that we wanted to unable

00:21:28,740 --> 00:21:34,110
to really get a lot of traction and have

00:21:31,470 --> 00:21:36,210
a high feature velocity they also have

00:21:34,110 --> 00:21:38,430
large editorial teams that want to be

00:21:36,210 --> 00:21:40,800
able to generate new content as quickly

00:21:38,430 --> 00:21:42,270
as possible so let's go into each of

00:21:40,800 --> 00:21:45,490
these a little bit and how we address

00:21:42,270 --> 00:21:47,200
them so for performance and caching

00:21:45,490 --> 00:21:49,570
what we had to do was first take a long

00:21:47,200 --> 00:21:51,700
hard look at what a wthr.com page a

00:21:49,570 --> 00:21:53,440
typical page looks like and what we

00:21:51,700 --> 00:21:54,820
found is that different sections

00:21:53,440 --> 00:21:57,160
different pieces of the page had

00:21:54,820 --> 00:21:59,740
different needs in terms of how long

00:21:57,160 --> 00:22:02,410
they could be cached how localized they

00:21:59,740 --> 00:22:04,780
needed to be and things like that so we

00:22:02,410 --> 00:22:07,030
began to break these pages apart into

00:22:04,780 --> 00:22:09,100
these sections we would serve the same

00:22:07,030 --> 00:22:13,270
exact wrapper with the head and the

00:22:09,100 --> 00:22:14,980
basic foot header footer and the pieces

00:22:13,270 --> 00:22:17,950
of content that could last the longest

00:22:14,980 --> 00:22:22,480
from origin to every single person then

00:22:17,950 --> 00:22:24,250
we had using Akamai zsi at the edge we

00:22:22,480 --> 00:22:26,200
could do edge calculations as well for

00:22:24,250 --> 00:22:28,570
region specific calculations that we

00:22:26,200 --> 00:22:31,630
needed to do that we're still not hyper

00:22:28,570 --> 00:22:35,230
personalized so we had three places

00:22:31,630 --> 00:22:37,750
there we can do origin ESI for edge

00:22:35,230 --> 00:22:40,090
calculations that a region specific and

00:22:37,750 --> 00:22:42,100
then client-side for things that need to

00:22:40,090 --> 00:22:44,800
be hyper personal or that just need a

00:22:42,100 --> 00:22:46,809
richer user experience that front-end

00:22:44,800 --> 00:22:49,059
framework could provide the front-end

00:22:46,809 --> 00:22:51,040
framework we went with for this project

00:22:49,059 --> 00:22:53,800
was angular 1

00:22:51,040 --> 00:23:00,100
they've been on angular 1.3 now for

00:22:53,800 --> 00:23:01,840
almost two years and after that we had

00:23:00,100 --> 00:23:03,880
to deal with how to cater to their

00:23:01,840 --> 00:23:05,380
front-end developer teams so let's talk

00:23:03,880 --> 00:23:07,390
a little bit about what front-end

00:23:05,380 --> 00:23:09,179
developers want to do specifically here

00:23:07,390 --> 00:23:11,050
I'm talking about JavaScript developers

00:23:09,179 --> 00:23:13,570
JavaScript developers want to write

00:23:11,050 --> 00:23:15,940
JavaScript they don't want to have to

00:23:13,570 --> 00:23:18,610
care innately about Drupal or learn all

00:23:15,940 --> 00:23:19,600
of these Drupal api's and they want to

00:23:18,610 --> 00:23:22,210
be able to keep up with where the

00:23:19,600 --> 00:23:24,490
JavaScript world is headed which if any

00:23:22,210 --> 00:23:26,140
of you know it's a very rapidly evolving

00:23:24,490 --> 00:23:29,080
ecosystem there things are changing

00:23:26,140 --> 00:23:30,610
really quickly so they want to spend

00:23:29,080 --> 00:23:33,160
their time learning JavaScript and not

00:23:30,610 --> 00:23:35,950
Drupal editorial teams on the other hand

00:23:33,160 --> 00:23:39,070
want to be able to create content and

00:23:35,950 --> 00:23:40,840
for the weather case specifically they

00:23:39,070 --> 00:23:42,790
wanted to be able not just to create new

00:23:40,840 --> 00:23:45,460
types of content but create an entire

00:23:42,790 --> 00:23:46,929
new pages and layouts on the fly without

00:23:45,460 --> 00:23:49,960
having to go to a developer every time

00:23:46,929 --> 00:23:52,300
that they wanted a new layout so we

00:23:49,960 --> 00:23:55,240
explored all of these independent needs

00:23:52,300 --> 00:23:57,130
and came up with a solution that we call

00:23:55,240 --> 00:23:58,330
the presentation framework and as

00:23:57,130 --> 00:24:01,270
Preston mentioned this is a

00:23:58,330 --> 00:24:04,300
progressively decoupled solution built

00:24:01,270 --> 00:24:06,970
heavily leveraging the panel's module so

00:24:04,300 --> 00:24:09,010
at its root it's a way for us to allow

00:24:06,970 --> 00:24:11,650
editorial teams to put components on

00:24:09,010 --> 00:24:14,290
pages but these individual components

00:24:11,650 --> 00:24:17,040
can be created independently by

00:24:14,290 --> 00:24:19,750
front-end JavaScript developers they're

00:24:17,040 --> 00:24:22,660
completely encapsulated each piece each

00:24:19,750 --> 00:24:26,169
component in its own subdirectory with

00:24:22,660 --> 00:24:28,840
whatever JavaScript CSS and template

00:24:26,169 --> 00:24:31,720
files it needs and then a small JSON

00:24:28,840 --> 00:24:33,400
formatted file with metadata about that

00:24:31,720 --> 00:24:35,620
piece of functionality that declares it

00:24:33,400 --> 00:24:39,250
out to Drupal Drupal walks all these

00:24:35,620 --> 00:24:42,130
directories finds these JSON files and

00:24:39,250 --> 00:24:44,169
ingest them into CTools content types or

00:24:42,130 --> 00:24:45,910
panels pains as you may know them so

00:24:44,169 --> 00:24:49,300
then editorial teams can place them on

00:24:45,910 --> 00:24:52,419
pages and those modules once ingested by

00:24:49,300 --> 00:24:57,760
Drupal can be served either at origin or

00:24:52,419 --> 00:25:00,220
by ESI so Y panels well we got a lot of

00:24:57,760 --> 00:25:02,530
benefit from panels we heavily leveraged

00:25:00,220 --> 00:25:04,570
the variant and selection rules so that

00:25:02,530 --> 00:25:07,750
we can deliver different types of

00:25:04,570 --> 00:25:11,380
displays based on device detection for

00:25:07,750 --> 00:25:13,480
example while maintaining URL parity we

00:25:11,380 --> 00:25:16,030
can reuse and export these panes so we

00:25:13,480 --> 00:25:17,650
can have a nice developer workflow of

00:25:16,030 --> 00:25:20,220
being able to save everything into code

00:25:17,650 --> 00:25:24,130
we can also use contextual information

00:25:20,220 --> 00:25:25,960
and for example take a zip code from the

00:25:24,130 --> 00:25:28,660
URL and generate a full context object

00:25:25,960 --> 00:25:31,630
with a bunch of location data about that

00:25:28,660 --> 00:25:34,750
and pass it out to the client and also

00:25:31,630 --> 00:25:36,370
for editorial teams it's got the

00:25:34,750 --> 00:25:38,110
drag-and-drop interface that makes it

00:25:36,370 --> 00:25:42,460
easy for them to put new pieces of

00:25:38,110 --> 00:25:45,520
content onto their pages so that's the

00:25:42,460 --> 00:25:47,260
long backstory and as I said whether com

00:25:45,520 --> 00:25:50,169
launched with this system back in

00:25:47,260 --> 00:25:52,870
November 2014 and it served their needs

00:25:50,169 --> 00:25:56,050
very well they actually went from 144

00:25:52,870 --> 00:25:58,419
origin servers down to 10 and most of

00:25:56,050 --> 00:26:01,720
those sit idle now due to this new

00:25:58,419 --> 00:26:04,390
caching strategy but that's all kind of

00:26:01,720 --> 00:26:08,050
history now so where what's been

00:26:04,390 --> 00:26:09,480
happening recently is we are migrating

00:26:08,050 --> 00:26:11,650
their sister site Weather Underground

00:26:09,480 --> 00:26:14,800
onto the same platform

00:26:11,650 --> 00:26:17,680
this migration began discovery for it

00:26:14,800 --> 00:26:18,900
began last November and I went out to

00:26:17,680 --> 00:26:21,520
San Francisco to Weather Underground

00:26:18,900 --> 00:26:24,670
headquarters and one of the first big

00:26:21,520 --> 00:26:27,670
asks the team there had was we don't

00:26:24,670 --> 00:26:30,340
really want to use angular 1.3 we'd

00:26:27,670 --> 00:26:32,830
really like to explore using a more

00:26:30,340 --> 00:26:36,580
modern framework and so we began looking

00:26:32,830 --> 00:26:39,250
at some options and settled in on using

00:26:36,580 --> 00:26:41,380
angular 2 which at the time was still an

00:26:39,250 --> 00:26:43,990
alpha state but Weather Underground

00:26:41,380 --> 00:26:45,310
likes to live a little dangerously and I

00:26:43,990 --> 00:26:48,130
was excited at the opportunity

00:26:45,310 --> 00:26:51,190
so we dove in and I started doing

00:26:48,130 --> 00:26:55,630
investigation into what it would take to

00:26:51,190 --> 00:26:59,110
make this same exact framework work with

00:26:55,630 --> 00:27:01,000
either angular 1 or angular 2 now what

00:26:59,110 --> 00:27:03,490
makes this situation especially complex

00:27:01,000 --> 00:27:05,470
is that the both sites live in the exact

00:27:03,490 --> 00:27:09,760
same code base as in the exact same

00:27:05,470 --> 00:27:11,200
repository so any reorganization

00:27:09,760 --> 00:27:13,120
refactoring that we did on the

00:27:11,200 --> 00:27:14,890
presentation framework for Weather

00:27:13,120 --> 00:27:19,540
Underground had to not break weather

00:27:14,890 --> 00:27:23,860
calm as well but we got some really

00:27:19,540 --> 00:27:26,500
exciting results out of it so the goals

00:27:23,860 --> 00:27:30,640
of framework agnosticism as we open this

00:27:26,500 --> 00:27:33,340
up to allow JavaScript developers to

00:27:30,640 --> 00:27:34,720
actually use multiple frameworks but we

00:27:33,340 --> 00:27:36,640
still kept some guardrails in place

00:27:34,720 --> 00:27:38,980
because the actual framework

00:27:36,640 --> 00:27:42,130
bootstrapping and definitions were still

00:27:38,980 --> 00:27:44,710
written server-side are written in

00:27:42,130 --> 00:27:46,660
Drupal code in Drupal modules and we

00:27:44,710 --> 00:27:49,780
were able to still leverage all the

00:27:46,660 --> 00:27:53,080
panel's editorial experience that we got

00:27:49,780 --> 00:27:56,740
from this as well got a little ahead of

00:27:53,080 --> 00:27:58,590
myself here so the key thing here though

00:27:56,740 --> 00:28:00,640
that I haven't mentioned is that by

00:27:58,590 --> 00:28:03,310
refactoring to allow us to use either

00:28:00,640 --> 00:28:05,350
angular 1 or angular 2 we really opened

00:28:03,310 --> 00:28:08,230
the door now the presentation framework

00:28:05,350 --> 00:28:10,750
by adding another small sub module we

00:28:08,230 --> 00:28:13,020
can declare a react presentation as well

00:28:10,750 --> 00:28:16,570
and then allow people to start writing

00:28:13,020 --> 00:28:18,130
react components or ember or whatever

00:28:16,570 --> 00:28:19,930
the next framework is that we haven't

00:28:18,130 --> 00:28:22,480
even heard of yet we can just write a

00:28:19,930 --> 00:28:24,020
small sub module that will hook into the

00:28:22,480 --> 00:28:26,270
existing presentation frame where

00:28:24,020 --> 00:28:28,540
and enable those JavaScript developers

00:28:26,270 --> 00:28:32,240
to create those things

00:28:28,540 --> 00:28:35,809
so where is TWC the weather company

00:28:32,240 --> 00:28:37,820
headed well as it stands today they have

00:28:35,809 --> 00:28:40,910
the ability on a per panels variant

00:28:37,820 --> 00:28:43,040
basis to choose which presentation they

00:28:40,910 --> 00:28:44,809
want to use so right now that's angular

00:28:43,040 --> 00:28:47,330
1 or angular 2 but we're actively

00:28:44,809 --> 00:28:50,240
working on other definitions for these

00:28:47,330 --> 00:28:53,210
frameworks as well and we're really

00:28:50,240 --> 00:28:55,340
excited the TWC team is really excited

00:28:53,210 --> 00:28:57,440
about how this will really open up their

00:28:55,340 --> 00:29:00,320
ability to innovate an experiment

00:28:57,440 --> 00:29:03,440
they're also looking into the ability to

00:29:00,320 --> 00:29:06,110
use now we're using Akamai I on an edge

00:29:03,440 --> 00:29:07,520
scape to do bandwidth detection as well

00:29:06,110 --> 00:29:09,020
so they're looking into the possibility

00:29:07,520 --> 00:29:11,320
of delivering more lightweight

00:29:09,020 --> 00:29:14,929
frameworks for lower bandwidth users

00:29:11,320 --> 00:29:17,110
which I'm really excited about also so

00:29:14,929 --> 00:29:20,690
that is where things are headed with TWC

00:29:17,110 --> 00:29:23,990
but what about Drupal 8 because this is

00:29:20,690 --> 00:29:25,490
all still living in Drupal 7 world well

00:29:23,990 --> 00:29:28,100
I'm really excited to announce that

00:29:25,490 --> 00:29:31,040
we've been working on a port of this

00:29:28,100 --> 00:29:34,429
same model to Drupal 8 it's called the D

00:29:31,040 --> 00:29:36,350
couple blocks module and it has a few

00:29:34,429 --> 00:29:39,620
key differences from the presentation

00:29:36,350 --> 00:29:41,780
framework one of the big ones is that

00:29:39,620 --> 00:29:43,340
this is actually open source and you can

00:29:41,780 --> 00:29:45,559
go download it today and start playing

00:29:43,340 --> 00:29:47,270
with it it's currently a sandbox project

00:29:45,559 --> 00:29:50,840
but we're working on making it a full

00:29:47,270 --> 00:29:53,540
project on drupal.org instead of being

00:29:50,840 --> 00:29:55,610
built on top of panels now panels in

00:29:53,540 --> 00:29:58,640
Drupal 8 is actually built on top of the

00:29:55,610 --> 00:30:01,940
new blocks system using the new plug-in

00:29:58,640 --> 00:30:04,400
API which is really really really groovy

00:30:01,940 --> 00:30:06,320
you can reuse blocks now you can export

00:30:04,400 --> 00:30:08,510
them to code a lot of the things that

00:30:06,320 --> 00:30:12,559
were problematic about blocks in Drupal

00:30:08,510 --> 00:30:14,600
7 are gone now and the current D couple

00:30:12,559 --> 00:30:17,870
blocks module already supports angular 2

00:30:14,600 --> 00:30:21,140
and react and we are actively working on

00:30:17,870 --> 00:30:24,740
an ember definition as well but we need

00:30:21,140 --> 00:30:26,300
a lot of help and with that I'll hand it

00:30:24,740 --> 00:30:29,020
over to John to talk about the progress

00:30:26,300 --> 00:30:29,020
we made with it

00:30:34,300 --> 00:30:40,820
thanks Matt so I head up the module

00:30:39,380 --> 00:30:42,050
acceleration program and this was a

00:30:40,820 --> 00:30:44,210
module that we thought was really

00:30:42,050 --> 00:30:47,030
important because it opens up a new

00:30:44,210 --> 00:30:49,820
concept to Drupal which is JavaScript a

00:30:47,030 --> 00:30:51,110
component assembly and that's that's

00:30:49,820 --> 00:30:53,360
going to be I think a very strong

00:30:51,110 --> 00:30:55,550
concept going forward you know pressed

00:30:53,360 --> 00:30:57,020
and talked about it a little bit what we

00:30:55,550 --> 00:30:58,820
did is we go to sprint together with

00:30:57,020 --> 00:31:01,820
media current and arc we're up in the

00:30:58,820 --> 00:31:03,740
Aqua offices in Boston to really push

00:31:01,820 --> 00:31:05,600
this concept forward and get the module

00:31:03,740 --> 00:31:08,180
out there for Drupal 8 so by Drupal con

00:31:05,600 --> 00:31:09,590
everyone can go and try this out and you

00:31:08,180 --> 00:31:12,640
know and start using it on their sites

00:31:09,590 --> 00:31:15,350
so these are the people he had along

00:31:12,640 --> 00:31:18,410
Adams head Derrick Matt Bob mark and

00:31:15,350 --> 00:31:20,270
Adam there's two atoms and those are

00:31:18,410 --> 00:31:21,470
their Twitter Twitter pictures because

00:31:20,270 --> 00:31:23,900
that's how you're gonna recognize them

00:31:21,470 --> 00:31:26,690
and I was there for moral support I was

00:31:23,900 --> 00:31:28,640
there to do logistics and get the space

00:31:26,690 --> 00:31:30,800
and you know feed everyone which is

00:31:28,640 --> 00:31:32,780
critical in a sprint but these guys

00:31:30,800 --> 00:31:36,080
really put in some amazing work and got

00:31:32,780 --> 00:31:38,360
some great stuff done so you know we had

00:31:36,080 --> 00:31:40,250
seven developers over three days we went

00:31:38,360 --> 00:31:42,890
to a baseball game and I'm from

00:31:40,250 --> 00:31:45,830
Australia so that's novel for me though

00:31:42,890 --> 00:31:46,940
we went ate seafood in Boston which you

00:31:45,830 --> 00:31:48,710
know is pretty epic

00:31:46,940 --> 00:31:51,080
we're in you're lean so you know but

00:31:48,710 --> 00:31:53,050
Boston is pretty good as well and we did

00:31:51,080 --> 00:31:56,300
a massive refactoring of the module

00:31:53,050 --> 00:32:00,110
which Adam HANA couldn't be here with us

00:31:56,300 --> 00:32:01,580
today really spearheaded and and meant

00:32:00,110 --> 00:32:03,620
that we have a much what was the the

00:32:01,580 --> 00:32:06,740
code decrease that we had it was a

00:32:03,620 --> 00:32:14,900
massive well when we started the Sprint

00:32:06,740 --> 00:32:20,270
we actually had angular 2 still in there

00:32:14,900 --> 00:32:23,300
you go - 100,000 lines yeah right and

00:32:20,270 --> 00:32:25,280
and we had beer so there's there's the

00:32:23,300 --> 00:32:26,780
ball game was lots of fun you know

00:32:25,280 --> 00:32:28,100
there's some of the food from Boston so

00:32:26,780 --> 00:32:30,530
I encourage you to visit Boston at some

00:32:28,100 --> 00:32:32,540
point and we actually released it well

00:32:30,530 --> 00:32:34,610
we've got got the module on on github

00:32:32,540 --> 00:32:36,320
and it will be a full module on

00:32:34,610 --> 00:32:38,150
drupal.org very soon I think it's our

00:32:36,320 --> 00:32:40,320
TBC right now

00:32:38,150 --> 00:32:43,860
right so here are some of the things we

00:32:40,320 --> 00:32:45,090
got done so it's now easy to use for

00:32:43,860 --> 00:32:47,190
JavaScript developers and Drupal

00:32:45,090 --> 00:32:48,990
developers you know based on a lot of

00:32:47,190 --> 00:32:50,490
standards that we put in there it's a

00:32:48,990 --> 00:32:51,720
single bootstrap but the underlying

00:32:50,490 --> 00:32:53,760
framework so if you've got a ton of

00:32:51,720 --> 00:32:56,940
angular components certainly get a

00:32:53,760 --> 00:32:59,370
bootstrap angular once site builders can

00:32:56,940 --> 00:33:01,230
configure the components in the UI so

00:32:59,370 --> 00:33:03,330
I'm I'll explain these a little bit more

00:33:01,230 --> 00:33:05,070
later but this is a brief overview it

00:33:03,330 --> 00:33:06,780
means that I can add a field as a

00:33:05,070 --> 00:33:10,020
developer in that field is accessible by

00:33:06,780 --> 00:33:12,930
a site builder so developers can require

00:33:10,020 --> 00:33:15,510
a context and pass-through values to the

00:33:12,930 --> 00:33:17,550
JavaScript component and components can

00:33:15,510 --> 00:33:19,500
be used rapidly this is a road matter

00:33:17,550 --> 00:33:22,680
roadmap item but we think it's really

00:33:19,500 --> 00:33:27,150
interesting to generate static page

00:33:22,680 --> 00:33:29,970
prototypes and living style guides so to

00:33:27,150 --> 00:33:32,760
kick this off you haven't refreshed this

00:33:29,970 --> 00:33:34,710
page because actually now our framework

00:33:32,760 --> 00:33:36,810
agnostic you can actually use any

00:33:34,710 --> 00:33:39,120
framework on this we've tested it with

00:33:36,810 --> 00:33:41,160
angular 2 and react you can use any

00:33:39,120 --> 00:33:42,510
framework and the path think of

00:33:41,160 --> 00:33:44,700
components is really simple it's a

00:33:42,510 --> 00:33:46,080
standards-based so it's really simple to

00:33:44,700 --> 00:33:49,860
know where to put your JavaScript code

00:33:46,080 --> 00:33:52,170
so site builders configuring the ability

00:33:49,860 --> 00:33:54,300
to configure components in UI so the

00:33:52,170 --> 00:33:57,000
developers can write configuration files

00:33:54,300 --> 00:34:00,410
into the info Tamil file and these

00:33:57,000 --> 00:34:03,180
fields are shown during block placement

00:34:00,410 --> 00:34:04,410
so if you can imagine the experiences as

00:34:03,180 --> 00:34:06,870
a developer there might be a ton of

00:34:04,410 --> 00:34:09,660
things that I want the site builder to

00:34:06,870 --> 00:34:12,929
define in a text field or in a drop-down

00:34:09,660 --> 00:34:15,540
or in in a radio you know radio buttons

00:34:12,929 --> 00:34:17,730
that I want them to define so that I can

00:34:15,540 --> 00:34:19,200
build this component once and then it

00:34:17,730 --> 00:34:21,330
might be on a ton of sites just like

00:34:19,200 --> 00:34:23,310
Drupal and configured in a multitude of

00:34:21,330 --> 00:34:25,890
different ways that opens up the

00:34:23,310 --> 00:34:27,990
possibility that I might write a block

00:34:25,890 --> 00:34:29,550
or you know a module for my company or

00:34:27,990 --> 00:34:31,140
for or an open-source module that

00:34:29,550 --> 00:34:33,929
everyone in Drupal can use we can really

00:34:31,140 --> 00:34:36,720
think about you know quite agnostic use

00:34:33,929 --> 00:34:38,100
cases of these components an example

00:34:36,720 --> 00:34:40,080
might be and this is a very specific

00:34:38,100 --> 00:34:42,210
example but it is a very generalized

00:34:40,080 --> 00:34:44,550
concept a developer creates a donation

00:34:42,210 --> 00:34:46,650
component with a field for a suggested

00:34:44,550 --> 00:34:48,690
donation and then the site builder can

00:34:46,650 --> 00:34:50,450
actually specify that amount when

00:34:48,690 --> 00:34:52,550
they're placing the block

00:34:50,450 --> 00:34:54,950
you know with a static value or I mean

00:34:52,550 --> 00:34:57,650
maybe more interestingly a token from

00:34:54,950 --> 00:34:59,660
Drupal so this opens up a ton of things

00:34:57,650 --> 00:35:02,440
you can do you know information you're

00:34:59,660 --> 00:35:05,050
getting already in the drupal bootstrap

00:35:02,440 --> 00:35:07,490
so components can be contextually aware

00:35:05,050 --> 00:35:09,680
developers can entitle a couple

00:35:07,490 --> 00:35:11,359
components component functionality to

00:35:09,680 --> 00:35:15,250
Drupal's existing system for wrench to

00:35:11,359 --> 00:35:17,630
entities so you imagine I might have a

00:35:15,250 --> 00:35:20,510
category I might have a taxonomy and I

00:35:17,630 --> 00:35:22,250
might attach that to my node and that

00:35:20,510 --> 00:35:24,170
can be passed through to a component and

00:35:22,250 --> 00:35:26,300
you know the example we've got is you

00:35:24,170 --> 00:35:27,740
might be pulling recommendations you

00:35:26,300 --> 00:35:30,800
know with the JavaScript component might

00:35:27,740 --> 00:35:32,930
be lazy loading and you can pass you can

00:35:30,800 --> 00:35:35,960
pass the taxonomy term through to that

00:35:32,930 --> 00:35:38,750
component if it exists which is a really

00:35:35,960 --> 00:35:41,660
powerful concept connecting Drupal and

00:35:38,750 --> 00:35:44,630
JavaScript tightly tightly coupling them

00:35:41,660 --> 00:35:47,060
together so yeah this and the component

00:35:44,630 --> 00:35:49,190
contentiously display conditionally you

00:35:47,060 --> 00:35:50,960
know that this is the kinds of concepts

00:35:49,190 --> 00:35:53,570
that we've built in to the module and

00:35:50,960 --> 00:35:55,099
this is a this so static prototypes and

00:35:53,570 --> 00:35:57,440
style guides this is kind of more of a

00:35:55,099 --> 00:35:59,030
you know it's aspirational at the moment

00:35:57,440 --> 00:36:00,859
it's not built at the moment if you can

00:35:59,030 --> 00:36:03,680
imagine eight if you can imagine the

00:36:00,859 --> 00:36:05,839
organization has a library of components

00:36:03,680 --> 00:36:08,270
that can actually use site builders can

00:36:05,839 --> 00:36:09,980
use to quickly mock-up what the site is

00:36:08,270 --> 00:36:12,560
going to be like and then this allows

00:36:09,980 --> 00:36:16,089
for model where all the teams can work

00:36:12,560 --> 00:36:18,020
in parallel because you can have themers

00:36:16,089 --> 00:36:20,210
change the look and feel of those

00:36:18,020 --> 00:36:22,339
components while back-end developers

00:36:20,210 --> 00:36:24,710
might be you know drupal back-end

00:36:22,339 --> 00:36:27,079
developers developing Drupal API

00:36:24,710 --> 00:36:29,390
developers outside of Drupal developing

00:36:27,079 --> 00:36:31,280
their components and all of these teams

00:36:29,390 --> 00:36:34,910
can work together from that part

00:36:31,280 --> 00:36:36,290
prototype so you know it was great to

00:36:34,910 --> 00:36:38,359
have media current up at the Aqua

00:36:36,290 --> 00:36:40,430
offices I think we had a great time and

00:36:38,359 --> 00:36:42,050
we got a ton done and you know so I want

00:36:40,430 --> 00:36:43,730
to thank Mediacom for that

00:36:42,050 --> 00:36:46,190
you know this module hopefully will make

00:36:43,730 --> 00:36:48,770
a big impact you know in in drupal's

00:36:46,190 --> 00:36:52,089
ability to address decoupled and now

00:36:48,770 --> 00:36:52,089
Matt's gonna give us a short dinner

00:36:56,150 --> 00:37:02,270
maybe we'll see so I just wanted to show

00:37:00,110 --> 00:37:04,940
you guys a little bit about how this

00:37:02,270 --> 00:37:06,800
actually looks in Drupal 8 I'm gonna be

00:37:04,940 --> 00:37:08,450
really brief but I encourage everyone if

00:37:06,800 --> 00:37:10,700
you're interested reach out to me later

00:37:08,450 --> 00:37:12,710
or find me I have a brainstorming buff

00:37:10,700 --> 00:37:14,720
on this Wednesday and we're gonna be

00:37:12,710 --> 00:37:15,760
sprinting all day Friday on it too so if

00:37:14,720 --> 00:37:19,910
you're interested in getting involved

00:37:15,760 --> 00:37:21,560
come find me so this is the module PDB

00:37:19,910 --> 00:37:24,680
for progressively decoupled blocks

00:37:21,560 --> 00:37:26,900
you'll see inside here we have a few sub

00:37:24,680 --> 00:37:28,730
modules for different frameworks the

00:37:26,900 --> 00:37:31,220
angular 2 one is currently the most

00:37:28,730 --> 00:37:33,140
fleshed out but basically the main

00:37:31,220 --> 00:37:35,870
module itself all it really does is

00:37:33,140 --> 00:37:39,020
define some block and block derivative

00:37:35,870 --> 00:37:40,910
definitions and then it has component

00:37:39,020 --> 00:37:43,130
discovery which is built on top of the

00:37:40,910 --> 00:37:45,950
core gamal discovery system in Drupal 8

00:37:43,130 --> 00:37:48,380
that walks the directories and finds the

00:37:45,950 --> 00:37:51,550
example files so we have our own custom

00:37:48,380 --> 00:37:55,880
yamo type just like modules or profiles

00:37:51,550 --> 00:37:57,500
or themes the this is the pdb gamal type

00:37:55,880 --> 00:38:01,040
that each component will have so let's

00:37:57,500 --> 00:38:03,110
take a look inside one of these sub

00:38:01,040 --> 00:38:05,570
modules so this is the progressive Leedy

00:38:03,110 --> 00:38:08,600
couple blocks angular 2 sub module that

00:38:05,570 --> 00:38:11,390
defines this specific framework for use

00:38:08,600 --> 00:38:13,870
by the system and we have some example

00:38:11,390 --> 00:38:16,700
components in here so I'll show you one

00:38:13,870 --> 00:38:18,620
what it looks like it's just if you're

00:38:16,700 --> 00:38:21,050
familiar at all with these component

00:38:18,620 --> 00:38:23,180
based angular 2 this is exactly what you

00:38:21,050 --> 00:38:25,310
would see and any normal angular 2

00:38:23,180 --> 00:38:29,270
component you have your component file

00:38:25,310 --> 00:38:32,600
definition and then your template file

00:38:29,270 --> 00:38:34,610
and you have this small info file that's

00:38:32,600 --> 00:38:37,700
the only piece that you have to add to

00:38:34,610 --> 00:38:39,950
your existing angular 2 component to

00:38:37,700 --> 00:38:43,850
declare it out to Drupal and once this

00:38:39,950 --> 00:38:49,310
piece is here when we go back over to

00:38:43,850 --> 00:38:51,980
the page and place a block these are

00:38:49,310 --> 00:38:55,400
interpreted into blocks that we can

00:38:51,980 --> 00:38:57,470
place on these pages and you'll see I

00:38:55,400 --> 00:38:58,820
already have a couple here on this page

00:38:57,470 --> 00:39:02,690
so I'll just show you what it looks like

00:38:58,820 --> 00:39:05,180
oh nice I've already done most of these

00:39:02,690 --> 00:39:07,880
so this is the to-do list that I made

00:39:05,180 --> 00:39:09,710
last night and I can mark most of these

00:39:07,880 --> 00:39:14,839
off

00:39:09,710 --> 00:39:17,000
I had something else all of this is

00:39:14,839 --> 00:39:19,730
being stored in local storage as well so

00:39:17,000 --> 00:39:22,670
you can actually refresh the page and it

00:39:19,730 --> 00:39:24,619
will store your to-do that's just one

00:39:22,670 --> 00:39:27,290
example we also have over here a little

00:39:24,619 --> 00:39:29,570
tour of Heroes this has two different

00:39:27,290 --> 00:39:31,910
components so when I click in on one it

00:39:29,570 --> 00:39:36,619
loads a sub component and then it can

00:39:31,910 --> 00:39:39,530
change things so that's a really basic

00:39:36,619 --> 00:39:42,410
example but I hope that shows just how

00:39:39,530 --> 00:39:45,830
you can create these encapsulated pieces

00:39:42,410 --> 00:39:47,630
of front-end functionality without

00:39:45,830 --> 00:39:49,820
having to really know any Drupal at all

00:39:47,630 --> 00:39:52,250
and then you can just drop them in and

00:39:49,820 --> 00:39:54,770
allow your your site maintainer x' to

00:39:52,250 --> 00:39:56,420
actually put these on pages in really

00:39:54,770 --> 00:39:58,880
dynamic ways so we're really excited

00:39:56,420 --> 00:40:11,030
about this guys and I'll hand it back to

00:39:58,880 --> 00:40:14,030
John hey we're flying so I may have to

00:40:11,030 --> 00:40:15,680
speak off the cuff so I think this is

00:40:14,030 --> 00:40:18,920
ready for developers you know the idea

00:40:15,680 --> 00:40:20,480
of into inter component communication

00:40:18,920 --> 00:40:23,330
that Matt was demonstrating is really

00:40:20,480 --> 00:40:24,800
powerful you know bringing JavaScript

00:40:23,330 --> 00:40:27,230
developers use your team XI now it

00:40:24,800 --> 00:40:31,839
should be a lot easier Preston can you

00:40:27,230 --> 00:40:31,839
fix your internet connectivity second

00:40:35,800 --> 00:40:42,109
but what I think is left to do what I

00:40:39,980 --> 00:40:44,390
think is left to do is actually to bring

00:40:42,109 --> 00:40:46,970
this bring more of the functionality

00:40:44,390 --> 00:40:49,160
functionality of site both as well to

00:40:46,970 --> 00:40:51,700
authors to people assembling experiences

00:40:49,160 --> 00:40:55,880
and so you know my other raw apart from

00:40:51,700 --> 00:40:57,980
yet math is is aqua aqua lightning which

00:40:55,880 --> 00:41:00,020
is really about you know a site builder

00:40:57,980 --> 00:41:02,390
experience an authoring experience we

00:41:00,020 --> 00:41:04,520
want to bring this concept of assembling

00:41:02,390 --> 00:41:06,020
javascript experiences into lightning so

00:41:04,520 --> 00:41:07,970
that everyone can use it

00:41:06,020 --> 00:41:09,260
look at youth atleast an example and

00:41:07,970 --> 00:41:11,540
even if you don't want to use light and

00:41:09,260 --> 00:41:15,220
you can see how to implement the couple

00:41:11,540 --> 00:41:17,180
blocks you know in your Drupal site so

00:41:15,220 --> 00:41:25,039
you're back on

00:41:17,180 --> 00:41:28,579
yeah so you know at the moment there's a

00:41:25,039 --> 00:41:30,380
current approach for 4d couple blocks

00:41:28,579 --> 00:41:33,049
there we go

00:41:30,380 --> 00:41:35,029
you will be testing the couple blocks

00:41:33,049 --> 00:41:37,520
with lightening we're going to continue

00:41:35,029 --> 00:41:39,440
to improve progressive decoupling and

00:41:37,520 --> 00:41:42,710
the concept of JavaScript application

00:41:39,440 --> 00:41:45,470
assembly and I think this actually could

00:41:42,710 --> 00:41:47,690
be a concept that's great for for

00:41:45,470 --> 00:41:49,369
JavaScript as well because at the moment

00:41:47,690 --> 00:41:51,349
it's still very developer driven and we

00:41:49,369 --> 00:41:54,200
know in Drupal that as soon as you

00:41:51,349 --> 00:41:56,720
enable people and other other roles in

00:41:54,200 --> 00:41:57,980
teams you can get leverage so it's more

00:41:56,720 --> 00:42:00,260
than the developers that can actually be

00:41:57,980 --> 00:42:03,020
developing experiences as soon as you

00:42:00,260 --> 00:42:04,819
allow for assembly so you know current

00:42:03,020 --> 00:42:06,650
approach utilized it a couple blocks

00:42:04,819 --> 00:42:08,240
module assist share standards with

00:42:06,650 --> 00:42:10,789
JavaScript developers and train authors

00:42:08,240 --> 00:42:13,099
you know but we have more plans for

00:42:10,789 --> 00:42:15,020
progressive decoupling so you know we're

00:42:13,099 --> 00:42:18,859
thinking about lightning integration in

00:42:15,020 --> 00:42:20,630
a 8 X 1.2 and there'll be a lot of

00:42:18,859 --> 00:42:23,180
enhancement to the panel's ecosystem

00:42:20,630 --> 00:42:24,079
making this easier and easier for

00:42:23,180 --> 00:42:25,819
authors

00:42:24,079 --> 00:42:27,380
there will be more component

00:42:25,819 --> 00:42:29,390
configuration standards we building into

00:42:27,380 --> 00:42:32,210
this module and and into inter

00:42:29,390 --> 00:42:34,430
communication and between components so

00:42:32,210 --> 00:42:37,910
advantages of JavaScript application is

00:42:34,430 --> 00:42:40,039
assembly you can do advanced content

00:42:37,910 --> 00:42:42,529
management yeah you've got Drupal's who

00:42:40,039 --> 00:42:44,029
can do layout in preview if it's illa

00:42:42,529 --> 00:42:46,069
Tate's large teams as I said there's a

00:42:44,029 --> 00:42:48,109
lot more parallel development that can

00:42:46,069 --> 00:42:49,910
go on and obviously maintenance and

00:42:48,109 --> 00:42:52,160
security these these are solve problems

00:42:49,910 --> 00:42:56,150
in Drupal and they're definitely not

00:42:52,160 --> 00:42:57,799
solved in JavaScript so at the moment

00:42:56,150 --> 00:43:00,380
we're still left with a situation where

00:42:57,799 --> 00:43:01,849
you can't do server-side renders of

00:43:00,380 --> 00:43:03,650
JavaScript and this is an often

00:43:01,849 --> 00:43:06,529
requested thing by JavaScript developers

00:43:03,650 --> 00:43:08,839
they want to process in node before it

00:43:06,529 --> 00:43:12,020
hits the front end and this this isn't

00:43:08,839 --> 00:43:13,520
in the model yet and it's a two step

00:43:12,020 --> 00:43:15,460
publishing process because you create

00:43:13,520 --> 00:43:18,829
the component and the the site builders

00:43:15,460 --> 00:43:19,579
place them on the page not necessarily a

00:43:18,829 --> 00:43:21,619
disadvantage

00:43:19,579 --> 00:43:23,210
depending on how you look at it but in

00:43:21,619 --> 00:43:26,000
the future we believe we are going to

00:43:23,210 --> 00:43:27,849
integrate a model where you can activate

00:43:26,000 --> 00:43:30,540
a node server to do server-side

00:43:27,849 --> 00:43:33,600
JavaScript rendering it won't be critter

00:43:30,540 --> 00:43:35,640
Cole but it will be possible and you

00:43:33,600 --> 00:43:38,220
know socket IO integration for for

00:43:35,640 --> 00:43:40,200
real-time communication JavaScript

00:43:38,220 --> 00:43:42,480
component templates that said before the

00:43:40,200 --> 00:43:46,860
possibility of native compilation I

00:43:42,480 --> 00:43:48,540
think is it ionic what's the yeah so you

00:43:46,860 --> 00:43:50,700
know in JavaScript there's this concept

00:43:48,540 --> 00:43:53,070
that you can potentially compile your

00:43:50,700 --> 00:44:03,440
JavaScript application and have an iOS

00:43:53,070 --> 00:44:03,440
app or or a you know or a Android app

00:44:04,850 --> 00:44:11,370
and this is amazing you know to be able

00:44:07,860 --> 00:44:13,020
to do truly native mobile but with one

00:44:11,370 --> 00:44:14,490
development experience is pretty

00:44:13,020 --> 00:44:16,680
cutting-edge and this is something that

00:44:14,490 --> 00:44:20,490
we want to eventually see in in

00:44:16,680 --> 00:44:22,650
progressively decoupled and JavaScript

00:44:20,490 --> 00:44:24,300
framework integration in core this is

00:44:22,650 --> 00:44:26,640
incredibly controversial at the moment

00:44:24,300 --> 00:44:29,700
I'm not pushing my views on all of you I

00:44:26,640 --> 00:44:30,810
think it would be good things there's

00:44:29,700 --> 00:44:33,330
been a lot of discussion at the moment

00:44:30,810 --> 00:44:36,540
and I hope we continue to have a lot of

00:44:33,330 --> 00:44:39,630
discussion about potentially selecting a

00:44:36,540 --> 00:44:43,170
particular JavaScript framework to to

00:44:39,630 --> 00:44:45,210
kind of boost Drupal so some future use

00:44:43,170 --> 00:44:47,130
cases we really think commerce

00:44:45,210 --> 00:44:49,740
integrations would be a great use case

00:44:47,130 --> 00:44:52,260
for this and customer self-service

00:44:49,740 --> 00:44:53,130
portals another one live content streams

00:44:52,260 --> 00:44:55,800
there are a lot of things at the moment

00:44:53,130 --> 00:44:59,220
you can do in Drupal but would benefit

00:44:55,800 --> 00:45:00,900
from from what JavaScript can bring so

00:44:59,220 --> 00:45:02,100
join us for the Sprint's we also need to

00:45:00,900 --> 00:45:04,470
have a Q&A though and I don't think we

00:45:02,100 --> 00:45:06,660
have the slides so maybe we'll just go

00:45:04,470 --> 00:45:08,730
with Q&A right now if you want to step

00:45:06,660 --> 00:45:10,650
up to the microphone here I don't think

00:45:08,730 --> 00:45:12,120
we have on one on the other side but it

00:45:10,650 --> 00:45:15,620
great to have some questions from the

00:45:12,120 --> 00:45:15,620
audience if you have them

00:45:20,820 --> 00:45:27,670
hello so if if you can go back and

00:45:25,510 --> 00:45:31,270
because it went really fast I think the

00:45:27,670 --> 00:45:33,970
portion about decoupling decoupled

00:45:31,270 --> 00:45:35,260
versus the progressively decoupled maybe

00:45:33,970 --> 00:45:42,400
walking through that a little more

00:45:35,260 --> 00:45:44,650
fine-grain yeah sure so the the thing to

00:45:42,400 --> 00:45:46,930
keep in mind is that when you fully

00:45:44,650 --> 00:45:48,760
decoupled rupal what that means is is

00:45:46,930 --> 00:45:50,440
that you're basically separating the

00:45:48,760 --> 00:45:52,150
front end from Drupal entirely so you

00:45:50,440 --> 00:45:53,560
have a Drupal site that's you know

00:45:52,150 --> 00:45:56,350
sitting over here on let's say

00:45:53,560 --> 00:45:57,640
example.com then you have your front-end

00:45:56,350 --> 00:45:59,500
application which could be hosted on the

00:45:57,640 --> 00:46:01,900
same place or could be on a different

00:45:59,500 --> 00:46:02,890
domain entirely hosted elsewhere which

00:46:01,900 --> 00:46:05,080
means that that introduces some

00:46:02,890 --> 00:46:06,520
cross-origin requests security issues if

00:46:05,080 --> 00:46:08,320
you need to basically have

00:46:06,520 --> 00:46:09,670
communications back and forth now

00:46:08,320 --> 00:46:13,330
progressive decoupling is different

00:46:09,670 --> 00:46:15,670
because rather than using decoupled

00:46:13,330 --> 00:46:17,830
Drupal as a means to serve a fully

00:46:15,670 --> 00:46:20,020
decoupled application that is completely

00:46:17,830 --> 00:46:21,070
standalone right so your JavaScript

00:46:20,020 --> 00:46:22,630
application that you're building

00:46:21,070 --> 00:46:24,970
universally let's say it's a it's an

00:46:22,630 --> 00:46:27,640
isomorphic angular application is going

00:46:24,970 --> 00:46:30,010
to be something that is completely on

00:46:27,640 --> 00:46:32,320
its own and completely decoupled from

00:46:30,010 --> 00:46:35,470
Drupal which means that Drupal has no

00:46:32,320 --> 00:46:37,510
visibility no introspection into what's

00:46:35,470 --> 00:46:40,210
going on on the client side and angular

00:46:37,510 --> 00:46:41,770
2 also has no introspection to what's

00:46:40,210 --> 00:46:43,090
happening within Drupal the only

00:46:41,770 --> 00:46:45,250
communication that's available is REST

00:46:43,090 --> 00:46:46,570
API the way that that progressive

00:46:45,250 --> 00:46:48,820
decoupling sort of turns this model on

00:46:46,570 --> 00:46:50,800
its head is that you have a framework

00:46:48,820 --> 00:46:52,420
that's introduced into Drupal as a means

00:46:50,800 --> 00:46:53,980
of improving interactivity so I think

00:46:52,420 --> 00:46:56,320
one of the good ways to think about it

00:46:53,980 --> 00:46:57,910
is use cases right if you're building a

00:46:56,320 --> 00:46:59,380
fully decoupled application oftentimes

00:46:57,910 --> 00:47:01,600
you'll want to have an auxilary a single

00:46:59,380 --> 00:47:03,580
page app a single page application which

00:47:01,600 --> 00:47:05,470
is you know part of a sort of larger

00:47:03,580 --> 00:47:07,570
docket of applications that you might

00:47:05,470 --> 00:47:09,790
have but if you're just looking for ways

00:47:07,570 --> 00:47:12,460
to introduce interactivity into a

00:47:09,790 --> 00:47:14,200
pre-existing Drupal site or you know

00:47:12,460 --> 00:47:15,340
basically enable your teams that you

00:47:14,200 --> 00:47:16,840
know if you have a front-end team that's

00:47:15,340 --> 00:47:17,890
distinct from an editorial team you want

00:47:16,840 --> 00:47:19,390
to be able to empower both of those

00:47:17,890 --> 00:47:21,190
teams to pursue their own velocities

00:47:19,390 --> 00:47:22,810
that's a case where progressive

00:47:21,190 --> 00:47:24,460
decoupling is very good because as a

00:47:22,810 --> 00:47:25,540
site builder the site assembler you know

00:47:24,460 --> 00:47:27,130
I want to be able to manipulate my

00:47:25,540 --> 00:47:28,240
layout I want to be able to touch

00:47:27,130 --> 00:47:29,710
something on the page and edit it

00:47:28,240 --> 00:47:31,599
directly I want to be able to have my

00:47:29,710 --> 00:47:33,339
toolbar contextual links and when

00:47:31,599 --> 00:47:34,989
you do when you have your standalone

00:47:33,339 --> 00:47:37,479
fully decoupled JavaScript application

00:47:34,989 --> 00:47:39,099
that is no longer available so I don't

00:47:37,479 --> 00:47:42,220
know if that answers your question

00:47:39,099 --> 00:47:45,220
so is that accomplished by the I think

00:47:42,220 --> 00:47:47,650
you guys referring to the like there's

00:47:45,220 --> 00:47:49,930
like a sub module or something is that

00:47:47,650 --> 00:47:51,910
what it accomplishes that that's the

00:47:49,930 --> 00:47:54,160
part I was a little confused about

00:47:51,910 --> 00:47:56,799
well the sub module is what allows a

00:47:54,160 --> 00:47:58,779
specific framework to integrate with the

00:47:56,799 --> 00:48:01,150
overall system the main module is what

00:47:58,779 --> 00:48:02,619
actually will walk through these

00:48:01,150 --> 00:48:05,470
directories find these JavaScript

00:48:02,619 --> 00:48:10,299
components and make them available to

00:48:05,470 --> 00:48:12,069
Drupal for placement on pages so so as

00:48:10,299 --> 00:48:14,859
opposed to this fully decoupled thing

00:48:12,069 --> 00:48:17,799
we're bringing javascript pieces in to

00:48:14,859 --> 00:48:19,239
our Drupal site and when we you can

00:48:17,799 --> 00:48:20,680
think of it as that specific section

00:48:19,239 --> 00:48:22,420
yeah when we could leave it is that if

00:48:20,680 --> 00:48:24,130
you have a Drupal site right the only

00:48:22,420 --> 00:48:25,390
modules that you're gonna enable on the

00:48:24,130 --> 00:48:28,269
Drupal side are going to be the rest

00:48:25,390 --> 00:48:31,059
modules and core rests how basic goth

00:48:28,269 --> 00:48:33,160
you know and what you know what happens

00:48:31,059 --> 00:48:34,690
in that case is that you're all of your

00:48:33,160 --> 00:48:36,309
functionality is wrapped up in that

00:48:34,690 --> 00:48:38,289
Universal JavaScript implementation it's

00:48:36,309 --> 00:48:40,839
not wrapped up in a sort of you know

00:48:38,289 --> 00:48:47,140
Drupal and let's say angular together in

00:48:40,839 --> 00:48:48,700
the same bucket thank you yep yes I so

00:48:47,140 --> 00:48:51,190
I'm an ionic developer and a Drupal

00:48:48,700 --> 00:48:52,839
developer and so right now I have a on

00:48:51,190 --> 00:48:55,900
ik apps that are fully decoupled from

00:48:52,839 --> 00:48:58,930
Drupal no at the end when you guys were

00:48:55,900 --> 00:49:02,259
talking about lightening that I'm not

00:48:58,930 --> 00:49:04,390
sure what that is still but how does

00:49:02,259 --> 00:49:06,400
that how does I guess doing this

00:49:04,390 --> 00:49:09,609
progressive develop progressive

00:49:06,400 --> 00:49:11,140
decoupling helped the ionic and Drupal

00:49:09,609 --> 00:49:13,329
development processes because right now

00:49:11,140 --> 00:49:16,690
they're two separate environments

00:49:13,329 --> 00:49:18,099
completely to maintain both of those yes

00:49:16,690 --> 00:49:19,690
so I think it's interesting because when

00:49:18,099 --> 00:49:21,299
you think about you know generally

00:49:19,690 --> 00:49:25,119
speaking when you're using ionic you're

00:49:21,299 --> 00:49:28,299
compiling angular down to let's say you

00:49:25,119 --> 00:49:30,579
know Objective C or Java and I think in

00:49:28,299 --> 00:49:33,069
this case it's it's kind of speculative

00:49:30,579 --> 00:49:34,749
because you know right now the concept

00:49:33,069 --> 00:49:36,609
of progressive decoupling is predicated

00:49:34,749 --> 00:49:38,680
on the idea of components but there's a

00:49:36,609 --> 00:49:40,719
wide spectrum of possible limitations of

00:49:38,680 --> 00:49:42,460
progressive decoupling there's actually

00:49:40,719 --> 00:49:43,880
a very interesting use case where you

00:49:42,460 --> 00:49:46,309
have a

00:49:43,880 --> 00:49:49,069
you know sort of a Drupal site that is

00:49:46,309 --> 00:49:53,049
only serving out a page shell and the

00:49:49,069 --> 00:49:55,279
rest of the entire angular sorry the

00:49:53,049 --> 00:49:56,720
everything that's contained within the

00:49:55,279 --> 00:49:59,839
body tags is driven through angular

00:49:56,720 --> 00:50:01,400
let's say John do you want to speak a

00:49:59,839 --> 00:50:06,710
little bit to ionic think it would work

00:50:01,400 --> 00:50:10,130
yeah I think you know lightning is going

00:50:06,710 --> 00:50:14,960
to be an assembler experience that we

00:50:10,130 --> 00:50:16,880
build out you know we have now which the

00:50:14,960 --> 00:50:19,490
really focuses on you know web flow

00:50:16,880 --> 00:50:22,250
layout preview media allows authors to

00:50:19,490 --> 00:50:24,799
integrate those utilize those

00:50:22,250 --> 00:50:26,059
functionalities as we build it out this

00:50:24,799 --> 00:50:29,269
will be something we seriously think

00:50:26,059 --> 00:50:32,059
about in our roadmap you know if it you

00:50:29,269 --> 00:50:36,130
know if if it's possible to have an

00:50:32,059 --> 00:50:38,569
experience where a site assembler can

00:50:36,130 --> 00:50:41,089
drag-and-drop components into an

00:50:38,569 --> 00:50:43,519
experience and then hit a button and

00:50:41,089 --> 00:50:46,009
compile that that's probably a long way

00:50:43,519 --> 00:50:48,230
off but you know it's it's something

00:50:46,009 --> 00:50:50,269
that would be amazing if we get achieved

00:50:48,230 --> 00:50:52,599
now one potential use case also is that

00:50:50,269 --> 00:50:54,529
if you have you know component based

00:50:52,599 --> 00:50:56,180
rendering let's say and you have a

00:50:54,529 --> 00:50:57,950
node.js micro-service sitting in front

00:50:56,180 --> 00:50:59,269
of your Drupal site right that's one

00:50:57,950 --> 00:51:00,589
case where ionic could really be

00:50:59,269 --> 00:51:02,779
powerful because right now obviously you

00:51:00,589 --> 00:51:05,960
can't compile it's a drill site in PHP

00:51:02,779 --> 00:51:08,599
into using ionic into a native

00:51:05,960 --> 00:51:10,460
application however if you do you know

00:51:08,599 --> 00:51:11,869
layer on top some kind of a node.js

00:51:10,460 --> 00:51:12,980
service which will provide that

00:51:11,869 --> 00:51:15,170
rendering that differentiate rendering

00:51:12,980 --> 00:51:16,490
that you know processes output from

00:51:15,170 --> 00:51:18,680
Drupal for example using the services

00:51:16,490 --> 00:51:19,579
module in Drupal 8 then you know that

00:51:18,680 --> 00:51:29,150
that's something that you could leverage

00:51:19,579 --> 00:51:32,119
as well hey Mark I had a question so you

00:51:29,150 --> 00:51:33,500
mentioned that with the progressively

00:51:32,119 --> 00:51:35,960
decoupled blocks that one of the

00:51:33,500 --> 00:51:38,630
challenges is that they're rendered

00:51:35,960 --> 00:51:40,640
purely on the client side and don't have

00:51:38,630 --> 00:51:42,980
a server-side rendering at the moment

00:51:40,640 --> 00:51:45,740
and that you were looking into the

00:51:42,980 --> 00:51:48,440
possibility of rendering those via no

00:51:45,740 --> 00:51:50,119
js' so how do you see that playing out

00:51:48,440 --> 00:51:54,890
in the hosting landscape

00:51:50,119 --> 00:51:56,930
of how PHP and node would run

00:51:54,890 --> 00:52:00,049
side-by-side is that something octopus

00:51:56,930 --> 00:52:02,089
looking to do or using an outside no one

00:52:00,049 --> 00:52:07,849
service or I don't know thoughts on that

00:52:02,089 --> 00:52:10,549
yes so so so yeah just to expound on

00:52:07,849 --> 00:52:14,569
that yes aqua is currently looking you

00:52:10,549 --> 00:52:16,160
know into a potential of hosting the OJS

00:52:14,569 --> 00:52:18,499
and I think that what you're finding in

00:52:16,160 --> 00:52:20,630
the hosting industry nowadays is a lot

00:52:18,499 --> 00:52:22,730
of you know what I would call sort of

00:52:20,630 --> 00:52:24,829
sort of a widened breadth of hosting

00:52:22,730 --> 00:52:27,980
solutions right where you have people

00:52:24,829 --> 00:52:29,359
who are offering both lamp and no js'

00:52:27,980 --> 00:52:30,650
let's say in the same hosting

00:52:29,359 --> 00:52:32,480
subscription which is a really powerful

00:52:30,650 --> 00:52:35,210
idea because it means that you could

00:52:32,480 --> 00:52:36,740
just pay for it once and have all of

00:52:35,210 --> 00:52:39,499
your hosting taken care of

00:52:36,740 --> 00:52:41,509
now it does introduce some difficulties

00:52:39,499 --> 00:52:43,940
which you which you evoke you and I have

00:52:41,509 --> 00:52:45,349
both talked about in the past obviously

00:52:43,940 --> 00:52:46,940
no js' hosting is something that's a

00:52:45,349 --> 00:52:49,220
little bit less well developed than lamp

00:52:46,940 --> 00:52:51,650
and it is something that you know could

00:52:49,220 --> 00:52:54,170
require potentially multiple hosting

00:52:51,650 --> 00:52:56,029
providers so that is one thing that I

00:52:54,170 --> 00:52:58,819
think is it you know does require a bit

00:52:56,029 --> 00:53:00,049
of caution in this case you know you

00:52:58,819 --> 00:53:02,210
know there are other options obviously

00:53:00,049 --> 00:53:03,470
there's the PHP VHS extension which a

00:53:02,210 --> 00:53:05,569
lot of people have been talking about

00:53:03,470 --> 00:53:06,980
lately but a lot of people nowadays what

00:53:05,569 --> 00:53:09,589
I find the majority of people doing for

00:53:06,980 --> 00:53:12,470
this solution for a solution is to

00:53:09,589 --> 00:53:14,450
actually use a nodejs micro service on

00:53:12,470 --> 00:53:20,869
top that is that is most often hosted

00:53:14,450 --> 00:53:23,450
elsewhere or you know yes thank you it

00:53:20,869 --> 00:53:25,279
was a good session I joined it and I

00:53:23,450 --> 00:53:27,529
have a question so in the first slides

00:53:25,279 --> 00:53:30,680
you mentioned that the JavaScript

00:53:27,529 --> 00:53:33,619
developers they don't like to use Drupal

00:53:30,680 --> 00:53:36,470
API they don't want to know about it so

00:53:33,619 --> 00:53:38,930
how does this module solve this problem

00:53:36,470 --> 00:53:41,809
does it still need to know Drupal API or

00:53:38,930 --> 00:53:43,609
is very like raw for her so you don't

00:53:41,809 --> 00:53:46,009
really need to know any Drupal api's at

00:53:43,609 --> 00:53:49,130
all I mean the components that we saw in

00:53:46,009 --> 00:53:52,489
the demo the only interaction they had

00:53:49,130 --> 00:53:55,099
with Drupal whatsoever was small pieces

00:53:52,489 --> 00:53:57,319
of data coming to Drupal settings which

00:53:55,099 --> 00:53:58,940
are just static pieces of data that they

00:53:57,319 --> 00:54:01,160
had access to right and it's the same

00:53:58,940 --> 00:54:01,420
thing with the pieces that we built

00:54:01,160 --> 00:54:03,670
there

00:54:01,420 --> 00:54:05,500
like configuration forms you can

00:54:03,670 --> 00:54:08,230
actually define those configuration

00:54:05,500 --> 00:54:09,700
fields in your info diamo file so you're

00:54:08,230 --> 00:54:11,920
still just writing gamal you don't have

00:54:09,700 --> 00:54:13,420
to learn the forms API you're just

00:54:11,920 --> 00:54:15,700
saying I want a text field with this

00:54:13,420 --> 00:54:17,140
name and when the block goes to be

00:54:15,700 --> 00:54:19,420
placed on the page that text field

00:54:17,140 --> 00:54:21,099
appears and whatever someone types into

00:54:19,420 --> 00:54:22,960
that text field is sent forward through

00:54:21,099 --> 00:54:25,329
Drupal settings so we've really tried to

00:54:22,960 --> 00:54:26,710
minimize the amount of direct

00:54:25,329 --> 00:54:30,430
interaction that they would have to have

00:54:26,710 --> 00:54:33,730
with any Drupal API is there any

00:54:30,430 --> 00:54:36,339
integration with use module with views

00:54:33,730 --> 00:54:38,470
module yeah oh right now it's all blocks

00:54:36,339 --> 00:54:40,089
based so the only integration with views

00:54:38,470 --> 00:54:42,609
module would be for example if you

00:54:40,089 --> 00:54:44,619
needed a specific data set and you

00:54:42,609 --> 00:54:47,369
created a restful views endpoint that

00:54:44,619 --> 00:54:49,079
you could still access from the client

00:54:47,369 --> 00:54:52,630
all right got it

00:54:49,079 --> 00:54:56,140
and one more question so if there any

00:54:52,630 --> 00:54:59,940
way like for the end user if he has no

00:54:56,140 --> 00:55:02,650
JavaScript enabled to still see the page

00:54:59,940 --> 00:55:04,540
he would still see the entire page as

00:55:02,650 --> 00:55:06,609
rendered by Drupal yes you you would

00:55:04,540 --> 00:55:09,040
just lose the rich user experience

00:55:06,609 --> 00:55:11,200
pieces that were JavaScript components

00:55:09,040 --> 00:55:13,450
right all right and either an option to

00:55:11,200 --> 00:55:15,460
kind of provide a fallback like if the

00:55:13,450 --> 00:55:19,000
JavaScript is not available then display

00:55:15,460 --> 00:55:19,569
just static HTML that's a great question

00:55:19,000 --> 00:55:21,579
yeah

00:55:19,569 --> 00:55:24,010
actually because of the way each

00:55:21,579 --> 00:55:27,040
framework definition allows you to

00:55:24,010 --> 00:55:28,780
extend what's rendered server-side by

00:55:27,040 --> 00:55:31,240
Drupal like in the angular case we just

00:55:28,780 --> 00:55:32,710
have a unique element all that's

00:55:31,240 --> 00:55:35,950
rendered on the Drupal site is an

00:55:32,710 --> 00:55:39,069
element with an instance ID that then

00:55:35,950 --> 00:55:40,900
angular injects its templates into but

00:55:39,069 --> 00:55:42,339
you could render whatever you wanted to

00:55:40,900 --> 00:55:44,160
server-side so you could have fallback

00:55:42,339 --> 00:55:50,069
behavior built in as well

00:55:44,160 --> 00:55:52,950
all right thank you I had a question

00:55:50,069 --> 00:55:55,400
about like JavaScript dependencies and I

00:55:52,950 --> 00:55:59,069
know a lot of these components

00:55:55,400 --> 00:56:01,410
oftentimes will have you know it won't

00:55:59,069 --> 00:56:04,049
just be just standard angular standard

00:56:01,410 --> 00:56:06,210
react a majority the components are

00:56:04,049 --> 00:56:07,920
gonna have these like sub modules that

00:56:06,210 --> 00:56:09,660
are not going to be defined in Drupal

00:56:07,920 --> 00:56:11,670
definitely not there a lot of times

00:56:09,660 --> 00:56:14,970
they're going to be like NPM modules or

00:56:11,670 --> 00:56:16,380
web pack or something and you know I

00:56:14,970 --> 00:56:18,750
would say these JavaScript developers

00:56:16,380 --> 00:56:20,880
have a lot of they're the reason that

00:56:18,750 --> 00:56:22,440
they want to use their own environments

00:56:20,880 --> 00:56:23,849
is because of their package managers in

00:56:22,440 --> 00:56:27,900
the way that the dependencies get

00:56:23,849 --> 00:56:29,640
injected and I'm wondering I saw the mo

00:56:27,900 --> 00:56:33,030
files I've seen a little bit of Drupal 8

00:56:29,640 --> 00:56:34,230
stuff I'm wondering how the the plan on

00:56:33,030 --> 00:56:35,579
so they have a component I write a

00:56:34,230 --> 00:56:37,980
component I don't know anything about

00:56:35,579 --> 00:56:40,950
Drupal and I have these like you know

00:56:37,980 --> 00:56:43,500
sub-angular modules that need to be used

00:56:40,950 --> 00:56:47,760
inside of that component what would be

00:56:43,500 --> 00:56:50,420
the workflow for me to get those those

00:56:47,760 --> 00:56:52,440
other libraries into my particular

00:56:50,420 --> 00:56:54,150
component without having to think too

00:56:52,440 --> 00:56:57,299
much about making turning into a Drupal

00:56:54,150 --> 00:56:58,980
modular no that's a really great

00:56:57,299 --> 00:57:00,569
question and it's actually one of the

00:56:58,980 --> 00:57:02,400
hard problems we're still banging our

00:57:00,569 --> 00:57:05,220
head against because you can easily

00:57:02,400 --> 00:57:07,230
allow a JavaScript developer to run in

00:57:05,220 --> 00:57:09,390
p.m. install and pull whatever

00:57:07,230 --> 00:57:11,520
dependencies down that they need but

00:57:09,390 --> 00:57:12,900
then you get into versioning conflict

00:57:11,520 --> 00:57:14,640
issues potentially where you have

00:57:12,900 --> 00:57:16,049
different components on the same page

00:57:14,640 --> 00:57:18,510
that need different versions of

00:57:16,049 --> 00:57:21,140
different dependencies things like that

00:57:18,510 --> 00:57:23,130
and then we really want to preserve the

00:57:21,140 --> 00:57:24,270
encapsulation of these components so

00:57:23,130 --> 00:57:26,549
that each one lives in its own

00:57:24,270 --> 00:57:28,230
subdirectory but if each of those

00:57:26,549 --> 00:57:30,299
components subdirectories has its own

00:57:28,230 --> 00:57:33,000
node modules folder with different

00:57:30,299 --> 00:57:34,410
things in it how do those cascade up so

00:57:33,000 --> 00:57:36,660
that Drupal is aware of all of them as

00:57:34,410 --> 00:57:39,569
well we haven't solved all those

00:57:36,660 --> 00:57:40,799
problems so if you have ideas I would

00:57:39,569 --> 00:57:42,390
love to hear them but these are the

00:57:40,799 --> 00:57:44,099
kinds of things that we're still trying

00:57:42,390 --> 00:57:47,099
to figure out and then just one last

00:57:44,099 --> 00:57:48,839
thing is that I'm thought as like if you

00:57:47,099 --> 00:57:50,000
were denied a have react and angular

00:57:48,839 --> 00:57:51,440
some I know in Drupal

00:57:50,000 --> 00:57:53,360
a lot of times front-end performance

00:57:51,440 --> 00:57:55,250
just goes down just include whatever

00:57:53,360 --> 00:57:56,720
block on the page without realizing the

00:57:55,250 --> 00:57:57,890
hit I could imagine

00:57:56,720 --> 00:57:59,210
like if you include an angular

00:57:57,890 --> 00:58:01,220
components can include the whole entire

00:57:59,210 --> 00:58:02,870
angular library if you include a react

00:58:01,220 --> 00:58:05,060
component the same page you know you

00:58:02,870 --> 00:58:07,220
would might have that so I guess no we

00:58:05,060 --> 00:58:08,960
all have to be worried about as I

00:58:07,220 --> 00:58:11,060
mentioned so we try to we're trying to

00:58:08,960 --> 00:58:12,650
put some guardrails in place as I

00:58:11,060 --> 00:58:14,420
mentioned in the Drupal 7 weather

00:58:12,650 --> 00:58:16,550
version of this you select a

00:58:14,420 --> 00:58:19,700
presentation on a per panels variant

00:58:16,550 --> 00:58:21,470
basis which is a guard well rail we

00:58:19,700 --> 00:58:23,180
enforced on purpose because we didn't

00:58:21,470 --> 00:58:26,240
want people trying to put angular 1 and

00:58:23,180 --> 00:58:28,730
angular 2 pieces on the same page

00:58:26,240 --> 00:58:30,560
we haven't imposed those guardrails on D

00:58:28,730 --> 00:58:35,900
couple blocks yet but something like

00:58:30,560 --> 00:58:37,100
that needs to happen alrighty thank you

00:58:35,900 --> 00:58:38,480
so much everybody we've run out of time

00:58:37,100 --> 00:58:41,290
but feel free to come up and talk to us

00:58:38,480 --> 00:58:41,290

YouTube URL: https://www.youtube.com/watch?v=McowKqqxaFU


