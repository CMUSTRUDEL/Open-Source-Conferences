Title: DrupalCon New Orleans 2016: Dependency injection in Drupal 8
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	Since the released of D8 with symphony and contrib module, everyone has been trying to contribute as much and as fast as possible. 
However the thought process has not yet moved to Drupal 8 style of coding (best practices not yet employed). The challenge here is the lack of design patterns in Drupal 7; where all modules designs were different.

For many the questions that pops up are: "What is Services and Dependency Injection? How does it help me?"

The way I see the answer to second question is 

It enables us to reuse the functionality and make our services pluggable and replaceable.
To undestand and use best practices such as using service container in a decoupled manner.

In Drupal 8 We have many services and Dependency Injection Containers which give super powers to our Drupal 8 modules.
It's paramount that we understand and use them in Drupal 8 module development.

My session will talk about various scenerios and how can we use different services and Dependency Injection in these scenerios.
The session will include demos, examples and code walk throughs.

Here're the objective of the session:

Overview of Services and Dependency Injection?
Drupal 8 core services and how to use them.
How to use Dependency Injection in a Drupal form?
How to use Dependency Injection in Contrib modules?

What level of knowledge should attendees have before walking into your session:

This session will be easy to understand for people with intermidiate level knowledge of Drupal. However the session should be open for beginners.

Take Away for attendees:

Best practices of building custom and contrib module using services and dependency injection.
How to's for business logic of modules?
Understanding of using DRY methodology.
Keeping module in decoupled manner.
Captions: 
	00:00:00,319 --> 00:00:11,280
welcome to DrupalCon I hope today or D

00:00:05,759 --> 00:00:17,100
was good you having nice day yeah had

00:00:11,280 --> 00:00:20,390
too much lunch okay so the talk is all

00:00:17,100 --> 00:00:23,960
about dependency injection and Drupal 8

00:00:20,390 --> 00:00:23,960
I'm Ashwin Kumar

00:00:24,380 --> 00:00:31,219
so I'm from India I work with region

00:00:28,260 --> 00:00:33,840
technology as a Technical Architect or

00:00:31,219 --> 00:00:36,210
in terms of Drupal I'm with Drupal from

00:00:33,840 --> 00:00:38,610
last five to six years started my

00:00:36,210 --> 00:00:41,480
journey from tuple six triple seven and

00:00:38,610 --> 00:00:44,160
our Drupal 8 in terms of contribution

00:00:41,480 --> 00:00:47,149
I've started my journey in contribution

00:00:44,160 --> 00:00:50,489
by organizing certain small Drupal camps

00:00:47,149 --> 00:00:53,699
triple quotes friends hackathons and

00:00:50,489 --> 00:00:56,360
helping new beginners to getting

00:00:53,699 --> 00:01:00,530
involved in the community now I'm more

00:00:56,360 --> 00:01:04,170
into the initiative back in India for

00:01:00,530 --> 00:01:07,110
starting Drupal into colleges schools

00:01:04,170 --> 00:01:10,200
which we have in their courses are also

00:01:07,110 --> 00:01:14,479
helping new beginners who are coming out

00:01:10,200 --> 00:01:17,790
from the college getting jobs in tuple

00:01:14,479 --> 00:01:20,909
apart from that recent my contribution

00:01:17,790 --> 00:01:23,880
lies in triple console in translating

00:01:20,909 --> 00:01:25,979
Drupal console and some of the commands

00:01:23,880 --> 00:01:28,670
translating Drupal console in Hindi

00:01:25,979 --> 00:01:32,009
specifically so we have translated

00:01:28,670 --> 00:01:34,829
Drupal console in Hindi about ninety

00:01:32,009 --> 00:01:36,420
seven point something percentage as of

00:01:34,829 --> 00:01:39,350
now and I think that's the highest

00:01:36,420 --> 00:01:43,460
translatable language we have as of now

00:01:39,350 --> 00:01:43,460
and yeah

00:01:43,560 --> 00:01:50,160
and we did that before last triple corn

00:01:46,770 --> 00:01:53,610
Mumbai so that was kind of achievement

00:01:50,160 --> 00:02:00,350
for us have you guys tried out Drupal

00:01:53,610 --> 00:02:05,310
console oh do you like it yeah okay and

00:02:00,350 --> 00:02:07,080
yeah I also do a kind of a pilot

00:02:05,310 --> 00:02:11,340
training training I'm taking a training

00:02:07,080 --> 00:02:12,410
of a helicopter so yeah that there's

00:02:11,340 --> 00:02:16,230
what the picture

00:02:12,410 --> 00:02:19,260
so let's the agenda of this session

00:02:16,230 --> 00:02:22,170
first we're gonna discover what's the

00:02:19,260 --> 00:02:23,820
mystery about di so the story of this

00:02:22,170 --> 00:02:26,430
session goes like first we're going to

00:02:23,820 --> 00:02:29,310
understand the conceptually what exactly

00:02:26,430 --> 00:02:31,200
dependency injection mean and why we

00:02:29,310 --> 00:02:36,120
should learn dependency injection first

00:02:31,200 --> 00:02:38,910
place and then we gonna see some di

00:02:36,120 --> 00:02:41,640
concepts in symphony and what is there

00:02:38,910 --> 00:02:44,850
in di interpolate there will be a couple

00:02:41,640 --> 00:02:47,040
of examples and architecture kind of a

00:02:44,850 --> 00:02:49,739
diagrams where we can easily understand

00:02:47,040 --> 00:02:52,230
the concept and how actually we can plug

00:02:49,739 --> 00:02:54,360
di into to palade custom of contributed

00:02:52,230 --> 00:02:56,340
model development so that's what the

00:02:54,360 --> 00:03:00,570
agenda will be all about of the session

00:02:56,340 --> 00:03:02,820
so there's this joke which I heard why

00:03:00,570 --> 00:03:05,010
to give my two cents to ten TA so the

00:03:02,820 --> 00:03:07,380
joke is dependency injection is the

00:03:05,010 --> 00:03:15,930
concept of $25 where you have to put

00:03:07,380 --> 00:03:18,150
your two cents to learn so before going

00:03:15,930 --> 00:03:23,000
with a dependency injection I would like

00:03:18,150 --> 00:03:26,489
to share one of my real experience how I

00:03:23,000 --> 00:03:30,780
come to know and get involved using di

00:03:26,489 --> 00:03:33,750
in my contributed modules porting so a

00:03:30,780 --> 00:03:36,269
year back I worked with one of my

00:03:33,750 --> 00:03:39,030
contributing model protein and I did I

00:03:36,269 --> 00:03:41,160
used the Drupal upgrade module and it

00:03:39,030 --> 00:03:43,170
actually gave me what function is

00:03:41,160 --> 00:03:45,360
deprecated and what things we have to

00:03:43,170 --> 00:03:47,160
change and they are certain rush come on

00:03:45,360 --> 00:03:48,870
which actually change your Drupal 7

00:03:47,160 --> 00:03:52,560
module directory structure with the

00:03:48,870 --> 00:03:54,840
standard of tuple 8 so I did that the

00:03:52,560 --> 00:03:56,879
module was done I shifted a couple of

00:03:54,840 --> 00:03:57,459
business logic code into certain files

00:03:56,879 --> 00:04:00,459
as

00:03:57,459 --> 00:04:03,040
the Drupal 8 module development standard

00:04:00,459 --> 00:04:06,689
and I thought let's get review from my

00:04:03,040 --> 00:04:11,709
mentor so I I checked out my mentor and

00:04:06,689 --> 00:04:14,019
he said what do you have done so I was

00:04:11,709 --> 00:04:15,579
like I I contribute the module and i

00:04:14,019 --> 00:04:18,190
ported successfully the module is

00:04:15,579 --> 00:04:19,810
running you can install it but he said

00:04:18,190 --> 00:04:21,489
what we have done what you have done you

00:04:19,810 --> 00:04:24,639
have just shifted couple of code but

00:04:21,489 --> 00:04:25,810
it's already wrote into pearl 7 and you

00:04:24,639 --> 00:04:28,120
have just followed the directory

00:04:25,810 --> 00:04:30,940
structure but you haven't used any of

00:04:28,120 --> 00:04:34,570
the power of super late and we have seen

00:04:30,940 --> 00:04:36,789
that Drupal 8 is we are hearing many

00:04:34,570 --> 00:04:39,789
things about Drupal 8 like Drupal 8 have

00:04:36,789 --> 00:04:41,860
200 features but the quick question

00:04:39,789 --> 00:04:45,220
which come into my mind can we learn 200

00:04:41,860 --> 00:04:48,099
features quick if a person coming from

00:04:45,220 --> 00:04:50,800
d7 to d8 what will the learning curve or

00:04:48,099 --> 00:04:53,440
if a person coming directly to Drupal 8

00:04:50,800 --> 00:04:56,259
what will the learning curve how the 200

00:04:53,440 --> 00:04:59,710
features can be used in module or site

00:04:56,259 --> 00:05:01,960
development or theming or maybe a

00:04:59,710 --> 00:05:05,229
command-line tool like Drupal console

00:05:01,960 --> 00:05:07,510
how you can use that at that time he

00:05:05,229 --> 00:05:11,800
introduced me to the concept of

00:05:07,510 --> 00:05:14,470
dependency injection which I'm till now

00:05:11,800 --> 00:05:17,400
super happy because it actually helped

00:05:14,470 --> 00:05:21,070
me and made my life easier in terms of

00:05:17,400 --> 00:05:24,310
coding in terms of creating modules or

00:05:21,070 --> 00:05:27,130
porting modules interpolate so well as

00:05:24,310 --> 00:05:29,380
it states that literal meaning is so

00:05:27,130 --> 00:05:33,580
before before just a step back I'm

00:05:29,380 --> 00:05:36,789
assuming that all over the attendees are

00:05:33,580 --> 00:05:40,840
familiar with their oaths concepts right

00:05:36,789 --> 00:05:44,460
okay and how many of you work with

00:05:40,840 --> 00:05:48,039
Drupal or how many of you with symphony

00:05:44,460 --> 00:05:53,500
drupal oh thank you

00:05:48,039 --> 00:05:55,509
symphony ok great so yeah let's go so

00:05:53,500 --> 00:05:58,180
dependency injection what exactly it

00:05:55,509 --> 00:06:00,310
means it's basically a concept where you

00:05:58,180 --> 00:06:02,380
define your dependency in a class

00:06:00,310 --> 00:06:06,310
definition rather than instantiating

00:06:02,380 --> 00:06:09,130
them into class itself so as the such as

00:06:06,310 --> 00:06:11,380
the statement says the littleman is

00:06:09,130 --> 00:06:13,630
injecting dependency into a class

00:06:11,380 --> 00:06:16,240
that what we understand about dependency

00:06:13,630 --> 00:06:19,480
injection as a word but what exactly

00:06:16,240 --> 00:06:22,720
that mean so let's go to a ground zero

00:06:19,480 --> 00:06:26,170
and let's first understand what it means

00:06:22,720 --> 00:06:29,730
by dependency so let's say you have a

00:06:26,170 --> 00:06:33,670
class that uses another object and

00:06:29,730 --> 00:06:35,560
performing some functions and doing

00:06:33,670 --> 00:06:38,080
something with your business logic so we

00:06:35,560 --> 00:06:44,980
can see that your class have dependency

00:06:38,080 --> 00:06:46,810
of certain object so for example if you

00:06:44,980 --> 00:06:49,330
have a modern class that fetches

00:06:46,810 --> 00:06:53,770
something from the database maybe a

00:06:49,330 --> 00:06:56,710
database query and/or performing some

00:06:53,770 --> 00:06:59,140
maybe a select query or an update query

00:06:56,710 --> 00:07:02,140
or SQL query anything so we can see that

00:06:59,140 --> 00:07:06,280
your model class have dependency or

00:07:02,140 --> 00:07:13,720
database object and therefore dependency

00:07:06,280 --> 00:07:17,580
is so now let's understand the meaning

00:07:13,720 --> 00:07:20,350
of what it means injecting dependencies

00:07:17,580 --> 00:07:23,110
injecting dependencies is like pushing

00:07:20,350 --> 00:07:27,040
dependency into your class from out of

00:07:23,110 --> 00:07:29,140
the box what it means that when you are

00:07:27,040 --> 00:07:31,210
declaring your dependencies into your

00:07:29,140 --> 00:07:33,820
class instead of using a new operator

00:07:31,210 --> 00:07:37,330
you can pass your dependency into a

00:07:33,820 --> 00:07:39,520
constructor as a parameter and that's it

00:07:37,330 --> 00:07:42,640
that's all means the dependency

00:07:39,520 --> 00:07:46,510
injection you really do not need any of

00:07:42,640 --> 00:07:49,420
the concept of service container D IC or

00:07:46,510 --> 00:07:51,190
pimple of course they can make our life

00:07:49,420 --> 00:07:58,090
easier but technically you don't need

00:07:51,190 --> 00:08:01,150
that so there are certain forms of

00:07:58,090 --> 00:08:04,750
dependency injection constructor setter

00:08:01,150 --> 00:08:06,810
property these are the mostly are widely

00:08:04,750 --> 00:08:12,400
used in different different frameworks

00:08:06,810 --> 00:08:13,990
based on symfony I guess or PHP suppose

00:08:12,400 --> 00:08:16,390
let's take a look to constructor

00:08:13,990 --> 00:08:19,630
injection what exactly it is so

00:08:16,390 --> 00:08:22,240
constructor injection is mostly usable

00:08:19,630 --> 00:08:22,960
or injection and frameworks in Drupal 8

00:08:22,240 --> 00:08:24,889
as well

00:08:22,960 --> 00:08:33,740
so of

00:08:24,889 --> 00:08:38,959
okay let me so in construction injection

00:08:33,740 --> 00:08:43,779
we pass a dependency into a parameter of

00:08:38,959 --> 00:08:47,390
a constructor of a class and it actually

00:08:43,779 --> 00:08:50,240
the dependency get present till the time

00:08:47,390 --> 00:08:52,399
your constructor or lifetime or

00:08:50,240 --> 00:08:54,709
basically your class lifetime so you

00:08:52,399 --> 00:08:56,420
will always be the dependency will

00:08:54,709 --> 00:09:00,260
always be available throughout your

00:08:56,420 --> 00:09:04,310
class the disadvantage of this injection

00:09:00,260 --> 00:09:07,670
is so let us take an example you have a

00:09:04,310 --> 00:09:11,060
class which have a requirement of

00:09:07,670 --> 00:09:12,980
certain dependency and you have to use

00:09:11,060 --> 00:09:15,019
that with our dependency your class will

00:09:12,980 --> 00:09:20,449
not work at that time constructor

00:09:15,019 --> 00:09:23,180
injection works very well so in this

00:09:20,449 --> 00:09:25,339
example as the newsletter manager it's a

00:09:23,180 --> 00:09:28,220
class and now I have to send a mail

00:09:25,339 --> 00:09:30,470
about my newsletter so my class cannot

00:09:28,220 --> 00:09:32,600
work with the dependency right

00:09:30,470 --> 00:09:34,940
so that's what the constructor injection

00:09:32,600 --> 00:09:39,199
is and you have to just pass it as a

00:09:34,940 --> 00:09:43,100
parameter to your constructor set

00:09:39,199 --> 00:09:45,290
injection set injection is most likely a

00:09:43,100 --> 00:09:48,800
scenario where you have optional

00:09:45,290 --> 00:09:51,050
dependency cases so you might need our

00:09:48,800 --> 00:09:53,149
dependency into your class or you may

00:09:51,050 --> 00:09:55,339
need right so you can actually set your

00:09:53,149 --> 00:09:59,000
dependency by using a setter method and

00:09:55,339 --> 00:10:01,730
pass it into the parameter whatever

00:09:59,000 --> 00:10:04,640
dependency you have and you can actually

00:10:01,730 --> 00:10:07,610
declare all this set a meter is set a

00:10:04,640 --> 00:10:09,500
method or in many times in your class so

00:10:07,610 --> 00:10:12,320
for example you have the first

00:10:09,500 --> 00:10:14,930
dependency mailer so you can declare set

00:10:12,320 --> 00:10:16,940
milah and here's my dependency

00:10:14,930 --> 00:10:19,850
likewise you can specify many settle

00:10:16,940 --> 00:10:23,209
matter into your class the disadvantage

00:10:19,850 --> 00:10:26,540
of this injection is you will not be

00:10:23,209 --> 00:10:29,990
able to or handle where your dependency

00:10:26,540 --> 00:10:31,970
actually lost control into a clause so

00:10:29,990 --> 00:10:33,589
you have let's say a four or five

00:10:31,970 --> 00:10:36,140
dependency you have certain your class

00:10:33,589 --> 00:10:38,329
but let's say if the lines of the code

00:10:36,140 --> 00:10:40,309
are huge by thousand so you

00:10:38,329 --> 00:10:43,959
not be able to figure it out what

00:10:40,309 --> 00:10:43,959
dependency is available right now

00:10:47,559 --> 00:10:51,679
property injection property injection is

00:10:49,939 --> 00:10:55,670
kind of a similar to setter injection

00:10:51,679 --> 00:10:58,369
you can use the set of function and same

00:10:55,670 --> 00:11:02,480
way you can call the dependency into a

00:10:58,369 --> 00:11:06,049
class and using the public key word you

00:11:02,480 --> 00:11:11,569
can actually specify the fields in your

00:11:06,049 --> 00:11:13,670
class the problem with this injection is

00:11:11,569 --> 00:11:15,619
you will not again the same problem

00:11:13,670 --> 00:11:18,379
which we have with this setter you will

00:11:15,619 --> 00:11:24,860
not able to control the dependencies or

00:11:18,379 --> 00:11:26,629
lifetime into your class so quick

00:11:24,860 --> 00:11:29,749
question which actually comes into my

00:11:26,629 --> 00:11:32,929
mind when I'm just going back into the

00:11:29,749 --> 00:11:35,269
scenario which I introduce you when my

00:11:32,929 --> 00:11:37,660
mentor told me that you should use di

00:11:35,269 --> 00:11:40,610
into your code so I was like why di

00:11:37,660 --> 00:11:44,540
because my code works without di as well

00:11:40,610 --> 00:11:46,999
but why I have to forcefully with CI so

00:11:44,540 --> 00:11:48,499
a quick answer was that you really do

00:11:46,999 --> 00:11:51,319
not have to use dependency injection

00:11:48,499 --> 00:11:54,230
every and every time whenever you are

00:11:51,319 --> 00:11:56,660
contributed or in a custom module it

00:11:54,230 --> 00:11:59,779
basically depends if you have lots of

00:11:56,660 --> 00:12:02,569
dependency in your contrib or custom

00:11:59,779 --> 00:12:04,309
module or specifically in your class at

00:12:02,569 --> 00:12:06,649
that time you should use the I but you

00:12:04,309 --> 00:12:08,269
should not always use the I principle of

00:12:06,649 --> 00:12:12,079
whenever you are developing a tuple it

00:12:08,269 --> 00:12:17,329
module but yti what exactly it gives me

00:12:12,079 --> 00:12:22,369
power so let's take a so let's say we

00:12:17,329 --> 00:12:25,839
have a robot which builds a house and it

00:12:22,369 --> 00:12:30,619
started with building some piles of a

00:12:25,839 --> 00:12:35,029
house and when it comes to a doorway we

00:12:30,619 --> 00:12:37,999
had two options either construct a door

00:12:35,029 --> 00:12:39,860
from starting taking a raw materials and

00:12:37,999 --> 00:12:43,040
building the door and then put it in our

00:12:39,860 --> 00:12:46,160
doorway or we can just get it from some

00:12:43,040 --> 00:12:48,559
supplier the ready mentor and we'll just

00:12:46,160 --> 00:12:49,009
fix it in our doorway so what you guys

00:12:48,559 --> 00:12:51,720
think

00:12:49,009 --> 00:12:57,450
what will the efficient way

00:12:51,720 --> 00:12:58,950
or quickly supplying right that's what I

00:12:57,450 --> 00:13:00,090
think actually and that's what the

00:12:58,950 --> 00:13:03,150
concept is all about

00:13:00,090 --> 00:13:05,730
so you actually take or supplying a door

00:13:03,150 --> 00:13:11,700
and put it in your door that's what in

00:13:05,730 --> 00:13:12,270
dependency injection is so what it comes

00:13:11,700 --> 00:13:14,550
to

00:13:12,270 --> 00:13:18,930
it comes to our dependency inversion

00:13:14,550 --> 00:13:21,690
principle via class so specifically in

00:13:18,930 --> 00:13:23,850
PHP it works with interface so we have

00:13:21,690 --> 00:13:25,560
class have lots of dependency

00:13:23,850 --> 00:13:27,810
so you actually inject them with the

00:13:25,560 --> 00:13:29,580
interface and your class actually calls

00:13:27,810 --> 00:13:31,980
the interface to get all the

00:13:29,580 --> 00:13:34,590
dependencies so that you can use lot of

00:13:31,980 --> 00:13:41,910
functions which is available into your

00:13:34,590 --> 00:13:44,190
dependency class so let's take another

00:13:41,910 --> 00:13:46,860
example by understanding into a code

00:13:44,190 --> 00:13:49,560
point of view what exactly we will get

00:13:46,860 --> 00:13:51,990
if we use dependency injection and if we

00:13:49,560 --> 00:13:54,390
do not use it so first let's take an

00:13:51,990 --> 00:13:56,760
example without dependency injection so

00:13:54,390 --> 00:14:00,660
let's say we have our two class Google

00:13:56,760 --> 00:14:04,710
Maps and OpenStreetMap and in a class we

00:14:00,660 --> 00:14:08,220
actually want to use the these classes

00:14:04,710 --> 00:14:10,980
functions or let's say we create we're

00:14:08,220 --> 00:14:14,480
creating a store service and we have to

00:14:10,980 --> 00:14:18,750
get the address by using a Google map or

00:14:14,480 --> 00:14:20,250
class or service so traditionally this

00:14:18,750 --> 00:14:22,440
is how we're gonna write we're gonna use

00:14:20,250 --> 00:14:25,950
the new operator called the Google class

00:14:22,440 --> 00:14:28,080
and then we're gonna use the variable

00:14:25,950 --> 00:14:29,490
and get coordinates from address and

00:14:28,080 --> 00:14:31,680
we're going to pass something our store

00:14:29,490 --> 00:14:34,110
help us through it and maybe we get a

00:14:31,680 --> 00:14:39,560
geo coordinate or anything we would like

00:14:34,110 --> 00:14:39,560
to get but with dependency injection

00:14:40,220 --> 00:14:48,620
what do you guys think what's changed so

00:14:44,820 --> 00:14:51,870
here we are actually passing our

00:14:48,620 --> 00:14:54,870
dependency into a constructor parameter

00:14:51,870 --> 00:14:57,210
you see geolocation service and we are

00:14:54,870 --> 00:15:00,300
just passing that into a constructor and

00:14:57,210 --> 00:15:02,460
anywhere in class I will just call that

00:15:00,300 --> 00:15:05,190
interface or dependency function

00:15:02,460 --> 00:15:08,160
anywhere in my class I can use the

00:15:05,190 --> 00:15:10,410
but what is geolocation service so we

00:15:08,160 --> 00:15:13,260
create an interface and we have function

00:15:10,410 --> 00:15:16,230
inside that and both the class Google

00:15:13,260 --> 00:15:20,040
Maps and OpenStreetMap implements the

00:15:16,230 --> 00:15:24,390
geolocation service interface so our

00:15:20,040 --> 00:15:26,900
code is cleaner our code is decoupled so

00:15:24,390 --> 00:15:32,040
a class is decoupled from the dependency

00:15:26,900 --> 00:15:34,530
so in this case if I want to change my

00:15:32,040 --> 00:15:38,940
dependency or function I want to rewrite

00:15:34,530 --> 00:15:40,560
this code but over here I do not have to

00:15:38,940 --> 00:15:48,000
do anything I'll just change the

00:15:40,560 --> 00:15:50,400
dependency what I am passing so what we

00:15:48,000 --> 00:15:54,360
also get from this that our code is much

00:15:50,400 --> 00:15:56,730
more cleaner and modular reusable yes

00:15:54,360 --> 00:16:01,980
the less your function knows the more

00:15:56,730 --> 00:16:04,230
usable it is so that's what the outcome

00:16:01,980 --> 00:16:07,610
which we get from TI and it's flexible

00:16:04,230 --> 00:16:09,750
yes your class is decoupled from your

00:16:07,610 --> 00:16:12,180
dependency and you can anytime change

00:16:09,750 --> 00:16:16,590
the dependency where you have mapped

00:16:12,180 --> 00:16:23,700
with that it's easy to test and the F

00:16:16,590 --> 00:16:26,540
section is decoupled so while working

00:16:23,700 --> 00:16:29,820
with di you often face these jargons

00:16:26,540 --> 00:16:32,250
dependency injector di see inversion of

00:16:29,820 --> 00:16:37,070
control service container basically

00:16:32,250 --> 00:16:39,360
these are all same it just the certain

00:16:37,070 --> 00:16:42,990
names which we use in different

00:16:39,360 --> 00:16:45,360
different frameworks more specifically

00:16:42,990 --> 00:16:48,870
in Drupal 8 you will face the service

00:16:45,360 --> 00:16:52,770
container that what it is and how we can

00:16:48,870 --> 00:16:54,150
use service container in DI so we're

00:16:52,770 --> 00:16:59,160
going to talk about that in a moment

00:16:54,150 --> 00:17:02,010
Oh so service container basically deals

00:16:59,160 --> 00:17:05,760
by deals with the mapping of your

00:17:02,010 --> 00:17:08,069
dependency at one place and you can call

00:17:05,760 --> 00:17:11,220
that service container into your class

00:17:08,069 --> 00:17:14,370
so next time if I want to change any

00:17:11,220 --> 00:17:16,740
dependency of my class or let's say if I

00:17:14,370 --> 00:17:19,079
have a three dependency and next time I

00:17:16,740 --> 00:17:21,600
don't want to use a to dependency or

00:17:19,079 --> 00:17:24,630
to add any other dependencies so I just

00:17:21,600 --> 00:17:26,549
added in my service container oh hey I

00:17:24,630 --> 00:17:29,159
don't want you to think about just

00:17:26,549 --> 00:17:32,190
forget about the services module or web

00:17:29,159 --> 00:17:36,330
services it's not that so it's just a

00:17:32,190 --> 00:17:38,580
mapping of your dependency which your

00:17:36,330 --> 00:17:44,510
module based on we're gonna see where

00:17:38,580 --> 00:17:47,820
and how it actually happened in Jubilate

00:17:44,510 --> 00:17:49,500
before that let's first take a look to

00:17:47,820 --> 00:17:52,350
Symphony's dependency injection

00:17:49,500 --> 00:17:56,190
component so there are a lot of concepts

00:17:52,350 --> 00:17:59,760
in symphony di there are event

00:17:56,190 --> 00:18:02,429
dispatcher the compilers which actually

00:17:59,760 --> 00:18:05,610
works behind that when you are using di

00:18:02,429 --> 00:18:07,440
but I'm not gonna take you in that deep

00:18:05,610 --> 00:18:09,960
instead I'm going to show you the

00:18:07,440 --> 00:18:12,559
overall concept and how we can actually

00:18:09,960 --> 00:18:16,529
use it when we will contribute to Drupal

00:18:12,559 --> 00:18:21,870
so in symphony GI by calling any service

00:18:16,529 --> 00:18:23,880
they use this string stuff and you can

00:18:21,870 --> 00:18:28,019
actually just call your dependency of

00:18:23,880 --> 00:18:32,580
the code and let's say some service ii

00:18:28,019 --> 00:18:34,710
the same thing which i mentioned that it

00:18:32,580 --> 00:18:37,440
actually allows you to inject your

00:18:34,710 --> 00:18:41,990
dependency into class definition instead

00:18:37,440 --> 00:18:41,990
of declaring them into the class itself

00:18:44,539 --> 00:18:52,169
the default scope is container and it

00:18:48,389 --> 00:18:55,590
can be configured in PHP or XML or yml

00:18:52,169 --> 00:18:57,419
and it can be compiled down to PHP as

00:18:55,590 --> 00:19:00,529
well so you can actually write all the

00:18:57,419 --> 00:19:03,990
service rendered stuff in PHP as well

00:19:00,529 --> 00:19:06,899
and yes you can actually define your

00:19:03,990 --> 00:19:10,049
service container of the mapping into

00:19:06,899 --> 00:19:12,389
yml or XML or PHP so in Drupal 8 most of

00:19:10,049 --> 00:19:14,820
the stuff the yml has been introduced so

00:19:12,389 --> 00:19:21,510
all the service container the mapping

00:19:14,820 --> 00:19:24,240
has been lies with the Vienna so now

00:19:21,510 --> 00:19:27,860
let's take a look to dependency

00:19:24,240 --> 00:19:27,860
injection and Drupal 8

00:19:38,789 --> 00:19:49,179
so while working with Drupal 8 services

00:19:42,549 --> 00:19:52,120
you probably be using these services the

00:19:49,179 --> 00:19:55,390
database and module Handler and requests

00:19:52,120 --> 00:19:59,110
so when I'm saying services you can also

00:19:55,390 --> 00:20:02,380
compare the hooks which we used to have

00:19:59,110 --> 00:20:04,600
in duple 8 and the core services which

00:20:02,380 --> 00:20:06,580
is introduced in sorry

00:20:04,600 --> 00:20:09,280
the hooks which we use to have in Drupal

00:20:06,580 --> 00:20:12,340
7 and the services which we have in

00:20:09,280 --> 00:20:16,299
tuple 8 so hooks are deprecated in

00:20:12,340 --> 00:20:20,409
Drupal 8 right and now we use services

00:20:16,299 --> 00:20:29,200
to actually alter them or reuse them

00:20:20,409 --> 00:20:32,980
what we have in core so two ways we can

00:20:29,200 --> 00:20:35,289
actually use core services this one is

00:20:32,980 --> 00:20:37,270
the procedure code way you can actually

00:20:35,289 --> 00:20:41,650
define troopers and service and just

00:20:37,270 --> 00:20:44,500
pass out some service which we need all

00:20:41,650 --> 00:20:48,010
right our object-oriented code which we

00:20:44,500 --> 00:20:50,919
have just seen by using the DI principle

00:20:48,010 --> 00:20:58,750
or injecting them by the service

00:20:50,919 --> 00:21:00,940
container but interpolate we really do

00:20:58,750 --> 00:21:05,770
not come to nowhere and exactly it

00:21:00,940 --> 00:21:07,539
happens in core so there's our Drupal

00:21:05,770 --> 00:21:10,200
core no file which actually deals with

00:21:07,539 --> 00:21:12,880
the auto loading and auto rewriting of

00:21:10,200 --> 00:21:15,039
services so when you define your

00:21:12,880 --> 00:21:16,870
services in a service container so it

00:21:15,039 --> 00:21:19,960
makes sure that these things actually

00:21:16,870 --> 00:21:22,539
available to the class where you have

00:21:19,960 --> 00:21:26,169
called your where you have injecting

00:21:22,539 --> 00:21:28,240
your dependency and all the core

00:21:26,169 --> 00:21:32,860
services are defined in code dot

00:21:28,240 --> 00:21:35,169
Services dot yml you can see the yml

00:21:32,860 --> 00:21:37,000
structure which they have been used and

00:21:35,169 --> 00:21:42,429
same structure we have to use in a

00:21:37,000 --> 00:21:46,470
module if you are if you have any

00:21:42,429 --> 00:21:50,610
compiler passes which needs to be

00:21:46,470 --> 00:21:53,490
use NDI then those are actually dealt

00:21:50,610 --> 00:21:57,510
with by cold bundle dot php' which lies

00:21:53,490 --> 00:21:59,640
in coal slash lives to bulk or and

00:21:57,510 --> 00:22:02,299
there's the dependency injection

00:21:59,640 --> 00:22:06,990
component which is a symphony component

00:22:02,299 --> 00:22:09,900
in Drupal 8 so all the things related to

00:22:06,990 --> 00:22:14,120
the dependency injection lies and Drupal

00:22:09,900 --> 00:22:14,120
core dependency injection slash compiler

00:22:16,580 --> 00:22:25,740
so yeah so this situation we get it how

00:22:21,419 --> 00:22:27,799
do I use it in my module so I'm creating

00:22:25,740 --> 00:22:30,809
my custom module or I am porting my

00:22:27,799 --> 00:22:33,570
contributed module actually many of the

00:22:30,809 --> 00:22:35,400
contributory will not see the concept of

00:22:33,570 --> 00:22:37,830
di has been used actually in search

00:22:35,400 --> 00:22:41,130
module will be to have I've seen that

00:22:37,830 --> 00:22:44,220
now people are actually plugging all

00:22:41,130 --> 00:22:46,320
these features of Drupal 8 into their

00:22:44,220 --> 00:22:48,360
contributed modules but it was not there

00:22:46,320 --> 00:22:53,460
when the content module porting

00:22:48,360 --> 00:22:56,429
initially start started so let's say we

00:22:53,460 --> 00:23:00,020
are building our own module my module I

00:22:56,429 --> 00:23:03,900
would say and we have to define our

00:23:00,020 --> 00:23:06,179
module dot service environment and we

00:23:03,900 --> 00:23:08,610
will define all these service into this

00:23:06,179 --> 00:23:13,080
file and we're going to see how we can

00:23:08,610 --> 00:23:15,510
define that the next thing if we're my

00:23:13,080 --> 00:23:18,630
class lies will be it will be in module

00:23:15,510 --> 00:23:22,830
/lib slash drupal slash my module slash

00:23:18,630 --> 00:23:25,980
my module bundle dot PHP and that's

00:23:22,830 --> 00:23:28,169
where all the classes will lies and it

00:23:25,980 --> 00:23:31,100
will all the injection will happen in my

00:23:28,169 --> 00:23:31,100
class from there

00:23:34,020 --> 00:23:42,070
so now let's take a look to the star dot

00:23:38,920 --> 00:23:42,940
substitute vironment what we have in

00:23:42,070 --> 00:23:45,730
this file

00:23:42,940 --> 00:23:48,010
what magic do we have because whatever

00:23:45,730 --> 00:23:50,980
we defined here any dependency it will

00:23:48,010 --> 00:23:58,530
get auto loaded and will available to

00:23:50,980 --> 00:23:58,530
our module so to tutor let me just

00:24:06,100 --> 00:24:11,580
I don't know in Kirshner

00:24:44,960 --> 00:24:52,610
anywhere can you help me out no okay

00:24:58,580 --> 00:25:13,970
the presentation is suck okay we're not

00:25:10,500 --> 00:25:13,970
gonna go back we're not gonna go ahead

00:25:17,840 --> 00:25:20,840
sorry

00:25:26,720 --> 00:25:49,130
finally yeah so there's this file are

00:25:39,840 --> 00:25:49,130
you able to see no at the back no yeah

00:25:56,200 --> 00:26:07,830
how do I increase these dreams kitty

00:26:01,299 --> 00:26:19,480
likes command+ thanks thanks

00:26:07,830 --> 00:26:23,830
now great so there's this file that you

00:26:19,480 --> 00:26:27,639
can find out in core code or services or

00:26:23,830 --> 00:26:29,409
Emma so you will find a lot of things in

00:26:27,639 --> 00:26:30,999
this file which you will not able to

00:26:29,409 --> 00:26:34,720
understand if you are not familiar with

00:26:30,999 --> 00:26:45,989
it so I'm going to actually take you to

00:26:34,720 --> 00:26:45,989
service definition example yeah

00:26:50,130 --> 00:26:55,470
so this is how we actually define our

00:26:52,770 --> 00:26:59,850
services and our services or primals so

00:26:55,470 --> 00:27:02,520
we part is a module and we define what

00:26:59,850 --> 00:27:06,390
services we need what class that

00:27:02,520 --> 00:27:09,120
services should get so in that case over

00:27:06,390 --> 00:27:12,390
here ally allies whitelist

00:27:09,120 --> 00:27:15,530
and tag is more like if my dependent

00:27:12,390 --> 00:27:20,730
class is also have certain dependency

00:27:15,530 --> 00:27:23,640
and argument you can pass as many as

00:27:20,730 --> 00:27:26,880
dependency you want in your definition

00:27:23,640 --> 00:27:29,789
so in this case we have path areas white

00:27:26,880 --> 00:27:33,270
layers cached afford log state and all

00:27:29,789 --> 00:27:35,970
those things so this is how you gonna

00:27:33,270 --> 00:27:40,740
define of when you create your module

00:27:35,970 --> 00:27:43,200
dot services sort for Emma and you have

00:27:40,740 --> 00:27:44,850
a lot of examples just same stuff you

00:27:43,200 --> 00:27:50,600
have to just maybe a copy-paste from

00:27:44,850 --> 00:27:50,600
here or change whatever service you born

00:27:56,330 --> 00:28:05,580
ok now let's take a example if you are

00:28:02,070 --> 00:28:07,380
creating a form in Drupal 8 how are we

00:28:05,580 --> 00:28:15,260
going to actually use dependency

00:28:07,380 --> 00:28:20,360
injection and form a sample code first

00:28:15,260 --> 00:28:23,610
are able to see it back thank you

00:28:20,360 --> 00:28:25,799
so we have an example form so this is a

00:28:23,610 --> 00:28:27,679
piece of code which I actually took it

00:28:25,799 --> 00:28:31,559
from triple-dog

00:28:27,679 --> 00:28:34,409
website which actually states that how

00:28:31,559 --> 00:28:36,840
you can use dependency injection in when

00:28:34,409 --> 00:28:39,210
you are building your custom form so

00:28:36,840 --> 00:28:41,210
first we define all the namespaces all

00:28:39,210 --> 00:28:42,870
the interfaces which we're going to use

00:28:41,210 --> 00:28:45,390
into a class

00:28:42,870 --> 00:28:47,929
so in that case form base form state

00:28:45,390 --> 00:28:50,700
interface are all required interfaces

00:28:47,929 --> 00:28:53,700
these account interface and the

00:28:50,700 --> 00:28:57,450
dependency injector container interface

00:28:53,700 --> 00:29:00,150
we have to define and now we're going to

00:28:57,450 --> 00:29:02,840
exchange the form base class in

00:29:00,150 --> 00:29:04,820
constructor we have passed the

00:29:02,840 --> 00:29:07,550
interface but where does actually

00:29:04,820 --> 00:29:12,430
dependency injection is happening it's

00:29:07,550 --> 00:29:16,670
here so we are calling our current user

00:29:12,430 --> 00:29:19,670
service into our form and we're going to

00:29:16,670 --> 00:29:22,370
use as we would like we're going to

00:29:19,670 --> 00:29:25,550
maybe I take our current user profile or

00:29:22,370 --> 00:29:28,700
UID or name anything we can get from

00:29:25,550 --> 00:29:31,490
here and that's it that's how you're

00:29:28,700 --> 00:29:33,920
going to use it you have to just use the

00:29:31,490 --> 00:29:37,030
function and you have to just pass your

00:29:33,920 --> 00:29:37,030
services as a string

00:29:45,410 --> 00:29:51,299
the challenge with the Drupal 8 is there

00:29:48,960 --> 00:29:54,600
are lot of things in it and how do I

00:29:51,299 --> 00:29:57,720
find which service I would need in my

00:29:54,600 --> 00:30:01,260
custom or contributed module how do I

00:29:57,720 --> 00:30:04,020
actually find where it actually lies and

00:30:01,260 --> 00:30:07,320
what all services has been included into

00:30:04,020 --> 00:30:11,100
politte so there's this website API

00:30:07,320 --> 00:30:14,480
double-dot Watchi I actually forgot who

00:30:11,100 --> 00:30:17,460
built that but it was a great initiative

00:30:14,480 --> 00:30:19,590
that was taken when triple 8 by

00:30:17,460 --> 00:30:21,809
initially introduced you can actually

00:30:19,590 --> 00:30:25,020
find anything over here

00:30:21,809 --> 00:30:28,530
what API is and what functions of file

00:30:25,020 --> 00:30:31,080
are they it actually lies a class with

00:30:28,530 --> 00:30:34,230
tag you can find out everything it just

00:30:31,080 --> 00:30:37,200
like a forum or any API be used to have

00:30:34,230 --> 00:30:39,750
in tuple 7 so there's certain form API

00:30:37,200 --> 00:30:41,700
you will have a certain URL and you see

00:30:39,750 --> 00:30:43,620
all the functions which is there in form

00:30:41,700 --> 00:30:46,980
API just like that you can actually

00:30:43,620 --> 00:30:51,020
search by name or can't let me just try

00:30:46,980 --> 00:30:51,020
to open this

00:31:13,500 --> 00:31:33,120
are you all using my face trying to use

00:31:21,509 --> 00:31:46,139
only one device please come on okay okay

00:31:33,120 --> 00:31:48,960
let's go yeah you got such services and

00:31:46,139 --> 00:31:50,299
you're gonna find out classics what was

00:31:48,960 --> 00:31:53,690
that

00:31:50,299 --> 00:31:53,690
virtual service

00:32:09,730 --> 00:32:15,630
yes transferring data

00:32:50,419 --> 00:32:55,809
huh Dibble gone by fair

00:33:04,490 --> 00:33:10,550
so this is the place where you can

00:33:08,300 --> 00:33:13,850
actually search for services which you

00:33:10,550 --> 00:33:18,410
can use in your module or which is

00:33:13,850 --> 00:33:22,300
actually there in tuple code maybe let's

00:33:18,410 --> 00:33:22,300
say the search for module

00:33:32,200 --> 00:33:34,830
but

00:34:12,840 --> 00:34:17,210
it just look because of the Viper I'm

00:34:14,970 --> 00:34:17,210
sure

00:34:31,710 --> 00:34:47,920
yeah okay so yeah so there's a code

00:34:45,490 --> 00:34:51,190
which I actually believe and I always

00:34:47,920 --> 00:34:54,340
use this thing whenever I learning any

00:34:51,190 --> 00:34:56,140
new technology or any new part of thing

00:34:54,340 --> 00:34:59,290
you have to start somewhere right

00:34:56,140 --> 00:35:01,540
even if you're a symphony guy and now

00:34:59,290 --> 00:35:05,320
thinking of tuple 8 you have to start

00:35:01,540 --> 00:35:07,540
somewhere right so start small and yeah

00:35:05,320 --> 00:35:10,570
then work your way up I don't know who

00:35:07,540 --> 00:35:16,720
is the person who quoted this but I have

00:35:10,570 --> 00:35:19,950
read somewhere long back yeah

00:35:16,720 --> 00:35:19,950
questions yes

00:35:40,100 --> 00:35:46,290
you can actually use di in plugins as

00:35:43,560 --> 00:35:49,230
well because plugins also you you write

00:35:46,290 --> 00:35:51,120
your class in plugins right so if you

00:35:49,230 --> 00:36:07,820
are writing a class you can actually use

00:35:51,120 --> 00:36:07,820
interface in that I share with this okay

00:36:18,990 --> 00:36:25,450
I'm not sure whether the plug-in class

00:36:22,620 --> 00:36:28,330
okay let me just think about it I think

00:36:25,450 --> 00:36:31,390
it can also implement the factory class

00:36:28,330 --> 00:36:33,580
which is not a DI way but factory class

00:36:31,390 --> 00:36:42,220
is also a service which is provided by

00:36:33,580 --> 00:36:46,830
Drupal 8 and yeah that it is yeah yeah

00:36:42,220 --> 00:36:46,830
the plugin yes that there's a way to do

00:36:48,090 --> 00:37:03,760
what do you mean by refractions no okay

00:36:55,830 --> 00:37:05,650
but does that answer your question maybe

00:37:03,760 --> 00:37:08,760
you can also try to use factory classes

00:37:05,650 --> 00:37:08,760
in plugin yeah

00:37:09,150 --> 00:37:12,660
any other question

00:37:26,650 --> 00:37:39,020
this one so uh probably will not find

00:37:35,750 --> 00:37:40,970
exact what I have mentioned here but the

00:37:39,020 --> 00:37:43,640
objective of showing that you can pass

00:37:40,970 --> 00:37:45,020
the the geolocation service as an

00:37:43,640 --> 00:38:09,050
interface and you can plug your

00:37:45,020 --> 00:38:13,750
independents the for example it's

00:38:09,050 --> 00:38:17,890
actually calling from here yeah

00:38:13,750 --> 00:38:29,900
there's very define and you just plug it

00:38:17,890 --> 00:38:32,720
as a parameter yes yes yes yeah so get

00:38:29,900 --> 00:38:34,819
is just a function which by using you

00:38:32,720 --> 00:38:37,960
can actually call the service of which

00:38:34,819 --> 00:38:37,960
you are defined in your interface

00:38:45,890 --> 00:39:03,270
any other question okay thank you thanks

00:39:00,359 --> 00:39:06,930
for listening and yes please do evaluate

00:39:03,270 --> 00:39:09,030
this session in New Orleans website the

00:39:06,930 --> 00:39:10,650
event sort or maybe just a link where

00:39:09,030 --> 00:39:14,670
you can actually download the

00:39:10,650 --> 00:39:17,849
presentation of Ti and I do have certain

00:39:14,670 --> 00:39:22,109
stickers and Bosch with me so if you

00:39:17,849 --> 00:39:22,319
need you can collect it from it thank

00:39:22,109 --> 00:39:25,160
you

00:39:22,319 --> 00:39:25,160

YouTube URL: https://www.youtube.com/watch?v=0SdBVmxuCZg


