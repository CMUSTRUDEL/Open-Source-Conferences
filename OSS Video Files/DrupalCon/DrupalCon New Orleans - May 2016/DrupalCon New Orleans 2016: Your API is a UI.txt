Title: DrupalCon New Orleans 2016: Your API is a UI
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	Whether you're creating a complex web application or a simple library, everything you create has a user. Why, then, do we concentrate on our users when developing a user interface, but so often forget them when developing APIs? In this talk, Christopher presents a whirlwind overview of a variety of different User Experience considerations when designing your APIs.

Why should attendees see this talk?

As developers, we're always creating APIs - whether they are libraries, a common set of functions or web services. This talk presents a relatively novel way of looking at an API - by applying UX considerations to our technical designs, and thinking of the end users, we can create better APIs that noone swears at...

This talk has been seen in 2015 at PHPUK, EndpointCon and Northeast PHP 2015, where it received 4- and 5-star ratings on Joind.in.
Captions: 
	00:00:00,000 --> 00:00:05,430
cool good afternoon everyone I hope

00:00:02,790 --> 00:00:07,859
you're at least a little bit awake after

00:00:05,430 --> 00:00:09,120
all the food that you've just eaten it's

00:00:07,859 --> 00:00:11,370
always a little tough in the lunchtime

00:00:09,120 --> 00:00:15,660
spot to keep you guys awake but we'll

00:00:11,370 --> 00:00:18,210
see how we get on just wait for a couple

00:00:15,660 --> 00:00:23,180
more people to come in it's always empty

00:00:18,210 --> 00:00:23,180
at the front I don't smell that much ah

00:00:24,500 --> 00:00:36,450
ha d cool well we'll get started anyway

00:00:31,560 --> 00:00:38,790
um so I'm Christopher hope this is your

00:00:36,450 --> 00:00:43,140
API zui part of the PHP track here at

00:00:38,790 --> 00:00:47,370
drupalcon this is my first time here in

00:00:43,140 --> 00:00:50,059
fact my use of Drupal is not very

00:00:47,370 --> 00:00:54,149
experienced so so if I do any slip-ups

00:00:50,059 --> 00:00:57,180
feel free to heckle feel 32 to throw me

00:00:54,149 --> 00:01:01,590
your swag anything you like just to keep

00:00:57,180 --> 00:01:07,470
us all awake if my clicker does want to

00:01:01,590 --> 00:01:09,409
work it doesn't who is this guy so I'm

00:01:07,470 --> 00:01:12,869
an engineering team lead at DataSift

00:01:09,409 --> 00:01:15,119
where we used to traffic everything on

00:01:12,869 --> 00:01:18,000
Twitter for our customers resell it on

00:01:15,119 --> 00:01:19,470
Twitter's behalf all in real time now

00:01:18,000 --> 00:01:21,090
we're in your face book reading all your

00:01:19,470 --> 00:01:24,119
posts and comments and likes and

00:01:21,090 --> 00:01:26,549
providing aggregated analytics on that I

00:01:24,119 --> 00:01:28,229
look after the public web application

00:01:26,549 --> 00:01:30,420
and the public API so I'm responsible

00:01:28,229 --> 00:01:32,250
for the design and delivery of all these

00:01:30,420 --> 00:01:34,680
things so I'm very much speaking from

00:01:32,250 --> 00:01:37,079
experience here prior to that I was a

00:01:34,680 --> 00:01:38,310
senior engineer at Time Out magazine if

00:01:37,079 --> 00:01:40,829
you've been to London you might have got

00:01:38,310 --> 00:01:42,810
it for free New York they're all over

00:01:40,829 --> 00:01:44,750
the world and I was very much involved

00:01:42,810 --> 00:01:47,070
in a web service oriented architecture

00:01:44,750 --> 00:01:48,720
rebuild of the whole platform that

00:01:47,070 --> 00:01:51,899
allowed us to do multi-city multi

00:01:48,720 --> 00:01:54,750
translation capabilities I'm also the

00:01:51,899 --> 00:01:56,880
founder and co-organizer PHP Berkshire a

00:01:54,750 --> 00:01:58,649
local user group in reading we've been

00:01:56,880 --> 00:02:01,020
going a year now so if any of you ever

00:01:58,649 --> 00:02:03,600
come to the UK come along to reading

00:02:01,020 --> 00:02:08,190
it's famous for being the hope the the

00:02:03,600 --> 00:02:09,940
hometown of Ricky Gervais yeah and

00:02:08,190 --> 00:02:12,940
that's about it

00:02:09,940 --> 00:02:14,920
and me of course so so please do come

00:02:12,940 --> 00:02:21,970
along look us up come along speak who

00:02:14,920 --> 00:02:25,750
knows I also act I also shave uh-huh

00:02:21,970 --> 00:02:28,900
there's actually a short beard for me so

00:02:25,750 --> 00:02:30,640
first off like i just said i am not that

00:02:28,900 --> 00:02:32,110
experienced with drupal so i'm going to

00:02:30,640 --> 00:02:33,790
throw in a couple of examples that I've

00:02:32,110 --> 00:02:37,000
managed to find but in a general sense

00:02:33,790 --> 00:02:39,640
i'll be talking about api's api is both

00:02:37,000 --> 00:02:41,890
web services and the actual code that

00:02:39,640 --> 00:02:44,620
that we're writing i'm not going to give

00:02:41,890 --> 00:02:47,380
you any opinions as to what the best api

00:02:44,620 --> 00:02:48,520
out there is i'm not going to jump off

00:02:47,380 --> 00:02:50,440
the fence there but i'm going to give

00:02:48,520 --> 00:02:52,870
you a few opinionated examples of what i

00:02:50,440 --> 00:02:54,370
consider to be best practice and little

00:02:52,870 --> 00:02:56,440
things that can help you get along with

00:02:54,370 --> 00:02:59,350
your users and the consumers of the

00:02:56,440 --> 00:03:01,300
software that you write as a quick hands

00:02:59,350 --> 00:03:02,890
up can you protect can you put your

00:03:01,300 --> 00:03:09,550
hands up if you don't enjoy audience

00:03:02,890 --> 00:03:13,950
participation sweet the joke works how

00:03:09,550 --> 00:03:16,239
many of you do ap eyes right ap eyes ah

00:03:13,950 --> 00:03:20,650
that's quite a few of you how many of

00:03:16,239 --> 00:03:26,950
you write web services and how many of

00:03:20,650 --> 00:03:28,989
you write libraries and modules thought

00:03:26,950 --> 00:03:31,209
so all of these are examples of AP is

00:03:28,989 --> 00:03:35,680
there are ways in which that computers

00:03:31,209 --> 00:03:37,600
can interact with computers but one

00:03:35,680 --> 00:03:40,810
thing's kind of missing when we design

00:03:37,600 --> 00:03:42,400
our software we often think well what's

00:03:40,810 --> 00:03:43,750
the easiest way that we can expose this

00:03:42,400 --> 00:03:45,690
to our customers so that people are

00:03:43,750 --> 00:03:48,010
going to use our software but ultimately

00:03:45,690 --> 00:03:50,080
we're not necessarily thinking of the

00:03:48,010 --> 00:03:52,180
end-users we're not necessarily thinking

00:03:50,080 --> 00:03:53,800
of the guy who's going to be screaming

00:03:52,180 --> 00:03:55,900
you in the middle of the night when he

00:03:53,800 --> 00:04:01,450
hasn't figured out after five hours how

00:03:55,900 --> 00:04:04,360
to make your software work so an API an

00:04:01,450 --> 00:04:06,459
application programmers interface is an

00:04:04,360 --> 00:04:09,489
interface it's a way in which computers

00:04:06,459 --> 00:04:12,459
talk to each other interfaces in general

00:04:09,489 --> 00:04:14,680
are ways in which two systems or a user

00:04:12,459 --> 00:04:17,830
in a user or user and computer and so on

00:04:14,680 --> 00:04:20,500
can talk to each other and us as humans

00:04:17,830 --> 00:04:22,690
we are built to figure stuff out we're

00:04:20,500 --> 00:04:23,240
built to learn so the interfaces that

00:04:22,690 --> 00:04:25,160
are

00:04:23,240 --> 00:04:26,960
in front of us can be very confusing to

00:04:25,160 --> 00:04:28,340
begin with but eventually we can work

00:04:26,960 --> 00:04:31,750
stuff out we can click around we can

00:04:28,340 --> 00:04:35,389
figure out what's going on computers are

00:04:31,750 --> 00:04:37,190
finicky users they don't really know

00:04:35,389 --> 00:04:39,680
what they're doing they understand

00:04:37,190 --> 00:04:41,569
numbers they understand what you told

00:04:39,680 --> 00:04:45,590
them to do but if you present them with

00:04:41,569 --> 00:04:47,599
something novel it takes it well apart

00:04:45,590 --> 00:04:49,759
from maybe Google with their there

00:04:47,599 --> 00:04:52,849
excellente I stuff it takes them a long

00:04:49,759 --> 00:04:55,789
time to figure out what's going on so as

00:04:52,849 --> 00:04:59,060
humans we have to tell the computers how

00:04:55,789 --> 00:05:01,789
to use these interfaces and as a result

00:04:59,060 --> 00:05:04,069
of that we need to understand the AP is

00:05:01,789 --> 00:05:06,319
that we're using and as a result of that

00:05:04,069 --> 00:05:09,229
the people creating the AP is need to

00:05:06,319 --> 00:05:11,210
think of us think of the lowly developer

00:05:09,229 --> 00:05:13,159
think of the person who's going to be

00:05:11,210 --> 00:05:14,900
reading your documentation looking at

00:05:13,159 --> 00:05:17,659
your code trying to talk to your web

00:05:14,900 --> 00:05:20,690
service and figure it all out and if

00:05:17,659 --> 00:05:23,419
it's an arcane mess of inconsistency and

00:05:20,690 --> 00:05:24,979
of things that are not intuitive then

00:05:23,419 --> 00:05:27,080
that person is going to be cursing your

00:05:24,979 --> 00:05:28,400
name until the day they die or at least

00:05:27,080 --> 00:05:31,909
until they get a new job and they don't

00:05:28,400 --> 00:05:34,909
have to touch your stuff anymore so who

00:05:31,909 --> 00:05:37,969
are your users well their developers and

00:05:34,909 --> 00:05:40,880
your colleague developers they're your

00:05:37,969 --> 00:05:43,580
customers if you're selling a service if

00:05:40,880 --> 00:05:45,710
they're if they're buying your software

00:05:43,580 --> 00:05:47,990
if they're buying access to your product

00:05:45,710 --> 00:05:49,580
in your platform if they're building on

00:05:47,990 --> 00:05:51,500
top of your platform and they're

00:05:49,580 --> 00:05:53,900
providing a service of their own there

00:05:51,500 --> 00:05:56,000
are customers so you not just the people

00:05:53,900 --> 00:05:57,650
who interact with you directly but those

00:05:56,000 --> 00:05:59,479
who interact with those who interact

00:05:57,650 --> 00:06:02,569
with you directly if that makes sense

00:05:59,479 --> 00:06:04,550
after lunch and any of the applications

00:06:02,569 --> 00:06:07,340
that are built on top of that you have

00:06:04,550 --> 00:06:09,740
all these people and systems and things

00:06:07,340 --> 00:06:11,840
to be considering when you're building

00:06:09,740 --> 00:06:16,159
the software when you're delivering the

00:06:11,840 --> 00:06:17,900
stuff to people so when you start

00:06:16,159 --> 00:06:20,240
approaching your AP is when you start

00:06:17,900 --> 00:06:21,620
designing them and thinking about who

00:06:20,240 --> 00:06:24,680
you're going to deliver them to think

00:06:21,620 --> 00:06:27,110
about how they're going to use them come

00:06:24,680 --> 00:06:28,729
up with the use cases if I create this

00:06:27,110 --> 00:06:32,810
module that provides some programmatic

00:06:28,729 --> 00:06:35,000
access to my drupal application why do

00:06:32,810 --> 00:06:36,950
people want that are you doing it just

00:06:35,000 --> 00:06:38,210
because are you just exposing

00:06:36,950 --> 00:06:40,370
on the off chance that someone will

00:06:38,210 --> 00:06:41,420
figure out that they need that think of

00:06:40,370 --> 00:06:44,060
ways in which people are going to

00:06:41,420 --> 00:06:47,210
actually be implementing software

00:06:44,060 --> 00:06:49,430
against your stuff and the use cases can

00:06:47,210 --> 00:06:53,900
help you understand that create user

00:06:49,430 --> 00:06:57,440
stories as a customer of mine I want to

00:06:53,900 --> 00:06:59,450
LA because I want to I want to consume

00:06:57,440 --> 00:07:01,670
the payments interface because I want to

00:06:59,450 --> 00:07:05,690
make a lot of money you know that's

00:07:01,670 --> 00:07:08,540
quite a good driver money document how

00:07:05,690 --> 00:07:10,850
those stories and new cases play out if

00:07:08,540 --> 00:07:14,420
you are the person interfacing with your

00:07:10,850 --> 00:07:19,250
software how would you go about reading

00:07:14,420 --> 00:07:21,680
and using and consuming that service lay

00:07:19,250 --> 00:07:23,960
all that out up front because that can

00:07:21,680 --> 00:07:25,160
provide a healthy guide and a map to the

00:07:23,960 --> 00:07:27,470
way that you can continue your

00:07:25,160 --> 00:07:30,080
integration work in the in the first

00:07:27,470 --> 00:07:32,060
place and think about what kind of

00:07:30,080 --> 00:07:35,390
elevator pitch you can send to people

00:07:32,060 --> 00:07:37,100
why would they want to use your API why

00:07:35,390 --> 00:07:39,680
should they use your software and not

00:07:37,100 --> 00:07:41,480
someone elses if you can contain that in

00:07:39,680 --> 00:07:43,250
a couple of words in a couple of

00:07:41,480 --> 00:07:45,430
sentences and if you can include the

00:07:43,250 --> 00:07:47,660
word simple and easy to use and mean it

00:07:45,430 --> 00:07:49,580
then people are a lot more likely to

00:07:47,660 --> 00:07:54,170
adopt your software is you're going on

00:07:49,580 --> 00:07:56,750
and once you have those use cases once

00:07:54,170 --> 00:07:59,150
you have those stories and you can start

00:07:56,750 --> 00:08:01,580
to justify exactly why you're exposing

00:07:59,150 --> 00:08:03,650
the API you have a cast iron set of

00:08:01,580 --> 00:08:05,660
examples as to the reasoning behind it

00:08:03,650 --> 00:08:07,730
so not only can it help guide the design

00:08:05,660 --> 00:08:09,460
but it can help you understand exactly

00:08:07,730 --> 00:08:12,170
what you're revealing in the first place

00:08:09,460 --> 00:08:14,750
you don't really want to expose your

00:08:12,170 --> 00:08:17,000
business logic to people just because

00:08:14,750 --> 00:08:18,650
you can you don't want it to be as close

00:08:17,000 --> 00:08:20,360
to the underlying code as you can you

00:08:18,650 --> 00:08:22,670
want to think about reducing the

00:08:20,360 --> 00:08:24,530
complexity for a very good reasons you

00:08:22,670 --> 00:08:26,450
might have an object-oriented system

00:08:24,530 --> 00:08:28,640
underneath of storing your data of

00:08:26,450 --> 00:08:30,860
modeling everything you do but your

00:08:28,640 --> 00:08:33,470
customer doesn't need to know that the

00:08:30,860 --> 00:08:35,599
the person the software that's interact

00:08:33,470 --> 00:08:37,970
interfacing with that they're only in it

00:08:35,599 --> 00:08:39,620
for themselves so think about the ways

00:08:37,970 --> 00:08:41,599
in which you can take that complicated

00:08:39,620 --> 00:08:43,760
object oriented model that's flexible as

00:08:41,599 --> 00:08:46,850
anything and boil that down to a more

00:08:43,760 --> 00:08:48,820
simple approach and along with thinking

00:08:46,850 --> 00:08:53,050
what they can do

00:08:48,820 --> 00:08:55,420
think about what a user cannot do think

00:08:53,050 --> 00:08:58,270
about restricting them before you

00:08:55,420 --> 00:09:00,400
actually reveal this this interface

00:08:58,270 --> 00:09:02,800
think about the ways in which you're

00:09:00,400 --> 00:09:03,880
going to hold back functionality the

00:09:02,800 --> 00:09:06,520
ways in which you're going to restrict

00:09:03,880 --> 00:09:07,870
them because nine times out of ten your

00:09:06,520 --> 00:09:09,280
bus is going to turn around in three

00:09:07,870 --> 00:09:11,260
months time you having published this

00:09:09,280 --> 00:09:13,870
API and said actually I want to sell it

00:09:11,260 --> 00:09:15,610
with only this bit and not that bit but

00:09:13,870 --> 00:09:18,220
that guy over there he's paying a lot of

00:09:15,610 --> 00:09:19,540
money he can have everything and then

00:09:18,220 --> 00:09:21,580
take those restrictions that you're

00:09:19,540 --> 00:09:24,010
considering had what you're holding back

00:09:21,580 --> 00:09:26,170
and what you're providing and look back

00:09:24,010 --> 00:09:28,210
at those use cases those user stories

00:09:26,170 --> 00:09:31,470
and have a look to see if they are

00:09:28,210 --> 00:09:33,850
validated against it compare those

00:09:31,470 --> 00:09:36,640
examples that you've come up already and

00:09:33,850 --> 00:09:39,940
see whether your API matches up to there

00:09:36,640 --> 00:09:43,390
it's a really good example of holding

00:09:39,940 --> 00:09:44,830
back on providing too much capability if

00:09:43,390 --> 00:09:48,610
all you need to do is solve a couple of

00:09:44,830 --> 00:09:50,650
use cases so when I first started

00:09:48,610 --> 00:09:52,090
designing this talk i put a tweet out

00:09:50,650 --> 00:09:54,280
there i thought i was very novel i

00:09:52,090 --> 00:09:55,660
thought yeah think of the users why

00:09:54,280 --> 00:09:59,950
doesn't anyone think of me when I'm

00:09:55,660 --> 00:10:01,750
creating this stuff expanding on all

00:09:59,950 --> 00:10:03,700
this frustration that I've got from all

00:10:01,750 --> 00:10:05,980
these people whose api's I've had to

00:10:03,700 --> 00:10:08,470
integrate with in the past put that out

00:10:05,980 --> 00:10:10,660
there think of the users I got this

00:10:08,470 --> 00:10:12,340
great idea someone immediately pipes up

00:10:10,660 --> 00:10:14,490
and says oh you're thinking of API UX

00:10:12,340 --> 00:10:17,740
and of course there's a website about it

00:10:14,490 --> 00:10:20,320
so if you go to API you x-com there's a

00:10:17,740 --> 00:10:22,210
really good blog there by Bruno Pedro

00:10:20,320 --> 00:10:26,940
but one of the things that I found on

00:10:22,210 --> 00:10:29,680
there is the API hierarchy of needs so

00:10:26,940 --> 00:10:31,510
hopefully most of you if not some of you

00:10:29,680 --> 00:10:33,370
if none of you have heard of the

00:10:31,510 --> 00:10:35,770
Maslow's hierarchy of needs basically

00:10:33,370 --> 00:10:38,590
it's a ranked hierarchy of things that

00:10:35,770 --> 00:10:41,050
people want in order to be happy in life

00:10:38,590 --> 00:10:45,730
and in this example it's how to be happy

00:10:41,050 --> 00:10:47,830
with an API so we have usability I can

00:10:45,730 --> 00:10:49,480
you use it if people can't use your

00:10:47,830 --> 00:10:51,850
stuff they're not going to bother

00:10:49,480 --> 00:10:53,910
they're going to get sweary they're

00:10:51,850 --> 00:10:56,500
going to leave and use a competitor

00:10:53,910 --> 00:10:59,200
functionality does it continue to work

00:10:56,500 --> 00:11:02,110
as you like and reliability does it

00:10:59,200 --> 00:11:04,390
always work the same way does it stand

00:11:02,110 --> 00:11:08,140
does it always fall down or is it always

00:11:04,390 --> 00:11:11,170
available proficiency now I know it can

00:11:08,140 --> 00:11:12,640
I do cool things with it can I use it do

00:11:11,170 --> 00:11:15,070
I know it backwards or is it always

00:11:12,640 --> 00:11:19,060
changing and finally that creativity

00:11:15,070 --> 00:11:22,390
what new novel things can I do with this

00:11:19,060 --> 00:11:24,279
stuff that this wonderful developer

00:11:22,390 --> 00:11:28,230
who's been to Chris holds talk has

00:11:24,279 --> 00:11:31,570
provided me so starting at the bottom

00:11:28,230 --> 00:11:34,510
usability that's not in the bathrooms

00:11:31,570 --> 00:11:38,079
here by the way just in case you thought

00:11:34,510 --> 00:11:41,410
it looked familiar usability if people

00:11:38,079 --> 00:11:45,310
can't use your software they will not

00:11:41,410 --> 00:11:47,620
use your software unless they're paid a

00:11:45,310 --> 00:11:49,570
lot of money or unless that's the only

00:11:47,620 --> 00:11:52,990
thing they have as soon as a competitor

00:11:49,570 --> 00:11:56,760
pops up with a more simple approach a

00:11:52,990 --> 00:11:59,260
more usable approach that uses JumpShip

00:11:56,760 --> 00:12:00,970
unless they paid a lot of money to

00:11:59,260 --> 00:12:02,860
develop and lock themselves in with you

00:12:00,970 --> 00:12:04,839
they're over to the other side and you

00:12:02,860 --> 00:12:07,240
lose any future customers to that

00:12:04,839 --> 00:12:09,640
competitor so think about how you can

00:12:07,240 --> 00:12:15,000
make my life easier to use your service

00:12:09,640 --> 00:12:19,120
to use your library and key of that

00:12:15,000 --> 00:12:21,269
consistency if I've used your software

00:12:19,120 --> 00:12:23,920
before and you introduced a new feature

00:12:21,269 --> 00:12:26,199
or if I've used a small part of your

00:12:23,920 --> 00:12:28,089
software before and there's another API

00:12:26,199 --> 00:12:30,970
that's been presented if they're not

00:12:28,089 --> 00:12:34,000
similar I need to start all over again I

00:12:30,970 --> 00:12:35,500
need to start learning new things and as

00:12:34,000 --> 00:12:37,480
soon as I need to start learning new

00:12:35,500 --> 00:12:39,760
things I'm a lot less likely to want to

00:12:37,480 --> 00:12:40,930
try and jump in so if you can find ways

00:12:39,760 --> 00:12:43,390
in which you can improve that

00:12:40,930 --> 00:12:45,279
consistency across your endpoints across

00:12:43,390 --> 00:12:47,410
the public methods of the stuff that

00:12:45,279 --> 00:12:49,240
you're putting out there then by all

00:12:47,410 --> 00:12:50,860
means do that because that's going to

00:12:49,240 --> 00:12:52,269
make my life easier when it comes from

00:12:50,860 --> 00:12:57,220
me to start integrating a bit further

00:12:52,269 --> 00:13:00,220
into your stuff look at style guides PHP

00:12:57,220 --> 00:13:02,649
has PSR is one and two and the soon to

00:13:00,220 --> 00:13:06,730
be brought out PS are 12 I think it is

00:13:02,649 --> 00:13:09,790
for PHP 7 drupal's got your own code

00:13:06,730 --> 00:13:11,589
style guidelines follow those because at

00:13:09,790 --> 00:13:14,319
the end of the day if I look at the way

00:13:11,589 --> 00:13:15,820
that you've created your software and I

00:13:14,319 --> 00:13:17,410
look at the way in which

00:13:15,820 --> 00:13:19,180
your software is laid out if I want to

00:13:17,410 --> 00:13:22,480
change that or if I want to understand

00:13:19,180 --> 00:13:24,790
it to see a language that I understand

00:13:22,480 --> 00:13:28,330
to see the way in which PHP is used

00:13:24,790 --> 00:13:30,970
underneath to see the way in which this

00:13:28,330 --> 00:13:32,470
rest service is presented to me if it's

00:13:30,970 --> 00:13:34,960
something I recognize and I'm familiar

00:13:32,470 --> 00:13:37,990
with that I'm a lot more likely to be at

00:13:34,960 --> 00:13:39,790
ease with it and for style guides in the

00:13:37,990 --> 00:13:41,770
code level anyway you've got tools like

00:13:39,790 --> 00:13:43,540
PHP code sniffer and for Drupal you've

00:13:41,770 --> 00:13:46,510
got coder I believe that can look into

00:13:43,540 --> 00:13:49,090
the code style that you've got there and

00:13:46,510 --> 00:13:51,790
help enforce that when you have common

00:13:49,090 --> 00:13:55,600
attributes and functions getters and

00:13:51,790 --> 00:13:58,120
setters or a crud way of accessing your

00:13:55,600 --> 00:14:01,540
underlying objects use the same words

00:13:58,120 --> 00:14:04,690
it's no good having get title on one

00:14:01,540 --> 00:14:07,480
object and get name on another unless

00:14:04,690 --> 00:14:10,690
they mean specific different things such

00:14:07,480 --> 00:14:12,460
as a salutation for one and the actual

00:14:10,690 --> 00:14:15,190
full name and the other you want to keep

00:14:12,460 --> 00:14:16,570
that terminology consistent because as

00:14:15,190 --> 00:14:18,400
soon as I start using another kind of

00:14:16,570 --> 00:14:20,110
module that you put out there or another

00:14:18,400 --> 00:14:21,340
object that you put out there I'm going

00:14:20,110 --> 00:14:22,840
to be looking for that get name I'm

00:14:21,340 --> 00:14:26,410
going to be looking for those similar

00:14:22,840 --> 00:14:29,470
styles they're naming as well if you

00:14:26,410 --> 00:14:31,390
have a nice convention there's the old

00:14:29,470 --> 00:14:32,860
see style of actually prefixing stuff

00:14:31,390 --> 00:14:35,860
with the types we don't need that

00:14:32,860 --> 00:14:38,980
anymore but certainly look at the ways

00:14:35,860 --> 00:14:40,750
in which that you can name everything in

00:14:38,980 --> 00:14:46,180
a very consistent fashion something that

00:14:40,750 --> 00:14:48,370
falls into place error codes if I have

00:14:46,180 --> 00:14:50,200
an error in one thing and I have the

00:14:48,370 --> 00:14:52,090
same kind of error in another if they

00:14:50,200 --> 00:14:54,160
don't have the same error that comes up

00:14:52,090 --> 00:14:57,670
to me I'm never going to understand so

00:14:54,160 --> 00:15:00,190
in rest in web services you've got the

00:14:57,670 --> 00:15:02,560
400 error which is catch-all bad request

00:15:00,190 --> 00:15:06,310
and if something's not found you've got

00:15:02,560 --> 00:15:10,600
a 404 not found which hopefully you all

00:15:06,310 --> 00:15:14,440
know but you can use a 400 in place of

00:15:10,600 --> 00:15:17,980
the 404 it's just as valid it's just a

00:15:14,440 --> 00:15:20,500
lot less specific so if one place in

00:15:17,980 --> 00:15:22,330
your application responds with that very

00:15:20,500 --> 00:15:24,040
specific I haven't found anything and

00:15:22,330 --> 00:15:27,220
another comes across with something

00:15:24,040 --> 00:15:28,840
that's a bit more a bit more general

00:15:27,220 --> 00:15:29,150
there's been a general error and it's

00:15:28,840 --> 00:15:32,120
your

00:15:29,150 --> 00:15:34,340
fault how am I is the person integrating

00:15:32,120 --> 00:15:38,150
going to understand what you've put

00:15:34,340 --> 00:15:42,140
across and that kind of goes on to

00:15:38,150 --> 00:15:44,810
patterns so patterns are existing

00:15:42,140 --> 00:15:47,150
established ways of solving similar

00:15:44,810 --> 00:15:49,250
problems across so hopefully most of you

00:15:47,150 --> 00:15:52,190
have heard of factory patterns there's

00:15:49,250 --> 00:15:54,260
observer patterns and all sorts of

00:15:52,190 --> 00:15:56,420
patterns that are out there they solve

00:15:54,260 --> 00:15:59,870
problems that you encountered a today is

00:15:56,420 --> 00:16:01,310
your coding and if you use those people

00:15:59,870 --> 00:16:02,570
are more likely to be able to look at

00:16:01,310 --> 00:16:05,120
your software and understand exactly

00:16:02,570 --> 00:16:07,730
what you're trying to get at they can

00:16:05,120 --> 00:16:10,130
understand here's your solution here's

00:16:07,730 --> 00:16:13,220
the problem and know exactly how you're

00:16:10,130 --> 00:16:15,380
approaching that in web services we have

00:16:13,220 --> 00:16:17,180
our PC and we have rest different ways

00:16:15,380 --> 00:16:19,550
in which we can interact with stuff and

00:16:17,180 --> 00:16:22,220
if you look at the way that people apply

00:16:19,550 --> 00:16:24,620
these patterns in a consistent way

00:16:22,220 --> 00:16:27,560
across not only your software but across

00:16:24,620 --> 00:16:29,960
the whole software ecosystem then you

00:16:27,560 --> 00:16:32,480
can find ways in which I know exactly

00:16:29,960 --> 00:16:35,810
what to do when I need to create

00:16:32,480 --> 00:16:38,950
something in a web service a post or a

00:16:35,810 --> 00:16:41,480
puts to update it and so on so

00:16:38,950 --> 00:16:43,580
immediately we're again talking that

00:16:41,480 --> 00:16:46,490
consistency that same language with our

00:16:43,580 --> 00:16:47,960
users as we're putting stuff across and

00:16:46,490 --> 00:16:50,840
if you're interested in software

00:16:47,960 --> 00:16:52,820
patterns at all they're mostly laid out

00:16:50,840 --> 00:16:54,440
when it comes to the code level anyway

00:16:52,820 --> 00:16:59,150
in the gang of what's known as a gang of

00:16:54,440 --> 00:17:02,300
four there's a it's all laid out there's

00:16:59,150 --> 00:17:03,620
all factory is put out there I forget

00:17:02,300 --> 00:17:05,390
the name of the authors but have a look

00:17:03,620 --> 00:17:09,860
it's Nona up there and you can pick that

00:17:05,390 --> 00:17:11,600
through an information hierarchy for

00:17:09,860 --> 00:17:13,910
your application is also important

00:17:11,600 --> 00:17:17,060
understanding when you've created these

00:17:13,910 --> 00:17:21,500
objects how they relate to each other so

00:17:17,060 --> 00:17:23,570
uber might have a car to represent a

00:17:21,500 --> 00:17:25,339
taxi they might have a person to

00:17:23,570 --> 00:17:29,410
represent the driver they might have a

00:17:25,339 --> 00:17:33,320
passenger to represent a passenger but

00:17:29,410 --> 00:17:36,530
ubers way of looking at the world might

00:17:33,320 --> 00:17:39,700
be more focused on the car for example

00:17:36,530 --> 00:17:41,650
or on the driver than on the passenger

00:17:39,700 --> 00:17:43,000
whereas the passenger or

00:17:41,650 --> 00:17:44,950
anyone who might be integrating

00:17:43,000 --> 00:17:47,650
something on behalf of a passenger would

00:17:44,950 --> 00:17:48,850
be more concerned about themselves so if

00:17:47,650 --> 00:17:52,150
you think about the ways in which people

00:17:48,850 --> 00:17:53,380
are going to be using your software the

00:17:52,150 --> 00:17:57,280
ways that they're more self-centered

00:17:53,380 --> 00:17:59,020
rather than you apply those models to

00:17:57,280 --> 00:18:04,570
the way that people interact with your

00:17:59,020 --> 00:18:07,330
software ok so and an API where the car

00:18:04,570 --> 00:18:08,710
is the most important thing for you the

00:18:07,330 --> 00:18:10,540
passenger who's going to be paying you

00:18:08,710 --> 00:18:12,640
the money or who's going to be paying

00:18:10,540 --> 00:18:14,470
someone else to integrate with you once

00:18:12,640 --> 00:18:15,850
to think about themselves so look at it

00:18:14,470 --> 00:18:18,420
from their point of view rather than

00:18:15,850 --> 00:18:21,490
imposing your structure on those people

00:18:18,420 --> 00:18:23,530
nesting entities can be problematic if

00:18:21,490 --> 00:18:25,870
you go three four or five things deep

00:18:23,530 --> 00:18:28,270
then all hell breaks loose when

00:18:25,870 --> 00:18:31,810
someone's trying to work with your stuff

00:18:28,270 --> 00:18:34,660
so if you have a car and a passenger and

00:18:31,810 --> 00:18:35,920
a wallet and a dollar immediately you

00:18:34,660 --> 00:18:37,570
start getting more complex as you're

00:18:35,920 --> 00:18:40,240
representing these things with your

00:18:37,570 --> 00:18:43,000
interfaces and if you get this right if

00:18:40,240 --> 00:18:44,860
you get the cell this focusing on the

00:18:43,000 --> 00:18:46,420
user right then it becomes a lot more

00:18:44,860 --> 00:18:47,800
intuitive for them because they're

00:18:46,420 --> 00:18:51,040
working with themselves and not

00:18:47,800 --> 00:18:54,840
necessarily with your cut your company

00:18:51,040 --> 00:18:59,470
focused way of doing things an

00:18:54,840 --> 00:19:01,270
abstraction take those user stories I

00:18:59,470 --> 00:19:04,540
was talking about reducing complexity

00:19:01,270 --> 00:19:07,120
and providing simplicity abstraction is

00:19:04,540 --> 00:19:10,000
great way of doing that if you need to

00:19:07,120 --> 00:19:12,670
know to book a taxi ride you need to

00:19:10,000 --> 00:19:14,110
find the car you need to tell the car to

00:19:12,670 --> 00:19:16,540
go somewhere and then you need to

00:19:14,110 --> 00:19:19,120
produce a fair that might be three API

00:19:16,540 --> 00:19:22,150
calls or three separate functions within

00:19:19,120 --> 00:19:25,960
your kit but a customer doesn't want to

00:19:22,150 --> 00:19:27,340
hit each individual objects each time to

00:19:25,960 --> 00:19:29,860
work through that process that very

00:19:27,340 --> 00:19:33,820
common use case so if you take these

00:19:29,860 --> 00:19:36,790
user stories and work that out what are

00:19:33,820 --> 00:19:39,010
they trying to do how can I make a three

00:19:36,790 --> 00:19:40,990
step process into one step process so

00:19:39,010 --> 00:19:43,030
you can just have a book a ride function

00:19:40,990 --> 00:19:45,130
that hits those three things underneath

00:19:43,030 --> 00:19:48,160
but that's provided that simplicity

00:19:45,130 --> 00:19:50,070
under that's provided the simplicity for

00:19:48,160 --> 00:19:53,650
the person who's integrating with you

00:19:50,070 --> 00:19:55,570
hide that complexity because above all

00:19:53,650 --> 00:19:57,880
things what that actually

00:19:55,570 --> 00:19:59,800
to do is in the future you might have to

00:19:57,880 --> 00:20:02,260
add another call that says check that

00:19:59,800 --> 00:20:03,340
the car is available for example and

00:20:02,260 --> 00:20:05,410
that would be another thing that your

00:20:03,340 --> 00:20:07,000
customer might have to do just to get

00:20:05,410 --> 00:20:09,010
this common operation going but if

00:20:07,000 --> 00:20:11,530
you've abstracted it correctly if you've

00:20:09,010 --> 00:20:13,690
reduced the complexity down then you can

00:20:11,530 --> 00:20:15,520
make all these changes underneath you

00:20:13,690 --> 00:20:18,100
can change your entire underlying model

00:20:15,520 --> 00:20:21,130
without actually impacting the customer

00:20:18,100 --> 00:20:24,520
and breaking things for them do the hard

00:20:21,130 --> 00:20:27,250
work so your users don't have to the

00:20:24,520 --> 00:20:28,990
more simple that you provide stuff look

00:20:27,250 --> 00:20:32,080
at stripe look how easy it is to take

00:20:28,990 --> 00:20:33,910
payments with stripe this easier it is

00:20:32,080 --> 00:20:35,890
the more likely you are to get traction

00:20:33,910 --> 00:20:37,360
the more like you are to get users the

00:20:35,890 --> 00:20:38,590
less likely you are to have someone

00:20:37,360 --> 00:20:43,990
swearing at you in the middle of the

00:20:38,590 --> 00:20:46,840
night and from that you get simplicity

00:20:43,990 --> 00:20:49,660
it is the best result of abstraction

00:20:46,840 --> 00:20:52,510
it's the the if you can take these

00:20:49,660 --> 00:20:54,220
complex blocks inside take them into

00:20:52,510 --> 00:20:56,500
smaller blocks and allow them to build

00:20:54,220 --> 00:21:00,700
something with that it'll be more

00:20:56,500 --> 00:21:02,770
straightforward more use and with a

00:21:00,700 --> 00:21:05,800
smaller footprint with fewer places to

00:21:02,770 --> 00:21:08,140
interact with any faults that come up

00:21:05,800 --> 00:21:10,240
any problems that a customer has or any

00:21:08,140 --> 00:21:12,610
problems that software has using your

00:21:10,240 --> 00:21:14,560
stuff it'll be a lot easier to narrow

00:21:12,610 --> 00:21:16,270
down exactly where that's happening if

00:21:14,560 --> 00:21:17,710
they're hitting your API three four or

00:21:16,270 --> 00:21:20,380
five times just to get one thing done

00:21:17,710 --> 00:21:21,670
that's three four or five places that

00:21:20,380 --> 00:21:24,310
you have to check to see if there's a

00:21:21,670 --> 00:21:28,900
problem if it's just one then you've got

00:21:24,310 --> 00:21:31,630
a great place to start the downside of

00:21:28,900 --> 00:21:35,770
abstraction is if you provide very

00:21:31,630 --> 00:21:38,500
specific use cases you can make it more

00:21:35,770 --> 00:21:41,590
difficult to extend upon what you've

00:21:38,500 --> 00:21:43,420
written you might reduce the

00:21:41,590 --> 00:21:46,150
opportunities to be creative with your

00:21:43,420 --> 00:21:47,830
API if you've taken away the concept of

00:21:46,150 --> 00:21:50,500
a car from a customer and you've just

00:21:47,830 --> 00:21:52,780
given them the ride in general then they

00:21:50,500 --> 00:21:55,360
wouldn't necessarily be able to unknown

00:21:52,780 --> 00:21:56,830
locate the five best cars around and

00:21:55,360 --> 00:21:58,300
bring them in and create their own

00:21:56,830 --> 00:22:02,110
things from the more basic building

00:21:58,300 --> 00:22:03,790
blocks so finding a way of balancing

00:22:02,110 --> 00:22:05,680
that and that's not an answer I have for

00:22:03,790 --> 00:22:07,180
you today but finding a way in which you

00:22:05,680 --> 00:22:08,360
can find that nice balance of

00:22:07,180 --> 00:22:09,620
abstraction vs

00:22:08,360 --> 00:22:12,830
extensibility is going to be quite

00:22:09,620 --> 00:22:14,929
important think about how people were

00:22:12,830 --> 00:22:16,790
build upon that your use cases might

00:22:14,929 --> 00:22:18,770
cover up exactly what the application is

00:22:16,790 --> 00:22:21,080
underneath but find ways in which you

00:22:18,770 --> 00:22:22,429
can understand how someone's going to be

00:22:21,080 --> 00:22:24,710
using your software are they going to be

00:22:22,429 --> 00:22:27,140
using clients are they going to be using

00:22:24,710 --> 00:22:29,090
your API directly are they going to be

00:22:27,140 --> 00:22:31,220
using your objects in a very constrained

00:22:29,090 --> 00:22:33,860
fashion or in that more abstracted way

00:22:31,220 --> 00:22:35,720
that you put out there and that will

00:22:33,860 --> 00:22:37,370
help guide you in terms of finding that

00:22:35,720 --> 00:22:40,760
balance those ways in which you can find

00:22:37,370 --> 00:22:44,450
the right kind of level at which you can

00:22:40,760 --> 00:22:46,850
abstract restrictor is required so in

00:22:44,450 --> 00:22:52,640
web services you can use ACLs access

00:22:46,850 --> 00:22:54,740
controller layers in in your code public

00:22:52,640 --> 00:22:57,309
protected private and while there's a

00:22:54,740 --> 00:23:01,059
discussion between protected and private

00:22:57,309 --> 00:23:03,500
think about how what you want to expose

00:23:01,059 --> 00:23:06,650
anything you make public in one version

00:23:03,500 --> 00:23:09,410
of your software if someone's built on

00:23:06,650 --> 00:23:11,030
top of that then if you retract that if

00:23:09,410 --> 00:23:14,240
you take that back you've immediately

00:23:11,030 --> 00:23:16,760
broken their stuff so the less stuff you

00:23:14,240 --> 00:23:18,440
put out there to begin with the easier

00:23:16,760 --> 00:23:20,150
life is going to be for your customers

00:23:18,440 --> 00:23:22,190
you're going to be a lot less likely to

00:23:20,150 --> 00:23:23,270
break stuff and also you have a

00:23:22,190 --> 00:23:25,130
responsibility when you've made

00:23:23,270 --> 00:23:26,960
something public and publish that and

00:23:25,130 --> 00:23:28,610
people have built stuff on that you have

00:23:26,960 --> 00:23:34,190
a responsibility to not break their

00:23:28,610 --> 00:23:36,250
stuff so yeah take care and it is hard

00:23:34,190 --> 00:23:40,400
to retract the public access stuff and

00:23:36,250 --> 00:23:42,410
patterns help finding ways in which you

00:23:40,400 --> 00:23:43,910
provide just a get method for a factory

00:23:42,410 --> 00:23:46,910
as opposed to all the underlying

00:23:43,910 --> 00:23:50,559
building blocks that provides a nice

00:23:46,910 --> 00:23:50,559
simple way an abstract addwaitya

00:23:54,040 --> 00:24:01,460
customers so on to the second level of

00:23:59,540 --> 00:24:04,850
the hierarchy function out well and the

00:24:01,460 --> 00:24:08,059
third functionality and reliability yes

00:24:04,850 --> 00:24:10,100
I do do color I've lump these two

00:24:08,059 --> 00:24:11,780
together because while functionality is

00:24:10,100 --> 00:24:14,210
very important does it do the thing it's

00:24:11,780 --> 00:24:16,250
supposed to reliability is equally as

00:24:14,210 --> 00:24:18,169
important does it continually do the

00:24:16,250 --> 00:24:20,510
thing it's supposed to does it fall over

00:24:18,169 --> 00:24:21,980
does it pick itself back up again or is

00:24:20,510 --> 00:24:24,320
it reliably there

00:24:21,980 --> 00:24:25,549
I'm and time again so how can we think

00:24:24,320 --> 00:24:28,370
about the ways in which we can enforce

00:24:25,549 --> 00:24:32,630
this and discover whether we're reliable

00:24:28,370 --> 00:24:37,070
or not testing how many of you use

00:24:32,630 --> 00:24:39,260
simple tests or PHP units or any of

00:24:37,070 --> 00:24:46,309
those unit testing frameworks a few of

00:24:39,260 --> 00:24:49,730
you how many do PHP spec know how many

00:24:46,309 --> 00:24:52,510
people do behavioral stuff so B hat and

00:24:49,730 --> 00:24:56,900
be DD or any of those tools around there

00:24:52,510 --> 00:24:59,000
so finding the right approach for your

00:24:56,900 --> 00:25:02,360
code is pretty vital in getting all the

00:24:59,000 --> 00:25:04,690
stuff down unit testing tells you

00:25:02,360 --> 00:25:06,919
whether it works the way you designed it

00:25:04,690 --> 00:25:09,650
behavioral testing and functional

00:25:06,919 --> 00:25:11,330
testing to an extent tell you whether it

00:25:09,650 --> 00:25:14,900
works the way the customer expects that

00:25:11,330 --> 00:25:17,090
you built it so because behavioral works

00:25:14,900 --> 00:25:21,020
on the level of as a customer I want to

00:25:17,090 --> 00:25:23,480
do this than I do that and works on

00:25:21,020 --> 00:25:25,010
their behalf you can actually look at it

00:25:23,480 --> 00:25:26,720
from their point of view in a very

00:25:25,010 --> 00:25:28,580
straightforward fashion versus the unit

00:25:26,720 --> 00:25:31,220
test which just says does it work the

00:25:28,580 --> 00:25:33,110
way I designed it if you can build all

00:25:31,220 --> 00:25:34,610
these tools into your build release

00:25:33,110 --> 00:25:37,160
process if you're using continuous

00:25:34,610 --> 00:25:39,650
integration or continuous deployment and

00:25:37,160 --> 00:25:41,780
get those warning on you than anything

00:25:39,650 --> 00:25:44,200
that you break with any new version you

00:25:41,780 --> 00:25:48,020
bro code can be immediately picked up

00:25:44,200 --> 00:25:50,600
you can easily refactor underneath you

00:25:48,020 --> 00:25:52,010
can easily stop yourself from breaking

00:25:50,600 --> 00:25:55,250
your customers code which at the end of

00:25:52,010 --> 00:25:57,049
the day is what you're after if you

00:25:55,250 --> 00:26:00,559
stopped it dead or if you just make it

00:25:57,049 --> 00:26:02,840
worn while you're building stuff and you

00:26:00,559 --> 00:26:04,580
make a road block or just a road bump on

00:26:02,840 --> 00:26:06,290
the way to production then at least

00:26:04,580 --> 00:26:07,700
you're there you're forewarned your

00:26:06,290 --> 00:26:10,400
four-armed as to when you're going to

00:26:07,700 --> 00:26:12,559
release a break think about how you can

00:26:10,400 --> 00:26:14,900
take those tests and point them at your

00:26:12,559 --> 00:26:16,340
production servers if you've got an

00:26:14,900 --> 00:26:18,799
application out there providing a web

00:26:16,340 --> 00:26:20,630
service if you're the first person to

00:26:18,799 --> 00:26:22,760
find out whether you've broken something

00:26:20,630 --> 00:26:24,799
whether something's fallen down and your

00:26:22,760 --> 00:26:26,960
customers never notice that's the best

00:26:24,799 --> 00:26:28,880
thing you can do if you're out there

00:26:26,960 --> 00:26:31,490
ahead of them before they put that call

00:26:28,880 --> 00:26:34,940
into customer service you're on a winner

00:26:31,490 --> 00:26:35,670
if you're doing web services think about

00:26:34,940 --> 00:26:37,260
record

00:26:35,670 --> 00:26:39,930
everything that goes into your web

00:26:37,260 --> 00:26:42,360
service and comes back out every request

00:26:39,930 --> 00:26:44,820
that pops up in the access log anything

00:26:42,360 --> 00:26:47,730
that hits your engine X your Apache and

00:26:44,820 --> 00:26:50,700
then at future dates if there's been a

00:26:47,730 --> 00:26:53,100
fault when that goes in take those logs

00:26:50,700 --> 00:26:55,440
come back you can replay it against a

00:26:53,100 --> 00:26:59,150
production like system and recreate it

00:26:55,440 --> 00:27:01,530
there and then and then finally

00:26:59,150 --> 00:27:03,960
regression testing and the number of

00:27:01,530 --> 00:27:06,750
times the ivory factors something and

00:27:03,960 --> 00:27:08,730
it's broken and obscure use of my

00:27:06,750 --> 00:27:12,180
software it too many times for a

00:27:08,730 --> 00:27:13,740
professional myself but it happens the

00:27:12,180 --> 00:27:15,300
more unit testing have in there the more

00:27:13,740 --> 00:27:17,040
automated testing the more automated

00:27:15,300 --> 00:27:19,290
systems you have in there the less

00:27:17,040 --> 00:27:21,000
likely you are to to break stuff the

00:27:19,290 --> 00:27:26,640
more likely you are to be able to safely

00:27:21,000 --> 00:27:29,790
refactor as we go through metrics do we

00:27:26,640 --> 00:27:32,100
all use Google Analytics yeah how many

00:27:29,790 --> 00:27:33,800
people use metrics in their software

00:27:32,100 --> 00:27:38,820
itself as opposed to seeing a visit

00:27:33,800 --> 00:27:41,780
count events that go through a few so

00:27:38,820 --> 00:27:46,470
for those who don't metrics tell you

00:27:41,780 --> 00:27:48,360
what is happening so you can say every

00:27:46,470 --> 00:27:50,040
time an event comes up or in Drupal you

00:27:48,360 --> 00:27:51,600
might have a hook in there using the

00:27:50,040 --> 00:27:53,600
symphony event system anything like that

00:27:51,600 --> 00:27:58,500
you can say on that i'm going to count

00:27:53,600 --> 00:28:02,250
one this api got hit the once or this

00:27:58,500 --> 00:28:04,620
api produced this error code x many

00:28:02,250 --> 00:28:06,390
times and you can store that for

00:28:04,620 --> 00:28:09,510
posterity and you can watch to see

00:28:06,390 --> 00:28:11,310
exactly what happens if you've got high

00:28:09,510 --> 00:28:12,870
volumes of traffic going to your stuff

00:28:11,310 --> 00:28:15,090
and you're putting that into the right

00:28:12,870 --> 00:28:17,190
place you can you can chart it you can

00:28:15,090 --> 00:28:20,070
put graphs up that show you exactly how

00:28:17,190 --> 00:28:21,450
over time your API has been used where

00:28:20,070 --> 00:28:23,070
any faults might happen you can

00:28:21,450 --> 00:28:25,110
correlate that against any events that

00:28:23,070 --> 00:28:28,170
might have occurred if you take those

00:28:25,110 --> 00:28:30,330
status codes you can see elevated 500

00:28:28,170 --> 00:28:32,460
internal server errors and catch that

00:28:30,330 --> 00:28:34,980
before our cut the customers really

00:28:32,460 --> 00:28:37,350
start to or tie that up against the

00:28:34,980 --> 00:28:38,880
release you've just done if you

00:28:37,350 --> 00:28:40,770
calibrate that with normal running if

00:28:38,880 --> 00:28:43,230
you know how many roughly you get per

00:28:40,770 --> 00:28:46,830
day requests that come in and that

00:28:43,230 --> 00:28:48,190
suddenly falls off a cliff then you can

00:28:46,830 --> 00:28:51,700
set up alerts through

00:28:48,190 --> 00:28:54,850
like naggy oz or xenos and actually get

00:28:51,700 --> 00:28:57,279
told that you know we've only had three

00:28:54,850 --> 00:28:59,769
visits who are page not a hundred visits

00:28:57,279 --> 00:29:02,559
to our page in the past day what's going

00:28:59,769 --> 00:29:04,240
on here and get out ahead of it it gives

00:29:02,559 --> 00:29:05,769
you that insight into running code and

00:29:04,240 --> 00:29:07,870
if you need to debug something in

00:29:05,769 --> 00:29:09,909
production if you need to understand

00:29:07,870 --> 00:29:11,860
whether it gets us something's gotten as

00:29:09,909 --> 00:29:13,960
far as you like you can't put any

00:29:11,860 --> 00:29:16,899
profiling in because you're afraid that

00:29:13,960 --> 00:29:18,700
it's going to be too much or abused than

00:29:16,899 --> 00:29:20,500
metrics give you a nice point of saying

00:29:18,700 --> 00:29:21,970
well if I can't everything that goes

00:29:20,500 --> 00:29:23,830
into this function and I count

00:29:21,970 --> 00:29:27,039
everything that goes out do those

00:29:23,830 --> 00:29:30,009
numbers match up at DataSift we use

00:29:27,039 --> 00:29:31,809
graphite to store the stuff and stats d

00:29:30,009 --> 00:29:34,000
to actually transport it across the

00:29:31,809 --> 00:29:36,100
network so we raise metrics on each of

00:29:34,000 --> 00:29:38,350
our servers pass it into this stats d

00:29:36,100 --> 00:29:41,409
package and it gets sent across stored

00:29:38,350 --> 00:29:43,480
and we can render it run scope also as

00:29:41,409 --> 00:29:45,340
an example of a service that you can use

00:29:43,480 --> 00:29:48,070
will do this metric stuff for you as

00:29:45,340 --> 00:29:49,809
well you put your hooks in and it just

00:29:48,070 --> 00:29:52,809
monitors as you go away it'll raise

00:29:49,809 --> 00:29:55,529
alerts and so on the end result of all

00:29:52,809 --> 00:30:01,809
those metrics this is our operations

00:29:55,529 --> 00:30:03,970
wall this was mostly in use while we're

00:30:01,809 --> 00:30:05,710
doing our streaming platform pulling all

00:30:03,970 --> 00:30:07,179
of Twitter through and one of the

00:30:05,710 --> 00:30:09,220
interesting things is on one of those

00:30:07,179 --> 00:30:11,139
charts during the world cup final a

00:30:09,220 --> 00:30:13,830
couple of years ago we could see every

00:30:11,139 --> 00:30:15,820
single goal scored against Brazil

00:30:13,830 --> 00:30:17,230
because we were counting every tweet

00:30:15,820 --> 00:30:19,629
that was going through the platform so

00:30:17,230 --> 00:30:22,029
every time Brazil's every time germany

00:30:19,629 --> 00:30:24,940
scored peek in there and you can see

00:30:22,029 --> 00:30:27,370
real-time events going through also we

00:30:24,940 --> 00:30:29,169
have up there we've got a little blue

00:30:27,370 --> 00:30:31,210
light that flashes every time a bad

00:30:29,169 --> 00:30:33,070
alert comes through and we had all the

00:30:31,210 --> 00:30:34,600
ops sitting down below that blue light

00:30:33,070 --> 00:30:38,289
they so they knew exactly what it was

00:30:34,600 --> 00:30:40,120
going on later on we added lights in the

00:30:38,289 --> 00:30:41,679
background and gave a bit of an

00:30:40,120 --> 00:30:43,779
electronics challenge to our herbs to

00:30:41,679 --> 00:30:44,860
make the lights go red or green

00:30:43,779 --> 00:30:48,639
depending on what the state of the

00:30:44,860 --> 00:30:51,820
platform is but yeah at a push you can

00:30:48,639 --> 00:30:53,830
see the metrics charted there you can

00:30:51,820 --> 00:30:55,779
understand exactly what's going on you

00:30:53,830 --> 00:30:57,700
can see one part of your pipeline if

00:30:55,779 --> 00:30:59,950
that's what you have stuff going through

00:30:57,700 --> 00:31:04,720
and whether it appears in another part

00:30:59,950 --> 00:31:07,480
so on the other part of understanding

00:31:04,720 --> 00:31:09,549
what's happening is logging and that

00:31:07,480 --> 00:31:11,559
tells you what happened so metrics says

00:31:09,549 --> 00:31:13,809
exactly right now something's down

00:31:11,559 --> 00:31:15,970
something's up and so on logging gives

00:31:13,809 --> 00:31:18,630
you a chance to understand what happened

00:31:15,970 --> 00:31:21,460
why those numbers have changed and

00:31:18,630 --> 00:31:23,169
helping you debug program a production

00:31:21,460 --> 00:31:25,240
fault so how many people have debug

00:31:23,169 --> 00:31:31,360
stuff by putting print statements in

00:31:25,240 --> 00:31:33,190
right yeah it works it's effective but a

00:31:31,360 --> 00:31:35,500
slightly more effective way and one that

00:31:33,190 --> 00:31:37,360
you can leave in in production is using

00:31:35,500 --> 00:31:39,309
logging whether that's putting it into

00:31:37,360 --> 00:31:41,559
error log and just firing that in to

00:31:39,309 --> 00:31:44,740
assist the syslog of the platform or

00:31:41,559 --> 00:31:46,899
whether you're using a I'm going to get

00:31:44,740 --> 00:31:48,639
the number wrong here but one of the PS

00:31:46,899 --> 00:31:52,059
are compliant logging platforms like

00:31:48,639 --> 00:31:54,100
monologue whatever you're doing there if

00:31:52,059 --> 00:31:55,690
you're recording things that happen then

00:31:54,100 --> 00:31:57,909
as soon as your metrics fall off a cliff

00:31:55,690 --> 00:32:00,340
or as soon as your customer has an error

00:31:57,909 --> 00:32:02,730
you can look back and you can see in

00:32:00,340 --> 00:32:05,529
English or whatever language you speak

00:32:02,730 --> 00:32:06,970
you can see exactly what's gone on and

00:32:05,529 --> 00:32:10,480
you can understand the points at which

00:32:06,970 --> 00:32:12,789
things have failed and if you are

00:32:10,480 --> 00:32:14,710
providing error messages to a customer

00:32:12,789 --> 00:32:17,080
based off your service it's a really

00:32:14,710 --> 00:32:19,389
good idea if you don't know or you can't

00:32:17,080 --> 00:32:20,919
reveal the cause of a problem you know

00:32:19,389 --> 00:32:22,299
the number of times when are we couldn't

00:32:20,919 --> 00:32:24,730
connect to the database but we don't

00:32:22,299 --> 00:32:26,409
want our customers to know that an

00:32:24,730 --> 00:32:28,720
internal server error occurred please

00:32:26,409 --> 00:32:33,070
try again if you provide them with a

00:32:28,720 --> 00:32:35,470
reference say take md5 and hash the time

00:32:33,070 --> 00:32:39,820
that it occurred so you gotta see the

00:32:35,470 --> 00:32:41,649
random set of letters and numbers if you

00:32:39,820 --> 00:32:42,970
can give them that code you can then

00:32:41,649 --> 00:32:44,740
cross-reference that against your

00:32:42,970 --> 00:32:47,830
logging is you go on so you understand

00:32:44,740 --> 00:32:49,870
that this request produce this error

00:32:47,830 --> 00:32:51,490
gave this code and here's what the real

00:32:49,870 --> 00:32:53,350
message is in our logs but we'll hide

00:32:51,490 --> 00:32:55,929
that from our our customers you don't

00:32:53,350 --> 00:32:58,000
need to know they provide that insight

00:32:55,929 --> 00:32:59,559
into running applications so that you

00:32:58,000 --> 00:33:01,510
don't have to go in there and throw your

00:32:59,559 --> 00:33:03,100
prints all over the place in prod just

00:33:01,510 --> 00:33:06,970
for one minute of understanding what's

00:33:03,100 --> 00:33:08,470
going wrong and if you build that into

00:33:06,970 --> 00:33:10,419
your libraries if you build that into

00:33:08,470 --> 00:33:12,519
your modules or your plugins and so on

00:33:10,419 --> 00:33:13,160
you can actually allow your customers to

00:33:12,519 --> 00:33:15,780
enjoy

00:33:13,160 --> 00:33:17,610
or the people using a software to inject

00:33:15,780 --> 00:33:19,530
a logger and have an understanding of

00:33:17,610 --> 00:33:21,180
what's going on in the first place right

00:33:19,530 --> 00:33:23,850
so if you've got a really complicated

00:33:21,180 --> 00:33:26,910
piece of kit and want to provide some

00:33:23,850 --> 00:33:28,950
real time understanding of what's going

00:33:26,910 --> 00:33:30,870
on in there putting in log lines and

00:33:28,950 --> 00:33:33,000
allowing someone to either raise the log

00:33:30,870 --> 00:33:35,340
level or put a logger in will allow them

00:33:33,000 --> 00:33:39,510
to see what's going on as it comes out

00:33:35,340 --> 00:33:41,460
of the logger versioning I could do a

00:33:39,510 --> 00:33:45,150
whole talk on versioning I'm not going

00:33:41,460 --> 00:33:47,280
to it's okay but it's very important

00:33:45,150 --> 00:33:49,710
that you start off planning to have a

00:33:47,280 --> 00:33:52,530
version 2 or version 3 of the stuff you

00:33:49,710 --> 00:33:54,840
write if you're writing web services

00:33:52,530 --> 00:33:56,010
even if this is a throwaway thing that

00:33:54,840 --> 00:33:58,860
you're never going to change you are

00:33:56,010 --> 00:34:00,270
going to change it so figure out a way

00:33:58,860 --> 00:34:03,870
that you're going to version it for your

00:34:00,270 --> 00:34:06,090
customers even if it's a simple / v 1 /

00:34:03,870 --> 00:34:07,980
v 2 at the beginning of your URLs for a

00:34:06,090 --> 00:34:09,960
service it's very important that you

00:34:07,980 --> 00:34:11,700
have a strategy to do this because the

00:34:09,960 --> 00:34:14,550
pain of moving people off of old

00:34:11,700 --> 00:34:17,460
versions is immense and we've seen that

00:34:14,550 --> 00:34:20,010
we're looking to hit we're looking to

00:34:17,460 --> 00:34:21,930
hit a terminal velocity or whatever the

00:34:20,010 --> 00:34:24,030
phrase the dress use this morning on

00:34:21,930 --> 00:34:26,670
Drupal 8 but the amount of effort that

00:34:24,030 --> 00:34:28,230
it took to get to that point the amount

00:34:26,670 --> 00:34:32,190
of effort it took four people to move

00:34:28,230 --> 00:34:34,560
from PHP 42 php5 was incredible and

00:34:32,190 --> 00:34:36,360
every time that you don't plan for those

00:34:34,560 --> 00:34:39,240
version changes you're going to have to

00:34:36,360 --> 00:34:41,130
go through that pain yourself if you're

00:34:39,240 --> 00:34:43,470
doing stuff in code look at semantic

00:34:41,130 --> 00:34:46,950
versioning that's a case where you've

00:34:43,470 --> 00:34:48,660
got major minor and patch as part of

00:34:46,950 --> 00:34:51,360
your numbers so three point two point

00:34:48,660 --> 00:34:53,190
one every time a major version happens

00:34:51,360 --> 00:34:55,530
it's a total rewrite of what you've done

00:34:53,190 --> 00:34:57,630
every time a minor version happens

00:34:55,530 --> 00:34:59,700
you've introduced some breaking changes

00:34:57,630 --> 00:35:01,410
but you're pretty much consistent every

00:34:59,700 --> 00:35:03,000
time a patch happens it's all backwards

00:35:01,410 --> 00:35:05,120
compatible with everything that starts

00:35:03,000 --> 00:35:07,680
with the same major and minor numbers

00:35:05,120 --> 00:35:08,880
but it lets you know that there's a

00:35:07,680 --> 00:35:10,320
newer version of the software out there

00:35:08,880 --> 00:35:12,480
and you can manage that kind of

00:35:10,320 --> 00:35:15,030
dependency I think there's a talk later

00:35:12,480 --> 00:35:17,190
on using composer with Drupal and

00:35:15,030 --> 00:35:18,750
composes a great example where semantic

00:35:17,190 --> 00:35:22,260
versioning really helps the PHP

00:35:18,750 --> 00:35:25,480
ecosystem understand what a breaking

00:35:22,260 --> 00:35:28,660
change is understand how customers

00:35:25,480 --> 00:35:31,060
to upgrade and how you're going to tell

00:35:28,660 --> 00:35:33,220
them how they need to upgrade if you

00:35:31,060 --> 00:35:35,350
deprecated a piece of code if you say

00:35:33,220 --> 00:35:38,470
this is going away make sure you take it

00:35:35,350 --> 00:35:40,630
away don't just leave it there make sure

00:35:38,470 --> 00:35:42,970
that you have that stick of removing

00:35:40,630 --> 00:35:44,650
functionality so that they get moved on

00:35:42,970 --> 00:35:46,030
to newer versions rather than become

00:35:44,650 --> 00:35:48,400
complacent with the things you put in

00:35:46,030 --> 00:35:50,859
front of their be very clear with a

00:35:48,400 --> 00:35:53,680
breaking changes be very clear that if

00:35:50,859 --> 00:35:56,740
you add another field to an API response

00:35:53,680 --> 00:35:58,930
that's not a breaking change we had one

00:35:56,740 --> 00:36:01,240
customer at one point was taking our API

00:35:58,930 --> 00:36:05,080
responses and just turning them into

00:36:01,240 --> 00:36:07,150
sequel inject insert statements so every

00:36:05,080 --> 00:36:09,640
field that we provided they'd say that's

00:36:07,150 --> 00:36:11,770
the column and then they take a value as

00:36:09,640 --> 00:36:13,390
well which is great until we started

00:36:11,770 --> 00:36:15,580
adding a new field and suddenly there

00:36:13,390 --> 00:36:17,890
was another a new field appearing in

00:36:15,580 --> 00:36:21,010
there perfectly automated system that

00:36:17,890 --> 00:36:22,300
doesn't exist in their database we

00:36:21,010 --> 00:36:24,940
didn't think it was a breaking change

00:36:22,300 --> 00:36:26,350
because in PHP lands no one really cares

00:36:24,940 --> 00:36:28,960
if there's extra information in your

00:36:26,350 --> 00:36:30,700
Jason response but they were very

00:36:28,960 --> 00:36:33,250
sensitive to it because they needed the

00:36:30,700 --> 00:36:35,020
extra column as it goes in so be upfront

00:36:33,250 --> 00:36:36,970
with customers and people who use your

00:36:35,020 --> 00:36:40,450
stuff as to what are breaking changes

00:36:36,970 --> 00:36:42,850
from your point of view and tell them up

00:36:40,450 --> 00:36:45,520
front how long you're going to support

00:36:42,850 --> 00:36:47,890
an API version if you have version 2

00:36:45,520 --> 00:36:49,540
there and someone spent a lot of money

00:36:47,890 --> 00:36:50,770
integrating with it they want to know

00:36:49,540 --> 00:36:52,840
that they're not going to have to spend

00:36:50,770 --> 00:36:55,240
that again in six months time because

00:36:52,840 --> 00:36:56,830
you've discontinued support for that

00:36:55,240 --> 00:36:58,750
especially if you're dealing with

00:36:56,830 --> 00:37:00,640
enterprise customers they want to know

00:36:58,750 --> 00:37:02,140
that the money that they've spent on all

00:37:00,640 --> 00:37:04,510
their developers to figure out how to

00:37:02,140 --> 00:37:07,000
include your stuff in there's is well

00:37:04,510 --> 00:37:09,550
spent and won't we spent again in three

00:37:07,000 --> 00:37:10,420
6 12 months time so be up front as to

00:37:09,550 --> 00:37:12,790
how long you're going to support

00:37:10,420 --> 00:37:15,960
something and then when that times over

00:37:12,790 --> 00:37:18,010
remove it deprecated get rid of it

00:37:15,960 --> 00:37:19,600
upfront figure out how you're going to

00:37:18,010 --> 00:37:21,640
communicate that information with your

00:37:19,600 --> 00:37:23,109
customers as well how are you going to

00:37:21,640 --> 00:37:24,940
open those lines of communication with

00:37:23,109 --> 00:37:27,369
them and tell them that these changes

00:37:24,940 --> 00:37:31,000
are coming that they've happened that

00:37:27,369 --> 00:37:33,280
they've missed the boat and along with

00:37:31,000 --> 00:37:35,170
those lines of communication tell them

00:37:33,280 --> 00:37:36,369
how to get back in touch with you you

00:37:35,170 --> 00:37:38,150
know it's one thing having a mailing

00:37:36,369 --> 00:37:40,099
list that says every

00:37:38,150 --> 00:37:41,960
I've got a product updates and the stuff

00:37:40,099 --> 00:37:45,319
out but how do they get in touch with

00:37:41,960 --> 00:37:48,049
you report bugs how do they give you

00:37:45,319 --> 00:37:50,809
product improvement information and

00:37:48,049 --> 00:37:52,520
ideas to get in touch how they how do

00:37:50,809 --> 00:37:54,740
they give you praise how do they swear

00:37:52,520 --> 00:37:57,730
at you give them a chance to get back to

00:37:54,740 --> 00:38:00,109
you the more likely the more that you

00:37:57,730 --> 00:38:01,579
respond to them as they come in the more

00:38:00,109 --> 00:38:04,789
likely they are to stick with you and

00:38:01,579 --> 00:38:06,319
forgive you your faults and when you're

00:38:04,789 --> 00:38:09,500
giving that information about errors

00:38:06,319 --> 00:38:12,619
that occur give them a reason if it's

00:38:09,500 --> 00:38:16,549
not a problem for them to know then just

00:38:12,619 --> 00:38:20,210
be open people appreciate honesty and

00:38:16,549 --> 00:38:21,440
openness and tell them if they can fix

00:38:20,210 --> 00:38:23,059
something if you're saying it's your

00:38:21,440 --> 00:38:25,430
fault you haven't filled out this form

00:38:23,059 --> 00:38:27,410
correctly for example how many times

00:38:25,430 --> 00:38:29,089
have we seen forms not filled out

00:38:27,410 --> 00:38:31,460
correctly and no one said what the

00:38:29,089 --> 00:38:34,910
problem is it's the same with our AP is

00:38:31,460 --> 00:38:37,910
if someone hasn't provided a name in an

00:38:34,910 --> 00:38:40,490
API call tell them that don't just say

00:38:37,910 --> 00:38:43,369
the unused it right move along tell them

00:38:40,490 --> 00:38:45,289
how they can fix stuff use appropriate

00:38:43,369 --> 00:38:48,410
language they might be swearing at you

00:38:45,289 --> 00:38:50,990
don't swear it them the number of times

00:38:48,410 --> 00:38:54,380
I've seen sweary error messages is a bit

00:38:50,990 --> 00:38:55,910
too scary when you use error codes

00:38:54,380 --> 00:39:00,349
instead of just threw out how many

00:38:55,910 --> 00:39:05,119
people use MySQL and have seen Erno 150

00:39:00,349 --> 00:39:09,950
and wonder what the hell is that if they

00:39:05,119 --> 00:39:13,910
just told you in very simple terms that

00:39:09,950 --> 00:39:16,430
our table is missing it's still

00:39:13,910 --> 00:39:19,010
something if you use some words and say

00:39:16,430 --> 00:39:21,710
table missing or anything like that it's

00:39:19,010 --> 00:39:23,240
a lot more intuitive and it's still just

00:39:21,710 --> 00:39:25,250
as predictable as a number as it comes

00:39:23,240 --> 00:39:27,589
out so I think about ways and instead of

00:39:25,250 --> 00:39:29,359
just providing a number provides that

00:39:27,589 --> 00:39:31,910
information that's human readable as you

00:39:29,359 --> 00:39:33,740
go through and provide a glossary for

00:39:31,910 --> 00:39:36,770
that if you know all the other stuff

00:39:33,740 --> 00:39:38,150
that you come up with give a lookup

00:39:36,770 --> 00:39:40,069
table for that something that someone

00:39:38,150 --> 00:39:42,140
can refer to and documentation as you go

00:39:40,069 --> 00:39:44,359
through because the number of times I've

00:39:42,140 --> 00:39:49,520
had to look up Erno 150 is a bit too

00:39:44,359 --> 00:39:51,569
many so proficiency how can we get

00:39:49,520 --> 00:39:53,489
better with the use of the software

00:39:51,569 --> 00:39:55,559
how can our customers and our users

00:39:53,489 --> 00:39:59,059
understand that a bit better and make

00:39:55,559 --> 00:40:01,859
things that are cool and that sing if

00:39:59,059 --> 00:40:04,499
we're doing website web services

00:40:01,859 --> 00:40:06,779
providing a client for our customers as

00:40:04,499 --> 00:40:10,319
opposed to just giving them the API raw

00:40:06,779 --> 00:40:12,289
that's a very good start the downside of

00:40:10,319 --> 00:40:15,660
that is your product your service

00:40:12,289 --> 00:40:17,609
extends into their code you're no longer

00:40:15,660 --> 00:40:19,680
responsible just for what happens at

00:40:17,609 --> 00:40:22,799
Apache you're responsible for what

00:40:19,680 --> 00:40:25,140
happens on their side of the fence but

00:40:22,799 --> 00:40:26,969
it gives them an immediate way they

00:40:25,140 --> 00:40:29,400
don't have to understand curl they don't

00:40:26,969 --> 00:40:31,410
have to understand streams or anything

00:40:29,400 --> 00:40:33,989
like that they can just use the software

00:40:31,410 --> 00:40:35,880
that you provide them directly so that's

00:40:33,989 --> 00:40:37,799
the best way in which you can get people

00:40:35,880 --> 00:40:39,359
up and running quickly is if you can

00:40:37,799 --> 00:40:41,459
provide them with software that they

00:40:39,359 --> 00:40:44,039
understand that lives there that they

00:40:41,459 --> 00:40:45,930
can update that they can update without

00:40:44,039 --> 00:40:47,549
breaking because of our versioning then

00:40:45,930 --> 00:40:49,199
that's the first foothold that they can

00:40:47,549 --> 00:40:50,789
get in there that makes their life a

00:40:49,199 --> 00:40:54,059
hell of a lot easier it is the edge of

00:40:50,789 --> 00:40:55,589
your product and as I said with

00:40:54,059 --> 00:40:57,449
versioning treat it exactly the same way

00:40:55,589 --> 00:40:59,759
as your Web API if you're doing that

00:40:57,449 --> 00:41:01,499
every time you put out a change to your

00:40:59,759 --> 00:41:04,140
API put out a new version of your

00:41:01,499 --> 00:41:06,690
clients update it show them where to

00:41:04,140 --> 00:41:08,549
find those updates use your versioning

00:41:06,690 --> 00:41:11,549
as we go on and use the native standards

00:41:08,549 --> 00:41:14,339
again PSR is one and two or the Drupal

00:41:11,549 --> 00:41:16,319
code standards are perfect for this

00:41:14,339 --> 00:41:18,930
because they can delve in and do any

00:41:16,319 --> 00:41:21,930
fault detection that they like if they

00:41:18,930 --> 00:41:23,640
understand the code I know we turn

00:41:21,930 --> 00:41:25,469
around and we look at our colleagues and

00:41:23,640 --> 00:41:28,019
we say well he doesn't write great code

00:41:25,469 --> 00:41:30,599
but they're turning around and pointing

00:41:28,019 --> 00:41:32,369
us and saying he doesn't write great

00:41:30,599 --> 00:41:34,499
code if you stick to those code

00:41:32,369 --> 00:41:36,209
standards and if you provide those and

00:41:34,499 --> 00:41:39,119
push those out to your customers they're

00:41:36,209 --> 00:41:43,049
a lot more likely to to accept the code

00:41:39,119 --> 00:41:44,940
that you've written documentation i like

00:41:43,049 --> 00:41:47,489
to say there is no such thing as self

00:41:44,940 --> 00:41:50,069
documenting code and that's doubly so if

00:41:47,489 --> 00:41:54,319
the code is not available to you if you

00:41:50,069 --> 00:41:57,660
can't see the code what's the point so

00:41:54,319 --> 00:42:01,380
use your documentation skills use your

00:41:57,660 --> 00:42:04,289
drupal site put those api's out there

00:42:01,380 --> 00:42:04,980
and describe that in plain English and

00:42:04,289 --> 00:42:07,109
as

00:42:04,980 --> 00:42:09,900
accurately and as up-to-date as you can

00:42:07,109 --> 00:42:11,880
put those things out there give working

00:42:09,900 --> 00:42:14,220
examples how to use your clients how to

00:42:11,880 --> 00:42:16,200
use your AP is anything that helps

00:42:14,220 --> 00:42:19,130
promote understanding of what you do and

00:42:16,200 --> 00:42:22,380
the reasoning behind what you've done

00:42:19,130 --> 00:42:24,750
cross link from your code if you're

00:42:22,380 --> 00:42:26,730
providing a public API from your

00:42:24,750 --> 00:42:29,040
software if you can just link through to

00:42:26,730 --> 00:42:31,770
the documentation from your from your

00:42:29,040 --> 00:42:33,510
software itself then that immediately

00:42:31,770 --> 00:42:35,700
provides your colleagues a way of

00:42:33,510 --> 00:42:37,140
understanding what you've done and it

00:42:35,700 --> 00:42:38,790
immediately lets them know that there's

00:42:37,140 --> 00:42:40,500
a document that they need to update as

00:42:38,790 --> 00:42:44,100
they go through make changes to what

00:42:40,500 --> 00:42:46,290
you've done as with everything you know

00:42:44,100 --> 00:42:48,030
with with Drupal with WordPress with

00:42:46,290 --> 00:42:49,920
everything like that we have manuals and

00:42:48,030 --> 00:42:54,570
quick start guides and cookbooks and all

00:42:49,920 --> 00:42:57,240
this overhead but it's very valuable you

00:42:54,570 --> 00:42:59,369
know we wouldn't know Drupal we wouldn't

00:42:57,240 --> 00:43:00,540
know PHP so well if all these sites

00:42:59,369 --> 00:43:04,380
weren't available if all this

00:43:00,540 --> 00:43:07,400
documentation wasn't written for us and

00:43:04,380 --> 00:43:09,930
we can take that one step further so

00:43:07,400 --> 00:43:12,000
documentation one of the pains of it is

00:43:09,930 --> 00:43:15,180
keeping it up-to-date if we can move it

00:43:12,000 --> 00:43:16,890
closer to our code if we can update it

00:43:15,180 --> 00:43:19,770
at the same time as we make changes to

00:43:16,890 --> 00:43:21,960
our code we're proactively lazy as

00:43:19,770 --> 00:43:23,550
developers right we see something that

00:43:21,960 --> 00:43:26,760
we can automate we see something that's

00:43:23,550 --> 00:43:28,710
boring and if we can automate it will do

00:43:26,760 --> 00:43:30,390
that make it happen and then we never

00:43:28,710 --> 00:43:32,280
need to touch that problem again we

00:43:30,390 --> 00:43:34,260
never need to touch that challenge again

00:43:32,280 --> 00:43:39,050
so look at ways in which you can use

00:43:34,260 --> 00:43:41,670
your document blocks javadoc or phpdoc

00:43:39,050 --> 00:43:44,340
there's the Drupal current standard as

00:43:41,670 --> 00:43:45,960
I've mentioned and so on and look at

00:43:44,340 --> 00:43:50,040
ways of filling that out and then just

00:43:45,960 --> 00:43:51,930
run PHP documenter over it or I think

00:43:50,040 --> 00:43:55,770
and anyone can correct me if I'm wrong

00:43:51,930 --> 00:43:57,869
there's an API document an API

00:43:55,770 --> 00:44:00,869
documentation generated for Drupal

00:43:57,869 --> 00:44:02,490
modules that will allow you to put that

00:44:00,869 --> 00:44:04,260
out there if you all just keep it close

00:44:02,490 --> 00:44:06,480
to the code every time you change the

00:44:04,260 --> 00:44:08,280
code and update the documentation while

00:44:06,480 --> 00:44:10,410
you're there and then and you understand

00:44:08,280 --> 00:44:12,990
what you've done that'll make your life

00:44:10,410 --> 00:44:15,150
a hell of a lot easier using those

00:44:12,990 --> 00:44:17,950
annotations that defines there you can

00:44:15,150 --> 00:44:21,730
actually generate interactive document

00:44:17,950 --> 00:44:23,980
so we build a system that used I Oh docs

00:44:21,730 --> 00:44:26,530
from mastery but swagger anything that

00:44:23,980 --> 00:44:28,599
uses Rammell or anything like that if

00:44:26,530 --> 00:44:31,240
you put those annotations in your code

00:44:28,599 --> 00:44:32,920
run a document or it not only are you

00:44:31,240 --> 00:44:36,460
saving yourself the hassle of changing

00:44:32,920 --> 00:44:38,230
in multiple places but certainly with

00:44:36,460 --> 00:44:40,060
swagger and io ducks you provide a

00:44:38,230 --> 00:44:42,790
little console that allows someone to

00:44:40,060 --> 00:44:44,920
put their authentication details in hit

00:44:42,790 --> 00:44:46,359
go and just play with it live and all

00:44:44,920 --> 00:44:48,910
you've had to do is change a couple of

00:44:46,359 --> 00:44:50,410
lines of text in your code itself make

00:44:48,910 --> 00:44:51,700
that part of the build process and every

00:44:50,410 --> 00:44:53,500
time you put a new version of something

00:44:51,700 --> 00:44:58,869
out there it gets published to another

00:44:53,500 --> 00:45:00,579
place and you're laughing and I was

00:44:58,869 --> 00:45:02,700
talking about feedback earlier but

00:45:00,579 --> 00:45:05,950
define those channels of communication

00:45:02,700 --> 00:45:08,170
tell people where the official places to

00:45:05,950 --> 00:45:09,700
talk to you to get in touch and to talk

00:45:08,170 --> 00:45:11,710
to other users of the stuff that you've

00:45:09,700 --> 00:45:13,750
done that provides a really great

00:45:11,710 --> 00:45:17,099
support mechanism for people not only

00:45:13,750 --> 00:45:19,570
from you but from the community at large

00:45:17,099 --> 00:45:21,790
the number of forums that we as

00:45:19,570 --> 00:45:23,770
developers have to use to understand

00:45:21,790 --> 00:45:26,829
what's going on and stack overflow and

00:45:23,770 --> 00:45:29,740
any applications that we use that have

00:45:26,829 --> 00:45:31,510
forums to help us get results we just

00:45:29,740 --> 00:45:33,670
stick with it a bit longer we fall into

00:45:31,510 --> 00:45:36,640
communities as we're all here in

00:45:33,670 --> 00:45:38,260
community we understand things a bit

00:45:36,640 --> 00:45:40,329
better and help those around us

00:45:38,260 --> 00:45:42,490
understand those if we tell people where

00:45:40,329 --> 00:45:44,470
to go to find that understanding and to

00:45:42,490 --> 00:45:46,390
find that support that's a really great

00:45:44,470 --> 00:45:49,240
start of getting people up and running

00:45:46,390 --> 00:45:51,819
and respond gracefully and attentively

00:45:49,240 --> 00:45:54,430
again i said earlier don't swear don't

00:45:51,819 --> 00:45:57,010
swear then if someone says there's a

00:45:54,430 --> 00:45:59,740
problem nod understand what the problem

00:45:57,010 --> 00:46:01,150
is they might be entirely wrong but

00:45:59,740 --> 00:46:04,420
instead of just saying it's all your

00:46:01,150 --> 00:46:06,310
fault you're an idiot turn around

00:46:04,420 --> 00:46:09,040
explain it respond with grace and

00:46:06,310 --> 00:46:11,380
kindness because you used to be that

00:46:09,040 --> 00:46:16,089
person long ago before you stepped onto

00:46:11,380 --> 00:46:18,970
IRC and became cynical um think of all

00:46:16,089 --> 00:46:21,250
the times that those people of that the

00:46:18,970 --> 00:46:23,890
people who've responded with either

00:46:21,250 --> 00:46:26,470
nothing silence or really Sarki comments

00:46:23,890 --> 00:46:28,990
how that damage your confidence don't be

00:46:26,470 --> 00:46:30,910
that person and because of that you can

00:46:28,990 --> 00:46:31,780
learn from the users and because of that

00:46:30,910 --> 00:46:34,090
you can learn

00:46:31,780 --> 00:46:35,710
them and you can keep them going on they

00:46:34,090 --> 00:46:39,580
build that trust and that rapport with

00:46:35,710 --> 00:46:43,890
them the final piece of the hierarchy

00:46:39,580 --> 00:46:46,330
you'll be glad to know is creativity now

00:46:43,890 --> 00:46:50,050
when I approached the hierarchy when I

00:46:46,330 --> 00:46:53,230
approach this as a concept I kind of ran

00:46:50,050 --> 00:46:54,550
out of ideas I am a kind of creative

00:46:53,230 --> 00:46:58,360
person but I couldn't come up with a

00:46:54,550 --> 00:47:01,690
great title for this creativity is all

00:46:58,360 --> 00:47:03,340
about serendipity if you provide to the

00:47:01,690 --> 00:47:05,080
stuff there if you provide all the

00:47:03,340 --> 00:47:08,320
things we talked about the reliability

00:47:05,080 --> 00:47:10,540
the documentation anything that provides

00:47:08,320 --> 00:47:13,030
understanding and helps people learn as

00:47:10,540 --> 00:47:14,950
you go through eventually they're going

00:47:13,030 --> 00:47:17,560
to be the ones that turn around and say

00:47:14,950 --> 00:47:22,240
if I put this with that then I can get

00:47:17,560 --> 00:47:23,760
Wow right so providing all of these

00:47:22,240 --> 00:47:26,740
things that i've talked about so far

00:47:23,760 --> 00:47:29,590
leads you to the path of people the

00:47:26,740 --> 00:47:31,720
building a friend search on top of

00:47:29,590 --> 00:47:33,670
spotify location information I'm sure

00:47:31,720 --> 00:47:36,640
spot if I probably want to do that now

00:47:33,670 --> 00:47:39,160
but previously they just wanted to

00:47:36,640 --> 00:47:40,810
provide music but this whole kind of

00:47:39,160 --> 00:47:43,720
ecosystem when you've got a nice open

00:47:40,810 --> 00:47:45,940
API a well-documented and supported

00:47:43,720 --> 00:47:47,740
piece and spring up around you and

00:47:45,940 --> 00:47:50,440
suddenly people be doing stuff with your

00:47:47,740 --> 00:47:52,180
software that you never realize they

00:47:50,440 --> 00:47:53,800
could do you didn't design it for that

00:47:52,180 --> 00:47:55,690
they weren't in your use cases or user

00:47:53,800 --> 00:47:57,790
stories but because you put all these

00:47:55,690 --> 00:48:00,340
structures and all these versions and

00:47:57,790 --> 00:48:02,770
all this cookbooks and stuff in place

00:48:00,340 --> 00:48:07,090
the around it and start building on

00:48:02,770 --> 00:48:08,770
top of that i've talked about best

00:48:07,090 --> 00:48:11,470
practice i've talked about a lot of

00:48:08,770 --> 00:48:13,180
stuff today right I've talked about

00:48:11,470 --> 00:48:14,500
writing manuals and cookbooks and

00:48:13,180 --> 00:48:16,800
everything like that and there's a lot

00:48:14,500 --> 00:48:21,040
of stuff on top of that but ultimately

00:48:16,800 --> 00:48:24,150
be pragmatic you only have so many hours

00:48:21,040 --> 00:48:26,500
in the day so choose your battles wisely

00:48:24,150 --> 00:48:29,410
think of what provides you with the best

00:48:26,500 --> 00:48:32,230
the most impact as you go through it's

00:48:29,410 --> 00:48:34,630
good you know we can't just be polishing

00:48:32,230 --> 00:48:37,150
stuff for the rest of our lives we've

00:48:34,630 --> 00:48:41,230
got to put it out there as someone said

00:48:37,150 --> 00:48:44,620
not too long ago great is the enemy of

00:48:41,230 --> 00:48:45,940
good right if you're a perfectionist and

00:48:44,620 --> 00:48:48,099
you're waiting until it's

00:48:45,940 --> 00:48:50,050
it'll never get out there someone beats

00:48:48,099 --> 00:48:52,599
you to market or you never update your

00:48:50,050 --> 00:48:54,099
stuff as you go through it can promote

00:48:52,599 --> 00:48:56,800
technical debt if you find those

00:48:54,099 --> 00:48:58,750
shortcuts but ultimately at the end of

00:48:56,800 --> 00:49:00,460
the day if you manage those processes

00:48:58,750 --> 00:49:02,430
and understands the debt you've created

00:49:00,460 --> 00:49:06,030
then you're in a better place for that

00:49:02,430 --> 00:49:09,030
find your balance rest doesn't actually

00:49:06,030 --> 00:49:11,319
cover everything that we do our PC

00:49:09,030 --> 00:49:14,619
remote procedure call doesn't cover

00:49:11,319 --> 00:49:16,510
every use case that we have so find a

00:49:14,619 --> 00:49:18,849
way in which you can fit concepts

00:49:16,510 --> 00:49:21,520
together in a consistent fashion so that

00:49:18,849 --> 00:49:23,230
you can make those shortcuts but in ways

00:49:21,520 --> 00:49:25,930
that people understand as you go through

00:49:23,230 --> 00:49:27,640
be realistic get that stuff out there

00:49:25,930 --> 00:49:29,740
get people understanding it and playing

00:49:27,640 --> 00:49:31,210
with it sooner rather than later because

00:49:29,740 --> 00:49:33,670
that way you can start learning from

00:49:31,210 --> 00:49:35,740
them as we talked about earlier if you

00:49:33,670 --> 00:49:37,810
iterate and if you start small you start

00:49:35,740 --> 00:49:40,180
with MVP Minimum Viable products put it

00:49:37,810 --> 00:49:41,680
out there get people using it and you've

00:49:40,180 --> 00:49:43,990
got that virtually in place you can

00:49:41,680 --> 00:49:45,369
improve and improve and improve and you

00:49:43,990 --> 00:49:48,310
can show that there is something there

00:49:45,369 --> 00:49:51,970
behind everything you've done but above

00:49:48,310 --> 00:49:54,010
all going over this going over all these

00:49:51,970 --> 00:49:56,530
best practices and being pragmatic and

00:49:54,010 --> 00:49:58,630
not dogmatic the one thing that you

00:49:56,530 --> 00:50:03,099
should always bring to what you do and

00:49:58,630 --> 00:50:05,950
put out there is pride be your software

00:50:03,099 --> 00:50:07,960
is biggest advocate you know not at the

00:50:05,950 --> 00:50:09,430
point of putting everyone down but be

00:50:07,960 --> 00:50:11,980
enthusiastic be your own cheerleader

00:50:09,430 --> 00:50:15,010
we're engineers we don't really do

00:50:11,980 --> 00:50:16,480
extraversion right we're not really the

00:50:15,010 --> 00:50:18,490
people well some of us aren't the people

00:50:16,480 --> 00:50:20,710
who stand up here and talk but at the

00:50:18,490 --> 00:50:23,770
end of the day if we're not supportive

00:50:20,710 --> 00:50:28,180
and talk up our own stuff then no one's

00:50:23,770 --> 00:50:31,410
going to use it so on that thank you

00:50:28,180 --> 00:50:31,410
very much have we got any questions

00:50:32,040 --> 00:50:35,760
lunch has gone down really well

00:50:39,940 --> 00:50:47,300
so the Sprint's are going on on friday

00:50:43,690 --> 00:50:52,580
so there's a couple of extra bits of

00:50:47,300 --> 00:50:54,590
information up on screen there also I'd

00:50:52,580 --> 00:50:57,320
be really interested in finding out what

00:50:54,590 --> 00:50:58,850
you thought if the lack of questions was

00:50:57,320 --> 00:51:01,310
because I told you everything that you

00:50:58,850 --> 00:51:02,960
knew already then that's perfect because

00:51:01,310 --> 00:51:07,490
preaching to the converted is very

00:51:02,960 --> 00:51:09,530
effective but just give me a bit of

00:51:07,490 --> 00:51:11,870
information back there and if you want

00:51:09,530 --> 00:51:14,180
to get in touch with me then find me on

00:51:11,870 --> 00:51:17,890
Twitter and LinkedIn and an email and

00:51:14,180 --> 00:51:17,890

YouTube URL: https://www.youtube.com/watch?v=7qIBd4-JNSA


