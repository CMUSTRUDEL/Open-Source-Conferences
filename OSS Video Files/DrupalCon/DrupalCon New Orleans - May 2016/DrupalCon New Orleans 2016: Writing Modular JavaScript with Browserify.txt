Title: DrupalCon New Orleans 2016: Writing Modular JavaScript with Browserify
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	Developing a modern web application requires an increasing amount of JavaScript code.  If not managed properly, you'll quickly find yourself dealing with a tangled mess of libraries and dependecies. Browserify can help.

Browserify is a flexible and powerful build tool for JavaScript.  At the most basic level, it allows you to bundle your JS code using CommonJS style modules that will run in the browser. It also offers a plugin and transformation api. Allowing you to process your scripts as they are bundled. 

In this talk we'll look at the benefits Browserify and walk through practical examples, including:

Organizing your code into smaller modules for better reuse.
Requiring 3rd-party modules from npm.
Separating your JS application's markup into clean template files.
Transpiling ES2015 (ES6) code to ES5 with Babelify.
Minifying code with Uglify.
Setting up super fast incremental builds with Watchify.
Extracting shared dependencies into common files with automatic code-splitting.
Whether working with Drupal 7, 8, or a headless frontend, you'll come away with a deeper understanding of what Browserify is and concrete steps to integrate it into your workflow.

This talk is geared toward developers who have experience with JavaScript and may have used other nodejs based tools such as Grunt, Gulp or node-sass. Those with experience using Browserify or Webpack are bound to learn something new as well.
Captions: 
	00:00:00,000 --> 00:00:06,529
all right I think we can go ahead and

00:00:02,490 --> 00:00:10,190
get started thank you all for coming

00:00:06,529 --> 00:00:21,480
this is writing modulator javascript

00:00:10,190 --> 00:00:23,789
with browserify there we go so my name

00:00:21,480 --> 00:00:28,220
is Jon Farriss I'm the director of

00:00:23,789 --> 00:00:31,830
front-end engineering at & Design Group

00:00:28,220 --> 00:00:37,440
you'd also find me as pixel whip on

00:00:31,830 --> 00:00:41,579
twitter or drupal org and I work for at

00:00:37,440 --> 00:00:45,300
design group were a strategy design and

00:00:41,579 --> 00:00:50,129
development agency based out of Denver

00:00:45,300 --> 00:00:52,440
Colorado we do a lot of a lot of work

00:00:50,129 --> 00:00:56,840
for organizations cause driven

00:00:52,440 --> 00:00:59,820
organizations around the world such as

00:00:56,840 --> 00:01:02,030
Human Rights Watch goop mon coeur

00:00:59,820 --> 00:01:09,479
institute we do a lot of work with

00:01:02,030 --> 00:01:12,570
higher education so Stanford Berkeley so

00:01:09,479 --> 00:01:18,720
yeah today we're going to be talking

00:01:12,570 --> 00:01:22,439
about JavaScript and basically how to

00:01:18,720 --> 00:01:24,450
use javascript as modules so breaking

00:01:22,439 --> 00:01:28,920
breaking your scripts up into smaller

00:01:24,450 --> 00:01:32,700
files one thing I want to note at the

00:01:28,920 --> 00:01:35,310
beginning is modern web sites are

00:01:32,700 --> 00:01:41,909
increasingly using more and more

00:01:35,310 --> 00:01:46,340
JavaScript so since 2010 according to

00:01:41,909 --> 00:01:49,350
the HTTP archive the average web site is

00:01:46,340 --> 00:01:52,229
using twice as many requests for

00:01:49,350 --> 00:01:54,570
JavaScript and the actual files that

00:01:52,229 --> 00:01:59,659
it's downloading is three times what

00:01:54,570 --> 00:02:03,649
they used to be so this is a graph from

00:01:59,659 --> 00:02:08,910
the HTTP archive and you can see back in

00:02:03,649 --> 00:02:11,420
2010 the average request for JavaScript

00:02:08,910 --> 00:02:14,780
files were was 11 so they'd load

00:02:11,420 --> 00:02:18,050
11 scripts onto the page now the average

00:02:14,780 --> 00:02:20,630
is 22 and used to be a hundred and

00:02:18,050 --> 00:02:26,030
thirteen kilobytes of JavaScript and now

00:02:20,630 --> 00:02:29,480
the average is over 300 so the usage of

00:02:26,030 --> 00:02:34,819
JavaScript has grown quite a bit in the

00:02:29,480 --> 00:02:37,940
last six years and there's there's a few

00:02:34,819 --> 00:02:41,870
things we can take away from that back

00:02:37,940 --> 00:02:44,060
around 2010 there was a huge shift I

00:02:41,870 --> 00:02:48,500
think in the mindset of front-end

00:02:44,060 --> 00:02:53,060
development specifically JavaScript so

00:02:48,500 --> 00:02:58,640
in 2009 it's when nodejs was was first

00:02:53,060 --> 00:03:01,519
released shortly after early 2010 NPM

00:02:58,640 --> 00:03:04,790
was released and this is when we first

00:03:01,519 --> 00:03:08,330
started seeing like an interest in using

00:03:04,790 --> 00:03:10,100
javascript outside of the browser using

00:03:08,330 --> 00:03:12,860
it on the server side using it for other

00:03:10,100 --> 00:03:19,670
applications like your build systems and

00:03:12,860 --> 00:03:22,760
whatnot also in 2010 Steve Jobs wrote

00:03:19,670 --> 00:03:24,829
his open letter on Adobe Flash basically

00:03:22,760 --> 00:03:27,140
saying we're just not going to support

00:03:24,829 --> 00:03:30,079
it on the iphone so this is three years

00:03:27,140 --> 00:03:32,150
after the initial iPhone came out he

00:03:30,079 --> 00:03:35,359
said we're not going to do it so up

00:03:32,150 --> 00:03:38,000
until then a lot of websites in terms of

00:03:35,359 --> 00:03:40,190
like their interactivity were focusing

00:03:38,000 --> 00:03:44,109
on flash so that was kind of the main

00:03:40,190 --> 00:03:48,410
technology used so once that was gone

00:03:44,109 --> 00:03:49,760
the shift of interactivity moved kind of

00:03:48,410 --> 00:03:53,570
from actionscript and more into

00:03:49,760 --> 00:03:56,900
javascript that same years when Ethan

00:03:53,570 --> 00:03:59,720
Marcotte published responsive web design

00:03:56,900 --> 00:04:02,390
on a list apart I realize that that

00:03:59,720 --> 00:04:05,200
wasn't like in his article he doesn't

00:04:02,390 --> 00:04:09,220
actually specifically talk about

00:04:05,200 --> 00:04:11,750
JavaScript it's mostly CSS and images

00:04:09,220 --> 00:04:14,269
but the consequences of that article

00:04:11,750 --> 00:04:16,900
when developers started looking at and

00:04:14,269 --> 00:04:19,880
designers like how are we going to make

00:04:16,900 --> 00:04:22,070
this one site work across different

00:04:19,880 --> 00:04:25,070
devices different sizes different

00:04:22,070 --> 00:04:25,300
capabilities like in reality to make

00:04:25,070 --> 00:04:27,340
that

00:04:25,300 --> 00:04:31,960
work and make that work well you do need

00:04:27,340 --> 00:04:36,039
to rely on some JavaScript you can't get

00:04:31,960 --> 00:04:40,330
it all done in CSS and towards the end

00:04:36,039 --> 00:04:43,509
of that year so in October backbone.js

00:04:40,330 --> 00:04:46,810
was first release exactly one week later

00:04:43,509 --> 00:04:49,060
angularjs was released and this is when

00:04:46,810 --> 00:04:54,490
we start seeing and the architecture

00:04:49,060 --> 00:04:58,240
pattern of s pas or single page apps so

00:04:54,490 --> 00:05:00,940
at this point we're moving a lot of some

00:04:58,240 --> 00:05:05,740
of the default native browser behavior

00:05:00,940 --> 00:05:08,740
that we rely on into JavaScript so stuff

00:05:05,740 --> 00:05:12,009
simple things like routing moving from

00:05:08,740 --> 00:05:14,469
one page to another that you know as in

00:05:12,009 --> 00:05:17,229
a single page app that's all handled in

00:05:14,469 --> 00:05:19,419
JavaScript not by the browser so all

00:05:17,229 --> 00:05:21,940
these things are requiring more and more

00:05:19,419 --> 00:05:24,520
scripts you know we could have that

00:05:21,940 --> 00:05:27,270
conversation on that the effect on

00:05:24,520 --> 00:05:30,550
performance obviously more page weight

00:05:27,270 --> 00:05:32,919
more calculations on the device it's not

00:05:30,550 --> 00:05:35,409
necessarily a great thing but I think

00:05:32,919 --> 00:05:37,690
you have to weigh like the growth in

00:05:35,409 --> 00:05:41,110
JavaScript with the actual capabilities

00:05:37,690 --> 00:05:44,349
and the things that we're relying on you

00:05:41,110 --> 00:05:47,110
know scripts are meant to be more our

00:05:44,349 --> 00:05:50,289
sites are expected to be more a plight

00:05:47,110 --> 00:05:55,389
now we have you know touch devices and

00:05:50,289 --> 00:05:56,710
phones and one time so another way to

00:05:55,389 --> 00:06:00,669
kind of demonstrate the growth of

00:05:56,710 --> 00:06:03,610
JavaScript and the last six years is the

00:06:00,669 --> 00:06:05,529
growth of NPM so if you're not familiar

00:06:03,610 --> 00:06:08,770
with NPM it's a JavaScript package

00:06:05,529 --> 00:06:11,740
manager it actually can do more than

00:06:08,770 --> 00:06:15,610
JavaScript you can keep your your CSS or

00:06:11,740 --> 00:06:19,330
publish your CSS to that so this chart

00:06:15,610 --> 00:06:22,889
just shows this is from module counts

00:06:19,330 --> 00:06:26,110
calm they keep a running total

00:06:22,889 --> 00:06:30,849
statistics on various package managers

00:06:26,110 --> 00:06:34,300
out there and how many package packages

00:06:30,849 --> 00:06:36,009
are published so you can see rubygems is

00:06:34,300 --> 00:06:39,340
kind of its just been in a straight

00:06:36,009 --> 00:06:41,980
growth pact once i started pulling

00:06:39,340 --> 00:06:45,810
data on NPM you can see that line it

00:06:41,980 --> 00:06:50,440
just accelerates and then there's also

00:06:45,810 --> 00:06:55,240
Bauer on there is anyone use Bower you

00:06:50,440 --> 00:06:57,370
know a few people i think i think the

00:06:55,240 --> 00:07:00,000
trend now is people moving more and more

00:06:57,370 --> 00:07:03,760
towards npm just as kind of a central

00:07:00,000 --> 00:07:06,280
repository for these packages but

00:07:03,760 --> 00:07:09,010
Bauer's still used quite a bit as you

00:07:06,280 --> 00:07:10,330
can see not not nearly as much and i

00:07:09,010 --> 00:07:17,080
think one thing that could be said about

00:07:10,330 --> 00:07:19,900
this is in p.m. it's super easy to

00:07:17,080 --> 00:07:24,280
publish module I mean you basically type

00:07:19,900 --> 00:07:27,070
MPN publish your module goes up and that

00:07:24,280 --> 00:07:29,710
one gets gets bigger and contrast to

00:07:27,070 --> 00:07:33,130
actually didn't include it on this graph

00:07:29,710 --> 00:07:36,669
but module counts did actually just

00:07:33,130 --> 00:07:38,979
start using them or counting Drupal

00:07:36,669 --> 00:07:45,850
modules on here and it basically it

00:07:38,979 --> 00:07:49,030
shows up here is like but I think that

00:07:45,850 --> 00:07:52,450
goes to show like the difference I don't

00:07:49,030 --> 00:07:55,150
know is anyone published the module to

00:07:52,450 --> 00:07:57,550
drupal.org you know in here a couple

00:07:55,150 --> 00:07:59,020
people it's kind of a pain in the ass

00:07:57,550 --> 00:08:02,070
right at least for your first one you

00:07:59,020 --> 00:08:03,970
have to like drupal.org has a serious

00:08:02,070 --> 00:08:06,550
vetting program if you've never

00:08:03,970 --> 00:08:09,010
published a module before and once you

00:08:06,550 --> 00:08:10,210
publish your your first module your kind

00:08:09,010 --> 00:08:13,660
of green light and you can publish

00:08:10,210 --> 00:08:16,630
whatever you want but npm is just free

00:08:13,660 --> 00:08:19,150
for all but with that said there's a lot

00:08:16,630 --> 00:08:21,400
of good tools on NPM a lot of innovative

00:08:19,150 --> 00:08:25,810
tools that really in the last few years

00:08:21,400 --> 00:08:31,930
i think made some positive changes on on

00:08:25,810 --> 00:08:35,770
how we code so what is an actual

00:08:31,930 --> 00:08:37,919
JavaScript module JavaScript modules are

00:08:35,770 --> 00:08:40,950
basically small chunks reusable code

00:08:37,919 --> 00:08:45,700
there's also and I don't want to confuse

00:08:40,950 --> 00:08:47,620
the module design pattern here module

00:08:45,700 --> 00:08:52,780
design patterns an actual pattern for

00:08:47,620 --> 00:08:54,029
how you write sorry a function or an

00:08:52,780 --> 00:08:56,890
object

00:08:54,029 --> 00:09:00,040
what I'm talking about modules today I'm

00:08:56,890 --> 00:09:05,920
talking about like a single file that

00:09:00,040 --> 00:09:10,440
exports of value so want to read this

00:09:05,920 --> 00:09:12,399
this quote from a eloquent JavaScript

00:09:10,440 --> 00:09:14,410
there are a number of reasons why

00:09:12,399 --> 00:09:16,959
authors divide their books into chapters

00:09:14,410 --> 00:09:18,850
and sections these divisions make it

00:09:16,959 --> 00:09:22,060
easier for a reader to see how the book

00:09:18,850 --> 00:09:24,040
is built sorry built up and to find

00:09:22,060 --> 00:09:26,709
specific parts that they are interested

00:09:24,040 --> 00:09:29,440
in they also help the author provide a

00:09:26,709 --> 00:09:31,930
clear focus for every section the

00:09:29,440 --> 00:09:35,220
benefits of organizing a program into

00:09:31,930 --> 00:09:37,810
several files or modules are similar so

00:09:35,220 --> 00:09:40,060
breaking your your scripts out and a

00:09:37,810 --> 00:09:47,100
small files there's a lot of

00:09:40,060 --> 00:09:50,410
organization positives there as well as

00:09:47,100 --> 00:09:53,079
like find ability and just structure

00:09:50,410 --> 00:09:58,360
wise and like reusability for those

00:09:53,079 --> 00:10:04,350
those modules so some other reasons why

00:09:58,360 --> 00:10:06,820
we would want to use JavaScript module 1

00:10:04,350 --> 00:10:10,660
just talked about this organizing code

00:10:06,820 --> 00:10:12,370
into smaller files aka modules smaller

00:10:10,660 --> 00:10:13,570
files are just they're easier to deal

00:10:12,370 --> 00:10:15,730
with you're not dealing with like

00:10:13,570 --> 00:10:17,170
thousands of lines of code and having to

00:10:15,730 --> 00:10:19,990
search through and grip through a

00:10:17,170 --> 00:10:24,300
codebase to find things as long as

00:10:19,990 --> 00:10:24,300
you're organizing your modules well

00:10:24,600 --> 00:10:34,899
actual module formats provide a way for

00:10:28,320 --> 00:10:37,149
exporting and importing values they

00:10:34,899 --> 00:10:39,250
respect the global namespace so one

00:10:37,149 --> 00:10:41,470
issue with loading a bunch of scripts on

00:10:39,250 --> 00:10:43,680
your page is if you have dependencies

00:10:41,470 --> 00:10:48,010
between one external file and another

00:10:43,680 --> 00:10:49,990
most likely the the file that you're

00:10:48,010 --> 00:10:53,620
depending on is it exposing a very

00:10:49,990 --> 00:10:55,420
variable globally for instance jquery if

00:10:53,620 --> 00:10:59,860
you load jquery on the page it adds a

00:10:55,420 --> 00:11:01,899
variable to the global scope jquery and

00:10:59,860 --> 00:11:04,540
then you reference it with other scripts

00:11:01,899 --> 00:11:06,819
and whatnot the problem with that is

00:11:04,540 --> 00:11:09,059
that you get into leg names basically

00:11:06,819 --> 00:11:11,589
visions you get a bunch of modules all

00:11:09,059 --> 00:11:14,589
going to name the same thing you could

00:11:11,589 --> 00:11:18,519
be overriding your modules global

00:11:14,589 --> 00:11:21,970
variables don't get garbage collected at

00:11:18,519 --> 00:11:26,979
least as easily as functionally scope

00:11:21,970 --> 00:11:28,449
variables so that's another thing we

00:11:26,979 --> 00:11:31,089
want to look out for we want to use

00:11:28,449 --> 00:11:33,910
modules so we don't pollute that global

00:11:31,089 --> 00:11:38,889
name space with a bunch of variable

00:11:33,910 --> 00:11:41,229
names and managing dependencies nice

00:11:38,889 --> 00:11:42,939
thing about modules they like I said

00:11:41,229 --> 00:11:45,970
they provide a way to export a value

00:11:42,939 --> 00:11:47,499
they also provide ways to import a value

00:11:45,970 --> 00:11:49,539
so you have a dependency you have one

00:11:47,499 --> 00:11:53,499
file depends on another you can import

00:11:49,539 --> 00:11:56,049
that other file and use it and we want

00:11:53,499 --> 00:11:57,910
to be able to utilize existing packages

00:11:56,049 --> 00:12:00,339
so this goes back to NPM we want to be

00:11:57,910 --> 00:12:03,459
able to say there's a library like

00:12:00,339 --> 00:12:06,970
lodash or even jquery we want to be able

00:12:03,459 --> 00:12:09,039
to just install that quickly be able to

00:12:06,970 --> 00:12:12,729
use it and kind of move on with our

00:12:09,039 --> 00:12:16,239
lives we're not worried about too much

00:12:12,729 --> 00:12:17,739
about downloading some file unzip in it

00:12:16,239 --> 00:12:24,729
putting it in the right folder and then

00:12:17,739 --> 00:12:28,989
referencing that and one thing I just

00:12:24,729 --> 00:12:32,259
want to reiterate sorry javascript

00:12:28,989 --> 00:12:34,209
modules export a value so this value can

00:12:32,259 --> 00:12:36,819
be anything can be a string it could be

00:12:34,209 --> 00:12:42,100
a number it could be a function it could

00:12:36,819 --> 00:12:44,439
be an object there's no like set like

00:12:42,100 --> 00:12:47,139
distinction of what you have to export

00:12:44,439 --> 00:12:50,019
so if you want to export just an object

00:12:47,139 --> 00:12:51,970
full of configuration you can do that

00:12:50,019 --> 00:12:55,079
you want to export a string that's like

00:12:51,970 --> 00:12:55,079
your template you can do that

00:13:00,279 --> 00:13:08,660
so when some of these goals were first

00:13:04,970 --> 00:13:11,779
kind of discussed and define to module

00:13:08,660 --> 00:13:15,559
formats sort of emerged there is a md

00:13:11,779 --> 00:13:17,809
and common Jas so AMD was kind of

00:13:15,559 --> 00:13:22,069
created more with the browser in mind it

00:13:17,809 --> 00:13:25,639
was a AMD stands for asynchronous module

00:13:22,069 --> 00:13:28,279
definition it was a way to be able to

00:13:25,639 --> 00:13:33,470
import other scripts from within the

00:13:28,279 --> 00:13:36,110
browser at runtime so basically the way

00:13:33,470 --> 00:13:38,569
of work it was a circus so once a module

00:13:36,110 --> 00:13:41,869
loaded you got a callback that would

00:13:38,569 --> 00:13:45,290
execute that function that required that

00:13:41,869 --> 00:13:48,949
module commonjs on the other hand is

00:13:45,290 --> 00:13:51,619
synchronous this is what the node

00:13:48,949 --> 00:13:55,269
environment is is based on and this is

00:13:51,619 --> 00:13:57,920
we're going to look at mostly today and

00:13:55,269 --> 00:14:02,089
then kind of taking the best of those

00:13:57,920 --> 00:14:06,799
two worlds there's actually a standard

00:14:02,089 --> 00:14:12,559
in extra spec echamos script now on ESX

00:14:06,799 --> 00:14:14,420
or ES 2015 that actually defines how

00:14:12,559 --> 00:14:16,939
module should be imported and exported

00:14:14,420 --> 00:14:20,509
and it kind of take--took the best of

00:14:16,939 --> 00:14:22,670
both worlds of AMD income and jas and

00:14:20,509 --> 00:14:25,309
brought that into a standard we'll talk

00:14:22,670 --> 00:14:29,600
a little bit about how we could use that

00:14:25,309 --> 00:14:32,149
today but for the most part we're going

00:14:29,600 --> 00:14:34,839
to focus on common jas i would say if

00:14:32,149 --> 00:14:39,199
you're if you're first getting started

00:14:34,839 --> 00:14:42,100
like modular javascript i would

00:14:39,199 --> 00:14:44,990
definitely look at es6 and start working

00:14:42,100 --> 00:14:49,490
with that syntax it's going to be the

00:14:44,990 --> 00:14:51,889
most future-proof going forward so let's

00:14:49,490 --> 00:14:54,709
look at the actual implementations here

00:14:51,889 --> 00:14:58,299
so this is AMD we have a module a a

00:14:54,709 --> 00:15:02,949
module B module a is our dependency

00:14:58,299 --> 00:15:06,110
where the syntax is basically you define

00:15:02,949 --> 00:15:08,990
some value in this case we're defining a

00:15:06,110 --> 00:15:12,110
function that's being exported and so in

00:15:08,990 --> 00:15:13,350
module be if we require module a we

00:15:12,110 --> 00:15:15,450
basically get that that

00:15:13,350 --> 00:15:17,690
function and they can use it once that

00:15:15,450 --> 00:15:22,290
function loads the function within

00:15:17,690 --> 00:15:26,000
module B will execute that's pretty much

00:15:22,290 --> 00:15:26,000
all I'm going to say about AMD right now

00:15:26,240 --> 00:15:32,940
come and jas if you've used node for

00:15:30,150 --> 00:15:36,000
anything this probably looks familiar so

00:15:32,940 --> 00:15:39,030
you have module that exports equals some

00:15:36,000 --> 00:15:41,220
value put that in a file and then when

00:15:39,030 --> 00:15:45,060
you require that file in this case

00:15:41,220 --> 00:15:48,750
module will be again just say variable

00:15:45,060 --> 00:15:51,240
module a equals require this other file

00:15:48,750 --> 00:15:54,870
so whatever module a is exporting that's

00:15:51,240 --> 00:15:57,240
what module a will be set to and module

00:15:54,870 --> 00:15:59,550
B and then we could do something

00:15:57,240 --> 00:16:05,300
pointless like alert whatever that that

00:15:59,550 --> 00:16:07,320
function is yeah that is actually super

00:16:05,300 --> 00:16:08,490
useless now that I look at it because

00:16:07,320 --> 00:16:12,600
it's actually not going to do anything

00:16:08,490 --> 00:16:15,000
but print out the actual function real

00:16:12,600 --> 00:16:18,000
talk I wrote this example super late

00:16:15,000 --> 00:16:23,070
last night very little sleep and some

00:16:18,000 --> 00:16:29,120
Irish coffee so that's that's common

00:16:23,070 --> 00:16:31,290
jazz any questions so far nope cool

00:16:29,120 --> 00:16:35,840
taking these examples what they look

00:16:31,290 --> 00:16:38,520
like in es6 so again we have a module a

00:16:35,840 --> 00:16:44,220
one thing that ESX allows you to do is

00:16:38,520 --> 00:16:46,650
export a number of different values so

00:16:44,220 --> 00:16:51,540
in this case we're exporting this

00:16:46,650 --> 00:16:55,440
constant squirt square root a function

00:16:51,540 --> 00:17:00,690
called square and a function called diag

00:16:55,440 --> 00:17:03,240
diagonal and then a module B we can

00:17:00,690 --> 00:17:06,540
actually import those individual modules

00:17:03,240 --> 00:17:09,120
out of that file so this is nice where

00:17:06,540 --> 00:17:11,280
you don't have to import an entire file

00:17:09,120 --> 00:17:15,720
you can just grab the pieces that you

00:17:11,280 --> 00:17:17,310
want out of it so there's two two

00:17:15,720 --> 00:17:19,920
different methods methods of doing that

00:17:17,310 --> 00:17:23,000
module B we're actually calling or

00:17:19,920 --> 00:17:26,730
importing Square and diagonal

00:17:23,000 --> 00:17:30,630
specifically you can also

00:17:26,730 --> 00:17:35,790
in module C or is a import wildcard

00:17:30,630 --> 00:17:37,260
asterisk as module a from module a and

00:17:35,790 --> 00:17:41,100
what that will do is that will import

00:17:37,260 --> 00:17:44,340
all of these exported values at a module

00:17:41,100 --> 00:17:46,919
a and tack them on is basically

00:17:44,340 --> 00:17:49,890
properties or methods of this module a

00:17:46,919 --> 00:17:53,340
object so you kind of see the difference

00:17:49,890 --> 00:17:56,940
here if I can highlight it in this case

00:17:53,340 --> 00:18:01,470
we're importing these individual sorry

00:17:56,940 --> 00:18:05,850
this is an exercise and motor skills

00:18:01,470 --> 00:18:09,120
right here so we're importing square and

00:18:05,850 --> 00:18:11,370
dialogue or a diagonal and we're calling

00:18:09,120 --> 00:18:15,660
those directly in this case we're

00:18:11,370 --> 00:18:19,530
importing all of them as module a so we

00:18:15,660 --> 00:18:29,669
referenced those by module a square or

00:18:19,530 --> 00:18:31,410
module a diag that'll make sense cool so

00:18:29,669 --> 00:18:34,350
there's also an alternative that this is

00:18:31,410 --> 00:18:37,049
this is closer to something like comedy

00:18:34,350 --> 00:18:40,559
is or Andy where you're exporting a

00:18:37,049 --> 00:18:44,250
single value so here say an export

00:18:40,559 --> 00:18:46,740
default function square so that default

00:18:44,250 --> 00:18:48,990
keyword is just saying this is the one

00:18:46,740 --> 00:18:51,000
thing in this file that i'm exporting if

00:18:48,990 --> 00:18:56,429
you use this you can only export one

00:18:51,000 --> 00:18:59,250
value so in module B you would say

00:18:56,429 --> 00:19:01,380
import square notice we don't have the

00:18:59,250 --> 00:19:05,610
curly braces around it or just importing

00:19:01,380 --> 00:19:08,460
that one value and then console.log so

00:19:05,610 --> 00:19:16,140
this is working just like common jas or

00:19:08,460 --> 00:19:17,940
require or sorry AMD so how do we

00:19:16,140 --> 00:19:21,809
actually use these right now even though

00:19:17,940 --> 00:19:24,059
es6 modules are standard no browsers

00:19:21,809 --> 00:19:28,470
actually support any method for like

00:19:24,059 --> 00:19:31,700
exporting / loading them I believe the

00:19:28,470 --> 00:19:36,929
latest version of Chrome has support for

00:19:31,700 --> 00:19:39,299
think importing but not exported so in

00:19:36,929 --> 00:19:43,019
order to utilize this stuff we need

00:19:39,299 --> 00:19:44,970
sort of build step either some sort of

00:19:43,019 --> 00:19:47,039
build step or some environment that

00:19:44,970 --> 00:19:50,539
natively supports them browsers don't

00:19:47,039 --> 00:19:55,320
support them right now nodejs supports

00:19:50,539 --> 00:19:57,539
common jas if you're using require js2

00:19:55,320 --> 00:19:59,669
actually import AMD modules you can do

00:19:57,539 --> 00:20:02,220
it that way but you need some sort of

00:19:59,669 --> 00:20:07,080
environment to actually use these

00:20:02,220 --> 00:20:11,580
modules so what a bundler does

00:20:07,080 --> 00:20:13,230
essentially it concatenates files so

00:20:11,580 --> 00:20:15,600
taking a bunch of files and grouping

00:20:13,230 --> 00:20:18,470
them into one file it manages

00:20:15,600 --> 00:20:21,119
dependencies so if you have a file that

00:20:18,470 --> 00:20:23,489
depends on one file depends on another

00:20:21,119 --> 00:20:26,460
file it'll make sure that those are all

00:20:23,489 --> 00:20:28,889
loaded in the same order if you ever end

00:20:26,460 --> 00:20:32,279
up you know you're working on a site you

00:20:28,889 --> 00:20:33,690
get the air like jQuery undefined that's

00:20:32,279 --> 00:20:38,609
probably because you load something

00:20:33,690 --> 00:20:41,419
loaded something out of order but in

00:20:38,609 --> 00:20:43,769
this case a bundler will kind of it'll

00:20:41,419 --> 00:20:46,080
look at that dependency tree which will

00:20:43,769 --> 00:20:50,220
look out here in a second and figure out

00:20:46,080 --> 00:20:52,619
the actual load order of things and then

00:20:50,220 --> 00:20:56,369
it runs at compile time so is it back to

00:20:52,619 --> 00:20:59,220
it needs a build step now this is

00:20:56,369 --> 00:21:02,519
opposed to like a module loader like

00:20:59,220 --> 00:21:04,739
require j/s where a loader is loading

00:21:02,519 --> 00:21:08,039
your modules directly into the browser

00:21:04,739 --> 00:21:10,259
so you don't necessarily need a compile

00:21:08,039 --> 00:21:15,659
step before you like to pull your coat

00:21:10,259 --> 00:21:20,059
or use it so this is kind of what a

00:21:15,659 --> 00:21:24,629
typical bundling process might look like

00:21:20,059 --> 00:21:27,299
so you have an entry file and a bundle

00:21:24,629 --> 00:21:29,429
so the entry file is the single file

00:21:27,299 --> 00:21:32,549
that's going to import a bunch of other

00:21:29,429 --> 00:21:35,970
dependencies the bundle is the actual

00:21:32,549 --> 00:21:38,429
output of that so you can have multiple

00:21:35,970 --> 00:21:43,710
entry files each entry file is going to

00:21:38,429 --> 00:21:47,850
produce its own bundle and then you have

00:21:43,710 --> 00:21:49,830
what's called the dependency tree so all

00:21:47,850 --> 00:21:51,970
these dependencies underneath those are

00:21:49,830 --> 00:21:56,710
all getting imported

00:21:51,970 --> 00:22:00,220
and bundled into bundle Jas so what kind

00:21:56,710 --> 00:22:02,800
of bundlers out there there's kind of

00:22:00,220 --> 00:22:06,160
three I would say two main ones and a

00:22:02,800 --> 00:22:10,510
third one kind of up-and-coming bundle

00:22:06,160 --> 00:22:14,940
er I guess you have web pack which web

00:22:10,510 --> 00:22:17,500
pack does it does the bundling it does

00:22:14,940 --> 00:22:22,450
like your development server you can

00:22:17,500 --> 00:22:25,440
bundle and like your CSS it kind of it

00:22:22,450 --> 00:22:28,450
works it does a lot more than just

00:22:25,440 --> 00:22:31,090
bundling JavaScript whereas these other

00:22:28,450 --> 00:22:34,060
two browserify and roll up their kind of

00:22:31,090 --> 00:22:37,810
very specific modules if they do one

00:22:34,060 --> 00:22:42,100
thing do it well browser fireworks by

00:22:37,810 --> 00:22:44,230
default Ofcom and jas modules and we'll

00:22:42,100 --> 00:22:49,300
we'll look at how you can use the es6

00:22:44,230 --> 00:22:52,810
modules in there as well roll up j/s

00:22:49,300 --> 00:22:58,210
very similar to browserify except that

00:22:52,810 --> 00:23:01,450
it uses es6 modules at the box and one

00:22:58,210 --> 00:23:05,920
cool thing that it'll do is a it's

00:23:01,450 --> 00:23:07,840
called tree shaking the way es6 modules

00:23:05,920 --> 00:23:10,570
are defined you can actually do static

00:23:07,840 --> 00:23:13,000
analysis on the code meaning they're

00:23:10,570 --> 00:23:14,620
like when it's compiling it can kind of

00:23:13,000 --> 00:23:17,170
look at all the code paths as its

00:23:14,620 --> 00:23:19,180
building this thing and find like dead

00:23:17,170 --> 00:23:21,700
pass where there's code that's not being

00:23:19,180 --> 00:23:26,860
used and it will eliminate that out of

00:23:21,700 --> 00:23:30,790
the bundle so they say you're guaranteed

00:23:26,860 --> 00:23:32,650
to actually get a smaller bundle size if

00:23:30,790 --> 00:23:36,400
you're using roll up as opposed to

00:23:32,650 --> 00:23:38,260
browserify we're going to look at

00:23:36,400 --> 00:23:44,470
browser 5 browserify has been around

00:23:38,260 --> 00:23:48,010
since 2011 so since NPM was released is

00:23:44,470 --> 00:23:52,450
originally built as a way to take all

00:23:48,010 --> 00:23:54,460
this code that was being written for the

00:23:52,450 --> 00:23:57,570
nodejs like the server environment and

00:23:54,460 --> 00:24:00,790
be able to use that stuff in the browser

00:23:57,570 --> 00:24:04,150
so again it runs at compile time it uses

00:24:00,790 --> 00:24:05,380
common jas it allows you to require skip

00:24:04,150 --> 00:24:08,590
scripts

00:24:05,380 --> 00:24:12,760
from NPM one thing that it does is

00:24:08,590 --> 00:24:15,190
actually replaces certain files or

00:24:12,760 --> 00:24:17,410
definitions like some of neural nodes

00:24:15,190 --> 00:24:19,500
core libraries that are meant to run in

00:24:17,410 --> 00:24:22,720
that server environment browserify

00:24:19,500 --> 00:24:25,900
replaces those with implementations that

00:24:22,720 --> 00:24:29,760
are run within the browser so there's

00:24:25,900 --> 00:24:33,690
some super helpful stuff and node like

00:24:29,760 --> 00:24:36,670
see the URL module or the path module

00:24:33,690 --> 00:24:38,650
browser if I kind of I don't know if you

00:24:36,670 --> 00:24:41,470
call it monkey passion but it replaces

00:24:38,650 --> 00:24:45,460
those in implementations with browser

00:24:41,470 --> 00:24:47,500
versions and has a really nice plug-in

00:24:45,460 --> 00:24:49,510
API so you can do not only can you

00:24:47,500 --> 00:24:53,890
bundle these files together you can

00:24:49,510 --> 00:24:57,040
actually transpile the files and we'll

00:24:53,890 --> 00:25:01,140
we'll look at some examples of what that

00:24:57,040 --> 00:25:03,640
is so how to get started using it

00:25:01,140 --> 00:25:08,650
there's have three three main ways to

00:25:03,640 --> 00:25:11,620
use it you can install it globally so

00:25:08,650 --> 00:25:14,620
NPM install browserify the desk G says

00:25:11,620 --> 00:25:17,470
globally so install this on my whole

00:25:14,620 --> 00:25:22,420
system so that I can then in my command

00:25:17,470 --> 00:25:25,470
line type browserify and then the syntax

00:25:22,420 --> 00:25:29,680
is whatever your entry file name is and

00:25:25,470 --> 00:25:32,380
you just pipe that or send it to the

00:25:29,680 --> 00:25:34,510
bundle j/s file so you have your input

00:25:32,380 --> 00:25:37,170
and your output and that's it you're

00:25:34,510 --> 00:25:42,910
your files your entry files and all its

00:25:37,170 --> 00:25:44,920
dependencies have been bumped another

00:25:42,910 --> 00:25:46,990
alternative version of that is to

00:25:44,920 --> 00:25:49,240
install it locally so whatever project

00:25:46,990 --> 00:25:53,380
you're on wherever you're package.json

00:25:49,240 --> 00:25:56,310
file is you can install browserify

00:25:53,380 --> 00:25:59,260
locally and run it from there that way

00:25:56,310 --> 00:26:01,120
you're not installing this this package

00:25:59,260 --> 00:26:03,730
whatever version of browserify you're

00:26:01,120 --> 00:26:05,560
using globally on your machine you can

00:26:03,730 --> 00:26:09,310
have a specific version for your project

00:26:05,560 --> 00:26:11,890
and the way you would run that is so you

00:26:09,310 --> 00:26:13,960
install it just the same way minus the

00:26:11,890 --> 00:26:18,340
global flag so that installs it locally

00:26:13,960 --> 00:26:19,240
then in package.json yeah the scripts

00:26:18,340 --> 00:26:22,450
property

00:26:19,240 --> 00:26:24,190
and you give that that's whatever script

00:26:22,450 --> 00:26:27,880
a name here we're just calling it build

00:26:24,190 --> 00:26:33,880
you can call it whatever call it boaty

00:26:27,880 --> 00:26:37,300
mcboatface and then this is the exact

00:26:33,880 --> 00:26:39,190
same command that we ran here so instead

00:26:37,300 --> 00:26:41,650
of running it on the command line we're

00:26:39,190 --> 00:26:44,860
putting it in this file this is handy if

00:26:41,650 --> 00:26:47,170
you have as you can as your you're about

00:26:44,860 --> 00:26:50,559
to see like these commands as you're

00:26:47,170 --> 00:26:53,230
adding more features more transforms can

00:26:50,559 --> 00:26:54,130
get like really long and pre verbose so

00:26:53,230 --> 00:26:56,380
you don't want to have to type that

00:26:54,130 --> 00:26:59,140
every time this is a way just to kind of

00:26:56,380 --> 00:27:02,770
take whatever command that you would

00:26:59,140 --> 00:27:05,290
normally run and run it with NPM run and

00:27:02,770 --> 00:27:10,330
then whatever we call it so mpm run

00:27:05,290 --> 00:27:14,950
build and then third way is using the

00:27:10,330 --> 00:27:19,900
actual API so this is a lot more verbose

00:27:14,950 --> 00:27:21,910
than the other two but when you get a

00:27:19,900 --> 00:27:24,460
fairly complicated build and a lot of

00:27:21,910 --> 00:27:28,559
things going on managing a lot of

00:27:24,460 --> 00:27:32,350
different files for say a Drupal project

00:27:28,559 --> 00:27:33,910
it's nice to be able to like have this

00:27:32,350 --> 00:27:38,350
all broken out and you can add some

00:27:33,910 --> 00:27:42,610
logic in to how your build will run so

00:27:38,350 --> 00:27:45,460
this is essentially doing the exact same

00:27:42,610 --> 00:27:49,240
thing this is you can see there's a lot

00:27:45,460 --> 00:27:52,240
more steps in it but we'll we'll see in

00:27:49,240 --> 00:27:56,590
an example why that's beneficial so here

00:27:52,240 --> 00:27:59,080
we're requiring FS which is a file short

00:27:56,590 --> 00:28:01,330
root filesystem it's just a node core

00:27:59,080 --> 00:28:05,160
package this is what allows us to write

00:28:01,330 --> 00:28:07,660
files to the disk require browserify

00:28:05,160 --> 00:28:11,230
create an instance of it we call it be

00:28:07,660 --> 00:28:14,320
and then we do things to that instant so

00:28:11,230 --> 00:28:18,250
we add an entry file and then we bundle

00:28:14,320 --> 00:28:21,130
it bundling it doesn't actually send it

00:28:18,250 --> 00:28:24,429
anywhere so we actually have to then

00:28:21,130 --> 00:28:27,790
pipe that to our actual output the

00:28:24,429 --> 00:28:31,740
bundle file so FS create right stream

00:28:27,790 --> 00:28:34,380
that saves a file to the disk

00:28:31,740 --> 00:28:38,100
if you wanted to not save it to the disk

00:28:34,380 --> 00:28:40,320
and run it to standard out and just show

00:28:38,100 --> 00:28:45,809
it on your screen you could do that if

00:28:40,320 --> 00:28:47,550
that's what's fun for you and here we're

00:28:45,809 --> 00:28:52,679
running very similar we have a build

00:28:47,550 --> 00:28:55,200
script and in this case we're running

00:28:52,679 --> 00:28:57,840
this build file so not a specific

00:28:55,200 --> 00:29:00,120
command but that file and the command

00:28:57,840 --> 00:29:03,510
for that is just knowed build we could

00:29:00,120 --> 00:29:07,340
just type node billed directly under our

00:29:03,510 --> 00:29:07,340
terminal and our that would run as well

00:29:10,640 --> 00:29:17,520
so let's look at some different use

00:29:13,350 --> 00:29:20,610
cases here so one thing browser if I

00:29:17,520 --> 00:29:22,470
allows you to do is create some custom

00:29:20,610 --> 00:29:26,490
builds of things if you've ever used

00:29:22,470 --> 00:29:29,490
modernizer you know if you everyone know

00:29:26,490 --> 00:29:30,780
what moderniser is does anybody not know

00:29:29,490 --> 00:29:35,309
what moderniser is and want me to

00:29:30,780 --> 00:29:39,480
explain it you modernizer allows you to

00:29:35,309 --> 00:29:42,929
do browser detection so say you have a

00:29:39,480 --> 00:29:46,620
feature that you want to use like CSS

00:29:42,929 --> 00:29:51,870
animations and whatever design that

00:29:46,620 --> 00:29:54,750
you've created being a designer whatever

00:29:51,870 --> 00:29:58,230
you've created say it relies on that

00:29:54,750 --> 00:29:59,370
animation but you're you want to make

00:29:58,230 --> 00:30:01,650
sure that browsers that don't support

00:29:59,370 --> 00:30:06,120
animations can actually run it to that

00:30:01,650 --> 00:30:10,280
you provide a fallback for that so

00:30:06,120 --> 00:30:12,809
modernizer allows you to do those checks

00:30:10,280 --> 00:30:17,070
there's a port of moderniser called

00:30:12,809 --> 00:30:20,910
browser and neither the names to get

00:30:17,070 --> 00:30:23,670
more ridiculous than this and what's

00:30:20,910 --> 00:30:25,559
cool about this is rather than going to

00:30:23,670 --> 00:30:27,870
the moderniser website checking all the

00:30:25,559 --> 00:30:29,280
boxes of all the builds like the

00:30:27,870 --> 00:30:31,530
different tests that you want to run and

00:30:29,280 --> 00:30:33,090
every time you want to add a new test

00:30:31,530 --> 00:30:37,230
you have to go back there and check more

00:30:33,090 --> 00:30:39,929
boxes this allows you directly in your

00:30:37,230 --> 00:30:41,610
script just to require the actual test

00:30:39,929 --> 00:30:43,470
that you want so we want to test for

00:30:41,610 --> 00:30:44,610
animations we want to trust test for

00:30:43,470 --> 00:30:49,230
transforms

00:30:44,610 --> 00:30:52,140
and CSS columns once we require those

00:30:49,230 --> 00:30:56,850
and we require browser niser that will

00:30:52,140 --> 00:31:00,390
actually run the checks once the the

00:30:56,850 --> 00:31:05,360
brow browser loads the script and it'll

00:31:00,390 --> 00:31:08,760
add those CSS classes to the body tag in

00:31:05,360 --> 00:31:13,049
this case the the lower example where we

00:31:08,760 --> 00:31:15,000
actually set that require to modernize

00:31:13,049 --> 00:31:18,240
your variable then we have access to

00:31:15,000 --> 00:31:19,860
that so we can do so many other like you

00:31:18,240 --> 00:31:24,150
go add some of the other features of

00:31:19,860 --> 00:31:27,929
modernizer for instance if if there are

00:31:24,150 --> 00:31:36,260
CSS animations load this other thing or

00:31:27,929 --> 00:31:36,260
do this this thing so that's pretty cool

00:31:39,290 --> 00:31:47,700
requiring sub modules so if you're not

00:31:42,720 --> 00:31:52,049
familiar with the load ash lodash is

00:31:47,700 --> 00:31:57,690
kind of like a utility belt for

00:31:52,049 --> 00:32:00,690
javascript it basically creates a very

00:31:57,690 --> 00:32:03,000
uniform way works cross browser for

00:32:00,690 --> 00:32:05,610
doing simple things that a browser

00:32:03,000 --> 00:32:09,990
should be able to do anyway like array

00:32:05,610 --> 00:32:13,650
maps filters and reduce it'll it'll do

00:32:09,990 --> 00:32:17,730
that in a consistent way so this is a

00:32:13,650 --> 00:32:22,380
tool used quite a bit in this example we

00:32:17,730 --> 00:32:26,190
have transformers j/s it's exporting an

00:32:22,380 --> 00:32:31,080
array of transformer objects and then in

00:32:26,190 --> 00:32:33,690
autobots j/s we are requiring lodash so

00:32:31,080 --> 00:32:36,960
that underscore just like the dollar

00:32:33,690 --> 00:32:41,549
sign is kind of a simple for jQuery that

00:32:36,960 --> 00:32:44,840
underscore is often used for low dash or

00:32:41,549 --> 00:32:47,040
underscore then we're importing

00:32:44,840 --> 00:32:48,960
transformers from this other file so

00:32:47,040 --> 00:32:52,800
we're just importing that array of

00:32:48,960 --> 00:32:56,910
transformer objects and then creating

00:32:52,800 --> 00:32:58,300
new a new array called autobots and

00:32:56,910 --> 00:33:02,140
we're filtering only the

00:32:58,300 --> 00:33:05,370
transformers that are Autobots and what

00:33:02,140 --> 00:33:09,940
we get is that Autobots that that single

00:33:05,370 --> 00:33:13,150
array fairly straightforward stuff as

00:33:09,940 --> 00:33:16,030
far as filtering race goes but the

00:33:13,150 --> 00:33:19,480
important thing to note here is we are

00:33:16,030 --> 00:33:24,610
using this entire library we're loading

00:33:19,480 --> 00:33:27,100
all of olive lodash just to do a simple

00:33:24,610 --> 00:33:32,260
filter something that most browsers can

00:33:27,100 --> 00:33:34,150
do without any extra library so that's

00:33:32,260 --> 00:33:37,120
not very efficient an alternative to

00:33:34,150 --> 00:33:41,980
that is we can actually reach into that

00:33:37,120 --> 00:33:44,470
lodash framework or library and require

00:33:41,980 --> 00:33:47,320
that specific function and that's going

00:33:44,470 --> 00:33:49,900
to only pull out like whatever whatever

00:33:47,320 --> 00:33:53,490
filter depends on out of low dash and

00:33:49,900 --> 00:33:56,350
just load that so we get a smaller build

00:33:53,490 --> 00:33:57,730
basically we're just rather than

00:33:56,350 --> 00:34:00,340
requiring the whole library we're

00:33:57,730 --> 00:34:08,169
setting it to variable of underscore

00:34:00,340 --> 00:34:15,190
filter yeah that does that make sense to

00:34:08,169 --> 00:34:17,350
everybody cool all right dealing with

00:34:15,190 --> 00:34:19,360
global dependencies I mentioned we don't

00:34:17,350 --> 00:34:24,370
want to want to respect the global

00:34:19,360 --> 00:34:27,520
namespace sometimes you know we just

00:34:24,370 --> 00:34:30,280
can't get around that we need some

00:34:27,520 --> 00:34:32,350
library that's been loaded globally in

00:34:30,280 --> 00:34:35,200
the case we're working on Drupal site

00:34:32,350 --> 00:34:40,210
and especially if it's Drupal 7 it's

00:34:35,200 --> 00:34:42,910
loading jquery globally in this case we

00:34:40,210 --> 00:34:46,320
want to require that just so we're being

00:34:42,910 --> 00:34:49,929
consistent but rather than if we do this

00:34:46,320 --> 00:34:52,030
it's going to also include jQuery in our

00:34:49,929 --> 00:34:53,620
bundle but we don't need to do that it's

00:34:52,030 --> 00:34:55,660
already loaded globally we don't want to

00:34:53,620 --> 00:34:59,680
load all that code again we already have

00:34:55,660 --> 00:35:02,970
it so what we can do is use browserify

00:34:59,680 --> 00:35:06,340
shim browserify xem does a few things

00:35:02,970 --> 00:35:09,130
one of those things is allows you to

00:35:06,340 --> 00:35:10,150
require things that have actually

00:35:09,130 --> 00:35:13,990
already been loaded

00:35:10,150 --> 00:35:16,359
so how we use that is in the

00:35:13,990 --> 00:35:19,480
package.json we tell browserify we're

00:35:16,359 --> 00:35:24,099
using a transform transform is called

00:35:19,480 --> 00:35:25,930
browserify shim and then that accesses

00:35:24,099 --> 00:35:29,529
its own variable within package.json

00:35:25,930 --> 00:35:32,680
this is browserify gym every time we

00:35:29,529 --> 00:35:34,990
require jquery don't actually load that

00:35:32,680 --> 00:35:38,230
up just reference the global jquery

00:35:34,990 --> 00:35:40,960
that's that's already there this also

00:35:38,230 --> 00:35:45,460
works you know Drupal is going to load

00:35:40,960 --> 00:35:48,250
like in Drupal 7 you have Drupal with

00:35:45,460 --> 00:35:49,990
capital D that library you can load it

00:35:48,250 --> 00:35:52,990
in this way so you can require it and

00:35:49,990 --> 00:35:55,990
access that same so that way you have

00:35:52,990 --> 00:35:58,660
access to Drupal dot settings Drupal 8

00:35:55,990 --> 00:36:03,099
that's actually its own global variable

00:35:58,660 --> 00:36:05,289
called Drupal Drupal settings so you can

00:36:03,099 --> 00:36:08,920
access it that way and not include it in

00:36:05,289 --> 00:36:11,529
your Butler so looking at a couple more

00:36:08,920 --> 00:36:15,039
transforms so our dependencies don't

00:36:11,529 --> 00:36:17,500
have to be JavaScript this is the same

00:36:15,039 --> 00:36:22,750
tree we're looking at we have dependency

00:36:17,500 --> 00:36:26,200
ABC and D those don't necessarily have

00:36:22,750 --> 00:36:27,940
to be JavaScript files in this case we

00:36:26,200 --> 00:36:32,710
have some ESX files just using a

00:36:27,940 --> 00:36:35,349
different syntax we also have header

00:36:32,710 --> 00:36:38,940
dunge so if you're not familiar with

00:36:35,349 --> 00:36:41,920
nuns nun jux is a templating language

00:36:38,940 --> 00:36:45,930
almost identical to twig in terms of the

00:36:41,920 --> 00:36:48,190
syntax a little bit different API but

00:36:45,930 --> 00:36:49,569
for for most people that are writing

00:36:48,190 --> 00:36:53,410
templates it's going to work just the

00:36:49,569 --> 00:36:57,849
same and it's it's supported pretty well

00:36:53,410 --> 00:37:01,270
it's a it's a project from Mozilla and

00:36:57,849 --> 00:37:04,029
in this this other case we have a yamo

00:37:01,270 --> 00:37:05,650
file so breakpoints yamo we have break

00:37:04,029 --> 00:37:08,410
points that we want to write in a yellow

00:37:05,650 --> 00:37:11,559
file and maybe access that in our CSS

00:37:08,410 --> 00:37:14,589
and our JavaScript so these files they

00:37:11,559 --> 00:37:17,589
don't have to be JavaScript files

00:37:14,589 --> 00:37:19,510
necessarily and what browserify will do

00:37:17,589 --> 00:37:22,270
along with some transforms actually take

00:37:19,510 --> 00:37:22,710
all that junk and convert it down into a

00:37:22,270 --> 00:37:26,849
jump

00:37:22,710 --> 00:37:33,030
file so this is probably my favorite of

00:37:26,849 --> 00:37:37,260
the browserify terms none justify so in

00:37:33,030 --> 00:37:41,280
this example we have robots nuns and you

00:37:37,260 --> 00:37:45,060
can see this looks just like twig so for

00:37:41,280 --> 00:37:47,580
robot in robots we want to print out

00:37:45,060 --> 00:37:49,830
this markup and print out these

00:37:47,580 --> 00:37:55,890
variables so robot named that teamed

00:37:49,830 --> 00:37:59,040
form so in robots jas again we're

00:37:55,890 --> 00:38:03,570
requiring that same transformers file an

00:37:59,040 --> 00:38:05,400
array of objects and here's what what's

00:38:03,570 --> 00:38:08,010
cool about none justify allows you to

00:38:05,400 --> 00:38:10,940
actually require a template file

00:38:08,010 --> 00:38:13,140
directly so we have this this template

00:38:10,940 --> 00:38:15,710
we're requiring it we've got all our

00:38:13,140 --> 00:38:19,619
markup kind of segregated into its own

00:38:15,710 --> 00:38:24,780
template file and JavaScript we just

00:38:19,619 --> 00:38:27,470
require that file and pass it really the

00:38:24,780 --> 00:38:31,230
only important part here is the robots

00:38:27,470 --> 00:38:33,210
TPL dot render you know in this example

00:38:31,230 --> 00:38:35,480
we're just throwing it on the body of

00:38:33,210 --> 00:38:40,320
the page you'd probably never do that

00:38:35,480 --> 00:38:42,930
but we're loading that we're telling it

00:38:40,320 --> 00:38:45,500
that robots ankles transformers that

00:38:42,930 --> 00:38:48,359
other file that we just required and

00:38:45,500 --> 00:38:50,790
this is what we would end up with so

00:38:48,359 --> 00:38:52,859
just taking those values from those

00:38:50,790 --> 00:38:56,040
objects in the array and putting it in

00:38:52,859 --> 00:39:00,270
your template this is really nice if

00:38:56,040 --> 00:39:03,420
you're doing maybe a complex navigation

00:39:00,270 --> 00:39:07,260
like a mega drop down something like

00:39:03,420 --> 00:39:11,310
that anything dynamically light or

00:39:07,260 --> 00:39:13,020
loading maybe a JSON file and you want

00:39:11,310 --> 00:39:15,839
to take all those values and actually

00:39:13,020 --> 00:39:18,570
input it or output it as markup on the

00:39:15,839 --> 00:39:21,480
page you don't have to you know screw

00:39:18,570 --> 00:39:25,260
around with like defining all these

00:39:21,480 --> 00:39:27,810
different jquery elements and a pending

00:39:25,260 --> 00:39:29,640
and prepending and before and after and

00:39:27,810 --> 00:39:30,720
kind of jumbled in together a menu or

00:39:29,640 --> 00:39:33,560
whatever that

00:39:30,720 --> 00:39:38,430
a kind of it keeps it clean and it's

00:39:33,560 --> 00:39:43,859
super easy to use so real quick how you

00:39:38,430 --> 00:39:45,060
apply transforms we looked at so I'm

00:39:43,859 --> 00:39:49,590
just checking to see how we're doing on

00:39:45,060 --> 00:39:51,540
time so we kind of looked at this

00:39:49,590 --> 00:39:54,510
already you can apply transform through

00:39:51,540 --> 00:39:57,840
package.json super easy you know the

00:39:54,510 --> 00:39:59,849
browserify property that has a transform

00:39:57,840 --> 00:40:01,770
property which is just an array of all

00:39:59,849 --> 00:40:10,740
the different transforms that you want

00:40:01,770 --> 00:40:12,300
to add the browser variable this is this

00:40:10,740 --> 00:40:16,340
is something that browser file use

00:40:12,300 --> 00:40:21,060
anytime you require a specific file

00:40:16,340 --> 00:40:25,410
it'll map that file to whatever you have

00:40:21,060 --> 00:40:27,060
here so in this case for nunchucks we

00:40:25,410 --> 00:40:29,460
want to use the slim version of

00:40:27,060 --> 00:40:32,849
nunchucks when we're actually building

00:40:29,460 --> 00:40:35,520
our bundle that's going to get loaded

00:40:32,849 --> 00:40:39,480
into the browser or the our actual

00:40:35,520 --> 00:40:41,849
production code otherwise if you just

00:40:39,480 --> 00:40:43,920
require this straight nun jux it's going

00:40:41,849 --> 00:40:46,260
to load all the compile code what

00:40:43,920 --> 00:40:49,349
nunchucks if I does is pre compiles all

00:40:46,260 --> 00:40:51,240
your templates into functions that are

00:40:49,349 --> 00:40:53,609
much more efficient than like having to

00:40:51,240 --> 00:40:55,290
actually you know your page loads up on

00:40:53,609 --> 00:40:57,480
the client they're on their phone and

00:40:55,290 --> 00:41:01,400
you're doing all this like regex tough

00:40:57,480 --> 00:41:06,530
to figure out how to compile a template

00:41:01,400 --> 00:41:09,780
so that's what the browser property is

00:41:06,530 --> 00:41:13,020
you can apply it through the CLI so if

00:41:09,780 --> 00:41:15,599
this is the way you're going just the

00:41:13,020 --> 00:41:20,460
the T flag and whatever transform you're

00:41:15,599 --> 00:41:23,070
using and then actually applying it in

00:41:20,460 --> 00:41:27,060
the in the API so this is that same

00:41:23,070 --> 00:41:30,660
example that we showed earlier so after

00:41:27,060 --> 00:41:33,780
we add the entry file we're adding the

00:41:30,660 --> 00:41:37,160
transform this case not justify and then

00:41:33,780 --> 00:41:39,750
we're bundling it and writing the file

00:41:37,160 --> 00:41:42,420
so doing transforms pretty

00:41:39,750 --> 00:41:46,660
straightforward

00:41:42,420 --> 00:41:48,520
one really big transform is Babel if I

00:41:46,660 --> 00:41:50,950
so if you're not familiar with Babel

00:41:48,520 --> 00:41:53,940
it's a transpiler so it takes the new

00:41:50,950 --> 00:41:59,520
es6 syntax that not all browsers support

00:41:53,940 --> 00:42:04,300
and like trance piles that down to es5

00:41:59,520 --> 00:42:07,900
syntax that you know like IE 10 11 i

00:42:04,300 --> 00:42:09,970
think you can even go back possibly 28 I

00:42:07,900 --> 00:42:14,170
don't think so you definitely go back to

00:42:09,970 --> 00:42:18,160
nine but it takes it's kind of like a

00:42:14,170 --> 00:42:20,650
post CSS processor you can write get

00:42:18,160 --> 00:42:23,320
into new syntax and this will process

00:42:20,650 --> 00:42:26,230
that file down to the old syntax so

00:42:23,320 --> 00:42:28,450
using this then we can actually rather

00:42:26,230 --> 00:42:32,910
than require things using common j/s we

00:42:28,450 --> 00:42:39,700
can require using or import using the

00:42:32,910 --> 00:42:41,860
es6 syntax so Babla faiz is the name of

00:42:39,700 --> 00:42:44,020
the transform and one thing you have to

00:42:41,860 --> 00:42:46,570
do with Babel is actually tell it the

00:42:44,020 --> 00:42:50,320
presets like what are the things you're

00:42:46,570 --> 00:42:52,000
really concerned about trans filing so

00:42:50,320 --> 00:42:55,150
these are pretty common we have babel

00:42:52,000 --> 00:42:58,540
preset es2015 that one's probably the

00:42:55,150 --> 00:43:02,080
most common and then we have babel

00:42:58,540 --> 00:43:04,840
preset react which does like allows you

00:43:02,080 --> 00:43:13,300
to use jsx if you're creating any react

00:43:04,840 --> 00:43:15,730
applications so a couple more more

00:43:13,300 --> 00:43:17,350
things and then I'll get into think I'm

00:43:15,730 --> 00:43:19,210
running out of time but I'll get into an

00:43:17,350 --> 00:43:23,320
example of actually implementing this in

00:43:19,210 --> 00:43:27,220
Drupal so code splitting in this case we

00:43:23,320 --> 00:43:33,580
have to to entry files we have x KS and

00:43:27,220 --> 00:43:39,280
yjs those so x requires z and w y

00:43:33,580 --> 00:43:41,500
requires just z so in a normal case if

00:43:39,280 --> 00:43:44,230
you create these these two bundles you

00:43:41,500 --> 00:43:47,050
take your to entry files even if they

00:43:44,230 --> 00:43:48,670
require the same file they're both going

00:43:47,050 --> 00:43:53,000
to bundle them so you have that same

00:43:48,670 --> 00:43:56,180
library in both files

00:43:53,000 --> 00:43:58,400
which isn't very efficient factor bundle

00:43:56,180 --> 00:44:01,910
is a plug-in that will allow you to

00:43:58,400 --> 00:44:04,900
actually take out the common files and

00:44:01,910 --> 00:44:07,310
break them out into their own bundle so

00:44:04,900 --> 00:44:11,290
just to visualize this we have X

00:44:07,310 --> 00:44:14,680
requires Z and W why I just requires Z

00:44:11,290 --> 00:44:20,150
when we bundle those we end up with X

00:44:14,680 --> 00:44:23,990
that has x + W in it we have why that

00:44:20,150 --> 00:44:27,860
just includes y and then Z because both

00:44:23,990 --> 00:44:29,900
of those are both of those require Z it

00:44:27,860 --> 00:44:32,480
just kind of sucks that out into its own

00:44:29,900 --> 00:44:34,880
kind of common library file that then

00:44:32,480 --> 00:44:38,930
you can load beforehand and both of

00:44:34,880 --> 00:44:45,620
those x and y will have access to it

00:44:38,930 --> 00:44:49,550
does that make sense cool this is how it

00:44:45,620 --> 00:44:51,860
works this is using the API and so we

00:44:49,550 --> 00:44:57,530
have these source files which is an

00:44:51,860 --> 00:45:01,160
array of our entry points we import

00:44:57,530 --> 00:45:04,670
those and then we run it through the

00:45:01,160 --> 00:45:06,440
factor bundle plug-in so we tell it what

00:45:04,670 --> 00:45:08,540
are the output so what are the bundles

00:45:06,440 --> 00:45:10,910
that our entry points need to end up in

00:45:08,540 --> 00:45:13,220
after we do that which left over or

00:45:10,910 --> 00:45:18,200
common files and we write those to the

00:45:13,220 --> 00:45:19,640
disk so it's a little bit weird to get

00:45:18,200 --> 00:45:24,650
set up but once you have a running it

00:45:19,640 --> 00:45:27,680
works super well and then the last thing

00:45:24,650 --> 00:45:30,410
I want to talk about is watch fi so

00:45:27,680 --> 00:45:33,500
browserify has its own watcher so if

00:45:30,410 --> 00:45:36,110
you're used to using gulp or grunt they

00:45:33,500 --> 00:45:39,130
have their ways of watching files so

00:45:36,110 --> 00:45:41,720
this file changes run these commands

00:45:39,130 --> 00:45:45,050
watch Phi has its own you don't actually

00:45:41,720 --> 00:45:47,270
have to specify which files to watch

00:45:45,050 --> 00:45:51,710
because it just knows the dependency

00:45:47,270 --> 00:45:53,800
tree based on your entry points and what

00:45:51,710 --> 00:45:56,210
it does is the first time it compiles

00:45:53,800 --> 00:45:58,940
the whole thing all your dependencies

00:45:56,210 --> 00:46:01,000
and then it keeps kind of a cache of all

00:45:58,940 --> 00:46:04,610
your different modules that have been

00:46:01,000 --> 00:46:06,230
required in there your whole module or

00:46:04,610 --> 00:46:08,119
dependency tree

00:46:06,230 --> 00:46:11,840
and then it watches those individual

00:46:08,119 --> 00:46:15,440
files so those change it only has to

00:46:11,840 --> 00:46:18,800
compile like that one file and the

00:46:15,440 --> 00:46:23,240
things that depend on it so it's it's

00:46:18,800 --> 00:46:26,180
super fast like and a larger codebase go

00:46:23,240 --> 00:46:29,330
from maybe four seconds for like the

00:46:26,180 --> 00:46:30,980
initial compile down to like just change

00:46:29,330 --> 00:46:34,010
in a single dependency and it's more

00:46:30,980 --> 00:46:38,780
like 30 to 50 milliseconds it's super

00:46:34,010 --> 00:46:41,480
fast so watch if I definitely if you're

00:46:38,780 --> 00:46:43,670
if you're using run or go figure out how

00:46:41,480 --> 00:46:47,000
to get watch if I integrated into that

00:46:43,670 --> 00:46:51,740
rather than their standard Watchers and

00:46:47,000 --> 00:46:53,810
thank me later so how do we actually use

00:46:51,740 --> 00:46:59,780
this with Drupal putting it all together

00:46:53,810 --> 00:47:02,330
so I've got this is just laying out what

00:46:59,780 --> 00:47:06,830
we're trying to do so we have our our

00:47:02,330 --> 00:47:08,450
theme we have our various modules all of

00:47:06,830 --> 00:47:13,520
those probably have some JavaScript of

00:47:08,450 --> 00:47:15,920
their own so here we have we're just

00:47:13,520 --> 00:47:18,940
calling it my theme as a theme and then

00:47:15,920 --> 00:47:23,330
my theme is because I'm super creative

00:47:18,940 --> 00:47:25,670
with the naming so we have our source

00:47:23,330 --> 00:47:31,310
files those get built out and the build

00:47:25,670 --> 00:47:34,640
files and then same with the module it's

00:47:31,310 --> 00:47:37,750
got its source j/s and it's bill j/s and

00:47:34,640 --> 00:47:40,369
using factor bundle we want to any

00:47:37,750 --> 00:47:42,980
anything whether it's in the theme or

00:47:40,369 --> 00:47:46,010
one of our modules for our project we

00:47:42,980 --> 00:47:49,280
want to pull those out into a single

00:47:46,010 --> 00:47:52,970
common library that we can depend on

00:47:49,280 --> 00:47:57,050
using Drupal so that's what we're going

00:47:52,970 --> 00:48:00,650
for this is how we're going to run it so

00:47:57,050 --> 00:48:02,090
we have in our package JSON we have two

00:48:00,650 --> 00:48:05,750
scripts that we've defined we have

00:48:02,090 --> 00:48:08,060
bundle and that's going to run this file

00:48:05,750 --> 00:48:10,760
and the resources scripts directory

00:48:08,060 --> 00:48:12,380
called bundle and then we have bundle

00:48:10,760 --> 00:48:14,660
watch which is going to do the exact

00:48:12,380 --> 00:48:16,940
same thing but turn on watch fi so

00:48:14,660 --> 00:48:18,890
that'll be like our development

00:48:16,940 --> 00:48:22,400
test that will keep running watching our

00:48:18,890 --> 00:48:29,869
files how we use that so npm run bundle

00:48:22,400 --> 00:48:32,480
or mpm run bundle watch now this file as

00:48:29,869 --> 00:48:34,310
i said earlier this is why i like to use

00:48:32,480 --> 00:48:36,230
the API because these things can get

00:48:34,310 --> 00:48:38,930
pretty complicated we're dealing with

00:48:36,230 --> 00:48:41,869
Mike files that can be in different

00:48:38,930 --> 00:48:46,190
directories depending on how your Drupal

00:48:41,869 --> 00:48:47,270
sites set up so this file is a little

00:48:46,190 --> 00:48:48,740
bit long I'm going to actually walk

00:48:47,270 --> 00:48:50,780
through these different sections we have

00:48:48,740 --> 00:48:53,510
our MP and modules and have different

00:48:50,780 --> 00:48:55,960
things that we're loading our V is the

00:48:53,510 --> 00:48:59,089
thing that allows us to capture

00:48:55,960 --> 00:49:01,069
arguments in our node scripts so this is

00:48:59,089 --> 00:49:04,819
how we're going to flag it a particular

00:49:01,069 --> 00:49:08,359
script to watch with watch if I rather

00:49:04,819 --> 00:49:10,250
than just compile once we have a file

00:49:08,359 --> 00:49:12,440
system we already talked about that we

00:49:10,250 --> 00:49:15,290
have globbing so this is what's going to

00:49:12,440 --> 00:49:16,760
allow us to say I want all the

00:49:15,290 --> 00:49:19,010
JavaScript files that are in these

00:49:16,760 --> 00:49:21,380
particular folders make those our entry

00:49:19,010 --> 00:49:26,690
points so you don't have to always say

00:49:21,380 --> 00:49:28,130
like I've added a new theme javascript

00:49:26,690 --> 00:49:30,170
file it's just going to look for any

00:49:28,130 --> 00:49:35,420
scripts within a certain directory and

00:49:30,170 --> 00:49:37,520
automatically compile those a path it's

00:49:35,420 --> 00:49:41,079
just a node module for figuring out

00:49:37,520 --> 00:49:47,030
relative and absolute paths of files

00:49:41,079 --> 00:49:51,260
Mick dirt which is make like a recursive

00:49:47,030 --> 00:49:56,300
directory essentially browserify factor

00:49:51,260 --> 00:49:59,660
bundle and then watch if I that we have

00:49:56,300 --> 00:50:01,579
like our settings in a real world use

00:49:59,660 --> 00:50:04,369
case I'd probably break these out into a

00:50:01,579 --> 00:50:06,650
separate file like per project so I'm

00:50:04,369 --> 00:50:09,410
not including these like specific

00:50:06,650 --> 00:50:13,700
project details right in my build file

00:50:09,410 --> 00:50:16,790
but for this case here they are so we

00:50:13,700 --> 00:50:19,849
have our source files so public HTML is

00:50:16,790 --> 00:50:24,829
our Drupal directory this is a Drupal 8

00:50:19,849 --> 00:50:28,000
site so this is just globbing for either

00:50:24,829 --> 00:50:29,770
of these sub folder so modules or themes

00:50:28,000 --> 00:50:31,780
inside those we

00:50:29,770 --> 00:50:34,180
I do look at just custom things we're

00:50:31,780 --> 00:50:36,160
only dealing with our specific projects

00:50:34,180 --> 00:50:43,060
we're not trying to compile like

00:50:36,160 --> 00:50:45,790
contribs just saying whatever whatever

00:50:43,060 --> 00:50:48,850
custom module or theme if there's a

00:50:45,790 --> 00:50:50,950
source JS file in there that's what we

00:50:48,850 --> 00:50:55,600
want is our entry point and we have a

00:50:50,950 --> 00:50:57,730
common directory so public HTML modules

00:50:55,600 --> 00:51:01,120
custom this is where we want to put our

00:50:57,730 --> 00:51:11,230
common file that factor bundles going to

00:51:01,120 --> 00:51:13,630
spit out oh sorry so common path where

00:51:11,230 --> 00:51:17,500
the path is we're actually just joining

00:51:13,630 --> 00:51:19,630
the filename and the path and this this

00:51:17,500 --> 00:51:23,080
is just a sort of a helper function to

00:51:19,630 --> 00:51:25,000
figure out so wherever we found an entry

00:51:23,080 --> 00:51:27,790
file wherever that source javascript

00:51:25,000 --> 00:51:31,750
file is we want to basically back up to

00:51:27,790 --> 00:51:37,810
directories and find a build directory

00:51:31,750 --> 00:51:39,730
and put our our built file in there and

00:51:37,810 --> 00:51:44,220
this is actually like the callback we

00:51:39,730 --> 00:51:49,810
run so in this case we have our

00:51:44,220 --> 00:51:53,620
browserify entrant sorry instance that's

00:51:49,810 --> 00:51:56,200
taking entries files these are the files

00:51:53,620 --> 00:51:57,970
that come from our glob cash and

00:51:56,200 --> 00:52:00,990
packaged cash or something that we just

00:51:57,970 --> 00:52:03,880
have to turn on for watch by to work

00:52:00,990 --> 00:52:06,910
here's where we're checking if the dash

00:52:03,880 --> 00:52:10,710
W is set if that's the case then we're

00:52:06,910 --> 00:52:13,330
going to watch these on this task and

00:52:10,710 --> 00:52:14,830
here we're turning on babble if I in

00:52:13,330 --> 00:52:17,920
this particular project we're using

00:52:14,830 --> 00:52:22,000
reacts for some applications or some

00:52:17,920 --> 00:52:27,810
screens on the project so we're loading

00:52:22,000 --> 00:52:31,960
the reactor preset here's where we are

00:52:27,810 --> 00:52:35,500
actually taking the bundle files saving

00:52:31,960 --> 00:52:39,490
them out making sure with the common

00:52:35,500 --> 00:52:40,330
directory exists and then running like

00:52:39,490 --> 00:52:45,280
the actual

00:52:40,330 --> 00:52:48,550
all these are event listeners for watch

00:52:45,280 --> 00:52:54,160
fi so every time something updates re

00:52:48,550 --> 00:52:56,290
bundle and log what updated every time

00:52:54,160 --> 00:52:57,790
something logs actually printed out to

00:52:56,290 --> 00:53:00,910
the screen so we can see what's going on

00:52:57,790 --> 00:53:04,450
and then our initial bundle and this is

00:53:00,910 --> 00:53:06,640
just writing those out so I wanted to

00:53:04,450 --> 00:53:11,260
actually just walk through that so I

00:53:06,640 --> 00:53:13,780
know I've had a lot of I find files or

00:53:11,260 --> 00:53:15,310
like a gulp task or something and I just

00:53:13,780 --> 00:53:17,800
copy and paste it and I have no idea

00:53:15,310 --> 00:53:19,240
what's going on so I wanted to walk

00:53:17,800 --> 00:53:21,070
through and kind of explain like each of

00:53:19,240 --> 00:53:25,720
the individual steps that we're taking

00:53:21,070 --> 00:53:27,070
here this file will be available this is

00:53:25,720 --> 00:53:29,260
something you can integrate like I said

00:53:27,070 --> 00:53:30,700
for using grunt or Gope you can

00:53:29,260 --> 00:53:34,710
absolutely integrate that and your

00:53:30,700 --> 00:53:39,370
process but other than that that is

00:53:34,710 --> 00:53:41,440
pretty much oh sorry actually including

00:53:39,370 --> 00:53:43,930
these in Drupal so this is Drupal 8 we

00:53:41,440 --> 00:53:45,820
have our module libraries llamo file

00:53:43,930 --> 00:53:51,750
here this is where we're putting the

00:53:45,820 --> 00:53:55,900
common file the actual my module

00:53:51,750 --> 00:54:00,790
specific j/s file you can see here we've

00:53:55,900 --> 00:54:03,550
got a dependency on the common file so

00:54:00,790 --> 00:54:05,410
Drupal will make sure that any time

00:54:03,550 --> 00:54:07,450
we're loading like we want to load this

00:54:05,410 --> 00:54:10,960
module JavaScript that it's going to

00:54:07,450 --> 00:54:12,520
load the common script first and then

00:54:10,960 --> 00:54:15,730
same with our theme files doing the

00:54:12,520 --> 00:54:17,200
exact same thing we're just loading it

00:54:15,730 --> 00:54:22,000
and making sure that the common file

00:54:17,200 --> 00:54:25,260
loads first and that's pretty much it I

00:54:22,000 --> 00:54:29,650
guess one thing to note that preprocess

00:54:25,260 --> 00:54:33,970
false is something I didn't include it

00:54:29,650 --> 00:54:38,310
in this example but we run browser sink

00:54:33,970 --> 00:54:42,010
as we're developing so every time

00:54:38,310 --> 00:54:43,900
browser 5 will bundle files it'll

00:54:42,010 --> 00:54:46,060
refresh any browsers that are attached

00:54:43,900 --> 00:54:48,790
to like the browser sync instant so you

00:54:46,060 --> 00:54:52,480
can have your your phone out your iPad

00:54:48,790 --> 00:54:53,400
out you know Chrome Firefox ie all out

00:54:52,480 --> 00:54:56,100
on the same page

00:54:53,400 --> 00:54:59,610
and then all those will refresh and sync

00:54:56,100 --> 00:55:03,450
together one thing i found out and doing

00:54:59,610 --> 00:55:05,070
that sorry this is tangent browser sink

00:55:03,450 --> 00:55:11,010
doesn't work with the way drupal

00:55:05,070 --> 00:55:13,410
aggregates a ton of CSS files so i'll

00:55:11,010 --> 00:55:15,420
put that pre-process false on any file

00:55:13,410 --> 00:55:18,690
that i'm actually working on and then i

00:55:15,420 --> 00:55:21,150
can turn on aggregation for CSS or

00:55:18,690 --> 00:55:22,980
JavaScript and Drupal it'll aggregate

00:55:21,150 --> 00:55:26,730
everything else except for the files

00:55:22,980 --> 00:55:30,210
that I'm working on and that really cut

00:55:26,730 --> 00:55:32,820
down the time between like making a file

00:55:30,210 --> 00:55:37,410
change hitting save and when Drupal

00:55:32,820 --> 00:55:44,370
actually refreshes a page so yeah side

00:55:37,410 --> 00:55:47,340
note there's a tip and that's it i love

00:55:44,370 --> 00:55:51,900
to answer any questions if i can if you

00:55:47,340 --> 00:55:55,320
don't mind going to this URL this is

00:55:51,900 --> 00:55:58,830
just the session link on the site fill

00:55:55,320 --> 00:56:01,710
out the survey let me know if you like

00:55:58,830 --> 00:56:05,220
to talk if you learned anything there's

00:56:01,710 --> 00:56:07,700
something I missed but yeah any any

00:56:05,220 --> 00:56:07,700
questions

00:56:15,420 --> 00:56:26,769
no questions yeah ah yes sorry the

00:56:25,509 --> 00:56:31,599
question was are there any particular

00:56:26,769 --> 00:56:33,400
minification plugins like this one's

00:56:31,599 --> 00:56:38,469
actually more ridiculous and unjustified

00:56:33,400 --> 00:56:41,619
it's a glove Phi Phi so that's basically

00:56:38,469 --> 00:56:44,949
taking uglify and wrapping it in as a

00:56:41,619 --> 00:56:47,079
transform but yeah that works really

00:56:44,949 --> 00:56:50,439
well and i would add it kind of the same

00:56:47,079 --> 00:56:55,319
way we do a watch flight s like check if

00:56:50,439 --> 00:56:59,130
this is a production bundle at that dumb

00:56:55,319 --> 00:56:59,130

YouTube URL: https://www.youtube.com/watch?v=3hu4yDLFN5g


