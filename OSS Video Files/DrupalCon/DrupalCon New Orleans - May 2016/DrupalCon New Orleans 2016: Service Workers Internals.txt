Title: DrupalCon New Orleans 2016: Service Workers Internals
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	Rich offline experiences, periodic background syncs, push notifications— functionality that would normally require a native application—are coming to the web. Service workers provide the technical foundation that all these features will rely on.

Service worker is collection of APIs, that come together to give web applications a set of new and richer capabilities that brings it on par and in cases like offline support trumps over native capabilities.

In Drupal Ecosystem this is still unexplored. In this session we will dig into the foundations of services workers api with demos and code walk throughs. Also we will do a deep dive into internals to see how we can use it with Drupal 8 for a rich user experience.



OutLine of this session - 

Service Worker Standalone

 Background and capabilities

 Set up for your application

 Service workers - LifeCycle

 Updating a Service worker

 Browser Compatibility

Demos - To show what we can do using service workers api

 Implementing push notifications

 Offline Web Experience

 Background Sync

Integration possibilities with Drupal 8.


P.S -- There was lot of excitement in Service workers BoF that happened in Drupalcon Asia

Audience Level - This session would be a mixed beginner and intermidiate level.
Captions: 
	00:00:01,190 --> 00:00:07,350
so let's start I guess the still was

00:00:05,130 --> 00:00:08,970
looking for some people I think Jason is

00:00:07,350 --> 00:00:11,280
looking out in the hallway for if anyone

00:00:08,970 --> 00:00:13,650
else is standing outside going to come

00:00:11,280 --> 00:00:18,990
in but we can quickly start with

00:00:13,650 --> 00:00:23,730
introductions in the meanwhile so she'll

00:00:18,990 --> 00:00:29,130
start with who we are so basically

00:00:23,730 --> 00:00:36,230
myself socket Kumar what I work as a UI

00:00:29,130 --> 00:00:41,489
UX lead at q42 is Jewish he works as a

00:00:36,230 --> 00:00:46,670
technical architect at q42 so so

00:00:41,489 --> 00:00:49,289
basically today we'll be talking about

00:00:46,670 --> 00:00:52,590
today's session is more about we will be

00:00:49,289 --> 00:00:55,469
talking about modern advancements in the

00:00:52,590 --> 00:00:58,559
mobile web and diving into one of its

00:00:55,469 --> 00:01:00,570
major feature service focus talking

00:00:58,559 --> 00:01:04,860
about how to use them in your site and

00:01:00,570 --> 00:01:07,619
making your website more Appy more more

00:01:04,860 --> 00:01:11,400
like a mobile app and then with all

00:01:07,619 --> 00:01:20,130
kinds of tools debug it followed with us

00:01:11,400 --> 00:01:25,619
for demo so firstly starting with mobile

00:01:20,130 --> 00:01:29,430
web versus mobile app I'll start with a

00:01:25,619 --> 00:01:33,960
juice case here like you have a scenario

00:01:29,430 --> 00:01:35,790
where you you are in the scenario you

00:01:33,960 --> 00:01:40,079
have to book a ticket and you don't have

00:01:35,790 --> 00:01:43,170
any mobile application with you so what

00:01:40,079 --> 00:01:48,049
would be your preference about will you

00:01:43,170 --> 00:01:48,049
go and download some application and

00:01:48,380 --> 00:01:52,049
download the application to book the

00:01:50,430 --> 00:01:57,180
ticket or you will just go to the mobile

00:01:52,049 --> 00:01:59,659
site of that ticketing agency and book

00:01:57,180 --> 00:01:59,659
the ticket

00:02:00,520 --> 00:02:08,860
I guess because downloading a mobile app

00:02:06,969 --> 00:02:12,670
would take you like a lot of time a lot

00:02:08,860 --> 00:02:16,030
of mobile data as well let's say any

00:02:12,670 --> 00:02:17,530
output be your own 10 mb or something it

00:02:16,030 --> 00:02:18,879
would take time to download the app so

00:02:17,530 --> 00:02:21,489
what would your preference be would you

00:02:18,879 --> 00:02:23,440
like a little go to the website and book

00:02:21,489 --> 00:02:25,599
a ticket given the UI is same in both

00:02:23,440 --> 00:02:27,459
the cases you have to see you haven't

00:02:25,599 --> 00:02:43,420
seen you on the web which one would you

00:02:27,459 --> 00:02:47,500
offer right yeah even the stats stats is

00:02:43,420 --> 00:02:49,269
the same thing out of 10 10 7 out of 10

00:02:47,500 --> 00:02:54,579
people will go for the mobile web and

00:02:49,269 --> 00:02:57,190
only 34 33 out of 10 will go for the

00:02:54,579 --> 00:03:01,450
downloading the application and then go

00:02:57,190 --> 00:03:07,690
for the ticketing but when we see the

00:03:01,450 --> 00:03:16,440
stats from so when we see the stat from

00:03:07,690 --> 00:03:22,230
the app stores like this does start from

00:03:16,440 --> 00:03:22,230
App Store Google App Store and it says

00:03:22,319 --> 00:03:27,549
more and more application being

00:03:24,670 --> 00:03:32,260
developed and similar is the case with

00:03:27,549 --> 00:03:36,579
the Apple App Store we can clearly see

00:03:32,260 --> 00:03:39,190
more and more applications being

00:03:36,579 --> 00:03:43,060
developed and so people rather than

00:03:39,190 --> 00:03:48,160
focusing on developing mobile friendly

00:03:43,060 --> 00:03:50,169
web and rather than making a mobile

00:03:48,160 --> 00:03:55,419
friendly web they are going and

00:03:50,169 --> 00:03:59,700
developing applications more so can you

00:03:55,419 --> 00:03:59,700
think of why this is happening

00:04:02,340 --> 00:04:09,660
why any reasons like experience with an

00:04:07,800 --> 00:04:20,489
experience hasn't what kind of

00:04:09,660 --> 00:04:25,250
experience so it's okay we have better

00:04:20,489 --> 00:04:31,650
you it's in the make your side murder a

00:04:25,250 --> 00:04:36,870
response a women that's one good reason

00:04:31,650 --> 00:04:39,180
yeah your app would work offline hmm so

00:04:36,870 --> 00:04:46,320
ya know we can speculate a few reasons

00:04:39,180 --> 00:04:49,440
for that like you're the product owners

00:04:46,320 --> 00:04:54,990
are the developers they don't want users

00:04:49,440 --> 00:04:56,370
to have the tab experience over and in

00:04:54,990 --> 00:04:58,979
their application they can do that

00:04:56,370 --> 00:05:02,729
clearly but for mobile web they will

00:04:58,979 --> 00:05:06,450
have this tab experience and then now

00:05:02,729 --> 00:05:11,490
again offline enabled enable the mobile

00:05:06,450 --> 00:05:17,910
apps enable you to have offline data on

00:05:11,490 --> 00:05:20,789
your devices but then again this web if

00:05:17,910 --> 00:05:25,590
we are relying on web that won't be the

00:05:20,789 --> 00:05:27,960
case then if you think of the push

00:05:25,590 --> 00:05:31,650
notifications which we don't have in the

00:05:27,960 --> 00:05:34,050
for the web but for applications we can

00:05:31,650 --> 00:05:39,470
clearly have this we can update your

00:05:34,050 --> 00:05:44,070
users on the basis of any update in the

00:05:39,470 --> 00:05:47,539
application push notification was simple

00:05:44,070 --> 00:05:50,340
notification also that you have this

00:05:47,539 --> 00:05:56,160
splash screens is a good way of branding

00:05:50,340 --> 00:06:00,360
of your product so these are the and

00:05:56,160 --> 00:06:05,720
there are any more reasons like you have

00:06:00,360 --> 00:06:07,810
more access to this performance and then

00:06:05,720 --> 00:06:18,400
like

00:06:07,810 --> 00:06:22,300
we'll be one night yeah yeah and in 2010

00:06:18,400 --> 00:06:26,020
this white published this blog in about

00:06:22,300 --> 00:06:28,090
when the app world was growing stating

00:06:26,020 --> 00:06:31,000
the web is dead as mobile application

00:06:28,090 --> 00:06:33,610
where the future for all with all these

00:06:31,000 --> 00:06:40,270
new features which mobile web did not

00:06:33,610 --> 00:06:43,090
have had but again in later in 2014

00:06:40,270 --> 00:06:47,590
seeing the trends which users were

00:06:43,090 --> 00:06:54,100
following which users we're using even

00:06:47,590 --> 00:06:59,410
for users were more liking where traffic

00:06:54,100 --> 00:07:04,120
was moving on web so then again they

00:06:59,410 --> 00:07:05,729
came up with this trend as even even the

00:07:04,120 --> 00:07:10,590
features were great for mobile apps

00:07:05,729 --> 00:07:13,810
though they had some overhead of

00:07:10,590 --> 00:07:17,440
downloading that app application to have

00:07:13,810 --> 00:07:20,860
that experience so users were forced to

00:07:17,440 --> 00:07:24,789
download their app application from the

00:07:20,860 --> 00:07:26,979
applic to the mobile and then have that

00:07:24,789 --> 00:07:32,620
experience to downloading and install

00:07:26,979 --> 00:07:35,260
was an overhead so so still users prefer

00:07:32,620 --> 00:07:41,310
mobile web over the app as pleased as

00:07:35,260 --> 00:07:45,310
per the data which we saw earlier so

00:07:41,310 --> 00:07:49,060
progressive web apps are the new way of

00:07:45,310 --> 00:07:52,360
strategies to develop your web app more

00:07:49,060 --> 00:07:56,100
mobile-friendly we can take an example

00:07:52,360 --> 00:07:59,470
of flipkart at indian e-commerce company

00:07:56,100 --> 00:08:03,580
among which was among the first adopters

00:07:59,470 --> 00:08:05,470
of this they had mobile applications for

00:08:03,580 --> 00:08:08,520
the product but they still found out

00:08:05,470 --> 00:08:13,120
that traffic was more for mobile web and

00:08:08,520 --> 00:08:16,780
even even more than their desktop

00:08:13,120 --> 00:08:19,060
website so so to enhance the user

00:08:16,780 --> 00:08:20,270
experience for their users or clearly

00:08:19,060 --> 00:08:21,980
that if

00:08:20,270 --> 00:08:24,770
go to a mobile web and then you if you

00:08:21,980 --> 00:08:26,600
give a pop-up to go to appstore and

00:08:24,770 --> 00:08:29,900
download the application that's not a

00:08:26,600 --> 00:08:32,630
good UX so so to enhance the user

00:08:29,900 --> 00:08:35,480
experience they have adopted this

00:08:32,630 --> 00:08:40,190
strategy of progressive web apps and

00:08:35,480 --> 00:08:43,640
they released flipkart light com which

00:08:40,190 --> 00:08:47,860
is clearly similar to their mobile app

00:08:43,640 --> 00:08:51,100
and you so for this you don't have to

00:08:47,860 --> 00:08:54,260
the users don't have to go and then

00:08:51,100 --> 00:08:56,480
download flipkart from the app store

00:08:54,260 --> 00:08:59,140
they just need to go to flipkart like

00:08:56,480 --> 00:09:02,510
calm and they'll have this experience

00:08:59,140 --> 00:09:06,650
which is responsive which works for even

00:09:02,510 --> 00:09:11,180
which works faster even the network is

00:09:06,650 --> 00:09:15,620
bad even this works fine for the net was

00:09:11,180 --> 00:09:19,460
like 2g our edge and and has a features

00:09:15,620 --> 00:09:21,700
like push notifications PLAs greens so

00:09:19,460 --> 00:09:23,630
to get the mobile experience for

00:09:21,700 --> 00:09:26,750
flipkart again you don't have to

00:09:23,630 --> 00:09:35,420
download these you just need to go to

00:09:26,750 --> 00:09:38,300
flickr com and so in in this talk i am

00:09:35,420 --> 00:09:40,340
not going to we are not going in detail

00:09:38,300 --> 00:09:43,640
with progressive web apps we are just

00:09:40,340 --> 00:09:45,590
diving into one browser feature service

00:09:43,640 --> 00:09:48,200
focus which would enable us to have

00:09:45,590 --> 00:09:52,340
features like offline content push

00:09:48,200 --> 00:09:56,950
notification ET say so before anything i

00:09:52,340 --> 00:09:56,950
like to play this video

00:10:03,940 --> 00:10:06,940
three

00:10:08,529 --> 00:10:12,430
this volume

00:11:10,170 --> 00:11:17,860
so I think this case would have happened

00:11:13,389 --> 00:11:19,930
with almost everyone right like stock up

00:11:17,860 --> 00:11:22,750
on a loading screen waiting for it to

00:11:19,930 --> 00:11:24,459
load load load right see our service

00:11:22,750 --> 00:11:26,860
workers would help you and it eliminate

00:11:24,459 --> 00:11:29,860
that or at least enhances free

00:11:26,860 --> 00:11:36,430
experience in some way we'll take a look

00:11:29,860 --> 00:11:41,010
at that so yeah so service focus are

00:11:36,430 --> 00:11:43,180
basically a browser features which is

00:11:41,010 --> 00:11:45,699
recently been added which has been

00:11:43,180 --> 00:11:49,269
recently been added and then work is

00:11:45,699 --> 00:11:51,550
still in progress currently latest

00:11:49,269 --> 00:11:56,500
browsers like chrome and firefox to

00:11:51,550 --> 00:12:01,600
support it but so there are things to

00:11:56,500 --> 00:12:05,800
come in and so and they so basically

00:12:01,600 --> 00:12:11,649
it's a it's a worker thread of working

00:12:05,800 --> 00:12:14,529
parallel et to the the network thread so

00:12:11,649 --> 00:12:23,260
and you you don't have access to the

00:12:14,529 --> 00:12:26,040
dorm here so so the so I talked about

00:12:23,260 --> 00:12:32,519
the features to it has features like

00:12:26,040 --> 00:12:32,519
offline web and then

00:12:39,220 --> 00:12:48,120
and it it enables your website to be

00:12:44,529 --> 00:12:52,000
functional in case of slow connections

00:12:48,120 --> 00:12:56,939
even like edge and 2g which we talked

00:12:52,000 --> 00:13:02,560
earlier and then it gives you a

00:12:56,939 --> 00:13:07,779
programmable cash so earlier we have

00:13:02,560 --> 00:13:10,089
this app cache but that was that was

00:13:07,779 --> 00:13:15,220
very limited its functionality was quite

00:13:10,089 --> 00:13:17,410
limited and it was you it was static but

00:13:15,220 --> 00:13:21,160
here you can now have a full control

00:13:17,410 --> 00:13:28,060
over the cash which and you can script

00:13:21,160 --> 00:13:32,680
your cash then you have you have this

00:13:28,060 --> 00:13:38,860
background processings like you can

00:13:32,680 --> 00:13:44,019
notify get the have some tasks running

00:13:38,860 --> 00:13:47,860
in the background like you can sync

00:13:44,019 --> 00:13:51,370
user's activity later on or show the

00:13:47,860 --> 00:13:58,480
functionality like geo from push push

00:13:51,370 --> 00:14:03,809
notifications and geofencing so so these

00:13:58,480 --> 00:14:09,519
are the features but with like every

00:14:03,809 --> 00:14:11,399
great responsibility with every new

00:14:09,519 --> 00:14:16,750
power you have a great responsibility

00:14:11,399 --> 00:14:21,149
like in here service focus i have are

00:14:16,750 --> 00:14:27,579
only available with https networks

00:14:21,149 --> 00:14:34,089
because i right because see service

00:14:27,579 --> 00:14:39,189
focused they they lie between your user

00:14:34,089 --> 00:14:42,819
or the client side and then the this

00:14:39,189 --> 00:14:45,240
server so they they serve if anybody

00:14:42,819 --> 00:14:47,730
having the access to so you so good

00:14:45,240 --> 00:14:53,880
have can easily intercept your network

00:14:47,730 --> 00:14:58,920
request so so it's again then since HTTP

00:14:53,880 --> 00:15:02,959
is not an encrypted thing to be only so

00:14:58,920 --> 00:15:09,380
it is only available with HTTPS so that

00:15:02,959 --> 00:15:16,980
any transfer data transfer is encrypted

00:15:09,380 --> 00:15:22,680
then so we can sort of pillars so for

00:15:16,980 --> 00:15:27,420
pillar of sorry Sokka would be it needs

00:15:22,680 --> 00:15:29,850
to be it has a scooping urs coping so we

00:15:27,420 --> 00:15:37,080
need to score to mention the scope of

00:15:29,850 --> 00:15:40,080
the serviceworker where service focus

00:15:37,080 --> 00:15:50,360
coupe where where it had to pick all the

00:15:40,080 --> 00:15:55,740
resources and then doc cern document

00:15:50,360 --> 00:16:03,180
matching and then in it runs on the same

00:15:55,740 --> 00:16:06,870
origin and then it has a separate thread

00:16:03,180 --> 00:16:13,770
of aging execution and and has no Dom

00:16:06,870 --> 00:16:17,390
axis so but now we'll dive into how to

00:16:13,770 --> 00:16:25,200
work with service focus and then I think

00:16:17,390 --> 00:16:26,850
you should take on hi guys so till now

00:16:25,200 --> 00:16:30,240
we have covered like what service

00:16:26,850 --> 00:16:32,370
workers can do for you we haven't seen

00:16:30,240 --> 00:16:34,829
how it works and how would you actually

00:16:32,370 --> 00:16:37,770
write code that would allow your

00:16:34,829 --> 00:16:39,600
browser's to intercept your network

00:16:37,770 --> 00:16:44,720
requests and everything will dive into

00:16:39,600 --> 00:16:44,720
those now so starting with

00:16:48,830 --> 00:16:54,440
works okay so starting with the life

00:16:51,980 --> 00:16:56,930
cycle of a service worker so how so what

00:16:54,440 --> 00:16:59,780
are the phrase what are the phases in

00:16:56,930 --> 00:17:02,450
the life cycle of a service worker so

00:16:59,780 --> 00:17:05,000
initially when your web page loads it

00:17:02,450 --> 00:17:08,209
doesn't have anything like Service

00:17:05,000 --> 00:17:11,240
Worker installed on it by itself so the

00:17:08,209 --> 00:17:14,270
first thing that happens is your service

00:17:11,240 --> 00:17:15,980
worker goes into an installing state so

00:17:14,270 --> 00:17:18,350
installing is something where and you

00:17:15,980 --> 00:17:20,450
would ideally go ahead and precash

00:17:18,350 --> 00:17:22,700
something so let's say you have your

00:17:20,450 --> 00:17:24,110
website and it has a couple of static

00:17:22,700 --> 00:17:28,459
resources like you see this file it's a

00:17:24,110 --> 00:17:31,270
JavaScript files something that that

00:17:28,459 --> 00:17:33,740
could be called as an application shell

00:17:31,270 --> 00:17:36,530
something that a user would see as a

00:17:33,740 --> 00:17:38,900
skeleton so how many of you have used

00:17:36,530 --> 00:17:40,910
Facebook Applications I think everyone

00:17:38,900 --> 00:17:43,760
would have used it right so when you

00:17:40,910 --> 00:17:45,500
open it instantly what you see you don't

00:17:43,760 --> 00:17:48,470
see any data instantaneous you see a

00:17:45,500 --> 00:17:51,140
loading you don't see a blank screen

00:17:48,470 --> 00:17:55,190
instead you see placeholders right and

00:17:51,140 --> 00:17:56,450
you see the header right so that's

00:17:55,190 --> 00:17:58,370
called as your application sell

00:17:56,450 --> 00:18:03,140
something which is your skeleton

00:17:58,370 --> 00:18:04,940
application without any data so well out

00:18:03,140 --> 00:18:06,470
your data from your application and pull

00:18:04,940 --> 00:18:10,760
out the skeleton so skeleton is

00:18:06,470 --> 00:18:11,990
something that you would precash okay so

00:18:10,760 --> 00:18:14,540
that's something that you will do in the

00:18:11,990 --> 00:18:16,610
installation step so once it's in

00:18:14,540 --> 00:18:18,710
service worker is installed it could go

00:18:16,610 --> 00:18:20,900
into either of two states either it

00:18:18,710 --> 00:18:24,080
could go into an edit state or it could

00:18:20,900 --> 00:18:28,180
activate an error would happen in case

00:18:24,080 --> 00:18:31,670
it failed to cash a resource or

00:18:28,180 --> 00:18:33,820
something return to 500 error one of the

00:18:31,670 --> 00:18:36,980
resources it returns a 500 error or

00:18:33,820 --> 00:18:39,530
you're not an HTTPS at all it would

00:18:36,980 --> 00:18:41,720
return it would go into the error state

00:18:39,530 --> 00:18:44,980
and then doing a browser refresh for

00:18:41,720 --> 00:18:49,460
dreams start the installation state okay

00:18:44,980 --> 00:18:51,110
so far good good once it goes into the

00:18:49,460 --> 00:18:52,460
activate say it so that's where the

00:18:51,110 --> 00:18:56,480
service worker would take control of

00:18:52,460 --> 00:18:58,280
your website okay so till it reaches the

00:18:56,480 --> 00:19:00,770
activate state of what service worker is

00:18:58,280 --> 00:19:02,110
dysfunctional on your website activation

00:19:00,770 --> 00:19:04,059
is

00:19:02,110 --> 00:19:06,520
a state wherein you do a couple of other

00:19:04,059 --> 00:19:08,500
things as well so for example you have

00:19:06,520 --> 00:19:09,880
service worker version one running okay

00:19:08,500 --> 00:19:12,490
you had a couple of things which you

00:19:09,880 --> 00:19:14,679
cashed earlier now you made a couple of

00:19:12,490 --> 00:19:16,390
updates to your website now let's say

00:19:14,679 --> 00:19:18,760
you added one more CSS file and winmo

00:19:16,390 --> 00:19:21,549
javascript file okay you would want them

00:19:18,760 --> 00:19:23,110
to be precast as well right so that's

00:19:21,549 --> 00:19:27,220
something that you would do inside your

00:19:23,110 --> 00:19:30,130
activate event okay so activated

00:19:27,220 --> 00:19:32,860
something that acts as a that that acts

00:19:30,130 --> 00:19:35,559
as a place where you could clean up your

00:19:32,860 --> 00:19:37,870
cash you could rebuild your cash those

00:19:35,559 --> 00:19:39,429
sort of things right because activation

00:19:37,870 --> 00:19:40,600
is something right after which service

00:19:39,429 --> 00:19:46,660
worker would take control of your

00:19:40,600 --> 00:19:48,790
website make sense after going into

00:19:46,660 --> 00:19:50,679
activate state it could it would ideally

00:19:48,790 --> 00:19:54,010
go it into idle state if nothing is

00:19:50,679 --> 00:19:56,620
happening if you do a fetch request it

00:19:54,010 --> 00:19:58,780
would go into the go into the fed state

00:19:56,620 --> 00:20:00,790
and return back to idle after doing the

00:19:58,780 --> 00:20:06,750
its processing or it could just

00:20:00,790 --> 00:20:11,290
terminate once it's done with it so okay

00:20:06,750 --> 00:20:13,000
moving on to a next slide it's a very

00:20:11,290 --> 00:20:15,780
simple slide which talks about how

00:20:13,000 --> 00:20:18,520
connectivity could affect your web app

00:20:15,780 --> 00:20:20,559
okay so in the case of good connectivity

00:20:18,520 --> 00:20:22,750
it's a simple network fetch and a normal

00:20:20,559 --> 00:20:25,299
response which users see on the browsers

00:20:22,750 --> 00:20:26,860
but in case of a bad or slowed network

00:20:25,299 --> 00:20:30,160
connection the network fetch would

00:20:26,860 --> 00:20:33,640
happen but it would lead to ideally a

00:20:30,160 --> 00:20:36,010
timeout or a DNS lookup failure right

00:20:33,640 --> 00:20:38,200
which is a bad you wish the user would

00:20:36,010 --> 00:20:42,610
again be stuck with a loading screen and

00:20:38,200 --> 00:20:46,450
doing nothing so let's see how service

00:20:42,610 --> 00:20:47,799
worker would save the day for uses so

00:20:46,450 --> 00:20:50,140
service locusts or something that's it

00:20:47,799 --> 00:20:53,980
between that sits between your web page

00:20:50,140 --> 00:20:55,929
and your web server okay so any requests

00:20:53,980 --> 00:20:58,030
which is going from your web page to the

00:20:55,929 --> 00:21:01,120
web server would pass through the

00:20:58,030 --> 00:21:04,330
serviceworker to see this is where it

00:21:01,120 --> 00:21:07,360
becomes so a socket talked about it

00:21:04,330 --> 00:21:10,120
should run only on HTTPS that's a

00:21:07,360 --> 00:21:11,940
specification because it could control

00:21:10,120 --> 00:21:14,710
any and every request which is passing

00:21:11,940 --> 00:21:15,910
from your web page to the web server so

00:21:14,710 --> 00:21:17,530
let's say you have an e-commerce

00:21:15,910 --> 00:21:18,880
website users fill in the their

00:21:17,530 --> 00:21:21,070
credentials their credit card details

00:21:18,880 --> 00:21:22,780
and if a hacker gets control of the

00:21:21,070 --> 00:21:25,240
service workers they could intercept all

00:21:22,780 --> 00:21:26,560
of these details and reuse them with

00:21:25,240 --> 00:21:28,750
HTTPS all of this data would be

00:21:26,560 --> 00:21:32,740
encrypted and would be of no use to the

00:21:28,750 --> 00:21:36,160
hacker right see ya let's take a look at

00:21:32,740 --> 00:21:37,840
this flow diagram the request it so

00:21:36,160 --> 00:21:41,470
let's consider fetch request which is

00:21:37,840 --> 00:21:43,420
happening for some URL service worker

00:21:41,470 --> 00:21:46,120
but first of all intercepted it would

00:21:43,420 --> 00:21:47,440
look for this data for this fetch

00:21:46,120 --> 00:21:49,960
request in the cache in the browser

00:21:47,440 --> 00:21:51,610
cache if it finds it it would return a

00:21:49,960 --> 00:21:55,540
promise object which will pass back to

00:21:51,610 --> 00:21:58,030
the webpage web browser so in this case

00:21:55,540 --> 00:22:00,280
there is no head to the server at all so

00:21:58,030 --> 00:22:04,930
even if you're offline you would be able

00:22:00,280 --> 00:22:07,420
to see some response right in case it

00:22:04,930 --> 00:22:10,240
doesn't find it so with how many feel

00:22:07,420 --> 00:22:14,200
familiar with javis two promises okay

00:22:10,240 --> 00:22:15,670
good so yeah with promises it could

00:22:14,200 --> 00:22:19,570
either resolve or it could reject in

00:22:15,670 --> 00:22:22,120
case of reject it would you can program

00:22:19,570 --> 00:22:24,580
your cap program your serviceworker to

00:22:22,120 --> 00:22:26,650
look for this to do to perform another

00:22:24,580 --> 00:22:28,930
fetch request for this URL to the

00:22:26,650 --> 00:22:31,300
network now the request goes to the

00:22:28,930 --> 00:22:32,770
server and the response is sent back

00:22:31,300 --> 00:22:35,320
from the server to the web page in this

00:22:32,770 --> 00:22:37,120
case so it works both the way even if

00:22:35,320 --> 00:22:39,400
you're offline the user is able to see

00:22:37,120 --> 00:22:46,030
the data even if a is online he sees the

00:22:39,400 --> 00:22:48,550
fresh data okay see we'll be diving into

00:22:46,030 --> 00:22:51,520
the code base now let's see how service

00:22:48,550 --> 00:22:55,660
workers would actually work okay how

00:22:51,520 --> 00:22:58,540
would you actually register a service

00:22:55,660 --> 00:23:00,880
worker or Howard service workers take

00:22:58,540 --> 00:23:04,540
control what code is responsible for

00:23:00,880 --> 00:23:07,870
that okay so and the in the right

00:23:04,540 --> 00:23:09,700
sidebar you see the code that says if

00:23:07,870 --> 00:23:12,330
service worker is in navigator so

00:23:09,700 --> 00:23:16,720
navigator is the is a browser object

00:23:12,330 --> 00:23:18,460
okay provided by browsers okay now if

00:23:16,720 --> 00:23:21,010
you browse it supports service workers

00:23:18,460 --> 00:23:22,420
it would have the service worker

00:23:21,010 --> 00:23:24,960
attribute in the in the navigation

00:23:22,420 --> 00:23:27,549
object otherwise it would not have that

00:23:24,960 --> 00:23:29,529
so the very first thing is you should

00:23:27,549 --> 00:23:32,619
definitely check if your browser support

00:23:29,529 --> 00:23:34,869
service workers or no we take a look at

00:23:32,619 --> 00:23:36,429
the slide where and we will talk about

00:23:34,869 --> 00:23:41,860
which browser support service workers

00:23:36,429 --> 00:23:43,269
and which do not okay see ya the first

00:23:41,860 --> 00:23:45,039
step is to check for check if your

00:23:43,269 --> 00:23:48,789
browser support service worker or no the

00:23:45,039 --> 00:23:52,480
second step is to register a worker okay

00:23:48,789 --> 00:23:54,340
now second step is navigated or cervical

00:23:52,480 --> 00:23:59,289
or register so you're registering of

00:23:54,340 --> 00:24:00,940
worker now your SW dot J's file is what

00:23:59,289 --> 00:24:03,279
we'll do which is what is going to

00:24:00,940 --> 00:24:06,669
control your network request and

00:24:03,279 --> 00:24:09,220
everything right so all of the code

00:24:06,669 --> 00:24:12,570
related to your worker would go inside

00:24:09,220 --> 00:24:15,159
service work at jsw dot J's file okay

00:24:12,570 --> 00:24:18,249
the second argument to do this is an

00:24:15,159 --> 00:24:20,139
optional scope so for service workers so

00:24:18,249 --> 00:24:23,710
for service workers to work properly it

00:24:20,139 --> 00:24:26,409
needs a scope so it says that i will

00:24:23,710 --> 00:24:29,799
work i will control all of the requests

00:24:26,409 --> 00:24:31,779
which fall under the scope so if the

00:24:29,799 --> 00:24:34,720
scope is / it's clearly going to control

00:24:31,779 --> 00:24:38,190
any and every request which is which is

00:24:34,720 --> 00:24:41,499
going to be there on your website right

00:24:38,190 --> 00:24:43,809
let's say we put the scope as / SW it

00:24:41,499 --> 00:24:50,080
would for it would control any requests

00:24:43,809 --> 00:24:53,470
which which starts with a path / SW okay

00:24:50,080 --> 00:24:56,200
and then again it's it again is

00:24:53,470 --> 00:24:59,190
returning a promise and if it resolves

00:24:56,200 --> 00:25:04,989
it goes into the den function and if it

00:24:59,190 --> 00:25:07,629
rejects it goes into the catch ok so at

00:25:04,989 --> 00:25:10,809
type of the broad support scope is

00:25:07,629 --> 00:25:12,309
defined by that now the second step so

00:25:10,809 --> 00:25:15,730
the first step was registering a

00:25:12,309 --> 00:25:17,440
serviceworker over here we register the

00:25:15,730 --> 00:25:20,230
service worker we created a worker file

00:25:17,440 --> 00:25:23,230
now this worker file is registered with

00:25:20,230 --> 00:25:26,019
your scope / for your current domain so

00:25:23,230 --> 00:25:29,049
let's say our domain is NOLA PD 42

00:25:26,019 --> 00:25:32,799
dotnet okay and we registered our

00:25:29,049 --> 00:25:36,460
service worker JS file on root scope so

00:25:32,799 --> 00:25:39,460
what happens is any requests which is

00:25:36,460 --> 00:25:41,040
which is going to which is going to be

00:25:39,460 --> 00:25:42,060
passed to the server

00:25:41,040 --> 00:25:46,470
well passed through the serviceworker

00:25:42,060 --> 00:25:48,980
dot J's file now okay now we talked

00:25:46,470 --> 00:25:52,320
about event we talked about events that

00:25:48,980 --> 00:25:54,000
service worker does have right the

00:25:52,320 --> 00:25:56,760
install event the activate event and

00:25:54,000 --> 00:25:59,820
other events right so if you need to do

00:25:56,760 --> 00:26:02,190
something on one event you can attach a

00:25:59,820 --> 00:26:05,100
listener to that event your custom

00:26:02,190 --> 00:26:06,480
listener we're in so as we talked

00:26:05,100 --> 00:26:08,160
earlier that service workers are

00:26:06,480 --> 00:26:10,350
completely programmable cash so you

00:26:08,160 --> 00:26:12,810
could program it the way you want so

00:26:10,350 --> 00:26:15,930
let's say we want to pre cash a couple

00:26:12,810 --> 00:26:18,090
of resources on install event so we

00:26:15,930 --> 00:26:21,240
would go ahead and add a listener to the

00:26:18,090 --> 00:26:23,880
install event and do a couple of

00:26:21,240 --> 00:26:26,130
operations inside it so the the first

00:26:23,880 --> 00:26:29,130
thing is install is basically used for

00:26:26,130 --> 00:26:32,580
pre cash app shall we already talked

00:26:29,130 --> 00:26:34,950
about and okay before we go to the

00:26:32,580 --> 00:26:38,130
activate you see the function over there

00:26:34,950 --> 00:26:40,020
it says event dot wait until okay so

00:26:38,130 --> 00:26:42,780
service workers also provide you a way

00:26:40,020 --> 00:26:44,850
for your for your service worker to stay

00:26:42,780 --> 00:26:49,620
in a state until unless it has finished

00:26:44,850 --> 00:26:51,750
its job so anything that's inside your

00:26:49,620 --> 00:26:53,820
event dot wait until until unless that

00:26:51,750 --> 00:26:55,800
completes your service worker would not

00:26:53,820 --> 00:26:59,520
move from installed to activate or error

00:26:55,800 --> 00:27:01,980
state okay so you can basically say that

00:26:59,520 --> 00:27:06,210
precash all my resources and then move

00:27:01,980 --> 00:27:09,150
to the next state okay so that's where

00:27:06,210 --> 00:27:11,130
you would use a vendor wait until some

00:27:09,150 --> 00:27:12,930
activate function of your activate event

00:27:11,130 --> 00:27:15,540
we already talked about it's mostly used

00:27:12,930 --> 00:27:19,530
for the cleanup of caches cleaning up

00:27:15,540 --> 00:27:21,600
old cash the next step and the most

00:27:19,530 --> 00:27:25,290
important one is intercepting their your

00:27:21,600 --> 00:27:29,240
network requests okay so service workers

00:27:25,290 --> 00:27:32,070
provide you with an API to do that so

00:27:29,240 --> 00:27:35,190
you would again attach a event listener

00:27:32,070 --> 00:27:37,140
to your fetch event and do intercept

00:27:35,190 --> 00:27:39,690
your request do whatever you want to do

00:27:37,140 --> 00:27:41,640
with that request whether you could

00:27:39,690 --> 00:27:45,060
return basically an empty hello world

00:27:41,640 --> 00:27:48,330
response even for any other pages by

00:27:45,060 --> 00:27:51,060
intercepting this request will take a

00:27:48,330 --> 00:27:53,580
look into how you should intercept

00:27:51,060 --> 00:27:55,730
requests or basic caching strategies

00:27:53,580 --> 00:27:58,500
which we haven't placed

00:27:55,730 --> 00:28:00,030
say discuss talking about basic basic

00:27:58,500 --> 00:28:03,179
caching strategies we are going to

00:28:00,030 --> 00:28:05,520
discuss only two of them today the first

00:28:03,179 --> 00:28:07,740
one is offline first we're in all of

00:28:05,520 --> 00:28:09,690
your requests get served from an offline

00:28:07,740 --> 00:28:13,080
cash first and then it's looked up in

00:28:09,690 --> 00:28:16,020
the network so that in the first time

00:28:13,080 --> 00:28:17,880
when you when you hit a web page you get

00:28:16,020 --> 00:28:20,940
a stale response in the background

00:28:17,880 --> 00:28:24,110
service worker would pull fresh data and

00:28:20,940 --> 00:28:26,960
update your cash so basically the first

00:28:24,110 --> 00:28:29,880
the first request would give you a stale

00:28:26,960 --> 00:28:32,520
information but if you're online the

00:28:29,880 --> 00:28:36,840
next refresh would give you the latest

00:28:32,520 --> 00:28:39,690
information so yeah offline first I

00:28:36,840 --> 00:28:41,820
think we already talked about most of

00:28:39,690 --> 00:28:44,610
these so it's mostly useful in case of

00:28:41,820 --> 00:28:47,789
single page apps or applications where

00:28:44,610 --> 00:28:51,059
and you have data separate and your view

00:28:47,789 --> 00:28:52,890
layer separate but yeah it works with

00:28:51,059 --> 00:29:00,570
Drupal as well we have built a tempo a

00:28:52,890 --> 00:29:01,980
short demo yeah so uplink first so the

00:29:00,570 --> 00:29:04,080
very first thing that you do is you

00:29:01,980 --> 00:29:06,990
precache you describe your resources

00:29:04,080 --> 00:29:10,140
which you want to pre cash so let's say

00:29:06,990 --> 00:29:13,590
in this use case we are defining a cash

00:29:10,140 --> 00:29:15,809
bucket which is called as decoy and lola

00:29:13,590 --> 00:29:19,020
and the static resources which we want

00:29:15,809 --> 00:29:22,559
to cash in this cash bucket so it's

00:29:19,020 --> 00:29:24,480
always a good practice sorry it's always

00:29:22,559 --> 00:29:27,299
a good practice to have separate cash

00:29:24,480 --> 00:29:30,960
buckets for different kind of resources

00:29:27,299 --> 00:29:33,990
so you could have both the case cashing

00:29:30,960 --> 00:29:36,900
strategies in a single service worker

00:29:33,990 --> 00:29:38,159
let's say you could have cash a cash

00:29:36,900 --> 00:29:40,650
bucket which is going to follow an

00:29:38,159 --> 00:29:42,270
offline first approach and another cash

00:29:40,650 --> 00:29:46,470
bucket which is going to which would

00:29:42,270 --> 00:29:48,419
follow your network first approach right

00:29:46,470 --> 00:29:51,419
so you define to cash buckets in that

00:29:48,419 --> 00:29:52,590
case define your static resources in one

00:29:51,419 --> 00:29:55,669
of the buckets and your dynamic

00:29:52,590 --> 00:29:59,549
resources into the another bucket and

00:29:55,669 --> 00:30:01,799
initially precash both of them but in k

00:29:59,549 --> 00:30:04,530
but when you're writing your fetch event

00:30:01,799 --> 00:30:08,450
listener you describe two different ways

00:30:04,530 --> 00:30:11,010
of handling your both cash buckets

00:30:08,450 --> 00:30:13,980
we'll take a look at that how to do that

00:30:11,010 --> 00:30:16,080
as well so yeah in this example what we

00:30:13,980 --> 00:30:19,050
are doing is we define a cache bucket a

00:30:16,080 --> 00:30:20,850
couple of static resources and attaching

00:30:19,050 --> 00:30:23,580
another event listener to the install

00:30:20,850 --> 00:30:25,200
event and inside the install event we

00:30:23,580 --> 00:30:26,730
are using one of the aps which will

00:30:25,200 --> 00:30:28,680
provide which is provided by cap which

00:30:26,730 --> 00:30:32,370
is provided by service workers the cache

00:30:28,680 --> 00:30:34,770
API so this would allow you to write

00:30:32,370 --> 00:30:38,670
data into your cash into your browser

00:30:34,770 --> 00:30:41,580
cache okay so cash dot add on what it

00:30:38,670 --> 00:30:43,650
does is it performs requests for all of

00:30:41,580 --> 00:30:46,860
the URLs in that array in the static

00:30:43,650 --> 00:30:51,540
resources array and cash them in the

00:30:46,860 --> 00:30:53,850
browser cache okay say the first part is

00:30:51,540 --> 00:30:56,580
your app shell and event or wait until

00:30:53,850 --> 00:31:01,020
will wait until unless your resources

00:30:56,580 --> 00:31:04,230
are cached the second step would be

00:31:01,020 --> 00:31:08,000
processing your request so you add a

00:31:04,230 --> 00:31:10,620
event listener to your fetch event and

00:31:08,000 --> 00:31:13,410
there's a function does again a function

00:31:10,620 --> 00:31:15,330
called event or to spawn wit so this is

00:31:13,410 --> 00:31:17,490
again provided by your browsers and by

00:31:15,330 --> 00:31:21,030
and provide my service workers which is

00:31:17,490 --> 00:31:24,390
again provided by your browsers so you

00:31:21,030 --> 00:31:25,890
could choose to respond with with data

00:31:24,390 --> 00:31:28,200
which is pulled out from cash rather

00:31:25,890 --> 00:31:31,410
than from the network so if you take a

00:31:28,200 --> 00:31:32,610
look at the function sir from cash what

00:31:31,410 --> 00:31:34,440
we are doing there is we are doing a

00:31:32,610 --> 00:31:37,590
caches that match for the current

00:31:34,440 --> 00:31:40,650
request URL if the cash if the a match

00:31:37,590 --> 00:31:43,260
is found we do a we do return a response

00:31:40,650 --> 00:31:46,310
from here directly it doesn't the risks

00:31:43,260 --> 00:31:52,770
the request doesn't even hit the server

00:31:46,310 --> 00:31:53,970
and in case we don't find a response in

00:31:52,770 --> 00:31:57,720
this case we are just returning

00:31:53,970 --> 00:32:03,150
redirecting users to an offline dot HTML

00:31:57,720 --> 00:32:08,010
page which so again talking a little bit

00:32:03,150 --> 00:32:10,170
of the topic here but yeah when you when

00:32:08,010 --> 00:32:12,240
you talk about service workers the need

00:32:10,170 --> 00:32:15,060
for service worker would differ what

00:32:12,240 --> 00:32:18,600
vary per application you would never

00:32:15,060 --> 00:32:20,400
have a same kind of implementation or a

00:32:18,600 --> 00:32:21,760
generic application for implementation

00:32:20,400 --> 00:32:24,640
for all of your application

00:32:21,760 --> 00:32:26,110
it would always vary so in this case we

00:32:24,640 --> 00:32:28,050
are redirecting users to offline dot

00:32:26,110 --> 00:32:31,200
HTML in some cases you would want to

00:32:28,050 --> 00:32:33,250
update the cache as we talked about

00:32:31,200 --> 00:32:35,770
update the cache in the background and

00:32:33,250 --> 00:32:44,790
present the users with the fresh data

00:32:35,770 --> 00:32:48,820
unless an extra quest okay another

00:32:44,790 --> 00:32:52,000
another interesting cash strategy is

00:32:48,820 --> 00:32:54,340
serving from network first so what we do

00:32:52,000 --> 00:32:59,320
here is we replace the function server

00:32:54,340 --> 00:33:00,610
from cash with from network and in this

00:32:59,320 --> 00:33:03,220
case what we are doing is we're doing

00:33:00,610 --> 00:33:06,160
the fetch request on the on the on the

00:33:03,220 --> 00:33:08,820
request URL and we update the cache

00:33:06,160 --> 00:33:11,470
first and then send back the response

00:33:08,820 --> 00:33:13,570
one interesting thing to note here is we

00:33:11,470 --> 00:33:17,080
are doing that we are performing clone

00:33:13,570 --> 00:33:19,390
on the response object can anyone take a

00:33:17,080 --> 00:33:29,260
guess why we are doing that why do we

00:33:19,390 --> 00:33:30,760
need to do that yeah yeah sort of

00:33:29,260 --> 00:33:32,050
similar thing so it's a readable stream

00:33:30,760 --> 00:33:34,750
basically which could be consumed just

00:33:32,050 --> 00:33:37,000
once so either you could respond back to

00:33:34,750 --> 00:33:40,060
the server or you could cash it so to

00:33:37,000 --> 00:33:41,650
cash it we create a clone and just cash

00:33:40,060 --> 00:33:46,750
it into the browser and return back the

00:33:41,650 --> 00:33:48,430
actual response object make sense and in

00:33:46,750 --> 00:33:50,770
case it fails we are going to do a

00:33:48,430 --> 00:33:53,950
lookup in the cache and present users

00:33:50,770 --> 00:33:56,910
with a stale copy of the page so are you

00:33:53,950 --> 00:34:00,190
guys able to visualize what I'm saying I

00:33:56,910 --> 00:34:02,910
know it's difficult just by reading the

00:34:00,190 --> 00:34:02,910
code but yeah

00:34:07,760 --> 00:34:13,700
um if you have got any other custom

00:34:11,600 --> 00:34:16,820
scenario or handling the cash purse

00:34:13,700 --> 00:34:18,919
thing which is very very important in

00:34:16,820 --> 00:34:21,350
case of service workers you need to be

00:34:18,919 --> 00:34:25,630
very specific when your purse when you

00:34:21,350 --> 00:34:30,409
need to basically invited it your caches

00:34:25,630 --> 00:34:32,690
you need to be very very clear about

00:34:30,409 --> 00:34:34,399
that when you want to do that and it

00:34:32,690 --> 00:34:37,610
again depends on your application needs

00:34:34,399 --> 00:34:39,409
it's not generate but still there a

00:34:37,610 --> 00:34:41,960
couple of utilities which are available

00:34:39,409 --> 00:34:47,120
right now which allows you to burst

00:34:41,960 --> 00:34:48,380
caches so for all of you service worker

00:34:47,120 --> 00:34:51,409
is completely flexible and it's

00:34:48,380 --> 00:34:54,370
programmable cash so go ahead code your

00:34:51,409 --> 00:34:56,540
own logic for busting the cash or

00:34:54,370 --> 00:34:59,900
handling your own custom cash in

00:34:56,540 --> 00:35:03,620
scenario another important aspect of

00:34:59,900 --> 00:35:06,380
service worker is how or when how do you

00:35:03,620 --> 00:35:08,750
update it so your service worker is

00:35:06,380 --> 00:35:10,370
running so socket already talked about

00:35:08,750 --> 00:35:13,970
service workers has separate thread

00:35:10,370 --> 00:35:17,590
right now what he meant by a separate

00:35:13,970 --> 00:35:20,840
thread was your web pages would load

00:35:17,590 --> 00:35:23,000
okay but service workers would run in

00:35:20,840 --> 00:35:25,340
parallel it has nothing it has no

00:35:23,000 --> 00:35:26,960
control over your Dom it cannot do the

00:35:25,340 --> 00:35:30,650
Dom manipulation it doesn't have the

00:35:26,960 --> 00:35:32,900
power to do that it's running separately

00:35:30,650 --> 00:35:35,090
from your website so that's the reason

00:35:32,900 --> 00:35:36,350
of the good reasons it could do the

00:35:35,090 --> 00:35:37,610
background processing even if your

00:35:36,350 --> 00:35:40,360
website is not running your service

00:35:37,610 --> 00:35:44,300
worker could be running you get the idea

00:35:40,360 --> 00:35:46,040
so even if if you don't have your tab

00:35:44,300 --> 00:35:47,620
for your website's open service worker

00:35:46,040 --> 00:35:52,820
could still work in the background and

00:35:47,620 --> 00:35:55,340
perform jobs now the tedious thing is

00:35:52,820 --> 00:35:57,980
how to update these things like this is

00:35:55,340 --> 00:36:00,410
once installed in your browser now how

00:35:57,980 --> 00:36:03,530
would you update it because a lot of

00:36:00,410 --> 00:36:05,540
users are already running these service

00:36:03,530 --> 00:36:10,100
workers on their mobile apps on their

00:36:05,540 --> 00:36:13,040
web app sorry right so service workers

00:36:10,100 --> 00:36:16,760
do provide you with with a way to do

00:36:13,040 --> 00:36:18,320
that as well let's consider a use case

00:36:16,760 --> 00:36:20,750
where and we are going to split our cash

00:36:18,320 --> 00:36:23,360
into two parts we're

00:36:20,750 --> 00:36:26,660
going to split our cash into javascript

00:36:23,360 --> 00:36:28,100
resources and CSS resources here so the

00:36:26,660 --> 00:36:31,040
first step would be your pager service

00:36:28,100 --> 00:36:32,660
worker code based and once you have

00:36:31,040 --> 00:36:35,150
greater service worker code base and it

00:36:32,660 --> 00:36:36,320
loads on the browser the browser would

00:36:35,150 --> 00:36:39,220
automatically detect that there is a

00:36:36,320 --> 00:36:44,900
change in this file and it needs reload

00:36:39,220 --> 00:36:47,150
okay and the check succeeds I mean if

00:36:44,900 --> 00:36:49,940
the service worker is a new file if

00:36:47,150 --> 00:36:51,440
there is a difference between the even a

00:36:49,940 --> 00:36:53,960
bite of difference is there in the size

00:36:51,440 --> 00:36:57,140
of the file it would file install them

00:36:53,960 --> 00:36:59,270
and for the service worker again now the

00:36:57,140 --> 00:37:01,520
interesting part is here once the

00:36:59,270 --> 00:37:04,010
install event has fired the service

00:37:01,520 --> 00:37:07,550
workers would go into waiting state now

00:37:04,010 --> 00:37:11,000
what waiting state means here is they

00:37:07,550 --> 00:37:13,880
would not install they would not update

00:37:11,000 --> 00:37:16,520
your cache buckets or update your caches

00:37:13,880 --> 00:37:19,100
or delete or do any operation on your

00:37:16,520 --> 00:37:20,990
caches now it would wait until unless

00:37:19,100 --> 00:37:22,550
all the instances of your service

00:37:20,990 --> 00:37:25,850
workers previous service worker versions

00:37:22,550 --> 00:37:27,020
are closed because there are other tabs

00:37:25,850 --> 00:37:28,820
there could be other tabs on your

00:37:27,020 --> 00:37:29,780
browser which are open which are being

00:37:28,820 --> 00:37:32,420
controlled by the previous service

00:37:29,780 --> 00:37:34,670
worker and you would never want a user

00:37:32,420 --> 00:37:36,680
to land into a scenario where in his

00:37:34,670 --> 00:37:38,300
season in consistency like one of the

00:37:36,680 --> 00:37:40,370
taps is behaving another way and another

00:37:38,300 --> 00:37:42,020
tab is behaving and another way you

00:37:40,370 --> 00:37:43,520
would never want that right so service

00:37:42,020 --> 00:37:45,020
worker would go into a waiting state and

00:37:43,520 --> 00:37:47,030
stay in to the waiting state until

00:37:45,020 --> 00:37:49,340
unless you're all the current versions

00:37:47,030 --> 00:37:52,310
of a service worker are closed so once

00:37:49,340 --> 00:37:54,110
they're closed the first refresh of the

00:37:52,310 --> 00:37:55,910
page would trigger the install event

00:37:54,110 --> 00:38:00,470
again and then it would go into the

00:37:55,910 --> 00:38:04,310
activate state and activators where you

00:38:00,470 --> 00:38:06,980
hooking and again you basically do your

00:38:04,310 --> 00:38:10,580
cache processing cash past Aang you

00:38:06,980 --> 00:38:12,260
delete your purger old cash right so

00:38:10,580 --> 00:38:14,390
that's where you'll do all the things

00:38:12,260 --> 00:38:16,640
one of the overheads over here is the

00:38:14,390 --> 00:38:19,460
browser checking for years service

00:38:16,640 --> 00:38:21,440
worker dot J's file on every request so

00:38:19,460 --> 00:38:23,710
you could again control this using HTTP

00:38:21,440 --> 00:38:27,890
cache headers so you could set a max age

00:38:23,710 --> 00:38:33,860
44 this file and it would not be checked

00:38:27,890 --> 00:38:34,520
for that duration abating service

00:38:33,860 --> 00:38:37,370
workers so

00:38:34,520 --> 00:38:38,600
yeah this is the code example so what

00:38:37,370 --> 00:38:40,130
you're doing here is we are creating two

00:38:38,600 --> 00:38:43,730
different buckets yes bucket and CSS

00:38:40,130 --> 00:38:46,160
bucket one of the resources does one of

00:38:43,730 --> 00:38:50,050
the buckets would hold the CSS resources

00:38:46,160 --> 00:38:53,420
and another would hold the JS resources

00:38:50,050 --> 00:38:54,890
yeah so you update your serviceworker to

00:38:53,420 --> 00:38:57,920
JS file which was the which was the

00:38:54,890 --> 00:39:00,830
first step you update your install event

00:38:57,920 --> 00:39:02,180
and you basically now create two

00:39:00,830 --> 00:39:04,160
different buckets and cache data in the

00:39:02,180 --> 00:39:08,830
two different buckets for your CSS and

00:39:04,160 --> 00:39:12,320
JS files and the next step is activate

00:39:08,830 --> 00:39:15,830
so in activate what you're doing is

00:39:12,320 --> 00:39:18,230
you're going to create a white list of

00:39:15,830 --> 00:39:20,000
your caches so basically this is the

00:39:18,230 --> 00:39:21,740
logic which we have done you need not

00:39:20,000 --> 00:39:24,410
follow the same logic what we are doing

00:39:21,740 --> 00:39:26,600
here is we are busting the old cash we

00:39:24,410 --> 00:39:28,580
are deleting the old cash buckets we are

00:39:26,600 --> 00:39:31,580
deleting all the cash buckets apart from

00:39:28,580 --> 00:39:33,680
JS bucket and she is bucket right you

00:39:31,580 --> 00:39:39,020
would not want to have browser holding

00:39:33,680 --> 00:39:42,640
the old cache data right and one

00:39:39,020 --> 00:39:45,640
interesting thing here suppose you want

00:39:42,640 --> 00:39:47,570
browsers to take control of your

00:39:45,640 --> 00:39:49,940
serviceworker which is getting installed

00:39:47,570 --> 00:39:52,520
currently you want it to happen

00:39:49,940 --> 00:39:55,760
instantly even though other tabs are

00:39:52,520 --> 00:39:56,780
there which are open which are being

00:39:55,760 --> 00:39:59,240
controlled by the previous service

00:39:56,780 --> 00:40:00,890
worker so in that case this workers

00:39:59,240 --> 00:40:02,930
provide you with an API to do that using

00:40:00,890 --> 00:40:04,400
a Venn dot replace function so you could

00:40:02,930 --> 00:40:06,110
just call event dot replays function

00:40:04,400 --> 00:40:09,230
inside your event install event and

00:40:06,110 --> 00:40:10,640
service workers would go into activate

00:40:09,230 --> 00:40:16,310
state rather than going into the waiting

00:40:10,640 --> 00:40:21,430
state ok browser support so chrome

00:40:16,310 --> 00:40:23,660
40-plus operas 27 plus Firefox 44 plus

00:40:21,430 --> 00:40:26,000
Safari the support has come for the

00:40:23,660 --> 00:40:31,150
mobile browser but it's not in yet for

00:40:26,000 --> 00:40:35,120
the web browser sorry desktop browser I

00:40:31,150 --> 00:40:36,770
it's not in there yet I think and you

00:40:35,120 --> 00:40:40,970
can always check this the browser

00:40:36,770 --> 00:40:44,690
support at the URL mentioned below now

00:40:40,970 --> 00:40:46,220
they're also cases they're also API is

00:40:44,690 --> 00:40:48,640
for which there polyfills which are

00:40:46,220 --> 00:40:50,810
available so polyfills are nothing

00:40:48,640 --> 00:40:52,850
small JavaScript libraries which you

00:40:50,810 --> 00:40:55,190
could inject to add additional

00:40:52,850 --> 00:40:58,220
functionalities my website which is

00:40:55,190 --> 00:40:59,990
which is not supported by browser so

00:40:58,220 --> 00:41:01,940
they're Polyfest which are available to

00:40:59,990 --> 00:41:03,910
do that as well that's again available

00:41:01,940 --> 00:41:09,590
at the same URL a service work already

00:41:03,910 --> 00:41:15,140
by Jake acapella tools and tooling and

00:41:09,590 --> 00:41:17,090
debugging so yeah so obviously when

00:41:15,140 --> 00:41:19,370
working with service workers you would

00:41:17,090 --> 00:41:21,620
have it's a pain to debug service

00:41:19,370 --> 00:41:23,710
workers which I have experience in like

00:41:21,620 --> 00:41:27,860
last week while I was preparing the demo

00:41:23,710 --> 00:41:30,950
so yeah the couple of tools which we

00:41:27,860 --> 00:41:33,140
came across the very first one is the

00:41:30,950 --> 00:41:34,880
chrome dashboard which allows you to see

00:41:33,140 --> 00:41:37,190
the all the service workers which are

00:41:34,880 --> 00:41:38,690
installed on your browser currently so

00:41:37,190 --> 00:41:41,300
you could go to Chrome Service Worker

00:41:38,690 --> 00:41:42,410
internals it would show you a list of

00:41:41,300 --> 00:41:45,740
all the service workers which are

00:41:42,410 --> 00:41:48,340
installed on your browser you could

00:41:45,740 --> 00:41:50,990
emulate your events from here right away

00:41:48,340 --> 00:41:52,370
so you could either unregistered a

00:41:50,990 --> 00:41:54,340
service worker right from here or you

00:41:52,370 --> 00:41:57,590
could start the service worker and

00:41:54,340 --> 00:41:59,980
perform your push notifications perform

00:41:57,590 --> 00:42:02,900
your fetch operations right from here

00:41:59,980 --> 00:42:07,580
you don't ever need to open the website

00:42:02,900 --> 00:42:11,270
for that to see that this is the power

00:42:07,580 --> 00:42:16,460
of service workers being running in a

00:42:11,270 --> 00:42:18,470
separate thread local development it's a

00:42:16,460 --> 00:42:20,480
pain if you don't have an ssl

00:42:18,470 --> 00:42:23,150
certificate you cannot work with service

00:42:20,480 --> 00:42:27,020
workers but yeah with google chrome you

00:42:23,150 --> 00:42:32,900
could treat a insecure origin as a cure

00:42:27,020 --> 00:42:34,820
origin using this command above network

00:42:32,900 --> 00:42:36,770
requests so any network requests which

00:42:34,820 --> 00:42:40,370
is going to going through a service

00:42:36,770 --> 00:42:42,050
worker would have would have the size

00:42:40,370 --> 00:42:47,210
column saying that it's coming from

00:42:42,050 --> 00:42:50,450
service worker okay chrome devtools is

00:42:47,210 --> 00:42:54,140
again a good place to do your debugging

00:42:50,450 --> 00:42:56,540
so if you respect if you open your dev

00:42:54,140 --> 00:42:58,130
tools for a page which is controlled by

00:42:56,540 --> 00:43:01,450
a service worker there would be a

00:42:58,130 --> 00:43:04,060
service worker which you could inspect

00:43:01,450 --> 00:43:06,369
in the service worker tab and again you

00:43:04,060 --> 00:43:08,500
could add break points and when you

00:43:06,369 --> 00:43:10,089
service worker runs it would show you a

00:43:08,500 --> 00:43:15,220
stack of Neurology variables and

00:43:10,089 --> 00:43:16,599
everything the so the code which we saw

00:43:15,220 --> 00:43:18,910
right now the examples which we saw

00:43:16,599 --> 00:43:22,660
right now it had it included a lot of

00:43:18,910 --> 00:43:25,270
code to do very simple simple stops so

00:43:22,660 --> 00:43:28,630
there's a library called as service

00:43:25,270 --> 00:43:31,900
worker toolbox now let's take a look at

00:43:28,630 --> 00:43:33,970
a third example now all that codes all

00:43:31,900 --> 00:43:37,000
the code says is toolbox tort router or

00:43:33,970 --> 00:43:38,980
get / all the requests basically /

00:43:37,000 --> 00:43:41,770
aspect it means all of the requests so

00:43:38,980 --> 00:43:43,210
for all of the requests global toolbox

00:43:41,770 --> 00:43:46,900
that cash first use the cash first

00:43:43,210 --> 00:43:50,079
strategy so in order to do a offline

00:43:46,900 --> 00:43:51,790
first application all you need to do is

00:43:50,079 --> 00:43:53,320
just write this piece of code and

00:43:51,790 --> 00:43:55,810
include the service worker toolbox

00:43:53,320 --> 00:44:01,359
library rather than doing all of those

00:43:55,810 --> 00:44:02,890
mumbo Jumbo's which we do it and the two

00:44:01,359 --> 00:44:04,960
common use cases which we came across

00:44:02,890 --> 00:44:07,510
while preparing the demo so by default

00:44:04,960 --> 00:44:11,079
your service workers would go ahead and

00:44:07,510 --> 00:44:13,089
fetch a anonymous response it would not

00:44:11,079 --> 00:44:16,089
set the send the kooky back and the back

00:44:13,089 --> 00:44:18,970
in the request so there's a flag which

00:44:16,089 --> 00:44:20,920
you could set credentials true if you if

00:44:18,970 --> 00:44:23,440
you send a request with credentials to

00:44:20,920 --> 00:44:25,390
your cookie will be sent along with the

00:44:23,440 --> 00:44:28,869
request headers and you'll receive a

00:44:25,390 --> 00:44:31,420
authenticated response if you need to

00:44:28,869 --> 00:44:35,950
cash cross-origin requests you could

00:44:31,420 --> 00:44:39,420
pass it a another flag called mode now

00:44:35,950 --> 00:44:41,470
mode by default it's set to quash so it

00:44:39,420 --> 00:44:45,790
respects the cross sergeant request

00:44:41,470 --> 00:44:47,829
sharing principles but if you could set

00:44:45,790 --> 00:44:49,150
it to know course and it would still

00:44:47,829 --> 00:44:51,670
fetch a response for you from a

00:44:49,150 --> 00:44:53,440
different origin the only difference

00:44:51,670 --> 00:44:56,290
here would be it would be an opaque

00:44:53,440 --> 00:44:58,750
response by an opening response I mean

00:44:56,290 --> 00:45:00,520
that the Jew the response the response

00:44:58,750 --> 00:45:04,480
that status you would never get to know

00:45:00,520 --> 00:45:08,079
if it succeeded but if it passes it you

00:45:04,480 --> 00:45:10,510
will have the data in the cache so the

00:45:08,079 --> 00:45:12,970
demo quickly talk to talking about the

00:45:10,510 --> 00:45:14,740
demo what we're going to do here so we

00:45:12,970 --> 00:45:15,279
were building the account website for

00:45:14,740 --> 00:45:18,669
drupal cam

00:45:15,279 --> 00:45:20,199
khooneh and we we will also

00:45:18,669 --> 00:45:21,969
experimenting with service workers so we

00:45:20,199 --> 00:45:23,589
thought that why not give users and

00:45:21,969 --> 00:45:25,959
offline experience users were demanding

00:45:23,589 --> 00:45:29,259
for an app so we were like let's build a

00:45:25,959 --> 00:45:32,199
mobile web mobile web app present

00:45:29,259 --> 00:45:35,559
building mobile apps so we expended

00:45:32,199 --> 00:45:37,439
service workers and we allow the users

00:45:35,559 --> 00:45:41,439
to access the website offline right now

00:45:37,439 --> 00:45:44,799
provide an app like experience the users

00:45:41,439 --> 00:45:45,999
can add use to this can use the

00:45:44,799 --> 00:45:47,919
actress edgell feature even though

00:45:45,999 --> 00:45:49,689
they're offline so what happens is when

00:45:47,919 --> 00:45:51,909
they're offline they hit at the schedule

00:45:49,689 --> 00:45:54,699
the data gets stored in the index TV or

00:45:51,909 --> 00:45:56,829
the browser once they get off online

00:45:54,699 --> 00:45:58,150
this data gets synced back and the user

00:45:56,829 --> 00:46:02,349
receives a notification on her cell

00:45:58,150 --> 00:46:06,699
phone that your session preference has

00:46:02,349 --> 00:46:08,769
been saying successfully Drupal

00:46:06,699 --> 00:46:10,089
enhancement which we had to do there

00:46:08,769 --> 00:46:12,999
were a couple of routes which we had to

00:46:10,089 --> 00:46:15,329
build the very first one was the very

00:46:12,999 --> 00:46:20,049
first problem for us was to fetch the

00:46:15,329 --> 00:46:23,919
two precash the the aggregated CSS and

00:46:20,049 --> 00:46:27,130
JavaScript files because in Drupal we

00:46:23,919 --> 00:46:29,859
cannot fetch the we do not have a direct

00:46:27,130 --> 00:46:32,739
way to get the name of the service get

00:46:29,859 --> 00:46:34,509
the name of the CSS JavaScript files

00:46:32,739 --> 00:46:37,299
those are like random hash is generated

00:46:34,509 --> 00:46:39,909
right that was one of the problems so we

00:46:37,299 --> 00:46:44,140
created a new route and Drupal 8 to do

00:46:39,909 --> 00:46:46,150
that the second one was so we were using

00:46:44,140 --> 00:46:49,089
flats for active will feature and

00:46:46,150 --> 00:46:50,919
we had to write a customer out to handle

00:46:49,089 --> 00:46:52,299
the background sync operations because

00:46:50,919 --> 00:46:56,709
the data need to be posted back to the

00:46:52,299 --> 00:46:58,989
Drupal server the third thing was

00:46:56,709 --> 00:47:04,179
cashing the session and sponsor URL so

00:46:58,989 --> 00:47:07,179
there was no direct way we had to be had

00:47:04,179 --> 00:47:09,789
for getting the list of notes the node

00:47:07,179 --> 00:47:14,559
IDs so we created a two different views

00:47:09,789 --> 00:47:16,299
with res export format and session jason

00:47:14,559 --> 00:47:18,669
and responses or jason which were

00:47:16,299 --> 00:47:21,519
returning as the jew Jason objects hook

00:47:18,669 --> 00:47:23,919
page attachment alters page attachments

00:47:21,519 --> 00:47:26,349
alter to include the serviceworker JS

00:47:23,919 --> 00:47:28,419
file and manifesto Jason so we also in

00:47:26,349 --> 00:47:29,170
period integrated the progressive web

00:47:28,419 --> 00:47:32,950
app

00:47:29,170 --> 00:47:34,569
concept into this cash strategy which

00:47:32,950 --> 00:47:37,030
have been implemented our offline first

00:47:34,569 --> 00:47:38,710
Network first slow connections in case

00:47:37,030 --> 00:47:42,700
of slow connections offline first kicks

00:47:38,710 --> 00:47:45,790
in and at a gate works well and there is

00:47:42,700 --> 00:47:50,799
an offline page which redirects so I'll

00:47:45,790 --> 00:47:52,150
quickly go through the demo I don't

00:47:50,799 --> 00:47:55,410
think we have much of the time left but

00:47:52,150 --> 00:47:55,410
yeah let me just

00:48:07,789 --> 00:48:31,190
so whoops what just sorry yeah slides

00:48:21,349 --> 00:48:31,190
yes lie superbly yeah this one this side

00:48:31,400 --> 00:48:38,130
yeah yeah yeah I'll share the URL as

00:48:34,559 --> 00:48:40,500
well it's I'm not very sure if internet

00:48:38,130 --> 00:48:43,220
is working well let me quickly open that

00:48:40,500 --> 00:48:43,220
directly

00:48:50,609 --> 00:48:53,609
disappear

00:48:58,599 --> 00:49:05,079
so yeah if you could browse this web

00:49:02,440 --> 00:49:07,739
page from your cell phone on an Android

00:49:05,079 --> 00:49:09,670
Chrome browser it would look much better

00:49:07,739 --> 00:49:16,930
compared to the demo which I show you

00:49:09,670 --> 00:49:18,549
here so yeah let's take a look at the

00:49:16,930 --> 00:49:21,660
service worker which isn't let me

00:49:18,549 --> 00:49:21,660
actually measure my display

00:49:40,540 --> 00:49:45,740
so I'm actually going to be register the

00:49:42,859 --> 00:49:47,690
service worker which is in an action

00:49:45,740 --> 00:49:56,710
right now and purge all the cash which

00:49:47,690 --> 00:50:00,770
is creating an index TV okay cool so

00:49:56,710 --> 00:50:03,890
I'll have to refresh so the first

00:50:00,770 --> 00:50:06,589
refresh it's going to register my

00:50:03,890 --> 00:50:08,630
service worker do nothing else the

00:50:06,589 --> 00:50:10,970
service workers are not taking control

00:50:08,630 --> 00:50:13,160
of a website right now the next refresh

00:50:10,970 --> 00:50:17,210
would make service workers take control

00:50:13,160 --> 00:50:20,089
of your website whoops so see a stop

00:50:17,210 --> 00:50:22,309
because there's another tab which is

00:50:20,089 --> 00:50:25,490
open which is being controlled by my

00:50:22,309 --> 00:50:31,339
previous service worker so I'll need to

00:50:25,490 --> 00:50:36,859
close this top first and then we

00:50:31,339 --> 00:50:38,780
register it so you saw the switch the

00:50:36,859 --> 00:50:41,390
switch from is installing to the active

00:50:38,780 --> 00:50:42,920
state see how it goes into the anti

00:50:41,390 --> 00:50:45,680
still installing state and then into the

00:50:42,920 --> 00:50:47,869
active state and in the meanwhile our

00:50:45,680 --> 00:50:52,849
cash so these are the sources which are

00:50:47,869 --> 00:50:54,980
which we are pre cashing there's some

00:50:52,849 --> 00:50:56,839
dynamic web urs which we RP cashing

00:50:54,980 --> 00:50:59,859
which is here noo tidies for your

00:50:56,839 --> 00:51:03,470
session pages and response detail pages

00:50:59,859 --> 00:51:05,990
the assets are you are CSS and

00:51:03,470 --> 00:51:07,579
JavaScript files which are which are you

00:51:05,990 --> 00:51:09,440
aggregated season JavaScript files which

00:51:07,579 --> 00:51:13,369
are getting loaded on this website so

00:51:09,440 --> 00:51:15,140
they have been cached as well so this is

00:51:13,369 --> 00:51:18,740
what a normal user will see when he's

00:51:15,140 --> 00:51:23,240
online let me see from logged in yeah

00:51:18,740 --> 00:51:28,940
i'm logged in as huge 23 now let's say

00:51:23,240 --> 00:51:32,809
we go offline okay we're offline the

00:51:28,940 --> 00:51:35,869
flag says it's offline so yeah let's do

00:51:32,809 --> 00:51:37,579
a refresh the page still works the

00:51:35,869 --> 00:51:40,000
images then are getting loaded and there

00:51:37,579 --> 00:51:42,079
that's why they are replaced with a

00:51:40,000 --> 00:51:43,910
static background image which I'm doing

00:51:42,079 --> 00:51:44,400
this is something again which will

00:51:43,910 --> 00:51:49,020
handling

00:51:44,400 --> 00:51:50,940
service workers let's say let's browse

00:51:49,020 --> 00:51:55,130
through the website a little bit go to

00:51:50,940 --> 00:51:59,460
sessions the lessons list of sessions

00:51:55,130 --> 00:52:04,650
sponsors it works fine about page when

00:51:59,460 --> 00:52:06,930
you when you yeah my should you we

00:52:04,650 --> 00:52:09,960
haven't cashed this page so my should

00:52:06,930 --> 00:52:11,430
rule doesn't up here but at the same

00:52:09,960 --> 00:52:13,339
time we are cashing my you'll page

00:52:11,430 --> 00:52:17,970
when a user hits it for the first time

00:52:13,339 --> 00:52:26,510
so let's say let's go online and hit my

00:52:17,970 --> 00:52:26,510
schedule now okay now we go back offline

00:52:26,660 --> 00:52:36,630
the my schedule page works right another

00:52:32,849 --> 00:52:39,150
interesting thing to note here is what

00:52:36,630 --> 00:52:42,329
we did was when you're online and you go

00:52:39,150 --> 00:52:46,049
to the sessions page the actor she did

00:52:42,329 --> 00:52:50,039
feature it works the way it should using

00:52:46,049 --> 00:52:53,099
flags okay and you see this the button

00:52:50,039 --> 00:52:55,589
is green as soon as you go offline these

00:52:53,099 --> 00:52:58,559
buttons would turn gray telling a user

00:52:55,589 --> 00:53:01,650
that you're offline right now you could

00:52:58,559 --> 00:53:03,599
basically add it to your should you but

00:53:01,650 --> 00:53:06,569
the data would get sink back only once

00:53:03,599 --> 00:53:13,049
you get back online okay so let's try

00:53:06,569 --> 00:53:16,380
adding another item to our schedule it's

00:53:13,049 --> 00:53:22,920
in this light it's nol a dot QED 42

00:53:16,380 --> 00:53:24,630
dotnet use https yeah so as soon as you

00:53:22,920 --> 00:53:27,900
click on add to schedule you see this

00:53:24,630 --> 00:53:31,829
pop-up the choose the chrome api it's

00:53:27,900 --> 00:53:32,880
asking for it's asking you if your

00:53:31,829 --> 00:53:36,539
chrome should be able to send you

00:53:32,880 --> 00:53:42,420
notifications or no if you allow the

00:53:36,539 --> 00:53:45,690
data it gets stored in your index TV so

00:53:42,420 --> 00:53:48,569
yeah the session ID the user ID and the

00:53:45,690 --> 00:53:51,329
actual it should perform these this data

00:53:48,569 --> 00:53:53,520
it gets stored in your index DB for the

00:53:51,329 --> 00:53:58,849
time you offline as soon as you go back

00:53:53,520 --> 00:54:10,289
online this data will get synced back

00:53:58,849 --> 00:54:12,059
hold on come on come on okay finally we

00:54:10,289 --> 00:54:13,499
went online and you see this

00:54:12,059 --> 00:54:15,359
notification because the node beginning

00:54:13,499 --> 00:54:17,640
that your preference I sessions has

00:54:15,359 --> 00:54:21,359
think successfully this data gets pushed

00:54:17,640 --> 00:54:23,759
out from your index TV and now if you go

00:54:21,359 --> 00:54:26,309
in and visit your my schedule page you

00:54:23,759 --> 00:54:31,459
should ideally see this session in your

00:54:26,309 --> 00:54:35,910
sessions list yep there we go so yeah

00:54:31,459 --> 00:54:37,499
this example I would have loved to do a

00:54:35,910 --> 00:54:41,849
good walk through as well but I don't

00:54:37,499 --> 00:54:44,699
think we have much of time left but yeah

00:54:41,849 --> 00:54:47,459
back to the slides oh yeah one more

00:54:44,699 --> 00:54:50,239
interesting thing so since we couldn't

00:54:47,459 --> 00:54:53,400
do the demo on the phone we recorded a

00:54:50,239 --> 00:54:57,029
the implementation of pwa with the

00:54:53,400 --> 00:54:59,459
application as well so the user logs him

00:54:57,029 --> 00:55:01,529
where the browser he can choose to add

00:54:59,459 --> 00:55:04,709
the site into the home screen so this is

00:55:01,529 --> 00:55:09,630
what installable web app means in terms

00:55:04,709 --> 00:55:12,289
of pwa so as soon as he added with to

00:55:09,630 --> 00:55:15,329
the home screen it gets installed like a

00:55:12,289 --> 00:55:16,709
normal mobile application when you hit

00:55:15,329 --> 00:55:18,089
it and when you try to browse it if

00:55:16,709 --> 00:55:20,009
someone who doesn't know Drupal they

00:55:18,089 --> 00:55:23,369
would definitely say that it's a native

00:55:20,009 --> 00:55:24,959
app it's not a mobile app so I've tried

00:55:23,369 --> 00:55:26,999
this a couple of my colleagues and they

00:55:24,959 --> 00:55:32,099
were like you built an app for the

00:55:26,999 --> 00:55:38,699
drupalcamp una see ya you can browse

00:55:32,099 --> 00:55:41,189
through the stop no see ya you can

00:55:38,699 --> 00:55:46,609
browse through the website like a native

00:55:41,189 --> 00:55:51,779
app right now yeah it is the home page

00:55:46,609 --> 00:55:56,249
let's go to the sessions page now see

00:55:51,779 --> 00:56:00,719
the same buttons over here now you go

00:55:56,249 --> 00:56:05,579
offline and try adding something to your

00:56:00,719 --> 00:56:07,469
schedule the chrome will ask you here as

00:56:05,579 --> 00:56:10,439
well if you want to allow users to

00:56:07,469 --> 00:56:11,960
receive notifications or no next step

00:56:10,439 --> 00:56:13,760
would be go online

00:56:11,960 --> 00:56:15,349
as soon as you go online you see a

00:56:13,760 --> 00:56:16,970
notification appearing on your phone

00:56:15,349 --> 00:56:19,640
which says that your preference has been

00:56:16,970 --> 00:56:25,520
sent successfully and then you browse to

00:56:19,640 --> 00:56:29,300
your why should you page 22 to do and

00:56:25,520 --> 00:56:33,109
there you'll see that the session it

00:56:29,300 --> 00:56:36,560
appears in here my schedule page so yeah

00:56:33,109 --> 00:56:48,080
that was about demo moving back whoa

00:56:36,560 --> 00:56:50,690
what happened to this okay see the

00:56:48,080 --> 00:56:53,510
resources that we used for preparing

00:56:50,690 --> 00:56:55,839
slides are down below if you want to try

00:56:53,510 --> 00:56:58,580
it for yourself go to browse that URL

00:56:55,839 --> 00:57:01,310
the code base it's available at and the

00:56:58,580 --> 00:57:03,710
github repo down below if you want to

00:57:01,310 --> 00:57:06,170
read more about service workers the

00:57:03,710 --> 00:57:10,880
these are a couple of us which you could

00:57:06,170 --> 00:57:16,030
always refer to and any questions but

00:57:10,880 --> 00:57:16,030
you guys have yep yep

00:57:31,460 --> 00:57:38,520
so if you're doing an offline app like

00:57:34,710 --> 00:57:41,880
the one who just showed would you

00:57:38,520 --> 00:57:45,290
recommend you know caching full HTML

00:57:41,880 --> 00:57:47,970
pages for the 20 sessions 50 sessions or

00:57:45,290 --> 00:57:50,280
making each of those rest requests so

00:57:47,970 --> 00:57:53,720
that is checklist I would say ok so a

00:57:50,280 --> 00:57:55,770
your site is going to not you know

00:57:53,720 --> 00:57:59,760
because the question I have is if you

00:57:55,770 --> 00:58:01,680
pre load the whole page and your side

00:57:59,760 --> 00:58:02,790
will still work even without JavaScript

00:58:01,680 --> 00:58:05,070
you just won't get service worker

00:58:02,790 --> 00:58:08,160
integration so right or if you make it

00:58:05,070 --> 00:58:09,360
rest requests then your site's only

00:58:08,160 --> 00:58:10,830
going to work with JavaScript you've got

00:58:09,360 --> 00:58:13,500
a lot more JavaScript on the client side

00:58:10,830 --> 00:58:15,510
but you're downloading a third as much

00:58:13,500 --> 00:58:17,310
data or less yes so how do you decide

00:58:15,510 --> 00:58:19,470
what trade off to make yes sir that's

00:58:17,310 --> 00:58:22,800
the reason I said that I would I would

00:58:19,470 --> 00:58:24,900
personally go for a rest rest endpoints

00:58:22,800 --> 00:58:27,210
so pulling out the data so this way it

00:58:24,900 --> 00:58:29,370
makes it makes my life very easy I can

00:58:27,210 --> 00:58:32,580
separate out the app shell and I can

00:58:29,370 --> 00:58:35,250
separate out the data so a user would

00:58:32,580 --> 00:58:38,910
initially see an app shell a header and

00:58:35,250 --> 00:58:42,030
probably a Jeff animation but as soon as

00:58:38,910 --> 00:58:44,430
the data loads in I I populate them

00:58:42,030 --> 00:58:48,540
apart from that I could do a lot more as

00:58:44,430 --> 00:58:50,760
well when i use rest endpoints like

00:58:48,540 --> 00:58:52,920
doing background sync becomes very easy

00:58:50,760 --> 00:58:54,390
so let's say a user is browsing this web

00:58:52,920 --> 00:58:56,330
page on a slow connection and there's a

00:58:54,390 --> 00:59:00,570
new item which has been added now

00:58:56,330 --> 00:59:02,640
pulling only one new node pulling a

00:59:00,570 --> 00:59:05,280
couple of data related to just one node

00:59:02,640 --> 00:59:07,470
is relatively simple for me compared to

00:59:05,280 --> 00:59:12,060
pulling out the entire entire listing

00:59:07,470 --> 00:59:14,130
page right okay and then the demo site

00:59:12,060 --> 00:59:19,980
you're just showing is that built on

00:59:14,130 --> 00:59:25,080
Drupal 8 there yeah sweet thank you any

00:59:19,980 --> 00:59:27,840
other questions hi if service work is

00:59:25,080 --> 00:59:31,650
running in the browser on a mobile what

00:59:27,840 --> 00:59:33,630
happens if you are offline do something

00:59:31,650 --> 00:59:36,030
close the browser do something with the

00:59:33,630 --> 00:59:37,260
notification still yep yep so the

00:59:36,030 --> 00:59:39,690
notification runs ragar

00:59:37,260 --> 00:59:41,220
whether the browser's exactly because

00:59:39,690 --> 00:59:54,510
service works as a separate thread from

00:59:41,220 --> 00:59:56,400
your browser yeah into the questions big

00:59:54,510 --> 01:00:00,630
pipe is entirely different domain

00:59:56,400 --> 01:00:02,970
compared to service workers yes yes so

01:00:00,630 --> 01:00:06,300
the way I would see is big by working a

01:00:02,970 --> 01:00:09,480
long with service workers would like

01:00:06,300 --> 01:00:16,920
really pump up a website to what extent

01:00:09,480 --> 01:00:19,290
I can't even imagine yeah okay what I

01:00:16,920 --> 01:00:22,470
heard about the caching mm-hmm what

01:00:19,290 --> 01:00:29,310
cancer service workers do besides the

01:00:22,470 --> 01:00:31,470
caching let's say I have a mobile I have

01:00:29,310 --> 01:00:36,420
a quote for mobile using javascript and

01:00:31,470 --> 01:00:41,490
when the cell phones screen gets off

01:00:36,420 --> 01:00:45,210
that it doesn't work great show us the

01:00:41,490 --> 01:00:48,450
can we make it the world using service

01:00:45,210 --> 01:00:51,450
workers i dint fully get your question

01:00:48,450 --> 01:00:55,230
actually so basically you're saying that

01:00:51,450 --> 01:00:57,510
when your mobile screen is off your java

01:00:55,230 --> 01:00:59,970
script doesn't work but what service

01:00:57,510 --> 01:01:03,090
worker work is that your question yeah

01:00:59,970 --> 01:01:07,410
yes I have let's see I haven't called

01:01:03,090 --> 01:01:11,100
that in every 10 seconds checks with the

01:01:07,410 --> 01:01:14,880
sugar using javascript but when the

01:01:11,100 --> 01:01:17,190
script gets off on mobile that's Andrew

01:01:14,880 --> 01:01:18,300
it starts it no so it depends on what

01:01:17,190 --> 01:01:19,530
you're doing with the JavaScript if

01:01:18,300 --> 01:01:20,940
you're doing some Dom manipulation

01:01:19,530 --> 01:01:22,110
that's not possible with service workers

01:01:20,940 --> 01:01:27,000
because those worker doesn't control

01:01:22,110 --> 01:01:28,680
your document so let's say let's

01:01:27,000 --> 01:01:32,100
consider one of the use cases i need a

01:01:28,680 --> 01:01:37,080
pull request cannot yeah it can do the

01:01:32,100 --> 01:01:38,490
pull it can do a network poll do a

01:01:37,080 --> 01:01:40,970
network pull in the background even few

01:01:38,490 --> 01:01:40,970
screen is off

01:01:42,099 --> 01:01:46,630
yeah there's one interesting use case by

01:01:44,829 --> 01:01:51,369
the way with service workers which I was

01:01:46,630 --> 01:01:54,819
again planning to demo but so how many

01:01:51,369 --> 01:01:57,430
of you know about geofencing right so

01:01:54,819 --> 01:02:00,700
service workers is a very interesting

01:01:57,430 --> 01:02:03,339
use case for websites which are going to

01:02:00,700 --> 01:02:06,220
display different data around different

01:02:03,339 --> 01:02:08,019
geographical locations so as soon as you

01:02:06,220 --> 01:02:11,400
move from one place to another service

01:02:08,019 --> 01:02:14,079
worker would in background pull data

01:02:11,400 --> 01:02:17,529
according to that geographical location

01:02:14,079 --> 01:02:19,690
and presented with that data so it's

01:02:17,529 --> 01:02:21,999
right on the move so let's say if you

01:02:19,690 --> 01:02:26,259
divide this new orleans into sectors

01:02:21,999 --> 01:02:28,359
into geo geo fence the locations let's

01:02:26,259 --> 01:02:30,880
say you put French Quarter in one of the

01:02:28,359 --> 01:02:33,729
fences and put downtown in another

01:02:30,880 --> 01:02:35,259
French you move out of downtown and

01:02:33,729 --> 01:02:37,239
you'll see a notification on your cell

01:02:35,259 --> 01:02:41,229
phone which says that you moved out of

01:02:37,239 --> 01:02:49,229
downtown and this is the data which the

01:02:41,229 --> 01:02:58,329
data will be refresh basically yeah

01:02:49,229 --> 01:03:00,969
welcome any other questions no thanks

01:02:58,329 --> 01:03:03,749
guys feel free to evaluate our session

01:03:00,969 --> 01:03:06,190
and put your comments on the URL below

01:03:03,749 --> 01:03:08,309
thank you thank you so much for

01:03:06,190 --> 01:03:08,309

YouTube URL: https://www.youtube.com/watch?v=gKNR4rLdUU8


