Title: DrupalCon New Orleans 2016: Elm - Frontend with Guarantees
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	You had enough of Angular1, and as good as React may be, you are still trying to figure out what router library to use and how to setup your project.

Elm is a functional programming (FP) language for your browser. It has no runtime exceptions, libraries with guarantees, Virtual-dom rendering, Clean syntax and more.

The reason Gizra decided to go with Elm is we know it will save us money (Oh, and it's also really  fun to work with).

PROS & CONS

Like any other tool, it has pros and cons:

It's not mainstream.

The community is small, which means there are not tons of libraries out there, so you'll have to scratch your own itch more often than not.

There are not many blog posts/tutorials out there, especially if  compared to popular frameworks such as React.

There is a steep learning curve with a new unknown syntax that  is not JS.

It's different from other things we know.

And the pros, which are totally subjective:

It's not JS. Obviously this statement is controversial, but it's no secret that JS can be very confusing.

This steep  learning curve has an interesting side effect: all the developers in the issue queue/mailing list, even the newbies, are seasoned developers. It's amazing to see how rapidly newcomers learn the new stuff and contribute back.

Once you pick up the concepts and follow the Elm architecture, the pieces start falling really neatly into their natural place. Each component in your app has the exact same structure as the other components and the root component itself.

There is a compiler that stops you from screwing things up - something we humans tend to constantly do.

It's different from other things we know. I think it's actually good because we have had enough of "the old way" (read as "Angular 1"). Even React & Redux, with their immense popularity and community,  felt like a step in the right direction, but not quite the radical new approach to the problem we were looking for.

What You Will Learn

The advantages of functional programming

What are "Effects", and why you want to push them out of your App's logic

How your Elm SPA (Single Page Application) can work with Headless Drupal (hint: easily)

How the compiler forces us to be better developers
Captions: 
	00:00:02,929 --> 00:00:08,610
so I asked my wife what what do you mean

00:00:06,509 --> 00:00:10,559
exactly tell more about myself and she

00:00:08,610 --> 00:00:12,929
was you know like I don't know exactly

00:00:10,559 --> 00:00:15,509
tell them your name your age and the

00:00:12,929 --> 00:00:17,580
number of kids that you have so I went a

00:00:15,509 --> 00:00:20,820
log and I created a web application in

00:00:17,580 --> 00:00:24,420
elm that tells you my name my aged and

00:00:20,820 --> 00:00:26,160
the number of kids that I have and you

00:00:24,420 --> 00:00:28,170
know it took me a lot of time I've

00:00:26,160 --> 00:00:30,510
created you know the entire application

00:00:28,170 --> 00:00:32,250
and the gifts and the videos and the

00:00:30,510 --> 00:00:34,230
presentation and whatnot and after many

00:00:32,250 --> 00:00:36,870
many hours I've decided to show it back

00:00:34,230 --> 00:00:40,050
to show it to my wife and when I showed

00:00:36,870 --> 00:00:42,360
that this give this gift the only thing

00:00:40,050 --> 00:00:46,170
she had to tell me was you idiot

00:00:42,360 --> 00:00:48,210
you're only 37 so even though it's

00:00:46,170 --> 00:00:51,590
biographically incorrect I'd still like

00:00:48,210 --> 00:00:54,719
to proceed with the presentation so

00:00:51,590 --> 00:00:57,570
indeed my name is Amitabh orsten I'm the

00:00:54,719 --> 00:01:00,210
CTO and co-owner of Giza we're a web

00:00:57,570 --> 00:01:03,600
development shop based in Israel and

00:01:00,210 --> 00:01:18,330
since the beginning of 2016 we have an

00:01:03,600 --> 00:01:20,670
official US office so my twitter handler

00:01:18,330 --> 00:01:24,780
is uneatable so if you want to tweet go

00:01:20,670 --> 00:01:26,460
ahead it makes me feel important so

00:01:24,780 --> 00:01:28,140
today I would like to talk about Elm

00:01:26,460 --> 00:01:30,299
which is basically a different approach

00:01:28,140 --> 00:01:32,640
to web application but let's start by

00:01:30,299 --> 00:01:34,590
understanding what problem it solves so

00:01:32,640 --> 00:01:36,509
you couldn't agree or disagree but one

00:01:34,590 --> 00:01:38,880
of the problems I call it this is where

00:01:36,509 --> 00:01:40,770
you might disagree of all JavaScript

00:01:38,880 --> 00:01:43,740
framework is what they have in common

00:01:40,770 --> 00:01:47,520
today they are all written in JavaScript

00:01:43,740 --> 00:01:50,670
and that's fine if you're a JavaScript

00:01:47,520 --> 00:01:54,420
ninja which nobody is or they are very

00:01:50,670 --> 00:01:56,939
very few and when I'm going to show you

00:01:54,420 --> 00:01:59,340
about Elm so oftentimes people say it so

00:01:56,939 --> 00:02:00,810
what's wrong about JavaScript I think

00:01:59,340 --> 00:02:02,490
there's a lot of things that are wrong

00:02:00,810 --> 00:02:04,590
I'm not going to I'm not going to get

00:02:02,490 --> 00:02:06,840
into the argument of the JavaScript

00:02:04,590 --> 00:02:08,590
ecosystem and the fact that - two days

00:02:06,840 --> 00:02:10,899
ago we had grunt and yes

00:02:08,590 --> 00:02:13,840
they we had gulp and today it's cool to

00:02:10,899 --> 00:02:16,569
use NPM script and finding what the real

00:02:13,840 --> 00:02:20,349
best practices are but rather I want to

00:02:16,569 --> 00:02:22,450
show you a pragmatic approach or our own

00:02:20,349 --> 00:02:25,840
approach in gira which is basically

00:02:22,450 --> 00:02:27,819
saying we want to build web application

00:02:25,840 --> 00:02:28,690
the quickest way possible the cheapest

00:02:27,819 --> 00:02:31,330
way possible

00:02:28,690 --> 00:02:34,989
solid web application and also keep our

00:02:31,330 --> 00:02:36,700
developers morale high so in this in

00:02:34,989 --> 00:02:39,549
this session I'll probably be bashing

00:02:36,700 --> 00:02:42,370
angular one a bit just because you know

00:02:39,549 --> 00:02:44,140
it's so popular to hate angular 1 I have

00:02:42,370 --> 00:02:46,930
nothing really against it I'm just going

00:02:44,140 --> 00:02:49,720
to show it the mindset that I at least

00:02:46,930 --> 00:02:52,510
know of angular 1 and how it corresponds

00:02:49,720 --> 00:02:55,150
in Elm and basically just to show you

00:02:52,510 --> 00:02:59,670
how I think that Elm provides better

00:02:55,150 --> 00:03:02,319
tools to deal with front-end development

00:02:59,670 --> 00:03:03,790
so Elm is a function a functional

00:03:02,319 --> 00:03:05,319
programming language if you know what

00:03:03,790 --> 00:03:06,670
functional programming language is good

00:03:05,319 --> 00:03:09,190
for you if you don't know we'll cover

00:03:06,670 --> 00:03:11,680
some some of the things in general the

00:03:09,190 --> 00:03:13,780
gist of it I would say that function the

00:03:11,680 --> 00:03:16,859
function that we have don't have state

00:03:13,780 --> 00:03:20,920
and data is immutable that's probably

00:03:16,859 --> 00:03:22,750
the two important things that we have so

00:03:20,920 --> 00:03:25,690
what you can see on the screen it's the

00:03:22,750 --> 00:03:28,569
code this is this is Elm it looks

00:03:25,690 --> 00:03:31,090
similar to Haskell in case you've you've

00:03:28,569 --> 00:03:34,060
seen Haskell it's a compiled language

00:03:31,090 --> 00:03:36,069
it's being compiled into HTML Java and

00:03:34,060 --> 00:03:38,709
CSS it doesn't mean you cannot use

00:03:36,069 --> 00:03:40,389
bootstrap or semantic UI you can but if

00:03:38,709 --> 00:03:46,510
you want to have some inline CSS or

00:03:40,389 --> 00:03:49,359
stuff like that you can do it so we have

00:03:46,510 --> 00:03:51,489
the elm language and along that we have

00:03:49,359 --> 00:03:53,889
also the Elm architecture which is

00:03:51,489 --> 00:03:57,849
basically a set of best practices on how

00:03:53,889 --> 00:04:00,310
to how to come and how to structure our

00:03:57,849 --> 00:04:02,200
application our application how to

00:04:00,310 --> 00:04:04,630
connect the different components and

00:04:02,200 --> 00:04:07,329
basically we know MVC Model View

00:04:04,630 --> 00:04:08,919
controller in in Elm in the Elm active

00:04:07,329 --> 00:04:11,200
architecture it's pretty similar we have

00:04:08,919 --> 00:04:13,419
the model update the view we'll see a

00:04:11,200 --> 00:04:15,730
few code example that will explain that

00:04:13,419 --> 00:04:17,289
and basically the Elm architecture have

00:04:15,730 --> 00:04:19,450
a few principles I just want to share

00:04:17,289 --> 00:04:20,729
with you the two important are key to

00:04:19,450 --> 00:04:24,130
important principle

00:04:20,729 --> 00:04:27,250
so the first principle is saying we have

00:04:24,130 --> 00:04:29,259
a single source of truth and the entire

00:04:27,250 --> 00:04:31,690
state our entire application in health

00:04:29,259 --> 00:04:34,810
is held in one single record tree in one

00:04:31,690 --> 00:04:36,070
big object and when I saw that when I

00:04:34,810 --> 00:04:37,960
saw that for the first time it really

00:04:36,070 --> 00:04:40,660
resonated with me if that's even a thing

00:04:37,960 --> 00:04:43,210
that you say in English because in

00:04:40,660 --> 00:04:45,870
angular one if I would ask you where is

00:04:43,210 --> 00:04:48,039
your state you'd promise you know

00:04:45,870 --> 00:04:50,229
scratch your head a bit and you say well

00:04:48,039 --> 00:04:52,449
it's in the ui-router or in the router

00:04:50,229 --> 00:04:54,699
but then you remember that you have a

00:04:52,449 --> 00:04:57,789
few services and each service you know

00:04:54,699 --> 00:05:00,850
can have its own internal cache so you

00:04:57,789 --> 00:05:03,100
don't really know where where you don't

00:05:00,850 --> 00:05:04,810
really control the entire state of your

00:05:03,100 --> 00:05:07,650
application or you cannot control it

00:05:04,810 --> 00:05:10,360
easily add on top of that the fact that

00:05:07,650 --> 00:05:13,300
the a sync nature of JavaScript and

00:05:10,360 --> 00:05:14,740
again it's really really hard to know

00:05:13,300 --> 00:05:16,449
what is the condition of your web

00:05:14,740 --> 00:05:18,460
application and definitely we're in

00:05:16,449 --> 00:05:20,229
cases of bugs and we have a lot of bugs

00:05:18,460 --> 00:05:23,020
in front end just because it's so hard

00:05:20,229 --> 00:05:25,419
it's really hard to reproduce it's

00:05:23,020 --> 00:05:29,020
really hard to reproduce those those

00:05:25,419 --> 00:05:31,300
problem so this idea this principle of

00:05:29,020 --> 00:05:33,460
having everything in one single record

00:05:31,300 --> 00:05:34,960
twin is maybe counterintuitive to the

00:05:33,460 --> 00:05:36,669
fact that we are thinking well

00:05:34,960 --> 00:05:38,740
everything should you know separation of

00:05:36,669 --> 00:05:40,960
concerns everything should be completely

00:05:38,740 --> 00:05:43,210
separated so yeah the Elm architecture

00:05:40,960 --> 00:05:44,979
is still saying everything should be

00:05:43,210 --> 00:05:46,930
separate there is there still a

00:05:44,979 --> 00:05:49,659
separation of concerns but still the

00:05:46,930 --> 00:05:52,419
entire state is held in one single place

00:05:49,659 --> 00:05:56,289
just to help us control our web

00:05:52,419 --> 00:05:59,199
application the second principle is that

00:05:56,289 --> 00:06:02,560
state is read-only and you know folks

00:05:59,199 --> 00:06:05,110
it's 2016 we all already understand that

00:06:02,560 --> 00:06:07,570
the root of all evil in this world this

00:06:05,110 --> 00:06:11,110
heartwarming positive non cynical world

00:06:07,570 --> 00:06:12,370
is two-way data-binding and you know you

00:06:11,110 --> 00:06:15,550
probably remember yourself

00:06:12,370 --> 00:06:17,220
thank you judge for laughing mission

00:06:15,550 --> 00:06:20,550
accomplished

00:06:17,220 --> 00:06:23,430
I remember yourself myself going into

00:06:20,550 --> 00:06:25,530
angular one side three and a half years

00:06:23,430 --> 00:06:27,630
ago and you know checking the first

00:06:25,530 --> 00:06:30,420
example where you feel in the input form

00:06:27,630 --> 00:06:32,130
and it shows you your name hi and your

00:06:30,420 --> 00:06:34,530
name and I told myself oh my god I'm

00:06:32,130 --> 00:06:36,540
tied this is saving me so many jQuery

00:06:34,530 --> 00:06:39,390
lines and you know that thing that made

00:06:36,540 --> 00:06:41,790
us love angular want so much is the

00:06:39,390 --> 00:06:43,020
thing that we now hate it for this

00:06:41,790 --> 00:06:45,240
two-way data-binding

00:06:43,020 --> 00:06:47,490
because we have a big problem if we have

00:06:45,240 --> 00:06:48,660
this model-view-controller thing with

00:06:47,490 --> 00:06:52,170
the two-way data-binding

00:06:48,660 --> 00:06:53,730
our view our HTML is actually changing

00:06:52,170 --> 00:06:55,650
our model without necessarily the

00:06:53,730 --> 00:06:57,690
control and being involved over there

00:06:55,650 --> 00:07:01,530
and when the model is changing the data

00:06:57,690 --> 00:07:03,930
is changing it might cause effect of

00:07:01,530 --> 00:07:07,110
triggering other action other changes

00:07:03,930 --> 00:07:09,960
and again we are not able to control or

00:07:07,110 --> 00:07:15,300
understand the state the condition of

00:07:09,960 --> 00:07:17,460
our web application so back to our

00:07:15,300 --> 00:07:19,410
award-winning web application which is

00:07:17,460 --> 00:07:20,700
basically a glorified counter example

00:07:19,410 --> 00:07:22,560
I'd like to think that maybe I'm the

00:07:20,700 --> 00:07:25,710
first that was able to personalize a

00:07:22,560 --> 00:07:27,930
counter example but it's a counter

00:07:25,710 --> 00:07:29,550
example my friends and I'd like to show

00:07:27,930 --> 00:07:31,470
you through I'd like to show you some

00:07:29,550 --> 00:07:33,900
code and basically to show you how we

00:07:31,470 --> 00:07:35,580
are thinking Elm so definitely you don't

00:07:33,900 --> 00:07:38,010
need to understand every single line and

00:07:35,580 --> 00:07:40,470
command over here and definitely there

00:07:38,010 --> 00:07:43,200
is a learning curve to Elm I know I when

00:07:40,470 --> 00:07:45,210
when I saw the Elm syntax for the first

00:07:43,200 --> 00:07:46,950
time I closed it and I didn't go back to

00:07:45,210 --> 00:07:49,380
it for three months because it looks a

00:07:46,950 --> 00:07:51,060
bit daunting but I'll show you how

00:07:49,380 --> 00:07:54,270
things are making sense so even if you

00:07:51,060 --> 00:07:58,520
don't know Elm I'll show you how things

00:07:54,270 --> 00:08:01,530
you know fall into their the right place

00:07:58,520 --> 00:08:04,470
so this is the code that we have and

00:08:01,530 --> 00:08:06,120
I'll just go over it very quickly there

00:08:04,470 --> 00:08:08,070
is some boiler code that I'm not showing

00:08:06,120 --> 00:08:11,130
you I'd just like to show you the

00:08:08,070 --> 00:08:13,500
essence so we have a model called person

00:08:11,130 --> 00:08:16,020
we have a bunch of import stuff like you

00:08:13,500 --> 00:08:17,730
know in JavaScript we have this require

00:08:16,020 --> 00:08:20,490
thing but let's go to the interesting

00:08:17,730 --> 00:08:22,530
part we have here the model our model is

00:08:20,490 --> 00:08:25,289
basically just a record holding a few

00:08:22,530 --> 00:08:27,210
stuff like the age which is an integer

00:08:25,289 --> 00:08:29,430
now this is a compiled language it's a

00:08:27,210 --> 00:08:30,900
statically typed language it means age

00:08:29,430 --> 00:08:32,940
can only get integer

00:08:30,900 --> 00:08:36,450
there's no way you will be able to pass

00:08:32,940 --> 00:08:38,550
a string into into the edge just because

00:08:36,450 --> 00:08:40,169
the compiler will not will not let you

00:08:38,550 --> 00:08:42,180
do it this is part of the guarantees

00:08:40,169 --> 00:08:44,099
that elm brings with itself there are no

00:08:42,180 --> 00:08:45,510
runtime errors there are no crazy things

00:08:44,099 --> 00:08:47,790
that you suddenly don't understand how

00:08:45,510 --> 00:08:50,760
come you have a string being pushed into

00:08:47,790 --> 00:08:55,080
an integer so we have the age which is

00:08:50,760 --> 00:08:56,790
an integer the kids and the name and in

00:08:55,080 --> 00:09:01,200
the initial initialize model I just

00:08:56,790 --> 00:09:05,070
initialize a bunch of values watch me as

00:09:01,200 --> 00:09:09,089
I quickly completely ignore the init

00:09:05,070 --> 00:09:12,390
function there we ignored it and we

00:09:09,089 --> 00:09:14,580
reach this line that fills me with total

00:09:12,390 --> 00:09:17,010
joy and in effect maybe I could have

00:09:14,580 --> 00:09:18,810
stopped the presentation right here and

00:09:17,010 --> 00:09:22,290
if you're coming for react Redux it

00:09:18,810 --> 00:09:24,240
might make sense because again angular 1

00:09:22,290 --> 00:09:26,580
I'm looking at you if I would ask you

00:09:24,240 --> 00:09:29,910
about your fairly big but not too big

00:09:26,580 --> 00:09:32,910
angular 1 web application what are all

00:09:29,910 --> 00:09:36,690
the options are all the actions sorry a

00:09:32,910 --> 00:09:38,730
user can interact with your application

00:09:36,690 --> 00:09:41,400
and that they will change the data

00:09:38,730 --> 00:09:42,480
meaning what are all the actions now if

00:09:41,400 --> 00:09:44,550
you're a senior developer and you

00:09:42,480 --> 00:09:46,589
started the project well maybe you know

00:09:44,550 --> 00:09:48,270
you remember everything but see wouldn't

00:09:46,589 --> 00:09:50,610
feel too confident you'll have to go

00:09:48,270 --> 00:09:51,870
into the code you look some stuff inside

00:09:50,610 --> 00:09:53,700
the controller you look some stuff

00:09:51,870 --> 00:09:55,380
inside the view because it might be

00:09:53,700 --> 00:09:57,420
changing the model and you come with a

00:09:55,380 --> 00:09:59,130
list and it's not well you kind of hop

00:09:57,420 --> 00:10:02,040
cross your fingers that the list is

00:09:59,130 --> 00:10:04,830
correct and the beautiful part over here

00:10:02,040 --> 00:10:06,450
is you know our glorified counter

00:10:04,830 --> 00:10:08,279
example this is just a counter in the

00:10:06,450 --> 00:10:09,959
example I can increment and decrement it

00:10:08,279 --> 00:10:12,660
I've just created a new type called

00:10:09,959 --> 00:10:15,240
action and I'm giving it these arbitrary

00:10:12,660 --> 00:10:17,730
words which are decrement and increment

00:10:15,240 --> 00:10:19,950
increment and I know exactly where to

00:10:17,730 --> 00:10:21,779
look for when you'll ask me hey I meet I

00:10:19,950 --> 00:10:23,640
what are the different actions you can

00:10:21,779 --> 00:10:25,709
do for your web application I have one

00:10:23,640 --> 00:10:28,760
single line that tells me not more not

00:10:25,709 --> 00:10:31,470
more than that not less than that so

00:10:28,760 --> 00:10:33,300
below that we have this update function

00:10:31,470 --> 00:10:34,650
which is kind of the controller for that

00:10:33,300 --> 00:10:36,870
we know from MVC

00:10:34,650 --> 00:10:39,089
so let's look at the type signature so

00:10:36,870 --> 00:10:41,279
the type signature basically L helps us

00:10:39,089 --> 00:10:44,080
helps us understand that I'm going to

00:10:41,279 --> 00:10:47,019
get an action I'm going to get a mod

00:10:44,080 --> 00:10:49,839
and then I'm gonna return another model

00:10:47,019 --> 00:10:51,519
so Elm is immutable language meaning I

00:10:49,839 --> 00:10:53,380
got a model I'm not gonna

00:10:51,519 --> 00:10:55,240
I cannot reassign values to it I'm

00:10:53,380 --> 00:10:56,860
actually creating a new model and

00:10:55,240 --> 00:10:59,410
handing it back let's completely ignore

00:10:56,860 --> 00:11:01,300
the effect that we see below that so now

00:10:59,410 --> 00:11:03,160
the update function is getting an action

00:11:01,300 --> 00:11:06,670
in the model and I have a case over here

00:11:03,160 --> 00:11:08,769
case action of decrement and increment I

00:11:06,670 --> 00:11:10,720
cannot write anything else I cannot have

00:11:08,769 --> 00:11:13,300
a type of the compiler will not allow me

00:11:10,720 --> 00:11:15,760
to have a type over here the compiler

00:11:13,300 --> 00:11:17,860
will not allow me to forget to write the

00:11:15,760 --> 00:11:20,200
word increment over here so it's

00:11:17,860 --> 00:11:22,450
guaranteeing that all the cases are

00:11:20,200 --> 00:11:24,850
fulfilled and basically inside the case

00:11:22,450 --> 00:11:27,420
you can see I'm saying take the model

00:11:24,850 --> 00:11:30,040
and take the kids property and just

00:11:27,420 --> 00:11:32,790
decremented by one or increment it by

00:11:30,040 --> 00:11:32,790
one

00:11:40,690 --> 00:11:47,089
all right that's our view so it might

00:11:44,480 --> 00:11:49,070
have some certain resemblance to HTML I

00:11:47,089 --> 00:11:50,390
know that and I know that when I saw

00:11:49,070 --> 00:11:52,820
that for the first time that was like

00:11:50,390 --> 00:11:54,459
that's when I decided to close Elm for

00:11:52,820 --> 00:11:57,800
the first time because I said hey

00:11:54,459 --> 00:12:00,829
where's my HTML right like it's it's

00:11:57,800 --> 00:12:03,260
really hard to read the syntax it has it

00:12:00,829 --> 00:12:05,300
advantages it has a disadvantages in

00:12:03,260 --> 00:12:07,399
short I will say you it just syntax deal

00:12:05,300 --> 00:12:08,899
with it the disadvantages are probably

00:12:07,399 --> 00:12:10,850
that it's less readable because we're

00:12:08,899 --> 00:12:13,370
used to reading HTML there the

00:12:10,850 --> 00:12:15,950
advantages are these are function that

00:12:13,370 --> 00:12:18,620
are compiled so I cannot have a divot

00:12:15,950 --> 00:12:21,110
with the typo I cannot have an unclothed

00:12:18,620 --> 00:12:22,700
tag and so on and so forth so basically

00:12:21,110 --> 00:12:27,110
what we are seeing here in the view

00:12:22,700 --> 00:12:29,420
function we have we have the div which

00:12:27,110 --> 00:12:30,950
is like the root div and below that we

00:12:29,420 --> 00:12:32,899
have another day of completely ignore

00:12:30,950 --> 00:12:35,480
the text we don't care about it and then

00:12:32,899 --> 00:12:38,060
I see I have a name plus plus which is

00:12:35,480 --> 00:12:40,370
basically just concatenating a string

00:12:38,060 --> 00:12:42,649
which is the model name and below that I

00:12:40,370 --> 00:12:45,079
have the same thing which is an age and

00:12:42,649 --> 00:12:47,690
since age is an integer I'm just casting

00:12:45,079 --> 00:12:50,240
it into two string and you know I got it

00:12:47,690 --> 00:12:52,250
and the same thing for kids number below

00:12:50,240 --> 00:12:55,730
that I have a button which basically

00:12:52,250 --> 00:12:58,130
we're saying on click just send one of

00:12:55,730 --> 00:12:59,570
those actions that we've set already the

00:12:58,130 --> 00:13:03,050
decrement the increment we cannot have

00:12:59,570 --> 00:13:05,269
anything else the HTML the view part

00:13:03,050 --> 00:13:07,310
isn't changing our model it is basically

00:13:05,269 --> 00:13:08,750
saying take the action take the model

00:13:07,310 --> 00:13:10,670
that we have right now sending to the

00:13:08,750 --> 00:13:12,589
update function which is like the brain

00:13:10,670 --> 00:13:14,180
over our web application this is where

00:13:12,589 --> 00:13:16,970
all the business logic is being handled

00:13:14,180 --> 00:13:18,949
we're just sending it and changes should

00:13:16,970 --> 00:13:20,720
be done there so we have the increment

00:13:18,949 --> 00:13:24,529
and decrement and then below just some

00:13:20,720 --> 00:13:27,140
some debug code but even though it's not

00:13:24,529 --> 00:13:30,250
HTML still still it's a bit it's quite

00:13:27,140 --> 00:13:33,019
converted we can probably clean it and

00:13:30,250 --> 00:13:34,940
by clinging it we can actually show that

00:13:33,019 --> 00:13:38,149
everything in Elm is actually a function

00:13:34,940 --> 00:13:40,670
so what we've done over here the view

00:13:38,149 --> 00:13:43,070
name is actually I can declare a view

00:13:40,670 --> 00:13:45,019
name I have a function it's getting a

00:13:43,070 --> 00:13:46,699
string and it's returning an HTML so

00:13:45,019 --> 00:13:49,910
this is basically just getting the name

00:13:46,699 --> 00:13:51,410
at it and it knows how to print it so if

00:13:49,910 --> 00:13:52,350
I'm going up I can see that the view

00:13:51,410 --> 00:13:55,050
name is now get

00:13:52,350 --> 00:13:57,810
the model name same thing would be with

00:13:55,050 --> 00:14:00,090
age the view age if I'm looking at the

00:13:57,810 --> 00:14:02,460
function so the signature will be an

00:14:00,090 --> 00:14:05,160
integer and I'm just getting an HTML and

00:14:02,460 --> 00:14:07,470
by the way I'm writing it when I'm

00:14:05,160 --> 00:14:10,950
writing the type signature I don't have

00:14:07,470 --> 00:14:12,870
to Elm is inferred typed meaning it can

00:14:10,950 --> 00:14:14,490
it can understand by itself but this is

00:14:12,870 --> 00:14:17,040
kind of a best practice for us the

00:14:14,490 --> 00:14:20,100
humans to understand what's going on so

00:14:17,040 --> 00:14:23,220
with the view age basically view age I

00:14:20,100 --> 00:14:25,350
pass it the model age and here our web

00:14:23,220 --> 00:14:29,300
application is perfect it is showing my

00:14:25,350 --> 00:14:34,830
name Amitai my age and my kids number Oh

00:14:29,300 --> 00:14:39,330
No how embarrassing I have a bug and in

00:14:34,830 --> 00:14:41,910
front such a respectable audience the

00:14:39,330 --> 00:14:44,220
number of kids is wrong and we can see

00:14:41,910 --> 00:14:47,580
that in the debug if you can see from

00:14:44,220 --> 00:14:49,710
that far the age is 38 the kid is 3 and

00:14:47,580 --> 00:14:52,110
the name is Amitai but somehow the kids

00:14:49,710 --> 00:14:54,410
number is appearing incorrectly if we go

00:14:52,110 --> 00:14:57,390
back to the code we can actually see

00:14:54,410 --> 00:14:59,700
that I wasn't very concentrated probably

00:14:57,390 --> 00:15:01,620
when I created the web application the

00:14:59,700 --> 00:15:03,500
view kids which is also getting an

00:15:01,620 --> 00:15:09,750
integer we are passing it by mistake

00:15:03,500 --> 00:15:11,850
model age so one of the things that Elm

00:15:09,750 --> 00:15:14,340
allows us since it's a compiled

00:15:11,850 --> 00:15:16,740
languages a statically typed language is

00:15:14,340 --> 00:15:19,320
to try and move the runtime mistakes

00:15:16,740 --> 00:15:21,330
into compiler errors and I don't call it

00:15:19,320 --> 00:15:27,690
random errors because again there are no

00:15:21,330 --> 00:15:29,269
runtime errors in Elm what did I miss

00:15:27,690 --> 00:15:32,459
something

00:15:29,269 --> 00:15:35,129
that there are no runtime arrows okay it

00:15:32,459 --> 00:15:37,350
is but it but it's true so our I these

00:15:35,129 --> 00:15:40,709
try to shift as much as possible this

00:15:37,350 --> 00:15:43,079
those mistake that we were so used to

00:15:40,709 --> 00:15:45,179
pushing into production and just have

00:15:43,079 --> 00:15:47,399
the compiler you know bark at us and say

00:15:45,179 --> 00:15:49,470
this is wrong and in order to do that we

00:15:47,399 --> 00:15:52,529
need to understand types so let's have a

00:15:49,470 --> 00:15:54,269
quick types 101 here is the types but

00:15:52,529 --> 00:15:56,790
here is the type boolean this is how

00:15:54,269 --> 00:16:02,009
it's defined in Elm it can get either a

00:15:56,790 --> 00:16:05,129
false or a true that's it if we wanted

00:16:02,009 --> 00:16:07,350
to extend our fancy web application and

00:16:05,129 --> 00:16:09,959
I wanted to share with you the different

00:16:07,350 --> 00:16:12,779
vehicles that I'm out I might own and

00:16:09,959 --> 00:16:17,429
again since I'm the CTO of Giza I'm so

00:16:12,779 --> 00:16:20,160
rich I might have about one bowtie I

00:16:17,429 --> 00:16:23,489
don't want to exaggerate I might have a

00:16:20,160 --> 00:16:27,299
plain one pain but I might have multiple

00:16:23,489 --> 00:16:30,529
cars I actually have two I want to sell

00:16:27,299 --> 00:16:34,110
one I don't know how to do it but

00:16:30,529 --> 00:16:38,399
basically I have this integer of the car

00:16:34,110 --> 00:16:41,309
the integer is wrapped with a car type

00:16:38,399 --> 00:16:43,259
it's not just a simple integer so now in

00:16:41,309 --> 00:16:44,489
my model I would say the name and the

00:16:43,259 --> 00:16:46,679
age and the kids and then I'll have

00:16:44,489 --> 00:16:51,239
another vehicle property which is

00:16:46,679 --> 00:16:52,739
basically a vehicle type from now on so

00:16:51,239 --> 00:16:54,959
then we can start once we understand

00:16:52,739 --> 00:16:57,689
types that's it you understand types we

00:16:54,959 --> 00:16:59,160
can talk about type safety so once we

00:16:57,689 --> 00:17:00,899
have the type safety in place we are

00:16:59,160 --> 00:17:03,029
basically helping the compiler in

00:17:00,899 --> 00:17:06,630
helping us and preventing those mistakes

00:17:03,029 --> 00:17:09,149
so again looking looking at our previous

00:17:06,630 --> 00:17:11,760
example how it looks right now the age

00:17:09,149 --> 00:17:13,350
and the kids are both integer if I go

00:17:11,760 --> 00:17:15,649
down I can see that I'm just

00:17:13,350 --> 00:17:18,299
initializing with normal numbers a

00:17:15,649 --> 00:17:21,929
possible solution would be just defining

00:17:18,299 --> 00:17:24,269
here I have this new type kids which is

00:17:21,929 --> 00:17:26,639
just it's just the kids right it doesn't

00:17:24,269 --> 00:17:30,659
get it's not like the vehicle it's not a

00:17:26,639 --> 00:17:33,059
plane or a boat it's just kids but what

00:17:30,659 --> 00:17:36,539
important is we have an integer and that

00:17:33,059 --> 00:17:38,610
integer is wrapped with the type kids so

00:17:36,539 --> 00:17:40,960
just for the sake of the example I I

00:17:38,610 --> 00:17:43,360
kept age as an integer and

00:17:40,960 --> 00:17:45,010
kids is now of kids type so if I look at

00:17:43,360 --> 00:17:46,840
the initializing model then you can see

00:17:45,010 --> 00:17:48,880
the age is being initialized with a

00:17:46,840 --> 00:17:50,950
simple integer but the kids is

00:17:48,880 --> 00:17:54,669
initialized with the integer wrapped

00:17:50,950 --> 00:17:56,649
with the kids type so the view kids

00:17:54,669 --> 00:17:58,720
function for example if you'd use to get

00:17:56,649 --> 00:18:01,240
an integer up until now this is before

00:17:58,720 --> 00:18:04,059
the change that we want to add here is

00:18:01,240 --> 00:18:05,679
the new change if you can see in the

00:18:04,059 --> 00:18:07,450
type signature you can see that it's no

00:18:05,679 --> 00:18:09,429
longer gonna get an integer it's gonna

00:18:07,450 --> 00:18:12,429
get this kids type this is basically

00:18:09,429 --> 00:18:14,919
again our value wrapped in something so

00:18:12,429 --> 00:18:17,500
we need to unwrap it in sour our let

00:18:14,919 --> 00:18:21,250
there is a LED block over here basically

00:18:17,500 --> 00:18:24,490
we are you know reaching inside and

00:18:21,250 --> 00:18:27,010
yanking out and wrapping the kids and

00:18:24,490 --> 00:18:31,270
now we have inside this Val inside this

00:18:27,010 --> 00:18:37,179
Val variable we have our integer and we

00:18:31,270 --> 00:18:38,740
can print it we can print it out just to

00:18:37,179 --> 00:18:41,230
show that there is a possibility again

00:18:38,740 --> 00:18:44,020
to keep it a bit shortened and in our

00:18:41,230 --> 00:18:46,210
argument over here on top we actually

00:18:44,020 --> 00:18:48,700
already unwrapped it so we keep it a

00:18:46,210 --> 00:18:51,100
little more readable but the fun part

00:18:48,700 --> 00:18:53,529
here is once we've done it one we have

00:18:51,100 --> 00:18:55,570
this type safety in place if I'm looking

00:18:53,529 --> 00:18:57,429
at the compiler this is actually the

00:18:55,570 --> 00:19:00,370
integration of the un-- compiler inside

00:18:57,429 --> 00:19:03,010
Adam the compiler is actually telling me

00:19:00,370 --> 00:19:05,140
hey you cannot do that you cannot call

00:19:03,010 --> 00:19:06,580
now view kids with the model age and the

00:19:05,140 --> 00:19:09,130
compiler is actually telling me and

00:19:06,580 --> 00:19:10,870
expecting the function is expecting a

00:19:09,130 --> 00:19:12,730
kids type and you are passing in the

00:19:10,870 --> 00:19:14,590
integer and this is beautiful because it

00:19:12,730 --> 00:19:16,990
will never reach production because you

00:19:14,590 --> 00:19:20,980
know it's not it wouldn't it wouldn't

00:19:16,990 --> 00:19:23,230
compile so the update function

00:19:20,980 --> 00:19:24,970
very similar to that we are saying if

00:19:23,230 --> 00:19:26,799
this is the before change we can see

00:19:24,970 --> 00:19:28,840
that the kid is treating the model kids

00:19:26,799 --> 00:19:32,110
as a normal integer the normal number

00:19:28,840 --> 00:19:35,200
but it is not the our number is wrapped

00:19:32,110 --> 00:19:36,100
in that in that type so the change would

00:19:35,200 --> 00:19:39,010
look like that

00:19:36,100 --> 00:19:41,440
again I need to unwrap our value and

00:19:39,010 --> 00:19:43,360
then here the kids you can see maybe you

00:19:41,440 --> 00:19:45,610
can see there is a small apostrophe this

00:19:43,360 --> 00:19:47,770
is quite common in immutable language is

00:19:45,610 --> 00:19:49,990
he saying I took the value from kids but

00:19:47,770 --> 00:19:52,760
I'm doing some kind of computation right

00:19:49,990 --> 00:19:54,650
I couldn't reassign kids itself because

00:19:52,760 --> 00:19:57,470
it's an immutable language and then I

00:19:54,650 --> 00:20:03,110
will reassign and then I will reassign

00:19:57,470 --> 00:20:05,000
it so basically the abbot's function and

00:20:03,110 --> 00:20:06,950
that's that's the fun parts I mean the

00:20:05,000 --> 00:20:08,150
our entire business logic is being done

00:20:06,950 --> 00:20:10,730
here again if we're thinking about

00:20:08,150 --> 00:20:13,100
angular 1 where you have bugs suddenly

00:20:10,730 --> 00:20:15,380
your data something on the screen is you

00:20:13,100 --> 00:20:16,910
know not working properly you need to

00:20:15,380 --> 00:20:18,890
start digging thinking where is this

00:20:16,910 --> 00:20:20,600
data changing you don't have to ask

00:20:18,890 --> 00:20:22,160
yourself that in L because there is one

00:20:20,600 --> 00:20:24,410
single place that it can happen and

00:20:22,160 --> 00:20:26,420
that's in your update function so

00:20:24,410 --> 00:20:31,190
obviously it makes it much easier to

00:20:26,420 --> 00:20:33,710
pinpoint bugs and fix them and we could

00:20:31,190 --> 00:20:34,790
have more complicated requirements I

00:20:33,710 --> 00:20:38,990
want to show you a more complicated

00:20:34,790 --> 00:20:40,700
requirement just to I just want to put

00:20:38,990 --> 00:20:47,120
it in context just so the next

00:20:40,700 --> 00:20:49,400
requirement won't sound too harsh it's a

00:20:47,120 --> 00:20:51,800
very short video try to notice the sound

00:20:49,400 --> 00:20:56,200
of the piano in the end it's I think

00:20:51,800 --> 00:20:56,200
it's my own favorite part

00:21:07,120 --> 00:21:11,250
that's if I'm able to make it work from

00:21:09,100 --> 00:21:14,570
here

00:21:11,250 --> 00:21:14,570
haha plenty

00:22:01,940 --> 00:22:09,570
so the next requirement is putting

00:22:04,470 --> 00:22:11,429
limits on kids because and by the way I

00:22:09,570 --> 00:22:13,139
added the name of the girl that was

00:22:11,429 --> 00:22:15,960
crying she was basically throwing a fit

00:22:13,139 --> 00:22:17,909
for 30 minutes because she was annoyed

00:22:15,960 --> 00:22:20,129
by the fact that the the the yellow

00:22:17,909 --> 00:22:28,289
potato had glasses didn't fit her better

00:22:20,129 --> 00:22:30,450
and like that just won't I'm sorry so we

00:22:28,289 --> 00:22:32,879
want to put the limits on the kids like

00:22:30,450 --> 00:22:35,220
logical limits when we hit the decrement

00:22:32,879 --> 00:22:37,679
so it won't be low below zero and if we

00:22:35,220 --> 00:22:39,450
hit increment it won't go beyond a

00:22:37,679 --> 00:22:42,419
certain number now again

00:22:39,450 --> 00:22:46,289
angular 1 how would it how would we do

00:22:42,419 --> 00:22:49,710
it would we disable the HTML just to

00:22:46,289 --> 00:22:51,389
prevent the clicking that's like it kind

00:22:49,710 --> 00:22:53,309
of signs wrong sounds wrong right it's

00:22:51,389 --> 00:22:55,379
dealing with with the HTML it doesn't

00:22:53,309 --> 00:22:57,960
deal with the data how would we do it

00:22:55,379 --> 00:23:00,480
otherwise in the controller maybe listen

00:22:57,960 --> 00:23:06,360
to the model changing and either prevent

00:23:00,480 --> 00:23:08,309
it or or or revert it we don't have that

00:23:06,360 --> 00:23:10,440
problem in elm because we don't have the

00:23:08,309 --> 00:23:13,889
two-way data-binding this is data is

00:23:10,440 --> 00:23:16,950
flowing through a single Direction this

00:23:13,889 --> 00:23:18,480
is the unitary unidirectional approach

00:23:16,950 --> 00:23:20,399
like I said earlier the view is just

00:23:18,480 --> 00:23:22,559
sending the current model with the

00:23:20,399 --> 00:23:25,200
action and then it's up to the update

00:23:22,559 --> 00:23:26,909
function to decide what to do with the

00:23:25,200 --> 00:23:29,070
action if it decides not to do nothing

00:23:26,909 --> 00:23:31,780
it won't do not

00:23:29,070 --> 00:23:33,640
so indeed this is before the change we

00:23:31,780 --> 00:23:35,620
can see that you know when we're hitting

00:23:33,640 --> 00:23:36,730
decrement then we're just decree menteng

00:23:35,620 --> 00:23:39,850
without checking anything

00:23:36,730 --> 00:23:42,220
the interchange that we need to do sorry

00:23:39,850 --> 00:23:44,770
the only change that we need to do is

00:23:42,220 --> 00:23:46,540
add an if over here so if the value is

00:23:44,770 --> 00:23:48,700
reaching a certain amount will then

00:23:46,540 --> 00:23:51,670
we'll just return kids zero again not

00:23:48,700 --> 00:23:54,040
just a zero a kids zero safe thing if

00:23:51,670 --> 00:24:01,420
we're going to do it for for the

00:23:54,040 --> 00:24:03,820
increment so business logics business

00:24:01,420 --> 00:24:06,460
logic requires testing right type safety

00:24:03,820 --> 00:24:09,610
cannot always save us with soil for

00:24:06,460 --> 00:24:12,520
example they eat then for for for

00:24:09,610 --> 00:24:16,180
putting a limit and it requires testing

00:24:12,520 --> 00:24:18,490
so for the audience who writes unit

00:24:16,180 --> 00:24:22,510
tests in JavaScript for their own web

00:24:18,490 --> 00:24:27,130
application all right now another trick

00:24:22,510 --> 00:24:28,570
question who enjoys doing that so for

00:24:27,130 --> 00:24:31,480
the viewers viewers at home

00:24:28,570 --> 00:24:32,890
very few people write their hands and I

00:24:31,480 --> 00:24:37,630
cannot blame her

00:24:32,890 --> 00:24:40,450
clickbait blame them because you

00:24:37,630 --> 00:24:53,700
probably have the same joy and happiness

00:24:40,450 --> 00:24:53,700
those guys in the back of everybody

00:27:46,780 --> 00:27:54,020
you don't need because there is no HTG

00:27:49,880 --> 00:27:56,600
calling when you're gonna unit those so

00:27:54,020 --> 00:27:58,940
now if we're looking at ugly data from

00:27:56,600 --> 00:28:03,700
server you can see that again we have

00:27:58,940 --> 00:28:03,700
the case over here if everything is fine

00:28:06,220 --> 00:28:12,080
if something is wrong with my HTTP on

00:28:09,260 --> 00:28:15,020
getting an error and this is where Elm

00:28:12,080 --> 00:28:17,330
it doesn't even encourage us it forces

00:28:15,020 --> 00:28:20,060
us to be better developers because if I

00:28:17,330 --> 00:28:23,450
wouldn't add this error case it just

00:28:20,060 --> 00:28:25,250
wouldn't compile so honestly if I had to

00:28:23,450 --> 00:28:27,980
write it in angular 1 I would probably

00:28:25,250 --> 00:28:29,990
cut corners and I'll say yeah I mean why

00:28:27,980 --> 00:28:31,760
would the HTTP request won't work right

00:28:29,990 --> 00:28:34,550
what can possibly go wrong and I will

00:28:31,760 --> 00:28:35,360
just completely avoid it but Elm doesn't

00:28:34,550 --> 00:28:37,670
let me do it

00:28:35,360 --> 00:28:39,800
so just for the simplicity I'm not to do

00:28:37,670 --> 00:28:42,370
I mean my return value is nothing I got

00:28:39,800 --> 00:28:44,480
a model I'm I'm returning it but

00:28:42,370 --> 00:28:47,390
confronted with the fact that I already

00:28:44,480 --> 00:28:49,310
had to write this error error handling I

00:28:47,390 --> 00:28:51,140
would probably tell myself well let's

00:28:49,310 --> 00:28:53,660
invest a few more minutes a few more

00:28:51,140 --> 00:28:55,670
hours I don't know in you know providing

00:28:53,660 --> 00:28:58,780
a better arrow mechanism showing a

00:28:55,670 --> 00:28:58,780
message or whatnot

00:29:01,770 --> 00:29:10,270
all right headless Drupal so I I

00:29:07,420 --> 00:29:13,060
literally look looked for the in Google

00:29:10,270 --> 00:29:15,700
Images I look the word Isis and that way

00:29:13,060 --> 00:29:18,010
that's one of the first images that came

00:29:15,700 --> 00:29:20,080
in and I said like it's perfect it's

00:29:18,010 --> 00:29:25,750
showing everything that I want to show

00:29:20,080 --> 00:29:27,610
about headless Drupal I'm not even sure

00:29:25,750 --> 00:29:31,050
myself I totally understand it but it's

00:29:27,610 --> 00:29:31,050
like it just made sense

00:29:31,350 --> 00:29:38,590
so Drupal I mean it provides us you know

00:29:36,520 --> 00:29:40,120
users and permission and content

00:29:38,590 --> 00:29:42,190
modeling and entity reference and

00:29:40,120 --> 00:29:45,490
restful and and and whatnot so we

00:29:42,190 --> 00:29:47,650
decided yeah we wanna still use it we

00:29:45,490 --> 00:29:51,130
just want to replace our angular we just

00:29:47,650 --> 00:29:54,010
want to replace our react with something

00:29:51,130 --> 00:29:56,890
else so one of the first experiments was

00:29:54,010 --> 00:30:00,430
our office time watch pretty simple

00:29:56,890 --> 00:30:01,930
every this is the Israeli law forces

00:30:00,430 --> 00:30:03,760
other everything every employee that

00:30:01,930 --> 00:30:05,470
comes to the office they need to write

00:30:03,760 --> 00:30:07,390
their PIN and they're getting you know

00:30:05,470 --> 00:30:09,870
we're just registering when did they

00:30:07,390 --> 00:30:13,870
came in and when did they come out

00:30:09,870 --> 00:30:16,600
nothing too fancy however what helped

00:30:13,870 --> 00:30:18,340
has what helped her sorry decide to

00:30:16,600 --> 00:30:21,850
transition from angular and actually to

00:30:18,340 --> 00:30:23,290
jump over react was Headley om Elm

00:30:21,850 --> 00:30:25,600
Headley so if you are already familiar

00:30:23,290 --> 00:30:27,300
with our Headley project we have

00:30:25,600 --> 00:30:30,430
generator Headley which basically

00:30:27,300 --> 00:30:32,830
scaffolds an entire working headless

00:30:30,430 --> 00:30:36,010
Drupal installation so you just write yo

00:30:32,830 --> 00:30:39,340
Headley and it just you know rush it it

00:30:36,010 --> 00:30:41,560
creates your Drupal scaffolded it is

00:30:39,340 --> 00:30:44,140
sorry scaffolding Drupal it's installing

00:30:41,560 --> 00:30:46,390
it NPM install Bower install creates an

00:30:44,140 --> 00:30:48,580
angular application and basically it's a

00:30:46,390 --> 00:30:50,680
fully working headless Drupal it already

00:30:48,580 --> 00:30:52,390
comes with be hackers and Travis

00:30:50,680 --> 00:30:54,970
integration basically everything that

00:30:52,390 --> 00:30:57,640
that you want so we just told herself

00:30:54,970 --> 00:31:00,460
okay let's try to replace the angular

00:30:57,640 --> 00:31:03,460
one and basically create a typical web

00:31:00,460 --> 00:31:06,850
application that one that has login and

00:31:03,460 --> 00:31:09,830
logging with whether we login with

00:31:06,850 --> 00:31:12,889
github and a routing system and

00:31:09,830 --> 00:31:16,489
and user interactions to filter the

00:31:12,889 --> 00:31:19,789
events and an article that I can easily

00:31:16,489 --> 00:31:21,980
drag and drop files and upload them and

00:31:19,789 --> 00:31:23,960
create an article on the fly and the

00:31:21,980 --> 00:31:26,029
cool thing is that all those

00:31:23,960 --> 00:31:27,919
applications you can already use that in

00:31:26,029 --> 00:31:29,499
your own existing Drupal site so it

00:31:27,919 --> 00:31:32,480
doesn't even necessarily need to be

00:31:29,499 --> 00:31:35,950
fully you know headless Drupal it can be

00:31:32,480 --> 00:31:38,570
a hybrid side that Drupal itself is

00:31:35,950 --> 00:31:42,909
serving the page and you have this elm

00:31:38,570 --> 00:31:46,399
web application inside inside the pages

00:31:42,909 --> 00:31:50,809
and first of all I think it's a pretty

00:31:46,399 --> 00:31:53,570
cool demonstration of capabilities and

00:31:50,809 --> 00:31:56,359
if even if you're not wowed that's fine

00:31:53,570 --> 00:31:57,919
I mean I won't take it personally and in

00:31:56,359 --> 00:31:59,929
a way it's okay because this is a

00:31:57,919 --> 00:32:02,619
typical web application I mean I did we

00:31:59,929 --> 00:32:05,899
didn't deliver try to do something

00:32:02,619 --> 00:32:08,899
extreme we wanted to see can we you know

00:32:05,899 --> 00:32:11,239
get all the nodes and permission and

00:32:08,899 --> 00:32:12,980
ogee and and whatnot everything is like

00:32:11,239 --> 00:32:17,570
we don't care about it this is just

00:32:12,980 --> 00:32:20,299
restful serving the information so if

00:32:17,570 --> 00:32:21,619
you want to start interacting with elm

00:32:20,299 --> 00:32:25,039
and everything that I'm saying it's kind

00:32:21,619 --> 00:32:28,220
of right to Elm 0.16 and today was

00:32:25,039 --> 00:32:30,889
really 0.17 but still you can you can

00:32:28,220 --> 00:32:34,039
look at the things obviously you can go

00:32:30,889 --> 00:32:35,690
to Elm that - Lang org and I'm pretty

00:32:34,039 --> 00:32:37,789
happy to say that the second example

00:32:35,690 --> 00:32:40,940
that appears in the home page belongs to

00:32:37,789 --> 00:32:42,950
Giza which is this Headley Headley

00:32:40,940 --> 00:32:46,429
example another thing that we've done in

00:32:42,950 --> 00:32:49,549
Dedra is another yo generator for for

00:32:46,429 --> 00:32:51,529
Elm which basically scaffolds a very

00:32:49,549 --> 00:32:54,379
simple counter example but it comes with

00:32:51,529 --> 00:32:56,330
gulp and browse browse the sink and sass

00:32:54,379 --> 00:32:58,460
and you can you know push to gh-pages

00:32:56,330 --> 00:33:00,129
and basically it scaffolds everything

00:32:58,460 --> 00:33:04,309
that you need and it's already connected

00:33:00,129 --> 00:33:05,929
to Travis and you can read different

00:33:04,309 --> 00:33:07,299
blog post some of our blog post that we

00:33:05,929 --> 00:33:10,720
are writing we're always trying to

00:33:07,299 --> 00:33:13,759
provide blog posts blog posts that are

00:33:10,720 --> 00:33:16,159
pragmatic not just the crazy stuff but

00:33:13,759 --> 00:33:19,190
how do you do translation of the web

00:33:16,159 --> 00:33:22,090
application with type safety meaning how

00:33:19,190 --> 00:33:24,880
can i translate my web application and

00:33:22,090 --> 00:33:27,570
be guaranteed that all the sentences

00:33:24,880 --> 00:33:32,320
that I put them put there will be

00:33:27,570 --> 00:33:35,470
translated so you can do that and just

00:33:32,320 --> 00:33:37,240
almost to finish the the last 60 seconds

00:33:35,470 --> 00:33:40,270
about my own personal functional

00:33:37,240 --> 00:33:43,630
programming journey / what about nodejs

00:33:40,270 --> 00:33:45,309
so about a year ago a bit more than a

00:33:43,630 --> 00:33:47,650
year ago I started with elm and that was

00:33:45,309 --> 00:33:50,260
the first time I was touching functional

00:33:47,650 --> 00:33:52,120
programming and I must admit that up

00:33:50,260 --> 00:33:53,919
until then I was looking you know

00:33:52,120 --> 00:33:56,289
looking at stuff like symphony as the

00:33:53,919 --> 00:33:59,140
holy grail you know everything is object

00:33:56,289 --> 00:34:01,720
oriented and it's decoupled and

00:33:59,140 --> 00:34:03,640
composition and whatnot and slowly I

00:34:01,720 --> 00:34:05,320
started realizing yeah it's awesome and

00:34:03,640 --> 00:34:08,980
great it's beautiful

00:34:05,320 --> 00:34:10,960
but the objects are mutable and they are

00:34:08,980 --> 00:34:13,330
holding States so it doesn't necessarily

00:34:10,960 --> 00:34:16,330
mean it's wrong it's just a completely

00:34:13,330 --> 00:34:19,330
different approach to solving to solving

00:34:16,330 --> 00:34:21,399
the problem and once I got into that I

00:34:19,330 --> 00:34:23,859
told myself okay what about the backend

00:34:21,399 --> 00:34:25,750
I'm not about to replace Drupal I have a

00:34:23,859 --> 00:34:27,760
lot of respect for Drupal also a lot of

00:34:25,750 --> 00:34:30,550
hatred to parts of Drupal but still it's

00:34:27,760 --> 00:34:32,919
doing a lot a lot of stuff so on it on

00:34:30,550 --> 00:34:34,629
not a typical on a quite complex system

00:34:32,919 --> 00:34:36,820
we might have like a headless Drupal so

00:34:34,629 --> 00:34:38,379
we'll have a front-end in Elm will have

00:34:36,820 --> 00:34:40,149
the Drupal itself acting as the head of

00:34:38,379 --> 00:34:44,379
Drupal but oftentimes we have also like

00:34:40,149 --> 00:34:46,000
an OGS proxy server so the same problems

00:34:44,379 --> 00:34:48,369
I have in JavaScript on the client side

00:34:46,000 --> 00:34:52,240
am I'm starting to have with JavaScript

00:34:48,369 --> 00:34:54,820
on nodejs I've started actually and

00:34:52,240 --> 00:34:56,859
started to learn Haskell and this is a

00:34:54,820 --> 00:34:59,920
you sods framework which is really

00:34:56,859 --> 00:35:01,450
interesting and even if we won't use it

00:34:59,920 --> 00:35:03,099
in production in the end engagement and

00:35:01,450 --> 00:35:03,910
most probably we use it and we'll kick

00:35:03,099 --> 00:35:05,560
nodejs

00:35:03,910 --> 00:35:07,300
there is a real value in learning

00:35:05,560 --> 00:35:10,450
something that is so completely

00:35:07,300 --> 00:35:13,330
different because I really got a kick in

00:35:10,450 --> 00:35:16,800
my developed prayer developers brain and

00:35:13,330 --> 00:35:18,790
it really shifted the way I'm looking at

00:35:16,800 --> 00:35:22,780
development it really changed my

00:35:18,790 --> 00:35:26,349
approach and these were exactly 35

00:35:22,780 --> 00:35:29,220
minutes and 60 seconds about elm and

00:35:26,349 --> 00:35:29,220
thank you very much

00:35:35,230 --> 00:35:43,990
questions if you want to try the mic or

00:35:40,250 --> 00:35:43,990
oh yeah Alan Alan

00:35:52,810 --> 00:35:59,480
the Elm you're asking so Elm is pretty

00:35:55,820 --> 00:36:01,730
stable in the sense that it's still it's

00:35:59,480 --> 00:36:03,230
still a new project in a sense that no

00:36:01,730 --> 00:36:06,859
it's not a new project it I think it

00:36:03,230 --> 00:36:10,910
exists even more than react it's a small

00:36:06,859 --> 00:36:14,060
small project them in Tanner's are doing

00:36:10,910 --> 00:36:15,950
a terrific job in you know not breaking

00:36:14,060 --> 00:36:18,080
stuff on one hand and be very careful

00:36:15,950 --> 00:36:21,430
but on the other hand not being afraid

00:36:18,080 --> 00:36:23,869
on saying okay we should change that I

00:36:21,430 --> 00:36:26,119
think what I mean

00:36:23,869 --> 00:36:29,359
my best argument that I can give you is

00:36:26,119 --> 00:36:33,310
for my own company I'm using Elm from in

00:36:29,359 --> 00:36:33,310
production that's my that's my argument

00:36:35,349 --> 00:36:40,400
how much of the like the time do you

00:36:38,089 --> 00:36:42,589
spend with like the type checking and

00:36:40,400 --> 00:36:44,869
the types and at the same time like

00:36:42,589 --> 00:36:46,510
how's it for like people which are not

00:36:44,869 --> 00:36:48,619
familiar with for example

00:36:46,510 --> 00:36:50,240
object-oriented code or something in

00:36:48,619 --> 00:36:52,070
general which is a little bit more

00:36:50,240 --> 00:36:55,040
high-level than the typical procedural

00:36:52,070 --> 00:36:57,589
stuff because I could imagine that like

00:36:55,040 --> 00:36:59,750
for many people it's like a high barrier

00:36:57,589 --> 00:37:01,190
to even work on your projects I'm

00:36:59,750 --> 00:37:04,310
wondering whether you run into any

00:37:01,190 --> 00:37:06,080
issues okay so I think in a way you are

00:37:04,310 --> 00:37:08,000
asking also about the learning curve and

00:37:06,080 --> 00:37:11,180
bringing like junior developers and I

00:37:08,000 --> 00:37:13,730
have to admit that this is actually

00:37:11,180 --> 00:37:16,010
became easier because when we're doing

00:37:13,730 --> 00:37:19,790
code reviews even Forge it for junior

00:37:16,010 --> 00:37:23,510
developers if if it compiled I'm already

00:37:19,790 --> 00:37:25,400
reassured and it's actually we're saying

00:37:23,510 --> 00:37:27,619
it it's much easier for them and in a

00:37:25,400 --> 00:37:31,190
way kind of the nice side effect of Elm

00:37:27,619 --> 00:37:33,619
part of our of our job recruiting thing

00:37:31,190 --> 00:37:35,570
is we're giving people an elm task and

00:37:33,619 --> 00:37:37,400
it's guaranteed nobody knows the Elm so

00:37:35,570 --> 00:37:39,260
they don't know elements it's a simple

00:37:37,400 --> 00:37:42,040
thing usually it's a counter again a

00:37:39,260 --> 00:37:44,720
glorified counter and they make it so

00:37:42,040 --> 00:37:47,420
it's possible it's possible to do it and

00:37:44,720 --> 00:37:49,790
another another fun thing about it is

00:37:47,420 --> 00:37:51,890
you know when I was reviewing angular

00:37:49,790 --> 00:37:54,170
angular web application after two weeks

00:37:51,890 --> 00:37:56,420
I lost it I couldn't review it anymore

00:37:54,170 --> 00:37:58,910
you know banging my head that directive

00:37:56,420 --> 00:38:01,010
and transclude and crazy stuff without

00:37:58,910 --> 00:38:02,740
even month after that I can still easily

00:38:01,010 --> 00:38:06,760
review because I really

00:38:02,740 --> 00:38:09,119
and the flow of the things yeah last

00:38:06,760 --> 00:38:09,119
question

00:38:14,810 --> 00:38:26,690
you mean a part of em using other other

00:38:18,000 --> 00:38:29,580
stuff yeah so part of Headley so Headley

00:38:26,690 --> 00:38:31,770
basically shows that Elm can have

00:38:29,580 --> 00:38:33,600
interrupts interoperability with

00:38:31,770 --> 00:38:36,060
JavaScript which is kind of again this

00:38:33,600 --> 00:38:38,610
is outside of the world of elm Elm is a

00:38:36,060 --> 00:38:40,830
black box so you could think about about

00:38:38,610 --> 00:38:43,530
it as JavaScript as a service right

00:38:40,830 --> 00:38:45,960
so basically Elm has ports so it doesn't

00:38:43,530 --> 00:38:48,750
drag and drop the Maps obviously I

00:38:45,960 --> 00:38:50,880
didn't write all the leaflet Maps from

00:38:48,750 --> 00:38:52,860
scratch this is basically working for

00:38:50,880 --> 00:38:55,230
ports so Headley is really showing you

00:38:52,860 --> 00:39:04,110
all the use cases that you would that

00:38:55,230 --> 00:39:06,330
you would probably have so I know it's I

00:39:04,110 --> 00:39:12,180
know it's part of the plan it hasn't

00:39:06,330 --> 00:39:14,570
been done yet but stay tuned all right

00:39:12,180 --> 00:39:18,150
that's their really the last one okay

00:39:14,570 --> 00:39:21,200
make it counted so with JavaScript we

00:39:18,150 --> 00:39:24,200
have NPM and it's a really giant

00:39:21,200 --> 00:39:28,260
ecosystem lots of well-written

00:39:24,200 --> 00:39:31,890
what does Elm have to offer all right so

00:39:28,260 --> 00:39:34,680
first of all there's it doesn't it isn't

00:39:31,890 --> 00:39:37,830
as big as NPM with all the advantages

00:39:34,680 --> 00:39:41,040
and disadvantages so I think in terms of

00:39:37,830 --> 00:39:42,960
you'd probably find higher quality stuff

00:39:41,040 --> 00:39:45,270
you wouldn't see all the duplication and

00:39:42,960 --> 00:39:47,760
a nice thing that since elm is

00:39:45,270 --> 00:39:50,670
statically typed so the package manager

00:39:47,760 --> 00:39:52,950
if you try to push a change and you try

00:39:50,670 --> 00:39:54,900
to do like a minor change it will tell

00:39:52,950 --> 00:39:57,150
you dude you cannot it will it will stop

00:39:54,900 --> 00:39:58,770
you because it knows how to go through

00:39:57,150 --> 00:40:00,930
your code and understand the API and

00:39:58,770 --> 00:40:03,150
we'll take this is a major change so

00:40:00,930 --> 00:40:06,570
this is I mean you have a get a let a

00:40:03,150 --> 00:40:07,980
lot of a lot more guarantees on the

00:40:06,570 --> 00:40:09,360
stability and this is one of the

00:40:07,980 --> 00:40:12,780
important thing you're getting a really

00:40:09,360 --> 00:40:13,260
really stable web application all right

00:40:12,780 --> 00:40:16,190
folks

00:40:13,260 --> 00:40:16,190

YouTube URL: https://www.youtube.com/watch?v=7DGbotcbUfY


