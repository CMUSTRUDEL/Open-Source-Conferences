Title: DrupalCon New Orleans 2016: Automated javascript testing: where we are and what we actually want
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	First the issue will give a short overview about different kind of testing: Unit vs. Integration/Functional testing

After that let's talk about the current status of testing of our javascript (which will be more and more important in the future).

Functional testing (is the PHP based approach what we want?)
How do we integrate javascript unit testing (https://mochajs.org/  | https://jasmine.github.io/) etc.
Visual regression testing
How to scale the Drupal testing infrastructure for that
Captions: 
	00:00:00,000 --> 00:00:06,150
yeah it's good to be a tattoo pecan

00:00:02,760 --> 00:00:09,990
where there's no like pressure before

00:00:06,150 --> 00:00:12,870
release it is it is different a totally

00:00:09,990 --> 00:00:16,740
different experience actually all right

00:00:12,870 --> 00:00:22,949
so am I to my session I'm going to talk

00:00:16,740 --> 00:00:28,019
about testing JavaScript sorry do

00:00:22,949 --> 00:00:31,320
something there we go and so I'm

00:00:28,019 --> 00:00:33,899
wondering here who in the room like

00:00:31,320 --> 00:00:35,190
tests their stuff what they built for

00:00:33,899 --> 00:00:37,860
their clients what they built for

00:00:35,190 --> 00:00:40,820
modules for the build will go so it's

00:00:37,860 --> 00:00:44,250
pretty much everyone so you are well no

00:00:40,820 --> 00:00:46,739
well maybe you should do as well some

00:00:44,250 --> 00:00:49,410
okay that's a good idea already yeah

00:00:46,739 --> 00:00:53,010
okay I see what kind of tools do you use

00:00:49,410 --> 00:00:56,399
their who is a way of simple test like

00:00:53,010 --> 00:00:58,920
bit little bit less yeah-hoo-hoo used

00:00:56,399 --> 00:01:01,590
something like be head for their client

00:00:58,920 --> 00:01:05,100
stuff okay then go fifty percent it's

00:01:01,590 --> 00:01:10,799
good yeah and I'm wondering why do other

00:01:05,100 --> 00:01:12,330
people not do it but yeah well I it

00:01:10,799 --> 00:01:14,490
seems to be that you at least don't have

00:01:12,330 --> 00:01:16,920
to be convinced about it that's good so

00:01:14,490 --> 00:01:22,409
a few words about myself I'm Daniel

00:01:16,920 --> 00:01:24,720
veena not we know and I'm a typical

00:01:22,409 --> 00:01:27,060
contributor since a while I work mainly

00:01:24,720 --> 00:01:30,000
with chapter three and we'll take one

00:01:27,060 --> 00:01:31,530
and in general and cruise I'm mokuba's

00:01:30,000 --> 00:01:36,840
person so I really like to learn

00:01:31,530 --> 00:01:39,509
something new all right so i have to

00:01:36,840 --> 00:01:42,030
admit something we are ignorant we think

00:01:39,509 --> 00:01:43,500
we are actually good developers or we

00:01:42,030 --> 00:01:46,020
are good site builders or something in

00:01:43,500 --> 00:01:47,939
the stuff we actually build works but i

00:01:46,020 --> 00:01:49,950
would assume it's actually not the case

00:01:47,939 --> 00:01:52,020
we changed something and then something

00:01:49,950 --> 00:01:55,770
else in some other system somewhere

00:01:52,020 --> 00:01:58,430
breaks so we knew testing in order to

00:01:55,770 --> 00:02:00,899
actually know that stuff is working

00:01:58,430 --> 00:02:03,119
that's not only the case for like our

00:02:00,899 --> 00:02:05,070
tuple ordinary side building or

00:02:03,119 --> 00:02:08,700
something but it's also true for all

00:02:05,070 --> 00:02:10,920
yahoo script like these days people

00:02:08,700 --> 00:02:13,319
build much richer you ice using

00:02:10,920 --> 00:02:13,870
javascript it's coming like a lingua

00:02:13,319 --> 00:02:16,440
franca

00:02:13,870 --> 00:02:18,849
kind of like lettin it used to be in

00:02:16,440 --> 00:02:20,890
ordinary language yahoo JavaScript these

00:02:18,849 --> 00:02:23,200
days is everywhere it's not only on the

00:02:20,890 --> 00:02:28,060
front end it's on the back end it's used

00:02:23,200 --> 00:02:30,879
even for CLI scripts so it's in general

00:02:28,060 --> 00:02:33,909
really good to know how you can test

00:02:30,879 --> 00:02:35,500
your other script so here's some quotes

00:02:33,909 --> 00:02:38,980
you certainly saw it worked when I

00:02:35,500 --> 00:02:41,260
tested it it has a couple of like

00:02:38,980 --> 00:02:44,379
dimensions this quote it not only has

00:02:41,260 --> 00:02:47,379
this dimension of your computer or the

00:02:44,379 --> 00:02:49,780
way how you would set up stuff it also

00:02:47,379 --> 00:02:52,120
has the dimension of that there are

00:02:49,780 --> 00:02:53,829
different browsers involved maybe some

00:02:52,120 --> 00:02:56,200
JavaScript works in one browser but then

00:02:53,829 --> 00:03:00,159
in IE I don't know it's not bitching

00:02:56,200 --> 00:03:03,909
about is just an example because H is

00:03:00,159 --> 00:03:05,829
actually pretty good different browsers

00:03:03,909 --> 00:03:09,970
might behave differently maybe we use

00:03:05,829 --> 00:03:13,359
some pods some custom api's from some

00:03:09,970 --> 00:03:14,980
browsers and you want to know whether

00:03:13,359 --> 00:03:16,690
stuff works another thing which is

00:03:14,980 --> 00:03:19,299
really important these days is mobile

00:03:16,690 --> 00:03:22,030
browsers or mobile phones versus

00:03:19,299 --> 00:03:24,880
notebooks the fact that our viewport the

00:03:22,030 --> 00:03:27,220
size of the screen changes and totally

00:03:24,880 --> 00:03:29,950
has an effect in the way how stuff works

00:03:27,220 --> 00:03:33,730
for example you know buttons could be

00:03:29,950 --> 00:03:36,519
not accessible or buttons could be too

00:03:33,730 --> 00:03:38,349
big or stuff like that small things but

00:03:36,519 --> 00:03:40,870
small things for us in quote because

00:03:38,349 --> 00:03:43,239
they are easy to fix but it's really

00:03:40,870 --> 00:03:46,180
making a difference and it's stuff which

00:03:43,239 --> 00:03:50,049
makes all the time because mobile first

00:03:46,180 --> 00:03:53,410
for example is is hard I was just I

00:03:50,049 --> 00:03:55,329
would assume yeah there's the other

00:03:53,410 --> 00:04:00,370
thing it's works that it worked last

00:03:55,329 --> 00:04:02,829
month so yeah we write I mean we have

00:04:00,370 --> 00:04:05,019
some kind of system somewhere it works

00:04:02,829 --> 00:04:06,790
we'd manually tested it and then like

00:04:05,019 --> 00:04:08,440
you know the you tweak this little

00:04:06,790 --> 00:04:11,440
setting somewhere and then like your

00:04:08,440 --> 00:04:15,010
whole thing explodes I don't know your

00:04:11,440 --> 00:04:17,739
your shopping cart on your site is at

00:04:15,010 --> 00:04:19,750
some point cached and I don't know you

00:04:17,739 --> 00:04:21,639
cannot add any items anymore because

00:04:19,750 --> 00:04:23,530
there's some caching for example just

00:04:21,639 --> 00:04:28,840
come up with some random exam

00:04:23,530 --> 00:04:31,270
so yeah we also want to ensure that

00:04:28,840 --> 00:04:34,300
there are no questions introduced let's

00:04:31,270 --> 00:04:36,220
call the question testing of course we

00:04:34,300 --> 00:04:39,780
also want that for our core java script

00:04:36,220 --> 00:04:42,550
for example in order to ensure that this

00:04:39,780 --> 00:04:45,850
continues to work and especially because

00:04:42,550 --> 00:04:47,980
we need some kind of flexibility in

00:04:45,850 --> 00:04:49,540
order to innovate because when we know

00:04:47,980 --> 00:04:51,580
that stuff is working we can change

00:04:49,540 --> 00:04:55,890
something otherwise we don't change it

00:04:51,580 --> 00:04:58,360
because we don't want to risk anything

00:04:55,890 --> 00:05:00,850
there are a couple of more problems I

00:04:58,360 --> 00:05:02,830
would like to stress out the second one

00:05:00,850 --> 00:05:05,110
new members come into the community if

00:05:02,830 --> 00:05:07,600
you are new into the system and you

00:05:05,110 --> 00:05:11,080
don't know how it works it can be pretty

00:05:07,600 --> 00:05:13,240
hard Drupal is a beast it is so big and

00:05:11,080 --> 00:05:15,040
it's getting bigger and bigger I mean

00:05:13,240 --> 00:05:17,440
after you listen to the trees note like

00:05:15,040 --> 00:05:21,669
there was no like simple thing in there

00:05:17,440 --> 00:05:23,740
it got like you know like I mean preview

00:05:21,669 --> 00:05:27,910
seems to be like the simplest one of his

00:05:23,740 --> 00:05:31,120
suggestions actually so in order to like

00:05:27,910 --> 00:05:33,940
keep up with that we need some way to

00:05:31,120 --> 00:05:38,260
enable new people to also do something

00:05:33,940 --> 00:05:41,890
and one way is to basically document the

00:05:38,260 --> 00:05:45,100
system using tests so if someone new

00:05:41,890 --> 00:05:48,130
comes in they can see okay this specific

00:05:45,100 --> 00:05:50,200
thing on turbo works like that because

00:05:48,130 --> 00:05:52,630
the test kind of describe how they are

00:05:50,200 --> 00:05:54,700
how it's supposed to work and then they

00:05:52,630 --> 00:05:57,490
can make changes because they know the

00:05:54,700 --> 00:06:00,090
tests are still working so here's like

00:05:57,490 --> 00:06:05,850
my favor about testing that AI couldn't

00:06:00,090 --> 00:06:11,410
send other things also for that but yeah

00:06:05,850 --> 00:06:15,190
but it's a su G so via and so here are

00:06:11,410 --> 00:06:17,680
three types of testing or like Sally

00:06:15,190 --> 00:06:20,260
well some kind of types of testing you

00:06:17,680 --> 00:06:22,990
can do let's start at the top and to end

00:06:20,260 --> 00:06:24,580
/ functional / regression whatever

00:06:22,990 --> 00:06:26,710
testing there's many words for

00:06:24,580 --> 00:06:31,419
everything and to end testing describes

00:06:26,710 --> 00:06:34,740
the idea to have an entire site test

00:06:31,419 --> 00:06:36,590
something like clicking on a link

00:06:34,740 --> 00:06:38,870
logging in

00:06:36,590 --> 00:06:41,990
posting a comment and ensuring that the

00:06:38,870 --> 00:06:45,290
comet appears this is really like what

00:06:41,990 --> 00:06:47,300
and it tests a lot of things but on the

00:06:45,290 --> 00:06:51,530
other hand it has the disadvantage that

00:06:47,300 --> 00:06:54,800
it doesn't really help to know where the

00:06:51,530 --> 00:06:57,110
problem is when something breaks like

00:06:54,800 --> 00:06:59,300
you don't know which subsystem might

00:06:57,110 --> 00:07:01,970
have the problem because it's involving

00:06:59,300 --> 00:07:04,220
every subsystem so if you go further

00:07:01,970 --> 00:07:07,040
down the stack let's say to integration

00:07:04,220 --> 00:07:10,100
testing then you are have a smaller

00:07:07,040 --> 00:07:11,960
scope in which you know maybe where they

00:07:10,100 --> 00:07:13,970
are the back could be so what is

00:07:11,960 --> 00:07:19,340
integration testing integration testing

00:07:13,970 --> 00:07:21,890
is testing how several units or

00:07:19,340 --> 00:07:24,890
components or whatever of your system

00:07:21,890 --> 00:07:27,740
work together in doable this would be

00:07:24,890 --> 00:07:30,860
for example to create some content via

00:07:27,740 --> 00:07:33,800
the API safe the content and ensure that

00:07:30,860 --> 00:07:37,250
some kind of I don't know some view for

00:07:33,800 --> 00:07:40,940
example returns them as a result and the

00:07:37,250 --> 00:07:45,500
bottom is our unit test unit tests is

00:07:40,940 --> 00:07:49,700
the idea or the art of testing just a

00:07:45,500 --> 00:07:54,170
specific thing just just that thing and

00:07:49,700 --> 00:07:55,990
trust for itself and and in an ideal

00:07:54,170 --> 00:07:59,510
world we would have kind of a pyramid

00:07:55,990 --> 00:08:02,150
where we have a lot of unit tests which

00:07:59,510 --> 00:08:04,910
also fail if we introduce a back then

00:08:02,150 --> 00:08:09,140
more like fewer integration tests and

00:08:04,910 --> 00:08:13,390
like even fewer end-to-end tests in

00:08:09,140 --> 00:08:18,890
order to not have like maintenance costs

00:08:13,390 --> 00:08:25,510
for our tests so here's a state of

00:08:18,890 --> 00:08:29,000
testing in Drupal 8.1 we have unit tests

00:08:25,510 --> 00:08:32,660
you see the unit test case and wondering

00:08:29,000 --> 00:08:35,510
whether ever it's called laser pointer

00:08:32,660 --> 00:08:39,200
but I don't have any way and so this

00:08:35,510 --> 00:08:43,730
unit test case which is basically PHP

00:08:39,200 --> 00:08:47,090
base unit testing it provides you some

00:08:43,730 --> 00:08:48,600
helper methods to deal with roopa like I

00:08:47,090 --> 00:08:51,089
don't know set up some comfort

00:08:48,600 --> 00:08:53,579
or something you should certainly check

00:08:51,089 --> 00:08:59,279
it out but there is nothing for Yahoo

00:08:53,579 --> 00:09:01,110
script so far then there are this they

00:08:59,279 --> 00:09:05,579
are integration tests we call them

00:09:01,110 --> 00:09:07,470
colonel tests because our system when it

00:09:05,579 --> 00:09:09,569
boots up it there's a thing called

00:09:07,470 --> 00:09:13,860
Colonel which it's kind of like a linux

00:09:09,569 --> 00:09:16,529
kernel it starts duple and contests

00:09:13,860 --> 00:09:19,800
allow you to really easy like create

00:09:16,529 --> 00:09:21,389
stuff via the API but if you think about

00:09:19,800 --> 00:09:24,149
the other script there could be like a

00:09:21,389 --> 00:09:26,519
similarity where you have like HTML

00:09:24,149 --> 00:09:29,160
already on your side and llaves kept

00:09:26,519 --> 00:09:31,139
running and you just click around but

00:09:29,160 --> 00:09:33,209
you don't have an actual site underneath

00:09:31,139 --> 00:09:35,459
just testing all the other script

00:09:33,209 --> 00:09:38,790
together but without an actual site

00:09:35,459 --> 00:09:40,889
there's though so far nothing in Drupal

00:09:38,790 --> 00:09:44,279
itself to support you to do that and

00:09:40,889 --> 00:09:47,069
then there was into interesting there it

00:09:44,279 --> 00:09:48,839
looks a little bit better we have their

00:09:47,069 --> 00:09:50,880
three different system actually or it's

00:09:48,839 --> 00:09:53,550
kind of true so we have a browser test

00:09:50,880 --> 00:09:56,160
pace that's so let's start with simple

00:09:53,550 --> 00:10:01,529
test that still exists from tupelo seven

00:09:56,160 --> 00:10:04,740
and six that's still the thing you

00:10:01,529 --> 00:10:06,750
should use if you don't want to risk

00:10:04,740 --> 00:10:09,930
anything and then there's browser test

00:10:06,750 --> 00:10:13,740
base which is doing the same it installs

00:10:09,930 --> 00:10:16,680
of Drupal you can create content they

00:10:13,740 --> 00:10:19,079
are doing HTTP because I don't know

00:10:16,680 --> 00:10:22,319
submitting forms and then checking the

00:10:19,079 --> 00:10:24,959
output but it's based upon phpunit

00:10:22,319 --> 00:10:28,769
rather than simple test which enables

00:10:24,959 --> 00:10:32,100
cool soft like you know integration with

00:10:28,769 --> 00:10:34,170
Jenkins out of the box or using your IDE

00:10:32,100 --> 00:10:37,470
in order to execute those tests which is

00:10:34,170 --> 00:10:40,189
really cool and other kind of stuff and

00:10:37,470 --> 00:10:42,889
finally there's JavaScript test base

00:10:40,189 --> 00:10:49,740
which is a way to test the other script

00:10:42,889 --> 00:10:51,420
using phantom jas inside like a PHP unit

00:10:49,740 --> 00:10:56,250
based test I will show some examples

00:10:51,420 --> 00:10:58,110
later how you can do that yeah here's a

00:10:56,250 --> 00:11:00,809
quick overview over other kind of

00:10:58,110 --> 00:11:01,920
end-to-end technologies there's the

00:11:00,809 --> 00:11:05,190
thing called B hat

00:11:01,920 --> 00:11:09,779
a lot of you already know about it it is

00:11:05,190 --> 00:11:14,220
a tool to define how your website should

00:11:09,779 --> 00:11:17,700
work in a language of your client and it

00:11:14,220 --> 00:11:21,449
allows your client to speak in their

00:11:17,700 --> 00:11:24,360
domain language what they want for so

00:11:21,449 --> 00:11:27,360
for example if you are bank you maybe

00:11:24,360 --> 00:11:30,630
have a different language then the usual

00:11:27,360 --> 00:11:33,000
Drupal people they don't talk about

00:11:30,630 --> 00:11:35,360
entities I guess they'd rather talk

00:11:33,000 --> 00:11:38,220
about I don't know accounts and

00:11:35,360 --> 00:11:40,620
transfers and money or something like

00:11:38,220 --> 00:11:44,399
that and you should certainly check it

00:11:40,620 --> 00:11:47,220
out for like sites for your cup for

00:11:44,399 --> 00:11:49,490
custom size for custom projects it's

00:11:47,220 --> 00:11:56,670
often used together with selenium

00:11:49,490 --> 00:12:00,630
selenium is basically a way to control

00:11:56,670 --> 00:12:04,170
browsers so you can start up a Firefox

00:12:00,630 --> 00:12:05,730
instance and then test your site inside

00:12:04,170 --> 00:12:07,860
this Firefox instance so you can

00:12:05,730 --> 00:12:10,350
actually open up in Firefox and see how

00:12:07,860 --> 00:12:13,620
the browser behaves so you can actually

00:12:10,350 --> 00:12:15,000
watch the user doing something which is

00:12:13,620 --> 00:12:19,680
pretty good for debugging purposes

00:12:15,000 --> 00:12:21,690
actually then there's Casper Jes and

00:12:19,680 --> 00:12:23,100
once you have like one more Yahveh

00:12:21,690 --> 00:12:26,970
script on your site you realize that

00:12:23,100 --> 00:12:29,940
it's hard to test so be it is PHP based

00:12:26,970 --> 00:12:31,680
so if if you do a lot of you I was good

00:12:29,940 --> 00:12:34,500
stuff then it's hard to communicate

00:12:31,680 --> 00:12:36,990
between the PHP and the javascript in

00:12:34,500 --> 00:12:40,459
order to test something and Casper chase

00:12:36,990 --> 00:12:43,560
all set by being Galvis with first so

00:12:40,459 --> 00:12:45,180
you basically already you are in the

00:12:43,560 --> 00:12:48,029
language of the other script already and

00:12:45,180 --> 00:12:50,579
they can also like coincides click stuff

00:12:48,029 --> 00:12:53,940
submit forms and stuff away and then

00:12:50,579 --> 00:12:56,190
finally we have now in triple browser

00:12:53,940 --> 00:12:58,350
test based in JavaScript a space to do

00:12:56,190 --> 00:13:00,449
this kind of testing and it's a new

00:12:58,350 --> 00:13:02,459
feature of 81 which is another cool

00:13:00,449 --> 00:13:07,440
thing that we can innovate actually now

00:13:02,459 --> 00:13:09,600
between nature releases so yeah a quick

00:13:07,440 --> 00:13:11,459
I will show an example for the test base

00:13:09,600 --> 00:13:13,410
works so you can apply it on your own

00:13:11,459 --> 00:13:15,500
projects or contract modules or

00:13:13,410 --> 00:13:20,700
something or call purchase

00:13:15,500 --> 00:13:23,130
it is nuisance ablate it has a terminal

00:13:20,700 --> 00:13:25,529
support and phpstorm support and space

00:13:23,130 --> 00:13:29,190
based upon phpunit let's just have a

00:13:25,529 --> 00:13:34,200
look at an example so you start with

00:13:29,190 --> 00:13:36,329
adding a file to the so here's a module

00:13:34,200 --> 00:13:37,800
for example and there's like a test

00:13:36,329 --> 00:13:39,779
directory and you have a source

00:13:37,800 --> 00:13:41,700
directory and then a functional

00:13:39,779 --> 00:13:43,620
directory and inside they are you to

00:13:41,700 --> 00:13:46,470
place your tests so for example example

00:13:43,620 --> 00:13:49,019
test dot PHP you define a class which

00:13:46,470 --> 00:13:50,940
extends this browser test base you say

00:13:49,019 --> 00:13:53,760
okay which modules do I want to have in

00:13:50,940 --> 00:13:57,029
this case the examples module which

00:13:53,760 --> 00:14:00,870
really exists and then you can define

00:13:57,029 --> 00:14:04,529
your test here in this test we create a

00:14:00,870 --> 00:14:07,980
user locks it did and we log it in then

00:14:04,529 --> 00:14:11,100
we go to a specific page test page and

00:14:07,980 --> 00:14:14,250
check whether we get a 200 back really

00:14:11,100 --> 00:14:16,560
simple test nothing fancy is going on

00:14:14,250 --> 00:14:19,740
here and then finally we check whether

00:14:16,560 --> 00:14:23,250
some text appears on that page the

00:14:19,740 --> 00:14:26,100
interesting thing is like you can write

00:14:23,250 --> 00:14:28,680
it like that and then executed via

00:14:26,100 --> 00:14:30,899
phpstorm directly without leaving like

00:14:28,680 --> 00:14:32,970
the context of doing something you don't

00:14:30,899 --> 00:14:35,070
have to go to the simple test you I in

00:14:32,970 --> 00:14:37,019
Drupal for example so you don't you

00:14:35,070 --> 00:14:42,089
cannot distract yourself that easy

00:14:37,019 --> 00:14:45,209
anymore um yeah that's a couple of

00:14:42,089 --> 00:14:49,079
things you can do in those tests in the

00:14:45,209 --> 00:14:52,519
setup method you can we ate like content

00:14:49,079 --> 00:14:55,260
or configuration you need for the test

00:14:52,519 --> 00:14:58,350
it's similar to simple test you can to

00:14:55,260 --> 00:15:00,839
forget stuff too which basically is a

00:14:58,350 --> 00:15:02,310
get request to to click on a link or

00:15:00,839 --> 00:15:05,640
something you can click on a link

00:15:02,310 --> 00:15:08,279
actually you can submit forms and you

00:15:05,640 --> 00:15:11,519
can check a couple of things like are

00:15:08,279 --> 00:15:14,370
there a couple of elements CSS so you

00:15:11,519 --> 00:15:16,260
can use CSS in order to check on your

00:15:14,370 --> 00:15:18,240
site whether something appears so for

00:15:16,260 --> 00:15:21,600
example this means that the view has

00:15:18,240 --> 00:15:23,699
three elements or three results you can

00:15:21,600 --> 00:15:25,770
also check that form elements exist in

00:15:23,699 --> 00:15:29,340
galley area and it's just now will you

00:15:25,770 --> 00:15:32,520
this work asset here

00:15:29,340 --> 00:15:34,590
which we've created has I don't know 50

00:15:32,520 --> 00:15:37,590
or something helper methods for you and

00:15:34,590 --> 00:15:39,690
we also extend it in Drupal so there's a

00:15:37,590 --> 00:15:43,410
lot of things there the cool thing is

00:15:39,690 --> 00:15:49,260
because a positive space is based upon

00:15:43,410 --> 00:15:52,740
mink mink is a browser abstraction layer

00:15:49,260 --> 00:15:57,950
so you can basically communicate with

00:15:52,740 --> 00:16:01,110
mink ended can deal with either a

00:15:57,950 --> 00:16:04,980
php-based browser so like a fake browser

00:16:01,110 --> 00:16:07,980
or like phantom jas which is a headless

00:16:04,980 --> 00:16:10,200
browser which one's pretty quickly or

00:16:07,980 --> 00:16:13,170
you can even communicate the selenium

00:16:10,200 --> 00:16:16,170
saw a real browser which is really nice

00:16:13,170 --> 00:16:19,890
because we can run our tests are ready

00:16:16,170 --> 00:16:25,470
in all browsers if we want to if we set

00:16:19,890 --> 00:16:28,770
up with correctly on the test board so

00:16:25,470 --> 00:16:32,130
how do you run xeo tests you start with

00:16:28,770 --> 00:16:36,450
copying phpunit XML artist it's a file

00:16:32,130 --> 00:16:39,300
in Drupal to phpunit XML and then you

00:16:36,450 --> 00:16:42,030
adapt three lines it's at the top of the

00:16:39,300 --> 00:16:44,340
file the first one is the base URL so

00:16:42,030 --> 00:16:46,890
where's your actual to the side the

00:16:44,340 --> 00:16:49,920
second one the database so the database

00:16:46,890 --> 00:16:53,040
credentials and the final one is a

00:16:49,920 --> 00:16:55,590
directory where people put some verbose

00:16:53,040 --> 00:16:57,720
output so that some blockings for each

00:16:55,590 --> 00:17:00,420
page you visit it so you can then

00:16:57,720 --> 00:17:02,760
afterwards see which HTML was on those

00:17:00,420 --> 00:17:05,310
pages and once you have that once you

00:17:02,760 --> 00:17:08,790
ask that you can start running those

00:17:05,310 --> 00:17:11,670
tests and yeah don't worry about it

00:17:08,790 --> 00:17:15,090
anymore let's have a look at how Yahveh

00:17:11,670 --> 00:17:17,520
script test based works javascript test

00:17:15,090 --> 00:17:20,880
place is also using mink so it's

00:17:17,520 --> 00:17:23,400
basically really just using a different

00:17:20,880 --> 00:17:26,220
back-end faux mink and that's it which

00:17:23,400 --> 00:17:31,070
is really cool because it's really

00:17:26,220 --> 00:17:33,840
helpful phantom chess itself is our

00:17:31,070 --> 00:17:36,230
back-end in that way it's kind of a

00:17:33,840 --> 00:17:39,120
browser but without any visual

00:17:36,230 --> 00:17:42,390
representation it is it's running in the

00:17:39,120 --> 00:17:44,790
background like in your console

00:17:42,390 --> 00:17:46,020
or in your terminal eight but it still

00:17:44,790 --> 00:17:48,330
allows you for example to take

00:17:46,020 --> 00:17:50,760
screenshots of what actually happens and

00:17:48,330 --> 00:17:53,460
you can also like attached to tobacco

00:17:50,760 --> 00:17:57,870
and check what your Yahveh script is

00:17:53,460 --> 00:18:01,140
doing which is good so let's have a look

00:17:57,870 --> 00:18:04,410
at a yoga script test the interesting

00:18:01,140 --> 00:18:06,240
thing it looks really the same instead

00:18:04,410 --> 00:18:08,760
of putting it into the functional

00:18:06,240 --> 00:18:11,940
directory we put it into functional

00:18:08,760 --> 00:18:13,800
Yahveh script so again we put it in the

00:18:11,940 --> 00:18:17,580
test source functional yoga script and

00:18:13,800 --> 00:18:20,010
then the filename test at PHP we say

00:18:17,580 --> 00:18:21,960
which modules we want this time to buy a

00:18:20,010 --> 00:18:24,450
node this is an example of typical

00:18:21,960 --> 00:18:28,350
itself we login a user we go to a

00:18:24,450 --> 00:18:29,940
certain page we click on a link here we

00:18:28,350 --> 00:18:31,620
click on a link and then we check

00:18:29,940 --> 00:18:33,900
whether it's visible or not so you

00:18:31,620 --> 00:18:37,470
probably know the toolbar in Drupal wake

00:18:33,900 --> 00:18:40,170
and see like a menu on the left side and

00:18:37,470 --> 00:18:43,250
you click on there and then it

00:18:40,170 --> 00:18:47,100
disappears and that's what we check here

00:18:43,250 --> 00:18:50,580
so this is kind of working as expected

00:18:47,100 --> 00:18:52,920
the browser in the background execute

00:18:50,580 --> 00:18:55,680
that kind of operation so the clicking

00:18:52,920 --> 00:18:57,060
and then we do a sort element not

00:18:55,680 --> 00:18:58,710
visible so that checks whether the

00:18:57,060 --> 00:19:02,390
element is there and then it

00:18:58,710 --> 00:19:05,310
communicates with the browser again and

00:19:02,390 --> 00:19:08,400
checks what's going on so let's have a

00:19:05,310 --> 00:19:11,910
look how this actually works so here's

00:19:08,400 --> 00:19:15,690
an example so we start phantom jas using

00:19:11,910 --> 00:19:18,210
this command don't be scared that's you

00:19:15,690 --> 00:19:20,580
just need to copy it once and it's

00:19:18,210 --> 00:19:22,710
documented on a change record it's

00:19:20,580 --> 00:19:25,590
documented in with me inside to pull

00:19:22,710 --> 00:19:28,250
itself so don't be worried yet there you

00:19:25,590 --> 00:19:31,950
could actually specify a different

00:19:28,250 --> 00:19:36,000
window size is if you want to emulate a

00:19:31,950 --> 00:19:38,360
mobile browser so you start that and

00:19:36,000 --> 00:19:43,050
then in the second screen at the bottom

00:19:38,360 --> 00:19:45,540
we start at some point all the tests we

00:19:43,050 --> 00:19:48,920
have in Drupal at some point so it

00:19:45,540 --> 00:19:52,050
starts so you need to specify icy cold

00:19:48,920 --> 00:19:54,270
it's just configuration you just type in

00:19:52,050 --> 00:19:56,210
the command and don't worry about it and

00:19:54,270 --> 00:20:01,250
here at the top we see what's going on

00:19:56,210 --> 00:20:04,400
let's quickly stop so what you see here

00:20:01,250 --> 00:20:08,630
at the top are the commands phantom j/s

00:20:04,400 --> 00:20:12,260
pets so here you see the command clear

00:20:08,630 --> 00:20:14,390
cookies and we set so what happens is

00:20:12,260 --> 00:20:18,790
that we have a phantom jazz instance and

00:20:14,390 --> 00:20:21,440
we have like the PHP and the PHP

00:20:18,790 --> 00:20:24,200
installs the Drupal site does something

00:20:21,440 --> 00:20:26,750
and uninstall the trooper side but in

00:20:24,200 --> 00:20:30,020
the meantime that the browser still

00:20:26,750 --> 00:20:34,610
stays there and in order to not cause

00:20:30,020 --> 00:20:37,160
any data problems or like data which is

00:20:34,610 --> 00:20:39,530
still in the client we need to look for

00:20:37,160 --> 00:20:41,750
example remove all the cookies we need

00:20:39,530 --> 00:20:43,520
to remove like local storage and all the

00:20:41,750 --> 00:20:45,620
information which is statically

00:20:43,520 --> 00:20:49,550
installed in the browser and by that we

00:20:45,620 --> 00:20:52,520
communicate with phantom shares using

00:20:49,550 --> 00:20:54,560
those commands and at some point you see

00:20:52,520 --> 00:20:57,770
a little bit more going on let's see

00:20:54,560 --> 00:21:00,860
should happen in a while yeah that's

00:20:57,770 --> 00:21:03,050
where we actually sent like HTTP

00:21:00,860 --> 00:21:05,630
requests and like clicking links and

00:21:03,050 --> 00:21:08,630
stuff like that and yeah and then at the

00:21:05,630 --> 00:21:11,810
end you see that the tests so we have

00:21:08,630 --> 00:21:15,800
three tests in the this example and it

00:21:11,810 --> 00:21:19,190
takes 22 seconds which is eight seconds

00:21:15,800 --> 00:21:22,460
per test which is okayish but does it

00:21:19,190 --> 00:21:24,470
scale that's the question drupal has ten

00:21:22,460 --> 00:21:26,690
thousands of tests if you would

00:21:24,470 --> 00:21:29,470
calculate that and that could be easily

00:21:26,690 --> 00:21:29,470
hours

00:21:30,360 --> 00:21:38,220
so there we go here's the summary of

00:21:34,740 --> 00:21:43,890
what we saw is this is the command you

00:21:38,220 --> 00:21:47,220
need to run them yeah this is the output

00:21:43,890 --> 00:21:49,500
then and you can specify a couple of

00:21:47,220 --> 00:21:52,140
things to phpunit you can either provide

00:21:49,500 --> 00:21:54,330
like a file name so this is like an full

00:21:52,140 --> 00:21:57,900
file name to a test file and with that

00:21:54,330 --> 00:22:00,030
you want just a specific test file or

00:21:57,900 --> 00:22:02,760
just a specific tests and but you can

00:22:00,030 --> 00:22:05,010
also won them all so you can specify for

00:22:02,760 --> 00:22:12,150
example a directory and then it tests

00:22:05,010 --> 00:22:19,320
all tests inside the directory oh good

00:22:12,150 --> 00:22:25,710
question so we wanted as web server user

00:22:19,320 --> 00:22:28,890
because um we for example we will write

00:22:25,710 --> 00:22:31,770
some files like when you save a file or

00:22:28,890 --> 00:22:34,080
something we want to ensure that the

00:22:31,770 --> 00:22:41,580
exercise is then also able to read those

00:22:34,080 --> 00:22:46,670
files yeah it's basically what the test

00:22:41,580 --> 00:22:46,670
but is also doing you know

00:22:46,940 --> 00:22:52,670
does it make sense for you yeah exactly

00:22:50,900 --> 00:22:54,890
that's why you don't never have that

00:22:52,670 --> 00:22:57,200
kind of problem but otherwise like if

00:22:54,890 --> 00:22:58,990
for example the test like creates the

00:22:57,200 --> 00:23:02,360
fighter right to it files directory and

00:22:58,990 --> 00:23:04,700
and then if you are then like in the

00:23:02,360 --> 00:23:06,680
actual site upload a file then this

00:23:04,700 --> 00:23:09,680
actual site need to be able to write to

00:23:06,680 --> 00:23:16,630
it to that directory so it's easiest to

00:23:09,680 --> 00:23:23,240
just run the test s the web user so

00:23:16,630 --> 00:23:24,950
here's a yeah oh yeah oh yeah Tony

00:23:23,240 --> 00:23:27,710
there's a tear down message you can

00:23:24,950 --> 00:23:29,600
implement in order to clean up stuff

00:23:27,710 --> 00:23:34,640
like on the file system or something

00:23:29,600 --> 00:23:38,240
that's totally possible yeah so we in

00:23:34,640 --> 00:23:42,440
duple we implement the idea to install

00:23:38,240 --> 00:23:45,110
Drupal do our stuff and uninstall or and

00:23:42,440 --> 00:23:48,740
then drop the database basically so

00:23:45,110 --> 00:23:53,510
that's lower but it's also removing like

00:23:48,740 --> 00:23:56,030
hassle from developers yeah whether you

00:23:53,510 --> 00:23:57,260
want to do that I mean for deauville it

00:23:56,030 --> 00:23:59,300
only makes sense because we have

00:23:57,260 --> 00:24:01,100
hundreds of tests so in case they would

00:23:59,300 --> 00:24:04,130
interfere they would certainly interfere

00:24:01,100 --> 00:24:06,260
at some point for custom projects it

00:24:04,130 --> 00:24:08,210
might not make sense for specific use

00:24:06,260 --> 00:24:10,700
cases but we handled it automatically

00:24:08,210 --> 00:24:14,660
but because it's based upon buspar unit

00:24:10,700 --> 00:24:17,000
or like on PHP class hierarchy you can

00:24:14,660 --> 00:24:19,340
override that behavior and maybe import

00:24:17,000 --> 00:24:23,510
always the same database from some

00:24:19,340 --> 00:24:27,680
database dump if you really want to yeah

00:24:23,510 --> 00:24:30,110
we welcome yeah just ask so here's a

00:24:27,680 --> 00:24:32,750
question why do we actually use Phantom

00:24:30,110 --> 00:24:36,280
dress and why do we not use like an

00:24:32,750 --> 00:24:38,660
actual browser like Firefox and the

00:24:36,280 --> 00:24:40,400
reason is actually quite simple it's a

00:24:38,660 --> 00:24:43,250
headless browser so it doesn't actually

00:24:40,400 --> 00:24:45,110
have to do a lot of things as a normal

00:24:43,250 --> 00:24:48,470
browser so it's like much fast it's like

00:24:45,110 --> 00:24:50,720
two times faster or something that then

00:24:48,470 --> 00:24:56,450
leads to less resources on the test but

00:24:50,720 --> 00:24:59,539
for example potentially it may be though

00:24:56,450 --> 00:25:01,129
it has some disadvantages for example

00:24:59,539 --> 00:25:03,470
because it's headless and because you

00:25:01,129 --> 00:25:05,989
don't have an actual browser it is

00:25:03,470 --> 00:25:09,440
harder to debug because you don't see

00:25:05,989 --> 00:25:12,019
what's going on or not that easy when we

00:25:09,440 --> 00:25:14,119
would use selenium for example and an

00:25:12,019 --> 00:25:15,769
actual Basel that could be easier so

00:25:14,119 --> 00:25:19,609
maybe it's up to discussion whether we

00:25:15,769 --> 00:25:21,700
want to keep phantom jess actually and

00:25:19,609 --> 00:25:25,580
especially the way how we implemented it

00:25:21,700 --> 00:25:27,859
yeah another in general problem with

00:25:25,580 --> 00:25:29,629
end-to-end testing so that's all enter

00:25:27,859 --> 00:25:32,299
interesting what we saw it so far is

00:25:29,629 --> 00:25:34,820
that it's way too slow it's super boring

00:25:32,299 --> 00:25:36,909
like if you 15 tests and you need a

00:25:34,820 --> 00:25:44,749
minute then you are certainly on Twitter

00:25:36,909 --> 00:25:47,210
like there's no way I want it so yeah

00:25:44,749 --> 00:25:49,599
another problem is that the tests too

00:25:47,210 --> 00:25:52,220
much so if you test the entire system

00:25:49,599 --> 00:25:54,889
you don't know where the problem is if

00:25:52,220 --> 00:25:57,080
you just test a specific thing and that

00:25:54,889 --> 00:26:01,249
fails you know the problem is in that

00:25:57,080 --> 00:26:03,259
specific thing it's also L phone for

00:26:01,249 --> 00:26:05,119
example we saw before that we use like

00:26:03,259 --> 00:26:08,539
CSS selectors so what happens if you

00:26:05,119 --> 00:26:11,059
change CSS selectors boom test break and

00:26:08,539 --> 00:26:13,609
the other the last point to defeat the

00:26:11,059 --> 00:26:15,859
feedback cycle is way too slow like in

00:26:13,609 --> 00:26:18,229
do block or we have like thousands of

00:26:15,859 --> 00:26:19,970
tests and they need I think currently

00:26:18,229 --> 00:26:23,929
it's like just 20 minutes but we are

00:26:19,970 --> 00:26:27,649
using like an infinite fast hardware and

00:26:23,929 --> 00:26:30,019
I think 19 or is it 15 I don't know

00:26:27,649 --> 00:26:34,820
parallel processes in order to run them

00:26:30,019 --> 00:26:39,889
all how many oh I'm sorry it's it's even

00:26:34,820 --> 00:26:46,940
more yeah and because it's because it

00:26:39,889 --> 00:26:49,419
was distracting people and it's because

00:26:46,940 --> 00:26:49,419
it costs money

00:26:50,169 --> 00:26:57,730
well well yeah triples money in a way it

00:26:55,809 --> 00:27:00,249
could be I don't know it could be

00:26:57,730 --> 00:27:02,409
invested in something else I don't know

00:27:00,249 --> 00:27:05,739
how much is there she is but like just

00:27:02,409 --> 00:27:08,710
imagine if we would actually so we have

00:27:05,739 --> 00:27:11,679
a test shoot which is using a lot of

00:27:08,710 --> 00:27:13,629
unit testing if like I don't know how

00:27:11,679 --> 00:27:16,869
many units as we have but in case that

00:27:13,629 --> 00:27:19,259
would be like simple tests or like balls

00:27:16,869 --> 00:27:23,619
it has place as well that could easily

00:27:19,259 --> 00:27:29,289
like I don't know x 5 that in money and

00:27:23,619 --> 00:27:32,980
time so yeah yeah i mean the solution to

00:27:29,289 --> 00:27:36,549
that is to use unit testing which so

00:27:32,980 --> 00:27:39,840
what is unit testing unit testing is to

00:27:36,549 --> 00:27:42,730
just test a specific system instead of

00:27:39,840 --> 00:27:44,649
everything like that basically means we

00:27:42,730 --> 00:27:47,080
would you would not install the site but

00:27:44,649 --> 00:27:49,450
you would rather lower just a specific

00:27:47,080 --> 00:27:54,279
Yahveh script file execute a function

00:27:49,450 --> 00:27:58,149
and check the output so yeah it just you

00:27:54,279 --> 00:28:00,369
know testing is you give it some input

00:27:58,149 --> 00:28:01,840
and you expect some output or you give

00:28:00,369 --> 00:28:06,100
it some input and you expect some

00:28:01,840 --> 00:28:09,549
behavior the thing with behavior here is

00:28:06,100 --> 00:28:11,559
that javascript is asking fun so you

00:28:09,549 --> 00:28:15,309
don't really have output you rather have

00:28:11,559 --> 00:28:19,139
like side effects going on or that

00:28:15,309 --> 00:28:21,789
promises so here's an example of some

00:28:19,139 --> 00:28:25,239
really simplified JavaScript unit

00:28:21,789 --> 00:28:27,220
testing because it's actually not using

00:28:25,239 --> 00:28:30,369
asking phone code or something that's a

00:28:27,220 --> 00:28:33,609
small library for to do txt to to txt is

00:28:30,369 --> 00:28:37,989
like a textual format of writing your to

00:28:33,609 --> 00:28:42,340
do's so you oh I didn't changed it all

00:28:37,989 --> 00:28:46,210
right it is a way to specify something

00:28:42,340 --> 00:28:48,820
you should do so you give it a title you

00:28:46,210 --> 00:28:50,859
give give it some text and some projects

00:28:48,820 --> 00:28:52,929
and you can say when should it be

00:28:50,859 --> 00:28:55,299
finished and is it finished or not so

00:28:52,929 --> 00:28:57,249
the X specifies whether it's finished or

00:28:55,299 --> 00:28:59,289
not and that's just it you write it into

00:28:57,249 --> 00:29:00,530
a text file and be done with it but they

00:28:59,289 --> 00:29:04,680
are clients for everything

00:29:00,530 --> 00:29:07,800
so here's an example of how how to write

00:29:04,680 --> 00:29:11,490
a test for that so this is using a

00:29:07,800 --> 00:29:13,080
certain way to define the tests it's

00:29:11,490 --> 00:29:19,020
called maka I will talk about that later

00:29:13,080 --> 00:29:21,540
a little bit but basically the idea is

00:29:19,020 --> 00:29:24,180
really similar you set up something in

00:29:21,540 --> 00:29:28,320
this case it to do bars parsa and then

00:29:24,180 --> 00:29:33,780
you check that so so you set up at 02 /

00:29:28,320 --> 00:29:36,000
parcel and pass the string hello and you

00:29:33,780 --> 00:29:38,700
check the result which is a to do object

00:29:36,000 --> 00:29:44,940
and in this case I check whether the

00:29:38,700 --> 00:29:48,810
text of the to do object is hello it's

00:29:44,940 --> 00:29:51,150
using a library called child choice an

00:29:48,810 --> 00:29:53,940
assertion library for JavaScript because

00:29:51,150 --> 00:29:55,860
obviously in JavaScript this library for

00:29:53,940 --> 00:29:57,810
everything so even if you have a test

00:29:55,860 --> 00:30:02,100
framework you still need a certain

00:29:57,810 --> 00:30:04,290
framework so yeah when when you do that

00:30:02,100 --> 00:30:06,390
and if you want the tests you get and

00:30:04,290 --> 00:30:09,960
you don't have any code yet you get it

00:30:06,390 --> 00:30:12,720
out a word output then you write some

00:30:09,960 --> 00:30:15,330
code in order to fix that a new idea to

00:30:12,720 --> 00:30:17,520
do pass or in this case it's the

00:30:15,330 --> 00:30:19,620
simplest implementation which passes our

00:30:17,520 --> 00:30:24,660
test which is just returning the entire

00:30:19,620 --> 00:30:26,820
swing as our text you want it again and

00:30:24,660 --> 00:30:28,500
it passes and then like in an ideal

00:30:26,820 --> 00:30:32,060
world you would then continue with

00:30:28,500 --> 00:30:36,270
writing the other test so in this case

00:30:32,060 --> 00:30:39,930
i'm specifying a priority the cool thing

00:30:36,270 --> 00:30:42,330
is in this soon tips you can have like a

00:30:39,930 --> 00:30:45,450
human descriptive name for what do you

00:30:42,330 --> 00:30:48,780
test in this case here you specify

00:30:45,450 --> 00:30:50,550
priority and a text and we check whether

00:30:48,780 --> 00:30:53,700
there's a priority in the result and

00:30:50,550 --> 00:30:55,950
then you continue and then you fix it

00:30:53,700 --> 00:31:00,090
and then you write another test and by

00:30:55,950 --> 00:31:03,150
that you get this kind of loop so wet

00:31:00,090 --> 00:31:05,550
means you have a failing test you fix

00:31:03,150 --> 00:31:08,220
the failing test and then you can be

00:31:05,550 --> 00:31:09,660
factored and improve things and the crew

00:31:08,220 --> 00:31:12,900
thing like when you have that kind of

00:31:09,660 --> 00:31:15,000
tests afterwards when you use you hell

00:31:12,900 --> 00:31:17,010
you want to introduce a new feature you

00:31:15,000 --> 00:31:20,090
make it wet again you make it right a

00:31:17,010 --> 00:31:23,280
new test get a green again and refactor

00:31:20,090 --> 00:31:28,140
that's the ideal world of unit testing

00:31:23,280 --> 00:31:31,950
and the cool thing is that it's really a

00:31:28,140 --> 00:31:35,280
nice way to develop because you never

00:31:31,950 --> 00:31:37,110
leave the scope of your current work you

00:31:35,280 --> 00:31:38,490
can just one the tests they are

00:31:37,110 --> 00:31:41,610
immediate feedback they give you like

00:31:38,490 --> 00:31:43,200
immediate like I don't know immediate no

00:31:41,610 --> 00:31:46,920
that's not one millisecond but like

00:31:43,200 --> 00:31:49,890
below 100 milliseconds so you never get

00:31:46,920 --> 00:31:53,280
distracted and you can still focus a lot

00:31:49,890 --> 00:31:59,370
on working what you actually want to

00:31:53,280 --> 00:32:00,930
achieve yeah so so if we as the Drupal

00:31:59,370 --> 00:32:03,180
community would like to test our

00:32:00,930 --> 00:32:07,260
JavaScript there are all the

00:32:03,180 --> 00:32:10,320
possibilities so there are a couple of

00:32:07,260 --> 00:32:14,460
tools we could leverage there's first

00:32:10,320 --> 00:32:15,870
thing called testing framework you could

00:32:14,460 --> 00:32:20,100
think of a testing framework kind of

00:32:15,870 --> 00:32:22,800
like phpunit so there's qunit it

00:32:20,100 --> 00:32:25,350
currently has three thousand downloads a

00:32:22,800 --> 00:32:27,870
week so I would not really recommend it

00:32:25,350 --> 00:32:29,520
because it's not that yeah I try to came

00:32:27,870 --> 00:32:31,620
up with the numbers in order to justify

00:32:29,520 --> 00:32:34,740
why we want something and then there's

00:32:31,620 --> 00:32:38,310
Jasmine and Jasmine is like a testing

00:32:34,740 --> 00:32:42,270
framework which also allows you to run

00:32:38,310 --> 00:32:45,900
those tests in the browser 190 k then

00:32:42,270 --> 00:32:50,280
dares mock ha which is a noche es based

00:32:45,900 --> 00:32:53,160
testing 700,000 tape is a really simple

00:32:50,280 --> 00:32:55,040
alternative all the other ones are

00:32:53,160 --> 00:33:00,120
pretty complex tape is pretty simple

00:32:55,040 --> 00:33:03,990
then there are tests runners so test one

00:33:00,120 --> 00:33:06,360
us takes a testing framework and one

00:33:03,990 --> 00:33:10,140
them somewhere or in turn is also a

00:33:06,360 --> 00:33:12,270
testing framework but in turn has just

00:33:10,140 --> 00:33:14,490
like four thousand downloads but it's

00:33:12,270 --> 00:33:18,750
advertisement advertised as the hot new

00:33:14,490 --> 00:33:23,340
 it's interesting because it says it

00:33:18,750 --> 00:33:25,530
can one on CL I on browsers it can run

00:33:23,340 --> 00:33:30,270
on trouser stack

00:33:25,530 --> 00:33:32,430
which is a shared it's a way to one like

00:33:30,270 --> 00:33:34,920
you know like a cloud environment test

00:33:32,430 --> 00:33:37,950
in all the process or the mobile phones

00:33:34,920 --> 00:33:39,750
and everything at the same time so maybe

00:33:37,950 --> 00:33:42,300
in turn is actually interesting that's

00:33:39,750 --> 00:33:46,350
also karma which has three hundred fifty

00:33:42,300 --> 00:33:50,160
thousand downloads karma is also way to

00:33:46,350 --> 00:33:52,920
one Jasmine more car tape and few unit

00:33:50,160 --> 00:33:56,010
tests inside your browser in whatever

00:33:52,920 --> 00:33:58,380
browser you what you want so I actually

00:33:56,010 --> 00:34:01,530
think we should go with mocha and karma

00:33:58,380 --> 00:34:03,120
and so you know some occult basically

00:34:01,530 --> 00:34:06,630
it's testing framework and then comma in

00:34:03,120 --> 00:34:09,120
order to actually won our testing in the

00:34:06,630 --> 00:34:11,730
browser another a couple of other

00:34:09,120 --> 00:34:13,200
libraries you actually need a child and

00:34:11,730 --> 00:34:15,120
you know when you see the amount of

00:34:13,200 --> 00:34:18,390
downloads pretty much the same because

00:34:15,120 --> 00:34:20,580
you they are basically required chai is

00:34:18,390 --> 00:34:24,720
a certain library which allows you to

00:34:20,580 --> 00:34:27,450
check like that specific thing was

00:34:24,720 --> 00:34:29,400
actually done I will show an example

00:34:27,450 --> 00:34:33,840
later and they're soon on which is a

00:34:29,400 --> 00:34:37,620
mocking framework yeah whatever here's

00:34:33,840 --> 00:34:40,980
chai is also just like why they have

00:34:37,620 --> 00:34:42,840
three different notations to define you

00:34:40,980 --> 00:34:45,570
to check whether actually something

00:34:42,840 --> 00:34:47,460
happens so there's the assertion one

00:34:45,570 --> 00:34:50,760
which is like the classical one so

00:34:47,460 --> 00:34:54,149
assert equal hello as that the to do

00:34:50,760 --> 00:34:56,340
text is equal to hello classical one

00:34:54,149 --> 00:34:59,880
then there's a short notation which is

00:34:56,340 --> 00:35:05,190
to do tour tix takes a text should equal

00:34:59,880 --> 00:35:08,670
hello on they provide metric that like

00:35:05,190 --> 00:35:11,880
every Yahveh Script object behaves or

00:35:08,670 --> 00:35:13,650
has a should function it's pretty great

00:35:11,880 --> 00:35:16,170
and then there's the expect notation

00:35:13,650 --> 00:35:21,480
which is also expect that a certain

00:35:16,170 --> 00:35:25,770
valuable to equal hello i don't i don't

00:35:21,480 --> 00:35:30,870
know i don't get the point because

00:35:25,770 --> 00:35:33,150
assert is the shoulders and i like I

00:35:30,870 --> 00:35:35,910
okay the thing is the notation is

00:35:33,150 --> 00:35:37,490
more human friendly to eat all the

00:35:35,910 --> 00:35:45,890
expect notation

00:35:37,490 --> 00:35:47,750
oh oh yeah that's a good point because

00:35:45,890 --> 00:35:49,369
you cannot override the behavior of null

00:35:47,750 --> 00:35:53,300
object good point interesting

00:35:49,369 --> 00:35:57,619
interesting okay so you just went with a

00:35:53,300 --> 00:36:00,500
cert ah okay that's your so why do you

00:35:57,619 --> 00:36:10,490
went with expect why did you went with

00:36:00,500 --> 00:36:13,700
expect rather than Assad okay fair so so

00:36:10,490 --> 00:36:16,490
yeah it is I mean like you can certainly

00:36:13,700 --> 00:36:18,380
use the metrics of less code but there

00:36:16,490 --> 00:36:20,119
are other mattresses like the

00:36:18,380 --> 00:36:23,330
readability aspect is not that

00:36:20,119 --> 00:36:26,270
unimportant also when you have expect

00:36:23,330 --> 00:36:28,910
notation you can I get I yeah like the

00:36:26,270 --> 00:36:32,270
test one else can also output real

00:36:28,910 --> 00:36:35,470
actual English because like two equal

00:36:32,270 --> 00:36:40,520
they can convert that to a nicer output

00:36:35,470 --> 00:36:44,840
but yeah it's yeah I was good I don't

00:36:40,520 --> 00:36:47,990
know and so one problem we have in

00:36:44,840 --> 00:36:50,690
Drupal is that we mostly interact with

00:36:47,990 --> 00:36:54,859
the Dom we don't have like crazy

00:36:50,690 --> 00:36:57,950
libraries which I don't know calculate

00:36:54,859 --> 00:36:59,900
something crazy I don't know we add

00:36:57,950 --> 00:37:02,180
water or something but we bother always

00:36:59,900 --> 00:37:07,280
integrate we always interact with the

00:37:02,180 --> 00:37:10,220
real world so pure unit testing is maybe

00:37:07,280 --> 00:37:12,740
a little bit too ambitious for Drupal

00:37:10,220 --> 00:37:15,770
itself so i would actually propose we

00:37:12,740 --> 00:37:17,930
use some kind of integration testing for

00:37:15,770 --> 00:37:21,980
our yahoo script which means we need

00:37:17,930 --> 00:37:26,420
some kind of way to set up our yellow

00:37:21,980 --> 00:37:28,880
strip so for example we could have some

00:37:26,420 --> 00:37:32,030
HTML files which provides some initial

00:37:28,880 --> 00:37:37,609
output of tuple and together with even

00:37:32,030 --> 00:37:40,340
CSS files and then load our Yahveh

00:37:37,609 --> 00:37:43,369
script in there and test it so for

00:37:40,340 --> 00:37:46,640
example it would be like a front page

00:37:43,369 --> 00:37:50,670
with some content and then we could

00:37:46,640 --> 00:37:56,880
execute quick edit on the

00:37:50,670 --> 00:38:01,020
good God cricket I cancer so yeah so i

00:37:56,880 --> 00:38:02,820
would actually proposed to go with like

00:38:01,020 --> 00:38:06,060
integration tests first before you have

00:38:02,820 --> 00:38:08,070
any language in general I think we

00:38:06,060 --> 00:38:11,910
should apply some criterias to the

00:38:08,070 --> 00:38:14,190
distresses we make which is the I mean

00:38:11,910 --> 00:38:17,400
one criteria is feature witness witness

00:38:14,190 --> 00:38:20,630
and flexibility Drupal's really complex

00:38:17,400 --> 00:38:25,890
and that means that we potentially need

00:38:20,630 --> 00:38:29,190
flexibility where other people don't

00:38:25,890 --> 00:38:32,610
need it and their simplicity yeah you

00:38:29,190 --> 00:38:35,250
want it to be easy and I also easy to

00:38:32,610 --> 00:38:39,120
understand and best practices we don't

00:38:35,250 --> 00:38:41,690
want to alienate people in in duple we

00:38:39,120 --> 00:38:45,750
want to teach them best practices

00:38:41,690 --> 00:38:50,340
because duble is not everything actually

00:38:45,750 --> 00:38:52,890
I think troopers doing very much so yeah

00:38:50,340 --> 00:38:57,080
here's a couple of decisions and

00:38:52,890 --> 00:38:59,610
questions we could argue about now like

00:38:57,080 --> 00:39:01,500
do we want a wheel browser do we want to

00:38:59,610 --> 00:39:03,330
test our stuff in via browsers or do we

00:39:01,500 --> 00:39:05,820
want to continue to use just phantoms

00:39:03,330 --> 00:39:07,560
yes do we want to go with Saul SEPs of

00:39:05,820 --> 00:39:09,930
walsall stack they are both like

00:39:07,560 --> 00:39:12,620
external services which allow you to one

00:39:09,930 --> 00:39:15,630
the things in different environments

00:39:12,620 --> 00:39:18,030
they are both having an open source free

00:39:15,630 --> 00:39:21,330
model so we could probably use it or at

00:39:18,030 --> 00:39:24,410
least try to use it we could also

00:39:21,330 --> 00:39:28,530
experiment with using BDD or ABI head

00:39:24,410 --> 00:39:30,990
and not write our code to test stuff and

00:39:28,530 --> 00:39:34,020
obviously the questions which test one

00:39:30,990 --> 00:39:36,540
on framework we want to use yeah and

00:39:34,020 --> 00:39:42,680
there are a couple of issues and you can

00:39:36,540 --> 00:39:42,680
get involved with this yeah thank you

00:39:45,589 --> 00:39:53,819
yeah yeah please ask and discuss and

00:39:49,160 --> 00:39:57,710
that allows Prince on Friday and yeah

00:39:53,819 --> 00:39:57,710
that's also feedback slide

00:40:11,950 --> 00:40:19,280
some of the questions of your pocket and

00:40:15,290 --> 00:40:21,320
say we should use for any boots

00:40:19,280 --> 00:40:24,710
integration test because I think that's

00:40:21,320 --> 00:40:26,870
a lot easier for people coming a musical

00:40:24,710 --> 00:40:30,020
tribute tests to understand how to

00:40:26,870 --> 00:40:34,390
extend or add a new tax that goes to

00:40:30,020 --> 00:40:42,830
actual assert or texts some texts with

00:40:34,390 --> 00:40:46,540
even if you use a lot so I would really

00:40:42,830 --> 00:40:46,540
like to see us except that we're doing

00:40:49,870 --> 00:40:59,630
yeah that's a good point well one could

00:40:57,320 --> 00:41:03,080
disagree with um gherkin works really

00:40:59,630 --> 00:41:06,740
well in case you have a domain in which

00:41:03,080 --> 00:41:08,240
your gherkin text can be written i'm not

00:41:06,740 --> 00:41:10,010
sure but that drupal has a domain or

00:41:08,240 --> 00:41:13,400
whether bloopers actually way too

00:41:10,010 --> 00:41:16,670
flexible to have like a good domain but

00:41:13,400 --> 00:41:21,250
yeah maybe I'm totally bummed about that

00:41:16,670 --> 00:41:21,250
point yeah anyone else

00:41:25,470 --> 00:41:32,080
yeah yeah gherkin is basically the

00:41:28,570 --> 00:41:35,710
language the Gherkin is the idea to use

00:41:32,080 --> 00:41:38,590
human readable test a text to yeah

00:41:35,710 --> 00:41:43,510
except it's a cucumber and be here so

00:41:38,590 --> 00:41:47,380
cucumber is basically the Ruby framework

00:41:43,510 --> 00:41:49,720
to test stuff using the girl keeneland

00:41:47,380 --> 00:41:52,210
language that's the original of the

00:41:49,720 --> 00:41:56,320
guertin language and behead is basically

00:41:52,210 --> 00:42:03,760
a PHP implementation of gherkin blaster

00:41:56,320 --> 00:42:07,690
testing exactly exactly yeah which is

00:42:03,760 --> 00:42:12,510
the idea to not define that expected

00:42:07,690 --> 00:42:12,510
output but vava describe the system yeah

00:42:23,700 --> 00:42:26,700
yeah

00:42:32,730 --> 00:42:48,770
and there people were writing JavaScript

00:42:40,200 --> 00:42:48,770
based those things are extremely well

00:42:49,280 --> 00:43:06,120
yeah yeah I Tony a good yep totally the

00:43:00,240 --> 00:43:15,630
issues that I sometimes see action for

00:43:06,120 --> 00:43:19,200
the job is dad's a very small but

00:43:15,630 --> 00:43:28,700
behaviors sir dating a jquery library

00:43:19,200 --> 00:43:31,530
yep it's sort of tricky to write generic

00:43:28,700 --> 00:43:34,290
behavior

00:43:31,530 --> 00:43:36,240
yeah the thing is you don't you yeah

00:43:34,290 --> 00:43:37,800
yeah I think there are fundamental

00:43:36,240 --> 00:43:39,840
problem is that you don't actually have

00:43:37,800 --> 00:43:41,580
that much logic in your code you rather

00:43:39,840 --> 00:43:43,050
just integrate existing libraries

00:43:41,580 --> 00:43:44,910
together which is why I think we should

00:43:43,050 --> 00:43:48,300
have integration tests by the immunities

00:43:44,910 --> 00:43:49,920
I don't know like the ideal way to write

00:43:48,300 --> 00:43:52,380
those integration tests there's like a

00:43:49,920 --> 00:43:55,020
way where you can actually like create

00:43:52,380 --> 00:43:57,150
some fake HTML and then one your

00:43:55,020 --> 00:44:00,390
JavaScript on that or we could actually

00:43:57,150 --> 00:44:02,670
have real HTML when we had real HTML and

00:44:00,390 --> 00:44:04,890
CSS on there we could maybe even have

00:44:02,670 --> 00:44:08,400
visual regression because we already

00:44:04,890 --> 00:44:14,160
have those pictures yeah just stuff to

00:44:08,400 --> 00:44:15,810
explore their of course yeah can you go

00:44:14,160 --> 00:44:17,930
to the microphone because it's we call

00:44:15,810 --> 00:44:17,930
it

00:44:29,440 --> 00:44:37,310
so when you use an actual browser then

00:44:34,610 --> 00:44:39,020
it's pretty easy because you just open

00:44:37,310 --> 00:44:44,570
up the developer toolbar and click on

00:44:39,020 --> 00:44:47,090
pause and yeah when you use phantom

00:44:44,570 --> 00:44:51,190
guess you can there's this additional

00:44:47,090 --> 00:44:54,860
parameter I don't know it's something

00:44:51,190 --> 00:44:59,180
dashpot so it opens up a debugging port

00:44:54,860 --> 00:45:01,880
and then you can go to like your browser

00:44:59,180 --> 00:45:04,490
and then like the with that pot on your

00:45:01,880 --> 00:45:06,010
localhost and then you can go in and you

00:45:04,490 --> 00:45:09,260
basically have the developer toolbar

00:45:06,010 --> 00:45:11,150
available and then it loads up like the

00:45:09,260 --> 00:45:13,610
neutral llaves script of phantom chairs

00:45:11,150 --> 00:45:16,130
and then you can put a breakpoint there

00:45:13,610 --> 00:45:17,810
and then from there it just loads all

00:45:16,130 --> 00:45:20,420
the files you have and then you can

00:45:17,810 --> 00:45:24,110
continue continuously debug through your

00:45:20,420 --> 00:45:26,240
JavaScript yeah yeah there's good

00:45:24,110 --> 00:45:29,410
documentation about that on the front of

00:45:26,240 --> 00:45:29,410
GS page

00:45:34,030 --> 00:45:39,040
to mocha or caramel allow you to test

00:45:36,820 --> 00:45:41,560
other dependencies so for example if I'm

00:45:39,040 --> 00:45:43,810
doing something with jquery and I had a

00:45:41,560 --> 00:45:49,330
components reactor view or something

00:45:43,810 --> 00:45:51,670
like that let me guess oh yeah totally

00:45:49,330 --> 00:45:54,040
em you can load any kind of light way

00:45:51,670 --> 00:45:55,480
you want so it's not only for unit

00:45:54,040 --> 00:45:59,680
testing it's also for integration system

00:45:55,480 --> 00:46:04,270
yeah oh all over that is what you're

00:45:59,680 --> 00:46:06,910
saying I am pretty sure you can

00:46:04,270 --> 00:46:08,790
configure karma to do that as well but

00:46:06,910 --> 00:46:11,050
i'm not sure where I get the point of it

00:46:08,790 --> 00:46:30,520
because those open source projects

00:46:11,050 --> 00:46:32,320
already test their stuff I was ok hours

00:46:30,520 --> 00:46:34,360
it's an interesting well but I would

00:46:32,320 --> 00:46:38,200
assume that they are tests one all the

00:46:34,360 --> 00:46:40,900
time I don't think they do in the day at

00:46:38,200 --> 00:46:43,060
like regressions in like some minor

00:46:40,900 --> 00:46:46,540
versions but the way they bothered just

00:46:43,060 --> 00:46:48,220
don't catch it so I think like you

00:46:46,540 --> 00:46:52,230
should just have enough tests for your

00:46:48,220 --> 00:46:55,270
actual site or that we or something to

00:46:52,230 --> 00:46:58,330
ensure that like when check where I

00:46:55,270 --> 00:47:00,450
spoken you also see it oh yeah you work

00:46:58,330 --> 00:47:00,450
on

00:47:04,580 --> 00:47:14,370
so traumatic propose something about

00:47:09,240 --> 00:47:16,680
HTML fixtures yeah we sing about that

00:47:14,370 --> 00:47:18,810
during the talk in 33 years risk of that

00:47:16,680 --> 00:47:20,370
since that those are going to be out of

00:47:18,810 --> 00:47:22,620
date we're out of sync to the triples

00:47:20,370 --> 00:47:25,260
actually producing is there some way we

00:47:22,620 --> 00:47:29,700
should basically bootstrap truthful to

00:47:25,260 --> 00:47:32,970
generate a pastor's oh yeah yeah we

00:47:29,700 --> 00:47:36,720
could do that or we actually say it's

00:47:32,970 --> 00:47:39,360
okay to not keep them up to date because

00:47:36,720 --> 00:47:41,490
we have the stable theme and if you

00:47:39,360 --> 00:47:43,860
generate our HTML the stable theme we

00:47:41,490 --> 00:47:47,430
are supposed to not change the HTML stay

00:47:43,860 --> 00:47:50,610
with him so given that we would ensure

00:47:47,430 --> 00:47:52,740
that our stable code always works that

00:47:50,610 --> 00:47:56,430
code is working out so maybe we need to

00:47:52,740 --> 00:47:59,280
have like both both pictures actually we

00:47:56,430 --> 00:48:01,380
should do that because like we shouldn't

00:47:59,280 --> 00:48:03,510
rely on the HTML output but rather have

00:48:01,380 --> 00:48:06,840
flat data attributes to select stuff

00:48:03,510 --> 00:48:08,610
rather than CSS classes we are going

00:48:06,840 --> 00:48:11,210
there I'm not sure whether it be are

00:48:08,610 --> 00:48:11,210
completely there

00:48:14,730 --> 00:48:25,369
alright tomorrow annual else oh yes

00:48:21,900 --> 00:48:25,369

YouTube URL: https://www.youtube.com/watch?v=Uf0cc3Nnm_k


