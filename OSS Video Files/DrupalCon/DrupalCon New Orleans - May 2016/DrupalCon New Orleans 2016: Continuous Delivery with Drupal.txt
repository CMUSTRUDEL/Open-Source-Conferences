Title: DrupalCon New Orleans 2016: Continuous Delivery with Drupal
Publication date: 2016-05-10
Playlist: DrupalCon New Orleans - May 2016
Description: 
	Continuous Delivery (CD) you've heard about it used on big fancy sites, but how can you implement it yourself? The critical thing in continuous delivery is that the main branch is in a deployable state at all times enabling regular releases. At DrupalCon Barcelona Dries talked about how projects, including Drupal core, might be able to achieve this noble goal. Implementing CD in Drupal 7 can be tricky but it can also be insanely powerful.

In this session we will explore some of the benefits and advantages you get from implementing CD, along with sample workflows and tools, such as Git, Jenkins, and the Drupal 7 Features and Strongarm modules and Drupal 8 Configuration Management. As well as various testing and code quality tools, such as Behat, PHP CodeSniffer, etc.

After working for the past several years on this problem I came to the conclusion that none of the existing tools were giving my team quite what we needed and so we worked to develop and open source the solution that we wanted for Continuous Delivery for Drupal (and similar web apps). In this session I'll also speak a bit about Probo.CI and how you can use either the hosted or open source version to get up and running eadily and to really up your CD game.
Captions: 
	00:00:00,000 --> 00:00:06,089
alright well we better get started cuz

00:00:01,560 --> 00:00:10,650
we got way too many slides so buckle

00:00:06,089 --> 00:00:15,269
your seatbelts this is continuous

00:00:10,650 --> 00:00:17,940
delivery my name is Jodie I am actually

00:00:15,269 --> 00:00:23,010
filling in for Howard so if you came

00:00:17,940 --> 00:00:27,300
here out of your love for Howard talk to

00:00:23,010 --> 00:00:31,050
you later um he uh his he has newborns

00:00:27,300 --> 00:00:34,050
the twins and they're sick this is mr.

00:00:31,050 --> 00:00:37,190
Greg yep Greg conedison with car calm

00:00:34,050 --> 00:00:42,000
and we've been working with some

00:00:37,190 --> 00:00:43,320
delivery continuously so I would share

00:00:42,000 --> 00:00:47,340
some of the things that worked well for

00:00:43,320 --> 00:00:50,610
us so I'm the CTO and co-founder of zip

00:00:47,340 --> 00:00:53,879
tech which is in Philadelphia where I

00:00:50,610 --> 00:00:56,879
work with I've worked with Howard for

00:00:53,879 --> 00:01:02,129
about seven years but running zip tech

00:00:56,879 --> 00:01:04,589
for eight years car calm about four

00:01:02,129 --> 00:01:06,390
years ago got founded and we're a mobile

00:01:04,589 --> 00:01:08,280
alternative to traditional branch banks

00:01:06,390 --> 00:01:11,310
we do lots of fun stuff and we are

00:01:08,280 --> 00:01:17,790
hiring car.com / careers is that your

00:01:11,310 --> 00:01:21,420
real credit card number it is not okay

00:01:17,790 --> 00:01:23,100
so just to least sort of like buzzwords

00:01:21,420 --> 00:01:26,490
continuous integration continuous

00:01:23,100 --> 00:01:28,619
delivery continuous deployment they kind

00:01:26,490 --> 00:01:31,560
of trip me up a little bit so here's

00:01:28,619 --> 00:01:35,340
here's what howard told me continuous

00:01:31,560 --> 00:01:39,000
integration basically just means that

00:01:35,340 --> 00:01:40,829
you're not you don't have separate

00:01:39,000 --> 00:01:43,950
developers working in separate branches

00:01:40,829 --> 00:01:46,259
for months at a time and then try right

00:01:43,950 --> 00:01:48,090
before deployment to bring all the work

00:01:46,259 --> 00:01:50,670
back together instead you're

00:01:48,090 --> 00:01:53,909
continuously integrating everyone's work

00:01:50,670 --> 00:01:55,890
this isn't a real problem in drupal it's

00:01:53,909 --> 00:01:58,380
a was bigger problem like in the Java

00:01:55,890 --> 00:02:00,420
world I think where it has all come

00:01:58,380 --> 00:02:03,299
together in this big build in Drupal

00:02:00,420 --> 00:02:06,240
most people kind of do continuous

00:02:03,299 --> 00:02:08,340
integration if you're just all working

00:02:06,240 --> 00:02:09,569
and get in master you're basically doing

00:02:08,340 --> 00:02:11,819
continuous integration you might not

00:02:09,569 --> 00:02:17,099
have tests but you're probably already

00:02:11,819 --> 00:02:21,720
there continuous delivery is when you

00:02:17,099 --> 00:02:24,510
are always ready to do a release it

00:02:21,720 --> 00:02:26,489
doesn't mean that that you're doing a

00:02:24,510 --> 00:02:28,080
release ten times a day or a hundred

00:02:26,489 --> 00:02:30,900
times a day or a million like Etsy or

00:02:28,080 --> 00:02:33,269
whatever they say it you might still do

00:02:30,900 --> 00:02:35,430
your releases every two weeks or once a

00:02:33,269 --> 00:02:36,660
month but at any point in time if

00:02:35,430 --> 00:02:38,340
someone needs you to do a release you

00:02:36,660 --> 00:02:41,400
can say yes I have a branch that's

00:02:38,340 --> 00:02:43,530
release ready okay so instead of you

00:02:41,400 --> 00:02:44,760
having to say oh I have like some things

00:02:43,530 --> 00:02:46,739
that are ready i could probably like

00:02:44,760 --> 00:02:50,040
cherry pick them out and then we could

00:02:46,739 --> 00:02:51,629
release it's always being ready having

00:02:50,040 --> 00:02:53,910
already tested everything that's in a

00:02:51,629 --> 00:02:56,640
branch that's ready to be released

00:02:53,910 --> 00:02:58,050
whereas continuous deployment isn't

00:02:56,640 --> 00:03:00,599
really that once you have continuous

00:02:58,050 --> 00:03:02,220
delivery it's not that hard to go into

00:03:00,599 --> 00:03:05,700
continuous deployment because you're

00:03:02,220 --> 00:03:09,030
already ready to deploy at any time it's

00:03:05,700 --> 00:03:11,280
more of like whether your organization

00:03:09,030 --> 00:03:13,500
likes to deploy all the time or if they

00:03:11,280 --> 00:03:15,330
would rather wait and do it at once it

00:03:13,500 --> 00:03:21,690
depends on how fast you really need to

00:03:15,330 --> 00:03:24,290
innovate and get changes up so to remind

00:03:21,690 --> 00:03:28,409
everyone of where we've all come from

00:03:24,290 --> 00:03:29,610
you know we all if you're if you're you

00:03:28,409 --> 00:03:31,590
know my age you

00:03:29,610 --> 00:03:36,000
you at some point we're working in

00:03:31,590 --> 00:03:37,560
Dreamweaver and ft peeing things up to

00:03:36,000 --> 00:03:40,170
the live server there was no other

00:03:37,560 --> 00:03:42,020
server right there was just your

00:03:40,170 --> 00:03:45,900
computer and the live server and that

00:03:42,020 --> 00:03:49,080
was I think where most of us were in the

00:03:45,900 --> 00:03:51,210
Drupal world eight years ago and of

00:03:49,080 --> 00:03:59,190
course where our WordPress brethren

00:03:51,210 --> 00:04:00,230
still lie sorry I don't really plan i'm

00:03:59,190 --> 00:04:06,630
gonna say in the night say rude things

00:04:00,230 --> 00:04:08,970
till you nervous okay so then we we got

00:04:06,630 --> 00:04:12,600
a little bit more advanced as a

00:04:08,970 --> 00:04:14,880
community and as software in general and

00:04:12,600 --> 00:04:16,410
as with especially you know first we

00:04:14,880 --> 00:04:18,930
started most people were working in

00:04:16,410 --> 00:04:22,260
subversion than most of us move to get

00:04:18,930 --> 00:04:23,640
and then we would we kind of moved our

00:04:22,260 --> 00:04:25,500
subversion lot of us could have moved

00:04:23,640 --> 00:04:27,810
our subversion work flows into the git

00:04:25,500 --> 00:04:32,280
workflow and so we would just kind of

00:04:27,810 --> 00:04:34,710
commit and push to master and then we

00:04:32,280 --> 00:04:37,050
would pull master on dev and we might

00:04:34,710 --> 00:04:39,419
have like five or ten developers or more

00:04:37,050 --> 00:04:43,850
all pushing to master and then reviewing

00:04:39,419 --> 00:04:47,220
everything on dev and that's sort of the

00:04:43,850 --> 00:04:50,430
probably the standard workflow I think

00:04:47,220 --> 00:04:51,570
for most Drupal developers now and of

00:04:50,430 --> 00:04:55,400
course then there's this whole thing

00:04:51,570 --> 00:04:58,229
that acquia and Pantheon helped us to

00:04:55,400 --> 00:05:00,240
make more mainstream of which way the

00:04:58,229 --> 00:05:06,030
code goes in which way the database goes

00:05:00,240 --> 00:05:10,919
and and so that's all pretty well

00:05:06,030 --> 00:05:14,790
understood but for me at zip tech I am

00:05:10,919 --> 00:05:18,180
obsessed with code review and testing

00:05:14,790 --> 00:05:22,800
and quality so I had a big problem with

00:05:18,180 --> 00:05:24,180
the way that that workflow of just

00:05:22,800 --> 00:05:26,729
sending everything into master and

00:05:24,180 --> 00:05:30,750
straight up to dev it didn't enforce any

00:05:26,729 --> 00:05:34,350
review period before things went into

00:05:30,750 --> 00:05:37,229
into the main branch which leaves me in

00:05:34,350 --> 00:05:40,979
a state where I'm having to come in

00:05:37,229 --> 00:05:43,050
later and review things and and now i'm

00:05:40,979 --> 00:05:43,540
reverting commits or I'm cherry-picking

00:05:43,050 --> 00:05:46,420
thing

00:05:43,540 --> 00:05:47,950
out of places or they want us to hurry

00:05:46,420 --> 00:05:50,110
up and do a deployment we haven't

00:05:47,950 --> 00:05:54,040
reviewed everything that's in master yet

00:05:50,110 --> 00:05:57,160
right so i don't really like that that

00:05:54,040 --> 00:05:58,300
part of that workflow so a lot of us

00:05:57,160 --> 00:06:04,030
have been moving to this pull request

00:05:58,300 --> 00:06:05,860
workflow and and that helps with that

00:06:04,030 --> 00:06:07,600
code review problem because in the pull

00:06:05,860 --> 00:06:09,580
request which really is created by

00:06:07,600 --> 00:06:11,770
github that concept of pull requests

00:06:09,580 --> 00:06:13,690
you're working in a feature branch each

00:06:11,770 --> 00:06:16,600
for each ticket that you're working on

00:06:13,690 --> 00:06:18,850
as a separate feature branch and then

00:06:16,600 --> 00:06:21,760
you create a pull request in github or

00:06:18,850 --> 00:06:23,410
something similar and then that you can

00:06:21,760 --> 00:06:25,030
assign that pull request your lead

00:06:23,410 --> 00:06:28,510
developer whoever on your team is

00:06:25,030 --> 00:06:31,030
getting to do code review this way the

00:06:28,510 --> 00:06:34,960
code of you happens before the merge and

00:06:31,030 --> 00:06:36,910
now nothing unreviewed is in master

00:06:34,960 --> 00:06:39,640
whatever your deployment branches right

00:06:36,910 --> 00:06:43,390
so I like that a lot better but the

00:06:39,640 --> 00:06:45,610
problem was not that I was stoned i just

00:06:43,390 --> 00:06:49,030
always look like that the problem was

00:06:45,610 --> 00:06:50,800
that this is what my work my workflow

00:06:49,030 --> 00:06:53,020
ended up just being coming more

00:06:50,800 --> 00:06:57,160
complicated than before because i would

00:06:53,020 --> 00:07:01,750
assign the tickets and my stereotypical

00:06:57,160 --> 00:07:04,300
hipster developer would now i realize

00:07:01,750 --> 00:07:07,240
are recording this so that so he starts

00:07:04,300 --> 00:07:09,220
doing his work that's my project manager

00:07:07,240 --> 00:07:10,810
he's trying to see what's going on he

00:07:09,220 --> 00:07:13,510
really has nowhere to see what's going

00:07:10,810 --> 00:07:15,700
on he says it's done but you know

00:07:13,510 --> 00:07:18,520
everyone has a different definition so

00:07:15,700 --> 00:07:20,290
he wants to do a review well he can't

00:07:18,520 --> 00:07:22,030
really so I have to do the review

00:07:20,290 --> 00:07:23,560
because I have to go to my virtual

00:07:22,030 --> 00:07:25,480
machine and check out the right branch

00:07:23,560 --> 00:07:27,280
and revert the features and run the

00:07:25,480 --> 00:07:29,380
database updates and whoop something's

00:07:27,280 --> 00:07:33,280
wrong and I have to get a new database

00:07:29,380 --> 00:07:35,500
and you know 25 minutes later I did the

00:07:33,280 --> 00:07:38,560
checked it and reviewed it so I'm

00:07:35,500 --> 00:07:43,630
basically doing my own QA because you

00:07:38,560 --> 00:07:46,240
have to be a get master to even do it so

00:07:43,630 --> 00:07:47,560
I'm doing all this stuff well and of

00:07:46,240 --> 00:07:53,260
course you know it's never right the

00:07:47,560 --> 00:07:55,620
first time so he's scared and he's I

00:07:53,260 --> 00:07:59,520
don't know constipated he

00:07:55,620 --> 00:08:01,820
he uh so then it comes back to me again

00:07:59,520 --> 00:08:03,960
next day guess what another half an hour

00:08:01,820 --> 00:08:06,419
you know hopefully it works this time

00:08:03,960 --> 00:08:08,820
but of course I'm bottlenecking the

00:08:06,419 --> 00:08:10,770
whole process because I have so many

00:08:08,820 --> 00:08:12,690
things that I need to do and here I'm

00:08:10,770 --> 00:08:16,199
doing my own QA it's taking me a half an

00:08:12,690 --> 00:08:18,330
hour so finally I merge it oh great the

00:08:16,199 --> 00:08:20,729
client hasn't even seen it yet right so

00:08:18,330 --> 00:08:22,710
it's merged great but of course it

00:08:20,729 --> 00:08:24,900
wasn't what he wanted right we were just

00:08:22,710 --> 00:08:29,060
basing off of his weird like email that

00:08:24,900 --> 00:08:31,440
we didn't understand and so now he says

00:08:29,060 --> 00:08:32,940
okay I know you're right it's already

00:08:31,440 --> 00:08:36,150
merged he doesn't know sorry mertz but

00:08:32,940 --> 00:08:38,339
it's already merged and he says well we

00:08:36,150 --> 00:08:40,710
need to like do a deployment but only

00:08:38,339 --> 00:08:42,539
deploy some of the things not the others

00:08:40,710 --> 00:08:46,589
because this one needs changes right now

00:08:42,539 --> 00:08:49,020
I'm cherry-picking 200 commits that's my

00:08:46,589 --> 00:08:50,610
whole morning of course Jason can't do

00:08:49,020 --> 00:08:53,460
it because he's a junior developer he's

00:08:50,610 --> 00:08:54,660
goodness grew up somewhere cherry

00:08:53,460 --> 00:08:59,310
picking these commits so it's going to

00:08:54,660 --> 00:09:02,100
be my whole day so that's where we

00:08:59,310 --> 00:09:04,560
realized that we needed to change up our

00:09:02,100 --> 00:09:06,810
workflow so that it was so that we would

00:09:04,560 --> 00:09:08,910
have continuous delivery so that what

00:09:06,810 --> 00:09:12,029
was merged was always ready to be

00:09:08,910 --> 00:09:16,730
deployed by moving where the review

00:09:12,029 --> 00:09:20,310
happened earlier in the process so the

00:09:16,730 --> 00:09:22,740
so what we found is that what we really

00:09:20,310 --> 00:09:26,640
needed was QA sandboxes so we needed an

00:09:22,740 --> 00:09:29,670
easy environment where people could do

00:09:26,640 --> 00:09:32,160
QA without having to be like a great

00:09:29,670 --> 00:09:34,920
developer setting up their own stuff all

00:09:32,160 --> 00:09:38,370
day because without the QA sandboxes we

00:09:34,920 --> 00:09:42,029
had master that had a mix of things in

00:09:38,370 --> 00:09:43,770
different states it was hard to test the

00:09:42,029 --> 00:09:47,760
feature branches which meant I had to do

00:09:43,770 --> 00:09:49,290
it the only the developers could see

00:09:47,760 --> 00:09:50,550
anything on the feature branch because

00:09:49,290 --> 00:09:52,680
there weren't environments for them

00:09:50,550 --> 00:09:54,839
Chris pantheon has like multiple

00:09:52,680 --> 00:09:57,330
environments and some other things a lot

00:09:54,839 --> 00:09:59,550
of things are moving this direction and

00:09:57,330 --> 00:10:03,390
then the test contents getting wiped a

00:09:59,550 --> 00:10:05,750
lot so when we added QA sandboxes that

00:10:03,390 --> 00:10:07,890
Liz have continuous delivery because now

00:10:05,750 --> 00:10:09,480
master or whatever branch is always

00:10:07,890 --> 00:10:11,360
approved by the client and already

00:10:09,480 --> 00:10:16,019
gone through user acceptance testing

00:10:11,360 --> 00:10:18,660
everybody can easily see each each

00:10:16,019 --> 00:10:21,930
feature being worked on the review is so

00:10:18,660 --> 00:10:24,029
easy that I don't even mess around my vm

00:10:21,930 --> 00:10:27,029
anymore like I don't even have time for

00:10:24,029 --> 00:10:28,980
that I just like review things in just

00:10:27,029 --> 00:10:31,769
like a minute instead of a half an hour

00:10:28,980 --> 00:10:33,120
and the test content is always now I

00:10:31,769 --> 00:10:36,180
could have a QA person put the test

00:10:33,120 --> 00:10:39,839
content in before I review it so I'm not

00:10:36,180 --> 00:10:43,019
doing that myself and best of all we're

00:10:39,839 --> 00:10:45,959
testing the deployment steps every time

00:10:43,019 --> 00:10:47,730
we make a new feature branch so we don't

00:10:45,959 --> 00:10:50,970
to worry about deployment it's already

00:10:47,730 --> 00:10:55,579
been tested over and over so this is the

00:10:50,970 --> 00:11:01,680
the new emotional state still stoned

00:10:55,579 --> 00:11:03,810
he's the same um he's checking in oh but

00:11:01,680 --> 00:11:06,660
see here's the difference he's checks it

00:11:03,810 --> 00:11:08,910
himself this time right not me I'm not

00:11:06,660 --> 00:11:11,040
even here other than the beginning he's

00:11:08,910 --> 00:11:12,510
happy well that's lucky that's like one

00:11:11,040 --> 00:11:17,880
of those before and after where they

00:11:12,510 --> 00:11:19,920
also put on makeup then he the client

00:11:17,880 --> 00:11:21,660
now gets in the mix I'm not even there

00:11:19,920 --> 00:11:23,360
the clients now in the mix I don't know

00:11:21,660 --> 00:11:27,990
why is a leg a--sort of like

00:11:23,360 --> 00:11:29,970
dehumanizing and then now all I have to

00:11:27,990 --> 00:11:32,279
do is the code review which is much

00:11:29,970 --> 00:11:35,339
quicker than the testing merge and

00:11:32,279 --> 00:11:41,069
deploy it and everyone is really happy

00:11:35,339 --> 00:11:44,040
okay but now Greg's going to make it

00:11:41,069 --> 00:11:45,389
real um I was just gonna say i mean i

00:11:44,040 --> 00:11:47,130
think you know like that's that's sort

00:11:45,389 --> 00:11:48,510
of the ideal workflow right the makeup

00:11:47,130 --> 00:11:52,670
is on in the after photo and it's the

00:11:48,510 --> 00:11:54,750
ideal workflow and i feel like you know

00:11:52,670 --> 00:11:55,949
myself about three years ago I was

00:11:54,750 --> 00:11:58,350
looking at this mess like yes that's

00:11:55,949 --> 00:12:01,170
what I want I want to automate all the

00:11:58,350 --> 00:12:03,149
things but you know this is sort of like

00:12:01,170 --> 00:12:04,620
the QA nirvana but but like I think a

00:12:03,149 --> 00:12:08,060
big thing is to just remember like you

00:12:04,620 --> 00:12:14,040
don't have to start there and

00:12:08,060 --> 00:12:17,340
ma'am so there's no need to start there

00:12:14,040 --> 00:12:19,920
and and like really I think that you

00:12:17,340 --> 00:12:21,630
know so the key things to do at the

00:12:19,920 --> 00:12:23,340
beginning are all really simple it's

00:12:21,630 --> 00:12:26,180
just about adding this into your

00:12:23,340 --> 00:12:30,540
workflow and I have to be honest that

00:12:26,180 --> 00:12:32,970
maybe some people that I work with may

00:12:30,540 --> 00:12:35,010
be myself pushed a syntax error on to

00:12:32,970 --> 00:12:36,330
our live website you know you don't

00:12:35,010 --> 00:12:39,600
always test all the pages of your site

00:12:36,330 --> 00:12:41,970
so PHP L is a really easy automated test

00:12:39,600 --> 00:12:44,700
that like everybody can get running in

00:12:41,970 --> 00:12:47,520
about 30 seconds and so add that into

00:12:44,700 --> 00:12:49,560
your your flow of rebuilding your site

00:12:47,520 --> 00:12:52,320
automatically and just doing something

00:12:49,560 --> 00:12:54,330
stupid simple like PHP l that does add

00:12:52,320 --> 00:12:56,910
value and will help you with this idea

00:12:54,330 --> 00:12:58,950
of adding some level of automation and I

00:12:56,910 --> 00:13:01,170
just add more and more incrementally do

00:12:58,950 --> 00:13:05,760
it slowly and you will eventually reach

00:13:01,170 --> 00:13:09,990
ultimately the QA inner moment ok an in

00:13:05,760 --> 00:13:13,920
QA nirvana you must have repeatable

00:13:09,990 --> 00:13:15,540
deployments right so no weird little

00:13:13,920 --> 00:13:18,660
list of things you have to change after

00:13:15,540 --> 00:13:20,810
the deployments which means of course

00:13:18,660 --> 00:13:27,480
our friend features module for Drupal 7

00:13:20,810 --> 00:13:30,870
soon to not haunt our dreams and its

00:13:27,480 --> 00:13:34,860
greatest friend the amazing strong arm

00:13:30,870 --> 00:13:37,500
module and of course hook up day 10

00:13:34,860 --> 00:13:39,720
who's been with us even before features

00:13:37,500 --> 00:13:43,050
module you know for getting out our

00:13:39,720 --> 00:13:45,960
configuration changes in a repeatable

00:13:43,050 --> 00:13:48,300
way and then of course Drupal 8

00:13:45,960 --> 00:13:50,970
configuration management system is going

00:13:48,300 --> 00:13:54,690
to be much better I've gotten to use

00:13:50,970 --> 00:13:57,560
that a little bit it definitely is a lot

00:13:54,690 --> 00:14:01,830
less painful for having repeatable

00:13:57,560 --> 00:14:05,120
deployments for Drupal there's other

00:14:01,830 --> 00:14:07,920
things you can use in your deployment

00:14:05,120 --> 00:14:13,380
stack like you can run automated coder

00:14:07,920 --> 00:14:17,370
or PHP CS to sort of do some of the code

00:14:13,380 --> 00:14:21,380
review in an automated way and then of

00:14:17,370 --> 00:14:21,380
course there is automated testing

00:14:21,500 --> 00:14:27,029
and I think I mean this is you know how

00:14:25,200 --> 00:14:28,410
I guess how many people are not doing

00:14:27,029 --> 00:14:30,779
automated testing as part of their

00:14:28,410 --> 00:14:32,670
everyday work flow right now right I

00:14:30,779 --> 00:14:33,870
think it's I think it's a lot of folks

00:14:32,670 --> 00:14:36,570
and that's why I really recommend the

00:14:33,870 --> 00:14:38,699
idea of starting as small as you can so

00:14:36,570 --> 00:14:41,670
David pintado also did not do it before

00:14:38,699 --> 00:14:43,560
joining our team and now you know this

00:14:41,670 --> 00:14:45,089
is a common of his from a retrospective

00:14:43,560 --> 00:14:46,589
nine months into the process where he's

00:14:45,089 --> 00:14:49,139
like I don't know how I lived before

00:14:46,589 --> 00:14:50,639
hundred negative testing I feel like you

00:14:49,139 --> 00:14:52,230
know what we whenever we used to do

00:14:50,639 --> 00:14:54,000
deployments without having you know

00:14:52,230 --> 00:14:55,920
solid automated testing it was always

00:14:54,000 --> 00:14:57,779
this really stressful event and that's a

00:14:55,920 --> 00:15:01,290
big part of getting to continuous

00:14:57,779 --> 00:15:03,089
delivery or continual deployment is that

00:15:01,290 --> 00:15:05,430
you have to be confident that you can

00:15:03,089 --> 00:15:08,279
push that deploy button and that things

00:15:05,430 --> 00:15:10,110
are going to be okay and so having solid

00:15:08,279 --> 00:15:12,000
code coverage in your automated tests is

00:15:10,110 --> 00:15:14,760
I think one of the key things to get

00:15:12,000 --> 00:15:16,260
there and and you know that's one of

00:15:14,760 --> 00:15:18,300
those points another element of this is

00:15:16,260 --> 00:15:19,529
that you know now he's moved on from

00:15:18,300 --> 00:15:20,760
that perspective of just like I don't

00:15:19,529 --> 00:15:24,089
know how I live without automated tests

00:15:20,760 --> 00:15:26,250
to focus test driven development or TDD

00:15:24,089 --> 00:15:28,890
bvv where you're writing your test is

00:15:26,250 --> 00:15:30,089
first that match the you know match the

00:15:28,890 --> 00:15:32,220
ticket that you're working on that's the

00:15:30,089 --> 00:15:33,660
feature that you're working on and it

00:15:32,220 --> 00:15:34,920
helps you avoid those situations where

00:15:33,660 --> 00:15:36,149
you're like oh this would be cool to

00:15:34,920 --> 00:15:37,709
work on in addition to this ticket I'm

00:15:36,149 --> 00:15:39,089
working oh also this other thing would

00:15:37,709 --> 00:15:40,529
be fun to work on and then five days

00:15:39,089 --> 00:15:43,500
later you come back and you're like wait

00:15:40,529 --> 00:15:46,440
i'm supposed to pick one small bug so

00:15:43,500 --> 00:15:48,329
the TDD really helps with focusing in on

00:15:46,440 --> 00:15:50,279
what it is that you are trying to build

00:15:48,329 --> 00:15:52,230
and making sure that you're delivering

00:15:50,279 --> 00:15:54,570
the value that you know the whole team

00:15:52,230 --> 00:15:57,600
has agreed is the highest priority and a

00:15:54,570 --> 00:15:59,550
lot of Drupal people are using be hat

00:15:57,600 --> 00:16:02,130
for testing and if you want to get start

00:15:59,550 --> 00:16:06,390
with that I think the best places to go

00:16:02,130 --> 00:16:08,040
the B hat Drupal extension they have

00:16:06,390 --> 00:16:10,230
like a docs page and they tell you how

00:16:08,040 --> 00:16:12,089
to set it up and everything but I've had

00:16:10,230 --> 00:16:15,899
a lot of success just having junior

00:16:12,089 --> 00:16:19,920
developers or even QA people writing the

00:16:15,899 --> 00:16:22,529
tests alongside the developers because

00:16:19,920 --> 00:16:23,579
these these b-hat tests you don't ninety

00:16:22,529 --> 00:16:26,160
percent of the time you don't have to

00:16:23,579 --> 00:16:29,060
write any code and then when you do you

00:16:26,160 --> 00:16:29,060
can ask for help

00:16:30,090 --> 00:16:37,180
so one other important step in this

00:16:33,340 --> 00:16:38,800
process is you know we've got this idea

00:16:37,180 --> 00:16:41,260
that our databases are moving from one

00:16:38,800 --> 00:16:43,720
environment to the next and along the

00:16:41,260 --> 00:16:45,790
way I think it's really important to to

00:16:43,720 --> 00:16:48,310
not just do that but also to sanitize

00:16:45,790 --> 00:16:49,780
the database along the way so what I

00:16:48,310 --> 00:16:51,970
mean by that is you know you've got a

00:16:49,780 --> 00:16:54,340
lot of passwords maybe some private

00:16:51,970 --> 00:16:57,250
content inside of the database you know

00:16:54,340 --> 00:16:59,710
emails of customers maybe maybe millions

00:16:57,250 --> 00:17:01,630
of emails of customers that you don't

00:16:59,710 --> 00:17:04,209
want to get leaked and so as the

00:17:01,630 --> 00:17:06,190
database moves on to for example a room

00:17:04,209 --> 00:17:08,589
full of laptops that might get left in a

00:17:06,190 --> 00:17:10,240
TSA then you know you don't want that

00:17:08,589 --> 00:17:12,699
customer information to get stolen so

00:17:10,240 --> 00:17:15,790
there's some really nice tools that have

00:17:12,699 --> 00:17:19,060
been developed for for doing sanitizing

00:17:15,790 --> 00:17:20,829
of Drupal databases so like the cool way

00:17:19,060 --> 00:17:23,920
to do it three years ago was to just run

00:17:20,829 --> 00:17:25,329
a script that had some delete statements

00:17:23,920 --> 00:17:28,089
and some update statements in it and

00:17:25,329 --> 00:17:31,810
then that sort of that concept got added

00:17:28,089 --> 00:17:34,450
into drush with josh sequel sanitize but

00:17:31,810 --> 00:17:37,450
it was still actively a list that you

00:17:34,450 --> 00:17:39,280
had to maintain all the time to say you

00:17:37,450 --> 00:17:40,510
know the oh I added a new table I've got

00:17:39,280 --> 00:17:44,170
to remember to also add it to my

00:17:40,510 --> 00:17:48,100
sanitization script and then about four

00:17:44,170 --> 00:17:50,110
or five months ago in work with card

00:17:48,100 --> 00:17:52,900
calm we created a tool that will work on

00:17:50,110 --> 00:17:54,940
a whitelist basis so it'll say these are

00:17:52,900 --> 00:17:56,710
the tables that can keep content in them

00:17:54,940 --> 00:17:58,540
and then everything else should just get

00:17:56,710 --> 00:18:00,010
truncated so that way when you add a new

00:17:58,540 --> 00:18:02,050
table to your database for all the super

00:18:00,010 --> 00:18:03,970
secret info the default is that it's

00:18:02,050 --> 00:18:07,180
going to get deleted and your data will

00:18:03,970 --> 00:18:08,230
be safe it also helps you know Jody was

00:18:07,180 --> 00:18:10,930
talking about the half an hour process

00:18:08,230 --> 00:18:12,460
of rebuilding your QA environment if

00:18:10,930 --> 00:18:13,990
your database is much smaller because

00:18:12,460 --> 00:18:16,570
you've deleted all the tables then that

00:18:13,990 --> 00:18:18,880
half an hour process turns into maybe 20

00:18:16,570 --> 00:18:22,950
minute process so a little less time for

00:18:18,880 --> 00:18:27,190
reddit a little bit more time for QA

00:18:22,950 --> 00:18:29,259
okay so obviously automation is the

00:18:27,190 --> 00:18:30,429
cornerstone of getting all a lot of this

00:18:29,259 --> 00:18:33,039
stuff working because we're you know

00:18:30,429 --> 00:18:34,509
we're talking not only about moving

00:18:33,039 --> 00:18:37,210
through your dev workflow up to

00:18:34,509 --> 00:18:41,590
deployment but now back from production

00:18:37,210 --> 00:18:45,639
down into your dev workflow and you know

00:18:41,590 --> 00:18:50,919
that our favorite Butler Jenkins is a

00:18:45,639 --> 00:18:52,629
big part of most people's work flows as

00:18:50,919 --> 00:18:54,099
they build tools that handle these

00:18:52,629 --> 00:18:55,629
things so if you're not if you're not

00:18:54,099 --> 00:19:01,330
using Jenkins yeah it's very easy to

00:18:55,629 --> 00:19:05,799
install on a server and just like a job

00:19:01,330 --> 00:19:08,889
runner you can use it for backups or

00:19:05,799 --> 00:19:11,019
deployments or moving the database

00:19:08,889 --> 00:19:12,729
between environments and sanitizing it

00:19:11,019 --> 00:19:16,119
or or whatever you want it's better than

00:19:12,729 --> 00:19:18,849
just running things in cron jobs because

00:19:16,119 --> 00:19:22,929
you can see the output in one place

00:19:18,849 --> 00:19:26,049
that's nice to be able to see everything

00:19:22,929 --> 00:19:28,749
that ran and and what it outputs so

00:19:26,049 --> 00:19:34,479
that's really a cornerstone of a lot of

00:19:28,749 --> 00:19:37,119
this type of automation and then how

00:19:34,479 --> 00:19:42,359
many people have worked with Travis okay

00:19:37,119 --> 00:19:45,279
a lot or circle okay so Travis is in

00:19:42,359 --> 00:19:49,149
circle they are continuous integration

00:19:45,279 --> 00:19:51,279
tools that will run basically run your

00:19:49,149 --> 00:19:53,409
automated tests for you so you so you

00:19:51,279 --> 00:19:55,749
may have like a workflow where every

00:19:53,409 --> 00:20:00,849
time someone makes a pull requests it

00:19:55,749 --> 00:20:03,700
triggers Travis to run all of your tests

00:20:00,849 --> 00:20:07,749
against that latest pull requests let

00:20:03,700 --> 00:20:10,269
you know if that passed or fail so this

00:20:07,749 --> 00:20:15,700
is just an example of it's the Travis in

00:20:10,269 --> 00:20:18,389
our face just running its tests but what

00:20:15,700 --> 00:20:21,669
but what we really felt was that

00:20:18,389 --> 00:20:23,470
automated testing is never enough now it

00:20:21,669 --> 00:20:25,210
really depends on the types of projects

00:20:23,470 --> 00:20:27,479
or the individual project that you're

00:20:25,210 --> 00:20:31,779
working on because Greg is talking about

00:20:27,479 --> 00:20:35,789
credit cards right so obviously he is

00:20:31,779 --> 00:20:38,159
really concerned about automated testing

00:20:35,789 --> 00:20:42,269
and unit testing and making sure

00:20:38,159 --> 00:20:44,850
everything is uh you know not messing up

00:20:42,269 --> 00:20:50,070
people's financial data right but if

00:20:44,850 --> 00:20:53,220
you're making a website for I don't know

00:20:50,070 --> 00:20:56,639
just like we do a lot of you know

00:20:53,220 --> 00:20:58,559
brochure sites or just something where

00:20:56,639 --> 00:21:00,179
the data isn't really that private or

00:20:58,559 --> 00:21:02,909
critical and it's not you know it's not

00:21:00,179 --> 00:21:04,350
exactly like a moon landing here then

00:21:02,909 --> 00:21:06,749
what you're dealing with more is like

00:21:04,350 --> 00:21:08,669
people who are like oh that's a pixel

00:21:06,749 --> 00:21:10,799
off or I needed you to change that color

00:21:08,669 --> 00:21:13,769
we need to put some tabs in there and

00:21:10,799 --> 00:21:14,849
change the navigation right and so you

00:21:13,769 --> 00:21:17,159
don't really you can't really have

00:21:14,849 --> 00:21:18,899
automated testing for like whether or

00:21:17,159 --> 00:21:22,590
not the client likes your new navigation

00:21:18,899 --> 00:21:25,349
right so most of what I work with on

00:21:22,590 --> 00:21:27,599
client sites needs feedback it needs

00:21:25,349 --> 00:21:30,830
human feedback there's no automated test

00:21:27,599 --> 00:21:33,690
that's going to tell us whether or not

00:21:30,830 --> 00:21:36,739
the client is satisfied with the feature

00:21:33,690 --> 00:21:38,820
so so I never really thought that those

00:21:36,739 --> 00:21:40,710
that those people with the automated

00:21:38,820 --> 00:21:42,659
tests like we have to do everything

00:21:40,710 --> 00:21:44,249
automated and then we can deliver it at

00:21:42,659 --> 00:21:46,200
any time it's sort of like what about

00:21:44,249 --> 00:21:50,190
feedback you know we a lot of us got

00:21:46,200 --> 00:21:52,979
into programming maybe because we don't

00:21:50,190 --> 00:21:55,169
like talking to people but that the

00:21:52,979 --> 00:21:57,359
truth is that it really is all about

00:21:55,169 --> 00:21:59,340
talking to people and you can't engineer

00:21:57,359 --> 00:22:03,269
them out of the system you have to

00:21:59,340 --> 00:22:05,609
engineer the system for them so what we

00:22:03,269 --> 00:22:08,220
have been working on especially this is

00:22:05,609 --> 00:22:14,369
really Howard's baby not his real baby

00:22:08,220 --> 00:22:18,450
who's sick is a probe out at sea I so

00:22:14,369 --> 00:22:21,570
the idea with probe oh is that after you

00:22:18,450 --> 00:22:24,359
I hate confuse this is like the Family

00:22:21,570 --> 00:22:28,710
Circle following the dots so after you

00:22:24,359 --> 00:22:31,499
submit a pull request then it creates a

00:22:28,710 --> 00:22:34,499
build and can run the test if you have

00:22:31,499 --> 00:22:36,809
tests just like Travis would but instead

00:22:34,499 --> 00:22:40,379
of just like taking it down afterwards

00:22:36,809 --> 00:22:44,690
just leaves it up and gives you a URL

00:22:40,379 --> 00:22:44,690
where you can do human testing

00:22:44,730 --> 00:22:51,390
so it has github and bitbucket

00:22:47,610 --> 00:22:53,309
integration it's built with nodejs and

00:22:51,390 --> 00:22:56,520
it runs docker containers so every

00:22:53,309 --> 00:23:00,059
single new pull request you do or update

00:22:56,520 --> 00:23:03,270
to the pull request is a new fad docker

00:23:00,059 --> 00:23:04,919
container so that you have root access

00:23:03,270 --> 00:23:06,720
you can lick install anything you want

00:23:04,919 --> 00:23:12,630
in that environment as part of your

00:23:06,720 --> 00:23:17,660
build it's mostly open source its github

00:23:12,630 --> 00:23:20,820
com / probe oci so you can you know run

00:23:17,660 --> 00:23:23,010
it yourself on your own servers the

00:23:20,820 --> 00:23:28,040
parts that are software-as-a-service are

00:23:23,010 --> 00:23:30,390
the the web UI and sort of the

00:23:28,040 --> 00:23:32,010
coordinator for handling all of the

00:23:30,390 --> 00:23:36,120
different containers that it's setting

00:23:32,010 --> 00:23:39,000
up for all different people and we run

00:23:36,120 --> 00:23:43,190
it on packaged net servers which are

00:23:39,000 --> 00:23:45,390
excellent so it's a much faster than

00:23:43,190 --> 00:23:49,880
running on my local environment or my

00:23:45,390 --> 00:23:52,799
other servers this is the website

00:23:49,880 --> 00:23:54,000
there's it's like freemium oh we're

00:23:52,799 --> 00:23:59,549
going to do a demo that's what I'm

00:23:54,000 --> 00:24:02,970
forgetting okay so what is really great

00:23:59,549 --> 00:24:04,860
about provo which you will see well

00:24:02,970 --> 00:24:14,250
maybe give you a live demo if the Wi-Fi

00:24:04,860 --> 00:24:16,890
works is that it it's you you just don't

00:24:14,250 --> 00:24:20,580
do any work okay that's what I like okay

00:24:16,890 --> 00:24:22,559
you just make a pull request and then it

00:24:20,580 --> 00:24:24,600
it makes a build here let me start this

00:24:22,559 --> 00:24:29,340
over here at the beginning of this this

00:24:24,600 --> 00:24:31,530
is greg making his pull request yes i

00:24:29,340 --> 00:24:32,880
noticed that there was sort of a you

00:24:31,530 --> 00:24:35,309
know word that didn't make sense on our

00:24:32,880 --> 00:24:39,059
frequently asked questions page just

00:24:35,309 --> 00:24:41,429
went into the github view of that the

00:24:39,059 --> 00:24:44,429
TPL dot PHP file that was responsible

00:24:41,429 --> 00:24:45,990
for that content edited it you know made

00:24:44,429 --> 00:24:49,429
the change use the github you I to

00:24:45,990 --> 00:24:49,429
create a new poll request for it

00:24:49,570 --> 00:24:54,409
do i narrate faster than i right

00:24:51,799 --> 00:24:55,880
sometimes so now he's right on the port

00:24:54,409 --> 00:24:59,389
use a really good explanation for what

00:24:55,880 --> 00:25:03,440
I'm doing and you know follow all the

00:24:59,389 --> 00:25:05,809
rules for a good commit message naming

00:25:03,440 --> 00:25:07,940
and pull request naming this is what I

00:25:05,809 --> 00:25:10,309
do a lot that I call it my github only

00:25:07,940 --> 00:25:12,500
workflow if I just have to make a small

00:25:10,309 --> 00:25:15,200
change not like a huge coding thing I

00:25:12,500 --> 00:25:19,419
just like work in github so that way not

00:25:15,200 --> 00:25:19,419
to like set everything up locally

00:25:19,630 --> 00:25:26,210
because it's fine because as soon as you

00:25:23,830 --> 00:25:29,629
make the pull request you're gonna get

00:25:26,210 --> 00:25:31,730
to preview it so here he is and this is

00:25:29,629 --> 00:25:32,750
actually a new feature of github that

00:25:31,730 --> 00:25:34,669
they launched is that you can have pull

00:25:32,750 --> 00:25:36,889
request templates which is kind of nice

00:25:34,669 --> 00:25:38,179
so we've got like our standard pour les

00:25:36,889 --> 00:25:40,700
template that I'm going to go through

00:25:38,179 --> 00:25:43,159
and fill out and it's got nice little

00:25:40,700 --> 00:25:45,580
happy characters like the sparkles for

00:25:43,159 --> 00:25:47,509
all the things I'm happy about it

00:25:45,580 --> 00:25:48,980
magnifying glass for things that I'm

00:25:47,509 --> 00:25:53,570
asking other people on the team to give

00:25:48,980 --> 00:25:58,009
an extra eye on okay so he created it

00:25:53,570 --> 00:25:59,450
and look over here yeah as soon as as

00:25:58,009 --> 00:26:01,490
soon as the pull request gets created

00:25:59,450 --> 00:26:03,049
basically github web hooks are kicking

00:26:01,490 --> 00:26:04,669
off you know there's with if you're

00:26:03,049 --> 00:26:06,980
using Jenkins then you can have Jenkins

00:26:04,669 --> 00:26:09,230
doing pulling if you're if you're using

00:26:06,980 --> 00:26:11,629
provo Travis circle those kinds of tools

00:26:09,230 --> 00:26:14,029
are getting a web hook from github to

00:26:11,629 --> 00:26:16,039
kick off their build environment and you

00:26:14,029 --> 00:26:18,139
know we've specified in this case in our

00:26:16,039 --> 00:26:20,360
provo yamel a set of steps that it needs

00:26:18,139 --> 00:26:23,179
to do so we've got some dependencies and

00:26:20,360 --> 00:26:25,309
composer items you know phantom j/s

00:26:23,179 --> 00:26:26,870
we're using for some of our tests we're

00:26:25,309 --> 00:26:28,250
using b-hat we have some specific

00:26:26,870 --> 00:26:29,659
versions of things that we need to get

00:26:28,250 --> 00:26:31,700
downloaded and set up as part of the

00:26:29,659 --> 00:26:33,950
build so provo is going out and doing

00:26:31,700 --> 00:26:35,360
those steps on on each build and then

00:26:33,950 --> 00:26:36,950
just running through everything that

00:26:35,360 --> 00:26:39,950
we've asked to do so the main tests that

00:26:36,950 --> 00:26:42,830
we use are a mix of B hat and Drupal

00:26:39,950 --> 00:26:44,629
simple tests and it takes for us about

00:26:42,830 --> 00:26:48,259
24 minutes which which feels a little

00:26:44,629 --> 00:26:49,430
bit long and it's actually it's kind of

00:26:48,259 --> 00:26:51,380
amazing on

00:26:49,430 --> 00:26:53,150
we they were running more like 40

00:26:51,380 --> 00:26:54,410
minutes and then we moved over to provo

00:26:53,150 --> 00:26:56,540
and they got kicked down about 20

00:26:54,410 --> 00:26:58,610
minutes we keep adding more tests so

00:26:56,540 --> 00:27:02,300
it's up to 24 minutes which is kind of a

00:26:58,610 --> 00:27:04,430
good problem to have yeah so that's the

00:27:02,300 --> 00:27:06,350
flow and then I'm you know waiting for

00:27:04,430 --> 00:27:10,070
the build to finish checking out some

00:27:06,350 --> 00:27:14,450
imager looking at some some dank memes

00:27:10,070 --> 00:27:19,520
and let me go back to provo and I'm

00:27:14,450 --> 00:27:21,530
looking at right that's me so there's a

00:27:19,520 --> 00:27:22,970
you know I can see that all the steps

00:27:21,530 --> 00:27:24,760
had passed and they're either successful

00:27:22,970 --> 00:27:28,430
or failures of course they're successful

00:27:24,760 --> 00:27:31,160
always definitely never it build fails

00:27:28,430 --> 00:27:33,040
so so yeah so things are good i can look

00:27:31,160 --> 00:27:35,300
at the the logs are available forever

00:27:33,040 --> 00:27:36,980
those are just available you can inspect

00:27:35,300 --> 00:27:39,560
what's what's worked or what didn't work

00:27:36,980 --> 00:27:41,090
in previous builds and then you know as

00:27:39,560 --> 00:27:43,400
Jews mentioned there's the live site

00:27:41,090 --> 00:27:44,750
that's just going to be available and so

00:27:43,400 --> 00:27:46,250
I can click out to that and take a look

00:27:44,750 --> 00:27:48,740
at the frequently asked questions page

00:27:46,250 --> 00:27:50,750
there and see that like yeah my might

00:27:48,740 --> 00:27:53,660
change of one word did actually work as

00:27:50,750 --> 00:27:54,740
expected but it is nice to have that you

00:27:53,660 --> 00:27:57,500
know obviously for a more complicated

00:27:54,740 --> 00:27:59,600
change it's nice to have that live QA

00:27:57,500 --> 00:28:04,160
environment to be able to hit see what's

00:27:59,600 --> 00:28:08,570
happened with your changes cool well we

00:28:04,160 --> 00:28:12,260
really flew through that but um okay

00:28:08,570 --> 00:28:17,080
well i also am enjoying it for like open

00:28:12,260 --> 00:28:22,190
source projects so the this is my

00:28:17,080 --> 00:28:24,380
installation profile it's called bear

00:28:22,190 --> 00:28:27,740
and we i just use that for all of our

00:28:24,380 --> 00:28:31,370
projects so we have we just do

00:28:27,740 --> 00:28:35,680
everything as pull requests here i got a

00:28:31,370 --> 00:28:40,720
lot of i have a lot of pull requests but

00:28:35,680 --> 00:28:43,640
it's very easy to deal with so say I

00:28:40,720 --> 00:28:45,680
even sometimes I just do it just to just

00:28:43,640 --> 00:28:49,340
to play with something like if I want to

00:28:45,680 --> 00:28:56,750
try out a new module I can just go into

00:28:49,340 --> 00:29:01,610
my make file here and edit it

00:28:56,750 --> 00:29:07,580
and then what's a cool Drupal 8 module I

00:29:01,610 --> 00:29:15,470
could add what is it I think I already

00:29:07,580 --> 00:29:16,760
have that let's see a hipster profile

00:29:15,470 --> 00:29:21,380
it's got all the modules before they are

00:29:16,760 --> 00:29:29,780
cool come on guys give me a give me a

00:29:21,380 --> 00:29:47,390
cool module okay oh one word separation

00:29:29,780 --> 00:29:51,880
underscores emoji emojis this is sounds

00:29:47,390 --> 00:29:57,860
like a joke module entity query API and

00:29:51,880 --> 00:30:03,440
entity query API no term okay all right

00:29:57,860 --> 00:30:16,850
um the I'll get this version I'm gonna

00:30:03,440 --> 00:30:18,770
go with dev one point X i'm also a big

00:30:16,850 --> 00:30:20,180
fan of the pair programming this might

00:30:18,770 --> 00:30:22,340
be the biggest pair programming session

00:30:20,180 --> 00:30:31,250
of it wait why don't you say i missed a

00:30:22,340 --> 00:30:37,880
you cuz i missed it you yeah you're one

00:30:31,250 --> 00:30:42,440
you short of a query um okay so i don't

00:30:37,880 --> 00:30:44,270
know if this is gonna work ok so I'm

00:30:42,440 --> 00:30:47,350
going to make a new pull request because

00:30:44,270 --> 00:30:47,350
that's the whole game here

00:30:48,300 --> 00:30:54,660
I don't like use a template I just

00:30:50,700 --> 00:30:58,020
pressed the boat to each their own okay

00:30:54,660 --> 00:31:01,200
so here it is it's building mine runs a

00:30:58,020 --> 00:31:08,610
little bit faster than his cuz I'll has

00:31:01,200 --> 00:31:10,650
made tests so it's going through these

00:31:08,610 --> 00:31:13,380
are these steps are actually configured

00:31:10,650 --> 00:31:16,290
by a gamma file i should show that to

00:31:13,380 --> 00:31:20,010
you while it's running let's say if i go

00:31:16,290 --> 00:31:22,170
back to the code this one is a little

00:31:20,010 --> 00:31:25,380
bit complicated but usually it's pretty

00:31:22,170 --> 00:31:29,520
simple you can just run um shell

00:31:25,380 --> 00:31:31,740
commands and just and just put each

00:31:29,520 --> 00:31:33,300
shell commands you want in there but

00:31:31,740 --> 00:31:34,620
there's also like a Drupal plugin

00:31:33,300 --> 00:31:36,360
there's a wordpress plugin now that

00:31:34,620 --> 00:31:38,460
makes it simpler we didn't use it for

00:31:36,360 --> 00:31:41,460
this because it was a weird way that we

00:31:38,460 --> 00:31:44,880
wanted to build the profile but here's

00:31:41,460 --> 00:31:46,860
how we run the B hat tests we just go

00:31:44,880 --> 00:31:52,260
over to the test directory do a composer

00:31:46,860 --> 00:32:00,030
install and then we do bin be hat so

00:31:52,260 --> 00:32:05,880
let's see if it's so you can actually

00:32:00,030 --> 00:32:10,380
like change these steps and let's see

00:32:05,880 --> 00:32:13,410
how that blows up your features okay so

00:32:10,380 --> 00:32:16,920
it's still going so I'll if you click

00:32:13,410 --> 00:32:20,610
these links that's what takes you over

00:32:16,920 --> 00:32:22,970
to the provo app and then you can see

00:32:20,610 --> 00:32:22,970
the output

00:32:24,220 --> 00:32:30,419
there's a lot of sadness happening here

00:32:30,630 --> 00:32:42,210
says it's download it says its download

00:32:36,340 --> 00:32:42,210
identity query area huh that's lucky

00:32:43,919 --> 00:32:50,140
okay so now it's up to your running that

00:32:46,690 --> 00:32:51,760
it finished the drupal install and now

00:32:50,140 --> 00:32:53,320
it's running b-hat tests which that

00:32:51,760 --> 00:33:00,669
takes me cuz it it does a composer

00:32:53,320 --> 00:33:07,059
install and it gets a bunch of stuff but

00:33:00,669 --> 00:33:09,880
soon okay here it's running some tests I

00:33:07,059 --> 00:33:13,809
have some really easy tests here because

00:33:09,880 --> 00:33:16,690
I can't train QA people to write the

00:33:13,809 --> 00:33:18,850
test so this one is that as a site admin

00:33:16,690 --> 00:33:22,570
I'm able to login and publish content on

00:33:18,850 --> 00:33:25,860
the site and this one is that they are

00:33:22,570 --> 00:33:25,860
able to add a menu item

00:33:32,890 --> 00:33:36,360
well it's almost done

00:33:37,389 --> 00:33:42,820
it doesn't it doesn't um auto-update

00:33:39,849 --> 00:33:50,379
right now that's why I'm refreshing like

00:33:42,820 --> 00:33:53,289
I'm on ebay in the 90s don't worry this

00:33:50,379 --> 00:33:55,200
is definitely going to work okay you can

00:33:53,289 --> 00:33:57,789
tell it's done because it says view site

00:33:55,200 --> 00:34:00,429
so there's actually two links here view

00:33:57,789 --> 00:34:03,339
site and view build permalink there a

00:34:00,429 --> 00:34:06,369
little bit different because this is a

00:34:03,339 --> 00:34:08,919
pull request based link which means if I

00:34:06,369 --> 00:34:10,960
give you this link it's not always going

00:34:08,919 --> 00:34:15,309
to be necessarily the same build because

00:34:10,960 --> 00:34:17,889
if I update the branch then it'll be

00:34:15,309 --> 00:34:19,659
showing a newer build so that's useful

00:34:17,889 --> 00:34:22,329
if you want to just send someone a link

00:34:19,659 --> 00:34:24,299
to like what's going on with that pull

00:34:22,329 --> 00:34:27,190
request so they always see the latest

00:34:24,299 --> 00:34:28,990
but if you have test content or

00:34:27,190 --> 00:34:31,779
something in your sandbox then you would

00:34:28,990 --> 00:34:33,250
want to get the permalink to make sure

00:34:31,779 --> 00:34:37,599
you give them the build where the test

00:34:33,250 --> 00:34:39,879
content is okay so you can go back to

00:34:37,599 --> 00:34:41,980
github here you can do a rebuild if you

00:34:39,879 --> 00:34:44,889
need to i was lucky everything came out

00:34:41,980 --> 00:34:47,619
green which is you know the opposite of

00:34:44,889 --> 00:34:49,149
Murphy's Law so the weird thing is

00:34:47,619 --> 00:34:51,549
because this is an install profile

00:34:49,149 --> 00:34:54,039
there's no database if there was a

00:34:51,549 --> 00:34:55,809
database that you needed for your build

00:34:54,039 --> 00:34:59,799
you can just go here and build assets

00:34:55,809 --> 00:35:01,630
and drag in files like databases or you

00:34:59,799 --> 00:35:04,539
can do it there's like a command line

00:35:01,630 --> 00:35:08,099
way to do it let me go back to my these

00:35:04,539 --> 00:35:11,319
are just all of the builds that I have

00:35:08,099 --> 00:35:15,250
there's even older versions there's a

00:35:11,319 --> 00:35:19,269
lot of builds so here is my link to see

00:35:15,250 --> 00:35:23,980
this cool module in process now because

00:35:19,269 --> 00:35:28,000
there's no database I have to figure out

00:35:23,980 --> 00:35:30,819
what the what the password is so if I go

00:35:28,000 --> 00:35:32,950
to the run install step says

00:35:30,819 --> 00:35:36,990
installation complete username admin

00:35:32,950 --> 00:35:36,990
user password but let me copy that

00:35:50,520 --> 00:36:06,100
okay so now i guess i can see if I got

00:35:55,270 --> 00:36:12,370
that cool new module rest style entity

00:36:06,100 --> 00:36:14,470
query endpoints okay so it works so I

00:36:12,370 --> 00:36:16,750
like that better than trying out a

00:36:14,470 --> 00:36:19,810
module on my local environment because

00:36:16,750 --> 00:36:21,430
now I can pass this off to someone else

00:36:19,810 --> 00:36:23,710
and I can say hey check it out and send

00:36:21,430 --> 00:36:27,280
them the link can you what do you guys

00:36:23,710 --> 00:36:34,720
think about it you know can and can you

00:36:27,280 --> 00:36:37,960
finish setting up for me so that's about

00:36:34,720 --> 00:36:40,540
it any questions and there is a mic in

00:36:37,960 --> 00:36:42,550
this aisle right here if you could speak

00:36:40,540 --> 00:36:45,930
into that it's being recorded otherwise

00:36:42,550 --> 00:36:51,600
Jodi and I have to repeat what you said

00:36:45,930 --> 00:36:51,600
which we can also do any questions

00:36:55,970 --> 00:37:01,440
yeah the type of test that calls the

00:36:59,190 --> 00:37:03,800
bill that take so long or is the number

00:37:01,440 --> 00:37:03,800
of tests

00:37:05,500 --> 00:37:14,360
to the riad the question so the question

00:37:09,770 --> 00:37:16,220
was why do our tests take so long I

00:37:14,360 --> 00:37:19,250
think its a mix of a couple of different

00:37:16,220 --> 00:37:22,190
factors so there's um there's this

00:37:19,250 --> 00:37:24,320
philosophy about tests that that they

00:37:22,190 --> 00:37:26,150
should be in a triangle shape basically

00:37:24,320 --> 00:37:28,790
that the majority your tests should be

00:37:26,150 --> 00:37:32,300
unit tests and unit tests run extremely

00:37:28,790 --> 00:37:33,950
fast but they only test a small

00:37:32,300 --> 00:37:35,870
component and then you should have like

00:37:33,950 --> 00:37:37,490
a band of tests a smaller number that

00:37:35,870 --> 00:37:40,280
our integration tests that go across a

00:37:37,490 --> 00:37:43,070
function maybe that go across you know

00:37:40,280 --> 00:37:45,410
systems go across modules but but that

00:37:43,070 --> 00:37:46,880
are still at the code level and

00:37:45,410 --> 00:37:48,080
therefore design be fast and that you

00:37:46,880 --> 00:37:51,050
should have a relatively small amount

00:37:48,080 --> 00:37:53,180
that our UI tests it turns out that the

00:37:51,050 --> 00:37:55,270
tool for writing UI tests that we're

00:37:53,180 --> 00:37:57,710
using be hat is very easy to work with

00:37:55,270 --> 00:37:59,090
very easy to write those tests and takes

00:37:57,710 --> 00:38:01,940
minimal amount of time to get good

00:37:59,090 --> 00:38:03,740
coverage and so we wrote a lot of tests

00:38:01,940 --> 00:38:07,960
in it it turns out B hat is also really

00:38:03,740 --> 00:38:10,130
slow in comparison to unit tests so we

00:38:07,960 --> 00:38:11,870
you know we're sort of migrating to

00:38:10,130 --> 00:38:13,630
writing more and more unit tests now

00:38:11,870 --> 00:38:17,180
that the time has become an issue for us

00:38:13,630 --> 00:38:18,560
and and you know I should have mention

00:38:17,180 --> 00:38:21,110
that earlier we have a small number of

00:38:18,560 --> 00:38:23,270
unit tests unit tests and Drupal are

00:38:21,110 --> 00:38:24,230
kind of hard because like you'll write

00:38:23,270 --> 00:38:26,150
one and then you'll realize that

00:38:24,230 --> 00:38:28,250
somewhere in some function that you

00:38:26,150 --> 00:38:31,100
called something needs a database and so

00:38:28,250 --> 00:38:32,480
the unit test just blows up so for the

00:38:31,100 --> 00:38:34,160
unit tests that we write is mostly our

00:38:32,480 --> 00:38:39,290
custom code that were able to test with

00:38:34,160 --> 00:38:41,870
unit tests JS selenium on the B hat

00:38:39,290 --> 00:38:43,910
tests we don't use like I'm use um mink

00:38:41,870 --> 00:38:47,440
and for the for the JavaScript based

00:38:43,910 --> 00:38:47,440
ones we use phantom

00:38:49,119 --> 00:39:05,559
oh you are actually get in line at the

00:38:51,700 --> 00:39:08,049
mic environment 15 environments and grab

00:39:05,559 --> 00:39:09,700
like you know prep the features find

00:39:08,049 --> 00:39:15,630
those within 10 sites in that way to

00:39:09,700 --> 00:39:18,400
that whatever capacity increments I

00:39:15,630 --> 00:39:19,839
there there are I don't know if Frank

00:39:18,400 --> 00:39:23,170
carries here but he's worked on that

00:39:19,839 --> 00:39:25,299
problem a bit I like I don't know that

00:39:23,170 --> 00:39:31,380
that's built into any continuous

00:39:25,299 --> 00:39:31,380
integration tools but oh it's ok

00:39:40,480 --> 00:39:43,600
got it

00:39:56,150 --> 00:40:02,579
cool thanks and at the microphone some

00:40:00,480 --> 00:40:05,880
other tools have seen which solve

00:40:02,579 --> 00:40:09,100
similar problems have ways to get a

00:40:05,880 --> 00:40:10,570
command line on like the on the

00:40:09,100 --> 00:40:12,100
instance that's like blown off so you

00:40:10,570 --> 00:40:14,020
can go poke around and see what happened

00:40:12,100 --> 00:40:17,230
so you don't have to go and like do that

00:40:14,020 --> 00:40:18,730
locally as you're saying because that's

00:40:17,230 --> 00:40:23,080
something that's in the stool there is

00:40:18,730 --> 00:40:26,530
yes on the road map it would be great to

00:40:23,080 --> 00:40:29,530
be able to ssh in there and see what's

00:40:26,530 --> 00:40:32,410
going on so which is should be possible

00:40:29,530 --> 00:40:34,540
I mean I have you have to just I do like

00:40:32,410 --> 00:40:37,690
da coroner and I go into them but it's

00:40:34,540 --> 00:40:43,420
just a matter of the security and you

00:40:37,690 --> 00:40:45,040
know see I even use promo to UM work on

00:40:43,420 --> 00:40:47,140
a wordpress site which I would never

00:40:45,040 --> 00:40:50,260
have done because I wouldn't like soil

00:40:47,140 --> 00:40:52,740
my computer with it I can do it all in

00:40:50,260 --> 00:40:52,740
the cloud

00:41:09,080 --> 00:41:16,410
I think it's the servers yeah yeah so we

00:41:14,880 --> 00:41:18,930
were previously testing we were using

00:41:16,410 --> 00:41:21,060
Jenkins running tests on just an AWS

00:41:18,930 --> 00:41:23,550
instance and i think is probably because

00:41:21,060 --> 00:41:26,430
the AWS instance that we were using was

00:41:23,550 --> 00:41:30,750
not as performant as the provo servers

00:41:26,430 --> 00:41:32,220
and containers yeah so packet net there

00:41:30,750 --> 00:41:34,380
they might even have some people here

00:41:32,220 --> 00:41:39,720
but yeah that's the basis of the

00:41:34,380 --> 00:41:42,360
hardware for Provo and it's fast yes I

00:41:39,720 --> 00:41:44,580
mean I want these guys in a dramatic

00:41:42,360 --> 00:41:46,380
person so yeah I think some of the folks

00:41:44,580 --> 00:41:51,270
at packet that night used to work at a

00:41:46,380 --> 00:41:58,740
dramatic a dramatics definitely any

00:41:51,270 --> 00:42:04,320
other questions okay thanks very much

00:41:58,740 --> 00:42:06,660
everybody thank you oh I supposed to see

00:42:04,320 --> 00:42:08,490
this I'm supposed to say this that

00:42:06,660 --> 00:42:11,220
you're supposed to fill in our feedback

00:42:08,490 --> 00:42:13,400
form please if you have something nice

00:42:11,220 --> 00:42:13,400

YouTube URL: https://www.youtube.com/watch?v=-v7WBY2EuIU


