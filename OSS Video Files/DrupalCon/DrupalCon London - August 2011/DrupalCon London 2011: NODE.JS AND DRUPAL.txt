Title: DrupalCon London 2011: NODE.JS AND DRUPAL
Publication date: 2013-03-23
Playlist: DrupalCon London - August 2011
Description: 
	Presented by
beejeebus
Howard Tyson
Drupal is a powerful, flexible platform for building applications, but not something that handles realtime notifcations easily.

Node.js is a breath of fresh air in the Open Source web server landscape. It makes writing applications that handle thousands of open connections at the same time easy.

The Nodejs module integrates Drupal with Node.js, allowing for the best of both worlds.

This presentation will address:

Why realtime
Why Node.js
How the Nodejs module integrates Drupal and Node.js
Current features of the Nodejs module
Where the Nodejs module is going
Now with 100% more BoF - Node.js and Drupal BoF.

Intended audience
Developers, Site Builders

Questions answered by this session
How to add realtime support and push notifications to Drupal sites
Captions: 
	                              welcome glad you guys could make it glad                               we could make it a big room we have to                               be extra theatrical so we're here to                               talk about nodejs just start with a                               quick introduction I'm my name is Justin                               Randall let's my drift little and                               Twitter and I our scenic so being doing                               drupal for nearly six years I'm                               occasional call hacker and it's about                                already yeah so my boo jeebus is my neck                                and Twitter and I see casual core hacker                                and I maintain the chat room and nodejs                                modules and I work in Sydney Australia                                for a company that i co-founded called                                ampersand technology which is just a                                Drupal shop like many others here I'm                                Howard Tyson I'm tezo on drupal.org IRC                                Twitter and anywhere else I can get it                                i'm a senior developer at zip tech which                                is another drupal shop like so many out                                of Philadelphia and I've been working                                with Drupal for like five years and hack                                on a whole bunch of different stuff                                trying to do more of the contributing                                much me so no Jas hopefully everybody's                                here to here to hear about it so what is                                this no dais thing anyway I think a lot                                of people a little fuzzy on exactly what                                it is and exactly how it can work with                                Drupal so we wanted to start off with an                                introduction and kind of talk you                                through what the joke nodejs is and why                                it's cool for working with drupal and                                just just before we go how many people                                are using nodejs or a written code for                                it here okay that's pretty good cool                                so in a sentence no Jess is JavaScript                                on the server so in addition to running                                on the client side JavaScript can be run                                on the server side and the whole idea is                                you can run it not just for the server                                no Jess can be used to set up non HTTP                                server things but that's sort of our use                                case here is serving web requests it's                                based on Google's v                                               designed I think for chrome open sourced                                and and has been put into use as sort of                                a core of the JavaScript handling in                                know Jas and one of the cool things                                about that is Google is constantly                                innovating and making it faster so                                particularly the the sort of the dev                                branch of no GS right now is just                                tracking whatever they can upstream so                                it just gets faster and better all the                                time and apparently a whole bunch of the                                optimizations that Google put in to v                                 actually are much better on the server                                side because the the JavaScript will the                                v                                                                     the objects that are in memory while                                they're being run on a single page that                                doesn't make a big difference but on a                                long-running server process that's going                                to hang out for a long time it tends to                                get better as it continues to run which                                is kind of cool so javascript is kind of                                inherently event-driven and the node.js                                module sorry the no j/s itself is a an                                inherently invented system so you have a                                main event loop running and when a new                                request comes in that single process                                event loop takes the process hands it                                off to a worker will talk about some of                                the details in the in the in the                                upcoming parts and keeps running so the                                it's the reactor pattern is what no jess                                is doing there it's similar to pythons                                twisted and from what I understand it's                                similar to the varnish                                as well and so the whole idea is that                                the asynchronous i/o callbacks are                                performed by by C and C++ libraries so                                the main event loop runs your code and                                as soon as it hits something that's in                                i/o hopefully your i/o is going to be                                performed by by a library and that                                library hands off and runs in a separate                                thread pool so that your main                                application loop doesn't block so a                                single process can can handle tens of                                thousands of a sinker ova of concurrent                                connections and anytime any of those get                                to any of the blocking parts which for                                networking or disk or almost any                                application that's where most of our                                apps spend most of the time right                                waiting on Io so the whole idea is we                                can have this event loop and every time                                 we're waiting on Io we just pass that                                 off somewhere else and when that's                                 finished it comes back and we respond to                                 that event firing whatever callback we                                 need to fire when that happens it's a                                 lot like if you've ever done any                                 JavaScript programming it's a lot like                                 binding to the click event you sort of                                 say i have this function when this thing                                 in the Don gets clicked then I want you                                 to call that function until then this                                 functions just kind of hanging out and                                 it's at the time that event happens when                                 we know everything's ready and we have                                 all of our context then just run my code                                 here you're no J esco to look a lot like                                 that and the other thing to say about                                 that is that it's possible to get that                                 really wrong and you can really pay it                                 really is a single process and it's                                 multi-threaded but the event loop isn't                                 so if you do something dumb in there and                                 you want to handle the whole lot of                                 connections you're toast so the way that                                 they've ridden it is to make it hard to                                 do that but it's still possible so it's                                 something that when you write                                 applications that particularly want to                                 handle a lot of something at the same                                 time you have to do it in a certain way                                 so that you don't get stuck basically                                 so we sort of ended up talking through                                 this but just to reiterate so you've got                                 a single process running the main event                                 loop which is maintaining all of those                                 connections that helps you be able to                                 handle a lot more connections than you                                 could with other technologies because                                 you're not sucking up all that memory                                 for every single connection and then as                                 we were just saying there's sort of a                                 thread pool where the the actual working                                 worker stuff happens in some C or C++                                 library and if anyone's what's some of                                 the sort of popular presentations with                                 Ryan dial online in some of them he just                                 kind of says yeah we don't want users to                                 be able to do anything that blocks we                                 just want to kind of put them in an                                 event of jail he's quite opinionated                                 about it so you don't really have                                 primitives in JavaScript to start your                                 own threads or any of that sort of thing                                 if you want to do that you've got to                                 write so you know use a C library or C++                                 library and then you know wrap it in the                                 bindings for node and load it as a                                 module so when you're in just JavaScript                                 code you know you're in there you can't                                 you can't sort of operate on thread                                 primitives etc we saw this was                                 intermediary right we're doing a lot of                                 talking about threads yeah sorry Robert                                 a higher level oh god said the beginning                                 if people have questions like while                                 we're presenting just go ahead and ask                                 we've got a couple of marks down here so                                 just jump in if you've got a question so                                 a big question you might be asking like                                 all right so yeah yeah threads processes                                 concurrency like why do I care I install                                 Drupal and Drupal gives me a website                                 right like what is no j/s gonna give me                                 other than like another acronym and a                                 plus plus on the web                                                   the best way to answer that is probably                                 to talk about some of the of Apaches                                 shortcomings so with a patch you've got                                 one thread and if you're using PHP and                                 you're not getting into the crazy                                 performance stuff you probably actually                                 have an entire process per connection                                 and that process is a pretty fat process                                 it has all of the PHP libraries it has a                                 whole bunch of Apache modules to be                                 smart enough to serve a Drupal page you                                 need a lot a lot of stuff loaded up and                                 you have that loaded up for every single                                 process so one process can only serve                                 one connection so a single connection                                 comes in you have some fixed some finite                                 number of processes maybe you have five                                 you've got five concurrent connections                                 the next ones just have to queue up                                 behind them and you're not going to get                                 to that next process until you've                                 processed all the ones before that if                                 you're not careful with a number of                                 children you allow in some of your other                                 Apache settings you can end up just                                 spawning too many of those and then your                                 server just om's and dies that's bad so                                 when you've got all these memory heavy                                 processes you really can't do things                                 like high concurrency you can't have                                 long you can't have either way too many                                 connections that are hanging out and you                                 can't have them open too long because                                 that's going to cause you to have too                                 many right so all this means persistent                                 connections in Apache are massive fail                                 if you've looked at some of the ways to                                 do push technologies that's that's a big                                 part of what we're going to be talking                                 about and a big part of what we like                                 about nodejs if you looked at doing push                                 technologies with Apache it's always a                                 big hack doing any kind of comet d or                                 that kind of thing with a patch here                                 with PHP is usually a big bunch of                                 workarounds for a system that really                                 doesn't accommodate it and when how it                                 is big hack he's referring to my                                 chatroom module because my chatroom                                 module is based on the lamp stack and a                                 big chunk of the code is just a hack to                                 try and make it perform okay with sort                                 of                                                                      users working on it to polling every                                 second it's doing a lot of stuff in the                                 back end it's nasty and that's actually                                 one of the motivations for me personally                                 to get into know Jess because I just                                 couldn't face porting the module from                                 six to seven and still use lamp the lamp                                 stack as the back end                                 because it's nasty so no jess is good                                 for lots of things one of the big ones                                 and what we're most interested in is                                 concurrency because it has this model of                                 doing asynchronous i/o what that                                 basically means and all the words we've                                 been spouting come down to having low                                 overhead for lots of connect lots of                                 simultaneous connections because the                                 thing is most of those connections                                 aren't actually deuced doing something                                 while they're connected so what do I                                 mean by that so if I need to connect                                 with it so let's say that Justin and I                                 are both on some kind of a chat for                                 example I'm going to connect to the                                 server saying hand listening for chat                                 messages and the server is going to say                                 all right you're connected and then it's                                 just going to wait and so no Jase                                 doesn't actually have to be doing                                 anything with my connection it just                                 keeps track of my session ID and waits                                 until it actually has something to tell                                 me about Justin does the same and now we                                 have to open connections but the main                                 event loop is just continuing to run                                 just waiting for something waiting for a                                 message to come in that needs to go out                                 to one of those clients we're waiting                                 for a message to come back from one of                                 the clients that it needs to send                                 somewhere else that's awesome and it's                                 especially awesome for doing push stuff                                 nodejs is also really good for I mean                                 it's good for lots of things it's                                 especially good for any kind of                                 networking application it's really                                 excellent glue there are really awesome                                 libraries and it's really easy to do                                 things like routing I have a connection                                 coming in from over here and then I know                                 that I need to connect to a worker in                                 the background so I can do some routing                                 based on the incoming requests and then                                 just pipe the connection from the                                 background into the connection in the                                 foreground if you don't I mean so front                                 end connection comes in here we've got a                                 bunch of back-end workers the know Jas                                 connection can go out to the back end                                 and then pipe the back end out to the                                 front end request right and if you look                                 at github blog then they're now using                                 node to do things like push out tar                                 balls and it's actually something that                                 I'm personally experimenting with for                                 drupal.org because you know obviously                                 we've get and serving a tarball by                                 calling get archive how many different                                 you know different commercials can you                                 pass to that so the challenges you face                                 if you want to try and like generate                                 them all up front are quite high so one                                 of the things that personally just                                 experimenting with node is is putting                                 that to different node processes that                                 communicate with HTTP and with no dis                                 just ridiculously easy in fact there's a                                 there's a primitive on streams in know                                 that allows you to just stick together                                 to a readable and writable string with a                                 pipe and it's just ridiculously cool so                                 it's it's a really good glue if you've                                 got a bunch of HTTP aware particularly                                 services that you want to glue together                                 it's it's just really cool and one of                                 the other things that really excited me                                 about node is actually if you look at                                 the hello world the hello world in four                                 lines i think walks you through creating                                 a server that just spits a string out                                 when a request comes in that's all I can                                 do so I've shown that a couple people                                 and they've given me just blanks                                 there's like so you can spit hello world                                 when a request comes in like that's not                                 actually interesting for any particular                                 application what is interesting about it                                 is that that's the entire web server so                                 if you were to do a hello world with                                 serving an Apache page you install                                 Apache you'd go into VAR www and you                                 drop in an index HTML page right so                                 Apache then can when a request comes in                                 serve back that index HTML but it can                                 also do a hundred thousand other things                                 because the Apache code itself is this                                 generalized web server that can do a                                 trillion things in nodejs you can write                                 your own web server from scratch in very                                 few lines of code so you just import the                                 libraries you actually need if all you                                 need to do is speak HTTP that's all you                                 need to do your server doesn't even know                                 how to talk to the file system you have                                 complete control over what's actually                                 going on on that server which means you                                 can keep it really really lightweight                                 and you have a lot of control over                                 exactly what it's doing so lots and lots                                 of low-level stuff about what node.js is                                 and why we're excited about it as a                                 technology but again we're all drupal                                 developers so are we going to follow                                 certain other web shops and drop Drupal                                 entirely and go into nodejs not me                                 personally hope so Justin I've been                                 working on I should give Justin credit                                 Justin wrote the actual working module                                 know the nodejs module and we're going                                 to talk you through how you can use it                                 to augment your Drupal site with nodejs                                 and with this concurrency and how you                                 can use that to get working website gets                                 without killing your servers so the                                 nodejs module is at drupal.org / project                                 / nodejs                                 and what it does is it provides a server                                 script and a drupal module that                                 integrates with it so that you can have                                 this separate note jf server that your                                 clients can connect to in addition to                                 the main drupal server and just as a                                 quick overview here this was an attempt                                 to have my cake and eat it too so there                                 are services that you can sort of drop a                                 javascript widget on your site or                                 elsewhere and the actual writing and                                 persisting of the messages in chats or                                 anything like that happens on their                                 servers and the integration with Drupal                                 varies sort of wildly and but in most                                 cases you can't kind of have something                                 that will really scale and also                                 something that is just first-class                                 Drupal so all the data is written                                 straightened drupal database you know                                 you can do views integration on messages                                 the code that runs when PHP runs is just                                 standard module code that any other                                 developer out there can hook into etc so                                 just to sort of put a high level picture                                 on a big motivating factor here was to                                 allow plumbing so Drupal developers can                                 just write Drupal code and integrate                                 with all this power without having to                                 understand you know any of this other                                 stuff we mentioned earlier on in the in                                 the talk so so how does it work here                                 we've got the client the end user on                                 their shiny new MacBook Pro our Drupal                                 site and a node.js server the node.js                                 server can be running on the same server                                 as Drupal but it doesn't have to be and                                 in fact ampersand has a still in beta                                 but a service with hosted nodejs and                                 it's basically hosted the note j/s                                 module from Drupal right                                 so you start out with a normal you start                                 out by doing a normal Drupal page load I                                 just make a request to my drupal site                                 and drupal comes back with HTML in that                                 hTML is the JavaScript to two connects                                 to nodejs and an auth token that's for                                 this specific connection or for this                                 user session I guess more accurately                                 yell token has a life cycle a lot like a                                 normal login logout session so then my                                 client connects to know DJ s and sends                                 the auth token and oj s obviously                                 doesn't know yet whether my client                                 should be allowed to connect so no DJ s                                 makes an additional it makes a request                                 to drupal this is going to bootstrap                                 Drupal Drupal's going to check whether                                 this auth token is appropriate for this                                 user and if so send back oops shoot hey                                 let me go backwards                                 fast forward nodejs no Jo stalks the                                 Drupal and Drupal sends back a list of                                 channels this user should be subscribed                                 to so one of the mean aspects of the                                 plumbing is that there are different                                 channels so you subscribe users to                                 different channels and then every time a                                 message comes out you can broadcast it                                 to that set of channels a couple of                                 other things to say also is that nothing                                 from the client is trusted just straight                                 up by default everything comes from                                 Drupal and you know there's a you know a                                 shared secret and so no jeaious will                                 never do anything like you can't send a                                 message from a client straight to                                 another client and unless you go in and                                 change the default settings in in the                                 server and in Drupal because obviously                                 there's all sorts of pain waiting to                                 happen if you trust stuff coming from                                 the client so Drupal is really the                                 arbiter of all this one to make it more                                 secure but also when this runs back                                 there are hooks that your module can                                 implement so it's very simple to just                                 get involved in the action if you've got                                 some channels you want to allow people                                 to subscribe to it's just plain old PHP                                 code implement a hook and urine so                                 pending the successful receipt of                                 successful authentication and a list of                                 channels nodejs notifies that client                                 that the office successful you there's                                 actually sort of a JavaScript hook that                                 runs so your extensions can do something                                 with the fact that that session is that                                 a socket connection has been created and                                 now you're connected on subsequent page                                 loads Drupal does its normal page load                                 gets back its auth token and no j/s                                 remembers the authenticated token so                                 when we try to reconnect nodejs just                                 says okay you're all good and reconnects                                 you and there's a standard hook I mean                                 the nodejs module when that hooks into a                                 user logging and logging out and it'll                                 send a message over and kill the active                                 session so obviously you need that                                 because otherwise no Jess could be                                 running for weeks or months when you                                 can't just have stuff hanging around so                                 again Drupal is the arbiter so Drupal                                 can just reach in and take you know                                 indicated token and just say not no good                                 anymore you're gone and we don't go into                                 DC we're not going to go into detail in                                 this presentation about all of the                                 things that you can do with the node.js                                 server but the node.js server sort of                                 has this back-end capability to receive                                 messages from Drupal so you can do                                 things like kick a user without them how                                 it going through the log off process                                 your module can just take a user or                                 remove them from a channel or add them                                 to an additional channel or get metrics                                 find out what channels of users                                 connected to find out how many users are                                 connected and what users they are and                                 all this kind of stuff by a api HTTP API                                 that so drupal just makes outgoing post                                 requests think and no j/s response so                                 then at this point your client is                                 connected to the nodejs server so now as                                 Justin was saying by default we don't                                 trust the client although there is                                 plumbing in there so you can change that                                 if you don't if you want to allow                                 clients to send messages to other                                 clients by default the Drupal server has                                 to send messages to the clients by                                 sending them to some particular channel                                 so so someone comes along so I come in I                                 load my page i connect to my node.js                                 server and now my page is loaded and I                                 have a persistent connection if Justin                                 comes in and creates a new piece of                                 content if a drupal module says okay I'm                                 hooked into hook node update and I see                                 that an update has happened to a node I                                 can fire off a message and broadcast it                                 to know DJ s on the channel content                                 updates or something and then that will                                 automatically go down to any                                 number of server any number of clients                                 that are connected so if there's a                                 hundred clients connected and waiting                                 for one of those updates drupal sends                                 ace so that we all right if Justin's                                 logging in and saving a node right we                                 already have a single bootstrap there                                 Justin his clicking submit and Drupal is                                 processing that request and then                                 building him his confirmation page                                 during that single request Drupal if                                 your module hooks in and sends a message                                 drupal will send a single message to                                 know Jas no j/s will then say oh I see                                 look at what channel that message was                                 broadcasted to and then send that                                 message to every user that is subscribed                                 to that channel so if there's a hundred                                 users you haven't just had a hundred                                 users hit Drupal to load that you've had                                 a hundred users receive a message from                                 the single Drupal bootstrapped a single                                 page request that inserted that content                                 and it doesn't have to be a page request                                 so some of the first demos I deep were                                 based around rush so you can just log on                                 to your server and broadcast a message                                 to everyone who's logged on and                                 something will just pop up in their                                 browser which could be kind of fun in                                 fact well I found the phone anyway so                                 some people get a little bit confused                                 about the breakdown of exactly how this                                 authentication process works so I just                                 wanted to put it one other way so client                                 requests hits the Drupal page be it                                 apache engine X whatever Drupal sends                                 down the HTML with the JavaScript token                                 the client sends then off the auth token                                 that it got from Drupal back to nodejs                                 directly nodejs verifies that with                                 Drupal hey I got this off token is this                                 guy cool dribble says this guy's cool                                 don't worry about it drupal sends back                                 the list of channels and no Jas connects                                 but I write the code so it's more just                                 like you know drupal going affirmative                                 I'm not really cool like that                                 the Justin bot is pleased um and so                                 subsequent requests don't even need to                                 hit Drupal so if your client disconnects                                 and then needs to reconnect without                                 reloading the page it can just hit                                 nodejs again and nodejs doesn't have to                                 hit drupal and if you click another page                                 loading another Drupal page you don't                                 have to hit another off full off process                                 that's going to add another Drupal                                 bootstrap so sometimes people say like                                 all right well if we're still hitting                                 Drupal to do the authentication then                                 doesn't that mean that we're not really                                 scaling and this isn't helping us that                                 much with our concurrency because we                                 still have to hit Drupal we only have to                                 hit Drupal one additional time so when I                                 load a page there's essentially one                                 additional bootstrap when nodejs hits                                 Drupal just to verify that that session                                 IDs okay so the the performance overhead                                 with connecting no DJ s is really low                                 it's essentially one new bootstrap /                                 login so we're how do i integrate my                                 module with nodejs it's pretty easy                                 actually all you have to do is run                                 nodejs in q message and send a message                                 Justin likes objects so the message is                                 supposed to be an object but I've made                                 it an array here just to cut down the                                 number of lines I need and cast it                                 that's actually my code I think                                 so you'll see here that the data                                 structure is pretty simple broadcast is                                 whether to go out to absolutely                                 everybody regardless of channel channel                                 I guess it's probably optional if you                                 have broadcast is what specific channel                                 it should go out to even if you're                                 broadcasting you can still list channel                                 which is useful so that you can have                                 just a simple switch in your JavaScript                                 of listening for what to respond to                                 you'll see how that works in a second                                 and then data and you can put whatever                                 you can put structured data in there                                 whatever data you put in there gets                                 passed through a sort of the contents                                 right it ends up down the other end as                                 joycelyn so anything that works with                                 that you get whatever structure you sent                                 down the other thing to note is it says                                 in queue message because where we do is                                 we register a shutdown function so you                                 can call that many times as you like in                                 a request patch is shutting down usually                                 Apache and we'll send them out there's                                 also an API that just send it sometimes                                 you don't want to wait and you can just                                 send it but probably most people should                                 use that right so that aggregates all of                                 the messages that need to be sent                                 throughout the entire dribble page or                                 the entire Drupal lifecycle and then at                                 the end sends all the messages and so                                 this is the if you wanted to write if                                 you wanted to do know j/s integration in                                 addition to your dot info file that said                                 you know we require nodejs and your                                 wherever this needs to go you're                                 broadcasting of your message the only                                 other thing you need to do is write this                                 JavaScript function so what you do is                                 you just add another callback so no                                 Drupal nodejs callbacks dot here we're                                 doing the example module very clever                                 right now um you say your callback                                 function and then you probably should                                 always switch on message because                                 depending on who sent the message you                                 probably can't count on a whole lot of                                 about the rest of the contents switch on                                 message so if we're using example and                                 that's our name space of our module if                                 message that channel is example we                                 should be responding to it and here our                                 super simple example is just alert                                 message data                                 oh I'm missing an equal sign you right                                 Thanks and that's how it's good                                 different the other thing to say about                                 this pattern is that it's kind of lifted                                 straight from Drupal you add elements to                                 an object and we'll just iterate over                                 that object and call you but there's                                 another pattern where you can set in the                                 message a specific call back if that                                 callback is defined in JavaScript and                                 that's the only callback that runs so                                 you can kind of do it either way                                 depending on what you need we've talked                                 a bunch about adding users to channels                                 so this is how you add a user to a                                 channel in hook nodejs user channels you                                 just return a linear array of the                                 channels you want to add someone to and                                 then they automatically get subscribed                                 to that so every time I load a Drupal                                 page a message goes out from Drupal to                                 nodejs informing nodejs of the channels                                 I should currently be subscribed to                                 right and that's just cooled by cold by                                 the nodejs call module whenever you                                 authenticate and but obviously you can                                 also push people into channels and take                                 people out of channels aside from when                                 they authenticate but that's again                                 probably what most modules will do most                                 of the time yeah it should've been clear                                 on that when you when you are fennec                                 eight is when that happens not just                                 every single page although that's coming                                 um so how do you broadcast a message to                                 just a specific channel you switch                                 broadcast to false so that doesn't go to                                 absolutely everybody that just goes to                                 specific channels and then you just                                 specify what channel and it's going to                                 be routed to the appropriate users                                 and no Jas itself provides user                                 underscore user ID right right so the                                 nodejs module is basically a suite of                                 modules some of them are in more or less                                 state of repair and some of them                                 initially were written so I had                                 something that consumed the API so I                                 could kind of get a get the hang of it                                 and make sure it wasn't completely                                 stupid so but the the core module is                                 really meant to be plumbing it's really                                 just kind of something for you to use it                                 really doesn't do very much out of the                                 box and the suite of other modules that                                 come with it do more things like la to                                 subscribe to a node and various other                                 simple things there's a module which                                 will update your watchdog for you in                                 real time that marks on a bum wrote and                                 other things like that that just provide                                 added sugar and most of what they do is                                 just consume the API that it doesn't do                                 any of the plumbing a one last thing to                                 point out here as I mentioned you can                                 send structured data through so that'll                                 show up in in your call back as a                                 JavaScript object with keys something                                 and something else and then foo and bar                                 so we're going to have a demo but before                                 that just wanted to talk to you guys                                 about sort of where where the module                                 stands right now and what's coming soon                                 version                                                                 ready but it is right around the corner                                 we're on beta                                                          we've actually had a google Summer of                                 Code student working on integrating                                 chatter and Drupal                                                    module that he maintained before with no                                 Jess and obviously it spins down was a                                 couple of days ago so we'll be wrapping                                 up that with him and he's got a separate                                 branch and it's not really until we can                                 pull that in and integrate it both in                                 the chat room and ogs that we can start                                 to really get down to a one point oh                                 yeah                                 right and the other thing actually in a                                 you know and if people want to comment                                 in discussion if anyone actually uses                                 chat room in Drupal                                                     that's going through my mind is I kind                                 of like to drop all lamp support from                                 chapter so you know it doesn't really                                 provide a back-end that handles all the                                 persistent connections in Drupal you                                 have to plug it into something else now                                 I'm not set on that yet and I'd be                                 interested in what people think because                                 the way that you write code when you                                 have to do polling and the way that you                                 write code when you can just rely on                                 stuff to come to you when you need it is                                 quite different and there's a huge                                 amount of code in chat room which is                                 just a hack straight perform attack and                                 I'd really love to just throw it away                                 but on the other hand if there's a whole                                 lot of users that go no no no we                                 actually still want to use it even if it                                 can only handle                                                          might change your mind so I'm interested                                 in what in what people think so new                                 features this is one I've been pushing                                 and working on a little bit content                                 channels it started as per page channels                                 so when you authenticate you get added                                 to the set of channels that you're that                                 you should be subscribed to but then                                 what if i want to send messages out to                                 update a specific page what if our                                 dashboard just needs live updates and if                                 you're not on the dashboard i don't want                                 to send you live updates or what about                                 if you're looking at a node i don't want                                 to just add you to every single node you                                 ever look at so how do I make sure that                                 whatever node you are looking at is the                                 one that we update and only that one                                 content channels is the answer so right                                 now you stay connected to that channel                                 until you have been kicked or you log                                 out content channels are going to be /                                 socket connection channels so when I                                 load a page and I connect i can add you                                 to so when when you view the content i'm                                 interested in i can add you to a /                                 / socket connection channel and then                                 when that sock and connect socket                                 connection closes by your browser                                 closing or quitting or clicking a link                                 and going to another page that doesn't                                 persist this is going to enable views                                 integration although if anybody's                                 actually thinking through how that would                                 work it's going to be a little bit                                 tricky and it's probably going to be                                 kind of on the order of something like                                 views content cash or views cash actions                                 where you have to sort of manually                                 configure the rules that are going to                                 cause that view to be entirely rebuilt                                 and sent back down and one thing that                                 we've just started sorting out is how to                                 do generic entity updating so if I'm                                 just viewing e note or a user or a                                 comment how do i update that in line                                 without refreshing the browser so that                                 you can get live updates across                                 everything not quite Google Docs I'm                                 editing in your editing too but at least                                 if I'm viewing and somebody else is                                 editing it doesn't blow up i got bit by                                 that in a meeting recently when we were                                 sitting in there and it's like but                                 that's i just copied that from the node                                 and somebody else said well i've just                                 added a bit i didn't refresh which is                                 what got me thinking like we should just                                 be able to just do that and there's no                                 reason we can't with the drupal.org                                 sorry with the nodejs modules plumbing                                 and I guess part of the point here an                                 underlying assumption is fat clients and                                 people who might want to move towards                                 shoving down a page and basically                                 expecting someone to be on that page for                                 tens of minutes half an hour an hour                                 longer and then you want to register you                                 know it's not a page it's a piece of                                 content and as far as nodes concerned                                 it's just a hash that identifies it                                 really and it says uses the channel and                                 they're just associated with a socket                                 and cleaned up if you do refresh the                                 page there's not going to be of much use                                 to people who are expecting their users                                 to just do a sort of normal flow through                                 a site and cycle through pages and open                                 up and destroy and open up and destroy                                 sockets quite regularly but if you do                                 want to build a fat client and sort of                                 hone down to just arbitrary pieces of                                 content on the page and whether or not                                 they're visible and send down updates                                 that's what this is about                                 and your module here so the whole idea                                 is we're talking about how nodejs is                                 just a bunch of plumbing I'm really                                 hoping to see other people start                                 chipping in on and using it and building                                 stuff out so next a quick demo how are                                 we doing on time when are we out of time                                                                                       many people can see these all right                                 so we put together a quick demo just                                 showing sort of the chat module kind of                                 hack together with some stuff that's not                                 totally ready although all this code is                                 out there in the drupalcon London                                 branches of chat room and nodejs on                                 drupal.org so here Justin's logged in in                                 one browser and I'm logged in in another                                 browser if I click chat chat pops up                                 with Justin                                 so the point of that is just it's                                 there's no polling there's no refreshing                                 chat room just creates a channel / chat                                 and subscribes you and we just                                 shamelessly stole ideas from other                                 modules on drupal.org and Facebook to                                 just put this together but this whole                                 thing took us about I don't know maybe                                                                                                      hard and I'm hoping that other people                                 can do whatever they like in terms of                                 better front ends than this well and to                                 be fair that                                                       fighting with stuff in the chat much old                                 stuff in the chat room module and                                 working on some of this like gaming                                 stuff the actual nodejs part wasn't that                                 involved and a big thanks to Dave my                                 business but I'm sitting down there who                                 helped really helped us with making it                                 not look like us but I'm really again in                                 writing this it's just so clear that the                                 way you would do this sort of thing                                 where you can just rely on push is just                                 so different and when you don't rapala                                 so again you know yell if you still want                                 polling because I'm quite tempted to                                 just rip it out a chat room and assume                                 that you have a back-end that doesn't                                 suck                                 oh one other thing we didn't even                                 mention this is using is the nodejs has                                 a presence API so you can essentially                                 right now it's kind of directly                                 connected to one particular                                 implementation but it's going to be a                                 generic thing so that you can so that                                 you can sort of have a buddy's list                                 identified and then when those buddies                                 become become present and when they                                 login and logout they will appear and                                 disappear from your list over here so                                 one of the challenges with buddy lists                                 in Drupal is you know which one do you                                 want to use how many of them work etc                                 and I really don't want the no guess                                 sort of implementations here to care                                 about how you decide who your friends                                 are so this is just a hack around flag                                 and flag friend and that's how we decide                                 who your buddies are and who they are                                 and who will you know appear in that                                 list but I'm hoping to make it more of                                 something like you know real buddy list                                 modules or organic groups or whatever                                 can just implement a hook and tell the                                 node.js buddylist module about who are                                 their friends in terms of the the server                                 side stuff with no Jas it's a very low                                 level it doesn't it just simply gets                                 messages again from Drupal saying okay                                 Who am I allowed to see presents                                 notifications for again all of that is                                 controlled strictly by drupal and module                                 code and whenever someone who is in the                                 list of people you're allowed to see                                 comes online or offline a message is                                 sent that's it it doesn't have anything                                 except what the presence no event was so                                 it's really hopefully just going to                                 enable other modules to actually do                                 something with that and this is just                                 something we whipped up quickly but                                 again I'm hoping people will integrate                                 things like organic groups or whatever                                 and whatever people can do in Drupal you                                 can link in with this and push                                 notifications out                                 yeah probably yes                                 yes do we want to take questions just                                 going to say so we've got enough time                                 for some questions we've got some mics                                 here i can see you go down the front                                 he's got questions                                 hello is that working is it possible to                                 a cue a message from one Drupal site and                                 have it pushed to another site so maybe                                 a central monitoring site that                                 aggregates messages right you could do                                 that but once something we ever actually                                 haven't talked about a lot just to try                                 and keep this down to time is the                                 concept of like an open persistent                                 connection and all the work for that is                                 done for us by socket i/o because you                                 can just drop some javascript in the                                 client and they'll connect and keep the                                 can it keep that open if you would have                                 to Drupal sites and some event happened                                 and you want to send a message you                                 probably don't need to have a like a                                 persistent connection between the two                                 you can probably just fire something off                                 and also actually I don't know if there                                 are any PHP like implementations of like                                 software iOS protocol and they would                                 probably suck Phil PHP so yeah I'm not                                 sure whether you would do that you could                                 as long as like the thing that's                                 connecting to the know Jas server can                                 authenticate and can you know implement                                 socket i/o protocol so it can just keep                                 it open then you could do whatever you                                 like in this case it just happens to be                                 web browsers because we get that for                                 free if the socket i/o will use web                                 sockets a flash socket or it'll even                                 fail over to xhr multi-part or long                                 polling I think so basically right only                                 only certain browsers support web                                 sockets socket i/o provides all the                                 plumbing and all the necessary stuff to                                 just make it magically work across an                                 amazing number of browsers I mean I                                 think it even works with ie                                          just practically works everywhere mobile                                 as well and so I think if you're saying                                  get messages from one Drupal site to                                  another Drupal site I'm not sure the                                  question is sort of like what are you                                  optimizing for I don't think having to                                  node J having a node.js server on the                                  other side is really going to help                                  because you're still still dealing with                                  a bootstrap on either side                                  so yeah you met her something                                  lightweight in the middle but you're                                  still doing dealing something heavy and                                  either end but you probably want there                                  is a message queue they collect all                                  those messages so they can be processed                                  processed when the resources are                                  available use case I'm thinking of is                                  it's got a hundred sites running but you                                  but it's difficult to look across them                                  to see what's going on the watchdog and                                  you're a watchdog cook you could fire a                                  message and have a central site and you                                  can filter down by severity or message                                  type or site and but see them coming                                  through life that's the kind of idea I                                  had in mind right right so right then                                  that makes sense and and again there's                                  already a sort of fairly simple                                  implementation based around Drupal's                                  core database logging messages I think                                  what you'd really want there is you                                  would sort out your backends to talk to                                  your you know collection server and then                                  again though it really comes down to the                                  real time part is your browser with a                                  with a socket connection open to that                                  one collection site and that would be a                                  really good use case in in fact some of                                  the stuff that house working on with no                                  jess is based around dashboards that                                  need to get updated from all sorts of                                  different data sources would it be                                  possible to use no jss a reverse proxy                                  instead of varnish just the stacking up                                  the contents in memory of basically it                                  certainly would be possible but probably                                  not worth your while in terms of trade                                  off unless you wanted to do something                                  that you couldn't do in vcl so basically                                  what no jess has over varnish is just                                  you can do crazy stuff in terms of what                                  you want how do you want to react to                                  requests etc so it's way more powerful                                  than varnish but if you were to put them                                  side by side in just pure performance I                                  would expect varnish as a reverse proxy                                  to outperform no Jess you have any idea                                  how much of an art performance we're                                  talking about here nope the nodejs guys                                  are some really the node Jitsu guys                                  which are some really high profile guys                                  in the node.js community are working on                                  just that they have built an oj s proxy                                  but it doesn't do reverse proxy                                  ashing it doesn't do the caching part                                  but otherwise it can behave as a sort of                                  central point of load balance and do all                                  that stuff they were kicking around the                                  idea of using memcache as a data store                                  so that you could do that sort of thing                                  they were saying that their initial                                  experiments with it the heap got too big                                  and pain happened no jeaious doesn't the                                  default setting for v                                                    to only be able to consume a gigabyte I                                  think so that's going to put a limit in                                  addition to whatever your application                                  logic is and stuff so they were talking                                  about doing that but then you have                                  another HTTP request that's hitting                                  memcache before you can serve the                                  content back out so you could do it but                                  I'm not sure it'd be a good idea the                                  benefit there is it you could get around                                  some edge cases that can cause problems                                  with cross domain requests if you have                                  your nodejs server running on a                                  different port in our experience it's                                  usually not a problem because flash                                  sockets totally make that go away and                                  the WebSocket implementations on mobile                                  seem to not care that much about hitting                                  a different port or a different domain                                  but that was the use case they were                                  looking at is we can proxy it so that                                  you can have Drupal sitting behind it                                  and also no Jas sitting behind it on the                                  same server and the same port                                  I just wanted to ask about the security                                  side of how do you secure it how do you                                  test against sort of cross-site                                  scripting and you know the general                                  hacking scenario is there any                                  documentation on how to secure it or how                                  secure it is or how to you know the                                  white hat so hacking side of it                                  right to be honest documentation on                                  securing it not really documentation on                                  any of this not so much oh well there's                                  documentation in the settings file turn                                  you at each speech thing is we actually                                  had talked about shutting down I don't                                  know if you can pull up the diagram                                  between that's got the triangle not                                  letting you run unless you are securing                                  the connection between node and Drupal                                  with with like a North key like a shared                                  secret I guess most people would                                  probably do that the network layer                                  though because that's just kind of a                                  back channel between two servers but if                                  you can't do that you can use you know                                  you can use the shared secret in terms                                  of like XSS and all that sort of stuff                                  that's not really I don't know FSS is                                  not so much an issue one thing it does                                  do is it does derive the auth token from                                  the session cookie and at least in                                  Drupal you can't get at a session cookie                                  from JavaScript it's HTTP only whereas                                  the what they ought oken that we send                                  down to send backup is obviously                                  explicitly available to JavaScript but                                  it's pretty short-lived and you can't                                  use it to unless you can reverse                                  engineer and get back the session for                                  you can't use it to access like drupal                                  as with the session cookie i'm not sure                                  what else to say i mean it's pretty the                                  basic idea in terms of security is that                                  anything that comes up from here to node                                  unless we bought you know like off to                                  you just get dropped on the floor so                                  that's that's the basic market texture                                  in terms of securing it yeah I mean and                                  if the so all you could do since the                                  default behavior is for nodejs to only                                  accept messages coming from Drupal all                                  you could do is hear messages on another                                  channel and again this process the the                                  token generated to send down is                                  different from the session cookie and I                                  think it's hashed with the time or                                  something no I guess it wouldn't be that                                  wouldn't work yeah so I guess you could                                  replay it well it would only be good for                                  your authentication for your Drupal                                  session now because it's derived from                                  the session cookie so connect so i guess                                  the risk would be someone else connects                                  on your behalf to know DJ s they'd have                                  to they'd have to sniff it out of your                                  browser and use it before you logged out                                  the risk is probably pretty low and i'm                                  not sure we can make it any better than                                  that if they could do that they could                                  probably use your drupal session and log                                  in as you and there they could do more                                  than just receive messages presumably so                                  it doesn't seem like a big concern to me                                  but maybe we should document that better                                  think about if we can make it stronger                                  in any way did that kind of you a                                  question always                                  okay yeah how one question on                                  scalability would it be possible to run                                  multiple instances of know Gia's                                  concurrently in one site or is there any                                  ceiling and performance you're bound to                                  it we've talked about it so so that's a                                  good question it's a very good question                                  um lots of trade-offs here and right now                                  out of the box if you can't fit it in                                  one process then you're kind of a de                                  luck with the current side of the module                                  basically it's just what you can fit in                                  memory and in that node process and                                  that's it so to be honest I haven't                                  tried to find out what the maximum                                  number is I know that it's in the                                  thousands and beyond that but I don't                                  know where the top is based on the                                  benchmarks I've seen on other nodejs                                  apps my guess is it's in the tens of                                  thousands for most for most servers I                                  mean it's gonna find out how much RAM                                  you have available but my guess is that                                  before you hit the one gig limit you'd                                  be in the tens of thousands but nobody's                                  tried it well well I haven't I know I                                  can say it's in the thousands because I                                  like tested that but that's it beyond                                  that I don't know the the basic                                  trade-off there is like to state so                                  state is really easy when you go to                                  single process the bookkeeping is all                                  just in memory in that one process end                                  of story if you want to share things                                  like the authentication the fact that I                                  off to you and you want to make it so                                  that you're not tied to any one                                  particular node js process that states                                  got to live somewhere so that adds                                  complexity and slows it down because                                  nothing's as quick as just looking up                                  something in memory it's kind of for                                  later because frankly no one I don't                                  actually don't know how many people are                                  using this and no one has come and said                                  I've we hit                                                              if that starts happening a lot then we                                  can look at trying to route and look at                                  trying to share the state so that                                  different processes can give access to                                  it                                  are you finished thanks everyone
YouTube URL: https://www.youtube.com/watch?v=GOAVn4ntoPs


