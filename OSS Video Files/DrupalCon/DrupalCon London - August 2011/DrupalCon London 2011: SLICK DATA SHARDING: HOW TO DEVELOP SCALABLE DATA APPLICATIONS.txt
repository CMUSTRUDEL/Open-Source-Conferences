Title: DrupalCon London 2011: SLICK DATA SHARDING: HOW TO DEVELOP SCALABLE DATA APPLICATIONS
Publication date: 2013-03-23
Playlist: DrupalCon London - August 2011
Description: 
	Presented by
Tobby Hagler
High-traffic websites that capture a lot of data from users often encounter performance problems when database input becomes a bottleneck. High volume user-submitted content (comments, ratings, form submissions, etc.) is typically stored in a single (master) database, and this creates problems not only for scale but also for replication and useful backups. It becomes important to be able to write these sorts of things to other secondary storage locations. I'll cover how to successfully write to different databases (MySQL and MongoDB) while still use Drupal's APIs and to cover pitfalls and successes.

In addition to scalability, data sharding provides other capabilities. Applications may be developed using Node.js or with other technology, but still needs access to the same data. With smart data sharding, this becomes possible and even easy.

Intended audience
Developers looking to build large-volume sites who haven't built massive-scale sites before. Developers looking to build complex applications that need to integrate with Drupal, but won't necessarily need to be in Drupal.

Questions answered by this session
What is data sharding, and how does it apply to Drupal sites?

Why MongoDB and how can I use it?

How can I use a secondary MySQL database (or database cluster)?

But Drupal's APIs give me what functionality I need. How can I do all of this without reinventing the wheel?

Besides scale, what other advantages do these techniques have?
Captions: 
	                              alright I'm going to go ahead and get                               started so today's talk is going to be                               talking about data sharding specifically                               how to develop scalable data                               applications with Drupal so everybody                               kazini my name is Toby Hagler i'm a                               senior web developer at phase two                               technology it's a drupal shop based out                               of just outside of DC so one thing I do                                want to remind everybody the official                                group of Colin London party the Betman                                live world arena tour is the buses were                                leaving outside of fairfield halls here                                sharply at four o'clock so I'll make                                this fast that way everybody get to the                                bus so what I'm going to go over today                                i'm gonna i'm going to talk about first                                of all reasons that you may have for                                sharding data i'm going to talk about                                problems that you might have I'm going                                to go over a couple of use cases that                                are fairly generic enough that maybe                                they can apply to you I'm going to                                actually talk about the the types of                                scaling and sharding I'm going to kind                                of give you the how the the what of                                horizontal and vertical partitioning and                                Federation and kind of give you some of                                the options that you have while sharding                                data and Drupal so first first and                                foremost you're here because you want to                                talk about sharding specifically for                                scale so I want to talk a little bit                                about the differences between horizontal                                and vertical scaling and just by show of                                hands is it is anyone here familiar with                                the difference between horizontal and                                vertical okay good good number of folks                                so the short answer is horizontal scale                                you're going out horizontally it's it's                                real easy to just add more machines                                think of a load balanced environment                                you've got a load balancer and three web                                machines behind it you need more                                horsepower you can just add a fourth and                                a fifth and an nth web server behind it                                vertical vertical scale is just making                                the machine bigger and stronger adding                                more memory adding more capacity adding                                more resources to the same machine the                                downside is with horizontal scale you                                face costs it's it's more costly to                                create more machines to instantiate more                                more cloud servers with vertical scaling                                no matter how much memory how many have                                any more cpus you put in that machine                                you're going to hit a wall at some point                                so sharding sharding helps with that so                                I'm going to talk a little bit about                                sharding what it is specifically the two                                main types of charting which is                                partitioning and Federation that's                                pretty much synonymous with horizontal                                and vertical sharding respectively so                                I'll talk about how it's how it helps                                and sort of the differences JEP think                                about when you're dealing with normally                                a monolithic Drupal database so what                                exactly is charting so simply put                                sharding is just breaking a whole thing                                into shards into smaller pieces so what                                would you do that well smaller pieces                                they're more manageable you can you can                                divvy them up into physical databases                                into separate databases the real trick                                is putting everything back together                                seamlessly so what are some of the                                reasons that you might have for shorting                                so obviously sharding to scale your                                application is really the first thing                                people think about when you think about                                shorting you you might share also much                                short because you're sharing data                                between multiple applications one of the                                use cases I'll talk about in a minute is                                dealing with resumes you're taking                                resumes from                                from your website you're taking that                                applicant data and you want to put that                                in a second database because your HR                                department might need access to that                                same database but does not need access                                to the database your website is too                                we're on and so it helps federated data                                in a lot of ways and then that way it                                also lets you leverage other                                technologies you your website does not                                have to be just Drupal your website can                                be Drupal for the content management                                 system nodejs for building Ajax                                 applications you might use other storage                                 technologies like MongoDB which I will                                 talk about later on so so those are some                                 of the reasons that you might charge so                                 so how does sharding actually help well                                 basically in a one-to-one with a slat                                 slide sharding is going to help it helps                                 scale your applications because it lets                                 you reduce the amount of data that's                                 stored in one place so one particular                                 type of sharding which is the most                                 difficult horizontal starting actually                                 lets you split every other row out of                                 the same tables and put those into                                 physical databases which is great                                 because your data set is smaller which                                 implicitly means that your index sizes                                 are smaller it means that replication is                                 going to be faster and it that's that's                                 how that helps with performance so in                                 the previous slide the reasons for                                 sharding shorting                                                     data so how how to starting help with                                 that well you can take secure sensitive                                 data like that that HR data personally                                 identifiable information taken from                                 resumes and isolate it somewhere else so                                 that you can have your website and you                                 can                                 to play at loosey-goosey with certain                                 permissions in order to have that that                                 content readily available on your                                 website but if you go through expensive                                 HTTPS layers to accept that data you                                 might have a different transit route for                                 storing this the sensitive data in a                                 more secure place also it just helps you                                 segregate your data into manageable                                 chunks that that's that's how you can                                 kind of leverage different technologies                                 you know but you know I'm not really                                 going to go into nodejs and the things                                 you can do with it but a lot of people                                 are interested in playing around with                                 that you might have a Python or a ruby                                 application that you you have that you                                 need to share data with so sharting your                                 data helped you segregate that out and                                 how it helps calyx go your applications                                 so before we get into sharding                                 specifically for performance gains I                                 want to make sure that we've covered                                 everything else that you want to do for                                 performance so first of all make sure                                 that you're using memcache d which you                                 think about it really is data sharding                                 you're splitting the data that normally                                 went into cash tables in my sequel                                 you're starting that and taking that and                                 putting into dedicated cache servers the                                 same may be actually be true with with                                 the boost module your your your kind of                                 shorting some of the responsibility of                                 displaying pages from Drupal to Apache                                 by creating                                 hard files with the booze module you                                 know kind of alluded to load balanced                                 web servers earlier my sequel master                                 slave replication Drupal                                             good about letting you march certain                                 queries as being slaves safe so that                                 they will only go to the to the slave                                 freeing your master only                                              hopefully only for rights that helps                                 spread the load to your data and and one                                 thing people always forget about is also                                 once you've created a view to create to                                 display page to display blocks sometimes                                 it's a good idea for performance sake to                                 take the most complicated views you know                                 if you turn on the develop module it'll                                 show you which queries take the longest                                 and turn those into custom queries as                                 optimized as you can get them so you                                 want to do all these things before you                                 really consider sharding your data                                 assuming that accessing the data is                                 actually your your bottleneck in your                                 site's performance so those are the                                 highlights you know the four or five                                 things that people always tell you to do                                 to help scale your site there's a lot                                 more that you can try so for one thing                                 you can you can add more memory to your                                 website to your database server add more                                 cpus to your web servers remember memory                                 is cheap dbas or expensive so sometimes                                 it helps to just throw more memory at                                 the problem and maybe it'll go away for                                 a little while that's that's a perfect                                 example of vertical scalability things                                 like moving all your HD access into the                                 V host config so that Apache is not                                 having to parse that every time pacha                                 Tunes my sequel tunes you can go on and                                 on evaluate whether or not you need all                                 of those PHP libraries I mean show of                                 hands who actually needs the PDF                                 libraries that are that come with most                                 installations of PHP                                 maybe ten percent of us in the room have                                 really had to do anything with with PDF                                 load so you can recompile PHP                                 reconfigure PHP to be as bare bones as                                 possible to help with performance so                                 after you've track all of these things                                 once you've done you know the ninety                                 percent of the easy work we're going to                                 close the easy work to to make your site                                 scale your your web environment is                                 probably going to look something like                                 this so you've got your load balancer                                 you have n number of web servers doing                                 the horsepower crunching the PHP                                 displaying the content to the users you                                 may have a varnish server in between                                 load balancer that maybe your load                                 balancer but you might have a hardware                                 load balancer you may have varnish you                                 may have a CDN that's involved in here                                 somewhere kind of between the internet                                 and your load balancer you've got cache                                 servers you get multiple cache servers                                 because again memories teeth you've got                                 master slave replication creating                                 database clusters so this is a pretty                                 typical well balanced environment for                                 serving                                 high traffic drupal websites so after                                 you've done all that and you still think                                 you have performance problems related to                                 your data getting that data out you have                                 complicated data that you need to you                                 know do joins and things that you know                                 get get tied up in the database that                                 becomes a bottleneck then we want to                                 talk about charting so what are the                                 types of sharding is two primary                                 approaches to sharding your data                                 partitioning in Federation so                                 partitioning is is an example of that                                 horizontal part two horizontal scale                                 that we talked about earlier for you you                                 could just keep adding databases                                 horizontally next to each other these                                 are these are you know a basically in a                                 sibling relationship with each other                                 you're going to take a table for                                 instance the node table everybody's                                 familiar with it two horizontally                                 partition that table what you do is all                                 the even in IDs go to the first database                                 all the odd and ideas go to the second                                 so your database is now cut in half and                                 so you each each table now has half the                                 indexed size half the data size and                                 roughly half of the overhead involved                                 getting that data doubt that sounds like                                 a good approach but it's it's really the                                 hardest thing to do the benefits are                                 great though you have much smaller index                                 you can you can you have much faster                                 queries for the same amount of data on                                 the other hand Federation Federation                                 literally means just a ice creating a                                 set of things it's a little bit more                                 conceptually logical so that means                                 you're using logical divisions like                                 geography so you have a list of users                                 people who have submitted their resumes                                 you might break them into geographical                                 regions North America Europe Asia                                 something that's that's conceptually                                 logical rather than every other record                                 so it's it's much easier to deal with                                 federated sets it makes it a lot easier                                 to break those up across multiple                                 physical databases so that you're not                                 having to                                 to horizontally scale your your master                                 slave replication so also the the                                 difference is partitioning data you do                                 have problems if one database goes down                                 you've lost half your data the the other                                 thing with federating your data is since                                 the data tends to be very discreet and                                 atomic if that goes down your website is                                 still up you just don't have access to                                 that particular thing at a time so                                 people can read about your company they                                 just can't necessarily apply for a job                                 right now so this is the hard one so                                 we'll just kind of get it out of the way                                 because honestly if you have to do some                                 horizontal partitioning there may be                                 some other problems with the application                                 that you're actually developing whether                                 it's Drupal or with anything else but it                                 a discussion on charting is not complete                                 until you've talked about horizontal                                 partitioning so scaling your application                                 performance this this definitely will                                 help wearying data out of your database                                 make it faster because you're dealing                                 with smaller indexes and it's much more                                 it's leaner so you know you have a                                 distributed data load                                 you're you run into fewer resource                                 contentions when you when you're making                                 queries to your database you're making                                 half the queries essentially well half                                 plus one to be honest so quite honestly                                 horizontal partitioning is is the short                                 of last resort so it's important to note                                 that this is not the same as master                                 master replication so if you use my                                 sequels mmm for instance X great that                                 that really does help help a lot in it                                 that's actually still just a vertical                                 scaling because you can only do that so                                 long before you run into replication                                 contention in horizontal partitioning                                 you you your rows are going to be                                 divided among physical databases which                                 is great that the more you can spread                                 that out over different physical                                 databases the better it's going to                                 perform for you and if you can do that                                 indefinitely that's that's perfect                                 horizontal scale the downside is and                                 this is especially true when you're                                 dealing with this in Drupal it does                                 require custom database API so I'll show                                 you in a second how complicated this can                                 get quickly but you know                                 you can see that I was running out of                                 room to describe some of the some of the                                 caveat Stu running at dealing with even                                 in odd partitions but essentially the                                 way this is this is achieved in my                                 sequel just so everybody knows is in                                 every single table definition that has                                 an auto increment value you can auto                                 increment that value by some other                                 number than one so you know every every                                 node that gets inserted the node table                                 is auto infer mitad off of the last one                                 so you can auto increment that with a                                 different value you can auto increment                                 it by                                                                    auto increment offset so that's how you                                 could achieve even an odd table and then                                 you're essentially having to do round                                 robin querying to find data that you                                 need if you know the node ID you know                                 exactly which table to go to that's why                                 it's n divided by                                              of your performance because you're                                 almost half of the queries go to each                                 slightly more than half of the queries                                 go to each database so that all sounds                                 well and good but your your your web                                 cluster that was already getting kind of                                 complicated suddenly starts looking more                                 like this you'll notice that each web                                 server now has an additional API element                                 to it that's what that little thin blade                                 is sticking out of the side that that is                                 basically the traffic cop that says you                                 need to go to this database we need to                                 go to that database and for every single                                 master and slave that you have in your                                 primary database you have to have in                                 your secondary database your tables have                                 to be consistent across the board                                 because they are essentially mirror                                 images of each other structurally and                                 they just alternate data between them so                                 you know it sounds great in theory to                                 horizontally scale you know by shorting                                 between those databases but it does it                                 does get out of hand pretty quickly so                                 what I'm actually recommending man is                                 Federation so Federation federating                                 federated sharding it's still vertical                                 so you do still have a ceiling that                                 you'll eventually hit this helps you                                 essentially cut your data stop in half                                 and replant it somewhere else and                                 they'll eventually grow and hit that                                 ceiling and then you can cut that off                                 and stick it somewhere else it's also                                 perfect for when you're going to be                                 shorting                                                              have your website that needs access to                                 to you know user submitted data the HR                                 department needs access to that payroll                                 department might need access to that                                 same data so that's all in a separate                                 database from your website it's just                                 it's just helpful for manageability and                                 for security one example of security by                                 the way is that you can grant my sequel                                 permissions to do pretty much everything                                 you need to to to read write update                                 tables to your primary websites database                                 which is all well and good if that gets                                 lost because you have a backup to that                                 but nothing's ever actually revealed                                 that's that's dangerous and then you                                 have your resume database sitting                                 elsewhere with much stricter permissions                                 you only have permission to select for                                 instance essentially a read-only                                 database that way you might have a                                 different my sequel user that talks to                                 that database so that if one is                                 compromised you're not compromising                                 the whole so vertical scale database is                                 that first glance it looks similar to                                 the horizontally scaled databases except                                 you don't actually need the full                                 database cluster replicated every single                                 time in fact every single federated                                 database cluster that you deal with can                                 be different in this case we have the                                 primary my sequel master and slave in                                 the second instance we have a master in                                 a single slave the slave might actually                                 just be used to replicate data that is                                 used by an internal user that way that's                                 that data is read only they only have                                 read access to the database they can't                                 actually touch it a third instance might                                 be you use MongoDB couch some other                                 Oracle you might have an Oracle database                                 somewhere and so every every time you                                 federate your data to a new data cluster                                 it can be a completely different it                                 doesn't have to follow the same thing                                 every time and allows you to evolve your                                 data applications as your work                                 so that brings me to dealing with                                 appliquéd application shorting so it's                                 not just shorting data you can actually                                 do the same thing to your application to                                 your website by providing web services                                 you know software as a service is a big                                 thing essentially that's what this is is                                 charting the application as well so for                                 instance I'm sure most people have heard                                 of discuss the                                                        allows you to do commenting so you                                 decide that commenting on your site is                                 becoming too much of a resource hog in                                 terms of being able to serve content so                                 you switch to discuss or facebook                                 comments to provide the same                                 functionality on your site you're still                                 allowing users to to comment on your on                                 your content but you've offloaded that                                 to a separate a separate application                                 environment so you can do this to short                                 all sorts of components of your site you                                 think about with the content that's                                 distributed network with a CDN you can                                 use edge site includes to also pull in                                 specific pieces of your content so you                                 can actually be serving a static HTML                                 website and then your Drupal instance                                 for content management is specifically                                 to create just the ESI fragments that                                 are included in your static HTML website                                 that is served by Akamai or whoever so                                 I've used I see paid CDN if you use                                 varnish all of these things have edge                                 set includes in them and so Drupal in                                 this case is is pure content it's not                                 display of content it's just managing                                 the content creating those ESI fragments                                 that are included elsewhere                                 so those are some just basic examples of                                 application charting some other some                                 other sample use cases you know I've                                 talked to a bit about collecting resumes                                 with your existing sign and being able                                 to do something beyond just what's in                                 your moma website with that data also                                 building an ideation tool so users can                                 submit their ideas for your company to                                 consider for the next product and then                                 other users can vote up or down they can                                 comment on your ID on that users idea so                                 these are kind of two examples of                                 applications that you can shard from                                 your primary website so when you're                                 sharting resume data for instance and                                 i'll actually give some some some code                                 samples here in a minute and get to the                                 more technical explanations but in this                                 particular instance you're taking                                 resumes for a large corporation website                                 users going to submit the form that form                                 data that they submit is going to                                 somehow magically appear in the HR                                 Department's database they're going to                                 have access to it and then that way                                 you're not having to give admin access                                 to every single person that the company                                 you have the webmaster of the site                                 builder whoever the content editor                                 managing the website three or four                                 people have access to the website to                                 sensitive data at that point and then                                 the pertinent information that the HR                                 person actually would have an account                                 for is a need one anymore because they                                 use their internal data application to                                 talk to the data that you collected                                 through a different application that                                 would be the website so how would you do                                 that so a couple of different approaches                                 to sharding schema so you can use the                                 same physical database it does not have                                 to be in a separate database if you're                                 just interested in sharing data amongst                                 applications so you can you can use                                 database prefixing to talk to a                                 different schema or you can use                                 different physical databases you're                                 going to use you can still use all the                                 Drupal DB API such as DB right Drupal                                 right record to write a new road to the                                 database to updated row in the database                                 doesn't have to be the same physical                                 database that your website is using                                 which is pretty handy so when you're                                 dealing with database of prefixes it's                                 all set up in settings of PHP this is                                 not module code it's it's your drupal's                                 instance set up it's it's real simple                                 I'm sure everybody is familiar with my                                 sequels dot prefixing you can actually                                 reference a different database from the                                 one you're currently using by simply                                 referencing a select star from database                                 name                                 tablename and that's essentially what                                 you can do with prefix in the tables it                                 does require that the my sequel user                                 that your Drupal instance uses has                                 permissions to at least select from this                                 other schema so in in Drupal                                            something like this and in this                                 particular instance i think is taken out                                 of the the default settings PHP you can                                 in this case we're going to be sharing                                 all the pertinent users information                                 between drupal instances this is this is                                 actually a fairly common trick when                                 you're dealing with multi-site but you                                 want to share the same user base so it's                                 simply referencing the schema name dot                                 whatever in this case if you look at the                                 shared table sorry the shared schema the                                 tables actually wouldn't be prefixed                                 with anything as far as Drupal is                                 concerned it doesn't care it's just                                 going to assume okay you want me to talk                                 to this table that table happens to have                                 a schema prefix and it will talk to them                                 just fine so                                 in Drupal                                                            little bit more more complicated but the                                 idea is still the same your default                                 prefixing you can you can reference the                                 same user tables in fact and this is                                 just kind of an aside you can use a                                 Drupal                                                           instance share the pertinent user tables                                 between the two so that a user can log                                 into a Drupal                                                            into a separate Drupal                                              sharing these tables with with a couple                                 with a couple of caveats so so one is                                 the the user tables have to be updated                                 to be compatible with Drupal                                       password hashing scheme is a little bit                                 different and there's some other things                                 going on with sessions but once you've                                 modified the tables to be Drupal                                   compatible Drupal                                                    fine unless the the password has been                                 rehashed for drupal                                                   you should always log in on the Drupal                                   side and then redirect all users /                                 whatever on the Drupal                                               Drupal                                                                 logs in there as long as the domain                                 names are the same or similar as long as                                 the domain cookies are set so that                                 they're they're compatible then when you                                 log into the Drupal                                                     user tables you will be logged in on the                                                                                                  actually want to shard applications is                                 you want to take advantage of some of                                 the things that people                                                with new modules but you don't want to                                 upgrade your whole site so you can                                 create a site 'let so to speak and use                                 something like mod proxy to serve your                                 Drupal                                                             secretary                                 as if it was a multicenter so that                                 that's how you would handle if you                                 wanted to share the same physical                                 database but you want a different                                 different schemas now for true                                 performance gain you're probably when we                                 want to look at using different physical                                 databases so you can you can set up                                 connections in settings dot PHP in                                 Drupal                                                                 your module code as well DB said active                                 is the magic function that's going to                                 basically handle everything for you it                                 will switch which database connection is                                 being used you can still use all of the                                 Drupal API and then set your database                                 connection back to the original sites                                 connection the thing you really have to                                 watch out for that's why it's bulb you                                 will get burned while you're developing                                 this when you're doing schema caching                                 caching any kind of errors might trigger                                 an error cascade because if you have a                                 PHP error a PHP warning it tries to                                 write that to watch dog it's going to                                 say hey insert this into watchdog                                 watchdog table isn't there and then it                                 freaks out because it tries to write an                                 error which wants to write right thet to                                 watch dog and it's going to find that                                 that's not there and it's just going to                                 continually                                 they're so in Drupal                                                    as simple as this your DB URL that that                                 that can be a string in in most cases it                                 is a string it can also be an array it's                                 it's not very well-documented that's the                                 case but you can make that in a row now                                 these do have to be the exact same type                                 of databases so when you're doing this                                 if your primary database is must equal                                 all the secondary and tertiary databases                                 also have to be must equal you can't mix                                 poster as my sequel and different                                 different different things like that but                                 if you if you want to do that kind of                                 stuff that's when application sharding                                 actually comes in handy in Drupal                                       can you can specify the database                                 connection strings in Drupal                                          settings file and it's going to look                                 like this where one of the arrays is                                 default you can create multiple strings                                 and each connection can actually have                                 different table prefixing as well but in                                 this particular case this code could                                 just be used directly in your modules so                                 if you have if you have an application                                 that's seasonal if you're collecting you                                 know children's wish list for Santa                                 something that you're only going to run                                 for three months out of the year you                                 might just store this in module code                                 rather                                 trying to put this in settings on PHP to                                 keep connection over head down and it's                                 pretty much as simple as using drupal's                                 database object to add the additional                                 connection information then you can go                                 about your business switching the                                 database setting the the active database                                 execute your queries and switch back so                                 this this is pretty much all you have to                                 do once you've created your connection                                 strings you first want to load the                                 schema for the tables that you think                                 we're going to be writing to these are                                 the tables that you've defined in your                                 modules installed looks and in its not                                 explicitly required that you do drupal                                 get schema but trust me that's that's                                 what you want to do the reason for that                                 is when you when you use DB said active                                 and you connect to a new physical                                 database you're talking to it a                                 completely different database at this                                 point when you use something like drupal                                 write record and you say i'm writing                                 data to this table with this row of data                                 the first thing drupal write record is                                 going to do is look for the table                                 definition of the schema definition for                                 that table out of cash its first going                                 to look in code cash instead of code                                 cache then it's going to look in the                                 cash tables because we didn't load it                                 the first time it's not in static code                                 cache it's going to look for it in                                 various cash tables and it's going to                                 freak out because those cash tables                                 don't actually exist in your other                                 database it's going to say oh that's bad                                 I need to I need to make a I need a worn                                 my administrator about this so he's                                 going to look in the systems table to                                 find out where errors should go and the                                 system table is not going to be there                                 and so it's going to default to watch                                 dog and that's where you get that that                                 downhill slide of errors that                                 just ruin your day so that's why you                                 want to go ahead and load the schema                                 first that way it's it's detik code                                 cached you don't run into those problems                                 so you want to switch your database                                 execute your queries do it do it has to                                 be done and then immediately switch back                                 before you have to do anything else and                                 rupal you'll notice the second time we                                 don't actually pass out a parameter you                                 just it's going to assume default so                                 when you're saving data in another                                 database so so what are the advantages                                 really to switching database connections                                 in the first place so one is that you                                 can still use all the all of Drupal                                 schema definitions that come and install                                 modules you still have access to using                                 all of the database api's that everybody                                 knows and loves you know it lets you let                                 you deal with smaller databases for your                                 website which is great if you have                                 master slave replication it helps keep                                 master slave replication lag down so                                 that when you write something to the                                 database and you turn around and try to                                 read it in the next on the next page                                 load for instance it may or may not be                                 there because of replication lag so this                                 helps keep the lag down and just makes                                 things more manageable you have less                                 overhead in your database it's going to                                 help that perform a little bit better as                                 well so in the case of our resume use                                 case the resume is submitted via the                                 form on the website they've gone through                                 they filled everything out they've                                 uploaded their actual CV the resume                                 their word doc their PDAs whatever they                                 have the the submit function for that                                 form it takes the data it's already been                                 validated at this point and the submit                                 function is going to do that's where                                 that's where all of that                                 so it's going to load the schema it'll                                 connect to the HR instance of my sequel                                 it'll-it'll right or update the record                                 depending on if this is a new resume or                                 if they're just updating their thrilled                                 one and then immediately switch back and                                 that way you don't have to worry about                                 reports running you don't have to worry                                 about exporting that data the HR                                 Director whoever manages that sort of                                 thing immediately has all the updated                                 resume in their database right away so                                 not only are you not having to store                                 excess data in your website's database                                 the website itself doesn't need your HR                                 director has that information right away                                 it's also secure because it's not being                                 physically stored in the same database                                 as the rest of your website so if your                                 website gets owned they don't have                                 access to data outside that database                                 place that's the hope so so that that's                                 if you want to use my sequel there's                                 lots of other options you know you can                                 use you can use Oracle if you have some                                 legacy applications internal to to a                                 corporation and a lot of lots of folks                                 to use Oracle you can also use MongoDB                                 you can use CouchDB these are these are                                 no sequel databases and is anybody                                 familiar with no sequel good yeah it's a                                 lot of fun so essentially with what what                                 this means is it's it's it's schema                                 lists so there is no table definition                                 like you're used to in my sequel there                                 are no columns it's it's essentially                                 just you're shoving documents into the                                 database in the case of couch and                                 a few of the others they're stored in                                 bees on format which is a binary JSON                                 format                                 and you can query these things as if                                 you're parsing a JavaScript a JSON                                 object it's very JavaScript like syntax                                 which is one of the reasons why it plays                                 so well with no Jas which also has                                 JavaScript syntax MongoDB is very fast                                 it's it's it's it's significantly faster                                 reads than my sequel so if you're if                                 you're doing something with an                                 application like a navigation tool where                                 there will be occasional rights you know                                 somebody submits an idea or they vote on                                 an idea but most of the time people just                                 want to read the different ideas and see                                 see how their idea is coming along with                                 all the votes it's very fast because its                                 first of all it stored in a separate                                 database that's only doing that and it's                                 document based so you get everything                                 kind of all at once in a lot                                 databases well not specifically because                                 you're using databases but because                                 they're geared towards storing documents                                 the data tends to be very denormalized                                 in and I'll actually show you some                                 examples now if you actually want to                                 find out some more information about                                  for those of you who are in or                                 around London tengen the folks                                 that build MongoDB got a conference here                                 next month they actually do have several                                 Drupal related sessions so there's                                 there's some good going to be some good                                 cross over there so I unfortunately                                 can't make it but                                 should be pretty good so dealing with                                 mongodb and drupal there's a MongoDB                                 module it's been around for a little                                 while there's a d                                                     the Drupal                                                            good it's mature it has the basic                                 MongoDB API as well as modules to let                                 you store all your field content you can                                 store cash you can store sessions all                                 this data can go in database                                 rather than in the my sequel database so                                 things like fields that once you've                                 created the node once you've created                                 your content you're not really doing a                                 whole lot of riding to it so you want                                 that to be as read friendly as possible                                 so you store that in databases                                 it's going to be quicker to load those                                 fields you can also use the this module                                 to just create your own connections to                                 the database at any of the four                                 object levels that they have which the                                 four object levels that when you're                                 dealing with connections you have                                 the actual connection itself that's an                                 object you have the database connection                                 which is the equivalent of the schema in                                 my sequel you have the collection which                                 you could think of that as a table in my                                 sequel that's the collection of all of                                 those particular documents that would be                                 the entire collection of your resume is                                 the entire collection of your comments                                 the entire collection of your                                 of your idea in your ID a shin tool so                                 and then then you have the cursor object                                 which is the collection of results from                                 a query the PHP drivers for tend                                 to be very object oriented so if you're                                 very comfortable there it's good for                                 that so a sample database document                                 might actually look like this again it's                                 it's if you're familiar with JSON                                 there's no surprises here it is JSON                                 format it's technically it's B's on                                 binary stored                                 but this is a sample document that you                                 might have in munger database now say                                 this guy didn't have an existing title                                 he didn't fill out an address then that                                 information would just be not present in                                 the document for his resume and then                                 wearing using using the MongoDB module                                 you write in your module something that                                 would look like this this would get you                                 the collections object that you see here                                 that's a collection it's referring to a                                 collection and then applicant is the                                 actual cursor up that that you create                                 from that by finding from from the                                 applicants collection so just a real                                 brief intro to the syntax the first                                 array is I'm looking for user names                                 Smith or last name Smith's or named                                 Smith that has a social security number                                 that's a since it's just the number it's                                 just saying you know one or zero that                                 has put in a social security number say                                 that's all you're looking for in your in                                 your search and then just give me back                                 the first name in the last name that's                                 that's all what's going on in this query                                 so that's all well and good you can you                                 can write a custom module in Drupal that                                 might get back some of the results of                                 the resume you might have something                                 similar going on in the HR department                                 they have their desktop application or                                 some sort of internal intranet                                 application that might be done with                                 Drupal with open atrium or something                                 like that where you're you're getting                                 that resume data but here's here's the                                 interesting thing is you don't actually                                 have to get the data out with the drupal                                 module at all so has built into it                                 a very simple rest api so you can                                 actually if you're on the same domain                                 use ajax jquery whatever you're                                 comfortable with any kind of javascript                                 in the browser to make a JSON request an                                 AJAX request to the DB servers                                 itself hitting the rest interface and                                 actually being able to pull that data                                 out and you'll actually get json data if                                 you need something more complex you can                                 write your own you can also use sick                                 among goose which is it spits and Python                                 MongoDB rest is just an oj s                                 implementation that sits on top of the                                 sexual lives on the database                                 servers so in this case sharding has                                 helped you by creating a JavaScript                                 application that's fairly fairly static                                 it's it's static HTML at this point and                                 you're bypassing the web server entirely                                 once you've served that it'll page so                                 you can actually query the database is                                 your self from john through so for those                                 of you that aren't familiar with rest it                                 really is as simple as get making a                                 request to a specific ID to or to a                                 specific URL the first path that                                 ideation is the database ideas is the                                 collection of documents that revealing                                 with the second sample here is just                                 saying hey I want all of the comments                                 out of the ideation database whose                                 parent ID matches this                                                   blah that long ID so to do anything more                                 complicated you're likely going to need                                 a dedicated MongoDB rest interface but                                 you know check out check out stupid                                 Mongoose check out node the node J s                                 version they're both pretty good so                                 anyway that's enough about talking about                                  itself so talked earlier about                                 dealing with applications on separate                                 web tears so keep in mind that                                 application sharding is the same thing                                 as data charting once you've separated                                 the application for the application                                 lives it's having to talk to that data                                 in a different location anyway so where                                 do you write your data where you read                                 your data from is really inconsequential                                 in terms of your primary Drupal website                                 it doesn't have to be the same database                                 in fact you can have multiple Drupal                                 instances you can have a Drupal instance                                 that just manages your website you have                                 drupal instance that manages your                                 ideation tool for collecting new ideas                                 about products you have another Drupal                                 instance that does just collect resume                                  data and you whatever whatever other use                                  case you can think of you can actually                                  create a separate Drupal instance that's                                  very lightweight it's very lean and mean                                  and does just that one thing rather than                                  building another module having a                                  monolithic Drupal website that runs                                  everything so so how would you do that                                  you could use mod proxy that's very at                                  the very least to create a new path on                                  your primary Drupal website /                                  applications your whatever example.com /                                  applications is now actually a mod proxy                                  reference to this other web tier                                  entirely but to the user there is no                                  difference so the proxied web clusters                                  what what this light is called is just                                  an illustration of your original web                                  tier and you can you can these look                                  similar but the you can you can create                                  completely different web architectures                                  for everything outside of the load                                  balancer so you have your primary Drupal                                  website represented by the large cluster                                  on the left then you have your eurasian                                  tool your applications tool everything I                                  can be a separate web tier and all                                  serves out of                                  the out of the same website to the user                                  that they're actually charted in two                                  separate applications so in short that's                                  some of the different techniques that                                  you can use you take advantage of                                  charting does anybody have any questions                                  and they do that you want to see more of                                  or talk more about                                  okay that's a really really good                                  question and I thought about talking                                  about that oh yeah so so the question                                  was how would you hook that into using                                  vuze and some other some other real                                  common modules that's that is really                                  tricky so if you're if you're dealing                                  with my steeple data in a separate                                  schema in that very first instance where                                  it's a shared schema same physical                                  database very easy your table is going                                  to be prefixed with the Ansari the the                                  database information is going to be                                  prefixed with the table name so views is                                  not going to know any different it's                                  going to work identical to to how it was                                  all in the same same schema if it's in a                                  separate physical database that's where                                  you get a little tricky what you have to                                  do in that case is use the module that                                  actually manages talking to the separate                                  database that handles the DB said active                                  does the queries there and switches back                                  that module is also going to be                                  responsible for maintaining a                                  lightweight lookup table in your primary                                  Drupal database so in that case what you                                  would do is you create sort of a stub                                  table that contains just the very                                  minimal information for views to at                                  least see it and so if you're dealing in                                  Drupal                                                              handful of entities that that it will                                  know about you define the entities you                                  don't actually have to store the                                  information there so you've created the                                  definitions that views is going to be                                  aware of and then you can have                                  views alters whenever that view comes                                  along you can actually alter the results                                  from from the views query by injecting                                  the data from this other physical                                  database into that and you would take                                  basically the same approach if you're                                  doing this with MongoDB if you're if                                  you're using Oracle or any other thing                                  that you're storing data in it's                                  basically just you have to kind of                                  handle them in separate cases                                  okay i need any other question                                  yes but                                  okay so um the the question is yeah I                                  was talking about the the speed                                  performance of reads in MongoDB but I                                  didn't really talk about how it compares                                  when writing its MongoDB to minus people                                  um it's it's still a little bit faster                                  it's quite a bit faster and I don't have                                  numbers that's a really good question i                                  wish i'd thought about getting some                                  numbers for you on that in short MongoDB                                  rights still outperform rights for my                                  sequel for a couple of reasons one when                                  you're dealing in drupal most of your                                  rights actually occur over multiple                                  databases because your data is                                  normalized and so you're writing                                  multiple tables in MongoDB you've very                                  likely denormalized your data and so                                  you're writing to one document one time                                  so that's that's a little unfair to say                                  that mongodb is faster it's also because                                  your schema has made it so that your                                  rights will be faster but apples to                                  apples if you're writing the same sort                                  of documents mongodb rights do fairly                                  well as long as you have very few                                  indexes where my sequel regains ground                                  is when you're doing a lot of updates to                                  existing documents and you have a large                                  document set now with that said MongoDB                                  s threshold for what a large data set is                                  usually about four to five times bigger                                  than what my sequels large data set                                  might look like so in my sequel you                                  start to notice performance drops when                                  you hit you know one to two million rows                                  really start seeing degraded performance                                  with it's it's really since                                  everything tries to be done and men                                  it does as very little as possible to                                  write the disk so disk is usually freed                                  up so you don't have file i/o contention                                  mongodb you might get                                                   documents of the same type of document                                  that you can store my sequel before you                                  start seeing performance issues so                                  the did that really kind of answer the                                  question okay all right anything else                                  alright if you do think of more                                  questions here's my contact information                                  t Hagler phase                                                           follow us on twitter at phase two how to                                  actually don't have it on here but my                                  twitter is t hagler same as my email                                  address on my tobe ondeado and these                                  slides are going to be available on a                                  jewel approach calm which is phase twos                                  technology blog as well as the the                                  session page for this conference all                                  right thank
YouTube URL: https://www.youtube.com/watch?v=zPiGZKfKx7I


