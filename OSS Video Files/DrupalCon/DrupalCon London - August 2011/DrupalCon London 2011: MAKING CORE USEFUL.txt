Title: DrupalCon London 2011: MAKING CORE USEFUL
Publication date: 2013-03-23
Playlist: DrupalCon London - August 2011
Description: 
	Problem: 
As Drupal has grown and evolved, the complexity of the average Drupal site has skyrocketed. Heavy reliance on contributed APIs and addon modules have put most site building tasks on the opposite side of a "learning ledge" for new users.

Usability research has shown us quite a bit of low-hanging fruit, but a larger challenge remains: the limited feature set of Drupal Core, and the necessity of engaging with the immense Contrib landscape before building a "real" site. The inclusion of FieldAPI in Drupal 7 has dramatically improved some aspects of the problem, but the only polished mechanism for displaying content is a global "front page."

Users do not need infinite flexibility when building their first simple sites, but they need much better than this if Drupal is to be a useful tool. How can we balance the dueling needs of simplicity and flexibility? Should we pursue a feature-rich Core despite the presence of a well-stocked contrib ecosystem?

These are hard questions we must answer together.

Proposed solution: 
Regarding core functionality, several paths are open to us. One is to accept that Drupal Core cannot be used to build "real" web sites, that its primary purpose is to serve as a starting point for contrib-driven projects.

Another option is to begin the work of migrating the Views module and CTools into Drupal core. With those tools, custom core-only modules for many functions would be unnecessary. (Although much work would be needed to ensure that simple tasks for end users remained simple: building Views, as common as it is, is an 'advanced' activity.)

A final option is is to build focused pieces of key functionality into Drupal core. For example:

An optional listing page of teasers for each content type.
An optional sidebar block and RSS feed for each content type.
A 'View [type] content' access permission for each content type.
The ability to display children of a Book page as node teasers, rather than bulleted links.
While limited in scope, even these simple tools for displaying separate pools of content would give site builders a much richer palette while learning.
Captions: 
	                              so this is a slightly fuzzy topic it's a                               little a little less focused than we                               should required rush or we should                               require extra things go fight but I                               think hopefully it will spark some some                               interesting discussions that actually                               mesh pretty well with some of the things                               that we've just been talking about for                               the last half hour basically the more                                I've been the more I've been trying to                                work over the last year or so on trying                                to help trying to help the actual                                experience of people who are using                                Drupal I'm not like a UX person but both                                in terms of the client work that I've                                been doing and the things that I'm                                trying to now go back into the core                                development cycle and work on a lot of                                them are about what people can actually                                do with Drupal outside of just pure like                                development framework which is ironic                                because I was the guy who wanted to like                                you know trimmed Drupal down to a folder                                full of include files for a long time                                but I think one of the really really big                                challenges that we face is we start                                trying to polish these things and talk                                about improving what people can do with                                Drupal out of the box and what it is                                like for them is a bunch of trade-offs                                between features that we start                                recognizing would be very useful for                                these people or functional changes                                basically like stuff that lives at the                                product level like I am a person who                                wants to build websites i'm going to use                                drupal i have drupal and it is a product                                i build websites with awesome there are                                features i would like it to have those                                are features that we talked about                                implementing cck fields in core that                                kind of stuff is product features for                                people who are building stuff the                                problem is those add complexity for                                better or worse those kinds of things                                that we put in as benefits for people                                our code and they add complexity and we                                have to deal with that and the other                                issue at the bottom isn't competition                                with WordPress or Django or Joomla it's                                competition with our own contributed                                module ecosystem how do we deal with the                                fact that as we make core richer and                                better and smoother are we cannibalize                                accor you know how do we deal with that                                tug                                or like who here has heard that views in                                core would be awesome really okay there                                was at least like three people because                                there is a roomful of people in the                                Drupal world that out number is probably                                been like several thousand to one that                                want views in core but that complexity                                issue is a real killer for just taking                                views and jamming it into core I'm                                trying to figure out the best segue but                                I have a patch for Drupal core I'm                                working on it it's a feature that I                                think would be really cool it's a                                checkbox that you click and it adds a                                listing page per content type it's not                                views it's not complicated it's just                                like                                                                   you get a dedicated listing page with                                that piece of content and you get a                                dedicated sidebar block I really like it                                it's too hot line                                                       not views in core so the question is is                                why did I spend a year to two years                                talking about how we need to start                                ditching stuff like that and trim Drupal                                down to a developer framework and let                                this kind of stuff go off and thrive in                                install profiles and contributors why am                                I now trying to convince us to jam just                                one more feature in like all of the                                stuff that I do think it's a complexity                                problem well first I don't know how many                                people from the US are listening right                                now but has anybody here ever heard the                                phrase only Nixon can go to China yeah                                only someone who like is incredibly like                                aggressively like war monger II can                                really make peace with you know an enemy                                nation because otherwise they don't                                trust you so maybe only the guy who once                                Drupal to be trimmed down into a tiny                                little framework can surprise people                                enough to get them to commit as patch                                 that adds a feature just while they're                                 confused maybe that's my plan but                                 there's something deeper than just me                                 trying to fake everybody out so I could                                 get a patch committed ultimately I've                                 come                                 to accept that the small one of the                                 original dominant concepts of the small                                 core discussion trim Drupal down to a                                 framework so that it's easier to manage                                 easier to develop and install profiles                                 spring up in a magical world full of                                 ponies to fill product requirements                                 that's fundamentally a non-starter one                                 of the reasons is we don't have a good                                 track record of ripping stuff out and                                 then people who care just arrived and                                 build-up user-focused products that's                                 that's a fantasy scenario I want it to                                 be the case but ultimately unless we                                 figure out how it is how to start                                 cultivating and building those things                                 and then start spinning off the crap                                 that we don't like to maintain it's just                                 going to be us killing features and it                                 becoming harder and harder for people                                 who aren't wanting to use Django in PHP                                 with more arrays people who actually                                 want to build websites are going to                                 suffer very very badly so the question                                 is is if small core is a non-starter and                                 we want people to have a useful product                                 in the form of Drupal core you know if                                 we want Drupal core to be something that                                 someone can download and do cool stuff                                 with and be engaged by why add new                                 features to it because it really sucks                                 as a product until you start adding                                 contribute I don't like saying that                                 maybe a little but not a lot Drupal core                                 is the world's most complicated blog                                 with forums that's a problem now anybody                                 who gets into the community for more                                 than like a week or so has the aha                                 moment and realizes oh you download                                 views and there are these three favorite                                 modules that the person who was talking                                 to me about said I should download and                                 they start that ball rolling and                                 suddenly they realize there's this                                 awesome framework and they're going to                                 have to get to books to learn how to use                                 views and stuff like that but you know                                 ultimately there's this aha moment and                                 they start building out the toolkit that                                 we all kind of                                 really consider real Drupal that you                                 start building with but we know that                                 it's a commits a complexity non-starter                                 to just dump all of that stuff into core                                 and say hooray cores now six times                                 bigger but it also comes with views and                                 panels so you can do all kinds of crazy                                 stuff but it's also a non-starter to                                 just chop stuff off and say someone else                                 will solve that problem if someone                                 actually cares about you know and site                                 builders that's somebody else's problem                                 we're going to be refactoring our                                 includes folder again both of those                                 extremes are non-starters so the                                 question is how do we actually start                                 improving the core product to the point                                 where we have some sort of on ramp into                                 using and building Drupal without just                                 opening the floodgates again for                                    bajillion oh I would really like this                                 feature kinds of patches or oh I'll bet                                 end users would really like this so I'll                                 put it in that's a problem I totally                                 ignored my actual bullet points but I                                 think all of them I'm still willing to                                 stand by if somebody you know post to                                 flickr and flickr photo and tries to                                 hold me to them the idea is that we have                                 a lot of brick walls for people who                                 actually try to build sites using Drupal                                 core it's in it there anyone who hasn't                                 seen the Drupal learning curve cartoon                                 we laugh it's an uncomfortable laugh but                                 we laugh nevertheless and again the flip                                 side of that is those product features                                 things that smooth that builder                                 experience things that make it easy for                                 people to just get rolling those suck                                 because it means that core gets bigger                                 it gets more bloated and more complex                                 that's how we got pull module in the                                 first place and we've been trying to                                 figure out how to kill it ever since                                 shouldn't people just use views and you                                 know then if we start implementing                                 simple light views in core then we're in                                 a tremendously uncomfortable scenario                                 where we're essentially competing with                                 one of the single largest contributor                                 and we're duplicating work we're                                 possibly pissing somebody off who's                                 invested several years in it and then                                 we're forcing all the people who tie in                                 with existing API is to rewrite all                                 their stuff yet one more time for a new                                 core release because now they should tie                                 in with the core listing API or                                 something like that there's not a lot of                                 super easy wins in that scenario and one                                 of the other things that's important is                                 that as we start adding more and more                                 features fewer and fewer of the hard                                 core core devs who are in there trying                                 to make Drupal work as a piece of                                 software actually give a rip about                                 things like iteratively improving the                                 experience of adding a new piece of                                 conning a new content type if the system                                 works from a functional standpoint those                                 kind of iterative smoothing tasks that                                 are important that smoothing out of the                                 on-ramp for somebody who isn't a dev                                 that's a really big other person's itch                                 to scratch and that's actually perfectly                                 okay I mean it's guilt tripping everyone                                 into working on someone else's problems                                 isn't a long-term sustainable model so                                 just telling all of the overworked core                                 devs you really should care more about                                 my cheese monger who wants to make his                                 nine-page cheese website is probably not                                 great so those are all issues the big                                 choices we've got our you know a either                                 saying okay nevermind we are just a                                 framework we realize we don't like this                                 choice and we're just going to strip it                                 down and go back to the fantasy of                                 someone else will solve the problem                                 outside of core and contributing we and                                 jamming everything that anyone uses to                                 actually build Drupal sites into core                                 you know core becomes six times larger                                 but now the top                                                         so who wouldn't like that it's it's like                                 a cornucopia of crazy modules that's                                 probably not a great direction but I                                 mean it's one way we could just say the                                 goal is that someone should never have                                 to use contribs out a major site you                                 know you should be able to build out                                 anything other than like one of the top                                 ten thousand sites just using core                                 and another option is just we can just                                 keep sucking in that weird middle middle                                 zone where you can't actually build too                                 much with core but we still keep all of                                 the sort of half vestigial remnants of                                 when we were trying to clone slashdot in                                 like                                                                    want to jettison it because there's                                 people who still want it but we're not                                 really willing to actually make any new                                 concessions to those people for things                                 they've been starting to what to do                                 since like                                                            other one that I've been talking a lot                                 about is we treat it like one actual                                 downloadable product we're not like                                 kicking stuff to the curb and to saying                                 go play and you know go play and                                 contributes that's where Paul module                                 lives now have fun but we ship that                                 framework basically with install                                 profiles that can configure essentially                                 you know a sixty percent configured                                 website for a use case that it's an                                 on-ramp for someone essentially I can                                 say oh well I wanted to set up a                                 brochure where site for a small business                                 or something like that it's not like                                 we've added all of those contribs it's                                 not like we're trying to duplicate every                                 piece of functionality someone is going                                 to use on and eventually shipping site                                 but that that early on ramp you know                                 that first                                                         Drupal trying to figure out what the                                 heck is going on actually providing them                                 some pieces to work with to say oh okay                                 that's the kind of site I want I'll do                                 that but that actually requires features                                 because we come back to the problem of                                 you can't actually build out many of                                 those kinds of install profiles using                                 what you have with core I ended up                                 arriving that the listing feature that                                 we were talking about because I'm trying                                 to work on as install profile to go into                                 core that does a little bit more than                                 standard profile                                                    people built out test sites trying to                                 experiment with it and what they found                                 was if you can't list stuff you actually                                 can't build much which leaves you with                                 blog forum poll maybe tracker it's a                                 tough problem Lisa from the d                                     project and now the Prairie initiative                                 she's                                 really spearheading a lot of interesting                                 stuff has used a restaurant on allergy                                 what she said is that you know Drupal is                                 like a restaurant that you walk into and                                 instead of a menu the waiter walks up                                 and says we have every ingredient in the                                 universe tell the chef what you'd like                                 also you're probably going to need to                                 ask one of the other diners for a recipe                                 because they did some of that hard work                                 but you might want to change it do you                                 have any allergies I don't know that's                                 problematic that's daunting for somebody                                 who isn't really excited about that                                 specific experience and that's sort of                                 what like installing a fresh copy of                                 Drupal core and trying to come up to                                 speed on the what can I do with this                                 thing question feels like so the idea is                                 that putting new stuff in is kind of                                 inevitable we do it already but if we                                 start trying to shape questions about                                 what we're going to put into Drupal core                                 and we're informed by this issue of                                 trying to make that on-ramp experience                                 easier how can we use some basic                                 heuristics to determine what should go                                 in and what shouldn't go in so we can                                 avoid the pure floodgate of hey I know                                 someone who needed this feature so it                                 should go in now you know that that's a                                 death spiral but the first thing is                                 something that we've always kind of                                 agreed on pure framework II stuff pure                                 Drupal plumbing like you know database                                 the next generation or a caching layer                                 okay that goes into court that makes                                 sense there's never really been too much                                 argument about those kinds of things the                                 other one is and it there's a little                                 fuzziness around what really constitutes                                 can't live in contribs to be a part of                                 the baseline prata the baseline install                                 of Drupal for it to really work                                 effectively like language localization                                 you can't bolt that on to a system that                                 doesn't have it baked in to some degree                                 so it's got to live in core or at least                                 some percentage of it has to the other                                 one is stuff like just pure defining                                 features stuff that captures the essence                                 of                                 what is Drupal vs WordPress or cake or                                 something like that those features like                                 the fact that you can make content types                                 different kinds of them you can segment                                 your content and choose the fields for                                 them those kinds of fundamentally                                 defining features are very valid to say                                 this needs to go into core because it is                                 what is Drupal if you take that away you                                 essentially just have lots of arrays and                                 a request handler the final bullet point                                 is actually the trickiest one that's the                                 easiest for us to get super mired in and                                 that's super sexy stuff we just couldn't                                 resist putting in or we tricked someone                                 into putting in I'm pretty sure I've                                 actually tried that on drees once or                                 twice I do still actually owe him two                                 ponies that I promised in a blog post                                 once for for one of those commits it's                                 really hard especially if we're willing                                 to acknowledge the real genuine needs of                                 people coming in and using Drupal as you                                 know a site building product to avoid                                 those occasional like you know falling                                 off the wagon and we committed something                                 that we later regret but it was really                                 really cool yeah that's the stuff we                                 committed just because we couldn't help                                 ourselves or stuff stuff we pushed                                 through just because oh but it's so                                 yarny so the basic reason I'm trying to                                 I'm trying to get this conversation                                 going is so that we can start asking                                 ourselves beyond my haha I've got a                                 patch I would like it to be committed                                 you know I would but the deeper question                                 is why should it or should it not be                                 committed what are the heuristics we can                                 use as a community to determine whether                                 or not we're going to let something go                                 in and potentially increase that                                 complexity cost or not one of the things                                 that I think is important for us to                                 consider is how a piece of functionality                                 effects that like first four to eight                                 our experience of a person evaluating                                 Drupal this is not the same as we would                                 like a hypothetical completely non                                 technical person who should                                 really just be using a blog and you know                                 clicking through and adding you know                                 adding pages to her blog how can we make                                 them happy being a site builder I that's                                 not what I'm saying the issue is or                                 those people who would be site builders                                 who would maybe start going out there                                 and downloading views and downloading                                 panels or even say God help them you                                 know roll a custom module to do                                 something how do we smooth that first                                 four to eight hours in which they're                                 staring at from the front page of a                                 fresh Drupal site and saying oh so what                                 do I do now right now the answer is                                 congratulations start doing your schema                                 modeling yeah you can make puppet of                                 types of fields you know start                                 decomposing your problem set into                                 content types that's that's a hard sell                                 for that first four hours Lisa's                                 restaurant metaphor one of the things                                 that she said is very problematic is                                 that we don't give enough pay off in                                 that very very early part of the                                 evaluation curve for people to decide it                                 is worth my time to keep at this it                                 isn't that we have to deliver one                                 hundred percent of an end site function                                 to them when they click install it's                                 that we've got to do a little of this                                 negotiating dance with the person who's                                 staring at it and saying should I keep                                 at this or not and learning how to                                 decompose your problem into content                                 types and fields and now download vuze                                 so that you can list stuff that's a                                 really hard it's that learning ledge                                 horrible cartoon that's how that ledge                                 happens so beyond asking ourselves how                                 something affects the first four hours                                 well I mean the negative side of that is                                 also if someone would only really need                                 this functionality say two weeks into                                 the build-out or when they want to roll                                 it out well hopefully somebody who's                                 done that a bit of that dance with                                 Drupal and figured out they want to try                                 to continue building well we want to                                 start steering them towards the world of                                 contribs distinct ml sitemap module and                                 you know image galleries and stuff like                                 that in there it's the                                 we at least want them to get a little                                 farther on before we say have fun with                                 contribs start filtering your                                        modules the other question is can we                                 implement it simply in core both from a                                 code perspective because we're not                                 interested in just jamming you know                                     additional k of PHP and JavaScript and                                 stuff like that into core because that's                                 a problem it's not like core devs don't                                 have enough to deal with already and                                 also from a UX perspective if figuring                                 out how to implement a particular                                 feature means that you know we're going                                 to have like a five-person UX team tied                                 up for the next six months just trying                                 to figure out how could this be done in                                 a way that makes sense maybe that's a                                 problem not to try to solve in core                                 right now you know the this is that's                                 not an easy win thing that we can do to                                 smooth that run on ramp experience it's                                 a huge undertaking and we should at                                 least treat it as something very                                 different than we're adding a feature                                 the other question is can users grow out                                 of our on-ramp style feature and start                                 using more powerful tools in contribs of                                 iterating faster and trying out things                                 and basically just adding features and                                 experimenting at a pace that corridors                                 at the luxury of are we going to force                                 people to undo a bunch of stuff they did                                 during that I'm getting my legs under me                                 process with Drupal core when they                                 actually need to start using the more                                 powerful tools and contributing the                                 final the final question that I think we                                 can really look at here is also does                                 this thing in core now make life much                                 harder for the contributory vynn a                                 significant sub-portion of it by                                 implementing an easy win feature are we                                 now basically like building some goofy                                 addition on our house that means our                                 neighbor can no longer actually get into                                 his backyard this was a problem during                                 the very early phase of database the                                 next generation where Earl miles working                                 on views was suddenly faced with the                                 prospect that the entire views query                                 generator was going to have to be                                 rewritten from scratch and there was a                                 back-and-forth sort of dance that                                 occurred between the database the next                                 generation team and Earl and some                                 another group of people who ended up                                 jumping in and helping with that                                 relatively significant work but it's an                                 important consideration does this easy                                 win we're implementing now make it much                                 harder for the people evolving solutions                                 out and contribute to it does it's                                 absolutely a red flag and finally these                                 kinds of product level features things                                 that make life easy for people using                                 Drupal as a site building tool or                                 whatever they can't be driven by sitting                                 around and saying oh I've it would be                                 really cool if we need things like                                 actual product use cases and user                                 stories the kinds of things that like                                 product people and UX people and design                                 people and workflow oriented task                                 thinkers are actually talking about when                                 they think of product if we have a                                 product to build websites okay what are                                 the tasks involved in that that's where                                 we get our possible features that might                                 be useful not best from me really                                 wanting there to be a talk like a pirate                                 filter you know that's that's not a                                 product driven feature and this is one                                 of the reasons why I think having a                                 couple of targeted use case oriented                                 install profiles in core even if they                                 don't build out hugely complex sites                                 they give us use cases that we can ask                                 does a person building that kind of site                                 need this the president building that                                 kind of site need it if the answer that                                 is no for all of the different kinds of                                 use cases we've got maybe we just don't                                 need it in core if it turns out all of                                 them are hitting roadblocks and brick                                 walls when they try to build out sites                                 like this in that sort of early on ramp                                 phase of figuring Drupal out we should                                 think about it and that's how we ended                                 up coming to the coming to the                                 conclusion that there needs to be some                                 sort of basic way to list content                                 because everyone building out a simple                                 site with core hit the wall trying to                                 list stuff it appeals to the particular                                 use case we were trying to describe and                                 it was a big blocker during the very                                 earliest phases of trying to figure out                                 how to make things work so that's it                                 that's all I got everything else after                                 here I think we've still got like                                                                                                             questions                                 I think we okay                                 oh no I i don't i don't think so at all                                 yeah                                 and I think I'm a little conflicted                                 because that's what I vigorously                                 advocated for several years and                                 eventually became convinced that it was                                 a non-starter because if we start                                 pulling contribs into that main on-ramp                                 download essentially we are putting                                 views in core yeah                                 you
YouTube URL: https://www.youtube.com/watch?v=GO3RUpslrkk


