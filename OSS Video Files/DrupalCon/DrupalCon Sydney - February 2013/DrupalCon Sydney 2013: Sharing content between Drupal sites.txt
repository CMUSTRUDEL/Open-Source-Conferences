Title: DrupalCon Sydney 2013: Sharing content between Drupal sites
Publication date: 2013-03-29
Playlist: DrupalCon Sydney - February 2013
Description: 
	The media industry has a vast amount of historic and rich in meta data that can be re-purposed or exposed for greater value, even within the walls of a single firm. SBS, a firm with content in the hundreds of thousands, has built a network of Drupal websites that can share content at a click of a button.

This talk will discuss the architecture around how Drupal can communicate with a schema-less content repository, and how a Drupal site can manage the relationships of vast amounts of externally imported data. Open standards and simplicity are at the heart of the system, using common schemas, RESTful web services and open source frameworks.

Key technologies in this presentation are: Drupal, Symfony2.1, Doctrine, MongoDB, RESTful, JSON-LD, OpenCalais, Solr
Captions: 
	00:00:00,050 --> 00:00:09,480
five o'clock so i might start got lots

00:00:03,659 --> 00:00:12,690
to get through my name's my name's Taryn

00:00:09,480 --> 00:00:15,080
from SBS also here today I've got re

00:00:12,690 --> 00:00:18,029
Cohen who's been a fundamental part of

00:00:15,080 --> 00:00:19,619
number your hand up who's been a

00:00:18,029 --> 00:00:21,119
fundamental part of a lot of this work

00:00:19,619 --> 00:00:22,949
as well so if i don't get through

00:00:21,119 --> 00:00:26,400
everything he'll be available to at the

00:00:22,949 --> 00:00:28,199
end for lots of questions so a bit of a

00:00:26,400 --> 00:00:32,669
background on SBS mostly for the

00:00:28,199 --> 00:00:34,230
international comers are where a special

00:00:32,669 --> 00:00:36,600
broadcasting service for australia where

00:00:34,230 --> 00:00:38,010
a TV and radio station predominantly we

00:00:36,600 --> 00:00:41,219
offer multicultural and multilingual

00:00:38,010 --> 00:00:43,200
content for australians orphan

00:00:41,219 --> 00:00:45,840
australians for anyone in australia and

00:00:43,200 --> 00:00:47,399
we are government-funded about seventy

00:00:45,840 --> 00:00:49,500
percent of our money comes from the

00:00:47,399 --> 00:00:51,570
government and we're driven by a charter

00:00:49,500 --> 00:00:54,030
because of that so we have specific

00:00:51,570 --> 00:00:57,030
things that we need to meet for all of

00:00:54,030 --> 00:00:59,010
australia we are also a commercial

00:00:57,030 --> 00:01:03,149
station that's where our other thirty

00:00:59,010 --> 00:01:06,600
percent of money comes from SBS has a

00:01:03,149 --> 00:01:08,820
huge online presence it's relatively new

00:01:06,600 --> 00:01:11,130
it's been around five years the online

00:01:08,820 --> 00:01:13,920
department that is and had a lot of

00:01:11,130 --> 00:01:16,740
rapid growth in the last five years so

00:01:13,920 --> 00:01:18,689
we offer now over the five years a wide

00:01:16,740 --> 00:01:20,070
range of websites and applications you

00:01:18,689 --> 00:01:22,920
can get iphone apps through our news

00:01:20,070 --> 00:01:24,659
service we've got on demand TV available

00:01:22,920 --> 00:01:26,759
on pretty much all the mainstream

00:01:24,659 --> 00:01:28,560
devices set-top boxes you name it we

00:01:26,759 --> 00:01:30,950
were the first to Windows 8 for a

00:01:28,560 --> 00:01:35,220
catch-up service as well in Australia

00:01:30,950 --> 00:01:36,960
and just cleaning through these are just

00:01:35,220 --> 00:01:39,689
a couple of our main web sites like

00:01:36,960 --> 00:01:41,790
cycling our world news pretty much

00:01:39,689 --> 00:01:45,420
anything that's under the SBS com delay

00:01:41,790 --> 00:01:49,110
you banner is is our sites we have I

00:01:45,420 --> 00:01:53,009
would say maybe 10 main websites but up

00:01:49,110 --> 00:01:57,090
to 60 other sites that are related to TV

00:01:53,009 --> 00:01:58,770
shows that we air what runs our sites at

00:01:57,090 --> 00:02:00,750
the moment well it's actually not Drupal

00:01:58,770 --> 00:02:02,990
we have a bespoke CMS written in zend

00:02:00,750 --> 00:02:05,180
it's very hard and messy to maintain

00:02:02,990 --> 00:02:07,439
takes a long time to make changes

00:02:05,180 --> 00:02:09,720
especially when they network-wide let's

00:02:07,439 --> 00:02:11,370
say Facebook change is how they

00:02:09,720 --> 00:02:12,810
implement their share widget if we will

00:02:11,370 --> 00:02:13,850
actually change that on all of our

00:02:12,810 --> 00:02:16,340
websites it would take

00:02:13,850 --> 00:02:17,780
a long long time we also have no

00:02:16,340 --> 00:02:19,430
consistent look and feel over our

00:02:17,780 --> 00:02:21,950
current network so the decision was made

00:02:19,430 --> 00:02:30,710
that SBS needed a new platform and

00:02:21,950 --> 00:02:34,100
Drupal was chosen so as I said where's

00:02:30,710 --> 00:02:37,460
Drupal nowhere so our goals that we've

00:02:34,100 --> 00:02:40,280
set for us is that we want an easy to

00:02:37,460 --> 00:02:42,620
maintain and extend our sites especially

00:02:40,280 --> 00:02:49,970
from a developer point of view we also

00:02:42,620 --> 00:02:51,680
want a better user an editor experience

00:02:49,970 --> 00:02:55,370
our editorial experience in our current

00:02:51,680 --> 00:02:57,200
system is rubbish even editing a basic

00:02:55,370 --> 00:03:00,050
node is a better experience than our

00:02:57,200 --> 00:03:02,030
current one our users the work flow

00:03:00,050 --> 00:03:03,860
through our websites isn't as good as it

00:03:02,030 --> 00:03:06,230
could be as well we also want to be able

00:03:03,860 --> 00:03:07,880
to repurpose our content across all the

00:03:06,230 --> 00:03:09,740
network of our websites as I said we've

00:03:07,880 --> 00:03:11,840
got a lot of websites predominantly news

00:03:09,740 --> 00:03:13,880
articles and these news articles can

00:03:11,840 --> 00:03:16,460
appear in many locations across our

00:03:13,880 --> 00:03:18,200
network currently it's virtually copying

00:03:16,460 --> 00:03:22,100
and pasting and reuploading images it's

00:03:18,200 --> 00:03:23,750
not ideal we also want a goal as one of

00:03:22,100 --> 00:03:26,870
our goals is new ways to explore the

00:03:23,750 --> 00:03:29,300
content and we need rich metadata to

00:03:26,870 --> 00:03:30,800
back that up exploring the content not

00:03:29,300 --> 00:03:33,290
only from a user perspective but from

00:03:30,800 --> 00:03:36,200
internal in the office as well editorial

00:03:33,290 --> 00:03:38,090
they want to be able to find content

00:03:36,200 --> 00:03:39,890
really quickly if they need to repurpose

00:03:38,090 --> 00:03:43,240
it in let's say the news desk or

00:03:39,890 --> 00:03:46,730
something we also wanted sites that

00:03:43,240 --> 00:03:49,580
multi-device compatible and along with

00:03:46,730 --> 00:03:52,460
all this use more open standards and

00:03:49,580 --> 00:03:54,530
most of all a system that ends up being

00:03:52,460 --> 00:03:58,190
modular and decoupled unlike our current

00:03:54,530 --> 00:04:00,260
system and again Drupal screamed all of

00:03:58,190 --> 00:04:02,330
this but I'm not really here to talk

00:04:00,260 --> 00:04:04,520
about Drupal so much and why SVS has

00:04:02,330 --> 00:04:07,400
switched to Drupal it's more about the

00:04:04,520 --> 00:04:11,000
backend behind what our Drupal sites

00:04:07,400 --> 00:04:13,040
will be running so knowing that we have

00:04:11,000 --> 00:04:14,510
hundreds of thousands of articles we

00:04:13,040 --> 00:04:16,130
were trying to think well does this fit

00:04:14,510 --> 00:04:18,230
in one Drupal site or is it in many

00:04:16,130 --> 00:04:22,400
Drupal sites do we have one site that

00:04:18,230 --> 00:04:23,780
serves out all of it basically we said

00:04:22,400 --> 00:04:26,390
no we're not going to have one Drupal

00:04:23,780 --> 00:04:27,380
site it's too big of a site it's too

00:04:26,390 --> 00:04:29,060
much risk it's

00:04:27,380 --> 00:04:32,900
not decoupled and that's that's one of

00:04:29,060 --> 00:04:36,290
our goals Drupal multi-site yes we it is

00:04:32,900 --> 00:04:37,580
using Drupal multi-site but again raised

00:04:36,290 --> 00:04:41,840
this question of how do we share this

00:04:37,580 --> 00:04:43,610
content between all these sites so we've

00:04:41,840 --> 00:04:45,560
ended up using Drupal multi-site

00:04:43,610 --> 00:04:47,810
installs we've got a base installation

00:04:45,560 --> 00:04:49,250
profile that runs across it a lot of our

00:04:47,810 --> 00:04:51,350
components are the same across all of

00:04:49,250 --> 00:04:54,440
our websites or our new Drupal websites

00:04:51,350 --> 00:04:56,690
common modules editing interfaces even a

00:04:54,440 --> 00:04:59,510
common theme that all of our new Drupal

00:04:56,690 --> 00:05:02,060
sites will be using and then each sub or

00:04:59,510 --> 00:05:04,070
each site subsection of our SBS calm day

00:05:02,060 --> 00:05:06,740
you domain will have a extended theme

00:05:04,070 --> 00:05:08,510
with slight variations on the design has

00:05:06,740 --> 00:05:13,670
been a lot of work around the UX and D

00:05:08,510 --> 00:05:15,380
for the new platform we did evaluate

00:05:13,670 --> 00:05:16,910
some of the existing multi-site stuff

00:05:15,380 --> 00:05:19,460
out there so I looked at things like

00:05:16,910 --> 00:05:21,980
deploy the deploy model and just how it

00:05:19,460 --> 00:05:24,050
goes around pushing around content a few

00:05:21,980 --> 00:05:26,300
others that can do shared domain kind of

00:05:24,050 --> 00:05:28,040
stuff basically none of them could do

00:05:26,300 --> 00:05:29,720
what we actually want when it comes to

00:05:28,040 --> 00:05:30,920
sharing content around their work so we

00:05:29,720 --> 00:05:33,080
had to put our thinking caps on and come

00:05:30,920 --> 00:05:35,270
up with a method that can actually work

00:05:33,080 --> 00:05:37,100
for us and we discovered that we need

00:05:35,270 --> 00:05:39,260
two parts to the solution and it's not

00:05:37,100 --> 00:05:40,970
just Drupal but we needed Drupal as the

00:05:39,260 --> 00:05:44,630
website based platform but we also

00:05:40,970 --> 00:05:46,070
needed a common content repository so we

00:05:44,630 --> 00:05:48,020
went through the motions of finding out

00:05:46,070 --> 00:05:51,380
what is involved with the content

00:05:48,020 --> 00:05:54,470
repository and we found this great

00:05:51,380 --> 00:05:57,320
picture which is pretty much every

00:05:54,470 --> 00:05:58,370
content repository out there and all the

00:05:57,320 --> 00:06:01,130
different standards so you've got things

00:05:58,370 --> 00:06:03,770
like JC I've got sea mas you've got page

00:06:01,130 --> 00:06:06,130
PCR which is the PHP version of JC are

00:06:03,770 --> 00:06:09,500
your things like Midgard which are more

00:06:06,130 --> 00:06:11,420
see module based or PHP we could have

00:06:09,500 --> 00:06:12,890
used Drupal as the content repository as

00:06:11,420 --> 00:06:15,460
well and then you've got all these

00:06:12,890 --> 00:06:17,630
expensive proprietary products as well

00:06:15,460 --> 00:06:19,640
there were many to choose from so we had

00:06:17,630 --> 00:06:21,500
to come up with a list of you know how

00:06:19,640 --> 00:06:23,120
do we differentiate between them what do

00:06:21,500 --> 00:06:24,200
we need exactly from our content

00:06:23,120 --> 00:06:28,460
repository because they all offer

00:06:24,200 --> 00:06:30,350
something slightly different so I'll

00:06:28,460 --> 00:06:32,060
just step through this list that we more

00:06:30,350 --> 00:06:33,740
or less came up with and we started

00:06:32,060 --> 00:06:36,680
looking at things of like what does our

00:06:33,740 --> 00:06:39,470
content actually look at look like sorry

00:06:36,680 --> 00:06:40,849
it's you know how is it being stored

00:06:39,470 --> 00:06:42,889
what kind of content do we

00:06:40,849 --> 00:06:44,209
we've got articles but we've also got a

00:06:42,889 --> 00:06:46,879
food portal which has things like

00:06:44,209 --> 00:06:49,219
recipes and restaurant data that's not

00:06:46,879 --> 00:06:50,929
as straightforward then we've got you

00:06:49,219 --> 00:06:53,419
know scoring data on some of our other

00:06:50,929 --> 00:06:55,099
sports websites we've had to really

00:06:53,419 --> 00:06:57,919
think about how we can store this and

00:06:55,099 --> 00:06:59,059
repurpose it on other websites then we

00:06:57,919 --> 00:07:00,589
looked at things like well how does this

00:06:59,059 --> 00:07:03,409
actually get stored behind the scenes

00:07:00,589 --> 00:07:04,969
does it sit in a mysql database does it

00:07:03,409 --> 00:07:07,909
sit and this that takes me under the

00:07:04,969 --> 00:07:10,789
next point of is it in mysql is it you

00:07:07,909 --> 00:07:12,740
know tom cat running jcr what kind of

00:07:10,789 --> 00:07:14,839
architecture sits behind this content

00:07:12,740 --> 00:07:16,879
repository a lot of these solutions

00:07:14,839 --> 00:07:18,019
there'll be an application but then

00:07:16,879 --> 00:07:19,669
they'll just be this plethora of

00:07:18,019 --> 00:07:20,990
hardware and software that you've got to

00:07:19,669 --> 00:07:23,149
have behind it to actually be able to

00:07:20,990 --> 00:07:26,029
support it and it just seemed

00:07:23,149 --> 00:07:28,039
overwhelming and really shouldn't have

00:07:26,029 --> 00:07:32,089
been that hard when we really went

00:07:28,039 --> 00:07:33,559
started looking down that path then we

00:07:32,089 --> 00:07:36,379
had other questions of like well what

00:07:33,559 --> 00:07:38,990
content types exactly need to be stored

00:07:36,379 --> 00:07:41,809
and how is it going to shape them things

00:07:38,990 --> 00:07:43,490
like alfresco kind of you know they can

00:07:41,809 --> 00:07:45,409
store content in them admittedly there

00:07:43,490 --> 00:07:47,719
better for documents like Word docs but

00:07:45,409 --> 00:07:48,979
they can store articles but it's our

00:07:47,719 --> 00:07:52,399
first go is not really good for other

00:07:48,979 --> 00:07:54,529
kinds of content in my opinion things

00:07:52,399 --> 00:07:56,479
like image storage but a lot of these

00:07:54,529 --> 00:08:01,009
content repositories don't store things

00:07:56,479 --> 00:08:04,309
like file assets that that well that's

00:08:01,009 --> 00:08:06,110
any file storage and the next question

00:08:04,309 --> 00:08:07,369
is how do i search this repository with

00:08:06,110 --> 00:08:09,019
all my content in it we don't just

00:08:07,369 --> 00:08:10,459
wanted we didn't want to just put it

00:08:09,019 --> 00:08:13,519
somewhere and struggle to get it out

00:08:10,459 --> 00:08:15,519
have to build our own crazy search on

00:08:13,519 --> 00:08:20,959
top of using and off-the-shelf product

00:08:15,519 --> 00:08:22,819
so why don't I ended up happening not up

00:08:20,959 --> 00:08:25,579
to that yet what about the communication

00:08:22,819 --> 00:08:27,439
layer so a lot of those other

00:08:25,579 --> 00:08:29,089
applications out there they've got

00:08:27,439 --> 00:08:31,610
varying standards of how they

00:08:29,089 --> 00:08:34,009
communicate with each other cmis is a

00:08:31,610 --> 00:08:37,519
commonly known one jcr has its own

00:08:34,009 --> 00:08:40,069
implementation they all use some form of

00:08:37,519 --> 00:08:42,139
XML or JSON or PHP modules and they're

00:08:40,069 --> 00:08:45,380
all slightly different and they all vary

00:08:42,139 --> 00:08:47,899
from being very simple to very very

00:08:45,380 --> 00:08:49,490
complex the specs for some of them you

00:08:47,899 --> 00:08:52,160
know you could sit down and read for a

00:08:49,490 --> 00:08:54,260
long long time especially when you start

00:08:52,160 --> 00:08:54,510
delving into version control and wanting

00:08:54,260 --> 00:08:56,940
to

00:08:54,510 --> 00:09:00,060
meant that over an API service so it was

00:08:56,940 --> 00:09:01,890
again all very very complex and probably

00:09:00,060 --> 00:09:06,660
too complex for what we really wanted to

00:09:01,890 --> 00:09:10,410
achieve in a shorter time frame so we

00:09:06,660 --> 00:09:12,810
went down the custom path and there's

00:09:10,410 --> 00:09:14,730
many good reasons why we aren't a java

00:09:12,810 --> 00:09:16,320
house so we didn't choose jcr that one

00:09:14,730 --> 00:09:19,770
seemed pretty straightforward or a PHP d

00:09:16,320 --> 00:09:21,690
house PHP see are too heavy the

00:09:19,770 --> 00:09:25,830
standards of how it stores all of its

00:09:21,690 --> 00:09:27,660
contents are very complex it uses things

00:09:25,830 --> 00:09:29,190
like MySQL and it actually ends up

00:09:27,660 --> 00:09:31,080
storing most of its content in a key

00:09:29,190 --> 00:09:33,210
pair format in the database anyway so

00:09:31,080 --> 00:09:35,790
that raises scalability issues and all

00:09:33,210 --> 00:09:39,300
sorts of things alfresco is not really

00:09:35,790 --> 00:09:42,510
for a real website midgard to had some

00:09:39,300 --> 00:09:44,190
good good ideas in theory but if we

00:09:42,510 --> 00:09:45,450
wanted to extend it it was potentially

00:09:44,190 --> 00:09:48,920
going to give us problems as well

00:09:45,450 --> 00:09:52,230
because it's more of a sea application

00:09:48,920 --> 00:09:54,750
Drupal itself was a good good choice

00:09:52,230 --> 00:09:56,040
that we looked at open publish extension

00:09:54,750 --> 00:09:57,900
itself had a lot of features that we

00:09:56,040 --> 00:10:00,000
really liked but at the end of the day

00:09:57,900 --> 00:10:02,220
Drupal one out more on the front end

00:10:00,000 --> 00:10:04,680
rather than the content storage Drupal

00:10:02,220 --> 00:10:06,750
especially Drupal 7 would have not been

00:10:04,680 --> 00:10:08,640
up to speed and performance and its API

00:10:06,750 --> 00:10:12,330
services to do what we needed to do

00:10:08,640 --> 00:10:13,830
around our content repository so then we

00:10:12,330 --> 00:10:18,860
came up with a plan of exactly how we

00:10:13,830 --> 00:10:23,250
wanted our systems to interact with each

00:10:18,860 --> 00:10:24,510
other and what we have is a whole bunch

00:10:23,250 --> 00:10:27,930
of websites sitting at the top of our

00:10:24,510 --> 00:10:31,650
stack Drupal serves each of these

00:10:27,930 --> 00:10:33,690
websites individual Drupal installs it

00:10:31,650 --> 00:10:36,330
then has an API that can interact

00:10:33,690 --> 00:10:38,490
through a messaging service or directly

00:10:36,330 --> 00:10:40,500
with the client that with the content

00:10:38,490 --> 00:10:41,880
repository and there's apache solr

00:10:40,500 --> 00:10:44,760
indexes in there to assist with

00:10:41,880 --> 00:10:47,010
searching the repository so now I'm

00:10:44,760 --> 00:10:49,260
going to go through many of these

00:10:47,010 --> 00:10:52,640
components the client API the Drupal

00:10:49,260 --> 00:10:55,020
integration the messaging service and

00:10:52,640 --> 00:10:57,540
the exact schema that we ended up using

00:10:55,020 --> 00:11:02,490
in our repository and what software we

00:10:57,540 --> 00:11:04,110
use to build our repository so content

00:11:02,490 --> 00:11:07,260
repository itself we built out in

00:11:04,110 --> 00:11:07,570
symfony2 of all things even though we

00:11:07,260 --> 00:11:09,550
don't

00:11:07,570 --> 00:11:11,380
the sps has been working with zend we've

00:11:09,550 --> 00:11:13,630
chosen symfony2 for the content

00:11:11,380 --> 00:11:15,610
repository and moving forwards it is

00:11:13,630 --> 00:11:18,910
well supported as we know has great

00:11:15,610 --> 00:11:22,810
coding standards it's fast as doctrine

00:11:18,910 --> 00:11:24,850
torrance awesome and we have existing

00:11:22,810 --> 00:11:27,250
symfony2 skills in house anyways so

00:11:24,850 --> 00:11:31,000
we're really just upscaling towards

00:11:27,250 --> 00:11:35,140
moving to Drupal 8 looking ahead so that

00:11:31,000 --> 00:11:36,760
was out based framework we then looked

00:11:35,140 --> 00:11:39,910
at things like how we're going to

00:11:36,760 --> 00:11:43,840
interact with we chose to use

00:11:39,910 --> 00:11:45,610
manga / mysql mostly because of how the

00:11:43,840 --> 00:11:48,040
data gets stored and i'll touch on that

00:11:45,610 --> 00:11:49,720
a little bit more soon but interacting

00:11:48,040 --> 00:11:51,190
with the database is always a big part

00:11:49,720 --> 00:11:52,750
of the content repository and how you're

00:11:51,190 --> 00:11:54,850
going to be up doing go about doing it

00:11:52,750 --> 00:11:57,190
as I said doctrine is awesome they also

00:11:54,850 --> 00:12:02,020
have a MongoDB so they've got a MySQL

00:11:57,190 --> 00:12:03,880
ORM but they've got a MongoDB odm which

00:12:02,020 --> 00:12:05,590
fits perfectly we have documents we have

00:12:03,880 --> 00:12:07,510
articles articles of documents a

00:12:05,590 --> 00:12:09,720
document go into our repository it just

00:12:07,510 --> 00:12:12,640
all seemed to make sense at this point

00:12:09,720 --> 00:12:14,260
we did however start out without using

00:12:12,640 --> 00:12:17,380
doctrine we were using and

00:12:14,260 --> 00:12:19,540
symphony but we wrote our own methods of

00:12:17,380 --> 00:12:22,330
interacting with and what we found

00:12:19,540 --> 00:12:24,940
was we're trying to approach it from a

00:12:22,330 --> 00:12:26,620
schema lyst point of view that you know

00:12:24,940 --> 00:12:28,690
it's really cool you can get a Jason

00:12:26,620 --> 00:12:30,070
data you can decode it and you can just

00:12:28,690 --> 00:12:32,110
shove it straight into manga and that's

00:12:30,070 --> 00:12:35,320
how easy is to do prototype that

00:12:32,110 --> 00:12:37,210
in about 30 minutes but when it actually

00:12:35,320 --> 00:12:40,510
comes to dealing with things like

00:12:37,210 --> 00:12:43,390
validation making sure you content stays

00:12:40,510 --> 00:12:44,950
good quality for many years you've got

00:12:43,390 --> 00:12:46,990
to actually still have some validation

00:12:44,950 --> 00:12:49,300
and abstraction there and if goes

00:12:46,990 --> 00:12:51,190
away in a couple of years maybe it just

00:12:49,300 --> 00:12:52,600
I don't know another product comes on

00:12:51,190 --> 00:12:54,580
the market that's even better than

00:12:52,600 --> 00:12:56,770
we still needed the abstraction to shift

00:12:54,580 --> 00:12:58,450
away from to another system so

00:12:56,770 --> 00:13:00,310
that's one of the main reasons why ever

00:12:58,450 --> 00:13:04,470
end up using doctrine MongoDB rather

00:13:00,310 --> 00:13:04,470
than just direct access to

00:13:05,470 --> 00:13:12,640
why and not my SQL it is very easy

00:13:09,910 --> 00:13:14,230
to use if anyone has played with

00:13:12,640 --> 00:13:16,180
you'll understand what I'm on about and

00:13:14,230 --> 00:13:18,220
if you don't play with MongoDB it's

00:13:16,180 --> 00:13:21,970
fantastic you can run it up easily on a

00:13:18,220 --> 00:13:25,690
bit on a vm it's very fast to use I've

00:13:21,970 --> 00:13:27,010
been shown a chart at MongoDB conference

00:13:25,690 --> 00:13:30,370
where they are comparing mysql and

00:13:27,010 --> 00:13:32,980
memcache mysql is super slow mmk sure

00:13:30,370 --> 00:13:34,630
super fast and mongodb is much close to

00:13:32,980 --> 00:13:36,760
the memcache end in terms of speed

00:13:34,630 --> 00:13:38,530
because it stores everything in memory

00:13:36,760 --> 00:13:41,020
and then slowly commits it to a file

00:13:38,530 --> 00:13:42,730
system as it needs to it's a very memory

00:13:41,020 --> 00:13:45,640
hungry application but it is very very

00:13:42,730 --> 00:13:47,440
fast replication in MongoDB is amazing

00:13:45,640 --> 00:13:49,870
you can do it all on command line within

00:13:47,440 --> 00:13:52,780
Mongo's shell and within about five

00:13:49,870 --> 00:13:55,120
minutes you can have 10 20 slaves and

00:13:52,780 --> 00:13:56,500
better not really slaves and their

00:13:55,120 --> 00:13:58,090
primaries and secondaries and they can

00:13:56,500 --> 00:14:00,910
hand over to each other very quickly and

00:13:58,090 --> 00:14:05,590
very easily replication and MySQL as a

00:14:00,910 --> 00:14:07,240
pain in the ass we have many many

00:14:05,590 --> 00:14:09,340
content types and this was another

00:14:07,240 --> 00:14:11,200
reason why we chose MongoDB and we know

00:14:09,340 --> 00:14:14,860
they look like articles we know we're

00:14:11,200 --> 00:14:17,710
going to end up with an XML or a json

00:14:14,860 --> 00:14:19,570
api and we really thought about how the

00:14:17,710 --> 00:14:21,220
conversion process from whatever it

00:14:19,570 --> 00:14:23,410
ended up in in Drupal and the

00:14:21,220 --> 00:14:25,150
translation all the way through to how

00:14:23,410 --> 00:14:28,300
it gets stored in our content repository

00:14:25,150 --> 00:14:30,460
and mongodb seemed to simplify this

00:14:28,300 --> 00:14:33,910
process because it is be Sun which is

00:14:30,460 --> 00:14:35,290
just like Jason so it just seemed to

00:14:33,910 --> 00:14:37,240
make more sense of how we stored the

00:14:35,290 --> 00:14:39,400
data we wanted to keep things simple and

00:14:37,240 --> 00:14:41,200
that's again the emphasis around this

00:14:39,400 --> 00:14:46,180
whole repository is keeping things

00:14:41,200 --> 00:14:48,490
simple many of our content types have a

00:14:46,180 --> 00:14:51,190
lot of fields we have recipe and

00:14:48,490 --> 00:14:55,390
restaurant content types that we ingest

00:14:51,190 --> 00:14:58,000
from third parties or think our recipe

00:14:55,390 --> 00:15:00,610
content type maybe has 30 or 40 fields

00:14:58,000 --> 00:15:02,710
in our legacy system maybe even 50

00:15:00,610 --> 00:15:04,450
fields it's a lot of data not just

00:15:02,710 --> 00:15:07,510
things like addresses but opening times

00:15:04,450 --> 00:15:08,279
costs of different like Andre appetizers

00:15:07,510 --> 00:15:10,860
you know

00:15:08,279 --> 00:15:12,540
maine's desserts there's so much little

00:15:10,860 --> 00:15:16,110
data that we actually do need to show to

00:15:12,540 --> 00:15:17,879
the user on the front end and we weren't

00:15:16,110 --> 00:15:23,870
quite sure how we should have stored all

00:15:17,879 --> 00:15:26,129
this data so we ended up looking towards

00:15:23,870 --> 00:15:28,769
open standards of how we should

00:15:26,129 --> 00:15:31,529
represent this data and we took

00:15:28,769 --> 00:15:35,579
schema.org as a strong guide here and

00:15:31,529 --> 00:15:37,680
not only for the base actually show of

00:15:35,579 --> 00:15:42,420
hands of who knows about scheme absorber

00:15:37,680 --> 00:15:43,860
yeah that's good to see we looking on it

00:15:42,420 --> 00:15:45,809
answered a lot of questions really

00:15:43,860 --> 00:15:46,980
quickly up front for us you know are we

00:15:45,809 --> 00:15:48,360
going to call our content type an

00:15:46,980 --> 00:15:49,649
article yes we are we going to call it a

00:15:48,360 --> 00:15:52,019
recipe yes we are we're not going to

00:15:49,649 --> 00:15:53,550
call it something crazy like SBS article

00:15:52,019 --> 00:15:55,920
we're going to try and stick with

00:15:53,550 --> 00:15:57,420
something out of the box but then we

00:15:55,920 --> 00:15:58,920
took a little bit further and looked at

00:15:57,420 --> 00:16:00,329
all the fields on it and thought well

00:15:58,920 --> 00:16:03,269
they're field names already they've been

00:16:00,329 --> 00:16:07,559
defined for us why not call a lot of our

00:16:03,269 --> 00:16:10,769
fields from schema.org as well it makes

00:16:07,559 --> 00:16:12,930
the naming conventions much much easier

00:16:10,769 --> 00:16:18,329
through all of our products and let's

00:16:12,930 --> 00:16:20,879
develop a mess in the long run having

00:16:18,329 --> 00:16:23,639
said that though fields in schema.org

00:16:20,879 --> 00:16:25,829
are limited I know on the recipe content

00:16:23,639 --> 00:16:27,269
type the ingredients field is just one

00:16:25,829 --> 00:16:29,550
massive text field that's how google

00:16:27,269 --> 00:16:30,689
loves it they just look at that field

00:16:29,550 --> 00:16:32,699
and they work out what all the

00:16:30,689 --> 00:16:35,370
ingredients are that's actually not how

00:16:32,699 --> 00:16:37,230
ingredients are stored in a in a Content

00:16:35,370 --> 00:16:39,360
repository generally you'll probably use

00:16:37,230 --> 00:16:40,889
taxonomy terms for an ingredient or

00:16:39,360 --> 00:16:42,540
you'll have extra matter with it of

00:16:40,889 --> 00:16:44,819
quantities and you'll stall them all

00:16:42,540 --> 00:16:46,379
separately in different fields so it

00:16:44,819 --> 00:16:48,240
didn't answer all the questions of field

00:16:46,379 --> 00:16:49,709
storage but it really did help a long

00:16:48,240 --> 00:16:52,379
way and how we can standardize across

00:16:49,709 --> 00:16:55,980
different applications of how we call

00:16:52,379 --> 00:16:59,129
things we also used freebase as a source

00:16:55,980 --> 00:17:01,980
and a guide we've actually ingested a

00:16:59,129 --> 00:17:03,839
number of taxonomy terms from freebase

00:17:01,980 --> 00:17:06,929
to enhance our system and make it a lot

00:17:03,839 --> 00:17:09,449
richer we've also used open Caillat with

00:17:06,929 --> 00:17:11,520
passed every single news article that

00:17:09,449 --> 00:17:12,689
SPSS ever had online through up in

00:17:11,520 --> 00:17:15,120
Calais and now we have a massive

00:17:12,689 --> 00:17:15,809
vocabulary of everything that will make

00:17:15,120 --> 00:17:19,589
our content

00:17:15,809 --> 00:17:23,039
really really cool soon but we also have

00:17:19,589 --> 00:17:24,360
SBS specific content types that even I

00:17:23,039 --> 00:17:26,879
mentioned recipes we have some other

00:17:24,360 --> 00:17:29,909
ones as well we have an electronic

00:17:26,879 --> 00:17:32,129
program guide that has a lot of custom

00:17:29,909 --> 00:17:36,629
fields into that come from our TV

00:17:32,129 --> 00:17:38,309
schedule ins at SBS so again schema.org

00:17:36,629 --> 00:17:39,990
wasn't the answer for everything but

00:17:38,309 --> 00:17:44,639
it's been a good guide to helping a

00:17:39,990 --> 00:17:45,840
shape out a nice strong system so

00:17:44,639 --> 00:17:48,830
they're just some of the content types

00:17:45,840 --> 00:17:53,789
that SBS use across all of our network

00:17:48,830 --> 00:17:56,940
it's nice common common types so the

00:17:53,789 --> 00:18:00,450
next question that we came up or needed

00:17:56,940 --> 00:18:02,159
answer was we've got Drupal you know

00:18:00,450 --> 00:18:04,619
that that'll be running all of our sites

00:18:02,159 --> 00:18:07,679
I've got symfony2 and mongodb and our

00:18:04,619 --> 00:18:10,649
content repository but what's in the

00:18:07,679 --> 00:18:11,909
middle as I mentioned before there's a

00:18:10,649 --> 00:18:13,710
lot of standards on how you can

00:18:11,909 --> 00:18:16,470
communicate with a Content repository

00:18:13,710 --> 00:18:18,029
and cmis was a big one that was you know

00:18:16,470 --> 00:18:20,039
open and we really did look into her

00:18:18,029 --> 00:18:25,139
thinking or maybe we really should

00:18:20,039 --> 00:18:27,059
implement cm is we didn't we looked at

00:18:25,139 --> 00:18:28,860
XML and soap and thought well you know

00:18:27,059 --> 00:18:31,169
XML is actually got a lot of overhead

00:18:28,860 --> 00:18:34,019
with it so we actually went down the

00:18:31,169 --> 00:18:37,980
path of Jason and we'll even started on

00:18:34,019 --> 00:18:39,629
json-ld linked data but we haven't had

00:18:37,980 --> 00:18:42,240
the time to properly implement all that

00:18:39,629 --> 00:18:44,399
yet so what we've ended up with is a

00:18:42,240 --> 00:18:50,840
JSON API that is nice and lightweight it

00:18:44,399 --> 00:18:53,700
can be easily used on mobile devices its

00:18:50,840 --> 00:18:56,129
structure looks close to MongoDB as I

00:18:53,700 --> 00:19:00,179
mentioned before and we can easily

00:18:56,129 --> 00:19:02,100
change our our JSON API to be Jason

00:19:00,179 --> 00:19:04,169
linked data so it has a lot more schema

00:19:02,100 --> 00:19:07,769
around it gives a DTD feel that you come

00:19:04,169 --> 00:19:11,639
to expect with XML of soap ap is and

00:19:07,769 --> 00:19:13,799
that data can be used to really generate

00:19:11,639 --> 00:19:15,389
a pretty much generate all your content

00:19:13,799 --> 00:19:17,549
types across your network from one

00:19:15,389 --> 00:19:19,499
single content repository in theory

00:19:17,549 --> 00:19:22,259
anything could be dynamic you created in

00:19:19,499 --> 00:19:23,700
the content repository and then it would

00:19:22,259 --> 00:19:24,890
just end up in Drupal let's say you had

00:19:23,700 --> 00:19:26,750
a cron job that

00:19:24,890 --> 00:19:28,070
checked the content repository and

00:19:26,750 --> 00:19:30,410
automatically created new contact

00:19:28,070 --> 00:19:32,450
content types it's the the ideas that

00:19:30,410 --> 00:19:34,100
were just overflowing when it came to

00:19:32,450 --> 00:19:35,900
looking at json-ld but we haven't

00:19:34,100 --> 00:19:42,500
implemented it yet because we're taking

00:19:35,900 --> 00:19:46,400
baby steps so our service looks pretty

00:19:42,500 --> 00:19:47,990
straightforward we use the usual get put

00:19:46,400 --> 00:19:50,420
delete posts that you come to expect

00:19:47,990 --> 00:19:52,670
with a restful service we have a

00:19:50,420 --> 00:19:56,450
document path we also have a vocabulary

00:19:52,670 --> 00:19:58,880
and a term path and we use you IDs and

00:19:56,450 --> 00:20:00,770
our content repository we use you you

00:19:58,880 --> 00:20:03,980
IDs because our content can be recreated

00:20:00,770 --> 00:20:05,600
on any Drupal site at any time it's not

00:20:03,980 --> 00:20:07,700
created in the repository it doesn't get

00:20:05,600 --> 00:20:09,380
created in Drupal which then pings

00:20:07,700 --> 00:20:12,110
repository for an ID it just gets

00:20:09,380 --> 00:20:15,410
created in Drupal at some point it'll

00:20:12,110 --> 00:20:17,780
end up in the content repository I'll

00:20:15,410 --> 00:20:23,690
come a bit more about that process soon

00:20:17,780 --> 00:20:25,970
our Jason service is straightforward it

00:20:23,690 --> 00:20:29,090
looks very familiar to what schema.org

00:20:25,970 --> 00:20:33,350
looks like it's just we have extra

00:20:29,090 --> 00:20:34,940
fields like uuid M is published extra

00:20:33,350 --> 00:20:37,390
extra fields that just help out the

00:20:34,940 --> 00:20:42,500
content repository and the Drupal sites

00:20:37,390 --> 00:20:44,420
right so the next big thing was dealing

00:20:42,500 --> 00:20:47,300
with how we push this content around our

00:20:44,420 --> 00:20:50,660
system at this point we'd conceptualize

00:20:47,300 --> 00:20:53,330
that we can create nodes in Drupal we

00:20:50,660 --> 00:20:56,900
can through a rest api put content into

00:20:53,330 --> 00:20:58,660
our content repository but what we

00:20:56,900 --> 00:21:01,250
hadn't worked out was how do we manage

00:20:58,660 --> 00:21:04,160
changes our end goal is to be able to

00:21:01,250 --> 00:21:06,680
have slight a push content through to

00:21:04,160 --> 00:21:08,720
site B somehow we didn't quite know how

00:21:06,680 --> 00:21:11,990
so we came up with an idea for a

00:21:08,720 --> 00:21:14,360
messaging queue which is quite

00:21:11,990 --> 00:21:16,010
straightforward really it's messaging in

00:21:14,360 --> 00:21:18,560
queues I've been around for a little

00:21:16,010 --> 00:21:20,420
while I like to think of this one as

00:21:18,560 --> 00:21:25,640
more of like a binary log if you think

00:21:20,420 --> 00:21:30,070
about MySQL we have a point in our

00:21:25,640 --> 00:21:30,070
messaging q actually I'll just

00:21:30,570 --> 00:21:36,070
skip through to this one go back so we

00:21:33,460 --> 00:21:39,640
have stack of view IDs in our messaging

00:21:36,070 --> 00:21:41,230
q site a will have a pointer to one part

00:21:39,640 --> 00:21:43,440
in the queue and site B will be another

00:21:41,230 --> 00:21:47,260
and basically they just process through

00:21:43,440 --> 00:21:51,490
this Jason feed constantly we did look

00:21:47,260 --> 00:21:54,520
at things like pub pub sub they kind of

00:21:51,490 --> 00:21:57,730
do this as well but if your site goes

00:21:54,520 --> 00:22:00,160
offline in mrs. notifications we needed

00:21:57,730 --> 00:22:03,160
something that could be decoupled and

00:22:00,160 --> 00:22:05,800
modular so in the event that site B goes

00:22:03,160 --> 00:22:09,490
offline and events keep getting added to

00:22:05,800 --> 00:22:12,460
this message queue we needed a way for

00:22:09,490 --> 00:22:16,630
that site to catch up so the message in

00:22:12,460 --> 00:22:19,390
queue was crucial to the design of the

00:22:16,630 --> 00:22:21,520
content repository and it has a basic

00:22:19,390 --> 00:22:24,670
concept around it of we have a uuid for

00:22:21,520 --> 00:22:25,960
the actual message we have the source of

00:22:24,670 --> 00:22:26,950
your idea that it's referring to it

00:22:25,960 --> 00:22:28,450
could be a document it could be a

00:22:26,950 --> 00:22:30,310
taxonomy term could be a vocabulary

00:22:28,450 --> 00:22:33,190
could be an image could be anything in

00:22:30,310 --> 00:22:35,980
the repository we represent that by

00:22:33,190 --> 00:22:37,960
source type timestamp of when it

00:22:35,980 --> 00:22:40,630
actually that message got created not

00:22:37,960 --> 00:22:42,520
the document but not the documents like

00:22:40,630 --> 00:22:45,250
create date or written date publish date

00:22:42,520 --> 00:22:47,860
but the event date and we have an action

00:22:45,250 --> 00:22:49,510
so this Q can have creates updates

00:22:47,860 --> 00:22:52,990
deletes they've pretty much translate to

00:22:49,510 --> 00:22:55,180
what the restful service does and the

00:22:52,990 --> 00:22:57,040
only knowledge that our content

00:22:55,180 --> 00:23:00,510
repository has of all the other websites

00:22:57,040 --> 00:23:02,680
is this one field that says source site

00:23:00,510 --> 00:23:05,140
it's the only knowledge there's no

00:23:02,680 --> 00:23:06,760
knowledge in that application that you

00:23:05,140 --> 00:23:08,500
know this is the IP address of this

00:23:06,760 --> 00:23:10,060
website this is the database this is how

00:23:08,500 --> 00:23:11,290
I should push through content to Drupal

00:23:10,060 --> 00:23:14,020
it doesn't happen in that direction

00:23:11,290 --> 00:23:16,420
content doesn't get pushed from our

00:23:14,020 --> 00:23:19,030
symphony service to Drupal because

00:23:16,420 --> 00:23:20,410
that's not decoupled enough it requires

00:23:19,030 --> 00:23:21,790
more maintenance if we brought another

00:23:20,410 --> 00:23:22,960
side on board we've got to go back to

00:23:21,790 --> 00:23:24,340
the repository and make sure it's all

00:23:22,960 --> 00:23:26,170
working it just added a lot more

00:23:24,340 --> 00:23:27,940
complexity and a lot more risk we wanted

00:23:26,170 --> 00:23:30,310
something that could be written at the

00:23:27,940 --> 00:23:32,230
start of this project the messaging

00:23:30,310 --> 00:23:36,060
queue and then just left and it'll work

00:23:32,230 --> 00:23:36,060
we can add sites on as we go

00:23:36,690 --> 00:23:42,490
so the messengers in queue again has a

00:23:39,010 --> 00:23:45,630
JSON API it's josiah elders we call them

00:23:42,490 --> 00:23:48,340
events and a basic it's it's read-only

00:23:45,630 --> 00:23:51,730
and we just say events since view your

00:23:48,340 --> 00:23:53,250
ID and give it a uuid and we get 200

00:23:51,730 --> 00:23:55,540
events back from then and we can process

00:23:53,250 --> 00:23:56,950
will say the last event will pass it

00:23:55,540 --> 00:24:02,620
back to the API and we'll get the next

00:23:56,950 --> 00:24:04,630
200 events if there's more to process if

00:24:02,620 --> 00:24:06,130
we don't know you a uuid potential

00:24:04,630 --> 00:24:07,470
onboarding of a brand new website where

00:24:06,130 --> 00:24:10,470
we had to come up with a way to just say

00:24:07,470 --> 00:24:16,120
give us events since this timestamp

00:24:10,470 --> 00:24:17,440
relatively straightforward that one I'll

00:24:16,120 --> 00:24:19,540
come back a bit more to the message in

00:24:17,440 --> 00:24:23,290
queue as I talk a bit further about how

00:24:19,540 --> 00:24:25,660
integrated Drupal to the CR and the

00:24:23,290 --> 00:24:29,230
modules that we wrote for that but i'll

00:24:25,660 --> 00:24:31,480
just go sideways into taxonomy so

00:24:29,230 --> 00:24:34,870
taxonomy is a long time strength of

00:24:31,480 --> 00:24:37,480
Drupal it's a really awesome not many

00:24:34,870 --> 00:24:40,990
content management systems have it quite

00:24:37,480 --> 00:24:44,740
down pat like drupal does so the sea are

00:24:40,990 --> 00:24:49,780
naturally required a way to store terms

00:24:44,740 --> 00:24:51,940
and vocabularies in it and what came up

00:24:49,780 --> 00:24:55,420
with this is that let's say I tag an

00:24:51,940 --> 00:24:57,580
article on site a with I don't know

00:24:55,420 --> 00:25:00,910
cheese that's that's my tag on that

00:24:57,580 --> 00:25:03,580
article and then I at the same time tag

00:25:00,910 --> 00:25:06,130
an article on site B with cheese what we

00:25:03,580 --> 00:25:08,350
end up with is actually two terms to

00:25:06,130 --> 00:25:10,870
individual terms that have had uuid is

00:25:08,350 --> 00:25:12,610
generated in two separate Drupal

00:25:10,870 --> 00:25:14,560
installations because everything is

00:25:12,610 --> 00:25:17,460
detached let's say the queue hasn't

00:25:14,560 --> 00:25:19,870
processed yet hasn't ended up in the CR

00:25:17,460 --> 00:25:21,490
we end up with to you ideas so there's a

00:25:19,870 --> 00:25:23,590
bit of complexity in our system about

00:25:21,490 --> 00:25:26,260
synchronizing taxonomy terms between

00:25:23,590 --> 00:25:29,050
sites and they're a little different to

00:25:26,260 --> 00:25:30,730
how articles work but at the end of the

00:25:29,050 --> 00:25:32,830
day taxonomy term is a unique by their

00:25:30,730 --> 00:25:35,440
name rather than a uuid so that was an

00:25:32,830 --> 00:25:39,640
easily resolution to that one we go site

00:25:35,440 --> 00:25:41,020
a ok chicken chicken instead of cheese

00:25:39,640 --> 00:25:41,970
must have been eating chicken at the

00:25:41,020 --> 00:25:46,110
time

00:25:41,970 --> 00:25:48,750
so side a chicken will push its term to

00:25:46,110 --> 00:25:50,940
the CR CR will end up getting the term

00:25:48,750 --> 00:25:53,130
chicken and store it at some point

00:25:50,940 --> 00:25:55,320
whether it's in the next minute five

00:25:53,130 --> 00:25:56,850
minutes two days whenever site B is

00:25:55,320 --> 00:26:00,150
online and ready a check the cameta

00:25:56,850 --> 00:26:04,350
jinxiu site B will pull the cue from the

00:26:00,150 --> 00:26:06,020
CR process that list of messages see

00:26:04,350 --> 00:26:08,670
that there's a term there that says

00:26:06,020 --> 00:26:10,830
create I'll see that as a message there

00:26:08,670 --> 00:26:13,050
that says create and it's got a uuid

00:26:10,830 --> 00:26:14,730
it'll go off and fetch that term and

00:26:13,050 --> 00:26:19,230
then all of a sudden our chicken has

00:26:14,730 --> 00:26:21,360
ended up in sight be at that point it's

00:26:19,230 --> 00:26:24,390
going to then do the synchronization of

00:26:21,360 --> 00:26:26,250
I already have a term called chicken CR

00:26:24,390 --> 00:26:29,400
says it's this UID and I've already got

00:26:26,250 --> 00:26:30,630
this one so I'm going to ignore the one

00:26:29,400 --> 00:26:33,300
I've got in my drupal and just replace

00:26:30,630 --> 00:26:34,860
to uid with the CR CI is treated as gold

00:26:33,300 --> 00:26:36,690
in terms of you ids even though it

00:26:34,860 --> 00:26:38,700
doesn't create them it is the one true

00:26:36,690 --> 00:26:43,020
repository for you you IDs and that was

00:26:38,700 --> 00:26:45,240
I think an important important point in

00:26:43,020 --> 00:26:48,510
the design of when when we're thinking

00:26:45,240 --> 00:26:51,470
these out and it came came to us not so

00:26:48,510 --> 00:26:51,470
quickly surprisingly

00:26:54,180 --> 00:26:58,780
so the next big thing around our content

00:26:56,560 --> 00:27:00,280
repository was searched at this point we

00:26:58,780 --> 00:27:02,740
had a nice little API we could push

00:27:00,280 --> 00:27:05,590
articles in taxes on articles with

00:27:02,740 --> 00:27:08,440
taxonomy as well and we're still doing

00:27:05,590 --> 00:27:09,850
things through your mock-ups not

00:27:08,440 --> 00:27:12,310
necessarily much Drupal integration at

00:27:09,850 --> 00:27:14,530
this point so wondering well how do we

00:27:12,310 --> 00:27:17,470
how do we find this content and how will

00:27:14,530 --> 00:27:20,710
drew will find it a long term so Mongo's

00:27:17,470 --> 00:27:23,200
okay for basic searches it's got some

00:27:20,710 --> 00:27:25,120
nice free texts or regular expression

00:27:23,200 --> 00:27:27,640
text matching it's all right when it's

00:27:25,120 --> 00:27:29,890
on basic fields or ray fields keyword

00:27:27,640 --> 00:27:31,480
fields but ultimately we needed

00:27:29,890 --> 00:27:34,450
something a lot more stronger so we

00:27:31,480 --> 00:27:38,620
ended up using apache solr on with

00:27:34,450 --> 00:27:39,730
symphony i use drupal solar schema xml

00:27:38,620 --> 00:27:41,890
just because it's actually a really

00:27:39,730 --> 00:27:43,480
awesome ski max now has a lot of dynamic

00:27:41,890 --> 00:27:46,090
fields already defined in it and just

00:27:43,480 --> 00:27:49,030
saved me scanning the solar

00:27:46,090 --> 00:27:53,070
documentation and building my own also

00:27:49,030 --> 00:27:55,750
use the solarium library which is

00:27:53,070 --> 00:27:57,510
totally different to what you'll find on

00:27:55,750 --> 00:28:00,730
the Drupal community of Apache Solr

00:27:57,510 --> 00:28:02,760
library or the Search API library

00:28:00,730 --> 00:28:05,950
they're their own implementations

00:28:02,760 --> 00:28:08,050
solarium library is it's on github it's

00:28:05,950 --> 00:28:11,430
easy to obtain I think it's the best

00:28:08,050 --> 00:28:14,230
solar integration library I've ever used

00:28:11,430 --> 00:28:18,610
having used both of the Drupal ones as

00:28:14,230 --> 00:28:20,350
well it's much more heavily cast and can

00:28:18,610 --> 00:28:25,810
easily swap out different HTTP

00:28:20,350 --> 00:28:28,840
connectors as well we ended up writing

00:28:25,810 --> 00:28:31,770
annotation drivers for this particular

00:28:28,840 --> 00:28:35,110
library for symphony for doctrine's

00:28:31,770 --> 00:28:37,290
specifically so that in our class where

00:28:35,110 --> 00:28:41,800
we have an article being defined in

00:28:37,290 --> 00:28:45,190
symphony just below our doctrine manga

00:28:41,800 --> 00:28:47,440
odm annotation will put the same kind of

00:28:45,190 --> 00:28:49,690
annotation for solar mapping that field

00:28:47,440 --> 00:28:52,240
in the class directly to either a

00:28:49,690 --> 00:28:54,730
dynamic field or a non dammit dynamic

00:28:52,240 --> 00:28:56,140
field in solar I made the mapping really

00:28:54,730 --> 00:28:57,640
really easily we knew what our content

00:28:56,140 --> 00:28:58,930
types we're going to look like and we

00:28:57,640 --> 00:29:01,870
just add like a dynamic string

00:28:58,930 --> 00:29:04,510
annotation on it and it uses that field

00:29:01,870 --> 00:29:05,070
name and by way of annotation drivers it

00:29:04,510 --> 00:29:07,710
ends up

00:29:05,070 --> 00:29:11,190
Solar really keen to contribute that

00:29:07,710 --> 00:29:13,169
back to the symphony community and

00:29:11,190 --> 00:29:18,960
wondering if there's a way to get that

00:29:13,169 --> 00:29:21,090
into some more Drupal 8 contrib so the

00:29:18,960 --> 00:29:23,100
CR indexing process itself actually

00:29:21,090 --> 00:29:24,840
subscribed to the event queue and again

00:29:23,100 --> 00:29:27,240
this is why the event the messaging COO

00:29:24,840 --> 00:29:28,889
of the event queue became so important

00:29:27,240 --> 00:29:33,600
in the design is when it comes to

00:29:28,889 --> 00:29:36,210
processing batch jobs in the CR it was

00:29:33,600 --> 00:29:38,549
perfect candidate we have a full list of

00:29:36,210 --> 00:29:41,460
creates and updates of content of all

00:29:38,549 --> 00:29:42,960
these articles and what what better to

00:29:41,460 --> 00:29:46,980
get to subscribe to it than a search

00:29:42,960 --> 00:29:48,659
indexer it was made it very very

00:29:46,980 --> 00:29:51,539
straight forward to just process a batch

00:29:48,659 --> 00:29:54,960
list of content to then throw it Solar

00:29:51,539 --> 00:29:57,750
and all of a sudden it's indexed another

00:29:54,960 --> 00:29:59,669
benefit to using apache solr was that

00:29:57,750 --> 00:30:01,110
dribbles integration with it is really

00:29:59,669 --> 00:30:04,590
great there's a couple of modules on the

00:30:01,110 --> 00:30:06,929
community called Sonia Sonia works with

00:30:04,590 --> 00:30:10,350
Search API which works obviously with

00:30:06,929 --> 00:30:15,330
Drupal Sonia allows you to use a non

00:30:10,350 --> 00:30:16,889
Drupal schema with Drupal and views and

00:30:15,330 --> 00:30:19,350
just creates all those energy relation

00:30:16,889 --> 00:30:23,460
ships for you so that's allowed us to

00:30:19,350 --> 00:30:26,029
use a non Drupal search engine even

00:30:23,460 --> 00:30:28,740
though it's using the same schema and

00:30:26,029 --> 00:30:34,500
easily provide the mappings through to

00:30:28,740 --> 00:30:39,000
our front end so now moving on to Drupal

00:30:34,500 --> 00:30:42,330
we've ended up with one main Drupal 7

00:30:39,000 --> 00:30:44,580
install on our servers we have one

00:30:42,330 --> 00:30:46,919
install profile which we've called SBS

00:30:44,580 --> 00:30:49,379
distribution and we have one main theme

00:30:46,919 --> 00:30:52,250
called global for all of our websites as

00:30:49,379 --> 00:30:54,600
I mentioned before our new design is is

00:30:52,250 --> 00:30:57,029
much more standardized across our

00:30:54,600 --> 00:30:58,860
network I've screenshot of it at the end

00:30:57,029 --> 00:31:00,960
of the presentation for a bit of a sneak

00:30:58,860 --> 00:31:02,940
preview that's what we've ended up with

00:31:00,960 --> 00:31:05,159
is sub-themes that more or less just

00:31:02,940 --> 00:31:08,070
replaced some imagery and set and minus

00:31:05,159 --> 00:31:10,169
CSS colors and things like that as we

00:31:08,070 --> 00:31:13,139
roll out more sites across the network

00:31:10,169 --> 00:31:17,429
and so what we've built into this global

00:31:13,139 --> 00:31:18,659
theme is full responsive system as well

00:31:17,429 --> 00:31:20,220
to meet that one

00:31:18,659 --> 00:31:22,049
earlier goals we wanted everything to

00:31:20,220 --> 00:31:27,330
work on a mobile or a desktop or a

00:31:22,049 --> 00:31:29,549
really massive desktop etc we've got

00:31:27,330 --> 00:31:30,960
multi-site installs happening as well so

00:31:29,549 --> 00:31:36,299
some sites will naturally have their own

00:31:30,960 --> 00:31:37,769
modules not many so far but if it comes

00:31:36,299 --> 00:31:39,720
to think well things like features

00:31:37,769 --> 00:31:41,129
exports definitely they can live in

00:31:39,720 --> 00:31:43,200
their own sites rather than living in

00:31:41,129 --> 00:31:45,570
the base distribution our food site has

00:31:43,200 --> 00:31:48,119
very different structure and listings of

00:31:45,570 --> 00:31:51,109
views compared to other sites so that's

00:31:48,119 --> 00:31:53,489
just a little bit on our Drupal setup

00:31:51,109 --> 00:31:57,299
but to get Drupal to connect to the CR

00:31:53,489 --> 00:31:59,940
we needed three parts we needed a drupal

00:31:57,299 --> 00:32:02,039
module or a couple of modules in fact we

00:31:59,940 --> 00:32:03,450
needed a client API that it's a bit more

00:32:02,039 --> 00:32:06,330
standardized that can connect to the

00:32:03,450 --> 00:32:08,940
repository and we needed our see our

00:32:06,330 --> 00:32:14,399
service so we've got our cell service at

00:32:08,940 --> 00:32:17,009
this stage and we have a client API in

00:32:14,399 --> 00:32:20,129
process so the client api we ended up

00:32:17,009 --> 00:32:22,169
building out as a standalone api a

00:32:20,129 --> 00:32:25,139
library that you can just drop in drupal

00:32:22,169 --> 00:32:26,609
and the reason for this was that we also

00:32:25,139 --> 00:32:28,229
have our legacy sites that still

00:32:26,609 --> 00:32:30,359
actually need to use this and put

00:32:28,229 --> 00:32:32,729
content into our repository it also

00:32:30,359 --> 00:32:37,529
keeps things decoupled we can upgrade

00:32:32,729 --> 00:32:39,899
things at different stages and the

00:32:37,529 --> 00:32:42,299
functionality and summer API seems to

00:32:39,899 --> 00:32:43,919
push the limits of what you would want

00:32:42,299 --> 00:32:45,119
to do in the structure of Drupal as well

00:32:43,919 --> 00:32:47,099
it's more like a symphony eight

00:32:45,119 --> 00:32:51,989
structure rather than simply seven it

00:32:47,099 --> 00:32:53,729
uses PSR standards which Drupal 7 does

00:32:51,989 --> 00:32:57,629
not unless you use something like X

00:32:53,729 --> 00:33:00,739
autoload to help you out there so the

00:32:57,629 --> 00:33:03,119
API handles the conversion from

00:33:00,739 --> 00:33:05,519
basically the Jason that comes from the

00:33:03,119 --> 00:33:07,590
content repository and it converts it

00:33:05,519 --> 00:33:11,399
into a strongly-typed object that you

00:33:07,590 --> 00:33:14,429
can then hand off to Drupal and so built

00:33:11,399 --> 00:33:16,919
into this API his client API this idea

00:33:14,429 --> 00:33:19,109
of build handlers and an object

00:33:16,919 --> 00:33:20,759
translator it has some very similar

00:33:19,109 --> 00:33:26,389
concepts to what the Drupal migrate

00:33:20,759 --> 00:33:29,879
module does in itself it's

00:33:26,389 --> 00:33:32,759
needs a bit more work I'd hoped that it

00:33:29,879 --> 00:33:35,159
would be able to connect to the symphony

00:33:32,759 --> 00:33:36,870
service and get pretty much the scheme

00:33:35,159 --> 00:33:39,149
up from Symphony and generate a lot of

00:33:36,870 --> 00:33:41,490
these classes automatically and then

00:33:39,149 --> 00:33:43,080
push them through to Drupal but again

00:33:41,490 --> 00:33:46,409
it's just time is the only thing

00:33:43,080 --> 00:33:49,259
constraining a set so at this stage we

00:33:46,409 --> 00:33:51,659
had a client API that could connect to

00:33:49,259 --> 00:33:53,909
our symphony service it does a lot of

00:33:51,659 --> 00:33:55,590
the error handling throws exceptions

00:33:53,909 --> 00:33:59,370
when there's problems communicating with

00:33:55,590 --> 00:34:01,350
the repository this is this was a point

00:33:59,370 --> 00:34:03,809
that we had to really fine-tune and

00:34:01,350 --> 00:34:06,509
wrote a lot of unit tests around because

00:34:03,809 --> 00:34:08,819
our content repository with repository

00:34:06,509 --> 00:34:11,970
was going to be such a core part to our

00:34:08,819 --> 00:34:14,040
new network it just has to work and we

00:34:11,970 --> 00:34:15,300
couldn't have risk of just one little

00:34:14,040 --> 00:34:16,679
thing messing up everything because all

00:34:15,300 --> 00:34:22,290
of a sudden we're going to have 60 sites

00:34:16,679 --> 00:34:24,599
that can't connect to our repository so

00:34:22,290 --> 00:34:28,139
this point though still not connecting

00:34:24,599 --> 00:34:31,800
to Drupal so we needed a bunch of Drupal

00:34:28,139 --> 00:34:36,149
modules so we ended up with about five

00:34:31,800 --> 00:34:38,609
main modules we have a server provider

00:34:36,149 --> 00:34:42,450
or an API rapper it imports the library

00:34:38,609 --> 00:34:44,310
and it has some basic methods for

00:34:42,450 --> 00:34:46,139
pushing and pulling content to the

00:34:44,310 --> 00:34:50,940
repository we actually call them push

00:34:46,139 --> 00:34:52,740
and pull in the system we have an entity

00:34:50,940 --> 00:34:54,089
integration or a field module and I'll

00:34:52,740 --> 00:34:56,639
show you some screenshots of that

00:34:54,089 --> 00:34:59,010
shortly actually in action we have a

00:34:56,639 --> 00:35:02,460
module for an event queue processor

00:34:59,010 --> 00:35:04,109
drupal's Q is mostly good enough but

00:35:02,460 --> 00:35:06,000
we've had to extend it to put a bit more

00:35:04,109 --> 00:35:10,230
data into it as well so it's just class

00:35:06,000 --> 00:35:12,480
extensions and defining queues of how we

00:35:10,230 --> 00:35:14,970
want so we have a queue that can push

00:35:12,480 --> 00:35:16,770
content qu that can pull content a queue

00:35:14,970 --> 00:35:20,040
that can subscribe to content and then

00:35:16,770 --> 00:35:23,220
process things in Drupal later it's just

00:35:20,040 --> 00:35:26,760
another cue module that has kind of been

00:35:23,220 --> 00:35:29,250
back ported from Drupal 8 we also have

00:35:26,760 --> 00:35:32,220
modules that helps out with Search API

00:35:29,250 --> 00:35:34,050
solar and Sonia we didn't write them but

00:35:32,220 --> 00:35:36,569
we've had to do a fair few patches on

00:35:34,050 --> 00:35:38,250
some of them because they're pretty raw

00:35:36,569 --> 00:35:39,670
they're pretty new in the community they

00:35:38,250 --> 00:35:41,170
need a bit more work

00:35:39,670 --> 00:35:45,670
but we have also contributed those

00:35:41,170 --> 00:35:48,309
patches back as well and there's some

00:35:45,670 --> 00:35:49,690
custom code around facets as well when

00:35:48,309 --> 00:35:53,020
it comes to things like filtering on

00:35:49,690 --> 00:35:58,750
dates when you when you use search api's

00:35:53,020 --> 00:36:01,750
sarnia it's not as easy to map I guess

00:35:58,750 --> 00:36:03,460
content or the structure of a field into

00:36:01,750 --> 00:36:06,690
what it should render out in an views so

00:36:03,460 --> 00:36:09,780
it needs a bit more bit more and holding

00:36:06,690 --> 00:36:12,280
so our sub server provider module

00:36:09,780 --> 00:36:17,380
implements push pull and delete methods

00:36:12,280 --> 00:36:21,760
it's hooked up to parts of the entity

00:36:17,380 --> 00:36:23,950
API it more or less just takes the

00:36:21,760 --> 00:36:26,260
entity object with a server wrapper

00:36:23,950 --> 00:36:27,940
entity wrapper sorry and pushes it

00:36:26,260 --> 00:36:30,460
through to the client API it handles

00:36:27,940 --> 00:36:33,339
extra things like more more error

00:36:30,460 --> 00:36:35,530
handling takes the errors that come up

00:36:33,339 --> 00:36:37,780
from the client API the exceptions they

00:36:35,530 --> 00:36:40,180
get thrown and puts them into Drupal's

00:36:37,780 --> 00:36:45,430
watchdog or any other logging system

00:36:40,180 --> 00:36:46,809
we're using and provides a nice easier

00:36:45,430 --> 00:36:53,260
way for using the entity metadata

00:36:46,809 --> 00:36:56,740
wrapper for setters and getters so the

00:36:53,260 --> 00:36:59,799
next one was creating the field or the

00:36:56,740 --> 00:37:01,750
entity field module which is probably

00:36:59,799 --> 00:37:04,180
the coolest part about the integration

00:37:01,750 --> 00:37:06,400
it sits on every single content type we

00:37:04,180 --> 00:37:08,770
have taxonomy and like vocabulary is

00:37:06,400 --> 00:37:11,319
inclusive images file we use file entity

00:37:08,770 --> 00:37:13,299
as well it's just one little field that

00:37:11,319 --> 00:37:15,520
we call see our status and call it

00:37:13,299 --> 00:37:17,920
whatever you want it has the ability to

00:37:15,520 --> 00:37:20,079
choose from a drop-down of the content

00:37:17,920 --> 00:37:21,849
source so we can hypothetically have

00:37:20,079 --> 00:37:26,799
multiple content repositories we don't

00:37:21,849 --> 00:37:29,530
but we can and our client API gives us a

00:37:26,799 --> 00:37:31,210
bit of schema around what what content

00:37:29,530 --> 00:37:32,530
types are available or what collections

00:37:31,210 --> 00:37:34,480
we've tried to use some common

00:37:32,530 --> 00:37:38,950
terminology to what gets stored in

00:37:34,480 --> 00:37:41,589
MongoDB as well see this this is a field

00:37:38,950 --> 00:37:44,470
on a node when you're editing it in the

00:37:41,589 --> 00:37:46,720
administration section and this mapping

00:37:44,470 --> 00:37:50,170
just appears so you can I can be on a

00:37:46,720 --> 00:37:51,460
node of our type article and in here I

00:37:50,170 --> 00:37:52,510
can say well it's going to map through

00:37:51,460 --> 00:37:54,070
to article in the content

00:37:52,510 --> 00:37:56,740
posite ori so we've got tried to keep

00:37:54,070 --> 00:37:58,360
this fairly decoupled so that we can in

00:37:56,740 --> 00:38:01,240
theory map any content type to another

00:37:58,360 --> 00:38:04,440
content type in Drupal that doesn't have

00:38:01,240 --> 00:38:06,880
to adhere to strict strict mapping on

00:38:04,440 --> 00:38:09,430
the left other fields that come from the

00:38:06,880 --> 00:38:12,880
content repository the middle column is

00:38:09,430 --> 00:38:16,120
the target fields in Drupal and then on

00:38:12,880 --> 00:38:17,950
the right we have this field handler

00:38:16,120 --> 00:38:21,160
interface that I've mentioned before

00:38:17,950 --> 00:38:23,140
where some fields can map directly one

00:38:21,160 --> 00:38:24,850
to one like the type field in Drupal or

00:38:23,140 --> 00:38:26,680
is published I mean that's just an

00:38:24,850 --> 00:38:30,460
integer there's no fancy arrays around

00:38:26,680 --> 00:38:32,680
that or language multi lingual metadata

00:38:30,460 --> 00:38:34,780
around it but for other fields we do

00:38:32,680 --> 00:38:37,000
need handles and leurs and so a lot of

00:38:34,780 --> 00:38:39,550
the fields use what we've created as a

00:38:37,000 --> 00:38:42,610
drupal field handler which just has all

00:38:39,550 --> 00:38:44,830
those cases around it is it an array do

00:38:42,610 --> 00:38:48,280
I have multiple elements I'm multiple

00:38:44,830 --> 00:38:50,650
storage or am i single element do I have

00:38:48,280 --> 00:38:53,170
different languages and inside me that

00:38:50,650 --> 00:38:55,840
kind of thing some of the other fields

00:38:53,170 --> 00:38:58,090
are need a bit more work around them

00:38:55,840 --> 00:38:59,770
we've got some custom fields that we've

00:38:58,090 --> 00:39:01,570
created for our restaurant content type

00:38:59,770 --> 00:39:04,450
which shows like opening times and

00:39:01,570 --> 00:39:06,610
things like that so those that kind of

00:39:04,450 --> 00:39:08,530
data is stored a lot more generic in the

00:39:06,610 --> 00:39:09,910
content repository then Drupal it's

00:39:08,530 --> 00:39:11,950
quite different because it's custom

00:39:09,910 --> 00:39:13,300
field in Drupal so we still wanted to be

00:39:11,950 --> 00:39:15,070
able to use the awesome power of Drupal

00:39:13,300 --> 00:39:17,890
and its fields but we're still wanted to

00:39:15,070 --> 00:39:21,510
keep the data tidy and CR and not

00:39:17,890 --> 00:39:26,080
necessarily being inflicted by drupal's

00:39:21,510 --> 00:39:29,200
structure and this was the key part to

00:39:26,080 --> 00:39:32,590
keeping that separation and so the

00:39:29,200 --> 00:39:34,450
server wrapper basically looks at this

00:39:32,590 --> 00:39:35,440
field whenever it gets to a node that

00:39:34,450 --> 00:39:37,780
needs to be pushed through the

00:39:35,440 --> 00:39:39,100
repository and inspects each of these

00:39:37,780 --> 00:39:41,920
and works out what it should be mapping

00:39:39,100 --> 00:39:44,530
it maps it too strongly type class in

00:39:41,920 --> 00:39:47,590
the client API and then pushes it

00:39:44,530 --> 00:39:50,100
through to the repository it amazingly

00:39:47,590 --> 00:39:50,100
works really well

00:39:51,710 --> 00:40:00,270
so the next big module in Drupal is our

00:39:56,580 --> 00:40:03,210
cube processor kind of already mentioned

00:40:00,270 --> 00:40:08,430
it exposes the update create and delete

00:40:03,210 --> 00:40:10,560
cues for our entities it does use the

00:40:08,430 --> 00:40:12,150
native Drupal queue but it extends it

00:40:10,560 --> 00:40:14,420
there's a few extra fields that we've

00:40:12,150 --> 00:40:17,070
needed in our queue for things like

00:40:14,420 --> 00:40:19,260
debugging if we end up with a site that

00:40:17,070 --> 00:40:20,100
has maybe twenty thousand items that

00:40:19,260 --> 00:40:21,570
need to be pushed through to the

00:40:20,100 --> 00:40:23,190
repository and one of them is jammed in

00:40:21,570 --> 00:40:25,770
the queue we needed a bit more insight

00:40:23,190 --> 00:40:27,900
and how to actually fix that issue and

00:40:25,770 --> 00:40:29,880
the standard ripple Q actually just

00:40:27,900 --> 00:40:31,470
stores all your data as blobs in a

00:40:29,880 --> 00:40:33,390
column and doesn't really give you much

00:40:31,470 --> 00:40:35,640
insight unless you load up the item and

00:40:33,390 --> 00:40:39,330
then inspect it that that's annoying if

00:40:35,640 --> 00:40:41,100
you've got a lot of items in a queue our

00:40:39,330 --> 00:40:44,310
queue processor also subscribes to the

00:40:41,100 --> 00:40:47,370
event queue so on cron job or on drudge

00:40:44,310 --> 00:40:49,320
cron whatever we want to run processes

00:40:47,370 --> 00:40:51,120
our event queue in the content

00:40:49,320 --> 00:40:54,450
repository and steps through and

00:40:51,120 --> 00:40:56,460
actually stores each item from the CR

00:40:54,450 --> 00:40:59,940
event queue in its own Drupal event

00:40:56,460 --> 00:41:02,640
queue which are then an axon and part of

00:40:59,940 --> 00:41:04,710
this reason is again what if the CRS

00:41:02,640 --> 00:41:06,660
goes down at some point or what if

00:41:04,710 --> 00:41:08,730
there's a problem importing the content

00:41:06,660 --> 00:41:11,160
to Drupal we needed a reference point

00:41:08,730 --> 00:41:13,650
where we'd go hey this this event had an

00:41:11,160 --> 00:41:16,920
issue we're not going to run anymore but

00:41:13,650 --> 00:41:19,410
is is one had the problem now we can go

00:41:16,920 --> 00:41:21,270
and inspect it it's all about if we have

00:41:19,410 --> 00:41:23,850
a problem how can we quickly resolve it

00:41:21,270 --> 00:41:27,350
again central part of our system it's

00:41:23,850 --> 00:41:27,350
important that we had these worked out

00:41:30,410 --> 00:41:35,490
so the queue manager moment is fairly

00:41:33,390 --> 00:41:37,319
straightforward but it could have a lot

00:41:35,490 --> 00:41:39,210
more of an admin interface around it it

00:41:37,319 --> 00:41:41,579
just has a nice straightforward you can

00:41:39,210 --> 00:41:43,440
push queue or process a queue and it

00:41:41,579 --> 00:41:48,319
uses through people's batch API to just

00:41:43,440 --> 00:41:51,809
run through the items it has a lot of

00:41:48,319 --> 00:41:54,030
logic tied in with the server wrapper on

00:41:51,809 --> 00:41:56,520
how it handles failed items so when you

00:41:54,030 --> 00:41:58,500
push an article potentially things like

00:41:56,520 --> 00:42:01,319
taxonomy terms haven't ended up in the

00:41:58,500 --> 00:42:03,450
CIA yet so it has to then find out

00:42:01,319 --> 00:42:05,430
dependencies add them to the queue

00:42:03,450 --> 00:42:08,099
beforehand and then process them says

00:42:05,430 --> 00:42:14,280
some clever logic in the processor as

00:42:08,099 --> 00:42:17,400
well and that's like a screenshot of it

00:42:14,280 --> 00:42:18,960
actually working which we've only got to

00:42:17,400 --> 00:42:22,079
this stage in the last couple of weeks

00:42:18,960 --> 00:42:24,299
in our build we've started ingesting

00:42:22,079 --> 00:42:25,890
content from our legacy site into the

00:42:24,299 --> 00:42:28,380
new jurupa build we're working on the

00:42:25,890 --> 00:42:30,390
food site at the moment and we're

00:42:28,380 --> 00:42:32,780
testing out pushing all this content

00:42:30,390 --> 00:42:35,039
through to the repository and by indexed

00:42:32,780 --> 00:42:36,720
three or four thousand recipes in an

00:42:35,039 --> 00:42:38,670
afternoon it was just happily pushing

00:42:36,720 --> 00:42:43,859
the items through here so there's a

00:42:38,670 --> 00:42:45,630
really good moment to see that happen so

00:42:43,859 --> 00:42:47,369
I'll go over the big picture of how we

00:42:45,630 --> 00:42:48,960
connect to Drupal now upset a lot it's

00:42:47,369 --> 00:42:51,660
probably quite confusing but I'll just

00:42:48,960 --> 00:42:55,650
step through it so we have a node we

00:42:51,660 --> 00:42:57,690
save the node the CR field takes a

00:42:55,650 --> 00:43:01,279
snapshot of this node in its current

00:42:57,690 --> 00:43:03,450
state and puts it in the Drupal queue

00:43:01,279 --> 00:43:05,039
and that's all that happens at that

00:43:03,450 --> 00:43:07,890
point when the users interacting with

00:43:05,039 --> 00:43:09,329
that node we didn't want to push it

00:43:07,890 --> 00:43:11,010
directly through to the content

00:43:09,329 --> 00:43:13,770
repository at that time because what if

00:43:11,010 --> 00:43:14,760
the repository is down or what if there

00:43:13,770 --> 00:43:17,700
are other problems that would be

00:43:14,760 --> 00:43:19,529
blocking the users work and the site can

00:43:17,700 --> 00:43:21,029
continue working without it ending up in

00:43:19,529 --> 00:43:23,160
the repository might not be accessible

00:43:21,029 --> 00:43:24,869
on other websites yet but at least the

00:43:23,160 --> 00:43:28,380
particular site that this content is on

00:43:24,869 --> 00:43:32,450
can still function properly so then we

00:43:28,380 --> 00:43:35,880
have a divider a time divider on cron we

00:43:32,450 --> 00:43:38,670
push the queue in Drupal through the

00:43:35,880 --> 00:43:41,490
server wrapper which then converts the

00:43:38,670 --> 00:43:43,470
node by referencing the CR field does

00:43:41,490 --> 00:43:47,070
the mapping and the translating

00:43:43,470 --> 00:43:50,160
and it pushes a strongly-typed object

00:43:47,070 --> 00:43:54,090
that client api likes and can bal can

00:43:50,160 --> 00:43:57,210
validate through jason curl to the CR

00:43:54,090 --> 00:44:00,060
service which will then either persist

00:43:57,210 --> 00:44:02,460
it which will come back with response

00:44:00,060 --> 00:44:04,740
that's fail or success if it fails it'll

00:44:02,460 --> 00:44:06,000
end up back in the queue and it'll

00:44:04,740 --> 00:44:09,060
either work the next time because it's

00:44:06,000 --> 00:44:12,440
sold some of its dependencies or we'll

00:44:09,060 --> 00:44:12,440
have to go and inspect why it's failing

00:44:13,460 --> 00:44:21,210
so it's all simple I'm going to put it

00:44:19,080 --> 00:44:23,160
open to questions now because there

00:44:21,210 --> 00:44:24,840
might be lots there's a lot that I

00:44:23,160 --> 00:44:26,160
wanted to cover in this hour session but

00:44:24,840 --> 00:44:37,140
at the end of the day it's only an hour

00:44:26,160 --> 00:44:38,250
so questions please yep yep okay so I

00:44:37,140 --> 00:44:41,250
haven't really covered that because I

00:44:38,250 --> 00:44:44,280
knew I'd run out of time because views

00:44:41,250 --> 00:44:47,190
is integrated with our search we have a

00:44:44,280 --> 00:44:48,780
page which allows the editor to just

00:44:47,190 --> 00:44:51,420
type in whatever the hell they want they

00:44:48,780 --> 00:44:53,369
can click a button and we'll just have

00:44:51,420 --> 00:44:54,750
like the title of the article for

00:44:53,369 --> 00:44:56,460
example they can inspect it on the

00:44:54,750 --> 00:44:59,070
current site that it exists on because

00:44:56,460 --> 00:45:02,430
it's a link and they can just hit import

00:44:59,070 --> 00:45:04,230
and that doesn't get no it does get

00:45:02,430 --> 00:45:07,830
added to a queue gets added to a queue

00:45:04,230 --> 00:45:09,869
that is immediately run in in fact in

00:45:07,830 --> 00:45:11,670
event of failure it stays in like an

00:45:09,869 --> 00:45:13,470
import queue so that we as a developer

00:45:11,670 --> 00:45:15,420
team can inspect why it wasn't working

00:45:13,470 --> 00:45:18,599
but it's the same process it's just

00:45:15,420 --> 00:45:22,460
reversed so it goes from the CR as a get

00:45:18,599 --> 00:45:26,040
request from that / documents / uuid URL

00:45:22,460 --> 00:45:27,450
through the client API converts it from

00:45:26,040 --> 00:45:29,970
the strongly typed object to a node

00:45:27,450 --> 00:45:32,040
through the server effort and say and

00:45:29,970 --> 00:45:37,849
that commits it as a node through the

00:45:32,040 --> 00:45:37,849
entity metadata wrapper it's

00:45:38,930 --> 00:45:44,190
dribbles pulling and Drupal's pushing so

00:45:42,300 --> 00:45:46,340
pulling is grabbing stuff out of the CR

00:45:44,190 --> 00:45:58,830
and pushing and pushing it into the CR

00:45:46,340 --> 00:46:00,570
yeah yes yep absolutely we had a number

00:45:58,830 --> 00:46:03,780
of criteria set out to us from our

00:46:00,570 --> 00:46:05,730
editors which gave us scenarios of they

00:46:03,780 --> 00:46:07,890
would create content on one site and

00:46:05,730 --> 00:46:09,090
want to use it on another site but they

00:46:07,890 --> 00:46:10,950
would say that but then they might also

00:46:09,090 --> 00:46:14,190
want to change that content and not

00:46:10,950 --> 00:46:16,380
necessarily have a direct clone so we

00:46:14,190 --> 00:46:19,020
came up with a few methods of we can

00:46:16,380 --> 00:46:21,570
import the content the CR field keeps

00:46:19,020 --> 00:46:24,000
track of its source so we can deal with

00:46:21,570 --> 00:46:29,250
canonical URLs quite well and not get

00:46:24,000 --> 00:46:30,690
taxed for SEO and if the editor once say

00:46:29,250 --> 00:46:32,310
can detach it from the CR the

00:46:30,690 --> 00:46:34,620
relationships still there so we know

00:46:32,310 --> 00:46:37,500
that it's still got a loose connection

00:46:34,620 --> 00:46:40,890
but is its own HD in that point and that

00:46:37,500 --> 00:46:42,360
point the the CR field will then

00:46:40,890 --> 00:46:46,550
actually start to push that new content

00:46:42,360 --> 00:46:53,960
into the CR as whole brand new content

00:46:46,550 --> 00:46:53,960
back there thanks

00:47:04,910 --> 00:47:10,770
do you want to speak on that map put you

00:47:08,490 --> 00:47:12,720
on the spot so Matt matka stains the

00:47:10,770 --> 00:47:14,869
technical director at SBS so he's my

00:47:12,720 --> 00:47:14,869
boss

00:47:53,480 --> 00:48:00,570
yep yep good question so the question

00:47:58,920 --> 00:48:03,300
was how do we manage updates on other

00:48:00,570 --> 00:48:04,980
sites and let editors know our see our

00:48:03,300 --> 00:48:07,650
field has a plug-in system that we've

00:48:04,980 --> 00:48:10,790
written into it and it allows us to just

00:48:07,650 --> 00:48:14,369
write any plugin from send an email as

00:48:10,790 --> 00:48:16,590
drupal processes that event queue it'll

00:48:14,369 --> 00:48:17,820
see that it has that uuid in its system

00:48:16,590 --> 00:48:21,030
and goes hey I've already got this

00:48:17,820 --> 00:48:23,070
article as I'm processing this queue do

00:48:21,030 --> 00:48:24,380
I need to do anything on it sends it to

00:48:23,070 --> 00:48:26,970
this plug-in system which will

00:48:24,380 --> 00:48:28,980
potentially send an email to the editor

00:48:26,970 --> 00:48:30,840
saying this article has been updated do

00:48:28,980 --> 00:48:33,360
you want to change it it's been updated

00:48:30,840 --> 00:48:36,630
at its source sorry and then the editor

00:48:33,360 --> 00:48:38,040
can go are mine needs updating now or it

00:48:36,630 --> 00:48:41,100
can be automatically updated they can

00:48:38,040 --> 00:48:43,560
tick that box as a plug-in or they might

00:48:41,100 --> 00:48:46,400
not even care at all so we've kind of

00:48:43,560 --> 00:48:46,400
captured those as well

00:49:00,300 --> 00:49:04,840
believe it or not we haven't actually

00:49:02,230 --> 00:49:06,820
started working out much about editorial

00:49:04,840 --> 00:49:08,500
workflow I'll workflow varies from

00:49:06,820 --> 00:49:11,140
department to department but it's fairly

00:49:08,500 --> 00:49:12,820
fairly lightweight regardless of the

00:49:11,140 --> 00:49:14,700
workflow though it won't get pushed to

00:49:12,820 --> 00:49:18,400
the CR until it's ready for publishing

00:49:14,700 --> 00:49:19,840
or finalized or when we get to actually

00:49:18,400 --> 00:49:40,300
building that in that's probably what

00:49:19,840 --> 00:49:44,230
will happen yeah domain access in terms

00:49:40,300 --> 00:49:46,290
of Drupal yeah horribly messy when you

00:49:44,230 --> 00:49:48,700
go down that path in my experience

00:49:46,290 --> 00:49:51,070
didn't feel enough decoupled

00:49:48,700 --> 00:49:54,010
decentralized and wouldn't have given us

00:49:51,070 --> 00:49:56,550
enough flexibility around our AP is of

00:49:54,010 --> 00:49:59,860
what we want to do long term having our

00:49:56,550 --> 00:50:01,990
repository as an API just opens up so

00:49:59,860 --> 00:50:05,310
many doors of how we deal with content

00:50:01,990 --> 00:50:05,310
on mobile applications as well

00:50:36,960 --> 00:50:55,720
yep why didn't we do that so it it comes

00:50:52,720 --> 00:50:57,640
back to the point of being decoupled LCR

00:50:55,720 --> 00:50:59,590
benefits from not knowing about any

00:50:57,640 --> 00:51:01,300
other Drupal website our Drupal websites

00:50:59,590 --> 00:51:03,820
don't know about the other Drupal

00:51:01,300 --> 00:51:05,260
websites at all they just know they can

00:51:03,820 --> 00:51:07,090
get content from somewhere they can

00:51:05,260 --> 00:51:10,030
import it and they can react on it if

00:51:07,090 --> 00:51:12,400
there's an update to it and the point of

00:51:10,030 --> 00:51:14,770
it being decoupled is that potentially

00:51:12,400 --> 00:51:16,390
our food site could you know maybe it'll

00:51:14,770 --> 00:51:18,910
get sold off to someone else or maybe

00:51:16,390 --> 00:51:21,640
SBS will merge with ABC or channel

00:51:18,910 --> 00:51:23,940
Tanner who knows you know but we wanted

00:51:21,640 --> 00:51:23,940
to keep it

00:51:50,109 --> 00:52:04,390
in red building the cio itself probably

00:52:01,329 --> 00:52:06,819
took iron myself good three three four

00:52:04,390 --> 00:52:08,319
months that's two times three or four

00:52:06,819 --> 00:52:09,519
months we had a little bit of time

00:52:08,319 --> 00:52:13,690
before that where we're conceptualizing

00:52:09,519 --> 00:52:15,609
it with a greater team in terms of the

00:52:13,690 --> 00:52:17,380
Drupal implementation we've had some

00:52:15,609 --> 00:52:20,799
assistants they're from previous next

00:52:17,380 --> 00:52:22,509
just as Drupal resources and now it's

00:52:20,799 --> 00:52:26,700
all in-house our in-house dev team is

00:52:22,509 --> 00:52:26,700
actually around was it 12 people yeah

00:52:28,499 --> 00:52:47,470
they're all they're all drew people

00:52:30,430 --> 00:52:51,220
they're all drivel people now yep not

00:52:47,470 --> 00:52:54,400
yet we haven't seen any any issues with

00:52:51,220 --> 00:52:56,170
the stability yet we've we've got a good

00:52:54,400 --> 00:52:58,420
relationship with tengen here in sydney

00:52:56,170 --> 00:53:00,369
now as well so if we do run into any of

00:52:58,420 --> 00:53:04,420
those problems we can ask them at that

00:53:00,369 --> 00:53:07,660
point but MongoDB whichever version it's

00:53:04,420 --> 00:53:09,819
at 2.22 point one to point one point

00:53:07,660 --> 00:53:11,589
something it's fairly stable now with

00:53:09,819 --> 00:53:14,259
all of its replication it had some bugs

00:53:11,589 --> 00:53:15,940
in the drivers of PHP connecting to

00:53:14,259 --> 00:53:20,319
MongoDB which caused some issues with

00:53:15,940 --> 00:53:21,999
replication it had rapid development in

00:53:20,319 --> 00:53:24,940
the whole replication area where it took

00:53:21,999 --> 00:53:27,279
a master-slave method I think back in

00:53:24,940 --> 00:53:28,660
version 1.6 but now it's a lot cooler

00:53:27,279 --> 00:53:30,670
with the primary and secondary and

00:53:28,660 --> 00:53:33,099
failover and you can set up off-site

00:53:30,670 --> 00:53:34,539
backups that can be invisible nodes but

00:53:33,099 --> 00:53:39,029
come online if they need to be such

00:53:34,539 --> 00:53:39,029
great for it redundancy as well

00:53:42,890 --> 00:53:45,890
yep

00:53:53,150 --> 00:53:56,690
so maybe one day if we didn't want to

00:53:55,309 --> 00:53:58,099
use Drupal anymore that would be pretty

00:53:56,690 --> 00:54:16,460
easy as well we'll be able to build up a

00:53:58,099 --> 00:54:20,170
new site in non dribble yeah yep be the

00:54:16,460 --> 00:54:20,170
CR q doesn't really know much about

00:54:23,410 --> 00:54:33,619
doesn't it gets one text word in there

00:54:28,309 --> 00:54:37,690
sorry I'm just trying to find it yeah so

00:54:33,619 --> 00:54:40,640
every every site has a unique idea yeah

00:54:37,690 --> 00:54:44,059
every site has a unique unique ID of its

00:54:40,640 --> 00:54:45,440
site and it'll look in the queue of you

00:54:44,059 --> 00:54:48,260
know is this my content or is this

00:54:45,440 --> 00:54:49,760
another site so that allows us to index

00:54:48,260 --> 00:54:52,160
it per site as well so we can actually

00:54:49,760 --> 00:54:58,779
see what site it comes from without

00:54:52,160 --> 00:55:01,039
applying specific domains URLs etc yep I

00:54:58,779 --> 00:55:03,109
would love to open source this stuff

00:55:01,039 --> 00:55:05,869
it's not quite ready for that symphony

00:55:03,109 --> 00:55:07,190
stuff potentially is the Drupal stuff

00:55:05,869 --> 00:55:09,109
not quite because we need to do a lot

00:55:07,190 --> 00:55:10,730
more testing but anyone who wants to

00:55:09,109 --> 00:55:12,260
help contribute to this or wants to be

00:55:10,730 --> 00:55:15,170
using themselves definitely get into

00:55:12,260 --> 00:55:18,520
contact with us at SBS very keen to

00:55:15,170 --> 00:55:18,520
contribute back to the community

00:55:36,790 --> 00:55:53,540
so all part of it yet we want to

00:55:39,500 --> 00:55:55,430
contribute that back yep yep yep yep

00:55:53,540 --> 00:55:57,710
it's just like a standard drupal install

00:55:55,430 --> 00:55:58,970
they have their own content types you

00:55:57,710 --> 00:56:00,770
know just build it out like a normal

00:55:58,970 --> 00:56:02,210
drupal site and then through that field

00:56:00,770 --> 00:56:04,610
mapping that's where the connection

00:56:02,210 --> 00:56:11,240
happens of where content gets map

00:56:04,610 --> 00:56:16,790
through your drupal yep search on the

00:56:11,240 --> 00:56:18,260
front end is haha GSA we have a google

00:56:16,790 --> 00:56:20,560
search plants that crawls our network

00:56:18,260 --> 00:56:23,060
for the majority of our network but on

00:56:20,560 --> 00:56:25,700
things like our views views are backed

00:56:23,060 --> 00:56:28,430
by solar and it's the same solar index

00:56:25,700 --> 00:56:31,190
that the content repositories using so

00:56:28,430 --> 00:56:34,400
the Drupal is using Search API with the

00:56:31,190 --> 00:56:36,770
sarnia plug-in to read the index never

00:56:34,400 --> 00:56:43,369
does any writing the CR itself does the

00:56:36,770 --> 00:56:45,230
writing to the search index yep yeah

00:56:43,369 --> 00:56:48,260
well not just choosing from print editor

00:56:45,230 --> 00:56:50,930
but even even displaying let's say this

00:56:48,260 --> 00:56:52,369
is this is content this potential

00:56:50,930 --> 00:56:54,320
content could come straight from the

00:56:52,369 --> 00:56:59,090
search index and be represented on the

00:56:54,320 --> 00:57:00,410
page yeah virtually anything you'd

00:56:59,090 --> 00:57:08,380
normally get with the solemn

00:57:00,410 --> 00:57:08,380
implementation is what we can do now yep

00:57:08,609 --> 00:57:14,740
images are stored in the repository we

00:57:11,200 --> 00:57:16,839
built an image API path as well goes in

00:57:14,740 --> 00:57:20,859
as a JSON object we use file entity in

00:57:16,839 --> 00:57:23,950
Drupal and on push it actually base64

00:57:20,859 --> 00:57:25,420
encode the image which then gets decoded

00:57:23,950 --> 00:57:27,400
and that was the easiest way to push the

00:57:25,420 --> 00:57:29,410
metadata around the image and the image

00:57:27,400 --> 00:57:32,770
itself so if any of you went to the

00:57:29,410 --> 00:57:34,330
services thing this morning next door

00:57:32,770 --> 00:57:35,890
and they we're talking about how we're

00:57:34,330 --> 00:57:38,500
going to get services working with

00:57:35,890 --> 00:57:40,330
Drupal 8 I think that's the solution is

00:57:38,500 --> 00:57:44,200
just to use something like beat base64

00:57:40,330 --> 00:57:46,720
to pushing we'll put and get your items

00:57:44,200 --> 00:57:48,700
out we still actually have a natural

00:57:46,720 --> 00:57:52,359
path where you can browse the image as

00:57:48,700 --> 00:57:58,359
well not just pull it out through Jason

00:57:52,359 --> 00:58:00,070
that's encoded files we haven't built

00:57:58,359 --> 00:58:01,980
files in yet but it'll be the same same

00:58:00,070 --> 00:58:07,119
code it's the exact same code in our

00:58:01,980 --> 00:58:09,970
repository anything that's attached to a

00:58:07,119 --> 00:58:15,609
node of a file entity can be pushed

00:58:09,970 --> 00:58:21,280
through to the CR we do have CD ends at

00:58:15,609 --> 00:58:24,599
spsu any more questions wasn't that's

00:58:21,280 --> 00:58:24,599
six o'clock thanks for coming

00:58:28,359 --> 00:58:30,420

YouTube URL: https://www.youtube.com/watch?v=gYWoM7r3HKw


