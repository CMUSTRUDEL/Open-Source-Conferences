Title: DrupalCon Sydney 2013: Managing Code and Configuration with Update Functions (and staying sane)
Publication date: 2013-03-29
Playlist: DrupalCon Sydney - February 2013
Description: 
	You're developing a Drupal site and you've whipped up a set of custom modules and content types to give your client exactly what they needed. Post-launch the client wants to add some additional fields to one of their content types. No problem.

The quickest solution would be to log in to the live site, and add the fields using the content type interface, right? Check. But don't forget to make the same change on staging, and don't mess it up, it has to be exactly the same! And make sure you tell Alice, the other developer, to make the change on her dev deployment. Our quick update has turned a bright and sunny future into a dark, dystopian nightmare.

Managing the change gracefully across dev, staging and production environments means using trusty old hook_update_N();. By making pragmatic use of update functions in your modules and install profile you can rest easy knowing that all your deployments are on the same page.

This talk is aimed at developers who are familiar with building custom modules, and have at least taken a glance at install profiles. The talk will cover general concepts and planning, and will provide beginner and intermediate-level examples of update functions in practice.

Choose life. Choose sanity. Choose update functions.
Captions: 
	00:00:00,000 --> 00:00:07,109
okay guys well without further ado you

00:00:04,410 --> 00:00:08,880
guys have found yourself at a managing

00:00:07,109 --> 00:00:11,550
code and configuration with update

00:00:08,880 --> 00:00:13,830
functions and staying saying I think I

00:00:11,550 --> 00:00:16,139
hold the title of the longest talk title

00:00:13,830 --> 00:00:19,230
at the conference so it's one on my

00:00:16,139 --> 00:00:22,680
mouth I'm Lindsay gains I work for

00:00:19,230 --> 00:00:25,410
monkey in Melbourne we're a small web

00:00:22,680 --> 00:00:27,720
agency that does pretty much anything

00:00:25,410 --> 00:00:32,520
digital and we build a lot of sites in

00:00:27,720 --> 00:00:35,489
Drupal so yeah I thought I would give a

00:00:32,520 --> 00:00:38,579
talk about some of the processes that we

00:00:35,489 --> 00:00:41,640
use to kind of keep our sanity when

00:00:38,579 --> 00:00:45,710
working in Drupal sites where there

00:00:41,640 --> 00:00:45,710
might be a few different deployments

00:00:46,430 --> 00:00:52,289
this talk is targeted at developers

00:00:49,670 --> 00:00:54,719
probably people who are at the beginning

00:00:52,289 --> 00:00:56,340
end of the Drupal spectrum just getting

00:00:54,719 --> 00:00:59,190
started writing things like custom

00:00:56,340 --> 00:01:01,770
modules and starting to put custom sites

00:00:59,190 --> 00:01:03,899
together for your clients also at site

00:01:01,770 --> 00:01:08,900
builders who want to kind of make that

00:01:03,899 --> 00:01:08,900
transition I might just close this

00:01:14,440 --> 00:01:20,600
alright so hopefully some of you guys

00:01:17,810 --> 00:01:23,990
have at least written a custom module

00:01:20,600 --> 00:01:26,840
for Drupal 7 maybe you've worked on a

00:01:23,990 --> 00:01:29,420
site that has multiple deployments so by

00:01:26,840 --> 00:01:32,630
multiple deployments I I mean even

00:01:29,420 --> 00:01:35,660
things like your dev copy this stage and

00:01:32,630 --> 00:01:38,090
copy where you test or do QA with your

00:01:35,660 --> 00:01:42,740
client and finally the live or the

00:01:38,090 --> 00:01:45,320
production environment maybe some of you

00:01:42,740 --> 00:01:47,149
guys have seen install profiles at a

00:01:45,320 --> 00:01:48,979
minimum you've probably run like the

00:01:47,149 --> 00:01:56,030
minimal one when you were setting up a

00:01:48,979 --> 00:01:57,350
new site so a lot of times when we're

00:01:56,030 --> 00:02:00,850
working with Drupal we run into a

00:01:57,350 --> 00:02:03,440
problem to do with configuration you

00:02:00,850 --> 00:02:05,890
need to go through a bunch of different

00:02:03,440 --> 00:02:10,220
interfaces and click a bunch of stuff

00:02:05,890 --> 00:02:12,470
type in a few you know new values when

00:02:10,220 --> 00:02:14,090
you're developing a new feature or maybe

00:02:12,470 --> 00:02:16,489
trying to change something about the way

00:02:14,090 --> 00:02:17,840
that the site works whenever you

00:02:16,489 --> 00:02:20,269
encounter a situation like that in

00:02:17,840 --> 00:02:21,680
Drupal you know it could be a bit time

00:02:20,269 --> 00:02:23,959
consuming to go through all of that

00:02:21,680 --> 00:02:26,150
stuff and it's not just on your dev copy

00:02:23,959 --> 00:02:27,680
that you have to do it when you get your

00:02:26,150 --> 00:02:29,150
feature ready and you roll it out to

00:02:27,680 --> 00:02:30,890
staging you've got to go through the

00:02:29,150 --> 00:02:34,549
same process and set up the same

00:02:30,890 --> 00:02:36,769
configuration variables and then finally

00:02:34,549 --> 00:02:39,440
the nerve racking one is when you want

00:02:36,769 --> 00:02:41,269
to deploy your feature to live having to

00:02:39,440 --> 00:02:42,980
go through and click through all of that

00:02:41,269 --> 00:02:46,250
stuff just after you've deployed your

00:02:42,980 --> 00:02:47,780
code I think anyone who's gone through

00:02:46,250 --> 00:02:49,280
that process can find it a little bit

00:02:47,780 --> 00:02:51,709
nerve-wracking because you've got to get

00:02:49,280 --> 00:02:53,780
it right on live and also that's a lot

00:02:51,709 --> 00:02:56,570
of like clicking around and manual

00:02:53,780 --> 00:02:58,190
processes that I'm in the modern age

00:02:56,570 --> 00:03:03,500
hopefully we can automate some of that

00:02:58,190 --> 00:03:04,940
stuff so the risks of working like that

00:03:03,500 --> 00:03:07,670
of having to go through and manually

00:03:04,940 --> 00:03:09,650
update those kind of settings first of

00:03:07,670 --> 00:03:11,090
all the settings and the configuration

00:03:09,650 --> 00:03:13,250
that you're working with they don't live

00:03:11,090 --> 00:03:14,959
with the code when I say live with the

00:03:13,250 --> 00:03:16,340
code I mean the stuff that you're

00:03:14,959 --> 00:03:19,070
developing hopefully it's going into

00:03:16,340 --> 00:03:21,310
version control so your new feature has

00:03:19,070 --> 00:03:24,379
been committed if there's a setting

00:03:21,310 --> 00:03:25,110
that's relevant to that new feature that

00:03:24,379 --> 00:03:28,290
it depends

00:03:25,110 --> 00:03:30,450
on ideally we'd like for that setting to

00:03:28,290 --> 00:03:34,290
live with the code of the future in

00:03:30,450 --> 00:03:37,140
version control because that means that

00:03:34,290 --> 00:03:39,240
future deployments like won't miss out

00:03:37,140 --> 00:03:41,490
on it sometimes you'll be developing a

00:03:39,240 --> 00:03:44,460
feature branch in parallel to another

00:03:41,490 --> 00:03:46,500
developer and you want to make sure that

00:03:44,460 --> 00:03:49,890
those feature branches get the benefit

00:03:46,500 --> 00:03:51,300
of those configuration updates if you

00:03:49,890 --> 00:03:54,209
don't keep those kind of configuration

00:03:51,300 --> 00:03:56,459
changes in the code you won't be able to

00:03:54,209 --> 00:03:57,660
do things like automated testing this is

00:03:56,459 --> 00:03:59,370
what I'm going to go through today's

00:03:57,660 --> 00:04:01,740
kind of one of the core building blocks

00:03:59,370 --> 00:04:03,209
that you need to start using if you're

00:04:01,740 --> 00:04:06,720
going to start using things like simple

00:04:03,209 --> 00:04:10,080
tests did anyone here go to the simple

00:04:06,720 --> 00:04:11,120
test talk earlier today yeah I went as

00:04:10,080 --> 00:04:12,840
well I thought was really interesting

00:04:11,120 --> 00:04:14,790
that's something that we've only just

00:04:12,840 --> 00:04:17,400
started delving a bit deeper into a

00:04:14,790 --> 00:04:18,660
monkey so yet hopefully what you learn

00:04:17,400 --> 00:04:22,380
here in this talk will help you get

00:04:18,660 --> 00:04:25,470
there as well of course the most dire

00:04:22,380 --> 00:04:27,180
risk of working by doing all of your

00:04:25,470 --> 00:04:30,000
configuration manually is that you

00:04:27,180 --> 00:04:31,470
forget to update a deployments staging

00:04:30,000 --> 00:04:33,300
sites are often the ones that miss out

00:04:31,470 --> 00:04:34,919
all of a sudden something doesn't work

00:04:33,300 --> 00:04:36,810
properly and people don't really know

00:04:34,919 --> 00:04:39,000
why the client gets stressed that's

00:04:36,810 --> 00:04:41,220
never a good situation the other thing

00:04:39,000 --> 00:04:44,190
that happens all the time alice is

00:04:41,220 --> 00:04:46,350
working with Bob Alice updates the

00:04:44,190 --> 00:04:48,150
configuration on her dev site because of

00:04:46,350 --> 00:04:50,550
a new feature that she's built and she

00:04:48,150 --> 00:04:52,140
commits the code but she forgets to tell

00:04:50,550 --> 00:04:56,100
Bob to make that same configuration

00:04:52,140 --> 00:04:57,840
change on his site you know Bob might be

00:04:56,100 --> 00:04:58,979
in a situation where his dev copy some

00:04:57,840 --> 00:05:01,229
feature that he's working on just

00:04:58,979 --> 00:05:06,740
completely stops working he has no idea

00:05:01,229 --> 00:05:06,740
why this is Bob

00:05:09,520 --> 00:05:14,860
why isn't it working it was working a

00:05:12,320 --> 00:05:14,860
second ago

00:05:19,600 --> 00:05:32,590
while I was getting very agitated okay

00:05:29,470 --> 00:05:34,000
guys Bob lost his job after this and it

00:05:32,590 --> 00:05:40,570
was all because he didn't get the memo

00:05:34,000 --> 00:05:42,520
about updating his deployment so how do

00:05:40,570 --> 00:05:45,940
we solve this problem what's the tool

00:05:42,520 --> 00:05:49,330
that Drupal provides to us the tool is

00:05:45,940 --> 00:05:54,580
the update function or hook update and

00:05:49,330 --> 00:05:57,280
in the documentation it's a function

00:05:54,580 --> 00:06:01,870
that lives in the install file of your

00:05:57,280 --> 00:06:04,420
module basically you can use hook up day

00:06:01,870 --> 00:06:07,780
10 for any configuration or setting that

00:06:04,420 --> 00:06:10,510
lives in a database all Drupal devs have

00:06:07,780 --> 00:06:13,180
probably run updates before when you've

00:06:10,510 --> 00:06:15,100
updated a contributed module you can

00:06:13,180 --> 00:06:16,930
there's a couple ways to do it you can

00:06:15,100 --> 00:06:19,090
go to update dot PHP on your drupal

00:06:16,930 --> 00:06:23,680
install or if you used rush you can use

00:06:19,090 --> 00:06:25,060
drush update DV the configuration if

00:06:23,680 --> 00:06:26,800
you're using if you're putting your

00:06:25,060 --> 00:06:28,630
configuration and an update function it

00:06:26,800 --> 00:06:31,060
means that it lives with the code in

00:06:28,630 --> 00:06:32,980
version control so the same commits that

00:06:31,060 --> 00:06:36,580
have your new feature they will also

00:06:32,980 --> 00:06:38,500
have the updated configurations in

00:06:36,580 --> 00:06:40,210
version control and that means that all

00:06:38,500 --> 00:06:44,650
the deployments that get updated they

00:06:40,210 --> 00:06:47,110
all get your new configurations running

00:06:44,650 --> 00:06:49,090
the update is almost instantaneous it's

00:06:47,110 --> 00:06:50,980
really quick so you won't be clicking

00:06:49,090 --> 00:06:52,510
around everywhere and you also kind of

00:06:50,980 --> 00:06:54,900
don't have that anxiousness when you're

00:06:52,510 --> 00:06:57,280
rolling out to the live server because

00:06:54,900 --> 00:06:59,410
you just click it and it goes bang

00:06:57,280 --> 00:07:01,180
within a few seconds after updating the

00:06:59,410 --> 00:07:04,120
code your site now has its new

00:07:01,180 --> 00:07:05,440
configuration as well and the added

00:07:04,120 --> 00:07:07,090
benefit is that your mouse won't be

00:07:05,440 --> 00:07:08,560
destroyed because you're absolutely

00:07:07,090 --> 00:07:10,840
clicking the hell out of it trying to

00:07:08,560 --> 00:07:15,880
get your configuration up there and of

00:07:10,840 --> 00:07:18,070
course Bob keeps his job so update

00:07:15,880 --> 00:07:20,470
functions they live in a modules install

00:07:18,070 --> 00:07:22,000
file some of you guys may like your

00:07:20,470 --> 00:07:23,680
modules may not even have an install

00:07:22,000 --> 00:07:26,080
file because you probably wouldn't need

00:07:23,680 --> 00:07:27,880
one unless you've got update functions

00:07:26,080 --> 00:07:29,380
there's only a couple other things that

00:07:27,880 --> 00:07:30,880
can go in and install file but yeah you

00:07:29,380 --> 00:07:32,349
just drop it into the same directory as

00:07:30,880 --> 00:07:34,520
your module

00:07:32,349 --> 00:07:36,709
originally they were used to update

00:07:34,520 --> 00:07:38,869
modules between major versions and you

00:07:36,709 --> 00:07:40,639
can still use them for that if you've

00:07:38,869 --> 00:07:42,349
got a module like one point out and

00:07:40,639 --> 00:07:43,819
you're completely changing the structure

00:07:42,349 --> 00:07:46,729
and you're releasing it as 2 point 0

00:07:43,819 --> 00:07:49,339
modules update functions will help your

00:07:46,729 --> 00:07:51,559
users like migrate all of their database

00:07:49,339 --> 00:07:53,509
stuff to the new version they can be

00:07:51,559 --> 00:07:55,039
used for a lot of different stuff you

00:07:53,509 --> 00:07:56,869
can add and remove fields from your

00:07:55,039 --> 00:07:59,779
content types that's a very common use

00:07:56,869 --> 00:08:02,899
case you can provide default values for

00:07:59,779 --> 00:08:07,129
any of your drupal variables or enable

00:08:02,899 --> 00:08:08,269
modules this is one that is really

00:08:07,129 --> 00:08:10,669
something that you guys should think

00:08:08,269 --> 00:08:13,550
about adopting you should probably never

00:08:10,669 --> 00:08:17,719
go into the modules page of your site

00:08:13,550 --> 00:08:19,039
and take an able and hit save unless

00:08:17,719 --> 00:08:20,899
you're just playing around with stuff on

00:08:19,039 --> 00:08:23,599
your dev copy if that's something that's

00:08:20,899 --> 00:08:25,159
being done on staging around live you

00:08:23,599 --> 00:08:28,159
should really put it in an update

00:08:25,159 --> 00:08:29,809
function the system table in the

00:08:28,159 --> 00:08:31,490
database keeps track of which modules

00:08:29,809 --> 00:08:33,940
are enabled and it also keeps track of

00:08:31,490 --> 00:08:36,259
the version number of every module so

00:08:33,940 --> 00:08:38,630
your update functions will only get run

00:08:36,259 --> 00:08:39,919
once because once they get run that

00:08:38,630 --> 00:08:44,029
version number in the database is

00:08:39,919 --> 00:08:46,009
updated interestingly update functions

00:08:44,029 --> 00:08:48,410
aren't just for modules they are also

00:08:46,009 --> 00:08:54,889
for install profiles that's going to be

00:08:48,410 --> 00:08:56,600
really important later so one of the

00:08:54,889 --> 00:08:57,949
interesting and kind of tricky things

00:08:56,600 --> 00:09:03,319
about update functions is they've got a

00:08:57,949 --> 00:09:04,699
very specific naming convention my

00:09:03,319 --> 00:09:08,509
module is obviously the name of your

00:09:04,699 --> 00:09:11,870
module update and then n.n can be a

00:09:08,509 --> 00:09:13,670
number ranging from like 6000 up to

00:09:11,870 --> 00:09:17,019
other things if you're working in drupal

00:09:13,670 --> 00:09:20,480
7 yours will always start with 7,000

00:09:17,019 --> 00:09:22,399
this update 7,000 is used when you're

00:09:20,480 --> 00:09:24,649
updating a module from the version

00:09:22,399 --> 00:09:29,240
Drupal 6 version of that module to

00:09:24,649 --> 00:09:31,430
Drupal 7 that's really really useful if

00:09:29,240 --> 00:09:35,269
you're doing a site migration from a

00:09:31,430 --> 00:09:36,589
Drupal 6 to a Drupal 7 most of us who

00:09:35,269 --> 00:09:39,889
are working with update functions will

00:09:36,589 --> 00:09:42,139
start with 7001 this is like you've got

00:09:39,889 --> 00:09:44,990
a Drupal 7 module and this is your first

00:09:42,139 --> 00:09:51,100
update function and then you just number

00:09:44,990 --> 00:09:54,470
them sequentially there's a special

00:09:51,100 --> 00:09:57,080
number for the second digit which is

00:09:54,470 --> 00:09:59,990
used to indicate what the major version

00:09:57,080 --> 00:10:01,850
number of your module currently is if

00:09:59,990 --> 00:10:04,610
you're not really using versions of your

00:10:01,850 --> 00:10:07,670
modules you'll pretty much never have to

00:10:04,610 --> 00:10:09,680
worry about that um second digit there

00:10:07,670 --> 00:10:11,560
is some interesting stuff around how

00:10:09,680 --> 00:10:13,850
these do get applied if you are

00:10:11,560 --> 00:10:16,310
migrating from major version numbers of

00:10:13,850 --> 00:10:17,839
modules but if you guys are ever in

00:10:16,310 --> 00:10:19,430
charge of doing something like that

00:10:17,839 --> 00:10:21,680
you'll probably be reading a lot of the

00:10:19,430 --> 00:10:25,760
documentation so I wouldn't worry about

00:10:21,680 --> 00:10:29,140
it too much right now so I'll just show

00:10:25,760 --> 00:10:34,790
you guys a really basic example of an

00:10:29,140 --> 00:10:37,459
update function in an example module so

00:10:34,790 --> 00:10:39,230
this is the stay sane install function

00:10:37,459 --> 00:10:44,360
can you guys read that at the back is it

00:10:39,230 --> 00:10:47,330
too small so this module just here is

00:10:44,360 --> 00:10:49,880
our update function 7001 all it's

00:10:47,330 --> 00:10:53,690
basically doing is doing three variable

00:10:49,880 --> 00:10:56,149
sets a variable set obviously changes

00:10:53,690 --> 00:10:58,750
the value of a named variable in the

00:10:56,149 --> 00:11:00,890
variables table you'll find that most

00:10:58,750 --> 00:11:02,930
contributed modules and a lot of core

00:11:00,890 --> 00:11:06,589
modules they store their configuration

00:11:02,930 --> 00:11:09,170
and their settings in variables so this

00:11:06,589 --> 00:11:12,170
is a nice way to get in in this example

00:11:09,170 --> 00:11:14,990
we've got a module that is an image

00:11:12,170 --> 00:11:16,370
carousel we've developed like a really

00:11:14,990 --> 00:11:18,050
rough version of it and rolled it out to

00:11:16,370 --> 00:11:19,820
the site and then we decided that we

00:11:18,050 --> 00:11:22,520
wanted to make some of these things

00:11:19,820 --> 00:11:24,470
configurable so we've created some

00:11:22,520 --> 00:11:27,230
functionality that uses these three

00:11:24,470 --> 00:11:29,360
variables to allow the administrator to

00:11:27,230 --> 00:11:31,339
make some tweaks to how the carousel

00:11:29,360 --> 00:11:34,240
gets displayed so the max number of

00:11:31,339 --> 00:11:38,450
items and we've got some javascript

00:11:34,240 --> 00:11:40,850
settings as well lastly our update

00:11:38,450 --> 00:11:44,690
function returns a string that's run

00:11:40,850 --> 00:11:47,350
through T that will basically put a

00:11:44,690 --> 00:11:51,890
message up on the completed page of

00:11:47,350 --> 00:11:53,660
update dot PHP if there's any like major

00:11:51,890 --> 00:11:55,310
change of functionality that the admin

00:11:53,660 --> 00:11:57,500
of the site should probably know about

00:11:55,310 --> 00:12:01,070
it's worthwhile putting a message

00:11:57,500 --> 00:12:03,200
there but it's also important to realize

00:12:01,070 --> 00:12:05,600
that if you're using dress up date DB

00:12:03,200 --> 00:12:07,580
those messages don't actually come

00:12:05,600 --> 00:12:09,380
through in the interface so if there's

00:12:07,580 --> 00:12:11,000
something really mission-critical you

00:12:09,380 --> 00:12:13,340
should probably put it in something like

00:12:11,000 --> 00:12:19,840
a Drupal set message on your modules

00:12:13,340 --> 00:12:23,860
configuration page now we've got another

00:12:19,840 --> 00:12:23,860
example update function

00:12:25,610 --> 00:12:31,399
in this one we're going to restructure

00:12:27,649 --> 00:12:34,610
some of those variables now I just want

00:12:31,399 --> 00:12:37,910
to show you up here the comment block

00:12:34,610 --> 00:12:40,100
for an update function actually gets

00:12:37,910 --> 00:12:42,110
used by drupal it's really important to

00:12:40,100 --> 00:12:44,180
have a comment at the top of every

00:12:42,110 --> 00:12:46,220
update function the reason that is is

00:12:44,180 --> 00:12:49,190
because Drupal actually reads this in

00:12:46,220 --> 00:12:51,290
and when you go to update PHP the

00:12:49,190 --> 00:12:53,660
description of what each update function

00:12:51,290 --> 00:12:55,220
is that you're about to run comes from

00:12:53,660 --> 00:12:57,800
the comments so always make sure that

00:12:55,220 --> 00:13:00,470
you at least include a concise comment

00:12:57,800 --> 00:13:03,560
of what you're about to do so in this

00:13:00,470 --> 00:13:05,899
one the specifics probably aren't really

00:13:03,560 --> 00:13:10,010
important but we've decided that instead

00:13:05,899 --> 00:13:12,110
of having to JavaScript like variables

00:13:10,010 --> 00:13:14,720
we're just going to put them all into

00:13:12,110 --> 00:13:18,860
one variable that is kind of a structure

00:13:14,720 --> 00:13:22,339
array so in this case we decided to

00:13:18,860 --> 00:13:26,500
change how our module works and some

00:13:22,339 --> 00:13:29,120
something needs to go in and update it

00:13:26,500 --> 00:13:31,940
one of the caveats of update functions

00:13:29,120 --> 00:13:35,180
is that you can't always assume that the

00:13:31,940 --> 00:13:36,829
module is loaded it's kind of

00:13:35,180 --> 00:13:38,449
counterintuitive but you may want to use

00:13:36,829 --> 00:13:40,399
some functions that you've defined in

00:13:38,449 --> 00:13:42,709
your module and if you need to do that

00:13:40,399 --> 00:13:46,519
you will need to explicitly load the

00:13:42,709 --> 00:13:48,190
module file because in the update dot

00:13:46,519 --> 00:13:50,930
PHP that's running it doesn't always

00:13:48,190 --> 00:13:54,339
instantiate every module so that's an

00:13:50,930 --> 00:13:54,339
important caveat to take note of

00:13:56,870 --> 00:14:01,610
in this one we don't have a message

00:13:58,940 --> 00:14:03,470
being returned because these changes are

00:14:01,610 --> 00:14:10,630
kind of all invisible to the admin they

00:14:03,470 --> 00:14:10,630
probably don't need to know all right

00:14:12,070 --> 00:14:18,230
update functions can also be used to do

00:14:14,740 --> 00:14:21,920
really like large updates of a lot of

00:14:18,230 --> 00:14:24,800
nodes for example let's say that you had

00:14:21,920 --> 00:14:27,230
a node with a field that had no default

00:14:24,800 --> 00:14:29,000
value and later on in the process you

00:14:27,230 --> 00:14:31,100
decided that you wanted to add a default

00:14:29,000 --> 00:14:33,020
value one of the things that you might

00:14:31,100 --> 00:14:34,910
want to do is go back through all of the

00:14:33,020 --> 00:14:36,920
nodes that were created before you made

00:14:34,910 --> 00:14:38,839
that decision and if they are set to

00:14:36,920 --> 00:14:41,240
know if they don't have a value yet you

00:14:38,839 --> 00:14:45,529
might want to slip that default value in

00:14:41,240 --> 00:14:46,970
for them in that case depending on how

00:14:45,529 --> 00:14:48,529
many modules you've got I mean how many

00:14:46,970 --> 00:14:50,900
nodes you've got if you've got like

00:14:48,529 --> 00:14:52,730
thousands of nodes you may not actually

00:14:50,900 --> 00:14:57,310
be able to update them all within one

00:14:52,730 --> 00:14:59,810
PHP execution time for this reason the

00:14:57,310 --> 00:15:02,480
update functions can use the batch API

00:14:59,810 --> 00:15:04,400
to kind of pass information about what

00:15:02,480 --> 00:15:07,520
has been completed and it can run in

00:15:04,400 --> 00:15:09,650
several passes the specifics of that are

00:15:07,520 --> 00:15:12,200
probably a bit advanced for this talk so

00:15:09,650 --> 00:15:14,029
feel free to look up the documentation

00:15:12,200 --> 00:15:15,620
on drupal org and check out the batch

00:15:14,029 --> 00:15:22,070
API if you need to do something like

00:15:15,620 --> 00:15:24,020
that so failures if your update function

00:15:22,070 --> 00:15:27,170
doesn't work properly you need to find a

00:15:24,020 --> 00:15:30,620
way to notify the code and also the

00:15:27,170 --> 00:15:35,930
administrator in Drupal 7 we use the

00:15:30,620 --> 00:15:37,520
Drupal update exception and as always

00:15:35,930 --> 00:15:40,040
it's good to throw that with like an

00:15:37,520 --> 00:15:41,860
illustrative method a message so that

00:15:40,040 --> 00:15:44,330
your administrator knows what's going on

00:15:41,860 --> 00:15:46,730
if there's a database error like some

00:15:44,330 --> 00:15:49,700
query or an update fails Drupal will

00:15:46,730 --> 00:15:52,339
automatically throw a PDO exception this

00:15:49,700 --> 00:15:53,959
one is probably familiar to you if

00:15:52,339 --> 00:16:00,440
you've ever run an update that didn't

00:15:53,959 --> 00:16:03,320
work that's typically the culprit it's

00:16:00,440 --> 00:16:07,370
also important to note that during the

00:16:03,320 --> 00:16:08,839
like when you enable a module even if

00:16:07,370 --> 00:16:10,550
it's the first time that that module has

00:16:08,839 --> 00:16:12,320
been enabled on a site

00:16:10,550 --> 00:16:14,890
your install functions your update

00:16:12,320 --> 00:16:18,230
functions for that module will not run

00:16:14,890 --> 00:16:21,080
you kind of assume that the update

00:16:18,230 --> 00:16:22,670
function is updating your database to

00:16:21,080 --> 00:16:25,519
something that's already taken care of

00:16:22,670 --> 00:16:30,490
in your new module but if you're doing

00:16:25,519 --> 00:16:33,200
things like providing defaults for

00:16:30,490 --> 00:16:36,610
variables and you're doing that in an

00:16:33,200 --> 00:16:39,019
update function you actually have to

00:16:36,610 --> 00:16:44,149
manually invoke the update function

00:16:39,019 --> 00:16:45,019
during your modules install this is

00:16:44,149 --> 00:16:47,570
something that you have to think

00:16:45,019 --> 00:16:49,310
carefully about when you're deciding

00:16:47,570 --> 00:16:51,140
exactly what's going on in your update

00:16:49,310 --> 00:16:54,320
functions because it's not always a good

00:16:51,140 --> 00:17:00,440
idea but it'll be pretty intuitive when

00:16:54,320 --> 00:17:02,870
you actually try to do it yourself okay

00:17:00,440 --> 00:17:04,699
so that's update functions kind of a

00:17:02,870 --> 00:17:08,480
summary now we're going to get into

00:17:04,699 --> 00:17:11,809
install profiles they are basically

00:17:08,480 --> 00:17:13,010
almost exactly the same as modules but

00:17:11,809 --> 00:17:15,890
they have some special logic built

00:17:13,010 --> 00:17:18,189
around they live in the slash profiles

00:17:15,890 --> 00:17:21,410
directory in your Drupal installation

00:17:18,189 --> 00:17:23,990
that fact that they don't live in sites

00:17:21,410 --> 00:17:26,449
is a constant frustration to a lot of

00:17:23,990 --> 00:17:30,550
people but that's just the way it is in

00:17:26,449 --> 00:17:36,740
Drupal 7 so typically a and install

00:17:30,550 --> 00:17:40,480
profile is like a module but it usually

00:17:36,740 --> 00:17:40,480
has a long list of dependencies

00:17:43,780 --> 00:17:47,810
what we would do when we set up an

00:17:45,800 --> 00:17:49,370
install profile is we pick all of the

00:17:47,810 --> 00:17:51,350
modules that are going to be enabled in

00:17:49,370 --> 00:17:53,660
our site and we put them all in there as

00:17:51,350 --> 00:17:56,180
dependencies because they're all

00:17:53,660 --> 00:17:58,580
dependencies when drupal goes to enable

00:17:56,180 --> 00:18:02,570
your install profile it has to enable

00:17:58,580 --> 00:18:06,200
all of those modules as well we go back

00:18:02,570 --> 00:18:08,810
to that in a second install profiles are

00:18:06,200 --> 00:18:11,360
also commonly used to set up a lot of

00:18:08,810 --> 00:18:13,430
like common parts of a Drupal site if

00:18:11,360 --> 00:18:16,880
you look at the standard install profile

00:18:13,430 --> 00:18:18,290
that comes with every Drupal it's very

00:18:16,880 --> 00:18:20,930
instructive there's a lot of interesting

00:18:18,290 --> 00:18:25,250
stuff in there it sets up the page and

00:18:20,930 --> 00:18:27,050
article content types it sets up user

00:18:25,250 --> 00:18:30,890
roles and it also does some

00:18:27,050 --> 00:18:32,390
configuration settings they were

00:18:30,890 --> 00:18:35,300
originally designed so that you could

00:18:32,390 --> 00:18:38,150
provide drupal distributions something

00:18:35,300 --> 00:18:40,790
like a conference website is going to be

00:18:38,150 --> 00:18:42,860
really similar across drupalcon sydney

00:18:40,790 --> 00:18:45,200
and rubicon portland even though they'll

00:18:42,860 --> 00:18:46,690
look completely different they're still

00:18:45,200 --> 00:18:48,860
going to have speaker submissions

00:18:46,690 --> 00:18:51,800
registration ticket sales stuff like

00:18:48,860 --> 00:18:53,780
that so basically you might set up an

00:18:51,800 --> 00:18:57,440
install profile that packages a set of

00:18:53,780 --> 00:19:00,770
modules perhaps a set of compatible

00:18:57,440 --> 00:19:02,510
themes and an install profile where the

00:19:00,770 --> 00:19:05,060
install profile is responsible for

00:19:02,510 --> 00:19:08,210
setting some sensible defaults it can

00:19:05,060 --> 00:19:11,150
also add a few extra pages like forms to

00:19:08,210 --> 00:19:12,470
the install process if there's certain

00:19:11,150 --> 00:19:17,990
things that you need to get out of the

00:19:12,470 --> 00:19:19,610
user ok so I don't know if any of you

00:19:17,990 --> 00:19:21,380
guys will be building distributions any

00:19:19,610 --> 00:19:23,870
time in the near future but you probably

00:19:21,380 --> 00:19:25,130
will be building a custom site and how

00:19:23,870 --> 00:19:27,320
is a custom site similar to a

00:19:25,130 --> 00:19:28,790
distribution like we talked about we're

00:19:27,320 --> 00:19:31,160
going to be deploying it in multiple

00:19:28,790 --> 00:19:34,010
places we've got our dev staging in live

00:19:31,160 --> 00:19:36,920
instances and they are all going to need

00:19:34,010 --> 00:19:38,690
the same modules installed they're also

00:19:36,920 --> 00:19:41,750
going to need the same configuration

00:19:38,690 --> 00:19:43,940
generally and now that we've got our

00:19:41,750 --> 00:19:47,090
configuration in an install profile it's

00:19:43,940 --> 00:19:49,970
portable and it lives in svn some of you

00:19:47,090 --> 00:19:51,800
guys may work by setting up a lot of

00:19:49,970 --> 00:19:54,350
stuff in your dev copy and then

00:19:51,800 --> 00:19:55,940
importing that database into staging and

00:19:54,350 --> 00:19:58,220
your leftover

00:19:55,940 --> 00:20:00,669
like all of the cat gifts and stuff that

00:19:58,220 --> 00:20:03,320
you've put in for your sample images if

00:20:00,669 --> 00:20:05,450
you put configuration and stuff like

00:20:03,320 --> 00:20:07,399
that in an install profile it means that

00:20:05,450 --> 00:20:08,779
when you deploy your staging site you

00:20:07,399 --> 00:20:10,940
actually are setting it up with all your

00:20:08,779 --> 00:20:13,730
configuration in place but none of your

00:20:10,940 --> 00:20:15,950
content unless your content is like

00:20:13,730 --> 00:20:17,779
absolutely pivotal to live with each

00:20:15,950 --> 00:20:19,549
iteration so you end up with clean

00:20:17,779 --> 00:20:21,740
installs everywhere and that's really

00:20:19,549 --> 00:20:23,419
nice especially for a client if the

00:20:21,740 --> 00:20:25,159
clients can be doing their own content

00:20:23,419 --> 00:20:27,590
population it's really nice for them to

00:20:25,159 --> 00:20:33,139
rock up to the staging site and the live

00:20:27,590 --> 00:20:34,789
site and just have everything clean so I

00:20:33,139 --> 00:20:36,139
said the before that the standard

00:20:34,789 --> 00:20:38,720
install profile that comes with Drupal

00:20:36,139 --> 00:20:40,340
is really interesting there's a lot of

00:20:38,720 --> 00:20:42,500
stuff in there and it's a good place to

00:20:40,340 --> 00:20:43,820
look to get an idea of the kind of

00:20:42,500 --> 00:20:46,850
things that you can do programmatically

00:20:43,820 --> 00:20:48,679
they create text filters you guys

00:20:46,850 --> 00:20:50,720
probably have worked with full HTML and

00:20:48,679 --> 00:20:53,139
filtered HTML text filters they're both

00:20:50,720 --> 00:20:55,759
created in the standard install profile

00:20:53,139 --> 00:20:59,269
it sets up and enables some default

00:20:55,759 --> 00:21:01,730
blocks it adds a few fields to the

00:20:59,269 --> 00:21:04,399
content types that's created and it sets

00:21:01,730 --> 00:21:12,259
some site-wide configuration creates

00:21:04,399 --> 00:21:14,240
taxonomy 'he's as i said and install

00:21:12,259 --> 00:21:16,039
profile can add additional steps to a

00:21:14,240 --> 00:21:17,720
drupal install if there's specific stuff

00:21:16,039 --> 00:21:20,240
that you need to collect but if you're

00:21:17,720 --> 00:21:23,840
working on a custom site you're not very

00:21:20,240 --> 00:21:25,309
likely to use that feature if you guys

00:21:23,840 --> 00:21:28,220
want to know more specifically about

00:21:25,309 --> 00:21:30,830
install profiles the install profile API

00:21:28,220 --> 00:21:32,960
is really great and there's a really

00:21:30,830 --> 00:21:36,730
good page on drupal org called how to

00:21:32,960 --> 00:21:36,730
write an install profile for Drupal 7

00:21:37,870 --> 00:21:42,080
alright so back to custom modules

00:21:40,909 --> 00:21:44,990
something that most of us are probably

00:21:42,080 --> 00:21:46,580
familiar with they deliver your

00:21:44,990 --> 00:21:48,830
functionality that your client is asked

00:21:46,580 --> 00:21:51,950
for they may be responsible for some

00:21:48,830 --> 00:21:53,690
custom content types sometimes you'll be

00:21:51,950 --> 00:21:55,690
changing the behavior of an existing

00:21:53,690 --> 00:21:58,279
contributed module that you installed

00:21:55,690 --> 00:21:59,870
and sometimes you're taking a bunch of

00:21:58,279 --> 00:22:02,679
contributed modules and all binding them

00:21:59,870 --> 00:22:04,549
together into some interesting feature

00:22:02,679 --> 00:22:07,250
yeah so that's what we're doing with

00:22:04,549 --> 00:22:08,779
custom modules so what kind of stuff are

00:22:07,250 --> 00:22:11,720
we going to put in our update functions

00:22:08,779 --> 00:22:13,369
for our custom modules you want to

00:22:11,720 --> 00:22:15,409
concentrate on generic functionality

00:22:13,369 --> 00:22:18,259
here like the example that we looked at

00:22:15,409 --> 00:22:21,559
we had a carousel and we were adding

00:22:18,259 --> 00:22:24,259
like a new admin feature that allowed

00:22:21,559 --> 00:22:27,169
them to select the number of items so

00:22:24,259 --> 00:22:28,990
you want to provide a default that's a

00:22:27,169 --> 00:22:32,570
great thing to go in an update function

00:22:28,990 --> 00:22:34,940
what you want to avoid is updating

00:22:32,570 --> 00:22:37,789
variables like that that already exists

00:22:34,940 --> 00:22:40,220
for your module if your module has a

00:22:37,789 --> 00:22:42,139
default max items of five but your

00:22:40,220 --> 00:22:45,259
clients decided that they want six or

00:22:42,139 --> 00:22:47,000
seven we don't want to put that in the

00:22:45,259 --> 00:22:53,600
update function for the module itself

00:22:47,000 --> 00:22:55,909
and I'll show you why so in our stay

00:22:53,600 --> 00:22:57,740
sane example module we've got our max

00:22:55,909 --> 00:23:02,629
items to display and some javascript

00:22:57,740 --> 00:23:04,429
settings let's say that our client wants

00:23:02,629 --> 00:23:07,070
us to update that number of max items to

00:23:04,429 --> 00:23:08,690
six it would be really easy because

00:23:07,070 --> 00:23:11,330
we've already got this module for us to

00:23:08,690 --> 00:23:14,059
just bang that right into an update

00:23:11,330 --> 00:23:16,730
function we're just setting a new value

00:23:14,059 --> 00:23:18,350
to an existing variable and that is

00:23:16,730 --> 00:23:21,169
going to be used on the page that

00:23:18,350 --> 00:23:25,039
renders our carousel to spit out six

00:23:21,169 --> 00:23:26,960
items instead of five what's going to

00:23:25,039 --> 00:23:30,080
happen then if we're using that module

00:23:26,960 --> 00:23:31,460
on another site one of the things as

00:23:30,080 --> 00:23:33,769
Drupal debs that you guys want to

00:23:31,460 --> 00:23:36,470
concentrate on doing is making sure that

00:23:33,769 --> 00:23:38,899
the features that you write are not tied

00:23:36,470 --> 00:23:41,600
to a specific site if at all possible

00:23:38,899 --> 00:23:42,950
you can write your carousel so that you

00:23:41,600 --> 00:23:44,210
can bring it across to the next site

00:23:42,950 --> 00:23:45,529
that you're working on you'll save a lot

00:23:44,210 --> 00:23:47,869
of time and a lot of money and

00:23:45,529 --> 00:23:49,820
especially if you're demoing that site

00:23:47,869 --> 00:23:51,769
to prospective clients they might see a

00:23:49,820 --> 00:23:55,039
feature that you've built for someone

00:23:51,769 --> 00:23:56,690
that they want but if you've got your

00:23:55,039 --> 00:23:58,850
stay sane module on a bunch of different

00:23:56,690 --> 00:24:01,279
sites and you add an update function to

00:23:58,850 --> 00:24:03,529
change that value it's going to probably

00:24:01,279 --> 00:24:05,450
cause problems because the second site

00:24:03,529 --> 00:24:08,379
that you've installed it on they may not

00:24:05,450 --> 00:24:10,759
want six max items on their front page

00:24:08,379 --> 00:24:12,619
so it's okay to provide a default value

00:24:10,759 --> 00:24:14,299
when the modules first enabled or in

00:24:12,619 --> 00:24:16,190
that feature that variable is first

00:24:14,299 --> 00:24:17,810
created but it's not a good idea to

00:24:16,190 --> 00:24:20,270
change that value

00:24:17,810 --> 00:24:24,350
in an update function if like the

00:24:20,270 --> 00:24:25,850
features already live so the question

00:24:24,350 --> 00:24:28,850
then is how do we manage that kind of

00:24:25,850 --> 00:24:32,060
change a change that deals with a module

00:24:28,850 --> 00:24:33,940
but it's not required for that module

00:24:32,060 --> 00:24:37,070
it's really a site specific

00:24:33,940 --> 00:24:39,260
configuration and basically to do those

00:24:37,070 --> 00:24:43,580
kind of updates we put that in our

00:24:39,260 --> 00:24:46,490
install profile if we used an install

00:24:43,580 --> 00:24:48,470
profile to set up both of those sites we

00:24:46,490 --> 00:24:50,420
can bang that same update function that

00:24:48,470 --> 00:24:53,750
does exactly the same thing in our

00:24:50,420 --> 00:24:56,000
sanity install profile because that's

00:24:53,750 --> 00:24:57,740
only on one side and not on the other it

00:24:56,000 --> 00:25:00,050
will update the site that wants six

00:24:57,740 --> 00:25:02,330
items and it will leave the one that's

00:25:00,050 --> 00:25:05,540
got stay sane with five items just the

00:25:02,330 --> 00:25:08,150
way it is the update functions in

00:25:05,540 --> 00:25:12,260
install profiles work exactly the same

00:25:08,150 --> 00:25:15,050
as update functions for modules so the

00:25:12,260 --> 00:25:17,210
only difference is the weight of install

00:25:15,050 --> 00:25:19,730
profiles is set very high set to a

00:25:17,210 --> 00:25:22,040
thousand by default so typically when

00:25:19,730 --> 00:25:24,380
your updates run the one in your install

00:25:22,040 --> 00:25:26,330
profile will run last but that's usually

00:25:24,380 --> 00:25:28,160
good anyway because you've put some

00:25:26,330 --> 00:25:29,930
other stuff in the update function for

00:25:28,160 --> 00:25:32,600
the module and you want that to run

00:25:29,930 --> 00:25:33,950
first before the install profiles like

00:25:32,600 --> 00:25:41,780
tries to give it a different default

00:25:33,950 --> 00:25:43,730
value alright so some best practices for

00:25:41,780 --> 00:25:46,700
our update functions when we're writing

00:25:43,730 --> 00:25:49,010
a module we only want to put changes

00:25:46,700 --> 00:25:51,050
that are necessary for all sites that

00:25:49,010 --> 00:25:53,900
use that module in our update function

00:25:51,050 --> 00:25:56,900
even if there's only one site using that

00:25:53,900 --> 00:25:58,850
module right now because you may put it

00:25:56,900 --> 00:26:02,330
on another site later it's just a good

00:25:58,850 --> 00:26:04,280
practice to follow but in install

00:26:02,330 --> 00:26:06,350
profiles you want to put configuration

00:26:04,280 --> 00:26:08,870
changes that are necessary for all of

00:26:06,350 --> 00:26:10,760
your deployments things that don't

00:26:08,870 --> 00:26:14,780
belong in a module that are specific to

00:26:10,760 --> 00:26:16,370
a specific site and that's a really good

00:26:14,780 --> 00:26:18,290
reason for you guys to use an install

00:26:16,370 --> 00:26:21,980
profile on every site that you build

00:26:18,290 --> 00:26:24,890
like a custom installed profile even if

00:26:21,980 --> 00:26:27,230
you kind of never use the installation

00:26:24,890 --> 00:26:29,990
part of your profile it's really good to

00:26:27,230 --> 00:26:31,640
have that file included so that you can

00:26:29,990 --> 00:26:31,910
put update functions in it later if you

00:26:31,640 --> 00:26:38,480
need

00:26:31,910 --> 00:26:40,780
update your configurations okay so how

00:26:38,480 --> 00:26:45,320
do we actually write our configuration

00:26:40,780 --> 00:26:46,400
updates in an update function this is

00:26:45,320 --> 00:26:49,460
going to be something that's different

00:26:46,400 --> 00:26:53,060
for every feature and every setting that

00:26:49,460 --> 00:26:54,350
you do because you know configurations

00:26:53,060 --> 00:26:56,560
for different contributed modules

00:26:54,350 --> 00:26:59,180
they're all stored in different ways

00:26:56,560 --> 00:27:01,580
typically though a lot of them put their

00:26:59,180 --> 00:27:06,530
stuff in the variables table so we can

00:27:01,580 --> 00:27:08,810
use get and set variables but again

00:27:06,530 --> 00:27:12,770
sometimes it can be tricky to figure out

00:27:08,810 --> 00:27:13,700
exactly what those are one thing that

00:27:12,770 --> 00:27:17,060
you can do there's a module called

00:27:13,700 --> 00:27:19,010
variable changes effectively what it

00:27:17,060 --> 00:27:22,100
does is it lets you backup your

00:27:19,010 --> 00:27:24,470
variables table and then you can go

00:27:22,100 --> 00:27:26,480
through and use the actual normal

00:27:24,470 --> 00:27:28,070
interface for drupal to go through and

00:27:26,480 --> 00:27:30,830
make whatever change it is that you need

00:27:28,070 --> 00:27:33,260
to make then there's a report that

00:27:30,830 --> 00:27:36,680
variable changes gives you that tells

00:27:33,260 --> 00:27:38,780
you which variables have been changed

00:27:36,680 --> 00:27:41,600
since you did your last backup so let's

00:27:38,780 --> 00:27:44,480
say that we wanted to change the site

00:27:41,600 --> 00:27:47,030
email address your client has created a

00:27:44,480 --> 00:27:49,460
new email for their site and you're not

00:27:47,030 --> 00:27:52,250
exactly sure where that lives you would

00:27:49,460 --> 00:27:54,680
back up your variables table then go to

00:27:52,250 --> 00:27:57,170
your site configuration page page and

00:27:54,680 --> 00:27:58,970
update that email address and click Save

00:27:57,170 --> 00:28:00,860
then you go to your variable changes

00:27:58,970 --> 00:28:02,840
report and it will tell you the name of

00:28:00,860 --> 00:28:07,460
the variable that's changed and what the

00:28:02,840 --> 00:28:09,320
new value is so then what you would do

00:28:07,460 --> 00:28:11,270
is take that variable name and the new

00:28:09,320 --> 00:28:14,180
value and you would put it in a variable

00:28:11,270 --> 00:28:18,230
set in an update function like the ones

00:28:14,180 --> 00:28:20,510
that we looked at before four modules

00:28:18,230 --> 00:28:22,340
that don't store their configuration in

00:28:20,510 --> 00:28:25,700
the variables table it can be a bit

00:28:22,340 --> 00:28:28,700
trickier to figure out like how to save

00:28:25,700 --> 00:28:31,820
the new change like where it goes what

00:28:28,700 --> 00:28:36,380
code we use to make that happen in a lot

00:28:31,820 --> 00:28:38,660
of cases the best way to to find out

00:28:36,380 --> 00:28:40,340
where that stuff is stored is just to

00:28:38,660 --> 00:28:43,520
read through some of the code of the

00:28:40,340 --> 00:28:44,960
module you don't really want to read

00:28:43,520 --> 00:28:46,460
through all of the code

00:28:44,960 --> 00:28:48,529
from some contributed module just to

00:28:46,460 --> 00:28:50,090
find that out though one of the best

00:28:48,529 --> 00:28:53,870
places that you can look is go straight

00:28:50,090 --> 00:28:56,179
to the admin forum and typically the

00:28:53,870 --> 00:28:58,190
submit function there will usually be

00:28:56,179 --> 00:29:00,470
like a variable set or something in

00:28:58,190 --> 00:29:03,409
there the other thing that you can do is

00:29:00,470 --> 00:29:05,600
go to those admin forms and use like a

00:29:03,409 --> 00:29:07,909
chrome inspector or Firefox debugging

00:29:05,600 --> 00:29:10,039
tools and look at the actual name of the

00:29:07,909 --> 00:29:14,289
input element that will usually

00:29:10,039 --> 00:29:14,289
corresponds to something like a variable

00:29:16,240 --> 00:29:21,500
ok so what things are we going to do

00:29:19,820 --> 00:29:24,590
that work really well in an update

00:29:21,500 --> 00:29:27,200
function basically anything that you can

00:29:24,590 --> 00:29:29,570
do with the Drupal API you can do in an

00:29:27,200 --> 00:29:30,740
update function specifically variable

00:29:29,570 --> 00:29:33,350
set is one of the things you're going to

00:29:30,740 --> 00:29:36,169
be using a lot you'll also be doing

00:29:33,350 --> 00:29:39,200
things like enabling modules when you

00:29:36,169 --> 00:29:41,570
are developing a custom site and you

00:29:39,200 --> 00:29:43,669
your client has asked for a new feature

00:29:41,570 --> 00:29:45,590
and you've decided there's a contributed

00:29:43,669 --> 00:29:49,279
module that does exactly what they need

00:29:45,590 --> 00:29:51,169
and I need to install that and enable it

00:29:49,279 --> 00:29:53,330
on their live site the way that you

00:29:51,169 --> 00:29:55,220
would go about doing that is you take

00:29:53,330 --> 00:29:57,049
that module you put it into your version

00:29:55,220 --> 00:29:59,000
control in the modules directory and you

00:29:57,049 --> 00:30:01,370
create an update function in your

00:29:59,000 --> 00:30:04,100
install profile that says enable that

00:30:01,370 --> 00:30:06,500
module then you deploy your new code to

00:30:04,100 --> 00:30:08,120
the live site you run updates PHP and

00:30:06,500 --> 00:30:10,580
that module is enabled for you straight

00:30:08,120 --> 00:30:12,380
away that's kind of the best practice

00:30:10,580 --> 00:30:15,799
way for enabling new modules on a

00:30:12,380 --> 00:30:18,100
staging or a live environment you can

00:30:15,799 --> 00:30:23,630
make changes the content types and

00:30:18,100 --> 00:30:26,510
modify fields this is probably going to

00:30:23,630 --> 00:30:30,830
happen with custom sites that have their

00:30:26,510 --> 00:30:32,899
own content types one of the things that

00:30:30,830 --> 00:30:35,510
we've had to do is we had a content type

00:30:32,899 --> 00:30:38,149
that gave you a drop-down list and we

00:30:35,510 --> 00:30:40,520
wanted to change one of the values to

00:30:38,149 --> 00:30:42,860
something else so we used an update

00:30:40,520 --> 00:30:44,659
function we looked through the entire

00:30:42,860 --> 00:30:46,669
database and change everything that had

00:30:44,659 --> 00:30:50,799
the old value to the new value and then

00:30:46,669 --> 00:30:53,270
modify the field you can also use it for

00:30:50,799 --> 00:30:54,649
working with user permissions pretty

00:30:53,270 --> 00:30:57,139
much anything that can go in a database

00:30:54,649 --> 00:30:58,460
query although obviously if there's a

00:30:57,139 --> 00:31:01,220
way to do something with

00:30:58,460 --> 00:31:07,940
api over a database query you should

00:31:01,220 --> 00:31:11,000
generally go with the API you will find

00:31:07,940 --> 00:31:12,890
in your work as a drupal developer that

00:31:11,000 --> 00:31:16,310
there are things that are very hard to

00:31:12,890 --> 00:31:17,870
put in update functions it's almost

00:31:16,310 --> 00:31:20,810
always doable but it can get pretty

00:31:17,870 --> 00:31:22,310
challenging anything that's hard to do

00:31:20,810 --> 00:31:25,030
programmatically obviously is going to

00:31:22,310 --> 00:31:27,110
be hard to put in an update function a

00:31:25,030 --> 00:31:29,300
lot of times you'll find that you're

00:31:27,110 --> 00:31:31,730
working with specific nodes or specific

00:31:29,300 --> 00:31:34,460
node IDs sometimes you'll find yourself

00:31:31,730 --> 00:31:36,590
with a variable that stores like the NID

00:31:34,460 --> 00:31:39,410
of your home page or something like that

00:31:36,590 --> 00:31:41,360
if you're not storing that need as a

00:31:39,410 --> 00:31:44,600
Drupal variable if you're storing it

00:31:41,360 --> 00:31:46,520
somewhere in the code that can get a bit

00:31:44,600 --> 00:31:48,230
hairy because you don't know that the

00:31:46,520 --> 00:31:50,680
node ID for that thing is going to be

00:31:48,230 --> 00:31:53,270
the same across dead of staging and live

00:31:50,680 --> 00:31:55,610
so basically any functionality that you

00:31:53,270 --> 00:31:57,650
have that relies on knowing the mid of a

00:31:55,610 --> 00:32:01,430
specific node please try to make sure

00:31:57,650 --> 00:32:03,320
it's in a variable somewhere complex

00:32:01,430 --> 00:32:05,990
changes to content types like the

00:32:03,320 --> 00:32:08,120
scenario I described before they can get

00:32:05,990 --> 00:32:10,100
pretty complicated especially when

00:32:08,120 --> 00:32:12,260
database assertions tell you that you're

00:32:10,100 --> 00:32:14,690
not allowed to change something like a

00:32:12,260 --> 00:32:18,590
field that already has values it is

00:32:14,690 --> 00:32:20,660
usually doable but it's hard for a good

00:32:18,590 --> 00:32:23,120
reason because when people have created

00:32:20,660 --> 00:32:25,310
content they don't necessarily want you

00:32:23,120 --> 00:32:27,020
to go in there and change one value to

00:32:25,310 --> 00:32:32,270
something else but if you have to do it

00:32:27,020 --> 00:32:35,090
you can enabling and placing blocks this

00:32:32,270 --> 00:32:37,130
is one of the things that just really

00:32:35,090 --> 00:32:39,380
wasn't designed to be done using the

00:32:37,130 --> 00:32:42,620
Drupal API it's always been kind of a

00:32:39,380 --> 00:32:44,450
bit of a sticking point it is doable and

00:32:42,620 --> 00:32:46,430
if you look at that standard install

00:32:44,450 --> 00:32:48,290
profile that comes with Drupal they do

00:32:46,430 --> 00:32:51,470
do that in the install profile so you

00:32:48,290 --> 00:32:53,330
can see kind of a method of what they do

00:32:51,470 --> 00:32:56,500
but it generally revolves around

00:32:53,330 --> 00:33:00,170
straight database queries and updates

00:32:56,500 --> 00:33:03,380
the last thing that is often troublesome

00:33:00,170 --> 00:33:07,220
is configuration updates to anything

00:33:03,380 --> 00:33:09,680
that deals with CTools a lot of site

00:33:07,220 --> 00:33:11,260
builders use things like views panels

00:33:09,680 --> 00:33:13,930
and pages

00:33:11,260 --> 00:33:17,230
and those have very complex structures

00:33:13,930 --> 00:33:19,810
in the database so it can be pretty hard

00:33:17,230 --> 00:33:21,280
to figure out sometimes what the

00:33:19,810 --> 00:33:23,080
existing values are and where they're

00:33:21,280 --> 00:33:27,010
stored and how to change them to

00:33:23,080 --> 00:33:28,990
something else but thankfully most of

00:33:27,010 --> 00:33:31,150
those modules have things like X

00:33:28,990 --> 00:33:33,550
portables and you can also use the

00:33:31,150 --> 00:33:36,640
features module typically to break those

00:33:33,550 --> 00:33:38,950
things out into a bit of PHP code that

00:33:36,640 --> 00:33:42,610
you can throw either into a file or an

00:33:38,950 --> 00:33:44,380
update function doing stuff like that

00:33:42,610 --> 00:33:47,020
with update functions the learning curve

00:33:44,380 --> 00:33:49,330
is pretty high but once you figure out

00:33:47,020 --> 00:33:55,180
how to do it once you pretty much have

00:33:49,330 --> 00:33:56,890
it I guess you always have to assess

00:33:55,180 --> 00:34:01,090
when you get into those complicated

00:33:56,890 --> 00:34:03,460
scenarios when it may actually be worth

00:34:01,090 --> 00:34:05,530
it to just go through and do it the old

00:34:03,460 --> 00:34:07,510
clicking way I don't recommend it

00:34:05,530 --> 00:34:09,850
because I like everything to live in the

00:34:07,510 --> 00:34:11,500
code and we already talked about all of

00:34:09,850 --> 00:34:13,179
the bad things that can happen when it

00:34:11,500 --> 00:34:14,950
doesn't but if you're working with

00:34:13,179 --> 00:34:17,320
something like a view and all you want

00:34:14,950 --> 00:34:19,570
to do is switch around some columns if

00:34:17,320 --> 00:34:21,700
it only takes you 30 seconds to do it

00:34:19,570 --> 00:34:24,159
using the interface and it's going to

00:34:21,700 --> 00:34:26,860
take you eight hours to write the update

00:34:24,159 --> 00:34:29,560
function obviously you've got to make a

00:34:26,860 --> 00:34:31,450
call about whether it's worth it or not

00:34:29,560 --> 00:34:32,950
I would always put it in an update

00:34:31,450 --> 00:34:39,399
function but it's up to you to decide

00:34:32,950 --> 00:34:41,110
for yourself so testing update functions

00:34:39,399 --> 00:34:43,899
are always interesting because they make

00:34:41,110 --> 00:34:46,300
one way changes to your database but all

00:34:43,899 --> 00:34:49,270
you need to do is use something like a

00:34:46,300 --> 00:34:53,379
database backup and restore tool you can

00:34:49,270 --> 00:34:56,050
use PHP my admin or sequel pro there's

00:34:53,379 --> 00:34:58,050
some like three drush commands that you

00:34:56,050 --> 00:35:01,000
need if you want to do that with drush

00:34:58,050 --> 00:35:05,680
and you can write your own bash scripts

00:35:01,000 --> 00:35:07,000
and stuff if you're into that the

00:35:05,680 --> 00:35:10,650
commands that you're going to want to

00:35:07,000 --> 00:35:10,650
use if you're using dress

00:35:16,760 --> 00:35:21,950
okay in our testing workflow first we're

00:35:20,480 --> 00:35:23,780
going to create all of the test data

00:35:21,950 --> 00:35:26,360
that we're going to need to test our new

00:35:23,780 --> 00:35:27,890
update function sometimes this step is

00:35:26,360 --> 00:35:30,260
trivial sometimes you've got to create

00:35:27,890 --> 00:35:31,820
four or five notes you always want to do

00:35:30,260 --> 00:35:33,380
that first and then take a database

00:35:31,820 --> 00:35:35,120
backup because otherwise you're going to

00:35:33,380 --> 00:35:37,430
do it every time it's going to take you

00:35:35,120 --> 00:35:40,600
a lot of time so enter your test data

00:35:37,430 --> 00:35:44,120
and then take a backup of the database

00:35:40,600 --> 00:35:46,550
so if you're using dress there's a great

00:35:44,120 --> 00:35:56,480
command called SQL dump can you guys see

00:35:46,550 --> 00:35:58,840
the settle not sure if I can actually

00:35:56,480 --> 00:35:58,840
increase

00:36:03,520 --> 00:36:10,150
anyway the command is SQL dump and and

00:36:07,570 --> 00:36:13,090
it gives you a messy bit of SQL syntax

00:36:10,150 --> 00:36:15,780
so we're just going to pipe it to a file

00:36:13,090 --> 00:36:19,240
in my case I'm going to pipe it to gzip

00:36:15,780 --> 00:36:23,710
and let gzipped save it as my DB

00:36:19,240 --> 00:36:25,930
snapshot so that will basically use

00:36:23,710 --> 00:36:28,510
MySQL dump it creates a file that has

00:36:25,930 --> 00:36:30,910
all of the SQL statements that you need

00:36:28,510 --> 00:36:33,940
to recreate the exact state of database

00:36:30,910 --> 00:36:38,100
that you had before so once I've created

00:36:33,940 --> 00:36:40,900
my backup then I'm going to go back and

00:36:38,100 --> 00:36:44,710
I'm going to run update talk PHP or

00:36:40,900 --> 00:36:46,630
drush update ddv if you guys are doing

00:36:44,710 --> 00:36:49,030
debugging and you want to like spit some

00:36:46,630 --> 00:36:50,080
output out during your update function

00:36:49,030 --> 00:36:52,900
you're going to want to use something

00:36:50,080 --> 00:36:55,360
like DD for any of you that are familiar

00:36:52,900 --> 00:36:58,270
with the devel module which i highly

00:36:55,360 --> 00:37:00,040
recommend there's basically two ways for

00:36:58,270 --> 00:37:02,500
developed to spit out output one of them

00:37:00,040 --> 00:37:04,210
is using DPM and that will spit it out

00:37:02,500 --> 00:37:06,970
in a really nice structure on the page

00:37:04,210 --> 00:37:09,730
the other way to do it is to run d D

00:37:06,970 --> 00:37:13,830
which spits everything out into a file

00:37:09,730 --> 00:37:21,690
on hard disk and and what you can do

00:37:13,830 --> 00:37:21,690
it's typically stored in temp

00:37:22,940 --> 00:37:26,109
drupal debug

00:37:27,940 --> 00:37:32,740
what I like to do is tail F and well I

00:37:31,930 --> 00:37:34,930
don't have it now because I've been

00:37:32,740 --> 00:37:39,850
doing any debugging but that will let

00:37:34,930 --> 00:37:41,500
you watch the changes as they happen so

00:37:39,850 --> 00:37:43,690
you've got your debugging output you're

00:37:41,500 --> 00:37:47,380
ready to run drush update DB or update

00:37:43,690 --> 00:37:49,930
dot PHP if you've got update if you've

00:37:47,380 --> 00:37:52,630
got a debug output examine what happened

00:37:49,930 --> 00:37:54,490
go to any page that you need to go to to

00:37:52,630 --> 00:37:56,470
confirm that it worked or how well it

00:37:54,490 --> 00:37:58,150
worked if you need to make some tweaks

00:37:56,470 --> 00:38:03,610
then you've got to go back and restore

00:37:58,150 --> 00:38:07,330
the database so to do that we use ad

00:38:03,610 --> 00:38:10,660
rush command called SQL see SQL see

00:38:07,330 --> 00:38:14,200
basically just lets you put query code

00:38:10,660 --> 00:38:15,940
straight into the CLI and like I said

00:38:14,200 --> 00:38:18,790
the snapshot that we made before using

00:38:15,940 --> 00:38:22,150
SQL dump that is just a file containing

00:38:18,790 --> 00:38:24,760
query code so because I gzipped mine I'm

00:38:22,150 --> 00:38:28,690
going to G unzip that file and I'll pipe

00:38:24,760 --> 00:38:30,280
it to drush SQL c and bang we've just

00:38:28,690 --> 00:38:32,470
restored our database to what it was

00:38:30,280 --> 00:38:33,880
before we ran our update function so

00:38:32,470 --> 00:38:42,760
then we can go back and do all of our

00:38:33,880 --> 00:38:44,830
testing again all right so trying to

00:38:42,760 --> 00:38:46,780
teach you guys some best practices about

00:38:44,830 --> 00:38:48,520
how to work in Drupal 7 but

00:38:46,780 --> 00:38:49,960
unfortunately everything that I'm

00:38:48,520 --> 00:38:52,150
telling you is going to get thrown out

00:38:49,960 --> 00:38:53,740
the window when we get to Drupal 8 not

00:38:52,150 --> 00:38:55,000
exactly everything but we're going to

00:38:53,740 --> 00:38:58,000
try and do things a bit of a different

00:38:55,000 --> 00:39:01,030
way install profiles are getting changed

00:38:58,000 --> 00:39:02,920
in Drupal 8 because for something that

00:39:01,030 --> 00:39:06,220
essentially is only used when you first

00:39:02,920 --> 00:39:07,900
set up a Drupal sites the core

00:39:06,220 --> 00:39:10,960
developers didn't want that code

00:39:07,900 --> 00:39:12,700
included essentially on every page view

00:39:10,960 --> 00:39:15,730
because your install profile is being

00:39:12,700 --> 00:39:17,770
loaded as a module on every page that's

00:39:15,730 --> 00:39:20,800
getting executed and that's some wasted

00:39:17,770 --> 00:39:22,630
cycles so in Drupal 8 install profiles

00:39:20,800 --> 00:39:24,340
are only going to be used during the

00:39:22,630 --> 00:39:26,890
install process and then they'll

00:39:24,340 --> 00:39:29,290
basically be ignored which means we

00:39:26,890 --> 00:39:31,390
can't put our configuration changes in

00:39:29,290 --> 00:39:33,839
update functions in our install profile

00:39:31,390 --> 00:39:35,940
anymore they'll just get ignored

00:39:33,839 --> 00:39:37,859
there's a few different ways that we're

00:39:35,940 --> 00:39:40,859
going to be doing it in Drupal 8 if you

00:39:37,859 --> 00:39:43,559
want to keep using this basic method

00:39:40,859 --> 00:39:46,440
what they recommend doing is that you

00:39:43,559 --> 00:39:49,259
create a special module just for your

00:39:46,440 --> 00:39:51,599
configuration changes and that module

00:39:49,259 --> 00:39:54,989
will be different on every site that you

00:39:51,599 --> 00:39:56,849
build it won't have any functionality in

00:39:54,989 --> 00:40:00,539
it it'll basically just be an install

00:39:56,849 --> 00:40:03,660
profile sorry uninstall function and

00:40:00,539 --> 00:40:06,180
install file for your module and all it

00:40:03,660 --> 00:40:08,009
will contain our update functions so you

00:40:06,180 --> 00:40:10,489
put your update functions into this

00:40:08,009 --> 00:40:12,809
special module and they will get run

00:40:10,489 --> 00:40:15,210
hopefully though we're all going to be

00:40:12,809 --> 00:40:17,819
moving to the new configuration

00:40:15,210 --> 00:40:18,960
management system the configuration

00:40:17,819 --> 00:40:21,779
management system that's being built

00:40:18,960 --> 00:40:23,849
into Drupal 8 is really nice because it

00:40:21,779 --> 00:40:26,400
actually puts all of your configuration

00:40:23,849 --> 00:40:29,640
into files and what that means is those

00:40:26,400 --> 00:40:32,039
files can live in your subversion and

00:40:29,640 --> 00:40:33,989
they don't have to be in code they don't

00:40:32,039 --> 00:40:35,430
have to be in update functions you can

00:40:33,989 --> 00:40:37,710
version them across your different

00:40:35,430 --> 00:40:39,329
deployments and stuff like that so the

00:40:37,710 --> 00:40:40,710
new configuration management coming in

00:40:39,329 --> 00:40:42,239
Drupal 8 is it going to be really nice

00:40:40,710 --> 00:40:44,700
and it's going to save us from having to

00:40:42,239 --> 00:40:46,920
do all this stuff but seeing is that's

00:40:44,700 --> 00:40:48,329
maybe a year or more away we're still

00:40:46,920 --> 00:40:54,059
going to have to use this method for the

00:40:48,329 --> 00:40:56,759
time being okay so just to sum up some

00:40:54,059 --> 00:40:59,190
best practices we're going to try and

00:40:56,759 --> 00:41:01,019
use our proper use of update functions

00:40:59,190 --> 00:41:04,469
both in our modules and our install

00:41:01,019 --> 00:41:07,259
profiles we must use version control

00:41:04,469 --> 00:41:09,150
it's absolutely crucial for any Drupal

00:41:07,259 --> 00:41:10,410
site any of you guys I'm sure that

00:41:09,150 --> 00:41:12,420
you're all using it you're all very

00:41:10,410 --> 00:41:15,719
smart people but if you're not start

00:41:12,420 --> 00:41:17,219
using it whenever you do an update from

00:41:15,719 --> 00:41:19,140
version control especially if you're

00:41:17,219 --> 00:41:20,700
working with another developer always

00:41:19,140 --> 00:41:21,869
make sure that you run update PHP

00:41:20,700 --> 00:41:23,609
because otherwise you're going to end up

00:41:21,869 --> 00:41:27,630
like Bob and we don't want to end up

00:41:23,609 --> 00:41:29,849
like Bob again if you haven't seen it

00:41:27,630 --> 00:41:32,160
before look into the devil module it's

00:41:29,849 --> 00:41:33,479
really simple but it provides a lot of

00:41:32,160 --> 00:41:36,420
great tools for when you're developing

00:41:33,479 --> 00:41:38,640
modules if you've never done any module

00:41:36,420 --> 00:41:40,349
development for before I highly

00:41:38,640 --> 00:41:43,789
recommend that you install that module

00:41:40,349 --> 00:41:43,789
and look at some of the documentation

00:41:43,999 --> 00:41:46,950
you're all probably using version

00:41:46,109 --> 00:41:48,450
control

00:41:46,950 --> 00:41:51,540
but one thing that you may want to look

00:41:48,450 --> 00:41:53,970
into is version control that works with

00:41:51,540 --> 00:41:56,369
one click deployments this can either be

00:41:53,970 --> 00:41:57,869
a service like spring loops or Beanstalk

00:41:56,369 --> 00:42:00,450
or it can be something that you host

00:41:57,869 --> 00:42:02,300
locally there's plenty of scripts out

00:42:00,450 --> 00:42:04,619
there that you can find on github

00:42:02,300 --> 00:42:06,119
basically a one-click deployment just

00:42:04,619 --> 00:42:08,070
means that it's somewhere where you go

00:42:06,119 --> 00:42:10,530
and set up the details of your staging

00:42:08,070 --> 00:42:13,890
and your live environment like SFTP

00:42:10,530 --> 00:42:17,820
credentials and it allows you to deploy

00:42:13,890 --> 00:42:20,160
whatever the new code is to your staging

00:42:17,820 --> 00:42:21,720
and live environments at the click of a

00:42:20,160 --> 00:42:24,570
button you don't have to worry about

00:42:21,720 --> 00:42:27,510
manually sft peeing in and updating your

00:42:24,570 --> 00:42:28,680
new files or whatever yeah it'll save

00:42:27,510 --> 00:42:31,440
you money and headaches I absolutely

00:42:28,680 --> 00:42:33,420
promise and for any of you that haven't

00:42:31,440 --> 00:42:35,579
looked at drush if you're going to get

00:42:33,420 --> 00:42:37,260
into developing it's definitely again a

00:42:35,579 --> 00:42:40,170
tool that you really need to check out

00:42:37,260 --> 00:42:43,440
things like it's got excellent tools for

00:42:40,170 --> 00:42:46,619
things like install profiles working

00:42:43,440 --> 00:42:53,099
with a database it's a huge wealth of

00:42:46,619 --> 00:42:54,960
functionality for any of you where this

00:42:53,099 --> 00:42:57,060
talk may have been a little bit too

00:42:54,960 --> 00:42:58,980
beginner and you want to get deeper into

00:42:57,060 --> 00:43:00,720
install profiles and things that you can

00:42:58,980 --> 00:43:03,089
do with that there's some really great

00:43:00,720 --> 00:43:05,400
resources specifically I recommend an

00:43:03,089 --> 00:43:09,359
article called drush make and install

00:43:05,400 --> 00:43:11,400
profiles there's basically a way that

00:43:09,359 --> 00:43:14,520
you can take your development copy and

00:43:11,400 --> 00:43:17,760
used rush make to create an install

00:43:14,520 --> 00:43:19,440
profile for you that includes all of the

00:43:17,760 --> 00:43:21,599
modules that you've got enabled all of

00:43:19,440 --> 00:43:24,869
your configurations and all of that

00:43:21,599 --> 00:43:26,010
stuff in one go so if that's something

00:43:24,869 --> 00:43:28,079
that you're interested in definitely

00:43:26,010 --> 00:43:29,790
check that article app these are a

00:43:28,079 --> 00:43:33,300
couple modules that are probably worth

00:43:29,790 --> 00:43:36,060
looking into we've got profiler which is

00:43:33,300 --> 00:43:38,700
similar in some ways to features in that

00:43:36,060 --> 00:43:40,680
it lets you take some of your

00:43:38,700 --> 00:43:45,089
configuration settings and export them

00:43:40,680 --> 00:43:46,319
automatically if you're interested in

00:43:45,089 --> 00:43:48,359
doing stuff like that you should also

00:43:46,319 --> 00:43:50,280
check out the configuration manager

00:43:48,359 --> 00:43:52,200
module the thing that's interesting

00:43:50,280 --> 00:43:54,690
about configuration manager it's pretty

00:43:52,200 --> 00:43:56,400
new and it's based on the same ideas

00:43:54,690 --> 00:43:59,190
that the configuration management in

00:43:56,400 --> 00:44:00,450
Drupal 8 is going to use so if you're

00:43:59,190 --> 00:44:02,520
looking to get ahead of the

00:44:00,450 --> 00:44:04,770
ball you might want to start looking

00:44:02,520 --> 00:44:06,390
into that soon and then you'll be really

00:44:04,770 --> 00:44:12,390
familiar with configuration management

00:44:06,390 --> 00:44:14,369
when Drupal 8 rolls around thanks guys I

00:44:12,390 --> 00:44:15,660
know that this probably wasn't the most

00:44:14,369 --> 00:44:17,599
exciting talk that you could have gone

00:44:15,660 --> 00:44:20,070
to because there's so much awesome stuff

00:44:17,599 --> 00:44:21,990
but you guys came here and learned about

00:44:20,070 --> 00:44:24,359
update functions so thanks a lot my name

00:44:21,990 --> 00:44:27,990
is Lindsey gains I'm also known as ether

00:44:24,359 --> 00:44:31,980
on drupal.org and I'm from monkey in

00:44:27,990 --> 00:44:33,930
Melbourne if you guys can I've been

00:44:31,980 --> 00:44:36,900
asked to remind you to evaluate the

00:44:33,930 --> 00:44:39,300
session and you can find the code

00:44:36,900 --> 00:44:42,089
examples that I showed you in a sandbox

00:44:39,300 --> 00:44:44,760
on drupal.org if you just download the

00:44:42,089 --> 00:44:46,440
slides off of the drupalcon sydney site

00:44:44,760 --> 00:44:48,420
you can get those links because i know

00:44:46,440 --> 00:44:51,150
that they're probably really small I

00:44:48,420 --> 00:44:53,190
would love to recommend some other talks

00:44:51,150 --> 00:44:55,200
that you guys should go to but it's a

00:44:53,190 --> 00:44:57,030
little bit late so I hope you enjoy

00:44:55,200 --> 00:44:58,680
drupalcon Sydney and I hope you guys

00:44:57,030 --> 00:45:01,800
come back to the next Drupal conference

00:44:58,680 --> 00:45:03,329
that we have here or anywhere else if

00:45:01,800 --> 00:45:05,780
you guys have any questions now's the

00:45:03,329 --> 00:45:05,780
time

00:45:11,300 --> 00:45:15,960
can I tell you anything about Merlin of

00:45:13,680 --> 00:45:18,060
chaos I haven't met him personally I

00:45:15,960 --> 00:45:21,990
just know that he writes some really

00:45:18,060 --> 00:45:23,580
really hairy code I've wrangled with

00:45:21,990 --> 00:45:26,010
some of the stuff that he's done trying

00:45:23,580 --> 00:45:27,630
to get things like panels and panel

00:45:26,010 --> 00:45:29,609
updates to go into Drupal update

00:45:27,630 --> 00:45:31,950
functions that was some of the hardest

00:45:29,609 --> 00:45:33,330
work that I've ever had to do but now I

00:45:31,950 --> 00:45:38,240
can't really tell you anything about him

00:45:33,330 --> 00:45:38,240
sorry any other questions

00:45:45,819 --> 00:45:48,819
yep

00:45:53,450 --> 00:45:58,869
yeah so that's a TIA yeah

00:46:03,510 --> 00:46:08,170
field display settings that's a bit

00:46:06,430 --> 00:46:10,300
tricky if you're working with a field

00:46:08,170 --> 00:46:15,370
that you have defined as part of a

00:46:10,300 --> 00:46:18,880
custom content type I guess it depends

00:46:15,370 --> 00:46:22,000
on whether that content type is really

00:46:18,880 --> 00:46:23,200
specific to like a customer site or

00:46:22,000 --> 00:46:27,760
whether it's something that you think

00:46:23,200 --> 00:46:29,200
could be like used across other sites it

00:46:27,760 --> 00:46:33,910
is something that you can get in and

00:46:29,200 --> 00:46:36,880
change programmatically but it's kind of

00:46:33,910 --> 00:46:38,530
a hard thing it's kind of going to be

00:46:36,880 --> 00:46:40,690
dependent on the specific site that

00:46:38,530 --> 00:46:42,190
you're working on I guess typically I

00:46:40,690 --> 00:46:45,610
would probably put it in the install

00:46:42,190 --> 00:46:48,610
profile and it's something that you use

00:46:45,610 --> 00:46:54,820
I think the function is called update

00:46:48,610 --> 00:46:57,100
instance but yeah it's pretty tricky

00:46:54,820 --> 00:46:58,570
that's stuff but when you when you're

00:46:57,100 --> 00:46:59,590
working with custom content types that's

00:46:58,570 --> 00:47:02,200
the kind of thing that you'll be putting

00:46:59,590 --> 00:47:07,270
in your update functions sorry did that

00:47:02,200 --> 00:47:12,570
answer the question at all the display

00:47:07,270 --> 00:47:12,570
sweet yeah

00:47:21,470 --> 00:47:27,809
basically there's a field read instance

00:47:25,200 --> 00:47:33,029
function and what it gives you is a big

00:47:27,809 --> 00:47:35,190
structured array it's it's it just tells

00:47:33,029 --> 00:47:37,829
you what is currently enabled on that

00:47:35,190 --> 00:47:40,319
field what you would basically have to

00:47:37,829 --> 00:47:42,359
do is go into the content management

00:47:40,319 --> 00:47:45,420
interface and go to that content type

00:47:42,359 --> 00:47:47,700
and go to that field and look at the

00:47:45,420 --> 00:47:50,039
drop-down of what you're available for

00:47:47,700 --> 00:47:52,829
matters are and when you inspect that in

00:47:50,039 --> 00:47:55,410
Chrome the names of each option and

00:47:52,829 --> 00:47:59,779
selects are the things that support that

00:47:55,410 --> 00:47:59,779
field so you pick the one that you want

00:48:02,660 --> 00:48:09,509
yep so you use a function called I think

00:48:06,599 --> 00:48:11,460
it's called read instance and you pass

00:48:09,509 --> 00:48:13,259
it the content type specifically that

00:48:11,460 --> 00:48:15,210
you're looking for and the name of the

00:48:13,259 --> 00:48:16,950
field that gives you this structured

00:48:15,210 --> 00:48:19,589
array with the current settings for that

00:48:16,950 --> 00:48:21,960
field and one of those options one of

00:48:19,589 --> 00:48:26,789
those things in the array will be the

00:48:21,960 --> 00:48:30,900
formatter and also whatever it's called

00:48:26,789 --> 00:48:33,390
the display and basically you just swap

00:48:30,900 --> 00:48:36,210
out that value in your complex in that

00:48:33,390 --> 00:48:38,249
array and then I think it's just save

00:48:36,210 --> 00:48:40,200
instance and that saves it back to the

00:48:38,249 --> 00:48:42,480
database there there's a lot of

00:48:40,200 --> 00:48:44,819
functions around reading and saving

00:48:42,480 --> 00:48:46,650
instances you just have to get the

00:48:44,819 --> 00:48:49,259
differences between an instance and a

00:48:46,650 --> 00:48:51,930
field like around your head because the

00:48:49,259 --> 00:48:53,549
field if you do a read field it will

00:48:51,930 --> 00:48:56,329
give you all of the available options

00:48:53,549 --> 00:48:56,329
for that field

00:49:04,480 --> 00:49:08,990
mmm we did have to do that on a site

00:49:07,190 --> 00:49:11,510
that I just worked on so I know that

00:49:08,990 --> 00:49:24,800
it's possible yeah if you come later

00:49:11,510 --> 00:49:27,319
I'll bring up the source good ok so what

00:49:24,800 --> 00:49:30,589
features does is it bangs everything

00:49:27,319 --> 00:49:32,990
into like just a module file and an

00:49:30,589 --> 00:49:35,660
install file for that module what you

00:49:32,990 --> 00:49:37,329
could do is you could use features to

00:49:35,660 --> 00:49:39,859
get it to export a bunch of that stuff

00:49:37,329 --> 00:49:41,780
but then you may have to go into the

00:49:39,859 --> 00:49:43,369
code that is generated and look at what

00:49:41,780 --> 00:49:44,930
it's doing and then you can copy and

00:49:43,369 --> 00:49:49,540
paste some of that stuff into an update

00:49:44,930 --> 00:49:49,540
function yeah

00:49:56,650 --> 00:50:01,250
yeah because features doesn't write

00:49:58,790 --> 00:50:05,810
update functions yeah it just writes the

00:50:01,250 --> 00:50:08,470
module and the install function there

00:50:05,810 --> 00:50:08,470
any other questions

00:50:19,930 --> 00:50:23,800
so you're talking about testing in an

00:50:22,060 --> 00:50:27,790
environment where you need to test on

00:50:23,800 --> 00:50:30,310
the live data I'll be honest I I really

00:50:27,790 --> 00:50:32,620
try to avoid ever exporting the live

00:50:30,310 --> 00:50:35,140
database into a staging or a dev

00:50:32,620 --> 00:50:37,480
environment a lot of the sites that we

00:50:35,140 --> 00:50:40,390
work with there are privacy concerns

00:50:37,480 --> 00:50:43,540
about having that data outside of like

00:50:40,390 --> 00:50:46,990
your hardened production server so like

00:50:43,540 --> 00:50:48,880
I I really like to just use lorem ipsum

00:50:46,990 --> 00:50:51,250
generators and node generators and stuff

00:50:48,880 --> 00:50:55,150
like that if you have to do it obviously

00:50:51,250 --> 00:50:58,330
you have to do it I would just export

00:50:55,150 --> 00:51:00,400
that data put it on your dev copy and

00:50:58,330 --> 00:51:02,170
write your update functions to work with

00:51:00,400 --> 00:51:04,750
that data make sure that everything goes

00:51:02,170 --> 00:51:07,300
right do whatever checks you need to do

00:51:04,750 --> 00:51:09,640
to make sure that you haven't messed up

00:51:07,300 --> 00:51:11,500
the data that's there and then hopefully

00:51:09,640 --> 00:51:13,450
delete that database off your dev copy

00:51:11,500 --> 00:51:15,640
and commit your update function and

00:51:13,450 --> 00:51:17,290
obviously before you deploy that new

00:51:15,640 --> 00:51:19,810
code to live you're going to take a

00:51:17,290 --> 00:51:21,670
database backup anyway so in case

00:51:19,810 --> 00:51:25,110
something does go wrong you got to roll

00:51:21,670 --> 00:51:25,110
back does that answer your question

00:51:40,359 --> 00:51:46,450
no it's figuring out what to put in the

00:51:42,880 --> 00:51:49,720
update function have you ever have you

00:51:46,450 --> 00:51:52,749
ever looked at the actual exportable for

00:51:49,720 --> 00:51:55,809
like a panel or a view it's like a huge

00:51:52,749 --> 00:52:01,029
block of PHP code it's usually a set of

00:51:55,809 --> 00:52:04,900
objects or structured arrays and it's

00:52:01,029 --> 00:52:07,720
not as simple as taking the initial

00:52:04,900 --> 00:52:09,759
exportable making the change and then

00:52:07,720 --> 00:52:12,999
taking the next exportable and doing a

00:52:09,759 --> 00:52:15,359
diff because when you do the update you

00:52:12,999 --> 00:52:18,009
need to include like the whole object

00:52:15,359 --> 00:52:20,950
but that's probably the best way to do

00:52:18,009 --> 00:52:23,259
it if that fun if that module has

00:52:20,950 --> 00:52:26,950
exportable there are some things like

00:52:23,259 --> 00:52:29,019
panels that make it almost impossible

00:52:26,950 --> 00:52:33,309
for you to do that stuff

00:52:29,019 --> 00:52:35,589
programmatically especially because

00:52:33,309 --> 00:52:39,279
oftentimes you're working in a situation

00:52:35,589 --> 00:52:41,200
where if you're using panels the client

00:52:39,279 --> 00:52:44,289
may have gone and made a bunch of

00:52:41,200 --> 00:52:46,599
changes to a page that haven't been done

00:52:44,289 --> 00:52:48,640
on your dev copy and you can't really

00:52:46,599 --> 00:52:50,349
tell your client to like follow this

00:52:48,640 --> 00:52:51,940
methodology because that's a whole

00:52:50,349 --> 00:52:54,880
reason that you installed panels in the

00:52:51,940 --> 00:52:57,009
first place in cases like that you

00:52:54,880 --> 00:53:00,359
really kind of do need to go to the live

00:52:57,009 --> 00:53:03,339
database get that data into your

00:53:00,359 --> 00:53:06,130
development copy do those dips and put

00:53:03,339 --> 00:53:07,869
it in an update function and this is

00:53:06,130 --> 00:53:09,430
probably the hardest part is telling

00:53:07,869 --> 00:53:11,619
your client that while you're working on

00:53:09,430 --> 00:53:14,890
the feature they can't touch the panels

00:53:11,619 --> 00:53:16,739
for that page yeah it's just always

00:53:14,890 --> 00:53:20,710
tricky I guess working with those

00:53:16,739 --> 00:53:22,420
heavily client-focused like features

00:53:20,710 --> 00:53:28,839
that allow them to click through a lot

00:53:22,420 --> 00:53:30,130
of configuration any other questions all

00:53:28,839 --> 00:53:33,779
right cool thank you guys so much for

00:53:30,130 --> 00:53:33,779
coming and listening yourself

00:53:35,859 --> 00:53:40,359
you guys have any questions just come

00:53:38,089 --> 00:53:40,359

YouTube URL: https://www.youtube.com/watch?v=cZRgmIkam8I


