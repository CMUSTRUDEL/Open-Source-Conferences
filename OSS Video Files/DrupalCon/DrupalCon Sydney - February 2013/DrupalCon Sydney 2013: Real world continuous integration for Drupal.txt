Title: DrupalCon Sydney 2013: Real world continuous integration for Drupal
Publication date: 2013-03-29
Playlist: DrupalCon Sydney - February 2013
Description: 
	Continuous integration (CI) is a practice in software development that builds, tests and deploys changes automatically, usually multiple times a day, on each change to a code base.

Find out how this practice can apply specifically to Drupal projects and see a working continuous integration setup in action and in a Drupal context.

Intended audience
Developers and shops interested in scaling their teams by automating their build and deploy processes.
The tools and techniques demonstrated would be of particular use and interest to those using Drupal to develop distributions or applications/products.

Pre-requisites
It is assumed you are familiar with the basics of team software development including version control, multiple environments and code based development in a Drupal context (update functions, exportables, etc.)
You should also be familiar with using Drush to drive Drupal sites from the command line.

Topics covered
The presentation will be in two parts. Part one defines the different build, test and deploy stages of a CI workflow and gives tool recommendations for each stage including Drupal specific demonstrations. Part two demonstrates a complete CI stack that leverages the Aegir platform for parts of the build and deploy tasks. The Jenkins CI server (http://jenkins-ci.org/) will be utilised throughout.
Captions: 
	00:00:00,000 --> 00:00:13,500
hi sorry I'm going to start okay this is

00:00:08,910 --> 00:00:16,410
a continuous integration kind of a it's

00:00:13,500 --> 00:00:20,520
been marked advance but it is really an

00:00:16,410 --> 00:00:21,840
introduction to see I so i'll try to be

00:00:20,520 --> 00:00:27,289
clear about sort of what's in it in case

00:00:21,840 --> 00:00:30,500
you expecting something different I'm

00:00:27,289 --> 00:00:33,390
Boris I'm a developer previousnext and

00:00:30,500 --> 00:00:40,129
I've been a triple user for about six

00:00:33,390 --> 00:00:40,129
years about up for professionally and

00:00:40,190 --> 00:00:46,230
might just get quick gauge on who's in

00:00:42,570 --> 00:00:48,510
the room who here is actually like note

00:00:46,230 --> 00:00:51,270
is pretty sure they're not CIA is about

00:00:48,510 --> 00:00:54,000
or have built like yeah so you're not

00:00:51,270 --> 00:01:00,180
supposed to be here okay that's fine but

00:00:54,000 --> 00:01:01,469
it might be might be useful anyway so

00:01:00,180 --> 00:01:03,570
I'm going to take a little bit of a

00:01:01,469 --> 00:01:09,180
different approach with this this talk

00:01:03,570 --> 00:01:11,280
I'm not going to kind of do like a long

00:01:09,180 --> 00:01:15,090
demo where I just hit buttons on Jenkins

00:01:11,280 --> 00:01:17,549
or anything like that it's not very cool

00:01:15,090 --> 00:01:20,780
focused we have tried getting this some

00:01:17,549 --> 00:01:23,670
of the motivations for actually doing

00:01:20,780 --> 00:01:26,759
continuous integration and try to get to

00:01:23,670 --> 00:01:29,790
some of the reasons why we don't do it

00:01:26,759 --> 00:01:32,400
in Drupal projects for the most part of

00:01:29,790 --> 00:01:34,530
those people who built CI setups like

00:01:32,400 --> 00:01:39,560
are you doing this on Drupal projects

00:01:34,530 --> 00:01:39,560
can you put your hand up if you are okay

00:01:39,950 --> 00:01:48,590
that's about probably about a third

00:01:43,470 --> 00:01:48,590
drink all right

00:01:53,450 --> 00:02:02,479
okay so I think about half you don't

00:02:00,439 --> 00:02:08,119
really know know what C is about so

00:02:02,479 --> 00:02:10,069
we'll cover that and particularly how

00:02:08,119 --> 00:02:13,280
how it might apply to Drupal project so

00:02:10,069 --> 00:02:16,670
it's a bit of a forward-looking topic to

00:02:13,280 --> 00:02:18,860
me because one of the one of the

00:02:16,670 --> 00:02:21,500
prerequisites for for continuous

00:02:18,860 --> 00:02:23,239
integration is good testing and I think

00:02:21,500 --> 00:02:27,680
that's sort of a bit of a week a weak

00:02:23,239 --> 00:02:30,730
spot in Drupal and it's a kind of a

00:02:27,680 --> 00:02:34,400
motivation for a lot of the Drupal 8

00:02:30,730 --> 00:02:38,030
core work so I think it's a good topic

00:02:34,400 --> 00:02:40,310
to start thinking about some of these

00:02:38,030 --> 00:02:42,680
practices and I mean if anyone is in the

00:02:40,310 --> 00:02:45,920
the agile project management talk this

00:02:42,680 --> 00:02:47,690
morning but it was kind of mentioned

00:02:45,920 --> 00:02:49,670
that the Drupal in Drupal project

00:02:47,690 --> 00:02:52,700
certainly tend to be a bit behind the

00:02:49,670 --> 00:02:55,340
ball with um a bit behind the times with

00:02:52,700 --> 00:02:57,769
a lot of agile practices and all the

00:02:55,340 --> 00:03:00,470
agile talks I see a triple cons for the

00:02:57,769 --> 00:03:06,290
most part tend to be project management

00:03:00,470 --> 00:03:07,880
focused and not not so much you know

00:03:06,290 --> 00:03:11,299
tumblr classic extreme programming

00:03:07,880 --> 00:03:13,459
practices of which the CI is 1 or

00:03:11,299 --> 00:03:16,609
test-driven development i mean i'd be

00:03:13,459 --> 00:03:18,560
very doubtful that many many drupal

00:03:16,609 --> 00:03:20,150
projects are doing much proper test

00:03:18,560 --> 00:03:21,680
driven development and there's good

00:03:20,150 --> 00:03:25,670
technical reasons for that it's it's

00:03:21,680 --> 00:03:28,639
kind of difficult but that's sort of the

00:03:25,670 --> 00:03:30,769
the framing so what will actually go

00:03:28,639 --> 00:03:34,790
through is just yeah some of the

00:03:30,769 --> 00:03:38,900
motivations for CI where what what

00:03:34,790 --> 00:03:46,069
problems we're trying to solve it is not

00:03:38,900 --> 00:03:48,170
a tool focused talk so I it's really

00:03:46,069 --> 00:03:53,750
about getting the idea that we're trying

00:03:48,170 --> 00:03:55,380
to improve quality and doing that by not

00:03:53,750 --> 00:03:57,150
letting bugs get released

00:03:55,380 --> 00:04:00,690
so we'll go through some of the basics

00:03:57,150 --> 00:04:02,910
and definitions and and some some ways

00:04:00,690 --> 00:04:05,880
and some kind of first steps that I've

00:04:02,910 --> 00:04:09,240
found out to kind of get started that

00:04:05,880 --> 00:04:10,620
that will make later on trying things

00:04:09,240 --> 00:04:12,480
together with with a continuous

00:04:10,620 --> 00:04:16,380
integration server a lot smoother if you

00:04:12,480 --> 00:04:19,110
kind of start on the right foot so and a

00:04:16,380 --> 00:04:23,580
lot of it's about clean lines with your

00:04:19,110 --> 00:04:25,740
your practices so deciding where your

00:04:23,580 --> 00:04:29,040
where your tesco and how they run and

00:04:25,740 --> 00:04:30,600
then what happens at deploy time and and

00:04:29,040 --> 00:04:33,990
and trying to get some real consistency

00:04:30,600 --> 00:04:35,520
around that so and of course we will

00:04:33,990 --> 00:04:39,810
cover continuous integration service

00:04:35,520 --> 00:04:46,890
because that's our that's where it all

00:04:39,810 --> 00:04:52,470
comes together so so I'm not going to

00:04:46,890 --> 00:04:55,080
demo Jenkins I'm not going to try to

00:04:52,470 --> 00:04:57,060
tell you which tools to use or give you

00:04:55,080 --> 00:04:58,800
sort of like one perfect one size fits

00:04:57,060 --> 00:05:02,310
all I'm really hoping that you'll come

00:04:58,800 --> 00:05:05,370
away with this understanding that the

00:05:02,310 --> 00:05:08,160
goals and knowing how to kind of build

00:05:05,370 --> 00:05:10,200
your own your own tool kid like a

00:05:08,160 --> 00:05:12,690
framework to think about some of the

00:05:10,200 --> 00:05:15,420
things that continuous integration I

00:05:12,690 --> 00:05:18,620
kind of brings up so i think it's a it's

00:05:15,420 --> 00:05:21,120
an interesting topic is like a sort of a

00:05:18,620 --> 00:05:23,970
catalyst for thinking about a lot of

00:05:21,120 --> 00:05:26,190
agile processes so even it stuff down to

00:05:23,970 --> 00:05:28,110
the way you're dealing with user stories

00:05:26,190 --> 00:05:30,360
and then how how you're going to

00:05:28,110 --> 00:05:31,890
actually like to implement things like

00:05:30,360 --> 00:05:34,680
test driven development or how you

00:05:31,890 --> 00:05:38,100
reviewing your architecture it also that

00:05:34,680 --> 00:05:39,480
gets touched on so we won't be talking

00:05:38,100 --> 00:05:41,910
about writing test there's a good talk

00:05:39,480 --> 00:05:44,930
tomorrow particularly drupal focused on

00:05:41,910 --> 00:05:49,650
writing tests you should go to that and

00:05:44,930 --> 00:05:55,230
and that's that's sort of the overview

00:05:49,650 --> 00:05:58,440
okay so we're talking about build build

00:05:55,230 --> 00:06:01,680
phase quality is is the the motivation

00:05:58,440 --> 00:06:05,220
here so problems problems with defects

00:06:01,680 --> 00:06:07,680
so not pre-build but really these parts

00:06:05,220 --> 00:06:09,720
here where we design development test

00:06:07,680 --> 00:06:11,699
locally then probably deploy to a test

00:06:09,720 --> 00:06:14,039
server so you should be familiar with

00:06:11,699 --> 00:06:15,740
this with this process and then they'll

00:06:14,039 --> 00:06:19,770
be review and then we fix bugs and

00:06:15,740 --> 00:06:22,620
that's when we start to get sometimes

00:06:19,770 --> 00:06:25,410
some annoying regressions and we fix

00:06:22,620 --> 00:06:28,020
more bugs and it gets expensive and they

00:06:25,410 --> 00:06:31,380
can kind of loop and and it all comes

00:06:28,020 --> 00:06:33,150
down to defects in the build mostly well

00:06:31,380 --> 00:06:37,910
that's that's what we can deal with with

00:06:33,150 --> 00:06:40,410
CI other agile processes might deal with

00:06:37,910 --> 00:06:44,550
leaks in requirements or dealing

00:06:40,410 --> 00:06:48,300
handling that but um this is engineering

00:06:44,550 --> 00:06:51,780
focus so right there okay so it's the

00:06:48,300 --> 00:06:53,880
quick quick review of software

00:06:51,780 --> 00:06:57,330
engineering 101 we don't want to release

00:06:53,880 --> 00:07:00,240
defects because that's just cheaper to

00:06:57,330 --> 00:07:04,800
fix them now than later basically so it

00:07:00,240 --> 00:07:06,960
turns out that um we want to this is

00:07:04,800 --> 00:07:08,760
some of the motivation behind our agile

00:07:06,960 --> 00:07:11,970
engineering practices as we want

00:07:08,760 --> 00:07:14,940
feedback so that we can reinfect them

00:07:11,970 --> 00:07:19,470
early and you see the cost increases not

00:07:14,940 --> 00:07:22,139
only when it's the defect is early earth

00:07:19,470 --> 00:07:24,240
but also when it's detected later so

00:07:22,139 --> 00:07:26,130
earlier stage require a defect in

00:07:24,240 --> 00:07:31,020
requirements detected in a production

00:07:26,130 --> 00:07:32,849
release is most are most costly so we're

00:07:31,020 --> 00:07:38,250
trying to trying to improve the this

00:07:32,849 --> 00:07:41,610
cost down at the front here so part of

00:07:38,250 --> 00:07:46,349
the problem is we do look a lot of

00:07:41,610 --> 00:07:48,509
parallel development and kind of

00:07:46,349 --> 00:07:52,310
developers go off on their own and work

00:07:48,509 --> 00:07:55,680
on work on their own solutions and and

00:07:52,310 --> 00:07:58,710
you know that that's good but it can

00:07:55,680 --> 00:08:02,159
lead to problems with too much work in

00:07:58,710 --> 00:08:05,220
progress and obviously it has to all or

00:08:02,159 --> 00:08:07,470
get integrated at some point so maybe

00:08:05,220 --> 00:08:09,080
some of you have experienced sort of an

00:08:07,470 --> 00:08:12,199
integration hell moment of you

00:08:09,080 --> 00:08:14,659
where you know you're working on team

00:08:12,199 --> 00:08:18,050
and somebody has working on a feature

00:08:14,659 --> 00:08:19,849
and then they go away for three weeks

00:08:18,050 --> 00:08:23,599
four weeks and then when they try to

00:08:19,849 --> 00:08:29,139
actually bring it back in there's

00:08:23,599 --> 00:08:33,110
problems and so that's one that's one

00:08:29,139 --> 00:08:37,159
one motivation so we want to integrate

00:08:33,110 --> 00:08:38,630
small parts but you know obviously

00:08:37,159 --> 00:08:40,479
there's this overhead with that

00:08:38,630 --> 00:08:43,909
integration can be sort of boring

00:08:40,479 --> 00:08:47,930
constantly thinking from from a common

00:08:43,909 --> 00:08:51,170
branch I'm a main line and then running

00:08:47,930 --> 00:08:53,480
tests again and then and go home over

00:08:51,170 --> 00:08:56,690
and over so we'd like to do it but we

00:08:53,480 --> 00:08:57,980
want to kind of make it make it a good

00:08:56,690 --> 00:09:02,060
process something that we want to do all

00:08:57,980 --> 00:09:04,160
the time so remove that friction so so

00:09:02,060 --> 00:09:06,850
that's sort of some of the some of the

00:09:04,160 --> 00:09:09,470
things we're dealing with you because um

00:09:06,850 --> 00:09:10,970
and that's where where some of the

00:09:09,470 --> 00:09:14,480
processes and tools come in so we're

00:09:10,970 --> 00:09:17,690
going to try and automate automate the

00:09:14,480 --> 00:09:20,959
integration task and try to make it not

00:09:17,690 --> 00:09:27,250
so wasteful in terms of time but but do

00:09:20,959 --> 00:09:27,250
it often so if it feels good do it

00:09:27,279 --> 00:09:33,399
integrating it can be painful and

00:09:35,050 --> 00:09:38,930
integrating small changes reveals

00:09:37,100 --> 00:09:40,690
problems earlier that top solves the

00:09:38,930 --> 00:09:45,769
problem we're trying to trance of and

00:09:40,690 --> 00:09:52,180
regularly produces feedback quicker than

00:09:45,769 --> 00:09:55,010
integrating it lots of granularity so

00:09:52,180 --> 00:09:57,640
that that's why these people came up

00:09:55,010 --> 00:10:01,459
with auditing integrate all the time

00:09:57,640 --> 00:10:07,880
which can sound crazy you've never seen

00:10:01,459 --> 00:10:12,890
it before but it can be done we with

00:10:07,880 --> 00:10:17,420
tools and with a bit of discipline and a

00:10:12,890 --> 00:10:19,310
bit of practice and and a bit of a bit

00:10:17,420 --> 00:10:20,060
of careful thought about what what

00:10:19,310 --> 00:10:28,130
you're actually doing

00:10:20,060 --> 00:10:30,770
and so so when we say continuous

00:10:28,130 --> 00:10:33,350
integration for those that are unaware

00:10:30,770 --> 00:10:35,330
of what we're actually talking about any

00:10:33,350 --> 00:10:38,090
change to the project and that can be

00:10:35,330 --> 00:10:42,860
some configuration or generally source

00:10:38,090 --> 00:10:45,710
code and application would whenever it's

00:10:42,860 --> 00:10:48,170
done in a common a common mainline that

00:10:45,710 --> 00:10:49,940
would trigger some sort of automated

00:10:48,170 --> 00:10:55,010
integration task that's what we're sort

00:10:49,940 --> 00:10:58,340
of aiming for so the goal is again to

00:10:55,010 --> 00:11:01,750
not release defects into production so

00:10:58,340 --> 00:11:06,020
we do that by keeping a careful eye on

00:11:01,750 --> 00:11:12,740
code quality project the quality of the

00:11:06,020 --> 00:11:15,080
project at every moment so so we also

00:11:12,740 --> 00:11:21,290
are going back to those those are

00:11:15,080 --> 00:11:23,690
ladybugs want to want to keep them in

00:11:21,290 --> 00:11:27,140
check and not let them sort of go off on

00:11:23,690 --> 00:11:31,130
their own and build incompatible

00:11:27,140 --> 00:11:33,830
solutions you've seen a dribble example

00:11:31,130 --> 00:11:36,590
maybe use a module stack that that is

00:11:33,830 --> 00:11:38,060
against what the team is chosen so maybe

00:11:36,590 --> 00:11:42,980
you're building a building a project

00:11:38,060 --> 00:11:45,380
with a you know a context module stack

00:11:42,980 --> 00:11:46,790
with the ties in with Omega and and does

00:11:45,380 --> 00:11:50,150
a little stuff like that and they go and

00:11:46,790 --> 00:11:51,470
install panels to do some layouts when

00:11:50,150 --> 00:11:54,470
you've been building a bunch of stuff

00:11:51,470 --> 00:11:58,220
with Delta module or something so that's

00:11:54,470 --> 00:12:00,020
it's one sort of one sort of motivation

00:11:58,220 --> 00:12:02,120
is that should try to keep that under

00:12:00,020 --> 00:12:04,670
wraps so that's one that's one kite

00:12:02,120 --> 00:12:07,310
equality is a is you know sort of psych

00:12:04,670 --> 00:12:09,560
building architecture but it's mainly

00:12:07,310 --> 00:12:12,320
transparency I mean we just we want to

00:12:09,560 --> 00:12:16,070
know what's like the code base is in

00:12:12,320 --> 00:12:20,570
everything from code styles to of course

00:12:16,070 --> 00:12:22,940
test running because yeah we want to fix

00:12:20,570 --> 00:12:24,980
the fix early so that's that's the main

00:12:22,940 --> 00:12:28,050
the main goal so it's a bit of a

00:12:24,980 --> 00:12:29,730
different mindset you might be used to

00:12:28,050 --> 00:12:32,700
you know having a different development

00:12:29,730 --> 00:12:36,029
server that you're kind of happy happy

00:12:32,700 --> 00:12:37,410
to be relatively unstable States at all

00:12:36,029 --> 00:12:39,690
times and you kind of are fix it later

00:12:37,410 --> 00:12:42,450
I've fixed it close to the lights or

00:12:39,690 --> 00:12:44,700
I'll fix it at the end of an iteration

00:12:42,450 --> 00:12:49,079
so this kind of makes you take a step

00:12:44,700 --> 00:12:50,640
back and and and makes you agree as a

00:12:49,079 --> 00:12:55,290
team you know no we're going to will

00:12:50,640 --> 00:12:57,269
actually maintain stability in this

00:12:55,290 --> 00:13:01,350
branch so so wherever co gets integrated

00:12:57,269 --> 00:13:03,930
it has it has to be clean so starting

00:13:01,350 --> 00:13:07,829
point any developer can can in theory

00:13:03,930 --> 00:13:11,160
come on download the source code trigger

00:13:07,829 --> 00:13:13,110
build we'll go over that insect and dumb

00:13:11,160 --> 00:13:15,209
and get going and not worry about are

00:13:13,110 --> 00:13:17,040
you know its unbroken state they can

00:13:15,209 --> 00:13:18,660
deal with and what not they should

00:13:17,040 --> 00:13:26,070
always have a clean point they can start

00:13:18,660 --> 00:13:29,459
from so and I there some other um you

00:13:26,070 --> 00:13:33,480
know workflow processes that this

00:13:29,459 --> 00:13:35,430
touches on around how you handle defects

00:13:33,480 --> 00:13:37,079
after the site as a team we are we going

00:13:35,430 --> 00:13:38,579
to you know how many defects are we

00:13:37,079 --> 00:13:41,130
going it going to deal with how long

00:13:38,579 --> 00:13:44,310
we're going to let the build that the

00:13:41,130 --> 00:13:45,870
state of the code go bad and do we stop

00:13:44,310 --> 00:13:47,910
everything that might be a good option

00:13:45,870 --> 00:13:50,640
you know just thought everyone everyone

00:13:47,910 --> 00:13:55,680
stop and fix it if it if it's like gone

00:13:50,640 --> 00:13:59,100
a day and and and the codes the red

00:13:55,680 --> 00:14:02,190
lights gone then you might want to fix

00:13:59,100 --> 00:14:03,870
it but that's it gives you sort of a

00:14:02,190 --> 00:14:07,560
framework to make those decisions as a

00:14:03,870 --> 00:14:12,810
team but obviously the goal is to keep

00:14:07,560 --> 00:14:15,020
it are fixed so it's not about just sort

00:14:12,810 --> 00:14:18,060
of installing a robot on the server that

00:14:15,020 --> 00:14:23,160
automatically deploys necessarily it's

00:14:18,060 --> 00:14:26,310
big topic and I think it's something

00:14:23,160 --> 00:14:30,480
that will think about more as a strip

00:14:26,310 --> 00:14:32,339
light starts to reveal itself and we're

00:14:30,480 --> 00:14:34,400
writing more unit testable code in

00:14:32,339 --> 00:14:37,220
particular

00:14:34,400 --> 00:14:40,460
and I think it's it's something that's

00:14:37,220 --> 00:14:42,380
very applicable to distribution

00:14:40,460 --> 00:14:45,050
development and using Drupal as a

00:14:42,380 --> 00:14:47,720
product platform which trees mentioned

00:14:45,050 --> 00:14:49,730
this morning so if you're you know

00:14:47,720 --> 00:14:53,060
thinking of a start-up or something like

00:14:49,730 --> 00:14:55,880
that then this is the sort of process

00:14:53,060 --> 00:14:58,460
you probably want to get a clip and keep

00:14:55,880 --> 00:15:07,040
your mind when you're setting up your

00:14:58,460 --> 00:15:09,950
workflows okay so part of it is thinking

00:15:07,040 --> 00:15:11,510
very clearly about when when you're

00:15:09,950 --> 00:15:12,890
performing your various activities and

00:15:11,510 --> 00:15:15,860
and putting a bit a structure in place

00:15:12,890 --> 00:15:19,370
so it can be a bit prescriptive workflow

00:15:15,860 --> 00:15:20,990
wives but but there's flexibility in

00:15:19,370 --> 00:15:23,330
terms of actual implementation so you

00:15:20,990 --> 00:15:27,680
should you should be building up these

00:15:23,330 --> 00:15:29,390
processes from the bottom up and but but

00:15:27,680 --> 00:15:33,920
being careful about about we do and

00:15:29,390 --> 00:15:35,900
we'll go through some examples but so

00:15:33,920 --> 00:15:37,670
some some clear definitions of what i

00:15:35,900 --> 00:15:40,070
mean by build we kind of throw these

00:15:37,670 --> 00:15:42,860
words around in CI and don't really

00:15:40,070 --> 00:15:44,660
think too much about about what it means

00:15:42,860 --> 00:15:51,080
I think it helps to be a bit more

00:15:44,660 --> 00:15:54,290
concrete so builders are the confusion

00:15:51,080 --> 00:15:56,300
is because we use PHP a lot of the lot

00:15:54,290 --> 00:15:57,830
of times we'll sort of you know to play

00:15:56,300 --> 00:16:00,380
with version control or something like

00:15:57,830 --> 00:16:03,680
that and the source code will be sort of

00:16:00,380 --> 00:16:07,400
considered the deployable deployables

00:16:03,680 --> 00:16:10,970
idem but I think you'll notice that you

00:16:07,400 --> 00:16:12,170
know if you're using SAS or again this

00:16:10,970 --> 00:16:14,300
is something that's probably no come up

00:16:12,170 --> 00:16:16,160
more with Drupal 8 that there are things

00:16:14,300 --> 00:16:20,390
that you always have to do sometimes you

00:16:16,160 --> 00:16:21,890
do it in the deploy but something you

00:16:20,390 --> 00:16:25,570
have to do to the codebase to actually

00:16:21,890 --> 00:16:28,040
get it executable or runnable and so

00:16:25,570 --> 00:16:31,630
it's it's a bit needs a bit bit abstract

00:16:28,040 --> 00:16:34,730
a bit wafi but it's at some at some

00:16:31,630 --> 00:16:37,220
result of a see you start with your

00:16:34,730 --> 00:16:38,780
source code and then you do build and

00:16:37,220 --> 00:16:41,660
then you have something at the end and

00:16:38,780 --> 00:16:44,780
that can be you know some some processed

00:16:41,660 --> 00:16:46,190
code with SAS run on it maybe run tests

00:16:44,780 --> 00:16:49,790
you've a test output and

00:16:46,190 --> 00:16:52,940
done and and then that the executable

00:16:49,790 --> 00:16:56,960
part is ready to deploy to any

00:16:52,940 --> 00:17:00,470
environment preferably so so test

00:16:56,960 --> 00:17:04,189
testing you know kind of enough said but

00:17:00,470 --> 00:17:06,530
we will test as part of a build process

00:17:04,189 --> 00:17:08,270
and then have some test results and that

00:17:06,530 --> 00:17:09,770
will be considered you know that's an

00:17:08,270 --> 00:17:12,050
artifact of the build and it's about

00:17:09,770 --> 00:17:13,579
track ability so when we do want to make

00:17:12,050 --> 00:17:16,730
this stuff with the robots and get

00:17:13,579 --> 00:17:18,650
Jenkins to to actually start or whatever

00:17:16,730 --> 00:17:21,770
you're using to start start running

00:17:18,650 --> 00:17:24,560
these processes that builds then you'll

00:17:21,770 --> 00:17:27,439
be able to trace use this data in much

00:17:24,560 --> 00:17:31,040
more useful ways that the test test

00:17:27,439 --> 00:17:34,700
outputs so and then it employs that easy

00:17:31,040 --> 00:17:36,230
part um you know what it will change

00:17:34,700 --> 00:17:39,530
from environmental environmental times

00:17:36,230 --> 00:17:41,960
but I'm you know you have some little

00:17:39,530 --> 00:17:43,820
little extra extra steps but for the

00:17:41,960 --> 00:17:45,710
most part I mean you did you just the

00:17:43,820 --> 00:17:48,350
once the build is complete you're just

00:17:45,710 --> 00:17:50,600
copying the file somewhere so so they

00:17:48,350 --> 00:17:56,590
can be executed maybe with some

00:17:50,600 --> 00:17:56,590
configuration okay so

00:17:57,360 --> 00:18:04,420
there are sort of core like rules that

00:18:02,170 --> 00:18:06,430
you're supposed to supposed to go by so

00:18:04,420 --> 00:18:08,590
textbook continuous integration but I

00:18:06,430 --> 00:18:14,430
think it's useful to sort of quickly go

00:18:08,590 --> 00:18:18,280
with them when we say integrate we mean

00:18:14,430 --> 00:18:19,870
we mean check into main line so that

00:18:18,280 --> 00:18:22,240
might be a little bit confusing if

00:18:19,870 --> 00:18:24,670
you're coming like you've only known get

00:18:22,240 --> 00:18:26,140
or I mean I imagine pretty much everyone

00:18:24,670 --> 00:18:28,810
here would be using it to manage their

00:18:26,140 --> 00:18:32,530
projects so what does that mean main

00:18:28,810 --> 00:18:36,130
line well it's a it's it's not as

00:18:32,530 --> 00:18:38,140
obvious but it's it's it's any nominal

00:18:36,130 --> 00:18:41,860
branch that we've picked as our stable

00:18:38,140 --> 00:18:44,230
branch so we don't have a separate

00:18:41,860 --> 00:18:46,480
develop branch you are you develop

00:18:44,230 --> 00:18:49,330
immigrant in a topic grants or a feature

00:18:46,480 --> 00:18:54,100
branch experimental branch and then when

00:18:49,330 --> 00:18:55,990
you want to integrate you you do it

00:18:54,100 --> 00:18:58,840
would be the push the integration will

00:18:55,990 --> 00:19:01,450
be the push but you can integrate

00:18:58,840 --> 00:19:03,490
locally before you push so and remember

00:19:01,450 --> 00:19:08,770
the goal is to keep that main line

00:19:03,490 --> 00:19:10,060
stable so we'll be testing as a real

00:19:08,770 --> 00:19:12,640
human element to this that's kind of

00:19:10,060 --> 00:19:16,030
forgotten it's not about offloading the

00:19:12,640 --> 00:19:17,740
the tests to the test spot you know and

00:19:16,030 --> 00:19:19,030
kind of not really testing it properly

00:19:17,740 --> 00:19:23,230
and waiting for it to fail and come back

00:19:19,030 --> 00:19:25,120
it's really about extra extra gates to

00:19:23,230 --> 00:19:27,130
quality so we're really serious about

00:19:25,120 --> 00:19:30,130
quality we're going to fix we're going

00:19:27,130 --> 00:19:33,490
to test against any new code now before

00:19:30,130 --> 00:19:35,340
we before we push it off to to github or

00:19:33,490 --> 00:19:39,490
the central repository or whatever and

00:19:35,340 --> 00:19:41,980
and and we're going to we're going to

00:19:39,490 --> 00:19:43,750
catch that before so that the continuous

00:19:41,980 --> 00:19:46,810
integration server later on that will be

00:19:43,750 --> 00:19:52,270
another gate that with the goal is to

00:19:46,810 --> 00:19:54,940
never have that go go bad so now to be

00:19:52,270 --> 00:19:57,340
fast that's another another important

00:19:54,940 --> 00:20:03,310
thing and test everything that can break

00:19:57,340 --> 00:20:06,340
so from a Drupal perspective just to tie

00:20:03,310 --> 00:20:08,080
then into the first point we want to run

00:20:06,340 --> 00:20:08,590
all the tests locally because we don't

00:20:08,080 --> 00:20:10,600
want

00:20:08,590 --> 00:20:12,250
the build to break but that doesn't mean

00:20:10,600 --> 00:20:14,230
that we're sitting there running the

00:20:12,250 --> 00:20:16,000
whole simple test suite for core every

00:20:14,230 --> 00:20:19,840
time we do a change local or every time

00:20:16,000 --> 00:20:21,580
we want to merge into main line so we're

00:20:19,840 --> 00:20:23,230
only concerned with you know think

00:20:21,580 --> 00:20:25,750
things that can break we may not even

00:20:23,230 --> 00:20:27,429
run all those tests on we probably won't

00:20:25,750 --> 00:20:30,159
even run them on the on a continuous

00:20:27,429 --> 00:20:32,169
integration server I mean you know that

00:20:30,159 --> 00:20:33,940
could be a real later stage and we're

00:20:32,169 --> 00:20:35,710
getting the testing and how you can kind

00:20:33,940 --> 00:20:39,070
of but divide up the different tests in

00:20:35,710 --> 00:20:41,590
two different stages but so I building a

00:20:39,070 --> 00:20:44,470
test things to be very fast and again

00:20:41,590 --> 00:20:46,059
it's because we don't want to make more

00:20:44,470 --> 00:20:49,960
work I mean this is a this is a hardcore

00:20:46,059 --> 00:20:52,450
you know view of quality but you have to

00:20:49,960 --> 00:20:54,760
recognize that you know we're lazy and

00:20:52,450 --> 00:20:56,830
as soon as testing becomes hard and I

00:20:54,760 --> 00:20:59,880
think you know this is obvious for

00:20:56,830 --> 00:21:03,520
Drupal testing Drupal that is hard and

00:20:59,880 --> 00:21:04,929
so we don't do it as much so if you're

00:21:03,520 --> 00:21:08,140
going to going to start down this route

00:21:04,929 --> 00:21:11,470
you don't want to do sort of install you

00:21:08,140 --> 00:21:13,899
know install a CI server or oil or make

00:21:11,470 --> 00:21:16,090
some make some process that makes it

00:21:13,899 --> 00:21:18,490
difficult I think you know developers

00:21:16,090 --> 00:21:21,460
have to be able to run tests locally

00:21:18,490 --> 00:21:24,600
fast do builds locally fast so it's this

00:21:21,460 --> 00:21:24,600
is tricky tricky stuff

00:21:29,530 --> 00:21:37,250
so build build speed and test speed all

00:21:33,020 --> 00:21:44,360
have to all have to go go quickly okay

00:21:37,250 --> 00:21:46,429
so I think it's important to to kind of

00:21:44,360 --> 00:21:48,500
highlight this is again probably looking

00:21:46,429 --> 00:21:51,200
a bit more forward to Drupal 8 when we

00:21:48,500 --> 00:21:54,380
will have more unit testable code you

00:21:51,200 --> 00:21:57,590
can write unit testable code now for

00:21:54,380 --> 00:21:59,390
Drupal 7 for your custom modules I'm not

00:21:57,590 --> 00:22:01,490
sure it's done much as any does anyone

00:21:59,390 --> 00:22:04,760
here right proper unit tests or as

00:22:01,490 --> 00:22:07,790
opposed to just simple tests no you

00:22:04,760 --> 00:22:11,270
don't a couple yeah so it's the domain

00:22:07,790 --> 00:22:14,240
is quite limited at the moment if you're

00:22:11,270 --> 00:22:16,400
you know writing some anything that may

00:22:14,240 --> 00:22:18,500
be interacts with an API might might

00:22:16,400 --> 00:22:20,540
want to might want to look into it and

00:22:18,500 --> 00:22:23,419
use in that case you would not use

00:22:20,540 --> 00:22:29,299
simple test you would use something like

00:22:23,419 --> 00:22:31,400
phpunit mainly because you probably want

00:22:29,299 --> 00:22:34,190
something like mock objects or some way

00:22:31,400 --> 00:22:35,299
to run just to be clear when we're

00:22:34,190 --> 00:22:37,820
talking you testing we're talking about

00:22:35,299 --> 00:22:41,150
essentially testing a function a method

00:22:37,820 --> 00:22:43,460
a class so some block of specific code

00:22:41,150 --> 00:22:45,830
how the code actually behaves in terms

00:22:43,460 --> 00:22:47,780
of what functions it gets called what

00:22:45,830 --> 00:22:50,510
what what it returns that the kind of

00:22:47,780 --> 00:22:52,190
internal ap is not the intent

00:22:50,510 --> 00:22:56,090
functionality if you've seen simple test

00:22:52,190 --> 00:23:00,620
tests they're more about creating nodes

00:22:56,090 --> 00:23:02,780
and end users and how how functionality

00:23:00,620 --> 00:23:03,980
interacts that's functional tests so

00:23:02,780 --> 00:23:05,960
there's a big difference between the

00:23:03,980 --> 00:23:08,480
time the time that these things can take

00:23:05,960 --> 00:23:11,390
is testing one functions return or one

00:23:08,480 --> 00:23:13,250
classes methods how they behave this is

00:23:11,390 --> 00:23:15,890
how a bunch of modules behave that needs

00:23:13,250 --> 00:23:19,700
a drupal install to get run this is a

00:23:15,890 --> 00:23:22,460
huge difference so you don't don't

00:23:19,700 --> 00:23:25,850
necessarily want your developers to have

00:23:22,460 --> 00:23:28,190
to run every unit test every time they

00:23:25,850 --> 00:23:31,100
make a change they may want to run unit

00:23:28,190 --> 00:23:32,690
tests only when they make it every

00:23:31,100 --> 00:23:35,330
change and then when they go to merge

00:23:32,690 --> 00:23:36,830
run custom simple tests these are the

00:23:35,330 --> 00:23:39,020
sort of strategies you'll want to come

00:23:36,830 --> 00:23:44,840
up with them it's all about removing

00:23:39,020 --> 00:23:48,640
and and making testing not fun but not

00:23:44,840 --> 00:23:53,510
you know not something you try to avoid

00:23:48,640 --> 00:23:56,240
smoke tests probably pretty useful if

00:23:53,510 --> 00:23:57,770
you're wanting to test configuration

00:23:56,240 --> 00:24:00,470
going back to we want to test things

00:23:57,770 --> 00:24:02,480
that can break so I think it's not

00:24:00,470 --> 00:24:03,680
really useful to sort of write simple

00:24:02,480 --> 00:24:05,960
tests that are only going to test

00:24:03,680 --> 00:24:08,720
whether or not your wiring is working

00:24:05,960 --> 00:24:10,790
your your solar servers talking to your

00:24:08,720 --> 00:24:13,070
application but you still want to test

00:24:10,790 --> 00:24:15,830
that stuff because you know things

00:24:13,070 --> 00:24:18,500
you're wrong configuration can can can

00:24:15,830 --> 00:24:20,480
kind of get a rise sometimes you wanted

00:24:18,500 --> 00:24:23,090
to detect bugs in your your build and

00:24:20,480 --> 00:24:26,690
deploy process so you can just do simple

00:24:23,090 --> 00:24:29,060
things like have a a shell script that

00:24:26,690 --> 00:24:30,890
you you add added a bunch of commands

00:24:29,060 --> 00:24:33,500
they can do curl commands and check

00:24:30,890 --> 00:24:35,930
output and just check pages up and just

00:24:33,500 --> 00:24:37,910
you know real simple stuff and you could

00:24:35,930 --> 00:24:41,840
you could run them on every you know

00:24:37,910 --> 00:24:43,490
every integration build externally we

00:24:41,840 --> 00:24:48,890
sort of make sense or pick the right

00:24:43,490 --> 00:24:50,180
point for that and then or it goes all

00:24:48,890 --> 00:24:52,910
the way down the automated acceptance

00:24:50,180 --> 00:24:55,160
tests which I've actually noticed a lot

00:24:52,910 --> 00:24:58,370
more activity in Drupal around that sort

00:24:55,160 --> 00:24:59,990
of stuff a lot more excitement but they

00:24:58,370 --> 00:25:02,270
generally would take a really long time

00:24:59,990 --> 00:25:04,310
to run because you're tough they're

00:25:02,270 --> 00:25:07,670
testing end to end user functionality

00:25:04,310 --> 00:25:10,850
either through a browser or a headless

00:25:07,670 --> 00:25:13,670
browser and there's a lot you can read

00:25:10,850 --> 00:25:15,680
up on on on behavior driven development

00:25:13,670 --> 00:25:17,180
from an acceptance test user perspective

00:25:15,680 --> 00:25:21,740
if you're interested in that but it's

00:25:17,180 --> 00:25:23,540
not really in in the scope of of CI so

00:25:21,740 --> 00:25:26,750
much but you would if you ran them

00:25:23,540 --> 00:25:28,400
you've run them again not not will make

00:25:26,750 --> 00:25:29,510
your development team run the whole the

00:25:28,400 --> 00:25:35,530
whole suite every time they wanted to

00:25:29,510 --> 00:25:38,540
merge okay so

00:25:35,530 --> 00:25:45,400
yeah we want to split them up and be

00:25:38,540 --> 00:25:49,070
careful about which tests run win okay

00:25:45,400 --> 00:25:51,140
so some yeah it might not be that

00:25:49,070 --> 00:25:54,620
obvious that this is related to

00:25:51,140 --> 00:25:58,850
continuous integration but it actually

00:25:54,620 --> 00:26:00,830
is because you want to have as few

00:25:58,850 --> 00:26:04,310
differences from environmental

00:26:00,830 --> 00:26:11,530
environment as you can so anything that

00:26:04,310 --> 00:26:15,830
you're doing any process so say the the

00:26:11,530 --> 00:26:18,050
SATA SAS example or if you're if you're

00:26:15,830 --> 00:26:21,530
compiling SAS manually and you're not

00:26:18,050 --> 00:26:22,820
checking the CSS in you you want to you

00:26:21,530 --> 00:26:24,500
won't have all those tools all those

00:26:22,820 --> 00:26:27,380
things that you're automating it as kind

00:26:24,500 --> 00:26:29,870
of it's consistent as possible and it's

00:26:27,380 --> 00:26:33,230
it's just easy to maintain that you can

00:26:29,870 --> 00:26:34,700
actually write builds that have very

00:26:33,230 --> 00:26:36,380
little difference when you when you have

00:26:34,700 --> 00:26:37,550
to run them in different places and you

00:26:36,380 --> 00:26:39,830
know where those differences are and

00:26:37,550 --> 00:26:48,980
they're there in there in very specific

00:26:39,830 --> 00:26:53,270
spots so old test should be runnable

00:26:48,980 --> 00:26:55,010
like locally even though even the

00:26:53,270 --> 00:26:56,720
functional tasks it's just that you

00:26:55,010 --> 00:26:58,010
don't doesn't mean you have to run them

00:26:56,720 --> 00:26:59,720
every time so these are these are the

00:26:58,010 --> 00:27:03,650
sort of policies that you're kind of

00:26:59,720 --> 00:27:08,150
coming up with and again the goal the

00:27:03,650 --> 00:27:09,890
goal is to to have a sort of a local

00:27:08,150 --> 00:27:12,860
development environment where developers

00:27:09,890 --> 00:27:14,660
don't get caught if they they come up to

00:27:12,860 --> 00:27:16,880
a pro come on to a new project they

00:27:14,660 --> 00:27:20,330
don't have to necessarily sink from a

00:27:16,880 --> 00:27:23,750
sink from a particular database or if

00:27:20,330 --> 00:27:27,230
they do then it's well defined they

00:27:23,750 --> 00:27:29,630
don't have to think about eyes are using

00:27:27,230 --> 00:27:32,150
SAS or not do I have to draft amazed

00:27:29,630 --> 00:27:34,610
that myself and kind of dig in it's all

00:27:32,150 --> 00:27:37,570
automated and consistent and that's

00:27:34,610 --> 00:27:37,570
where build tools come in

00:27:38,909 --> 00:27:47,429
so it sounds like a bit of work or a bit

00:27:43,229 --> 00:27:49,529
of a bit of a change but I think that if

00:27:47,429 --> 00:27:52,679
your application you know if your site

00:27:49,529 --> 00:27:54,539
can't can't exist without like a

00:27:52,679 --> 00:27:56,399
particular database I mean that's a bad

00:27:54,539 --> 00:27:59,279
smell right so this is just sort of

00:27:56,399 --> 00:28:02,070
taking that a bit further you know it

00:27:59,279 --> 00:28:04,559
should be essentially installable and

00:28:02,070 --> 00:28:06,419
and someone should go to pick up the

00:28:04,559 --> 00:28:07,619
source code and just start working and

00:28:06,419 --> 00:28:10,590
they shouldn't be have all these

00:28:07,619 --> 00:28:12,769
external dependencies so that's that's

00:28:10,590 --> 00:28:16,080
sort of one of the reasons for dividing

00:28:12,769 --> 00:28:19,529
being careful about you know automating

00:28:16,080 --> 00:28:23,220
a build and and and keeping every step

00:28:19,529 --> 00:28:29,220
that's involved in every requirement you

00:28:23,220 --> 00:28:31,729
know in check so these are this dumb

00:28:29,220 --> 00:28:31,729
some

00:28:37,389 --> 00:28:44,739
okay I'll skip through these a little

00:28:40,570 --> 00:28:46,119
bit quicker this is one once you've got

00:28:44,739 --> 00:28:48,279
an automated build and you kind of you

00:28:46,119 --> 00:28:49,899
kind of get going this is the sort of

00:28:48,279 --> 00:28:52,570
sort of things that we're aiming to do

00:28:49,899 --> 00:28:54,219
so so you know sort of best practices to

00:28:52,570 --> 00:28:56,440
maintain that quality so not taking a

00:28:54,219 --> 00:28:58,839
brick and build running just locally

00:28:56,440 --> 00:29:01,299
before merging we recover that I'll keep

00:28:58,839 --> 00:29:02,889
the the mainline build stable know how

00:29:01,299 --> 00:29:06,039
to maintain stability so it's all about

00:29:02,889 --> 00:29:07,570
having these policies and then having

00:29:06,039 --> 00:29:09,459
probably assist them around who's

00:29:07,570 --> 00:29:14,969
responsible for fixing things that break

00:29:09,459 --> 00:29:16,959
so this is an interesting one is are

00:29:14,969 --> 00:29:18,279
dealing with architectural reviews

00:29:16,959 --> 00:29:20,940
because these things are hard to test

00:29:18,279 --> 00:29:24,339
and hard to get a red light to go off

00:29:20,940 --> 00:29:27,070
I've seen some some tools you know some

00:29:24,339 --> 00:29:29,559
PHP static analysis tools that might

00:29:27,070 --> 00:29:31,509
help but um it's a tricky one so you

00:29:29,559 --> 00:29:33,999
need to consider that as well because

00:29:31,509 --> 00:29:37,570
that that's technical debt which is you

00:29:33,999 --> 00:29:39,549
know another form of defect if it's if

00:29:37,570 --> 00:29:42,009
your system is difficult to extend and

00:29:39,549 --> 00:29:48,190
maintain but it may be difficult to test

00:29:42,009 --> 00:29:52,419
so and slow tests yeah a big no-no

00:29:48,190 --> 00:29:57,519
because it will it will make people stop

00:29:52,419 --> 00:30:00,519
running tests code style is sort of one

00:29:57,519 --> 00:30:04,690
of the simplest simplest things you can

00:30:00,519 --> 00:30:08,200
automate and again it's about sort of

00:30:04,690 --> 00:30:10,509
just picking up a sense being a bit more

00:30:08,200 --> 00:30:13,779
hardcore about quality pick up a sense

00:30:10,509 --> 00:30:15,579
of when you know maybe someone was

00:30:13,779 --> 00:30:17,409
rushing in rushing some work or

00:30:15,579 --> 00:30:19,029
something like that it can be a good if

00:30:17,409 --> 00:30:23,079
your team's really buzzing along and

00:30:19,029 --> 00:30:25,809
sometimes you I've seen our tests where

00:30:23,079 --> 00:30:27,459
they not so concerned with strict code

00:30:25,809 --> 00:30:31,889
quality fails getting everything to fail

00:30:27,459 --> 00:30:34,479
all the time but being a bit tricky with

00:30:31,889 --> 00:30:38,679
analyzing the changes in the defect

00:30:34,479 --> 00:30:40,989
numbers so that I'm so that they'll see

00:30:38,679 --> 00:30:43,479
like it you know is a variation a

00:30:40,989 --> 00:30:45,489
statistical variation and there'll be a

00:30:43,479 --> 00:30:48,819
sign that something need me is looking

00:30:45,489 --> 00:30:51,529
at but these are easier to do for Drupal

00:30:48,819 --> 00:30:54,330
obviously because

00:30:51,529 --> 00:30:57,840
it's a static analysis so don't have to

00:30:54,330 --> 00:31:05,940
write the test but you know it only gets

00:30:57,840 --> 00:31:08,940
you so far so the automated build is

00:31:05,940 --> 00:31:10,830
sort of what you want to start with I

00:31:08,940 --> 00:31:12,929
think it's a better place to start even

00:31:10,830 --> 00:31:14,730
then then you know some auto deploy

00:31:12,929 --> 00:31:15,929
which i think is where some people start

00:31:14,730 --> 00:31:19,080
when they're trying to implement see I

00:31:15,929 --> 00:31:21,690
though though though you know do

00:31:19,080 --> 00:31:24,120
automated deploys or codes I'll checked

00:31:21,690 --> 00:31:27,809
but before you get to that point I think

00:31:24,120 --> 00:31:29,880
thinking about about your your build

00:31:27,809 --> 00:31:31,799
process going from source code to

00:31:29,880 --> 00:31:34,080
something that can can be deployed or

00:31:31,799 --> 00:31:41,570
run locally and having that consistent

00:31:34,080 --> 00:31:44,940
is kind of overlooked so just quickly

00:31:41,570 --> 00:31:46,649
switch over to give you some idea of

00:31:44,940 --> 00:31:50,789
what if you haven't seen a build tool

00:31:46,649 --> 00:31:54,470
used before it's a bunch of them out

00:31:50,789 --> 00:31:56,220
there you could use shell scripts

00:31:54,470 --> 00:31:59,580
preferably you want something that's

00:31:56,220 --> 00:32:01,919
going to make it easy to get status

00:31:59,580 --> 00:32:04,470
codes when things go wrong so that again

00:32:01,919 --> 00:32:08,899
when you automate it later you'll get

00:32:04,470 --> 00:32:12,750
you'll get something going so so brother

00:32:08,899 --> 00:32:18,120
got this is a simple simple project

00:32:12,750 --> 00:32:20,850
repository so it's not you know that

00:32:18,120 --> 00:32:25,139
actually for this one it's the use cases

00:32:20,850 --> 00:32:27,389
install profile development so we want

00:32:25,139 --> 00:32:28,889
to develop install profile maybe push it

00:32:27,389 --> 00:32:31,590
to drupal org so it's going to have very

00:32:28,889 --> 00:32:36,630
specific repository requirements has to

00:32:31,590 --> 00:32:38,490
use it has to use these kind of

00:32:36,630 --> 00:32:40,950
specially named make files for the

00:32:38,490 --> 00:32:44,279
drupal also that when you download it it

00:32:40,950 --> 00:32:47,730
gives you the zip of the whole distro so

00:32:44,279 --> 00:32:49,649
that's that's the source but the the

00:32:47,730 --> 00:32:52,559
rest of the project management stuff the

00:32:49,649 --> 00:32:55,200
build build scripts we check everything

00:32:52,559 --> 00:32:58,380
into version control so configuration

00:32:55,200 --> 00:32:59,910
and build scripts to get us from source

00:32:58,380 --> 00:33:08,370
to something that could be

00:32:59,910 --> 00:33:11,400
to run or run locally so this is Finn it

00:33:08,370 --> 00:33:14,070
just lets you define tasks that you're

00:33:11,400 --> 00:33:19,590
going to perform and generally you want

00:33:14,070 --> 00:33:21,750
to run have the default be something

00:33:19,590 --> 00:33:24,630
that could be it would be the one that

00:33:21,750 --> 00:33:27,420
gets automated and kind of a pre deploy

00:33:24,630 --> 00:33:32,070
step but locally it can be configurable

00:33:27,420 --> 00:33:38,420
so I give you a quick example I go to go

00:33:32,070 --> 00:33:38,420
to another folder and clone in an empty

00:33:39,230 --> 00:33:46,010
so copy of the same repo so this repo

00:33:43,710 --> 00:33:46,010
has

00:33:48,790 --> 00:33:55,210
so this repo has the install profile is

00:33:52,720 --> 00:33:57,070
a sub-module in this case you know it's

00:33:55,210 --> 00:33:58,720
just an option because for this case

00:33:57,070 --> 00:34:00,550
it's thinking about the drupal org

00:33:58,720 --> 00:34:05,350
submission so that's a decision that's

00:34:00,550 --> 00:34:08,710
been made some some stuff to help set up

00:34:05,350 --> 00:34:13,390
a database user and then the build tasks

00:34:08,710 --> 00:34:17,640
so if I just renting it would run the

00:34:13,390 --> 00:34:22,780
default the default build task but

00:34:17,640 --> 00:34:25,950
remember too that I have another one

00:34:22,780 --> 00:34:28,750
though that will do the default build

00:34:25,950 --> 00:34:31,150
install Drupal and then actually kick up

00:34:28,750 --> 00:34:33,700
the PHP server so you can actually

00:34:31,150 --> 00:34:36,600
totally just run it so rather than

00:34:33,700 --> 00:34:36,600
grooming steps so

00:34:53,020 --> 00:34:55,649
ok

00:34:57,890 --> 00:35:04,220
so this is this is sort of the the long

00:35:01,220 --> 00:35:05,960
the long build this this is the sort of

00:35:04,220 --> 00:35:07,580
thing you still configure your builds

00:35:05,960 --> 00:35:12,350
you have the same process and try to

00:35:07,580 --> 00:35:17,330
share remove duplication in your in your

00:35:12,350 --> 00:35:22,690
build scripts so that that ran and what

00:35:17,330 --> 00:35:25,580
did that give me this gave me a pub a

00:35:22,690 --> 00:35:27,320
doctorate that that I can actually in

00:35:25,580 --> 00:35:31,190
build and you can see there there's

00:35:27,320 --> 00:35:33,500
through pool and I can I can point a web

00:35:31,190 --> 00:35:36,710
server to that and start developing in

00:35:33,500 --> 00:35:40,330
it but that default build is actually

00:35:36,710 --> 00:35:45,140
the production build so I've got this

00:35:40,330 --> 00:35:46,730
I've got this configuration and probably

00:35:45,140 --> 00:35:50,090
my steps for developers would be

00:35:46,730 --> 00:35:53,570
download the source either copy this or

00:35:50,090 --> 00:36:00,320
run it and then set set development a

00:35:53,570 --> 00:36:02,380
true I'm in there I'm in a different

00:36:00,320 --> 00:36:02,380
folder

00:36:08,790 --> 00:36:12,660
set developments are true and that we're

00:36:10,680 --> 00:36:14,130
going to be some slightly different I

00:36:12,660 --> 00:36:16,050
wanted two different things for local

00:36:14,130 --> 00:36:19,560
builds so this is sort of where you can

00:36:16,050 --> 00:36:23,610
share that share that build code and and

00:36:19,560 --> 00:36:26,340
have it to be reusable and and probably

00:36:23,610 --> 00:36:35,310
have a template or two actually there is

00:36:26,340 --> 00:36:37,800
a build XML file for 14 that tries to

00:36:35,310 --> 00:36:40,290
cover all the bases in terms of you know

00:36:37,800 --> 00:36:41,700
whole whole directory make files and

00:36:40,290 --> 00:36:43,560
then make files that sort of stuff I

00:36:41,700 --> 00:36:45,480
think it's probably best to start from

00:36:43,560 --> 00:36:48,720
scratch but use the same process of

00:36:45,480 --> 00:36:51,120
trying to try to reuse the code so if I

00:36:48,720 --> 00:36:53,970
rerun thing with the development mode

00:36:51,120 --> 00:36:55,830
instead of doing that whole downloaded

00:36:53,970 --> 00:36:57,270
everything from scratch and starting

00:36:55,830 --> 00:37:00,810
from nothing which you might do on a

00:36:57,270 --> 00:37:04,080
production system to to make sure that's

00:37:00,810 --> 00:37:06,660
all running it its development focus so

00:37:04,080 --> 00:37:09,510
it's just rebuilt install profile so

00:37:06,660 --> 00:37:11,670
that would be you know adding a module

00:37:09,510 --> 00:37:16,380
to a make file and quickly kicking that

00:37:11,670 --> 00:37:17,430
off so it's the sort of a sort of sort

00:37:16,380 --> 00:37:23,120
of things you can do with automated

00:37:17,430 --> 00:37:27,440
builds and obviously in there i would do

00:37:23,120 --> 00:37:27,440
stars fall compilation fix it

00:37:29,780 --> 00:37:36,770
okay so tests tests a part of the build

00:37:36,890 --> 00:37:43,200
their the other artifact other than the

00:37:39,530 --> 00:37:45,780
deployable object that you're generally

00:37:43,200 --> 00:37:47,339
going to have and you know so for

00:37:45,780 --> 00:37:49,410
continuous integration there is a

00:37:47,339 --> 00:37:52,349
standard this Jane unit standard that

00:37:49,410 --> 00:37:54,960
you should be aware of once you once you

00:37:52,349 --> 00:37:56,579
start to get into this that will be well

00:37:54,960 --> 00:38:00,950
supported by different continuous

00:37:56,579 --> 00:38:00,950
integration service so I think

00:38:11,910 --> 00:38:18,210
so this build had some tests already

00:38:14,130 --> 00:38:19,829
done there's the test folder and you can

00:38:18,210 --> 00:38:23,309
see this as a bunch of xml files so

00:38:19,829 --> 00:38:25,410
that's that's also in in the build so

00:38:23,309 --> 00:38:28,770
we've got our if we you know Wren this

00:38:25,410 --> 00:38:34,319
on a production machine we'd have code

00:38:28,770 --> 00:38:37,650
coverage reports test output and then of

00:38:34,319 --> 00:38:40,460
course the the deployable artifact being

00:38:37,650 --> 00:38:50,930
the application production ready

00:38:40,460 --> 00:38:50,930
changelog removed everything maybe okay

00:38:53,100 --> 00:39:02,940
static analysis yeah so code coverage

00:38:56,180 --> 00:39:08,370
co-star checks they should all be a all

00:39:02,940 --> 00:39:10,080
be checked and considered a part of

00:39:08,370 --> 00:39:12,180
every single build every time we're

00:39:10,080 --> 00:39:14,340
going to merge in we want to develop

00:39:12,180 --> 00:39:22,830
generate all this stuff and make sure

00:39:14,340 --> 00:39:26,310
it's up to scratch so deploying um I

00:39:22,830 --> 00:39:28,440
think it's you know there's some things

00:39:26,310 --> 00:39:30,330
you have to do from environmental

00:39:28,440 --> 00:39:32,010
environment on where you'll still want

00:39:30,330 --> 00:39:34,110
to keep the same project repository that

00:39:32,010 --> 00:39:39,000
maybe they'll be production some sort of

00:39:34,110 --> 00:39:41,310
production difference I mean there might

00:39:39,000 --> 00:39:42,960
be yeah particular particular

00:39:41,310 --> 00:39:46,440
requirements for a hosting provider

00:39:42,960 --> 00:39:48,650
about sort of where we're code has to go

00:39:46,440 --> 00:39:52,770
so again we're really getting away from

00:39:48,650 --> 00:39:55,020
sort of a common model of just running

00:39:52,770 --> 00:40:00,210
get Paul to deploy I mean it's very very

00:39:55,020 --> 00:40:03,900
very far from that but the event is is

00:40:00,210 --> 00:40:05,580
that we can do things like use a tool

00:40:03,900 --> 00:40:09,570
like Capistrano just for deployment so

00:40:05,580 --> 00:40:12,210
very it does this one job very well it

00:40:09,570 --> 00:40:15,390
moves that it moves files from one spot

00:40:12,210 --> 00:40:17,730
to another maintains versions can

00:40:15,390 --> 00:40:21,000
trigger backups and then it does

00:40:17,730 --> 00:40:24,920
basically atomic switching by changing

00:40:21,000 --> 00:40:28,860
assembly swinging a similar ground so

00:40:24,920 --> 00:40:32,570
that's a lot more preferable than just

00:40:28,860 --> 00:40:34,800
doing it doing a get pool and having

00:40:32,570 --> 00:40:36,390
database even if it's only for a moment

00:40:34,800 --> 00:40:38,340
you'll have database and code out of

00:40:36,390 --> 00:40:39,990
sync I mean there is there is a

00:40:38,340 --> 00:40:42,060
possibility I mean it may seem like

00:40:39,990 --> 00:40:44,610
really nitpicking but there is a

00:40:42,060 --> 00:40:46,980
possibility that your schema in your and

00:40:44,610 --> 00:40:48,990
your execution and maybe non-destructive

00:40:46,980 --> 00:40:50,430
it may just be someone you know clicks

00:40:48,990 --> 00:40:51,990
on the page and it doesn't work and then

00:40:50,430 --> 00:40:55,020
when they go back in the update

00:40:51,990 --> 00:40:56,460
functions of run that's complete but but

00:40:55,020 --> 00:40:58,460
we have to have good tools for this

00:40:56,460 --> 00:41:04,970
stuff you said that at once and

00:40:58,460 --> 00:41:07,150
and they're very reliable so that's kind

00:41:04,970 --> 00:41:10,070
of a different a different view going

00:41:07,150 --> 00:41:14,359
defining your build first and your build

00:41:10,070 --> 00:41:20,119
tasks and try to keep that stuff a bit

00:41:14,359 --> 00:41:21,320
more a bit drier and and cleaner and the

00:41:20,119 --> 00:41:24,680
event is being that once you go to

00:41:21,320 --> 00:41:27,800
actually automate this stuff with a with

00:41:24,680 --> 00:41:29,869
a continuous integration tool then it

00:41:27,800 --> 00:41:34,760
really sort of fall falls out quite

00:41:29,869 --> 00:41:36,740
easily so the CI server doesn't do

00:41:34,760 --> 00:41:40,790
anything really magical or special it's

00:41:36,740 --> 00:41:43,310
just glue sits between some version

00:41:40,790 --> 00:41:44,750
control posit ori with that you know

00:41:43,310 --> 00:41:47,900
that's sort of code that i showed and

00:41:44,750 --> 00:41:52,070
and the build tool that or build tools

00:41:47,900 --> 00:41:58,280
or scripts they get run to to create

00:41:52,070 --> 00:42:02,210
your artifacts so the advantage being

00:41:58,280 --> 00:42:04,790
that I'm you can also collect collect

00:42:02,210 --> 00:42:08,359
information about the build state so all

00:42:04,790 --> 00:42:11,960
those tests outputs and graph them build

00:42:08,359 --> 00:42:14,450
times performance testing so you kind of

00:42:11,960 --> 00:42:16,460
off on the right foot if if you kind of

00:42:14,450 --> 00:42:20,390
kind of start from the stuff from the

00:42:16,460 --> 00:42:22,720
bottom up and rather than than the other

00:42:20,390 --> 00:42:22,720
way around

00:42:27,470 --> 00:42:34,700
so jenkins is a a CI tool that you most

00:42:32,630 --> 00:42:36,320
likely use or I know something we were

00:42:34,700 --> 00:42:40,040
probably already already installed and I

00:42:36,320 --> 00:42:44,180
using it it has a lot of advantages it's

00:42:40,040 --> 00:42:45,650
very powerful what's free but I think it

00:42:44,180 --> 00:42:47,599
is probably worth looking at some other

00:42:45,650 --> 00:42:49,280
tools I think sometimes we get a bit

00:42:47,599 --> 00:42:53,119
lazy with the stuff and kind of just go

00:42:49,280 --> 00:42:56,840
to the common one so there's some

00:42:53,119 --> 00:42:58,670
interesting interesting ones thought

00:42:56,840 --> 00:43:01,520
works have one called go which has a lot

00:42:58,670 --> 00:43:05,109
more a lot more of a focus on on the

00:43:01,520 --> 00:43:07,369
gates and visualization of the build

00:43:05,109 --> 00:43:09,740
because again we're sort of tracking

00:43:07,369 --> 00:43:13,340
tracking build quality and only

00:43:09,740 --> 00:43:15,770
promoting builds that the pass out our

00:43:13,340 --> 00:43:18,619
gate quality tests first a local gate

00:43:15,770 --> 00:43:22,730
and then the test run on the CI server

00:43:18,619 --> 00:43:24,590
and so on so we know that it when you

00:43:22,730 --> 00:43:28,130
pick that build and we move it up it's

00:43:24,590 --> 00:43:30,800
exactly exactly exactly the quality that

00:43:28,130 --> 00:43:33,410
we need so travel to see I sort of any

00:43:30,800 --> 00:43:35,390
interesting one I haven't had much

00:43:33,410 --> 00:43:39,099
internet here today in fact no internet

00:43:35,390 --> 00:43:39,099
but i'll quickly

00:43:46,390 --> 00:43:50,869
this is like probably the easiest one to

00:43:48,920 --> 00:43:52,430
set up if you just want to sort of have

00:43:50,869 --> 00:43:55,069
a play you've been playing with with the

00:43:52,430 --> 00:43:58,279
automated build and you want to you want

00:43:55,069 --> 00:44:01,670
to you know start doing it for real you

00:43:58,279 --> 00:44:05,359
can you can put it yet single llamo file

00:44:01,670 --> 00:44:07,099
into your your project repository you do

00:44:05,359 --> 00:44:09,470
need to you to get help it's not going

00:44:07,099 --> 00:44:11,900
to be usable at the moment for client

00:44:09,470 --> 00:44:15,559
work it's at the moment open source tool

00:44:11,900 --> 00:44:17,900
I think they have a commercial tool in

00:44:15,559 --> 00:44:21,589
the works using the same same stuff but

00:44:17,900 --> 00:44:23,779
at some its mate five you can get up and

00:44:21,589 --> 00:44:25,339
going in about five minutes if you if

00:44:23,779 --> 00:44:29,180
you have an automated build already

00:44:25,339 --> 00:44:32,020
working so you just um I'll show you the

00:44:29,180 --> 00:44:32,020
mo file it's green

00:44:36,310 --> 00:44:41,880
you

00:44:38,280 --> 00:44:45,600
okay so you can declare a couple of

00:44:41,880 --> 00:44:48,750
different environments PHP 5.3 or 5.4

00:44:45,600 --> 00:44:51,300
and some other ones i think and set some

00:44:48,750 --> 00:44:54,180
database stuff do some some environment

00:44:51,300 --> 00:44:59,000
setup so the main main one fur for me is

00:44:54,180 --> 00:45:02,520
installing some some pair dependencies

00:44:59,000 --> 00:45:05,970
thing of course and and and related and

00:45:02,520 --> 00:45:09,420
then then i'll just run my same thing

00:45:05,970 --> 00:45:13,050
build so this is exactly the same build

00:45:09,420 --> 00:45:16,170
script that i developed for the local

00:45:13,050 --> 00:45:19,800
setup my local environment which even

00:45:16,170 --> 00:45:21,810
the i have a different a different

00:45:19,800 --> 00:45:23,760
database config for this one that

00:45:21,810 --> 00:45:26,070
actually that could be that could be

00:45:23,760 --> 00:45:29,940
easily refracted this was just the first

00:45:26,070 --> 00:45:33,510
attempt but the the install script is

00:45:29,940 --> 00:45:37,380
exactly the same and and it all goes

00:45:33,510 --> 00:45:38,700
pretty smooth anytime now the way Travis

00:45:37,380 --> 00:45:39,990
works that's tight in the github so you

00:45:38,700 --> 00:45:41,490
Queenie github account you can see all

00:45:39,990 --> 00:45:44,400
your posit or ease and then it just

00:45:41,490 --> 00:45:47,610
picks it up so anytime I do a commit it

00:45:44,400 --> 00:45:49,290
will actually it's the best build output

00:45:47,610 --> 00:45:51,030
that's just the thing output and then if

00:45:49,290 --> 00:45:52,530
it you know if it errors and it comes up

00:45:51,030 --> 00:45:54,990
red you get an email just like you would

00:45:52,530 --> 00:45:56,610
with it your own Jenkins and then you

00:45:54,990 --> 00:45:59,010
could you know do some other stuff

00:45:56,610 --> 00:46:02,400
obviously what a deploying from here

00:45:59,010 --> 00:46:05,160
would probably not not work but if

00:46:02,400 --> 00:46:06,360
you've got if you've got a good build

00:46:05,160 --> 00:46:08,070
process where there's very little

00:46:06,360 --> 00:46:11,130
difference and you're using the same the

00:46:08,070 --> 00:46:13,320
same build scripts then you could use

00:46:11,130 --> 00:46:16,270
this as a check and then

00:46:13,320 --> 00:46:18,130
I think it's an API and you could you

00:46:16,270 --> 00:46:20,530
could kind of wire something together it

00:46:18,130 --> 00:46:25,290
is for open source development there

00:46:20,530 --> 00:46:28,030
again so i don't know if i can just

00:46:25,290 --> 00:46:32,890
probably go up for 15 minutes i might go

00:46:28,030 --> 00:46:36,070
to couple more minutes and just show you

00:46:32,890 --> 00:46:39,960
the this is of course the classic see I

00:46:36,070 --> 00:46:39,960
demo is you change the documentation

00:46:49,970 --> 00:46:53,840
ah so of course i would have doing see I

00:46:52,580 --> 00:46:55,400
properly I would have ran the deal

00:46:53,840 --> 00:46:58,570
locally and make sure all my tests pass

00:46:55,400 --> 00:46:58,570
etcetera but

00:47:09,860 --> 00:47:13,540
I'll just let that trigger off

00:47:16,650 --> 00:47:25,560
come having okay so not sure

00:47:31,840 --> 00:47:45,380
okay go back to it so that's sort of the

00:47:38,240 --> 00:47:49,520
you know the the long broad how to get

00:47:45,380 --> 00:47:51,560
started on continuous integration these

00:47:49,520 --> 00:47:53,840
are these are some books that I found

00:47:51,560 --> 00:47:55,190
sort of useful particularly actually the

00:47:53,840 --> 00:47:57,860
continuous delivery one which isn't

00:47:55,190 --> 00:47:59,930
about continuous integration but touches

00:47:57,860 --> 00:48:05,180
on a lot of the same sort of quality

00:47:59,930 --> 00:48:08,240
philosophies this Drupal thing build

00:48:05,180 --> 00:48:12,050
file is probably not i wouldn't use it

00:48:08,240 --> 00:48:14,840
like just download is it for a project

00:48:12,050 --> 00:48:16,490
but it's good if you wanted to see some

00:48:14,840 --> 00:48:18,560
examples you can show you pick some

00:48:16,490 --> 00:48:21,470
stuff out of there i think it needs some

00:48:18,560 --> 00:48:26,060
rewriting in places but it's definitely

00:48:21,470 --> 00:48:28,520
good start i'm putting up a sort of a

00:48:26,060 --> 00:48:32,990
real simple like starter starter

00:48:28,520 --> 00:48:38,420
template that will cover different

00:48:32,990 --> 00:48:42,170
different layouts but with some a bit

00:48:38,420 --> 00:48:44,570
more factoring in there and i think

00:48:42,170 --> 00:48:47,540
that's about it check the build see if

00:48:44,570 --> 00:48:52,010
it went green up there we go to run

00:48:47,540 --> 00:48:56,150
yellow means it's running so that this

00:48:52,010 --> 00:48:58,070
is a full full clean slate production

00:48:56,150 --> 00:49:02,630
build so it doesn't map drush on there

00:48:58,070 --> 00:49:04,280
install that but that's that's it I

00:49:02,630 --> 00:49:06,290
think I'm ready for questions if anyone

00:49:04,280 --> 00:49:08,090
has any or if you want to talk about

00:49:06,290 --> 00:49:12,410
something that touches I know this is a

00:49:08,090 --> 00:49:13,640
lot of a lot of different topics if you

00:49:12,410 --> 00:49:17,250
want to

00:49:13,640 --> 00:49:19,910
asking questions about specific tools or

00:49:17,250 --> 00:49:28,640
or pain points that you've had

00:49:19,910 --> 00:49:31,710
understanding or implementing yeah yes

00:49:28,640 --> 00:49:33,539
there's a there's a dot-com page I think

00:49:31,710 --> 00:49:35,190
that they've got up so they've obviously

00:49:33,539 --> 00:49:38,430
got a commercial service running at the

00:49:35,190 --> 00:49:42,839
moment but it's at the moment it's free

00:49:38,430 --> 00:49:45,420
for open source projects so definitely

00:49:42,839 --> 00:49:47,789
if you had other PSP projects that will

00:49:45,420 --> 00:49:50,279
open source i would highly recommend

00:49:47,789 --> 00:49:54,410
looking into it because it's just so

00:49:50,279 --> 00:49:58,940
quickly get started but again you can um

00:49:54,410 --> 00:50:02,549
i think things pretty trends

00:49:58,940 --> 00:50:03,420
transmittable skill tool like it's

00:50:02,549 --> 00:50:05,579
reusable in different environments

00:50:03,420 --> 00:50:09,809
different different situations which

00:50:05,579 --> 00:50:12,180
great with jenkins and the output kind

00:50:09,809 --> 00:50:14,960
of comes in sort of automatically that's

00:50:12,180 --> 00:50:14,960
a plug-in of course

00:50:21,170 --> 00:50:26,720
right yeah well that's I mean that's I

00:50:23,869 --> 00:50:29,599
would consider question was on would I

00:50:26,720 --> 00:50:32,420
see cumin database inc yep like say

00:50:29,599 --> 00:50:35,720
production data to staging I would

00:50:32,420 --> 00:50:40,760
consider that a deploy step to staging

00:50:35,720 --> 00:50:44,809
so probably or you know or it could be a

00:50:40,760 --> 00:50:46,579
special case for your for your this is

00:50:44,809 --> 00:50:48,650
why I deploys are kind of funny it's so

00:50:46,579 --> 00:50:50,690
specific to sort of what you got and and

00:50:48,650 --> 00:50:52,220
how much how much data you have if you

00:50:50,690 --> 00:50:54,859
got a really big database in production

00:50:52,220 --> 00:50:56,540
you might not be doing that so often you

00:50:54,859 --> 00:50:59,000
have some other process in place maybe a

00:50:56,540 --> 00:51:00,410
daily a dump and then you're thinking

00:50:59,000 --> 00:51:02,480
from that so there are there are some

00:51:00,410 --> 00:51:04,339
environment specifics I'd like to keep

00:51:02,480 --> 00:51:05,900
that more probably in the deploy the

00:51:04,339 --> 00:51:19,430
deployed configuration because it's

00:51:05,900 --> 00:51:23,299
specific to an environment yeah simple

00:51:19,430 --> 00:51:27,710
test if its functionality there's a talk

00:51:23,299 --> 00:51:29,540
tomorrow on simple test okay see you

00:51:27,710 --> 00:51:31,160
like you're doing some site building and

00:51:29,540 --> 00:51:33,859
you want to have some automated testing

00:51:31,160 --> 00:51:39,020
around that I would I would look in the

00:51:33,859 --> 00:51:40,460
simple test as a first step and maybe

00:51:39,020 --> 00:51:42,799
later you could look into some

00:51:40,460 --> 00:51:46,880
acceptance testing stuff with the hat

00:51:42,799 --> 00:51:48,200
and meek but I think I think simple test

00:51:46,880 --> 00:51:49,880
is probably first go to and you can

00:51:48,200 --> 00:51:53,299
include the test in the feature module

00:51:49,880 --> 00:51:55,460
and and and have it run so I really

00:51:53,299 --> 00:51:57,710
really kind of get to that but there's

00:51:55,460 --> 00:52:00,589
that output at xml output was just

00:51:57,710 --> 00:52:03,079
simple test output so generally for your

00:52:00,589 --> 00:52:05,420
build but you have all the simple tests

00:52:03,079 --> 00:52:07,460
running on on every build like for you

00:52:05,420 --> 00:52:09,910
just your modules not for of a core and

00:52:07,460 --> 00:52:09,910
contribute

00:52:11,800 --> 00:52:14,800
No

00:52:15,250 --> 00:52:19,140

YouTube URL: https://www.youtube.com/watch?v=uvTIeozRp8c


