Title: DrupalCon Sydney 2013: Search All the Things
Publication date: 2013-03-29
Playlist: DrupalCon Sydney - February 2013
Description: 
	This session will walk you through the power of Drupal and Solr. Solr is a powerful tool that can be used to index content both in and out of Drupal. In this session we will walk through a typical use case of larger organizations which involves gathering documentation in many different formats and sources and exposing them in a way that is useful to users. As a bonus, this session will show you a legitimate use case and example of implementing Ruby in a Drupal module. In essence, I will show you what we accomplished in Drupal in less than 24 hours.

Intended Audience
This session is well suited for Drupal and non-Drupal developers interested in leveraging the power of Solr or other technologies in their work. It will walk through the Drupal components as well as show how to use Ruby in Drupal code. This will also appeal to developers wanting to get started in DevOps and will introduce you to Jenkins.

Prerequisites
You will get the most benefit out of this session if you understand the basics of D7 Stream Wrappers, Solr and Drush. You do not need an advanced understanding of these concepts, but the more you understand in advance the easier it will be to get the most from this session

Topics covered
Create a Jenkins job to checkout a series of git repos, copy docs and build RDoc and Github rendered markdown.
The basics of LDAP authentication to allow for larger organizations to authenticate with a site.
A simple private files mechanism to serve generated API docs from outside the docroot to logged in users.
Custom stream wrappers to simplify access to files that were generated or copied from our git repos.
Scanning the generated and git files and to look for additions, changes, or deletions.
A custom indexing loop to analyze html and send the content to Solr.
Shelling out to a ruby script to render github flavored markdown to HTML.
Drush commands to test and run things from the command line
Create a custom search facet for 'api source'.
You can read more about this work at http://www.acquia.com/blog/finding-all-things-engineering-hackathon
Captions: 
	00:00:00,230 --> 00:00:06,299
so while we're waiting I'm just real

00:00:02,639 --> 00:00:09,380
quick how many of you are actively using

00:00:06,299 --> 00:00:13,410
solar are very well versed in solar a

00:00:09,380 --> 00:00:15,260
couple people okay how many people are

00:00:13,410 --> 00:00:18,090
actively using solar let's start there

00:00:15,260 --> 00:00:24,600
okay and how many people are well versed

00:00:18,090 --> 00:00:28,230
in solar interesting okay just curious

00:00:24,600 --> 00:00:30,779
with the audience's reaction is okay so

00:00:28,230 --> 00:00:32,160
cool so I it like if you're using solar

00:00:30,779 --> 00:00:34,770
but not well-versed in a wait what

00:00:32,160 --> 00:00:36,149
exactly does that mean I mean I are you

00:00:34,770 --> 00:00:40,040
using it with Drupal or are you just

00:00:36,149 --> 00:00:40,040
using it for other content or you guys

00:00:40,309 --> 00:00:48,899
awesome I like that that works very well

00:00:45,350 --> 00:00:50,579
okay so a lot of what this presentation

00:00:48,899 --> 00:00:52,590
is going to cover is not going to be

00:00:50,579 --> 00:00:55,649
about setting up solar it's not going to

00:00:52,590 --> 00:00:58,020
be about using some service that may be

00:00:55,649 --> 00:00:59,640
aa quia offers it's going to be more

00:00:58,020 --> 00:01:02,039
along the lines of addressing a very

00:00:59,640 --> 00:01:03,840
specific problem that we had in aqua I

00:01:02,039 --> 00:01:06,240
think it's one that a lot of different

00:01:03,840 --> 00:01:09,720
companies have as well and that's

00:01:06,240 --> 00:01:11,460
finding everything so with Acquia we

00:01:09,720 --> 00:01:13,710
basically have a large number of

00:01:11,460 --> 00:01:16,350
repositories we have a lot of different

00:01:13,710 --> 00:01:18,450
types of systems we use multiple

00:01:16,350 --> 00:01:21,060
different languages it's not just Drupal

00:01:18,450 --> 00:01:23,340
I've been programming at aqua yes since

00:01:21,060 --> 00:01:25,680
march of last year and i haven't written

00:01:23,340 --> 00:01:27,900
any PHP for the most part I it's all

00:01:25,680 --> 00:01:29,400
been Ruby so this particular

00:01:27,900 --> 00:01:34,170
presentation is going to walk you

00:01:29,400 --> 00:01:35,159
through kind of how to set up well it's

00:01:34,170 --> 00:01:36,960
going to walk you through a hackathon

00:01:35,159 --> 00:01:39,360
project that we had and basically that

00:01:36,960 --> 00:01:42,030
hackathon project was a 24-hour window

00:01:39,360 --> 00:01:43,680
that we had to address a very specific

00:01:42,030 --> 00:01:45,210
problem so some of what you're going to

00:01:43,680 --> 00:01:47,729
see is going to be a little bit rough

00:01:45,210 --> 00:01:49,829
it's what we were able to do in a 24

00:01:47,729 --> 00:01:51,420
hour hour time period but what it does

00:01:49,829 --> 00:01:54,329
is it basically takes a lot of different

00:01:51,420 --> 00:01:56,579
languages ties them together implements

00:01:54,329 --> 00:02:00,240
some things on github and shows you how

00:01:56,579 --> 00:02:02,909
to pull that into a very integrated

00:02:00,240 --> 00:02:06,180
search interface so there's probably

00:02:02,909 --> 00:02:08,099
going to be more code than slides and I

00:02:06,180 --> 00:02:09,690
definitely encourage people to just jump

00:02:08,099 --> 00:02:12,000
in and ask questions I think this is

00:02:09,690 --> 00:02:13,350
going to be very informal to it's a

00:02:12,000 --> 00:02:16,320
relatively small room so

00:02:13,350 --> 00:02:17,760
we should be all right and I'm going to

00:02:16,320 --> 00:02:19,560
give it probably about three more

00:02:17,760 --> 00:02:21,090
minutes before I really get started so

00:02:19,560 --> 00:02:22,950
it do you guys have anything

00:02:21,090 --> 00:02:24,810
specifically that you're looking for

00:02:22,950 --> 00:02:27,890
from this before I dive into it too far

00:02:24,810 --> 00:02:27,890
I mean wait what are your aspirations

00:02:35,390 --> 00:02:42,330
sure different systems so in the Ruby

00:02:39,150 --> 00:02:44,340
world we basically have a tool to write

00:02:42,330 --> 00:02:46,680
documentation and I think one of the the

00:02:44,340 --> 00:02:49,380
challenges of larger organizations is

00:02:46,680 --> 00:02:52,830
keeping documentation relevant and

00:02:49,380 --> 00:02:56,160
up-to-date particularly as it pertains

00:02:52,830 --> 00:02:59,430
to code so at aquia what we do is we

00:02:56,160 --> 00:03:02,610
keep lot of things in markdown files in

00:02:59,430 --> 00:03:05,880
our code base we utilize inline code so

00:03:02,610 --> 00:03:08,190
doxygen standards and PHP in Drupal in

00:03:05,880 --> 00:03:09,660
Ruby we also do the same kind of thing

00:03:08,190 --> 00:03:11,130
but they have something called our dock

00:03:09,660 --> 00:03:13,770
which will go through and basically

00:03:11,130 --> 00:03:15,420
generate a very nice HTML base layout

00:03:13,770 --> 00:03:18,480
and I'll show you that in a little bit

00:03:15,420 --> 00:03:20,670
so what we're doing in this presentation

00:03:18,480 --> 00:03:21,840
is basically combining all of those

00:03:20,670 --> 00:03:24,300
systems all of those different

00:03:21,840 --> 00:03:25,980
documentation methods and then exposing

00:03:24,300 --> 00:03:28,910
them in a way that the newer developers

00:03:25,980 --> 00:03:31,170
particularly can find very easily so so

00:03:28,910 --> 00:03:33,060
if a developers looking for a specific

00:03:31,170 --> 00:03:35,550
function they may or may not know what

00:03:33,060 --> 00:03:38,460
system it actually pertains to they have

00:03:35,550 --> 00:03:41,250
the ability to find it so I guess I'll

00:03:38,460 --> 00:03:44,310
just go ahead and start and we'll see

00:03:41,250 --> 00:03:46,170
what happens next so quick introduction

00:03:44,310 --> 00:03:48,240
a little bit about me my name is kevin

00:03:46,170 --> 00:03:50,550
bridges i'm a senior software engineer

00:03:48,240 --> 00:03:53,760
at aquia i work on the cloud systems

00:03:50,550 --> 00:03:57,300
team so I do a lot of scalability I work

00:03:53,760 --> 00:03:59,610
in a particularly in a system called bpc

00:03:57,300 --> 00:04:02,130
which is Amazon's new virtual private

00:03:59,610 --> 00:04:04,980
cloud do a lot of security work a lot of

00:04:02,130 --> 00:04:09,240
really fun crazy things I'm an avid

00:04:04,980 --> 00:04:10,650
technologist to me Drupal and I've been

00:04:09,240 --> 00:04:13,260
a drupal developer for a very long time

00:04:10,650 --> 00:04:15,990
but Drupal is essentially a component of

00:04:13,260 --> 00:04:17,730
larger and larger systems so as we work

00:04:15,990 --> 00:04:19,859
on bigger and bigger websites you know

00:04:17,730 --> 00:04:21,989
that the first really large website I

00:04:19,859 --> 00:04:24,810
did was when I think Drupal 5 came out

00:04:21,989 --> 00:04:26,850
we launched popular science so pops ID

00:04:24,810 --> 00:04:29,190
com and at the time it was

00:04:26,850 --> 00:04:31,350
the first really big website that was

00:04:29,190 --> 00:04:32,970
using Drupal and since then that's like

00:04:31,350 --> 00:04:35,310
a drop in the bucket I mean we're doing

00:04:32,970 --> 00:04:36,960
so many things the system's get larger

00:04:35,310 --> 00:04:38,760
they get more complex we're involving

00:04:36,960 --> 00:04:40,830
everything from the network stack all

00:04:38,760 --> 00:04:43,380
the way through to the front end you

00:04:40,830 --> 00:04:47,160
know mobile devices it just goes on and

00:04:43,380 --> 00:04:48,990
on so to me Drupal is one component of

00:04:47,160 --> 00:04:50,880
larger systems and I think that

00:04:48,990 --> 00:04:53,850
supporting it properly is integral to

00:04:50,880 --> 00:04:55,830
anything we always make jokes about the

00:04:53,850 --> 00:04:57,660
Drupal blinders everybody tends to think

00:04:55,830 --> 00:04:59,700
that while Drupal is a fantastic

00:04:57,660 --> 00:05:02,520
platform and you can do amazing things

00:04:59,700 --> 00:05:04,680
with it it's it's really not the

00:05:02,520 --> 00:05:06,810
solution to everything so that that's a

00:05:04,680 --> 00:05:08,550
little bit of what I believe in in the

00:05:06,810 --> 00:05:12,390
Drupal space i'm known as cyber swat

00:05:08,550 --> 00:05:15,080
user ID 27 802 and on twitter i'm also

00:05:12,390 --> 00:05:19,290
cyber swat so if you need to find me

00:05:15,080 --> 00:05:22,230
good places to get in touch I have a set

00:05:19,290 --> 00:05:24,660
of links including an upload of this

00:05:22,230 --> 00:05:25,980
presentation on SlideShare all of the

00:05:24,660 --> 00:05:28,230
modules that I'm going to talk about I

00:05:25,980 --> 00:05:30,450
give you complete links to all of the

00:05:28,230 --> 00:05:32,520
code is in sandboxes I give you links to

00:05:30,450 --> 00:05:36,990
those as well so you have the ability to

00:05:32,520 --> 00:05:39,510
download this later so I talked on this

00:05:36,990 --> 00:05:42,090
about this a little bit earlier large

00:05:39,510 --> 00:05:44,280
organizations have lots of data it can

00:05:42,090 --> 00:05:46,950
be you know anything it doesn't have to

00:05:44,280 --> 00:05:49,710
be content or nodes or entities in

00:05:46,950 --> 00:05:52,950
Drupal ache and span you know it wiki's

00:05:49,710 --> 00:05:55,290
it can span hosted data services that

00:05:52,950 --> 00:05:57,990
like github so github has the ability to

00:05:55,290 --> 00:05:59,670
publish wiki's and blogs and mark down

00:05:57,990 --> 00:06:02,640
files and all kinds of neat little

00:05:59,670 --> 00:06:04,950
things documents and text files can be

00:06:02,640 --> 00:06:07,410
included solar's a very very powerful

00:06:04,950 --> 00:06:09,720
system and that you have the ability to

00:06:07,410 --> 00:06:12,110
go through and index just about anything

00:06:09,720 --> 00:06:16,560
depending on on which modules you use in

00:06:12,110 --> 00:06:19,440
the architecture it can span multiple

00:06:16,560 --> 00:06:20,820
languages and formats and the problem

00:06:19,440 --> 00:06:22,350
that we're specifically trying to

00:06:20,820 --> 00:06:23,940
address in this presentation and then

00:06:22,350 --> 00:06:25,980
this hackathon I'm about to talk about

00:06:23,940 --> 00:06:28,290
is how to combine all of the sources

00:06:25,980 --> 00:06:31,620
into a single interface that is easy to

00:06:28,290 --> 00:06:33,720
use while maintaining context so while

00:06:31,620 --> 00:06:38,160
maintaining context is an interesting

00:06:33,720 --> 00:06:40,100
little point there because if you have a

00:06:38,160 --> 00:06:43,100
markdown file and get

00:06:40,100 --> 00:06:44,630
that's in a specific repo a developer

00:06:43,100 --> 00:06:48,200
that's looking at that they might be

00:06:44,630 --> 00:06:50,090
able to surface relevant content as far

00:06:48,200 --> 00:06:52,010
as the search results are concerned but

00:06:50,090 --> 00:06:54,560
to be able to truly understand that you

00:06:52,010 --> 00:06:55,940
need to take them there a ruby developer

00:06:54,560 --> 00:06:57,620
is going to be looking for different

00:06:55,940 --> 00:07:00,980
things in a PHP developers going to be

00:06:57,620 --> 00:07:03,140
looking for so in our dock our dock in

00:07:00,980 --> 00:07:05,000
particular has a very nice additional

00:07:03,140 --> 00:07:06,800
search interface it has some nice

00:07:05,000 --> 00:07:08,510
JavaScript put into place so you can

00:07:06,800 --> 00:07:10,820
click through the functions and you know

00:07:08,510 --> 00:07:13,100
they each have a very unique feel and

00:07:10,820 --> 00:07:14,750
it's important to deliver the content in

00:07:13,100 --> 00:07:19,400
context for the developers that are

00:07:14,750 --> 00:07:22,100
actually looking for it so this was our

00:07:19,400 --> 00:07:24,530
engineering week hackathon basically

00:07:22,100 --> 00:07:25,850
aquia was generous enough to fly all of

00:07:24,530 --> 00:07:29,030
the engineers from all over the world

00:07:25,850 --> 00:07:32,300
out to the offices in Burlington and we

00:07:29,030 --> 00:07:34,310
had a week of fun basically there was

00:07:32,300 --> 00:07:36,020
some paintball involved there was a lot

00:07:34,310 --> 00:07:37,520
of beer drinking involved a lot of

00:07:36,020 --> 00:07:39,260
really good conversations but the

00:07:37,520 --> 00:07:41,690
culmination of the week weight was a

00:07:39,260 --> 00:07:43,580
hackathon project that we did and this

00:07:41,690 --> 00:07:46,310
is exactly what i'm going to show you

00:07:43,580 --> 00:07:48,470
this is essentially 24 hours worth of

00:07:46,310 --> 00:07:50,780
work we had from 9am to nine a.m. the

00:07:48,470 --> 00:07:52,040
next day we actually finished a bit

00:07:50,780 --> 00:07:53,960
early and the amount that we got

00:07:52,040 --> 00:07:56,750
accomplished in a very short time frame

00:07:53,960 --> 00:07:58,820
is testament to the power of Drupal and

00:07:56,750 --> 00:08:00,830
what Drupal really allows you to do if

00:07:58,820 --> 00:08:03,200
you think outside of the box I think

00:08:00,830 --> 00:08:05,030
it's a little intimidating at first to

00:08:03,200 --> 00:08:06,620
envision that you're going to be pulling

00:08:05,030 --> 00:08:08,390
in Ruby you're going to be executing

00:08:06,620 --> 00:08:10,100
Ruby you're going to be working inside a

00:08:08,390 --> 00:08:13,190
Drupal and you're going to pull all of

00:08:10,100 --> 00:08:15,020
that into a Drupal interface and make it

00:08:13,190 --> 00:08:18,020
work in a very short amount of time so

00:08:15,020 --> 00:08:20,120
it so what we did was pretty cool rom so

00:08:18,020 --> 00:08:22,220
some of the goals that we had before we

00:08:20,120 --> 00:08:23,990
started we're pretty straightforward you

00:08:22,220 --> 00:08:25,730
know we wanted to build a Drupal 7 site

00:08:23,990 --> 00:08:27,740
we wanted to use Drupal 7 for this it

00:08:25,730 --> 00:08:30,320
was the easiest way for us to tie into

00:08:27,740 --> 00:08:31,610
existing services that we had so it

00:08:30,320 --> 00:08:34,250
would like I said I'm not going to touch

00:08:31,610 --> 00:08:35,810
on setting up solar just assume for the

00:08:34,250 --> 00:08:38,500
context of this presentation that you

00:08:35,810 --> 00:08:41,900
already have a solar server working and

00:08:38,500 --> 00:08:44,090
then things will get a lot easier we

00:08:41,900 --> 00:08:47,180
wanted to integrate with ldap over ssl

00:08:44,090 --> 00:08:49,310
for secure access acquia uses ldap

00:08:47,180 --> 00:08:50,930
servers it's a larger enterprise most

00:08:49,310 --> 00:08:53,440
larger enterprises use something similar

00:08:50,930 --> 00:08:56,620
to ldap we didn't want

00:08:53,440 --> 00:08:58,120
to burden newer developers with having

00:08:56,620 --> 00:09:00,520
to create an account on yet another

00:08:58,120 --> 00:09:02,800
system so ldap integration was very

00:09:00,520 --> 00:09:05,110
important we wanted to serve both

00:09:02,800 --> 00:09:08,830
generated API Doc's like our doc and

00:09:05,110 --> 00:09:11,770
then index generated Docs and github

00:09:08,830 --> 00:09:13,660
docs for searching so so basically what

00:09:11,770 --> 00:09:15,670
that means is we we have to tie into

00:09:13,660 --> 00:09:18,610
some different gems we downloaded some

00:09:15,670 --> 00:09:20,320
gems from github team put those on the

00:09:18,610 --> 00:09:23,620
server we downloaded r dot got that

00:09:20,320 --> 00:09:25,990
running and then we wanted to enable

00:09:23,620 --> 00:09:27,850
everything through an effective faceted

00:09:25,990 --> 00:09:30,310
search so i'm going to walk you through

00:09:27,850 --> 00:09:33,400
how to use the facet api to actually

00:09:30,310 --> 00:09:37,050
generate some at some of some custom

00:09:33,400 --> 00:09:37,050
facets which will be pretty interesting

00:09:37,800 --> 00:09:43,720
so a little bit about the team I i I'm a

00:09:41,920 --> 00:09:46,090
firm believer in giving people credit

00:09:43,720 --> 00:09:47,680
where credit is due did this is the

00:09:46,090 --> 00:09:50,230
number of people that we had to pull off

00:09:47,680 --> 00:09:53,110
what I'm about to show you one two three

00:09:50,230 --> 00:09:55,240
four five so six people at the bottom to

00:09:53,110 --> 00:09:57,400
aminas Donna and Chris rudder or

00:09:55,240 --> 00:09:58,450
basically operations teams while we were

00:09:57,400 --> 00:09:59,860
going through and doing the ldap

00:09:58,450 --> 00:10:01,870
integration we had a little bit of a

00:09:59,860 --> 00:10:03,880
problem with the security certificates

00:10:01,870 --> 00:10:06,640
that we were integrating with they were

00:10:03,880 --> 00:10:08,320
able to help us out there so for the

00:10:06,640 --> 00:10:10,270
most part they all that module worked

00:10:08,320 --> 00:10:11,800
completely and totally out of the box we

00:10:10,270 --> 00:10:15,280
didn't have to do any customizations

00:10:11,800 --> 00:10:17,020
whatsoever and that just kind of worked

00:10:15,280 --> 00:10:19,600
so I'm pretty much going to skip over

00:10:17,020 --> 00:10:23,320
ldap unless somebody really wants me to

00:10:19,600 --> 00:10:26,080
go there Richard Buford synaptic he's an

00:10:23,320 --> 00:10:29,170
awesome gentleman from the UK I worked

00:10:26,080 --> 00:10:31,450
on examiner.com with him and he

00:10:29,170 --> 00:10:34,210
basically came from now public if that

00:10:31,450 --> 00:10:36,280
company means anything to anybody he

00:10:34,210 --> 00:10:37,570
helped us with the theme I'm really not

00:10:36,280 --> 00:10:40,330
going to touch too much on how the

00:10:37,570 --> 00:10:42,220
theming of this happened but he got it

00:10:40,330 --> 00:10:43,960
started by using bootstrap so Twitter's

00:10:42,220 --> 00:10:45,880
bootstrap project and it's a very

00:10:43,960 --> 00:10:47,050
straightforward very simple theme I

00:10:45,880 --> 00:10:50,380
think you'll appreciate what you're

00:10:47,050 --> 00:10:52,750
going to see Peter Jackson is a newer

00:10:50,380 --> 00:10:54,720
developer at aquia he's on the cloud

00:10:52,750 --> 00:10:58,540
systems engineering team with me as well

00:10:54,720 --> 00:11:00,160
he ironically is not really a drupal

00:10:58,540 --> 00:11:02,440
developer so when he sat down on this

00:11:00,160 --> 00:11:03,850
project he didn't know Drupal um he

00:11:02,440 --> 00:11:06,610
knows how to maintain our infrastructure

00:11:03,850 --> 00:11:07,180
and he knows how to work inside of the

00:11:06,610 --> 00:11:09,010
API

00:11:07,180 --> 00:11:11,530
that we have but he really wasn't a

00:11:09,010 --> 00:11:14,140
drupal developer so basically what you

00:11:11,530 --> 00:11:15,730
had was to Drupal developers that kind

00:11:14,140 --> 00:11:18,070
of knew what was going on and that's

00:11:15,730 --> 00:11:20,200
Peter will lannon who actually maintains

00:11:18,070 --> 00:11:23,380
a lot of the solar modules that you'll

00:11:20,200 --> 00:11:25,330
find on Dido and myself and then you had

00:11:23,380 --> 00:11:28,300
one developer that that was relatively

00:11:25,330 --> 00:11:30,280
new to Drupal you had one Famer and then

00:11:28,300 --> 00:11:32,350
a couple of operations guys that helped

00:11:30,280 --> 00:11:34,150
us for a few minutes so you can

00:11:32,350 --> 00:11:35,350
accomplish a lot in a really short time

00:11:34,150 --> 00:11:39,010
frame and I think that's part of the

00:11:35,350 --> 00:11:41,470
power so basically we have six

00:11:39,010 --> 00:11:42,970
contributed modules the way this is

00:11:41,470 --> 00:11:44,140
going to work is that I'll just go

00:11:42,970 --> 00:11:46,960
through and give you all the boring

00:11:44,140 --> 00:11:49,450
stuff up front I tell you essentially

00:11:46,960 --> 00:11:51,280
what we used what we didn't use and then

00:11:49,450 --> 00:11:54,550
we'll get into the code samples so most

00:11:51,280 --> 00:11:57,310
of this presentation is going to be very

00:11:54,550 --> 00:11:59,560
akin to a code review so you'll be able

00:11:57,310 --> 00:12:01,870
to see exactly what we did I hope that's

00:11:59,560 --> 00:12:03,310
comfortable with everybody if it's not

00:12:01,870 --> 00:12:05,740
you might fall asleep about halfway

00:12:03,310 --> 00:12:07,750
through this and I can't promise that

00:12:05,740 --> 00:12:12,580
what will happen to you if you do that

00:12:07,750 --> 00:12:15,070
so we use the Aqua connector module the

00:12:12,580 --> 00:12:16,720
Aqua connector module for us was

00:12:15,070 --> 00:12:19,150
imperative because we wanted to utilize

00:12:16,720 --> 00:12:23,260
the back end solar servers that that

00:12:19,150 --> 00:12:25,600
aqua offers you can definitely achieve

00:12:23,260 --> 00:12:27,730
this without using any aqua servers it's

00:12:25,600 --> 00:12:31,660
very easy but for us this was just a

00:12:27,730 --> 00:12:34,660
very simple thing to do we use the

00:12:31,660 --> 00:12:36,880
apache solar module this is a contribute

00:12:34,660 --> 00:12:39,880
it on do it integrates Drupal with the

00:12:36,880 --> 00:12:41,920
Apache Solr search platform Apache Solr

00:12:39,880 --> 00:12:43,990
attachments allows searching within file

00:12:41,920 --> 00:12:46,060
attachments move solar so it's kind of

00:12:43,990 --> 00:12:48,070
you know the whole Lego concept you can

00:12:46,060 --> 00:12:50,710
plug and play exactly what you need to

00:12:48,070 --> 00:12:53,410
get the most bang for your buck for lack

00:12:50,710 --> 00:12:56,740
of a better way of phrasing that we used

00:12:53,410 --> 00:12:58,380
the Apache Solr multi-site search so the

00:12:56,740 --> 00:13:00,880
ability to search across multiple sites

00:12:58,380 --> 00:13:03,880
we used the fasted API which I mentioned

00:13:00,880 --> 00:13:06,580
earlier the fasted API is actually

00:13:03,880 --> 00:13:10,300
pretty nice I I was really impressed by

00:13:06,580 --> 00:13:12,280
the simplicity that was involved in

00:13:10,300 --> 00:13:13,960
getting this to work and i believe the

00:13:12,280 --> 00:13:16,030
fasted api went a long way to making

00:13:13,960 --> 00:13:18,790
that happen some of the other modules

00:13:16,030 --> 00:13:20,710
that apache solar modules those are well

00:13:18,790 --> 00:13:22,600
baked modules you're not going

00:13:20,710 --> 00:13:24,430
have a lot of problems once you start

00:13:22,600 --> 00:13:27,070
using them on a Drupal site if things

00:13:24,430 --> 00:13:30,040
are just going to work and it's very

00:13:27,070 --> 00:13:33,270
nice so we also use the ldap module I

00:13:30,040 --> 00:13:35,890
spoke about that a little bit as well

00:13:33,270 --> 00:13:36,790
the custom module that we wrote and what

00:13:35,890 --> 00:13:38,680
I'm going to spend most of the

00:13:36,790 --> 00:13:42,250
presentation on we call the api docs

00:13:38,680 --> 00:13:43,510
search module this allows us to do

00:13:42,250 --> 00:13:47,890
everything that I've been talking about

00:13:43,510 --> 00:13:50,590
integrates with solar integrates with

00:13:47,890 --> 00:13:52,480
Ruby basically provides a couple of

00:13:50,590 --> 00:13:55,180
stream wrappers to be able to work well

00:13:52,480 --> 00:13:57,910
with github and i'll be going over that

00:13:55,180 --> 00:13:59,650
that's also available in a sandbox on do

00:13:57,910 --> 00:14:04,870
so i'll give you the link to there as

00:13:59,650 --> 00:14:07,420
well so let's just dive in sewer takes

00:14:04,870 --> 00:14:08,920
us i stream wrappers how many people

00:14:07,420 --> 00:14:12,220
have used stream rappers are written

00:14:08,920 --> 00:14:15,310
custom stream wrappers before one to

00:14:12,220 --> 00:14:17,860
four people okay cool how many people

00:14:15,310 --> 00:14:20,230
know what they are is maybe a couple

00:14:17,860 --> 00:14:23,320
more okay so stream wrappers basically

00:14:20,230 --> 00:14:27,330
give us the ability to do some

00:14:23,320 --> 00:14:27,330
interesting things inside of drupal and

00:14:28,110 --> 00:14:34,180
this is kind of what a stream rapper

00:14:30,700 --> 00:14:36,490
looks like on a very basic level it

00:14:34,180 --> 00:14:38,410
tells us where in the file system the

00:14:36,490 --> 00:14:40,330
particular file type is that we were

00:14:38,410 --> 00:14:42,130
looking for it gives us a couple methods

00:14:40,330 --> 00:14:45,130
to be able to reference the file

00:14:42,130 --> 00:14:47,530
externally so in the case of github we

00:14:45,130 --> 00:14:49,600
have the ability to say well the the

00:14:47,530 --> 00:14:51,670
local file that we're going to index is

00:14:49,600 --> 00:14:53,860
actually rendered on the file system

00:14:51,670 --> 00:14:56,470
outside of the web root but when you

00:14:53,860 --> 00:14:59,110
click on that search result we want you

00:14:56,470 --> 00:15:02,560
to go to the markdown file on github com

00:14:59,110 --> 00:15:05,170
in the context of the repo in the

00:15:02,560 --> 00:15:07,120
context of the branch exactly where you

00:15:05,170 --> 00:15:09,280
need to be to be able to you know really

00:15:07,120 --> 00:15:12,730
ascertain what's going on they're very

00:15:09,280 --> 00:15:15,370
simple very straightforward and this is

00:15:12,730 --> 00:15:19,630
basically what it looks like so I'll get

00:15:15,370 --> 00:15:22,270
back to this in just a sec so we had two

00:15:19,630 --> 00:15:24,100
basic types of content wrappers we have

00:15:22,270 --> 00:15:26,200
the generated content and then we had

00:15:24,100 --> 00:15:28,390
the github style content so the

00:15:26,200 --> 00:15:31,420
generated content is stuff like our

00:15:28,390 --> 00:15:33,040
cloud API it's a regular HTML file it's

00:15:31,420 --> 00:15:36,190
stuff like the

00:15:33,040 --> 00:15:38,320
markdown files from github you basically

00:15:36,190 --> 00:15:39,940
run those through a parser rendered them

00:15:38,320 --> 00:15:41,740
into something that generates them and

00:15:39,940 --> 00:15:43,630
then call it good we can look at those

00:15:41,740 --> 00:15:46,480
in the context of the website that I'm

00:15:43,630 --> 00:15:49,269
about to show you so we don't want them

00:15:46,480 --> 00:15:51,279
going externally we may or may not want

00:15:49,269 --> 00:15:54,279
that content to be publicly available it

00:15:51,279 --> 00:15:57,430
needs to be protected by ldap that's

00:15:54,279 --> 00:15:59,110
basically what this one's doing allow

00:15:57,430 --> 00:16:00,639
the files to be viewable from search

00:15:59,110 --> 00:16:02,230
results in the context of the Drupal

00:16:00,639 --> 00:16:04,149
site I'll give you an example of that in

00:16:02,230 --> 00:16:06,839
just a little bit it allows us to store

00:16:04,149 --> 00:16:09,540
raw HTML for display from search results

00:16:06,839 --> 00:16:12,069
you'll see that in the presentation

00:16:09,540 --> 00:16:14,680
github stored github content for

00:16:12,069 --> 00:16:17,519
preprocessing and indexing so basically

00:16:14,680 --> 00:16:21,069
what we did is we created a a subfolder

00:16:17,519 --> 00:16:24,630
of our main check out in our main check

00:16:21,069 --> 00:16:24,630
out Ken it looks a little bit like this

00:16:24,779 --> 00:16:34,540
let's see that's cut off for you I

00:16:31,509 --> 00:16:36,940
assume since I can't see it okay so that

00:16:34,540 --> 00:16:38,860
this is our main check out you'll note

00:16:36,940 --> 00:16:41,199
that we have a generated folder here we

00:16:38,860 --> 00:16:43,240
have a github folder here each of these

00:16:41,199 --> 00:16:46,980
github folders corresponds to an actual

00:16:43,240 --> 00:16:51,130
repo on github the generated content

00:16:46,980 --> 00:16:52,779
corresponds to something similar so

00:16:51,130 --> 00:16:55,120
you'll note that we have a cloud API a

00:16:52,779 --> 00:16:58,360
cloudy API of fields in the fields down

00:16:55,120 --> 00:17:02,230
here our fields documentation is just

00:16:58,360 --> 00:17:05,500
basically do the git checkout get clone

00:17:02,230 --> 00:17:09,280
whatever go into the root directory run

00:17:05,500 --> 00:17:10,959
in our doc dash 0 to pipe the output to

00:17:09,280 --> 00:17:13,689
a different location and then basically

00:17:10,959 --> 00:17:16,209
this is the results of the RDoc so what

00:17:13,689 --> 00:17:19,059
we did is we stored this outside of the

00:17:16,209 --> 00:17:20,919
web group so that the public can

00:17:19,059 --> 00:17:22,839
typically get to it and then we use the

00:17:20,919 --> 00:17:25,659
stream wrappers to allow access that's

00:17:22,839 --> 00:17:27,130
controlled so if it's generated document

00:17:25,659 --> 00:17:30,600
you want to look specifically at that

00:17:27,130 --> 00:17:30,600
you have the ability to do so

00:17:34,350 --> 00:17:38,650
I'm going to get the slides out of the

00:17:36,670 --> 00:17:40,030
way as quick as possible actually before

00:17:38,650 --> 00:17:42,700
I get the slides out of the way let me

00:17:40,030 --> 00:17:45,460
just give you some concept of what it is

00:17:42,700 --> 00:17:49,480
that I'm talking about and what we

00:17:45,460 --> 00:17:50,710
actually made so this is the main login

00:17:49,480 --> 00:17:52,090
page it's very simple very

00:17:50,710 --> 00:17:53,860
straightforward like I said he used

00:17:52,090 --> 00:17:55,510
bootstrap to get a good start on it we

00:17:53,860 --> 00:17:57,150
didn't want to complicate layout we

00:17:55,510 --> 00:17:59,050
didn't want it to look like drupal

00:17:57,150 --> 00:18:01,420
there's definitely a lot of room for

00:17:59,050 --> 00:18:04,480
improvement there as far as Drupal's

00:18:01,420 --> 00:18:06,790
layouts concerned using ldap to

00:18:04,480 --> 00:18:11,020
basically login once you have the login

00:18:06,790 --> 00:18:12,730
you have some of the custom facets that

00:18:11,020 --> 00:18:14,140
I'm going to show you how to create so

00:18:12,730 --> 00:18:16,120
we basically looking at two different

00:18:14,140 --> 00:18:18,120
content types now the generated content

00:18:16,120 --> 00:18:21,520
type and then the github content type

00:18:18,120 --> 00:18:25,030
each one of these content types if you

00:18:21,520 --> 00:18:27,730
remember the folders that I showed you

00:18:25,030 --> 00:18:30,190
so cloudy bi cloud app date mirror

00:18:27,730 --> 00:18:32,140
fields gardens that type of stuff kind

00:18:30,190 --> 00:18:37,060
of all shows up in here they depending

00:18:32,140 --> 00:18:40,120
on whether it's a generated or or github

00:18:37,060 --> 00:18:41,200
style content type it shows up a little

00:18:40,120 --> 00:18:43,470
bit differently and I can walk you

00:18:41,200 --> 00:18:46,030
through how that's created as well so

00:18:43,470 --> 00:18:50,080
you know we'll just dive in and start

00:18:46,030 --> 00:18:53,370
clicking some buttons on github actually

00:18:50,080 --> 00:18:53,370
let me do this in another tab

00:18:59,570 --> 00:19:07,080
it's terrible having to rely on the

00:19:02,010 --> 00:19:08,429
internet around here sometimes so while

00:19:07,080 --> 00:19:23,100
that's loading does anybody have any

00:19:08,429 --> 00:19:24,870
questions so far they're not really

00:19:23,100 --> 00:19:27,210
content types they're content types in

00:19:24,870 --> 00:19:29,610
the sense of solar considers them to be

00:19:27,210 --> 00:19:32,010
content types so essentially what we're

00:19:29,610 --> 00:19:33,840
doing is we're creating solar documents

00:19:32,010 --> 00:19:35,760
and inside that solar document we're

00:19:33,840 --> 00:19:39,059
setting a type that tells it what that

00:19:35,760 --> 00:19:45,270
actually is so this is going to be

00:19:39,059 --> 00:19:49,080
really slow for me so we'll go to well

00:19:45,270 --> 00:19:52,110
cheat this is basically our aquia repos

00:19:49,080 --> 00:19:54,620
we've got 20 public repos 96 private

00:19:52,110 --> 00:19:58,230
repos one of the things that we've done

00:19:54,620 --> 00:20:00,210
that's pretty interesting is we've gone

00:19:58,230 --> 00:20:02,279
through and standardized on the format

00:20:00,210 --> 00:20:04,200
or sub format of these folders so so

00:20:02,279 --> 00:20:07,289
inside of each one of these we might

00:20:04,200 --> 00:20:10,919
have at the top level we have a doc root

00:20:07,289 --> 00:20:13,230
inside of that doc route and Doc roots

00:20:10,919 --> 00:20:15,779
let me break that up into two words it's

00:20:13,230 --> 00:20:18,480
a doc folder that we use is the root for

00:20:15,779 --> 00:20:20,970
all of our documentation so it's not the

00:20:18,480 --> 00:20:23,130
same as a web doc root inside of there

00:20:20,970 --> 00:20:24,630
we store everything that's relevant to

00:20:23,130 --> 00:20:26,909
the particular project that we're

00:20:24,630 --> 00:20:29,490
working on we found that this gives the

00:20:26,909 --> 00:20:31,320
most relevant data to the developers the

00:20:29,490 --> 00:20:33,419
fastest so it's much easier than

00:20:31,320 --> 00:20:35,580
maintaining a wiki it's much easier than

00:20:33,419 --> 00:20:36,809
having to hire a technical writer to go

00:20:35,580 --> 00:20:40,159
through and document what we're actually

00:20:36,809 --> 00:20:44,250
doing and it's it works out pretty well

00:20:40,159 --> 00:20:48,899
so that's basically what github is the

00:20:44,250 --> 00:20:51,330
cloud API we'll try it again come on an

00:20:48,899 --> 00:20:55,169
external internet and while that's

00:20:51,330 --> 00:20:57,360
thinking about it will cheat all over so

00:20:55,169 --> 00:20:58,980
the alka cloud api is just an HTML

00:20:57,360 --> 00:21:01,080
document that we render this is the

00:20:58,980 --> 00:21:03,390
public facing cloud api that most people

00:21:01,080 --> 00:21:05,669
have access to is a restful interface

00:21:03,390 --> 00:21:07,289
and as you can see it's totally in a

00:21:05,669 --> 00:21:08,789
different format than what we have on

00:21:07,289 --> 00:21:11,539
github or what any of the markdown

00:21:08,789 --> 00:21:11,539
actually is

00:21:11,690 --> 00:21:16,020
that's unfortunate that we're not going

00:21:14,130 --> 00:21:19,470
to have internet but we'll do the best

00:21:16,020 --> 00:21:21,870
that we can and then the hosting a queue

00:21:19,470 --> 00:21:27,180
API I believe I have a link to that as

00:21:21,870 --> 00:21:29,880
well kind of looks a little bit like

00:21:27,180 --> 00:21:32,760
this so this is the rdoc generated

00:21:29,880 --> 00:21:35,550
content and this has some neat features

00:21:32,760 --> 00:21:38,430
in it that may or may not work because

00:21:35,550 --> 00:21:40,710
i'm not actually online but it has a

00:21:38,430 --> 00:21:42,360
nice little JavaScript interface to do

00:21:40,710 --> 00:21:44,610
some additional searching within the API

00:21:42,360 --> 00:21:46,280
and then it goes through and allows you

00:21:44,610 --> 00:21:49,350
to do some neat things like actually

00:21:46,280 --> 00:21:50,760
click on the the method names and when

00:21:49,350 --> 00:21:52,470
you're online it goes through and does a

00:21:50,760 --> 00:21:58,550
nice little Ajax e deal where it opens

00:21:52,470 --> 00:22:01,140
up and shows you some additional data so

00:21:58,550 --> 00:22:07,170
let's see what happens if I do a search

00:22:01,140 --> 00:22:08,910
and this was working long enough for me

00:22:07,170 --> 00:22:11,610
to get here earlier so while that's

00:22:08,910 --> 00:22:14,310
thinking about it I'm were there any

00:22:11,610 --> 00:22:17,030
other questions pretty straightforward

00:22:14,310 --> 00:22:17,030
so far

00:22:23,620 --> 00:22:28,460
we're going to walk through Jenkins in

00:22:25,940 --> 00:22:30,830
just a few minutes so basically we're

00:22:28,460 --> 00:22:32,480
using Jenkins to to do a lot of the

00:22:30,830 --> 00:22:34,580
process and while all of the processing

00:22:32,480 --> 00:22:36,230
to generate the content and then we're

00:22:34,580 --> 00:22:39,559
basically checking that into a github

00:22:36,230 --> 00:22:41,960
repo that is all the things that runs

00:22:39,559 --> 00:22:44,620
this particular website once that

00:22:41,960 --> 00:22:46,820
generated content is checked in cron

00:22:44,620 --> 00:22:49,070
functions on the site to pull it down

00:22:46,820 --> 00:22:51,889
into the specific directories that we

00:22:49,070 --> 00:22:54,769
have so for just above the web root we

00:22:51,889 --> 00:22:59,630
have that check out that looks just like

00:22:54,769 --> 00:23:01,279
this has all these different things and

00:22:59,630 --> 00:23:03,830
there is a doc route that is your

00:23:01,279 --> 00:23:06,529
standard Drupal installation but above

00:23:03,830 --> 00:23:08,240
that Jenkins is checking into the

00:23:06,529 --> 00:23:09,950
generated folders checking into the

00:23:08,240 --> 00:23:13,130
github folder and doing a couple of

00:23:09,950 --> 00:23:15,049
other things so I did a quick search I

00:23:13,130 --> 00:23:17,600
searched for something called VPC which

00:23:15,049 --> 00:23:19,429
is Amazon's virtual private cloud you

00:23:17,600 --> 00:23:22,309
can see down here that this is a repo on

00:23:19,429 --> 00:23:23,720
github if I scroll down a little bit

00:23:22,309 --> 00:23:29,059
more I see that this is actually

00:23:23,720 --> 00:23:31,370
generated our doc documentation and this

00:23:29,059 --> 00:23:34,789
site seems to be performing okay so

00:23:31,370 --> 00:23:38,380
let's open that one up and then we'll

00:23:34,789 --> 00:23:38,380
open this one up and hope for the best

00:23:40,600 --> 00:23:47,679
I'll let those keep working um yeah

00:23:53,960 --> 00:23:58,340
yeah the internet starting to work

00:24:10,870 --> 00:24:14,410
so you'll see that that actually takes

00:24:12,820 --> 00:24:16,780
me to the document as it exists on

00:24:14,410 --> 00:24:19,120
github pretty straightforward pretty

00:24:16,780 --> 00:24:21,550
easy to do and then the developer can

00:24:19,120 --> 00:24:25,000
actually read this in the context of of

00:24:21,550 --> 00:24:27,190
what they're most interested in this one

00:24:25,000 --> 00:24:28,720
I might be able to click around a little

00:24:27,190 --> 00:24:30,670
bit more yeah so now you can start to

00:24:28,720 --> 00:24:32,860
see the JavaScript working that the key

00:24:30,670 --> 00:24:34,809
to this is that we wanted to allow the

00:24:32,860 --> 00:24:37,360
functionality of the different languages

00:24:34,809 --> 00:24:38,890
and the different systems to really do

00:24:37,360 --> 00:24:41,020
what they're supposed to do we didn't

00:24:38,890 --> 00:24:43,120
want Drupal to interject any kind of

00:24:41,020 --> 00:24:46,179
artificial rules or anything like that

00:24:43,120 --> 00:24:49,120
and and wanted it to be very natural so

00:24:46,179 --> 00:24:52,120
if I go down you know I I can click on

00:24:49,120 --> 00:24:55,960
different things like that and actually

00:24:52,120 --> 00:24:57,910
see in the context of the document the

00:24:55,960 --> 00:25:02,679
code that they need to do their jobs

00:24:57,910 --> 00:25:05,890
basically the Jenkins information we'll

00:25:02,679 --> 00:25:07,450
get to in just a second Jenkins runs a

00:25:05,890 --> 00:25:09,340
cron that gathers all of the data we

00:25:07,450 --> 00:25:11,980
want indexed and pushes it into the main

00:25:09,340 --> 00:25:14,650
gate repository as rendered content for

00:25:11,980 --> 00:25:16,120
the site once content is in get it is

00:25:14,650 --> 00:25:17,320
pulled onto the server for our stream

00:25:16,120 --> 00:25:20,710
wrappers to work I kind of already

00:25:17,320 --> 00:25:22,450
talked about all this so let's kind of

00:25:20,710 --> 00:25:23,740
walk through it a little bit the first

00:25:22,450 --> 00:25:25,780
thing that it does is it checks out

00:25:23,740 --> 00:25:27,820
thought the repo that is running the

00:25:25,780 --> 00:25:29,860
main site loops over each of the get

00:25:27,820 --> 00:25:32,020
repositories we arrange that interested

00:25:29,860 --> 00:25:33,910
in indexing scans there are standard

00:25:32,020 --> 00:25:35,470
documentation types and locations for

00:25:33,910 --> 00:25:39,550
changes and commits them to all the

00:25:35,470 --> 00:25:40,929
things so basically the way that well we

00:25:39,550 --> 00:25:43,059
will get to how that's managed in a

00:25:40,929 --> 00:25:44,470
little bit and then it runs our dock to

00:25:43,059 --> 00:25:47,020
generate ruby docks and commits the

00:25:44,470 --> 00:25:49,420
documentation if anything's changed now

00:25:47,020 --> 00:25:51,550
what that actually looks like is kind of

00:25:49,420 --> 00:25:54,160
cool how many people have worked with

00:25:51,550 --> 00:25:58,200
Jenkins before a few more than that

00:25:54,160 --> 00:26:01,170
that's good Jenkins is a fantastic tool

00:25:58,200 --> 00:26:05,020
particularly in the context of Drupal

00:26:01,170 --> 00:26:07,630
Jenkins let's say for example cron

00:26:05,020 --> 00:26:09,700
management you're working on a larger

00:26:07,630 --> 00:26:11,590
site that tends to have a you know an

00:26:09,700 --> 00:26:14,920
increase in cron jobs are necessary to

00:26:11,590 --> 00:26:17,770
make it function properly Jenkins will

00:26:14,920 --> 00:26:19,540
allow you if you can used rush to

00:26:17,770 --> 00:26:21,580
represent your commands that you're

00:26:19,540 --> 00:26:24,220
running and I can walk you through a

00:26:21,580 --> 00:26:26,620
little bit of drush to do that but it

00:26:24,220 --> 00:26:28,030
gives you the ability to to overcome

00:26:26,620 --> 00:26:29,799
some of the shortcomings in Drupal's

00:26:28,030 --> 00:26:32,590
chron system and it allows you to get

00:26:29,799 --> 00:26:34,120
more active feedback so at a minimum if

00:26:32,590 --> 00:26:36,070
you're not using Jenkins you think you

00:26:34,120 --> 00:26:38,409
have no reason to maybe you look at it

00:26:36,070 --> 00:26:40,210
as a good solution for cron management

00:26:38,409 --> 00:26:42,010
to help you identify when your sites are

00:26:40,210 --> 00:26:44,530
actually breaking or not executing

00:26:42,010 --> 00:26:46,690
prawns properly and this is kind of what

00:26:44,530 --> 00:26:48,640
the interface looks like this is a

00:26:46,690 --> 00:26:50,370
configuration screen for the job that

00:26:48,640 --> 00:26:52,720
we're running it's very straightforward

00:26:50,370 --> 00:26:54,340
one of the things in chickens that you

00:26:52,720 --> 00:26:56,409
always want to do is limit the number

00:26:54,340 --> 00:26:57,850
amount of data that it stores otherwise

00:26:56,409 --> 00:27:00,580
you'll end up filling up your hard drive

00:26:57,850 --> 00:27:02,289
is pretty quick pretty straightforward

00:27:00,580 --> 00:27:05,770
every 45 minutes we're going to run this

00:27:02,289 --> 00:27:09,549
job and this is kind of what the job

00:27:05,770 --> 00:27:14,110
looks like I don't know if everybody can

00:27:09,549 --> 00:27:15,640
see that or not but let's pull it over

00:27:14,110 --> 00:27:21,190
here maybe this will make it a little

00:27:15,640 --> 00:27:23,799
easier to read okay so this is a basic

00:27:21,190 --> 00:27:26,500
basic bash script there's not too much

00:27:23,799 --> 00:27:29,500
fancy about it see if we can give you a

00:27:26,500 --> 00:27:32,190
little bit more real estate starts off

00:27:29,500 --> 00:27:35,020
at the beginning goes through and looks

00:27:32,190 --> 00:27:37,330
word these dollar sign variables or

00:27:35,020 --> 00:27:38,830
environmental variables in in Jenkins so

00:27:37,330 --> 00:27:40,659
very straightforward inside of the

00:27:38,830 --> 00:27:42,520
Jenkins workspace for this particular

00:27:40,659 --> 00:27:44,559
job we have a subfolder called all the

00:27:42,520 --> 00:27:46,120
things inside of all the things we

00:27:44,559 --> 00:27:49,450
basically want to make sure that it's a

00:27:46,120 --> 00:27:50,919
git checkout so when this runs naturally

00:27:49,450 --> 00:27:52,539
this isn't here the first time so all

00:27:50,919 --> 00:27:54,880
that we do is clean up anything that

00:27:52,539 --> 00:27:56,650
might be there that's not relevant if we

00:27:54,880 --> 00:27:59,980
don't have get information and then

00:27:56,650 --> 00:28:03,039
clone our job once it's cloned we

00:27:59,980 --> 00:28:05,020
basically move into the directory reset

00:28:03,039 --> 00:28:07,840
it to its original state as far as the

00:28:05,020 --> 00:28:09,909
upstream repository is concerned and

00:28:07,840 --> 00:28:13,030
then we loop through each of the github

00:28:09,909 --> 00:28:15,490
repos that we have in place and again

00:28:13,030 --> 00:28:16,630
all of this information is referenced in

00:28:15,490 --> 00:28:18,159
the slides and you'll be able to

00:28:16,630 --> 00:28:20,350
download all of this if you need to go

00:28:18,159 --> 00:28:21,850
through it but what we're doing here is

00:28:20,350 --> 00:28:23,530
looping through our fields repo our

00:28:21,850 --> 00:28:27,100
Gardens repo we have something called

00:28:23,530 --> 00:28:29,400
search govna we do the cloud API gardens

00:28:27,100 --> 00:28:31,690
mobile cloud at me or a couple of things

00:28:29,400 --> 00:28:33,520
and it's pretty straightforward for each

00:28:31,690 --> 00:28:36,100
repository we're going to go through and

00:28:33,520 --> 00:28:38,340
make you know that that top-level folder

00:28:36,100 --> 00:28:42,159
that I showed you here called github

00:28:38,340 --> 00:28:43,960
we're then going to create go through

00:28:42,159 --> 00:28:45,330
and do the same thing so if it doesn't

00:28:43,960 --> 00:28:47,230
already exist we're going to clone it

00:28:45,330 --> 00:28:48,220
we're going to go through and make sure

00:28:47,230 --> 00:28:50,549
that everything is up to date

00:28:48,220 --> 00:28:52,480
everything's reset to its original

00:28:50,549 --> 00:28:55,029
information and then we're basically

00:28:52,480 --> 00:28:59,019
going to copy all of the relevant

00:28:55,029 --> 00:29:01,419
documentation out of that repo into the

00:28:59,019 --> 00:29:05,230
specific folder so if you go into here

00:29:01,419 --> 00:29:07,179
you won't actually see the entire check

00:29:05,230 --> 00:29:08,799
out for cloud API but you will see the

00:29:07,179 --> 00:29:11,470
relevant pieces of information that we

00:29:08,799 --> 00:29:15,340
want to pass on the solar so pretty

00:29:11,470 --> 00:29:17,649
straightforward here we get a little

00:29:15,340 --> 00:29:19,509
fancier this is where we're actually

00:29:17,649 --> 00:29:21,279
starting to interact with Ruby a little

00:29:19,509 --> 00:29:23,470
bit and this is bash so we can just call

00:29:21,279 --> 00:29:27,429
the command directly so we move into the

00:29:23,470 --> 00:29:29,249
aq gym which is the primary heart of our

00:29:27,429 --> 00:29:32,320
hosting infrastructure and it's

00:29:29,249 --> 00:29:34,029
primarily written in Ruby we run in our

00:29:32,320 --> 00:29:35,409
doc command to generate it and same

00:29:34,029 --> 00:29:39,879
thing we move it into that that

00:29:35,409 --> 00:29:41,590
generated folder so generated fields and

00:29:39,879 --> 00:29:44,409
you'll see a lot of HTML versus the

00:29:41,590 --> 00:29:47,379
actual code that's there this HTML

00:29:44,409 --> 00:29:49,210
that's copied over is is identical to

00:29:47,379 --> 00:29:52,989
the HTML that's generated from the

00:29:49,210 --> 00:29:54,639
argument so then basically we add

00:29:52,989 --> 00:29:55,799
everything gets pretty intelligent we

00:29:54,639 --> 00:29:58,929
don't have to worry too much about

00:29:55,799 --> 00:30:01,659
what's changed or hasn't changed and

00:29:58,929 --> 00:30:03,519
then basically push it upstream so then

00:30:01,659 --> 00:30:05,139
at that point we use the website to run

00:30:03,519 --> 00:30:06,309
a cron job pull it down on the cron job

00:30:05,139 --> 00:30:09,340
and we suddenly have all of our

00:30:06,309 --> 00:30:11,739
information for indexing so does that

00:30:09,340 --> 00:30:19,080
kind of help you understand how we're

00:30:11,739 --> 00:30:19,080
getting it there cool let's see

00:30:21,380 --> 00:30:25,940
so before we can index contents in solar

00:30:24,110 --> 00:30:28,400
we need to identify what should be

00:30:25,940 --> 00:30:30,110
indexed once identified the file is

00:30:28,400 --> 00:30:32,360
tracked in my sequel so that it can be

00:30:30,110 --> 00:30:34,940
processed efficiently so basically what

00:30:32,360 --> 00:30:38,570
we do in order to maintain that part is

00:30:34,940 --> 00:30:43,820
we loop through each of the files we do

00:30:38,570 --> 00:30:45,620
a sha hash of them to be able to get a

00:30:43,820 --> 00:30:47,540
signature of the content of that file

00:30:45,620 --> 00:30:50,270
and then we store that into my sequel

00:30:47,540 --> 00:30:52,670
database with a status code that allows

00:30:50,270 --> 00:30:54,770
us to make sure that we're only indexing

00:30:52,670 --> 00:30:56,090
things that have changed so there's a

00:30:54,770 --> 00:30:58,010
combination of techniques to achieve

00:30:56,090 --> 00:31:00,800
that in solar number one is setting a

00:30:58,010 --> 00:31:02,270
last index document position and I'll

00:31:00,800 --> 00:31:04,250
show you the function for that in just a

00:31:02,270 --> 00:31:06,500
few minutes and then the other is just

00:31:04,250 --> 00:31:08,540
making sure that we're only putting

00:31:06,500 --> 00:31:09,800
relevant information in the database so

00:31:08,540 --> 00:31:13,700
if it's already been indexed we're

00:31:09,800 --> 00:31:15,350
really not interested in it so cron is

00:31:13,700 --> 00:31:17,570
used to pull down changes Jenkins may

00:31:15,350 --> 00:31:19,730
have pushed each of the stream wrapper

00:31:17,570 --> 00:31:24,910
file directories has scanned for valid

00:31:19,730 --> 00:31:24,910
content and we'll get into the code

00:31:25,300 --> 00:31:31,700
because code is awesome so this is

00:31:30,170 --> 00:31:34,340
basically the function that goes through

00:31:31,700 --> 00:31:36,940
and does the scanning we start off with

00:31:34,340 --> 00:31:38,960
an empty array we're in you know the

00:31:36,940 --> 00:31:41,060
comments say it all we're going to walk

00:31:38,960 --> 00:31:42,650
through manage two directories and

00:31:41,060 --> 00:31:44,060
generate a hash for each file and we're

00:31:42,650 --> 00:31:45,980
going to insert the record if it doesn't

00:31:44,060 --> 00:31:48,740
exist if the hash is different than the

00:31:45,980 --> 00:31:50,570
stored hash update the hash changed the

00:31:48,740 --> 00:31:52,820
timestamp and the status in case it was

00:31:50,570 --> 00:31:54,560
deleted and then we're going to do a

00:31:52,820 --> 00:31:57,320
stat on each file and delete those which

00:31:54,560 --> 00:32:01,820
no longer exists the way this looks like

00:31:57,320 --> 00:32:06,650
in code so api's search get files from

00:32:01,820 --> 00:32:08,870
disk is basically this one if you look

00:32:06,650 --> 00:32:10,520
we're basically tying into our stream

00:32:08,870 --> 00:32:13,100
wrappers here so our stream wrappers are

00:32:10,520 --> 00:32:14,420
generated and github so this would if

00:32:13,100 --> 00:32:16,820
you were to type it out would be like

00:32:14,420 --> 00:32:20,450
generated colon slash slash I mean that

00:32:16,820 --> 00:32:22,550
tells Drupal at this level that it moves

00:32:20,450 --> 00:32:24,620
up one directory outside of the web root

00:32:22,550 --> 00:32:26,750
goes down into the generated folder and

00:32:24,620 --> 00:32:28,520
then pulls the content there if it's the

00:32:26,750 --> 00:32:30,800
github one it goes up out of the web

00:32:28,520 --> 00:32:32,270
root comes down into the github folder

00:32:30,800 --> 00:32:32,550
and then pulls that relevant content

00:32:32,270 --> 00:32:34,620
from

00:32:32,550 --> 00:32:36,090
they're the ones that were interested in

00:32:34,620 --> 00:32:39,110
and we already filtered this a little

00:32:36,090 --> 00:32:41,400
bit when we did the cron job but we're

00:32:39,110 --> 00:32:43,530
ridiculously anal when it comes to stuff

00:32:41,400 --> 00:32:45,900
like this so we're filtering again HTML

00:32:43,530 --> 00:32:49,890
MD files for the markdown files for

00:32:45,900 --> 00:32:52,830
github and just raw text so that gives

00:32:49,890 --> 00:32:55,740
us a array of files that we basically

00:32:52,830 --> 00:33:00,330
loop through and then we go through

00:32:55,740 --> 00:33:03,060
start creating hash of it select in 2d

00:33:00,330 --> 00:33:05,190
status so this is where we're

00:33:03,060 --> 00:33:09,540
interacting with the database to see

00:33:05,190 --> 00:33:10,530
what already exists if it's dot there

00:33:09,540 --> 00:33:13,260
we're going to go through and do a

00:33:10,530 --> 00:33:21,030
little bit of work on it api docs search

00:33:13,260 --> 00:33:23,520
markup let's see what that does so this

00:33:21,030 --> 00:33:25,890
basically goes through and says if the

00:33:23,520 --> 00:33:28,830
file is a markdown file we want to use

00:33:25,890 --> 00:33:30,360
the Ruby gems to generate it if it's not

00:33:28,830 --> 00:33:32,430
a markdown file we're just going to

00:33:30,360 --> 00:33:34,470
basically return the content of it we

00:33:32,430 --> 00:33:37,110
don't need to store the generated

00:33:34,470 --> 00:33:40,140
content that comes out of the Ruby gems

00:33:37,110 --> 00:33:42,810
so basically what this does is a shell

00:33:40,140 --> 00:33:48,140
exec and it actually returns the output

00:33:42,810 --> 00:33:52,790
directly a ruby ruby file and target so

00:33:48,140 --> 00:33:56,280
our Ruby file is this particular one

00:33:52,790 --> 00:34:01,050
which is about the simplest thing you

00:33:56,280 --> 00:34:02,970
can ever do with the ruby file so that's

00:34:01,050 --> 00:34:05,040
that that's our Ruby magic right there

00:34:02,970 --> 00:34:07,710
Ruby's a very lightweight language is

00:34:05,040 --> 00:34:09,169
very powerful it's very slow it has a

00:34:07,710 --> 00:34:11,220
lot of security issues sometimes

00:34:09,169 --> 00:34:13,500
probably not something you want up front

00:34:11,220 --> 00:34:16,919
on a performant website but on the back

00:34:13,500 --> 00:34:19,140
end it's pretty awesome so we use a gem

00:34:16,919 --> 00:34:21,630
called Ruby gems which allows us tie

00:34:19,140 --> 00:34:24,000
into the Ruby gems framework github

00:34:21,630 --> 00:34:25,410
publishes a markup gem that we've pulled

00:34:24,000 --> 00:34:27,660
down and we're just basically telling

00:34:25,410 --> 00:34:30,240
the file to use it it's important

00:34:27,660 --> 00:34:32,700
whenever you're working on a distributed

00:34:30,240 --> 00:34:34,620
system or you're pushing weird things

00:34:32,700 --> 00:34:36,090
like this out to an environment that may

00:34:34,620 --> 00:34:39,810
not be the same as what you're working

00:34:36,090 --> 00:34:42,120
on that you declare your environment

00:34:39,810 --> 00:34:44,280
properly so that that's a neat little

00:34:42,120 --> 00:34:46,500
trick there and then all that we're

00:34:44,280 --> 00:34:49,379
doing is puts is basically the echo

00:34:46,500 --> 00:34:51,899
or print our of the Ruby world we're

00:34:49,379 --> 00:34:53,790
calling the github markup gem we're

00:34:51,899 --> 00:34:55,500
telling it to render the argument that

00:34:53,790 --> 00:34:58,050
we passed in which is just basically a

00:34:55,500 --> 00:35:04,200
file so that's pretty straightforward

00:34:58,050 --> 00:35:06,510
and what that does is it gives us the

00:35:04,200 --> 00:35:08,130
content that we're then interested in we

00:35:06,510 --> 00:35:11,370
go through add all of it into the

00:35:08,130 --> 00:35:13,530
database and then call it done this

00:35:11,370 --> 00:35:18,380
doesn't actually process anything for

00:35:13,530 --> 00:35:24,690
solar at all so that's basically our

00:35:18,380 --> 00:35:27,120
staging mechanism so now that

00:35:24,690 --> 00:35:29,670
everything's scanned we need to get it

00:35:27,120 --> 00:35:31,800
into solar and this is probably why most

00:35:29,670 --> 00:35:33,330
people are here for each of the scanned

00:35:31,800 --> 00:35:35,580
documents we need to build a solar

00:35:33,330 --> 00:35:38,850
document to be used in search results so

00:35:35,580 --> 00:35:41,010
Solar has a class that allows you to

00:35:38,850 --> 00:35:42,450
define what a document actually is and

00:35:41,010 --> 00:35:44,100
all that we're going to be doing is

00:35:42,450 --> 00:35:45,810
filling in the attributes of that class

00:35:44,100 --> 00:35:48,600
with the information that we're the most

00:35:45,810 --> 00:35:50,460
interested in evaluate the content and

00:35:48,600 --> 00:35:51,960
render it using the github markup Jim if

00:35:50,460 --> 00:35:54,780
necessary kind of already covered on

00:35:51,960 --> 00:35:57,000
that evaluate the content for HTML tags

00:35:54,780 --> 00:36:01,230
to assist with surfacing content in

00:35:57,000 --> 00:36:02,610
searches so that basically means look at

00:36:01,230 --> 00:36:04,860
the the content that's coming through

00:36:02,610 --> 00:36:06,270
determine if it has a title on it has a

00:36:04,860 --> 00:36:09,000
title that we probably want to use that

00:36:06,270 --> 00:36:11,100
if it doesn't have a title skip over to

00:36:09,000 --> 00:36:15,600
the you know standard markup looking for

00:36:11,100 --> 00:36:17,280
h1s h2s items like that send the

00:36:15,600 --> 00:36:19,170
completed document to solar for indexing

00:36:17,280 --> 00:36:22,260
and update our scanned document status

00:36:19,170 --> 00:36:27,110
and dictate that it has been indexed so

00:36:22,260 --> 00:36:27,110
let's see what someone that looks like

00:36:27,260 --> 00:36:33,270
so basically the first step of this is

00:36:30,660 --> 00:36:37,080
to go through and get all the files that

00:36:33,270 --> 00:36:39,510
we need to index this does a rock weary

00:36:37,080 --> 00:36:41,790
of where we're storing that hash data

00:36:39,510 --> 00:36:44,340
that I talked about earlier it looks for

00:36:41,790 --> 00:36:45,900
changed or files that have their

00:36:44,340 --> 00:36:48,300
appropriate status due to indicate that

00:36:45,900 --> 00:36:50,970
they should be re indexed we're going to

00:36:48,300 --> 00:36:53,520
build documents out of those rows so

00:36:50,970 --> 00:36:54,540
basically for every road return we're

00:36:53,520 --> 00:37:00,240
going to loop through it and create a

00:36:54,540 --> 00:37:05,260
document out of it this one pulls in

00:37:00,240 --> 00:37:07,960
our Apache Solr index file which is a

00:37:05,260 --> 00:37:09,700
part of the core Apache Solr module so

00:37:07,960 --> 00:37:13,809
this allows us to have access to the

00:37:09,700 --> 00:37:15,400
classes that we need to populate so this

00:37:13,809 --> 00:37:18,569
is kind of where the magic happens we're

00:37:15,400 --> 00:37:21,930
just generating a raise of documents

00:37:18,569 --> 00:37:25,030
let's see what that looks like and this

00:37:21,930 --> 00:37:27,789
is the the bulk of the magic I mean pure

00:37:25,030 --> 00:37:29,589
and simple they did the core two getting

00:37:27,789 --> 00:37:31,960
data into solar properly is just

00:37:29,589 --> 00:37:33,400
building out these documents so we're

00:37:31,960 --> 00:37:36,420
starting off with a new Apache Solr

00:37:33,400 --> 00:37:39,339
document we're going to go through and

00:37:36,420 --> 00:37:41,920
process the file render any remaining

00:37:39,339 --> 00:37:46,059
markdown that we need to and I'll show

00:37:41,920 --> 00:37:51,160
you what that looks like which is I

00:37:46,059 --> 00:37:53,020
think in here it kind of already touched

00:37:51,160 --> 00:37:54,609
on this that's the file I showed you

00:37:53,020 --> 00:37:56,109
earlier so if it still needs to be

00:37:54,609 --> 00:38:00,819
rendered it will if it doesn't then it

00:37:56,109 --> 00:38:03,400
won't and then we talked to solar

00:38:00,819 --> 00:38:05,650
through the standard solar modules to

00:38:03,400 --> 00:38:08,289
have it evaluate the tags that are in

00:38:05,650 --> 00:38:10,059
place for for searching and this helps

00:38:08,289 --> 00:38:12,010
when you're going through with solar you

00:38:10,059 --> 00:38:13,900
have an administrative interface to be

00:38:12,010 --> 00:38:16,000
able to say this tag should have more

00:38:13,900 --> 00:38:17,619
weight than this tag or this bit of

00:38:16,000 --> 00:38:19,990
content should be more important than

00:38:17,619 --> 00:38:22,119
that bit of content this is the function

00:38:19,990 --> 00:38:24,609
that handles this for us it's kind of

00:38:22,119 --> 00:38:26,710
black magic as far as most people need

00:38:24,609 --> 00:38:28,930
to be concerned and then we build out

00:38:26,710 --> 00:38:34,299
the basic document structure so it's ID

00:38:28,930 --> 00:38:36,700
URL site a site hash these are specific

00:38:34,299 --> 00:38:38,020
to solar so these are just kind of

00:38:36,700 --> 00:38:41,020
things that you have to do every single

00:38:38,020 --> 00:38:44,049
time and then we go through and talk

00:38:41,020 --> 00:38:45,460
about our entity ID our entities are

00:38:44,049 --> 00:38:47,109
kind of those content types that you

00:38:45,460 --> 00:38:48,609
first saw so entity is going to be

00:38:47,109 --> 00:38:49,630
fields it's going to be a queue it's

00:38:48,609 --> 00:38:53,260
going to be the different things that

00:38:49,630 --> 00:38:56,859
are showing up in the facets then we

00:38:53,260 --> 00:39:01,720
have our bundle or bundle name and then

00:38:56,859 --> 00:39:03,730
a little bit of path information so the

00:39:01,720 --> 00:39:06,190
path information for us is going to be

00:39:03,730 --> 00:39:07,750
things like what you saw at the bottom

00:39:06,190 --> 00:39:11,440
of the those blocks when I did the

00:39:07,750 --> 00:39:13,089
search is it on a github repo is it you

00:39:11,440 --> 00:39:13,270
know a generated piece of content that

00:39:13,089 --> 00:39:15,790
we

00:39:13,270 --> 00:39:18,520
should show you from there we're going

00:39:15,790 --> 00:39:20,080
to extract a well-formed label it's

00:39:18,520 --> 00:39:22,480
pretty straightforward you know go

00:39:20,080 --> 00:39:23,920
through and pull the table out or title

00:39:22,480 --> 00:39:33,010
out of it and that's what I was talking

00:39:23,920 --> 00:39:34,690
about with this so we go through and

00:39:33,010 --> 00:39:36,610
evaluate the content and at this point

00:39:34,690 --> 00:39:38,920
we're basically just dealing with HTML

00:39:36,610 --> 00:39:40,720
files so we're doing a couple of real

00:39:38,920 --> 00:39:42,940
quick reps to see if there's a title in

00:39:40,720 --> 00:39:44,500
place if there's not a title in place we

00:39:42,940 --> 00:39:46,240
go through and start looking for just

00:39:44,500 --> 00:39:48,910
standard markup to make the search

00:39:46,240 --> 00:39:52,420
results relevant and where this shows up

00:39:48,910 --> 00:39:55,990
inside of here is what you're going to

00:39:52,420 --> 00:39:57,760
see basically popping up here so pretty

00:39:55,990 --> 00:40:05,080
straightforward nothing too fancy or

00:39:57,760 --> 00:40:07,030
magic yet there's a couple of you have

00:40:05,080 --> 00:40:08,860
the ability when structuring documents

00:40:07,030 --> 00:40:11,380
and solar to go through and add custom

00:40:08,860 --> 00:40:12,610
attributes to it so some of the

00:40:11,380 --> 00:40:16,120
attributes that we were the most

00:40:12,610 --> 00:40:19,030
interested in were the API source and

00:40:16,120 --> 00:40:22,150
the repo path so in the search results

00:40:19,030 --> 00:40:26,320
you actually see that the repo path come

00:40:22,150 --> 00:40:30,070
up from here and if it has I the API

00:40:26,320 --> 00:40:32,080
source is either generated or github so

00:40:30,070 --> 00:40:33,820
we wanted those pieces of information

00:40:32,080 --> 00:40:36,040
available to solar and the way that you

00:40:33,820 --> 00:40:38,140
actually do that is just depended on to

00:40:36,040 --> 00:40:41,290
this standard file document object it's

00:40:38,140 --> 00:40:43,420
very straightforward very simple and

00:40:41,290 --> 00:40:45,400
then we return that so in essence that

00:40:43,420 --> 00:40:49,720
that's how we're generating the document

00:40:45,400 --> 00:40:53,640
for solar any questions before I dive on

00:40:49,720 --> 00:40:53,640
I know that was probably a lot at once

00:40:59,300 --> 00:41:04,890
yes that that's an internal tracking

00:41:02,010 --> 00:41:06,990
mechanism for solar and this is a

00:41:04,890 --> 00:41:09,330
standard function this entire block up

00:41:06,990 --> 00:41:11,370
here like if you were to go through and

00:41:09,330 --> 00:41:14,060
appropriate this code to do your own

00:41:11,370 --> 00:41:16,890
thing you'd literally leave that

00:41:14,060 --> 00:41:19,080
identical I mean it's just copy paste

00:41:16,890 --> 00:41:20,880
done with it those are the things that

00:41:19,080 --> 00:41:32,850
solar needs to be able to reference its

00:41:20,880 --> 00:41:36,230
document structure good and we're

00:41:32,850 --> 00:41:39,780
running a little short on time I believe

00:41:36,230 --> 00:41:42,720
so I will go ahead and skip over some of

00:41:39,780 --> 00:41:44,940
this I touched on this a little bit I

00:41:42,720 --> 00:41:46,470
and I'll get into more detail here

00:41:44,940 --> 00:41:48,570
because this is kind of the coolest part

00:41:46,470 --> 00:41:50,250
the fast API is used to create custom

00:41:48,570 --> 00:41:52,320
facets we wanted to facet to allow

00:41:50,250 --> 00:41:54,660
filtering by API source and content type

00:41:52,320 --> 00:41:57,570
during generation of the solar document

00:41:54,660 --> 00:41:59,640
populate the SS app API source attribute

00:41:57,570 --> 00:42:02,310
that's what I just showed you in that

00:41:59,640 --> 00:42:04,110
document structure the facet API

00:42:02,310 --> 00:42:06,180
provides block for each content type

00:42:04,110 --> 00:42:08,400
this corresponds with the entity type in

00:42:06,180 --> 00:42:10,850
attribute in our sole would document so

00:42:08,400 --> 00:42:16,520
what that looks like is you've got your

00:42:10,850 --> 00:42:19,230
your API source your content type and

00:42:16,520 --> 00:42:21,990
stuff like that if I go back to the

00:42:19,230 --> 00:42:24,360
beginning you'll see it in a little bit

00:42:21,990 --> 00:42:25,680
clearer context but basically what we're

00:42:24,360 --> 00:42:27,330
doing is generating these blocks

00:42:25,680 --> 00:42:36,210
completely and totally using the facet

00:42:27,330 --> 00:42:39,390
API and I believe this is how it's done

00:42:36,210 --> 00:42:41,220
so it's very simple we just need two

00:42:39,390 --> 00:42:43,800
functions to be able to communicate with

00:42:41,220 --> 00:42:47,280
the facet API the first one is a hook

00:42:43,800 --> 00:42:51,090
fasted API facet info I love Drupal

00:42:47,280 --> 00:42:54,420
naming conventions because but all that

00:42:51,090 --> 00:42:56,430
this does is tell the system the

00:42:54,420 --> 00:42:58,980
metadata about the block that we want to

00:42:56,430 --> 00:43:04,560
create and in this case we're creating

00:42:58,980 --> 00:43:06,990
the API source doc which is this block

00:43:04,560 --> 00:43:08,420
down here we're telling it that we

00:43:06,990 --> 00:43:10,150
should use generated and github

00:43:08,420 --> 00:43:13,599
generated and get

00:43:10,150 --> 00:43:14,740
hub come from this mapping function so

00:43:13,599 --> 00:43:16,960
what you're doing whenever you're

00:43:14,740 --> 00:43:18,760
defining the this metadata is your pic

00:43:16,960 --> 00:43:21,849
giving it a callback that will go

00:43:18,760 --> 00:43:24,099
through and show you basically what you

00:43:21,849 --> 00:43:26,980
want to show up on the block so we have

00:43:24,099 --> 00:43:29,230
the generated EG ER doc that's showing

00:43:26,980 --> 00:43:33,369
up right here and then we have the get

00:43:29,230 --> 00:43:35,440
hub style stuff here and then solar will

00:43:33,369 --> 00:43:37,599
go through an ad in the counts of what

00:43:35,440 --> 00:43:39,339
it's found inside of its database that

00:43:37,599 --> 00:43:42,940
corresponds with what you're defining

00:43:39,339 --> 00:43:45,039
here so that's really straightforward

00:43:42,940 --> 00:43:47,260
really simple I mean there's not a lot

00:43:45,039 --> 00:43:50,680
to it which is part of the cool part of

00:43:47,260 --> 00:43:53,049
this I am thinking that the best way to

00:43:50,680 --> 00:43:54,940
help really drive these lessons home or

00:43:53,049 --> 00:43:56,950
to understand what's going on here is

00:43:54,940 --> 00:43:59,650
just going to be to dive in download

00:43:56,950 --> 00:44:04,750
this code and take a look at it it's

00:43:59,650 --> 00:44:07,930
it's kind of fun drush integration is

00:44:04,750 --> 00:44:12,160
very important with any project so the

00:44:07,930 --> 00:44:14,430
dress integration yeah I'm a

00:44:12,160 --> 00:44:17,079
command-line guy so whenever you're

00:44:14,430 --> 00:44:20,140
invoking on developing more complex

00:44:17,079 --> 00:44:22,000
system or doing more complex tasks I

00:44:20,140 --> 00:44:24,880
find that it's imperative that you first

00:44:22,000 --> 00:44:27,099
do it in drush and then expose it to the

00:44:24,880 --> 00:44:29,470
front end so i don't know if you've ever

00:44:27,099 --> 00:44:31,900
written any dress commands or anything

00:44:29,470 --> 00:44:33,700
like that but this is essentially what

00:44:31,900 --> 00:44:36,700
we did we wanted to have a couple of

00:44:33,700 --> 00:44:40,059
functional areas we wanted to be able to

00:44:36,700 --> 00:44:42,369
clean up documents that are no longer

00:44:40,059 --> 00:44:45,579
relevant so we added an API Doc's clean

00:44:42,369 --> 00:44:47,079
function we added an API Doc's index

00:44:45,579 --> 00:44:48,160
function that'll allow you to go through

00:44:47,079 --> 00:44:49,690
and just generate the index

00:44:48,160 --> 00:44:51,640
automatically you don't have to rely on

00:44:49,690 --> 00:44:53,770
cron you don't have to rely on Drupal to

00:44:51,640 --> 00:44:55,539
do it just log into the system and this

00:44:53,770 --> 00:44:57,910
is a good way to develop as you're going

00:44:55,539 --> 00:45:00,520
forward so you get a more active

00:44:57,910 --> 00:45:02,529
feedback immediately we have the ability

00:45:00,520 --> 00:45:05,109
to scan the documentation everything

00:45:02,529 --> 00:45:06,789
that our front end is doing we represent

00:45:05,109 --> 00:45:12,490
and rush and it makes it it makes it

00:45:06,789 --> 00:45:15,220
very nice so yeah that's the nuts and

00:45:12,490 --> 00:45:16,930
bolts of what we have here I mean I can

00:45:15,220 --> 00:45:20,049
go through the code a little bit more we

00:45:16,930 --> 00:45:21,549
can talk about questions or any specific

00:45:20,049 --> 00:45:22,940
concerns you guys might have that might

00:45:21,549 --> 00:45:30,970
help you in your

00:45:22,940 --> 00:45:30,970
day-to-day work but yeah cool

00:45:34,180 --> 00:45:40,580
so these are the main components of the

00:45:36,740 --> 00:45:42,920
module you can download diesel the API

00:45:40,580 --> 00:45:45,320
search index tank which I walk through

00:45:42,920 --> 00:45:47,930
it manages the solar indexing there's

00:45:45,320 --> 00:45:50,570
really not a lot to it you just generate

00:45:47,930 --> 00:45:52,190
the necessary document that you need you

00:45:50,570 --> 00:45:54,500
tie into the existing hooks that are

00:45:52,190 --> 00:45:57,530
made available and solar handles all of

00:45:54,500 --> 00:46:01,370
the rest of it the search in salt just

00:45:57,530 --> 00:46:05,330
does you know basic database stuff so

00:46:01,370 --> 00:46:09,380
our schema has the entity type the

00:46:05,330 --> 00:46:11,270
entity ID the bundle the status of that

00:46:09,380 --> 00:46:13,240
whether it's been indexed or not that

00:46:11,270 --> 00:46:15,290
gets updated after it's been indexed

00:46:13,240 --> 00:46:18,050
whether or not it's been at the

00:46:15,290 --> 00:46:20,240
timestamp of the change date so we take

00:46:18,050 --> 00:46:23,180
that into consideration the hash that I

00:46:20,240 --> 00:46:25,100
talked about earlier the URI of it and

00:46:23,180 --> 00:46:28,610
then the mime type and the mime types

00:46:25,100 --> 00:46:34,340
used and passed to solar as well so that

00:46:28,610 --> 00:46:35,840
that's pretty straightforward so these

00:46:34,340 --> 00:46:38,930
are the developers that worked on it

00:46:35,840 --> 00:46:45,190
we've got a very awesome blog post

00:46:38,930 --> 00:46:47,570
that's written about this and obviously

00:46:45,190 --> 00:46:50,540
that's not the link I'm trying to click

00:46:47,570 --> 00:46:54,020
on so I'll just blame apple for all the

00:46:50,540 --> 00:46:55,370
good things in the world so you can go

00:46:54,020 --> 00:46:57,140
to that blog read a little bit more

00:46:55,370 --> 00:47:00,260
about it it outlines some of what I

00:46:57,140 --> 00:47:03,380
talked about in more detail and then we

00:47:00,260 --> 00:47:05,480
have the actual contribs that we used so

00:47:03,380 --> 00:47:08,570
there's the Aqua connector module the

00:47:05,480 --> 00:47:11,150
apache solr apache solr attachments the

00:47:08,570 --> 00:47:13,700
apache solr multisearch those are just

00:47:11,150 --> 00:47:14,900
basically enable walk away from you

00:47:13,700 --> 00:47:17,780
don't really have to worry about them

00:47:14,900 --> 00:47:19,970
too much the facet API was the one that

00:47:17,780 --> 00:47:23,030
was the most useful to us while doing

00:47:19,970 --> 00:47:25,700
this the CTools was necessary because

00:47:23,030 --> 00:47:28,490
they a facet API uses it as a dependency

00:47:25,700 --> 00:47:30,260
the ldap integration was just basically

00:47:28,490 --> 00:47:32,510
plug and play I mean it was very

00:47:30,260 --> 00:47:34,010
straightforward and then the module that

00:47:32,510 --> 00:47:36,200
I just showed you in all of the code

00:47:34,010 --> 00:47:39,590
that I just showed you is available in

00:47:36,200 --> 00:47:41,390
Peters sandbox project so if you go to

00:47:39,590 --> 00:47:43,760
that URL you can download this code you

00:47:41,390 --> 00:47:45,350
can go through it line by line I'll be

00:47:43,760 --> 00:47:46,319
here for the rest of the conference so

00:47:45,350 --> 00:47:48,119
if you have any question

00:47:46,319 --> 00:47:50,789
or anything that you'd like to

00:47:48,119 --> 00:47:52,949
accomplish with solar feel free to find

00:47:50,789 --> 00:47:55,380
me and I'll sit down with you and help

00:47:52,949 --> 00:48:00,269
you solve your problems so it should be

00:47:55,380 --> 00:48:03,869
pretty straightforward and the mandatory

00:48:00,269 --> 00:48:06,650
Okwe is hiring in Australia in case you

00:48:03,869 --> 00:48:09,599
didn't know it aqua is looking for

00:48:06,650 --> 00:48:11,400
anybody that is interested we are

00:48:09,599 --> 00:48:14,130
actively hiring very skilled

00:48:11,400 --> 00:48:16,829
professionals we're expanding into the

00:48:14,130 --> 00:48:19,739
Australian market basically working with

00:48:16,829 --> 00:48:21,269
AWS as they expand into Sydney and we

00:48:19,739 --> 00:48:27,900
are interested in people in the local

00:48:21,269 --> 00:48:30,239
area and finally last but not least the

00:48:27,900 --> 00:48:32,039
drupal association basically needs your

00:48:30,239 --> 00:48:34,229
feedback on every single session that

00:48:32,039 --> 00:48:37,529
you've seen here I I know that it's kind

00:48:34,229 --> 00:48:40,349
of annoying to focus on giving feedback

00:48:37,529 --> 00:48:43,380
at the end of the session but if you go

00:48:40,349 --> 00:48:45,150
to the Sydney website node 3 48 and fill

00:48:43,380 --> 00:48:47,130
out the session form it gives the

00:48:45,150 --> 00:48:49,170
Association the ability to target

00:48:47,130 --> 00:48:52,170
content make it better for the drupal

00:48:49,170 --> 00:48:53,670
cons at every single show so if you

00:48:52,170 --> 00:48:55,079
haven't done it or you haven't been

00:48:53,670 --> 00:48:58,910
asked to do it for any of the sessions

00:48:55,079 --> 00:49:14,190
that you've seen so far please do so and

00:48:58,910 --> 00:49:17,459
that's it so yeah the multi-site search

00:49:14,190 --> 00:49:20,519
is just enabled I don't actually know

00:49:17,459 --> 00:49:23,459
why we're having in there but i did a

00:49:20,519 --> 00:49:27,119
module list and that one came up the

00:49:23,459 --> 00:49:29,999
attachments same basic thing I I mean

00:49:27,119 --> 00:49:32,579
the court to walk away from this

00:49:29,999 --> 00:49:35,039
presentation with is that that document

00:49:32,579 --> 00:49:37,680
that you create is where everything is

00:49:35,039 --> 00:49:39,630
at the way that you go through and

00:49:37,680 --> 00:49:41,910
generate that document can be done in a

00:49:39,630 --> 00:49:44,009
variety of different ways and it's as

00:49:41,910 --> 00:49:45,779
simple as putting you know this

00:49:44,009 --> 00:49:47,579
attribute field equals this callback

00:49:45,779 --> 00:49:49,920
that callback can go through and it can

00:49:47,579 --> 00:49:51,569
talk to Ruby I can talk to other web

00:49:49,920 --> 00:49:53,489
services it can do anything that it

00:49:51,569 --> 00:49:55,709
needs to do it doesn't have to be just

00:49:53,489 --> 00:49:58,549
Drupal and that's what I'm really trying

00:49:55,709 --> 00:49:58,549
to drive home here

00:50:10,590 --> 00:50:13,590
cool

00:50:17,470 --> 00:50:24,039
yeah that facet API is amazing I mean

00:50:21,289 --> 00:50:27,049
it's incredibly powerful and you can

00:50:24,039 --> 00:50:34,809
mold it to just about anything you can

00:50:27,049 --> 00:50:34,809
think of yep

00:50:40,800 --> 00:50:45,570
yep and this is completely what you're

00:50:43,200 --> 00:50:48,480
looking at I mean this is a Drupal site

00:50:45,570 --> 00:50:54,540
that doesn't have a single piece of

00:50:48,480 --> 00:51:00,150
content on it so yeah and the websites

00:50:54,540 --> 00:51:02,190
being slow but yeah that that's all the

00:51:00,150 --> 00:51:04,290
content that we're using on Drupal so I

00:51:02,190 --> 00:51:06,210
you know it speaks a lot to the power of

00:51:04,290 --> 00:51:07,950
where Drupal's going as a platform and

00:51:06,210 --> 00:51:09,870
the what I was talking about earlier

00:51:07,950 --> 00:51:12,510
with the Drupal blinders Drupal's a

00:51:09,870 --> 00:51:14,010
small component of larger systems and

00:51:12,510 --> 00:51:17,130
there's so many projects out there that

00:51:14,010 --> 00:51:19,440
does so many neat things Ruby's awesome

00:51:17,130 --> 00:51:21,660
that the Ruby community is incredible

00:51:19,440 --> 00:51:23,790
there's so many gems so many things that

00:51:21,660 --> 00:51:27,660
you can plug in and just get content out

00:51:23,790 --> 00:51:28,920
of or achieve so many tasks so the other

00:51:27,660 --> 00:51:30,750
thing that I'd like you to walk away

00:51:28,920 --> 00:51:33,170
from with this presentation is that

00:51:30,750 --> 00:51:35,520
think outside the box you know don't

00:51:33,170 --> 00:51:36,870
necessarily convince yourself that wall

00:51:35,520 --> 00:51:38,700
Drupal is going to solve all of my

00:51:36,870 --> 00:51:41,070
problems and do everything that I needed

00:51:38,700 --> 00:51:43,200
to there are other ways of integrating

00:51:41,070 --> 00:51:45,900
with other technologies that make a lot

00:51:43,200 --> 00:51:48,930
of sense and are very easy to do you

00:51:45,900 --> 00:51:50,100
know that shell exec command tends to

00:51:48,930 --> 00:51:54,270
cause a lot of people's security

00:51:50,100 --> 00:51:59,840
concerns but if used properly it can be

00:51:54,270 --> 00:51:59,840

YouTube URL: https://www.youtube.com/watch?v=64_kF6KfNjA


