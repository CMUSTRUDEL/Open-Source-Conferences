Title: DrupalCon Vienna 2017: Using typed data and configuration schema for maximum flexibility
Publication date: 2017-09-26
Playlist: DrupalCon Vienna - Sept 2017
Description: 
	In this session, we will explore the power of typed data API in Drupal 8 and how it makes modules like configuration translation possible. We will also have a look at Configuration translation module which provides dynamic routes for most of the configuration entities (fields, block types, content types etc) to be translated in place, instead of using interface translation.

Configuration schema is another piece of the puzzle that every contrib/custom module can easily add (YAML file) to get the great benefits.

I'll also give a quick introduction of Configuration views module, a contributed module that uses configuration schema (similar to configuration translation) to convert most admin pages of core as views.

Attendees should have a basic knowledge of Drupal 8 module development.
Captions: 
	00:00:09,740 --> 00:00:15,929
hi everyone can you hear me all right

00:00:13,429 --> 00:00:17,760
thank you for coming to this session

00:00:15,929 --> 00:00:21,449
hopefully I won't make your thirty

00:00:17,760 --> 00:00:25,050
minutes go based I'm BJ with your

00:00:21,449 --> 00:00:26,849
children I'm part of Drupal core

00:00:25,050 --> 00:00:29,789
especially the topic that we're gonna

00:00:26,849 --> 00:00:33,120
discuss here I spend some contribution

00:00:29,789 --> 00:00:35,969
on this print before we start this one

00:00:33,120 --> 00:00:40,610
how many of you had any test run failure

00:00:35,969 --> 00:00:43,680
because config schema issue in da also

00:00:40,610 --> 00:00:45,329
so it's not a lot of people because you

00:00:43,680 --> 00:00:47,879
know otherwise they would hit me because

00:00:45,329 --> 00:00:50,219
kind of I did a lot of consumer stuff

00:00:47,879 --> 00:00:55,940
and probably you can't blame me for all

00:00:50,219 --> 00:01:02,520
alex for did part of the strict test so

00:00:55,940 --> 00:01:04,949
it can beat me half okay so before so

00:01:02,520 --> 00:01:06,510
that the structure is basically it's

00:01:04,949 --> 00:01:08,180
like a twenty five minutes and we're

00:01:06,510 --> 00:01:10,530
kind of doing like a lightning talk

00:01:08,180 --> 00:01:14,310
session type thing like just explaining

00:01:10,530 --> 00:01:17,580
what it is and bit of disclaimer is I

00:01:14,310 --> 00:01:20,700
kind of extracted that type there a bit

00:01:17,580 --> 00:01:23,909
from other core components so you might

00:01:20,700 --> 00:01:25,380
not find exactly what we are seeing here

00:01:23,909 --> 00:01:28,200
in the code when you go and look at the

00:01:25,380 --> 00:01:30,750
cold but just to you know make it

00:01:28,200 --> 00:01:32,369
more clear and you know abstract rather

00:01:30,750 --> 00:01:35,040
than putting everything together and you

00:01:32,369 --> 00:01:39,119
know this viscous further so do I need

00:01:35,040 --> 00:01:41,729
config scheme are type data when in fact

00:01:39,119 --> 00:01:44,850
if you develop the project before we

00:01:41,729 --> 00:01:47,310
answer the question few examples so this

00:01:44,850 --> 00:01:49,560
is a module called config translation

00:01:47,310 --> 00:01:52,350
module and it's it's part of Drupal

00:01:49,560 --> 00:01:55,219
eight core as you can see here what it

00:01:52,350 --> 00:01:59,100
does is every configuration either your

00:01:55,219 --> 00:02:00,600
module specific settings or any anything

00:01:59,100 --> 00:02:02,490
that you can think of context like files

00:02:00,600 --> 00:02:04,469
data type everything all the

00:02:02,490 --> 00:02:06,119
configurations you can if you enable the

00:02:04,469 --> 00:02:08,759
module we get a tab something like this

00:02:06,119 --> 00:02:09,410
or drop-down menu that says translate

00:02:08,759 --> 00:02:11,510
and

00:02:09,410 --> 00:02:13,190
when you click that one it just goes to

00:02:11,510 --> 00:02:15,470
a different form where you have a

00:02:13,190 --> 00:02:20,030
similar elements but kind of a subset of

00:02:15,470 --> 00:02:21,740
it and this is using the the type data

00:02:20,030 --> 00:02:24,860
slash config schema that we are

00:02:21,740 --> 00:02:27,140
discussing today so that's just to give

00:02:24,860 --> 00:02:29,600
you an idea what it does in a you know

00:02:27,140 --> 00:02:33,460
not like a proper idea but kind of tells

00:02:29,600 --> 00:02:37,040
you it can do a lot of magical stuff and

00:02:33,460 --> 00:02:39,440
it generate the whole form from the form

00:02:37,040 --> 00:02:41,420
that you created and the people who felt

00:02:39,440 --> 00:02:43,580
very bad about config schema test

00:02:41,420 --> 00:02:46,970
failure the config Kimura is the one

00:02:43,580 --> 00:02:50,060
running behind this translation form and

00:02:46,970 --> 00:02:52,760
telling the system that what are the

00:02:50,060 --> 00:02:55,280
fields I need to I can be translated or

00:02:52,760 --> 00:02:57,140
it can be translated so the type there

00:02:55,280 --> 00:03:01,160
is all about the metadata are meta

00:02:57,140 --> 00:03:02,600
details about various you know sub

00:03:01,160 --> 00:03:04,580
components or content specific

00:03:02,600 --> 00:03:07,310
components facility config specific

00:03:04,580 --> 00:03:10,610
components in the core that's one

00:03:07,310 --> 00:03:12,410
example and this is a Search API so this

00:03:10,610 --> 00:03:15,170
is a contributed modules which appear

00:03:12,410 --> 00:03:18,230
which is used by solar and a few other

00:03:15,170 --> 00:03:22,370
searching providers they then use the

00:03:18,230 --> 00:03:24,470
config type data for defining kind of

00:03:22,370 --> 00:03:27,500
mapping what of the different type of

00:03:24,470 --> 00:03:30,380
data that you are storing in the you

00:03:27,500 --> 00:03:32,930
know your solar so this way you have a

00:03:30,380 --> 00:03:34,880
more clarity on you know what you are

00:03:32,930 --> 00:03:36,560
saving in the search system so that when

00:03:34,880 --> 00:03:38,360
you search for certain things you know

00:03:36,560 --> 00:03:41,060
you are you have a better understanding

00:03:38,360 --> 00:03:43,940
of the data store and so on and this is

00:03:41,060 --> 00:03:47,390
a core search API module implementation

00:03:43,940 --> 00:03:49,730
and all the other service product like

00:03:47,390 --> 00:03:54,950
Apache Solr they kind of use this API to

00:03:49,730 --> 00:03:57,770
extend it third one and this is again a

00:03:54,950 --> 00:04:00,709
cont contributor module called config

00:03:57,770 --> 00:04:03,230
views what this module is doing is as

00:04:00,709 --> 00:04:07,940
you can see this module allows you to

00:04:03,230 --> 00:04:10,370
create views or conflict type so the

00:04:07,940 --> 00:04:12,830
list that you see on the other side that

00:04:10,370 --> 00:04:16,200
tells you you can create a view of data

00:04:12,830 --> 00:04:19,470
for date format you can create a view of

00:04:16,200 --> 00:04:22,380
you know custom block revisions so the

00:04:19,470 --> 00:04:25,170
this module provides a view plug-in to

00:04:22,380 --> 00:04:27,540
all the configuration config entities

00:04:25,170 --> 00:04:30,750
that you have in your system so we are

00:04:27,540 --> 00:04:33,990
talking about creating a views of views

00:04:30,750 --> 00:04:35,730
because use is a config entity so we

00:04:33,990 --> 00:04:39,000
talking about be up ssin you know like

00:04:35,730 --> 00:04:41,580
you can go go and create multiple views

00:04:39,000 --> 00:04:44,250
of a views and that's just a one example

00:04:41,580 --> 00:04:48,660
and this module of the box replace

00:04:44,250 --> 00:04:53,700
something like a 12 admin pages as views

00:04:48,660 --> 00:04:55,710
admin conflict pages as we use so like I

00:04:53,700 --> 00:04:57,270
said it's kind of a magic how we can do

00:04:55,710 --> 00:04:59,040
these things but it's all possible

00:04:57,270 --> 00:05:03,720
because of the type there and config

00:04:59,040 --> 00:05:07,230
schema and this is one of the kind of a

00:05:03,720 --> 00:05:09,540
use case or real maybe not real real but

00:05:07,230 --> 00:05:13,280
kind of example how this could change

00:05:09,540 --> 00:05:16,800
your admin UI this is a content type

00:05:13,280 --> 00:05:19,290
page where you have your content type

00:05:16,800 --> 00:05:21,120
and also a list of menus and also you

00:05:19,290 --> 00:05:23,850
have a taxonomy and content this is a

00:05:21,120 --> 00:05:25,920
view and you attach view blocks because

00:05:23,850 --> 00:05:28,920
you can create a configuration use you

00:05:25,920 --> 00:05:30,930
attach those blocks and imagine you have

00:05:28,920 --> 00:05:32,670
a department where they have a set of

00:05:30,930 --> 00:05:34,500
things they need to work together like a

00:05:32,670 --> 00:05:36,960
set of menus and set of content types

00:05:34,500 --> 00:05:39,660
and few content this could be their

00:05:36,960 --> 00:05:41,730
landing page and because it's a view you

00:05:39,660 --> 00:05:44,310
have all other goodies coming out like

00:05:41,730 --> 00:05:46,590
caching permissions role specific

00:05:44,310 --> 00:05:48,060
restrictions and everything so we're

00:05:46,590 --> 00:05:50,580
kind of saying like you can create a

00:05:48,060 --> 00:05:52,710
multiple view display that means all the

00:05:50,580 --> 00:05:54,420
people we see the same URL but they get

00:05:52,710 --> 00:05:56,880
to see different you know different

00:05:54,420 --> 00:06:01,350
layout or different set of components in

00:05:56,880 --> 00:06:03,000
that page so now back to kind of you

00:06:01,350 --> 00:06:05,910
know theory part so these are all the

00:06:03,000 --> 00:06:10,440
things done by type data so now what is

00:06:05,910 --> 00:06:12,420
type data so this slide kind of gives

00:06:10,440 --> 00:06:15,720
you a simplest idea of type data type

00:06:12,420 --> 00:06:18,180
data in in in a very basic level it's

00:06:15,720 --> 00:06:19,950
nothing but a data type and you remember

00:06:18,180 --> 00:06:22,200
we used to say like out of PHP so cool

00:06:19,950 --> 00:06:23,940
because you don't need to know what type

00:06:22,200 --> 00:06:26,040
of data that you have in a particular

00:06:23,940 --> 00:06:27,540
variable that's cool

00:06:26,040 --> 00:06:28,470
maybe if you are writing a one single

00:06:27,540 --> 00:06:32,040
page you

00:06:28,470 --> 00:06:34,740
one single PHP file but system like

00:06:32,040 --> 00:06:37,080
Drupal 8 or even Drupal 7 when you go to

00:06:34,740 --> 00:06:39,960
the level of creating a lot of object a

00:06:37,080 --> 00:06:43,110
lot of different you know like a high

00:06:39,960 --> 00:06:44,940
complex system it gets very complicated

00:06:43,110 --> 00:06:48,720
especially with performance and also

00:06:44,940 --> 00:06:52,230
with kind of your understanding of the

00:06:48,720 --> 00:06:54,210
system itself so type there is a kind of

00:06:52,230 --> 00:06:57,660
approach in group elite core to

00:06:54,210 --> 00:07:00,240
introduce datatype to various components

00:06:57,660 --> 00:07:03,030
or various data okay so whenever we talk

00:07:00,240 --> 00:07:05,760
about data in Drupal 7 it kind of ended

00:07:03,030 --> 00:07:07,860
up talking about entity or you know this

00:07:05,760 --> 00:07:10,980
is another kind of probably we need to

00:07:07,860 --> 00:07:13,620
have a session like what is data in in

00:07:10,980 --> 00:07:15,660
drupal world like you know up to say

00:07:13,620 --> 00:07:18,120
Drupal 6 we didn't have a concept of

00:07:15,660 --> 00:07:21,450
entities or notice kind of handled in a

00:07:18,120 --> 00:07:24,390
special way and user is a different you

00:07:21,450 --> 00:07:27,030
know special thing block is a separate

00:07:24,390 --> 00:07:29,640
thing when it comes to Drupal 8 we

00:07:27,030 --> 00:07:31,620
brought everything under or Troopa 7 we

00:07:29,640 --> 00:07:33,630
brought most of them content under

00:07:31,620 --> 00:07:36,180
entity and the conflict becomes still a

00:07:33,630 --> 00:07:38,580
special thing when it came to Drupal 8

00:07:36,180 --> 00:07:40,530
we brought everything under entity and

00:07:38,580 --> 00:07:43,470
we just divided two categories config

00:07:40,530 --> 00:07:45,810
entities content entities so when you

00:07:43,470 --> 00:07:48,270
come to that level then you need to know

00:07:45,810 --> 00:07:49,860
what type of data that you are dealing

00:07:48,270 --> 00:07:53,220
in different places because you know

00:07:49,860 --> 00:07:55,590
you're in a very higher level so this is

00:07:53,220 --> 00:07:58,229
the you know this is the problem that

00:07:55,590 --> 00:08:01,680
currently we have and the type they are

00:07:58,229 --> 00:08:04,080
trying to solve so if you have an entity

00:08:01,680 --> 00:08:07,620
and you are trying to save status that

00:08:04,080 --> 00:08:09,810
status field is a boolean field but the

00:08:07,620 --> 00:08:12,360
boolean value can be assigned in a very

00:08:09,810 --> 00:08:15,360
you know like a thousand different ways

00:08:12,360 --> 00:08:17,610
you can you can just say quotes one or

00:08:15,360 --> 00:08:19,020
you know like that means true and also

00:08:17,610 --> 00:08:21,180
you can just say 1 or you can take

00:08:19,020 --> 00:08:24,180
through or you can say is that like a

00:08:21,180 --> 00:08:26,010
returning a PHP code function return

00:08:24,180 --> 00:08:29,160
value or you can give something from

00:08:26,010 --> 00:08:32,250
your user defined value and we know how

00:08:29,160 --> 00:08:35,430
we are when we define a function we you

00:08:32,250 --> 00:08:37,890
know Larry careful likely here a session

00:08:35,430 --> 00:08:41,440
two years back explaining how you should

00:08:37,890 --> 00:08:43,870
keep each method or function to return

00:08:41,440 --> 00:08:46,510
you know try to return one particular

00:08:43,870 --> 00:08:49,750
type all the time if it is an RA never

00:08:46,510 --> 00:08:51,970
return null or you know like a empty

00:08:49,750 --> 00:08:53,620
just written empty array so that you

00:08:51,970 --> 00:08:55,090
don't need to check when you call that

00:08:53,620 --> 00:08:56,470
function place you don't need to you can

00:08:55,090 --> 00:08:59,020
do for each all the time

00:08:56,470 --> 00:09:00,760
it doesn't fail so something like that

00:08:59,020 --> 00:09:03,250
you can written a function and that can

00:09:00,760 --> 00:09:05,860
return now or even a boolean value and

00:09:03,250 --> 00:09:07,780
then PHP kind of magically figure it out

00:09:05,860 --> 00:09:09,550
depending on the operation that you are

00:09:07,780 --> 00:09:13,030
trying to do it just decide whether it

00:09:09,550 --> 00:09:15,910
you know boolean value or not so so but

00:09:13,030 --> 00:09:18,370
this is probably okay for one element

00:09:15,910 --> 00:09:21,100
but if you think of an entity you have a

00:09:18,370 --> 00:09:23,980
you know you have a big object entity

00:09:21,100 --> 00:09:26,290
and then you have few and each feels

00:09:23,980 --> 00:09:27,850
kind of having their own type like one

00:09:26,290 --> 00:09:31,270
strain another one is image which is

00:09:27,850 --> 00:09:34,150
having its own set of fields which is a

00:09:31,270 --> 00:09:35,650
list type and then you just having an

00:09:34,150 --> 00:09:37,810
each list type each item in the list

00:09:35,650 --> 00:09:40,420
type which is fear having its own type

00:09:37,810 --> 00:09:42,940
right so now we are trying to get like

00:09:40,420 --> 00:09:46,240
what is data type so we are just

00:09:42,940 --> 00:09:49,560
defining basics types that is coming out

00:09:46,240 --> 00:09:53,140
of core like a string integers and

00:09:49,560 --> 00:09:54,970
boolean and other values and then on top

00:09:53,140 --> 00:09:57,370
of it because we are defining in a

00:09:54,970 --> 00:09:59,650
Drupal or in a framework level at

00:09:57,370 --> 00:10:01,660
language level we have flexibility to

00:09:59,650 --> 00:10:04,660
extend to a complex data types as well

00:10:01,660 --> 00:10:06,130
like entities fields or you know

00:10:04,660 --> 00:10:08,620
anything that you can think of in the

00:10:06,130 --> 00:10:10,540
core or even in your custom entity you

00:10:08,620 --> 00:10:13,150
can think of you can you can define the

00:10:10,540 --> 00:10:16,930
type and also it provides a way of

00:10:13,150 --> 00:10:19,780
saying certain things that we defined

00:10:16,930 --> 00:10:22,420
differently for example phone number it

00:10:19,780 --> 00:10:25,480
is still a number or numeric value in

00:10:22,420 --> 00:10:28,839
terms of type but we you know we treat

00:10:25,480 --> 00:10:30,339
them differently so this is how our for

00:10:28,839 --> 00:10:33,130
example iPhone keyboard appears

00:10:30,339 --> 00:10:35,560
depending on whether it is a text field

00:10:33,130 --> 00:10:37,210
or a numeric field or a phone field you

00:10:35,560 --> 00:10:40,510
know like the providing a context of

00:10:37,210 --> 00:10:43,900
same data-type but you know we treat

00:10:40,510 --> 00:10:47,700
them or we kind of handle them in a

00:10:43,900 --> 00:10:50,350
different way so all these things are

00:10:47,700 --> 00:10:51,450
defined by the typed data which is

00:10:50,350 --> 00:10:53,760
available in call

00:10:51,450 --> 00:10:55,290
okay now back to okay we kind of know

00:10:53,760 --> 00:10:57,240
what is type data okay we are defining

00:10:55,290 --> 00:10:59,070
data types on between onion not stopping

00:10:57,240 --> 00:11:01,170
at very basic level we are defining

00:10:59,070 --> 00:11:03,720
everything that's available in the core

00:11:01,170 --> 00:11:04,980
system that handles data we defining as

00:11:03,720 --> 00:11:08,070
a separate type so that we get more

00:11:04,980 --> 00:11:08,790
context of what it does and how it is

00:11:08,070 --> 00:11:10,680
implemented

00:11:08,790 --> 00:11:12,930
this is another best part of Drupal 8

00:11:10,680 --> 00:11:14,670
core everything that you see everything

00:11:12,930 --> 00:11:16,350
that you hear in terms of concept they

00:11:14,670 --> 00:11:18,030
all do different things but the

00:11:16,350 --> 00:11:20,370
implementation point of view they all

00:11:18,030 --> 00:11:23,520
follow same thing plug-in systems so

00:11:20,370 --> 00:11:25,680
type data is nothing but a plug-in so

00:11:23,520 --> 00:11:28,770
you define the type there are like a

00:11:25,680 --> 00:11:31,520
list email URI they all defined as a

00:11:28,770 --> 00:11:34,500
type data plug-in and then you have a

00:11:31,520 --> 00:11:36,690
option to say the definition class the

00:11:34,500 --> 00:11:39,750
definition class is basically the data

00:11:36,690 --> 00:11:42,720
how you handle the data inside a type

00:11:39,750 --> 00:11:47,010
and then you can even add constraints

00:11:42,720 --> 00:11:49,230
like a symphony constraint component

00:11:47,010 --> 00:11:51,360
like the validation component so if you

00:11:49,230 --> 00:11:53,850
look at email type it has an email

00:11:51,360 --> 00:11:56,100
validation on the type itself so

00:11:53,850 --> 00:11:57,720
whenever you try to use that error it

00:11:56,100 --> 00:11:59,940
automatically kind of does the

00:11:57,720 --> 00:12:02,520
validation magically inside there so you

00:11:59,940 --> 00:12:05,100
just you all you need to add is on this

00:12:02,520 --> 00:12:07,290
definition you just say constraint and

00:12:05,100 --> 00:12:10,020
you add let list of constraints that you

00:12:07,290 --> 00:12:12,810
want to validate with so it's a plugin

00:12:10,020 --> 00:12:14,880
and it has a type data manager the type

00:12:12,810 --> 00:12:17,370
data manager like any other plugin it's

00:12:14,880 --> 00:12:19,380
a manager just discover all the

00:12:17,370 --> 00:12:21,770
different type of died type data plus

00:12:19,380 --> 00:12:24,570
the data definition and it keeps them as

00:12:21,770 --> 00:12:26,900
you know service so that you can consume

00:12:24,570 --> 00:12:29,700
anywhere you want to do various things

00:12:26,900 --> 00:12:33,060
one of the example I didn't show in the

00:12:29,700 --> 00:12:35,310
previous one is in the core is when you

00:12:33,060 --> 00:12:37,620
when you save a form the one I showed

00:12:35,310 --> 00:12:40,440
you like a settings form or anything the

00:12:37,620 --> 00:12:44,330
form value getting validated by type

00:12:40,440 --> 00:12:46,560
data and it gets saved in your in your

00:12:44,330 --> 00:12:49,440
config file say if you have a settings

00:12:46,560 --> 00:12:51,600
file and the conflict the data that you

00:12:49,440 --> 00:12:54,900
enter the text field always sends as a

00:12:51,600 --> 00:12:56,340
string but using the config schema we

00:12:54,900 --> 00:12:58,410
are validating the type and we are

00:12:56,340 --> 00:13:01,020
saving back with that type using you

00:12:58,410 --> 00:13:02,370
know typecasting type thing in a very

00:13:01,020 --> 00:13:03,360
basic level but there are like quite a

00:13:02,370 --> 00:13:04,829
bit of complex

00:13:03,360 --> 00:13:06,750
going on but at the end that's what

00:13:04,829 --> 00:13:08,940
happened it just we load the convict

00:13:06,750 --> 00:13:10,680
schema we load the convict data and we

00:13:08,940 --> 00:13:12,630
just compare what data you are providing

00:13:10,680 --> 00:13:15,750
and we do a typecasting to know okay

00:13:12,630 --> 00:13:18,420
this field the UI is saying quotation 1

00:13:15,750 --> 00:13:20,399
but it is a boolean value so I'm going

00:13:18,420 --> 00:13:22,440
to make it as the truth so we just save

00:13:20,399 --> 00:13:25,230
it as a true so it keeps the more

00:13:22,440 --> 00:13:33,089
consistent config every time when you do

00:13:25,230 --> 00:13:35,430
the changes on your site right and yeah

00:13:33,089 --> 00:13:37,410
so like I said you can define properties

00:13:35,430 --> 00:13:40,620
and you do you define validations and

00:13:37,410 --> 00:13:44,399
also data definition and this is also

00:13:40,620 --> 00:13:47,579
applicable more for your custom entity

00:13:44,399 --> 00:13:49,140
so now you can you can think of your

00:13:47,579 --> 00:13:51,839
entities or anything that you're

00:13:49,140 --> 00:13:53,760
building on top of core you can really

00:13:51,839 --> 00:13:56,579
differentiate or you can really define

00:13:53,760 --> 00:13:58,769
the type so that you will have a better

00:13:56,579 --> 00:14:02,370
understanding of you know like your

00:13:58,769 --> 00:14:04,350
domain level say stations or you know

00:14:02,370 --> 00:14:06,540
cities like then you can it can be a

00:14:04,350 --> 00:14:10,800
separate type and you can handle them in

00:14:06,540 --> 00:14:12,630
a different way and we have few

00:14:10,800 --> 00:14:14,430
interfaces here so the type data

00:14:12,630 --> 00:14:15,870
interface is a basic interface that you

00:14:14,430 --> 00:14:18,630
implement when you need to implement a

00:14:15,870 --> 00:14:20,610
new type and that that get extended to

00:14:18,630 --> 00:14:23,370
complex data types so that complex data

00:14:20,610 --> 00:14:25,680
types our example is entities kind of

00:14:23,370 --> 00:14:27,870
complex data types you have a you know

00:14:25,680 --> 00:14:29,760
like a name to properties and you have

00:14:27,870 --> 00:14:31,589
like you know get set methods everything

00:14:29,760 --> 00:14:34,440
out of box coming from the complex temp

00:14:31,589 --> 00:14:36,870
data type and oh you just you know kind

00:14:34,440 --> 00:14:38,640
of D over there is and also because the

00:14:36,870 --> 00:14:41,040
complex data type kind of holds the

00:14:38,640 --> 00:14:43,949
individual one like say if you have an

00:14:41,040 --> 00:14:47,490
entity which has a field then the field

00:14:43,949 --> 00:14:50,279
is a list interface so internally entity

00:14:47,490 --> 00:14:52,709
knows it kind of dedicate the operation

00:14:50,279 --> 00:14:54,470
what field is to do to its own type it

00:14:52,709 --> 00:14:57,029
doesn't try to do everything by itself

00:14:54,470 --> 00:14:58,649
and then you have primitive interface

00:14:57,029 --> 00:15:01,890
which is kind of we spoke about like

00:14:58,649 --> 00:15:04,380
handling URLs is a string but you have a

00:15:01,890 --> 00:15:06,600
special treatment for URL same goes with

00:15:04,380 --> 00:15:09,720
the timestamp and then the list

00:15:06,600 --> 00:15:12,149
interface is more used in the field like

00:15:09,720 --> 00:15:13,910
when you have multiple instance of you

00:15:12,149 --> 00:15:17,750
know darahannah feel

00:15:13,910 --> 00:15:19,190
and that that's for the there are type

00:15:17,750 --> 00:15:20,810
definition and this is for the data

00:15:19,190 --> 00:15:23,510
definition data definition same thing

00:15:20,810 --> 00:15:25,490
you have a interface and you have a

00:15:23,510 --> 00:15:27,740
common interface and then individual

00:15:25,490 --> 00:15:30,620
items specific interface in the

00:15:27,740 --> 00:15:34,040
definition and those those definition

00:15:30,620 --> 00:15:36,650
kind of define how your data is

00:15:34,040 --> 00:15:40,070
interacting but what kind of values are

00:15:36,650 --> 00:15:42,410
available for your type so it just tells

00:15:40,070 --> 00:15:44,900
that that type is more of a structural

00:15:42,410 --> 00:15:46,400
and the definition is more of how you

00:15:44,900 --> 00:15:52,700
interact with the data when you put it

00:15:46,400 --> 00:15:54,770
in the structure right so as of now

00:15:52,700 --> 00:15:57,080
whatever we discussed like most of the

00:15:54,770 --> 00:15:59,150
things that we discussed are more

00:15:57,080 --> 00:16:01,880
content entities based right like a

00:15:59,150 --> 00:16:04,670
fills entities whenever we say entities

00:16:01,880 --> 00:16:07,700
probably we kind of meant content

00:16:04,670 --> 00:16:10,520
entities like the user entering data but

00:16:07,700 --> 00:16:12,170
so for that you have a few level and

00:16:10,520 --> 00:16:13,850
you're defining the type so you kind of

00:16:12,170 --> 00:16:16,790
know what type the field or whatever

00:16:13,850 --> 00:16:18,770
that entity so you get everything kind

00:16:16,790 --> 00:16:20,900
of as part of the different system right

00:16:18,770 --> 00:16:23,240
like entity different system field is a

00:16:20,900 --> 00:16:26,090
different system what happened to

00:16:23,240 --> 00:16:27,980
conflict so all the configuration in a

00:16:26,090 --> 00:16:31,580
weights getting saved in the Yama file

00:16:27,980 --> 00:16:33,680
and then you use the configuration like

00:16:31,580 --> 00:16:36,110
the custom configuration our basic

00:16:33,680 --> 00:16:38,120
simple configurations like settings you

00:16:36,110 --> 00:16:40,940
handle them in the form write config

00:16:38,120 --> 00:16:44,000
form you just save the data into the you

00:16:40,940 --> 00:16:46,900
know like the config gate config set but

00:16:44,000 --> 00:16:50,510
under the system build like a feels

00:16:46,900 --> 00:16:52,970
entities or you know like a block type

00:16:50,510 --> 00:16:54,950
or taxonomy those things are kind of

00:16:52,970 --> 00:16:56,690
system handles it like they save it but

00:16:54,950 --> 00:16:59,000
still it's all flat Yama file

00:16:56,690 --> 00:17:01,280
configuration and we use different state

00:16:59,000 --> 00:17:04,160
data storage like database or Yama

00:17:01,280 --> 00:17:06,620
depending on your you know needs but at

00:17:04,160 --> 00:17:09,589
the end it's a flat configuration so how

00:17:06,620 --> 00:17:14,660
do we how do we define or how do we tell

00:17:09,589 --> 00:17:16,730
that that flat file metadata to the

00:17:14,660 --> 00:17:19,400
system so that's when the config schema

00:17:16,730 --> 00:17:20,959
come in place and and I kind of gave a

00:17:19,400 --> 00:17:22,880
presentation about config scheme on

00:17:20,959 --> 00:17:25,850
someone else asking like I'm not sure

00:17:22,880 --> 00:17:26,700
what what config schema is so I just try

00:17:25,850 --> 00:17:31,470
to come up with

00:17:26,700 --> 00:17:34,680
kind of a simple example so if you have

00:17:31,470 --> 00:17:36,690
used who can ask or schema in d7 you

00:17:34,680 --> 00:17:38,580
might kind of familiar with the decide

00:17:36,690 --> 00:17:40,350
so you have a table and if you need to

00:17:38,580 --> 00:17:42,750
add a table then you didn't define a

00:17:40,350 --> 00:17:45,750
hook underscore schema where you specify

00:17:42,750 --> 00:17:47,580
all the fields and the meta details

00:17:45,750 --> 00:17:49,530
about the field what that field is our

00:17:47,580 --> 00:17:51,620
field is all about what it's holding and

00:17:49,530 --> 00:17:56,130
what is the length whether it can be

00:17:51,620 --> 00:17:58,740
null or not the config schema is exactly

00:17:56,130 --> 00:18:01,290
the same only difference is it's a ml

00:17:58,740 --> 00:18:04,440
file so this is a user that setting

00:18:01,290 --> 00:18:06,510
start ml file where you have like a 5

00:18:04,440 --> 00:18:08,490
different configuration like for

00:18:06,510 --> 00:18:11,460
anonymous user I think it's a label of

00:18:08,490 --> 00:18:14,910
anonymous user how it should say it and

00:18:11,460 --> 00:18:16,710
then the registration whether they

00:18:14,910 --> 00:18:18,270
anyone can register or it should be

00:18:16,710 --> 00:18:21,020
someone something like the only admin

00:18:18,270 --> 00:18:23,910
can register all this configuration is

00:18:21,020 --> 00:18:25,590
defined like the meta data are details

00:18:23,910 --> 00:18:28,740
about this configuration is defined

00:18:25,590 --> 00:18:30,870
using config schema and the currently

00:18:28,740 --> 00:18:33,840
like I said the conflict translation

00:18:30,870 --> 00:18:36,360
module using only one property here the

00:18:33,840 --> 00:18:39,180
type property the type label means it is

00:18:36,360 --> 00:18:42,000
translatable but type string means it's

00:18:39,180 --> 00:18:45,120
not translatable so string when we say

00:18:42,000 --> 00:18:47,400
string you can imagine machine names you

00:18:45,120 --> 00:18:49,500
know anything that you you wouldn't like

00:18:47,400 --> 00:18:52,050
a you you wouldn't put it in a UI that's

00:18:49,500 --> 00:18:54,330
all kind of non translatable so if you

00:18:52,050 --> 00:18:56,490
see the register that's a string value

00:18:54,330 --> 00:18:59,610
so you won't able to translate that one

00:18:56,490 --> 00:19:01,560
but the label can be translated and then

00:18:59,610 --> 00:19:04,650
text we don't have an example for test

00:19:01,560 --> 00:19:06,960
text here but the text also you know can

00:19:04,650 --> 00:19:10,140
be translatable but that that just have

00:19:06,960 --> 00:19:12,360
one bit like that's just a core you way

00:19:10,140 --> 00:19:14,340
of using it but it can be extended to

00:19:12,360 --> 00:19:15,780
whatever the use case that you are

00:19:14,340 --> 00:19:19,470
defining like you can add additional

00:19:15,780 --> 00:19:22,380
method property to that to to you know

00:19:19,470 --> 00:19:24,780
to your use case which is which is again

00:19:22,380 --> 00:19:26,670
still open like what you gonna build

00:19:24,780 --> 00:19:28,470
this something you know you need to

00:19:26,670 --> 00:19:31,350
think in this level and add some

00:19:28,470 --> 00:19:34,590
property that that you can provide so

00:19:31,350 --> 00:19:37,159
that you can use it for your system so

00:19:34,590 --> 00:19:38,960
this is this is all about conflicts

00:19:37,159 --> 00:19:41,330
you know like more for the configuration

00:19:38,960 --> 00:19:46,549
in the system so this is why we started

00:19:41,330 --> 00:19:49,700
providing config schema so that if you

00:19:46,549 --> 00:19:51,649
look at the core you have all the fields

00:19:49,700 --> 00:19:53,539
and everywhere like it's not it may not

00:19:51,649 --> 00:19:56,450
be a one single file we defined

00:19:53,539 --> 00:20:00,320
individual part of the configuration in

00:19:56,450 --> 00:20:03,139
different structure so it may not look

00:20:00,320 --> 00:20:05,119
like this easy but the bottom line it

00:20:03,139 --> 00:20:08,629
just same it just get composed together

00:20:05,119 --> 00:20:11,059
and then it used for you know your

00:20:08,629 --> 00:20:15,739
translation and various other use cases

00:20:11,059 --> 00:20:19,519
we saw before right so benefits again

00:20:15,739 --> 00:20:21,470
this this is very kind of not a solid

00:20:19,519 --> 00:20:24,830
list of items that we are talking about

00:20:21,470 --> 00:20:28,849
here the benefit is more we are saying

00:20:24,830 --> 00:20:31,849
in a way what we know right now that is

00:20:28,849 --> 00:20:34,940
the benefit of conflict schema and type

00:20:31,849 --> 00:20:37,609
data it's a it gives a lot of visibility

00:20:34,940 --> 00:20:39,379
of what you're you know like what you're

00:20:37,609 --> 00:20:41,690
dealing with and also it provides

00:20:39,379 --> 00:20:44,229
behaviors in terms of translation and

00:20:41,690 --> 00:20:46,820
the developer experience is basically

00:20:44,229 --> 00:20:49,419
giving a chain commands where you call

00:20:46,820 --> 00:20:52,629
multiple elements and you provide

00:20:49,419 --> 00:20:55,519
different methods when you talk about

00:20:52,629 --> 00:20:57,769
chain of entity get type and then get

00:20:55,519 --> 00:21:00,080
value and then get element you know

00:20:57,769 --> 00:21:02,539
stuff like that so that developer

00:21:00,080 --> 00:21:06,729
experience is purely depending on the

00:21:02,539 --> 00:21:09,919
type data and then the the validation is

00:21:06,729 --> 00:21:12,559
another pure thing which is code doesn't

00:21:09,919 --> 00:21:15,499
have a lot of it so we have only for

00:21:12,559 --> 00:21:17,299
very few basic ones but you can add the

00:21:15,499 --> 00:21:19,340
symphony constraint confidence like

00:21:17,299 --> 00:21:21,859
extend the component to individual use

00:21:19,340 --> 00:21:24,169
cases and validations and you would be

00:21:21,859 --> 00:21:26,629
able to provide your own type with the

00:21:24,169 --> 00:21:28,940
constraints so you won't you don't

00:21:26,629 --> 00:21:32,320
really need to add a separate validation

00:21:28,940 --> 00:21:35,269
for your data once you define it in your

00:21:32,320 --> 00:21:37,789
type itself it automatically does the

00:21:35,269 --> 00:21:39,590
validation as part of saving the data so

00:21:37,789 --> 00:21:41,570
that's something we can look for and

00:21:39,590 --> 00:21:43,220
then the type as in config one which is

00:21:41,570 --> 00:21:45,619
something I mentioned like every time

00:21:43,220 --> 00:21:47,570
you can't save a config form which could

00:21:45,619 --> 00:21:49,299
be any January config or creating a

00:21:47,570 --> 00:21:51,340
field or you know

00:21:49,299 --> 00:21:53,529
like that so it automatically typecast

00:21:51,340 --> 00:21:55,179
the value evaluating the convict schema

00:21:53,529 --> 00:21:57,850
and then it just saves the data which

00:21:55,179 --> 00:22:00,489
provides a lot of consistency and also I

00:21:57,850 --> 00:22:03,639
think we do ordering as well like if you

00:22:00,489 --> 00:22:06,789
look at that Yama file the order also

00:22:03,639 --> 00:22:09,549
maintained using the you know the config

00:22:06,789 --> 00:22:11,769
schemas order so that when you change

00:22:09,549 --> 00:22:15,220
many many when you make changes it

00:22:11,769 --> 00:22:17,169
doesn't you know change the order and

00:22:15,220 --> 00:22:18,220
then when you try to move the conflict

00:22:17,169 --> 00:22:20,049
from one Eleonora room to another

00:22:18,220 --> 00:22:22,840
environment you see a lot of things are

00:22:20,049 --> 00:22:24,970
changing but ideally just move places

00:22:22,840 --> 00:22:27,070
right so the config schema is kind of

00:22:24,970 --> 00:22:30,249
used for ordering the individual

00:22:27,070 --> 00:22:31,690
elements as well and then yeah like I

00:22:30,249 --> 00:22:33,220
said that translate the default

00:22:31,690 --> 00:22:34,659
configurations which is you know

00:22:33,220 --> 00:22:40,570
conflict translation module which is

00:22:34,659 --> 00:22:42,999
outer box and I put all the references

00:22:40,570 --> 00:22:45,960
in especially the code references where

00:22:42,999 --> 00:22:49,299
you can see exactly what config schema

00:22:45,960 --> 00:22:53,590
you know used archetype data is used on

00:22:49,299 --> 00:22:57,429
different projects I I didn't okay I

00:22:53,590 --> 00:22:57,759
have the rule about article is amazing

00:22:57,429 --> 00:23:00,129
one

00:22:57,759 --> 00:23:02,769
if you want to and then the Drupal are a

00:23:00,129 --> 00:23:05,350
Drupal Arad argh documentation is also

00:23:02,769 --> 00:23:07,330
very good for you know having a go

00:23:05,350 --> 00:23:09,340
through like like I said config

00:23:07,330 --> 00:23:12,970
Ricciardo both type data and config

00:23:09,340 --> 00:23:15,850
schema are kind of a massive powerful

00:23:12,970 --> 00:23:18,159
system that we have in core but I

00:23:15,850 --> 00:23:20,649
believe it's not explored that much but

00:23:18,159 --> 00:23:22,749
I might be wrong here but if you explore

00:23:20,649 --> 00:23:26,559
it you would able to do lot of amazing

00:23:22,749 --> 00:23:29,019
things and like today's discussion like

00:23:26,559 --> 00:23:32,139
a keynote briefs mentioned about you

00:23:29,019 --> 00:23:34,749
know that creating a decoupled admin UI

00:23:32,139 --> 00:23:36,759
can't fix schema or type data would be

00:23:34,749 --> 00:23:40,090
playing a big role on that so you can

00:23:36,759 --> 00:23:42,789
expose your configuration as an API and

00:23:40,090 --> 00:23:45,039
then that can be you know like that's

00:23:42,789 --> 00:23:47,379
all possible only you know by using the

00:23:45,039 --> 00:23:49,359
type data to provide the do meta details

00:23:47,379 --> 00:23:51,940
about your API what you need to provide

00:23:49,359 --> 00:23:55,600
to save certain configuration as of now

00:23:51,940 --> 00:23:57,309
most of the decoupled or headless

00:23:55,600 --> 00:23:59,710
Drupal's are like just exposing the

00:23:57,309 --> 00:24:01,700
content mostly read-only some of them

00:23:59,710 --> 00:24:04,970
right as well but it's just a content

00:24:01,700 --> 00:24:08,720
entity level but type that I can kill

00:24:04,970 --> 00:24:10,940
help to extend that API to more you know

00:24:08,720 --> 00:24:12,620
like I'm making more Drupal fully

00:24:10,940 --> 00:24:15,769
headless and then you can have even

00:24:12,620 --> 00:24:18,970
whole admin UI as I separate you you

00:24:15,769 --> 00:24:23,240
know like separate JavaScript framework

00:24:18,970 --> 00:24:26,419
and I believe that's pretty much it and

00:24:23,240 --> 00:24:31,850
this is about generic code sprint stuff

00:24:26,419 --> 00:24:33,679
and yeah take a survey and if you if you

00:24:31,850 --> 00:24:35,520
think it's good we will do it again

00:24:33,679 --> 00:24:38,260
thank you

00:24:35,520 --> 00:24:41,500
[Applause]

00:24:38,260 --> 00:24:41,500
[Music]

00:24:43,880 --> 00:24:47,659
in eco she seems like I would be the

00:24:45,830 --> 00:24:50,620
first one having 30-minute session and

00:24:47,659 --> 00:24:50,620
ten minutes for questions

00:24:56,770 --> 00:25:05,510
hi this one it looks to me like this

00:25:02,510 --> 00:25:07,640
would be a great solution for our what

00:25:05,510 --> 00:25:09,350
used to be in Drupal 7 your config form

00:25:07,640 --> 00:25:12,140
where you just say here's my config

00:25:09,350 --> 00:25:14,510
please expose them would I build a form

00:25:12,140 --> 00:25:17,890
the form API and save them because you

00:25:14,510 --> 00:25:21,649
know how to save them I failed to find

00:25:17,890 --> 00:25:23,929
the API or the hooks that say given a

00:25:21,649 --> 00:25:25,580
schema build me a form it looks like

00:25:23,929 --> 00:25:29,419
that's available can you tell me where

00:25:25,580 --> 00:25:32,120
to find it so this is a kind of a future

00:25:29,419 --> 00:25:34,399
project like no one had tried I was

00:25:32,120 --> 00:25:37,309
talking to Tim Plunkett this morning

00:25:34,399 --> 00:25:39,110
asking him if he can do and I don't know

00:25:37,309 --> 00:25:41,960
probably in this week you can try so

00:25:39,110 --> 00:25:43,850
ideally you should be with the config

00:25:41,960 --> 00:25:48,110
schema and country you should be able to

00:25:43,850 --> 00:25:50,779
build the form without creating a custom

00:25:48,110 --> 00:25:53,870
conflict bump by yourself and especially

00:25:50,779 --> 00:25:57,440
the saving part that you said so that we

00:25:53,870 --> 00:25:59,659
could try having a say path in your

00:25:57,440 --> 00:26:01,970
settings itself saying this is the part

00:25:59,659 --> 00:26:04,429
I want to have a configuration and then

00:26:01,970 --> 00:26:06,289
use the config schema and configuration

00:26:04,429 --> 00:26:08,720
just to generate the form like if I say

00:26:06,289 --> 00:26:11,750
the type is label give a text field if I

00:26:08,720 --> 00:26:14,809
say type is text give a text box but I

00:26:11,750 --> 00:26:17,360
stuff now we don't have it so but yeah

00:26:14,809 --> 00:26:20,179
but definitely it is something that we

00:26:17,360 --> 00:26:22,059
can try like it's something we thought

00:26:20,179 --> 00:26:24,559
about it but I don't think anyone tried

00:26:22,059 --> 00:26:26,000
okay thank you just looked so obvious

00:26:24,559 --> 00:26:27,799
like and so I can see the pieces fitting

00:26:26,000 --> 00:26:31,760
together yeah it doesn't exist you yeah

00:26:27,799 --> 00:26:33,799
it can go more than b7 right d7 you

00:26:31,760 --> 00:26:35,659
don't have only the submit handler right

00:26:33,799 --> 00:26:37,700
so submit handle are automatically taken

00:26:35,659 --> 00:26:39,890
care by saving to variable stable

00:26:37,700 --> 00:26:42,649
whereas in d8 you don't even need to

00:26:39,890 --> 00:26:44,270
write form I mean unless you need a type

00:26:42,649 --> 00:26:46,370
type you know like a field set or

00:26:44,270 --> 00:26:49,010
something to group them together then

00:26:46,370 --> 00:26:50,539
maybe but all these things we kind of

00:26:49,010 --> 00:26:53,380
need to figure out but definitely we can

00:26:50,539 --> 00:26:53,380
do a basic one

00:26:58,030 --> 00:27:01,870
all right

00:26:59,390 --> 00:27:08,650
thanks everyone

00:27:01,870 --> 00:27:08,650

YouTube URL: https://www.youtube.com/watch?v=vM_HB6p4z24


