Title: DrupalCon Vienna 2017: Advanced Configuration Management with Config Split et al.
Publication date: 2017-09-26
Playlist: DrupalCon Vienna - Sept 2017
Description: 
	Configuration Management was one of the most anticipated features of Drupal 8.
We will see the use case Drupal core covers perfectly and we will see its limitations when building a real life Drupal site with more complex requirements.
This session will present you the module eco system around Config Split and Config Filter as well as best practices around configuration management that alleviate all the sorrows you might encounter while building Drupal 8 sites in a team and/or in different environments:

Environment specific configuration or modules
Environment specific permissions
Configuration changes on production
Installing a new instance from existing configuration
Configuration management for multisite.
This is an advanced session, attendees should be familiar with the basic site building process and concepts of a site being in different environments. Attendees will walk away with concrete examples on how to solve more complex site building problems and workflows easily adapted to their own projects.
Captions: 
	00:00:00,030 --> 00:00:05,580
all right thank you all for coming this

00:00:04,230 --> 00:00:06,930
is the session about advanced

00:00:05,580 --> 00:00:10,250
configuration management with

00:00:06,930 --> 00:00:14,099
configuration split and similar modules

00:00:10,250 --> 00:00:14,910
I'm Fabien Baron or Bircher on

00:00:14,099 --> 00:00:20,160
drupal.org

00:00:14,910 --> 00:00:23,550
I work for nuvola a hundred percent

00:00:20,160 --> 00:00:26,160
Drupal company well we also do other

00:00:23,550 --> 00:00:29,779
things with Silex and simply since

00:00:26,160 --> 00:00:32,790
Drupal 8 adopted these kind of things

00:00:29,779 --> 00:00:38,070
we're a distributed team in Belgium

00:00:32,790 --> 00:00:40,559
Italy and the Czech Republic our clients

00:00:38,070 --> 00:00:43,860
are mostly international organizations

00:00:40,559 --> 00:00:46,320
and institutions and they have a need

00:00:43,860 --> 00:00:47,969
often for fast delivery so we have

00:00:46,320 --> 00:00:53,100
several developers working on the same

00:00:47,969 --> 00:00:56,449
project and we need to frequently update

00:00:53,100 --> 00:01:02,460
sites and I'm pretty sure this matches

00:00:56,449 --> 00:01:04,769
almost all of your experience as well so

00:01:02,460 --> 00:01:06,630
we need a safe way to manage the

00:01:04,769 --> 00:01:08,790
configuration between different

00:01:06,630 --> 00:01:17,100
instances of the same site of the

00:01:08,790 --> 00:01:21,720
project ok so the first chapter is about

00:01:17,100 --> 00:01:25,490
ok wait a minute these Twitter

00:01:21,720 --> 00:01:25,490
notifications they're not gonna have

00:01:36,040 --> 00:01:41,320
yeah sorry about that so the first

00:01:40,060 --> 00:01:43,690
chapter is about the configuration

00:01:41,320 --> 00:01:45,850
management in Drupal core as you might

00:01:43,690 --> 00:01:48,180
know Drupal 8 has this amazing new

00:01:45,850 --> 00:01:51,490
feature of configuration management and

00:01:48,180 --> 00:01:54,910
it is really great and we love it

00:01:51,490 --> 00:01:58,660
but the use case Drupal core covers is

00:01:54,910 --> 00:02:03,580
kind of limited and so often we we have

00:01:58,660 --> 00:02:06,700
more needs but nevertheless the the core

00:02:03,580 --> 00:02:09,250
scenario is answers to questions of how

00:02:06,700 --> 00:02:12,220
I can develop and test configuration on

00:02:09,250 --> 00:02:15,520
a development copy and keep this site

00:02:12,220 --> 00:02:17,650
running at the same time and then export

00:02:15,520 --> 00:02:20,350
the configuration changes and import

00:02:17,650 --> 00:02:26,560
them on the live site in production and

00:02:20,350 --> 00:02:28,650
that's it so I will this is not exactly

00:02:26,560 --> 00:02:34,209
the same presentation as I gave before I

00:02:28,650 --> 00:02:37,240
will try to explain the concepts so that

00:02:34,209 --> 00:02:39,340
then you can adapt them to your own

00:02:37,240 --> 00:02:41,530
needs and so the configuration

00:02:39,340 --> 00:02:44,500
management in core works essentially

00:02:41,530 --> 00:02:49,480
around a configuration storage I will

00:02:44,500 --> 00:02:52,209
use the same kind of pictures for for

00:02:49,480 --> 00:02:54,850
all the things so this square with the

00:02:52,209 --> 00:02:58,510
slightly rounded corners represents a

00:02:54,850 --> 00:03:00,580
configuration storage the blue here the

00:02:58,510 --> 00:03:03,700
Drupal blue is the active storage that's

00:03:00,580 --> 00:03:05,709
the one when your Drupal site is

00:03:03,700 --> 00:03:11,830
functioning reads the configuration from

00:03:05,709 --> 00:03:13,540
by default it is in the database so that

00:03:11,830 --> 00:03:15,160
has a several reasons one of them is

00:03:13,540 --> 00:03:17,640
that you don't go in and just change

00:03:15,160 --> 00:03:21,040
stuff because when configuration changes

00:03:17,640 --> 00:03:24,580
other fields or other database tables

00:03:21,040 --> 00:03:28,000
also have to be updated and it's also

00:03:24,580 --> 00:03:33,550
faster to read from you can read the

00:03:28,000 --> 00:03:36,670
configuration from it and you can get

00:03:33,550 --> 00:03:40,780
configuration to read in a form and save

00:03:36,670 --> 00:03:43,690
it back to to this database there is

00:03:40,780 --> 00:03:46,959
also caching layer involved and and a

00:03:43,690 --> 00:03:49,580
lot more advanced things but this is the

00:03:46,959 --> 00:03:52,310
basic concern

00:03:49,580 --> 00:03:54,530
I put the little asterisks on the

00:03:52,310 --> 00:03:57,739
reading we will get to that later

00:03:54,530 --> 00:04:01,069
because there is a layer in between that

00:03:57,739 --> 00:04:03,590
allows for four overrides and that's

00:04:01,069 --> 00:04:08,480
also why the writing operation has a

00:04:03,590 --> 00:04:10,670
separate read arrow right so all good

00:04:08,480 --> 00:04:12,050
they're our next step is to synchronize

00:04:10,670 --> 00:04:15,440
the configuration so you have this

00:04:12,050 --> 00:04:17,720
active storage and you have another

00:04:15,440 --> 00:04:22,070
configuration storage which is backed by

00:04:17,720 --> 00:04:24,889
files the sink storage and you can

00:04:22,070 --> 00:04:26,930
export the configuration which you can

00:04:24,889 --> 00:04:29,960
do either by downloading that terrible

00:04:26,930 --> 00:04:32,630
or we thrush or two per console and

00:04:29,960 --> 00:04:34,340
basically what it does is it removes all

00:04:32,630 --> 00:04:36,530
the configuration from the files delete

00:04:34,340 --> 00:04:38,780
all the files read all the active

00:04:36,530 --> 00:04:43,280
configuration and writes all the

00:04:38,780 --> 00:04:46,220
configuration to the files again the

00:04:43,280 --> 00:04:48,740
import configuration is slightly more

00:04:46,220 --> 00:04:51,530
advanced because it doesn't just wipe

00:04:48,740 --> 00:04:54,169
the active configuration it makes a diff

00:04:51,530 --> 00:04:57,860
and sees what is new and what is old or

00:04:54,169 --> 00:05:00,740
what what should be deleted and adds the

00:04:57,860 --> 00:05:04,330
ones that are new and removes the ones

00:05:00,740 --> 00:05:07,910
that are not in the files anymore and

00:05:04,330 --> 00:05:11,389
then also updates all the other database

00:05:07,910 --> 00:05:18,139
tables like for the fields when you add

00:05:11,389 --> 00:05:19,639
new fields and so on so when you deploy

00:05:18,139 --> 00:05:21,229
configuration or you manage the

00:05:19,639 --> 00:05:24,820
configurations between different

00:05:21,229 --> 00:05:28,460
environments you have in one environment

00:05:24,820 --> 00:05:30,530
these two database these dual

00:05:28,460 --> 00:05:34,160
configuration storages the database and

00:05:30,530 --> 00:05:36,110
the files so you click around in the URL

00:05:34,160 --> 00:05:40,490
and you build your site this site

00:05:36,110 --> 00:05:42,919
builder track after all then you export

00:05:40,490 --> 00:05:46,340
the configuration to the files you add

00:05:42,919 --> 00:05:49,729
the files to get you on the other

00:05:46,340 --> 00:05:52,559
environment you pull the files and you

00:05:49,729 --> 00:05:55,049
imported configuration

00:05:52,559 --> 00:05:55,619
of course this also works the other way

00:05:55,049 --> 00:05:57,959
around

00:05:55,619 --> 00:06:00,899
so you can have several developers and

00:05:57,959 --> 00:06:03,539
you synchronize the configuration over

00:06:00,899 --> 00:06:11,519
get as as you do with the other code

00:06:03,539 --> 00:06:13,109
that you developed all great right the

00:06:11,519 --> 00:06:17,539
configuration management in Drupal 8

00:06:13,109 --> 00:06:17,539
core works perfectly for this use case

00:06:17,719 --> 00:06:25,249
but we need to cover a couple of more

00:06:20,729 --> 00:06:25,249
things when I when I showed you this

00:06:25,579 --> 00:06:30,359
actually the database has to be the same

00:06:28,889 --> 00:06:32,789
it has been copied from before you

00:06:30,359 --> 00:06:36,349
cannot just import into an empty

00:06:32,789 --> 00:06:39,029
database and this is what the next

00:06:36,349 --> 00:06:41,609
chapter is about this in installing from

00:06:39,029 --> 00:06:45,059
existing configuration it's a very

00:06:41,609 --> 00:06:48,179
important step and it's for

00:06:45,059 --> 00:06:52,729
bootstrapping another environment of the

00:06:48,179 --> 00:06:55,409
same site that you installed before

00:06:52,729 --> 00:06:57,029
there is a contra project it's an

00:06:55,409 --> 00:07:03,749
installation profile called config

00:06:57,029 --> 00:07:05,819
installer and it creates a site another

00:07:03,749 --> 00:07:08,399
instance of the same site usually when

00:07:05,819 --> 00:07:11,009
you go through the drupal installer and

00:07:08,399 --> 00:07:13,229
you install a profile like standard or

00:07:11,009 --> 00:07:17,239
minimal or your own it creates a new

00:07:13,229 --> 00:07:20,789
site with the configuration installer

00:07:17,239 --> 00:07:26,009
it's just used to install the existing

00:07:20,789 --> 00:07:27,569
site and not and then after the site is

00:07:26,009 --> 00:07:30,559
installed that configuration is Solaris

00:07:27,569 --> 00:07:30,559
is not used anymore

00:07:30,739 --> 00:07:38,519
we use it in all our projects and so it

00:07:34,589 --> 00:07:41,429
should you or actually Corum it even has

00:07:38,519 --> 00:07:44,789
a nice UI so you can upload the tarball

00:07:41,429 --> 00:07:47,459
that you downloaded from the other side

00:07:44,789 --> 00:07:49,709
so it you don't need the command line

00:07:47,459 --> 00:07:52,600
for that but of course it also works

00:07:49,709 --> 00:07:55,480
with the command line

00:07:52,600 --> 00:07:59,410
there's two issues to add this

00:07:55,480 --> 00:08:03,190
functionality to call profiles at the

00:07:59,410 --> 00:08:06,940
moment that the API of a profile was

00:08:03,190 --> 00:08:08,230
never meant to be reinstalled so for

00:08:06,940 --> 00:08:10,120
example profiles they can have

00:08:08,230 --> 00:08:12,910
dependencies but you can uninstall the

00:08:10,120 --> 00:08:14,530
dependencies and that really makes no

00:08:12,910 --> 00:08:16,690
sense I mean you you have a dependency

00:08:14,530 --> 00:08:18,490
but then it's not a dependency and so

00:08:16,690 --> 00:08:22,900
this creates a lot of problems when you

00:08:18,490 --> 00:08:25,690
want to bootstrap aside from from with a

00:08:22,900 --> 00:08:28,420
profile that is like has a dependency

00:08:25,690 --> 00:08:32,349
but not and so there's two issues that

00:08:28,420 --> 00:08:37,560
try to solve this and I hope we can get

00:08:32,349 --> 00:08:37,560
them rolling during this week again more

00:08:38,130 --> 00:08:44,340
another thing that is already in Corbett

00:08:42,220 --> 00:08:46,890
it's kind of outside this use case and

00:08:44,340 --> 00:08:51,070
it's for example if you want to

00:08:46,890 --> 00:08:53,620
differentiate the environment and simple

00:08:51,070 --> 00:08:55,600
examples are error logging too verbose

00:08:53,620 --> 00:08:57,850
on on your development environment or

00:08:55,600 --> 00:09:03,720
API keys on production that you don't

00:08:57,850 --> 00:09:06,790
want to add to get and you can do that

00:09:03,720 --> 00:09:08,620
with core and there's different

00:09:06,790 --> 00:09:11,260
mechanisms for overriding configuration

00:09:08,620 --> 00:09:15,130
the easiest one is using the config

00:09:11,260 --> 00:09:18,330
variable in settings of PHP and so

00:09:15,130 --> 00:09:23,680
basically you just add this this

00:09:18,330 --> 00:09:25,570
override in settings of PHP the system

00:09:23,680 --> 00:09:29,040
logging and you set the error law a

00:09:25,570 --> 00:09:29,040
level to verbose and

00:09:29,190 --> 00:09:36,870
and that's it and you could also do that

00:09:32,430 --> 00:09:40,879
with API keys to come back to our our

00:09:36,870 --> 00:09:43,440
graphics this this is where this arrow

00:09:40,879 --> 00:09:45,089
comes in so basically you read from the

00:09:43,440 --> 00:09:48,089
configuration from the database but then

00:09:45,089 --> 00:09:52,139
you read overrides and you you use the

00:09:48,089 --> 00:09:54,509
overridden configuration in like this I

00:09:52,139 --> 00:10:00,720
tied the lower or whatever you use to

00:09:54,509 --> 00:10:03,660
configuration that's all great but it

00:10:00,720 --> 00:10:05,420
has a couple of shortcomings one of them

00:10:03,660 --> 00:10:08,339
is that you can only alter existing

00:10:05,420 --> 00:10:11,750
configuration using this method and you

00:10:08,339 --> 00:10:15,620
cannot add new configuration to it or

00:10:11,750 --> 00:10:19,110
unset completely other configuration and

00:10:15,620 --> 00:10:22,829
you cannot for example change which

00:10:19,110 --> 00:10:25,050
modules are enabled and and a couple of

00:10:22,829 --> 00:10:32,970
other things like you can't override the

00:10:25,050 --> 00:10:35,910
color of partic this way yeah so can we

00:10:32,970 --> 00:10:37,620
do better can we do more and this is

00:10:35,910 --> 00:10:44,819
where the configuration filter module

00:10:37,620 --> 00:10:51,089
comes in so this is the streamer of

00:10:44,819 --> 00:10:52,759
configuration management and magic this

00:10:51,089 --> 00:10:55,949
is the configuration management with

00:10:52,759 --> 00:10:59,189
configuration filter you can see the

00:10:55,949 --> 00:11:01,980
only thing that changed is this sink

00:10:59,189 --> 00:11:04,050
storage so instead of writing directly

00:11:01,980 --> 00:11:08,149
to the file you write to this magic

00:11:04,050 --> 00:11:08,149
configuration filter storage

00:11:09,589 --> 00:11:14,130
configuration filters or config filter

00:11:12,569 --> 00:11:18,720
the module provides configuration

00:11:14,130 --> 00:11:22,709
filters and filters are like a glorified

00:11:18,720 --> 00:11:27,089
altar hook for the configuration storage

00:11:22,709 --> 00:11:30,120
so they can apply they can change the

00:11:27,089 --> 00:11:35,250
data for every operation that you can do

00:11:30,120 --> 00:11:38,970
on on a configuration storage filters

00:11:35,250 --> 00:11:41,579
are plugins or can be plugins

00:11:38,970 --> 00:11:43,889
and the plugins are sorted by weight and

00:11:41,579 --> 00:11:47,490
then applied after each other so they

00:11:43,889 --> 00:11:50,009
they're daisy chained and the data that

00:11:47,490 --> 00:11:52,019
goes into one filter and then comes out

00:11:50,009 --> 00:11:54,290
goes into the next filter in and so on

00:11:52,019 --> 00:11:57,509
and at the end gets written to the

00:11:54,290 --> 00:11:59,610
storage or and the other way around

00:11:57,509 --> 00:12:01,379
first gets written then pass through all

00:11:59,610 --> 00:12:05,579
the filters and then gets passed back to

00:12:01,379 --> 00:12:07,560
Drupal plugins can be active or inactive

00:12:05,579 --> 00:12:10,079
the inactive plug-in state they're just

00:12:07,560 --> 00:12:13,560
defined but they're not used so they're

00:12:10,079 --> 00:12:15,870
just skipped the modules right now has

00:12:13,560 --> 00:12:18,870
more than 6,000 sites using it

00:12:15,870 --> 00:12:21,720
reporting to use it and one of the top

00:12:18,870 --> 00:12:24,269
100 modules right now and has zero bugs

00:12:21,720 --> 00:12:26,490
well not exactly

00:12:24,269 --> 00:12:29,490
there was one bug that someone reported

00:12:26,490 --> 00:12:31,649
after I reflected the code but it turned

00:12:29,490 --> 00:12:37,019
out that the APC you cache was turned on

00:12:31,649 --> 00:12:38,670
and this is because the API of this

00:12:37,019 --> 00:12:40,350
module that the interface that it

00:12:38,670 --> 00:12:42,629
interacts with Drupal is really small

00:12:40,350 --> 00:12:44,360
like it doesn't do anything else it

00:12:42,629 --> 00:12:47,339
doesn't affect the running of the site

00:12:44,360 --> 00:12:49,439
except for the synchronization storage

00:12:47,339 --> 00:12:53,490
it that's the only thing it does it

00:12:49,439 --> 00:12:56,540
replaces the storage and other modules

00:12:53,490 --> 00:13:00,389
provide the filters for it

00:12:56,540 --> 00:13:03,839
so let's unveil the matching it look

00:13:00,389 --> 00:13:09,360
look behind this configuration filtered

00:13:03,839 --> 00:13:12,600
sort and as you can see there is the the

00:13:09,360 --> 00:13:16,459
green file storage again from before

00:13:12,600 --> 00:13:19,829
that the original sink storage and

00:13:16,459 --> 00:13:25,189
before and after the data goes in and

00:13:19,829 --> 00:13:27,209
out filters are applied high-level

00:13:25,189 --> 00:13:30,809
example of this is for example with

00:13:27,209 --> 00:13:35,059
configuration split where configuration

00:13:30,809 --> 00:13:37,589
split has a secondary file storage and

00:13:35,059 --> 00:13:39,750
splits this story splits the

00:13:37,589 --> 00:13:43,860
configuration between the main one and

00:13:39,750 --> 00:13:46,920
the secondary one another example is the

00:13:43,860 --> 00:13:49,400
config ignore which basically when you

00:13:46,920 --> 00:13:52,430
read the configuration

00:13:49,400 --> 00:13:57,200
you read it from the active storage and

00:13:52,430 --> 00:13:58,550
therefore it's the same as the one you

00:13:57,200 --> 00:14:00,860
already have and therefore there is no

00:13:58,550 --> 00:14:07,130
diff and therefore the configuration is

00:14:00,860 --> 00:14:09,890
ignored this presentation is also meant

00:14:07,130 --> 00:14:14,690
as documentation for configuration split

00:14:09,890 --> 00:14:16,490
a lot of people have said that it'll be

00:14:14,690 --> 00:14:19,820
complicated sometimes and there's a lot

00:14:16,490 --> 00:14:22,450
of options and it's not really clear

00:14:19,820 --> 00:14:24,770
what they do and how they work and you

00:14:22,450 --> 00:14:27,110
have to find out but then you don't know

00:14:24,770 --> 00:14:30,440
if you did it correctly or or what so

00:14:27,110 --> 00:14:34,150
let me go here now through the different

00:14:30,440 --> 00:14:37,310
options that you have to configure it so

00:14:34,150 --> 00:14:38,960
the first part there's three field sets

00:14:37,310 --> 00:14:41,840
the first part is the static settings

00:14:38,960 --> 00:14:45,200
and where you have the folder so you you

00:14:41,840 --> 00:14:48,200
specify the directory of the secondary

00:14:45,200 --> 00:14:50,390
configuration storage and the you can

00:14:48,200 --> 00:14:53,200
use an absolute path or a relative path

00:14:50,390 --> 00:14:57,230
to the Drupal root the the same way you

00:14:53,200 --> 00:15:00,890
configured sync storage in settings of

00:14:57,230 --> 00:15:03,610
PHP it's the same kind of way if you

00:15:00,890 --> 00:15:08,110
leave it empty it will use a separate

00:15:03,610 --> 00:15:10,850
specialized database storage for display

00:15:08,110 --> 00:15:15,020
you can have multiple splits of course

00:15:10,850 --> 00:15:19,040
and then they get used one after the

00:15:15,020 --> 00:15:22,880
other depending on on the weight and the

00:15:19,040 --> 00:15:25,280
split can be active or not and all of

00:15:22,880 --> 00:15:26,570
these you can override in settings of

00:15:25,280 --> 00:15:29,480
PHP with the normal configuration

00:15:26,570 --> 00:15:33,260
override mechanism that I showed you

00:15:29,480 --> 00:15:35,210
before so for example we will get to

00:15:33,260 --> 00:15:37,190
that in a second

00:15:35,210 --> 00:15:41,600
the next section is the complete split

00:15:37,190 --> 00:15:44,630
also known as the blacklist I still

00:15:41,600 --> 00:15:47,330
might refer to that when we talk because

00:15:44,630 --> 00:15:50,360
that's what it was named for a long time

00:15:47,330 --> 00:15:52,610
and yeah I'm still very used to

00:15:50,360 --> 00:15:55,070
blacklist and grey list but it's now

00:15:52,610 --> 00:15:58,100
named complete split

00:15:55,070 --> 00:16:01,220
and conditioner split so the complete

00:15:58,100 --> 00:16:05,240
split has an option to specify modules

00:16:01,220 --> 00:16:07,400
and what happens is when the

00:16:05,240 --> 00:16:10,640
configuration goes through it so there's

00:16:07,400 --> 00:16:14,180
the list of enabled modules is specified

00:16:10,640 --> 00:16:16,400
in quartered extensions and when you

00:16:14,180 --> 00:16:18,410
export the configuration what what the

00:16:16,400 --> 00:16:21,680
split does is it removes the module that

00:16:18,410 --> 00:16:24,230
you specify here and save them in the

00:16:21,680 --> 00:16:26,540
configuration of the split and so

00:16:24,230 --> 00:16:29,480
they're removed from from core data

00:16:26,540 --> 00:16:32,020
extension as it goes on and when when

00:16:29,480 --> 00:16:35,720
you read from it it it asked them again

00:16:32,020 --> 00:16:37,340
it also automatically detects all the

00:16:35,720 --> 00:16:39,080
configuration that depends on these

00:16:37,340 --> 00:16:41,270
modules because the configuration that

00:16:39,080 --> 00:16:43,490
depends on modules that are not enabled

00:16:41,270 --> 00:16:45,260
don't make sense so it also moves them

00:16:43,490 --> 00:16:49,970
away and puts them in the secondary

00:16:45,260 --> 00:16:54,290
storage and there's basically two ways

00:16:49,970 --> 00:16:56,810
one is a select where we chosen the UI

00:16:54,290 --> 00:17:01,190
is very nice and the other one is a text

00:16:56,810 --> 00:17:03,020
area that you can use to use wildcards

00:17:01,190 --> 00:17:07,850
for example so you can you can select a

00:17:03,020 --> 00:17:10,250
whole array of configuration in in the

00:17:07,850 --> 00:17:12,439
end both of them are the same if you

00:17:10,250 --> 00:17:17,079
write the configuration name in the text

00:17:12,439 --> 00:17:17,079
area it's the same as the the drop-down

00:17:17,790 --> 00:17:26,030
the conditional split or formerly known

00:17:20,790 --> 00:17:30,299
as grey list has the same kind of way to

00:17:26,030 --> 00:17:31,559
select the configuration and important

00:17:30,299 --> 00:17:34,650
to know here is that this configuration

00:17:31,559 --> 00:17:36,720
will not be deleted when you export it I

00:17:34,650 --> 00:17:39,150
mentioned in the very beginning the way

00:17:36,720 --> 00:17:41,850
the export works is you delete all the

00:17:39,150 --> 00:17:45,920
configuration and then you read it and

00:17:41,850 --> 00:17:48,990
write it again but the conditional split

00:17:45,920 --> 00:17:51,030
does what it what it does is it checks

00:17:48,990 --> 00:17:53,700
if it's different than the one you

00:17:51,030 --> 00:17:55,260
already have exported but to check

00:17:53,700 --> 00:17:58,290
whether it's different the thing that

00:17:55,260 --> 00:18:02,160
still needs to exist so it doesn't get

00:17:58,290 --> 00:18:07,559
deleted and this has an important

00:18:02,160 --> 00:18:10,890
application we will see in a second then

00:18:07,559 --> 00:18:14,419
there's a checkbox for the dependent

00:18:10,890 --> 00:18:17,490
configuration you can select to also

00:18:14,419 --> 00:18:20,600
find all the configuration that depends

00:18:17,490 --> 00:18:22,350
on the configuration that you listed and

00:18:20,600 --> 00:18:25,200
condition is beta-2

00:18:22,350 --> 00:18:29,690
and there's a checkbox for split only

00:18:25,200 --> 00:18:33,419
when different so any checks and it

00:18:29,690 --> 00:18:36,720
splits only when the things are actually

00:18:33,419 --> 00:18:38,580
different and this is useful when when

00:18:36,720 --> 00:18:40,890
using wildcards so you have like block

00:18:38,580 --> 00:18:42,960
placement and then one of the block

00:18:40,890 --> 00:18:44,520
placements changed but you don't want to

00:18:42,960 --> 00:18:46,440
split off all the block placements but

00:18:44,520 --> 00:18:49,610
only the ones that are not the same as

00:18:46,440 --> 00:18:54,360
you you want to deploy from there

00:18:49,610 --> 00:18:59,429
there's a CLI commands the config split

00:18:54,360 --> 00:19:01,679
import and the config split export if

00:18:59,429 --> 00:19:04,140
you use them without an argument they're

00:19:01,679 --> 00:19:07,770
the replacement for the Josh commands

00:19:04,140 --> 00:19:11,700
prior to 8.1 point 10 and for Drupal

00:19:07,770 --> 00:19:13,559
console and if you use them with an

00:19:11,700 --> 00:19:15,600
argument using with an argument of the

00:19:13,559 --> 00:19:18,000
the machine name of the split and then

00:19:15,600 --> 00:19:20,130
it will import or export only that

00:19:18,000 --> 00:19:23,840
specific split and we'll leave the rest

00:19:20,130 --> 00:19:23,840
of the configuration alone

00:19:25,200 --> 00:19:32,850
so that was all theoretical let's look

00:19:29,230 --> 00:19:36,340
at an example so we have three

00:19:32,850 --> 00:19:39,910
configuration names let's call them a B

00:19:36,340 --> 00:19:42,580
and C a for not being listed in in the

00:19:39,910 --> 00:19:45,340
configuration at all B for the

00:19:42,580 --> 00:19:48,460
configuration listed as a complete bit

00:19:45,340 --> 00:19:49,660
so the first part that might be module

00:19:48,460 --> 00:19:55,929
or something like that

00:19:49,660 --> 00:19:59,230
and see the conditional split obviously

00:19:55,929 --> 00:20:00,040
it's very simplified but you I think you

00:19:59,230 --> 00:20:05,280
don't understand

00:20:00,040 --> 00:20:09,640
so let's write when let let's export a

00:20:05,280 --> 00:20:13,960
what happens it goes through the filter

00:20:09,640 --> 00:20:17,440
it it gets passed along as it is let's

00:20:13,960 --> 00:20:19,300
try to write B it will go in the

00:20:17,440 --> 00:20:23,140
secondary storage and we will not get

00:20:19,300 --> 00:20:24,640
passed on to do the next filter or the

00:20:23,140 --> 00:20:31,090
other storage because it gets split

00:20:24,640 --> 00:20:34,630
apart see here we assume it already

00:20:31,090 --> 00:20:37,600
existed in the exported configuration if

00:20:34,630 --> 00:20:40,600
it doesn't it's the same as if it would

00:20:37,600 --> 00:20:43,179
be different so if it already exists

00:20:40,600 --> 00:20:49,030
it didn't get removed so when you when

00:20:43,179 --> 00:20:51,760
we export it it just passes it on if you

00:20:49,030 --> 00:20:56,260
look at the reading it's same it reads

00:20:51,760 --> 00:21:00,580
the a nothing to it continued right

00:20:56,260 --> 00:21:04,960
and the B comes from the secondary

00:21:00,580 --> 00:21:10,480
config storage and the see you read the

00:21:04,960 --> 00:21:14,740
C and you return to C so now let's look

00:21:10,480 --> 00:21:19,779
at if we have a change to see a C Prime

00:21:14,740 --> 00:21:22,149
so we see the C was the conditional

00:21:19,779 --> 00:21:24,700
split and now this will hopefully make

00:21:22,149 --> 00:21:26,769
sense to you the conditional split gets

00:21:24,700 --> 00:21:31,149
split off now because it's different

00:21:26,769 --> 00:21:36,309
than the seat has already exported and

00:21:31,149 --> 00:21:40,350
so when we read the C we read it from

00:21:36,309 --> 00:21:44,919
the secondary storage so it will be the

00:21:40,350 --> 00:21:51,510
C Prime and and you see the config

00:21:44,919 --> 00:21:53,789
filter behaves the same way so if you

00:21:51,510 --> 00:21:56,320
give it a certain amount of

00:21:53,789 --> 00:21:58,899
configuration you will get the same back

00:21:56,320 --> 00:22:03,100
when you read it but what happens on the

00:21:58,899 --> 00:22:08,500
other side is also consistent so you see

00:22:03,100 --> 00:22:13,289
like ABC Prime and goes in and AC comes

00:22:08,500 --> 00:22:13,289
out for right and the other way for read

00:22:13,960 --> 00:22:17,340
so far so good right

00:22:18,690 --> 00:22:23,470
so how do we use this for making

00:22:21,400 --> 00:22:26,590
environment specific modules or

00:22:23,470 --> 00:22:28,660
configuration so for example you have

00:22:26,590 --> 00:22:32,130
the devel module and you don't want to

00:22:28,660 --> 00:22:34,900
develop module on your production site

00:22:32,130 --> 00:22:38,049
but the configuration management is all

00:22:34,900 --> 00:22:40,630
or nothing so you would have to disable

00:22:38,049 --> 00:22:42,460
the develop module then export and you

00:22:40,630 --> 00:22:48,130
know what that it's a hassle and this

00:22:42,460 --> 00:22:51,010
error-prone you do it manually so you

00:22:48,130 --> 00:22:53,799
can guess he'll do it with configuration

00:22:51,010 --> 00:22:57,669
split you list the module that you want

00:22:53,799 --> 00:23:00,190
to split off and you add the environment

00:22:57,669 --> 00:23:02,830
specific configuration and then you

00:23:00,190 --> 00:23:06,750
overwrite which split is active per

00:23:02,830 --> 00:23:09,429
environment and if the split is active

00:23:06,750 --> 00:23:11,890
the module will be active if the split

00:23:09,429 --> 00:23:13,330
is not active when you import it it's as

00:23:11,890 --> 00:23:16,299
if the module was not there and

00:23:13,330 --> 00:23:23,200
therefore they get disabled or will not

00:23:16,299 --> 00:23:24,730
be enabled another small thing is if you

00:23:23,200 --> 00:23:27,250
want to have environment specific

00:23:24,730 --> 00:23:31,450
permissions as you know permissions are

00:23:27,250 --> 00:23:33,820
part of roles and so the easy solution

00:23:31,450 --> 00:23:37,710
is you you have like a developer role

00:23:33,820 --> 00:23:37,710
that you have on your mana environment

00:23:38,010 --> 00:23:44,650
but then you you can't just use the same

00:23:42,910 --> 00:23:46,480
users and you have to give them an

00:23:44,650 --> 00:23:50,679
additional role so there's another

00:23:46,480 --> 00:23:54,220
module called config role split the UI

00:23:50,679 --> 00:23:58,299
for the moment is not great because they

00:23:54,220 --> 00:24:00,250
to make the proper you guys like how you

00:23:58,299 --> 00:24:02,350
should be configuring this is not so

00:24:00,250 --> 00:24:05,440
easy so right now it's just a text area

00:24:02,350 --> 00:24:09,330
where you essentially post Yammer it's

00:24:05,440 --> 00:24:12,540
described on the product project page

00:24:09,330 --> 00:24:15,940
it's also a config filter plugin so it

00:24:12,540 --> 00:24:18,850
operates in the same way as the config

00:24:15,940 --> 00:24:21,340
split and what it does it's exactly the

00:24:18,850 --> 00:24:23,410
same as the core extensions and you

00:24:21,340 --> 00:24:26,010
added or remove modules so basically you

00:24:23,410 --> 00:24:28,530
just add or remove permissions to

00:24:26,010 --> 00:24:30,540
and this is useful if you want to have

00:24:28,530 --> 00:24:36,830
in some environments additional

00:24:30,540 --> 00:24:36,830
permissions for authenticated users or

00:24:37,160 --> 00:24:43,080
anonymous users of course this split can

00:24:41,700 --> 00:24:46,560
then also be active or inactive

00:24:43,080 --> 00:24:53,220
depending on settings of PHP or you can

00:24:46,560 --> 00:24:56,670
even split off the role split so you you

00:24:53,220 --> 00:24:57,990
can make this as crazy as you want one

00:24:56,670 --> 00:24:59,190
of the things that you should keep in

00:24:57,990 --> 00:25:02,100
mind is when you import the

00:24:59,190 --> 00:25:05,760
configuration it will take into account

00:25:02,100 --> 00:25:11,340
the active plugins the Drupal already

00:25:05,760 --> 00:25:13,860
knows about so when you import a split

00:25:11,340 --> 00:25:15,540
like when I split becomes active but

00:25:13,860 --> 00:25:17,370
while you import the configuration this

00:25:15,540 --> 00:25:20,160
split will not be taken in account

00:25:17,370 --> 00:25:21,930
already or this role split but when you

00:25:20,160 --> 00:25:24,300
import the configuration again like a

00:25:21,930 --> 00:25:27,420
second time then the split might be

00:25:24,300 --> 00:25:30,780
active and so basically for for every

00:25:27,420 --> 00:25:32,040
new plug-in you you import the

00:25:30,780 --> 00:25:35,610
configuration again so what we usually

00:25:32,040 --> 00:25:37,350
do is just config import and then review

00:25:35,610 --> 00:25:40,470
and then everything again and then just

00:25:37,350 --> 00:25:45,140
run it again and to see the message says

00:25:40,470 --> 00:25:45,140
nothing has changed and all is good

00:25:47,350 --> 00:25:54,499
so before we go to the next chapter

00:25:51,279 --> 00:25:56,119
we're config split is used I also want

00:25:54,499 --> 00:25:57,740
to say a little bit more about

00:25:56,119 --> 00:26:01,690
configuration management in general

00:25:57,740 --> 00:26:04,940
because as talking with some of you

00:26:01,690 --> 00:26:09,409
during the event and a couple of things

00:26:04,940 --> 00:26:11,809
happen or come up again and so we use

00:26:09,409 --> 00:26:15,139
git for configuration management you

00:26:11,809 --> 00:26:19,999
don't have to but it's the easiest in my

00:26:15,139 --> 00:26:21,919
opinion and it's great because the

00:26:19,999 --> 00:26:24,110
configuration files or the configuration

00:26:21,919 --> 00:26:27,190
they are exported to files which are

00:26:24,110 --> 00:26:31,759
text files and get can handle text files

00:26:27,190 --> 00:26:34,779
um but they easily put more to it and

00:26:31,759 --> 00:26:37,990
you have to be a bit careful sometimes

00:26:34,779 --> 00:26:40,940
with configuration management and gift

00:26:37,990 --> 00:26:44,470
so this is important for the team of

00:26:40,940 --> 00:26:46,850
developers when you you share that

00:26:44,470 --> 00:26:51,710
repository for both the code and the

00:26:46,850 --> 00:26:52,970
configuration and so how you do it when

00:26:51,710 --> 00:26:56,090
you bootstrap the configuration the

00:26:52,970 --> 00:26:58,249
first developer initializes the

00:26:56,090 --> 00:27:00,590
repository and installs the site and

00:26:58,249 --> 00:27:03,080
exports the configuration and adds

00:27:00,590 --> 00:27:04,970
everything to get all the other

00:27:03,080 --> 00:27:07,549
developers or all the other environments

00:27:04,970 --> 00:27:10,070
I should say they clone the code and

00:27:07,549 --> 00:27:12,019
they install from existing configuration

00:27:10,070 --> 00:27:13,759
now that may be other developers that

00:27:12,019 --> 00:27:16,690
may be production and that may be

00:27:13,759 --> 00:27:16,690
continuous integration

00:27:17,200 --> 00:27:24,490
so like you you install the site

00:27:20,770 --> 00:27:26,470
instance only once and the first person

00:27:24,490 --> 00:27:28,500
that makes the first commit is the

00:27:26,470 --> 00:27:33,040
person that does that and everybody else

00:27:28,500 --> 00:27:38,350
will just restart from from the existing

00:27:33,040 --> 00:27:41,590
configuration the existing site so you

00:27:38,350 --> 00:27:44,200
can have parallel development you work

00:27:41,590 --> 00:27:48,910
on your branch and you commit stuff and

00:27:44,200 --> 00:27:52,750
you you code you do site building your

00:27:48,910 --> 00:27:56,350
export configuration and so on and it's

00:27:52,750 --> 00:28:00,070
all file it's all get and it all works

00:27:56,350 --> 00:28:02,890
right but you have to be a bit careful

00:28:00,070 --> 00:28:05,830
with that because it is just the files

00:28:02,890 --> 00:28:08,080
but Drupal needs to import an expert so

00:28:05,830 --> 00:28:14,050
there's this extra step and you you need

00:28:08,080 --> 00:28:15,430
to follow a couple of rules and if

00:28:14,050 --> 00:28:18,340
you're not careful what can happen is

00:28:15,430 --> 00:28:21,430
that you lose the uncommitted work you

00:28:18,340 --> 00:28:24,970
accidentally overwrite work done by

00:28:21,430 --> 00:28:30,310
others or that it looks fine at first

00:28:24,970 --> 00:28:33,640
but it's actually not so here's the save

00:28:30,310 --> 00:28:36,640
sequence that the holy grail the the

00:28:33,640 --> 00:28:41,140
rules do you have to follow sometimes

00:28:36,640 --> 00:28:43,960
you get away with not following them but

00:28:41,140 --> 00:28:48,100
then you're in danger and so this is

00:28:43,960 --> 00:28:52,600
always safe this this works so just to

00:28:48,100 --> 00:28:55,270
say it you do your site peddling then

00:28:52,600 --> 00:28:57,850
you export the configuration you add it

00:28:55,270 --> 00:29:01,540
to get when you commit it at this point

00:28:57,850 --> 00:29:03,070
you have a safe reference you know this

00:29:01,540 --> 00:29:05,140
was your site that you just worked on

00:29:03,070 --> 00:29:09,010
you have it in get you can always go

00:29:05,140 --> 00:29:12,340
back to it then you get the code from

00:29:09,010 --> 00:29:19,780
your colleagues with git pull nor fetch

00:29:12,340 --> 00:29:22,510
in March then you update the modules as

00:29:19,780 --> 00:29:25,990
it is specified so whether you install

00:29:22,510 --> 00:29:29,429
modules as tarballs or whatever version

00:29:25,990 --> 00:29:33,429
you run composer install for example

00:29:29,429 --> 00:29:36,460
then you run the update hooks so brush

00:29:33,429 --> 00:29:41,159
up DB or you go to the UI updated which

00:29:36,460 --> 00:29:44,559
we then you import the configuration and

00:29:41,159 --> 00:29:47,200
once that all worked you push your

00:29:44,559 --> 00:29:51,820
commit and which which has the the merge

00:29:47,200 --> 00:29:54,789
commit in it of course so if you don't

00:29:51,820 --> 00:29:57,820
follow these rules what can happen if

00:29:54,789 --> 00:30:00,960
you import the configuration before you

00:29:57,820 --> 00:30:04,929
export it all your work is gone like

00:30:00,960 --> 00:30:07,149
it's it's gone I mean no no backups it's

00:30:04,929 --> 00:30:09,990
it sucks for you but you're the one that

00:30:07,149 --> 00:30:09,990
didn't follow the rules right

00:30:10,500 --> 00:30:19,539
yeah and there's no help there if you

00:30:15,399 --> 00:30:22,600
merge before export that means you you

00:30:19,539 --> 00:30:24,610
you have the the exported code from your

00:30:22,600 --> 00:30:26,200
colleague but it's only in the files not

00:30:24,610 --> 00:30:29,140
in your database when so when you export

00:30:26,200 --> 00:30:32,830
it it all goes away from your colleague

00:30:29,140 --> 00:30:34,740
and the files will will reflect what you

00:30:32,830 --> 00:30:37,570
had on your development

00:30:34,740 --> 00:30:39,549
everything works for you yeah right but

00:30:37,570 --> 00:30:44,649
you actually removed all of your

00:30:39,549 --> 00:30:46,750
colleagues works this is not a huge

00:30:44,649 --> 00:30:47,260
problem you can solve it with advanced

00:30:46,750 --> 00:30:50,440
Geetanjali

00:30:47,260 --> 00:30:54,460
knowledge and you can go back and make a

00:30:50,440 --> 00:30:58,570
proper merge but you have to discover it

00:30:54,460 --> 00:31:01,090
and you you have to then fix it and it's

00:30:58,570 --> 00:31:02,860
not just get pull needs like checking

00:31:01,090 --> 00:31:07,570
out stuff and making new branches and

00:31:02,860 --> 00:31:10,510
properly merging them if you don't do

00:31:07,570 --> 00:31:16,570
the composer install you may have

00:31:10,510 --> 00:31:19,390
updated and not updated code so that can

00:31:16,570 --> 00:31:25,299
lead to breaking things in several

00:31:19,390 --> 00:31:27,909
spectacular ways if you do not merge or

00:31:25,299 --> 00:31:30,250
if you do merge before the commit then

00:31:27,909 --> 00:31:32,830
you don't have a safe state that you can

00:31:30,250 --> 00:31:35,700
go back to and you might have additional

00:31:32,830 --> 00:31:37,559
manual labor to solve

00:31:35,700 --> 00:31:39,360
inflicts I don't mean necessarily much

00:31:37,559 --> 00:31:40,889
conflict because those kids will tell

00:31:39,360 --> 00:31:45,120
you about but the conflicts we'll see in

00:31:40,889 --> 00:31:47,309
a second and if you forget to import at

00:31:45,120 --> 00:31:50,610
the end then you will continue with the

00:31:47,309 --> 00:31:52,019
state that you had before and not have

00:31:50,610 --> 00:31:54,000
all the stuff your colleagues have been

00:31:52,019 --> 00:31:55,320
worked on so next time you export the

00:31:54,000 --> 00:31:58,320
configuration you're in the same place

00:31:55,320 --> 00:32:01,110
as before except some time has passed

00:31:58,320 --> 00:32:03,169
since and it would be more difficult to

00:32:01,110 --> 00:32:11,010
fix it

00:32:03,169 --> 00:32:12,840
so save sequence remember right so but

00:32:11,010 --> 00:32:18,330
there is another sequence when you

00:32:12,840 --> 00:32:20,789
update the modules so you get the new

00:32:18,330 --> 00:32:24,809
modules with composer update for example

00:32:20,789 --> 00:32:27,600
then you run the update hooks the update

00:32:24,809 --> 00:32:30,029
hooks might change the configuration so

00:32:27,600 --> 00:32:33,840
you export the configuration again that

00:32:30,029 --> 00:32:35,519
with the updated configuration you add

00:32:33,840 --> 00:32:37,980
all of that get and you commit and you

00:32:35,519 --> 00:32:40,139
push of course if your colleagues have

00:32:37,980 --> 00:32:45,049
worked in the meantime before the push

00:32:40,139 --> 00:32:45,049
you you go back to the other words long

00:32:45,889 --> 00:32:53,540
I think that's all clear I hope

00:32:50,860 --> 00:32:55,100
so I was talking about before they

00:32:53,540 --> 00:33:01,370
should always run the update hooks

00:32:55,100 --> 00:33:03,290
before the config import and like if you

00:33:01,370 --> 00:33:06,380
conceptually the update hooks they're

00:33:03,290 --> 00:33:09,200
there to fix the database so that it

00:33:06,380 --> 00:33:12,980
corresponds to your code that you run

00:33:09,200 --> 00:33:16,070
and when you update code and the

00:33:12,980 --> 00:33:17,690
database are out of sync you live in the

00:33:16,070 --> 00:33:22,370
interest territory so the first thing is

00:33:17,690 --> 00:33:24,650
always update the database so if you

00:33:22,370 --> 00:33:29,660
want to abuse the update hooks to do

00:33:24,650 --> 00:33:33,230
stuff after the config import then

00:33:29,660 --> 00:33:38,990
you're tempted to do a configuration for

00:33:33,230 --> 00:33:40,400
first and then the update hooks but you

00:33:38,990 --> 00:33:42,520
live in this dangerous territory and

00:33:40,400 --> 00:33:45,830
there's an issue in Drupal de Bourg that

00:33:42,520 --> 00:33:47,770
will not allow you to import the

00:33:45,830 --> 00:33:53,690
configuration when you have outstanding

00:33:47,770 --> 00:33:57,680
updates and there's a proof-of-concept

00:33:53,690 --> 00:34:01,280
module it's on github right now that

00:33:57,680 --> 00:34:04,430
adds another hook like a hook update as

00:34:01,280 --> 00:34:07,460
the pre config import hook and the post

00:34:04,430 --> 00:34:09,920
config import talk and they get fired in

00:34:07,460 --> 00:34:11,540
a safe environment as in the code is

00:34:09,920 --> 00:34:13,910
aligned with the database and everything

00:34:11,540 --> 00:34:17,480
is fine and they get called before and

00:34:13,910 --> 00:34:19,670
after the configuration import there's

00:34:17,480 --> 00:34:21,940
an issue to do that in core because the

00:34:19,670 --> 00:34:28,130
other issue is blocked on that

00:34:21,940 --> 00:34:29,690
essentially yeah so maybe that's also

00:34:28,130 --> 00:34:33,200
one of the things we can work on this

00:34:29,690 --> 00:34:39,170
week and hopefully move on made with

00:34:33,200 --> 00:34:42,320
this right now you can do both and often

00:34:39,170 --> 00:34:45,890
it will work and and sometimes it

00:34:42,320 --> 00:34:50,710
doesn't and maybe you'll remember this

00:34:45,890 --> 00:34:53,750
presentation and remember I told you so

00:34:50,710 --> 00:34:57,260
so let's see an example of how you can

00:34:53,750 --> 00:34:59,510
break the configuration with get you all

00:34:57,260 --> 00:35:02,180
know the standard profile right so you

00:34:59,510 --> 00:35:06,110
install the standard profile developer a

00:35:02,180 --> 00:35:08,840
so you both start from the same place

00:35:06,110 --> 00:35:12,290
developer aid makes a new branch and

00:35:08,840 --> 00:35:15,490
deletes the tags field from the article

00:35:12,290 --> 00:35:18,740
content type this results in two

00:35:15,490 --> 00:35:20,930
configuration changes basically it

00:35:18,740 --> 00:35:22,550
removed two files the field instance and

00:35:20,930 --> 00:35:25,210
field storage because it was the only

00:35:22,550 --> 00:35:30,020
field instance there was on the site

00:35:25,210 --> 00:35:33,140
great commit developer B adds the tags

00:35:30,020 --> 00:35:34,850
to the basic page that results in

00:35:33,140 --> 00:35:40,460
another configuration change which is

00:35:34,850 --> 00:35:41,930
adding a new file since these files have

00:35:40,460 --> 00:35:44,480
nothing in common with each other get is

00:35:41,930 --> 00:35:47,780
very happy to merge this it there is no

00:35:44,480 --> 00:35:52,010
no conflict but now you have

00:35:47,780 --> 00:35:55,730
configuration that has field instance

00:35:52,010 --> 00:35:57,530
but without a field storage and yeah

00:35:55,730 --> 00:35:58,790
Drupal will not allow you to import this

00:35:57,530 --> 00:36:01,900
configuration because the configuration

00:35:58,790 --> 00:36:06,650
is is not in a good State

00:36:01,900 --> 00:36:08,920
and so always import the configuration

00:36:06,650 --> 00:36:11,750
and you will notice this and if you

00:36:08,920 --> 00:36:13,880
share the configuration often the

00:36:11,750 --> 00:36:16,900
differences will not be that big and you

00:36:13,880 --> 00:36:19,220
will probably find out what happened and

00:36:16,900 --> 00:36:22,220
the import will tell you what is wrong

00:36:19,220 --> 00:36:24,710
it will tell you the field instance

00:36:22,220 --> 00:36:26,660
doesn't have a storage can't import and

00:36:24,710 --> 00:36:28,400
then you go back and saw what happened

00:36:26,660 --> 00:36:29,900
where it is the storage go and you see

00:36:28,400 --> 00:36:32,360
in the other commit that goes we moved

00:36:29,900 --> 00:36:38,540
there and then you just add it again and

00:36:32,360 --> 00:36:40,610
it's solved but it is great for managing

00:36:38,540 --> 00:36:43,630
files and Drupal it's a little bit more

00:36:40,610 --> 00:36:43,630
care for that

00:36:44,240 --> 00:36:50,210
so how do we handle configuration

00:36:47,490 --> 00:36:52,980
changes on production I just told you

00:36:50,210 --> 00:36:55,019
can Eurasian changes is like development

00:36:52,980 --> 00:36:58,049
right so if you change configuration of

00:36:55,019 --> 00:36:59,430
production one could argue that you do

00:36:58,049 --> 00:37:03,200
development on production

00:36:59,430 --> 00:37:05,670
I mean it's not exactly the same but

00:37:03,200 --> 00:37:10,740
your configuration changes they go in

00:37:05,670 --> 00:37:12,539
your in your git repository and so if

00:37:10,740 --> 00:37:14,880
you change the configuration production

00:37:12,539 --> 00:37:18,869
that should also somehow go into they

00:37:14,880 --> 00:37:22,619
get repository I mean the scenario is

00:37:18,869 --> 00:37:24,980
exactly the same so you adopt this great

00:37:22,619 --> 00:37:27,599
model and you have all your developers

00:37:24,980 --> 00:37:29,069
properly syncing configuration and then

00:37:27,599 --> 00:37:31,799
you have your geeky client that just

00:37:29,069 --> 00:37:35,160
overnight change the configuration and

00:37:31,799 --> 00:37:37,589
so when you deploy all the clients

00:37:35,160 --> 00:37:40,260
changes go away and because they were

00:37:37,589 --> 00:37:41,640
not in the kit repository and your

00:37:40,260 --> 00:37:43,769
client is not gonna be happy with you

00:37:41,640 --> 00:37:46,079
and he's gonna yell at you and the

00:37:43,769 --> 00:37:50,099
clients always right so you have to take

00:37:46,079 --> 00:37:52,859
care of that of course the solution that

00:37:50,099 --> 00:37:54,980
you might know you have someone that

00:37:52,859 --> 00:37:57,150
clones the database to your local laptop

00:37:54,980 --> 00:38:00,990
exports the configuration to starting

00:37:57,150 --> 00:38:03,599
gate and it's yeah maybe a bit painful

00:38:00,990 --> 00:38:06,329
to do that but it's a solution you have

00:38:03,599 --> 00:38:10,400
like some person that's dedicated to to

00:38:06,329 --> 00:38:13,710
be the the clients developer so to say

00:38:10,400 --> 00:38:16,890
that that can work if there's nothing in

00:38:13,710 --> 00:38:18,900
between that goes wrong so if like if

00:38:16,890 --> 00:38:20,460
the client changes something after you

00:38:18,900 --> 00:38:24,150
export it to the database to your local

00:38:20,460 --> 00:38:26,369
stuff is still gonna be gone so first

00:38:24,150 --> 00:38:31,490
option you don't allow the client to do

00:38:26,369 --> 00:38:31,490
that problem solve

00:38:31,650 --> 00:38:36,010
often often though often though this is

00:38:34,300 --> 00:38:37,780
not really a solution and the client has

00:38:36,010 --> 00:38:41,140
a legitimate use case for changing some

00:38:37,780 --> 00:38:43,090
configuration so this is great and if

00:38:41,140 --> 00:38:46,270
you can do it it will solve you lots of

00:38:43,090 --> 00:38:48,670
headaches but sometimes you can't so

00:38:46,270 --> 00:38:50,500
there's other solutions to coming back

00:38:48,670 --> 00:38:52,260
to configuration split because it can

00:38:50,500 --> 00:38:56,100
also help you out there

00:38:52,260 --> 00:38:58,540
so essentially you you specify which

00:38:56,100 --> 00:39:00,490
configuration the client can change with

00:38:58,540 --> 00:39:03,160
what what is okay for the client to do

00:39:00,490 --> 00:39:05,440
because the client will not go and I

00:39:03,160 --> 00:39:08,290
don't know change all the the view

00:39:05,440 --> 00:39:10,930
settings and Cronyn and add fields to

00:39:08,290 --> 00:39:12,490
everything and I mean at that point the

00:39:10,930 --> 00:39:15,220
client is really hit they'll help or so

00:39:12,490 --> 00:39:18,940
but you know maybe the site name can

00:39:15,220 --> 00:39:22,090
change or things like that so you you

00:39:18,940 --> 00:39:25,240
specify what is up okay to change in a

00:39:22,090 --> 00:39:29,740
split settings for example the gray

00:39:25,240 --> 00:39:32,890
lists then before you deploy you export

00:39:29,740 --> 00:39:35,830
that specific split so that your clients

00:39:32,890 --> 00:39:37,570
configuration is safe then you pull the

00:39:35,830 --> 00:39:39,910
configuration business solution you

00:39:37,570 --> 00:39:42,790
deploy configuration with configuration

00:39:39,910 --> 00:39:44,650
import and what happens is it will

00:39:42,790 --> 00:39:46,890
import the configuration from the files

00:39:44,650 --> 00:39:52,180
that you had and it will also import

00:39:46,890 --> 00:39:55,870
this second split all good all

00:39:52,180 --> 00:39:58,210
configuration is in the files that the

00:39:55,870 --> 00:40:00,010
dogma that the configuration that is in

00:39:58,210 --> 00:40:01,540
the files represents the configuration

00:40:00,010 --> 00:40:04,960
that's on the site after config import

00:40:01,540 --> 00:40:07,660
is still is still okay but you have to

00:40:04,960 --> 00:40:09,910
do this extra step of exporting so the

00:40:07,660 --> 00:40:12,640
third option is with config ignore which

00:40:09,910 --> 00:40:14,500
you can skip this step but like the

00:40:12,640 --> 00:40:19,600
first soil is still the same you decide

00:40:14,500 --> 00:40:22,510
which config is okay to ignore then you

00:40:19,600 --> 00:40:25,180
just pull the configuration and config

00:40:22,510 --> 00:40:28,480
import and the configuration is then

00:40:25,180 --> 00:40:30,400
imported from the files but also some of

00:40:28,480 --> 00:40:34,760
the ones that are in the active storage

00:40:30,400 --> 00:40:38,020
and it goes in in into the

00:40:34,760 --> 00:40:39,950
the magic config filter storage and

00:40:38,020 --> 00:40:41,930
nothing will have changed in this

00:40:39,950 --> 00:40:46,040
configuration and so it will not get

00:40:41,930 --> 00:40:50,690
removed and everything is fine this is

00:40:46,040 --> 00:40:52,220
great but it departs a little bit from

00:40:50,690 --> 00:40:53,810
from the philosophy that all your

00:40:52,220 --> 00:40:57,440
configuration is in the files and

00:40:53,810 --> 00:40:59,330
therefore reproducible and you can have

00:40:57,440 --> 00:41:02,360
like the files and you know when you

00:40:59,330 --> 00:41:06,490
import it will be the same but it can it

00:41:02,360 --> 00:41:06,490
can be a solution for for this case

00:41:06,640 --> 00:41:15,100
finally for a shared configuration so if

00:41:10,970 --> 00:41:20,750
if you want to reuse configuration or or

00:41:15,100 --> 00:41:23,810
use configuration on a multi-site before

00:41:20,750 --> 00:41:26,650
the last group account in the u.s. I

00:41:23,810 --> 00:41:32,960
wrote a little blog post introducing

00:41:26,650 --> 00:41:35,660
configuration dimensions so you have

00:41:32,960 --> 00:41:38,030
this vertical dimension of the same site

00:41:35,660 --> 00:41:42,160
in different environments and then you

00:41:38,030 --> 00:41:47,510
have another site like on a horizontal

00:41:42,160 --> 00:41:49,190
separation if you have the same graphics

00:41:47,510 --> 00:41:55,670
from before it would be like a third

00:41:49,190 --> 00:41:58,190
dimension between you so this this is

00:41:55,670 --> 00:42:03,080
something that core does not take care

00:41:58,190 --> 00:42:04,880
of at all and you you can use the same

00:42:03,080 --> 00:42:10,160
kind of things I mean the exporting to

00:42:04,880 --> 00:42:14,290
files is great and so on so there's

00:42:10,160 --> 00:42:17,780
other solutions and for example features

00:42:14,290 --> 00:42:20,240
it's useful for that where you can

00:42:17,780 --> 00:42:21,620
bundle some of the configuration in into

00:42:20,240 --> 00:42:24,350
their own features into their own

00:42:21,620 --> 00:42:28,400
modules and and reuse them on other

00:42:24,350 --> 00:42:31,580
sides but once you install the feature

00:42:28,400 --> 00:42:33,920
the site owns the configuration and not

00:42:31,580 --> 00:42:36,320
the feature anymore so when you update

00:42:33,920 --> 00:42:38,000
the feature you have to make sure that

00:42:36,320 --> 00:42:40,670
the configuration that the updated

00:42:38,000 --> 00:42:42,460
feature then gets really important into

00:42:40,670 --> 00:42:44,570
your site and then the site gets

00:42:42,460 --> 00:42:45,770
deployed with the normal configuration

00:42:44,570 --> 00:42:47,960
management works

00:42:45,770 --> 00:42:49,610
we have so it features is for

00:42:47,960 --> 00:42:56,690
development only it's it's like on the

00:42:49,610 --> 00:42:58,970
the lower level on on this dimension and

00:42:56,690 --> 00:43:00,650
but it's great for like starter kits

00:42:58,970 --> 00:43:06,010
when you have like optionally more

00:43:00,650 --> 00:43:08,119
features that you want to add but it it

00:43:06,010 --> 00:43:11,869
it can help you to solve this problem

00:43:08,119 --> 00:43:17,440
but it's you have to find a good

00:43:11,869 --> 00:43:19,850
workaround um for for multi-site the

00:43:17,440 --> 00:43:22,520
that you can use configuration split

00:43:19,850 --> 00:43:25,640
I've used it from a site there's two

00:43:22,520 --> 00:43:27,470
basic approaches that you can do one is

00:43:25,640 --> 00:43:32,000
you have a shared sync directory and

00:43:27,470 --> 00:43:33,530
then separate splits per site and the

00:43:32,000 --> 00:43:36,680
other approach is the other way around

00:43:33,530 --> 00:43:38,900
where you have each site has their own

00:43:36,680 --> 00:43:41,510
sync directory but you share some of the

00:43:38,900 --> 00:43:46,210
splits which suits best

00:43:41,510 --> 00:43:49,430
I know it's depending on your use case

00:43:46,210 --> 00:43:51,530
but there will be a buff on Thursday so

00:43:49,430 --> 00:43:58,040
you can join is there to to talk about

00:43:51,530 --> 00:44:02,780
that little more and yeah that's it

00:43:58,040 --> 00:44:07,280
Chinese for the contribution sprint on

00:44:02,780 --> 00:44:09,800
Friday and make sure that you leave some

00:44:07,280 --> 00:44:13,300
feedback that always helps to improve

00:44:09,800 --> 00:44:13,300
their presentations thank you very much

00:44:21,820 --> 00:44:27,240
if you have questions please use the

00:44:23,290 --> 00:44:27,240
microphone because it will be recorded

00:44:33,309 --> 00:44:38,440
so one common problem is that you don't

00:44:35,289 --> 00:44:40,359
export before you check out something

00:44:38,440 --> 00:44:42,819
with gate or merge from from upstream

00:44:40,359 --> 00:44:46,089
and something would it be feasible to

00:44:42,819 --> 00:44:49,089
either have something that a mechanism

00:44:46,089 --> 00:44:50,529
that always exports everything then as

00:44:49,089 --> 00:44:52,420
soon as someone changes the conflict it

00:44:50,529 --> 00:44:53,999
will be exported or maybe with a cron

00:44:52,420 --> 00:44:56,739
like every five seconds

00:44:53,999 --> 00:44:57,309
yes there's two modules that do exactly

00:44:56,739 --> 00:45:00,789
that

00:44:57,309 --> 00:45:03,759
there's config tools which basically on

00:45:00,789 --> 00:45:06,239
each safe of a configuration entity

00:45:03,759 --> 00:45:09,670
exports it directly and so like

00:45:06,239 --> 00:45:13,390
disadvantages in some way well yeah it

00:45:09,670 --> 00:45:16,839
does get or it doesn't like a file right

00:45:13,390 --> 00:45:19,450
on every safe I mean but it only writes

00:45:16,839 --> 00:45:22,089
like one config file yeah it's not so

00:45:19,450 --> 00:45:23,380
bad you can totally use it yes it's a

00:45:22,089 --> 00:45:25,239
good solution for this problem

00:45:23,380 --> 00:45:27,369
okay would be maybe a good hook that

00:45:25,239 --> 00:45:29,700
prevents it from doing anything harmful

00:45:27,369 --> 00:45:34,979
unless the config is in sync something

00:45:29,700 --> 00:45:37,930
that would also be an option yeah yeah

00:45:34,979 --> 00:45:40,269
but if you export it automatically then

00:45:37,930 --> 00:45:45,969
then you will know I mean if you just

00:45:40,269 --> 00:45:48,430
pull and then if yeah hi what is your

00:45:45,969 --> 00:45:51,219
solution when used installing site in

00:45:48,430 --> 00:45:56,969
database you have profile standard but

00:45:51,219 --> 00:45:59,529
when you export your profile in core in

00:45:56,969 --> 00:46:01,799
configuration you have profile confusing

00:45:59,529 --> 00:46:07,599
installer and when someone wants to

00:46:01,799 --> 00:46:11,109
import changes from configuration there

00:46:07,599 --> 00:46:14,589
is a bug then we can't change profile

00:46:11,109 --> 00:46:16,930
from standards to no you you don't

00:46:14,589 --> 00:46:20,199
change the profile to config installer

00:46:16,930 --> 00:46:22,739
so when when you use config installer it

00:46:20,199 --> 00:46:26,529
will still be standard that is installed

00:46:22,739 --> 00:46:29,979
it's so the the way config installer

00:46:26,529 --> 00:46:33,190
works is it installs another profile and

00:46:29,979 --> 00:46:35,709
it jumps through a lot of Hoops to do

00:46:33,190 --> 00:46:37,660
that and and that's why there's this

00:46:35,709 --> 00:46:41,609
issue to move this functionality in core

00:46:37,660 --> 00:46:45,160
because a lot of things like you know

00:46:41,609 --> 00:46:48,060
like do for example it can't handle it

00:46:45,160 --> 00:46:51,190
the the case when modules have our

00:46:48,060 --> 00:46:54,430
profiles have modules in them because

00:46:51,190 --> 00:46:56,290
then if you install configuring story it

00:46:54,430 --> 00:46:59,890
can't detect these modules and doesn't

00:46:56,290 --> 00:47:02,110
find them and and so on but when you

00:46:59,890 --> 00:47:04,360
when you install a site with config

00:47:02,110 --> 00:47:06,850
installer the configuration you have at

00:47:04,360 --> 00:47:08,410
the end will not say that the profile

00:47:06,850 --> 00:47:10,300
was installed with config installer but

00:47:08,410 --> 00:47:18,280
with the profile that was installed

00:47:10,300 --> 00:47:22,810
initially hello should notice about

00:47:18,280 --> 00:47:25,450
features and calculations you can use we

00:47:22,810 --> 00:47:27,510
used features importer features brush

00:47:25,450 --> 00:47:33,420
which was imported just imported all

00:47:27,510 --> 00:47:37,930
when you pull new changes in your future

00:47:33,420 --> 00:47:40,920
just run brush in Proteus all and it

00:47:37,930 --> 00:47:45,520
solves problem - no you are - delivery

00:47:40,920 --> 00:47:48,100
yes but so if you then change this

00:47:45,520 --> 00:47:49,390
configuration yourself and you know you

00:47:48,100 --> 00:47:54,150
know you you will have to review this

00:47:49,390 --> 00:48:00,400
process it's it's a and a question about

00:47:54,150 --> 00:48:03,400
station about important blocks you know

00:48:00,400 --> 00:48:05,330
blocks issue and you create block

00:48:03,400 --> 00:48:08,100
instance in you know

00:48:05,330 --> 00:48:10,530
vehicle production historical

00:48:08,100 --> 00:48:12,270
calculation and cannot import this

00:48:10,530 --> 00:48:14,580
configuration because you haven't

00:48:12,270 --> 00:48:17,430
content yes exactly so one of the the

00:48:14,580 --> 00:48:19,410
things that I didn't mention now because

00:48:17,430 --> 00:48:21,720
I expanded the other part of the

00:48:19,410 --> 00:48:22,140
presentation is the the issue that you

00:48:21,720 --> 00:48:24,360
have

00:48:22,140 --> 00:48:26,400
when configuration depends on content

00:48:24,360 --> 00:48:29,070
and block is like the canonical example

00:48:26,400 --> 00:48:31,470
for that so when you have configuration

00:48:29,070 --> 00:48:33,500
that depends on content you have to make

00:48:31,470 --> 00:48:35,850
sure that this content also getting

00:48:33,500 --> 00:48:39,540
imported one of the one of the solutions

00:48:35,850 --> 00:48:42,690
is this the pre config in Port hook that

00:48:39,540 --> 00:48:44,790
I talked about another solution is you

00:48:42,690 --> 00:48:49,830
you implement event listener that

00:48:44,790 --> 00:48:51,810
listens to the content not found event

00:48:49,830 --> 00:48:54,030
when you import the configuration I

00:48:51,810 --> 00:48:56,210
forgot the exact name of it but it's

00:48:54,030 --> 00:48:58,860
something like that

00:48:56,210 --> 00:49:02,700
another option is use default content

00:48:58,860 --> 00:49:05,580
and and then have like an additional

00:49:02,700 --> 00:49:08,730
step to import and export the content

00:49:05,580 --> 00:49:14,100
that you need you can also use deploy

00:49:08,730 --> 00:49:16,860
the deploy suite for more advanced use

00:49:14,100 --> 00:49:20,960
cases for that in in our case we usually

00:49:16,860 --> 00:49:20,960
use a default content and it works great

00:49:22,130 --> 00:49:30,120
hi how can I handle multilingual website

00:49:27,120 --> 00:49:34,470
with the same feature set but different

00:49:30,120 --> 00:49:36,300
based languages on each site so the

00:49:34,470 --> 00:49:39,810
configuration SPECT works with

00:49:36,300 --> 00:49:42,270
multilingual configuration as well it it

00:49:39,810 --> 00:49:46,230
splits the configuration with its

00:49:42,270 --> 00:49:52,080
languages what you cannot do right now

00:49:46,230 --> 00:49:58,650
is overwrite only specific language so I

00:49:52,080 --> 00:50:01,860
mean you can with like no you can't

00:49:58,650 --> 00:50:03,540
really I mean but it wouldn't be too

00:50:01,860 --> 00:50:05,970
difficult to to add another

00:50:03,540 --> 00:50:10,440
configuration filter that only does

00:50:05,970 --> 00:50:13,040
languages so like that the thing is the

00:50:10,440 --> 00:50:17,700
configuration split works with separate

00:50:13,040 --> 00:50:18,690
config storage and so it works the same

00:50:17,700 --> 00:50:20,460
way

00:50:18,690 --> 00:50:22,829
and that's also how it deals with

00:50:20,460 --> 00:50:24,450
languages it natively just supports

00:50:22,829 --> 00:50:28,800
languages because configuration storage

00:50:24,450 --> 00:50:32,069
to support languages so if you want to

00:50:28,800 --> 00:50:33,410
only have special languages then then

00:50:32,069 --> 00:50:36,329
you need to treat the languages

00:50:33,410 --> 00:50:38,790
differently than than the rest of the

00:50:36,329 --> 00:50:40,770
configuration and it shouldn't be too

00:50:38,790 --> 00:50:44,369
difficult to add another configuration

00:50:40,770 --> 00:50:48,560
filter that the deels languages and

00:50:44,369 --> 00:50:52,170
saves them somehow in a separate way

00:50:48,560 --> 00:50:54,300
yeah but if you have questions about

00:50:52,170 --> 00:50:56,250
this if like if you're implementing a

00:50:54,300 --> 00:50:58,560
config filter and I know it can be

00:50:56,250 --> 00:51:01,710
pretty daunting because it's like a lot

00:50:58,560 --> 00:51:03,800
of things and don't don't hesitate to

00:51:01,710 --> 00:51:07,190
contact me in them I'll be happy to

00:51:03,800 --> 00:51:07,190
assist you

00:51:08,630 --> 00:51:12,920
yeah thank you very much lunchtime

00:51:14,330 --> 00:51:17,699
[Applause]

00:51:24,600 --> 00:51:27,290
Thanks

00:52:07,990 --> 00:52:12,150

YouTube URL: https://www.youtube.com/watch?v=WsMuQFO8yGU


