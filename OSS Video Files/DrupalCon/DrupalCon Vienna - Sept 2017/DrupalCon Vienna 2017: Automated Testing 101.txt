Title: DrupalCon Vienna 2017: Automated Testing 101
Publication date: 2017-09-26
Playlist: DrupalCon Vienna - Sept 2017
Description: 
	One of the most relevant tasks on a software project is the quality assurance - we are building a product, and we want to deliver it with the highest level of quality, while keeping the budget on its limits. The bad part here is, doing quality checks is a repetitive task, and all the application features should be checked each time a new piece of code is added - unfortunately, this is not generally done: only the new code is checked, so the chances to have a regression bug is there, and, yes, it happens often.

Additionally, when thinking on QA, what comes to mind is testing the functionality, but, after all, software quality involves some other aspects of the product that should be taken care of (like security, accessibility, performance, scaling, etc.). Of course, all this sounds great, but on the Real World™, there is not enough time to check everything that should be checked before deploying code to production. How easy would be to have all the checks ready to be executed each time they are needed, and what about having all the aspects of the software covered on these checks? Enter the automated testing.

This session will review the current state of the art about test automation, talking about the most useful tools to provide these capabilities to your project, giving some advice about best strategies to implement automated testing for your application, and how to cover relevant aspects of your software (not only functionality!).

Intended Audience & Skill Level

Everyone interested on learning the basics of automated testing is welcome to attend, and they will learn a bit about which tools you can use to create your tests, how to integrate them on your project's life cycle, how to execute them automatically on each build, and some other questions that a novice on this topic may need to answer.

As this is a barely introduction session, there is no minimum skill level you need to attend - just some interest on automated testing is required!

About the speaker

My name is Ezequiel "Zequi" Vázquez, and I am a developer at Lullabot. I am a web engineer specialized in PHP & Drupal development, with strong background on DevOps, virtualization & cloud computing. I am highly interested on high performance & availability, and IT security is one of my passions.

I have been speaker on four DrupalCamp Spain editions, Drupal Dev Days 2017 and DrupalCon Europe 2015, and I usually collaborate with local meeting groups and local universities to talk mainly about web security and Drupal.
Captions: 
	00:00:00,000 --> 00:00:06,000
well good morning everyone I'm going to

00:00:03,600 --> 00:00:10,500
start the presentation because we are

00:00:06,000 --> 00:00:12,690
just in time so welcome to automated

00:00:10,500 --> 00:00:15,240
testing 101 I am

00:00:12,690 --> 00:00:20,730
Ezekiel Saqib askus and I'm going to

00:00:15,240 --> 00:00:22,980
present you this aciem first of all let

00:00:20,730 --> 00:00:26,220
me remind you that on Friday we're going

00:00:22,980 --> 00:00:28,890
to have three different sprints so just

00:00:26,220 --> 00:00:30,480
take a look to the website if you want

00:00:28,890 --> 00:00:37,559
more information about them you have the

00:00:30,480 --> 00:00:42,300
locations and even the hashtag so yeah

00:00:37,559 --> 00:00:46,110
well so this is how to meet the testing

00:00:42,300 --> 00:00:50,520
this is an introduction and Tory cesium

00:00:46,110 --> 00:00:52,800
for testing on projects and to be

00:00:50,520 --> 00:00:55,410
specific on automated testing tools on

00:00:52,800 --> 00:00:59,329
how you can apply them to your project

00:00:55,410 --> 00:01:02,370
so you can improve your software quality

00:00:59,329 --> 00:01:05,220
this is part of the debug tracks give up

00:01:02,370 --> 00:01:10,939
track sorry and this is the URL in case

00:01:05,220 --> 00:01:10,939
we want to later download the slides so

00:01:11,570 --> 00:01:19,140
first things first this is me

00:01:15,020 --> 00:01:21,000
segi Vasquez I am back-end developer I

00:01:19,140 --> 00:01:23,850
have been working with Drupal for like

00:01:21,000 --> 00:01:27,840
seven years or maybe six not not seven

00:01:23,850 --> 00:01:30,869
yet I work out lolly bot and I have some

00:01:27,840 --> 00:01:34,500
other background about system

00:01:30,869 --> 00:01:38,040
administration and develops and well I

00:01:34,500 --> 00:01:40,530
am very interested on hacking and

00:01:38,040 --> 00:01:45,470
security specifically on web security

00:01:40,530 --> 00:01:48,899
I have done some audits and I have I

00:01:45,470 --> 00:01:52,619
really like to have some fun on these

00:01:48,899 --> 00:01:57,030
tasks and recently I have discovered the

00:01:52,619 --> 00:01:58,950
testing the testing techniques again I

00:01:57,030 --> 00:02:01,439
am really enjoying we have been applying

00:01:58,950 --> 00:02:03,930
these techniques that I'm going to talk

00:02:01,439 --> 00:02:05,850
about on a project that we have been

00:02:03,930 --> 00:02:08,310
working for for this last year

00:02:05,850 --> 00:02:09,399
I'm not about but basically I want to

00:02:08,310 --> 00:02:10,780
share

00:02:09,399 --> 00:02:14,290
everything that I have discovered and

00:02:10,780 --> 00:02:20,170
learned so you can put them in practice

00:02:14,290 --> 00:02:24,340
too and yeah on summary we're going to

00:02:20,170 --> 00:02:26,859
talk first some mineral concepts about

00:02:24,340 --> 00:02:31,030
software quality what is of what if

00:02:26,859 --> 00:02:35,109
software quality how can we apply some

00:02:31,030 --> 00:02:37,650
measure techniques to determine the

00:02:35,109 --> 00:02:41,650
level of quality that our software have

00:02:37,650 --> 00:02:44,260
and what basically some concepts then

00:02:41,650 --> 00:02:47,349
I'm going to go deeper on different

00:02:44,260 --> 00:02:52,200
testing techniques that we can use to

00:02:47,349 --> 00:02:56,340
cover our application then on the third

00:02:52,200 --> 00:03:02,709
point I'm going to live demo three

00:02:56,340 --> 00:03:04,480
different tools I have video videos so

00:03:02,709 --> 00:03:06,939
if in case everything goes wrong

00:03:04,480 --> 00:03:08,879
everything is covered and then I'm going

00:03:06,939 --> 00:03:11,560
to talk about a bit about how we

00:03:08,879 --> 00:03:16,500
specifically implemented these

00:03:11,560 --> 00:03:19,000
techniques on on our last project so

00:03:16,500 --> 00:03:27,040
let's start with the first point

00:03:19,000 --> 00:03:30,900
software quality so basically the first

00:03:27,040 --> 00:03:34,750
question is what is software quality so

00:03:30,900 --> 00:03:37,840
quality is the ability that one product

00:03:34,750 --> 00:03:43,209
can have to address a problem or a need

00:03:37,840 --> 00:03:47,290
so more quality on a product means that

00:03:43,209 --> 00:03:54,609
the solution that this product means for

00:03:47,290 --> 00:03:56,889
the for the sorry so if we have a high

00:03:54,609 --> 00:03:59,829
quality product we have a high quality

00:03:56,889 --> 00:04:01,510
solution this means that the solution

00:03:59,829 --> 00:04:04,540
that we proposed for the to solve the

00:04:01,510 --> 00:04:09,340
problem is a best the best fit for this

00:04:04,540 --> 00:04:10,900
for this problem so software is just a

00:04:09,340 --> 00:04:13,299
product we are working in a product and

00:04:10,900 --> 00:04:15,970
we want it to have the high level of

00:04:13,299 --> 00:04:17,889
quality possible so what we want is to

00:04:15,970 --> 00:04:21,200
have the best solution possible for this

00:04:17,889 --> 00:04:25,040
problem that the client proposed to us

00:04:21,200 --> 00:04:28,540
just a quick note here q a means Quality

00:04:25,040 --> 00:04:30,470
Assurance this is basically to be

00:04:28,540 --> 00:04:33,700
confident about the level of quality

00:04:30,470 --> 00:04:38,210
that we have on our product and also QA

00:04:33,700 --> 00:04:41,960
refers to the those people on our team

00:04:38,210 --> 00:04:45,680
that watch for the quality basically

00:04:41,960 --> 00:04:48,080
they execute the test and they they tell

00:04:45,680 --> 00:04:49,730
us as developers okay this is not

00:04:48,080 --> 00:04:54,410
working properly or DC's

00:04:49,730 --> 00:04:58,160
so sometimes we may feel like they are

00:04:54,410 --> 00:05:00,470
quotes an enemy because they tend to

00:04:58,160 --> 00:05:03,020
reject something that is not 100%

00:05:00,470 --> 00:05:06,530
working but we have to think that they

00:05:03,020 --> 00:05:08,270
are our allies in fact because it's

00:05:06,530 --> 00:05:11,090
preferable that data's covering me back

00:05:08,270 --> 00:05:13,130
so we can solve instead of the client or

00:05:11,090 --> 00:05:15,290
even the final user discovering this

00:05:13,130 --> 00:05:20,420
back so keep that in mind

00:05:15,290 --> 00:05:26,060
please regarding how quality can be

00:05:20,420 --> 00:05:28,430
measured we can determine okay how how

00:05:26,060 --> 00:05:30,740
is the level of quality for one piece of

00:05:28,430 --> 00:05:33,320
software well we need some metrics a

00:05:30,740 --> 00:05:36,520
metric is nothing else than something

00:05:33,320 --> 00:05:39,530
that can be that can be measured

00:05:36,520 --> 00:05:42,020
depending on the type of application

00:05:39,530 --> 00:05:45,110
that we are working on we can use

00:05:42,020 --> 00:05:46,910
different metrics we have to be smart

00:05:45,110 --> 00:05:49,720
about the metrics the metrics that we

00:05:46,910 --> 00:05:52,610
are going to select and once we have to

00:05:49,720 --> 00:05:55,580
once we have done this selection of

00:05:52,610 --> 00:05:59,600
metrics we can consider this our testing

00:05:55,580 --> 00:06:02,150
framework basically we can divide the

00:05:59,600 --> 00:06:04,820
aspects of software that we can measure

00:06:02,150 --> 00:06:10,190
in two different groups one of them and

00:06:04,820 --> 00:06:12,560
the most usually the most socially the

00:06:10,190 --> 00:06:14,870
one that we take care more about is

00:06:12,560 --> 00:06:19,580
functional testing we want the the

00:06:14,870 --> 00:06:22,070
software to do to work exactly as it was

00:06:19,580 --> 00:06:25,160
designing I mean if the if the client

00:06:22,070 --> 00:06:27,530
asked us to implement some software to

00:06:25,160 --> 00:06:29,510
solve a specific problem we have to have

00:06:27,530 --> 00:06:31,970
I mean we have to work so the software

00:06:29,510 --> 00:06:33,409
actually solves the problem but there

00:06:31,970 --> 00:06:36,349
are some other

00:06:33,409 --> 00:06:40,029
shanell aspects that sometimes may be

00:06:36,349 --> 00:06:44,979
may be forgotten like performance with

00:06:40,029 --> 00:06:48,860
security usability accessibility etc and

00:06:44,979 --> 00:06:51,259
well this is I just wanted to mention

00:06:48,860 --> 00:06:53,809
that we need to take care of this non

00:06:51,259 --> 00:06:57,019
functional aspects too and we can test

00:06:53,809 --> 00:07:02,119
this aspect so we can increase the level

00:06:57,019 --> 00:07:04,819
of quality of our software so just a

00:07:02,119 --> 00:07:08,089
quick note before we go to the testing

00:07:04,819 --> 00:07:10,550
techniques how we can how can we

00:07:08,089 --> 00:07:12,589
integrate the QA on a project well this

00:07:10,550 --> 00:07:14,360
is responsibility of all actors on the

00:07:12,589 --> 00:07:17,779
project not only the developers not only

00:07:14,360 --> 00:07:19,610
the QA team but we all of them all of

00:07:17,779 --> 00:07:22,279
the participants of the project we must

00:07:19,610 --> 00:07:24,829
take care of the of the quality it's

00:07:22,279 --> 00:07:27,139
really important to imply the client

00:07:24,829 --> 00:07:29,989
because if we are working in one

00:07:27,139 --> 00:07:32,269
direction the direction that we as a

00:07:29,989 --> 00:07:34,369
team consider that is the appropriate

00:07:32,269 --> 00:07:36,649
for the project but the client the

00:07:34,369 --> 00:07:38,479
clients expectations are in other

00:07:36,649 --> 00:07:41,259
different direction we're going to have

00:07:38,479 --> 00:07:43,909
a problem so we have to imply the client

00:07:41,259 --> 00:07:45,740
when we are talking about the the

00:07:43,909 --> 00:07:51,349
quality because I mean we want to meet

00:07:45,740 --> 00:07:56,569
the clients expectations like this image

00:07:51,349 --> 00:07:58,939
I used this image because I want to to

00:07:56,569 --> 00:08:03,229
mention something we don't we should not

00:07:58,939 --> 00:08:06,369
left leave the test for the final we

00:08:03,229 --> 00:08:11,419
should be testing in all the different

00:08:06,369 --> 00:08:13,759
phases of the project because every

00:08:11,419 --> 00:08:15,769
change that we implement on the on the

00:08:13,759 --> 00:08:19,849
project it's going to have an impact and

00:08:15,769 --> 00:08:23,419
we we want to reduce the impact so um

00:08:19,849 --> 00:08:27,349
and also we want to avoid the look for

00:08:23,419 --> 00:08:29,629
whom to blame we don't want to fight

00:08:27,349 --> 00:08:31,459
with other people on the team just to

00:08:29,629 --> 00:08:32,449
tell now it's your fault that this is

00:08:31,459 --> 00:08:36,169
failing no okay

00:08:32,449 --> 00:08:37,969
let's apply a proper QA process so we

00:08:36,169 --> 00:08:40,670
don't have to blame anyone we just have

00:08:37,969 --> 00:08:42,980
to release a good project

00:08:40,670 --> 00:08:45,410
hopefully we can prevent something like

00:08:42,980 --> 00:08:49,340
this we don't want the developers to

00:08:45,410 --> 00:08:53,300
give a poison gift to sis admins so they

00:08:49,340 --> 00:08:55,610
just have their problem home life

00:08:53,300 --> 00:08:57,530
servers okay it works on my machine so

00:08:55,610 --> 00:08:59,990
it's not my fault no that's not correct

00:08:57,530 --> 00:09:02,270
we have to work together as a team to

00:08:59,990 --> 00:09:05,660
prevent this we don't want terror

00:09:02,270 --> 00:09:09,770
stories if possible so let's try to

00:09:05,660 --> 00:09:11,750
avoid it and that's it okay that's just

00:09:09,770 --> 00:09:13,670
a brief introduction now I'm going to

00:09:11,750 --> 00:09:15,980
start talking about real testing

00:09:13,670 --> 00:09:17,690
techniques that we can use and that we

00:09:15,980 --> 00:09:20,660
have been using on this project on well

00:09:17,690 --> 00:09:24,550
about this year so we can improve the

00:09:20,660 --> 00:09:24,550
quality of the of the software

00:09:30,010 --> 00:09:34,920
so the first technique and this is not

00:09:33,010 --> 00:09:38,530
something that can be automated or

00:09:34,920 --> 00:09:41,770
something that can be done just by the

00:09:38,530 --> 00:09:44,470
machine its peer reviews by peer reviews

00:09:41,770 --> 00:09:46,510
we can understand the concept of okay I

00:09:44,470 --> 00:09:49,630
am the developer I am part of the team

00:09:46,510 --> 00:09:52,260
and I want my mate to take a look to my

00:09:49,630 --> 00:09:55,510
solutions to my code so they can confirm

00:09:52,260 --> 00:09:58,750
that the solution is is fine for the

00:09:55,510 --> 00:10:05,410
problem this basically means that we are

00:09:58,750 --> 00:10:09,100
sharing knowledge we have some different

00:10:05,410 --> 00:10:11,710
persons on the team so if I get to a

00:10:09,100 --> 00:10:15,550
solution to a specific ticket I might

00:10:11,710 --> 00:10:17,830
have been I might have had a bad day or

00:10:15,550 --> 00:10:21,340
maybe I just forgot to take into account

00:10:17,830 --> 00:10:24,730
something so it's good that another folk

00:10:21,340 --> 00:10:27,430
from the team just take a look and tell

00:10:24,730 --> 00:10:31,660
me okay sake you have forgotten to fix

00:10:27,430 --> 00:10:34,150
this acceptance criteria point or maybe

00:10:31,660 --> 00:10:36,460
instead of having this big function you

00:10:34,150 --> 00:10:39,250
can use this couple of lines so we can

00:10:36,460 --> 00:10:42,990
improve the quality yes because four

00:10:39,250 --> 00:10:46,810
eyes are better than two eyes

00:10:42,990 --> 00:10:50,470
well this is basically a manual review

00:10:46,810 --> 00:10:52,930
but what we did is every every time that

00:10:50,470 --> 00:10:55,900
we created a pull request against the

00:10:52,930 --> 00:10:57,850
main branch we use it to have some

00:10:55,900 --> 00:11:01,120
testing instructions on the etiquette

00:10:57,850 --> 00:11:05,680
description and step one do this step to

00:11:01,120 --> 00:11:10,720
do this so we can just check others

00:11:05,680 --> 00:11:13,540
works others work so the the main

00:11:10,720 --> 00:11:15,940
positive another positive point here is

00:11:13,540 --> 00:11:18,460
that we are making all the team

00:11:15,940 --> 00:11:22,390
responsible for all the code so it's a

00:11:18,460 --> 00:11:25,050
great tool to collaborate openly and

00:11:22,390 --> 00:11:28,420
yeah we we want to

00:11:25,050 --> 00:11:32,230
we want to do that so everyone can enjoy

00:11:28,420 --> 00:11:34,389
the the project yeah this is not

00:11:32,230 --> 00:11:38,889
automated but this is great a great tool

00:11:34,389 --> 00:11:43,660
to to improve the quality so code

00:11:38,889 --> 00:11:46,410
linting is another small tool and well

00:11:43,660 --> 00:11:48,459
we want to avoid this I don't know who

00:11:46,410 --> 00:11:51,459
did that

00:11:48,459 --> 00:11:55,680
I mean why put the Red Square or and the

00:11:51,459 --> 00:12:00,250
black one why I am NOT okay with this so

00:11:55,680 --> 00:12:02,529
imagine this under code I bet that most

00:12:00,250 --> 00:12:06,310
of us that we are on this on this room

00:12:02,529 --> 00:12:10,120
we have been on some teams from some

00:12:06,310 --> 00:12:13,389
projects where everyone just coded one

00:12:10,120 --> 00:12:16,060
for example this man using tabs this

00:12:13,389 --> 00:12:18,730
woman is in spaces for spaces two spaces

00:12:16,060 --> 00:12:20,920
the curly braces and the same line the

00:12:18,730 --> 00:12:23,019
curly braces in the in the next line so

00:12:20,920 --> 00:12:28,209
we want to avoid that we want to have

00:12:23,019 --> 00:12:31,089
some some sense of the same code I mean

00:12:28,209 --> 00:12:33,639
if I'm going to open a code file that I

00:12:31,089 --> 00:12:37,569
have not been working on yet I want to

00:12:33,639 --> 00:12:39,610
know so what I'm going to explain I I

00:12:37,569 --> 00:12:42,699
want to have some expectations and those

00:12:39,610 --> 00:12:45,790
expectations on the format to be to be

00:12:42,699 --> 00:12:48,730
fine so basically code linting is a tool

00:12:45,790 --> 00:12:53,079
that will review all the all the code

00:12:48,730 --> 00:12:55,779
files and tell us ok this is not this is

00:12:53,079 --> 00:12:57,970
not a good standard because on this line

00:12:55,779 --> 00:13:01,149
you have to change this and in this line

00:12:57,970 --> 00:13:07,720
you have to change that with this tool

00:13:01,149 --> 00:13:09,730
you can get a cleaner code and well for

00:13:07,720 --> 00:13:11,290
example on this project that we have

00:13:09,730 --> 00:13:14,880
been working on we have been using node

00:13:11,290 --> 00:13:17,889
GS and react and we have been forcing

00:13:14,880 --> 00:13:19,240
every time that a developer creates a

00:13:17,889 --> 00:13:23,730
commit

00:13:19,240 --> 00:13:26,589
we had the linter executed automatically

00:13:23,730 --> 00:13:29,440
just to confirm that all the files on

00:13:26,589 --> 00:13:33,459
the project were respecting es6

00:13:29,440 --> 00:13:35,400
standards so at least we can say that

00:13:33,459 --> 00:13:38,790
our code is clean

00:13:35,400 --> 00:13:42,320
and on the eights it's really nice so

00:13:38,790 --> 00:13:45,300
that's our first automatic testing tool

00:13:42,320 --> 00:13:47,240
then I want to talk about unit testing I

00:13:45,300 --> 00:13:51,660
guess we all know about unit testing

00:13:47,240 --> 00:13:54,440
please rest your hands probably we all

00:13:51,660 --> 00:13:56,760
know about this if not you should start

00:13:54,440 --> 00:13:58,920
studying a bit about the unit testing

00:13:56,760 --> 00:14:00,930
anyway this is an intro to an

00:13:58,920 --> 00:14:05,130
introductory session so let's go for it

00:14:00,930 --> 00:14:08,250
so unit testing is I mean imagine your

00:14:05,130 --> 00:14:12,810
software the modern software is not just

00:14:08,250 --> 00:14:16,410
a monolithic piece of code we have some

00:14:12,810 --> 00:14:18,360
logical structure and we have our

00:14:16,410 --> 00:14:21,029
software / components

00:14:18,360 --> 00:14:23,040
so imagine one component will take

00:14:21,029 --> 00:14:26,310
responsibility of doing one specific

00:14:23,040 --> 00:14:30,480
task and we want to be able to test each

00:14:26,310 --> 00:14:32,670
component just with no interactions no

00:14:30,480 --> 00:14:35,550
external connections anything just the

00:14:32,670 --> 00:14:37,320
component itself to check that the the

00:14:35,550 --> 00:14:40,050
logic implemented on this component is

00:14:37,320 --> 00:14:43,820
it working properly so this is unit

00:14:40,050 --> 00:14:46,770
testing this is what unit testing is for

00:14:43,820 --> 00:14:48,870
so it's relevant I mean again I want to

00:14:46,770 --> 00:14:51,000
mention I want to repeat no connections

00:14:48,870 --> 00:14:54,260
no external connections no relationships

00:14:51,000 --> 00:14:56,490
with some other components on the system

00:14:54,260 --> 00:14:59,160
this is important because having

00:14:56,490 --> 00:15:02,220
external connections makes the this to

00:14:59,160 --> 00:15:04,020
not be a unit testing and to prevent

00:15:02,220 --> 00:15:07,890
imagine let's imagine that we have a

00:15:04,020 --> 00:15:09,990
component that has a function that needs

00:15:07,890 --> 00:15:12,360
to interact with a third party service

00:15:09,990 --> 00:15:15,839
an external URL that we want to consume

00:15:12,360 --> 00:15:21,089
to get some content or or whatever so to

00:15:15,839 --> 00:15:23,490
prevent this to be not to not be a unit

00:15:21,089 --> 00:15:28,950
testing we can use some tool called MOC

00:15:23,490 --> 00:15:33,330
MOC k and mocks are like a simulation

00:15:28,950 --> 00:15:34,850
okay we can define this mock imagine

00:15:33,330 --> 00:15:38,010
that we have a component that will

00:15:34,850 --> 00:15:40,050
consume a URL to confirm that we are

00:15:38,010 --> 00:15:43,050
logged in to an external service and

00:15:40,050 --> 00:15:46,230
it's returning a JSON object so with the

00:15:43,050 --> 00:15:47,690
mock technique we can just simulate the

00:15:46,230 --> 00:15:50,810
external connection and weird

00:15:47,690 --> 00:15:53,150
to return a JSON object that we have on

00:15:50,810 --> 00:15:56,510
our repository or on the testing utils

00:15:53,150 --> 00:15:58,610
directory for example so the component

00:15:56,510 --> 00:16:00,200
thinks that the connection the external

00:15:58,610 --> 00:16:03,650
connection was already done but in

00:16:00,200 --> 00:16:06,460
reality we have simulated the connection

00:16:03,650 --> 00:16:12,080
so we can actually test all the cases

00:16:06,460 --> 00:16:14,570
good responses but response X etc okay

00:16:12,080 --> 00:16:17,350
so this is another another point that I

00:16:14,570 --> 00:16:20,450
want to mention we want to be able to

00:16:17,350 --> 00:16:22,760
test both positive cases and negative

00:16:20,450 --> 00:16:26,000
cases this is really important if we

00:16:22,760 --> 00:16:28,100
have just a test for the positive case

00:16:26,000 --> 00:16:31,100
the happy path we're going to be able to

00:16:28,100 --> 00:16:32,660
confirm that okay when the input is into

00:16:31,100 --> 00:16:35,600
the intended the one that we are

00:16:32,660 --> 00:16:37,640
expecting then it it is working but what

00:16:35,600 --> 00:16:40,400
happens when the user does something

00:16:37,640 --> 00:16:43,700
like this the glass is not intended to

00:16:40,400 --> 00:16:47,030
be used like this and we want to be able

00:16:43,700 --> 00:16:50,360
to test that if the user does this the

00:16:47,030 --> 00:16:52,700
glass is still working so yes please

00:16:50,360 --> 00:16:56,060
let's use I'm going to to repeat this

00:16:52,700 --> 00:16:58,010
for sometimes on the under session but

00:16:56,060 --> 00:17:01,490
it's important that we cover both happy

00:16:58,010 --> 00:17:03,800
path and error cases this is really good

00:17:01,490 --> 00:17:05,630
to prevent regression bugs I am going to

00:17:03,800 --> 00:17:09,410
talk about regression bugs a bit later

00:17:05,630 --> 00:17:10,970
and just one more points related to unit

00:17:09,410 --> 00:17:13,760
testing please please please please

00:17:10,970 --> 00:17:16,250
please do not use unit testing to cover

00:17:13,760 --> 00:17:19,579
you see cases okay we are going to cover

00:17:16,250 --> 00:17:24,319
these cases full use these cases on

00:17:19,579 --> 00:17:27,439
end-to-end testing so that's it so now

00:17:24,319 --> 00:17:30,020
we have been able to test a specific

00:17:27,439 --> 00:17:32,750
component on our system now we are going

00:17:30,020 --> 00:17:35,540
to go one step further one step forward

00:17:32,750 --> 00:17:38,060
and we are going to talk about

00:17:35,540 --> 00:17:40,940
integration testing what happens if you

00:17:38,060 --> 00:17:43,280
have all of your components are working

00:17:40,940 --> 00:17:46,610
nice all that is all the tests are green

00:17:43,280 --> 00:17:50,240
everything is working fine but we have

00:17:46,610 --> 00:17:52,460
cookies and we have cream ok cookie the

00:17:50,240 --> 00:17:54,740
cookies are are just fine they are tasty

00:17:52,460 --> 00:17:57,320
they are they are good and the cream is

00:17:54,740 --> 00:18:00,100
also good but when we are going to

00:17:57,320 --> 00:18:03,609
integrate on this image you can get

00:18:00,100 --> 00:18:05,889
we don't have different cookies we'll

00:18:03,609 --> 00:18:07,359
have one cookie because this is cookie

00:18:05,889 --> 00:18:09,309
cream cookie cream cookie cream so we

00:18:07,359 --> 00:18:13,299
have a big cookie with a lot of layers

00:18:09,309 --> 00:18:15,070
of of cream and this is a failure on the

00:18:13,299 --> 00:18:17,229
integration testing which we were

00:18:15,070 --> 00:18:20,499
expecting cookie cream cookie and this

00:18:17,229 --> 00:18:22,960
is just one cookie one Oreo anyway I

00:18:20,499 --> 00:18:25,840
think you can understand how this works

00:18:22,960 --> 00:18:27,909
and integration testing is just to study

00:18:25,840 --> 00:18:30,220
and to confirm that the relationships

00:18:27,909 --> 00:18:32,710
between the different components and we

00:18:30,220 --> 00:18:34,419
are talking about a subset of components

00:18:32,710 --> 00:18:35,919
we don't need to implement an

00:18:34,419 --> 00:18:37,509
integration testing with all the

00:18:35,919 --> 00:18:41,440
components of the system because we have

00:18:37,509 --> 00:18:43,320
end-to-end testing later for this so we

00:18:41,440 --> 00:18:47,470
just want to confirm that the different

00:18:43,320 --> 00:18:50,889
the relationships under the relations is

00:18:47,470 --> 00:18:52,690
sorry the relationships between the

00:18:50,889 --> 00:18:56,529
different components on our system are

00:18:52,690 --> 00:18:58,899
working as expected think here of opie

00:18:56,529 --> 00:19:01,720
and specifically on dependency injection

00:18:58,899 --> 00:19:04,450
if we're going to inject an object that

00:19:01,720 --> 00:19:06,369
is a dependency on another one we want

00:19:04,450 --> 00:19:08,919
to be sure that the relationship between

00:19:06,369 --> 00:19:11,169
them is going to work properly so we are

00:19:08,919 --> 00:19:16,869
using integration testing for for this

00:19:11,169 --> 00:19:19,749
and yeah basically that's it this can

00:19:16,869 --> 00:19:21,700
help us to check implemented patterns if

00:19:19,749 --> 00:19:23,559
you are going to implement some Factory

00:19:21,700 --> 00:19:25,359
or whatever these patterns can be

00:19:23,559 --> 00:19:28,799
checked with the integration testing

00:19:25,359 --> 00:19:31,570
just try to avoid the big oreo cookie

00:19:28,799 --> 00:19:34,090
and now we're going to talk about and

00:19:31,570 --> 00:19:38,139
twin testing this is one step forward

00:19:34,090 --> 00:19:43,989
we're going to test here the full use

00:19:38,139 --> 00:19:47,559
case for a specific use case so any of

00:19:43,989 --> 00:19:53,440
you imagine how would end-to-end testing

00:19:47,559 --> 00:19:57,249
on a bomb would work so box money in

00:19:53,440 --> 00:20:01,389
this gift is checking if the bombs are

00:19:57,249 --> 00:20:03,309
working in an end-to-end using

00:20:01,389 --> 00:20:05,280
end-to-end testing the problem is that

00:20:03,309 --> 00:20:09,930
if the bombs work

00:20:05,280 --> 00:20:12,680
then we have no more testing that's the

00:20:09,930 --> 00:20:15,660
problem but I mean it's real end-to-end

00:20:12,680 --> 00:20:16,260
testing let's talk about a bit more

00:20:15,660 --> 00:20:19,290
about this

00:20:16,260 --> 00:20:22,320
so end-to-end testing is for is the best

00:20:19,290 --> 00:20:26,070
way to test full use cases imagine that

00:20:22,320 --> 00:20:28,530
we want to the typical archetypical test

00:20:26,070 --> 00:20:31,380
case to use the the end-to-end testing

00:20:28,530 --> 00:20:34,020
is the sign in or sign up and user comes

00:20:31,380 --> 00:20:36,150
to to our website and then the user

00:20:34,020 --> 00:20:38,790
wants to create an account so the user

00:20:36,150 --> 00:20:41,310
goes to slash sign in for example the

00:20:38,790 --> 00:20:43,820
user will will fill the username and

00:20:41,310 --> 00:20:46,590
password field will check whatever

00:20:43,820 --> 00:20:49,380
accept please accept our conditions

00:20:46,590 --> 00:20:52,500
whatever don't read this but effect it

00:20:49,380 --> 00:20:54,660
any any way and then click on on submit

00:20:52,500 --> 00:20:56,850
and then the account is created and weak

00:20:54,660 --> 00:20:58,950
when we want to check that the user is

00:20:56,850 --> 00:21:01,320
actually logging ok so this is the

00:20:58,950 --> 00:21:04,650
typical end-to-end testing but is a real

00:21:01,320 --> 00:21:07,560
use case just one thing in mind here we

00:21:04,650 --> 00:21:11,970
have to try to cover all the cases for

00:21:07,560 --> 00:21:14,970
all the roles on the application in this

00:21:11,970 --> 00:21:17,130
case we are not using mocks so if we are

00:21:14,970 --> 00:21:18,960
using third party integration we are

00:21:17,130 --> 00:21:21,990
going to use the real third party

00:21:18,960 --> 00:21:27,570
integration just think of and to

00:21:21,990 --> 00:21:30,180
intestine on like like if you can run

00:21:27,570 --> 00:21:32,310
the tests directly on production without

00:21:30,180 --> 00:21:35,460
fear ok because you are going to

00:21:32,310 --> 00:21:37,890
replicate exactly the same behavior that

00:21:35,460 --> 00:21:39,990
the user will have on our on our

00:21:37,890 --> 00:21:42,480
application and as I mentioned on the

00:21:39,990 --> 00:21:44,280
last point we are going to use test data

00:21:42,480 --> 00:21:47,550
so we should be able to generate some

00:21:44,280 --> 00:21:49,410
test data think of double generate for

00:21:47,550 --> 00:21:52,080
example then we are going to execute

00:21:49,410 --> 00:21:53,790
this end-to-end testing so we can cover

00:21:52,080 --> 00:21:56,340
all the cases and then we are going to

00:21:53,790 --> 00:21:58,500
remove the testing data and everything

00:21:56,340 --> 00:22:00,680
is fine so we can confirm that

00:21:58,500 --> 00:22:03,600
everything is working as expected or not

00:22:00,680 --> 00:22:05,760
again this is really important happy

00:22:03,600 --> 00:22:09,870
path under cases we want to be able to

00:22:05,760 --> 00:22:12,060
determine if not only if the the test

00:22:09,870 --> 00:22:14,040
case is working properly on the happy

00:22:12,060 --> 00:22:18,120
path also we want to check the errors

00:22:14,040 --> 00:22:21,240
because if imagine that we are closed

00:22:18,120 --> 00:22:23,519
to the release date and we just

00:22:21,240 --> 00:22:25,740
discovered that okay this ever case is

00:22:23,519 --> 00:22:28,019
not being handled properly so we have an

00:22:25,740 --> 00:22:29,820
error if we have an infant testing to

00:22:28,019 --> 00:22:33,000
cover this error case we probably will

00:22:29,820 --> 00:22:34,970
know about this earlier and probably

00:22:33,000 --> 00:22:39,240
this is going to be fix it at that point

00:22:34,970 --> 00:22:42,090
so regression bugs those are like worst

00:22:39,240 --> 00:22:44,100
nightmares to be honest we don't you

00:22:42,090 --> 00:22:47,519
want to avoid the regression boxes as

00:22:44,100 --> 00:22:50,100
much as much as you can because well our

00:22:47,519 --> 00:22:51,720
hydration back let me define it is just

00:22:50,100 --> 00:22:53,789
an error where imagined you have

00:22:51,720 --> 00:22:56,600
implemented something and this something

00:22:53,789 --> 00:23:00,559
is working properly we have green tests

00:22:56,600 --> 00:23:04,830
later on on the next release do you have

00:23:00,559 --> 00:23:06,870
this same functionality broken so this

00:23:04,830 --> 00:23:09,210
is a hurry symbol okay and you want to

00:23:06,870 --> 00:23:15,029
prevent them and to do to do so you want

00:23:09,210 --> 00:23:19,559
to to have proper end-to-end tests so

00:23:15,029 --> 00:23:22,830
that's it now let's change we have been

00:23:19,559 --> 00:23:24,870
talking about functional testing let's

00:23:22,830 --> 00:23:27,929
talk about now non-functional testing

00:23:24,870 --> 00:23:30,510
and first of all is performance you want

00:23:27,929 --> 00:23:32,309
your application not only to do the

00:23:30,510 --> 00:23:35,610
stuff that is designed to do but you

00:23:32,309 --> 00:23:38,309
want it to do fast you have to think

00:23:35,610 --> 00:23:43,370
only on when you search something on

00:23:38,309 --> 00:23:47,880
Google or or on your favorite searcher

00:23:43,370 --> 00:23:49,679
Jane if you introduce from search

00:23:47,880 --> 00:23:52,889
criteria and click on the first result

00:23:49,679 --> 00:23:55,110
if the first result takes more than five

00:23:52,889 --> 00:23:58,740
seconds to load we start to be nervous

00:23:55,110 --> 00:24:00,840
and we we think on go back and then try

00:23:58,740 --> 00:24:03,899
on the second page there are studies

00:24:00,840 --> 00:24:07,919
that demonstrate this and if I remember

00:24:03,899 --> 00:24:11,760
correctly five seconds the is the the

00:24:07,919 --> 00:24:14,549
world where our application is taking

00:24:11,760 --> 00:24:16,470
too much time to load to load so the

00:24:14,549 --> 00:24:19,049
simpler metric here is the page load

00:24:16,470 --> 00:24:22,070
time according to some different people

00:24:19,049 --> 00:24:26,860
that have been talking to over the years

00:24:22,070 --> 00:24:30,520
800 milliseconds is like the average

00:24:26,860 --> 00:24:34,720
that our homepage should take to load so

00:24:30,520 --> 00:24:37,630
the user gets does not get nervous again

00:24:34,720 --> 00:24:39,670
let's use real use cases here we are

00:24:37,630 --> 00:24:42,179
going to demonstrate later gatling which

00:24:39,670 --> 00:24:44,950
is a a tool that allows to implement

00:24:42,179 --> 00:24:48,400
they use cases like an end-to-end

00:24:44,950 --> 00:24:50,620
testing but it will collect some metrics

00:24:48,400 --> 00:24:54,610
about the page load times the resources

00:24:50,620 --> 00:25:00,360
and console and yeah the performance is

00:24:54,610 --> 00:25:03,510
the quote most relevant non-functional

00:25:00,360 --> 00:25:06,040
aspect of the software because it

00:25:03,510 --> 00:25:09,460
impacts directly on the user experience

00:25:06,040 --> 00:25:11,799
you can have okay the user to create an

00:25:09,460 --> 00:25:14,650
account only have to do three clicks for

00:25:11,799 --> 00:25:16,450
example but if you if your application

00:25:14,650 --> 00:25:18,850
is taking ten seconds between each click

00:25:16,450 --> 00:25:20,429
then the user is going to desperate so

00:25:18,850 --> 00:25:22,840
let's try to avoid this and let's try to

00:25:20,429 --> 00:25:26,100
confirm that the application has a

00:25:22,840 --> 00:25:26,100
proper performance

00:25:29,300 --> 00:25:35,420
and it's absolutely related to the

00:25:32,990 --> 00:25:38,750
performance we want to check scalability

00:25:35,420 --> 00:25:41,660
scalability is the ability of the system

00:25:38,750 --> 00:25:44,720
to maintain the performance level the

00:25:41,660 --> 00:25:46,520
speed level let's say as long as more

00:25:44,720 --> 00:25:49,220
users are coming more and more users are

00:25:46,520 --> 00:25:51,860
coming you can thing on scalability

00:25:49,220 --> 00:25:54,440
testing as load testing we're going to

00:25:51,860 --> 00:25:56,840
bomb the application with a lot of

00:25:54,440 --> 00:25:59,150
concurrent users just to check that the

00:25:56,840 --> 00:26:01,760
performance is going to be constant

00:25:59,150 --> 00:26:04,820
imagine a graphic is constant while the

00:26:01,760 --> 00:26:09,500
amount of user is going to increase that

00:26:04,820 --> 00:26:13,180
is the the ideal for this so well if you

00:26:09,500 --> 00:26:15,380
if we want to use this testing to help

00:26:13,180 --> 00:26:18,650
capacity planning I mean we are

00:26:15,380 --> 00:26:22,610
expecting imagine let me put an example

00:26:18,650 --> 00:26:25,340
thing of the webpage that sell tickets

00:26:22,610 --> 00:26:27,380
for light concerts okay this is

00:26:25,340 --> 00:26:29,210
something that happened to me let's say

00:26:27,380 --> 00:26:33,380
that Metallica is coming to town and

00:26:29,210 --> 00:26:36,770
they are going to sell tickets on on a

00:26:33,380 --> 00:26:39,650
webpage and the tickets are starting to

00:26:36,770 --> 00:26:42,250
be sold tomorrow at 10:00 well probably

00:26:39,650 --> 00:26:45,140
the page at thing is going to be down

00:26:42,250 --> 00:26:48,830
and yeah I suffered that by myself I

00:26:45,140 --> 00:26:51,350
only have one ticket so I have to go to

00:26:48,830 --> 00:26:53,390
the concert alone anyway this is a

00:26:51,350 --> 00:26:56,120
failure on capacity planning if we are

00:26:53,390 --> 00:26:58,520
expecting like 1 million of users unique

00:26:56,120 --> 00:27:01,160
users I am thinking of and one of them

00:26:58,520 --> 00:27:03,850
are going to be logging users

00:27:01,160 --> 00:27:07,880
authenticated users we need to add more

00:27:03,850 --> 00:27:10,640
more servers and more load balancers etc

00:27:07,880 --> 00:27:13,550
but first of all one once we have this

00:27:10,640 --> 00:27:15,920
infrastructure really we have to test

00:27:13,550 --> 00:27:18,730
this we want to generate 1 million of

00:27:15,920 --> 00:27:20,960
fake concurrent users just to check that

00:27:18,730 --> 00:27:22,880
everyone that wants a ticket for the

00:27:20,960 --> 00:27:25,100
concert will have the tickets for a

00:27:22,880 --> 00:27:29,780
concert or not depending on the number

00:27:25,100 --> 00:27:35,090
of tickets available another important

00:27:29,780 --> 00:27:38,330
use case for this tests are the service

00:27:35,090 --> 00:27:40,340
level agreement as a specially on cloud

00:27:38,330 --> 00:27:42,590
environments you know the cloud

00:27:40,340 --> 00:27:45,529
providers they tell you ok we

00:27:42,590 --> 00:27:47,809
are going to be a high level 99.99

00:27:45,529 --> 00:27:50,720
percent of the time so you are going to

00:27:47,809 --> 00:27:54,650
have only down time 8 minutes per year

00:27:50,720 --> 00:27:57,440
and you say ok but what if this is not

00:27:54,650 --> 00:28:00,230
true ok because the the provider is not

00:27:57,440 --> 00:28:02,029
going to to tell oh sorry we have been

00:28:00,230 --> 00:28:04,250
down for more than eight minutes a year

00:28:02,029 --> 00:28:06,169
so here's your money no they're not

00:28:04,250 --> 00:28:07,909
going to do that so you have to be able

00:28:06,169 --> 00:28:10,700
to demonstrate that this is happening or

00:28:07,909 --> 00:28:14,270
not so you can confirm that the SLA is

00:28:10,700 --> 00:28:15,890
is being addressed properly and we can

00:28:14,270 --> 00:28:18,110
use the scalability testing for this we

00:28:15,890 --> 00:28:21,250
can just try to bomb the application or

00:28:18,110 --> 00:28:25,340
the infrastructure and we can be able to

00:28:21,250 --> 00:28:27,950
well we can combine this with active

00:28:25,340 --> 00:28:33,649
monitoring to confirm that the SLA is

00:28:27,950 --> 00:28:36,320
going to to be respected yes security we

00:28:33,649 --> 00:28:40,760
have to talk about security of course I

00:28:36,320 --> 00:28:42,980
think any of us probably we don't want

00:28:40,760 --> 00:28:45,980
our applications to be hacked and have

00:28:42,980 --> 00:28:48,500
the database paste it on on pasting or

00:28:45,980 --> 00:28:56,360
some place like that so we want to avoid

00:28:48,500 --> 00:29:01,520
this and security is on on the on this

00:28:56,360 --> 00:29:04,100
new moment sorry on last month and last

00:29:01,520 --> 00:29:06,350
year Security's is being more important

00:29:04,100 --> 00:29:10,039
because every time that web site is

00:29:06,350 --> 00:29:12,230
hacked the reputation that they suffer

00:29:10,039 --> 00:29:15,710
is they suffer a big loss of reputation

00:29:12,230 --> 00:29:18,080
and well we're talking about millions of

00:29:15,710 --> 00:29:20,539
people affected on hard - for example

00:29:18,080 --> 00:29:24,110
you have been I don't know if you have

00:29:20,539 --> 00:29:26,210
been aware of the ccleaner hacking they

00:29:24,110 --> 00:29:28,429
have basically hacked the repository

00:29:26,210 --> 00:29:30,700
they have injected some malware on the

00:29:28,429 --> 00:29:31,820
proper tool and everyone that has

00:29:30,700 --> 00:29:34,130
CCleaner

00:29:31,820 --> 00:29:37,610
installed or updated from August to

00:29:34,130 --> 00:29:38,960
September has been infected so we're

00:29:37,610 --> 00:29:42,649
talking about millions and millions of

00:29:38,960 --> 00:29:46,399
people we want to prevent this talking

00:29:42,649 --> 00:29:49,399
now coming back to to our project we

00:29:46,399 --> 00:29:52,250
want to apply this security aspect this

00:29:49,399 --> 00:29:54,380
security testing as an aspect that the

00:29:52,250 --> 00:29:54,740
most typical thing that I have seen on

00:29:54,380 --> 00:29:56,390
different

00:29:54,740 --> 00:29:58,880
project sees we're going to develop

00:29:56,390 --> 00:30:01,520
everything and when when we are close to

00:29:58,880 --> 00:30:03,620
the release then the red team is coming

00:30:01,520 --> 00:30:05,990
they're going to try to do something

00:30:03,620 --> 00:30:08,720
testing they're going to give us a

00:30:05,990 --> 00:30:11,030
report and then security is done but

00:30:08,720 --> 00:30:13,790
this is not how it works we should be

00:30:11,030 --> 00:30:16,220
applying a pen testing before each

00:30:13,790 --> 00:30:18,410
release if we're going to release for

00:30:16,220 --> 00:30:21,320
example a new deployment to production

00:30:18,410 --> 00:30:24,020
each month we want the red team to do

00:30:21,320 --> 00:30:25,610
the pen testing on the new code every

00:30:24,020 --> 00:30:28,070
time I mean for example one week before

00:30:25,610 --> 00:30:32,750
or a couple of weeks before yes after

00:30:28,070 --> 00:30:35,600
the code freeze happens because if you

00:30:32,750 --> 00:30:39,530
out it just before you go live but you

00:30:35,600 --> 00:30:41,929
are you are keeping you're doing more

00:30:39,530 --> 00:30:43,730
more releases then this new code that is

00:30:41,929 --> 00:30:48,620
going to be deployed is not to be is not

00:30:43,730 --> 00:30:51,650
going to be tested and the idea the idea

00:30:48,620 --> 00:30:54,620
testing for this is combine code out it

00:30:51,650 --> 00:30:56,870
I mean the some expert both in security

00:30:54,620 --> 00:30:59,870
and in the language should review the

00:30:56,870 --> 00:31:04,160
code this is static review and then the

00:30:59,870 --> 00:31:07,760
red team should do a pen testing yeah

00:31:04,160 --> 00:31:12,860
the backups how many of you have tested

00:31:07,760 --> 00:31:16,490
backups good but everyone should have

00:31:12,860 --> 00:31:19,850
raised the hand think of a good lab I

00:31:16,490 --> 00:31:23,360
think they removed some directory on lab

00:31:19,850 --> 00:31:26,380
server by error and some metadata of

00:31:23,360 --> 00:31:29,929
some projects got lost and they try to

00:31:26,380 --> 00:31:32,660
restore up to five different backups but

00:31:29,929 --> 00:31:36,140
the backups were not working properly so

00:31:32,660 --> 00:31:39,370
they basically lost the data and this is

00:31:36,140 --> 00:31:43,340
something that we want to avoid so

00:31:39,370 --> 00:31:45,590
please check your backups if not you are

00:31:43,340 --> 00:31:47,450
going to have Schroedinger backups you

00:31:45,590 --> 00:31:50,840
don't know if the cut is alive or not

00:31:47,450 --> 00:31:53,150
until you open the backup so please

00:31:50,840 --> 00:31:56,750
properly test your your backups yes do a

00:31:53,150 --> 00:31:59,059
simulation imagine that someday okay

00:31:56,750 --> 00:32:01,610
production is lost let's try to restore

00:31:59,059 --> 00:32:04,050
the backups and just check if you can do

00:32:01,610 --> 00:32:06,620
it it's simple

00:32:04,050 --> 00:32:10,260
and you will you will want to do that

00:32:06,620 --> 00:32:12,090
and yes to to continue on and we are

00:32:10,260 --> 00:32:14,550
very close to the to the moment of the

00:32:12,090 --> 00:32:19,080
alive demos I want to mention also

00:32:14,550 --> 00:32:21,780
usability and accessibility usually we

00:32:19,080 --> 00:32:24,750
as developers tend to not have this into

00:32:21,780 --> 00:32:28,800
account but we require we should be

00:32:24,750 --> 00:32:31,740
using the services of UX experts just to

00:32:28,800 --> 00:32:35,580
determine the best way to interact with

00:32:31,740 --> 00:32:37,950
the users so if we're going to interact

00:32:35,580 --> 00:32:41,610
with the users we want the real users to

00:32:37,950 --> 00:32:43,380
test our application someone told me

00:32:41,610 --> 00:32:47,820
that the best option for this is like a

00:32:43,380 --> 00:32:51,060
beta release with some specific group of

00:32:47,820 --> 00:32:53,730
users and just let them play with

00:32:51,060 --> 00:32:56,580
application observe how they interact

00:32:53,730 --> 00:33:00,690
with application and of course well you

00:32:56,580 --> 00:33:03,720
can ask them but dr. house said everyone

00:33:00,690 --> 00:33:05,760
lies so the best approach for this is

00:33:03,720 --> 00:33:08,760
just to collect the data from the users

00:33:05,760 --> 00:33:10,770
and just see using this data how the

00:33:08,760 --> 00:33:13,440
users interact with the with application

00:33:10,770 --> 00:33:18,540
and accessibility is a part of the

00:33:13,440 --> 00:33:21,750
usability tests we want to help people

00:33:18,540 --> 00:33:24,810
with limitations to use our application

00:33:21,750 --> 00:33:29,310
there are some standards and if you are

00:33:24,810 --> 00:33:31,920
working with public public companies or

00:33:29,310 --> 00:33:34,710
public authorities you probably are

00:33:31,920 --> 00:33:36,450
going to be in an I mean you probably

00:33:34,710 --> 00:33:38,430
are going to sign a contract that says

00:33:36,450 --> 00:33:41,340
ok you have to respect the standard

00:33:38,430 --> 00:33:44,700
double-a or triple-a just so everyone

00:33:41,340 --> 00:33:48,050
can use the application properly to do

00:33:44,700 --> 00:33:52,050
to do this there are some good tools but

00:33:48,050 --> 00:33:54,930
well if you have a checklist and an HTML

00:33:52,050 --> 00:33:58,200
checker just to confirm that all the

00:33:54,930 --> 00:34:01,170
images tags has title and alt text and

00:33:58,200 --> 00:34:03,660
all the links have title etc etc that is

00:34:01,170 --> 00:34:07,080
a good first step but I recommend you to

00:34:03,660 --> 00:34:10,320
have a you a new extreme to confirm that

00:34:07,080 --> 00:34:12,500
this is going to be respected and

00:34:10,320 --> 00:34:15,179
yeah if you don't have enough with these

00:34:12,500 --> 00:34:17,099
testing techniques most of them can be

00:34:15,179 --> 00:34:19,679
automated and we are going to see some

00:34:17,099 --> 00:34:21,839
samples now we have some we have some

00:34:19,679 --> 00:34:23,550
other options here regression testing

00:34:21,839 --> 00:34:26,540
you can imagine this is to confirm that

00:34:23,550 --> 00:34:30,899
nothing has been broken senseless

00:34:26,540 --> 00:34:33,000
senseless deployment acceptance they saw

00:34:30,899 --> 00:34:34,919
that the set of tests that is going to

00:34:33,000 --> 00:34:37,589
be done before the release or should be

00:34:34,919 --> 00:34:41,030
done before the release a be testing is

00:34:37,589 --> 00:34:43,139
just some kind of testing that will

00:34:41,030 --> 00:34:47,879
confirm the differences between the

00:34:43,139 --> 00:34:52,859
different versions yeah basically that's

00:34:47,879 --> 00:34:57,210
it related to the testing techniques so

00:34:52,859 --> 00:35:01,650
let me now go to the to the automated

00:34:57,210 --> 00:35:05,849
testing tools I'm going to I'm going to

00:35:01,650 --> 00:35:09,660
demo three of them first of all is unit

00:35:05,849 --> 00:35:12,900
testing most of the modern languages

00:35:09,660 --> 00:35:15,000
have support for unit testing and you

00:35:12,900 --> 00:35:17,220
should be implementing all that

00:35:15,000 --> 00:35:19,470
everything should be covered I have not

00:35:17,220 --> 00:35:22,530
talked yet about test coverage concept

00:35:19,470 --> 00:35:24,810
but basically if you have a component

00:35:22,530 --> 00:35:27,359
imagine with five functions you have to

00:35:24,810 --> 00:35:29,040
have tests for all these for four

00:35:27,359 --> 00:35:32,700
functions or five functions or whatever

00:35:29,040 --> 00:35:34,290
but be smart just don't try to test

00:35:32,700 --> 00:35:36,720
everything in the unit test because

00:35:34,290 --> 00:35:44,339
you're going to have useless test cases

00:35:36,720 --> 00:35:49,470
okay so let's go for the demo okay this

00:35:44,339 --> 00:35:50,910
is here so imagine that we have a can

00:35:49,470 --> 00:35:54,630
you see this

00:35:50,910 --> 00:35:58,050
or should I change the color let's

00:35:54,630 --> 00:36:01,290
change the color so I can you can sorry

00:35:58,050 --> 00:36:04,700
for this I should have change the colors

00:36:01,290 --> 00:36:04,700
so let's use

00:36:09,920 --> 00:36:13,760
yeah yeah want one second

00:36:20,089 --> 00:36:31,249
anyway I'm going to increase better well

00:36:25,309 --> 00:36:35,089
if not I will try to to just yeah so

00:36:31,249 --> 00:36:42,170
well this is a library where you can see

00:36:35,089 --> 00:36:44,449
some different form validators Wow so ya

00:36:42,170 --> 00:36:48,439
know I thought that we had some a bit

00:36:44,449 --> 00:36:52,160
more of time so yeah for example this

00:36:48,439 --> 00:36:55,339
function is going to check if some value

00:36:52,160 --> 00:36:57,499
is numeric if it's not anything it's not

00:36:55,339 --> 00:37:01,549
a numeric value then we're going to

00:36:57,499 --> 00:37:02,719
share to show an error if not we're

00:37:01,549 --> 00:37:06,319
going to return false

00:37:02,719 --> 00:37:09,229
okay it's basically in this case email

00:37:06,319 --> 00:37:11,119
or mail if the value is not empty and

00:37:09,229 --> 00:37:13,759
it's not an email then we're going to

00:37:11,119 --> 00:37:19,849
show another message it's basically the

00:37:13,759 --> 00:37:25,789
same philosophy and this is the the code

00:37:19,849 --> 00:37:28,959
that will test this is a some unit

00:37:25,789 --> 00:37:31,699
testing implemented for this so

00:37:28,959 --> 00:37:34,880
independent in the upper part we have

00:37:31,699 --> 00:37:36,979
the check for is empty it's empty as a

00:37:34,880 --> 00:37:40,699
function that should return a boolean

00:37:36,979 --> 00:37:43,579
and we have some here some sample values

00:37:40,699 --> 00:37:46,309
so we're going to map the input to the

00:37:43,579 --> 00:37:48,890
expected output so if we receive a one

00:37:46,309 --> 00:37:51,589
or our a we're going to return false

00:37:48,890 --> 00:37:53,239
because it's not empty but if we're

00:37:51,589 --> 00:37:55,699
going to pass a empty string or

00:37:53,239 --> 00:38:00,859
undefined or null or false we're going

00:37:55,699 --> 00:38:03,229
to consider that the variable is empty

00:38:00,859 --> 00:38:06,859
and we and we are going to expect true

00:38:03,229 --> 00:38:10,219
from the is empty from the is empty

00:38:06,859 --> 00:38:13,579
function the same for example for

00:38:10,219 --> 00:38:16,939
numeric we have three different inputs a

00:38:13,579 --> 00:38:20,029
one with single quotes and an empty

00:38:16,939 --> 00:38:22,459
string so in in all cases we are going

00:38:20,029 --> 00:38:26,869
to expect false because we well this is

00:38:22,459 --> 00:38:31,009
basically a number even if it's on

00:38:26,869 --> 00:38:32,040
quotes and we we want to load the empty

00:38:31,009 --> 00:38:33,990
string

00:38:32,040 --> 00:38:37,200
but on the case we were sipping a we're

00:38:33,990 --> 00:38:39,920
going to show the diuretics the same for

00:38:37,200 --> 00:38:44,040
email we're going to map the different

00:38:39,920 --> 00:38:45,960
input that two first inputs are not real

00:38:44,040 --> 00:38:49,710
email addresses so we are going to

00:38:45,960 --> 00:38:52,980
expect the the error test text and on

00:38:49,710 --> 00:38:55,920
the second well the three or the third

00:38:52,980 --> 00:38:57,480
and fourth examples we're going to

00:38:55,920 --> 00:39:00,830
expect false because they are actually

00:38:57,480 --> 00:39:02,540
emails and you can imagine you can just

00:39:00,830 --> 00:39:09,600
[Music]

00:39:02,540 --> 00:39:11,820
execute the test we have some in tested

00:39:09,600 --> 00:39:14,610
implemented here you can imagine you can

00:39:11,820 --> 00:39:16,230
test basically whatever and this is the

00:39:14,610 --> 00:39:20,040
expected output everything is passing

00:39:16,230 --> 00:39:22,350
will have twelve different checks the

00:39:20,040 --> 00:39:25,680
philosophy is that we are expecting we

00:39:22,350 --> 00:39:27,720
were going to use some input happy path

00:39:25,680 --> 00:39:29,550
our network cases then we are going to

00:39:27,720 --> 00:39:31,560
map to the expected output and then if

00:39:29,550 --> 00:39:33,180
everything matches properly that means

00:39:31,560 --> 00:39:36,120
that everything works and we have all

00:39:33,180 --> 00:39:40,050
those green checks which is what we want

00:39:36,120 --> 00:39:41,880
and it's really simple in this case we

00:39:40,050 --> 00:39:45,180
have confirmed that our form validator

00:39:41,880 --> 00:39:50,190
is working now let me go to the

00:39:45,180 --> 00:39:57,950
Nightwatch to the network test we have a

00:39:50,190 --> 00:39:57,950
Drupal seven sorry for that okay

00:40:00,480 --> 00:40:06,230
local to active

00:40:17,780 --> 00:40:27,340
well while this is loading let me just

00:40:20,800 --> 00:40:27,340
show you the code of the network test

00:40:29,290 --> 00:40:34,030
so when a twitch test is really simple

00:40:31,690 --> 00:40:37,150
you're just going to export different

00:40:34,030 --> 00:40:41,200
functions and each each function is a

00:40:37,150 --> 00:40:43,990
test case and each file that contains

00:40:41,200 --> 00:40:46,240
these cases is at that sweet a test

00:40:43,990 --> 00:40:48,070
which is just a set oft of different

00:40:46,240 --> 00:40:52,320
cases you can see here the code

00:40:48,070 --> 00:40:55,890
this is absolutely simple network uses

00:40:52,320 --> 00:40:59,410
can use selenium as the engine to

00:40:55,890 --> 00:41:02,170
recreate the browser or use webdriver

00:40:59,410 --> 00:41:04,750
which basically this is a headless

00:41:02,170 --> 00:41:08,140
browser that we can interact with using

00:41:04,750 --> 00:41:10,360
this code and what we're going to do

00:41:08,140 --> 00:41:14,080
here is to check that the user can sign

00:41:10,360 --> 00:41:17,190
up on a form so we are going to open the

00:41:14,080 --> 00:41:22,060
browser then we're going to use to the

00:41:17,190 --> 00:41:25,180
slash to the home page then we're going

00:41:22,060 --> 00:41:28,570
to wait for the well these are CSS

00:41:25,180 --> 00:41:31,330
selectors so we once we are we have told

00:41:28,570 --> 00:41:33,430
the browser to go to this URL we want to

00:41:31,330 --> 00:41:37,000
tell the we want the browser to wait

00:41:33,430 --> 00:41:40,360
until the HTML is rendered and they in

00:41:37,000 --> 00:41:43,030
this specific case the ID block user

00:41:40,360 --> 00:41:45,340
login is present one day element is

00:41:43,030 --> 00:41:47,020
present we're going to wait 200

00:41:45,340 --> 00:41:51,910
milliseconds and then we're going to

00:41:47,020 --> 00:41:54,340
click on the on the link that is on this

00:41:51,910 --> 00:41:57,510
CSS selector this is basically the

00:41:54,340 --> 00:42:00,730
create a new account on on the Drupal

00:41:57,510 --> 00:42:03,670
login form then we're going to to wait

00:42:00,730 --> 00:42:06,550
for the user register form then we are

00:42:03,670 --> 00:42:08,590
going to set the value user name on the

00:42:06,550 --> 00:42:12,310
edit name well you can imagine that this

00:42:08,590 --> 00:42:14,530
is just telling programmatically ok the

00:42:12,310 --> 00:42:16,540
user is going to behave like this we're

00:42:14,530 --> 00:42:17,860
going to click here and then fill this

00:42:16,540 --> 00:42:20,280
value then click on the submit button

00:42:17,860 --> 00:42:22,710
and we want to expect the different

00:42:20,280 --> 00:42:24,070
sections of the page to be present

00:42:22,710 --> 00:42:28,380
that's it

00:42:24,070 --> 00:42:28,380
we don't have any other any other

00:42:30,339 --> 00:42:39,249
okay so time to use the plan B let's see

00:42:33,969 --> 00:42:41,140
how Night Watch works in a video so I'm

00:42:39,249 --> 00:42:43,539
going to execute on this on the right

00:42:41,140 --> 00:42:45,670
night watch and on the left you can see

00:42:43,539 --> 00:42:47,619
the browser is going to fill everything

00:42:45,670 --> 00:42:50,469
it's going a bit it's going to be a bit

00:42:47,619 --> 00:42:51,999
fast but you can see that every every

00:42:50,469 --> 00:42:54,160
test case is going to be executed

00:42:51,999 --> 00:42:57,309
automatically you're not doing anything

00:42:54,160 --> 00:43:00,069
I mean you can see the browser is go is

00:42:57,309 --> 00:43:01,449
executing fast faster or not for a

00:43:00,069 --> 00:43:05,229
person but it's going to check

00:43:01,449 --> 00:43:13,479
everything so just let me show this

00:43:05,229 --> 00:43:15,430
frame last frame of the video okay I

00:43:13,479 --> 00:43:18,069
want to show you this is the output of

00:43:15,430 --> 00:43:20,589
Night Watch on the on the right and you

00:43:18,069 --> 00:43:23,199
can see that every test case is running

00:43:20,589 --> 00:43:24,969
name of the test case and then the

00:43:23,199 --> 00:43:26,979
different asserts that we are going to

00:43:24,969 --> 00:43:29,709
wait I mean for example if you remember

00:43:26,979 --> 00:43:30,939
that wait for element blah so we're

00:43:29,709 --> 00:43:32,049
going to confirm that everything is

00:43:30,939 --> 00:43:35,109
working as expected because we

00:43:32,049 --> 00:43:38,019
everything using the CSS selectors is

00:43:35,109 --> 00:43:41,489
going to be displayed and the good news

00:43:38,019 --> 00:43:44,559
is that we can use this as part of the

00:43:41,489 --> 00:43:45,910
automatic testing tools I mean we have

00:43:44,559 --> 00:43:48,939
we have being able to see the browser

00:43:45,910 --> 00:43:51,699
but if you can execute this absolutely

00:43:48,939 --> 00:43:53,529
headless with no browser so you can

00:43:51,699 --> 00:43:58,539
integrate this with Jenkins with Travis

00:43:53,529 --> 00:44:00,640
and with other tools so it's been 45

00:43:58,539 --> 00:44:04,779
minutes of the talk I was thinking on

00:44:00,640 --> 00:44:08,559
presenting also gatling okay I can do a

00:44:04,779 --> 00:44:12,519
quick demo but I won't also give you the

00:44:08,559 --> 00:44:14,049
opportunity to to ask some questions so

00:44:12,519 --> 00:44:17,799
I'm going to present getting very very

00:44:14,049 --> 00:44:20,039
quickly in this case Gatling is again I

00:44:17,799 --> 00:44:24,849
should not have changed the background

00:44:20,039 --> 00:44:29,199
ok Gatling is writing on Scala

00:44:24,849 --> 00:44:32,019
it's basically Java but you can think of

00:44:29,199 --> 00:44:35,829
cuddling on the end-to-end testing is

00:44:32,019 --> 00:44:38,579
the same cutting is used to do

00:44:35,829 --> 00:44:42,640
performance testing using end to end

00:44:38,579 --> 00:44:43,930
cases so you are going to declare

00:44:42,640 --> 00:44:46,420
in this case is the class basic

00:44:43,930 --> 00:44:49,270
simulation this class is coming with the

00:44:46,420 --> 00:44:51,790
with the same tool okay this is the

00:44:49,270 --> 00:44:57,040
basic simulation so you are going to

00:44:51,790 --> 00:44:59,410
configure the HTTP a HTTP headers and

00:44:57,040 --> 00:45:02,140
the different options then you are going

00:44:59,410 --> 00:45:03,550
to declare a scenario and a scenario you

00:45:02,140 --> 00:45:09,100
are going to say okay we're going to

00:45:03,550 --> 00:45:11,920
execute a get a get call against slash

00:45:09,100 --> 00:45:14,650
the home page then we're going to pose

00:45:11,920 --> 00:45:18,700
for some milliseconds there win or

00:45:14,650 --> 00:45:20,590
seconds then we're going to get this URL

00:45:18,700 --> 00:45:25,230
so you can imagine you can simulate the

00:45:20,590 --> 00:45:30,090
navigation with this simple syntax and

00:45:25,230 --> 00:45:30,090
for example here at the bottom you have

00:45:31,980 --> 00:45:39,220
here you have how you can post a form

00:45:35,680 --> 00:45:41,590
you're going to tell him tell it okay

00:45:39,220 --> 00:45:43,690
we're going to post to slash computer's

00:45:41,590 --> 00:45:46,090
we're going to use the headers that we

00:45:43,690 --> 00:45:48,280
have defined at the beginning and this

00:45:46,090 --> 00:45:52,180
this is how you add foreign parameters

00:45:48,280 --> 00:45:57,550
name is beautiful computer introduced it

00:45:52,180 --> 00:46:01,030
is the date company's 37 etc another

00:45:57,550 --> 00:46:04,680
important thing here is we are posting a

00:46:01,030 --> 00:46:09,070
form so you have to add the content type

00:46:04,680 --> 00:46:14,710
application/x-www-form-urlencoded header

00:46:09,070 --> 00:46:17,610
in this case only on headers time so if

00:46:14,710 --> 00:46:17,610
you execute this

00:46:22,660 --> 00:46:26,400
one day basic simulation

00:46:29,430 --> 00:46:35,310
so this is one very quick this is the

00:46:31,290 --> 00:46:41,010
the output and basically it's telling us

00:46:35,310 --> 00:46:45,960
that it's executing the different okay

00:46:41,010 --> 00:46:51,500
so it looks like I can not connect so

00:46:45,960 --> 00:46:51,500
let's use the video

00:46:53,369 --> 00:46:58,229
so this is the this is the same it's all

00:46:55,769 --> 00:47:00,329
yeah 40 41 seconds

00:46:58,229 --> 00:47:05,369
once we select that test case that we

00:47:00,329 --> 00:47:07,950
want to execute it will run and the

00:47:05,369 --> 00:47:10,410
output it's that we are expecting is

00:47:07,950 --> 00:47:11,579
something like this global means the

00:47:10,410 --> 00:47:15,200
number of requests that we have been

00:47:11,579 --> 00:47:18,119
executing and then we have the other I

00:47:15,200 --> 00:47:21,390
mean every one of the individual

00:47:18,119 --> 00:47:24,119
requests that it's going to be execute

00:47:21,390 --> 00:47:26,039
what is really interesting here is the

00:47:24,119 --> 00:47:29,309
last part where we can see the summary

00:47:26,039 --> 00:47:32,579
and we have here on this part some

00:47:29,309 --> 00:47:35,369
status statistical information about how

00:47:32,579 --> 00:47:41,309
many times it took the maximum the

00:47:35,369 --> 00:47:45,239
minimum to contact the server so you can

00:47:41,309 --> 00:47:50,910
use some amount of different concurrent

00:47:45,239 --> 00:48:00,479
users so you can create your own your

00:47:50,910 --> 00:48:01,859
own performance testing suite okay well

00:48:00,479 --> 00:48:05,400
there are some other tools that you can

00:48:01,859 --> 00:48:08,130
use like Bihar g-meter burp suite for

00:48:05,400 --> 00:48:10,410
for security I have been checking about

00:48:08,130 --> 00:48:14,539
accessibility I have not used this tool

00:48:10,410 --> 00:48:17,719
but Cynthia says looks like this is a

00:48:14,539 --> 00:48:21,630
proper tool to confirm that you are

00:48:17,719 --> 00:48:24,839
applying the American Standard regarding

00:48:21,630 --> 00:48:27,660
the accessibility needs and well you

00:48:24,839 --> 00:48:30,420
will need some Orchestrator to run every

00:48:27,660 --> 00:48:33,239
everything on on your project you can

00:48:30,420 --> 00:48:35,249
choose your your CI favorite tool for

00:48:33,239 --> 00:48:38,609
example grid lab or Jenkins we were

00:48:35,249 --> 00:48:41,519
using Travis 4 for this so very quickly

00:48:38,609 --> 00:48:44,279
I'm going to finish now how how did we

00:48:41,519 --> 00:48:47,219
do this this on our last project this is

00:48:44,279 --> 00:48:48,839
our real experience what we did is every

00:48:47,219 --> 00:48:52,319
time that a developer creates a commit

00:48:48,839 --> 00:48:54,960
locally on the branch we first set the

00:48:52,319 --> 00:48:57,089
linter to be executed if the if the

00:48:54,960 --> 00:48:59,069
linter does not pass then you cannot

00:48:57,089 --> 00:49:00,299
commit then when you have all your

00:48:59,069 --> 00:49:01,799
comments on your branch and you are

00:49:00,299 --> 00:49:04,440
going to pass your branch to the server

00:49:01,799 --> 00:49:07,170
to the repository then we're going to

00:49:04,440 --> 00:49:09,839
execute the unit test if the test

00:49:07,170 --> 00:49:11,609
are not passing you cannot pass so once

00:49:09,839 --> 00:49:13,290
you have your your branch on the server

00:49:11,609 --> 00:49:15,630
and you work you have created or your

00:49:13,290 --> 00:49:17,520
pull request then Travis is going to

00:49:15,630 --> 00:49:19,200
execute both will insert the unit

00:49:17,520 --> 00:49:21,660
testing and the end-to-end testing with

00:49:19,200 --> 00:49:25,589
net watch and you can see here on the

00:49:21,660 --> 00:49:29,280
right side well we will of green because

00:49:25,589 --> 00:49:31,740
of that means all tests place it we have

00:49:29,280 --> 00:49:34,650
the net watch test the separated in four

00:49:31,740 --> 00:49:38,609
different batches so we can execute them

00:49:34,650 --> 00:49:43,200
in a parallel way and also we had branch

00:49:38,609 --> 00:49:45,839
protection enabled so for your code to

00:49:43,200 --> 00:49:47,819
go into the repository to be merged you

00:49:45,839 --> 00:49:50,099
require to be passing all tests on

00:49:47,819 --> 00:49:52,619
Travis and also you required a review

00:49:50,099 --> 00:49:56,490
from your from any other developer of

00:49:52,619 --> 00:49:58,410
the team yeah that helped us a lot to

00:49:56,490 --> 00:50:01,290
prevent regression bugs we had some

00:49:58,410 --> 00:50:02,970
problems because a couple of points with

00:50:01,290 --> 00:50:08,490
the heavy pressure you know of the

00:50:02,970 --> 00:50:11,849
day-to-day we were we were forced

00:50:08,490 --> 00:50:14,400
basically to merge code that wasn't was

00:50:11,849 --> 00:50:18,299
not passing the test and that gave us

00:50:14,400 --> 00:50:20,099
some headaches but what we did and at

00:50:18,299 --> 00:50:21,960
this point we're okay

00:50:20,099 --> 00:50:24,329
tomorrow I know that I have to reserve

00:50:21,960 --> 00:50:28,049
some a couple of hours to fix the tests

00:50:24,329 --> 00:50:30,000
and then have everything doing again but

00:50:28,049 --> 00:50:31,920
this is really great because we we have

00:50:30,000 --> 00:50:33,839
been suffering from the regression bugs

00:50:31,920 --> 00:50:36,930
until we started to use this properly

00:50:33,839 --> 00:50:40,160
and then we we were able to focus on

00:50:36,930 --> 00:50:42,809
create software with high quality

00:50:40,160 --> 00:50:44,790
instead of worrying about okay this is

00:50:42,809 --> 00:50:47,880
broken again this is not working

00:50:44,790 --> 00:50:51,990
properly etc and yes to finish on

00:50:47,880 --> 00:50:54,390
summary just please implement this kind

00:50:51,990 --> 00:50:56,430
of testing techniques on your software

00:50:54,390 --> 00:50:58,140
so you can be confident about your hub

00:50:56,430 --> 00:51:00,630
the high quality of your of your

00:50:58,140 --> 00:51:02,339
software use the automation testing I

00:51:00,630 --> 00:51:05,549
mean it's great to have a QA team that

00:51:02,339 --> 00:51:07,500
can review everything but if you can

00:51:05,549 --> 00:51:10,109
help them if you can give them support

00:51:07,500 --> 00:51:13,859
with this automated testing or even if

00:51:10,109 --> 00:51:16,020
the QA team can use this kind of tools

00:51:13,859 --> 00:51:18,500
that is great because that gives them

00:51:16,020 --> 00:51:21,829
the power to

00:51:18,500 --> 00:51:24,230
accelerate their work this has this is

00:51:21,829 --> 00:51:25,849
part of continuous integration so you

00:51:24,230 --> 00:51:28,670
need to implement continuous integration

00:51:25,849 --> 00:51:32,030
for this and remember to cover all the

00:51:28,670 --> 00:51:34,300
aspects of your non functional aspects

00:51:32,030 --> 00:51:37,970
of the server not only functionality so

00:51:34,300 --> 00:51:40,130
thank you for coming we have like 10

00:51:37,970 --> 00:51:42,859
minutes for questions a bit less than 10

00:51:40,130 --> 00:51:47,500
minutes so that's it if you have any

00:51:42,859 --> 00:51:47,500
question thank you

00:51:49,800 --> 00:51:52,999
[Applause]

00:51:54,740 --> 00:52:02,750
no questions yeah okay I think you have

00:51:59,790 --> 00:52:02,750
the microphone there

00:52:13,200 --> 00:52:18,720
so thanks for thought it was great

00:52:16,440 --> 00:52:21,329
I was wondering if there's any reason

00:52:18,720 --> 00:52:24,240
why you would recommend for example

00:52:21,329 --> 00:52:27,420
night words instead of be had yeah in

00:52:24,240 --> 00:52:31,829
this case we want a net watch because it

00:52:27,420 --> 00:52:34,230
may it fit our technologies better we

00:52:31,829 --> 00:52:36,450
started to using it it's simple

00:52:34,230 --> 00:52:39,960
you see it's simple to use and we

00:52:36,450 --> 00:52:42,809
decided to use the we had in fact is

00:52:39,960 --> 00:52:45,150
writing in PHP and in this case we were

00:52:42,809 --> 00:52:47,279
talking about a net watch net story have

00:52:45,150 --> 00:52:48,990
a script project so we just decided to

00:52:47,279 --> 00:52:52,049
continue with the Java Script arm well

00:52:48,990 --> 00:52:57,859
in summary it's been a really a really

00:52:52,049 --> 00:53:01,079
good fit for our project it allows us to

00:52:57,859 --> 00:53:06,319
reproduce the exact behavior of the of

00:53:01,079 --> 00:53:10,710
the user and yeah give us some advantage

00:53:06,319 --> 00:53:13,109
okay and for the for testing when you

00:53:10,710 --> 00:53:15,269
push the remote environment do you have

00:53:13,109 --> 00:53:16,829
like a separate database that is already

00:53:15,269 --> 00:53:17,069
prepared or done you repeat the question

00:53:16,829 --> 00:53:19,470
please

00:53:17,069 --> 00:53:23,220
so when your test when you are executing

00:53:19,470 --> 00:53:25,170
the test are they running against a copy

00:53:23,220 --> 00:53:27,960
of the database that you create when you

00:53:25,170 --> 00:53:32,609
deploy or in the actual database oh yeah

00:53:27,960 --> 00:53:36,059
in this case well our specific case we

00:53:32,609 --> 00:53:39,450
don't we didn't have a database as is we

00:53:36,059 --> 00:53:42,240
had some kind of servers third party

00:53:39,450 --> 00:53:44,970
service which was an identity management

00:53:42,240 --> 00:53:47,990
and we had some different environments

00:53:44,970 --> 00:53:51,329
so that tests were running against

00:53:47,990 --> 00:53:53,400
acceptance I guess but as I mentioned on

00:53:51,329 --> 00:53:55,769
the presentation this is nothing to

00:53:53,400 --> 00:53:57,599
worry about because you if this is well

00:53:55,769 --> 00:54:00,240
implemented you can create test data

00:53:57,599 --> 00:54:03,359
test against any environment and then

00:54:00,240 --> 00:54:04,950
remove the test data so yeah in our case

00:54:03,359 --> 00:54:07,650
we had a specific environment for

00:54:04,950 --> 00:54:10,380
testing but you can execute this out on

00:54:07,650 --> 00:54:14,420
life if you are brave enough okay thank

00:54:10,380 --> 00:54:14,420
you yeah thank you yeah

00:54:15,119 --> 00:54:19,200
thank you for your presentation thank

00:54:17,609 --> 00:54:22,229
you for coming I wanted to ask you what

00:54:19,200 --> 00:54:27,739
do you think about Towers well our

00:54:22,229 --> 00:54:32,069
esteros it's 2-2 Rob jmeter tests do

00:54:27,739 --> 00:54:34,380
something like that so about G meters

00:54:32,069 --> 00:54:39,660
what you want to assign the towers is

00:54:34,380 --> 00:54:40,969
the system to verb G meter tests and to

00:54:39,660 --> 00:54:43,979
keep them dry

00:54:40,969 --> 00:54:47,009
keep simple I just wanted to ask if you

00:54:43,979 --> 00:54:49,920
use the towers somewhere in your system

00:54:47,009 --> 00:54:53,160
no not really I have used jmeter

00:54:49,920 --> 00:54:57,029
but just ask is with no there you can

00:54:53,160 --> 00:55:00,180
check it yes the gate link and the

00:54:57,029 --> 00:55:02,519
Jamiat of tests in the same format yeah

00:55:00,180 --> 00:55:04,739
yeah mo based Foreman if you can give me

00:55:02,519 --> 00:55:07,859
the name I can take a note and I will

00:55:04,739 --> 00:55:10,339
take a look thank you so any other

00:55:07,859 --> 00:55:10,339
question please

00:55:15,000 --> 00:55:23,480
hi nice presentation mix we tried with

00:55:19,770 --> 00:55:26,970
jmeter but we didn't like it at the end

00:55:23,480 --> 00:55:29,790
we are using locust for performance

00:55:26,970 --> 00:55:33,060
testing this is the biggest concern of

00:55:29,790 --> 00:55:38,280
ours and locust is working fine with us

00:55:33,060 --> 00:55:40,890
for us but when we see issues it's hard

00:55:38,280 --> 00:55:42,690
to detect them where is the performance

00:55:40,890 --> 00:55:45,420
issue was the cause of it we are

00:55:42,690 --> 00:55:47,370
struggling with some caching things we

00:55:45,420 --> 00:55:50,310
are resetting cache a lot we don't know

00:55:47,370 --> 00:55:53,220
why and I'm curious about your

00:55:50,310 --> 00:55:55,410
experience with this you know yeah well

00:55:53,220 --> 00:56:00,150
with g-meter I must say that I don't

00:55:55,410 --> 00:56:01,800
like it because it's hard to to create

00:56:00,150 --> 00:56:04,620
the test cases because you have to

00:56:01,800 --> 00:56:06,810
interact directly with the server in the

00:56:04,620 --> 00:56:10,050
sense of do you have to define the HTTP

00:56:06,810 --> 00:56:11,940
calls directly I prefer net watch for

00:56:10,050 --> 00:56:15,120
the sorry got name for this because you

00:56:11,940 --> 00:56:17,220
can in in the same sense of and not

00:56:15,120 --> 00:56:20,340
watch you can defined your your use case

00:56:17,220 --> 00:56:24,780
these are real usage case and you can

00:56:20,340 --> 00:56:27,840
execute them how can we my experience

00:56:24,780 --> 00:56:31,550
related to how can I can we fix the

00:56:27,840 --> 00:56:34,140
problems that we find well this is

00:56:31,550 --> 00:56:37,590
depends on on any case but if we detect

00:56:34,140 --> 00:56:40,170
some problem on a specific URL or on a

00:56:37,590 --> 00:56:43,370
specific process we try to reproduce it

00:56:40,170 --> 00:56:47,550
locally for example or on the

00:56:43,370 --> 00:56:50,010
environment and if we we can detect a

00:56:47,550 --> 00:56:52,260
specific URL or the specific process

00:56:50,010 --> 00:56:55,200
that is causing the performance failure

00:56:52,260 --> 00:56:59,820
we have to use profiling there for

00:56:55,200 --> 00:57:02,580
example if we're talking about PHP a HP

00:56:59,820 --> 00:57:06,060
probe I think what's little then you can

00:57:02,580 --> 00:57:08,130
use this tool to debug and find which

00:57:06,060 --> 00:57:11,040
specific function is taking too much

00:57:08,130 --> 00:57:14,220
time to execute and of course another

00:57:11,040 --> 00:57:17,250
option that is complementary is the

00:57:14,220 --> 00:57:19,620
static review I mean if you have coded

00:57:17,250 --> 00:57:22,890
if you have implemented this part of the

00:57:19,620 --> 00:57:25,620
application maybe another fog on on the

00:57:22,890 --> 00:57:27,300
team can take a look and probably he or

00:57:25,620 --> 00:57:29,220
she will

00:57:27,300 --> 00:57:32,010
some improvements to your solution

00:57:29,220 --> 00:57:35,760
that's a possibility but basically

00:57:32,010 --> 00:57:37,800
that's how I face this kind of issues I

00:57:35,760 --> 00:57:40,470
don't know if this is what you expected

00:57:37,800 --> 00:57:44,880
yeah thank you so does anyone have

00:57:40,470 --> 00:57:46,400
another question yes no we have two more

00:57:44,880 --> 00:57:50,820
minutes

00:57:46,400 --> 00:57:54,150
well if not okay feel free to stop me in

00:57:50,820 --> 00:57:56,370
the hall and ask me whatever I can share

00:57:54,150 --> 00:57:58,800
a coffee a beer or whatever this is my

00:57:56,370 --> 00:58:03,060
my Twitter account at rabbit lair

00:57:58,800 --> 00:58:06,290
I feel free to ask anything yeah thank

00:58:03,060 --> 00:58:11,000
you for coming thank you for being so so

00:58:06,290 --> 00:58:18,329
nice audience yeah that's it Thanks

00:58:11,000 --> 00:58:18,329
[Applause]

00:58:19,099 --> 00:58:28,309
okay let me take yeah and all sorry I

00:58:22,859 --> 00:58:28,309
mean I had a pen here

00:59:12,970 --> 00:59:16,560

YouTube URL: https://www.youtube.com/watch?v=Yo3GIyvF7Bw


