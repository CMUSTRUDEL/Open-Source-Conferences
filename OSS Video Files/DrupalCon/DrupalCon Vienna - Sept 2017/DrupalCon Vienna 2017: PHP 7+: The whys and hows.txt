Title: DrupalCon Vienna 2017: PHP 7+: The whys and hows
Publication date: 2017-09-26
Playlist: DrupalCon Vienna - Sept 2017
Description: 
	PHP 7 comes with massive performance improvements, and with PHP 7.2 around the corner, it is time we update our code to be compatible with the modern, faster, and secure PHP 7.

This session will walk through the major changes and improvements in PHP 7, 7.1, and the currently finalized 7.2. This is not targeted for Drupal specifically, but there will be information on Drupal-specific changes as well, one of them being requiring a minimum PHP version project-wise and module-wise, with regular .info file and composer formats.

Generators for efficient data storage and retrieval
Scalar type hints for statically analyzable code
Strict typing
Modern curl and TLS features (ECC keys, HTTP/2, etc)
Null coalesce, spaceship operators
Anonymous classes
Better error handling with catchable parse errors, type errors, and new Throwable exception type
Userland CSPRNG
Libsodium in core
Expectations/assert
Removed and deprecated features
... and more
PHP 7 is a major step forward from 5.6, and the frequent releases of 7.1, and the new 7.2 which is currently in beta comes with a lot polishing for the language too.

This session is for everyone, including the beginners that we try to focus on how to make use of these new features, and why they are important & useful. PHP 7 has been around for a some time now, and some of the most used open source projects, such as PHPUnit now require PHP 7.0, while components of doctrine project require PHP 7.1.

That said, even though this session is a 25-minute session, we will try to squeeze as much as possible, with a few minutes for Q&A, and being open to ask questions during the session, we will try to open new possibilities, clean up the code, modernize, secure, and speed up your existing and new PHP projects.
Captions: 
	00:00:05,720 --> 00:00:12,210
okay thanks everyone for coming and

00:00:09,960 --> 00:00:13,860
apologies about like you know the

00:00:12,210 --> 00:00:18,810
problems and windows license and

00:00:13,860 --> 00:00:20,430
everything okay so this is P 87 the wise

00:00:18,810 --> 00:00:24,060
and the house

00:00:20,430 --> 00:00:27,060
this is well get a little bit technical

00:00:24,060 --> 00:00:29,880
but I'm trying to can I'm basically

00:00:27,060 --> 00:00:31,109
trying to sell at PHP 7-7 please try to

00:00:29,880 --> 00:00:35,489
buy it

00:00:31,109 --> 00:00:36,149
hello my name is is Cara Ratna I'm from

00:00:35,489 --> 00:00:44,030
Sri Lanka

00:00:36,149 --> 00:00:48,059
I work in mostly Drupal stuff and so

00:00:44,030 --> 00:00:49,500
coming to history PHP 5.6 was released

00:00:48,059 --> 00:00:52,770
back in 2006

00:00:49,500 --> 00:00:58,730
so next row faster probably kids back

00:00:52,770 --> 00:01:04,530
then 5.3 2009 12 and we have PHP 5.6

00:00:58,730 --> 00:01:06,390
release in 2014 and right now the PHP

00:01:04,530 --> 00:01:10,350
they don't really support new features

00:01:06,390 --> 00:01:13,760
so you're stuck with bhe 5.6 you get

00:01:10,350 --> 00:01:17,100
like security features for some time but

00:01:13,760 --> 00:01:20,400
not for free long so you have to move to

00:01:17,100 --> 00:01:24,330
be 87 it was released 2015 so that's two

00:01:20,400 --> 00:01:27,390
years already and we are having PHP

00:01:24,330 --> 00:01:29,130
seven point two 1/2 months so this

00:01:27,390 --> 00:01:32,220
presentation I will try to cover some of

00:01:29,130 --> 00:01:34,590
the features that PG 7.2 will have so

00:01:32,220 --> 00:01:36,270
when you go home you only know most of

00:01:34,590 --> 00:01:41,970
the things that pages seven point two

00:01:36,270 --> 00:01:45,240
will have so it's a pretty well the

00:01:41,970 --> 00:01:47,420
question is if it works with PHP 5 point

00:01:45,240 --> 00:01:50,280
6 or whatever the PHP version you have

00:01:47,420 --> 00:01:53,579
why do we really bothered to upgrade

00:01:50,280 --> 00:01:58,290
right words it makes money and the

00:01:53,579 --> 00:02:02,070
clients don't complain but see the thing

00:01:58,290 --> 00:02:05,310
with PHP is that it evolves really fast

00:02:02,070 --> 00:02:07,530
and new features come there are some

00:02:05,310 --> 00:02:10,080
security fixes and everything so you

00:02:07,530 --> 00:02:11,460
kind of have to move it PHP the new

00:02:10,080 --> 00:02:14,160
versions

00:02:11,460 --> 00:02:16,380
and the other one is this is from

00:02:14,160 --> 00:02:18,360
WordPress I know this is like Drupal con

00:02:16,380 --> 00:02:21,900
but we use the word price because it's

00:02:18,360 --> 00:02:25,950
like terrible code if you can like the

00:02:21,900 --> 00:02:28,650
third line and fourth line that's like

00:02:25,950 --> 00:02:32,190
the entire test site it took 13 minutes

00:02:28,650 --> 00:02:34,830
run and be in beta 7 it took just under

00:02:32,190 --> 00:02:36,570
six minutes it sits on the same hardware

00:02:34,830 --> 00:02:39,320
the same amount of RAM so the same disk

00:02:36,570 --> 00:02:43,490
and everything but it can't like the

00:02:39,320 --> 00:02:45,510
test time in half so if you use PHP 7

00:02:43,490 --> 00:02:48,570
there's a very good chance that your

00:02:45,510 --> 00:02:52,620
code will run twice as fast or use twice

00:02:48,570 --> 00:02:55,380
as less memory of course it depends on

00:02:52,620 --> 00:02:57,150
like each application but I use

00:02:55,380 --> 00:02:59,790
WordPress because that's like terrible

00:02:57,150 --> 00:03:02,400
code then if you can get boost from this

00:02:59,790 --> 00:03:06,680
one Drupal is like a no-brainer you can

00:03:02,400 --> 00:03:09,930
always get some try good advantages and

00:03:06,680 --> 00:03:14,040
the next one is like this is Drupal core

00:03:09,930 --> 00:03:17,640
again but we kind of yeah always in like

00:03:14,040 --> 00:03:20,730
PHP community we just had level 5 point

00:03:17,640 --> 00:03:23,430
5 released about couple weeks ago it

00:03:20,730 --> 00:03:25,890
requires p37 and we have seen plenty for

00:03:23,430 --> 00:03:28,620
coming up probably this year probably

00:03:25,890 --> 00:03:33,270
next year it also requires me to zone

00:03:28,620 --> 00:03:35,880
and doctrine is an ORM it's like you

00:03:33,270 --> 00:03:38,790
manage database introduced and

00:03:35,880 --> 00:03:44,370
everything we did it guys it requires PT

00:03:38,790 --> 00:03:47,130
7.1 and we have PHP unit its popular PHP

00:03:44,370 --> 00:03:52,100
testing framework we used it in Drupal 8

00:03:47,130 --> 00:03:54,750
and it also requires PHP 7 now 7.0 and

00:03:52,100 --> 00:03:57,510
I'd like to encourage you that if you

00:03:54,750 --> 00:04:00,510
like maintain any open source projects

00:03:57,510 --> 00:04:03,630
just try co-op 87 because it's so much

00:04:00,510 --> 00:04:09,870
easier and we'll see how you can

00:04:03,630 --> 00:04:13,920
actually upgrade you go to PT 7 so if

00:04:09,870 --> 00:04:18,390
you maintain any Drupal modules to your

00:04:13,920 --> 00:04:20,880
left is how you would use in Drupal 7 in

00:04:18,390 --> 00:04:23,710
your module routine profile just put PHP

00:04:20,880 --> 00:04:25,930
echo 7.0 and

00:04:23,710 --> 00:04:28,689
true police say if you are running PG

00:04:25,930 --> 00:04:31,689
5.6 you probably say hey now you need

00:04:28,689 --> 00:04:33,759
PHP 7 so you don't have to check that

00:04:31,689 --> 00:04:35,889
like the version you just put it in the

00:04:33,759 --> 00:04:39,819
module a module info file and then it

00:04:35,889 --> 00:04:43,180
should go this is for composer packages

00:04:39,819 --> 00:04:46,930
I compare is composer it's a PHP package

00:04:43,180 --> 00:04:48,909
manager you can require that if you want

00:04:46,930 --> 00:04:49,599
to install this package you have to use

00:04:48,909 --> 00:04:52,389
p37

00:04:49,599 --> 00:04:54,159
and no questions to you composer will

00:04:52,389 --> 00:04:59,159
make sure that the user has paid you

00:04:54,159 --> 00:04:59,159
seven so we don't care about WordPress

00:05:00,750 --> 00:05:09,490
now for Drupal 7 sorry p27 these are the

00:05:06,789 --> 00:05:12,370
sample if you are not using PHP 5.6

00:05:09,490 --> 00:05:13,569
right now these are some of the pages

00:05:12,370 --> 00:05:16,960
then you are that you are already

00:05:13,569 --> 00:05:21,039
missing so if you are here for the last

00:05:16,960 --> 00:05:25,389
session Michelle was contributing to

00:05:21,039 --> 00:05:28,599
Symphony Symphony and most of the

00:05:25,389 --> 00:05:31,689
packages they use namespaces so it can

00:05:28,599 --> 00:05:36,250
with PHP 5.3 and you saw it came like

00:05:31,689 --> 00:05:39,189
ears okay yes all right and closures and

00:05:36,250 --> 00:05:40,539
there are some several features that I'm

00:05:39,189 --> 00:05:42,490
not going to talk about this ones

00:05:40,539 --> 00:05:47,500
because it's like 30 minutes and I visit

00:05:42,490 --> 00:05:49,389
with project like 15 minutes and these

00:05:47,500 --> 00:05:53,979
are pretty spread for straightforward

00:05:49,389 --> 00:05:56,050
features try to like understand them I

00:05:53,979 --> 00:06:01,870
would personally go for generators and

00:05:56,050 --> 00:06:03,639
password hashing the last two and then

00:06:01,870 --> 00:06:04,930
shorts in short errors in - you're

00:06:03,639 --> 00:06:08,589
probably now this thing is instead of

00:06:04,930 --> 00:06:10,539
saying like array with like crackers who

00:06:08,589 --> 00:06:16,240
just put square brackets and it's just

00:06:10,539 --> 00:06:19,469
an array so this is PHP 7 I like doggy

00:06:16,240 --> 00:06:26,680
memes it looks good with presentation

00:06:19,469 --> 00:06:31,000
okay this is the summary PHP is seven

00:06:26,680 --> 00:06:33,490
now has parameter types so basically

00:06:31,000 --> 00:06:34,680
when you say when you define a function

00:06:33,490 --> 00:06:38,639
and

00:06:34,680 --> 00:06:42,000
say you need an argument you can with 57

00:06:38,639 --> 00:06:45,380
you can say to PHP compiled that we

00:06:42,000 --> 00:06:48,690
absolutely need a string or an array or

00:06:45,380 --> 00:06:52,710
some integer so most of the scalar types

00:06:48,690 --> 00:06:55,440
boolean x' we have floats we have used

00:06:52,710 --> 00:06:58,830
to have like all class names and

00:06:55,440 --> 00:07:02,460
everything and the second one is it's

00:06:58,830 --> 00:07:06,210
actually pretty cool one with Petri five

00:07:02,460 --> 00:07:08,580
point six if you include a file with say

00:07:06,210 --> 00:07:10,020
some syntax error you will get like

00:07:08,580 --> 00:07:13,259
fatal error right it's like in the white

00:07:10,020 --> 00:07:15,720
screen we used to have like whites white

00:07:13,259 --> 00:07:17,400
screen of dead like funny names like

00:07:15,720 --> 00:07:21,900
that

00:07:17,400 --> 00:07:25,680
five points sorry 87 you just wrap that

00:07:21,900 --> 00:07:28,680
call with some try to catch fries and

00:07:25,680 --> 00:07:30,479
you can actually cut that security

00:07:28,680 --> 00:07:32,310
improvements we will give out that and a

00:07:30,479 --> 00:07:37,259
synchronous well we will go through

00:07:32,310 --> 00:07:39,210
everything okay so this is probably not

00:07:37,259 --> 00:07:42,750
really interesting one but this is most

00:07:39,210 --> 00:07:47,310
likely the best change we made in Drupal

00:07:42,750 --> 00:07:51,080
7 is a PHP censor abstract syntax tree

00:07:47,310 --> 00:07:56,820
is when PHP wants to compile something

00:07:51,080 --> 00:08:00,240
pit bills the ast so it decouples things

00:07:56,820 --> 00:08:03,570
from like the interpreter and the way

00:08:00,240 --> 00:08:05,820
the syntax is handled so it's easier to

00:08:03,570 --> 00:08:08,039
make a new new changes in the syntax

00:08:05,820 --> 00:08:11,550
that's why we have so many new changes

00:08:08,039 --> 00:08:12,150
coming because PG 7.0 was released in

00:08:11,550 --> 00:08:13,830
00:08:12,150 --> 00:08:16,280
and we already have two more versions

00:08:13,830 --> 00:08:18,870
that's one of the reason why we have

00:08:16,280 --> 00:08:20,820
faster releases so if you update your

00:08:18,870 --> 00:08:24,330
code today

00:08:20,820 --> 00:08:27,180
you can kind of like keep up with the

00:08:24,330 --> 00:08:30,930
changes and nowadays these changes

00:08:27,180 --> 00:08:33,779
actually come really fast so try to

00:08:30,930 --> 00:08:36,270
catch up and you can there are just a

00:08:33,779 --> 00:08:38,909
few changes you have to make to make

00:08:36,270 --> 00:08:43,740
them seven-point-three compatible 7.4 so

00:08:38,909 --> 00:08:45,720
any version that comes after ok this is

00:08:43,740 --> 00:08:47,320
just an example of one of the pictures

00:08:45,720 --> 00:08:50,500
that you have

00:08:47,320 --> 00:08:55,630
null wise I hope you can see the screen

00:08:50,500 --> 00:08:59,199
right so earlier if you are using

00:08:55,630 --> 00:09:04,000
anything like condition you have to use

00:08:59,199 --> 00:09:07,930
like ESET cold to see from the like the

00:09:04,000 --> 00:09:10,269
way variable set but the one in the

00:09:07,930 --> 00:09:13,570
bottom is way to seven syntax you just

00:09:10,269 --> 00:09:16,510
put two question marks and then set the

00:09:13,570 --> 00:09:18,490
default value so if you want to get

00:09:16,510 --> 00:09:21,040
variable and if you want to check that

00:09:18,490 --> 00:09:24,459
if it's already available it's like it's

00:09:21,040 --> 00:09:26,350
all we said you just put to question my

00:09:24,459 --> 00:09:29,470
question marks and then set the default

00:09:26,350 --> 00:09:32,860
value if the variable is available PHP

00:09:29,470 --> 00:09:34,990
will put the variable to the left and if

00:09:32,860 --> 00:09:40,360
it's not available I will use the

00:09:34,990 --> 00:09:44,199
variable to the right so after this part

00:09:40,360 --> 00:09:47,920
we will try to break the new features to

00:09:44,199 --> 00:09:50,949
signal segments the first one is again

00:09:47,920 --> 00:09:53,560
Michelle last time site that PG seven

00:09:50,949 --> 00:09:58,839
point one has cool new features with

00:09:53,560 --> 00:10:02,550
pipes so PHP is becoming more or less

00:09:58,839 --> 00:10:07,120
like Java nowadays because we try to

00:10:02,550 --> 00:10:09,610
enforce strict types if we say if you

00:10:07,120 --> 00:10:14,260
are going to return a string by good we

00:10:09,610 --> 00:10:18,750
have to return a string so the first one

00:10:14,260 --> 00:10:21,699
is scalar type int scalar variables are

00:10:18,750 --> 00:10:25,300
variables that are not like part of

00:10:21,699 --> 00:10:30,100
class but strings integers boolean

00:10:25,300 --> 00:10:32,380
double and well you can see from the

00:10:30,100 --> 00:10:36,970
example this is just like a really dumb

00:10:32,380 --> 00:10:41,819
function see the int from like the

00:10:36,970 --> 00:10:41,819
highlighted in blue so for this function

00:10:42,089 --> 00:10:47,800
when you call this function you always

00:10:44,470 --> 00:10:50,470
have to pass an integer if you try to

00:10:47,800 --> 00:10:54,370
call it as increase volume with bull PHA

00:10:50,470 --> 00:10:55,000
will throw an error with PHP 5.5 or five

00:10:54,370 --> 00:10:58,810
and six

00:10:55,000 --> 00:11:01,330
five explosion you had to check that the

00:10:58,810 --> 00:11:03,700
variable is actually an integer like

00:11:01,330 --> 00:11:06,750
it's number or any like function at all

00:11:03,700 --> 00:11:09,340
you have which p27

00:11:06,750 --> 00:11:11,560
you we can reduce most of the

00:11:09,340 --> 00:11:13,450
boilerplate code you just put into and

00:11:11,560 --> 00:11:17,200
PHP will take care to validate the

00:11:13,450 --> 00:11:20,890
variable type and part of the exceptions

00:11:17,200 --> 00:11:23,320
I have some sites coming up for that you

00:11:20,890 --> 00:11:25,090
can catch them so if you don't catch

00:11:23,320 --> 00:11:27,820
them it this would be like a fatal error

00:11:25,090 --> 00:11:31,570
you will see like white screen but you

00:11:27,820 --> 00:11:33,820
can actually try catch them so not too

00:11:31,570 --> 00:11:37,750
much worried about and then we have

00:11:33,820 --> 00:11:41,710
written types it's like when you can't

00:11:37,750 --> 00:11:43,630
get score without this integer there's

00:11:41,710 --> 00:11:47,620
no guarantee that it will always return

00:11:43,630 --> 00:11:49,360
an integer so which PHP seven there's

00:11:47,620 --> 00:11:51,220
new syntax that you can enforce that

00:11:49,360 --> 00:11:54,550
this function will return an integer

00:11:51,220 --> 00:11:58,110
this is like a contract so if you put

00:11:54,550 --> 00:12:02,260
integer you have to return an integer so

00:11:58,110 --> 00:12:05,680
in this case we return just 110 but if

00:12:02,260 --> 00:12:07,690
you try to return say not available or

00:12:05,680 --> 00:12:11,350
false or anything that's not an integer

00:12:07,690 --> 00:12:15,640
you will get an error the reason this is

00:12:11,350 --> 00:12:19,860
good is you don't have to write specific

00:12:15,640 --> 00:12:24,520
tests because this is like a test itself

00:12:19,860 --> 00:12:26,470
when you call this one thing is whoever

00:12:24,520 --> 00:12:29,860
is calling they know that you will

00:12:26,470 --> 00:12:32,380
definitely get an integer and you can

00:12:29,860 --> 00:12:36,130
also enforce this one if you use like in

00:12:32,380 --> 00:12:37,960
a class Oh like every child class that

00:12:36,130 --> 00:12:40,390
explains the method they have to return

00:12:37,960 --> 00:12:45,660
an integer so it's easier to build like

00:12:40,390 --> 00:12:49,720
interfaces so if you have like say

00:12:45,660 --> 00:12:51,580
something that others can extend you can

00:12:49,720 --> 00:12:55,180
make sure that they will always return

00:12:51,580 --> 00:12:57,820
an integer and if they don't you can

00:12:55,180 --> 00:12:59,680
easily see the function it will itself

00:12:57,820 --> 00:13:02,140
will say this function is suppose

00:12:59,680 --> 00:13:05,580
written an integer but you returned this

00:13:02,140 --> 00:13:09,279
type string or mouth or something so

00:13:05,580 --> 00:13:15,980
it's really easy to debug

00:13:09,279 --> 00:13:18,860
now with 7.1 now by the way check the

00:13:15,980 --> 00:13:21,680
title this one in scalar type ins if

00:13:18,860 --> 00:13:25,610
there is no specific Phe version that

00:13:21,680 --> 00:13:28,220
came with Phe 7.0 so like this one it

00:13:25,610 --> 00:13:33,110
came at 7.1 so try to pay attention to

00:13:28,220 --> 00:13:37,670
the title as well this one is like get

00:13:33,110 --> 00:13:41,269
score with get score with int besides

00:13:37,670 --> 00:13:43,279
that we definitely return an integer but

00:13:41,269 --> 00:13:45,709
this one we say we will never return

00:13:43,279 --> 00:13:52,360
anything void is like we don't written

00:13:45,709 --> 00:13:56,600
anything so I have put some notes there

00:13:52,360 --> 00:13:59,209
you can't return anything other than an

00:13:56,600 --> 00:14:04,550
integer sorry you cannot return anything

00:13:59,209 --> 00:14:08,209
at all but peach with 7.1 also has an

00:14:04,550 --> 00:14:12,440
audible return type so in this case we

00:14:08,209 --> 00:14:15,170
allow integers and null but you always

00:14:12,440 --> 00:14:19,880
have to return something it's 110 like

00:14:15,170 --> 00:14:21,529
it's Ranger you return now there's no

00:14:19,880 --> 00:14:25,250
problems here but if you try to return

00:14:21,529 --> 00:14:27,610
the string string or plot boolean

00:14:25,250 --> 00:14:31,459
anything else you will get an error and

00:14:27,610 --> 00:14:33,170
again this works with methods as well

00:14:31,459 --> 00:14:39,140
like class methods as well not just

00:14:33,170 --> 00:14:42,620
functions this when you might want to

00:14:39,140 --> 00:14:46,160
mark that return type is nullable it

00:14:42,620 --> 00:14:48,529
nullable as in it can be null you just

00:14:46,160 --> 00:14:51,050
put like a question mark in front of the

00:14:48,529 --> 00:14:54,320
scalar type you can use int o class

00:14:51,050 --> 00:14:58,279
names as well class names as in if you

00:14:54,320 --> 00:15:00,199
have like STD class or anything that any

00:14:58,279 --> 00:15:03,620
objector from any class you can just put

00:15:00,199 --> 00:15:06,589
a question mark so you will return an

00:15:03,620 --> 00:15:12,399
integer sorry of any variable of the

00:15:06,589 --> 00:15:17,779
type or nothing at all it's similar to

00:15:12,399 --> 00:15:21,570
function arguments as well so in this

00:15:17,779 --> 00:15:26,050
case see the one in red color

00:15:21,570 --> 00:15:29,500
now usually we have like default values

00:15:26,050 --> 00:15:31,840
that like a function increase volume

00:15:29,500 --> 00:15:35,800
increment equal null or some default

00:15:31,840 --> 00:15:38,640
value but if you don't give a default

00:15:35,800 --> 00:15:43,150
value like this it will always be

00:15:38,640 --> 00:15:45,130
integer now yeah you can see that the

00:15:43,150 --> 00:15:47,080
second example you explicitly have the

00:15:45,130 --> 00:15:53,140
plus now if you don't pass null it will

00:15:47,080 --> 00:15:55,450
still throw an error iterable is

00:15:53,140 --> 00:16:00,280
something anything that you can use in

00:15:55,450 --> 00:16:03,100
4h now usually when we call voyage it's

00:16:00,280 --> 00:16:05,890
usually an error right but there are

00:16:03,100 --> 00:16:10,180
some new types traversable that and

00:16:05,890 --> 00:16:13,720
generators that you can travels like you

00:16:10,180 --> 00:16:17,440
can take one value this 4-h is wrong

00:16:13,720 --> 00:16:19,750
don't follow that you can just take a

00:16:17,440 --> 00:16:23,970
variable and then iterate through each

00:16:19,750 --> 00:16:27,220
variable each key of these values so

00:16:23,970 --> 00:16:31,030
earlier you have to check that it's an

00:16:27,220 --> 00:16:33,640
array but technically arrays are not the

00:16:31,030 --> 00:16:38,860
only ones that you can iterate so this

00:16:33,640 --> 00:16:42,220
interval type came with PG 7.1 and 7.2

00:16:38,860 --> 00:16:44,170
it's not released yet but with 7.2 you

00:16:42,220 --> 00:16:49,300
can make sure that every variable you

00:16:44,170 --> 00:16:52,720
pass is an object not it doesn't has to

00:16:49,300 --> 00:16:59,920
be STD class it has to be just any

00:16:52,720 --> 00:17:02,920
object from any class so exceptions in

00:16:59,920 --> 00:17:04,930
the early examples if you try to wire it

00:17:02,920 --> 00:17:07,810
violate any of these contracts I say

00:17:04,930 --> 00:17:11,560
this I contracts because if you decline

00:17:07,810 --> 00:17:14,079
declare that this function takes an

00:17:11,560 --> 00:17:17,800
integer you have to do that if you don't

00:17:14,079 --> 00:17:21,550
you will get exceptions not sure us if

00:17:17,800 --> 00:17:24,240
you don't catch an exception well you

00:17:21,550 --> 00:17:27,100
actually have some error but exceptions

00:17:24,240 --> 00:17:29,270
PHP or any programming languages way of

00:17:27,100 --> 00:17:33,890
saying things are not happening the

00:17:29,270 --> 00:17:38,030
they are meant to be so which PG five

00:17:33,890 --> 00:17:39,710
point six the exceptions we had like

00:17:38,030 --> 00:17:41,600
really sucked because we had like three

00:17:39,710 --> 00:17:45,080
or four exceptions and you have to cover

00:17:41,600 --> 00:17:47,750
everything but with this one a PT seven

00:17:45,080 --> 00:17:52,910
we now have interference called

00:17:47,750 --> 00:17:56,960
throwable so every exception is part of

00:17:52,910 --> 00:18:00,200
like child class of trouble so if you

00:17:56,960 --> 00:18:01,670
try to catch a throwable it means almost

00:18:00,200 --> 00:18:09,890
every error you can catch almost

00:18:01,670 --> 00:18:12,530
everything right one in the last one

00:18:09,890 --> 00:18:15,350
pass error and type error the type

00:18:12,530 --> 00:18:18,050
errors occurred when when you violate

00:18:15,350 --> 00:18:21,620
the contract like if you have a function

00:18:18,050 --> 00:18:23,480
that says it should throw it return an

00:18:21,620 --> 00:18:26,900
integer and if it doesn't return an

00:18:23,480 --> 00:18:28,760
integer that's a type error if you say a

00:18:26,900 --> 00:18:31,070
function should take an integer and if

00:18:28,760 --> 00:18:33,980
you try to pass a string or boolean

00:18:31,070 --> 00:18:37,400
that's a type error so you can catch

00:18:33,980 --> 00:18:39,980
them with type error parse error is well

00:18:37,400 --> 00:18:42,770
basically syntax errors if you have a

00:18:39,980 --> 00:18:45,410
function with some invalid PHP pH we

00:18:42,770 --> 00:18:48,400
throw an exception of type parse error

00:18:45,410 --> 00:18:53,630
not fatal error so you can easily like

00:18:48,400 --> 00:18:56,740
catch them this is just don't worry bird

00:18:53,630 --> 00:18:56,740
this is like a new hierarchy

00:18:57,380 --> 00:19:02,930
the exceptions to your left is the ones

00:19:00,320 --> 00:19:05,180
that PHP itself would throw you can see

00:19:02,930 --> 00:19:08,690
the same ones pass error and type error

00:19:05,180 --> 00:19:14,180
and to your right is some of the

00:19:08,690 --> 00:19:16,070
functions that you can throw now when

00:19:14,180 --> 00:19:19,400
you want to make your code like really

00:19:16,070 --> 00:19:22,400
easy to read if the code is actually a

00:19:19,400 --> 00:19:24,490
runtime exception it means there are

00:19:22,400 --> 00:19:29,270
something going south with the runtime

00:19:24,490 --> 00:19:32,360
just pass a runtime exception but you

00:19:29,270 --> 00:19:36,110
can say where I'm going this try to pass

00:19:32,360 --> 00:19:37,940
the most logical exception there are

00:19:36,110 --> 00:19:42,110
multiple exceptions you can check them

00:19:37,940 --> 00:19:47,120
on php.net this is like 30 minutes

00:19:42,110 --> 00:19:52,730
I didn't include everything again this

00:19:47,120 --> 00:19:57,019
is about exceptions with PHP 7.1 you can

00:19:52,730 --> 00:20:02,450
catch multiple exceptions okay right

00:19:57,019 --> 00:20:06,200
it's not get it spelling as well now

00:20:02,450 --> 00:20:08,809
which PG 7.1 if you have like catch

00:20:06,200 --> 00:20:10,519
calls like from the line three you have

00:20:08,809 --> 00:20:13,580
you can say like there's a catch phrase

00:20:10,519 --> 00:20:15,950
so you're trying to catch any exception

00:20:13,580 --> 00:20:18,380
but if you do the same thing for all

00:20:15,950 --> 00:20:21,880
exceptions you can try to catch

00:20:18,380 --> 00:20:25,070
everything and execute them at once so

00:20:21,880 --> 00:20:27,740
in this case we try to execute this

00:20:25,070 --> 00:20:29,809
function something nasty and if there's

00:20:27,740 --> 00:20:32,029
an exception of type PDO exception or

00:20:29,809 --> 00:20:38,149
full exception it's not written there

00:20:32,029 --> 00:20:39,950
PDO exception PHP will execute the part

00:20:38,149 --> 00:20:43,159
in the middle for both of these

00:20:39,950 --> 00:20:44,960
exceptions you can go with like ten

00:20:43,159 --> 00:20:46,610
exceptions but don't really do that

00:20:44,960 --> 00:20:52,340
because it makes you a coward really

00:20:46,610 --> 00:20:58,490
hard to read okay so that's with the

00:20:52,340 --> 00:21:02,240
exceptions this part is it can get kind

00:20:58,490 --> 00:21:06,169
of technical because with Drupal we now

00:21:02,240 --> 00:21:07,659
to be honest Drupal community we really

00:21:06,169 --> 00:21:10,519
suck at object-oriented programming

00:21:07,659 --> 00:21:12,230
because with petrie 5.2 we had like

00:21:10,519 --> 00:21:14,929
everything was a function and page we

00:21:12,230 --> 00:21:17,659
ate now we have like terms of classes

00:21:14,929 --> 00:21:22,309
and not everyone's happy we even have

00:21:17,659 --> 00:21:24,590
like four starting but these are the

00:21:22,309 --> 00:21:26,539
just improvements you can use if you use

00:21:24,590 --> 00:21:30,710
object-oriented programming you can use

00:21:26,539 --> 00:21:35,269
some of these improvements first one is

00:21:30,710 --> 00:21:38,059
Animus classes now I need honest answer

00:21:35,269 --> 00:21:43,639
who here is writing test unit test

00:21:38,059 --> 00:21:46,059
integration tests anything okay that's

00:21:43,639 --> 00:21:46,059
really sad

00:21:47,730 --> 00:21:52,660
okay

00:21:49,860 --> 00:21:55,980
well you should write tests and if you

00:21:52,660 --> 00:21:55,980
don't you should feel bad about yourself

00:21:58,620 --> 00:22:05,200
okay against our the way to make sure

00:22:03,280 --> 00:22:07,210
that your code runs the way it's

00:22:05,200 --> 00:22:10,390
supposed to be without testing them

00:22:07,210 --> 00:22:13,270
manually it's like it takes like tons of

00:22:10,390 --> 00:22:15,250
time if you want to like go to page box

00:22:13,270 --> 00:22:18,280
on button and see if the output is the

00:22:15,250 --> 00:22:20,290
same you can just code that and brought

00:22:18,280 --> 00:22:22,510
it and run it at once like in the first

00:22:20,290 --> 00:22:25,510
few slides so you so like a screenshot

00:22:22,510 --> 00:22:28,360
from WordPress even WordPress however

00:22:25,510 --> 00:22:31,420
like unit tests I'm putting WordPress to

00:22:28,360 --> 00:22:35,500
like the least level they even have unit

00:22:31,420 --> 00:22:38,110
tests so you should do with unit tests

00:22:35,500 --> 00:22:40,870
there is one concept that we trade like

00:22:38,110 --> 00:22:42,520
a mokau it's like something that behaves

00:22:40,870 --> 00:22:45,850
like the class but it's not the class

00:22:42,520 --> 00:22:48,460
itself so animals classes help you to

00:22:45,850 --> 00:22:52,690
quickly create a class that works like

00:22:48,460 --> 00:22:55,780
it so you can see from the example for

00:22:52,690 --> 00:22:59,530
new class it can extend existing classes

00:22:55,780 --> 00:23:01,270
and implement interfaces they can

00:22:59,530 --> 00:23:05,080
already exist or they could be like any

00:23:01,270 --> 00:23:08,290
most classes as well so you can quickly

00:23:05,080 --> 00:23:11,620
create new classes but I have never seen

00:23:08,290 --> 00:23:14,110
like any use case outside tests so if

00:23:11,620 --> 00:23:21,040
you don't use tests this slight isn't

00:23:14,110 --> 00:23:26,020
really for you trance constants for

00:23:21,040 --> 00:23:29,530
classes we we have these constants right

00:23:26,020 --> 00:23:32,320
you can never change them and they are

00:23:29,530 --> 00:23:34,740
really easy because the class contains

00:23:32,320 --> 00:23:37,900
like all the constants and everything

00:23:34,740 --> 00:23:39,730
but sometimes there are constants that

00:23:37,900 --> 00:23:42,070
we don't really want to expose to

00:23:39,730 --> 00:23:44,280
outside people it's like if you use a

00:23:42,070 --> 00:23:49,270
constant within your clones

00:23:44,280 --> 00:23:52,510
you can now be paid p 7.1 we can say

00:23:49,270 --> 00:23:54,540
this constant is private and private

00:23:52,510 --> 00:23:56,970
means only your class can access

00:23:54,540 --> 00:23:59,850
and we also have protected methods and

00:23:56,970 --> 00:24:02,580
public is like the default so well we

00:23:59,850 --> 00:24:04,919
usually don't put public so if you want

00:24:02,580 --> 00:24:07,530
to make like constant only accessible to

00:24:04,919 --> 00:24:09,840
your class use private if you want to

00:24:07,530 --> 00:24:12,570
make constant that's accessible to your

00:24:09,840 --> 00:24:16,020
class or any classes extending it you

00:24:12,570 --> 00:24:18,330
can use protected so it's similar to the

00:24:16,020 --> 00:24:21,299
same way you will use class properties

00:24:18,330 --> 00:24:26,790
and class methods so it's like kind of

00:24:21,299 --> 00:24:29,580
consistent with that with PG 7.2 it's

00:24:26,790 --> 00:24:33,660
not released yet but you can probably

00:24:29,580 --> 00:24:36,840
see the difference this class 4 has a

00:24:33,660 --> 00:24:40,470
method called set ID and it requires an

00:24:36,840 --> 00:24:46,799
integer but we have another class called

00:24:40,470 --> 00:24:48,870
bar it also extends for but without PHP

00:24:46,799 --> 00:24:52,410
7.2 if you do this you will get an error

00:24:48,870 --> 00:24:55,770
because these methods they are not

00:24:52,410 --> 00:25:01,530
really compatible like set ID is in ID

00:24:55,770 --> 00:25:04,530
but in bar it's not in Tydeus just ID so

00:25:01,530 --> 00:25:09,330
with PHP 7.2 you can just remove this

00:25:04,530 --> 00:25:11,870
interior and use any class there so it

00:25:09,330 --> 00:25:14,280
makes it easier to extend classes and

00:25:11,870 --> 00:25:18,270
kind of violate the contract you have

00:25:14,280 --> 00:25:23,760
with the base class and the security I

00:25:18,270 --> 00:25:26,669
like this part now in with Drupal we had

00:25:23,760 --> 00:25:30,240
function called Drupal random bytes it's

00:25:26,669 --> 00:25:33,600
like like 30 lines of code it tries to

00:25:30,240 --> 00:25:35,790
see if open SSL is available and if it's

00:25:33,600 --> 00:25:39,299
available it tries to get some really

00:25:35,790 --> 00:25:42,090
random numbers with this one you can

00:25:39,299 --> 00:25:45,630
easily take random int and it's

00:25:42,090 --> 00:25:48,919
guaranteed to be like really random now

00:25:45,630 --> 00:25:51,240
page we already has like a ran function

00:25:48,919 --> 00:25:54,030
fit size random but it's not really

00:25:51,240 --> 00:25:56,940
random because if you try try like a

00:25:54,030 --> 00:26:00,480
million rand calls it kind of trying to

00:25:56,940 --> 00:26:03,270
be biased towards something but random

00:26:00,480 --> 00:26:07,870
int is more or less guaranteed to be

00:26:03,270 --> 00:26:09,970
secure and then we

00:26:07,870 --> 00:26:13,540
like credible function called an

00:26:09,970 --> 00:26:16,420
serialize we shouldn't be using it but

00:26:13,540 --> 00:26:21,270
people use it anyway so PHP 7 now has a

00:26:16,420 --> 00:26:24,490
feature to disable loading classes now

00:26:21,270 --> 00:26:27,880
interior lines you can throw any string

00:26:24,490 --> 00:26:31,000
and if it's validates pH we will create

00:26:27,880 --> 00:26:33,940
new classes using that data but it's

00:26:31,000 --> 00:26:36,870
kind of dangerous because now if you try

00:26:33,940 --> 00:26:39,970
to instantiate say a class that's

00:26:36,870 --> 00:26:43,540
destroying something it will execute

00:26:39,970 --> 00:26:46,210
anyway so with this one you can say on

00:26:43,540 --> 00:26:48,310
zero rise function that no no we don't

00:26:46,210 --> 00:26:53,170
really need any classes there so it will

00:26:48,310 --> 00:26:57,370
never try to instantiate any classes ok

00:26:53,170 --> 00:27:00,880
this is like terrible for we have MySQL

00:26:57,370 --> 00:27:03,700
Extension gone MySQL is not PDO mysql is

00:27:00,880 --> 00:27:05,590
the one that you like when like few

00:27:03,700 --> 00:27:08,200
years ago we used to have like MySQL and

00:27:05,590 --> 00:27:08,740
ESCO connect an array of functions they

00:27:08,200 --> 00:27:10,750
are gone

00:27:08,740 --> 00:27:15,520
like not deprecated they are really gone

00:27:10,750 --> 00:27:17,410
and we have M crypt is a class sorry

00:27:15,520 --> 00:27:20,470
extension that you use to encrypt files

00:27:17,410 --> 00:27:23,110
and numbers and everything it wasn't

00:27:20,470 --> 00:27:25,900
really maintained for a few years so we

00:27:23,110 --> 00:27:30,100
throw that out not not I did but someone

00:27:25,900 --> 00:27:32,920
else rate Eirik is it's also a know all

00:27:30,100 --> 00:27:35,890
the one we have replaced it perl regular

00:27:32,920 --> 00:27:38,620
expressions and there are two functions

00:27:35,890 --> 00:27:40,750
I don't think you have ever used them so

00:27:38,620 --> 00:27:44,470
they are gone but you actually have some

00:27:40,750 --> 00:27:50,950
replacements as well duplications they

00:27:44,470 --> 00:27:55,570
are mostly peaches 7.2 so with Drupal 7

00:27:50,950 --> 00:27:59,130
we had some count the third one some

00:27:55,570 --> 00:28:01,810
count goes but there nobody's gone so

00:27:59,130 --> 00:28:06,100
well tried you don't use them because

00:28:01,810 --> 00:28:07,600
for everything if you try to access a

00:28:06,100 --> 00:28:12,190
variable without the dollar sign that

00:28:07,600 --> 00:28:14,110
basically means which we used to try and

00:28:12,190 --> 00:28:17,680
see if there's a variable with the same

00:28:14,110 --> 00:28:19,160
name but it's seven point to it we throw

00:28:17,680 --> 00:28:22,640
an error because it's

00:28:19,160 --> 00:28:25,550
anyway so it might test for an error but

00:28:22,640 --> 00:28:29,450
all our Dean's used to be one way to

00:28:25,550 --> 00:28:33,950
load classes made necessary but we have

00:28:29,450 --> 00:28:35,960
a spill or tortoise composure but most

00:28:33,950 --> 00:28:39,350
of these functions are like really old

00:28:35,960 --> 00:28:45,290
then we should feel bad about throwing

00:28:39,350 --> 00:28:47,630
them up and we have two more sorry this

00:28:45,290 --> 00:28:49,070
is called uniform variables index is

00:28:47,630 --> 00:28:51,140
this actually for Drupal people this is

00:28:49,070 --> 00:28:55,850
one of the places that we had most

00:28:51,140 --> 00:28:59,570
errors when you try to answer something

00:28:55,850 --> 00:29:02,750
from a variable you can say that it goes

00:28:59,570 --> 00:29:05,600
like deep inside we take the variable

00:29:02,750 --> 00:29:13,220
from foo and then go inside bar and then

00:29:05,600 --> 00:29:14,380
try to take buzz now before this uniform

00:29:13,220 --> 00:29:18,080
variable syntax

00:29:14,380 --> 00:29:21,050
PHP would in tried in to try to get the

00:29:18,080 --> 00:29:23,990
variable from bar and the key of bars

00:29:21,050 --> 00:29:26,390
the second one and the third one but

00:29:23,990 --> 00:29:30,560
with pages 7 it will try to first strike

00:29:26,390 --> 00:29:33,650
a 4 and then get the bar variable inside

00:29:30,560 --> 00:29:36,650
and then you can see there is where this

00:29:33,650 --> 00:29:40,400
is going it's always from left to right

00:29:36,650 --> 00:29:42,710
so page you will interpret the whatever

00:29:40,400 --> 00:29:48,530
the variable is to your left and then

00:29:42,710 --> 00:29:51,680
you to try to continue like this this

00:29:48,530 --> 00:29:55,430
one is if you if you don't use any like

00:29:51,680 --> 00:29:58,580
PHP we'd come online this justin this

00:29:55,430 --> 00:30:03,140
wouldn't make any sense but if you use

00:29:58,580 --> 00:30:06,290
like trash or Drupal console or composer

00:30:03,140 --> 00:30:08,540
they're like CLI tools so now when you

00:30:06,290 --> 00:30:12,560
want to like cancel something we would

00:30:08,540 --> 00:30:18,440
just press control C right with this one

00:30:12,560 --> 00:30:23,920
you can try to catch them now sorry the

00:30:18,440 --> 00:30:28,610
one you're in in red is that cold takes

00:30:23,920 --> 00:30:31,640
well before this feature we had to tell

00:30:28,610 --> 00:30:32,700
P PHP that for every second see if

00:30:31,640 --> 00:30:35,190
there's any input from

00:30:32,700 --> 00:30:40,379
user and if there's one just please tell

00:30:35,190 --> 00:30:41,789
us its p8 with seven sorry 7.1 we have

00:30:40,379 --> 00:30:45,269
this feature called a synchronous

00:30:41,789 --> 00:30:47,519
linking signals so we just tell PHP that

00:30:45,269 --> 00:30:47,850
if there's signal just tell us just tell

00:30:47,519 --> 00:30:50,519
me

00:30:47,850 --> 00:30:52,830
but we don't tell them when to check

00:30:50,519 --> 00:30:55,080
them so they don't check every second

00:30:52,830 --> 00:30:59,429
but if there's an input it will just let

00:30:55,080 --> 00:31:01,049
us know it it actually gets like really

00:30:59,429 --> 00:31:02,609
cool if you use any CLI tool so you can

00:31:01,049 --> 00:31:08,070
actually see like quite a lot of

00:31:02,609 --> 00:31:10,440
performance changes okay

00:31:08,070 --> 00:31:13,440
dunker is apparently how you say thanks

00:31:10,440 --> 00:31:18,450
in German you probably know then the

00:31:13,440 --> 00:31:26,309
next one is any questions do you have

00:31:18,450 --> 00:31:29,749
any if you have any questions okay we

00:31:26,309 --> 00:31:29,749
don't have any questions that's

00:31:35,990 --> 00:31:42,620
he just asked have I tried upgrading in

00:31:38,840 --> 00:31:46,280
Drupal site Drupal 7 is actually in 7.56

00:31:42,620 --> 00:31:48,860
is 100% compatible with 287 so if we

00:31:46,280 --> 00:31:51,140
have like a Drupal site just update to

00:31:48,860 --> 00:31:53,540
be 85 seven point five six and it should

00:31:51,140 --> 00:31:56,920
work and Drupal 8 is already compatible

00:31:53,540 --> 00:31:59,810
it used to be like some long time ago

00:31:56,920 --> 00:32:02,480
but don't try with 7.2 there are some

00:31:59,810 --> 00:32:05,710
problems with 7.2 like a few warnings

00:32:02,480 --> 00:32:09,140
but it should work pretty good and

00:32:05,710 --> 00:32:14,150
WordPress please don't use WordPress but

00:32:09,140 --> 00:32:18,740
if you do use WordPress finally 4.9

00:32:14,150 --> 00:32:26,730
should work well with 7.2 so any other

00:32:18,740 --> 00:32:31,970
questions sorry

00:32:26,730 --> 00:32:40,590
I think some FTP server not really sure

00:32:31,970 --> 00:32:41,879
ok ok no questions ok and oh there's

00:32:40,590 --> 00:32:45,029
some Sprint's to go

00:32:41,879 --> 00:32:48,389
i'ma decide me I should put this life so

00:32:45,029 --> 00:32:51,119
I don't really know and please read the

00:32:48,389 --> 00:32:52,649
session if you have any something like

00:32:51,119 --> 00:32:58,799
solutions like if the session was

00:32:52,649 --> 00:32:59,999
terrible don't rate it so so there's

00:32:58,799 --> 00:33:02,039
that if you have any like questions

00:32:59,999 --> 00:33:04,200
about if you have like any troubles

00:33:02,039 --> 00:33:09,119
operating any like module any plug-in or

00:33:04,200 --> 00:33:13,730
something I'm here all day so just try

00:33:09,119 --> 00:33:13,730
to come and see me okay thanks

00:33:48,680 --> 00:33:51,680

YouTube URL: https://www.youtube.com/watch?v=qexQD48J9oE


