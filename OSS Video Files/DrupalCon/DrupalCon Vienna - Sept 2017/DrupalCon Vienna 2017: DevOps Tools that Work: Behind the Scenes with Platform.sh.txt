Title: DrupalCon Vienna 2017: DevOps Tools that Work: Behind the Scenes with Platform.sh
Publication date: 2017-09-26
Playlist: DrupalCon Vienna - Sept 2017
Description: 
	This session aims to take a look at the building of Platform.sh and map the principles we applied in building our own software to ideas that all developers can use when choosing or building DevOps solutions that work for them, their companies, and their use cases. Rather than being "about" our company, we'd like to talk about the choices that have led us to be successful in technical terms -- the choices we hope any web developer or sysadmin or stakeholder can emulate to be successful with their own DevOps choices.

Platform.sh has spent the last several years building a next-generation platform-as-a-service product with a goal of supporting the entire open-source industry. Now featuring a half-dozen open-source language runtimes and an even wider variety of back-end services, Platform.sh is inspired by products like Heroku and Docker and built to meet the needs of software and DevOps engineers everywhere. We aim to provide a set of DevOps tools that really work for the user.

This session aims to bridge the gap between a “conceptual” tech talk and more concrete topics by looking at the evolution of Platform. We will connect the dots from what we consider universal “best practices” for software engineering to how we designed our own software and applied those principles in practice. It is both a behind-the-scenes look at the creation of cutting-edge DevOps software and a playbook for some of the engineering principles that we find important for everyone -- engineers and businesspeople -- in our industry.

This is an ever-evolving session based on our current company history, so those who have seen it previously at BADCamp or DevDays are welcome to attend again and see what new stuff we think we have learned... :)

Topics include:

How to analyze use cases and goals and pick the right size tools for the job
Creating DevOps and system administration tools in the languages you know
Decentralization of services as a model for meeting the challenges of scaling
Identifying the pieces of your product which demand the most developer attention
Finding ways to contribute back to the open-source community
Time, task, and expectations management: Dealing with growth the DevOps way
Treating your users right: How to prevent conflict and keep people happy and satisfied
Captions: 
	00:00:00,000 --> 00:00:04,259
all right great welcome everybody my

00:00:02,070 --> 00:00:05,700
name is Christian I work for a company

00:00:04,259 --> 00:00:06,930
called platform data sage which if

00:00:05,700 --> 00:00:08,730
you've never heard of it as the greatest

00:00:06,930 --> 00:00:10,889
hosting company out there come see our

00:00:08,730 --> 00:00:12,900
booth this session is not actually an ad

00:00:10,889 --> 00:00:14,130
I promise so we're putting the ad right

00:00:12,900 --> 00:00:15,330
up front come down to the booth that's

00:00:14,130 --> 00:00:17,190
great there's a lot of silver balloons

00:00:15,330 --> 00:00:19,710
you can fly a paper airplane and win a

00:00:17,190 --> 00:00:21,150
prize it's fabulous the whole team is

00:00:19,710 --> 00:00:23,850
right in the front row is moral support

00:00:21,150 --> 00:00:25,590
here what I do at platform is work as

00:00:23,850 --> 00:00:26,910
someone who manages one of our Drupal

00:00:25,590 --> 00:00:28,289
sites that drives a key part of our

00:00:26,910 --> 00:00:30,119
infrastructure but this talk is not

00:00:28,289 --> 00:00:32,250
about that either this talk is about

00:00:30,119 --> 00:00:33,809
building DevOps tools that work and it

00:00:32,250 --> 00:00:36,329
was originally crafted as the keynote

00:00:33,809 --> 00:00:38,250
for the DevOps summit at Bad camp last

00:00:36,329 --> 00:00:39,570
year it was a big hit and sort of a

00:00:38,250 --> 00:00:42,510
general survey of some of the principles

00:00:39,570 --> 00:00:44,340
that we tried to apply in building the

00:00:42,510 --> 00:00:47,579
company and how the choices we make that

00:00:44,340 --> 00:00:49,260
lead to building our software so let's

00:00:47,579 --> 00:00:50,670
ask right upfront what is DevOps well

00:00:49,260 --> 00:00:53,039
there's a million different answers to

00:00:50,670 --> 00:00:54,600
this question and the one I have is how

00:00:53,039 --> 00:00:56,610
to save time while keeping anything from

00:00:54,600 --> 00:00:58,410
breaking obviously it goes without

00:00:56,610 --> 00:01:00,899
saying that there's some tension between

00:00:58,410 --> 00:01:02,280
these goals and the trade-offs you're

00:01:00,899 --> 00:01:03,629
making between them aren't really always

00:01:02,280 --> 00:01:05,010
clear how many people have had this

00:01:03,629 --> 00:01:07,200
problem sometimes you want to go fast

00:01:05,010 --> 00:01:08,790
and you end up breaking things yeah on

00:01:07,200 --> 00:01:10,080
other times you want to keep things from

00:01:08,790 --> 00:01:11,510
breaking and it takes you forever to get

00:01:10,080 --> 00:01:13,950
anything done who's had that problem

00:01:11,510 --> 00:01:16,830
come on come on I know there's more yeah

00:01:13,950 --> 00:01:18,420
right see exactly meanwhile there's so

00:01:16,830 --> 00:01:19,710
many tools for doing these things that

00:01:18,420 --> 00:01:21,270
you might as well be competing with

00:01:19,710 --> 00:01:22,979
JavaScript every day it seems like

00:01:21,270 --> 00:01:25,049
there's some new orchestration tool

00:01:22,979 --> 00:01:27,479
anywhere from docker to kubernetes and

00:01:25,049 --> 00:01:29,040
you know I could list off dozens of

00:01:27,479 --> 00:01:31,079
these who here feels like they have a

00:01:29,040 --> 00:01:33,840
good grasp of all the different DevOps

00:01:31,079 --> 00:01:39,090
tools available to to get your software

00:01:33,840 --> 00:01:41,700
to run you guys I shouldn't have brought

00:01:39,090 --> 00:01:43,140
these people okay so anyway in designing

00:01:41,700 --> 00:01:44,850
this talk I started thought well we have

00:01:43,140 --> 00:01:46,140
this distance between some tech talks

00:01:44,850 --> 00:01:47,610
that are very technical they go into a

00:01:46,140 --> 00:01:49,020
great amount of detail about a piece of

00:01:47,610 --> 00:01:50,850
new software they talk about a piece of

00:01:49,020 --> 00:01:52,320
code and other stuff is sort of you know

00:01:50,850 --> 00:01:54,509
let me talk about these abstract

00:01:52,320 --> 00:01:56,549
principles and so we have a nice graphic

00:01:54,509 --> 00:01:58,799
to demo this here this is my slides are

00:01:56,549 --> 00:02:00,240
not very good I admit but here we have

00:01:58,799 --> 00:02:01,770
what the CTO talked about in the keynote

00:02:00,240 --> 00:02:03,390
and what it actually took to ship the

00:02:01,770 --> 00:02:05,159
product in well never the twain shall

00:02:03,390 --> 00:02:06,450
meet we're trying to get away from that

00:02:05,159 --> 00:02:10,140
here so we're going to talk about the

00:02:06,450 --> 00:02:12,510
principles that we feel like we believe

00:02:10,140 --> 00:02:13,350
in and the choices we try and make based

00:02:12,510 --> 00:02:14,580
on them and we

00:02:13,350 --> 00:02:16,920
hope that those principles can be

00:02:14,580 --> 00:02:18,840
applied in a way that does not say no

00:02:16,920 --> 00:02:20,310
just use platform that's not necessarily

00:02:18,840 --> 00:02:22,260
our goal and a lot of people have needs

00:02:20,310 --> 00:02:24,060
that aren't met by that but we feel like

00:02:22,260 --> 00:02:25,530
the principles that we have chosen our

00:02:24,060 --> 00:02:27,840
sound and we hope that they're a good

00:02:25,530 --> 00:02:29,790
guide to people being successful making

00:02:27,840 --> 00:02:31,290
their own choices around DevOps even if

00:02:29,790 --> 00:02:32,940
that does not ultimately lead to you

00:02:31,290 --> 00:02:35,760
guys being our customers although we

00:02:32,940 --> 00:02:37,590
would love that so this was originally

00:02:35,760 --> 00:02:39,270
also in our talk so I'm sort of skimming

00:02:37,590 --> 00:02:40,680
through parts of this please don't

00:02:39,270 --> 00:02:42,000
hesitate to ask questions and I'll try

00:02:40,680 --> 00:02:43,830
and answer them and we should be able to

00:02:42,000 --> 00:02:45,660
get through everything but I've left a

00:02:43,830 --> 00:02:48,360
lot of the blocks of text in here for

00:02:45,660 --> 00:02:49,860
people to go look at later so the first

00:02:48,360 --> 00:02:52,170
principle is to use the right size tools

00:02:49,860 --> 00:02:54,270
for the job the dock the degrade analogy

00:02:52,170 --> 00:02:56,160
I liked great analogy I like to talk

00:02:54,270 --> 00:02:58,770
through here is docker well docker

00:02:56,160 --> 00:03:00,450
picked its name because it was thinking

00:02:58,770 --> 00:03:02,730
about what is something that we can talk

00:03:00,450 --> 00:03:03,900
about containers with well idea of a

00:03:02,730 --> 00:03:06,180
container they went with shipping

00:03:03,900 --> 00:03:09,450
containers right and shipping containers

00:03:06,180 --> 00:03:12,180
are very very flexible tool but it's not

00:03:09,450 --> 00:03:13,800
a tool that everyone needs you need a

00:03:12,180 --> 00:03:16,650
shipping container if you need to build

00:03:13,800 --> 00:03:18,660
a global transportation industry

00:03:16,650 --> 00:03:20,580
something that can move billions or

00:03:18,660 --> 00:03:22,020
trillions of tons of all sorts of

00:03:20,580 --> 00:03:24,780
different products around the whole

00:03:22,020 --> 00:03:26,610
earth in a standardized way right this

00:03:24,780 --> 00:03:28,950
is my analogy for docker docker is a

00:03:26,610 --> 00:03:30,720
very powerful tool but it's the sort of

00:03:28,950 --> 00:03:33,030
tool that you need if you want to build

00:03:30,720 --> 00:03:34,230
a global DevOps infrastructure how many

00:03:33,030 --> 00:03:35,820
people in here are building what they

00:03:34,230 --> 00:03:38,880
would describe as global DevOps

00:03:35,820 --> 00:03:41,580
infrastructure one okay great

00:03:38,880 --> 00:03:44,700
and there are use cases like that right

00:03:41,580 --> 00:03:46,470
but our principle upfront was to pick

00:03:44,700 --> 00:03:48,600
what we thought we needed to meet our

00:03:46,470 --> 00:03:49,860
goals and so I feel like a lot of the

00:03:48,600 --> 00:03:51,360
times we come to these conferences and

00:03:49,860 --> 00:03:52,860
we look at the newest and the latest and

00:03:51,360 --> 00:03:55,020
greatest technology but it's a tool that

00:03:52,860 --> 00:03:59,700
is not the right size for the job of all

00:03:55,020 --> 00:04:01,530
the people here so for us our example of

00:03:59,700 --> 00:04:03,540
doing this was that we picked Linux

00:04:01,530 --> 00:04:04,920
containers not docker under the hood we

00:04:03,540 --> 00:04:06,750
actually started building this product

00:04:04,920 --> 00:04:08,400
before docker really existed but we

00:04:06,750 --> 00:04:09,690
picked Linux containers because they

00:04:08,400 --> 00:04:12,360
allow us to solve some of these problems

00:04:09,690 --> 00:04:15,690
we have units of resources of different

00:04:12,360 --> 00:04:17,460
sizes PHP nginx my sequel Redis these

00:04:15,690 --> 00:04:18,930
all have different resource requirements

00:04:17,460 --> 00:04:21,210
containers allowed us to solve this

00:04:18,930 --> 00:04:23,190
problem and it allowed us to build a

00:04:21,210 --> 00:04:24,750
framework for a sort of application

00:04:23,190 --> 00:04:26,960
level abstraction which we're going to

00:04:24,750 --> 00:04:28,639
talk more about later but we wanted to

00:04:26,960 --> 00:04:31,039
the system that would allow our

00:04:28,639 --> 00:04:32,539
customers to say I have an application I

00:04:31,039 --> 00:04:34,759
want platform to run that application

00:04:32,539 --> 00:04:36,919
and I don't want to have to worry about

00:04:34,759 --> 00:04:38,780
the details containers let us solve that

00:04:36,919 --> 00:04:40,699
problem and isolate all of the

00:04:38,780 --> 00:04:42,620
underlying system administration and

00:04:40,699 --> 00:04:44,840
DevOps choices in a way that the

00:04:42,620 --> 00:04:46,520
customer didn't have to worry about they

00:04:44,840 --> 00:04:48,229
also allowed us to solve another problem

00:04:46,520 --> 00:04:49,340
which is storage replication again

00:04:48,229 --> 00:04:51,080
something you'll hear about if you come

00:04:49,340 --> 00:04:53,780
and see a demo but this was something

00:04:51,080 --> 00:04:58,009
that met our needs and so we picked that

00:04:53,780 --> 00:05:00,139
tool for the job all of this combined

00:04:58,009 --> 00:05:02,090
allowed us to get what we wanted to do

00:05:00,139 --> 00:05:04,160
which was easily boot up environments

00:05:02,090 --> 00:05:05,509
for customers clone them so that they

00:05:04,160 --> 00:05:06,979
could have access to their code in

00:05:05,509 --> 00:05:08,840
multiple environments and test their

00:05:06,979 --> 00:05:10,759
stuff that was the customer need we

00:05:08,840 --> 00:05:13,190
wanted to meet but everyone has their

00:05:10,759 --> 00:05:14,930
own customer needs and depending on what

00:05:13,190 --> 00:05:18,710
those are you might want to focus on

00:05:14,930 --> 00:05:20,389
different things so some other choices

00:05:18,710 --> 00:05:22,130
we made are we use a variety of common

00:05:20,389 --> 00:05:23,720
sysadmin tools some of those names up

00:05:22,130 --> 00:05:25,430
there gonna be familiar Nagios and

00:05:23,720 --> 00:05:28,150
muninn for tracking stuff on our servers

00:05:25,430 --> 00:05:31,690
Kabana for visualizing a lot of our data

00:05:28,150 --> 00:05:35,150
zookeeper for some of the under the hood

00:05:31,690 --> 00:05:36,320
queue system and management but a lot of

00:05:35,150 --> 00:05:38,419
our customer tech is actually

00:05:36,320 --> 00:05:40,220
off-the-shelf were not you know rolling

00:05:38,419 --> 00:05:42,440
our own PHP or my sequel I think now

00:05:40,220 --> 00:05:45,979
we're compiling our own but only for the

00:05:42,440 --> 00:05:47,840
sake of getting it out faster but our

00:05:45,979 --> 00:05:49,370
goal was not to modify a lot of these

00:05:47,840 --> 00:05:50,810
things we looked at those we said these

00:05:49,370 --> 00:05:52,280
are decent they worked through the

00:05:50,810 --> 00:05:54,020
majority of our customers most people

00:05:52,280 --> 00:05:56,539
didn't know don't need their own PHP

00:05:54,020 --> 00:05:58,009
compiled so while that was within our

00:05:56,539 --> 00:05:59,210
powers of course we said we don't want

00:05:58,009 --> 00:06:03,259
to do that we don't want to spend time

00:05:59,210 --> 00:06:06,020
on that sort of thing right other needs

00:06:03,259 --> 00:06:09,139
that we had are sort of this global

00:06:06,020 --> 00:06:10,580
shipping operation analogy I had many of

00:06:09,139 --> 00:06:12,469
those tools didn't exist at the time

00:06:10,580 --> 00:06:14,000
there was no kubernetes at the time so

00:06:12,469 --> 00:06:16,159
we had to build our own orchestration

00:06:14,000 --> 00:06:18,050
layer there was no docker cloud so we

00:06:16,159 --> 00:06:19,280
had to build our own set of systems that

00:06:18,050 --> 00:06:21,590
could link a bunch of containers

00:06:19,280 --> 00:06:23,120
together and tell them what to do so we

00:06:21,590 --> 00:06:25,940
ended up having to build a lot of our

00:06:23,120 --> 00:06:27,680
own things but again that might not be

00:06:25,940 --> 00:06:30,380
the choice you make the goal is to look

00:06:27,680 --> 00:06:36,830
at what exactly your needs are and move

00:06:30,380 --> 00:06:38,620
to meet them so ok next principle in

00:06:36,830 --> 00:06:40,930
talking about DevOps is a you

00:06:38,620 --> 00:06:42,340
better than a bathroom how many people

00:06:40,930 --> 00:06:44,800
here are familiar with bash scripting

00:06:42,340 --> 00:06:46,479
okay all the hands go up right

00:06:44,800 --> 00:06:47,800
what's your first instinct when you need

00:06:46,479 --> 00:06:49,780
to solve a problem in Linux

00:06:47,800 --> 00:06:51,160
well it's bash scripting typically right

00:06:49,780 --> 00:06:53,260
how many how many people would go to

00:06:51,160 --> 00:06:54,840
that is their first answer if they need

00:06:53,260 --> 00:06:57,820
to solve some problem on a Linux server

00:06:54,840 --> 00:06:58,960
okay a bunch of hands go up right we

00:06:57,820 --> 00:07:00,639
don't feel like this is the right choice

00:06:58,960 --> 00:07:02,280
and there are a bunch of reasons for

00:07:00,639 --> 00:07:05,530
that

00:07:02,280 --> 00:07:07,150
we advise against this right we feel

00:07:05,530 --> 00:07:09,280
like you should be writing your tools in

00:07:07,150 --> 00:07:10,510
real code bash scripting is great it

00:07:09,280 --> 00:07:13,479
allows you to solve a variety of

00:07:10,510 --> 00:07:14,830
problems quickly but when you have a

00:07:13,479 --> 00:07:16,300
real programming language you have

00:07:14,830 --> 00:07:18,250
access to the tools that real

00:07:16,300 --> 00:07:20,500
programming languages have built and you

00:07:18,250 --> 00:07:22,479
have access to the ability to employ

00:07:20,500 --> 00:07:24,220
programmers that have solved these

00:07:22,479 --> 00:07:25,720
problems at sort of a higher level than

00:07:24,220 --> 00:07:29,380
someone who just needs to make one or

00:07:25,720 --> 00:07:30,820
two servers run so a good example of

00:07:29,380 --> 00:07:32,800
this is actually composer how many

00:07:30,820 --> 00:07:35,169
people are familiar with composer okay

00:07:32,800 --> 00:07:36,910
ever a lot of hands go up composer is

00:07:35,169 --> 00:07:39,820
great because they have a variety of

00:07:36,910 --> 00:07:41,680
tools that actually leverage composer as

00:07:39,820 --> 00:07:43,419
a library rather than as a shell script

00:07:41,680 --> 00:07:45,610
composer is typically an application

00:07:43,419 --> 00:07:48,520
that you run but if you pick a program

00:07:45,610 --> 00:07:50,620
called satus say this will generate a

00:07:48,520 --> 00:07:51,970
composer style repository for you it

00:07:50,620 --> 00:07:54,280
essentially allows you to run a private

00:07:51,970 --> 00:07:56,710
composer repo but if you open up the

00:07:54,280 --> 00:07:58,740
code for this tool under the hood what

00:07:56,710 --> 00:08:01,030
it's doing is losing composer is library

00:07:58,740 --> 00:08:02,770
running that code and generating this

00:08:01,030 --> 00:08:05,110
but it doesn't have to invoke composer

00:08:02,770 --> 00:08:06,880
from the shell it's just using it in PHP

00:08:05,110 --> 00:08:09,130
this is a great example of what I'm

00:08:06,880 --> 00:08:10,960
talking about they use the tools in code

00:08:09,130 --> 00:08:12,580
rather than just relying on a bunch of

00:08:10,960 --> 00:08:14,199
bash scripting which of course you can

00:08:12,580 --> 00:08:15,580
imagine doing you have composer you know

00:08:14,199 --> 00:08:17,199
how to use it you could make a bunch of

00:08:15,580 --> 00:08:19,389
tooling that relies on just invoking

00:08:17,199 --> 00:08:21,160
that from the shell but this is a much

00:08:19,389 --> 00:08:22,750
better way to do things so here on the

00:08:21,160 --> 00:08:27,130
right I have an example of say this is

00:08:22,750 --> 00:08:28,720
composer dot JSON file another example

00:08:27,130 --> 00:08:30,460
is actually from Facebook

00:08:28,720 --> 00:08:32,890
Facebook has their own version of the

00:08:30,460 --> 00:08:34,240
PHP runtime called HH VM I used to be a

00:08:32,890 --> 00:08:36,789
big fanboy even though it's not as

00:08:34,240 --> 00:08:39,130
popular anymore but they spent a lot of

00:08:36,789 --> 00:08:41,200
time on a performance suite measuring

00:08:39,130 --> 00:08:44,380
open-source software against each other

00:08:41,200 --> 00:08:47,410
and also h h vm versus PHP but they

00:08:44,380 --> 00:08:49,420
wrote that entire suite in their version

00:08:47,410 --> 00:08:51,550
of PHP which is called hack lang and

00:08:49,420 --> 00:08:52,730
then only at the very end when they

00:08:51,550 --> 00:08:54,440
needed to shell out

00:08:52,730 --> 00:08:56,660
and run these commands would they

00:08:54,440 --> 00:08:58,130
finally invoke a shell process to do

00:08:56,660 --> 00:08:59,600
something like running their siege

00:08:58,130 --> 00:09:01,820
command and actually measuring the

00:08:59,600 --> 00:09:03,769
output at that point the whole rest of

00:09:01,820 --> 00:09:05,570
the software is written in the language

00:09:03,769 --> 00:09:07,310
they know and they have access to all of

00:09:05,570 --> 00:09:09,170
those language tools that they know also

00:09:07,310 --> 00:09:11,660
and so it's very familiar I was able to

00:09:09,170 --> 00:09:12,860
dig in there I really am not much of a

00:09:11,660 --> 00:09:14,570
DevOps guy myself

00:09:12,860 --> 00:09:16,279
but because I know that language I was

00:09:14,570 --> 00:09:18,079
able to modify that program and

00:09:16,279 --> 00:09:19,910
contribute and help them get around

00:09:18,079 --> 00:09:21,740
variety of bugs that they had in their

00:09:19,910 --> 00:09:24,410
Drupal implementations and was very

00:09:21,740 --> 00:09:26,839
successful there so that's another good

00:09:24,410 --> 00:09:28,699
example pick what you know please don't

00:09:26,839 --> 00:09:31,720
pick bash you want to build something

00:09:28,699 --> 00:09:31,720
that is better than that

00:09:32,360 --> 00:09:36,829
our basic example of this is that we

00:09:34,250 --> 00:09:39,110
wrote our own get server now that might

00:09:36,829 --> 00:09:40,639
sound crazy to you but git is actually a

00:09:39,110 --> 00:09:42,949
protocol that you can implement and

00:09:40,639 --> 00:09:44,839
there's a library for Python where a

00:09:42,949 --> 00:09:46,880
library written in Python forget called

00:09:44,839 --> 00:09:49,459
Dulwich which we took and built our own

00:09:46,880 --> 00:09:51,380
get server based on that this allowed us

00:09:49,459 --> 00:09:53,540
to take all of the objects that you're

00:09:51,380 --> 00:09:56,329
familiar with and get stuff like commits

00:09:53,540 --> 00:09:57,829
and hashes and branches and link them

00:09:56,329 --> 00:09:59,690
very intimately to the rest of our

00:09:57,829 --> 00:10:01,819
software this is how when you're using

00:09:59,690 --> 00:10:03,620
platforms on a sage if you push a new

00:10:01,819 --> 00:10:05,480
git branch to our git server you're

00:10:03,620 --> 00:10:07,130
automatically going to get a working

00:10:05,480 --> 00:10:09,889
copy of your environment for that git

00:10:07,130 --> 00:10:12,410
branch this was only achievable by this

00:10:09,889 --> 00:10:14,569
sort of code level integration we don't

00:10:12,410 --> 00:10:16,519
have to rely on the default git server

00:10:14,569 --> 00:10:19,010
we don't have to use git hooks we have

00:10:16,519 --> 00:10:20,600
access to all this stuff within a code

00:10:19,010 --> 00:10:22,430
base in a language that all of our

00:10:20,600 --> 00:10:24,440
programmers know we didn't have to work

00:10:22,430 --> 00:10:27,319
on a bunch of sort of links within the

00:10:24,440 --> 00:10:29,360
shell this was key to our operations and

00:10:27,319 --> 00:10:31,610
sort of drives this as a motivating

00:10:29,360 --> 00:10:37,970
factor we tried to script as few things

00:10:31,610 --> 00:10:39,790
as possible so all right the next

00:10:37,970 --> 00:10:42,170
principle we talked about is that

00:10:39,790 --> 00:10:44,690
decentralized technology helps you scale

00:10:42,170 --> 00:10:45,980
up one of the problems we had to solve

00:10:44,690 --> 00:10:48,019
is creating a system that could

00:10:45,980 --> 00:10:49,790
realistically scale to hundreds

00:10:48,019 --> 00:10:51,860
thousands tens of thousands hundreds of

00:10:49,790 --> 00:10:53,480
thousands of containers in any given

00:10:51,860 --> 00:10:54,829
deployment of the software at this point

00:10:53,480 --> 00:10:57,680
I think we have something in what like a

00:10:54,829 --> 00:10:59,600
dozen regions but initially we only had

00:10:57,680 --> 00:11:02,510
a couple and we were looking at the idea

00:10:59,600 --> 00:11:04,260
of running lots and lots of containers

00:11:02,510 --> 00:11:06,700
within any one of these

00:11:04,260 --> 00:11:08,350
this is an exact metaphor none of these

00:11:06,700 --> 00:11:09,940
webs spell out anything from Charlotte's

00:11:08,350 --> 00:11:14,290
Web I wanted a more entertaining image

00:11:09,940 --> 00:11:16,360
there that's okay in thinking about this

00:11:14,290 --> 00:11:17,589
it presents challenges in places that we

00:11:16,360 --> 00:11:19,810
don't typically have to deal with

00:11:17,589 --> 00:11:21,760
usually when you're dealing with a

00:11:19,810 --> 00:11:23,140
server that's running one website or

00:11:21,760 --> 00:11:24,430
even a dozen websites or hundred

00:11:23,140 --> 00:11:26,110
websites you're not typically thinking

00:11:24,430 --> 00:11:27,430
about things like Linux file descriptors

00:11:26,110 --> 00:11:29,410
but these are the sorts of limits that

00:11:27,430 --> 00:11:33,040
we ran into all the time we had to plan

00:11:29,410 --> 00:11:34,660
ahead and it does afflict a lot of

00:11:33,040 --> 00:11:35,920
services that we all use daily who's

00:11:34,660 --> 00:11:38,440
ever thought about the sort of scale to

00:11:35,920 --> 00:11:40,510
github is operating at they have you

00:11:38,440 --> 00:11:42,910
know millions of people accessing that

00:11:40,510 --> 00:11:46,870
at any given time and they need to be

00:11:42,910 --> 00:11:48,820
able to scale so one of the things we

00:11:46,870 --> 00:11:50,500
did is we said we want to take as many

00:11:48,820 --> 00:11:52,029
of our services as possible and really

00:11:50,500 --> 00:11:54,880
make them single tenant rather than

00:11:52,029 --> 00:11:56,830
multi tenant so this is a list here we

00:11:54,880 --> 00:11:58,630
have all of these clusters each of these

00:11:56,830 --> 00:12:00,370
is an individual container we talked

00:11:58,630 --> 00:12:01,930
about containerization now I don't have

00:12:00,370 --> 00:12:03,670
to think about shared resources on a

00:12:01,930 --> 00:12:07,240
server containers help me solve this

00:12:03,670 --> 00:12:08,860
problem another thing where we've wrote

00:12:07,240 --> 00:12:10,900
our own git server this is something

00:12:08,860 --> 00:12:12,490
else that was helpful we can take our

00:12:10,900 --> 00:12:15,820
git server and run it in a container

00:12:12,490 --> 00:12:17,740
every project within platform SH has its

00:12:15,820 --> 00:12:20,080
own copy of this and so now I don't have

00:12:17,740 --> 00:12:22,060
to worry about scaling that technology

00:12:20,080 --> 00:12:23,800
all I have to do is scale the

00:12:22,060 --> 00:12:25,810
infrastructure behind it to be able to

00:12:23,800 --> 00:12:27,490
support more containers and so I've sort

00:12:25,810 --> 00:12:29,230
of moved that problem to a different

00:12:27,490 --> 00:12:31,060
level and I don't have to worry about

00:12:29,230 --> 00:12:33,580
that sort of scaling issue within my

00:12:31,060 --> 00:12:35,560
software design so thinking about these

00:12:33,580 --> 00:12:37,720
sort of problems up front is something

00:12:35,560 --> 00:12:39,279
that's a principle of ours something

00:12:37,720 --> 00:12:41,050
that we recommend when we talk to people

00:12:39,279 --> 00:12:43,000
about DevOps is thinking ahead and

00:12:41,050 --> 00:12:44,980
saying what sort of scale do I need to

00:12:43,000 --> 00:12:46,900
reach are there problems that are going

00:12:44,980 --> 00:12:48,670
to hit me at that scale even if I'm not

00:12:46,900 --> 00:12:56,770
there yet and do I need to plan ahead

00:12:48,670 --> 00:12:58,810
for that sort of thing all right the

00:12:56,770 --> 00:13:00,610
next principle we had is to pick a model

00:12:58,810 --> 00:13:02,770
or an abstraction that meets your needs

00:13:00,610 --> 00:13:04,029
so this is sort of a very abstract topic

00:13:02,770 --> 00:13:07,000
and so I'm going to talk about a lot of

00:13:04,029 --> 00:13:09,459
different examples but the goal here is

00:13:07,000 --> 00:13:11,500
to think about what you need or what

00:13:09,459 --> 00:13:13,329
your customers need or what your prot

00:13:11,500 --> 00:13:15,040
what problems your product is trying to

00:13:13,329 --> 00:13:16,810
solve and then tackle that

00:13:15,040 --> 00:13:19,450
and focus your development efforts on

00:13:16,810 --> 00:13:20,680
those particular problem spaces right

00:13:19,450 --> 00:13:22,000
the title of the site sounds like

00:13:20,680 --> 00:13:26,050
useless jargon what are you talking

00:13:22,000 --> 00:13:27,880
about so I have a bunch of examples here

00:13:26,050 --> 00:13:29,650
for a large media brand with a lot of

00:13:27,880 --> 00:13:31,480
sub sites you might need tools to

00:13:29,650 --> 00:13:33,370
replicate an installation profile very

00:13:31,480 --> 00:13:34,660
easily or replicate a lot of data that's

00:13:33,370 --> 00:13:36,610
something that you want to focus your

00:13:34,660 --> 00:13:38,530
development on maybe you're gonna end up

00:13:36,610 --> 00:13:39,910
using it tool like agar or maybe you're

00:13:38,530 --> 00:13:42,730
gonna use some other sort of fleet

00:13:39,910 --> 00:13:44,110
management tool for a big ecommerce site

00:13:42,730 --> 00:13:45,550
that might not be important to you you

00:13:44,110 --> 00:13:47,170
don't need to run more than one copy of

00:13:45,550 --> 00:13:49,840
your site what you need to make sure is

00:13:47,170 --> 00:13:51,730
that nothing is gonna break okay so for

00:13:49,840 --> 00:13:53,440
your use case you're gonna sit down and

00:13:51,730 --> 00:13:55,060
say okay I have this much development

00:13:53,440 --> 00:13:56,620
team I need to focus a lot of them on

00:13:55,060 --> 00:13:59,110
building a continuous integration

00:13:56,620 --> 00:14:00,610
workflow I need to write tests I need to

00:13:59,110 --> 00:14:02,740
make sure that no matter what

00:14:00,610 --> 00:14:05,440
nothing reaches production they could

00:14:02,740 --> 00:14:07,330
possibly impact my customers because as

00:14:05,440 --> 00:14:08,890
soon as it does that results in

00:14:07,330 --> 00:14:10,480
thousands or tens of thousands or

00:14:08,890 --> 00:14:13,390
hundreds of thousands of dollars in lost

00:14:10,480 --> 00:14:14,650
sales right that's your use case that's

00:14:13,390 --> 00:14:17,380
what you need to be focusing your

00:14:14,650 --> 00:14:19,240
development time on for a big marketing

00:14:17,380 --> 00:14:20,740
brand you also have different needs

00:14:19,240 --> 00:14:22,300
maybe you don't care if occasionally

00:14:20,740 --> 00:14:24,040
someone gets an error but what you need

00:14:22,300 --> 00:14:25,600
is a ton of analytics you need a lot of

00:14:24,040 --> 00:14:27,730
data you need to be able to evaluate

00:14:25,600 --> 00:14:30,100
that data that's where you should be

00:14:27,730 --> 00:14:32,200
focusing your DevOps time this sort of

00:14:30,100 --> 00:14:33,910
seems obvious in hindsight but people

00:14:32,200 --> 00:14:36,100
often don't plan for it a lot of the

00:14:33,910 --> 00:14:38,020
ways we tackle DevOps are let's just

00:14:36,100 --> 00:14:39,550
make sure that this thing works today or

00:14:38,020 --> 00:14:41,470
let's make sure this thing works in a

00:14:39,550 --> 00:14:43,600
week or let's make sure that our needs

00:14:41,470 --> 00:14:45,700
for the next month or the next customer

00:14:43,600 --> 00:14:47,890
are satisfied without planning ahead and

00:14:45,700 --> 00:14:49,990
saying I know that I'm gonna want these

00:14:47,890 --> 00:14:52,300
things therefore I need to plan ahead

00:14:49,990 --> 00:14:54,730
and assign developers to them and tackle

00:14:52,300 --> 00:14:56,530
building those tools so that I have the

00:14:54,730 --> 00:15:00,520
things that I want further and further

00:14:56,530 --> 00:15:02,770
down the road so this is what led to us

00:15:00,520 --> 00:15:05,170
building what we described as the

00:15:02,770 --> 00:15:06,550
platform data siege workflow while I

00:15:05,170 --> 00:15:08,650
talked about earlier is we wanted an

00:15:06,550 --> 00:15:11,830
abstraction where our customers didn't

00:15:08,650 --> 00:15:13,300
have to worry about all the stuff under

00:15:11,830 --> 00:15:16,270
the hood we want people to be able to

00:15:13,300 --> 00:15:19,270
take their Drupal repository add a llamó

00:15:16,270 --> 00:15:21,610
file or two and be off to the races that

00:15:19,270 --> 00:15:23,230
was our goal so for standard DevOps

00:15:21,610 --> 00:15:24,550
workflow you decide what your server

00:15:23,230 --> 00:15:26,260
should do and you try and get the server

00:15:24,550 --> 00:15:27,910
to do that stuff you write that stuff in

00:15:26,260 --> 00:15:29,560
your config files and now you can't

00:15:27,910 --> 00:15:31,000
that server very easily assuming you

00:15:29,560 --> 00:15:32,290
have the people who know what these

00:15:31,000 --> 00:15:33,610
different things do of course there are

00:15:32,290 --> 00:15:36,370
a lot of other examples of stuff you

00:15:33,610 --> 00:15:39,040
could use right we wanted to design a

00:15:36,370 --> 00:15:42,040
workflow where your design define an

00:15:39,040 --> 00:15:43,690
application decide which pieces of the

00:15:42,040 --> 00:15:45,220
application should translate to which

00:15:43,690 --> 00:15:47,560
pieces of infrastructure say I have a

00:15:45,220 --> 00:15:49,870
Drupal site that means I know I need my

00:15:47,560 --> 00:15:52,180
sequel I need Redis maybe I need elastic

00:15:49,870 --> 00:15:53,620
search maybe for my front-end I want a

00:15:52,180 --> 00:15:55,120
node server for my JavaScript

00:15:53,620 --> 00:15:58,390
application all those sorts of things

00:15:55,120 --> 00:16:00,400
right once you have decided that we want

00:15:58,390 --> 00:16:01,750
to be able to deploy those pieces for

00:16:00,400 --> 00:16:05,650
you based on the applications

00:16:01,750 --> 00:16:07,600
configuration obviously all of those

00:16:05,650 --> 00:16:10,000
pieces required a lot of work under the

00:16:07,600 --> 00:16:11,470
hood from us but we needed to put forth

00:16:10,000 --> 00:16:13,090
all of that work in order to get the

00:16:11,470 --> 00:16:14,830
abstraction we wanted and deliver the

00:16:13,090 --> 00:16:16,390
customer experience we wanted and so

00:16:14,830 --> 00:16:19,030
that's what we focused all of our

00:16:16,390 --> 00:16:21,250
development time and even now within the

00:16:19,030 --> 00:16:23,500
company when we talk about who to hire

00:16:21,250 --> 00:16:26,320
and where to put engineering time often

00:16:23,500 --> 00:16:28,000
where even though my team does other

00:16:26,320 --> 00:16:30,010
stuff frequently I have recommended that

00:16:28,000 --> 00:16:31,660
we hire people for the core team because

00:16:30,010 --> 00:16:33,880
that's where the focus of our develop

00:16:31,660 --> 00:16:35,260
means to be that's the abstraction and

00:16:33,880 --> 00:16:39,880
that's the model that we're delivering

00:16:35,260 --> 00:16:44,140
to our customers so and this is what we

00:16:39,880 --> 00:16:46,180
were trying to get you excuse me I'm

00:16:44,140 --> 00:16:48,370
sweating to death in this hollow room

00:16:46,180 --> 00:16:50,620
we ended up digging out these blog posts

00:16:48,370 --> 00:16:51,940
later that really define what we wanted

00:16:50,620 --> 00:16:53,350
to get to and we discovered that a lot

00:16:51,940 --> 00:16:55,660
of other people wanted this too and it

00:16:53,350 --> 00:16:58,240
turns out too by delivering this we have

00:16:55,660 --> 00:17:00,430
become very successful as a company the

00:16:58,240 --> 00:17:02,530
goal here in talking about this is to

00:17:00,430 --> 00:17:04,270
say if you identify these needs and

00:17:02,530 --> 00:17:06,010
build a product to meet needs that

00:17:04,270 --> 00:17:08,020
customers have you also will be

00:17:06,010 --> 00:17:10,090
successful but you have to plan ahead

00:17:08,020 --> 00:17:12,040
and you have to apply these principles

00:17:10,090 --> 00:17:14,350
as you're building a DevOps

00:17:12,040 --> 00:17:15,850
solution so I'll leave you guys to read

00:17:14,350 --> 00:17:18,100
that later the slides will be uploaded

00:17:15,850 --> 00:17:20,020
these are a couple people who are very

00:17:18,100 --> 00:17:21,370
well known in the Ruby and the few

00:17:20,020 --> 00:17:25,480
communities and we love their

00:17:21,370 --> 00:17:26,680
endorsement so the next principle is to

00:17:25,480 --> 00:17:28,270
contribute back to your community

00:17:26,680 --> 00:17:30,880
unfortunately we're sort of not that

00:17:28,270 --> 00:17:33,220
good at this I've contributed a bunch of

00:17:30,880 --> 00:17:34,990
Drupal patches but frankly a lot of my

00:17:33,220 --> 00:17:36,790
code lives in Forks on github because

00:17:34,990 --> 00:17:39,130
it's so bespoke that I really have not

00:17:36,790 --> 00:17:41,130
been able to contribute it back I'm also

00:17:39,130 --> 00:17:43,860
working on the next edition of Commerce

00:17:41,130 --> 00:17:45,750
Carine for commerce to otto in Drupal 8

00:17:43,860 --> 00:17:47,270
but that's sort of slow going because we

00:17:45,750 --> 00:17:49,320
don't have a ton of time to devote to it

00:17:47,270 --> 00:17:51,810
meanwhile we have a lot of different

00:17:49,320 --> 00:17:53,370
open-source pieces or different pieces

00:17:51,810 --> 00:17:55,440
of our infrastructure that we want to

00:17:53,370 --> 00:17:57,450
open-source but it's really proven

00:17:55,440 --> 00:17:59,700
difficult to split any individual piece

00:17:57,450 --> 00:18:01,560
off from the overall ecosystem enough to

00:17:59,700 --> 00:18:03,540
do so so this is something that we feel

00:18:01,560 --> 00:18:06,630
like we really want to do a lot more

00:18:03,540 --> 00:18:08,670
with and we're sort of remiss Ian even

00:18:06,630 --> 00:18:10,230
though it's a principle we have so in

00:18:08,670 --> 00:18:12,990
lieu of that we sort of to have done

00:18:10,230 --> 00:18:14,550
other things we try to contribute best

00:18:12,990 --> 00:18:16,230
practices back to the frameworks we work

00:18:14,550 --> 00:18:18,270
with how many got how many people know

00:18:16,230 --> 00:18:20,610
hazel some all of us from the Drupal

00:18:18,270 --> 00:18:22,590
console project a few people we worked a

00:18:20,610 --> 00:18:24,870
lot with those guys in developing the

00:18:22,590 --> 00:18:26,280
composer workflow for Drupal 8 we were

00:18:24,870 --> 00:18:27,750
very involved there because we wanted

00:18:26,280 --> 00:18:29,310
Drupal 8 to be installed we'll be a

00:18:27,750 --> 00:18:33,560
composer rather than just sitting in a

00:18:29,310 --> 00:18:33,560
repo somewhere so we've worked on that

00:18:33,950 --> 00:18:38,400
and we've also contributed to stuff like

00:18:37,020 --> 00:18:40,020
symphony and other composer driven

00:18:38,400 --> 00:18:41,460
frameworks than helping them separate

00:18:40,020 --> 00:18:42,780
their building installation phases

00:18:41,460 --> 00:18:44,940
symphony at one point had a problem

00:18:42,780 --> 00:18:46,170
where as part of the composer install

00:18:44,940 --> 00:18:48,210
hook they were trying to access the

00:18:46,170 --> 00:18:49,860
database and we of course build without

00:18:48,210 --> 00:18:51,480
access to the database we think your

00:18:49,860 --> 00:18:52,860
code should essentially be independent

00:18:51,480 --> 00:18:54,450
of that while it's in the build phase

00:18:52,860 --> 00:18:56,010
and so we work with them on on

00:18:54,450 --> 00:18:58,770
separating those and getting that to

00:18:56,010 --> 00:19:00,210
sort of best practice status another

00:18:58,770 --> 00:19:03,120
thing we do is we go to tons of events

00:19:00,210 --> 00:19:04,650
we sponsor events not just because we

00:19:03,120 --> 00:19:06,270
have a marketing interest in that

00:19:04,650 --> 00:19:07,410
although obviously we do but we feel

00:19:06,270 --> 00:19:09,240
like it's a great way to give back to

00:19:07,410 --> 00:19:10,740
the community to be present and have our

00:19:09,240 --> 00:19:13,020
developers there and talking to people

00:19:10,740 --> 00:19:15,720
and supporting this these events that

00:19:13,020 --> 00:19:17,610
really are for developers to come to and

00:19:15,720 --> 00:19:21,030
interact with one another so that's very

00:19:17,610 --> 00:19:22,950
important to us oh yeah I forgot all

00:19:21,030 --> 00:19:24,450
about Magento - we're very involved with

00:19:22,950 --> 00:19:26,310
the Magento community and have similar

00:19:24,450 --> 00:19:27,750
adventures they're helping them separate

00:19:26,310 --> 00:19:30,870
their workflow and make sure that they

00:19:27,750 --> 00:19:33,150
can be deployable and work with modern

00:19:30,870 --> 00:19:35,310
DevOps technology is something that the

00:19:33,150 --> 00:19:37,380
PHP community in particular isn't always

00:19:35,310 --> 00:19:38,700
been very good at almost every PHP

00:19:37,380 --> 00:19:41,160
developer out there started by

00:19:38,700 --> 00:19:42,810
downloading a tar file and unzipping it

00:19:41,160 --> 00:19:45,240
into their their GoDaddy or their

00:19:42,810 --> 00:19:47,730
Bluehost folder and going to town right

00:19:45,240 --> 00:19:49,170
well that doesn't really work in 2017

00:19:47,730 --> 00:19:51,920
and trying to bring a lot of these

00:19:49,170 --> 00:19:52,970
frameworks in the PHP language along is

00:19:51,920 --> 00:19:57,230
thing that we've really tried to

00:19:52,970 --> 00:19:59,360
contribute aggressively to so last

00:19:57,230 --> 00:20:01,280
principle is don't your

00:19:59,360 --> 00:20:02,930
customers this is actually the final

00:20:01,280 --> 00:20:04,190
principle in our company value statement

00:20:02,930 --> 00:20:06,710
which I was very proud of I wasn't

00:20:04,190 --> 00:20:09,650
involved in that but I was very happy

00:20:06,710 --> 00:20:11,270
about it when we announced it we've

00:20:09,650 --> 00:20:14,210
realized it's really easy to paper over

00:20:11,270 --> 00:20:15,920
these complexities of DevOps into

00:20:14,210 --> 00:20:17,390
marketing language how many people have

00:20:15,920 --> 00:20:19,760
talked to a sales guy who over promised

00:20:17,390 --> 00:20:23,540
something in the DevOps fear before come

00:20:19,760 --> 00:20:26,680
on come on okay it's very easy to do

00:20:23,540 --> 00:20:33,170
this and we really tried to avoid it and

00:20:26,680 --> 00:20:34,730
so stories abound of companies who have

00:20:33,170 --> 00:20:36,050
done this but then it comes back to bite

00:20:34,730 --> 00:20:38,120
you how many people have had a sales

00:20:36,050 --> 00:20:39,530
person on in their company over-promised

00:20:38,120 --> 00:20:41,000
something and then it comes back to bite

00:20:39,530 --> 00:20:42,380
you later when you're asked to deliver

00:20:41,000 --> 00:20:44,810
something you really don't have the time

00:20:42,380 --> 00:20:48,350
or expertise for come on right yeah

00:20:44,810 --> 00:20:52,850
double hands yes love it I wish I had a

00:20:48,350 --> 00:20:54,830
photo so yeah it really is not worth it

00:20:52,850 --> 00:20:56,480
so the first question someone asked me a

00:20:54,830 --> 00:20:59,120
bad camp when I presented this site as

00:20:56,480 --> 00:21:01,490
well how do you stop this and I say do

00:20:59,120 --> 00:21:03,050
you know what we charge a $5,000

00:21:01,490 --> 00:21:05,390
onboarding fee for enterprise customers

00:21:03,050 --> 00:21:06,470
and you're all gonna give me that weird

00:21:05,390 --> 00:21:09,110
look like well what are you talking

00:21:06,470 --> 00:21:11,300
about but that sort of thing says up

00:21:09,110 --> 00:21:13,100
front we need this amount of time and

00:21:11,300 --> 00:21:14,390
this amount of support investment and

00:21:13,100 --> 00:21:16,490
this amount of pre-sales and

00:21:14,390 --> 00:21:19,010
architecture work to make sure that you

00:21:16,490 --> 00:21:20,870
are gonna get your needs met and that's

00:21:19,010 --> 00:21:23,090
a sort of sticker shock problem a lot of

00:21:20,870 --> 00:21:25,490
people are not used to paying that but

00:21:23,090 --> 00:21:27,380
that was what was necessary for us to

00:21:25,490 --> 00:21:29,570
invest the right amount of time to make

00:21:27,380 --> 00:21:30,830
sure that we are not bullshitting our

00:21:29,570 --> 00:21:32,240
customer and that they are not

00:21:30,830 --> 00:21:33,800
bullshitting us and that nothing is

00:21:32,240 --> 00:21:35,870
getting lost in communication and that

00:21:33,800 --> 00:21:37,550
was really important to us so that's

00:21:35,870 --> 00:21:39,230
sort of how we stick to that principle

00:21:37,550 --> 00:21:43,130
as well as obviously telling our

00:21:39,230 --> 00:21:45,890
salespeople to not lie but this we feel

00:21:43,130 --> 00:21:48,320
like and I personally feel like this has

00:21:45,890 --> 00:21:50,180
been very rewarding for us working with

00:21:48,320 --> 00:21:51,710
the company it's great to have people

00:21:50,180 --> 00:21:54,110
working with me who are not trying to

00:21:51,710 --> 00:21:55,610
oversell us or if they are selling

00:21:54,110 --> 00:21:58,310
something that we don't have yet are

00:21:55,610 --> 00:22:00,620
clear to us and the customer in saying

00:21:58,310 --> 00:22:01,700
we really want to develop this but it's

00:22:00,620 --> 00:22:03,500
not done yet and

00:22:01,700 --> 00:22:06,230
have to know that upfront and that sort

00:22:03,500 --> 00:22:07,669
of honesty we feel like is lacking in

00:22:06,230 --> 00:22:09,260
general in the tech community and

00:22:07,669 --> 00:22:12,260
specifically when you're selling stuff

00:22:09,260 --> 00:22:15,409
like DevOps and web software it's really

00:22:12,260 --> 00:22:17,149
easy to to let that sort of rhetoric run

00:22:15,409 --> 00:22:18,860
away with you and have the engineers end

00:22:17,149 --> 00:22:22,700
up paying the price and we really want

00:22:18,860 --> 00:22:24,470
to avoid that all right

00:22:22,700 --> 00:22:26,389
this has been the whirlwind tour and I'm

00:22:24,470 --> 00:22:36,350
almost out of time but I have a couple

00:22:26,389 --> 00:22:39,470
minutes for questions so fire away all

00:22:36,350 --> 00:22:42,320
right sounds like I did a good job sorry

00:22:39,470 --> 00:22:43,669
that was very fast I tried to compress

00:22:42,320 --> 00:22:45,559
it down I'd be happy to take questions

00:22:43,669 --> 00:22:47,059
later otherwise feel free to come by the

00:22:45,559 --> 00:22:48,980
booth everyone and we'll give you a demo

00:22:47,059 --> 00:22:51,230
you can fly a plane and win a lego

00:22:48,980 --> 00:23:00,199
rocket thanks everybody

00:22:51,230 --> 00:23:00,199

YouTube URL: https://www.youtube.com/watch?v=16eVS6a7SXM


