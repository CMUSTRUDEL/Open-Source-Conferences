Title: DrupalCon Vienna 2017: Introduction to decoupled Drupal
Publication date: 2017-09-26
Playlist: DrupalCon Vienna - Sept 2017
Description: 
	Among the industry trends currently upending the Drupal landscape, perhaps none has as significant an impact as the paradigm known as decoupled or headless Drupal. In decoupled Drupal architectures, core content management responsibilities such as database access, content modeling, and content workflow remain intact, with one crucial caveat — content presentation, whether located in a web application, a native mobile application, or an IoT application, are decoupled entirely from Drupal.

Decoupling Drupal comes with both benefits and drawbacks for organizations. While application developers will enjoy their newfound independence to build wholly decoupled applications, editors and marketers may suffer from the lack of in-context administration and live content preview.

Join me as we explore this new and exciting paradigm in our industry. We’ll dive into the nitty-gritty of what makes decoupled Drupal tick, why it’s so compelling for developers, and how it works from a technical standpoint.

Here are some of the topics we’ll cover:

What is decoupled Drupal?
How is a content service different from a traditional website?
Why decouple Drupal's front end from its back end?
What is a web service? What is a REST API?
Why are SDKs important to application developers?
What does API-first mean?
How do I decide whether it’s appropriate to decouple Drupal?
How does decoupled Drupal help or hurt the developer experience? the editorial experience?
Captions: 
	00:00:01,939 --> 00:00:08,490
had local tack hey everybody how's it

00:00:05,790 --> 00:00:11,610
going how's DrupalCon so far

00:00:08,490 --> 00:00:15,109
oh come on how's DrupalCon so far come

00:00:11,610 --> 00:00:16,609
on whoa how is that keynote this morning

00:00:15,109 --> 00:00:21,810
amazing right

00:00:16,609 --> 00:00:23,279
yes so I'm just gonna kind of riff for

00:00:21,810 --> 00:00:26,550
just a few minutes while we wait for

00:00:23,279 --> 00:00:28,560
some people to come in just to give you

00:00:26,550 --> 00:00:31,859
a little bit of a preface about what

00:00:28,560 --> 00:00:34,320
this presentation is this is meant to be

00:00:31,859 --> 00:00:37,620
a relatively high level introduction to

00:00:34,320 --> 00:00:40,350
decouple Drupal and so if you are

00:00:37,620 --> 00:00:42,719
technical if you're not a coder if

00:00:40,350 --> 00:00:44,850
you're an architect if you're a business

00:00:42,719 --> 00:00:47,309
person if you are just a Drupal user

00:00:44,850 --> 00:00:48,960
this session is for you if you've always

00:00:47,309 --> 00:00:50,969
wanted to know about what the underlying

00:00:48,960 --> 00:00:53,789
concepts are behind the couple Drupal

00:00:50,969 --> 00:00:56,940
and what this whole catchphrase actually

00:00:53,789 --> 00:00:58,949
means this is the session for you so how

00:00:56,940 --> 00:01:01,050
many people only heard the words

00:00:58,949 --> 00:01:03,629
decouple Drupal this morning in recess

00:01:01,050 --> 00:01:05,489
keno for the first time okay we got a

00:01:03,629 --> 00:01:07,920
few we got a few how many people have

00:01:05,489 --> 00:01:10,110
built something with decoupled Drupal

00:01:07,920 --> 00:01:11,369
all right we got quite a few all right

00:01:10,110 --> 00:01:14,070
so this might be a little bit of old

00:01:11,369 --> 00:01:15,659
news for you and how many people are not

00:01:14,070 --> 00:01:16,860
developers how many people are just at

00:01:15,659 --> 00:01:19,140
Drupal con just to kind of see what's

00:01:16,860 --> 00:01:21,390
going on great this is awesome because

00:01:19,140 --> 00:01:22,770
this presentations not gonna be a whole

00:01:21,390 --> 00:01:25,380
lot of coding it's not gonna be a whole

00:01:22,770 --> 00:01:28,650
lot of demoing it's really gonna be an

00:01:25,380 --> 00:01:30,689
overview of the entire landscape and for

00:01:28,650 --> 00:01:32,369
those of you who have seen some of my

00:01:30,689 --> 00:01:34,110
previous talks about decoupled Drupal

00:01:32,369 --> 00:01:36,420
you'll see some familiar elements but

00:01:34,110 --> 00:01:38,670
this is actually a complete revamp of

00:01:36,420 --> 00:01:42,450
that previous presentation that I've

00:01:38,670 --> 00:01:44,070
given in the past so with that let me

00:01:42,450 --> 00:01:45,600
just see the time here let me go ahead

00:01:44,070 --> 00:01:48,360
and get started we'll let some people

00:01:45,600 --> 00:01:52,920
filter in welcome once again to

00:01:48,360 --> 00:01:55,619
introduction to decouple Drupal has this

00:01:52,920 --> 00:01:58,350
view a common my name is Preston so I

00:01:55,619 --> 00:01:59,549
welcome you today to this session the

00:01:58,350 --> 00:02:01,890
hash tag if you'd like to use it as

00:01:59,549 --> 00:02:04,200
intro decoupled Drupal I've been a web

00:02:01,890 --> 00:02:05,700
developer for about 16 years and I've

00:02:04,200 --> 00:02:08,369
worked with Drupal for about nine of

00:02:05,700 --> 00:02:10,920
those years and currently I am director

00:02:08,369 --> 00:02:13,400
of research and innovation at Acquia so

00:02:10,920 --> 00:02:15,530
what we're gonna talk about today is

00:02:13,400 --> 00:02:17,360
of all what is this thing what is this

00:02:15,530 --> 00:02:19,370
decoupled rupal thing that everyone's so

00:02:17,360 --> 00:02:22,959
excited about and people cannot stop

00:02:19,370 --> 00:02:24,769
talking about and what is it that is so

00:02:22,959 --> 00:02:26,840
interesting about it what is it that

00:02:24,769 --> 00:02:29,150
motivates people to explore decoupled

00:02:26,840 --> 00:02:30,470
rupal and why is it so interesting we'll

00:02:29,150 --> 00:02:33,439
talk about from a technical standpoint

00:02:30,470 --> 00:02:35,900
not too technical I promise how exactly

00:02:33,439 --> 00:02:37,939
the decoupling occurs from the front end

00:02:35,900 --> 00:02:41,900
from the back end what is it that

00:02:37,939 --> 00:02:44,060
involves developers in this system and

00:02:41,900 --> 00:02:45,470
this architecture will talk a little bit

00:02:44,060 --> 00:02:46,849
about the risks and rewards of

00:02:45,470 --> 00:02:49,459
decoupling Drupal what are some of the

00:02:46,849 --> 00:02:51,170
problems that people encounter or some

00:02:49,459 --> 00:02:53,510
of the advantages that people encounter

00:02:51,170 --> 00:02:55,280
uniquely when they decoupled Drupal I'll

00:02:53,510 --> 00:02:56,329
delve briefly into web services in rest

00:02:55,280 --> 00:02:57,470
api's which are kind of the

00:02:56,329 --> 00:02:59,150
bread-and-butter and the underlying

00:02:57,470 --> 00:03:01,579
foundation of all decoupled

00:02:59,150 --> 00:03:03,079
architectures that involve Drupal I'll

00:03:01,579 --> 00:03:04,700
talk about developer experience an

00:03:03,079 --> 00:03:06,859
editorial experience and finally I want

00:03:04,700 --> 00:03:09,920
to end on a little bit of a sort of

00:03:06,859 --> 00:03:11,480
meditation on what decoupled rupal means

00:03:09,920 --> 00:03:12,889
for Drupal's future and I think this

00:03:11,480 --> 00:03:15,639
will be very important especially given

00:03:12,889 --> 00:03:17,540
what you heard in Teresa's keynote today

00:03:15,639 --> 00:03:20,569
so first of all what does decouple

00:03:17,540 --> 00:03:23,510
Drupal how many people have seen the

00:03:20,569 --> 00:03:24,919
movie the Martian okay great quite a

00:03:23,510 --> 00:03:26,329
majority of you that's great

00:03:24,919 --> 00:03:28,639
I mean you know I'm a big fan of sci-fi

00:03:26,329 --> 00:03:30,560
movies I love space movies and I like to

00:03:28,639 --> 00:03:33,169
use the Martian as an example of what

00:03:30,560 --> 00:03:34,549
exactly decouple Drupal means because if

00:03:33,169 --> 00:03:37,310
you don't know the story of the Martian

00:03:34,549 --> 00:03:40,609
what happens is Matt Damon plays an

00:03:37,310 --> 00:03:43,040
astronaut who is abandoned on the planet

00:03:40,609 --> 00:03:45,040
Mars and he discovers that all of his

00:03:43,040 --> 00:03:47,419
communication controls are completely

00:03:45,040 --> 00:03:50,359
obliterated he has no way to get in

00:03:47,419 --> 00:03:52,849
touch with Mission Control back home on

00:03:50,359 --> 00:03:56,269
earth and so what he does is he invents

00:03:52,849 --> 00:03:58,010
his own communication protocol I won't

00:03:56,269 --> 00:03:59,209
get into the details and I won't as you

00:03:58,010 --> 00:04:01,340
know I've already spoiled some of the

00:03:59,209 --> 00:04:03,739
movie obviously for you I apologize for

00:04:01,340 --> 00:04:06,049
that but what happens in the movie is

00:04:03,739 --> 00:04:10,010
that he is able to reach earth and

00:04:06,049 --> 00:04:12,979
contact earth by using his own kind of

00:04:10,010 --> 00:04:15,859
communications protocol so when you

00:04:12,979 --> 00:04:17,870
think about this from the context of

00:04:15,859 --> 00:04:21,229
decoupled architecture you can think of

00:04:17,870 --> 00:04:24,889
earth as one contiguous unit a single

00:04:21,229 --> 00:04:26,960
inseparable chunk of land mass that is

00:04:24,889 --> 00:04:29,630
floating around in space its

00:04:26,960 --> 00:04:31,280
simply put I'm not talking about this

00:04:29,630 --> 00:04:33,020
monolith and I'm also a fan of 2001 a

00:04:31,280 --> 00:04:35,690
Space Odyssey we're not talking about a

00:04:33,020 --> 00:04:38,180
tower of stone or a monument what we're

00:04:35,690 --> 00:04:42,770
talking about is a single contiguous

00:04:38,180 --> 00:04:45,050
piece of Rock a single piece of rock a

00:04:42,770 --> 00:04:45,590
single system that is inseparable from

00:04:45,050 --> 00:04:47,420
itself

00:04:45,590 --> 00:04:49,370
it's inextricable all the parts all the

00:04:47,420 --> 00:04:52,010
components of that rock are inextricable

00:04:49,370 --> 00:04:54,740
from each other and that's Drupal so

00:04:52,010 --> 00:04:58,430
what happens is in the movie there's a

00:04:54,740 --> 00:04:59,960
base on Mars and Earth will receive

00:04:58,430 --> 00:05:01,610
requests that are coming in from Mars

00:04:59,960 --> 00:05:03,380
these messages that are coming in from

00:05:01,610 --> 00:05:05,780
Mars and what happens is Earth actually

00:05:03,380 --> 00:05:08,810
responds to those messages with

00:05:05,780 --> 00:05:11,570
responses and if you think about it

00:05:08,810 --> 00:05:13,340
these decouple bases are decoupled from

00:05:11,570 --> 00:05:16,040
Earth they're separate from Earth they

00:05:13,340 --> 00:05:17,450
are sort of artifacts of man on these

00:05:16,040 --> 00:05:21,310
other planets but they are completely

00:05:17,450 --> 00:05:23,900
separate from Earth they're decoupled so

00:05:21,310 --> 00:05:26,480
this sentence here really illustrates

00:05:23,900 --> 00:05:29,000
what it means to be decoupled Drupal is

00:05:26,480 --> 00:05:30,980
a monolithic CMS just like the planet

00:05:29,000 --> 00:05:32,240
Earth the components of Earth cannot be

00:05:30,980 --> 00:05:34,490
separated from each other just like the

00:05:32,240 --> 00:05:37,340
components of Drupal at least

00:05:34,490 --> 00:05:39,890
out-of-the-box what Drupal in this case

00:05:37,340 --> 00:05:41,270
backs these decoupled applications and

00:05:39,890 --> 00:05:43,690
so all of these applications that are on

00:05:41,270 --> 00:05:47,300
different bases on different planets all

00:05:43,690 --> 00:05:50,240
consume content all consume messages

00:05:47,300 --> 00:05:51,890
from Drupal so what does that mean what

00:05:50,240 --> 00:05:54,970
that means is that you can consider a

00:05:51,890 --> 00:05:57,680
Drupal site to be a single website or

00:05:54,970 --> 00:06:00,140
repository for content a content service

00:05:57,680 --> 00:06:01,760
if you will and what happens is these

00:06:00,140 --> 00:06:02,840
requests and responses these messages

00:06:01,760 --> 00:06:06,680
that are going back and forth these

00:06:02,840 --> 00:06:08,420
communicate our HTTP requests or HTTP

00:06:06,680 --> 00:06:10,910
responses now if that's throwing you for

00:06:08,420 --> 00:06:12,080
a loop hang on for just a little bit for

00:06:10,910 --> 00:06:14,390
just a little bit because I'll explain

00:06:12,080 --> 00:06:16,190
all of this terminology but if you think

00:06:14,390 --> 00:06:18,320
of Mars and this base on Mars as a

00:06:16,190 --> 00:06:19,280
decoupled application this really

00:06:18,320 --> 00:06:21,320
actually helps us to illustrate

00:06:19,280 --> 00:06:25,330
metaphorically what it is that we're

00:06:21,320 --> 00:06:27,530
talking about so in this case we have an

00:06:25,330 --> 00:06:29,420
illustration a schematic that really

00:06:27,530 --> 00:06:31,700
shows really well what are the different

00:06:29,420 --> 00:06:33,740
components of a decoupled Drupal Drupal

00:06:31,700 --> 00:06:36,020
architecture involving one single

00:06:33,740 --> 00:06:38,210
decoupled application you have a site or

00:06:36,020 --> 00:06:39,740
a positive built in Drupal the site

00:06:38,210 --> 00:06:40,310
could have a public-facing front-end

00:06:39,740 --> 00:06:42,110
that is

00:06:40,310 --> 00:06:44,690
assumed by your end users of that Drupal

00:06:42,110 --> 00:06:46,220
site or it could be a private repository

00:06:44,690 --> 00:06:48,110
that no one has access to

00:06:46,220 --> 00:06:50,030
except for your JavaScript applications

00:06:48,110 --> 00:06:52,550
or any application that you might want

00:06:50,030 --> 00:06:54,380
to build now the key components here

00:06:52,550 --> 00:06:58,100
that I want to really stress here are

00:06:54,380 --> 00:06:59,600
that the REST API serves as H as an

00:06:58,100 --> 00:07:01,760
arbiter as a gatekeeper for those

00:06:59,600 --> 00:07:04,460
messages it transmits messages from

00:07:01,760 --> 00:07:06,110
Drupal out to those decoupled

00:07:04,460 --> 00:07:09,200
applications and on the client side on

00:07:06,110 --> 00:07:11,630
the application side you have an HTTP

00:07:09,200 --> 00:07:13,310
client which ingests those responses and

00:07:11,630 --> 00:07:17,540
translates them into things that

00:07:13,310 --> 00:07:20,270
applications can actually then use so

00:07:17,540 --> 00:07:22,340
simply put decoupled Drupal is the use

00:07:20,270 --> 00:07:25,190
of Drupal as a content service for

00:07:22,340 --> 00:07:28,580
consumption or manipulation by other

00:07:25,190 --> 00:07:30,170
applications which means that we're not

00:07:28,580 --> 00:07:33,050
talking about Drupal as a single website

00:07:30,170 --> 00:07:34,550
we're talking about Drupal as a single

00:07:33,050 --> 00:07:36,140
centerpiece of an vast ecosystem

00:07:34,550 --> 00:07:38,600
potentially of many different

00:07:36,140 --> 00:07:40,910
applications so Drupal can be used to

00:07:38,600 --> 00:07:42,350
back other back-end applications like if

00:07:40,910 --> 00:07:44,030
you're writing a rails app or if you're

00:07:42,350 --> 00:07:46,160
writing a PHP application or if you're

00:07:44,030 --> 00:07:47,780
writing something in Java as well as

00:07:46,160 --> 00:07:49,070
native mobile applications or native

00:07:47,780 --> 00:07:51,440
desktop applications that can

00:07:49,070 --> 00:07:53,240
communicate with Drupal single page

00:07:51,440 --> 00:07:55,070
applications and JavaScript for instance

00:07:53,240 --> 00:07:58,670
digital signage augmented reality

00:07:55,070 --> 00:08:01,610
interfaces and so on so forth now what

00:07:58,670 --> 00:08:03,470
really is crucial on the drupal side to

00:08:01,610 --> 00:08:05,090
make all of this happen is web services

00:08:03,470 --> 00:08:07,040
and I'll explain I'll explain a little

00:08:05,090 --> 00:08:09,740
bit later what it is that web services

00:08:07,040 --> 00:08:12,410
actually means as a term but web

00:08:09,740 --> 00:08:14,600
services like the core REST API the JSON

00:08:12,410 --> 00:08:16,340
API and Drupal can't rib and graph key

00:08:14,600 --> 00:08:18,350
well these are all typical entry points

00:08:16,340 --> 00:08:20,390
for these applications these Drupal

00:08:18,350 --> 00:08:23,030
consumers these decoupled Drupal

00:08:20,390 --> 00:08:24,530
consumers consumers are the applications

00:08:23,030 --> 00:08:27,710
that actually ingest

00:08:24,530 --> 00:08:28,760
content from Drupal so this

00:08:27,710 --> 00:08:30,500
architectural diagram really

00:08:28,760 --> 00:08:32,540
demonstrates very clearly what the

00:08:30,500 --> 00:08:34,550
difference is between a monolithic and a

00:08:32,540 --> 00:08:36,770
decoupled Drupal architecture on the

00:08:34,550 --> 00:08:38,480
left hand side you see a monolithic

00:08:36,770 --> 00:08:40,910
architecture the Drupal front-end that

00:08:38,480 --> 00:08:42,590
we know and love with twig and the theme

00:08:40,910 --> 00:08:44,120
layer and everything that you are used

00:08:42,590 --> 00:08:46,490
to when it comes to Drupal things like

00:08:44,120 --> 00:08:48,260
in-place editing that is actually a

00:08:46,490 --> 00:08:51,410
component of Drupal that is inextricable

00:08:48,260 --> 00:08:53,870
from Drupal but once we introduce the

00:08:51,410 --> 00:08:56,270
concept of a REST API and web services

00:08:53,870 --> 00:08:59,089
can actually convert the data that is in

00:08:56,270 --> 00:09:01,279
Drupal into what's known as JSON which

00:08:59,089 --> 00:09:03,320
is a format that can be used by

00:09:01,279 --> 00:09:05,600
decoupled applications to actually

00:09:03,320 --> 00:09:08,089
introduce data into their applications

00:09:05,600 --> 00:09:10,100
so the right-hand side shows you that

00:09:08,089 --> 00:09:12,380
the decoupled application handles all of

00:09:10,100 --> 00:09:13,970
the front-end concerns now this is still

00:09:12,380 --> 00:09:15,410
a little bit confusing we're gonna spend

00:09:13,970 --> 00:09:16,760
a little bit of time on these

00:09:15,410 --> 00:09:18,589
architectural diagrams

00:09:16,760 --> 00:09:20,600
the crucial thing I want to mention here

00:09:18,589 --> 00:09:23,029
is that any application that you can

00:09:20,600 --> 00:09:24,560
imagine can consume Drupal in this case

00:09:23,029 --> 00:09:26,390
we have a single page application

00:09:24,560 --> 00:09:27,680
running on JavaScript and that could be

00:09:26,390 --> 00:09:29,960
something that's using nodejs

00:09:27,680 --> 00:09:32,270
on the right-hand side we have a native

00:09:29,960 --> 00:09:34,730
Android application a mobile app which

00:09:32,270 --> 00:09:36,860
is in written in Java and this is also

00:09:34,730 --> 00:09:39,560
consuming Drupal but the thing I want to

00:09:36,860 --> 00:09:42,440
emphasize here is that Drupal can serve

00:09:39,560 --> 00:09:43,610
as this centerpiece of any number of

00:09:42,440 --> 00:09:46,040
various applications that you can

00:09:43,610 --> 00:09:47,900
imagine so when you think about it it's

00:09:46,040 --> 00:09:49,370
just like Earth having a whole bunch of

00:09:47,900 --> 00:09:52,640
satellites and a whole bunch of bases

00:09:49,370 --> 00:09:54,320
orbiting around the planet this is a

00:09:52,640 --> 00:09:56,750
really interesting image because what it

00:09:54,320 --> 00:09:59,750
shows is that not only can you use any

00:09:56,750 --> 00:10:01,580
language in front of Drupal you can also

00:09:59,750 --> 00:10:05,420
actually use PHP in front of Drupal if

00:10:01,580 --> 00:10:06,650
you so desire now I want to take a

00:10:05,420 --> 00:10:08,480
little bit of a brief moment here and

00:10:06,650 --> 00:10:09,860
explain well what's with all the

00:10:08,480 --> 00:10:11,900
terminology we've heard a lot of

00:10:09,860 --> 00:10:14,089
different words all over the course of

00:10:11,900 --> 00:10:16,070
this kind of trend there's decoupled

00:10:14,089 --> 00:10:17,740
there's headless there's API first what

00:10:16,070 --> 00:10:20,839
do all these words actually mean

00:10:17,740 --> 00:10:23,150
well decoupled really comes about in a

00:10:20,839 --> 00:10:25,490
micro services architecture discussion

00:10:23,150 --> 00:10:27,560
so when you're talking about let's make

00:10:25,490 --> 00:10:30,830
every component have a single purpose

00:10:27,560 --> 00:10:34,370
and a single sort of input and output

00:10:30,830 --> 00:10:36,020
that is really easy and make sure that

00:10:34,370 --> 00:10:37,730
every single architecture that we build

00:10:36,020 --> 00:10:40,190
is actually a conjunct of these small

00:10:37,730 --> 00:10:42,380
simple components that's what decoupled

00:10:40,190 --> 00:10:44,570
means in this context and what's really

00:10:42,380 --> 00:10:46,970
nice about using the word decoupled to

00:10:44,570 --> 00:10:49,490
describe decoupled Drupal is that Drupal

00:10:46,970 --> 00:10:52,459
can serve as the front end also for any

00:10:49,490 --> 00:10:56,089
number of systems such as a CRM system

00:10:52,459 --> 00:10:57,440
or an e-commerce system as well headless

00:10:56,089 --> 00:10:59,330
is a term that a lot of people use as

00:10:57,440 --> 00:11:01,190
well and it's usually used to refer to a

00:10:59,330 --> 00:11:04,070
single application a single page

00:11:01,190 --> 00:11:06,470
application that often is consuming that

00:11:04,070 --> 00:11:07,329
CMS but headless can be a little bit

00:11:06,470 --> 00:11:09,499
misleading

00:11:07,329 --> 00:11:11,749
because you can have things like

00:11:09,499 --> 00:11:13,550
bodyless or and there's a whole lot of

00:11:11,749 --> 00:11:14,959
new words that have been introduced but

00:11:13,550 --> 00:11:17,569
the reason why headless is a little bit

00:11:14,959 --> 00:11:19,879
misleading is because headless in the

00:11:17,569 --> 00:11:22,100
original software architecture context

00:11:19,879 --> 00:11:25,069
means software that can be consumed

00:11:22,100 --> 00:11:27,649
without using the UI without using an

00:11:25,069 --> 00:11:29,540
actual visual interface but we already

00:11:27,649 --> 00:11:31,100
have that actually in Drupal we have an

00:11:29,540 --> 00:11:33,350
example of headless software in Drupal

00:11:31,100 --> 00:11:34,850
right now which is trush and there will

00:11:33,350 --> 00:11:36,829
be a presentation about rush in this

00:11:34,850 --> 00:11:38,509
room next to rush is a command-line

00:11:36,829 --> 00:11:41,660
interface that allows you to work with

00:11:38,509 --> 00:11:43,490
Drupal and operate Drupal in a headless

00:11:41,660 --> 00:11:45,050
way and so this is the reason why I

00:11:43,490 --> 00:11:46,939
prefer to use the term decoupled because

00:11:45,050 --> 00:11:48,139
it really is illustrative of the

00:11:46,939 --> 00:11:51,319
different possibilities that are

00:11:48,139 --> 00:11:53,470
available now what about API first API

00:11:51,319 --> 00:11:55,610
first typically is used to describe

00:11:53,470 --> 00:11:58,040
technology or an architecture that is

00:11:55,610 --> 00:12:00,740
focused on designing the API first and

00:11:58,040 --> 00:12:02,509
foremost the API is king the API is the

00:12:00,740 --> 00:12:05,540
most important component of this

00:12:02,509 --> 00:12:07,550
architecture now in Drupal's case when

00:12:05,540 --> 00:12:09,199
you work on a decoupled architecture and

00:12:07,550 --> 00:12:11,329
you have decoupled applications that are

00:12:09,199 --> 00:12:13,189
consuming Drupal from that standpoint

00:12:11,329 --> 00:12:14,779
you have to make sure that the API is

00:12:13,189 --> 00:12:17,600
very robust and so when you hear the

00:12:14,779 --> 00:12:20,000
term API first oftentimes it means that

00:12:17,600 --> 00:12:22,970
a big focus of those developers is on

00:12:20,000 --> 00:12:24,860
making those API is robust now what are

00:12:22,970 --> 00:12:27,709
some of the motivations behind decoupled

00:12:24,860 --> 00:12:29,720
drupal well for marketers and for

00:12:27,709 --> 00:12:31,370
publishers the couple Drupal really

00:12:29,720 --> 00:12:34,009
offers that promise of omni-channel

00:12:31,370 --> 00:12:36,050
delivery of delivering content and

00:12:34,009 --> 00:12:38,120
publishing content everywhere on every

00:12:36,050 --> 00:12:40,100
single conceivable channel whether it's

00:12:38,120 --> 00:12:42,319
a Roku application or your Apple watch

00:12:40,100 --> 00:12:43,610
or the screen on your fridge which

00:12:42,319 --> 00:12:45,079
doesn't exist yet and it's a little

00:12:43,610 --> 00:12:47,180
creepy to be honest to have a screen on

00:12:45,079 --> 00:12:49,040
your fridge but these are all things

00:12:47,180 --> 00:12:52,129
that can be powered by Drupal and can

00:12:49,040 --> 00:12:54,439
receive content from Drupal and this is

00:12:52,129 --> 00:12:55,879
a really crucial problem in the CMS

00:12:54,439 --> 00:12:58,490
space right now because we're really no

00:12:55,879 --> 00:12:59,720
longer dealing with just CMS's we're

00:12:58,490 --> 00:13:02,240
really starting to deal with other

00:12:59,720 --> 00:13:05,120
channels these new interfaces these new

00:13:02,240 --> 00:13:07,339
experiences these new environments that

00:13:05,120 --> 00:13:09,980
are now ways to experience content and

00:13:07,339 --> 00:13:12,649
consume data all of these new devices

00:13:09,980 --> 00:13:14,569
every day have to have some kind of a

00:13:12,649 --> 00:13:17,209
data source have to have some kind of an

00:13:14,569 --> 00:13:19,510
underlying storage system to house all

00:13:17,209 --> 00:13:22,000
of that content and all of that data

00:13:19,510 --> 00:13:23,589
now the other thing is that we also have

00:13:22,000 --> 00:13:25,510
channels that are coming about that

00:13:23,589 --> 00:13:26,230
we've never heard of in the next five to

00:13:25,510 --> 00:13:29,230
ten years

00:13:26,230 --> 00:13:31,029
IOT front-ends for instance will become

00:13:29,230 --> 00:13:33,399
a very large part of the way that we

00:13:31,029 --> 00:13:35,199
consume content so when you think about

00:13:33,399 --> 00:13:36,250
the fact that all of these new channels

00:13:35,199 --> 00:13:38,110
are appearing all of these new

00:13:36,250 --> 00:13:40,120
experiences are really changing and

00:13:38,110 --> 00:13:41,680
revolutionising the way that we consume

00:13:40,120 --> 00:13:43,149
content whether it's through augmented

00:13:41,680 --> 00:13:45,279
reality whether it's through our

00:13:43,149 --> 00:13:48,100
raspberry pies whether it's through our

00:13:45,279 --> 00:13:50,199
Amazon echo all of these technologies

00:13:48,100 --> 00:13:52,329
point to a future where we have to think

00:13:50,199 --> 00:13:54,730
about content in a decoupled way anyways

00:13:52,329 --> 00:13:58,420
and so it's a good idea to think about

00:13:54,730 --> 00:13:59,889
this right away from this standpoint now

00:13:58,420 --> 00:14:02,110
what about for developers we talked

00:13:59,889 --> 00:14:03,760
about what it means to be decoupled and

00:14:02,110 --> 00:14:05,170
what it means to use decoupled Drupal

00:14:03,760 --> 00:14:06,670
from the marketers standpoint or for the

00:14:05,170 --> 00:14:09,550
editor standpoint or the publisher

00:14:06,670 --> 00:14:11,709
standpoint but for developers decoupled

00:14:09,550 --> 00:14:13,510
Drupal offers the promise of front-end

00:14:11,709 --> 00:14:16,360
freedom how many people in the room have

00:14:13,510 --> 00:14:18,220
tried react or angular or ember or some

00:14:16,360 --> 00:14:20,769
of these really nifty front-ends right

00:14:18,220 --> 00:14:22,630
so a lot of us have and oftentimes this

00:14:20,769 --> 00:14:25,240
can be a somewhat freeing experience

00:14:22,630 --> 00:14:26,860
because of the fact that Drupal has a

00:14:25,240 --> 00:14:30,190
lot of expectations for how the

00:14:26,860 --> 00:14:33,370
front-end delivery works so if we think

00:14:30,190 --> 00:14:35,529
about what it means for developers let's

00:14:33,370 --> 00:14:37,029
delve into a little bit about why it is

00:14:35,529 --> 00:14:38,440
that people are so interested in

00:14:37,029 --> 00:14:40,060
decoupled front ends I want to give you

00:14:38,440 --> 00:14:42,069
a little bit of history a little bit of

00:14:40,060 --> 00:14:44,380
context and give you a nice kind of

00:14:42,069 --> 00:14:46,690
trajectory of how it is that developers

00:14:44,380 --> 00:14:48,490
have gone in this direction so you've

00:14:46,690 --> 00:14:50,620
seen this before this is once again the

00:14:48,490 --> 00:14:52,209
monolithic Drupal architecture you have

00:14:50,620 --> 00:14:54,819
a Drupal front-end once again that is

00:14:52,209 --> 00:14:56,410
inextricable from the rest of Drupal and

00:14:54,819 --> 00:14:58,360
you have a divide here as you can see

00:14:56,410 --> 00:15:03,250
there's a line separating the client

00:14:58,360 --> 00:15:06,040
side from the server side now originally

00:15:03,250 --> 00:15:08,410
in the late 90s and early 2000s before

00:15:06,040 --> 00:15:10,720
the advent of Ajax what used to happen

00:15:08,410 --> 00:15:11,889
is that if you had no caching on Drupal

00:15:10,720 --> 00:15:15,250
and this is once again if you have no

00:15:11,889 --> 00:15:17,139
cash system if you wanted to have a

00:15:15,250 --> 00:15:19,420
forum like I subscribed to our

00:15:17,139 --> 00:15:21,610
newsletter forum and then submit that

00:15:19,420 --> 00:15:23,680
form and get a new state of that

00:15:21,610 --> 00:15:26,860
application a new application state that

00:15:23,680 --> 00:15:29,800
shows that the subscription has been

00:15:26,860 --> 00:15:31,540
successfully registered what actually

00:15:29,800 --> 00:15:32,810
happens is that you have to incur two

00:15:31,540 --> 00:15:34,220
bootstraps

00:15:32,810 --> 00:15:36,200
by bootstrap I mean then you have to go

00:15:34,220 --> 00:15:38,630
through the entire process of Drupal

00:15:36,200 --> 00:15:40,370
twice because you're actually creating a

00:15:38,630 --> 00:15:41,990
full page refresh you're actually

00:15:40,370 --> 00:15:44,300
causing drupal to have to go through its

00:15:41,990 --> 00:15:49,040
entire pathway to rendering out this

00:15:44,300 --> 00:15:51,020
front-end experience twice now when you

00:15:49,040 --> 00:15:52,370
look at this and once again this does

00:15:51,020 --> 00:15:53,480
get a little bit more complicated but I

00:15:52,370 --> 00:15:55,910
want to try to explain this in the

00:15:53,480 --> 00:15:57,830
clearest way possible which is that once

00:15:55,910 --> 00:16:00,070
we introduce Ajax once we introduce

00:15:57,830 --> 00:16:02,000
jQuery and have all of these

00:16:00,070 --> 00:16:03,740
possibilities of going into the

00:16:02,000 --> 00:16:05,810
asynchronous direction which means that

00:16:03,740 --> 00:16:07,640
we're no longer just having full page

00:16:05,810 --> 00:16:09,830
refreshes we're actually having

00:16:07,640 --> 00:16:12,230
asynchronous requests going into the

00:16:09,830 --> 00:16:14,360
server while our page is already loaded

00:16:12,230 --> 00:16:16,220
on the client side now you've probably

00:16:14,360 --> 00:16:17,870
seen on the right side this kind of

00:16:16,220 --> 00:16:19,970
experience before where you hit submit

00:16:17,870 --> 00:16:22,010
and instead of you having to see a

00:16:19,970 --> 00:16:24,650
refresh of your browser you actually get

00:16:22,010 --> 00:16:25,850
a little spinner a little loader and

00:16:24,650 --> 00:16:27,860
then you get a little success message

00:16:25,850 --> 00:16:29,510
and our Ajax framework in Drupal

00:16:27,860 --> 00:16:30,890
actually works in this way if you've

00:16:29,510 --> 00:16:32,210
ever seen that little blue circle that

00:16:30,890 --> 00:16:34,010
kind of spins around every time you

00:16:32,210 --> 00:16:37,220
conduct a search that's the kind of

00:16:34,010 --> 00:16:38,330
thing that you're seeing here so this is

00:16:37,220 --> 00:16:41,450
an example of client-side JavaScript

00:16:38,330 --> 00:16:43,850
this is an example of JavaScript being

00:16:41,450 --> 00:16:45,620
solely available on the front end and in

00:16:43,850 --> 00:16:47,390
the past we had jQuery and this is

00:16:45,620 --> 00:16:49,220
something that Drupal adopted very early

00:16:47,390 --> 00:16:51,650
on and was it was a very early adopter

00:16:49,220 --> 00:16:54,290
and actually led to possibly a great

00:16:51,650 --> 00:16:56,000
deal of popularity for jQuery now

00:16:54,290 --> 00:16:57,800
there's other ways to do client-side

00:16:56,000 --> 00:16:59,930
JavaScript as well because what if you

00:16:57,800 --> 00:17:02,210
want to have a JavaScript framework like

00:16:59,930 --> 00:17:04,939
angular or ember or react actually take

00:17:02,210 --> 00:17:07,550
over from the page for you actually go

00:17:04,939 --> 00:17:10,400
ahead and actually a hand off the page

00:17:07,550 --> 00:17:12,079
over to a JavaScript framework in this

00:17:10,400 --> 00:17:14,480
context the reason why people wanted to

00:17:12,079 --> 00:17:17,179
do this is to do things like client-side

00:17:14,480 --> 00:17:19,400
rendering instead of having let's say

00:17:17,179 --> 00:17:21,620
just a little message pop-up or just a

00:17:19,400 --> 00:17:23,839
little part of the page replaced by an

00:17:21,620 --> 00:17:25,790
asynchronous response what if we

00:17:23,839 --> 00:17:28,370
actually rerender entire parts of the

00:17:25,790 --> 00:17:29,750
page on the client side and go ahead and

00:17:28,370 --> 00:17:31,700
actually make this a lot more powerful

00:17:29,750 --> 00:17:33,770
and illustrate application state in this

00:17:31,700 --> 00:17:36,200
way so what happens here is that you

00:17:33,770 --> 00:17:38,000
have a java application framework that

00:17:36,200 --> 00:17:41,150
is submitting an asynchronous request

00:17:38,000 --> 00:17:43,670
just like ajax over to drupal getting a

00:17:41,150 --> 00:17:46,990
response back and of course you see the

00:17:43,670 --> 00:17:49,000
page reload now

00:17:46,990 --> 00:17:52,090
sorry a portion of the page reload not

00:17:49,000 --> 00:17:53,440
the entire full page now this idea is

00:17:52,090 --> 00:17:54,970
really interesting because as you can

00:17:53,440 --> 00:17:56,110
see on the right hand side here what

00:17:54,970 --> 00:17:57,820
we're doing here is we're actually

00:17:56,110 --> 00:18:00,040
separating the page into different

00:17:57,820 --> 00:18:01,360
concerns so on the left hand side we

00:18:00,040 --> 00:18:03,070
have our content which is governed by

00:18:01,360 --> 00:18:04,929
Drupal it's the left hand side of the

00:18:03,070 --> 00:18:07,150
layout on the right hand side of the

00:18:04,929 --> 00:18:08,650
layout we have a dynamic application

00:18:07,150 --> 00:18:10,510
something that requires a little bit

00:18:08,650 --> 00:18:11,559
more client-side state management a

00:18:10,510 --> 00:18:13,570
little bit more of that client-side

00:18:11,559 --> 00:18:15,940
interaction and so what you're seeing on

00:18:13,570 --> 00:18:19,650
the right hand side is controlled by the

00:18:15,940 --> 00:18:21,910
JavaScript application framework now

00:18:19,650 --> 00:18:25,000
recently in the last four to five years

00:18:21,910 --> 00:18:27,610
we've had what many people have termed

00:18:25,000 --> 00:18:29,260
the JavaScript Renaissance which really

00:18:27,610 --> 00:18:32,020
brought in this interesting era of

00:18:29,260 --> 00:18:34,120
innovation and development practices and

00:18:32,020 --> 00:18:35,940
new ways of actually using JavaScript

00:18:34,120 --> 00:18:38,740
and of course one of those is

00:18:35,940 --> 00:18:41,620
server-side JavaScript which is the idea

00:18:38,740 --> 00:18:43,780
that back in the day I used to write

00:18:41,620 --> 00:18:45,670
JavaScript back in the day and people

00:18:43,780 --> 00:18:47,080
used to kind of say oh well JavaScript

00:18:45,670 --> 00:18:48,220
is just toy language it's you know it's

00:18:47,080 --> 00:18:49,600
only on the client side you can't do

00:18:48,220 --> 00:18:51,309
anything really actually cool with it

00:18:49,600 --> 00:18:52,929
you know it's not really a proper

00:18:51,309 --> 00:18:54,370
language and that was really the results

00:18:52,929 --> 00:18:55,360
of a lot of browsers having different

00:18:54,370 --> 00:18:58,330
implementations and different ideas

00:18:55,360 --> 00:19:00,100
about how javascript should work but

00:18:58,330 --> 00:19:02,350
server-side JavaScript really changed

00:19:00,100 --> 00:19:04,660
that because now JavaScript is serious

00:19:02,350 --> 00:19:07,360
now it's the real deal now it's actually

00:19:04,660 --> 00:19:08,590
meaningful and weighty because it meant

00:19:07,360 --> 00:19:12,340
that client-side frameworks could be

00:19:08,590 --> 00:19:14,650
executed on a server-side so Universal

00:19:12,340 --> 00:19:16,390
JavaScript is an idea you might have

00:19:14,650 --> 00:19:19,059
heard the term isomorphic javascript

00:19:16,390 --> 00:19:21,460
this is an idea that involves shared

00:19:19,059 --> 00:19:23,590
code in the form of JavaScript framework

00:19:21,460 --> 00:19:25,210
executions now if you're really confused

00:19:23,590 --> 00:19:28,030
by what that actually means let me just

00:19:25,210 --> 00:19:30,370
show you exactly what that means so in

00:19:28,030 --> 00:19:32,260
this case we have server-side JavaScript

00:19:30,370 --> 00:19:35,080
on the right hand side that you see here

00:19:32,260 --> 00:19:36,130
and it's powered by nodejs and what

00:19:35,080 --> 00:19:38,350
we're actually seeing is that we have

00:19:36,130 --> 00:19:40,420
two executions of the same framework so

00:19:38,350 --> 00:19:42,730
if you load angular in nodejs it will

00:19:40,420 --> 00:19:44,050
execute on the server side once give you

00:19:42,730 --> 00:19:46,450
that initial state of your application

00:19:44,050 --> 00:19:48,040
that you have on the client side and

00:19:46,450 --> 00:19:50,559
then from that point forward the

00:19:48,040 --> 00:19:52,450
execution on the client side of the

00:19:50,559 --> 00:19:54,130
framework takes over so there's a

00:19:52,450 --> 00:19:57,070
handoff just in the same way that we had

00:19:54,130 --> 00:20:00,890
before except this handoff is able to

00:19:57,070 --> 00:20:03,040
share code between client and server now

00:20:00,890 --> 00:20:05,300
what this means is that now you have

00:20:03,040 --> 00:20:06,950
synchronous requests that are going to

00:20:05,300 --> 00:20:08,750
Drupal because no js' is executing a

00:20:06,950 --> 00:20:11,030
framework and having to render and that

00:20:08,750 --> 00:20:11,990
goes to Drupal and you have an HTTP

00:20:11,030 --> 00:20:14,360
request is happening asynchronously

00:20:11,990 --> 00:20:16,220
every time the client-side updates at

00:20:14,360 --> 00:20:18,080
state and so what you're actually seeing

00:20:16,220 --> 00:20:19,820
here is a fully decoupled example where

00:20:18,080 --> 00:20:23,810
every single portion of the page is

00:20:19,820 --> 00:20:25,940
governed by JavaScript so this is an

00:20:23,810 --> 00:20:28,130
illustration of how Universal JavaScript

00:20:25,940 --> 00:20:31,820
works in a non Drupal setting if you

00:20:28,130 --> 00:20:33,230
just have an ojs driven web service you

00:20:31,820 --> 00:20:35,240
have a framework that's executed

00:20:33,230 --> 00:20:37,580
server-side what happens here is that in

00:20:35,240 --> 00:20:39,500
a synchronous fashion nodejs will

00:20:37,580 --> 00:20:41,390
execute the framework and get you the

00:20:39,500 --> 00:20:42,950
data that you need by going to the REST

00:20:41,390 --> 00:20:45,380
API or whatever datasource

00:20:42,950 --> 00:20:47,810
no J's provides it could be a MongoDB

00:20:45,380 --> 00:20:50,420
database for instance it renders out

00:20:47,810 --> 00:20:52,610
that HTML and then it actually flushes

00:20:50,420 --> 00:20:55,430
out to the browser that initial state of

00:20:52,610 --> 00:20:56,390
that HTML from there the JavaScript

00:20:55,430 --> 00:20:58,280
framework that's loaded on the

00:20:56,390 --> 00:21:00,080
client-side will actually perform the

00:20:58,280 --> 00:21:02,360
bindings necessary to update that state

00:21:00,080 --> 00:21:04,400
will perform rehydration if necessary or

00:21:02,360 --> 00:21:08,270
other client-side state updates as

00:21:04,400 --> 00:21:09,440
needed and from then on any updates that

00:21:08,270 --> 00:21:11,060
are needed further on the client-side

00:21:09,440 --> 00:21:13,460
any asynchronous updates any new

00:21:11,060 --> 00:21:14,930
client-side updates will go through this

00:21:13,460 --> 00:21:18,560
asynchronous process of going all the

00:21:14,930 --> 00:21:20,510
way back to no js' now what does this

00:21:18,560 --> 00:21:21,950
mean in the triple context what this

00:21:20,510 --> 00:21:24,920
means the triple context is that Drupal

00:21:21,950 --> 00:21:26,320
actually serves as a gatekeeper as an

00:21:24,920 --> 00:21:30,320
arbiter of all of these different

00:21:26,320 --> 00:21:32,360
messages both on a synchronous level and

00:21:30,320 --> 00:21:34,310
an ASA to Venus level because you have

00:21:32,360 --> 00:21:36,320
no js' executing the framework which

00:21:34,310 --> 00:21:39,260
calls Drupal's REST API and responds

00:21:36,320 --> 00:21:41,210
back it renders out that HTML and then

00:21:39,260 --> 00:21:42,710
on the client side what happens is

00:21:41,210 --> 00:21:45,140
anything that needs to be updated

00:21:42,710 --> 00:21:47,300
will also go back straight to Drupal so

00:21:45,140 --> 00:21:49,220
this is the way that decoupled drupal

00:21:47,300 --> 00:21:51,860
architectures using javascript typically

00:21:49,220 --> 00:21:53,150
work now this is very powerful because

00:21:51,860 --> 00:21:55,730
what it means is that you can actually

00:21:53,150 --> 00:21:57,560
share the same framework across server

00:21:55,730 --> 00:21:58,940
and client and this is a very very

00:21:57,560 --> 00:22:01,100
interesting proposition for a lot of

00:21:58,940 --> 00:22:02,960
people and for a lot of developers it's

00:22:01,100 --> 00:22:06,050
really a very unique idea and it's

00:22:02,960 --> 00:22:08,330
something that Drupal doesn't have so

00:22:06,050 --> 00:22:10,730
this is what we call fully decoupled

00:22:08,330 --> 00:22:12,350
Drupal this is what we see as being a

00:22:10,730 --> 00:22:14,440
node.js server in front of Drupal

00:22:12,350 --> 00:22:19,000
serving out the front end and the

00:22:14,440 --> 00:22:20,139
and has no control by Drupal you've

00:22:19,000 --> 00:22:21,909
probably heard the term progressively

00:22:20,139 --> 00:22:24,909
decoupled Drupal which actually involves

00:22:21,909 --> 00:22:26,470
rather an interpolation of this

00:22:24,909 --> 00:22:28,570
JavaScript framework inside of the

00:22:26,470 --> 00:22:30,519
Drupal front-end in this case Drupal

00:22:28,570 --> 00:22:31,750
still controls the entirety of the front

00:22:30,519 --> 00:22:34,149
end and still controls a lot of these

00:22:31,750 --> 00:22:35,950
issues but from the point that the

00:22:34,149 --> 00:22:37,840
client-side appears from the point that

00:22:35,950 --> 00:22:39,970
Drupal flushes out that markup out to

00:22:37,840 --> 00:22:42,220
the browser then you have the framework

00:22:39,970 --> 00:22:44,950
take over from there it's a different

00:22:42,220 --> 00:22:47,110
kind of handoff so what are some risks

00:22:44,950 --> 00:22:48,940
and rewards of decouple Drupal well

00:22:47,110 --> 00:22:51,039
first of all a lot of the reasons why

00:22:48,940 --> 00:22:53,259
people liked duty couple Drupal is

00:22:51,039 --> 00:22:55,179
because of separation of concerns this

00:22:53,259 --> 00:22:56,740
idea of structure versus presentation I

00:22:55,179 --> 00:22:58,779
want to separate my content from my

00:22:56,740 --> 00:23:00,820
presentation I don't actually want

00:22:58,779 --> 00:23:03,610
Drupal to have any control over my

00:23:00,820 --> 00:23:04,840
visual presentation similarly I don't

00:23:03,610 --> 00:23:07,409
want my front-end to have any control

00:23:04,840 --> 00:23:09,340
over how the data is actually

00:23:07,409 --> 00:23:11,049
provisioned I want to be able to just

00:23:09,340 --> 00:23:13,860
have data structures that I can consume

00:23:11,049 --> 00:23:16,600
very easily one of the other reasons is

00:23:13,860 --> 00:23:17,950
pipeline development if you haven't

00:23:16,600 --> 00:23:19,809
heard this term what it means is that

00:23:17,950 --> 00:23:22,960
you have two teams working in parallel

00:23:19,809 --> 00:23:24,220
against a single API so if you have an

00:23:22,960 --> 00:23:25,809
API in the middle that you've already

00:23:24,220 --> 00:23:27,639
designed and built out and it works

00:23:25,809 --> 00:23:29,799
great even if it's just a dummy API that

00:23:27,639 --> 00:23:32,139
doesn't actually work an API design

00:23:29,799 --> 00:23:33,759
first approach gives your front-end team

00:23:32,139 --> 00:23:35,740
and your back in team independence

00:23:33,759 --> 00:23:36,970
because the team that's working on the

00:23:35,740 --> 00:23:38,950
java scripts or the team that's working

00:23:36,970 --> 00:23:41,200
on the other application and the team

00:23:38,950 --> 00:23:43,210
that's working on the backend the api in

00:23:41,200 --> 00:23:47,110
drupal can work independently and in

00:23:43,210 --> 00:23:50,230
parallel also a lot of the reasons why I

00:23:47,110 --> 00:23:51,789
hear people liking to use decoupled

00:23:50,230 --> 00:23:54,490
Drupal is because you can have the

00:23:51,789 --> 00:23:56,230
opportunity to hide the CMS you know one

00:23:54,490 --> 00:23:57,519
of the things that I've heard from a lot

00:23:56,230 --> 00:23:58,840
of security folks I don't know if this

00:23:57,519 --> 00:24:02,110
is actually I'm not a security person

00:23:58,840 --> 00:24:04,179
but keeping the CMS far from public view

00:24:02,110 --> 00:24:06,129
and keeping it so that random people

00:24:04,179 --> 00:24:07,539
can't log into it is actually

00:24:06,129 --> 00:24:10,539
increasingly a best practice that I've

00:24:07,539 --> 00:24:12,519
noticed and also one thing that I do

00:24:10,539 --> 00:24:14,950
want to say which is you know a bit of a

00:24:12,519 --> 00:24:17,620
of an interesting characteristic is

00:24:14,950 --> 00:24:19,570
easier resourcing nowadays everyone's

00:24:17,620 --> 00:24:21,070
learning JavaScript nowadays Drupal

00:24:19,570 --> 00:24:22,990
developers are oftentimes considered a

00:24:21,070 --> 00:24:24,279
little bit more expensive and so when

00:24:22,990 --> 00:24:26,080
you consider that you have all of these

00:24:24,279 --> 00:24:28,120
front-end developers that are a lot

00:24:26,080 --> 00:24:29,980
cheaper than gerbil developers you

00:24:28,120 --> 00:24:33,490
get to the point where you're having a

00:24:29,980 --> 00:24:35,620
lot of push and a lot of demand for the

00:24:33,490 --> 00:24:37,660
couple Drupal but there are a lot of

00:24:35,620 --> 00:24:40,510
risks of decoupled Ruple the first is

00:24:37,660 --> 00:24:42,730
that you lose contextual administration

00:24:40,510 --> 00:24:44,530
and editing what that means is that

00:24:42,730 --> 00:24:46,270
crucial features that were introduced in

00:24:44,530 --> 00:24:49,380
Drupal 8 things like in-place editing

00:24:46,270 --> 00:24:51,580
things like the toolbar or things like

00:24:49,380 --> 00:24:52,900
contextual links that have been part and

00:24:51,580 --> 00:24:55,330
parcel of the Drupal front-end for a

00:24:52,900 --> 00:24:57,820
very long time which are oftentimes used

00:24:55,330 --> 00:24:59,620
by editors are lost completely because

00:24:57,820 --> 00:25:01,920
you can't actually introduce those into

00:24:59,620 --> 00:25:04,210
a JavaScript front-end very easily or

00:25:01,920 --> 00:25:06,220
any other front of a native mobile

00:25:04,210 --> 00:25:08,440
front-end for example also

00:25:06,220 --> 00:25:10,360
maintainability now you have both a

00:25:08,440 --> 00:25:12,340
Drupal service and you have consumer

00:25:10,360 --> 00:25:13,540
applications that you have to manage so

00:25:12,340 --> 00:25:14,800
this requires a lot of planning and a

00:25:13,540 --> 00:25:16,060
lot of thinking about how your team's

00:25:14,800 --> 00:25:19,690
going to operate and how you're going to

00:25:16,060 --> 00:25:21,610
manage your project there's also an

00:25:19,690 --> 00:25:22,840
additional point of failure because now

00:25:21,610 --> 00:25:24,520
that you're not using Drupal as a

00:25:22,840 --> 00:25:27,390
monolithic architecture and you're

00:25:24,520 --> 00:25:29,800
introducing other services and other

00:25:27,390 --> 00:25:31,180
components to your architecture what

00:25:29,800 --> 00:25:32,890
this means is that things like nodejs

00:25:31,180 --> 00:25:35,230
downtime where things like downtime of

00:25:32,890 --> 00:25:37,480
your application server can lead to

00:25:35,230 --> 00:25:39,760
completely inaccessible content because

00:25:37,480 --> 00:25:42,400
now Drupal is not accessible in the

00:25:39,760 --> 00:25:43,480
traditional way so once you introduce

00:25:42,400 --> 00:25:46,420
something that's in front of your lamp

00:25:43,480 --> 00:25:48,910
stack that is powering Drupal it really

00:25:46,420 --> 00:25:50,830
causes a lot of problems also there's a

00:25:48,910 --> 00:25:51,790
lot of onboarding overhead because the

00:25:50,830 --> 00:25:53,350
developers who are building these

00:25:51,790 --> 00:25:55,960
applications need to learn how to

00:25:53,350 --> 00:25:58,630
consume Drupal's api's need to learn how

00:25:55,960 --> 00:26:00,100
to consume Drupal's content and Drupal

00:25:58,630 --> 00:26:02,290
developers have to change focus and

00:26:00,100 --> 00:26:04,720
learn about how to make their lives

00:26:02,290 --> 00:26:07,180
easier so this kind of transactional

00:26:04,720 --> 00:26:11,140
change is very interesting and one thing

00:26:07,180 --> 00:26:12,940
that we see very little of sort of we

00:26:11,140 --> 00:26:14,560
see a lot of these days so here's a

00:26:12,940 --> 00:26:15,970
summary as you can see all of these four

00:26:14,560 --> 00:26:18,790
areas and this is once again an

00:26:15,970 --> 00:26:20,770
exhaustive list this is not a sort of

00:26:18,790 --> 00:26:22,240
comprehensive list of the risks and

00:26:20,770 --> 00:26:24,010
rewards but this really demonstrates to

00:26:22,240 --> 00:26:25,840
you that it's really about thinking

00:26:24,010 --> 00:26:27,520
about what it is that's really good for

00:26:25,840 --> 00:26:28,840
you if you're on the publishing

00:26:27,520 --> 00:26:31,810
direction and you want to be able to

00:26:28,840 --> 00:26:34,570
really serve applications that are

00:26:31,810 --> 00:26:35,800
whatever on whatever channel then the

00:26:34,570 --> 00:26:37,270
couple Drupal might work but there are a

00:26:35,800 --> 00:26:40,690
lot of trade-offs so I want to make sure

00:26:37,270 --> 00:26:41,580
that you understand that now what are

00:26:40,690 --> 00:26:44,520
what web services

00:26:41,580 --> 00:26:46,560
stay pis so once again I talked about

00:26:44,520 --> 00:26:48,600
this diagram here which shows that you

00:26:46,560 --> 00:26:50,670
have a REST API which serves as the

00:26:48,600 --> 00:26:55,170
arbiter the thing that serves out the

00:26:50,670 --> 00:26:59,240
messages and ingests those requests from

00:26:55,170 --> 00:27:03,390
those clients when you actually have is

00:26:59,240 --> 00:27:04,500
Web Services now if you're confused and

00:27:03,390 --> 00:27:06,990
you're like well did you just say REST

00:27:04,500 --> 00:27:08,520
API for the last 30 minutes what's

00:27:06,990 --> 00:27:10,140
interesting is that there's a difference

00:27:08,520 --> 00:27:12,990
between the term web services and REST

00:27:10,140 --> 00:27:15,990
API simply put and this is a definition

00:27:12,990 --> 00:27:18,690
that was written in 2002 by the web the

00:27:15,990 --> 00:27:21,030
World Wide Web Consortium w3c web

00:27:18,690 --> 00:27:23,040
services support interoperable

00:27:21,030 --> 00:27:25,080
machine-to-machine interaction over a

00:27:23,040 --> 00:27:27,750
network which means that it enables

00:27:25,080 --> 00:27:29,280
communication between any sort of system

00:27:27,750 --> 00:27:32,250
that you can imagine any application

00:27:29,280 --> 00:27:33,720
that you can imagine REST API is on the

00:27:32,250 --> 00:27:35,550
other hand actually follows certain

00:27:33,720 --> 00:27:37,770
principles and these principles were

00:27:35,550 --> 00:27:39,990
promulgated by a gentleman named Roy

00:27:37,770 --> 00:27:42,420
fielding in his PhD dissertation who

00:27:39,990 --> 00:27:44,550
wrote that all of these architectures

00:27:42,420 --> 00:27:45,840
that are services oriented that have to

00:27:44,550 --> 00:27:46,980
have all of this communication across

00:27:45,840 --> 00:27:50,520
different servers and different

00:27:46,980 --> 00:27:52,770
applications have to use certain methods

00:27:50,520 --> 00:27:54,570
that are available in HTTP and the

00:27:52,770 --> 00:27:56,250
reason why is because the entire world

00:27:54,570 --> 00:27:57,870
wide web is already built on this

00:27:56,250 --> 00:27:59,760
architecture on this communications

00:27:57,870 --> 00:28:02,570
protocol so why don't we just reuse that

00:27:59,760 --> 00:28:06,210
when it comes to these communications

00:28:02,570 --> 00:28:08,880
now this is a really quick glance of the

00:28:06,210 --> 00:28:10,800
Drupal web services ecosystem it's not

00:28:08,880 --> 00:28:12,660
exhaustive and I know that this is a lot

00:28:10,800 --> 00:28:15,990
to handle but the thing that I want to

00:28:12,660 --> 00:28:17,400
really emphasize is this you have a

00:28:15,990 --> 00:28:19,020
variety of different web services

00:28:17,400 --> 00:28:20,520
modules that are available various

00:28:19,020 --> 00:28:22,500
things that can replace that green box

00:28:20,520 --> 00:28:24,180
from earlier you have the core REST API

00:28:22,500 --> 00:28:24,630
which is available in Drupal out of the

00:28:24,180 --> 00:28:26,640
box

00:28:24,630 --> 00:28:28,350
you'd have JSON API which has been

00:28:26,640 --> 00:28:30,720
introduced in the contributive system

00:28:28,350 --> 00:28:32,640
you have relaxed web services which is

00:28:30,720 --> 00:28:34,290
another contributed module and of course

00:28:32,640 --> 00:28:36,680
you have graph QL which is a buzzword

00:28:34,290 --> 00:28:38,520
I'm sure that some of you have heard

00:28:36,680 --> 00:28:40,680
here's a little bit of an illustration

00:28:38,520 --> 00:28:44,100
of the differences between REST API s

00:28:40,680 --> 00:28:46,350
and web services in Drupal core and

00:28:44,100 --> 00:28:48,990
Drupal contributed modules that are

00:28:46,350 --> 00:28:51,210
involving REST API I sorry involving

00:28:48,990 --> 00:28:53,610
JSON API and relaxed those are

00:28:51,210 --> 00:28:54,659
traditional REST API s but graph QL

00:28:53,610 --> 00:28:56,609
isn't actually

00:28:54,659 --> 00:28:59,789
following those rest principles and I'll

00:28:56,609 --> 00:29:02,129
show you just briefly why that is the

00:28:59,789 --> 00:29:04,019
core rest modules give you every single

00:29:02,129 --> 00:29:06,499
content editing and also by the way can

00:29:04,019 --> 00:29:10,649
forget configuration entities in Drupal

00:29:06,499 --> 00:29:12,479
exposing those out to be consumed by any

00:29:10,649 --> 00:29:14,970
application that is decoupled any

00:29:12,479 --> 00:29:17,369
application any clients any consumer and

00:29:14,970 --> 00:29:19,879
views also has this new rest export

00:29:17,369 --> 00:29:21,989
display type that you can use so

00:29:19,879 --> 00:29:24,059
unfortunately what happens is let's say

00:29:21,989 --> 00:29:26,309
that I want to have a node and I want to

00:29:24,059 --> 00:29:28,559
request a single node from Drupal a

00:29:26,309 --> 00:29:30,809
single piece of content from Drupal but

00:29:28,559 --> 00:29:32,759
I also want to request that author I

00:29:30,809 --> 00:29:35,399
also want to get that author of that

00:29:32,759 --> 00:29:37,109
piece of content right now in core rest

00:29:35,399 --> 00:29:38,970
you have to make that request twice you

00:29:37,109 --> 00:29:41,399
have to issue two requests from your

00:29:38,970 --> 00:29:43,710
consumer application now what that means

00:29:41,399 --> 00:29:46,379
is that you incur a lot more of that

00:29:43,710 --> 00:29:47,759
sort of network latency because you're

00:29:46,379 --> 00:29:50,940
having an issue to request you're having

00:29:47,759 --> 00:29:53,009
to do a whole lot more work but one of

00:29:50,940 --> 00:29:55,950
the really big benefits of JSON API is

00:29:53,009 --> 00:29:57,539
that it gives you relationships so for

00:29:55,950 --> 00:30:00,229
example there is a relationship between

00:29:57,539 --> 00:30:03,599
authors and the content that they author

00:30:00,229 --> 00:30:06,269
JSON API is a specification for REST API

00:30:03,599 --> 00:30:08,159
eyes that serve Jason and it's popular

00:30:06,269 --> 00:30:09,570
among Jas developers and it's been

00:30:08,159 --> 00:30:10,649
adopted by both the Ember and rails

00:30:09,570 --> 00:30:12,359
communities which means that if you're

00:30:10,649 --> 00:30:14,220
building an ember application or a rails

00:30:12,359 --> 00:30:18,059
application you can really easily

00:30:14,220 --> 00:30:20,369
consume Drupal as a back-end JSON API

00:30:18,059 --> 00:30:23,070
provides relationships as I said and so

00:30:20,369 --> 00:30:24,690
this really shows you I'm sorry there's

00:30:23,070 --> 00:30:25,830
the URL by the way for the project and

00:30:24,690 --> 00:30:27,239
also there's a lot of different

00:30:25,830 --> 00:30:30,629
operations that you can perform on the

00:30:27,239 --> 00:30:32,999
queries for JSON API but fundamentally

00:30:30,629 --> 00:30:35,609
if I if I provide an include if I

00:30:32,999 --> 00:30:38,220
provide an additional parameter in my

00:30:35,609 --> 00:30:39,869
request I can actually access not only

00:30:38,220 --> 00:30:42,299
the piece of content that I want but

00:30:39,869 --> 00:30:44,849
also the author and in this system any

00:30:42,299 --> 00:30:46,649
other related entities that are there or

00:30:44,849 --> 00:30:49,830
any other relationships that I need to

00:30:46,649 --> 00:30:52,259
provide also to my consumer now graph QL

00:30:49,830 --> 00:30:54,809
is a little bit different graph QL was

00:30:52,259 --> 00:30:57,690
originally created by Facebook and it's

00:30:54,809 --> 00:31:01,229
really a query language but you can also

00:30:57,690 --> 00:31:03,539
have what's called a graph QL API it

00:31:01,229 --> 00:31:05,159
limits response below and now this is

00:31:03,539 --> 00:31:06,929
probably going way over some people's

00:31:05,159 --> 00:31:08,280
heads in this room but let me be very

00:31:06,929 --> 00:31:11,490
clear about what this means

00:31:08,280 --> 00:31:15,090
rather than the server side rather than

00:31:11,490 --> 00:31:18,390
the API the web service like JSON API or

00:31:15,090 --> 00:31:20,310
core rests serving what's only available

00:31:18,390 --> 00:31:23,670
the only thing that that it can provide

00:31:20,310 --> 00:31:25,440
is a certain predefined list of content

00:31:23,670 --> 00:31:27,290
a certain predefined list of responses

00:31:25,440 --> 00:31:31,020
according to the requests that come in

00:31:27,290 --> 00:31:33,750
graph QL however is allowing for the

00:31:31,020 --> 00:31:35,670
request to tailor that response so

00:31:33,750 --> 00:31:39,180
imagine this imagine that you go into a

00:31:35,670 --> 00:31:40,920
store and you're buying a cake and you

00:31:39,180 --> 00:31:45,090
want that cake to have certain things on

00:31:40,920 --> 00:31:47,610
it well as a client as a as a consumer

00:31:45,090 --> 00:31:49,170
when I actually want that cake and I

00:31:47,610 --> 00:31:50,460
request that cake I'm gonna get back

00:31:49,170 --> 00:31:52,020
whatever the store wants to give me

00:31:50,460 --> 00:31:54,240
because there are only certain

00:31:52,020 --> 00:31:55,710
parameters that I can change to get that

00:31:54,240 --> 00:31:58,740
cake whether it's chocolate icing

00:31:55,710 --> 00:32:01,560
instead of the vanilla icing with graph

00:31:58,740 --> 00:32:05,490
QL in my request in my actual initial

00:32:01,560 --> 00:32:08,820
message to that server to that graph QL

00:32:05,490 --> 00:32:11,460
API I can get back whatever I want to

00:32:08,820 --> 00:32:13,050
because it's a very flexible query

00:32:11,460 --> 00:32:13,530
language now let me show you what that

00:32:13,050 --> 00:32:16,620
looks like

00:32:13,530 --> 00:32:18,120
graph QL shifts responsibility from the

00:32:16,620 --> 00:32:19,800
server to the client what this means is

00:32:18,120 --> 00:32:22,110
that instead of the server having

00:32:19,800 --> 00:32:24,840
limitations the server publishes what's

00:32:22,110 --> 00:32:26,460
possible not necessarily what the

00:32:24,840 --> 00:32:28,800
limitations are but what's possible and

00:32:26,460 --> 00:32:30,450
the client then publishes its

00:32:28,800 --> 00:32:32,220
requirements if you want to learn more

00:32:30,450 --> 00:32:34,170
about graph QL it's way beyond the scope

00:32:32,220 --> 00:32:36,540
of this session there is a talk about it

00:32:34,170 --> 00:32:39,600
I believe sometime during DrupalCon

00:32:36,540 --> 00:32:44,430
and what happens here is that as you can

00:32:39,600 --> 00:32:45,870
see I can provide a request that

00:32:44,430 --> 00:32:48,000
contains the title of the content I'm

00:32:45,870 --> 00:32:51,780
looking for and the author and his end

00:32:48,000 --> 00:32:53,430
their name and instead of the server

00:32:51,780 --> 00:32:55,080
issuing just any old response that it

00:32:53,430 --> 00:32:56,940
knows that it can issue it actually

00:32:55,080 --> 00:32:59,340
returns a structure that directly

00:32:56,940 --> 00:33:01,050
matches what I asked for and that's a

00:32:59,340 --> 00:33:03,120
really really compelling value

00:33:01,050 --> 00:33:06,780
proposition that's a really compelling

00:33:03,120 --> 00:33:07,950
idea so there's one last module I want

00:33:06,780 --> 00:33:10,080
to talk about which is relaxed web

00:33:07,950 --> 00:33:12,150
services and one of the things that is

00:33:10,080 --> 00:33:13,800
really great about relaxed is that it

00:33:12,150 --> 00:33:16,110
includes support for translations for

00:33:13,800 --> 00:33:17,520
revisions file attachments and it's

00:33:16,110 --> 00:33:20,220
really great for things like content

00:33:17,520 --> 00:33:22,080
staging and constant synchronization it

00:33:20,220 --> 00:33:24,460
also includes things like the CouchDB AP

00:33:22,080 --> 00:33:25,989
I'm sorry it includes CouchDB

00:33:24,460 --> 00:33:27,729
integration which means that you can

00:33:25,989 --> 00:33:29,499
have offline Drupal and content

00:33:27,729 --> 00:33:31,269
synchronization across an offline

00:33:29,499 --> 00:33:33,879
version of Drupal and once you get

00:33:31,269 --> 00:33:36,879
online have content sync once you

00:33:33,879 --> 00:33:38,769
actually regain that connectivity so I

00:33:36,879 --> 00:33:40,509
wanted to provide that overview of

00:33:38,769 --> 00:33:42,129
modules I'd highly encourage all of you

00:33:40,509 --> 00:33:44,979
to check out all four of those examples

00:33:42,129 --> 00:33:47,649
all four of those possibilities as you

00:33:44,979 --> 00:33:49,269
decide what web service is right for a

00:33:47,649 --> 00:33:51,399
year decoupled rupal architecture what

00:33:49,269 --> 00:33:53,349
web service is correct for your

00:33:51,399 --> 00:33:58,570
consumers and what are they going to

00:33:53,349 --> 00:34:00,429
enjoy using now I want to delve a little

00:33:58,570 --> 00:34:02,710
bit into decoupled Drupal and a

00:34:00,429 --> 00:34:04,599
developer experience what makes

00:34:02,710 --> 00:34:06,639
decoupling Drupal so great for

00:34:04,599 --> 00:34:08,020
developers what is it that consumers

00:34:06,639 --> 00:34:09,760
that these front-end developers who are

00:34:08,020 --> 00:34:12,339
using Drupal solely as this back-end

00:34:09,760 --> 00:34:14,559
solely has that content service what

00:34:12,339 --> 00:34:17,529
makes it so compelling for them to use

00:34:14,559 --> 00:34:18,970
the couple Drupal well I talked about

00:34:17,529 --> 00:34:20,440
this earlier we've now covered the Web

00:34:18,970 --> 00:34:22,210
Services angle and we've talked about

00:34:20,440 --> 00:34:24,789
the ways in which you can really have a

00:34:22,210 --> 00:34:27,250
variety of different web services now

00:34:24,789 --> 00:34:29,859
what about the client side and what

00:34:27,250 --> 00:34:31,299
about on the Drupal side if you are

00:34:29,859 --> 00:34:33,099
thinking about implementing a couple

00:34:31,299 --> 00:34:35,079
Drupal or you already have recently

00:34:33,099 --> 00:34:37,510
you've probably noticed that decoupling

00:34:35,079 --> 00:34:39,309
Drupal is really hard there's not a lot

00:34:37,510 --> 00:34:40,510
of articles out there there's not a lot

00:34:39,309 --> 00:34:42,849
of places there's not a lot of resources

00:34:40,510 --> 00:34:44,379
that help you out with this stuff so

00:34:42,849 --> 00:34:46,210
there's two things that have really been

00:34:44,379 --> 00:34:48,399
coming about in the last year in the

00:34:46,210 --> 00:34:50,049
Drupal ecosystem that really helped to

00:34:48,399 --> 00:34:52,359
address that challenge that really

00:34:50,049 --> 00:34:56,589
helped to make that decoupled developer

00:34:52,359 --> 00:34:58,900
experience improve the first is SDKs and

00:34:56,589 --> 00:35:01,270
starter kits if you were if you're a

00:34:58,900 --> 00:35:03,010
developer and you're writing a mobile

00:35:01,270 --> 00:35:05,349
application that consumes drupal's

00:35:03,010 --> 00:35:07,599
content you don't know exactly how to

00:35:05,349 --> 00:35:10,329
get that content out from Drupal but an

00:35:07,599 --> 00:35:11,890
SDK does and maybe what you can do is

00:35:10,329 --> 00:35:13,450
use your own language and use your own

00:35:11,890 --> 00:35:15,760
approaches and use what you know about

00:35:13,450 --> 00:35:18,160
your existing technology to consume

00:35:15,760 --> 00:35:22,000
drupal's content now these tend to be

00:35:18,160 --> 00:35:23,410
like wrappers of the client which allow

00:35:22,000 --> 00:35:26,020
you to make requests on the developers

00:35:23,410 --> 00:35:28,869
behalf and process responses as well

00:35:26,020 --> 00:35:30,520
that's what an SDK does there's also

00:35:28,869 --> 00:35:32,260
starter kits in reference applications

00:35:30,520 --> 00:35:33,520
if you want to jump start if you want to

00:35:32,260 --> 00:35:35,289
have an application that's already a

00:35:33,520 --> 00:35:35,710
little bit built out so you can just use

00:35:35,289 --> 00:35:38,080
that as a

00:35:35,710 --> 00:35:39,220
jumping-off point you can have an

00:35:38,080 --> 00:35:41,080
out-of-the-box experience for developers

00:35:39,220 --> 00:35:42,910
to really quickly get started and that's

00:35:41,080 --> 00:35:45,550
the real value proposition of these

00:35:42,910 --> 00:35:49,660
starter kits and references so last year

00:35:45,550 --> 00:35:52,300
my team worked on a new sort of a new

00:35:49,660 --> 00:35:54,970
ecosystem of SDKs called waterwheel and

00:35:52,300 --> 00:35:58,150
also a new set of reference applications

00:35:54,970 --> 00:36:00,280
called waterwheel waterwheel is a set of

00:35:58,150 --> 00:36:01,960
SDKs that help to accelerate the

00:36:00,280 --> 00:36:03,190
development of these applications and we

00:36:01,960 --> 00:36:05,800
have a version in JavaScript in the

00:36:03,190 --> 00:36:08,980
version in Swift waterwheel j/s and

00:36:05,800 --> 00:36:10,900
waterwheel stock swift waterwheel is

00:36:08,980 --> 00:36:12,160
meant to be a translator for these

00:36:10,900 --> 00:36:14,290
developers if you're developer and you

00:36:12,160 --> 00:36:15,640
know absolutely nothing about Drupal but

00:36:14,290 --> 00:36:18,250
all you know is that you have to get

00:36:15,640 --> 00:36:20,170
content out of Drupal somehow what you

00:36:18,250 --> 00:36:22,180
can do is use waterwheel to make your

00:36:20,170 --> 00:36:24,790
job easier and it helps people who don't

00:36:22,180 --> 00:36:26,170
know Drupal speak Drupal here's a big

00:36:24,790 --> 00:36:27,700
list of all the projects that we've got

00:36:26,170 --> 00:36:29,830
in our ecosystem we've got a waterwheel

00:36:27,700 --> 00:36:31,180
module that helps with things like

00:36:29,830 --> 00:36:32,589
schema discovery if you want to know

00:36:31,180 --> 00:36:34,420
more and more about that there's a lot

00:36:32,589 --> 00:36:36,760
of blog posts I've written about this we

00:36:34,420 --> 00:36:38,800
got waterwheel j/s waterwheel swift we

00:36:36,760 --> 00:36:40,150
also have several applications built in

00:36:38,800 --> 00:36:43,650
ember and react which help you get

00:36:40,150 --> 00:36:45,670
started as well as an ember CLI add-on

00:36:43,650 --> 00:36:48,369
now what about these API first

00:36:45,670 --> 00:36:49,660
distributions well if you want to get

00:36:48,369 --> 00:36:51,310
started with decoupling Drupal and

00:36:49,660 --> 00:36:52,960
you're a consumer or sorry if you're a

00:36:51,310 --> 00:36:55,060
friend of developer and you have no idea

00:36:52,960 --> 00:36:57,310
how to use Drupal because Drupal is

00:36:55,060 --> 00:36:58,359
really confusing to anybody who's

00:36:57,310 --> 00:37:01,089
starting out with Drupal for the first

00:36:58,359 --> 00:37:03,310
time as we know you want to be able to

00:37:01,089 --> 00:37:06,190
help your developers use something

00:37:03,310 --> 00:37:07,630
that's really easy for them so that's

00:37:06,190 --> 00:37:09,010
the real reason for these API first

00:37:07,630 --> 00:37:12,730
distributions and the most prominent

00:37:09,010 --> 00:37:14,010
ones are reservoir and Contenta content

00:37:12,730 --> 00:37:17,020
was one of the sessions this morning

00:37:14,010 --> 00:37:21,280
reservoir is a project that was aqueous

00:37:17,020 --> 00:37:23,589
aqueous sponsored and is actually a both

00:37:21,280 --> 00:37:24,580
of them are really quite powerful and I

00:37:23,589 --> 00:37:26,589
highly encourage you to check both of

00:37:24,580 --> 00:37:28,780
them out because if you have developers

00:37:26,589 --> 00:37:30,400
on your team who are saying well you

00:37:28,780 --> 00:37:32,859
know I know angular I don't want to

00:37:30,400 --> 00:37:34,000
learn Drupal drupal's too hard you know

00:37:32,859 --> 00:37:36,220
give me something that's a little bit

00:37:34,000 --> 00:37:41,020
easy to work with reservoir and Contenta

00:37:36,220 --> 00:37:42,730
could be the answer for you so what does

00:37:41,020 --> 00:37:45,480
this ultimately mean it means that a

00:37:42,730 --> 00:37:48,550
good developer experience a good DX

00:37:45,480 --> 00:37:48,950
means that it's easy to make API so it's

00:37:48,550 --> 00:37:51,200
easy to

00:37:48,950 --> 00:37:52,640
these web services and luckily we have a

00:37:51,200 --> 00:37:55,790
very large ecosystem of them available

00:37:52,640 --> 00:37:58,070
in Drupal it means that for these

00:37:55,790 --> 00:38:00,349
consumer applications they have a way to

00:37:58,070 --> 00:38:02,329
communicate with Drupal in various ways

00:38:00,349 --> 00:38:03,589
and by the way you can combine a lot of

00:38:02,329 --> 00:38:06,550
these modules together and have multiple

00:38:03,589 --> 00:38:09,589
forms of web services

00:38:06,550 --> 00:38:11,990
what else does it mean it means that a

00:38:09,589 --> 00:38:14,150
good developer experience means that

00:38:11,990 --> 00:38:16,369
it's easy for consumers to work with

00:38:14,150 --> 00:38:17,540
those api's whether it's through SDKs or

00:38:16,369 --> 00:38:20,329
reference applications that are already

00:38:17,540 --> 00:38:22,250
built out and that's a very important

00:38:20,329 --> 00:38:24,170
consideration especially if you want to

00:38:22,250 --> 00:38:30,010
convince your front-end developers that

00:38:24,170 --> 00:38:32,180
they should be using Drupal finally I

00:38:30,010 --> 00:38:33,710
want to talk a little bit about what

00:38:32,180 --> 00:38:35,420
this means for the editorial experience

00:38:33,710 --> 00:38:37,880
what does this mean for somebody who's

00:38:35,420 --> 00:38:39,410
just a regular old user of Drupal and

00:38:37,880 --> 00:38:40,670
for those of you in the audience who are

00:38:39,410 --> 00:38:42,200
thinking about this from a business

00:38:40,670 --> 00:38:44,060
standpoint and are making a decision

00:38:42,200 --> 00:38:45,890
about whether or not to decouple Drupal

00:38:44,060 --> 00:38:47,839
this might be the most relevant section

00:38:45,890 --> 00:38:50,119
for you because we're really going to

00:38:47,839 --> 00:38:52,520
talk about what actually happens when

00:38:50,119 --> 00:38:54,319
you decouple Drupal and what actually is

00:38:52,520 --> 00:38:56,119
involved in the things that you lose and

00:38:54,319 --> 00:38:58,670
what actually is involved and the things

00:38:56,119 --> 00:39:00,980
that you will need to account for when

00:38:58,670 --> 00:39:04,040
you argue for or defend a decoupled

00:39:00,980 --> 00:39:05,690
Drupal architecture so one of triple

00:39:04,040 --> 00:39:08,390
Eight's core features is in-place

00:39:05,690 --> 00:39:10,670
editing as we know you can edit fields

00:39:08,390 --> 00:39:14,119
in their context which means that if I

00:39:10,670 --> 00:39:16,670
want to update my title field I can do

00:39:14,119 --> 00:39:19,160
that either in the Drupal user interface

00:39:16,670 --> 00:39:22,790
that's provided for editors or I can use

00:39:19,160 --> 00:39:25,730
the direct in-place editing tool that's

00:39:22,790 --> 00:39:27,380
on the front-end of Drupal the really

00:39:25,730 --> 00:39:29,089
nice thing is that if you're making a

00:39:27,380 --> 00:39:31,550
website or if you're making a responsive

00:39:29,089 --> 00:39:32,900
website this is really easy because both

00:39:31,550 --> 00:39:34,940
of those can leverage in place editing

00:39:32,900 --> 00:39:40,069
and in as a matter of fact you can use

00:39:34,940 --> 00:39:43,069
in-place editing on a mobile device also

00:39:40,069 --> 00:39:44,960
if you're making applications if you

00:39:43,069 --> 00:39:48,589
have front ends that are being rendered

00:39:44,960 --> 00:39:50,510
by Drupal that have Drupal as the

00:39:48,589 --> 00:39:52,690
renderer and are and Drupal is

00:39:50,510 --> 00:39:55,700
responsible for the visual control of

00:39:52,690 --> 00:39:57,380
that particular experience like signage

00:39:55,700 --> 00:39:59,210
for instance there are a lot of examples

00:39:57,380 --> 00:40:02,270
of Drupal actually controlling digital

00:39:59,210 --> 00:40:02,930
signage you can also use in-place

00:40:02,270 --> 00:40:06,289
editing

00:40:02,930 --> 00:40:10,309
by using this tool by using in place

00:40:06,289 --> 00:40:12,230
editing however let's say that you're

00:40:10,309 --> 00:40:13,730
working with a single page application

00:40:12,230 --> 00:40:14,869
or you're working with an Amazon echo

00:40:13,730 --> 00:40:16,640
device for instance that's a really

00:40:14,869 --> 00:40:19,069
extreme example but a native mobile

00:40:16,640 --> 00:40:20,450
application for instance you can't edit

00:40:19,069 --> 00:40:21,710
that content in the same way that you

00:40:20,450 --> 00:40:23,630
were used to before you can't actually

00:40:21,710 --> 00:40:26,059
do any sort of in-place editing you have

00:40:23,630 --> 00:40:28,750
to only use Drupal's administration

00:40:26,059 --> 00:40:30,740
layer that's available in Drupal itself

00:40:28,750 --> 00:40:32,059
now what about display and layout

00:40:30,740 --> 00:40:34,490
management it's another big area that's

00:40:32,059 --> 00:40:36,279
very important in terms of choosing

00:40:34,490 --> 00:40:39,349
layouts and managing displays of content

00:40:36,279 --> 00:40:41,359
we can by the way I know that this is a

00:40:39,349 --> 00:40:42,950
very vast oversimplification of the

00:40:41,359 --> 00:40:44,839
actual layout management experience in

00:40:42,950 --> 00:40:47,210
Drupal panelizer is a lot more complex

00:40:44,839 --> 00:40:48,440
than this but if you bear with me and

00:40:47,210 --> 00:40:50,510
think about this from the standpoint of

00:40:48,440 --> 00:40:53,089
we can choose layouts it'll be a lot

00:40:50,510 --> 00:40:54,920
easier but if I choose a new layout I

00:40:53,089 --> 00:41:00,380
can immediately see that reflected in

00:40:54,920 --> 00:41:01,609
what I'm doing on the front end but what

00:41:00,380 --> 00:41:04,609
about display notes what about things

00:41:01,609 --> 00:41:07,099
like teasers and full content displays

00:41:04,609 --> 00:41:08,990
we know that in Drupal you can limit a

00:41:07,099 --> 00:41:11,809
piece of content to just a small portion

00:41:08,990 --> 00:41:13,640
of text or make it have the entire full

00:41:11,809 --> 00:41:15,170
content how does that change in a

00:41:13,640 --> 00:41:17,089
decoupled context how does that change

00:41:15,170 --> 00:41:18,760
if you think about building this kind of

00:41:17,089 --> 00:41:21,170
application that's up on the screen in

00:41:18,760 --> 00:41:22,220
JavaScript as opposed to in Drupal you

00:41:21,170 --> 00:41:26,000
have to think about all of these issues

00:41:22,220 --> 00:41:27,740
in a very different way and now of

00:41:26,000 --> 00:41:31,400
course one of the things that we hear

00:41:27,740 --> 00:41:33,710
all the time from our customers is what

00:41:31,400 --> 00:41:35,210
about previewing unpublished or draft

00:41:33,710 --> 00:41:37,099
content because I don't want this

00:41:35,210 --> 00:41:39,890
article about something happening next

00:41:37,099 --> 00:41:41,809
week to go out early well currently if

00:41:39,890 --> 00:41:43,579
you preview a single piece of content on

00:41:41,809 --> 00:41:45,470
a single Drupal site it's trivial it's

00:41:43,579 --> 00:41:46,760
really easy for editors you don't need a

00:41:45,470 --> 00:41:49,010
developer you don't need someone that

00:41:46,760 --> 00:41:52,069
you can tap the shoulder of and get to

00:41:49,010 --> 00:41:55,460
there and get them to actually help you

00:41:52,069 --> 00:41:56,960
with technical standpoint and soon we'll

00:41:55,460 --> 00:41:58,730
have of course content workspaces which

00:41:56,960 --> 00:42:01,099
will be great thanks to you the

00:41:58,730 --> 00:42:03,470
workflows initiative but in a decoupled

00:42:01,099 --> 00:42:05,720
setting right now content can only be

00:42:03,470 --> 00:42:08,750
previewed directly on the device or

00:42:05,720 --> 00:42:10,339
through an emulator and an emulator is

00:42:08,750 --> 00:42:12,559
really challenging because it might

00:42:10,339 --> 00:42:14,270
result in lower fidelity it might result

00:42:12,559 --> 00:42:15,799
in a worse preview experience for your

00:42:14,270 --> 00:42:17,730
editors

00:42:15,799 --> 00:42:19,559
if an editor wants to have a

00:42:17,730 --> 00:42:20,460
high-fidelity preview of content let's

00:42:19,559 --> 00:42:23,160
say that you have a mobile application

00:42:20,460 --> 00:42:24,660
that's written for Android and you want

00:42:23,160 --> 00:42:26,279
to be able to give that editor access to

00:42:24,660 --> 00:42:28,109
that unpublished content so they can see

00:42:26,279 --> 00:42:31,859
how that headline looks on their Samsung

00:42:28,109 --> 00:42:34,260
Galaxy Note what you have to do as a

00:42:31,859 --> 00:42:35,640
developer is oftentimes and this is

00:42:34,260 --> 00:42:37,079
usually the way that I've seen people do

00:42:35,640 --> 00:42:38,910
it you spin up a new test environment

00:42:37,079 --> 00:42:40,920
you push new content to that test

00:42:38,910 --> 00:42:42,390
environment you have new data that's

00:42:40,920 --> 00:42:44,760
either published or accessible otherwise

00:42:42,390 --> 00:42:46,410
without authentication you give the

00:42:44,760 --> 00:42:48,960
editor a URL or some kind of a new

00:42:46,410 --> 00:42:51,089
download for their application on some

00:42:48,960 --> 00:42:52,920
kind of a so that they can actually open

00:42:51,089 --> 00:42:55,260
up an application or or go to that

00:42:52,920 --> 00:42:56,849
particular URL and then finally the

00:42:55,260 --> 00:42:59,069
editor can access that high fidelity

00:42:56,849 --> 00:43:00,720
preview and so this is a very involved

00:42:59,069 --> 00:43:02,010
process if you as an editor have to tap

00:43:00,720 --> 00:43:03,720
on the shoulder of a developer every

00:43:02,010 --> 00:43:05,099
time and say I need a new environment

00:43:03,720 --> 00:43:07,529
and the thing is you don't even know

00:43:05,099 --> 00:43:08,819
those words it's a really big issue so

00:43:07,529 --> 00:43:11,579
it's another thing to think about when

00:43:08,819 --> 00:43:12,900
you're decoupling Drupal so decouple

00:43:11,579 --> 00:43:15,359
Drupal means that we have to think about

00:43:12,900 --> 00:43:16,589
content in a much more structured way we

00:43:15,359 --> 00:43:19,799
have to think about Drupal in a much

00:43:16,589 --> 00:43:22,380
more content channel agnostic way we

00:43:19,799 --> 00:43:25,859
have to think about Drupal and content

00:43:22,380 --> 00:43:27,779
in a much more sort of flexible way a

00:43:25,859 --> 00:43:29,609
versatile way where we're not limited to

00:43:27,779 --> 00:43:30,690
the things that we experience on

00:43:29,609 --> 00:43:32,759
websites or the things that we

00:43:30,690 --> 00:43:34,230
experience on responsive websites we

00:43:32,759 --> 00:43:37,470
have to think about content in a much

00:43:34,230 --> 00:43:39,119
more decontextualized way the couple

00:43:37,470 --> 00:43:40,619
Drupal means that we may have to accept

00:43:39,119 --> 00:43:42,779
that on certain channels on certain

00:43:40,619 --> 00:43:44,190
devices that level of full visual

00:43:42,779 --> 00:43:46,859
control that we've come to expect on our

00:43:44,190 --> 00:43:49,710
web sites is not actually possible how

00:43:46,859 --> 00:43:53,339
do you edit layouts or manage a layout

00:43:49,710 --> 00:43:56,490
on a native mobile application it's not

00:43:53,339 --> 00:43:57,990
possible the couple Drupal means that

00:43:56,490 --> 00:44:00,150
many of the capabilities that were used

00:43:57,990 --> 00:44:02,069
to may need to be exposed to consumers

00:44:00,150 --> 00:44:04,710
so maybe you do want to have in place

00:44:02,069 --> 00:44:06,569
editing on your react application maybe

00:44:04,710 --> 00:44:08,240
you do want to have some kind of layout

00:44:06,569 --> 00:44:10,440
management on your angular application

00:44:08,240 --> 00:44:12,930
this means that we have to be able to

00:44:10,440 --> 00:44:14,940
provide those means for any application

00:44:12,930 --> 00:44:18,990
to do that as well through those api's

00:44:14,940 --> 00:44:20,700
through those web services so I want to

00:44:18,990 --> 00:44:22,470
end here just briefly with a little bit

00:44:20,700 --> 00:44:24,390
of a meditation on what this means what

00:44:22,470 --> 00:44:27,180
it is that decoupled Drupal actually

00:44:24,390 --> 00:44:29,030
means and what it really is gonna do for

00:44:27,180 --> 00:44:32,130
Drupal's future

00:44:29,030 --> 00:44:35,130
here's a big problem Drupal has always

00:44:32,130 --> 00:44:37,260
been at this fulcrum of these three

00:44:35,130 --> 00:44:39,660
different ideas we're gonna be really

00:44:37,260 --> 00:44:41,640
good for the user we're gonna be really

00:44:39,660 --> 00:44:43,470
good for the marketer or the editor who

00:44:41,640 --> 00:44:45,120
has to edit content and manage layouts

00:44:43,470 --> 00:44:47,190
and do all the stuff that site builders

00:44:45,120 --> 00:44:48,240
do when editors do and we have and we

00:44:47,190 --> 00:44:50,190
also want to make sure that the

00:44:48,240 --> 00:44:52,110
developer is happy to and we've achieved

00:44:50,190 --> 00:44:54,810
a very nice equilibrium a very nice

00:44:52,110 --> 00:44:56,550
balance between these three personas but

00:44:54,810 --> 00:44:58,920
at this point with the couple Drupal is

00:44:56,550 --> 00:45:03,330
this balance something that we can

00:44:58,920 --> 00:45:06,090
achieve for example this is something if

00:45:03,330 --> 00:45:08,070
there's one slide that you take away

00:45:06,090 --> 00:45:10,860
from this session it's this one which is

00:45:08,070 --> 00:45:12,780
that there's a new incongruity in Drupal

00:45:10,860 --> 00:45:15,450
there's a new paradox in Drupal which is

00:45:12,780 --> 00:45:17,520
that right now as a marketer as an

00:45:15,450 --> 00:45:19,950
editor as somebody who wants to manage

00:45:17,520 --> 00:45:22,560
something visually or edit something in

00:45:19,950 --> 00:45:24,500
place I have access to websites and I

00:45:22,560 --> 00:45:28,080
have access to you responsive websites

00:45:24,500 --> 00:45:30,330
but if I want to do things like mess

00:45:28,080 --> 00:45:32,100
around with digital signage or augmented

00:45:30,330 --> 00:45:34,740
reality or a conversational interface

00:45:32,100 --> 00:45:36,690
like Amazon echo that's something that I

00:45:34,740 --> 00:45:37,710
need a developer for it's not something

00:45:36,690 --> 00:45:40,640
that I can do by myself

00:45:37,710 --> 00:45:43,500
I can't actually preview content on

00:45:40,640 --> 00:45:45,540
augmented reality I can't actually take

00:45:43,500 --> 00:45:47,250
my Apple watch and edit content on there

00:45:45,540 --> 00:45:49,710
not that anyone who want to actually do

00:45:47,250 --> 00:45:52,230
that but you can see what I mean here is

00:45:49,710 --> 00:45:53,700
that what does it mean when all of these

00:45:52,230 --> 00:45:56,010
new channels and devices are appearing

00:45:53,700 --> 00:45:57,180
and editors want to have that same

00:45:56,010 --> 00:46:00,170
experience that they've come to expect

00:45:57,180 --> 00:46:04,170
from Drupal and editing a website or

00:46:00,170 --> 00:46:06,060
administering a website better for users

00:46:04,170 --> 00:46:07,830
increasingly means better fun more

00:46:06,060 --> 00:46:10,320
devices so for example if you think

00:46:07,830 --> 00:46:12,600
about these two axes here we've got

00:46:10,320 --> 00:46:14,700
what's great for developers and what's

00:46:12,600 --> 00:46:16,890
good for editors so better for

00:46:14,700 --> 00:46:19,890
developers on the y-axis better for

00:46:16,890 --> 00:46:23,030
editors on the x-axis Drupal has always

00:46:19,890 --> 00:46:25,290
been at this really great kind of

00:46:23,030 --> 00:46:27,450
balanced position which is that it's

00:46:25,290 --> 00:46:29,130
better for users if you have both of

00:46:27,450 --> 00:46:30,990
those things served both of those use

00:46:29,130 --> 00:46:33,780
cases serve both of those personas serve

00:46:30,990 --> 00:46:36,750
really well but unfortunately what's

00:46:33,780 --> 00:46:39,450
happening now is that a better outcome

00:46:36,750 --> 00:46:41,820
for end-users who are experiencing your

00:46:39,450 --> 00:46:42,660
content on more and more devices relies

00:46:41,820 --> 00:46:44,610
on custom

00:46:42,660 --> 00:46:45,930
by developers more developers have to be

00:46:44,610 --> 00:46:47,610
involved in a lot of different

00:46:45,930 --> 00:46:49,020
technologies in native mobile app

00:46:47,610 --> 00:46:50,430
technologies and conversational

00:46:49,020 --> 00:46:53,970
technologies and all sorts of things

00:46:50,430 --> 00:46:57,450
that Drupal simply cannot handle out of

00:46:53,970 --> 00:46:59,430
the box so what does this mean what it

00:46:57,450 --> 00:47:01,740
means is that we may have to be prepared

00:46:59,430 --> 00:47:04,290
to accept that the ideal future state of

00:47:01,740 --> 00:47:06,450
Drupal the ideal way that Drupal will be

00:47:04,290 --> 00:47:09,750
in the future might not be something

00:47:06,450 --> 00:47:12,030
close to what it is right now we have to

00:47:09,750 --> 00:47:13,290
be prepared to accept that Drupal might

00:47:12,030 --> 00:47:14,990
actually be a bunch of different

00:47:13,290 --> 00:47:18,390
components a bunch of different services

00:47:14,990 --> 00:47:20,130
as opposed to a monolithic whole but we

00:47:18,390 --> 00:47:21,840
can still call that Drupal fundamentally

00:47:20,130 --> 00:47:23,850
that can still be considered Drupal as

00:47:21,840 --> 00:47:25,410
long as we are able to provide that

00:47:23,850 --> 00:47:29,190
seamless experience that people have

00:47:25,410 --> 00:47:30,690
come to expect so this is the great test

00:47:29,190 --> 00:47:32,100
that will dictate the next decade of

00:47:30,690 --> 00:47:34,230
Drupal I believe very strongly that this

00:47:32,100 --> 00:47:36,480
is something that will really influence

00:47:34,230 --> 00:47:39,240
the way that we will help Drupal survive

00:47:36,480 --> 00:47:41,400
for the next ten years but I believe

00:47:39,240 --> 00:47:43,350
very strongly that a multi-faceted

00:47:41,400 --> 00:47:45,240
Drupal a Drupal that is made up of all

00:47:43,350 --> 00:47:46,500
these different exciting components and

00:47:45,240 --> 00:47:48,510
all these different ideas and these

00:47:46,500 --> 00:47:51,000
different approaches is actually a more

00:47:48,510 --> 00:47:52,410
future-proof Drupal by decoupling Drupal

00:47:51,000 --> 00:47:54,540
by providing the ability to decouple

00:47:52,410 --> 00:47:57,930
Drupal we've unleashed a lot of power

00:47:54,540 --> 00:47:59,400
and thanks to the couple Drupal this

00:47:57,930 --> 00:48:01,500
actually means that Drupal story has

00:47:59,400 --> 00:48:03,180
only just begun and we're embarking on

00:48:01,500 --> 00:48:04,980
an exciting journey together and I'm

00:48:03,180 --> 00:48:08,550
very excited to share that journey with

00:48:04,980 --> 00:48:10,560
you before I end here I'd like to just

00:48:08,550 --> 00:48:12,660
point out a couple of sessions that are

00:48:10,560 --> 00:48:14,220
happening these are a couple of sessions

00:48:12,660 --> 00:48:16,140
that I'm presenting I'm gonna be talking

00:48:14,220 --> 00:48:18,660
about augmented reality and beacons on

00:48:16,140 --> 00:48:19,830
Drupal tomorrow as well as decoupled

00:48:18,660 --> 00:48:21,540
site-building which is a little bit of

00:48:19,830 --> 00:48:23,640
that extension of what I've been talking

00:48:21,540 --> 00:48:25,230
about for the last five minutes what it

00:48:23,640 --> 00:48:27,510
is that I mean by drupal's next

00:48:25,230 --> 00:48:29,160
challenge there's also a session about

00:48:27,510 --> 00:48:31,770
editorial interfaces and that as real

00:48:29,160 --> 00:48:35,370
experiences that my friend Matt Davis is

00:48:31,770 --> 00:48:36,840
presenting on Thursday as well please

00:48:35,370 --> 00:48:37,320
join us for the sprints on Friday of

00:48:36,840 --> 00:48:41,220
course

00:48:37,320 --> 00:48:43,680
and please do provide some feedback on

00:48:41,220 --> 00:48:46,770
this session and take the Drupal con

00:48:43,680 --> 00:48:48,750
survey and with that feed and dunk danke

00:48:46,770 --> 00:48:51,860
Schoen thank you very much and I'll take

00:48:48,750 --> 00:48:51,860
questions thank you

00:49:01,270 --> 00:49:05,450
we've got a microphone up here if people

00:49:03,500 --> 00:49:06,620
want to ask questions please don't be

00:49:05,450 --> 00:49:09,410
shy

00:49:06,620 --> 00:49:16,970
I know it's after lunch people are low

00:49:09,410 --> 00:49:18,260
energy but and and please do give your

00:49:16,970 --> 00:49:19,760
feedback on this session I do hope it

00:49:18,260 --> 00:49:21,980
was useful I do hope that it had a lot

00:49:19,760 --> 00:49:24,110
of interesting information yes we're the

00:49:21,980 --> 00:49:26,210
slide deck to be available somewhere yes

00:49:24,110 --> 00:49:27,620
I will be providing the slide deck this

00:49:26,210 --> 00:49:31,960
evening and it will be available and

00:49:27,620 --> 00:49:31,960
I'll provide a tweet with the slides

00:49:37,450 --> 00:49:42,460
Wow was was this really that what okay

00:49:41,410 --> 00:49:44,680
so you know everything about T couple

00:49:42,460 --> 00:49:46,960
Drupal data was it really that helpful

00:49:44,680 --> 00:49:47,770
was it really that informative alright

00:49:46,960 --> 00:49:51,010
alright cool

00:49:47,770 --> 00:49:54,069
thank you alrighty well we've got seven

00:49:51,010 --> 00:49:56,140
minutes left if you want to ask me some

00:49:54,069 --> 00:49:58,770
questions I'll go ahead and shut things

00:49:56,140 --> 00:50:02,040
down and you can meet me on the side

00:49:58,770 --> 00:50:02,040

YouTube URL: https://www.youtube.com/watch?v=dgbQn2bfKJI


