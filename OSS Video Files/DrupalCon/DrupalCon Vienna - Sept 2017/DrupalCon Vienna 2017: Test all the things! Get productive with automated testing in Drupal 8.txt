Title: DrupalCon Vienna 2017: Test all the things! Get productive with automated testing in Drupal 8
Publication date: 2017-09-26
Playlist: DrupalCon Vienna - Sept 2017
Description: 
	Heard of acronyms likes BTB, KTB and WTB but haven't had a chance to dive head first into all the glorious testing features in Drupal 8? This session is for you. In this session, we'll look at the various types of tests you might want to write for development on Drupal core, a contributed project or even bespoke Drupal sites.

Attending this session, developers can expect to see:



Real world examples of awesome tests from core and contrib and how to write them.
Real world examples of terrible tests from core and contrib and how to avoid writing them.
A look at the whole spectrum of testing from unit testing to functional JavaScript testing.
Tried and tested tools and patterns being used to test core contrib today. No fluffly stuff.
If you've ever hesitated about a Friday deployment, or weren't quite sure if you broke something in your last release, we need to talk! I want all Drupal developers to have the confidence to hit that deploy button, take a long lunch, run some errands and return to a successful release with stakeholders singing songs of your triumph.
Captions: 
	00:00:00,979 --> 00:00:04,440
so thanks for coming to this session

00:00:03,210 --> 00:00:06,299
everyone

00:00:04,440 --> 00:00:08,309
it's called tests all the things getting

00:00:06,299 --> 00:00:11,610
productive with automated testing in

00:00:08,309 --> 00:00:13,710
Drupal 8 so a little bit about me I'm

00:00:11,610 --> 00:00:15,450
Sam I'm 5 to jog

00:00:13,710 --> 00:00:18,270
I'm a back-end developer for

00:00:15,450 --> 00:00:20,580
previous/next I wear a dev shop based in

00:00:18,270 --> 00:00:23,189
Australia I've done a little bit of core

00:00:20,580 --> 00:00:27,420
contribution but I also maintain a bunch

00:00:23,189 --> 00:00:28,019
of contributor projects so who are you

00:00:27,420 --> 00:00:29,609
guys

00:00:28,019 --> 00:00:32,279
so this talk is really going to be a

00:00:29,609 --> 00:00:35,640
broad overview of the kind of testing

00:00:32,279 --> 00:00:37,680
that we do in contrib core and take and

00:00:35,640 --> 00:00:39,780
apply that to your own bespoke Drupal

00:00:37,680 --> 00:00:41,879
builds so if you've done a lot of

00:00:39,780 --> 00:00:43,710
testing before you've written different

00:00:41,879 --> 00:00:46,170
types of tests and sort of maintained

00:00:43,710 --> 00:00:48,719
country modules that sort of thing this

00:00:46,170 --> 00:00:50,489
talk may not be super relevant to you

00:00:48,719 --> 00:00:53,340
because it is quite a gentle

00:00:50,489 --> 00:00:54,149
introduction but if you do want to find

00:00:53,340 --> 00:00:58,530
out that information

00:00:54,149 --> 00:01:00,270
by all means stick around as I'm going

00:00:58,530 --> 00:01:02,430
to start right at the beginning that's

00:01:00,270 --> 00:01:05,400
best principles and that is what is a

00:01:02,430 --> 00:01:07,890
test and at a basic level a test is

00:01:05,400 --> 00:01:10,049
really just code that we write there's

00:01:07,890 --> 00:01:11,939
part of our project that asserts a set

00:01:10,049 --> 00:01:14,220
of constraints on the other code that

00:01:11,939 --> 00:01:16,200
we've written in the project and for any

00:01:14,220 --> 00:01:19,200
type of complex software testing is

00:01:16,200 --> 00:01:20,939
really essential but the thing about

00:01:19,200 --> 00:01:23,520
testing is there's lots of different

00:01:20,939 --> 00:01:25,890
forms of testing as well comes in very

00:01:23,520 --> 00:01:27,450
many different flavors and we're going

00:01:25,890 --> 00:01:31,079
to explore a few of those different

00:01:27,450 --> 00:01:33,720
flavors in this session so here is the

00:01:31,079 --> 00:01:35,820
simplest example I could conjure of a

00:01:33,720 --> 00:01:38,850
test and this is testing the UUID

00:01:35,820 --> 00:01:41,430
generator in core it doesn't use any

00:01:38,850 --> 00:01:44,159
kind of framework it's just a straight

00:01:41,430 --> 00:01:46,710
PHP file and there's two constraints

00:01:44,159 --> 00:01:48,780
that are being considered here and the

00:01:46,710 --> 00:01:50,460
first one is that the return value of

00:01:48,780 --> 00:01:53,100
that generate method is going to be a

00:01:50,460 --> 00:01:56,189
string and the next one is the length of

00:01:53,100 --> 00:01:59,040
characters is going to be 36 from that

00:01:56,189 --> 00:02:01,110
from that method you can see here you

00:01:59,040 --> 00:02:04,130
can you can actually run this test and

00:02:01,110 --> 00:02:08,069
if I go introduce a bug into my code and

00:02:04,130 --> 00:02:10,289
rerun that test it's going to tell me

00:02:08,069 --> 00:02:11,560
exactly what broke so that's

00:02:10,289 --> 00:02:13,599
fundamentally what an automate

00:02:11,560 --> 00:02:15,790
testes but of course in the real world

00:02:13,599 --> 00:02:18,760
and you know applications are a lot more

00:02:15,790 --> 00:02:22,569
complex than this we use frameworks to

00:02:18,760 --> 00:02:24,760
help us do this kind of thing so why do

00:02:22,569 --> 00:02:28,209
we do this first and foremost it is to

00:02:24,760 --> 00:02:30,280
catch bugs fewer issues in production we

00:02:28,209 --> 00:02:32,019
want stable code we want happy

00:02:30,280 --> 00:02:33,970
stakeholders we don't want to break

00:02:32,019 --> 00:02:36,340
things all the time but it's also

00:02:33,970 --> 00:02:37,840
confidence to refactor so if we write

00:02:36,340 --> 00:02:40,330
tests correctly we should be able to

00:02:37,840 --> 00:02:43,600
refactor the underlying code and still

00:02:40,330 --> 00:02:45,130
use those tests I've definitely worked

00:02:43,600 --> 00:02:47,080
on projects where there weren't test

00:02:45,130 --> 00:02:48,970
Suites and the general vibe of those

00:02:47,080 --> 00:02:51,340
kind of projects is you know touch the

00:02:48,970 --> 00:02:53,620
the absolute bare minimum to get by and

00:02:51,340 --> 00:02:55,450
get your job done but with a really kind

00:02:53,620 --> 00:02:56,769
of solid test way that really changes

00:02:55,450 --> 00:02:59,049
that whole mindset and you're always

00:02:56,769 --> 00:03:01,269
kind of looking at projects and ways to

00:02:59,049 --> 00:03:03,580
improve them so it's definitely a

00:03:01,269 --> 00:03:06,280
valuable thing for projects you might

00:03:03,580 --> 00:03:08,830
might be working on when you're working

00:03:06,280 --> 00:03:11,380
in corn country as well a test in a

00:03:08,830 --> 00:03:13,120
patch is really essential because it

00:03:11,380 --> 00:03:14,769
proves to the reviewer that something

00:03:13,120 --> 00:03:16,450
works in a particular way which is

00:03:14,769 --> 00:03:17,769
really important so if you're a

00:03:16,450 --> 00:03:19,390
maintainer and you're stretched pretty

00:03:17,769 --> 00:03:21,579
thin across a lot of different projects

00:03:19,390 --> 00:03:24,970
when you're reviewing patches if they

00:03:21,579 --> 00:03:26,470
come with the test there's a huge huge

00:03:24,970 --> 00:03:28,569
increased chance of that just getting

00:03:26,470 --> 00:03:30,880
committed straightaway if it has a test

00:03:28,569 --> 00:03:32,440
case associated with it so it's another

00:03:30,880 --> 00:03:34,150
benefit of working in the Drupal

00:03:32,440 --> 00:03:37,930
community and getting productive with

00:03:34,150 --> 00:03:40,540
testing I'm going to talk about phpunit

00:03:37,930 --> 00:03:42,540
now and this is really at the core of

00:03:40,540 --> 00:03:45,310
all the testing we do in Coram country

00:03:42,540 --> 00:03:47,650
and it's a framework that's trusted by a

00:03:45,310 --> 00:03:49,900
bunch of other platforms and CMS's and

00:03:47,650 --> 00:03:51,880
projects so any skills you learned that

00:03:49,900 --> 00:03:54,040
are kind of in the sphere of PHP unit

00:03:51,880 --> 00:03:56,650
are going to be translatable to a whole

00:03:54,040 --> 00:03:59,680
different other set of projects which is

00:03:56,650 --> 00:04:01,600
which is great the other benefit is lots

00:03:59,680 --> 00:04:04,180
of tools and extensions out there

00:04:01,600 --> 00:04:05,680
integrate and support PHP unit so by

00:04:04,180 --> 00:04:08,739
learning that and using that in Drupal

00:04:05,680 --> 00:04:10,720
core we get things like integration with

00:04:08,739 --> 00:04:15,819
our IDs and all sorts of other tools

00:04:10,720 --> 00:04:18,280
that we can use around our core tests so

00:04:15,819 --> 00:04:19,930
this is the basic anatomy of a PHP unit

00:04:18,280 --> 00:04:23,430
test I told you we're going to start

00:04:19,930 --> 00:04:25,860
gentle this this is it it's a class

00:04:23,430 --> 00:04:27,840
and at the top of the class we have some

00:04:25,860 --> 00:04:29,789
annotations which specifies some

00:04:27,840 --> 00:04:31,650
metadata about that particular test

00:04:29,789 --> 00:04:34,080
might be the group that test is in or

00:04:31,650 --> 00:04:36,919
the kind of code coverage that that

00:04:34,080 --> 00:04:39,990
particular test class is associated with

00:04:36,919 --> 00:04:43,110
all test classes in the drupal sphere

00:04:39,990 --> 00:04:45,509
will generally extend some test base

00:04:43,110 --> 00:04:47,009
class from Drupal core and these

00:04:45,509 --> 00:04:49,350
different test bases are used for

00:04:47,009 --> 00:04:51,090
different purposes so you kind of have

00:04:49,350 --> 00:04:52,770
to be really conscious of the class

00:04:51,090 --> 00:04:53,970
you're extending and be mindful of that

00:04:52,770 --> 00:04:56,970
when you're kind of picking this

00:04:53,970 --> 00:04:59,430
scenario and what you're testing there's

00:04:56,970 --> 00:05:01,289
also a property on these on these test

00:04:59,430 --> 00:05:02,310
classes which are the modules to set up

00:05:01,289 --> 00:05:05,490
during the test

00:05:02,310 --> 00:05:08,220
so typically tests start from scratch an

00:05:05,490 --> 00:05:09,690
empty database a clean slate and you

00:05:08,220 --> 00:05:12,270
sort of build up the environment around

00:05:09,690 --> 00:05:15,270
the the test case for what particular

00:05:12,270 --> 00:05:17,190
scenario you might want to test and then

00:05:15,270 --> 00:05:19,320
finally you have a test method and any

00:05:17,190 --> 00:05:21,780
method in one of these classes which is

00:05:19,320 --> 00:05:24,449
prefixed with the word test will get

00:05:21,780 --> 00:05:25,590
executed as a test case so that is

00:05:24,449 --> 00:05:27,659
really all you need to know about the

00:05:25,590 --> 00:05:32,370
the kind of skeleton where you need to

00:05:27,659 --> 00:05:34,440
kind of get going writing a test data

00:05:32,370 --> 00:05:36,000
providers a good syntax I'm going to

00:05:34,440 --> 00:05:38,760
talk about this because it's it's so

00:05:36,000 --> 00:05:40,530
widely used in corn country and this

00:05:38,760 --> 00:05:42,960
essentially is another piece of metadata

00:05:40,530 --> 00:05:45,060
you put on top of a test method and what

00:05:42,960 --> 00:05:46,620
that allows you to do is reuse one test

00:05:45,060 --> 00:05:49,349
method for lots of different test cases

00:05:46,620 --> 00:05:51,419
so we have a method under here which is

00:05:49,349 --> 00:05:53,699
returning an array of arrays and the

00:05:51,419 --> 00:05:55,440
outer array is all of the test cases

00:05:53,699 --> 00:05:57,750
that will be passed into that test

00:05:55,440 --> 00:05:59,909
method and then each element inside that

00:05:57,750 --> 00:06:02,310
sub array is the arguments in order for

00:05:59,909 --> 00:06:05,250
that test method so here we're testing

00:06:02,310 --> 00:06:06,870
some URL parsing we're saying that if

00:06:05,250 --> 00:06:09,810
we're given this string we can extract

00:06:06,870 --> 00:06:11,340
some ID from it but to actually increase

00:06:09,810 --> 00:06:12,840
the test coverage of the module we don't

00:06:11,340 --> 00:06:15,000
have to increase the complexity of the

00:06:12,840 --> 00:06:18,630
test method we can just insert test

00:06:15,000 --> 00:06:20,759
cases into this data provider which

00:06:18,630 --> 00:06:22,680
really encourages is asked to kind of

00:06:20,759 --> 00:06:27,750
flesh out and extend the test coverage

00:06:22,680 --> 00:06:30,419
whenever we can that's kind of the the

00:06:27,750 --> 00:06:32,070
most I'm going to go into specific PHP

00:06:30,419 --> 00:06:34,159
unit concepts on Thursday there is a

00:06:32,070 --> 00:06:36,439
session by the maintainer of PHP

00:06:34,159 --> 00:06:38,839
so he's gonna be very well equipped to

00:06:36,439 --> 00:06:44,239
get a run up to speed on on phpunit

00:06:38,839 --> 00:06:47,149
specifically let's step back into a bit

00:06:44,239 --> 00:06:48,739
of a recent history and in Drupal 6

00:06:47,149 --> 00:06:51,139
there was a contra module called simple

00:06:48,739 --> 00:06:52,999
test and that integrated a testing

00:06:51,139 --> 00:06:55,399
framework into jerubbaal which allowed

00:06:52,999 --> 00:06:57,589
us to write tests and again some

00:06:55,399 --> 00:07:01,339
traction and it was introduced in Drupal

00:06:57,589 --> 00:07:02,689
7 for testing Drupal core but the

00:07:01,339 --> 00:07:04,909
problem with this testing framework was

00:07:02,689 --> 00:07:08,629
it didn't really gain much widespread

00:07:04,909 --> 00:07:12,409
adoption so phpunit kind of won the race

00:07:08,629 --> 00:07:14,539
and it superseded that testing framework

00:07:12,409 --> 00:07:16,639
in Drupal 8 but if you are writing

00:07:14,539 --> 00:07:18,830
Drupal 7 contributor projects it's still

00:07:16,639 --> 00:07:21,019
kind of the the go-to tool so it's worth

00:07:18,830 --> 00:07:24,189
knowing about in case you step back in

00:07:21,019 --> 00:07:28,429
time into Drupal 7 land for an afternoon

00:07:24,189 --> 00:07:29,990
but yeah this has been superseded but

00:07:28,429 --> 00:07:33,229
the problem is there's still a lot of

00:07:29,990 --> 00:07:34,639
simple tests in Drupal 8 core today so

00:07:33,229 --> 00:07:35,959
there's an initiative around putting

00:07:34,639 --> 00:07:37,550
these tests as well so if you're

00:07:35,959 --> 00:07:41,269
interested in testing and you want to

00:07:37,550 --> 00:07:43,789
sort of see those those legacy tests get

00:07:41,269 --> 00:07:45,490
upgraded there's there's a tag you can

00:07:43,789 --> 00:07:47,719
search and find issues to help up there

00:07:45,490 --> 00:07:50,689
and really the benefit of that is going

00:07:47,719 --> 00:07:53,300
to be consistency so if you are working

00:07:50,689 --> 00:07:56,029
on a Drupal 8 core issue you don't have

00:07:53,300 --> 00:07:57,679
to sort of context switch between you

00:07:56,029 --> 00:08:04,099
know what kind of test run am I going to

00:07:57,679 --> 00:08:05,269
use to test this to test this class so

00:08:04,099 --> 00:08:08,149
the kind of tests I'm going to look at

00:08:05,269 --> 00:08:10,159
today from a really high level are kind

00:08:08,149 --> 00:08:11,360
of differentiated by the level of

00:08:10,159 --> 00:08:14,209
abstraction in which they kind of

00:08:11,360 --> 00:08:15,740
interacts with your application so on

00:08:14,209 --> 00:08:17,719
one end of the spectrum we have unit

00:08:15,740 --> 00:08:19,579
testing and that's really the lowest

00:08:17,719 --> 00:08:22,339
level of abstraction kind of tested

00:08:19,579 --> 00:08:23,839
right it's interacting directly with the

00:08:22,339 --> 00:08:26,269
units in your application it's

00:08:23,839 --> 00:08:27,259
instantiating classes there has a lot of

00:08:26,269 --> 00:08:28,999
knowledge about the kind of

00:08:27,259 --> 00:08:31,610
implementation of your application as a

00:08:28,999 --> 00:08:33,229
whole then you kind of move into that

00:08:31,610 --> 00:08:35,509
middle level of abstraction with

00:08:33,229 --> 00:08:38,060
integration testing and that's working

00:08:35,509 --> 00:08:40,370
within a Drupal bootstrap so we actually

00:08:38,060 --> 00:08:44,329
have a functioning website we can do

00:08:40,370 --> 00:08:46,270
assertions inside the Drupal API and the

00:08:44,329 --> 00:08:48,130
highest level of abstraction is bunk

00:08:46,270 --> 00:08:50,410
you I testing and that's blackbox

00:08:48,130 --> 00:08:52,600
testing because it has no understanding

00:08:50,410 --> 00:08:54,460
of the application it doesn't matter how

00:08:52,600 --> 00:08:56,800
the implementation is done it's really

00:08:54,460 --> 00:08:58,780
just asserting the the constraints of

00:08:56,800 --> 00:09:01,120
the system from a really high level of

00:08:58,780 --> 00:09:03,130
abstraction and that's a web browser so

00:09:01,120 --> 00:09:05,560
there's these three different kind of

00:09:03,130 --> 00:09:10,540
broad categories of testing that we we

00:09:05,560 --> 00:09:12,490
apply to to report the test pyramid is a

00:09:10,540 --> 00:09:13,660
concept that that broadly describes how

00:09:12,490 --> 00:09:17,290
many of these kind of tests you should

00:09:13,660 --> 00:09:20,320
be writing as well so the thesis is that

00:09:17,290 --> 00:09:21,850
really at the the lowest level you

00:09:20,320 --> 00:09:23,680
should have the most number of unit

00:09:21,850 --> 00:09:24,880
tests in an application so where

00:09:23,680 --> 00:09:26,380
possible you should interact directly

00:09:24,880 --> 00:09:29,620
with your units and provide this

00:09:26,380 --> 00:09:30,640
foundation level of coverage and then as

00:09:29,620 --> 00:09:33,760
you move up you should have fewer

00:09:30,640 --> 00:09:35,050
integration tests and some UI tests and

00:09:33,760 --> 00:09:37,210
I want to illustrate this point with

00:09:35,050 --> 00:09:39,190
with this scenario this is a fictional

00:09:37,210 --> 00:09:41,500
scenario but the thing that we want to

00:09:39,190 --> 00:09:44,050
test here is our shipping prices correct

00:09:41,500 --> 00:09:46,420
on an e-commerce store so if we were to

00:09:44,050 --> 00:09:47,800
do this with a UI test we need all of

00:09:46,420 --> 00:09:50,170
these different components to be able to

00:09:47,800 --> 00:09:51,550
actually run this test so we need a user

00:09:50,170 --> 00:09:53,200
who can access checkout we need a

00:09:51,550 --> 00:09:55,750
product we need them to be able to

00:09:53,200 --> 00:09:57,490
navigate through the the checkout and

00:09:55,750 --> 00:09:58,990
then finally when we land on the

00:09:57,490 --> 00:10:01,720
shipping page we can actually assert

00:09:58,990 --> 00:10:04,660
that the price is correct and this would

00:10:01,720 --> 00:10:06,730
be a perfectly valid test but it does

00:10:04,660 --> 00:10:09,070
have a few issues one of them is that

00:10:06,730 --> 00:10:10,870
it's incredibly slow so any kind of UI

00:10:09,070 --> 00:10:12,280
testing is slow by nature because

00:10:10,870 --> 00:10:14,050
there's a browser in the background

00:10:12,280 --> 00:10:16,570
going in performing actions on your

00:10:14,050 --> 00:10:20,770
website the other thing is it's a really

00:10:16,570 --> 00:10:23,140
brutal test so anytime any one of those

00:10:20,770 --> 00:10:25,150
systems change there's a good chance

00:10:23,140 --> 00:10:27,040
that it's going to break your test which

00:10:25,150 --> 00:10:28,960
isn't really concerned with any of those

00:10:27,040 --> 00:10:31,660
other things right we just care about

00:10:28,960 --> 00:10:33,760
shipping prices so why we're changing a

00:10:31,660 --> 00:10:36,520
product page break our shipping prices

00:10:33,760 --> 00:10:38,710
test when you compare that to a unit

00:10:36,520 --> 00:10:40,470
test you're working directly with the

00:10:38,710 --> 00:10:43,120
unit in the application that's

00:10:40,470 --> 00:10:46,120
calculating those prices so you might

00:10:43,120 --> 00:10:47,860
instantiate a instance of the shipping

00:10:46,120 --> 00:10:49,180
price calculator and then you're calling

00:10:47,860 --> 00:10:51,550
a method and asserting a return value

00:10:49,180 --> 00:10:54,850
and again the benefit of this is it's

00:10:51,550 --> 00:10:57,190
super fast runs in ten milliseconds any

00:10:54,850 --> 00:10:59,270
changes outside of that unit are going

00:10:57,190 --> 00:11:01,460
to affect that test

00:10:59,270 --> 00:11:03,710
and again it encourages you to test lots

00:11:01,460 --> 00:11:05,750
and lots of different scenarios because

00:11:03,710 --> 00:11:07,850
it's so easy to set up the preconditions

00:11:05,750 --> 00:11:09,800
for that one thing completely in

00:11:07,850 --> 00:11:12,220
isolation that's creating all of these

00:11:09,800 --> 00:11:14,360
entities and clicking through these UIs

00:11:12,220 --> 00:11:18,140
for this particular scenario we

00:11:14,360 --> 00:11:19,370
definitely want to be the test on the

00:11:18,140 --> 00:11:21,500
other end of the spectrum there's

00:11:19,370 --> 00:11:23,780
another scenario which is can the user

00:11:21,500 --> 00:11:26,450
checkout right so this is this is on the

00:11:23,780 --> 00:11:28,310
other end of the spectrum because we

00:11:26,450 --> 00:11:30,260
can't you to test this scenario because

00:11:28,310 --> 00:11:31,940
there's no one particular unit in the

00:11:30,260 --> 00:11:34,970
application which is actually

00:11:31,940 --> 00:11:36,860
responsible for all of checkout so this

00:11:34,970 --> 00:11:38,840
is the kind of test that you definitely

00:11:36,860 --> 00:11:40,670
would want to create a high level of

00:11:38,840 --> 00:11:43,340
abstraction UI test to go and perform

00:11:40,670 --> 00:11:44,720
all of these actions but realistically

00:11:43,340 --> 00:11:47,810
you probably only have one or two of

00:11:44,720 --> 00:11:49,430
those for a complex website and the the

00:11:47,810 --> 00:11:50,780
foundation would be those hundreds of

00:11:49,430 --> 00:11:54,070
units in your application that are

00:11:50,780 --> 00:11:57,650
individually tested for optimal coverage

00:11:54,070 --> 00:12:00,470
so that's really the the testing period

00:11:57,650 --> 00:12:02,660
it describes the optimal number of tests

00:12:00,470 --> 00:12:03,830
you should write Drupal definitely kind

00:12:02,660 --> 00:12:06,080
of turns this on its head a little bit

00:12:03,830 --> 00:12:09,560
with site building a few other concepts

00:12:06,080 --> 00:12:11,510
that generally are a lot more UI tests

00:12:09,560 --> 00:12:14,090
on Drupal projects than there are unit

00:12:11,510 --> 00:12:17,870
tests in some cases kind of depends on

00:12:14,090 --> 00:12:19,820
the scenario as well so the first actual

00:12:17,870 --> 00:12:22,750
concrete test class we're going to be

00:12:19,820 --> 00:12:24,740
looking at is JavaScript test base and

00:12:22,750 --> 00:12:27,770
this is the highest level of abstraction

00:12:24,740 --> 00:12:29,180
we have and its UI testing with a

00:12:27,770 --> 00:12:31,310
browser and this browser is actually

00:12:29,180 --> 00:12:33,110
executing JavaScript on the page as you

00:12:31,310 --> 00:12:35,210
go and perform actions and navigate

00:12:33,110 --> 00:12:36,860
around and do things this is a new

00:12:35,210 --> 00:12:39,920
capability in Drupal 8 we didn't have

00:12:36,860 --> 00:12:42,440
this in Drupal 7 but the caveat of this

00:12:39,920 --> 00:12:44,420
kind of test is again it is incredibly

00:12:42,440 --> 00:12:46,820
slow so you want to be kind of selective

00:12:44,420 --> 00:12:47,720
about using this particular tool you

00:12:46,820 --> 00:12:50,330
want to be using it when it's

00:12:47,720 --> 00:12:52,310
appropriate and not trying to test too

00:12:50,330 --> 00:12:56,960
many scenarios that are really outside

00:12:52,310 --> 00:12:58,940
the realm of specifically UI testing the

00:12:56,960 --> 00:13:01,850
reason we have a browser at all is from

00:12:58,940 --> 00:13:04,190
another framework called mink and mink

00:13:01,850 --> 00:13:06,470
is all about pluggable drivers so mink

00:13:04,190 --> 00:13:07,280
provides this API for doing things on

00:13:06,470 --> 00:13:09,560
the page

00:13:07,280 --> 00:13:12,380
so visiting urls clicking links

00:13:09,560 --> 00:13:14,810
submitting forms any kind of action you

00:13:12,380 --> 00:13:16,790
would do as a user in a web browser mink

00:13:14,810 --> 00:13:20,810
is the API that we leverage to actually

00:13:16,790 --> 00:13:23,330
provide that and in this little example

00:13:20,810 --> 00:13:24,830
we're visiting a node page we're gonna

00:13:23,330 --> 00:13:26,540
find an image click on it wait a little

00:13:24,830 --> 00:13:30,170
bit and make sure a lot of color box

00:13:26,540 --> 00:13:32,090
launches so since it's a real browser

00:13:30,170 --> 00:13:36,590
executing JavaScript we can we can do

00:13:32,090 --> 00:13:38,390
these kind of actions to get productive

00:13:36,590 --> 00:13:39,980
with this kind of test there's a couple

00:13:38,390 --> 00:13:41,210
things you want to know there's methods

00:13:39,980 --> 00:13:43,490
on this class that you're going to want

00:13:41,210 --> 00:13:45,020
to call to do different things and the

00:13:43,490 --> 00:13:47,210
first one is get session and this

00:13:45,020 --> 00:13:49,460
behaves a little bit like window does in

00:13:47,210 --> 00:13:51,590
JavaScript so it's kind of controlling

00:13:49,460 --> 00:13:54,260
the meta of the page you know doing

00:13:51,590 --> 00:13:56,810
things like forwards back change URL

00:13:54,260 --> 00:13:58,340
that kind of thing inside that object

00:13:56,810 --> 00:14:00,650
there's a there's another method called

00:13:58,340 --> 00:14:02,960
get page and this is a bit like document

00:14:00,650 --> 00:14:05,420
in JavaScript you can interact with the

00:14:02,960 --> 00:14:07,100
Dom basically so that might be doing

00:14:05,420 --> 00:14:09,860
things like filling in form fields

00:14:07,100 --> 00:14:11,420
finding elements any any kind of

00:14:09,860 --> 00:14:13,850
manipulation of the page that you might

00:14:11,420 --> 00:14:17,270
want to do inside a test you'd use get

00:14:13,850 --> 00:14:19,810
session get page and the final one is a

00:14:17,270 --> 00:14:22,490
search session and this is really about

00:14:19,810 --> 00:14:26,150
enforcing those constraints on the

00:14:22,490 --> 00:14:28,700
particular page so you might assert that

00:14:26,150 --> 00:14:31,430
a certain element exists or that some

00:14:28,700 --> 00:14:32,780
text appears on the page and that's kind

00:14:31,430 --> 00:14:34,400
of the the test part of the whole

00:14:32,780 --> 00:14:35,839
scenario the rest of its really about

00:14:34,400 --> 00:14:37,730
sort of navigating and setting up

00:14:35,839 --> 00:14:40,520
preconditions for actually testing some

00:14:37,730 --> 00:14:42,700
particular scenario there's also a few

00:14:40,520 --> 00:14:45,530
drupal helpers for doing common things

00:14:42,700 --> 00:14:48,440
posting forms visiting a page logging

00:14:45,530 --> 00:14:50,000
any user those are all handy to know so

00:14:48,440 --> 00:14:52,400
this little snippet is actually from a

00:14:50,000 --> 00:14:55,550
real testing contrib it's testing the

00:14:52,400 --> 00:14:57,170
color box module and we're testing the

00:14:55,550 --> 00:15:00,350
gallery yeah so we're creating a user

00:14:57,170 --> 00:15:02,720
logging them in visiting a page clicking

00:15:00,350 --> 00:15:04,280
on the first image we find on the page

00:15:02,720 --> 00:15:06,980
and then we're going to assert a whole

00:15:04,280 --> 00:15:08,930
bunch of things and that is that there's

00:15:06,980 --> 00:15:12,290
an element on the page with a particular

00:15:08,930 --> 00:15:14,120
caption in it so this is testing that

00:15:12,290 --> 00:15:16,100
whole end-to-end integration of

00:15:14,120 --> 00:15:18,440
installing the module creating the

00:15:16,100 --> 00:15:20,810
configuration actually doing the actions

00:15:18,440 --> 00:15:24,360
as if you are a user

00:15:20,810 --> 00:15:26,550
and since it is a we're a real browser

00:15:24,360 --> 00:15:28,470
this is the kind of output you can get

00:15:26,550 --> 00:15:30,810
from these tests you can take

00:15:28,470 --> 00:15:33,329
screenshots during these tests and see

00:15:30,810 --> 00:15:36,750
what's going on under the hood this is

00:15:33,329 --> 00:15:38,699
really handy for debugging if you're not

00:15:36,750 --> 00:15:40,139
sure why a test is failing you can pop a

00:15:38,699 --> 00:15:44,130
screenshot in there and find out what's

00:15:40,139 --> 00:15:45,779
going on under the hood one of the

00:15:44,130 --> 00:15:48,899
issues that does come up with JavaScript

00:15:45,779 --> 00:15:50,160
test base is non-determinism and in the

00:15:48,899 --> 00:15:53,100
queue so that's kind of known as the

00:15:50,160 --> 00:15:55,019
random fail and that's really about this

00:15:53,100 --> 00:15:56,579
this but the fact that we do have this

00:15:55,019 --> 00:15:58,800
browser doing stuff in the background

00:15:56,579 --> 00:16:00,569
and it behaves like a browser with

00:15:58,800 --> 00:16:03,000
respect to things like asynchronous

00:16:00,569 --> 00:16:03,569
JavaScript so the repeat offender is

00:16:03,000 --> 00:16:06,569
Ajax

00:16:03,569 --> 00:16:08,160
if you go and fire some Ajax request the

00:16:06,569 --> 00:16:09,839
response that comes back and even things

00:16:08,160 --> 00:16:11,610
that happen after that you sort of have

00:16:09,839 --> 00:16:14,040
to make sure that you're waiting for

00:16:11,610 --> 00:16:17,790
those things to happen and there's a

00:16:14,040 --> 00:16:19,170
bunch of helpers shown here where you

00:16:17,790 --> 00:16:21,060
can where you can wait for some

00:16:19,170 --> 00:16:22,980
precondition on the page to have

00:16:21,060 --> 00:16:25,170
completed before continuing on with the

00:16:22,980 --> 00:16:26,790
test you can have scenarios where

00:16:25,170 --> 00:16:29,130
something passes nine out of ten times

00:16:26,790 --> 00:16:30,660
and it fails on the tenth time and

00:16:29,130 --> 00:16:32,610
that's actually a pretty ugly thing for

00:16:30,660 --> 00:16:34,230
a test suite because if it happens

00:16:32,610 --> 00:16:35,639
enough and you have enough tests that

00:16:34,230 --> 00:16:38,790
are in that sort of non-deterministic

00:16:35,639 --> 00:16:40,500
bucket people sort of lose confidence in

00:16:38,790 --> 00:16:42,810
the test suite as a whole you know they

00:16:40,500 --> 00:16:45,600
don't treat like a red test runners as

00:16:42,810 --> 00:16:48,449
as really this bad circumstance which is

00:16:45,600 --> 00:16:49,920
what it's really designed to be so

00:16:48,449 --> 00:16:54,360
fixing non determinism is really

00:16:49,920 --> 00:16:56,550
important in automated testing browser

00:16:54,360 --> 00:16:58,560
test space is kind of like the cousin of

00:16:56,550 --> 00:17:01,410
JavaScript test base and the good news

00:16:58,560 --> 00:17:02,880
is it's the exact same API you don't

00:17:01,410 --> 00:17:05,880
have to worry about learning any kind of

00:17:02,880 --> 00:17:08,400
new tools it's the search session get

00:17:05,880 --> 00:17:10,020
session get page that kind of stuff but

00:17:08,400 --> 00:17:12,000
the difference is this test class

00:17:10,020 --> 00:17:15,419
doesn't execute any JavaScript

00:17:12,000 --> 00:17:18,329
whatsoever and it's a lot faster it's

00:17:15,419 --> 00:17:20,909
less prone to random fails and it has no

00:17:18,329 --> 00:17:22,199
external dependency so to actually run

00:17:20,909 --> 00:17:23,730
that JavaScript browser you have to go

00:17:22,199 --> 00:17:25,319
on download phantom j/s which is a

00:17:23,730 --> 00:17:26,480
separate binary this things are written

00:17:25,319 --> 00:17:28,730
in PHP

00:17:26,480 --> 00:17:31,970
you can just kick off composer install

00:17:28,730 --> 00:17:33,290
and run the test and again you should

00:17:31,970 --> 00:17:39,049
use this for any test that doesn't

00:17:33,290 --> 00:17:41,299
require JavaScript for all of these kind

00:17:39,049 --> 00:17:42,919
of tests I think I mentioned earlier but

00:17:41,299 --> 00:17:45,590
you're setting up the whole universe of

00:17:42,919 --> 00:17:48,049
the test from scratch so you start from

00:17:45,590 --> 00:17:51,110
a blank canvas in the background the

00:17:48,049 --> 00:17:52,520
test goes and installs Drupal you have

00:17:51,110 --> 00:17:53,630
to install the modules that you need for

00:17:52,520 --> 00:17:55,460
the tests you have to create all the

00:17:53,630 --> 00:17:57,500
configuration you might enable test

00:17:55,460 --> 00:17:59,510
modules that sort of thing and the

00:17:57,500 --> 00:18:02,030
reason we do that in core and contrib is

00:17:59,510 --> 00:18:04,429
really to isolate each test run we don't

00:18:02,030 --> 00:18:06,950
want to be testing on the same sort of

00:18:04,429 --> 00:18:08,630
Drupal instance for different tests

00:18:06,950 --> 00:18:11,720
because obviously state can bleed

00:18:08,630 --> 00:18:13,280
between those two test runs but there's

00:18:11,720 --> 00:18:17,630
this whole class of other tools out

00:18:13,280 --> 00:18:20,750
there like be hats or you know there's a

00:18:17,630 --> 00:18:23,000
few others that really just work over

00:18:20,750 --> 00:18:24,980
the top of a pre provisioned instance

00:18:23,000 --> 00:18:28,130
right we don't have to worry about

00:18:24,980 --> 00:18:29,990
setting up the state of our site before

00:18:28,130 --> 00:18:33,169
we're testing it we might do something

00:18:29,990 --> 00:18:37,309
like sync a database or do a site

00:18:33,169 --> 00:18:39,500
install and there is a concept people

00:18:37,309 --> 00:18:41,179
are working on this in the core keys for

00:18:39,500 --> 00:18:43,010
being able to use these exact same set

00:18:41,179 --> 00:18:45,230
of tools I'm completely pre provisioned

00:18:43,010 --> 00:18:46,840
web sites so you don't have to start

00:18:45,230 --> 00:18:49,340
from scratch you can do something like

00:18:46,840 --> 00:18:52,070
set up the site as you would on a CI

00:18:49,340 --> 00:18:53,660
system and then use JavaScript test

00:18:52,070 --> 00:18:55,280
based browser test base and go and

00:18:53,660 --> 00:18:58,250
perform all of those actions on that

00:18:55,280 --> 00:18:59,900
existing fully set up site and this kind

00:18:58,250 --> 00:19:01,820
of test is really handy whenever you're

00:18:59,900 --> 00:19:04,669
testing things which are heavily

00:19:01,820 --> 00:19:06,460
interdependent right so if you've got if

00:19:04,669 --> 00:19:08,900
you've got a custom site build and

00:19:06,460 --> 00:19:11,179
everything that goes into that web site

00:19:08,900 --> 00:19:13,730
is a combination of site building things

00:19:11,179 --> 00:19:16,490
from a theme custom code tweak templates

00:19:13,730 --> 00:19:18,650
your own custom modules and contrib

00:19:16,490 --> 00:19:20,690
things interacting it would be kind of

00:19:18,650 --> 00:19:22,280
crazy to try and set all of that stuff

00:19:20,690 --> 00:19:24,230
up in a set up method to try and

00:19:22,280 --> 00:19:26,000
replicate production when you can just

00:19:24,230 --> 00:19:28,490
sort of bring production to you and test

00:19:26,000 --> 00:19:31,280
over the top of it so this is a patch in

00:19:28,490 --> 00:19:35,270
progress we've been running this patch

00:19:31,280 --> 00:19:39,159
at previous/next since about 8.1 so it's

00:19:35,270 --> 00:19:39,159
definitely had some some battle testing

00:19:40,330 --> 00:19:43,720
so yeah like I said we do this because

00:19:41,799 --> 00:19:47,019
we want to create production and test

00:19:43,720 --> 00:19:49,210
that but the cons of this is it can be a

00:19:47,019 --> 00:19:51,669
little bit brittle so between test runs

00:19:49,210 --> 00:19:54,370
the state leaks on to this production

00:19:51,669 --> 00:19:55,690
site that we have provisioned and as a

00:19:54,370 --> 00:19:57,820
result it's kind of harder to maintain

00:19:55,690 --> 00:20:00,909
these tests there's a lot more reason

00:19:57,820 --> 00:20:02,140
for them to go wrong but again as part

00:20:00,909 --> 00:20:03,909
of that pyramid you know that that's

00:20:02,140 --> 00:20:05,799
like the highest level of abstraction of

00:20:03,909 --> 00:20:07,330
end-to-end testing you don't want too

00:20:05,799 --> 00:20:09,490
many of those you sort of want to

00:20:07,330 --> 00:20:12,669
isolate things where possible in a test

00:20:09,490 --> 00:20:14,380
suite anyway this is this is really that

00:20:12,669 --> 00:20:19,330
that full level of confidence for

00:20:14,380 --> 00:20:21,909
end-to-end testing will talk about

00:20:19,330 --> 00:20:24,279
kernel test base and this is the first

00:20:21,909 --> 00:20:26,380
test class that we use which completely

00:20:24,279 --> 00:20:28,299
drops the notion of a web browser so

00:20:26,380 --> 00:20:30,309
we're not interested in doing things as

00:20:28,299 --> 00:20:32,409
a user would we're really interested in

00:20:30,309 --> 00:20:35,200
testing things as a developer might

00:20:32,409 --> 00:20:37,840
interact with an API and so kennel test

00:20:35,200 --> 00:20:40,389
base creates a bootstrap of Drupal with

00:20:37,840 --> 00:20:42,130
a real Drupal installation and a Drupal

00:20:40,389 --> 00:20:46,320
database and you go and write your test

00:20:42,130 --> 00:20:46,320
test code inside this Drupal bootstrap

00:20:46,980 --> 00:20:51,669
it's really fast compared to the other

00:20:49,539 --> 00:20:54,340
the other types of tests so this is an

00:20:51,669 --> 00:20:56,830
example of the speed of one of these

00:20:54,340 --> 00:20:59,500
tests and each one of those green ticks

00:20:56,830 --> 00:21:01,419
is actually like a fully fresh version

00:20:59,500 --> 00:21:03,610
of Drupal completely from scratch

00:21:01,419 --> 00:21:07,269
there's no state leaking between those

00:21:03,610 --> 00:21:08,889
two things but you do have to set these

00:21:07,269 --> 00:21:10,750
things up and the reason it is so fast

00:21:08,889 --> 00:21:13,179
is because it's not doing a full

00:21:10,750 --> 00:21:15,370
end-to-end installation of Drupal you

00:21:13,179 --> 00:21:17,620
actually instructs the test class what

00:21:15,370 --> 00:21:19,590
parts of Drupal you want installed

00:21:17,620 --> 00:21:21,789
before actually running your test code

00:21:19,590 --> 00:21:23,200
so there's only three methods that do

00:21:21,789 --> 00:21:25,450
that three you have to know about and

00:21:23,200 --> 00:21:27,909
that's install entity schema install

00:21:25,450 --> 00:21:29,409
schema and install config and the first

00:21:27,909 --> 00:21:31,630
one basically instructs the test pass

00:21:29,409 --> 00:21:34,750
that you plan on creating an entity or

00:21:31,630 --> 00:21:36,490
using an entity during your test the

00:21:34,750 --> 00:21:38,409
next one is install schema that's if a

00:21:36,490 --> 00:21:40,690
module provides a table that you need to

00:21:38,409 --> 00:21:42,850
use as part of the test in this case

00:21:40,690 --> 00:21:45,370
it's sequences table from the system

00:21:42,850 --> 00:21:47,289
module and the last one is install

00:21:45,370 --> 00:21:49,899
configuration so any config in that

00:21:47,289 --> 00:21:51,490
config install directory if you need to

00:21:49,899 --> 00:21:52,110
actually use that config as part of your

00:21:51,490 --> 00:21:55,140
test

00:21:52,110 --> 00:21:56,580
you have to specify that as well and

00:21:55,140 --> 00:21:58,620
it's kind of a small trade-off to make

00:21:56,580 --> 00:22:02,220
just based on how fast these tests

00:21:58,620 --> 00:22:04,620
actually run here is an example of a

00:22:02,220 --> 00:22:06,900
kernel test it's a simple field

00:22:04,620 --> 00:22:09,030
formatter it's not doing anything

00:22:06,900 --> 00:22:11,010
anything too crazy it's just formatting

00:22:09,030 --> 00:22:14,400
the the output of a field with a with a

00:22:11,010 --> 00:22:15,840
theme rapper but there's a couple of

00:22:14,400 --> 00:22:19,290
subsystems which are really kind of

00:22:15,840 --> 00:22:21,570
contributing to this test right so we're

00:22:19,290 --> 00:22:22,260
actually just testing one class which is

00:22:21,570 --> 00:22:24,270
our formatter

00:22:22,260 --> 00:22:26,309
but to actually arrive at that outcome

00:22:24,270 --> 00:22:29,220
we're using entity and field API for

00:22:26,309 --> 00:22:30,780
storage we're saving an entity we're

00:22:29,220 --> 00:22:32,970
using the plug-in system because field

00:22:30,780 --> 00:22:34,500
format is a plug-ins and we're also kind

00:22:32,970 --> 00:22:37,620
of using the module system because we're

00:22:34,500 --> 00:22:39,299
actually installing our custom module so

00:22:37,620 --> 00:22:41,100
this really sits in that middle level of

00:22:39,299 --> 00:22:42,780
abstraction where you're not kind of

00:22:41,100 --> 00:22:44,370
right down into the details of the

00:22:42,780 --> 00:22:45,809
implementation of something but you're

00:22:44,370 --> 00:22:48,510
not so far away that you're in a web

00:22:45,809 --> 00:22:51,270
browser and this is called integration

00:22:48,510 --> 00:22:53,760
testing because it's testing the

00:22:51,270 --> 00:22:54,990
integration of your particular unit in

00:22:53,760 --> 00:22:57,419
your application with these other

00:22:54,990 --> 00:23:02,940
subsystems that's where the name comes

00:22:57,419 --> 00:23:05,220
from so the last one is unit test case

00:23:02,940 --> 00:23:07,350
and this is incredibly fast right it's

00:23:05,220 --> 00:23:09,750
the the lowest level of abstraction in

00:23:07,350 --> 00:23:11,130
in testing that you'll encounter and it

00:23:09,750 --> 00:23:13,020
does away with the concept of a Drupal

00:23:11,130 --> 00:23:14,840
database you don't have any of that kind

00:23:13,020 --> 00:23:18,000
of context you've got no web browser

00:23:14,840 --> 00:23:19,290
it's super fast and you instantiate the

00:23:18,000 --> 00:23:22,080
classes and the units that you're

00:23:19,290 --> 00:23:24,419
testing directly inside the test right

00:23:22,080 --> 00:23:26,400
so you you know about the implementation

00:23:24,419 --> 00:23:28,860
of your particular unit you're going to

00:23:26,400 --> 00:23:34,049
do things like pass the dependencies

00:23:28,860 --> 00:23:36,090
call methods and here's an example from

00:23:34,049 --> 00:23:37,980
Drupal commerce actually and this is

00:23:36,090 --> 00:23:40,070
testing one of the units in Drupal

00:23:37,980 --> 00:23:42,450
commerce which is the rounding system

00:23:40,070 --> 00:23:44,309
and this creates an instance of the

00:23:42,450 --> 00:23:48,630
roundup and it passes it a few of its

00:23:44,309 --> 00:23:50,250
dependencies so when your unit testing

00:23:48,630 --> 00:23:52,200
since you don't have access to things

00:23:50,250 --> 00:23:54,540
like a database if you actually interact

00:23:52,200 --> 00:23:57,660
with say an entity in your particular

00:23:54,540 --> 00:23:58,950
unit you actually have to create a test

00:23:57,660 --> 00:24:01,320
double which is basically a

00:23:58,950 --> 00:24:04,290
representation of your dependency which

00:24:01,320 --> 00:24:05,710
behaves in a really specific fashion so

00:24:04,290 --> 00:24:08,020
in this case we're creating

00:24:05,710 --> 00:24:10,590
three dependencies we're creating an

00:24:08,020 --> 00:24:12,850
entity for currency u.s. dollars and

00:24:10,590 --> 00:24:15,820
we're setting up some preconditions to

00:24:12,850 --> 00:24:17,740
say that this dependency when the ID

00:24:15,820 --> 00:24:20,080
method is called is going to return US

00:24:17,740 --> 00:24:21,789
dollars then we're creating entity

00:24:20,080 --> 00:24:24,100
storage and entity type manager and

00:24:21,789 --> 00:24:26,409
we're passing all of that into the round

00:24:24,100 --> 00:24:29,320
R so that the rounder doesn't need that

00:24:26,409 --> 00:24:37,539
extra level of data base of abstraction

00:24:29,320 --> 00:24:39,010
to actually do its thing so design of

00:24:37,539 --> 00:24:41,830
your code actually kind of ties into

00:24:39,010 --> 00:24:44,679
this this concept of unit testing for a

00:24:41,830 --> 00:24:46,480
couple of reasons these are just a few

00:24:44,679 --> 00:24:48,610
of them and the first one is it clearly

00:24:46,480 --> 00:24:50,770
reveals all the dependencies of a

00:24:48,610 --> 00:24:52,720
particular unit in your application

00:24:50,770 --> 00:24:54,850
so with that rounder example we know

00:24:52,720 --> 00:24:56,559
exactly what the rounder has access to

00:24:54,850 --> 00:24:59,279
because we actually had to go and create

00:24:56,559 --> 00:25:01,600
those test doubles as part of the test

00:24:59,279 --> 00:25:03,760
so it kind of encourages information

00:25:01,600 --> 00:25:05,830
hiding right so did we really need

00:25:03,760 --> 00:25:07,929
access to the the entire entity type

00:25:05,830 --> 00:25:10,029
manager maybe not could we have just

00:25:07,929 --> 00:25:13,120
injected some entity storage for doing

00:25:10,029 --> 00:25:14,320
things like loading so it kind of it

00:25:13,120 --> 00:25:16,179
kind of forces you to have that

00:25:14,320 --> 00:25:17,890
discussion with yourself because you are

00:25:16,179 --> 00:25:20,620
like manually going and creating these

00:25:17,890 --> 00:25:22,840
test doubles it's also a great reference

00:25:20,620 --> 00:25:25,330
for your public interface or your public

00:25:22,840 --> 00:25:28,299
API of the particular things you're

00:25:25,330 --> 00:25:30,130
writing in your application so if you've

00:25:28,299 --> 00:25:33,130
ever written a service or something like

00:25:30,130 --> 00:25:34,990
that and to actually use it in all the

00:25:33,130 --> 00:25:36,850
different ways you intended you have to

00:25:34,990 --> 00:25:38,980
go and do these crazy things from the UI

00:25:36,850 --> 00:25:41,230
if you're actually interacting with it

00:25:38,980 --> 00:25:43,059
in a test you can sort of exactly see

00:25:41,230 --> 00:25:44,799
how like the difference in areas where

00:25:43,059 --> 00:25:49,390
you might use that particular service or

00:25:44,799 --> 00:25:51,220
unit so I was talking a little bit about

00:25:49,390 --> 00:25:53,620
test doubles so this is the notion of

00:25:51,220 --> 00:25:55,659
creating a dependency for your unit you

00:25:53,620 --> 00:25:57,130
know in a test class and there's a

00:25:55,659 --> 00:26:00,279
there's a lot of different types of them

00:25:57,130 --> 00:26:02,200
these are a few the first one is a dummy

00:26:00,279 --> 00:26:03,700
and on the left hand side that kind of

00:26:02,200 --> 00:26:05,559
correlates to the the text on the right

00:26:03,700 --> 00:26:08,020
hand side so the first one is a dummy

00:26:05,559 --> 00:26:10,179
and that and that basically will return

00:26:08,020 --> 00:26:11,740
null for every call of the method right

00:26:10,179 --> 00:26:13,419
so if you've got a dependency on

00:26:11,740 --> 00:26:15,320
something and for your particular test

00:26:13,419 --> 00:26:17,870
case you don't need that dependency

00:26:15,320 --> 00:26:19,820
to do anything special you can create a

00:26:17,870 --> 00:26:22,900
dummy and just pass that in and it'll be

00:26:19,820 --> 00:26:25,070
satisfied the next ones are stub and

00:26:22,900 --> 00:26:27,290
stubs are a little bit special because

00:26:25,070 --> 00:26:29,180
as the person writing the test you're

00:26:27,290 --> 00:26:32,780
programming in the behavior of your

00:26:29,180 --> 00:26:35,330
dependency so here I am stubbing the

00:26:32,780 --> 00:26:38,450
mail manager and whenever the mail

00:26:35,330 --> 00:26:40,040
method is called I will return true and

00:26:38,450 --> 00:26:42,050
that's a version of the mail manager

00:26:40,040 --> 00:26:45,560
that my tests can now use and will

00:26:42,050 --> 00:26:48,710
behave in that very specific fashion and

00:26:45,560 --> 00:26:50,660
the last one is marks and marks go one

00:26:48,710 --> 00:26:53,180
level beyond that they don't just create

00:26:50,660 --> 00:26:55,070
behaviors but they actually assert that

00:26:53,180 --> 00:26:57,800
that dependency will be used in a

00:26:55,070 --> 00:27:00,110
particular way so in this case this is a

00:26:57,800 --> 00:27:02,000
mock and it's saying if at some point

00:27:00,110 --> 00:27:04,970
during the test the mail method isn't

00:27:02,000 --> 00:27:07,340
exactly called with with the arguments

00:27:04,970 --> 00:27:10,190
test mail and fluid example then the

00:27:07,340 --> 00:27:13,850
test will fail so that's really

00:27:10,190 --> 00:27:16,070
essential anytime you have a particular

00:27:13,850 --> 00:27:17,750
thing in your application that has to

00:27:16,070 --> 00:27:19,700
utilize one of these dependencies in a

00:27:17,750 --> 00:27:22,490
really specific fashion otherwise you

00:27:19,700 --> 00:27:24,800
consider it a test fail and the

00:27:22,490 --> 00:27:27,230
framework doing all of this is prophecy

00:27:24,800 --> 00:27:29,060
there's a few different frameworks in

00:27:27,230 --> 00:27:31,640
phpunit which are designed to actually

00:27:29,060 --> 00:27:34,730
assist with mocking but this is kind of

00:27:31,640 --> 00:27:36,920
I guess emerged as the go-to standard

00:27:34,730 --> 00:27:39,440
because it is just quite a nice

00:27:36,920 --> 00:27:42,170
representation of how methods would be

00:27:39,440 --> 00:27:44,810
called when you're creating your test

00:27:42,170 --> 00:27:46,550
doubles you literally just call methods

00:27:44,810 --> 00:27:52,280
on them as if you were the particular

00:27:46,550 --> 00:27:54,050
unit in your application so unit tests

00:27:52,280 --> 00:27:57,200
can also indicate code smells in your

00:27:54,050 --> 00:27:59,780
application the first one again is if

00:27:57,200 --> 00:28:01,100
you have hundreds of test doubles that

00:27:59,780 --> 00:28:04,250
could be a sign that your particular

00:28:01,100 --> 00:28:05,960
class is way too complex maybe you can

00:28:04,250 --> 00:28:07,520
split it up into a few different units

00:28:05,960 --> 00:28:08,990
maybe they can all have different

00:28:07,520 --> 00:28:13,130
responsibilities where they don't need

00:28:08,990 --> 00:28:14,540
these large amount of dependencies the

00:28:13,130 --> 00:28:16,130
other trap you can fall into is actually

00:28:14,540 --> 00:28:18,050
testing the implementation of something

00:28:16,130 --> 00:28:19,790
so again when you're writing a test you

00:28:18,050 --> 00:28:23,450
want the freedom to be able to refactor

00:28:19,790 --> 00:28:25,490
the code that's underneath it so if you

00:28:23,450 --> 00:28:26,870
pre program in a bunch of really

00:28:25,490 --> 00:28:28,970
specific requirements

00:28:26,870 --> 00:28:30,710
you're into your dependencies you run

00:28:28,970 --> 00:28:32,480
the risk of kind of like testing how

00:28:30,710 --> 00:28:33,980
you're arriving at some outcome instead

00:28:32,480 --> 00:28:35,050
of actually just testing the outcome

00:28:33,980 --> 00:28:36,890
itself

00:28:35,050 --> 00:28:39,680
the other thing you can do is actually

00:28:36,890 --> 00:28:41,480
stub out the thing you're testing so if

00:28:39,680 --> 00:28:43,070
there's a particular method on the class

00:28:41,480 --> 00:28:45,110
that you're testing that you want to

00:28:43,070 --> 00:28:47,210
behave in a very specific fashion you

00:28:45,110 --> 00:28:50,960
can stub that but again that's a cone

00:28:47,210 --> 00:28:52,730
smell because really you shouldn't find

00:28:50,960 --> 00:28:54,620
it too difficult to set up the state of

00:28:52,730 --> 00:28:57,590
your units in a way that are actually

00:28:54,620 --> 00:28:59,420
gonna behave in that fashion anyway

00:28:57,590 --> 00:29:03,429
could be a sign again that your

00:28:59,420 --> 00:29:05,990
particular class is way too complex so

00:29:03,429 --> 00:29:07,760
I'm going to go over some tools and

00:29:05,990 --> 00:29:09,650
runners and once you've written these

00:29:07,760 --> 00:29:10,730
glory's test Suites are you gonna you're

00:29:09,650 --> 00:29:12,740
going to want to run them in some way

00:29:10,730 --> 00:29:14,750
and really the only one I'm going to

00:29:12,740 --> 00:29:16,809
talk about is phpstorm because it's

00:29:14,750 --> 00:29:19,550
absolutely essential you get this set up

00:29:16,809 --> 00:29:21,740
being able to sort of write a test and

00:29:19,550 --> 00:29:23,420
write code in your application and just

00:29:21,740 --> 00:29:26,240
right-click on it and run it is so

00:29:23,420 --> 00:29:27,800
invaluable means you don't have to do

00:29:26,240 --> 00:29:29,679
all this crazy context switching between

00:29:27,800 --> 00:29:31,880
command lines and graphical runners

00:29:29,679 --> 00:29:35,809
integrating that directly into your IDE

00:29:31,880 --> 00:29:37,910
is just a really good thing to do so

00:29:35,809 --> 00:29:40,010
there are some Docs you do need to do

00:29:37,910 --> 00:29:44,780
some setup to do this but once it's set

00:29:40,010 --> 00:29:46,910
up it usually works with all of these

00:29:44,780 --> 00:29:49,670
kind of test classes though there are

00:29:46,910 --> 00:29:51,200
some limitations and that is when you're

00:29:49,670 --> 00:29:53,870
writing JavaScript we obviously have

00:29:51,200 --> 00:29:55,250
JavaScript test base which is executing

00:29:53,870 --> 00:29:57,260
that JavaScript allowing us to write

00:29:55,250 --> 00:29:59,809
assertions about it but we don't

00:29:57,260 --> 00:30:02,480
currently have any JavaScript to unit

00:29:59,809 --> 00:30:06,679
testing framework in core so that's

00:30:02,480 --> 00:30:08,690
being discussed in an issue but in the

00:30:06,679 --> 00:30:10,460
meantime we're sort of left to kind of

00:30:08,690 --> 00:30:12,200
decide and integrate JavaScript unit

00:30:10,460 --> 00:30:15,230
testing as we see appropriate in our

00:30:12,200 --> 00:30:16,700
applications and one possible solution

00:30:15,230 --> 00:30:19,910
that I've been sort of looking at

00:30:16,700 --> 00:30:21,950
playing with is gest and just as a

00:30:19,910 --> 00:30:23,630
framework out of Facebook it's used a

00:30:21,950 --> 00:30:25,400
lot with testing react applications

00:30:23,630 --> 00:30:28,370
which we've done a little bit of a

00:30:25,400 --> 00:30:31,820
previous next but you can also use just

00:30:28,370 --> 00:30:35,360
to test completely vanilla Drupal kind

00:30:31,820 --> 00:30:36,800
of modules and integrations and to do

00:30:35,360 --> 00:30:38,450
that there is some setup though you need

00:30:36,800 --> 00:30:39,510
to follow these steps so first of all

00:30:38,450 --> 00:30:41,520
you actually need to draw

00:30:39,510 --> 00:30:43,800
and reason your JavaScript code right so

00:30:41,520 --> 00:30:45,450
you need to actually recognize that

00:30:43,800 --> 00:30:47,460
something could be this individually

00:30:45,450 --> 00:30:49,620
testable unit you need to split that out

00:30:47,460 --> 00:30:51,630
into a JavaScript module then you can

00:30:49,620 --> 00:30:52,950
test those units in isolation and then

00:30:51,630 --> 00:30:55,260
you need to integrate them back into

00:30:52,950 --> 00:30:57,360
your Drupal code web pack is a tool

00:30:55,260 --> 00:30:58,800
which allows you to do that I realized

00:30:57,360 --> 00:31:02,850
that sounds really complicated but it's

00:30:58,800 --> 00:31:06,330
not I've got an example and here it is

00:31:02,850 --> 00:31:08,790
so this is a JavaScript unit test from a

00:31:06,330 --> 00:31:11,520
Drupal 7 contributor projects called

00:31:08,790 --> 00:31:13,290
webform date restrictions and the idea

00:31:11,520 --> 00:31:15,810
is in the administration if you're

00:31:13,290 --> 00:31:19,110
creating a date component you can say I

00:31:15,810 --> 00:31:20,880
don't want the user to be able to select

00:31:19,110 --> 00:31:24,230
the date on Thursday or some particular

00:31:20,880 --> 00:31:26,550
set of dates and it's a it's a bit of a

00:31:24,230 --> 00:31:29,130
complicated JavaScript module does some

00:31:26,550 --> 00:31:30,720
funky things with dates so this is the

00:31:29,130 --> 00:31:32,640
thing that we've split out into its own

00:31:30,720 --> 00:31:36,630
particular unit at the bottom we're

00:31:32,640 --> 00:31:38,760
exporting that function for consumption

00:31:36,630 --> 00:31:41,040
by application but on the right hand

00:31:38,760 --> 00:31:43,500
side we've actually got the test for

00:31:41,040 --> 00:31:45,330
this particular unit so we're creating

00:31:43,500 --> 00:31:46,800
an instance of it we're passing it a

00:31:45,330 --> 00:31:49,350
bunch of dates and then we're saying the

00:31:46,800 --> 00:31:50,970
return value from this from this method

00:31:49,350 --> 00:31:55,800
is going to be true false true true

00:31:50,970 --> 00:31:57,690
false depending on the scenario and now

00:31:55,800 --> 00:31:59,610
that we have a tested unit in our

00:31:57,690 --> 00:32:03,090
JavaScript application we can integrate

00:31:59,610 --> 00:32:05,730
this into Drupal through any kind of way

00:32:03,090 --> 00:32:07,410
you like and this in this instance we're

00:32:05,730 --> 00:32:10,290
using a Drupal behavior which I'm sure a

00:32:07,410 --> 00:32:15,410
lot of you are familiar with and Here I

00:32:10,290 --> 00:32:19,500
am creating my date restrictions module

00:32:15,410 --> 00:32:20,550
I'm using it in my application and on

00:32:19,500 --> 00:32:21,930
the right hand side this is the outcome

00:32:20,550 --> 00:32:24,780
right so some of those dates are grayed

00:32:21,930 --> 00:32:27,690
out but now when I'm thinking about the

00:32:24,780 --> 00:32:29,670
testing of this module as a whole I no

00:32:27,690 --> 00:32:31,020
longer have to think about a UI test

00:32:29,670 --> 00:32:32,850
which is actually going to run these

00:32:31,020 --> 00:32:34,140
different scenarios which is testing

00:32:32,850 --> 00:32:36,450
different days of the week's or

00:32:34,140 --> 00:32:38,070
different days because that's kind of

00:32:36,450 --> 00:32:40,500
been delegated to the JavaScript unit

00:32:38,070 --> 00:32:45,000
test so I'm sort of filling that gap of

00:32:40,500 --> 00:32:46,320
Jas unit testing one of the other great

00:32:45,000 --> 00:32:48,600
features of just is

00:32:46,320 --> 00:32:50,730
snapshot testing and this is all about

00:32:48,600 --> 00:32:53,580
not hard coding any kind of assumptions

00:32:50,730 --> 00:32:55,860
into your test class

00:32:53,580 --> 00:32:58,490
so here is an example of another test

00:32:55,860 --> 00:33:01,080
which is testing this module which

00:32:58,490 --> 00:33:03,779
generates a big complicated link based

00:33:01,080 --> 00:33:05,669
on some other parameters and it's right

00:33:03,779 --> 00:33:08,100
at the bottom here I've just called to

00:33:05,669 --> 00:33:10,679
match snapshot and what that essentially

00:33:08,100 --> 00:33:13,919
means is every time I run that test it's

00:33:10,679 --> 00:33:16,470
going to assert that the thing that that

00:33:13,919 --> 00:33:18,869
method returns just matches the last

00:33:16,470 --> 00:33:21,570
time the test ran right so I'm going to

00:33:18,869 --> 00:33:23,549
introduce a change here and even though

00:33:21,570 --> 00:33:24,659
there's no URL in my test case it's

00:33:23,549 --> 00:33:28,110
going to blow up and say something

00:33:24,659 --> 00:33:29,340
changed and the advantage of this as

00:33:28,110 --> 00:33:31,980
well is it's really low maintenance

00:33:29,340 --> 00:33:34,110
because if I as a develop and now kind

00:33:31,980 --> 00:33:36,869
of acknowledge that this is the correct

00:33:34,110 --> 00:33:39,029
scenario for that particular test case I

00:33:36,869 --> 00:33:40,649
can just pass this - to you flag to it

00:33:39,029 --> 00:33:42,659
and it's going to go update all of my

00:33:40,649 --> 00:33:44,909
project snapshots to match the the new

00:33:42,659 --> 00:33:50,639
behavior so that's a really good

00:33:44,909 --> 00:33:52,139
capability of just I so again if you

00:33:50,639 --> 00:33:54,869
want to get involved with the JavaScript

00:33:52,139 --> 00:33:57,779
unit testing discussion you can see this

00:33:54,869 --> 00:34:05,070
core issue we're discussing which ones -

00:33:57,779 --> 00:34:06,419
to integrate and to leverage great so

00:34:05,070 --> 00:34:07,409
again bringing it all together once

00:34:06,419 --> 00:34:09,720
you've got a test rate for an

00:34:07,409 --> 00:34:12,270
application or a Drupal website in this

00:34:09,720 --> 00:34:14,549
instance continuous integration is

00:34:12,270 --> 00:34:16,859
really the process of running these

00:34:14,549 --> 00:34:18,629
things in regular intervals right so

00:34:16,859 --> 00:34:20,159
there's no good writing them all and not

00:34:18,629 --> 00:34:22,889
actually getting visibility on when

00:34:20,159 --> 00:34:24,119
they're passing or failing so continuous

00:34:22,889 --> 00:34:25,559
integration is really really that

00:34:24,119 --> 00:34:27,480
process so if you're using a pull

00:34:25,559 --> 00:34:28,559
request workflow it might run your test

00:34:27,480 --> 00:34:31,049
suite every time you submit a pull

00:34:28,559 --> 00:34:32,369
request other workflows it might run

00:34:31,049 --> 00:34:33,290
them every time you merge into a branch

00:34:32,369 --> 00:34:35,819
or something like that

00:34:33,290 --> 00:34:37,649
if you don't have a lot of time to

00:34:35,819 --> 00:34:40,559
invest in continuous integration

00:34:37,649 --> 00:34:42,299
infrastructure there's these platforms

00:34:40,559 --> 00:34:44,609
like git lab and circle CI which I've

00:34:42,299 --> 00:34:46,889
great free tiers really easy to set up

00:34:44,609 --> 00:34:52,130
to to run all of these different types

00:34:46,889 --> 00:34:56,800
of tests great so that's it thanks guys

00:34:52,130 --> 00:34:57,510
[Applause]

00:34:56,800 --> 00:35:01,290
[Music]

00:34:57,510 --> 00:35:03,819
[Applause]

00:35:01,290 --> 00:35:12,119
so any questions that'd be cool

00:35:03,819 --> 00:35:12,119
otherwise oh good right Mike awesome

00:35:13,680 --> 00:35:21,400
so when discussing code smells you

00:35:17,109 --> 00:35:23,980
mentioned that when prophesizing the

00:35:21,400 --> 00:35:26,589
things you need that might indicate that

00:35:23,980 --> 00:35:28,510
you're asking for too much that the

00:35:26,589 --> 00:35:33,069
class you're testing or unit testing in

00:35:28,510 --> 00:35:35,170
that case isn't well written is probably

00:35:33,069 --> 00:35:37,990
too complex doing to too many things at

00:35:35,170 --> 00:35:39,520
once the problem is I've encountered in

00:35:37,990 --> 00:35:41,380
group of eight that whenever you're

00:35:39,520 --> 00:35:44,020
working with entities as soon as you

00:35:41,380 --> 00:35:47,290
need to entity manager that smells

00:35:44,020 --> 00:35:49,510
enormously like it's a big dependency in

00:35:47,290 --> 00:35:51,040
the test right the whole because it's

00:35:49,510 --> 00:35:53,290
got like you know the storage handler to

00:35:51,040 --> 00:35:56,040
load the entities and so for something

00:35:53,290 --> 00:35:59,049
very simple like we're encouraged to

00:35:56,040 --> 00:36:01,089
properly inject our dependencies and the

00:35:59,049 --> 00:36:03,910
entity type manager is one of those yep

00:36:01,089 --> 00:36:05,859
but injecting the entire entity type

00:36:03,910 --> 00:36:08,200
manager does mean that your tests will

00:36:05,859 --> 00:36:10,210
suddenly blow up like they will become

00:36:08,200 --> 00:36:13,030
huge because you need to prophesize all

00:36:10,210 --> 00:36:14,980
the things yeah I mean it depends what

00:36:13,030 --> 00:36:17,740
you're using on that I think in my

00:36:14,980 --> 00:36:19,569
example we were only calling get storage

00:36:17,740 --> 00:36:23,549
right so we could we could stop out

00:36:19,569 --> 00:36:25,900
every other method and essentially just

00:36:23,549 --> 00:36:27,579
say that that particular gets storage

00:36:25,900 --> 00:36:29,589
method is going to return the entity

00:36:27,579 --> 00:36:31,780
storage it's being marked yeah and this

00:36:29,589 --> 00:36:33,910
is this is perhaps the problem I'm

00:36:31,780 --> 00:36:36,520
having with Drupal when it comes to that

00:36:33,910 --> 00:36:39,329
is that in order to get the storage we

00:36:36,520 --> 00:36:41,980
need to inject the entity type right

00:36:39,329 --> 00:36:43,540
it's definitely encouraged right there's

00:36:41,980 --> 00:36:45,700
there's other ways of kind of like using

00:36:43,540 --> 00:36:47,440
factories and and crazy things in the

00:36:45,700 --> 00:36:49,420
service container to like just pull

00:36:47,440 --> 00:36:51,869
specific parts out of different services

00:36:49,420 --> 00:36:56,500
to inject them but it's it's kind of

00:36:51,869 --> 00:36:57,849
just hard enough that no one really no

00:36:56,500 --> 00:36:59,619
one really does it and that that's

00:36:57,849 --> 00:37:01,450
definitely like a unique problem to like

00:36:59,619 --> 00:37:03,460
writing services right and unit testing

00:37:01,450 --> 00:37:05,200
services because you inject all other

00:37:03,460 --> 00:37:07,599
services right you don't inject like

00:37:05,200 --> 00:37:09,980
method calls off the other like back of

00:37:07,599 --> 00:37:12,330
other services but that isn't

00:37:09,980 --> 00:37:13,500
necessarily true for like all classes

00:37:12,330 --> 00:37:15,930
you might have in the application right

00:37:13,500 --> 00:37:18,750
Motors I'd like vanilla PHP classes that

00:37:15,930 --> 00:37:20,400
don't really need to like see all those

00:37:18,750 --> 00:37:22,010
same constraints of like having their

00:37:20,400 --> 00:37:24,810
dependencies injected with the service

00:37:22,010 --> 00:37:27,720
container right it could be created with

00:37:24,810 --> 00:37:29,970
some other factory so it's a code smell

00:37:27,720 --> 00:37:32,310
we just have to live with in this case

00:37:29,970 --> 00:37:33,890
yeah it's it definitely is but I mean in

00:37:32,310 --> 00:37:36,840
this example I would say that's

00:37:33,890 --> 00:37:39,180
completely reasonable but if we had like

00:37:36,840 --> 00:37:41,370
eight other services that all needed

00:37:39,180 --> 00:37:43,380
some crazy other preconditions to make

00:37:41,370 --> 00:37:45,600
this round of work then that's the kind

00:37:43,380 --> 00:37:48,210
of touch point to say that this thing

00:37:45,600 --> 00:37:49,890
knows about too much right so you're

00:37:48,210 --> 00:37:51,840
right it's not perfect and that's a huge

00:37:49,890 --> 00:37:54,030
dependency but it's it's something you

00:37:51,840 --> 00:37:55,740
kind of have to deal with a lot in there

00:37:54,030 --> 00:37:57,630
the reality of your plate for sure

00:37:55,740 --> 00:37:59,820
cool I was just curious whether you had

00:37:57,630 --> 00:38:01,230
a solution or something yeah there are a

00:37:59,820 --> 00:38:04,200
few different techniques but again

00:38:01,230 --> 00:38:06,180
they're so non-standard that you you

00:38:04,200 --> 00:38:13,080
wouldn't really encounter them all right

00:38:06,180 --> 00:38:16,040
Cheers difficulty right okay anyone else

00:38:13,080 --> 00:38:16,040
don't be shy Oh

00:38:19,210 --> 00:38:25,780
you mentioned some examples of bad tests

00:38:22,060 --> 00:38:28,380
in Drupal core all right yeah I don't

00:38:25,780 --> 00:38:31,960
know if I have any bad ones in here

00:38:28,380 --> 00:38:34,980
specifically but I could I could dig

00:38:31,960 --> 00:38:37,330
some out for you and show I've got

00:38:34,980 --> 00:38:40,120
hundreds of examples of terrible testing

00:38:37,330 --> 00:38:43,240
country which I've written so I can

00:38:40,120 --> 00:38:48,010
point you towards those okay thank you

00:38:43,240 --> 00:38:51,640
yeah great okay thank you everyone I

00:38:48,010 --> 00:38:54,390
think maybe we finished a bit early but

00:38:51,640 --> 00:39:02,150
that's okay right

00:38:54,390 --> 00:39:02,150
[Applause]

00:39:12,300 --> 00:39:15,770
let me let me come down there

00:39:23,430 --> 00:39:30,209

YouTube URL: https://www.youtube.com/watch?v=MquqAplUXFY


