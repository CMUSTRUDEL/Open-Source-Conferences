Title: DrupalCon Vienna 2017: Using JSON Web Tokens & Varnish to cache content for logged-in users
Publication date: 2017-09-26
Playlist: DrupalCon Vienna - Sept 2017
Description: 
	Varnish caching in Drupal isn't considered an unsolved problem any more: there are a couple of really good Varnish configuration files out there and Drupal modules to invalidate the cache. But once we start working with logged-in users, all bets are off. In this presentation, I'll show you how JSON Web Tokens are an alternative way to store session state. The difference is that the session state is securely stored at the client-side and that Varnish can validate the session and access session data. By shifting the decision making process to Varnish, cache variations can be made for logged-in and anonymous content, without having to access the backend. JWT and the appropriate Varnish measures will help you to get the most out of your cache.
Captions: 
	00:00:00,060 --> 00:00:03,780
we're about to start in

00:00:01,079 --> 00:00:05,279
minute-and-a-half I would like to

00:00:03,780 --> 00:00:07,950
welcome you thank you for being here

00:00:05,279 --> 00:00:09,690
this is my very first triple cone as a

00:00:07,950 --> 00:00:11,849
speaker it's my four thousand attendee

00:00:09,690 --> 00:00:13,380
I've done a lot of presentation in the

00:00:11,849 --> 00:00:16,279
past I keep track of every single one of

00:00:13,380 --> 00:00:18,570
them this is presentation 172 for me

00:00:16,279 --> 00:00:21,810
but-but-but-but don't get it too excited

00:00:18,570 --> 00:00:24,630
my first group will come so it took me

00:00:21,810 --> 00:00:25,890
some time and Lobby work to get me in

00:00:24,630 --> 00:00:29,189
here and today I'm gonna talk about

00:00:25,890 --> 00:00:31,650
using JSON web tokens to cash in varnish

00:00:29,189 --> 00:00:33,960
I'm gonna do all the disclaimers now

00:00:31,650 --> 00:00:36,450
because we won't have any time when I

00:00:33,960 --> 00:00:38,700
get started it's only 25 minutes long

00:00:36,450 --> 00:00:41,399
it's gonna be hard for me I babble and I

00:00:38,700 --> 00:00:43,590
ramble and someone's gonna walk in here

00:00:41,399 --> 00:00:45,750
and cut me off whenever it's done but I

00:00:43,590 --> 00:00:47,430
want to tell you that this is not the

00:00:45,750 --> 00:00:49,050
best solution out there and a lot of

00:00:47,430 --> 00:00:51,539
people are people object to what I have

00:00:49,050 --> 00:00:53,760
to say but under the circumstances that

00:00:51,539 --> 00:00:56,250
I was put it was a lifesaver

00:00:53,760 --> 00:00:59,430
yeah and I want to by show of hands who

00:00:56,250 --> 00:01:00,960
has heard of varnish before all right

00:00:59,430 --> 00:01:04,500
but who hasn't because that's even more

00:01:00,960 --> 00:01:06,840
important all right oh don't worry I

00:01:04,500 --> 00:01:08,909
have a slide dedicated to you and just

00:01:06,840 --> 00:01:12,900
you and when we reach that slide I will

00:01:08,909 --> 00:01:15,060
look at you okay all right all right so

00:01:12,900 --> 00:01:17,250
it was marked as a beginner talk but

00:01:15,060 --> 00:01:19,020
then I contacted the people from

00:01:17,250 --> 00:01:21,119
DrupalCon and asked to make it or to

00:01:19,020 --> 00:01:22,170
turn it into an intermediary talk but

00:01:21,119 --> 00:01:23,939
they haven't changed it on the website

00:01:22,170 --> 00:01:26,310
so people thinking that this is a

00:01:23,939 --> 00:01:28,710
beginner talk about varnish I don't have

00:01:26,310 --> 00:01:32,400
the time to talk about varnish per se

00:01:28,710 --> 00:01:34,619
but you know what I'm gonna cut a deal

00:01:32,400 --> 00:01:35,850
with you I'm the author of getting

00:01:34,619 --> 00:01:37,650
started with varnish cache it's an

00:01:35,850 --> 00:01:40,290
O'Reilly book that was endorsed by

00:01:37,650 --> 00:01:42,119
varnish software and it's a one-on-one

00:01:40,290 --> 00:01:44,369
book that builds up from zero to

00:01:42,119 --> 00:01:47,310
wherever you need to get I don't have

00:01:44,369 --> 00:01:48,450
the copy on me but I'll raffle a copy if

00:01:47,310 --> 00:01:50,909
you follow me on Twitter I'll give you

00:01:48,450 --> 00:01:52,680
the credentials and just tweet me I will

00:01:50,909 --> 00:01:55,380
choose a random winner and I'll ship you

00:01:52,680 --> 00:01:56,000
a copy of my book all right sounds like

00:01:55,380 --> 00:01:59,930
a plan

00:01:56,000 --> 00:01:59,930
all right let's get going

00:02:05,070 --> 00:02:12,100
yes the problem is I don't have a lapel

00:02:09,520 --> 00:02:15,940
mic so there's no not much walking

00:02:12,100 --> 00:02:17,260
around here so let's I know you can hear

00:02:15,940 --> 00:02:20,800
me alright but it's just a matter of

00:02:17,260 --> 00:02:23,590
getting to recording alright before we

00:02:20,800 --> 00:02:25,450
start there's a set of truths that need

00:02:23,590 --> 00:02:32,410
to be established should I close these

00:02:25,450 --> 00:02:33,130
doors yeah let's close the doors thank

00:02:32,410 --> 00:02:35,890
you very much

00:02:33,130 --> 00:02:37,600
so there's some facts that need to be

00:02:35,890 --> 00:02:39,100
established and I'm gonna need your help

00:02:37,600 --> 00:02:42,250
to make it happen

00:02:39,100 --> 00:02:45,520
you can choose to raise your hands shout

00:02:42,250 --> 00:02:52,440
not look down at your phone doesn't

00:02:45,520 --> 00:02:55,840
really matter let's do it slow websites

00:02:52,440 --> 00:02:58,360
suck yes all right

00:02:55,840 --> 00:03:00,300
web performance is an essential part of

00:02:58,360 --> 00:03:02,590
the user experience

00:03:00,300 --> 00:03:04,000
slow websites are just as bad as

00:03:02,590 --> 00:03:05,920
websites that are down because in the

00:03:04,000 --> 00:03:07,720
saturated market we live in if your

00:03:05,920 --> 00:03:09,580
website is slow or down people just go

00:03:07,720 --> 00:03:13,480
elsewhere to buy the product and then

00:03:09,580 --> 00:03:17,590
you're screwed yeah yeah somewhat Drupal

00:03:13,480 --> 00:03:20,470
school yes the underlying technology PHP

00:03:17,590 --> 00:03:22,120
is cool I'm a PHP guy at heart I've met

00:03:20,470 --> 00:03:23,940
people here throughout the PHP scene and

00:03:22,120 --> 00:03:27,160
I like it but there's some trade-offs

00:03:23,940 --> 00:03:29,080
when you put heavy load on it it tends

00:03:27,160 --> 00:03:31,300
to crumble it's not the fastest language

00:03:29,080 --> 00:03:34,000
out there but it is damn flexible and

00:03:31,300 --> 00:03:34,239
it's it's the fastest way to get stuff

00:03:34,000 --> 00:03:37,090
done

00:03:34,239 --> 00:03:39,250
is true PHP now to solve these issues

00:03:37,090 --> 00:03:41,470
you can add throw money at the problem

00:03:39,250 --> 00:03:44,380
and add servers at the problem and

00:03:41,470 --> 00:03:46,239
agreed your infrastructure should scale

00:03:44,380 --> 00:03:46,660
along as you grow that's a fact that's a

00:03:46,239 --> 00:03:48,610
given

00:03:46,660 --> 00:03:50,910
but just throwing servers at the problem

00:03:48,610 --> 00:03:54,850
is not really the idea so we end up

00:03:50,910 --> 00:03:57,280
caching to reduce the impact of a server

00:03:54,850 --> 00:04:00,340
or of an application on the server still

00:03:57,280 --> 00:04:04,180
agree still with me okay so why would

00:04:00,340 --> 00:04:06,280
you recompute every single time if the

00:04:04,180 --> 00:04:08,740
source data hasn't changed incoming

00:04:06,280 --> 00:04:10,930
requests to Apache or nginx send it to

00:04:08,740 --> 00:04:13,110
the PHP runtime PHP has to boot up some

00:04:10,930 --> 00:04:15,000
modules then Drupal gets initialized

00:04:13,110 --> 00:04:16,739
then you have to connect your MySQL see

00:04:15,000 --> 00:04:18,329
the picture see where I'm heading every

00:04:16,739 --> 00:04:20,040
single time and the data hasn't changed

00:04:18,329 --> 00:04:23,040
a lot of people think that caching is

00:04:20,040 --> 00:04:24,510
just a way to cover up for poor

00:04:23,040 --> 00:04:26,790
architecture design and then they'll

00:04:24,510 --> 00:04:28,680
 on PHP and Drupal for not being as

00:04:26,790 --> 00:04:31,290
fast at other languages but I don't

00:04:28,680 --> 00:04:33,570
agree because caching is an essential

00:04:31,290 --> 00:04:38,580
part of your architecture under normal

00:04:33,570 --> 00:04:38,970
circumstances and this one is for you no

00:04:38,580 --> 00:04:40,380
pressure

00:04:38,970 --> 00:04:42,840
this is the way you'll communicate

00:04:40,380 --> 00:04:44,400
you'll directly interact with the PHP

00:04:42,840 --> 00:04:46,740
runtime that hosts your Drupal

00:04:44,400 --> 00:04:48,810
application in some way shape or form

00:04:46,740 --> 00:04:50,490
there might be multiple servers there

00:04:48,810 --> 00:04:53,340
might be load balancers ahead there

00:04:50,490 --> 00:04:55,080
might be back-end servers there might be

00:04:53,340 --> 00:04:57,180
separate MySQL servers but you're

00:04:55,080 --> 00:05:00,330
directly interacting with the runtime

00:04:57,180 --> 00:05:02,640
now by adding a touch of varnish you

00:05:00,330 --> 00:05:04,650
have an intermediary system that sits

00:05:02,640 --> 00:05:08,130
right in front of your server and where

00:05:04,650 --> 00:05:10,080
both the user or the back-end server

00:05:08,130 --> 00:05:12,360
have no real clue that there is an

00:05:10,080 --> 00:05:13,890
intermediary system the client thinks he

00:05:12,360 --> 00:05:15,720
or she is talking to the backend and the

00:05:13,890 --> 00:05:17,490
backend thinks that he's receiving

00:05:15,720 --> 00:05:19,740
requests from a client where in fact

00:05:17,490 --> 00:05:23,130
it's just an intermediary and it stores

00:05:19,740 --> 00:05:25,590
computed results and just feeds them to

00:05:23,130 --> 00:05:27,060
the end user upon subsequent requests

00:05:25,590 --> 00:05:29,250
still with me because that's an

00:05:27,060 --> 00:05:30,540
important concept to grasp but majority

00:05:29,250 --> 00:05:32,550
of the people raise their hands when

00:05:30,540 --> 00:05:36,660
they heard about varnish now in case

00:05:32,550 --> 00:05:39,450
you're still in doubt in case you are

00:05:36,660 --> 00:05:41,850
not look in case you are still in doubt

00:05:39,450 --> 00:05:44,040
here's a slide I often use oops here's a

00:05:41,850 --> 00:05:45,990
slide I often used ever seen you've seen

00:05:44,040 --> 00:05:47,790
by show of hands the 90s blockbuster

00:05:45,990 --> 00:05:51,960
bodyguard which Kevin Costner Whitney

00:05:47,790 --> 00:05:56,610
Houston yes thank you Kevin varnish

00:05:51,960 --> 00:05:58,229
Whitney Drupal right when in doubt think

00:05:56,610 --> 00:05:59,940
of Kevin Whitney that being said hi

00:05:58,229 --> 00:06:01,830
welcome everyone my name is Stace I'm

00:05:59,940 --> 00:06:04,080
tastefully on Twitter please follow me

00:06:01,830 --> 00:06:06,300
there I'm doing this experiment I hope

00:06:04,080 --> 00:06:08,580
every time I speak I add this slide and

00:06:06,300 --> 00:06:10,050
ask people to follow me and I always see

00:06:08,580 --> 00:06:12,030
this slide bump and there's an extra

00:06:10,050 --> 00:06:13,590
incentive link to it there's there's

00:06:12,030 --> 00:06:15,240
gonna be a prize draw afterwards so

00:06:13,590 --> 00:06:16,860
tweet me afterwards if you like it and

00:06:15,240 --> 00:06:18,270
I'll hit you up with something

00:06:16,860 --> 00:06:19,650
professionally I'm a Technical

00:06:18,270 --> 00:06:21,060
Evangelist at the Belgian web hosting

00:06:19,650 --> 00:06:22,800
company called combo you might have

00:06:21,060 --> 00:06:24,990
never heard from us

00:06:22,800 --> 00:06:27,010
we're market leader in the Benelux area

00:06:24,990 --> 00:06:29,020
I also dedicate 50% of my

00:06:27,010 --> 00:06:31,180
to our enterprise brand which is called

00:06:29,020 --> 00:06:32,920
sentía and the author of getting started

00:06:31,180 --> 00:06:34,720
with varnish cache and O'Reilly book

00:06:32,920 --> 00:06:36,640
that is endorsed by the people at

00:06:34,720 --> 00:06:39,100
varnish software and that's a copy I'm

00:06:36,640 --> 00:06:42,250
gonna raffle to someone who tweets me

00:06:39,100 --> 00:06:43,900
today tomorrow or later I will ship it

00:06:42,250 --> 00:06:47,590
to you when I get back to Belgium

00:06:43,900 --> 00:06:50,670
so yeah let's let's meet by the way

00:06:47,590 --> 00:06:53,050
let's dive right in the story starts

00:06:50,670 --> 00:06:55,720
when I got contacted I work at a hosting

00:06:53,050 --> 00:06:57,430
company by a big Belgium TV channel TV

00:06:55,720 --> 00:06:59,530
station and they had a website to hosts

00:06:57,430 --> 00:07:01,270
and we were in the running to host their

00:06:59,530 --> 00:07:03,760
new website which was written in Drupal

00:07:01,270 --> 00:07:05,350
8 but they had this request and they

00:07:03,760 --> 00:07:07,540
said can you help us out with our Drupal

00:07:05,350 --> 00:07:09,730
7 website and host it because it's

00:07:07,540 --> 00:07:11,590
causing us lots of pain it's a very

00:07:09,730 --> 00:07:14,170
popular website that hosts some of the

00:07:11,590 --> 00:07:16,060
most popular TV shows in Belgium and

00:07:14,170 --> 00:07:17,860
they have video content on there that

00:07:16,060 --> 00:07:19,480
they published right after the airing of

00:07:17,860 --> 00:07:21,730
the show so as soon as the show is aired

00:07:19,480 --> 00:07:23,830
they upload the video and I looked at

00:07:21,730 --> 00:07:27,070
the stats and then up until it 80,000

00:07:23,830 --> 00:07:28,780
people go to it to get those videos not

00:07:27,070 --> 00:07:31,390
live videos isn't is not really a

00:07:28,780 --> 00:07:33,130
problem it's hosted on a CDN no real

00:07:31,390 --> 00:07:35,500
world lives but the website itself is

00:07:33,130 --> 00:07:37,810
Drupal 7 with varnish and I have to

00:07:35,500 --> 00:07:41,290
admit that the hit rate is pretty great

00:07:37,810 --> 00:07:43,810
nothing wrong there but there's one more

00:07:41,290 --> 00:07:45,610
thing that one little business

00:07:43,810 --> 00:07:47,650
requirement that they had and that was

00:07:45,610 --> 00:07:50,710
hey we're a TV station we have

00:07:47,650 --> 00:07:52,690
commercial goals we want end users

00:07:50,710 --> 00:07:54,940
people who watch full episodes of the

00:07:52,690 --> 00:07:57,000
program not teaser videos or interviews

00:07:54,940 --> 00:08:00,750
full episodes we want them to log in

00:07:57,000 --> 00:08:00,750
using Drupal 7

00:08:02,230 --> 00:08:07,360
I can tell you that the metal of their

00:08:05,200 --> 00:08:10,870
servers at their old hosting provider

00:08:07,360 --> 00:08:13,210
nearly melted right 80,000 people server

00:08:10,870 --> 00:08:15,670
two to three servers maybe four perhaps

00:08:13,210 --> 00:08:16,870
and that's because as soon as you log in

00:08:15,670 --> 00:08:18,880
in Drupal and you know this better than

00:08:16,870 --> 00:08:20,470
I am I'm not a pure group a list I've

00:08:18,880 --> 00:08:22,210
been to my fair share of Drupal cons but

00:08:20,470 --> 00:08:24,400
as soon as you log in this session is

00:08:22,210 --> 00:08:28,510
initiated the session cookie is set and

00:08:24,400 --> 00:08:30,460
the cache is bypassed by design by

00:08:28,510 --> 00:08:31,930
default in varnish varnish will not

00:08:30,460 --> 00:08:33,760
cache cookies as soon as it sees a

00:08:31,930 --> 00:08:35,380
cookie it will just say hey I'm not

00:08:33,760 --> 00:08:37,600
dealing with this I will send you to the

00:08:35,380 --> 00:08:39,520
back end and I will bypass the entire

00:08:37,600 --> 00:08:41,410
cache but even if you take a specialized

00:08:39,520 --> 00:08:43,390
vcl file a varnish configuration file

00:08:41,410 --> 00:08:45,070
for Drupal it will still bypass it

00:08:43,390 --> 00:08:47,230
because it implies that the user is

00:08:45,070 --> 00:08:50,350
logged in and is seeing user specific

00:08:47,230 --> 00:08:52,330
content so that's important there is a

00:08:50,350 --> 00:08:54,190
compromise however and they did that

00:08:52,330 --> 00:08:56,440
whenever those really popular show

00:08:54,190 --> 00:08:58,000
started they disabled to login module to

00:08:56,440 --> 00:08:59,890
prevent the servers from completely

00:08:58,000 --> 00:09:02,980
melting down and torching down the

00:08:59,890 --> 00:09:06,730
datacenter so my idea was what if we

00:09:02,980 --> 00:09:09,310
could create cache variations for

00:09:06,730 --> 00:09:10,690
logging users so you go to your URL and

00:09:09,310 --> 00:09:12,190
if you're logged in you're seeing the

00:09:10,690 --> 00:09:13,510
logged in content in our case the video

00:09:12,190 --> 00:09:15,190
and if you're not logged in you're

00:09:13,510 --> 00:09:17,830
seeing your typical Drupal login screen

00:09:15,190 --> 00:09:20,950
where we force you to login that's the

00:09:17,830 --> 00:09:23,260
idea that's the mission of this talk now

00:09:20,950 --> 00:09:25,570
you know it's better than that than I do

00:09:23,260 --> 00:09:28,540
that the the only information we have is

00:09:25,570 --> 00:09:30,190
that session that ID but all the session

00:09:28,540 --> 00:09:32,500
data is stored in the database so we

00:09:30,190 --> 00:09:34,480
need to find a way to identify a logged

00:09:32,500 --> 00:09:36,730
in user without accessing the backend

00:09:34,480 --> 00:09:38,230
and that last part is the trick we don't

00:09:36,730 --> 00:09:41,590
want to access the backend for anything

00:09:38,230 --> 00:09:43,960
and I guess this is the most important

00:09:41,590 --> 00:09:45,970
slide in my presentation the idea is to

00:09:43,960 --> 00:09:49,000
push session information from the server

00:09:45,970 --> 00:09:51,010
to the client and we'll use JSON web

00:09:49,000 --> 00:09:52,690
tokens for that and I got introduced a

00:09:51,010 --> 00:09:54,220
JSON web tokens in January by this guy

00:09:52,690 --> 00:09:56,740
really clever guy Marco pavetta

00:09:54,220 --> 00:09:58,180
he works a trove he's very much involved

00:09:56,740 --> 00:10:00,520
in the symphony scene he's like

00:09:58,180 --> 00:10:01,810
figurehead there and he talked to me at

00:10:00,520 --> 00:10:03,730
the conference I organized I organized a

00:10:01,810 --> 00:10:05,920
PHP conference in Belgium he said days

00:10:03,730 --> 00:10:07,210
you need JSON web tokens and I listened

00:10:05,920 --> 00:10:09,700
to the man because he's a genius

00:10:07,210 --> 00:10:11,470
and he showed me what JSON web tokens

00:10:09,700 --> 00:10:13,060
look like and this is an example of a

00:10:11,470 --> 00:10:16,120
JSON web token it looks like one big

00:10:13,060 --> 00:10:17,740
blob of do but in fact it's

00:10:16,120 --> 00:10:20,110
nicely composed out of three distinctive

00:10:17,740 --> 00:10:22,390
part color-coded in this case separated

00:10:20,110 --> 00:10:25,990
by a dot and all these bits and pieces

00:10:22,390 --> 00:10:27,550
are just base64 encoded JSON the first

00:10:25,990 --> 00:10:29,860
part is the header second part is the

00:10:27,550 --> 00:10:32,020
actual payload the pink purplish part is

00:10:29,860 --> 00:10:34,660
the payload and then the blue part is a

00:10:32,020 --> 00:10:37,839
signature there is a signature involved

00:10:34,660 --> 00:10:39,580
and it's an H Mac signature with sha-256

00:10:37,839 --> 00:10:41,920
encryption to make sure that the data

00:10:39,580 --> 00:10:44,470
remains untampered with because this is

00:10:41,920 --> 00:10:46,360
so be client-side stuff and we all

00:10:44,470 --> 00:10:48,400
learned throughout history that we can't

00:10:46,360 --> 00:10:49,960
you trust our end users so we need to

00:10:48,400 --> 00:10:52,690
make sure that the payload that is being

00:10:49,960 --> 00:10:54,640
sent has been signed off and this is

00:10:52,690 --> 00:10:57,610
what it looks like this is this is an

00:10:54,640 --> 00:10:59,529
example of a JSON web token the header

00:10:57,610 --> 00:11:02,140
contains an algorithm in our case that's

00:10:59,529 --> 00:11:04,240
HS two five six meaning an H max sitting

00:11:02,140 --> 00:11:07,660
signature using shell two five six

00:11:04,240 --> 00:11:10,779
hashing and that we'll use in the end it

00:11:07,660 --> 00:11:12,880
also contains the type JWT

00:11:10,779 --> 00:11:15,370
then we have the actual payload which

00:11:12,880 --> 00:11:22,240
all has like if you noticed it really

00:11:15,370 --> 00:11:24,490
small names ALG typ s ub exp and then

00:11:22,240 --> 00:11:26,200
all the stuff you want to add the idea

00:11:24,490 --> 00:11:27,910
is to keep it as short as we can because

00:11:26,200 --> 00:11:29,950
all that data has to go across the wire

00:11:27,910 --> 00:11:31,209
the more data you insert the bigger your

00:11:29,950 --> 00:11:33,100
request is going to be and that's not

00:11:31,209 --> 00:11:34,750
really so beneficial so keep it short

00:11:33,100 --> 00:11:37,720
and sweet and in the end we're using

00:11:34,750 --> 00:11:40,089
that hmx signature to basically four URL

00:11:37,720 --> 00:11:42,700
encode our header do the same thing with

00:11:40,089 --> 00:11:44,830
the payloads concatenated with adults do

00:11:42,700 --> 00:11:46,630
an H max signature and add that secret

00:11:44,830 --> 00:11:49,120
key the secret key is known by two

00:11:46,630 --> 00:11:51,459
parties the issuer in our case that will

00:11:49,120 --> 00:11:54,040
be Drupal and the validator in our case

00:11:51,459 --> 00:11:56,110
that will be orange the end user the

00:11:54,040 --> 00:11:58,540
client has no clue what the signatures

00:11:56,110 --> 00:12:01,510
and rightfully so if you want to play

00:11:58,540 --> 00:12:04,750
around just go to JW t-dub i oh and you

00:12:01,510 --> 00:12:08,080
can fiddle about they even have a chrome

00:12:04,750 --> 00:12:10,540
extension where you could paste and a

00:12:08,080 --> 00:12:12,459
JWT and you'll see what comes out and

00:12:10,540 --> 00:12:14,290
you can do it in the inverse way as well

00:12:12,459 --> 00:12:16,750
you can throw in JSON and it will turn

00:12:14,290 --> 00:12:19,930
it into a web token and there's even a

00:12:16,750 --> 00:12:22,839
way to validate the secret key blah blah

00:12:19,930 --> 00:12:25,360
blah is an invalid signature what we'll

00:12:22,839 --> 00:12:27,790
do here in our case is store it in a

00:12:25,360 --> 00:12:28,440
cookie and that's where the objection

00:12:27,790 --> 00:12:30,060
start

00:12:28,440 --> 00:12:31,590
people don't like cookies for that a lot

00:12:30,060 --> 00:12:33,210
of people think that Jason Webb tokens

00:12:31,590 --> 00:12:35,880
have no place in a browser-based

00:12:33,210 --> 00:12:38,550
environment and for people in API land

00:12:35,880 --> 00:12:40,230
they regularly use bearer authentication

00:12:38,550 --> 00:12:42,450
tokens this is not something your

00:12:40,230 --> 00:12:44,990
browser can handle we usually deal with

00:12:42,450 --> 00:12:47,640
basic authentication so this is a way of

00:12:44,990 --> 00:12:50,250
shifting server-side information to the

00:12:47,640 --> 00:12:52,470
client side but there is an additional

00:12:50,250 --> 00:12:54,180
benefit it is a cookie and it's

00:12:52,470 --> 00:12:55,470
accessible by any language that has

00:12:54,180 --> 00:12:58,710
access to the browser including

00:12:55,470 --> 00:13:01,200
JavaScript so what we can do is read

00:12:58,710 --> 00:13:04,620
stateful data without performing Ajax

00:13:01,200 --> 00:13:07,350
calls to the backend it's there you just

00:13:04,620 --> 00:13:10,760
have to do base64 decode read the

00:13:07,350 --> 00:13:14,240
payloads and it's JSON the J's in JSON

00:13:10,760 --> 00:13:17,040
it's pretty identifiable by JavaScript

00:13:14,240 --> 00:13:18,870
there was a custom Drupal module built

00:13:17,040 --> 00:13:20,250
for that that creates the case in web

00:13:18,870 --> 00:13:22,380
token alongside the regular session

00:13:20,250 --> 00:13:24,270
information regular session cookie still

00:13:22,380 --> 00:13:25,980
remains there and there was a hook in

00:13:24,270 --> 00:13:28,290
there that makes sure that the template

00:13:25,980 --> 00:13:30,540
reads off to JSON web token I did not

00:13:28,290 --> 00:13:33,150
write this this guy wrote it Andrea's

00:13:30,540 --> 00:13:35,430
daraya was brought in by our clients to

00:13:33,150 --> 00:13:37,460
replace the old agency and to just fix

00:13:35,430 --> 00:13:39,810
stuff up while they were choosing a new

00:13:37,460 --> 00:13:41,670
web design agency in the new Drupal

00:13:39,810 --> 00:13:43,500
agency for the Drupal 8 site I needed a

00:13:41,670 --> 00:13:45,240
sterling job you can follow him on

00:13:43,500 --> 00:13:47,520
Twitter right there and he open sourced

00:13:45,240 --> 00:13:49,830
his module right here JWT cookie on the

00:13:47,520 --> 00:13:52,140
get lap it's not github this time would

00:13:49,830 --> 00:13:54,690
get lap and there's a sub module in

00:13:52,140 --> 00:13:57,210
there that does some example stuff and

00:13:54,690 --> 00:14:00,900
this is the JSON web token that he's

00:13:57,210 --> 00:14:03,300
introduced to us the issuer ISS is my

00:14:00,900 --> 00:14:06,600
web site I will take this website down

00:14:03,300 --> 00:14:12,530
soon because you might screw with my

00:14:06,600 --> 00:14:12,530
data because it has simple passwords

00:14:13,580 --> 00:14:18,930
this is the issuer that's the host name

00:14:15,810 --> 00:14:22,110
of my website jty is the session ID this

00:14:18,930 --> 00:14:24,750
should match your triple session ID next

00:14:22,110 --> 00:14:26,700
up is IAT issued at just a UNIX

00:14:24,750 --> 00:14:28,980
timestamp specifying when the session

00:14:26,700 --> 00:14:30,780
was started and exp that's something we

00:14:28,980 --> 00:14:32,520
can use to determine whether or not the

00:14:30,780 --> 00:14:35,940
session has expired and we continue on

00:14:32,520 --> 00:14:38,640
UID that's the ID of our Drupal user the

00:14:35,940 --> 00:14:40,200
ID from the database roles which is

00:14:38,640 --> 00:14:41,779
convenient because I don't want to cache

00:14:40,200 --> 00:14:43,910
admin users I want to make sure

00:14:41,779 --> 00:14:45,829
they have all the preview possibilities

00:14:43,910 --> 00:14:48,649
by directly interacting with Drupal not

00:14:45,829 --> 00:14:50,300
having a cache so as soon as I see when

00:14:48,649 --> 00:14:51,860
I see authenticated user I know the user

00:14:50,300 --> 00:14:53,660
is logged in when I see administrator

00:14:51,860 --> 00:14:55,850
I'm gonna bypass the cache and then you

00:14:53,660 --> 00:14:58,160
have some data the last part which will

00:14:55,850 --> 00:15:00,110
be interpreted by JavaScript that's all

00:14:58,160 --> 00:15:03,439
the stuff that andreas dead meanwhile I

00:15:00,110 --> 00:15:06,410
wrote in VCL code and the VCL code uses

00:15:03,439 --> 00:15:08,180
modules q and it uses a v mod and v mod

00:15:06,410 --> 00:15:10,459
is a varnish module something you have

00:15:08,180 --> 00:15:11,839
to install on top of varnish and it's

00:15:10,459 --> 00:15:14,360
called V mob digest and it's responsible

00:15:11,839 --> 00:15:17,569
for all the H max stuff and all the

00:15:14,360 --> 00:15:20,149
base64 stuff and this is where it gets

00:15:17,569 --> 00:15:22,930
tricky we're gonna go from zero to oh my

00:15:20,149 --> 00:15:25,129
god in just a couple of seconds as

00:15:22,930 --> 00:15:28,309
samuel l.jackson would say in Jurassic

00:15:25,129 --> 00:15:31,670
Park hold on it butts let's do this this

00:15:28,309 --> 00:15:34,430
is boilerplate code we have to specify

00:15:31,670 --> 00:15:35,959
that it's v CL 4.0 we'll import some

00:15:34,430 --> 00:15:37,759
modules being the standard module the

00:15:35,959 --> 00:15:40,220
variable module the cookie module and of

00:15:37,759 --> 00:15:42,649
course our digest module now all this

00:15:40,220 --> 00:15:45,170
VCL code when you run or reload varnish

00:15:42,649 --> 00:15:47,959
will compile it not interpret it compile

00:15:45,170 --> 00:15:50,480
it to a shared object c++ that will be

00:15:47,959 --> 00:15:52,399
attached and linked to the varnish

00:15:50,480 --> 00:15:54,559
binary so that this is tremendously

00:15:52,399 --> 00:15:56,990
powerful and the syntax looks a bit like

00:15:54,559 --> 00:15:58,639
c++ and c but it's just the main

00:15:56,990 --> 00:16:00,860
specific language and the cool thing is

00:15:58,639 --> 00:16:04,069
that these modules don't just implement

00:16:00,860 --> 00:16:06,230
c or c++ they expose and an interface in

00:16:04,069 --> 00:16:06,829
VCL so you basically enrich your

00:16:06,230 --> 00:16:09,139
language

00:16:06,829 --> 00:16:11,209
next thing we're doing is generating an

00:16:09,139 --> 00:16:13,009
access control list with a subnet of all

00:16:11,209 --> 00:16:14,750
the internal users they're allowed to

00:16:13,009 --> 00:16:18,740
access Chrome's install pages update

00:16:14,750 --> 00:16:20,360
pages all the others will ban oh we

00:16:18,740 --> 00:16:22,309
haven't reached the end yet and then we

00:16:20,360 --> 00:16:23,809
have the back end in this case our web

00:16:22,309 --> 00:16:25,579
server is running on the same box as our

00:16:23,809 --> 00:16:28,850
varnish in production you might want to

00:16:25,579 --> 00:16:30,679
split that up what have we got here

00:16:28,850 --> 00:16:33,230
there's a lot of codes on the slide but

00:16:30,679 --> 00:16:35,300
we'll go over the parts that are

00:16:33,230 --> 00:16:37,189
important this is the receiving and this

00:16:35,300 --> 00:16:39,350
is where we receive requests and this is

00:16:37,189 --> 00:16:40,970
where we mix some of the custom stuff

00:16:39,350 --> 00:16:41,990
with the basic stuff you'll find in

00:16:40,970 --> 00:16:44,329
every other

00:16:41,990 --> 00:16:45,709
VCR file you have a Drupal so what it

00:16:44,329 --> 00:16:46,220
does is it checks if it's a get or a

00:16:45,709 --> 00:16:47,540
post

00:16:46,220 --> 00:16:49,160
it checks if there's an authorization

00:16:47,540 --> 00:16:51,769
header all that kind of stuff will be

00:16:49,160 --> 00:16:53,870
dealt with will only cache get or heads

00:16:51,769 --> 00:16:55,459
because of idempotency reasons and

00:16:53,870 --> 00:16:57,110
because of state reasons we don't

00:16:55,459 --> 00:16:59,360
want to cash authorization headers and

00:16:57,110 --> 00:17:01,220
we'll be careful with the cookies I'm

00:16:59,360 --> 00:17:02,660
not using typical regular regular

00:17:01,220 --> 00:17:04,939
expression magic for the cookies I'm

00:17:02,660 --> 00:17:06,709
using the cookie module and that will

00:17:04,939 --> 00:17:08,659
fetch my cookie normally whenever we see

00:17:06,709 --> 00:17:11,179
a cookie we bypass or whenever we see

00:17:08,659 --> 00:17:12,949
the PHP session ID cookie or dedicated

00:17:11,179 --> 00:17:14,600
RuPaul session ID cookie will just

00:17:12,949 --> 00:17:17,029
bypass but in this case we will not do

00:17:14,600 --> 00:17:21,199
that will interpret this and as you can

00:17:17,029 --> 00:17:24,620
see here we're if we go a bit lower and

00:17:21,199 --> 00:17:26,870
I try to highlight it the cookie the

00:17:24,620 --> 00:17:29,179
Drupal cookie is variable in name so we

00:17:26,870 --> 00:17:31,130
need to find a way to fetch it first so

00:17:29,179 --> 00:17:33,250
I'm doing some regular expression

00:17:31,130 --> 00:17:35,330
mumbo-jumbo looking for sass and then

00:17:33,250 --> 00:17:36,919
alphanumeric data and as soon as I

00:17:35,330 --> 00:17:39,470
figured it out I'm gonna store that name

00:17:36,919 --> 00:17:40,909
in a variable and I will use this to

00:17:39,470 --> 00:17:42,620
filter out the cookie so we'll remove

00:17:40,909 --> 00:17:44,539
every single cookie that we don't need

00:17:42,620 --> 00:17:45,830
so you know all the tracking cookies all

00:17:44,539 --> 00:17:47,630
the Google Analytics stuff we'll just

00:17:45,830 --> 00:17:50,179
throw that out because that will just

00:17:47,630 --> 00:17:51,950
screw with the process and we'll keep

00:17:50,179 --> 00:17:54,320
the cookies that are important to us in

00:17:51,950 --> 00:17:57,380
this case PHP session ID no cash CI

00:17:54,320 --> 00:17:59,419
session CI session uppercase auth token

00:17:57,380 --> 00:18:01,610
or JSON web token and of course that

00:17:59,419 --> 00:18:05,179
variable session cookie all dressed come

00:18:01,610 --> 00:18:06,470
and if it turns out that after removing

00:18:05,179 --> 00:18:08,779
all those cookies we don't need that

00:18:06,470 --> 00:18:11,330
it's just an empty string we'll chop out

00:18:08,779 --> 00:18:12,529
the cookie entirely and we'll we'll do

00:18:11,330 --> 00:18:16,480
and this is the important part it's a

00:18:12,529 --> 00:18:18,679
red call JWT and that's a custom

00:18:16,480 --> 00:18:20,240
subroutine that i've written where all

00:18:18,679 --> 00:18:21,200
the validation happens and there'll be

00:18:20,240 --> 00:18:22,429
lots of code on screen

00:18:21,200 --> 00:18:26,590
I'm warning you please don't have a

00:18:22,429 --> 00:18:29,029
stroke we continue this is all typical

00:18:26,590 --> 00:18:31,580
Drupal stuff besides that if the rolls

00:18:29,029 --> 00:18:34,279
so here we assume that we don't know

00:18:31,580 --> 00:18:38,330
nothing about JWT up until that call job

00:18:34,279 --> 00:18:40,100
JWT point after this we're well aware of

00:18:38,330 --> 00:18:42,559
what's happening we have a rolls

00:18:40,100 --> 00:18:43,970
variable you know that to roll came out

00:18:42,559 --> 00:18:46,010
of the JWT

00:18:43,970 --> 00:18:50,090
and as soon as an admin is there we will

00:18:46,010 --> 00:18:51,860
bypass the cache and the end result of

00:18:50,090 --> 00:18:53,630
it all and you'll see that on one of the

00:18:51,860 --> 00:18:56,090
next slide is that I'm setting a custom

00:18:53,630 --> 00:18:59,000
header X login an X logon is either true

00:18:56,090 --> 00:19:00,860
empty or false and if it's true we know

00:18:59,000 --> 00:19:03,770
the user has logged in and we can fetch

00:19:00,860 --> 00:19:05,179
that information from the JWT so if

00:19:03,770 --> 00:19:07,070
we're trying to access the login page

00:19:05,179 --> 00:19:08,809
but you're already logged in we're going

00:19:07,070 --> 00:19:10,940
to redirect you to slash users

00:19:08,809 --> 00:19:13,159
we're not doing using rewrite rules

00:19:10,940 --> 00:19:15,200
because we can conserve a connection

00:19:13,159 --> 00:19:17,210
every web server connection we can

00:19:15,200 --> 00:19:19,220
conserve will do that so this is just

00:19:17,210 --> 00:19:21,590
regular expression

00:19:19,220 --> 00:19:23,840
htaccess rewrite kind of stuff but all

00:19:21,590 --> 00:19:25,759
done in varnish so we're matching URLs

00:19:23,840 --> 00:19:28,999
and redirecting crew so we don't have to

00:19:25,759 --> 00:19:31,669
consume one no to be fair you could just

00:19:28,999 --> 00:19:33,799
do that using HT access or nginx rewrite

00:19:31,669 --> 00:19:35,960
rules and cache the result but I'm being

00:19:33,799 --> 00:19:38,389
careful and being prudent here the thing

00:19:35,960 --> 00:19:40,940
that really matters is in the bottom you

00:19:38,389 --> 00:19:42,860
see return hash so that means and that

00:19:40,940 --> 00:19:45,200
it that is an instruction and varnish to

00:19:42,860 --> 00:19:46,610
for varnish to cache even if varnish

00:19:45,200 --> 00:19:48,559
doesn't like what's happening because

00:19:46,610 --> 00:19:50,749
varnish doesn't like cookies but we're

00:19:48,559 --> 00:19:53,570
forcing varnish to say hey we are going

00:19:50,749 --> 00:19:55,940
to cache this page then on the next

00:19:53,570 --> 00:19:57,919
slide a lot of boilerplate stuff but the

00:19:55,940 --> 00:20:00,139
top one is useful because a lot of

00:19:57,919 --> 00:20:04,009
people like using SSL who uses SSL or

00:20:00,139 --> 00:20:05,269
TLS under website majority right did you

00:20:04,009 --> 00:20:11,929
know that varnish does not support

00:20:05,269 --> 00:20:13,789
tls/ssl thanks for contributing I like

00:20:11,929 --> 00:20:16,129
the interaction you're great crowd great

00:20:13,789 --> 00:20:18,169
crowd so we need to terminate as Iselle

00:20:16,129 --> 00:20:21,350
before we enter varnish so we usually

00:20:18,169 --> 00:20:24,350
set up an H a proxy or a hitch or pound

00:20:21,350 --> 00:20:26,480
or nginx or anything that can terminate

00:20:24,350 --> 00:20:29,179
that SSL certificate but to avoid

00:20:26,480 --> 00:20:30,679
getting stuck in an infinite loop we

00:20:29,179 --> 00:20:33,320
have to announce that there needs to be

00:20:30,679 --> 00:20:35,299
a cache variation for an exported proto

00:20:33,320 --> 00:20:37,100
header exported proto means that's a

00:20:35,299 --> 00:20:38,480
header being sent from the place where

00:20:37,100 --> 00:20:40,519
the SSL gets terminated and that

00:20:38,480 --> 00:20:42,740
announces the the protocol we're using

00:20:40,519 --> 00:20:44,809
because even if you're using HTTPS the

00:20:42,740 --> 00:20:46,519
internal connection will be HTTP and for

00:20:44,809 --> 00:20:47,929
Drupal there will be no way to identify

00:20:46,519 --> 00:20:50,389
whether or not there should be a

00:20:47,929 --> 00:20:51,769
redirect to enforce HTTPS so we should

00:20:50,389 --> 00:20:53,899
announce this and create cache

00:20:51,769 --> 00:20:56,059
variations and meanwhile you should deal

00:20:53,899 --> 00:20:57,799
with this in your code if you see an

00:20:56,059 --> 00:21:00,889
exported proto header and it contains

00:20:57,799 --> 00:21:03,019
HTTPS that you rendered HTTP based urls

00:21:00,889 --> 00:21:05,210
will skip the rest and will just move

00:21:03,019 --> 00:21:06,350
forward we're almost done here right six

00:21:05,210 --> 00:21:08,659
minutes to go

00:21:06,350 --> 00:21:11,389
we're gonna skip forward to the actual

00:21:08,659 --> 00:21:13,429
the toughest part and I don't expect you

00:21:11,389 --> 00:21:15,169
to understand this again this module is

00:21:13,429 --> 00:21:17,149
online and I'll share that VCL code too

00:21:15,169 --> 00:21:19,100
what we're doing is reading the cookie

00:21:17,149 --> 00:21:21,649
and we're using the cookie module to

00:21:19,100 --> 00:21:22,370
read the JWT cookie and we call that two

00:21:21,649 --> 00:21:25,130
token

00:21:22,370 --> 00:21:26,300
and then we do regular expression magic

00:21:25,130 --> 00:21:28,760
and you remember that there's create

00:21:26,300 --> 00:21:30,800
distinctive bits header payloads

00:21:28,760 --> 00:21:32,450
signature and that's what you're seeing

00:21:30,800 --> 00:21:34,340
the first line I've marked it in green

00:21:32,450 --> 00:21:35,900
we're getting the first group with

00:21:34,340 --> 00:21:38,990
regular expressions out of it and that

00:21:35,900 --> 00:21:40,790
group is the header and then we can

00:21:38,990 --> 00:21:44,150
fetch the type and the algorithm by

00:21:40,790 --> 00:21:47,030
doing just fine and replace action using

00:21:44,150 --> 00:21:49,610
Rex up and varnish Rex up as a sort of

00:21:47,030 --> 00:21:51,860
substitution method and we fetch the

00:21:49,610 --> 00:21:54,590
data we need in the JSON object I won't

00:21:51,860 --> 00:21:57,490
take the time to go over all the the

00:21:54,590 --> 00:21:59,990
regex magic it's just too cumbersome

00:21:57,490 --> 00:22:03,620
next up we're fetching the payloads

00:21:59,990 --> 00:22:05,840
second group and what follows is a is

00:22:03,620 --> 00:22:08,000
the signature we get the signature this

00:22:05,840 --> 00:22:09,950
is the third group what we're also doing

00:22:08,000 --> 00:22:11,630
is creating the expected signature so

00:22:09,950 --> 00:22:13,309
that we can match whether or not the

00:22:11,630 --> 00:22:17,600
data was tampered with and we do that by

00:22:13,309 --> 00:22:20,270
using our digests library digests base64

00:22:17,600 --> 00:22:21,830
URL notepad hex yadda yadda yadda you

00:22:20,270 --> 00:22:23,210
take the key you take the header you

00:22:21,830 --> 00:22:26,300
take the payload you chop it all

00:22:23,210 --> 00:22:28,730
together and there's a signature coming

00:22:26,300 --> 00:22:30,620
out and then we could compare and that's

00:22:28,730 --> 00:22:33,020
what we're doing next up we're getting

00:22:30,620 --> 00:22:36,110
the payloads which is received from the

00:22:33,020 --> 00:22:38,540
raw payload we base64 decoded it becomes

00:22:36,110 --> 00:22:40,700
Jason we look for the expiration date we

00:22:38,540 --> 00:22:42,950
look for the jti which is our Drupal

00:22:40,700 --> 00:22:45,380
session ID we look for the user ID and

00:22:42,950 --> 00:22:47,990
role information and what ends up in

00:22:45,380 --> 00:22:50,090
these variables is just usable data all

00:22:47,990 --> 00:22:52,610
of the garbage has been trimmed out you

00:22:50,090 --> 00:22:54,950
have usable data that you can recycle to

00:22:52,610 --> 00:22:58,670
make certain decisions decisions being

00:22:54,950 --> 00:23:01,700
if our user ID is not a number something

00:22:58,670 --> 00:23:05,410
went wrong and we cannot say that users

00:23:01,700 --> 00:23:08,210
logged in or if the expiration date has

00:23:05,410 --> 00:23:10,820
passed you're dealing with an ex-parte

00:23:08,210 --> 00:23:14,540
token so that user is not considered

00:23:10,820 --> 00:23:16,340
logged in or when the session cookie the

00:23:14,540 --> 00:23:19,820
value of it doesn't really match the JDI

00:23:16,340 --> 00:23:21,410
or when the signatures are forged then

00:23:19,820 --> 00:23:24,530
you have a clever person trying to

00:23:21,410 --> 00:23:26,360
inject data to figure out some privilege

00:23:24,530 --> 00:23:29,059
escalation of some sorts but whenever

00:23:26,360 --> 00:23:32,210
all these conditions are met the user is

00:23:29,059 --> 00:23:34,340
considered logged in and here's a

00:23:32,210 --> 00:23:36,200
decision we're making this will be

00:23:34,340 --> 00:23:38,540
replaced with whatever

00:23:36,200 --> 00:23:40,220
the pattern you're trying to match for

00:23:38,540 --> 00:23:42,560
our client those were the full episodes

00:23:40,220 --> 00:23:44,990
of the videos in our case it's no 2 if

00:23:42,560 --> 00:23:47,960
you want to access No - and you're not

00:23:44,990 --> 00:23:50,690
logged in we're gonna redirect you to

00:23:47,960 --> 00:23:51,020
the login page it's a big decision to

00:23:50,690 --> 00:23:52,340
make

00:23:51,020 --> 00:23:57,790
this is where it happens you're gonna

00:23:52,340 --> 00:24:00,350
access No - gonna get redirected right

00:23:57,790 --> 00:24:03,920
final bit because I've someone's gonna

00:24:00,350 --> 00:24:05,210
cut me off and no yet I've mentioned

00:24:03,920 --> 00:24:06,800
cash variations because that was the

00:24:05,210 --> 00:24:09,410
goal right to create a cash variation

00:24:06,800 --> 00:24:11,330
for logged in and anonymous users and

00:24:09,410 --> 00:24:13,430
we've created all this VCL code and all

00:24:11,330 --> 00:24:15,470
this Drupal code to determine whether or

00:24:13,430 --> 00:24:18,350
not the user was logged in and here's

00:24:15,470 --> 00:24:21,050
the final piece you need very headers

00:24:18,350 --> 00:24:22,790
are powerful HTTP headers I would advise

00:24:21,050 --> 00:24:25,550
you to use them you can issued them in

00:24:22,790 --> 00:24:27,380
Drupal and you can say very on X login

00:24:25,550 --> 00:24:29,600
now X login should be a valid request

00:24:27,380 --> 00:24:32,480
header but since the browser is not

00:24:29,600 --> 00:24:33,950
sending it but varnish we can throw the

00:24:32,480 --> 00:24:36,920
very header back and varnish will create

00:24:33,950 --> 00:24:39,830
a nice cache item for that URL for the

00:24:36,920 --> 00:24:42,830
logged in user and a nice item for the

00:24:39,830 --> 00:24:44,240
anonymous user and to finish it off we

00:24:42,830 --> 00:24:46,160
need to talk a little bit about Drupal

00:24:44,240 --> 00:24:47,920
this is Drupal con right need to talk

00:24:46,160 --> 00:24:51,050
just a bit of Drupal

00:24:47,920 --> 00:24:52,970
andreas it's not me who did it andreas

00:24:51,050 --> 00:24:54,920
create use some modules he used the

00:24:52,970 --> 00:24:57,650
varnish module of course he used the key

00:24:54,920 --> 00:24:59,840
model to store the JSON web token he

00:24:57,650 --> 00:25:02,300
added the HTTP response headers and UI

00:24:59,840 --> 00:25:05,060
to set custom cache control headers on

00:25:02,300 --> 00:25:06,320
notes which is convenient because my my

00:25:05,060 --> 00:25:08,360
vision about varnish is all about

00:25:06,320 --> 00:25:10,220
developer empowerment so that means you

00:25:08,360 --> 00:25:12,290
as a developer because I assume most of

00:25:10,220 --> 00:25:13,700
you are developers should have control

00:25:12,290 --> 00:25:15,590
over the cache without having to write

00:25:13,700 --> 00:25:18,380
custom configurations agreed there was

00:25:15,590 --> 00:25:20,570
lots of custom VCL but the goal is when

00:25:18,380 --> 00:25:23,240
you use varnish to have a few VCL as

00:25:20,570 --> 00:25:25,460
possible and use HTTP best practices

00:25:23,240 --> 00:25:27,320
whenever you can then we have the two

00:25:25,460 --> 00:25:28,940
modules JWT cookie and that example

00:25:27,320 --> 00:25:30,650
stuff and let me show you some

00:25:28,940 --> 00:25:33,590
screenshots this is the home page that

00:25:30,650 --> 00:25:35,630
example because this is all this is not

00:25:33,590 --> 00:25:37,700
something you'd use in production like

00:25:35,630 --> 00:25:39,500
that he trimmed out all the custom stuff

00:25:37,700 --> 00:25:42,110
for the client and just made me a proof

00:25:39,500 --> 00:25:44,360
of concept the JWT example cookie

00:25:42,110 --> 00:25:45,770
displays a timestamp and that's

00:25:44,360 --> 00:25:47,330
something convenient if you refresh the

00:25:45,770 --> 00:25:48,620
page and the timestamp remains the same

00:25:47,330 --> 00:25:50,630
you're using

00:25:48,620 --> 00:25:53,660
the cash that's a trick I use for

00:25:50,630 --> 00:25:55,970
debugging and he is reading the value of

00:25:53,660 --> 00:25:56,900
was a JSON web token and were not logged

00:25:55,970 --> 00:25:58,790
in but that's not really a problem

00:25:56,900 --> 00:26:01,640
because there is no real cash variation

00:25:58,790 --> 00:26:04,040
on that page when I try clicking on the

00:26:01,640 --> 00:26:06,290
button to go to the logged in user only

00:26:04,040 --> 00:26:08,450
content - no - and getting redirected to

00:26:06,290 --> 00:26:10,460
the user pitch I'm not logged in I log

00:26:08,450 --> 00:26:12,350
in and as soon as I'm logged in I'm

00:26:10,460 --> 00:26:16,309
seeing the cached version and I'm seeing

00:26:12,350 --> 00:26:17,540
that I am actually logged in it's a

00:26:16,309 --> 00:26:20,690
pretty stupid example that I had to

00:26:17,540 --> 00:26:22,730
include it and the behind the scenes I'm

00:26:20,690 --> 00:26:25,760
not gonna go through all the code but he

00:26:22,730 --> 00:26:28,820
uses a composer package the else the L

00:26:25,760 --> 00:26:31,010
kabuki or whatever you pronounce the JWT

00:26:28,820 --> 00:26:32,720
library and can see all the fields he is

00:26:31,010 --> 00:26:34,820
setting here you can extend that if you

00:26:32,720 --> 00:26:36,740
want more data so it's convenient I

00:26:34,820 --> 00:26:38,720
would advise you because it's Drupal 7

00:26:36,740 --> 00:26:40,970
and this side is no longer in line it's

00:26:38,720 --> 00:26:43,490
now the Drupal 8 version which was made

00:26:40,970 --> 00:26:46,130
by an agency who had caching in mind it

00:26:43,490 --> 00:26:48,080
doesn't use that anymore so this is very

00:26:46,130 --> 00:26:50,540
much usable in Drupal 8 land but I

00:26:48,080 --> 00:26:53,270
wonder if you should do slightly factors

00:26:50,540 --> 00:26:55,130
I guess you have to so hit me up if you

00:26:53,270 --> 00:26:57,470
have ideas to convert this to Drupal 8

00:26:55,130 --> 00:26:59,540
and then in the end he just sets the

00:26:57,470 --> 00:27:03,370
cookie using all that payloads and

00:26:59,540 --> 00:27:06,140
validates everything oh I'm getting the

00:27:03,370 --> 00:27:07,610
signal and that's okay by me because I

00:27:06,140 --> 00:27:08,870
would like to thank on videos again for

00:27:07,610 --> 00:27:11,480
creating that module for us on the

00:27:08,870 --> 00:27:13,220
client you can download it there again

00:27:11,480 --> 00:27:15,170
the idea is that you push session

00:27:13,220 --> 00:27:18,050
information from the server to the

00:27:15,170 --> 00:27:19,520
client using a technology like varnish

00:27:18,050 --> 00:27:21,320
if you want to know more about varnish

00:27:19,520 --> 00:27:22,960
buy this book wherever you buy your

00:27:21,320 --> 00:27:25,610
books write Amazon

00:27:22,960 --> 00:27:27,380
wherever you get it or as a subscription

00:27:25,610 --> 00:27:28,880
service with Safari books

00:27:27,380 --> 00:27:30,860
I'm gonna raffle one of those away so

00:27:28,880 --> 00:27:32,780
afterwards just hit me up on Twitter

00:27:30,860 --> 00:27:35,450
I'll pick a random person I'll ship you

00:27:32,780 --> 00:27:37,280
that book all my presentations and the

00:27:35,450 --> 00:27:40,520
video footage of this will be listed on

00:27:37,280 --> 00:27:42,190
my website as well as the slides I'm

00:27:40,520 --> 00:27:44,000
available on Twitter on Instagram and

00:27:42,190 --> 00:27:48,700
lots of pictures there

00:27:44,000 --> 00:27:50,860
I would like to I'm gonna step here

00:27:48,700 --> 00:27:52,660
this was my very first can both on the

00:27:50,860 --> 00:27:54,220
speaker I never thoroughly enjoyed it I

00:27:52,660 --> 00:27:56,850
was happy that all of you were here I

00:27:54,220 --> 00:27:56,850
would say

00:27:58,490 --> 00:28:03,349
[Music]

00:28:24,910 --> 00:28:37,000
yes having these having the data about

00:28:32,720 --> 00:28:37,000

YouTube URL: https://www.youtube.com/watch?v=X8zfOROE0oM


