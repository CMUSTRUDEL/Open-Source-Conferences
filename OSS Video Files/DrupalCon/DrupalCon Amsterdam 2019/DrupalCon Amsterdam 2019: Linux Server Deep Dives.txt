Title: DrupalCon Amsterdam 2019: Linux Server Deep Dives
Publication date: 2019-10-29
Playlist: DrupalCon Amsterdam 2019
Description: 
	Amin Astaneh
Acquia, Arlington, United States

Over the past few years the Linux kernel has gained features that allow us to learn more about what's really happening on our servers and the applications that run on them.

This talk will explore how these new features, particularly perf_events and ebpf, enable us to answer questions about what a Drupal site is doing in real time beyond what the standard logs, server performance tools, and even strace will reveal. Attendees will be provided a brief introduction to example uses of these tools to diagnose performance problems.

This talk is intended for attendees that are familiar with Linux, the command line, and have used host observability tools in the past (top, netstat, etc).
Captions: 
	00:00:00,030 --> 00:00:05,190
awesome thanks for coming really excited

00:00:04,290 --> 00:00:06,960
to have you all here

00:00:05,190 --> 00:00:09,570
I hope that you'll find this to be a

00:00:06,960 --> 00:00:12,300
really awesome session so I'm presenting

00:00:09,570 --> 00:00:15,420
Linux server deep dives my name is Amina

00:00:12,300 --> 00:00:18,119
stunning I press the big red button so

00:00:15,420 --> 00:00:20,029
you can keep going so Who am I I'm the

00:00:18,119 --> 00:00:22,260
senior manager of site reliability

00:00:20,029 --> 00:00:24,960
engineering at Acquia I'm one of the

00:00:22,260 --> 00:00:28,769
old-timers I bet the company since

00:00:24,960 --> 00:00:31,769
December of 2010 I was in operations and

00:00:28,769 --> 00:00:34,460
now I lead the sre group my job is to

00:00:31,769 --> 00:00:36,989
basically champion DevOps sre and

00:00:34,460 --> 00:00:42,000
operational and agile best practices at

00:00:36,989 --> 00:00:44,520
the company so big warning this is not

00:00:42,000 --> 00:00:47,879
your usual Linux talk we are not going

00:00:44,520 --> 00:00:49,800
to be talking about top or PS or uptime

00:00:47,879 --> 00:00:52,379
or even the really cool tools like SAR

00:00:49,800 --> 00:00:55,800
and MP stat and iOS and even the

00:00:52,379 --> 00:00:57,710
esoteric tools like hash trace or L SOF

00:00:55,800 --> 00:01:01,710
but ok maybe a little bit of edge trace

00:00:57,710 --> 00:01:05,280
I did a talk around a year ago in that

00:01:01,710 --> 00:01:06,780
link that goes over all this stuff so

00:01:05,280 --> 00:01:09,810
today we're gonna do an introduction to

00:01:06,780 --> 00:01:12,570
some advanced tooling particularly / v

00:01:09,810 --> 00:01:13,979
NT BPF we're going to talk about where

00:01:12,570 --> 00:01:16,799
they came from what their capabilities

00:01:13,979 --> 00:01:20,270
are how to install them and a live demo

00:01:16,799 --> 00:01:22,590
of some examples that you can use today

00:01:20,270 --> 00:01:24,840
so the game plan is I want to provide

00:01:22,590 --> 00:01:26,159
you some inspiration on simple yet

00:01:24,840 --> 00:01:28,080
really powerful ways to troubleshoot

00:01:26,159 --> 00:01:30,960
Drupal from the infrastructure and

00:01:28,080 --> 00:01:32,759
performance side all the tools that I

00:01:30,960 --> 00:01:35,100
was describing before they answer the

00:01:32,759 --> 00:01:37,200
question of what resources you're using

00:01:35,100 --> 00:01:40,200
on the system but the tools I'm going to

00:01:37,200 --> 00:01:43,829
introduce talk about how resources are

00:01:40,200 --> 00:01:45,720
being used in greater detail so before I

00:01:43,829 --> 00:01:47,670
get started we got some caveats first

00:01:45,720 --> 00:01:49,470
off these tools do introduce a

00:01:47,670 --> 00:01:52,140
performance overhead they're better than

00:01:49,470 --> 00:01:54,360
the older tools like ashtrays but still

00:01:52,140 --> 00:01:56,369
keep that in mind when analyzing

00:01:54,360 --> 00:01:59,490
production workloads test them and non

00:01:56,369 --> 00:02:01,530
prod if you can secondly some tools

00:01:59,490 --> 00:02:06,149
require you to rebuild your services in

00:02:01,530 --> 00:02:09,810
order to use them such as my sequel D

00:02:06,149 --> 00:02:12,970
and PHP some tools require you to

00:02:09,810 --> 00:02:15,760
install debug packages to be useful

00:02:12,970 --> 00:02:17,590
securely the debug info and the debug

00:02:15,760 --> 00:02:19,450
symbols packages are usually built with

00:02:17,590 --> 00:02:24,100
all of them and then finally they

00:02:19,450 --> 00:02:27,190
require root access so the environment

00:02:24,100 --> 00:02:30,760
that we're using to demo on it's a

00:02:27,190 --> 00:02:33,310
really small 18:04 vm latest Drupal one

00:02:30,760 --> 00:02:34,810
gig of ram encore there's no fancy cache

00:02:33,310 --> 00:02:36,940
or anything like that it's just a real

00:02:34,810 --> 00:02:39,910
basic setup just to get started you can

00:02:36,940 --> 00:02:41,650
see it over here so that's good mommy

00:02:39,910 --> 00:02:45,010
and I have the VM in front of us that

00:02:41,650 --> 00:02:45,520
you can actually see what's going on all

00:02:45,010 --> 00:02:48,190
right

00:02:45,520 --> 00:02:50,230
so also before we get started let's do a

00:02:48,190 --> 00:02:52,480
little bit of operating systems basics

00:02:50,230 --> 00:02:56,890
let's talk about something called system

00:02:52,480 --> 00:02:59,530
calls so Siskel's it's how programs

00:02:56,890 --> 00:03:01,150
under the hood interact with a kernel so

00:02:59,530 --> 00:03:03,310
anytime you read or write to a file

00:03:01,150 --> 00:03:04,930
anytime you talk to the database over

00:03:03,310 --> 00:03:06,250
the network anytime you're doing a read

00:03:04,930 --> 00:03:07,810
and write from memcache anytime you're

00:03:06,250 --> 00:03:09,670
talking to your client over HTTP or

00:03:07,810 --> 00:03:12,730
executing other programs things like

00:03:09,670 --> 00:03:14,230
that those are done via sis calls if you

00:03:12,730 --> 00:03:16,240
want the full list on the Linux system

00:03:14,230 --> 00:03:17,410
you can run man to sis calls over people

00:03:16,240 --> 00:03:19,510
the full list and then if you want to

00:03:17,410 --> 00:03:21,850
read about each individual one you can

00:03:19,510 --> 00:03:25,570
run man to the name of the SIS call it's

00:03:21,850 --> 00:03:30,430
a lot of fun trust me all right you guys

00:03:25,570 --> 00:03:31,989
ready to take the dive cool so there's

00:03:30,430 --> 00:03:34,750
some new tools let's talk about them

00:03:31,989 --> 00:03:38,860
they're really exciting so first one is

00:03:34,750 --> 00:03:41,380
perf events it's a new it's a recent

00:03:38,860 --> 00:03:43,239
feature of Linux kernel since 2.63 one

00:03:41,380 --> 00:03:45,519
introduced in 2009 originally called

00:03:43,239 --> 00:03:48,160
performance counters for Linux what it

00:03:45,519 --> 00:03:50,230
does is it enables capture and analysis

00:03:48,160 --> 00:03:52,480
abroad performance related kernel events

00:03:50,230 --> 00:03:53,739
one problem it's not very well

00:03:52,480 --> 00:03:56,200
documented so you have to do a bit of

00:03:53,739 --> 00:03:58,720
googling but it's really easy to install

00:03:56,200 --> 00:04:01,540
you just run you just install the Linux

00:03:58,720 --> 00:04:02,799
tools package the second thing we're

00:04:01,540 --> 00:04:05,200
gonna go over is something called the

00:04:02,799 --> 00:04:06,340
extended berkeley packet filter that's

00:04:05,200 --> 00:04:08,470
kind of weird why are we talking about

00:04:06,340 --> 00:04:13,060
this well it is originally just a packet

00:04:08,470 --> 00:04:15,400
filter but the project evolved in 2014

00:04:13,060 --> 00:04:16,959
that expanded on its original usage and

00:04:15,400 --> 00:04:18,850
there's a few things about BPF that's

00:04:16,959 --> 00:04:20,739
actually pretty cool the first thing is

00:04:18,850 --> 00:04:22,690
the packet filters are actually little

00:04:20,739 --> 00:04:25,330
programs that run inside the kernel in a

00:04:22,690 --> 00:04:26,680
virtual machine very very odd there's

00:04:25,330 --> 00:04:29,080
internal guarantees the probe

00:04:26,680 --> 00:04:31,870
loded can't crash and can't run forever

00:04:29,080 --> 00:04:34,330
and they can also access and kernel

00:04:31,870 --> 00:04:36,970
debugging features so what does that

00:04:34,330 --> 00:04:38,560
mean you can use it for in-depth

00:04:36,970 --> 00:04:41,669
performance analysis of running server

00:04:38,560 --> 00:04:45,880
not just network and there is a toolkit

00:04:41,669 --> 00:04:47,530
that was authored called BCC the BPF

00:04:45,880 --> 00:04:48,910
compiler collection it provides us an

00:04:47,530 --> 00:04:50,139
accessible wealth of observe building

00:04:48,910 --> 00:04:51,490
tools we can run today you can also

00:04:50,139 --> 00:04:54,160
write your own if you're interested in

00:04:51,490 --> 00:04:56,650
doing that in Python actually so to

00:04:54,160 --> 00:04:59,949
install BCC pretty straightforward you

00:04:56,650 --> 00:05:03,490
just run that command on your Linux of

00:04:59,949 --> 00:05:05,470
choice and you get access to it so let's

00:05:03,490 --> 00:05:07,740
get right into it examples there demos

00:05:05,470 --> 00:05:10,000
the moment you've been waiting for all

00:05:07,740 --> 00:05:13,960
right so first let's just talk about

00:05:10,000 --> 00:05:16,030
perf so perf allows you to monitor for

00:05:13,960 --> 00:05:17,229
specific operating system events and

00:05:16,030 --> 00:05:19,419
there's a few things you can do with it

00:05:17,229 --> 00:05:20,949
first you can access counters so

00:05:19,419 --> 00:05:23,229
basically the number of occurrences that

00:05:20,949 --> 00:05:26,919
something happens on your system you can

00:05:23,229 --> 00:05:28,840
also trace real-time tracking of process

00:05:26,919 --> 00:05:30,130
and the system at large and we're

00:05:28,840 --> 00:05:32,650
talking about syscalls again which is

00:05:30,130 --> 00:05:34,630
why I did the introduction earlier we

00:05:32,650 --> 00:05:37,930
can do probing you can actually set up

00:05:34,630 --> 00:05:41,380
like a little trace point or a probe for

00:05:37,930 --> 00:05:43,030
a certain events and then capture that

00:05:41,380 --> 00:05:44,669
information later and then finally

00:05:43,030 --> 00:05:48,159
there's reporting so you can go and do

00:05:44,669 --> 00:05:49,300
your information gathering and then run

00:05:48,159 --> 00:05:52,659
a report and you can see what happened

00:05:49,300 --> 00:05:55,659
after the fact which is pretty sweet so

00:05:52,659 --> 00:05:57,400
example of counters so there's this

00:05:55,659 --> 00:05:59,409
command called perf stat

00:05:57,400 --> 00:06:01,240
so what this is going to do is it's

00:05:59,409 --> 00:06:03,190
gonna list the number of system calls

00:06:01,240 --> 00:06:05,169
for a given command so we're gonna demo

00:06:03,190 --> 00:06:07,090
this I'm gonna run that command right

00:06:05,169 --> 00:06:09,280
there which basically is saying what

00:06:07,090 --> 00:06:10,750
happens when you run drush status so

00:06:09,280 --> 00:06:13,740
let's find out what happens when we run

00:06:10,750 --> 00:06:13,740
drush status

00:06:15,330 --> 00:06:21,080
so let's see justice just to show you

00:06:18,960 --> 00:06:27,960
what I'm doing there's no shenanigans

00:06:21,080 --> 00:06:29,580
that's what we're running all right so

00:06:27,960 --> 00:06:33,720
this is what happened behind the scenes

00:06:29,580 --> 00:06:36,150
on the server where Rand rush status all

00:06:33,720 --> 00:06:38,640
of these are system calls for getting

00:06:36,150 --> 00:06:40,740
information about files so just to run

00:06:38,640 --> 00:06:47,670
per status you're accessing the file

00:06:40,740 --> 00:06:50,870
system 7,000 times um you are making

00:06:47,670 --> 00:06:54,530
three network connections here you're

00:06:50,870 --> 00:06:57,480
sending 21 messages and you're receiving

00:06:54,530 --> 00:07:01,440
72 times so pretty interesting stuff you

00:06:57,480 --> 00:07:03,780
can see that it executed 12 programs so

00:07:01,440 --> 00:07:06,120
all of this information I was able to

00:07:03,780 --> 00:07:09,060
gather by just running it under first

00:07:06,120 --> 00:07:13,620
and you can see again this is the output

00:07:09,060 --> 00:07:16,700
from drush status and that is what

00:07:13,620 --> 00:07:20,400
happened under the hood pretty exciting

00:07:16,700 --> 00:07:23,880
all right so why does this stuff matter

00:07:20,400 --> 00:07:26,070
um well a certain module or a feature

00:07:23,880 --> 00:07:27,840
may be badly performing but you might

00:07:26,070 --> 00:07:32,010
not know why well if you wrap it in this

00:07:27,840 --> 00:07:33,930
tool you get some better clues so perf

00:07:32,010 --> 00:07:36,960
trace this is really cool at the last

00:07:33,930 --> 00:07:38,880
talk that I did about Linux I was

00:07:36,960 --> 00:07:41,310
talking about Astraeus this is a more

00:07:38,880 --> 00:07:44,490
performant replacement so a system

00:07:41,310 --> 00:07:46,650
called tracer what it does is you can

00:07:44,490 --> 00:07:48,330
attach it to a process or in this case

00:07:46,650 --> 00:07:50,870
the whole system and it will print

00:07:48,330 --> 00:07:53,880
everything that's happening in real time

00:07:50,870 --> 00:07:55,080
tracing PHP processes is a big thing

00:07:53,880 --> 00:07:57,240
that I used to do when I was in

00:07:55,080 --> 00:07:59,010
operation so aqueous I did it to

00:07:57,240 --> 00:08:01,320
troubleshoot performance problems on

00:07:59,010 --> 00:08:02,850
customer sites um when you don't have an

00:08:01,320 --> 00:08:05,310
APM installed so if you don't have an

00:08:02,850 --> 00:08:07,770
APM you've always do this and perf trace

00:08:05,310 --> 00:08:10,640
has less overhead the nest race by a lot

00:08:07,770 --> 00:08:12,590
and when I mean a lot I mean a lot so

00:08:10,640 --> 00:08:16,050
Brendan Greg who's a big performance

00:08:12,590 --> 00:08:18,510
guru at Netflix he did this little test

00:08:16,050 --> 00:08:23,250
so he ran the DD command which just

00:08:18,510 --> 00:08:27,660
basically makes a big a big file and he

00:08:23,250 --> 00:08:29,610
went and made 10,000 times

00:08:27,660 --> 00:08:31,920
12 bytes the bitbucket so if you just

00:08:29,610 --> 00:08:33,390
did that it was pretty fast you can see

00:08:31,920 --> 00:08:35,669
it takes only three and a half seconds

00:08:33,390 --> 00:08:38,970
and it does it a gig in half a second

00:08:35,669 --> 00:08:41,700
if you run it with perf it goes up to

00:08:38,970 --> 00:08:45,300
nine seconds but if you run s trace it

00:08:41,700 --> 00:08:47,640
does 218 seconds so the overhead perf

00:08:45,300 --> 00:08:51,690
stat is substantial but definitely not

00:08:47,640 --> 00:08:53,220
as bad as s trace so perf trace we're

00:08:51,690 --> 00:08:56,760
gonna demo this now we can see

00:08:53,220 --> 00:09:00,230
everything on the system all at once

00:08:56,760 --> 00:09:06,560
it's really cool so let's do it

00:09:00,230 --> 00:09:08,640
no caps like literally everything

00:09:06,560 --> 00:09:12,240
everything so you can see there's a lot

00:09:08,640 --> 00:09:14,570
of my sequel activity and then if I go

00:09:12,240 --> 00:09:17,060
and let's say run a little crawler

00:09:14,570 --> 00:09:20,100
that's gonna crawl this new mommy site

00:09:17,060 --> 00:09:22,140
now you're seeing everything happening

00:09:20,100 --> 00:09:22,740
all at once on this system pretty

00:09:22,140 --> 00:09:24,210
magical

00:09:22,740 --> 00:09:26,070
of course I'm tracing everything so

00:09:24,210 --> 00:09:27,930
there is a little bit of a slowdown but

00:09:26,070 --> 00:09:29,610
you can find all the files that are

00:09:27,930 --> 00:09:34,650
being opened and yeah this is pretty

00:09:29,610 --> 00:09:37,950
sweet stuff and then for a single

00:09:34,650 --> 00:09:40,230
process you can you know attach it to a

00:09:37,950 --> 00:09:42,030
process ID like you can touch trace or

00:09:40,230 --> 00:09:47,600
you can say perfect trace command and

00:09:42,030 --> 00:09:51,360
we're gonna do that right now so I have

00:09:47,600 --> 00:09:53,970
this one so this is just adding Devon

00:09:51,360 --> 00:09:55,680
all real straightforward stuff and

00:09:53,970 --> 00:09:59,670
actually me full screen that so you can

00:09:55,680 --> 00:10:04,010
see everything and you can see hey can I

00:09:59,670 --> 00:10:07,380
access this file can I open it

00:10:04,010 --> 00:10:10,830
can I read from it I can allocate memory

00:10:07,380 --> 00:10:12,780
all of that all available here and even

00:10:10,830 --> 00:10:15,150
tells you how long it took which is

00:10:12,780 --> 00:10:17,100
pretty nice so if you saw a system call

00:10:15,150 --> 00:10:20,510
that took a really long time that might

00:10:17,100 --> 00:10:20,510
be indicative of a performance problem

00:10:22,069 --> 00:10:29,040
per Ford so this is really nice so you

00:10:25,709 --> 00:10:30,959
can basically run this and sample all

00:10:29,040 --> 00:10:34,079
the CPU activity on the system so this

00:10:30,959 --> 00:10:36,749
example here it will record the CPU

00:10:34,079 --> 00:10:38,730
activity on all processors a thousand

00:10:36,749 --> 00:10:41,040
times a second for ten seconds and then

00:10:38,730 --> 00:10:43,709
you can run a report on now the thing is

00:10:41,040 --> 00:10:45,929
you do have to install debug packages in

00:10:43,709 --> 00:10:47,129
order to drill down into specific

00:10:45,929 --> 00:10:48,959
library calls otherwise you're just

00:10:47,129 --> 00:10:50,850
gonna get like hexadecimal gibberish

00:10:48,959 --> 00:10:52,230
instead the actual names of the

00:10:50,850 --> 00:10:55,369
functions that are being called so we

00:10:52,230 --> 00:10:55,369
can just go ahead and try that now

00:10:55,939 --> 00:11:03,629
alright so I'm gonna run my little crawl

00:10:58,499 --> 00:11:06,419
here and we're gonna run our perfo cord

00:11:03,629 --> 00:11:11,999
report thing so let's run our crawler

00:11:06,419 --> 00:11:13,679
let's run that so it's going and just

00:11:11,999 --> 00:11:16,160
hanging out and generating data for 10

00:11:13,679 --> 00:11:16,160
seconds

00:11:18,690 --> 00:11:24,190
and now look what we have so the top

00:11:21,940 --> 00:11:27,640
thing that's happening on the system is

00:11:24,190 --> 00:11:30,610
in a kernel but look what's underneath

00:11:27,640 --> 00:11:32,620
it in user space so it's PHP there's

00:11:30,610 --> 00:11:34,209
some function called Zen - find you

00:11:32,620 --> 00:11:38,950
folks could probably tell me more about

00:11:34,209 --> 00:11:41,019
that than I can but we can actually zoom

00:11:38,950 --> 00:11:50,370
in and see everything that's happening

00:11:41,019 --> 00:11:52,390
in the stack all the way down perf top

00:11:50,370 --> 00:11:54,790
similar to what we were doing before

00:11:52,390 --> 00:11:57,760
perfect chord it'll just do it in real

00:11:54,790 --> 00:11:59,470
time so this is really nice it'll tell

00:11:57,760 --> 00:12:01,029
you again what user space and kernel

00:11:59,470 --> 00:12:07,269
functions are using the most resources

00:12:01,029 --> 00:12:14,260
so we'll try that now and then again

00:12:07,269 --> 00:12:15,670
we'll run our crawler again so very

00:12:14,260 --> 00:12:17,230
similar to what we saw before you saw

00:12:15,670 --> 00:12:20,130
that PHP is taking most of the time

00:12:17,230 --> 00:12:20,130
which is reasonable

00:12:24,680 --> 00:12:28,759
and we even have a good example here how

00:12:26,930 --> 00:12:31,879
what is generating network traffic so

00:12:28,759 --> 00:12:34,249
what we're going to do is analyze all

00:12:31,879 --> 00:12:35,540
indications of the net dev transmit

00:12:34,249 --> 00:12:37,850
function which is happening in the

00:12:35,540 --> 00:12:47,509
kernel and we'll see what's happening

00:12:37,850 --> 00:12:52,339
now so his perfect opioid so for so go

00:12:47,509 --> 00:12:54,949
ahead and run or crawl again and you can

00:12:52,339 --> 00:12:56,360
see the sshd sshd is generating a lot

00:12:54,949 --> 00:12:58,819
transmits because it's talking to this

00:12:56,360 --> 00:13:00,230
console here and then W get which is the

00:12:58,819 --> 00:13:03,649
local crawler and then the Apache

00:13:00,230 --> 00:13:05,679
threats so pretty much what you would

00:13:03,649 --> 00:13:08,660
expect

00:13:05,679 --> 00:13:10,129
there's also dynamic tracing this is

00:13:08,660 --> 00:13:13,459
pretty interesting stuff you can

00:13:10,129 --> 00:13:15,170
basically tell the colonel to monitor

00:13:13,459 --> 00:13:17,899
for specific functions and create a

00:13:15,170 --> 00:13:21,679
probe and then you can record just that

00:13:17,899 --> 00:13:22,759
probe and then less than delete them I'm

00:13:21,679 --> 00:13:24,759
not going to go into them in great

00:13:22,759 --> 00:13:27,439
detail because they are pretty technical

00:13:24,759 --> 00:13:29,389
but know that this exists this might be

00:13:27,439 --> 00:13:32,360
a really interesting tool if you're

00:13:29,389 --> 00:13:35,720
really getting into into tough Linux

00:13:32,360 --> 00:13:39,079
performance problems so let's start

00:13:35,720 --> 00:13:41,809
moving into EBP F here so there's some

00:13:39,079 --> 00:13:44,629
really interesting tools from from this

00:13:41,809 --> 00:13:47,480
suite of from VCC the compiler

00:13:44,629 --> 00:13:50,509
collection so the first one we'll play

00:13:47,480 --> 00:13:54,709
with is TCP connect so we're gonna go

00:13:50,509 --> 00:13:56,540
and detect external calls performed by a

00:13:54,709 --> 00:13:58,730
server which could be Drupal

00:13:56,540 --> 00:14:01,160
it could be cron jobs maybe it's doing a

00:13:58,730 --> 00:14:03,429
curl to do something or you know a git

00:14:01,160 --> 00:14:07,189
clone and it could also help and

00:14:03,429 --> 00:14:14,170
detecting intruders so we're gonna go

00:14:07,189 --> 00:14:17,089
ahead and run the TCP connect and in

00:14:14,170 --> 00:14:19,549
Ubuntu they have the suffix BP FCC

00:14:17,089 --> 00:14:22,309
that's just how they name everything so

00:14:19,549 --> 00:14:25,279
we're gonna go ahead and do that so I'm

00:14:22,309 --> 00:14:30,429
just gonna run that now if I go and try

00:14:25,279 --> 00:14:30,429
to let's say curl my website

00:14:31,080 --> 00:14:40,780
you'll see that it goes and does that if

00:14:34,270 --> 00:14:42,820
I run the crawler again you can see all

00:14:40,780 --> 00:14:44,590
the connections from W get so it's

00:14:42,820 --> 00:14:46,150
making the connect system call so their

00:14:44,590 --> 00:14:49,360
client connection so this is a way that

00:14:46,150 --> 00:14:58,930
you can figure out what is happening

00:14:49,360 --> 00:15:03,100
outbound which is pretty nice we can

00:14:58,930 --> 00:15:04,960
also trace HTTP requests in real time so

00:15:03,100 --> 00:15:06,910
there's a tool called TCP tracer to

00:15:04,960 --> 00:15:08,290
detect this and this is really cool

00:15:06,910 --> 00:15:11,440
because you can find abusive or high

00:15:08,290 --> 00:15:18,820
throughput clients so let's try T C P

00:15:11,440 --> 00:15:21,790
tracer now okay so these are established

00:15:18,820 --> 00:15:23,170
connections here now again if I do my

00:15:21,790 --> 00:15:25,930
crawl again because it just generates a

00:15:23,170 --> 00:15:28,300
whole lot of a whole lot of activity in

00:15:25,930 --> 00:15:34,360
terms of files so it's really nice you

00:15:28,300 --> 00:15:36,430
know generator of load C you can see the

00:15:34,360 --> 00:15:43,030
source port the destination port the

00:15:36,430 --> 00:15:45,880
address is is it ipv4 ipv6 so pretty

00:15:43,030 --> 00:15:48,490
interesting stuff if I did a huge file

00:15:45,880 --> 00:15:51,720
transfer like an SCP or something we can

00:15:48,490 --> 00:15:51,720
probably look at that too

00:15:56,280 --> 00:16:02,020
now TCP life how long do your HTTP

00:15:59,650 --> 00:16:04,180
client connections last so this prints

00:16:02,020 --> 00:16:06,310
out the latency and data transfers for

00:16:04,180 --> 00:16:09,780
each which again can be useful for

00:16:06,310 --> 00:16:09,780
analyzing what your clients are doing

00:16:19,580 --> 00:16:27,190
so if I'm generating load now you can

00:16:23,720 --> 00:16:31,430
see some pretty interesting metrics so

00:16:27,190 --> 00:16:35,360
the duration in milliseconds of the TCP

00:16:31,430 --> 00:16:37,810
connection here also the transmitted and

00:16:35,360 --> 00:16:40,220
the in the receive and kilobytes so

00:16:37,810 --> 00:16:42,170
again you can see how big the requests

00:16:40,220 --> 00:16:44,210
are so if you're running this on a load

00:16:42,170 --> 00:16:46,120
balancer for example and maybe they're

00:16:44,210 --> 00:16:48,260
downloading a really big file that you

00:16:46,120 --> 00:16:49,820
didn't intentionally upload but the

00:16:48,260 --> 00:17:00,260
people are pulling down you could see

00:16:49,820 --> 00:17:01,730
that all right trace file accesses on a

00:17:00,260 --> 00:17:04,280
web server now we're gonna get in some

00:17:01,730 --> 00:17:06,770
more interesting stuff so we can use

00:17:04,280 --> 00:17:08,570
stat snoop so stat is a system call that

00:17:06,770 --> 00:17:12,080
basically says give me the information

00:17:08,570 --> 00:17:14,180
about this file you know like the

00:17:12,080 --> 00:17:17,510
permissions and where it's stored

00:17:14,180 --> 00:17:19,790
basically the inode information so stat

00:17:17,510 --> 00:17:21,770
is executed actually quite a bit by

00:17:19,790 --> 00:17:24,650
Drupal so we're gonna go ahead and run

00:17:21,770 --> 00:17:26,540
this command here and if you read

00:17:24,650 --> 00:17:28,810
between the lines I'm basically just

00:17:26,540 --> 00:17:32,450
saying for I'm looking for static asset

00:17:28,810 --> 00:17:33,590
accesses that are like JPEGs and PNG s

00:17:32,450 --> 00:17:44,590
and things like that so we're gonna give

00:17:33,590 --> 00:17:44,590
that a shot yeah stats new

00:17:46,289 --> 00:17:55,570
okay now if I ride my crawler again now

00:17:53,080 --> 00:17:57,820
some of these tools are a little buggy

00:17:55,570 --> 00:18:01,179
which is why you get these stacked races

00:17:57,820 --> 00:18:04,020
but you do get the idea you can see as

00:18:01,179 --> 00:18:10,210
I'm crawling the contents of the site

00:18:04,020 --> 00:18:12,130
it's going and opening the file for the

00:18:10,210 --> 00:18:13,630
static assets and local file system and

00:18:12,130 --> 00:18:18,010
then you can also see the crawler

00:18:13,630 --> 00:18:19,450
writing the asset to its local cache

00:18:18,010 --> 00:18:21,250
because that's what the crawler is doing

00:18:19,450 --> 00:18:23,950
it's mirroring to the site so you can

00:18:21,250 --> 00:18:34,919
see all of the files that are being at

00:18:23,950 --> 00:18:34,919
least stat it as it does the work okay

00:18:35,309 --> 00:18:41,950
now similarly we can do file top so just

00:18:40,059 --> 00:18:44,020
like regular top you can find processes

00:18:41,950 --> 00:18:45,850
that are using CPU we can figure out

00:18:44,020 --> 00:18:47,740
which specific files on the whole system

00:18:45,850 --> 00:18:53,530
are getting the most activity which can

00:18:47,740 --> 00:19:00,429
be really really helpful so it is just

00:18:53,530 --> 00:19:01,780
file top now for this example we're

00:19:00,429 --> 00:19:06,549
going to go ahead and use a little

00:19:01,780 --> 00:19:08,980
script I have that is this so we're just

00:19:06,549 --> 00:19:11,260
gonna make a 1 gigabyte file with random

00:19:08,980 --> 00:19:17,289
characters in it we're gonna see what

00:19:11,260 --> 00:19:19,240
that does now look at the top so you can

00:19:17,289 --> 00:19:22,539
see foo file you can see the big fat

00:19:19,240 --> 00:19:27,340
rights that are happening right there so

00:19:22,539 --> 00:19:30,789
now you are able to easily identify what

00:19:27,340 --> 00:19:34,299
file and what process is generating your

00:19:30,789 --> 00:19:36,340
load miss over again that might be

00:19:34,299 --> 00:19:38,380
really useful for the example of having

00:19:36,340 --> 00:19:39,909
a static static asset that's very large

00:19:38,380 --> 00:19:42,030
that's being pulled down by many clients

00:19:39,909 --> 00:19:42,030
at once

00:19:46,129 --> 00:19:50,879
so how large are your per process.i

00:19:49,139 --> 00:19:52,830
operations so this is really interesting

00:19:50,879 --> 00:19:55,919
there's a tool called bite size it

00:19:52,830 --> 00:19:58,590
prints a histogram of the storage i/o

00:19:55,919 --> 00:19:59,669
operations on a per process basis so

00:19:58,590 --> 00:20:01,169
this is really interesting because

00:19:59,669 --> 00:20:02,869
you're able to find programs that might

00:20:01,169 --> 00:20:13,169
be doing massive reads and writes

00:20:02,869 --> 00:20:14,460
so we'll try running that now all right

00:20:13,169 --> 00:20:16,350
and then again we're gonna go ahead and

00:20:14,460 --> 00:20:20,369
run that that DD because that generates

00:20:16,350 --> 00:20:22,619
a massive write to the system and this

00:20:20,369 --> 00:20:25,230
tool you just let it hang out until

00:20:22,619 --> 00:20:27,210
you've captured whatever event that

00:20:25,230 --> 00:20:29,190
you're looking at and then you can press

00:20:27,210 --> 00:20:30,480
ctrl C and then you're able to see the

00:20:29,190 --> 00:20:35,779
results so you can see we wrapped up

00:20:30,480 --> 00:20:35,779
here all right now let's fullscreen this

00:20:37,830 --> 00:20:42,889
so these are all of the things that were

00:20:39,960 --> 00:20:42,889
happening in the meantime

00:20:48,250 --> 00:20:54,169
so this was the DD file program other

00:20:52,220 --> 00:20:55,639
programs running in the meantime this

00:20:54,169 --> 00:21:00,860
was the this was the remove because I

00:20:55,639 --> 00:21:05,090
deleted the file and then the kernel

00:21:00,860 --> 00:21:09,610
worker and then the file system and then

00:21:05,090 --> 00:21:09,610
a DD operation and so on

00:21:12,210 --> 00:21:18,490
all right so let's talk a little bit

00:21:16,570 --> 00:21:20,470
more about file systems so how long does

00:21:18,490 --> 00:21:22,360
it take on the file system to do

00:21:20,470 --> 00:21:26,860
something so there's a whole class of

00:21:22,360 --> 00:21:28,630
tools ext4 distribution XFS distribution

00:21:26,860 --> 00:21:30,190
so on and so forth they will generate

00:21:28,630 --> 00:21:31,870
histograms similar to what you saw just

00:21:30,190 --> 00:21:34,000
now how long it takes to actually do the

00:21:31,870 --> 00:21:40,990
reads and writes the file system so when

00:21:34,000 --> 00:21:45,640
you run let's say Iost at writing we can

00:21:40,990 --> 00:21:48,970
run that DD again so this is generating

00:21:45,640 --> 00:21:51,760
a basic summary of what's happening on

00:21:48,970 --> 00:21:54,940
the disk but as you can see it's just

00:21:51,760 --> 00:21:56,559
telling you you know the reads and

00:21:54,940 --> 00:21:59,410
writes to the disk

00:21:56,559 --> 00:22:03,940
it isn't telling you how big the

00:21:59,410 --> 00:22:06,280
requests are so we can break it down by

00:22:03,940 --> 00:22:13,150
running this tool so we're gonna run

00:22:06,280 --> 00:22:17,559
ext4 disk because the X t4 is the local

00:22:13,150 --> 00:22:19,540
file system for this VM so if I go and

00:22:17,559 --> 00:22:21,960
generate that big right again from you

00:22:19,540 --> 00:22:21,960
random

00:22:33,720 --> 00:22:40,320
so now you can see how long it takes

00:22:37,050 --> 00:22:42,810
in general for the read operations so

00:22:40,320 --> 00:22:45,780
the reads are pretty fast we're talking

00:22:42,810 --> 00:22:48,750
about from zero to seven microseconds

00:22:45,780 --> 00:22:51,210
and then and then you do have some but

00:22:48,750 --> 00:22:53,760
not many that are you know an outlier

00:22:51,210 --> 00:22:56,670
the long tail right and then your write

00:22:53,760 --> 00:23:00,750
operations the requests are completing

00:22:56,670 --> 00:23:02,940
between you know most of them are in

00:23:00,750 --> 00:23:04,290
this area of microseconds and then it

00:23:02,940 --> 00:23:06,030
also shows you the amount of micro

00:23:04,290 --> 00:23:09,390
seconds it takes to open a file which is

00:23:06,030 --> 00:23:12,630
pretty nice too so then you're able to

00:23:09,390 --> 00:23:16,070
figure out where performance wise your

00:23:12,630 --> 00:23:16,070
read and write operations are happening

00:23:19,340 --> 00:23:25,230
so let's talk about whether or not you

00:23:22,290 --> 00:23:27,780
need more memory so let's get back to

00:23:25,230 --> 00:23:31,320
our operating system theory there's

00:23:27,780 --> 00:23:37,410
something called a page fault so when a

00:23:31,320 --> 00:23:39,390
process needs to read from a file if the

00:23:37,410 --> 00:23:42,270
contents that file isn't already in the

00:23:39,390 --> 00:23:44,880
page cache which is stored in RAM well

00:23:42,270 --> 00:23:46,260
it creates a page fault and then it goes

00:23:44,880 --> 00:23:48,690
and makes the requested just to get the

00:23:46,260 --> 00:23:51,210
data back so this is really important on

00:23:48,690 --> 00:23:54,480
server's expected to serve a lot of file

00:23:51,210 --> 00:23:56,280
data for example a file server so if you

00:23:54,480 --> 00:23:58,500
don't have a lot of memory on your file

00:23:56,280 --> 00:23:59,610
server it's going to affect performance

00:23:58,500 --> 00:24:01,200
because there is enough room for the

00:23:59,610 --> 00:24:02,610
page cache and you're going to get a lot

00:24:01,200 --> 00:24:06,750
of page faults and then you're going to

00:24:02,610 --> 00:24:08,670
have to continue to ask the the disk for

00:24:06,750 --> 00:24:12,060
its contents rather than storing it in

00:24:08,670 --> 00:24:14,250
the cache so a really good analogy for

00:24:12,060 --> 00:24:15,990
this is when you think about varnish

00:24:14,250 --> 00:24:22,260
you're telling burnish I had this many

00:24:15,990 --> 00:24:27,090
gigs for my cash for memcache D very

00:24:22,260 --> 00:24:27,870
similar Radice the nodb buffer pool for

00:24:27,090 --> 00:24:30,870
my sequel

00:24:27,870 --> 00:24:32,940
those are caches so Linux does the file

00:24:30,870 --> 00:24:34,880
caching for you for free but you do have

00:24:32,940 --> 00:24:38,310
to watch for it now there are two tools

00:24:34,880 --> 00:24:39,570
that are really nice to figure out your

00:24:38,310 --> 00:24:43,110
your page fault rates

00:24:39,570 --> 00:24:45,330
so there's cache stat that is for your

00:24:43,110 --> 00:24:48,330
file system cache and then there's the

00:24:45,330 --> 00:24:50,190
DC stat tool which will also run as well

00:24:48,330 --> 00:24:51,809
that is useful for the directory cache

00:24:50,190 --> 00:24:55,130
so when you go when you're like running

00:24:51,809 --> 00:24:59,790
LS it's populating the directory cache

00:24:55,130 --> 00:25:02,340
so I'm gonna do for this demo is I'm

00:24:59,790 --> 00:25:04,980
actually gonna cheat I'm gonna blow out

00:25:02,340 --> 00:25:07,080
the Linux cache for us so you can see

00:25:04,980 --> 00:25:10,260
what I mean here so this little command

00:25:07,080 --> 00:25:12,960
right here we're gonna tell the Linux OS

00:25:10,260 --> 00:25:16,260
to drop all the caches so we're gonna

00:25:12,960 --> 00:25:19,670
guarantee some some page faults here so

00:25:16,260 --> 00:25:26,820
I'm gonna go ahead and run this program

00:25:19,670 --> 00:25:28,800
all right so that's happening and now

00:25:26,820 --> 00:25:31,110
I'm gonna go ahead and run that crawl so

00:25:28,800 --> 00:25:35,030
it's gonna hit every single node and

00:25:31,110 --> 00:25:35,030
asset on the Drupal site so watch this

00:25:36,350 --> 00:25:41,000
so look at all those cache misses are

00:25:38,520 --> 00:25:41,000
happening right now

00:25:44,600 --> 00:25:55,000
and then similarly we can do the same

00:25:46,880 --> 00:26:01,809
thing with DC stat and then let's also

00:25:55,000 --> 00:26:01,809
blow out I can get that command in there

00:26:02,860 --> 00:26:08,659
there you go so okay so i've blown out

00:26:06,470 --> 00:26:09,769
the caches and you can see the misses

00:26:08,659 --> 00:26:12,049
already taking so if I go ahead and run

00:26:09,769 --> 00:26:14,509
that crawler again it should yeah so

00:26:12,049 --> 00:26:17,870
there's all your references to the

00:26:14,509 --> 00:26:19,970
directory cache and you can see all of

00:26:17,870 --> 00:26:22,519
the all of the misses that took place

00:26:19,970 --> 00:26:24,500
there and then of course over time

00:26:22,519 --> 00:26:27,860
that's going to get rebuilt and then

00:26:24,500 --> 00:26:29,690
subsequent runs shouldn't generate that

00:26:27,860 --> 00:26:32,750
many faults so yeah that's not as

00:26:29,690 --> 00:26:35,289
dramatic so you got rebuilt the

00:26:32,750 --> 00:26:35,289
directory cache

00:26:42,220 --> 00:26:49,760
so there is paid per sec we can trace

00:26:46,790 --> 00:26:52,520
the rate of creation of processes so

00:26:49,760 --> 00:26:55,220
let's say you have a cron job that you

00:26:52,520 --> 00:26:57,530
wrote that might be doing an infinite

00:26:55,220 --> 00:26:59,630
loop you might not know about that or

00:26:57,530 --> 00:27:01,790
maybe you just have scripts on the

00:26:59,630 --> 00:27:03,500
machine Iran that might be poorly

00:27:01,790 --> 00:27:04,760
authored and it's generating a lot of

00:27:03,500 --> 00:27:06,500
load in the machine but you're not quite

00:27:04,760 --> 00:27:09,890
sure where it's coming from

00:27:06,500 --> 00:27:12,530
this helps to figure that out because

00:27:09,890 --> 00:27:14,840
processes can be short-lived so we're

00:27:12,530 --> 00:27:18,919
gonna go ahead and generate that

00:27:14,840 --> 00:27:23,540
generate load and see what does so if I

00:27:18,919 --> 00:27:33,250
run this pit per sec tool and then let's

00:27:23,540 --> 00:27:40,250
say I said while true do echos Kong

00:27:33,250 --> 00:27:41,900
sleep long alright so I got one there

00:27:40,250 --> 00:27:45,410
that's pretty cool now if I take out

00:27:41,900 --> 00:27:49,460
that sleep let's find out how many I can

00:27:45,410 --> 00:27:52,400
I can do we're just gonna let it rip why

00:27:49,460 --> 00:27:54,080
is a zero should not be you know what it

00:27:52,400 --> 00:27:58,429
is it's because echoes are built-in that

00:27:54,080 --> 00:27:59,540
goes a built-in function so I have to

00:27:58,429 --> 00:28:04,760
actually actually create a process

00:27:59,540 --> 00:28:07,370
that's why there you go so now you got

00:28:04,760 --> 00:28:11,419
all your processes per second so the

00:28:07,370 --> 00:28:13,340
system is generating 1,300 processes per

00:28:11,419 --> 00:28:14,900
second right now so if you saw that in a

00:28:13,340 --> 00:28:19,549
running system you should be getting

00:28:14,900 --> 00:28:22,190
really concerned so now we can figure

00:28:19,549 --> 00:28:24,679
out okay we have a high rate of

00:28:22,190 --> 00:28:26,540
processes per second so let's find out

00:28:24,679 --> 00:28:30,740
what's doing it so there's a tool called

00:28:26,540 --> 00:28:36,169
xx nuke so we can now run it after our

00:28:30,740 --> 00:28:40,309
use of pit per sec and we can go and

00:28:36,169 --> 00:28:43,660
generate all that load again and we can

00:28:40,309 --> 00:28:43,660
see all of that taking place now

00:28:44,580 --> 00:28:52,000
let's go back and run this a little bit

00:28:47,529 --> 00:28:55,179
more gently so you can actually see what

00:28:52,000 --> 00:28:58,260
this is doing so the output is pretty

00:28:55,179 --> 00:29:02,110
interesting you have the process ID of

00:28:58,260 --> 00:29:04,600
that sleep but then you also have the

00:29:02,110 --> 00:29:06,909
parent process so this will tell you

00:29:04,600 --> 00:29:09,610
where it's coming from right and then if

00:29:06,909 --> 00:29:13,450
I went and said you know this

00:29:09,610 --> 00:29:15,490
oh cool

00:29:13,450 --> 00:29:16,840
there's a bash session that's generating

00:29:15,490 --> 00:29:19,360
these maybe I should kill that off or

00:29:16,840 --> 00:29:25,299
investigate where it is in the tree so

00:29:19,360 --> 00:29:26,919
that is what that is for okay now we got

00:29:25,299 --> 00:29:30,250
we're getting closer and closer to the

00:29:26,919 --> 00:29:33,250
really really fun stuff so we're gonna

00:29:30,250 --> 00:29:34,570
go and spy on someone it's gonna be me

00:29:33,250 --> 00:29:37,630
but we're gonna we're gonna pretend

00:29:34,570 --> 00:29:39,309
we're spying on somebody else so we're

00:29:37,630 --> 00:29:40,750
gonna snoop on another session on the

00:29:39,309 --> 00:29:43,659
Linux machine let's say this is a jump

00:29:40,750 --> 00:29:46,929
host and you want to figure out what

00:29:43,659 --> 00:29:52,600
people are doing in real time so first

00:29:46,929 --> 00:29:56,380
off we're gonna go ahead let me clear

00:29:52,600 --> 00:29:57,909
this and this so I'm gonna look for the

00:29:56,380 --> 00:29:58,929
I'm gonna create the process tree

00:29:57,909 --> 00:30:03,490
everything that's happening on the

00:29:58,929 --> 00:30:12,669
system and then we're gonna go and

00:30:03,490 --> 00:30:15,490
filter for everything and pts now the

00:30:12,669 --> 00:30:19,179
reason why I'm doing this is then I can

00:30:15,490 --> 00:30:21,669
see it in color so if I look here in red

00:30:19,179 --> 00:30:27,190
I can see okay I have a def pts zero and

00:30:21,669 --> 00:30:29,080
a pts one so what's this one okay so

00:30:27,190 --> 00:30:31,330
this is def pts zero so I want to trace

00:30:29,080 --> 00:30:33,490
that one I want to trace the the bottom

00:30:31,330 --> 00:30:38,679
one and I'm gonna I'm going to perform

00:30:33,490 --> 00:30:41,789
the tracing using the top so let's see

00:30:38,679 --> 00:30:41,789
TTY snoop

00:30:45,380 --> 00:30:50,720
dev pts zero

00:31:01,849 --> 00:31:07,169
now when you tried it when you do it in

00:31:03,989 --> 00:31:13,799
a text editor you know it it kind of

00:31:07,169 --> 00:31:16,080
works but yeah you you can trace

00:31:13,799 --> 00:31:19,440
people's activities which is kind of

00:31:16,080 --> 00:31:24,719
scary to think about it but I thought it

00:31:19,440 --> 00:31:26,639
was cool yeah I mean if you have root

00:31:24,719 --> 00:31:27,779
you you you should be able to do these

00:31:26,639 --> 00:31:29,249
things well I can't you do these things

00:31:27,779 --> 00:31:31,489
it's just like the movies now we live in

00:31:29,249 --> 00:31:31,489
the future

00:31:32,059 --> 00:31:36,719
and now we can spy on all the user

00:31:35,369 --> 00:31:39,179
sessions because if we can just spy on

00:31:36,719 --> 00:31:42,479
one why can't we splat on everybody so

00:31:39,179 --> 00:31:45,269
there's - read line and what it's going

00:31:42,479 --> 00:31:47,009
to do behind the scenes it's actually

00:31:45,269 --> 00:31:49,409
looking for the system called exec ve

00:31:47,009 --> 00:31:51,359
which is the system called for run this

00:31:49,409 --> 00:31:52,799
program at this path so we're gonna run

00:31:51,359 --> 00:31:54,330
that and then I'm gonna start typing in

00:31:52,799 --> 00:31:54,889
some stuff and then we'll see what it

00:31:54,330 --> 00:31:58,589
does

00:31:54,889 --> 00:32:07,440
so bash read line okay so now I'm

00:31:58,589 --> 00:32:09,320
tracing all right mm-hmm why are we not

00:32:07,440 --> 00:32:19,950
doing that oh there we go

00:32:09,320 --> 00:32:22,469
all right so okay great yeah so every so

00:32:19,950 --> 00:32:23,940
if I had a multi-user system here if I

00:32:22,469 --> 00:32:25,289
ran this on a jump post and people were

00:32:23,940 --> 00:32:26,369
actively working you could see all the

00:32:25,289 --> 00:32:30,049
commands that are being executed by

00:32:26,369 --> 00:32:35,339
people in real time which is scary but

00:32:30,049 --> 00:32:37,529
fun okay so let's let's let's go even

00:32:35,339 --> 00:32:41,399
further wouldn't it be interesting to

00:32:37,529 --> 00:32:44,099
spy on encrypted traffic because because

00:32:41,399 --> 00:32:47,460
you can now now to be fair we're not

00:32:44,099 --> 00:32:51,570
actually like you know intercepting a

00:32:47,460 --> 00:32:52,799
certificate and going and you know doing

00:32:51,570 --> 00:32:54,210
banned the middle this isn't much it's

00:32:52,799 --> 00:32:59,399
just much more simple what we're doing

00:32:54,210 --> 00:33:02,489
really is when you're doing SSL you're

00:32:59,399 --> 00:33:04,769
there's calls SSL right an SSL read so

00:33:02,489 --> 00:33:06,179
when you when you make your call to SSL

00:33:04,769 --> 00:33:07,589
right you're providing an argument which

00:33:06,179 --> 00:33:08,730
is the data you're trying to encrypt and

00:33:07,589 --> 00:33:10,890
the necessary

00:33:08,730 --> 00:33:14,520
what you're returning is a day today is

00:33:10,890 --> 00:33:16,350
being decrypted so what this does is it

00:33:14,520 --> 00:33:18,000
intercepts those two and then prints out

00:33:16,350 --> 00:33:29,430
what you have so we're gonna go ahead

00:33:18,000 --> 00:33:34,220
and run SSL sniff okay and then I'm

00:33:29,430 --> 00:33:36,000
gonna go ahead and run w get my website

00:33:34,220 --> 00:33:38,420
actually you need to make sure it's

00:33:36,000 --> 00:33:38,420
HTTPS

00:33:43,780 --> 00:33:52,190
so there's the get request apparently

00:33:50,660 --> 00:33:55,640
this was what was encrypted and sent

00:33:52,190 --> 00:33:57,530
over the wire this is what we got back

00:33:55,640 --> 00:34:00,020
yes I know I'm not hosting my website

00:33:57,530 --> 00:34:05,630
under bullets on s38 static assets and

00:34:00,020 --> 00:34:08,090
then the actual response so yeah you can

00:34:05,630 --> 00:34:12,159
kind of nuke encrypted traffic on a

00:34:08,090 --> 00:34:12,159
server okay

00:34:14,530 --> 00:34:24,530
so how are we doing on time so in

00:34:20,360 --> 00:34:27,710
summary uh perfidy BPF are pretty

00:34:24,530 --> 00:34:29,119
awesome I hope you think so now you can

00:34:27,710 --> 00:34:32,090
see more details on Linux server

00:34:29,119 --> 00:34:34,129
activities and ever before and you can

00:34:32,090 --> 00:34:36,950
install them and use you know install

00:34:34,129 --> 00:34:38,360
and run these tools today one big piece

00:34:36,950 --> 00:34:40,580
of advice that I'll tell anybody because

00:34:38,360 --> 00:34:44,590
I am a operator by trade test and non

00:34:40,580 --> 00:34:48,860
production first and finally have fun

00:34:44,590 --> 00:34:51,500
further reading um Brendon Greg he's uh

00:34:48,860 --> 00:34:53,750
the performance engineer at Netflix that

00:34:51,500 --> 00:34:55,730
inspired a lot of this content he's a

00:34:53,750 --> 00:34:58,250
very very smart fellow much more smart

00:34:55,730 --> 00:35:02,060
than me he wrote a book on this and it's

00:34:58,250 --> 00:35:04,070
like 700 pages and I mean it's probably

00:35:02,060 --> 00:35:06,020
a really good blunt weapon but

00:35:04,070 --> 00:35:07,070
definitely order it online if you're

00:35:06,020 --> 00:35:08,570
interested in this stuff because he'll

00:35:07,070 --> 00:35:10,520
tell you everything about these tools

00:35:08,570 --> 00:35:12,670
and practically every permutation Under

00:35:10,520 --> 00:35:14,780
the Sun to understand your systems

00:35:12,670 --> 00:35:19,040
there's also you know on the kernel.org

00:35:14,780 --> 00:35:21,080
the events reference site and github

00:35:19,040 --> 00:35:23,450
project for BCC which has references and

00:35:21,080 --> 00:35:24,410
all the tools and then Julia Evans I'll

00:35:23,450 --> 00:35:28,060
definitely give her a shout out because

00:35:24,410 --> 00:35:30,440
she wrote this really cool perché sheet

00:35:28,060 --> 00:35:31,640
that has a bunch of commands that you

00:35:30,440 --> 00:35:34,520
can just print out and put out your desk

00:35:31,640 --> 00:35:36,050
and then again learn learn some syscalls

00:35:34,520 --> 00:35:37,010
they're really fun you can run man to

00:35:36,050 --> 00:35:38,930
syscalls and we'll give you the whole

00:35:37,010 --> 00:35:41,060
table and then you can run man 2 on the

00:35:38,930 --> 00:35:44,869
actual cisco name and read up about all

00:35:41,060 --> 00:35:46,070
that stuff anyway I definitely

00:35:44,869 --> 00:35:48,050
appreciate your time this has been

00:35:46,070 --> 00:35:51,939
awesome thank you so much

00:35:48,050 --> 00:35:51,939
[Applause]

00:35:54,900 --> 00:36:05,650
with the remaining time do we have any

00:35:57,780 --> 00:36:07,120
question sure yeah microphone the

00:36:05,650 --> 00:36:11,710
microphone the microphone picks up for

00:36:07,120 --> 00:36:13,240
my yes yeah um so I am when you rent

00:36:11,710 --> 00:36:14,590
rough status I was surprised to see it

00:36:13,240 --> 00:36:16,330
as it was 12 executions

00:36:14,590 --> 00:36:18,700
I was curious if you could turn on execs

00:36:16,330 --> 00:36:21,010
new and then run draw status to see what

00:36:18,700 --> 00:36:21,550
those 12 executions were shoot that's

00:36:21,010 --> 00:36:28,350
fun

00:36:21,550 --> 00:36:32,980
do it alright so we have the exact snoop

00:36:28,350 --> 00:36:36,700
jump and then we had the let me go back

00:36:32,980 --> 00:36:41,650
in the thing and get the commands it was

00:36:36,700 --> 00:36:43,150
really early on oh yeah we just run

00:36:41,650 --> 00:36:46,590
regular dress status okay

00:36:43,150 --> 00:36:46,590
yeah that's what we're asking for

00:36:50,290 --> 00:37:02,180
okay you know what it might be I wonder

00:36:59,359 --> 00:37:04,070
I wonder if the processes that are being

00:37:02,180 --> 00:37:08,119
executed like xxxx snoop

00:37:04,070 --> 00:37:10,640
I think exec snoop doesn't monitor force

00:37:08,119 --> 00:37:11,869
like like threading where it's executing

00:37:10,640 --> 00:37:12,770
things under a process tree cuz

00:37:11,869 --> 00:37:14,030
otherwise you get a little bunch of

00:37:12,770 --> 00:37:16,369
stuff there might be reason why we're

00:37:14,030 --> 00:37:18,050
getting so few well it was also the on

00:37:16,369 --> 00:37:19,609
the others like the grep - bee and those

00:37:18,050 --> 00:37:22,609
other so there's probably grab processes

00:37:19,609 --> 00:37:24,109
and things yeah totally yeah absolutely

00:37:22,609 --> 00:37:38,170
excellent question

00:37:24,109 --> 00:37:38,170
any others let's try it

00:37:39,849 --> 00:37:49,000
alright cool so I am like okay so let's

00:37:45,320 --> 00:37:51,710
yeah let's try this so we're gonna okay

00:37:49,000 --> 00:37:54,560
all right so we're gonna TTY snoop okay

00:37:51,710 --> 00:37:57,440
so now if I just you know if someone

00:37:54,560 --> 00:37:58,880
wrote a program that didn't properly

00:37:57,440 --> 00:38:00,500
handle passwords and I typed anything

00:37:58,880 --> 00:38:04,180
it's gonna get anything obviously but I

00:38:00,500 --> 00:38:06,410
wonder what happen if I typed in like

00:38:04,180 --> 00:38:09,200
well actually no the problem is if I run

00:38:06,410 --> 00:38:11,720
sudo su it's just gonna give it to me so

00:38:09,200 --> 00:38:13,609
hold on a minute okay well yeah I'll

00:38:11,720 --> 00:38:16,849
just uh to do we're just gonna we're

00:38:13,609 --> 00:38:19,450
just gonna take away my yeah all right

00:38:16,849 --> 00:38:19,450
we're just gonna move this

00:38:21,330 --> 00:38:26,700
or HTTP password to create managed to be

00:38:25,530 --> 00:38:28,110
alright

00:38:26,700 --> 00:38:29,340
Oh true yeah I could have could have

00:38:28,110 --> 00:38:32,370
done that as well all right but I

00:38:29,340 --> 00:38:33,930
disabled I disabled my ability to see

00:38:32,370 --> 00:38:42,410
you do without password so if I do this

00:38:33,930 --> 00:38:45,050
oh wow it doesn't work so that's good um

00:38:42,410 --> 00:38:50,070
that's really really good but if you

00:38:45,050 --> 00:38:53,190
yeah yeah that's alright but uh there we

00:38:50,070 --> 00:38:57,390
go any any other questions I'm relieved

00:38:53,190 --> 00:39:00,180
that that doesn't work the more I know

00:38:57,390 --> 00:39:02,220
the more scared I become any other

00:39:00,180 --> 00:39:06,540
questions don't be shy this is a fun

00:39:02,220 --> 00:39:07,890
topic alright well again thank you so

00:39:06,540 --> 00:39:17,130
much

00:39:07,890 --> 00:39:17,130

YouTube URL: https://www.youtube.com/watch?v=86lHTLB6fNo


