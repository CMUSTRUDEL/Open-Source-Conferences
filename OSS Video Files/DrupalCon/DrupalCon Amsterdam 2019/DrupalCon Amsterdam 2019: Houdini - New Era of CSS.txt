Title: DrupalCon Amsterdam 2019: Houdini - New Era of CSS
Publication date: 2019-10-29
Playlist: DrupalCon Amsterdam 2019
Description: 
	Vidit Anjaria, Saket Kumar
QED42, Pune, India

Now the hooks of the CSS are made public. Doesnâ€™t it sound cool that from now we can create our own style property?

We would be able to extend the CSS using Javascript, it is very important as currently we are unable to extend CSS using Javascript.

CSS Houdini will let authors hook in to the actual CSS engine, which allows to extend CSS and that at CSS speeds.

Houdini - provides bunch of APIs which will be helpful to create own properties

What you will get?
1. What is houdini?
2. What is rendering pipeline? What falls under it?
3. Which are the major API being provided?
4. Which are the other small APIs?
5. What is Worklets?
6. What is TypedOM?
7. More information on Paint, Animation & Layout API.
8. How to create custom properties?
9. Usage of Houdini V/S Canvas?
10. Demo
Captions: 
	00:00:00,000 --> 00:00:07,890
the terms what is the meaning of Houdini

00:00:03,620 --> 00:00:12,330
yes correct that correct so a magician

00:00:07,890 --> 00:00:16,170
who was hard to escape so escaping means

00:00:12,330 --> 00:00:20,189
not to run away just to break the loop

00:00:16,170 --> 00:00:22,769
and come out so Houdini though with the

00:00:20,189 --> 00:00:24,269
Caesars OD maybe we would try to do the

00:00:22,769 --> 00:00:26,730
same things we will break the chain

00:00:24,269 --> 00:00:30,929
process and will come out and will apply

00:00:26,730 --> 00:00:35,040
some magic so moving to the next so what

00:00:30,929 --> 00:00:37,829
is CSS Moody so CSS Houdini is a set of

00:00:35,040 --> 00:00:39,870
api's using which we can hook the

00:00:37,829 --> 00:00:43,050
browser CSS engine and we can register

00:00:39,870 --> 00:00:46,230
our own property with it so isn't it

00:00:43,050 --> 00:00:48,270
cool thing that the property which we

00:00:46,230 --> 00:00:51,210
would register that has some meaning and

00:00:48,270 --> 00:00:57,149
using we can use that property as our

00:00:51,210 --> 00:00:59,820
own property living in the CSS so so

00:00:57,149 --> 00:01:02,850
which are those API is which are

00:00:59,820 --> 00:01:07,680
available with the CSS Houdini and can

00:01:02,850 --> 00:01:12,350
be targeted typed oh maybe I properties

00:01:07,680 --> 00:01:16,830
and values API paint API layout API

00:01:12,350 --> 00:01:18,750
animation API parcel API and up front

00:01:16,830 --> 00:01:21,210
for matrix appeal so these are the seven

00:01:18,750 --> 00:01:24,420
core a core core API which are available

00:01:21,210 --> 00:01:28,350
and which can be accessible with the

00:01:24,420 --> 00:01:30,780
JavaScript so before jumping or all

00:01:28,350 --> 00:01:32,189
together to the CSS Houdini before we

00:01:30,780 --> 00:01:35,040
should under before that we should

00:01:32,189 --> 00:01:37,200
understand that how the CSS and CSS

00:01:35,040 --> 00:01:39,750
works how the rendering pipeline works

00:01:37,200 --> 00:01:42,930
so I think socket now socket will

00:01:39,750 --> 00:01:44,640
explain you that how that CSS CSS works

00:01:42,930 --> 00:01:46,939
and rendering pipeline works forward to

00:01:44,640 --> 00:01:50,610
you socket can give it

00:01:46,939 --> 00:01:53,729
hello there so yeah we'll be talking

00:01:50,610 --> 00:01:59,670
about how basically when we load our

00:01:53,729 --> 00:02:01,710
page how CSS applies to note and how we

00:01:59,670 --> 00:02:04,560
see like what we see on the screen how

00:02:01,710 --> 00:02:05,100
it is main process and made by the

00:02:04,560 --> 00:02:08,569
browsers

00:02:05,100 --> 00:02:12,629
so basically when a link is accessed

00:02:08,569 --> 00:02:13,230
browser pause and the glutes HTML throw

00:02:12,629 --> 00:02:17,239
Internet

00:02:13,230 --> 00:02:21,030
and it passes it creates a boundary and

00:02:17,239 --> 00:02:25,110
then it passes the CSS with it and

00:02:21,030 --> 00:02:29,970
creates a CSS taunton now CS is Dom it

00:02:25,110 --> 00:02:32,340
it holds all the styling of those Dom

00:02:29,970 --> 00:02:37,040
nodes which is there in the DOM and now

00:02:32,340 --> 00:02:40,110
we have few phases few steps basically

00:02:37,040 --> 00:02:42,750
layering compositing and painting so

00:02:40,110 --> 00:02:47,700
that of that everything is visible on on

00:02:42,750 --> 00:02:50,940
the screen now here we can we can see

00:02:47,700 --> 00:02:53,879
how Houdini helps us in this layout

00:02:50,940 --> 00:02:57,720
engine CSS layout engine what it does it

00:02:53,879 --> 00:03:01,109
it gives us API is to hook into CSS

00:02:57,720 --> 00:03:04,950
engine to create these properties so

00:03:01,109 --> 00:03:09,000
that we can like add more

00:03:04,950 --> 00:03:13,400
functionalities at using those api's and

00:03:09,000 --> 00:03:17,810
hook into this CSS engine itself okay so

00:03:13,400 --> 00:03:23,910
and now you might be thinking that why

00:03:17,810 --> 00:03:27,299
why CSS because nowadays like every one

00:03:23,910 --> 00:03:30,569
of us know NAT D RJ is polyfills which

00:03:27,299 --> 00:03:31,950
would allow us to just go and create

00:03:30,569 --> 00:03:35,569
them in that functionality for example

00:03:31,950 --> 00:03:38,400
ie it doesn't have that around it

00:03:35,569 --> 00:03:39,750
rounded borders now if we want that

00:03:38,400 --> 00:03:42,120
functionality we can just create a

00:03:39,750 --> 00:03:44,519
polyfill out of it and then apply that

00:03:42,120 --> 00:03:50,549
on our browser if our client demand set

00:03:44,519 --> 00:03:54,180
but why not to use polyfills and use CSS

00:03:50,549 --> 00:03:58,049
Houdini is for time so to to address

00:03:54,180 --> 00:04:02,129
that I'll go back to our rendering

00:03:58,049 --> 00:04:04,950
pipeline where it we will once the

00:04:02,129 --> 00:04:08,790
parser is done and dom dom trees are

00:04:04,950 --> 00:04:12,419
made we have this layout paint and

00:04:08,790 --> 00:04:15,419
composing composite phases these steps

00:04:12,419 --> 00:04:19,549
happen and then things appear on screen

00:04:15,419 --> 00:04:23,250
now this is the time when our job jace

00:04:19,549 --> 00:04:26,310
polyfills will be called and it will

00:04:23,250 --> 00:04:28,380
again run the J's and then

00:04:26,310 --> 00:04:33,060
create that functionality and then we'll

00:04:28,380 --> 00:04:37,290
have to rerun rego these steps to

00:04:33,060 --> 00:04:39,000
basically see that changes in our

00:04:37,290 --> 00:04:43,230
browser which we want through J's

00:04:39,000 --> 00:04:45,840
polyfills and so you see the loop

00:04:43,230 --> 00:04:47,790
happens twice to just bring in that one

00:04:45,840 --> 00:04:49,860
functionality that's what we don't want

00:04:47,790 --> 00:04:52,830
because it please definitely looks like

00:04:49,860 --> 00:04:55,950
a hack and definitely it's not very

00:04:52,830 --> 00:04:58,650
performant now if we when we use CSS

00:04:55,950 --> 00:05:02,760
Houdini APs it will allow us to hook it

00:04:58,650 --> 00:05:06,440
hook at the same CSS ohm and basically

00:05:02,760 --> 00:05:10,669
CSS engine place and it will allow us to

00:05:06,440 --> 00:05:15,060
create that property and it will just

00:05:10,669 --> 00:05:18,860
let us to run this step only once not

00:05:15,060 --> 00:05:22,410
twice as in case of so this this is one

00:05:18,860 --> 00:05:25,620
this is one useless like this is one

00:05:22,410 --> 00:05:28,950
advantage of CSS soudanese Houdini ApS

00:05:25,620 --> 00:05:30,840
now so we'll it will talk more about

00:05:28,950 --> 00:05:35,460
other challenges as a front-end

00:05:30,840 --> 00:05:39,660
developer which we face sir so thank

00:05:35,460 --> 00:05:42,090
circuits so nothing is impossible with

00:05:39,660 --> 00:05:45,270
with J's so a socket said that we can

00:05:42,090 --> 00:05:47,370
write J's polyfills and we can fetch you

00:05:45,270 --> 00:05:49,500
whatever we want but they're our biggest

00:05:47,370 --> 00:05:50,700
front-end developer how many of you have

00:05:49,500 --> 00:05:53,190
front-end ever I would like to know

00:05:50,700 --> 00:05:56,490
first of all that of that gree

00:05:53,190 --> 00:05:59,430
so being a front-end developer there are

00:05:56,490 --> 00:06:01,229
certain challenges which I see to apply

00:05:59,430 --> 00:06:02,940
so there are one one of the challenge is

00:06:01,229 --> 00:06:04,800
connect gradient so there is a CSS

00:06:02,940 --> 00:06:08,729
property to apply the connect gradient

00:06:04,800 --> 00:06:11,810
but it is not very well supported by the

00:06:08,729 --> 00:06:13,590
browser's much of the browser's like I

00:06:11,810 --> 00:06:19,850
don't think so that it has been

00:06:13,590 --> 00:06:23,580
supported by Mozilla and apart from that

00:06:19,850 --> 00:06:25,620
checkbox and radio button so to override

00:06:23,580 --> 00:06:27,350
the traditional checkbox and radio

00:06:25,620 --> 00:06:31,530
buttons it is really challenging part

00:06:27,350 --> 00:06:33,500
moreover Watership so traditionally we

00:06:31,530 --> 00:06:36,539
can apply the border radius to the

00:06:33,500 --> 00:06:37,290
container but what if we want to apply a

00:06:36,539 --> 00:06:39,660
keyword

00:06:37,290 --> 00:06:41,880
in what water it is or let's say I was

00:06:39,660 --> 00:06:44,220
scooped up scoop on the radius or we

00:06:41,880 --> 00:06:47,220
want to cut the edge edge from that

00:06:44,220 --> 00:06:49,650
container so such kind of water remove

00:06:47,220 --> 00:06:54,360
order properties and border shapes are

00:06:49,650 --> 00:06:55,890
not available and this one of the useful

00:06:54,360 --> 00:06:57,860
thing is tool tip that totally

00:06:55,890 --> 00:07:01,230
functionality traditionally what we do

00:06:57,860 --> 00:07:03,840
usually what we do we create we use that

00:07:01,230 --> 00:07:06,630
sugar element so before and after them

00:07:03,840 --> 00:07:12,150
using the border shape we created tool T

00:07:06,630 --> 00:07:14,280
but using this using CSS Houdini the

00:07:12,150 --> 00:07:17,070
solution of these four challenges is a

00:07:14,280 --> 00:07:20,100
painted PL so using the plane API we can

00:07:17,070 --> 00:07:23,310
overcome this anything about demo I will

00:07:20,100 --> 00:07:26,820
show you some of the thing apart from

00:07:23,310 --> 00:07:30,360
that if we talk about in terms of layout

00:07:26,820 --> 00:07:33,750
then one of the challenge is a mosaic

00:07:30,360 --> 00:07:35,610
layout so so that challenge also can be

00:07:33,750 --> 00:07:37,100
overcome using a layout API so what is

00:07:35,610 --> 00:07:40,350
most likely out supposedly out is

00:07:37,100 --> 00:07:42,360
dividing the your container in a column

00:07:40,350 --> 00:07:46,380
and based on the height of the elements

00:07:42,360 --> 00:07:48,060
it will just you know each columns so so

00:07:46,380 --> 00:07:51,630
using the layout API we can easily

00:07:48,060 --> 00:07:54,030
create mosaic layout and animated

00:07:51,630 --> 00:07:57,750
created how many of you try to animate

00:07:54,030 --> 00:08:01,230
the gradient on over was it working

00:07:57,750 --> 00:08:05,670
smoothly no so I just quickly show you

00:08:01,230 --> 00:08:07,470
that how can we do that and with the CSS

00:08:05,670 --> 00:08:10,020
would really be that is actually

00:08:07,470 --> 00:08:15,390
achievable so I will give you I will

00:08:10,020 --> 00:08:17,970
show that to traditional way and so

00:08:15,390 --> 00:08:19,350
first what I did I just apply the linear

00:08:17,970 --> 00:08:19,800
gradient with the yellow and dark blue

00:08:19,350 --> 00:08:22,680
color

00:08:19,800 --> 00:08:29,220
and on over I am trying to override it

00:08:22,680 --> 00:08:31,800
with this code is visible okay yeah so

00:08:29,220 --> 00:08:34,830
and on what I am trying to change the

00:08:31,800 --> 00:08:36,990
color linear gradient of that yellow to

00:08:34,830 --> 00:08:39,419
orange and when I am trying to explain

00:08:36,990 --> 00:08:40,140
it anyone I have mentioned the

00:08:39,419 --> 00:08:42,810
transition

00:08:40,140 --> 00:08:45,870
property as well though the color is not

00:08:42,810 --> 00:08:46,320
getting so changed with the transition

00:08:45,870 --> 00:08:50,340
effect

00:08:46,320 --> 00:08:50,920
okay now someone would might think that

00:08:50,340 --> 00:08:55,029
I

00:08:50,920 --> 00:08:58,060
in terms of jzs like thing our jQuery

00:08:55,029 --> 00:09:00,670
then we can define our variable so but

00:08:58,060 --> 00:09:05,589
we have defined our CSS variables EA and

00:09:00,670 --> 00:09:08,410
try to overwrite that with the secondary

00:09:05,589 --> 00:09:08,860
variable and if we try to do that as

00:09:08,410 --> 00:09:11,889
well

00:09:08,860 --> 00:09:13,779
it won't work so because browser is not

00:09:11,889 --> 00:09:17,889
an Bowser and descend some property not

00:09:13,779 --> 00:09:23,500
the value so what we what we can do to

00:09:17,889 --> 00:09:25,839
achieve this so we can register the

00:09:23,500 --> 00:09:28,269
property so then now colorprimary would

00:09:25,839 --> 00:09:33,970
become a property with the syntax of

00:09:28,269 --> 00:09:35,500
color and where we can define now the

00:09:33,970 --> 00:09:37,899
syntax of the color so currently I

00:09:35,500 --> 00:09:41,279
already find that context there are the

00:09:37,899 --> 00:09:45,670
multiples in Texas available like image

00:09:41,279 --> 00:09:48,279
percentage and a number so there are

00:09:45,670 --> 00:09:51,010
more available with the properties and

00:09:48,279 --> 00:09:54,399
values API so right now I am not

00:09:51,010 --> 00:09:57,310
mentioning any color away and I will

00:09:54,399 --> 00:10:02,620
just keep it transparent and I will try

00:09:57,310 --> 00:10:04,890
to override it from the CS CSS so I will

00:10:02,620 --> 00:10:04,890
return

00:10:05,080 --> 00:10:08,149
[Music]

00:10:09,880 --> 00:10:16,280
so if I try to overwrite this so here

00:10:13,490 --> 00:10:19,790
you can see the animation so the

00:10:16,280 --> 00:10:22,130
animation gradient can be possible with

00:10:19,790 --> 00:10:27,530
this so this is the beauty of CSS so

00:10:22,130 --> 00:10:29,210
dealing guys is a cool thing and so now

00:10:27,530 --> 00:10:30,920
the property which I have registered it

00:10:29,210 --> 00:10:32,930
has some meaning so it has the meaning

00:10:30,920 --> 00:10:35,200
that this is the primal kind of color

00:10:32,930 --> 00:10:38,210
and this is going to be changed but

00:10:35,200 --> 00:10:41,180
before jumping to the next API that is

00:10:38,210 --> 00:10:42,560
type of API I would explain that what

00:10:41,180 --> 00:10:44,960
would be the default is the difference

00:10:42,560 --> 00:10:47,600
between properties and values API in a

00:10:44,960 --> 00:10:50,810
high quality API so properties and

00:10:47,600 --> 00:10:53,540
values API are not strong type so let's

00:10:50,810 --> 00:10:57,800
say what is compact so if I define the

00:10:53,540 --> 00:10:59,390
initial value oh yeah and I'm I'm just

00:10:57,800 --> 00:11:02,450
making any mistake over here or not

00:10:59,390 --> 00:11:05,570
actually in any color those tac SS won't

00:11:02,450 --> 00:11:08,180
stop working it will work so this is not

00:11:05,570 --> 00:11:12,260
strongly type checked but what happened

00:11:08,180 --> 00:11:15,920
with a type of a period so I personally

00:11:12,260 --> 00:11:21,170
call this type of API as a typed awesome

00:11:15,920 --> 00:11:24,230
API so what happened when we write CSS

00:11:21,170 --> 00:11:26,780
code what happened at that at the time

00:11:24,230 --> 00:11:29,360
of passing it up the stream based

00:11:26,780 --> 00:11:31,520
projects happen it will pass your code

00:11:29,360 --> 00:11:33,650
and check that whether it is a class

00:11:31,520 --> 00:11:36,590
then it should be a dot and the string

00:11:33,650 --> 00:11:39,320
name and the open curly braces property

00:11:36,590 --> 00:11:42,670
name with co-learning values so it looks

00:11:39,320 --> 00:11:45,980
little bit weird and awkward to us so

00:11:42,670 --> 00:11:48,710
when we use the type Dom API and will be

00:11:45,980 --> 00:11:51,080
tough when we try to fetch the value of

00:11:48,710 --> 00:11:52,850
that particular element music the title

00:11:51,080 --> 00:11:58,460
may PL will get the structure data

00:11:52,850 --> 00:12:00,350
output in a computed values so not just

00:11:58,460 --> 00:12:03,740
because we are getting the structured

00:12:00,350 --> 00:12:05,720
data and computed values when we target

00:12:03,740 --> 00:12:08,450
in a particular element that's because

00:12:05,720 --> 00:12:10,580
the type know maybe is good but the

00:12:08,450 --> 00:12:14,660
leaner uses it is a strongly type and

00:12:10,580 --> 00:12:15,990
second oh I avoid deep scribe or have a

00:12:14,660 --> 00:12:20,430
screenshot of the

00:12:15,990 --> 00:12:22,650
or demo so so this is the demo so what

00:12:20,430 --> 00:12:26,040
I've done here so initially I've kept up

00:12:22,650 --> 00:12:30,090
all the box for box opacity to point to

00:12:26,040 --> 00:12:30,570
and at the bottom I have provided two

00:12:30,090 --> 00:12:32,730
buttons

00:12:30,570 --> 00:12:36,180
so without type doorman with typos or

00:12:32,730 --> 00:12:38,580
taking on the clicking on one of each

00:12:36,180 --> 00:12:44,340
button it will increase the opacity by

00:12:38,580 --> 00:12:46,710
point to sorry so so here you can see

00:12:44,340 --> 00:12:49,140
that when I'm execute when I'm trying to

00:12:46,710 --> 00:12:50,930
increase the opposite II so you can

00:12:49,140 --> 00:12:53,940
confer you can see the console messages

00:12:50,930 --> 00:12:54,990
showing me the performance time so that

00:12:53,940 --> 00:12:57,630
is point eight two nine nine

00:12:54,990 --> 00:12:59,790
milliseconds and when we try to execute

00:12:57,630 --> 00:13:01,950
the same thing with the type of the

00:12:59,790 --> 00:13:03,300
performance time is point five and

00:13:01,950 --> 00:13:06,030
believe me

00:13:03,300 --> 00:13:09,060
right now it's ready difference is very

00:13:06,030 --> 00:13:10,620
less but it's almost half but it really

00:13:09,060 --> 00:13:14,280
gives you the very good results when we

00:13:10,620 --> 00:13:17,520
use with the type of APN so this is the

00:13:14,280 --> 00:13:20,790
major major advantage of using the time

00:13:17,520 --> 00:13:23,340
domain behind and so there are other API

00:13:20,790 --> 00:13:29,700
is like paint API layout APN animation

00:13:23,340 --> 00:13:33,350
API but custom properties and type dome

00:13:29,700 --> 00:13:39,480
API is based on the strong type and

00:13:33,350 --> 00:13:42,810
loosely tied but the paint wait paint

00:13:39,480 --> 00:13:43,350
API layout API and animation API are the

00:13:42,810 --> 00:13:45,900
worklets

00:13:43,350 --> 00:13:47,820
so before jumping to those APNs we

00:13:45,900 --> 00:13:49,770
should understand that what is the

00:13:47,820 --> 00:13:51,330
difference between web vocals are we one

00:13:49,770 --> 00:13:55,710
service workers and there were plates

00:13:51,330 --> 00:14:00,240
and socket would explain you this this

00:13:55,710 --> 00:14:00,780
difference for to you socket thank you

00:14:00,240 --> 00:14:04,920
with it

00:14:00,780 --> 00:14:07,590
yep so or tella we talked about the two

00:14:04,920 --> 00:14:09,630
concepts of type Tom and custom creating

00:14:07,590 --> 00:14:15,530
custom properties now we are getting

00:14:09,630 --> 00:14:19,200
into more advanced and basically API

00:14:15,530 --> 00:14:21,930
which would talk about the browser

00:14:19,200 --> 00:14:24,360
concept and where we who can do or see

00:14:21,930 --> 00:14:28,590
it's a single now so before going there

00:14:24,360 --> 00:14:33,180
I'll talk about these web workers and

00:14:28,590 --> 00:14:36,510
worklets so to understand that we be all

00:14:33,180 --> 00:14:39,120
out from like web developers and we know

00:14:36,510 --> 00:14:41,550
that our browsers are single-threaded

00:14:39,120 --> 00:14:45,180
main main application with a single

00:14:41,550 --> 00:14:49,860
threaded single frame which carries on

00:14:45,180 --> 00:14:52,080
all main activities right and and then

00:14:49,860 --> 00:14:56,910
workers are something which will have

00:14:52,080 --> 00:14:59,250
which will allow or to run more heavy

00:14:56,910 --> 00:15:01,110
performance heavy tasks on a separate

00:14:59,250 --> 00:15:03,390
thread rather than on the main thread

00:15:01,110 --> 00:15:06,210
and then workers are more specialized

00:15:03,390 --> 00:15:10,940
workers so to visualize this scenario

00:15:06,210 --> 00:15:13,860
I'll go and take an example of

00:15:10,940 --> 00:15:17,130
immigration which we go through when

00:15:13,860 --> 00:15:21,270
when we are travelling abroad so so so

00:15:17,130 --> 00:15:24,570
imagine that you have a counter with you

00:15:21,270 --> 00:15:27,390
have a immigration area only one counter

00:15:24,570 --> 00:15:30,000
is there so what will happen let huge

00:15:27,390 --> 00:15:33,030
line on or at a time only one person

00:15:30,000 --> 00:15:35,160
would be processed so everyone else has

00:15:33,030 --> 00:15:37,260
to wait till that background

00:15:35,160 --> 00:15:38,970
verification of that person happens and

00:15:37,260 --> 00:15:42,930
then he moves then the second person

00:15:38,970 --> 00:15:46,710
comes so at a time only one person one

00:15:42,930 --> 00:15:48,390
person is entertained but in second

00:15:46,710 --> 00:15:54,390
scenario where you have multiple

00:15:48,390 --> 00:15:55,620
counters for these immigration and so at

00:15:54,390 --> 00:15:57,720
a time as well

00:15:55,620 --> 00:16:00,660
counters are there those many number of

00:15:57,720 --> 00:16:03,800
people can be handled right basically

00:16:00,660 --> 00:16:07,589
they can be processed and your

00:16:03,800 --> 00:16:08,400
processing like it becomes more faster

00:16:07,589 --> 00:16:11,880
right

00:16:08,400 --> 00:16:14,430
and now take an example of a counter

00:16:11,880 --> 00:16:18,060
which like in European countries you

00:16:14,430 --> 00:16:19,709
have European passports taking care

00:16:18,060 --> 00:16:23,610
separately and then you have

00:16:19,709 --> 00:16:25,440
non-european counters which where we

00:16:23,610 --> 00:16:27,060
have specialized person for handling

00:16:25,440 --> 00:16:30,060
European passports and non-european

00:16:27,060 --> 00:16:34,380
passports so having these specialized

00:16:30,060 --> 00:16:39,600
persons you have this process to be more

00:16:34,380 --> 00:16:41,699
faster right so so taking like coming

00:16:39,600 --> 00:16:43,949
back to our here

00:16:41,699 --> 00:16:47,669
workers and worklets workers are like

00:16:43,949 --> 00:16:52,730
the like the separate trips which will

00:16:47,669 --> 00:16:55,439
carry out more like calculation of more

00:16:52,730 --> 00:16:57,600
heavy tasks on a separate thread and

00:16:55,439 --> 00:17:00,119
once it is done it will pass on the

00:16:57,600 --> 00:17:02,879
message to main thread which is General

00:17:00,119 --> 00:17:05,039
Manger it is generally we want to keep

00:17:02,879 --> 00:17:09,569
it non blocking because user activities

00:17:05,039 --> 00:17:12,179
has not like it should not stop and it

00:17:09,569 --> 00:17:15,720
should carry on and both weights are

00:17:12,179 --> 00:17:18,720
again they are similar to workers but

00:17:15,720 --> 00:17:21,329
with a more specialized functionality in

00:17:18,720 --> 00:17:25,019
CSS Houdini we have worklets for

00:17:21,329 --> 00:17:25,589
animation API animations for layouts for

00:17:25,019 --> 00:17:29,039
paint

00:17:25,589 --> 00:17:31,230
so these booklets are specified like

00:17:29,039 --> 00:17:34,409
they have specific role of doing these

00:17:31,230 --> 00:17:37,860
functionalities and we use this API to

00:17:34,409 --> 00:17:42,690
hook into these processes and create our

00:17:37,860 --> 00:17:48,929
functionality like so I'll go to layout

00:17:42,690 --> 00:17:51,570
API first right here layout appears it

00:17:48,929 --> 00:17:53,490
helps us to define our own custom

00:17:51,570 --> 00:17:56,370
display properties like currently we

00:17:53,490 --> 00:17:59,700
have only a few defined displayed

00:17:56,370 --> 00:18:04,289
properties like block inline flex grid

00:17:59,700 --> 00:18:06,690
so now we have which houdini's layout

00:18:04,289 --> 00:18:09,710
api will have the power to define our

00:18:06,690 --> 00:18:12,419
own custom properties custom layouts

00:18:09,710 --> 00:18:17,970
which whether it was talking about like

00:18:12,419 --> 00:18:19,950
having a Masanori grid as a layout so we

00:18:17,970 --> 00:18:23,820
can instead of going to JS and defining

00:18:19,950 --> 00:18:27,240
that in a non-pom will it's very slow

00:18:23,820 --> 00:18:30,389
and it it is not very performant and

00:18:27,240 --> 00:18:34,080
that's why we like to have a lot of jet

00:18:30,389 --> 00:18:38,389
arrays in current scenario but if we

00:18:34,080 --> 00:18:41,519
used if we define that through this

00:18:38,389 --> 00:18:45,630
layout API that would be more performant

00:18:41,519 --> 00:18:49,769
and more easier like even easier to

00:18:45,630 --> 00:18:54,570
define as well so and you can create

00:18:49,769 --> 00:18:55,059
your own spec like flex and grid or you

00:18:54,570 --> 00:19:00,039
can

00:18:55,059 --> 00:19:03,100
define your own spec so I'll talk more

00:19:00,039 --> 00:19:06,309
about what layout API has plate layout

00:19:03,100 --> 00:19:10,299
API when we define our own custom layout

00:19:06,309 --> 00:19:14,110
API layout custom layout it is applied

00:19:10,299 --> 00:19:17,889
to a particular element saying like

00:19:14,110 --> 00:19:21,309
display custom display this layout and

00:19:17,889 --> 00:19:23,259
then custom name so when we do it to a

00:19:21,309 --> 00:19:28,629
particular element it becomes a parent

00:19:23,259 --> 00:19:31,960
element and then that parent element is

00:19:28,629 --> 00:19:35,490
responsible to to hold that all

00:19:31,960 --> 00:19:38,590
children's and inside it you can imagine

00:19:35,490 --> 00:19:40,899
flex like Flitz is applied display flex

00:19:38,590 --> 00:19:43,559
is applied on a parent and then you have

00:19:40,899 --> 00:19:46,090
child elements as well and we have some

00:19:43,559 --> 00:19:50,470
child properties as well which goes on

00:19:46,090 --> 00:19:55,509
child so similarly so parent layout

00:19:50,470 --> 00:19:58,779
holds algorithm for complete parent and

00:19:55,509 --> 00:20:00,490
then it it has information likely of

00:19:58,779 --> 00:20:03,190
constraints and layout edges layout

00:20:00,490 --> 00:20:06,580
edges is collective information of the

00:20:03,190 --> 00:20:08,649
parent for scroll borders and pattern

00:20:06,580 --> 00:20:12,369
basically outer region of that parent

00:20:08,649 --> 00:20:14,019
and then after layout edges we are left

00:20:12,369 --> 00:20:17,049
with the layout constraint which is

00:20:14,019 --> 00:20:20,889
basically holding the is the remaining

00:20:17,049 --> 00:20:25,299
space which holds child elements right

00:20:20,889 --> 00:20:28,559
and each child is again it contains two

00:20:25,299 --> 00:20:32,649
information about the child layout

00:20:28,559 --> 00:20:36,100
layout child and the layout fragment so

00:20:32,649 --> 00:20:39,179
if we so this layout child whole say all

00:20:36,100 --> 00:20:43,179
CSS properties and styles my format and

00:20:39,179 --> 00:20:45,519
the second information is layout

00:20:43,179 --> 00:20:48,480
fragment which holds your information

00:20:45,519 --> 00:20:53,190
about the intrinsic size of that element

00:20:48,480 --> 00:20:55,869
child and it has again two information

00:20:53,190 --> 00:20:58,330
max content size and min content size

00:20:55,869 --> 00:21:00,669
basically giving the complete

00:20:58,330 --> 00:21:08,380
information about the size of the child

00:21:00,669 --> 00:21:12,639
right so when we when we define we have

00:21:08,380 --> 00:21:15,130
we have one redefined register it with

00:21:12,639 --> 00:21:17,549
the name of sample layout and then there

00:21:15,130 --> 00:21:21,009
is a class which holds all functions

00:21:17,549 --> 00:21:23,850
like all information about input child

00:21:21,009 --> 00:21:26,370
properties intrinsic size layout and

00:21:23,850 --> 00:21:31,720
constraint we will talk about it later

00:21:26,370 --> 00:21:34,899
now in more detail and so once we define

00:21:31,720 --> 00:21:38,519
it we registered it in our main main

00:21:34,899 --> 00:21:41,860
thread and in CSS we call it like this

00:21:38,519 --> 00:21:44,590
display layout and then sample layout so

00:21:41,860 --> 00:21:47,620
it will apply that this sample layout on

00:21:44,590 --> 00:21:51,990
to our element which we are calling okay

00:21:47,620 --> 00:22:00,039
so this is how layout API works now

00:21:51,990 --> 00:22:03,419
sorry going to animation if I'm making

00:22:00,039 --> 00:22:06,519
you sleepy beer with me for some time

00:22:03,419 --> 00:22:08,590
because so this is all theory part and

00:22:06,519 --> 00:22:10,360
when we go to demo it will be more

00:22:08,590 --> 00:22:17,769
interesting you will see everything in

00:22:10,360 --> 00:22:22,120
action right so with animation API there

00:22:17,769 --> 00:22:25,090
currently there are few of only few

00:22:22,120 --> 00:22:32,409
options which through which we can do

00:22:25,090 --> 00:22:35,049
animations in for example we have CSS

00:22:32,409 --> 00:22:39,429
transition we have CSS animations we

00:22:35,049 --> 00:22:40,750
have web animation API right and so

00:22:39,429 --> 00:22:43,059
these are the current solution available

00:22:40,750 --> 00:22:45,820
for animation stores and the problem

00:22:43,059 --> 00:22:49,990
with this these solutions is that they

00:22:45,820 --> 00:22:54,399
are stateless and time-based basically

00:22:49,990 --> 00:22:56,649
you if you want to have any user

00:22:54,399 --> 00:22:58,809
interactivity and then so basically all

00:22:56,649 --> 00:23:00,700
user interactivity will be just a

00:22:58,809 --> 00:23:02,500
trigger point you can't define your

00:23:00,700 --> 00:23:07,299
animation based on the user activity

00:23:02,500 --> 00:23:09,730
right for example like if if you've seen

00:23:07,299 --> 00:23:11,500
your mobile browsers they have address

00:23:09,730 --> 00:23:14,139
bar when you scroll down it just

00:23:11,500 --> 00:23:16,659
disappears and when you in between when

00:23:14,139 --> 00:23:19,210
you try to scroll up as soon as you try

00:23:16,659 --> 00:23:22,710
to scroll up it will it will reappear

00:23:19,210 --> 00:23:25,780
right this is this is an example of

00:23:22,710 --> 00:23:31,299
like user interaction based animation

00:23:25,780 --> 00:23:33,549
right it it not only looks at the user

00:23:31,299 --> 00:23:36,400
interaction like user activity of scroll

00:23:33,549 --> 00:23:40,000
it also maintains which direction user

00:23:36,400 --> 00:23:43,090
is scrolling like up or down based on if

00:23:40,000 --> 00:23:45,010
it is up it will show up show show up

00:23:43,090 --> 00:23:48,429
the address bar if it is down it will

00:23:45,010 --> 00:23:51,610
because it understands that use the user

00:23:48,429 --> 00:23:54,340
needs to see more more part of the page

00:23:51,610 --> 00:23:58,240
so it will it will remove that but so

00:23:54,340 --> 00:24:00,520
basically this is something a user like

00:23:58,240 --> 00:24:03,460
not time-based its user activity based

00:24:00,520 --> 00:24:06,990
animation right for example if you if we

00:24:03,460 --> 00:24:11,530
see this animation like see this video

00:24:06,990 --> 00:24:14,730
you see this pink block is being

00:24:11,530 --> 00:24:17,740
controlled by this scroll in that block

00:24:14,730 --> 00:24:20,620
happening in the block right now if we

00:24:17,740 --> 00:24:22,980
if you want to create these this kind of

00:24:20,620 --> 00:24:26,590
animation currently we don't have

00:24:22,980 --> 00:24:28,750
solution through existing animation like

00:24:26,590 --> 00:24:34,140
whatever animation option to be we have

00:24:28,750 --> 00:24:39,460
now Houdini gives us this like power to

00:24:34,140 --> 00:24:42,630
create these kind of animation and we'll

00:24:39,460 --> 00:24:46,480
see how it does it so it here we are

00:24:42,630 --> 00:24:49,590
like for the same scroll we are using in

00:24:46,480 --> 00:24:52,450
creating this animator sync scroller and

00:24:49,590 --> 00:24:54,910
registering a class for that sing

00:24:52,450 --> 00:25:00,669
scroller animator it takes it basically

00:24:54,910 --> 00:25:03,220
looks at two properties two things input

00:25:00,669 --> 00:25:07,240
properties and output properties input

00:25:03,220 --> 00:25:09,910
properties are something you it will

00:25:07,240 --> 00:25:15,880
watch if there is any change in there

00:25:09,910 --> 00:25:17,860
and if it note nodes if it gets this

00:25:15,880 --> 00:25:20,290
information that it there is some change

00:25:17,860 --> 00:25:22,720
in input properties it will trigger this

00:25:20,290 --> 00:25:26,260
class the functionality is written in

00:25:22,720 --> 00:25:29,110
this class so don't go this complex

00:25:26,260 --> 00:25:31,510
nothing like don't worry about this code

00:25:29,110 --> 00:25:33,429
I am just talking about so only two

00:25:31,510 --> 00:25:34,520
things we need to care about is input

00:25:33,429 --> 00:25:38,980
properties and

00:25:34,520 --> 00:25:42,830
properties input we watch the change and

00:25:38,980 --> 00:25:44,990
based on those change we process

00:25:42,830 --> 00:25:49,580
something and make changes in output

00:25:44,990 --> 00:25:54,080
properties which is applied and our CSS

00:25:49,580 --> 00:25:58,309
so so here we have main scroller and all

00:25:54,080 --> 00:26:00,410
screw or scroller basically the video

00:25:58,309 --> 00:26:03,950
which we shot which we saw the pink

00:26:00,410 --> 00:26:06,350
block was hearts crawler and the main

00:26:03,950 --> 00:26:08,780
scroller was the block where we had the

00:26:06,350 --> 00:26:12,380
scroll so when the user was scrolling it

00:26:08,780 --> 00:26:17,480
took as input the place the placement of

00:26:12,380 --> 00:26:20,420
the scrollbar and it it so this scroll

00:26:17,480 --> 00:26:23,059
type is what main scroller is watch and

00:26:20,420 --> 00:26:27,110
then it is being applied the output is

00:26:23,059 --> 00:26:29,420
being applied on all stroller so in our

00:26:27,110 --> 00:26:32,360
code we were just matching the position

00:26:29,420 --> 00:26:36,970
of the scroller and then we have we were

00:26:32,360 --> 00:26:42,670
applying the the same thing on the pink

00:26:36,970 --> 00:26:42,670
yeah so this is how animation UK votes

00:26:42,820 --> 00:26:48,190
I'll let with it talk about paint API

00:26:48,490 --> 00:26:57,910
thank circuit I don't actually touch see

00:26:53,120 --> 00:27:01,070
you see okay so a socket explained that

00:26:57,910 --> 00:27:03,740
how the element on layout and animation

00:27:01,070 --> 00:27:06,470
API works I would like to explain about

00:27:03,740 --> 00:27:13,040
the paint API so this is the these were

00:27:06,470 --> 00:27:14,929
just we can create paint API each code

00:27:13,040 --> 00:27:16,790
means the each part of coordinates of

00:27:14,929 --> 00:27:20,929
what should be written in HTML J's and

00:27:16,790 --> 00:27:23,330
CSS but before jumping into that and

00:27:20,929 --> 00:27:26,059
even can tell me that any element do you

00:27:23,330 --> 00:27:30,890
know which allows us to draw whatever we

00:27:26,059 --> 00:27:34,490
want on the HTML correct so paint API is

00:27:30,890 --> 00:27:37,340
as similar as a canvas so what we need

00:27:34,490 --> 00:27:40,610
to do we register

00:27:37,340 --> 00:27:42,919
we can register our paint worklet which

00:27:40,610 --> 00:27:44,790
we can invoke the name so this would be

00:27:42,919 --> 00:27:46,800
the name and this would be the

00:27:44,790 --> 00:27:49,610
which has some of the functionality

00:27:46,800 --> 00:27:54,720
written with the paper that class we

00:27:49,610 --> 00:27:58,830
include that register paint in the class

00:27:54,720 --> 00:28:01,590
with the paint worklet add module at

00:27:58,830 --> 00:28:04,370
module thing with the HTML so what it

00:28:01,590 --> 00:28:07,950
will do it will it will link with the

00:28:04,370 --> 00:28:09,810
main browser thread that the disturb

00:28:07,950 --> 00:28:12,450
paint has been written and it will link

00:28:09,810 --> 00:28:15,900
to the main browser thread and whatever

00:28:12,450 --> 00:28:18,300
the name we have mentioned to that

00:28:15,900 --> 00:28:22,740
whatever the name we have registered so

00:28:18,300 --> 00:28:26,250
that that will go with the CSS part with

00:28:22,740 --> 00:28:29,640
the background properties so I'll show

00:28:26,250 --> 00:28:33,360
you the quick demo about this so that is

00:28:29,640 --> 00:28:35,970
the one so CSS Houdini rocks anyone

00:28:33,360 --> 00:28:39,180
heard about serious CSS Houdini talks

00:28:35,970 --> 00:28:42,090
website anyone is aware of okay

00:28:39,180 --> 00:28:46,050
so CSS Houdini dogs has created this

00:28:42,090 --> 00:28:49,230
voltage using the CSS coding API paint

00:28:46,050 --> 00:28:52,020
API and I have just taken that code and

00:28:49,230 --> 00:28:54,690
I try to provide some of the support and

00:28:52,020 --> 00:28:59,040
I have extended it a little bit so

00:28:54,690 --> 00:29:02,700
currently the whole tape is in the right

00:28:59,040 --> 00:29:06,270
side direction so and when we change in

00:29:02,700 --> 00:29:07,920
the position of that toe tip position

00:29:06,270 --> 00:29:10,830
variable its you can see that it's

00:29:07,920 --> 00:29:15,000
working it's moving on the vertical side

00:29:10,830 --> 00:29:18,060
so now let's see what I have done so I

00:29:15,000 --> 00:29:21,300
am provided one of the variable that is

00:29:18,060 --> 00:29:23,660
a multi placement so if I change it to

00:29:21,300 --> 00:29:23,660
top

00:29:25,130 --> 00:29:32,990
I just need to change the border

00:29:29,950 --> 00:29:34,549
initialized property 200% to talk and

00:29:32,990 --> 00:29:38,000
you can see that it is out to live it's

00:29:34,549 --> 00:29:39,919
automatically placed on the top and here

00:29:38,000 --> 00:29:43,520
I don't have to worry about the tooltip

00:29:39,919 --> 00:29:45,169
position because if I now if I change

00:29:43,520 --> 00:29:47,450
the twenty position property then it

00:29:45,169 --> 00:29:49,789
will automatically move on the

00:29:47,450 --> 00:29:56,860
horizontal detection so what happened

00:29:49,789 --> 00:30:00,770
so from the cold we can see that similar

00:29:56,860 --> 00:30:04,480
similar I am just take another Polti

00:30:00,770 --> 00:30:07,159
placement based on that I've taken the

00:30:04,480 --> 00:30:08,870
place of value of that placement if the

00:30:07,159 --> 00:30:12,049
variable stored in the variable and

00:30:08,870 --> 00:30:15,140
based on that placement value I have

00:30:12,049 --> 00:30:17,390
created the switch case which is growing

00:30:15,140 --> 00:30:19,340
just a time triangle so this is the

00:30:17,390 --> 00:30:23,150
triangle which will be drawn on each of

00:30:19,340 --> 00:30:26,620
the side and based on the position it

00:30:23,150 --> 00:30:29,900
will take and it will take care of the

00:30:26,620 --> 00:30:32,659
scrolling part so it if it is on the

00:30:29,900 --> 00:30:35,000
left or right side it will work it will

00:30:32,659 --> 00:30:37,610
move vertically if it is on top or

00:30:35,000 --> 00:30:40,610
bottom it will work it will move or is

00:30:37,610 --> 00:30:45,200
it really so this is the one example of

00:30:40,610 --> 00:30:51,169
paint api ii for example i would like to

00:30:45,200 --> 00:30:52,760
share is the check box thing so so here

00:30:51,169 --> 00:30:54,830
is the traditional check box so when V

00:30:52,760 --> 00:30:57,679
so this is the by default check box

00:30:54,830 --> 00:31:01,880
provided by any browsers but let's see

00:30:57,679 --> 00:31:03,980
instead of this tick marks we would like

00:31:01,880 --> 00:31:07,820
to use any cross ma then what we can do

00:31:03,980 --> 00:31:10,100
so what I have done so I will registered

00:31:07,820 --> 00:31:11,570
of paint work with a register pain to

00:31:10,100 --> 00:31:14,860
operate with the name of check box I

00:31:11,570 --> 00:31:19,600
have used that here with the check box

00:31:14,860 --> 00:31:23,120
so I'll show you each and everything

00:31:19,600 --> 00:31:25,429
with the use of check box so right now

00:31:23,120 --> 00:31:31,360
we are not worrying about the LG center

00:31:25,429 --> 00:31:31,360
so this is just the color so if we take

00:31:32,230 --> 00:31:37,460
of cross but before just week we will

00:31:35,510 --> 00:31:37,940
initially we will create only cross in

00:31:37,460 --> 00:31:40,370
the

00:31:37,940 --> 00:31:46,309
we'll just increase the size of it so I

00:31:40,370 --> 00:31:48,200
just just create that cross much so it's

00:31:46,309 --> 00:31:51,679
starting from top left to talk right and

00:31:48,200 --> 00:31:55,309
top right to top left so I've created it

00:31:51,679 --> 00:31:59,720
so now I will apply some transparent

00:31:55,309 --> 00:32:02,269
color so here now if we try to over it

00:31:59,720 --> 00:32:03,679
so it's applying so it's working and

00:32:02,269 --> 00:32:07,490
when I check that checkbox

00:32:03,679 --> 00:32:10,309
it's it's working fine okay now what if

00:32:07,490 --> 00:32:12,769
we want to provide some edges so what

00:32:10,309 --> 00:32:17,179
every some if you want to add padding

00:32:12,769 --> 00:32:21,019
from all the side of this of these cross

00:32:17,179 --> 00:32:24,409
mats so what we can do we can include

00:32:21,019 --> 00:32:27,139
the edge variable okay and we can call

00:32:24,409 --> 00:32:30,320
this variable inside our J's using the

00:32:27,139 --> 00:32:38,360
input properties so here I've already

00:32:30,320 --> 00:32:41,029
done that so here I just get that edge

00:32:38,360 --> 00:32:44,539
properties and using that edge

00:32:41,029 --> 00:32:48,580
properties the little bit logic would

00:32:44,539 --> 00:32:51,139
there will be changed so now if I try to

00:32:48,580 --> 00:32:52,730
refresh this if I over it you would be

00:32:51,139 --> 00:32:55,549
able to see the padding from all the

00:32:52,730 --> 00:32:58,850
sides so this is the beauty of paint API

00:32:55,549 --> 00:33:01,129
and as I said said as I said that this

00:32:58,850 --> 00:33:04,580
is very much similar to the canvas

00:33:01,129 --> 00:33:08,120
canvas related GS code so it's very easy

00:33:04,580 --> 00:33:12,440
to understand as well so moving to the

00:33:08,120 --> 00:33:13,549
moving back to oppose slides so while

00:33:12,440 --> 00:33:15,610
working on now

00:33:13,549 --> 00:33:18,080
CSS Houdini there are certain things

00:33:15,610 --> 00:33:20,299
regarding which you need to be very much

00:33:18,080 --> 00:33:21,110
cautious that this is very much

00:33:20,299 --> 00:33:24,649
experimental

00:33:21,110 --> 00:33:25,950
right now tried to use CSS Houdini API

00:33:24,649 --> 00:33:29,039
is and you

00:33:25,950 --> 00:33:33,630
to make it work you need to enable these

00:33:29,039 --> 00:33:35,190
chrome flags moreover your website

00:33:33,630 --> 00:33:38,610
should be accessed with the localhost

00:33:35,190 --> 00:33:59,159
over HTTP and if we check the current

00:33:38,610 --> 00:34:01,950
Houdini State yeah so this is the

00:33:59,159 --> 00:34:04,649
current state of Houdini so here you can

00:34:01,950 --> 00:34:07,649
see paths or API endpoint metrics API

00:34:04,649 --> 00:34:10,109
are not well supported and these are the

00:34:07,649 --> 00:34:12,720
problems which are which has agreed that

00:34:10,109 --> 00:34:15,869
they will provide the support CSS

00:34:12,720 --> 00:34:17,129
Houdini and right now it is very much

00:34:15,869 --> 00:34:21,659
under development is very much

00:34:17,129 --> 00:34:24,300
experimental and - I personally believe

00:34:21,659 --> 00:34:26,970
that - for any community if anyone any

00:34:24,300 --> 00:34:29,190
community means to grow then active

00:34:26,970 --> 00:34:32,069
participation is really required so we

00:34:29,190 --> 00:34:33,750
should contribute this community how

00:34:32,069 --> 00:34:35,579
many of you know of believe that this is

00:34:33,750 --> 00:34:39,540
the cool thing and we should we should

00:34:35,579 --> 00:34:41,669
definitely try please try it once you

00:34:39,540 --> 00:34:44,730
will definitely so there are references

00:34:41,669 --> 00:34:47,159
as well and QT 42s started the

00:34:44,730 --> 00:34:50,460
initiative of supporting the CSS Houdini

00:34:47,159 --> 00:34:56,159
and if you have any questions now you

00:34:50,460 --> 00:34:59,420
can ask if you don't have any questions

00:34:56,159 --> 00:34:59,420
then I'll ask

00:35:18,599 --> 00:35:23,380
so the core which has been written

00:35:21,550 --> 00:35:27,220
inside the J's is like a part of

00:35:23,380 --> 00:35:29,260
function okay so while writing the code

00:35:27,220 --> 00:35:31,450
inside the function we could be the

00:35:29,260 --> 00:35:33,700
precursor CSS preprocessors unless we

00:35:31,450 --> 00:35:36,400
can recall we can use the functions we

00:35:33,700 --> 00:35:38,619
can define the functions there is so it

00:35:36,400 --> 00:35:41,920
would not be an issue with the CSS

00:35:38,619 --> 00:35:46,990
pre-processors even so basically the

00:35:41,920 --> 00:35:49,690
purpose of CSS preprocessors is giving

00:35:46,990 --> 00:35:53,410
like compiling everything into CSS and

00:35:49,690 --> 00:35:54,339
browser reads CSS and these API is will

00:35:53,410 --> 00:35:56,280
directly talk to

00:35:54,339 --> 00:35:58,540
browser itself browser engine it so

00:35:56,280 --> 00:36:01,420
there doesn't have to do anything with

00:35:58,540 --> 00:36:05,200
the CSS preprocessors like everything

00:36:01,420 --> 00:36:10,000
would be compiled and it will reuse so

00:36:05,200 --> 00:36:12,540
if you can like CSS preprocessors

00:36:10,000 --> 00:36:15,430
definitely support root elements

00:36:12,540 --> 00:36:18,420
property root element properties so it's

00:36:15,430 --> 00:36:18,420
exactly like that

00:36:22,660 --> 00:36:57,319
anything any players yes about this and

00:36:53,859 --> 00:36:59,900
browsers supporting these specs so still

00:36:57,319 --> 00:37:04,279
the specs are in process of development

00:36:59,900 --> 00:37:07,069
so basically for layout API version 1

00:37:04,279 --> 00:37:10,400
has been already expect out and chrome

00:37:07,069 --> 00:37:15,319
has already started implementing so so

00:37:10,400 --> 00:37:17,660
once that all specs are defined and so

00:37:15,319 --> 00:37:21,049
the major thing to note here is that all

00:37:17,660 --> 00:37:23,900
browsers are agree agreed to like

00:37:21,049 --> 00:37:29,630
support this initiative and that is

00:37:23,900 --> 00:37:31,579
specific Houdini task force people from

00:37:29,630 --> 00:37:36,549
all these browsers basically they have a

00:37:31,579 --> 00:37:36,549
team and they are constantly working on

00:37:42,039 --> 00:37:47,290
we do we think that

00:37:45,220 --> 00:37:51,490
this will be standard between browsers

00:37:47,290 --> 00:37:53,410
because one of the main purposes of

00:37:51,490 --> 00:37:56,980
booting is to have standardization so

00:37:53,410 --> 00:37:58,810
would have one row green and ship does

00:37:56,980 --> 00:38:12,550
that mean that it actually works the

00:37:58,810 --> 00:38:16,930
same okay yeah so once like this this is

00:38:12,550 --> 00:38:20,530
basically is Houdini radiator there is a

00:38:16,930 --> 00:38:22,750
site which manages agreement from all

00:38:20,530 --> 00:38:27,069
the browsers and once it support then

00:38:22,750 --> 00:38:30,700
only it comes here so basically yeah

00:38:27,069 --> 00:38:32,980
so spec will it has been agreed that

00:38:30,700 --> 00:38:37,180
spec will be followed by all browsers

00:38:32,980 --> 00:38:40,750
like to the point so I take care if once

00:38:37,180 --> 00:38:45,720
they say that it is supported in here so

00:38:40,750 --> 00:38:45,720
it will be supported like nicely

00:38:47,810 --> 00:38:55,380
and yeah mmm so still we have time for

00:38:51,510 --> 00:38:58,890
see time like I think it would require

00:38:55,380 --> 00:39:02,160
like down the line one year to like two

00:38:58,890 --> 00:39:05,880
years time would be there until we see

00:39:02,160 --> 00:39:10,410
everything because this is definitely a

00:39:05,880 --> 00:39:14,750
huge shift in the baby do CSS and the

00:39:10,410 --> 00:39:19,350
way we currently style our websites and

00:39:14,750 --> 00:39:30,660
yeah so but this is definitely future to

00:39:19,350 --> 00:39:33,270
how we write CSS yeah so so Houdini

00:39:30,660 --> 00:39:37,140
means so here Houdini is also the name

00:39:33,270 --> 00:39:41,330
of the magician you know and Houdini

00:39:37,140 --> 00:39:48,480
means to keep out of some chain some Lou

00:39:41,330 --> 00:39:51,570
so currently and to do that so in like

00:39:48,480 --> 00:39:55,910
from coming out of the common chain you

00:39:51,570 --> 00:39:59,400
need to do some magic and so this

00:39:55,910 --> 00:40:02,790
basically these all the API is enables

00:39:59,400 --> 00:40:08,100
us to create magic so what we see in

00:40:02,790 --> 00:40:11,850
like currently the CSS is like we we

00:40:08,100 --> 00:40:14,010
have some predefined properties and then

00:40:11,850 --> 00:40:17,400
we use it and then see the changes on

00:40:14,010 --> 00:40:20,430
the browser so that's basically the

00:40:17,400 --> 00:40:22,830
magic now it is enabling us to create

00:40:20,430 --> 00:40:28,020
that magic create those properties and

00:40:22,830 --> 00:40:35,220
see people won't do Wow about that so so

00:40:28,020 --> 00:40:37,820
basically that's CSS one yeah I think

00:40:35,220 --> 00:40:40,990
this is like racing

00:40:37,820 --> 00:41:42,010
security concerns

00:40:40,990 --> 00:41:45,820
yeah so that's why I like to answer this

00:41:42,010 --> 00:41:50,260
by spider-man's statement like with

00:41:45,820 --> 00:41:50,260
power you have responsibility

00:41:54,040 --> 00:42:01,570
so yep we'll be this like because I

00:41:58,390 --> 00:42:04,690
really like the idea if I see like there

00:42:01,570 --> 00:42:07,510
must be a big use case to use this kind

00:42:04,690 --> 00:42:10,060
of approach to to fix maybe

00:42:07,510 --> 00:42:11,980
compatibility issues even process like

00:42:10,060 --> 00:42:15,820
these kind of things you can get

00:42:11,980 --> 00:42:23,530
so how with Microsoft edge to do things

00:42:15,820 --> 00:42:26,350
done by default if they really now we

00:42:23,530 --> 00:42:29,080
don't need to worry about Microsoft edge

00:42:26,350 --> 00:42:34,480
because now they are coming to work it

00:42:29,080 --> 00:42:36,820
they are but anyways like we we know

00:42:34,480 --> 00:42:42,460
that they'll also support these APs and

00:42:36,820 --> 00:42:45,520
yeah this and this enables us to a state

00:42:42,460 --> 00:42:50,020
where there is no like browser monopoly

00:42:45,520 --> 00:42:57,490
sort of and it we can do anything to

00:42:50,020 --> 00:43:00,640
support our customers mobile browsers

00:42:57,490 --> 00:43:02,500
will support the api's so for example on

00:43:00,640 --> 00:43:04,540
a desktop you have to normal checkbox

00:43:02,500 --> 00:43:06,400
you can style it as everyone have what

00:43:04,540 --> 00:43:09,160
happened so on an apply for what would

00:43:06,400 --> 00:43:14,110
be the plans are to be creative styling

00:43:09,160 --> 00:43:17,440
so eventually like now mobile browsers

00:43:14,110 --> 00:43:19,770
are not separate from disturb browsers

00:43:17,440 --> 00:43:23,200
they almost support everything and now

00:43:19,770 --> 00:43:26,700
eventually it will be like all platform

00:43:23,200 --> 00:43:26,700
all browsers would be supporting this

00:43:26,970 --> 00:43:35,110
yeah and that's why because this is this

00:43:32,980 --> 00:43:38,530
is something which will always have

00:43:35,110 --> 00:43:40,470
performance benefit on that and mobile

00:43:38,530 --> 00:43:46,920
browsers very definitely wanted because

00:43:40,470 --> 00:43:46,920
it makes the site more performant from

00:43:49,000 --> 00:43:54,950
yep can we see the updates on the

00:43:52,640 --> 00:43:57,820
progress on this slide so this is

00:43:54,950 --> 00:44:14,660
basically an iframe loading from just

00:43:57,820 --> 00:44:16,310
Jesus Houdini ready yet so this is the

00:44:14,660 --> 00:44:20,260
place where you can see the status of

00:44:16,310 --> 00:44:20,260
which API is being supported by which

00:44:21,790 --> 00:44:26,740
yeah could you give me a reason why

00:44:33,610 --> 00:44:45,860
talking so standing checkboxes now we

00:44:39,410 --> 00:44:49,640
know that designers and that is nothing

00:44:45,860 --> 00:44:55,460
it is nowhere near to what we get from

00:44:49,640 --> 00:44:58,370
browsers and so what we do is we hide

00:44:55,460 --> 00:45:01,970
the main input element and then use

00:44:58,370 --> 00:45:05,420
before and after to bring in the image

00:45:01,970 --> 00:45:08,630
and then see with the property chipped

00:45:05,420 --> 00:45:10,910
or uncheck properties then we apply a

00:45:08,630 --> 00:45:13,160
different image and then when it is not

00:45:10,910 --> 00:45:17,810
checked we apply a different image so

00:45:13,160 --> 00:45:21,970
this is and I think you would agree with

00:45:17,810 --> 00:45:28,040
this that this is big package yeah and

00:45:21,970 --> 00:45:31,940
also when you take fails when there is a

00:45:28,040 --> 00:45:35,600
validation and yeah we can't do it like

00:45:31,940 --> 00:45:38,390
if we use directly display:none to this

00:45:35,600 --> 00:45:40,280
input element it will break when there

00:45:38,390 --> 00:45:42,110
is validation going on fronting

00:45:40,280 --> 00:45:46,970
validation at name so that's why we use

00:45:42,110 --> 00:45:49,490
visual Eden or clip it from being

00:45:46,970 --> 00:45:53,560
visible there and that's why like that's

00:45:49,490 --> 00:45:56,930
how we bypass this and we use this value

00:45:53,560 --> 00:45:59,680
validation but using Houdini it will

00:45:56,930 --> 00:46:01,790
will not have to do all these of

00:45:59,680 --> 00:46:05,210
workarounds

00:46:01,790 --> 00:46:12,800
we can directly hook into CSS engine and

00:46:05,210 --> 00:46:52,430
then we can have our own image and it

00:46:12,800 --> 00:46:55,310
will have the know so basically yeah on

00:46:52,430 --> 00:47:01,190
the main trip we attach this these

00:46:55,310 --> 00:47:04,790
worklets and these words only these work

00:47:01,190 --> 00:47:07,340
literally they do the processing and

00:47:04,790 --> 00:47:10,780
then pass in information to the main

00:47:07,340 --> 00:47:15,200
thread so we just have to register these

00:47:10,780 --> 00:47:19,400
pockets so these were crates again

00:47:15,200 --> 00:47:21,650
handle they have a separate class to

00:47:19,400 --> 00:47:23,150
handle these like if we are doing

00:47:21,650 --> 00:47:26,390
animation if we are doing layouting

00:47:23,150 --> 00:47:28,490
if you have doing pain so whatever work

00:47:26,390 --> 00:47:31,250
we are using we just need to register

00:47:28,490 --> 00:47:33,500
those those cluster to the main thread

00:47:31,250 --> 00:47:36,380
and then rest of the thing is taken care

00:47:33,500 --> 00:47:38,380
in the background and nothing is render

00:47:36,380 --> 00:47:46,520
blocking the whole purpose of having

00:47:38,380 --> 00:47:49,180
worklets is to not render block guys we

00:47:46,520 --> 00:47:52,640
are running out of time little bit so

00:47:49,180 --> 00:47:55,760
you can contact us on the boat number 16

00:47:52,640 --> 00:47:57,980
as well now we are here and on our

00:47:55,760 --> 00:48:00,580
twitter handles our socket underscore

00:47:57,980 --> 00:48:02,480
kmr and we did underscore two seven and

00:48:00,580 --> 00:48:05,210
please do provide your feedback

00:48:02,480 --> 00:48:07,160
regarding the session how much how much

00:48:05,210 --> 00:48:10,110
did you like not like so it will really

00:48:07,160 --> 00:48:18,809
help us thank you so much

00:48:10,110 --> 00:48:18,809

YouTube URL: https://www.youtube.com/watch?v=QV3B9CCCNXU


