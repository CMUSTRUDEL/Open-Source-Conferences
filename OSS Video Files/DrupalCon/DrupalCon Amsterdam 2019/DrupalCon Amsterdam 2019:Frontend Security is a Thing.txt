Title: DrupalCon Amsterdam 2019:Frontend Security is a Thing
Publication date: 2019-10-29
Playlist: DrupalCon Amsterdam 2019
Description: 
	Room: Auditorium
Presenter: Madalina Cotumbeanu
Description: When we say FrontEnd, we mainly think of the glue that sticks, the Designer's vision and the BackEnd's implementation, together.

We make things look pretty for the final user, we make it easier for people to surface our page in style, we make everything flashy.

Thinking about security you might be tempted to correlate it with Backend development. But I am here to try and show that FrontEnders have the same level of responsibility when it comes to securing our web pages. We will go through the main issues that make up the FrontEnd Security Checklist.
Captions: 
	00:00:03,080 --> 00:00:15,030
everybody can you hear me okay so hello

00:00:12,990 --> 00:00:19,260
how are you guys enjoying the event so

00:00:15,030 --> 00:00:21,000
far is everything okay okay well I hope

00:00:19,260 --> 00:00:24,090
you're ready and set to go for the next

00:00:21,000 --> 00:00:26,550
20 minutes ish if at any point you lose

00:00:24,090 --> 00:00:29,519
track of what I'm saying do not worry it

00:00:26,550 --> 00:00:31,410
is not you it's me today I'll be

00:00:29,519 --> 00:00:33,090
introducing you to front-end security

00:00:31,410 --> 00:00:34,739
and I hope not everyone is a master in

00:00:33,090 --> 00:00:36,090
this as I would really love for you all

00:00:34,739 --> 00:00:37,559
to leave here with a bit more

00:00:36,090 --> 00:00:39,360
information than what you came in with

00:00:37,559 --> 00:00:41,309
for those of you who saw this

00:00:39,360 --> 00:00:44,010
presentation in Bucharest and/or Cluj

00:00:41,309 --> 00:00:45,000
this will not be the same I changed a

00:00:44,010 --> 00:00:46,829
few bits and bobs

00:00:45,000 --> 00:00:49,559
so although crews might have felt like a

00:00:46,829 --> 00:00:53,070
rerun for Bucharest this will be a bit

00:00:49,559 --> 00:00:54,270
different that's me for those in the

00:00:53,070 --> 00:00:56,520
back i'm magdalena

00:00:54,270 --> 00:00:58,440
maddie for short I'm a senior front-end

00:00:56,520 --> 00:01:00,930
developer and I've been working outs of

00:00:58,440 --> 00:01:03,239
Tesco for the past five years this is my

00:01:00,930 --> 00:01:05,790
first time speaking at a con third time

00:01:03,239 --> 00:01:08,060
speaking in general they say third time

00:01:05,790 --> 00:01:10,530
is a charm so we'll see how this goes

00:01:08,060 --> 00:01:13,439
now that we got acquainted a little bit

00:01:10,530 --> 00:01:15,869
we can get down to business what do you

00:01:13,439 --> 00:01:17,880
guys hear of when you think of security

00:01:15,869 --> 00:01:19,530
and web development would anyone want to

00:01:17,880 --> 00:01:24,570
have a go at it and shout something I

00:01:19,530 --> 00:01:27,600
won't here okay I'll tell you what I

00:01:24,570 --> 00:01:29,490
used to think in the past I would have

00:01:27,600 --> 00:01:32,220
been tempted to pin the security issues

00:01:29,490 --> 00:01:34,049
on the back end developers or on the dev

00:01:32,220 --> 00:01:36,090
ops from up front and developers point

00:01:34,049 --> 00:01:38,159
of view I might have even pinned that on

00:01:36,090 --> 00:01:39,479
the QA department teach them to say not

00:01:38,159 --> 00:01:42,299
according to the design to me

00:01:39,479 --> 00:01:44,430
we don't do security we're mythical

00:01:42,299 --> 00:01:45,750
creatures we take the designers vision

00:01:44,430 --> 00:01:48,149
and the back end there is implementation

00:01:45,750 --> 00:01:50,189
and we make all of that look pretty for

00:01:48,149 --> 00:01:53,700
the final user we make everything look

00:01:50,189 --> 00:01:55,740
flashy well yes and no I mean we are

00:01:53,700 --> 00:01:57,750
indeed mythical creatures there's no

00:01:55,740 --> 00:01:59,969
doubt there but we also have the same

00:01:57,750 --> 00:02:01,890
level of responsibility when it comes to

00:01:59,969 --> 00:02:04,560
securing our webpages just like

00:02:01,890 --> 00:02:07,049
everybody else does the number of

00:02:04,560 --> 00:02:08,640
websites have attack on websites have

00:02:07,049 --> 00:02:10,259
increased over the years and the

00:02:08,640 --> 00:02:12,930
Internet has become somewhat of a

00:02:10,259 --> 00:02:13,530
dangerous place we are all heard of at

00:02:12,930 --> 00:02:14,760
least one

00:02:13,530 --> 00:02:16,380
case where millions of personal

00:02:14,760 --> 00:02:19,560
information have been leaked to the

00:02:16,380 --> 00:02:21,540
public users entrust us with sensitive

00:02:19,560 --> 00:02:23,790
information like email addresses Social

00:02:21,540 --> 00:02:26,370
Security numbers credit card details and

00:02:23,790 --> 00:02:30,090
such and we're responsible for securing

00:02:26,370 --> 00:02:31,739
it as much as possible securing our

00:02:30,090 --> 00:02:33,930
websites requires a combined effort

00:02:31,739 --> 00:02:35,940
across the whole website while it's true

00:02:33,930 --> 00:02:38,250
that the user data on the is stored on

00:02:35,940 --> 00:02:39,900
the server and accessed through the back

00:02:38,250 --> 00:02:41,850
end the same data is ultimately

00:02:39,900 --> 00:02:43,890
retrieved and displayed in the front-end

00:02:41,850 --> 00:02:46,200
application creating an accident

00:02:43,890 --> 00:02:48,030
opportunity to steal it a front-end

00:02:46,200 --> 00:02:50,310
vulnerability happens when someone is

00:02:48,030 --> 00:02:52,560
able to harm your website application or

00:02:50,310 --> 00:02:55,050
users without ever having to gain access

00:02:52,560 --> 00:02:58,590
to a server to a database or hosting

00:02:55,050 --> 00:03:00,690
provider today we will brush off the

00:02:58,590 --> 00:03:02,550
surface of this topic we will look at

00:03:00,690 --> 00:03:05,100
threats and where they come from and

00:03:02,550 --> 00:03:06,750
what they can and what we can do to

00:03:05,100 --> 00:03:08,640
increase our protection for our web

00:03:06,750 --> 00:03:10,739
applications against the most common

00:03:08,640 --> 00:03:13,830
attacks like SQL injection cross-site

00:03:10,739 --> 00:03:16,100
scripting cross-site request forgery and

00:03:13,830 --> 00:03:19,290
then we'll look at some other threats

00:03:16,100 --> 00:03:21,000
the SQL ihop attack happens when an

00:03:19,290 --> 00:03:23,489
attacker is able to execute arbitrary

00:03:21,000 --> 00:03:26,910
SQL statements on a database through a

00:03:23,489 --> 00:03:28,560
web form field or URL parameter making

00:03:26,910 --> 00:03:31,380
it possible for them to gain access and

00:03:28,560 --> 00:03:33,510
manipulate said database they can access

00:03:31,380 --> 00:03:37,230
data on the server create new identities

00:03:33,510 --> 00:03:39,540
with administrator rights and just

00:03:37,230 --> 00:03:42,799
destroy a modified data without ever

00:03:39,540 --> 00:03:45,060
taking into account the users permission

00:03:42,799 --> 00:03:47,640
the open web application security

00:03:45,060 --> 00:03:50,040
project rated not the number one attack

00:03:47,640 --> 00:03:54,630
on the riwasa top 10 as being the SQL I

00:03:50,040 --> 00:03:56,280
in both 2013 and 2017 explaining said

00:03:54,630 --> 00:03:58,049
that if you only have time to protect

00:03:56,280 --> 00:04:00,269
yourself against one vulnerability you

00:03:58,049 --> 00:04:03,299
should be checking for SQL injection

00:04:00,269 --> 00:04:05,280
vulnerabilities in your codebase there

00:04:03,299 --> 00:04:07,940
are four forms of SQL I and we are going

00:04:05,280 --> 00:04:11,060
to look at them in a bit more detail

00:04:07,940 --> 00:04:13,709
incorrectly filtered escape characters

00:04:11,060 --> 00:04:15,390
this happens when a users input was not

00:04:13,709 --> 00:04:17,400
filtered for escape characters letting

00:04:15,390 --> 00:04:19,500
it pass an SQL statement making it

00:04:17,400 --> 00:04:21,150
possible to manipulate the statement

00:04:19,500 --> 00:04:23,099
performed on the database by the end

00:04:21,150 --> 00:04:25,260
user of the application let's consider

00:04:23,099 --> 00:04:26,370
the following query where we have a list

00:04:25,260 --> 00:04:27,990
of users with

00:04:26,370 --> 00:04:31,500
particular name and that name has been

00:04:27,990 --> 00:04:33,360
supplied from of HTML form while

00:04:31,500 --> 00:04:35,370
entering a real name here will have no

00:04:33,360 --> 00:04:36,960
side effects an attacker could change

00:04:35,370 --> 00:04:39,690
the behavior of the statement to

00:04:36,960 --> 00:04:41,250
something like the following we see here

00:04:39,690 --> 00:04:43,889
that the text after the first C cosine

00:04:41,250 --> 00:04:45,960
above was used as the username the

00:04:43,889 --> 00:04:49,139
statement deletes the user table and

00:04:45,960 --> 00:04:51,300
select all data from the user info table

00:04:49,139 --> 00:04:53,790
thus showing all the user information

00:04:51,300 --> 00:04:55,530
this sort of attack happens because we

00:04:53,790 --> 00:04:57,210
did not make sure that the data that was

00:04:55,530 --> 00:04:59,280
supposed to be passed to the SQL query

00:04:57,210 --> 00:05:01,889
will not change the nature of it a

00:04:59,280 --> 00:05:03,600
solution is to escape all characters in

00:05:01,889 --> 00:05:06,330
the user input that means something to

00:05:03,600 --> 00:05:08,760
SQL if in our example we would have

00:05:06,330 --> 00:05:10,320
escaped the single quote character then

00:05:08,760 --> 00:05:12,870
we would have treated the name as part

00:05:10,320 --> 00:05:15,360
of a string now we have a very weird

00:05:12,870 --> 00:05:18,060
name as the whole string but the string

00:05:15,360 --> 00:05:21,900
nonetheless web frameworks will often

00:05:18,060 --> 00:05:24,030
take care of this escaping for you in

00:05:21,900 --> 00:05:26,580
correct type handling occurs when a user

00:05:24,030 --> 00:05:28,860
input field is not strongly typed or it

00:05:26,580 --> 00:05:30,570
does not check for type constraints if

00:05:28,860 --> 00:05:32,580
we will have a statement that uses a

00:05:30,570 --> 00:05:34,740
numeric field but we won't make checks

00:05:32,580 --> 00:05:37,139
to see the user did input a numeric

00:05:34,740 --> 00:05:39,870
value we will just enable an attacker to

00:05:37,139 --> 00:05:42,120
add the string so because the programmer

00:05:39,870 --> 00:05:43,860
meant a variable to be a number but

00:05:42,120 --> 00:05:46,650
didn't check for it an attacker could

00:05:43,860 --> 00:05:50,460
just add the following input dropping

00:05:46,650 --> 00:05:52,680
all the users from the table blind SQL

00:05:50,460 --> 00:05:55,110
is used when a web application is

00:05:52,680 --> 00:05:56,699
vulnerable to an SQL injection but the

00:05:55,110 --> 00:05:58,710
results is not visible to the attacker

00:05:56,699 --> 00:06:00,990
the page with the vulnerability may not

00:05:58,710 --> 00:06:02,639
be the one that displays data but will

00:06:00,990 --> 00:06:05,070
display differently depending on the

00:06:02,639 --> 00:06:07,289
results of a logical statement injected

00:06:05,070 --> 00:06:09,570
in the legitimate SQL statement calls

00:06:07,289 --> 00:06:11,639
for that page this has been time

00:06:09,570 --> 00:06:13,620
considered time invasive because a new

00:06:11,639 --> 00:06:15,479
statement needed to be crafted for each

00:06:13,620 --> 00:06:17,820
beats recovered and the attack may

00:06:15,479 --> 00:06:20,880
consist of many unsuccessful requests

00:06:17,820 --> 00:06:23,190
recent advancements have all allowed

00:06:20,880 --> 00:06:24,990
each request to recover multiple dates

00:06:23,190 --> 00:06:28,680
allowing for more consistent and

00:06:24,990 --> 00:06:31,050
efficient extraction second-order sqli

00:06:28,680 --> 00:06:32,820
occurs when submitted values contain

00:06:31,050 --> 00:06:35,099
malicious commands that are stored

00:06:32,820 --> 00:06:36,810
rather than executed immediately in some

00:06:35,099 --> 00:06:39,870
cases the applications may correctly

00:06:36,810 --> 00:06:42,600
encode an SQL statement and store it it

00:06:39,870 --> 00:06:44,280
a valid SQL then another part of the

00:06:42,600 --> 00:06:46,949
application without control to protect

00:06:44,280 --> 00:06:49,139
against SQL I might execute that stored

00:06:46,949 --> 00:06:50,820
statement this attack requires more

00:06:49,139 --> 00:06:53,610
knowledge of how submitted values are

00:06:50,820 --> 00:06:55,470
later used automated web application

00:06:53,610 --> 00:06:59,040
security scanners would not easily

00:06:55,470 --> 00:07:01,199
detect this type of SQL I and many need

00:06:59,040 --> 00:07:02,880
to be manually instructed where to check

00:07:01,199 --> 00:07:06,210
for evidence that this is being

00:07:02,880 --> 00:07:08,040
attempted before we go to our next

00:07:06,210 --> 00:07:10,470
threat cross-site scripting let's take a

00:07:08,040 --> 00:07:13,530
look at the basic concept of same-origin

00:07:10,470 --> 00:07:15,720
policy soap means that websites are not

00:07:13,530 --> 00:07:18,450
allowed to retrieve content from pages

00:07:15,720 --> 00:07:20,850
that are not within the same origin this

00:07:18,450 --> 00:07:23,340
will prevent random sites from besides

00:07:20,850 --> 00:07:26,040
to read or modify data from a Facebook

00:07:23,340 --> 00:07:28,200
page for example while logged in to them

00:07:26,040 --> 00:07:31,350
this is what an origin is made of a

00:07:28,200 --> 00:07:32,880
scheme a host name a port if any of

00:07:31,350 --> 00:07:35,580
these is different then we're talking

00:07:32,880 --> 00:07:37,410
about a different origin cross-site

00:07:35,580 --> 00:07:39,750
scripting is a way of bypassing this

00:07:37,410 --> 00:07:41,400
concept it is basically an attack that

00:07:39,750 --> 00:07:43,289
allows malicious users to inject

00:07:41,400 --> 00:07:45,810
client-side scripting through the

00:07:43,289 --> 00:07:47,880
website into the browser if an attack to

00:07:45,810 --> 00:07:50,460
attacker will gain access to the cookies

00:07:47,880 --> 00:07:52,169
like the user site authorization cookies

00:07:50,460 --> 00:07:54,600
they will be able to log into the site

00:07:52,169 --> 00:07:56,639
impersonating that user and do anything

00:07:54,600 --> 00:07:58,440
the user has permission to the main

00:07:56,639 --> 00:08:00,210
issue with this is that an attacker

00:07:58,440 --> 00:08:02,430
might be able to access credit card

00:08:00,210 --> 00:08:04,680
information contact details or they

00:08:02,430 --> 00:08:06,599
might be able to change your password if

00:08:04,680 --> 00:08:08,580
they don't get to log in as the user

00:08:06,599 --> 00:08:10,340
they might still read private details

00:08:08,580 --> 00:08:13,710
and make requests on behalf of the user

00:08:10,340 --> 00:08:16,080
an example could be we have a website

00:08:13,710 --> 00:08:18,419
where we enabled the comments without

00:08:16,080 --> 00:08:20,729
the proper validation an attacker could

00:08:18,419 --> 00:08:22,889
submit comments which contain JavaScript

00:08:20,729 --> 00:08:24,599
that could run in the users browsers and

00:08:22,889 --> 00:08:26,370
steal the login cookie making it

00:08:24,599 --> 00:08:28,520
possible to take control of the accounts

00:08:26,370 --> 00:08:30,870
of the user that viewed the comment

00:08:28,520 --> 00:08:33,270
there are two main types of cross-site

00:08:30,870 --> 00:08:35,099
scripting vulnerability reflected and

00:08:33,270 --> 00:08:37,890
persistence so we're gonna take a look

00:08:35,099 --> 00:08:39,659
at those reflected occurs when the user

00:08:37,890 --> 00:08:41,820
content that was passed to the server

00:08:39,659 --> 00:08:44,279
was returned on the page without being

00:08:41,820 --> 00:08:46,709
stored the script will be run when the

00:08:44,279 --> 00:08:49,140
new page is loaded so when the users

00:08:46,709 --> 00:08:51,510
clicks on the link let's take the

00:08:49,140 --> 00:08:53,700
confused deputy problem a program which

00:08:51,510 --> 00:08:56,520
is tricked into misusing its authority

00:08:53,700 --> 00:08:58,290
is a confused deputy basically you're

00:08:56,520 --> 00:09:00,570
through tricking something into doing

00:08:58,290 --> 00:09:05,040
something that they are allowed to but

00:09:00,570 --> 00:09:07,470
you aren't let's say George is

00:09:05,040 --> 00:09:09,690
passionate about adopting cats one day

00:09:07,470 --> 00:09:12,120
while looking at a shelter site he sees

00:09:09,690 --> 00:09:14,250
an ad for the perfect cat he sees that

00:09:12,120 --> 00:09:16,590
that comes from a well-known adoption

00:09:14,250 --> 00:09:19,080
service website so he decides to follow

00:09:16,590 --> 00:09:21,660
it the link looks something like that

00:09:19,080 --> 00:09:24,170
I'm guessing that might not make much

00:09:21,660 --> 00:09:26,850
sense but let's look at the decoded URL

00:09:24,170 --> 00:09:29,700
we now see that the search parameter has

00:09:26,850 --> 00:09:31,860
an HTML script tag that might be trying

00:09:29,700 --> 00:09:33,750
to steal something the attacker is

00:09:31,860 --> 00:09:35,750
profit from this permission and use it

00:09:33,750 --> 00:09:38,940
to their advantage

00:09:35,750 --> 00:09:40,740
persistent vulnerability happens when

00:09:38,940 --> 00:09:42,780
the malicious script is saved in a

00:09:40,740 --> 00:09:45,150
database for example and later is

00:09:42,780 --> 00:09:45,750
executed for other users when they open

00:09:45,150 --> 00:09:47,790
a page

00:09:45,750 --> 00:09:49,890
this is dangerous because the script is

00:09:47,790 --> 00:09:51,900
not visible for the browser's XSS

00:09:49,890 --> 00:09:53,760
filters and users might unknowingly

00:09:51,900 --> 00:09:57,240
trigger the script when they visit the

00:09:53,760 --> 00:09:59,520
affected page for example this can

00:09:57,240 --> 00:10:01,920
happen if the username of a user that

00:09:59,520 --> 00:10:04,530
post a comment isn't sanitized when it

00:10:01,920 --> 00:10:07,070
is printed allowing an attacker to inset

00:10:04,530 --> 00:10:09,330
scripted code when creating an account

00:10:07,070 --> 00:10:11,820
their username could look something like

00:10:09,330 --> 00:10:14,220
this the code is triggered whenever a

00:10:11,820 --> 00:10:16,830
user visits the page with comments from

00:10:14,220 --> 00:10:18,960
this user and gets the cookies of those

00:10:16,830 --> 00:10:21,120
users for the attacker this kind of

00:10:18,960 --> 00:10:22,860
attack is very popular and powerful as

00:10:21,120 --> 00:10:26,070
the attacker is not required to have

00:10:22,860 --> 00:10:28,260
direct engagement with the users we need

00:10:26,070 --> 00:10:30,270
to make sure that no one can inject jas

00:10:28,260 --> 00:10:30,900
content into our pages to prevent such

00:10:30,270 --> 00:10:33,150
attacks

00:10:30,900 --> 00:10:35,250
we can't allow the users generated

00:10:33,150 --> 00:10:38,310
content to be interpreted interpreted as

00:10:35,250 --> 00:10:40,560
something other than what we wanted if

00:10:38,310 --> 00:10:42,450
in the above example we had sanitized or

00:10:40,560 --> 00:10:44,580
ease our search parameter taken from the

00:10:42,450 --> 00:10:50,430
variable we would have had something

00:10:44,580 --> 00:10:52,500
like this we should only allow trusted

00:10:50,430 --> 00:10:54,900
origins required for the application to

00:10:52,500 --> 00:10:56,970
work and deny anything else if we would

00:10:54,900 --> 00:10:59,340
have used content security to filter

00:10:56,970 --> 00:11:01,200
sources for scripts Davis script

00:10:59,340 --> 00:11:03,330
wouldn't have been downloaded another

00:11:01,200 --> 00:11:05,610
good practice is to avoid loading

00:11:03,330 --> 00:11:06,690
scripts images styles and other assets

00:11:05,610 --> 00:11:09,000
from any origin

00:11:06,690 --> 00:11:11,399
except the server the best defense

00:11:09,000 --> 00:11:12,990
against XSS vulnerability is to remove

00:11:11,399 --> 00:11:15,300
or disable any markup that can

00:11:12,990 --> 00:11:18,660
potentially contain instructions to run

00:11:15,300 --> 00:11:20,490
run code the process of modifying user

00:11:18,660 --> 00:11:22,050
data so that it can't be used to run

00:11:20,490 --> 00:11:24,720
scripts or otherwise affect the

00:11:22,050 --> 00:11:27,329
execution of server code is known as

00:11:24,720 --> 00:11:29,459
input sanitization many web frameworks

00:11:27,329 --> 00:11:32,339
automatically sanitize user input from

00:11:29,459 --> 00:11:34,709
HTML forms by default even though most

00:11:32,339 --> 00:11:36,600
modern browsers have an inbuilt XSS

00:11:34,709 --> 00:11:39,089
filter they should not be seen as an

00:11:36,600 --> 00:11:41,699
alternative to sanitization web browsers

00:11:39,089 --> 00:11:43,800
X access filter should only be a second

00:11:41,699 --> 00:11:45,480
line of defense and the idea is to

00:11:43,800 --> 00:11:47,850
minimize the impact of existing

00:11:45,480 --> 00:11:50,850
vulnerabilities cross-site request

00:11:47,850 --> 00:11:53,370
forgery this attack allows an attacker

00:11:50,850 --> 00:11:55,319
to execute actions using credentials of

00:11:53,370 --> 00:11:57,930
another users without the consent or

00:11:55,319 --> 00:11:59,519
knowledge of set user this can cause

00:11:57,930 --> 00:12:01,829
serious damage to a person's bank

00:11:59,519 --> 00:12:04,110
account for example a third party site

00:12:01,829 --> 00:12:07,230
can issue requests your bank account

00:12:04,110 --> 00:12:09,870
using your browser with your cookies so

00:12:07,230 --> 00:12:12,569
if someone was logged in their bank

00:12:09,870 --> 00:12:14,459
account in one tab then another one

00:12:12,569 --> 00:12:16,920
could make the browser misuse the

00:12:14,459 --> 00:12:18,720
credential on the attackers behalf the

00:12:16,920 --> 00:12:20,310
trick here would be that the attacker

00:12:18,720 --> 00:12:22,380
doesn't need to have access to the

00:12:20,310 --> 00:12:24,360
user's cookies the browser stores the

00:12:22,380 --> 00:12:28,800
information and includes it in all

00:12:24,360 --> 00:12:31,529
requests to the Associated server other

00:12:28,800 --> 00:12:33,959
threats include clickjacking in this

00:12:31,529 --> 00:12:36,269
attack a malicious user hijacks clicks

00:12:33,959 --> 00:12:38,040
meant for a visible top-level site and

00:12:36,269 --> 00:12:39,899
routes them to a hidden page beneath

00:12:38,040 --> 00:12:42,990
this technique might be used for example

00:12:39,899 --> 00:12:44,939
to display a legitimate bank site but

00:12:42,990 --> 00:12:46,620
captured the login credentials into an

00:12:44,939 --> 00:12:50,309
invisible iframe controlled by the

00:12:46,620 --> 00:12:52,050
attacker directory traversal file and

00:12:50,309 --> 00:12:54,959
disclosure in this type of attack a

00:12:52,050 --> 00:12:57,540
malicious user attempts to access parts

00:12:54,959 --> 00:12:59,670
of the web server file system that they

00:12:57,540 --> 00:13:01,649
should not be able to access this

00:12:59,670 --> 00:13:03,540
vulnerability occurs when the user is

00:13:01,649 --> 00:13:07,470
able to pass file names that include

00:13:03,540 --> 00:13:10,379
file system navigation characters file

00:13:07,470 --> 00:13:12,899
inclusion a user is able to specify an

00:13:10,379 --> 00:13:15,269
unintended file for display or execution

00:13:12,899 --> 00:13:17,370
date app has to pass to the server once

00:13:15,269 --> 00:13:19,440
loaded this file might execute on the

00:13:17,370 --> 00:13:23,190
web server or in the client

00:13:19,440 --> 00:13:25,019
and command injection attacks that allow

00:13:23,190 --> 00:13:26,910
a malicious user to execute arbitrary

00:13:25,019 --> 00:13:31,410
system commands on the host operating

00:13:26,910 --> 00:13:33,930
system but you Paul Drupal is secure I

00:13:31,410 --> 00:13:35,970
hear you say you go on and tell me

00:13:33,930 --> 00:13:37,410
the use of twig forces a harder

00:13:35,970 --> 00:13:39,690
separation between logic and

00:13:37,410 --> 00:13:41,760
presentation so that an experienced

00:13:39,690 --> 00:13:43,500
developer cannot put a lot of PHP in the

00:13:41,760 --> 00:13:45,779
theme which can introduce security

00:13:43,500 --> 00:13:47,760
problems down the line the adoption of

00:13:45,779 --> 00:13:49,589
ckeditor and core comes with an

00:13:47,760 --> 00:13:52,230
improvement in that cortex filtering

00:13:49,589 --> 00:13:54,720
supports limited limiting the use of

00:13:52,230 --> 00:13:56,940
images local to the site helping prevent

00:13:54,720 --> 00:14:00,209
cross-site request forgery clickjacking

00:13:56,940 --> 00:14:03,029
protection is enabled by default court

00:14:00,209 --> 00:14:06,779
JavaScript a P compatible with content

00:14:03,029 --> 00:14:08,700
security policy w3c standard well

00:14:06,779 --> 00:14:10,800
although Drupal web sites are meant to

00:14:08,700 --> 00:14:12,930
be secure by default we cannot rely on

00:14:10,800 --> 00:14:15,720
that a beginner developer or type

00:14:12,930 --> 00:14:18,240
deadline can actually lead to making

00:14:15,720 --> 00:14:20,459
your Drupal site vulnerable security is

00:14:18,240 --> 00:14:23,490
an ongoing process you need to follow

00:14:20,459 --> 00:14:26,399
closely and it can help to have a little

00:14:23,490 --> 00:14:29,910
checklist let's take a look at some

00:14:26,399 --> 00:14:31,560
prevention tips with Drupal review

00:14:29,910 --> 00:14:34,019
content types to ensure that all

00:14:31,560 --> 00:14:36,000
sensitive information such as user

00:14:34,019 --> 00:14:38,670
photos and other sensitive files are

00:14:36,000 --> 00:14:40,230
uploaded as private files implement one

00:14:38,670 --> 00:14:42,000
or more of the Drupal modules for

00:14:40,230 --> 00:14:44,610
password management encouraging

00:14:42,000 --> 00:14:46,620
encouraging strong passwords that are

00:14:44,610 --> 00:14:48,870
changed regularly and considering

00:14:46,620 --> 00:14:50,790
two-factor authentication if there

00:14:48,870 --> 00:14:53,760
anything that your application receives

00:14:50,790 --> 00:14:55,560
from untrusted sources filter inputs

00:14:53,760 --> 00:14:58,310
properly and think about whether an

00:14:55,560 --> 00:15:00,720
input can be trusted which it shouldn't

00:14:58,310 --> 00:15:02,790
sanitize all request parameters and

00:15:00,720 --> 00:15:04,560
inputs this is done by escaping all

00:15:02,790 --> 00:15:08,490
characters that have been part of the

00:15:04,560 --> 00:15:10,079
code built forms using tuples for mappy

00:15:08,490 --> 00:15:12,630
to help protect against cross-site

00:15:10,079 --> 00:15:15,060
request forgeries keep everything up to

00:15:12,630 --> 00:15:17,670
date modules Drupal core libraries

00:15:15,060 --> 00:15:19,350
everything this will help you take full

00:15:17,670 --> 00:15:21,620
advantage of the security fixes

00:15:19,350 --> 00:15:24,420
implemented by other developers

00:15:21,620 --> 00:15:27,750
integrity check your developers might

00:15:24,420 --> 00:15:30,060
modify the core core or contributed code

00:15:27,750 --> 00:15:32,760
this can lead to complicated code

00:15:30,060 --> 00:15:35,130
maintenance and updates

00:15:32,760 --> 00:15:39,780
the vulnerabilities will come from bad

00:15:35,130 --> 00:15:43,110
configurations configur your web server

00:15:39,780 --> 00:15:46,590
to use HTTP and HTTPS trick Transport

00:15:43,110 --> 00:15:49,980
Security Review rolls block cross-site

00:15:46,590 --> 00:15:51,870
function Drupal offers at least 8 apiece

00:15:49,980 --> 00:15:54,630
to filter out and prevent cross-site

00:15:51,870 --> 00:15:57,390
scripting and block most of the script

00:15:54,630 --> 00:16:00,030
injection attempts in parallel Drupal

00:15:57,390 --> 00:16:02,640
deploys functions functionalities like

00:16:00,030 --> 00:16:04,650
HTTP POST to validate user intent

00:16:02,640 --> 00:16:07,670
intention and counter cross-site request

00:16:04,650 --> 00:16:10,470
forgery that can delete database objects

00:16:07,670 --> 00:16:13,260
anti-spam measures hackers and spammers

00:16:10,470 --> 00:16:15,840
have become smarter your attacks are not

00:16:13,260 --> 00:16:18,390
limited to database table they use both

00:16:15,840 --> 00:16:20,760
BOTS to fill forms and submit comments

00:16:18,390 --> 00:16:23,660
on your site find out whether capture or

00:16:20,760 --> 00:16:26,970
a CAPTCHA are implemented in the forms

00:16:23,660 --> 00:16:29,310
avoid file uploads if you do need them

00:16:26,970 --> 00:16:31,680
some options are to rename the file on

00:16:29,310 --> 00:16:33,720
upload to ensure the correct X file

00:16:31,680 --> 00:16:36,720
extension or to change the file

00:16:33,720 --> 00:16:38,730
permissions so it cannot be executed use

00:16:36,720 --> 00:16:41,070
vulnerability scanning tools to perform

00:16:38,730 --> 00:16:45,570
automated security testing on your site

00:16:41,070 --> 00:16:48,450
tools like nikto sukui security headers

00:16:45,570 --> 00:16:51,210
and so on some other tools you can

00:16:48,450 --> 00:16:53,580
consider security review which offers a

00:16:51,210 --> 00:16:55,190
comprehensive report on areas that are

00:16:53,580 --> 00:16:59,220
prone to malicious attacks

00:16:55,190 --> 00:17:02,220
security kit which prevents XSS and CSRF

00:16:59,220 --> 00:17:04,560
and click jacking attacks hack which

00:17:02,220 --> 00:17:07,500
which checks for modifications done to

00:17:04,560 --> 00:17:11,959
the core and contribute and coder to

00:17:07,500 --> 00:17:14,370
check that the texts are sanitized

00:17:11,959 --> 00:17:16,260
fronted security flaws are mostly the

00:17:14,370 --> 00:17:18,780
result of tricking some components to

00:17:16,260 --> 00:17:21,600
misuse their authority the techniques to

00:17:18,780 --> 00:17:24,120
do can be unexpectedly smart and hard to

00:17:21,600 --> 00:17:26,699
foresee but some actions can be taken to

00:17:24,120 --> 00:17:29,180
limit the side effects all sides have

00:17:26,699 --> 00:17:32,340
holes what we can do is ask ourselves

00:17:29,180 --> 00:17:34,230
when will they be exploited how can this

00:17:32,340 --> 00:17:37,800
piece of code be tricked to misuse its

00:17:34,230 --> 00:17:39,570
authorization the single most important

00:17:37,800 --> 00:17:42,000
lesson you can learn about website

00:17:39,570 --> 00:17:44,580
security is to never trust data from the

00:17:42,000 --> 00:17:46,320
browser this includes get request data

00:17:44,580 --> 00:17:49,710
in URL parameter

00:17:46,320 --> 00:17:52,919
post data HTTP headers and cookies user

00:17:49,710 --> 00:17:56,159
uploaded files and so on always check

00:17:52,919 --> 00:18:00,000
and sanitize all incoming data always

00:17:56,159 --> 00:18:02,070
always assume the worst these are some

00:18:00,000 --> 00:18:06,269
of the main places where I got my

00:18:02,070 --> 00:18:09,450
information from and I guess I have a

00:18:06,269 --> 00:18:14,909
couple of minutes for some questions if

00:18:09,450 --> 00:18:17,789
anyone has any please be kind I cannot

00:18:14,909 --> 00:18:20,279
see if anyone has written their hands so

00:18:17,789 --> 00:18:26,250
I'm just gonna say nobody has questions

00:18:20,279 --> 00:18:27,929
and I can go home thank you know if you

00:18:26,250 --> 00:18:30,960
do have questions I'm gonna be outside

00:18:27,929 --> 00:18:35,789
there and I promise I won't have so many

00:18:30,960 --> 00:18:39,230
nerves on one-to-one talks so thank you

00:18:35,789 --> 00:18:39,230
all for your patience and presence

00:18:42,160 --> 00:18:47,650
hope you all have a nice day and enjoy

00:18:44,809 --> 00:18:47,650

YouTube URL: https://www.youtube.com/watch?v=VsOFvJdHeKI


