Title: DrupalCon Amsterdam 2019:Next steps on modernizing the Drupal theme system (Drupal 9 and beyond)
Publication date: 2019-10-29
Playlist: DrupalCon Amsterdam 2019
Description: 
	Room: Auditorium
Presenter: Lauri Eskola
Description: Drupal's theme system is too complex to use. Doing basic tasks such as changing markup, preprocessing data and attaching new CSS and JavaScript takes a lot of knowledge.

Drupal theme system, which is over a decade old system also fails to support some of the modern software engineering practices applied commonly these days, such as semver and component driven development. Support to both of these has been added as an hacked-on after-thought, that have big downsides.

On this session, I will give an overview of what changes has been made prior to Drupal 9 to tackle some of these issues. I will also walk through some of the ideas on how we could further improve the frontend development experience during the development of Drupal 9 minor releases.
Captions: 
	00:00:01,790 --> 00:00:10,110
the I'm gonna start yeah okay I think

00:00:07,230 --> 00:00:12,059
it's time does anyone want a team time

00:00:10,110 --> 00:00:13,440
there's some in the front so if you come

00:00:12,059 --> 00:00:14,309
sit in the front you will get a team

00:00:13,440 --> 00:00:17,820
time from sallee

00:00:14,309 --> 00:00:32,640
so I do recommend coming in the front at

00:00:17,820 --> 00:00:34,410
least one person wait ok so I'm going to

00:00:32,640 --> 00:00:36,329
be presenting today about the next steps

00:00:34,410 --> 00:00:38,460
of modernizing triple team system I have

00:00:36,329 --> 00:00:40,620
some ideas and thoughts these are just

00:00:38,460 --> 00:00:46,860
proposals at this point so any feedback

00:00:40,620 --> 00:00:49,649
is very much appreciated and yeah I hope

00:00:46,860 --> 00:00:52,110
you are excited about to see what is

00:00:49,649 --> 00:00:54,120
going to happen next so my name is

00:00:52,110 --> 00:00:56,340
Laurie escola I'm a senior software

00:00:54,120 --> 00:00:57,989
engineer currently based in Bangkok

00:00:56,340 --> 00:00:59,940
working for a Korea in the Drupal

00:00:57,989 --> 00:01:02,219
acceleration team and I'm also a

00:00:59,940 --> 00:01:06,540
front-end framework manager and a team

00:01:02,219 --> 00:01:07,890
system maintainer so as we all know

00:01:06,540 --> 00:01:08,850
Drupal I ship with some great

00:01:07,890 --> 00:01:13,310
improvements to the front-end

00:01:08,850 --> 00:01:16,610
development some of these changes where

00:01:13,310 --> 00:01:18,720
features such as TWIC library system

00:01:16,610 --> 00:01:20,880
stable team which provides blackfurs

00:01:18,720 --> 00:01:23,310
compatibility so that your teams don't

00:01:20,880 --> 00:01:25,290
break in between minor releases a class

00:01:23,310 --> 00:01:28,470
II team which is based on stable for

00:01:25,290 --> 00:01:30,150
sensible defaults in markup basically as

00:01:28,470 --> 00:01:36,900
the name suggests it provides classes

00:01:30,150 --> 00:01:38,189
and a lot more so a few years ago my

00:01:36,900 --> 00:01:39,840
dad's company needed a new website

00:01:38,189 --> 00:01:41,130
because their old website was launched

00:01:39,840 --> 00:01:42,950
probably like seven years ago at that

00:01:41,130 --> 00:01:45,600
point and it looked pretty dated

00:01:42,950 --> 00:01:47,790
basically their website had had two

00:01:45,600 --> 00:01:50,130
iterations in the last 18 years and

00:01:47,790 --> 00:01:52,350
there's no reason to believe that this

00:01:50,130 --> 00:01:54,840
would accelerate because the website is

00:01:52,350 --> 00:01:57,979
just not key to their business let me

00:01:54,840 --> 00:01:57,979
turn off my notifications

00:02:05,179 --> 00:02:18,890
okay yeah so I was building a website to

00:02:12,599 --> 00:02:18,890
my dad and now the clicker doesn't work

00:02:20,480 --> 00:02:25,049
so here's a few screenshots how does you

00:02:23,670 --> 00:02:26,879
see used to look like

00:02:25,049 --> 00:02:30,150
I use the Wayback Machine did they go

00:02:26,879 --> 00:02:32,730
take some screenshots so the screenshots

00:02:30,150 --> 00:02:34,200
on the left is from 2001 this is how it

00:02:32,730 --> 00:02:36,239
looked like on the first iteration and

00:02:34,200 --> 00:02:37,799
the one on the right looks like it look

00:02:36,239 --> 00:02:40,079
like in T doesn't live in this was

00:02:37,799 --> 00:02:42,720
probably built in more like 2009 2010

00:02:40,079 --> 00:02:43,200
but the most recent screenshot with this

00:02:42,720 --> 00:02:45,750
one first

00:02:43,200 --> 00:02:48,360
from 2011 there was like six years break

00:02:45,750 --> 00:02:50,549
for some reason for them archiving this

00:02:48,360 --> 00:02:51,750
website say it was the most this was the

00:02:50,549 --> 00:02:53,190
oldest version of the second iteration

00:02:51,750 --> 00:02:57,180
that I could find and it was actually

00:02:53,190 --> 00:02:58,019
built by me but yeah as you can see it

00:02:57,180 --> 00:02:59,250
looks pretty dated

00:02:58,019 --> 00:03:00,690
so I wanted to help him built this

00:02:59,250 --> 00:03:02,670
website give me that I have some some

00:03:00,690 --> 00:03:04,470
knowledge about building websites so

00:03:02,670 --> 00:03:07,079
doctor polite and build a site using all

00:03:04,470 --> 00:03:08,639
of the new Drupal 8 capabilities since

00:03:07,079 --> 00:03:11,130
the site was a small brochure type

00:03:08,639 --> 00:03:13,829
website theming was actually one of the

00:03:11,130 --> 00:03:16,950
most time-consuming tasks on that

00:03:13,829 --> 00:03:19,739
project so I build a custom theme on top

00:03:16,950 --> 00:03:21,299
of classy a lot of the markups were now

00:03:19,739 --> 00:03:24,810
in template so it was possible to create

00:03:21,299 --> 00:03:25,260
the markup we need it and it was quite

00:03:24,810 --> 00:03:27,630
easy

00:03:25,260 --> 00:03:29,430
at least until a certain point I also

00:03:27,630 --> 00:03:31,530
built a small component system by using

00:03:29,430 --> 00:03:34,049
Twix and clothes to reuse some of the

00:03:31,530 --> 00:03:37,440
template files everything went well and

00:03:34,049 --> 00:03:38,970
the project is now finished however what

00:03:37,440 --> 00:03:40,410
I realized was that Drupal Dyne is

00:03:38,970 --> 00:03:42,840
planned to be released the next summer

00:03:40,410 --> 00:03:45,239
and I had to make some plans on how are

00:03:42,840 --> 00:03:48,930
we going to continue running decide on

00:03:45,239 --> 00:03:51,780
Drupal 9 luckily we have a lot of

00:03:48,930 --> 00:03:53,700
tooling that allows you to check what

00:03:51,780 --> 00:03:56,790
needs to be changed before the next

00:03:53,700 --> 00:03:59,190
major release however one of the things

00:03:56,790 --> 00:04:01,169
that I realized we had planned to be

00:03:59,190 --> 00:04:03,540
doing at the next major release was to

00:04:01,169 --> 00:04:07,799
rip out stable and replaced with a new

00:04:03,540 --> 00:04:10,980
version of stable and it could be a bit

00:04:07,799 --> 00:04:12,900
hard for some for us to actually test if

00:04:10,980 --> 00:04:14,760
there's anything that broke on the site

00:04:12,900 --> 00:04:15,780
because if the changes could be pretty

00:04:14,760 --> 00:04:18,060
subtle

00:04:15,780 --> 00:04:21,359
or they could be specific to certain

00:04:18,060 --> 00:04:22,980
browsers you don't really know what kind

00:04:21,359 --> 00:04:25,080
of changes could it cost because of its

00:04:22,980 --> 00:04:25,650
dislike some minor markup changes that

00:04:25,080 --> 00:04:29,850
are coming

00:04:25,650 --> 00:04:32,550
as a result but luckily some of these

00:04:29,850 --> 00:04:34,620
plans for adjusted later on on the on

00:04:32,550 --> 00:04:38,460
the process that was just the original

00:04:34,620 --> 00:04:41,130
plan that we had Drupal 8 is is using

00:04:38,460 --> 00:04:42,990
this continuous upgrade path and we had

00:04:41,130 --> 00:04:48,450
to kind of do a little bit of work

00:04:42,990 --> 00:04:51,240
trying to adjust our our team system to

00:04:48,450 --> 00:04:53,040
work with this this is actually pretty

00:04:51,240 --> 00:04:54,480
good because this gives developers time

00:04:53,040 --> 00:04:57,990
to adjust their code before the old

00:04:54,480 --> 00:04:59,580
behavior gets completely removed but

00:04:57,990 --> 00:05:01,830
it's pretty interesting in the front end

00:04:59,580 --> 00:05:04,890
because basically any kind of change as

00:05:01,830 --> 00:05:06,480
I say could consist of easy break how

00:05:04,890 --> 00:05:08,870
can we actually make changes to our

00:05:06,480 --> 00:05:12,780
markup and this continuous upgrade path

00:05:08,870 --> 00:05:15,990
so I have a small exercise here where we

00:05:12,780 --> 00:05:20,010
could try to figure out together of how

00:05:15,990 --> 00:05:23,250
could we break this markup so I have on

00:05:20,010 --> 00:05:25,350
the top I have a template and CSS that

00:05:23,250 --> 00:05:28,650
is in Class C so I'm setting a very

00:05:25,350 --> 00:05:31,110
basic span with a class and some styles

00:05:28,650 --> 00:05:34,890
do that however that has been overridden

00:05:31,110 --> 00:05:39,060
by the child team they just changed

00:05:34,890 --> 00:05:42,240
disbanded if for some reason and that's

00:05:39,060 --> 00:05:44,400
all does anyone have any ideas how we

00:05:42,240 --> 00:05:47,700
could change the CSS so that it would

00:05:44,400 --> 00:05:50,220
break in this combination basically

00:05:47,700 --> 00:05:52,680
anything that would just cause at the

00:05:50,220 --> 00:05:54,900
render in a way we didn't expect when we

00:05:52,680 --> 00:05:58,110
made the change so it works with the set

00:05:54,900 --> 00:06:00,060
of markup and CSS to be having classy

00:05:58,110 --> 00:06:02,010
but not with the one that we have in the

00:06:00,060 --> 00:06:04,470
active team so we have some boxes if

00:06:02,010 --> 00:06:10,440
anyone who wants to give a give a try

00:06:04,470 --> 00:06:13,110
okay yes change to CSS to break it today

00:06:10,440 --> 00:06:17,340
works with classy but it doesn't work

00:06:13,110 --> 00:06:21,750
with the you can talk to the box

00:06:17,340 --> 00:06:23,630
it's a Mac oh can we get the box turned

00:06:21,750 --> 00:06:27,150
on

00:06:23,630 --> 00:06:30,930
okay so you can put span elements and

00:06:27,150 --> 00:06:34,740
then when you pass to do this yes that

00:06:30,930 --> 00:06:37,050
would definitely break the CSS awesome

00:06:34,740 --> 00:06:43,920
does anyone have any other ideas how we

00:06:37,050 --> 00:06:46,290
could break this okay content has a

00:06:43,920 --> 00:06:48,060
horrible giant render array hidden in it

00:06:46,290 --> 00:06:49,950
and we don't actually know what's in

00:06:48,060 --> 00:06:52,650
there yeah that's that's a separate

00:06:49,950 --> 00:06:56,700
that's a separate problem but it's a

00:06:52,650 --> 00:07:01,350
thing as well okay I'm gonna give an

00:06:56,700 --> 00:07:03,630
example what if we change the background

00:07:01,350 --> 00:07:06,150
color to yellow it's a little bit more

00:07:03,630 --> 00:07:09,450
subtle because of the span is actually

00:07:06,150 --> 00:07:11,190
display:inline by default so what we

00:07:09,450 --> 00:07:13,650
want to do is we want to use kind of a

00:07:11,190 --> 00:07:16,890
highlight for this specific word here

00:07:13,650 --> 00:07:19,170
but since this this team changed it into

00:07:16,890 --> 00:07:22,410
your diff which makes it a display block

00:07:19,170 --> 00:07:24,270
which means that it behaves in a very

00:07:22,410 --> 00:07:26,550
different way and the background is not

00:07:24,270 --> 00:07:29,460
a highlight anymore it's a background of

00:07:26,550 --> 00:07:31,380
a block type or for death so yeah it's

00:07:29,460 --> 00:07:34,920
it's it's it starts to get more subtle

00:07:31,380 --> 00:07:36,810
it's obviously not as broken but it

00:07:34,920 --> 00:07:38,580
behaves in a very different way as we

00:07:36,810 --> 00:07:42,510
might have expected with the mark-up

00:07:38,580 --> 00:07:44,460
that we have in Class C let's take just

00:07:42,510 --> 00:07:47,930
another example instead of overwriting

00:07:44,460 --> 00:07:51,750
the template what is happening is that

00:07:47,930 --> 00:07:55,980
the sub judice up team is now extending

00:07:51,750 --> 00:07:58,650
the CSS with some new CSS so we have the

00:07:55,980 --> 00:08:00,300
color hot pink which we set in Class C

00:07:58,650 --> 00:08:03,360
and then we set a background color

00:08:00,300 --> 00:08:04,650
yellow in that sub team does anyone have

00:08:03,360 --> 00:08:09,770
any ideas how we could change the

00:08:04,650 --> 00:08:09,770
template or to see us us to break this

00:08:14,170 --> 00:08:25,610
no one has any any thoughts no one's to

00:08:17,060 --> 00:08:27,500
give it give a try change the element

00:08:25,610 --> 00:08:29,720
that was in coffee from spam to

00:08:27,500 --> 00:08:34,690
something else yeah that would be a

00:08:29,720 --> 00:08:37,490
breaking change definitely yes what else

00:08:34,690 --> 00:08:39,710
again things could be more subtle so

00:08:37,490 --> 00:08:40,850
what if we change the color to yellow it

00:08:39,710 --> 00:08:44,420
would work with the white background

00:08:40,850 --> 00:08:45,860
right but we didn't know what happened

00:08:44,420 --> 00:08:47,270
in the sub-teams they changed the

00:08:45,860 --> 00:08:49,280
background to yellow so now there's a

00:08:47,270 --> 00:08:51,800
conflict maybe it's not always the exact

00:08:49,280 --> 00:08:54,620
same color maybe it could be something a

00:08:51,800 --> 00:08:56,780
little bit something between and it

00:08:54,620 --> 00:08:58,760
doesn't work well anymore maybe change

00:08:56,780 --> 00:09:03,050
the background into gray and didn't work

00:08:58,760 --> 00:09:05,030
well but with yellow what if we started

00:09:03,050 --> 00:09:07,910
just going a little bit more crazier and

00:09:05,030 --> 00:09:10,600
we started refactoring our our CSS

00:09:07,910 --> 00:09:14,960
classes that would obviously break the

00:09:10,600 --> 00:09:17,180
the output as well so yeah as you can

00:09:14,960 --> 00:09:21,860
see predicting the outcome of front-end

00:09:17,180 --> 00:09:23,660
change is it's really hard this is cause

00:09:21,860 --> 00:09:26,210
the root cause for this problem is the

00:09:23,660 --> 00:09:30,080
fact that we have this kind of strange

00:09:26,210 --> 00:09:32,900
shared ownership of markup and CSS so we

00:09:30,080 --> 00:09:37,070
have different extensions that can have

00:09:32,900 --> 00:09:43,250
a partial ownership of rendering some

00:09:37,070 --> 00:09:45,350
output on the page so basically this

00:09:43,250 --> 00:09:46,910
problem has causes to make very little

00:09:45,350 --> 00:09:49,340
progress because we want to avoid making

00:09:46,910 --> 00:09:51,740
changes as much as possible this is

00:09:49,340 --> 00:09:53,660
obviously good for stability but it's

00:09:51,740 --> 00:09:55,010
not very good for the progress because

00:09:53,660 --> 00:10:00,290
of you I really make that many

00:09:55,010 --> 00:10:01,580
improvements so let's see what we

00:10:00,290 --> 00:10:04,330
decided to do with stable in the

00:10:01,580 --> 00:10:06,380
continuous upright path Google 9 will

00:10:04,330 --> 00:10:08,900
essentially ship with both Drupal 8

00:10:06,380 --> 00:10:11,000
stable and Drupal 9 stable Drupal 8

00:10:08,900 --> 00:10:15,200
stable will be likely deprecated in

00:10:11,000 --> 00:10:17,900
Drupal 9 and removed in Drupal 10 we are

00:10:15,200 --> 00:10:19,670
still figuring onto specific mechanics

00:10:17,900 --> 00:10:20,990
how this will all work but will we

00:10:19,670 --> 00:10:23,240
assume that you play stable will

00:10:20,990 --> 00:10:27,649
continue to exist in contrib there will

00:10:23,240 --> 00:10:29,600
be some way to run run Drupal 8 stable

00:10:27,649 --> 00:10:31,129
even after it has been removed and

00:10:29,600 --> 00:10:32,869
deprecated in Drupal core I don't know

00:10:31,129 --> 00:10:34,639
exactly what are the mechanics but there

00:10:32,869 --> 00:10:38,689
has to be a way to be able to do that in

00:10:34,639 --> 00:10:41,509
the future we've also changed the the

00:10:38,689 --> 00:10:44,600
base team property do you be required

00:10:41,509 --> 00:10:46,279
configuration in Drupal 9 because of we

00:10:44,600 --> 00:10:49,699
have multiple versions of stable team in

00:10:46,279 --> 00:10:53,720
Drupal 9 so we can assume stable as to

00:10:49,699 --> 00:10:56,300
be for value anymore so how about classy

00:10:53,720 --> 00:10:59,569
this is this is basically just how this

00:10:56,300 --> 00:11:01,459
is soft in the scope of stable stable

00:10:59,569 --> 00:11:02,839
can't do innovation in modules and shape

00:11:01,459 --> 00:11:06,139
new versions in every major release

00:11:02,839 --> 00:11:08,290
which kind of works because of its

00:11:06,139 --> 00:11:11,300
doesn't really have that many opinions

00:11:08,290 --> 00:11:13,100
so how most of the sites are using

00:11:11,300 --> 00:11:15,379
classic just like my site that I built

00:11:13,100 --> 00:11:17,720
for my dad and classy depends on stable

00:11:15,379 --> 00:11:22,339
how are we going to continues support

00:11:17,720 --> 00:11:24,769
and classy in Drupal 9 so prior to

00:11:22,339 --> 00:11:28,220
Drupal 9 or markup changes were done in

00:11:24,769 --> 00:11:31,730
between major releases but from Drupal 8

00:11:28,220 --> 00:11:33,529
onwards we are providing this continuous

00:11:31,730 --> 00:11:35,540
upgrade path which means that all

00:11:33,529 --> 00:11:38,089
backwards compatibility breaks changes

00:11:35,540 --> 00:11:40,279
must be done in in like in a way where

00:11:38,089 --> 00:11:43,550
we deprecate the old behavior and we

00:11:40,279 --> 00:11:45,139
remove it in the next major major

00:11:43,550 --> 00:11:46,939
version which means that there's a

00:11:45,139 --> 00:11:50,240
warning is in between but it can be a

00:11:46,939 --> 00:11:51,740
bit overkill for us to deprecated the

00:11:50,240 --> 00:11:55,879
role templates just because we wanted to

00:11:51,740 --> 00:11:57,800
change the markup in one small part of

00:11:55,879 --> 00:12:04,730
that template we would end up with a lot

00:11:57,800 --> 00:12:06,889
of templates also classes will have to

00:12:04,730 --> 00:12:09,259
continue extending Drupal 8 stable for

00:12:06,889 --> 00:12:11,329
backwards compatibility we don't know if

00:12:09,259 --> 00:12:14,389
class is compatible with your poll 9

00:12:11,329 --> 00:12:16,519
stable so we don't and we don't really

00:12:14,389 --> 00:12:18,139
have specific mechanics to figure out if

00:12:16,519 --> 00:12:20,809
they are compatible like we don't know

00:12:18,139 --> 00:12:22,249
what kind of things could break because

00:12:20,809 --> 00:12:25,279
if so class it doesn't really have a

00:12:22,249 --> 00:12:27,379
design so it's even harder for us to

00:12:25,279 --> 00:12:29,629
judge if it's broken or not it's very

00:12:27,379 --> 00:12:34,670
it's very much on the meta level if it's

00:12:29,629 --> 00:12:40,160
broken or not so one of the ideas to

00:12:34,670 --> 00:12:41,390
combat this is to ship those classes the

00:12:40,160 --> 00:12:42,860
class II does ship as a base

00:12:41,390 --> 00:12:44,750
steam right now you know using a

00:12:42,860 --> 00:12:47,570
different mechanic and one of the ideas

00:12:44,750 --> 00:12:48,920
was to use a starter kit so that instead

00:12:47,570 --> 00:12:51,770
of providing a base steam it would

00:12:48,920 --> 00:12:55,390
provide a common that creates your new

00:12:51,770 --> 00:12:55,390
team with a certain starting point

00:12:55,570 --> 00:13:01,310
essentially the mark-up rendered on the

00:12:57,770 --> 00:13:03,440
site would remain the same but it would

00:13:01,310 --> 00:13:06,500
be just about how it is structured and

00:13:03,440 --> 00:13:08,420
in our teams the good thing about this

00:13:06,500 --> 00:13:10,220
is that the starter kit could be changed

00:13:08,420 --> 00:13:11,900
between minor releases since it's just a

00:13:10,220 --> 00:13:16,970
starting point you are not really

00:13:11,900 --> 00:13:19,370
relying on on on a future changes that

00:13:16,970 --> 00:13:21,380
could happen for that team the pros of

00:13:19,370 --> 00:13:23,600
this approach would be that it's going

00:13:21,380 --> 00:13:25,940
to be way easier for core therewell

00:13:23,600 --> 00:13:27,680
developers to maintain this because they

00:13:25,940 --> 00:13:29,000
can make changes pretty much pretty much

00:13:27,680 --> 00:13:30,890
freely because we don't really have to

00:13:29,000 --> 00:13:35,690
care about the consequences of it

00:13:30,890 --> 00:13:38,720
changing someone's production site it

00:13:35,690 --> 00:13:42,620
would also provide some positive change

00:13:38,720 --> 00:13:45,290
for teamers because of it would it would

00:13:42,620 --> 00:13:47,330
essentially move most templates and CSS

00:13:45,290 --> 00:13:48,860
into a single team rather than having to

00:13:47,330 --> 00:13:51,650
find them from different projects on

00:13:48,860 --> 00:13:54,710
different folders this would be much

00:13:51,650 --> 00:13:56,030
easier for someone who is voice new and

00:13:54,710 --> 00:13:58,100
doesn't necessarily understand the team

00:13:56,030 --> 00:13:59,930
system that well they would have to take

00:13:58,100 --> 00:14:01,490
into figure out which of the different

00:13:59,930 --> 00:14:02,930
templates that we have it's being loaded

00:14:01,490 --> 00:14:06,290
because they could just take a look at

00:14:02,930 --> 00:14:09,290
the one the one project and everything

00:14:06,290 --> 00:14:11,990
would be inside there however one of the

00:14:09,290 --> 00:14:13,520
biggest cons of this approach is the

00:14:11,990 --> 00:14:15,380
potential maintenance spirit and decide

00:14:13,520 --> 00:14:17,780
owners because it essentially means that

00:14:15,380 --> 00:14:19,580
we moved the maintenance burden of

00:14:17,780 --> 00:14:22,100
maintaining those templates to site

00:14:19,580 --> 00:14:24,020
owners or our team maintainer x' because

00:14:22,100 --> 00:14:27,080
they would have to have a copy of every

00:14:24,020 --> 00:14:29,090
template and CSS file the the positive

00:14:27,080 --> 00:14:31,550
dole is that we look into how many

00:14:29,090 --> 00:14:33,440
security releases there was in the

00:14:31,550 --> 00:14:35,600
Drupal 8 release cycle that changed

00:14:33,440 --> 00:14:37,550
templates and we couldn't find any so

00:14:35,600 --> 00:14:39,170
that's a at least encouraging which

00:14:37,550 --> 00:14:40,760
means that at least there wouldn't have

00:14:39,170 --> 00:14:43,220
been security issues that could have

00:14:40,760 --> 00:14:47,030
affected those templates that someone

00:14:43,220 --> 00:14:48,830
was was running in their teams this also

00:14:47,030 --> 00:14:50,150
saw only solves the problem in the scope

00:14:48,830 --> 00:14:51,800
of core which is kind of unfortunate

00:14:50,150 --> 00:14:54,710
because contrib is actually running the

00:14:51,800 --> 00:14:56,839
integer same problem

00:14:54,710 --> 00:14:58,640
so let's take a look at into different

00:14:56,839 --> 00:15:00,380
kind of variations of overrides this is

00:14:58,640 --> 00:15:02,779
kind of already what I was demonstrating

00:15:00,380 --> 00:15:04,460
earlier so one of the variations is that

00:15:02,779 --> 00:15:06,440
the template is overridden without

00:15:04,460 --> 00:15:08,690
overriding their respective CSS files

00:15:06,440 --> 00:15:11,750
and this is actually risky because of

00:15:08,690 --> 00:15:13,610
the CSS files could be changed in future

00:15:11,750 --> 00:15:17,000
in and it might not be compatible with

00:15:13,610 --> 00:15:18,320
your templates also the CSS files could

00:15:17,000 --> 00:15:20,180
be overwritten or extended without

00:15:18,320 --> 00:15:21,950
actually overriding the templates that

00:15:20,180 --> 00:15:24,260
are related and this is also of risky

00:15:21,950 --> 00:15:25,130
because of who knows how the templates

00:15:24,260 --> 00:15:27,200
are going to be changed in the future

00:15:25,130 --> 00:15:31,459
your CSS might not be compatible with

00:15:27,200 --> 00:15:33,290
that but if you actually over run if you

00:15:31,459 --> 00:15:35,750
took ownership of both templates and CSS

00:15:33,290 --> 00:15:37,430
files you wouldn't have any risk because

00:15:35,750 --> 00:15:39,440
of none of the changes that are

00:15:37,430 --> 00:15:44,149
happening in core wouldn't trickle down

00:15:39,440 --> 00:15:48,370
into your personal team and you would

00:15:44,149 --> 00:15:52,730
have to co-ownership of that part so

00:15:48,370 --> 00:15:54,589
this started this made me wondering

00:15:52,730 --> 00:15:57,020
could we actually prevent partial over

00:15:54,589 --> 00:16:00,760
eyes what if he bundled CSS and

00:15:57,020 --> 00:16:02,839
templates together so one of the ideas

00:16:00,760 --> 00:16:04,310
which is kind of competing to the

00:16:02,839 --> 00:16:06,170
starter kit but not necessarily they are

00:16:04,310 --> 00:16:07,940
not there's some over overlap between

00:16:06,170 --> 00:16:10,700
them we could actually do both of them

00:16:07,940 --> 00:16:13,190
they are not necessarily overlapping in

00:16:10,700 --> 00:16:15,380
that sense but if we did just for

00:16:13,190 --> 00:16:17,870
example if you just did this change it

00:16:15,380 --> 00:16:19,700
could be enough for us there's still

00:16:17,870 --> 00:16:22,250
reasons to do the start a good idea even

00:16:19,700 --> 00:16:24,770
if we did this but basically if we would

00:16:22,250 --> 00:16:28,279
load CSS unknown functional JavaScript

00:16:24,770 --> 00:16:29,839
in templates it wouldn't mean that once

00:16:28,279 --> 00:16:34,160
you override a template you would have

00:16:29,839 --> 00:16:36,890
to take ownership of the CSS and

00:16:34,160 --> 00:16:40,130
JavaScript RS related to that template

00:16:36,890 --> 00:16:41,329
when you override it this would come

00:16:40,130 --> 00:16:42,740
with the benefit that you don't

00:16:41,329 --> 00:16:44,300
necessarily have to take ownership of

00:16:42,740 --> 00:16:46,970
all of the templates and all of the

00:16:44,300 --> 00:16:48,620
markup that you're four ships with but

00:16:46,970 --> 00:16:52,459
you would take ownership of all of the

00:16:48,620 --> 00:16:56,089
templates and CSS that you won't want to

00:16:52,459 --> 00:16:58,700
customize in your team which is great

00:16:56,089 --> 00:17:00,829
this also soft markup by first

00:16:58,700 --> 00:17:03,260
compatibility problems for contract

00:17:00,829 --> 00:17:07,010
which the starterkit' problem starter

00:17:03,260 --> 00:17:09,530
kit idea doesn't really do

00:17:07,010 --> 00:17:11,150
so this is going into ended up weeds

00:17:09,530 --> 00:17:14,360
just to give an idea how this could work

00:17:11,150 --> 00:17:17,120
I wanted to show you a trick frontmatter

00:17:14,360 --> 00:17:19,459
which is a syntax that is used by Jekyll

00:17:17,120 --> 00:17:22,089
and Drupal core is actually already

00:17:19,459 --> 00:17:26,600
using this in an experimental module

00:17:22,089 --> 00:17:28,700
help topics and we could use this for

00:17:26,600 --> 00:17:32,570
loading related CSS and JavaScript files

00:17:28,700 --> 00:17:34,340
and as you can probably guess if you

00:17:32,570 --> 00:17:35,929
overrode this template

00:17:34,340 --> 00:17:37,400
it would also overwrite all of the

00:17:35,929 --> 00:17:39,260
configuration and you would have to be

00:17:37,400 --> 00:17:42,559
specified that when it would be pointing

00:17:39,260 --> 00:17:44,929
to your own team and if you don't copy

00:17:42,559 --> 00:17:48,080
the styles of CSS it would be an empty

00:17:44,929 --> 00:17:50,900
file it would be 404 so you have to also

00:17:48,080 --> 00:17:52,669
copy the CSS file and then you have the

00:17:50,900 --> 00:17:55,460
ownership of everything that is that is

00:17:52,669 --> 00:17:57,470
related to this template this could even

00:17:55,460 --> 00:17:59,840
potentially help us get a bit of stable

00:17:57,470 --> 00:18:06,470
in future which could even further

00:17:59,840 --> 00:18:09,350
simplify our team system architecture so

00:18:06,470 --> 00:18:11,360
the conclusions that we can make as a

00:18:09,350 --> 00:18:13,820
result of this is the triple nine will

00:18:11,360 --> 00:18:15,470
ship with two versions of stable team we

00:18:13,820 --> 00:18:17,510
don't know yet if the Drupal a stable

00:18:15,470 --> 00:18:19,460
team will be deprecated or not but it

00:18:17,510 --> 00:18:21,799
will be the deprecated at some point of

00:18:19,460 --> 00:18:24,650
20.9 lifecycle at least that's what we

00:18:21,799 --> 00:18:27,169
know Drupal 9 will continue the ship

00:18:24,650 --> 00:18:28,610
with class II and it will continue to

00:18:27,169 --> 00:18:30,350
exist in future so if you're using

00:18:28,610 --> 00:18:31,790
classy you don't have to panic right now

00:18:30,350 --> 00:18:34,070
it's gonna be in Contra it's gonna be

00:18:31,790 --> 00:18:37,730
somewhere so you can continue to run

00:18:34,070 --> 00:18:39,440
your teams that you've built and I think

00:18:37,730 --> 00:18:41,000
we should continue wearing the idea of

00:18:39,440 --> 00:18:43,910
converting Class C into your starter kit

00:18:41,000 --> 00:18:47,020
as well as bundling the CSS and markup

00:18:43,910 --> 00:18:49,700
because this could potentially come with

00:18:47,020 --> 00:18:56,929
radical improvements to DES to the cost

00:18:49,700 --> 00:18:59,990
of maintenance and so we can do some

00:18:56,929 --> 00:19:01,280
questions we have a box here and if you

00:18:59,990 --> 00:19:08,179
want you can have a team ton

00:19:01,280 --> 00:19:10,820
after you've asked the question so

00:19:08,179 --> 00:19:15,850
there's a hand whatever I'm gonna try to

00:19:10,820 --> 00:19:15,850
troll this one but it's pretty far Oh

00:19:18,230 --> 00:19:24,020
I actually don't really see hey I don't

00:19:21,470 --> 00:19:28,480
see that well because I'm blinded by the

00:19:24,020 --> 00:19:31,340
lights I'm making some excuses but okay

00:19:28,480 --> 00:19:33,770
thanks Larry that's very interesting is

00:19:31,340 --> 00:19:36,200
there any consideration for the last

00:19:33,770 --> 00:19:38,600
item you're showing where if we go with

00:19:36,200 --> 00:19:40,910
this approach and you copy a template

00:19:38,600 --> 00:19:42,640
file you must copy to CSS file to go

00:19:40,910 --> 00:19:45,080
along with it and the JavaScript file

00:19:42,640 --> 00:19:46,790
but perhaps you're using say patterned I

00:19:45,080 --> 00:19:49,820
have our storybook or something and now

00:19:46,790 --> 00:19:52,880
you've got your CSS in one place and a

00:19:49,820 --> 00:20:01,880
CSS file that you don't need beside your

00:19:52,880 --> 00:20:03,200
template file so I see that you're

00:20:01,880 --> 00:20:04,549
asking it from a point of view of

00:20:03,200 --> 00:20:08,120
component library and was there any

00:20:04,549 --> 00:20:09,860
consideration given to that yes so I

00:20:08,120 --> 00:20:11,809
think this would work well with

00:20:09,860 --> 00:20:14,840
component libraries because essentially

00:20:11,809 --> 00:20:17,630
it would allow them to include the

00:20:14,840 --> 00:20:19,580
loading of the CSS and JavaScript inside

00:20:17,630 --> 00:20:21,679
the component itself because it would be

00:20:19,580 --> 00:20:23,150
in the template and the template would

00:20:21,679 --> 00:20:25,640
be containing the contextual information

00:20:23,150 --> 00:20:27,440
about that component and in future if

00:20:25,640 --> 00:20:30,470
the component library needs order type

00:20:27,440 --> 00:20:34,760
of contextual information it could be

00:20:30,470 --> 00:20:38,690
provided using the formatter syntax it's

00:20:34,760 --> 00:20:42,799
it should be extensible but I don't it

00:20:38,690 --> 00:20:46,309
hasn't been a main driver to this to be

00:20:42,799 --> 00:20:48,470
honest but I think it could aid the

00:20:46,309 --> 00:20:50,799
effort of making Drupal more component

00:20:48,470 --> 00:20:50,799
friendly

00:20:54,620 --> 00:21:01,100
Lari great talk is there a reason why

00:20:58,730 --> 00:21:03,500
for example frontmatter was being used

00:21:01,100 --> 00:21:06,050
and not something like webpack which can

00:21:03,500 --> 00:21:08,150
do very similar things it's because it's

00:21:06,050 --> 00:21:12,230
not in the template in a different file

00:21:08,150 --> 00:21:15,770
or so the front matter and for this

00:21:12,230 --> 00:21:16,970
specific purpose is it's not something

00:21:15,770 --> 00:21:18,800
that has been decided it was just an

00:21:16,970 --> 00:21:20,450
example and it's obviously exist in

00:21:18,800 --> 00:21:23,990
Drupal core and it's verse very well for

00:21:20,450 --> 00:21:25,730
the example of help topics and for that

00:21:23,990 --> 00:21:27,050
reason because of its being used by help

00:21:25,730 --> 00:21:29,510
topics it's something that would be very

00:21:27,050 --> 00:21:32,240
easy for us to use as well but we are we

00:21:29,510 --> 00:21:35,000
are open to suggestions of using any

00:21:32,240 --> 00:21:44,350
other means of providing this contextual

00:21:35,000 --> 00:21:57,080
information yeah Tim Tams

00:21:44,350 --> 00:22:00,140
mark could you pass the box so the front

00:21:57,080 --> 00:22:04,580
part of stuff looks a lot like the the

00:22:00,140 --> 00:22:06,910
library's syntax but what I see in

00:22:04,580 --> 00:22:09,610
project is most often than not

00:22:06,910 --> 00:22:12,650
everything is compiled to one CSS file

00:22:09,610 --> 00:22:15,320
there's no declaration of dependencies

00:22:12,650 --> 00:22:17,900
in between the components because you

00:22:15,320 --> 00:22:21,590
know the building process of the CSS

00:22:17,900 --> 00:22:27,950
files so given that it's a pretty big

00:22:21,590 --> 00:22:32,440
use case in actual projects isn't it too

00:22:27,950 --> 00:22:32,440
much of a hurdle to get people to change

00:22:38,110 --> 00:22:43,960
I'm not sure I understood the question

00:22:41,410 --> 00:22:48,200
can you repeat that

00:22:43,960 --> 00:22:51,470
yeah so doing that is the proper way of

00:22:48,200 --> 00:22:54,370
well is one good way of doing it to be

00:22:51,470 --> 00:22:57,740
explicit about what your templates use

00:22:54,370 --> 00:22:59,090
but what we see that nobody does it for

00:22:57,740 --> 00:23:03,100
CSS files yeah

00:22:59,090 --> 00:23:06,620
so why people are going to do it now

00:23:03,100 --> 00:23:08,360
since I see well it would be mainly

00:23:06,620 --> 00:23:10,010
because of then

00:23:08,360 --> 00:23:11,870
you would explicitly have to we would

00:23:10,010 --> 00:23:13,790
you would always have to explicitly

00:23:11,870 --> 00:23:17,000
override the CSS that belongs to that

00:23:13,790 --> 00:23:19,070
markup and then you wouldn't have this

00:23:17,000 --> 00:23:20,960
shared ownership between different

00:23:19,070 --> 00:23:23,679
extensions and we were actually looking

00:23:20,960 --> 00:23:25,910
into the specific mechanics of of

00:23:23,679 --> 00:23:28,250
looking for this information it could be

00:23:25,910 --> 00:23:30,110
using the library system behind the

00:23:28,250 --> 00:23:33,710
scenes so they would become libraries

00:23:30,110 --> 00:23:35,390
internally and basically the libraries

00:23:33,710 --> 00:23:36,590
API could be used on top of them we

00:23:35,390 --> 00:23:39,200
could use the template name for

00:23:36,590 --> 00:23:43,280
generating the library a library name

00:23:39,200 --> 00:23:45,710
for that and it would be similar to what

00:23:43,280 --> 00:23:48,770
we have now but it's a lot of people

00:23:45,710 --> 00:23:50,870
just use the global library for all of

00:23:48,770 --> 00:23:54,169
their CSS files and it's different from

00:23:50,870 --> 00:23:58,910
that and it would definitely force

00:23:54,169 --> 00:24:01,400
people to change in that regard and yeah

00:23:58,910 --> 00:24:03,320
it's something we probably have to take

00:24:01,400 --> 00:24:05,960
into account it's it's it's at least

00:24:03,320 --> 00:24:15,260
something that could slow down people

00:24:05,960 --> 00:24:16,580
from implementing this do you have any

00:24:15,260 --> 00:24:20,390
other questions I think we are pretty

00:24:16,580 --> 00:24:22,220
much out of time anyway so if you don't

00:24:20,390 --> 00:24:24,169
have any questions feel free to reach

00:24:22,220 --> 00:24:28,160
out to me later I'm happy to talk about

00:24:24,169 --> 00:24:36,150
this privately thank you

00:24:28,160 --> 00:24:36,150

YouTube URL: https://www.youtube.com/watch?v=rBZaKXYG79c


