Title: DrupalCon Amsterdam 2019: Dive deep into Drupal 8 Render API
Publication date: 2019-10-29
Playlist: DrupalCon Amsterdam 2019
Description: 
	Surbhi Sriwal
Srijan Technologies, NEW DELHI, India

Introduction
-----------------------
Deep diving into Drupal 8 Render API , how it is different and better than Drupal 7 rendering mechanism. How Drupal uses placeholders and pipelines to improve page performance.

In this talk, We're going to cover

What Render API is
--------------------------------
1. How it is Different from D7
2. What Placeholders and Pipelines are
3. How Drupal makes use of Placeholders
4. Rendering custom content using Render API
Render arrays , elements
5. How was theme() function used in Drupal 7 and what are we doing in Drupal 8 to replicate it and its benefits from a data rendering standpoint

Takeaways from this talk
--------------------------------------
1. Deep knowledge of Drupal 8 Render API.
2. Learn how #type, `#theme`, and #markup elements are both the same and different
3. How can we use it?

Prerequisites
-----------------------
Intermediate Drupal Backend knowledge along with basics of how Drupal renders content.
Captions: 
	00:00:02,330 --> 00:00:10,080
thank you okay so welcome you grew up on

00:00:08,099 --> 00:00:14,400
Amsterdam and welcome to this beautiful

00:00:10,080 --> 00:00:16,049
city thank you for joining in sorry for

00:00:14,400 --> 00:00:17,160
those who are having a repeat special

00:00:16,049 --> 00:00:18,869
then they have already have this

00:00:17,160 --> 00:00:22,109
introduction but for those who aren't

00:00:18,869 --> 00:00:23,990
you much just giving my introduction a

00:00:22,109 --> 00:00:27,869
meaning

00:00:23,990 --> 00:00:32,189
so the topic for this session is a deep

00:00:27,869 --> 00:00:35,250
dive into Drupal 8 under API and I am

00:00:32,189 --> 00:00:39,960
using some sort of screenshots some

00:00:35,250 --> 00:00:44,100
introductory examples to take this

00:00:39,960 --> 00:00:50,160
conversation further so that we are well

00:00:44,100 --> 00:00:53,520
aligned introducing myself my name is

00:00:50,160 --> 00:00:56,969
service rebel and I bought with estrogen

00:00:53,520 --> 00:00:59,609
technologies if you want to locate my

00:00:56,969 --> 00:01:01,829
profile on Drupal you can either hit

00:00:59,609 --> 00:01:04,739
search me in my complete name or hit

00:01:01,829 --> 00:01:07,560
that link on the screen on Twitter I go

00:01:04,739 --> 00:01:09,030
by the handles of East River and if I

00:01:07,560 --> 00:01:10,939
just don't forget to take this

00:01:09,030 --> 00:01:14,189
conversation I'm using my twitter handle

00:01:10,939 --> 00:01:17,159
at Regina I'm primarily involved with

00:01:14,189 --> 00:01:20,939
Drupal the wherein I have worked with 2

00:01:17,159 --> 00:01:24,210
/ 7 Drupal 8 projects which also means

00:01:20,939 --> 00:01:27,330
that I have worked with teams which have

00:01:24,210 --> 00:01:30,720
used Drupal and various different

00:01:27,330 --> 00:01:33,210
flavors talking about students so

00:01:30,720 --> 00:01:36,150
oestrogen is a 15 year old company and

00:01:33,210 --> 00:01:41,280
it started mainly with multiple stuff a

00:01:36,150 --> 00:01:44,009
lot of our are Python Django then four

00:01:41,280 --> 00:01:46,590
to five years later written started

00:01:44,009 --> 00:01:49,439
getting its hands dirty with Drupal and

00:01:46,590 --> 00:01:52,350
now 8 to 10 years later we have a good

00:01:49,439 --> 00:01:55,229
troop name with about 200 plus people

00:01:52,350 --> 00:01:58,159
primarily focused towards truffle making

00:01:55,229 --> 00:02:02,369
us Asia's largest fruit boutique and

00:01:58,159 --> 00:02:04,229
region has its headquarters in Delhi and

00:02:02,369 --> 00:02:08,849
we have people working all across the

00:02:04,229 --> 00:02:11,490
top so just to set the context right

00:02:08,849 --> 00:02:14,760
here so that all of us are

00:02:11,490 --> 00:02:18,990
as I spin true I would start the stock

00:02:14,760 --> 00:02:22,230
with a introductory example we will talk

00:02:18,990 --> 00:02:25,560
about what is rendered ABI who the

00:02:22,230 --> 00:02:27,990
audience to this API should be role

00:02:25,560 --> 00:02:29,520
offender API and how that role changes

00:02:27,990 --> 00:02:32,310
depending upon what you are trying to

00:02:29,520 --> 00:02:35,040
achieve in your project which also means

00:02:32,310 --> 00:02:36,750
that you might be a module developer or

00:02:35,040 --> 00:02:39,710
you might be working on the front end

00:02:36,750 --> 00:02:43,980
side so we would check that out

00:02:39,710 --> 00:02:46,350
why render API and why not modules that

00:02:43,980 --> 00:02:48,840
are strings of hTML is wearing we will

00:02:46,350 --> 00:02:52,380
talk about the benefits which this API

00:02:48,840 --> 00:02:55,050
provides underlying mechanism and how

00:02:52,380 --> 00:02:59,130
Drupal distinguishes render arrays from

00:02:55,050 --> 00:03:01,770
other arrays that contain them then we

00:02:59,130 --> 00:03:04,380
would also talk about some of the main

00:03:01,770 --> 00:03:08,540
components which build the render API

00:03:04,380 --> 00:03:11,220
which is gender arrays elements cache

00:03:08,540 --> 00:03:18,440
attachments placeholders and render like

00:03:11,220 --> 00:03:26,490
that okay so what does picture Debates

00:03:18,440 --> 00:03:39,930
anybody from the audience okay

00:03:26,490 --> 00:03:43,860
and something else sorry okay any more

00:03:39,930 --> 00:03:47,040
guesses Oh exactly

00:03:43,860 --> 00:03:48,630
so this is a chef right and who is

00:03:47,040 --> 00:03:52,590
trying to build some output bill

00:03:48,630 --> 00:03:55,470
something right and for his input he is

00:03:52,590 --> 00:03:59,220
using some sort of dough with long

00:03:55,470 --> 00:04:01,730
complex strings and what would happen

00:03:59,220 --> 00:04:01,730
after that

00:04:02,750 --> 00:04:09,760
anybody

00:04:05,710 --> 00:04:12,800
he might be able to produce that recipe

00:04:09,760 --> 00:04:15,740
but he would end up very tired and a lot

00:04:12,800 --> 00:04:18,020
of effort will be more right in juggling

00:04:15,740 --> 00:04:22,940
with these long strands so how he can

00:04:18,020 --> 00:04:27,350
help that help him carrying the pieces

00:04:22,940 --> 00:04:29,840
right exactly so we can help him by

00:04:27,350 --> 00:04:33,500
providing him some standardized way to

00:04:29,840 --> 00:04:36,860
cut that long strings into some standard

00:04:33,500 --> 00:04:39,560
pieces right which can produce the

00:04:36,860 --> 00:04:42,680
output but at the same time reduce his

00:04:39,560 --> 00:04:49,430
efforts and that is exactly what render

00:04:42,680 --> 00:04:52,280
API does with Drupal so render API it

00:04:49,430 --> 00:04:55,190
provides some mechanism wherein data can

00:04:52,280 --> 00:04:57,890
be defined as structured arrays and not

00:04:55,190 --> 00:04:59,810
complex strings and it also defines a

00:04:57,890 --> 00:05:02,210
mechanism which converts these

00:04:59,810 --> 00:05:05,720
structured arrays into a format which is

00:05:02,210 --> 00:05:07,880
well understood by browser so rendered

00:05:05,720 --> 00:05:09,440
arrays provide developers a way to

00:05:07,880 --> 00:05:12,410
represent their data into the

00:05:09,440 --> 00:05:15,680
application and also provides various

00:05:12,410 --> 00:05:18,800
hints on how to use that data and render

00:05:15,680 --> 00:05:21,410
pipeline is a process Drupal uses to

00:05:18,800 --> 00:05:23,510
service a request which involves

00:05:21,410 --> 00:05:25,850
gathering rendered arrays from various

00:05:23,510 --> 00:05:29,750
components determining what type of

00:05:25,850 --> 00:05:31,780
format should be handling - so hunting

00:05:29,750 --> 00:05:34,730
caching and gashing validations and

00:05:31,780 --> 00:05:38,860
ultimately rendering the structured

00:05:34,730 --> 00:05:38,860
array into the desired output format

00:05:39,760 --> 00:05:47,480
talking about who the audience to render

00:05:43,190 --> 00:05:50,780
API should be so all of us we are in the

00:05:47,480 --> 00:05:52,730
right room guys so anybody who is

00:05:50,780 --> 00:05:54,920
working with Drupal at least at a

00:05:52,730 --> 00:05:58,790
conceptual level should know what render

00:05:54,920 --> 00:06:01,760
api is and render pipelines are less

00:05:58,790 --> 00:06:04,790
crucial and if you are working in

00:06:01,760 --> 00:06:09,020
designing arrays from scratch then you

00:06:04,790 --> 00:06:12,770
can handle of them now you must be

00:06:09,020 --> 00:06:15,200
thinking why render api and why not

00:06:12,770 --> 00:06:17,490
modules that drown the one strengths of

00:06:15,200 --> 00:06:23,250
HTML and just print that

00:06:17,490 --> 00:06:25,199
pages so let's just say that you want to

00:06:23,250 --> 00:06:29,160
print on who dot article on your page

00:06:25,199 --> 00:06:31,410
right but you don't have to print it as

00:06:29,160 --> 00:06:33,330
it is and you might have to remove the

00:06:31,410 --> 00:06:37,080
image part of it and print it somewhere

00:06:33,330 --> 00:06:40,250
else on the page so option one would be

00:06:37,080 --> 00:06:42,539
if that set up is all sort of raw

00:06:40,250 --> 00:06:45,240
complex strings set up then you might

00:06:42,539 --> 00:06:47,639
have to create a regular expression you

00:06:45,240 --> 00:06:50,840
remove that image part of it by exact

00:06:47,639 --> 00:06:54,000
match which is obviously a very

00:06:50,840 --> 00:06:55,830
cumbersome process and then print that

00:06:54,000 --> 00:06:58,830
image part into some other part of the

00:06:55,830 --> 00:07:02,789
page and regenerates the HTML which was

00:06:58,830 --> 00:07:05,250
actually generated at the time you

00:07:02,789 --> 00:07:08,130
friend me so this is a very long effort

00:07:05,250 --> 00:07:11,729
are involved and obviously in you your

00:07:08,130 --> 00:07:13,740
code is more dynamic right so that is

00:07:11,729 --> 00:07:16,139
the reason render api is preferred

00:07:13,740 --> 00:07:19,849
because it allows the awesome ability to

00:07:16,139 --> 00:07:22,889
encapsulate complex logic into reusable

00:07:19,849 --> 00:07:27,030
components and reduces the expensive

00:07:22,889 --> 00:07:30,870
task of making those exact matches using

00:07:27,030 --> 00:07:34,409
regular expressions so what are some of

00:07:30,870 --> 00:07:37,370
the benefits which render API offers it

00:07:34,409 --> 00:07:41,699
obviously makes the job easier by

00:07:37,370 --> 00:07:45,930
helping creating reusable components and

00:07:41,699 --> 00:07:47,819
as there is some structured way defined

00:07:45,930 --> 00:07:50,550
so order the modules can work together

00:07:47,819 --> 00:07:55,680
and it becomes much easier for the

00:07:50,550 --> 00:07:58,469
things to deal with talking about what

00:07:55,680 --> 00:08:01,080
role does render API play and how that

00:07:58,469 --> 00:08:04,740
role changes depending upon what you

00:08:01,080 --> 00:08:06,900
intend to build in the system so if you

00:08:04,740 --> 00:08:09,659
are a module developer then it is your

00:08:06,900 --> 00:08:14,280
responsibility that you define all the

00:08:09,659 --> 00:08:16,889
data in the structured arrays and you

00:08:14,280 --> 00:08:19,349
might also want to define some of the

00:08:16,889 --> 00:08:22,560
structured elements which can reduce the

00:08:19,349 --> 00:08:25,919
complexity of the system and if you're a

00:08:22,560 --> 00:08:28,560
thin developer then your main task would

00:08:25,919 --> 00:08:31,260
be to alter the existing arrays and

00:08:28,560 --> 00:08:34,260
create some sort of an HTML output

00:08:31,260 --> 00:08:36,390
or you might also want to create some

00:08:34,260 --> 00:08:41,729
new structures in the pre process

00:08:36,390 --> 00:08:43,530
functions and once these are variables

00:08:41,729 --> 00:08:46,800
are defined in case of Twix

00:08:43,530 --> 00:08:49,740
they can be simply rendered as variables

00:08:46,800 --> 00:08:53,040
where in the render pipeline can be

00:08:49,740 --> 00:08:59,120
automatically invoked and HTML would be

00:08:53,040 --> 00:09:03,180
generated from that now talking about

00:08:59,120 --> 00:09:05,490
the main components of render API so

00:09:03,180 --> 00:09:07,010
these are some of which I have listed on

00:09:05,490 --> 00:09:11,760
the screen

00:09:07,010 --> 00:09:14,930
let's get the details one by one so what

00:09:11,760 --> 00:09:18,750
are some of the ways wherein we can

00:09:14,930 --> 00:09:21,000
convert the data into the monitor if I

00:09:18,750 --> 00:09:23,790
talk of 2 / 7 you might have seen that

00:09:21,000 --> 00:09:26,820
is theme function implementation which

00:09:23,790 --> 00:09:29,580
can be widely seen in much of the core

00:09:26,820 --> 00:09:32,730
and contrib and custom modules we all

00:09:29,580 --> 00:09:34,920
use them so this is a very basic theme

00:09:32,730 --> 00:09:37,440
implementation where in the first our

00:09:34,920 --> 00:09:39,270
demands tell Drupal that image has to be

00:09:37,440 --> 00:09:41,670
rendered and the second argument is an

00:09:39,270 --> 00:09:45,150
array which is taking the path and the

00:09:41,670 --> 00:09:49,470
alternative text information if I talk

00:09:45,150 --> 00:09:52,560
about the equivalent render array so

00:09:49,470 --> 00:09:56,670
this is nothing but the representation

00:09:52,560 --> 00:09:58,890
of the same theme function but it is

00:09:56,670 --> 00:10:01,770
just having the hash elements attached

00:09:58,890 --> 00:10:05,490
to that array so we have hash themed

00:10:01,770 --> 00:10:09,180
hash path and hash alt which is taking

00:10:05,490 --> 00:10:11,520
in some same sort of inputs and we are

00:10:09,180 --> 00:10:16,770
expecting Drupal to generate some sort

00:10:11,520 --> 00:10:20,730
of micarta so if I play the output of

00:10:16,770 --> 00:10:23,640
the theme function we can simply use the

00:10:20,730 --> 00:10:26,940
print statement and it would give a

00:10:23,640 --> 00:10:29,400
resultant mark up to us but cannot do

00:10:26,940 --> 00:10:31,710
that with arrays cannot use the print

00:10:29,400 --> 00:10:34,890
function right it would simply return

00:10:31,710 --> 00:10:37,290
the string a rre by on the screen so

00:10:34,890 --> 00:10:39,360
what do i do then i have to make user

00:10:37,290 --> 00:10:43,379
specified functions for that which is

00:10:39,360 --> 00:10:48,479
the render function so render from

00:10:43,379 --> 00:10:51,629
basically it's used to display or print

00:10:48,479 --> 00:10:54,089
a render array into Drupal 7 and it

00:10:51,629 --> 00:10:57,209
would then provide this result in markup

00:10:54,089 --> 00:11:00,479
on the screen and in case of doing

00:10:57,209 --> 00:11:03,659
templates or I can say in case of 2 / 8

00:11:00,479 --> 00:11:07,139
you can simply print these as variables

00:11:03,659 --> 00:11:11,569
and invoke the render pipeline which can

00:11:07,139 --> 00:11:14,579
automatically get the stuff into HTML

00:11:11,569 --> 00:11:16,919
few things to notice about render arrays

00:11:14,579 --> 00:11:20,039
is that you would always find these as

00:11:16,919 --> 00:11:22,979
nested arrays inside other areas for

00:11:20,039 --> 00:11:25,739
example on the screen you can see a

00:11:22,979 --> 00:11:29,789
simple page and a representation which

00:11:25,739 --> 00:11:33,179
has header content sidebar as various

00:11:29,789 --> 00:11:37,859
regions and if I wish to bring them on

00:11:33,179 --> 00:11:40,919
the screen in the function and in case

00:11:37,859 --> 00:11:45,509
of tuple it I can simply use page tour

00:11:40,919 --> 00:11:50,369
content so what is happening actually

00:11:45,509 --> 00:11:52,949
behind the scenes variable Drupal is

00:11:50,369 --> 00:11:56,850
asked to render or render array what it

00:11:52,949 --> 00:11:59,939
does it just digs deep into the keys and

00:11:56,850 --> 00:12:02,789
if it finds a hash key in that array

00:11:59,939 --> 00:12:05,549
then it considers that array as a render

00:12:02,789 --> 00:12:08,759
array and prints the output as it is if

00:12:05,549 --> 00:12:10,979
it does not find any hash key then it

00:12:08,759 --> 00:12:13,229
would consider it as a normal array and

00:12:10,979 --> 00:12:16,049
start looking of more and more elements

00:12:13,229 --> 00:12:18,989
to render so hash keys are very

00:12:16,049 --> 00:12:21,629
important because they help Drupal

00:12:18,989 --> 00:12:23,759
distinguishing render array from other

00:12:21,629 --> 00:12:28,049
arrays which actually contain or

00:12:23,759 --> 00:12:31,289
encapsulate those that is and they are

00:12:28,049 --> 00:12:34,829
basically distinguishing factor for

00:12:31,289 --> 00:12:37,739
Drupal so I have listed some of the hash

00:12:34,829 --> 00:12:40,499
keys which are resolved properties and

00:12:37,739 --> 00:12:43,649
you can make use of them while

00:12:40,499 --> 00:12:46,289
interacting with render API so we have

00:12:43,649 --> 00:12:49,259
already seen hash team hash wait could

00:12:46,289 --> 00:12:52,529
have either float or integer values and

00:12:49,259 --> 00:12:53,140
you can use it to decide the order in

00:12:52,529 --> 00:12:56,680
which

00:12:53,140 --> 00:12:59,200
to print your output Hashcash and hash

00:12:56,680 --> 00:13:00,180
attached we would see later in the

00:12:59,200 --> 00:13:03,670
presentation

00:13:00,180 --> 00:13:07,329
hash markup is used to just give some

00:13:03,670 --> 00:13:10,390
sort of an HTML and prefix and suffix we

00:13:07,329 --> 00:13:14,470
all know to print anything before or

00:13:10,390 --> 00:13:17,110
after then there is another thing called

00:13:14,470 --> 00:13:19,779
render elements so this is a very basic

00:13:17,110 --> 00:13:22,570
implementation of a checkbox class which

00:13:19,779 --> 00:13:25,720
I have built up from Drupal core which

00:13:22,570 --> 00:13:28,029
extends form element class and the

00:13:25,720 --> 00:13:30,820
output or forget info function is

00:13:28,029 --> 00:13:37,779
something which is some sort of agenda

00:13:30,820 --> 00:13:41,079
very just to make our task easier Drupal

00:13:37,779 --> 00:13:43,360
provides this ability wherein it defines

00:13:41,079 --> 00:13:46,390
some set of defaults for us and we just

00:13:43,360 --> 00:13:49,839
need to call those elements so render

00:13:46,390 --> 00:13:51,790
elements are nothing but we can say that

00:13:49,839 --> 00:13:53,500
these are predefined render arrays where

00:13:51,790 --> 00:13:56,200
and defaults are already defined for us

00:13:53,500 --> 00:13:58,240
and anything which we wish to override

00:13:56,200 --> 00:14:01,570
we can just define it and it can be

00:13:58,240 --> 00:14:04,240
picked up from there so if you see the

00:14:01,570 --> 00:14:07,329
screen checkbox class extends home

00:14:04,240 --> 00:14:10,140
element class which extends render

00:14:07,329 --> 00:14:14,430
element class so boom maybe I can be

00:14:10,140 --> 00:14:16,959
said to be a subset of render API

00:14:14,430 --> 00:14:19,480
talking about cache properties so this

00:14:16,959 --> 00:14:23,529
is a very basic implementation of cache

00:14:19,480 --> 00:14:27,790
property of render array wearing we can

00:14:23,529 --> 00:14:33,910
see max H tags context so max H could be

00:14:27,790 --> 00:14:37,570
0 160 any integer value max age 60 means

00:14:33,910 --> 00:14:40,570
cashable for 60 seconds max age 0 means

00:14:37,570 --> 00:14:42,940
not cashable at all and max age

00:14:40,570 --> 00:14:46,060
permanent means cashable or infinite

00:14:42,940 --> 00:14:49,089
time cache cache tags are something

00:14:46,060 --> 00:14:50,550
which are data dependent so here you can

00:14:49,089 --> 00:14:55,240
say node ID

00:14:50,550 --> 00:14:59,529
whenever node ID let's say node colon 5

00:14:55,240 --> 00:15:02,520
so whenever node 5 changes there would

00:14:59,529 --> 00:15:03,790
be a change a change in the cache

00:15:02,520 --> 00:15:06,760
validation

00:15:03,790 --> 00:15:09,100
and then cash flow index is something

00:15:06,760 --> 00:15:11,830
which is context dependent so here I

00:15:09,100 --> 00:15:14,860
have used language dependency there in

00:15:11,830 --> 00:15:19,540
anything which varies with the context

00:15:14,860 --> 00:15:24,910
would change this cached item and just

00:15:19,540 --> 00:15:27,130
as good practice context dance and mock

00:15:24,910 --> 00:15:29,560
stage should always be defined whether

00:15:27,130 --> 00:15:34,750
or you want to cash or you don't want to

00:15:29,560 --> 00:15:37,480
cash your element then these are the

00:15:34,750 --> 00:15:41,050
attached properties so when we were

00:15:37,480 --> 00:15:41,740
voting with Drupal 7 we were actually

00:15:41,050 --> 00:15:44,320
seeing a lot of

00:15:41,740 --> 00:15:48,280
duple ideas and a lot of Drupal add CSS

00:15:44,320 --> 00:15:50,890
which were used to call CSS or J as

00:15:48,280 --> 00:15:52,840
order the screens but in rupal age you

00:15:50,890 --> 00:15:56,350
would find more sort of this type of

00:15:52,840 --> 00:15:59,770
arrangement wherein attach our hash

00:15:56,350 --> 00:16:01,930
attached is used to call our CSS or J's

00:15:59,770 --> 00:16:05,100
to that particular page which also means

00:16:01,930 --> 00:16:08,110
that whenever that page is rendered

00:16:05,100 --> 00:16:11,290
Drupal ensures that that particular CSS

00:16:08,110 --> 00:16:14,320
or G has this J S is already present in

00:16:11,290 --> 00:16:18,640
on that page in the markup which it is

00:16:14,320 --> 00:16:20,680
expected to be in then placeholders so

00:16:18,640 --> 00:16:23,760
please do these are important and that

00:16:20,680 --> 00:16:27,040
is why caching is important and

00:16:23,760 --> 00:16:29,680
placeholders are basically a Drupal

00:16:27,040 --> 00:16:33,670
identifies the most dynamic parts of the

00:16:29,680 --> 00:16:37,480
page and just displays them making them

00:16:33,670 --> 00:16:40,060
more more dynamic so some sort of this

00:16:37,480 --> 00:16:43,540
functionality can also be seen with big

00:16:40,060 --> 00:16:45,400
pipe where in it

00:16:43,540 --> 00:16:47,950
define unique elements on the page

00:16:45,400 --> 00:16:51,850
define them as placeholders and just

00:16:47,950 --> 00:16:55,380
make them dynamic at the very end that

00:16:51,850 --> 00:16:55,380
is all with this code

00:16:55,430 --> 00:17:08,420
join us for contributions and thank you

00:17:00,840 --> 00:17:08,420

YouTube URL: https://www.youtube.com/watch?v=hwHcHmD_aIM


