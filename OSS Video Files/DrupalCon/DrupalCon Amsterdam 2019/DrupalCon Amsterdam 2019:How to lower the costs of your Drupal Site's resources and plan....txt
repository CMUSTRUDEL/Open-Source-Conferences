Title: DrupalCon Amsterdam 2019:How to lower the costs of your Drupal Site's resources and plan...
Publication date: 2019-10-29
Playlist: DrupalCon Amsterdam 2019
Description: 
	Room: Auditorium
Title: How to lower the costs of your Drupal Site's resources and plan Capacity in advance
Presenter: Ricardo Amaro
Description: In this session we will try to solve a couple of recurring problems:
Site Launch and User expectations

Imagine a customer that provides a set of needs for hardware, sets a date and launches the site, but then he forgets to warn that they have sent out some (thousands of) emails to half the world announcing their new website launch! What do you think it will happen?

Of course launching a Drupal Site involves a lot of preparation steps and there are plenty of guides out there about common Drupal Launch Readiness Checklists which is not a problem anymore.
What we are really missing here is a Plan for Capacity.

Capacity, in Site Reliability Engineering, is the maximum amount of output a product deployment is capable of completing in a given period of time.
Capacity planning, on the other hand, is that process which determines the resources needed, to meet changing demands.
In the Drupal World we focus mostly on serving WEB capacity.

Let’s suppose you are a supermarket manager, so one of your tasks is to manage the schedule of cashiers. A challenge for you is finding the right number of cashiers that should be working at any moment.
Because if you assign too few, the checkout lines will become long and the customers upset, if I assign too many at the same time we would end up wasting money. The trick is finding the precise balance.

Now, think of the cashiers as server instances, and the customers as client browsers. Also take into consideration that the supermarket is getting more and more popular.
A seasoned manager will attempt to strike a good balance between keeping customers happy and not spending too much on cashiers:

- Only spend as much as you actually need
- Be ahead of sharp growth
- Avoid emergencies

Based on these aspects I want to share some good practice stories, by answering questions, like:

- How to create a good capacity plan?
- How to forecast resource needs and make it sustainable?
- How to automate that process?

There are a few ideas explored in this session from the book I co-authored: “Seeking SRE”, specifically on chapter 18 “Machine Learning for SRE”. In that chapter, I shared a few code examples and guides on how to use machine learning to support SRE on forecasting, auto-scaling, and several other problems.

The Perfect Score!
Captions: 
	00:00:00,000 --> 00:00:14,670
before so I hope so welcome everyone

00:00:12,799 --> 00:00:21,060
is this working

00:00:14,670 --> 00:00:25,680
I think it is yeah okay on how to lower

00:00:21,060 --> 00:00:30,960
the cost of your Drupal sites resources

00:00:25,680 --> 00:00:33,690
and capacity planning in advance first a

00:00:30,960 --> 00:00:36,500
little bit about me I've been working

00:00:33,690 --> 00:00:41,129
for aqueous since 2011 based in Lisbon

00:00:36,500 --> 00:00:44,610
I'm not working with the site factory

00:00:41,129 --> 00:00:48,570
team as a principal site reliability

00:00:44,610 --> 00:00:52,140
engineer and also I co-authored that

00:00:48,570 --> 00:00:54,030
book it's called seeking sre also

00:00:52,140 --> 00:00:57,030
founded the Portuguese Drupal

00:00:54,030 --> 00:01:01,050
Association and fun facts I have two

00:00:57,030 --> 00:01:04,519
kids they're missing me and I started

00:01:01,050 --> 00:01:08,700
using Linux since the 90s

00:01:04,519 --> 00:01:12,600
okay so today we will talk about the

00:01:08,700 --> 00:01:15,930
problem we want to solve then what is

00:01:12,600 --> 00:01:19,770
capacity and why planet in advance and

00:01:15,930 --> 00:01:22,320
the relation from sre and the budget

00:01:19,770 --> 00:01:24,840
that needs to be presented next we will

00:01:22,320 --> 00:01:28,770
focus on low testing very briefly and

00:01:24,840 --> 00:01:31,439
performance tuning and what and how we

00:01:28,770 --> 00:01:34,829
should measure and how to track that

00:01:31,439 --> 00:01:37,259
capacity to make some forecasting and

00:01:34,829 --> 00:01:39,540
then finalizing with some first steps

00:01:37,259 --> 00:01:43,350
and conclusions and probably showing

00:01:39,540 --> 00:01:47,610
very useful tools along the way so let's

00:01:43,350 --> 00:01:54,259
start by defining our problem maybe I

00:01:47,610 --> 00:01:54,259
keep this with full screen right

00:01:55,240 --> 00:01:57,299
you

00:01:57,810 --> 00:02:03,270
yeah visibility problem so let's start

00:02:01,080 --> 00:02:06,830
defining this problem we have a site

00:02:03,270 --> 00:02:10,080
launch and we want to keep the user

00:02:06,830 --> 00:02:12,840
expectation so anyone here in the

00:02:10,080 --> 00:02:16,050
process of launching the site or a

00:02:12,840 --> 00:02:19,440
product presents the one owned is

00:02:16,050 --> 00:02:24,709
launching sites okay cool oh two people

00:02:19,440 --> 00:02:24,709
there okay so imagine your customer

00:02:25,040 --> 00:02:30,090
provide you a set of needs for our where

00:02:27,900 --> 00:02:33,530
and then it sets a day to launch the

00:02:30,090 --> 00:02:37,920
site but then if forgot to tell you that

00:02:33,530 --> 00:02:40,140
yes sent a few thousands emails to

00:02:37,920 --> 00:02:43,200
Alfred the world announcing their new

00:02:40,140 --> 00:02:47,519
site launch what do you think it will

00:02:43,200 --> 00:02:50,700
happen right so of course launching a

00:02:47,519 --> 00:02:53,700
Drupal site involves a lot more of

00:02:50,700 --> 00:02:56,340
preparation steps such as these ones and

00:02:53,700 --> 00:02:59,209
there are plenty of guides out there

00:02:56,340 --> 00:03:02,370
about these kind of launch readiness

00:02:59,209 --> 00:03:05,220
checklists for Drupal which is not our

00:03:02,370 --> 00:03:08,090
focus today what we're really missing

00:03:05,220 --> 00:03:12,930
here on this list is the plan for

00:03:08,090 --> 00:03:16,049
capacity so let's be clear the end goal

00:03:12,930 --> 00:03:19,459
of capacity planning is a smooth and

00:03:16,049 --> 00:03:23,250
speedy experience for the users user

00:03:19,459 --> 00:03:26,370
expectation may vary depending on what

00:03:23,250 --> 00:03:29,280
type of application they are using and

00:03:26,370 --> 00:03:32,489
even what portion of the application

00:03:29,280 --> 00:03:35,010
they are interacting with let's say for

00:03:32,489 --> 00:03:38,720
example the expectations for speed when

00:03:35,010 --> 00:03:41,850
searching the site for recipes is

00:03:38,720 --> 00:03:45,359
different from loading the payment page

00:03:41,850 --> 00:03:48,350
right so affecting obviously the user

00:03:45,359 --> 00:03:51,359
engagement but there is no silver bullet

00:03:48,350 --> 00:03:54,720
let's be honest it's possible to have

00:03:51,359 --> 00:03:58,680
plenty of capacity but a slow web site

00:03:54,720 --> 00:04:01,590
nonetheless or in other in the worst

00:03:58,680 --> 00:04:04,109
case the service might be unavailable

00:04:01,590 --> 00:04:06,720
even though capacity is only a part of

00:04:04,109 --> 00:04:10,019
making a good experience the experience

00:04:06,720 --> 00:04:11,010
is still one of the real world metrics

00:04:10,019 --> 00:04:14,400
that we will want

00:04:11,010 --> 00:04:17,850
to measure and track in order to make

00:04:14,400 --> 00:04:21,180
capacity forecasts for example when

00:04:17,850 --> 00:04:25,199
serving static web content we might

00:04:21,180 --> 00:04:28,110
reach an interval amount of latency in

00:04:25,199 --> 00:04:30,410
high volumes before any system level

00:04:28,110 --> 00:04:34,100
metrics like the CPU the disk or memory

00:04:30,410 --> 00:04:38,030
raise a flag like in the case of the CDN

00:04:34,100 --> 00:04:41,280
so what is capacity very simply capacity

00:04:38,030 --> 00:04:43,889
consists on the resources required to

00:04:41,280 --> 00:04:48,449
run your services in the context that

00:04:43,889 --> 00:04:50,850
you chosen to run them capacity insight

00:04:48,449 --> 00:04:54,510
Reba reliability engineering is the

00:04:50,850 --> 00:04:57,539
maximum amount of output your product or

00:04:54,510 --> 00:05:00,260
your Drupal deployment is capable of

00:04:57,539 --> 00:05:03,600
completing in a given period of time

00:05:00,260 --> 00:05:06,270
capacity planning on the other hand is

00:05:03,600 --> 00:05:10,410
that process which determines the

00:05:06,270 --> 00:05:16,860
resources needed in the Drupal world we

00:05:10,410 --> 00:05:20,190
focus mostly on web capacity so it's

00:05:16,860 --> 00:05:23,960
used from economics to engineering it's

00:05:20,190 --> 00:05:26,760
now also a part of web operations and

00:05:23,960 --> 00:05:29,280
it's yours ensures resources are

00:05:26,760 --> 00:05:31,919
available it defines the process it

00:05:29,280 --> 00:05:33,930
justifies capital needs which is one of

00:05:31,919 --> 00:05:36,599
the most important things in our

00:05:33,930 --> 00:05:40,260
companies and it's managing deployments

00:05:36,599 --> 00:05:42,330
of repo of resources so when extended

00:05:40,260 --> 00:05:45,180
guide if you want int if you want to

00:05:42,330 --> 00:05:47,190
really go deep into the subject isn't

00:05:45,180 --> 00:05:51,090
this book the art of capacity planning

00:05:47,190 --> 00:05:53,909
from O'Reilly so why why should we

00:05:51,090 --> 00:05:57,949
bother about this why should you bother

00:05:53,909 --> 00:06:02,430
about this about this so let's suppose

00:05:57,949 --> 00:06:06,990
I'm a supermarket manager right so one

00:06:02,430 --> 00:06:10,710
of my tasks is to manage the schedule of

00:06:06,990 --> 00:06:13,220
the cashiers a challenge for me is

00:06:10,710 --> 00:06:16,250
finding the right number of cashiers

00:06:13,220 --> 00:06:20,310
that should be working at any moment

00:06:16,250 --> 00:06:23,190
because if I assign too few the checkout

00:06:20,310 --> 00:06:24,740
lines will become long and the customers

00:06:23,190 --> 00:06:28,340
will be upset

00:06:24,740 --> 00:06:30,919
if I aside too many at the same time you

00:06:28,340 --> 00:06:33,789
would end up just wasting up money so

00:06:30,919 --> 00:06:38,860
the trick is finding the precise balance

00:06:33,789 --> 00:06:43,039
now think of the cashiers as servers and

00:06:38,860 --> 00:06:45,050
the customers as client browsers also

00:06:43,039 --> 00:06:47,750
taking to consideration that the

00:06:45,050 --> 00:06:50,900
supermarket is getting more and more

00:06:47,750 --> 00:06:55,150
popular each day so a seasoned manager

00:06:50,900 --> 00:06:58,849
will attempt to strike a good balance

00:06:55,150 --> 00:07:03,949
between keeping the customers happy and

00:06:58,849 --> 00:07:07,069
not spending too much on cashiers so in

00:07:03,949 --> 00:07:09,800
summary only spend as much as you

00:07:07,069 --> 00:07:13,240
actually need be ahead of the that sharp

00:07:09,800 --> 00:07:16,550
growth and avoid any emergencies and

00:07:13,240 --> 00:07:18,500
that's also why capacity planning is a

00:07:16,550 --> 00:07:20,020
major topic in site reliability

00:07:18,500 --> 00:07:24,050
engineering

00:07:20,020 --> 00:07:27,080
besides that an SRE team is responsible

00:07:24,050 --> 00:07:29,810
for the availability the latency the

00:07:27,080 --> 00:07:32,990
performance efficiency the change

00:07:29,810 --> 00:07:36,020
management the monitoring the emergency

00:07:32,990 --> 00:07:40,099
response and of course capacity planning

00:07:36,020 --> 00:07:42,800
for these services and focusing on

00:07:40,099 --> 00:07:45,650
demand and forecasting which is really

00:07:42,800 --> 00:07:47,620
the important point here it targets

00:07:45,650 --> 00:07:51,080
having sufficient capacity and

00:07:47,620 --> 00:07:54,169
redundancy to serve projected demands

00:07:51,080 --> 00:07:56,120
with the required availability despite

00:07:54,169 --> 00:07:58,490
these being common sense of course

00:07:56,120 --> 00:08:01,310
everybody knows about this some service

00:07:58,490 --> 00:08:03,860
and some teams don't really insure the

00:08:01,310 --> 00:08:08,750
required capacity is in place by the

00:08:03,860 --> 00:08:13,009
time the service is launched and how

00:08:08,750 --> 00:08:16,639
does Sree advocate for this so we we

00:08:13,009 --> 00:08:19,729
help perform regular low testings on the

00:08:16,639 --> 00:08:23,030
systems we incorporate SL O's on

00:08:19,729 --> 00:08:25,729
capacity which asbestos it's specific to

00:08:23,030 --> 00:08:28,340
service level indicators that we have

00:08:25,729 --> 00:08:31,880
and because capacity is so critical for

00:08:28,340 --> 00:08:37,729
availability sre teams normally take the

00:08:31,880 --> 00:08:38,690
lead in this initiative and so probably

00:08:37,729 --> 00:08:41,000
one of the biggest

00:08:38,690 --> 00:08:44,300
part that interests you is the budget

00:08:41,000 --> 00:08:47,450
related to capacity planning your budget

00:08:44,300 --> 00:08:49,460
should account for enough capacity it

00:08:47,450 --> 00:08:52,280
should be justified by the risk of

00:08:49,460 --> 00:08:55,820
impacting the user experience as we as

00:08:52,280 --> 00:08:58,940
we spoken about and your business for

00:08:55,820 --> 00:09:02,060
example in the budget meeting with

00:08:58,940 --> 00:09:05,750
finance engineering and product the

00:09:02,060 --> 00:09:09,290
proposal for systems capacity needs to

00:09:05,750 --> 00:09:13,700
be justified by system metrics right so

00:09:09,290 --> 00:09:17,540
we have data data to actually justify

00:09:13,700 --> 00:09:21,290
the investment but knowing when the

00:09:17,540 --> 00:09:24,620
infrastructure will fail is crucial to

00:09:21,290 --> 00:09:27,890
capacity planning failure could mean a

00:09:24,620 --> 00:09:30,440
violation of the service level agreement

00:09:27,890 --> 00:09:32,810
the grace graceful degradation of

00:09:30,440 --> 00:09:35,000
performance or even the true failure

00:09:32,810 --> 00:09:39,650
like in this case if that bridge

00:09:35,000 --> 00:09:42,200
actually goes down when low testing a

00:09:39,650 --> 00:09:45,050
Drupal stack we should document the

00:09:42,200 --> 00:09:48,200
point of failure as a part of our

00:09:45,050 --> 00:09:51,590
calculations however finding them can be

00:09:48,200 --> 00:09:54,110
a little bit tricky and easily segmented

00:09:51,590 --> 00:09:56,420
architectures help you to find the

00:09:54,110 --> 00:10:00,260
limits of the current hardware you have

00:09:56,420 --> 00:10:03,760
in place you then can use those Capac

00:10:00,260 --> 00:10:07,700
capacity ceilings as a basis for

00:10:03,760 --> 00:10:10,310
predicting future growth to help answer

00:10:07,700 --> 00:10:14,270
these questions there are a few tools

00:10:10,310 --> 00:10:17,330
out there for free most of them that you

00:10:14,270 --> 00:10:20,330
can use for load testing keep in mind

00:10:17,330 --> 00:10:23,570
that we should simulate what will happen

00:10:20,330 --> 00:10:26,270
exactly if the site is under stress in

00:10:23,570 --> 00:10:30,170
the future but you can use tools like

00:10:26,270 --> 00:10:33,080
the loadrunner Yago jmeter and then

00:10:30,170 --> 00:10:35,750
collect the results and track the limits

00:10:33,080 --> 00:10:38,630
with the the tools on the right which

00:10:35,750 --> 00:10:44,780
are permit to use signal effects in our

00:10:38,630 --> 00:10:47,300
case CAC teenagers nachos etc and a very

00:10:44,780 --> 00:10:53,410
important notice some people confuse

00:10:47,300 --> 00:10:57,089
these two topics they are related

00:10:53,410 --> 00:11:00,300
but they have completely different goals

00:10:57,089 --> 00:11:02,980
capacity planning and performance tuning

00:11:00,300 --> 00:11:05,009
performance tuning optimizes the

00:11:02,980 --> 00:11:07,930
existing system for better performance

00:11:05,009 --> 00:11:12,100
while capacity planning uses the

00:11:07,930 --> 00:11:14,949
processes like low testing to determine

00:11:12,100 --> 00:11:17,110
what's what the system needs and when it

00:11:14,949 --> 00:11:21,040
needs it using the current performance

00:11:17,110 --> 00:11:24,100
not a better performance not futuristic

00:11:21,040 --> 00:11:27,250
performance as a baseline so to start

00:11:24,100 --> 00:11:29,529
the planning for capacity you must

00:11:27,250 --> 00:11:32,050
accept that the system current

00:11:29,529 --> 00:11:34,800
performance is this one without regard

00:11:32,050 --> 00:11:40,420
to what you might optimize in the future

00:11:34,800 --> 00:11:42,519
for a complex stat stack like ours it is

00:11:40,420 --> 00:11:46,180
important to understand that a single

00:11:42,519 --> 00:11:50,319
input request to the service will result

00:11:46,180 --> 00:11:53,259
in multiple inputs across the system we

00:11:50,319 --> 00:11:55,990
should always try to split the nodes in

00:11:53,259 --> 00:11:58,569
components since that makes it easier to

00:11:55,990 --> 00:12:01,480
understand the capacity demands of each

00:11:58,569 --> 00:12:04,630
one then you are able to answer a few

00:12:01,480 --> 00:12:08,350
questions that you couldn't before but

00:12:04,630 --> 00:12:10,079
mainly how increasing the request of the

00:12:08,350 --> 00:12:15,490
queries per second for us for example

00:12:10,079 --> 00:12:18,130
affects the resources in the end after

00:12:15,490 --> 00:12:21,069
splitting the nodes to a reasonable

00:12:18,130 --> 00:12:24,189
level in your case you can identify the

00:12:21,069 --> 00:12:26,680
key resources that need to be measured

00:12:24,189 --> 00:12:30,579
like the disk space the disks throughput

00:12:26,680 --> 00:12:33,029
the CPU performance the RAM the network

00:12:30,579 --> 00:12:37,029
bandwidth and very important because

00:12:33,029 --> 00:12:42,420
ipv4 is just ending in a few weeks

00:12:37,029 --> 00:12:45,279
someone told me yeah the I people yeah

00:12:42,420 --> 00:12:48,819
this is scary right

00:12:45,279 --> 00:12:54,220
so web what bad planning of capacity

00:12:48,819 --> 00:12:56,709
really IP for ipv4 web service in this

00:12:54,220 --> 00:12:58,509
case they are pic driven as you might

00:12:56,709 --> 00:13:01,149
have noticed in your Drupal sites and

00:12:58,509 --> 00:13:03,910
they are application specific they

00:13:01,149 --> 00:13:06,570
accept user requests they make calls to

00:13:03,910 --> 00:13:09,000
the backend and then the user is

00:13:06,570 --> 00:13:12,360
of those calls to generate responses

00:13:09,000 --> 00:13:16,950
some applications like Drupal they make

00:13:12,360 --> 00:13:18,300
simple or complex in the case of Drupal

00:13:16,950 --> 00:13:22,110
that's what I mean

00:13:18,300 --> 00:13:26,820
queries others they make very simple

00:13:22,110 --> 00:13:29,880
ones ok so you if you don't actually

00:13:26,820 --> 00:13:33,240
have a way to measure current capacity

00:13:29,880 --> 00:13:38,370
you cannot conduct any plan you should

00:13:33,240 --> 00:13:40,710
only be guessing here is a diagram it's

00:13:38,370 --> 00:13:43,980
based on the Brendan which Craig site

00:13:40,710 --> 00:13:47,040
there was a very nice talk from my my

00:13:43,980 --> 00:13:50,820
friend I mean yesterday should be

00:13:47,040 --> 00:13:52,860
published online today a video about

00:13:50,820 --> 00:13:55,410
this and it's talking about several

00:13:52,860 --> 00:13:59,970
tools that can actually be run in the

00:13:55,410 --> 00:14:04,260
server to get those measurements so like

00:13:59,970 --> 00:14:08,040
in this simple example I scripted this

00:14:04,260 --> 00:14:13,200
this will always will all be available

00:14:08,040 --> 00:14:16,560
online there are several ways to collect

00:14:13,200 --> 00:14:19,680
the measure and the metrics we send to a

00:14:16,560 --> 00:14:21,870
time series service like the ones we

00:14:19,680 --> 00:14:24,660
spoke before and sending these metrics

00:14:21,870 --> 00:14:29,220
for instance to stats D can be done with

00:14:24,660 --> 00:14:32,670
a simple script like this one and then

00:14:29,220 --> 00:14:35,670
it can be done also with more

00:14:32,670 --> 00:14:38,370
sophisticated services like collecti or

00:14:35,670 --> 00:14:42,330
telegraph if you need a constant

00:14:38,370 --> 00:14:44,700
monitoring service now we should be able

00:14:42,330 --> 00:14:48,090
to track the capacity automatically and

00:14:44,700 --> 00:14:51,210
richelene would routinely by measuring

00:14:48,090 --> 00:14:55,020
system behavior over a predefined amount

00:14:51,210 --> 00:14:58,200
of time and by monitoring that normal

00:14:55,020 --> 00:15:00,690
behavior over days weeks and months you

00:14:58,200 --> 00:15:04,560
would be able to see some patterns

00:15:00,690 --> 00:15:07,590
occurring regularly as well as trends

00:15:04,560 --> 00:15:13,080
over time that will help predict when

00:15:07,590 --> 00:15:16,140
you will need more capacity so to track

00:15:13,080 --> 00:15:18,180
this capacity you need tools like to

00:15:16,140 --> 00:15:20,160
collect and store and display

00:15:18,180 --> 00:15:26,519
usually in the graph

00:15:20,160 --> 00:15:30,350
metrics overtime a couple of low testing

00:15:26,519 --> 00:15:34,980
tips I found some resources online

00:15:30,350 --> 00:15:39,389
especially a docker hat that will spawn

00:15:34,980 --> 00:15:43,259
you graph on a graph ID so you can put

00:15:39,389 --> 00:15:50,310
that running collect the metrics keep

00:15:43,259 --> 00:15:52,709
them and then tear it down and yeah

00:15:50,310 --> 00:15:55,529
predicting capacity is an ongoing

00:15:52,709 --> 00:15:59,940
process it's not like it's not done once

00:15:55,529 --> 00:16:02,370
it needs to be based on some intuition

00:15:59,940 --> 00:16:06,089
and some math to actually make the

00:16:02,370 --> 00:16:08,250
forecasts automating as much as the

00:16:06,089 --> 00:16:12,149
process as you can will help you to stay

00:16:08,250 --> 00:16:13,769
ahead of the procurement process taking

00:16:12,149 --> 00:16:15,990
the time to connect the metric

00:16:13,769 --> 00:16:20,009
collection systems to the training

00:16:15,990 --> 00:16:22,170
software it is possible to predict the

00:16:20,009 --> 00:16:25,920
future with precision I'm pretty sure of

00:16:22,170 --> 00:16:29,160
that now but it isn't it isn't possible

00:16:25,920 --> 00:16:32,610
I'm pretty sure of that now but we can

00:16:29,160 --> 00:16:36,920
always try our best forecast capacity

00:16:32,610 --> 00:16:41,550
using part of context and part of math

00:16:36,920 --> 00:16:45,060
it's also a heart of making an educated

00:16:41,550 --> 00:16:47,940
guess about the future using historical

00:16:45,060 --> 00:16:52,079
data like in this case it's a long term

00:16:47,940 --> 00:16:57,029
view it can be steady it can be outside

00:16:52,079 --> 00:17:00,149
of rare bursts and spikes with all data

00:16:57,029 --> 00:17:02,939
into perspective you can generate then

00:17:00,149 --> 00:17:06,630
estimates to sustain the growth of the

00:17:02,939 --> 00:17:09,750
website in the cloud context these

00:17:06,630 --> 00:17:15,510
forecasts guide the design of of course

00:17:09,750 --> 00:17:18,179
the out of scaling policies so let's

00:17:15,510 --> 00:17:20,909
start by taking a look at the daily

00:17:18,179 --> 00:17:24,630
storage conception it's a very easy easy

00:17:20,909 --> 00:17:27,150
example and then you can see a forecast

00:17:24,630 --> 00:17:29,940
in terms of future needs of the storage

00:17:27,150 --> 00:17:32,850
you already know that defining the

00:17:29,940 --> 00:17:34,030
metric it's total availability disk

00:17:32,850 --> 00:17:36,640
space

00:17:34,030 --> 00:17:39,669
or more totally a total available disk

00:17:36,640 --> 00:17:43,030
space so the graphing is cumulative and

00:17:39,669 --> 00:17:46,870
it's total of this data it provides the

00:17:43,030 --> 00:17:51,130
right perspective from which to predict

00:17:46,870 --> 00:17:55,780
the future needs so talking about this

00:17:51,130 --> 00:18:02,110
graph it's it's nearing 30 terabytes I

00:17:55,780 --> 00:18:06,309
think and right now it's currently on 23

00:18:02,110 --> 00:18:08,679
so you can see it's going to be go over

00:18:06,309 --> 00:18:11,409
that limit in early April

00:18:08,679 --> 00:18:13,510
so this is this is a very easy situation

00:18:11,409 --> 00:18:15,429
but you have the ceilings there that's

00:18:13,510 --> 00:18:21,429
what I'm talking about and you have your

00:18:15,429 --> 00:18:24,100
historical data two essential things so

00:18:21,429 --> 00:18:27,730
the other thing is you have curve

00:18:24,100 --> 00:18:29,679
fitting and this in capacity planning

00:18:27,730 --> 00:18:32,620
this is the most important thing is

00:18:29,679 --> 00:18:36,070
where the creative can collide with a

00:18:32,620 --> 00:18:38,289
scientific in most cases it's used to

00:18:36,070 --> 00:18:41,500
stay ahead of the growth which is

00:18:38,289 --> 00:18:46,330
normally seen as a time series data that

00:18:41,500 --> 00:18:48,789
extends upwards and to the right in some

00:18:46,330 --> 00:18:53,110
form then the challenge is figuring out

00:18:48,789 --> 00:18:55,870
how and when the data gets there

00:18:53,110 --> 00:18:58,000
using the forecast so forecasting is

00:18:55,870 --> 00:19:00,400
this process that you use for

00:18:58,000 --> 00:19:03,909
constructing the new data prom points

00:19:00,400 --> 00:19:06,070
beyond a set of known data points the

00:19:03,909 --> 00:19:09,100
difficult here with the curve fitting

00:19:06,070 --> 00:19:11,650
and the forecasts lies on the

00:19:09,100 --> 00:19:14,500
reconciliation between what we know now

00:19:11,650 --> 00:19:18,880
and what data source or the apparent

00:19:14,500 --> 00:19:22,770
best fit equation is so simply because

00:19:18,880 --> 00:19:26,350
you find the curve that's 99.999%

00:19:22,770 --> 00:19:28,539
effective or hasn't met mat mathematical

00:19:26,350 --> 00:19:33,780
currency doesn't mean it's going to be

00:19:28,539 --> 00:19:37,090
like that but that picture in the future

00:19:33,780 --> 00:19:41,070
what about this graph I'm pretty sure

00:19:37,090 --> 00:19:45,629
you guys have seen this big driven

00:19:41,070 --> 00:19:49,559
resource usage in any web service

00:19:45,629 --> 00:19:52,080
so when we forecast this capacity of a

00:19:49,559 --> 00:19:54,299
pig driven resource we need to track how

00:19:52,080 --> 00:19:57,359
the pigs are going to change over time

00:19:54,299 --> 00:20:00,179
we can then extrapolate from from this

00:19:57,359 --> 00:20:03,690
data and predict the future needs which

00:20:00,179 --> 00:20:06,299
is the fun part the web service metrics

00:20:03,690 --> 00:20:10,009
here illustrate this process then we

00:20:06,299 --> 00:20:13,649
identify what are the ceilings and

00:20:10,009 --> 00:20:16,919
define what is the specific CPU usage

00:20:13,649 --> 00:20:19,889
for this particular Hardware it can also

00:20:16,919 --> 00:20:22,169
be that the CPU usage is directly

00:20:19,889 --> 00:20:24,989
correlated to the amounts of work in

00:20:22,169 --> 00:20:27,419
terms of PHP and Apache and they are

00:20:24,989 --> 00:20:30,299
doing the this to serve the web pages

00:20:27,419 --> 00:20:32,549
and then we can try to find a relation

00:20:30,299 --> 00:20:36,049
between the system resources statistics

00:20:32,549 --> 00:20:38,970
and the application level work which in

00:20:36,049 --> 00:20:43,369
in our case will will drive us to a

00:20:38,970 --> 00:20:48,179
forecasting so how can we actually

00:20:43,369 --> 00:20:52,649
automate this we don't want to be doing

00:20:48,179 --> 00:20:56,899
this as a manual process over time so

00:20:52,649 --> 00:21:01,109
there is a very nice tool it's called

00:20:56,899 --> 00:21:04,139
fit YK it's open source it's for

00:21:01,109 --> 00:21:07,169
nonlinear fitting and we are able to

00:21:04,139 --> 00:21:14,159
actually automate the process of curve

00:21:07,169 --> 00:21:14,729
fitting equations to do exactly what we

00:21:14,159 --> 00:21:18,659
want

00:21:14,729 --> 00:21:20,970
from wi2 to to the to the CLI and

00:21:18,659 --> 00:21:30,330
therefore we can actually script that

00:21:20,970 --> 00:21:32,999
and automate in our for our needs so in

00:21:30,330 --> 00:21:38,669
this screencast what what we're looking

00:21:32,999 --> 00:21:41,309
here it's running we have our disk

00:21:38,669 --> 00:21:43,979
storage and we already had our disk

00:21:41,309 --> 00:21:47,429
storage example and then this is the

00:21:43,979 --> 00:21:54,690
most complex one which is fit YK trying

00:21:47,429 --> 00:21:57,179
to actually fit the Apache spikes in our

00:21:54,690 --> 00:21:58,400
service and then making an equation

00:21:57,179 --> 00:22:01,490
there

00:21:58,400 --> 00:22:04,330
and then we get that equation and use it

00:22:01,490 --> 00:22:07,850
for future needs

00:22:04,330 --> 00:22:13,130
so forecasting can also be used with

00:22:07,850 --> 00:22:15,800
machine learning that's actually one of

00:22:13,130 --> 00:22:20,440
the things that fit YK is not able to do

00:22:15,800 --> 00:22:25,220
but it does the most popular methods

00:22:20,440 --> 00:22:27,710
like Levenberg but you can also use

00:22:25,220 --> 00:22:30,800
machine learning for this process there

00:22:27,710 --> 00:22:34,310
are a few ideas worth exploring in the

00:22:30,800 --> 00:22:37,790
book I co-authored specifically on

00:22:34,310 --> 00:22:40,850
chapter 18 and in this chapter chapter I

00:22:37,790 --> 00:22:42,610
shared some two code examples of machine

00:22:40,850 --> 00:22:44,990
learning that you can actually use for

00:22:42,610 --> 00:22:48,200
forecasting and outer scaling and

00:22:44,990 --> 00:22:48,940
several other problems please give it a

00:22:48,200 --> 00:22:53,810
try

00:22:48,940 --> 00:22:57,080
so to finalize here here are a couple of

00:22:53,810 --> 00:23:01,970
easy steps that will get you started on

00:22:57,080 --> 00:23:06,380
capacity planning first we need to

00:23:01,970 --> 00:23:08,000
always select a process owner this would

00:23:06,380 --> 00:23:11,240
be a person that will be leading the

00:23:08,000 --> 00:23:13,760
process and then we need to identify the

00:23:11,240 --> 00:23:16,430
resources that need to be measured we

00:23:13,760 --> 00:23:19,070
need to compare to a maximum of capacity

00:23:16,430 --> 00:23:23,330
we need to collect the workload and

00:23:19,070 --> 00:23:26,180
forecasts and then we need to use that

00:23:23,330 --> 00:23:29,440
those forecasts for IT resources and

00:23:26,180 --> 00:23:32,600
requirements then we can map the

00:23:29,440 --> 00:23:35,660
requirements unto existing utilizations

00:23:32,600 --> 00:23:39,730
predict when the system will be out of

00:23:35,660 --> 00:23:43,490
capacity and continuously update the

00:23:39,730 --> 00:23:48,560
utilizations and most most most

00:23:43,490 --> 00:23:51,140
importantly set a goal in order to break

00:23:48,560 --> 00:23:54,260
the constraints of a system and to be

00:23:51,140 --> 00:23:57,770
effective on capacity planning defining

00:23:54,260 --> 00:24:01,640
goals or objectives for your service is

00:23:57,770 --> 00:24:04,760
very important and these come from two

00:24:01,640 --> 00:24:07,940
classes first is load usually expressed

00:24:04,760 --> 00:24:11,390
on arrival rate or peak rate of

00:24:07,940 --> 00:24:12,230
requesters hits hitting the service 4 is

00:24:11,390 --> 00:24:15,230
4x

00:24:12,230 --> 00:24:17,980
on an e-commerce website it may target

00:24:15,230 --> 00:24:22,280
ten thousands of customers making

00:24:17,980 --> 00:24:25,850
purchases on on Christmas on the second

00:24:22,280 --> 00:24:28,400
is performance it's usually expressed in

00:24:25,850 --> 00:24:32,090
the form of service level objectives for

00:24:28,400 --> 00:24:35,960
the service for example 99th percentile

00:24:32,090 --> 00:24:38,990
of all requests should return in 500

00:24:35,960 --> 00:24:41,750
milliseconds for example but most mostly

00:24:38,990 --> 00:24:45,020
identifying why your organization needs

00:24:41,750 --> 00:24:49,280
capacity and what constraints should it

00:24:45,020 --> 00:24:51,680
be alleviating is is very important so

00:24:49,280 --> 00:24:56,770
we can actually avoid bottlenecks of

00:24:51,680 --> 00:25:00,550
growth and be proactive plan ahead

00:24:56,770 --> 00:25:04,400
document your plan that's very important

00:25:00,550 --> 00:25:07,220
in order to support your decisions of

00:25:04,400 --> 00:25:11,540
scaling up or down it's valuable to

00:25:07,220 --> 00:25:14,200
always have a dashboard with with at

00:25:11,540 --> 00:25:16,460
least these metrics in mind

00:25:14,200 --> 00:25:19,820
independently if you are scaling

00:25:16,460 --> 00:25:21,950
manually or out of scaling it should be

00:25:19,820 --> 00:25:25,010
clear that our dwell decisions and

00:25:21,950 --> 00:25:29,030
things that you need to buy our based on

00:25:25,010 --> 00:25:32,230
real data so determine on when to scale

00:25:29,030 --> 00:25:36,110
and how like vertically or horizontally

00:25:32,230 --> 00:25:40,700
or diagonally should always be supported

00:25:36,110 --> 00:25:43,130
by numbers and one of my last tips is to

00:25:40,700 --> 00:25:45,710
actually take advantage of capacity

00:25:43,130 --> 00:25:49,070
planning and drive your system to a do

00:25:45,710 --> 00:25:52,790
the appropriate level of less risk and

00:25:49,070 --> 00:25:56,170
the lowest cost that way you will ensure

00:25:52,790 --> 00:25:58,150
an Elfie growth while meeting user

00:25:56,170 --> 00:26:01,630
expectations

00:25:58,150 --> 00:26:01,630
ok thank you

00:26:04,520 --> 00:26:11,440
any questions I know it's a hard topic

00:26:07,970 --> 00:26:26,800
in 20 minutes and I have a cold so

00:26:11,440 --> 00:26:26,800
trying to fight here no no questions ok

00:26:29,410 --> 00:26:35,570
ok thank you bye bye don't forget to

00:26:33,800 --> 00:26:38,410
actually rate

00:26:35,570 --> 00:26:38,410

YouTube URL: https://www.youtube.com/watch?v=Tyts99q9EQs


