Title: Drupal Core markup in continuous upgrade path   DrupalCon Global 2020
Publication date: 2020-08-25
Playlist: DrupalCon Global 2020
Description: 
	This Front End session explores the balance between backwards compatibility and innovation in the HTML and CSS of Drupal's base themes.
Captions: 
	00:00:06,240 --> 00:00:11,200
okay

00:00:07,359 --> 00:00:14,719
it's uh 15 past so um i think we can

00:00:11,200 --> 00:00:15,519
we can get started so uh this session is

00:00:14,719 --> 00:00:17,279
about the

00:00:15,519 --> 00:00:18,960
triple core markup and continuous

00:00:17,279 --> 00:00:21,600
upgrade path

00:00:18,960 --> 00:00:23,359
and uh thank you for coming to my my

00:00:21,600 --> 00:00:26,080
session

00:00:23,359 --> 00:00:26,960
so uh let me double check that the

00:00:26,080 --> 00:00:29,599
slides are working

00:00:26,960 --> 00:00:30,080
yeah seems to be all good so yeah my

00:00:29,599 --> 00:00:34,559
name is

00:00:30,080 --> 00:00:38,000
uh laurie escola and uh on drupal.org

00:00:34,559 --> 00:00:40,239
you can see me using the nickname

00:00:38,000 --> 00:00:41,360
laurie with three ice i'm a senior

00:00:40,239 --> 00:00:43,760
software engineer

00:00:41,360 --> 00:00:46,000
based in helsinki and working for acquia

00:00:43,760 --> 00:00:48,800
in the dublex relations team

00:00:46,000 --> 00:00:50,000
and if you are wondering about why am i

00:00:48,800 --> 00:00:52,239
interested about the

00:00:50,000 --> 00:00:53,840
triple core markup and continuous

00:00:52,239 --> 00:00:54,800
upgrade paths the reason for that is

00:00:53,840 --> 00:00:56,399
that uh

00:00:54,800 --> 00:00:58,160
i'm a drupal front-end framework manager

00:00:56,399 --> 00:01:01,440
and a team system in theater so

00:00:58,160 --> 00:01:05,840
i do review a lot of patches

00:01:01,440 --> 00:01:05,840
sort of related to the to the front end

00:01:09,119 --> 00:01:14,880
so as you might have experienced

00:01:12,640 --> 00:01:17,040
upgrading triple themes has been a bit

00:01:14,880 --> 00:01:18,880
challenging challenging in the past

00:01:17,040 --> 00:01:21,040
uh so for example upgrading triple seven

00:01:18,880 --> 00:01:25,439
theme to your plate

00:01:21,040 --> 00:01:27,520
required almost a complete rewrite and

00:01:25,439 --> 00:01:29,520
even looking at the drupal 6 to drupal 7

00:01:27,520 --> 00:01:30,880
upgrade instructions

00:01:29,520 --> 00:01:32,880
those instructions simply just

00:01:30,880 --> 00:01:33,520
recommended installing and setting

00:01:32,880 --> 00:01:37,119
garland

00:01:33,520 --> 00:01:39,439
as the default theme after

00:01:37,119 --> 00:01:40,159
reinstalling your custom theme most

00:01:39,439 --> 00:01:42,720
things would

00:01:40,159 --> 00:01:43,920
probably work but there would be always

00:01:42,720 --> 00:01:46,720
some things

00:01:43,920 --> 00:01:46,720
that would be broken

00:01:49,360 --> 00:01:55,920
but it's actually broken and at least

00:01:53,600 --> 00:01:57,920
for me i never had sufficient regression

00:01:55,920 --> 00:02:00,399
testing for the front end code

00:01:57,920 --> 00:02:02,479
so that didn't really help that the

00:02:00,399 --> 00:02:05,040
problem

00:02:02,479 --> 00:02:06,000
so after the time consuming upgrade from

00:02:05,040 --> 00:02:09,520
drupal 7 to

00:02:06,000 --> 00:02:11,120
8 the maintainers of drupal core and

00:02:09,520 --> 00:02:12,879
kind of the whole community have decided

00:02:11,120 --> 00:02:16,319
that we should prioritize making

00:02:12,879 --> 00:02:19,440
upgrades much more easier and

00:02:16,319 --> 00:02:21,280
for that reason the community and the

00:02:19,440 --> 00:02:22,000
core team have spent a lot of time and

00:02:21,280 --> 00:02:24,480
energy

00:02:22,000 --> 00:02:26,160
uh during the triple a triple nine life

00:02:24,480 --> 00:02:26,480
cycle to ensure that the upgrades would

00:02:26,160 --> 00:02:29,680
be

00:02:26,480 --> 00:02:30,560
as smooth as possible so i don't know

00:02:29,680 --> 00:02:32,640
how many of you

00:02:30,560 --> 00:02:33,760
have already upgraded for uh the drupal

00:02:32,640 --> 00:02:35,280
9 but

00:02:33,760 --> 00:02:37,760
i hope that you agree that upgrading

00:02:35,280 --> 00:02:39,040
from drupal 8 to 0.9 was easy

00:02:37,760 --> 00:02:41,200
i don't know maybe you can write in the

00:02:39,040 --> 00:02:42,480
chat if you

00:02:41,200 --> 00:02:44,400
figured out that the upgrading from

00:02:42,480 --> 00:02:47,120
duplicated your plan was easy

00:02:44,400 --> 00:02:51,840
and you can say something if you haven't

00:02:47,120 --> 00:02:51,840
upgraded your plan yet

00:02:54,000 --> 00:02:57,760
well doesn't seem like uh

00:02:58,159 --> 00:03:05,519
okay 89 was easy some some comments and

00:03:01,440 --> 00:03:07,680
some people haven't still upgraded

00:03:05,519 --> 00:03:09,040
well i hope that when you when you do

00:03:07,680 --> 00:03:09,599
upgrade to drupal 9 that you find it

00:03:09,040 --> 00:03:13,599
easy because

00:03:09,599 --> 00:03:16,319
we did spend a lot of energy on that

00:03:13,599 --> 00:03:17,760
and so the reason why upgrades from

00:03:16,319 --> 00:03:19,840
duplex onwards are easy

00:03:17,760 --> 00:03:20,879
it's that uh drupal is implementing

00:03:19,840 --> 00:03:24,159
something called

00:03:20,879 --> 00:03:26,000
continuous upgrade path and uh

00:03:24,159 --> 00:03:27,519
well first of all that means that

00:03:26,000 --> 00:03:29,200
there's no going back to the days of

00:03:27,519 --> 00:03:29,840
drupal 8 development cycle where we

00:03:29,200 --> 00:03:31,920
could

00:03:29,840 --> 00:03:33,360
for example markup we could change

00:03:31,920 --> 00:03:36,959
pretty relentlessly

00:03:33,360 --> 00:03:40,400
and uh it was i guess it was nice

00:03:36,959 --> 00:03:41,920
at the time but uh now we are we are

00:03:40,400 --> 00:03:43,200
prioritizing this uh these easier

00:03:41,920 --> 00:03:44,239
upgrades which i think definitely makes

00:03:43,200 --> 00:03:46,080
sense

00:03:44,239 --> 00:03:47,120
and uh so the continuous upgrade pad

00:03:46,080 --> 00:03:49,040
essentially means that we are

00:03:47,120 --> 00:03:52,159
deprecating the old behavior

00:03:49,040 --> 00:03:55,360
and um when we deprecate something

00:03:52,159 --> 00:03:57,040
uh we are adding some documentation uh

00:03:55,360 --> 00:03:58,879
which allows ids for example to detect

00:03:57,040 --> 00:04:02,959
that that piece of code is

00:03:58,879 --> 00:04:05,439
deprecated and we also add some

00:04:02,959 --> 00:04:06,159
logic to the code that should trigger a

00:04:05,439 --> 00:04:09,360
warning

00:04:06,159 --> 00:04:10,720
so that uh if you are calling code

00:04:09,360 --> 00:04:15,040
on your site that is deprecated you

00:04:10,720 --> 00:04:16,560
should get a warning on your site

00:04:15,040 --> 00:04:18,239
there's also dedicated tooling for

00:04:16,560 --> 00:04:19,600
finding usages of deprecated codes such

00:04:18,239 --> 00:04:22,000
as upgrade status module

00:04:19,600 --> 00:04:23,440
and that's also great because it gives

00:04:22,000 --> 00:04:24,800
developers time to adjust their code

00:04:23,440 --> 00:04:28,639
before the old behavior gets completely

00:04:24,800 --> 00:04:32,000
removed in the next major release

00:04:28,639 --> 00:04:33,840
so let's see how is the readiness of

00:04:32,000 --> 00:04:35,199
each of the components affecting drupal

00:04:33,840 --> 00:04:37,280
front end right now

00:04:35,199 --> 00:04:38,639
so here i've kind of tried to collect

00:04:37,280 --> 00:04:41,680
most of the pieces

00:04:38,639 --> 00:04:43,120
that are in the triple front end and

00:04:41,680 --> 00:04:44,720
could be impacted by the continuous

00:04:43,120 --> 00:04:47,520
upgrade paths

00:04:44,720 --> 00:04:49,360
so i'm going to start by teams itself

00:04:47,520 --> 00:04:51,680
this is kind of specific to drupal core

00:04:49,360 --> 00:04:52,720
so we do have a process for deprecating

00:04:51,680 --> 00:04:55,919
teams

00:04:52,720 --> 00:04:56,720
um it's right now it's just a proof of

00:04:55,919 --> 00:04:58,880
concept

00:04:56,720 --> 00:05:00,720
but uh but we are working on probably

00:04:58,880 --> 00:05:02,479
introducing a

00:05:00,720 --> 00:05:03,840
new key that would allow marking teams

00:05:02,479 --> 00:05:04,160
as deprecated and make it really easy

00:05:03,840 --> 00:05:07,440
but

00:05:04,160 --> 00:05:10,320
uh not necessarily very useful for

00:05:07,440 --> 00:05:11,600
the contrib or custom projects because

00:05:10,320 --> 00:05:14,880
if they don't necessarily have to

00:05:11,600 --> 00:05:15,440
mark teams deprecated ever um so i'm

00:05:14,880 --> 00:05:18,720
going to

00:05:15,440 --> 00:05:21,520
go deeper into that

00:05:18,720 --> 00:05:24,240
uh something that we also had to figure

00:05:21,520 --> 00:05:27,600
out during the drupal 9

00:05:24,240 --> 00:05:29,680
life cycle was that

00:05:27,600 --> 00:05:31,520
how how can we deprecate yaml

00:05:29,680 --> 00:05:33,039
configuration keys

00:05:31,520 --> 00:05:35,280
essentially that's different type of

00:05:33,039 --> 00:05:37,199
metadata that

00:05:35,280 --> 00:05:38,320
teams and other extensions have to

00:05:37,199 --> 00:05:40,240
provide for the team

00:05:38,320 --> 00:05:41,520
and extension to work so for simple

00:05:40,240 --> 00:05:43,120
libraries or

00:05:41,520 --> 00:05:44,880
some kind of data in the info the ammo

00:05:43,120 --> 00:05:47,600
file so for example during the drupal 9

00:05:44,880 --> 00:05:50,479
lifecycle we

00:05:47,600 --> 00:05:52,000
changed the behavior of the base team

00:05:50,479 --> 00:05:54,560
property in uh

00:05:52,000 --> 00:05:55,520
infoyamo so that we made it required so

00:05:54,560 --> 00:05:58,160
we deprecated

00:05:55,520 --> 00:05:59,600
having it not set so if you're if you

00:05:58,160 --> 00:06:00,319
haven't set base team you would get a

00:05:59,600 --> 00:06:03,280
warning

00:06:00,319 --> 00:06:04,160
on your site and uh we would we would

00:06:03,280 --> 00:06:07,520
call

00:06:04,160 --> 00:06:08,560
and ask you to add a value for that

00:06:07,520 --> 00:06:10,479
property

00:06:08,560 --> 00:06:12,400
not going to go deeper into that that's

00:06:10,479 --> 00:06:13,360
also i would say more specific to core

00:06:12,400 --> 00:06:15,840
internals

00:06:13,360 --> 00:06:17,039
then we have regions and uh the good

00:06:15,840 --> 00:06:19,280
thing about the regions is that

00:06:17,039 --> 00:06:20,160
they're not inherited uh the subteams

00:06:19,280 --> 00:06:22,800
and they are not

00:06:20,160 --> 00:06:23,680
therefore accessible by sub themes so we

00:06:22,800 --> 00:06:25,680
don't necessarily need to have to

00:06:23,680 --> 00:06:27,280
deprecate those

00:06:25,680 --> 00:06:29,360
library overrides is kind of another

00:06:27,280 --> 00:06:32,800
aspect of uh something

00:06:29,360 --> 00:06:34,800
that is set in the info demo and

00:06:32,800 --> 00:06:36,240
we don't have a way to deprecate those

00:06:34,800 --> 00:06:38,880
right now

00:06:36,240 --> 00:06:39,520
i'm gonna talk about the kind of things

00:06:38,880 --> 00:06:44,000
that

00:06:39,520 --> 00:06:45,919
are missing uh more in more detail um

00:06:44,000 --> 00:06:47,039
uh after i've kind of walked through all

00:06:45,919 --> 00:06:48,880
of the different bits

00:06:47,039 --> 00:06:50,560
to kind of get a sense where we are

00:06:48,880 --> 00:06:53,520
first

00:06:50,560 --> 00:06:54,560
so um on the second group i have like

00:06:53,520 --> 00:06:56,400
data processing

00:06:54,560 --> 00:06:58,000
and we do have a process for decorating

00:06:56,400 --> 00:07:00,319
hooks that's pre-existing from

00:06:58,000 --> 00:07:02,160
modules nothing specific to the to the

00:07:00,319 --> 00:07:03,039
teams so i'm not really going to talk

00:07:02,160 --> 00:07:05,919
about that

00:07:03,039 --> 00:07:06,639
as well we have a pre-process functions

00:07:05,919 --> 00:07:08,479
which is

00:07:06,639 --> 00:07:09,759
basically one of the apis that is

00:07:08,479 --> 00:07:13,280
handling arrays

00:07:09,759 --> 00:07:14,240
and uh for the array type of aps we

00:07:13,280 --> 00:07:16,400
don't really have

00:07:14,240 --> 00:07:18,240
a process for deprecating introducing

00:07:16,400 --> 00:07:20,800
the applications right now

00:07:18,240 --> 00:07:22,639
then we have team suggestions and uh we

00:07:20,800 --> 00:07:24,800
don't really have a way to

00:07:22,639 --> 00:07:25,919
mark team suggestions as deprecated

00:07:24,800 --> 00:07:27,520
right now and

00:07:25,919 --> 00:07:29,280
uh it's probably something that you

00:07:27,520 --> 00:07:30,479
might need if you want to remove a team

00:07:29,280 --> 00:07:31,919
suggestion from

00:07:30,479 --> 00:07:33,840
the list of team suggestions that you

00:07:31,919 --> 00:07:35,759
are that a team in core

00:07:33,840 --> 00:07:37,280
or team or module provides in

00:07:35,759 --> 00:07:39,840
intercourse

00:07:37,280 --> 00:07:40,479
then we have render elements uh info

00:07:39,840 --> 00:07:43,599
alter and

00:07:40,479 --> 00:07:44,960
uh prerender and process functions so uh

00:07:43,599 --> 00:07:46,800
i would say the render elements probably

00:07:44,960 --> 00:07:48,960
go to the group of

00:07:46,800 --> 00:07:50,720
hra type of apis and then we have the

00:07:48,960 --> 00:07:51,599
pre-render and process functions that

00:07:50,720 --> 00:07:53,599
are

00:07:51,599 --> 00:07:55,199
kind of following the normal uh

00:07:53,599 --> 00:07:57,440
deprecation process for

00:07:55,199 --> 00:07:58,319
functions so that's something that is

00:07:57,440 --> 00:08:01,360
possible to

00:07:58,319 --> 00:08:04,400
do right now then uh deprecating

00:08:01,360 --> 00:08:05,759
templates doesn't exist yet uh so for

00:08:04,400 --> 00:08:06,960
example we wanted to remove the template

00:08:05,759 --> 00:08:08,479
from triple core we would have to first

00:08:06,960 --> 00:08:10,840
deprecate it and

00:08:08,479 --> 00:08:12,639
we don't have a process for that right

00:08:10,840 --> 00:08:15,919
now

00:08:12,639 --> 00:08:16,879
then uh inside the templates we have

00:08:15,919 --> 00:08:18,639
variables

00:08:16,879 --> 00:08:19,919
and uh process for deprecating template

00:08:18,639 --> 00:08:23,199
variables doesn't exist

00:08:19,919 --> 00:08:24,479
yet we have html elements that you can

00:08:23,199 --> 00:08:25,919
use inside

00:08:24,479 --> 00:08:27,759
templates we don't have process for

00:08:25,919 --> 00:08:29,120
deprecating those and this

00:08:27,759 --> 00:08:31,360
doesn't necessarily make that much sense

00:08:29,120 --> 00:08:33,120
because of html it's not a

00:08:31,360 --> 00:08:35,279
programming language so it's not

00:08:33,120 --> 00:08:37,919
necessarily going to be possible

00:08:35,279 --> 00:08:38,800
to introduce applications there but just

00:08:37,919 --> 00:08:40,320
for the sake of

00:08:38,800 --> 00:08:41,919
marking it here saying that we don't

00:08:40,320 --> 00:08:43,519
have a process for that you don't really

00:08:41,919 --> 00:08:44,800
have a process for making changes other

00:08:43,519 --> 00:08:46,160
than like just deprecating the whole

00:08:44,800 --> 00:08:48,240
theme

00:08:46,160 --> 00:08:50,080
then uh we have trick blocks and macros

00:08:48,240 --> 00:08:51,680
which could be

00:08:50,080 --> 00:08:53,920
surprising for some people that we have

00:08:51,680 --> 00:08:55,680
here and the reason for having them here

00:08:53,920 --> 00:08:56,240
is that uh if you use a trick block or

00:08:55,680 --> 00:08:58,560
macro

00:08:56,240 --> 00:08:59,360
in your template is that you are

00:08:58,560 --> 00:09:02,080
essentially

00:08:59,360 --> 00:09:03,040
providing api for other templates uh

00:09:02,080 --> 00:09:04,800
because they can

00:09:03,040 --> 00:09:06,560
load your template and use that block or

00:09:04,800 --> 00:09:08,000
macro in the other template so

00:09:06,560 --> 00:09:09,440
especially in core if

00:09:08,000 --> 00:09:11,040
there's a block and we want to remove

00:09:09,440 --> 00:09:13,600
that we would have to deprecate the

00:09:11,040 --> 00:09:15,040
old block first also something that we

00:09:13,600 --> 00:09:19,600
haven't figured out a process

00:09:15,040 --> 00:09:22,800
for yet something that is to be done

00:09:19,600 --> 00:09:24,080
um during the drupal 9 lifecycle we

00:09:22,800 --> 00:09:25,519
figured out a process for deprecating

00:09:24,080 --> 00:09:28,480
libraries which is great

00:09:25,519 --> 00:09:31,760
uh so uh for example during the drupal 9

00:09:28,480 --> 00:09:33,600
lifecycle we deprecated lots of faker ui

00:09:31,760 --> 00:09:35,120
libraries and here's an example of

00:09:33,600 --> 00:09:36,480
jquery cookie which is currently marked

00:09:35,120 --> 00:09:38,480
as deprecated

00:09:36,480 --> 00:09:40,560
in drupal 9 and to be removed in drupal

00:09:38,480 --> 00:09:42,240
10 so basically you just have to provide

00:09:40,560 --> 00:09:43,839
a deprecated key on

00:09:42,240 --> 00:09:45,920
part of the library definition and the

00:09:43,839 --> 00:09:47,360
libraries of the yml file

00:09:45,920 --> 00:09:49,200
there's an issue on the bottom if you're

00:09:47,360 --> 00:09:52,640
interested to see

00:09:49,200 --> 00:09:52,640
um how this was done

00:09:52,959 --> 00:09:56,320
then we have individual css files or

00:09:55,680 --> 00:09:58,720
like

00:09:56,320 --> 00:10:00,640
or maybe pieces of uh like individual

00:09:58,720 --> 00:10:02,399
css selectors or rules

00:10:00,640 --> 00:10:04,000
uh we don't have process for decorating

00:10:02,399 --> 00:10:06,959
those again probably doesn't make

00:10:04,000 --> 00:10:07,440
that much sense but uh for the sake of

00:10:06,959 --> 00:10:09,519
uh

00:10:07,440 --> 00:10:11,760
just tracking down what can be is easy

00:10:09,519 --> 00:10:13,279
for us to change and what is not um

00:10:11,760 --> 00:10:16,880
marking it here something that we don't

00:10:13,279 --> 00:10:19,920
have and then we have uh

00:10:16,880 --> 00:10:22,959
javascript where we do have process for

00:10:19,920 --> 00:10:26,079
deprecating functions and properties

00:10:22,959 --> 00:10:28,000
so for example here's uh jquery cookie

00:10:26,079 --> 00:10:31,120
which we replaced with the

00:10:28,000 --> 00:10:32,720
jscookie and

00:10:31,120 --> 00:10:34,959
so this is something that we introduced

00:10:32,720 --> 00:10:37,600
in triple nine two so that uh

00:10:34,959 --> 00:10:39,200
will be the default option in drupal 10

00:10:37,600 --> 00:10:42,079
and we have kind of this wrapper around

00:10:39,200 --> 00:10:44,560
js cookie to

00:10:42,079 --> 00:10:46,160
keep the existing usages of jquery

00:10:44,560 --> 00:10:47,519
cookie working and

00:10:46,160 --> 00:10:49,839
if you're using jquery cookie then we

00:10:47,519 --> 00:10:52,480
would give you this warning and uh

00:10:49,839 --> 00:10:54,480
since we also we've also added this uh

00:10:52,480 --> 00:10:56,399
piece of documentation to the doc block

00:10:54,480 --> 00:11:00,959
uh your ide would be able to recognize

00:10:56,399 --> 00:11:03,519
that this function is deprecated

00:11:00,959 --> 00:11:05,680
so we are still missing a way to turn

00:11:03,519 --> 00:11:08,560
the deprecation warnings on in browsers

00:11:05,680 --> 00:11:09,839
and also we are messing tooling in the

00:11:08,560 --> 00:11:12,399
upgrade status module

00:11:09,839 --> 00:11:13,440
for detecting these so if you are

00:11:12,399 --> 00:11:16,800
interested in

00:11:13,440 --> 00:11:20,240
working to two of these parts there's

00:11:16,800 --> 00:11:22,880
issues on the bottom of the slide

00:11:20,240 --> 00:11:23,440
so someone asked on the slack i mean on

00:11:22,880 --> 00:11:24,959
the chat

00:11:23,440 --> 00:11:27,519
if it would be possible to share the

00:11:24,959 --> 00:11:30,079
slides i will share the slides

00:11:27,519 --> 00:11:31,519
after the presentation uh so i will

00:11:30,079 --> 00:11:34,160
tweet them out on my

00:11:31,519 --> 00:11:35,839
trigger twitter account which is uh

00:11:34,160 --> 00:11:38,000
lowry with two eyes and then

00:11:35,839 --> 00:11:39,120
number one in the end and uh i will also

00:11:38,000 --> 00:11:42,959
add them to the

00:11:39,120 --> 00:11:46,720
uh the event

00:11:42,959 --> 00:11:47,600
uh session note so then you can find all

00:11:46,720 --> 00:11:51,279
of the links and

00:11:47,600 --> 00:11:51,279
uh information from there

00:11:51,519 --> 00:11:56,000
so here here's an overview of how ready

00:11:54,639 --> 00:11:57,760
we are on the front end for the

00:11:56,000 --> 00:11:58,320
continuous upgrade path so as you can

00:11:57,760 --> 00:12:02,880
see

00:11:58,320 --> 00:12:05,920
we are still missing quite a few parts

00:12:02,880 --> 00:12:09,360
uh if you will on the on the front end

00:12:05,920 --> 00:12:11,040
uh so let's filter out the bits that

00:12:09,360 --> 00:12:12,720
we've already covered and let's focus on

00:12:11,040 --> 00:12:15,279
the parts that

00:12:12,720 --> 00:12:15,279
are missing

00:12:17,200 --> 00:12:20,560
so here's all of the apis that are still

00:12:19,680 --> 00:12:24,079
missing a

00:12:20,560 --> 00:12:25,279
deprecation process so what i think

00:12:24,079 --> 00:12:28,160
would make sense

00:12:25,279 --> 00:12:29,760
is grouping these into three different

00:12:28,160 --> 00:12:32,399
groups so we have

00:12:29,760 --> 00:12:34,160
apis that need a defined process so

00:12:32,399 --> 00:12:35,440
these are basically similar type of apis

00:12:34,160 --> 00:12:38,079
that we've already added

00:12:35,440 --> 00:12:39,760
deprecation processes for earlier on the

00:12:38,079 --> 00:12:42,720
php side of things

00:12:39,760 --> 00:12:44,480
then we have the uh the next group that

00:12:42,720 --> 00:12:47,680
we have is no code syntaxes

00:12:44,480 --> 00:12:50,079
so we have html and css

00:12:47,680 --> 00:12:51,680
so this is kind of its own uh tricky

00:12:50,079 --> 00:12:52,639
group because of it doesn't necessarily

00:12:51,680 --> 00:12:54,160
make that uh

00:12:52,639 --> 00:12:55,920
that much sense to introduce application

00:12:54,160 --> 00:12:57,920
processes there or you would have to use

00:12:55,920 --> 00:12:59,519
something else at least like javascript

00:12:57,920 --> 00:13:02,000
to introduce the application process

00:12:59,519 --> 00:13:05,360
there and then the final group is

00:13:02,000 --> 00:13:07,760
uh every type of apis so that's uh

00:13:05,360 --> 00:13:09,600
pre-versus functions for motors and uh

00:13:07,760 --> 00:13:12,160
render element info alters

00:13:09,600 --> 00:13:13,200
and uh i think this is kind of unified

00:13:12,160 --> 00:13:14,639
group where we need

00:13:13,200 --> 00:13:18,800
to figure out solutions for how to

00:13:14,639 --> 00:13:18,800
deprecate every type of apis

00:13:18,880 --> 00:13:24,079
so yeah i think the first group that

00:13:22,399 --> 00:13:25,440
i'm gonna talk about is going to be the

00:13:24,079 --> 00:13:29,440
apis that need

00:13:25,440 --> 00:13:29,440
a uh defined process

00:13:29,920 --> 00:13:33,680
so i'm going to start by talking about

00:13:32,320 --> 00:13:37,120
the big macros and

00:13:33,680 --> 00:13:37,920
blocks and um a great thing related to

00:13:37,120 --> 00:13:41,839
this is that

00:13:37,920 --> 00:13:44,720
2.6 has a built-in function

00:13:41,839 --> 00:13:45,440
for triggering deprecation warnings

00:13:44,720 --> 00:13:47,760
which

00:13:45,440 --> 00:13:48,959
i think we would be able to utilize in

00:13:47,760 --> 00:13:50,560
drupal car

00:13:48,959 --> 00:13:52,079
unfortunately we don't have a documented

00:13:50,560 --> 00:13:53,680
process for using it yet

00:13:52,079 --> 00:13:55,600
uh but that should be pretty easy

00:13:53,680 --> 00:13:57,360
because the function exists already

00:13:55,600 --> 00:13:59,279
we just need to kind of make sure that

00:13:57,360 --> 00:14:03,199
all of our tooling can detect

00:13:59,279 --> 00:14:06,480
the usage of this function and that

00:14:03,199 --> 00:14:08,480
we have kind of documented format for

00:14:06,480 --> 00:14:11,760
the messages

00:14:08,480 --> 00:14:13,360
that exist so here here's

00:14:11,760 --> 00:14:14,880
again there's a link on the bottom of

00:14:13,360 --> 00:14:18,560
the slide for the

00:14:14,880 --> 00:14:21,440
documentation page and there's also a

00:14:18,560 --> 00:14:23,040
a link for the issue for documenting how

00:14:21,440 --> 00:14:27,600
to uh deprecate

00:14:23,040 --> 00:14:30,800
the tweak macros and blocks

00:14:27,600 --> 00:14:34,000
the second type of

00:14:30,800 --> 00:14:35,760
api uh where we have to add new

00:14:34,000 --> 00:14:36,639
processes for different uh i think

00:14:35,760 --> 00:14:39,120
applications is

00:14:36,639 --> 00:14:40,240
template variables and team suggestions

00:14:39,120 --> 00:14:41,920
and uh so i think

00:14:40,240 --> 00:14:43,279
similar approach could be taken to both

00:14:41,920 --> 00:14:46,639
of these use cases

00:14:43,279 --> 00:14:48,480
so it's uh i think uh

00:14:46,639 --> 00:14:50,800
these apis what they could benefit from

00:14:48,480 --> 00:14:55,199
is uh approach where we could uh

00:14:50,800 --> 00:14:56,160
wrap the uh variable or the output that

00:14:55,199 --> 00:14:59,040
we're giving

00:14:56,160 --> 00:15:00,000
with a object that is essentially

00:14:59,040 --> 00:15:02,240
allowing

00:15:00,000 --> 00:15:03,279
someone who is accessing that variable

00:15:02,240 --> 00:15:05,040
to get the data

00:15:03,279 --> 00:15:07,199
but whenever they are accessing the data

00:15:05,040 --> 00:15:10,079
we would also draw a uh

00:15:07,199 --> 00:15:11,440
warning to let them know that they are

00:15:10,079 --> 00:15:14,160
using uh

00:15:11,440 --> 00:15:15,120
deprecated variable so for example here

00:15:14,160 --> 00:15:17,279
i have a

00:15:15,120 --> 00:15:18,720
code that is deprecating a variable from

00:15:17,279 --> 00:15:22,079
a template

00:15:18,720 --> 00:15:22,959
so uh for example in this example we

00:15:22,079 --> 00:15:25,440
have uh

00:15:22,959 --> 00:15:26,000
renamed it renamed the doc name variable

00:15:25,440 --> 00:15:29,199
integers

00:15:26,000 --> 00:15:30,720
name so uh we are initializing a uh

00:15:29,199 --> 00:15:32,480
we're build we're creating a new

00:15:30,720 --> 00:15:34,720
deprecated object here

00:15:32,480 --> 00:15:36,079
and we're telling first what is a new

00:15:34,720 --> 00:15:38,399
variable that people should use

00:15:36,079 --> 00:15:40,639
and then we have a message explaining

00:15:38,399 --> 00:15:43,600
the same

00:15:40,639 --> 00:15:44,320
and um like i said probably similar

00:15:43,600 --> 00:15:48,079
approach

00:15:44,320 --> 00:15:49,759
could be taken in the same suggestions

00:15:48,079 --> 00:15:51,360
there's two issue links again on the

00:15:49,759 --> 00:15:53,120
bottom of the slide if you are

00:15:51,360 --> 00:15:55,040
interested to work on this

00:15:53,120 --> 00:15:58,800
but i think something like this could be

00:15:55,040 --> 00:15:58,800
implemented on that issue pretty easily

00:15:59,120 --> 00:16:04,320
the the next step

00:16:02,720 --> 00:16:06,560
is you have to be able to deprecate

00:16:04,320 --> 00:16:09,600
templates and uh

00:16:06,560 --> 00:16:10,160
the trick deprecate function or tag that

00:16:09,600 --> 00:16:12,880
uh

00:16:10,160 --> 00:16:15,040
is built in to twig from earlier is like

00:16:12,880 --> 00:16:18,160
could theoretically be used for this

00:16:15,040 --> 00:16:20,160
but the difference to what we probably

00:16:18,160 --> 00:16:21,839
need and what that provides is that that

00:16:20,160 --> 00:16:23,120
is going to deprecate a specific

00:16:21,839 --> 00:16:25,920
instance of a template

00:16:23,120 --> 00:16:26,240
rather than the kind of wall team hook

00:16:25,920 --> 00:16:28,320
or

00:16:26,240 --> 00:16:29,680
like um all of the different instances

00:16:28,320 --> 00:16:31,199
of the template like overrides free

00:16:29,680 --> 00:16:32,720
process functions and team suggestions

00:16:31,199 --> 00:16:34,800
and so on

00:16:32,720 --> 00:16:36,079
uh so what is probably that and that is

00:16:34,800 --> 00:16:39,519
probably what we actually need

00:16:36,079 --> 00:16:40,959
in interval core so what we probably

00:16:39,519 --> 00:16:44,160
have to provide is instead

00:16:40,959 --> 00:16:47,759
a new key in the hook theme

00:16:44,160 --> 00:16:50,560
so that we can mark a uh template as say

00:16:47,759 --> 00:16:51,040
as they deprecated and that would then

00:16:50,560 --> 00:16:53,199
trigger

00:16:51,040 --> 00:16:54,079
a deprecation warning whenever someone

00:16:53,199 --> 00:16:57,360
is

00:16:54,079 --> 00:17:00,800
overriding a template or using that

00:16:57,360 --> 00:17:00,800
template anywhere

00:17:02,839 --> 00:17:09,760
then the final piece related to the uh

00:17:06,559 --> 00:17:12,880
i would say more generic type of apis

00:17:09,760 --> 00:17:14,400
is library overrides and extents and uh

00:17:12,880 --> 00:17:15,679
the reason why we have to be concerned

00:17:14,400 --> 00:17:17,520
about the library overrides in that

00:17:15,679 --> 00:17:21,039
sense is that

00:17:17,520 --> 00:17:22,880
they decide which

00:17:21,039 --> 00:17:24,559
css files and javascript files are going

00:17:22,880 --> 00:17:27,520
to be loaded on the page

00:17:24,559 --> 00:17:28,400
and those are inherited subteams

00:17:27,520 --> 00:17:32,000
essentially

00:17:28,400 --> 00:17:34,799
and uh so for example if you replace

00:17:32,000 --> 00:17:35,360
the jquery ui dialog with a bootstrap

00:17:34,799 --> 00:17:37,760
dialog

00:17:35,360 --> 00:17:38,720
that obviously has an impact on your

00:17:37,760 --> 00:17:41,280
child themes

00:17:38,720 --> 00:17:42,880
there could be some more subtle changes

00:17:41,280 --> 00:17:46,320
that could have an impact on the

00:17:42,880 --> 00:17:46,640
valve theme but essentially um we can we

00:17:46,320 --> 00:17:48,320
can

00:17:46,640 --> 00:17:49,760
sum up that library overrides and

00:17:48,320 --> 00:17:51,440
extends or something that

00:17:49,760 --> 00:17:53,039
have an impact on the on the child

00:17:51,440 --> 00:17:55,120
themes and something that we have to be

00:17:53,039 --> 00:17:58,960
concerned about

00:17:55,120 --> 00:18:02,720
there's also some issues about um

00:17:58,960 --> 00:18:05,039
kind of same same asset

00:18:02,720 --> 00:18:07,600
being overridden and by multiple

00:18:05,039 --> 00:18:10,960
different teams

00:18:07,600 --> 00:18:14,320
so for example because you are using the

00:18:10,960 --> 00:18:16,720
asset name or the path as the

00:18:14,320 --> 00:18:17,679
key of that file if it has been already

00:18:16,720 --> 00:18:20,720
overwritten it's

00:18:17,679 --> 00:18:21,520
the path can change so once those paths

00:18:20,720 --> 00:18:24,640
are changing it's

00:18:21,520 --> 00:18:25,440
uh it can be a bit tricky to know which

00:18:24,640 --> 00:18:28,320
one to use

00:18:25,440 --> 00:18:30,400
for for the override but also it can be

00:18:28,320 --> 00:18:32,640
breaking back first compatibility if you

00:18:30,400 --> 00:18:34,080
provide a new override because of your

00:18:32,640 --> 00:18:35,360
child team could be already overriding

00:18:34,080 --> 00:18:36,480
it and then they would be they would

00:18:35,360 --> 00:18:37,679
have to be aware that you are

00:18:36,480 --> 00:18:41,360
introducing a new

00:18:37,679 --> 00:18:43,840
override i'm not sure if we have

00:18:41,360 --> 00:18:45,120
a solution for this yet a potential

00:18:43,840 --> 00:18:48,320
solution would be to kind of

00:18:45,120 --> 00:18:51,120
limit the usage of this in in base teams

00:18:48,320 --> 00:18:52,160
at least but this is probably something

00:18:51,120 --> 00:18:55,760
we have to

00:18:52,160 --> 00:18:56,000
explore a bit more so i'm going to mark

00:18:55,760 --> 00:18:57,760
the

00:18:56,000 --> 00:18:59,360
uh team suggestions quickbooks macros

00:18:57,760 --> 00:19:00,000
variables and templates is something

00:18:59,360 --> 00:19:02,720
that we

00:19:00,000 --> 00:19:04,240
sort of have figured out a plan how to

00:19:02,720 --> 00:19:05,120
mitigate those how to address those

00:19:04,240 --> 00:19:07,280
problems but

00:19:05,120 --> 00:19:08,799
library overrides i have to say that we

00:19:07,280 --> 00:19:11,840
probably don't have a good plan

00:19:08,799 --> 00:19:11,840
at least yet

00:19:12,720 --> 00:19:17,120
then moving forward to the no code

00:19:15,200 --> 00:19:20,320
syntaxes

00:19:17,120 --> 00:19:22,240
so as i said earlier since they are not

00:19:20,320 --> 00:19:24,559
since since these are not actual

00:19:22,240 --> 00:19:25,760
programming languages implementing a

00:19:24,559 --> 00:19:27,760
deprecation process

00:19:25,760 --> 00:19:29,600
would be difficult if it would be even

00:19:27,760 --> 00:19:31,200
possible and

00:19:29,600 --> 00:19:34,480
the current approach that we've taken is

00:19:31,200 --> 00:19:36,880
that we avoid disruptive changes

00:19:34,480 --> 00:19:38,720
and whenever we have to just ship

00:19:36,880 --> 00:19:40,320
disruptive changes we've basically just

00:19:38,720 --> 00:19:42,080
shipped in a completely new team

00:19:40,320 --> 00:19:44,240
and that's what we did with stable nine

00:19:42,080 --> 00:19:47,120
so uh we wanted to ship a new set of uh

00:19:44,240 --> 00:19:48,000
markup a spot of drupal nine so uh

00:19:47,120 --> 00:19:49,760
instead of uh

00:19:48,000 --> 00:19:52,000
stable eight uh drupal nine ships with

00:19:49,760 --> 00:19:54,720
stable nine which has updated markup

00:19:52,000 --> 00:19:55,360
we don't have a good way to upgrade the

00:19:54,720 --> 00:19:57,039
stable knight

00:19:55,360 --> 00:19:58,720
uh i don't necessarily recommend

00:19:57,039 --> 00:20:00,880
upgrading the stable 9

00:19:58,720 --> 00:20:01,760
because of it can be tedious like for

00:20:00,880 --> 00:20:04,080
example we

00:20:01,760 --> 00:20:05,039
upgraded the drupal core teams to stable

00:20:04,080 --> 00:20:07,520
line and it's

00:20:05,039 --> 00:20:08,559
it took us weeks if not months to do

00:20:07,520 --> 00:20:11,280
that to the upgrade

00:20:08,559 --> 00:20:12,720
so uh i would recommend continuing

00:20:11,280 --> 00:20:15,760
probably continuing to use the

00:20:12,720 --> 00:20:18,000
stability and uh i think it will

00:20:15,760 --> 00:20:19,280
will be supported in the future any new

00:20:18,000 --> 00:20:21,840
teams you probably should build with

00:20:19,280 --> 00:20:21,840
stable nine

00:20:22,159 --> 00:20:26,320
so let's look at what we consider as a

00:20:24,559 --> 00:20:27,120
back first compatibility breaking markup

00:20:26,320 --> 00:20:30,880
and css

00:20:27,120 --> 00:20:32,720
change in uh drupal so on this slide

00:20:30,880 --> 00:20:34,480
what you can see is on the left side is

00:20:32,720 --> 00:20:35,600
a template that we have in classy so

00:20:34,480 --> 00:20:37,360
that's our base theme

00:20:35,600 --> 00:20:39,679
on the middle there's some css that is

00:20:37,360 --> 00:20:40,159
in classy and on the right side of the

00:20:39,679 --> 00:20:43,600
screen

00:20:40,159 --> 00:20:44,080
you can see output that we expect that

00:20:43,600 --> 00:20:47,440
this

00:20:44,080 --> 00:20:50,799
has on the browser so

00:20:47,440 --> 00:20:51,280
what kind of a change to the css that is

00:20:50,799 --> 00:20:54,080
in

00:20:51,280 --> 00:20:55,360
classy uh so actually before that i'm

00:20:54,080 --> 00:20:57,919
going to introduce this

00:20:55,360 --> 00:20:58,720
so uh we have the overwriting template

00:20:57,919 --> 00:21:02,320
which is

00:20:58,720 --> 00:21:04,240
switching the span element into div and

00:21:02,320 --> 00:21:06,559
we still have the same css loading in

00:21:04,240 --> 00:21:08,720
class c and now

00:21:06,559 --> 00:21:10,480
the next step is for us to figure out

00:21:08,720 --> 00:21:11,440
what kind of changes to the css that is

00:21:10,480 --> 00:21:13,760
in class c

00:21:11,440 --> 00:21:15,440
could lead into this rendering in an

00:21:13,760 --> 00:21:18,880
unexpected way like what would

00:21:15,440 --> 00:21:21,679
essentially break because of the

00:21:18,880 --> 00:21:22,480
sub team has changed the span into a

00:21:21,679 --> 00:21:25,280
diff

00:21:22,480 --> 00:21:27,120
anyone have any guesses for on what type

00:21:25,280 --> 00:21:31,679
of change could

00:21:27,120 --> 00:21:34,960
could uh break in this scenario

00:21:31,679 --> 00:21:39,600
so i'm gonna show an example

00:21:34,960 --> 00:21:39,600
of that so what if we switched the

00:21:42,840 --> 00:21:47,600
um

00:21:44,080 --> 00:21:51,200
selector from uh using just the element

00:21:47,600 --> 00:21:52,480
class into using a uh element class that

00:21:51,200 --> 00:21:55,679
is type of span

00:21:52,480 --> 00:21:57,600
element and uh benji on the uh

00:21:55,679 --> 00:21:59,679
chat say that if classy changes the name

00:21:57,600 --> 00:22:02,720
of the css class that's definitely also

00:21:59,679 --> 00:22:03,600
going to break and uh that's something

00:22:02,720 --> 00:22:05,520
that we don't

00:22:03,600 --> 00:22:06,880
allow people to do but there's also some

00:22:05,520 --> 00:22:10,559
like kind of

00:22:06,880 --> 00:22:12,159
uh more subtle things that could be

00:22:10,559 --> 00:22:15,120
breaking it like for example here

00:22:12,159 --> 00:22:18,640
because of the sub team has changed the

00:22:15,120 --> 00:22:21,360
span element into a uh diff

00:22:18,640 --> 00:22:21,840
uh it doesn't have a display in line

00:22:21,360 --> 00:22:23,679
anymore

00:22:21,840 --> 00:22:26,799
it's a display block because that's how

00:22:23,679 --> 00:22:29,360
that's the default value for divs and

00:22:26,799 --> 00:22:30,240
we kind of want to highlight this piece

00:22:29,360 --> 00:22:33,200
of text

00:22:30,240 --> 00:22:34,320
using a yellow background color and with

00:22:33,200 --> 00:22:36,799
a diff because it's blocked

00:22:34,320 --> 00:22:38,400
it's going to work differently than we

00:22:36,799 --> 00:22:40,880
expected to work

00:22:38,400 --> 00:22:42,559
based on the marker that we had in class

00:22:40,880 --> 00:22:43,840
c

00:22:42,559 --> 00:22:45,039
uh i think there's numerous different

00:22:43,840 --> 00:22:46,640
ways if you could make this break but

00:22:45,039 --> 00:22:48,559
these are just like two different

00:22:46,640 --> 00:22:50,159
different ways that i could imagine that

00:22:48,559 --> 00:22:53,760
this would be breaking

00:22:50,159 --> 00:22:54,000
um so here's just another example of

00:22:53,760 --> 00:22:55,919
this

00:22:54,000 --> 00:22:58,000
i'm instead of overwriting the template

00:22:55,919 --> 00:23:01,919
i'm going to just override the css

00:22:58,000 --> 00:23:03,360
so uh on the on my sub theme what i'm

00:23:01,919 --> 00:23:04,080
going to do is i'm going to extend the

00:23:03,360 --> 00:23:06,320
css

00:23:04,080 --> 00:23:08,159
off classy and what i'm doing here is

00:23:06,320 --> 00:23:09,520
i'm now adding the background color here

00:23:08,159 --> 00:23:10,720
so you can see this is basically what we

00:23:09,520 --> 00:23:14,400
expected to have in core

00:23:10,720 --> 00:23:15,679
on the previous slide and uh

00:23:14,400 --> 00:23:18,080
now i'm wondering if you have any

00:23:15,679 --> 00:23:20,640
guesses on how we could

00:23:18,080 --> 00:23:21,280
uh any any more guesses how we could

00:23:20,640 --> 00:23:24,640
break this

00:23:21,280 --> 00:23:28,080
now that we've added this piece of

00:23:24,640 --> 00:23:29,039
css and uh subteam we had some good

00:23:28,080 --> 00:23:36,640
guesses on the

00:23:29,039 --> 00:23:38,159
previous one

00:23:36,640 --> 00:23:40,400
let's see if we have any guesses this

00:23:38,159 --> 00:23:40,400
time

00:23:42,480 --> 00:23:45,760
so uh chess on the slack is suggesting

00:23:44,480 --> 00:23:46,720
that we change the markup of the

00:23:45,760 --> 00:23:50,000
template

00:23:46,720 --> 00:23:53,279
uh that's a pretty i guess generic

00:23:50,000 --> 00:23:55,120
request but uh yeah i think there's

00:23:53,279 --> 00:23:56,559
almost any change in the template would

00:23:55,120 --> 00:23:59,760
break this but

00:23:56,559 --> 00:24:00,320
so the first uh change that i'm going to

00:23:59,760 --> 00:24:01,919
introduce

00:24:00,320 --> 00:24:04,240
which is an interesting one so i'm going

00:24:01,919 --> 00:24:07,520
to change the color from hot pink

00:24:04,240 --> 00:24:10,159
into yellow and uh this would work

00:24:07,520 --> 00:24:11,520
by itself pretty well if the sub theme

00:24:10,159 --> 00:24:12,000
didn't change the background color into

00:24:11,520 --> 00:24:14,400
yellow

00:24:12,000 --> 00:24:16,400
but because the class is not over that

00:24:14,400 --> 00:24:17,440
the sub theme has changed the background

00:24:16,400 --> 00:24:22,400
color into yellow

00:24:17,440 --> 00:24:22,400
now you can't see the text any anymore

00:24:22,640 --> 00:24:26,640
and uh second example is i think pretty

00:24:25,520 --> 00:24:28,960
close to what uh

00:24:26,640 --> 00:24:29,919
jess was suggesting we are changing the

00:24:28,960 --> 00:24:31,520
uh

00:24:29,919 --> 00:24:32,720
css class into something else this is

00:24:31,520 --> 00:24:34,000
something that we pretty commonly want

00:24:32,720 --> 00:24:35,440
to do in drupal core

00:24:34,000 --> 00:24:37,200
so we want to change the classes into

00:24:35,440 --> 00:24:40,080
something else because we are doing some

00:24:37,200 --> 00:24:41,919
refactoring or cleanup and so we are

00:24:40,080 --> 00:24:44,720
updating the css drupal core but

00:24:41,919 --> 00:24:46,720
we can update the trial themes uh css so

00:24:44,720 --> 00:24:50,000
it's not going to apply anymore

00:24:46,720 --> 00:24:53,120
to this and we could obviously keep the

00:24:50,000 --> 00:24:55,520
element class in place for the uh

00:24:53,120 --> 00:24:56,799
for the element but the problem that we

00:24:55,520 --> 00:24:58,320
have is that

00:24:56,799 --> 00:25:00,080
essentially we would have to have a

00:24:58,320 --> 00:25:01,919
process for removing those eventually

00:25:00,080 --> 00:25:03,600
because otherwise we have just like

00:25:01,919 --> 00:25:05,679
infinite number of classes on all of the

00:25:03,600 --> 00:25:08,720
elements so uh

00:25:05,679 --> 00:25:10,720
while that could work in the uh

00:25:08,720 --> 00:25:14,480
for a while uh in the long run that

00:25:10,720 --> 00:25:16,159
would not work that well

00:25:14,480 --> 00:25:18,000
well the conclusion of all of this is

00:25:16,159 --> 00:25:20,559
that predicting the outcome

00:25:18,000 --> 00:25:21,039
of markup and css changes in drupal can

00:25:20,559 --> 00:25:24,320
be

00:25:21,039 --> 00:25:27,039
quite hard and

00:25:24,320 --> 00:25:28,000
most template and market markup changes

00:25:27,039 --> 00:25:30,159
could be considered

00:25:28,000 --> 00:25:32,559
in one way or another as a back first

00:25:30,159 --> 00:25:35,120
compatibility breaking change

00:25:32,559 --> 00:25:36,960
and that also means that uh most markup

00:25:35,120 --> 00:25:37,360
or css changes could be disruptive at

00:25:36,960 --> 00:25:41,600
least

00:25:37,360 --> 00:25:44,159
right now and for that reason also we've

00:25:41,600 --> 00:25:44,799
basically tried avoiding making any type

00:25:44,159 --> 00:25:47,440
of changes

00:25:44,799 --> 00:25:48,400
as much as we can this has been good for

00:25:47,440 --> 00:25:50,799
stability but

00:25:48,400 --> 00:25:52,240
it has also prevented us from making any

00:25:50,799 --> 00:25:55,039
kind of progress on kind of

00:25:52,240 --> 00:25:57,200
trying to modernize the markup or

00:25:55,039 --> 00:25:59,130
providing better sensible defaults

00:25:57,200 --> 00:26:00,240
to people the

00:25:59,130 --> 00:26:02,799
[Music]

00:26:00,240 --> 00:26:04,320
root cause for this problem because of

00:26:02,799 --> 00:26:06,240
you might have not heard of it outside

00:26:04,320 --> 00:26:08,480
of drupal is

00:26:06,240 --> 00:26:09,600
what i believe is the override

00:26:08,480 --> 00:26:12,480
variations

00:26:09,600 --> 00:26:13,600
so we have a variation where template is

00:26:12,480 --> 00:26:15,360
overridden without all running the

00:26:13,600 --> 00:26:18,799
respective css files

00:26:15,360 --> 00:26:20,159
and uh this is risky because the css

00:26:18,799 --> 00:26:21,679
changes in the base team

00:26:20,159 --> 00:26:24,559
are not necessarily going to be

00:26:21,679 --> 00:26:27,279
compatible with the template override

00:26:24,559 --> 00:26:28,320
the second variation is that css files

00:26:27,279 --> 00:26:29,919
are overwritten

00:26:28,320 --> 00:26:31,520
or extended without overwriting the

00:26:29,919 --> 00:26:32,720
respective templates and this is also

00:26:31,520 --> 00:26:35,840
risky because of

00:26:32,720 --> 00:26:37,440
if chord and changes the template in

00:26:35,840 --> 00:26:38,240
future they're not necessarily going to

00:26:37,440 --> 00:26:42,080
be compatible

00:26:38,240 --> 00:26:45,279
with your css overrides in the sub team

00:26:42,080 --> 00:26:47,679
and the third and final variation which

00:26:45,279 --> 00:26:49,039
is both template and css files have been

00:26:47,679 --> 00:26:52,080
overwritten is

00:26:49,039 --> 00:26:53,760
the safe variation because of do you

00:26:52,080 --> 00:26:56,080
have ownership of both css

00:26:53,760 --> 00:26:57,760
and templates any changes to the base

00:26:56,080 --> 00:27:00,799
team are not going to affect

00:26:57,760 --> 00:27:02,559
your sub theme

00:27:00,799 --> 00:27:04,159
so this raises a question like could we

00:27:02,559 --> 00:27:07,679
prevent partial overrides

00:27:04,159 --> 00:27:10,159
in drupal car or in any kind of drupal

00:27:07,679 --> 00:27:13,360
team and drupal modules

00:27:10,159 --> 00:27:15,840
um but if we bundle css and templates

00:27:13,360 --> 00:27:15,840
together

00:27:16,400 --> 00:27:21,200
so this has sparked an idea of creating

00:27:19,919 --> 00:27:24,640
a new starter kit

00:27:21,200 --> 00:27:26,240
team so right now we use classy as a

00:27:24,640 --> 00:27:27,919
starting point for people who want

00:27:26,240 --> 00:27:29,360
sort of reasonable defaults rather than

00:27:27,919 --> 00:27:30,320
blind canvas when they start building a

00:27:29,360 --> 00:27:33,039
team

00:27:30,320 --> 00:27:35,200
and instead of serving this from a base

00:27:33,039 --> 00:27:36,880
team with the starter kit idea

00:27:35,200 --> 00:27:38,559
the idea is that we would provide a

00:27:36,880 --> 00:27:40,320
command that

00:27:38,559 --> 00:27:42,399
front-end developers could use to

00:27:40,320 --> 00:27:43,679
generate a team with these templates in

00:27:42,399 --> 00:27:47,120
css

00:27:43,679 --> 00:27:48,559
and as a result the markup rendered on

00:27:47,120 --> 00:27:51,840
the side would be the same

00:27:48,559 --> 00:27:53,840
as it was before when they used classy

00:27:51,840 --> 00:27:55,840
and uh the good thing about that is that

00:27:53,840 --> 00:27:58,640
even if you change the defaults

00:27:55,840 --> 00:28:00,000
um it would remain the same between

00:27:58,640 --> 00:28:01,600
releases because they already have the

00:28:00,000 --> 00:28:04,799
ownership of the

00:28:01,600 --> 00:28:06,320
wall markup and

00:28:04,799 --> 00:28:08,000
with this change we would be able to

00:28:06,320 --> 00:28:08,399
make markup changes much more easily

00:28:08,000 --> 00:28:09,360
because

00:28:08,399 --> 00:28:12,960
we wouldn't have to worry about

00:28:09,360 --> 00:28:12,960
consequences on production sites

00:28:13,440 --> 00:28:17,919
what i do think this would also uh help

00:28:16,320 --> 00:28:19,840
us with is that it would make it easier

00:28:17,919 --> 00:28:21,200
for new developers to discover how css

00:28:19,840 --> 00:28:23,039
files are loaded how

00:28:21,200 --> 00:28:24,720
where is the markup located in different

00:28:23,039 --> 00:28:26,320
templates because of all of the markup

00:28:24,720 --> 00:28:28,840
and css would be

00:28:26,320 --> 00:28:30,399
located in a single extension single

00:28:28,840 --> 00:28:33,760
team single

00:28:30,399 --> 00:28:33,760
folder directory

00:28:34,080 --> 00:28:38,240
unfortunately this doesn't come without

00:28:36,159 --> 00:28:42,000
some downsides

00:28:38,240 --> 00:28:43,120
and basically we should ensure

00:28:42,000 --> 00:28:44,720
that this doesn't increase the

00:28:43,120 --> 00:28:45,840
maintenance burden of site owners at

00:28:44,720 --> 00:28:49,360
least too much

00:28:45,840 --> 00:28:50,480
because this could impact how easy it is

00:28:49,360 --> 00:28:52,640
for us to ship

00:28:50,480 --> 00:28:53,600
uh fixes for security vulnerabilities

00:28:52,640 --> 00:28:55,120
because of

00:28:53,600 --> 00:28:57,200
more of the templates will be over it

00:28:55,120 --> 00:28:59,200
and as we kind of recommend

00:28:57,200 --> 00:29:01,039
all of the front-end developers to

00:28:59,200 --> 00:29:03,360
override all of our templates as

00:29:01,039 --> 00:29:05,279
their starting point this is sort of a

00:29:03,360 --> 00:29:07,360
pre-existing problem because we

00:29:05,279 --> 00:29:08,480
already can't really rely on the fact

00:29:07,360 --> 00:29:12,320
that template

00:29:08,480 --> 00:29:14,240
doesn't get overwritten because of

00:29:12,320 --> 00:29:15,440
templates can be already over and so for

00:29:14,240 --> 00:29:16,480
example if we have a security

00:29:15,440 --> 00:29:19,039
vulnerability in the

00:29:16,480 --> 00:29:20,559
node template i would i would assume

00:29:19,039 --> 00:29:26,000
that most templates are

00:29:20,559 --> 00:29:27,600
overriding that one and uh

00:29:26,000 --> 00:29:29,440
on the positive note i would say when it

00:29:27,600 --> 00:29:30,080
comes to the security vulnerabilities we

00:29:29,440 --> 00:29:31,919
didn't ship

00:29:30,080 --> 00:29:33,440
a single security release changing

00:29:31,919 --> 00:29:34,799
templates or css during the duplicate

00:29:33,440 --> 00:29:36,640
lifecycle

00:29:34,799 --> 00:29:38,080
uh this doesn't necessarily mean we

00:29:36,640 --> 00:29:39,760
wouldn't have to ship one in future but

00:29:38,080 --> 00:29:41,279
definitely is hinting that

00:29:39,760 --> 00:29:43,200
it might not be as big of a problem as

00:29:41,279 --> 00:29:45,039
it might sound like first

00:29:43,200 --> 00:29:46,640
another big drawback of this approach is

00:29:45,039 --> 00:29:48,320
that it can only solve this problem in

00:29:46,640 --> 00:29:51,520
the scope of core

00:29:48,320 --> 00:29:54,080
um we can't really include all of the

00:29:51,520 --> 00:29:55,679
templates from one trip uh this one team

00:29:54,080 --> 00:29:57,760
in in drupal car

00:29:55,679 --> 00:29:59,120
or or whatever maybe it's not a team

00:29:57,760 --> 00:30:00,159
it's it's kind of a directory that

00:29:59,120 --> 00:30:02,000
contains the defaults

00:30:00,159 --> 00:30:03,679
anyway i don't think it's uh reasonable

00:30:02,000 --> 00:30:06,320
to assume that we would be able to

00:30:03,679 --> 00:30:07,279
have all of the markup and css from

00:30:06,320 --> 00:30:10,399
conjured on that

00:30:07,279 --> 00:30:12,799
directory and something is also

00:30:10,399 --> 00:30:14,880
interes uh important note is that uh so

00:30:12,799 --> 00:30:17,840
we had this planned consensus banana

00:30:14,880 --> 00:30:18,559
um back in the day in uh dribble con

00:30:17,840 --> 00:30:21,679
austin

00:30:18,559 --> 00:30:23,200
and uh because we didn't plan it uh

00:30:21,679 --> 00:30:25,520
in a way that would take contrib into

00:30:23,200 --> 00:30:27,200
account they haven't been able to

00:30:25,520 --> 00:30:28,960
implement that plan even though it was

00:30:27,200 --> 00:30:31,200
decided on years ago

00:30:28,960 --> 00:30:32,880
and so basically the plan on the

00:30:31,200 --> 00:30:34,880
consensus banana was that we

00:30:32,880 --> 00:30:36,399
decided that drupal core markup should

00:30:34,880 --> 00:30:38,240
be as plain as possible and all of the

00:30:36,399 --> 00:30:39,360
classes design elements etc would be

00:30:38,240 --> 00:30:42,080
moved to classy

00:30:39,360 --> 00:30:43,600
so uh that was done core first not

00:30:42,080 --> 00:30:45,120
necessarily something that uh

00:30:43,600 --> 00:30:46,880
contrib would be able to implement and

00:30:45,120 --> 00:30:48,159
that's basically startup it has

00:30:46,880 --> 00:30:50,159
it's suffering from the same problem

00:30:48,159 --> 00:30:53,360
that it doesn't necessarily solve this

00:30:50,159 --> 00:30:56,720
to the scope of country and

00:30:53,360 --> 00:30:59,600
uh sort of against the consensus banana

00:30:56,720 --> 00:31:00,559
is that toolbar created in contextual

00:30:59,600 --> 00:31:02,399
links

00:31:00,559 --> 00:31:04,799
have all of their designs shipped as

00:31:02,399 --> 00:31:06,960
part of the core modules so

00:31:04,799 --> 00:31:08,640
they are not really implementing that

00:31:06,960 --> 00:31:10,000
either yet and that's not something we

00:31:08,640 --> 00:31:11,360
can necessarily solve with starter kit

00:31:10,000 --> 00:31:12,960
because we don't necessarily want

00:31:11,360 --> 00:31:14,480
the starter kit to override toolbar to

00:31:12,960 --> 00:31:17,039
get it on contextual links

00:31:14,480 --> 00:31:18,320
because those are probably probably

00:31:17,039 --> 00:31:21,600
parts that we want

00:31:18,320 --> 00:31:21,600
to keep updating in future

00:31:23,039 --> 00:31:26,559
and uh so yeah let's talk about the

00:31:25,200 --> 00:31:27,519
remaining problems with the starter kit

00:31:26,559 --> 00:31:30,960
idea so

00:31:27,519 --> 00:31:32,640
the first problem that we realized was

00:31:30,960 --> 00:31:35,039
that how can we reduce the maintenance

00:31:32,640 --> 00:31:36,559
burden of site owners uh because if we

00:31:35,039 --> 00:31:39,679
essentially some of that is there

00:31:36,559 --> 00:31:41,679
anything we could do to reduce that

00:31:39,679 --> 00:31:44,240
so something that we can do is that if

00:31:41,679 --> 00:31:48,000
there's critical security updates

00:31:44,240 --> 00:31:52,399
uh since tweak templates are compiled

00:31:48,000 --> 00:31:52,399
and we have control over

00:31:52,799 --> 00:31:56,240
is that if we see certain certain types

00:31:54,799 --> 00:31:59,919
of type of source code

00:31:56,240 --> 00:32:00,399
in twig we could theoretically at least

00:31:59,919 --> 00:32:02,399
um

00:32:00,399 --> 00:32:03,919
at something to our compilation phase

00:32:02,399 --> 00:32:07,120
that would mitigate those

00:32:03,919 --> 00:32:08,080
vulnerabilities in their trick source

00:32:07,120 --> 00:32:09,840
code

00:32:08,080 --> 00:32:11,840
and um this is probably something we

00:32:09,840 --> 00:32:13,679
should already be doing if we have

00:32:11,840 --> 00:32:14,960
any vulnerabilities that are impacting

00:32:13,679 --> 00:32:15,919
quick templates so it's not necessarily

00:32:14,960 --> 00:32:18,240
something new

00:32:15,919 --> 00:32:19,279
that we need to figure out uh because of

00:32:18,240 --> 00:32:20,960
the starter kit it's just

00:32:19,279 --> 00:32:23,519
it's highlighting a problem that we have

00:32:20,960 --> 00:32:27,519
to be really concerned about

00:32:23,519 --> 00:32:29,760
sites and teams overriding templates

00:32:27,519 --> 00:32:31,600
for less critical issues we could

00:32:29,760 --> 00:32:32,640
potentially provide change records or

00:32:31,600 --> 00:32:34,720
even patches for

00:32:32,640 --> 00:32:36,960
like individual templates that people

00:32:34,720 --> 00:32:39,760
could apply on their teams if they

00:32:36,960 --> 00:32:40,320
are impacted by a bug that is really

00:32:39,760 --> 00:32:42,880
annoying

00:32:40,320 --> 00:32:43,679
they could then apply that patch on

00:32:42,880 --> 00:32:46,080
their team

00:32:43,679 --> 00:32:48,559
to the to the template if that's

00:32:46,080 --> 00:32:51,760
something that they want to do

00:32:48,559 --> 00:32:54,559
um especially the i feel like the

00:32:51,760 --> 00:32:56,240
mitigation of the process for mitigating

00:32:54,559 --> 00:32:57,120
the security vulnerabilities i feel like

00:32:56,240 --> 00:32:59,519
the address is

00:32:57,120 --> 00:33:01,760
a big part of that concern then the

00:32:59,519 --> 00:33:03,919
second concern that i think we should uh

00:33:01,760 --> 00:33:05,120
consider is how

00:33:03,919 --> 00:33:06,480
should contracts shift their markup

00:33:05,120 --> 00:33:08,159
without breaking bc i think it's really

00:33:06,480 --> 00:33:09,760
important to keep the contract as part

00:33:08,159 --> 00:33:11,519
of the plan though that

00:33:09,760 --> 00:33:12,880
they have a way to kind of follow a

00:33:11,519 --> 00:33:16,000
similar kind of pattern as

00:33:12,880 --> 00:33:18,880
escort doing so that

00:33:16,000 --> 00:33:19,600
we can keep the kind of wool ecosystem

00:33:18,880 --> 00:33:22,880
uh

00:33:19,600 --> 00:33:22,880
following the same pattern

00:33:23,039 --> 00:33:26,240
so as i said earlier i i believe that

00:33:24,960 --> 00:33:30,080
the root cause to the problem

00:33:26,240 --> 00:33:33,120
is uh the kind of mixed ownership of uh

00:33:30,080 --> 00:33:34,080
templates and css the shared ownership

00:33:33,120 --> 00:33:36,640
of those

00:33:34,080 --> 00:33:37,200
um so what i think we should do to

00:33:36,640 --> 00:33:40,080
address

00:33:37,200 --> 00:33:40,880
is that we load css and non-functional

00:33:40,080 --> 00:33:44,240
javascript

00:33:40,880 --> 00:33:47,679
in templates and what that would

00:33:44,240 --> 00:33:49,600
end up doing is that once you are

00:33:47,679 --> 00:33:50,559
overriding a template or css you would

00:33:49,600 --> 00:33:52,080
have to take

00:33:50,559 --> 00:33:55,039
ownership of all of those different

00:33:52,080 --> 00:33:57,519
parts related at the same time

00:33:55,039 --> 00:33:58,640
and uh this does also have an impact on

00:33:57,519 --> 00:34:01,760
the kind of

00:33:58,640 --> 00:34:03,279
maintainability and like teams having to

00:34:01,760 --> 00:34:04,720
override all of templates because if

00:34:03,279 --> 00:34:05,360
they choose not to use the starter kit

00:34:04,720 --> 00:34:06,799
theme

00:34:05,360 --> 00:34:08,399
they would still benefit from this

00:34:06,799 --> 00:34:10,720
approach because of uh

00:34:08,399 --> 00:34:12,079
we've now bundled the css and javascript

00:34:10,720 --> 00:34:14,399
and and

00:34:12,079 --> 00:34:15,280
markup together they could only override

00:34:14,399 --> 00:34:18,800
the parts

00:34:15,280 --> 00:34:21,679
that they want and uh they would still

00:34:18,800 --> 00:34:23,119
be able to have bc for that piece of

00:34:21,679 --> 00:34:24,879
markup and css

00:34:23,119 --> 00:34:26,240
this could also work for country because

00:34:24,879 --> 00:34:28,079
they could implement the same approach

00:34:26,240 --> 00:34:30,159
so they could essentially

00:34:28,079 --> 00:34:31,679
bundle their css and markup together and

00:34:30,159 --> 00:34:34,079
if someone wants to override

00:34:31,679 --> 00:34:34,800
a template or css in in the country

00:34:34,079 --> 00:34:37,839
project

00:34:34,800 --> 00:34:39,280
they could um they would have to they

00:34:37,839 --> 00:34:41,919
would have to take ownership of both of

00:34:39,280 --> 00:34:43,839
those at once

00:34:41,919 --> 00:34:45,520
this could also reduce use cases for

00:34:43,839 --> 00:34:47,440
using the libraries override and extend

00:34:45,520 --> 00:34:48,159
which was a problem earlier that we

00:34:47,440 --> 00:34:51,280
didn't find

00:34:48,159 --> 00:34:54,399
a solution to so this would have

00:34:51,280 --> 00:34:56,320
a lot of positive side effects i think

00:34:54,399 --> 00:34:57,920
uh here's just an example of how that

00:34:56,320 --> 00:34:59,839
could look like so

00:34:57,920 --> 00:35:01,359
here i'm using something called twick

00:34:59,839 --> 00:35:03,119
front matter and

00:35:01,359 --> 00:35:04,640
which is a syntax that allows placing

00:35:03,119 --> 00:35:06,560
contextual information related to the

00:35:04,640 --> 00:35:08,640
template on top of the template file

00:35:06,560 --> 00:35:09,599
and this is used by other temp other

00:35:08,640 --> 00:35:12,320
projects such as

00:35:09,599 --> 00:35:14,079
jekyll and in drupal core this is

00:35:12,320 --> 00:35:17,119
already used by help topics which is an

00:35:14,079 --> 00:35:19,040
experimental module

00:35:17,119 --> 00:35:21,440
and yeah i believe that could be used

00:35:19,040 --> 00:35:24,640
for loading css and javascript files

00:35:21,440 --> 00:35:26,800
too and this way you can imagine that if

00:35:24,640 --> 00:35:28,320
you wanted to override that

00:35:26,800 --> 00:35:30,000
css file you would have to overwrite

00:35:28,320 --> 00:35:31,680
this template if you wanted to overwrite

00:35:30,000 --> 00:35:36,160
this markup you would have to

00:35:31,680 --> 00:35:36,160
overwrite those css files too

00:35:37,599 --> 00:35:41,839
so yeah i believe that could be a

00:35:39,520 --> 00:35:44,560
solution for the second

00:35:41,839 --> 00:35:46,000
drawback of the starter kit approach

00:35:44,560 --> 00:35:49,040
that we had so implementing

00:35:46,000 --> 00:35:49,599
those two things at once and uh the

00:35:49,040 --> 00:35:51,200
third

00:35:49,599 --> 00:35:52,320
problem that we have is how should we

00:35:51,200 --> 00:35:53,760
ship the designs for the admin

00:35:52,320 --> 00:35:56,320
components on the front end

00:35:53,760 --> 00:35:58,079
and uh so if you are unaware of what the

00:35:56,320 --> 00:36:01,359
element components on the front ends are

00:35:58,079 --> 00:36:03,359
for nr that could include contextual

00:36:01,359 --> 00:36:06,880
links quick edit toolbar settings tray

00:36:03,359 --> 00:36:06,880
and media library for example

00:36:08,480 --> 00:36:12,800
and here's an assumption that i have

00:36:11,359 --> 00:36:14,560
about the admin components

00:36:12,800 --> 00:36:15,920
this is that drupal core or country

00:36:14,560 --> 00:36:17,599
module should have the ownership of the

00:36:15,920 --> 00:36:18,160
designs of contextual links qriketic

00:36:17,599 --> 00:36:19,760
toolbar

00:36:18,160 --> 00:36:21,680
sending study and media library because

00:36:19,760 --> 00:36:22,160
when i start a new front-end team i

00:36:21,680 --> 00:36:23,520
don't

00:36:22,160 --> 00:36:25,280
i don't want to style these modules

00:36:23,520 --> 00:36:27,280
myself

00:36:25,280 --> 00:36:29,200
also i want to receive updates on the

00:36:27,280 --> 00:36:31,119
designs and the functionality of these

00:36:29,200 --> 00:36:33,680
modules as time passes since

00:36:31,119 --> 00:36:35,119
a site order i don't feel ownership

00:36:33,680 --> 00:36:35,920
order designs or the functionality of

00:36:35,119 --> 00:36:37,520
these modules

00:36:35,920 --> 00:36:39,680
so this is just to highlight that for

00:36:37,520 --> 00:36:42,000
example toolbar uh when i

00:36:39,680 --> 00:36:43,839
create a new team for drupal i don't

00:36:42,000 --> 00:36:45,599
expect that i have to style and

00:36:43,839 --> 00:36:47,280
create functionality for toolbar i

00:36:45,599 --> 00:36:50,480
expect drupal core to

00:36:47,280 --> 00:36:53,760
handle that and uh

00:36:50,480 --> 00:36:55,680
major submit example maybe you have a

00:36:53,760 --> 00:36:56,079
site where you want media library to

00:36:55,680 --> 00:36:58,960
look

00:36:56,079 --> 00:37:00,240
like your site uh but i would say that's

00:36:58,960 --> 00:37:04,640
in that edge case

00:37:00,240 --> 00:37:08,079
uh not definitively 80 use case

00:37:04,640 --> 00:37:09,760
so since

00:37:08,079 --> 00:37:11,200
a lot of those components are based on

00:37:09,760 --> 00:37:12,640
the admin team style guide

00:37:11,200 --> 00:37:14,079
like for example quick edit contextual

00:37:12,640 --> 00:37:15,520
links they are based on the seven star

00:37:14,079 --> 00:37:16,800
guide right now and in the future they

00:37:15,520 --> 00:37:19,680
are going to be based on the

00:37:16,800 --> 00:37:21,520
clarostar guide uh the question is to

00:37:19,680 --> 00:37:22,640
reload some of the css and markup from

00:37:21,520 --> 00:37:24,000
the admin team

00:37:22,640 --> 00:37:26,480
so that we don't have to place it in the

00:37:24,000 --> 00:37:26,480
starter kit

00:37:27,440 --> 00:37:32,640
um so first of all

00:37:30,800 --> 00:37:34,320
we have to figure out how can we load

00:37:32,640 --> 00:37:35,040
both styles and markup from the admin

00:37:34,320 --> 00:37:37,119
team because of

00:37:35,040 --> 00:37:38,560
loading to css is not going to be enough

00:37:37,119 --> 00:37:38,960
because otherwise for example settings

00:37:38,560 --> 00:37:40,400
tray

00:37:38,960 --> 00:37:42,240
which is rendering lots of different

00:37:40,400 --> 00:37:43,680
kinds of elements inside it for example

00:37:42,240 --> 00:37:45,760
uh form elements

00:37:43,680 --> 00:37:47,440
um you could run in the situation where

00:37:45,760 --> 00:37:49,119
your running team wants to have a kind

00:37:47,440 --> 00:37:51,599
of bespoke

00:37:49,119 --> 00:37:53,200
markup for your input elements you have

00:37:51,599 --> 00:37:56,320
customize the markup

00:37:53,200 --> 00:37:57,760
uh to work in your use case and

00:37:56,320 --> 00:37:59,760
when they are rendered in settings

00:37:57,760 --> 00:38:01,119
settings tray uh the settings ready

00:37:59,760 --> 00:38:03,440
styles are coming from

00:38:01,119 --> 00:38:04,720
the admin team and they are incompatible

00:38:03,440 --> 00:38:07,200
with the changes that you've

00:38:04,720 --> 00:38:07,760
made uh so the markup should be coming

00:38:07,200 --> 00:38:09,520
from

00:38:07,760 --> 00:38:11,680
the same place where the css is coming

00:38:09,520 --> 00:38:12,800
from so that we you don't accidentally

00:38:11,680 --> 00:38:16,079
overwrite

00:38:12,800 --> 00:38:17,119
components or elements that you don't

00:38:16,079 --> 00:38:18,480
want to override

00:38:17,119 --> 00:38:19,839
and this is already a problem that we

00:38:18,480 --> 00:38:20,400
have this is a pre-existing problem that

00:38:19,839 --> 00:38:23,280
we have

00:38:20,400 --> 00:38:24,400
but also something that starter kit

00:38:23,280 --> 00:38:25,839
probably should take into account

00:38:24,400 --> 00:38:29,760
because it's a pretty big change to

00:38:25,839 --> 00:38:29,760
how the themes work uh

00:38:30,320 --> 00:38:33,599
even if we load both css and markup from

00:38:32,720 --> 00:38:35,040
the element team

00:38:33,599 --> 00:38:37,200
it could potentially introduce problems

00:38:35,040 --> 00:38:39,440
with like cm css name space

00:38:37,200 --> 00:38:41,119
uh because of css is applied globally

00:38:39,440 --> 00:38:42,880
and uh so maybe we have to

00:38:41,119 --> 00:38:44,320
figure out how we could utilize

00:38:42,880 --> 00:38:46,800
something like shadow dome

00:38:44,320 --> 00:38:48,720
for for these elements there's an issue

00:38:46,800 --> 00:38:50,560
link on the bottom of the slide again

00:38:48,720 --> 00:38:51,760
if you're interested in shadow dome and

00:38:50,560 --> 00:38:54,560
and this

00:38:51,760 --> 00:38:55,920
will problem space uh feel free to chime

00:38:54,560 --> 00:38:58,480
in on the on the issue and

00:38:55,920 --> 00:39:00,320
uh help us out but i feel like if we can

00:38:58,480 --> 00:39:02,560
figure out these things we

00:39:00,320 --> 00:39:04,480
uh and implement these paths we sort of

00:39:02,560 --> 00:39:04,720
have solved all of these problems we

00:39:04,480 --> 00:39:06,800
have

00:39:04,720 --> 00:39:10,240
we have at least a plan in place for for

00:39:06,800 --> 00:39:13,040
addressing all of these concerns

00:39:10,240 --> 00:39:14,160
the final part is array type of apis

00:39:13,040 --> 00:39:16,200
which is kind of

00:39:14,160 --> 00:39:17,839
its own thing so

00:39:16,200 --> 00:39:19,839
[Music]

00:39:17,839 --> 00:39:21,440
some of the apis that we are depend uh

00:39:19,839 --> 00:39:25,440
are you currently using arrays

00:39:21,440 --> 00:39:26,079
as an api we are planning on converting

00:39:25,440 --> 00:39:29,040
to

00:39:26,079 --> 00:39:29,520
objects and uh that's obviously busy

00:39:29,040 --> 00:39:32,000
breaking

00:39:29,520 --> 00:39:33,520
but uh something that we've figured out

00:39:32,000 --> 00:39:36,880
uh that php has is

00:39:33,520 --> 00:39:37,599
array access which essentially allows

00:39:36,880 --> 00:39:40,560
using the

00:39:37,599 --> 00:39:41,440
array syntax for accessing data in that

00:39:40,560 --> 00:39:43,599
object

00:39:41,440 --> 00:39:44,560
and uh so in this code example for

00:39:43,599 --> 00:39:48,079
example um

00:39:44,560 --> 00:39:50,480
this is um what the uh

00:39:48,079 --> 00:39:52,079
issue on the bottom of the page uh

00:39:50,480 --> 00:39:55,040
bottom of the slide tries to do

00:39:52,079 --> 00:39:56,480
is uh it introduces a new team hook

00:39:55,040 --> 00:39:59,200
class

00:39:56,480 --> 00:40:01,359
which uses array access and uh if you're

00:39:59,200 --> 00:40:02,720
accessing the team hooks using the array

00:40:01,359 --> 00:40:06,079
syntax like the test

00:40:02,720 --> 00:40:08,079
on this image is doing um

00:40:06,079 --> 00:40:09,200
it should it should continue to work

00:40:08,079 --> 00:40:10,800
because of

00:40:09,200 --> 00:40:12,480
already implemented kind of the array

00:40:10,800 --> 00:40:16,400
access paths

00:40:12,480 --> 00:40:18,560
for that and uh

00:40:16,400 --> 00:40:19,440
it it's mostly backwards compatible but

00:40:18,560 --> 00:40:20,560
not 100

00:40:19,440 --> 00:40:22,720
because there are some use cases where

00:40:20,560 --> 00:40:25,359
you would have to for example cast

00:40:22,720 --> 00:40:26,160
this type of object into an array before

00:40:25,359 --> 00:40:29,359
it would work

00:40:26,160 --> 00:40:29,359
the way you expect

00:40:30,160 --> 00:40:34,480
there's some apis that we don't we

00:40:33,440 --> 00:40:36,480
haven't really planned

00:40:34,480 --> 00:40:37,599
on converting into objects yet where we

00:40:36,480 --> 00:40:38,960
have to figure out probably have to

00:40:37,599 --> 00:40:42,160
figure out a way to deprecate

00:40:38,960 --> 00:40:43,760
individual array items

00:40:42,160 --> 00:40:45,280
and here's an example of structural

00:40:43,760 --> 00:40:47,599
change to render array

00:40:45,280 --> 00:40:49,280
and uh again how many ways can you think

00:40:47,599 --> 00:40:50,720
the form could be changed to break this

00:40:49,280 --> 00:40:53,760
i think there's quite a few ways

00:40:50,720 --> 00:40:55,839
we can all imagine that this could be

00:40:53,760 --> 00:40:59,040
broken

00:40:55,839 --> 00:41:00,160
and so i've provided one way that this

00:40:59,040 --> 00:41:02,880
could be broken

00:41:00,160 --> 00:41:04,319
so uh here i'm moving that description

00:41:02,880 --> 00:41:06,640
element into a

00:41:04,319 --> 00:41:07,839
wrapper so now it's in a completely new

00:41:06,640 --> 00:41:10,319
location

00:41:07,839 --> 00:41:11,839
so you should be accessing it inside the

00:41:10,319 --> 00:41:12,640
some wrapper not directly using

00:41:11,839 --> 00:41:13,920
description

00:41:12,640 --> 00:41:15,440
interestingly you're not probably not

00:41:13,920 --> 00:41:16,560
gonna get any kind of error not gonna

00:41:15,440 --> 00:41:18,960
get any kind of hint that something is

00:41:16,560 --> 00:41:20,960
broken when this change happens so uh

00:41:18,960 --> 00:41:22,000
can be difficult to notice because of

00:41:20,960 --> 00:41:23,839
essentially what you're just

00:41:22,000 --> 00:41:26,640
doing is adding a new class to the

00:41:23,839 --> 00:41:28,240
element and uh yeah

00:41:26,640 --> 00:41:29,920
jess is pointing out on this that we are

00:41:28,240 --> 00:41:30,800
making this kind of changes a lot in in

00:41:29,920 --> 00:41:34,079
minor releases

00:41:30,800 --> 00:41:37,599
um yeah

00:41:34,079 --> 00:41:39,839
um so level one posted an idea

00:41:37,599 --> 00:41:41,839
on this issue on the bottom of the slide

00:41:39,839 --> 00:41:43,680
uh which could be really interesting

00:41:41,839 --> 00:41:45,200
which would essentially allow us to

00:41:43,680 --> 00:41:48,720
create portals

00:41:45,200 --> 00:41:50,079
for when we move uh elements inside

00:41:48,720 --> 00:41:53,119
render arrays

00:41:50,079 --> 00:41:53,440
and again we basically give the object

00:41:53,119 --> 00:41:57,520
the

00:41:53,440 --> 00:42:00,079
location of the new

00:41:57,520 --> 00:42:00,960
the new location of that render array

00:42:00,079 --> 00:42:03,680
and

00:42:00,960 --> 00:42:04,079
if you try to access the old array it

00:42:03,680 --> 00:42:06,160
would

00:42:04,079 --> 00:42:07,599
give you just what is inside there and

00:42:06,160 --> 00:42:10,960
when you are accessing it

00:42:07,599 --> 00:42:13,760
it would also show you a useful warning

00:42:10,960 --> 00:42:16,560
uh telling you that you are accessing it

00:42:13,760 --> 00:42:18,400
using the wrong directory

00:42:16,560 --> 00:42:20,640
uh so yeah feel free to chime in on the

00:42:18,400 --> 00:42:24,160
issue if you are interested

00:42:20,640 --> 00:42:25,599
and uh this does solve some of those

00:42:24,160 --> 00:42:28,960
problems that i mentioned but there's

00:42:25,599 --> 00:42:28,960
like i would say more

00:42:29,200 --> 00:42:32,240
difficult types of changes than just

00:42:31,440 --> 00:42:33,839
moving

00:42:32,240 --> 00:42:35,760
the render array in the new location

00:42:33,839 --> 00:42:37,839
like for example if you change the

00:42:35,760 --> 00:42:38,960
render element that we are using so here

00:42:37,839 --> 00:42:41,599
on this

00:42:38,960 --> 00:42:42,960
example i'm changing the uh inline

00:42:41,599 --> 00:42:44,800
template into html tag

00:42:42,960 --> 00:42:46,720
and again you're probably not gonna get

00:42:44,800 --> 00:42:49,920
any kind of error any kind of warning

00:42:46,720 --> 00:42:52,880
on your site of this and uh

00:42:49,920 --> 00:42:54,319
it's still gonna break uh your site at

00:42:52,880 --> 00:42:56,400
least it's gonna not

00:42:54,319 --> 00:42:57,520
work or behave the way that you expected

00:42:56,400 --> 00:43:00,640
when you built this

00:42:57,520 --> 00:43:03,680
this altar so something

00:43:00,640 --> 00:43:06,000
that is so one of the

00:43:03,680 --> 00:43:07,760
most common reasons or use cases for

00:43:06,000 --> 00:43:09,599
changing the render element or template

00:43:07,760 --> 00:43:10,960
is when we deprecate a template or

00:43:09,599 --> 00:43:12,640
render element

00:43:10,960 --> 00:43:15,119
and want to replace it with something

00:43:12,640 --> 00:43:17,280
else and uh one way to tackle this is to

00:43:15,119 --> 00:43:18,720
pass new variable to the template and

00:43:17,280 --> 00:43:20,000
render that if the template is not

00:43:18,720 --> 00:43:21,440
overwritten

00:43:20,000 --> 00:43:24,640
this way if the template is overwritten

00:43:21,440 --> 00:43:26,000
the overwrite would continue to work

00:43:24,640 --> 00:43:28,480
we of course run into some problems with

00:43:26,000 --> 00:43:30,160
this because of uh someone could be just

00:43:28,480 --> 00:43:31,760
uh making changes to this using

00:43:30,160 --> 00:43:33,280
pre-process function or they could be

00:43:31,760 --> 00:43:34,079
over a new css without overwriting the

00:43:33,280 --> 00:43:36,480
template

00:43:34,079 --> 00:43:37,599
and uh this would essentially still

00:43:36,480 --> 00:43:39,359
break

00:43:37,599 --> 00:43:40,800
their site but at least some use cases

00:43:39,359 --> 00:43:44,800
we could uh

00:43:40,800 --> 00:43:46,640
continue keeping the function

00:43:44,800 --> 00:43:48,400
so if you can implement all of these

00:43:46,640 --> 00:43:52,240
plans that we have i think we have a

00:43:48,400 --> 00:43:53,920
pretty solid plan for uh

00:43:52,240 --> 00:43:55,440
for supporting these apis in the

00:43:53,920 --> 00:43:56,880
continuous upgrade path being able to

00:43:55,440 --> 00:44:00,319
make changes uh

00:43:56,880 --> 00:44:03,520
and uh without causing regressions

00:44:00,319 --> 00:44:06,720
on sites so

00:44:03,520 --> 00:44:08,079
conclusions of the session is that many

00:44:06,720 --> 00:44:09,760
frontend components are still lacking

00:44:08,079 --> 00:44:11,280
processes for the continuous upgrade

00:44:09,760 --> 00:44:14,560
paths as we can see

00:44:11,280 --> 00:44:16,960
on on this uh on this presentation and

00:44:14,560 --> 00:44:18,480
uh the positive side many of the apis

00:44:16,960 --> 00:44:19,359
have already defined plans that are well

00:44:18,480 --> 00:44:21,040
defined and

00:44:19,359 --> 00:44:23,200
can be worked on when there's urgently

00:44:21,040 --> 00:44:26,640
around deprecating

00:44:23,200 --> 00:44:28,560
usages of that api we should

00:44:26,640 --> 00:44:31,040
continue writing the idea of providing a

00:44:28,560 --> 00:44:32,960
new starter kit team in favor of classy

00:44:31,040 --> 00:44:35,839
this would enable innovation and bug

00:44:32,960 --> 00:44:37,680
fixes on the default markup that we ship

00:44:35,839 --> 00:44:39,280
and uh i do think we should start

00:44:37,680 --> 00:44:41,359
testing the idea of bundling css and

00:44:39,280 --> 00:44:44,560
markup together to reduce the chances of

00:44:41,359 --> 00:44:45,920
regressions and uh potentially if we can

00:44:44,560 --> 00:44:48,720
go far enough with this

00:44:45,920 --> 00:44:49,200
we could even remove stable from drupal

00:44:48,720 --> 00:44:51,839
core

00:44:49,200 --> 00:44:51,839
eventually

00:44:52,560 --> 00:44:58,560
so yeah we have a minute

00:44:55,920 --> 00:44:59,920
for thoughts feelings questions about

00:44:58,560 --> 00:45:03,440
this plan

00:44:59,920 --> 00:45:05,359
and i'm checking the chat if we have any

00:45:03,440 --> 00:45:07,040
questions

00:45:05,359 --> 00:45:08,720
so it seems like just asked would the

00:45:07,040 --> 00:45:09,920
front matter thingy be implemented in

00:45:08,720 --> 00:45:12,079
core themes too

00:45:09,920 --> 00:45:13,359
i think we should implement the front

00:45:12,079 --> 00:45:15,680
matter thing in

00:45:13,359 --> 00:45:16,960
core themes too that's what i would

00:45:15,680 --> 00:45:18,800
recommend because that would set the

00:45:16,960 --> 00:45:21,119
pattern and uh

00:45:18,800 --> 00:45:22,480
since i don't think everyone should use

00:45:21,119 --> 00:45:24,160
the starter kit i think uh

00:45:22,480 --> 00:45:26,400
and not everyone wants to use start kit

00:45:24,160 --> 00:45:29,920
uh then we would have an alternative

00:45:26,400 --> 00:45:31,760
uh or additional layer of kind of

00:45:29,920 --> 00:45:34,560
safety around our back force

00:45:31,760 --> 00:45:34,560
compatibility

00:45:35,280 --> 00:45:39,440
and jess is also recommended that buff

00:45:37,599 --> 00:45:41,280
about starter kit would be a good idea

00:45:39,440 --> 00:45:42,960
yeah i think so i'm wondering if the

00:45:41,280 --> 00:45:44,800
buff

00:45:42,960 --> 00:45:46,319
schedule is still open if you can still

00:45:44,800 --> 00:45:48,880
schedule a take off

00:45:46,319 --> 00:45:52,240
if you can you should definitely do that

00:45:48,880 --> 00:46:01,839
do we have any other questions about the

00:45:52,240 --> 00:46:01,839
plans or thoughts or feelings

00:46:02,560 --> 00:46:05,680
so the next question is that which

00:46:03,920 --> 00:46:09,040
starter did generate a new

00:46:05,680 --> 00:46:11,599
team dependent on stable nine um so yeah

00:46:09,040 --> 00:46:14,240
right now i think we should probably

00:46:11,599 --> 00:46:15,680
um make it generate a team dependent on

00:46:14,240 --> 00:46:16,319
stable line maybe it should be even a

00:46:15,680 --> 00:46:19,359
setting

00:46:16,319 --> 00:46:22,880
on the uh as we generate the team maybe

00:46:19,359 --> 00:46:24,560
it should be up to the person who is uh

00:46:22,880 --> 00:46:26,839
generating a team maybe we can provide

00:46:24,560 --> 00:46:30,640
like some kind of

00:46:26,839 --> 00:46:33,359
options uh that's part of the

00:46:30,640 --> 00:46:35,440
when people generate those themes uh but

00:46:33,359 --> 00:46:38,880
if we can if you can implement the uh

00:46:35,440 --> 00:46:39,920
plan on uh bundling css javascript and

00:46:38,880 --> 00:46:41,839
markup together

00:46:39,920 --> 00:46:43,440
um we might not even necessarily need

00:46:41,839 --> 00:46:45,839
stable anymore

00:46:43,440 --> 00:46:47,200
in core and as a result the starter kit

00:46:45,839 --> 00:46:51,200
could generate the

00:46:47,200 --> 00:46:51,200
team always without using a base team

00:46:53,599 --> 00:46:58,960
yeah the fan s that's the

00:46:56,800 --> 00:47:00,079
right location for the slides i will

00:46:58,960 --> 00:47:05,280
post them

00:47:00,079 --> 00:47:05,280
right after we wrap up the

00:47:08,839 --> 00:47:13,839
talk

00:47:10,400 --> 00:47:16,480
so i think we are two minutes over if we

00:47:13,839 --> 00:47:17,920
don't have any more thoughts feelings or

00:47:16,480 --> 00:47:21,599
questions i think

00:47:17,920 --> 00:47:24,400
we can wrap this up uh thank you for

00:47:21,599 --> 00:47:25,440
all of the participants i hope hope you

00:47:24,400 --> 00:47:27,760
found something interesting

00:47:25,440 --> 00:47:28,720
out of this and looking forward to

00:47:27,760 --> 00:47:39,359
collaborating you

00:47:28,720 --> 00:47:41,440
with you on on these problems

00:47:39,359 --> 00:47:41,440

YouTube URL: https://www.youtube.com/watch?v=Fp0bVnCs0R8


