Title: A Strategic Approach to Custom Migrations   DrupalCon Global 2020
Publication date: 2020-08-25
Playlist: DrupalCon Global 2020
Description: 
	Asaph Kotzin, Clare Ming, and Adam Zimmermann discuss some higher-level techniques for handling more complicated migration use cases in Drupal 8 in addition to methods for troubleshooting migrations.
Captions: 
	00:00:07,839 --> 00:00:12,639
all right

00:00:08,320 --> 00:00:12,639
just i'll start whenever you tell me to

00:00:15,040 --> 00:00:20,640
we're live all right

00:00:18,400 --> 00:00:23,279
uh welcome to our talk called a

00:00:20,640 --> 00:00:26,480
strategic approach to custom migrations

00:00:23,279 --> 00:00:27,920
uh i'm adam zimmerman software architect

00:00:26,480 --> 00:00:31,519
here at chromatic

00:00:27,920 --> 00:00:34,640
and claire you introduce yourself quick

00:00:31,519 --> 00:00:37,840
sure hi i'm claire and i am a senior

00:00:34,640 --> 00:00:37,840
developer with chromatic

00:00:38,320 --> 00:00:43,040
soft hey i'm a soft cotton i

00:00:41,360 --> 00:00:45,039
am as well senior background developer

00:00:43,040 --> 00:00:48,270
at chromatic

00:00:45,039 --> 00:00:50,480
all right so we'll just dive right in

00:00:48,270 --> 00:00:52,559
[Music]

00:00:50,480 --> 00:00:55,039
so we're going to be talking about

00:00:52,559 --> 00:00:56,960
migrations kind of at a higher level

00:00:55,039 --> 00:00:58,160
strategic approaches to them but also

00:00:56,960 --> 00:00:59,199
it's going to assume a little bit of

00:00:58,160 --> 00:01:02,079
familiarity

00:00:59,199 --> 00:01:04,479
with some of the technical things using

00:01:02,079 --> 00:01:08,000
the migrate api with drupal

00:01:04,479 --> 00:01:09,760
some php and object oriented concepts

00:01:08,000 --> 00:01:11,360
a little bit of drush and module

00:01:09,760 --> 00:01:12,000
development and a little bit of

00:01:11,360 --> 00:01:14,080
configuration

00:01:12,000 --> 00:01:15,680
management but hopefully those will kind

00:01:14,080 --> 00:01:16,880
of be ancillary to

00:01:15,680 --> 00:01:19,200
the main points we're going to talk

00:01:16,880 --> 00:01:20,240
through so first i'll hand it to assaf

00:01:19,200 --> 00:01:24,080
who's going to talk about

00:01:20,240 --> 00:01:27,920
the content pyramid thank you adam

00:01:24,080 --> 00:01:30,240
hey everyone when we approach

00:01:27,920 --> 00:01:31,759
a complex migration the first thing we

00:01:30,240 --> 00:01:32,799
need to ask ourselves is how are we

00:01:31,759 --> 00:01:35,439
going to structure

00:01:32,799 --> 00:01:36,079
all of this data one side is how is it

00:01:35,439 --> 00:01:38,720
structured

00:01:36,079 --> 00:01:41,200
right now the other side is how do we

00:01:38,720 --> 00:01:43,439
want it structured in the new platform

00:01:41,200 --> 00:01:45,520
and we're left with the part in between

00:01:43,439 --> 00:01:47,119
to make a little bit more sense out of

00:01:45,520 --> 00:01:52,320
all of this i called it the content

00:01:47,119 --> 00:01:55,280
pyramid adam can you pass a slide please

00:01:52,320 --> 00:01:57,759
thanks so what is content made of um

00:01:55,280 --> 00:01:59,280
when we think of content we mostly think

00:01:57,759 --> 00:02:02,159
about a node

00:01:59,280 --> 00:02:03,360
that the user views on a website this

00:02:02,159 --> 00:02:04,880
content this node

00:02:03,360 --> 00:02:06,399
is actually built of many different

00:02:04,880 --> 00:02:09,119
pieces um

00:02:06,399 --> 00:02:09,679
it's constructed of structured data this

00:02:09,119 --> 00:02:12,640
can be

00:02:09,679 --> 00:02:13,280
paragraphs it can be field collections

00:02:12,640 --> 00:02:16,000
it might

00:02:13,280 --> 00:02:16,720
be what we call utility nodes which are

00:02:16,000 --> 00:02:18,640
nodes that

00:02:16,720 --> 00:02:19,760
their only purpose is to enrich a

00:02:18,640 --> 00:02:22,160
different node

00:02:19,760 --> 00:02:23,920
um but all of this structured data is

00:02:22,160 --> 00:02:26,080
part of this node

00:02:23,920 --> 00:02:27,440
below that we have all of our media

00:02:26,080 --> 00:02:30,400
images files

00:02:27,440 --> 00:02:31,040
attachments these can be actual files

00:02:30,400 --> 00:02:33,519
that move

00:02:31,040 --> 00:02:34,480
to our new deployed server and system or

00:02:33,519 --> 00:02:37,120
these can also be

00:02:34,480 --> 00:02:39,519
third-party services that we incorporate

00:02:37,120 --> 00:02:42,000
into the system as media entities

00:02:39,519 --> 00:02:43,920
i'm not going to get into much details

00:02:42,000 --> 00:02:44,879
about media claire is going to give you

00:02:43,920 --> 00:02:48,480
a very good

00:02:44,879 --> 00:02:49,599
presentation on that part and below the

00:02:48,480 --> 00:02:52,239
media we're looking about

00:02:49,599 --> 00:02:53,360
users in drupal almost everything

00:02:52,239 --> 00:02:57,200
requires a user

00:02:53,360 --> 00:02:59,760
litera it's an author a creator an owner

00:02:57,200 --> 00:03:01,519
we need users so that's what content is

00:02:59,760 --> 00:03:05,120
made of

00:03:01,519 --> 00:03:05,440
next slide please when we go to migrate

00:03:05,120 --> 00:03:07,760
it

00:03:05,440 --> 00:03:09,200
we need to reverse this pyramid we need

00:03:07,760 --> 00:03:12,720
to start from the basics

00:03:09,200 --> 00:03:14,560
from the users mostly the editors but

00:03:12,720 --> 00:03:15,280
it's a good step to moving all of our

00:03:14,560 --> 00:03:17,120
users

00:03:15,280 --> 00:03:19,599
from there we can build up go to the

00:03:17,120 --> 00:03:20,800
files from files we build up the media

00:03:19,599 --> 00:03:22,319
entities

00:03:20,800 --> 00:03:24,560
then we throw in all of the terms

00:03:22,319 --> 00:03:26,879
taxonomy terms that we're going to use

00:03:24,560 --> 00:03:27,840
it's important to add them at this stage

00:03:26,879 --> 00:03:30,959
because some of them

00:03:27,840 --> 00:03:33,440
could use medias and most of them

00:03:30,959 --> 00:03:34,560
are used by paragraphs and nodes above

00:03:33,440 --> 00:03:36,480
them

00:03:34,560 --> 00:03:38,799
once we're done with terms we continue

00:03:36,480 --> 00:03:41,680
up the ladder down the pyramid

00:03:38,799 --> 00:03:43,280
into our metadata parts the paragraphs

00:03:41,680 --> 00:03:44,720
the field collections and all of the

00:03:43,280 --> 00:03:46,480
utility nodes

00:03:44,720 --> 00:03:48,560
in some cases we're going to have

00:03:46,480 --> 00:03:50,080
dependencies between them as well

00:03:48,560 --> 00:03:52,640
so it's important to map these

00:03:50,080 --> 00:03:54,560
dependencies out and understand

00:03:52,640 --> 00:03:55,680
what has to come first and how do we

00:03:54,560 --> 00:03:58,400
layer this data

00:03:55,680 --> 00:04:00,319
upon each other once we have all of this

00:03:58,400 --> 00:04:02,959
metadata together we're actually ready

00:04:00,319 --> 00:04:05,200
to migrate the nodes themselves

00:04:02,959 --> 00:04:07,120
and after we migrate the nodes many

00:04:05,200 --> 00:04:09,760
times we find ourselves needing

00:04:07,120 --> 00:04:10,879
to run small scripts to fix attachments

00:04:09,760 --> 00:04:14,000
or references

00:04:10,879 --> 00:04:16,720
to add redirects metadata path

00:04:14,000 --> 00:04:17,440
aliases all of this stuff that comes at

00:04:16,720 --> 00:04:19,919
the end when

00:04:17,440 --> 00:04:22,560
content is actually ready and we can

00:04:19,919 --> 00:04:22,560
work with it

00:04:22,880 --> 00:04:28,080
next please if we look at all of this

00:04:26,240 --> 00:04:30,560
we can identify that we're actually

00:04:28,080 --> 00:04:32,960
looking at four different groups of data

00:04:30,560 --> 00:04:35,280
the first group is users it's a very

00:04:32,960 --> 00:04:38,240
straightforward group for migrations

00:04:35,280 --> 00:04:38,800
even complex systems in most cases have

00:04:38,240 --> 00:04:41,919
a rather

00:04:38,800 --> 00:04:44,479
simple structure for users and i don't

00:04:41,919 --> 00:04:46,560
think that needs much explanations

00:04:44,479 --> 00:04:48,560
files and media again i don't want to go

00:04:46,560 --> 00:04:50,560
too deep into those but since they are a

00:04:48,560 --> 00:04:52,080
base for all of the content we really

00:04:50,560 --> 00:04:54,000
need to take care of them before we

00:04:52,080 --> 00:04:56,560
continue to the rest

00:04:54,000 --> 00:04:58,000
then we go to the group of metadata

00:04:56,560 --> 00:05:01,360
everything that is not

00:04:58,000 --> 00:05:04,320
directly presented to the user in

00:05:01,360 --> 00:05:05,600
in itself but always presented as part

00:05:04,320 --> 00:05:07,360
of content

00:05:05,600 --> 00:05:09,440
so we have to make sure we have all of

00:05:07,360 --> 00:05:11,600
this ready before we go ahead

00:05:09,440 --> 00:05:12,960
and migrate the actual content into the

00:05:11,600 --> 00:05:14,800
system

00:05:12,960 --> 00:05:17,440
that's our four groups of data that

00:05:14,800 --> 00:05:17,440
we're looking at

00:05:17,600 --> 00:05:21,440
next please okay but why why is it

00:05:20,560 --> 00:05:24,160
important to

00:05:21,440 --> 00:05:25,280
look at all of this data and break it

00:05:24,160 --> 00:05:27,600
into groups

00:05:25,280 --> 00:05:29,440
and really understand how we're going to

00:05:27,600 --> 00:05:31,919
approach all of it

00:05:29,440 --> 00:05:32,479
so once we break this into independent

00:05:31,919 --> 00:05:34,880
groups

00:05:32,479 --> 00:05:36,880
and scripts it's much easier to model

00:05:34,880 --> 00:05:39,039
even complex data

00:05:36,880 --> 00:05:40,880
many times the source of this data can

00:05:39,039 --> 00:05:43,840
come from different sources

00:05:40,880 --> 00:05:44,560
in very complex migrations we sometimes

00:05:43,840 --> 00:05:46,960
have the need

00:05:44,560 --> 00:05:47,840
to unite data that comes from different

00:05:46,960 --> 00:05:50,880
databases

00:05:47,840 --> 00:05:51,199
into a single entity at the end and once

00:05:50,880 --> 00:05:53,360
we

00:05:51,199 --> 00:05:54,720
split up all of this into these groups

00:05:53,360 --> 00:05:57,280
we're able to much

00:05:54,720 --> 00:06:00,479
easier understand how we're going to

00:05:57,280 --> 00:06:02,240
build the layered structures of this

00:06:00,479 --> 00:06:03,680
another important benefit is the easy

00:06:02,240 --> 00:06:06,080
rollbacks

00:06:03,680 --> 00:06:08,400
it can get tempting to write a migration

00:06:06,080 --> 00:06:10,800
script that will create a node with

00:06:08,400 --> 00:06:13,199
all of its paragraphs and references and

00:06:10,800 --> 00:06:16,240
images and everything in one go

00:06:13,199 --> 00:06:16,960
um but then rolling it back is very

00:06:16,240 --> 00:06:19,440
difficult

00:06:16,960 --> 00:06:20,880
it's extremely difficult to debug it to

00:06:19,440 --> 00:06:23,759
understand what's going on

00:06:20,880 --> 00:06:24,720
and to for example if we have one error

00:06:23,759 --> 00:06:26,720
in one field

00:06:24,720 --> 00:06:28,800
we suddenly need to roll back the entire

00:06:26,720 --> 00:06:30,720
node instead of just being able to go

00:06:28,800 --> 00:06:31,680
and change what we need and step back

00:06:30,720 --> 00:06:34,000
out

00:06:31,680 --> 00:06:35,120
and that brings to the other benefit a

00:06:34,000 --> 00:06:37,840
layered progression

00:06:35,120 --> 00:06:39,199
of the actual content once we start

00:06:37,840 --> 00:06:41,440
looking at these groups

00:06:39,199 --> 00:06:43,120
and building these layers it's easier

00:06:41,440 --> 00:06:45,440
for us as developer

00:06:43,120 --> 00:06:46,400
as well for all the other stakeholders

00:06:45,440 --> 00:06:48,800
of a project

00:06:46,400 --> 00:06:50,560
to understand the data better and it's a

00:06:48,800 --> 00:06:53,039
great opportunity to look at it

00:06:50,560 --> 00:06:53,680
understand what is being used for many

00:06:53,039 --> 00:06:55,680
times

00:06:53,680 --> 00:06:57,840
at this stage we'll find we can make

00:06:55,680 --> 00:07:01,039
changes to the structure

00:06:57,840 --> 00:07:02,319
we'll find together with clients this is

00:07:01,039 --> 00:07:05,120
a great opportunity

00:07:02,319 --> 00:07:06,400
to manipulate data a little bit and this

00:07:05,120 --> 00:07:08,639
layered progression

00:07:06,400 --> 00:07:10,639
allows us to show a development as it

00:07:08,639 --> 00:07:12,639
goes see the results

00:07:10,639 --> 00:07:14,319
and then work on every little thing on

00:07:12,639 --> 00:07:16,479
its own

00:07:14,319 --> 00:07:18,319
another huge benefit is i like to call

00:07:16,479 --> 00:07:21,120
it the last mile migration

00:07:18,319 --> 00:07:22,080
it's very common that in complex

00:07:21,120 --> 00:07:25,120
migrations

00:07:22,080 --> 00:07:27,840
we work with data that is still alive

00:07:25,120 --> 00:07:28,479
we can migrate a legacy system but this

00:07:27,840 --> 00:07:30,800
system

00:07:28,479 --> 00:07:32,479
is still being used there is more data

00:07:30,800 --> 00:07:34,400
coming in all the time

00:07:32,479 --> 00:07:36,160
and although we're working with static

00:07:34,400 --> 00:07:38,720
data our migration

00:07:36,160 --> 00:07:39,599
approach needs to support the continuous

00:07:38,720 --> 00:07:42,880
integration

00:07:39,599 --> 00:07:45,280
of this data into the migration once we

00:07:42,880 --> 00:07:46,000
layer and split the migration into many

00:07:45,280 --> 00:07:48,639
different

00:07:46,000 --> 00:07:50,639
small scripts it's much easier to

00:07:48,639 --> 00:07:53,280
incorporate this updated data

00:07:50,639 --> 00:07:54,639
into our flow and update our content as

00:07:53,280 --> 00:07:56,879
it evolves

00:07:54,639 --> 00:07:59,680
into the final migration which is

00:07:56,879 --> 00:08:02,240
usually done after a code freeze or

00:07:59,680 --> 00:08:04,720
database freeze of a legacy system

00:08:02,240 --> 00:08:06,560
then we run this last mile scripts we

00:08:04,720 --> 00:08:09,039
don't need to change our scripts we can

00:08:06,560 --> 00:08:10,639
continue using them

00:08:09,039 --> 00:08:12,160
and maybe the most important part of all

00:08:10,639 --> 00:08:14,800
of this is that it keeps things

00:08:12,160 --> 00:08:15,360
simple complex data is complex to work

00:08:14,800 --> 00:08:18,400
with

00:08:15,360 --> 00:08:20,800
if we try to model all of it in a

00:08:18,400 --> 00:08:22,560
single yaml file it's kind of like

00:08:20,800 --> 00:08:24,000
trying to put all of your business logic

00:08:22,560 --> 00:08:27,840
in one function

00:08:24,000 --> 00:08:30,160
it helps to to encapsulate this data

00:08:27,840 --> 00:08:32,320
to understand the different layers of it

00:08:30,160 --> 00:08:34,880
and then when we look of a white yamaha

00:08:32,320 --> 00:08:35,360
migration file of a specific field of a

00:08:34,880 --> 00:08:37,760
node

00:08:35,360 --> 00:08:38,719
it's very easy to deal with it so

00:08:37,760 --> 00:08:41,360
complex data

00:08:38,719 --> 00:08:42,320
becomes simple once we break it up into

00:08:41,360 --> 00:08:44,560
these groups

00:08:42,320 --> 00:08:46,320
understand the different layers of them

00:08:44,560 --> 00:08:49,279
and write very simple scripts for

00:08:46,320 --> 00:08:49,279
managing this data

00:08:49,440 --> 00:08:54,959
next piece so how do we get this down

00:08:52,560 --> 00:08:58,560
how do we work with complex data

00:08:54,959 --> 00:09:01,680
and run this migrations my personal

00:08:58,560 --> 00:09:04,240
favorite approach is csv files

00:09:01,680 --> 00:09:06,160
i like it for many reasons but mostly

00:09:04,240 --> 00:09:06,800
because it's easy for everyone to work

00:09:06,160 --> 00:09:09,040
with

00:09:06,800 --> 00:09:10,880
it doesn't depend on specific software

00:09:09,040 --> 00:09:13,279
or operating system

00:09:10,880 --> 00:09:14,160
it is standard for everybody who work

00:09:13,279 --> 00:09:16,880
with it

00:09:14,160 --> 00:09:18,000
and it's also a format that is usually

00:09:16,880 --> 00:09:20,800
easy to produce

00:09:18,000 --> 00:09:22,959
from data whatever the source is if it's

00:09:20,800 --> 00:09:24,640
xmls originally if it's databases in

00:09:22,959 --> 00:09:27,200
different formats

00:09:24,640 --> 00:09:29,519
most systems have an ability to produce

00:09:27,200 --> 00:09:32,480
the data to csv files

00:09:29,519 --> 00:09:34,720
and work from them that is my favorite

00:09:32,480 --> 00:09:37,120
xml will do just as well

00:09:34,720 --> 00:09:38,320
and any other format that is supported

00:09:37,120 --> 00:09:40,880
by migrate

00:09:38,320 --> 00:09:42,560
can work the point is to get this data

00:09:40,880 --> 00:09:44,399
out of the legacy system

00:09:42,560 --> 00:09:45,760
and into a static file that we can work

00:09:44,399 --> 00:09:47,440
with

00:09:45,760 --> 00:09:49,680
that's also important because that way

00:09:47,440 --> 00:09:52,000
we have less dependency on a data source

00:09:49,680 --> 00:09:54,160
if you're working against live databases

00:09:52,000 --> 00:09:55,680
things change

00:09:54,160 --> 00:09:57,279
and we don't know what's going on it's

00:09:55,680 --> 00:09:59,120
kind of working with the black box and

00:09:57,279 --> 00:10:00,560
when you migrate you want to see the

00:09:59,120 --> 00:10:02,560
data that you're working with

00:10:00,560 --> 00:10:04,240
so having this on files that we can look

00:10:02,560 --> 00:10:05,760
at easily that

00:10:04,240 --> 00:10:07,360
helps a lot to understand what it is

00:10:05,760 --> 00:10:09,000
we're doing

00:10:07,360 --> 00:10:11,279
another important part is the

00:10:09,000 --> 00:10:12,959
standardization and the pre-processing

00:10:11,279 --> 00:10:15,760
power

00:10:12,959 --> 00:10:16,640
it can be tempting to try to manipulate

00:10:15,760 --> 00:10:19,200
and process

00:10:16,640 --> 00:10:20,399
information as part of the migration

00:10:19,200 --> 00:10:22,160
script

00:10:20,399 --> 00:10:24,000
and many times we don't have any other

00:10:22,160 --> 00:10:26,000
option we have to do that

00:10:24,000 --> 00:10:27,040
but there's a lot of data that we can

00:10:26,000 --> 00:10:29,680
pre-process

00:10:27,040 --> 00:10:31,920
before we bring it into the system if

00:10:29,680 --> 00:10:33,279
we're having csv files we can work with

00:10:31,920 --> 00:10:35,680
functions we can

00:10:33,279 --> 00:10:37,839
do a lot of data manipulation with

00:10:35,680 --> 00:10:39,920
vlookups of other data sources and we

00:10:37,839 --> 00:10:40,640
can do a lot of work before it even

00:10:39,920 --> 00:10:43,200
reaches

00:10:40,640 --> 00:10:45,040
our migration script so we export all

00:10:43,200 --> 00:10:47,600
the data to static files

00:10:45,040 --> 00:10:49,680
we pre-process them to get them as close

00:10:47,600 --> 00:10:52,560
as we can to the actual data format

00:10:49,680 --> 00:10:52,560
that we're going to use

00:10:52,959 --> 00:10:57,680
in the next piece and then comes the

00:10:55,360 --> 00:11:00,160
part of manipulation we did our best we

00:10:57,680 --> 00:11:01,120
tried everything we can using the csvs

00:11:00,160 --> 00:11:04,160
but there is

00:11:01,120 --> 00:11:06,000
also a limit to the power of google

00:11:04,160 --> 00:11:09,680
spreadsheet functions or excel

00:11:06,000 --> 00:11:10,480
functions um we cannot do stuff that

00:11:09,680 --> 00:11:12,959
depends on

00:11:10,480 --> 00:11:14,640
other entities we are not connected to

00:11:12,959 --> 00:11:16,720
the system that we're migrating

00:11:14,640 --> 00:11:17,839
into so there is a limit to what we can

00:11:16,720 --> 00:11:19,680
do

00:11:17,839 --> 00:11:20,880
we still need to do manipulations on the

00:11:19,680 --> 00:11:23,120
data

00:11:20,880 --> 00:11:24,720
the first step is all of the core

00:11:23,120 --> 00:11:27,360
plugins from

00:11:24,720 --> 00:11:28,800
that come with the migrate api and there

00:11:27,360 --> 00:11:30,399
are many

00:11:28,800 --> 00:11:31,839
the link in this slide will take you to

00:11:30,399 --> 00:11:34,079
a page that will show you

00:11:31,839 --> 00:11:36,079
all of the core plugins and all of the

00:11:34,079 --> 00:11:39,200
migrate plus plugins

00:11:36,079 --> 00:11:42,560
for for processing data as

00:11:39,200 --> 00:11:44,720
part of the yaml scripts

00:11:42,560 --> 00:11:46,160
and the next piece but even that

00:11:44,720 --> 00:11:48,079
sometimes is not enough

00:11:46,160 --> 00:11:49,519
we still find ourselves with data that

00:11:48,079 --> 00:11:52,560
just doesn't fit

00:11:49,519 --> 00:11:54,639
the way we want it in the system

00:11:52,560 --> 00:11:56,079
my best tip on this is using the

00:11:54,639 --> 00:11:58,240
callback plugin

00:11:56,079 --> 00:11:59,200
it's a super simple plugin that allows

00:11:58,240 --> 00:12:01,760
you to call

00:11:59,200 --> 00:12:02,639
custom php functions they need to be

00:12:01,760 --> 00:12:05,040
simple ones

00:12:02,639 --> 00:12:05,760
but still it enables you to use a lot of

00:12:05,040 --> 00:12:07,839
functions

00:12:05,760 --> 00:12:09,120
on the data as part of the migration

00:12:07,839 --> 00:12:11,600
script

00:12:09,120 --> 00:12:13,279
sometimes even that is not enough and

00:12:11,600 --> 00:12:15,440
that's where we go we can write custom

00:12:13,279 --> 00:12:17,200
processors

00:12:15,440 --> 00:12:19,279
the example that you see here the append

00:12:17,200 --> 00:12:22,079
to field is a custom processor

00:12:19,279 --> 00:12:24,000
that knows how to load a node and add an

00:12:22,079 --> 00:12:26,240
item to an existing field that

00:12:24,000 --> 00:12:28,240
might have data into it that's something

00:12:26,240 --> 00:12:29,279
that's just not supported by the migrate

00:12:28,240 --> 00:12:31,279
api

00:12:29,279 --> 00:12:32,880
when we build these custom processors we

00:12:31,279 --> 00:12:35,920
keep them generalized

00:12:32,880 --> 00:12:37,440
reusable and we find that many times a

00:12:35,920 --> 00:12:39,680
few processors

00:12:37,440 --> 00:12:40,560
can really give you everything you need

00:12:39,680 --> 00:12:42,800
after using

00:12:40,560 --> 00:12:44,720
all of the other plugins and callbacks

00:12:42,800 --> 00:12:46,720
and everything to manipulate the data in

00:12:44,720 --> 00:12:49,120
the way that you want it and need it to

00:12:46,720 --> 00:12:49,120
import

00:12:50,560 --> 00:12:53,839
just a few more things about what can we

00:12:52,560 --> 00:12:58,880
do with this data

00:12:53,839 --> 00:12:58,880
um before we go into what is this data

00:12:59,279 --> 00:13:04,320
most of our migrations of complex data

00:13:01,839 --> 00:13:06,160
will depend on the plug-in migration

00:13:04,320 --> 00:13:08,639
basically it's a lookup that allows us

00:13:06,160 --> 00:13:09,600
to reference data that has already been

00:13:08,639 --> 00:13:12,399
migrated

00:13:09,600 --> 00:13:13,839
as part of the migration script the most

00:13:12,399 --> 00:13:16,880
useful function of that

00:13:13,839 --> 00:13:17,600
is the override properties part override

00:13:16,880 --> 00:13:20,240
properties

00:13:17,600 --> 00:13:22,880
allows us to tell the migration script

00:13:20,240 --> 00:13:24,880
to only overwrite specific fields

00:13:22,880 --> 00:13:26,000
so if we're coming in and attaching

00:13:24,880 --> 00:13:28,160
paragraphs to an

00:13:26,000 --> 00:13:30,720
already existing nodes we want to make

00:13:28,160 --> 00:13:33,839
sure that the only thing we're changing

00:13:30,720 --> 00:13:34,800
is that specific field for the paragraph

00:13:33,839 --> 00:13:37,200
whenever we use

00:13:34,800 --> 00:13:38,639
migration scripts to alter existing

00:13:37,200 --> 00:13:40,639
content or entities

00:13:38,639 --> 00:13:41,760
the override properties is what's going

00:13:40,639 --> 00:13:44,160
to ensure us

00:13:41,760 --> 00:13:44,880
that we're not corrupting the entire

00:13:44,160 --> 00:13:47,040
node by

00:13:44,880 --> 00:13:49,839
updating a single item that actually did

00:13:47,040 --> 00:13:52,000
much more than what we expected

00:13:49,839 --> 00:13:55,600
which brings to the next of more and

00:13:52,000 --> 00:13:58,959
simpler is better than less and complex

00:13:55,600 --> 00:14:02,399
simple migration scripts allows easy

00:13:58,959 --> 00:14:04,880
migration again it's so tempting to try

00:14:02,399 --> 00:14:06,720
to get that migration done in one go to

00:14:04,880 --> 00:14:09,120
write that yaml file that will build

00:14:06,720 --> 00:14:11,199
this complex node with 50 fields and

00:14:09,120 --> 00:14:13,760
images and references

00:14:11,199 --> 00:14:15,199
it can work just as well as writing it

00:14:13,760 --> 00:14:17,199
in 10 different scripts

00:14:15,199 --> 00:14:19,120
but when you have this built in 10

00:14:17,199 --> 00:14:21,600
different simple scripts

00:14:19,120 --> 00:14:22,399
it's much easier to understand what just

00:14:21,600 --> 00:14:24,720
happened

00:14:22,399 --> 00:14:25,760
to roll back specific parts to make

00:14:24,720 --> 00:14:27,839
small changes

00:14:25,760 --> 00:14:29,360
and to keep this data much more dynamic

00:14:27,839 --> 00:14:33,279
than it is when you try to do it

00:14:29,360 --> 00:14:35,120
all in one go another important aspect

00:14:33,279 --> 00:14:36,240
when we deal with complex data is

00:14:35,120 --> 00:14:39,279
standardization

00:14:36,240 --> 00:14:42,079
of date and time formats i think

00:14:39,279 --> 00:14:44,880
every single migration i've ever done

00:14:42,079 --> 00:14:46,560
included custom dates and time formats

00:14:44,880 --> 00:14:49,440
that's an integral part of

00:14:46,560 --> 00:14:50,880
every system especially systems that end

00:14:49,440 --> 00:14:53,920
up being migrated

00:14:50,880 --> 00:14:56,480
um that's the base of data

00:14:53,920 --> 00:14:57,440
it's a tremendous value to be able to

00:14:56,480 --> 00:14:59,600
standardize

00:14:57,440 --> 00:15:00,560
all of this before it even reaches the

00:14:59,600 --> 00:15:04,000
system

00:15:00,560 --> 00:15:06,160
my personal favorite unix timestamps

00:15:04,000 --> 00:15:08,399
convert from that to whatever you want

00:15:06,160 --> 00:15:09,920
when you migrate inside if it's a date

00:15:08,399 --> 00:15:12,000
only or a date time

00:15:09,920 --> 00:15:14,880
but if you're able to get all of your

00:15:12,000 --> 00:15:16,959
dates and times into unix timestamps

00:15:14,880 --> 00:15:18,959
it saves a lot of headaches and while

00:15:16,959 --> 00:15:21,519
you're at it try to standardize

00:15:18,959 --> 00:15:22,240
everything once you take out content

00:15:21,519 --> 00:15:24,800
from a system

00:15:22,240 --> 00:15:26,320
and put it in a file many times you find

00:15:24,800 --> 00:15:28,560
patterns that you can fix

00:15:26,320 --> 00:15:30,560
many times the owner of the data

00:15:28,560 --> 00:15:31,839
understands it better and understands

00:15:30,560 --> 00:15:33,920
the relations better

00:15:31,839 --> 00:15:35,120
and is able to standardize things even

00:15:33,920 --> 00:15:37,680
more that's

00:15:35,120 --> 00:15:39,600
the greatest opportunity to do it once

00:15:37,680 --> 00:15:41,600
the data is out of the system

00:15:39,600 --> 00:15:43,040
and before you're processing it is a

00:15:41,600 --> 00:15:46,720
great time to standardize

00:15:43,040 --> 00:15:49,680
everything and just one last part

00:15:46,720 --> 00:15:51,759
about multilingual migrations so

00:15:49,680 --> 00:15:53,920
multilingual migrations are no different

00:15:51,759 --> 00:15:55,120
but they do require that you plan well

00:15:53,920 --> 00:15:56,560
ahead

00:15:55,120 --> 00:15:58,480
that's the same as building a

00:15:56,560 --> 00:16:00,560
multilingual drupal website

00:15:58,480 --> 00:16:02,959
there is nothing inherently different

00:16:00,560 --> 00:16:05,120
about it but if you don't plan for it

00:16:02,959 --> 00:16:06,399
well ahead and understand where you want

00:16:05,120 --> 00:16:08,480
to take it

00:16:06,399 --> 00:16:10,480
it's going to be a headache and content

00:16:08,480 --> 00:16:13,199
migration is no different

00:16:10,480 --> 00:16:15,360
drupal migration supports the concept of

00:16:13,199 --> 00:16:17,759
a original translation source

00:16:15,360 --> 00:16:19,600
it understands how to add more content

00:16:17,759 --> 00:16:22,639
as translations of that

00:16:19,600 --> 00:16:25,040
and if you build your content pyramid in

00:16:22,639 --> 00:16:26,560
a layered structure of dependencies you

00:16:25,040 --> 00:16:28,480
just need to make sure that your

00:16:26,560 --> 00:16:30,560
original source language

00:16:28,480 --> 00:16:31,759
is inserted before any other

00:16:30,560 --> 00:16:34,800
translations

00:16:31,759 --> 00:16:37,199
and everything is the same

00:16:34,800 --> 00:16:40,000
that's it for me on a high level how to

00:16:37,199 --> 00:16:43,279
look at your content

00:16:40,000 --> 00:16:46,480
and do i pass it to claire

00:16:43,279 --> 00:16:48,240
thanks assaf um so

00:16:46,480 --> 00:16:50,959
in this next portion of the presentation

00:16:48,240 --> 00:16:51,600
i wanted to zero in on some common use

00:16:50,959 --> 00:16:53,519
cases

00:16:51,600 --> 00:16:55,120
um the enormity of this topic and the

00:16:53,519 --> 00:16:57,600
constraint of our time

00:16:55,120 --> 00:17:00,079
given that um i sort of had to pick and

00:16:57,600 --> 00:17:02,079
choose so this is more of a tactical

00:17:00,079 --> 00:17:03,759
um on the ground approach to dealing

00:17:02,079 --> 00:17:06,559
with a

00:17:03,759 --> 00:17:07,600
data structures such as media entities

00:17:06,559 --> 00:17:10,000
and then

00:17:07,600 --> 00:17:11,280
how to process some of your source data

00:17:10,000 --> 00:17:14,799
coming into your

00:17:11,280 --> 00:17:17,760
target application next slide

00:17:14,799 --> 00:17:18,480
so in the context of these two topics i

00:17:17,760 --> 00:17:21,280
wanted to

00:17:18,480 --> 00:17:22,000
touch on with respect to migrating media

00:17:21,280 --> 00:17:24,720
entities

00:17:22,000 --> 00:17:25,280
um just talk about like different source

00:17:24,720 --> 00:17:27,839
uh

00:17:25,280 --> 00:17:29,679
scenarios the first being maybe you're

00:17:27,839 --> 00:17:31,919
coming from an

00:17:29,679 --> 00:17:32,720
uh an earlier version of drupal 8 or

00:17:31,919 --> 00:17:35,760
drupal 7

00:17:32,720 --> 00:17:38,400
instance working with file

00:17:35,760 --> 00:17:39,120
image file upload fields so how to

00:17:38,400 --> 00:17:42,320
approach

00:17:39,120 --> 00:17:44,240
transforming those into media entities

00:17:42,320 --> 00:17:46,320
then also talk about data coming from

00:17:44,240 --> 00:17:48,240
non-drupal data stores um and

00:17:46,320 --> 00:17:50,799
specifically how to deal with

00:17:48,240 --> 00:17:52,160
uh inline embedded media references in

00:17:50,799 --> 00:17:54,240
your source system

00:17:52,160 --> 00:17:56,320
and how to bring those over um sorry can

00:17:54,240 --> 00:17:58,880
you go back a little bit sorry

00:17:56,320 --> 00:17:59,600
and then lastly just an option for how

00:17:58,880 --> 00:18:02,880
to

00:17:59,600 --> 00:18:04,080
deal with this if you have maybe a

00:18:02,880 --> 00:18:06,000
simpler site um

00:18:04,080 --> 00:18:08,000
and you don't maybe need the my grid api

00:18:06,000 --> 00:18:09,919
to do this and then lastly just a

00:18:08,000 --> 00:18:11,840
few words on how to merge multiple

00:18:09,919 --> 00:18:13,520
source fields into a single entity as

00:18:11,840 --> 00:18:14,960
that is also a common scenario that you

00:18:13,520 --> 00:18:18,799
might encounter

00:18:14,960 --> 00:18:21,360
next slide so just a quick word about

00:18:18,799 --> 00:18:22,960
media in core it's been in core since

00:18:21,360 --> 00:18:24,799
8.4

00:18:22,960 --> 00:18:27,039
and as most of us are probably familiar

00:18:24,799 --> 00:18:30,080
with it's a really robust framework

00:18:27,039 --> 00:18:31,679
for media management whether it's

00:18:30,080 --> 00:18:34,080
native media or coming from a third

00:18:31,679 --> 00:18:36,480
party it's highly extensible

00:18:34,080 --> 00:18:37,840
there's a rich ecosystem of contrib

00:18:36,480 --> 00:18:39,600
modules that support

00:18:37,840 --> 00:18:42,160
media in core and of course the objects

00:18:39,600 --> 00:18:45,520
that we're talking about are images pdfs

00:18:42,160 --> 00:18:47,280
um social media embeds and the like

00:18:45,520 --> 00:18:48,640
and the main takeaway is that media

00:18:47,280 --> 00:18:51,919
entities um

00:18:48,640 --> 00:18:53,039
are standardized full-fledged fieldable

00:18:51,919 --> 00:18:55,760
entities

00:18:53,039 --> 00:18:58,559
they make entity references to file

00:18:55,760 --> 00:19:00,640
entities and they themselves can be

00:18:58,559 --> 00:19:02,799
the object of entity reference fields

00:19:00,640 --> 00:19:06,080
from other node types

00:19:02,799 --> 00:19:08,080
next slide so when you

00:19:06,080 --> 00:19:09,840
first start approaching how to migrate

00:19:08,080 --> 00:19:11,360
media the advice across the board

00:19:09,840 --> 00:19:13,440
and a soft mention this too is that you

00:19:11,360 --> 00:19:16,080
need to migrate your files first

00:19:13,440 --> 00:19:17,679
and then once you do that generate the

00:19:16,080 --> 00:19:21,120
media entities

00:19:17,679 --> 00:19:23,280
next slide so

00:19:21,120 --> 00:19:25,600
the first order of business is to get

00:19:23,280 --> 00:19:28,799
all your source files into

00:19:25,600 --> 00:19:29,840
uh the managed file system and you can

00:19:28,799 --> 00:19:31,919
do that with

00:19:29,840 --> 00:19:33,520
an nd ready to go destination plugin

00:19:31,919 --> 00:19:36,640
called entity file

00:19:33,520 --> 00:19:38,640
so here's a sample migration yaml file

00:19:36,640 --> 00:19:41,120
for a file migration

00:19:38,640 --> 00:19:41,840
and that will get all your files into

00:19:41,120 --> 00:19:44,400
drupal

00:19:41,840 --> 00:19:44,400
next slide

00:19:44,960 --> 00:19:48,080
and the second part of this process is

00:19:46,799 --> 00:19:50,960
then once you have

00:19:48,080 --> 00:19:53,039
your file entities ingested and imported

00:19:50,960 --> 00:19:53,520
you can create your media entities out

00:19:53,039 --> 00:19:55,280
of them

00:19:53,520 --> 00:19:56,799
so there is also a ready to go

00:19:55,280 --> 00:19:59,280
destination plugin called

00:19:56,799 --> 00:20:00,720
entity media that will do this for you

00:19:59,280 --> 00:20:03,679
and as part of that process

00:20:00,720 --> 00:20:05,440
um you need to do a migration lookup on

00:20:03,679 --> 00:20:06,000
the files migration that would that just

00:20:05,440 --> 00:20:08,000
occurred

00:20:06,000 --> 00:20:09,760
to make that link or that reference

00:20:08,000 --> 00:20:12,960
between the media entity

00:20:09,760 --> 00:20:14,480
and the file entity so that in summation

00:20:12,960 --> 00:20:17,600
is just the general process for

00:20:14,480 --> 00:20:18,240
getting uh media entities into a drupal

00:20:17,600 --> 00:20:21,360
system

00:20:18,240 --> 00:20:24,080
next slide

00:20:21,360 --> 00:20:25,360
um so in the first use case um that i

00:20:24,080 --> 00:20:26,880
mentioned the context that i wanted to

00:20:25,360 --> 00:20:29,520
talk about was say

00:20:26,880 --> 00:20:31,360
you have a drupal 7 install or even an

00:20:29,520 --> 00:20:34,000
earlier version of drupal 8

00:20:31,360 --> 00:20:35,120
prior to when media got into core and

00:20:34,000 --> 00:20:36,880
you're trying to figure out how to get

00:20:35,120 --> 00:20:38,240
all your file entities or your previous

00:20:36,880 --> 00:20:41,600
file fields

00:20:38,240 --> 00:20:43,440
into media entities in the course of

00:20:41,600 --> 00:20:45,520
doing research for this presentation i

00:20:43,440 --> 00:20:48,320
came across two contrib modules

00:20:45,520 --> 00:20:50,080
that try to automate this process and

00:20:48,320 --> 00:20:51,919
and really

00:20:50,080 --> 00:20:53,520
provide a way to do this process

00:20:51,919 --> 00:20:55,200
efficiently um

00:20:53,520 --> 00:20:57,600
so the two i wanted to mention are media

00:20:55,200 --> 00:20:59,520
migration and my great file to media

00:20:57,600 --> 00:21:01,039
there are some nuances between them but

00:20:59,520 --> 00:21:02,000
i'll just touch on them lightly to talk

00:21:01,039 --> 00:21:06,080
about how you can use

00:21:02,000 --> 00:21:08,320
them next slide so media migration

00:21:06,080 --> 00:21:10,320
is a control project actually developed

00:21:08,320 --> 00:21:12,960
by our friends over at lullabot

00:21:10,320 --> 00:21:14,240
it provides a migration pathway for

00:21:12,960 --> 00:21:17,280
media between drupal

00:21:14,240 --> 00:21:19,120
7 and drupal 8. and one

00:21:17,280 --> 00:21:20,799
nuance about this that i think is really

00:21:19,120 --> 00:21:21,520
interesting is that it actually can also

00:21:20,799 --> 00:21:24,720
transform

00:21:21,520 --> 00:21:25,200
all your media wysiwyg tokens into

00:21:24,720 --> 00:21:28,480
proper

00:21:25,200 --> 00:21:31,520
entity embeds in drupal

00:21:28,480 --> 00:21:33,280
so what it what this does is it takes it

00:21:31,520 --> 00:21:35,440
basically leverages drush commands

00:21:33,280 --> 00:21:37,520
to automate these processes so you can

00:21:35,440 --> 00:21:40,799
run drush migrate upgrade

00:21:37,520 --> 00:21:43,679
pass in uh the key for the

00:21:40,799 --> 00:21:44,080
legacy database as well as the file

00:21:43,679 --> 00:21:46,240
system

00:21:44,080 --> 00:21:47,440
root of the legacy system with the

00:21:46,240 --> 00:21:49,039
configure only

00:21:47,440 --> 00:21:50,960
flag and you can export this

00:21:49,039 --> 00:21:54,000
configuration and then

00:21:50,960 --> 00:21:58,159
run your configuration and

00:21:54,000 --> 00:22:00,640
content migrations excellent

00:21:58,159 --> 00:22:01,440
so that the first uh command here the

00:22:00,640 --> 00:22:04,799
result of this

00:22:01,440 --> 00:22:05,440
of importing um the uh configuration

00:22:04,799 --> 00:22:08,080
entities

00:22:05,440 --> 00:22:08,720
will take care of actually um taking

00:22:08,080 --> 00:22:12,400
whatever

00:22:08,720 --> 00:22:15,760
fields are attached to your drupal 7 um

00:22:12,400 --> 00:22:18,080
or drupal 8 of

00:22:15,760 --> 00:22:19,120
fields and attach them to the target

00:22:18,080 --> 00:22:20,720
bundle

00:22:19,120 --> 00:22:22,400
and then once you have that

00:22:20,720 --> 00:22:24,960
configuration migration done

00:22:22,400 --> 00:22:26,799
you can actually import those media

00:22:24,960 --> 00:22:29,360
entities using the content

00:22:26,799 --> 00:22:30,880
tag flag and that will take care of

00:22:29,360 --> 00:22:33,760
importing your entities as well

00:22:30,880 --> 00:22:34,720
next slide um the other contrib project

00:22:33,760 --> 00:22:35,760
that i want to mention

00:22:34,720 --> 00:22:39,120
that a lot of people seem to have a

00:22:35,760 --> 00:22:42,000
success with is migrate file to mia

00:22:39,120 --> 00:22:42,799
next slide it also leverages stretch

00:22:42,000 --> 00:22:45,679
commands

00:22:42,799 --> 00:22:46,080
um to automate uh these processes so you

00:22:45,679 --> 00:22:49,679
can

00:22:46,080 --> 00:22:50,720
run um this drush command migrate file

00:22:49,679 --> 00:22:53,200
media fields

00:22:50,720 --> 00:22:55,600
pass in the entity type the bundle the

00:22:53,200 --> 00:22:57,440
source field the target media bundle

00:22:55,600 --> 00:22:58,960
and it will generate your target media

00:22:57,440 --> 00:23:00,559
fields just by running the stretch

00:22:58,960 --> 00:23:04,880
command which is very cool

00:23:00,559 --> 00:23:07,280
next slide and it also enables you to

00:23:04,880 --> 00:23:10,159
generate your migration yaml files

00:23:07,280 --> 00:23:10,960
just by running this command and when

00:23:10,159 --> 00:23:14,400
you do that

00:23:10,960 --> 00:23:16,159
next slide it will launch a generator

00:23:14,400 --> 00:23:18,559
as a preface to this you want to make

00:23:16,159 --> 00:23:21,919
sure you have a custom module

00:23:18,559 --> 00:23:23,520
set up already scaffolded when you are

00:23:21,919 --> 00:23:25,039
writing migration scripts you need a

00:23:23,520 --> 00:23:27,840
place to put them in your code

00:23:25,039 --> 00:23:28,799
um so you often package them in a custom

00:23:27,840 --> 00:23:30,480
module

00:23:28,799 --> 00:23:31,840
and so this generator will just walk you

00:23:30,480 --> 00:23:33,840
through some basic questions like what's

00:23:31,840 --> 00:23:35,440
the machine name of your custom module

00:23:33,840 --> 00:23:36,720
what's your source field what's your

00:23:35,440 --> 00:23:38,240
target bundle

00:23:36,720 --> 00:23:40,559
and it will actually generate your

00:23:38,240 --> 00:23:43,440
migration yaml files and save them

00:23:40,559 --> 00:23:44,400
to the config install directory of the

00:23:43,440 --> 00:23:47,919
custom module

00:23:44,400 --> 00:23:50,159
that you specify next slide

00:23:47,919 --> 00:23:51,679
one cool feature about this contrib

00:23:50,159 --> 00:23:53,919
project is that it does

00:23:51,679 --> 00:23:54,720
uh duplicate file detection so by just

00:23:53,919 --> 00:23:57,360
running this

00:23:54,720 --> 00:23:58,880
migrate command with the migration id of

00:23:57,360 --> 00:24:01,679
the images or files

00:23:58,880 --> 00:24:03,039
migration that you have going it will

00:24:01,679 --> 00:24:05,760
create a binary hash

00:24:03,039 --> 00:24:06,480
of that file store that in a table in

00:24:05,760 --> 00:24:08,960
the database

00:24:06,480 --> 00:24:11,039
and then as a and again you need to do

00:24:08,960 --> 00:24:11,840
this before you actually run your media

00:24:11,039 --> 00:24:13,600
import

00:24:11,840 --> 00:24:15,279
but when you go ahead and run your media

00:24:13,600 --> 00:24:18,080
migration it will double check

00:24:15,279 --> 00:24:19,679
um against that table and it will not

00:24:18,080 --> 00:24:22,880
import if it already

00:24:19,679 --> 00:24:24,960
exists um next slide

00:24:22,880 --> 00:24:26,000
so that covers sort of a quick and dirty

00:24:24,960 --> 00:24:28,880
if you have uh

00:24:26,000 --> 00:24:30,000
your source is a drupal application but

00:24:28,880 --> 00:24:32,720
oftentimes

00:24:30,000 --> 00:24:35,279
doing migrations we're pulling in a data

00:24:32,720 --> 00:24:36,880
from a non-drupal data store

00:24:35,279 --> 00:24:38,480
and one common use case scenario that i

00:24:36,880 --> 00:24:41,760
wanted to

00:24:38,480 --> 00:24:43,840
address is say you have a wordpress

00:24:41,760 --> 00:24:45,279
article that you want to move into

00:24:43,840 --> 00:24:47,760
drupal and

00:24:45,279 --> 00:24:48,559
in the legacy system maybe editors have

00:24:47,760 --> 00:24:51,840
been adding

00:24:48,559 --> 00:24:52,799
inline image tags or um social media

00:24:51,840 --> 00:24:54,799
embeds

00:24:52,799 --> 00:24:56,159
and so all those you know how do we

00:24:54,799 --> 00:24:58,320
approach taking

00:24:56,159 --> 00:24:59,520
migrating those articles um with all

00:24:58,320 --> 00:25:02,400
these inline

00:24:59,520 --> 00:25:02,880
media references into drupal um so the

00:25:02,400 --> 00:25:04,480
approach

00:25:02,880 --> 00:25:06,240
is you know you're you're you're going

00:25:04,480 --> 00:25:08,480
to be using the same source

00:25:06,240 --> 00:25:10,720
as the attached entity and in our case

00:25:08,480 --> 00:25:13,360
in our example of a wordpress article

00:25:10,720 --> 00:25:14,320
it's the body field of that article and

00:25:13,360 --> 00:25:17,679
we need to parse

00:25:14,320 --> 00:25:19,600
that body data

00:25:17,679 --> 00:25:20,880
and we can do that by creating a custom

00:25:19,600 --> 00:25:22,799
process plug-in

00:25:20,880 --> 00:25:24,159
and in that we can use regular

00:25:22,799 --> 00:25:26,840
expressions to

00:25:24,159 --> 00:25:28,400
identify and target those inline

00:25:26,840 --> 00:25:30,559
references

00:25:28,400 --> 00:25:32,720
and then do some processing to

00:25:30,559 --> 00:25:34,080
ultimately swap them out with whatever

00:25:32,720 --> 00:25:37,360
proper entity embed

00:25:34,080 --> 00:25:40,159
code you want in the destination

00:25:37,360 --> 00:25:42,400
article body field so you can write

00:25:40,159 --> 00:25:43,760
custom methods to do the file lookups

00:25:42,400 --> 00:25:45,440
generate the entities and then

00:25:43,760 --> 00:25:46,559
ultimately create the embed market that

00:25:45,440 --> 00:25:49,679
you want to replace

00:25:46,559 --> 00:25:52,880
for that article body value

00:25:49,679 --> 00:25:56,400
next slide so here's an example

00:25:52,880 --> 00:25:58,880
from a article um

00:25:56,400 --> 00:26:00,640
from an article migration yaml file

00:25:58,880 --> 00:26:01,440
where we're taking the body value of

00:26:00,640 --> 00:26:04,720
that article

00:26:01,440 --> 00:26:05,600
and passing it through some process

00:26:04,720 --> 00:26:07,200
plugins

00:26:05,600 --> 00:26:08,559
notably the one we want to look at is a

00:26:07,200 --> 00:26:09,200
custom process plugin that we wrote

00:26:08,559 --> 00:26:12,880
called

00:26:09,200 --> 00:26:13,760
entity embed next slide and in here you

00:26:12,880 --> 00:26:15,440
can see

00:26:13,760 --> 00:26:17,200
in the transform method there are two

00:26:15,440 --> 00:26:19,440
regular expressions that are

00:26:17,200 --> 00:26:20,880
looking for matches right so in the

00:26:19,440 --> 00:26:23,120
first case we're looking for

00:26:20,880 --> 00:26:24,480
image shortcodes with ids in the second

00:26:23,120 --> 00:26:27,760
case we're looking for

00:26:24,480 --> 00:26:29,600
social media embeds and tags and so

00:26:27,760 --> 00:26:30,880
if there is a string match it will pass

00:26:29,600 --> 00:26:34,000
that as a parameter

00:26:30,880 --> 00:26:35,760
to further processing methods um convert

00:26:34,000 --> 00:26:38,080
image markup and convert media

00:26:35,760 --> 00:26:39,520
respectively and we'll take a look quick

00:26:38,080 --> 00:26:43,279
look inside of those

00:26:39,520 --> 00:26:45,039
next slide in convert

00:26:43,279 --> 00:26:46,320
image markup if there's a match with a

00:26:45,039 --> 00:26:48,799
short code with an id

00:26:46,320 --> 00:26:51,120
it will look do a lookup on that id see

00:26:48,799 --> 00:26:52,080
if that media entity exists and if it

00:26:51,120 --> 00:26:54,799
does

00:26:52,080 --> 00:26:56,480
extract its uuid by loading the media

00:26:54,799 --> 00:26:57,279
entity and then passing that as a

00:26:56,480 --> 00:26:59,919
parameter

00:26:57,279 --> 00:27:02,000
to the final method that will actually

00:26:59,919 --> 00:27:05,600
generate the embed markup

00:27:02,000 --> 00:27:06,559
next slide and in the case of social

00:27:05,600 --> 00:27:09,360
media embeds

00:27:06,559 --> 00:27:11,360
um the convert media method will also

00:27:09,360 --> 00:27:12,080
run a regular expression to extract the

00:27:11,360 --> 00:27:14,400
url

00:27:12,080 --> 00:27:16,080
it'll check and to see if it exists and

00:27:14,400 --> 00:27:17,360
then determine the type of media

00:27:16,080 --> 00:27:19,279
the three that we're concerned about

00:27:17,360 --> 00:27:21,840
here are youtube instagram and twitter

00:27:19,279 --> 00:27:23,760
and if we have the url and type we can

00:27:21,840 --> 00:27:26,399
pass that to a final

00:27:23,760 --> 00:27:26,799
method to actually generate the media

00:27:26,399 --> 00:27:29,919
embed

00:27:26,799 --> 00:27:32,159
markup next slide and what

00:27:29,919 --> 00:27:33,360
those do ultimately is return the actual

00:27:32,159 --> 00:27:37,279
embedded entities

00:27:33,360 --> 00:27:40,960
so here we have the actual legit markup

00:27:37,279 --> 00:27:44,159
that we will replace in the article body

00:27:40,960 --> 00:27:47,279
of the former inline references with

00:27:44,159 --> 00:27:49,760
the html embed codes on

00:27:47,279 --> 00:27:52,000
the destination side for those article

00:27:49,760 --> 00:27:55,120
body values

00:27:52,000 --> 00:27:57,760
next sign so

00:27:55,120 --> 00:27:58,240
if the third contest i wanted to also

00:27:57,760 --> 00:28:00,480
mention

00:27:58,240 --> 00:28:01,600
in terms of dealing with migrating

00:28:00,480 --> 00:28:04,480
entities is maybe

00:28:01,600 --> 00:28:05,760
you have a site or an application and it

00:28:04,480 --> 00:28:07,840
feels a little bit heavy-handed

00:28:05,760 --> 00:28:09,279
to have to do all the um work with

00:28:07,840 --> 00:28:11,520
migration modules

00:28:09,279 --> 00:28:12,320
um i'm making a shameless plug to adam

00:28:11,520 --> 00:28:14,880
who wrote this

00:28:12,320 --> 00:28:17,120
article a while back about how to do

00:28:14,880 --> 00:28:18,799
that uh without migrate api

00:28:17,120 --> 00:28:20,399
um so i highly encourage anyone if this

00:28:18,799 --> 00:28:22,880
matches your use case to go

00:28:20,399 --> 00:28:23,919
excuse me check that out um it basically

00:28:22,880 --> 00:28:25,919
recommends using hook

00:28:23,919 --> 00:28:27,679
updates to generate media entities and

00:28:25,919 --> 00:28:29,600
then to delete those file fields

00:28:27,679 --> 00:28:32,080
subsequently

00:28:29,600 --> 00:28:32,080
next slide

00:28:33,360 --> 00:28:37,200
and then lastly i just wanted to touch

00:28:35,440 --> 00:28:39,760
on how to deal with

00:28:37,200 --> 00:28:40,640
multiple source fields this is a common

00:28:39,760 --> 00:28:42,640
scenario

00:28:40,640 --> 00:28:44,240
where when you're doing migrations it's

00:28:42,640 --> 00:28:46,559
often an opportunity

00:28:44,240 --> 00:28:47,440
to streamline and update your content

00:28:46,559 --> 00:28:49,679
model um

00:28:47,440 --> 00:28:51,039
consolidate objects that were maybe all

00:28:49,679 --> 00:28:52,960
over the place in the system

00:28:51,039 --> 00:28:55,520
in the legacy system and we want to

00:28:52,960 --> 00:28:58,000
bring those all into a single entity

00:28:55,520 --> 00:28:58,799
in the in the target system um so you

00:28:58,000 --> 00:29:00,240
can do that

00:28:58,799 --> 00:29:02,399
you just have to make sure you choose

00:29:00,240 --> 00:29:04,640
your primary source wisely

00:29:02,399 --> 00:29:05,600
and then you can write a custom source

00:29:04,640 --> 00:29:09,039
plugin

00:29:05,600 --> 00:29:11,440
to extract further data from other

00:29:09,039 --> 00:29:13,200
places in your data store and set those

00:29:11,440 --> 00:29:17,200
as additional source properties

00:29:13,200 --> 00:29:19,919
in the plugin next slide

00:29:17,200 --> 00:29:20,399
so here's an example of a custom source

00:29:19,919 --> 00:29:23,440
plugin

00:29:20,399 --> 00:29:26,240
of an article where inside the prepare

00:29:23,440 --> 00:29:26,880
row method you can run multiple queries

00:29:26,240 --> 00:29:29,600
to set

00:29:26,880 --> 00:29:31,600
your source properties so in this case

00:29:29,600 --> 00:29:33,200
we want to find other taxonomy terms

00:29:31,600 --> 00:29:35,600
that might be added to this article

00:29:33,200 --> 00:29:37,360
or other attachments we also want to set

00:29:35,600 --> 00:29:38,640
the author and set the meta tags for

00:29:37,360 --> 00:29:40,320
this article

00:29:38,640 --> 00:29:42,640
so you can see inside here in the on the

00:29:40,320 --> 00:29:44,720
road there's a set source property

00:29:42,640 --> 00:29:47,120
that allows you to do this and so you

00:29:44,720 --> 00:29:49,360
can set the actual property and then

00:29:47,120 --> 00:29:51,200
derive that value from whatever the

00:29:49,360 --> 00:29:53,360
results of your query are

00:29:51,200 --> 00:29:55,679
and now that will be available in your

00:29:53,360 --> 00:29:58,559
migration yaml file

00:29:55,679 --> 00:30:00,480
next sign um here's another example um

00:29:58,559 --> 00:30:02,159
this is again another

00:30:00,480 --> 00:30:04,240
from an example from an article that

00:30:02,159 --> 00:30:07,440
lullabot wrote about merging entities

00:30:04,240 --> 00:30:10,000
um in this instance the context for this

00:30:07,440 --> 00:30:13,200
is that it's overriding a custom

00:30:10,000 --> 00:30:16,080
or the default taxonomy plugin and

00:30:13,200 --> 00:30:16,880
merging another entity's fields with it

00:30:16,080 --> 00:30:19,840
so

00:30:16,880 --> 00:30:21,360
running a query joining on the term id

00:30:19,840 --> 00:30:24,720
and if there's a match

00:30:21,360 --> 00:30:26,960
it will take the fields of the

00:30:24,720 --> 00:30:29,679
entity which is not being migrated it's

00:30:26,960 --> 00:30:31,600
being added to the term migration

00:30:29,679 --> 00:30:33,200
and it will set the source property of

00:30:31,600 --> 00:30:36,240
that entity's fields

00:30:33,200 --> 00:30:36,559
and with this get fields values property

00:30:36,240 --> 00:30:40,000
or

00:30:36,559 --> 00:30:40,799
method um apply the values for that as

00:30:40,000 --> 00:30:42,640
well

00:30:40,799 --> 00:30:43,840
so i know that was a lot of information

00:30:42,640 --> 00:30:46,240
for a short

00:30:43,840 --> 00:30:48,159
period amount of time but that's uh you

00:30:46,240 --> 00:30:50,640
know some approaches that we can take

00:30:48,159 --> 00:30:51,279
for doing dealing with complex data

00:30:50,640 --> 00:30:53,840
structures

00:30:51,279 --> 00:30:55,360
and requirements and with that i'll pass

00:30:53,840 --> 00:30:57,840
it over to adam who's going to talk

00:30:55,360 --> 00:31:00,399
about how to debug and troubleshoot

00:30:57,840 --> 00:31:03,039
migrations effectively

00:31:00,399 --> 00:31:05,039
thanks claire uh yeah so now that we've

00:31:03,039 --> 00:31:07,679
written our migrations invariably

00:31:05,039 --> 00:31:09,919
there will be problems right um so we're

00:31:07,679 --> 00:31:11,919
going to talk about some tricks to

00:31:09,919 --> 00:31:14,320
get them to run faster and understand

00:31:11,919 --> 00:31:16,399
what's happening

00:31:14,320 --> 00:31:18,240
so first there's the there's this cool

00:31:16,399 --> 00:31:20,799
migrate status module

00:31:18,240 --> 00:31:22,559
many times in your you know code you

00:31:20,799 --> 00:31:23,919
have entity hooks

00:31:22,559 --> 00:31:26,320
and you might not want all those to run

00:31:23,919 --> 00:31:26,720
during a migration for example you might

00:31:26,320 --> 00:31:29,200
be

00:31:26,720 --> 00:31:30,640
generating that field values from other

00:31:29,200 --> 00:31:32,159
field values and you might not need to

00:31:30,640 --> 00:31:33,679
do that because the migration does that

00:31:32,159 --> 00:31:35,519
for you

00:31:33,679 --> 00:31:37,519
or maybe you're making an api call on

00:31:35,519 --> 00:31:38,080
entity save and you don't want to make

00:31:37,519 --> 00:31:40,720
you know

00:31:38,080 --> 00:31:42,320
a couple thousand api calls within a

00:31:40,720 --> 00:31:45,440
couple seconds and blow up your

00:31:42,320 --> 00:31:47,279
api limit so this is a clean way that is

00:31:45,440 --> 00:31:50,240
detected the migration is running

00:31:47,279 --> 00:31:53,840
and adjust to that in your entity hooks

00:31:50,240 --> 00:31:56,480
so nice simple utility module

00:31:53,840 --> 00:31:56,960
uh limits this is another great tool

00:31:56,480 --> 00:31:59,440
when you're

00:31:56,960 --> 00:32:00,000
writing a migration you might only need

00:31:59,440 --> 00:32:02,640
to do one

00:32:00,000 --> 00:32:04,080
or two to prove out your theory to see

00:32:02,640 --> 00:32:06,480
if your migration is going to work and

00:32:04,080 --> 00:32:08,480
that's great you can use this flag

00:32:06,480 --> 00:32:10,480
but it should be known that this does

00:32:08,480 --> 00:32:12,720
not actually apply a limit

00:32:10,480 --> 00:32:14,080
uh to your source query so if you're

00:32:12,720 --> 00:32:16,559
using sql

00:32:14,080 --> 00:32:17,760
there is no limit on that query it's

00:32:16,559 --> 00:32:20,480
still

00:32:17,760 --> 00:32:21,279
grabbing all those rows and it still

00:32:20,480 --> 00:32:24,080
calls prepare

00:32:21,279 --> 00:32:25,279
row on every single source record so if

00:32:24,080 --> 00:32:27,039
you have uh

00:32:25,279 --> 00:32:28,960
subsequent queries in prepare row like

00:32:27,039 --> 00:32:30,480
claire was just talking about

00:32:28,960 --> 00:32:32,480
those are all still going to run even if

00:32:30,480 --> 00:32:35,120
you have limit one

00:32:32,480 --> 00:32:37,039
so that can quickly cause it to slow

00:32:35,120 --> 00:32:38,640
down or in some cases just

00:32:37,039 --> 00:32:40,880
cause the migrate the query to not even

00:32:38,640 --> 00:32:43,039
be runnable as it's just simply trying

00:32:40,880 --> 00:32:46,480
to do too much

00:32:43,039 --> 00:32:49,120
so how do you get around that um

00:32:46,480 --> 00:32:50,640
if you're doing a sql migration um

00:32:49,120 --> 00:32:51,760
hidden in the source class

00:32:50,640 --> 00:32:54,480
not really hidden because that's the

00:32:51,760 --> 00:32:58,720
beauty of open source you can go see

00:32:54,480 --> 00:33:00,320
exactly how it's working and you know

00:32:58,720 --> 00:33:02,159
understand what's going on and also you

00:33:00,320 --> 00:33:04,799
know make changes to it too

00:33:02,159 --> 00:33:06,720
um submit backs and patches so you can

00:33:04,799 --> 00:33:08,720
adjust your batch size

00:33:06,720 --> 00:33:11,519
whether it's your source plugin

00:33:08,720 --> 00:33:13,360
definition and your migration yaml file

00:33:11,519 --> 00:33:14,720
or just setting it as a property in your

00:33:13,360 --> 00:33:17,440
source plugin class

00:33:14,720 --> 00:33:19,440
if you're using a custom plugin so you

00:33:17,440 --> 00:33:22,159
can set this to whatever value you want

00:33:19,440 --> 00:33:22,880
and then it puts a limit on your query

00:33:22,159 --> 00:33:24,960
and

00:33:22,880 --> 00:33:27,360
allows it to run or run a lot more

00:33:24,960 --> 00:33:27,360
quickly

00:33:27,840 --> 00:33:31,440
uh some other options there's all sorts

00:33:30,320 --> 00:33:34,720
of ways to define

00:33:31,440 --> 00:33:38,399
how joins are done uh in the

00:33:34,720 --> 00:33:39,519
query set your database target

00:33:38,399 --> 00:33:42,240
there's all sorts of stuff you can do

00:33:39,519 --> 00:33:43,760
here it's just cool to go exploring

00:33:42,240 --> 00:33:45,679
in the source classes of the migration

00:33:43,760 --> 00:33:47,120
module and understand

00:33:45,679 --> 00:33:48,799
what it does and what all your options

00:33:47,120 --> 00:33:50,399
are is sometimes it's

00:33:48,799 --> 00:33:52,640
a bit opaque when you're just in a yaml

00:33:50,399 --> 00:33:53,279
file trying to figure out what to put

00:33:52,640 --> 00:33:56,720
there

00:33:53,279 --> 00:33:56,720
and looking at examples online

00:33:58,000 --> 00:34:01,360
so next migration speed i'm sure we've

00:34:00,080 --> 00:34:03,840
all written migrations

00:34:01,360 --> 00:34:05,360
and tested them with a few items and

00:34:03,840 --> 00:34:07,760
thought we were good to go

00:34:05,360 --> 00:34:08,639
and then we try to run the whole thing

00:34:07,760 --> 00:34:10,399
and

00:34:08,639 --> 00:34:11,760
realize things are not working as

00:34:10,399 --> 00:34:14,879
intended

00:34:11,760 --> 00:34:16,720
um and i've found that the first when

00:34:14,879 --> 00:34:18,000
you start migration items go a lot more

00:34:16,720 --> 00:34:20,480
quickly

00:34:18,000 --> 00:34:22,320
and then as it keeps going um the speed

00:34:20,480 --> 00:34:24,720
will slow down considerably

00:34:22,320 --> 00:34:25,760
and eventually sometimes they'll crash

00:34:24,720 --> 00:34:27,839
and

00:34:25,760 --> 00:34:29,599
doesn't fully reclaim the memory usage

00:34:27,839 --> 00:34:31,280
like it's claiming to do

00:34:29,599 --> 00:34:32,800
and there are issues on drupal that org

00:34:31,280 --> 00:34:33,520
about this but i don't believe they're

00:34:32,800 --> 00:34:38,800
solved yet

00:34:33,520 --> 00:34:38,800
so in the interim we have some tricks

00:34:38,960 --> 00:34:42,560
um so it should be known that i

00:34:41,520 --> 00:34:44,800
originally found this

00:34:42,560 --> 00:34:45,919
trick from a media current article and

00:34:44,800 --> 00:34:48,240
then i used it

00:34:45,919 --> 00:34:49,679
and wrote my own article and then

00:34:48,240 --> 00:34:50,720
someone else even took that and ran with

00:34:49,679 --> 00:34:53,760
it even more

00:34:50,720 --> 00:34:56,879
um so the trick is you

00:34:53,760 --> 00:34:59,200
run migrate import with that limit flag

00:34:56,879 --> 00:35:01,440
and possibly if with the batch size too

00:34:59,200 --> 00:35:03,040
you can combine both of those together

00:35:01,440 --> 00:35:05,599
and then you just keep calling it in a

00:35:03,040 --> 00:35:06,400
loop and a shell script with a low limit

00:35:05,599 --> 00:35:07,760
value

00:35:06,400 --> 00:35:09,599
and that keeps your average item

00:35:07,760 --> 00:35:11,839
processing time much lower

00:35:09,599 --> 00:35:14,000
and allows the migration to finish

00:35:11,839 --> 00:35:16,400
without having memory issues

00:35:14,000 --> 00:35:17,359
so this just that's linked here kind of

00:35:16,400 --> 00:35:19,920
well it shows

00:35:17,359 --> 00:35:21,359
the script that we used um it's not

00:35:19,920 --> 00:35:22,800
ideal because you know it's a brittle

00:35:21,359 --> 00:35:24,800
shell script but

00:35:22,800 --> 00:35:25,839
um sometimes that's what it takes to get

00:35:24,800 --> 00:35:27,680
the migration done

00:35:25,839 --> 00:35:29,520
and it's also nice because you can have

00:35:27,680 --> 00:35:31,359
the migration

00:35:29,520 --> 00:35:32,800
sequence and ordering like a soph was

00:35:31,359 --> 00:35:35,119
talking about

00:35:32,800 --> 00:35:37,119
committed in a shell script in your repo

00:35:35,119 --> 00:35:40,640
so there are benefits to this too

00:35:37,119 --> 00:35:40,640
even if you don't do a loop

00:35:41,359 --> 00:35:46,880
so this is the subs the guy that uh

00:35:44,560 --> 00:35:48,320
took up what i this script idea and

00:35:46,880 --> 00:35:50,880
expanded upon it even more

00:35:48,320 --> 00:35:51,920
um he wrote migrate import batch that

00:35:50,880 --> 00:35:53,599
does all that

00:35:51,920 --> 00:35:55,040
magic of that shell script and combines

00:35:53,599 --> 00:35:56,000
it hidden into this command which is

00:35:55,040 --> 00:35:58,160
really nice

00:35:56,000 --> 00:36:00,880
um it does seem to only work with csv

00:35:58,160 --> 00:36:03,359
files as he actually splits out the file

00:36:00,880 --> 00:36:04,880
and makes separate ones um but this is

00:36:03,359 --> 00:36:06,640
pretty cool that you can just

00:36:04,880 --> 00:36:08,800
pass it this and then in the background

00:36:06,640 --> 00:36:10,880
it does everything it needs to do

00:36:08,800 --> 00:36:13,839
to run the migration without having

00:36:10,880 --> 00:36:13,839
memory issues

00:36:15,440 --> 00:36:21,520
uh migrate devel this is a fantastic

00:36:18,480 --> 00:36:23,440
module that actually worked a long time

00:36:21,520 --> 00:36:26,000
ago and only recently began working with

00:36:23,440 --> 00:36:27,520
josh 9 as of june 12th

00:36:26,000 --> 00:36:29,040
the patch just got committed so that's

00:36:27,520 --> 00:36:30,720
great um

00:36:29,040 --> 00:36:32,400
you can have the migrate debug and

00:36:30,720 --> 00:36:34,800
migrate debug pre

00:36:32,400 --> 00:36:36,880
um to you pass that to the migrate

00:36:34,800 --> 00:36:39,119
import and it spits out

00:36:36,880 --> 00:36:41,119
exactly what's coming in and what's

00:36:39,119 --> 00:36:42,560
going out and it's a great tool to help

00:36:41,119 --> 00:36:44,800
you understand

00:36:42,560 --> 00:36:46,400
um what's happening as sometimes it can

00:36:44,800 --> 00:36:48,240
be very opaque

00:36:46,400 --> 00:36:49,760
you know you might run a migration with

00:36:48,240 --> 00:36:51,920
10 items and everything works

00:36:49,760 --> 00:36:53,520
and then you run it for 50 and you run

00:36:51,920 --> 00:36:54,800
into some bad data

00:36:53,520 --> 00:36:57,040
and you're like well why didn't this

00:36:54,800 --> 00:36:58,640
work it was working on the other 10.

00:36:57,040 --> 00:37:00,160
so this helps you see what's coming in

00:36:58,640 --> 00:37:03,040
what's going out

00:37:00,160 --> 00:37:04,800
and you know adjust your processing to

00:37:03,040 --> 00:37:07,839
be as robust as needed to

00:37:04,800 --> 00:37:08,560
solve everything uh you know this is

00:37:07,839 --> 00:37:10,960
also when you can

00:37:08,560 --> 00:37:12,160
easily see those time stamps and dates

00:37:10,960 --> 00:37:14,640
and get those all

00:37:12,160 --> 00:37:16,880
um cleared up like a sock was talking

00:37:14,640 --> 00:37:16,880
about

00:37:17,200 --> 00:37:20,720
uh and there's all sorts of great uh

00:37:19,680 --> 00:37:22,480
resources on this

00:37:20,720 --> 00:37:23,839
and there's stuff on drupal.org there's

00:37:22,480 --> 00:37:26,640
stuff for the talks about

00:37:23,839 --> 00:37:27,599
uh how to use the callback plugin with

00:37:26,640 --> 00:37:29,599
vardump

00:37:27,599 --> 00:37:31,359
um kind of the software was also talking

00:37:29,599 --> 00:37:32,560
about using that the callback plugin

00:37:31,359 --> 00:37:35,040
it's a simple one to just

00:37:32,560 --> 00:37:36,400
call any php function so of course you

00:37:35,040 --> 00:37:39,760
can call vardump

00:37:36,400 --> 00:37:40,400
um and then you know you can use xdebug

00:37:39,760 --> 00:37:41,760
with some of

00:37:40,400 --> 00:37:43,920
some of these posts talk you through

00:37:41,760 --> 00:37:45,119
that um all sorts of tips and tricks

00:37:43,920 --> 00:37:46,720
that encourage you guys to check out

00:37:45,119 --> 00:37:48,160
some of these articles

00:37:46,720 --> 00:37:51,200
as there's just you know too much to

00:37:48,160 --> 00:37:53,680
cover in this short time

00:37:51,200 --> 00:37:54,400
so with that i will open up the floor to

00:37:53,680 --> 00:38:05,839
questions

00:37:54,400 --> 00:38:05,839
anyone have any questions

00:38:08,640 --> 00:38:13,040
what's still missing from the tooling

00:38:11,040 --> 00:38:15,359
like what are the

00:38:13,040 --> 00:38:15,359
um

00:38:16,160 --> 00:38:24,480
what sort of items or types of problems

00:38:20,800 --> 00:38:24,480
do you still regularly run into

00:38:24,960 --> 00:38:30,320
um i think

00:38:28,320 --> 00:38:33,839
a good way to solve the memory issues

00:38:30,320 --> 00:38:33,839
without resorting to custom

00:38:33,920 --> 00:38:37,839
you know using this these limits and

00:38:36,400 --> 00:38:39,760
kind of hacky things

00:38:37,839 --> 00:38:41,200
um for like a sequel based migration

00:38:39,760 --> 00:38:44,800
would be great

00:38:41,200 --> 00:38:47,839
um clarissa any

00:38:44,800 --> 00:38:47,839
thoughts from you on that

00:38:51,280 --> 00:38:54,400
in terms of the tooling for debugging is

00:38:54,079 --> 00:38:56,640
that

00:38:54,400 --> 00:38:58,400
but just in general what what could make

00:38:56,640 --> 00:38:59,520
i think mark's question is generic just

00:38:58,400 --> 00:39:03,040
anything that would

00:38:59,520 --> 00:39:05,599
make the whole migration process better

00:39:03,040 --> 00:39:06,400
i mean again there's a lot out there in

00:39:05,599 --> 00:39:08,880
contrib

00:39:06,400 --> 00:39:09,599
um that's making a lot of headway you

00:39:08,880 --> 00:39:12,160
know

00:39:09,599 --> 00:39:13,760
to automate some of these processes um

00:39:12,160 --> 00:39:14,560
like in the specifically with the media

00:39:13,760 --> 00:39:15,920
entities

00:39:14,560 --> 00:39:17,920
you know some of these modules that are

00:39:15,920 --> 00:39:20,960
coming out like only in the

00:39:17,920 --> 00:39:24,000
earlier this year or last year um

00:39:20,960 --> 00:39:24,720
to uh try to make it more efficient so

00:39:24,000 --> 00:39:28,079
that you're not

00:39:24,720 --> 00:39:29,680
writing migration scripts from um and i

00:39:28,079 --> 00:39:31,599
think all of them

00:39:29,680 --> 00:39:33,040
um you know it's hard to cover every use

00:39:31,599 --> 00:39:36,800
case right but for

00:39:33,040 --> 00:39:38,880
uh for stuff where you know you have

00:39:36,800 --> 00:39:39,920
straightforward entities that need to

00:39:38,880 --> 00:39:43,200
come over

00:39:39,920 --> 00:39:45,520
um but that are not handled by um either

00:39:43,200 --> 00:39:46,560
migrate upgrade or some of these other

00:39:45,520 --> 00:39:48,480
ones i think there's just

00:39:46,560 --> 00:39:50,000
a lot out there that are trying trying

00:39:48,480 --> 00:39:53,119
to solve this problem

00:39:50,000 --> 00:39:56,400
um but i think again like every

00:39:53,119 --> 00:39:57,760
migration is custom so there's there's

00:39:56,400 --> 00:39:59,839
always going to be things that you might

00:39:57,760 --> 00:40:00,480
have to write custom code with so i

00:39:59,839 --> 00:40:02,000
think

00:40:00,480 --> 00:40:04,079
the tools are getting better and i think

00:40:02,000 --> 00:40:06,000
there's more coming out every day

00:40:04,079 --> 00:40:07,119
um to try to automate some of the stuff

00:40:06,000 --> 00:40:10,000
um and

00:40:07,119 --> 00:40:10,960
they're looking really promising um but

00:40:10,000 --> 00:40:13,280
i'm trying to think of like

00:40:10,960 --> 00:40:14,000
ones off the top of my head that you

00:40:13,280 --> 00:40:16,560
know

00:40:14,000 --> 00:40:17,599
sort of cover most things but then you

00:40:16,560 --> 00:40:20,240
know

00:40:17,599 --> 00:40:21,839
maybe don't cover some ed cases i think

00:40:20,240 --> 00:40:24,880
about that for a minute

00:40:21,839 --> 00:40:26,319
agreed yeah i've been mean i did most of

00:40:24,880 --> 00:40:28,000
the migrations i did a couple of years

00:40:26,319 --> 00:40:30,000
ago and i know just recently there's

00:40:28,000 --> 00:40:33,040
i've seen so many cool modules that

00:40:30,000 --> 00:40:35,760
make very difficult things

00:40:33,040 --> 00:40:37,680
a lot easier they wrote some of the

00:40:35,760 --> 00:40:38,960
plugins that i wrote

00:40:37,680 --> 00:40:41,200
but they you know took them to the next

00:40:38,960 --> 00:40:43,200
level and expanded on them um

00:40:41,200 --> 00:40:44,480
so it's cool to you know if you're

00:40:43,200 --> 00:40:45,520
struggling with something i'd encourage

00:40:44,480 --> 00:40:47,440
everyone to just

00:40:45,520 --> 00:40:49,040
look uh look out at contrib because

00:40:47,440 --> 00:40:50,079
there's some really great tools out

00:40:49,040 --> 00:40:53,839
there to

00:40:50,079 --> 00:40:53,839
aid in the migration process

00:40:54,560 --> 00:41:01,520
with regard to the limit command not

00:40:58,400 --> 00:41:04,560
actually limiting things on the source

00:41:01,520 --> 00:41:06,400
um that's been the case for a long time

00:41:04,560 --> 00:41:08,640
i feel like is that would you consider

00:41:06,400 --> 00:41:12,079
that a bug or a feature at this point

00:41:08,640 --> 00:41:15,280
or just something that's

00:41:12,079 --> 00:41:16,079
not able to be resolved it's a good

00:41:15,280 --> 00:41:19,599
question

00:41:16,079 --> 00:41:21,040
um i don't know i'm guessing there's a

00:41:19,599 --> 00:41:23,200
good reason

00:41:21,040 --> 00:41:24,160
maybe that it is the way it is because

00:41:23,200 --> 00:41:27,520
sometimes you

00:41:24,160 --> 00:41:31,280
do need to sometimes you might need to

00:41:27,520 --> 00:41:34,560
gather all the source records to

00:41:31,280 --> 00:41:36,079
uh do do something i can't try to

00:41:34,560 --> 00:41:37,440
remember the use case i had for this one

00:41:36,079 --> 00:41:40,640
time but

00:41:37,440 --> 00:41:43,680
you had to like get everything loaded up

00:41:40,640 --> 00:41:45,359
to do and then

00:41:43,680 --> 00:41:46,880
check things against each other for like

00:41:45,359 --> 00:41:48,640
a remapping of

00:41:46,880 --> 00:41:50,240
taxonomy terms or something i did into

00:41:48,640 --> 00:41:52,960
migration once so

00:41:50,240 --> 00:41:53,599
um i don't know would it be that if

00:41:52,960 --> 00:41:56,640
you're like

00:41:53,599 --> 00:42:00,720
not importing an entire set

00:41:56,640 --> 00:42:01,440
and you need to filter somehow you can't

00:42:00,720 --> 00:42:04,880
just grab

00:42:01,440 --> 00:42:07,680
10 if maybe the result out of those

00:42:04,880 --> 00:42:10,480
10 would be zero like you have to grab

00:42:07,680 --> 00:42:13,440
the whole thing and then

00:42:10,480 --> 00:42:15,359
prepare the rows i'm guessing maybe it's

00:42:13,440 --> 00:42:16,880
something related to that

00:42:15,359 --> 00:42:19,839
so yeah i mean just as long as you know

00:42:16,880 --> 00:42:20,880
uh you're aware of it i think that's the

00:42:19,839 --> 00:42:22,720
you know the important thing and you

00:42:20,880 --> 00:42:23,839
know if you want it you could always

00:42:22,720 --> 00:42:27,280
write you know your own

00:42:23,839 --> 00:42:28,319
uh sql-based plug-in that reacted to

00:42:27,280 --> 00:42:30,800
that flag differently

00:42:28,319 --> 00:42:31,599
and you know did respect it in some way

00:42:30,800 --> 00:42:34,319
so

00:42:31,599 --> 00:42:35,359
that's the beauty of open source so

00:42:34,319 --> 00:42:36,240
sounds like we're gonna say it's a

00:42:35,359 --> 00:42:38,160
feature

00:42:36,240 --> 00:42:39,359
yeah that's what i'm sticking to because

00:42:38,160 --> 00:42:45,839
i don't know why the first you know

00:42:39,359 --> 00:42:45,839
whoever built it did it that way so

00:42:47,440 --> 00:42:50,400
any other questions

00:42:53,680 --> 00:42:59,839
clarisophany last words of wisdom

00:43:02,560 --> 00:43:05,839
all right you'll be able to will you be

00:43:04,400 --> 00:43:08,400
able to add

00:43:05,839 --> 00:43:10,000
the links that you shared uh can we add

00:43:08,400 --> 00:43:11,040
those to the video description for folks

00:43:10,000 --> 00:43:13,200
that might

00:43:11,040 --> 00:43:15,520
see this later sure we can get those

00:43:13,200 --> 00:43:15,520
added

00:43:16,880 --> 00:43:20,319
all right well thank you so much for

00:43:18,240 --> 00:43:21,599
joining us um we'll

00:43:20,319 --> 00:43:23,680
get all these links added to the video

00:43:21,599 --> 00:43:27,839
description and hopefully this helps you

00:43:23,680 --> 00:43:27,839
in your next migration

00:43:28,000 --> 00:43:35,200

YouTube URL: https://www.youtube.com/watch?v=UWrCQHPR-Nc


