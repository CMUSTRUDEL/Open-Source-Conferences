Title: Altering, extending, and enhancing Drupal   DrupalCon Global 2020
Publication date: 2020-08-25
Playlist: DrupalCon Global 2020
Description: 
	Drupal's appeal lies in its flexibility. Knowing what systems are available to alter, extend, and enhance is critical.
Captions: 
	00:00:00,080 --> 00:00:07,040
i'm going to go ahead and get started

00:00:03,439 --> 00:00:10,639
this presentation is about the ways that

00:00:07,040 --> 00:00:12,880
module developers can write code which

00:00:10,639 --> 00:00:15,360
alters the way that drupal cores

00:00:12,880 --> 00:00:18,080
functionality or any contributed module

00:00:15,360 --> 00:00:20,000
works i'm going to talk about the

00:00:18,080 --> 00:00:22,160
various different patterns that we in

00:00:20,000 --> 00:00:24,400
the community use in order to ensure

00:00:22,160 --> 00:00:27,279
that drupal remains

00:00:24,400 --> 00:00:28,480
easy to extend and super flexible

00:00:27,279 --> 00:00:31,760
including plugins

00:00:28,480 --> 00:00:32,880
services events and hooks my goal is to

00:00:31,760 --> 00:00:34,719
give you

00:00:32,880 --> 00:00:36,800
some example use cases for each of these

00:00:34,719 --> 00:00:38,960
so to explain what each one is

00:00:36,800 --> 00:00:40,559
show you some examples of what core is

00:00:38,960 --> 00:00:42,399
doing with those currently

00:00:40,559 --> 00:00:44,640
give you a recipe for how to implement

00:00:42,399 --> 00:00:46,640
these patterns and then links to a bunch

00:00:44,640 --> 00:00:48,160
of additional resources

00:00:46,640 --> 00:00:50,160
it's a little bit too much to try to get

00:00:48,160 --> 00:00:52,239
into the technical details about each of

00:00:50,160 --> 00:00:55,440
these in a 45-minute presentation

00:00:52,239 --> 00:00:57,039
and so what i'm hoping is that when you

00:00:55,440 --> 00:00:58,960
come away from this you'll have a better

00:00:57,039 --> 00:01:00,719
understanding of what you should google

00:00:58,960 --> 00:01:02,239
for or what you should look for on stack

00:01:00,719 --> 00:01:04,000
exchange when you want to implement

00:01:02,239 --> 00:01:07,280
these patterns on your own

00:01:04,000 --> 00:01:10,000
i will also say that if you're already

00:01:07,280 --> 00:01:11,439
a comfortable drupal module developer

00:01:10,000 --> 00:01:12,240
you've written a handful of modules for

00:01:11,439 --> 00:01:14,080
drupal 8.

00:01:12,240 --> 00:01:16,320
you've implemented things like plugins

00:01:14,080 --> 00:01:17,600
and events before there's probably not a

00:01:16,320 --> 00:01:22,400
lot of new

00:01:17,600 --> 00:01:25,439
in here but maybe so

00:01:22,400 --> 00:01:26,799
uh my name is joe uh joe schindler i'm

00:01:25,439 --> 00:01:29,759
eoj the brave

00:01:26,799 --> 00:01:30,479
on drupal.org and in drupal slack and on

00:01:29,759 --> 00:01:32,079
twitter

00:01:30,479 --> 00:01:33,520
um you can reach out to me in any of

00:01:32,079 --> 00:01:36,079
those places if you have

00:01:33,520 --> 00:01:39,360
questions about any of this content and

00:01:36,079 --> 00:01:41,920
i work for drupalize.me

00:01:39,360 --> 00:01:43,520
so backing up a little bit before i dive

00:01:41,920 --> 00:01:45,520
into this too much

00:01:43,520 --> 00:01:46,799
um in the drupal community at least for

00:01:45,520 --> 00:01:47,360
as long as i've been involved there's

00:01:46,799 --> 00:01:50,240
been this

00:01:47,360 --> 00:01:51,280
motto which is don't hack core uh these

00:01:50,240 --> 00:01:54,399
three words to me

00:01:51,280 --> 00:01:56,960
represent this idea that as a module

00:01:54,399 --> 00:01:58,880
developer as someone who writes php code

00:01:56,960 --> 00:02:00,079
i should be able to alter drupal's

00:01:58,880 --> 00:02:02,399
functionality

00:02:00,079 --> 00:02:04,479
or make changes to the way the drupal

00:02:02,399 --> 00:02:07,520
works or add new functionality

00:02:04,479 --> 00:02:10,080
without ever having to modify the code

00:02:07,520 --> 00:02:11,520
that makes up drupal core

00:02:10,080 --> 00:02:13,760
and that's part of what makes drupal

00:02:11,520 --> 00:02:16,720
such a flexible and reusable and

00:02:13,760 --> 00:02:18,319
versatile system

00:02:16,720 --> 00:02:20,720
from another perspective what this means

00:02:18,319 --> 00:02:22,400
is that my drupal core code

00:02:20,720 --> 00:02:23,760
is the same drupal core code that

00:02:22,400 --> 00:02:25,920
everyone else is using

00:02:23,760 --> 00:02:27,840
this makes it easier to do things like

00:02:25,920 --> 00:02:29,840
get support

00:02:27,840 --> 00:02:33,760
apply security updates when you update

00:02:29,840 --> 00:02:36,319
from drupal 9.0.0 to 9.0.1

00:02:33,760 --> 00:02:37,120
if you have not made any modifications

00:02:36,319 --> 00:02:39,120
to the code

00:02:37,120 --> 00:02:41,200
that update should be as easy as just

00:02:39,120 --> 00:02:43,120
dropping in the new set of code files

00:02:41,200 --> 00:02:45,440
on top of your existing ones and you're

00:02:43,120 --> 00:02:46,800
done if you've made changes to the code

00:02:45,440 --> 00:02:49,680
though you might have pat

00:02:46,800 --> 00:02:51,360
you need to reapply best case scenario

00:02:49,680 --> 00:02:52,640
worst case scenario you've made changes

00:02:51,360 --> 00:02:54,319
that you don't even remember

00:02:52,640 --> 00:02:56,000
and now you've updated and sometime in

00:02:54,319 --> 00:02:57,599
the future someone's like hey how come

00:02:56,000 --> 00:03:00,879
this thing that we fixed previously

00:02:57,599 --> 00:03:01,440
isn't working anymore um so the motto is

00:03:00,879 --> 00:03:04,800
then

00:03:01,440 --> 00:03:05,840
don't hack core and instead find ways

00:03:04,800 --> 00:03:07,760
that you can

00:03:05,840 --> 00:03:10,319
override its existing functionality or

00:03:07,760 --> 00:03:10,319
extend it

00:03:11,040 --> 00:03:14,720
in addition to core this also applies to

00:03:13,599 --> 00:03:16,720
modules from contrib

00:03:14,720 --> 00:03:18,239
or even modules that you write yourself

00:03:16,720 --> 00:03:20,000
you can take these patterns and you can

00:03:18,239 --> 00:03:20,640
implement them so that your custom

00:03:20,000 --> 00:03:22,800
modules

00:03:20,640 --> 00:03:23,840
can be extended by other people's code

00:03:22,800 --> 00:03:25,440
without them needing to make

00:03:23,840 --> 00:03:27,040
modifications to your module

00:03:25,440 --> 00:03:28,720
and this is super powerful you think

00:03:27,040 --> 00:03:31,680
about a module like for example

00:03:28,720 --> 00:03:32,000
um the voting api module which is a

00:03:31,680 --> 00:03:35,360
module

00:03:32,000 --> 00:03:37,120
that allows you to you know collect um

00:03:35,360 --> 00:03:38,799
votes from a person and then tally up

00:03:37,120 --> 00:03:41,840
those votes and display a

00:03:38,799 --> 00:03:42,799
demon a result of the counting of those

00:03:41,840 --> 00:03:45,280
votes

00:03:42,799 --> 00:03:46,080
and if you take a second to think about

00:03:45,280 --> 00:03:48,319
this you can imagine

00:03:46,080 --> 00:03:49,840
how a voting calculation you know a

00:03:48,319 --> 00:03:51,040
simple version of that would be a poll

00:03:49,840 --> 00:03:53,439
everybody gets one vote

00:03:51,040 --> 00:03:55,200
it counts for uh one point you add them

00:03:53,439 --> 00:03:56,480
all up together and that's the result

00:03:55,200 --> 00:03:58,720
you could also have different styles of

00:03:56,480 --> 00:04:00,640
voting like instant runoff voting

00:03:58,720 --> 00:04:02,159
or maybe you've got a unique case where

00:04:00,640 --> 00:04:03,599
you need to have votes weighted

00:04:02,159 --> 00:04:04,319
differently depending on whether it's

00:04:03,599 --> 00:04:07,360
cast on

00:04:04,319 --> 00:04:07,920
a weekend versus a weekday and if you

00:04:07,360 --> 00:04:10,480
were the

00:04:07,920 --> 00:04:11,680
maintainer of the voting api module

00:04:10,480 --> 00:04:13,200
people are going to come along and start

00:04:11,680 --> 00:04:15,280
asking you for all of this functionality

00:04:13,200 --> 00:04:17,519
that is super specific to their use case

00:04:15,280 --> 00:04:18,560
it kind of has no bearing on your

00:04:17,519 --> 00:04:20,400
use case and it's certainly not

00:04:18,560 --> 00:04:21,840
something that you want to maintain so

00:04:20,400 --> 00:04:22,560
instead of including all of those

00:04:21,840 --> 00:04:24,639
different

00:04:22,560 --> 00:04:26,080
tallying mechanisms into the logic of

00:04:24,639 --> 00:04:27,520
the voting api module

00:04:26,080 --> 00:04:29,280
you could implement some of these

00:04:27,520 --> 00:04:30,400
patterns in order to allow other people

00:04:29,280 --> 00:04:32,800
to write modules

00:04:30,400 --> 00:04:35,520
that extend yours and add new ways of

00:04:32,800 --> 00:04:37,520
tallying votes

00:04:35,520 --> 00:04:39,360
so that they can meet their application

00:04:37,520 --> 00:04:40,880
specific needs but still take advantage

00:04:39,360 --> 00:04:44,240
of all the other things that the voting

00:04:40,880 --> 00:04:44,240
api module provides

00:04:45,759 --> 00:04:49,840
i think this works because we have

00:04:48,000 --> 00:04:52,080
different established ways that we can

00:04:49,840 --> 00:04:54,560
create that we can write code that talks

00:04:52,080 --> 00:04:56,720
to or communicates with other code

00:04:54,560 --> 00:04:58,479
and in the context of drupal i think it

00:04:56,720 --> 00:04:59,360
helps to have some idea about what that

00:04:58,479 --> 00:05:01,680
communication

00:04:59,360 --> 00:05:02,400
might look like so you might for example

00:05:01,680 --> 00:05:06,080
want to write

00:05:02,400 --> 00:05:08,160
code that um responds to some kind of

00:05:06,080 --> 00:05:08,639
information or event that is taking

00:05:08,160 --> 00:05:10,560
place

00:05:08,639 --> 00:05:12,160
for example when a user logs into the

00:05:10,560 --> 00:05:15,199
site drupal will announce

00:05:12,160 --> 00:05:16,960
hey a user just logged in do you want to

00:05:15,199 --> 00:05:18,400
do anything about it because if you do

00:05:16,960 --> 00:05:20,800
this is your chance to do that so you

00:05:18,400 --> 00:05:23,120
can respond to an event

00:05:20,800 --> 00:05:25,520
you might have scenarios where drupal

00:05:23,120 --> 00:05:28,240
wants to ask a question

00:05:25,520 --> 00:05:28,960
uh someone just navigated to the blocks

00:05:28,240 --> 00:05:31,280
layout

00:05:28,960 --> 00:05:32,880
admin page drupal says hey i want to

00:05:31,280 --> 00:05:34,240
give this user a list of all the blocks

00:05:32,880 --> 00:05:36,000
that are available on the site

00:05:34,240 --> 00:05:38,000
does anybody have a block that they'd

00:05:36,000 --> 00:05:40,240
like me to add to that list before i

00:05:38,000 --> 00:05:41,280
display it for the user

00:05:40,240 --> 00:05:43,600
you might want to write code that

00:05:41,280 --> 00:05:45,919
provides entirely new functionality that

00:05:43,600 --> 00:05:47,759
doesn't currently exist in drupal

00:05:45,919 --> 00:05:49,360
and plug it into the system like for

00:05:47,759 --> 00:05:50,960
example voting api

00:05:49,360 --> 00:05:53,199
so that it can be used in your

00:05:50,960 --> 00:05:55,120
application and finally

00:05:53,199 --> 00:05:56,560
you are likely to run into scenarios

00:05:55,120 --> 00:05:58,800
where

00:05:56,560 --> 00:06:01,360
drupal's existing functionality doesn't

00:05:58,800 --> 00:06:02,880
work quite the way that you want it to

00:06:01,360 --> 00:06:04,880
and so you want to make a change like

00:06:02,880 --> 00:06:07,759
for example changing the

00:06:04,880 --> 00:06:08,880
criteria that are used when validating a

00:06:07,759 --> 00:06:10,880
user's password

00:06:08,880 --> 00:06:12,960
or even changing the fields that are

00:06:10,880 --> 00:06:13,440
available on the form that a user uses

00:06:12,960 --> 00:06:16,880
to log

00:06:13,440 --> 00:06:18,639
in these methods of communication don't

00:06:16,880 --> 00:06:19,120
necessarily map directly to the four

00:06:18,639 --> 00:06:21,600
different

00:06:19,120 --> 00:06:22,319
approaches plugins hooks services and

00:06:21,600 --> 00:06:24,000
events

00:06:22,319 --> 00:06:25,680
each of them there's a bit of overlap in

00:06:24,000 --> 00:06:27,919
each of them but i think it helps to

00:06:25,680 --> 00:06:29,199
sort of contextualize that and have a

00:06:27,919 --> 00:06:31,440
better understanding of

00:06:29,199 --> 00:06:34,160
how elements of code and why they're

00:06:31,440 --> 00:06:36,880
communicating with one another

00:06:34,160 --> 00:06:38,000
so if the mottos don't hack and you

00:06:36,880 --> 00:06:39,600
can't make changes to

00:06:38,000 --> 00:06:41,280
drupal course code what should you do

00:06:39,600 --> 00:06:43,120
instead

00:06:41,280 --> 00:06:44,800
the best practices that we've

00:06:43,120 --> 00:06:45,440
established thus far in the drupal

00:06:44,800 --> 00:06:48,639
community

00:06:45,440 --> 00:06:49,759
are using hooks writing plugins creating

00:06:48,639 --> 00:06:52,800
new services

00:06:49,759 --> 00:06:54,080
and subscribing to or dispatching events

00:06:52,800 --> 00:06:56,720
and i'm going to talk about each of

00:06:54,080 --> 00:06:58,560
these in quite a bit more depth

00:06:56,720 --> 00:07:00,479
i'm going to start with plugins because

00:06:58,560 --> 00:07:02,000
i think

00:07:00,479 --> 00:07:04,240
if you're new to drupal module

00:07:02,000 --> 00:07:06,720
development of these four systems

00:07:04,240 --> 00:07:08,639
plugins i think maybe hooks is the one

00:07:06,720 --> 00:07:10,240
that you're likely to encounter first

00:07:08,639 --> 00:07:13,039
uh and is probably the one that you'll

00:07:10,240 --> 00:07:16,080
also implement the most frequently

00:07:13,039 --> 00:07:19,199
so what are plugins um

00:07:16,080 --> 00:07:20,720
plugins are comment are a way of

00:07:19,199 --> 00:07:22,160
extending drupal's functionality

00:07:20,720 --> 00:07:23,680
they're commonly used in the scenario

00:07:22,160 --> 00:07:26,240
where drupal needs to provide an

00:07:23,680 --> 00:07:27,759
administrator with a list of things

00:07:26,240 --> 00:07:30,080
and then the administrator can choose

00:07:27,759 --> 00:07:33,280
one or more of those things to be active

00:07:30,080 --> 00:07:36,080
and then a configuration can figure out

00:07:33,280 --> 00:07:37,919
which of those to use in a given context

00:07:36,080 --> 00:07:39,199
think about something like blocks or

00:07:37,919 --> 00:07:41,039
field types

00:07:39,199 --> 00:07:42,960
modules need to be able to provide any

00:07:41,039 --> 00:07:44,400
number of new blocks

00:07:42,960 --> 00:07:47,199
they all have essentially the same

00:07:44,400 --> 00:07:48,720
functionality display a label

00:07:47,199 --> 00:07:50,400
display the contents of the block when

00:07:48,720 --> 00:07:52,639
it's viewed within a region

00:07:50,400 --> 00:07:54,720
but they might go about doing so in

00:07:52,639 --> 00:07:56,319
different ways

00:07:54,720 --> 00:07:58,000
in most cases plugins are going to be a

00:07:56,319 --> 00:07:59,759
combination of a php

00:07:58,000 --> 00:08:02,080
class that implements a specific

00:07:59,759 --> 00:08:04,080
interface and some metadata

00:08:02,080 --> 00:08:05,280
about the plugin instance usually in the

00:08:04,080 --> 00:08:08,160
form of a php

00:08:05,280 --> 00:08:08,800
annotation we'll go i'll talk a bit more

00:08:08,160 --> 00:08:10,960
about that

00:08:08,800 --> 00:08:12,800
there's also some instances of

00:08:10,960 --> 00:08:14,800
metadata-only plug-ins

00:08:12,800 --> 00:08:17,360
usually those are written in yaml and

00:08:14,800 --> 00:08:21,120
they can provide their full feature set

00:08:17,360 --> 00:08:21,840
by arguments so there's just a single

00:08:21,120 --> 00:08:24,160
class

00:08:21,840 --> 00:08:26,080
and when the plugin is instantiated by

00:08:24,160 --> 00:08:26,800
drupal it reads in the metadata from

00:08:26,080 --> 00:08:29,520
yaml

00:08:26,800 --> 00:08:30,400
passes it to the class constructor and

00:08:29,520 --> 00:08:32,000
the plugin

00:08:30,400 --> 00:08:33,440
class can figure out everything that it

00:08:32,000 --> 00:08:35,599
needs to do

00:08:33,440 --> 00:08:36,800
based on just some logic within the php

00:08:35,599 --> 00:08:38,560
itself and the

00:08:36,800 --> 00:08:39,839
arguments that you passed in and there's

00:08:38,560 --> 00:08:42,640
no need for you to write

00:08:39,839 --> 00:08:44,959
unique logic within a method um i have

00:08:42,640 --> 00:08:46,640
some examples of those as well

00:08:44,959 --> 00:08:48,720
i also think it's important to remember

00:08:46,640 --> 00:08:51,200
that in the plugins is

00:08:48,720 --> 00:08:53,040
it's more of a design pattern similar to

00:08:51,200 --> 00:08:54,160
how dependency injection might be a

00:08:53,040 --> 00:08:56,560
design pattern

00:08:54,160 --> 00:08:57,279
um plugins themselves are not a finished

00:08:56,560 --> 00:08:59,120
product

00:08:57,279 --> 00:09:01,040
there are lots of implementations of

00:08:59,120 --> 00:09:01,839
this design pattern throughout drupal

00:09:01,040 --> 00:09:03,600
core

00:09:01,839 --> 00:09:05,040
and each one of those has a little bit

00:09:03,600 --> 00:09:06,560
of nuance to it i'm going to try to

00:09:05,040 --> 00:09:09,279
cover the parts that are common to all

00:09:06,560 --> 00:09:11,920
of them

00:09:09,279 --> 00:09:12,800
examples of things in drupal core that

00:09:11,920 --> 00:09:15,519
are plugins

00:09:12,800 --> 00:09:16,480
i mentioned blocks already field

00:09:15,519 --> 00:09:19,839
formatters

00:09:16,480 --> 00:09:20,720
views row styles actions again anything

00:09:19,839 --> 00:09:22,640
where

00:09:20,720 --> 00:09:24,720
you could imagine drupal providing an

00:09:22,640 --> 00:09:26,160
administrator with a select list of

00:09:24,720 --> 00:09:28,080
options to choose from

00:09:26,160 --> 00:09:31,360
and then they can configure one or more

00:09:28,080 --> 00:09:31,360
of those to be active

00:09:31,839 --> 00:09:35,519
i sort of mentioned this already but

00:09:33,519 --> 00:09:37,200
blocks i think is the easiest example of

00:09:35,519 --> 00:09:38,480
a plug-in to conceptualize

00:09:37,200 --> 00:09:40,399
and if you were going to implement this

00:09:38,480 --> 00:09:42,640
from a purely code perspective you can

00:09:40,399 --> 00:09:46,000
imagine how blocks in drupal

00:09:42,640 --> 00:09:49,360
are classes and each block is

00:09:46,000 --> 00:09:51,680
an extension of a base class where

00:09:49,360 --> 00:09:52,480
most of the things are shared for

00:09:51,680 --> 00:09:54,640
example

00:09:52,480 --> 00:09:55,839
um or they have a lot of common features

00:09:54,640 --> 00:09:57,200
it has a label that you need to be able

00:09:55,839 --> 00:09:59,200
to display in the admin ui

00:09:57,200 --> 00:10:00,800
it has uh the need to display a

00:09:59,200 --> 00:10:02,399
configuration form the

00:10:00,800 --> 00:10:04,320
it needs to generate content but that

00:10:02,399 --> 00:10:04,959
content might be static content that you

00:10:04,320 --> 00:10:06,800
just

00:10:04,959 --> 00:10:08,640
type right into the code it might be

00:10:06,800 --> 00:10:10,320
querying the twitter api and pulling

00:10:08,640 --> 00:10:12,560
information in from there and displaying

00:10:10,320 --> 00:10:15,680
it on the page

00:10:12,560 --> 00:10:17,680
um and so

00:10:15,680 --> 00:10:18,720
that's kind of the classic example of a

00:10:17,680 --> 00:10:21,839
block

00:10:18,720 --> 00:10:21,839
or sorry of a plug-in

00:10:23,760 --> 00:10:27,519
the plug-in system can just consist of

00:10:26,160 --> 00:10:30,480
two different

00:10:27,519 --> 00:10:31,360
main components there are plug-in types

00:10:30,480 --> 00:10:34,079
and then plug-in

00:10:31,360 --> 00:10:36,399
instances themselves so blocks is an

00:10:34,079 --> 00:10:38,560
example of a plug-in

00:10:36,399 --> 00:10:40,079
plug-in type or often times referred to

00:10:38,560 --> 00:10:43,120
as the

00:10:40,079 --> 00:10:44,560
is the code that determines the sort of

00:10:43,120 --> 00:10:46,399
definition of the problem that you're

00:10:44,560 --> 00:10:47,920
trying to solve um

00:10:46,399 --> 00:10:50,320
what is a block and what should go in a

00:10:47,920 --> 00:10:52,079
block or how should

00:10:50,320 --> 00:10:53,360
the problem might be how should the text

00:10:52,079 --> 00:10:55,680
of this

00:10:53,360 --> 00:10:57,040
that's in this field be formatted in the

00:10:55,680 --> 00:11:00,480
case of a field formatter

00:10:57,040 --> 00:11:02,480
and so your plugin type determines the

00:11:00,480 --> 00:11:03,519
essentially the php interface that you

00:11:02,480 --> 00:11:05,440
need to implement

00:11:03,519 --> 00:11:07,839
in order to create an instance of that

00:11:05,440 --> 00:11:09,839
plug-in as well as

00:11:07,839 --> 00:11:11,360
where you place that code so that the

00:11:09,839 --> 00:11:14,240
system can discover it

00:11:11,360 --> 00:11:15,040
and how once it's discovered your code

00:11:14,240 --> 00:11:17,360
drupal can

00:11:15,040 --> 00:11:19,040
instantiate the code at the time that it

00:11:17,360 --> 00:11:20,560
needs it in order to make use of its

00:11:19,040 --> 00:11:22,240
functionality

00:11:20,560 --> 00:11:24,800
uh the next the second component of the

00:11:22,240 --> 00:11:27,279
plugin system are uh plugins themselves

00:11:24,800 --> 00:11:28,000
so and we use the word plugin or plugins

00:11:27,279 --> 00:11:30,800
to refer to

00:11:28,000 --> 00:11:32,000
an individual instance of a plugin type

00:11:30,800 --> 00:11:36,320
so you would have a block

00:11:32,000 --> 00:11:39,600
plugin like the system information block

00:11:36,320 --> 00:11:43,920
is a plugin that is of the block

00:11:39,600 --> 00:11:46,959
plugin type plugins are

00:11:43,920 --> 00:11:47,839
always defined as being of one specific

00:11:46,959 --> 00:11:49,839
type

00:11:47,839 --> 00:11:52,000
and they like i mentioned before are

00:11:49,839 --> 00:11:54,880
primarily php

00:11:52,000 --> 00:11:56,000
code and metadata the reason that we

00:11:54,880 --> 00:11:58,240
define some of the

00:11:56,000 --> 00:11:59,600
this metadata outside of the code is so

00:11:58,240 --> 00:12:01,600
that the plugin manager

00:11:59,600 --> 00:12:03,120
can do things like get a list of all of

00:12:01,600 --> 00:12:05,440
the different block types

00:12:03,120 --> 00:12:06,240
um and maybe their admin label and list

00:12:05,440 --> 00:12:09,440
them on the page

00:12:06,240 --> 00:12:10,000
without having to load all of the php

00:12:09,440 --> 00:12:12,160
classes

00:12:10,000 --> 00:12:13,600
into memory and instantiate a copy of

00:12:12,160 --> 00:12:15,760
each one of them just to know

00:12:13,600 --> 00:12:17,279
what the admin label is so we use

00:12:15,760 --> 00:12:20,639
metadata for some of those types of

00:12:17,279 --> 00:12:20,639
things in order to speed it up

00:12:21,519 --> 00:12:25,360
if you want to implement a plugin the

00:12:23,760 --> 00:12:27,120
recipe for doing so

00:12:25,360 --> 00:12:28,800
is you first need to figure out what

00:12:27,120 --> 00:12:30,000
type of plugin it is that you're going

00:12:28,800 --> 00:12:31,760
to implement so you might be

00:12:30,000 --> 00:12:34,880
implementing a block plugin

00:12:31,760 --> 00:12:36,480
or a field formatter plugin once you

00:12:34,880 --> 00:12:39,120
know what type of plugin you're

00:12:36,480 --> 00:12:40,639
implementing that's going to tell you

00:12:39,120 --> 00:12:42,399
a bunch of information that you need to

00:12:40,639 --> 00:12:44,480
complete the rest of these steps

00:12:42,399 --> 00:12:46,240
effectively where should you put the

00:12:44,480 --> 00:12:48,880
metadata for the plug-in

00:12:46,240 --> 00:12:50,959
and where should the code go so that

00:12:48,880 --> 00:12:53,760
drupal or really the plug-in manager can

00:12:50,959 --> 00:12:56,160
discover it when it wants to use it

00:12:53,760 --> 00:12:58,880
once you know the type of plugin

00:12:56,160 --> 00:13:00,399
assuming it's a php based plugin

00:12:58,880 --> 00:13:02,720
the next thing you're going to do is see

00:13:00,399 --> 00:13:05,519
if there's a base class provided by

00:13:02,720 --> 00:13:06,720
the plugin manager that you can extend

00:13:05,519 --> 00:13:09,600
and in most cases

00:13:06,720 --> 00:13:11,760
there is i believe that in drupal core

00:13:09,600 --> 00:13:14,160
for every plugin type there is a base

00:13:11,760 --> 00:13:15,839
class that you can extend

00:13:14,160 --> 00:13:17,360
now you don't technically have to extend

00:13:15,839 --> 00:13:18,639
the base class but in most cases you'll

00:13:17,360 --> 00:13:20,720
probably want to

00:13:18,639 --> 00:13:22,959
it helps reduce boilerplate code takes

00:13:20,720 --> 00:13:25,120
care of um common functionality that

00:13:22,959 --> 00:13:27,440
things like for example blocks all share

00:13:25,120 --> 00:13:29,040
that you could if you want to override

00:13:27,440 --> 00:13:29,519
but in most cases you probably don't

00:13:29,040 --> 00:13:31,920
need to

00:13:29,519 --> 00:13:33,200
you know maybe the block plug-in base

00:13:31,920 --> 00:13:36,480
class implements

00:13:33,200 --> 00:13:38,399
the code that is required to perform

00:13:36,480 --> 00:13:39,680
access control for who can and cannot

00:13:38,399 --> 00:13:42,560
view a block

00:13:39,680 --> 00:13:44,639
in 90 of use cases you're fine just

00:13:42,560 --> 00:13:46,480
saying i'll use whatever the default is

00:13:44,639 --> 00:13:47,920
but if you want to and you extend the

00:13:46,480 --> 00:13:49,839
base class you could override that

00:13:47,920 --> 00:13:52,000
method and change it for your specific

00:13:49,839 --> 00:13:54,079
use case

00:13:52,000 --> 00:13:55,680
and then finally once you know if

00:13:54,079 --> 00:13:56,800
there's a base class or where it is and

00:13:55,680 --> 00:14:00,480
you can extend it

00:13:56,800 --> 00:14:02,480
you just implement the php interface

00:14:00,480 --> 00:14:03,199
which is again determined by the plugin

00:14:02,480 --> 00:14:06,480
type

00:14:03,199 --> 00:14:08,560
and provide the metadata that the plugin

00:14:06,480 --> 00:14:10,320
type is requesting

00:14:08,560 --> 00:14:12,079
i can show some examples of what that

00:14:10,320 --> 00:14:15,680
looks like

00:14:12,079 --> 00:14:16,639
this is an example of a php based plugin

00:14:15,680 --> 00:14:18,639
so this is an

00:14:16,639 --> 00:14:20,240
implementation of a hypothetical plugin

00:14:18,639 --> 00:14:22,880
for ice cream flavors

00:14:20,240 --> 00:14:23,839
um there's a discovery component of it

00:14:22,880 --> 00:14:26,079
so up at the top

00:14:23,839 --> 00:14:27,440
the php name space here is how the

00:14:26,079 --> 00:14:30,079
plugin is discovered

00:14:27,440 --> 00:14:30,959
as long as my class exists in this

00:14:30,079 --> 00:14:34,240
plug-in

00:14:30,959 --> 00:14:36,639
flavor psr4 namespace

00:14:34,240 --> 00:14:38,000
the ice cream flavor plug-in manager is

00:14:36,639 --> 00:14:40,959
going to be able to discover it what it

00:14:38,000 --> 00:14:40,959
needs to make use of it

00:14:41,440 --> 00:14:44,720
here's the metadata that i talked about

00:14:43,360 --> 00:14:46,079
in this case it's in the form of an

00:14:44,720 --> 00:14:48,720
annotation so the part

00:14:46,079 --> 00:14:50,000
of this comment it's a php comment uh

00:14:48,720 --> 00:14:52,160
it's in a special format

00:14:50,000 --> 00:14:54,160
the part that starts with at flavor

00:14:52,160 --> 00:14:56,720
looks almost like a function definition

00:14:54,160 --> 00:14:58,240
in the comment that's the annotation

00:14:56,720 --> 00:15:00,160
that's the part that the plug-in manager

00:14:58,240 --> 00:15:03,519
knows how to read

00:15:00,160 --> 00:15:03,920
about to get metadata about this class

00:15:03,519 --> 00:15:06,560
really

00:15:03,920 --> 00:15:07,279
without having to instantiate the class

00:15:06,560 --> 00:15:10,560
this is

00:15:07,279 --> 00:15:11,040
a sort of common format for those what

00:15:10,560 --> 00:15:14,639
goes

00:15:11,040 --> 00:15:16,480
into the metadata here is determined

00:15:14,639 --> 00:15:17,839
again by the plug-in type

00:15:16,480 --> 00:15:20,160
and you usually figure that out through

00:15:17,839 --> 00:15:22,800
the documentation for that plug-in type

00:15:20,160 --> 00:15:23,760
and then finally there's the php that is

00:15:22,800 --> 00:15:26,560
implementation

00:15:23,760 --> 00:15:27,440
of in this case extends the base class

00:15:26,560 --> 00:15:29,600
the base class is an

00:15:27,440 --> 00:15:30,720
implementation of a php interface that

00:15:29,600 --> 00:15:32,560
interface says

00:15:30,720 --> 00:15:35,199
if you want to be an ice cream flavor

00:15:32,560 --> 00:15:36,959
plug-in you need to have a slogan method

00:15:35,199 --> 00:15:40,399
and it needs to return a string

00:15:36,959 --> 00:15:43,920
and so that's what's happening here

00:15:40,399 --> 00:15:48,560
i also said that there are metadata only

00:15:43,920 --> 00:15:50,639
plugins they're defined usually via yaml

00:15:48,560 --> 00:15:52,800
and in that case or in this case the

00:15:50,639 --> 00:15:53,360
plugin the definition of the plugin is

00:15:52,800 --> 00:15:55,839
just

00:15:53,360 --> 00:15:57,440
metadata and there's no code required

00:15:55,839 --> 00:16:00,720
some common examples of this

00:15:57,440 --> 00:16:02,560
in core are things like menu items um

00:16:00,720 --> 00:16:04,320
breakpoints a lot of elements of the

00:16:02,560 --> 00:16:07,680
routing system

00:16:04,320 --> 00:16:08,079
where again there's just a single php

00:16:07,680 --> 00:16:10,480
class

00:16:08,079 --> 00:16:12,800
that the plugin manager will load that

00:16:10,480 --> 00:16:15,920
class and pass in the data from your

00:16:12,800 --> 00:16:19,360
yaml definition here to the class

00:16:15,920 --> 00:16:20,079
but then the menu link plugin class can

00:16:19,360 --> 00:16:21,600
figure out

00:16:20,079 --> 00:16:23,759
everything that it needs to display in

00:16:21,600 --> 00:16:26,720
the page just by what you've passed in

00:16:23,759 --> 00:16:26,720
as the metadata here

00:16:27,279 --> 00:16:30,399
so if that's the recipe and you want to

00:16:28,959 --> 00:16:32,720
implement a plug-in type

00:16:30,399 --> 00:16:34,480
you need to know what plugin types exist

00:16:32,720 --> 00:16:35,839
some ways that you can go about figuring

00:16:34,480 --> 00:16:37,440
that out

00:16:35,839 --> 00:16:40,000
if you've got if you've made use of the

00:16:37,440 --> 00:16:43,279
drupal console command line tool before

00:16:40,000 --> 00:16:45,279
it comes with a handy command debug

00:16:43,279 --> 00:16:46,720
colon plugin which you can run and it

00:16:45,279 --> 00:16:48,160
will give you a list of all of the

00:16:46,720 --> 00:16:50,480
different plugin types

00:16:48,160 --> 00:16:52,079
for your current code base i really like

00:16:50,480 --> 00:16:54,639
this approach because

00:16:52,079 --> 00:16:55,920
it will also dig into any contributed

00:16:54,639 --> 00:16:57,759
modules that you have

00:16:55,920 --> 00:16:59,759
and discover plug-in types that maybe

00:16:57,759 --> 00:17:02,639
they implement

00:16:59,759 --> 00:17:03,519
another thing that you can do is search

00:17:02,639 --> 00:17:05,919
for

00:17:03,519 --> 00:17:07,919
any classes that are in the annotation

00:17:05,919 --> 00:17:10,559
namespace

00:17:07,919 --> 00:17:12,079
this works because currently at least

00:17:10,559 --> 00:17:13,280
the plugin system is the only part of

00:17:12,079 --> 00:17:14,319
drupal core that makes use of

00:17:13,280 --> 00:17:16,079
annotations

00:17:14,319 --> 00:17:17,679
and so if you find all the classes in

00:17:16,079 --> 00:17:19,360
the annotation namespace

00:17:17,679 --> 00:17:20,720
those will help point you in the

00:17:19,360 --> 00:17:21,679
direction of the various different

00:17:20,720 --> 00:17:24,880
plugin types

00:17:21,679 --> 00:17:26,959
those classes also serve as the

00:17:24,880 --> 00:17:28,720
documentation for what you should put

00:17:26,959 --> 00:17:31,360
into the annotation when you're

00:17:28,720 --> 00:17:33,200
implementing a plugin of that type

00:17:31,360 --> 00:17:36,480
and then finally since every plugin type

00:17:33,200 --> 00:17:38,080
is defined by a plugin manager service

00:17:36,480 --> 00:17:39,919
you could just search for all of those

00:17:38,080 --> 00:17:43,600
services as well

00:17:39,919 --> 00:17:46,600
um the way to do that would be to

00:17:43,600 --> 00:17:48,240
look for the services prefix with

00:17:46,600 --> 00:17:50,000
plugin.manager.this is a common

00:17:48,240 --> 00:17:51,600
convention but it's not a requirement so

00:17:50,000 --> 00:17:52,880
it might not find all of them

00:17:51,600 --> 00:17:54,880
those are some different approaches to

00:17:52,880 --> 00:17:57,520
figure out the various plugin types that

00:17:54,880 --> 00:17:57,520
are available

00:17:57,840 --> 00:18:02,320
if you are a module developer and you

00:18:00,799 --> 00:18:04,799
want to

00:18:02,320 --> 00:18:05,679
allow people to extend your modules

00:18:04,799 --> 00:18:09,039
functionality

00:18:05,679 --> 00:18:11,200
with plugins like for example

00:18:09,039 --> 00:18:13,120
add new ways of tallying votes you might

00:18:11,200 --> 00:18:15,840
want to implement a new plugin type

00:18:13,120 --> 00:18:18,559
and the recipe for doing that is this

00:18:15,840 --> 00:18:21,200
you create a new plugin manager

00:18:18,559 --> 00:18:23,120
uh plugin managers are almost always

00:18:21,200 --> 00:18:23,840
created by extending the default plugin

00:18:23,120 --> 00:18:25,679
manager

00:18:23,840 --> 00:18:27,280
just because it does a lot of things for

00:18:25,679 --> 00:18:30,240
you automatically and there's no reason

00:18:27,280 --> 00:18:30,240
to do them again

00:18:30,320 --> 00:18:35,280
when you write a class that extends the

00:18:32,720 --> 00:18:37,840
default plugin manager you'll need to

00:18:35,280 --> 00:18:39,760
teach it what the discovery method is

00:18:37,840 --> 00:18:40,400
for your plugin type so essentially

00:18:39,760 --> 00:18:42,559
you'll tell it

00:18:40,400 --> 00:18:44,480
this is the psr psr4 namespace that you

00:18:42,559 --> 00:18:48,000
should look in in order to find

00:18:44,480 --> 00:18:49,039
plugins of this type you can tell it how

00:18:48,000 --> 00:18:51,600
you would like to

00:18:49,039 --> 00:18:52,720
instantiate copies or instances of a

00:18:51,600 --> 00:18:55,760
plugin so

00:18:52,720 --> 00:18:57,440
once it finds an ice cream flavor plugin

00:18:55,760 --> 00:18:59,840
how should it go about loading that

00:18:57,440 --> 00:19:00,240
class and sort of what data should it

00:18:59,840 --> 00:19:02,799
pass

00:19:00,240 --> 00:19:04,160
to the constructor of that class when

00:19:02,799 --> 00:19:07,520
it's making use of it

00:19:04,160 --> 00:19:09,520
and then what you'll want to do is

00:19:07,520 --> 00:19:11,919
define a php interface for your plug-in

00:19:09,520 --> 00:19:13,280
type and probably a base class as well

00:19:11,919 --> 00:19:15,520
you can think of your interface as sort

00:19:13,280 --> 00:19:16,880
of the contract that plug-in developers

00:19:15,520 --> 00:19:18,480
are signing that says hey if i'm going

00:19:16,880 --> 00:19:20,160
to write a plugin of this type

00:19:18,480 --> 00:19:21,919
these are the things that it needs to be

00:19:20,160 --> 00:19:24,400
able to do it needs to

00:19:21,919 --> 00:19:26,799
have a method called slogan so that

00:19:24,400 --> 00:19:27,280
after my plugin manager instantiates it

00:19:26,799 --> 00:19:28,960
without

00:19:27,280 --> 00:19:30,880
really knowing what flavor we're talking

00:19:28,960 --> 00:19:31,919
about it knows that it can call the

00:19:30,880 --> 00:19:33,440
slogan method

00:19:31,919 --> 00:19:35,679
and get back the data that it's looking

00:19:33,440 --> 00:19:35,679
for

00:19:35,760 --> 00:19:40,880
um here's a list of resources for

00:19:38,880 --> 00:19:42,640
learning much more about the plugin

00:19:40,880 --> 00:19:44,880
system and both how to implement

00:19:42,640 --> 00:19:45,760
um individual plugins as well as new

00:19:44,880 --> 00:19:49,440
plugin types

00:19:45,760 --> 00:19:50,880
these are all also in the um

00:19:49,440 --> 00:19:52,559
link that i provided at the top of the

00:19:50,880 --> 00:19:54,400
chat for the slides

00:19:52,559 --> 00:19:55,679
and i'm just going to keep going because

00:19:54,400 --> 00:19:57,679
we don't all need to

00:19:55,679 --> 00:19:59,120
look at a bunch of links together the

00:19:57,679 --> 00:20:03,200
next one i want to talk about

00:19:59,120 --> 00:20:06,960
is services so services

00:20:03,200 --> 00:20:10,640
are a way of encapsulating

00:20:06,960 --> 00:20:13,679
your application's business logic into

00:20:10,640 --> 00:20:16,159
sort of a reusable utility that

00:20:13,679 --> 00:20:17,520
can be accessed by other code in the

00:20:16,159 --> 00:20:18,880
system in order to

00:20:17,520 --> 00:20:20,640
make use of it you can think of this as

00:20:18,880 --> 00:20:22,559
sort of a replacement for

00:20:20,640 --> 00:20:24,559
what is often done is like global

00:20:22,559 --> 00:20:25,840
functions and sort of or functions that

00:20:24,559 --> 00:20:29,200
are in the global scope

00:20:25,840 --> 00:20:32,400
in php in

00:20:29,200 --> 00:20:34,640
contrast to plug-ins because these are

00:20:32,400 --> 00:20:35,840
going to both essentially be php classes

00:20:34,640 --> 00:20:38,400
that you define

00:20:35,840 --> 00:20:40,159
um remember plugins are useful in the

00:20:38,400 --> 00:20:42,320
scenario where you have

00:20:40,159 --> 00:20:43,760
possibly many of them active at any

00:20:42,320 --> 00:20:46,000
given time and a

00:20:43,760 --> 00:20:47,600
administrator needs to be able to choose

00:20:46,000 --> 00:20:49,600
um which ones are

00:20:47,600 --> 00:20:51,120
used uh how many of them where they're

00:20:49,600 --> 00:20:52,080
displayed or whatever the case like

00:20:51,120 --> 00:20:54,799
blocks

00:20:52,080 --> 00:20:56,960
services you can have multiple different

00:20:54,799 --> 00:20:59,600
services that all perform the same

00:20:56,960 --> 00:21:00,159
task but only one of them is going to be

00:20:59,600 --> 00:21:02,960
active

00:21:00,159 --> 00:21:03,600
at a given time a really good example of

00:21:02,960 --> 00:21:06,640
this

00:21:03,600 --> 00:21:09,520
is the database service so

00:21:06,640 --> 00:21:10,159
the default database service connects to

00:21:09,520 --> 00:21:13,280
a

00:21:10,159 --> 00:21:15,039
mysql database but you can write

00:21:13,280 --> 00:21:17,039
database services that connect to

00:21:15,039 --> 00:21:19,120
other types of database like postgres or

00:21:17,039 --> 00:21:21,360
mssql

00:21:19,120 --> 00:21:22,559
any given drupal application is likely

00:21:21,360 --> 00:21:26,000
to only have

00:21:22,559 --> 00:21:28,000
one of those services active at a time

00:21:26,000 --> 00:21:30,480
even though they all perform roughly the

00:21:28,000 --> 00:21:33,039
same functionality

00:21:30,480 --> 00:21:34,720
so like i said services are useful as

00:21:33,039 --> 00:21:37,520
global utilities

00:21:34,720 --> 00:21:38,080
they work because you're implementing

00:21:37,520 --> 00:21:40,080
and

00:21:38,080 --> 00:21:41,360
defining and implementing an interface

00:21:40,080 --> 00:21:43,600
code can consume

00:21:41,360 --> 00:21:45,360
that service and based on the interface

00:21:43,600 --> 00:21:46,320
it knows how to make use of it it knows

00:21:45,360 --> 00:21:50,320
it can call the

00:21:46,320 --> 00:21:53,679
query method in order to

00:21:50,320 --> 00:21:53,679
make a query to the database

00:21:56,880 --> 00:22:00,799
services can be swapped out with one

00:21:58,880 --> 00:22:02,159
another so typically the pattern is

00:22:00,799 --> 00:22:04,000
you'll implement the service that

00:22:02,159 --> 00:22:06,159
contains your business logic

00:22:04,000 --> 00:22:08,400
and then you would inject that service

00:22:06,159 --> 00:22:10,080
into say a controller you're gonna

00:22:08,400 --> 00:22:12,240
you're gonna write a page or maybe

00:22:10,080 --> 00:22:14,559
you're gonna write a block a new block

00:22:12,240 --> 00:22:16,640
type you could inject this service

00:22:14,559 --> 00:22:18,080
using dependency injection into the

00:22:16,640 --> 00:22:20,159
block plug-in type

00:22:18,080 --> 00:22:22,320
and then that block plug-in could make

00:22:20,159 --> 00:22:24,880
use of the service in order to

00:22:22,320 --> 00:22:27,600
query the twitter api perform whatever

00:22:24,880 --> 00:22:29,600
calculations your application needs to

00:22:27,600 --> 00:22:31,679
and then display the results these

00:22:29,600 --> 00:22:33,840
services because they're used

00:22:31,679 --> 00:22:35,840
via dependency injection you can then

00:22:33,840 --> 00:22:37,840
swap them out for one another

00:22:35,840 --> 00:22:40,799
um the example that i had written down

00:22:37,840 --> 00:22:41,600
here was you might have a mail sending

00:22:40,799 --> 00:22:43,520
service

00:22:41,600 --> 00:22:45,200
so your code gets an object name

00:22:43,520 --> 00:22:47,039
something like dollar sign mail

00:22:45,200 --> 00:22:48,400
and it knows that it can call methods

00:22:47,039 --> 00:22:51,200
like set header or

00:22:48,400 --> 00:22:52,720
send it doesn't have to care what

00:22:51,200 --> 00:22:54,240
happens in the background when it does

00:22:52,720 --> 00:22:55,360
that it just needs to know that it can

00:22:54,240 --> 00:22:57,120
call the send

00:22:55,360 --> 00:22:59,280
method and the email is going to get

00:22:57,120 --> 00:23:02,400
sent

00:22:59,280 --> 00:23:05,679
depending on which service was

00:23:02,400 --> 00:23:08,000
in use that might be sending mail with

00:23:05,679 --> 00:23:09,120
php's built-in mail functions or via the

00:23:08,000 --> 00:23:11,600
mailchimp api

00:23:09,120 --> 00:23:13,679
or an smtp server any number of

00:23:11,600 --> 00:23:16,640
different things

00:23:13,679 --> 00:23:18,640
because services are typically used

00:23:16,640 --> 00:23:19,760
injected into your code via dependency

00:23:18,640 --> 00:23:22,720
injection

00:23:19,760 --> 00:23:23,360
it makes that code generally easier to

00:23:22,720 --> 00:23:25,200
test

00:23:23,360 --> 00:23:26,559
because you can do things like write a

00:23:25,200 --> 00:23:28,080
mock service

00:23:26,559 --> 00:23:30,720
and use that when you're running your

00:23:28,080 --> 00:23:32,640
tests so if your test relies on the

00:23:30,720 --> 00:23:34,000
mail service at the time that you're

00:23:32,640 --> 00:23:36,159
running tests you probably don't want to

00:23:34,000 --> 00:23:38,159
send out a bunch of emails to everybody

00:23:36,159 --> 00:23:41,120
so you can swap in a mock that says oh

00:23:38,159 --> 00:23:42,640
yeah i sent that email yeah sure thing

00:23:41,120 --> 00:23:44,960
even though maybe in the background did

00:23:42,640 --> 00:23:44,960
nothing

00:23:47,520 --> 00:23:51,840
i also think that services allow for

00:23:49,840 --> 00:23:53,440
better code reusability

00:23:51,840 --> 00:23:54,960
in a lot of cases i think what you'll

00:23:53,440 --> 00:23:57,279
see is

00:23:54,960 --> 00:23:58,880
services tend to be sort of a thin

00:23:57,279 --> 00:24:01,919
wrapper around

00:23:58,880 --> 00:24:04,159
a class that contains your

00:24:01,919 --> 00:24:05,360
business or application specific logic

00:24:04,159 --> 00:24:08,400
maybe a

00:24:05,360 --> 00:24:10,400
composer php library so that mail

00:24:08,400 --> 00:24:14,559
service that implements the mailchimp

00:24:10,400 --> 00:24:17,760
um api probably what it does is it's

00:24:14,559 --> 00:24:19,840
a class in drupal that loads the

00:24:17,760 --> 00:24:21,600
mailchimp php sdk

00:24:19,840 --> 00:24:23,200
and exposes the functionality that it

00:24:21,600 --> 00:24:24,000
provides but it does so as a drupal

00:24:23,200 --> 00:24:26,640
service

00:24:24,000 --> 00:24:28,799
that php sdk that mailchimp provided you

00:24:26,640 --> 00:24:30,400
could use in any number of different php

00:24:28,799 --> 00:24:32,799
applications they don't have to be

00:24:30,400 --> 00:24:35,039
drupal and so now that business logic

00:24:32,799 --> 00:24:37,440
code is more portable between different

00:24:35,039 --> 00:24:37,440
systems

00:24:37,520 --> 00:24:42,000
some examples of services in drupal i

00:24:40,480 --> 00:24:44,559
already mentioned the database access

00:24:42,000 --> 00:24:47,360
layer another common one is caching

00:24:44,559 --> 00:24:48,320
you know for example by default drupal

00:24:47,360 --> 00:24:50,320
will store

00:24:48,320 --> 00:24:52,159
cash records in the database but you

00:24:50,320 --> 00:24:54,400
could swap in a different service

00:24:52,159 --> 00:24:57,200
and store those cash records in uh

00:24:54,400 --> 00:24:59,279
something like memcache or redis instead

00:24:57,200 --> 00:25:01,520
there's a service that's used for

00:24:59,279 --> 00:25:03,520
optimizing javascript and css

00:25:01,520 --> 00:25:05,360
assets what it does is it compresses

00:25:03,520 --> 00:25:06,720
them all together into a single file you

00:25:05,360 --> 00:25:07,440
can swap that out for a different one

00:25:06,720 --> 00:25:10,480
that maybe

00:25:07,440 --> 00:25:14,000
minimizes your css in a different way

00:25:10,480 --> 00:25:17,440
plug-in managers our services actually

00:25:14,000 --> 00:25:20,320
all of these other patents hooks events

00:25:17,440 --> 00:25:22,720
and plugins are defined the business

00:25:20,320 --> 00:25:24,480
logic of those patterns is defined as a

00:25:22,720 --> 00:25:26,880
service

00:25:24,480 --> 00:25:28,320
you'll commonly see services used as i

00:25:26,880 --> 00:25:29,520
mentioned for third-party api

00:25:28,320 --> 00:25:30,559
integrations

00:25:29,520 --> 00:25:32,559
there's a whole bunch of things

00:25:30,559 --> 00:25:33,840
basically if you're getting to a point

00:25:32,559 --> 00:25:37,200
where you're starting to

00:25:33,840 --> 00:25:38,960
write php code that is sort of like

00:25:37,200 --> 00:25:40,799
this is the code that's specific to my

00:25:38,960 --> 00:25:42,000
application this is the business logic

00:25:40,799 --> 00:25:45,440
it makes it's what makes

00:25:42,000 --> 00:25:48,000
my application unique i would say

00:25:45,440 --> 00:25:49,039
define that as a service and then

00:25:48,000 --> 00:25:52,559
consume that

00:25:49,039 --> 00:25:54,559
service via a controller or a plug-in

00:25:52,559 --> 00:25:56,080
or a hook or an event or anywhere that

00:25:54,559 --> 00:25:59,039
you might want to make use of that

00:25:56,080 --> 00:25:59,039
application logic

00:25:59,840 --> 00:26:04,000
if you want to discover what services

00:26:02,400 --> 00:26:06,559
available the best way to do that

00:26:04,000 --> 00:26:07,679
is to go to api.drupal.org and click on

00:26:06,559 --> 00:26:09,520
the link over in the

00:26:07,679 --> 00:26:10,960
sidebar that says services this will

00:26:09,520 --> 00:26:12,960
give you a big list of

00:26:10,960 --> 00:26:15,520
all of the services that are available

00:26:12,960 --> 00:26:17,120
in core i suggest you take a

00:26:15,520 --> 00:26:18,640
minute at some point to go and

00:26:17,120 --> 00:26:19,200
familiarize yourself with that list and

00:26:18,640 --> 00:26:21,120
just

00:26:19,200 --> 00:26:23,279
what it essentially is is like here's a

00:26:21,120 --> 00:26:25,840
big list of all the utility

00:26:23,279 --> 00:26:27,120
people provides me as a module developer

00:26:25,840 --> 00:26:29,360
that i can make use of

00:26:27,120 --> 00:26:31,039
to do a whole bunch of different tasks

00:26:29,360 --> 00:26:33,919
without having to re-implement that

00:26:31,039 --> 00:26:33,919
service on my own

00:26:35,520 --> 00:26:39,039
if you want to implement a new service

00:26:37,600 --> 00:26:42,960
the recipe for doing so

00:26:39,039 --> 00:26:45,440
is you need to choose a unique name for

00:26:42,960 --> 00:26:47,520
the service

00:26:45,440 --> 00:26:48,720
my tip would be to always prefix your

00:26:47,520 --> 00:26:51,360
service name with the

00:26:48,720 --> 00:26:52,480
machine name of your module so like

00:26:51,360 --> 00:26:55,039
voting api

00:26:52,480 --> 00:26:55,679
dot service or whatever you want to name

00:26:55,039 --> 00:26:59,039
it

00:26:55,679 --> 00:27:01,600
then define a php interface that

00:26:59,039 --> 00:27:02,320
is the contract for that service so it

00:27:01,600 --> 00:27:05,440
might be

00:27:02,320 --> 00:27:07,360
if you're if you're creating a new mail

00:27:05,440 --> 00:27:09,039
sending service

00:27:07,360 --> 00:27:10,880
you might define an interface that has

00:27:09,039 --> 00:27:14,640
methods like set header

00:27:10,880 --> 00:27:16,480
and send and use that as the place where

00:27:14,640 --> 00:27:19,760
you provide documentation

00:27:16,480 --> 00:27:20,559
for others and future you about what

00:27:19,760 --> 00:27:24,960
that service

00:27:20,559 --> 00:27:27,039
does you then need to

00:27:24,960 --> 00:27:29,840
register your service for drupal by

00:27:27,039 --> 00:27:31,919
creating a dot services.yml file in the

00:27:29,840 --> 00:27:33,120
root of your modules directory

00:27:31,919 --> 00:27:35,279
i have an example of what that looks

00:27:33,120 --> 00:27:36,640
like in a second and then

00:27:35,279 --> 00:27:39,120
when you're ready to make use of the

00:27:36,640 --> 00:27:41,279
service say within the context of a

00:27:39,120 --> 00:27:44,320
block plugin where you want to

00:27:41,279 --> 00:27:47,520
allow someone to send an email you

00:27:44,320 --> 00:27:49,600
use the dependency injection container

00:27:47,520 --> 00:27:53,200
or the services container

00:27:49,600 --> 00:27:55,440
to instantiate a copy of that service

00:27:53,200 --> 00:27:56,720
it will return to you an object which

00:27:55,440 --> 00:27:59,200
you can then make use of

00:27:56,720 --> 00:28:00,080
in your code you want to use this

00:27:59,200 --> 00:28:02,080
approach

00:28:00,080 --> 00:28:03,520
accessing it via the service container

00:28:02,080 --> 00:28:05,600
instead of just

00:28:03,520 --> 00:28:07,600
invoking the code directly because this

00:28:05,600 --> 00:28:08,799
is what allows it to be swapped out as

00:28:07,600 --> 00:28:10,880
needed

00:28:08,799 --> 00:28:12,880
so configuration could say hey when they

00:28:10,880 --> 00:28:14,799
ask for this service i actually want to

00:28:12,880 --> 00:28:18,320
load this other

00:28:14,799 --> 00:28:18,320
example this mock instead

00:28:18,720 --> 00:28:22,799
this is an example of what it looks like

00:28:20,480 --> 00:28:25,600
to declare a new service for

00:28:22,799 --> 00:28:28,200
drupal effectively you are creating a

00:28:25,600 --> 00:28:30,480
yaml file with a bunch of metadata

00:28:28,200 --> 00:28:31,919
breakpoint.manager here is the unique

00:28:30,480 --> 00:28:34,799
name of the service

00:28:31,919 --> 00:28:35,840
um you're telling it which where is the

00:28:34,799 --> 00:28:37,919
class

00:28:35,840 --> 00:28:39,679
that is an implementation of this

00:28:37,919 --> 00:28:42,320
service um

00:28:39,679 --> 00:28:44,640
arguments you can say any other services

00:28:42,320 --> 00:28:46,080
that yours depends on so you can see

00:28:44,640 --> 00:28:48,399
that the breakpoint manager

00:28:46,080 --> 00:28:51,440
also depends on the cash discovery

00:28:48,399 --> 00:28:53,679
service the string translation service

00:28:51,440 --> 00:28:54,559
and then additional metadata in some

00:28:53,679 --> 00:28:56,640
cases

00:28:54,559 --> 00:28:58,000
like tags i'm showing the example of

00:28:56,640 --> 00:28:59,360
tags here because we'll talk

00:28:58,000 --> 00:29:02,399
about that more when i talk about

00:28:59,360 --> 00:29:02,399
implementing events

00:29:02,720 --> 00:29:06,799
if you want to learn more about services

00:29:04,640 --> 00:29:09,520
there is a big list of resources

00:29:06,799 --> 00:29:10,720
um again we'll browse past that quick

00:29:09,520 --> 00:29:11,120
the next pattern i want to talk about

00:29:10,720 --> 00:29:14,159
then

00:29:11,120 --> 00:29:17,279
is um events

00:29:14,159 --> 00:29:19,840
so events refers to the scenario where

00:29:17,279 --> 00:29:23,279
your code

00:29:19,840 --> 00:29:23,279
needs to be either

00:29:23,520 --> 00:29:28,159
broadcast or alert other people about

00:29:26,240 --> 00:29:31,600
some action that is taking place

00:29:28,159 --> 00:29:34,159
or subscribe to be alerted about the

00:29:31,600 --> 00:29:37,120
fact that something has taken place

00:29:34,159 --> 00:29:39,120
this is like for example when you sign

00:29:37,120 --> 00:29:42,320
up to get text messages

00:29:39,120 --> 00:29:43,120
whenever um there's a tornado in your

00:29:42,320 --> 00:29:46,000
neighborhood

00:29:43,120 --> 00:29:47,919
you're subscribing to an event and then

00:29:46,000 --> 00:29:49,840
some event dispatcher somewhere

00:29:47,919 --> 00:29:51,360
says hey there's a tornado taking place

00:29:49,840 --> 00:29:52,399
i'm gonna send out a message to

00:29:51,360 --> 00:29:55,840
everybody's phone

00:29:52,399 --> 00:29:55,840
um letting them know about that

00:29:56,159 --> 00:30:01,600
so uh events are really common oop

00:30:00,240 --> 00:30:04,240
object-oriented programming design

00:30:01,600 --> 00:30:06,080
pattern they're used in javascript a lot

00:30:04,240 --> 00:30:06,960
they're this isn't unique to drupal at

00:30:06,080 --> 00:30:09,120
all

00:30:06,960 --> 00:30:10,000
but the way that drupal implements this

00:30:09,120 --> 00:30:11,360
pattern

00:30:10,000 --> 00:30:13,120
is kind of what we're going to get into

00:30:11,360 --> 00:30:15,200
here and i sort of mentioned they're

00:30:13,120 --> 00:30:17,120
used to accomplish the scenario where

00:30:15,200 --> 00:30:19,039
some element of code would like to

00:30:17,120 --> 00:30:21,679
communicate to you another

00:30:19,039 --> 00:30:23,440
bit of code that something is happening

00:30:21,679 --> 00:30:25,440
or respond to the fact that something is

00:30:23,440 --> 00:30:27,600
happening

00:30:25,440 --> 00:30:28,559
um as an example if you're familiar with

00:30:27,600 --> 00:30:31,120
javascript

00:30:28,559 --> 00:30:31,760
you've maybe seen things like writing

00:30:31,120 --> 00:30:35,520
code for

00:30:31,760 --> 00:30:38,640
on click so the event is click

00:30:35,520 --> 00:30:40,640
on the click event run this code that's

00:30:38,640 --> 00:30:42,000
similar here the event system is made up

00:30:40,640 --> 00:30:44,320
of two components um

00:30:42,000 --> 00:30:45,919
dispatchers which is how you announce or

00:30:44,320 --> 00:30:46,480
broadcast you say hey something's

00:30:45,919 --> 00:30:48,480
happening

00:30:46,480 --> 00:30:49,760
do you want to do anything about it and

00:30:48,480 --> 00:30:51,679
then subscribers

00:30:49,760 --> 00:30:53,760
which are a declaration that you would

00:30:51,679 --> 00:30:57,520
like the dispatcher to notify you

00:30:53,760 --> 00:30:57,520
whenever a specific event happens

00:30:58,960 --> 00:31:02,320
some examples of events in core there

00:31:02,000 --> 00:31:05,600
are

00:31:02,320 --> 00:31:08,640
actually um not that many currently

00:31:05,600 --> 00:31:09,519
in events dispatched by drupal core and

00:31:08,640 --> 00:31:12,080
a lot of them

00:31:09,519 --> 00:31:14,640
are actually dispatched by some of the

00:31:12,080 --> 00:31:16,720
um symphony components that drupal core

00:31:14,640 --> 00:31:18,559
makes use of so a lot of them are really

00:31:16,720 --> 00:31:21,840
low level events

00:31:18,559 --> 00:31:24,080
but some of these examples are

00:31:21,840 --> 00:31:26,399
config events dot save so these are the

00:31:24,080 --> 00:31:30,080
example event names

00:31:26,399 --> 00:31:32,720
whenever a configuration object is saved

00:31:30,080 --> 00:31:34,000
drupal so you know you fill out the form

00:31:32,720 --> 00:31:36,159
that changes the

00:31:34,000 --> 00:31:37,279
um admin email address for your site and

00:31:36,159 --> 00:31:39,600
you hit save

00:31:37,279 --> 00:31:41,519
drupal dispatches an event and it says

00:31:39,600 --> 00:31:43,760
hey someone just changed the um

00:31:41,519 --> 00:31:45,279
system information email address anybody

00:31:43,760 --> 00:31:47,360
want to do anything about that if you do

00:31:45,279 --> 00:31:49,440
now's your chance

00:31:47,360 --> 00:31:51,279
there's some low level really low level

00:31:49,440 --> 00:31:53,679
events like the kernel events

00:31:51,279 --> 00:31:54,720
which refer to the symphony kernel and

00:31:53,679 --> 00:31:57,360
they mostly deal with

00:31:54,720 --> 00:31:58,640
routing and it's basically like this

00:31:57,360 --> 00:32:01,760
request just started

00:31:58,640 --> 00:32:04,399
do you want to do something this request

00:32:01,760 --> 00:32:06,960
just terminated do you want to are you

00:32:04,399 --> 00:32:09,840
interested in knowing about that

00:32:06,960 --> 00:32:10,320
the mygrite api also makes heavy use of

00:32:09,840 --> 00:32:12,080
events

00:32:10,320 --> 00:32:14,320
in order to allow you to do things

00:32:12,080 --> 00:32:17,440
during the process of importing data

00:32:14,320 --> 00:32:18,480
so for example if the migrate api might

00:32:17,440 --> 00:32:20,720
consume a csv

00:32:18,480 --> 00:32:22,559
file before it saves a record from that

00:32:20,720 --> 00:32:23,440
csv file it'll say hey here's the data i

00:32:22,559 --> 00:32:24,960
got if you want to make any

00:32:23,440 --> 00:32:27,600
modifications to it real quick before it

00:32:24,960 --> 00:32:30,720
gets saved now's your chance to do it

00:32:27,600 --> 00:32:31,279
so those are some examples i see the

00:32:30,720 --> 00:32:33,600
question

00:32:31,279 --> 00:32:37,760
why are there so few uses of events in

00:32:33,600 --> 00:32:37,760
core and i will address that shortly

00:32:38,000 --> 00:32:44,880
as an example of how to subscribe

00:32:41,679 --> 00:32:46,880
to an event um there's three parts to

00:32:44,880 --> 00:32:48,880
this so the first thing you need to do

00:32:46,880 --> 00:32:50,960
is determine the name of the event that

00:32:48,880 --> 00:32:51,679
you want to subscribe to or be notified

00:32:50,960 --> 00:32:53,039
about

00:32:51,679 --> 00:32:54,880
and i'll show you how to do that in just

00:32:53,039 --> 00:32:57,279
a second

00:32:54,880 --> 00:32:59,039
once you know the name of the event you

00:32:57,279 --> 00:33:02,159
actually need to define

00:32:59,039 --> 00:33:03,279
a new service that is tagged as an event

00:33:02,159 --> 00:33:05,120
subscriber

00:33:03,279 --> 00:33:06,480
um so this is just the same as

00:33:05,120 --> 00:33:07,519
implementing a new service like we

00:33:06,480 --> 00:33:09,919
talked about earlier

00:33:07,519 --> 00:33:11,840
with the one exception here where you it

00:33:09,919 --> 00:33:12,960
has to have this special event

00:33:11,840 --> 00:33:14,399
subscriber tag

00:33:12,960 --> 00:33:16,960
and what it does is then points to you

00:33:14,399 --> 00:33:20,640
it says when this event is triggered

00:33:16,960 --> 00:33:22,240
um load this class the tommy subscriber

00:33:20,640 --> 00:33:25,120
class

00:33:22,240 --> 00:33:27,120
and call a certain method on that class

00:33:25,120 --> 00:33:28,080
the reason that drupal requires you to

00:33:27,120 --> 00:33:31,279
do it in this way

00:33:28,080 --> 00:33:34,480
is for performance reasons it allows

00:33:31,279 --> 00:33:36,880
the list of events that are dispatched

00:33:34,480 --> 00:33:38,080
and who is subscribed to those events to

00:33:36,880 --> 00:33:39,519
be statically compiled

00:33:38,080 --> 00:33:40,720
into the service container so that it

00:33:39,519 --> 00:33:44,640
doesn't need to figure this out at

00:33:40,720 --> 00:33:47,840
runtime whenever events are dispatched

00:33:44,640 --> 00:33:49,279
and then you need to implement the php

00:33:47,840 --> 00:33:49,840
code that you want to run when the event

00:33:49,279 --> 00:33:52,000
happens

00:33:49,840 --> 00:33:54,640
so you do this by writing a class that

00:33:52,000 --> 00:33:56,720
exists within a specific namespace

00:33:54,640 --> 00:33:59,360
and implements the event subscriber

00:33:56,720 --> 00:34:02,000
interface which largely amounts to

00:33:59,360 --> 00:34:02,640
you write this get subscribed events

00:34:02,000 --> 00:34:04,799
method

00:34:02,640 --> 00:34:06,000
which returns an array that is a list of

00:34:04,799 --> 00:34:09,679
the events that you would like to

00:34:06,000 --> 00:34:10,960
subscribe to and the code the method in

00:34:09,679 --> 00:34:13,200
this case that you would like

00:34:10,960 --> 00:34:15,440
called whenever that event is triggered

00:34:13,200 --> 00:34:18,960
and then in that method i would put my

00:34:15,440 --> 00:34:20,079
custom information whenever an event is

00:34:18,960 --> 00:34:22,079
dispatched

00:34:20,079 --> 00:34:23,839
the thing that is subscribed to it will

00:34:22,079 --> 00:34:26,079
get this uh dollar sign

00:34:23,839 --> 00:34:27,520
event object is sort of the message

00:34:26,079 --> 00:34:29,760
that's passed along

00:34:27,520 --> 00:34:32,000
about whatever action is taking place so

00:34:29,760 --> 00:34:35,599
you can get some additional context

00:34:32,000 --> 00:34:38,960
in order to react

00:34:35,599 --> 00:34:40,159
if you want to dispatch an event so

00:34:38,960 --> 00:34:42,240
you're writing a module and you would

00:34:40,159 --> 00:34:44,240
like to announce to anyone that cares

00:34:42,240 --> 00:34:48,480
that a specific thing is happening

00:34:44,240 --> 00:34:51,520
um the pattern for doing that is to um

00:34:48,480 --> 00:34:54,320
start by adding a new click in the

00:34:51,520 --> 00:34:55,040
this is sort of the documentation of

00:34:54,320 --> 00:34:59,280
your

00:34:55,040 --> 00:35:03,760
event type that you're going to um

00:34:59,280 --> 00:35:07,040
dispatch you would then um

00:35:03,760 --> 00:35:08,400
author a class that extends the existing

00:35:07,040 --> 00:35:10,480
event base class

00:35:08,400 --> 00:35:11,920
and this particular code you can think

00:35:10,480 --> 00:35:14,000
of as like the message that's going to

00:35:11,920 --> 00:35:17,200
be sent along with the event

00:35:14,000 --> 00:35:20,160
so whenever the dispatcher is called

00:35:17,200 --> 00:35:22,320
it will say make a copy of this class

00:35:20,160 --> 00:35:24,880
that's in this uh that implements this

00:35:22,320 --> 00:35:26,000
um or extends sorry extends this event

00:35:24,880 --> 00:35:28,400
base class

00:35:26,000 --> 00:35:29,680
and contains whatever logic i'm going to

00:35:28,400 --> 00:35:31,520
put into it about

00:35:29,680 --> 00:35:33,760
what's happening this is what i want you

00:35:31,520 --> 00:35:36,320
to know about what's happening

00:35:33,760 --> 00:35:37,680
and then get a copy of the event

00:35:36,320 --> 00:35:40,079
dispatcher service

00:35:37,680 --> 00:35:41,599
from the service container call the

00:35:40,079 --> 00:35:44,720
dispatch method

00:35:41,599 --> 00:35:45,839
and pass along an instance of the event

00:35:44,720 --> 00:35:49,599
class that

00:35:45,839 --> 00:35:49,599
from step 2 that

00:35:50,880 --> 00:35:55,599
you want to pass on to whatever code it

00:35:52,800 --> 00:35:55,599
is that's listening

00:35:56,000 --> 00:35:59,440
if you want to find all the existing

00:35:57,599 --> 00:36:00,720
events that exist

00:35:59,440 --> 00:36:02,480
um there's a couple of different things

00:36:00,720 --> 00:36:05,440
that you can do you can search

00:36:02,480 --> 00:36:06,320
through your code base for the string at

00:36:05,440 --> 00:36:08,000
event

00:36:06,320 --> 00:36:10,800
um in drupal core at least the

00:36:08,000 --> 00:36:14,079
convention is to add that php

00:36:10,800 --> 00:36:16,000
doc block into the

00:36:14,079 --> 00:36:18,720
documentation for any class that

00:36:16,000 --> 00:36:20,880
implements an event

00:36:18,720 --> 00:36:22,560
i really like the web profiler module

00:36:20,880 --> 00:36:23,920
that comes with the devel module so if

00:36:22,560 --> 00:36:25,760
you download it install the develop

00:36:23,920 --> 00:36:26,480
module there's a sub project called web

00:36:25,760 --> 00:36:28,560
profiler

00:36:26,480 --> 00:36:29,520
which you can turn on and configure it

00:36:28,560 --> 00:36:31,680
in a way

00:36:29,520 --> 00:36:32,560
that for every page or every route that

00:36:31,680 --> 00:36:35,920
you visit

00:36:32,560 --> 00:36:37,440
it will display a list of all of the

00:36:35,920 --> 00:36:39,520
events that were triggered

00:36:37,440 --> 00:36:40,800
in the process of building that page i

00:36:39,520 --> 00:36:41,520
find this really useful to be able to

00:36:40,800 --> 00:36:42,880
say like

00:36:41,520 --> 00:36:44,720
i want to change something about the way

00:36:42,880 --> 00:36:47,119
that the login page works but i'm not

00:36:44,720 --> 00:36:48,800
quite sure what the name of the event is

00:36:47,119 --> 00:36:50,160
this will give you a good idea and then

00:36:48,800 --> 00:36:52,640
the drupal console

00:36:50,160 --> 00:36:53,280
utility also has a debug colon event

00:36:52,640 --> 00:36:58,400
command

00:36:53,280 --> 00:36:59,920
which is useful a big list of links

00:36:58,400 --> 00:37:02,640
and finally i want to talk a little bit

00:36:59,920 --> 00:37:02,640
about hooks

00:37:03,040 --> 00:37:07,680
prior to drupal 8 hooks was the pattern

00:37:06,320 --> 00:37:10,079
that we used for

00:37:07,680 --> 00:37:11,359
everything so we didn't have plugins

00:37:10,079 --> 00:37:14,000
events and services

00:37:11,359 --> 00:37:15,280
up until drupal 8 until we started

00:37:14,000 --> 00:37:18,079
implementing some more

00:37:15,280 --> 00:37:19,920
object-oriented design patterns and

00:37:18,079 --> 00:37:21,119
hooks still play a really important role

00:37:19,920 --> 00:37:24,880
in drupal there is still

00:37:21,119 --> 00:37:27,680
a ton of them that exist um

00:37:24,880 --> 00:37:30,000
this is changing over time as these

00:37:27,680 --> 00:37:31,920
other patterns like plug-ins and events

00:37:30,000 --> 00:37:33,680
become more widely used but i do think

00:37:31,920 --> 00:37:37,839
we'll continue to see hooks used

00:37:33,680 --> 00:37:37,839
um for a while

00:37:38,160 --> 00:37:43,680
hooks are uh hooks are php functions

00:37:42,160 --> 00:37:46,160
they're functions that are declared

00:37:43,680 --> 00:37:48,560
in the global scope um so they're

00:37:46,160 --> 00:37:50,079
accessible from anywhere within php

00:37:48,560 --> 00:37:52,320
and they follow a specific naming

00:37:50,079 --> 00:37:54,240
convention in some ways they're kind of

00:37:52,320 --> 00:37:56,240
the easiest of this pattern

00:37:54,240 --> 00:37:57,599
if you create a new function and it has

00:37:56,240 --> 00:37:59,440
the right name

00:37:57,599 --> 00:38:01,359
drupal will call it at the time that it

00:37:59,440 --> 00:38:04,640
needs to call a hook

00:38:01,359 --> 00:38:06,480
hooks are used currently in a lot the

00:38:04,640 --> 00:38:09,280
same way that we use events

00:38:06,480 --> 00:38:10,160
they're a way to for a module to

00:38:09,280 --> 00:38:11,920
broadcast

00:38:10,160 --> 00:38:14,240
hey this thing is happening would you

00:38:11,920 --> 00:38:17,440
like to do anything about it

00:38:14,240 --> 00:38:20,800
um for example this

00:38:17,440 --> 00:38:24,000
node is just being saved to the database

00:38:20,800 --> 00:38:25,760
hook node save would get called and

00:38:24,000 --> 00:38:28,079
anybody that is implementing it has an

00:38:25,760 --> 00:38:28,720
opportunity to make modifications to the

00:38:28,079 --> 00:38:31,119
node

00:38:28,720 --> 00:38:32,320
object before it is saved i kind of

00:38:31,119 --> 00:38:35,040
mentioned this before but

00:38:32,320 --> 00:38:37,040
for past versions of drupal um hooks

00:38:35,040 --> 00:38:41,440
were the workhorse we use this for

00:38:37,040 --> 00:38:41,440
everything um

00:38:43,520 --> 00:38:47,839
excuse me for a second

00:38:50,960 --> 00:38:58,480
hooks work really well for the scenario

00:38:54,240 --> 00:39:01,760
where you need to alter an existing

00:38:58,480 --> 00:39:04,880
set of data an existing something um

00:39:01,760 --> 00:39:06,720
some common examples of this are forms

00:39:04,880 --> 00:39:09,040
so every time that a form is displayed

00:39:06,720 --> 00:39:13,040
in drupal that form is defined as a

00:39:09,040 --> 00:39:15,680
really large associative array and

00:39:13,040 --> 00:39:17,520
it's passed to in order to build the

00:39:15,680 --> 00:39:19,119
form drupal takes that associative array

00:39:17,520 --> 00:39:20,000
and transforms it into the html that you

00:39:19,119 --> 00:39:22,160
see on the page

00:39:20,000 --> 00:39:23,839
before it does that it says hey does

00:39:22,160 --> 00:39:24,320
anybody want to make any changes to this

00:39:23,839 --> 00:39:26,480
form

00:39:24,320 --> 00:39:27,520
and so it passes that array the form

00:39:26,480 --> 00:39:30,240
definition to

00:39:27,520 --> 00:39:31,839
all implementations of hook form alter

00:39:30,240 --> 00:39:33,280
which can then because it's passed by

00:39:31,839 --> 00:39:36,880
reference

00:39:33,280 --> 00:39:38,800
those functions can make changes to

00:39:36,880 --> 00:39:40,880
the array and whatever changes they make

00:39:38,800 --> 00:39:42,960
will persist back upstream and affect

00:39:40,880 --> 00:39:45,359
how the form is displayed

00:39:42,960 --> 00:39:46,160
hooks work really well for this and they

00:39:45,359 --> 00:39:48,000
can do it

00:39:46,160 --> 00:39:50,240
super fast because effectively all

00:39:48,000 --> 00:39:52,400
you're doing is calling a php function

00:39:50,240 --> 00:39:54,000
and passing an argument by reference a

00:39:52,400 --> 00:39:56,880
large part of the reason

00:39:54,000 --> 00:39:57,520
that hooks are still used for a lot of

00:39:56,880 --> 00:39:59,920
cases

00:39:57,520 --> 00:40:01,280
that also sound like something that you

00:39:59,920 --> 00:40:04,319
could use an event for

00:40:01,280 --> 00:40:05,359
is performance and in older versions of

00:40:04,319 --> 00:40:07,280
php

00:40:05,359 --> 00:40:08,800
um i don't know all the nuances of this

00:40:07,280 --> 00:40:10,560
but i do know that

00:40:08,800 --> 00:40:12,000
you know at the time the drupal came out

00:40:10,560 --> 00:40:14,000
older versions of php

00:40:12,000 --> 00:40:16,720
there are some limitations to the way

00:40:14,000 --> 00:40:19,440
that symfony dispatches events

00:40:16,720 --> 00:40:21,119
making it considerably slower than just

00:40:19,440 --> 00:40:23,920
calling a php function

00:40:21,119 --> 00:40:25,119
and passing an array my understanding is

00:40:23,920 --> 00:40:27,599
that that is changing

00:40:25,119 --> 00:40:28,160
um dries addressed this a bit in the

00:40:27,599 --> 00:40:30,079
keynote

00:40:28,160 --> 00:40:31,920
on tuesday talking about how one of the

00:40:30,079 --> 00:40:33,359
biggest complaints from developers is

00:40:31,920 --> 00:40:34,240
the fact that there are hooks and there

00:40:33,359 --> 00:40:36,560
are events and

00:40:34,240 --> 00:40:38,079
like which one of these should i use um

00:40:36,560 --> 00:40:39,680
so this is a thing that

00:40:38,079 --> 00:40:41,200
the drupal community is aware of and

00:40:39,680 --> 00:40:43,119
working on resolving

00:40:41,200 --> 00:40:44,400
i don't see it changing it's certainly

00:40:43,119 --> 00:40:45,680
not going to change in the life cycle of

00:40:44,400 --> 00:40:47,680
drupal 9.

00:40:45,680 --> 00:40:49,280
so um at least for now there are a lot

00:40:47,680 --> 00:40:50,720
of hooks and you will still need to know

00:40:49,280 --> 00:40:53,680
how to implement them but i do think

00:40:50,720 --> 00:40:55,200
this will change over time

00:40:53,680 --> 00:40:56,800
example use cases for hooks i already

00:40:55,200 --> 00:40:58,240
talked about altering forms that's one

00:40:56,800 --> 00:40:59,520
use case another place that i see it

00:40:58,240 --> 00:41:01,760
used frequently

00:40:59,520 --> 00:41:03,920
is scenarios where drupal has gathered a

00:41:01,760 --> 00:41:05,119
bunch of information or metadata about a

00:41:03,920 --> 00:41:06,160
particular system

00:41:05,119 --> 00:41:08,000
and then wants to give you an

00:41:06,160 --> 00:41:10,000
opportunity to modify it before it acts

00:41:08,000 --> 00:41:12,480
on it

00:41:10,000 --> 00:41:13,200
entity definitions are a common example

00:41:12,480 --> 00:41:15,280
of this so

00:41:13,200 --> 00:41:16,800
entities are a lot of metadata about

00:41:15,280 --> 00:41:19,119
entities is defined as

00:41:16,800 --> 00:41:21,839
annotations because entity types are

00:41:19,119 --> 00:41:21,839
plugins

00:41:21,920 --> 00:41:25,040
after the plugin manager gets a list of

00:41:24,000 --> 00:41:26,960
all that metadata

00:41:25,040 --> 00:41:28,640
some of which might point to for example

00:41:26,960 --> 00:41:29,520
here's the class that you should use

00:41:28,640 --> 00:41:32,640
when you

00:41:29,520 --> 00:41:34,400
instantiate a new node

00:41:32,640 --> 00:41:36,160
that list of information can be passed

00:41:34,400 --> 00:41:38,480
on to a hook which could alter it so

00:41:36,160 --> 00:41:41,520
your module could say you know what

00:41:38,480 --> 00:41:44,240
for article node choose

00:41:41,520 --> 00:41:45,680
my article node specific class that

00:41:44,240 --> 00:41:48,480
extends the base

00:41:45,680 --> 00:41:49,119
node entity and add some custom logic

00:41:48,480 --> 00:41:50,640
that i have

00:41:49,119 --> 00:41:52,640
so you can do something like that with a

00:41:50,640 --> 00:41:54,640
hook and finally

00:41:52,640 --> 00:41:55,760
hooks kind of respond to what are

00:41:54,640 --> 00:41:58,079
typically events

00:41:55,760 --> 00:42:02,000
like save this is being saved do you

00:41:58,079 --> 00:42:04,160
want to do anything about it

00:42:02,000 --> 00:42:05,920
you want to implement a hook what you

00:42:04,160 --> 00:42:07,440
need to do is determine the name of the

00:42:05,920 --> 00:42:09,680
hook that you're going to implement so

00:42:07,440 --> 00:42:12,240
example hook underscore form underscore

00:42:09,680 --> 00:42:14,640
alter is the name of the hook

00:42:12,240 --> 00:42:16,000
then you need to add a function in your

00:42:14,640 --> 00:42:17,440
dot module file

00:42:16,000 --> 00:42:19,839
or really any other file that's going to

00:42:17,440 --> 00:42:21,520
be in the php global scope

00:42:19,839 --> 00:42:22,880
following a specific naming convention

00:42:21,520 --> 00:42:25,680
which really just amounts to

00:42:22,880 --> 00:42:27,520
replace the word hook with the machine

00:42:25,680 --> 00:42:29,359
name of your module so if my module is

00:42:27,520 --> 00:42:30,560
named example and i want to implement

00:42:29,359 --> 00:42:33,040
hook four multer

00:42:30,560 --> 00:42:34,240
i'd create a function named example

00:42:33,040 --> 00:42:36,000
underscore formatter

00:42:34,240 --> 00:42:37,760
and then i would implement that function

00:42:36,000 --> 00:42:39,280
according to whatever the documentation

00:42:37,760 --> 00:42:41,440
told me i should do

00:42:39,280 --> 00:42:42,480
finally if you've just defined it you

00:42:41,440 --> 00:42:44,240
want to make sure that you clear the

00:42:42,480 --> 00:42:46,880
cache because drupal 8

00:42:44,240 --> 00:42:47,760
and above keeps a list of all hook

00:42:46,880 --> 00:42:49,440
implementations

00:42:47,760 --> 00:42:50,960
cached it's kind of like a registry of

00:42:49,440 --> 00:42:52,720
the system for

00:42:50,960 --> 00:42:54,000
for performance reasons here's an

00:42:52,720 --> 00:42:55,760
example of what that would look like

00:42:54,000 --> 00:42:56,480
this is an implementation of hook user

00:42:55,760 --> 00:42:58,400
login

00:42:56,480 --> 00:43:00,319
where the system module is implementing

00:42:58,400 --> 00:43:03,599
the hook and it's saying

00:43:00,319 --> 00:43:04,240
based on some configuration would you

00:43:03,599 --> 00:43:06,240
like to

00:43:04,240 --> 00:43:07,599
require not require but would you like

00:43:06,240 --> 00:43:09,200
to suggest

00:43:07,599 --> 00:43:10,640
that all users have a time zone

00:43:09,200 --> 00:43:12,560
configured for their account

00:43:10,640 --> 00:43:14,480
and if the configuration says yeah do

00:43:12,560 --> 00:43:18,400
that this hook implementation

00:43:14,480 --> 00:43:19,760
will um whenever a user logs in

00:43:18,400 --> 00:43:21,760
if they don't have a time zone

00:43:19,760 --> 00:43:22,079
configured display a message that says

00:43:21,760 --> 00:43:23,599
hey

00:43:22,079 --> 00:43:26,160
you can configure your time zone by

00:43:23,599 --> 00:43:28,319
going here

00:43:26,160 --> 00:43:30,319
the way to find existing hooks that you

00:43:28,319 --> 00:43:32,560
can implement um the best way to do that

00:43:30,319 --> 00:43:33,119
is looking in the root directory of a

00:43:32,560 --> 00:43:36,560
module

00:43:33,119 --> 00:43:39,760
for api.php functions this is where the

00:43:36,560 --> 00:43:41,280
canonical documentation for hooks exists

00:43:39,760 --> 00:43:44,040
this has been true since basically

00:43:41,280 --> 00:43:45,200
forever and you can also go to

00:43:44,040 --> 00:43:46,800
api.drupal.org

00:43:45,200 --> 00:43:49,280
and there's a complete list of all of

00:43:46,800 --> 00:43:53,200
the hooks implemented by drupal core

00:43:49,280 --> 00:43:56,240
there if you want to invoke a hook

00:43:53,200 --> 00:43:57,359
so if you want to allow someone to for

00:43:56,240 --> 00:44:00,480
example alter

00:43:57,359 --> 00:44:00,960
metadata that you've gathered you need

00:44:00,480 --> 00:44:04,000
to

00:44:00,960 --> 00:44:05,440
pick a unique name for your hook again i

00:44:04,000 --> 00:44:07,119
suggest prefixing it with the name of

00:44:05,440 --> 00:44:08,240
your module as an easy way to ensure

00:44:07,119 --> 00:44:13,040
that it's unique

00:44:08,240 --> 00:44:15,520
and then use the module handler service

00:44:13,040 --> 00:44:17,200
and call one of the methods available on

00:44:15,520 --> 00:44:17,760
it generally you'll call it either

00:44:17,200 --> 00:44:21,760
invoke

00:44:17,760 --> 00:44:23,680
all or alter alter you would use in the

00:44:21,760 --> 00:44:24,480
case where you would like to pass in the

00:44:23,680 --> 00:44:27,680
first uh

00:44:24,480 --> 00:44:28,240
and second arguments to the hook um by

00:44:27,680 --> 00:44:31,200
reference

00:44:28,240 --> 00:44:33,359
so that the implementations of the hook

00:44:31,200 --> 00:44:37,200
can make modifications to the data

00:44:33,359 --> 00:44:40,000
for or you can learn more about hooks in

00:44:37,200 --> 00:44:41,920
these locations

00:44:40,000 --> 00:44:43,760
um i talked about this a bit already

00:44:41,920 --> 00:44:44,720
because it came up but sort of hooks or

00:44:43,760 --> 00:44:46,960
events

00:44:44,720 --> 00:44:48,480
they sound a lot alike i agree they

00:44:46,960 --> 00:44:49,359
essentially accomplish a lot of the same

00:44:48,480 --> 00:44:53,359
things

00:44:49,359 --> 00:44:54,800
um also true it's very frustrating how

00:44:53,359 --> 00:44:57,760
do you know which one to use

00:44:54,800 --> 00:44:58,319
or um how do i decide should it be a

00:44:57,760 --> 00:45:02,240
hook or

00:44:58,319 --> 00:45:05,359
an event and this basically amounts to

00:45:02,240 --> 00:45:06,720
if you're going to try to respond to

00:45:05,359 --> 00:45:08,160
some other code's

00:45:06,720 --> 00:45:09,359
message you have to implement the

00:45:08,160 --> 00:45:10,319
pattern that they've used so if it's

00:45:09,359 --> 00:45:11,839
dispatching a hook

00:45:10,319 --> 00:45:13,119
you have to implement a hook if it's

00:45:11,839 --> 00:45:14,480
dispatching an event you have to

00:45:13,119 --> 00:45:16,240
subscribe to the event

00:45:14,480 --> 00:45:17,920
um there are some ways around this

00:45:16,240 --> 00:45:18,640
there's a contributed module that tries

00:45:17,920 --> 00:45:21,599
to

00:45:18,640 --> 00:45:23,440
sort of grab all hook invocations and

00:45:21,599 --> 00:45:26,400
throw an event when that happens

00:45:23,440 --> 00:45:27,280
um i've not tried it but is a thing you

00:45:26,400 --> 00:45:28,960
could explore

00:45:27,280 --> 00:45:30,560
going forward the community seems to be

00:45:28,960 --> 00:45:31,920
standardizing on events so if you're

00:45:30,560 --> 00:45:33,280
going to implement one of these patterns

00:45:31,920 --> 00:45:35,920
in your module where you're going to say

00:45:33,280 --> 00:45:36,400
dispatch something i would say in most

00:45:35,920 --> 00:45:38,560
cases

00:45:36,400 --> 00:45:40,079
dispatch an event unless for some reason

00:45:38,560 --> 00:45:41,599
it's not working or it doesn't make

00:45:40,079 --> 00:45:43,680
sense

00:45:41,599 --> 00:45:44,960
quick recap there are four methods that

00:45:43,680 --> 00:45:47,119
we can use

00:45:44,960 --> 00:45:48,160
primarily to extend drupal core or

00:45:47,119 --> 00:45:50,880
contrib

00:45:48,160 --> 00:45:51,920
plug-ins services events and hooks all

00:45:50,880 --> 00:45:55,200
of these

00:45:51,920 --> 00:45:57,040
are there so that we can alter the way

00:45:55,200 --> 00:45:58,000
that drupal's existing functionality

00:45:57,040 --> 00:45:59,920
works or add

00:45:58,000 --> 00:46:02,319
new unique functionality without having

00:45:59,920 --> 00:46:04,640
to make modifications to drupal core

00:46:02,319 --> 00:46:05,440
or contributed modules itself that's

00:46:04,640 --> 00:46:07,760
what i got

00:46:05,440 --> 00:46:09,680
um again you can check out this link for

00:46:07,760 --> 00:46:12,240
the slides thank you so much for coming

00:46:09,680 --> 00:46:13,599
i i don't think this room closes down

00:46:12,240 --> 00:46:14,000
right away so i'll stick around and try

00:46:13,599 --> 00:46:15,440
to answer

00:46:14,000 --> 00:46:17,440
questions but i also want to recognize

00:46:15,440 --> 00:46:19,200
that it's the top of the hour so if you

00:46:17,440 --> 00:46:20,480
wanted to jump onto the next thing

00:46:19,200 --> 00:46:23,359
please do

00:46:20,480 --> 00:46:23,359
um thank you

00:46:24,160 --> 00:46:30,079
and now i will try to questions

00:46:27,599 --> 00:46:30,079
let's see

00:46:34,720 --> 00:46:38,160
i'll try to scroll back but if i miss

00:46:36,720 --> 00:46:40,400
your question

00:46:38,160 --> 00:46:41,280
feel free to post it again one of the

00:46:40,400 --> 00:46:43,760
questions is

00:46:41,280 --> 00:46:44,640
could alters be replaced by events in

00:46:43,760 --> 00:46:48,000
the future

00:46:44,640 --> 00:46:49,839
um the answer to that is yes you could

00:46:48,000 --> 00:46:51,359
you could do that now you could dispatch

00:46:49,839 --> 00:46:54,880
an event um

00:46:51,359 --> 00:46:55,359
in the the event object that you pass

00:46:54,880 --> 00:46:57,839
along

00:46:55,359 --> 00:47:00,720
since objects in php are inherently

00:46:57,839 --> 00:47:00,720
passed by reference

00:47:00,880 --> 00:47:04,480
that you could dispatch an event pass an

00:47:04,000 --> 00:47:06,400
event

00:47:04,480 --> 00:47:08,960
object the subscriber could make

00:47:06,400 --> 00:47:10,400
modifications to that event object

00:47:08,960 --> 00:47:12,400
and then in the code that made the

00:47:10,400 --> 00:47:16,240
original dispatch that event object

00:47:12,400 --> 00:47:19,359
would have those modifications applied

00:47:16,240 --> 00:47:22,240
i just i know that for

00:47:19,359 --> 00:47:24,160
technical reasons in older versions of

00:47:22,240 --> 00:47:25,280
php at least there are some performance

00:47:24,160 --> 00:47:26,880
implications to that

00:47:25,280 --> 00:47:28,800
largely i think it has to do with the

00:47:26,880 --> 00:47:30,880
fact that there's just like the process

00:47:28,800 --> 00:47:34,240
to bootstrap and dispatch an event

00:47:30,880 --> 00:47:34,800
is a lot more code than the process of

00:47:34,240 --> 00:47:38,400
just

00:47:34,800 --> 00:47:40,079
calling an existing function

00:47:38,400 --> 00:47:43,920
uh we talked a bit about why there are

00:47:40,079 --> 00:47:43,920
so few uses of events in core

00:47:47,760 --> 00:47:53,839
you all said you could hear me all right

00:47:57,839 --> 00:48:02,240
was joe the brave already taken uh in

00:48:00,800 --> 00:48:05,040
reference to my username

00:48:02,240 --> 00:48:06,480
so if you didn't figure that out eoj is

00:48:05,040 --> 00:48:09,839
joe spelled backwards

00:48:06,480 --> 00:48:11,680
uh it wasn't already taken but i

00:48:09,839 --> 00:48:13,040
at the time that i picked the username

00:48:11,680 --> 00:48:14,880
you were supposed to like

00:48:13,040 --> 00:48:16,640
pick a name that would keep you

00:48:14,880 --> 00:48:18,240
anonymous so

00:48:16,640 --> 00:48:20,079
that you could remain anonymous on the

00:48:18,240 --> 00:48:22,319
internet

00:48:20,079 --> 00:48:23,480
in retrospect i wish i had picked a

00:48:22,319 --> 00:48:26,240
username like

00:48:23,480 --> 00:48:27,200
joe.chindelar but i got ej the brave

00:48:26,240 --> 00:48:35,839
instead

00:48:27,200 --> 00:48:35,839
and now i'm stuck with it for perpetuity

00:48:36,640 --> 00:48:40,000
cool uh one of the questions was we have

00:48:38,319 --> 00:48:43,040
any drupal courses out there

00:48:40,000 --> 00:48:45,599
um yes in fact there are a bunch i

00:48:43,040 --> 00:48:46,800
i work for drupalized.me we produce

00:48:45,599 --> 00:48:47,599
courses that cover a lot of this

00:48:46,800 --> 00:48:50,079
material

00:48:47,599 --> 00:48:51,119
there are also um a number of other good

00:48:50,079 --> 00:48:55,200
resources for

00:48:51,119 --> 00:48:59,200
learning drupal um yeah

00:48:55,200 --> 00:48:59,760
a bunch cool uh and if you have

00:48:59,200 --> 00:49:01,280
questions

00:48:59,760 --> 00:49:02,720
later on like you go back to work next

00:49:01,280 --> 00:49:04,319
week and you're trying to implement any

00:49:02,720 --> 00:49:05,599
of these patterns like i said hit me up

00:49:04,319 --> 00:49:08,079
in slack or on twitter

00:49:05,599 --> 00:49:09,680
i'm always happy to try and help people

00:49:08,079 --> 00:49:12,880
figure out how this stuff works

00:49:09,680 --> 00:49:12,880

YouTube URL: https://www.youtube.com/watch?v=rVA-qbqtUDw


