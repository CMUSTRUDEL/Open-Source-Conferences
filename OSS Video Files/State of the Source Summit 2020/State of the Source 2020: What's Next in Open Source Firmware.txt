Title: State of the Source 2020: What's Next in Open Source Firmware
Publication date: 2020-09-16
Playlist: State of the Source Summit 2020
Description: 
	What's Next in Open Source Firmware?

This is a panel discussion with multiple speakers who are deeply involved in the open source firmware movement: Ronald Minnich (Founder Coreboot), Daniel Maslowski (Firmware Hacker), Mario Behling (OpnTec) and Jean-Marie Verdun. What is the state of openness on the machines we use? How open are they on the firmware layer?

Thank you to our Video Recordings Sponsor eng@salesforce!
Full Program: https://eventyay.com/e/8fa7fd14/schedule
Captions: 
	00:00:04,160 --> 00:00:08,639
alrighty everybody welcome back to another great session we

00:00:08,639 --> 00:00:14,160
have this session is titled what what's next in open source firmware

00:00:14,160 --> 00:00:23,600
we have ron daniel mario jean and hong take it away

00:00:23,600 --> 00:00:30,080
okay thank you sean uh yes so uh again welcome to uh what's next with

00:00:30,080 --> 00:00:33,040
the open source firmware i just want to give a little

00:00:33,040 --> 00:00:36,320
bit of the background why are we having this

00:00:36,320 --> 00:00:42,239
session here today um let me first begin with a personal

00:00:42,239 --> 00:00:47,840
introduction of all the people we have here mario behling

00:00:47,840 --> 00:00:54,559
um i met mario back in 2007 i think uh that was the first time i

00:00:54,559 --> 00:00:56,960
learned about open source so mario was like

00:00:56,960 --> 00:01:03,039
my very first mentor in 2009 we started the first asia organization

00:01:03,039 --> 00:01:06,320
together and he has been uh working together

00:01:06,320 --> 00:01:10,840
still then yeah one thing that i could say about

00:01:10,840 --> 00:01:15,360
mario i think he is a doer so he make a lot of

00:01:15,360 --> 00:01:19,119
things happen and he has a lot of experience in

00:01:19,119 --> 00:01:23,040
uh scaling open source project yeah and

00:01:23,040 --> 00:01:29,680
for mario i also get to know the amazing daniel moloski

00:01:29,680 --> 00:01:35,759
so daniel is a very active uh open source developer he

00:01:35,759 --> 00:01:39,600
has been contributing to a lot a lot of open source uh projects i

00:01:39,600 --> 00:01:45,840
can't even name them all but um yeah he's very knowledgeable at the same

00:01:45,840 --> 00:01:50,000
time very modest he often refers himself as a firmware

00:01:50,000 --> 00:01:54,320
hobbyist but to me he is an expert in in many

00:01:54,360 --> 00:01:59,040
aspects we regularly meet at conferences like

00:01:59,040 --> 00:02:03,840
several times that it was hr summit we were enforced them together we went to

00:02:03,840 --> 00:02:08,879
the ccc together and then you're currently leading the

00:02:08,879 --> 00:02:13,200
firmware development um in the pocket design lab projects and we

00:02:13,220 --> 00:02:17,360
got to meet again on a weekly basis yeah what i really

00:02:17,360 --> 00:02:20,960
love about the open source community you get to meet a lot of interesting

00:02:20,960 --> 00:02:26,319
people and from these interesting people you get to meet more interesting people

00:02:26,319 --> 00:02:33,280
so daniel brought us together with ron so um um

00:02:33,280 --> 00:02:38,160
minik as you know so he is the original author of call booth

00:02:38,160 --> 00:02:43,760
yeah the linux uh bios and he'd been driving firmware for over

00:02:43,760 --> 00:02:47,519
40 years i believe that it's really difficult to

00:02:47,519 --> 00:02:51,200
find a better person who can speak about firmware we are very

00:02:51,200 --> 00:02:57,200
lucky to have ron here with us today and from daniel i also uh got to know

00:02:57,200 --> 00:03:02,879
um jean-marie vodun yeah so what i heard i'm not sure if you

00:03:02,879 --> 00:03:07,360
maybe you can correct so jean has a special relationship with

00:03:07,360 --> 00:03:11,200
computers yeah he in love with them he's been spending

00:03:11,200 --> 00:03:16,720
a lot of time designing them on the hardware level yeah and uh

00:03:16,720 --> 00:03:20,239
welcome jean very happy to have you here so

00:03:20,240 --> 00:03:25,200
what brought us all here today i just want to share quickly the story

00:03:25,220 --> 00:03:28,880
uh i was listening to that conversation about [indiscernible]

00:03:28,880 --> 00:03:32,400
and a few other firmware topics at the weekly

00:03:32,400 --> 00:03:36,159
open source hardware meeting organized by FOSSAsia so it is like

00:03:36,159 --> 00:03:42,319
a public meeting happening every saturday at 5 00 pm in the central

00:03:42,319 --> 00:03:46,080
europe time we invited people who currently working on

00:03:46,080 --> 00:03:51,680
open source hardware come together yeah and i find the conversation super

00:03:51,680 --> 00:03:56,000
interesting and i think that um open source firmware

00:03:56,000 --> 00:03:59,439
and hardware should get more weight in the ecosystem

00:03:59,439 --> 00:04:02,640
so we should talk more about it if we really want

00:04:02,640 --> 00:04:05,680
to to achieve open thought in all the layers

00:04:05,680 --> 00:04:08,959
and what we some of us discussed yesterday

00:04:08,959 --> 00:04:13,280
that is the reason why i invited them to have their conversation

00:04:13,280 --> 00:04:17,359
that they normally have among themselves here at State of the Source to have a

00:04:17,359 --> 00:04:20,799
conversation in front of us i believe that we can learn a lot from

00:04:20,799 --> 00:04:24,960
this conversation at the same time i want to see if we can

00:04:24,960 --> 00:04:27,840
have work together and bring open source

00:04:27,840 --> 00:04:32,720
firmware and hardware into the mainstream so

00:04:32,720 --> 00:04:37,120
that is my job i introduce everyone and now i would like to

00:04:37,120 --> 00:04:38,360
have um mario daniel jean and ron the stage here

00:04:38,360 --> 00:04:43,840
 

00:04:45,520 --> 00:04:52,000
well thank you very much that is a very nice wrap-up and

00:04:52,000 --> 00:04:55,520
you can also read more about the backgrounds of everyone in

00:04:55,520 --> 00:05:01,199
on the schedule and so we really have a nice panel here with a

00:05:01,199 --> 00:05:05,840
lot of background and when we put together

00:05:05,840 --> 00:05:09,680
like the topic of firmware we actually came

00:05:09,680 --> 00:05:13,120
up with more and more questions so i don't know if we can

00:05:13,140 --> 00:05:16,720
answer all of these questions that we have

00:05:16,720 --> 00:05:21,440
like listed in the preparation of this talk but um i think we can give a few

00:05:21,440 --> 00:05:25,919
insights so my idea was this um i would really

00:05:25,919 --> 00:05:29,840
like uh if we could start to share um a bit more

00:05:29,840 --> 00:05:33,440
where are we coming from because if we want to talk about where

00:05:33,440 --> 00:05:36,320
we are heading what's the future of open firmware

00:05:36,320 --> 00:05:39,520
we should also understand a bit what's the um

00:05:39,520 --> 00:05:45,840
past what um is our personal motivation and um yeah what's the presence and then

00:05:45,840 --> 00:05:49,039
not just where we're heading but where we want to head

00:05:49,039 --> 00:05:56,160
where's what's the future we want so um i would like to ask ron to start because

00:05:56,160 --> 00:06:01,840
ron you you i i don't know because um you look very young to me but hong

00:06:01,840 --> 00:06:05,520
phuc just said that you have many years of of

00:06:05,520 --> 00:06:08,400
background and if you could tell us a bit how did

00:06:08,400 --> 00:06:13,600
you get um to into a firmware where how did you start

00:06:13,600 --> 00:06:17,600
core boot a few backgrounds and uh yeah i and

00:06:17,600 --> 00:06:22,080
maybe also point us to where we can find more information and

00:06:22,080 --> 00:06:27,600
because we just have around like 45 minutes here so please ron

00:06:27,600 --> 00:06:34,000
how did it all start yeah um so i won't do 45 years starting when i

00:06:34,000 --> 00:06:40,319
was a teenager i guess but the um linux files in 1999

00:06:40,319 --> 00:06:43,840
uh we had built a supercomputer in los alamos and

00:06:43,840 --> 00:06:49,759
the boot time experience was so terrible because it was an american made transfiles

00:06:49,759 --> 00:06:52,639
and i had just gotten off a project

00:06:52,639 --> 00:06:57,280
where i designed the pci card and realized that now that all the

00:06:57,280 --> 00:07:00,880
hardware was self you could discover the hardware just by

00:07:00,880 --> 00:07:05,039
enumerating it with the config space that meant that we no longer had dip

00:07:05,039 --> 00:07:09,840
switches and little special things and so it seemed that me being i

00:07:09,840 --> 00:07:12,800
actually am a kernel guy who occasionally has to get into firmware

00:07:12,800 --> 00:07:17,199
because the firmware is so awful that we ought to be able to embed a

00:07:17,199 --> 00:07:22,160
linux kernel in flash and have linux be the bios not the crappy firmware that

00:07:22,160 --> 00:07:27,199
was in there so um starting in 1999 we built systems

00:07:27,199 --> 00:07:30,400
where 100 percent of the bytes and firmware were derived

00:07:30,400 --> 00:07:36,160
from gpl code as of today on x86 it's more like about

00:07:36,160 --> 00:07:39,919
six percent if you get a chromebook most of the bytes and firmware are locked

00:07:39,919 --> 00:07:44,560
down on by um actually intel at this point uh or or

00:07:44,560 --> 00:07:48,319
the vendor but in any event there's a really old book

00:07:48,319 --> 00:07:51,360
by uh the guy who invented hypertext called computer lib

00:07:51,360 --> 00:07:55,520
that was very popular in the 70s and the thrust the central

00:07:55,520 --> 00:07:59,199
thrust of that book was we need to own our machines

00:07:59,199 --> 00:08:02,720
so when we get a machine we need to own it and that means we need to own it from

00:08:02,720 --> 00:08:05,919
the first instruction after power on reset up

00:08:05,919 --> 00:08:09,919
through whatever kernel we run up through whatever programs we run so

00:08:09,919 --> 00:08:14,240
that's kind of been the the um focus of my life almost which is

00:08:14,240 --> 00:08:18,560
open source the firmware open source the kernel and now with the euro project

00:08:18,560 --> 00:08:21,120
which is all the user land written and go

00:08:21,120 --> 00:08:24,960
try to build a user land that's understandable because i

00:08:24,960 --> 00:08:29,280
i you know lipsy is a wonderful thing i guess but i can't understand it and

00:08:29,280 --> 00:08:33,919
the [indiscernible] is a big wonderful thing but i can't understand it so

00:08:33,919 --> 00:08:38,479
i think the big focus of my life anyway has been open source such that

00:08:38,479 --> 00:08:42,080
you can understand everything that's going on when you use a computer

00:08:42,080 --> 00:08:45,039
so that's why

00:08:46,320 --> 00:08:50,160
wow and so super computers i think that's also

00:08:50,160 --> 00:08:55,360
a connection to jean-marie you have been working with

00:08:55,360 --> 00:08:59,760
supercomputers you even created a startup in french which is

00:08:59,760 --> 00:09:04,240
successfully sold and now you work in with hpe

00:09:04,240 --> 00:09:09,839
and so what what is what was the start for you to really uh um

00:09:09,839 --> 00:09:13,440
yeah stop working here with uh open source firmware or

00:09:13,440 --> 00:09:16,480
like with this deep level of technology okay

00:09:16,480 --> 00:09:20,959
as crazy as it could look like so i i have been hit by the same issue than ron

00:09:20,959 --> 00:09:24,800
back in the 90s when i was working for cea so that was

00:09:24,800 --> 00:09:29,279
not los alamos but cea the same kind of activities in europe in france

00:09:29,279 --> 00:09:32,480
and um i was designing super computers for them so

00:09:32,480 --> 00:09:36,240
this is this was at the kind of time where they were switching from

00:09:36,240 --> 00:09:40,120
vector technology to superscalar technology so to the alpha

00:09:40,120 --> 00:09:44,000
microprocessors and the boot time of the system was just

00:09:44,000 --> 00:09:47,839
a nightmare and this is when i've been starting to

00:09:47,839 --> 00:09:50,959
be involved into firmware development trying to understand

00:09:50,959 --> 00:09:54,399
why we had the fastest fastest cpu in the world

00:09:54,399 --> 00:09:59,040
with the slowest good time in the world so it was a little bit crazy to me and i

00:09:59,040 --> 00:10:01,600
tried to understand what what was going on

00:10:01,600 --> 00:10:06,079
so we we deployed that super computers but um the boot time was

00:10:06,079 --> 00:10:09,120
just to give a rough idea the boot time was about a day

00:10:09,120 --> 00:10:12,560
so just imagine you turn on your computer in the morning and you have to

00:10:12,560 --> 00:10:17,279
wait up to the evening just to to log in so this was this kind of

00:10:17,279 --> 00:10:19,440
nightmare we were facing with this machine

00:10:19,440 --> 00:10:23,440
and when you crashed the system so you had to wait another day just to

00:10:23,440 --> 00:10:26,560
apply the patch and ensure that the system boots

00:10:26,560 --> 00:10:31,360
so and it was really really a big mess and we tried to improve the firmware at

00:10:31,360 --> 00:10:34,720
that time so then i created my own company which

00:10:34,720 --> 00:10:40,000
was designing computers in europe and i did i didn't wanted to pay a crazy

00:10:40,000 --> 00:10:43,040
amount of money for firmware development so that's why we

00:10:43,040 --> 00:10:48,240
relied on open source technology and back in 2010 i started to be

00:10:48,240 --> 00:10:53,600
involved with an open hardware community trying to understand how we can share um

00:10:53,600 --> 00:10:57,440
better uh our design files and how how could we

00:10:57,440 --> 00:11:00,959
extend the lifecycle of systems so that's the beauty of open

00:11:00,959 --> 00:11:04,079
hardware because we are sharing schematics so anybody around the world

00:11:04,079 --> 00:11:08,399
can fix issues with the hardware and um

00:11:08,399 --> 00:11:13,600
within the ocp communities nobody was really keen to look at what's going on

00:11:13,600 --> 00:11:17,920
regarding firmware so most of the time other designers are

00:11:17,920 --> 00:11:20,959
focused on hardware they do not care about software

00:11:20,959 --> 00:11:26,320
and the operating system designers do not care about the firmware so there's a

00:11:26,320 --> 00:11:30,480
something in the middle that doesn't passionate people

00:11:30,480 --> 00:11:35,440
and um and i i've been hit by a stupid things which was to

00:11:35,440 --> 00:11:38,480
refurbish some servers for some customers

00:11:38,480 --> 00:11:42,079
and these people wanted to use nvme drive

00:11:42,079 --> 00:11:46,480
and the system buyers coming up with the ocp hardware was not able to properly

00:11:46,480 --> 00:11:50,240
boot on nvme because it was to hold and it was not

00:11:50,240 --> 00:11:53,680
integrated and the ufi driver was buggy and didn't work

00:11:53,680 --> 00:11:57,680
properly on the systems and i started to say this is messy and

00:11:57,680 --> 00:12:00,560
this this reminds me of the issues i faced in the

00:12:00,560 --> 00:12:04,240
past with firmware so we need to fix that and i met back

00:12:04,240 --> 00:12:08,399
with the combat communities and ron telling him hey can we find a way to

00:12:08,399 --> 00:12:12,240
to fix all of this crap and um and we ended up to

00:12:12,240 --> 00:12:15,360
start working on linux boot altogether and um

00:12:15,360 --> 00:12:19,040
by the way i've been successful to put that machine on the with the nvme drive

00:12:19,040 --> 00:12:22,839
and the customer is super happy about it now

00:12:22,839 --> 00:12:27,760
so yes thank you very much and i see uh ron

00:12:27,760 --> 00:12:31,920
is nodding so uh absolutely understanding these

00:12:31,920 --> 00:12:34,160
issues before we go a little bit more into the

00:12:34,160 --> 00:12:37,680
topic of firmware and open hardware and how these are connected

00:12:37,680 --> 00:12:41,279
and i want to learn like daniel how did you actually

00:12:41,279 --> 00:12:45,120
meet jean-marie and ron how did this connection start

00:12:45,120 --> 00:12:48,639
and what's your background of course personally also how did you get into

00:12:48,639 --> 00:12:53,360
open source firmware and so that's also quite a long journey

00:12:53,360 --> 00:12:55,839
actually although i guess i'm the youngest here

00:12:55,839 --> 00:13:01,760
so a friend of mine uh which is in the same hackerspace as i am that would be

00:13:01,760 --> 00:13:04,880
philip phillip founded the open source firmware

00:13:04,880 --> 00:13:09,279
conference at some point and he was working on firmware and

00:13:09,279 --> 00:13:12,160
i had actually no clue about it i was always

00:13:12,160 --> 00:13:15,920
fascinated a bit about microcontrollers when we had them

00:13:15,920 --> 00:13:19,440
in university but i mean we were just playing around

00:13:19,440 --> 00:13:23,760
sort of uh but at some point i was getting more

00:13:23,760 --> 00:13:28,480
and more curious and philip uh showed me the x86 side of

00:13:28,480 --> 00:13:32,720
things so from microcontrollers to actual microprocessors

00:13:32,720 --> 00:13:36,639
and then over time i discovered more and more and well

00:13:36,639 --> 00:13:40,000
i can tell you it's a very very deep rabbit hole there

00:13:40,000 --> 00:13:43,680
and that's where eventually then i met ron at one of the

00:13:43,680 --> 00:13:47,519
conferences actually and also jean-marie later on

00:13:47,519 --> 00:13:53,120
and yeah now we're working together on all sorts of things

00:13:55,040 --> 00:14:00,720
okay cool and daniel what is the relationship here um between

00:14:00,720 --> 00:14:05,279
firmware and and uh open hardware um we we heard like

00:14:05,279 --> 00:14:09,040
a firmware okay like long booting times

00:14:09,040 --> 00:14:13,360
of like a day this is like unimaginable today and

00:14:13,360 --> 00:14:18,959
so uh is the story very simple that uh you know like people thought like we

00:14:18,959 --> 00:14:21,040
can't only do firmware we also have to do

00:14:21,040 --> 00:14:24,160
hardware in order to really solve it or um

00:14:24,160 --> 00:14:28,880
can you like introduce us a bit into this area

00:14:28,880 --> 00:14:34,800
yeah so one person once said but i haven't heard it myself i only

00:14:34,800 --> 00:14:37,760
know the citation that if you really care about software

00:14:37,760 --> 00:14:40,320
you would need to create your own hardware

00:14:40,320 --> 00:14:44,560
and i think steve jobs himself even cited that at one of the

00:14:44,560 --> 00:14:48,240
events where he was introducing the iphone um

00:14:48,240 --> 00:14:51,920
but yeah that's that's one thing the other thing is

00:14:51,920 --> 00:14:55,600
there is only very very few people who actually create hardware

00:14:55,600 --> 00:14:59,120
and it only makes sense if many people buy it right because

00:14:59,120 --> 00:15:03,440
it's quite a lot you would need to do to create hardware actually

00:15:03,440 --> 00:15:07,760
but then on the other end hardware doesn't work without firmware

00:15:07,760 --> 00:15:11,279
and then if you ask people who buy the hardware

00:15:11,279 --> 00:15:15,519
they have very very different ideas and needs what they want to do with it

00:15:15,519 --> 00:15:20,000
or you know how they i don't know want to secure it for example so i also have

00:15:20,000 --> 00:15:25,279
a security background and there we have uh well

00:15:25,279 --> 00:15:28,560
sometimes surprises just because we don't know

00:15:28,560 --> 00:15:32,240
some certain things and we discover them at some point

00:15:32,240 --> 00:15:36,320
and that's where i personally also started digging deeper and

00:15:36,320 --> 00:15:40,560
looking into potential issues that we have with the hardware and firmware

00:15:40,560 --> 00:15:46,280
playing together

00:15:48,320 --> 00:15:51,279
mario you're muted

00:15:52,720 --> 00:15:58,480
sorry you brought up this topic but like let's say from a standard

00:15:58,480 --> 00:16:02,160
consumer point of view yeah i look at hardware and i think that's

00:16:02,160 --> 00:16:07,120
hardware and i buy it and yeah okay so many people are often not aware that

00:16:07,120 --> 00:16:12,320
their software running on it and even a layer of firmware so um this is

00:16:12,320 --> 00:16:16,959
actually a pretty exciting and um so how is this

00:16:16,959 --> 00:16:20,800
how could we like describe this to people like uh what what is the firmware

00:16:20,800 --> 00:16:24,079
doing and then why is it even possible i mean like if i

00:16:24,079 --> 00:16:28,000
talk to really deep hardware developers they say actually

00:16:28,000 --> 00:16:32,160
the lines between software and hardware they are starting

00:16:32,160 --> 00:16:36,880
to be blurry more and more and then we now have tools

00:16:36,880 --> 00:16:40,240
like keycard and other cad programs and i know that

00:16:40,240 --> 00:16:44,320
you're working with them and maybe like you could also yeah

00:16:44,320 --> 00:16:48,800
describe us a bit uh what what is what's going on here

00:16:48,800 --> 00:16:52,160
okay um so i've been involved in open hardware community for

00:16:52,160 --> 00:16:56,560
probably not the past 10 years but seven to eight years

00:16:56,560 --> 00:17:00,959
and one of the challenge when you think about open hardware is how do you design

00:17:00,959 --> 00:17:03,279
these these things and how do you make it

00:17:03,279 --> 00:17:08,400
really open and this is the exact same issue then

00:17:08,400 --> 00:17:14,240
when open source software started so we are using uh on the daily um task

00:17:14,240 --> 00:17:19,120
tools which are pretty common like compilers burgers all of these kind of

00:17:19,120 --> 00:17:21,600
things but when you think about order there is

00:17:21,600 --> 00:17:25,520
no three accessible tools just to build up that things

00:17:25,520 --> 00:17:28,640
so that's why i got involved into freecad and kcad

00:17:28,640 --> 00:17:33,200
just to try to provide the tools to build up open hardware

00:17:33,200 --> 00:17:36,960
and there is a lot of involvement and a lot of

00:17:36,960 --> 00:17:41,679
of work to be done in this area so now when speaking about hardware and what is

00:17:41,679 --> 00:17:45,679
the firmware so i think we can we can think about it

00:17:45,679 --> 00:17:51,919
like like a lego so the hardware is not a single piece so when you look at a

00:17:51,919 --> 00:17:55,600
motherboard there is a lot of various chips a lot of various functions a lot

00:17:55,600 --> 00:17:58,559
of various components to interconnect together

00:17:58,559 --> 00:18:02,799
and we have to keep in that in mind that all of these components doesn't know

00:18:02,799 --> 00:18:06,400
each other's and they have to find a way to talk to each other

00:18:06,400 --> 00:18:09,760
and to set them up properly at the right time

00:18:09,760 --> 00:18:13,840
so the soft the firmware is roughly the software which is the blue between the

00:18:13,840 --> 00:18:16,799
lego brick which is the uh hardware component from

00:18:16,799 --> 00:18:20,799
the motherboard and which is just trying to build up something which is coherent

00:18:20,799 --> 00:18:24,160
and and ready to be used by an end users so

00:18:24,160 --> 00:18:28,000
that that is really a mandatory step within the boot process

00:18:28,000 --> 00:18:33,840
of the systems which is creating um something powerful or a piece of crap in

00:18:33,840 --> 00:18:36,320
some way

00:18:36,960 --> 00:18:41,440
okay so um ron we we already had the chance to

00:18:41,440 --> 00:18:45,520
learn from you um about like how trends and and

00:18:45,520 --> 00:18:50,400
your work in different projects um at a number of open hardware meetings um

00:18:50,400 --> 00:18:53,679
that we are running on every saturday and

00:18:53,679 --> 00:18:59,760
so it seems like um this interest in hardware is it's in firmware it's

00:18:59,760 --> 00:19:03,039
it's really growing so um we have more and more

00:19:03,039 --> 00:19:06,880
people often dropping by and so there's um also like more

00:19:06,880 --> 00:19:11,120
activity going on and the question here is as

00:19:11,120 --> 00:19:15,600
more and more people getting into hardware and chip development what

00:19:15,600 --> 00:19:19,440
approach should modern firmware developers follow

00:19:19,440 --> 00:19:21,360
today and i know it's also a bit of a

00:19:21,360 --> 00:19:26,240
philosophical question because when unix was created it had

00:19:26,240 --> 00:19:30,320
simplicity in mind so what would you recommend

00:19:30,320 --> 00:19:34,400
um like developers what approach should they do

00:19:34,400 --> 00:19:38,480
and what would you like to share about your own projects um

00:19:38,480 --> 00:19:43,200
what different approaches exist here yeah i love that question so

00:19:43,200 --> 00:19:48,640
um i started a new project called orboot which is the downstream fork of coreboot

00:19:48,640 --> 00:19:53,840
but all our code is written in rust and at some point i realized as i was doing

00:19:53,840 --> 00:19:57,280
the work that i had it's very easy to fall into the kernel

00:19:57,280 --> 00:20:01,039
trap and and the kernel trap is to decide that your firmware

00:20:01,039 --> 00:20:04,880
is actually kind of a kernel that's what happened to uefi

00:20:04,880 --> 00:20:08,320
that's why uefi has a web server built in that's why it has

00:20:08,320 --> 00:20:11,440
you know all this stuff built in that's why it's actually

00:20:11,440 --> 00:20:16,000
a full up operating system in its own right it even has applications so

00:20:16,000 --> 00:20:20,400
the most important thing that firmware can do is get out of the way um

00:20:20,400 --> 00:20:24,000
do as little as it possibly needs to do to make the

00:20:24,000 --> 00:20:27,039
the platform ready for something like linux or

00:20:27,039 --> 00:20:30,880
plan nine uh but it should be a very very thin

00:20:30,880 --> 00:20:35,760
shim that does as little as possible and the thing that it should never become

00:20:35,760 --> 00:20:39,679
which again is what's happened with uefi it should never become an end in itself

00:20:39,679 --> 00:20:42,320
so this is why i actually don't even like

00:20:42,320 --> 00:20:45,760
to think about myself as a firmware guy i'm actually a kernel guy

00:20:45,760 --> 00:20:49,520
who you know has to write firmware occasionally because what's there is so

00:20:49,520 --> 00:20:52,400
terrible uh case in point again in my view being

00:20:52,400 --> 00:20:56,559
uefi so that avoid the kernel trap right

00:20:56,559 --> 00:20:59,200
don't start thinking in terms of oh i'm gonna do all these wonderful

00:20:59,200 --> 00:21:02,559
abstractions and here's where rust is good about this

00:21:02,559 --> 00:21:05,760
because the whole focus of rust is do everything

00:21:05,760 --> 00:21:10,480
you possibly can at compile time and we're finding an orboot we can

00:21:10,480 --> 00:21:13,520
actually know the size our stack is going to be the

00:21:13,520 --> 00:21:18,880
maximum size of our call stack because of how rust works this is like a

00:21:18,880 --> 00:21:23,039
you know moving toward literally you know 50 years actually beyond c

00:21:23,039 --> 00:21:29,520
um but that also helps you avoid the kernel trap right

00:21:29,520 --> 00:21:32,480
don't don't think of firmware as a kernel think of

00:21:32,480 --> 00:21:35,840
firmware as an unpleasant thing that is there just

00:21:35,840 --> 00:21:40,720
long enough to get things just far enough for linux to run

00:21:40,720 --> 00:21:45,840
that's really a key key idea in my point of view

00:21:47,200 --> 00:21:52,640
okay and um so i would like to the three of you to post a question now here so

00:21:52,640 --> 00:21:57,679
how does um the hardware development then if we

00:21:57,679 --> 00:22:01,039
talk about hardware and firmware how does this development

00:22:01,039 --> 00:22:07,200
direct firmware developers in a specific direction for example uh um we have a

00:22:07,200 --> 00:22:13,039
small uh project the pocket science lab um in the FOSS asia community and um

00:22:13,039 --> 00:22:16,080
there's always this question like where do you want to

00:22:16,080 --> 00:22:19,200
implement for example a feature should it be on the firmware level

00:22:19,200 --> 00:22:22,640
should it be on the level of a python library that's run

00:22:22,640 --> 00:22:26,799
separately and i think there are many more questions and so

00:22:26,799 --> 00:22:30,159
what would you um three of you i mean would you

00:22:30,159 --> 00:22:36,799
um agree on one direction or what what's your opinion who would like to go first

00:22:38,320 --> 00:22:43,919
i can start with that so i guess i'm very much in line with what

00:22:43,919 --> 00:22:49,520
ron was saying so i personally would like to have

00:22:49,520 --> 00:22:54,559
most control of the platform from the side of my operating system or even

00:22:54,559 --> 00:23:01,280
my user space actually right so so my day job is actually web development

00:23:01,280 --> 00:23:05,200
and what i'm doing today is we are building

00:23:05,200 --> 00:23:08,320
applications that can run in your web browser

00:23:08,320 --> 00:23:13,039
and they can run almost autonomously nowadays right so even if you lose your

00:23:13,039 --> 00:23:18,240
connection so like if you're in a tunnel while uh you know traveling in a train

00:23:18,240 --> 00:23:22,000
or something most of the apps that we have today or

00:23:22,000 --> 00:23:25,200
many of them can still operate to some degree because

00:23:25,200 --> 00:23:28,400
of data that is in a cache or something like that

00:23:28,400 --> 00:23:33,200
and when i'm looking at applications that are running on my desktop

00:23:33,200 --> 00:23:36,720
i would like to have a very similar experience so

00:23:36,720 --> 00:23:42,960
i would be i would be really happy if i could do almost everything or even

00:23:42,960 --> 00:23:47,440
more than everything on my platform without any restrictions that i could

00:23:47,440 --> 00:23:51,760
have because you know something is not i know not set up

00:23:51,760 --> 00:23:56,159
properly or something like that so in that sense i actually rely on

00:23:56,159 --> 00:24:00,000
firmware on uh that layer but that should really

00:24:00,000 --> 00:24:03,679
be it then i want to be able to do everything i want

00:24:03,679 --> 00:24:07,360
right then if if we speak about linux for example

00:24:07,360 --> 00:24:11,840
that's actually what it's about for many many people who are running it so they

00:24:11,840 --> 00:24:15,840
don't want to have like a pre-made environment where they can

00:24:15,840 --> 00:24:18,159
only do what the vendor wants them to do but

00:24:18,159 --> 00:24:24,480
they can do everything and you know extend or modify it as they like

00:24:29,120 --> 00:24:35,440
hey can i jump in real quick um i want to offer up a warning before i

00:24:35,440 --> 00:24:40,159
forget um so jean-maries company did this really

00:24:40,159 --> 00:24:43,919
neat thing which was to take these 2012 year of

00:24:43,919 --> 00:24:48,159
facebook nodes you know refurb them set them up resell

00:24:48,159 --> 00:24:53,679
them they're wonderful right they're a fantastic deal um

00:24:53,840 --> 00:24:58,080
that worked because on those machines you could take the flash part out put in

00:24:58,080 --> 00:25:01,039
a new one that you programmed right work fine

00:25:01,039 --> 00:25:05,840
um we are living in a fool's paradise right now because

00:25:05,840 --> 00:25:12,480
many servers post about 2018 if you change one bit one bit

00:25:12,480 --> 00:25:16,960
of the firmware right and my old my just because it's easy one of my standard

00:25:16,960 --> 00:25:20,640
things is change the string dell with some other word if you can guess what it

00:25:20,640 --> 00:25:24,320
is um you change one bit and a machine won't

00:25:24,320 --> 00:25:27,840
boot so we've all lived in a world for the

00:25:27,840 --> 00:25:31,919
past i don't know how many years where if you could figure out what to do

00:25:31,919 --> 00:25:34,320
you could take that firmware and replace it

00:25:34,320 --> 00:25:37,440
with different firmware and that would work

00:25:37,440 --> 00:25:40,960
starting in another year or two you're going to find yourself buying

00:25:40,960 --> 00:25:44,480
old servers or old computers and you're going to want to change the firmware on

00:25:44,480 --> 00:25:48,080
and this is on x86 mind you and you're not going to be able to do it

00:25:48,080 --> 00:25:52,159
you won't be able to change one bit literally one bit without breaking the

00:25:52,159 --> 00:25:56,480
machine so why is that it's because that

00:25:56,480 --> 00:26:00,000
firmware has a sign in key that's enforced in hardware

00:26:00,000 --> 00:26:03,600
the owner of that sign in key is the company that created that

00:26:03,600 --> 00:26:07,200
system they have the key you don't they won't give you the key

00:26:07,200 --> 00:26:10,559
because that key is the same key for millions and millions of systems

00:26:10,559 --> 00:26:14,000
if they give you that key that means they've compromised all the other

00:26:14,000 --> 00:26:18,320
systems they've sold so we live in a world in the x86 space

00:26:18,320 --> 00:26:22,240
where the owner of the system is actually not you it's

00:26:22,240 --> 00:26:26,559
the company that made the machine you so you can't take your machine and

00:26:26,559 --> 00:26:29,840
sell it to someone you can't take your machine and change one bit of firmware

00:26:29,840 --> 00:26:34,000
it's like owning a car with the with the hood welded shut

00:26:34,000 --> 00:26:38,320
so you can't ever see the engine this is kind of why i'm thinking the open source

00:26:38,320 --> 00:26:41,440
community i'm not speaking for anyone but the open source community

00:26:41,440 --> 00:26:46,240
um i think we really need to start thinking about the escape plan

00:26:46,240 --> 00:26:51,760
from the x86 world now because it's just gonna be another few

00:26:51,760 --> 00:26:55,440
years you'll buy a used machine and discover

00:26:55,440 --> 00:26:58,640
there's very very little you can do with it unlike what you can

00:26:58,640 --> 00:27:01,919
do with the kind of servers that jean marie's former company

00:27:01,919 --> 00:27:04,559
sells so just something to keep in mind i just

00:27:04,559 --> 00:27:08,880
wanted to get that warning out there it really is a problem

00:27:09,360 --> 00:27:12,720
i mean that's a really horrible thing ron that's uh

00:27:12,720 --> 00:27:17,120
i don't know if people are aware um what a shocking

00:27:17,120 --> 00:27:23,679
information that is um so um basically like you know our whole idea

00:27:23,679 --> 00:27:27,120
like people looking on the web level on many different levels and they

00:27:27,120 --> 00:27:31,120
have this idea that we now have like open source free open source everywhere

00:27:31,120 --> 00:27:35,520
and it's kind of mainstream but actually we entirely blocked by this

00:27:35,520 --> 00:27:40,799
level and we won't be able to to use this so how are aware

00:27:40,799 --> 00:27:45,039
is the community and actually the public in my view it would concern

00:27:45,039 --> 00:27:48,559
everyone because there's so many devices out there everywhere

00:27:48,559 --> 00:27:52,480
so how aware are people what is your experience

00:27:52,480 --> 00:27:58,480
nobody has a clue yeah i think very few people are aware about these challenges

00:27:58,480 --> 00:28:02,880
um but as you mentioned i'm working at hpe right now so

00:28:02,880 --> 00:28:07,600
the hp engineering is well aware about that situation and the complexity

00:28:07,600 --> 00:28:11,200
to find the right balance between security because um

00:28:11,200 --> 00:28:17,600
the key that ron spoke about um is driven um around how do we improve

00:28:17,600 --> 00:28:22,960
the security of the systems because um most of software can be hacked whatever

00:28:22,960 --> 00:28:25,039
happens so there is always bugs and there

00:28:25,039 --> 00:28:30,080
might be a human um human failures when when the code has been

00:28:30,080 --> 00:28:34,320
written and so finding the right balance between

00:28:34,320 --> 00:28:40,320
what the end user is expecting from his systems to be on highly secure and

00:28:40,320 --> 00:28:46,080
the flexibility to reprogram the systems is something which is super complex so

00:28:46,080 --> 00:28:49,840
what happened into this industry especially at the x86

00:28:49,840 --> 00:28:55,840
level is that the whole industry try to secure as fast as possible on the x86

00:28:55,840 --> 00:29:01,200
platforms without thinking about the flexibility side and this has

00:29:01,200 --> 00:29:05,039
created a couple of generations of platforms

00:29:05,039 --> 00:29:09,279
which are secure but are really unflexible

00:29:09,279 --> 00:29:13,120
and that that is that is part of the current challenge of the industry

00:29:13,120 --> 00:29:16,480
we are trying to address it currently and this is

00:29:16,480 --> 00:29:22,799
this is a very complex engineering issue um i think within the next couple of

00:29:22,799 --> 00:29:26,000
i should say years unfortunately this issue

00:29:26,000 --> 00:29:30,000
is going to be addressed on x86 um but um

00:29:30,000 --> 00:29:36,240
this is still super challenging so that's uh that's a key point so we we

00:29:36,240 --> 00:29:39,200
have some work around which might be coming up for

00:29:39,200 --> 00:29:43,360
for hpe servers within the next couple of quarters

00:29:43,360 --> 00:29:46,880
uh just to keep the the open source community

00:29:46,880 --> 00:29:54,799
um being able to code on on our platform and that's also why i joined hpe just to

00:29:54,799 --> 00:30:00,559
warn them about the challenge that the x86 industry is facing regarding

00:30:00,559 --> 00:30:03,200
open source technology and how how can we

00:30:03,200 --> 00:30:08,159
embrace that so luckily some some of the project that the community has

00:30:08,159 --> 00:30:12,960
has created are adapted at scale so we should mention that and this is also

00:30:12,960 --> 00:30:16,799
helping so open source end users must be

00:30:16,799 --> 00:30:20,720
proud about what they what they are doing and should be showed

00:30:20,720 --> 00:30:26,000
them to their suppliers about a by the way i want to use an open

00:30:26,000 --> 00:30:31,200
source firmware on my platform like open bmc even if we do not like it

00:30:31,200 --> 00:30:36,080
or not or linux boots and or any other

00:30:36,080 --> 00:30:40,960
options like coboot or ubmc that there's plenty of different open source firmware

00:30:40,960 --> 00:30:44,480
project around the world and and we should be reporting to

00:30:44,480 --> 00:30:49,279
all suppliers we need these tools to be able to run on our platforms

00:30:49,279 --> 00:30:53,440
this is going to put some pressure on the suppliers and when there is demand

00:30:53,440 --> 00:30:56,480
and there is an issue most of the time the industry reacts and

00:30:56,480 --> 00:31:00,960
we are able to fix them but i agree with ron so

00:31:00,960 --> 00:31:05,760
the security trend within the industry has created some

00:31:05,760 --> 00:31:09,679
technologies which are really not flexible and we should be caring about

00:31:09,679 --> 00:31:11,919
this

00:31:12,720 --> 00:31:15,919
so i think you raise a number of important

00:31:15,919 --> 00:31:20,399
questions and issues here and one issue that i would also

00:31:20,399 --> 00:31:25,120
like to ask you a bit more about is the um topic of um

00:31:25,120 --> 00:31:30,480
security so um like sometimes like we hear like stories and even it's

00:31:30,480 --> 00:31:33,919
sometimes the topic in the u.s china trade war

00:31:33,919 --> 00:31:37,279
where they say oh yeah um on the chinese hardware

00:31:37,279 --> 00:31:41,120
on huawei or somewhere there there's some firmware or running or there's some

00:31:41,120 --> 00:31:45,919
like code running on the chip and it's it's spying on u.s citizens but

00:31:45,919 --> 00:31:48,720
like in in general like maybe you could shed

00:31:48,720 --> 00:31:52,960
some light on this and what's really like possible here and

00:31:52,960 --> 00:31:56,880
i know this is also a discussion in europe where we uh talk about digital

00:31:56,880 --> 00:32:01,600
sovereignty and in a broader um

00:32:01,600 --> 00:32:04,799
way and so the question is really like uh

00:32:04,799 --> 00:32:09,360
um it's a topic on a national level or on a pan national level but it's also

00:32:09,360 --> 00:32:13,200
topic for the um security of people and companies so

00:32:13,200 --> 00:32:17,679
um what is really going on here what is what is

00:32:17,679 --> 00:32:22,159
true what is fiction and generally here there's a question how

00:32:22,159 --> 00:32:26,159
can we ensure devices are run securely

00:32:26,159 --> 00:32:32,640
and adhere to the user's privacy on each layer okay um let me jump in

00:32:32,640 --> 00:32:35,600
first and give the opportunity to my colleague to

00:32:35,600 --> 00:32:41,039
speak about it so um i am a european citizen

00:32:41,039 --> 00:32:44,159
i'm currently living in the u.s and i can see

00:32:44,159 --> 00:32:48,000
two different approaches regarding security and that that is really

00:32:48,000 --> 00:32:52,720
true and this is also creating the the messy situation into which we are

00:32:52,720 --> 00:32:56,720
currently so in the u.s the security is offloaded

00:32:56,720 --> 00:33:00,000
to the supplier so it means that most of the customers

00:33:00,000 --> 00:33:04,240
doesn't want to hear about security so he wants to have a system which is

00:33:04,240 --> 00:33:08,000
secure and the person who is responsible to deliver

00:33:08,000 --> 00:33:12,480
that security is the supplier so in europe we have a slightly

00:33:12,480 --> 00:33:17,279
different approach so we do not trust people we say um

00:33:17,279 --> 00:33:21,200
my security threat normal is based on the fact that i want to know what's

00:33:21,200 --> 00:33:25,120
going on inside the systems so if you want to provide me a secure

00:33:25,120 --> 00:33:29,039
system for me it is secure or give me access to the source code of

00:33:29,039 --> 00:33:32,399
the of the software which is running on top of your hardware

00:33:32,399 --> 00:33:39,360
so in that approach either you provide your proprietary firmware source

00:33:39,360 --> 00:33:43,760
code to the regulation agencies or you are using

00:33:43,760 --> 00:33:47,279
open source firmware so this is creating an opportunity for open source vmware

00:33:47,279 --> 00:33:52,559
because the source code is um is available the challenge is to try to

00:33:52,559 --> 00:33:55,279
bridge the gap uh between both worlds because

00:33:55,279 --> 00:33:58,480
suppliers are mostly worldwide company currently

00:33:58,480 --> 00:34:01,919
unfortunately there's no not that many local

00:34:01,919 --> 00:34:05,120
suppliers anymore so either the suppliers is

00:34:05,120 --> 00:34:10,480
coming from asia and uh that there are audience or there are us based companies

00:34:10,480 --> 00:34:13,359
there are a few european companies but they are even

00:34:13,359 --> 00:34:18,079
trying to become worldwide suppliers so and and when you are a company like

00:34:18,079 --> 00:34:22,800
hpe and you try to supply the same systems around the world this

00:34:22,800 --> 00:34:26,320
is just creating um another messy situation regarding

00:34:26,320 --> 00:34:29,919
what kind of security model do we have to address and

00:34:29,919 --> 00:34:34,000
how do we do do we provide them the right solution

00:34:34,000 --> 00:34:38,560
so this is the world we are into currently

00:34:38,560 --> 00:34:42,879
and and this is also explaining um all of this complexity i'm more

00:34:42,879 --> 00:34:47,200
big fan about having security through transparency

00:34:47,200 --> 00:34:51,760
instead of secrecy so that is also why i'm pushing for

00:34:51,760 --> 00:34:56,240
open source firmware approach and i think the flexibility will be higher and when

00:34:56,240 --> 00:35:00,400
you look at the operating systems and what happened in the past regarding unix

00:35:00,400 --> 00:35:04,000
and linux so the open source model has been pretty

00:35:04,000 --> 00:35:07,839
efficient at delivering secure systems so

00:35:07,839 --> 00:35:10,960
and if we apply the same models to the firmware world so

00:35:10,960 --> 00:35:14,800
i'm pretty sure we can deliver a highly secure

00:35:14,800 --> 00:35:18,800
firmware stack using open source model so that's that's also

00:35:18,800 --> 00:35:24,560
uh the key things so now i don't know if ron or daniel wants to add some um

00:35:24,560 --> 00:35:28,400
more relevant comments to that specific topics

00:35:28,839 --> 00:35:31,839
 

00:35:32,720 --> 00:35:38,880
i oh i'm sorry uh i thought there's always a small delay

00:35:38,880 --> 00:35:42,160
but like just go ahead all right and i'm worried about cutting

00:35:42,160 --> 00:35:44,320
off daniel again but i just want to mention

00:35:44,320 --> 00:35:47,920
three things um i threw in the links opentitan.org

00:35:47,920 --> 00:35:51,440
oh so first off jean-marie is fighting a good fight

00:35:51,440 --> 00:35:55,280
and really moving the world forward in a good way on

00:35:55,280 --> 00:35:59,760
this issue that i mentioned ownership the end user owns the machine not the

00:35:59,760 --> 00:36:04,000
the company that made it um so open titan is

00:36:04,000 --> 00:36:08,079
what we call silicon root of trust i know i work for google and it's

00:36:08,079 --> 00:36:11,680
and it's been started by google but i think it's really good

00:36:11,680 --> 00:36:15,359
it's really fine work and is worth learning from

00:36:15,359 --> 00:36:20,400
um chromebooks actually implement the world we want to live in when you get a

00:36:20,400 --> 00:36:23,280
chromebook it has keys that were installed by

00:36:23,280 --> 00:36:26,720
google and it's funny i keep telling people this and and

00:36:26,720 --> 00:36:30,720
it's just not widely known for some reason you can change those keys and the

00:36:30,720 --> 00:36:36,320
talk that i link to at linux containers europe 2016 uh in that talk i

00:36:36,320 --> 00:36:39,760
describe how you can build your own version of chrome os

00:36:39,760 --> 00:36:43,920
you can build your own sign in key for it you can put your own keys into the

00:36:43,920 --> 00:36:48,800
chromebook such that they will no longer trust google's built chrome os they only

00:36:48,800 --> 00:36:52,880
trust the chrome os you sign with your key

00:36:52,880 --> 00:36:58,560
and how you can actually build your own over their update server using all the

00:36:58,560 --> 00:37:02,720
standard existing tools so that you can actually create new

00:37:02,720 --> 00:37:06,800
versions of your distro and your chromebook with your keys will

00:37:06,800 --> 00:37:10,560
load that new distro over the air all that stuff is in there

00:37:10,560 --> 00:37:14,160
it's all fairly straightforward to do chromebooks were designed to do it

00:37:14,160 --> 00:37:18,720
you can change the keys infinity times so give you some numbers

00:37:18,720 --> 00:37:22,720
you can change the keys about three times on an intel processor and you're

00:37:22,720 --> 00:37:25,040
done and generally you can't change them

00:37:25,040 --> 00:37:29,200
anyway because there are one-time fuses and you blow those fuses in the intel

00:37:29,200 --> 00:37:33,119
cpu you can no longer change the keys i mean actually in the intel the scio

00:37:33,119 --> 00:37:38,560
hub we talk to companies all the time they have a great security model or so

00:37:38,560 --> 00:37:41,119
they tell us and then we discover oh guess what

00:37:41,119 --> 00:37:44,880
uh those keys they're burned by the company fuses again

00:37:44,880 --> 00:37:48,160
those fuses are burned by the company that built the system and cannot be

00:37:48,160 --> 00:37:51,359
changed or it can only be changed once or twice

00:37:51,359 --> 00:37:54,480
so when i say chromebooks you can change them infinity times

00:37:54,480 --> 00:37:59,040
that's actually really what i mean so there are systems out there that

00:37:59,040 --> 00:38:04,160
implement the world we want to live in you know user control and yet at the

00:38:04,160 --> 00:38:07,200
same time extremely secure you know as far as i

00:38:07,200 --> 00:38:10,560
know nobody's ever broken the chromebook security and you

00:38:10,560 --> 00:38:14,800
know i realized i worked for google but um i was only in chromebook land two

00:38:14,800 --> 00:38:17,599
years i'm just super impressed with the work that

00:38:17,599 --> 00:38:21,359
the chromebook people did to really nail security down and get it right

00:38:21,359 --> 00:38:25,760
so a lot of material to learn from in chromebooks about how you do this right

00:38:25,760 --> 00:38:29,040
anybody doing a new system really should study

00:38:29,040 --> 00:38:32,560
what was done there because the people who did that security were about as good

00:38:32,560 --> 00:38:35,119
as it gets

00:38:36,240 --> 00:38:41,680
okay well i i i can't believe this is uh like i'm aware of a lot of tech topics

00:38:41,680 --> 00:38:47,920
here but it's really shocking to hear um that um you seem to say that the

00:38:47,920 --> 00:38:52,000
level of openness it's it's really limited and like there are chromebooks

00:38:52,000 --> 00:38:56,560
out there they are systems but uh you know it's it seems to be limited

00:38:56,560 --> 00:39:00,720
and uh like how open is

00:39:00,720 --> 00:39:04,320
is how open are things really so um and uh

00:39:04,320 --> 00:39:08,320
we need to look more on the level of hardware and firmware and

00:39:08,320 --> 00:39:12,160
i would like to know from from daniel i know that you are

00:39:12,160 --> 00:39:18,400
um like opening a lot of devices you you're ordering a lot of boards you you

00:39:18,400 --> 00:39:21,920
you're getting them from everywhere and you try to install different systems

00:39:21,920 --> 00:39:24,720
on then and run experiments and all these things

00:39:24,720 --> 00:39:28,400
could you share a bit about your experience here

00:39:28,400 --> 00:39:35,280
and tell us how open um are these uh systems uh currently um

00:39:35,280 --> 00:39:38,880
is the situation really like uh as bleak as

00:39:38,880 --> 00:39:42,320
as ron and jean-marie said from your perspective

00:39:42,320 --> 00:39:47,119
and and yeah of course afterwards right away the question what can we do to

00:39:47,119 --> 00:39:51,839
improve it but maybe you share first a bit about your experience

00:39:51,839 --> 00:39:57,920
yeah so i'm on both ends at the same time right so i

00:39:57,920 --> 00:40:01,680
have a security background i know lots of security issues and

00:40:01,680 --> 00:40:04,880
security requirements that different people have

00:40:04,880 --> 00:40:10,480
or that even i have personally so a friend of mine for example she wanted to

00:40:10,480 --> 00:40:16,800
set up a motherboard in secure boot mode deployed to her own keys and then the

00:40:16,800 --> 00:40:20,400
machine well it started no longer to boot so it

00:40:20,400 --> 00:40:24,319
was dead right and now she has to contact

00:40:24,319 --> 00:40:29,119
their support channels and so on so that's not what we want to have

00:40:29,119 --> 00:40:33,119
as a user but of course a brick is the most secure device that you can have

00:40:33,119 --> 00:40:36,240
right so nobody can run any code on that anymore

00:40:36,240 --> 00:40:40,240
so that's for certain but then again that's not useful

00:40:40,240 --> 00:40:44,800
so the question really is and that's a very very tough question

00:40:44,800 --> 00:40:49,520
actually for security people uh what is legitimate access

00:40:49,520 --> 00:40:52,720
right so the least thing that people let's say

00:40:52,720 --> 00:40:56,800
running a cloud plot platform i would want to have

00:40:56,800 --> 00:41:01,760
is servers that can be just compromised from virtual machines

00:41:01,760 --> 00:41:07,200
and that is or has become an attack scenario that they really had

00:41:07,200 --> 00:41:12,480
to consider and so well vendors developed certain

00:41:12,480 --> 00:41:15,760
different approaches to tackle this issue

00:41:15,760 --> 00:41:22,319
so the thing is we're talking about lots of layers

00:41:22,319 --> 00:41:25,839
actually right so on the one hand side you have the

00:41:25,839 --> 00:41:30,319
hardware itself then you have multiple uh chips that are running

00:41:30,319 --> 00:41:33,839
firmware on top of that you have operating systems well actually

00:41:33,839 --> 00:41:38,880
you have a hypervisor or multiple hypervisors even you might

00:41:38,880 --> 00:41:41,839
have multiple operating systems running on top of

00:41:41,839 --> 00:41:46,240
those and then even more layers of virtualization until

00:41:46,240 --> 00:41:50,800
eventually somebody is running whatever their kubernetes cluster or

00:41:50,800 --> 00:41:54,800
no storage or whatever applications on top

00:41:54,800 --> 00:41:59,359
but that's you know where a serious attacker would then need to start

00:41:59,359 --> 00:42:03,760
and go down the path but it turns out that

00:42:03,760 --> 00:42:09,359
with just a few security holds you can already get there but that's

00:42:09,359 --> 00:42:14,079
really very hard to prevent then if you don't have any

00:42:14,079 --> 00:42:19,440
security really from the ground up and that's where people started to

00:42:19,440 --> 00:42:24,560
realize well maybe we should lock down the firmware

00:42:24,560 --> 00:42:29,760
itself then actually but then again of course the issue is

00:42:29,760 --> 00:42:36,079
if i as a regular consumer or uh if if i buy some used hardware if i want to

00:42:36,079 --> 00:42:40,160
operate those machines then i have a very very

00:42:40,160 --> 00:42:44,880
different scenario right and the more we lock down things

00:42:44,880 --> 00:42:49,200
uh the less accessible they get so if there is not even a chance to reset

00:42:49,200 --> 00:42:52,960
something then this is where it ends so what run

00:42:52,960 --> 00:42:57,119
just described if you can only reprovision a cpu or something

00:42:57,119 --> 00:43:01,359
three times then well that's where it ends right so

00:43:01,359 --> 00:43:05,440
one time you get it i don't know you don't get it right you deploy the wrong

00:43:05,440 --> 00:43:10,960
keys or something you lose your keys and you already lost like another chance of

00:43:10,960 --> 00:43:15,520
the few that you just had so i really think that

00:43:15,520 --> 00:43:19,280
this approach that the chromebooks are having is

00:43:19,280 --> 00:43:23,200
the right approach for that scenario and i also think

00:43:23,200 --> 00:43:30,400
that well hardware vendors which provide cloud infrastructure hardware

00:43:30,400 --> 00:43:36,880
they are also sort of on the right track and now the hard part is

00:43:36,880 --> 00:43:42,160
sometimes features and we're really talking about features that

00:43:42,160 --> 00:43:46,960
were at some point desired they are falling down from

00:43:46,960 --> 00:43:52,720
the like large server side of things to the small consumer devices

00:43:52,720 --> 00:43:56,720
and that's how we end up with devices where you know you want to set up your

00:43:56,720 --> 00:44:01,359
own security system and suddenly you have a break or you can't

00:44:01,359 --> 00:44:06,800
deploy your own firmware because it has the same protection

00:44:06,839 --> 00:44:10,319
mechanism yeah then again uh the best thing i

00:44:10,319 --> 00:44:15,680
think that we can do is well talk about those things uh tell

00:44:15,680 --> 00:44:21,520
people to take things apart and approach vendors right so

00:44:21,520 --> 00:44:25,119
if you have a break don't buy a new device approach your vendor

00:44:25,119 --> 00:44:28,720
ask them about the issue if they can do something about it

00:44:28,720 --> 00:44:32,560
and tell them that this really is a burden to you

00:44:32,560 --> 00:44:37,280
right so that's what those support channels are for and i know that uh

00:44:37,280 --> 00:44:40,480
also vendors are a bit hard to approach but

00:44:40,480 --> 00:44:43,680
you know do whatever you can

00:44:43,680 --> 00:44:47,280
i i want to throw in i think daniel's totally right i i do want to mention

00:44:47,280 --> 00:44:49,440
i've been i've been working with one server

00:44:49,440 --> 00:44:52,560
company for a year not jean-maries company

00:44:52,560 --> 00:44:57,359
they've always been terrific um this company literally it has taken

00:44:57,359 --> 00:45:01,599
about a year to be able to deliver a system to us which is an evaluation

00:45:01,599 --> 00:45:04,640
system where we can change the firmware one

00:45:04,640 --> 00:45:08,960
year of engineering so you know there's 20 years of effort

00:45:08,960 --> 00:45:12,560
that's gone in the x86 world 20 years of work

00:45:12,560 --> 00:45:16,720
has gone into ensuring that only the manufacturer

00:45:16,720 --> 00:45:19,920
can change the firmware and that work has been at every level

00:45:19,920 --> 00:45:24,800
of the chips and and the end result is that even the companies that make these

00:45:24,800 --> 00:45:27,599
systems when you ask them for a system that'll

00:45:27,599 --> 00:45:32,480
let you change the firmware it's really tough and they have to

00:45:32,480 --> 00:45:38,400
for example ensure that an io controller hub from intel nobody accidentally burns

00:45:38,400 --> 00:45:42,160
the fuses on the chip that locks in the key they

00:45:42,160 --> 00:45:44,800
have to leave it in what's called manufacturing mode

00:45:44,800 --> 00:45:48,079
this changes the process by which they build

00:45:48,079 --> 00:45:51,200
things right they have to essentially divert in

00:45:51,200 --> 00:45:54,960
a thing especially out of their process to make sure that

00:45:54,960 --> 00:45:58,160
it doesn't go through a process and end up as blown fuses

00:45:58,160 --> 00:46:05,680
because you can't walk back from that so it is you consider literally billions of

00:46:05,680 --> 00:46:10,160
dollars work has gone into the model of

00:46:10,160 --> 00:46:16,079
the manufacturer owns all the security and all the fusing and all this stuff

00:46:16,079 --> 00:46:19,200
walking back out of that cave is going to be

00:46:19,200 --> 00:46:25,920
is going to be tough and that applies by the way that's a problem in intel x86

00:46:25,920 --> 00:46:29,359
amd x86 it's a problem in parts of the arm world

00:46:29,359 --> 00:46:32,480
i'm very worried that somehow we're going to end up with this being a

00:46:32,480 --> 00:46:36,480
problem in the risk 5 world it's a real attractive model right you

00:46:36,480 --> 00:46:39,359
you're a manufacturer you sell someone a piece of hardware

00:46:39,359 --> 00:46:43,040
you can guarantee to that person that nobody's going to be able to rewrite

00:46:43,040 --> 00:46:46,400
the firmware out from under them that's actually a good property for a lot of

00:46:46,400 --> 00:46:50,560
people but it's a bad property for us in the

00:46:50,560 --> 00:46:53,920
open source community and that right there is the conflict too

00:46:53,920 --> 00:46:57,280
because arguably all this fusing and all this other stuff

00:46:57,280 --> 00:47:00,400
is good but it's not good for us in the open

00:47:00,400 --> 00:47:02,960
source world

00:47:03,520 --> 00:47:07,520
so um i think we also have some questions here already

00:47:07,520 --> 00:47:14,240
about this topic in in the notes and yeah a kind of provocative provocative

00:47:14,240 --> 00:47:17,599
question do hardware vendors understand that

00:47:17,599 --> 00:47:22,720
their software is crude and not care or do they generally think

00:47:22,720 --> 00:47:26,240
they're doing a good job

00:47:29,100 --> 00:47:32,240
i think we have to keep in mind that the people who are building this stuff

00:47:32,240 --> 00:47:37,360
are still human so failure is part of the equation so

00:47:37,360 --> 00:47:41,760
because we are humans that's the first things the second things when i look at

00:47:41,760 --> 00:47:47,440
what's going on at the company like hpe um so we we are still designing our

00:47:47,440 --> 00:47:51,520
firmware from scratch so which is getting pretty uncommon

00:47:51,520 --> 00:47:56,160
currently so most of the arms are relying on external

00:47:56,160 --> 00:47:59,200
companies to provide them a firmware stack

00:47:59,200 --> 00:48:02,400
but in our cases we are still designing system firmware

00:48:02,400 --> 00:48:07,760
and we didn't mention one things yet but there are firmware everywhere within the

00:48:07,760 --> 00:48:10,880
computers so and when we speak about firmware most

00:48:10,880 --> 00:48:14,559
of the time we think about system firmware or remote management firmware

00:48:14,559 --> 00:48:19,599
but there is also firmware embedded um into microcontrollers

00:48:19,599 --> 00:48:25,599
in some cases on fpgas or or pci express boards so all of these

00:48:25,599 --> 00:48:31,040
firmwares have to talk to each other and um if i took the case from hpe for

00:48:31,040 --> 00:48:34,079
example we designed the firmware for the system

00:48:34,079 --> 00:48:37,359
tiles for example and the remote management but we

00:48:37,359 --> 00:48:40,640
we stopped designing it for the pci express card

00:48:40,640 --> 00:48:45,760
so which means that we have to create interfaces between our own software

00:48:45,760 --> 00:48:50,400
and pci express card vendor software to be sure that it works

00:48:50,400 --> 00:48:53,839
and even if we are deeply testing these things

00:48:53,839 --> 00:48:58,640
um bugs appears and they are part of the equations they are

00:48:58,640 --> 00:49:02,720
they are part of the lifecycle software systems what is really key is not to

00:49:02,720 --> 00:49:06,319
try to reach a bug-free solution because i think it's

00:49:06,319 --> 00:49:10,160
getting impossible with the complexity of the current firmware stacks

00:49:10,160 --> 00:49:14,079
even with the open source firmware solutions

00:49:14,079 --> 00:49:17,119
but what is key is how do you fix the bug

00:49:17,119 --> 00:49:24,480
what kind of options do you offer to the end user to fix these issues and um

00:49:24,480 --> 00:49:28,800
what we are just trying to do is to provide good support quality

00:49:28,800 --> 00:49:32,400
so i know that some people will probably complain about the support quality from

00:49:32,400 --> 00:49:34,800
our oems but this is what the oems are trying to

00:49:34,800 --> 00:49:37,359
bring in and we are trying to support some

00:49:37,359 --> 00:49:42,240
open source firmware which are good options for people who are willing to

00:49:42,240 --> 00:49:46,079
fix bugs by themselves or rely on external people

00:49:46,079 --> 00:49:51,680
uh from their outdoor vendor to support their software stack so i think

00:49:51,680 --> 00:49:54,240
that's that's the beauty of the open source world

00:49:54,240 --> 00:49:56,800
but um

00:49:57,520 --> 00:50:02,000
what is really key to understand is that firmware when you think about linux boot

00:50:02,000 --> 00:50:06,000
so linux boot is building a linux kernel so and if you look at the size of the

00:50:06,000 --> 00:50:10,800
linux kernel this is just a big piece of software and there is

00:50:10,800 --> 00:50:14,400
bugs so this happens whenever whenever we can

00:50:14,400 --> 00:50:19,680
think yeah and we're actually discussing here

00:50:19,680 --> 00:50:23,200
on several channels at the same time so uh

00:50:23,200 --> 00:50:27,280
ron just mentioned i've been told on a modern server in future there

00:50:27,280 --> 00:50:33,359
may be several hundred firmware images and like for different uh devices for

00:50:33,359 --> 00:50:36,960
example voltage regulators and daniel says yeah

00:50:36,960 --> 00:50:40,720
uh usbc power delivery requires firmware to

00:50:40,720 --> 00:50:43,680
negotiate the voltage to supply for example

00:50:43,680 --> 00:50:47,760
and and you don't want your charger running as keystroke logger

00:50:47,760 --> 00:50:53,359
which you could do now shockingly and um like we are approaching the end of this

00:50:53,359 --> 00:50:57,119
session and it seems like we are actually only

00:50:57,119 --> 00:51:03,040
getting started with a topic but um i think um this also raises the

00:51:03,040 --> 00:51:08,000
question um about what influence can a community or

00:51:08,000 --> 00:51:12,000
can consumers can freedom loving people have compared

00:51:12,000 --> 00:51:16,400
to like let's say companies corporations and we of course

00:51:16,400 --> 00:51:19,119
know that the world is not black and white

00:51:19,119 --> 00:51:21,760
yeah but like what influence could different

00:51:21,760 --> 00:51:27,440
stakeholders um have here and when more firmware

00:51:27,440 --> 00:51:30,480
components or firmware is running on different components and

00:51:30,480 --> 00:51:34,240
of your devices and devices are everywhere iot and so on

00:51:34,240 --> 00:51:37,839
we just see more and more so um how big will be

00:51:37,839 --> 00:51:42,240
our influence or what can we do what will companies do

00:51:42,240 --> 00:51:45,599
i think there is there is two things that people can think about

00:51:45,599 --> 00:51:49,280
the first things you know what kind of security model do they want to apply to

00:51:49,280 --> 00:51:53,040
their it equipment so do they want to rely on external

00:51:53,040 --> 00:51:56,640
companies or do they want to be lit up and have the freedom

00:51:56,640 --> 00:52:01,119
um to upgrade and manage their own security it is really really key

00:52:01,119 --> 00:52:08,000
to decide that strategy and and um and and the second things you know um

00:52:08,000 --> 00:52:12,400
if you want to use open source firmware um do not forget to mention it to

00:52:12,400 --> 00:52:16,640
your suppliers because i know a lot of people who are

00:52:16,640 --> 00:52:21,040
willing to use open source firmware but are still shy to request it because they

00:52:21,040 --> 00:52:25,119
do not think that it could be doable why

00:52:25,119 --> 00:52:28,800
it could be for some suppliers and i think it's really key

00:52:28,800 --> 00:52:35,760
just to be proud about your expectation and just request it so that's there's no

00:52:35,760 --> 00:52:40,000
reason why being shy about about that demand and um if you think

00:52:40,000 --> 00:52:44,480
that your security model is based on transparency just claim it

00:52:44,480 --> 00:52:48,160
and and ask for it so and it's um that is

00:52:48,160 --> 00:52:51,839
super important whether when i came into hpe for example

00:52:51,839 --> 00:52:55,839
the first remark i received was there's no demand for that

00:52:55,839 --> 00:53:00,000
that technology and part of my job was not to engineer

00:53:00,000 --> 00:53:03,040
the product it was just to prove that there was demand

00:53:03,040 --> 00:53:07,280
and and when i started that that journey i discovered that a lot of

00:53:07,280 --> 00:53:11,119
our customers were extremely shy about their requirement

00:53:11,119 --> 00:53:15,119
and when they are inside the open source firmware community or an open source

00:53:15,119 --> 00:53:19,599
community they are really keen to share what they are expecting but when when

00:53:19,599 --> 00:53:26,079
there is a business related relationship so it's um it's more difficult just to

00:53:26,079 --> 00:53:30,000
to get the insight of the requirements on a general purpose basis and i think

00:53:30,000 --> 00:53:33,040
it's super important just to share it with your suppliers

00:53:33,040 --> 00:53:37,119
whoever the supplier is so i'm not speaking for hpe only but

00:53:37,119 --> 00:53:41,440
i'd be super happy that more different companies adopt this kind of technology

00:53:41,440 --> 00:53:47,040
because this is the best way to make it grow yeah

00:53:47,040 --> 00:53:52,400
okay so um i think we covered a lot in this session we are approaching

00:53:52,400 --> 00:53:59,280
the end so i would like to um yeah ask you um after we learned about

00:53:59,280 --> 00:54:02,720
the past we learned about the presence even though i feel we

00:54:02,720 --> 00:54:08,240
barely touched the surface of this topic so the question is where can

00:54:08,240 --> 00:54:11,520
people follow up where can they learn more about this i

00:54:11,520 --> 00:54:14,720
see in the notes that people even have very

00:54:14,720 --> 00:54:20,800
specific technical questions um for example uh in a chromebook

00:54:20,800 --> 00:54:25,200
for end users to change the firmware and so on so how to do it with motherboard

00:54:25,200 --> 00:54:29,040
jumpers and so on i think we we aren't able to cover this

00:54:29,040 --> 00:54:32,880
completely i also see alvin mentioning risk five

00:54:32,880 --> 00:54:37,440
which we often discuss in in our weekly meetings as well and

00:54:37,440 --> 00:54:40,880
so um it seems like more and more is going on

00:54:40,880 --> 00:54:45,359
in regards to open firmware and open hardware and what will you be doing over

00:54:45,359 --> 00:54:49,440
the next few days and weeks and months what are your plans

00:54:49,440 --> 00:54:54,400
personally and to work now and where what do you recommend to people where

00:54:54,400 --> 00:54:59,200
they can find um more information where can they engage

00:54:59,200 --> 00:55:05,280
um what should be the next steps from your perspective and uh yeah maybe

00:55:05,280 --> 00:55:10,240
daniel would you like to start yeah one thing uh that we can

00:55:10,240 --> 00:55:14,400
already announce so the open source firmware conference

00:55:14,400 --> 00:55:17,520
this year will be happening a bit later than usual

00:55:17,520 --> 00:55:20,720
that's uh you know because corona and so on this

00:55:20,720 --> 00:55:26,000
year it will be in december if you go to osfc.io that's where you

00:55:26,000 --> 00:55:30,079
will find everything and if you are even interested in

00:55:30,079 --> 00:55:34,079
participating and providing some of your ideas the

00:55:34,079 --> 00:55:39,520
call for participation is still open so you can just send in your ideas

00:55:39,520 --> 00:55:45,680
we will be very very happy to take them and then again we have the very very

00:55:45,680 --> 00:55:49,680
many projects that we already mentioned so if you want

00:55:49,680 --> 00:55:52,599
to learn about core boot for example you can go to

00:55:52,599 --> 00:56:00,839
coreboot.org that's c-o-r-e-b-o-o-t dot org likewise for linux boot there is

00:56:00,839 --> 00:56:06,920
linuxboot.org and then there is the euro project that's

00:56:06,920 --> 00:56:10,960
u-root.org that's already very nice places to get

00:56:10,960 --> 00:56:15,280
started and eventually we also have a slack team

00:56:15,280 --> 00:56:18,400
for the open source firmware community and

00:56:18,400 --> 00:56:21,599
you will find the links to join that one also on for

00:56:21,599 --> 00:56:26,640
example the europe website yeah thank you very much and the

00:56:26,640 --> 00:56:31,520
moderator just told me we have to end so um very brief final state

00:56:31,520 --> 00:56:36,400
statements please from ron and jean-marie i'm pretty sure

00:56:36,400 --> 00:56:39,119
that the open source firmware has a bright future

00:56:39,119 --> 00:56:44,319
and uh i'm working extremely hard to make it happen on hpe platform currently

00:56:44,319 --> 00:56:48,000
the ocp communities is trying to get it adopted also

00:56:48,000 --> 00:56:54,000
on um odm's platform so um i think we we just need to make match

00:56:54,000 --> 00:56:57,520
the demand with the supply and um and this is how we are going to

00:56:57,520 --> 00:57:01,040
fix issues and um and we just need to move forward

00:57:01,040 --> 00:57:05,280
around this i'm i'm super optimistic and enjoying working

00:57:05,280 --> 00:57:08,960
within this space currently

00:57:09,839 --> 00:57:15,680
yeah yeah so i would say if you like writing programs then go to

00:57:15,680 --> 00:57:19,200
run under linux if you like hacking on a kernel or if you would like to join a

00:57:19,200 --> 00:57:24,400
brand new rust firmware project we have

00:57:24,400 --> 00:57:29,680
help we need at all those levels and you can really make a big impact on on

00:57:29,680 --> 00:57:33,760
the future of this so you know i i hope we if we can even get

00:57:33,760 --> 00:57:38,720
one person watching this to get involved this has been time well spent for us i

00:57:38,720 --> 00:57:43,119
think please if you're interested let us know

00:57:43,119 --> 00:57:46,400
excellent thank you very much so call to action for everyone

00:57:46,400 --> 00:57:50,559
the stakes are pretty big thank you very much for joining this session

00:57:50,559 --> 00:57:54,559
and we hope to share more about this in future and thank you to the

00:57:54,559 --> 00:57:58,400
um speakers and to hong phuc making this very beautiful introduction and to

00:57:58,400 --> 00:58:02,720
everyone at the osi and to making this event so see you at

00:58:02,720 --> 00:58:06,400
the event furthermore and yeah keep in touch everyone let's

00:58:06,400 --> 00:58:09,520
build a better future thank you very much have a good day

00:58:09,520 --> 00:58:14,720
everybody bye thanks a lot good job

00:58:46,799 --> 00:59:02,480

YouTube URL: https://www.youtube.com/watch?v=6nxjlxIA_x4


