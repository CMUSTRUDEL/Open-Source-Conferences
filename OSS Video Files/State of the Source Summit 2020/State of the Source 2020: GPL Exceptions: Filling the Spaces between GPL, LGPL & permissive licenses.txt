Title: State of the Source 2020: GPL Exceptions: Filling the Spaces between GPL, LGPL & permissive licenses
Publication date: 2020-10-08
Playlist: State of the Source Summit 2020
Description: 
	GPL Exceptions: Filling the Spaces between GPL, LGPL and permissive licenses
Karen M Sandler and Bradley M Kuhn

Exceptions have been a mainstay of copyleft licensing since the creation of the GPL For the casual FOSS developer and integrator, exceptions are a rare discovery in a random source file or two, and they do not command great attention.  However, they are nonetheless an essential part of the copyleft licensing system.

In this talk, Kuhn and Sandler will introduce the general idea of GPL exceptions and how they work to carve out the spectrum of licensing between the GPL, LGPL, and the highly permissive licenses.  Specifically, Kuhn and Sandler will cover in detail the GCC Runtime Library Exception, which they both helped draft.  They will also discuss the AGPLv3 Web Template Output Additional Permission, which was published by Conservancy initially for use by the Houdini project.

Thank you to our Video Recordings Sponsor eng@salesforce!
Full Program: https://eventyay.com/e/8fa7fd14/schedule
Captions: 
	00:00:04,560 --> 00:00:08,080
hi i'm karen sandler and i'm bradley kuhn

00:00:08,080 --> 00:00:11,519
and this is our presentation at state of the source

00:00:11,519 --> 00:00:16,480
um certainly is i i guess i want to start out by

00:00:16,480 --> 00:00:20,880
congratulating the osi um i is this i think this might be their

00:00:20,880 --> 00:00:23,359
first conference is that right bradley it's the first one i've

00:00:23,359 --> 00:00:26,480
been to anyway oh it's certainly the first one in a long time

00:00:26,480 --> 00:00:29,920
if it's not their first one uh so congratulations for that and

00:00:29,920 --> 00:00:35,200
congratulations to osi for uh their new interim general manager

00:00:35,200 --> 00:00:37,920
deb nicholson who uh previously had worked with us at

00:00:37,920 --> 00:00:41,200
software freedom conservancy so i think it's a really exciting time

00:00:41,200 --> 00:00:46,239
for osi and we're really happy to be here at this event

00:00:46,399 --> 00:00:49,680
so if you don't already know us i'm bradley kuhn i'm the policy fellow at

00:00:49,680 --> 00:00:53,680
software freedom conservancy uh where finally after many many years i have a

00:00:53,680 --> 00:00:58,879
job that is just to work on stuff like this so that's kind of nice

00:00:58,879 --> 00:01:03,199
and i'm karen sandler um i am the executive director and president

00:01:03,199 --> 00:01:09,200
of software freedom conservancy um uh i am going to give you this super

00:01:09,200 --> 00:01:12,159
short version of why i care about software freedom which is that i

00:01:12,159 --> 00:01:15,280
have a pacemaker defibrillator and i can't see the source code in my

00:01:15,280 --> 00:01:20,000
own body and living with a device that really wasn't designed exactly for

00:01:20,000 --> 00:01:24,159
my needs made me realize that i it's really

00:01:24,159 --> 00:01:27,040
important for us to be in control of our own technology

00:01:27,040 --> 00:01:30,640
and so software freedom has become something that is really passionate for

00:01:30,640 --> 00:01:35,280
me and i would add that who else but a karen would

00:01:35,280 --> 00:01:40,159
ask the manager for the source code in their own defibrillator

00:01:40,159 --> 00:01:43,200
so karen what is our talk about today our

00:01:43,200 --> 00:01:47,680
talk is about gpl exceptions so i'm going to start by taking exception with

00:01:47,680 --> 00:01:51,600
our title and point out that the the reason i've

00:01:51,600 --> 00:01:54,720
not liked this phrase exceptions although it was the standard word for

00:01:54,720 --> 00:01:56,960
this stuff we're going to talk about today

00:01:56,960 --> 00:02:00,640
uh for the longest time is that software developers

00:02:00,640 --> 00:02:04,719
when they hear the word exception they think it's something annoying they have

00:02:04,719 --> 00:02:09,119
to deal with or as as most is said in computer science

00:02:09,119 --> 00:02:12,160
they have to deal with exception handling that it's this annoying extra

00:02:12,160 --> 00:02:14,160
thing that you have to handle and if you don't

00:02:14,160 --> 00:02:16,959
handle it you get a stack trace thrown back at you

00:02:16,959 --> 00:02:23,840
and so i think exceptions and licenses are really great things

00:02:25,440 --> 00:02:29,120
so i say we should call them with what they are additional permissions

00:02:29,120 --> 00:02:32,239
right so this slide is uh so i i agree with this um

00:02:32,239 --> 00:02:38,800
so bradley uh wrote this one and i agree with it uh but i do want to add that

00:02:38,800 --> 00:02:42,400
it's a little bit of a problem because uh people

00:02:42,400 --> 00:02:47,360
refer to non-copyleft licenses as permissive licenses and that's a little

00:02:47,360 --> 00:02:52,800
bit misleading because often over time the non-copy left licenses wind up

00:02:52,800 --> 00:02:55,360
giving you a lot less permission with what you can do

00:02:55,360 --> 00:02:58,000
with the software over time whereas copy left gives you

00:02:58,000 --> 00:03:01,599
more permissions over time in effect but um so you have to kind of be

00:03:01,599 --> 00:03:05,519
careful with that but in this context i think that additional permissions really

00:03:05,519 --> 00:03:11,840
uh is a lot more descriptive and good so bradley when was the first additional

00:03:11,840 --> 00:03:16,239
permission i thought that it was bison and that's you thought that because i

00:03:16,239 --> 00:03:20,800
told it to you and i was wrong so we did extensive research for this

00:03:20,800 --> 00:03:24,799
talk and i discovered in my extensive research according to

00:03:24,799 --> 00:03:29,440
the releases of bison and gcc the first additional permission ever

00:03:29,440 --> 00:03:34,239
was the one that later karen and i were involved in revamping which is the

00:03:34,239 --> 00:03:39,040
gcc additional permission and the fact is the gcc additional

00:03:39,040 --> 00:03:44,640
permission or exception and the bison exception have a lot in common the

00:03:44,640 --> 00:03:48,159
key thing that they have in common is in both cases they're dealing with a

00:03:48,159 --> 00:03:51,920
situation of compiler technology which in some

00:03:51,920 --> 00:03:54,959
cases copies some of its own code into the

00:03:54,959 --> 00:03:58,239
resulting binary so what a compiler does is turns your

00:03:58,239 --> 00:04:01,360
program into a binary version that the computer

00:04:01,360 --> 00:04:03,840
can run from the source code that you wrote

00:04:03,840 --> 00:04:07,680
and to get that to work for technical details beyond the scope of this talk

00:04:07,680 --> 00:04:11,680
it needs to include some of its own code either from a library like libgcc or in

00:04:11,680 --> 00:04:15,120
the case of bison it actually copies some of its own code

00:04:15,120 --> 00:04:18,239
and so historically this was what we thought

00:04:18,239 --> 00:04:22,880
the special case for exceptions would be in the free software world because we

00:04:22,880 --> 00:04:25,759
were only working in c in the early 90s and mid 90s in free

00:04:25,759 --> 00:04:30,240
software and this is really the place in c programming where it comes up that you

00:04:30,240 --> 00:04:33,199
need an additional permission to make the gpl

00:04:33,199 --> 00:04:36,400
go away when you want the user to be able to run

00:04:36,400 --> 00:04:40,080
a proprietary software that's compiled with your compiler technology

00:04:40,080 --> 00:04:43,280
for folks that are not looking at the slides if you could just go back so

00:04:43,280 --> 00:04:46,479
almost all of these slides are just the text of the

00:04:46,479 --> 00:04:50,800
um the text of the exception that we're talking about and the reason why i think

00:04:50,800 --> 00:04:53,680
that i never even thought to well i never

00:04:53,680 --> 00:04:56,720
thought a question that bison was the first one because you told me that and i

00:04:56,720 --> 00:05:00,479
thank you so much actually for all the help you gave me when i was just

00:05:00,479 --> 00:05:03,680
learning getting started and everything that was really including not knowing

00:05:03,680 --> 00:05:08,240
that 1995 was before 1992. well you've always had a problem with

00:05:08,240 --> 00:05:10,800
time travel

00:05:11,039 --> 00:05:15,840
but uh the uh but one of the reasons why i thought that a right made sense is that

00:05:15,840 --> 00:05:19,199
bison is just a simple like it's the simplest exception it's just one

00:05:19,199 --> 00:05:22,639
sentence um and you know it's just uh where this

00:05:22,639 --> 00:05:26,000
file is copied by bison into a bison output file you may use that output file

00:05:26,000 --> 00:05:30,000
without restriction uh and you know like an exception can be

00:05:30,000 --> 00:05:34,960
as simple as that and so and and in the general general

00:05:34,960 --> 00:05:38,479
sense everybody thought in the early days of

00:05:38,479 --> 00:05:41,280
copyleft licensing that really you needed two copyleft

00:05:41,280 --> 00:05:45,360
licenses you had the gpl which was the strongest copy left tries to extend

00:05:45,360 --> 00:05:50,720
as far as the legal regime will take it as far as you can go on a contract and

00:05:50,720 --> 00:05:53,919
copyright gpl tries to go there to try to make everything

00:05:53,919 --> 00:05:57,120
free software uh which is why it's often criticized because people don't want

00:05:57,120 --> 00:06:00,720
their stuff to be free software at least proprietary software people don't

00:06:00,720 --> 00:06:04,000
and then we have the lgpl which was specifically designed for

00:06:04,000 --> 00:06:08,160
a c likened via unix and c like environment where you had

00:06:08,160 --> 00:06:12,400
a c library that was under the lgpl and you could build proprietary programs

00:06:12,400 --> 00:06:17,120
and combine them with lgpl lgpl was written as its own complicated license

00:06:17,120 --> 00:06:21,199
lgplv 2.1 i think is one of the most difficult licenses in free software to

00:06:21,199 --> 00:06:25,680
read but we had it and what we discovered was

00:06:25,680 --> 00:06:33,039
that it didn't always work just right oh i was actually just i just said uh

00:06:33,039 --> 00:06:36,479
i was just saying what do you mean bradley

00:06:36,720 --> 00:06:41,120
so so i i the first place we saw this i think was java

00:06:41,120 --> 00:06:44,720
because java was this system that was not coming out of the free software

00:06:44,720 --> 00:06:48,319
community was developed by a proprietary software company namely sun

00:06:48,319 --> 00:06:53,120
which is still existed in those days and folks wanted to re-implement it as free

00:06:53,120 --> 00:06:55,919
software and when you had a competing job

00:06:55,919 --> 00:07:00,479
implementation that was frankly in the late 90s and early 2000s not as

00:07:00,479 --> 00:07:03,840
featureful as the one from the proprietary company

00:07:03,840 --> 00:07:07,360
that invented the language there was some desire to get people to

00:07:07,360 --> 00:07:11,199
adopt it and quite frankly most people were writing proprietary software in

00:07:11,199 --> 00:07:13,120
java so the question was is could you get

00:07:13,120 --> 00:07:15,599
people to adopt a free version of something

00:07:15,599 --> 00:07:18,720
that they were that was already available fully functional as

00:07:18,720 --> 00:07:22,080
proprietary software when they wanted to write proprietary

00:07:22,080 --> 00:07:26,080
software with it anyway the lgpl was the original license of the

00:07:26,080 --> 00:07:29,520
java libraries which are called the classpath libraries

00:07:29,520 --> 00:07:36,240
but the license of lgpl was after sometime found to be difficult and

00:07:36,240 --> 00:07:40,479
problematic for a java environment

00:07:40,479 --> 00:07:43,520
bradley didn't you help write the classpath exception

00:07:43,520 --> 00:07:47,599
this is actually my fro later on we have your first drafting uh this was my first

00:07:47,599 --> 00:07:51,120
drafting experience i drafted some parts of this

00:07:51,120 --> 00:07:55,199
uh and uh and one of the interesting things i

00:07:55,199 --> 00:07:58,720
felt about it was i felt it was i thought we should call it the least gpl

00:07:58,720 --> 00:08:02,400
because it was sort of the least copy left you could get by permitting almost

00:08:02,400 --> 00:08:04,720
everything but it was really what the target

00:08:04,720 --> 00:08:08,080
audience of free job implementations needed at the

00:08:08,080 --> 00:08:12,960
time because there was a real need to get proprietary

00:08:12,960 --> 00:08:19,039
developers to switch to a free java and was there um you had a link to the

00:08:19,039 --> 00:08:22,479
uh the mail announced but is there was

00:08:22,479 --> 00:08:25,680
there a public process for that or discussions on mailing lists

00:08:25,680 --> 00:08:28,720
sadly no there were some discussions on mailing lists but most of the

00:08:28,720 --> 00:08:31,360
discussions were in in back channels and i think that's

00:08:31,360 --> 00:08:34,000
lamentable and we're going to talk a little bit later about why it's

00:08:34,000 --> 00:08:36,640
important to to really have a community engagement and a

00:08:36,640 --> 00:08:40,000
process that includes different types of people in licensed drafting

00:08:40,000 --> 00:08:43,120
but everything was done in the back channels i certainly have some things

00:08:43,120 --> 00:08:46,080
in my email archives that even though i was just reviewing as we prepare for

00:08:46,080 --> 00:08:48,320
this talk i'm not i'm still not sure about how

00:08:48,320 --> 00:08:50,560
much i'm allowed to say i mean i wish it were

00:08:50,560 --> 00:08:53,600
like the government where confidential files were automatically released after

00:08:53,600 --> 00:08:55,519
a period of time so i don't know which of those

00:08:55,519 --> 00:08:57,920
confidential files i'm allowed to release but there certainly was a

00:08:57,920 --> 00:09:03,200
tremendous amount of back channel political process involved that i wish

00:09:03,200 --> 00:09:08,160
had been more public so was it hotly contested is that i i i

00:09:08,160 --> 00:09:11,839
think that i think it was a little hotly hotly contested i think one of the key

00:09:11,839 --> 00:09:14,480
things that was hotly contested about it was

00:09:14,480 --> 00:09:18,800
this both sides were unhappy because on the one hand you had people who

00:09:18,800 --> 00:09:22,000
believed in strong copyleft and said well the lgpl is what we have and we

00:09:22,000 --> 00:09:24,160
should use that and the other side there's people's well

00:09:24,160 --> 00:09:26,720
proprietary developers are not going to adopt

00:09:26,720 --> 00:09:30,000
classpath if it's under the lgpl because they don't want to have to provide the

00:09:30,000 --> 00:09:31,920
source for the classpath libraries if they

00:09:31,920 --> 00:09:35,760
don't have to and lgpl requires that you provide the source of the libraries and

00:09:35,760 --> 00:09:39,360
allow reverse engineering and all these other things that lgbl requires

00:09:39,360 --> 00:09:42,640
um and so and so but neither side was happy uh

00:09:42,640 --> 00:09:46,000
about about this compromise and it ultimately was a compromise

00:09:46,000 --> 00:09:50,240
um so so i think that was that was a real good example of where

00:09:50,240 --> 00:09:54,080
the copyleft space is a little broader than we think than just being lgpl or

00:09:54,080 --> 00:09:57,600
gpl yeah well and ultimately um so this

00:09:57,600 --> 00:10:02,480
slide says ad hoc under gplv2 ultimately under gplv2

00:10:02,480 --> 00:10:05,839
the license doesn't say anything about exceptions exceptions were just

00:10:05,839 --> 00:10:09,920
something that were tacked on afterwards when there was a need so when

00:10:09,920 --> 00:10:12,640
people realized that whatever it was that they needed to do with their

00:10:12,640 --> 00:10:17,200
software wouldn't work under gplv2 and so like

00:10:17,200 --> 00:10:22,480
the license notices were were just attached into individual files

00:10:22,480 --> 00:10:24,959
which made it um somewhat complicated because

00:10:24,959 --> 00:10:27,200
there really was no framework about them i mean

00:10:27,200 --> 00:10:30,480
they work i think they work but it's it's it's not

00:10:30,480 --> 00:10:34,959
um it's it's a a fix that is pasted on afterwards

00:10:34,959 --> 00:10:38,640
yeah and this got so bad by attaching them to files at one point in the mid

00:10:38,640 --> 00:10:43,279
2000s we discovered that the gcc code base had um three or four

00:10:43,279 --> 00:10:46,320
different drafts of the various versions of the

00:10:46,320 --> 00:10:49,200
gcc exception they were we ultimately determined they were all

00:10:49,200 --> 00:10:51,279
legally equivalent but they were slightly

00:10:51,279 --> 00:10:54,079
different drafting and it was very confusing to people who were trying to

00:10:54,079 --> 00:10:57,120
add these to new programs because other people wanted to use them

00:10:57,120 --> 00:11:00,880
so a huge benefit of gplv3 was it added this additional permission

00:11:00,880 --> 00:11:05,200
infrastructure to the license yeah so gplv3 has a

00:11:05,200 --> 00:11:08,240
section in its in the main text that spec that

00:11:08,240 --> 00:11:11,040
spells out how you can do additional permissions it

00:11:11,040 --> 00:11:13,440
calls them additional permissions and it specifies

00:11:13,440 --> 00:11:16,720
what kinds of things would be considered additional permissions and what would be

00:11:16,720 --> 00:11:22,240
considered restrictions it says that if if you want to

00:11:22,240 --> 00:11:25,279
you can remove the additional permission which is

00:11:25,279 --> 00:11:29,600
fantastic because it helps you avoid those additional restrictions if uh if

00:11:29,600 --> 00:11:33,920
it's not very clear and also it allows you to combine

00:11:33,920 --> 00:11:36,480
different works that are have the different additional permissions when

00:11:36,480 --> 00:11:39,600
they have the same additional permission you can combine them and carry along the

00:11:39,600 --> 00:11:42,640
additional permission and if they don't have the same additional permission you

00:11:42,640 --> 00:11:45,040
can always fall back to the original copyleft

00:11:45,040 --> 00:11:51,920
strong copyleft text of the gpl so we've had experience working on this

00:11:51,920 --> 00:11:54,480
ourselves karen right for for one of our projects

00:11:54,480 --> 00:11:58,320
that's right the houdini project when they um came to join conservancy

00:11:58,320 --> 00:12:02,079
they um they reached out to us about uh creating an exception

00:12:02,079 --> 00:12:06,399
while um coming into conservancy they they realized that they had a need and

00:12:06,399 --> 00:12:09,360
so part of their onboarding to conservancy

00:12:09,360 --> 00:12:13,600
was uh was writing this exception now i think that eric eric schultz

00:12:13,600 --> 00:12:19,200
at um at houdini he uh gave a presentation at libra planet i

00:12:19,200 --> 00:12:23,519
believe a few years ago um yeah well actually that was when they

00:12:23,519 --> 00:12:25,920
announced the houdini project being released and

00:12:25,920 --> 00:12:29,200
um it was really that having this exception allowed them to stick with a

00:12:29,200 --> 00:12:31,600
copyleft license i think in a lot of cases

00:12:31,600 --> 00:12:35,040
people run into a problem like this the specific problem that houdini had was as

00:12:35,040 --> 00:12:38,079
a fundraising framework they basically

00:12:38,079 --> 00:12:43,519
felt that their users would demand the ability to hook in all the different

00:12:43,519 --> 00:12:47,040
payment methods that might be available some of which require adding proprietary

00:12:47,040 --> 00:12:52,000
javascript proprietary html or proprietary css to your own website to

00:12:52,000 --> 00:12:55,279
be able to hook in for example stripe is a good example if

00:12:55,279 --> 00:12:58,480
you use stripe in the usual way you have to put proprietary javascript onto your

00:12:58,480 --> 00:13:01,200
website now i think that's horrendous and an

00:13:01,200 --> 00:13:03,600
unfortunate thing and we actually conservancy

00:13:03,600 --> 00:13:07,040
in collaboration with north bay python have a workaround

00:13:07,040 --> 00:13:10,079
to doing this but we don't necessarily think everybody would find our work

00:13:10,079 --> 00:13:12,399
around useful so having this kind of exception

00:13:12,399 --> 00:13:16,160
for an affero gpl projects allows them to keep the strong copy left

00:13:16,160 --> 00:13:20,000
allows them to keep the web services provisions of aferro gpl

00:13:20,000 --> 00:13:23,680
but in those cases where they want to bring in some proprietary javascript

00:13:23,680 --> 00:13:27,680
because it's just the most expedient thing to do they can do so

00:13:27,680 --> 00:13:31,360
and when we did this this exception we worked with

00:13:31,360 --> 00:13:34,720
our conservancy's council fantastic which was really awesome

00:13:34,720 --> 00:13:38,079
but we also um published the full text and

00:13:38,079 --> 00:13:44,480
um and you know we had a more public process over it um yeah i mean

00:13:44,480 --> 00:13:46,800
there wasn't a particular amount of public interest

00:13:46,800 --> 00:13:50,000
in the way i say gplv3 i mean there were people clamoring for this everywhere

00:13:50,000 --> 00:13:52,480
it's a relatively niche need you have to be

00:13:52,480 --> 00:13:55,440
kind of developing a website that happens to be under affero gpl and

00:13:55,440 --> 00:13:58,880
happens to want to accept payments um but we did it all in a public git

00:13:58,880 --> 00:14:02,240
repository and the git logs are there of all the revisions that we made and and

00:14:02,240 --> 00:14:04,959
there's notes from uh council that we published as part of

00:14:04,959 --> 00:14:07,440
the git commits so i encourage you if you want to see

00:14:07,440 --> 00:14:10,720
an exception drafting process uh you know run the git log command on that git

00:14:10,720 --> 00:14:16,560
repository that's there on the slide so there are a big one

00:14:16,959 --> 00:14:20,959
so there are big downsides to exceptions they're really useful and we've been

00:14:20,959 --> 00:14:24,160
touting how great they've been or how they've been

00:14:24,160 --> 00:14:28,800
uh helpful over the years but there are downsides which is to say that

00:14:28,800 --> 00:14:32,880
that it's it's tough to get them right um as someone who's worked on a few of

00:14:32,880 --> 00:14:37,040
them i i can say that they you know it's

00:14:37,040 --> 00:14:40,160
there aren't that many people who have experience writing

00:14:40,160 --> 00:14:45,760
these exceptions and um uh it's easy to um it's easy to get it

00:14:45,760 --> 00:14:48,320
wrong if you're not thoughtful about how you approach it

00:14:48,320 --> 00:14:51,680
and when you get them wrong it can be really confusing

00:14:51,680 --> 00:14:57,120
um and problematic um and yeah it's really it's even a disaster that people

00:14:57,120 --> 00:15:00,240
suddenly don't have the permissions that they think they have

00:15:00,240 --> 00:15:04,160
because they draft it wrong and we've seen that yep and if you have many

00:15:04,160 --> 00:15:07,440
copyright holders licensing they're you know contributing and

00:15:07,440 --> 00:15:10,880
licensing their code then fixing a problem like that could be more

00:15:10,880 --> 00:15:15,760
complicated over time um so that's that's tough um and then um

00:15:15,760 --> 00:15:19,600
we were just in a call today completely unrelated to this presentation where

00:15:19,600 --> 00:15:24,320
a lawyer mentioned how difficult it was for corporations sometimes to even

00:15:24,320 --> 00:15:27,600
understand what exceptions are because it doesn't fit into their basic

00:15:27,600 --> 00:15:30,079
framework and they don't have domain expertise now

00:15:30,079 --> 00:15:33,600
they can certainly get up to speed and they probably should

00:15:33,600 --> 00:15:37,759
if they're working in a corporate licensing department but at the same

00:15:37,759 --> 00:15:40,959
time um you know i think that uh without

00:15:40,959 --> 00:15:46,959
having recognition of those exceptions um from uh third parties that that

00:15:46,959 --> 00:15:49,199
catalog these exceptions it can be problematic

00:15:49,199 --> 00:15:53,279
and then that cataloging clogging process can even be politicized which it

00:15:53,279 --> 00:15:57,040
could be a real problem yeah and we're in a situation now where

00:15:57,040 --> 00:16:00,160
where some some people who catalog licenses just refuse

00:16:00,160 --> 00:16:03,519
to catalog certain certain exceptions for political reasons so there's really

00:16:03,519 --> 00:16:06,480
no unified catalog you can rely on anywhere

00:16:06,480 --> 00:16:09,120
in the community it just doesn't exist even though some

00:16:09,120 --> 00:16:12,800
would represent that they have it they really don't

00:16:14,480 --> 00:16:17,600
bradley i think you meant to change slides but you disabled your

00:16:17,600 --> 00:16:24,720
video yep they're now frantically clicking permissions and allowing

00:16:25,040 --> 00:16:28,160
but you still have to go forward a slide which i think is talking about

00:16:28,160 --> 00:16:32,079
the positives to additional permissions which is the upsides

00:16:32,079 --> 00:16:35,360
which is that um yeah they've been around for a long time

00:16:35,360 --> 00:16:38,480
because they're necessary right they uh they

00:16:38,480 --> 00:16:42,720
they allow you to get around copyleft of being like an all or nothing

00:16:42,720 --> 00:16:48,000
and instead to precisely address a problem that arises that you need to

00:16:48,000 --> 00:16:54,639
address in order to maintain a pragmatic copyleft for your project yeah and i

00:16:54,639 --> 00:16:58,160
think i think having more choices and empowering users is really important

00:16:58,160 --> 00:17:01,600
um and that includes empowering users of licenses there's so much

00:17:01,600 --> 00:17:05,120
desire out there for people to draft their own licenses we see this all the

00:17:05,120 --> 00:17:07,919
time people posting new licenses they wrote to mailing lists

00:17:07,919 --> 00:17:11,520
and many in the community ask people to stop the additional permissions

00:17:11,520 --> 00:17:15,199
architecture is a complete playground for people to draft their own licenses

00:17:15,199 --> 00:17:18,880
and fill in that space i think we have the strongest copylefts

00:17:18,880 --> 00:17:22,400
already that we need um but there's lots of space in the middle where people have

00:17:22,400 --> 00:17:24,720
been clamoring for years for copylefts that are

00:17:24,720 --> 00:17:28,400
in between or you know off to the side of lgpl

00:17:28,400 --> 00:17:31,120
and there's the opportunity to write them and i would encourage people who

00:17:31,120 --> 00:17:33,039
have these skills obviously because they're out there

00:17:33,039 --> 00:17:36,400
drafting their own licenses to help the projects that really need some of these

00:17:36,400 --> 00:17:41,360
additional permissions drafted yeah quick note on the previous slide

00:17:41,360 --> 00:17:45,280
which is to say that uh that because you you mentioned or we we had

00:17:45,280 --> 00:17:48,400
on that slide that uh that combining and removing

00:17:48,400 --> 00:17:51,520
additional permissions is easy and i want to note that one of the good

00:17:51,520 --> 00:17:55,840
things about the gplv3 infrastructure or additional permissions section is

00:17:55,840 --> 00:18:01,360
that we have seen additional restrictions masquerading as additional

00:18:01,360 --> 00:18:04,400
permissions and because of this additional permission infrastructure

00:18:04,400 --> 00:18:07,520
we know we can toss them away and so this uh

00:18:07,520 --> 00:18:10,799
this exploitative approach to additional permissions

00:18:10,799 --> 00:18:14,080
is foiled from the beginning which is pretty cool

00:18:14,080 --> 00:18:18,559
and in fact the lesser gpl in the v3 space is actually just a set of

00:18:18,559 --> 00:18:21,600
additional permissions which i think is a really interesting point

00:18:21,600 --> 00:18:25,760
and allows really the whole family of licenses to be a little bit clearer

00:18:25,760 --> 00:18:30,880
because now lgpl is really no different in its structure than say the web output

00:18:30,880 --> 00:18:34,080
template exception and so understanding it while we talk

00:18:34,080 --> 00:18:37,200
about corporate lawyers having annoyances about additional permissions

00:18:37,200 --> 00:18:39,600
they're only really need to understand one license

00:18:39,600 --> 00:18:43,120
and then the other licenses should just be

00:18:43,120 --> 00:18:46,720
like give more permission than it's already there um that's not to say you

00:18:46,720 --> 00:18:49,520
can't do amazingly creative things you want to talk a little about the creative

00:18:49,520 --> 00:18:53,520
thing that that you did as a your first foray into

00:18:53,520 --> 00:18:57,280
uh exception drafting well it wasn't creative on my part but i will say that

00:18:57,280 --> 00:18:59,600
the um that the the gcc runtime library

00:18:59,600 --> 00:19:02,799
additional permission was my very first additional permission or exception

00:19:02,799 --> 00:19:07,840
drafting that i did um and it was uh and it was extremely

00:19:07,840 --> 00:19:10,720
complicated it was actually my first licensed drafting at all

00:19:10,720 --> 00:19:13,840
so uh it was really fascinating and it was so

00:19:13,840 --> 00:19:19,600
complicated it was so hard but it really great it created a great

00:19:19,600 --> 00:19:24,240
outcome it actually allowed gcc to push forward into having

00:19:24,240 --> 00:19:26,559
plug-in architecture which was something that

00:19:26,559 --> 00:19:30,320
parts of the gcc community resisted for years because you could use run

00:19:30,320 --> 00:19:34,160
you could use uh plugins to make proprietary improvements to gcc

00:19:34,160 --> 00:19:38,240
but the idea of saying well let's not grant the additional permission to those

00:19:38,240 --> 00:19:40,720
who want to do that so this idea that you can compile

00:19:40,720 --> 00:19:43,360
proprietary software obviously you compile

00:19:43,360 --> 00:19:46,720
use as many proprietary plugins as you want but if you do that all your

00:19:46,720 --> 00:19:50,799
software output from it is gpl it's kind of a really really acute

00:19:50,799 --> 00:19:53,679
outcome uh and it actually really helped gcc i think it

00:19:53,679 --> 00:19:59,120
was a little bit late um i think it it it did it's kind of be the final

00:19:59,120 --> 00:20:02,720
nail that pushed apple towards uh lvm i think they

00:20:02,720 --> 00:20:07,039
were going that way anyway but they really hated gplv3 and were

00:20:07,039 --> 00:20:12,159
really resistant uh of of of any change to any gcc licensing

00:20:12,159 --> 00:20:17,039
um and i think that i think that if we got it done a little bit earlier i think

00:20:17,039 --> 00:20:20,880
it would have changed a lot with the gcc versus lvm but i think it

00:20:20,880 --> 00:20:23,919
was it was it's kind of fun to do the hardest job first i think it's probably

00:20:23,919 --> 00:20:25,840
the hardest additional permission that will ever get

00:20:25,840 --> 00:20:29,039
written um so kind of the hardest one's ever been done so everything else out

00:20:29,039 --> 00:20:31,760
there is i think easier if folks want to try to do it

00:20:31,760 --> 00:20:34,159
there's lots of easy problems in this in this

00:20:34,159 --> 00:20:38,000
space that people could work on yeah and there were a lot of background politics

00:20:38,000 --> 00:20:41,600
in the sense that we we so what i say we like so i didn't

00:20:41,600 --> 00:20:46,159
just write that on my own uh bradley and uh brett smith and richard fontana um

00:20:46,159 --> 00:20:50,080
were the key authors along with me um and

00:20:50,080 --> 00:20:55,679
um so uh you know we sought feedback from quite a lot of

00:20:55,679 --> 00:20:59,120
stakeholders and quite a lot of developers and we did a whole process

00:20:59,120 --> 00:21:04,400
but it was a private process and now that process is lost in time

00:21:04,400 --> 00:21:08,320
there's a lot of fun i mean i think it's it's really great to

00:21:08,320 --> 00:21:12,240
to do things as a fully public process uh and i think i think

00:21:12,240 --> 00:21:15,200
these are a couple of notes we want to make for folks who might want to design

00:21:15,200 --> 00:21:18,720
their own additional permission if they're straightforward and make sure

00:21:18,720 --> 00:21:21,520
that you think to the fact that people will combine them with other ones and

00:21:21,520 --> 00:21:25,520
make yours designed to combine with others i think

00:21:25,520 --> 00:21:27,600
that's really a valuable thing and a valuable

00:21:27,600 --> 00:21:31,760
contribution you can make to licensing infrastructure

00:21:31,760 --> 00:21:36,480
yep be really clear about them like don't don't try hard to make them clever

00:21:36,480 --> 00:21:39,679
because uh the the plainer you can make your

00:21:39,679 --> 00:21:42,640
language the better yeah i think there's way too much clever

00:21:42,640 --> 00:21:45,440
license drafting out there right now and it's not i don't think it's actually

00:21:45,440 --> 00:21:47,200
helping and i think straightforward license

00:21:47,200 --> 00:21:50,159
drafting and doing it as part of additional permission is the way to go

00:21:50,159 --> 00:21:53,440
um but keep in mind that i think the best way to get these written is to have

00:21:53,440 --> 00:21:56,480
technical people and legal people working together uh when we did the web

00:21:56,480 --> 00:21:58,720
out put web output template exception it was

00:21:58,720 --> 00:22:02,880
pam chestak and me and eric schultz working with pam uh to get it

00:22:02,880 --> 00:22:05,440
drafted and i think that made a big difference in karen as well

00:22:05,440 --> 00:22:08,480
i don't know which whether you were in a legal role or a uh a

00:22:08,480 --> 00:22:12,240
developer role in that case though a little about some particular instance

00:22:12,240 --> 00:22:15,520
pam was the primary lawyer on it for sure so

00:22:15,520 --> 00:22:19,039
we're out of time and we want to leave plenty of time for q&a

00:22:19,039 --> 00:22:24,240
so i want to thank everybody for coming karen please contribute to the software freedom conservancy

00:22:24,240 --> 00:22:29,280
we really appreciate it great charity and we'll speak to you soon in q&a

00:22:30,000 --> 00:22:33,760
uh the first question that came up is how does the gpl system library

00:22:33,760 --> 00:22:37,919
exception relate to gpl exceptions and additional permissions

00:22:37,919 --> 00:22:41,520
that's a very good question so um so there there

00:22:41,520 --> 00:22:45,600
there are a couple of examples like we talked about in the talk the lgpl itself

00:22:45,600 --> 00:22:50,559
at least version three of the lgpl is in fact just a set of additional

00:22:50,559 --> 00:22:56,000
permissions similarly so uh there are one or two uh basically

00:22:56,000 --> 00:23:01,360
additional permission like things uh in the main text of the license and

00:23:01,360 --> 00:23:04,799
one of them is the system library exception is a good example

00:23:04,799 --> 00:23:08,320
the difference really is is that you can't remove that

00:23:08,320 --> 00:23:13,280
because it's part of the main gpl so additional permissions under gplv3

00:23:13,280 --> 00:23:17,840
can be taken apart or taken aside and you can continue under regular gplv3

00:23:17,840 --> 00:23:21,520
if the additional permission as it were or the permission i should say in this

00:23:21,520 --> 00:23:24,159
case is inside the license itself of course

00:23:24,159 --> 00:23:26,559
you can't remove it but as far as like understanding

00:23:26,559 --> 00:23:29,679
drafting and and how how you approach drafting and

00:23:29,679 --> 00:23:33,200
understanding possible problems with drafting uh that's the same sort of

00:23:33,200 --> 00:23:38,080
thing it's a case where copyleft would go uh much further if not

00:23:38,080 --> 00:23:41,279
for that additional or that permission uh being granted in

00:23:41,279 --> 00:23:44,159
the license and i should add the system library exception is

00:23:44,159 --> 00:23:47,279
by far not the only example of a case where

00:23:47,279 --> 00:23:50,880
the gpl says something and then reigns it in with some more text

00:23:50,880 --> 00:23:53,919
it's one of the reasons why the gplv3 is so long which i guess we can blame

00:23:53,919 --> 00:23:57,360
richard fontana for since he's here

00:23:57,520 --> 00:24:01,039
uh the next question is do you think there's an upper limit on making gpl

00:24:01,039 --> 00:24:04,480
exceptions and additional permissions at what point does one say

00:24:04,480 --> 00:24:08,000
either use the license as it is use the license with an existing recognized

00:24:08,000 --> 00:24:11,279
permission or perhaps consider a different license

00:24:11,279 --> 00:24:15,919
i wonder if the osi should shut down its license approval process

00:24:15,919 --> 00:24:19,200
no i'm just kidding i'm just kidding i'm just kidding so uh so

00:24:19,200 --> 00:24:22,559
what i what i mean by that is that i think that this

00:24:22,559 --> 00:24:25,840
question is getting at the idea of license proliferation and that by having

00:24:25,840 --> 00:24:29,440
a lot of different exceptions you you also push things towards

00:24:29,440 --> 00:24:33,440
proliferation because you have so many different resulting

00:24:33,440 --> 00:24:36,240
licenses that occur from the combinations that

00:24:36,240 --> 00:24:38,799
that you have to track them each separately but the truth is is that

00:24:38,799 --> 00:24:42,480
there are times when we need new licenses there are times

00:24:42,480 --> 00:24:46,640
when there are situations that none of the existing licenses cleanly

00:24:46,640 --> 00:24:49,760
accept and that's part of why the additional permissions are so important

00:24:49,760 --> 00:24:53,279
because it gives a framework by which you can create a new exception

00:24:53,279 --> 00:24:56,720
and thus a new resulting license without everybody having to start from scratch

00:24:56,720 --> 00:24:58,960
every single time which would actually i think make the

00:24:58,960 --> 00:25:03,520
osi license approval discussion license review potentially a little less

00:25:03,520 --> 00:25:08,640
exciting if we were to um to standardize on the frameworks for for

00:25:08,640 --> 00:25:13,820
certain parts of the licenses um yeah

00:25:13,820 --> 00:25:16,960
there are a lot of questions here so we'll keep going what do you think of the

00:25:16,960 --> 00:25:22,000
efforts by the spdx group to standardize identifiers for license exceptions

00:25:22,000 --> 00:25:25,600
um it would have been nice if it were actually doing that unfortunately that's

00:25:25,600 --> 00:25:28,720
not really what spdx is doing they're picking very

00:25:28,720 --> 00:25:31,440
specific exceptions that they happen to like

00:25:31,440 --> 00:25:34,480
and listing those and then they're refusing to list other ones so

00:25:34,480 --> 00:25:37,679
unfortunately it's never going to be a comprehensive list of exceptions even in

00:25:37,679 --> 00:25:40,640
the wild there are multiple exceptions right now floating around or additional

00:25:40,640 --> 00:25:43,760
permissions floating around in use and even upstream projects like

00:25:43,760 --> 00:25:48,320
linux uh that spdx has refused to list so it was a nice effort but it's

00:25:48,320 --> 00:25:52,320
unfortunate that they took that position yeah i would just say like to add on to

00:25:52,320 --> 00:25:56,240
that that i just think that that i think it would be helpful if we

00:25:56,240 --> 00:26:00,000
could have some uh metrics discussed as to which

00:26:00,000 --> 00:26:02,720
exceptions are you know what what makes the cut and

00:26:02,720 --> 00:26:09,039
what doesn't in a way that um that that folks can can evaluate and discuss

00:26:09,039 --> 00:26:12,320
yeah i would actually much rather see the osi not not to make more work for

00:26:12,320 --> 00:26:14,799
you all but i would like to see the osi actually

00:26:14,799 --> 00:26:17,840
list um not necessarily approved exceptions because

00:26:17,840 --> 00:26:21,039
the only approval question is whether they're they're valid or invalid which

00:26:21,039 --> 00:26:24,240
is you know it's relatively trivial to figure out most of the time

00:26:24,240 --> 00:26:27,279
but to list kind of a recommended set of exceptions

00:26:27,279 --> 00:26:30,480
that you might want to use for copyleft licenses just like osi has the

00:26:30,480 --> 00:26:34,960
recommended license list i would certainly like to see that

00:26:35,600 --> 00:26:40,720
the next question we have is the gplv2 was written before i was alive

00:26:40,720 --> 00:26:43,760
if you are working with a project under gplv2

00:26:43,760 --> 00:26:46,799
and not a later version what do aps look like

00:26:46,799 --> 00:26:50,799
for that can they exist so i know exactly who asked this question by the

00:26:50,799 --> 00:26:54,080
way it's worded just so you know uh but i would say that

00:26:54,080 --> 00:26:57,360
uh that so we were sort of talking at the

00:26:57,360 --> 00:27:02,080
beginning of the talk that um that under gplv2 exceptions were written

00:27:02,080 --> 00:27:05,600
as additional files that were delivered along with the

00:27:05,600 --> 00:27:08,720
license and so so like the bison exception was

00:27:08,720 --> 00:27:14,480
just a sentence in another file and so the idea is that that extra file

00:27:14,480 --> 00:27:17,919
was it you know created a new license altogether

00:27:17,919 --> 00:27:21,600
but that was even further clarified in gplv3

00:27:21,600 --> 00:27:25,039
where the additional permission framework is baked into the license

00:27:25,039 --> 00:27:30,640
so the exception idea started in v2 and then was formalized in v3 when it

00:27:30,640 --> 00:27:34,240
was called additional permission yeah i i would i would summarize that by

00:27:34,240 --> 00:27:37,440
saying the gplv3 formalized a process that was already

00:27:37,440 --> 00:27:42,480
very common under gplv2 all right we'll we'll try for one more

00:27:42,480 --> 00:27:45,520
here um the next question is i like how the

00:27:45,520 --> 00:27:50,320
bison project has an explicit manual and web page on why the bison exceptions

00:27:50,320 --> 00:27:53,440
exist beyond just the exception blurb itself

00:27:53,440 --> 00:27:56,559
do you think there is any reason to avoid non-licensed text

00:27:56,559 --> 00:28:00,799
explanations and explicit permitted actions to help the community any best

00:28:00,799 --> 00:28:04,720
practices around this i think the most important thing is to

00:28:04,720 --> 00:28:07,760
not combine the two so uh there's a there's a there's a

00:28:07,760 --> 00:28:11,200
additional permission that karen and i really like and conservancy recommends

00:28:11,200 --> 00:28:14,240
um called the um called the uh the current

00:28:14,240 --> 00:28:18,480
the colonel the kernel enforcement statement additional permission and the

00:28:18,480 --> 00:28:21,679
problem or case app we abbreviate it the problem with that

00:28:21,679 --> 00:28:26,320
one is is that it has a paragraph of text explaining why it's a good idea

00:28:26,320 --> 00:28:30,720
as part of the exception text itself so that's problematic so we encourage

00:28:30,720 --> 00:28:32,799
people to to put that in a separate place

00:28:32,799 --> 00:28:36,000
but i think it's a really good idea to to explain your motivations

00:28:36,000 --> 00:28:39,679
as long as you do it in a separate document

00:28:40,080 --> 00:28:44,240
thank you both so much for your time we are unfortunately out of time

00:28:44,240 --> 00:28:48,000
but um if i can make them super quick oh yeah sorry

00:28:48,000 --> 00:28:51,440
if i could make a super quick plug we have um informal chats

00:28:51,440 --> 00:28:55,279
at the um conservancy irc channel on freenode

00:28:55,279 --> 00:29:00,240
um #conservancy at uh at a set time every week and you should

00:29:00,240 --> 00:29:04,960

YouTube URL: https://www.youtube.com/watch?v=Q54uNN4SRAE


