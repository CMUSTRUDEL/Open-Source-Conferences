Title: Cloud-native Patterns - Ops Edition
Publication date: 2021-05-03
Playlist: GitOpsCon 2021
Description: 
	Itâ€™s been roughly a decade since 12factor.net was first published by some engineers working with and on Heroku, arguably one of the first, truly successful developer/DevOps platforms. Many of the practices hinted at and described therein have become de facto-standards - mature source code control and continuous integration, horizontal scaling, and loose coupling, for example - but arguably most address the earlier parts of the SDLC. A similar level of maturity is lagging on the operational end of that lifecycle.

That is where GitOps comes in. Building on the foundational elements of declarative configuration and reconciliation (popularized by Kubernetes), GitOps brings a model for management of that declarative configuration and a disciplined set of operational practices that are ideally suited for cloud-native systems. The result is an increase in developer productivity (more frequent releases, anybody?) and operational excellence (you still want compliance, no?). GitOps offers cloud-native patterns expressly for operations.

To kick off the first ever GitOps Con, Weaveworks CTO, Cornelia Davis will share the history of and vision for the GitOps movement. She will talk about how the industry is coming together as the GitOps Working Group to advance innovation and understanding of this industry leading paradigm. And she will present the first artifact of the CNCF OpenGitOps sandbox project: GitOps Principles.
Captions: 
	00:00:00,160 --> 00:00:05,279
i am despite the the dark hour here i am

00:00:03,840 --> 00:00:07,600
sitting in california

00:00:05,279 --> 00:00:08,559
on the west coast of the united states

00:00:07,600 --> 00:00:13,200
it is 5

00:00:08,559 --> 00:00:13,920
12 a.m i did get up and shower before i

00:00:13,200 --> 00:00:17,840
joined you

00:00:13,920 --> 00:00:18,320
all so uh um i am though delighted to be

00:00:17,840 --> 00:00:20,960
here

00:00:18,320 --> 00:00:23,119
uh and you know what i used to travel a

00:00:20,960 --> 00:00:24,640
lot pre-pandemic and it wasn't unusual

00:00:23,119 --> 00:00:26,640
for me to get out of bed at four in the

00:00:24,640 --> 00:00:28,400
morning to catch an airplane so i just

00:00:26,640 --> 00:00:30,880
kind of mentally think of it that way

00:00:28,400 --> 00:00:32,079
like i got up this morning at 4 am to

00:00:30,880 --> 00:00:35,200
catch an airplane to see

00:00:32,079 --> 00:00:38,399
all and it was a pretty quick flight so

00:00:35,200 --> 00:00:40,879
um i am

00:00:38,399 --> 00:00:42,000
uh so thrilled to be doing the opening

00:00:40,879 --> 00:00:44,559
keynote for this

00:00:42,000 --> 00:00:45,760
um i will introduce myself a little bit

00:00:44,559 --> 00:00:48,480
more in just a moment

00:00:45,760 --> 00:00:49,760
in fact i'll move to that slide now so

00:00:48,480 --> 00:00:52,960
let's see if i can advance

00:00:49,760 --> 00:00:55,440
slides properly uh there we go

00:00:52,960 --> 00:00:57,039
um and for those of you who don't know

00:00:55,440 --> 00:00:58,719
me i'll tell you a little bit more about

00:00:57,039 --> 00:01:02,399
myself

00:00:58,719 --> 00:01:05,760
this is the first get ops con and

00:01:02,399 --> 00:01:09,040
for me get ops is about a 15 month

00:01:05,760 --> 00:01:11,479
16 month journey right now so

00:01:09,040 --> 00:01:13,200
i joined weave works the beginning of

00:01:11,479 --> 00:01:16,320
00:01:13,200 --> 00:01:18,640
first day first working day of january

00:01:16,320 --> 00:01:20,400
um i've been in the industry a long time

00:01:18,640 --> 00:01:21,119
i've been doing this stuff for about 30

00:01:20,400 --> 00:01:24,000
years

00:01:21,119 --> 00:01:24,560
and i've always been a developer and

00:01:24,000 --> 00:01:26,799
you'll

00:01:24,560 --> 00:01:28,400
you'll see why this is relevant as we go

00:01:26,799 --> 00:01:30,560
through the program i'm going to be

00:01:28,400 --> 00:01:32,320
talking a lot about the developer or the

00:01:30,560 --> 00:01:35,119
application team

00:01:32,320 --> 00:01:36,159
and what enables them to do their job

00:01:35,119 --> 00:01:39,360
quickly

00:01:36,159 --> 00:01:41,759
um and uh yes we

00:01:39,360 --> 00:01:43,759
we cannot see your slides i'm sorry you

00:01:41,759 --> 00:01:44,640
cannot that's because i have not shared

00:01:43,759 --> 00:01:48,000
my slides

00:01:44,640 --> 00:01:51,759
thank you um it is just

00:01:48,000 --> 00:01:55,200
a touch to her right

00:01:51,759 --> 00:01:55,200
i also feel pretty staged

00:01:57,280 --> 00:02:00,560
because i can see it in the hop-in

00:01:58,719 --> 00:02:03,600
platform thank you

00:02:00,560 --> 00:02:07,119
no problem so so where i was was

00:02:03,600 --> 00:02:10,560
um i have been a developer

00:02:07,119 --> 00:02:12,879
my whole career and uh prior to joining

00:02:10,560 --> 00:02:15,040
uh weave works at the beginning of 2020

00:02:12,879 --> 00:02:16,000
i spent the previous seven or eight

00:02:15,040 --> 00:02:17,920
years

00:02:16,000 --> 00:02:19,680
at pivotal where i worked on uh

00:02:17,920 --> 00:02:22,480
developer platforms

00:02:19,680 --> 00:02:23,520
um first on cloud foundry uh was part of

00:02:22,480 --> 00:02:26,560
the team that brought

00:02:23,520 --> 00:02:29,200
cloud foundry to market um

00:02:26,560 --> 00:02:29,680
and then uh in the last two or three

00:02:29,200 --> 00:02:31,920
years

00:02:29,680 --> 00:02:33,519
spent quite a bit of time with with

00:02:31,920 --> 00:02:35,680
kubernetes

00:02:33,519 --> 00:02:37,760
um prior to that i spent a lot of time

00:02:35,680 --> 00:02:39,200
in web architectures

00:02:37,760 --> 00:02:41,280
but you can see there that i've been

00:02:39,200 --> 00:02:43,120
doing cloud native for a while and if

00:02:41,280 --> 00:02:44,879
you remember the title of this talk is

00:02:43,120 --> 00:02:47,840
cloud native ops edition

00:02:44,879 --> 00:02:49,280
and i'll explain that as we go along in

00:02:47,840 --> 00:02:51,599
just a moment

00:02:49,280 --> 00:02:52,959
um but i have been doing kubernetes for

00:02:51,599 --> 00:02:56,319
quite some time

00:02:52,959 --> 00:02:58,640
um more than five years or somewhere

00:02:56,319 --> 00:03:00,879
around there which doesn't make me

00:02:58,640 --> 00:03:02,879
um the longest veteran but it doesn't

00:03:00,879 --> 00:03:06,239
make me a newbie either

00:03:02,879 --> 00:03:09,040
um and i if you'll if you'll permit me

00:03:06,239 --> 00:03:10,720
uh the you know shameless self promotion

00:03:09,040 --> 00:03:12,959
but it is relevant here

00:03:10,720 --> 00:03:15,440
is that i'm also the author of this book

00:03:12,959 --> 00:03:18,879
cloud cloud native patterns

00:03:15,440 --> 00:03:21,840
now that book did cloud native for

00:03:18,879 --> 00:03:23,519
developers and it really talked about

00:03:21,840 --> 00:03:26,640
cloud native patterns

00:03:23,519 --> 00:03:28,400
for software architecture for those

00:03:26,640 --> 00:03:30,239
developers

00:03:28,400 --> 00:03:33,360
and you'll see again why this is

00:03:30,239 --> 00:03:36,080
important in just a moment

00:03:33,360 --> 00:03:36,640
now that's the whole point is cloud

00:03:36,080 --> 00:03:38,799
native

00:03:36,640 --> 00:03:40,080
and on my title slide i said i've been

00:03:38,799 --> 00:03:43,280
doing cloud native

00:03:40,080 --> 00:03:47,200
for um almost 10 years

00:03:43,280 --> 00:03:49,360
but i will admit that the um the

00:03:47,200 --> 00:03:50,400
term cloud native didn't really exist 10

00:03:49,360 --> 00:03:54,000
years ago

00:03:50,400 --> 00:03:57,120
the term that existed 10 years ago was

00:03:54,000 --> 00:03:59,040
this one microservices or maybe not

00:03:57,120 --> 00:04:01,360
quite 10 years ago but we were probably

00:03:59,040 --> 00:04:02,640
starting to talk about it

00:04:01,360 --> 00:04:04,799
now the reason that i bring up

00:04:02,640 --> 00:04:05,360
microservices is because it's probably

00:04:04,799 --> 00:04:07,040
the more

00:04:05,360 --> 00:04:09,519
common phrase or the certainly the

00:04:07,040 --> 00:04:12,720
phrase that we've been using for longer

00:04:09,519 --> 00:04:14,239
for cloud native but

00:04:12,720 --> 00:04:16,400
the interesting thing about

00:04:14,239 --> 00:04:20,320
microservices is that

00:04:16,400 --> 00:04:22,560
we had a few attempts at

00:04:20,320 --> 00:04:23,919
modernizing software architectures

00:04:22,560 --> 00:04:27,520
before that

00:04:23,919 --> 00:04:29,199
who remembers soa service oriented

00:04:27,520 --> 00:04:31,840
architectures remember

00:04:29,199 --> 00:04:34,080
we put soa interfaces on top of these

00:04:31,840 --> 00:04:35,600
monoliths or on top of different things

00:04:34,080 --> 00:04:38,800
different back ends

00:04:35,600 --> 00:04:40,880
and then i spent a lot of time studying

00:04:38,800 --> 00:04:44,240
and working with the w3c

00:04:40,880 --> 00:04:48,080
and others around rest apis we also

00:04:44,240 --> 00:04:51,199
did that and then well before

00:04:48,080 --> 00:04:51,520
microservices the term became popular we

00:04:51,199 --> 00:04:54,880
had

00:04:51,520 --> 00:04:56,639
domain driven design so we were starting

00:04:54,880 --> 00:04:59,680
to hint at that

00:04:56,639 --> 00:05:02,720
but the reason that i'm belaboring this

00:04:59,680 --> 00:05:04,479
is that those earlier attempts at

00:05:02,720 --> 00:05:06,639
service oriented architectures or

00:05:04,479 --> 00:05:10,080
restful apis

00:05:06,639 --> 00:05:11,840
didn't cause a major change

00:05:10,080 --> 00:05:13,919
they were attempts and they gave us kind

00:05:11,840 --> 00:05:16,240
of incremental improvement

00:05:13,919 --> 00:05:17,039
but there wasn't like a a hard right

00:05:16,240 --> 00:05:20,000
there wasn't an

00:05:17,039 --> 00:05:21,600
inflection point i would suggest with

00:05:20,000 --> 00:05:24,240
service-oriented architectures or

00:05:21,600 --> 00:05:26,639
restful apis but

00:05:24,240 --> 00:05:28,720
something different happened when we

00:05:26,639 --> 00:05:31,840
started doing microservices and i'll

00:05:28,720 --> 00:05:34,880
talk more about that as we go through

00:05:31,840 --> 00:05:38,639
now as we started to build those micro

00:05:34,880 --> 00:05:39,360
services the the first signs that there

00:05:38,639 --> 00:05:41,280
were

00:05:39,360 --> 00:05:42,560
that there was an inflection point

00:05:41,280 --> 00:05:44,800
happening

00:05:42,560 --> 00:05:46,919
happened when we started seeing articles

00:05:44,800 --> 00:05:50,400
like this

00:05:46,919 --> 00:05:51,039
microservices not a free lunch we didn't

00:05:50,400 --> 00:05:53,440
just

00:05:51,039 --> 00:05:55,840
start to componentize things and keep

00:05:53,440 --> 00:05:56,560
doing things the way that we've always

00:05:55,840 --> 00:05:59,600
been doing

00:05:56,560 --> 00:06:01,759
things we started seeing

00:05:59,600 --> 00:06:03,680
this articles like this and

00:06:01,759 --> 00:06:05,680
conversations that said

00:06:03,680 --> 00:06:07,360
well yeah there's all these advantages

00:06:05,680 --> 00:06:08,960
of microservices that i'm not going to

00:06:07,360 --> 00:06:11,919
go over they were a few of them were

00:06:08,960 --> 00:06:13,520
listed on the previous slide

00:06:11,919 --> 00:06:16,080
but then we started seeing people

00:06:13,520 --> 00:06:18,319
acknowledging that okay as i break

00:06:16,080 --> 00:06:21,520
things up into smaller pieces

00:06:18,319 --> 00:06:22,400
with that come new problems all of a

00:06:21,520 --> 00:06:25,120
sudden

00:06:22,400 --> 00:06:26,240
i had highly distributed architectures

00:06:25,120 --> 00:06:29,280
and i need to

00:06:26,240 --> 00:06:32,080
start worrying about additional patterns

00:06:29,280 --> 00:06:34,160
so if i'm highly distributed i can't

00:06:32,080 --> 00:06:35,919
just do a function call that's in

00:06:34,160 --> 00:06:37,680
process and know that it's going to make

00:06:35,919 --> 00:06:39,600
that function call

00:06:37,680 --> 00:06:41,759
i had to start worrying about things

00:06:39,600 --> 00:06:44,560
like well if i make a call over the

00:06:41,759 --> 00:06:47,600
network and i don't hear back

00:06:44,560 --> 00:06:48,240
what do i do about that do i just give

00:06:47,600 --> 00:06:51,280
up and go

00:06:48,240 --> 00:06:54,080
home retry

00:06:51,280 --> 00:06:55,120
or do i start using common patterns like

00:06:54,080 --> 00:06:57,599
caching

00:06:55,120 --> 00:06:59,360
not just for performance but for

00:06:57,599 --> 00:07:01,599
resilience

00:06:59,360 --> 00:07:03,520
and if i'm going to do a retry then i

00:07:01,599 --> 00:07:05,520
need to start thinking about things like

00:07:03,520 --> 00:07:08,240
item potents

00:07:05,520 --> 00:07:08,880
so we started to see this whole new

00:07:08,240 --> 00:07:11,599
world

00:07:08,880 --> 00:07:13,000
start to this whole new conversation

00:07:11,599 --> 00:07:15,120
start to happen around these

00:07:13,000 --> 00:07:17,759
microservices

00:07:15,120 --> 00:07:18,479
and i'm going to suggest that it was

00:07:17,759 --> 00:07:21,759
that

00:07:18,479 --> 00:07:24,400
change that made

00:07:21,759 --> 00:07:25,280
this different from soa it made it

00:07:24,400 --> 00:07:28,560
different from

00:07:25,280 --> 00:07:31,680
just restful apis because we actually

00:07:28,560 --> 00:07:33,919
started to do things differently and i'm

00:07:31,680 --> 00:07:34,720
going to suggest to you right here and

00:07:33,919 --> 00:07:38,319
now

00:07:34,720 --> 00:07:41,199
that git ops represents that differently

00:07:38,319 --> 00:07:42,240
for cloud native operations and i'll

00:07:41,199 --> 00:07:45,440
explain why

00:07:42,240 --> 00:07:48,879
as i go along now

00:07:45,440 --> 00:07:51,039
he's very wise and can often be a good

00:07:48,879 --> 00:07:53,199
predictor of where we're going

00:07:51,039 --> 00:07:54,960
right around the same time that that

00:07:53,199 --> 00:07:56,879
previous article that i showed you and

00:07:54,960 --> 00:08:00,160
all the links are on there

00:07:56,879 --> 00:08:02,400
which was published in 2014

00:08:00,160 --> 00:08:03,440
right around that same time martin

00:08:02,400 --> 00:08:06,400
fowler writes

00:08:03,440 --> 00:08:07,440
a great blog post and the great blog

00:08:06,400 --> 00:08:09,120
post was around

00:08:07,440 --> 00:08:11,360
it was called microservices

00:08:09,120 --> 00:08:12,240
prerequisites and you can see the link

00:08:11,360 --> 00:08:14,080
there

00:08:12,240 --> 00:08:15,759
and this is one of the graphics from it

00:08:14,080 --> 00:08:18,240
and it's super great it says you have to

00:08:15,759 --> 00:08:20,479
be this tall to ride the ride

00:08:18,240 --> 00:08:21,840
now he wasn't talking about software

00:08:20,479 --> 00:08:24,879
architecture patterns

00:08:21,840 --> 00:08:26,800
like retries and item potents and

00:08:24,879 --> 00:08:27,919
circuit breakers and some of those other

00:08:26,800 --> 00:08:30,319
patterns

00:08:27,919 --> 00:08:32,240
he started talking about these things

00:08:30,319 --> 00:08:34,080
these are the headline

00:08:32,240 --> 00:08:37,120
subsections that were in the in the

00:08:34,080 --> 00:08:40,640
document rapid provisioning

00:08:37,120 --> 00:08:41,760
basic monitoring rapid application

00:08:40,640 --> 00:08:44,399
deployment

00:08:41,760 --> 00:08:46,240
he started talking about things that

00:08:44,399 --> 00:08:49,680
were hinting at

00:08:46,240 --> 00:08:50,320
operations now he was talking about

00:08:49,680 --> 00:08:52,399
those things

00:08:50,320 --> 00:08:53,440
earlier on in the software development

00:08:52,399 --> 00:08:56,240
life cycle

00:08:53,440 --> 00:08:57,440
but he was talking about things that

00:08:56,240 --> 00:09:00,560
started to hint

00:08:57,440 --> 00:09:03,680
at operations

00:09:00,560 --> 00:09:05,839
yet despite the fact that he posted this

00:09:03,680 --> 00:09:09,279
in 2014

00:09:05,839 --> 00:09:11,920
i'm going to suggest that as an industry

00:09:09,279 --> 00:09:12,959
we matured software architecture

00:09:11,920 --> 00:09:15,920
patterns

00:09:12,959 --> 00:09:16,560
and we also by the way matured some of

00:09:15,920 --> 00:09:19,200
the

00:09:16,560 --> 00:09:20,800
um processes some of these rapid

00:09:19,200 --> 00:09:23,600
provisioning and so on

00:09:20,800 --> 00:09:25,839
we did that but for earlier in the

00:09:23,600 --> 00:09:28,640
software development lifecycle

00:09:25,839 --> 00:09:29,200
so for example we started to mature

00:09:28,640 --> 00:09:32,399
things

00:09:29,200 --> 00:09:34,880
around ci and

00:09:32,399 --> 00:09:36,080
test driven automation and test

00:09:34,880 --> 00:09:38,160
automation

00:09:36,080 --> 00:09:40,160
we started talking about code coverage

00:09:38,160 --> 00:09:40,959
and you started to see badges of code

00:09:40,160 --> 00:09:44,320
coverage

00:09:40,959 --> 00:09:45,680
on open source projects and those things

00:09:44,320 --> 00:09:49,200
were really clearly

00:09:45,680 --> 00:09:51,519
understood that it helped us close those

00:09:49,200 --> 00:09:53,920
feedback cycles make those feedback

00:09:51,519 --> 00:09:55,839
cycles shorter and shorter and shorter

00:09:53,920 --> 00:09:57,680
so there was a lot that we needed to do

00:09:55,839 --> 00:09:59,760
in the early parts of the software

00:09:57,680 --> 00:10:02,000
development life cycle

00:09:59,760 --> 00:10:02,880
but i'm going to suggest that it's been

00:10:02,000 --> 00:10:06,320
lagging

00:10:02,880 --> 00:10:09,040
a bit on the operation side

00:10:06,320 --> 00:10:10,720
now this is one of my favorite photos

00:10:09,040 --> 00:10:12,959
this is a photo that i took at the

00:10:10,720 --> 00:10:14,720
devops enterprise summit

00:10:12,959 --> 00:10:16,320
which is if you haven't heard of it a

00:10:14,720 --> 00:10:18,240
really great conference

00:10:16,320 --> 00:10:20,160
uh virtual is coming up in a couple of

00:10:18,240 --> 00:10:22,160
weeks i sit on the programming committee

00:10:20,160 --> 00:10:23,440
this is the conference that is put on by

00:10:22,160 --> 00:10:25,360
jean kim

00:10:23,440 --> 00:10:27,120
so if you don't know who gene kim is you

00:10:25,360 --> 00:10:28,480
might know him by being co-author of the

00:10:27,120 --> 00:10:31,600
phoenix project

00:10:28,480 --> 00:10:33,440
more recently the unicorn project also

00:10:31,600 --> 00:10:36,320
accelerate which is the book that kind

00:10:33,440 --> 00:10:38,560
of shows you the background behind the

00:10:36,320 --> 00:10:40,720
state of the devops report

00:10:38,560 --> 00:10:41,839
and this person that's speaking there is

00:10:40,720 --> 00:10:44,560
jonathan smart

00:10:41,839 --> 00:10:46,160
at the time he was at barclays bank um

00:10:44,560 --> 00:10:49,279
he's also a very significant

00:10:46,160 --> 00:10:52,240
part of the um the devops enterprise

00:10:49,279 --> 00:10:54,640
community and what i love so much and i

00:10:52,240 --> 00:10:56,720
won't explain the entire slide he did

00:10:54,640 --> 00:10:58,640
this slide as a build and he's super

00:10:56,720 --> 00:11:00,800
funny it was really fun

00:10:58,640 --> 00:11:02,959
is that you'll notice there that where

00:11:00,800 --> 00:11:06,480
it says we're so freaking agile

00:11:02,959 --> 00:11:08,560
yay that's pointing to dev

00:11:06,480 --> 00:11:11,360
that's pointing to all the work that

00:11:08,560 --> 00:11:14,560
we've done in that development space

00:11:11,360 --> 00:11:16,240
the things that i just mentioned ci test

00:11:14,560 --> 00:11:19,200
driven automation

00:11:16,240 --> 00:11:20,640
test automation all of those things now

00:11:19,200 --> 00:11:23,040
he's calling out

00:11:20,640 --> 00:11:24,560
that while we're super fast and we can

00:11:23,040 --> 00:11:26,399
cycle quickly on the dev

00:11:24,560 --> 00:11:28,800
side there's all these things that

00:11:26,399 --> 00:11:31,040
perceive development that are slow

00:11:28,800 --> 00:11:33,440
and you can see he's annotated them with

00:11:31,040 --> 00:11:35,839
annual quarterly monthly

00:11:33,440 --> 00:11:37,600
but if you look to the right this is the

00:11:35,839 --> 00:11:39,760
part that i'm getting to

00:11:37,600 --> 00:11:41,120
you can see that it says waiting for

00:11:39,760 --> 00:11:44,399
immigration

00:11:41,120 --> 00:11:45,760
or waiting for acceptance or waiting for

00:11:44,399 --> 00:11:47,839
release

00:11:45,760 --> 00:11:50,399
so despite the fact that we've sped up

00:11:47,839 --> 00:11:52,560
the development cycle

00:11:50,399 --> 00:11:54,800
we are slow getting things all the way

00:11:52,560 --> 00:11:58,160
out to operations

00:11:54,800 --> 00:12:01,200
and that's where gitops starts

00:11:58,160 --> 00:12:04,560
to answer the question

00:12:01,200 --> 00:12:08,000
and so let's move on

00:12:04,560 --> 00:12:09,600
what is get ops then well the first

00:12:08,000 --> 00:12:12,560
thing that i'll tell you

00:12:09,600 --> 00:12:14,639
is that get ups takes cloud native all

00:12:12,560 --> 00:12:16,639
the way to operations

00:12:14,639 --> 00:12:19,200
so all of that cloud native stuff that

00:12:16,639 --> 00:12:21,680
we did with the architectural patterns

00:12:19,200 --> 00:12:23,519
and then the parts that were early on in

00:12:21,680 --> 00:12:25,360
the software development life

00:12:23,519 --> 00:12:27,360
it extends it all the way out to that

00:12:25,360 --> 00:12:29,839
production deploy

00:12:27,360 --> 00:12:31,760
now before i go into the details of what

00:12:29,839 --> 00:12:34,160
is getups let me give you a little bit

00:12:31,760 --> 00:12:36,560
of an idea of where we're going

00:12:34,160 --> 00:12:37,680
now i'm going to explain the basics of

00:12:36,560 --> 00:12:40,079
get ops

00:12:37,680 --> 00:12:41,760
now there are gonna be some basics of

00:12:40,079 --> 00:12:45,200
get ops here

00:12:41,760 --> 00:12:49,440
that represent the difference between

00:12:45,200 --> 00:12:52,480
the soa rest which really didn't change

00:12:49,440 --> 00:12:54,560
much and the oh

00:12:52,480 --> 00:12:55,920
now we're starting to tease out what are

00:12:54,560 --> 00:12:59,519
the things that we need to do

00:12:55,920 --> 00:13:01,040
fundamentally differently that's

00:12:59,519 --> 00:13:02,959
those are the things that i'm going to

00:13:01,040 --> 00:13:04,720
highlight in get ops is that

00:13:02,959 --> 00:13:06,079
those things that are fundamentally

00:13:04,720 --> 00:13:08,160
different that are going to

00:13:06,079 --> 00:13:10,240
change because some of these things are

00:13:08,160 --> 00:13:11,680
going to sound familiar

00:13:10,240 --> 00:13:13,839
but they're different and i'm going to

00:13:11,680 --> 00:13:17,920
be emphasizing why they're different

00:13:13,839 --> 00:13:18,160
as we go along so i do want to give you

00:13:17,920 --> 00:13:20,560
an

00:13:18,160 --> 00:13:21,680
idea of what those things are that are

00:13:20,560 --> 00:13:24,000
different

00:13:21,680 --> 00:13:25,839
but i'm not going to ask you to just

00:13:24,000 --> 00:13:28,079
trust me

00:13:25,839 --> 00:13:29,120
after i explain what those things that

00:13:28,079 --> 00:13:31,440
are different

00:13:29,120 --> 00:13:32,839
i am going to go through an explanation

00:13:31,440 --> 00:13:35,440
of why they're

00:13:32,839 --> 00:13:36,240
important so i'm not going to just talk

00:13:35,440 --> 00:13:38,880
about the what

00:13:36,240 --> 00:13:41,040
but i'm going to justify why these are

00:13:38,880 --> 00:13:44,079
important

00:13:41,040 --> 00:13:45,040
okay so let's start out with what is get

00:13:44,079 --> 00:13:47,199
ops

00:13:45,040 --> 00:13:48,320
well i've been saying all along this is

00:13:47,199 --> 00:13:50,880
about production

00:13:48,320 --> 00:13:53,279
this is about getting things running in

00:13:50,880 --> 00:13:56,000
your runtime environment

00:13:53,279 --> 00:13:56,720
so let's start there that's really where

00:13:56,000 --> 00:13:58,480
i want to go

00:13:56,720 --> 00:13:59,839
is i want to get things deployed in my

00:13:58,480 --> 00:14:01,760
runtime environment

00:13:59,839 --> 00:14:04,320
now you'll notice the little asterisk

00:14:01,760 --> 00:14:07,199
there i of course this is kubecon

00:14:04,320 --> 00:14:08,240
i'm showing kubernetes as the runtime

00:14:07,199 --> 00:14:10,560
environment

00:14:08,240 --> 00:14:12,480
what i'm talking about here with gitops

00:14:10,560 --> 00:14:15,920
is not constrained

00:14:12,480 --> 00:14:16,880
to kubernetes these concepts apply

00:14:15,920 --> 00:14:20,160
elsewhere

00:14:16,880 --> 00:14:22,079
now it turns out that kubernetes has

00:14:20,160 --> 00:14:24,240
some things that other runtime

00:14:22,079 --> 00:14:26,560
environments may not

00:14:24,240 --> 00:14:28,320
so it's a really great place to start

00:14:26,560 --> 00:14:28,720
with get ops because some of those

00:14:28,320 --> 00:14:31,040
things

00:14:28,720 --> 00:14:32,800
are required and you can actually see a

00:14:31,040 --> 00:14:33,440
hint of it when you see this actual

00:14:32,800 --> 00:14:35,199
state

00:14:33,440 --> 00:14:36,639
but i'll talk more about that in just a

00:14:35,199 --> 00:14:38,079
moment

00:14:36,639 --> 00:14:40,240
now i've also been talking about

00:14:38,079 --> 00:14:42,240
operations as we go along so who's going

00:14:40,240 --> 00:14:44,240
to be doing operations well

00:14:42,240 --> 00:14:45,920
we've got humans humans that are

00:14:44,240 --> 00:14:49,040
responsible

00:14:45,920 --> 00:14:50,880
for operating some software in

00:14:49,040 --> 00:14:52,720
production

00:14:50,880 --> 00:14:54,240
now as you can imagine there's a whole

00:14:52,720 --> 00:14:56,720
bunch of white space there

00:14:54,240 --> 00:14:58,320
i'm going to fill that white space so

00:14:56,720 --> 00:15:01,519
the first place that i'm going to

00:14:58,320 --> 00:15:03,040
fill that white space is with git now

00:15:01,519 --> 00:15:06,160
it's in the name

00:15:03,040 --> 00:15:09,440
now i won't go into the details here

00:15:06,160 --> 00:15:11,199
but get isn't the only thing but

00:15:09,440 --> 00:15:12,880
i'll talk a little bit more about what i

00:15:11,199 --> 00:15:16,480
call get semantics

00:15:12,880 --> 00:15:19,360
later on but we're going to use git

00:15:16,480 --> 00:15:21,519
and we're going to use git to store the

00:15:19,360 --> 00:15:24,959
artifacts that are required

00:15:21,519 --> 00:15:28,000
for me to be able to do the operations

00:15:24,959 --> 00:15:31,839
and there is an interface that

00:15:28,000 --> 00:15:34,959
you those humans will use into git

00:15:31,839 --> 00:15:38,320
those interfaces are equally important

00:15:34,959 --> 00:15:41,600
git acts as a store but it also

00:15:38,320 --> 00:15:43,120
acts as an interface and i'm going to

00:15:41,600 --> 00:15:45,600
say something and i'm going to say it a

00:15:43,120 --> 00:15:48,480
couple of times because it's really

00:15:45,600 --> 00:15:49,839
super important here it's not the

00:15:48,480 --> 00:15:52,839
interface to get

00:15:49,839 --> 00:15:54,639
anymore it is the interface to

00:15:52,839 --> 00:15:57,600
operations

00:15:54,639 --> 00:15:59,839
so it's kind of this transitive thing

00:15:57,600 --> 00:16:01,680
it's the interface the operations

00:15:59,839 --> 00:16:02,880
it's not that i'm doing operations

00:16:01,680 --> 00:16:05,680
somewhere else

00:16:02,880 --> 00:16:06,880
and i'm doing stuff and get it's not

00:16:05,680 --> 00:16:08,959
that i'm just

00:16:06,880 --> 00:16:10,079
storing my infrastructure as code

00:16:08,959 --> 00:16:12,560
scripts

00:16:10,079 --> 00:16:13,440
and then have to run those somewhere

00:16:12,560 --> 00:16:16,720
else

00:16:13,440 --> 00:16:19,920
to actually do the operations git

00:16:16,720 --> 00:16:23,680
becomes the interface for operations

00:16:19,920 --> 00:16:26,800
when i do something in git it has an

00:16:23,680 --> 00:16:28,240
effect on operations so instead of

00:16:26,800 --> 00:16:30,720
sitting at some vi

00:16:28,240 --> 00:16:32,399
admin you know a vi admin sitting at the

00:16:30,720 --> 00:16:35,759
vsphere console

00:16:32,399 --> 00:16:37,440
or sitting at amazon console to execute

00:16:35,759 --> 00:16:40,639
operational activities

00:16:37,440 --> 00:16:45,440
this now becomes the interface for

00:16:40,639 --> 00:16:47,839
operations that's pretty significant

00:16:45,440 --> 00:16:49,360
okay so then let's go back under the

00:16:47,839 --> 00:16:52,720
covers what happens

00:16:49,360 --> 00:16:55,440
when i do creation in git

00:16:52,720 --> 00:16:56,800
i'm doing something in git what happens

00:16:55,440 --> 00:16:58,800
well of course

00:16:56,800 --> 00:16:59,839
there's some kind of automation that

00:16:58,800 --> 00:17:01,440
happens

00:16:59,839 --> 00:17:03,440
so that the things that i'm doing and

00:17:01,440 --> 00:17:04,880
get are reflected in the runtime

00:17:03,440 --> 00:17:07,039
environment

00:17:04,880 --> 00:17:09,120
now here's the second thing that's

00:17:07,039 --> 00:17:12,520
really important about git

00:17:09,120 --> 00:17:17,039
is that that automation is

00:17:12,520 --> 00:17:19,439
convergent now what do i mean by that

00:17:17,039 --> 00:17:21,679
there's two other phrases or two other

00:17:19,439 --> 00:17:23,199
pairs of words on this slide

00:17:21,679 --> 00:17:25,839
that get to what i mean by that

00:17:23,199 --> 00:17:30,559
convergent i already called one of them

00:17:25,839 --> 00:17:33,280
out which is actual state kubernetes

00:17:30,559 --> 00:17:33,840
operates on this principles of actual

00:17:33,280 --> 00:17:37,840
state

00:17:33,840 --> 00:17:41,600
and desired state and it says

00:17:37,840 --> 00:17:43,919
we are going to constantly we kubernetes

00:17:41,600 --> 00:17:45,679
container orchestration the first use

00:17:43,919 --> 00:17:47,120
case of kubernetes was all about

00:17:45,679 --> 00:17:49,600
container orchestration

00:17:47,120 --> 00:17:50,880
running your container images

00:17:49,600 --> 00:17:53,520
orchestrating those

00:17:50,880 --> 00:17:54,080
scheduling those keeping them running it

00:17:53,520 --> 00:17:56,000
says

00:17:54,080 --> 00:17:58,320
i'm going to look at the actual state of

00:17:56,000 --> 00:18:00,400
the containers running in my environment

00:17:58,320 --> 00:18:01,520
i'm going to compare it to the desired

00:18:00,400 --> 00:18:04,080
state

00:18:01,520 --> 00:18:05,840
now in kubernetes the desired state is

00:18:04,080 --> 00:18:07,360
generally an etcd

00:18:05,840 --> 00:18:09,280
that's what we're going to talk about is

00:18:07,360 --> 00:18:12,720
how to draw the desired state

00:18:09,280 --> 00:18:15,840
between fcd and git

00:18:12,720 --> 00:18:16,880
um and i'm going to constantly can be be

00:18:15,840 --> 00:18:20,799
comparing those

00:18:16,880 --> 00:18:24,240
and i'm going to bring them in alignment

00:18:20,799 --> 00:18:28,480
that convergence pattern again is

00:18:24,240 --> 00:18:31,679
like the difference between so and rest

00:18:28,480 --> 00:18:33,840
and doing cloud native in a real way

00:18:31,679 --> 00:18:35,600
about thinking about things like retries

00:18:33,840 --> 00:18:37,679
and item potentials

00:18:35,600 --> 00:18:39,679
that is the secret sauce that's the

00:18:37,679 --> 00:18:43,120
thing that's making the difference

00:18:39,679 --> 00:18:43,840
is that convergence so the convergent

00:18:43,120 --> 00:18:46,960
stuff

00:18:43,840 --> 00:18:49,679
is really important now

00:18:46,960 --> 00:18:50,960
there's one more element on this slide

00:18:49,679 --> 00:18:53,280
and you'll notice

00:18:50,960 --> 00:18:55,280
that the arrow goes back to the left

00:18:53,280 --> 00:18:58,480
hand side as well

00:18:55,280 --> 00:19:02,240
so convergent doesn't just mean

00:18:58,480 --> 00:19:05,760
left to right it might in fact mean

00:19:02,240 --> 00:19:06,880
right to left it might mean that there

00:19:05,760 --> 00:19:08,559
is some kind of

00:19:06,880 --> 00:19:10,160
automation that's happening in the

00:19:08,559 --> 00:19:12,640
runtime system

00:19:10,160 --> 00:19:14,320
that is doing legitimate things and i'll

00:19:12,640 --> 00:19:16,960
give you a concrete exam

00:19:14,320 --> 00:19:19,039
example of that later in the talk that

00:19:16,960 --> 00:19:22,480
is doing legitimate things

00:19:19,039 --> 00:19:24,320
that then need to be reflected back into

00:19:22,480 --> 00:19:27,280
the git repository

00:19:24,320 --> 00:19:28,080
because not only is the git repository

00:19:27,280 --> 00:19:31,360
not only is

00:19:28,080 --> 00:19:32,559
git the interface for operations it now

00:19:31,360 --> 00:19:35,679
becomes

00:19:32,559 --> 00:19:36,720
the source of truth it is the desired

00:19:35,679 --> 00:19:39,200
state

00:19:36,720 --> 00:19:41,039
so if and we're constantly bringing

00:19:39,200 --> 00:19:43,280
these things into alignment if something

00:19:41,039 --> 00:19:46,880
happens in the runtime environment

00:19:43,280 --> 00:19:49,520
that should be part of the desired state

00:19:46,880 --> 00:19:51,280
we need to ensure that that is captured

00:19:49,520 --> 00:19:54,400
as well

00:19:51,280 --> 00:19:57,760
so what you see here in this slide is

00:19:54,400 --> 00:19:58,080
a whole bunch of convergent loops and in

00:19:57,760 --> 00:20:00,480
get

00:19:58,080 --> 00:20:02,480
ops there's convergent loops around

00:20:00,480 --> 00:20:04,400
continuous delivery

00:20:02,480 --> 00:20:06,640
but remember i've been saying that it

00:20:04,400 --> 00:20:09,120
takes it all the way to operations

00:20:06,640 --> 00:20:09,760
there's also convergent loops that get

00:20:09,120 --> 00:20:12,080
you

00:20:09,760 --> 00:20:13,200
running and running in your runtime

00:20:12,080 --> 00:20:15,120
system

00:20:13,200 --> 00:20:16,720
and we'll talk more about that in a

00:20:15,120 --> 00:20:20,320
moment

00:20:16,720 --> 00:20:23,440
okay so that's get ops but

00:20:20,320 --> 00:20:24,240
that's not nearly as interesting as it

00:20:23,440 --> 00:20:27,679
is

00:20:24,240 --> 00:20:30,960
until we start to ask this question okay

00:20:27,679 --> 00:20:32,720
great get offs but really what are you

00:20:30,960 --> 00:20:35,120
trying to do

00:20:32,720 --> 00:20:37,360
why get ops what's the problem that it's

00:20:35,120 --> 00:20:40,000
solving

00:20:37,360 --> 00:20:41,039
and what it really comes down to is

00:20:40,000 --> 00:20:43,440
we're trying to

00:20:41,039 --> 00:20:45,360
get better at doing software we just

00:20:43,440 --> 00:20:47,679
want to do software better

00:20:45,360 --> 00:20:49,760
we want to cut down our cycle times we

00:20:47,679 --> 00:20:51,280
want to deliver value to the customer

00:20:49,760 --> 00:20:53,840
more quickly

00:20:51,280 --> 00:20:55,120
we want to deliver value to the customer

00:20:53,840 --> 00:20:57,919
more rapidly from

00:20:55,120 --> 00:20:58,720
idea to production why let it stew in

00:20:57,919 --> 00:21:00,640
our minds

00:20:58,720 --> 00:21:02,000
for months and months and months we want

00:21:00,640 --> 00:21:04,640
to get that value out to the

00:21:02,000 --> 00:21:05,200
customer when there's a problem we want

00:21:04,640 --> 00:21:07,280
to get

00:21:05,200 --> 00:21:09,360
we want to recover our systems quickly

00:21:07,280 --> 00:21:10,960
so we just want to get better at doing

00:21:09,360 --> 00:21:14,400
software because software

00:21:10,960 --> 00:21:17,039
really powers everything these days

00:21:14,400 --> 00:21:19,200
well for those of you who have not been

00:21:17,039 --> 00:21:21,200
introduced to this yet i'm delighted to

00:21:19,200 --> 00:21:22,159
introduce to you the state of the devops

00:21:21,200 --> 00:21:24,320
report

00:21:22,159 --> 00:21:26,000
this is the work that was done by dora

00:21:24,320 --> 00:21:28,400
which is the

00:21:26,000 --> 00:21:29,679
the devops research assessment

00:21:28,400 --> 00:21:32,240
organization

00:21:29,679 --> 00:21:34,720
it was originally an independent venture

00:21:32,240 --> 00:21:37,919
that was founded by nicole forsgren jazz

00:21:34,720 --> 00:21:39,440
humble and yes jess humble of continuous

00:21:37,919 --> 00:21:41,360
delivery

00:21:39,440 --> 00:21:42,640
and gene kim who i just mentioned

00:21:41,360 --> 00:21:44,559
earlier

00:21:42,640 --> 00:21:46,559
and they did some work over a number of

00:21:44,559 --> 00:21:47,520
years dora was eventually purchased by

00:21:46,559 --> 00:21:49,440
google

00:21:47,520 --> 00:21:51,600
um but what i'm showing you here is a

00:21:49,440 --> 00:21:54,000
chart from the most

00:21:51,600 --> 00:21:55,919
devops report from dora there's another

00:21:54,000 --> 00:21:56,880
state of the dev ops report from puppet

00:21:55,919 --> 00:21:58,720
labs

00:21:56,880 --> 00:22:00,159
but this is the one that's from from

00:21:58,720 --> 00:22:03,440
dora from from

00:22:00,159 --> 00:22:05,440
the devops research assessment and they

00:22:03,440 --> 00:22:08,640
did some really great work

00:22:05,440 --> 00:22:12,480
that correlated specific it

00:22:08,640 --> 00:22:14,720
behaviors with business performance

00:22:12,480 --> 00:22:15,919
and business performance was measured on

00:22:14,720 --> 00:22:18,880
things like

00:22:15,919 --> 00:22:20,240
are you gaining market share are you

00:22:18,880 --> 00:22:22,320
profitable

00:22:20,240 --> 00:22:24,720
those are really good markers do you

00:22:22,320 --> 00:22:25,440
have high net promoter scores do your

00:22:24,720 --> 00:22:28,960
customers

00:22:25,440 --> 00:22:31,600
really love you those were markers of

00:22:28,960 --> 00:22:33,280
from elite performing organizations all

00:22:31,600 --> 00:22:34,960
the way down to low performing

00:22:33,280 --> 00:22:35,840
organizations the ones that are losing

00:22:34,960 --> 00:22:38,960
market share

00:22:35,840 --> 00:22:41,200
losing money have horrible net promoter

00:22:38,960 --> 00:22:43,520
scores and those types of things

00:22:41,200 --> 00:22:46,000
and they came up with four metrics that

00:22:43,520 --> 00:22:49,039
really correlated beautifully

00:22:46,000 --> 00:22:51,120
across these different categories

00:22:49,039 --> 00:22:52,880
what it comes down to is that the most

00:22:51,120 --> 00:22:56,240
elite performers

00:22:52,880 --> 00:22:59,039
deploy the most frequent have the

00:22:56,240 --> 00:22:59,440
shortest time of lead for changes that

00:22:59,039 --> 00:23:01,840
is

00:22:59,440 --> 00:23:03,919
i've got something that's ready to be

00:23:01,840 --> 00:23:06,240
deployed into production

00:23:03,919 --> 00:23:08,320
and how long does it take from the time

00:23:06,240 --> 00:23:10,799
that it's ready to go into production

00:23:08,320 --> 00:23:12,640
to the time that it gets deployed so you

00:23:10,799 --> 00:23:14,799
can see that the elite performers

00:23:12,640 --> 00:23:16,480
less than one day i've got something

00:23:14,799 --> 00:23:18,799
ready to go to production

00:23:16,480 --> 00:23:19,600
it goes there right away the low

00:23:18,799 --> 00:23:22,880
performers

00:23:19,600 --> 00:23:25,120
between one and six months from the time

00:23:22,880 --> 00:23:27,679
it's code complete to the time that

00:23:25,120 --> 00:23:28,400
customers can get value from it six

00:23:27,679 --> 00:23:31,200
months

00:23:28,400 --> 00:23:33,039
that's a long time and those things

00:23:31,200 --> 00:23:34,799
notice that those things are highlighted

00:23:33,039 --> 00:23:38,640
in green

00:23:34,799 --> 00:23:39,200
those are kind of all about the software

00:23:38,640 --> 00:23:42,000
itself

00:23:39,200 --> 00:23:43,919
it's all about the ideas that we're

00:23:42,000 --> 00:23:45,360
building into the software so arguably

00:23:43,919 --> 00:23:47,679
these are the things that the first

00:23:45,360 --> 00:23:49,120
class concerns of the developer

00:23:47,679 --> 00:23:51,360
and then the things that are in the

00:23:49,120 --> 00:23:53,200
lower part in the blue

00:23:51,360 --> 00:23:54,559
start to get around resilience

00:23:53,200 --> 00:23:57,600
characteristics

00:23:54,559 --> 00:24:00,080
so when you have a problem then

00:23:57,600 --> 00:24:00,799
how long does it take for you to recover

00:24:00,080 --> 00:24:02,640
your system

00:24:00,799 --> 00:24:04,320
so the mean time for recovery for

00:24:02,640 --> 00:24:06,240
example you can see that the elite

00:24:04,320 --> 00:24:09,520
performers less than one hour

00:24:06,240 --> 00:24:11,600
the low performers one week to one month

00:24:09,520 --> 00:24:13,440
when i have an outage it takes me a

00:24:11,600 --> 00:24:16,880
month to recover

00:24:13,440 --> 00:24:19,840
seriously if you're the pizza ordering

00:24:16,880 --> 00:24:21,039
web app on super bowl sunday that isn't

00:24:19,840 --> 00:24:24,559
gonna

00:24:21,039 --> 00:24:25,039
you're gonna get fired um change failure

00:24:24,559 --> 00:24:27,440
rate

00:24:25,039 --> 00:24:28,320
which is when i'm making a change in

00:24:27,440 --> 00:24:31,520
production

00:24:28,320 --> 00:24:33,440
how often do i have a failure

00:24:31,520 --> 00:24:35,679
we're reducing that as well and you can

00:24:33,440 --> 00:24:36,400
see remarkable differences between the

00:24:35,679 --> 00:24:39,760
elite

00:24:36,400 --> 00:24:41,679
and the low performers so remember the

00:24:39,760 --> 00:24:43,120
whole goal here is to get better at

00:24:41,679 --> 00:24:45,679
doing software

00:24:43,120 --> 00:24:46,480
so i'm going to show you now how getups

00:24:45,679 --> 00:24:49,840
get ops

00:24:46,480 --> 00:24:50,720
supports that agenda should supports the

00:24:49,840 --> 00:24:52,960
agenda

00:24:50,720 --> 00:24:53,919
of being better at doing software by

00:24:52,960 --> 00:24:56,000
incr by

00:24:53,919 --> 00:24:56,960
improving the numbers here getting you

00:24:56,000 --> 00:24:59,919
from the low

00:24:56,960 --> 00:25:00,799
up into the elite category now i'm going

00:24:59,919 --> 00:25:04,000
to focus

00:25:00,799 --> 00:25:07,120
first on the developer ones

00:25:04,000 --> 00:25:08,240
so let's start with that developer what

00:25:07,120 --> 00:25:10,799
we want to do

00:25:08,240 --> 00:25:11,520
is we want to enable that application

00:25:10,799 --> 00:25:15,120
team

00:25:11,520 --> 00:25:15,600
the devops team so i am using this idea

00:25:15,120 --> 00:25:18,000
of

00:25:15,600 --> 00:25:20,080
the application team isn't throwing

00:25:18,000 --> 00:25:22,240
things over the wall to somebody else

00:25:20,080 --> 00:25:23,760
there's an application team that's made

00:25:22,240 --> 00:25:26,960
up of developers

00:25:23,760 --> 00:25:30,640
and people who are maybe developers

00:25:26,960 --> 00:25:32,480
and also have operations mojo

00:25:30,640 --> 00:25:34,000
not necessarily infrastructure

00:25:32,480 --> 00:25:36,799
operations mojo

00:25:34,000 --> 00:25:37,360
but operations mojo so they're going to

00:25:36,799 --> 00:25:39,039
be

00:25:37,360 --> 00:25:40,720
operating those applications in

00:25:39,039 --> 00:25:42,000
production and we want to help them

00:25:40,720 --> 00:25:44,880
release more frequent

00:25:42,000 --> 00:25:46,559
frequently reduced lead time and just

00:25:44,880 --> 00:25:48,480
generally be able to operate their

00:25:46,559 --> 00:25:50,640
applications

00:25:48,480 --> 00:25:52,799
so what's one of the first things that

00:25:50,640 --> 00:25:55,600
we can do to help those developers

00:25:52,799 --> 00:25:57,120
or those application teams be more

00:25:55,600 --> 00:25:59,120
efficient

00:25:57,120 --> 00:26:01,360
well how about we allow them to use

00:25:59,120 --> 00:26:04,400
familiar tooling

00:26:01,360 --> 00:26:06,400
and what am i talking about here well

00:26:04,400 --> 00:26:08,000
pretty much all developers and

00:26:06,400 --> 00:26:11,440
application teams

00:26:08,000 --> 00:26:14,159
are familiar with git so

00:26:11,440 --> 00:26:15,760
they spend their time in git they might

00:26:14,159 --> 00:26:18,640
spend their time in git

00:26:15,760 --> 00:26:21,039
through their ide but they're used to

00:26:18,640 --> 00:26:21,679
this get interface they're used to being

00:26:21,039 --> 00:26:24,400
able to

00:26:21,679 --> 00:26:25,440
for example see a threaded discussion

00:26:24,400 --> 00:26:28,320
around something

00:26:25,440 --> 00:26:29,440
they're used to being able to attach

00:26:28,320 --> 00:26:33,200
tags

00:26:29,440 --> 00:26:35,840
to things and have automation happen

00:26:33,200 --> 00:26:37,279
so when they tag something it kicks off

00:26:35,840 --> 00:26:40,320
something in the ci

00:26:37,279 --> 00:26:41,120
process or it might just be the very

00:26:40,320 --> 00:26:42,720
check-in

00:26:41,120 --> 00:26:44,159
the fact that you've just pushed

00:26:42,720 --> 00:26:47,200
something into or you know

00:26:44,159 --> 00:26:50,240
into the upstream repository that

00:26:47,200 --> 00:26:52,080
causes that automation to happen

00:26:50,240 --> 00:26:54,400
so that's the first thing and this is

00:26:52,080 --> 00:26:58,080
something this is kind of table

00:26:54,400 --> 00:27:00,240
table state and often people think that

00:26:58,080 --> 00:27:02,320
well oh yeah it's all about using git

00:27:00,240 --> 00:27:05,600
it's about using familiar tools

00:27:02,320 --> 00:27:08,640
done but i have

00:27:05,600 --> 00:27:12,320
20 minutes left in this session

00:27:08,640 --> 00:27:15,760
so you know there's more to it than that

00:27:12,320 --> 00:27:20,559
the second thing that is really great

00:27:15,760 --> 00:27:23,279
for the application team is self-service

00:27:20,559 --> 00:27:24,640
enable them to do things don't have them

00:27:23,279 --> 00:27:27,760
write tickets

00:27:24,640 --> 00:27:28,880
don't have them finish code create a

00:27:27,760 --> 00:27:32,320
container image

00:27:28,880 --> 00:27:34,000
and then say all right operations team

00:27:32,320 --> 00:27:36,799
you can go ahead and deploy it now

00:27:34,000 --> 00:27:38,880
and here's my ticket for that let them

00:27:36,799 --> 00:27:40,799
do that themselves

00:27:38,880 --> 00:27:42,080
what i'm talking about here is not

00:27:40,799 --> 00:27:43,760
self-service

00:27:42,080 --> 00:27:46,080
infrastructure i'm talking about

00:27:43,760 --> 00:27:50,080
self-service operations

00:27:46,080 --> 00:27:53,919
let them do the operations themselves

00:27:50,080 --> 00:27:56,520
ah but i hear a lot of you saying

00:27:53,919 --> 00:27:57,919
wait a minute in order to do

00:27:56,520 --> 00:28:00,960
self-service

00:27:57,919 --> 00:28:02,799
up there's my self-service

00:28:00,960 --> 00:28:04,960
uh did i go the wrong way i think i went

00:28:02,799 --> 00:28:07,840
the wrong way so self-service

00:28:04,960 --> 00:28:10,159
in order to do self-service there's

00:28:07,840 --> 00:28:11,120
another party that has something to say

00:28:10,159 --> 00:28:14,080
for that

00:28:11,120 --> 00:28:16,480
and that party is the group of

00:28:14,080 --> 00:28:20,799
individuals that are responsible

00:28:16,480 --> 00:28:25,120
for things like security compliance

00:28:20,799 --> 00:28:28,720
resilience cost management

00:28:25,120 --> 00:28:32,080
and what we talk about this group

00:28:28,720 --> 00:28:34,240
is increasingly called the platform team

00:28:32,080 --> 00:28:36,000
because we know that the way that we can

00:28:34,240 --> 00:28:39,600
enable this behavior

00:28:36,000 --> 00:28:42,559
is by introducing a platform

00:28:39,600 --> 00:28:45,440
platforms are essential so when we have

00:28:42,559 --> 00:28:48,320
a platform then we have a surface area

00:28:45,440 --> 00:28:49,120
with which this constituents this set of

00:28:48,320 --> 00:28:51,760
folks

00:28:49,120 --> 00:28:53,520
can do their work now what are the

00:28:51,760 --> 00:28:55,120
things that they care about

00:28:53,520 --> 00:28:56,640
i'm going to call i already mentioned

00:28:55,120 --> 00:28:56,960
some of them there but i'm going to call

00:28:56,640 --> 00:29:00,080
out

00:28:56,960 --> 00:29:01,120
two in particular and that is security

00:29:00,080 --> 00:29:02,480
and compliance

00:29:01,120 --> 00:29:04,480
and i'm going to show you how github

00:29:02,480 --> 00:29:05,520
supports that and i'm going to talk

00:29:04,480 --> 00:29:08,399
about resilience

00:29:05,520 --> 00:29:10,840
and show you how github supports that so

00:29:08,399 --> 00:29:12,799
let's talk about security and compliance

00:29:10,840 --> 00:29:15,520
first

00:29:12,799 --> 00:29:16,240
now here's a way that we've done some

00:29:15,520 --> 00:29:18,799
automation

00:29:16,240 --> 00:29:20,559
in the past i'm going to assert that

00:29:18,799 --> 00:29:23,600
this is the so arrest

00:29:20,559 --> 00:29:26,960
equivalent of the kind of

00:29:23,600 --> 00:29:30,399
modern day operations it says all right

00:29:26,960 --> 00:29:32,159
i've got this ci stuff that's happening

00:29:30,399 --> 00:29:33,600
and then i'm just going to tack on to

00:29:32,159 --> 00:29:37,120
the end of that a cd

00:29:33,600 --> 00:29:38,640
process that is kind of the last step in

00:29:37,120 --> 00:29:41,760
ci

00:29:38,640 --> 00:29:43,679
and that cd process is now going to

00:29:41,760 --> 00:29:45,200
send things out to all of these

00:29:43,679 --> 00:29:47,039
different target environments it's going

00:29:45,200 --> 00:29:47,679
to be responsible for sending things to

00:29:47,039 --> 00:29:49,919
dev

00:29:47,679 --> 00:29:51,440
sending things to staging sending things

00:29:49,919 --> 00:29:54,880
to prod

00:29:51,440 --> 00:29:57,039
and that's fine and in

00:29:54,880 --> 00:29:59,440
sorry i'm kind of underselling that a

00:29:57,039 --> 00:30:02,840
little bit it's extremely valuable

00:29:59,440 --> 00:30:05,919
we've seen a lot of value in

00:30:02,840 --> 00:30:07,919
operationalizing the cd process

00:30:05,919 --> 00:30:09,279
there's great tools out there like

00:30:07,919 --> 00:30:12,000
spinnaker that are

00:30:09,279 --> 00:30:12,960
helping you organize things across these

00:30:12,000 --> 00:30:15,120
different development

00:30:12,960 --> 00:30:17,120
environments and are helping you build

00:30:15,120 --> 00:30:18,799
the workflows that go across these

00:30:17,120 --> 00:30:21,520
different environments

00:30:18,799 --> 00:30:24,640
but the reason that i say mac is that

00:30:21,520 --> 00:30:26,799
there's a security problem on this slide

00:30:24,640 --> 00:30:29,360
the security problem on this slide is

00:30:26,799 --> 00:30:31,760
that when we have a centralized system

00:30:29,360 --> 00:30:34,799
that's doing continuous delivery

00:30:31,760 --> 00:30:36,000
that centralized system has to have keys

00:30:34,799 --> 00:30:39,039
to all of those different

00:30:36,000 --> 00:30:42,480
environments on the outside so

00:30:39,039 --> 00:30:45,440
there is a security problem here in that

00:30:42,480 --> 00:30:46,240
if that system is compromised and we've

00:30:45,440 --> 00:30:48,799
seen

00:30:46,240 --> 00:30:50,080
things like from solarwinds recently

00:30:48,799 --> 00:30:53,279
that the software supply

00:30:50,080 --> 00:30:54,880
chain can be compromised so if my cd

00:30:53,279 --> 00:30:56,720
system is compromised

00:30:54,880 --> 00:30:58,960
then all of my downstream runtime

00:30:56,720 --> 00:31:01,200
systems are compromised

00:30:58,960 --> 00:31:02,399
so one of the things that get ops

00:31:01,200 --> 00:31:06,399
supports

00:31:02,399 --> 00:31:09,760
is it supports this pull model

00:31:06,399 --> 00:31:11,679
so how does it support this pull model

00:31:09,760 --> 00:31:14,720
remember i talked about convergent

00:31:11,679 --> 00:31:17,519
systems and i showed you the cycles

00:31:14,720 --> 00:31:18,000
what we have is in each one of these

00:31:17,519 --> 00:31:21,360
target

00:31:18,000 --> 00:31:23,600
environments we have a reconciler

00:31:21,360 --> 00:31:25,200
we have a reconciler that is saying you

00:31:23,600 --> 00:31:27,279
know what i'm not going to wait for you

00:31:25,200 --> 00:31:29,600
to push things out to me

00:31:27,279 --> 00:31:33,039
because i want to be responsible for my

00:31:29,600 --> 00:31:35,519
own security and my own convergence

00:31:33,039 --> 00:31:38,320
i am going to take a look at the git

00:31:35,519 --> 00:31:41,360
repository that is holding those things

00:31:38,320 --> 00:31:44,240
so that is i'm going to pull and

00:31:41,360 --> 00:31:45,600
with that your platform teams are going

00:31:44,240 --> 00:31:49,840
to be much happier

00:31:45,600 --> 00:31:52,159
from a security perspective okay

00:31:49,840 --> 00:31:53,279
so that's one of the first things

00:31:52,159 --> 00:31:56,320
security

00:31:53,279 --> 00:31:57,200
you we get ups has a direct impact on

00:31:56,320 --> 00:31:59,679
security

00:31:57,200 --> 00:32:01,760
because of the way that we do continuous

00:31:59,679 --> 00:32:03,919
delivery

00:32:01,760 --> 00:32:05,360
now i talked about security and

00:32:03,919 --> 00:32:07,840
compliance

00:32:05,360 --> 00:32:09,840
so from a compliance perspective i'm

00:32:07,840 --> 00:32:12,159
coming back to get here

00:32:09,840 --> 00:32:13,840
and what i want to show you here is the

00:32:12,159 --> 00:32:17,120
git

00:32:13,840 --> 00:32:19,919
the great thing is that when git becomes

00:32:17,120 --> 00:32:22,720
the interface for operations

00:32:19,919 --> 00:32:24,640
then what we see is every single thing

00:32:22,720 --> 00:32:27,039
that a human has done

00:32:24,640 --> 00:32:29,120
or even the things that have been

00:32:27,039 --> 00:32:31,039
automated remember the feedback loop

00:32:29,120 --> 00:32:32,960
from the runtime environment

00:32:31,039 --> 00:32:35,600
every single one of those things has

00:32:32,960 --> 00:32:38,320
been recorded in a log

00:32:35,600 --> 00:32:40,080
and that's what we see here now this i'm

00:32:38,320 --> 00:32:42,240
going to bring this screenshot back for

00:32:40,080 --> 00:32:44,880
a different reason in just a moment

00:32:42,240 --> 00:32:46,000
but here you can see that there is my

00:32:44,880 --> 00:32:47,760
audit log

00:32:46,000 --> 00:32:49,360
so your auditors are going to be really

00:32:47,760 --> 00:32:53,279
happy because everything is

00:32:49,360 --> 00:32:56,080
recorded and guaranteed to be recorded

00:32:53,279 --> 00:32:58,000
now the next thing that that platform

00:32:56,080 --> 00:32:59,279
team that i want to focus on is i want

00:32:58,000 --> 00:33:02,640
to focus on

00:32:59,279 --> 00:33:03,760
resilience they're also very very

00:33:02,640 --> 00:33:06,240
concerned with

00:33:03,760 --> 00:33:06,880
keeping the systems up and running so in

00:33:06,240 --> 00:33:09,039
the past

00:33:06,880 --> 00:33:10,960
this is where your change control your

00:33:09,039 --> 00:33:13,519
head of change control would be

00:33:10,960 --> 00:33:14,320
sitting there and coming back to this

00:33:13,519 --> 00:33:16,880
slide

00:33:14,320 --> 00:33:18,159
i'm the resilience is really the blue

00:33:16,880 --> 00:33:20,880
boxes at the bottom

00:33:18,159 --> 00:33:21,360
but i'm going to take them one at a time

00:33:20,880 --> 00:33:25,600
let's

00:33:21,360 --> 00:33:28,399
talk about time to restore first

00:33:25,600 --> 00:33:29,120
so here we go back to i promised to come

00:33:28,399 --> 00:33:32,880
back to this

00:33:29,120 --> 00:33:34,640
this get um view again this is where git

00:33:32,880 --> 00:33:36,640
semantics come in

00:33:34,640 --> 00:33:38,399
i said earlier that it doesn't it's not

00:33:36,640 --> 00:33:41,919
required to begin

00:33:38,399 --> 00:33:44,480
but git has a number of characteristics

00:33:41,919 --> 00:33:46,640
that are really valuable if you can

00:33:44,480 --> 00:33:49,600
achieve those get semantics

00:33:46,640 --> 00:33:49,919
using something other than git or using

00:33:49,600 --> 00:33:53,760
a

00:33:49,919 --> 00:33:57,519
combination of git and another store

00:33:53,760 --> 00:34:01,919
i.e an image repository i.e

00:33:57,519 --> 00:34:04,159
a secrets store that combination of get

00:34:01,919 --> 00:34:06,240
together with it in another external

00:34:04,159 --> 00:34:09,599
store can work extremely well

00:34:06,240 --> 00:34:13,200
as well now how does

00:34:09,599 --> 00:34:16,399
git semantics support this metric

00:34:13,200 --> 00:34:17,520
mean time to recovery so here is the

00:34:16,399 --> 00:34:20,960
scenario

00:34:17,520 --> 00:34:24,159
we have an outage how long does it take

00:34:20,960 --> 00:34:26,240
for us to recover from that outage

00:34:24,159 --> 00:34:27,359
so what are the important get semantics

00:34:26,240 --> 00:34:30,720
that um

00:34:27,359 --> 00:34:32,839
provide that well there's a couple of

00:34:30,720 --> 00:34:36,000
things the first thing is

00:34:32,839 --> 00:34:40,079
that everything is versioned

00:34:36,000 --> 00:34:42,240
versioning is built in to get

00:34:40,079 --> 00:34:43,760
what am what is the version you notice

00:34:42,240 --> 00:34:45,200
there i have an annotation that's

00:34:43,760 --> 00:34:48,639
pointing to the get

00:34:45,200 --> 00:34:50,240
sha this is what i mean by versioning as

00:34:48,639 --> 00:34:52,399
baked in

00:34:50,240 --> 00:34:55,520
if you have a versioning system and by

00:34:52,399 --> 00:34:58,240
the way your image repository

00:34:55,520 --> 00:34:58,800
generally does not have a version system

00:34:58,240 --> 00:35:01,680
baked

00:34:58,800 --> 00:35:02,160
into it you have to apply the version

00:35:01,680 --> 00:35:05,839
number

00:35:02,160 --> 00:35:07,520
yourself you have to say this is version

00:35:05,839 --> 00:35:10,480
one

00:35:07,520 --> 00:35:11,520
what what that means is that you can in

00:35:10,480 --> 00:35:15,119
fact

00:35:11,520 --> 00:35:16,880
change your image and still call it

00:35:15,119 --> 00:35:20,079
version one

00:35:16,880 --> 00:35:23,760
but it's not really the same version

00:35:20,079 --> 00:35:26,000
so am i using version one the real one

00:35:23,760 --> 00:35:27,280
the original one or am i using version

00:35:26,000 --> 00:35:30,640
one that i just

00:35:27,280 --> 00:35:33,680
bashed on top get doesn't even

00:35:30,640 --> 00:35:34,880
allow you to make that change that that

00:35:33,680 --> 00:35:38,160
that choice

00:35:34,880 --> 00:35:41,040
it has versioning baked in if you go in

00:35:38,160 --> 00:35:43,040
and you change just some white space

00:35:41,040 --> 00:35:45,920
you're gonna get a different get shaw

00:35:43,040 --> 00:35:47,359
even though the code from a semantics

00:35:45,920 --> 00:35:50,000
perspective is the same

00:35:47,359 --> 00:35:51,440
so versioning is baked in by the way i

00:35:50,000 --> 00:35:53,680
can't help but tell you

00:35:51,440 --> 00:35:54,960
that one of the best practices that we

00:35:53,680 --> 00:35:56,880
see in

00:35:54,960 --> 00:35:58,000
get ops and you'll probably see some of

00:35:56,880 --> 00:36:01,040
this in the later talks

00:35:58,000 --> 00:36:02,880
today is to use the shaw

00:36:01,040 --> 00:36:05,280
as a part of what you're using to

00:36:02,880 --> 00:36:06,720
version your container images

00:36:05,280 --> 00:36:08,880
when you store them in the container

00:36:06,720 --> 00:36:11,440
image image registry

00:36:08,880 --> 00:36:13,200
so that versioning semantic is important

00:36:11,440 --> 00:36:14,400
it's also important that it'd be

00:36:13,200 --> 00:36:16,480
immutable

00:36:14,400 --> 00:36:17,440
now of course we all know that we can

00:36:16,480 --> 00:36:20,560
rewrite

00:36:17,440 --> 00:36:21,280
get histories don't do that set up your

00:36:20,560 --> 00:36:23,920
environment

00:36:21,280 --> 00:36:26,000
so that it is immutable i'm not

00:36:23,920 --> 00:36:28,000
suggesting that early on in the

00:36:26,000 --> 00:36:29,280
software development life cycle that you

00:36:28,000 --> 00:36:31,040
aren't going to squash

00:36:29,280 --> 00:36:33,119
you know commits and things like that

00:36:31,040 --> 00:36:35,599
but don't allow that type of thing

00:36:33,119 --> 00:36:37,440
for your config repository you want to

00:36:35,599 --> 00:36:39,119
have immutability

00:36:37,440 --> 00:36:40,960
and then i just talked about this

00:36:39,119 --> 00:36:42,400
recently and somebody said oh i didn't

00:36:40,960 --> 00:36:43,839
know that this was just a couple of

00:36:42,400 --> 00:36:46,000
weeks ago

00:36:43,839 --> 00:36:46,880
that big cool one of the cool things

00:36:46,000 --> 00:36:48,960
about git

00:36:46,880 --> 00:36:51,200
is that every single node in the git

00:36:48,960 --> 00:36:52,240
history has a complete representation of

00:36:51,200 --> 00:36:55,920
the system

00:36:52,240 --> 00:36:56,960
it's not storing diffs now why is all of

00:36:55,920 --> 00:36:59,760
this valuable

00:36:56,960 --> 00:37:00,880
well this is valuable so that if i have

00:36:59,760 --> 00:37:03,040
a crash

00:37:00,880 --> 00:37:05,839
or let's say i'm i'm running for some

00:37:03,040 --> 00:37:08,400
reason i'm only running in one region

00:37:05,839 --> 00:37:10,320
and that region goes down and i quickly

00:37:08,400 --> 00:37:13,200
want to stand up my system

00:37:10,320 --> 00:37:14,960
in another region i have a complete

00:37:13,200 --> 00:37:18,640
representation of that

00:37:14,960 --> 00:37:20,640
i'm guaranteed to be able to identify

00:37:18,640 --> 00:37:22,480
which version i want to run because i

00:37:20,640 --> 00:37:24,960
know what version i was running

00:37:22,480 --> 00:37:26,880
it's been immutable and i'm just going

00:37:24,960 --> 00:37:29,280
to point it to a different region

00:37:26,880 --> 00:37:31,440
and boom the whole getups process is

00:37:29,280 --> 00:37:35,520
going to stand it up

00:37:31,440 --> 00:37:37,680
for me so that is really important

00:37:35,520 --> 00:37:38,560
now the other thing that's important

00:37:37,680 --> 00:37:41,119
though

00:37:38,560 --> 00:37:42,000
in in order for that scenario that i

00:37:41,119 --> 00:37:46,000
just painted

00:37:42,000 --> 00:37:49,520
to work is that you need to make sure

00:37:46,000 --> 00:37:52,079
that you haven't had any drift

00:37:49,520 --> 00:37:53,280
if my runtime environment in the first

00:37:52,079 --> 00:37:56,280
region

00:37:53,280 --> 00:37:57,920
had changed from what was in the git

00:37:56,280 --> 00:38:00,800
repository

00:37:57,920 --> 00:38:02,640
then when i point to a different region

00:38:00,800 --> 00:38:04,320
and try to get my getups process to

00:38:02,640 --> 00:38:07,680
stand it back up

00:38:04,320 --> 00:38:09,839
i might not get what i had before

00:38:07,680 --> 00:38:12,160
because there was some drift there was

00:38:09,839 --> 00:38:12,960
some change that happened in the runtime

00:38:12,160 --> 00:38:15,839
system that

00:38:12,960 --> 00:38:17,440
didn't get reflected back into the get

00:38:15,839 --> 00:38:20,400
repository

00:38:17,440 --> 00:38:21,040
and that's an important value from git

00:38:20,400 --> 00:38:24,000
ops

00:38:21,040 --> 00:38:26,880
is that reconcilers constantly checking

00:38:24,000 --> 00:38:30,079
that actual state and desired state

00:38:26,880 --> 00:38:32,000
all the way back to the git repository

00:38:30,079 --> 00:38:33,520
and it's saying either i'm going to

00:38:32,000 --> 00:38:34,480
revert back to what's in the git

00:38:33,520 --> 00:38:35,839
repository

00:38:34,480 --> 00:38:38,480
or there's going to have to be some

00:38:35,839 --> 00:38:39,520
automation that ensures that if some

00:38:38,480 --> 00:38:43,599
change happened

00:38:39,520 --> 00:38:45,280
in the runtime system that i can go back

00:38:43,599 --> 00:38:47,440
and oh sorry there's a couple of little

00:38:45,280 --> 00:38:48,720
animations in there so if i do a cube

00:38:47,440 --> 00:38:52,400
cuddle apply

00:38:48,720 --> 00:38:54,720
i'm going to revert that back okay

00:38:52,400 --> 00:38:56,400
so i'm coming to the end of this part

00:38:54,720 --> 00:38:57,119
and i want to take just a few minutes at

00:38:56,400 --> 00:38:58,880
the end

00:38:57,119 --> 00:39:00,640
to kind of reemphasize some of the

00:38:58,880 --> 00:39:03,280
things that chris and scott said about

00:39:00,640 --> 00:39:06,079
the get ops working group

00:39:03,280 --> 00:39:07,760
but let's look at that last thing change

00:39:06,079 --> 00:39:10,720
failure rate

00:39:07,760 --> 00:39:13,119
so one of the most common probably the

00:39:10,720 --> 00:39:16,320
most common reasons for failures

00:39:13,119 --> 00:39:19,760
it is still that i have i'm making some

00:39:16,320 --> 00:39:22,480
intentional change to a running system

00:39:19,760 --> 00:39:23,359
and so how do we reduce that change

00:39:22,480 --> 00:39:24,960
failure rate

00:39:23,359 --> 00:39:26,400
well there's two things that i want to

00:39:24,960 --> 00:39:29,839
talk about

00:39:26,400 --> 00:39:31,599
yep i'm coming back to get so

00:39:29,839 --> 00:39:33,839
of course this is a familiar tool for

00:39:31,599 --> 00:39:35,680
the application team so the application

00:39:33,839 --> 00:39:38,160
team is doing this

00:39:35,680 --> 00:39:39,040
what git does and has done so

00:39:38,160 --> 00:39:42,400
successfully

00:39:39,040 --> 00:39:44,720
earlier on in the uh the con the the

00:39:42,400 --> 00:39:45,440
software development life cycle is it

00:39:44,720 --> 00:39:49,359
has been a

00:39:45,440 --> 00:39:51,920
huge enabler of code reviews

00:39:49,359 --> 00:39:53,359
right so we don't have the ceremony of

00:39:51,920 --> 00:39:56,160
code reviews anymore

00:39:53,359 --> 00:39:57,760
it's ongoing it happens as a part of the

00:39:56,160 --> 00:40:00,240
development flow

00:39:57,760 --> 00:40:01,760
and you get lots of eyeballs and you use

00:40:00,240 --> 00:40:04,800
all sorts of tools

00:40:01,760 --> 00:40:07,119
as a part of that interface so now that

00:40:04,800 --> 00:40:09,760
you're storing your configuration

00:40:07,119 --> 00:40:11,440
you can implement an approval process

00:40:09,760 --> 00:40:14,720
directly and get

00:40:11,440 --> 00:40:17,760
and having lots of eyeballs and lots of

00:40:14,720 --> 00:40:20,240
maturity in that that approval process

00:40:17,760 --> 00:40:22,400
is going to reduce your your change

00:40:20,240 --> 00:40:25,520
failure rate

00:40:22,400 --> 00:40:29,520
the other thing is

00:40:25,520 --> 00:40:32,079
um is this so what we re

00:40:29,520 --> 00:40:33,119
remember here we had pull we were

00:40:32,079 --> 00:40:36,160
pulling from the get

00:40:33,119 --> 00:40:38,240
repository well let's look at that

00:40:36,160 --> 00:40:39,280
in a little bit more detail and what i'm

00:40:38,240 --> 00:40:41,119
getting at here

00:40:39,280 --> 00:40:42,880
just so you know sorry i didn't title

00:40:41,119 --> 00:40:44,800
this slide particularly well

00:40:42,880 --> 00:40:46,880
is i'm heading toward the direction of

00:40:44,800 --> 00:40:49,680
progressive delivery

00:40:46,880 --> 00:40:51,599
so this simple picture let's drill into

00:40:49,680 --> 00:40:54,800
the details just a little bit

00:40:51,599 --> 00:40:56,000
what's really happening there it when

00:40:54,800 --> 00:40:59,200
you're using something like

00:40:56,000 --> 00:41:01,119
flux or argo cd is you're pulling from

00:40:59,200 --> 00:41:03,359
the repository so you've got some

00:41:01,119 --> 00:41:05,119
reconciler that's constantly pulling

00:41:03,359 --> 00:41:07,119
from the git repository

00:41:05,119 --> 00:41:09,200
and it's not pulling it all the way to

00:41:07,119 --> 00:41:10,240
the running system it's pulling it into

00:41:09,200 --> 00:41:13,040
fcd

00:41:10,240 --> 00:41:14,800
so inside of kubernetes then there's

00:41:13,040 --> 00:41:17,280
another reconciler

00:41:14,800 --> 00:41:19,599
which is a reconciler that's built into

00:41:17,280 --> 00:41:20,319
kubernetes the deployment or the replica

00:41:19,599 --> 00:41:22,000
set

00:41:20,319 --> 00:41:23,359
that actually gets things running in

00:41:22,000 --> 00:41:26,960
production

00:41:23,359 --> 00:41:28,800
well what if you want different behavior

00:41:26,960 --> 00:41:31,520
what if you want to do progressive

00:41:28,800 --> 00:41:34,240
delivery in a very careful way

00:41:31,520 --> 00:41:35,200
you want to do a canary deployment or

00:41:34,240 --> 00:41:37,200
you want to do

00:41:35,200 --> 00:41:38,720
a blue green deployment or you want to

00:41:37,200 --> 00:41:40,800
do some kind of a b

00:41:38,720 --> 00:41:41,760
testing or some type of a deployment

00:41:40,800 --> 00:41:44,880
there

00:41:41,760 --> 00:41:47,760
well you can introduce your own

00:41:44,880 --> 00:41:48,480
reconciler that does that progressive

00:41:47,760 --> 00:41:50,000
delivery

00:41:48,480 --> 00:41:51,440
that's another open source project

00:41:50,000 --> 00:41:52,480
that's available out there called

00:41:51,440 --> 00:41:55,680
flagger

00:41:52,480 --> 00:41:58,240
it's a part of the cncf so you can

00:41:55,680 --> 00:42:00,800
link together these reconcilers to get

00:41:58,240 --> 00:42:02,960
this special behavior

00:42:00,800 --> 00:42:04,720
so going back to this picture from

00:42:02,960 --> 00:42:07,200
earlier remember

00:42:04,720 --> 00:42:08,880
that get ops is not just the continuous

00:42:07,200 --> 00:42:11,599
delivery reconciler

00:42:08,880 --> 00:42:12,800
but i can also put reconcilers in there

00:42:11,599 --> 00:42:14,720
like flagger

00:42:12,800 --> 00:42:16,319
leverage reconcilers like that built

00:42:14,720 --> 00:42:18,880
into kubernetes

00:42:16,319 --> 00:42:22,079
and linking those things together that's

00:42:18,880 --> 00:42:24,720
really where the magic comes in

00:42:22,079 --> 00:42:26,560
so to sum all of that up to look back

00:42:24,720 --> 00:42:30,160
across this entire table

00:42:26,560 --> 00:42:32,720
i want to remind you to achieve again

00:42:30,160 --> 00:42:34,160
we want to get better at software to

00:42:32,720 --> 00:42:37,520
achieve that

00:42:34,160 --> 00:42:40,400
we want to allow developer teams

00:42:37,520 --> 00:42:42,880
to use familiar tools and we also want

00:42:40,400 --> 00:42:44,480
to enable them to self-service their

00:42:42,880 --> 00:42:47,200
operations

00:42:44,480 --> 00:42:48,480
how do they do that well they do that

00:42:47,200 --> 00:42:50,800
the pull model

00:42:48,480 --> 00:42:52,079
is a huge enabler from a security

00:42:50,800 --> 00:42:54,480
perspective

00:42:52,079 --> 00:42:56,480
but then we're also leveraging the

00:42:54,480 --> 00:42:58,000
version to mutable store

00:42:56,480 --> 00:42:59,520
the fact that it has a complete

00:42:58,000 --> 00:43:01,440
representation in there

00:42:59,520 --> 00:43:03,680
the fact that we have drift detection

00:43:01,440 --> 00:43:04,800
and remediation that's part of get ops

00:43:03,680 --> 00:43:07,440
as well

00:43:04,800 --> 00:43:08,480
that i can do configuration reviews in

00:43:07,440 --> 00:43:11,280
git

00:43:08,480 --> 00:43:12,079
and i can do progressive delivery these

00:43:11,280 --> 00:43:15,839
are some of the

00:43:12,079 --> 00:43:16,560
enablers this is how get ops enables us

00:43:15,839 --> 00:43:20,400
to do

00:43:16,560 --> 00:43:22,560
software better that's the real punch

00:43:20,400 --> 00:43:26,720
line

00:43:22,560 --> 00:43:29,280
all right with that i am going to um

00:43:26,720 --> 00:43:30,160
uh just very briefly give you a little

00:43:29,280 --> 00:43:31,760
bit more

00:43:30,160 --> 00:43:33,599
about the get ups working group the wood

00:43:31,760 --> 00:43:35,280
getups working group of course is the

00:43:33,599 --> 00:43:36,400
group that is giving you this event

00:43:35,280 --> 00:43:38,000
today

00:43:36,400 --> 00:43:40,160
so to give you just a little bit of

00:43:38,000 --> 00:43:43,760
context the getups working group

00:43:40,160 --> 00:43:44,640
is a part of the cncf it lives under the

00:43:43,760 --> 00:43:46,880
umbrella

00:43:44,640 --> 00:43:48,560
of the special interest group for

00:43:46,880 --> 00:43:50,400
application delivery

00:43:48,560 --> 00:43:52,240
which is a special interest group that

00:43:50,400 --> 00:43:53,599
sits under the cloud native computing

00:43:52,240 --> 00:43:55,520
foundation

00:43:53,599 --> 00:43:57,040
now there's a whole backlog of work

00:43:55,520 --> 00:43:58,720
that's happening there and i'm going to

00:43:57,040 --> 00:43:59,119
talk about the get ops principles in

00:43:58,720 --> 00:44:02,560
just

00:43:59,119 --> 00:44:04,800
a moment um but we're working we're

00:44:02,560 --> 00:44:05,760
putting on this date this event right

00:44:04,800 --> 00:44:07,680
now

00:44:05,760 --> 00:44:09,359
we've got the get ups principles which

00:44:07,680 --> 00:44:11,520
i'll talk about we're working on

00:44:09,359 --> 00:44:14,079
a website we're working on samples or

00:44:11,520 --> 00:44:15,119
supporting samples like this potato head

00:44:14,079 --> 00:44:17,040
project

00:44:15,119 --> 00:44:19,280
in the future we have ideas around

00:44:17,040 --> 00:44:21,760
having a get ops landscape

00:44:19,280 --> 00:44:23,520
so a smaller thing than the cloud cloud

00:44:21,760 --> 00:44:24,800
native landscape that is specifically

00:44:23,520 --> 00:44:27,040
around get ops

00:44:24,800 --> 00:44:29,839
we're also looking at doing certificate

00:44:27,040 --> 00:44:32,480
certifications and those types of things

00:44:29,839 --> 00:44:34,720
now those things like the landscape

00:44:32,480 --> 00:44:37,520
certifications and the principles

00:44:34,720 --> 00:44:39,680
they're going to live under an umbrella

00:44:37,520 --> 00:44:42,480
of a sandbox project called

00:44:39,680 --> 00:44:43,440
open get ops so open get ups is going to

00:44:42,480 --> 00:44:46,640
be the set

00:44:43,440 --> 00:44:49,839
of things that make up the practice

00:44:46,640 --> 00:44:50,160
of get of get-offs and the outs working

00:44:49,839 --> 00:44:52,400
group

00:44:50,160 --> 00:44:53,760
is responsible for creating and caring

00:44:52,400 --> 00:44:56,160
for that

00:44:53,760 --> 00:44:58,160
now the first of those artifacts is are

00:44:56,160 --> 00:45:00,400
these get ops principles

00:44:58,160 --> 00:45:01,359
so i'm just going to give you a quick

00:45:00,400 --> 00:45:04,560
overview and i

00:45:01,359 --> 00:45:06,640
invite you to join us and join us in

00:45:04,560 --> 00:45:08,079
asynchronously or synchronously we have

00:45:06,640 --> 00:45:10,079
monthly meetings

00:45:08,079 --> 00:45:12,319
to continue to discuss these things you

00:45:10,079 --> 00:45:14,000
can find these getups principles in a

00:45:12,319 --> 00:45:15,680
pull request in one of our get

00:45:14,000 --> 00:45:17,359
repositories

00:45:15,680 --> 00:45:19,119
but here's the principles and you're

00:45:17,359 --> 00:45:20,400
going to see these things

00:45:19,119 --> 00:45:22,720
these are the things that i've been

00:45:20,400 --> 00:45:24,160
talking about for the last 45 minutes or

00:45:22,720 --> 00:45:27,200
so

00:45:24,160 --> 00:45:29,359
the first principle as written in the

00:45:27,200 --> 00:45:31,839
draft document in the pr

00:45:29,359 --> 00:45:33,040
is that the desired state is expressed

00:45:31,839 --> 00:45:35,280
declaratively

00:45:33,040 --> 00:45:37,359
you heard me emphasize the importance of

00:45:35,280 --> 00:45:38,960
these reconciliation loops

00:45:37,359 --> 00:45:40,640
what that means is that we need to have

00:45:38,960 --> 00:45:42,880
declarative configuration that

00:45:40,640 --> 00:45:45,119
represents the desired state

00:45:42,880 --> 00:45:46,640
so that i can compare it to the actual

00:45:45,119 --> 00:45:50,319
state

00:45:46,640 --> 00:45:53,920
those things need to be stored in a way

00:45:50,319 --> 00:45:56,480
that we can achieve the types of

00:45:53,920 --> 00:45:57,119
things that i described they need to be

00:45:56,480 --> 00:45:59,680
versioned

00:45:57,119 --> 00:46:00,640
and immutable and have that version

00:45:59,680 --> 00:46:02,960
history

00:46:00,640 --> 00:46:05,440
so that i can do things like when a

00:46:02,960 --> 00:46:07,119
region goes down i can stand my software

00:46:05,440 --> 00:46:10,240
up in a new region

00:46:07,119 --> 00:46:11,920
with no fuss that's the importance of

00:46:10,240 --> 00:46:14,400
that principle

00:46:11,920 --> 00:46:16,160
the third principle is all around those

00:46:14,400 --> 00:46:17,920
convergent agents those

00:46:16,160 --> 00:46:19,359
those agents that are causing this

00:46:17,920 --> 00:46:22,319
convergent and those

00:46:19,359 --> 00:46:23,520
agents are both on the continuous

00:46:22,319 --> 00:46:26,400
delivery side

00:46:23,520 --> 00:46:26,960
you see the flux and argo logos there as

00:46:26,400 --> 00:46:29,920
well as

00:46:26,960 --> 00:46:30,560
on the on the runtime side kubernetes

00:46:29,920 --> 00:46:34,400
itself

00:46:30,560 --> 00:46:38,160
or cluster api represents a

00:46:34,400 --> 00:46:41,359
set of convergent um systems that

00:46:38,160 --> 00:46:44,560
bring things into a desired state

00:46:41,359 --> 00:46:45,760
and then finally the fourth principle

00:46:44,560 --> 00:46:49,119
says

00:46:45,760 --> 00:46:49,599
interface for operations these are the

00:46:49,119 --> 00:46:51,200
things

00:46:49,599 --> 00:46:54,560
these are the ways that we're going to

00:46:51,200 --> 00:46:57,920
do operations is

00:46:54,560 --> 00:47:00,400
controlling the the desired state

00:46:57,920 --> 00:47:03,359
in a git repository that is the

00:47:00,400 --> 00:47:06,480
interface to operations

00:47:03,359 --> 00:47:08,880
so in closing get ops

00:47:06,480 --> 00:47:10,480
is about continuous delivery and

00:47:08,880 --> 00:47:13,920
continuous operations

00:47:10,480 --> 00:47:15,920
done in just the right way and

00:47:13,920 --> 00:47:17,920
this is the inflection point for cloud

00:47:15,920 --> 00:47:20,720
native operations

00:47:17,920 --> 00:47:21,760
and with that i thank you for your

00:47:20,720 --> 00:47:23,520
attention

00:47:21,760 --> 00:47:24,800
i was thinking i might have time for

00:47:23,520 --> 00:47:26,800
questions at the end but

00:47:24,800 --> 00:47:29,200
as usual i kind of consumed the whole

00:47:26,800 --> 00:47:31,280
time and i hope that was valuable

00:47:29,200 --> 00:47:32,240
with that i'd love to hand it back over

00:47:31,280 --> 00:47:36,839
to uh

00:47:32,240 --> 00:47:39,839
my my hosts here chris and scott back to

00:47:36,839 --> 00:47:39,839
you

00:47:44,280 --> 00:47:55,119
pop pop

00:47:52,240 --> 00:47:55,119
all right you're muted

00:47:55,280 --> 00:47:58,800
sorry about that cornelia uh we have a

00:47:57,040 --> 00:48:02,559
few questions here

00:47:58,800 --> 00:48:06,079
if you have time um i do okay great

00:48:02,559 --> 00:48:07,599
if the agenda the agenda can take it yep

00:48:06,079 --> 00:48:09,280
yeah we can do three or four minutes of

00:48:07,599 --> 00:48:12,480
questions here so i'll go with the

00:48:09,280 --> 00:48:14,880
go from oldest to latest

00:48:12,480 --> 00:48:15,599
old oldest to latest sorry it's

00:48:14,880 --> 00:48:18,319
realistic

00:48:15,599 --> 00:48:19,119
here everybody so do i understand it

00:48:18,319 --> 00:48:21,680
correct

00:48:19,119 --> 00:48:22,880
get ops does not mandate get in

00:48:21,680 --> 00:48:25,520
kubernetes

00:48:22,880 --> 00:48:26,800
or in other words can we assume get ops

00:48:25,520 --> 00:48:29,599
as a framework

00:48:26,800 --> 00:48:32,000
than attaching tools to it like git and

00:48:29,599 --> 00:48:34,000
gates and so forth so on

00:48:32,000 --> 00:48:35,520
yeah so that's a great question the

00:48:34,000 --> 00:48:38,480
first thing is that get

00:48:35,520 --> 00:48:39,839
ops if you notice that i closed and the

00:48:38,480 --> 00:48:40,960
first thing that the getups working

00:48:39,839 --> 00:48:43,040
group is creating

00:48:40,960 --> 00:48:44,640
under the open git ops project is a set

00:48:43,040 --> 00:48:48,160
of principles

00:48:44,640 --> 00:48:51,280
so the most kit is the principles

00:48:48,160 --> 00:48:52,079
if i go back to my analogy of there was

00:48:51,280 --> 00:48:55,680
a change

00:48:52,079 --> 00:48:57,680
in inflection point in cloud native from

00:48:55,680 --> 00:49:01,119
an applications perspective

00:48:57,680 --> 00:49:04,880
it didn't say you have to use

00:49:01,119 --> 00:49:05,280
the netflix suite for you don't have to

00:49:04,880 --> 00:49:08,880
use

00:49:05,280 --> 00:49:09,680
eureka for this particular pattern you

00:49:08,880 --> 00:49:12,720
don't have to use

00:49:09,680 --> 00:49:15,599
eureka for service discovery it said

00:49:12,720 --> 00:49:17,440
you need to have some type of a service

00:49:15,599 --> 00:49:20,480
discovery mechanism

00:49:17,440 --> 00:49:22,800
can you use dns yes dns is what

00:49:20,480 --> 00:49:26,160
kubernetes does can you use eureka

00:49:22,800 --> 00:49:26,960
yes you can but the principle of service

00:49:26,160 --> 00:49:29,280
discovery

00:49:26,960 --> 00:49:30,640
was more important than the actual

00:49:29,280 --> 00:49:33,520
tooling

00:49:30,640 --> 00:49:34,800
now that said remember that the

00:49:33,520 --> 00:49:38,640
principles

00:49:34,800 --> 00:49:41,920
require certain semantics to be applied

00:49:38,640 --> 00:49:44,160
and those semantics exist in git or

00:49:41,920 --> 00:49:46,559
they require convergent loops which is

00:49:44,160 --> 00:49:49,280
something that's available in kubernetes

00:49:46,559 --> 00:49:51,440
so if you're not using git in kubernetes

00:49:49,280 --> 00:49:52,160
then you have to find a way to achieve

00:49:51,440 --> 00:49:54,480
those

00:49:52,160 --> 00:49:56,079
characteristics a different way but

00:49:54,480 --> 00:49:57,680
you're absolutely right that the

00:49:56,079 --> 00:49:59,599
principles are more important

00:49:57,680 --> 00:50:00,760
and i guarantee you that we will start

00:49:59,599 --> 00:50:03,680
to see

00:50:00,760 --> 00:50:04,079
implementations of these principles come

00:50:03,680 --> 00:50:07,760
through

00:50:04,079 --> 00:50:10,160
and other tools and technologies as well

00:50:07,760 --> 00:50:11,040
awesome thank you for that answer uh

00:50:10,160 --> 00:50:13,440
next one

00:50:11,040 --> 00:50:15,599
what is the recommendation here one git

00:50:13,440 --> 00:50:16,480
repo per micro service for your

00:50:15,599 --> 00:50:19,200
application

00:50:16,480 --> 00:50:20,319
or one git repo for your whole

00:50:19,200 --> 00:50:24,400
application

00:50:20,319 --> 00:50:27,760
but it is per cluster i.e one for dev

00:50:24,400 --> 00:50:29,680
qaa certification prod so on

00:50:27,760 --> 00:50:31,040
what is your recommendation there i will

00:50:29,680 --> 00:50:34,000
keep my comments

00:50:31,040 --> 00:50:34,400
brief um because i believe that we will

00:50:34,000 --> 00:50:36,480
see

00:50:34,400 --> 00:50:37,599
maybe a bit of this later on in the

00:50:36,480 --> 00:50:41,520
program

00:50:37,599 --> 00:50:43,520
um but the answer is that uh

00:50:41,520 --> 00:50:45,680
to a large extent remember that one of

00:50:43,520 --> 00:50:47,119
the the control points that you have

00:50:45,680 --> 00:50:50,559
through git

00:50:47,119 --> 00:50:53,520
is that you um you can set up groups

00:50:50,559 --> 00:50:55,359
you can set up permissions in git so

00:50:53,520 --> 00:50:56,800
that's one of the most important things

00:50:55,359 --> 00:50:59,119
that you need to consider when you're

00:50:56,800 --> 00:51:01,440
structuring your git repositories

00:50:59,119 --> 00:51:02,559
is you need to say well who's allowed to

00:51:01,440 --> 00:51:05,599
do what

00:51:02,559 --> 00:51:07,040
is is everyone allowed to edit every

00:51:05,599 --> 00:51:09,359
single micro service

00:51:07,040 --> 00:51:11,680
well then maybe you can put things all

00:51:09,359 --> 00:51:13,760
in one mono repository

00:51:11,680 --> 00:51:15,760
but if you want to partition and say

00:51:13,760 --> 00:51:17,119
team a is responsible for this

00:51:15,760 --> 00:51:19,599
microservice and team b

00:51:17,119 --> 00:51:21,040
is responsible for this microservice and

00:51:19,599 --> 00:51:23,200
for some reason

00:51:21,040 --> 00:51:25,040
you don't want to allow them to be able

00:51:23,200 --> 00:51:26,559
to operate each other's things

00:51:25,040 --> 00:51:28,400
then you probably want to set up

00:51:26,559 --> 00:51:31,200
different repositories

00:51:28,400 --> 00:51:32,319
then it also act at ask about dev

00:51:31,200 --> 00:51:35,440
staging prod

00:51:32,319 --> 00:51:36,480
again you you need to think a little bit

00:51:35,440 --> 00:51:38,480
about

00:51:36,480 --> 00:51:41,359
quite a bit actually about who's got

00:51:38,480 --> 00:51:43,760
this there's often separation of duties

00:51:41,359 --> 00:51:44,800
so your application developers and some

00:51:43,760 --> 00:51:47,280
scenarios

00:51:44,800 --> 00:51:47,920
are not allowed to do operations so even

00:51:47,280 --> 00:51:51,440
though you have an

00:51:47,920 --> 00:51:53,599
application team that's made up of devs

00:51:51,440 --> 00:51:54,800
there's only going to be a small set of

00:51:53,599 --> 00:51:57,760
people who can

00:51:54,800 --> 00:51:58,640
actually make the code you know make the

00:51:57,760 --> 00:52:01,359
commits

00:51:58,640 --> 00:52:02,880
into a prod repository so you might need

00:52:01,359 --> 00:52:05,280
separate repositories

00:52:02,880 --> 00:52:06,240
from your dev staging prod and then

00:52:05,280 --> 00:52:09,119
there's also

00:52:06,240 --> 00:52:10,319
we can get into the details of well you

00:52:09,119 --> 00:52:12,960
want to pull

00:52:10,319 --> 00:52:14,400
changes from earlier in the software

00:52:12,960 --> 00:52:17,119
development life cycle dev

00:52:14,400 --> 00:52:19,680
into staging and branches can help with

00:52:17,119 --> 00:52:20,240
that so there are some folks that like

00:52:19,680 --> 00:52:23,200
to have

00:52:20,240 --> 00:52:24,880
branches for dev and staging and uat and

00:52:23,200 --> 00:52:25,599
then maybe a separate repository for

00:52:24,880 --> 00:52:28,240
prod

00:52:25,599 --> 00:52:29,760
there are the jury's still out on some

00:52:28,240 --> 00:52:32,880
of those things there's still

00:52:29,760 --> 00:52:34,640
ongoing debates um and hopefully we'll

00:52:32,880 --> 00:52:36,160
see some of those best practices a

00:52:34,640 --> 00:52:37,839
little bit later today

00:52:36,160 --> 00:52:39,520
yeah there's a lot of questions in here

00:52:37,839 --> 00:52:41,440
about like what

00:52:39,520 --> 00:52:42,800
like the get repost structure so we're

00:52:41,440 --> 00:52:46,880
going to talk about that

00:52:42,800 --> 00:52:48,640
today in wholes so hold tight folks like

00:52:46,880 --> 00:52:49,920
there's a lot of ways to skin this cat

00:52:48,640 --> 00:52:53,359
for lack of a better term

00:52:49,920 --> 00:52:55,200
um including the question of what is the

00:52:53,359 --> 00:52:57,040
recommended secrets management for get

00:52:55,200 --> 00:52:59,200
ops right like there's a lot of tools in

00:52:57,040 --> 00:52:59,680
that space like sealed secrets or sops

00:52:59,200 --> 00:53:01,599
or

00:52:59,680 --> 00:53:03,359
you name it there's vault you know the

00:53:01,599 --> 00:53:05,839
the whole gamut of tooling is

00:53:03,359 --> 00:53:06,800
possible right like there's no one right

00:53:05,839 --> 00:53:08,480
answer it's

00:53:06,800 --> 00:53:10,400
the tooling that works best for your

00:53:08,480 --> 00:53:11,440
organization usually is what i recommend

00:53:10,400 --> 00:53:14,240
to people

00:53:11,440 --> 00:53:16,000
uh sealed secrets forget that's like

00:53:14,240 --> 00:53:17,359
kind of the expectation i feel like for

00:53:16,000 --> 00:53:20,559
sealed secrets at points

00:53:17,359 --> 00:53:24,319
um but yeah it it's

00:53:20,559 --> 00:53:27,599
it's one of those things where focusing

00:53:24,319 --> 00:53:29,839
on doing it the right way will hurt you

00:53:27,599 --> 00:53:31,920
institutionally right like do it the way

00:53:29,839 --> 00:53:35,280
that works best for you get ups is a

00:53:31,920 --> 00:53:35,920
guide to kind of applying great devops

00:53:35,280 --> 00:53:38,640
principles

00:53:35,920 --> 00:53:40,160
in this very multi and highly

00:53:38,640 --> 00:53:41,200
distributed environment that we're in

00:53:40,160 --> 00:53:44,559
right now

00:53:41,200 --> 00:53:46,079
yep scott did you want any of these

00:53:44,559 --> 00:53:48,480
other questions real quick before we

00:53:46,079 --> 00:53:51,200
need to go and you're doing your dubstep

00:53:48,480 --> 00:53:51,200
remix again

00:53:52,240 --> 00:53:57,280
anyways muting him again scott you might

00:53:56,640 --> 00:53:59,839
want to

00:53:57,280 --> 00:54:01,599
come back in yeah you might have to hit

00:53:59,839 --> 00:54:04,640
the hard reset or something scott

00:54:01,599 --> 00:54:07,520
uh is there a set of best practices

00:54:04,640 --> 00:54:08,880
concerning the prod to dev promotion of

00:54:07,520 --> 00:54:11,280
applications

00:54:08,880 --> 00:54:12,800
uh i don't know if you have anything to

00:54:11,280 --> 00:54:14,960
say on that cornelia but

00:54:12,800 --> 00:54:16,960
i don't think there is a quote best

00:54:14,960 --> 00:54:18,480
practice i kind of hate that term best

00:54:16,960 --> 00:54:20,160
practice for like a better term right

00:54:18,480 --> 00:54:22,960
like

00:54:20,160 --> 00:54:24,559
yeah yeah no i i think i'll i'll hold

00:54:22,960 --> 00:54:25,520
comments on that i think that falls into

00:54:24,559 --> 00:54:28,720
the category of

00:54:25,520 --> 00:54:29,839
hang tight um let's uh let's see let's

00:54:28,720 --> 00:54:33,440
go through the program

00:54:29,839 --> 00:54:35,200
and um and and then come join us because

00:54:33,440 --> 00:54:38,480
we'd love to to have some of those

00:54:35,200 --> 00:54:42,880
debates with you as well

00:54:38,480 --> 00:54:44,079
exactly um all right so

00:54:42,880 --> 00:54:46,799
we are having some technical

00:54:44,079 --> 00:54:48,319
difficulties with the next speaker

00:54:46,799 --> 00:54:50,839
and some technical difficulties with

00:54:48,319 --> 00:54:54,000
scott so this is going swimmingly right

00:54:50,839 --> 00:54:57,200
now um

00:54:54,000 --> 00:55:00,480
how about now is that is way better

00:54:57,200 --> 00:55:02,000
you're not okay yes i thought it was my

00:55:00,480 --> 00:55:04,799
speakers but apparently i had

00:55:02,000 --> 00:55:06,240
headphones in and it still happened uh

00:55:04,799 --> 00:55:07,280
did you try turning it off and on again

00:55:06,240 --> 00:55:10,480
i did and it worked

00:55:07,280 --> 00:55:12,240
so yeah we're back so did we want to go

00:55:10,480 --> 00:55:12,559
over one of the other questions or are

00:55:12,240 --> 00:55:15,680
we

00:55:12,559 --> 00:55:15,680
uh are we ready to

00:55:15,839 --> 00:55:19,040

YouTube URL: https://www.youtube.com/watch?v=fZEFWh4xBEw


