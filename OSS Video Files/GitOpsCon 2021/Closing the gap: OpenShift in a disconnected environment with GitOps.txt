Title: Closing the gap: OpenShift in a disconnected environment with GitOps
Publication date: 2021-04-29
Playlist: GitOpsCon 2021
Description: 
	We will talk about our journey with fully automating Openshift multi-cluster installation on an on-prem air-gapped environment, in one of Israeli's largest banks - Bank Hapoalim.

We used ArgoCD, Ansible, and GitlabCI to transform our infrastructure into a single source of truth form. We will share how the GitOps methodology inspired cultural changes in our company.

We will show the hard-fought details of our implementation and the evolution of the automation process with GitOps.
Captions: 
	00:00:05,839 --> 00:00:08,480
hi everyone

00:00:06,720 --> 00:00:10,639
thanks for joining our talk about

00:00:08,480 --> 00:00:13,040
openshift in an air gap environment

00:00:10,639 --> 00:00:17,920
with githubs we will show you how

00:00:13,040 --> 00:00:17,920
github's made our life easier

00:00:19,359 --> 00:00:23,519
this is a moment from the beginning of

00:00:20,960 --> 00:00:24,640
our journey they were two different

00:00:23,519 --> 00:00:27,279
teams in one room

00:00:24,640 --> 00:00:27,840
trying to describe the elephants they

00:00:27,279 --> 00:00:29,920
were

00:00:27,840 --> 00:00:30,880
viewer infrastructure team and devops

00:00:29,920 --> 00:00:32,719
team

00:00:30,880 --> 00:00:35,200
we were drawing on the board and trying

00:00:32,719 --> 00:00:38,079
to define the project scope

00:00:35,200 --> 00:00:39,440
with no success nobody understood the

00:00:38,079 --> 00:00:41,680
whole process

00:00:39,440 --> 00:00:42,879
and each team only saw its part of the

00:00:41,680 --> 00:00:46,719
picture

00:00:42,879 --> 00:00:46,719
so what that effect actually was

00:00:49,120 --> 00:00:53,440
installing a fresh openshift 3 cluster

00:00:51,680 --> 00:00:56,079
in an air gap environment

00:00:53,440 --> 00:00:58,559
at first we thought that this was really

00:00:56,079 --> 00:01:01,520
hard but then we realized that this was

00:00:58,559 --> 00:01:01,520
also frustrating

00:01:02,160 --> 00:01:07,200
my name is regina i'm leading cloud

00:01:04,320 --> 00:01:09,200
native adoption in the bank

00:01:07,200 --> 00:01:10,479
and administering on-prem opportunity

00:01:09,200 --> 00:01:13,520
environments and

00:01:10,479 --> 00:01:14,400
since i was a child i was always the

00:01:13,520 --> 00:01:16,640
only

00:01:14,400 --> 00:01:17,680
female somewhere i was the only girl in

00:01:16,640 --> 00:01:19,840
class

00:01:17,680 --> 00:01:22,880
and i'm one of the few women lecturing

00:01:19,840 --> 00:01:22,880
in devops areas

00:01:24,880 --> 00:01:29,920
as you can see i'm also outnumbered in

00:01:26,960 --> 00:01:29,920
my own family

00:01:32,400 --> 00:01:36,400
my name is sheree i'm part of the female

00:01:34,960 --> 00:01:38,960
team

00:01:36,400 --> 00:01:40,320
currently working on open chief

00:01:38,960 --> 00:01:43,119
previously

00:01:40,320 --> 00:01:44,159
linux administrator and together with

00:01:43,119 --> 00:01:48,479
regina

00:01:44,159 --> 00:01:50,640
we work in bank of parliament bankrupt

00:01:48,479 --> 00:01:53,119
is a big financial organization under

00:01:50,640 --> 00:01:56,320
strict regulation

00:01:53,119 --> 00:01:59,360
and the risk is that on the other side

00:01:56,320 --> 00:02:03,360
of any internet connection on globally

00:01:59,360 --> 00:02:07,759
rates so every connection is a risk

00:02:03,360 --> 00:02:11,840
but this approach comes with a cost

00:02:07,759 --> 00:02:11,840
know but let's talk first about

00:02:13,120 --> 00:02:17,280
amazon aws microsoft azure and google

00:02:15,599 --> 00:02:20,480
gcp are part of what we call

00:02:17,280 --> 00:02:23,120
internally the public cloud utopia

00:02:20,480 --> 00:02:24,560
you want to install kubernetes faster or

00:02:23,120 --> 00:02:26,560
any other product

00:02:24,560 --> 00:02:29,440
no problem the installation is quick and

00:02:26,560 --> 00:02:32,560
easy you can use manage service

00:02:29,440 --> 00:02:34,239
the product comes already installed for

00:02:32,560 --> 00:02:36,800
real convenience

00:02:34,239 --> 00:02:37,920
you can deploy multiple environment in a

00:02:36,800 --> 00:02:41,200
click of mouse

00:02:37,920 --> 00:02:42,239
no need to design special criticals for

00:02:41,200 --> 00:02:44,480
that

00:02:42,239 --> 00:02:45,519
also the vendor can take part of the

00:02:44,480 --> 00:02:47,840
installation

00:02:45,519 --> 00:02:49,440
and logs can be sent to the vendor for

00:02:47,840 --> 00:02:51,760
troubleshooting

00:02:49,440 --> 00:02:54,480
another benefit of the public cloud is

00:02:51,760 --> 00:02:56,800
is that you can try before you buy

00:02:54,480 --> 00:02:57,680
in some cases instead of committing to

00:02:56,800 --> 00:03:00,000
the product

00:02:57,680 --> 00:03:02,720
you can deploy and delete it and pay

00:03:00,000 --> 00:03:05,840
only for the time the deployment is up

00:03:02,720 --> 00:03:07,680
in the cloud we can use product as the

00:03:05,840 --> 00:03:10,159
vendor intended

00:03:07,680 --> 00:03:11,360
them to be used without making any

00:03:10,159 --> 00:03:13,040
modifications

00:03:11,360 --> 00:03:14,480
to run them on our own planet's

00:03:13,040 --> 00:03:18,000
environment

00:03:14,480 --> 00:03:21,840
in the cloud we can also auto provision

00:03:18,000 --> 00:03:23,920
prefer infrastructure such as networking

00:03:21,840 --> 00:03:26,879
and focus on the products that we need

00:03:23,920 --> 00:03:28,640
specifically kubernetes cluster

00:03:26,879 --> 00:03:31,360
and the use of third-party tools is

00:03:28,640 --> 00:03:34,480
simple with easy integration

00:03:31,360 --> 00:03:35,760
utopia right but we are not in the

00:03:34,480 --> 00:03:38,959
public cloud we are

00:03:35,760 --> 00:03:38,959
air gap environment

00:03:40,319 --> 00:03:47,840
so we can't use all the goodies of the

00:03:43,200 --> 00:03:47,840
public cloud

00:03:48,720 --> 00:03:56,480
as i said we have an on-prem environment

00:03:52,640 --> 00:04:00,000
so uh so there are some hardships

00:03:56,480 --> 00:04:03,599
unique to this environment we need to

00:04:00,000 --> 00:04:06,400
manually install and provision the vm

00:04:03,599 --> 00:04:07,840
to have a compute nodes we need to

00:04:06,400 --> 00:04:10,000
manually provision networking and

00:04:07,840 --> 00:04:11,200
security all the fans will not talk to

00:04:10,000 --> 00:04:13,599
each other

00:04:11,200 --> 00:04:16,560
we need to do user manage initial

00:04:13,599 --> 00:04:16,560
storage location

00:04:16,720 --> 00:04:20,799
we don't have the installation images

00:04:18,560 --> 00:04:23,040
and packages on our network

00:04:20,799 --> 00:04:24,560
and when we manage to fix it the install

00:04:23,040 --> 00:04:29,199
scripts there

00:04:24,560 --> 00:04:29,840
several times when the looted cluster is

00:04:29,199 --> 00:04:33,759
up

00:04:29,840 --> 00:04:37,199
we haven't ended our product groups

00:04:33,759 --> 00:04:39,919
we have to self-manage faster resource

00:04:37,199 --> 00:04:41,120
consumption well because we will not be

00:04:39,919 --> 00:04:44,720
able to run

00:04:41,120 --> 00:04:47,280
all our workloads and god forbid talking

00:04:44,720 --> 00:04:50,400
about upgrading the live environment

00:04:47,280 --> 00:04:52,320
it is insanely hard

00:04:50,400 --> 00:04:54,320
and the users are allergic to any

00:04:52,320 --> 00:04:56,800
downtown windows

00:04:54,320 --> 00:04:58,400
so the takeaway message is don't run on

00:04:56,800 --> 00:05:00,880
air gapped environment

00:04:58,400 --> 00:05:00,880
if you can

00:05:05,280 --> 00:05:09,680
and now does we understood that our goal

00:05:07,840 --> 00:05:12,720
is to install

00:05:09,680 --> 00:05:16,639
automatically in air-gapped environment

00:05:12,720 --> 00:05:16,639
and that the task is challenging

00:05:17,039 --> 00:05:21,199
we will now move to the basics what is

00:05:19,840 --> 00:05:23,520
on our playground

00:05:21,199 --> 00:05:24,800
what was the foundation of the project

00:05:23,520 --> 00:05:27,520
the basics

00:05:24,800 --> 00:05:28,080
our infrastructure for the project is

00:05:27,520 --> 00:05:30,400
river

00:05:28,080 --> 00:05:33,440
infrastructure with software-defined

00:05:30,400 --> 00:05:35,360
networking and security and non-storage

00:05:33,440 --> 00:05:36,479
the existing process to install a

00:05:35,360 --> 00:05:40,080
cluster had

00:05:36,479 --> 00:05:42,880
vra auto provision vms openshift

00:05:40,080 --> 00:05:44,479
manual installation manual post install

00:05:42,880 --> 00:05:46,720
configuration

00:05:44,479 --> 00:05:49,199
and the management and monitoring tools

00:05:46,720 --> 00:05:53,840
such as for meters for finite encode

00:05:49,199 --> 00:05:53,840
will configure with algo cd

00:05:56,880 --> 00:06:05,039
what is wrong with the existing process

00:06:00,560 --> 00:06:08,560
well it had 50 steps and was a mess

00:06:05,039 --> 00:06:10,800
it includes antibiotic playbooks

00:06:08,560 --> 00:06:13,039
in their own git repo and chess

00:06:10,800 --> 00:06:16,639
cookbooks in their own gitli

00:06:13,039 --> 00:06:18,800
part of the process involved junkie jobs

00:06:16,639 --> 00:06:21,520
where other stuff was done with manual

00:06:18,800 --> 00:06:24,240
scripts or even manual tasks

00:06:21,520 --> 00:06:25,280
part of the process was done as if by

00:06:24,240 --> 00:06:28,319
voodoo magic

00:06:25,280 --> 00:06:29,680
we had undocumented steps that needed to

00:06:28,319 --> 00:06:32,639
be done

00:06:29,680 --> 00:06:35,199
and the requirement was successful only

00:06:32,639 --> 00:06:38,560
one of those steps were taken

00:06:35,199 --> 00:06:39,680
we had scripts on servers where scripts

00:06:38,560 --> 00:06:42,639
on

00:06:39,680 --> 00:06:43,759
in people's minds and since we didn't

00:06:42,639 --> 00:06:47,600
mention enough it

00:06:43,759 --> 00:06:49,199
had more deep people managed by our city

00:06:47,600 --> 00:06:50,800
our two teams tried to describe the

00:06:49,199 --> 00:06:54,160
elephants

00:06:50,800 --> 00:06:56,960
and put us automation steps

00:06:54,160 --> 00:06:58,639
in their own niche but all the

00:06:56,960 --> 00:07:01,759
integration was

00:06:58,639 --> 00:07:04,560
done by a duct tape change was needed

00:07:01,759 --> 00:07:04,560
tremendously

00:07:06,240 --> 00:07:11,280
steph toward the bright side we were

00:07:08,400 --> 00:07:13,199
deeply inspired by europe's but

00:07:11,280 --> 00:07:16,400
no hit ups for infrastructure parts

00:07:13,199 --> 00:07:18,960
existed not least two years ago i mean

00:07:16,400 --> 00:07:21,680
how can you create virtual machines with

00:07:18,960 --> 00:07:23,680
when we're using githubs

00:07:21,680 --> 00:07:26,080
so we realize that many of the steps

00:07:23,680 --> 00:07:27,440
will be imperative

00:07:26,080 --> 00:07:29,039
the following requirements became

00:07:27,440 --> 00:07:31,199
crystal clear for us we're gonna need a

00:07:29,039 --> 00:07:33,039
single git repo with all the source code

00:07:31,199 --> 00:07:34,479
for all the different installation steps

00:07:33,039 --> 00:07:35,759
so that we can all look in the same

00:07:34,479 --> 00:07:38,080
place

00:07:35,759 --> 00:07:40,160
we need a single orchestration tool to

00:07:38,080 --> 00:07:41,840
run all the steps some of them serially

00:07:40,160 --> 00:07:43,840
and some in parallel

00:07:41,840 --> 00:07:45,120
we will also need the ability to

00:07:43,840 --> 00:07:46,160
orchestrate steps in different

00:07:45,120 --> 00:07:49,039
technologies

00:07:46,160 --> 00:07:49,599
and civil python bash and even more

00:07:49,039 --> 00:07:51,280
because

00:07:49,599 --> 00:07:53,599
people had different skills as they

00:07:51,280 --> 00:07:56,080
everyday work and we wanted to preserve

00:07:53,599 --> 00:07:58,479
that flexibility

00:07:56,080 --> 00:08:00,000
the orchestration tool must have site

00:07:58,479 --> 00:08:02,080
integration with git

00:08:00,000 --> 00:08:04,160
as the desired state of the different

00:08:02,080 --> 00:08:06,879
products was already in git managed by

00:08:04,160 --> 00:08:06,879
argo cd

00:08:07,440 --> 00:08:11,680
and so the automation basics as we

00:08:09,919 --> 00:08:13,440
outlined them were as following

00:08:11,680 --> 00:08:15,759
we're going to use as much githubs as

00:08:13,440 --> 00:08:19,360
possible and we're going to do that

00:08:15,759 --> 00:08:22,400
with a central argo cd instance

00:08:19,360 --> 00:08:26,080
our cluster desired state is going to be

00:08:22,400 --> 00:08:29,599
comprised of two things manifests

00:08:26,080 --> 00:08:31,919
and their corresponding argo apps yeah

00:08:29,599 --> 00:08:35,519
this is a key concept here that argo

00:08:31,919 --> 00:08:35,519
apps are also part of the state

00:08:36,399 --> 00:08:39,519
we will use gitlab ci as the

00:08:38,000 --> 00:08:42,800
orchestrator

00:08:39,519 --> 00:08:43,599
to run all those different steps and

00:08:42,800 --> 00:08:46,240
we're gonna have

00:08:43,599 --> 00:08:47,680
everything engage both github stuff and

00:08:46,240 --> 00:08:49,200
non-github stuff i'm

00:08:47,680 --> 00:08:50,959
gonna talk about the kit ups and

00:08:49,200 --> 00:08:52,640
non-github sparks throughout the entire

00:08:50,959 --> 00:08:56,160
session

00:08:52,640 --> 00:08:58,560
we will also use argo umbrella

00:08:56,160 --> 00:09:02,000
upper cluster this argo umbrella app

00:08:58,560 --> 00:09:02,000
will sync all the other apps

00:09:05,200 --> 00:09:10,640
and so this is our main automation flows

00:09:08,959 --> 00:09:12,640
yeah we're going to create the virtual

00:09:10,640 --> 00:09:14,000
machines then we're going to perform

00:09:12,640 --> 00:09:15,920
pre-installation tasks

00:09:14,000 --> 00:09:17,760
install open shift perform post

00:09:15,920 --> 00:09:20,880
installation tasks

00:09:17,760 --> 00:09:22,800
prepare the github's manifests

00:09:20,880 --> 00:09:25,519
and we're going to create our project

00:09:22,800 --> 00:09:26,720
create the argo umbrella up and the argo

00:09:25,519 --> 00:09:28,480
cluster secrets

00:09:26,720 --> 00:09:32,480
then we're going to wait for the argos

00:09:28,480 --> 00:09:32,480
to sync then we're going to run tests

00:09:33,600 --> 00:09:38,880
so this is the whole automation process

00:09:36,160 --> 00:09:42,480
of installing computer three

00:09:38,880 --> 00:09:42,480
there are six main parts here

00:09:43,200 --> 00:09:47,279
the ios spray part is creating the

00:09:46,160 --> 00:09:51,519
virtual machines

00:09:47,279 --> 00:09:53,360
and is preparing them for openshifts

00:09:51,519 --> 00:09:55,440
the ielts install part is the part that

00:09:53,360 --> 00:09:57,120
actually runs the ansible playbook that

00:09:55,440 --> 00:10:00,240
is installing openshift

00:09:57,120 --> 00:10:02,079
and the is post installation part is the

00:10:00,240 --> 00:10:04,399
part that performs

00:10:02,079 --> 00:10:07,040
post installation configuration of

00:10:04,399 --> 00:10:07,040
openshift

00:10:08,240 --> 00:10:15,040
now the platform part the

00:10:11,600 --> 00:10:15,680
platform is pre-installed part is

00:10:15,040 --> 00:10:19,040
preparing

00:10:15,680 --> 00:10:20,800
the cluster to be managed by argo cd

00:10:19,040 --> 00:10:22,399
and it is also installing and

00:10:20,800 --> 00:10:25,600
configuring products that needs

00:10:22,399 --> 00:10:25,600
imperative steps in them

00:10:25,920 --> 00:10:31,360
the platform install part is preparing

00:10:28,720 --> 00:10:34,160
argo apps for the new cluster

00:10:31,360 --> 00:10:34,720
and also the actual cubesat apply on the

00:10:34,160 --> 00:10:38,480
project

00:10:34,720 --> 00:10:40,320
on the umbrella app happens here

00:10:38,480 --> 00:10:42,399
and then the automation process waits

00:10:40,320 --> 00:10:45,360
for the important argo apps to sync

00:10:42,399 --> 00:10:46,079
and afterwards it performs sanity tests

00:10:45,360 --> 00:10:47,680
on the cluster

00:10:46,079 --> 00:10:51,519
to make sure that everything was

00:10:47,680 --> 00:10:51,519
installed and configured correctly

00:10:53,040 --> 00:10:57,040
this is how the desired states of an ocp

00:10:55,600 --> 00:10:58,880
cluster looks like

00:10:57,040 --> 00:11:00,480
i cannot show you the exact products

00:10:58,880 --> 00:11:03,120
that we're using

00:11:00,480 --> 00:11:03,600
but the important thing to understand is

00:11:03,120 --> 00:11:05,360
that

00:11:03,600 --> 00:11:07,519
for each product that you see on the

00:11:05,360 --> 00:11:14,800
left side there is a corresponding

00:11:07,519 --> 00:11:17,120
argo up managing its state

00:11:14,800 --> 00:11:17,839
let's take the out code collector as an

00:11:17,120 --> 00:11:19,680
example

00:11:17,839 --> 00:11:22,320
to explain how we manage the cluster

00:11:19,680 --> 00:11:24,240
product configuration with githubs

00:11:22,320 --> 00:11:25,839
the following area of manifest is part

00:11:24,240 --> 00:11:28,000
of the desired state

00:11:25,839 --> 00:11:29,440
the manifest will be different among the

00:11:28,000 --> 00:11:32,000
different clusters

00:11:29,440 --> 00:11:34,720
so it is templated the cluster name and

00:11:32,000 --> 00:11:36,480
the cluster url are different

00:11:34,720 --> 00:11:38,320
the automation will process this

00:11:36,480 --> 00:11:42,240
template and inject cluster-specific

00:11:38,320 --> 00:11:44,079
data in here

00:11:42,240 --> 00:11:46,000
this is an example of a templated

00:11:44,079 --> 00:11:47,839
product manifest with cluster specific

00:11:46,000 --> 00:11:49,360
configuration i'm sticking to the out

00:11:47,839 --> 00:11:52,399
hold example for now

00:11:49,360 --> 00:11:53,839
so this product as many others do not

00:11:52,399 --> 00:11:56,240
come as a home chart

00:11:53,839 --> 00:11:57,839
so we chose ansible templates to handle

00:11:56,240 --> 00:11:59,519
that

00:11:57,839 --> 00:12:02,160
the cluster name again will be different

00:11:59,519 --> 00:12:03,920
per cluster

00:12:02,160 --> 00:12:05,680
one of the automation steps will process

00:12:03,920 --> 00:12:08,880
this template and commit

00:12:05,680 --> 00:12:11,120
the final manifests to the git path

00:12:08,880 --> 00:12:12,079
which the argo app i showed you earlier

00:12:11,120 --> 00:12:14,240
is watching

00:12:12,079 --> 00:12:16,160
so we have imperative automation steps

00:12:14,240 --> 00:12:17,360
that are preparing manifests for the

00:12:16,160 --> 00:12:19,200
github space

00:12:17,360 --> 00:12:25,519
and committing them to github's desired

00:12:19,200 --> 00:12:27,920
state location again

00:12:25,519 --> 00:12:29,760
cluster configuration is comprised of

00:12:27,920 --> 00:12:31,519
general configuration and cluster

00:12:29,760 --> 00:12:34,160
specific configuration

00:12:31,519 --> 00:12:35,120
and so the templates filled with cluster

00:12:34,160 --> 00:12:38,320
specific values

00:12:35,120 --> 00:12:41,279
are the cluster final configuration

00:12:38,320 --> 00:12:43,040
template-based branch has the ansible

00:12:41,279 --> 00:12:45,600
tasks for the installation

00:12:43,040 --> 00:12:47,120
and the generate plus templated github's

00:12:45,600 --> 00:12:49,839
manifests

00:12:47,120 --> 00:12:51,279
it also has the template until hosts for

00:12:49,839 --> 00:12:52,880
the reddit openshift installation

00:12:51,279 --> 00:12:55,200
playbook

00:12:52,880 --> 00:12:57,519
now gitlabci pipeline runs on the

00:12:55,200 --> 00:13:00,399
template-based branch

00:12:57,519 --> 00:13:01,120
it creates a new branch that is named

00:13:00,399 --> 00:13:04,160
for example

00:13:01,120 --> 00:13:06,639
dev cluster 5 or pro cluster 2.

00:13:04,160 --> 00:13:07,279
and so final configuration is in the

00:13:06,639 --> 00:13:11,920
branch

00:13:07,279 --> 00:13:11,920
dev cluster 5 or protocol 2.

00:13:12,560 --> 00:13:16,720
this is a common git flow for the

00:13:14,480 --> 00:13:18,560
feature release where the template based

00:13:16,720 --> 00:13:21,440
branch is the main branch and

00:13:18,560 --> 00:13:22,959
people are working on feature branches

00:13:21,440 --> 00:13:25,040
to add more functionality to the

00:13:22,959 --> 00:13:27,360
automation

00:13:25,040 --> 00:13:30,079
each pipeline run on the main branch

00:13:27,360 --> 00:13:33,040
results with two things

00:13:30,079 --> 00:13:34,079
a new live openshift cluster and a git

00:13:33,040 --> 00:13:37,279
branch that is named

00:13:34,079 --> 00:13:39,920
after it so uh

00:13:37,279 --> 00:13:41,839
the branch has both github's manifest

00:13:39,920 --> 00:13:43,760
and non-github's content

00:13:41,839 --> 00:13:46,399
so the cluster and the branch are two

00:13:43,760 --> 00:13:48,959
inseparable entities

00:13:46,399 --> 00:13:49,920
after integration tests are run on the

00:13:48,959 --> 00:13:52,399
created cluster

00:13:49,920 --> 00:13:54,000
they are part of the same pipeline that

00:13:52,399 --> 00:13:56,480
builds the cluster

00:13:54,000 --> 00:13:57,600
the feature branch is merged back into

00:13:56,480 --> 00:13:59,839
the main branch

00:13:57,600 --> 00:14:01,760
so next time a github ci pipeline would

00:13:59,839 --> 00:14:04,480
run on the template-based branch

00:14:01,760 --> 00:14:05,839
a new cluster with the changes from the

00:14:04,480 --> 00:14:08,720
merge features

00:14:05,839 --> 00:14:08,720
will be created

00:14:10,000 --> 00:14:13,199
at this point the openshift installation

00:14:12,079 --> 00:14:16,480
automation was

00:14:13,199 --> 00:14:17,920
distributed like this thirty percent of

00:14:16,480 --> 00:14:20,240
detox content and

00:14:17,920 --> 00:14:22,639
seventy percent of non-gives imperative

00:14:20,240 --> 00:14:22,639
tasks

00:14:23,760 --> 00:14:28,959
the results with one click the cluster

00:14:27,120 --> 00:14:31,920
was up after three hours

00:14:28,959 --> 00:14:33,440
and it was fully functional required

00:14:31,920 --> 00:14:36,720
with required namespaces and

00:14:33,440 --> 00:14:39,360
applications and multiple such clusters

00:14:36,720 --> 00:14:41,279
can be created in parallel

00:14:39,360 --> 00:14:42,839
we had high confidence in the creative

00:14:41,279 --> 00:14:45,920
clusters

00:14:42,839 --> 00:14:49,199
because the trouble shooting here

00:14:45,920 --> 00:14:50,959
was easy the steps are clear and they're

00:14:49,199 --> 00:14:52,880
all in a known location and everything

00:14:50,959 --> 00:14:54,959
is documented

00:14:52,880 --> 00:14:57,519
being deeply inspired by githubs we

00:14:54,959 --> 00:14:59,360
managed to glue those 50 steps together

00:14:57,519 --> 00:15:00,880
and to eliminate the steps in people's

00:14:59,360 --> 00:15:02,959
minds in the end

00:15:00,880 --> 00:15:05,120
we managed to tame the elephant and

00:15:02,959 --> 00:15:07,440
perform fully automated install

00:15:05,120 --> 00:15:10,000
of openshift3 cluster in an air gap

00:15:07,440 --> 00:15:10,000
environment

00:15:10,800 --> 00:15:13,920
this is a github ci pipeline that

00:15:12,480 --> 00:15:15,920
creates an object cluster

00:15:13,920 --> 00:15:19,839
i like to call it a carpet as you can

00:15:15,920 --> 00:15:19,839
see there are around 50 steps in there

00:15:21,040 --> 00:15:24,320
are you familiar with the feeling of

00:15:23,120 --> 00:15:26,720
falling in love

00:15:24,320 --> 00:15:28,399
with something that you have developed

00:15:26,720 --> 00:15:30,639
so this happened to me too

00:15:28,399 --> 00:15:31,759
i fell in love with that automation that

00:15:30,639 --> 00:15:34,399
we did

00:15:31,759 --> 00:15:35,199
but i realized that i have to become

00:15:34,399 --> 00:15:38,480
emotionally

00:15:35,199 --> 00:15:40,240
unattached to what we have built so that

00:15:38,480 --> 00:15:43,440
improvements could be made

00:15:40,240 --> 00:15:43,440
and improvements were needed

00:15:46,480 --> 00:15:51,040
i still found out there was a constant

00:15:49,040 --> 00:15:51,839
need to introduce new products to new

00:15:51,040 --> 00:15:54,240
clusters

00:15:51,839 --> 00:15:55,839
and those products had some imperative

00:15:54,240 --> 00:15:58,720
logic to be performed

00:15:55,839 --> 00:16:00,800
and desired states some of them had

00:15:58,720 --> 00:16:03,040
environment specific configuration while

00:16:00,800 --> 00:16:04,720
others had ctl tools to invoke

00:16:03,040 --> 00:16:06,160
and only then their desired state could

00:16:04,720 --> 00:16:08,880
be managed

00:16:06,160 --> 00:16:10,560
so in order to do that other teams

00:16:08,880 --> 00:16:11,120
needed to learn about the automation

00:16:10,560 --> 00:16:14,320
process

00:16:11,120 --> 00:16:16,240
and they needed to integrate with it

00:16:14,320 --> 00:16:18,800
more imperative steps needed to be added

00:16:16,240 --> 00:16:20,800
to the long pipeline we already had

00:16:18,800 --> 00:16:22,240
it was time consuming and we started to

00:16:20,800 --> 00:16:25,680
look for a way to enable

00:16:22,240 --> 00:16:25,680
independent contributions

00:16:26,480 --> 00:16:29,600
so we need a redesign

00:16:32,000 --> 00:16:35,920
buy the new design the installation of

00:16:34,320 --> 00:16:37,440
the new product will be done by an

00:16:35,920 --> 00:16:40,240
ansible operator running

00:16:37,440 --> 00:16:42,240
in the cluster instead of a step in the

00:16:40,240 --> 00:16:45,120
github ci pipeline

00:16:42,240 --> 00:16:46,639
the product will be treated as a plugin

00:16:45,120 --> 00:16:47,360
and so clusters can have different

00:16:46,639 --> 00:16:49,680
plugins

00:16:47,360 --> 00:16:50,560
without being dependent on the gitlab ci

00:16:49,680 --> 00:16:53,519
steps that

00:16:50,560 --> 00:16:53,519
created the cluster

00:16:54,000 --> 00:17:01,120
kind of lego building blocks now

00:16:58,000 --> 00:17:02,800
the product contributor the person who

00:17:01,120 --> 00:17:03,440
wants to install this product on the

00:17:02,800 --> 00:17:06,240
cluster

00:17:03,440 --> 00:17:08,480
will provide the relevant ansible role

00:17:06,240 --> 00:17:11,439
for the imperative logic

00:17:08,480 --> 00:17:14,400
and will also provide the manifests with

00:17:11,439 --> 00:17:17,039
the desired state git location

00:17:14,400 --> 00:17:18,000
the operator will import the provided

00:17:17,039 --> 00:17:19,839
brainstorm ansible

00:17:18,000 --> 00:17:21,439
role for the product yeah the role isn't

00:17:19,839 --> 00:17:24,160
yet then it will

00:17:21,439 --> 00:17:28,240
create an argo app to watch the desired

00:17:24,160 --> 00:17:28,240
state location that was also provided

00:17:28,880 --> 00:17:36,240
and if some post logic is needed

00:17:33,280 --> 00:17:38,400
then it can import and run it as well

00:17:36,240 --> 00:17:39,360
again the post-install ansible role will

00:17:38,400 --> 00:17:41,919
be provided

00:17:39,360 --> 00:17:44,720
by the person contributing this product

00:17:41,919 --> 00:17:44,720
to the automation

00:17:45,600 --> 00:17:48,799
so sticking to the same outcome example

00:17:48,400 --> 00:17:51,760
now

00:17:48,799 --> 00:17:53,440
instead of of an imperative ansible step

00:17:51,760 --> 00:17:56,480
in the automation

00:17:53,440 --> 00:17:59,120
there is a custom resource that tells

00:17:56,480 --> 00:18:01,520
the operator to perform the same logic

00:17:59,120 --> 00:18:03,200
this custom resource is declarative so

00:18:01,520 --> 00:18:05,440
argo city can manage it

00:18:03,200 --> 00:18:08,480
that means less non-github steps and

00:18:05,440 --> 00:18:08,480
more github's content

00:18:10,559 --> 00:18:14,160
the answer operator was developed with

00:18:12,880 --> 00:18:16,480
operator sdk

00:18:14,160 --> 00:18:18,880
and had different config per clusters so

00:18:16,480 --> 00:18:21,039
i used customized overlays for that

00:18:18,880 --> 00:18:22,799
for each new cluster a new overlay had

00:18:21,039 --> 00:18:24,720
to be created

00:18:22,799 --> 00:18:26,240
so i kind of hit the chicken and neck

00:18:24,720 --> 00:18:28,320
problem

00:18:26,240 --> 00:18:30,480
now how can i install this operator

00:18:28,320 --> 00:18:32,000
easily on a new cluster in an automatic

00:18:30,480 --> 00:18:34,400
way

00:18:32,000 --> 00:18:36,880
that introduced another complexity and

00:18:34,400 --> 00:18:39,200
so the roi became too low

00:18:36,880 --> 00:18:41,600
i will change the release cycle of the

00:18:39,200 --> 00:18:43,760
operator in the future

00:18:41,600 --> 00:18:44,720
lately i discovered that there is a

00:18:43,760 --> 00:18:47,440
github's part

00:18:44,720 --> 00:18:49,200
in redux advanced cluster management

00:18:47,440 --> 00:18:50,640
reddit advanced cluster management

00:18:49,200 --> 00:18:53,280
framework steps

00:18:50,640 --> 00:18:55,360
can be also implemented as ansible role

00:18:53,280 --> 00:18:58,640
but they require ansible tower

00:18:55,360 --> 00:19:01,280
to run them so it looks like reddit is

00:18:58,640 --> 00:19:03,280
also investing in solutions that combine

00:19:01,280 --> 00:19:05,919
githubs and non-github swirls but with a

00:19:03,280 --> 00:19:05,919
different design

00:19:07,600 --> 00:19:12,799
another problem let's say that i've

00:19:10,559 --> 00:19:15,360
installed litmus

00:19:12,799 --> 00:19:16,720
on one of our cluster i tested it and i

00:19:15,360 --> 00:19:18,480
decided that

00:19:16,720 --> 00:19:20,080
each of our other clusters should also

00:19:18,480 --> 00:19:23,120
have liquids installed

00:19:20,080 --> 00:19:25,600
so in the current design labels

00:19:23,120 --> 00:19:29,760
manifests are general they do not have

00:19:25,600 --> 00:19:29,760
any environment specific configuration

00:19:30,080 --> 00:19:34,240
but they have to be duplicated among all

00:19:32,480 --> 00:19:38,080
the branches

00:19:34,240 --> 00:19:40,640
so actually most of the products we use

00:19:38,080 --> 00:19:42,160
have common configuration and only about

00:19:40,640 --> 00:19:45,520
20 percent

00:19:42,160 --> 00:19:45,520
are environment dependent

00:19:46,640 --> 00:19:50,960
so the branches for the different

00:19:48,400 --> 00:19:51,440
clusters cannot be merged into each

00:19:50,960 --> 00:19:54,799
other

00:19:51,440 --> 00:19:57,840
because of the 20 percent that have

00:19:54,799 --> 00:20:00,960
environment specific configuration

00:19:57,840 --> 00:20:02,159
and the meaning is that those identical

00:20:00,960 --> 00:20:07,520
manifest had to be

00:20:02,159 --> 00:20:10,559
copied manually from branch to branch

00:20:07,520 --> 00:20:10,559
so we did a redesign

00:20:12,480 --> 00:20:15,600
the solution is common desired state for

00:20:14,720 --> 00:20:18,559
eighty percent

00:20:15,600 --> 00:20:19,600
of the cases now this design is much

00:20:18,559 --> 00:20:21,679
better

00:20:19,600 --> 00:20:23,679
the common manifests reside only in two

00:20:21,679 --> 00:20:24,400
branches the dev desired state and the

00:20:23,679 --> 00:20:26,960
broadly

00:20:24,400 --> 00:20:28,880
desired state yeah so this one is for

00:20:26,960 --> 00:20:30,880
all the dev environments and this one is

00:20:28,880 --> 00:20:33,440
for all the product environments

00:20:30,880 --> 00:20:34,640
now introducing litmus to all the dev

00:20:33,440 --> 00:20:37,679
environments

00:20:34,640 --> 00:20:42,080
is as easy as committing once

00:20:37,679 --> 00:20:43,840
to the common branch the argo ups

00:20:42,080 --> 00:20:46,400
of litmus are still different per

00:20:43,840 --> 00:20:47,440
cluster so they remain in the original

00:20:46,400 --> 00:20:49,440
branch

00:20:47,440 --> 00:20:50,880
and if we take the out called manifest

00:20:49,440 --> 00:20:53,200
that i've mentioned earlier

00:20:50,880 --> 00:20:55,919
they are also plaster specific so they

00:20:53,200 --> 00:20:58,559
also remain in the original branch

00:20:55,919 --> 00:20:59,280
but now what happened is that i can take

00:20:58,559 --> 00:21:01,440
those

00:20:59,280 --> 00:21:03,039
general common manifests from the

00:21:01,440 --> 00:21:05,760
desired state branch

00:21:03,039 --> 00:21:06,480
and now i can auto merge them i can

00:21:05,760 --> 00:21:08,799
automatically

00:21:06,480 --> 00:21:09,840
merge them into the pro desired state

00:21:08,799 --> 00:21:14,080
cluster

00:21:09,840 --> 00:21:14,080
and i do not need to copy them over

00:21:14,840 --> 00:21:18,559
manually

00:21:16,159 --> 00:21:20,000
another problem that we had was long

00:21:18,559 --> 00:21:23,360
integration time

00:21:20,000 --> 00:21:24,559
for new features when adding a new

00:21:23,360 --> 00:21:26,880
feature to the automation

00:21:24,559 --> 00:21:27,760
a new cluster have to be created

00:21:26,880 --> 00:21:30,400
successfully

00:21:27,760 --> 00:21:32,159
and all its tests must pass before the

00:21:30,400 --> 00:21:33,520
feature can be merged back into the main

00:21:32,159 --> 00:21:36,559
branch

00:21:33,520 --> 00:21:37,679
but the cluster creation can fail before

00:21:36,559 --> 00:21:40,159
reaching the step

00:21:37,679 --> 00:21:40,960
that introduces a new feature that can

00:21:40,159 --> 00:21:43,360
happen

00:21:40,960 --> 00:21:44,080
if we run out of resources on the

00:21:43,360 --> 00:21:46,400
infrastructure

00:21:44,080 --> 00:21:47,679
side or because some network error

00:21:46,400 --> 00:21:49,919
occurred

00:21:47,679 --> 00:21:51,600
and so reaching the new step can

00:21:49,919 --> 00:21:53,520
sometimes lead to a very long

00:21:51,600 --> 00:21:57,120
integration time

00:21:53,520 --> 00:22:01,120
in this example i waited for two hours

00:21:57,120 --> 00:22:03,280
just to fail so this is an example of

00:22:01,120 --> 00:22:05,600
new steps that were not reached

00:22:03,280 --> 00:22:08,799
yeah the new steps were here and a

00:22:05,600 --> 00:22:08,799
longer run is needed

00:22:09,120 --> 00:22:13,840
so we did our design

00:22:13,919 --> 00:22:18,080
we decided to separate the is and the

00:22:17,200 --> 00:22:20,159
platform

00:22:18,080 --> 00:22:22,960
into two different wrappers and into two

00:22:20,159 --> 00:22:25,679
different pipelines

00:22:22,960 --> 00:22:27,440
as the bonus we realized that when we

00:22:25,679 --> 00:22:29,280
moved to public clouds

00:22:27,440 --> 00:22:31,360
the highest part will be completely

00:22:29,280 --> 00:22:34,000
different and we will be able to replace

00:22:31,360 --> 00:22:34,000
it easily

00:22:36,720 --> 00:22:40,240
and then opportune 4 came out so object

00:22:39,600 --> 00:22:43,039
00:22:40,240 --> 00:22:44,240
is an evolution and a revolution all

00:22:43,039 --> 00:22:46,799
together

00:22:44,240 --> 00:22:49,280
openshift is declarative to the bone

00:22:46,799 --> 00:22:52,640
it's clearly github's inspired

00:22:49,280 --> 00:22:52,640
everything is an operator

00:22:52,960 --> 00:22:56,640
monitoring stack configuration is now

00:22:55,120 --> 00:22:58,720
declarative it means

00:22:56,640 --> 00:23:02,559
no more running ansible playbooks to

00:22:58,720 --> 00:23:02,559
configure alert manager receivers

00:23:03,200 --> 00:23:06,960
openshift 4 configuration itself is

00:23:06,080 --> 00:23:09,120
declarative

00:23:06,960 --> 00:23:11,039
it means that no more editing the master

00:23:09,120 --> 00:23:13,200
conf is needed

00:23:11,039 --> 00:23:14,960
there is an operator for alt

00:23:13,200 --> 00:23:16,799
configuration there is an operator for

00:23:14,960 --> 00:23:19,280
english controller configurations and

00:23:16,799 --> 00:23:19,280
many more

00:23:19,840 --> 00:23:24,159
even operating system level

00:23:21,440 --> 00:23:27,120
configuration is declarative

00:23:24,159 --> 00:23:30,400
we can use the machine config cr for

00:23:27,120 --> 00:23:30,400
example to configure crony

00:23:34,080 --> 00:23:37,840
and what happened as a result is that

00:23:36,000 --> 00:23:41,279
the knock it ups part

00:23:37,840 --> 00:23:43,600
in our automation shrunk significantly

00:23:41,279 --> 00:23:44,960
now most of the automation is

00:23:43,600 --> 00:23:48,400
declarative

00:23:44,960 --> 00:23:50,799
and managed with desired states

00:23:48,400 --> 00:23:53,279
the more github's desired state we have

00:23:50,799 --> 00:23:54,960
the more flexibility and control we gain

00:23:53,279 --> 00:23:58,559
or kind of flipped around now the

00:23:54,960 --> 00:23:58,559
majority these git ups

00:23:59,200 --> 00:24:03,360
remember the long gitlab ciaml from

00:24:01,360 --> 00:24:06,880
openg3 installation

00:24:03,360 --> 00:24:10,080
with object 4 the is non-github spark

00:24:06,880 --> 00:24:14,480
is extremely short and simple

00:24:10,080 --> 00:24:14,480
that's it it used to be very long

00:24:14,720 --> 00:24:19,760
as for the github smart gloves with

00:24:17,360 --> 00:24:23,039
openshift 3 we had about 17

00:24:19,760 --> 00:24:25,200
argo apps with openshift 4 we doubled

00:24:23,039 --> 00:24:27,279
that amount

00:24:25,200 --> 00:24:28,480
so all of those are the new argo apps

00:24:27,279 --> 00:24:31,520
that we're using

00:24:28,480 --> 00:24:33,120
i can only show you some of those the

00:24:31,520 --> 00:24:36,159
growers and the desired states

00:24:33,120 --> 00:24:36,799
that we manage came both from operator

00:24:36,159 --> 00:24:38,799
hub

00:24:36,799 --> 00:24:40,000
operators that can be easily installed

00:24:38,799 --> 00:24:42,000
in option 4

00:24:40,000 --> 00:24:43,760
and from the configuration steps that

00:24:42,000 --> 00:24:46,159
were previously imperative

00:24:43,760 --> 00:24:47,919
and done with ansible and now they are

00:24:46,159 --> 00:24:50,400
declarative and can be managed with

00:24:47,919 --> 00:24:50,400
kiddos

00:24:51,039 --> 00:24:55,039
the number of the steps and the

00:24:53,679 --> 00:24:58,159
installation duration

00:24:55,039 --> 00:24:58,159
drastically reduced

00:24:59,039 --> 00:25:01,840
now it's very short

00:25:04,080 --> 00:25:07,520
because of collaborative nature of gives

00:25:06,559 --> 00:25:09,760
we can tackle

00:25:07,520 --> 00:25:10,880
bigger projects especially in pandemic

00:25:09,760 --> 00:25:13,760
times

00:25:10,880 --> 00:25:15,919
gitobs is bringing people together so

00:25:13,760 --> 00:25:18,240
another cultural changes that we've seen

00:25:15,919 --> 00:25:21,039
is that at the beginning people were

00:25:18,240 --> 00:25:23,360
implementing tasks in their comfort zone

00:25:21,039 --> 00:25:24,320
and as the project evolved we all

00:25:23,360 --> 00:25:27,360
started taking

00:25:24,320 --> 00:25:30,000
tasks outside of our comfort zone

00:25:27,360 --> 00:25:31,679
and out of our professional style and

00:25:30,000 --> 00:25:33,600
solved problems across the entire

00:25:31,679 --> 00:25:35,520
project

00:25:33,600 --> 00:25:38,320
the learning and the knowledge sharing

00:25:35,520 --> 00:25:38,320
was enormous

00:25:38,799 --> 00:25:42,000
before we started the project the

00:25:40,799 --> 00:25:44,320
environment changes were

00:25:42,000 --> 00:25:46,640
undocumented and with githubs every

00:25:44,320 --> 00:25:50,799
change is documented tested and tracked

00:25:46,640 --> 00:25:53,120
so accountability improved drastically

00:25:50,799 --> 00:25:54,000
to conclude do you remember the arrogant

00:25:53,120 --> 00:25:56,400
hell

00:25:54,000 --> 00:25:57,760
i showed you earlier with github's

00:25:56,400 --> 00:26:01,440
inspiration

00:25:57,760 --> 00:26:01,440
it turned to a cozy place to be

00:26:01,760 --> 00:26:05,679
we would love to hear from you you can

00:26:03,600 --> 00:26:08,080
reach us by linkedin

00:26:05,679 --> 00:26:10,240
i want to say thanks to our teams we

00:26:08,080 --> 00:26:13,919
could not have done this without you

00:26:10,240 --> 00:26:17,240
and huge special thanks to shelley

00:26:13,919 --> 00:26:20,240
and thank you so much for watching our

00:26:17,240 --> 00:26:20,240

YouTube URL: https://www.youtube.com/watch?v=5HztX6d8Ntk


