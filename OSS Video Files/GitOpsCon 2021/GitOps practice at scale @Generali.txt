Title: GitOps practice at scale @Generali
Publication date: 2021-04-29
Playlist: GitOpsCon 2021
Description: 
	At Generali, we embraced GitOps principles almost 2 years ago and it is at the heart of our cloud architecture. We are keen to share our experience and feedback. What we like, what are the constraint, but also the non technical aspects.
Captions: 
	00:00:03,439 --> 00:00:09,440
hello and welcome to this session

00:00:06,720 --> 00:00:10,639
i am mohammed al-hawi i am working as a

00:00:09,440 --> 00:00:14,719
cloud architect

00:00:10,639 --> 00:00:17,440
at general switzerland during this talk

00:00:14,719 --> 00:00:18,240
i'm going to tell you about our github's

00:00:17,440 --> 00:00:22,800
journey

00:00:18,240 --> 00:00:26,000
but generally what we did how we did it

00:00:22,800 --> 00:00:26,000
and what we learned

00:00:28,960 --> 00:00:33,040
so generally is an italian insurance

00:00:31,840 --> 00:00:36,960
company

00:00:33,040 --> 00:00:40,399
that is 190 years old

00:00:36,960 --> 00:00:43,760
we have two main offices in switzerland

00:00:40,399 --> 00:00:48,079
one in atleasville near zurich

00:00:43,760 --> 00:00:51,440
and another one in neo near geneva

00:00:48,079 --> 00:00:54,559
we also have 55 locations

00:00:51,440 --> 00:00:58,079
across switzerland

00:00:54,559 --> 00:01:01,120
we are around 1 thousand

00:00:58,079 --> 00:01:04,559
and eight hundred employees and

00:01:01,120 --> 00:01:04,559
we have one million customers

00:01:05,680 --> 00:01:12,720
so we started few years ago a

00:01:08,799 --> 00:01:15,280
major program to modernize rit

00:01:12,720 --> 00:01:17,360
and what we are doing is that from our

00:01:15,280 --> 00:01:21,280
legacy system

00:01:17,360 --> 00:01:24,240
we are extracting the data in

00:01:21,280 --> 00:01:25,600
near real time using change data capture

00:01:24,240 --> 00:01:29,360
technology

00:01:25,600 --> 00:01:32,400
and we produce messages to kafka topics

00:01:29,360 --> 00:01:34,640
from there we have a bunch of

00:01:32,400 --> 00:01:36,720
kafka streams applications that do the

00:01:34,640 --> 00:01:39,360
data transformation

00:01:36,720 --> 00:01:40,159
consuming messages from topics and

00:01:39,360 --> 00:01:43,680
producing

00:01:40,159 --> 00:01:46,360
messages to other topics and

00:01:43,680 --> 00:01:49,680
eventually the data are delivered to

00:01:46,360 --> 00:01:52,960
microservices applications

00:01:49,680 --> 00:01:56,640
that expose some services

00:01:52,960 --> 00:01:59,920
through an api gateway

00:01:56,640 --> 00:01:59,920
to the different channels

00:02:00,000 --> 00:02:06,079
we also have

00:02:04,000 --> 00:02:07,520
salesforce integrations following this

00:02:06,079 --> 00:02:09,759
pattern

00:02:07,520 --> 00:02:10,879
and everything is happening in is

00:02:09,759 --> 00:02:14,560
happening in real

00:02:10,879 --> 00:02:14,560
nearly real time sorry

00:02:15,040 --> 00:02:20,319
so to support this architecture we

00:02:18,080 --> 00:02:21,440
developed what we called the connection

00:02:20,319 --> 00:02:25,040
platform

00:02:21,440 --> 00:02:26,879
or copa for short and

00:02:25,040 --> 00:02:29,440
this is this is just a container

00:02:26,879 --> 00:02:32,800
platform offering

00:02:29,440 --> 00:02:36,480
all the features and services to develop

00:02:32,800 --> 00:02:38,800
secure and operate our systems

00:02:36,480 --> 00:02:39,599
and it is compliant with our highly

00:02:38,800 --> 00:02:43,040
regulated

00:02:39,599 --> 00:02:46,160
environment it is deployed on

00:02:43,040 --> 00:02:51,840
kubernetes and hosted fully

00:02:46,160 --> 00:02:51,840
on google public cloud

00:02:54,560 --> 00:03:01,840
some numbers around copper so

00:02:58,159 --> 00:03:05,840
overall copper is about 20 clusters

00:03:01,840 --> 00:03:12,319
running five thousand pounds

00:03:05,840 --> 00:03:17,680
we have overall uh 100 1600 600 topics

00:03:12,319 --> 00:03:21,440
on kafka and uh 550 repositories

00:03:17,680 --> 00:03:25,280
we are running about 250 images

00:03:21,440 --> 00:03:27,280
in production um

00:03:25,280 --> 00:03:29,200
all this is developed and maintained by

00:03:27,280 --> 00:03:32,400
a platform team

00:03:29,200 --> 00:03:34,879
of about 10 people

00:03:32,400 --> 00:03:35,599
and we also have a strong partnership

00:03:34,879 --> 00:03:40,879
with

00:03:35,599 --> 00:03:42,799
tata consulting service that provides

00:03:40,879 --> 00:03:44,959
devops resources for the business

00:03:42,799 --> 00:03:48,959
application teams

00:03:44,959 --> 00:03:52,480
and there are about 60 people

00:03:48,959 --> 00:03:53,439
both on site in switzerland and offshore

00:03:52,480 --> 00:03:55,840
in

00:03:53,439 --> 00:03:55,840
india

00:03:58,159 --> 00:04:03,599
so we didn't start that big with the

00:04:01,920 --> 00:04:05,599
connection platform but

00:04:03,599 --> 00:04:07,439
from the beginning we had some question

00:04:05,599 --> 00:04:10,640
in mind

00:04:07,439 --> 00:04:13,360
so first what is running on the

00:04:10,640 --> 00:04:15,840
connection platform

00:04:13,360 --> 00:04:17,120
uh not only the business workload but

00:04:15,840 --> 00:04:20,000
also the

00:04:17,120 --> 00:04:20,479
the platform workload meaning we need we

00:04:20,000 --> 00:04:22,960
need to

00:04:20,479 --> 00:04:24,320
we needed to know exactly what is the

00:04:22,960 --> 00:04:26,080
for example the version of the craft

00:04:24,320 --> 00:04:28,160
final that is running

00:04:26,080 --> 00:04:29,120
and what is the exact configuration of

00:04:28,160 --> 00:04:32,240
it

00:04:29,120 --> 00:04:36,960
so we were thinking about how to

00:04:32,240 --> 00:04:36,960
have this configuration as code

00:04:38,960 --> 00:04:44,080
um automate deployment so

00:04:42,320 --> 00:04:46,560
of course thinking about continuous

00:04:44,080 --> 00:04:50,960
delivery for the applications

00:04:46,560 --> 00:04:53,919
but also automate the whole cluster

00:04:50,960 --> 00:04:54,560
and its workload so let's say for some

00:04:53,919 --> 00:04:57,199
reason

00:04:54,560 --> 00:04:58,880
we need to redeploy from scratch the

00:04:57,199 --> 00:05:00,720
whole stuff

00:04:58,880 --> 00:05:03,280
that should be automated as much as

00:05:00,720 --> 00:05:03,280
possible

00:05:07,120 --> 00:05:14,080
what is the configuration of my cluster

00:05:10,320 --> 00:05:15,919
so again thinking about

00:05:14,080 --> 00:05:18,479
a configuration of a cluster thinking

00:05:15,919 --> 00:05:21,520
about what security policies

00:05:18,479 --> 00:05:24,800
resource quota storage classes

00:05:21,520 --> 00:05:27,039
all this should be configured as code as

00:05:24,800 --> 00:05:27,039
well

00:05:29,120 --> 00:05:34,800
how do i do we keep

00:05:32,400 --> 00:05:37,280
track of the changes so this is this is

00:05:34,800 --> 00:05:41,759
a really a strong requirement

00:05:37,280 --> 00:05:41,759
for the compliance and governance

00:05:42,160 --> 00:05:47,520
we are again working on a highly

00:05:45,759 --> 00:05:50,160
regulated environment

00:05:47,520 --> 00:05:50,720
environment and we needed to have this

00:05:50,160 --> 00:05:53,759
for

00:05:50,720 --> 00:05:58,400
for audit reasons

00:05:53,759 --> 00:06:01,600
so this is where our research

00:05:58,400 --> 00:06:02,960
leads leads to to looking at at the

00:06:01,600 --> 00:06:06,160
githubs

00:06:02,960 --> 00:06:09,280
and very soon we were really

00:06:06,160 --> 00:06:11,280
confident that gtops could help us

00:06:09,280 --> 00:06:13,759
answer many if not all of these

00:06:11,280 --> 00:06:13,759
questions

00:06:17,120 --> 00:06:24,000
so in a nutshell for us git etaps was

00:06:21,520 --> 00:06:25,840
really about keeping everything in git

00:06:24,000 --> 00:06:29,440
as a source of truth

00:06:25,840 --> 00:06:32,880
and trigger a clustered update

00:06:29,440 --> 00:06:36,319
only from a git push

00:06:32,880 --> 00:06:39,600
so this is um

00:06:36,319 --> 00:06:41,520
maybe oversimplified but it is important

00:06:39,600 --> 00:06:44,319
to keep that in mind

00:06:41,520 --> 00:06:44,960
this very simple concept when things

00:06:44,319 --> 00:06:49,840
becomes

00:06:44,960 --> 00:06:49,840
more complicated

00:06:52,160 --> 00:07:00,240
so you want to do detox but how to start

00:06:56,720 --> 00:07:03,440
um we we really do like this quote from

00:07:00,240 --> 00:07:06,160
adios money that says

00:07:03,440 --> 00:07:07,680
first do it then do it right then do it

00:07:06,160 --> 00:07:11,759
better

00:07:07,680 --> 00:07:15,840
and these are exactly the steps that we

00:07:11,759 --> 00:07:19,039
came across during our guitars

00:07:15,840 --> 00:07:21,599
and we really didn't want to spend

00:07:19,039 --> 00:07:23,680
much time discussing what is githubs how

00:07:21,599 --> 00:07:26,160
to do it

00:07:23,680 --> 00:07:27,440
and try to come up with the perfect

00:07:26,160 --> 00:07:30,000
solution

00:07:27,440 --> 00:07:31,440
whether we wanted to to start more small

00:07:30,000 --> 00:07:35,120
and fast

00:07:31,440 --> 00:07:37,840
and experiment it and have a quick

00:07:35,120 --> 00:07:37,840
feedback loop

00:07:43,199 --> 00:07:50,720
so this slide depicts the

00:07:47,039 --> 00:07:54,319
really first implementation of for

00:07:50,720 --> 00:07:59,000
from github strategy let's say so

00:07:54,319 --> 00:08:02,639
when we started back uh in

00:07:59,000 --> 00:08:08,720
2018 we were running coppa

00:08:02,639 --> 00:08:08,720
on a single on-prem openshift cluster

00:08:09,039 --> 00:08:13,360
developers were having their source code

00:08:11,599 --> 00:08:16,800
repository

00:08:13,360 --> 00:08:18,960
and we were just like

00:08:16,800 --> 00:08:22,560
let's contribute to this repository with

00:08:18,960 --> 00:08:22,560
some kubernetes manifest

00:08:23,039 --> 00:08:27,280
so we added the deployment configuration

00:08:26,000 --> 00:08:30,240
file

00:08:27,280 --> 00:08:31,840
for the older yaml files into the added

00:08:30,240 --> 00:08:35,360
the repo

00:08:31,840 --> 00:08:39,519
and we also added a step on the jenkins

00:08:35,360 --> 00:08:39,519
pipeline to deploy the applications

00:08:39,599 --> 00:08:46,720
so this setup might work if um

00:08:43,440 --> 00:08:50,560
you have an organization with small

00:08:46,720 --> 00:08:53,200
homogeneous and unpowered team

00:08:50,560 --> 00:08:55,839
but um this was not really a good fit

00:08:53,200 --> 00:08:55,839
for us

00:08:56,000 --> 00:09:00,560
again we have strong requirements when

00:08:57,920 --> 00:09:04,399
it comes to security and compliance

00:09:00,560 --> 00:09:05,839
and we have

00:09:04,399 --> 00:09:07,680
one of these requirements is the

00:09:05,839 --> 00:09:10,320
segregation of duties so we

00:09:07,680 --> 00:09:13,040
cannot have the one developing the

00:09:10,320 --> 00:09:17,440
application being the one deploying it

00:09:13,040 --> 00:09:17,440
so sharing a single repository

00:09:19,040 --> 00:09:24,320
makes it difficult to fulfill this

00:09:21,680 --> 00:09:24,320
requirement

00:09:27,200 --> 00:09:34,240
another issue that we have is that

00:09:30,560 --> 00:09:34,240
the last step on the pipeline that we

00:09:34,320 --> 00:09:40,320
we added uh

00:09:37,680 --> 00:09:41,279
in this step we were deploying a tagged

00:09:40,320 --> 00:09:44,399
docker image

00:09:41,279 --> 00:09:47,440
that was just built in the step before

00:09:44,399 --> 00:09:50,560
so for this to work we had

00:09:47,440 --> 00:09:53,680
to patch the deployment manifest with

00:09:50,560 --> 00:09:56,720
the newly created image tag

00:09:53,680 --> 00:10:00,000
so this is an imperative approach

00:09:56,720 --> 00:10:01,279
rather than declarative and this is not

00:10:00,000 --> 00:10:04,320
really good because

00:10:01,279 --> 00:10:08,240
whatever you do imperatively is lost

00:10:04,320 --> 00:10:11,760
either in your bash history or in your

00:10:08,240 --> 00:10:15,360
pipeline logs so

00:10:11,760 --> 00:10:20,399
we wanted to have

00:10:15,360 --> 00:10:20,399
a fully declarative here

00:10:20,760 --> 00:10:26,000
another issue that we had is that

00:10:24,160 --> 00:10:28,880
was that there was no no cluster

00:10:26,000 --> 00:10:32,959
synchronization we are only applying the

00:10:28,880 --> 00:10:35,680
jamal file to manifest blindly and

00:10:32,959 --> 00:10:37,360
then it was not easy to to to have the

00:10:35,680 --> 00:10:41,200
cluster state picture

00:10:37,360 --> 00:10:41,200
and to track the changes

00:10:44,880 --> 00:10:47,839
so we

00:10:47,920 --> 00:10:56,480
did it right let's see in the

00:10:52,560 --> 00:10:56,480
next year um

00:10:57,279 --> 00:11:02,399
so first thing is that we split the

00:11:00,480 --> 00:11:04,399
repositories into

00:11:02,399 --> 00:11:07,040
application build repository and

00:11:04,399 --> 00:11:10,640
application deploy repository

00:11:07,040 --> 00:11:13,120
so the the build repository is used to

00:11:10,640 --> 00:11:15,839
build the docker images

00:11:13,120 --> 00:11:15,839
and

00:11:16,800 --> 00:11:22,959
it is uh it is what triggers the the the

00:11:20,560 --> 00:11:26,320
ci pipeline

00:11:22,959 --> 00:11:29,360
the deploy repository is

00:11:26,320 --> 00:11:32,560
hosting the helm charts to

00:11:29,360 --> 00:11:32,560
deploy the applications

00:11:33,440 --> 00:11:40,880
and when a new

00:11:37,279 --> 00:11:44,079
tagged image is built

00:11:40,880 --> 00:11:46,959
and that needs to be promoted

00:11:44,079 --> 00:11:48,320
the image tag is updated on the deploy

00:11:46,959 --> 00:11:51,680
repository

00:11:48,320 --> 00:11:54,720
so we have a very uh fully

00:11:51,680 --> 00:11:57,200
decorative approach we

00:11:54,720 --> 00:11:59,920
also introduced a special repository

00:11:57,200 --> 00:12:02,880
that we called cabana

00:11:59,920 --> 00:12:06,000
this repository holds references to all

00:12:02,880 --> 00:12:08,160
the deployed repositories

00:12:06,000 --> 00:12:09,519
and this is really the the desired state

00:12:08,160 --> 00:12:13,440
of the of the cluster

00:12:09,519 --> 00:12:16,160
this is our source of truth so

00:12:13,440 --> 00:12:17,200
also cabana contains all the

00:12:16,160 --> 00:12:20,320
configuration

00:12:17,200 --> 00:12:22,560
uh uh specific to the cluster so like

00:12:20,320 --> 00:12:24,880
the bot security policies the

00:12:22,560 --> 00:12:27,279
resource quota network policy and so on

00:12:24,880 --> 00:12:30,240
and so forth

00:12:27,279 --> 00:12:34,320
so looking at cabana you can tell

00:12:30,240 --> 00:12:37,120
exactly what is deploying the cluster

00:12:34,320 --> 00:12:38,560
the cabana repository is owned by the

00:12:37,120 --> 00:12:40,720
platform team but

00:12:38,560 --> 00:12:42,240
the developers can contribute to the

00:12:40,720 --> 00:12:44,959
campaigner

00:12:42,240 --> 00:12:47,839
with pull requests so if they want to

00:12:44,959 --> 00:12:51,200
promote a new version of the application

00:12:47,839 --> 00:12:54,959
it can just issue a pull request and

00:12:51,200 --> 00:12:54,959
it is merged by the platform team

00:12:55,839 --> 00:12:59,920
to complete the setup we also have

00:12:58,000 --> 00:13:02,480
developed our own sync tool

00:12:59,920 --> 00:13:05,360
so the reason for that is that at the

00:13:02,480 --> 00:13:08,079
time we had a lot of automation scripts

00:13:05,360 --> 00:13:08,880
and all we needed it was uh just a

00:13:08,079 --> 00:13:10,880
simple web

00:13:08,880 --> 00:13:11,920
server to listen to git web hook and

00:13:10,880 --> 00:13:15,839
execute the script

00:13:11,920 --> 00:13:21,440
this was it was really the the

00:13:15,839 --> 00:13:25,600
easiest way for us

00:13:21,440 --> 00:13:28,639
so our sync tool was also

00:13:25,600 --> 00:13:31,760
generating some human readable uh

00:13:28,639 --> 00:13:35,519
reports on every change

00:13:31,760 --> 00:13:38,880
happening on the cluster so

00:13:35,519 --> 00:13:42,000
what was missing is was the that

00:13:38,880 --> 00:13:43,760
the this tool was only able to

00:13:42,000 --> 00:13:45,600
synchronize one way from git

00:13:43,760 --> 00:13:47,040
to the cluster but not the other way

00:13:45,600 --> 00:13:51,440
around

00:13:47,040 --> 00:13:53,760
so we didn't want to invest

00:13:51,440 --> 00:13:55,519
much time in developing this feature

00:13:53,760 --> 00:13:59,199
because

00:13:55,519 --> 00:14:00,000
we were already looking at argo cd as a

00:13:59,199 --> 00:14:03,839
standard tool

00:14:00,000 --> 00:14:03,839
to do that

00:14:08,399 --> 00:14:15,839
so then we

00:14:12,079 --> 00:14:16,240
did it better this is this slide shows

00:14:15,839 --> 00:14:19,760
uh

00:14:16,240 --> 00:14:22,399
the uh

00:14:19,760 --> 00:14:24,880
state of the actual solution that we

00:14:22,399 --> 00:14:27,120
have implemented for githubs

00:14:24,880 --> 00:14:28,079
uh there is quite a lot of information

00:14:27,120 --> 00:14:31,199
in this slide but

00:14:28,079 --> 00:14:33,279
uh don't worry we will have

00:14:31,199 --> 00:14:35,839
i will deep dive on the different paths

00:14:33,279 --> 00:14:41,120
in the next slides

00:14:35,839 --> 00:14:41,120
so what i can tell

00:14:41,199 --> 00:14:45,839
is that yes a lot happened during the

00:14:43,440 --> 00:14:49,120
last iteration and

00:14:45,839 --> 00:14:52,079
most specifically we

00:14:49,120 --> 00:14:53,920
have migrated to a multi-cluster

00:14:52,079 --> 00:14:57,519
environment

00:14:53,920 --> 00:14:59,839
and we are running on on the google

00:14:57,519 --> 00:15:03,199
public cloud

00:14:59,839 --> 00:15:06,160
so we have now specialized cluster

00:15:03,199 --> 00:15:07,600
like streaming cluster for kafka

00:15:06,160 --> 00:15:10,160
workloads

00:15:07,600 --> 00:15:12,560
or business cluster for the business

00:15:10,160 --> 00:15:15,680
applications workload

00:15:12,560 --> 00:15:18,160
and we also have

00:15:15,680 --> 00:15:19,839
a different cluster for each stage so

00:15:18,160 --> 00:15:21,040
for example we have the business devel

00:15:19,839 --> 00:15:24,880
cluster

00:15:21,040 --> 00:15:24,880
on the streaming test cluster

00:15:25,120 --> 00:15:28,639
you can also see from the diagram that

00:15:28,079 --> 00:15:32,160
we

00:15:28,639 --> 00:15:32,160
have adopted argo cd

00:15:32,240 --> 00:15:35,759
and we deploy it on each and every

00:15:34,399 --> 00:15:38,800
cluster

00:15:35,759 --> 00:15:42,240
to manage the synchronization with

00:15:38,800 --> 00:15:46,079
git repositories so the

00:15:42,240 --> 00:15:49,040
real challenge that we faced

00:15:46,079 --> 00:15:51,120
with that many cluster was to find the

00:15:49,040 --> 00:15:54,320
really the right structure

00:15:51,120 --> 00:15:57,120
to support our guitar strategy in a

00:15:54,320 --> 00:15:57,120
compliant way

00:15:57,680 --> 00:16:04,240
and i'm now going to

00:16:01,360 --> 00:16:06,959
hand over to my colleague almir and he

00:16:04,240 --> 00:16:06,959
will show you

00:16:07,440 --> 00:16:11,360
in our setup there are three different

00:16:09,360 --> 00:16:14,320
kind of repositories

00:16:11,360 --> 00:16:14,560
cluster repositories product inventories

00:16:14,320 --> 00:16:17,680
and

00:16:14,560 --> 00:16:17,680
application deployments

00:16:17,759 --> 00:16:22,000
cluster repositories contains patches

00:16:19,839 --> 00:16:23,199
for different kind of resources it's

00:16:22,000 --> 00:16:25,519
mainly used

00:16:23,199 --> 00:16:27,680
to add cluster or environment context

00:16:25,519 --> 00:16:30,320
into the kubernetes resources

00:16:27,680 --> 00:16:31,839
for example based on the cluster stage

00:16:30,320 --> 00:16:34,560
an additional values 5 will be

00:16:31,839 --> 00:16:36,519
referenced from the argo cd application

00:16:34,560 --> 00:16:39,199
with this approach the same application

00:16:36,519 --> 00:16:42,240
deployment can be used to deploy to

00:16:39,199 --> 00:16:42,240
multiple stages

00:16:42,480 --> 00:16:45,759
the cluster repository has

00:16:46,880 --> 00:16:51,199
references to the production entries the

00:16:49,279 --> 00:16:52,880
references are built with customize

00:16:51,199 --> 00:16:54,560
to be able to patch the resources on

00:16:52,880 --> 00:16:56,720
cluster level

00:16:54,560 --> 00:16:58,240
this approach requires the cluster repo

00:16:56,720 --> 00:17:00,079
and the product label to be built is

00:16:58,240 --> 00:17:03,040
customized

00:17:00,079 --> 00:17:04,400
the cluster repo follows the app of apps

00:17:03,040 --> 00:17:06,400
pattern

00:17:04,400 --> 00:17:09,199
it creates an argo cd application for

00:17:06,400 --> 00:17:09,199
each product

00:17:12,079 --> 00:17:15,199
product repository is used to group a

00:17:14,000 --> 00:17:18,400
set of deployments

00:17:15,199 --> 00:17:21,120
and to empower the inventory owner

00:17:18,400 --> 00:17:22,079
to manage their own namespace where his

00:17:21,120 --> 00:17:25,679
applications

00:17:22,079 --> 00:17:28,240
will be deployed we provide a customized

00:17:25,679 --> 00:17:30,400
manifest which can be used to set up the

00:17:28,240 --> 00:17:33,600
namespace and all required resources

00:17:30,400 --> 00:17:36,880
around it the product repository

00:17:33,600 --> 00:17:39,120
follows as well the app of apps pattern

00:17:36,880 --> 00:17:41,840
to create arcade application for each

00:17:39,120 --> 00:17:41,840
micro service

00:17:42,559 --> 00:17:45,600
the application repository will deploy

00:17:44,160 --> 00:17:47,440
the application itself

00:17:45,600 --> 00:17:48,720
it's a plain obviously application so it

00:17:47,440 --> 00:17:53,039
will support

00:17:48,720 --> 00:17:55,039
any tool august itself supports

00:17:53,039 --> 00:17:56,640
some are create in our case some are

00:17:55,039 --> 00:18:00,080
created using customize

00:17:56,640 --> 00:18:02,000
for example targo cd deployment itself

00:18:00,080 --> 00:18:03,120
but most of the applications use a

00:18:02,000 --> 00:18:15,120
common helm chart

00:18:03,120 --> 00:18:16,960
maintained by our team

00:18:15,120 --> 00:18:19,919
this picture illustrates the connections

00:18:16,960 --> 00:18:22,480
between the cluster and the inventory

00:18:19,919 --> 00:18:24,000
we have the tools we as a team provide

00:18:22,480 --> 00:18:26,840
in multiple inventories

00:18:24,000 --> 00:18:29,679
which we can deploy independently on the

00:18:26,840 --> 00:18:33,760
cluster for example the city inventory

00:18:29,679 --> 00:18:36,000
which creates the namespace for rcd

00:18:33,760 --> 00:18:37,520
and obviously the application deployable

00:18:36,000 --> 00:18:42,080
cd is referenced

00:18:37,520 --> 00:18:43,919
on each cluster whereas the ci inventory

00:18:42,080 --> 00:18:46,160
which provides the ci pipelines to build

00:18:43,919 --> 00:18:49,120
images is just required on the

00:18:46,160 --> 00:18:49,120
management cluster

00:18:49,520 --> 00:18:53,360
this separation gives us the option to

00:18:51,280 --> 00:18:57,760
deploy inventory on

00:18:53,360 --> 00:19:01,679
multiple clusters or if required to move

00:18:57,760 --> 00:19:01,679
inventory to a new cluster

00:19:04,799 --> 00:19:08,240
the cluster repository contains

00:19:06,559 --> 00:19:11,840
different stages

00:19:08,240 --> 00:19:13,760
as folders and branches

00:19:11,840 --> 00:19:15,840
on each stage we point to the right

00:19:13,760 --> 00:19:18,240
folder branch combination

00:19:15,840 --> 00:19:19,280
for example on devil cluster only to

00:19:18,240 --> 00:19:22,320
fold the devil

00:19:19,280 --> 00:19:25,039
from the branch devil is referenced

00:19:22,320 --> 00:19:26,320
the same approach used for every cluster

00:19:25,039 --> 00:19:28,720
and stage

00:19:26,320 --> 00:19:30,559
our goal was to be able to make changes

00:19:28,720 --> 00:19:30,880
from the cluster without anybody needs

00:19:30,559 --> 00:19:32,799
to

00:19:30,880 --> 00:19:34,960
touch the cluster or update the revision

00:19:32,799 --> 00:19:36,880
in an application

00:19:34,960 --> 00:19:38,080
this is only possible if the root

00:19:36,880 --> 00:19:40,400
diagonal cd application

00:19:38,080 --> 00:19:42,080
points to a branch from the cluster

00:19:40,400 --> 00:19:42,720
repository we reference inventories

00:19:42,080 --> 00:19:45,919
either by

00:19:42,720 --> 00:19:45,919
branch or tag

00:19:46,960 --> 00:19:51,280
on lower stages like devil and test the

00:19:49,600 --> 00:19:54,799
inventory can be referenced by

00:19:51,280 --> 00:19:57,760
branches and on acceptance and throat

00:19:54,799 --> 00:19:58,799
only tags are allowed this makes makes

00:19:57,760 --> 00:20:01,360
it less that a prone

00:19:58,799 --> 00:20:02,880
is changes on the inventory can be

00:20:01,360 --> 00:20:06,080
tested from developed

00:20:02,880 --> 00:20:06,400
or master branches depends which branch

00:20:06,080 --> 00:20:10,000
is

00:20:06,400 --> 00:20:11,760
referenced using this folder branch

00:20:10,000 --> 00:20:13,840
combination

00:20:11,760 --> 00:20:16,000
allows the inventory owner to create the

00:20:13,840 --> 00:20:19,280
merge request to deploy

00:20:16,000 --> 00:20:21,919
inventory on a stage

00:20:19,280 --> 00:20:22,960
the brand ridge is used for the merchant

00:20:21,919 --> 00:20:25,360
quest will contain

00:20:22,960 --> 00:20:27,120
the changes for all stages and the

00:20:25,360 --> 00:20:28,720
separate match requests will be created

00:20:27,120 --> 00:20:30,799
per stage

00:20:28,720 --> 00:20:33,280
multiple iteration per stage are

00:20:30,799 --> 00:20:36,480
possible

00:20:33,280 --> 00:20:39,039
this means for release and auditable

00:20:36,480 --> 00:20:40,320
deployment of an inventory it requires a

00:20:39,039 --> 00:20:42,159
git tag

00:20:40,320 --> 00:20:44,400
and some merge requests on the cast

00:20:42,159 --> 00:20:44,799
repository to update the reference to

00:20:44,400 --> 00:20:49,840
the

00:20:44,799 --> 00:20:49,840
newly created git tag

00:20:51,760 --> 00:20:55,679
as we in our case we have a shared

00:20:54,080 --> 00:20:57,280
cluster

00:20:55,679 --> 00:21:00,320
every team must be able to deploy their

00:20:57,280 --> 00:21:01,679
own changes independent to others

00:21:00,320 --> 00:21:03,520
which means they will create match

00:21:01,679 --> 00:21:05,120
requests for inventories

00:21:03,520 --> 00:21:07,280
and then their inventory needs to be

00:21:05,120 --> 00:21:09,280
deployed

00:21:07,280 --> 00:21:12,320
some guidelines have to be followed

00:21:09,280 --> 00:21:12,320
otherwise the branches are

00:21:12,640 --> 00:21:16,960
otherwise the branches will not be

00:21:14,000 --> 00:21:18,080
mergeable as the whole process relies on

00:21:16,960 --> 00:21:21,039
git

00:21:18,080 --> 00:21:22,400
we can use git lock as our logbook we

00:21:21,039 --> 00:21:31,520
know it every time

00:21:22,400 --> 00:21:34,000
what is the state of the whole cluster

00:21:31,520 --> 00:21:35,280
the best thing about the whole githubs

00:21:34,000 --> 00:21:39,200
approach is

00:21:35,280 --> 00:21:42,240
all changes are stored in git it is

00:21:39,200 --> 00:21:44,080
auditable out of the box

00:21:42,240 --> 00:21:46,640
there's no need to build a process

00:21:44,080 --> 00:21:46,640
around it

00:21:47,360 --> 00:21:51,280
in our case there is a lack of

00:21:50,000 --> 00:21:54,559
automation

00:21:51,280 --> 00:21:57,120
so as we focused on the

00:21:54,559 --> 00:21:59,120
process and how to bring changes to

00:21:57,120 --> 00:22:02,960
production

00:21:59,120 --> 00:22:05,520
there's still some

00:22:02,960 --> 00:22:07,039
manual tasks to do it the text and the

00:22:05,520 --> 00:22:08,480
merge request needs to be created

00:22:07,039 --> 00:22:11,600
manually

00:22:08,480 --> 00:22:14,720
also multiple tags

00:22:11,600 --> 00:22:18,640
required are required to update

00:22:14,720 --> 00:22:18,640
if you update the docker image

00:22:18,960 --> 00:22:24,799
a lot of git branches and tags

00:22:22,400 --> 00:22:26,000
around it so you have multiple branches

00:22:24,799 --> 00:22:27,679
on the inventory

00:22:26,000 --> 00:22:29,280
you have multiple branches on the player

00:22:27,679 --> 00:22:32,400
repository

00:22:29,280 --> 00:22:35,360
on the build repo and so on so the same

00:22:32,400 --> 00:22:40,559
goes for the cluster repository

00:22:35,360 --> 00:22:40,559
next to the management complex

00:22:41,440 --> 00:22:46,000
i'm still not sure if this is the final

00:22:43,520 --> 00:22:46,000
solution

00:22:48,080 --> 00:22:53,840
important point is to start early and

00:22:51,280 --> 00:22:54,720
see the problems and to be able to

00:22:53,840 --> 00:22:58,480
adjust

00:22:54,720 --> 00:23:01,840
whether to adjust

00:22:58,480 --> 00:23:01,840
where it is required

00:23:05,520 --> 00:23:08,640
with this said we are on the end of the

00:23:07,679 --> 00:23:12,880
presentation

00:23:08,640 --> 00:23:17,679
so thanks for listening and

00:23:12,880 --> 00:23:17,679

YouTube URL: https://www.youtube.com/watch?v=hVY6K-1uCZo


