Title: GitOps: The Essential Kubernetes Workflow
Publication date: 2021-05-03
Playlist: GitOpsCon 2021
Description: 
	Kubernetes has gone from being a new container platform to the cornerstone of the hybrid cloud infrastructure for cloud-native applications. While the widespread adoption of Kubernetes has opened the door for many organizations that aspired to become more agile and responsive to change through DevOps practises, it has also surfaced the challenges of managing hybrid cloud infrastructure on-premises and on the public cloud. Building on DevOps principles, GitOps have become a clear path for many of the challenges these organizations face and provides actionable practices for addressing the complexities of managing Kubernetes and delivering applications on hybrid cloud infrastructure. 

Siamak Sadeghianfar, Product Manager for OpenShift GitOps at Red Hat, will walk you through the Kubernetes journey and how GitOps has become an essential part of Kubernetes operations. He will further discuss the importance of GitOps Working Group in CNCF and how it aligns with the cloud-native landscape.
Captions: 
	00:00:00,160 --> 00:00:04,880
uh ladies and gentlemen uh folks i would

00:00:02,879 --> 00:00:08,160
like to introduce you to

00:00:04,880 --> 00:00:09,840
uh one of my favorite pms at red hat

00:00:08,160 --> 00:00:11,120
uh they're all my favorite pms by the

00:00:09,840 --> 00:00:11,599
way don't don't feel special see you

00:00:11,120 --> 00:00:15,280
much

00:00:11,599 --> 00:00:18,720
uh but siamak uh sedekienfar

00:00:15,280 --> 00:00:20,640
is definitely here to bring some get ops

00:00:18,720 --> 00:00:21,920
the essential kubernetes workflow is the

00:00:20,640 --> 00:00:23,119
title of his talk he's definitely going

00:00:21,920 --> 00:00:24,560
to talk about

00:00:23,119 --> 00:00:26,960
some of these questions we have asked

00:00:24,560 --> 00:00:30,480
here in the q a about like

00:00:26,960 --> 00:00:33,040
promotion uh convergence and

00:00:30,480 --> 00:00:34,640
you know kind of the the way the flow

00:00:33,040 --> 00:00:38,079
should work for get up so

00:00:34,640 --> 00:00:40,320
cmoc um if you want to

00:00:38,079 --> 00:00:42,320
start sharing your screen let me turn

00:00:40,320 --> 00:00:43,360
off cornelia's oh i can't turn off

00:00:42,320 --> 00:00:46,960
cornelius

00:00:43,360 --> 00:00:48,559
oh fun oh cornelie just left but her

00:00:46,960 --> 00:00:51,760
slides are still there

00:00:48,559 --> 00:00:55,039
um weird there we go

00:00:51,760 --> 00:00:58,399
okay so cmoc you see

00:00:55,039 --> 00:01:01,440
the uh share slides button there

00:00:58,399 --> 00:01:03,359
there we go all right see you mark

00:01:01,440 --> 00:01:05,040
please introduce yourself to the world

00:01:03,359 --> 00:01:08,000
and let them know what you do here

00:01:05,040 --> 00:01:09,520
at red hat and uh forget ops in general

00:01:08,000 --> 00:01:12,479
thank you

00:01:09,520 --> 00:01:14,240
sure thing and uh hi everyone uh welcome

00:01:12,479 --> 00:01:15,200
to the first git ops con i'm really

00:01:14,240 --> 00:01:17,920
excited to be

00:01:15,200 --> 00:01:19,280
uh part of uh like the the starting

00:01:17,920 --> 00:01:20,960
keynotes

00:01:19,280 --> 00:01:22,799
talk a little bit about git ops it was

00:01:20,960 --> 00:01:24,799
wonderful listening to cornelia as well

00:01:22,799 --> 00:01:26,320
made a little bit easier for me i can

00:01:24,799 --> 00:01:28,720
jump over some of the

00:01:26,320 --> 00:01:29,759
uh like definitions and concept that you

00:01:28,720 --> 00:01:32,400
have already heard

00:01:29,759 --> 00:01:33,840
from cornelia i'm ceo maxada granfer

00:01:32,400 --> 00:01:37,280
product manager at

00:01:33,840 --> 00:01:40,799
red hat as a part of the openshift team

00:01:37,280 --> 00:01:44,079
and i today i want to talk to you about

00:01:40,799 --> 00:01:45,920
git ops and how it uh fits the

00:01:44,079 --> 00:01:47,600
kubernetes model why does it even fit

00:01:45,920 --> 00:01:49,520
the kubernetes model so there are a lot

00:01:47,600 --> 00:01:52,159
of similarities that we see and

00:01:49,520 --> 00:01:54,159
uh through the talks we have become with

00:01:52,159 --> 00:01:55,840
the conversation i have with customers

00:01:54,159 --> 00:01:57,840
i want to talk about some of those

00:01:55,840 --> 00:02:00,159
findings that uh that come to the

00:01:57,840 --> 00:02:00,159
surface

00:02:00,320 --> 00:02:03,520
um but it feel like you're if you're at

00:02:02,880 --> 00:02:06,240
kubecon

00:02:03,520 --> 00:02:07,600
in like this week so you're familiar

00:02:06,240 --> 00:02:08,080
with kubernetes is one of the main

00:02:07,600 --> 00:02:11,760
projects

00:02:08,080 --> 00:02:13,360
part of cncf and it is a container

00:02:11,760 --> 00:02:15,120
platform container orchestration tool

00:02:13,360 --> 00:02:15,840
but what if you think of what it really

00:02:15,120 --> 00:02:18,879
really does

00:02:15,840 --> 00:02:20,400
for us uh it's a waste a declarative

00:02:18,879 --> 00:02:22,160
declarative approach to

00:02:20,400 --> 00:02:23,760
infrastructure so that was really the

00:02:22,160 --> 00:02:25,599
key of how communities

00:02:23,760 --> 00:02:28,000
changed the way we look at

00:02:25,599 --> 00:02:30,000
infrastructure so we used to

00:02:28,000 --> 00:02:31,760
when i when we wanted a piece of

00:02:30,000 --> 00:02:32,560
infrastructure for deploying application

00:02:31,760 --> 00:02:35,680
for example

00:02:32,560 --> 00:02:38,400
we used to open a ticket perhaps

00:02:35,680 --> 00:02:40,480
for a vm to be requested a vm gets

00:02:38,400 --> 00:02:41,760
created and handed over to the next team

00:02:40,480 --> 00:02:43,599
to

00:02:41,760 --> 00:02:45,519
assign network to it and the next team

00:02:43,599 --> 00:02:47,120
to assign storage to it and so on and so

00:02:45,519 --> 00:02:50,239
on maybe after

00:02:47,120 --> 00:02:52,400
a week in the best case or six

00:02:50,239 --> 00:02:53,840
in the worst case uh you would get that

00:02:52,400 --> 00:02:56,560
infrastructure ready for you

00:02:53,840 --> 00:02:57,599
to um to to be able to deploy your apps

00:02:56,560 --> 00:03:00,000
on it and

00:02:57,599 --> 00:03:01,680
the second time you do that what you get

00:03:00,000 --> 00:03:02,800
is probably a little bit different from

00:03:01,680 --> 00:03:06,239
the previous vm

00:03:02,800 --> 00:03:09,519
you got what kubernetes did for us

00:03:06,239 --> 00:03:12,000
was that it it turned that approach into

00:03:09,519 --> 00:03:15,440
a declarative one which means that

00:03:12,000 --> 00:03:16,879
you describe what you want in case of

00:03:15,440 --> 00:03:20,959
kubernetes

00:03:16,879 --> 00:03:23,920
that's in form of a yama document

00:03:20,959 --> 00:03:25,360
or json perhaps so that's your desire to

00:03:23,920 --> 00:03:26,799
say what you expect

00:03:25,360 --> 00:03:28,959
you give that to kubernetes and

00:03:26,799 --> 00:03:31,760
kubernetes actualizes that so

00:03:28,959 --> 00:03:32,239
makes that a reality and brings that up

00:03:31,760 --> 00:03:34,720
for you

00:03:32,239 --> 00:03:35,920
it creates that in form of pods and

00:03:34,720 --> 00:03:38,080
networking gives an

00:03:35,920 --> 00:03:40,720
ip and perhaps some pieces of storage

00:03:38,080 --> 00:03:43,519
and convertible balancer and so on and

00:03:40,720 --> 00:03:45,840
uh gives brings the current states to

00:03:43,519 --> 00:03:46,080
what you had desired so this this model

00:03:45,840 --> 00:03:49,200
of

00:03:46,080 --> 00:03:52,159
operating infrastructure has been

00:03:49,200 --> 00:03:53,519
a huge enabler for a lot of the

00:03:52,159 --> 00:03:56,799
organizations

00:03:53,519 --> 00:03:58,480
that wanted to become a lot faster to be

00:03:56,799 --> 00:04:01,040
able to

00:03:58,480 --> 00:04:03,040
deliver applications faster like this is

00:04:01,040 --> 00:04:03,840
not directly related to application but

00:04:03,040 --> 00:04:05,519
in order to

00:04:03,840 --> 00:04:06,959
deliver application you have to have the

00:04:05,519 --> 00:04:08,400
infrastructure in place

00:04:06,959 --> 00:04:10,239
so that has been this level of

00:04:08,400 --> 00:04:11,599
automation that kubernetes provided is

00:04:10,239 --> 00:04:13,760
something that

00:04:11,599 --> 00:04:15,760
has been extremely difficult to this

00:04:13,760 --> 00:04:18,000
level to achieve

00:04:15,760 --> 00:04:18,880
for many of the organizations public

00:04:18,000 --> 00:04:20,400
cloud

00:04:18,880 --> 00:04:22,079
we're the only one basically the

00:04:20,400 --> 00:04:23,600
providers that could provide this level

00:04:22,079 --> 00:04:25,440
of automation and kubernetes really

00:04:23,600 --> 00:04:27,120
democratize democratize

00:04:25,440 --> 00:04:29,360
that that type of automation so you

00:04:27,120 --> 00:04:30,160
could everyone on any type of

00:04:29,360 --> 00:04:34,080
infrastructure

00:04:30,160 --> 00:04:36,160
if you're running on your own vms on

00:04:34,080 --> 00:04:39,360
vmware or openstack or

00:04:36,160 --> 00:04:41,120
red hat virtualization or on on physical

00:04:39,360 --> 00:04:43,199
server bare metal you could still have

00:04:41,120 --> 00:04:43,919
the same type of declarative approach

00:04:43,199 --> 00:04:46,960
and

00:04:43,919 --> 00:04:48,400
um rapid way of getting access to

00:04:46,960 --> 00:04:49,199
infrastructure and especially this

00:04:48,400 --> 00:04:51,520
opened the door

00:04:49,199 --> 00:04:53,199
for many of the sales service managers

00:04:51,520 --> 00:04:55,680
that we see

00:04:53,199 --> 00:04:56,639
organizations do today that they allow

00:04:55,680 --> 00:04:58,160
the dev team

00:04:56,639 --> 00:04:59,919
themselves request what they want and

00:04:58,160 --> 00:05:01,840
this is immediately provisioned for them

00:04:59,919 --> 00:05:04,479
not through a ticket that goes to a team

00:05:01,840 --> 00:05:07,120
in the next team and next team and so on

00:05:04,479 --> 00:05:08,080
and because of this level of actual

00:05:07,120 --> 00:05:11,120
agility that

00:05:08,080 --> 00:05:13,840
kubernetes provided for infrastructure

00:05:11,120 --> 00:05:14,960
and we see a huge surge in adoption of

00:05:13,840 --> 00:05:18,240
kubernetes

00:05:14,960 --> 00:05:20,479
so 83 percent of respondents

00:05:18,240 --> 00:05:22,479
in the survey that cncf did last year

00:05:20,479 --> 00:05:23,360
since cf every year does does a survey

00:05:22,479 --> 00:05:26,720
about the state of

00:05:23,360 --> 00:05:27,360
various projects cncf and 83 responded

00:05:26,720 --> 00:05:29,680
that they are

00:05:27,360 --> 00:05:31,600
already running kubernetes in production

00:05:29,680 --> 00:05:32,240
and even a larger number they're running

00:05:31,600 --> 00:05:34,639
in

00:05:32,240 --> 00:05:35,919
pre-production but 83 is where they're

00:05:34,639 --> 00:05:39,199
running it in

00:05:35,919 --> 00:05:40,400
production and in the same survey you

00:05:39,199 --> 00:05:42,400
also can see

00:05:40,400 --> 00:05:44,320
at the number of cluster the breakdown

00:05:42,400 --> 00:05:45,759
of how many clusters

00:05:44,320 --> 00:05:47,759
those respondents are running and you

00:05:45,759 --> 00:05:49,280
can see the increase in the number of

00:05:47,759 --> 00:05:51,919
clusters

00:05:49,280 --> 00:05:52,880
per organization so organizations are

00:05:51,919 --> 00:05:54,720
becoming

00:05:52,880 --> 00:05:55,919
more and more mature more and more

00:05:54,720 --> 00:05:59,520
comfortable

00:05:55,919 --> 00:05:59,919
operating kubernetes platforms and they

00:05:59,520 --> 00:06:01,840
are

00:05:59,919 --> 00:06:02,960
moving to direction that instead of

00:06:01,840 --> 00:06:04,960
having

00:06:02,960 --> 00:06:06,240
one or two clusters they have five or

00:06:04,960 --> 00:06:09,280
ten or twenty or fifty

00:06:06,240 --> 00:06:11,440
we talk to customers that

00:06:09,280 --> 00:06:12,960
uh talk about having a single cluster

00:06:11,440 --> 00:06:15,440
for every team because

00:06:12,960 --> 00:06:17,039
they are very confident and capable in

00:06:15,440 --> 00:06:17,680
operating kubernetes as a platform they

00:06:17,039 --> 00:06:20,479
provision

00:06:17,680 --> 00:06:22,080
one for the team and uh in that that

00:06:20,479 --> 00:06:23,120
team is owner of that kubernetes

00:06:22,080 --> 00:06:26,240
platform

00:06:23,120 --> 00:06:27,919
so this address the agility that we

00:06:26,240 --> 00:06:28,960
needed the infrastructure level made it

00:06:27,919 --> 00:06:32,639
really simple

00:06:28,960 --> 00:06:34,960
for developers dev team to get access

00:06:32,639 --> 00:06:35,840
quickly as much as they need as quick as

00:06:34,960 --> 00:06:39,360
they need

00:06:35,840 --> 00:06:42,000
to infrastructure and with that

00:06:39,360 --> 00:06:44,960
come however a number of complexities

00:06:42,000 --> 00:06:47,680
and and issues for us as well because

00:06:44,960 --> 00:06:48,000
it we we have a very easy time to get

00:06:47,680 --> 00:06:50,080
access

00:06:48,000 --> 00:06:52,240
to the clusters to to infrastructure

00:06:50,080 --> 00:06:53,919
capacity to compute to memory and so on

00:06:52,240 --> 00:06:56,000
in a self-service manner

00:06:53,919 --> 00:06:57,199
but now instead of that traditional

00:06:56,000 --> 00:06:59,120
model of

00:06:57,199 --> 00:07:00,720
the organization having two production

00:06:59,120 --> 00:07:01,680
environments the production environment

00:07:00,720 --> 00:07:04,960
might be

00:07:01,680 --> 00:07:07,120
20 different kubernetes clusters perhaps

00:07:04,960 --> 00:07:08,400
across multiple infrastructure as well

00:07:07,120 --> 00:07:10,319
some of this might be on

00:07:08,400 --> 00:07:12,160
on the public cloud and manage

00:07:10,319 --> 00:07:14,160
kubernetes instances some of them might

00:07:12,160 --> 00:07:16,240
be on premises an openshift

00:07:14,160 --> 00:07:17,599
platform or an shift on public clouds or

00:07:16,240 --> 00:07:19,759
a combination of this

00:07:17,599 --> 00:07:21,280
so they don't always look alike there

00:07:19,759 --> 00:07:23,199
are different phases or flavors of

00:07:21,280 --> 00:07:26,240
kubernetes as a part of this fleet that

00:07:23,199 --> 00:07:28,639
application needs to get deployed to and

00:07:26,240 --> 00:07:30,160
these clusters also have a highly

00:07:28,639 --> 00:07:32,639
dynamic nature in

00:07:30,160 --> 00:07:35,039
in some of the organizations i talked to

00:07:32,639 --> 00:07:37,680
a customer that has

00:07:35,039 --> 00:07:39,360
been deploying kubernetes for multiple

00:07:37,680 --> 00:07:42,400
years now

00:07:39,360 --> 00:07:44,560
within the travel industry and for them

00:07:42,400 --> 00:07:46,639
that nine clusters that you see on the

00:07:44,560 --> 00:07:48,240
slide if you ask them which nine cluster

00:07:46,639 --> 00:07:49,120
they are for the production of this

00:07:48,240 --> 00:07:50,639
application

00:07:49,120 --> 00:07:52,560
every week the answer is different

00:07:50,639 --> 00:07:54,160
because the clusters they have

00:07:52,560 --> 00:07:56,080
their production clusters are very

00:07:54,160 --> 00:07:57,680
short-lived so you

00:07:56,080 --> 00:07:59,120
this this week there are one nine

00:07:57,680 --> 00:08:00,800
cluster and next week there are a

00:07:59,120 --> 00:08:02,560
different nine cluster some of them have

00:08:00,800 --> 00:08:04,319
died and some new clusters are

00:08:02,560 --> 00:08:05,599
have joined the the production group of

00:08:04,319 --> 00:08:07,919
that application

00:08:05,599 --> 00:08:10,400
so how do we manage delivering

00:08:07,919 --> 00:08:13,039
application to such a dynamic

00:08:10,400 --> 00:08:14,000
infrastructure it it becomes much more

00:08:13,039 --> 00:08:16,800
difficult

00:08:14,000 --> 00:08:17,280
to make sure that application first of

00:08:16,800 --> 00:08:20,400
all

00:08:17,280 --> 00:08:21,360
is on all those clusters and if it is

00:08:20,400 --> 00:08:24,000
deployed

00:08:21,360 --> 00:08:24,639
it is uh in in the state that you want

00:08:24,000 --> 00:08:27,280
it to be there

00:08:24,639 --> 00:08:28,800
they have a consistent way to configure

00:08:27,280 --> 00:08:31,680
all this application and once you

00:08:28,800 --> 00:08:32,159
deploy them afterwards uh to make sure

00:08:31,680 --> 00:08:33,680
that

00:08:32,159 --> 00:08:35,120
the application is still on all this

00:08:33,680 --> 00:08:36,719
cluster one of them hasn't died or

00:08:35,120 --> 00:08:37,680
hasn't run into an issue that you're not

00:08:36,719 --> 00:08:40,240
aware of so

00:08:37,680 --> 00:08:43,120
with more clusters we get a lot of

00:08:40,240 --> 00:08:44,399
agility at the infrastructure level

00:08:43,120 --> 00:08:46,880
but at the same time we get more

00:08:44,399 --> 00:08:48,320
complexity of how deployment application

00:08:46,880 --> 00:08:50,320
how how do we how do we manage

00:08:48,320 --> 00:08:52,959
deployments of application

00:08:50,320 --> 00:08:53,600
and if you remember devops started to

00:08:52,959 --> 00:08:55,920
becoming

00:08:53,600 --> 00:08:58,399
extremely popular about the same time

00:08:55,920 --> 00:09:00,399
when containers and kubernetes

00:08:58,399 --> 00:09:01,839
broke out in popularity a couple of

00:09:00,399 --> 00:09:04,399
years back and automation

00:09:01,839 --> 00:09:06,240
is one of the center pieces of devops

00:09:04,399 --> 00:09:08,560
practices devops itself

00:09:06,240 --> 00:09:10,640
is of course much more than just

00:09:08,560 --> 00:09:11,600
automation and and practices it has a

00:09:10,640 --> 00:09:14,640
lot of focus

00:09:11,600 --> 00:09:18,080
on the cultural shift of a more

00:09:14,640 --> 00:09:19,920
collaborative way and uh workflows for

00:09:18,080 --> 00:09:22,800
working with various roles that are

00:09:19,920 --> 00:09:25,519
involved in delivering software and

00:09:22,800 --> 00:09:27,600
beyond just itops and developers that

00:09:25,519 --> 00:09:28,640
traditionally we talk about in in the in

00:09:27,600 --> 00:09:31,040
the devops

00:09:28,640 --> 00:09:32,000
space but in addition to that there are

00:09:31,040 --> 00:09:34,399
application

00:09:32,000 --> 00:09:35,920
operations the security and the qe there

00:09:34,399 --> 00:09:37,760
are every role essentially that is

00:09:35,920 --> 00:09:39,680
involved in the delivery process

00:09:37,760 --> 00:09:41,440
to work collaboratively toward

00:09:39,680 --> 00:09:43,519
delivering applications so

00:09:41,440 --> 00:09:46,320
the the cultural bits are there but

00:09:43,519 --> 00:09:49,600
automation as a practice in devops

00:09:46,320 --> 00:09:51,200
has been a a key in addressing the

00:09:49,600 --> 00:09:53,040
challenges of

00:09:51,200 --> 00:09:54,959
multi-cluster deployment when we have

00:09:53,040 --> 00:09:57,120
more complex environments

00:09:54,959 --> 00:09:58,399
multiple production environments across

00:09:57,120 --> 00:10:00,800
multiple cloud perhaps

00:09:58,399 --> 00:10:02,959
and automating the delivery process has

00:10:00,800 --> 00:10:04,720
been extremely helpful for

00:10:02,959 --> 00:10:07,360
many of the organizations to be able to

00:10:04,720 --> 00:10:09,920
address the comp this complexity and

00:10:07,360 --> 00:10:10,800
this automation in devos space manifests

00:10:09,920 --> 00:10:12,880
itself

00:10:10,800 --> 00:10:14,320
within the ci cd practice the continuous

00:10:12,880 --> 00:10:15,839
integration and continues

00:10:14,320 --> 00:10:18,240
delivery we heard a little bit about

00:10:15,839 --> 00:10:19,760
that from cornelia as well

00:10:18,240 --> 00:10:21,680
to put it in simple terms that's

00:10:19,760 --> 00:10:22,079
essentially automating every step of the

00:10:21,680 --> 00:10:25,040
way

00:10:22,079 --> 00:10:26,959
from when you make a change in your code

00:10:25,040 --> 00:10:29,040
of the application or the configuration

00:10:26,959 --> 00:10:29,760
of application until all the way it goes

00:10:29,040 --> 00:10:31,360
into

00:10:29,760 --> 00:10:33,279
into production and and you hear

00:10:31,360 --> 00:10:36,880
different terms to refer to this

00:10:33,279 --> 00:10:38,399
this flow from ci to continuous delivery

00:10:36,880 --> 00:10:40,079
and continuous deployment and they have

00:10:38,399 --> 00:10:42,240
slight differences i'm not going to

00:10:40,079 --> 00:10:44,079
get too detail onto that but one point i

00:10:42,240 --> 00:10:46,399
want to mention out is here is that

00:10:44,079 --> 00:10:48,240
even within the ci cd we see a maturity

00:10:46,399 --> 00:10:49,040
that is increasing over the last couple

00:10:48,240 --> 00:10:51,920
of years

00:10:49,040 --> 00:10:53,519
so if you go back when when devops

00:10:51,920 --> 00:10:56,959
started to become a little bit

00:10:53,519 --> 00:11:00,000
um hyped um ci cd was

00:10:56,959 --> 00:11:02,079
spoken a lot as one thing and many

00:11:00,000 --> 00:11:05,040
of the tools that existed in the in data

00:11:02,079 --> 00:11:08,160
space also they were called ci cd tools

00:11:05,040 --> 00:11:11,120
and with ci nation focus really

00:11:08,160 --> 00:11:13,040
a lot more on a change that is made on

00:11:11,120 --> 00:11:13,760
the application to everything that needs

00:11:13,040 --> 00:11:17,200
to happen until

00:11:13,760 --> 00:11:20,480
application is released and cd although

00:11:17,200 --> 00:11:22,640
conceptually is the entire process but

00:11:20,480 --> 00:11:24,560
we often use it to refer to that

00:11:22,640 --> 00:11:26,000
deployment stage the last steps that

00:11:24,560 --> 00:11:27,120
after release how do you deliver the

00:11:26,000 --> 00:11:29,920
application across

00:11:27,120 --> 00:11:30,800
the environments that it has so in the

00:11:29,920 --> 00:11:33,040
beginning we were

00:11:30,800 --> 00:11:35,360
smooshing these two into into one term

00:11:33,040 --> 00:11:36,320
as one set of technology one set of

00:11:35,360 --> 00:11:39,839
tools so

00:11:36,320 --> 00:11:41,600
you uh you see a lot of teams that have

00:11:39,839 --> 00:11:44,079
jenkins for example that is

00:11:41,600 --> 00:11:46,399
doing the entire ci cd for them more

00:11:44,079 --> 00:11:49,680
recently over the last 12 months

00:11:46,399 --> 00:11:52,560
we started to see both

00:11:49,680 --> 00:11:54,240
workflows challenges on the customer

00:11:52,560 --> 00:11:56,480
side and tooling that

00:11:54,240 --> 00:11:58,639
separate these two concepts as

00:11:56,480 --> 00:11:59,600
individual practices separate practices

00:11:58,639 --> 00:12:01,600
that they have

00:11:59,600 --> 00:12:04,320
their own requirements their own needs

00:12:01,600 --> 00:12:07,440
and behave differently so cci became

00:12:04,320 --> 00:12:08,240
becomes its own segment and there are a

00:12:07,440 --> 00:12:09,920
lot of

00:12:08,240 --> 00:12:11,360
really useful ci tools out there

00:12:09,920 --> 00:12:14,320
drinking as i mentioned all right

00:12:11,360 --> 00:12:16,320
already there's github actions uh get

00:12:14,320 --> 00:12:17,040
that pipelines takedown and other tools

00:12:16,320 --> 00:12:20,480
as well

00:12:17,040 --> 00:12:21,200
and cd became in a space of its own with

00:12:20,480 --> 00:12:24,639
tools that

00:12:21,200 --> 00:12:26,720
are more focused or exclusively focused

00:12:24,639 --> 00:12:28,160
on on the deployment phase on the

00:12:26,720 --> 00:12:30,959
challenges of

00:12:28,160 --> 00:12:31,839
delivering an application into many

00:12:30,959 --> 00:12:33,600
environments

00:12:31,839 --> 00:12:35,360
a combination of kubernetes and

00:12:33,600 --> 00:12:36,800
traditional infrastructure or with

00:12:35,360 --> 00:12:39,279
serverless and and

00:12:36,800 --> 00:12:40,480
functions and so on but deployment being

00:12:39,279 --> 00:12:42,160
the prominent

00:12:40,480 --> 00:12:44,000
praxis there they don't solve really the

00:12:42,160 --> 00:12:45,760
ci part and you can see

00:12:44,000 --> 00:12:48,000
a lot of tools appearing both within

00:12:45,760 --> 00:12:48,639
cncf and outside within that part as

00:12:48,000 --> 00:12:51,680
well

00:12:48,639 --> 00:12:52,079
uh like fox that was mentioned a little

00:12:51,680 --> 00:12:54,560
bit

00:12:52,079 --> 00:12:56,639
uh argo cd felitan and other tools

00:12:54,560 --> 00:12:57,680
appearing here so we see this separation

00:12:56,639 --> 00:13:00,000
that

00:12:57,680 --> 00:13:01,200
is happening in in this space and there

00:13:00,000 --> 00:13:02,800
is a good reason for that is the

00:13:01,200 --> 00:13:04,720
maturity is increasing so we are

00:13:02,800 --> 00:13:05,440
recognizing more needs in the deployment

00:13:04,720 --> 00:13:07,200
phase

00:13:05,440 --> 00:13:09,120
that specifically addressed that

00:13:07,200 --> 00:13:12,240
multi-cluster deployment challenge

00:13:09,120 --> 00:13:13,760
uh that we have but what does githubs

00:13:12,240 --> 00:13:15,360
have to do with all of this i'm not

00:13:13,760 --> 00:13:16,160
going to spend too much time on defining

00:13:15,360 --> 00:13:18,480
gitas we

00:13:16,160 --> 00:13:19,360
already heard about that but githubs is

00:13:18,480 --> 00:13:22,720
really

00:13:19,360 --> 00:13:25,360
a descriptive way of

00:13:22,720 --> 00:13:26,079
doing ci cd so it's really nothing

00:13:25,360 --> 00:13:28,160
beyond

00:13:26,079 --> 00:13:29,440
ci cg or beyond the devops devops of

00:13:28,160 --> 00:13:32,800
space it's a very

00:13:29,440 --> 00:13:34,639
prescriptive way of performing ci cd

00:13:32,800 --> 00:13:37,360
within the devops practices we talked

00:13:34,639 --> 00:13:40,560
conceptually about what cis

00:13:37,360 --> 00:13:42,880
the specific process um in mind

00:13:40,560 --> 00:13:43,839
a specific workflow and a specific

00:13:42,880 --> 00:13:46,560
tooling git

00:13:43,839 --> 00:13:48,000
is already mentioned in it in it or it's

00:13:46,560 --> 00:13:49,199
mostly centered on git

00:13:48,000 --> 00:13:51,600
although it could be other version

00:13:49,199 --> 00:13:53,440
controls but the tooling is becomes as

00:13:51,600 --> 00:13:56,320
part of that description of how

00:13:53,440 --> 00:13:58,000
how it uh it works so you have uh you

00:13:56,320 --> 00:13:59,680
define everything about your application

00:13:58,000 --> 00:14:01,279
and infrastructure as code everything

00:13:59,680 --> 00:14:02,240
declarative similar to how we talked

00:14:01,279 --> 00:14:04,800
about kubernetes

00:14:02,240 --> 00:14:05,360
all of that goes to one or multiple git

00:14:04,800 --> 00:14:07,760
repos

00:14:05,360 --> 00:14:09,360
as the source of truth and you drive the

00:14:07,760 --> 00:14:12,240
operations of your

00:14:09,360 --> 00:14:14,320
infrastructure and application through

00:14:12,240 --> 00:14:17,519
git operations

00:14:14,320 --> 00:14:19,519
so you might be thinking this is

00:14:17,519 --> 00:14:21,519
nothing really new uh how come this has

00:14:19,519 --> 00:14:24,000
a new name we have been doing this for

00:14:21,519 --> 00:14:25,839
years for for developing software and

00:14:24,000 --> 00:14:29,440
you're absolutely right so

00:14:25,839 --> 00:14:33,519
um the concept itself is not really

00:14:29,440 --> 00:14:35,199
anything new uh using git or source uh

00:14:33,519 --> 00:14:36,880
version control system as a single

00:14:35,199 --> 00:14:38,000
source of truth uh

00:14:36,880 --> 00:14:39,920
we have been doing that in the

00:14:38,000 --> 00:14:43,600
development space for uh

00:14:39,920 --> 00:14:46,480
for ages really so for the dev teams

00:14:43,600 --> 00:14:48,399
this is the only way to to operate there

00:14:46,480 --> 00:14:50,399
is a git report that contains the source

00:14:48,399 --> 00:14:53,120
code of the application and

00:14:50,399 --> 00:14:54,000
uh anything any forms of that

00:14:53,120 --> 00:14:56,880
application that

00:14:54,000 --> 00:14:58,560
exists anywhere it is guaranteed that is

00:14:56,880 --> 00:15:00,160
coming from that single source of truth

00:14:58,560 --> 00:15:00,959
from that source code that exists in

00:15:00,160 --> 00:15:03,839
that

00:15:00,959 --> 00:15:04,880
single or multiple git repose and all

00:15:03,839 --> 00:15:07,760
changes go

00:15:04,880 --> 00:15:09,920
go there and that's really the center of

00:15:07,760 --> 00:15:12,000
collaboration between all developers so

00:15:09,920 --> 00:15:13,920
the idea of git ups is not really

00:15:12,000 --> 00:15:16,959
inventing a new workflow

00:15:13,920 --> 00:15:20,000
it's rather expanding the use of

00:15:16,959 --> 00:15:22,480
an a very familiar workflow that already

00:15:20,000 --> 00:15:24,959
exists in in most organizations

00:15:22,480 --> 00:15:26,320
to reuse that workflow to drive

00:15:24,959 --> 00:15:28,800
operations as well

00:15:26,320 --> 00:15:29,600
uh infrastructure application operate

00:15:28,800 --> 00:15:31,759
operation to

00:15:29,600 --> 00:15:33,519
to expand that workflow to beyond the

00:15:31,759 --> 00:15:35,600
just development teams and access to

00:15:33,519 --> 00:15:38,480
organization to it ops and app

00:15:35,600 --> 00:15:38,480
application ops

00:15:38,720 --> 00:15:42,160
and you might again think be thinking

00:15:40,959 --> 00:15:44,320
that even

00:15:42,160 --> 00:15:45,279
that part of the story is not that new

00:15:44,320 --> 00:15:47,199
you

00:15:45,279 --> 00:15:49,600
chef has been around for a long time

00:15:47,199 --> 00:15:51,199
puppet and ansible and salt stack and

00:15:49,600 --> 00:15:53,519
there are variations of that and

00:15:51,199 --> 00:15:55,360
and terraform so there are a lot of

00:15:53,519 --> 00:15:57,360
popular infrastructure focused

00:15:55,360 --> 00:15:58,639
declarative manners also that have been

00:15:57,360 --> 00:16:01,440
in place and

00:15:58,639 --> 00:16:02,320
you uh have to put those manifests

00:16:01,440 --> 00:16:04,399
somewhere and

00:16:02,320 --> 00:16:06,079
most likely have been put them in it and

00:16:04,399 --> 00:16:06,880
drive them from there so that is also

00:16:06,079 --> 00:16:09,279
true

00:16:06,880 --> 00:16:10,480
and but that that essentially

00:16:09,279 --> 00:16:13,360
strengthens strength

00:16:10,480 --> 00:16:13,600
this thought that with git ops is really

00:16:13,360 --> 00:16:16,880
a

00:16:13,600 --> 00:16:18,880
collection of practices and ways of

00:16:16,880 --> 00:16:21,680
working that have been in place

00:16:18,880 --> 00:16:22,000
for a long time but they were disjoint

00:16:21,680 --> 00:16:24,399
they

00:16:22,000 --> 00:16:26,639
they were applied surgically to part of

00:16:24,399 --> 00:16:29,040
the workflow of application delivery

00:16:26,639 --> 00:16:31,120
with git ops we we have a descriptive

00:16:29,040 --> 00:16:32,800
way of ci cd that really looks at

00:16:31,120 --> 00:16:35,360
application delivery in an end-to-end

00:16:32,800 --> 00:16:37,680
manner and and gives proposes away

00:16:35,360 --> 00:16:38,800
that all the way from change to

00:16:37,680 --> 00:16:40,240
production

00:16:38,800 --> 00:16:42,240
no matter how many clusters or

00:16:40,240 --> 00:16:42,880
environments that is it gives a way to

00:16:42,240 --> 00:16:44,639
really

00:16:42,880 --> 00:16:46,560
tie that all together and a way of

00:16:44,639 --> 00:16:48,959
working across different roles and

00:16:46,560 --> 00:16:51,519
it gets me at the center piece of this

00:16:48,959 --> 00:16:53,759
way you're working

00:16:51,519 --> 00:16:55,279
so with the github's workflow i would

00:16:53,759 --> 00:16:56,800
call it declarative approach to

00:16:55,279 --> 00:16:58,160
application delivery as opposed to

00:16:56,800 --> 00:17:00,320
kubernetes that was a

00:16:58,160 --> 00:17:01,440
declarative approach to infrastructure

00:17:00,320 --> 00:17:04,000
you

00:17:01,440 --> 00:17:05,360
define what you need what you want in a

00:17:04,000 --> 00:17:07,120
git repo

00:17:05,360 --> 00:17:09,199
whatever format that that is suitable

00:17:07,120 --> 00:17:11,120
for that if your kubernetes were talking

00:17:09,199 --> 00:17:12,559
so this would be yaml manifest and other

00:17:11,120 --> 00:17:14,400
configuration related to that your

00:17:12,559 --> 00:17:17,120
desired state

00:17:14,400 --> 00:17:18,640
there is a git ops tool in the middle

00:17:17,120 --> 00:17:21,600
that is actualizes your

00:17:18,640 --> 00:17:23,760
your continuous delivery flow and make

00:17:21,600 --> 00:17:25,600
that a reality on those target clusters

00:17:23,760 --> 00:17:27,360
so it brings those clusters

00:17:25,600 --> 00:17:28,799
to the target state of the application

00:17:27,360 --> 00:17:29,039
that you want deploys the application

00:17:28,799 --> 00:17:31,520
all

00:17:29,039 --> 00:17:33,200
those number of clusters and and compare

00:17:31,520 --> 00:17:34,559
the states there to make sure that it

00:17:33,200 --> 00:17:38,000
matches what you have

00:17:34,559 --> 00:17:40,000
uh in in git and

00:17:38,000 --> 00:17:41,600
why do we though proposing the gita why

00:17:40,000 --> 00:17:44,640
what's the value of doing

00:17:41,600 --> 00:17:47,520
githubs compared to how we traditionally

00:17:44,640 --> 00:17:49,280
deploy applications which in in a lot of

00:17:47,520 --> 00:17:51,360
organization is stretching the ci

00:17:49,280 --> 00:17:53,039
process for deployment

00:17:51,360 --> 00:17:54,480
the first value we already talked about

00:17:53,039 --> 00:17:56,640
is the standard workflow

00:17:54,480 --> 00:17:58,640
uh for git so it's a known workflow

00:17:56,640 --> 00:17:59,679
across all different roles and git being

00:17:58,640 --> 00:18:01,600
the common tool

00:17:59,679 --> 00:18:03,600
across organizations and roles so it's a

00:18:01,600 --> 00:18:05,840
it's a very familiar one the

00:18:03,600 --> 00:18:07,360
um the learning curve is low and the

00:18:05,840 --> 00:18:09,760
skills already existing

00:18:07,360 --> 00:18:10,720
in most of the teams the second one is

00:18:09,760 --> 00:18:14,080
visibility and

00:18:10,720 --> 00:18:15,280
and audits because moving operations to

00:18:14,080 --> 00:18:17,600
git by default

00:18:15,280 --> 00:18:19,360
every change is represented by a git

00:18:17,600 --> 00:18:21,200
comment or merge

00:18:19,360 --> 00:18:23,840
on the git repository so you have full

00:18:21,200 --> 00:18:26,000
visibility into

00:18:23,840 --> 00:18:27,600
changes that happened to various

00:18:26,000 --> 00:18:28,000
environments who made the change what

00:18:27,600 --> 00:18:29,520
was the

00:18:28,000 --> 00:18:31,200
reason what was the discussions on it

00:18:29,520 --> 00:18:34,640
who approved and so on and

00:18:31,200 --> 00:18:37,360
especially when things go wrong you have

00:18:34,640 --> 00:18:39,520
failure in one of these environments you

00:18:37,360 --> 00:18:40,160
want to backtrack and find the cause of

00:18:39,520 --> 00:18:42,640
that

00:18:40,160 --> 00:18:43,919
this kind of visibility and auditability

00:18:42,640 --> 00:18:46,720
is extremely

00:18:43,919 --> 00:18:47,360
useful and helpful to reduce uh one of

00:18:46,720 --> 00:18:49,360
the

00:18:47,360 --> 00:18:52,000
major metrics of devops that they use

00:18:49,360 --> 00:18:55,039
often the the link the meet the

00:18:52,000 --> 00:18:59,280
the time to recover restore the service

00:18:55,039 --> 00:19:00,559
and having a change in a git repository

00:18:59,280 --> 00:19:02,720
presenting what has gone

00:19:00,559 --> 00:19:04,480
uh into production recently extremely

00:19:02,720 --> 00:19:06,720
helpful to be able to isolate

00:19:04,480 --> 00:19:08,400
what kind of changes need to be reviewed

00:19:06,720 --> 00:19:11,440
there is enhanced security

00:19:08,400 --> 00:19:13,520
uh one reason for that is the review and

00:19:11,440 --> 00:19:15,120
and visibility changes obviously that

00:19:13,520 --> 00:19:15,760
that before they go in production but

00:19:15,120 --> 00:19:18,880
also

00:19:15,760 --> 00:19:20,000
the the healing uh nature of the get out

00:19:18,880 --> 00:19:22,720
process that

00:19:20,000 --> 00:19:24,720
you can through that comparison of the

00:19:22,720 --> 00:19:26,480
desired estate and current state you can

00:19:24,720 --> 00:19:27,200
always identify if there is a drift if

00:19:26,480 --> 00:19:28,799
there is

00:19:27,200 --> 00:19:30,480
something has changed either way in the

00:19:28,799 --> 00:19:31,280
cluster or on git that you don't know

00:19:30,480 --> 00:19:33,760
about and

00:19:31,280 --> 00:19:35,360
maybe that change was not authorized to

00:19:33,760 --> 00:19:37,600
automatically correct it or notify

00:19:35,360 --> 00:19:39,520
someone at least to come look at it

00:19:37,600 --> 00:19:41,360
and the last but not least is the

00:19:39,520 --> 00:19:42,559
multi-cluster consistency so it makes it

00:19:41,360 --> 00:19:44,960
really simple to

00:19:42,559 --> 00:19:46,080
scale this process if you have hundreds

00:19:44,960 --> 00:19:47,600
of clusters and

00:19:46,080 --> 00:19:50,080
all of them need to have a particular

00:19:47,600 --> 00:19:52,400
application and all of them just need to

00:19:50,080 --> 00:19:52,799
look at a single git repo that contains

00:19:52,400 --> 00:19:54,720
the

00:19:52,799 --> 00:19:56,559
the configuration for deployment of that

00:19:54,720 --> 00:19:59,600
application and that application

00:19:56,559 --> 00:20:01,200
in a guaranteed identical way would get

00:19:59,600 --> 00:20:04,720
deployed across all those classes

00:20:01,200 --> 00:20:06,400
really helps scaling the deployments

00:20:04,720 --> 00:20:09,679
as we were scaling on the kubernetes

00:20:06,400 --> 00:20:09,679
side of infrastructure side

00:20:10,159 --> 00:20:13,200
so what does it look like in practice

00:20:11,919 --> 00:20:15,360
though if if you are

00:20:13,200 --> 00:20:16,559
uh if i'm a devops engineer or a

00:20:15,360 --> 00:20:20,080
developer or

00:20:16,559 --> 00:20:22,240
app ops person and i look at source code

00:20:20,080 --> 00:20:23,120
i have registry you have images how does

00:20:22,240 --> 00:20:25,120
that affect

00:20:23,120 --> 00:20:26,880
my way you're working so the ci process

00:20:25,120 --> 00:20:28,240
is not really different from the way you

00:20:26,880 --> 00:20:30,000
work today there is a

00:20:28,240 --> 00:20:31,679
git repository that contains a source

00:20:30,000 --> 00:20:34,080
code there is a ci in place

00:20:31,679 --> 00:20:35,280
bin jenkins or tekton or github actions

00:20:34,080 --> 00:20:37,440
or something else

00:20:35,280 --> 00:20:39,200
that takes the source code perhaps build

00:20:37,440 --> 00:20:40,720
it runs a set of tests on it there might

00:20:39,200 --> 00:20:42,480
be security checks in place

00:20:40,720 --> 00:20:44,640
static analysis and whatever you need to

00:20:42,480 --> 00:20:45,520
do till you release that application

00:20:44,640 --> 00:20:48,080
that code

00:20:45,520 --> 00:20:49,440
as an image into the image registry so

00:20:48,080 --> 00:20:52,640
that that part is quite

00:20:49,440 --> 00:20:54,880
as as you would expect in a stepwise

00:20:52,640 --> 00:20:57,760
type of a pipeline that performs

00:20:54,880 --> 00:20:59,760
these operations the cd part the

00:20:57,760 --> 00:21:01,440
continuous delivery or deployment part

00:20:59,760 --> 00:21:03,520
that's the part that might differ from

00:21:01,440 --> 00:21:05,600
how you're doing today there would be

00:21:03,520 --> 00:21:07,600
a second git repository that contains

00:21:05,600 --> 00:21:09,679
the configuration of this application on

00:21:07,600 --> 00:21:10,960
kubernetes this would contain manifest

00:21:09,679 --> 00:21:14,159
or

00:21:10,960 --> 00:21:17,200
a helm chart password application and

00:21:14,159 --> 00:21:20,320
um the cd process the githubs

00:21:17,200 --> 00:21:23,679
tool in there would look at the git repo

00:21:20,320 --> 00:21:25,200
of the configurations and make sure that

00:21:23,679 --> 00:21:26,480
that is in sync with the clusters that

00:21:25,200 --> 00:21:28,559
are connected to it

00:21:26,480 --> 00:21:30,320
in advanced scenarios you might have

00:21:28,559 --> 00:21:32,799
from the ci process even a

00:21:30,320 --> 00:21:33,440
pull request automatically be generated

00:21:32,799 --> 00:21:37,360
to

00:21:33,440 --> 00:21:40,000
the configuration git repository this

00:21:37,360 --> 00:21:42,320
pull request would contain for example

00:21:40,000 --> 00:21:43,679
the updated image digest of the new

00:21:42,320 --> 00:21:45,440
image that was released for the

00:21:43,679 --> 00:21:47,200
application so the pr automatically

00:21:45,440 --> 00:21:48,720
comes to the config repo updates and

00:21:47,200 --> 00:21:51,600
manifests that application

00:21:48,720 --> 00:21:53,520
referring to new digest and after the

00:21:51,600 --> 00:21:55,039
authorized person reviewing that imagine

00:21:53,520 --> 00:21:55,520
that change that change would get rolled

00:21:55,039 --> 00:21:58,559
out

00:21:55,520 --> 00:22:00,000
to to the kubernetes clusters there

00:21:58,559 --> 00:22:01,840
you might be thinking that i don't want

00:22:00,000 --> 00:22:02,640
to have two separate repositories i want

00:22:01,840 --> 00:22:04,960
everything

00:22:02,640 --> 00:22:06,159
in the source repo that is of course

00:22:04,960 --> 00:22:08,320
possible as well

00:22:06,159 --> 00:22:09,919
in our experience it's much more

00:22:08,320 --> 00:22:12,080
scalable and

00:22:09,919 --> 00:22:13,919
easier to manage when you have a lot of

00:22:12,080 --> 00:22:15,440
clusters and there are deltas in between

00:22:13,919 --> 00:22:17,200
if you have a separate cluster

00:22:15,440 --> 00:22:18,559
a separate repository only for

00:22:17,200 --> 00:22:20,400
configurations

00:22:18,559 --> 00:22:22,159
especially that the lifecycle of the

00:22:20,400 --> 00:22:24,000
content of this repos are quite

00:22:22,159 --> 00:22:24,720
different the frequency of change on the

00:22:24,000 --> 00:22:26,400
config

00:22:24,720 --> 00:22:27,840
versus frequency of change on source

00:22:26,400 --> 00:22:29,520
code for example is different so it's

00:22:27,840 --> 00:22:30,640
much easier if you have separate one but

00:22:29,520 --> 00:22:33,360
possible to have

00:22:30,640 --> 00:22:34,720
at the same as well and you might note

00:22:33,360 --> 00:22:36,960
that on this slide there are

00:22:34,720 --> 00:22:38,640
like arrows on both ways between the cd

00:22:36,960 --> 00:22:40,640
tool the github store really and

00:22:38,640 --> 00:22:41,440
kubernetes there and the reason for that

00:22:40,640 --> 00:22:43,440
is that

00:22:41,440 --> 00:22:44,480
you really have in the github process

00:22:43,440 --> 00:22:47,600
there are two uh

00:22:44,480 --> 00:22:48,720
operating modes you might be uh pulling

00:22:47,600 --> 00:22:52,640
into a cluster

00:22:48,720 --> 00:22:55,280
so if you have the cd tool that

00:22:52,640 --> 00:22:56,240
gets running on the cluster it can look

00:22:55,280 --> 00:22:58,320
at the git repo

00:22:56,240 --> 00:23:00,240
pull the contents into the repository

00:22:58,320 --> 00:23:01,919
into the cluster that is running on and

00:23:00,240 --> 00:23:02,720
apply the configuration on it and bring

00:23:01,919 --> 00:23:05,360
the cluster

00:23:02,720 --> 00:23:06,240
to the state you want it but you can

00:23:05,360 --> 00:23:08,159
also

00:23:06,240 --> 00:23:09,440
have the push model that you have a

00:23:08,159 --> 00:23:12,080
github so that is sitting

00:23:09,440 --> 00:23:14,159
outside the clusters and in a hub on a

00:23:12,080 --> 00:23:16,080
spoke type of a topology

00:23:14,159 --> 00:23:18,000
pushes those application and

00:23:16,080 --> 00:23:18,640
configuration to those remote clusters

00:23:18,000 --> 00:23:20,559
and there are

00:23:18,640 --> 00:23:22,080
use cases for both of them we see a lot

00:23:20,559 --> 00:23:22,880
of customers that are interested in the

00:23:22,080 --> 00:23:25,039
pool model

00:23:22,880 --> 00:23:26,799
but there are also use cases for example

00:23:25,039 --> 00:23:29,280
in the edge cases there are

00:23:26,799 --> 00:23:31,600
iot devices or you're running single

00:23:29,280 --> 00:23:33,679
node kubernetes on a certain

00:23:31,600 --> 00:23:34,880
number of low print low footprint

00:23:33,679 --> 00:23:36,240
devices and you want to really really

00:23:34,880 --> 00:23:37,679
reduce the type

00:23:36,240 --> 00:23:39,440
the amount of workloads that are running

00:23:37,679 --> 00:23:40,880
on the cluster then you might be using

00:23:39,440 --> 00:23:41,760
the push model to push those

00:23:40,880 --> 00:23:43,440
configuration

00:23:41,760 --> 00:23:44,880
to those clusters so you have the

00:23:43,440 --> 00:23:48,240
flexibility of really

00:23:44,880 --> 00:23:50,080
following both of these models and the

00:23:48,240 --> 00:23:52,640
difference of the get offs model here

00:23:50,080 --> 00:23:54,960
especially when the city part and ex

00:23:52,640 --> 00:23:56,720
stretching the ci process is that

00:23:54,960 --> 00:23:58,880
control loop which is quite similar to

00:23:56,720 --> 00:24:00,320
how kubernetes does is that once you

00:23:58,880 --> 00:24:02,720
do the deployment based on the

00:24:00,320 --> 00:24:04,880
declaration that you have in git

00:24:02,720 --> 00:24:06,799
the work is not done we constantly

00:24:04,880 --> 00:24:07,840
monitor and observe the state of the

00:24:06,799 --> 00:24:09,919
cluster

00:24:07,840 --> 00:24:11,600
and if there is a change there might be

00:24:09,919 --> 00:24:13,679
a a logic

00:24:11,600 --> 00:24:15,200
change of somebody changing an image

00:24:13,679 --> 00:24:17,039
digest directly on the cluster the

00:24:15,200 --> 00:24:19,919
cluster might be compromised

00:24:17,039 --> 00:24:22,080
and the the git ops tool there would

00:24:19,919 --> 00:24:24,080
identify this change immediately because

00:24:22,080 --> 00:24:26,400
it sees that there is a diff between

00:24:24,080 --> 00:24:28,400
what you have stated as a desired state

00:24:26,400 --> 00:24:30,640
and what you have on the cluster

00:24:28,400 --> 00:24:32,720
and it can automatically react to it

00:24:30,640 --> 00:24:35,760
automatically correct it perhaps

00:24:32,720 --> 00:24:37,039
or you could configure those kind of

00:24:35,760 --> 00:24:40,080
processes to

00:24:37,039 --> 00:24:42,480
um let the admins perhaps know or the

00:24:40,080 --> 00:24:43,279
sre engineer to come take a look and see

00:24:42,480 --> 00:24:45,039
if there is

00:24:43,279 --> 00:24:47,279
some discrepancy of something that needs

00:24:45,039 --> 00:24:49,520
attention there

00:24:47,279 --> 00:24:50,320
and if you're looking on if you're on an

00:24:49,520 --> 00:24:52,480
uh

00:24:50,320 --> 00:24:54,559
enterprise kubernetes platform like

00:24:52,480 --> 00:24:56,240
openshift so the process would look like

00:24:54,559 --> 00:24:58,159
exactly the same but

00:24:56,240 --> 00:24:59,360
there are certain type of technologies

00:24:58,159 --> 00:25:01,120
that come with such

00:24:59,360 --> 00:25:02,559
platform there's an openshift which is

00:25:01,120 --> 00:25:05,600
the container platform from

00:25:02,559 --> 00:25:08,960
red hat openshift pipelines based on

00:25:05,600 --> 00:25:10,720
uh tickton uh it fulfills the ci part

00:25:08,960 --> 00:25:12,320
for you it provides a cloud native way

00:25:10,720 --> 00:25:15,679
to create pipelines

00:25:12,320 --> 00:25:17,679
that can build the application and uh

00:25:15,679 --> 00:25:19,840
help truly in releasing the images

00:25:17,679 --> 00:25:21,200
perform security checks on him and so on

00:25:19,840 --> 00:25:22,880
in a cloud-native way and push the

00:25:21,200 --> 00:25:25,279
images to the registry and then open

00:25:22,880 --> 00:25:26,000
shift githubs based on argo cd project

00:25:25,279 --> 00:25:29,520
or go

00:25:26,000 --> 00:25:31,440
is a cncf uh project that will be talked

00:25:29,520 --> 00:25:34,480
about this week as well

00:25:31,440 --> 00:25:37,360
you can set up your cd process that

00:25:34,480 --> 00:25:39,120
uh connect git repositories to

00:25:37,360 --> 00:25:40,960
kubernetes and openshift clusters and

00:25:39,120 --> 00:25:41,440
have your configs automatically pulled

00:25:40,960 --> 00:25:44,480
and

00:25:41,440 --> 00:25:46,240
and deployed to those clusters and i am

00:25:44,480 --> 00:25:47,039
actually thrilled today today is the day

00:25:46,240 --> 00:25:48,400
that they are

00:25:47,039 --> 00:25:50,240
have made openshift pipelines and

00:25:48,400 --> 00:25:52,159
openshift github's generally

00:25:50,240 --> 00:25:53,600
available and there is a blog post about

00:25:52,159 --> 00:25:55,440
an openshift blog as well

00:25:53,600 --> 00:25:57,200
definitely encourage you to read about

00:25:55,440 --> 00:26:00,320
it's an exciting moment

00:25:57,200 --> 00:26:03,279
at gitobscon and with that

00:26:00,320 --> 00:26:04,000
i would really uh wrap this up and see

00:26:03,279 --> 00:26:07,520
if there are any

00:26:04,000 --> 00:26:09,679
questions for us to discuss so

00:26:07,520 --> 00:26:11,360
you did an amazing job right so a lot of

00:26:09,679 --> 00:26:13,039
the questions that were asked last

00:26:11,360 --> 00:26:16,640
session i think were covered but

00:26:13,039 --> 00:26:19,600
um there is one question here

00:26:16,640 --> 00:26:21,679
how does tecton compare to jenkins when

00:26:19,600 --> 00:26:24,559
considering a kubernetes environment

00:26:21,679 --> 00:26:25,840
or perhaps get a github actions is a

00:26:24,559 --> 00:26:28,240
better

00:26:25,840 --> 00:26:29,679
uh as a move away from jenkins question

00:26:28,240 --> 00:26:33,039
mark um

00:26:29,679 --> 00:26:35,600
what do you think see mark uh so

00:26:33,039 --> 00:26:37,679
jenkins uh first i separate the github's

00:26:35,600 --> 00:26:40,159
actions from jenkins and

00:26:37,679 --> 00:26:41,520
and take town so get up actions is is a

00:26:40,159 --> 00:26:43,360
fabulous tool

00:26:41,520 --> 00:26:45,520
extremely well designed if you are

00:26:43,360 --> 00:26:48,559
within the github ecosystem and

00:26:45,520 --> 00:26:49,200
you are able to use a cloud-based ci

00:26:48,559 --> 00:26:51,840
tool it

00:26:49,200 --> 00:26:54,480
works really nicely um i really like

00:26:51,840 --> 00:26:57,840
that product i use it myself as well for

00:26:54,480 --> 00:27:00,320
some of the demos and work that i do but

00:26:57,840 --> 00:27:00,960
a lot of organizations are not able to

00:27:00,320 --> 00:27:04,159
do that

00:27:00,960 --> 00:27:06,559
or they have their applications deployed

00:27:04,159 --> 00:27:09,039
on kubernetes so they're looking for a

00:27:06,559 --> 00:27:11,919
native solution to kubernetes to

00:27:09,039 --> 00:27:13,760
to to drive their ci as well because

00:27:11,919 --> 00:27:15,600
what is an application on kubernetes

00:27:13,760 --> 00:27:18,240
built out it's built up of deployment

00:27:15,600 --> 00:27:20,240
and perhaps a number of config maps or a

00:27:18,240 --> 00:27:22,240
number of secrets and and the unit of

00:27:20,240 --> 00:27:25,360
deployment there for that application

00:27:22,240 --> 00:27:25,760
are pods and containers and it helps a

00:27:25,360 --> 00:27:28,159
lot

00:27:25,760 --> 00:27:28,880
if the pipeline was built from the exact

00:27:28,159 --> 00:27:31,120
same

00:27:28,880 --> 00:27:32,320
constructs like because if i have a

00:27:31,120 --> 00:27:34,640
config map that i

00:27:32,320 --> 00:27:36,399
in application i could easily produce

00:27:34,640 --> 00:27:39,120
perhaps a config map

00:27:36,399 --> 00:27:40,640
through my pipeline right so you the

00:27:39,120 --> 00:27:42,559
value of takedown is that all these

00:27:40,640 --> 00:27:43,679
concepts are really what tickton is

00:27:42,559 --> 00:27:45,600
built above so

00:27:43,679 --> 00:27:48,000
if you want to do something from a

00:27:45,600 --> 00:27:49,520
pipeline in a secret in a pod any

00:27:48,000 --> 00:27:53,200
deployment any replication

00:27:49,520 --> 00:27:56,000
uh application set the set for example

00:27:53,200 --> 00:27:57,840
you have a full access because it's it's

00:27:56,000 --> 00:27:58,240
really based on the exact same platform

00:27:57,840 --> 00:28:00,840
based

00:27:58,240 --> 00:28:02,320
exact same concept so the level of

00:28:00,840 --> 00:28:04,320
interoperability based

00:28:02,320 --> 00:28:06,559
of the application that is on kubernetes

00:28:04,320 --> 00:28:09,760
and a pipeline that is based on takedown

00:28:06,559 --> 00:28:12,159
on kubernetes is unmatched by any other

00:28:09,760 --> 00:28:13,440
ci tools that are like advantages that

00:28:12,159 --> 00:28:14,799
you would you wouldn't be able to get

00:28:13,440 --> 00:28:16,240
from other ci tools

00:28:14,799 --> 00:28:18,399
but you might be thinking so i could

00:28:16,240 --> 00:28:19,840
also run jenkins on kubernetes then my

00:28:18,399 --> 00:28:22,799
jenkins distance is running

00:28:19,840 --> 00:28:24,000
exactly where my application is running

00:28:22,799 --> 00:28:27,279
jenkins

00:28:24,000 --> 00:28:28,000
though a hugely popular tool i've been a

00:28:27,279 --> 00:28:31,279
user since

00:28:28,000 --> 00:28:34,559
i i remember when i was a kid and

00:28:31,279 --> 00:28:36,640
we are a huge uh users red hat as well

00:28:34,559 --> 00:28:38,320
um but the problem with jenkins that

00:28:36,640 --> 00:28:40,399
it's it's traditional it's designed as a

00:28:38,320 --> 00:28:42,960
monolith monolithic

00:28:40,399 --> 00:28:44,720
application before kubernetes even like

00:28:42,960 --> 00:28:46,159
exists a container exists so a lot of

00:28:44,720 --> 00:28:49,840
the construct that exists

00:28:46,159 --> 00:28:52,640
in a container platform uh do not play

00:28:49,840 --> 00:28:53,520
well with jenkins jenkins is extremely

00:28:52,640 --> 00:28:56,720
uh

00:28:53,520 --> 00:28:58,799
stateful you you want to run a pipeline

00:28:56,720 --> 00:29:00,559
you get it you get an instance of a ci

00:28:58,799 --> 00:29:04,159
server that i need to maintain

00:29:00,559 --> 00:29:06,480
and this there is that everyone is

00:29:04,159 --> 00:29:08,399
on the same jenkins instance and you

00:29:06,480 --> 00:29:09,840
manage access through jenkins you have a

00:29:08,399 --> 00:29:12,799
shared model of

00:29:09,840 --> 00:29:13,279
plugins for example that creates issues

00:29:12,799 --> 00:29:16,559
about

00:29:13,279 --> 00:29:18,799
uh for um for when you have

00:29:16,559 --> 00:29:21,039
when you move more toward toward the

00:29:18,799 --> 00:29:21,520
like devops way and have more autonomy

00:29:21,039 --> 00:29:23,200
in the

00:29:21,520 --> 00:29:24,559
in the development teams and it becomes

00:29:23,200 --> 00:29:26,640
extremely difficult to give that

00:29:24,559 --> 00:29:29,120
autonomy to a developer

00:29:26,640 --> 00:29:30,159
when the plugin system is shared across

00:29:29,120 --> 00:29:33,360
all the pipelines

00:29:30,159 --> 00:29:37,200
on on a single ci server so

00:29:33,360 --> 00:29:37,679
jenkins fits um the more traditional way

00:29:37,200 --> 00:29:39,840
of

00:29:37,679 --> 00:29:41,279
thinking about pipeline and you have

00:29:39,840 --> 00:29:44,080
centralized teams that

00:29:41,279 --> 00:29:45,840
they were center of excellence for

00:29:44,080 --> 00:29:48,799
automation they managed this

00:29:45,840 --> 00:29:51,039
for all the other teams but as you move

00:29:48,799 --> 00:29:53,200
more toward decentralized model teams

00:29:51,039 --> 00:29:55,039
that are more

00:29:53,200 --> 00:29:56,960
cross-functional they own the delivery

00:29:55,039 --> 00:29:59,120
of their application that model breaks

00:29:56,960 --> 00:29:59,600
really fast and you you end up giving

00:29:59,120 --> 00:30:02,080
them

00:29:59,600 --> 00:30:03,840
a jenkins instance every single team is

00:30:02,080 --> 00:30:06,720
jenkins instance and you you buy a lot

00:30:03,840 --> 00:30:09,120
of operational overhead for yourself so

00:30:06,720 --> 00:30:11,480
takedown exists on kubernetes really to

00:30:09,120 --> 00:30:14,399
address these kind of issues of

00:30:11,480 --> 00:30:15,840
decentralized model of running pipelines

00:30:14,399 --> 00:30:18,640
in a way that is native to

00:30:15,840 --> 00:30:19,760
to kubernetes awesome thank you very

00:30:18,640 --> 00:30:22,240
much so folks

00:30:19,760 --> 00:30:24,080
we have our first session starting here

00:30:22,240 --> 00:30:26,720
in mere moments

00:30:24,080 --> 00:30:28,159
uh thank you again cmok very much for

00:30:26,720 --> 00:30:31,360
for talking

00:30:28,159 --> 00:30:34,159
and sharing with us today um we really

00:30:31,360 --> 00:30:34,159

YouTube URL: https://www.youtube.com/watch?v=lFJNpCjgBoY


