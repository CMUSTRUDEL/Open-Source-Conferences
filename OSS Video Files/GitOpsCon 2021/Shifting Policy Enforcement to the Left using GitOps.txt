Title: Shifting Policy Enforcement to the Left using GitOps
Publication date: 2021-04-29
Playlist: GitOpsCon 2021
Description: 
	Open Policy Agent’s Gatekeeper provides a policy-based approach to managing admission control and identifying policy violations, stopping bad things from happening to production deployments. But those checks only happen at deploy time - what if we could move that process back into the GitOps workflow?

In this session, we’ll review the basics of implementing policy controls using OPA Gatekeeper, and go in-depth on bringing those policy checks back into the branch-commit-merge process. We’ll demonstrate the different approaches to integrating OPA Gatekeeper with GitOps, bringing policy enforcement to the left and identifying policy violations much earlier.
Captions: 
	00:00:00,719 --> 00:00:04,720
hey folks welcome to shifting policy

00:00:03,520 --> 00:00:07,279
enforcement left

00:00:04,720 --> 00:00:09,519
using git ops my name is sundip and i

00:00:07,279 --> 00:00:11,920
work at google cloud

00:00:09,519 --> 00:00:12,880
in this talk i want to explain how

00:00:11,920 --> 00:00:16,320
policies

00:00:12,880 --> 00:00:18,000
and kubernetes fit together with githubs

00:00:16,320 --> 00:00:20,480
we'll start with the basics around

00:00:18,000 --> 00:00:22,320
policies and policy management

00:00:20,480 --> 00:00:24,720
then i want to move into policy

00:00:22,320 --> 00:00:25,920
enforcement and how we can move that

00:00:24,720 --> 00:00:28,960
enforcement

00:00:25,920 --> 00:00:30,640
further to the left finally i hope to

00:00:28,960 --> 00:00:34,079
share some resources to help y'all

00:00:30,640 --> 00:00:34,079
get started with policy enforcement

00:00:35,120 --> 00:00:41,280
now at google my colleagues and i

00:00:38,239 --> 00:00:44,079
help teams adopt research-based

00:00:41,280 --> 00:00:44,879
devops tools and practices and

00:00:44,079 --> 00:00:47,200
ultimately

00:00:44,879 --> 00:00:48,399
our goal is to help software teams

00:00:47,200 --> 00:00:53,520
deliver software

00:00:48,399 --> 00:00:55,840
faster you can find me at crcs mnky

00:00:53,520 --> 00:00:56,559
on twitter and github that's circus

00:00:55,840 --> 00:00:59,840
monkey

00:00:56,559 --> 00:00:59,840
minus the vowels

00:00:59,920 --> 00:01:04,720
so let's get started and we'll start

00:01:02,160 --> 00:01:08,159
with some basics around policies

00:01:04,720 --> 00:01:08,159
and policy objects

00:01:08,799 --> 00:01:12,400
now policies are rules that tell us how

00:01:11,280 --> 00:01:15,600
we can

00:01:12,400 --> 00:01:18,640
create read update

00:01:15,600 --> 00:01:20,000
or delete a resource in the case of

00:01:18,640 --> 00:01:22,560
kubernetes

00:01:20,000 --> 00:01:23,200
policies govern what sorts of objects

00:01:22,560 --> 00:01:27,119
can be

00:01:23,200 --> 00:01:29,759
created or updated and the nice thing

00:01:27,119 --> 00:01:31,520
is that policies are granular enough

00:01:29,759 --> 00:01:34,240
where we can govern

00:01:31,520 --> 00:01:36,000
individual fields in an object like the

00:01:34,240 --> 00:01:39,040
annotations on a deployment

00:01:36,000 --> 00:01:41,200
or the names we give to our services

00:01:39,040 --> 00:01:43,360
we're the port naming conventions so we

00:01:41,200 --> 00:01:44,799
have that level of really fine grain

00:01:43,360 --> 00:01:47,600
control with these policies

00:01:44,799 --> 00:01:47,600
with these rules

00:01:48,000 --> 00:01:51,119
now policy management is something of a

00:01:50,240 --> 00:01:54,159
pretty broad

00:01:51,119 --> 00:01:56,719
umbrella term it covers a lot of stuff

00:01:54,159 --> 00:01:57,600
in this case for this talk it really

00:01:56,719 --> 00:02:01,040
means to

00:01:57,600 --> 00:02:03,520
cover how we create administer

00:02:01,040 --> 00:02:04,640
and enforce those policies and it also

00:02:03,520 --> 00:02:07,280
kind of covers the

00:02:04,640 --> 00:02:08,800
mechanisms by which we we sort of

00:02:07,280 --> 00:02:11,200
execute all these actions and all these

00:02:08,800 --> 00:02:11,200
functions

00:02:12,239 --> 00:02:16,879
so let's start with the mechanisms the

00:02:15,040 --> 00:02:18,080
most important piece this whole equation

00:02:16,879 --> 00:02:21,360
is something called

00:02:18,080 --> 00:02:22,480
open policy agent opa is part of the

00:02:21,360 --> 00:02:24,959
cncf

00:02:22,480 --> 00:02:26,160
and it is a general purpose policy

00:02:24,959 --> 00:02:28,560
engine

00:02:26,160 --> 00:02:29,280
what do i mean by general purpose well

00:02:28,560 --> 00:02:31,440
it can be

00:02:29,280 --> 00:02:32,879
integrated into a variety of

00:02:31,440 --> 00:02:36,000
applications and services

00:02:32,879 --> 00:02:38,080
as well as platforms like kubernetes

00:02:36,000 --> 00:02:39,840
and it can actually be used for a wide

00:02:38,080 --> 00:02:41,840
range of use cases

00:02:39,840 --> 00:02:44,800
some of the popular ones we've seen are

00:02:41,840 --> 00:02:48,400
things like authorization controls

00:02:44,800 --> 00:02:52,080
data x fill or data filtering as well as

00:02:48,400 --> 00:02:54,720
admission control opa

00:02:52,080 --> 00:02:55,760
uses a high-level language called rego

00:02:54,720 --> 00:02:59,519
to define

00:02:55,760 --> 00:03:02,000
policies now rego is

00:02:59,519 --> 00:03:03,120
kind of a new language it's a simple

00:03:02,000 --> 00:03:05,760
language to follow right

00:03:03,120 --> 00:03:06,800
it's easy to do simple things and it's

00:03:05,760 --> 00:03:10,319
possible to do

00:03:06,800 --> 00:03:13,280
complex things with opa

00:03:10,319 --> 00:03:14,879
we get to design and implement policies

00:03:13,280 --> 00:03:16,000
that are separate from applications and

00:03:14,879 --> 00:03:18,640
infrastructure

00:03:16,000 --> 00:03:19,519
with kind of a loosely coupled approach

00:03:18,640 --> 00:03:21,760
and

00:03:19,519 --> 00:03:24,319
in the sort of cloud-native approach to

00:03:21,760 --> 00:03:26,480
software that we're all talking about

00:03:24,319 --> 00:03:28,319
we let applications and infrastructure

00:03:26,480 --> 00:03:29,599
evolve independently and we can do the

00:03:28,319 --> 00:03:30,879
same thing with policies and that's

00:03:29,599 --> 00:03:32,480
really what opa gives us

00:03:30,879 --> 00:03:35,599
it lets us have a loosely coupled

00:03:32,480 --> 00:03:37,840
approach to all these aspects

00:03:35,599 --> 00:03:38,720
and policies can also bring in external

00:03:37,840 --> 00:03:40,319
data

00:03:38,720 --> 00:03:42,879
now in the case of kubernetes that's

00:03:40,319 --> 00:03:46,159
especially powerful because that means

00:03:42,879 --> 00:03:48,480
we can compare incoming

00:03:46,159 --> 00:03:49,280
objects against existing objects within

00:03:48,480 --> 00:03:51,120
the cluster

00:03:49,280 --> 00:03:53,120
so for example if you want to write a

00:03:51,120 --> 00:03:55,439
policy that prevented someone from

00:03:53,120 --> 00:03:56,959
having a naming collision on services

00:03:55,439 --> 00:03:59,280
and enforcing some service name

00:03:56,959 --> 00:04:01,280
uniqueness that's a policy we can write

00:03:59,280 --> 00:04:04,720
but it requires external input which is

00:04:01,280 --> 00:04:04,720
the existing set of services

00:04:06,400 --> 00:04:10,560
so what's gatekeeper then well

00:04:08,799 --> 00:04:13,280
gatekeeper

00:04:10,560 --> 00:04:14,000
is open policy agent wrapped up and

00:04:13,280 --> 00:04:16,160
deployed

00:04:14,000 --> 00:04:17,600
as a kubernetes operator and admission

00:04:16,160 --> 00:04:19,919
controller

00:04:17,600 --> 00:04:22,079
the admission controller reads incoming

00:04:19,919 --> 00:04:24,080
objects and decides whether to approve

00:04:22,079 --> 00:04:26,080
or reject admission to the kubernetes

00:04:24,080 --> 00:04:28,960
cluster

00:04:26,080 --> 00:04:30,240
gatekeeper also creates custom resource

00:04:28,960 --> 00:04:33,199
templates

00:04:30,240 --> 00:04:34,320
that wrap opa policies right that wrap

00:04:33,199 --> 00:04:36,880
that rego code

00:04:34,320 --> 00:04:38,479
into a kubernetes object and those

00:04:36,880 --> 00:04:40,320
templates those objects can be

00:04:38,479 --> 00:04:42,400
parameterized and deployed

00:04:40,320 --> 00:04:44,320
like you would any standard kubernetes

00:04:42,400 --> 00:04:45,759
resource or kubernetes object

00:04:44,320 --> 00:04:48,000
so let me show you an example of that

00:04:45,759 --> 00:04:48,000
now

00:04:48,479 --> 00:04:52,960
after installing gatekeeper kubernetes

00:04:50,880 --> 00:04:54,880
now understands this first basic type

00:04:52,960 --> 00:04:57,360
called a constraint template

00:04:54,880 --> 00:04:58,560
these are the templates that wrap opa

00:04:57,360 --> 00:05:00,800
policies

00:04:58,560 --> 00:05:02,639
so in the constraint template object we

00:05:00,800 --> 00:05:04,080
include the rego policy code

00:05:02,639 --> 00:05:05,840
and now if you look at the bottom half

00:05:04,080 --> 00:05:07,680
of the slide you'll see

00:05:05,840 --> 00:05:10,240
there's that rego code specifically in

00:05:07,680 --> 00:05:12,400
there and that code what it's doing is

00:05:10,240 --> 00:05:14,320
there are three steps to that violation

00:05:12,400 --> 00:05:14,800
the first is reviewing the kind of input

00:05:14,320 --> 00:05:17,680
type

00:05:14,800 --> 00:05:19,440
making sure it's the type of service the

00:05:17,680 --> 00:05:22,479
second aspect is checking to see

00:05:19,440 --> 00:05:23,120
if the service type is of node port and

00:05:22,479 --> 00:05:24,960
if so

00:05:23,120 --> 00:05:27,360
it sets that violation message and it

00:05:24,960 --> 00:05:29,280
throws the violation that's it

00:05:27,360 --> 00:05:30,720
the rest of the constraint template is

00:05:29,280 --> 00:05:32,800
essentially metadata

00:05:30,720 --> 00:05:38,320
it tells us how we're going to use the

00:05:32,800 --> 00:05:40,160
constraint template

00:05:38,320 --> 00:05:42,479
now you can see the kind field

00:05:40,160 --> 00:05:45,280
highlighted and that shows how

00:05:42,479 --> 00:05:46,320
these constraint templates extend the

00:05:45,280 --> 00:05:48,800
infrastructure

00:05:46,320 --> 00:05:50,080
to support new custom resources because

00:05:48,800 --> 00:05:52,160
what we'll do from here

00:05:50,080 --> 00:05:53,840
is we'll create another object based on

00:05:52,160 --> 00:05:56,080
that kind highlighted

00:05:53,840 --> 00:05:57,919
called a constraint and that will let us

00:05:56,080 --> 00:06:00,319
enforce this policy

00:05:57,919 --> 00:06:00,960
now i know i'm moving around quite a bit

00:06:00,319 --> 00:06:02,240
so

00:06:00,960 --> 00:06:04,479
the question i usually get when i

00:06:02,240 --> 00:06:05,280
explain this is why do we have two

00:06:04,479 --> 00:06:08,319
objects

00:06:05,280 --> 00:06:10,880
constraints and constraint templates

00:06:08,319 --> 00:06:11,680
and really it's a pretty simple answer

00:06:10,880 --> 00:06:13,199
it lets us

00:06:11,680 --> 00:06:14,560
separate the rule which is the

00:06:13,199 --> 00:06:15,360
constraint template you see in front of

00:06:14,560 --> 00:06:17,520
you

00:06:15,360 --> 00:06:19,520
from the enforcement of that rule

00:06:17,520 --> 00:06:21,840
because there could be examples where

00:06:19,520 --> 00:06:22,960
one template is enforced a number of

00:06:21,840 --> 00:06:26,160
different ways

00:06:22,960 --> 00:06:28,000
so for example within a particular

00:06:26,160 --> 00:06:30,160
namespace we may want to

00:06:28,000 --> 00:06:32,000
force certain labels to be on particular

00:06:30,160 --> 00:06:33,280
objects so that could be a constraint

00:06:32,000 --> 00:06:35,280
template that looks for

00:06:33,280 --> 00:06:36,319
a set of labels and the way it's

00:06:35,280 --> 00:06:38,160
enforced

00:06:36,319 --> 00:06:40,720
through a constraint is different on a

00:06:38,160 --> 00:06:42,160
per namespace basis

00:06:40,720 --> 00:06:43,280
so now let's take a look at a constraint

00:06:42,160 --> 00:06:45,840
i think that'll help make it a little

00:06:43,280 --> 00:06:45,840
bit clearer

00:06:46,720 --> 00:06:50,800
now in the top half you have the

00:06:49,440 --> 00:06:52,400
constraint that matches up to our

00:06:50,800 --> 00:06:54,000
previous constraint template and you can

00:06:52,400 --> 00:06:55,440
see the kind there is the

00:06:54,000 --> 00:06:57,520
the kind that we created using the

00:06:55,440 --> 00:06:59,039
template and on the bottom half of the

00:06:57,520 --> 00:07:00,840
slide you see

00:06:59,039 --> 00:07:02,400
the sample resource we're going to test

00:07:00,840 --> 00:07:05,280
against now

00:07:02,400 --> 00:07:06,880
constraints can be scoped to objects and

00:07:05,280 --> 00:07:07,680
or namespaces depending how you want to

00:07:06,880 --> 00:07:09,440
do it

00:07:07,680 --> 00:07:12,240
and we can customize the enforcement as

00:07:09,440 --> 00:07:14,400
well in this case in this example

00:07:12,240 --> 00:07:15,759
we've scoped this constraint only to

00:07:14,400 --> 00:07:17,360
services

00:07:15,759 --> 00:07:19,680
now that scoping as i mentioned could be

00:07:17,360 --> 00:07:21,360
expanded to any api group

00:07:19,680 --> 00:07:23,840
to matching labels to matching

00:07:21,360 --> 00:07:25,759
namespaces you can structure the the

00:07:23,840 --> 00:07:30,479
scoping matching in the queries

00:07:25,759 --> 00:07:32,319
uh it's pretty well

00:07:30,479 --> 00:07:34,160
now again in this example we've elected

00:07:32,319 --> 00:07:35,520
to deny admission to the cluster

00:07:34,160 --> 00:07:37,919
as you can see with that enforcement

00:07:35,520 --> 00:07:40,400
action so if the service object

00:07:37,919 --> 00:07:41,759
below tries to enter the cluster it will

00:07:40,400 --> 00:07:44,319
not be admitted

00:07:41,759 --> 00:07:46,240
because it violates our policy of

00:07:44,319 --> 00:07:49,599
disallowing any services

00:07:46,240 --> 00:07:49,599
with type node port

00:07:49,680 --> 00:07:53,280
now the enforcement here is set to deny

00:07:51,440 --> 00:07:55,280
but we can also set it up to simply

00:07:53,280 --> 00:07:56,319
audit violations or provide immediate

00:07:55,280 --> 00:07:57,840
warnings

00:07:56,319 --> 00:08:00,160
it all depends on how you would want to

00:07:57,840 --> 00:08:03,120
enforce policy violations

00:08:00,160 --> 00:08:04,960
in some cases it may be a gentle warning

00:08:03,120 --> 00:08:07,039
to a team that says hey

00:08:04,960 --> 00:08:08,879
your objects are out of compliance you

00:08:07,039 --> 00:08:10,080
may want to start making these changes

00:08:08,879 --> 00:08:12,240
or it could be something where you have

00:08:10,080 --> 00:08:13,680
to shut the door as quickly as possible

00:08:12,240 --> 00:08:16,240
and not allow it to be admitted to the

00:08:13,680 --> 00:08:17,919
cluster it really does depend on

00:08:16,240 --> 00:08:21,199
the use case you're trying to achieve

00:08:17,919 --> 00:08:21,199
with the policy violation

00:08:21,680 --> 00:08:25,599
all right so we talked about the basics

00:08:24,319 --> 00:08:28,080
of policy and some of the

00:08:25,599 --> 00:08:29,440
work around management now let's talk

00:08:28,080 --> 00:08:30,639
about the mechanics of policy

00:08:29,440 --> 00:08:32,959
enforcement

00:08:30,639 --> 00:08:35,200
when does it happen and when should it

00:08:32,959 --> 00:08:35,200
happen

00:08:35,599 --> 00:08:40,320
if we go back to our mission control

00:08:37,279 --> 00:08:40,880
example you can see here uh that an

00:08:40,320 --> 00:08:42,719
object

00:08:40,880 --> 00:08:44,240
if an object violates the gatekeeper

00:08:42,719 --> 00:08:46,720
policy uh

00:08:44,240 --> 00:08:48,399
as it attempts to enter the cluster it

00:08:46,720 --> 00:08:49,440
will be denied admission right we talked

00:08:48,399 --> 00:08:50,480
about that so that's that's pretty

00:08:49,440 --> 00:08:52,720
straightforward

00:08:50,480 --> 00:08:53,519
but and this is the really important

00:08:52,720 --> 00:08:56,480
part

00:08:53,519 --> 00:08:57,200
that denial happens when the object is

00:08:56,480 --> 00:08:58,560
deployed

00:08:57,200 --> 00:09:00,720
so in that previous example with the

00:08:58,560 --> 00:09:02,080
service we would only know that the

00:09:00,720 --> 00:09:02,640
service didn't get admitted to the

00:09:02,080 --> 00:09:04,080
cluster

00:09:02,640 --> 00:09:05,680
when we actually physically tried to

00:09:04,080 --> 00:09:06,880
deploy it we would get that rejection

00:09:05,680 --> 00:09:08,640
right away

00:09:06,880 --> 00:09:09,680
but what's so bad about that right we

00:09:08,640 --> 00:09:11,680
want to know that it's going to get

00:09:09,680 --> 00:09:14,000
rejected

00:09:11,680 --> 00:09:14,720
it creates some challenges when we've

00:09:14,000 --> 00:09:17,120
got

00:09:14,720 --> 00:09:18,880
a get ups type of setup right that

00:09:17,120 --> 00:09:20,560
runtime enforcement is not happening at

00:09:18,880 --> 00:09:23,760
the right time for us anymore

00:09:20,560 --> 00:09:25,760
so imagine you have a kubernetes cluster

00:09:23,760 --> 00:09:27,920
and you use git ops to manage cluster

00:09:25,760 --> 00:09:29,839
infrastructure along with applications

00:09:27,920 --> 00:09:32,240
and services

00:09:29,839 --> 00:09:33,680
if you have a kubernetes object that

00:09:32,240 --> 00:09:36,399
violates any policies

00:09:33,680 --> 00:09:37,920
like that service example we saw earlier

00:09:36,399 --> 00:09:39,279
it won't sync to the cluster

00:09:37,920 --> 00:09:41,360
because the controller will try to

00:09:39,279 --> 00:09:43,040
synchronize it and the admission

00:09:41,360 --> 00:09:46,720
controller will reject it

00:09:43,040 --> 00:09:48,240
and it will fail and now depending on

00:09:46,720 --> 00:09:50,080
your get ops controller that you're

00:09:48,240 --> 00:09:54,080
using it may keep

00:09:50,080 --> 00:09:56,880
trying and failing to sync that object

00:09:54,080 --> 00:09:58,320
or worse depending on how it handles

00:09:56,880 --> 00:10:00,080
admission failures it might be a

00:09:58,320 --> 00:10:03,200
different scenario

00:10:00,080 --> 00:10:04,800
so it depends right if your git ups

00:10:03,200 --> 00:10:06,720
controller is gonna

00:10:04,800 --> 00:10:09,120
degrade gracefully or if it's gonna

00:10:06,720 --> 00:10:10,560
potentially block any other resources

00:10:09,120 --> 00:10:12,399
from that point forward from

00:10:10,560 --> 00:10:14,800
synchronizing to the cluster

00:10:12,399 --> 00:10:15,440
not a situation you want with trying to

00:10:14,800 --> 00:10:16,880
maintain

00:10:15,440 --> 00:10:19,680
you know that that tight relationship

00:10:16,880 --> 00:10:22,320
between repo and infrastructure

00:10:19,680 --> 00:10:23,440
but that's not even the worst part the

00:10:22,320 --> 00:10:26,000
person or team

00:10:23,440 --> 00:10:28,000
responsible for the violation might be

00:10:26,000 --> 00:10:29,600
totally out of the loop here

00:10:28,000 --> 00:10:31,920
because this is happening at run time or

00:10:29,600 --> 00:10:33,920
deploy time they may have committed the

00:10:31,920 --> 00:10:35,519
change or approved that pr

00:10:33,920 --> 00:10:37,200
and it's made it all the way to

00:10:35,519 --> 00:10:39,600
deployment and now

00:10:37,200 --> 00:10:41,279
it takes time for the failure to happen

00:10:39,600 --> 00:10:43,519
the failure to bubble up

00:10:41,279 --> 00:10:45,680
someone to notice the failure and

00:10:43,519 --> 00:10:47,440
respond to it and handle it

00:10:45,680 --> 00:10:49,040
and herein lies the problem right this

00:10:47,440 --> 00:10:50,640
is the ultimate issue

00:10:49,040 --> 00:10:53,040
policy enforcement is great it's a

00:10:50,640 --> 00:10:54,399
really powerful tool to maintain

00:10:53,040 --> 00:10:56,320
you know the right structure of our

00:10:54,399 --> 00:10:57,519
clusters and environments

00:10:56,320 --> 00:10:59,519
but we need to bring some of that

00:10:57,519 --> 00:11:01,760
enforcement to happen earlier or else

00:10:59,519 --> 00:11:04,000
the feedback loop is too long

00:11:01,760 --> 00:11:04,800
and the downsides is that it could lead

00:11:04,000 --> 00:11:06,800
to

00:11:04,800 --> 00:11:08,640
some kind of unknown or unexpected

00:11:06,800 --> 00:11:11,120
cluster state this is what we're trying

00:11:08,640 --> 00:11:11,120
to avoid

00:11:12,640 --> 00:11:17,600
okay we made it now let's talk about how

00:11:15,839 --> 00:11:20,079
to make policy enforcement happen

00:11:17,600 --> 00:11:20,079
earlier

00:11:21,360 --> 00:11:25,600
depending on how you and your teams

00:11:23,680 --> 00:11:27,760
develop and deliver software

00:11:25,600 --> 00:11:28,880
you're either pushing commits directly

00:11:27,760 --> 00:11:31,920
to your git ops

00:11:28,880 --> 00:11:33,040
synced repo or you're using a pull

00:11:31,920 --> 00:11:35,760
request strategy

00:11:33,040 --> 00:11:37,279
and prs come in they get reviewed and

00:11:35,760 --> 00:11:38,079
the changes get merged into the sync

00:11:37,279 --> 00:11:40,800
repo

00:11:38,079 --> 00:11:42,399
and frankly that's two examples of sure

00:11:40,800 --> 00:11:43,519
a dozen other different approaches that

00:11:42,399 --> 00:11:46,399
probably exist out there

00:11:43,519 --> 00:11:47,839
but these are the two we see very often

00:11:46,399 --> 00:11:50,880
now in either case

00:11:47,839 --> 00:11:51,680
we can use those actions code pushes or

00:11:50,880 --> 00:11:53,920
pr's

00:11:51,680 --> 00:11:55,360
as the step where we validate changes

00:11:53,920 --> 00:11:59,120
against existing

00:11:55,360 --> 00:12:02,079
synced policies great so

00:11:59,120 --> 00:12:04,399
now we know when to validate how do we

00:12:02,079 --> 00:12:04,399
do it

00:12:05,920 --> 00:12:09,200
that's where we start incorporating

00:12:07,519 --> 00:12:11,279
validation tooling

00:12:09,200 --> 00:12:12,240
now here are two tools that really fit

00:12:11,279 --> 00:12:14,959
the bill for us

00:12:12,240 --> 00:12:16,800
and the main requirement is we need

00:12:14,959 --> 00:12:19,600
those tools to allow us to run

00:12:16,800 --> 00:12:20,240
some sort of gatekeeper validation

00:12:19,600 --> 00:12:22,480
against

00:12:20,240 --> 00:12:23,440
arbitrary resources and they need to

00:12:22,480 --> 00:12:26,800
allow us to

00:12:23,440 --> 00:12:28,079
specify policy inputs now the first tool

00:12:26,800 --> 00:12:30,160
is something called kept

00:12:28,079 --> 00:12:32,560
it lets you build workflows that work

00:12:30,160 --> 00:12:34,959
with configuration as data

00:12:32,560 --> 00:12:36,959
kept includes gatekeeper validation

00:12:34,959 --> 00:12:38,000
functionality out of the box as part of

00:12:36,959 --> 00:12:40,560
its standard library

00:12:38,000 --> 00:12:41,519
so great that's a great first step now

00:12:40,560 --> 00:12:44,160
kept is interesting

00:12:41,519 --> 00:12:45,760
because it's incredibly opinionated and

00:12:44,160 --> 00:12:47,680
is really focused on

00:12:45,760 --> 00:12:48,959
resource configuration as the primary

00:12:47,680 --> 00:12:51,600
artifact

00:12:48,959 --> 00:12:53,760
it doesn't rely on a templated approach

00:12:51,600 --> 00:12:56,240
or any kind of domain specific language

00:12:53,760 --> 00:12:58,000
it just always wants to maintain the

00:12:56,240 --> 00:13:01,279
final resource

00:12:58,000 --> 00:13:01,760
as the artifact itself i'll be honest

00:13:01,279 --> 00:13:04,720
with you

00:13:01,760 --> 00:13:06,000
the kept mental model can actually sound

00:13:04,720 --> 00:13:09,839
a little bit more complex than

00:13:06,000 --> 00:13:12,560
it is um i try to think of it as a

00:13:09,839 --> 00:13:14,560
simple workflow mechanism to process

00:13:12,560 --> 00:13:16,959
data or process configuration

00:13:14,560 --> 00:13:18,800
um so i can read some configuration in i

00:13:16,959 --> 00:13:20,079
can apply some processing to it like

00:13:18,800 --> 00:13:21,680
gatekeeper validation

00:13:20,079 --> 00:13:23,440
and then i can kick it out to the next

00:13:21,680 --> 00:13:26,000
step

00:13:23,440 --> 00:13:26,720
contest is similar and it's part of opa

00:13:26,000 --> 00:13:29,680
actually

00:13:26,720 --> 00:13:30,560
it also lets you run policy validations

00:13:29,680 --> 00:13:33,040
but in a more

00:13:30,560 --> 00:13:35,200
imperative manner it effectively feels

00:13:33,040 --> 00:13:38,320
like more of just a standard cli tool

00:13:35,200 --> 00:13:40,720
where you can give it some input and see

00:13:38,320 --> 00:13:43,040
how the validation works

00:13:40,720 --> 00:13:44,560
comptest is also general purpose in its

00:13:43,040 --> 00:13:46,720
own way though

00:13:44,560 --> 00:13:48,959
it lets you validate against all manner

00:13:46,720 --> 00:13:50,959
of languages and configuration data

00:13:48,959 --> 00:13:52,560
so for example if you wanted to use comp

00:13:50,959 --> 00:13:55,360
test to validate

00:13:52,560 --> 00:13:56,240
terraform hcl you could use it for that

00:13:55,360 --> 00:13:58,399
purpose

00:13:56,240 --> 00:13:59,440
in our case the conf test approach we're

00:13:58,399 --> 00:14:02,399
going to use is validating

00:13:59,440 --> 00:14:03,440
kubernetes objects against opa policies

00:14:02,399 --> 00:14:06,880
and that's a built-in

00:14:03,440 --> 00:14:06,880
approach with conf test

00:14:09,120 --> 00:14:13,839
so here's the first example using github

00:14:12,000 --> 00:14:15,760
actions with conf test

00:14:13,839 --> 00:14:17,680
now on a code push you can run this

00:14:15,760 --> 00:14:20,160
action on your github repo

00:14:17,680 --> 00:14:22,399
that contains the push changes they'll

00:14:20,160 --> 00:14:23,680
be tested against the existing policy

00:14:22,399 --> 00:14:25,199
objects

00:14:23,680 --> 00:14:27,519
and now there are other actions out

00:14:25,199 --> 00:14:28,959
there that that also use comp tests but

00:14:27,519 --> 00:14:31,279
this one's from the original author so i

00:14:28,959 --> 00:14:33,760
wanted to include it here

00:14:31,279 --> 00:14:35,040
generally speaking github actions are

00:14:33,760 --> 00:14:37,279
pretty flexible

00:14:35,040 --> 00:14:39,040
so updating this approach to work on a

00:14:37,279 --> 00:14:40,399
pr is certainly possible

00:14:39,040 --> 00:14:41,680
or if you want to move it to a different

00:14:40,399 --> 00:14:43,360
stage of the process maybe you want to

00:14:41,680 --> 00:14:46,160
do it on a merge as opposed to

00:14:43,360 --> 00:14:47,440
the initial pull request and again while

00:14:46,160 --> 00:14:50,079
this example is focused

00:14:47,440 --> 00:14:52,160
on github you could develop a similar

00:14:50,079 --> 00:14:55,199
approach for any number of tools like

00:14:52,160 --> 00:14:57,440
the gitlab ci runner or techton

00:14:55,199 --> 00:15:00,079
you name it but in this particular

00:14:57,440 --> 00:15:03,120
example we can actually parameterize

00:15:00,079 --> 00:15:04,639
this github action with a few options

00:15:03,120 --> 00:15:07,279
the files we actually want to validate

00:15:04,639 --> 00:15:09,680
in particular the directory of existing

00:15:07,279 --> 00:15:11,360
policies we want to validate against

00:15:09,680 --> 00:15:13,360
and the namespace we may be testing

00:15:11,360 --> 00:15:14,959
under right because in this case you may

00:15:13,360 --> 00:15:15,600
not be testing in a live cluster

00:15:14,959 --> 00:15:16,800
scenario

00:15:15,600 --> 00:15:18,639
you're just testing to make sure that

00:15:16,800 --> 00:15:21,839
the validations and the language

00:15:18,639 --> 00:15:21,839
constructs kind of match up

00:15:23,839 --> 00:15:28,160
now with kept the order of operations is

00:15:26,480 --> 00:15:31,040
a little bit different

00:15:28,160 --> 00:15:31,519
and that's mostly because it's a general

00:15:31,040 --> 00:15:34,800
purpose

00:15:31,519 --> 00:15:36,079
workflow mechanism so first you create a

00:15:34,800 --> 00:15:37,759
kept workflow

00:15:36,079 --> 00:15:39,680
which is essentially a declaratively

00:15:37,759 --> 00:15:40,880
defined set of functions you're going to

00:15:39,680 --> 00:15:43,920
execute against

00:15:40,880 --> 00:15:45,360
some set of configuration data and those

00:15:43,920 --> 00:15:47,120
functions either come from the cap

00:15:45,360 --> 00:15:48,560
standard library or other custom

00:15:47,120 --> 00:15:50,639
packages

00:15:48,560 --> 00:15:52,000
and remember the gatekeeper validation

00:15:50,639 --> 00:15:53,680
function

00:15:52,000 --> 00:15:56,000
including all the other bits we need to

00:15:53,680 --> 00:15:57,279
read yaml in and process all that

00:15:56,000 --> 00:15:58,880
all that's part of the kept standard

00:15:57,279 --> 00:16:00,560
library so it's great it works out of

00:15:58,880 --> 00:16:02,639
the box

00:16:00,560 --> 00:16:04,079
after you define all the function steps

00:16:02,639 --> 00:16:06,079
or all your workflow steps

00:16:04,079 --> 00:16:07,680
you can export that workflow to a number

00:16:06,079 --> 00:16:09,120
of ci tools

00:16:07,680 --> 00:16:11,120
which is very powerful so in this

00:16:09,120 --> 00:16:11,759
example i'm showing exporting to github

00:16:11,120 --> 00:16:14,639
actions

00:16:11,759 --> 00:16:16,000
but you could also export to gitlab ci

00:16:14,639 --> 00:16:19,440
jenkins

00:16:16,000 --> 00:16:21,759
google cloud build circle ci or tekton

00:16:19,440 --> 00:16:23,600
so it's a pretty flexible tool and again

00:16:21,759 --> 00:16:24,720
i think this is a very general purpose

00:16:23,600 --> 00:16:27,040
workflow mechanism

00:16:24,720 --> 00:16:29,839
even if it does feel a little bit hard

00:16:27,040 --> 00:16:32,399
to wrap your head around it

00:16:29,839 --> 00:16:34,639
now we've talked about some of the

00:16:32,399 --> 00:16:37,920
structure of when to execute this

00:16:34,639 --> 00:16:39,040
but what about repositories

00:16:37,920 --> 00:16:41,040
well remember we talked about

00:16:39,040 --> 00:16:43,199
incorporating the validation network

00:16:41,040 --> 00:16:46,160
flow at the repository level

00:16:43,199 --> 00:16:46,720
but which repo do you run it on now

00:16:46,160 --> 00:16:48,320
there's no

00:16:46,720 --> 00:16:50,079
right or wrong approach here right

00:16:48,320 --> 00:16:51,680
there's a thousand different ways to do

00:16:50,079 --> 00:16:54,639
this but generally speaking

00:16:51,680 --> 00:16:55,040
uh we tend to see infrastructure objects

00:16:54,639 --> 00:16:58,560
like

00:16:55,040 --> 00:16:59,199
these sorts of opa policies live in a

00:16:58,560 --> 00:17:01,440
specific

00:16:59,199 --> 00:17:02,480
infrastructure repo and the other things

00:17:01,440 --> 00:17:05,520
that might live there

00:17:02,480 --> 00:17:08,319
are things like other controllers

00:17:05,520 --> 00:17:10,720
or other infrastructure focused objects

00:17:08,319 --> 00:17:13,039
like network policies

00:17:10,720 --> 00:17:14,240
in that setup you would have a built-in

00:17:13,039 --> 00:17:16,160
validation workflow

00:17:14,240 --> 00:17:18,400
on that infrastructure repo whether

00:17:16,160 --> 00:17:20,319
triggered by push or by pr

00:17:18,400 --> 00:17:21,839
and that infrastructure repo is synced

00:17:20,319 --> 00:17:23,679
using your favorite get ops controller

00:17:21,839 --> 00:17:26,079
to your kubernetes clusters

00:17:23,679 --> 00:17:27,679
so when a push comes in or a pr comes

00:17:26,079 --> 00:17:29,679
into this infrastructure repo

00:17:27,679 --> 00:17:31,760
that validation workflow kicks off

00:17:29,679 --> 00:17:33,120
whether you use kept or whether you use

00:17:31,760 --> 00:17:35,200
comp test

00:17:33,120 --> 00:17:36,720
you find out at that point before that

00:17:35,200 --> 00:17:38,400
thing is synced to your clusters you

00:17:36,720 --> 00:17:39,840
find out if it violates any policies

00:17:38,400 --> 00:17:41,600
that are right there in the cluster with

00:17:39,840 --> 00:17:45,679
it or right there in the repo with it

00:17:41,600 --> 00:17:46,640
by mistake what about application repos

00:17:45,679 --> 00:17:49,200
right that's separate from

00:17:46,640 --> 00:17:51,360
infrastructure so we tend to see

00:17:49,200 --> 00:17:52,720
app repos whether they get delivered as

00:17:51,360 --> 00:17:54,480
home charts or otherwise

00:17:52,720 --> 00:17:57,200
those are also synced directly using the

00:17:54,480 --> 00:17:59,440
same git ops infrastructure

00:17:57,200 --> 00:18:01,760
in this case the validation workflow

00:17:59,440 --> 00:18:04,080
runs at the app repo level

00:18:01,760 --> 00:18:04,960
but the first step of that validation

00:18:04,080 --> 00:18:07,760
workflow

00:18:04,960 --> 00:18:09,840
is to clone the policies from the

00:18:07,760 --> 00:18:12,640
infrastructure repo

00:18:09,840 --> 00:18:14,400
that way you're getting the latest stuff

00:18:12,640 --> 00:18:15,760
that's been synced to the clusters

00:18:14,400 --> 00:18:16,880
so you know the policies that have made

00:18:15,760 --> 00:18:17,840
it to the clusters because they're in

00:18:16,880 --> 00:18:19,600
the repo they were

00:18:17,840 --> 00:18:21,360
merged in or committed in and they

00:18:19,600 --> 00:18:23,440
passed their validation step

00:18:21,360 --> 00:18:25,360
and we pull those in as part of this app

00:18:23,440 --> 00:18:27,520
repo validation workflow

00:18:25,360 --> 00:18:28,880
because the policies may be written at

00:18:27,520 --> 00:18:30,400
the infrastructure level

00:18:28,880 --> 00:18:32,320
but they still may correspond to

00:18:30,400 --> 00:18:35,280
application level objects

00:18:32,320 --> 00:18:35,840
like pods and services and deployments

00:18:35,280 --> 00:18:39,120
jobs

00:18:35,840 --> 00:18:41,760
you name it so now we can make sure that

00:18:39,120 --> 00:18:43,440
these application changes are being

00:18:41,760 --> 00:18:47,200
validated against

00:18:43,440 --> 00:18:48,960
the infrastructure repo policies

00:18:47,200 --> 00:18:50,480
when you get through all this you know

00:18:48,960 --> 00:18:51,600
what you find is that with the policies

00:18:50,480 --> 00:18:53,919
in the cluster

00:18:51,600 --> 00:18:56,559
we're protected against violations from

00:18:53,919 --> 00:18:58,000
imperative activities like coupe ctl

00:18:56,559 --> 00:19:01,039
commands or someone just

00:18:58,000 --> 00:19:02,960
you know editing a config live but using

00:19:01,039 --> 00:19:04,160
these validation workflows we're also

00:19:02,960 --> 00:19:06,400
protected against

00:19:04,160 --> 00:19:07,280
violations from getting committed to

00:19:06,400 --> 00:19:08,720
synced repos

00:19:07,280 --> 00:19:10,480
so we've caught this problem and we

00:19:08,720 --> 00:19:12,799
moved it up much sooner which is what we

00:19:10,480 --> 00:19:12,799
wanted

00:19:13,679 --> 00:19:19,520
now let's talk about how to create and

00:19:16,000 --> 00:19:19,520
test these policy objects

00:19:19,919 --> 00:19:23,520
the renko playground is a great place to

00:19:21,600 --> 00:19:25,280
start in fact i used it quite a bit to

00:19:23,520 --> 00:19:27,360
develop a bunch of the policies i've

00:19:25,280 --> 00:19:29,679
developed that are up on github

00:19:27,360 --> 00:19:31,760
now it's free and easy to use um it lets

00:19:29,679 --> 00:19:33,200
you provide some structured inputs and

00:19:31,760 --> 00:19:33,679
it gives you a pretty good editor work

00:19:33,200 --> 00:19:35,440
with

00:19:33,679 --> 00:19:37,440
and lets you share your code with other

00:19:35,440 --> 00:19:39,440
folks if you're trying to collaborate

00:19:37,440 --> 00:19:41,200
but what i did find is that if you need

00:19:39,440 --> 00:19:42,880
complicated inputs like

00:19:41,200 --> 00:19:44,880
a whole bunch of existing resources from

00:19:42,880 --> 00:19:46,960
within your cluster or if you want to do

00:19:44,880 --> 00:19:50,320
any kind of in-cluster testing

00:19:46,960 --> 00:19:50,320
it's only going to get you so far

00:19:51,520 --> 00:19:55,520
so the next step is integrating opa your

00:19:54,559 --> 00:19:56,720
open policy agent

00:19:55,520 --> 00:19:59,760
into your favorite development

00:19:56,720 --> 00:20:01,520
environment as the next best step

00:19:59,760 --> 00:20:03,120
now depending on your environment and

00:20:01,520 --> 00:20:05,600
the plug-in support for it

00:20:03,120 --> 00:20:07,520
you may have support for syntax

00:20:05,600 --> 00:20:12,159
highlighting

00:20:07,520 --> 00:20:12,159
query evaluation or even policy coverage

00:20:12,240 --> 00:20:16,559
i think with vs code and sublime i think

00:20:15,520 --> 00:20:18,400
have the most

00:20:16,559 --> 00:20:20,320
coverage in terms of capability but

00:20:18,400 --> 00:20:21,440
you'd have to check and see

00:20:20,320 --> 00:20:23,440
how it is for your individual

00:20:21,440 --> 00:20:24,799
environment

00:20:23,440 --> 00:20:26,720
now the nice thing is that this gives

00:20:24,799 --> 00:20:28,559
you a bit more control and flexibility

00:20:26,720 --> 00:20:29,200
on inputs and on testing which is

00:20:28,559 --> 00:20:31,039
important

00:20:29,200 --> 00:20:32,799
right you want to be able to provide

00:20:31,039 --> 00:20:34,159
structured inputs that you make sure

00:20:32,799 --> 00:20:35,200
your testing and you're scoping

00:20:34,159 --> 00:20:37,120
correctly when you're

00:20:35,200 --> 00:20:40,320
defining policies you're defining

00:20:37,120 --> 00:20:40,320
objects they're going to operate on

00:20:41,200 --> 00:20:47,520
but don't forget there is no substitute

00:20:44,880 --> 00:20:49,520
for testing against the real thing

00:20:47,520 --> 00:20:51,360
and i know that's because i did a lot of

00:20:49,520 --> 00:20:52,640
my work in the rego playground

00:20:51,360 --> 00:20:54,320
and there were just some subtle

00:20:52,640 --> 00:20:56,000
differences when i went to move into

00:20:54,320 --> 00:20:58,159
gatekeeper and kubernetes

00:20:56,000 --> 00:21:01,120
so whether you can run kubernetes

00:20:58,159 --> 00:21:03,360
locally or you can fire up a cluster

00:21:01,120 --> 00:21:04,400
this is the best approach right run

00:21:03,360 --> 00:21:07,039
kubernetes

00:21:04,400 --> 00:21:07,840
run opa gatekeeper and try to push those

00:21:07,039 --> 00:21:11,280
changes in

00:21:07,840 --> 00:21:14,240
right try it there also try out kept

00:21:11,280 --> 00:21:15,679
and conf test locally as well you could

00:21:14,240 --> 00:21:16,240
incorporate and try out those workflows

00:21:15,679 --> 00:21:17,840
as well

00:21:16,240 --> 00:21:19,919
to see how the local validation is

00:21:17,840 --> 00:21:22,720
working compared to the kind of cluster

00:21:19,919 --> 00:21:24,799
level validation

00:21:22,720 --> 00:21:27,280
the point of all this testing is that

00:21:24,799 --> 00:21:28,159
you really want to become as familiar as

00:21:27,280 --> 00:21:30,799
possible

00:21:28,159 --> 00:21:32,480
with the ways in which your approach

00:21:30,799 --> 00:21:33,760
might fail the ways in which your policy

00:21:32,480 --> 00:21:34,559
might not catch all the scenarios you

00:21:33,760 --> 00:21:36,799
care about

00:21:34,559 --> 00:21:38,320
or might not be structured appropriately

00:21:36,799 --> 00:21:40,080
right you want to understand all the

00:21:38,320 --> 00:21:41,600
different failure scenarios because

00:21:40,080 --> 00:21:43,520
you're writing security infrastructure

00:21:41,600 --> 00:21:46,480
you've got to make sure it's bulletproof

00:21:43,520 --> 00:21:46,480
as much as possible

00:21:47,679 --> 00:21:52,080
so now let's talk about some example

00:21:49,440 --> 00:21:54,720
policies and i will tell you personally

00:21:52,080 --> 00:21:56,159
no matter how many docs i read examples

00:21:54,720 --> 00:21:56,480
were the thing that saved me time and

00:21:56,159 --> 00:21:58,880
again

00:21:56,480 --> 00:22:02,320
because it was helpful to see how things

00:21:58,880 --> 00:22:02,320
worked when we were doing this work

00:22:02,559 --> 00:22:06,640
so the first couple are direct from the

00:22:04,320 --> 00:22:08,559
open policy agent project itself

00:22:06,640 --> 00:22:10,320
as part of gatekeeper they include a

00:22:08,559 --> 00:22:12,159
number of getting started examples

00:22:10,320 --> 00:22:13,919
and this lets you create constraint

00:22:12,159 --> 00:22:14,559
templates and constraints around things

00:22:13,919 --> 00:22:17,200
like

00:22:14,559 --> 00:22:18,960
requiring specific labels or which

00:22:17,200 --> 00:22:20,240
container image repos are allowed or not

00:22:18,960 --> 00:22:21,600
allowed

00:22:20,240 --> 00:22:25,039
setting container limits and making sure

00:22:21,600 --> 00:22:26,400
those are included in your pod specs

00:22:25,039 --> 00:22:28,480
or things like the unique surface

00:22:26,400 --> 00:22:30,480
selector i talked about earlier

00:22:28,480 --> 00:22:31,600
now if you go to the gatekeeper library

00:22:30,480 --> 00:22:34,640
that's actually the even

00:22:31,600 --> 00:22:35,520
bigger community-owned library of policy

00:22:34,640 --> 00:22:37,039
objects

00:22:35,520 --> 00:22:39,280
it includes the general examples from

00:22:37,039 --> 00:22:42,080
above but also others like

00:22:39,280 --> 00:22:43,520
forcing https only connections

00:22:42,080 --> 00:22:45,760
disallowed tags

00:22:43,520 --> 00:22:46,880
setting unique ingress and most

00:22:45,760 --> 00:22:48,880
importantly

00:22:46,880 --> 00:22:50,640
it takes a bunch of the existing pod

00:22:48,880 --> 00:22:53,440
security policy approaches

00:22:50,640 --> 00:22:55,120
and re-implements them as constraints

00:22:53,440 --> 00:22:57,440
and constraint templates

00:22:55,120 --> 00:22:59,600
so this is a great way to see how pot

00:22:57,440 --> 00:23:02,320
security policies are turned into these

00:22:59,600 --> 00:23:05,280
opa and gatekeeper objects and become

00:23:02,320 --> 00:23:07,200
part of admission control

00:23:05,280 --> 00:23:09,520
additionally i've also written a number

00:23:07,200 --> 00:23:10,880
of gatekeeper policies for istio

00:23:09,520 --> 00:23:12,640
resources to enforce

00:23:10,880 --> 00:23:14,080
service mesh structure and i've done

00:23:12,640 --> 00:23:15,520
that for open source systeo

00:23:14,080 --> 00:23:17,120
as well as for our commercial

00:23:15,520 --> 00:23:18,159
distribution of istio called antho

00:23:17,120 --> 00:23:20,080
service mesh

00:23:18,159 --> 00:23:22,799
and in both those cases i include things

00:23:20,080 --> 00:23:25,120
like enforcing mtls activation

00:23:22,799 --> 00:23:26,320
or disallowing you know public access to

00:23:25,120 --> 00:23:27,760
your services

00:23:26,320 --> 00:23:31,039
enforcing specific port naming

00:23:27,760 --> 00:23:33,919
conventions authorization controls

00:23:31,039 --> 00:23:35,760
or making sure mtls is on for certain

00:23:33,919 --> 00:23:37,520
namespaces and services

00:23:35,760 --> 00:23:39,120
so there are a lot of examples you can

00:23:37,520 --> 00:23:42,320
mine from if you're trying to build

00:23:39,120 --> 00:23:42,320
these policy objects

00:23:42,640 --> 00:23:46,400
now let's talk about the bigger picture

00:23:43,840 --> 00:23:46,400
for a second

00:23:47,039 --> 00:23:51,360
when you think about running gatekeeper

00:23:49,679 --> 00:23:53,200
there is a lot more than

00:23:51,360 --> 00:23:55,200
just writing the policies there's

00:23:53,200 --> 00:23:57,360
there's still some complexity around

00:23:55,200 --> 00:23:59,520
how you run the enforcement aspect as

00:23:57,360 --> 00:24:00,799
well part of that starts with how do you

00:23:59,520 --> 00:24:02,240
scope the enforcement

00:24:00,799 --> 00:24:04,080
you've got to make sure you're focused

00:24:02,240 --> 00:24:06,240
on just the right resources

00:24:04,080 --> 00:24:08,240
within the right namespaces and maybe

00:24:06,240 --> 00:24:09,840
using the appropriate correct labels to

00:24:08,240 --> 00:24:12,559
filter your objects down

00:24:09,840 --> 00:24:13,279
because you don't want your policies to

00:24:12,559 --> 00:24:15,679
be

00:24:13,279 --> 00:24:17,760
incredibly broad right that introduces

00:24:15,679 --> 00:24:19,360
potential failure scenarios

00:24:17,760 --> 00:24:21,039
you want them to be as specific and

00:24:19,360 --> 00:24:23,600
narrowly focused as possible

00:24:21,039 --> 00:24:25,679
and instead use things like multiple

00:24:23,600 --> 00:24:27,440
constraints to include

00:24:25,679 --> 00:24:29,120
too many types or different labels in

00:24:27,440 --> 00:24:30,640
different matching scenarios

00:24:29,120 --> 00:24:32,320
you're better off having one good

00:24:30,640 --> 00:24:33,919
constraint template and a bunch of

00:24:32,320 --> 00:24:34,960
constraints to match what you want to

00:24:33,919 --> 00:24:36,559
enforce against

00:24:34,960 --> 00:24:39,120
it also makes it easier to manage over

00:24:36,559 --> 00:24:40,640
time you should also really get

00:24:39,120 --> 00:24:42,480
comfortable with the idea of failing

00:24:40,640 --> 00:24:44,720
open versus failing closed

00:24:42,480 --> 00:24:46,240
right this is the idea where if a

00:24:44,720 --> 00:24:48,240
violation is thrown

00:24:46,240 --> 00:24:50,080
is your object still admitted or is it

00:24:48,240 --> 00:24:51,679
actually rejected from the cluster

00:24:50,080 --> 00:24:53,200
and understanding that distinction

00:24:51,679 --> 00:24:55,360
understanding that failure scenario

00:24:53,200 --> 00:24:56,559
is critically important because again

00:24:55,360 --> 00:24:58,159
we're trying to create a security

00:24:56,559 --> 00:24:59,440
perimeter here and make sure

00:24:58,159 --> 00:25:02,320
bad things don't happen to our

00:24:59,440 --> 00:25:02,320
production environments

00:25:02,880 --> 00:25:07,279
you also want to evaluate and understand

00:25:05,600 --> 00:25:08,080
how do you synchronize resources to

00:25:07,279 --> 00:25:09,679
gatekeeper

00:25:08,080 --> 00:25:11,840
so if you remember earlier we talked

00:25:09,679 --> 00:25:14,720
about one of these policies being

00:25:11,840 --> 00:25:16,320
enforcing unique service naming setup

00:25:14,720 --> 00:25:18,480
well in order to enforce unique service

00:25:16,320 --> 00:25:20,159
naming we have to make sure that

00:25:18,480 --> 00:25:21,679
gatekeeper can read all the existing

00:25:20,159 --> 00:25:23,200
services that are already in your

00:25:21,679 --> 00:25:24,559
cluster

00:25:23,200 --> 00:25:26,480
in order to do so you have to

00:25:24,559 --> 00:25:28,240
synchronize those services into the

00:25:26,480 --> 00:25:29,840
gatekeeper namespace

00:25:28,240 --> 00:25:31,360
so that's an important thing to be aware

00:25:29,840 --> 00:25:33,520
of as you're trying to build this

00:25:31,360 --> 00:25:35,440
the more resources you want to cover the

00:25:33,520 --> 00:25:36,960
more input that you might need

00:25:35,440 --> 00:25:38,559
means you have to synchronize stuff into

00:25:36,960 --> 00:25:40,640
that namespace appropriately

00:25:38,559 --> 00:25:42,000
again just add some runtime complexity

00:25:40,640 --> 00:25:44,159
to be aware of

00:25:42,000 --> 00:25:46,000
and then finally who controls

00:25:44,159 --> 00:25:47,600
constraints and constraint templates

00:25:46,000 --> 00:25:49,279
right there are back controls that are

00:25:47,600 --> 00:25:50,960
really important to understand here

00:25:49,279 --> 00:25:53,279
because you want to make sure that only

00:25:50,960 --> 00:25:56,400
the right set of folks have access to

00:25:53,279 --> 00:25:57,679
enforcing rules or denying admission

00:25:56,400 --> 00:26:00,159
and writing those rules in those

00:25:57,679 --> 00:26:00,159
policies

00:26:01,840 --> 00:26:04,960
thinking even bigger and if you take a

00:26:03,279 --> 00:26:06,880
step back there's

00:26:04,960 --> 00:26:08,400
like a broader idea around shifting a

00:26:06,880 --> 00:26:10,159
lot of security stuff left

00:26:08,400 --> 00:26:12,559
right bringing it earlier in our

00:26:10,159 --> 00:26:13,679
pipeline of development

00:26:12,559 --> 00:26:16,240
we talked about policy enforcement

00:26:13,679 --> 00:26:17,600
obviously today but there's a whole host

00:26:16,240 --> 00:26:20,000
of other aspects too

00:26:17,600 --> 00:26:21,120
right things like signing your container

00:26:20,000 --> 00:26:24,080
images

00:26:21,120 --> 00:26:25,760
and then validating those signatures at

00:26:24,080 --> 00:26:28,559
deploy time to make sure that you're

00:26:25,760 --> 00:26:30,480
deploying only signed objects

00:26:28,559 --> 00:26:31,520
scanning containers for vulnerabilities

00:26:30,480 --> 00:26:32,240
to make sure you're not including

00:26:31,520 --> 00:26:34,880
anything

00:26:32,240 --> 00:26:37,120
that may be a potential security risk

00:26:34,880 --> 00:26:39,279
having fine-grained audit controls

00:26:37,120 --> 00:26:41,200
or even encrypting container images

00:26:39,279 --> 00:26:41,840
these are all really important aspects

00:26:41,200 --> 00:26:43,120
and

00:26:41,840 --> 00:26:46,559
you know i'm just touching on them right

00:26:43,120 --> 00:26:47,919
now but if you think of security in kind

00:26:46,559 --> 00:26:49,200
of cloud-native environments we want to

00:26:47,919 --> 00:26:51,679
take a layered approach

00:26:49,200 --> 00:26:53,360
and every layer adds a little bit more

00:26:51,679 --> 00:26:55,200
security and gives us a more secure

00:26:53,360 --> 00:26:56,880
platform that we build on top of

00:26:55,200 --> 00:26:58,640
so these things as we do more and more

00:26:56,880 --> 00:27:00,400
of them as we incorporate them

00:26:58,640 --> 00:27:01,840
earlier in the life cycle of our

00:27:00,400 --> 00:27:04,240
planning and our products

00:27:01,840 --> 00:27:07,840
we build a better layer set of layers

00:27:04,240 --> 00:27:09,600
around our infrastructure

00:27:07,840 --> 00:27:12,000
now the last thing i want to close with

00:27:09,600 --> 00:27:13,600
is a tweet from brian grant

00:27:12,000 --> 00:27:15,200
one of the original authors of

00:27:13,600 --> 00:27:17,520
kubernetes itself

00:27:15,200 --> 00:27:19,520
and i only include this because it was

00:27:17,520 --> 00:27:21,200
very timely it was a few days ago

00:27:19,520 --> 00:27:22,720
and he's talking about policy

00:27:21,200 --> 00:27:23,919
enforcement at multiple enforcement

00:27:22,720 --> 00:27:26,320
points

00:27:23,919 --> 00:27:27,600
and i think this is really indicative of

00:27:26,320 --> 00:27:29,919
a trend and a shift

00:27:27,600 --> 00:27:31,440
where we're trying to get things that we

00:27:29,919 --> 00:27:32,240
know can happen at deploy time and at

00:27:31,440 --> 00:27:34,640
runtime

00:27:32,240 --> 00:27:36,559
to happen much sooner in our pipelines

00:27:34,640 --> 00:27:38,320
because it shortens that feedback loop

00:27:36,559 --> 00:27:39,919
but it also gives us again that layered

00:27:38,320 --> 00:27:40,799
approach where we know if we didn't

00:27:39,919 --> 00:27:42,799
catch it here

00:27:40,799 --> 00:27:44,559
we'll catch it over there and that gives

00:27:42,799 --> 00:27:45,279
us good peace of mind as we start to

00:27:44,559 --> 00:27:47,520
think about

00:27:45,279 --> 00:27:49,760
how we scale these incredibly large and

00:27:47,520 --> 00:27:51,440
complicated production deployments

00:27:49,760 --> 00:27:53,120
i thought it was great it was again very

00:27:51,440 --> 00:27:55,919
timely as i was thinking about putting

00:27:53,120 --> 00:27:55,919
together this talk

00:27:56,080 --> 00:28:00,480
and so that's it for me um questions

00:27:58,799 --> 00:28:00,960
comments concerns i'd love to hear from

00:28:00,480 --> 00:28:04,240
you

00:28:00,960 --> 00:28:06,880
again you can find me at crcs mnky

00:28:04,240 --> 00:28:08,640
uh that's circus monkey minus the vowels

00:28:06,880 --> 00:28:10,480
on twitter or github

00:28:08,640 --> 00:28:11,840
uh hit me up i'm happy to chat i'd love

00:28:10,480 --> 00:28:12,399
to hear more about what you're working

00:28:11,840 --> 00:28:14,840
on

00:28:12,399 --> 00:28:17,840
and how it fits with policy enforcement

00:28:14,840 --> 00:28:17,840

YouTube URL: https://www.youtube.com/watch?v=XvQZ3ZDjRls


