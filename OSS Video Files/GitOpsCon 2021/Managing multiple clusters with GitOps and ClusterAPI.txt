Title: Managing multiple clusters with GitOps and ClusterAPI
Publication date: 2021-05-04
Playlist: GitOpsCon 2021
Description: 
	We will show how to create and manage the lifecycle of a cluster fleet in a GitOps way using native Kubernetes primitives and objects, utilizing a seed cluster to spin up a series of dedicated managed worker clusters to run our application of choice. Since we leverage the popular ArgoCD project, we can easily visualize the entire fleet thru the Argo UI. We will show how reconciliation works by enforcing both infrastructure and application desired state.
Captions: 
	00:00:00,160 --> 00:00:03,840
so folks this is alessandro voza from

00:00:02,879 --> 00:00:05,120
microsoft

00:00:03,840 --> 00:00:06,640
he's going to talk to us he's a

00:00:05,120 --> 00:00:08,080
principal software engineer at microsoft

00:00:06,640 --> 00:00:08,960
he's going to talk to us today about

00:00:08,080 --> 00:00:10,639
managing

00:00:08,960 --> 00:00:13,440
uh multiple clusters with get ops and

00:00:10,639 --> 00:00:16,880
cluster api

00:00:13,440 --> 00:00:20,720
are we live already yes ah

00:00:16,880 --> 00:00:24,480
of course of course we are live and i'm

00:00:20,720 --> 00:00:25,439
a fool uh thanks chris for organizing

00:00:24,480 --> 00:00:29,119
this thanks to

00:00:25,439 --> 00:00:32,239
the the gitobs working group

00:00:29,119 --> 00:00:35,280
sorry i'm late i thought i was still

00:00:32,239 --> 00:00:38,160
uh in the other session so

00:00:35,280 --> 00:00:39,280
um let's see how it goes right so this

00:00:38,160 --> 00:00:43,280
is a live

00:00:39,280 --> 00:00:43,600
session right so it's um i didn't record

00:00:43,280 --> 00:00:45,280
then

00:00:43,600 --> 00:00:47,200
i did record some screencasts so let's

00:00:45,280 --> 00:00:50,719
see how it goes it's uh

00:00:47,200 --> 00:00:53,039
it's gonna be fun um and yes i

00:00:50,719 --> 00:00:54,480
share the i shared the link to the

00:00:53,039 --> 00:00:58,640
slides both

00:00:54,480 --> 00:01:01,600
onedrive and google drive on on slack so

00:00:58,640 --> 00:01:03,359
a cool program bear with me it's going

00:01:01,600 --> 00:01:06,479
to be variants on i mean

00:01:03,359 --> 00:01:06,479
not much uh

00:01:06,560 --> 00:01:10,240
theory of githubs or class api but i'll

00:01:09,360 --> 00:01:12,400
show you

00:01:10,240 --> 00:01:13,840
what to do with this these two things

00:01:12,400 --> 00:01:16,479
together right so

00:01:13,840 --> 00:01:16,880
can you still see my screen yes yeah

00:01:16,479 --> 00:01:20,000
okay

00:01:16,880 --> 00:01:22,880
okay so so we're going to talk about uh

00:01:20,000 --> 00:01:23,360
little projects on mine and the other

00:01:22,880 --> 00:01:27,119
people

00:01:23,360 --> 00:01:28,159
microsoft and of course like in the cncf

00:01:27,119 --> 00:01:31,680
community

00:01:28,159 --> 00:01:33,360
um uniting git ups and class api that's

00:01:31,680 --> 00:01:36,240
been mentioned before

00:01:33,360 --> 00:01:36,799
uh today uh custom api is is a great

00:01:36,240 --> 00:01:40,159
project

00:01:36,799 --> 00:01:42,240
is using a lot of places to

00:01:40,159 --> 00:01:44,399
tame the complexity of multiple clusters

00:01:42,240 --> 00:01:47,119
right or or today or to

00:01:44,399 --> 00:01:49,439
manage clusters through native

00:01:47,119 --> 00:01:53,280
kubernetes

00:01:49,439 --> 00:01:54,640
objects primitives right so so shortly

00:01:53,280 --> 00:01:57,520
i don't know if it's going to take the

00:01:54,640 --> 00:02:00,079
whole half an hour but we'll definitely

00:01:57,520 --> 00:02:01,040
uh try to stick to the time so however

00:02:00,079 --> 00:02:04,159
long you need

00:02:01,040 --> 00:02:08,399
yeah fine thanks uh class api watercolor

00:02:04,159 --> 00:02:10,720
api how to combine githubs and class api

00:02:08,399 --> 00:02:12,000
little demo that's recorded so that's

00:02:10,720 --> 00:02:15,760
that's that's better

00:02:12,000 --> 00:02:19,440
and so wrap up in qa um

00:02:15,760 --> 00:02:23,200
i'm a cncf ambassador i've just arrived

00:02:19,440 --> 00:02:25,360
um uh woody so

00:02:23,200 --> 00:02:27,280
i've been cupped for more than two years

00:02:25,360 --> 00:02:30,720
an ambassador is awesome

00:02:27,280 --> 00:02:34,959
because i get to serve my community

00:02:30,720 --> 00:02:37,760
in amsterdam and and across the globe

00:02:34,959 --> 00:02:38,160
and it's been a wild ride lots of fun i

00:02:37,760 --> 00:02:41,040
met

00:02:38,160 --> 00:02:41,920
amazing people absolutely the best

00:02:41,040 --> 00:02:44,080
people ever

00:02:41,920 --> 00:02:45,840
and this is one of the best community

00:02:44,080 --> 00:02:48,160
ever so

00:02:45,840 --> 00:02:50,080
if you ask me if you ask me what is the

00:02:48,160 --> 00:02:53,599
best what is biggest achievement

00:02:50,080 --> 00:02:56,959
i ever did well this is it 2019 we

00:02:53,599 --> 00:02:58,560
organized the the one the first and so

00:02:56,959 --> 00:03:00,400
far the only

00:02:58,560 --> 00:03:03,040
uh kubernetes community days in

00:03:00,400 --> 00:03:05,440
amsterdam and uh on stage there is the

00:03:03,040 --> 00:03:06,319
uh the amazing android randall now at

00:03:05,440 --> 00:03:09,680
kimwalk

00:03:06,319 --> 00:03:10,159
and soon to be in microsoft uh we had a

00:03:09,680 --> 00:03:12,239
great

00:03:10,159 --> 00:03:14,400
first edition of course we had to skip

00:03:12,239 --> 00:03:17,840
2020 we skipped 2021

00:03:14,400 --> 00:03:20,159
we're gonna come back in 22

00:03:17,840 --> 00:03:21,440
with vengeance and the bigger than ever

00:03:20,159 --> 00:03:23,840
um

00:03:21,440 --> 00:03:25,879
and safer than ever of course uh edition

00:03:23,840 --> 00:03:27,599
so stay tuned

00:03:25,879 --> 00:03:28,560
community.cncf.io is where you're gonna

00:03:27,599 --> 00:03:31,040
see

00:03:28,560 --> 00:03:32,640
uh this event and all the other

00:03:31,040 --> 00:03:34,799
kubernetes community days

00:03:32,640 --> 00:03:37,120
uh around the world popping up in the

00:03:34,799 --> 00:03:40,480
coming months

00:03:37,120 --> 00:03:41,599
the cluster api so i don't pretend i

00:03:40,480 --> 00:03:43,920
will give you

00:03:41,599 --> 00:03:46,000
a great intro on cluster api because

00:03:43,920 --> 00:03:48,080
it's there's so much out there

00:03:46,000 --> 00:03:51,360
every cubicle there's a two or three or

00:03:48,080 --> 00:03:54,720
more talks about it is an entire

00:03:51,360 --> 00:03:58,239
sig dedicated to it um so

00:03:54,720 --> 00:04:01,599
i love the project is extremely cool

00:03:58,239 --> 00:04:04,720
got a very nice logo right there uh

00:04:01,599 --> 00:04:06,480
which means basically kubernetes all the

00:04:04,720 --> 00:04:09,120
way down right so

00:04:06,480 --> 00:04:10,720
um it's kubernetes on top of kubernetes

00:04:09,120 --> 00:04:12,799
on top of kubernetes

00:04:10,720 --> 00:04:14,239
because that's what we do as a community

00:04:12,799 --> 00:04:16,560
we just lost so much

00:04:14,239 --> 00:04:18,479
and the paradigm of kubernetes are so

00:04:16,560 --> 00:04:21,440
universal right so api

00:04:18,479 --> 00:04:24,400
fields and the controller loop they're

00:04:21,440 --> 00:04:28,160
just so universal so useful that that

00:04:24,400 --> 00:04:30,000
naturally was um was a natural extension

00:04:28,160 --> 00:04:32,160
of the project to to also manage the

00:04:30,000 --> 00:04:35,440
cluster where kubernetes runs

00:04:32,160 --> 00:04:38,479
in a declarative way right so to the

00:04:35,440 --> 00:04:42,880
goal of the project is to

00:04:38,479 --> 00:04:46,400
adopt this great paradigm um

00:04:42,880 --> 00:04:49,040
so all the kubernetes uh ideas

00:04:46,400 --> 00:04:49,759
uh for the creation configuration

00:04:49,040 --> 00:04:53,520
management

00:04:49,759 --> 00:04:56,880
of masters so releasing

00:04:53,520 --> 00:04:58,479
2019 now just released a few months ago

00:04:56,880 --> 00:05:01,360
the alpha 4 so

00:04:58,479 --> 00:05:02,880
these are highly experimental this is

00:05:01,360 --> 00:05:05,360
not something you

00:05:02,880 --> 00:05:06,240
can possibly think of using production

00:05:05,360 --> 00:05:08,479
yourself

00:05:06,240 --> 00:05:09,840
although some of the providers are so

00:05:08,479 --> 00:05:12,479
mature that

00:05:09,840 --> 00:05:13,600
that big companies are using them for uh

00:05:12,479 --> 00:05:16,720
for serious stuff

00:05:13,600 --> 00:05:18,479
right so uh the old project is on github

00:05:16,720 --> 00:05:21,600
of course is part of the

00:05:18,479 --> 00:05:24,880
kubernetes project uh is sponsored by

00:05:21,600 --> 00:05:25,759
an sig so a special interest group and

00:05:24,880 --> 00:05:29,039
the core of it

00:05:25,759 --> 00:05:32,560
is really the cluster ctl api so

00:05:29,039 --> 00:05:35,840
we'll see how it works and i have a uh

00:05:32,560 --> 00:05:37,919
example uh repo out there and uh

00:05:35,840 --> 00:05:40,880
then i'll show you in the in the demo so

00:05:37,919 --> 00:05:40,880
if you want to know more

00:05:40,960 --> 00:05:46,479
i encourage you to uh follow

00:05:44,080 --> 00:05:47,440
uh the session for uh from from marcel

00:05:46,479 --> 00:05:50,160
and jason

00:05:47,440 --> 00:05:51,360
uh on friday it's a great session and

00:05:50,160 --> 00:05:53,280
for sure you're gonna get

00:05:51,360 --> 00:05:55,039
uh everything that you need it's a deep

00:05:53,280 --> 00:05:57,120
dive in it and these people are

00:05:55,039 --> 00:05:57,680
contributors and they know way more than

00:05:57,120 --> 00:06:00,960
me

00:05:57,680 --> 00:06:02,000
and last time at comic con uh you love

00:06:00,960 --> 00:06:04,319
00:06:02,000 --> 00:06:05,199
is cecile from microsoft and idea from

00:06:04,319 --> 00:06:08,720
vmware

00:06:05,199 --> 00:06:10,560
also um deep dive and i

00:06:08,720 --> 00:06:11,840
learn a lot watching that talk and

00:06:10,560 --> 00:06:12,880
please go there

00:06:11,840 --> 00:06:15,680
there's a there's a link in the

00:06:12,880 --> 00:06:16,639
presentation so so what is because api

00:06:15,680 --> 00:06:21,360
right so what is

00:06:16,639 --> 00:06:24,400
at the core is a way to manage clusters

00:06:21,360 --> 00:06:24,400
in a declarative way

00:06:24,720 --> 00:06:29,280
native objects uh native equivalence

00:06:26,880 --> 00:06:32,160
objects so these are objects describing

00:06:29,280 --> 00:06:34,240
uh the marriage control plane object

00:06:32,160 --> 00:06:36,240
that's describing all the machine pool

00:06:34,240 --> 00:06:37,520
all the machines that form a cluster and

00:06:36,240 --> 00:06:40,720
so on and so forth

00:06:37,520 --> 00:06:42,720
at the very core is a bunch of uh

00:06:40,720 --> 00:06:45,199
controller managers right so running on

00:06:42,720 --> 00:06:48,479
a management cluster

00:06:45,199 --> 00:06:50,319
that can be anything kind i use aks

00:06:48,479 --> 00:06:52,720
because it's the easiest thing for me

00:06:50,319 --> 00:06:56,240
being been a microsoft engineer

00:06:52,720 --> 00:07:00,319
but you should be free to

00:06:56,240 --> 00:07:03,599
use any compliant kubernetes cluster

00:07:00,319 --> 00:07:04,639
out there which is at least 114 or

00:07:03,599 --> 00:07:07,919
something like that

00:07:04,639 --> 00:07:08,800
um to to see to use as a management

00:07:07,919 --> 00:07:13,280
class just to

00:07:08,800 --> 00:07:16,400
to host the the objects that will form

00:07:13,280 --> 00:07:17,280
um form the core of the workload cluster

00:07:16,400 --> 00:07:20,560
you want to deploy

00:07:17,280 --> 00:07:22,720
right so so the only requirement here is

00:07:20,560 --> 00:07:25,280
really that this measured cluster

00:07:22,720 --> 00:07:26,639
can talk for example to the vmware

00:07:25,280 --> 00:07:29,520
vsphere api

00:07:26,639 --> 00:07:30,000
or azure api so make sure that the

00:07:29,520 --> 00:07:31,680
cluster

00:07:30,000 --> 00:07:34,000
you're using as mentioned cluster can

00:07:31,680 --> 00:07:35,759
actually perform

00:07:34,000 --> 00:07:37,120
those actions so if you're using a

00:07:35,759 --> 00:07:38,639
cluster

00:07:37,120 --> 00:07:40,400
that is firewalled of course then you

00:07:38,639 --> 00:07:42,720
can talk to to the

00:07:40,400 --> 00:07:44,240
public api with azure there's no way you

00:07:42,720 --> 00:07:46,160
can create a

00:07:44,240 --> 00:07:47,759
cluster in azure and similarly you

00:07:46,160 --> 00:07:48,479
should you have to make sure that you

00:07:47,759 --> 00:07:51,919
have the right

00:07:48,479 --> 00:07:53,599
um credential to create clusters and

00:07:51,919 --> 00:07:55,199
in the demo ripple you will see there is

00:07:53,599 --> 00:07:58,240
a there's a way to use it

00:07:55,199 --> 00:08:01,520
with azure there are many

00:07:58,240 --> 00:08:03,520
providers out there uh providers are

00:08:01,520 --> 00:08:04,879
extension to the core of cluster api

00:08:03,520 --> 00:08:08,240
what really makes

00:08:04,879 --> 00:08:11,199
this thing interesting which is um

00:08:08,240 --> 00:08:12,400
it's sort of uh like a cri is an

00:08:11,199 --> 00:08:15,599
interface between

00:08:12,400 --> 00:08:16,080
cluster api core and the cloud provider

00:08:15,599 --> 00:08:18,639
or the

00:08:16,080 --> 00:08:19,840
metal provider or anything really that

00:08:18,639 --> 00:08:22,400
can uh

00:08:19,840 --> 00:08:23,039
that can spin up a kubernetes cluster

00:08:22,400 --> 00:08:25,520
right so

00:08:23,039 --> 00:08:26,720
it could be on premise and there is i

00:08:25,520 --> 00:08:29,759
think i saw

00:08:26,720 --> 00:08:31,360
ssh provider for a really deployed

00:08:29,759 --> 00:08:33,599
machine so machines that you don't need

00:08:31,360 --> 00:08:37,039
to deploy from scratch

00:08:33,599 --> 00:08:40,080
packet is a great provider and to

00:08:37,039 --> 00:08:42,800
provision bare metal through

00:08:40,080 --> 00:08:44,240
their own api and then install

00:08:42,800 --> 00:08:46,480
kubernetes cluster on top

00:08:44,240 --> 00:08:47,839
and of course all the major uh cloud

00:08:46,480 --> 00:08:49,360
provider everyone

00:08:47,839 --> 00:08:51,519
and i'm particularly interested in the

00:08:49,360 --> 00:08:54,240
azure provider so

00:08:51,519 --> 00:08:55,440
just a bit about nomenclature when we

00:08:54,240 --> 00:08:59,040
when we say

00:08:55,440 --> 00:08:59,760
copy we intend the core so the cluster

00:08:59,040 --> 00:09:02,240
api

00:08:59,760 --> 00:09:03,279
core and for example when i when i

00:09:02,240 --> 00:09:06,720
mention

00:09:03,279 --> 00:09:09,680
cap z is where i'm referring to the

00:09:06,720 --> 00:09:10,640
cluster api provider for azure which is

00:09:09,680 --> 00:09:13,519
um

00:09:10,640 --> 00:09:14,800
the the implementation of the cluster

00:09:13,519 --> 00:09:18,000
api

00:09:14,800 --> 00:09:18,720
for talking to to azure and provisioning

00:09:18,000 --> 00:09:22,959
clusters so

00:09:18,720 --> 00:09:26,000
on azure so again taken from the

00:09:22,959 --> 00:09:26,399
from the the official uh the cluster api

00:09:26,000 --> 00:09:28,640
book

00:09:26,399 --> 00:09:30,640
uh i think there's a link somewhere that

00:09:28,640 --> 00:09:31,600
is where where most of information about

00:09:30,640 --> 00:09:35,040
cluster api

00:09:31,600 --> 00:09:37,920
are stored is it's a doc

00:09:35,040 --> 00:09:38,560
documentation website about class api so

00:09:37,920 --> 00:09:42,000
it's

00:09:38,560 --> 00:09:45,200
made the customer api is comprised of

00:09:42,000 --> 00:09:48,000
several objects or of course

00:09:45,200 --> 00:09:48,959
all these objects are crds are custom

00:09:48,000 --> 00:09:50,480
resource definitions

00:09:48,959 --> 00:09:52,399
and all of them have of course a

00:09:50,480 --> 00:09:54,240
controller associated with it

00:09:52,399 --> 00:09:56,800
so um for example there is a cluster

00:09:54,240 --> 00:09:59,920
controller that

00:09:56,800 --> 00:10:00,800
you you you know uh checks the status or

00:09:59,920 --> 00:10:02,800
the state

00:10:00,800 --> 00:10:04,399
of the cluster objects and make sure

00:10:02,800 --> 00:10:05,440
reconciles them with the with the

00:10:04,399 --> 00:10:08,000
desired state

00:10:05,440 --> 00:10:09,839
and so on and so forth there's a their

00:10:08,000 --> 00:10:10,800
infrastructure providers their machine

00:10:09,839 --> 00:10:12,880
pool

00:10:10,800 --> 00:10:13,839
and machine set i'm not going to go in

00:10:12,880 --> 00:10:17,040
detail

00:10:13,839 --> 00:10:19,360
about what each of them does because

00:10:17,040 --> 00:10:20,480
i wanted to keep it short and uh and

00:10:19,360 --> 00:10:22,480
very end zone

00:10:20,480 --> 00:10:23,519
uh i might not even understand

00:10:22,480 --> 00:10:26,320
everything

00:10:23,519 --> 00:10:27,200
uh what i'm saying but uh again i i

00:10:26,320 --> 00:10:28,560
refer you to the

00:10:27,200 --> 00:10:30,720
to the people in the know the

00:10:28,560 --> 00:10:34,480
contributors and the people that

00:10:30,720 --> 00:10:37,040
really understand really uh can um

00:10:34,480 --> 00:10:38,160
shed more light on it so at the core is

00:10:37,040 --> 00:10:41,030
this right so

00:10:38,160 --> 00:10:42,399
you start with um

00:10:41,030 --> 00:10:44,399
[Music]

00:10:42,399 --> 00:10:46,240
you start with a management cluster and

00:10:44,399 --> 00:10:49,519
mention cluster will create

00:10:46,240 --> 00:10:51,200
uh workload clusters in the

00:10:49,519 --> 00:10:52,880
infrastructure provider of your choice

00:10:51,200 --> 00:10:55,600
that's uh that's the core of it

00:10:52,880 --> 00:10:56,320
what really triggers me for this talk

00:10:55,600 --> 00:10:58,959
and the

00:10:56,320 --> 00:11:00,000
uh the blog post i publish in december

00:10:58,959 --> 00:11:03,279
is that

00:11:00,000 --> 00:11:06,000
the cluster api for azure community

00:11:03,279 --> 00:11:06,560
introduced the aks provider so as your

00:11:06,000 --> 00:11:08,240
man

00:11:06,560 --> 00:11:10,000
the azure kubernetes service is a

00:11:08,240 --> 00:11:13,440
managed service in kubernetes

00:11:10,000 --> 00:11:17,440
historically because api is being

00:11:13,440 --> 00:11:19,200
used to deploy unmanaged clusters custom

00:11:17,440 --> 00:11:22,720
where you have to manage

00:11:19,200 --> 00:11:24,320
both the control plane and the workload

00:11:22,720 --> 00:11:28,000
nodes

00:11:24,320 --> 00:11:28,399
this is what historically class api at

00:11:28,000 --> 00:11:30,959
least

00:11:28,399 --> 00:11:32,959
the way i saw it for for a long time i

00:11:30,959 --> 00:11:35,680
thought it was a a thing to

00:11:32,959 --> 00:11:37,360
to deploy cuba dm basically base

00:11:35,680 --> 00:11:39,600
clusters with uh

00:11:37,360 --> 00:11:41,040
one or more nodes in the control plane

00:11:39,600 --> 00:11:43,519
and one or more nodes

00:11:41,040 --> 00:11:44,800
as a vm scale set for example in azure

00:11:43,519 --> 00:11:46,720
or

00:11:44,800 --> 00:11:48,000
whatever that's called in other breasts

00:11:46,720 --> 00:11:50,480
but for me was

00:11:48,000 --> 00:11:53,040
mainly a thing for a mesh cluster which

00:11:50,480 --> 00:11:56,560
are great of course and

00:11:53,040 --> 00:11:58,240
people need them still but

00:11:56,560 --> 00:12:00,000
for me and i think for a lot of people

00:11:58,240 --> 00:12:02,160
in in in the industry

00:12:00,000 --> 00:12:04,399
manage is the name of the game for for

00:12:02,160 --> 00:12:07,279
barnett's right so

00:12:04,399 --> 00:12:08,959
um the thing that really tricked me is

00:12:07,279 --> 00:12:12,320
that

00:12:08,959 --> 00:12:14,160
the class api for azure released the aks

00:12:12,320 --> 00:12:15,920
driver or the infrastructure for

00:12:14,160 --> 00:12:18,959
provider for the managed service

00:12:15,920 --> 00:12:21,120
of kubernetes so that kind of made me

00:12:18,959 --> 00:12:22,240
think maybe i should i can put this

00:12:21,120 --> 00:12:25,120
thing to use

00:12:22,240 --> 00:12:27,040
because i i i saw it for me for myself

00:12:25,120 --> 00:12:29,920
and for my counselor i was spinning

00:12:27,040 --> 00:12:30,959
i'm still spending dozens of clusters a

00:12:29,920 --> 00:12:34,079
day or

00:12:30,959 --> 00:12:34,639
or more than more than that in a given

00:12:34,079 --> 00:12:37,120
week

00:12:34,639 --> 00:12:39,200
so i need to manage complexity i need to

00:12:37,120 --> 00:12:42,880
i would like to have a way

00:12:39,200 --> 00:12:45,600
that i can um create clusters in a

00:12:42,880 --> 00:12:47,360
in a programmatical way instead of the

00:12:45,600 --> 00:12:49,839
classic

00:12:47,360 --> 00:12:51,120
azure cli commands right so that that's

00:12:49,839 --> 00:12:53,120
a that's a

00:12:51,120 --> 00:12:55,360
imperative way of creating clusters

00:12:53,120 --> 00:12:58,480
instead i wanted a way to

00:12:55,360 --> 00:13:01,200
describe all the crafts that i needed

00:12:58,480 --> 00:13:01,600
in a declarative form possibly indeed

00:13:01,200 --> 00:13:04,399
and

00:13:01,600 --> 00:13:05,200
the the githubs in the title and then

00:13:04,399 --> 00:13:07,279
let

00:13:05,200 --> 00:13:08,720
the system do his magic and create

00:13:07,279 --> 00:13:10,959
infrastructure that i need

00:13:08,720 --> 00:13:12,800
when i need it and we did with the

00:13:10,959 --> 00:13:16,079
characteristics that i wanted

00:13:12,800 --> 00:13:18,560
so i got to think and i i

00:13:16,079 --> 00:13:19,600
i thought it was uh there was a a great

00:13:18,560 --> 00:13:22,880
place to start so

00:13:19,600 --> 00:13:24,639
so so this is what the

00:13:22,880 --> 00:13:26,079
class api provided for azure and

00:13:24,639 --> 00:13:29,760
specifically the the

00:13:26,079 --> 00:13:30,160
uh the aks infrastructure provider does

00:13:29,760 --> 00:13:32,000
so

00:13:30,160 --> 00:13:34,000
there's an object called cluster that's

00:13:32,000 --> 00:13:36,560
the the root of all

00:13:34,000 --> 00:13:38,079
of all the objects so you start with a

00:13:36,560 --> 00:13:41,360
cluster

00:13:38,079 --> 00:13:43,199
object the cluster object creates or as

00:13:41,360 --> 00:13:44,639
children that refers to the cluster

00:13:43,199 --> 00:13:46,959
object

00:13:44,639 --> 00:13:48,800
two kind of two kind of children so one

00:13:46,959 --> 00:13:49,920
is the azure managed cluster which

00:13:48,800 --> 00:13:52,399
represents the

00:13:49,920 --> 00:13:52,959
aks cluster and the azure magic control

00:13:52,399 --> 00:13:56,720
plane which

00:13:52,959 --> 00:13:57,680
represents all the um all the properties

00:13:56,720 --> 00:13:59,920
associated with

00:13:57,680 --> 00:14:02,240
with the aks itself like with the with

00:13:59,920 --> 00:14:04,320
the control plane

00:14:02,240 --> 00:14:05,519
as you know there is a there's a

00:14:04,320 --> 00:14:08,240
distinction between

00:14:05,519 --> 00:14:10,720
even in s there's a control plane

00:14:08,240 --> 00:14:13,760
properties for example

00:14:10,720 --> 00:14:15,760
if the cluster supports calico or if the

00:14:13,760 --> 00:14:17,920
cluster

00:14:15,760 --> 00:14:19,600
kubernetes or azure cni as a network

00:14:17,920 --> 00:14:21,279
provider those those are properties that

00:14:19,600 --> 00:14:23,199
are valid for the old cluster

00:14:21,279 --> 00:14:25,279
or managed identity for example for that

00:14:23,199 --> 00:14:27,760
matter and then there are

00:14:25,279 --> 00:14:29,440
node pools and the node pools have their

00:14:27,760 --> 00:14:32,240
own set of properties right so

00:14:29,440 --> 00:14:33,760
and then naturally those pools are

00:14:32,240 --> 00:14:36,959
represented by their own

00:14:33,760 --> 00:14:38,800
um their own object in fact so when you

00:14:36,959 --> 00:14:41,040
create a cluster there's a azure managed

00:14:38,800 --> 00:14:43,040
control plane and azure managed cluster

00:14:41,040 --> 00:14:44,480
you need to create those objects as well

00:14:43,040 --> 00:14:46,880
referring to the

00:14:44,480 --> 00:14:48,720
cluster object this will actually create

00:14:46,880 --> 00:14:52,000
infrastructure will

00:14:48,720 --> 00:14:55,600
uh will inform the cluster api uh

00:14:52,000 --> 00:14:58,320
provider for azure to actually go to the

00:14:55,600 --> 00:15:00,480
azure api and create a manuscript for

00:14:58,320 --> 00:15:03,519
for you

00:15:00,480 --> 00:15:04,160
there's always a manage there's always a

00:15:03,519 --> 00:15:07,519
assistant

00:15:04,160 --> 00:15:10,720
pool uh so you need to use the full purp

00:15:07,519 --> 00:15:13,760
and all of this stuff is in the in the

00:15:10,720 --> 00:15:17,040
rape of course um so there is a

00:15:13,760 --> 00:15:20,959
those manage machine pool are actually

00:15:17,040 --> 00:15:23,279
abstraction over the actual vm skill set

00:15:20,959 --> 00:15:24,560
for um that they are attached to your

00:15:23,279 --> 00:15:26,160
aks cluster so

00:15:24,560 --> 00:15:28,639
so these are there's always a mushroom

00:15:26,160 --> 00:15:30,240
put zero or some or the default

00:15:28,639 --> 00:15:31,759
that is referenced by the azure measure

00:15:30,240 --> 00:15:32,959
control plane because the control plane

00:15:31,759 --> 00:15:37,920
needs to have

00:15:32,959 --> 00:15:39,920
um um needs to have a

00:15:37,920 --> 00:15:41,360
default system pool then you can create

00:15:39,920 --> 00:15:44,480
also multiple node pools

00:15:41,360 --> 00:15:47,279
uh you can create uh what you need to to

00:15:44,480 --> 00:15:47,279
run your workload

00:15:47,680 --> 00:15:54,639
and then of course all of these they

00:15:51,600 --> 00:15:57,920
trigger actual infrastructure right so

00:15:54,639 --> 00:16:01,680
all this abstraction objects in

00:15:57,920 --> 00:16:03,680
in in in your managed cluster

00:16:01,680 --> 00:16:06,639
management class in your uh management

00:16:03,680 --> 00:16:09,120
cluster all these objects are actually

00:16:06,639 --> 00:16:10,800
triggering the the the the controller

00:16:09,120 --> 00:16:12,880
manager to actually go and create

00:16:10,800 --> 00:16:16,720
infrastructure for in assume

00:16:12,880 --> 00:16:18,800
i'll quickly glance to the this

00:16:16,720 --> 00:16:20,839
you're gonna interrupt me i guess if

00:16:18,800 --> 00:16:23,680
something goes wrong

00:16:20,839 --> 00:16:26,320
uh yeah so

00:16:23,680 --> 00:16:27,120
and we are back at this so and then then

00:16:26,320 --> 00:16:30,000
i thought okay

00:16:27,120 --> 00:16:31,360
that's great let's see if i can put all

00:16:30,000 --> 00:16:34,720
these objects

00:16:31,360 --> 00:16:36,079
into a git repository and let my

00:16:34,720 --> 00:16:39,440
managing cluster

00:16:36,079 --> 00:16:42,240
um create stuff for me right so

00:16:39,440 --> 00:16:44,800
this is actually the the the best thing

00:16:42,240 --> 00:16:49,040
ever i'm managing my cluster

00:16:44,800 --> 00:16:53,199
fleet my my cluster estate

00:16:49,040 --> 00:16:55,600
as a github repository right so and then

00:16:53,199 --> 00:16:57,680
with the power of argo cd you can do

00:16:55,600 --> 00:16:59,759
this with flux and i have

00:16:57,680 --> 00:17:01,440
colleagues there's a link at the end of

00:16:59,759 --> 00:17:03,600
my talk where

00:17:01,440 --> 00:17:05,280
somebody from microsoft also explored

00:17:03,600 --> 00:17:07,679
the same thing but with flux

00:17:05,280 --> 00:17:09,520
uh great tool they're all kind of the

00:17:07,679 --> 00:17:11,280
same and i hope the

00:17:09,520 --> 00:17:13,839
the github's working group will

00:17:11,280 --> 00:17:17,039
eventually come with a with a single

00:17:13,839 --> 00:17:19,600
uh represent with a better

00:17:17,039 --> 00:17:20,079
unification of uh are going flux but for

00:17:19,600 --> 00:17:22,000
now

00:17:20,079 --> 00:17:23,120
argo is what i like also because there

00:17:22,000 --> 00:17:26,319
is a

00:17:23,120 --> 00:17:26,559
everybody knows argo is a great gui and

00:17:26,319 --> 00:17:28,319
a

00:17:26,559 --> 00:17:29,600
graphical interface and i like to see my

00:17:28,319 --> 00:17:32,480
clusters

00:17:29,600 --> 00:17:33,280
in a graphical interface since flux

00:17:32,480 --> 00:17:37,120
doesn't have

00:17:33,280 --> 00:17:39,280
one that is at the level yet so

00:17:37,120 --> 00:17:40,960
i have a github repository is the the

00:17:39,280 --> 00:17:44,080
same where you can follow along

00:17:40,960 --> 00:17:46,240
um the distort and i have a

00:17:44,080 --> 00:17:47,760
folder called clusters and everything i

00:17:46,240 --> 00:17:51,679
drop in there

00:17:47,760 --> 00:17:54,160
becomes a cluster in in azure

00:17:51,679 --> 00:17:54,960
so it could be something else it could

00:17:54,160 --> 00:17:58,400
be

00:17:54,960 --> 00:18:01,520
uh if in in my case i only deployed the

00:17:58,400 --> 00:18:02,160
infrastructure provider azure for for a

00:18:01,520 --> 00:18:04,480
ks

00:18:02,160 --> 00:18:06,160
but nothing stops you to deploy multiple

00:18:04,480 --> 00:18:09,200
infrastructure providers

00:18:06,160 --> 00:18:12,160
and drop cluster definition in there

00:18:09,200 --> 00:18:12,720
uh that deploys different things right

00:18:12,160 --> 00:18:15,679
so

00:18:12,720 --> 00:18:17,679
in my case i use a nand chart because i

00:18:15,679 --> 00:18:19,600
there are multiple objects you see

00:18:17,679 --> 00:18:22,880
that that needs to be created at the

00:18:19,600 --> 00:18:27,280
same time for a work to get a working

00:18:22,880 --> 00:18:30,799
aks managed cluster but i'll be happy to

00:18:27,280 --> 00:18:33,679
to to collaborate i'll be able to see um

00:18:30,799 --> 00:18:34,559
a different example of this m chart

00:18:33,679 --> 00:18:36,400
where they can

00:18:34,559 --> 00:18:38,400
well you can use for for example

00:18:36,400 --> 00:18:40,840
deploying on b sphere or

00:18:38,400 --> 00:18:42,559
google cloud or on-premise

00:18:40,840 --> 00:18:45,039
infrastructure

00:18:42,559 --> 00:18:45,840
and that's this is what where things are

00:18:45,039 --> 00:18:48,559
really

00:18:45,840 --> 00:18:49,919
interesting so the mesh cloud management

00:18:48,559 --> 00:18:52,000
cluster of course being

00:18:49,919 --> 00:18:53,600
the one that creates this infrastructure

00:18:52,000 --> 00:18:55,760
also stores

00:18:53,600 --> 00:18:56,720
the cooper config for the management

00:18:55,760 --> 00:18:59,840
cluster for the

00:18:56,720 --> 00:19:01,039
sorry for the workload clusters so since

00:18:59,840 --> 00:19:04,160
argo cd is running

00:19:01,039 --> 00:19:07,360
in the same cluster it's just a just a

00:19:04,160 --> 00:19:10,160
few commands a way to add the

00:19:07,360 --> 00:19:11,679
workload class of the remote clusters as

00:19:10,160 --> 00:19:14,400
clusters in angular

00:19:11,679 --> 00:19:15,360
city and then let argo cd manage those

00:19:14,400 --> 00:19:18,880
clusters as well

00:19:15,360 --> 00:19:20,720
also in a github's way i'm

00:19:18,880 --> 00:19:23,039
i was thinking about this i mean i just

00:19:20,720 --> 00:19:26,080
have a couple of commands to do that but

00:19:23,039 --> 00:19:29,840
uh but it would be interesting to see if

00:19:26,080 --> 00:19:32,160
um so argo cd i explore this actually

00:19:29,840 --> 00:19:33,280
the only thing that i don't like about

00:19:32,160 --> 00:19:35,520
our arco city

00:19:33,280 --> 00:19:36,960
managed clusters they are not

00:19:35,520 --> 00:19:38,640
declarative so you have to

00:19:36,960 --> 00:19:40,720
go through the command line there is no

00:19:38,640 --> 00:19:43,919
object in argo cd that

00:19:40,720 --> 00:19:47,120
describes a cluster so for now

00:19:43,919 --> 00:19:50,559
uh um i have to repair to

00:19:47,120 --> 00:19:52,559
just simple commands but it's all in

00:19:50,559 --> 00:19:53,600
there right so i retrieve the

00:19:52,559 --> 00:19:56,000
kuberconfig

00:19:53,600 --> 00:19:58,400
i give it to argo cd and then i and then

00:19:56,000 --> 00:20:01,760
arcgo cd can

00:19:58,400 --> 00:20:03,280
pick up um another folder or another

00:20:01,760 --> 00:20:06,000
place

00:20:03,280 --> 00:20:07,440
where the workloads so the definition of

00:20:06,000 --> 00:20:09,760
application that should

00:20:07,440 --> 00:20:10,880
be deployed on those workload clusters

00:20:09,760 --> 00:20:12,880
uh are defined

00:20:10,880 --> 00:20:14,480
in my case it's the same reports we're

00:20:12,880 --> 00:20:17,679
just in a different directory

00:20:14,480 --> 00:20:21,360
and i can assign

00:20:17,679 --> 00:20:25,440
applications to um to each customer

00:20:21,360 --> 00:20:27,520
and then so argo cd now can

00:20:25,440 --> 00:20:28,720
distribute this application to two

00:20:27,520 --> 00:20:31,679
different clusters

00:20:28,720 --> 00:20:32,799
um there is unfortunately still you know

00:20:31,679 --> 00:20:35,760
there's

00:20:32,799 --> 00:20:36,240
still room for improvements they still

00:20:35,760 --> 00:20:38,000
not

00:20:36,240 --> 00:20:39,760
i haven't found a way to actually have

00:20:38,000 --> 00:20:40,400
one definition that can be deployed to

00:20:39,760 --> 00:20:43,200
mutual

00:20:40,400 --> 00:20:44,080
multiple clusters because the cluster is

00:20:43,200 --> 00:20:48,559
a key

00:20:44,080 --> 00:20:49,200
in the app that can be um that that can

00:20:48,559 --> 00:20:52,240
be

00:20:49,200 --> 00:20:53,679
uh that is all that is unique but you

00:20:52,240 --> 00:20:55,120
maybe in the future maybe with

00:20:53,679 --> 00:20:56,480
application sets and i'm gonna talk

00:20:55,120 --> 00:20:59,440
about application sets

00:20:56,480 --> 00:20:59,840
right now so this is all nice and i

00:20:59,440 --> 00:21:04,799
thought

00:20:59,840 --> 00:21:08,080
great but i don't want to have to define

00:21:04,799 --> 00:21:11,679
one application per cluster

00:21:08,080 --> 00:21:15,600
so i discover a thing it's still like

00:21:11,679 --> 00:21:17,360
like a new new feature of argo

00:21:15,600 --> 00:21:19,600
called application set right so i

00:21:17,360 --> 00:21:20,159
thought oh that's interesting i can use

00:21:19,600 --> 00:21:22,799
this

00:21:20,159 --> 00:21:23,200
so there's a interesting uh feature of

00:21:22,799 --> 00:21:26,480
that

00:21:23,200 --> 00:21:29,600
called git generator so i keep my

00:21:26,480 --> 00:21:33,120
cluster definition in in git

00:21:29,600 --> 00:21:35,679
but i create an application set

00:21:33,120 --> 00:21:36,960
i call cluster application set or a

00:21:35,679 --> 00:21:39,600
workloads application set

00:21:36,960 --> 00:21:41,360
so what the application set does is that

00:21:39,600 --> 00:21:44,559
points to a folder

00:21:41,360 --> 00:21:45,440
in ingit in github and everything that

00:21:44,559 --> 00:21:47,360
is in there

00:21:45,440 --> 00:21:48,960
creates an app out of it so it's kind of

00:21:47,360 --> 00:21:51,360
uh um

00:21:48,960 --> 00:21:52,080
it goes through a git repository and

00:21:51,360 --> 00:21:54,880
creates

00:21:52,080 --> 00:21:55,760
as many apps or clusters because

00:21:54,880 --> 00:22:00,159
clusters are

00:21:55,760 --> 00:22:03,440
ups needed so and then

00:22:00,159 --> 00:22:07,120
all these things can be applied so in a

00:22:03,440 --> 00:22:10,159
different way to um um

00:22:07,120 --> 00:22:11,760
to to show this is that so i have

00:22:10,159 --> 00:22:13,520
two application sets a cluster

00:22:11,760 --> 00:22:14,960
application set and a workload operation

00:22:13,520 --> 00:22:18,080
set of course those are

00:22:14,960 --> 00:22:19,120
uh managed by a controller um that you

00:22:18,080 --> 00:22:22,480
need to

00:22:19,120 --> 00:22:26,159
install extra so it doesn't come with a

00:22:22,480 --> 00:22:27,760
standard manifest of argo you have to

00:22:26,159 --> 00:22:29,840
install it separately but it's in the

00:22:27,760 --> 00:22:32,720
script that i that is in my repo

00:22:29,840 --> 00:22:33,280
and then one cluster application set

00:22:32,720 --> 00:22:36,960
looks at

00:22:33,280 --> 00:22:39,600
clusters folder and creates the clusters

00:22:36,960 --> 00:22:40,080
and then there's another word close

00:22:39,600 --> 00:22:43,760
application

00:22:40,080 --> 00:22:46,640
set that looks at

00:22:43,760 --> 00:22:49,600
the other folder and then and then in

00:22:46,640 --> 00:22:51,440
this folder in the workloads folder you

00:22:49,600 --> 00:22:52,720
match the application to the cluster

00:22:51,440 --> 00:22:54,880
right so uh

00:22:52,720 --> 00:22:55,840
ingress with this characteristic goes to

00:22:54,880 --> 00:22:58,080
cluster one

00:22:55,840 --> 00:22:59,360
and uh i don't know cert manager with

00:22:58,080 --> 00:23:01,679
this l

00:22:59,360 --> 00:23:02,720
values goes to cluster two and so on and

00:23:01,679 --> 00:23:06,400
so on so forth so

00:23:02,720 --> 00:23:07,840
you really now you have a full um

00:23:06,400 --> 00:23:09,919
management solution for multiple

00:23:07,840 --> 00:23:11,280
clusters multiple applications that can

00:23:09,919 --> 00:23:14,880
go on those clusters

00:23:11,280 --> 00:23:16,480
and i think is kind of beautiful uh

00:23:14,880 --> 00:23:18,640
although it's still rougher than the

00:23:16,480 --> 00:23:21,520
edges of course and all using

00:23:18,640 --> 00:23:22,559
pre-alpha stuff but i think i think i

00:23:21,520 --> 00:23:25,760
found a

00:23:22,559 --> 00:23:27,039
a good way to to manage multiple

00:23:25,760 --> 00:23:30,240
clusters on multiple

00:23:27,039 --> 00:23:34,080
providers so now let's see how

00:23:30,240 --> 00:23:37,360
you can see if you see them all right

00:23:34,080 --> 00:23:40,240
so this is the first demo um

00:23:37,360 --> 00:23:41,840
i was opening go full screen but uh

00:23:40,240 --> 00:23:44,880
that's fine i guess

00:23:41,840 --> 00:23:46,400
so i just run the commands it's a

00:23:44,880 --> 00:23:48,320
shell script with the with just two

00:23:46,400 --> 00:23:51,919
parameters the location and the

00:23:48,320 --> 00:23:55,039
and the um and the uh

00:23:51,919 --> 00:23:55,840
um url that i want to use to to look at

00:23:55,039 --> 00:23:59,120
argo

00:23:55,840 --> 00:24:01,520
so i cut this thing right i cut uh

00:23:59,120 --> 00:24:02,400
several minutes of this i trimmed the

00:24:01,520 --> 00:24:04,000
video so

00:24:02,400 --> 00:24:05,760
this takes two three minutes to

00:24:04,000 --> 00:24:08,080
provisional cluster that's my seed

00:24:05,760 --> 00:24:11,039
cluster my management cluster right so

00:24:08,080 --> 00:24:12,240
um the cluster is deployed uh then the

00:24:11,039 --> 00:24:16,400
script goes on

00:24:12,240 --> 00:24:19,039
installs argo cd um argo cd takes some

00:24:16,400 --> 00:24:22,320
time so i also put some

00:24:19,039 --> 00:24:24,159
uh kuba steel weight commands in there

00:24:22,320 --> 00:24:26,640
because i want the script to

00:24:24,159 --> 00:24:27,440
to finish by itself uh and of course

00:24:26,640 --> 00:24:29,840
like a

00:24:27,440 --> 00:24:32,159
set man things like set manager they

00:24:29,840 --> 00:24:37,279
need to complete and be up

00:24:32,159 --> 00:24:41,039
uh before you actually can create the um

00:24:37,279 --> 00:24:43,039
can create the uh the actual

00:24:41,039 --> 00:24:45,120
cluster issue for example right so it

00:24:43,039 --> 00:24:47,520
deploys uh it deploys ingress

00:24:45,120 --> 00:24:48,799
it deploys a bunch of stuff and of

00:24:47,520 --> 00:24:52,000
course like a

00:24:48,799 --> 00:24:53,440
deploys the um cd and the accuracy the

00:24:52,000 --> 00:24:57,750
application set control

00:24:53,440 --> 00:24:59,840
and then the second script is to deploy

00:24:57,750 --> 00:25:02,000
[Music]

00:24:59,840 --> 00:25:04,559
the cluster api so the class api

00:25:02,000 --> 00:25:04,559
controller

00:25:04,640 --> 00:25:09,039
it's a caps setup so fascist provider

00:25:08,080 --> 00:25:12,240
from github

00:25:09,039 --> 00:25:14,400
and then eventually provision the

00:25:12,240 --> 00:25:18,159
cluster api

00:25:14,400 --> 00:25:21,120
core the copy system in the copy system

00:25:18,159 --> 00:25:22,559
namespace and then the class api

00:25:21,120 --> 00:25:25,760
provided for azure

00:25:22,559 --> 00:25:28,080
in the cups capzed system

00:25:25,760 --> 00:25:29,360
namespace and if you look at it i think

00:25:28,080 --> 00:25:33,440
i did uh

00:25:29,360 --> 00:25:35,360
um well and then also the and the third

00:25:33,440 --> 00:25:38,720
script is to install the

00:25:35,360 --> 00:25:39,440
uh the root up the the app that triggers

00:25:38,720 --> 00:25:42,400
everything

00:25:39,440 --> 00:25:43,039
and will point to the uh to my github

00:25:42,400 --> 00:25:45,279
repo

00:25:43,039 --> 00:25:46,640
you can fork it and use the escape to

00:25:45,279 --> 00:25:49,840
just change the name

00:25:46,640 --> 00:25:52,559
change the um um

00:25:49,840 --> 00:25:54,159
change the to your fork so you you can

00:25:52,559 --> 00:25:57,600
play around with your own stuff

00:25:54,159 --> 00:26:02,080
so and then eventually i get uh

00:25:57,600 --> 00:26:04,960
ssl terminated uh um

00:26:02,080 --> 00:26:05,600
argo cd interface and now what i'm doing

00:26:04,960 --> 00:26:09,679
i'm

00:26:05,600 --> 00:26:13,200
moving from disabled i'm moving

00:26:09,679 --> 00:26:14,480
a folder with my aks cluster definition

00:26:13,200 --> 00:26:17,919
in there

00:26:14,480 --> 00:26:17,919
i move it i commit to git

00:26:19,039 --> 00:26:25,919
i add my so now

00:26:22,080 --> 00:26:29,200
the cluster folder contains um

00:26:25,919 --> 00:26:31,919
um a definition for a cluster

00:26:29,200 --> 00:26:32,960
right and that's definition you see

00:26:31,919 --> 00:26:35,279
there's a you can

00:26:32,960 --> 00:26:37,039
you can follow along on github i can

00:26:35,279 --> 00:26:40,320
also show you quickly

00:26:37,039 --> 00:26:43,679
but what matters is that now

00:26:40,320 --> 00:26:47,120
uh git argo cd

00:26:43,679 --> 00:26:50,720
will eventually pick up the changes um

00:26:47,120 --> 00:26:54,080
on on github and we'll create a

00:26:50,720 --> 00:26:58,080
an app that will create in turn

00:26:54,080 --> 00:27:01,120
um the uh the elm release

00:26:58,080 --> 00:27:01,919
to deploy the aks3 cluster so why is

00:27:01,120 --> 00:27:03,520
this because

00:27:01,919 --> 00:27:05,360
i use an application set remember so

00:27:03,520 --> 00:27:09,679
application sets they create an

00:27:05,360 --> 00:27:13,440
app for every uh item in a specific

00:27:09,679 --> 00:27:16,480
folder on github so they get the git

00:27:13,440 --> 00:27:18,840
generator and eventually

00:27:16,480 --> 00:27:20,880
you can do watch cooper ctl get cluster

00:27:18,840 --> 00:27:24,000
api

00:27:20,880 --> 00:27:27,600
and you will see that yes

00:27:24,000 --> 00:27:29,840
there is a clustering provisioning state

00:27:27,600 --> 00:27:30,799
this class impression state just started

00:27:29,840 --> 00:27:34,080
uh and

00:27:30,799 --> 00:27:37,520
is is not yet an actual infrastructure

00:27:34,080 --> 00:27:39,039
there it is so after a couple of minutes

00:27:37,520 --> 00:27:41,039
you actually see there is a

00:27:39,039 --> 00:27:43,520
cluster being created in azure and then

00:27:41,039 --> 00:27:46,320
and this is i cut some time in it

00:27:43,520 --> 00:27:48,000
uh but that's exactly what you see it

00:27:46,320 --> 00:27:51,440
after 11 minutes

00:27:48,000 --> 00:27:54,320
that you have two node pools

00:27:51,440 --> 00:27:54,880
uh one is the system one is the workload

00:27:54,320 --> 00:27:59,360
pool

00:27:54,880 --> 00:28:02,880
so one cluster uh with actually

00:27:59,360 --> 00:28:05,039
with actually um the

00:28:02,880 --> 00:28:06,880
the infrastructure as you succeeded

00:28:05,039 --> 00:28:10,799
right so

00:28:06,880 --> 00:28:14,000
created now there is another

00:28:10,799 --> 00:28:16,559
let's go to the workloads so now i have

00:28:14,000 --> 00:28:17,120
a cluster what i do what should i do

00:28:16,559 --> 00:28:20,640
with it

00:28:17,120 --> 00:28:23,520
uh let me add a workload

00:28:20,640 --> 00:28:24,000
to to my git repository i just it's just

00:28:23,520 --> 00:28:27,600
in this

00:28:24,000 --> 00:28:31,840
in the disabled uh folder so i just

00:28:27,600 --> 00:28:31,840
move it into the right place

00:28:32,720 --> 00:28:36,080
i'll just move to the right place and

00:28:34,240 --> 00:28:37,120
then eventually argo cd will pick up the

00:28:36,080 --> 00:28:41,039
changes and

00:28:37,120 --> 00:28:46,159
the workloads uh

00:28:41,039 --> 00:28:46,159
go on go on gone so first i need to um

00:28:46,399 --> 00:28:50,000
um yeah uh so these are the comments

00:28:48,960 --> 00:28:53,919
that i was talking about

00:28:50,000 --> 00:28:56,480
so you need to log in into argo um

00:28:53,919 --> 00:28:58,880
cd login then once you have the argument

00:28:56,480 --> 00:29:02,720
login once you have the context

00:28:58,880 --> 00:29:05,279
you can get the kuberconfig as a secret

00:29:02,720 --> 00:29:06,399
uh from from kubernetes itself and then

00:29:05,279 --> 00:29:10,799
feed it to argo

00:29:06,399 --> 00:29:14,080
and now argo has the knowledge or

00:29:10,799 --> 00:29:16,000
of this remote cluster this aks3 cluster

00:29:14,080 --> 00:29:18,159
where you can just deploy application

00:29:16,000 --> 00:29:21,090
now i can get this workload

00:29:18,159 --> 00:29:22,559
and move into workloads and uh

00:29:21,090 --> 00:29:26,000
[Music]

00:29:22,559 --> 00:29:28,399
again again i cut some parts of this

00:29:26,000 --> 00:29:30,159
video because it takes some time for

00:29:28,399 --> 00:29:31,760
argo to pick up the changes in github

00:29:30,159 --> 00:29:34,240
and takes even more time

00:29:31,760 --> 00:29:35,120
for for classes to be created deployed

00:29:34,240 --> 00:29:38,559
upgraded

00:29:35,120 --> 00:29:42,159
so bear with me but trust me

00:29:38,559 --> 00:29:45,200
it all works and

00:29:42,159 --> 00:29:48,880
lo and behold lo

00:29:45,200 --> 00:29:51,919
and behold eventually

00:29:48,880 --> 00:29:54,720
if so

00:29:51,919 --> 00:29:55,440
see nothing really changed yet but if

00:29:54,720 --> 00:29:58,559
you

00:29:55,440 --> 00:30:01,840
skip a few minutes forward in time

00:29:58,559 --> 00:30:05,039
you i think detox is not for the

00:30:01,840 --> 00:30:06,399
for the impatient right so you have to

00:30:05,039 --> 00:30:07,360
trust the system that eventually will

00:30:06,399 --> 00:30:10,480
reconcile

00:30:07,360 --> 00:30:12,000
and eventually will affect your actual

00:30:10,480 --> 00:30:12,799
infrastructure or your actual cluster

00:30:12,000 --> 00:30:15,039
but it's not

00:30:12,799 --> 00:30:16,320
something that um i don't think it lends

00:30:15,039 --> 00:30:18,720
itself easily to

00:30:16,320 --> 00:30:20,880
demoing uh because you really have to

00:30:18,720 --> 00:30:24,559
just let it go and

00:30:20,880 --> 00:30:27,679
be patient which is

00:30:24,559 --> 00:30:31,120
not exactly one of my faulty but

00:30:27,679 --> 00:30:32,159
well if you skip a bit you will see that

00:30:31,120 --> 00:30:35,279
eventually

00:30:32,159 --> 00:30:36,960
these workloads should have cut this one

00:30:35,279 --> 00:30:38,799
yes eventually you will see that the

00:30:36,960 --> 00:30:41,679
root app uh picks up

00:30:38,799 --> 00:30:42,480
there's the workload uh the workload

00:30:41,679 --> 00:30:45,760
application

00:30:42,480 --> 00:30:50,240
uh set will pick up the ingress

00:30:45,760 --> 00:30:50,640
and now the the remote cluster and i

00:30:50,240 --> 00:30:53,039
think

00:30:50,640 --> 00:30:55,360
i'll show you here as a with kubernetes

00:30:53,039 --> 00:31:05,840
i will actually

00:30:55,360 --> 00:31:05,840
get secret again or get um

00:31:06,399 --> 00:31:10,480
yeah so that's uh

00:31:08,520 --> 00:31:12,720
[Music]

00:31:10,480 --> 00:31:14,880
that's exactly what happens so now i'm

00:31:12,720 --> 00:31:17,360
looking at the aks3 cluster

00:31:14,880 --> 00:31:19,679
right so the the remote cluster and

00:31:17,360 --> 00:31:23,919
eventually you will see that when this

00:31:19,679 --> 00:31:27,919
applic this uh gets synchronized

00:31:23,919 --> 00:31:32,480
then on the left you will see that

00:31:27,919 --> 00:31:34,960
some pods will be created

00:31:32,480 --> 00:31:35,519
yeah that's exactly a ingress equals

00:31:34,960 --> 00:31:37,760
stress

00:31:35,519 --> 00:31:38,520
okay three ingress blah blah blah and

00:31:37,760 --> 00:31:40,320
then eventually

00:31:38,520 --> 00:31:42,159
[Music]

00:31:40,320 --> 00:31:44,000
the ingress controller will be deployed

00:31:42,159 --> 00:31:47,440
so this is i'm

00:31:44,000 --> 00:31:48,399
using one argo cd to manage application

00:31:47,440 --> 00:31:51,120
remotely

00:31:48,399 --> 00:31:52,720
on uh on on different clusters right so

00:31:51,120 --> 00:31:55,440
and then you see that

00:31:52,720 --> 00:31:56,799
there is a there's a thing there last

00:31:55,440 --> 00:31:58,880
thing extra

00:31:56,799 --> 00:32:00,399
uh before i don't know how much time i

00:31:58,880 --> 00:32:03,039
have if i'm too short but

00:32:00,399 --> 00:32:03,600
it doesn't matter so um not only you can

00:32:03,039 --> 00:32:05,279
manage

00:32:03,600 --> 00:32:06,640
workloads but you can also also manage

00:32:05,279 --> 00:32:09,360
infrastructure itself

00:32:06,640 --> 00:32:11,200
you can see here i have a aks1 cluster

00:32:09,360 --> 00:32:15,600
at 119.7

00:32:11,200 --> 00:32:20,000
version with a simple git commit

00:32:15,600 --> 00:32:23,279
to bump up the version of the cluster to

00:32:20,000 --> 00:32:26,960
the latest 120.5

00:32:23,279 --> 00:32:30,399
then again i push my commit

00:32:26,960 --> 00:32:33,840
and then i do something else i i

00:32:30,399 --> 00:32:36,480
really don't should not monitor this but

00:32:33,840 --> 00:32:37,760
but this is what happens of course uh

00:32:36,480 --> 00:32:41,279
eventually

00:32:37,760 --> 00:32:43,440
uh the the

00:32:41,279 --> 00:32:45,519
the cluster will get updated by itself

00:32:43,440 --> 00:32:47,919
so if you

00:32:45,519 --> 00:32:48,720
scroll through you see there is a

00:32:47,919 --> 00:32:52,240
there's a

00:32:48,720 --> 00:32:54,720
um the manifests between

00:32:52,240 --> 00:32:56,000
the desired state and so the parameters

00:32:54,720 --> 00:32:59,039
of the cluster is actually

00:32:56,000 --> 00:33:02,240
not sorry this i mean so the aks1

00:32:59,039 --> 00:33:05,039
um parameter is bumped to

00:33:02,240 --> 00:33:05,039
00:33:05,360 --> 00:33:10,960
yes it was still 19197 but if you

00:33:08,720 --> 00:33:11,760
leave it a second or you push the sync

00:33:10,960 --> 00:33:15,559
button

00:33:11,760 --> 00:33:19,279
eventually you it will get to um to

00:33:15,559 --> 00:33:21,760
120.5 and so without really

00:33:19,279 --> 00:33:22,960
thinking too much that's how you do

00:33:21,760 --> 00:33:26,320
upgrades

00:33:22,960 --> 00:33:28,960
to an entire uh fleet of clusters

00:33:26,320 --> 00:33:30,480
and eventually you will see that the

00:33:28,960 --> 00:33:31,360
infrastructure itself did the actual

00:33:30,480 --> 00:33:34,559
azure

00:33:31,360 --> 00:33:38,720
um as your we will trigger

00:33:34,559 --> 00:33:41,200
um an update yeah see whereas version

00:33:38,720 --> 00:33:44,640
was bumped to 120 the cluster enter

00:33:41,200 --> 00:33:48,000
the upgrading state which means that uh

00:33:44,640 --> 00:33:53,760
things are moving uh you can see that

00:33:48,000 --> 00:33:56,159
here that uh in a case note ports

00:33:53,760 --> 00:33:56,799
it scales up so the node pool is a

00:33:56,159 --> 00:33:59,600
replica

00:33:56,799 --> 00:34:00,640
one so there's only one node but during

00:33:59,600 --> 00:34:03,760
upgrades

00:34:00,640 --> 00:34:06,320
aks as azure will

00:34:03,760 --> 00:34:09,040
increase the number of uh nodes we will

00:34:06,320 --> 00:34:11,919
bring up a 120.5 node

00:34:09,040 --> 00:34:13,760
and when that node is ready we'll

00:34:11,919 --> 00:34:16,240
decommission and destroy the

00:34:13,760 --> 00:34:18,240
the old node so there's no in-place

00:34:16,240 --> 00:34:21,280
upgrades for for aks

00:34:18,240 --> 00:34:24,399
uh that's how we do it uh i think it's a

00:34:21,280 --> 00:34:25,200
safer and it's more more clean way to do

00:34:24,399 --> 00:34:26,960
it because then

00:34:25,200 --> 00:34:28,800
the new nodes will get all the updates

00:34:26,960 --> 00:34:32,000
all the new image version

00:34:28,800 --> 00:34:34,240
and this clean um clean uh

00:34:32,000 --> 00:34:36,000
upgrades for uh for kubernetes so that's

00:34:34,240 --> 00:34:37,760
uh

00:34:36,000 --> 00:34:39,119
that's how you do upgrades with a git

00:34:37,760 --> 00:34:42,079
commit as in

00:34:39,119 --> 00:34:42,800
uh as github says operation by pull

00:34:42,079 --> 00:34:44,560
request

00:34:42,800 --> 00:34:46,159
well of course this should have been a

00:34:44,560 --> 00:34:49,040
pull request you know that

00:34:46,159 --> 00:34:50,000
but i collaborate with myself it will be

00:34:49,040 --> 00:34:52,560
pretty

00:34:50,000 --> 00:34:55,040
da dumb to approve my own pull request

00:34:52,560 --> 00:34:58,640
so i just decide to commit

00:34:55,040 --> 00:35:01,040
some links uh because it's

00:34:58,640 --> 00:35:02,640
i'm always standing on shoulder of the

00:35:01,040 --> 00:35:05,920
giants and uh

00:35:02,640 --> 00:35:08,560
and thanks to my colleagues also that uh

00:35:05,920 --> 00:35:09,520
also explore this for other controllers

00:35:08,560 --> 00:35:13,680
like flux

00:35:09,520 --> 00:35:17,839
and i am about done

00:35:13,680 --> 00:35:20,880
so awesome yeah that's about

00:35:17,839 --> 00:35:21,520
it cool so just let folks know lightning

00:35:20,880 --> 00:35:23,119
talks have

00:35:21,520 --> 00:35:24,720
started uh if you want to stick around

00:35:23,119 --> 00:35:27,200
here for questions though that's fine

00:35:24,720 --> 00:35:28,320
um alessandro the number one question

00:35:27,200 --> 00:35:32,000
most upvoted

00:35:28,320 --> 00:35:34,880
is could we do get ups with azure devops

00:35:32,000 --> 00:35:36,640
out of the box should we use other tools

00:35:34,880 --> 00:35:39,280
like argo yeah

00:35:36,640 --> 00:35:40,960
no so the two things are no you you can

00:35:39,280 --> 00:35:43,760
use argo because your devops i mean

00:35:40,960 --> 00:35:46,400
azure devops says uh

00:35:43,760 --> 00:35:47,760
server is just another git server so as

00:35:46,400 --> 00:35:50,160
long as you can

00:35:47,760 --> 00:35:52,079
your cluster can talk to us your devops

00:35:50,160 --> 00:35:52,560
there's no reason why you should not be

00:35:52,079 --> 00:35:55,680
able to

00:35:52,560 --> 00:35:59,040
store your configuration in azure devops

00:35:55,680 --> 00:36:02,560
which is pretty good because it also

00:35:59,040 --> 00:36:03,599
um it comes with a lot a lot of stuff

00:36:02,560 --> 00:36:06,400
that is not

00:36:03,599 --> 00:36:07,599
per se related to guitars like boards

00:36:06,400 --> 00:36:09,520
and

00:36:07,599 --> 00:36:12,320
back down charts and all sorts of stuff

00:36:09,520 --> 00:36:15,200
so so no it is totally possible

00:36:12,320 --> 00:36:16,560
just that github is just the the go-to

00:36:15,200 --> 00:36:20,079
place for me to

00:36:16,560 --> 00:36:21,359
to do stuff got it all right the second

00:36:20,079 --> 00:36:23,440
most upvoted question

00:36:21,359 --> 00:36:24,560
i assume this management cluster will

00:36:23,440 --> 00:36:27,680
become

00:36:24,560 --> 00:36:29,520
kind of a managed service in azure

00:36:27,680 --> 00:36:30,720
do you see it as a replacement for

00:36:29,520 --> 00:36:35,040
google anthos

00:36:30,720 --> 00:36:38,079
multi-cluster management i will

00:36:35,040 --> 00:36:39,040
well i think it is a real possibility

00:36:38,079 --> 00:36:41,520
that

00:36:39,040 --> 00:36:42,400
we could use um all-star management

00:36:41,520 --> 00:36:44,079
cluster

00:36:42,400 --> 00:36:46,320
a minimal cluster to you to do this

00:36:44,079 --> 00:36:49,119
stuff there's one thing

00:36:46,320 --> 00:36:50,400
think about that that also i i needed

00:36:49,119 --> 00:36:53,839
some time to think about

00:36:50,400 --> 00:36:55,599
the management cluster can go away

00:36:53,839 --> 00:36:57,359
literally you can destroy the dimension

00:36:55,599 --> 00:37:01,839
cluster recreate

00:36:57,359 --> 00:37:04,720
reapply exactly the same uh manifests

00:37:01,839 --> 00:37:05,839
the control will come up will compare

00:37:04,720 --> 00:37:07,680
the situation so

00:37:05,839 --> 00:37:09,599
we'll talk to as you say do you have a

00:37:07,680 --> 00:37:12,400
cluster called aks1

00:37:09,599 --> 00:37:14,160
in a classical day case 3 there do they

00:37:12,400 --> 00:37:16,400
have this characteristic yes

00:37:14,160 --> 00:37:18,079
okay then my job is done and so you can

00:37:16,400 --> 00:37:23,119
replace the management cluster

00:37:18,079 --> 00:37:26,400
as you like it's kind of a stateless uh

00:37:23,119 --> 00:37:27,920
operator right so a stateless uh object

00:37:26,400 --> 00:37:31,040
that applies what what

00:37:27,920 --> 00:37:31,839
the real source of truth is git so no

00:37:31,040 --> 00:37:33,920
matter

00:37:31,839 --> 00:37:35,599
the the sure the measuring cluster now

00:37:33,920 --> 00:37:37,920
contains

00:37:35,599 --> 00:37:40,079
objects in a tcd and so on and so forth

00:37:37,920 --> 00:37:42,480
and kind of a state as a but the state

00:37:40,079 --> 00:37:45,040
is only a mirror or what what's in the

00:37:42,480 --> 00:37:45,599
in in git because argo cd makes sure of

00:37:45,040 --> 00:37:48,079
that

00:37:45,599 --> 00:37:48,720
right so uh that's that's that's the

00:37:48,079 --> 00:37:51,760
reason why

00:37:48,720 --> 00:37:55,440
but i would love to not need to spin up

00:37:51,760 --> 00:37:58,720
a cluster to do this stuff yeah yeah

00:37:55,440 --> 00:38:00,720
that's a good point uh next one is i see

00:37:58,720 --> 00:38:02,880
you chose the strategy of deploying into

00:38:00,720 --> 00:38:04,960
the child clusters from the central argo

00:38:02,880 --> 00:38:06,960
instance what are the pros and cons

00:38:04,960 --> 00:38:10,720
compared with bootstrapping a dedicated

00:38:06,960 --> 00:38:13,920
argo inside each child cluster

00:38:10,720 --> 00:38:15,040
um i think the adventure for me is that

00:38:13,920 --> 00:38:18,480
i want to have a

00:38:15,040 --> 00:38:22,000
single pane of glass single view of

00:38:18,480 --> 00:38:24,560
everything clusters and the apps going

00:38:22,000 --> 00:38:25,200
that runs on them right so i don't want

00:38:24,560 --> 00:38:29,040
to log in

00:38:25,200 --> 00:38:30,720
in 10 different argos i think the power

00:38:29,040 --> 00:38:33,520
is is in there like when

00:38:30,720 --> 00:38:35,200
you have a central management for a

00:38:33,520 --> 00:38:36,480
cluster an application and how they

00:38:35,200 --> 00:38:40,400
connect

00:38:36,480 --> 00:38:42,720
maybe the argo i can show me better

00:38:40,400 --> 00:38:43,760
this application set for example is new

00:38:42,720 --> 00:38:46,480
so

00:38:43,760 --> 00:38:47,920
i don't see the application set and i

00:38:46,480 --> 00:38:51,040
think i can

00:38:47,920 --> 00:38:53,970
well i could actually show you

00:38:51,040 --> 00:38:57,630
the live thing

00:38:53,970 --> 00:38:57,630
[Music]

00:38:57,839 --> 00:39:02,960
yeah so if you can see my screen so the

00:39:00,800 --> 00:39:06,000
root up

00:39:02,960 --> 00:39:07,280
as application sets right application

00:39:06,000 --> 00:39:07,920
set for class application set for

00:39:07,280 --> 00:39:10,400
workloads

00:39:07,920 --> 00:39:11,920
but i don't see these in the overview

00:39:10,400 --> 00:39:14,720
and then really

00:39:11,920 --> 00:39:16,560
i wish i could see uh because these are

00:39:14,720 --> 00:39:19,200
children of our application set

00:39:16,560 --> 00:39:20,240
i think that that it's very new so it

00:39:19,200 --> 00:39:21,760
would be great to have like an

00:39:20,240 --> 00:39:24,880
application set

00:39:21,760 --> 00:39:25,520
container that can i can drill down and

00:39:24,880 --> 00:39:29,119
see

00:39:25,520 --> 00:39:30,960
go into each cluster but yeah it's um

00:39:29,119 --> 00:39:32,400
you can do this only when you have a

00:39:30,960 --> 00:39:35,680
single uh

00:39:32,400 --> 00:39:37,200
argo cd that managed multicast it's

00:39:35,680 --> 00:39:39,119
maybe less secure because

00:39:37,200 --> 00:39:40,800
of course you have the kuber config of

00:39:39,119 --> 00:39:43,200
all your clusters in there

00:39:40,800 --> 00:39:44,320
so that's uh that's less than ideal but

00:39:43,200 --> 00:39:47,520
hey

00:39:44,320 --> 00:39:49,680
it's a good good point

00:39:47,520 --> 00:39:51,040
all right folks that's all the question

00:39:49,680 --> 00:39:53,359
time we have

00:39:51,040 --> 00:39:54,800
uh again please jump out to the sessions

00:39:53,359 --> 00:39:56,640
and join us for the lightning talks

00:39:54,800 --> 00:39:58,800
thank you so much alessandro for

00:39:56,640 --> 00:39:59,680
coming on live and doing this demo and

00:39:58,800 --> 00:40:02,800
talk for us

00:39:59,680 --> 00:40:04,880
great talk uh and uh

00:40:02,800 --> 00:40:06,160
you know if you have more questions

00:40:04,880 --> 00:40:10,079
alessandra will you be

00:40:06,160 --> 00:40:11,760
in the uh getups.com channel on uh

00:40:10,079 --> 00:40:13,119
slack yeah please feel free to ask

00:40:11,760 --> 00:40:14,880
alessandro there

00:40:13,119 --> 00:40:16,720
tag him and he'll i'm sure he'll be

00:40:14,880 --> 00:40:17,280
happy to answer so thank you all very

00:40:16,720 --> 00:40:20,319
much

00:40:17,280 --> 00:40:25,359
and to the lightning talks

00:40:20,319 --> 00:40:25,359

YouTube URL: https://www.youtube.com/watch?v=VpPGV5ykKEc


