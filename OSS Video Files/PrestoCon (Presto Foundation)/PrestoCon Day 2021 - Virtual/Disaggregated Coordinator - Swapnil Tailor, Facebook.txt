Title: Disaggregated Coordinator - Swapnil Tailor, Facebook
Publication date: 2021-03-27
Playlist: PrestoCon Day 2021 - Virtual
Description: 
	Disaggregated Coordinator - Swapnil Tailor, Facebook

In the existing Presto architecture, single coordinator has become a bottleneck in a number of ways for cluster scalability. 
   - With an increasing number of workers, the coordinator has the potential of slow down due to a high number of tasks.
   - In high QPS use cases, we have found workers can become starved of splits by excessive CPU being spend on task updates in coordinator.
    - Also with single coordinator, we have an upper limit on the worker pool because of above-mentioned reasons. 
To overcome with this challenges, we are coming up with a new architecture which supports multiple coordinators in a single cluster. 

For more info about Presto, the open source distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes, see: https://prestodb.io/
Captions: 
	00:00:00,080 --> 00:00:04,640
hey all uh so without uh wasting more

00:00:03,439 --> 00:00:06,480
time i'll just jump onto the

00:00:04,640 --> 00:00:08,720
presentation this is about the

00:00:06,480 --> 00:00:11,840
disaggregated coordinator

00:00:08,720 --> 00:00:14,639
aka fireball or multi uh coordinator

00:00:11,840 --> 00:00:15,759
so fireball is the internal uh uh

00:00:14,639 --> 00:00:18,480
project codename

00:00:15,759 --> 00:00:19,680
uh in facebook so the motivation why are

00:00:18,480 --> 00:00:22,560
we doing it so

00:00:19,680 --> 00:00:24,480
uh with the current architecture of in

00:00:22,560 --> 00:00:25,599
the presto we have a single coordinator

00:00:24,480 --> 00:00:28,160
and multiple uh

00:00:25,599 --> 00:00:28,720
workers and that worked well for uh many

00:00:28,160 --> 00:00:31,199
years

00:00:28,720 --> 00:00:32,880
but at facebook we started to feel uh

00:00:31,199 --> 00:00:33,920
some of the challenges with the existing

00:00:32,880 --> 00:00:37,520
architecture

00:00:33,920 --> 00:00:39,840
uh the uh first of them is like uh

00:00:37,520 --> 00:00:40,559
with the existing architecture we can't

00:00:39,840 --> 00:00:44,079
uh

00:00:40,559 --> 00:00:45,680
uh the coordinator to worker uh ratio uh

00:00:44,079 --> 00:00:48,800
there is an upper limit with that

00:00:45,680 --> 00:00:51,360
uh so as we increase the more workers

00:00:48,800 --> 00:00:53,120
into the uh cluster the coordinator gets

00:00:51,360 --> 00:00:55,440
overwhelmed with the workload

00:00:53,120 --> 00:00:56,640
and that leads to uh we need to think

00:00:55,440 --> 00:00:58,879
about how we gonna

00:00:56,640 --> 00:01:00,079
scale the coordinator uh we can solve

00:00:58,879 --> 00:01:02,320
this problem by

00:01:00,079 --> 00:01:03,600
having like a multiple smaller clusters

00:01:02,320 --> 00:01:06,159
running behind a

00:01:03,600 --> 00:01:07,600
load balancer but that leads to a

00:01:06,159 --> 00:01:09,520
resource fragmentation issue

00:01:07,600 --> 00:01:12,400
where some of the clusters will have a

00:01:09,520 --> 00:01:13,280
high q onto a given resource group while

00:01:12,400 --> 00:01:17,040
other clusters

00:01:13,280 --> 00:01:19,119
uh uh will have a lower load uh and uh

00:01:17,040 --> 00:01:21,600
uh this leads to like uh if you want to

00:01:19,119 --> 00:01:23,840
solve it uh we need to have a higher

00:01:21,600 --> 00:01:25,119
end machines to run the coordinator but

00:01:23,840 --> 00:01:28,320
at facebook

00:01:25,119 --> 00:01:30,320
we are actually uh migrating our entire

00:01:28,320 --> 00:01:32,640
clusters to a lower and uh

00:01:30,320 --> 00:01:34,400
lower cpu and memory machines so that

00:01:32,640 --> 00:01:38,400
leads us to rethink about

00:01:34,400 --> 00:01:41,360
how we want to scale the coordinator

00:01:38,400 --> 00:01:42,000
so the objective of this design is uh we

00:01:41,360 --> 00:01:44,960
want the

00:01:42,000 --> 00:01:46,799
uh flexibility to increase the

00:01:44,960 --> 00:01:49,040
coordinators into the coordinator pool

00:01:46,799 --> 00:01:50,960
similar way as we have the workers

00:01:49,040 --> 00:01:52,560
at the same time we want to support more

00:01:50,960 --> 00:01:55,200
workers in the cluster

00:01:52,560 --> 00:01:56,159
we also want to avoid a single point of

00:01:55,200 --> 00:01:57,759
failure as

00:01:56,159 --> 00:01:59,439
uh you can see in the existing

00:01:57,759 --> 00:02:00,640
architecture coordinator is a single

00:01:59,439 --> 00:02:02,640
point of failure

00:02:00,640 --> 00:02:04,399
uh by supporting multiple coordinators

00:02:02,640 --> 00:02:07,439
in a cluster we want to avoid that

00:02:04,399 --> 00:02:09,440
uh problem and uh another thing is we

00:02:07,439 --> 00:02:10,399
want to support coordinator to run on a

00:02:09,440 --> 00:02:12,720
low cpu

00:02:10,399 --> 00:02:16,480
uh low memory hardware at the same time

00:02:12,720 --> 00:02:16,480
supporting more workers in the cluster

00:02:16,959 --> 00:02:23,200
so here's the uh new architecture

00:02:20,640 --> 00:02:24,879
where we are introducing a new component

00:02:23,200 --> 00:02:26,640
called resource manager

00:02:24,879 --> 00:02:28,400
uh it's going to be a pool of resource

00:02:26,640 --> 00:02:30,959
managers running in a cluster

00:02:28,400 --> 00:02:31,440
and they are each one of them is gonna

00:02:30,959 --> 00:02:34,720
be

00:02:31,440 --> 00:02:36,000
behaving as an master uh the job of the

00:02:34,720 --> 00:02:38,800
resource manager is

00:02:36,000 --> 00:02:39,760
actually aggregating the resource group

00:02:38,800 --> 00:02:43,599
information

00:02:39,760 --> 00:02:44,000
at the cluster level uh the discovery of

00:02:43,599 --> 00:02:46,319
the

00:02:44,000 --> 00:02:47,280
nodes running in the cluster cluster

00:02:46,319 --> 00:02:51,280
management

00:02:47,280 --> 00:02:54,080
and ui endpoints

00:02:51,280 --> 00:02:55,920
so and as you can see uh the coordinator

00:02:54,080 --> 00:02:56,959
has changed from a single coordinate to

00:02:55,920 --> 00:02:58,560
like a

00:02:56,959 --> 00:03:00,159
full of coordinators they are running

00:02:58,560 --> 00:03:02,800
behind the load balancer

00:03:00,159 --> 00:03:04,640
and the uh fundamental work of the

00:03:02,800 --> 00:03:06,959
coordinator is

00:03:04,640 --> 00:03:09,280
not much change as in it's gonna be

00:03:06,959 --> 00:03:12,239
accepting the queries analyzing passing

00:03:09,280 --> 00:03:12,800
and executing the queries uh but uh some

00:03:12,239 --> 00:03:15,360
of the

00:03:12,800 --> 00:03:16,840
uh decisions uh it's gonna make with the

00:03:15,360 --> 00:03:18,560
help of the resource manager's

00:03:16,840 --> 00:03:20,319
information

00:03:18,560 --> 00:03:22,400
and one of the things the coordinator is

00:03:20,319 --> 00:03:24,799
going to be doing is regularly sending a

00:03:22,400 --> 00:03:26,720
query heartbeats to the resource manager

00:03:24,799 --> 00:03:29,120
uh this will help the resource manager

00:03:26,720 --> 00:03:30,640
to generate the aggregated resource

00:03:29,120 --> 00:03:32,480
group information

00:03:30,640 --> 00:03:35,360
running within the cluster and that has

00:03:32,480 --> 00:03:38,560
been later reused by the coordinator

00:03:35,360 --> 00:03:41,280
uh to make the queuing and uh running

00:03:38,560 --> 00:03:44,720
new purchase decision

00:03:41,280 --> 00:03:46,799
and the ui endpoints so uh resource

00:03:44,720 --> 00:03:48,080
manager is gonna be having the cluster

00:03:46,799 --> 00:03:50,319
label uh

00:03:48,080 --> 00:03:52,080
ui endpoint so any cluster level

00:03:50,319 --> 00:03:52,400
information that the coordinator needs

00:03:52,080 --> 00:03:54,480
to

00:03:52,400 --> 00:03:56,159
pull they can fetch it from the resource

00:03:54,480 --> 00:03:59,280
manager

00:03:56,159 --> 00:04:01,439
the uh worker pool uh work is also

00:03:59,280 --> 00:04:02,959
uh it's going to be same there's only

00:04:01,439 --> 00:04:05,280
slight change in the worker pool

00:04:02,959 --> 00:04:06,720
where it's going to be sending the

00:04:05,280 --> 00:04:07,439
worker heartbeats to the resource

00:04:06,720 --> 00:04:09,200
manager

00:04:07,439 --> 00:04:11,439
and this information has been used by

00:04:09,200 --> 00:04:14,799
the resource manager to generate the

00:04:11,439 --> 00:04:16,720
cluster level uh memory pool information

00:04:14,799 --> 00:04:18,079
that has been uh later used by the

00:04:16,720 --> 00:04:21,519
coordinator uh

00:04:18,079 --> 00:04:23,520
to uh decide on the uh own killer as

00:04:21,519 --> 00:04:25,680
which varies to kill in case cluster is

00:04:23,520 --> 00:04:27,600
running out of memory

00:04:25,680 --> 00:04:29,040
so that's that's a high level uh

00:04:27,600 --> 00:04:32,240
architecture of this uh

00:04:29,040 --> 00:04:32,639
system and we uh in facebook we put this

00:04:32,240 --> 00:04:35,199
uh

00:04:32,639 --> 00:04:36,320
uh our clusters behind the load balancer

00:04:35,199 --> 00:04:38,400
which is similar to

00:04:36,320 --> 00:04:39,600
uh what we thought uh heard in the

00:04:38,400 --> 00:04:42,560
earlier sessions

00:04:39,600 --> 00:04:44,400
like a prism or any other load balancer

00:04:42,560 --> 00:04:46,320
that the other companies are using

00:04:44,400 --> 00:04:48,160
uh it's currently not open source from

00:04:46,320 --> 00:04:51,360
outside and we have some

00:04:48,160 --> 00:04:52,160
uh logic around like how a new query

00:04:51,360 --> 00:04:54,800
comes in

00:04:52,160 --> 00:04:56,000
to where uh which specific coordinator

00:04:54,800 --> 00:04:59,440
that where it should

00:04:56,000 --> 00:05:01,360
go but uh with this new system any out

00:04:59,440 --> 00:05:02,000
of the box load balancer can be put on

00:05:01,360 --> 00:05:05,440
top of the

00:05:02,000 --> 00:05:06,080
cluster and a normal load balancing can

00:05:05,440 --> 00:05:10,720
be used

00:05:06,080 --> 00:05:13,840
to work with this

00:05:10,720 --> 00:05:14,560
so uh going to the next it's a query

00:05:13,840 --> 00:05:16,560
execution

00:05:14,560 --> 00:05:17,919
so with the resource managers

00:05:16,560 --> 00:05:20,639
introduction uh

00:05:17,919 --> 00:05:22,400
so one thing i think i might have missed

00:05:20,639 --> 00:05:24,080
is like the resource managers are gonna

00:05:22,400 --> 00:05:26,000
be working in a

00:05:24,080 --> 00:05:27,759
multi-primary mode so this means they

00:05:26,000 --> 00:05:28,639
are not also become a single point of

00:05:27,759 --> 00:05:30,720
failure

00:05:28,639 --> 00:05:32,560
and the discovery service which we used

00:05:30,720 --> 00:05:35,199
to run in the coordinator in the

00:05:32,560 --> 00:05:36,800
uh current architecture uh that's just

00:05:35,199 --> 00:05:38,080
for the convenience and we are moving

00:05:36,800 --> 00:05:40,320
that also into the

00:05:38,080 --> 00:05:41,440
resource manager and uh there will be

00:05:40,320 --> 00:05:43,759
multiple uh

00:05:41,440 --> 00:05:46,560
discovery servers running uh one for

00:05:43,759 --> 00:05:46,560
resource manager

00:05:47,280 --> 00:05:52,400
so coming to the query execution so the

00:05:50,400 --> 00:05:54,560
uh the slight change in the query

00:05:52,400 --> 00:05:56,800
execution so query has been submitted

00:05:54,560 --> 00:05:57,840
to one of the coordinator coordinators

00:05:56,800 --> 00:06:01,199
gonna be uh

00:05:57,840 --> 00:06:02,800
parsing the query and uh assigning a

00:06:01,199 --> 00:06:04,560
resource group to the query

00:06:02,800 --> 00:06:07,120
but once this resource group has been

00:06:04,560 --> 00:06:08,960
assigned coordinators start sending the

00:06:07,120 --> 00:06:09,919
regular query heartbeat to the resource

00:06:08,960 --> 00:06:11,759
manager

00:06:09,919 --> 00:06:14,000
so this helps resource manager to

00:06:11,759 --> 00:06:16,639
generate the aggregated view

00:06:14,000 --> 00:06:17,520
of the overall clusters how many queries

00:06:16,639 --> 00:06:19,759
are running

00:06:17,520 --> 00:06:21,280
under each resource group and

00:06:19,759 --> 00:06:23,680
coordinator is actually

00:06:21,280 --> 00:06:25,520
enhanced to regularly post this uh

00:06:23,680 --> 00:06:26,720
aggregated resource group information

00:06:25,520 --> 00:06:29,199
from the resource manager

00:06:26,720 --> 00:06:30,639
at a regular interval which will be used

00:06:29,199 --> 00:06:33,120
later on

00:06:30,639 --> 00:06:34,319
as i said earlier to decide when a new

00:06:33,120 --> 00:06:36,560
query comes in

00:06:34,319 --> 00:06:38,160
to see whether it's eligible to run or

00:06:36,560 --> 00:06:38,960
whether we should cue it based on the

00:06:38,160 --> 00:06:42,319
resource

00:06:38,960 --> 00:06:44,400
group configuration uh so

00:06:42,319 --> 00:06:45,440
once the coordinator decides that the

00:06:44,400 --> 00:06:48,400
query

00:06:45,440 --> 00:06:48,800
can run it's actually also been enhanced

00:06:48,400 --> 00:06:52,000
to

00:06:48,800 --> 00:06:53,440
regularly pull the uh active workers

00:06:52,000 --> 00:06:55,680
available in the cluster from the

00:06:53,440 --> 00:06:57,039
resource manager and that has been used

00:06:55,680 --> 00:06:59,680
to actually

00:06:57,039 --> 00:07:01,759
distribute the query plan and then uh

00:06:59,680 --> 00:07:03,039
the rest of the query execution works as

00:07:01,759 --> 00:07:05,120
normal

00:07:03,039 --> 00:07:06,800
and as you can see here the workflows

00:07:05,120 --> 00:07:08,880
are sending their work uh

00:07:06,800 --> 00:07:09,840
heartbeats uh to the resource manager at

00:07:08,880 --> 00:07:11,919
a regular interval

00:07:09,840 --> 00:07:13,280
at the same time the discovery server is

00:07:11,919 --> 00:07:16,000
running on top

00:07:13,280 --> 00:07:17,599
on the resource manager so this helps

00:07:16,000 --> 00:07:20,880
the resource manager to have

00:07:17,599 --> 00:07:24,319
all the uh available nodes information

00:07:20,880 --> 00:07:30,400
uh at its place so that can be provided

00:07:24,319 --> 00:07:33,280
as and when needed by the coordinator

00:07:30,400 --> 00:07:33,680
memory management so the resource group

00:07:33,280 --> 00:07:36,720
needs

00:07:33,680 --> 00:07:39,919
an up-to-date cpu and memory statistics

00:07:36,720 --> 00:07:42,800
uh for the cluster and it

00:07:39,919 --> 00:07:43,680
gets there by getting regular query

00:07:42,800 --> 00:07:47,039
heartbeats

00:07:43,680 --> 00:07:50,000
from the coordinator which includes the

00:07:47,039 --> 00:07:51,039
query cpu and memory usage at the same

00:07:50,000 --> 00:07:53,039
time the

00:07:51,039 --> 00:07:54,879
regular worker heartbeats that has been

00:07:53,039 --> 00:07:56,960
sent by the workers which

00:07:54,879 --> 00:07:59,520
includes the memory for the information

00:07:56,960 --> 00:08:03,120
so together using this information

00:07:59,520 --> 00:08:04,479
uh the resource manager generates the

00:08:03,120 --> 00:08:06,479
aggregated memory pool

00:08:04,479 --> 00:08:09,440
information and this information is been

00:08:06,479 --> 00:08:12,720
regularly pulled by the coordinator

00:08:09,440 --> 00:08:14,800
which it uses to decide on the uh

00:08:12,720 --> 00:08:16,479
own killing as in uh if the cluster is

00:08:14,800 --> 00:08:20,160
running out of memory

00:08:16,479 --> 00:08:22,160
uh it identifies which query to kill

00:08:20,160 --> 00:08:24,240
now as you can see here like uh resource

00:08:22,160 --> 00:08:26,080
managers are in multi-primary mode

00:08:24,240 --> 00:08:27,280
so to make sure like they'll have an

00:08:26,080 --> 00:08:29,039
up-to-date information

00:08:27,280 --> 00:08:30,879
the worker heartbeat has been sent to

00:08:29,039 --> 00:08:31,680
the each of the resource manager in the

00:08:30,879 --> 00:08:33,760
same way

00:08:31,680 --> 00:08:35,200
query heartbeat is also being sent to

00:08:33,760 --> 00:08:36,560
each of those uh

00:08:35,200 --> 00:08:38,719
from the coordinator each of the

00:08:36,560 --> 00:08:40,320
resource managers this make sure like

00:08:38,719 --> 00:08:41,839
each resource manager will have an up to

00:08:40,320 --> 00:08:44,240
date information about the entire

00:08:41,839 --> 00:08:44,240
cluster

00:08:45,360 --> 00:08:52,320
next uh yeah so our resource management

00:08:49,279 --> 00:08:55,200
so with this uh

00:08:52,320 --> 00:08:55,680
new resource manager's introduction uh

00:08:55,200 --> 00:08:57,680
we have

00:08:55,680 --> 00:08:59,360
some changes around like how the

00:08:57,680 --> 00:09:01,839
resource management work

00:08:59,360 --> 00:09:03,519
so what the uh the resource group

00:09:01,839 --> 00:09:04,720
manager is gonna be running on the

00:09:03,519 --> 00:09:08,800
coordinator

00:09:04,720 --> 00:09:10,480
and uh it uh as i said before

00:09:08,800 --> 00:09:12,399
so the regular query heartbeat has been

00:09:10,480 --> 00:09:13,600
sent to the resource manager so resource

00:09:12,399 --> 00:09:16,800
manager has an

00:09:13,600 --> 00:09:17,920
holistic view of the entire clusters

00:09:16,800 --> 00:09:21,360
resource groups

00:09:17,920 --> 00:09:22,959
and coordinator is regularly coordinator

00:09:21,360 --> 00:09:23,760
can pick one of the active resource

00:09:22,959 --> 00:09:26,399
manager

00:09:23,760 --> 00:09:27,279
to pull this uh information at a regular

00:09:26,399 --> 00:09:30,080
interval

00:09:27,279 --> 00:09:31,519
and uh resource group manager is gonna

00:09:30,080 --> 00:09:34,480
be using this information

00:09:31,519 --> 00:09:36,080
to decide on like uh let's say uh

00:09:34,480 --> 00:09:38,240
resource group a has a

00:09:36,080 --> 00:09:39,680
coordinator one is running uh two

00:09:38,240 --> 00:09:41,760
queries in resource group a

00:09:39,680 --> 00:09:43,600
and coordinator two is also uh running

00:09:41,760 --> 00:09:46,160
three queries on the source group a

00:09:43,600 --> 00:09:46,959
and the uh total concurrency for that

00:09:46,160 --> 00:09:49,600
resource group

00:09:46,959 --> 00:09:50,000
is a five which means like we can't

00:09:49,600 --> 00:09:51,519
allow

00:09:50,000 --> 00:09:53,040
in a cluster more than five queries

00:09:51,519 --> 00:09:55,120
running within that resource group so

00:09:53,040 --> 00:09:56,480
when a new query comes into any of the

00:09:55,120 --> 00:09:58,160
coordinator

00:09:56,480 --> 00:09:59,760
the coordinator will have an information

00:09:58,160 --> 00:10:01,519
that for this resource group there are

00:09:59,760 --> 00:10:03,519
five total queries running

00:10:01,519 --> 00:10:04,880
uh as it's pulling that information from

00:10:03,519 --> 00:10:08,000
the resource manager

00:10:04,880 --> 00:10:10,640
and for the new query uh uh it uh

00:10:08,000 --> 00:10:11,920
it just cue and use the cues that into

00:10:10,640 --> 00:10:15,279
the queue rather than

00:10:11,920 --> 00:10:16,800
letting it run till the uh uh

00:10:15,279 --> 00:10:19,680
out of the file query one of the query

00:10:16,800 --> 00:10:22,240
is finished so

00:10:19,680 --> 00:10:23,200
that's how the new resource management

00:10:22,240 --> 00:10:26,399
is gonna work

00:10:23,200 --> 00:10:26,399
in this new architecture

00:10:26,880 --> 00:10:32,720
thanks uh discovery services

00:10:29,920 --> 00:10:34,320
so as i said before in the current

00:10:32,720 --> 00:10:36,560
architecture discovery server

00:10:34,320 --> 00:10:38,320
is running on the coordinator but that's

00:10:36,560 --> 00:10:40,000
just a matter of convenience

00:10:38,320 --> 00:10:41,920
uh with this new architecture we have

00:10:40,000 --> 00:10:42,880
moved the discovery server to run on the

00:10:41,920 --> 00:10:44,880
resource manager

00:10:42,880 --> 00:10:46,720
here just for simplicity i did not put

00:10:44,880 --> 00:10:48,800
it as part of the resource manager

00:10:46,720 --> 00:10:50,640
just to show like discovery servers are

00:10:48,800 --> 00:10:53,839
also uh

00:10:50,640 --> 00:10:55,760
not a single point of failure so

00:10:53,839 --> 00:10:57,200
uh what happens is like as part of the

00:10:55,760 --> 00:10:58,640
discovery service

00:10:57,200 --> 00:11:00,480
each of the component coordinator

00:10:58,640 --> 00:11:03,120
resource manager and worker

00:11:00,480 --> 00:11:04,880
are regularly announcing the status to

00:11:03,120 --> 00:11:06,959
the discovery server

00:11:04,880 --> 00:11:08,720
or one of the active discovery server

00:11:06,959 --> 00:11:11,680
and the discovery servers

00:11:08,720 --> 00:11:14,880
within the within them keep syncing this

00:11:11,680 --> 00:11:17,040
information using the distributed mode

00:11:14,880 --> 00:11:17,920
and uh this is the something a discovery

00:11:17,040 --> 00:11:20,880
server uh

00:11:17,920 --> 00:11:22,160
provides that information uh provides

00:11:20,880 --> 00:11:25,279
out of the box

00:11:22,160 --> 00:11:26,640
and uh coordinator uh be contacting one

00:11:25,279 --> 00:11:28,800
of the discovery server

00:11:26,640 --> 00:11:30,560
to regularly fetch all this information

00:11:28,800 --> 00:11:32,240
so it just keeps regularly pulling this

00:11:30,560 --> 00:11:36,079
information to get that

00:11:32,240 --> 00:11:38,959
right uh the ui

00:11:36,079 --> 00:11:41,839
so each coordinator is actually capable

00:11:38,959 --> 00:11:43,600
to solve the ui request

00:11:41,839 --> 00:11:45,600
when a request comes to the uh

00:11:43,600 --> 00:11:47,360
coordinator if the request

00:11:45,600 --> 00:11:49,600
requires the cluster state uh

00:11:47,360 --> 00:11:52,160
information coordinator redirects

00:11:49,600 --> 00:11:53,120
those requests to one of the active

00:11:52,160 --> 00:11:54,880
resource manager

00:11:53,120 --> 00:11:57,680
and the resource manager has a parallel

00:11:54,880 --> 00:12:01,040
endpoint to solve the cluster level uh

00:11:57,680 --> 00:12:02,800
uh information uh and when a queries

00:12:01,040 --> 00:12:06,079
request comes to the coordinator

00:12:02,800 --> 00:12:07,360
which which the coordinator itself is

00:12:06,079 --> 00:12:11,200
not running so let's say a

00:12:07,360 --> 00:12:14,160
cluster has two coordinators and a query

00:12:11,200 --> 00:12:16,079
b is running on the coordinator two but

00:12:14,160 --> 00:12:19,360
the ui request comes to coordinator

00:12:16,079 --> 00:12:20,959
one uh a then the coordinator a

00:12:19,360 --> 00:12:22,720
sends that request to one of the active

00:12:20,959 --> 00:12:24,000
resource managers and the source manager

00:12:22,720 --> 00:12:25,600
has the holistic view

00:12:24,000 --> 00:12:27,680
of like which coordinator is running

00:12:25,600 --> 00:12:28,560
this query so it just proxies that

00:12:27,680 --> 00:12:30,320
request to the

00:12:28,560 --> 00:12:33,600
specific coordinator and fetches the

00:12:30,320 --> 00:12:33,600
results and return it back

00:12:35,519 --> 00:12:39,600
so the current status of the project so

00:12:37,920 --> 00:12:40,320
we are feature complete and in the

00:12:39,600 --> 00:12:42,560
shadow

00:12:40,320 --> 00:12:44,639
testing mode we are extensively testing

00:12:42,560 --> 00:12:47,120
it with our production workload

00:12:44,639 --> 00:12:49,040
uh and uh making sure that the

00:12:47,120 --> 00:12:49,920
performance of the system is up to the

00:12:49,040 --> 00:12:53,360
power

00:12:49,920 --> 00:12:55,680
and uh here's the link provided for the

00:12:53,360 --> 00:12:57,600
issue and the pull request uh that

00:12:55,680 --> 00:12:59,519
we are working with and soon we are

00:12:57,600 --> 00:13:01,760
planning to

00:12:59,519 --> 00:13:03,279
provide a test branch to the community

00:13:01,760 --> 00:13:05,279
so that they can start

00:13:03,279 --> 00:13:07,839
doing their own testing and play around

00:13:05,279 --> 00:13:07,839
with the future

00:13:08,160 --> 00:13:12,480
yeah thank you great thank you so much

00:13:12,079 --> 00:13:13,920
for

00:13:12,480 --> 00:13:15,760
i think the only question was really

00:13:13,920 --> 00:13:17,279
about you know when do we have this

00:13:15,760 --> 00:13:18,720
and you have shared the link for the

00:13:17,279 --> 00:13:20,800
test branch that should be available

00:13:18,720 --> 00:13:22,480
soon so akshay keep an eye out on the

00:13:20,800 --> 00:13:25,440
links that's what we have shared

00:13:22,480 --> 00:13:28,240
and thank you once again for you know

00:13:25,440 --> 00:13:28,240

YouTube URL: https://www.youtube.com/watch?v=slwPm-mROZ0


