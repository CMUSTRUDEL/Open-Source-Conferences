Title: PrestoDB - Technical Steering Committee Update - Tim Meehan, Presto Foundation
Publication date: 2021-03-27
Playlist: PrestoCon Day 2021 - Virtual
Description: 
	PrestoDB - Technical Steering Committee Update - Tim Meehan, Presto Foundation

Technical Steering Committee member and Committer, and Software Engineer at Facebook working on Presto.  My interests are in Presto reliability and scalability. 

For more info about Presto, the open source distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes, see: https://prestodb.io/
Captions: 
	00:00:00,080 --> 00:00:05,600
hello uh welcome to presto con um

00:00:03,280 --> 00:00:06,799
it's really great to see uh see you all

00:00:05,600 --> 00:00:09,360
virtually here and to

00:00:06,799 --> 00:00:11,040
to see uh even the west coast early

00:00:09,360 --> 00:00:12,320
hours to see the the number of attendees

00:00:11,040 --> 00:00:15,280
that have logged in so

00:00:12,320 --> 00:00:17,199
uh thank you and good morning uh allow

00:00:15,280 --> 00:00:18,880
me to introduce myself

00:00:17,199 --> 00:00:20,240
uh i'm tim meehan and i'm a software

00:00:18,880 --> 00:00:22,640
engineer at facebook

00:00:20,240 --> 00:00:25,119
i've been at facebook for about two and

00:00:22,640 --> 00:00:28,080
a half years working on presto

00:00:25,119 --> 00:00:30,320
my focus lately has been on reliability

00:00:28,080 --> 00:00:32,160
and scalability in particular

00:00:30,320 --> 00:00:35,040
coordinator scalability and better

00:00:32,160 --> 00:00:35,040
resource management

00:00:36,960 --> 00:00:41,440
okay so let's get started i'd like to

00:00:39,680 --> 00:00:43,680
kick this off by

00:00:41,440 --> 00:00:45,200
giving a quick background on you know

00:00:43,680 --> 00:00:48,079
what presto is

00:00:45,200 --> 00:00:50,399
if you've been to past presto cons you

00:00:48,079 --> 00:00:52,079
probably have a really good idea but

00:00:50,399 --> 00:00:54,960
some people may be new and the good news

00:00:52,079 --> 00:00:58,160
is it's relatively too easy to describe

00:00:54,960 --> 00:01:01,120
uh in one slide so uh presto

00:00:58,160 --> 00:01:02,239
is a distributed core engine that

00:01:01,120 --> 00:01:04,559
accesses data

00:01:02,239 --> 00:01:05,680
in place through pluggable connectors

00:01:04,559 --> 00:01:08,960
that that sentence

00:01:05,680 --> 00:01:12,080
um is kind of like uh i think a and cop

00:01:08,960 --> 00:01:15,520
encapsulates a lot um so let's uh

00:01:12,080 --> 00:01:18,720
deconstruct it uh just a little bit

00:01:15,520 --> 00:01:21,680
so firstly presto is um

00:01:18,720 --> 00:01:23,520
open source um the entire presto engine

00:01:21,680 --> 00:01:25,280
is available to view publicly on github

00:01:23,520 --> 00:01:27,759
and we welcome and encourage

00:01:25,280 --> 00:01:30,240
external contributions and try to make

00:01:27,759 --> 00:01:32,159
customizations easy through

00:01:30,240 --> 00:01:34,799
certain design techniques which i'll

00:01:32,159 --> 00:01:34,799
describe later

00:01:36,640 --> 00:01:42,079
presto is a distributed system so this

00:01:39,040 --> 00:01:45,119
means that many different processes

00:01:42,079 --> 00:01:47,200
are being orchestrated and run in

00:01:45,119 --> 00:01:49,280
parallel to perform an operation

00:01:47,200 --> 00:01:51,360
that would be infeasible for a single

00:01:49,280 --> 00:01:52,799
process so presta is designed to be

00:01:51,360 --> 00:01:55,119
scaled up and down according to the

00:01:52,799 --> 00:01:56,560
needs of the operator running presto

00:01:55,119 --> 00:01:59,040
and presta provides metrics and

00:01:56,560 --> 00:02:01,040
information that allow operators

00:01:59,040 --> 00:02:03,520
uh supporting presto to understand the

00:02:01,040 --> 00:02:03,520
performance

00:02:04,240 --> 00:02:09,840
the performance and operations even

00:02:05,759 --> 00:02:09,840
though it's a large distributed system

00:02:09,920 --> 00:02:16,640
presto is uh called a query engine

00:02:14,239 --> 00:02:17,920
because it's api is the query not some

00:02:16,640 --> 00:02:20,080
other structure like

00:02:17,920 --> 00:02:21,840
let's say json or data frames so the

00:02:20,080 --> 00:02:26,080
primary interface that you work with

00:02:21,840 --> 00:02:27,760
in presto is the sql is the sql language

00:02:26,080 --> 00:02:30,239
you give it a sql query you give presto

00:02:27,760 --> 00:02:31,120
sql query presto translates this into a

00:02:30,239 --> 00:02:32,800
program

00:02:31,120 --> 00:02:34,319
which is distributed across its worker

00:02:32,800 --> 00:02:36,000
fleet

00:02:34,319 --> 00:02:38,239
which i'll work in concert to give you a

00:02:36,000 --> 00:02:40,160
single uh consistent answer back

00:02:38,239 --> 00:02:41,360
so that's what we mean by query engine

00:02:40,160 --> 00:02:43,120
uh and then

00:02:41,360 --> 00:02:44,480
that accesses data through plugable

00:02:43,120 --> 00:02:46,720
connectors uh

00:02:44,480 --> 00:02:47,920
presto allows you to introduce your own

00:02:46,720 --> 00:02:50,319
plugins that

00:02:47,920 --> 00:02:51,920
uh interact with cor the core presto

00:02:50,319 --> 00:02:53,200
engine without having to touch the

00:02:51,920 --> 00:02:55,599
engine uh itself

00:02:53,200 --> 00:02:56,800
so these are called connectors and allow

00:02:55,599 --> 00:03:00,400
you to serve data from

00:02:56,800 --> 00:03:02,000
uh almost anything from hdfs to thrift

00:03:00,400 --> 00:03:04,480
servers local files

00:03:02,000 --> 00:03:05,840
uh relational databases log systems like

00:03:04,480 --> 00:03:08,319
kafka

00:03:05,840 --> 00:03:09,840
it's very flexible and where you put

00:03:08,319 --> 00:03:12,239
your data so that you don't need to

00:03:09,840 --> 00:03:13,200
needlessly etl the data before you get

00:03:12,239 --> 00:03:14,959
it you

00:03:13,200 --> 00:03:16,239
have a lot of flexibility on how you can

00:03:14,959 --> 00:03:17,920
store it without having to

00:03:16,239 --> 00:03:19,680
etl over and over again depending on

00:03:17,920 --> 00:03:21,920
which data source you want to serve it

00:03:19,680 --> 00:03:21,920
from

00:03:22,000 --> 00:03:27,840
so what makes presto different

00:03:25,840 --> 00:03:28,959
to my mind that also boils down to three

00:03:27,840 --> 00:03:30,799
different areas

00:03:28,959 --> 00:03:33,040
number one presta is built to be

00:03:30,799 --> 00:03:35,280
scalable you can add workers to meet

00:03:33,040 --> 00:03:38,159
your needs and grow through data

00:03:35,280 --> 00:03:38,799
the second one is uh plugable connectors

00:03:38,159 --> 00:03:40,640
so plus

00:03:38,799 --> 00:03:42,959
presto allows you to plug in new data

00:03:40,640 --> 00:03:45,040
sources even if the data source doesn't

00:03:42,959 --> 00:03:46,879
exist it's not a major lift

00:03:45,040 --> 00:03:49,040
to write your own you don't have to

00:03:46,879 --> 00:03:51,440
interact with the the core engine

00:03:49,040 --> 00:03:52,159
there's a plugable interface for you to

00:03:51,440 --> 00:03:55,680
implement to

00:03:52,159 --> 00:03:57,920
to make your own and number three presto

00:03:55,680 --> 00:03:59,599
is built with performance in mind

00:03:57,920 --> 00:04:01,760
though as i'll mention later we keep

00:03:59,599 --> 00:04:05,120
improving the performance um

00:04:01,760 --> 00:04:05,120
it's pretty much a never-ending journey

00:04:05,439 --> 00:04:08,799
uh so if you're here at presto con i

00:04:07,360 --> 00:04:09,680
imagine you're here because you love

00:04:08,799 --> 00:04:11,040
presto

00:04:09,680 --> 00:04:13,040
and you want to learn more about the

00:04:11,040 --> 00:04:14,799
latest updates um so

00:04:13,040 --> 00:04:16,720
that's what i'm here to talk about um

00:04:14,799 --> 00:04:18,560
what's the technical state of things

00:04:16,720 --> 00:04:20,160
uh with presto and uh what do we have to

00:04:18,560 --> 00:04:22,000
look forward to as well

00:04:20,160 --> 00:04:24,000
uh and so this is kind of like also

00:04:22,000 --> 00:04:25,600
talking about why we love presto like we

00:04:24,000 --> 00:04:27,120
we're obviously we're building things

00:04:25,600 --> 00:04:28,160
that we love about preston making them

00:04:27,120 --> 00:04:30,720
even better

00:04:28,160 --> 00:04:32,080
so to my mind all the reasons why we

00:04:30,720 --> 00:04:35,360
love presto

00:04:32,080 --> 00:04:38,240
boils down to six different areas

00:04:35,360 --> 00:04:40,000
number one it's fast so presto is really

00:04:38,240 --> 00:04:42,240
fast it gives you the data quickly

00:04:40,000 --> 00:04:46,000
and with low latency and as we'll see

00:04:42,240 --> 00:04:46,000
later we keep on improving that

00:04:46,240 --> 00:04:50,080
number two presto is efficient so it's

00:04:48,479 --> 00:04:52,560
not only fast but it also

00:04:50,080 --> 00:04:55,199
delivers the data with efficient usage

00:04:52,560 --> 00:04:57,600
of cpu and memory

00:04:55,199 --> 00:04:59,280
and resources that you may be paying for

00:04:57,600 --> 00:05:01,360
on the cloud or that that may be

00:04:59,280 --> 00:05:04,560
constrained in your organization

00:05:01,360 --> 00:05:07,120
uh number three presto is designed to

00:05:04,560 --> 00:05:08,639
uh be reliable and to be reliably scaled

00:05:07,120 --> 00:05:12,080
up and down without affecting the

00:05:08,639 --> 00:05:12,080
reliability of the entire cluster

00:05:12,960 --> 00:05:16,720
number four presto is standards

00:05:15,600 --> 00:05:18,560
compliant

00:05:16,720 --> 00:05:20,320
so the sql syntax that presto uses

00:05:18,560 --> 00:05:22,479
strives for ansi sql standards

00:05:20,320 --> 00:05:24,560
compliance and we do not create

00:05:22,479 --> 00:05:25,759
our own query language with custom

00:05:24,560 --> 00:05:29,680
special semantics

00:05:25,759 --> 00:05:32,080
um uh we strive for ansi sql compliance

00:05:29,680 --> 00:05:35,840
um if you've used postgres you'll you'll

00:05:32,080 --> 00:05:35,840
feel very very much at home with preston

00:05:36,479 --> 00:05:40,479
and it has a vibrant community so presto

00:05:39,039 --> 00:05:41,520
has a larger growing community and we'll

00:05:40,479 --> 00:05:43,440
talk about that later

00:05:41,520 --> 00:05:46,639
but um that's uh i think one of the

00:05:43,440 --> 00:05:46,639
reasons why we all love presto

00:05:46,800 --> 00:05:50,240
so now that we've talked about why we're

00:05:48,479 --> 00:05:51,600
here why we love presto

00:05:50,240 --> 00:05:53,120
and why we're here at presto prestocon

00:05:51,600 --> 00:05:54,080
um i'd love to share what we've

00:05:53,120 --> 00:05:56,560
accomplished

00:05:54,080 --> 00:05:57,520
and what we're working on uh this isn't

00:05:56,560 --> 00:05:59,840
comprehensive

00:05:57,520 --> 00:06:01,120
um this is just um basically a few

00:05:59,840 --> 00:06:04,880
select highlights

00:06:01,120 --> 00:06:06,319
um the uh but i feel like this is like a

00:06:04,880 --> 00:06:09,199
all this is going to be a pretty good

00:06:06,319 --> 00:06:10,880
update for folks and naturally this ties

00:06:09,199 --> 00:06:11,680
back into all the reasons that we love

00:06:10,880 --> 00:06:15,440
presto

00:06:11,680 --> 00:06:17,039
so let's get started um you may have

00:06:15,440 --> 00:06:18,479
heard in the past about the raptor

00:06:17,039 --> 00:06:21,440
connector

00:06:18,479 --> 00:06:22,800
the raptor connector uh uh co-located

00:06:21,440 --> 00:06:26,240
the presto worker

00:06:22,800 --> 00:06:28,080
um with uh with uh work data that

00:06:26,240 --> 00:06:29,759
resided in local flash

00:06:28,080 --> 00:06:31,280
and as we talked about last year in the

00:06:29,759 --> 00:06:33,759
last presto con the rack

00:06:31,280 --> 00:06:35,280
the raptor connector is fast but it's

00:06:33,759 --> 00:06:37,120
challenging to scale because

00:06:35,280 --> 00:06:38,479
the size of your data is essentially

00:06:37,120 --> 00:06:40,560
tied to the number of

00:06:38,479 --> 00:06:42,160
compute heavy machines that you could

00:06:40,560 --> 00:06:42,960
buy that also had high performance flash

00:06:42,160 --> 00:06:44,560
drives so

00:06:42,960 --> 00:06:46,080
it's essentially tied the compute with

00:06:44,560 --> 00:06:49,440
the with the storage

00:06:46,080 --> 00:06:50,400
um which you know leads to scaling

00:06:49,440 --> 00:06:52,720
challenges as

00:06:50,400 --> 00:06:53,599
storage needs grow and grow and grow so

00:06:52,720 --> 00:06:56,240
raptor x

00:06:53,599 --> 00:06:57,280
uh disaggregates the storage from the

00:06:56,240 --> 00:07:00,400
compute

00:06:57,280 --> 00:07:02,880
uh by using remote storage but leverages

00:07:00,400 --> 00:07:03,440
local caching to compensate for the lack

00:07:02,880 --> 00:07:06,479
of

00:07:03,440 --> 00:07:07,599
co-located data so using a hierarchical

00:07:06,479 --> 00:07:10,319
cache we're able to

00:07:07,599 --> 00:07:12,080
beat the performance of raptor while

00:07:10,319 --> 00:07:13,759
also gaining the flexibility of allowing

00:07:12,080 --> 00:07:15,199
the storage to grow as large as it needs

00:07:13,759 --> 00:07:17,360
to be

00:07:15,199 --> 00:07:18,639
so uh and the side benefit is that

00:07:17,360 --> 00:07:21,039
there's no need to etl

00:07:18,639 --> 00:07:22,880
the data either unlike raptor um you

00:07:21,039 --> 00:07:24,800
simply enable raptor x in your cluster

00:07:22,880 --> 00:07:27,680
and you reap the performance benefits

00:07:24,800 --> 00:07:28,000
um so this feature is ready to use right

00:07:27,680 --> 00:07:30,560
now

00:07:28,000 --> 00:07:31,440
as deepti mentioned please go uh be sure

00:07:30,560 --> 00:07:33,680
to check out the

00:07:31,440 --> 00:07:34,800
the talk from james sun who will talk

00:07:33,680 --> 00:07:36,240
about this in depth

00:07:34,800 --> 00:07:37,599
um but we're really excited about this

00:07:36,240 --> 00:07:40,560
feature and we really love this

00:07:37,599 --> 00:07:40,560
internally on facebook

00:07:40,720 --> 00:07:45,440
um another way that presto got faster is

00:07:43,440 --> 00:07:47,599
the introduction of dynamic filtering

00:07:45,440 --> 00:07:48,879
so dynamic filtering is an optimization

00:07:47,599 --> 00:07:52,160
where you imagine

00:07:48,879 --> 00:07:55,120
the um the build side

00:07:52,160 --> 00:07:57,520
of a hash join as a filter so by

00:07:55,120 --> 00:08:00,000
collecting the build site first and

00:07:57,520 --> 00:08:02,080
replacing this as a filter you can push

00:08:00,000 --> 00:08:04,240
that filter all the way down into the

00:08:02,080 --> 00:08:05,360
larger probe side this is the side where

00:08:04,240 --> 00:08:06,800
we scan

00:08:05,360 --> 00:08:09,120
all the data and then use it to do a

00:08:06,800 --> 00:08:11,840
hash lookup for hash join

00:08:09,120 --> 00:08:13,520
and by doing that you save a lot of data

00:08:11,840 --> 00:08:13,919
that needs to be shuffled and processed

00:08:13,520 --> 00:08:16,080
later

00:08:13,919 --> 00:08:16,080
so

00:08:17,199 --> 00:08:20,879
in production workloads that take

00:08:19,039 --> 00:08:24,000
advantage of it we found that we saw

00:08:20,879 --> 00:08:26,879
an up to 80 percent latency improvement

00:08:24,000 --> 00:08:27,599
and even higher cpu improvement um as

00:08:26,879 --> 00:08:28,960
well so

00:08:27,599 --> 00:08:30,720
we're also very excited about this

00:08:28,960 --> 00:08:31,440
feature and it's done and it's ready to

00:08:30,720 --> 00:08:33,760
use

00:08:31,440 --> 00:08:35,760
um you just need to be using a broadcast

00:08:33,760 --> 00:08:40,320
or a co-located join in case of uh

00:08:35,760 --> 00:08:43,360
grouped execution

00:08:40,320 --> 00:08:44,640
now let's look at um a really cool way

00:08:43,360 --> 00:08:47,519
that we're improving latency in the

00:08:44,640 --> 00:08:49,360
future um currently presto supports list

00:08:47,519 --> 00:08:50,160
and hash partitioning list partitioning

00:08:49,360 --> 00:08:52,000
is

00:08:50,160 --> 00:08:53,360
familiar hive partitioning and then hash

00:08:52,000 --> 00:08:55,760
partitioning is essentially grouped

00:08:53,360 --> 00:08:56,959
execution or bucketed execution

00:08:55,760 --> 00:08:58,560
zero to partitioning is a new

00:08:56,959 --> 00:09:00,240
partitioning scheme that clusters the

00:08:58,560 --> 00:09:02,080
data along multiple axes

00:09:00,240 --> 00:09:03,600
and allows for partition pruning along

00:09:02,080 --> 00:09:06,240
those multiple accesses with

00:09:03,600 --> 00:09:08,320
a much higher filter rate than can be

00:09:06,240 --> 00:09:10,399
achieved from

00:09:08,320 --> 00:09:12,240
feasibly achieved in the average case by

00:09:10,399 --> 00:09:14,080
either of those two methods

00:09:12,240 --> 00:09:15,760
so we're also very excited about this

00:09:14,080 --> 00:09:17,279
feature it's upcoming and the work is

00:09:15,760 --> 00:09:20,080
being planned but stay tuned for more

00:09:17,279 --> 00:09:20,080
details about this

00:09:20,800 --> 00:09:24,080
let's move on to efficiency so um let's

00:09:23,600 --> 00:09:25,519
look at

00:09:24,080 --> 00:09:28,080
all the ways that presto efficiency

00:09:25,519 --> 00:09:30,000
improved uh presta has now introduced a

00:09:28,080 --> 00:09:31,360
purely binary transportation protocol

00:09:30,000 --> 00:09:33,519
for communication

00:09:31,360 --> 00:09:35,360
uh between workers and the coordinator

00:09:33,519 --> 00:09:37,519
and this is written in thrift

00:09:35,360 --> 00:09:39,200
we found that moving by moving away from

00:09:37,519 --> 00:09:41,760
json yes this was

00:09:39,200 --> 00:09:43,839
json in the past and onto a purely

00:09:41,760 --> 00:09:45,680
thrift binary serialization

00:09:43,839 --> 00:09:47,440
we improved the cpu utilization on the

00:09:45,680 --> 00:09:49,200
coordinates by eight percent

00:09:47,440 --> 00:09:51,120
uh and also reduced the cpu on the

00:09:49,200 --> 00:09:53,200
workers by two to three percent

00:09:51,120 --> 00:09:55,120
um and that eight percent savings on the

00:09:53,200 --> 00:09:56,080
coordinator leaves more room for scaling

00:09:55,120 --> 00:09:57,760
the cluster to

00:09:56,080 --> 00:09:59,120
to get even larger and reducing the

00:09:57,760 --> 00:10:00,959
hardware requirements

00:09:59,120 --> 00:10:02,959
uh on the coordinator which uh can be

00:10:00,959 --> 00:10:04,560
significant

00:10:02,959 --> 00:10:06,000
and best of all this is already

00:10:04,560 --> 00:10:08,800
available all you need to do is update

00:10:06,000 --> 00:10:08,800
your presta version

00:10:09,279 --> 00:10:13,440
um let's also talk about more efficiency

00:10:11,519 --> 00:10:15,519
improvements um this is a big one

00:10:13,440 --> 00:10:17,519
last year we talked about project aria

00:10:15,519 --> 00:10:19,440
which had the goal of implementing

00:10:17,519 --> 00:10:21,680
major performance optimizations for the

00:10:19,440 --> 00:10:24,480
top operators in presto

00:10:21,680 --> 00:10:26,160
including scan and repartitioning on top

00:10:24,480 --> 00:10:26,880
of the already announced 10 to 20

00:10:26,160 --> 00:10:28,800
percent

00:10:26,880 --> 00:10:30,800
improvement from the initial project we

00:10:28,800 --> 00:10:33,279
landed another two to eight percent

00:10:30,800 --> 00:10:35,040
uh of cpu improvements uh with further

00:10:33,279 --> 00:10:37,279
performance optimizations

00:10:35,040 --> 00:10:38,079
um this was simply uh better software

00:10:37,279 --> 00:10:40,800
engineering

00:10:38,079 --> 00:10:41,600
uh by leveraging mechanical sympathy or

00:10:40,800 --> 00:10:43,760
encode

00:10:41,600 --> 00:10:45,040
in other words coding ways that are cpu

00:10:43,760 --> 00:10:48,079
friendly

00:10:45,040 --> 00:10:50,160
we were able to uh you know decrease the

00:10:48,079 --> 00:10:51,600
utilization quite a bit and i'd like to

00:10:50,160 --> 00:10:52,240
give it a quick shout out for ying su

00:10:51,600 --> 00:10:54,560
for

00:10:52,240 --> 00:10:56,480
these amazing enhancements um and it's

00:10:54,560 --> 00:10:58,399
available now all you need to do is opt

00:10:56,480 --> 00:11:01,760
into aria there's instructions on how to

00:10:58,399 --> 00:11:04,160
do that at the end of this presentation

00:11:01,760 --> 00:11:04,800
uh let's also talk about uh parquet

00:11:04,160 --> 00:11:07,120
efficiency

00:11:04,800 --> 00:11:08,720
so we improved parquet by making

00:11:07,120 --> 00:11:09,839
performance enhancements in the writer

00:11:08,720 --> 00:11:11,760
and by leveraging

00:11:09,839 --> 00:11:13,440
projection push down for complex types

00:11:11,760 --> 00:11:16,320
like list maps

00:11:13,440 --> 00:11:18,240
and the like so these are already done

00:11:16,320 --> 00:11:20,720
but in addition to that we also

00:11:18,240 --> 00:11:21,519
are uh working on implementing arya for

00:11:20,720 --> 00:11:24,640
parquet

00:11:21,519 --> 00:11:26,560
uh which will further improve the uh the

00:11:24,640 --> 00:11:27,680
performance by leveraging all those

00:11:26,560 --> 00:11:30,160
wonderful

00:11:27,680 --> 00:11:31,200
performance enhancements that we get by

00:11:30,160 --> 00:11:34,160
using aria

00:11:31,200 --> 00:11:35,839
including complex filter push down

00:11:34,160 --> 00:11:36,240
filter reordering and the like that

00:11:35,839 --> 00:11:38,959
we've

00:11:36,240 --> 00:11:42,079
already discussed so be on the lookout

00:11:38,959 --> 00:11:43,920
for that as well

00:11:42,079 --> 00:11:45,600
we spoke about last year about a native

00:11:43,920 --> 00:11:47,600
engine which is being developed

00:11:45,600 --> 00:11:50,000
uh creating a native engine that plugs

00:11:47,600 --> 00:11:52,160
into presto has numerous advantages

00:11:50,000 --> 00:11:54,160
uh firstly you get better vectorization

00:11:52,160 --> 00:11:56,880
or usage of cindy instructions

00:11:54,160 --> 00:11:59,680
for better performance um you get better

00:11:56,880 --> 00:12:01,839
control over memory usage by uh having

00:11:59,680 --> 00:12:03,839
basically direct control over over the

00:12:01,839 --> 00:12:06,720
memory that's not possible

00:12:03,839 --> 00:12:09,200
or feasible in the jpm and you also get

00:12:06,720 --> 00:12:11,600
to remove the fixed overhead of

00:12:09,200 --> 00:12:13,680
the jvm including garbage collection by

00:12:11,600 --> 00:12:17,040
leveraging a native worker

00:12:13,680 --> 00:12:19,519
um and uh and in addition to that

00:12:17,040 --> 00:12:22,079
um by factoring this out into a library

00:12:19,519 --> 00:12:24,560
we are able to leverage the execution

00:12:22,079 --> 00:12:25,600
uh in more components including uh

00:12:24,560 --> 00:12:28,240
things like spark

00:12:25,600 --> 00:12:29,680
so we're very excited about this native

00:12:28,240 --> 00:12:32,720
engine and we expect

00:12:29,680 --> 00:12:35,200
just to see truly um truly great

00:12:32,720 --> 00:12:36,839
performance improvements

00:12:35,200 --> 00:12:39,040
as you can imagine this is a massive

00:12:36,839 --> 00:12:41,279
undertaking and we hope to have

00:12:39,040 --> 00:12:41,660
an update to share later this year on

00:12:41,279 --> 00:12:44,480
this

00:12:41,660 --> 00:12:47,839
[Music]

00:12:44,480 --> 00:12:49,839
um so let's now talk about reliability

00:12:47,839 --> 00:12:52,000
we talked last year about presto on

00:12:49,839 --> 00:12:54,000
spark whose goal was to leverage spark

00:12:52,000 --> 00:12:55,839
to run presto queries that have either

00:12:54,000 --> 00:12:58,639
extremely high

00:12:55,839 --> 00:13:00,160
memory usage or very long duration uh or

00:12:58,639 --> 00:13:02,720
hit issues with local

00:13:00,160 --> 00:13:04,480
shuffle scalability things of those name

00:13:02,720 --> 00:13:07,200
of that nature

00:13:04,480 --> 00:13:08,160
the idea is to leverage spark to move

00:13:07,200 --> 00:13:11,440
into the

00:13:08,160 --> 00:13:14,560
very large uh large-scale batch etl

00:13:11,440 --> 00:13:15,920
um while keeping the presta syntax so we

00:13:14,560 --> 00:13:18,800
shared last year that

00:13:15,920 --> 00:13:20,079
uh 80 of query shapes were supported and

00:13:18,800 --> 00:13:22,800
now we're excited to see

00:13:20,079 --> 00:13:24,880
uh share that 100 of course shapes are

00:13:22,800 --> 00:13:27,200
now supported by preston spark

00:13:24,880 --> 00:13:28,480
um the same query can now organically

00:13:27,200 --> 00:13:31,120
move from interactive

00:13:28,480 --> 00:13:33,120
to massive bat scale and you can

00:13:31,120 --> 00:13:35,120
leverage your existing spark deployments

00:13:33,120 --> 00:13:36,560
to accomplish this

00:13:35,120 --> 00:13:38,480
um and we're very excited about this

00:13:36,560 --> 00:13:42,000
because what this means is that you can

00:13:38,480 --> 00:13:44,880
use the exact same presto syntax

00:13:42,000 --> 00:13:46,399
to prototype and to perform data

00:13:44,880 --> 00:13:47,199
exploration and then move this onto

00:13:46,399 --> 00:13:50,160
batch

00:13:47,199 --> 00:13:50,959
without having to to do a rewrite in

00:13:50,160 --> 00:13:53,839
case that the

00:13:50,959 --> 00:13:55,040
the scale of the data is is truly

00:13:53,839 --> 00:13:58,399
massive so

00:13:55,040 --> 00:14:01,440
um it's now with 100 query support

00:13:58,399 --> 00:14:03,440
um it's still a beta though um

00:14:01,440 --> 00:14:04,560
please if you experience any issues uh

00:14:03,440 --> 00:14:07,120
submit uh

00:14:04,560 --> 00:14:08,320
reach out to us on slack or on the uh

00:14:07,120 --> 00:14:09,760
presto issues but

00:14:08,320 --> 00:14:11,760
uh please give this a feature and try

00:14:09,760 --> 00:14:15,120
and let us know how it works we're very

00:14:11,760 --> 00:14:17,440
uh excited about this feature

00:14:15,120 --> 00:14:19,519
so let's talk more about reliability uh

00:14:17,440 --> 00:14:20,720
last year we focused on uh improved the

00:14:19,519 --> 00:14:23,040
gaps in spilling and

00:14:20,720 --> 00:14:24,639
allowing it to be more flexible about

00:14:23,040 --> 00:14:27,600
where spilling occurs

00:14:24,639 --> 00:14:28,639
um so if you have a temporary storage

00:14:27,600 --> 00:14:31,040
service or

00:14:28,639 --> 00:14:33,680
a place that's optimized for spilling

00:14:31,040 --> 00:14:35,920
you can now leverage that and presto

00:14:33,680 --> 00:14:38,480
we also fixed up the joint spilling and

00:14:35,920 --> 00:14:40,079
added additional spilling support

00:14:38,480 --> 00:14:41,600
and flexibility in how spilling is

00:14:40,079 --> 00:14:44,160
decided

00:14:41,600 --> 00:14:45,600
so that you know it can be more tuned

00:14:44,160 --> 00:14:48,639
according to your use case

00:14:45,600 --> 00:14:50,000
and um uh leads to less less results

00:14:48,639 --> 00:14:52,320
where the cluster memory uh

00:14:50,000 --> 00:14:53,600
cluster utilization is slow because of

00:14:52,320 --> 00:14:56,880
excessive spilling by

00:14:53,600 --> 00:14:56,880
several queries in the cluster

00:14:57,440 --> 00:15:01,519
this will reduce local ooms and allow

00:14:59,519 --> 00:15:02,720
presto to run more reliability with less

00:15:01,519 --> 00:15:04,160
failures

00:15:02,720 --> 00:15:07,920
and these features are ready to go on

00:15:04,160 --> 00:15:07,920
the latest presto release

00:15:09,519 --> 00:15:12,959
last year we also talked about an

00:15:11,360 --> 00:15:14,480
initiative to

00:15:12,959 --> 00:15:16,000
introduce multiple coordinators to

00:15:14,480 --> 00:15:17,760
presto clusters

00:15:16,000 --> 00:15:19,760
we tweaked the design to improve its

00:15:17,760 --> 00:15:22,320
reliability and suitability for

00:15:19,760 --> 00:15:23,199
uh cloud deployments and which will

00:15:22,320 --> 00:15:25,519
allow it to

00:15:23,199 --> 00:15:26,480
scale to larger cluster sizes and remove

00:15:25,519 --> 00:15:28,560
entirely

00:15:26,480 --> 00:15:29,680
the coordinator as a single point

00:15:28,560 --> 00:15:31,680
failure

00:15:29,680 --> 00:15:34,320
and allow the coordinator pool to scale

00:15:31,680 --> 00:15:36,000
independently of the worker full size

00:15:34,320 --> 00:15:38,079
so this is a critical project within

00:15:36,000 --> 00:15:39,519
facebook and

00:15:38,079 --> 00:15:40,959
we're thoroughly testing this feature

00:15:39,519 --> 00:15:41,759
now and hope to have an update for the

00:15:40,959 --> 00:15:44,399
community

00:15:41,759 --> 00:15:46,560
uh soon and uh swatnell taylor uh we'll

00:15:44,399 --> 00:15:47,199
be giving a talk later uh on this and i

00:15:46,560 --> 00:15:49,920
encourage you

00:15:47,199 --> 00:15:49,920
to check it out

00:15:50,880 --> 00:15:54,480
um we're also working on better resource

00:15:52,880 --> 00:15:56,959
placement uh

00:15:54,480 --> 00:15:57,519
within the cluster so we're working on

00:15:56,959 --> 00:16:00,000
allowing

00:15:57,519 --> 00:16:02,160
uh presto to have knowledge about which

00:16:00,000 --> 00:16:04,560
nodes are overloaded or which

00:16:02,160 --> 00:16:06,000
are have high memory utilization so that

00:16:04,560 --> 00:16:08,720
we can distribute the mode

00:16:06,000 --> 00:16:10,160
the load evenly within the cluster um we

00:16:08,720 --> 00:16:13,519
have very encouraging

00:16:10,160 --> 00:16:16,880
early results with this um and uh

00:16:13,519 --> 00:16:20,320
we hope to share updates soon but um

00:16:16,880 --> 00:16:20,320
uh yeah please stay tuned for that

00:16:21,120 --> 00:16:25,120
cool uh so let's now move on to

00:16:23,279 --> 00:16:29,040
extendability

00:16:25,120 --> 00:16:30,959
um so uh within the last year now presto

00:16:29,040 --> 00:16:33,680
supports uh sql functions

00:16:30,959 --> 00:16:34,560
um here's an example of the syntax uh

00:16:33,680 --> 00:16:37,199
but

00:16:34,560 --> 00:16:37,839
what you can now do is you can uh

00:16:37,199 --> 00:16:40,639
compose

00:16:37,839 --> 00:16:42,800
complex expressions in presto uh inside

00:16:40,639 --> 00:16:44,800
a function and you can use this to

00:16:42,800 --> 00:16:46,720
um function you can share this function

00:16:44,800 --> 00:16:48,399
with colleagues or share in pipelines

00:16:46,720 --> 00:16:50,800
without having to essentially

00:16:48,399 --> 00:16:53,600
repeat the same expressions over and

00:16:50,800 --> 00:16:53,600
over and over again

00:16:54,240 --> 00:16:58,880
and so this is available now please see

00:16:56,639 --> 00:17:00,320
the open source documentation on this

00:16:58,880 --> 00:17:02,560
please give it a try if this interests

00:17:00,320 --> 00:17:02,560
you

00:17:03,040 --> 00:17:06,319
and of course any talk about

00:17:04,799 --> 00:17:07,760
extendability would be incomplete

00:17:06,319 --> 00:17:09,280
without mentioning connectors

00:17:07,760 --> 00:17:10,799
um so i'd like to highlight two new

00:17:09,280 --> 00:17:12,000
connectors which were added uh there's

00:17:10,799 --> 00:17:13,760
the druid connector

00:17:12,000 --> 00:17:15,360
which is uh running in production at

00:17:13,760 --> 00:17:17,199
twitter please give it a try

00:17:15,360 --> 00:17:18,959
uh and the oracle connector was added as

00:17:17,199 --> 00:17:21,199
well please give this a try if this

00:17:18,959 --> 00:17:22,400
um if you if you use oracle and you'll

00:17:21,199 --> 00:17:24,000
find this useful

00:17:22,400 --> 00:17:25,520
uh we also have several more coming

00:17:24,000 --> 00:17:27,199
along the way so

00:17:25,520 --> 00:17:29,360
firstly is the iceberg connector which

00:17:27,199 --> 00:17:31,200
is going to be described later today

00:17:29,360 --> 00:17:32,559
um that's something that we're very

00:17:31,200 --> 00:17:33,039
excited about and it's going to be

00:17:32,559 --> 00:17:35,360
helpful

00:17:33,039 --> 00:17:36,880
i think for a lot of different folks um

00:17:35,360 --> 00:17:39,360
we'll also have the prometheus

00:17:36,880 --> 00:17:40,559
connector uh bigquery connectors as well

00:17:39,360 --> 00:17:41,280
there's going to be talk on that and

00:17:40,559 --> 00:17:46,880
then also

00:17:41,280 --> 00:17:50,640
arranger support for security

00:17:46,880 --> 00:17:53,120
um and in addition to uh sql functions

00:17:50,640 --> 00:17:55,360
we're also working on external functions

00:17:53,120 --> 00:17:56,880
uh by a pluggable function servers so

00:17:55,360 --> 00:17:58,480
similar to how the thrift connector

00:17:56,880 --> 00:18:01,200
allows you to create a thrift server to

00:17:58,480 --> 00:18:02,720
serve as a data connector

00:18:01,200 --> 00:18:04,400
you'll now be able to create a thrift

00:18:02,720 --> 00:18:06,960
server that will serve external

00:18:04,400 --> 00:18:08,720
functions to presto

00:18:06,960 --> 00:18:10,080
you can think of particular functions

00:18:08,720 --> 00:18:12,000
that only exist in c

00:18:10,080 --> 00:18:14,400
plus or python or things that you'd

00:18:12,000 --> 00:18:15,760
rather not recreate in java

00:18:14,400 --> 00:18:17,360
or things that are impossible to

00:18:15,760 --> 00:18:19,120
recreate or things that you would like

00:18:17,360 --> 00:18:20,000
to prefer to offload to an external

00:18:19,120 --> 00:18:22,559
process

00:18:20,000 --> 00:18:25,360
uh external function server can

00:18:22,559 --> 00:18:27,039
accommodate all these use cases

00:18:25,360 --> 00:18:28,559
technically this is in alpha but you can

00:18:27,039 --> 00:18:30,160
give it a try

00:18:28,559 --> 00:18:33,200
some bugs need to be worked out and bug

00:18:30,160 --> 00:18:33,200
reports are always welcome

00:18:37,919 --> 00:18:41,600
cool so the last thing that we were

00:18:40,320 --> 00:18:43,360
talking about

00:18:41,600 --> 00:18:45,120
about why we love presto is the open

00:18:43,360 --> 00:18:47,760
source community we love the

00:18:45,120 --> 00:18:48,480
the big vibrant community so let's look

00:18:47,760 --> 00:18:50,720
at some of the

00:18:48,480 --> 00:18:52,720
uh open source statistics um over the

00:18:50,720 --> 00:18:55,919
past year

00:18:52,720 --> 00:18:57,039
um over the past year we've had uh 1.7

00:18:55,919 --> 00:19:00,400
000 new commits

00:18:57,039 --> 00:19:03,120
500 new forks 1.5 000

00:19:00,400 --> 00:19:05,679
uh new stars and we've had 16 open

00:19:03,120 --> 00:19:08,960
source releases so

00:19:05,679 --> 00:19:10,400
major releases so i'm really happy

00:19:08,960 --> 00:19:12,320
about these numbers and i'm really

00:19:10,400 --> 00:19:13,840
grateful for everyone in the open source

00:19:12,320 --> 00:19:16,000
community

00:19:13,840 --> 00:19:18,799
that helps contributing and keeps

00:19:16,000 --> 00:19:21,520
pushing this project forward

00:19:18,799 --> 00:19:22,799
these are really great numbers but the

00:19:21,520 --> 00:19:25,200
question i would like

00:19:22,799 --> 00:19:26,320
to ask is how do we make all this 10

00:19:25,200 --> 00:19:28,799
times better

00:19:26,320 --> 00:19:30,799
so what are we going to do to get to 10

00:19:28,799 --> 00:19:32,240
times the commits and 10 times the forks

00:19:30,799 --> 00:19:34,160
and 10 times the

00:19:32,240 --> 00:19:36,720
uh you know the the contributors

00:19:34,160 --> 00:19:39,039
contributing to presto

00:19:36,720 --> 00:19:40,960
and so um you know like that's kind of

00:19:39,039 --> 00:19:43,520
like what this conference is about

00:19:40,960 --> 00:19:45,679
um i'll highlight a few things but i'll

00:19:43,520 --> 00:19:47,039
also be mentioning uh other talks later

00:19:45,679 --> 00:19:49,280
uh later today that you should

00:19:47,039 --> 00:19:52,240
definitely check out um

00:19:49,280 --> 00:19:53,039
and uh you know like all this really

00:19:52,240 --> 00:19:56,480
ties

00:19:53,039 --> 00:19:57,679
back into um what are we doing to make

00:19:56,480 --> 00:19:59,600
you know all the things that we love

00:19:57,679 --> 00:20:00,000
about presto uh what are we going to

00:19:59,600 --> 00:20:03,360
make

00:20:00,000 --> 00:20:06,080
those even better so firstly

00:20:03,360 --> 00:20:07,200
we're going to make presto even faster

00:20:06,080 --> 00:20:09,679
we're going to be

00:20:07,200 --> 00:20:12,400
pushing towards even more low latency

00:20:09,679 --> 00:20:14,080
and high qps use cases

00:20:12,400 --> 00:20:15,919
we want to do this through a lot of

00:20:14,080 --> 00:20:18,480
areas including improving the

00:20:15,919 --> 00:20:20,480
bottlenecks in all areas of the stack

00:20:18,480 --> 00:20:22,720
improving our ability to do intelligent

00:20:20,480 --> 00:20:25,760
partition pruning and data clustering

00:20:22,720 --> 00:20:28,960
to allow for very quick reads um

00:20:25,760 --> 00:20:30,159
raptor x also is a really a critical

00:20:28,960 --> 00:20:32,400
component in getting us

00:20:30,159 --> 00:20:34,080
into this very low latency space and

00:20:32,400 --> 00:20:36,240
expect more work from this

00:20:34,080 --> 00:20:38,240
in the future that james will talk about

00:20:36,240 --> 00:20:40,960
uh we also are looking at

00:20:38,240 --> 00:20:43,120
uh the pre-aggregation space with uh

00:20:40,960 --> 00:20:45,600
support for materialized views and

00:20:43,120 --> 00:20:46,240
also connectors like pino which uh zheng

00:20:45,600 --> 00:20:48,240
will

00:20:46,240 --> 00:20:50,000
also talk about help move us in in this

00:20:48,240 --> 00:20:51,760
direction so we want to we want to make

00:20:50,000 --> 00:20:53,600
presto suitable for even faster use

00:20:51,760 --> 00:20:55,360
cases

00:20:53,600 --> 00:20:56,640
we want to make presto even more

00:20:55,360 --> 00:20:59,039
efficient um

00:20:56,640 --> 00:21:00,880
and so really the native execution

00:20:59,039 --> 00:21:02,320
engine is going to be foundational in

00:21:00,880 --> 00:21:04,480
getting us there um

00:21:02,320 --> 00:21:06,480
definitely stay tuned for for updates on

00:21:04,480 --> 00:21:09,120
this um we also have other

00:21:06,480 --> 00:21:11,039
uh you know uh improvements including

00:21:09,120 --> 00:21:12,480
you know end-to-end binary and uh

00:21:11,039 --> 00:21:14,880
further improvements in the

00:21:12,480 --> 00:21:17,039
you know the the the algorithms that we

00:21:14,880 --> 00:21:19,520
use for

00:21:17,039 --> 00:21:21,200
all of our operators so continue to stay

00:21:19,520 --> 00:21:23,120
tuned

00:21:21,200 --> 00:21:24,320
we want to make presto even more

00:21:23,120 --> 00:21:25,760
reliable

00:21:24,320 --> 00:21:27,440
including durability and challenging

00:21:25,760 --> 00:21:29,200
environment so

00:21:27,440 --> 00:21:30,960
we want to add the ability to allow

00:21:29,200 --> 00:21:32,559
dynamic and failure-free scaling

00:21:30,960 --> 00:21:34,159
allowing one to leverage elastic

00:21:32,559 --> 00:21:35,520
resources without noticeable air

00:21:34,159 --> 00:21:38,240
increases for users

00:21:35,520 --> 00:21:39,440
um expand presto clusters without

00:21:38,240 --> 00:21:41,600
reasoning about

00:21:39,440 --> 00:21:43,200
coordinator utilization and continue to

00:21:41,600 --> 00:21:44,480
press the large batch mode and press the

00:21:43,200 --> 00:21:47,600
spark

00:21:44,480 --> 00:21:50,799
for the extremely large end um where

00:21:47,600 --> 00:21:53,919
you know of uh queries that

00:21:50,799 --> 00:21:54,640
benefit from the reliability of uh spark

00:21:53,919 --> 00:21:57,280
for these uh

00:21:54,640 --> 00:21:59,360
large etl type of queries and then also

00:21:57,280 --> 00:22:01,280
work towards a partial recovery solution

00:21:59,360 --> 00:22:04,240
for that is more suitable for

00:22:01,280 --> 00:22:06,799
uh medium to to short query so keep an

00:22:04,240 --> 00:22:08,799
eye out for all that

00:22:06,799 --> 00:22:10,080
we want to make principal presto even

00:22:08,799 --> 00:22:11,679
more extendable

00:22:10,080 --> 00:22:13,840
so we want to keep on adding connectors

00:22:11,679 --> 00:22:15,600
and we you know want to keep on uh

00:22:13,840 --> 00:22:16,960
you know supporting these uh connectors

00:22:15,600 --> 00:22:18,799
from the community

00:22:16,960 --> 00:22:20,640
we want to bring external function

00:22:18,799 --> 00:22:23,120
support um you know like

00:22:20,640 --> 00:22:24,799
to the whole open open source ecosystem

00:22:23,120 --> 00:22:27,760
uh and allow the open source

00:22:24,799 --> 00:22:29,120
ecosystem to run with that we want and

00:22:27,760 --> 00:22:30,960
there's going to be talks about uh

00:22:29,120 --> 00:22:33,600
iceberg and hootie that also

00:22:30,960 --> 00:22:35,039
move us toward uh this you know like a

00:22:33,600 --> 00:22:39,039
very scalable

00:22:35,039 --> 00:22:40,640
future of metadata architecture

00:22:39,039 --> 00:22:42,159
and we also want to make the the core

00:22:40,640 --> 00:22:44,320
sql functionality

00:22:42,159 --> 00:22:46,559
uh a library that will allow it to be

00:22:44,320 --> 00:22:48,960
embedded into other processes so that

00:22:46,559 --> 00:22:50,159
we can leverage the sql syntax without

00:22:48,960 --> 00:22:53,840
any change in

00:22:50,159 --> 00:22:56,080
uh syntax or semantics

00:22:53,840 --> 00:22:57,120
but the most important thing actually is

00:22:56,080 --> 00:22:58,720
going to be

00:22:57,120 --> 00:23:00,000
everyone who's in this talk and everyone

00:22:58,720 --> 00:23:02,480
who's attending attending this

00:23:00,000 --> 00:23:02,480
conference

00:23:02,799 --> 00:23:05,919
so there's there's many different ways

00:23:04,400 --> 00:23:08,159
to contribute and

00:23:05,919 --> 00:23:11,039
your participation is actually what

00:23:08,159 --> 00:23:13,360
makes this project successful

00:23:11,039 --> 00:23:14,640
so in particular uh please join our

00:23:13,360 --> 00:23:16,880
slack group

00:23:14,640 --> 00:23:20,400
please feel free to you know ping that

00:23:16,880 --> 00:23:22,320
group for any questions any comments

00:23:20,400 --> 00:23:24,320
questions about its operations questions

00:23:22,320 --> 00:23:25,360
about its design uh anything that comes

00:23:24,320 --> 00:23:27,200
to mind

00:23:25,360 --> 00:23:28,960
um you can file issues for missing

00:23:27,200 --> 00:23:30,720
functionality or ideas that you have for

00:23:28,960 --> 00:23:33,039
for preston and github issues

00:23:30,720 --> 00:23:35,280
but uh you know probably uh feel free to

00:23:33,039 --> 00:23:37,200
ping the slack group uh before them

00:23:35,280 --> 00:23:38,400
uh take open issues and offer to work on

00:23:37,200 --> 00:23:40,240
them um

00:23:38,400 --> 00:23:41,520
there's uh you know many different open

00:23:40,240 --> 00:23:42,720
issues and i think that there's

00:23:41,520 --> 00:23:45,039
something for everyone

00:23:42,720 --> 00:23:46,159
if you're looking to intro uh contribute

00:23:45,039 --> 00:23:48,960
at a code level

00:23:46,159 --> 00:23:51,600
um there's many tasks that are varying

00:23:48,960 --> 00:23:52,240
difficulty uh feel free to you know like

00:23:51,600 --> 00:23:53,440
um

00:23:52,240 --> 00:23:55,120
you know look through some of the open

00:23:53,440 --> 00:23:57,120
issues or ask for help uh for

00:23:55,120 --> 00:23:59,039
suggestions

00:23:57,120 --> 00:24:00,640
uh contribute blog post for your presto

00:23:59,039 --> 00:24:02,080
use case um

00:24:00,640 --> 00:24:04,000
we know that there's a lot of press use

00:24:02,080 --> 00:24:04,720
cases out there and each one of them is

00:24:04,000 --> 00:24:06,799
unique

00:24:04,720 --> 00:24:07,919
um sharing this experience helps others

00:24:06,799 --> 00:24:10,880
in the community

00:24:07,919 --> 00:24:12,320
um you know like all understand how how

00:24:10,880 --> 00:24:13,440
others do it which which is really

00:24:12,320 --> 00:24:15,760
helpful i think

00:24:13,440 --> 00:24:17,679
um and you can also you know contribute

00:24:15,760 --> 00:24:21,120
a bug fix a connector

00:24:17,679 --> 00:24:24,159
kind of like as i mentioned earlier

00:24:21,120 --> 00:24:26,240
and also try out the new features um

00:24:24,159 --> 00:24:27,520
so if you know like very low latency

00:24:26,240 --> 00:24:29,919
queries interest you

00:24:27,520 --> 00:24:32,000
give raptor x a try i've linked to a

00:24:29,919 --> 00:24:34,559
bullet here about how to get started

00:24:32,000 --> 00:24:36,159
with them if you like the idea of

00:24:34,559 --> 00:24:37,120
scaling your interactive query all the

00:24:36,159 --> 00:24:39,760
way to

00:24:37,120 --> 00:24:42,720
a massive batch scale give presto and

00:24:39,760 --> 00:24:45,679
spark a try your presto unlimited

00:24:42,720 --> 00:24:47,360
if you like the performance benefits on

00:24:45,679 --> 00:24:49,200
ork and soon to be parquet

00:24:47,360 --> 00:24:50,400
um there's instructions on how to get

00:24:49,200 --> 00:24:52,880
started with arya

00:24:50,400 --> 00:24:54,640
um you know like uh be sure to you know

00:24:52,880 --> 00:24:56,400
update presto to use the latest parquet

00:24:54,640 --> 00:24:59,120
improvements

00:24:56,400 --> 00:24:59,520
and so on and so forth um and i would

00:24:59,120 --> 00:25:02,480
like to

00:24:59,520 --> 00:25:02,880
end this just by saying thank you um and

00:25:02,480 --> 00:25:05,360
uh

00:25:02,880 --> 00:25:07,279
i uh you know appreciate um you know

00:25:05,360 --> 00:25:08,720
everyone uh being here and i hope that

00:25:07,279 --> 00:25:14,640
you enjoy your session and

00:25:08,720 --> 00:25:14,640

YouTube URL: https://www.youtube.com/watch?v=mxgPEet_u7Y


