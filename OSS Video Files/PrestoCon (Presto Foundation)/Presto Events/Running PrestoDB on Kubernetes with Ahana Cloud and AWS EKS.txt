Title: Running PrestoDB on Kubernetes with Ahana Cloud and AWS EKS
Publication date: 2020-11-17
Playlist: Presto Events
Description: 
	PrestoDB is built to be cloud agnostic and container-friendly, but getting it to run on Kubernetes in the cloud can be challenging. In this talk, Gary Stafford (AWS) and Dipti Borkar (Ahana) will discuss:

- Introduction to the Amazon EKS service
- Why use the in-VPC deployment model with AWS
- Deploying PrestoDB on AWS EKS using the Ahana Cloud managed service within the userâ€™s AWS account
- Demo of how PrestoDB can easily federate across different cloud data sources like MySQL, PostgreSQL, S3 and other with a few clicks
- Using AWS Glue as a catalog for Presto to map S3 data lakes
Captions: 
	00:00:00,000 --> 00:00:03,840
very good so good afternoon everybody my

00:00:01,760 --> 00:00:05,839
name is gary stafford i'm a solutions

00:00:03,840 --> 00:00:07,359
architect here at aws

00:00:05,839 --> 00:00:08,960
i've worked closely with dipty and

00:00:07,359 --> 00:00:10,240
stephen and the rest of the hana team

00:00:08,960 --> 00:00:11,679
since their inception

00:00:10,240 --> 00:00:13,280
and then i was lucky enough to work with

00:00:11,679 --> 00:00:14,719
steven and dipty uh

00:00:13,280 --> 00:00:16,000
as part of some of their previous

00:00:14,719 --> 00:00:17,039
endeavors so we've known each other for

00:00:16,000 --> 00:00:19,520
a while

00:00:17,039 --> 00:00:21,279
and their work on the aws platform i'm

00:00:19,520 --> 00:00:22,880
going to briefly discuss two topics in

00:00:21,279 --> 00:00:24,480
regards to a hana cloud

00:00:22,880 --> 00:00:27,439
and then turn it back over to dipty to

00:00:24,480 --> 00:00:29,279
dive a little deeper into a hana cloud

00:00:27,439 --> 00:00:31,119
specifically so i'm going to talk i'm

00:00:29,279 --> 00:00:32,719
going to talk about the integration with

00:00:31,119 --> 00:00:34,320
aws

00:00:32,719 --> 00:00:36,239
first off i'm going to talk about amazon

00:00:34,320 --> 00:00:38,000
eks which is our managed kubernetes

00:00:36,239 --> 00:00:40,079
service which is the service that a hana

00:00:38,000 --> 00:00:41,920
cloud uses to deploy

00:00:40,079 --> 00:00:43,600
excuse me hana uses to deploy a hana

00:00:41,920 --> 00:00:44,960
cloud on aws

00:00:43,600 --> 00:00:49,280
and secondly i'm going to talk about

00:00:44,960 --> 00:00:49,280
what a hana is calling their nvpc method

00:00:50,160 --> 00:00:54,239
so amazon elastic kubernetes service or

00:00:52,960 --> 00:00:57,360
amazon eks

00:00:54,239 --> 00:00:58,239
is aws's fully fully managed kubernetes

00:00:57,360 --> 00:01:00,079
service so

00:00:58,239 --> 00:01:01,440
if you're a user of kubernetes and wants

00:01:00,079 --> 00:01:03,199
want to get started with it and don't

00:01:01,440 --> 00:01:05,360
want to do all the heavy lifting

00:01:03,199 --> 00:01:06,640
of uh setting up vms and deploying

00:01:05,360 --> 00:01:08,240
kubernetes

00:01:06,640 --> 00:01:10,240
on any of the cloud platforms each of

00:01:08,240 --> 00:01:11,840
the cloud platforms has a fully managed

00:01:10,240 --> 00:01:16,000
kubernetes service

00:01:11,840 --> 00:01:18,960
on amazon that's amazon eks

00:01:16,000 --> 00:01:21,040
amazon eks runs upstream kubernetes so

00:01:18,960 --> 00:01:23,280
it is a certified version of kubernetes

00:01:21,040 --> 00:01:26,320
it's kubernetes conformant

00:01:23,280 --> 00:01:30,000
currently uh amazon eks uh

00:01:26,320 --> 00:01:32,320
includes versions 1.15 1.16

00:01:30,000 --> 00:01:35,520
1.17 which was the current default last

00:01:32,320 --> 00:01:36,960
time i looked this week and then 1.1818

00:01:35,520 --> 00:01:38,640
and then each of those versions are

00:01:36,960 --> 00:01:41,280
supported for approximately nine months

00:01:38,640 --> 00:01:43,600
after it's released on the aws platform

00:01:41,280 --> 00:01:44,560
so you have your you have a time to

00:01:43,600 --> 00:01:46,000
upgrade

00:01:44,560 --> 00:01:49,280
uh and pick the version the current

00:01:46,000 --> 00:01:49,280
version that you want to work with

00:01:49,360 --> 00:01:53,360
uh very quickly at a high level

00:01:51,439 --> 00:01:54,159
obviously a lot of moving parts with

00:01:53,360 --> 00:01:55,759
with kubernetes

00:01:54,159 --> 00:01:58,240
and with a fully advantaged kubernetes

00:01:55,759 --> 00:02:01,280
service but amazon eks

00:01:58,240 --> 00:02:03,520
uh uh is a fully managed service the

00:02:01,280 --> 00:02:05,040
cluster consists of two vpcs

00:02:03,520 --> 00:02:06,479
if you're not familiar with the term vpc

00:02:05,040 --> 00:02:08,560
i'm going to discuss that we're going to

00:02:06,479 --> 00:02:11,360
discuss that in a minute so just hold on

00:02:08,560 --> 00:02:12,959
uh but two vpcs so the first vpc is

00:02:11,360 --> 00:02:14,800
managed by aws

00:02:12,959 --> 00:02:15,920
and that hosts the kubernetes control

00:02:14,800 --> 00:02:17,200
plane so if you're familiar with

00:02:15,920 --> 00:02:20,800
kubernetes the

00:02:17,200 --> 00:02:22,319
control plane is in a vpc which is uh uh

00:02:20,800 --> 00:02:24,959
controlled or hosted by

00:02:22,319 --> 00:02:25,760
and managed by aws and then the second

00:02:24,959 --> 00:02:29,120
vpc

00:02:25,760 --> 00:02:31,280
is managed by the customer um uh

00:02:29,120 --> 00:02:33,280
that hosts the kubernetes worker nodes

00:02:31,280 --> 00:02:35,760
on ec2 instances which

00:02:33,280 --> 00:02:36,480
on the aws platform are virtual machines

00:02:35,760 --> 00:02:38,400
which

00:02:36,480 --> 00:02:41,840
uh host the worker nodes which in turn

00:02:38,400 --> 00:02:41,840
hosts the running containers

00:02:42,000 --> 00:02:46,640
the the amazon eks control plane has a

00:02:44,959 --> 00:02:48,319
number of responsibilities

00:02:46,640 --> 00:02:50,160
some of those major responsibilities

00:02:48,319 --> 00:02:52,319
include automatically managing

00:02:50,160 --> 00:02:54,000
the availability and scalability of the

00:02:52,319 --> 00:02:56,000
kubernetes control plane

00:02:54,000 --> 00:02:57,200
uh it's responsible for stopping and

00:02:56,000 --> 00:03:00,319
starting the containers

00:02:57,200 --> 00:03:01,840
that are deployed to the cluster

00:03:00,319 --> 00:03:03,040
and when i use the word cluster just

00:03:01,840 --> 00:03:04,239
i'll stop there for a minute because i

00:03:03,040 --> 00:03:05,760
know we're talking about

00:03:04,239 --> 00:03:07,840
presto today i'm talking about a

00:03:05,760 --> 00:03:09,280
kubernetes cluster as opposed to a

00:03:07,840 --> 00:03:11,680
presto cluster

00:03:09,280 --> 00:03:13,200
which in the hana case is running on the

00:03:11,680 --> 00:03:14,879
kubernetes cluster so

00:03:13,200 --> 00:03:16,720
so hopefully that doesn't confuse

00:03:14,879 --> 00:03:18,400
anybody or maybe it confuses some people

00:03:16,720 --> 00:03:19,760
more including myself as i'm talking

00:03:18,400 --> 00:03:21,920
about it

00:03:19,760 --> 00:03:23,599
the control plane is also responsible

00:03:21,920 --> 00:03:25,840
for scheduling containers on

00:03:23,599 --> 00:03:27,920
the vms or the ec2 instances the worker

00:03:25,840 --> 00:03:29,280
nodes it's responsible for storing the

00:03:27,920 --> 00:03:31,040
cluster data

00:03:29,280 --> 00:03:33,280
and then it can automatically detect and

00:03:31,040 --> 00:03:35,840
replace unhealthy nodes so part of that

00:03:33,280 --> 00:03:36,879
undifferentiated heavy lifting that aws

00:03:35,840 --> 00:03:38,319
likes to

00:03:36,879 --> 00:03:40,000
likes to say that we do with our fully

00:03:38,319 --> 00:03:41,200
managed services so you don't have to

00:03:40,000 --> 00:03:44,560
worry about uh

00:03:41,200 --> 00:03:46,560
detecting replacing unhealthy nodes

00:03:44,560 --> 00:03:48,000
i i grabbed a quick picture here from

00:03:46,560 --> 00:03:50,879
one of our uh

00:03:48,000 --> 00:03:51,920
one one of our uh available deployment

00:03:50,879 --> 00:03:53,360
configurations

00:03:51,920 --> 00:03:54,959
there's a number of different ways to

00:03:53,360 --> 00:03:57,200
deploy kubernetes uh

00:03:54,959 --> 00:03:59,680
public private or hybrid of public and

00:03:57,200 --> 00:04:00,879
private this is just one typical example

00:03:59,680 --> 00:04:02,959
so you can see

00:04:00,879 --> 00:04:05,680
the kubernetes worker nodes deployed

00:04:02,959 --> 00:04:07,280
across three availability zones within

00:04:05,680 --> 00:04:09,840
one vpc

00:04:07,280 --> 00:04:10,959
so that it is highly available so if one

00:04:09,840 --> 00:04:14,080
of the availability

00:04:10,959 --> 00:04:15,920
zones go down maybe it's us east 1a

00:04:14,080 --> 00:04:18,000
those two there's still two more

00:04:15,920 --> 00:04:20,320
availability zones to provide

00:04:18,000 --> 00:04:22,320
high availability to the cluster and

00:04:20,320 --> 00:04:24,240
again why am i why are we talking about

00:04:22,320 --> 00:04:27,199
amazon eks because amazon

00:04:24,240 --> 00:04:29,040
eks is the primary service which a hana

00:04:27,199 --> 00:04:32,000
cloud uses to deploy

00:04:29,040 --> 00:04:33,919
uh its presto cluster and the other uh

00:04:32,000 --> 00:04:34,240
applications that are that are part of

00:04:33,919 --> 00:04:37,360
the

00:04:34,240 --> 00:04:37,360
hana cloud solution

00:04:38,320 --> 00:04:42,320
and then provisioning provisioning eks

00:04:40,960 --> 00:04:44,560
relatively easy

00:04:42,320 --> 00:04:45,360
there is a networking component to

00:04:44,560 --> 00:04:48,479
creating

00:04:45,360 --> 00:04:49,840
or using existing vpc uh assigning

00:04:48,479 --> 00:04:51,919
subnets understanding

00:04:49,840 --> 00:04:53,199
networking is is certainly important and

00:04:51,919 --> 00:04:54,800
then creating

00:04:53,199 --> 00:04:56,240
security groups to make sure that the

00:04:54,800 --> 00:04:58,560
cluster is secure

00:04:56,240 --> 00:04:59,280
and you control the ingress and egress

00:04:58,560 --> 00:05:01,199
to that

00:04:59,280 --> 00:05:03,600
uh so think of it as a virtual firewall

00:05:01,199 --> 00:05:05,680
who has access to what through what port

00:05:03,600 --> 00:05:07,199
again a couple different configurations

00:05:05,680 --> 00:05:08,960
uh what we're going to see with the hana

00:05:07,199 --> 00:05:10,800
cloud is a hana cloud takes care of all

00:05:08,960 --> 00:05:12,000
this so there's uh you don't even have

00:05:10,800 --> 00:05:14,479
to push any buttons

00:05:12,000 --> 00:05:16,240
uh you give you give uh secure control

00:05:14,479 --> 00:05:17,199
to a hana cloud they deploy the cluster

00:05:16,240 --> 00:05:18,960
within your

00:05:17,199 --> 00:05:20,720
uh within your account and it's up and

00:05:18,960 --> 00:05:24,880
running uh in the background you really

00:05:20,720 --> 00:05:27,039
never have to interact with the cluster

00:05:24,880 --> 00:05:28,400
so uh second thing i'd like to talk

00:05:27,039 --> 00:05:28,960
about before turning this back over to

00:05:28,400 --> 00:05:31,360
dipty

00:05:28,960 --> 00:05:33,039
is a hana cloud's in vpc deployment

00:05:31,360 --> 00:05:36,240
message so that's a term that

00:05:33,039 --> 00:05:37,039
uh a hana team has coined and it and it

00:05:36,240 --> 00:05:39,759
really

00:05:37,039 --> 00:05:41,280
uh incorporates a number of features

00:05:39,759 --> 00:05:43,039
security and networking features that

00:05:41,280 --> 00:05:45,280
are available on aws

00:05:43,039 --> 00:05:47,039
and it's the method which ahana uses to

00:05:45,280 --> 00:05:50,479
deploy a hana cloud

00:05:47,039 --> 00:05:50,960
into a customer account so so quickly i

00:05:50,479 --> 00:05:52,720
think

00:05:50,960 --> 00:05:54,960
in this in my opinion what makes a hana

00:05:52,720 --> 00:05:58,160
cloud unique um

00:05:54,960 --> 00:05:59,919
and a great solution for customers

00:05:58,160 --> 00:06:02,479
it really brings together the best

00:05:59,919 --> 00:06:04,720
features of a sas provider

00:06:02,479 --> 00:06:06,560
and the best security features of the

00:06:04,720 --> 00:06:09,680
do-it-yourself model on aws

00:06:06,560 --> 00:06:11,840
so you know if you go with a sas

00:06:09,680 --> 00:06:13,600
uh analytics engine not not all of them

00:06:11,840 --> 00:06:15,600
obviously there's there's there's a

00:06:13,600 --> 00:06:18,080
number of variations out there but

00:06:15,600 --> 00:06:18,960
uh a number of analytics engines so if

00:06:18,080 --> 00:06:20,880
you get analytics

00:06:18,960 --> 00:06:22,479
as a service it's a fully managed

00:06:20,880 --> 00:06:23,680
service again you don't have to do any

00:06:22,479 --> 00:06:25,199
of that heavy lifting

00:06:23,680 --> 00:06:26,720
somebody takes care of setting up and

00:06:25,199 --> 00:06:28,960
managing the cluster

00:06:26,720 --> 00:06:30,240
uh somebody takes care of security some

00:06:28,960 --> 00:06:31,840
somebody takes care of setting up and

00:06:30,240 --> 00:06:33,840
logging and monitoring for you

00:06:31,840 --> 00:06:35,840
you don't have to do that hard work the

00:06:33,840 --> 00:06:38,240
only thing you give up often times is

00:06:35,840 --> 00:06:40,560
loss of control of your data so in order

00:06:38,240 --> 00:06:44,880
to use an analytics as a service

00:06:40,560 --> 00:06:46,880
sas solution oftentimes your data

00:06:44,880 --> 00:06:48,479
in part or all of that data is being

00:06:46,880 --> 00:06:51,120
copied or cached

00:06:48,479 --> 00:06:52,720
to the to the sas provider again not in

00:06:51,120 --> 00:06:54,960
all cases but in many cases

00:06:52,720 --> 00:06:56,240
with the do-it-yourself model uh you

00:06:54,960 --> 00:06:57,840
know the the

00:06:56,240 --> 00:06:59,360
advantage or disadvantage depending on

00:06:57,840 --> 00:07:01,440
on how you view that is

00:06:59,360 --> 00:07:03,360
uh you're building it you own it you're

00:07:01,440 --> 00:07:05,199
managing it you're patching it

00:07:03,360 --> 00:07:06,880
you're maintaining it you're setting up

00:07:05,199 --> 00:07:08,560
logging and monitoring so so there's a

00:07:06,880 --> 00:07:11,360
heavy lift often on the

00:07:08,560 --> 00:07:12,319
uh the uh the individual the customer's

00:07:11,360 --> 00:07:14,880
part to

00:07:12,319 --> 00:07:16,720
configure a highly available distributed

00:07:14,880 --> 00:07:17,280
analytics engine within their aws

00:07:16,720 --> 00:07:19,520
account

00:07:17,280 --> 00:07:21,919
the advantage is you retain full control

00:07:19,520 --> 00:07:24,960
of your data so if your data

00:07:21,919 --> 00:07:27,039
is housed within your aws accounts

00:07:24,960 --> 00:07:28,560
uh then you then you retain full control

00:07:27,039 --> 00:07:31,520
the data never leaves

00:07:28,560 --> 00:07:32,960
your account the beauty of a hana cloud

00:07:31,520 --> 00:07:34,960
is they really combine

00:07:32,960 --> 00:07:36,080
both those both of the best features

00:07:34,960 --> 00:07:38,240
between sas and

00:07:36,080 --> 00:07:40,080
do it yourself so with the hana cloud

00:07:38,240 --> 00:07:43,199
you get a fully managed service

00:07:40,080 --> 00:07:44,720
that's deployed to your account so uh

00:07:43,199 --> 00:07:47,039
everything is within your account which

00:07:44,720 --> 00:07:48,479
means you retain control of your data

00:07:47,039 --> 00:07:51,599
and dipty will get a little a little

00:07:48,479 --> 00:07:54,000
more a little deeper into this

00:07:51,599 --> 00:07:55,680
uh i mentioned the amazon virtual

00:07:54,000 --> 00:07:58,639
private cloud or vpc

00:07:55,680 --> 00:08:01,199
uh that is that is the uh logical

00:07:58,639 --> 00:08:01,919
construct or the isolated section of aws

00:08:01,199 --> 00:08:05,440
cloud

00:08:01,919 --> 00:08:07,759
uh in which uh the eks cluster runs

00:08:05,440 --> 00:08:09,680
and on the eks cluster is where presto

00:08:07,759 --> 00:08:11,680
is running which ahana

00:08:09,680 --> 00:08:12,720
ahana has installed as part of the hana

00:08:11,680 --> 00:08:14,960
cloud solution

00:08:12,720 --> 00:08:15,919
so it's a it's a private block of ip4

00:08:14,960 --> 00:08:18,000
addresses

00:08:15,919 --> 00:08:19,520
it's within your account and within a

00:08:18,000 --> 00:08:21,599
particular region so

00:08:19,520 --> 00:08:22,879
uh oftentimes customers will have

00:08:21,599 --> 00:08:25,759
multiple accounts

00:08:22,879 --> 00:08:27,759
and oftentimes companies will deploy uh

00:08:25,759 --> 00:08:28,080
resources to multiple reasons depending

00:08:27,759 --> 00:08:30,479
on

00:08:28,080 --> 00:08:31,599
where their customers are or or where

00:08:30,479 --> 00:08:34,800
they may

00:08:31,599 --> 00:08:37,599
need to maintain uh data locality

00:08:34,800 --> 00:08:39,760
and govern uh where where data is housed

00:08:37,599 --> 00:08:43,200
so you have the ability to deploy

00:08:39,760 --> 00:08:44,080
the hana cloud solution to the region

00:08:43,200 --> 00:08:46,320
that you want

00:08:44,080 --> 00:08:48,880
and to the region often times where your

00:08:46,320 --> 00:08:48,880
data is

00:08:51,360 --> 00:08:54,640
so how does a hana cloud how does a hana

00:08:53,519 --> 00:08:58,000
cloud

00:08:54,640 --> 00:09:00,560
do this the way they do this is

00:08:58,000 --> 00:09:01,680
by delegating some access to a hana

00:09:00,560 --> 00:09:03,839
cloud

00:09:01,680 --> 00:09:06,160
and in return they will deploy aws

00:09:03,839 --> 00:09:09,200
resources securely to your account

00:09:06,160 --> 00:09:10,720
so uh again without going too deep uh

00:09:09,200 --> 00:09:11,519
identity access management

00:09:10,720 --> 00:09:14,080
authentication

00:09:11,519 --> 00:09:15,200
authorization is is uh is a broad and

00:09:14,080 --> 00:09:17,760
deep subject uh

00:09:15,200 --> 00:09:18,880
and certainly uh there's a lot of people

00:09:17,760 --> 00:09:20,480
smarter than i am that

00:09:18,880 --> 00:09:22,080
they could get into a very technical

00:09:20,480 --> 00:09:24,800
discussion on iam

00:09:22,080 --> 00:09:26,160
on aws but at a high level there's an

00:09:24,800 --> 00:09:27,920
assumed iam role

00:09:26,160 --> 00:09:29,600
so a hana cloud provides you with a

00:09:27,920 --> 00:09:32,640
blueprint with a json

00:09:29,600 --> 00:09:34,399
template for for a role

00:09:32,640 --> 00:09:35,839
uh the only work that you have to do to

00:09:34,399 --> 00:09:37,519
get started with the hana cloud is it

00:09:35,839 --> 00:09:39,519
really is create that role

00:09:37,519 --> 00:09:41,360
and then provide the uh unique

00:09:39,519 --> 00:09:42,959
identifier for that role of the arn back

00:09:41,360 --> 00:09:45,040
to a hana cloud

00:09:42,959 --> 00:09:46,800
what that does is it gives specifically

00:09:45,040 --> 00:09:50,080
a hana cloud and specifically

00:09:46,800 --> 00:09:52,560
one account uh that ahana owns access to

00:09:50,080 --> 00:09:53,360
your one and only account uh as a third

00:09:52,560 --> 00:09:56,399
party

00:09:53,360 --> 00:09:58,399
uh it uses it uses uh uh

00:09:56,399 --> 00:10:00,080
uh temporary credentials so they're

00:09:58,399 --> 00:10:03,360
short-lived credentials

00:10:00,080 --> 00:10:05,279
uh and we also use an external id so

00:10:03,360 --> 00:10:07,279
in addition to the security that those

00:10:05,279 --> 00:10:09,519
temporary credentials offer you

00:10:07,279 --> 00:10:11,440
using our security token service we use

00:10:09,519 --> 00:10:13,040
an additional external id

00:10:11,440 --> 00:10:15,760
uh to guarantee an additional level of

00:10:13,040 --> 00:10:18,480
security uh using that

00:10:15,760 --> 00:10:19,360
using that assumed role a hana cloud

00:10:18,480 --> 00:10:21,519
will deploy

00:10:19,360 --> 00:10:23,200
all of the assets necessary to stand up

00:10:21,519 --> 00:10:26,000
to eks cluster and then

00:10:23,200 --> 00:10:26,800
on that eks cluster uh deploy a hana

00:10:26,000 --> 00:10:29,440
cloud which is

00:10:26,800 --> 00:10:30,640
uh the presto cluster and the additional

00:10:29,440 --> 00:10:33,360
uh resources

00:10:30,640 --> 00:10:34,959
uh onto that so you can see here quickly

00:10:33,360 --> 00:10:37,440
i won't get too deeply into it

00:10:34,959 --> 00:10:39,600
uh this is just an example i've created

00:10:37,440 --> 00:10:41,360
that that trust relationship between

00:10:39,600 --> 00:10:42,800
in this case my account and the hana

00:10:41,360 --> 00:10:46,000
account um

00:10:42,800 --> 00:10:49,040
i provided them very specific uh

00:10:46,000 --> 00:10:51,839
capabilities uh policies permissions to

00:10:49,040 --> 00:10:53,600
particular services within my account

00:10:51,839 --> 00:10:55,760
and those are the only that's the only

00:10:53,600 --> 00:10:57,839
access they have and that's the access

00:10:55,760 --> 00:11:01,200
which a honda needs in order to

00:10:57,839 --> 00:11:03,680
deploy uh manage and maintain on a cloud

00:11:01,200 --> 00:11:05,440
on the customer's account and that can

00:11:03,680 --> 00:11:07,360
be revoked at any time obviously if

00:11:05,440 --> 00:11:10,000
there's any security concerns

00:11:07,360 --> 00:11:11,760
uh the the role can be viewed uh

00:11:10,000 --> 00:11:12,480
reviewed ahead of time by your security

00:11:11,760 --> 00:11:14,959
teams

00:11:12,480 --> 00:11:16,560
uh and then if there is any concern uh

00:11:14,959 --> 00:11:18,959
whatsoever that that role can

00:11:16,560 --> 00:11:20,320
immediately be revoked uh the external

00:11:18,959 --> 00:11:23,519
id could be changed so

00:11:20,320 --> 00:11:26,079
uh it provides a high level of security

00:11:23,519 --> 00:11:28,320
uh and uh and then the last thing here

00:11:26,079 --> 00:11:31,839
this is the end result so uh

00:11:28,320 --> 00:11:32,959
a hana cloud excuse me hana has deployed

00:11:31,839 --> 00:11:35,360
uh

00:11:32,959 --> 00:11:36,160
resources to the aws account using cloud

00:11:35,360 --> 00:11:37,760
formation

00:11:36,160 --> 00:11:40,000
uh so if you're if you're not familiar

00:11:37,760 --> 00:11:41,680
with cloud formation uh maybe you're

00:11:40,000 --> 00:11:42,000
familiar with terraform or any of the

00:11:41,680 --> 00:11:45,360
other

00:11:42,000 --> 00:11:47,440
infrastructure is code software

00:11:45,360 --> 00:11:48,399
solutions out there cloud formation is

00:11:47,440 --> 00:11:50,880
aws's

00:11:48,399 --> 00:11:53,600
infrastructure is code and in this case

00:11:50,880 --> 00:11:55,760
a hana cloud has used cloud formation

00:11:53,600 --> 00:11:57,200
so everything is infrastructure is code

00:11:55,760 --> 00:11:58,720
i can go in and look at any of these

00:11:57,200 --> 00:12:00,399
cloud formation stacks

00:11:58,720 --> 00:12:02,399
i can inspect them ahead of time to make

00:12:00,399 --> 00:12:02,959
sure that that they meet my security

00:12:02,399 --> 00:12:05,680
team's

00:12:02,959 --> 00:12:06,320
uh requirements and governance controls

00:12:05,680 --> 00:12:08,320
uh

00:12:06,320 --> 00:12:10,320
those are those are then deployed at any

00:12:08,320 --> 00:12:11,920
point i can undeploy those

00:12:10,320 --> 00:12:14,000
although it's obviously easier to go

00:12:11,920 --> 00:12:17,120
through the hana interface to

00:12:14,000 --> 00:12:17,120
to remove resources

00:12:18,079 --> 00:12:25,839
i'm going to turn back over to dipdy

00:12:43,360 --> 00:12:48,639
all right good perfect now perfect

00:12:46,399 --> 00:12:50,560
thank you uh so now now that you know a

00:12:48,639 --> 00:12:51,600
little bit more about eks let's dive

00:12:50,560 --> 00:12:54,959
into

00:12:51,600 --> 00:12:55,760
how the hana cloud itself works so at a

00:12:54,959 --> 00:12:57,680
high level

00:12:55,760 --> 00:12:59,200
uh you know many of you are probably

00:12:57,680 --> 00:13:01,760
managing presto yourself

00:12:59,200 --> 00:13:02,560
uh it is uh given that it comes out of

00:13:01,760 --> 00:13:04,560
the

00:13:02,560 --> 00:13:05,760
hadoop ecosystem it can be fairly

00:13:04,560 --> 00:13:07,200
complex to manage

00:13:05,760 --> 00:13:09,680
and with a hana what we've tried to do

00:13:07,200 --> 00:13:12,720
is really simplify that with presto db

00:13:09,680 --> 00:13:14,959
um as the as the core engine as the

00:13:12,720 --> 00:13:15,760
um as the distribution that we use uh

00:13:14,959 --> 00:13:17,920
and we have a

00:13:15,760 --> 00:13:18,800
built in a managed service around it so

00:13:17,920 --> 00:13:21,120
you don't need

00:13:18,800 --> 00:13:22,160
uh to manage your own catalogues you can

00:13:21,120 --> 00:13:24,240
use the uh

00:13:22,160 --> 00:13:26,320
hana managed hive metastore for example

00:13:24,240 --> 00:13:28,160
comes with built-in s3

00:13:26,320 --> 00:13:29,920
and also built-in configuration

00:13:28,160 --> 00:13:32,639
parameters for

00:13:29,920 --> 00:13:33,440
a range of different a range of

00:13:32,639 --> 00:13:36,639
different

00:13:33,440 --> 00:13:38,720
uh things like the catalogs as well as

00:13:36,639 --> 00:13:41,199
for the config properties itself so the

00:13:38,720 --> 00:13:43,120
setup is pretty straightforward um

00:13:41,199 --> 00:13:44,560
the first thing you do is uh you know

00:13:43,120 --> 00:13:47,199
you sign up into the

00:13:44,560 --> 00:13:48,720
the sas console once you've signed up we

00:13:47,199 --> 00:13:52,160
do the cross account access

00:13:48,720 --> 00:13:54,399
uh with uh with your aws account

00:13:52,160 --> 00:13:56,959
as gary was just talking about with this

00:13:54,399 --> 00:13:59,199
nvpc approach so it's a managed service

00:13:56,959 --> 00:14:00,880
that is deployed in your account so that

00:13:59,199 --> 00:14:03,839
we bring compute we bring

00:14:00,880 --> 00:14:06,240
presto into your account where your data

00:14:03,839 --> 00:14:07,600
is and so that makes it secure

00:14:06,240 --> 00:14:09,519
but at the same time you get all the

00:14:07,600 --> 00:14:12,560
benefits of a sas

00:14:09,519 --> 00:14:16,000
system which is orchestrating managing

00:14:12,560 --> 00:14:18,399
um deploying and managing presto for you

00:14:16,000 --> 00:14:19,279
uh once the compute plane is ready and

00:14:18,399 --> 00:14:21,680
uh

00:14:19,279 --> 00:14:23,360
and ready to go you you essentially can

00:14:21,680 --> 00:14:24,880
create any number of presto clusters

00:14:23,360 --> 00:14:28,399
within that compute plane

00:14:24,880 --> 00:14:31,519
uh to access your data sources

00:14:28,399 --> 00:14:34,399
on aws so the

00:14:31,519 --> 00:14:36,160
the hana sas console is responsible for

00:14:34,399 --> 00:14:38,920
uh the cluster orchestration

00:14:36,160 --> 00:14:41,040
uh consolidated logging everything comes

00:14:38,920 --> 00:14:41,920
pre-integrated so that you don't have to

00:14:41,040 --> 00:14:44,240
deal with

00:14:41,920 --> 00:14:46,240
uh managing this for example server logs

00:14:44,240 --> 00:14:49,279
coordinator logs are automatically

00:14:46,240 --> 00:14:52,079
integrated with uh with uh a cloud watch

00:14:49,279 --> 00:14:53,600
uh the the query log uh which you would

00:14:52,079 --> 00:14:56,560
typically have to write in

00:14:53,600 --> 00:14:57,519
uh um a java code with uh for the event

00:14:56,560 --> 00:15:00,399
listener for

00:14:57,519 --> 00:15:01,839
is pre-integrated as as a plug-in uh and

00:15:00,399 --> 00:15:04,079
the query logs are

00:15:01,839 --> 00:15:05,120
available in an s3 bucket as well as

00:15:04,079 --> 00:15:06,880
pre-connected

00:15:05,120 --> 00:15:08,720
with every presto cluster so that the

00:15:06,880 --> 00:15:11,120
admin has full access to this

00:15:08,720 --> 00:15:12,560
and you can use presto to query your

00:15:11,120 --> 00:15:15,760
your query log

00:15:12,560 --> 00:15:17,839
that presto has generated um uh security

00:15:15,760 --> 00:15:18,480
and access is built in into that as well

00:15:17,839 --> 00:15:20,399
as well as

00:15:18,480 --> 00:15:21,920
uh billing which goes directly through

00:15:20,399 --> 00:15:23,760
the marketplace and so it's a

00:15:21,920 --> 00:15:24,800
pay-as-you-go model you only pay for

00:15:23,760 --> 00:15:26,560
what you use

00:15:24,800 --> 00:15:28,320
uh the compute plane itself is where

00:15:26,560 --> 00:15:29,279
presto runs you can run multiple

00:15:28,320 --> 00:15:31,199
clusters

00:15:29,279 --> 00:15:32,720
and connect to a range of different data

00:15:31,199 --> 00:15:36,560
sources we see s3

00:15:32,720 --> 00:15:39,920
rds with mysql um postgres

00:15:36,560 --> 00:15:41,279
redshift as the most popular uh sources

00:15:39,920 --> 00:15:43,680
on aws

00:15:41,279 --> 00:15:44,560
and you can also connect with your glue

00:15:43,680 --> 00:15:47,360
as well as

00:15:44,560 --> 00:15:47,839
uh um and your own hive metastore if you

00:15:47,360 --> 00:15:50,160
have an

00:15:47,839 --> 00:15:51,920
external hive metastore so the sas

00:15:50,160 --> 00:15:54,240
console manages uh

00:15:51,920 --> 00:15:56,320
the the compute plane internally and you

00:15:54,240 --> 00:15:59,040
have uh you have the options of

00:15:56,320 --> 00:16:00,160
uh using um uh connecting with all your

00:15:59,040 --> 00:16:02,240
data sources

00:16:00,160 --> 00:16:03,440
all of this is running within that eks

00:16:02,240 --> 00:16:06,639
cluster uh

00:16:03,440 --> 00:16:08,480
that uh gary was talking about uh and uh

00:16:06,639 --> 00:16:08,959
and so you're never moving your data

00:16:08,480 --> 00:16:11,279
it's all

00:16:08,959 --> 00:16:12,320
in place querying with presto obviously

00:16:11,279 --> 00:16:15,360
uh it you

00:16:12,320 --> 00:16:17,199
you the queries uh use the presto db

00:16:15,360 --> 00:16:17,920
connectors uh to these various data

00:16:17,199 --> 00:16:20,079
sources

00:16:17,920 --> 00:16:21,199
um and uh uh pull the data and that's

00:16:20,079 --> 00:16:24,000
needed uh the

00:16:21,199 --> 00:16:25,040
push down predicates as needed based on

00:16:24,000 --> 00:16:27,360
each connector

00:16:25,040 --> 00:16:28,079
uh get access to the data that is all in

00:16:27,360 --> 00:16:29,839
memory

00:16:28,079 --> 00:16:31,920
uh within the presto cluster and then

00:16:29,839 --> 00:16:35,360
you you return the results here

00:16:31,920 --> 00:16:38,480
via jdbc or odbc drivers um to the

00:16:35,360 --> 00:16:39,440
your bi tool of choice um also comes in

00:16:38,480 --> 00:16:42,399
bundle with um

00:16:39,440 --> 00:16:42,800
an instance of super superset um it is

00:16:42,399 --> 00:16:45,360
uh

00:16:42,800 --> 00:16:47,600
it is again running in your vpc and so

00:16:45,360 --> 00:16:50,079
the the sas console

00:16:47,600 --> 00:16:51,519
uh the control plane never has access to

00:16:50,079 --> 00:16:54,160
any data there's never any

00:16:51,519 --> 00:16:54,959
user data uh that moves in uh from the

00:16:54,160 --> 00:16:57,440
compute plane

00:16:54,959 --> 00:16:59,199
into the uh into the sas console so a

00:16:57,440 --> 00:17:01,440
little bit of how it works um

00:16:59,199 --> 00:17:03,279
you know you can create uh uh you can

00:17:01,440 --> 00:17:06,480
create clusters you can

00:17:03,279 --> 00:17:09,760
add with a few clicks um

00:17:06,480 --> 00:17:12,400
the data sources that that you'd like

00:17:09,760 --> 00:17:13,280
and it automatically restarts um the

00:17:12,400 --> 00:17:14,559
cluster for you

00:17:13,280 --> 00:17:16,240
sometimes there's a lot of management

00:17:14,559 --> 00:17:17,360
that needs to be done when a catalog is

00:17:16,240 --> 00:17:19,280
added to presto

00:17:17,360 --> 00:17:20,880
you have to manually restart the clock

00:17:19,280 --> 00:17:22,880
the cluster um

00:17:20,880 --> 00:17:24,079
uh and uh as well as for some of the

00:17:22,880 --> 00:17:26,480
config properties

00:17:24,079 --> 00:17:27,760
and so that is made very easy with uh

00:17:26,480 --> 00:17:31,200
with click button

00:17:27,760 --> 00:17:33,760
uh kind of um experience

00:17:31,200 --> 00:17:34,480
you can also stop clusters star clusters

00:17:33,760 --> 00:17:36,720
uh

00:17:34,480 --> 00:17:38,400
after that and all your metadata about

00:17:36,720 --> 00:17:39,440
your configuration the data sources

00:17:38,400 --> 00:17:41,039
you've pre-connected

00:17:39,440 --> 00:17:42,960
is all maintained so you don't really

00:17:41,039 --> 00:17:44,720
lose that information uh or the

00:17:42,960 --> 00:17:45,679
coordinator and all the workers get

00:17:44,720 --> 00:17:47,919
de-provisioned

00:17:45,679 --> 00:17:50,559
and when you want to start back up again

00:17:47,919 --> 00:17:52,640
um your your configuration is maintained

00:17:50,559 --> 00:17:54,559
so you're you're never having to redo

00:17:52,640 --> 00:17:57,760
any of the configuration properties

00:17:54,559 --> 00:18:00,799
so um let me actually jump to the

00:17:57,760 --> 00:18:02,960
um the product itself and the uh

00:18:00,799 --> 00:18:04,000
the the sas to show you what that what

00:18:02,960 --> 00:18:05,840
that looks like

00:18:04,000 --> 00:18:08,240
so here is where you would start

00:18:05,840 --> 00:18:09,520
typically um this is the cross account

00:18:08,240 --> 00:18:12,400
access we give you

00:18:09,520 --> 00:18:13,840
uh access to the hana credentials and

00:18:12,400 --> 00:18:16,799
you pick uh you

00:18:13,840 --> 00:18:17,360
bring in your role arn that you want to

00:18:16,799 --> 00:18:20,720
uh

00:18:17,360 --> 00:18:22,880
uh uh want uh hana to assume and create

00:18:20,720 --> 00:18:24,720
the compute plane for you you pick uh

00:18:22,880 --> 00:18:26,320
you know you can pick the region that

00:18:24,720 --> 00:18:27,440
that your data sources are in so you

00:18:26,320 --> 00:18:29,200
want to be close to

00:18:27,440 --> 00:18:31,200
get the compute close to where your data

00:18:29,200 --> 00:18:32,400
sources are uh you pick a couple of

00:18:31,200 --> 00:18:35,600
different az's

00:18:32,400 --> 00:18:37,679
um eks by default is

00:18:35,600 --> 00:18:39,840
spread across multiple azs and so you

00:18:37,679 --> 00:18:43,200
need you you pick at least two

00:18:39,840 --> 00:18:45,200
so that you have the ability to um

00:18:43,200 --> 00:18:46,480
have a scale and high a high

00:18:45,200 --> 00:18:49,120
availability for

00:18:46,480 --> 00:18:49,840
the eks clusters as well as espresto you

00:18:49,120 --> 00:18:52,480
give a you know

00:18:49,840 --> 00:18:53,360
a domain name and you go from there once

00:18:52,480 --> 00:18:56,160
your compute

00:18:53,360 --> 00:18:57,919
plane is created it's very easy to get

00:18:56,160 --> 00:18:59,520
started so here you see i have a

00:18:57,919 --> 00:19:01,600
you know a few different clusters up and

00:18:59,520 --> 00:19:03,280
running you obviously have access to the

00:19:01,600 --> 00:19:05,679
the prestodb console

00:19:03,280 --> 00:19:07,200
uh which allows you to see what is uh uh

00:19:05,679 --> 00:19:09,760
going on in the cluster

00:19:07,200 --> 00:19:11,440
uh see the uh you know this this will

00:19:09,760 --> 00:19:13,520
this would look familiar to anyone who's

00:19:11,440 --> 00:19:15,840
used uh uh who's used presto

00:19:13,520 --> 00:19:16,960
but in addition to that uh you have uh

00:19:15,840 --> 00:19:20,640
every cluster

00:19:16,960 --> 00:19:21,280
is uh uh comes pre-built with uh uh if

00:19:20,640 --> 00:19:23,440
you'd like

00:19:21,280 --> 00:19:25,280
a hive meta store as well as a

00:19:23,440 --> 00:19:27,039
pre-connected s3 bucket so

00:19:25,280 --> 00:19:28,559
we've converted presto into a little

00:19:27,039 --> 00:19:29,760
mini data warehouse where you don't have

00:19:28,559 --> 00:19:31,760
to worry about the catalog

00:19:29,760 --> 00:19:34,080
you don't have to worry about the data

00:19:31,760 --> 00:19:36,880
storage it's pre-integrated if you like

00:19:34,080 --> 00:19:38,160
and um and you have all these endpoints

00:19:36,880 --> 00:19:41,440
that are readily available

00:19:38,160 --> 00:19:41,440
to you so let's take a look at

00:19:41,600 --> 00:19:46,799
superset here and so you have access to

00:19:46,880 --> 00:19:52,799
superset which allows you to essentially

00:19:50,320 --> 00:19:54,880
define data at your databases uh all

00:19:52,799 --> 00:19:57,200
your catalogs can be connected here

00:19:54,880 --> 00:19:58,799
and this allows you to do joins across

00:19:57,200 --> 00:19:59,360
the range of data sources if you want to

00:19:58,799 --> 00:20:02,320
join

00:19:59,360 --> 00:20:02,960
across glue data and hive data or rds

00:20:02,320 --> 00:20:05,039
data

00:20:02,960 --> 00:20:06,320
uh you essentially can define these

00:20:05,039 --> 00:20:09,200
different uh

00:20:06,320 --> 00:20:10,480
uh the uh the different catalogs and

00:20:09,200 --> 00:20:13,919
connections and then uh

00:20:10,480 --> 00:20:16,880
access it using dashboards or or your uh

00:20:13,919 --> 00:20:18,400
sql editor that's pre-integrated uh here

00:20:16,880 --> 00:20:22,720
so you see that i have a

00:20:18,400 --> 00:20:24,400
range of different um uh different uh

00:20:22,720 --> 00:20:26,400
connections for the different catalogs

00:20:24,400 --> 00:20:29,039
that presto has been connected to

00:20:26,400 --> 00:20:30,080
uh it gives i have access to i've picked

00:20:29,039 --> 00:20:33,200
uh

00:20:30,080 --> 00:20:34,240
this is my presto sandbox and so i have

00:20:33,200 --> 00:20:36,720
uh

00:20:34,240 --> 00:20:37,919
i have a default schema this is the hana

00:20:36,720 --> 00:20:40,799
managed hive that comes

00:20:37,919 --> 00:20:42,159
built in uh and you have um then have

00:20:40,799 --> 00:20:45,280
access to you know creating

00:20:42,159 --> 00:20:48,480
external tables uh in managed tables

00:20:45,280 --> 00:20:50,720
um um you know whatever format you want

00:20:48,480 --> 00:20:52,320
uh the the last thing i'll show you is

00:20:50,720 --> 00:20:53,919
how easy it is to connect data sources

00:20:52,320 --> 00:20:55,120
so you can connect a range of data

00:20:53,919 --> 00:20:56,880
sources very easily

00:20:55,120 --> 00:20:58,400
here you see that i have a you know four

00:20:56,880 --> 00:20:59,039
different data sources defined i have

00:20:58,400 --> 00:21:02,320
glue

00:20:59,039 --> 00:21:02,799
my sql um and others adding a data

00:21:02,320 --> 00:21:05,039
source

00:21:02,799 --> 00:21:06,159
is of extremely straightforward you

00:21:05,039 --> 00:21:08,320
essentially pick

00:21:06,159 --> 00:21:09,360
uh the data source you'd like given the

00:21:08,320 --> 00:21:11,919
credentials

00:21:09,360 --> 00:21:12,960
um click on add data source and it

00:21:11,919 --> 00:21:16,000
essentially

00:21:12,960 --> 00:21:17,679
will create that catalog

00:21:16,000 --> 00:21:20,000
properties file for you restart the

00:21:17,679 --> 00:21:23,200
cluster for you uh and all of that is

00:21:20,000 --> 00:21:24,000
uh is taken care of uh by a hana uh for

00:21:23,200 --> 00:21:25,520
each one

00:21:24,000 --> 00:21:27,120
of these data sources you have

00:21:25,520 --> 00:21:27,919
visibility into which clusters it's

00:21:27,120 --> 00:21:29,760
connected to

00:21:27,919 --> 00:21:32,320
so for example this glue is connected to

00:21:29,760 --> 00:21:34,400
my sandbox uh and two other clusters

00:21:32,320 --> 00:21:36,640
which are uh currently not active

00:21:34,400 --> 00:21:37,919
uh and uh it's very easy to go ahead and

00:21:36,640 --> 00:21:40,960
start up a cluster

00:21:37,919 --> 00:21:42,080
um now that this is in pending state uh

00:21:40,960 --> 00:21:45,200
once it uh

00:21:42,080 --> 00:21:47,200
comes up we'll be able to uh um

00:21:45,200 --> 00:21:48,480
use that lu uh catalog that was

00:21:47,200 --> 00:21:52,640
pre-attached to it

00:21:48,480 --> 00:21:55,120
um and uh access access data so you can

00:21:52,640 --> 00:21:56,480
stop restart clusters uh very very

00:21:55,120 --> 00:21:59,120
seamlessly

00:21:56,480 --> 00:22:00,320
uh with that um uh i want to hand it

00:21:59,120 --> 00:22:03,120
back to uh

00:22:00,320 --> 00:22:03,760
uh gary just to show maybe a quick view

00:22:03,120 --> 00:22:08,320
of uh

00:22:03,760 --> 00:22:08,320
how you are able to uh um

00:22:08,480 --> 00:22:14,159
maybe join across different uh different

00:22:11,280 --> 00:22:14,159
uh data sources

00:22:20,240 --> 00:22:23,520
can you see my screen okay dipty yes

00:22:23,120 --> 00:22:25,039
okay

00:22:23,520 --> 00:22:26,480
yeah so really quick i know we're out of

00:22:25,039 --> 00:22:28,320
time here i'll just show you very

00:22:26,480 --> 00:22:30,159
quickly as as ditty said i have a number

00:22:28,320 --> 00:22:31,440
of clusters set up here i have a sandbox

00:22:30,159 --> 00:22:34,880
or a dev cluster

00:22:31,440 --> 00:22:38,320
and a prod cluster i have three um

00:22:34,880 --> 00:22:40,559
r5 2xl nodes uh running

00:22:38,320 --> 00:22:41,919
uh which has an eight to one vcpu to

00:22:40,559 --> 00:22:44,640
membrane ratio

00:22:41,919 --> 00:22:45,120
so a a of uh an average size cluster you

00:22:44,640 --> 00:22:47,280
know uh

00:22:45,120 --> 00:22:48,960
to some people maybe uh three is a large

00:22:47,280 --> 00:22:49,520
cluster to other folks maybe a hundred

00:22:48,960 --> 00:22:51,360
is a

00:22:49,520 --> 00:22:52,559
hundred nodes or a large cluster so

00:22:51,360 --> 00:22:55,679
three fairly beefy

00:22:52,559 --> 00:22:57,919
uh beefy nodes and i've set up i have

00:22:55,679 --> 00:22:59,120
just a basic query here so this query is

00:22:57,919 --> 00:23:03,440
querying across

00:22:59,120 --> 00:23:06,640
three data sources i've have set up

00:23:03,440 --> 00:23:08,080
um i've set up a postgres rds data

00:23:06,640 --> 00:23:09,200
source so i have a data postgres

00:23:08,080 --> 00:23:10,799
database running

00:23:09,200 --> 00:23:12,880
i have redshift which is our data

00:23:10,799 --> 00:23:14,799
warehouse so i have a data warehouse

00:23:12,880 --> 00:23:15,919
connection and then i have a glue data

00:23:14,799 --> 00:23:18,080
catalog

00:23:15,919 --> 00:23:20,480
which is a hive compatible metastore

00:23:18,080 --> 00:23:23,600
with the underlying data in s3

00:23:20,480 --> 00:23:25,440
i've distributed the movies ratings uh

00:23:23,600 --> 00:23:27,840
database you're familiar with the movie

00:23:25,440 --> 00:23:28,559
ratings off of kaggle it's a 27 million

00:23:27,840 --> 00:23:30,640
row

00:23:28,559 --> 00:23:31,679
uh movie ratings database that's used

00:23:30,640 --> 00:23:33,360
often for testing

00:23:31,679 --> 00:23:35,200
so i've distributed the tables across

00:23:33,360 --> 00:23:37,760
these three data sources

00:23:35,200 --> 00:23:39,360
and then in a hana cloud i'm able to

00:23:37,760 --> 00:23:40,799
query across three of these so i've

00:23:39,360 --> 00:23:42,799
written a simple query

00:23:40,799 --> 00:23:44,960
i performed some basic calculations just

00:23:42,799 --> 00:23:47,600
to just to get it to run a little while

00:23:44,960 --> 00:23:49,520
looking for particular keywords within a

00:23:47,600 --> 00:23:51,520
within a text string in the movies

00:23:49,520 --> 00:23:52,720
uh and then particular cast members and

00:23:51,520 --> 00:23:56,080
then uh uh

00:23:52,720 --> 00:23:56,480
and then um uh compiling that uh in into

00:23:56,080 --> 00:23:58,640
uh

00:23:56,480 --> 00:23:59,760
into rankings uh and averaging the

00:23:58,640 --> 00:24:02,320
ratings uh

00:23:59,760 --> 00:24:03,120
and the uh their popularity so we can

00:24:02,320 --> 00:24:04,720
run that

00:24:03,120 --> 00:24:06,799
and then as dipty said i'm sure everyone

00:24:04,720 --> 00:24:09,039
on the call is familiar with presto

00:24:06,799 --> 00:24:10,559
and you've seen the uh presto engine

00:24:09,039 --> 00:24:12,400
running

00:24:10,559 --> 00:24:14,799
so you can see these errors because i

00:24:12,400 --> 00:24:17,600
might it wasn't fully started

00:24:14,799 --> 00:24:18,000
but you can see that that finished and

00:24:17,600 --> 00:24:20,159
we can

00:24:18,000 --> 00:24:22,640
we can drill in and take a look at that

00:24:20,159 --> 00:24:25,360
uh clicked on the wrong one there sorry

00:24:22,640 --> 00:24:26,880
um that did finish not sure why i got an

00:24:25,360 --> 00:24:28,400
error i did get a result

00:24:26,880 --> 00:24:30,400
um i think i'm disconnected from my

00:24:28,400 --> 00:24:31,520
cluster i got off my vpn i'm sorry

00:24:30,400 --> 00:24:33,200
but you can see that it returned a

00:24:31,520 --> 00:24:33,919
result in 11 seconds so it chewed

00:24:33,200 --> 00:24:35,840
through

00:24:33,919 --> 00:24:38,240
um three different data sources a data

00:24:35,840 --> 00:24:41,279
warehouse a data database and a

00:24:38,240 --> 00:24:44,480
a glued metastore on s3

00:24:41,279 --> 00:24:45,600
uh 27 million rows uh and it was able to

00:24:44,480 --> 00:24:47,520
come back with uh

00:24:45,600 --> 00:24:49,039
with the computed results in about 11

00:24:47,520 --> 00:24:50,880
seconds obviously adding more nodes

00:24:49,039 --> 00:24:55,039
would make that much faster

00:24:50,880 --> 00:24:59,600
great all right thanks so much gary

00:24:55,039 --> 00:24:59,600

YouTube URL: https://www.youtube.com/watch?v=pPMCkG9KiHM


