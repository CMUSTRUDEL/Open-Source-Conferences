Title: Presto, Today, and Beyond - Dipti Borkar, David Simmen, Biswapesh Chattopadhyay & Girish Baliga
Publication date: 2020-09-30
Playlist: PrestoCon 2020 - Virtual
Description: 
	Panel Discussion - Presto, Today, and Beyond - Moderated by Dipti Borkar, Ahana; David Simmen, Ahana; Biswapesh Chattopadhyay, Facebook & Girish Baliga, Uber

Speakers: Dipti Borkar, David Simmen, Girish Baliga, Biswapesh Chattopadhyay

Today Presto is widely adopted for many use cases at Facebook, Uber and across the community. In this panel, learn more about the future of Presto with Biswapesh Chattopadhyay, Girish Baliga, David Simmen and Dipti Borkar. They will discuss the exciting innovations being planned and worked on and the shared vision for Presto.
Captions: 
	00:00:00,799 --> 00:00:06,160
thank you eric um well

00:00:03,040 --> 00:00:07,440
just another introduction uh about me

00:00:06,160 --> 00:00:08,800
short and sweet i think the

00:00:07,440 --> 00:00:09,280
introductions for all these three

00:00:08,800 --> 00:00:10,960
together

00:00:09,280 --> 00:00:12,719
might take up 30 minutes because we have

00:00:10,960 --> 00:00:15,920
database gurus here

00:00:12,719 --> 00:00:16,480
on our panel um i'm uh deputy borger i'm

00:00:15,920 --> 00:00:18,800
the chair of

00:00:16,480 --> 00:00:20,640
the presto foundation outreach and this

00:00:18,800 --> 00:00:22,240
is a very interesting panel been uh

00:00:20,640 --> 00:00:24,080
waiting for this one

00:00:22,240 --> 00:00:26,160
uh through the day as we talked about

00:00:24,080 --> 00:00:29,359
earlier uh open source

00:00:26,160 --> 00:00:31,760
allows us to share road maps uh to ship

00:00:29,359 --> 00:00:34,239
to be transparent about the technologies

00:00:31,760 --> 00:00:36,480
uh that uh uh that the teams are working

00:00:34,239 --> 00:00:37,840
on uh and in this panel we'll we'll talk

00:00:36,480 --> 00:00:38,879
a little bit about that we'll talk about

00:00:37,840 --> 00:00:41,840
prestor today

00:00:38,879 --> 00:00:43,600
uh as well as beyond but uh uh before

00:00:41,840 --> 00:00:46,800
going into the details um

00:00:43,600 --> 00:00:50,160
let me uh we will be hearing from bishop

00:00:46,800 --> 00:00:51,199
chatapathy from facebook girish baliga

00:00:50,160 --> 00:00:54,640
from uber

00:00:51,199 --> 00:00:58,000
and dave simon from mahana biswa

00:00:54,640 --> 00:00:59,760
is a tech lead of the data for compute

00:00:58,000 --> 00:01:02,079
and modernization at facebook

00:00:59,760 --> 00:01:03,760
prior to that he was spent many years at

00:01:02,079 --> 00:01:06,080
google i think uh

00:01:03,760 --> 00:01:07,200
12 or 13 years designing some of the

00:01:06,080 --> 00:01:10,159
next generation

00:01:07,200 --> 00:01:11,520
of google's exo-scale infrastructure uh

00:01:10,159 --> 00:01:13,840
worked on projects

00:01:11,520 --> 00:01:15,759
uh building projects like priscilla

00:01:13,840 --> 00:01:16,240
state-of-the-art distributed sql query

00:01:15,759 --> 00:01:19,759
engine

00:01:16,240 --> 00:01:20,640
um tensing um uh sql and mapreduce query

00:01:19,759 --> 00:01:23,680
engine as well

00:01:20,640 --> 00:01:24,960
uh bishwar thanks for joining today we

00:01:23,680 --> 00:01:28,240
also have with us

00:01:24,960 --> 00:01:31,360
girish girish manages presto at uh

00:01:28,240 --> 00:01:32,880
and pino and flink teams at uber and

00:01:31,360 --> 00:01:35,520
prior to that he spent uh

00:01:32,880 --> 00:01:36,640
over a decade optimizing resources

00:01:35,520 --> 00:01:39,840
search ads

00:01:36,640 --> 00:01:41,600
geodata at google as well interrupted by

00:01:39,840 --> 00:01:44,320
a brief startup stint

00:01:41,600 --> 00:01:46,880
uh at urban engines and uh he has a phd

00:01:44,320 --> 00:01:50,720
in computer science uh from uiuc

00:01:46,880 --> 00:01:53,920
uh and uh nms in math as well

00:01:50,720 --> 00:01:55,360
uh and last but not least dave simmon uh

00:01:53,920 --> 00:01:58,240
co-founder and cto

00:01:55,360 --> 00:02:00,719
of hana dave was chief architect with

00:01:58,240 --> 00:02:01,600
splunk and was named first fellow of the

00:02:00,719 --> 00:02:03,920
company

00:02:01,600 --> 00:02:05,680
um prior to splunk dave was an

00:02:03,920 --> 00:02:08,560
engineering fellow and cto

00:02:05,680 --> 00:02:10,160
of terror data astor and earlier in his

00:02:08,560 --> 00:02:12,640
career he was

00:02:10,160 --> 00:02:13,200
stsm senior technical staff member at

00:02:12,640 --> 00:02:16,800
ibm

00:02:13,200 --> 00:02:18,879
research dave is a named inventor of

00:02:16,800 --> 00:02:21,200
about 37 parents and has a

00:02:18,879 --> 00:02:22,080
about 15 publication in his in his name

00:02:21,200 --> 00:02:23,760
so

00:02:22,080 --> 00:02:25,920
i think if i keep going we'll take the

00:02:23,760 --> 00:02:26,480
other take the whole time so let's dive

00:02:25,920 --> 00:02:29,840
in

00:02:26,480 --> 00:02:32,640
um folks it's it uh you know presto is

00:02:29,840 --> 00:02:33,599
a fascinating um engine as we've talked

00:02:32,640 --> 00:02:36,400
about all day

00:02:33,599 --> 00:02:37,599
open federated disaggregated uh

00:02:36,400 --> 00:02:40,800
distributed

00:02:37,599 --> 00:02:42,959
and um and with that uh you know

00:02:40,800 --> 00:02:44,640
maybe you can uh each of you can talk a

00:02:42,959 --> 00:02:47,120
little bit about

00:02:44,640 --> 00:02:48,000
your experience at uh with presto

00:02:47,120 --> 00:02:50,000
currently

00:02:48,000 --> 00:02:54,000
um and uh maybe a short introduction

00:02:50,000 --> 00:02:54,000
with it bishop where did you get started

00:02:55,040 --> 00:03:00,959
i think um he has said that um

00:02:58,239 --> 00:03:02,640
by the way excuse my voice um i am

00:03:00,959 --> 00:03:05,519
totally horse for the last few days

00:03:02,640 --> 00:03:06,159
so i'll be um mostly cloaking instead of

00:03:05,519 --> 00:03:10,080
talking

00:03:06,159 --> 00:03:12,959
um and uh i think uh

00:03:10,080 --> 00:03:14,720
i come from a non kind of as i come from

00:03:12,959 --> 00:03:16,239
a google background where like

00:03:14,720 --> 00:03:17,519
there was really no exposure to open

00:03:16,239 --> 00:03:18,319
source so the whole thing has been kind

00:03:17,519 --> 00:03:21,840
of

00:03:18,319 --> 00:03:23,599
quite fascinating i think that

00:03:21,840 --> 00:03:25,840
the power of open source and the how it

00:03:23,599 --> 00:03:27,440
can very quickly innovate is quite

00:03:25,840 --> 00:03:31,200
fascinating to me

00:03:27,440 --> 00:03:33,680
and uh i also see a lot of

00:03:31,200 --> 00:03:35,920
kind of missing bits or opportunities or

00:03:33,680 --> 00:03:38,480
how we can

00:03:35,920 --> 00:03:39,040
you know take it to the next level so to

00:03:38,480 --> 00:03:41,040
say

00:03:39,040 --> 00:03:42,080
and then there are like there is

00:03:41,040 --> 00:03:42,799
actually i'm going to be talking about

00:03:42,080 --> 00:03:45,599
this

00:03:42,799 --> 00:03:46,959
later as you guys know about some of the

00:03:45,599 --> 00:03:49,040
stuff you're doing at facebook about it

00:03:46,959 --> 00:03:52,640
so it's um yeah i'm quite

00:03:49,040 --> 00:03:54,720
uh intrigued by this whole uh

00:03:52,640 --> 00:03:56,480
problem space and uh very excited to be

00:03:54,720 --> 00:03:58,640
working with all of you guys

00:03:56,480 --> 00:04:00,799
great thanks special girish you want to

00:03:58,640 --> 00:04:04,000
go next maybe a short intro

00:04:00,799 --> 00:04:05,680
background yeah sure uh thanks for that

00:04:04,000 --> 00:04:07,280
nice introduction youtube so as you

00:04:05,680 --> 00:04:09,280
mentioned um so

00:04:07,280 --> 00:04:10,640
at google i spent a long time just like

00:04:09,280 --> 00:04:13,040
viswa and

00:04:10,640 --> 00:04:14,000
i was actually in multiple domains i was

00:04:13,040 --> 00:04:16,400
in uh

00:04:14,000 --> 00:04:18,000
infrastructure the borg area and then i

00:04:16,400 --> 00:04:20,959
spent a bunch of time

00:04:18,000 --> 00:04:22,560
in the search as ecosystem we were

00:04:20,959 --> 00:04:23,280
counting millisecond budgets all the

00:04:22,560 --> 00:04:26,400
time

00:04:23,280 --> 00:04:28,080
and then i worked on

00:04:26,400 --> 00:04:30,240
analytics for your data systems and

00:04:28,080 --> 00:04:33,520
that's how i ended up here to work

00:04:30,240 --> 00:04:35,280
um so yeah i i think it's been like like

00:04:33,520 --> 00:04:36,800
this far for me also open source is new

00:04:35,280 --> 00:04:38,160
so it's been kind of an interesting

00:04:36,800 --> 00:04:40,479
experience so far

00:04:38,160 --> 00:04:42,000
uh but it's also been a good opportunity

00:04:40,479 --> 00:04:43,440
for me to bring all the

00:04:42,000 --> 00:04:45,440
experiences that i've had with these

00:04:43,440 --> 00:04:46,880
other domains so core and for how to run

00:04:45,440 --> 00:04:50,639
reliable systems

00:04:46,880 --> 00:04:53,040
uh so with such as how to run like

00:04:50,639 --> 00:04:53,759
systems with high up time and how to

00:04:53,040 --> 00:04:56,160
like

00:04:53,759 --> 00:04:56,960
optimize for low latency workloads and

00:04:56,160 --> 00:04:58,800
also the

00:04:56,960 --> 00:05:00,400
geodata stuff that we did at google so i

00:04:58,800 --> 00:05:02,080
think all of these are things that i can

00:05:00,400 --> 00:05:03,039
bring and contribute to this ecosystem

00:05:02,080 --> 00:05:04,160
so hopefully

00:05:03,039 --> 00:05:06,400
the next few years will have a much

00:05:04,160 --> 00:05:08,960
better system going forward great

00:05:06,400 --> 00:05:10,639
thanks kirish dave share a little bit

00:05:08,960 --> 00:05:12,880
about you

00:05:10,639 --> 00:05:14,800
oh yeah i think you cover a lot of it um

00:05:12,880 --> 00:05:16,000
i had 30 years of experience as an

00:05:14,800 --> 00:05:17,919
engineer and

00:05:16,000 --> 00:05:19,039
architect building enterprise

00:05:17,919 --> 00:05:21,600
distributors

00:05:19,039 --> 00:05:22,880
storage systems at splunk at teradata at

00:05:21,600 --> 00:05:26,400
ibm and

00:05:22,880 --> 00:05:28,960
apple and um so

00:05:26,400 --> 00:05:30,240
um to answer your question um i've been

00:05:28,960 --> 00:05:34,000
in the presto world since

00:05:30,240 --> 00:05:35,680
middle the middle of july but um prior

00:05:34,000 --> 00:05:37,039
prior to that i worked i worked for many

00:05:35,680 --> 00:05:39,520
years in the

00:05:37,039 --> 00:05:41,440
relational database space at ibm in the

00:05:39,520 --> 00:05:44,639
context of developing db2

00:05:41,440 --> 00:05:47,120
and other ibm products in fact i was

00:05:44,639 --> 00:05:49,039
able to influence and contribute to some

00:05:47,120 --> 00:05:50,800
of the early federated database systems

00:05:49,039 --> 00:05:51,360
work that went on at ibm there there was

00:05:50,800 --> 00:05:54,240
a

00:05:51,360 --> 00:05:56,080
product called ibm data joiner which was

00:05:54,240 --> 00:05:57,039
focused on federating the relational

00:05:56,080 --> 00:05:59,919
systems of the day

00:05:57,039 --> 00:06:01,039
and formax oracle you know the different

00:05:59,919 --> 00:06:02,080
db2s

00:06:01,039 --> 00:06:04,080
and then there was the other there was

00:06:02,080 --> 00:06:06,400
another project at ibm

00:06:04,080 --> 00:06:07,440
almaden called garlic which was one of

00:06:06,400 --> 00:06:09,120
the earliest

00:06:07,440 --> 00:06:11,120
projects that were concerned with

00:06:09,120 --> 00:06:13,120
extending the sql-based federation

00:06:11,120 --> 00:06:14,240
capabilities to non-relational sources

00:06:13,120 --> 00:06:16,479
so

00:06:14,240 --> 00:06:18,400
that that early garlic work which

00:06:16,479 --> 00:06:19,039
ultimately got integrated into db2 as

00:06:18,400 --> 00:06:21,039
well

00:06:19,039 --> 00:06:22,560
introduced the notion with what we call

00:06:21,039 --> 00:06:25,039
a wrapper which

00:06:22,560 --> 00:06:27,520
is really an early version of what we

00:06:25,039 --> 00:06:30,000
call connectors in today's presto so

00:06:27,520 --> 00:06:31,280
i'm super excited to get back to my

00:06:30,000 --> 00:06:34,960
federated roots

00:06:31,280 --> 00:06:37,520
here as cto at ohana and to work with

00:06:34,960 --> 00:06:40,000
technology leaders like biswan garish to

00:06:37,520 --> 00:06:43,039
to help further press those capabilities

00:06:40,000 --> 00:06:45,280
okay um thanks folks uh

00:06:43,039 --> 00:06:46,479
to dive right into the the meat of this

00:06:45,280 --> 00:06:49,120
session right there

00:06:46,479 --> 00:06:50,240
are a lot of areas of improvements for

00:06:49,120 --> 00:06:53,360
presto

00:06:50,240 --> 00:06:54,000
today presto is a very robust query

00:06:53,360 --> 00:06:56,880
engine

00:06:54,000 --> 00:06:58,720
uh through the day we heard that people

00:06:56,880 --> 00:07:01,360
have a lot of workarounds for

00:06:58,720 --> 00:07:02,080
how they are managing a variety of

00:07:01,360 --> 00:07:04,639
things whether

00:07:02,080 --> 00:07:06,800
it's a single coordinator or whether

00:07:04,639 --> 00:07:10,000
it's uh you know performance issues uh

00:07:06,800 --> 00:07:12,000
etc uh and so let's dive in um

00:07:10,000 --> 00:07:14,080
basically one of the areas is uh

00:07:12,000 --> 00:07:16,319
language capabilities and uh

00:07:14,080 --> 00:07:17,919
uh and maybe you can uh talk a little

00:07:16,319 --> 00:07:19,199
bit about uh how you guys are thinking

00:07:17,919 --> 00:07:22,960
about these uh

00:07:19,199 --> 00:07:25,520
this and other areas um i think on the

00:07:22,960 --> 00:07:26,319
side um one of the things that i think

00:07:25,520 --> 00:07:28,080
girish would

00:07:26,319 --> 00:07:29,840
empathize with me that one of the things

00:07:28,080 --> 00:07:31,599
that surprised me at facebook actually

00:07:29,840 --> 00:07:34,960
is how much sql is there

00:07:31,599 --> 00:07:36,000
um and um i think at google one of the

00:07:34,960 --> 00:07:37,840
things um

00:07:36,000 --> 00:07:39,599
that was different was when sql even

00:07:37,840 --> 00:07:40,479
when it was used it was used over

00:07:39,599 --> 00:07:42,639
massively

00:07:40,479 --> 00:07:44,319
complex data structures like there were

00:07:42,639 --> 00:07:46,479
nested structures and structures and

00:07:44,319 --> 00:07:49,599
maps and arrays and stuff like that

00:07:46,479 --> 00:07:51,280
and a google sequel evolved to be really

00:07:49,599 --> 00:07:51,840
really good at taking care of this kind

00:07:51,280 --> 00:07:54,240
of you know

00:07:51,840 --> 00:07:55,440
what i call the post relational model

00:07:54,240 --> 00:07:58,160
right

00:07:55,440 --> 00:07:58,800
where you're extending kind of sql and

00:07:58,160 --> 00:08:01,280
like

00:07:58,800 --> 00:08:03,599
fundamental ways of like how to deal

00:08:01,280 --> 00:08:05,680
with complex structure data

00:08:03,599 --> 00:08:07,280
um and like i i see like there's a lot

00:08:05,680 --> 00:08:08,800
of different ways like german had a way

00:08:07,280 --> 00:08:10,160
google sequel letter standardized on the

00:08:08,800 --> 00:08:11,039
way and plus two has some way i actually

00:08:10,160 --> 00:08:13,440
like the best way

00:08:11,039 --> 00:08:14,879
like the longer stuff is fairly cool um

00:08:13,440 --> 00:08:18,000
the old sequel way is very

00:08:14,879 --> 00:08:18,560
correct but also kind of hard to wrap

00:08:18,000 --> 00:08:21,360
your head

00:08:18,560 --> 00:08:22,080
i think at times at least it was for me

00:08:21,360 --> 00:08:25,440
um

00:08:22,080 --> 00:08:27,680
but it was it was very powerful too so

00:08:25,440 --> 00:08:29,199
but one of the things that i think

00:08:27,680 --> 00:08:30,960
getting good performance on these really

00:08:29,199 --> 00:08:32,240
complex structures is hard

00:08:30,960 --> 00:08:34,240
right and if you look at some of the

00:08:32,240 --> 00:08:35,039
stuff that like for example snowflake

00:08:34,240 --> 00:08:37,919
has been doing

00:08:35,039 --> 00:08:39,440
like essentially auto managing complex

00:08:37,919 --> 00:08:41,039
structured data so they allow you to

00:08:39,440 --> 00:08:42,640
ingest json and they automatically kind

00:08:41,039 --> 00:08:44,880
of polymerize and store it and yeah

00:08:42,640 --> 00:08:46,000
so there's a lot of scope there i think

00:08:44,880 --> 00:08:48,240
and i think our data is going to get

00:08:46,000 --> 00:08:49,920
more and more complex

00:08:48,240 --> 00:08:51,760
and then if you look at some of the

00:08:49,920 --> 00:08:52,399
stuff that we were doing in bigquery at

00:08:51,760 --> 00:08:55,519
google

00:08:52,399 --> 00:08:57,200
right like how do we take sql beyond sql

00:08:55,519 --> 00:08:59,120
like essentially take the query engine

00:08:57,200 --> 00:09:01,920
for example it can literally do

00:08:59,120 --> 00:09:03,360
like create model as and you know you

00:09:01,920 --> 00:09:04,640
can define and model types and a bunch

00:09:03,360 --> 00:09:05,920
of data into it and you can actually

00:09:04,640 --> 00:09:07,279
create a model then you can join with

00:09:05,920 --> 00:09:08,640
the model so you can do the entire

00:09:07,279 --> 00:09:12,000
machine learning

00:09:08,640 --> 00:09:14,720
um flow without leaving your

00:09:12,000 --> 00:09:16,399
comfort of your you know sequel ui um

00:09:14,720 --> 00:09:18,959
and i thought that was really cool

00:09:16,399 --> 00:09:20,720
right i think grace is doing it we are

00:09:18,959 --> 00:09:23,600
doing it as well like how do we

00:09:20,720 --> 00:09:24,880
go extended to graph and streaming i

00:09:23,600 --> 00:09:26,240
think those are very interesting

00:09:24,880 --> 00:09:28,000
semi-structured data so one of the

00:09:26,240 --> 00:09:31,279
things we had was like

00:09:28,000 --> 00:09:33,120
can you do ranking within sql how do you

00:09:31,279 --> 00:09:35,200
extend sql with ranking

00:09:33,120 --> 00:09:36,640
how do we extend sql with kind of uh

00:09:35,200 --> 00:09:38,800
essentially

00:09:36,640 --> 00:09:40,080
structured search so like you can

00:09:38,800 --> 00:09:42,880
obviously do contains

00:09:40,080 --> 00:09:43,519
but that kind of is very very limited

00:09:42,880 --> 00:09:45,200
right

00:09:43,519 --> 00:09:47,920
you can do a lot more clever things i

00:09:45,200 --> 00:09:51,040
think some of this stuff is quite

00:09:47,920 --> 00:09:53,600
interesting and i think if we can

00:09:51,040 --> 00:09:55,519
make the ecosystem more powerful by

00:09:53,600 --> 00:09:56,080
extending its capabilities which some

00:09:55,519 --> 00:09:58,399
things

00:09:56,080 --> 00:10:01,680
we are already thinking about doing at

00:09:58,399 --> 00:10:04,720
facebook that would be quite fascinating

00:10:01,680 --> 00:10:06,079
great um girish dave anything more

00:10:04,720 --> 00:10:08,240
to add to kind of the language

00:10:06,079 --> 00:10:10,320
capabilities the other areas that that's

00:10:08,240 --> 00:10:13,120
kind of related is format so

00:10:10,320 --> 00:10:14,720
um we could move on to that uh ganesh

00:10:13,120 --> 00:10:18,480
how are you thinking about

00:10:14,720 --> 00:10:18,880
this at uber um you know currently 4k is

00:10:18,480 --> 00:10:21,279
the

00:10:18,880 --> 00:10:21,920
kind of uh selected format for you guys

00:10:21,279 --> 00:10:24,720
pretty much

00:10:21,920 --> 00:10:25,200
within your data lake house uh data lake

00:10:24,720 --> 00:10:26,880
um

00:10:25,200 --> 00:10:28,959
maybe talk a little bit more about

00:10:26,880 --> 00:10:29,680
further optimizations either to that

00:10:28,959 --> 00:10:32,959
format

00:10:29,680 --> 00:10:36,000
uh or within the engine itself yeah

00:10:32,959 --> 00:10:37,440
um i'll dig into parque but i also

00:10:36,000 --> 00:10:38,959
wanted to add a quick note to what this

00:10:37,440 --> 00:10:41,360
was saying earlier right so

00:10:38,959 --> 00:10:42,880
in terms of like sql language extensions

00:10:41,360 --> 00:10:44,880
uh one of the areas like this one

00:10:42,880 --> 00:10:48,240
mentioned we're looking at is uh presto

00:10:44,880 --> 00:10:50,320
on streaming analytics and one big area

00:10:48,240 --> 00:10:52,240
in streaming analytics is this concept

00:10:50,320 --> 00:10:54,399
of window functions right but not

00:10:52,240 --> 00:10:55,760
standard custom window functions but

00:10:54,399 --> 00:10:57,600
streaming window functions right where

00:10:55,760 --> 00:10:59,839
you're computing

00:10:57,600 --> 00:11:01,600
aggregations in like a time slice window

00:10:59,839 --> 00:11:03,600
right either it's hopping or

00:11:01,600 --> 00:11:05,440
sliding or whatever the concept you want

00:11:03,600 --> 00:11:06,240
to use so that abstraction does not

00:11:05,440 --> 00:11:09,120
exist

00:11:06,240 --> 00:11:10,399
uh whereas it doesn't calculate which is

00:11:09,120 --> 00:11:13,200
why flink has used

00:11:10,399 --> 00:11:14,720
calcite as a native sql direct so this

00:11:13,200 --> 00:11:16,800
is something that we are also looking to

00:11:14,720 --> 00:11:18,480
see if we can extend presto to do so

00:11:16,800 --> 00:11:21,120
in terms of language definitely a lot

00:11:18,480 --> 00:11:23,839
more work and opportunities there

00:11:21,120 --> 00:11:26,399
uh now coming down to parque uh yeah i

00:11:23,839 --> 00:11:28,399
think it's kind of interesting that uber

00:11:26,399 --> 00:11:30,399
has taken on parquet and i think it's

00:11:28,399 --> 00:11:30,800
for very kind of the similar reasons

00:11:30,399 --> 00:11:32,880
that

00:11:30,800 --> 00:11:34,079
uh this far shared earlier with regards

00:11:32,880 --> 00:11:36,399
to google right

00:11:34,079 --> 00:11:37,760
so our data is deeply next tied it's

00:11:36,399 --> 00:11:40,240
highly structured

00:11:37,760 --> 00:11:41,120
uh and it's off necessity this way

00:11:40,240 --> 00:11:43,519
because we are

00:11:41,120 --> 00:11:45,279
modeling concepts like trips each

00:11:43,519 --> 00:11:46,000
deliveries and so forth so there's like

00:11:45,279 --> 00:11:47,920
distribute

00:11:46,000 --> 00:11:49,360
there's like repeated waypoints and

00:11:47,920 --> 00:11:52,240
things of that nature

00:11:49,360 --> 00:11:53,760
um so these kind of encodings uh for

00:11:52,240 --> 00:11:54,399
better or worse seem to be better in

00:11:53,760 --> 00:11:56,880
part

00:11:54,399 --> 00:11:58,000
and which is why we went to that format

00:11:56,880 --> 00:11:59,680
um and

00:11:58,000 --> 00:12:01,279
it's actually been pretty interesting

00:11:59,680 --> 00:12:03,440
that with presto

00:12:01,279 --> 00:12:05,120
like the engine was so uh nicely

00:12:03,440 --> 00:12:08,639
developed that we were able to

00:12:05,120 --> 00:12:10,320
do similar optimizations on parquet

00:12:08,639 --> 00:12:12,320
a bit for anything more to add to the

00:12:10,320 --> 00:12:13,920
storage uh formats uh

00:12:12,320 --> 00:12:15,519
uh you know another big area is

00:12:13,920 --> 00:12:18,560
performance in general and

00:12:15,519 --> 00:12:21,519
and the optimizer and um you know we can

00:12:18,560 --> 00:12:21,839
we can move on to that one go ahead um

00:12:21,519 --> 00:12:23,600
just

00:12:21,839 --> 00:12:24,880
one maybe one quick thing on the format

00:12:23,600 --> 00:12:28,320
side i don't know

00:12:24,880 --> 00:12:29,600
dave has worked on the kind of splunk

00:12:28,320 --> 00:12:30,959
and stuff where the semi-structured

00:12:29,600 --> 00:12:34,000
stuff was interesting

00:12:30,959 --> 00:12:36,160
but i think there is a lot of

00:12:34,000 --> 00:12:37,680
hidden opportunities there so one of the

00:12:36,160 --> 00:12:39,440
things for example is like

00:12:37,680 --> 00:12:40,959
the ability to do look up some columnar

00:12:39,440 --> 00:12:44,000
data has not been

00:12:40,959 --> 00:12:47,920
we actually had that at google um

00:12:44,000 --> 00:12:50,240
uh some of our formats i think the uh

00:12:47,920 --> 00:12:51,920
the whole micro versus macro layout

00:12:50,240 --> 00:12:52,320
thing has not been explored to its full

00:12:51,920 --> 00:12:54,399
depth

00:12:52,320 --> 00:12:55,760
like how do we arrange data within a

00:12:54,399 --> 00:12:57,680
file

00:12:55,760 --> 00:12:59,040
based on patterns of how that file is

00:12:57,680 --> 00:13:01,200
going to be used

00:12:59,040 --> 00:13:03,200
and also how do you arrange it across

00:13:01,200 --> 00:13:05,440
files based on patterns that

00:13:03,200 --> 00:13:06,399
like essentially adaptive layouts so if

00:13:05,440 --> 00:13:08,000
you look at

00:13:06,399 --> 00:13:10,480
like big query clustering or snowflake

00:13:08,000 --> 00:13:12,000
clustering um

00:13:10,480 --> 00:13:13,440
these are actually fail and even at

00:13:12,000 --> 00:13:15,040
google this was kind of one of the

00:13:13,440 --> 00:13:16,560
patterns that was heavily used like we

00:13:15,040 --> 00:13:18,480
had adaptive encodings and look at the

00:13:16,560 --> 00:13:20,639
data and choose the right encoding

00:13:18,480 --> 00:13:22,160
adaptive partitioning right uh bigquery

00:13:20,639 --> 00:13:23,360
has adaptive clustering software like

00:13:22,160 --> 00:13:27,120
has electric clustering

00:13:23,360 --> 00:13:29,279
i think this concept of kind of usage

00:13:27,120 --> 00:13:30,720
based adaptive layouts boot at the mic

00:13:29,279 --> 00:13:31,600
what i call the micro layout which is at

00:13:30,720 --> 00:13:33,120
the file layer

00:13:31,600 --> 00:13:34,720
and the macro layout which is at the

00:13:33,120 --> 00:13:36,880
partition or table layer

00:13:34,720 --> 00:13:38,560
and and making that those decisions

00:13:36,880 --> 00:13:40,160
intelligently so that users don't have

00:13:38,560 --> 00:13:41,519
to worry about positions i think that is

00:13:40,160 --> 00:13:43,440
a very powerful concept

00:13:41,519 --> 00:13:45,120
and that requires the full life cycle

00:13:43,440 --> 00:13:47,279
that cannot be done just by

00:13:45,120 --> 00:13:48,720
the query engine it requires very tight

00:13:47,279 --> 00:13:50,320
integration with the metadata and the

00:13:48,720 --> 00:13:51,680
storage and the query logs

00:13:50,320 --> 00:13:53,440
and the things that are producing it and

00:13:51,680 --> 00:13:54,880
the things that are consuming data so i

00:13:53,440 --> 00:13:55,839
think that workflow needs to come

00:13:54,880 --> 00:13:57,680
together

00:13:55,839 --> 00:13:58,880
as a unit to make that happen which is

00:13:57,680 --> 00:14:00,160
which is i think

00:13:58,880 --> 00:14:02,720
interesting challenge in open source

00:14:00,160 --> 00:14:06,000
world where people are essentially

00:14:02,720 --> 00:14:07,600
combining my engine with

00:14:06,000 --> 00:14:09,040
somebody else's storage with somebody

00:14:07,600 --> 00:14:10,560
else

00:14:09,040 --> 00:14:12,000
yeah yeah and this is where i think

00:14:10,560 --> 00:14:13,920
providers like snowflake and bigquery

00:14:12,000 --> 00:14:15,519
which provide a end-to-end service have

00:14:13,920 --> 00:14:17,519
a distinct advantage because they have

00:14:15,519 --> 00:14:18,720
the whole ecosystem or even teradata all

00:14:17,519 --> 00:14:20,800
those kind of commercial tools

00:14:18,720 --> 00:14:21,920
i think we need to think about how we

00:14:20,800 --> 00:14:24,000
can get there

00:14:21,920 --> 00:14:25,680
but not lose the flexibility that we

00:14:24,000 --> 00:14:27,600
have our current ecosystem

00:14:25,680 --> 00:14:28,880
to kind of richer apis richard made us

00:14:27,600 --> 00:14:30,320
through the apis richard kind of

00:14:28,880 --> 00:14:31,839
feedback apis

00:14:30,320 --> 00:14:34,079
and things like that that would be quite

00:14:31,839 --> 00:14:36,240
interesting

00:14:34,079 --> 00:14:37,680
absolutely welcome back garish sorry we

00:14:36,240 --> 00:14:38,480
i think you dropped there for a little

00:14:37,680 --> 00:14:40,560
bit um

00:14:38,480 --> 00:14:41,680
uh maybe a quick comment on formats

00:14:40,560 --> 00:14:45,120
before we move on to

00:14:41,680 --> 00:14:46,320
uh the optimizer yeah just to wrap it up

00:14:45,120 --> 00:14:49,040
yeah sorry for

00:14:46,320 --> 00:14:50,399
talking about no worries the choice of

00:14:49,040 --> 00:14:53,120
virtual events

00:14:50,399 --> 00:14:54,880
yeah exactly right yeah just to wrap up

00:14:53,120 --> 00:14:56,959
on the parking discussion so yeah

00:14:54,880 --> 00:14:58,880
we chose parque for different reasons

00:14:56,959 --> 00:15:00,480
but then given that it was there it was

00:14:58,880 --> 00:15:02,800
actually pretty cool that

00:15:00,480 --> 00:15:04,720
we could extend presto uh to not only

00:15:02,800 --> 00:15:06,880
read parque but read parque

00:15:04,720 --> 00:15:08,959
in an optimized way and get performance

00:15:06,880 --> 00:15:10,399
comparable to rc so the ability to do

00:15:08,959 --> 00:15:10,880
that for a completely different file

00:15:10,399 --> 00:15:12,160
format

00:15:10,880 --> 00:15:14,079
in an open source system is pretty

00:15:12,160 --> 00:15:15,920
awesome great great

00:15:14,079 --> 00:15:17,760
yeah um you know there's multiple layers

00:15:15,920 --> 00:15:19,760
of performance improvements whether it's

00:15:17,760 --> 00:15:21,199
uh the storage the from the format to

00:15:19,760 --> 00:15:23,279
the the storage

00:15:21,199 --> 00:15:24,880
engine with caching to the obviously the

00:15:23,279 --> 00:15:26,399
optimizer that can uh

00:15:24,880 --> 00:15:28,560
that can be extremely intelligent

00:15:26,399 --> 00:15:29,600
currently presto supports uh you know an

00:15:28,560 --> 00:15:32,160
rbo

00:15:29,600 --> 00:15:33,120
uh cbo if you have stacks in your uh in

00:15:32,160 --> 00:15:35,279
your data lake

00:15:33,120 --> 00:15:37,040
uh but there's uh there's still room to

00:15:35,279 --> 00:15:37,920
kind of grow there so dave maybe you

00:15:37,040 --> 00:15:39,839
wanna uh

00:15:37,920 --> 00:15:41,120
share a little bit about uh you know

00:15:39,839 --> 00:15:43,440
your view uh

00:15:41,120 --> 00:15:44,480
on this as you've worked you know with

00:15:43,440 --> 00:15:47,600
your experience

00:15:44,480 --> 00:15:49,519
uh in optimizers in general

00:15:47,600 --> 00:15:51,040
yeah i mean i mean presto really is

00:15:49,519 --> 00:15:53,839
state of the art in terms of

00:15:51,040 --> 00:15:55,519
providing uh large-scale sql-based

00:15:53,839 --> 00:15:57,040
access to a variety of data sources and

00:15:55,519 --> 00:15:58,480
data types

00:15:57,040 --> 00:16:00,240
but um yeah i think there's room for

00:15:58,480 --> 00:16:01,839
improvement with regards to optimization

00:16:00,240 --> 00:16:04,160
and execution

00:16:01,839 --> 00:16:06,160
um there's you know i tend to look at it

00:16:04,160 --> 00:16:08,000
from there there's a multiple decades of

00:16:06,160 --> 00:16:11,279
prior art that we can still leverage

00:16:08,000 --> 00:16:12,240
just from my early examination of of the

00:16:11,279 --> 00:16:14,800
code

00:16:12,240 --> 00:16:16,639
and also there's some really new and

00:16:14,800 --> 00:16:18,000
exciting work going on in academia that

00:16:16,639 --> 00:16:20,560
we might look at applying so

00:16:18,000 --> 00:16:21,440
you know just off the top of my head is

00:16:20,560 --> 00:16:23,519
an example

00:16:21,440 --> 00:16:25,680
like prior art there's a bunch of query

00:16:23,519 --> 00:16:27,920
transformations that leverage keys

00:16:25,680 --> 00:16:29,360
referential constraints you know

00:16:27,920 --> 00:16:30,399
functional dependencies and things like

00:16:29,360 --> 00:16:32,480
that that can

00:16:30,399 --> 00:16:33,920
they're sort of like table stakes stuff

00:16:32,480 --> 00:16:36,320
stuff for um

00:16:33,920 --> 00:16:38,399
relational database systems and they can

00:16:36,320 --> 00:16:39,839
allow you to do rewrites

00:16:38,399 --> 00:16:41,600
different types of query transformations

00:16:39,839 --> 00:16:44,079
that get orders of magnitude

00:16:41,600 --> 00:16:44,720
better performance uh we can also

00:16:44,079 --> 00:16:46,560
exploit

00:16:44,720 --> 00:16:48,560
modern hardware to you know for

00:16:46,560 --> 00:16:50,240
vectorized execution more will

00:16:48,560 --> 00:16:52,000
be more robust than memory limits and

00:16:50,240 --> 00:16:53,759
single points of failure so

00:16:52,000 --> 00:16:55,600
all this is ongoing work that was

00:16:53,759 --> 00:16:56,880
highlighted in ezzy's keynote in other

00:16:55,600 --> 00:16:59,759
talks today

00:16:56,880 --> 00:17:01,279
but um i think you know from uh my

00:16:59,759 --> 00:17:05,600
deepest roots are in

00:17:01,279 --> 00:17:07,280
the optimizer space and so yeah sure we

00:17:05,600 --> 00:17:08,959
so that's what makes that's what makes

00:17:07,280 --> 00:17:10,799
the database declarative right is really

00:17:08,959 --> 00:17:11,199
the cost based optimization otherwise

00:17:10,799 --> 00:17:13,039
you

00:17:11,199 --> 00:17:14,880
sort of have to resort to hand

00:17:13,039 --> 00:17:17,520
optimizing queries

00:17:14,880 --> 00:17:18,079
but the problem here is that traditional

00:17:17,520 --> 00:17:20,959
cosplay

00:17:18,079 --> 00:17:22,880
optimizers use intricate cost models to

00:17:20,959 --> 00:17:23,919
determine the optimal core execution

00:17:22,880 --> 00:17:26,240
plan

00:17:23,919 --> 00:17:28,400
uh from from from a large airspace of

00:17:26,240 --> 00:17:30,799
alternatives so building a cost model is

00:17:28,400 --> 00:17:32,320
sort of a black art it's very fragile it

00:17:30,799 --> 00:17:34,240
relies on

00:17:32,320 --> 00:17:35,840
data distribution statistics for the

00:17:34,240 --> 00:17:38,559
underlying data and that's

00:17:35,840 --> 00:17:39,760
particularly hard to come by in this

00:17:38,559 --> 00:17:41,440
federated environment

00:17:39,760 --> 00:17:43,679
as you know as the data exists in

00:17:41,440 --> 00:17:45,120
various sources and data formats

00:17:43,679 --> 00:17:47,600
and it's all disaggregated from the

00:17:45,120 --> 00:17:49,200
query engine so this is where

00:17:47,600 --> 00:17:51,039
potentially we could look at some of the

00:17:49,200 --> 00:17:53,200
interesting work that's being done

00:17:51,039 --> 00:17:54,480
in academia where they're exploring the

00:17:53,200 --> 00:17:56,400
use of

00:17:54,480 --> 00:17:58,480
deep learning techniques to solve the

00:17:56,400 --> 00:18:02,080
cost based optimization problem

00:17:58,480 --> 00:18:03,840
so there's some work going on now is

00:18:02,080 --> 00:18:06,720
uses deep reinforcement learning to

00:18:03,840 --> 00:18:07,840
essentially generate an optimizer based

00:18:06,720 --> 00:18:10,400
on observation of

00:18:07,840 --> 00:18:12,320
past executions so to me this seems like

00:18:10,400 --> 00:18:14,559
a super promising approach

00:18:12,320 --> 00:18:16,320
then you know doing it the old-fashioned

00:18:14,559 --> 00:18:18,640
way of hand building these intricate

00:18:16,320 --> 00:18:20,480
statistical and cost models

00:18:18,640 --> 00:18:22,000
so um you know at a hana we're sort of

00:18:20,480 --> 00:18:24,880
positioned to be able to observe

00:18:22,000 --> 00:18:26,720
execution of many queries over our cloud

00:18:24,880 --> 00:18:28,799
environment and to spin up some compute

00:18:26,720 --> 00:18:31,200
to train these models so

00:18:28,799 --> 00:18:32,160
um this is a super interesting area that

00:18:31,200 --> 00:18:35,440
i'm i think

00:18:32,160 --> 00:18:37,039
is worth exploring and then there's

00:18:35,440 --> 00:18:39,039
other areas of the database that can

00:18:37,039 --> 00:18:41,120
potentially exploit these types of ai

00:18:39,039 --> 00:18:43,840
techniques

00:18:41,120 --> 00:18:44,320
great um uh bishwa anything more to add

00:18:43,840 --> 00:18:47,440
to that

00:18:44,320 --> 00:18:50,880
um other areas of advancements that uh

00:18:47,440 --> 00:18:53,280
you are uh working on at facebook

00:18:50,880 --> 00:18:55,440
well i think um i think the machine

00:18:53,280 --> 00:18:59,120
learning angle is definitely interesting

00:18:55,440 --> 00:19:01,520
um one one place where i saw like

00:18:59,120 --> 00:19:02,160
uh dramaal being particularly successful

00:19:01,520 --> 00:19:04,720
and then

00:19:02,160 --> 00:19:06,480
later priscilla and i think which just

00:19:04,720 --> 00:19:10,320
currently we don't have

00:19:06,480 --> 00:19:10,320
the ability to change the query

00:19:10,640 --> 00:19:15,919
because often i think you tend to get

00:19:13,600 --> 00:19:18,000
the initial plan wrong

00:19:15,919 --> 00:19:19,840
in terms of you know the parallelism of

00:19:18,000 --> 00:19:21,280
the joint or the type of joint or the

00:19:19,840 --> 00:19:23,120
order of the joint

00:19:21,280 --> 00:19:24,880
or kind of how many ways the aggregation

00:19:23,120 --> 00:19:27,200
should happen distributed query

00:19:24,880 --> 00:19:28,799
execution adds this whole distributed

00:19:27,200 --> 00:19:30,640
part of it right which is actually adds

00:19:28,799 --> 00:19:32,000
a new dimension and makes things much

00:19:30,640 --> 00:19:33,520
more complicated

00:19:32,000 --> 00:19:35,360
so one of the things i've seen people do

00:19:33,520 --> 00:19:36,559
and i think pretty much today everybody

00:19:35,360 --> 00:19:38,160
does it like whether it's oracle

00:19:36,559 --> 00:19:39,600
snowflake or bigquery is that

00:19:38,160 --> 00:19:41,760
essentially what we call adaptive

00:19:39,600 --> 00:19:42,799
optimization right so so you actually

00:19:41,760 --> 00:19:44,640
execute

00:19:42,799 --> 00:19:46,160
a little bit and then you figure out oh

00:19:44,640 --> 00:19:48,000
this should be a broadcaster

00:19:46,160 --> 00:19:49,200
well oh looks like based on what i've

00:19:48,000 --> 00:19:51,280
executed this is going to have a

00:19:49,200 --> 00:19:52,000
cardinality of 100. so i need only one

00:19:51,280 --> 00:19:54,559
way

00:19:52,000 --> 00:19:55,840
aggregation not 500 ways and today the

00:19:54,559 --> 00:19:57,679
plus architecture makes this very

00:19:55,840 --> 00:19:59,919
challenging because we tend to kind of

00:19:57,679 --> 00:20:00,799
schedule the whole query at once right

00:19:59,919 --> 00:20:03,200
so you have to

00:20:00,799 --> 00:20:04,320
and this this kind of adaptive execution

00:20:03,200 --> 00:20:05,919
requires

00:20:04,320 --> 00:20:07,600
you to have a disaggregated shuffle

00:20:05,919 --> 00:20:09,760
there

00:20:07,600 --> 00:20:11,120
but you cannot because if you say hey

00:20:09,760 --> 00:20:12,480
i'm going to create all these endpoints

00:20:11,120 --> 00:20:13,919
i'm going to draw the dag

00:20:12,480 --> 00:20:15,919
and i'm going to just connect these rpc

00:20:13,919 --> 00:20:18,480
and points together and say go

00:20:15,919 --> 00:20:19,120
right now then in midpoint he says

00:20:18,480 --> 00:20:20,799
i'm doing

00:20:19,120 --> 00:20:22,159
you know moving in the wrong direction

00:20:20,799 --> 00:20:23,520
just like all the endpoints have been

00:20:22,159 --> 00:20:24,480
set up and all the flows have been set

00:20:23,520 --> 00:20:27,919
up like you have to

00:20:24,480 --> 00:20:30,159
essentially um undo

00:20:27,919 --> 00:20:31,280
right so so you have to figure out i

00:20:30,159 --> 00:20:33,919
think

00:20:31,280 --> 00:20:36,320
how to not undo and otherwise it will be

00:20:33,919 --> 00:20:38,960
very difficult for us to

00:20:36,320 --> 00:20:40,400
be competitive with with engines that

00:20:38,960 --> 00:20:43,919
actually do that

00:20:40,400 --> 00:20:47,280
right yeah yeah absolutely um

00:20:43,919 --> 00:20:50,960
so in terms of the you know the future

00:20:47,280 --> 00:20:52,720
the ultimate future of presto uh there's

00:20:50,960 --> 00:20:54,720
you know there's a lot of use cases that

00:20:52,720 --> 00:20:56,480
pesto supports today adopt wedding was

00:20:54,720 --> 00:20:57,200
the one that everyone started off with

00:20:56,480 --> 00:21:00,080
first

00:20:57,200 --> 00:21:01,840
um there's a few others that are i would

00:21:00,080 --> 00:21:04,960
say early stay early phases

00:21:01,840 --> 00:21:06,640
with streaming or etl um let's talk a

00:21:04,960 --> 00:21:07,120
little bit about you know the vision of

00:21:06,640 --> 00:21:09,360
what

00:21:07,120 --> 00:21:11,280
what the different types of use cases

00:21:09,360 --> 00:21:12,240
that will be supported on presto or uh

00:21:11,280 --> 00:21:15,360
girish you wanna

00:21:12,240 --> 00:21:17,440
you wanna start off yeah so

00:21:15,360 --> 00:21:18,799
this actually uh brings together a

00:21:17,440 --> 00:21:19,679
couple of concepts that you really like

00:21:18,799 --> 00:21:22,720
about crystal

00:21:19,679 --> 00:21:23,919
so that is connectors and the open

00:21:22,720 --> 00:21:27,360
source nature right

00:21:23,919 --> 00:21:27,919
so uh we've actually set up presto on

00:21:27,360 --> 00:21:30,559
pino

00:21:27,919 --> 00:21:31,919
at uber and it runs on i mean if you

00:21:30,559 --> 00:21:33,760
just count the number of queries right

00:21:31,919 --> 00:21:34,159
it runs on a much much bigger scale than

00:21:33,760 --> 00:21:35,679
our

00:21:34,159 --> 00:21:37,520
interactive crystal clusters like we do

00:21:35,679 --> 00:21:39,919
thousand qps right

00:21:37,520 --> 00:21:41,600
so it's a massive massive load like this

00:21:39,919 --> 00:21:45,039
is external facing uh

00:21:41,600 --> 00:21:46,960
traffic so what we were able to do

00:21:45,039 --> 00:21:48,480
is uh we were able to build a pinot

00:21:46,960 --> 00:21:50,480
connector that could just

00:21:48,480 --> 00:21:52,320
run crosstalk sequel queries directly on

00:21:50,480 --> 00:21:54,240
keynote with pushdowns

00:21:52,320 --> 00:21:56,080
but one interesting innovation really

00:21:54,240 --> 00:21:57,600
helped us here which facebook did over

00:21:56,080 --> 00:22:00,880
the last year year and a half

00:21:57,600 --> 00:22:03,919
which is they uh made the spi such that

00:22:00,880 --> 00:22:05,039
we could actually uh update the plan

00:22:03,919 --> 00:22:07,039
within the connector because the

00:22:05,039 --> 00:22:07,840
connector understands what it needs to

00:22:07,039 --> 00:22:09,600
push down

00:22:07,840 --> 00:22:11,280
and if you try to make this decision in

00:22:09,600 --> 00:22:12,480
the central planner it's much much

00:22:11,280 --> 00:22:12,960
harder right because you have to do a

00:22:12,480 --> 00:22:14,799
general

00:22:12,960 --> 00:22:16,799
uh problem solving so that really

00:22:14,799 --> 00:22:17,919
allowed us to optimize our query plan so

00:22:16,799 --> 00:22:19,760
for instance we have single node

00:22:17,919 --> 00:22:20,400
execution because it's synchronous rpcs

00:22:19,760 --> 00:22:22,240
and things

00:22:20,400 --> 00:22:23,760
like that the other thing which was

00:22:22,240 --> 00:22:26,559
interesting is we were able to

00:22:23,760 --> 00:22:28,799
change the execution path within crystal

00:22:26,559 --> 00:22:30,720
to avoid this asynchronous path

00:22:28,799 --> 00:22:32,559
and replace it with the synchronous path

00:22:30,720 --> 00:22:33,600
right and it was easy to do because it

00:22:32,559 --> 00:22:35,679
was an open source

00:22:33,600 --> 00:22:37,840
uh technology so because of these two

00:22:35,679 --> 00:22:38,559
things we were able to put presto on top

00:22:37,840 --> 00:22:41,039
of pino and

00:22:38,559 --> 00:22:42,640
handle thousands of qps uh as real-time

00:22:41,039 --> 00:22:44,720
traffic which is something that

00:22:42,640 --> 00:22:46,320
i think surprises people when they hear

00:22:44,720 --> 00:22:49,120
it for the first time so

00:22:46,320 --> 00:22:51,120
and and we are doing it with like p95

00:22:49,120 --> 00:22:55,039
latency or less than 200 milliseconds so

00:22:51,120 --> 00:22:55,039
that's another number so

00:22:55,520 --> 00:22:59,760
yeah yeah absolutely uh dave uh anything

00:22:58,480 --> 00:23:01,440
more to add to that is there's

00:22:59,760 --> 00:23:03,039
there are evolving use cases

00:23:01,440 --> 00:23:07,440
particularly on the

00:23:03,039 --> 00:23:09,440
uh the data lake side of of things

00:23:07,440 --> 00:23:11,039
yeah i think we've i mean folks have

00:23:09,440 --> 00:23:14,480
been talking around it

00:23:11,039 --> 00:23:16,880
all day pretty much today it's you know

00:23:14,480 --> 00:23:19,120
presto is a very powerful compute engine

00:23:16,880 --> 00:23:22,480
that makes it really easy to do

00:23:19,120 --> 00:23:24,640
uh analytics on data lakes and um

00:23:22,480 --> 00:23:26,240
but yeah i think it's more interesting

00:23:24,640 --> 00:23:27,520
to look at

00:23:26,240 --> 00:23:30,720
whether it can meet some of the

00:23:27,520 --> 00:23:33,600
requirements of more advanced workloads

00:23:30,720 --> 00:23:35,840
we you know for example we saw the

00:23:33,600 --> 00:23:37,280
snowflake ipo was pretty amazing last

00:23:35,840 --> 00:23:38,720
week right so

00:23:37,280 --> 00:23:40,960
and of course they're focused on

00:23:38,720 --> 00:23:42,720
traditional enterprise data warehousing

00:23:40,960 --> 00:23:45,760
which involves running

00:23:42,720 --> 00:23:47,760
complex sql at scale over star schemas

00:23:45,760 --> 00:23:50,080
of fact and dimensional data

00:23:47,760 --> 00:23:52,000
and so obviously one of the disadvantage

00:23:50,080 --> 00:23:53,279
of using a system like snowflake is that

00:23:52,000 --> 00:23:54,480
you have to lock your data into their

00:23:53,279 --> 00:23:56,400
system

00:23:54,480 --> 00:23:58,080
into their proprietary formats to get

00:23:56,400 --> 00:23:59,520
the scale performance transactional

00:23:58,080 --> 00:24:02,880
semantics and all the

00:23:59,520 --> 00:24:04,000
advantages and unfortunately you your

00:24:02,880 --> 00:24:05,679
other analytical tools

00:24:04,000 --> 00:24:07,360
cannot be brought to bear on this data

00:24:05,679 --> 00:24:08,960
once you lock it in so what if you could

00:24:07,360 --> 00:24:10,320
get the scale the performance and the

00:24:08,960 --> 00:24:12,320
other advantage of

00:24:10,320 --> 00:24:13,679
the of these edw systems without the

00:24:12,320 --> 00:24:15,760
lock and i think

00:24:13,679 --> 00:24:17,600
that's a super interesting question for

00:24:15,760 --> 00:24:18,080
me that it's something i'm super

00:24:17,600 --> 00:24:19,840
interested

00:24:18,080 --> 00:24:21,200
in there's a lot of interesting work

00:24:19,840 --> 00:24:23,279
going on

00:24:21,200 --> 00:24:24,320
you know around the the notion of a lake

00:24:23,279 --> 00:24:26,640
house which

00:24:24,320 --> 00:24:28,240
which allows uh provides transactional

00:24:26,640 --> 00:24:30,480
storage capabilities to

00:24:28,240 --> 00:24:31,440
date and open open formats and data

00:24:30,480 --> 00:24:33,360
lakes

00:24:31,440 --> 00:24:35,039
and so what if we were able to you know

00:24:33,360 --> 00:24:36,960
sort of couple the lake house with

00:24:35,039 --> 00:24:39,679
sophisticated caching strategies and

00:24:36,960 --> 00:24:41,840
really focus presto optimizations

00:24:39,679 --> 00:24:44,960
and how how close can we close the gap

00:24:41,840 --> 00:24:46,799
with these proprietary edw systems

00:24:44,960 --> 00:24:48,559
and you know really give customers a

00:24:46,799 --> 00:24:50,400
pause when they consider

00:24:48,559 --> 00:24:52,480
you know proprietary lock-ins for these

00:24:50,400 --> 00:24:54,240
types of applications so this

00:24:52,480 --> 00:24:56,400
area i'm super interested in exploring

00:24:54,240 --> 00:24:59,679
it's a super it's a huge market

00:24:56,400 --> 00:25:00,000
and uh it's it's to me it seems like

00:24:59,679 --> 00:25:01,840
something

00:25:00,000 --> 00:25:05,520
that they can come together in this in

00:25:01,840 --> 00:25:05,520
this particular presto environment

00:25:06,080 --> 00:25:10,000
thanks dave um bishop any other

00:25:08,640 --> 00:25:12,480
workloads that you are

00:25:10,000 --> 00:25:14,320
looking at supporting in the future five

00:25:12,480 --> 00:25:17,600
three four five years from now

00:25:14,320 --> 00:25:20,720
at one presto i think um

00:25:17,600 --> 00:25:21,360
we definitely won't kind of uh extend to

00:25:20,720 --> 00:25:23,200
various work

00:25:21,360 --> 00:25:24,960
i think one i think the girish mentioned

00:25:23,200 --> 00:25:26,799
this look up style workloads right which

00:25:24,960 --> 00:25:28,400
is like extremely high qps

00:25:26,799 --> 00:25:30,240
thousands or even tens of thousands of

00:25:28,400 --> 00:25:31,840
qps over relatively

00:25:30,240 --> 00:25:33,200
narrow queries like the data set might

00:25:31,840 --> 00:25:34,559
be large but you're querying data for

00:25:33,200 --> 00:25:37,200
only one advertiser

00:25:34,559 --> 00:25:38,640
this is something that we had um at

00:25:37,200 --> 00:25:40,559
google true with priscilla and this is

00:25:38,640 --> 00:25:41,840
actually a very common workload

00:25:40,559 --> 00:25:43,279
for anybody who wants to do i think

00:25:41,840 --> 00:25:44,559
linkedin presented you know i don't know

00:25:43,279 --> 00:25:46,159
if the show is there but

00:25:44,559 --> 00:25:47,600
uh this is something that we an area

00:25:46,159 --> 00:25:50,159
that we definitely want to go

00:25:47,600 --> 00:25:52,000
and uh just to add on to i think dave's

00:25:50,159 --> 00:25:53,440
point another area that we really feel

00:25:52,000 --> 00:25:54,000
should be going is that how do we build

00:25:53,440 --> 00:25:57,279
the

00:25:54,000 --> 00:25:59,520
um let's put this way um open snowflake

00:25:57,279 --> 00:26:01,039
right so like how do we get all the

00:25:59,520 --> 00:26:02,640
advantages of this

00:26:01,039 --> 00:26:04,480
ecosystem that is really rich and

00:26:02,640 --> 00:26:06,080
tightly integrated and is able to do all

00:26:04,480 --> 00:26:06,799
these adaptive decisions and kind of

00:26:06,080 --> 00:26:09,679
richer

00:26:06,799 --> 00:26:11,120
data and clustering and highly optimized

00:26:09,679 --> 00:26:15,279
you know caching and all this stuff

00:26:11,120 --> 00:26:16,559
but not doesn't let the customer get a

00:26:15,279 --> 00:26:18,480
full lock-in into one

00:26:16,559 --> 00:26:19,520
company or one proprietary technology

00:26:18,480 --> 00:26:20,880
and things like that that is i'm

00:26:19,520 --> 00:26:21,600
particularly i'm very passionate about

00:26:20,880 --> 00:26:23,679
that area

00:26:21,600 --> 00:26:25,200
i think i think we should totally do it

00:26:23,679 --> 00:26:26,559
um the

00:26:25,200 --> 00:26:27,840
batch use case is also interesting i

00:26:26,559 --> 00:26:29,520
think virish mentioned crosstal and

00:26:27,840 --> 00:26:30,480
spark for example that's an experiment

00:26:29,520 --> 00:26:32,480
that we are doing

00:26:30,480 --> 00:26:34,320
as well i don't know we if you're

00:26:32,480 --> 00:26:37,120
talking about the same project probably

00:26:34,320 --> 00:26:38,240
uh yeah i think we're doing a poc of

00:26:37,120 --> 00:26:40,559
croissants part two

00:26:38,240 --> 00:26:41,679
yeah um i think that's an area i'm quite

00:26:40,559 --> 00:26:43,200
interested in because like

00:26:41,679 --> 00:26:44,799
this is the advantage of open source hey

00:26:43,200 --> 00:26:45,679
they are both open projects why don't we

00:26:44,799 --> 00:26:48,640
collaborate and

00:26:45,679 --> 00:26:51,120
you know use each of those strengths

00:26:48,640 --> 00:26:52,640
instead of trying to reinvent

00:26:51,120 --> 00:26:53,919
the the to say oh spark can do large

00:26:52,640 --> 00:26:55,440
queries let me do all the things that

00:26:53,919 --> 00:26:57,760
spock does to make large query maybe we

00:26:55,440 --> 00:26:59,919
should just use spa

00:26:57,760 --> 00:27:01,279
because you know it's open source too so

00:26:59,919 --> 00:27:02,720
i think those are some of the areas that

00:27:01,279 --> 00:27:05,760
i'm quite

00:27:02,720 --> 00:27:08,000
excited about in this space that's great

00:27:05,760 --> 00:27:09,919
i mean it's a good segue into our last

00:27:08,000 --> 00:27:11,200
question maybe do a quick quick quick

00:27:09,919 --> 00:27:13,279
round on this one

00:27:11,200 --> 00:27:14,320
um the vision is amazing everything

00:27:13,279 --> 00:27:16,480
you're talking about

00:27:14,320 --> 00:27:19,039
i think people will be now asking when

00:27:16,480 --> 00:27:21,919
is this going to be available again

00:27:19,039 --> 00:27:24,399
all this great stuff uh that we we dr

00:27:21,919 --> 00:27:27,200
we'd like an open flake right

00:27:24,399 --> 00:27:28,880
to use um uh but how do you want the

00:27:27,200 --> 00:27:29,600
community to be involved what role do

00:27:28,880 --> 00:27:32,000
they play

00:27:29,600 --> 00:27:33,200
uh you know uh maybe talk a little bit

00:27:32,000 --> 00:27:34,960
about that and uh

00:27:33,200 --> 00:27:36,640
bishop maybe start with you and we'll go

00:27:34,960 --> 00:27:38,880
around

00:27:36,640 --> 00:27:40,399
well i think we we are built around the

00:27:38,880 --> 00:27:42,399
community everything we do

00:27:40,399 --> 00:27:43,440
well almost everything we do is in the

00:27:42,399 --> 00:27:46,720
open source

00:27:43,440 --> 00:27:47,840
right and um in my talk later i'll talk

00:27:46,720 --> 00:27:48,480
about some of the stuff that we are

00:27:47,840 --> 00:27:50,320
doing we'll

00:27:48,480 --> 00:27:51,520
hopefully we'll release those two soon

00:27:50,320 --> 00:27:53,440
as well and

00:27:51,520 --> 00:27:55,120
uh i think the way community we need to

00:27:53,440 --> 00:27:56,640
help each other is essentially by

00:27:55,120 --> 00:27:58,799
providing this

00:27:56,640 --> 00:28:00,000
this kind of updates you know real-time

00:27:58,799 --> 00:28:00,720
updates and hey we are doing this you're

00:28:00,000 --> 00:28:02,000
doing this and

00:28:00,720 --> 00:28:03,679
you know like when virish i talk every

00:28:02,000 --> 00:28:04,399
time he and i talk he come up with

00:28:03,679 --> 00:28:06,000
something

00:28:04,399 --> 00:28:07,840
you know and then the day when i talked

00:28:06,000 --> 00:28:09,120
the other day right with the honor folks

00:28:07,840 --> 00:28:09,600
and we came up with some ideas oh yeah

00:28:09,120 --> 00:28:11,440
we should

00:28:09,600 --> 00:28:12,640
we should totally be doing this together

00:28:11,440 --> 00:28:14,640
so i think this is very important to

00:28:12,640 --> 00:28:15,600
keep this real-time open communication

00:28:14,640 --> 00:28:17,120
channels

00:28:15,600 --> 00:28:18,880
and this is my kind of request to

00:28:17,120 --> 00:28:22,080
everybody here i guess not just this

00:28:18,880 --> 00:28:23,600
group that you know whenever you're

00:28:22,080 --> 00:28:25,600
thinking of a cool idea that you want to

00:28:23,600 --> 00:28:27,440
do or in the process of doing it

00:28:25,600 --> 00:28:29,039
so reach out to the community early

00:28:27,440 --> 00:28:30,159
reach out often and

00:28:29,039 --> 00:28:31,440
more often than not you might be

00:28:30,159 --> 00:28:32,960
surprised that hey somebody is already

00:28:31,440 --> 00:28:34,320
thinking about it and the collaboration

00:28:32,960 --> 00:28:36,480
opportunities are there and we can both

00:28:34,320 --> 00:28:38,000
move at twice the speed

00:28:36,480 --> 00:28:40,880
yeah i think it goes a long way just to

00:28:38,000 --> 00:28:42,640
open an issue get people's eyes on it

00:28:40,880 --> 00:28:44,240
we don't end up create recreating the

00:28:42,640 --> 00:28:46,240
wheel on the same problem

00:28:44,240 --> 00:28:48,159
we heard about uh three different presto

00:28:46,240 --> 00:28:51,360
routers today

00:28:48,159 --> 00:28:53,039
which uh which can that's a good example

00:28:51,360 --> 00:28:54,640
exactly like we talked about two

00:28:53,039 --> 00:28:55,679
different ones high availability

00:28:54,640 --> 00:28:57,279
strategies and kind of

00:28:55,679 --> 00:28:58,880
coordinated disaggregation strategies

00:28:57,279 --> 00:29:01,120
and how to strategize and get listed

00:28:58,880 --> 00:29:02,559
right these are very common problems

00:29:01,120 --> 00:29:05,520
everybody is facing those problems

00:29:02,559 --> 00:29:06,240
let's see if we can get a solution that

00:29:05,520 --> 00:29:10,159
is

00:29:06,240 --> 00:29:12,399
x times as good as x solution separately

00:29:10,159 --> 00:29:14,320
yeah dave girish anything more to add to

00:29:12,399 --> 00:29:17,520
that

00:29:14,320 --> 00:29:19,919
yeah i want to emphasize also that

00:29:17,520 --> 00:29:20,960
the presto linux foundation uh it's an

00:29:19,919 --> 00:29:23,440
open foundation

00:29:20,960 --> 00:29:25,360
uh and it's not just for presto but it's

00:29:23,440 --> 00:29:27,840
for the presto ecosystem

00:29:25,360 --> 00:29:29,440
we already have a couple of ideas and

00:29:27,840 --> 00:29:31,120
projects and contributions that we're

00:29:29,440 --> 00:29:33,919
incubating which is kind of part of the

00:29:31,120 --> 00:29:36,320
ecosystem but outside core presto

00:29:33,919 --> 00:29:37,120
so we definitely want to have more of

00:29:36,320 --> 00:29:39,440
these

00:29:37,120 --> 00:29:41,279
so maybe a good start would be this

00:29:39,440 --> 00:29:43,200
common routing layer could be another

00:29:41,279 --> 00:29:44,320
project that people could just start in

00:29:43,200 --> 00:29:47,039
the foundation

00:29:44,320 --> 00:29:48,399
uh so it's really an umbrella for the

00:29:47,039 --> 00:29:50,480
ecosystem right and so

00:29:48,399 --> 00:29:52,240
i think one good way people can start

00:29:50,480 --> 00:29:54,080
pitching in is kind of

00:29:52,240 --> 00:29:56,399
contributing projects not just to

00:29:54,080 --> 00:29:58,960
forecaster but also in the ecosystem

00:29:56,399 --> 00:30:01,360
absolutely well uh with that we're a

00:29:58,960 --> 00:30:02,080
little over time folks uh but thank you

00:30:01,360 --> 00:30:05,520
so much

00:30:02,080 --> 00:30:06,399
uh very uh very enlightening uh ideas on

00:30:05,520 --> 00:30:09,679
where presto is

00:30:06,399 --> 00:30:12,399
headed it's a great shared vision and

00:30:09,679 --> 00:30:14,480
one that's open with an open stack for

00:30:12,399 --> 00:30:16,080
open analytics

00:30:14,480 --> 00:30:18,240
thanks so much everyone thanks for

00:30:16,080 --> 00:30:18,240

YouTube URL: https://www.youtube.com/watch?v=d7-6iZHbkLc


