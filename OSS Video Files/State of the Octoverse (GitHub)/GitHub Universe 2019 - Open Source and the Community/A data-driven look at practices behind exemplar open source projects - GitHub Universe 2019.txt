Title: A data-driven look at practices behind exemplar open source projects - GitHub Universe 2019
Publication date: 2019-12-13
Playlist: GitHub Universe 2019 - Open Source and the Community
Description: 
	Presented by:
Stephen Magill, CEO at Muse Dev
Gene Kim, Author, Researcher & Founder at IT Revolution

In this session, you'll hear about the year-long collaboration between Gene Kim (researcher and co-author of “The Phoenix Project,” “DevOps Handbook,” “Accelerate”), Dr. Stephen Magill, (expert in software security and program analysis), and Sonatype (maintainers of the Maven Central Repository). They examined 10,000 open source Java components that were published to Maven Central and hosted on GitHub. They combined team and project performance metrics from GitHub, popularity data from Maven Central, and vulnerability and dependency data from Sonatype to examine what properties are shared by exemplary open source teams. They discuss these findings, including the differences we see between exemplary small teams and large teams, the fact that popularity does not predict security, and how remarkably difficult it is to keep dependencies patched while being “almost” up-to-date. They also highlight the organizational and technology practices they observe among exemplar open source teams, which release new versions 2x more frequently and remediate security vulnerabilities 3x more quickly, all while delivering a level of value that makes them standouts in terms of popularity and adoption.

About GitHub Universe:
GitHub Universe is a two-day conference dedicated to the creativity and curiosity of the largest software community in the world. Sessions cover topics from team culture to open source software across industries and technologies.

For more information on GitHub Universe, check the website:
https://githubuniverse.com
Captions: 
	00:00:00,620 --> 00:00:14,210
[Music]

00:00:17,900 --> 00:00:26,280
afternoon thank you all right so my name

00:00:24,630 --> 00:00:28,290
is Stephen McGill I've been doing

00:00:26,280 --> 00:00:30,120
academic research and software analysis

00:00:28,290 --> 00:00:32,910
security and programming languages for

00:00:30,120 --> 00:00:35,190
more than 15 years first as part of my

00:00:32,910 --> 00:00:37,050
PhD work at Carnegie Mellon and then at

00:00:35,190 --> 00:00:39,809
other universities and Industry research

00:00:37,050 --> 00:00:41,640
labs over the last few years I've been

00:00:39,809 --> 00:00:45,059
getting more and more interested in the

00:00:41,640 --> 00:00:47,010
practice of software so how open source

00:00:45,059 --> 00:00:48,600
development practices how those work how

00:00:47,010 --> 00:00:50,460
enterprises approach software

00:00:48,600 --> 00:00:52,500
development and really how to best

00:00:50,460 --> 00:00:54,900
contribute to these communities by

00:00:52,500 --> 00:00:56,850
improving tools and practices Thank You

00:00:54,900 --> 00:00:58,290
dr. McGill my name is gene Kim I've been

00:00:56,850 --> 00:01:00,780
studying high-performing technology

00:00:58,290 --> 00:01:02,100
organizations since 1999 that was a

00:01:00,780 --> 00:01:03,659
journey that started back when I was the

00:01:02,100 --> 00:01:05,220
technical founder and CTO but a company

00:01:03,659 --> 00:01:07,230
called tripwire in the information

00:01:05,220 --> 00:01:08,790
security space one of the most fun

00:01:07,230 --> 00:01:10,440
things I've gotta had the opportunity to

00:01:08,790 --> 00:01:11,850
work on is the state of DevOps report

00:01:10,440 --> 00:01:14,010
and that was with dr. Nicole fors grin

00:01:11,850 --> 00:01:17,040
and just humble which resulted in the

00:01:14,010 --> 00:01:19,050
accelerate book and so I think that was

00:01:17,040 --> 00:01:20,909
so fun because a largest cross

00:01:19,050 --> 00:01:22,560
population study where we really got to

00:01:20,909 --> 00:01:24,000
study 30,000 respondents and understand

00:01:22,560 --> 00:01:25,530
what are the best way to measure

00:01:24,000 --> 00:01:26,700
technology performance and what are the

00:01:25,530 --> 00:01:28,890
specific behaviors that lead to high

00:01:26,700 --> 00:01:30,540
performance my areas passion these days

00:01:28,890 --> 00:01:31,829
is really studying how large complex

00:01:30,540 --> 00:01:35,399
organizations are adopting DevOps

00:01:31,829 --> 00:01:36,780
principles and patterns and so I run the

00:01:35,399 --> 00:01:37,740
DevOps Enterprise limit and I have a

00:01:36,780 --> 00:01:39,570
book coming out in a week and a half

00:01:37,740 --> 00:01:44,039
called the Unicorn project

00:01:39,570 --> 00:01:46,170
so the may be just a set the stage for

00:01:44,039 --> 00:01:48,149
this presentation we all know that open

00:01:46,170 --> 00:01:50,399
source software is everywhere an at

00:01:48,149 --> 00:01:52,619
Friedman yesterday said 99% of new

00:01:50,399 --> 00:01:54,359
software projects include open source

00:01:52,619 --> 00:01:56,609
that's great

00:01:54,359 --> 00:01:58,049
and so the question then becomes you

00:01:56,609 --> 00:02:00,539
know how do the teams that work on these

00:01:58,049 --> 00:02:02,759
components in terms of their update

00:02:00,539 --> 00:02:04,200
behavior security and testing suddenly

00:02:02,759 --> 00:02:07,950
all of their behaviors and practices

00:02:04,200 --> 00:02:09,840
affect us right so yesterday that

00:02:07,950 --> 00:02:12,000
Friedman also said you are now inviting

00:02:09,840 --> 00:02:14,490
thousands of developers into your code

00:02:12,000 --> 00:02:16,770
and when Steve and I heard that I think

00:02:14,490 --> 00:02:19,200
I must know that can be interpreted in

00:02:16,770 --> 00:02:21,090
many ways and inviting them in are they

00:02:19,200 --> 00:02:22,440
gonna be good house guests or are they

00:02:21,090 --> 00:02:24,540
gonna you know trash the place exactly

00:02:22,440 --> 00:02:26,069
right so that that will now impact you

00:02:24,540 --> 00:02:28,560
know the quality of the software that

00:02:26,069 --> 00:02:30,450
you ship so will they help or hurt and

00:02:28,560 --> 00:02:33,420
so really the question becomes what

00:02:30,450 --> 00:02:35,880
practices correspond to good security

00:02:33,420 --> 00:02:37,430
outcomes and therefore good security for

00:02:35,880 --> 00:02:40,140
your the things that you're working on

00:02:37,430 --> 00:02:41,510
so just in terms of a brief background I

00:02:40,140 --> 00:02:44,880
had mentioned the state of DevOps report

00:02:41,510 --> 00:02:46,440
this is what's been so great about that

00:02:44,880 --> 00:02:48,239
is that's the longest-running largest

00:02:46,440 --> 00:02:50,100
study in terms of what are the behaviors

00:02:48,239 --> 00:02:52,080
that caused great performance and in

00:02:50,100 --> 00:02:53,790
that research what we found is there was

00:02:52,080 --> 00:02:56,459
a four tuple and maybe three tuple of

00:02:53,790 --> 00:02:58,050
metrics deployment frequency deployment

00:02:56,459 --> 00:02:59,910
lead time change success rate and

00:02:58,050 --> 00:03:01,470
meantime to store we found that all

00:02:59,910 --> 00:03:03,360
those metrics go up and down together

00:03:01,470 --> 00:03:04,769
right and those predicted not just this

00:03:03,360 --> 00:03:06,300
thing that we call IT performance but

00:03:04,769 --> 00:03:08,430
also organizational performance and

00:03:06,300 --> 00:03:09,540
there's all these behaviors that you

00:03:08,430 --> 00:03:13,110
know make those metrics go up and down

00:03:09,540 --> 00:03:14,489
and so for the longest time I wanted to

00:03:13,110 --> 00:03:17,040
understand like how do we take those

00:03:14,489 --> 00:03:19,819
learnings and apply them to you know how

00:03:17,040 --> 00:03:24,720
software projects I've worked on and so

00:03:19,819 --> 00:03:26,580
I'm the next slide oh yes so the

00:03:24,720 --> 00:03:27,200
specific oh can we go back one slide

00:03:26,580 --> 00:03:30,480
please

00:03:27,200 --> 00:03:31,680
so uh you know specific questions would

00:03:30,480 --> 00:03:33,780
be now what are the structures and

00:03:31,680 --> 00:03:36,090
practices that you in the source code

00:03:33,780 --> 00:03:38,280
repose that lead to exemplary outcomes

00:03:36,090 --> 00:03:40,350
that might map to the metrics that we

00:03:38,280 --> 00:03:42,630
studied in the DevOps state of DeVos

00:03:40,350 --> 00:03:45,750
report and will we find those same

00:03:42,630 --> 00:03:49,410
behaviors in enterprise projects as well

00:03:45,750 --> 00:03:51,720
so a couple of years ago the folks at

00:03:49,410 --> 00:03:53,790
Senate type approached me and I came up

00:03:51,720 --> 00:03:55,470
with this amazing idea they invited

00:03:53,790 --> 00:03:57,540
they said that might be an opportunity

00:03:55,470 --> 00:03:59,060
to actually study the maven central eco

00:03:57,540 --> 00:04:02,370
system for those of you who don't know

00:03:59,060 --> 00:04:04,709
maven is to Java as rubygems is to Ruby

00:04:02,370 --> 00:04:07,140
pipe I as a Python and NPM is to

00:04:04,709 --> 00:04:08,489
JavaScript and potentially you know in

00:04:07,140 --> 00:04:11,250
the cards was the ability to actually

00:04:08,489 --> 00:04:12,750
look at the over decades of what was

00:04:11,250 --> 00:04:14,970
being downloaded maven central and

00:04:12,750 --> 00:04:15,870
specifically what are the what is

00:04:14,970 --> 00:04:19,289
happening inside of the project

00:04:15,870 --> 00:04:21,959
including updates and so this was just

00:04:19,289 --> 00:04:25,289
such a delightful thing for me because

00:04:21,959 --> 00:04:30,740
as a I could go back one slide oh right

00:04:25,289 --> 00:04:32,970
you're driving us put this down so as a

00:04:30,740 --> 00:04:35,910
someone who spends almost all my time

00:04:32,970 --> 00:04:38,520
inside of closure this is so exciting

00:04:35,910 --> 00:04:41,849
because closure is a beneficiary of the

00:04:38,520 --> 00:04:44,010
Java and maven ecosystem and so it was

00:04:41,849 --> 00:04:45,840
incredible Glee and delight that

00:04:44,010 --> 00:04:47,580
then I turned to my friend dr. McGill

00:04:45,840 --> 00:04:49,140
and I'm more of a Haskell programmer

00:04:47,580 --> 00:04:51,840
which is sort of down on the far right

00:04:49,140 --> 00:04:54,180
of this slide but you know Scala as a

00:04:51,840 --> 00:04:56,370
typed functional language in the Java

00:04:54,180 --> 00:04:58,350
ecosystem is also close to my heart and

00:04:56,370 --> 00:05:00,150
so like getting to look at this this

00:04:58,350 --> 00:05:01,620
broad ecosystem that really it's not

00:05:00,150 --> 00:05:03,180
even about a single language it's about

00:05:01,620 --> 00:05:05,220
you know this collection of languages

00:05:03,180 --> 00:05:06,900
and tools and frameworks and in

00:05:05,220 --> 00:05:09,180
particular a ton of open source that we

00:05:06,900 --> 00:05:10,140
all benefit from absolutely so I you

00:05:09,180 --> 00:05:12,810
know the words I would use this is

00:05:10,140 --> 00:05:15,030
gratitude and enthusiasm and so on the

00:05:12,810 --> 00:05:16,800
next slide is the is what really came

00:05:15,030 --> 00:05:19,110
out of it so we spent over a year

00:05:16,800 --> 00:05:23,040
working on the state of the software

00:05:19,110 --> 00:05:24,720
supply chain and so dr. McGill was the

00:05:23,040 --> 00:05:26,460
lead investigator and we were supported

00:05:24,720 --> 00:05:28,800
by an amazing team at sona type Bruce

00:05:26,460 --> 00:05:30,570
Mayhew gauzy Mahmood Kevin Witten Dirk

00:05:28,800 --> 00:05:34,380
weeks Matt Howard and I forgot to have

00:05:30,570 --> 00:05:36,000
mentioned Brian Fox with the Invo of The

00:05:34,380 --> 00:05:38,850
Adventures of maven that the

00:05:36,000 --> 00:05:40,290
longest-lived repository across all of

00:05:38,850 --> 00:05:45,750
the language ecosystem so this was an

00:05:40,290 --> 00:05:47,820
honor beyond words so Steven tell us

00:05:45,750 --> 00:05:48,930
about some of the hypotheses so and we

00:05:47,820 --> 00:05:50,540
came into the work with a number of

00:05:48,930 --> 00:05:53,880
hypotheses that we wanted to investigate

00:05:50,540 --> 00:05:55,470
the first one was whether projects that

00:05:53,880 --> 00:05:57,840
release frequently have better outcome

00:05:55,470 --> 00:05:59,370
so really the open source version of

00:05:57,840 --> 00:06:00,750
this effect that we see on the

00:05:59,370 --> 00:06:03,060
enterprise side when we look at the

00:06:00,750 --> 00:06:05,730
effect that DevOps has had on enterprise

00:06:03,060 --> 00:06:07,710
outcomes and practices we also wanted to

00:06:05,730 --> 00:06:08,910
look at whether projects that update

00:06:07,710 --> 00:06:11,370
more frequently are generally more

00:06:08,910 --> 00:06:12,960
secure and whether projects with fewer

00:06:11,370 --> 00:06:14,010
dependencies stay more up-to-date right

00:06:12,960 --> 00:06:16,560
so there's a number of intuitive

00:06:14,010 --> 00:06:17,970
correlations that we expected to find in

00:06:16,560 --> 00:06:19,620
the data and so we wanted to walk

00:06:17,970 --> 00:06:21,120
through and see whether we actually saw

00:06:19,620 --> 00:06:24,060
a statistical support for these

00:06:21,120 --> 00:06:25,740
hypotheses and then finally hypothesis

00:06:24,060 --> 00:06:27,750
number four which we'll get to at the

00:06:25,740 --> 00:06:29,940
end is the effect of popularity whether

00:06:27,750 --> 00:06:31,260
popularity is a good proxy for some of

00:06:29,940 --> 00:06:34,800
these quality outcomes that we all care

00:06:31,260 --> 00:06:36,150
about but before I go further into the

00:06:34,800 --> 00:06:38,220
hypotheses and the evidence that we

00:06:36,150 --> 00:06:40,110
found for against these various

00:06:38,220 --> 00:06:42,690
hypotheses I want to talk about the data

00:06:40,110 --> 00:06:44,070
set and what data set we pulled together

00:06:42,690 --> 00:06:46,650
what's involved and the sort of

00:06:44,070 --> 00:06:48,360
attributes that we focused on so first

00:06:46,650 --> 00:06:51,330
of all as Jean mentioned we started with

00:06:48,360 --> 00:06:53,190
the maven central data maven central as

00:06:51,330 --> 00:06:56,100
of a couple of days ago I updated these

00:06:53,190 --> 00:06:57,900
statistics on the slide contains 300 and

00:06:56,100 --> 00:07:00,900
over two three hundred ten thousand Java

00:06:57,900 --> 00:07:03,060
opponents those components are released

00:07:00,900 --> 00:07:04,530
at multiple versions of course and so if

00:07:03,060 --> 00:07:07,350
you look across the history

00:07:04,530 --> 00:07:09,539
there's 4.2 million artifacts so

00:07:07,350 --> 00:07:10,949
individual jars that have been uploaded

00:07:09,539 --> 00:07:15,120
to maven central and are available for

00:07:10,949 --> 00:07:17,160
use and then almost 7,000 of those have

00:07:15,120 --> 00:07:18,509
corresponding github projects right so

00:07:17,160 --> 00:07:20,360
we can look not just at the maven

00:07:18,509 --> 00:07:22,289
central data but at the github

00:07:20,360 --> 00:07:23,910
manifestation of that and the metadata

00:07:22,289 --> 00:07:25,680
and the contributor profiles and

00:07:23,910 --> 00:07:27,360
everything that's associated with those

00:07:25,680 --> 00:07:29,699
open source projects and their

00:07:27,360 --> 00:07:31,949
development on github and then of course

00:07:29,699 --> 00:07:33,240
we've heard a lot about security both at

00:07:31,949 --> 00:07:35,430
this morning's keynote and then in other

00:07:33,240 --> 00:07:37,590
talks throughout the conference and

00:07:35,430 --> 00:07:39,780
that's first that's a central concern

00:07:37,590 --> 00:07:41,820
here as well right so statistics show

00:07:39,780 --> 00:07:44,610
that almost 9% of these components are

00:07:41,820 --> 00:07:47,280
vulnerable and so you know what what is

00:07:44,610 --> 00:07:48,210
it about the vulnerable components the

00:07:47,280 --> 00:07:50,340
non vulnerable governments which

00:07:48,210 --> 00:07:52,169
components are best at responding to

00:07:50,340 --> 00:07:55,530
security incidents and remediating

00:07:52,169 --> 00:07:57,210
vulnerabilities and so we wanted to look

00:07:55,530 --> 00:07:58,979
at that not just at the individual

00:07:57,210 --> 00:08:02,220
project level but taking into account

00:07:58,979 --> 00:08:05,580
the dependency structure right so here

00:08:02,220 --> 00:08:08,070
is the dependency graph for a particular

00:08:05,580 --> 00:08:09,990
job of component and you can see you

00:08:08,070 --> 00:08:12,120
know it's quite deep right so this is

00:08:09,990 --> 00:08:14,010
this gets back to the to the comment

00:08:12,120 --> 00:08:15,510
from this morning that you know you have

00:08:14,010 --> 00:08:16,770
to consider your dependencies and their

00:08:15,510 --> 00:08:19,370
dependencies in the dependencies of the

00:08:16,770 --> 00:08:21,810
dependencies and it goes on on right so

00:08:19,370 --> 00:08:24,150
what happens when one of these updates

00:08:21,810 --> 00:08:26,699
right it kicks off a whole chain of

00:08:24,150 --> 00:08:28,710
things right the the the projects that

00:08:26,699 --> 00:08:30,570
use that dependency now have to update

00:08:28,710 --> 00:08:31,949
their version and that update has to

00:08:30,570 --> 00:08:34,610
propagate and so we looked a lot of that

00:08:31,949 --> 00:08:36,870
propagation behavior and so to do this

00:08:34,610 --> 00:08:39,240
we started as I said from the maven

00:08:36,870 --> 00:08:41,219
central data but then we we did a number

00:08:39,240 --> 00:08:43,680
we applied a number of filters to focus

00:08:41,219 --> 00:08:46,080
down on a set of data where we really

00:08:43,680 --> 00:08:48,270
had all the attributes and and

00:08:46,080 --> 00:08:50,970
associated metrics that we cared about

00:08:48,270 --> 00:08:53,250
so that we could really do an in-depth

00:08:50,970 --> 00:08:56,100
analysis and so the first thing we did

00:08:53,250 --> 00:08:57,420
is we looked at just recent projects so

00:08:56,100 --> 00:09:00,050
we looked over the last five years

00:08:57,420 --> 00:09:02,160
because development practices tools

00:09:00,050 --> 00:09:04,650
development culture changes over time

00:09:02,160 --> 00:09:08,190
and we wanted what we found to be

00:09:04,650 --> 00:09:10,110
relevant to developers today then we

00:09:08,190 --> 00:09:11,580
looked at whether the component was

00:09:10,110 --> 00:09:12,690
connected into this open source

00:09:11,580 --> 00:09:14,490
supply-chain right there's a lot of

00:09:12,690 --> 00:09:15,780
components that are just isolated

00:09:14,490 --> 00:09:18,540
projects maybe it's a personal project

00:09:15,780 --> 00:09:20,160
maybe it never took off but you know if

00:09:18,540 --> 00:09:21,720
no one in the open-source community is

00:09:20,160 --> 00:09:23,700
using it and it's not using any

00:09:21,720 --> 00:09:25,110
open-source libraries itself then it's

00:09:23,700 --> 00:09:27,660
really not part of this supply chain so

00:09:25,110 --> 00:09:29,910
we filtered out based on that we

00:09:27,660 --> 00:09:33,240
filtered on our ability to recognize

00:09:29,910 --> 00:09:35,160
version so maven central the maven tool

00:09:33,240 --> 00:09:37,380
has a particular standard for versioning

00:09:35,160 --> 00:09:40,080
so we just looked at sort of well-formed

00:09:37,380 --> 00:09:41,250
version components and then basically

00:09:40,080 --> 00:09:42,840
all of those attributes for the

00:09:41,250 --> 00:09:44,930
dependencies as well because like I said

00:09:42,840 --> 00:09:47,310
we want to focus a lot on the dependency

00:09:44,930 --> 00:09:51,150
behavior and how projects update

00:09:47,310 --> 00:09:52,470
dependencies and then finally updates

00:09:51,150 --> 00:09:54,540
are gonna be critical like how

00:09:52,470 --> 00:09:57,630
components respond to updates and so

00:09:54,540 --> 00:09:59,220
having had a dependency be updated is

00:09:57,630 --> 00:10:01,590
important and so applying all of those

00:09:59,220 --> 00:10:04,290
filters we get down to just over 13% of

00:10:01,590 --> 00:10:07,440
the population which is you know a small

00:10:04,290 --> 00:10:08,610
subset but includes all the popular open

00:10:07,440 --> 00:10:10,230
source projects that that you're

00:10:08,610 --> 00:10:11,460
familiar with right it's the it's the

00:10:10,230 --> 00:10:13,110
includes all of the projects that are

00:10:11,460 --> 00:10:16,500
widely used that are well connected in

00:10:13,110 --> 00:10:20,180
this open source dependency graph all

00:10:16,500 --> 00:10:22,920
right so the attributes we looked at are

00:10:20,180 --> 00:10:24,450
popularity and we'll talk in more detail

00:10:22,920 --> 00:10:25,770
about each of these in the next couple

00:10:24,450 --> 00:10:28,350
of slides but I'll just go through them

00:10:25,770 --> 00:10:30,420
popularity release frequency then a

00:10:28,350 --> 00:10:31,920
number of metrics that that we get by

00:10:30,420 --> 00:10:33,570
connecting to that github data that I

00:10:31,920 --> 00:10:35,220
talked about right so some of these

00:10:33,570 --> 00:10:37,290
projects have associated github repos

00:10:35,220 --> 00:10:39,990
and so if we look at the github activity

00:10:37,290 --> 00:10:41,100
we can see a development activity we can

00:10:39,990 --> 00:10:43,740
see the size of the development team

00:10:41,100 --> 00:10:46,890
whether CI is being used by pulling the

00:10:43,740 --> 00:10:48,720
repo and looking for CI markers and then

00:10:46,890 --> 00:10:50,430
there's a few attributes foundation

00:10:48,720 --> 00:10:52,920
support and then some security and

00:10:50,430 --> 00:10:54,990
update oriented attributes that require

00:10:52,920 --> 00:10:58,170
their own sort of slide deck to go into

00:10:54,990 --> 00:11:00,330
and we will go into them but first I

00:10:58,170 --> 00:11:02,040
want to focus on just how we collected

00:11:00,330 --> 00:11:03,710
these popularity and activity metrics so

00:11:02,040 --> 00:11:07,410
Jean perfect yeah so the first set of

00:11:03,710 --> 00:11:10,560
attributes as opposed to the outcomes

00:11:07,410 --> 00:11:12,360
are I'll go through each one so the

00:11:10,560 --> 00:11:14,850
first one is like popularity right and

00:11:12,360 --> 00:11:16,260
so this is a measure of how often is

00:11:14,850 --> 00:11:17,460
this component being used how often is

00:11:16,260 --> 00:11:19,440
being downloaded so the specific

00:11:17,460 --> 00:11:22,410
measurements are how many times is being

00:11:19,440 --> 00:11:24,240
downloaded from maven central how Oh

00:11:22,410 --> 00:11:25,440
number of stars and four so the

00:11:24,240 --> 00:11:27,240
libraries io data

00:11:25,440 --> 00:11:29,250
was phenomenal so we actually used that

00:11:27,240 --> 00:11:31,530
dataset which actually provides a number

00:11:29,250 --> 00:11:33,570
of Forks and stars for various github

00:11:31,530 --> 00:11:36,900
repos so shout out to the great people

00:11:33,570 --> 00:11:39,210
behind that project and then we actually

00:11:36,900 --> 00:11:40,920
have to say CI oh and then that we were

00:11:39,210 --> 00:11:42,890
able to get access from the UH Nexus IQ

00:11:40,920 --> 00:11:45,570
server so these are the specific

00:11:42,890 --> 00:11:47,490
projects inside of someone's like

00:11:45,570 --> 00:11:49,470
customers enterprise projects so we can

00:11:47,490 --> 00:11:52,500
actually see what components they were

00:11:49,470 --> 00:11:55,680
using anonymized of course the second

00:11:52,500 --> 00:11:57,750
set of data that we gathered was around

00:11:55,680 --> 00:11:59,370
commit activity and so here we used the

00:11:57,750 --> 00:12:02,070
phenomenal tools from the chaos project

00:11:59,370 --> 00:12:04,050
included percival and so one of the

00:12:02,070 --> 00:12:07,500
things that we gathered was the commits

00:12:04,050 --> 00:12:10,260
per month so for every we use percival

00:12:07,500 --> 00:12:11,880
to use go to github which I'd which

00:12:10,260 --> 00:12:13,860
actually downloading target repo and

00:12:11,880 --> 00:12:15,450
then you know crack that open and so we

00:12:13,860 --> 00:12:17,070
could actually see how many commits were

00:12:15,450 --> 00:12:19,140
being made four months and then we

00:12:17,070 --> 00:12:20,550
actually measured how many unique

00:12:19,140 --> 00:12:22,080
developers were there so this is kind of

00:12:20,550 --> 00:12:23,670
proxy for you know how many active

00:12:22,080 --> 00:12:28,290
developers are there on that specific

00:12:23,670 --> 00:12:29,850
project and then we also looked for okay

00:12:28,290 --> 00:12:32,580
and so on the way we did is we use

00:12:29,850 --> 00:12:35,250
percival we use JQ to open that data and

00:12:32,580 --> 00:12:38,790
then we used closure to basically do a

00:12:35,250 --> 00:12:41,940
three-day scan for those 14,000

00:12:38,790 --> 00:12:44,210
repositories and then the other thing

00:12:41,940 --> 00:12:46,020
that we did is I looked for presence of

00:12:44,210 --> 00:12:48,090
continuous integration servers so we

00:12:46,020 --> 00:12:50,340
looked for you know grab the HTML from

00:12:48,090 --> 00:12:52,320
the front page of the repository and

00:12:50,340 --> 00:12:54,240
looked for markers of you know CI

00:12:52,320 --> 00:12:59,190
configuration files what was Travis

00:12:54,240 --> 00:13:00,570
Circle CI Jenkins and others and that's

00:12:59,190 --> 00:13:03,240
actually the last you'll hear about CI

00:13:00,570 --> 00:13:06,120
in this talk because we didn't find a

00:13:03,240 --> 00:13:07,140
connection between use of CI and some of

00:13:06,120 --> 00:13:09,690
the other outcomes we were looking for

00:13:07,140 --> 00:13:11,760
which was really surprising and really

00:13:09,690 --> 00:13:13,589
you know I think we'll get to this I'll

00:13:11,760 --> 00:13:14,550
come later but like it's not just about

00:13:13,589 --> 00:13:15,930
the tools you use it's about the

00:13:14,550 --> 00:13:17,730
practices and the culture around those

00:13:15,930 --> 00:13:20,220
tools and so you know that was one

00:13:17,730 --> 00:13:21,120
indication of that it was yeah right is

00:13:20,220 --> 00:13:23,250
that you would have thought that the

00:13:21,120 --> 00:13:24,810
presence of CI and automated tests right

00:13:23,250 --> 00:13:26,160
would be you know some predictive of

00:13:24,810 --> 00:13:29,120
something or correlated with something

00:13:26,160 --> 00:13:29,120
and that was actually not the case

00:13:29,240 --> 00:13:36,570
alright so we also looked at a number of

00:13:32,430 --> 00:13:38,460
other project level metrics so the first

00:13:36,570 --> 00:13:39,089
the first is and is relevant to here

00:13:38,460 --> 00:13:40,290
especially

00:13:39,089 --> 00:13:42,660
as we heard in the keynote this morning

00:13:40,290 --> 00:13:44,009
about yesterday about support for open

00:13:42,660 --> 00:13:46,829
source projects and what github is doing

00:13:44,009 --> 00:13:48,449
there what sort of support does the

00:13:46,829 --> 00:13:50,730
project have is it foundation supported

00:13:48,449 --> 00:13:53,069
is it commercially supported or is it

00:13:50,730 --> 00:13:55,259
just an independent project so we

00:13:53,069 --> 00:13:57,240
identified by hand some number of opens

00:13:55,259 --> 00:13:59,490
of foundation supported open source

00:13:57,240 --> 00:14:00,749
projects and then created a classifier

00:13:59,490 --> 00:14:02,249
that we could generalize across the

00:14:00,749 --> 00:14:04,980
dataset and automatically label those

00:14:02,249 --> 00:14:07,350
those repositories based on foundation

00:14:04,980 --> 00:14:08,850
support we looked at number of

00:14:07,350 --> 00:14:10,350
dependencies which we took as just the

00:14:08,850 --> 00:14:12,120
maximum so the high-water mark across

00:14:10,350 --> 00:14:13,769
all versions over this five-year period

00:14:12,120 --> 00:14:16,860
of the number of dependencies used by a

00:14:13,769 --> 00:14:19,079
project we looked at stale dependencies

00:14:16,860 --> 00:14:20,790
so sometimes a project will release an

00:14:19,079 --> 00:14:22,379
update and one of its dependencies has a

00:14:20,790 --> 00:14:24,420
newer version available but they don't

00:14:22,379 --> 00:14:26,160
move on to that newer version and so we

00:14:24,420 --> 00:14:27,509
mark that as stale that's one of the one

00:14:26,160 --> 00:14:30,029
of the factors that we consider in

00:14:27,509 --> 00:14:32,129
rating projects and then the release

00:14:30,029 --> 00:14:35,279
frequency how frequently does this

00:14:32,129 --> 00:14:39,509
component release as a marker of

00:14:35,279 --> 00:14:42,779
development velocity is okay so

00:14:39,509 --> 00:14:44,339
hypothesis number one was that projects

00:14:42,779 --> 00:14:45,540
that released more frequently will have

00:14:44,339 --> 00:14:47,699
better outcomes so this is of course

00:14:45,540 --> 00:14:48,839
based on this experience coming out of

00:14:47,699 --> 00:14:52,499
the state of develop art where we found

00:14:48,839 --> 00:14:54,120
that deployment frequency went

00:14:52,499 --> 00:14:56,009
hand-in-hand with a component lead time

00:14:54,120 --> 00:14:58,439
and in general right the more you

00:14:56,009 --> 00:15:00,569
release the better all the other outcome

00:14:58,439 --> 00:15:03,089
measures are so this is a we wanted to

00:15:00,569 --> 00:15:06,269
look at all right do projects that

00:15:03,089 --> 00:15:09,379
output more releases more frequently you

00:15:06,269 --> 00:15:09,379
know would they have better outcomes

00:15:09,800 --> 00:15:18,329
confirmed yeah this was validated excuse

00:15:14,850 --> 00:15:20,009
me yeah so on the whole projects that

00:15:18,329 --> 00:15:22,410
release more frequently are more popular

00:15:20,009 --> 00:15:24,749
we took popularity as the main proxy for

00:15:22,410 --> 00:15:26,610
a positive open source outcome right

00:15:24,749 --> 00:15:28,800
people contribute to open source because

00:15:26,610 --> 00:15:30,240
they want their code to have impact they

00:15:28,800 --> 00:15:32,189
want to provide capabilities to the rest

00:15:30,240 --> 00:15:33,660
of the world and so popularity is really

00:15:32,189 --> 00:15:37,529
a great measure of how well they're

00:15:33,660 --> 00:15:39,389
accomplishing that and so here are the

00:15:37,529 --> 00:15:40,829
statistics behind this right so the

00:15:39,389 --> 00:15:43,589
projects that released most frequently

00:15:40,829 --> 00:15:45,689
so the top 20% of projects our five

00:15:43,589 --> 00:15:47,370
times more popular on average this is

00:15:45,689 --> 00:15:51,209
rated by maven central downloads in

00:15:47,370 --> 00:15:52,460
particular but the same connection holds

00:15:51,209 --> 00:15:56,120
with stars and forks

00:15:52,460 --> 00:15:58,700
excuse me they also on average have 79

00:15:56,120 --> 00:16:01,100
percent more developers and have a

00:15:58,700 --> 00:16:03,110
greater foundation support rates 12

00:16:01,100 --> 00:16:04,970
percent greater and that's interesting

00:16:03,110 --> 00:16:07,399
by the way just to back up an analysis

00:16:04,970 --> 00:16:09,680
so you know so we split the population

00:16:07,399 --> 00:16:11,060
into those that had the top 20% of

00:16:09,680 --> 00:16:12,529
release frequency right and then

00:16:11,060 --> 00:16:13,550
compared all the measures that Steven

00:16:12,529 --> 00:16:15,440
talked about and if you could go back

00:16:13,550 --> 00:16:17,450
one slide write that so the big surprise

00:16:15,440 --> 00:16:19,279
here was about again that development

00:16:17,450 --> 00:16:20,870
team size all right the question is do

00:16:19,279 --> 00:16:22,820
larger teams lead to more frequent

00:16:20,870 --> 00:16:24,290
leases or does like popularity and

00:16:22,820 --> 00:16:25,730
active projects attract more developers

00:16:24,290 --> 00:16:28,310
right and of course with the sort of

00:16:25,730 --> 00:16:29,600
analysis now you can't know that but it

00:16:28,310 --> 00:16:35,000
does lead to some very interesting

00:16:29,600 --> 00:16:37,190
questions yeah so then I want to say

00:16:35,000 --> 00:16:39,529
more about these last two metrics that I

00:16:37,190 --> 00:16:43,870
mentioned as more complicated right so

00:16:39,529 --> 00:16:47,810
security and update speed and so here I

00:16:43,870 --> 00:16:49,880
want to walk through sort of a

00:16:47,810 --> 00:16:51,920
progression of updates in a typical

00:16:49,880 --> 00:16:54,260
supply open-source supply chain so here

00:16:51,920 --> 00:16:58,220
we have just some packages labeled a b c

00:16:54,260 --> 00:17:00,260
d or a b c and you can view time as

00:16:58,220 --> 00:17:02,150
marching from left to right right and so

00:17:00,260 --> 00:17:04,910
we have several versions of each package

00:17:02,150 --> 00:17:06,709
displayed here dependencies the solid

00:17:04,910 --> 00:17:10,429
lines represent dependencies so here

00:17:06,709 --> 00:17:12,559
package c is dependent on a and B and we

00:17:10,429 --> 00:17:14,750
can see several releases of a right it

00:17:12,559 --> 00:17:17,839
starts at version 2.2 moves on to

00:17:14,750 --> 00:17:20,720
version 2.3 and then releases version

00:17:17,839 --> 00:17:23,329
2.4 that new version of dependency a has

00:17:20,720 --> 00:17:27,100
eventually picked up when C releases its

00:17:23,329 --> 00:17:30,730
next version so at this point right and

00:17:27,100 --> 00:17:33,740
we also have vulnerability information

00:17:30,730 --> 00:17:35,570
depicted here right so these these red

00:17:33,740 --> 00:17:37,670
points are points at which we're

00:17:35,570 --> 00:17:39,710
assuming a vulnerability is discovered

00:17:37,670 --> 00:17:42,500
and reported in this case to component B

00:17:39,710 --> 00:17:44,809
and so there's some period of time where

00:17:42,500 --> 00:17:46,610
B is vulnerable and because C depends on

00:17:44,809 --> 00:17:50,210
B there's some period of time where C is

00:17:46,610 --> 00:17:52,040
vulnerable and so and that vulnerable

00:17:50,210 --> 00:17:54,679
time is interesting but what's really

00:17:52,040 --> 00:17:56,960
more relevant and actionable is this

00:17:54,679 --> 00:17:58,760
remediation time right how long does it

00:17:56,960 --> 00:18:00,650
take from when B patches that

00:17:58,760 --> 00:18:03,590
vulnerability to the point in time when

00:18:00,650 --> 00:18:05,779
C adopts that patched version of B and

00:18:03,590 --> 00:18:08,899
so we call that remediation time

00:18:05,779 --> 00:18:11,869
TTR and we calculate that for each

00:18:08,899 --> 00:18:13,609
security relevant update we also for

00:18:11,869 --> 00:18:16,249
each update whether security relevant or

00:18:13,609 --> 00:18:18,200
not capture the update time so how long

00:18:16,249 --> 00:18:21,529
again does it take see to adopt this

00:18:18,200 --> 00:18:23,059
updated version of B whereas B is the

00:18:21,529 --> 00:18:25,190
only vulnerable component in this

00:18:23,059 --> 00:18:26,869
example there are other components that

00:18:25,190 --> 00:18:29,719
update right so there's an update time

00:18:26,869 --> 00:18:31,940
for a and so we can record that update

00:18:29,719 --> 00:18:33,469
metric for every update to every

00:18:31,940 --> 00:18:35,359
dependency whether security relevant or

00:18:33,469 --> 00:18:38,359
not then we call that TTU so you'll see

00:18:35,359 --> 00:18:40,249
that in the next slides as well and then

00:18:38,359 --> 00:18:41,629
this is this notion of stale

00:18:40,249 --> 00:18:43,999
dependencies that I mentioned earlier

00:18:41,629 --> 00:18:46,039
we're see here is releasing a new

00:18:43,999 --> 00:18:48,080
version there's a more up-to-date

00:18:46,039 --> 00:18:53,330
version of a available at the time of

00:18:48,080 --> 00:18:54,969
that release but C doesn't adopt that me

00:18:53,330 --> 00:18:58,099
so that really gives us three key

00:18:54,969 --> 00:19:01,039
dependency oriented metrics time to

00:18:58,099 --> 00:19:03,049
remediate time to update and stale

00:19:01,039 --> 00:19:05,690
dependencies and we get these on a per

00:19:03,049 --> 00:19:07,759
update basis though we can also roll

00:19:05,690 --> 00:19:09,649
them up to a per project basis by

00:19:07,759 --> 00:19:12,200
looking at the median of those

00:19:09,649 --> 00:19:15,710
collections of metrics yeah so this is

00:19:12,200 --> 00:19:18,379
so cool because now we have the time to

00:19:15,710 --> 00:19:20,509
mediate security vulnerabilities and the

00:19:18,379 --> 00:19:22,339
time to update any dependencies across

00:19:20,509 --> 00:19:25,219
the entire population of the 14,000

00:19:22,339 --> 00:19:27,289
projects across all of their versions so

00:19:25,219 --> 00:19:28,879
the graph here shows on the x-axis is in

00:19:27,289 --> 00:19:30,799
days to meet remediate from

00:19:28,879 --> 00:19:31,999
vulnerabilities and the Y is what

00:19:30,799 --> 00:19:37,190
percent of the population so this is a

00:19:31,999 --> 00:19:40,429
cumulative it's a cumulative yeah a

00:19:37,190 --> 00:19:41,539
cumulative distribution right so like at

00:19:40,429 --> 00:19:44,479
the very right you know ideally a

00:19:41,539 --> 00:19:46,339
hundred percent will have updated or

00:19:44,479 --> 00:19:48,529
radiative vulnerability so here's kind

00:19:46,339 --> 00:19:51,349
of how to read this graph the median is

00:19:48,529 --> 00:19:53,960
a hundred eighty days the mean is three

00:19:51,349 --> 00:19:57,019
on twenty-six days so just maybe take a

00:19:53,960 --> 00:20:00,649
pause there it takes a half year for the

00:19:57,019 --> 00:20:04,190
average component to remediate published

00:20:00,649 --> 00:20:06,469
security vulnerability and by the time

00:20:04,190 --> 00:20:08,599
you get to three and a half years 95%

00:20:06,469 --> 00:20:12,139
have updated so we actually cut off the

00:20:08,599 --> 00:20:15,229
graph because I just did you know it

00:20:12,139 --> 00:20:18,500
because on forever a long tail is a word

00:20:15,229 --> 00:20:19,730
so there's a log normal distribution

00:20:18,500 --> 00:20:20,990
so that's the kind of sobering finding I

00:20:19,730 --> 00:20:22,670
think this is consistent with some of

00:20:20,990 --> 00:20:24,440
the statistics we've seen that we were

00:20:22,670 --> 00:20:26,660
able to validate you know in this

00:20:24,440 --> 00:20:29,240
analysis so how one other observation

00:20:26,660 --> 00:20:31,040
here is and so on the next slide right

00:20:29,240 --> 00:20:32,480
so that it's actually this lower left

00:20:31,040 --> 00:20:34,520
quadrant that we want to study these are

00:20:32,480 --> 00:20:36,950
the potential exemplars who for our

00:20:34,520 --> 00:20:38,530
reason write mediates security patches

00:20:36,950 --> 00:20:41,780
quickly right so that's kind of the

00:20:38,530 --> 00:20:43,010
population we want to study so the other

00:20:41,780 --> 00:20:44,660
thing to note is that the time to

00:20:43,010 --> 00:20:47,420
mediate metrics are actually pretty

00:20:44,660 --> 00:20:49,550
sparse that not every component actually

00:20:47,420 --> 00:20:51,500
has a CBE published against it so

00:20:49,550 --> 00:20:54,170
overlaid onto this on the green is the

00:20:51,500 --> 00:20:56,180
time to update so if a component has

00:20:54,170 --> 00:20:57,650
updated you know we have you know

00:20:56,180 --> 00:21:00,290
they're gonna be in this population

00:20:57,650 --> 00:21:02,660
which is much bigger set and again you

00:21:00,290 --> 00:21:05,360
know just to read this that median time

00:21:02,660 --> 00:21:06,680
for projects to update is a hundred

00:21:05,360 --> 00:21:10,430
thirty days so I guess it's about a

00:21:06,680 --> 00:21:12,410
third of a year and you know again it's

00:21:10,430 --> 00:21:15,050
the same sort of log normal distribution

00:21:12,410 --> 00:21:15,710
so that's actually a little bit sobering

00:21:15,050 --> 00:21:18,290
as well

00:21:15,710 --> 00:21:19,990
yeah and interesting so you can see

00:21:18,290 --> 00:21:24,320
these distributions match very closely

00:21:19,990 --> 00:21:25,940
at the at the population level but we

00:21:24,320 --> 00:21:28,700
wondered at the project level is there

00:21:25,940 --> 00:21:31,760
also this correlation right yeah and so

00:21:28,700 --> 00:21:33,500
here we have time to update and time to

00:21:31,760 --> 00:21:36,350
remediate so security relevant and

00:21:33,500 --> 00:21:38,780
non-security relevant updates graphed

00:21:36,350 --> 00:21:40,580
where each point these are each point

00:21:38,780 --> 00:21:42,080
corresponds to a single project so where

00:21:40,580 --> 00:21:44,450
does it live in this space of time to

00:21:42,080 --> 00:21:46,940
update for this time to remediate and so

00:21:44,450 --> 00:21:48,620
the line that's depicted there those are

00:21:46,940 --> 00:21:52,070
really those are projects that lie on

00:21:48,620 --> 00:21:53,360
that line are projects that take treat

00:21:52,070 --> 00:21:55,670
security relevant and on security

00:21:53,360 --> 00:21:58,150
relevant updates equally right equally

00:21:55,670 --> 00:22:02,120
uh they respond in the same way to both

00:21:58,150 --> 00:22:05,960
and so the in going back to the previous

00:22:02,120 --> 00:22:07,250
slide real quick so we did find a

00:22:05,960 --> 00:22:09,170
correlation here so the correlation

00:22:07,250 --> 00:22:11,090
coefficient is 0.6 it's maybe not super

00:22:09,170 --> 00:22:12,710
obvious from the from the graph but um

00:22:11,090 --> 00:22:14,930
but there is some signal there in terms

00:22:12,710 --> 00:22:16,220
of those two tracking together and you

00:22:14,930 --> 00:22:21,470
can look at it a couple of other ways to

00:22:16,220 --> 00:22:22,880
you can say you know what if you if we

00:22:21,470 --> 00:22:24,250
loosen it up a little bit and we say

00:22:22,880 --> 00:22:26,540
okay they don't have to match exactly

00:22:24,250 --> 00:22:28,880
you know for what percentage of the

00:22:26,540 --> 00:22:30,560
population do we have update behavior

00:22:28,880 --> 00:22:32,270
and remediation behavior that's that's

00:22:30,560 --> 00:22:34,640
similar within 20 percent of each other

00:22:32,270 --> 00:22:36,470
fifty-five percent of the population has

00:22:34,640 --> 00:22:38,059
that property and so that's like if you

00:22:36,470 --> 00:22:39,650
think about you know these these fine

00:22:38,059 --> 00:22:41,630
lines on either side of the thick line

00:22:39,650 --> 00:22:43,670
you look at the projects that fall

00:22:41,630 --> 00:22:46,640
within that that's a majority of the

00:22:43,670 --> 00:22:48,290
population and maybe just pause there if

00:22:46,640 --> 00:22:50,000
we go back that slide so I think the

00:22:48,290 --> 00:22:51,470
graph depiction is actually maybe a

00:22:50,000 --> 00:22:54,050
little bit misrepresentative because the

00:22:51,470 --> 00:22:55,400
dots are so big but it just to reiterate

00:22:54,050 --> 00:22:58,250
what Stephen said is that most of them

00:22:55,400 --> 00:23:01,190
fall within that cone right that MTTR an

00:22:58,250 --> 00:23:03,730
MTT you do generally kind of are within

00:23:01,190 --> 00:23:06,559
that cone yeah and if you think about

00:23:03,730 --> 00:23:08,120
you know what would it mean to not be in

00:23:06,559 --> 00:23:11,840
that cone to not have similar update and

00:23:08,120 --> 00:23:14,630
remediation behavior that would be being

00:23:11,840 --> 00:23:16,010
say better than average at remediating

00:23:14,630 --> 00:23:17,780
security vulnerabilities but worse than

00:23:16,010 --> 00:23:19,760
average for updates in general right so

00:23:17,780 --> 00:23:21,140
these a project like that would be

00:23:19,760 --> 00:23:23,660
paying a lot of attention to security

00:23:21,140 --> 00:23:26,059
relevant updates but basically ignoring

00:23:23,660 --> 00:23:27,410
other updates and we only see 15 percent

00:23:26,059 --> 00:23:29,990
of the population falling within that

00:23:27,410 --> 00:23:31,790
category so it really is rare to have

00:23:29,990 --> 00:23:33,890
exemplary security performance without

00:23:31,790 --> 00:23:35,210
just generally good update performance

00:23:33,890 --> 00:23:37,070
to take that to extremes so there is a

00:23:35,210 --> 00:23:38,900
population that only applies security

00:23:37,070 --> 00:23:40,070
patches and never updates you know for

00:23:38,900 --> 00:23:41,900
non security updates and there's a

00:23:40,070 --> 00:23:43,760
population that only updates non

00:23:41,900 --> 00:23:45,590
security relevant things and always

00:23:43,760 --> 00:23:52,309
ignores patches but that is a small

00:23:45,590 --> 00:23:55,190
population yeah all right yeah yeah so

00:23:52,309 --> 00:23:57,020
um so the conclusion I field

00:23:55,190 --> 00:23:58,400
interpretation is that projects that

00:23:57,020 --> 00:24:00,380
update depending more frequently are

00:23:58,400 --> 00:24:01,940
generally more secure in fact I think on

00:24:00,380 --> 00:24:03,710
the next slide there's actually some

00:24:01,940 --> 00:24:06,980
more guidance on this this actually came

00:24:03,710 --> 00:24:08,600
from Jeremy long so he's the author of

00:24:06,980 --> 00:24:10,700
the famous Oh wasp dependency check

00:24:08,600 --> 00:24:11,960
project and he and one of the things

00:24:10,700 --> 00:24:14,240
that he said at a security conference

00:24:11,960 --> 00:24:16,850
that just really struck me was it was

00:24:14,240 --> 00:24:18,860
this the best way to stay secure meaning

00:24:16,850 --> 00:24:20,570
and apply security patches is just to

00:24:18,860 --> 00:24:22,570
stay up to date right in other words

00:24:20,570 --> 00:24:26,660
security patching is a subset of

00:24:22,570 --> 00:24:28,520
dependency update behavior and he gave a

00:24:26,660 --> 00:24:31,520
really interesting case it was a prime

00:24:28,520 --> 00:24:33,679
phases CD that came out in 2017

00:24:31,520 --> 00:24:36,590
so this is a vulnerability and some

00:24:33,679 --> 00:24:37,910
component but what's interesting is that

00:24:36,590 --> 00:24:40,070
even though the vulnerability was

00:24:37,910 --> 00:24:43,370
published in 2017 the fix was actually

00:24:40,070 --> 00:24:44,990
pushed out in 2016 so if you had stayed

00:24:43,370 --> 00:24:46,070
up to date you would not have been

00:24:44,990 --> 00:24:47,420
vulnerable to the

00:24:46,070 --> 00:24:49,340
vulnerability in fact the publishing of

00:24:47,420 --> 00:24:51,260
the vulnerability is actually what then

00:24:49,340 --> 00:24:52,700
drove you know the exploit is long billy

00:24:51,260 --> 00:24:55,130
and now suddenly have crypto mining

00:24:52,700 --> 00:24:57,380
happening you know on your servers so

00:24:55,130 --> 00:25:00,020
again I think this is a great evidence

00:24:57,380 --> 00:25:01,580
point that says you know the best thing

00:25:00,020 --> 00:25:03,080
that you can do is integrate updating

00:25:01,580 --> 00:25:05,090
dependencies into your daily work there

00:25:03,080 --> 00:25:07,010
should be a part of your regular

00:25:05,090 --> 00:25:09,530
development activity another way to say

00:25:07,010 --> 00:25:10,820
it is when an update comes out today you

00:25:09,530 --> 00:25:12,980
actually don't know whether that's

00:25:10,820 --> 00:25:14,990
security relevant or not future right

00:25:12,980 --> 00:25:16,700
it's not security relevant today but in

00:25:14,990 --> 00:25:18,020
as this example shows two years from now

00:25:16,700 --> 00:25:23,870
it could suddenly become security

00:25:18,020 --> 00:25:25,280
relevant ID okay ah so hypothesis one

00:25:23,870 --> 00:25:26,930
was about our beliefs frequency that

00:25:25,280 --> 00:25:29,210
lead to better outcomes yes I possible

00:25:26,930 --> 00:25:31,250
number two was is there a link between

00:25:29,210 --> 00:25:34,040
MTTR and MT tu right

00:25:31,250 --> 00:25:36,590
yes hypothesis number three is pretty

00:25:34,040 --> 00:25:38,990
obvious right prod if it's difficult to

00:25:36,590 --> 00:25:41,240
update dependencies it's pretty obvious

00:25:38,990 --> 00:25:43,250
right that projects with fewer

00:25:41,240 --> 00:25:44,930
dependencies will be able to stay up to

00:25:43,250 --> 00:25:46,400
date more easily more frequently

00:25:44,930 --> 00:25:48,500
whatever right it's something if it's a

00:25:46,400 --> 00:25:49,820
lot of work then you know having for

00:25:48,500 --> 00:25:51,730
your dependencies will mean less work

00:25:49,820 --> 00:25:56,480
and better outcomes seems pretty obvious

00:25:51,730 --> 00:26:00,080
but no it was the exact opposite

00:25:56,480 --> 00:26:03,500
it was those components with more

00:26:00,080 --> 00:26:06,350
dependencies had the better time to

00:26:03,500 --> 00:26:08,030
update which is a very counterintuitive

00:26:06,350 --> 00:26:11,000
and very surprising so this was so

00:26:08,030 --> 00:26:13,220
surprising we dug in deeper we had to

00:26:11,000 --> 00:26:15,050
know what was behind this effect where

00:26:13,220 --> 00:26:19,270
you have more dependencies and better

00:26:15,050 --> 00:26:22,790
update behavior and so we actually found

00:26:19,270 --> 00:26:25,340
so this is a plot of development team

00:26:22,790 --> 00:26:27,320
size versus number of dependencies and

00:26:25,340 --> 00:26:29,450
the explanation for this x-axis number

00:26:27,320 --> 00:26:31,490
dependencies and the y-axis is the

00:26:29,450 --> 00:26:33,520
number of developers committing in a

00:26:31,490 --> 00:26:35,840
given month that's all right and so

00:26:33,520 --> 00:26:37,370
projects with more dependencies also

00:26:35,840 --> 00:26:38,570
tend to have larger development teams

00:26:37,370 --> 00:26:41,270
and if you just look at larger

00:26:38,570 --> 00:26:43,640
development teams by themselves that

00:26:41,270 --> 00:26:45,020
correlates with with faster MTT you

00:26:43,640 --> 00:26:46,840
better update hygiene better you know

00:26:45,020 --> 00:26:50,480
release frequency and so forth

00:26:46,840 --> 00:26:52,490
and so yeah so as Jean said this is a

00:26:50,480 --> 00:26:53,870
plot of those two against each other and

00:26:52,490 --> 00:26:55,820
you can see sort of as dependencies

00:26:53,870 --> 00:26:58,790
March up you know you have to buy more

00:26:55,820 --> 00:27:00,350
pizza but thanks to Derek weeks for that

00:26:58,790 --> 00:27:03,140
lovely

00:27:00,350 --> 00:27:04,610
quantization of team size - number of

00:27:03,140 --> 00:27:06,620
pizzas for the team's an important

00:27:04,610 --> 00:27:11,260
metric of all the metrics we collected I

00:27:06,620 --> 00:27:13,130
think you know interesting thumbs up oh

00:27:11,260 --> 00:27:15,080
cool

00:27:13,130 --> 00:27:17,750
and so specifically if you go back one

00:27:15,080 --> 00:27:21,170
slide maybe just land the point larger

00:27:17,750 --> 00:27:24,170
developing teams have 50% faster mt tu

00:27:21,170 --> 00:27:26,240
and release 2.6 times more frequently so

00:27:24,170 --> 00:27:28,760
that's really interesting and in some

00:27:26,240 --> 00:27:31,010
ways curious so now they're doing a lot

00:27:28,760 --> 00:27:33,260
more questions is it that is it that as

00:27:31,010 --> 00:27:35,270
you grow development size if you grow

00:27:33,260 --> 00:27:37,070
the team size do they all just bring in

00:27:35,270 --> 00:27:39,710
their own components or is it the other

00:27:37,070 --> 00:27:40,850
way around is it the work that it was

00:27:39,710 --> 00:27:42,710
required by bringing out more

00:27:40,850 --> 00:27:45,980
dependencies is actually what drives the

00:27:42,710 --> 00:27:47,810
need for more developers right so again

00:27:45,980 --> 00:27:49,610
we don't know which way is the causation

00:27:47,810 --> 00:27:55,100
but I think this is the stuff

00:27:49,610 --> 00:27:57,290
fascinating and tantalizing finding all

00:27:55,100 --> 00:27:58,790
right the last type othe assists that we

00:27:57,290 --> 00:28:01,370
want to talk about has to do with

00:27:58,790 --> 00:28:03,500
popularity and in particular whether

00:28:01,370 --> 00:28:05,390
more popular projects will be better

00:28:03,500 --> 00:28:07,670
about staying up-to-date so you know if

00:28:05,390 --> 00:28:09,920
we take update behavior update hygiene

00:28:07,670 --> 00:28:12,500
and and thus remediation behavior as

00:28:09,920 --> 00:28:14,690
important security and and project

00:28:12,500 --> 00:28:16,040
health metrics are popular projects you

00:28:14,690 --> 00:28:19,490
know exemplary with respect to those

00:28:16,040 --> 00:28:21,320
attributes and this is important because

00:28:19,490 --> 00:28:23,060
I think a lot of people like choose

00:28:21,320 --> 00:28:24,680
primarily based on popularity right I

00:28:23,060 --> 00:28:26,480
need a logging library I'm gonna go see

00:28:24,680 --> 00:28:30,950
what the most popular logging library is

00:28:26,480 --> 00:28:34,040
right but actually we did not find

00:28:30,950 --> 00:28:35,960
evidence for this and and one one bit of

00:28:34,040 --> 00:28:38,540
counter evidence is present in this

00:28:35,960 --> 00:28:41,630
chart so this is a graph where the

00:28:38,540 --> 00:28:43,220
x-axis is released frequency so at the

00:28:41,630 --> 00:28:45,320
far left is products that release very

00:28:43,220 --> 00:28:47,810
frequently the far right is very slow

00:28:45,320 --> 00:28:50,360
release cycles and popularity is on the

00:28:47,810 --> 00:28:54,280
y-axis and this is a log scale so you

00:28:50,360 --> 00:28:57,170
can see it goes up and it's a number of

00:28:54,280 --> 00:29:00,230
daily downloads on maven central and it

00:28:57,170 --> 00:29:01,850
goes up into the millions right and so

00:29:00,230 --> 00:29:04,930
what I've what we've drawn here with

00:29:01,850 --> 00:29:08,000
this box is a slice of this population

00:29:04,930 --> 00:29:10,340
that is quite popular with respect to

00:29:08,000 --> 00:29:12,020
maven central downloads I mean the the

00:29:10,340 --> 00:29:12,950
bottom there is 10th you're getting at

00:29:12,020 --> 00:29:14,390
least 10

00:29:12,950 --> 00:29:16,910
maven central downloads per day if

00:29:14,390 --> 00:29:18,890
you're in that box but there's a lot of

00:29:16,910 --> 00:29:21,500
poor performing projects from an update

00:29:18,890 --> 00:29:23,210
hygiene perspective in there so I'm not

00:29:21,500 --> 00:29:25,640
I'll say more about the different colors

00:29:23,210 --> 00:29:27,470
in a minute but red is bad okay

00:29:25,640 --> 00:29:29,210
so the fact that there are so many red

00:29:27,470 --> 00:29:31,340
dots you know in this in this popular

00:29:29,210 --> 00:29:33,710
box shows that there certainly are

00:29:31,340 --> 00:29:36,530
popular projects that are not good with

00:29:33,710 --> 00:29:38,300
respect to update hygiene so that's the

00:29:36,530 --> 00:29:39,860
first point here there's plenty of

00:29:38,300 --> 00:29:41,960
components with 4mt to you that are

00:29:39,860 --> 00:29:43,010
popular but you know maybe those are

00:29:41,960 --> 00:29:47,120
just out wires there's always some

00:29:43,010 --> 00:29:48,560
outliers right and but you can look at

00:29:47,120 --> 00:29:50,630
it a couple of other ways and see that

00:29:48,560 --> 00:29:52,880
actually if you look for a correlation

00:29:50,630 --> 00:29:54,920
between popularity and MTT you know

00:29:52,880 --> 00:29:58,070
maybe there's some weak signal there but

00:29:54,920 --> 00:30:00,350
no nothing statistically significant in

00:29:58,070 --> 00:30:01,610
terms of correlation there and even if

00:30:00,350 --> 00:30:03,230
you try and slice up the data and you

00:30:01,610 --> 00:30:05,630
say well let's just focus on like the

00:30:03,230 --> 00:30:07,100
top 10% by popularity right you know

00:30:05,630 --> 00:30:08,870
those are really standouts like

00:30:07,100 --> 00:30:11,720
everyone's using those like surely

00:30:08,870 --> 00:30:13,460
there's some difference between them and

00:30:11,720 --> 00:30:16,580
the rest of the population with respect

00:30:13,460 --> 00:30:17,990
to update behavior but no and so this is

00:30:16,580 --> 00:30:19,910
like in one of those categories of fun

00:30:17,990 --> 00:30:21,710
yeah now findings that you just really

00:30:19,910 --> 00:30:22,850
try to find right you're gonna do

00:30:21,710 --> 00:30:24,590
whatever it takes to like get that

00:30:22,850 --> 00:30:26,420
signal come out and we spent weeks on

00:30:24,590 --> 00:30:28,610
this and no matter how we cut the data

00:30:26,420 --> 00:30:31,130
and no matter how we you know applied

00:30:28,610 --> 00:30:32,840
the you know clustering analysis you

00:30:31,130 --> 00:30:34,940
know we could get to show up and I think

00:30:32,840 --> 00:30:36,650
the reason why it was so troubling to me

00:30:34,940 --> 00:30:37,820
is that whenever I'm working on a

00:30:36,650 --> 00:30:39,140
project and I have to pick a new

00:30:37,820 --> 00:30:40,040
something right logging Frank or

00:30:39,140 --> 00:30:42,500
whatever like you know here's my

00:30:40,040 --> 00:30:44,030
heuristic I go to github and I look for

00:30:42,500 --> 00:30:45,350
how many stars they have right now if

00:30:44,030 --> 00:30:46,910
it's you know thousands of people are

00:30:45,350 --> 00:30:49,460
using it I just assume that's a good

00:30:46,910 --> 00:30:50,960
project to use and so apparently this is

00:30:49,460 --> 00:30:53,120
actually not a very good heuristic at

00:30:50,960 --> 00:30:57,020
all right popularity as measured by

00:30:53,120 --> 00:30:59,030
stars Forks or download count is not I

00:30:57,020 --> 00:31:01,520
mean it does not correlate with any

00:30:59,030 --> 00:31:03,320
measurable good outcome and that we

00:31:01,520 --> 00:31:04,430
identified I think gene ran back and

00:31:03,320 --> 00:31:09,950
started going through all the libraries

00:31:04,430 --> 00:31:11,540
he's using yeah so as Jean said the

00:31:09,950 --> 00:31:13,040
number of stars and forks is not an

00:31:11,540 --> 00:31:14,870
effective heuristic for selecting which

00:31:13,040 --> 00:31:19,040
components to use at least if security

00:31:14,870 --> 00:31:20,960
is important to you which not important

00:31:19,040 --> 00:31:23,060
to you then go ahead and use star the

00:31:20,960 --> 00:31:24,590
forks as you know as a good heuristic

00:31:23,060 --> 00:31:25,760
but you know if you care about security

00:31:24,590 --> 00:31:27,500
it is

00:31:25,760 --> 00:31:29,240
decisively not so I'd say if there's one

00:31:27,500 --> 00:31:31,850
takeaway from today like you know take a

00:31:29,240 --> 00:31:32,870
mental screenshot of this life right you

00:31:31,850 --> 00:31:35,680
know consider factors other than

00:31:32,870 --> 00:31:40,160
popularity in your in your choices

00:31:35,680 --> 00:31:43,100
alright so then we we wanted to look

00:31:40,160 --> 00:31:45,140
more at sort of the the high performing

00:31:43,100 --> 00:31:47,270
projects the low performing projects and

00:31:45,140 --> 00:31:48,470
really see like what what factors bind

00:31:47,270 --> 00:31:50,180
them together what behaviors do they

00:31:48,470 --> 00:31:52,940
have in common really like what

00:31:50,180 --> 00:31:55,910
behavioral clusters can we identify in

00:31:52,940 --> 00:31:59,450
this data and so one interesting thing

00:31:55,910 --> 00:32:01,810
so we took the exemplars from an update

00:31:59,450 --> 00:32:06,200
performance perspective so the top 20%

00:32:01,810 --> 00:32:08,540
according to update behaviors and looked

00:32:06,200 --> 00:32:09,890
at them more closely and one thing I

00:32:08,540 --> 00:32:13,030
find really interesting here is we found

00:32:09,890 --> 00:32:15,260
roughly equal clusters where one has a

00:32:13,030 --> 00:32:17,870
small development team so this is the

00:32:15,260 --> 00:32:19,910
small exemplars up at the upper left and

00:32:17,870 --> 00:32:22,670
they have really exemplary update

00:32:19,910 --> 00:32:25,010
performance and they maintain that with

00:32:22,670 --> 00:32:26,720
very small development teams one means

00:32:25,010 --> 00:32:28,430
one point six developers active

00:32:26,720 --> 00:32:29,930
committers per month yeah so so you

00:32:28,430 --> 00:32:31,550
don't need a huge team to stay

00:32:29,930 --> 00:32:34,760
up-to-date with dependencies right it

00:32:31,550 --> 00:32:37,550
just takes focus and attention to that

00:32:34,760 --> 00:32:39,800
being a key development concern we also

00:32:37,550 --> 00:32:42,290
certainly saw large team exemplars and

00:32:39,800 --> 00:32:43,490
and really this is if you look at the

00:32:42,290 --> 00:32:45,140
open source foundation supported

00:32:43,490 --> 00:32:46,280
projects the Apache foundation Linux

00:32:45,140 --> 00:32:49,280
Foundation those sorts of things that

00:32:46,280 --> 00:32:50,690
really the you know the the bedrock of

00:32:49,280 --> 00:32:52,310
the open source community these large

00:32:50,690 --> 00:32:54,590
projects that are that are an important

00:32:52,310 --> 00:32:56,360
part of so much infrastructure a lot of

00:32:54,590 --> 00:32:58,550
those show up in the this large exemplar

00:32:56,360 --> 00:33:00,440
category at the upper right and they

00:32:58,550 --> 00:33:02,060
have of course exemplary MT tu they're

00:33:00,440 --> 00:33:03,800
also very likely to be Foundation

00:33:02,060 --> 00:33:05,960
supported as I said and they're on

00:33:03,800 --> 00:33:07,640
average 11 times more popular than than

00:33:05,960 --> 00:33:09,170
an average project from the rest of the

00:33:07,640 --> 00:33:10,250
population yeah and by the way this is

00:33:09,170 --> 00:33:12,260
like one of the sort of like kind of

00:33:10,250 --> 00:33:13,760
really surprising things for me was this

00:33:12,260 --> 00:33:15,230
when you do this kind of clustering that

00:33:13,760 --> 00:33:17,210
the thing that pops out is that you have

00:33:15,230 --> 00:33:18,740
this in my mind I sort of kind of called

00:33:17,210 --> 00:33:21,170
it the Oh the open source industrial

00:33:18,740 --> 00:33:22,880
complex these large projects that have

00:33:21,170 --> 00:33:24,230
on you know small army of developers

00:33:22,880 --> 00:33:26,390
working on it there's measured by 10

00:33:24,230 --> 00:33:28,090
plus unique developers on it's clearly

00:33:26,390 --> 00:33:30,530
part of their day job to work on this

00:33:28,090 --> 00:33:32,930
you know the fact that you know those

00:33:30,530 --> 00:33:34,940
exists you know confirmed what was so

00:33:32,930 --> 00:33:36,470
interesting is that being example I was

00:33:34,940 --> 00:33:38,630
not in a domain of these commercially

00:33:36,470 --> 00:33:39,440
supported or foundationally supported

00:33:38,630 --> 00:33:41,990
projects so in

00:33:39,440 --> 00:33:43,700
hindsight you know of course you know

00:33:41,990 --> 00:33:45,500
being exemple or doesn't depend on the

00:33:43,700 --> 00:33:46,639
size of team right it's about the values

00:33:45,500 --> 00:33:47,809
of the team right it's about the

00:33:46,639 --> 00:33:49,610
practical practice of what do they hold

00:33:47,809 --> 00:33:52,059
important and for the same reason that's

00:33:49,610 --> 00:33:53,870
why I probably the presence of a CI

00:33:52,059 --> 00:33:54,950
configuration file is not a marker

00:33:53,870 --> 00:33:56,779
performance it's not that you're using

00:33:54,950 --> 00:33:58,029
CI it's about how well you're using it

00:33:56,779 --> 00:34:00,200
and so that's really about values

00:33:58,029 --> 00:34:02,419
philosophy and so forth and as further

00:34:00,200 --> 00:34:05,419
evidence of the importance of values and

00:34:02,419 --> 00:34:07,789
philosophy we have this cluster in the

00:34:05,419 --> 00:34:09,889
bottom middle here features first right

00:34:07,789 --> 00:34:11,929
and the the this was a group of projects

00:34:09,889 --> 00:34:13,339
that actually releases updates

00:34:11,929 --> 00:34:14,899
frequently right so they're they're

00:34:13,339 --> 00:34:16,730
pushing out new code they're tagging

00:34:14,899 --> 00:34:18,859
versions and and and cutting new

00:34:16,730 --> 00:34:21,679
releases all the time so they have the

00:34:18,859 --> 00:34:22,940
bandwidth to stay very up-to-date but

00:34:21,679 --> 00:34:24,859
they're not right there they're ignoring

00:34:22,940 --> 00:34:25,429
the dependencies and sort of what's

00:34:24,859 --> 00:34:27,230
happening there

00:34:25,429 --> 00:34:28,790
and just focusing on features and

00:34:27,230 --> 00:34:31,399
changes to the it to their code itself

00:34:28,790 --> 00:34:33,169
right and so that's an example of you

00:34:31,399 --> 00:34:34,609
know it's not just about the practices

00:34:33,169 --> 00:34:35,960
it's what you hold is important as

00:34:34,609 --> 00:34:38,599
you're as you're doing the development

00:34:35,960 --> 00:34:39,950
practice right and so then there's

00:34:38,599 --> 00:34:41,179
there's the laggards cluster that I

00:34:39,950 --> 00:34:42,740
mentioned those are the red ones so you

00:34:41,179 --> 00:34:45,770
know I said red is bad that's the bottom

00:34:42,740 --> 00:34:48,260
20% with respect to update behavior and

00:34:45,770 --> 00:34:50,629
then there's this interesting cautious

00:34:48,260 --> 00:34:52,579
cluster that actually manages to stay

00:34:50,629 --> 00:34:54,889
within a couple of versions of the

00:34:52,579 --> 00:34:57,290
latest but they're you know for whatever

00:34:54,889 --> 00:34:58,910
reason not willing to sort of be on that

00:34:57,290 --> 00:35:00,290
bleeding edge they wanna the community

00:34:58,910 --> 00:35:02,089
to vet it a little bit before they move

00:35:00,290 --> 00:35:04,490
forward but they do pay attention to

00:35:02,089 --> 00:35:06,410
updates to their dependencies and and

00:35:04,490 --> 00:35:07,339
eventually adopt them right and this is

00:35:06,410 --> 00:35:08,630
to me that says that there's some

00:35:07,339 --> 00:35:10,010
disciplined approach there's some sort

00:35:08,630 --> 00:35:11,960
of target ban they want to be in terms

00:35:10,010 --> 00:35:14,599
of being up-to-date maybe that the

00:35:11,960 --> 00:35:18,140
latest but you know clothes the latest

00:35:14,599 --> 00:35:20,060
yeah so uh you know so one of you do

00:35:18,140 --> 00:35:24,730
these clusters right often you're kind

00:35:20,060 --> 00:35:27,140
of detecting differences you know in

00:35:24,730 --> 00:35:28,400
attributes of groups and then usually

00:35:27,140 --> 00:35:29,900
what you'd like to do then is really

00:35:28,400 --> 00:35:32,569
understand the psychographics of why do

00:35:29,900 --> 00:35:33,800
they act that way so clusters imagine if

00:35:32,569 --> 00:35:36,010
you have n attributes if you plot that

00:35:33,800 --> 00:35:38,540
in n space what clustering does is uh

00:35:36,010 --> 00:35:40,609
minimizes a distance between those

00:35:38,540 --> 00:35:41,990
points or anything can now label them so

00:35:40,609 --> 00:35:43,220
one of the things that uh we had an

00:35:41,990 --> 00:35:44,329
opportunity to even we were able to do

00:35:43,220 --> 00:35:46,160
this at the last minute you know thanks

00:35:44,329 --> 00:35:47,960
to the amazing team of snow type is

00:35:46,160 --> 00:35:49,970
we're able to put out a survey where we

00:35:47,960 --> 00:35:51,650
the goal was to actually try to uncover

00:35:49,970 --> 00:35:53,180
some of these psychographics or at least

00:35:51,650 --> 00:35:55,819
philosopher's philosophic

00:35:53,180 --> 00:35:58,700
decision of these groups and so the

00:35:55,819 --> 00:36:00,230
outcome measures that we asked was to

00:35:58,700 --> 00:36:02,450
what how paint on a scale of one to

00:36:00,230 --> 00:36:04,520
seven how painful is updating

00:36:02,450 --> 00:36:06,530
dependencies and how painful on a scale

00:36:04,520 --> 00:36:08,510
one to seven how painful is updating a

00:36:06,530 --> 00:36:11,000
vulnerable components and so let's focus

00:36:08,510 --> 00:36:13,160
on that so this is cluster that they

00:36:11,000 --> 00:36:15,319
said there were one-third is likely to

00:36:13,160 --> 00:36:17,809
consider updating dependencies painful

00:36:15,319 --> 00:36:19,490
and there were about a third less likely

00:36:17,809 --> 00:36:23,450
to say that updating vulnerable

00:36:19,490 --> 00:36:25,760
components are painful so this group

00:36:23,450 --> 00:36:28,339
when compared to the others they were

00:36:25,760 --> 00:36:29,809
ten times more likely to schedule

00:36:28,339 --> 00:36:31,640
updating dependencies as a part of their

00:36:29,809 --> 00:36:34,190
daily work in other words they're making

00:36:31,640 --> 00:36:36,290
updating dependencies a part of what

00:36:34,190 --> 00:36:39,650
they do you know whether it's every day

00:36:36,290 --> 00:36:41,869
or every week therefore six times more

00:36:39,650 --> 00:36:43,700
likely to strive to use the latest

00:36:41,869 --> 00:36:44,960
version or you know n - whatever right I

00:36:43,700 --> 00:36:46,640
don't want to be on latest I wanna be on

00:36:44,960 --> 00:36:49,579
n minus one or something right whatever

00:36:46,640 --> 00:36:52,609
that band is there are that's one of

00:36:49,579 --> 00:36:54,680
their desires there's some there 11

00:36:52,609 --> 00:36:57,440
times more likely to have some sort of

00:36:54,680 --> 00:36:58,940
process before adding a new dependency

00:36:57,440 --> 00:37:00,410
to their project in other words instead

00:36:58,940 --> 00:37:02,119
of adding things willy-nilly or on a

00:37:00,410 --> 00:37:04,160
whim they go through some process

00:37:02,119 --> 00:37:06,109
evaluate approve standardize etc 11

00:37:04,160 --> 00:37:07,809
times more likely they're ten times more

00:37:06,109 --> 00:37:10,819
likely to have a process to remove

00:37:07,809 --> 00:37:12,109
problematic dependencies and they're

00:37:10,819 --> 00:37:14,420
twelve times or unless they have some

00:37:12,109 --> 00:37:16,790
sort of automated tool to manage track

00:37:14,420 --> 00:37:17,599
the compliance towards those policies

00:37:16,790 --> 00:37:20,869
yeah

00:37:17,599 --> 00:37:22,460
and so those survey result more on those

00:37:20,869 --> 00:37:24,559
survey results and more detail on

00:37:22,460 --> 00:37:27,530
everything that we discussed is in the

00:37:24,559 --> 00:37:29,000
actual report so you know go download it

00:37:27,530 --> 00:37:30,559
if you'd like to receive a copy of the

00:37:29,000 --> 00:37:31,910
report actually my email address is

00:37:30,559 --> 00:37:33,890
there at the bottom if you just send an

00:37:31,910 --> 00:37:36,260
email right now my out of office

00:37:33,890 --> 00:37:38,780
autoresponders on and will reply with a

00:37:36,260 --> 00:37:40,520
link directly to the report so you know

00:37:38,780 --> 00:37:42,290
easy way to go get the report and dig

00:37:40,520 --> 00:37:43,700
down deeper and see all the other things

00:37:42,290 --> 00:37:45,290
that we found and to summarize I mean I

00:37:43,700 --> 00:37:46,549
think this is such a rewarding and

00:37:45,290 --> 00:37:47,720
interesting project because I think this

00:37:46,549 --> 00:37:50,480
is the first time that we've actually

00:37:47,720 --> 00:37:52,190
start see you know the behaviors that we

00:37:50,480 --> 00:37:54,579
suspect existed and it really

00:37:52,190 --> 00:37:56,660
illuminates some surprising insights so

00:37:54,579 --> 00:37:58,250
again thanks for the sonoran type team

00:37:56,660 --> 00:37:59,930
for giving us access to the data and

00:37:58,250 --> 00:38:03,559
assisting this project that does agree

00:37:59,930 --> 00:38:05,270
that they did so we had so much fun with

00:38:03,559 --> 00:38:06,860
year one of this we're already talking

00:38:05,270 --> 00:38:08,540
about year two and you know the

00:38:06,860 --> 00:38:10,100
additional analysis additional research

00:38:08,540 --> 00:38:14,090
we'd like to fold into the second

00:38:10,100 --> 00:38:15,440
version of this study and and so some of

00:38:14,090 --> 00:38:17,360
the things that we'd like to focus on

00:38:15,440 --> 00:38:18,830
are this idea of breaking changes right

00:38:17,360 --> 00:38:20,480
like art are there we just looked at

00:38:18,830 --> 00:38:21,920
updates in general but are some updates

00:38:20,480 --> 00:38:23,420
easier to adopt than others and could

00:38:21,920 --> 00:38:25,700
that underlie some of the behavior that

00:38:23,420 --> 00:38:27,110
we see looking at transitive

00:38:25,700 --> 00:38:29,900
dependencies so deeper into the

00:38:27,110 --> 00:38:31,730
dependency tree and identifying some of

00:38:29,900 --> 00:38:33,590
the leading indicators right can we get

00:38:31,730 --> 00:38:35,120
beyond correlation and start talking

00:38:33,590 --> 00:38:36,710
about causal factors that underlie some

00:38:35,120 --> 00:38:38,000
of these behaviors now I won't go into

00:38:36,710 --> 00:38:39,860
the bridge changes one there's this

00:38:38,000 --> 00:38:41,600
amazing paper that was written by a set

00:38:39,860 --> 00:38:44,720
of amazing brilliant Brazilian

00:38:41,600 --> 00:38:47,360
researchers they monitored 400 java

00:38:44,720 --> 00:38:50,210
libraries for 116 days and in that

00:38:47,360 --> 00:38:51,650
period they detected 282 breaking

00:38:50,210 --> 00:38:52,690
changes and so this should be

00:38:51,650 --> 00:38:54,980
jaw-dropping

00:38:52,690 --> 00:38:57,050
that means like if you wait long enough

00:38:54,980 --> 00:38:58,940
you will take a breaking change in Java

00:38:57,050 --> 00:39:00,410
and so this is frightening I think it

00:38:58,940 --> 00:39:02,150
resonates with our common experience on

00:39:00,410 --> 00:39:03,920
the next slide which is that you know

00:39:02,150 --> 00:39:05,060
the reason why we don't patch don't

00:39:03,920 --> 00:39:07,970
update our components is that every time

00:39:05,060 --> 00:39:10,280
we do everything breaks right and so how

00:39:07,970 --> 00:39:12,140
one of those our goals is one's a help

00:39:10,280 --> 00:39:13,970
but we're looking for is this is there

00:39:12,140 --> 00:39:15,290
theater on depend a bot you know that

00:39:13,970 --> 00:39:16,820
says what happens when that pull request

00:39:15,290 --> 00:39:19,280
is made what percentage of them are

00:39:16,820 --> 00:39:21,200
quickly and easily integrated and which

00:39:19,280 --> 00:39:23,270
ones are never integrated because you

00:39:21,200 --> 00:39:27,020
know everything blows up you know when

00:39:23,270 --> 00:39:28,310
you do we also think that you know even

00:39:27,020 --> 00:39:29,330
the notion of breaking changes there

00:39:28,310 --> 00:39:30,920
might be something fundamentally wrong

00:39:29,330 --> 00:39:32,030
with that right in other words in the

00:39:30,920 --> 00:39:34,940
closure community they've gotten almost

00:39:32,030 --> 00:39:36,500
12 years without a breaking change in

00:39:34,940 --> 00:39:37,580
the standard library right and so I

00:39:36,500 --> 00:39:39,530
think that's part of the functional

00:39:37,580 --> 00:39:41,540
programming orientation so is there a

00:39:39,530 --> 00:39:43,940
marker where we can find libraries are

00:39:41,540 --> 00:39:45,980
really good at not breaking on updates

00:39:43,940 --> 00:39:49,610
they add that's okay but you can't

00:39:45,980 --> 00:39:51,050
subtract right and we're also looking at

00:39:49,610 --> 00:39:52,760
mechanisms to find pull requests lead

00:39:51,050 --> 00:39:54,230
times and issue resolution times and

00:39:52,760 --> 00:39:56,360
thank you to the code gov team who

00:39:54,230 --> 00:39:58,070
presented yesterday I'll be finding you

00:39:56,360 --> 00:40:00,140
I love the fact that you've done this we

00:39:58,070 --> 00:40:04,760
were hoping to use that next year study

00:40:00,140 --> 00:40:06,830
as well yeah and then if anyone knows of

00:40:04,760 --> 00:40:08,120
an authoritative list of foundation

00:40:06,830 --> 00:40:09,500
supported open source projects like I

00:40:08,120 --> 00:40:11,600
said we developed a heuristic that

00:40:09,500 --> 00:40:13,640
matched the data that we looked at by

00:40:11,600 --> 00:40:15,590
hand very closely and extended it to the

00:40:13,640 --> 00:40:16,760
rest of the data set but getting a more

00:40:15,590 --> 00:40:18,320
accurate read on that I think would

00:40:16,760 --> 00:40:19,730
really benefit the study and so you know

00:40:18,320 --> 00:40:22,400
if you if you know of a source for that

00:40:19,730 --> 00:40:25,819
please let us know

00:40:22,400 --> 00:40:27,769
in terms of takeaways I think you know

00:40:25,819 --> 00:40:29,959
what one thing one thing to focus on is

00:40:27,769 --> 00:40:31,669
that integrating up updates into your

00:40:29,959 --> 00:40:33,289
daily work is super important the

00:40:31,669 --> 00:40:35,059
cultural practices around staying up to

00:40:33,289 --> 00:40:37,189
date are a big part of making this

00:40:35,059 --> 00:40:38,479
happen the second one is like it's not

00:40:37,189 --> 00:40:39,890
enough to clean up your house you got to

00:40:38,479 --> 00:40:42,169
help clean up other people's houses for

00:40:39,890 --> 00:40:43,819
all the dependencies you take for you to

00:40:42,169 --> 00:40:45,319
update their dependencies right put in

00:40:43,819 --> 00:40:46,759
pull requests I think is enormous ly

00:40:45,319 --> 00:40:47,630
helpful because we know that you know

00:40:46,759 --> 00:40:49,999
there's a lot of work to do that

00:40:47,630 --> 00:40:51,979
anything you can do to help helps yeah

00:40:49,999 --> 00:40:54,919
and then as we said don't make decisions

00:40:51,979 --> 00:40:57,140
based solely on popularity it was one of

00:40:54,919 --> 00:40:58,669
the few things actually that had no

00:40:57,140 --> 00:41:00,219
connection with other than some of the

00:40:58,669 --> 00:41:02,599
other metrics that we were looking at

00:41:00,219 --> 00:41:03,739
and then lastly we were specifically

00:41:02,599 --> 00:41:05,749
looking for hypotheses that you would

00:41:03,739 --> 00:41:07,759
like investigated specifically around

00:41:05,749 --> 00:41:09,259
why don't people update dependencies

00:41:07,759 --> 00:41:11,299
more often and what are the conditions

00:41:09,259 --> 00:41:14,029
that allow people to update quickly

00:41:11,299 --> 00:41:15,439
safely and painlessly and effectively

00:41:14,029 --> 00:41:16,759
right then those are things that we need

00:41:15,439 --> 00:41:17,989
to understand better so that we can

00:41:16,759 --> 00:41:19,999
enable that across the open source

00:41:17,989 --> 00:41:21,650
ecosystem yeah so come find us with your

00:41:19,999 --> 00:41:22,939
ideas let's talk more about what would

00:41:21,650 --> 00:41:24,499
be interesting to see in terms of

00:41:22,939 --> 00:41:26,150
analysis of the open source community

00:41:24,499 --> 00:41:26,760
and supply chain thank you very much

00:41:26,150 --> 00:41:30,170
thank you

00:41:26,760 --> 00:41:58,570
[Applause]

00:41:30,170 --> 00:41:58,570

YouTube URL: https://www.youtube.com/watch?v=YoWkuFzEYFs


