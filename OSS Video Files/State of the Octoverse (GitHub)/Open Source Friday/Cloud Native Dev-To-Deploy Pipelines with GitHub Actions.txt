Title: Cloud Native Dev-To-Deploy Pipelines with GitHub Actions
Publication date: 2021-06-01
Playlist: Open Source Friday
Description: 
	Cloud Foundry is joining us for Open Source Friday to show off using GitHub Actions to start automating your deployments to Kubernetes.

Join +bdougie and coder_blvck in learning how to get a Cloud Foundry instance connected to a GitHub repo.

https://www.cloudfoundry.org/event/how-to-setup-continuous-pipelines-to-depoloy-to-kubernetess-with-cloud-foundry/

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:00,000 --> 00:00:03,280
welcome to open source friday uh opens

00:00:02,560 --> 00:00:04,880
friday is

00:00:03,280 --> 00:00:06,560
it is of course friday but it's a day

00:00:04,880 --> 00:00:08,160
that we get to sit and chat with open

00:00:06,560 --> 00:00:08,720
source maintainers contributors of the

00:00:08,160 --> 00:00:10,240
like

00:00:08,720 --> 00:00:12,320
to talk about just that which is open

00:00:10,240 --> 00:00:14,480
source and today we got a special guest

00:00:12,320 --> 00:00:15,120
today which is shedrack coderblack on

00:00:14,480 --> 00:00:18,480
twitter

00:00:15,120 --> 00:00:21,520
uh welcome shedrag how you doing hey

00:00:18,480 --> 00:00:22,240
brian nice to be here hi everybody yeah

00:00:21,520 --> 00:00:24,240
so

00:00:22,240 --> 00:00:26,240
cloud foundry what uh what are we

00:00:24,240 --> 00:00:28,720
working with today

00:00:26,240 --> 00:00:29,519
yeah um so um class launcher is

00:00:28,720 --> 00:00:32,399
basically

00:00:29,519 --> 00:00:34,000
an open source platform service that's

00:00:32,399 --> 00:00:34,800
you basically installing your on your

00:00:34,000 --> 00:00:37,840
infrastructure

00:00:34,800 --> 00:00:40,320
so um think heroku but probably

00:00:37,840 --> 00:00:42,879
um open source and uh this time you have

00:00:40,320 --> 00:00:44,320
so much control over it and it's on your

00:00:42,879 --> 00:00:45,760
on whatever infrastructure of your

00:00:44,320 --> 00:00:46,960
choice so that's basically what

00:00:45,760 --> 00:00:49,280
cloudflare is

00:00:46,960 --> 00:00:50,480
it's a cloud native um open source um

00:00:49,280 --> 00:00:53,920
platform service

00:00:50,480 --> 00:00:55,920
yeah if you don't mind could you uh

00:00:53,920 --> 00:00:58,480
walk us through what you're working with

00:00:55,920 --> 00:01:01,440
and what cloud foundry has to offer

00:00:58,480 --> 00:01:02,000
yeah yeah yeah um so i'm basically going

00:01:01,440 --> 00:01:04,720
to be

00:01:02,000 --> 00:01:06,560
um deploying a simple application so

00:01:04,720 --> 00:01:10,000
this application is from

00:01:06,560 --> 00:01:13,040
um it's from one of

00:01:10,000 --> 00:01:14,320
mdm to mozilla document um network

00:01:13,040 --> 00:01:16,479
so i'm going to be playing one of their

00:01:14,320 --> 00:01:18,320
sample tutorials on cloud foundry

00:01:16,479 --> 00:01:20,400
um with github actions so we're

00:01:18,320 --> 00:01:21,840
basically going to automate the whole

00:01:20,400 --> 00:01:23,840
deployment process so that whenever we

00:01:21,840 --> 00:01:25,600
make a push to that particular repo

00:01:23,840 --> 00:01:27,520
um it triggers a github action and it

00:01:25,600 --> 00:01:29,600
deploys the application superintendents

00:01:27,520 --> 00:01:30,720
through um cloud 400 now this is

00:01:29,600 --> 00:01:32,240
possible

00:01:30,720 --> 00:01:33,840
because of the cloud funding for

00:01:32,240 --> 00:01:36,640
kubernetes projects which is

00:01:33,840 --> 00:01:37,840
um basically bringing the cloud from the

00:01:36,640 --> 00:01:39,520
developer experience

00:01:37,840 --> 00:01:40,960
to kubernetes it's basically an

00:01:39,520 --> 00:01:42,240
abstraction over the cloud foundry on

00:01:40,960 --> 00:01:43,840
provide kubernetes

00:01:42,240 --> 00:01:46,000
and making it easier for developers to

00:01:43,840 --> 00:01:46,880
know the to for developers to deploy

00:01:46,000 --> 00:01:49,040
stuff to

00:01:46,880 --> 00:01:51,360
kubernetes so that's basically what i'm

00:01:49,040 --> 00:01:54,799
going to be showing today and um

00:01:51,360 --> 00:01:55,920
currently i have um my cloud foundry for

00:01:54,799 --> 00:01:59,119
kubernetes

00:01:55,920 --> 00:02:01,439
cluster deployed on google cloud um

00:01:59,119 --> 00:02:03,200
so it's basically has some setting um

00:02:01,439 --> 00:02:03,920
requirements so i think if phone node

00:02:03,200 --> 00:02:06,960
cluster

00:02:03,920 --> 00:02:08,479
um eight gig of ram um etc so i

00:02:06,960 --> 00:02:11,599
currently have that installed

00:02:08,479 --> 00:02:13,280
and um yeah so let's just

00:02:11,599 --> 00:02:14,720
get started um i don't know if you can

00:02:13,280 --> 00:02:18,000
see my screen yep

00:02:14,720 --> 00:02:21,120
yeah we're definitely yeah as well okay

00:02:18,000 --> 00:02:24,400
so you can see my screen yeah okay so

00:02:21,120 --> 00:02:26,959
um so basic currently i have um

00:02:24,400 --> 00:02:28,480
my cloud foundry for um kubernetes

00:02:26,959 --> 00:02:30,560
cluster installed on

00:02:28,480 --> 00:02:31,760
google cloud and i've also connected the

00:02:30,560 --> 00:02:33,360
github container

00:02:31,760 --> 00:02:35,440
registry as my preferred container

00:02:33,360 --> 00:02:37,519
registry you can also use docker if you

00:02:35,440 --> 00:02:38,800
want but for this particular demo i am

00:02:37,519 --> 00:02:40,959
using um

00:02:38,800 --> 00:02:42,640
on the github container registry so i'm

00:02:40,959 --> 00:02:46,080
just going to log into that cluster

00:02:42,640 --> 00:02:48,160
um so i've also connected so there's an

00:02:46,080 --> 00:02:50,480
api endpoint that you can connect to

00:02:48,160 --> 00:02:52,959
from um it's basically um going to be

00:02:50,480 --> 00:02:54,480
generated for you whenever you um deploy

00:02:52,959 --> 00:02:56,160
whatever infrastructure that you

00:02:54,480 --> 00:02:57,920
desire to use and for this demo i'm

00:02:56,160 --> 00:03:00,560
using the google cloud

00:02:57,920 --> 00:03:01,040
and um the gk generally yeah i was going

00:03:00,560 --> 00:03:03,360
to ask

00:03:01,040 --> 00:03:04,480
if um if this was cloud foundry was

00:03:03,360 --> 00:03:06,159
hosting

00:03:04,480 --> 00:03:07,920
your stuff in the cloud for you or but

00:03:06,159 --> 00:03:10,959
you actually mentioned

00:03:07,920 --> 00:03:12,239
um google cloud is uh you're using

00:03:10,959 --> 00:03:13,840
google cloud under the hood to be able

00:03:12,239 --> 00:03:16,000
to have this hosted

00:03:13,840 --> 00:03:16,879
yeah yeah so um you can install whatever

00:03:16,000 --> 00:03:18,800
infrastructure

00:03:16,879 --> 00:03:20,159
that you want we also have our um

00:03:18,800 --> 00:03:22,319
specific um

00:03:20,159 --> 00:03:24,080
we have a bunch of distributors um

00:03:22,319 --> 00:03:26,000
distributions generally that are using

00:03:24,080 --> 00:03:27,920
cloud foundry um under the hood so yours

00:03:26,000 --> 00:03:30,319
there's ibm cloud foundry there's on

00:03:27,920 --> 00:03:32,000
susa there's also um vmware tanzu

00:03:30,319 --> 00:03:34,480
so if you want to like deploy on

00:03:32,000 --> 00:03:36,720
something that kavanji has to do with

00:03:34,480 --> 00:03:38,959
um generally without you know going to

00:03:36,720 --> 00:03:40,239
digitization google cloud etc so you can

00:03:38,959 --> 00:03:43,840
just decide to use those

00:03:40,239 --> 00:03:45,440
um over um distributions

00:03:43,840 --> 00:03:47,120
okay excellent yeah because i i've got

00:03:45,440 --> 00:03:50,319
some uh some things i deploy

00:03:47,120 --> 00:03:52,640
to azure and uh i'm not using kubernetes

00:03:50,319 --> 00:03:55,599
i'm actually deploying to one

00:03:52,640 --> 00:03:56,799
one cloud uh and one um one server but

00:03:55,599 --> 00:03:58,799
i'd love to have that

00:03:56,799 --> 00:04:00,640
deployed to multiple servers for the

00:03:58,799 --> 00:04:04,239
benefit of the cdn

00:04:00,640 --> 00:04:06,720
yeah yeah sure you can do that um so

00:04:04,239 --> 00:04:07,439
i currently have um this application

00:04:06,720 --> 00:04:10,080
running

00:04:07,439 --> 00:04:12,080
i'm just going to show my um share my um

00:04:10,080 --> 00:04:13,519
vs code so can you see my vx code yep

00:04:12,080 --> 00:04:15,200
yeah we got that

00:04:13,519 --> 00:04:16,959
yeah yeah so it's the purchase is really

00:04:15,200 --> 00:04:18,239
really simple that's the beauty of like

00:04:16,959 --> 00:04:19,120
having car foundry on your

00:04:18,239 --> 00:04:20,639
infrastructure

00:04:19,120 --> 00:04:22,639
using california in general it's really

00:04:20,639 --> 00:04:24,720
really simple um so you

00:04:22,639 --> 00:04:26,560
the basically the way it's to basically

00:04:24,720 --> 00:04:28,240
create the way you're creating random

00:04:26,560 --> 00:04:31,280
action a random github action

00:04:28,240 --> 00:04:32,880
so um the github profile um on folder

00:04:31,280 --> 00:04:33,680
then inside the workflows folder then do

00:04:32,880 --> 00:04:36,320
a main dot

00:04:33,680 --> 00:04:37,360
yaml now the name of this action is

00:04:36,320 --> 00:04:40,320
deploy using

00:04:37,360 --> 00:04:40,720
um actions then you know on push branch

00:04:40,320 --> 00:04:43,120
these

00:04:40,720 --> 00:04:44,080
nodes are all like um the gate of

00:04:43,120 --> 00:04:45,919
actions lingo

00:04:44,080 --> 00:04:47,680
now the job we just have one job which

00:04:45,919 --> 00:04:50,160
is um we need the

00:04:47,680 --> 00:04:51,600
action to always um to trig so basically

00:04:50,160 --> 00:04:52,160
deployment should trigger whenever we

00:04:51,600 --> 00:04:55,199
make it push

00:04:52,160 --> 00:04:57,600
that part to the repo that um this

00:04:55,199 --> 00:05:00,639
project is on so um we're using of

00:04:57,600 --> 00:05:03,840
course ubuntu as our preferred um system

00:05:00,639 --> 00:05:05,680
now this particular action uses is he

00:05:03,840 --> 00:05:08,000
already published github action which

00:05:05,680 --> 00:05:10,320
was created by my um

00:05:08,000 --> 00:05:12,000
colleague so um this is going to be

00:05:10,320 --> 00:05:13,120
called the cli action we're going to be

00:05:12,000 --> 00:05:15,360
using that you can

00:05:13,120 --> 00:05:16,880
you can decide to clone it and use it

00:05:15,360 --> 00:05:18,000
yourself or you can decide to just

00:05:16,880 --> 00:05:19,680
create

00:05:18,000 --> 00:05:21,120
copy and paste it somewhere and use it

00:05:19,680 --> 00:05:23,360
so that's really really um

00:05:21,120 --> 00:05:24,160
there's an mit line sense project so you

00:05:23,360 --> 00:05:27,039
really don't

00:05:24,160 --> 00:05:28,720
there's no um privacy or whatever or

00:05:27,039 --> 00:05:32,479
intellectual property on it

00:05:28,720 --> 00:05:34,560
and um so it's simple the action has

00:05:32,479 --> 00:05:36,400
um to use this action you just need to

00:05:34,560 --> 00:05:37,280
provide certain details like a bunch of

00:05:36,400 --> 00:05:39,759
details so

00:05:37,280 --> 00:05:40,880
the cf api which is the api endpoint

00:05:39,759 --> 00:05:43,840
that i showed you

00:05:40,880 --> 00:05:44,639
um oden sorry about that so i showed you

00:05:43,840 --> 00:05:46,639
here

00:05:44,639 --> 00:05:48,080
so some this is what we are using but

00:05:46,639 --> 00:05:49,919
this is not exactly what i'm using

00:05:48,080 --> 00:05:53,520
because i changed it before the

00:05:49,919 --> 00:05:55,759
demo um so

00:05:53,520 --> 00:05:56,639
of course we cannot specify setting

00:05:55,759 --> 00:05:58,800
secrets on

00:05:56,639 --> 00:06:00,240
our foot on our project because of

00:05:58,800 --> 00:06:04,240
security reasons

00:06:00,240 --> 00:06:06,800
so um in so of course the cf api

00:06:04,240 --> 00:06:08,319
like i specified in my engineer in the

00:06:06,800 --> 00:06:10,639
secrets in my github

00:06:08,319 --> 00:06:12,800
project then the username then the

00:06:10,639 --> 00:06:15,919
password then these organizations

00:06:12,800 --> 00:06:17,680
are basically um um um

00:06:15,919 --> 00:06:19,600
ruby's access control protocols like

00:06:17,680 --> 00:06:22,400
just how it sees in kubernetes but as

00:06:19,600 --> 00:06:24,319
sort of like different so we have orgs

00:06:22,400 --> 00:06:25,680
organizations and species just like the

00:06:24,319 --> 00:06:28,160
way um um

00:06:25,680 --> 00:06:30,720
kubernetes regulators have like rules

00:06:28,160 --> 00:06:32,960
and name species etc so that's how

00:06:30,720 --> 00:06:34,720
it is here so the organization i have

00:06:32,960 --> 00:06:37,280
here is of course sample organization

00:06:34,720 --> 00:06:37,840
and space which is specifically for just

00:06:37,280 --> 00:06:41,919
me

00:06:37,840 --> 00:06:44,400
um is um dev then um the command

00:06:41,919 --> 00:06:45,120
so what's basically what cloud foundry

00:06:44,400 --> 00:06:47,199
offers use

00:06:45,120 --> 00:06:49,039
is you push you can deploy to kubernetes

00:06:47,199 --> 00:06:49,680
with a single command which is the cf

00:06:49,039 --> 00:06:52,720
push

00:06:49,680 --> 00:06:54,560
then your application name so

00:06:52,720 --> 00:06:56,560
the command here would push our

00:06:54,560 --> 00:06:58,000
application to a criteria cluster and

00:06:56,560 --> 00:07:00,639
deploy it on kubernetes

00:06:58,000 --> 00:07:02,160
and as easy as that so this is basically

00:07:00,639 --> 00:07:04,560
every single thing you need to do to

00:07:02,160 --> 00:07:06,800
actually create a kit of action that can

00:07:04,560 --> 00:07:08,479
help you to deploy your stuff to your

00:07:06,800 --> 00:07:11,280
project to cloud foundry as

00:07:08,479 --> 00:07:13,280
easy as it is that is really that easy

00:07:11,280 --> 00:07:15,520
so um let me just see if i can

00:07:13,280 --> 00:07:17,520
trigger a deployment so i'm just going

00:07:15,520 --> 00:07:19,120
to you know make a simple change to this

00:07:17,520 --> 00:07:21,280
rep um to this project

00:07:19,120 --> 00:07:23,120
so um for the benefits of the viewers

00:07:21,280 --> 00:07:25,680
this is actually a project from

00:07:23,120 --> 00:07:27,440
the mod for mozilla it's um it's been

00:07:25,680 --> 00:07:29,120
one of their tutorials and i just cloned

00:07:27,440 --> 00:07:30,000
it and deployed this cloud foundry it's

00:07:29,120 --> 00:07:32,160
that simple

00:07:30,000 --> 00:07:33,120
i don't know if i can show how the um it

00:07:32,160 --> 00:07:34,639
looks like so

00:07:33,120 --> 00:07:36,240
this is how it's just basically a

00:07:34,639 --> 00:07:37,680
library it's a local library view to

00:07:36,240 --> 00:07:40,400
express a node.js

00:07:37,680 --> 00:07:42,080
so you can see all books you can see um

00:07:40,400 --> 00:07:44,240
authors you can see

00:07:42,080 --> 00:07:46,319
um general you can also add etc so

00:07:44,240 --> 00:07:50,319
that's how the application looks like

00:07:46,319 --> 00:07:52,720
now if i come here if i come to my

00:07:50,319 --> 00:07:53,520
um get my ps gonna make a simple change

00:07:52,720 --> 00:07:55,280
to

00:07:53,520 --> 00:07:56,560
maybe change maybe add a new color or

00:07:55,280 --> 00:07:59,919
something so

00:07:56,560 --> 00:08:03,039
um let's come to views and maybe do

00:07:59,919 --> 00:08:06,400
something really really simple

00:08:03,039 --> 00:08:10,240
um so let's just say let's give this

00:08:06,400 --> 00:08:12,800
a h3 tag let's see if it's a history tag

00:08:10,240 --> 00:08:14,400
then save it now whenever we push this

00:08:12,800 --> 00:08:16,160
to github it should

00:08:14,400 --> 00:08:17,680
according to what we specify in our

00:08:16,160 --> 00:08:19,759
action it should

00:08:17,680 --> 00:08:20,720
automatically start the deployments to

00:08:19,759 --> 00:08:23,840
um

00:08:20,720 --> 00:08:24,240
to cloud foundry so if i come here and i

00:08:23,840 --> 00:08:27,280
do

00:08:24,240 --> 00:08:29,039
my gate status and see okay this this

00:08:27,280 --> 00:08:31,039
um what this has been modified according

00:08:29,039 --> 00:08:34,240
to gates then i do a

00:08:31,039 --> 00:08:37,279
git add then i do a decommit

00:08:34,240 --> 00:08:38,959
then let's say updates

00:08:37,279 --> 00:08:40,320
let's just call this an update name is

00:08:38,959 --> 00:08:43,440
an update then we do

00:08:40,320 --> 00:08:46,160
um get push

00:08:43,440 --> 00:08:48,320
so when we do a good push this should um

00:08:46,160 --> 00:08:50,800
so these are like aliases i created to

00:08:48,320 --> 00:08:52,240
oh my machine

00:08:50,800 --> 00:08:54,320
when i do a git push it should

00:08:52,240 --> 00:08:58,480
automatically study deployments

00:08:54,320 --> 00:09:01,279
fingers crossed so if i go to my github

00:08:58,480 --> 00:09:01,839
um if i go to github if i go to github

00:09:01,279 --> 00:09:04,399
here

00:09:01,839 --> 00:09:04,880
i should see um one of the actions

00:09:04,399 --> 00:09:07,680
triggered

00:09:04,880 --> 00:09:09,519
on the actions yeah yeah yeah so as you

00:09:07,680 --> 00:09:11,440
can see here

00:09:09,519 --> 00:09:12,800
it has automatically triggered the the

00:09:11,440 --> 00:09:14,399
action so let's check

00:09:12,800 --> 00:09:16,399
what the action is doing let's walk

00:09:14,399 --> 00:09:17,360
through that let's see um the whole

00:09:16,399 --> 00:09:19,120
process

00:09:17,360 --> 00:09:21,519
so the whole the action is actually

00:09:19,120 --> 00:09:25,360
three jobs and four jobs

00:09:21,519 --> 00:09:27,440
so it basically uses um

00:09:25,360 --> 00:09:28,480
i would explain this as when it finishes

00:09:27,440 --> 00:09:31,200
running and

00:09:28,480 --> 00:09:33,200
so it basically uses the effect stats

00:09:31,200 --> 00:09:35,360
with installing the cloud foundry on cli

00:09:33,200 --> 00:09:36,880
based on what's um the action that

00:09:35,360 --> 00:09:39,200
my colleague has created that we're

00:09:36,880 --> 00:09:41,040
using then of course checks out

00:09:39,200 --> 00:09:43,120
basically makes the project available on

00:09:41,040 --> 00:09:45,279
this um

00:09:43,120 --> 00:09:46,320
on this environment then we do a safe

00:09:45,279 --> 00:09:48,240
push so

00:09:46,320 --> 00:09:50,080
it's that simple so the first thing the

00:09:48,240 --> 00:09:51,120
action does is set up the job which is

00:09:50,080 --> 00:09:54,320
like

00:09:51,120 --> 00:09:56,560
same thing for all case of actions then

00:09:54,320 --> 00:09:57,760
build ram demos which is basically

00:09:56,560 --> 00:10:00,640
creating a container

00:09:57,760 --> 00:10:02,160
based on the docker file in that um

00:10:00,640 --> 00:10:03,120
action that i'm using that my colleague

00:10:02,160 --> 00:10:05,760
has created

00:10:03,120 --> 00:10:06,240
um that you can also use so it's just

00:10:05,760 --> 00:10:08,079
like a

00:10:06,240 --> 00:10:09,760
docker file and doing exactly what the

00:10:08,079 --> 00:10:12,160
docker file has like specified

00:10:09,760 --> 00:10:13,360
which is basically to install um the

00:10:12,160 --> 00:10:15,360
cloud foundry cli

00:10:13,360 --> 00:10:16,959
version 7 to make it available here so

00:10:15,360 --> 00:10:18,480
that we can do a safe push

00:10:16,959 --> 00:10:20,480
that's why we need on the cliff and

00:10:18,480 --> 00:10:24,160
cellar in this particular environment

00:10:20,480 --> 00:10:24,480
so it basically does that then the next

00:10:24,160 --> 00:10:26,640
thing

00:10:24,480 --> 00:10:28,399
of course is to check out so make this

00:10:26,640 --> 00:10:30,160
repository available for

00:10:28,399 --> 00:10:32,320
you know for reading and writing in this

00:10:30,160 --> 00:10:36,240
particular environment then

00:10:32,320 --> 00:10:38,720
um next would be to now you see as you

00:10:36,240 --> 00:10:41,040
can see our job is completed already now

00:10:38,720 --> 00:10:42,640
i don't know it took a minute and 3

00:10:41,040 --> 00:10:43,360
seconds to you know deploy the whole

00:10:42,640 --> 00:10:45,279
thing to

00:10:43,360 --> 00:10:47,600
check out for the entire job to run and

00:10:45,279 --> 00:10:49,839
deploy to um to cloud foundry so yeah

00:10:47,600 --> 00:10:52,399
um that's how fast it can actually do um

00:10:49,839 --> 00:10:54,880
deploy any actually any application

00:10:52,399 --> 00:10:56,880
if i'm not mistaken any application so

00:10:54,880 --> 00:11:00,079
um the next thing is to look at how

00:10:56,880 --> 00:11:01,600
what this particular um action is doing

00:11:00,079 --> 00:11:02,959
the action where you are using our

00:11:01,600 --> 00:11:06,000
project what it's doing

00:11:02,959 --> 00:11:08,320
so the first thing it does here is to

00:11:06,000 --> 00:11:09,360
um export all this all these things

00:11:08,320 --> 00:11:12,240
we've specified

00:11:09,360 --> 00:11:12,959
in our github um in our github secrets

00:11:12,240 --> 00:11:16,399
it basically

00:11:12,959 --> 00:11:18,160
matches its b2 um um to the command you

00:11:16,399 --> 00:11:20,079
specifier so the cf api

00:11:18,160 --> 00:11:21,760
it checks and gets it from the cf

00:11:20,079 --> 00:11:24,640
secrets um

00:11:21,760 --> 00:11:25,040
that we specified the username the org

00:11:24,640 --> 00:11:28,320
the

00:11:25,040 --> 00:11:30,480
um space etc now the command so

00:11:28,320 --> 00:11:32,000
let's walk through the whole process so

00:11:30,480 --> 00:11:33,760
the next the thing the first thing it

00:11:32,000 --> 00:11:34,399
does here is to connect to the api

00:11:33,760 --> 00:11:35,920
endpoints

00:11:34,399 --> 00:11:37,279
so it can have access to the cluster

00:11:35,920 --> 00:11:39,680
we've created which is really really

00:11:37,279 --> 00:11:43,040
important it cannot do anything if

00:11:39,680 --> 00:11:44,000
if this particular step fails the entire

00:11:43,040 --> 00:11:46,480
job will fail

00:11:44,000 --> 00:11:47,680
so it has to connect the api endpoint so

00:11:46,480 --> 00:11:49,279
you can have access to the class that

00:11:47,680 --> 00:11:52,240
we've installed on gke

00:11:49,279 --> 00:11:53,839
now the next thing would it would be is

00:11:52,240 --> 00:11:57,040
to package the files

00:11:53,839 --> 00:11:59,760
now so cloud foundry um has a way of

00:11:57,040 --> 00:12:00,720
detecting the type of application you

00:11:59,760 --> 00:12:02,800
deployed

00:12:00,720 --> 00:12:04,160
using what we call build packs so

00:12:02,800 --> 00:12:07,200
buildback's basically

00:12:04,160 --> 00:12:10,320
created an application runtime for your

00:12:07,200 --> 00:12:11,519
project so whatever um dependencies you

00:12:10,320 --> 00:12:13,440
may need whatever

00:12:11,519 --> 00:12:15,839
um different environments you may need

00:12:13,440 --> 00:12:18,079
to deploy for um the dependencies of

00:12:15,839 --> 00:12:19,680
your application to install successfully

00:12:18,079 --> 00:12:23,200
cloud foundry helps you with that so for

00:12:19,680 --> 00:12:24,880
this project um a node.js project

00:12:23,200 --> 00:12:26,880
you do not need to upload your node

00:12:24,880 --> 00:12:27,200
modules folder to cloud foundry it does

00:12:26,880 --> 00:12:29,040
not

00:12:27,200 --> 00:12:30,399
need that yeah it does no need that's

00:12:29,040 --> 00:12:33,680
why your deployment is fast

00:12:30,399 --> 00:12:34,320
so immediately it um your you do a cf

00:12:33,680 --> 00:12:35,920
push

00:12:34,320 --> 00:12:37,519
and the butte pack is triggered why

00:12:35,920 --> 00:12:39,519
which is the node.js built back

00:12:37,519 --> 00:12:41,120
it then checks for setting files for

00:12:39,519 --> 00:12:43,920
example if you use yarn

00:12:41,120 --> 00:12:45,680
it checks for um your yarn lock on file

00:12:43,920 --> 00:12:46,959
and it also checks for your package.json

00:12:45,680 --> 00:12:47,839
these are the two things it needs to

00:12:46,959 --> 00:12:49,360
complete your

00:12:47,839 --> 00:12:51,040
entire build for the entire view to

00:12:49,360 --> 00:12:53,519
happen if that's the

00:12:51,040 --> 00:12:54,399
uh cloud foundry side not in the docker

00:12:53,519 --> 00:12:56,000
yes

00:12:54,399 --> 00:12:58,320
yeah the cloud foundry site this is done

00:12:56,000 --> 00:13:00,720
by the cloudfront which build packs

00:12:58,320 --> 00:13:02,639
yeah so um when he does them does

00:13:00,720 --> 00:13:04,160
darwinians found those particular when

00:13:02,639 --> 00:13:06,240
crowdfunders found with the help of

00:13:04,160 --> 00:13:06,880
buick has found those two those two

00:13:06,240 --> 00:13:09,839
files

00:13:06,880 --> 00:13:11,440
it then begins to you know specify

00:13:09,839 --> 00:13:12,480
certain things that are needed for it to

00:13:11,440 --> 00:13:15,440
run for example

00:13:12,480 --> 00:13:17,200
it installs um npm um uses the mp and

00:13:15,440 --> 00:13:19,120
built packages also on nbn build pack

00:13:17,200 --> 00:13:21,200
and a young duke pack under the node.js

00:13:19,120 --> 00:13:23,040
buildback so if you use the and uses the

00:13:21,200 --> 00:13:24,160
and buildback if you use npm uses the

00:13:23,040 --> 00:13:26,560
npm build pack

00:13:24,160 --> 00:13:28,160
and begins to upgrade commands do like

00:13:26,560 --> 00:13:31,680
wrong commands like npm brown

00:13:28,160 --> 00:13:32,800
um dev npm start npm build etc just so

00:13:31,680 --> 00:13:33,920
based on what is in your packet

00:13:32,800 --> 00:13:36,800
logistics and that's why all these

00:13:33,920 --> 00:13:39,360
checks for your package using some file

00:13:36,800 --> 00:13:40,000
now the next thing you to do here is to

00:13:39,360 --> 00:13:41,360
upload

00:13:40,000 --> 00:13:43,680
package your file and upload it to the

00:13:41,360 --> 00:13:45,839
cloudflare on the api for deployments

00:13:43,680 --> 00:13:47,440
now this is where the github container

00:13:45,839 --> 00:13:49,519
registry comes into place

00:13:47,440 --> 00:13:51,120
so i if you've used the github container

00:13:49,519 --> 00:13:52,079
registry you would know that this

00:13:51,120 --> 00:13:54,959
particular

00:13:52,079 --> 00:13:56,079
um url here belongs to the github

00:13:54,959 --> 00:13:59,120
container registry

00:13:56,079 --> 00:14:01,519
so it basically pulls every single thing

00:13:59,120 --> 00:14:03,199
needed uh in the github container from

00:14:01,519 --> 00:14:04,800
the github container registry and uh

00:14:03,199 --> 00:14:05,120
makes it available in this environment

00:14:04,800 --> 00:14:07,440
so

00:14:05,120 --> 00:14:09,120
we don't need to do um we just need to

00:14:07,440 --> 00:14:10,160
configure the github container registry

00:14:09,120 --> 00:14:13,199
for this and

00:14:10,160 --> 00:14:13,920
um it would happen so yeah i can real

00:14:13,199 --> 00:14:15,360
quick

00:14:13,920 --> 00:14:17,440
that's when i explained that the github

00:14:15,360 --> 00:14:20,320
container registry is a it's a feature

00:14:17,440 --> 00:14:20,959
on github that uh we've shipped uh in

00:14:20,320 --> 00:14:23,120
the last

00:14:20,959 --> 00:14:24,480
year or so and uh i just wanted to point

00:14:23,120 --> 00:14:26,079
out that folks if you

00:14:24,480 --> 00:14:28,480
are using containers or building

00:14:26,079 --> 00:14:31,120
packages it isn't a future for you that

00:14:28,480 --> 00:14:32,880
we'd love your feedback yeah yeah it's a

00:14:31,120 --> 00:14:34,399
it's a really really um great step for

00:14:32,880 --> 00:14:36,000
github to be honest and

00:14:34,399 --> 00:14:37,519
um it's been really really easy to use

00:14:36,000 --> 00:14:38,320
and it's really really easy to get fired

00:14:37,519 --> 00:14:41,519
a bit

00:14:38,320 --> 00:14:43,199
so um i have specified this so for this

00:14:41,519 --> 00:14:45,120
particular situation i could decide to

00:14:43,199 --> 00:14:47,600
use docker container registry

00:14:45,120 --> 00:14:48,959
or but i'm specifically using github and

00:14:47,600 --> 00:14:50,480
this particular thing can be set

00:14:48,959 --> 00:14:53,279
whenever you're installing

00:14:50,480 --> 00:14:53,680
um um whenever you're installing stuff

00:14:53,279 --> 00:14:55,279
okay

00:14:53,680 --> 00:14:57,120
that's covered for kubernetes or any

00:14:55,279 --> 00:14:58,320
infrastructure of your choice if i if

00:14:57,120 --> 00:15:01,680
this time i would show

00:14:58,320 --> 00:15:04,399
a a file where you see how i specified

00:15:01,680 --> 00:15:06,399
you know this particular um where i

00:15:04,399 --> 00:15:07,600
specify okay use the github container

00:15:06,399 --> 00:15:10,000
registry here

00:15:07,600 --> 00:15:11,360
so if there's time so um the next thing

00:15:10,000 --> 00:15:14,560
it does is

00:15:11,360 --> 00:15:16,399
since it has discovered the package.json

00:15:14,560 --> 00:15:17,040
file and maybe my package log deduction

00:15:16,399 --> 00:15:19,440
file

00:15:17,040 --> 00:15:21,279
it has now instructed the built pack

00:15:19,440 --> 00:15:22,880
okay this is the build packs we want to

00:15:21,279 --> 00:15:25,680
use

00:15:22,880 --> 00:15:27,519
so the node engine build party um the

00:15:25,680 --> 00:15:28,880
npm installed you can npm stack because

00:15:27,519 --> 00:15:30,800
you are using npm

00:15:28,880 --> 00:15:32,160
so the next thing you need to do now is

00:15:30,800 --> 00:15:34,160
to start the whole process

00:15:32,160 --> 00:15:36,720
the next thing after starting the

00:15:34,160 --> 00:15:37,279
process it detects our node version now

00:15:36,720 --> 00:15:39,279
you

00:15:37,279 --> 00:15:41,040
nodes version is very very important

00:15:39,279 --> 00:15:42,560
because it's the certain

00:15:41,040 --> 00:15:43,920
types of features are not available in a

00:15:42,560 --> 00:15:45,279
particular node version that's available

00:15:43,920 --> 00:15:48,320
in this node version so

00:15:45,279 --> 00:15:50,000
if you have specific needs for

00:15:48,320 --> 00:15:52,639
a particular node version you need to

00:15:50,000 --> 00:15:54,639
specify your engine the node engine in

00:15:52,639 --> 00:15:55,839
your package.json file so cloud1 you can

00:15:54,639 --> 00:15:57,600
use that notation

00:15:55,839 --> 00:16:00,000
otherwise crowdfunding will use the

00:15:57,600 --> 00:16:00,560
defaults um its default node engine

00:16:00,000 --> 00:16:02,880
which is

00:16:00,560 --> 00:16:04,480
probably the latest most of the time so

00:16:02,880 --> 00:16:06,800
we don't really need to see this

00:16:04,480 --> 00:16:09,199
most of the time now as you can see here

00:16:06,800 --> 00:16:11,920
the build is successful

00:16:09,199 --> 00:16:13,680
after the building successful the

00:16:11,920 --> 00:16:16,079
command specified here

00:16:13,680 --> 00:16:17,120
will now be used to start our

00:16:16,079 --> 00:16:19,120
application which is

00:16:17,120 --> 00:16:20,880
what the fundraiser is doing here now

00:16:19,120 --> 00:16:23,040
waiting for app express

00:16:20,880 --> 00:16:25,279
library the local library tutorial to

00:16:23,040 --> 00:16:26,240
start now the instances here are

00:16:25,279 --> 00:16:28,880
starting

00:16:26,240 --> 00:16:29,600
then immediately the application starts

00:16:28,880 --> 00:16:33,199
this

00:16:29,600 --> 00:16:35,199
all of this here becomes available

00:16:33,199 --> 00:16:36,240
to for you to see so the name of our

00:16:35,199 --> 00:16:39,120
application

00:16:36,240 --> 00:16:40,560
the requested um states which is started

00:16:39,120 --> 00:16:42,959
the um

00:16:40,560 --> 00:16:44,240
um this isolation segment you do not

00:16:42,959 --> 00:16:45,600
necessarily need to fill it

00:16:44,240 --> 00:16:47,120
then the routes here now this route

00:16:45,600 --> 00:16:48,399
system is very very important because

00:16:47,120 --> 00:16:50,639
this is where we can find our

00:16:48,399 --> 00:16:51,440
application running live on on the

00:16:50,639 --> 00:16:53,440
internet so

00:16:51,440 --> 00:16:55,920
we need a link to see a preview of

00:16:53,440 --> 00:16:57,600
application this is

00:16:55,920 --> 00:16:59,839
where we can find it now if you've

00:16:57,600 --> 00:17:01,920
noticed this here

00:16:59,839 --> 00:17:03,519
is our api endpoint so this is the api

00:17:01,920 --> 00:17:04,959
endpoint we connected to

00:17:03,519 --> 00:17:06,559
when we're like starting the whole

00:17:04,959 --> 00:17:08,640
process so

00:17:06,559 --> 00:17:10,480
the link itself is it's generated by is

00:17:08,640 --> 00:17:10,959
this also generated by google cloud and

00:17:10,480 --> 00:17:12,720
added

00:17:10,959 --> 00:17:15,039
no but cloud foundry by cloud foundry

00:17:12,720 --> 00:17:16,799
okay gotcha is cloud foundry doing the

00:17:15,039 --> 00:17:18,959
handling the routing or being sort of

00:17:16,799 --> 00:17:20,240
the consumer of that

00:17:18,959 --> 00:17:22,000
yeah yeah it's doing the routine it's

00:17:20,240 --> 00:17:25,199
doing the right thing gotcha

00:17:22,000 --> 00:17:26,400
yeah so um the next thing here is of

00:17:25,199 --> 00:17:27,520
course specify

00:17:26,400 --> 00:17:29,840
you know you if you are using any

00:17:27,520 --> 00:17:32,559
specific grid packets or specified

00:17:29,840 --> 00:17:34,960
and of course the type the process type

00:17:32,559 --> 00:17:37,520
is a web it's a web version then um

00:17:34,960 --> 00:17:39,360
the start command which is the command

00:17:37,520 --> 00:17:41,039
you use to start the application

00:17:39,360 --> 00:17:43,120
this is also the amount of memory it's

00:17:41,039 --> 00:17:43,520
using so it's like i think this is a one

00:17:43,120 --> 00:17:45,440
gig

00:17:43,520 --> 00:17:46,559
um it's using basically one you can

00:17:45,440 --> 00:17:47,919
specify the type of

00:17:46,559 --> 00:17:50,160
amount of memory you actually want your

00:17:47,919 --> 00:17:51,679
application to use in what we call a

00:17:50,160 --> 00:17:54,080
manifesto yml file

00:17:51,679 --> 00:17:55,520
so if you if you are setting specific

00:17:54,080 --> 00:17:58,240
needs you need for your application to

00:17:55,520 --> 00:18:00,240
run well maybe you need to is to deploy

00:17:58,240 --> 00:18:01,679
a particular folder in your application

00:18:00,240 --> 00:18:02,960
you can use the manifest the well mail

00:18:01,679 --> 00:18:05,280
file then specify

00:18:02,960 --> 00:18:06,640
um the folder um that you wanted to

00:18:05,280 --> 00:18:08,080
actually deploy from

00:18:06,640 --> 00:18:09,600
then if you also have a specific

00:18:08,080 --> 00:18:10,400
buildback that you are using maybe you

00:18:09,600 --> 00:18:13,120
have um

00:18:10,400 --> 00:18:14,000
um you wanted to use immediately use the

00:18:13,120 --> 00:18:15,440
bit packet you can also

00:18:14,000 --> 00:18:17,600
specify it in the white manifest the

00:18:15,440 --> 00:18:18,720
wiremail file but the aim really is to

00:18:17,600 --> 00:18:22,080
i'll make sure that you

00:18:18,720 --> 00:18:24,960
do not have to write a um yaml file for

00:18:22,080 --> 00:18:26,160
your deployment now as you can see the

00:18:24,960 --> 00:18:29,520
application here

00:18:26,160 --> 00:18:32,240
is um currently running and um

00:18:29,520 --> 00:18:33,760
to see this application running live we

00:18:32,240 --> 00:18:37,039
need to copy this

00:18:33,760 --> 00:18:37,600
so i'm just going to copy this then come

00:18:37,039 --> 00:18:40,720
to

00:18:37,600 --> 00:18:42,880
my um a new tab and just paste it yeah

00:18:40,720 --> 00:18:45,280
so this is basically application

00:18:42,880 --> 00:18:47,039
deployed live on cloud foundry it's that

00:18:45,280 --> 00:18:49,039
simple so whenever i make a change

00:18:47,039 --> 00:18:51,360
whenever i make any single change

00:18:49,039 --> 00:18:53,280
whenever i make any single change here

00:18:51,360 --> 00:18:55,919
it automatically triggers

00:18:53,280 --> 00:18:57,760
a build and that build would um create

00:18:55,919 --> 00:18:59,600
um trigger the date of actions and

00:18:57,760 --> 00:19:01,600
from gate of actions just working with

00:18:59,600 --> 00:19:03,760
episodes to you know deploy applications

00:19:01,600 --> 00:19:05,760
to um cloud foundry so that's how

00:19:03,760 --> 00:19:07,120
the whole um process works this is how

00:19:05,760 --> 00:19:09,440
you can automate your

00:19:07,120 --> 00:19:11,360
um deployment um to kubernetes purchase

00:19:09,440 --> 00:19:13,440
with github actions it's that simple you

00:19:11,360 --> 00:19:16,000
do not need to do any specific

00:19:13,440 --> 00:19:17,200
and you know any stressful hundred lines

00:19:16,000 --> 00:19:18,799
of yamaha to do this

00:19:17,200 --> 00:19:20,480
to do these things yourself whenever you

00:19:18,799 --> 00:19:24,240
push to github you can

00:19:20,480 --> 00:19:25,919
automatically trigger a deployment to um

00:19:24,240 --> 00:19:27,840
cloud foundry so yeah

00:19:25,919 --> 00:19:29,280
i like that because it's democratizing

00:19:27,840 --> 00:19:30,480
the sort of knowledge based around

00:19:29,280 --> 00:19:32,559
kubernetes like i

00:19:30,480 --> 00:19:34,080
i don't have enough skill sets or even

00:19:32,559 --> 00:19:34,799
knowledge to be able to do this build

00:19:34,080 --> 00:19:37,600
this myself

00:19:34,799 --> 00:19:38,880
yeah what about uh community is there a

00:19:37,600 --> 00:19:40,960
yeah so if you want to join the cloud

00:19:38,880 --> 00:19:42,720
from your community the best way to get

00:19:40,960 --> 00:19:45,600
involved is actually to

00:19:42,720 --> 00:19:47,600
you know go to the platform slack which

00:19:45,600 --> 00:19:49,679
is um slack.cloudfoundry.org

00:19:47,600 --> 00:19:50,880
and you can just easily create an

00:19:49,679 --> 00:19:52,400
account and

00:19:50,880 --> 00:19:53,919
get different channels based on what you

00:19:52,400 --> 00:19:55,600
want to do and um

00:19:53,919 --> 00:19:57,360
for example now for if you have like the

00:19:55,600 --> 00:19:58,880
specific tutorial that you want to talk

00:19:57,360 --> 00:20:00,760
about you can go to the channel

00:19:58,880 --> 00:20:04,159
crowdfunding tutorial so

00:20:00,760 --> 00:20:05,440
slack.org would um make give you access

00:20:04,159 --> 00:20:06,720
to the platform it's like where there's

00:20:05,440 --> 00:20:08,559
like a ton of people

00:20:06,720 --> 00:20:09,919
and that's sharing ideas and like

00:20:08,559 --> 00:20:11,360
answering you ask questions so that's

00:20:09,919 --> 00:20:13,520
really the best place that

00:20:11,360 --> 00:20:15,280
um you can get um involved in the cloud

00:20:13,520 --> 00:20:17,200
foundry i'm community

00:20:15,280 --> 00:20:18,960
and there's also um if you also want to

00:20:17,200 --> 00:20:21,360
like get more ideas there's

00:20:18,960 --> 00:20:22,320
um the cafe on your summit is coming up

00:20:21,360 --> 00:20:23,679
so if you want to like

00:20:22,320 --> 00:20:24,960
join the cloud from your community you

00:20:23,679 --> 00:20:26,159
want to learn more about people in the

00:20:24,960 --> 00:20:28,240
community like

00:20:26,159 --> 00:20:30,080
breakthrough i break into ideas like

00:20:28,240 --> 00:20:33,520
happening in the platforming community

00:20:30,080 --> 00:20:35,919
you can easily just go to um

00:20:33,520 --> 00:20:37,360
join the cloud foundry summit and um

00:20:35,919 --> 00:20:38,799
yeah just listening there are all these

00:20:37,360 --> 00:20:40,320
great talks there people from like

00:20:38,799 --> 00:20:41,840
various parts of the world and also

00:20:40,320 --> 00:20:43,120
various companies we probably have

00:20:41,840 --> 00:20:46,400
people from vmware

00:20:43,120 --> 00:20:49,200
people from like ibm um people from um

00:20:46,400 --> 00:20:50,799
nines etc like cloud native tech experts

00:20:49,200 --> 00:20:52,320
develop experts like from

00:20:50,799 --> 00:20:54,159
various parts of the world that we come

00:20:52,320 --> 00:20:57,120
together to talk about um

00:20:54,159 --> 00:20:57,600
cloud foundry and devops in general yeah

00:20:57,120 --> 00:21:00,320
so

00:20:57,600 --> 00:21:00,640
the actually let me share my screen uh

00:21:00,320 --> 00:21:02,480
we

00:21:00,640 --> 00:21:04,000
shadrach and i actually chatted on my

00:21:02,480 --> 00:21:06,640
other place like

00:21:04,000 --> 00:21:08,400
i do stuff which is jamestack radio um

00:21:06,640 --> 00:21:09,600
so audio form but we talked about cloud

00:21:08,400 --> 00:21:10,799
foundry and i feel like

00:21:09,600 --> 00:21:13,280
i learned a lot in this this

00:21:10,799 --> 00:21:15,520
conversation but now seeing it in action

00:21:13,280 --> 00:21:16,799
uh i know so much more now and i know

00:21:15,520 --> 00:21:17,760
exactly what i'm going to be using it

00:21:16,799 --> 00:21:20,480
for in the future

00:21:17,760 --> 00:21:20,799
so again thanks for taking the time and

00:21:20,480 --> 00:21:24,400
uh

00:21:20,799 --> 00:21:25,760
yeah i'm just happy today yeah yeah

00:21:24,400 --> 00:21:28,159
i would just shout out uh everybody

00:21:25,760 --> 00:21:29,600
follow shedrack on twitter coderblack

00:21:28,159 --> 00:21:31,200
on twitter there's the handle right in

00:21:29,600 --> 00:21:33,919
the lower lower right

00:21:31,200 --> 00:21:34,640
uh as well as follow this channel follow

00:21:33,919 --> 00:21:36,480
the youtube

00:21:34,640 --> 00:21:38,240
uh we're making some changes in the next

00:21:36,480 --> 00:21:38,559
couple weeks too as well and how we sort

00:21:38,240 --> 00:21:42,559
of

00:21:38,559 --> 00:21:43,520
announce the um the the new stream so

00:21:42,559 --> 00:21:45,440
following this channel will be the

00:21:43,520 --> 00:21:47,120
easiest way but if you follow the github

00:21:45,440 --> 00:21:48,400
community twitter channel

00:21:47,120 --> 00:21:49,799
uh we're gonna start tweeting from there

00:21:48,400 --> 00:21:51,120
as well as in the support community so

00:21:49,799 --> 00:21:53,200
github.community

00:21:51,120 --> 00:21:54,720
as well uh and we'll have a place for

00:21:53,200 --> 00:21:56,480
you all to meet the maintainers and

00:21:54,720 --> 00:21:58,799
contributors of projects

00:21:56,480 --> 00:21:59,919
uh as well as of course start the

00:21:58,799 --> 00:22:01,600
projects that would be

00:21:59,919 --> 00:22:08,240
a great opportunity for you to engage

00:22:01,600 --> 00:22:08,240

YouTube URL: https://www.youtube.com/watch?v=OnCzRxYJCxc


