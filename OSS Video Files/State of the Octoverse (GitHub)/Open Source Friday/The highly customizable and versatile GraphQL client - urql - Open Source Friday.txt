Title: The highly customizable and versatile GraphQL client - urql - Open Source Friday
Publication date: 2021-04-28
Playlist: Open Source Friday
Description: 
	urql is a GraphQL client that exposes a set of helpers for several frameworks. It's built to be highly customizable and versatile so you can take it from getting started with your first GraphQL project all the way to building complex apps and experimenting with GraphQL clients.

While GraphQL is an elegant protocol and schema language, client libraries today typically come with large API footprints. We aim to create something more lightweight instead.

Join @bdougieYO and @kitten in learning the latest in consuming GraphQL.

https://github.com/FormidableLabs/urql

0:00 - Start
0:11 - What is urql
2:37 - Advantages for the urql client
10:36 - visual devtools demo
17:20 - Considering CORS
23:17 - Schema awareness
29:35 - RFCs

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:00,160 --> 00:00:03,919
all right welcome to another open source

00:00:01,599 --> 00:00:05,600
friday i am b dougie your host and we've

00:00:03,919 --> 00:00:08,160
got a today we got a special guest

00:00:05,600 --> 00:00:09,519
uh which is phil um so i'm curious like

00:00:08,160 --> 00:00:11,280
if you could shed some light to

00:00:09,519 --> 00:00:12,880
what is urkel and uh what what are

00:00:11,280 --> 00:00:13,599
people using it for yeah i'm glad you

00:00:12,880 --> 00:00:15,280
actually

00:00:13,599 --> 00:00:16,560
heard about it was we're told about it i

00:00:15,280 --> 00:00:17,840
guess the name thing is a bit

00:00:16,560 --> 00:00:20,160
unfortunate

00:00:17,840 --> 00:00:21,359
um but the name has started a bit of a

00:00:20,160 --> 00:00:24,400
joke but it's

00:00:21,359 --> 00:00:25,119
a graphql client and um i see it as kind

00:00:24,400 --> 00:00:27,840
of

00:00:25,119 --> 00:00:29,279
the third graphical client and people

00:00:27,840 --> 00:00:31,119
could get mad at me for

00:00:29,279 --> 00:00:32,640
saying that there are obviously a lot

00:00:31,119 --> 00:00:33,440
more attempts at creating graphql

00:00:32,640 --> 00:00:35,200
clients and

00:00:33,440 --> 00:00:37,120
our attempt has also started quite

00:00:35,200 --> 00:00:39,040
humble so initially

00:00:37,120 --> 00:00:40,399
we just wanted to experiment with

00:00:39,040 --> 00:00:42,239
graphql see

00:00:40,399 --> 00:00:44,800
you know what was the bare minimum that

00:00:42,239 --> 00:00:46,800
a client should be able to do

00:00:44,800 --> 00:00:49,600
and at the time like so many others

00:00:46,800 --> 00:00:51,280
we've used apollo's client

00:00:49,600 --> 00:00:52,879
and we had some frustration and snags

00:00:51,280 --> 00:00:54,800
every now and then and

00:00:52,879 --> 00:00:56,480
we just wanted to see what goes into

00:00:54,800 --> 00:00:58,879
making a client and we started

00:00:56,480 --> 00:00:59,760
from a very small base and then grew it

00:00:58,879 --> 00:01:01,680
from there

00:00:59,760 --> 00:01:03,359
which also means that we had a very

00:01:01,680 --> 00:01:06,560
different approach to it than maybe

00:01:03,359 --> 00:01:10,240
relaying apollo i would say in a certain

00:01:06,560 --> 00:01:12,000
sense uh maybe if relay is on one side

00:01:10,240 --> 00:01:13,360
of the axis and relay is very

00:01:12,000 --> 00:01:14,799
opinionated then

00:01:13,360 --> 00:01:17,040
apollo would be on the other side and

00:01:14,799 --> 00:01:19,439
very unopinionated

00:01:17,040 --> 00:01:20,320
and i would say alcohol kind of slides

00:01:19,439 --> 00:01:23,439
in between

00:01:20,320 --> 00:01:25,520
being opinionated and unopinionated

00:01:23,439 --> 00:01:26,880
i guess we could talk about that so i

00:01:25,520 --> 00:01:29,119
guess more importantly

00:01:26,880 --> 00:01:30,079
um where i was at was actually when we

00:01:29,119 --> 00:01:33,280
go into the

00:01:30,079 --> 00:01:36,479
react api and we have bindings for vue

00:01:33,280 --> 00:01:38,960
swells and you know

00:01:36,479 --> 00:01:40,960
preact as well while react native which

00:01:38,960 --> 00:01:44,000
just use the react bindings

00:01:40,960 --> 00:01:46,079
um i'm specifically showing the react

00:01:44,000 --> 00:01:47,840
ones because once we go into an example

00:01:46,079 --> 00:01:50,479
we can actually see

00:01:47,840 --> 00:01:52,000
this may as well be apollo code and

00:01:50,479 --> 00:01:52,960
that's because bindings to a certain

00:01:52,000 --> 00:01:55,439
extent are

00:01:52,960 --> 00:01:58,159
pretty unopinionated there's only so

00:01:55,439 --> 00:02:00,880
many ways to write these query hooks

00:01:58,159 --> 00:02:01,280
i mean we're passing it a graphql query

00:02:00,880 --> 00:02:03,280
we

00:02:01,280 --> 00:02:04,799
kind of need a name for sending a query

00:02:03,280 --> 00:02:07,040
so that's going to be use query

00:02:04,799 --> 00:02:08,000
and then we get a result there are some

00:02:07,040 --> 00:02:10,800
differences in

00:02:08,000 --> 00:02:11,680
like the api as in i think in apollo you

00:02:10,800 --> 00:02:13,520
pass the

00:02:11,680 --> 00:02:14,879
query string or the document as the

00:02:13,520 --> 00:02:16,319
first argument

00:02:14,879 --> 00:02:18,160
you're getting the result back as one

00:02:16,319 --> 00:02:19,360
object so there are some superficial

00:02:18,160 --> 00:02:21,200
differences

00:02:19,360 --> 00:02:22,480
but those are ultimately just small

00:02:21,200 --> 00:02:24,080
choices

00:02:22,480 --> 00:02:26,560
what's more important i guess is how we

00:02:24,080 --> 00:02:29,599
then approach or default behavior

00:02:26,560 --> 00:02:30,239
now default behavior is much leaner yeah

00:02:29,599 --> 00:02:31,599
and there's a

00:02:30,239 --> 00:02:33,440
question in the chat already actually a

00:02:31,599 --> 00:02:34,640
couple questions to chat but

00:02:33,440 --> 00:02:36,480
i'll grab the second one because i think

00:02:34,640 --> 00:02:37,200
it's more relevant to what we're talking

00:02:36,480 --> 00:02:38,480
about now

00:02:37,200 --> 00:02:41,040
uh which what do you see the biggest

00:02:38,480 --> 00:02:42,080
advantage advantages comparing said to

00:02:41,040 --> 00:02:45,120
apollo

00:02:42,080 --> 00:02:45,760
in relay for actually the advantages

00:02:45,120 --> 00:02:49,040
over

00:02:45,760 --> 00:02:50,400
apollo for everyday react users right uh

00:02:49,040 --> 00:02:52,000
i believe the

00:02:50,400 --> 00:02:53,599
interesting thing about erko is that

00:02:52,000 --> 00:02:55,680
when you're just getting started

00:02:53,599 --> 00:02:57,280
especially when you're new to graphql

00:02:55,680 --> 00:02:59,120
you're getting a graphql client with

00:02:57,280 --> 00:03:00,959
urcall that is much simpler when you're

00:02:59,120 --> 00:03:02,400
just installing it

00:03:00,959 --> 00:03:04,800
and one of the things that is different

00:03:02,400 --> 00:03:06,400
than is patching the caching approach

00:03:04,800 --> 00:03:07,200
because by default you're getting a very

00:03:06,400 --> 00:03:10,080
similar

00:03:07,200 --> 00:03:10,800
document cache approach and that's kind

00:03:10,080 --> 00:03:12,640
of more like

00:03:10,800 --> 00:03:14,560
how a browser caches so it takes your

00:03:12,640 --> 00:03:17,599
query takes your variables

00:03:14,560 --> 00:03:18,239
it gives you a result and this result is

00:03:17,599 --> 00:03:20,640
cached

00:03:18,239 --> 00:03:21,920
as if it was like a rest api response by

00:03:20,640 --> 00:03:24,239
your browser

00:03:21,920 --> 00:03:26,159
and the only thing that we then add on

00:03:24,239 --> 00:03:27,840
top is when you send a mutation so when

00:03:26,159 --> 00:03:30,000
you modify some data

00:03:27,840 --> 00:03:31,599
it just matches the type name and

00:03:30,000 --> 00:03:34,560
invalidates queries

00:03:31,599 --> 00:03:35,599
so the nice thing is for anyone that's

00:03:34,560 --> 00:03:39,200
kind of new to this

00:03:35,599 --> 00:03:40,000
in graphql we have this this type name

00:03:39,200 --> 00:03:41,760
field

00:03:40,000 --> 00:03:44,159
and whenever we're asking for a set of

00:03:41,760 --> 00:03:45,760
data we can send that off and oracle can

00:03:44,159 --> 00:03:48,000
add that on automatically

00:03:45,760 --> 00:03:49,440
so we can actually inquire the api what

00:03:48,000 --> 00:03:51,519
type something is

00:03:49,440 --> 00:03:54,159
and using that for caching validation is

00:03:51,519 --> 00:03:56,239
actually already so intuitive

00:03:54,159 --> 00:03:58,159
that for a lot of simple apps like for

00:03:56,239 --> 00:04:00,159
instance blogs

00:03:58,159 --> 00:04:02,560
new sites like sites with basically

00:04:00,159 --> 00:04:04,400
mostly static-ish content

00:04:02,560 --> 00:04:06,400
that's good enough so then you're

00:04:04,400 --> 00:04:09,760
starting off from a very simple

00:04:06,400 --> 00:04:10,959
uh minimal kind of starting point

00:04:09,760 --> 00:04:12,959
and that's when you can add on

00:04:10,959 --> 00:04:14,720
extensions you know those are called

00:04:12,959 --> 00:04:16,720
exchanges uh in apollo

00:04:14,720 --> 00:04:18,479
those are called links and they're

00:04:16,720 --> 00:04:18,720
ultimately pretty similar which is why

00:04:18,479 --> 00:04:20,560
i'm

00:04:18,720 --> 00:04:22,720
comparing them but in oracle they get a

00:04:20,560 --> 00:04:24,960
bit more power because

00:04:22,720 --> 00:04:26,320
uh even caching and opal is actually

00:04:24,960 --> 00:04:28,080
just an exchange

00:04:26,320 --> 00:04:30,000
so the only abstraction that you have to

00:04:28,080 --> 00:04:32,479
think about at a certain point is

00:04:30,000 --> 00:04:33,440
what exchanges do i add so the advantage

00:04:32,479 --> 00:04:35,360
you get is

00:04:33,440 --> 00:04:37,120
that you have a lot of these features

00:04:35,360 --> 00:04:39,759
and when we go to this advanced section

00:04:37,120 --> 00:04:41,440
all of these are basically add-ons so

00:04:39,759 --> 00:04:44,160
all of these things are things i

00:04:41,440 --> 00:04:44,639
could add on to an aqua client you can

00:04:44,160 --> 00:04:46,320
add those

00:04:44,639 --> 00:04:48,160
step by step so you can kind of

00:04:46,320 --> 00:04:49,120
customize the client as you're going and

00:04:48,160 --> 00:04:50,880
as you need

00:04:49,120 --> 00:04:52,479
and all of these are kind of layered on

00:04:50,880 --> 00:04:53,199
top of what you already get when you're

00:04:52,479 --> 00:04:55,280
just

00:04:53,199 --> 00:04:56,800
kind of browsing around building a

00:04:55,280 --> 00:04:58,880
simple app like that

00:04:56,800 --> 00:05:00,320
and then later on you could even drop in

00:04:58,880 --> 00:05:01,520
normalized caching so that's very

00:05:00,320 --> 00:05:04,160
different from relay

00:05:01,520 --> 00:05:06,479
and apollo because we believe that

00:05:04,160 --> 00:05:08,880
normalized caching doesn't have to be

00:05:06,479 --> 00:05:09,600
you know in there from the start

00:05:08,880 --> 00:05:11,600
excellent

00:05:09,600 --> 00:05:12,639
yeah so appreciate you you taking the

00:05:11,600 --> 00:05:14,240
slight detour

00:05:12,639 --> 00:05:16,080
but can you talk more about like things

00:05:14,240 --> 00:05:17,120
like the difference in normalized

00:05:16,080 --> 00:05:17,680
caching because i don't even know if i

00:05:17,120 --> 00:05:18,800
have my

00:05:17,680 --> 00:05:21,199
brain wrapped around how you're

00:05:18,800 --> 00:05:23,840
approaching this right

00:05:21,199 --> 00:05:25,039
i guess um i have actually recently

00:05:23,840 --> 00:05:27,440
given a talk about this

00:05:25,039 --> 00:05:28,800
so that's why i have a slide deck ready

00:05:27,440 --> 00:05:31,440
oh where did this come

00:05:28,800 --> 00:05:31,440
like a great demo

00:05:32,479 --> 00:05:36,000
so these are actually our guiding

00:05:35,280 --> 00:05:37,759
principles

00:05:36,000 --> 00:05:39,520
and the reason why i'm bringing them up

00:05:37,759 --> 00:05:41,840
is i've kind of touched on that

00:05:39,520 --> 00:05:44,000
very briefly because when you're coming

00:05:41,840 --> 00:05:46,479
to oracle it might be a little

00:05:44,000 --> 00:05:48,479
odd to hear oh okay caching is not that

00:05:46,479 --> 00:05:50,160
opinionated like you don't really ship

00:05:48,479 --> 00:05:52,240
with opinions

00:05:50,160 --> 00:05:54,400
and these are kind of the things we've

00:05:52,240 --> 00:05:56,240
ended up on uh the middle one here says

00:05:54,400 --> 00:05:58,720
unopinionated and flexible

00:05:56,240 --> 00:06:00,240
so what we've kind of settled on is we

00:05:58,720 --> 00:06:02,560
don't really want to force

00:06:00,240 --> 00:06:03,840
any opinions on people that use our core

00:06:02,560 --> 00:06:05,600
so like you say it's

00:06:03,840 --> 00:06:08,000
really intuitive to get started with

00:06:05,600 --> 00:06:10,000
something that has that swr logic

00:06:08,000 --> 00:06:12,240
where you're just fetching and then it

00:06:10,000 --> 00:06:14,319
just aggressively invalidates

00:06:12,240 --> 00:06:16,880
so basically just you know folds your

00:06:14,319 --> 00:06:20,080
api whenever some data is

00:06:16,880 --> 00:06:21,120
needs to be updated simply said and then

00:06:20,080 --> 00:06:23,039
later on for like

00:06:21,120 --> 00:06:24,560
more complex applications that's when

00:06:23,039 --> 00:06:26,960
you need to use

00:06:24,560 --> 00:06:28,319
something like normalized caching maybe

00:06:26,960 --> 00:06:28,960
but you don't want to be forced into it

00:06:28,319 --> 00:06:30,479
right away

00:06:28,960 --> 00:06:32,639
because you might not even get the

00:06:30,479 --> 00:06:34,560
benefits of it instead you would be

00:06:32,639 --> 00:06:35,919
forced into understanding it

00:06:34,560 --> 00:06:37,759
at the wrong point in time when you're

00:06:35,919 --> 00:06:40,400
not even interested

00:06:37,759 --> 00:06:41,759
and that's kind of the third point here

00:06:40,400 --> 00:06:44,240
intuitive for an extended

00:06:41,759 --> 00:06:45,840
so any kind of exchanges and extensions

00:06:44,240 --> 00:06:49,120
that you drop in

00:06:45,840 --> 00:06:51,759
um the idea is that vocal styles are

00:06:49,120 --> 00:06:53,440
as unopinionated as possible but as soon

00:06:51,759 --> 00:06:54,800
as you drop these things in that's when

00:06:53,440 --> 00:06:56,479
we are kind of

00:06:54,800 --> 00:06:58,720
buying into some of our opinions at

00:06:56,479 --> 00:07:00,319
least so what i'd like to think is our

00:06:58,720 --> 00:07:00,960
normalized caching implementation for

00:07:00,319 --> 00:07:03,280
instance

00:07:00,960 --> 00:07:05,120
is actually a little more opinionated

00:07:03,280 --> 00:07:06,960
than apollos

00:07:05,120 --> 00:07:08,560
and that's because we want to enable a

00:07:06,960 --> 00:07:10,400
couple of features and still make it

00:07:08,560 --> 00:07:12,080
pretty intuitive and that comes with a

00:07:10,400 --> 00:07:15,039
bunch of opinions

00:07:12,080 --> 00:07:16,720
um which i'm going to be honest can i do

00:07:15,039 --> 00:07:17,280
some friction if you're coming from

00:07:16,720 --> 00:07:19,520
apollo

00:07:17,280 --> 00:07:20,560
because you might be expecting to do

00:07:19,520 --> 00:07:23,680
things a certain way

00:07:20,560 --> 00:07:24,479
and then yeah you know it might not work

00:07:23,680 --> 00:07:25,599
out well

00:07:24,479 --> 00:07:27,360
but that's why we have github

00:07:25,599 --> 00:07:29,199
discussions so we see a couple of people

00:07:27,360 --> 00:07:31,520
basically posting apollo code and asking

00:07:29,199 --> 00:07:36,319
us hey how do i write this in oracle

00:07:31,520 --> 00:07:39,039
but if i quickly scroll through this

00:07:36,319 --> 00:07:40,080
i have a slide somewhere in here about

00:07:39,039 --> 00:07:44,160
caching

00:07:40,080 --> 00:07:47,199
here comes so this is the kind of uh

00:07:44,160 --> 00:07:49,120
short summary of this if i make this

00:07:47,199 --> 00:07:51,520
below that that might be easier

00:07:49,120 --> 00:07:52,639
um so the whole idea here is and this is

00:07:51,520 --> 00:07:55,039
the short explanation

00:07:52,639 --> 00:07:57,199
document caching caches like a browser

00:07:55,039 --> 00:07:59,280
to fetching documents

00:07:57,199 --> 00:08:00,879
and each query results so every time

00:07:59,280 --> 00:08:01,919
we're sending a query that's basically

00:08:00,879 --> 00:08:04,879
what we're saying

00:08:01,919 --> 00:08:07,360
is a document and then these query

00:08:04,879 --> 00:08:10,160
results are invalidated so refetched

00:08:07,360 --> 00:08:11,759
whenever a mutation has kind of

00:08:10,160 --> 00:08:14,080
contained some similar data

00:08:11,759 --> 00:08:15,199
so whenever it shares a type name with a

00:08:14,080 --> 00:08:16,879
mutation

00:08:15,199 --> 00:08:19,120
that's when a query is invalidated and

00:08:16,879 --> 00:08:22,400
fetched so that's the

00:08:19,120 --> 00:08:24,800
basically smallest amount of

00:08:22,400 --> 00:08:26,319
caching and invalidation one can do

00:08:24,800 --> 00:08:28,080
without like

00:08:26,319 --> 00:08:29,520
introducing you when you're just playing

00:08:28,080 --> 00:08:31,759
around with urkel

00:08:29,520 --> 00:08:32,560
to bugs where something might not be

00:08:31,759 --> 00:08:34,880
invalidated

00:08:32,560 --> 00:08:36,080
and you're kind of stuck with a sticky

00:08:34,880 --> 00:08:39,120
cache

00:08:36,080 --> 00:08:40,479
so that'll be annoying and normalized

00:08:39,120 --> 00:08:43,279
caching on the other hand is

00:08:40,479 --> 00:08:44,880
the complete opposite a normalized cache

00:08:43,279 --> 00:08:46,160
keeps data around for as long as

00:08:44,880 --> 00:08:48,480
possible and it caches

00:08:46,160 --> 00:08:50,640
like a database so it's basically an

00:08:48,480 --> 00:08:54,320
in-memory database it builds up

00:08:50,640 --> 00:08:56,959
tables of these objects from your api

00:08:54,320 --> 00:08:57,760
automatically so everything's split by

00:08:56,959 --> 00:08:59,600
the type

00:08:57,760 --> 00:09:02,160
that is already set up on your graphql

00:08:59,600 --> 00:09:04,959
api and then any changes

00:09:02,160 --> 00:09:05,839
on like one object so one entity with

00:09:04,959 --> 00:09:09,200
the same id

00:09:05,839 --> 00:09:10,720
field maybe is shared across every query

00:09:09,200 --> 00:09:12,160
so you're getting a lot of updates as

00:09:10,720 --> 00:09:13,120
soon as you're fetching different stuff

00:09:12,160 --> 00:09:14,880
from the api

00:09:13,120 --> 00:09:16,800
but as soon as you use normalized

00:09:14,880 --> 00:09:18,080
caching it doesn't invalidate

00:09:16,800 --> 00:09:20,399
automatically anymore

00:09:18,080 --> 00:09:22,000
instead you're encouraged to let it

00:09:20,399 --> 00:09:24,160
update but sometimes you have to help it

00:09:22,000 --> 00:09:27,200
out with a couple of updates

00:09:24,160 --> 00:09:30,880
right we're big fans of github obviously

00:09:27,200 --> 00:09:32,640
i don't need to really say that but um

00:09:30,880 --> 00:09:34,480
i was working hard on trying to get

00:09:32,640 --> 00:09:35,120
early access to github discussions we

00:09:34,480 --> 00:09:37,279
came from

00:09:35,120 --> 00:09:38,240
spectrum okay and now that this is kind

00:09:37,279 --> 00:09:40,240
of uh

00:09:38,240 --> 00:09:41,440
its replacement it's really living up to

00:09:40,240 --> 00:09:43,360
it and we really

00:09:41,440 --> 00:09:46,240
wanted this after i can i think i've

00:09:43,360 --> 00:09:48,000
seen how it was used on the next js repo

00:09:46,240 --> 00:09:50,000
yeah and we're getting a lot of

00:09:48,000 --> 00:09:50,399
questions uh and i'm kind of used to

00:09:50,000 --> 00:09:52,080
that

00:09:50,399 --> 00:09:54,320
by a core contributor to start

00:09:52,080 --> 00:09:56,640
components as well and they will really

00:09:54,320 --> 00:09:58,160
like overflood it at like above the

00:09:56,640 --> 00:09:58,800
limit in terms of how many questions

00:09:58,160 --> 00:10:02,160
come in

00:09:58,800 --> 00:10:03,839
yeah so just having this one hub

00:10:02,160 --> 00:10:06,160
where all the questions come in having

00:10:03,839 --> 00:10:08,079
answered marks having it be searchable

00:10:06,160 --> 00:10:10,160
has helped so much ever since we've

00:10:08,079 --> 00:10:12,640
activated it we actually have gotten

00:10:10,160 --> 00:10:14,000
less questions i assume because it's so

00:10:12,640 --> 00:10:17,120
searchable

00:10:14,000 --> 00:10:19,279
right this is pretty early days

00:10:17,120 --> 00:10:20,720
yeah we are actually working on new

00:10:19,279 --> 00:10:22,079
examples and for that we're building a

00:10:20,720 --> 00:10:25,120
new demo api

00:10:22,079 --> 00:10:28,000
this whole thing here uh try graphql

00:10:25,120 --> 00:10:30,240
that's just all temporary so don't worry

00:10:28,000 --> 00:10:32,880
too much about the app itself and the ui

00:10:30,240 --> 00:10:34,160
this is just a vessel kind of get this

00:10:32,880 --> 00:10:37,200
out

00:10:34,160 --> 00:10:38,160
but um this is basically just a simple

00:10:37,200 --> 00:10:41,279
graphql api

00:10:38,160 --> 00:10:43,040
so i can start typing some stuff in here

00:10:41,279 --> 00:10:44,079
so for instance i've selected the basic

00:10:43,040 --> 00:10:48,240
pokedex

00:10:44,079 --> 00:10:50,800
api i can just list out pokemons

00:10:48,240 --> 00:10:51,920
it's listed out 10 pokemons by name the

00:10:50,800 --> 00:10:54,880
10 first ones

00:10:51,920 --> 00:10:56,560
sure so that's not too too interesting

00:10:54,880 --> 00:10:57,680
but under the hood this is actually

00:10:56,560 --> 00:11:01,600
using urcall

00:10:57,680 --> 00:11:04,079
so while not that interesting

00:11:01,600 --> 00:11:04,959
we can actually go into the code which

00:11:04,079 --> 00:11:07,839
is right here

00:11:04,959 --> 00:11:10,320
and we don't worry about this um this is

00:11:07,839 --> 00:11:13,600
kind of the code that creates the client

00:11:10,320 --> 00:11:16,640
and while a lot is in here uh this is

00:11:13,600 --> 00:11:18,240
this demo shows multiple apis so a lot

00:11:16,640 --> 00:11:22,399
of this is actually not relevant

00:11:18,240 --> 00:11:25,360
we can go and delete a couple of things

00:11:22,399 --> 00:11:27,040
um now this is kind of how we can create

00:11:25,360 --> 00:11:28,560
a client i guess i can make it even

00:11:27,040 --> 00:11:32,000
simpler we have

00:11:28,560 --> 00:11:35,040
kind of like just this this setup so

00:11:32,000 --> 00:11:35,839
let me make it a bit larger the basic

00:11:35,040 --> 00:11:38,480
thing here is

00:11:35,839 --> 00:11:39,279
if you were to create an oracle client

00:11:38,480 --> 00:11:41,760
you

00:11:39,279 --> 00:11:43,200
would drop in three exchanges you would

00:11:41,760 --> 00:11:45,279
drop in the d-dupe exchange

00:11:43,200 --> 00:11:47,360
the cash exchange in the fetch exchange

00:11:45,279 --> 00:11:49,600
if we leave all of this out

00:11:47,360 --> 00:11:50,560
so if i were to remove this this is also

00:11:49,600 --> 00:11:53,680
what it would add

00:11:50,560 --> 00:11:55,440
by default yeah so what this does

00:11:53,680 --> 00:11:57,839
is it makes sure we're not sending

00:11:55,440 --> 00:11:59,200
duplicate queries to our api because

00:11:57,839 --> 00:12:00,959
that'll be unnecessary

00:11:59,200 --> 00:12:03,519
this is the document cache i've

00:12:00,959 --> 00:12:04,720
mentioned and then lastly

00:12:03,519 --> 00:12:06,480
we're just dropping in the fetch

00:12:04,720 --> 00:12:07,440
exchange which knows how to use the

00:12:06,480 --> 00:12:11,360
fetch api

00:12:07,440 --> 00:12:14,639
to send api requests so

00:12:11,360 --> 00:12:15,040
that's not very interesting but things

00:12:14,639 --> 00:12:17,519
like

00:12:15,040 --> 00:12:18,720
our dev tools are integrated using these

00:12:17,519 --> 00:12:20,880
exchanges

00:12:18,720 --> 00:12:22,800
so if i drop in the dev tools exchange

00:12:20,880 --> 00:12:24,639
and i go back here and we give this a

00:12:22,800 --> 00:12:27,920
little refresh

00:12:24,639 --> 00:12:30,160
i can actually open this dev tools tab

00:12:27,920 --> 00:12:31,279
all that's interesting here is this is

00:12:30,160 --> 00:12:33,200
all an extension

00:12:31,279 --> 00:12:34,880
you can install the oracle extension and

00:12:33,200 --> 00:12:36,720
then if i start fetching things

00:12:34,880 --> 00:12:38,240
we can start seeing some kind of events

00:12:36,720 --> 00:12:41,120
pop up in here

00:12:38,240 --> 00:12:42,079
yeah so as i'm sending this or if i say

00:12:41,120 --> 00:12:45,040
i want to actually

00:12:42,079 --> 00:12:45,680
remove the id here that's when it pops

00:12:45,040 --> 00:12:49,040
these things

00:12:45,680 --> 00:12:51,279
into this inspector

00:12:49,040 --> 00:12:52,320
and i can actually see all of these in

00:12:51,279 --> 00:12:54,000
here as well

00:12:52,320 --> 00:12:56,160
and that's kind of our first way of

00:12:54,000 --> 00:12:57,839
getting a more visual overview of what's

00:12:56,160 --> 00:12:59,600
going on in the now

00:12:57,839 --> 00:13:02,079
so we can see the same response here but

00:12:59,600 --> 00:13:06,079
the same response is kind of sorted

00:13:02,079 --> 00:13:09,440
by data so here we see pokemons limit 10

00:13:06,079 --> 00:13:12,800
but if i were to now say skip

00:13:09,440 --> 00:13:13,760
skip 10 so we get the next 10 i can see

00:13:12,800 --> 00:13:16,560
that separately

00:13:13,760 --> 00:13:19,040
so it kind of starts collecting this

00:13:16,560 --> 00:13:21,360
data over time

00:13:19,040 --> 00:13:23,200
right exactly so this is a browser

00:13:21,360 --> 00:13:24,160
extension and once you install the

00:13:23,200 --> 00:13:26,240
oracle browser

00:13:24,160 --> 00:13:29,040
extension so you can go to the chrome

00:13:26,240 --> 00:13:31,600
store the uh firefox extension store

00:13:29,040 --> 00:13:33,920
you just search ercor uh this will pop

00:13:31,600 --> 00:13:36,399
up or at least it should i mean a

00:13:33,920 --> 00:13:37,680
very unique a unique combination of four

00:13:36,399 --> 00:13:39,760
letters so yes

00:13:37,680 --> 00:13:42,160
hopefully that works then when you in

00:13:39,760 --> 00:13:43,760
your app drop in the dev tools exchange

00:13:42,160 --> 00:13:46,000
that will enable it to integrate into

00:13:43,760 --> 00:13:49,600
your app

00:13:46,000 --> 00:13:50,079
so a bunch of things i have more apis

00:13:49,600 --> 00:13:51,600
here

00:13:50,079 --> 00:13:53,519
using which we can demo a couple of

00:13:51,600 --> 00:13:57,600
things so for instance um

00:13:53,519 --> 00:14:00,959
this is a colors api this colors api

00:13:57,600 --> 00:14:01,600
is not too exciting but i can tell it to

00:14:00,959 --> 00:14:05,279
give me a

00:14:01,600 --> 00:14:08,800
random color by name and hex code

00:14:05,279 --> 00:14:11,760
um that's not very useful for demoing

00:14:08,800 --> 00:14:12,959
but as you'll quickly see this api

00:14:11,760 --> 00:14:15,279
misbehaves a bit

00:14:12,959 --> 00:14:16,160
for testing purposes so this api

00:14:15,279 --> 00:14:19,360
actually has

00:14:16,160 --> 00:14:23,120
a 66 chance of giving me a very

00:14:19,360 --> 00:14:23,120
unhelpful no soup error

00:14:23,360 --> 00:14:28,880
which look i mean no soup for you

00:14:26,399 --> 00:14:30,399
so that gives me the opportunity to kind

00:14:28,880 --> 00:14:33,440
of show a bit more about

00:14:30,399 --> 00:14:36,240
how you would build on this

00:14:33,440 --> 00:14:37,519
um i can actually install the retry

00:14:36,240 --> 00:14:39,920
exchange

00:14:37,519 --> 00:14:41,120
and it can add retrying to urcle and

00:14:39,920 --> 00:14:42,639
that will allow me to

00:14:41,120 --> 00:14:44,560
basically get around the fact that this

00:14:42,639 --> 00:14:46,880
api is sending some errors

00:14:44,560 --> 00:14:49,040
now this api is very contrived i know it

00:14:46,880 --> 00:14:52,480
has a very high chance of giving us

00:14:49,040 --> 00:14:54,240
very unhelpful errors yeah but

00:14:52,480 --> 00:14:56,160
you know sometimes you need to actually

00:14:54,240 --> 00:14:57,519
handle errors well or at least avoid

00:14:56,160 --> 00:14:59,920
getting more of them

00:14:57,519 --> 00:15:02,480
i think it has some default stuff so i

00:14:59,920 --> 00:15:04,800
think this is actually all i need

00:15:02,480 --> 00:15:05,680
let's go back and see i think i need to

00:15:04,800 --> 00:15:10,240
tell it when

00:15:05,680 --> 00:15:11,839
yeah okay fair enough ignore that

00:15:10,240 --> 00:15:13,839
i need to actually tell it which errors

00:15:11,839 --> 00:15:15,760
to react to by default it actually only

00:15:13,839 --> 00:15:17,680
reacts to network errors

00:15:15,760 --> 00:15:19,839
um which is because if you're getting a

00:15:17,680 --> 00:15:22,160
random 500 error from your api

00:15:19,839 --> 00:15:23,279
because something's gone wrong uh with

00:15:22,160 --> 00:15:26,320
some routing

00:15:23,279 --> 00:15:28,480
uh then you could just drop in the retry

00:15:26,320 --> 00:15:31,279
exchange and everything would be fine

00:15:28,480 --> 00:15:31,759
in this case i actually want to write

00:15:31,279 --> 00:15:33,360
this

00:15:31,759 --> 00:15:34,959
small function i'm just going to trim

00:15:33,360 --> 00:15:38,240
that down

00:15:34,959 --> 00:15:38,240
in this case i want to tell it

00:15:38,480 --> 00:15:42,079
to specifically watch out for this no

00:15:40,639 --> 00:15:44,399
sub error

00:15:42,079 --> 00:15:45,519
so if we compare this we can see in the

00:15:44,399 --> 00:15:50,560
api that

00:15:45,519 --> 00:15:53,920
um so now if we go to the network tab

00:15:50,560 --> 00:15:55,759
we can actually see it sent a bunch more

00:15:53,920 --> 00:15:58,160
requests than we expected so we can see

00:15:55,759 --> 00:16:00,720
that it got an error at some point

00:15:58,160 --> 00:16:02,399
but it retried again because we've added

00:16:00,720 --> 00:16:04,320
the retry exchange

00:16:02,399 --> 00:16:05,920
so this kind of composability is what we

00:16:04,320 --> 00:16:07,040
want we want to be able to have these

00:16:05,920 --> 00:16:08,959
changes be

00:16:07,040 --> 00:16:11,199
very easy to add so if you go to the

00:16:08,959 --> 00:16:11,920
docs this would actually be under

00:16:11,199 --> 00:16:13,519
advanced

00:16:11,920 --> 00:16:16,000
you will actually find out under

00:16:13,519 --> 00:16:17,839
retrying operations so the idea is

00:16:16,000 --> 00:16:20,560
almost each of these sections has an

00:16:17,839 --> 00:16:21,600
exchange that is useful for a certain

00:16:20,560 --> 00:16:22,880
case

00:16:21,600 --> 00:16:24,480
but you don't need to worry about this

00:16:22,880 --> 00:16:26,320
when you're starting out but instead you

00:16:24,480 --> 00:16:28,160
can explore this so

00:16:26,320 --> 00:16:29,680
it's not unlikely that you would

00:16:28,160 --> 00:16:30,560
probably at some point be searching for

00:16:29,680 --> 00:16:33,759
how do i

00:16:30,560 --> 00:16:35,600
retry failed operations now you could go

00:16:33,759 --> 00:16:36,560
here you can go to retro operations here

00:16:35,600 --> 00:16:38,639
we can see this is

00:16:36,560 --> 00:16:40,959
exactly what i've just added a retry

00:16:38,639 --> 00:16:42,800
exchange with retrieve and a bunch of

00:16:40,959 --> 00:16:45,040
other configs

00:16:42,800 --> 00:16:45,920
has a bunch more options which are

00:16:45,040 --> 00:16:49,680
really just

00:16:45,920 --> 00:16:52,320
fancy delay options which we do not need

00:16:49,680 --> 00:16:54,399
yeah there's a bunch more not not yeah

00:16:52,320 --> 00:16:56,160
yeah that sounds that

00:16:54,399 --> 00:16:57,680
that seems approachable and intuitive

00:16:56,160 --> 00:16:58,399
too as well like there's some things

00:16:57,680 --> 00:17:00,160
that i've

00:16:58,399 --> 00:17:01,600
i've done in graphql that i've had to do

00:17:00,160 --> 00:17:03,680
some like weird

00:17:01,600 --> 00:17:04,799
hacks to make work like retrying is

00:17:03,680 --> 00:17:06,559
something that

00:17:04,799 --> 00:17:08,240
again i've been using graphql since the

00:17:06,559 --> 00:17:10,079
almost the beginning so

00:17:08,240 --> 00:17:12,240
the tooling the advancing and tooling

00:17:10,079 --> 00:17:13,039
has made using graphql so much more

00:17:12,240 --> 00:17:16,640
easier

00:17:13,039 --> 00:17:18,400
um so i'm happy to um uh to hopefully

00:17:16,640 --> 00:17:20,640
try this out in a future project

00:17:18,400 --> 00:17:22,160
um there was a question actually just

00:17:20,640 --> 00:17:27,360
came in do you consider

00:17:22,160 --> 00:17:29,919
cores uh as a uh a thing within graphql

00:17:27,360 --> 00:17:31,520
well i mean it is a thing right so i

00:17:29,919 --> 00:17:32,080
need to make sure that the api i'm

00:17:31,520 --> 00:17:34,400
picking here

00:17:32,080 --> 00:17:36,880
which is actually not running locally so

00:17:34,400 --> 00:17:40,400
if i go here it's actually running on a

00:17:36,880 --> 00:17:43,120
demo url the domain is not important

00:17:40,400 --> 00:17:43,600
it does need to send some course headers

00:17:43,120 --> 00:17:45,919
so

00:17:43,600 --> 00:17:47,600
only a single one in this case so it's

00:17:45,919 --> 00:17:50,160
not a big deal

00:17:47,600 --> 00:17:51,840
but it's not really in our scope since

00:17:50,160 --> 00:17:54,240
we're not dealing with the back end

00:17:51,840 --> 00:17:55,200
since just declined so it's not a topic

00:17:54,240 --> 00:17:57,840
in our docs

00:17:55,200 --> 00:17:58,400
it is important for this demo yeah which

00:17:57,840 --> 00:17:59,600
is a

00:17:58,400 --> 00:18:01,840
good distinction too as well because

00:17:59,600 --> 00:18:04,000
like we did mention apollo a few times

00:18:01,840 --> 00:18:05,679
and apollo is one client that does also

00:18:04,000 --> 00:18:08,000
have a server component

00:18:05,679 --> 00:18:09,520
as well uh so this is specifically for

00:18:08,000 --> 00:18:12,559
consuming graphql

00:18:09,520 --> 00:18:15,760
endpoints into your your front end or

00:18:12,559 --> 00:18:17,760
um front end or mobile apps

00:18:15,760 --> 00:18:19,039
and like i guess honestly front end

00:18:17,760 --> 00:18:20,720
mobile clients

00:18:19,039 --> 00:18:22,320
any sort of client would be like i'm

00:18:20,720 --> 00:18:23,679
using obs right now to stream this so

00:18:22,320 --> 00:18:24,400
that would technically be a client as

00:18:23,679 --> 00:18:26,960
well

00:18:24,400 --> 00:18:29,679
um that does not not very friendly to

00:18:26,960 --> 00:18:33,120
graphql that's for sure yeah

00:18:29,679 --> 00:18:36,240
it's interesting but i guess

00:18:33,120 --> 00:18:39,200
is one more thing we can do is um

00:18:36,240 --> 00:18:41,120
i did mention the cache exchanges here

00:18:39,200 --> 00:18:42,720
so what i can just do is in case you

00:18:41,120 --> 00:18:44,880
would want to get started with

00:18:42,720 --> 00:18:45,840
normalized caching all we'd have to do

00:18:44,880 --> 00:18:47,760
is install

00:18:45,840 --> 00:18:49,440
graph cache so that's what we call a

00:18:47,760 --> 00:18:50,080
normalized cache sounds a bit fancier

00:18:49,440 --> 00:18:52,240
than

00:18:50,080 --> 00:18:53,840
normalized cache and shorter so that's

00:18:52,240 --> 00:18:57,360
important

00:18:53,840 --> 00:18:58,799
so what i would do is i need to import

00:18:57,360 --> 00:19:00,880
cache exchange

00:18:58,799 --> 00:19:02,559
from that package so i'll call exchange

00:19:00,880 --> 00:19:04,240
graph

00:19:02,559 --> 00:19:05,520
and now we can get rid of the other

00:19:04,240 --> 00:19:07,280
cache exchange we don't really care

00:19:05,520 --> 00:19:10,799
about it anymore

00:19:07,280 --> 00:19:13,200
and this here changes the meaning now

00:19:10,799 --> 00:19:14,640
instead of just dropping it in we're

00:19:13,200 --> 00:19:16,240
actually getting a bunch of options on

00:19:14,640 --> 00:19:17,760
the cache exchange now

00:19:16,240 --> 00:19:19,919
and if you're just getting started with

00:19:17,760 --> 00:19:21,679
the normalized cache to kind of get the

00:19:19,919 --> 00:19:23,200
same default behavior they would expect

00:19:21,679 --> 00:19:25,039
from a normalized cache you don't need

00:19:23,200 --> 00:19:27,280
to pass in any options

00:19:25,039 --> 00:19:28,080
so once we drop this in we could i guess

00:19:27,280 --> 00:19:30,320
go to the

00:19:28,080 --> 00:19:32,320
basic pokedex api that's a jolly good

00:19:30,320 --> 00:19:34,720
one

00:19:32,320 --> 00:19:35,919
would help start the server back up is

00:19:34,720 --> 00:19:39,360
it kind of

00:19:35,919 --> 00:19:41,840
yeah right so once that's set up we

00:19:39,360 --> 00:19:43,440
shouldn't see any difference initially

00:19:41,840 --> 00:19:45,440
so it should for instance still be able

00:19:43,440 --> 00:19:49,120
to say pokemon's

00:19:45,440 --> 00:19:53,039
limit 10 um

00:19:49,120 --> 00:19:54,480
id name so once we do that

00:19:53,039 --> 00:19:57,760
we're kind of just fetching pokemons

00:19:54,480 --> 00:19:59,280
we're getting them that's not a big deal

00:19:57,760 --> 00:20:00,880
but an interesting thing happens for

00:19:59,280 --> 00:20:04,080
instance if i leave out

00:20:00,880 --> 00:20:06,720
name we can see

00:20:04,080 --> 00:20:08,080
it executed it but no new network

00:20:06,720 --> 00:20:09,760
request came in

00:20:08,080 --> 00:20:11,360
so that's the big advantage now that we

00:20:09,760 --> 00:20:14,159
have a normalized cache

00:20:11,360 --> 00:20:15,440
it can start executing some graphql

00:20:14,159 --> 00:20:17,120
caching locally

00:20:15,440 --> 00:20:18,880
it already knows about a bunch of this

00:20:17,120 --> 00:20:21,520
stuff a bunch of this data

00:20:18,880 --> 00:20:22,240
so it does need to go back to the api

00:20:21,520 --> 00:20:23,840
and

00:20:22,240 --> 00:20:26,000
this kind of is all done in the

00:20:23,840 --> 00:20:29,200
background automatically

00:20:26,000 --> 00:20:31,679
but there is a caveat it doesn't know

00:20:29,200 --> 00:20:33,039
about any kind of other stuff any kind

00:20:31,679 --> 00:20:36,000
of

00:20:33,039 --> 00:20:36,559
links that you set up yourself so while

00:20:36,000 --> 00:20:40,480
we

00:20:36,559 --> 00:20:42,480
know about pokemon 001

00:20:40,480 --> 00:20:44,480
and we know we've seen it we can in fact

00:20:42,480 --> 00:20:46,080
still see it on the right here

00:20:44,480 --> 00:20:47,760
graphics doesn't know how to actually

00:20:46,080 --> 00:20:49,760
get to it if we change up

00:20:47,760 --> 00:20:52,640
our query so here i'm not saying i want

00:20:49,760 --> 00:20:55,360
a single pokemon with the id01

00:20:52,640 --> 00:20:56,480
and if i execute that but it had to go

00:20:55,360 --> 00:20:58,720
back to the api

00:20:56,480 --> 00:21:00,720
although it had all the data it needed

00:20:58,720 --> 00:21:03,440
interesting that's kind of the case when

00:21:00,720 --> 00:21:05,840
you kind of need to tell it what to do

00:21:03,440 --> 00:21:08,000
so you need to teach it some smarts

00:21:05,840 --> 00:21:09,360
yeah which isn't too hard it's very

00:21:08,000 --> 00:21:12,799
similar to how you set up

00:21:09,360 --> 00:21:15,440
a graphql server api

00:21:12,799 --> 00:21:17,600
so if we go to cache exchange we can

00:21:15,440 --> 00:21:19,440
create resolver configs

00:21:17,600 --> 00:21:21,760
and then on query i can actually tell it

00:21:19,440 --> 00:21:23,440
what to do when it gets pokemon

00:21:21,760 --> 00:21:25,039
it sounds really weird i can tell it

00:21:23,440 --> 00:21:29,440
what to do when it gets spoken

00:21:25,039 --> 00:21:30,320
yeah sure so um i know that a graphql

00:21:29,440 --> 00:21:33,440
resolver

00:21:30,320 --> 00:21:37,440
in the backend in graph cache is parent

00:21:33,440 --> 00:21:39,039
arguments and so on but

00:21:37,440 --> 00:21:40,480
it's easy to forget i don't want to try

00:21:39,039 --> 00:21:42,320
it out twice

00:21:40,480 --> 00:21:44,400
so let's just refresh so we're going to

00:21:42,320 --> 00:21:45,840
do the same thing again i'm going to get

00:21:44,400 --> 00:21:48,400
some pokemons

00:21:45,840 --> 00:21:50,720
10 in fact it's always a good amount

00:21:48,400 --> 00:21:53,200
let's also get i guess

00:21:50,720 --> 00:21:55,840
the types here so we're getting the

00:21:53,200 --> 00:21:59,360
types of pokemon

00:21:55,840 --> 00:22:02,720
so that has worked we sell our bulbasaur

00:21:59,360 --> 00:22:03,600
on number one and what we're now looking

00:22:02,720 --> 00:22:07,039
out for is

00:22:03,600 --> 00:22:08,400
it's done this one request to get all of

00:22:07,039 --> 00:22:12,480
these pokemon

00:22:08,400 --> 00:22:14,880
but now if i do id 001

00:22:12,480 --> 00:22:16,320
there we go now i can see it's gotten

00:22:14,880 --> 00:22:18,880
that one pokemon

00:22:16,320 --> 00:22:19,520
and it has sent no network request so i

00:22:18,880 --> 00:22:21,520
can go

00:22:19,520 --> 00:22:22,720
type in a different id i can get a

00:22:21,520 --> 00:22:24,159
different pokemon

00:22:22,720 --> 00:22:26,559
so that's the power of a normalized

00:22:24,159 --> 00:22:28,240
cache as long as you're basically aware

00:22:26,559 --> 00:22:31,520
of what you're trying to do

00:22:28,240 --> 00:22:34,240
you can get data entirely offline

00:22:31,520 --> 00:22:36,240
well without going to the api if your

00:22:34,240 --> 00:22:37,679
offline cache already knows about it

00:22:36,240 --> 00:22:39,679
if graph cache knows about it you can

00:22:37,679 --> 00:22:42,240
probably get it sometimes you do need to

00:22:39,679 --> 00:22:44,159
tell it how certain resolvers work

00:22:42,240 --> 00:22:46,000
this is an important example because if

00:22:44,159 --> 00:22:48,320
we're imagining this was some kind of

00:22:46,000 --> 00:22:49,840
uh blog and we're seeing a list of blog

00:22:48,320 --> 00:22:51,600
posts

00:22:49,840 --> 00:22:53,760
uh we might have already fetched like

00:22:51,600 --> 00:22:56,320
the title of that blog post and like a

00:22:53,760 --> 00:22:58,000
short description or an image

00:22:56,320 --> 00:22:59,760
but once we click on that blog post

00:22:58,000 --> 00:23:01,440
we're going to the next page

00:22:59,760 --> 00:23:03,679
and that's when we're seeing the details

00:23:01,440 --> 00:23:06,000
page with all the content

00:23:03,679 --> 00:23:07,280
and a normalized cache can still be

00:23:06,000 --> 00:23:09,760
useful in that scenario

00:23:07,280 --> 00:23:12,320
because you could teach it to kind of

00:23:09,760 --> 00:23:15,039
show a bunch of that data

00:23:12,320 --> 00:23:16,240
before you actually have loaded the rest

00:23:15,039 --> 00:23:17,840
of it

00:23:16,240 --> 00:23:19,760
and that's the concept that we're

00:23:17,840 --> 00:23:21,600
actually calling schema awareness

00:23:19,760 --> 00:23:23,280
so there is this page that kind of

00:23:21,600 --> 00:23:26,400
explains you how to set it up

00:23:23,280 --> 00:23:27,840
but this diagram is mostly what it is so

00:23:26,400 --> 00:23:28,799
this is what i've just described we have

00:23:27,840 --> 00:23:31,360
a listing page

00:23:28,799 --> 00:23:32,000
we're going to the details page the idea

00:23:31,360 --> 00:23:34,559
is

00:23:32,000 --> 00:23:36,080
graphcat should be able to give you part

00:23:34,559 --> 00:23:39,039
of that page

00:23:36,080 --> 00:23:40,720
until it has fetched the rest and that

00:23:39,039 --> 00:23:43,039
pairs really well actually with

00:23:40,720 --> 00:23:43,919
uh the suspense concepts in react and

00:23:43,039 --> 00:23:46,159
view three

00:23:43,919 --> 00:23:47,120
yeah because that really allows you to

00:23:46,159 --> 00:23:49,200
set up loading

00:23:47,120 --> 00:23:51,120
pages more dynamically so you can kind

00:23:49,200 --> 00:23:52,400
of leave out a bunch of bits here and

00:23:51,120 --> 00:23:54,960
now

00:23:52,400 --> 00:23:56,320
yeah excellent yeah i am um i'm using

00:23:54,960 --> 00:23:58,240
suspense in one of my apps that ha

00:23:56,320 --> 00:23:59,840
that's leveraging graphql um

00:23:58,240 --> 00:24:02,080
specifically the open source app

00:23:59,840 --> 00:24:03,279
and uh it has been a pain point of like

00:24:02,080 --> 00:24:05,039
trying to figure out how to

00:24:03,279 --> 00:24:06,559
pass data around as i'm trying to

00:24:05,039 --> 00:24:07,120
navigate the different sections of the

00:24:06,559 --> 00:24:09,919
app

00:24:07,120 --> 00:24:11,679
um so light bulbs have gone off with

00:24:09,919 --> 00:24:13,039
just your simple pokemon example of how

00:24:11,679 --> 00:24:16,320
you're teaching

00:24:13,039 --> 00:24:17,200
the the cache to well teaching the cache

00:24:16,320 --> 00:24:20,159
to

00:24:17,200 --> 00:24:20,880
fetch the data that uh that is similar i

00:24:20,159 --> 00:24:22,799
guess

00:24:20,880 --> 00:24:25,039
um because i have basically and my

00:24:22,799 --> 00:24:26,400
concept is i have a list of repositories

00:24:25,039 --> 00:24:28,320
open source is um

00:24:26,400 --> 00:24:29,440
it's a project to encourage open source

00:24:28,320 --> 00:24:30,960
contributions

00:24:29,440 --> 00:24:32,880
and uh i think the best thing for me to

00:24:30,960 --> 00:24:34,240
do is just i'll switch to my screen

00:24:32,880 --> 00:24:36,960
share for a second

00:24:34,240 --> 00:24:38,400
um but when you first load this i have a

00:24:36,960 --> 00:24:39,200
list of repositories that i'm sort of

00:24:38,400 --> 00:24:41,360
tracking

00:24:39,200 --> 00:24:42,799
on github and then when i click through

00:24:41,360 --> 00:24:44,640
pizza ql

00:24:42,799 --> 00:24:46,880
now i get some data that gets loaded so

00:24:44,640 --> 00:24:48,880
like this is consistent

00:24:46,880 --> 00:24:50,480
but the uh well that takes me to the uh

00:24:48,880 --> 00:24:53,120
the repo everybody check out pizza

00:24:50,480 --> 00:24:54,559
ql it's a great way to order pizza

00:24:53,120 --> 00:24:58,240
through graphql

00:24:54,559 --> 00:25:00,159
um but with this uh like the url that i

00:24:58,240 --> 00:25:01,840
have here or the name i

00:25:00,159 --> 00:25:03,200
i have to add it to the i'm actually

00:25:01,840 --> 00:25:04,720
pulling it from here

00:25:03,200 --> 00:25:06,720
because i didn't have a way to properly

00:25:04,720 --> 00:25:09,840
cache this um

00:25:06,720 --> 00:25:11,120
and possibly there's a great way to do

00:25:09,840 --> 00:25:12,000
this in apollo today because i'm using

00:25:11,120 --> 00:25:13,520
apollo here

00:25:12,000 --> 00:25:15,440
i just haven't had the time to go learn

00:25:13,520 --> 00:25:16,640
it to then fix it in this app so

00:25:15,440 --> 00:25:18,080
that's basically where i'm at like i

00:25:16,640 --> 00:25:18,480
probably have a solution for this i just

00:25:18,080 --> 00:25:21,279
haven't

00:25:18,480 --> 00:25:22,720
done it yet so my project's open source

00:25:21,279 --> 00:25:24,240
uh definitely check it out

00:25:22,720 --> 00:25:26,400
if you want to help solve problems for

00:25:24,240 --> 00:25:28,000
me but going back to urkel

00:25:26,400 --> 00:25:29,840
i love your example because i feel like

00:25:28,000 --> 00:25:30,640
i could if i just took a time to think

00:25:29,840 --> 00:25:32,320
about it i can

00:25:30,640 --> 00:25:35,200
leverage that example to help teach me

00:25:32,320 --> 00:25:37,600
to fix that problem

00:25:35,200 --> 00:25:39,200
yeah it's i mean it's an interesting one

00:25:37,600 --> 00:25:39,520
i think this diagram is an interesting

00:25:39,200 --> 00:25:41,919
one

00:25:39,520 --> 00:25:42,559
because it takes a bit to explain the

00:25:41,919 --> 00:25:45,039
whole idea

00:25:42,559 --> 00:25:47,440
of oh give me powerful data and like

00:25:45,039 --> 00:25:50,400
have schema awareness we like

00:25:47,440 --> 00:25:52,000
came up with like short but like hand

00:25:50,400 --> 00:25:53,279
wavy terms for it

00:25:52,000 --> 00:25:55,120
and it took us a while to figure out

00:25:53,279 --> 00:25:56,799
this is the one example that most people

00:25:55,120 --> 00:25:58,640
have seen that most people understand

00:25:56,799 --> 00:26:00,159
yeah

00:25:58,640 --> 00:26:02,400
now the reason why it's called schema

00:26:00,159 --> 00:26:05,360
awareness is i have left out

00:26:02,400 --> 00:26:07,200
a small but important bit of how what

00:26:05,360 --> 00:26:08,080
you need to do to make your pizza qr

00:26:07,200 --> 00:26:10,720
example work

00:26:08,080 --> 00:26:11,520
yeah it's called schema awareness

00:26:10,720 --> 00:26:13,520
because

00:26:11,520 --> 00:26:16,400
for partial data to work we need to

00:26:13,520 --> 00:26:19,760
actually introspect our schema

00:26:16,400 --> 00:26:20,640
um sounds pretty scary but it's a pretty

00:26:19,760 --> 00:26:23,360
common process

00:26:20,640 --> 00:26:24,880
in fact in this demo all of this info

00:26:23,360 --> 00:26:26,799
down here where like lists

00:26:24,880 --> 00:26:29,360
what this graphql schema can do for

00:26:26,799 --> 00:26:31,760
pokemons that's introspection

00:26:29,360 --> 00:26:33,279
and that's just a normal graphql query

00:26:31,760 --> 00:26:35,200
where we're just asking the graphql

00:26:33,279 --> 00:26:35,760
schema hey what bunch of types do you

00:26:35,200 --> 00:26:39,600
have

00:26:35,760 --> 00:26:41,520
like what do you know what can you do

00:26:39,600 --> 00:26:43,919
and for schema awareness to work we're

00:26:41,520 --> 00:26:45,039
kind of taking advantage of that data as

00:26:43,919 --> 00:26:46,799
well

00:26:45,039 --> 00:26:48,320
so the only piece of data that a

00:26:46,799 --> 00:26:51,120
normalized cache usually

00:26:48,320 --> 00:26:52,720
needs is that tight name field so it

00:26:51,120 --> 00:26:56,400
needs to know hey this object

00:26:52,720 --> 00:26:58,400
is a pokemon or this object is

00:26:56,400 --> 00:27:00,080
an evolution of a pokemon i think we do

00:26:58,400 --> 00:27:03,200
have that in there

00:27:00,080 --> 00:27:04,720
but as you kind of go along

00:27:03,200 --> 00:27:06,880
there are two types of information that

00:27:04,720 --> 00:27:08,799
you add so first of all you set up

00:27:06,880 --> 00:27:10,799
configuration to kind of set up

00:27:08,799 --> 00:27:13,200
resolvers so you're teaching the cache

00:27:10,799 --> 00:27:15,360
what to do in certain circumstances

00:27:13,200 --> 00:27:17,200
you can set up updates to kind of teach

00:27:15,360 --> 00:27:18,799
you what to do mutations and we have

00:27:17,200 --> 00:27:21,840
this entire page of explaining when you

00:27:18,799 --> 00:27:21,840
set up what

00:27:22,399 --> 00:27:28,000
and these are all very brief sections so

00:27:26,240 --> 00:27:29,279
these sections down here are all the

00:27:28,000 --> 00:27:30,480
ones that you would need to kind of

00:27:29,279 --> 00:27:32,720
understand these concepts

00:27:30,480 --> 00:27:34,559
so we've kind of already seen resolvers

00:27:32,720 --> 00:27:37,600
great half the thing is done

00:27:34,559 --> 00:27:39,600
um this is the update section

00:27:37,600 --> 00:27:41,679
so it's similar to resolvers uh if

00:27:39,600 --> 00:27:42,799
you're for instance adding a new to-do

00:27:41,679 --> 00:27:44,159
to a to-do list

00:27:42,799 --> 00:27:46,080
a normalized cache wouldn't

00:27:44,159 --> 00:27:46,399
automatically know that it needs to add

00:27:46,080 --> 00:27:48,559
that

00:27:46,399 --> 00:27:50,080
to a different query so you need to tell

00:27:48,559 --> 00:27:51,760
it hey this is the query where you need

00:27:50,080 --> 00:27:55,840
to add it

00:27:51,760 --> 00:27:58,399
but partial data is an interesting one

00:27:55,840 --> 00:27:59,200
because partial data is a pretty useful

00:27:58,399 --> 00:28:00,880
case

00:27:59,200 --> 00:28:03,760
where you need more information about

00:28:00,880 --> 00:28:05,840
your schema

00:28:03,760 --> 00:28:07,440
i think in apollo you can actually force

00:28:05,840 --> 00:28:08,480
it force the cache to give you

00:28:07,440 --> 00:28:11,039
everything it knows

00:28:08,480 --> 00:28:12,240
even if that doesn't fit your query and

00:28:11,039 --> 00:28:13,919
your schema

00:28:12,240 --> 00:28:16,000
and that's an important distinction

00:28:13,919 --> 00:28:18,480
because um

00:28:16,000 --> 00:28:21,200
do you actually want to get data that

00:28:18,480 --> 00:28:23,760
the cache doesn't have as null

00:28:21,200 --> 00:28:24,480
so if we're thinking about what a

00:28:23,760 --> 00:28:28,559
graphql

00:28:24,480 --> 00:28:31,279
api does when an error occurs um

00:28:28,559 --> 00:28:32,480
that field might either be required or

00:28:31,279 --> 00:28:35,600
optional

00:28:32,480 --> 00:28:37,600
when it's optional and that field errors

00:28:35,600 --> 00:28:39,760
the server can just set it to now it can

00:28:37,600 --> 00:28:41,440
leave it out but if it's required it

00:28:39,760 --> 00:28:43,279
actually needs to cascade out

00:28:41,440 --> 00:28:44,480
it needs to check that parent field and

00:28:43,279 --> 00:28:47,440
its parent fields

00:28:44,480 --> 00:28:48,480
can i set that to no so there is a small

00:28:47,440 --> 00:28:50,640
process involved

00:28:48,480 --> 00:28:52,000
when kind of dealing with partial data

00:28:50,640 --> 00:28:53,520
on the server side

00:28:52,000 --> 00:28:55,039
and that's why partial data can be a bit

00:28:53,520 --> 00:28:57,039
dangerous on the front end

00:28:55,039 --> 00:28:58,399
because you might be generating types

00:28:57,039 --> 00:29:00,480
for your schema

00:28:58,399 --> 00:29:02,240
so typescript may be telling you hey

00:29:00,480 --> 00:29:04,240
this field is not optional you can just

00:29:02,240 --> 00:29:07,440
trust that that will always be set

00:29:04,240 --> 00:29:08,880
yeah which isn't the case when you're

00:29:07,440 --> 00:29:10,480
telling the cache to give you partial

00:29:08,880 --> 00:29:13,840
data

00:29:10,480 --> 00:29:15,760
in fact um we have this rfc board where

00:29:13,840 --> 00:29:19,120
we're tracking everything we're doing

00:29:15,760 --> 00:29:20,320
um so while i can't predict what good

00:29:19,120 --> 00:29:23,440
new ideas might come

00:29:20,320 --> 00:29:25,440
from people browsing the repo i can only

00:29:23,440 --> 00:29:26,000
encourage people to create rfcs because

00:29:25,440 --> 00:29:27,520
when you create

00:29:26,000 --> 00:29:30,000
a new issue you're also immediately

00:29:27,520 --> 00:29:32,480
encouraged to create an rfc

00:29:30,000 --> 00:29:33,440
and remember github before this feature

00:29:32,480 --> 00:29:37,520
was wild

00:29:33,440 --> 00:29:40,080
so you have rsvs in your discussions

00:29:37,520 --> 00:29:41,919
yeah with rfcs just as issues so when

00:29:40,080 --> 00:29:44,960
anyone has an idea

00:29:41,919 --> 00:29:46,480
that might be you give you or you um i

00:29:44,960 --> 00:29:48,399
mean you can just go in here you can

00:29:46,480 --> 00:29:50,240
write an rfc we'll get to it

00:29:48,399 --> 00:29:51,440
that can start a discussion yeah and

00:29:50,240 --> 00:29:52,880
we'll put it onto this

00:29:51,440 --> 00:29:54,480
project board so that we can track

00:29:52,880 --> 00:29:56,320
what's going on and we don't do this

00:29:54,480 --> 00:29:57,760
with external ideas or external

00:29:56,320 --> 00:30:00,000
contributions we do this with

00:29:57,760 --> 00:30:01,520
anything we do yeah so you can see the

00:30:00,000 --> 00:30:03,200
examples i've talked about

00:30:01,520 --> 00:30:05,039
that's a task that's in progress and

00:30:03,200 --> 00:30:08,640
that started as an rfc

00:30:05,039 --> 00:30:10,000
sent in from an external contributor

00:30:08,640 --> 00:30:12,960
it's beautiful someone proposed

00:30:10,000 --> 00:30:14,960
something and we can just do it

00:30:12,960 --> 00:30:17,039
similarly there are a lot of different

00:30:14,960 --> 00:30:19,520
ones that we created as well

00:30:17,039 --> 00:30:20,799
a lot of ones that come in externally

00:30:19,520 --> 00:30:22,960
but there is actually one that we

00:30:20,799 --> 00:30:23,919
haven't quite started yet we wanted to

00:30:22,960 --> 00:30:26,960
do a cross

00:30:23,919 --> 00:30:28,080
tab exchange so we're thinking if two

00:30:26,960 --> 00:30:30,080
tabs are open

00:30:28,080 --> 00:30:31,679
and with an oracle client they could

00:30:30,080 --> 00:30:34,559
send each other the api

00:30:31,679 --> 00:30:35,360
results they've gotten from the api so

00:30:34,559 --> 00:30:38,159
even across

00:30:35,360 --> 00:30:39,679
tabs it wouldn't be doing work twice we

00:30:38,159 --> 00:30:41,039
haven't really started this yet but the

00:30:39,679 --> 00:30:43,440
rfc is down

00:30:41,039 --> 00:30:44,799
if anyone does pick it up i think we

00:30:43,440 --> 00:30:46,559
just didn't start it because there were

00:30:44,799 --> 00:30:48,159
other things that we wanted to do first

00:30:46,559 --> 00:30:49,679
so this was always like the lowest

00:30:48,159 --> 00:30:52,799
priority one but

00:30:49,679 --> 00:30:55,120
yeah there is an open rfc process it's

00:30:52,799 --> 00:30:57,360
all in issues in that project board

00:30:55,120 --> 00:30:59,120
we have a very long contributing readme

00:30:57,360 --> 00:31:01,039
that kind of tells you about this

00:30:59,120 --> 00:31:03,200
so if you later on want to find out how

00:31:01,039 --> 00:31:05,600
this works how do i propose changes

00:31:03,200 --> 00:31:07,279
the section in there that's relevant uh

00:31:05,600 --> 00:31:09,120
excellent yeah i mean

00:31:07,279 --> 00:31:10,320
that's like the contributing md sounds

00:31:09,120 --> 00:31:12,000
like a great place to get started for

00:31:10,320 --> 00:31:14,559
sure i'm super happy to see y'all

00:31:12,000 --> 00:31:15,120
leveraging discussions so well and then

00:31:14,559 --> 00:31:18,320
our

00:31:15,120 --> 00:31:20,240
rfcs on project boards um

00:31:18,320 --> 00:31:21,919
really really easy way to sort of grok

00:31:20,240 --> 00:31:22,880
for someone who's just coming in for the

00:31:21,919 --> 00:31:24,880
first time and

00:31:22,880 --> 00:31:26,640
just learned a miracle or haven't had a

00:31:24,880 --> 00:31:29,279
reason to try it out until today

00:31:26,640 --> 00:31:32,000
so uh phil thanks so much for the

00:31:29,279 --> 00:31:33,519
conversation the examples um

00:31:32,000 --> 00:31:36,159
i would say where could people find you

00:31:33,519 --> 00:31:38,320
but they obviously find you on github

00:31:36,159 --> 00:31:39,760
slash kitten um but i guess the the

00:31:38,320 --> 00:31:41,279
other question is where can folks find

00:31:39,760 --> 00:31:42,880
more conversations like this

00:31:41,279 --> 00:31:46,480
you mentioned you had a talk that you

00:31:42,880 --> 00:31:49,120
gave with the slides that you showed

00:31:46,480 --> 00:31:50,159
right um i guess there are two things i

00:31:49,120 --> 00:31:54,000
can shout out

00:31:50,159 --> 00:31:54,640
which is um if you want to find out more

00:31:54,000 --> 00:31:57,840
about how

00:31:54,640 --> 00:31:59,200
the normalized cache works and you know

00:31:57,840 --> 00:32:00,960
i've talked a lot about this

00:31:59,200 --> 00:32:02,480
but the normalized cache was kind of the

00:32:00,960 --> 00:32:02,960
main thing i've talked about then you

00:32:02,480 --> 00:32:05,440
can go

00:32:02,960 --> 00:32:06,559
to my blog kit and sh and i have an

00:32:05,440 --> 00:32:10,399
article that explains

00:32:06,559 --> 00:32:12,640
more about how it works other than that

00:32:10,399 --> 00:32:14,000
go to the docs obviously if you if you

00:32:12,640 --> 00:32:16,720
want to learn more the docs

00:32:14,000 --> 00:32:17,919
are a good place to start formidable.com

00:32:16,720 --> 00:32:21,039
open source

00:32:17,919 --> 00:32:23,279
slash um

00:32:21,039 --> 00:32:24,799
if you go to my twitter and i'll add

00:32:23,279 --> 00:32:26,960
this in more place later on

00:32:24,799 --> 00:32:28,159
because this has just been published you

00:32:26,960 --> 00:32:31,600
can actually find

00:32:28,159 --> 00:32:32,320
me tweeting out the talk recording soon

00:32:31,600 --> 00:32:34,000
i haven't

00:32:32,320 --> 00:32:35,600
tweeted it out yet because it's just

00:32:34,000 --> 00:32:39,679
been uploaded yesterday

00:32:35,600 --> 00:32:42,960
okay if you're really ego go to youtube

00:32:39,679 --> 00:32:43,679
find prisma and big big thanks to prisma

00:32:42,960 --> 00:32:45,840
for being

00:32:43,679 --> 00:32:47,760
awesome in terms of organizing meetups

00:32:45,840 --> 00:32:51,679
and making

00:32:47,760 --> 00:32:53,519
wrong prism and making an awesome orm

00:32:51,679 --> 00:32:55,120
they've just launched a product hunt if

00:32:53,519 --> 00:32:56,720
you're on product hunt give them an

00:32:55,120 --> 00:32:59,279
upload they're pretty

00:32:56,720 --> 00:33:00,880
pretty cool people there you can find

00:32:59,279 --> 00:33:03,760
the talks from that meetup

00:33:00,880 --> 00:33:03,760

YouTube URL: https://www.youtube.com/watch?v=nhxaAEZWouA


