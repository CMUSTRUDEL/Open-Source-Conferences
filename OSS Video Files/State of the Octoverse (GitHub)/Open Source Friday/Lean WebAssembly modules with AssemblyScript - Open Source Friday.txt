Title: Lean WebAssembly modules with AssemblyScript - Open Source Friday
Publication date: 2021-06-28
Playlist: Open Source Friday
Description: 
	AssemblyScript compiles a variant of TypeScript (basically JavaScript with types) to WebAssembly using Binaryen. It generates lean WebAssembly modules while being just an npm install away.

Join @bdougieYO and @torch2424 in learning how to leverage AssemblyScript to integrate WebAssembly with the existing Web ecosystem.

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:00,080 --> 00:00:03,840
um so my name is aaron um i go by

00:00:02,679 --> 00:00:05,440
torch2424

00:00:03,840 --> 00:00:07,120
on the internet i made that name when i

00:00:05,440 --> 00:00:10,320
was six and i've just always kept it

00:00:07,120 --> 00:00:11,920
that's why it doesn't make any sense but

00:00:10,320 --> 00:00:13,200
what i do in open source

00:00:11,920 --> 00:00:15,599
mostly is work on a project called

00:00:13,200 --> 00:00:16,640
assemblyscript it's a typescript like

00:00:15,599 --> 00:00:18,800
language so like

00:00:16,640 --> 00:00:20,640
huge emphasis on the typescript like it

00:00:18,800 --> 00:00:21,760
looks and feels like typescript

00:00:20,640 --> 00:00:24,560
but what it does it compiles the

00:00:21,760 --> 00:00:26,320
webassembly which is a new binary format

00:00:24,560 --> 00:00:27,599
for code you can run in the browser on

00:00:26,320 --> 00:00:28,640
the web and things and um

00:00:27,599 --> 00:00:30,320
it's going all types of interesting

00:00:28,640 --> 00:00:31,039
places internet of things and like

00:00:30,320 --> 00:00:33,360
server side

00:00:31,039 --> 00:00:34,559
applications and so on and so forth but

00:00:33,360 --> 00:00:35,360
essentially it's a portable binary

00:00:34,559 --> 00:00:37,120
format

00:00:35,360 --> 00:00:38,399
and i could ramble on about so many

00:00:37,120 --> 00:00:39,920
things already and i probably should

00:00:38,399 --> 00:00:42,480
also mention i work at fastly

00:00:39,920 --> 00:00:43,920
doing uh working on the webassembly team

00:00:42,480 --> 00:00:45,360
just kind of like pushing what was

00:00:43,920 --> 00:00:47,360
something out to the ecosystem and

00:00:45,360 --> 00:00:49,440
working on them this new serverless

00:00:47,360 --> 00:00:51,280
product thing we're working on so yeah

00:00:49,440 --> 00:00:52,800
i guess we could start with like what is

00:00:51,280 --> 00:00:54,160
what are use cases for

00:00:52,800 --> 00:00:56,559
web assembling like why would you even

00:00:54,160 --> 00:00:58,960
reach for this yeah totally um

00:00:56,559 --> 00:01:01,120
so probably the biggest use case is just

00:00:58,960 --> 00:01:04,159
to boil it really down is that um

00:01:01,120 --> 00:01:05,199
essentially it depends on

00:01:04,159 --> 00:01:06,240
so whether something can do a lot of

00:01:05,199 --> 00:01:07,360
different things that's why i'm kind of

00:01:06,240 --> 00:01:09,360
like hesitating here

00:01:07,360 --> 00:01:11,119
yeah so it depends on what you're coming

00:01:09,360 --> 00:01:12,240
from so i like to explain it in the

00:01:11,119 --> 00:01:13,119
context of like let's say you're a

00:01:12,240 --> 00:01:14,880
friend of developer

00:01:13,119 --> 00:01:16,479
you write a lot of javascript on the web

00:01:14,880 --> 00:01:17,600
and things like that well webassembly

00:01:16,479 --> 00:01:19,759
fits in for you

00:01:17,600 --> 00:01:21,280
is that a javascript is interpreted it's

00:01:19,759 --> 00:01:21,920
kind of slow because you have to run it

00:01:21,280 --> 00:01:24,159
in a

00:01:21,920 --> 00:01:25,520
just-in-time compiled runtime like v8

00:01:24,159 --> 00:01:26,560
and it needs to be compiled over and

00:01:25,520 --> 00:01:28,000
over and essentially it makes

00:01:26,560 --> 00:01:29,439
assumptions about your code

00:01:28,000 --> 00:01:30,960
those assumptions go wrong your code

00:01:29,439 --> 00:01:32,720
gets really slow because it has to go

00:01:30,960 --> 00:01:34,720
and kind of like relearn what's going on

00:01:32,720 --> 00:01:36,400
whereas webassembly it's um it's a

00:01:34,720 --> 00:01:37,840
bytecode so it's just compiled straight

00:01:36,400 --> 00:01:40,079
down to like machine code essentially

00:01:37,840 --> 00:01:41,280
and running a vm so there is no like

00:01:40,079 --> 00:01:42,880
oh let me just figure out what this web

00:01:41,280 --> 00:01:43,759
assembly is doing it's just fast from

00:01:42,880 --> 00:01:45,439
the beginning

00:01:43,759 --> 00:01:46,720
so you you get that predictable

00:01:45,439 --> 00:01:47,920
performance and that's really like the

00:01:46,720 --> 00:01:49,040
huge point here is predictable

00:01:47,920 --> 00:01:50,720
performance so that

00:01:49,040 --> 00:01:51,920
you can kind of like you don't have to

00:01:50,720 --> 00:01:52,960
it's really good for things like games

00:01:51,920 --> 00:01:54,240
because we need that predictable

00:01:52,960 --> 00:01:54,720
performance we can't just like you know

00:01:54,240 --> 00:01:56,240
be

00:01:54,720 --> 00:01:57,680
doing bullet physics and all of a sudden

00:01:56,240 --> 00:01:58,799
it's like oh well sorry we made a wrong

00:01:57,680 --> 00:01:59,920
assumption about where this bullet was

00:01:58,799 --> 00:02:00,320
going let's just slow down the whole

00:01:59,920 --> 00:02:03,040
game

00:02:00,320 --> 00:02:04,560
sorry is there already any games that

00:02:03,040 --> 00:02:07,840
are using this

00:02:04,560 --> 00:02:08,959
um oh that's a good question i know so i

00:02:07,840 --> 00:02:10,000
actually have a website called made with

00:02:08,959 --> 00:02:12,959
webassembly

00:02:10,000 --> 00:02:15,120
um that i help maintain i don't know

00:02:12,959 --> 00:02:17,440
yeah

00:02:15,120 --> 00:02:18,480
let's check it out yeah which is very

00:02:17,440 --> 00:02:20,560
useful

00:02:18,480 --> 00:02:21,760
yeah so you can see in the top you can

00:02:20,560 --> 00:02:23,120
type games and then we can look at a

00:02:21,760 --> 00:02:25,599
bunch of games

00:02:23,120 --> 00:02:26,800
assembly perfect um so so i don't know

00:02:25,599 --> 00:02:28,560
why some of the icons

00:02:26,800 --> 00:02:30,560
broke recently but you can see things

00:02:28,560 --> 00:02:32,080
like rinpai web weizenboy is a project

00:02:30,560 --> 00:02:34,720
of mine we'll get into that later

00:02:32,080 --> 00:02:36,879
unity duh so unity is a super popular

00:02:34,720 --> 00:02:38,400
game engine um and they have a web

00:02:36,879 --> 00:02:40,319
export and it used to export this thing

00:02:38,400 --> 00:02:42,400
called asm.js which was like

00:02:40,319 --> 00:02:43,840
kind of a precursor to webassembly yeah

00:02:42,400 --> 00:02:46,319
essentially it would do things like

00:02:43,840 --> 00:02:47,680
force since javascript is dynamically

00:02:46,319 --> 00:02:49,440
typed it would do things like oh let's

00:02:47,680 --> 00:02:51,280
or on an integer there to like

00:02:49,440 --> 00:02:53,599
force v8 to know oh this is going to be

00:02:51,280 --> 00:02:54,720
an integer because it just has to be

00:02:53,599 --> 00:02:56,640
but now that we have webassembly we

00:02:54,720 --> 00:02:57,760
don't have to make these assumptions or

00:02:56,640 --> 00:02:59,519
play around with dynamic types they're

00:02:57,760 --> 00:03:01,200
all statically typed so we can

00:02:59,519 --> 00:03:02,560
make faster assumptions when we compile

00:03:01,200 --> 00:03:04,000
that compile time

00:03:02,560 --> 00:03:05,200
so you need to pretty much there's a

00:03:04,000 --> 00:03:06,720
long way to say you need to switch from

00:03:05,200 --> 00:03:08,239
amazon.js to webassembly

00:03:06,720 --> 00:03:10,319
and now when you export for the web with

00:03:08,239 --> 00:03:12,239
unity it uses webassembly so

00:03:10,319 --> 00:03:13,920
yeah i mean you mentioned it can we talk

00:03:12,239 --> 00:03:16,879
about wasmboy

00:03:13,920 --> 00:03:18,720
yeah totally um so using this website's

00:03:16,879 --> 00:03:20,560
kind of complicated but essentially

00:03:18,720 --> 00:03:22,319
the way i got into webassembly is that i

00:03:20,560 --> 00:03:22,640
think it went stable and all black i

00:03:22,319 --> 00:03:25,200
guess

00:03:22,640 --> 00:03:26,080
committed in all browsers around 2018

00:03:25,200 --> 00:03:27,280
and then

00:03:26,080 --> 00:03:28,879
like right when i hit all browsers it's

00:03:27,280 --> 00:03:30,560
like oh no i'm already late this

00:03:28,879 --> 00:03:32,560
technology's proven it's in all browsers

00:03:30,560 --> 00:03:34,319
i got to build something today um

00:03:32,560 --> 00:03:36,000
so i was still a senior in college and

00:03:34,319 --> 00:03:37,200
like it was just kind of funny because i

00:03:36,000 --> 00:03:38,640
had this like weird schedule where i

00:03:37,200 --> 00:03:40,400
could work at like three in the morning

00:03:38,640 --> 00:03:42,879
and like not have to go to for class

00:03:40,400 --> 00:03:44,560
because i had all night classes um

00:03:42,879 --> 00:03:45,680
anyways i just started working on a game

00:03:44,560 --> 00:03:47,280
or an emulator

00:03:45,680 --> 00:03:49,280
in my free time that i want to like run

00:03:47,280 --> 00:03:50,480
on the web um and then i end up working

00:03:49,280 --> 00:03:52,480
out and essentially this is just the

00:03:50,480 --> 00:03:54,159
game boy emulator that i built

00:03:52,480 --> 00:03:55,360
about yeah i don't you work on it as

00:03:54,159 --> 00:03:56,319
much just because i've been quite busy

00:03:55,360 --> 00:03:58,239
lately but

00:03:56,319 --> 00:04:00,080
yeah if you go to uh just i guess just

00:03:58,239 --> 00:04:01,920
show it off if you go to open

00:04:00,080 --> 00:04:03,760
on the top left and then you go to open

00:04:01,920 --> 00:04:04,879
source roms this is all the games that

00:04:03,760 --> 00:04:05,519
are open source and you can click the

00:04:04,879 --> 00:04:08,080
first one

00:04:05,519 --> 00:04:09,519
let's say yep and then if you click play

00:04:08,080 --> 00:04:10,400
and playback controls i know it's like

00:04:09,519 --> 00:04:12,640
the most

00:04:10,400 --> 00:04:14,400
unintuitive but it's meant for debugging

00:04:12,640 --> 00:04:15,280
so just to like shut it off if you go to

00:04:14,400 --> 00:04:17,919
widgets in the top

00:04:15,280 --> 00:04:19,840
left as well and let's say let's go to

00:04:17,919 --> 00:04:22,320
cpu for example

00:04:19,840 --> 00:04:23,520
and then you can go to just state and

00:04:22,320 --> 00:04:24,880
you can see it

00:04:23,520 --> 00:04:27,120
you can move around the tabs and stuff

00:04:24,880 --> 00:04:28,880
if you anyways but

00:04:27,120 --> 00:04:31,280
essentially it'll show you what's going

00:04:28,880 --> 00:04:32,800
on in like in the cpu so essentially

00:04:31,280 --> 00:04:34,880
it's an emulator so it's really

00:04:32,800 --> 00:04:36,400
emulating what the chips do on the game

00:04:34,880 --> 00:04:37,520
boy how the electricity runs through the

00:04:36,400 --> 00:04:38,800
system and everything

00:04:37,520 --> 00:04:40,479
and you can see how it's executing

00:04:38,800 --> 00:04:41,120
through the program counter it's very

00:04:40,479 --> 00:04:44,479
low level

00:04:41,120 --> 00:04:45,360
but um it wouldn't be something if

00:04:44,479 --> 00:04:47,600
someone wanted to

00:04:45,360 --> 00:04:48,479
like build their own roms or develop

00:04:47,600 --> 00:04:50,639
four

00:04:48,479 --> 00:04:52,160
games today yeah so this is kind of the

00:04:50,639 --> 00:04:53,120
debugger here so if you for example

00:04:52,160 --> 00:04:54,960
wanted to

00:04:53,120 --> 00:04:56,479
you know build an actual gameboy game

00:04:54,960 --> 00:04:57,919
instead of like downloading another

00:04:56,479 --> 00:04:58,639
emulator you could just use this one in

00:04:57,919 --> 00:05:00,240
the web

00:04:58,639 --> 00:05:01,440
and just upload the rom over and over

00:05:00,240 --> 00:05:02,800
and see like how your program's

00:05:01,440 --> 00:05:04,960
executing and everything

00:05:02,800 --> 00:05:05,840
oh that's amazing yeah that's pretty

00:05:04,960 --> 00:05:07,680
awesome uh

00:05:05,840 --> 00:05:09,120
i have to ask do you have any have you

00:05:07,680 --> 00:05:10,000
built any games or is this more of you

00:05:09,120 --> 00:05:13,199
just sort of testing it

00:05:10,000 --> 00:05:14,960
out um so i built a demo once i wanted

00:05:13,199 --> 00:05:16,000
to make like a super smash brothers type

00:05:14,960 --> 00:05:17,840
game for game boy

00:05:16,000 --> 00:05:19,360
and uh i had it all planned out and then

00:05:17,840 --> 00:05:20,800
i just never got the time i

00:05:19,360 --> 00:05:22,160
got to the level point where i could

00:05:20,800 --> 00:05:24,000
jump yeah and then i was like okay

00:05:22,160 --> 00:05:25,520
that's too much work

00:05:24,000 --> 00:05:26,800
i mean i've never done any game

00:05:25,520 --> 00:05:27,840
development but i know it's a lot of

00:05:26,800 --> 00:05:30,639
work

00:05:27,840 --> 00:05:32,080
that's why i work on the web instead

00:05:30,639 --> 00:05:33,440
yeah that's pretty uh that's pretty

00:05:32,080 --> 00:05:35,120
legit and uh

00:05:33,440 --> 00:05:36,560
pretty cool pretty cool example too as

00:05:35,120 --> 00:05:38,880
well and like the shout out to the fact

00:05:36,560 --> 00:05:41,039
that this is um open source

00:05:38,880 --> 00:05:43,360
folks drop in the uh drop a star over

00:05:41,039 --> 00:05:47,039
there show some some love

00:05:43,360 --> 00:05:49,520
um on some wasn't boy for sure yeah

00:05:47,039 --> 00:05:50,639
um so i'm that's probably the the most

00:05:49,520 --> 00:05:53,280
like flashy demo

00:05:50,639 --> 00:05:54,960
i have of webassembly uh that being said

00:05:53,280 --> 00:05:56,240
i could go through this real quick i

00:05:54,960 --> 00:05:57,039
have like a little article that someone

00:05:56,240 --> 00:05:59,680
wrote

00:05:57,039 --> 00:06:00,479
okay i'll switch over to your screen

00:05:59,680 --> 00:06:03,600
cool

00:06:00,479 --> 00:06:04,319
so yeah this is a let me zoom in boom

00:06:03,600 --> 00:06:06,479
boom

00:06:04,319 --> 00:06:08,080
cool so this is an article by marshall

00:06:06,479 --> 00:06:09,680
nguyen um essentially

00:06:08,080 --> 00:06:11,360
a lot of the times you get the question

00:06:09,680 --> 00:06:12,960
of like okay webassembly that's cool you

00:06:11,360 --> 00:06:15,120
have an emulator going but like

00:06:12,960 --> 00:06:16,560
who's using it in production um and this

00:06:15,120 --> 00:06:19,840
is a great example i think

00:06:16,560 --> 00:06:20,639
essentially they work on am i my creole

00:06:19,840 --> 00:06:22,560
storytelling

00:06:20,639 --> 00:06:23,919
essentially it's like a you know little

00:06:22,560 --> 00:06:26,160
tool where you can like do visual

00:06:23,919 --> 00:06:27,039
storytelling and things on the web which

00:06:26,160 --> 00:06:27,840
is like really cool

00:06:27,039 --> 00:06:29,840
and it's like a whole little

00:06:27,840 --> 00:06:31,440
storyboarding thing but essentially they

00:06:29,840 --> 00:06:33,120
have a story about how they used to only

00:06:31,440 --> 00:06:34,319
use javascript in the browser to do all

00:06:33,120 --> 00:06:35,600
their rendering

00:06:34,319 --> 00:06:37,039
and i'll just scroll down here real

00:06:35,600 --> 00:06:38,080
quick to show like the flashy stuff

00:06:37,039 --> 00:06:40,080
essentially they

00:06:38,080 --> 00:06:41,840
pretty much took a lot of that um

00:06:40,080 --> 00:06:42,880
javascript code and they converted it to

00:06:41,840 --> 00:06:44,000
the assemblyscript language i was

00:06:42,880 --> 00:06:44,880
talking about the typescript like

00:06:44,000 --> 00:06:46,400
language

00:06:44,880 --> 00:06:48,800
and they got some really cool benefits

00:06:46,400 --> 00:06:50,080
from it and let me see if i can find the

00:06:48,800 --> 00:06:51,280
numbers i don't want to like just make

00:06:50,080 --> 00:06:54,160
up numbers because

00:06:51,280 --> 00:06:55,120
then i'd feel bad after it's a long

00:06:54,160 --> 00:06:56,479
article so if you're interested in

00:06:55,120 --> 00:06:57,680
webassembly this is like especially want

00:06:56,479 --> 00:06:58,720
to use it in production this is like the

00:06:57,680 --> 00:07:01,120
article to read

00:06:58,720 --> 00:07:02,400
but for example something like this

00:07:01,120 --> 00:07:04,000
you'll see that like

00:07:02,400 --> 00:07:05,599
for right here they're talking about

00:07:04,000 --> 00:07:07,199
like originally on the left-hand side

00:07:05,599 --> 00:07:07,759
like when they use javascript and 3gs

00:07:07,199 --> 00:07:08,880
and things

00:07:07,759 --> 00:07:10,639
and they switched over to their new

00:07:08,880 --> 00:07:11,360
renderer they had rewritten in some of

00:07:10,639 --> 00:07:13,120
the script

00:07:11,360 --> 00:07:14,479
that their bundle size essentially like

00:07:13,120 --> 00:07:16,080
almost cut in half

00:07:14,479 --> 00:07:17,360
by just you know instead of replacing

00:07:16,080 --> 00:07:18,720
all that like extra javascript code with

00:07:17,360 --> 00:07:21,199
the webassembly module

00:07:18,720 --> 00:07:22,560
which is really cool um they did a bunch

00:07:21,199 --> 00:07:23,840
of other benchmarks here and you'll see

00:07:22,560 --> 00:07:25,599
here that like they're using way less

00:07:23,840 --> 00:07:26,400
cpu cycles which is cool because now

00:07:25,599 --> 00:07:27,680
you're

00:07:26,400 --> 00:07:29,919
for example if you were on your phone

00:07:27,680 --> 00:07:31,360
let's say if your application was mobile

00:07:29,919 --> 00:07:32,960
then like now you're just using way less

00:07:31,360 --> 00:07:34,479
battery you're using a lot less cpu

00:07:32,960 --> 00:07:35,280
cycles it's gonna feel more snappy and

00:07:34,479 --> 00:07:37,280
smooth

00:07:35,280 --> 00:07:38,720
um and all in all i think it's just

00:07:37,280 --> 00:07:39,440
really cool to see stuff like this

00:07:38,720 --> 00:07:40,639
because

00:07:39,440 --> 00:07:42,000
i don't know about you but when i was

00:07:40,639 --> 00:07:43,280
first learning javascript i eventually

00:07:42,000 --> 00:07:44,800
hit that point where i was like i want

00:07:43,280 --> 00:07:46,879
to build a video editor in a browser

00:07:44,800 --> 00:07:48,160
and then i realized oh that just won't

00:07:46,879 --> 00:07:49,599
work because like

00:07:48,160 --> 00:07:51,199
this is not how the technology works in

00:07:49,599 --> 00:07:52,240
the browser but now with webassembly we

00:07:51,199 --> 00:07:53,599
can do things like these high

00:07:52,240 --> 00:07:55,759
performance like

00:07:53,599 --> 00:07:58,400
really like wild you would expect to run

00:07:55,759 --> 00:08:00,720
in c type applications but in the web

00:07:58,400 --> 00:08:01,440
which is really cool um and i guess

00:08:00,720 --> 00:08:04,479
right here yeah

00:08:01,440 --> 00:08:06,879
65 less cpu used so like just

00:08:04,479 --> 00:08:08,240
you know all the cpu cycles you use way

00:08:06,879 --> 00:08:10,000
more efficiently and they

00:08:08,240 --> 00:08:12,080
got way a lot of performance benefits

00:08:10,000 --> 00:08:13,840
out of it so yeah um

00:08:12,080 --> 00:08:14,960
yeah i don't know i can't talk this

00:08:13,840 --> 00:08:15,840
article on for enough because when i

00:08:14,960 --> 00:08:18,560
first saw it i was like

00:08:15,840 --> 00:08:19,759
yes yeah definitely um let me i think

00:08:18,560 --> 00:08:21,280
this is probably the best example to

00:08:19,759 --> 00:08:23,520
show right here

00:08:21,280 --> 00:08:24,479
so um essentially what i tell people is

00:08:23,520 --> 00:08:26,160
the summer script

00:08:24,479 --> 00:08:27,599
is what i mean by typescript like is

00:08:26,160 --> 00:08:29,280
that if you can read and understand

00:08:27,599 --> 00:08:30,879
typescript and write typescript

00:08:29,280 --> 00:08:32,560
you can pretty much use assembly script

00:08:30,879 --> 00:08:34,080
for the most part the difference is

00:08:32,560 --> 00:08:35,919
where it comes in is because again we

00:08:34,080 --> 00:08:37,599
have the static typing in things

00:08:35,919 --> 00:08:39,360
essentially what assemblyscript does is

00:08:37,599 --> 00:08:40,080
take typescript and just add the little

00:08:39,360 --> 00:08:41,839
like

00:08:40,080 --> 00:08:43,120
extra flares that webassembly needs to

00:08:41,839 --> 00:08:44,800
be compiled to

00:08:43,120 --> 00:08:46,320
so for example here normally you would

00:08:44,800 --> 00:08:46,720
write like okay this parameter right

00:08:46,320 --> 00:08:48,240
here

00:08:46,720 --> 00:08:49,760
this would be a number but because

00:08:48,240 --> 00:08:50,320
webassembly has that static typing you

00:08:49,760 --> 00:08:52,800
need to say

00:08:50,320 --> 00:08:53,519
this is a number that's an integer of 32

00:08:52,800 --> 00:08:55,519
bits

00:08:53,519 --> 00:08:57,120
and that's you know like you have to be

00:08:55,519 --> 00:08:58,480
more specific with our typing

00:08:57,120 --> 00:09:00,160
um and when you do that to your

00:08:58,480 --> 00:09:01,680
typescript using assembly script you can

00:09:00,160 --> 00:09:02,640
then compile the webassembly and reap

00:09:01,680 --> 00:09:04,000
those benefits

00:09:02,640 --> 00:09:05,839
that webassembly offers you know what i

00:09:04,000 --> 00:09:08,000
mean um

00:09:05,839 --> 00:09:09,680
so uh but it and again like i want to

00:09:08,000 --> 00:09:11,279
say it's so typescript like because

00:09:09,680 --> 00:09:12,959
um a lot of the project is very

00:09:11,279 --> 00:09:14,959
grassroots like i

00:09:12,959 --> 00:09:16,320
started off with uh just the author that

00:09:14,959 --> 00:09:17,440
wrote it and then i started building the

00:09:16,320 --> 00:09:18,800
wisem boy thing

00:09:17,440 --> 00:09:19,920
and then i started helping out with

00:09:18,800 --> 00:09:20,560
issues and things and eventually

00:09:19,920 --> 00:09:22,480
compiling

00:09:20,560 --> 00:09:24,000
or i do a few contributions compiler

00:09:22,480 --> 00:09:25,519
here and there but mostly like

00:09:24,000 --> 00:09:27,200
libraries and things of that sort and

00:09:25,519 --> 00:09:28,480
then another person came along and now

00:09:27,200 --> 00:09:29,200
it's grown into like a really large

00:09:28,480 --> 00:09:31,040
community

00:09:29,200 --> 00:09:32,399
choose a subway script over typescript

00:09:31,040 --> 00:09:33,920
then at that point

00:09:32,399 --> 00:09:35,680
yes so that's i'm glad you asked that

00:09:33,920 --> 00:09:38,959
because i have a

00:09:35,680 --> 00:09:42,000
webassembly versus es6 so this is a

00:09:38,959 --> 00:09:44,480
a benchmark i had wrote with wisemboy uh

00:09:42,000 --> 00:09:45,519
way back like well not way back i guess

00:09:44,480 --> 00:09:47,600
was it 2018

00:09:45,519 --> 00:09:49,760
i guess it feels like way back yeah in

00:09:47,600 --> 00:09:51,200
web years that's way back

00:09:49,760 --> 00:09:53,040
yeah we've had so many frameworks since

00:09:51,200 --> 00:09:54,720
then yeah but

00:09:53,040 --> 00:09:56,080
essentially what i did is i took my

00:09:54,720 --> 00:09:57,360
emulator and again i mentioned that

00:09:56,080 --> 00:09:59,120
since they're so similar

00:09:57,360 --> 00:10:00,240
we can use the same source code for the

00:09:59,120 --> 00:10:01,839
emulator and compile it with the

00:10:00,240 --> 00:10:03,040
typescript compiler to javascript

00:10:01,839 --> 00:10:05,040
and then compile it with the assembly

00:10:03,040 --> 00:10:05,760
compiler to webassembly and compare the

00:10:05,040 --> 00:10:07,360
two

00:10:05,760 --> 00:10:09,200
um and then i have a bunch of graphs

00:10:07,360 --> 00:10:09,680
here and stuff but what you'll mostly

00:10:09,200 --> 00:10:12,399
notice

00:10:09,680 --> 00:10:13,519
is that um essentially you get about at

00:10:12,399 --> 00:10:14,640
least in my use case

00:10:13,519 --> 00:10:16,640
it's gonna be different for every use

00:10:14,640 --> 00:10:18,240
case but i saw about like a 30

00:10:16,640 --> 00:10:20,560
increase in terms of performance just in

00:10:18,240 --> 00:10:23,360
general like how many frames can i run

00:10:20,560 --> 00:10:24,240
in a time span on desktop but what gets

00:10:23,360 --> 00:10:26,320
really interesting

00:10:24,240 --> 00:10:28,000
is just for me i'm really big into like

00:10:26,320 --> 00:10:28,720
mobile like you know low end device

00:10:28,000 --> 00:10:31,120
usage

00:10:28,720 --> 00:10:32,560
you start to see like a way biggest way

00:10:31,120 --> 00:10:34,480
bigger performance delta

00:10:32,560 --> 00:10:36,800
and usually that i guess like you see

00:10:34,480 --> 00:10:38,560
about a 60 increase in performance so

00:10:36,800 --> 00:10:40,000
as the hardware gets slower and slower

00:10:38,560 --> 00:10:41,360
the more that web assembly

00:10:40,000 --> 00:10:43,040
i've noticed starts to help out in these

00:10:41,360 --> 00:10:44,240
like real world type use cases when

00:10:43,040 --> 00:10:44,880
you're building games and things of that

00:10:44,240 --> 00:10:47,279
sort

00:10:44,880 --> 00:10:48,079
um so i know these numbers might seem a

00:10:47,279 --> 00:10:51,120
lot bigger

00:10:48,079 --> 00:10:52,880
i forgot these numbers are big there is

00:10:51,120 --> 00:10:53,519
oh yeah but no this this is true then

00:10:52,880 --> 00:10:56,800
okay cool

00:10:53,519 --> 00:10:57,920
my bad 2.59 times as fast um there was a

00:10:56,800 --> 00:10:59,040
bug with firefox

00:10:57,920 --> 00:11:00,880
and that was really cool too building

00:10:59,040 --> 00:11:02,320
this project i found like i think i

00:11:00,880 --> 00:11:03,600
found a bug in every browser and like

00:11:02,320 --> 00:11:05,519
their web assembly implementation which

00:11:03,600 --> 00:11:08,079
is like kind of funny to say

00:11:05,519 --> 00:11:09,920
yeah that's some other popular use cases

00:11:08,079 --> 00:11:11,360
yeah so um i guess

00:11:09,920 --> 00:11:13,279
another really popular use case that

00:11:11,360 --> 00:11:14,880
we're seeing a lot of serverless um

00:11:13,279 --> 00:11:16,320
kind of you know i guess i almost

00:11:14,880 --> 00:11:17,519
alluded to it with the javascript inside

00:11:16,320 --> 00:11:20,320
the web assembly thing but

00:11:17,519 --> 00:11:20,800
this idea of sandboxing untrusted code

00:11:20,320 --> 00:11:22,160
is

00:11:20,800 --> 00:11:24,079
essentially what serverless does at

00:11:22,160 --> 00:11:24,800
scale um you know on a server somewhere

00:11:24,079 --> 00:11:26,720
for you

00:11:24,800 --> 00:11:28,240
um so because of that we're starting to

00:11:26,720 --> 00:11:29,360
see a lot of like companies popping up

00:11:28,240 --> 00:11:30,640
with like

00:11:29,360 --> 00:11:32,000
serverless solutions that are really

00:11:30,640 --> 00:11:33,279
powered by webassembly because of their

00:11:32,000 --> 00:11:34,880
security benefits

00:11:33,279 --> 00:11:36,640
um such as like their capability-based

00:11:34,880 --> 00:11:37,920
security model where webassembly can

00:11:36,640 --> 00:11:38,560
only really do what you give it access

00:11:37,920 --> 00:11:40,160
to

00:11:38,560 --> 00:11:41,120
that linear memory again that's really

00:11:40,160 --> 00:11:42,399
great because you don't want people

00:11:41,120 --> 00:11:43,680
escalating out touching other people's

00:11:42,399 --> 00:11:44,959
memory

00:11:43,680 --> 00:11:47,839
if your runtime supports that and things

00:11:44,959 --> 00:11:52,480
of that sort so yeah i would see

00:11:47,839 --> 00:11:53,839
serverless is a big one gaming um

00:11:52,480 --> 00:11:55,519
i think another good use case i could

00:11:53,839 --> 00:11:57,279
think of on top of my head is figma

00:11:55,519 --> 00:11:58,959
which is a popular design tool they do a

00:11:57,279 --> 00:12:01,360
lot of their rendering and web assembly

00:11:58,959 --> 00:12:03,200
interesting so um yeah a lot of like i

00:12:01,360 --> 00:12:05,519
guess browser applications

00:12:03,200 --> 00:12:07,279
and maybe one last thing just i'm

00:12:05,519 --> 00:12:08,800
rambling so hard right now i'm sorry but

00:12:07,279 --> 00:12:11,120
no this is all interesting because i did

00:12:08,800 --> 00:12:13,760
not know all this information

00:12:11,120 --> 00:12:15,519
cool um another big one i think is um

00:12:13,760 --> 00:12:16,639
kind of the idea of containerization

00:12:15,519 --> 00:12:18,959
i don't know if you saw the tweet from

00:12:16,639 --> 00:12:20,160
solomon hikes it's kind of like famous

00:12:18,959 --> 00:12:22,079
or infamous i don't know i don't know

00:12:20,160 --> 00:12:23,680
how to use that word but

00:12:22,079 --> 00:12:25,920
they pretty much said like if wasm and

00:12:23,680 --> 00:12:26,800
wazzy wazzy's the webassembly system

00:12:25,920 --> 00:12:28,720
interface

00:12:26,800 --> 00:12:30,240
it's kind of like node for webassembly

00:12:28,720 --> 00:12:30,560
like you can access file system and

00:12:30,240 --> 00:12:32,079
stuff

00:12:30,560 --> 00:12:33,760
it's terrible generalization but you

00:12:32,079 --> 00:12:35,200
know for javascript people but it makes

00:12:33,760 --> 00:12:37,040
sense to us i think

00:12:35,200 --> 00:12:38,160
but if they existed back in 2008 they

00:12:37,040 --> 00:12:39,440
wouldn't have built docker because they

00:12:38,160 --> 00:12:40,639
could have just used what was some of

00:12:39,440 --> 00:12:42,160
the security benefits

00:12:40,639 --> 00:12:44,320
plus that like those capabilities that

00:12:42,160 --> 00:12:45,839
you would provide to do what docker does

00:12:44,320 --> 00:12:46,800
like this idea of containerization of

00:12:45,839 --> 00:12:48,480
like code and

00:12:46,800 --> 00:12:49,920
things of that sort so we're starting to

00:12:48,480 --> 00:12:51,200
see a lot of movement in that space and

00:12:49,920 --> 00:12:51,680
open source projects that are kind of

00:12:51,200 --> 00:12:53,600
like

00:12:51,680 --> 00:12:54,639
hey instead of like you know using a

00:12:53,600 --> 00:12:55,600
whole container with all the os

00:12:54,639 --> 00:12:57,120
primitives we could just use a

00:12:55,600 --> 00:12:57,760
webassembly runtime it would be way

00:12:57,120 --> 00:12:59,200
lighter

00:12:57,760 --> 00:13:00,880
and we can start to containerize our

00:12:59,200 --> 00:13:01,839
code and things of that sort using

00:13:00,880 --> 00:13:03,440
webassembly

00:13:01,839 --> 00:13:05,200
it doesn't completely replace containers

00:13:03,440 --> 00:13:06,880
but like yeah there is a world where

00:13:05,200 --> 00:13:08,320
like web assembly containers make sense

00:13:06,880 --> 00:13:10,160
so i want to struggle back into

00:13:08,320 --> 00:13:12,000
assembly script and talk more about that

00:13:10,160 --> 00:13:15,360
project and sort of how

00:13:12,000 --> 00:13:17,040
it's set up and how um like

00:13:15,360 --> 00:13:18,560
what what are we looking at in the ford

00:13:17,040 --> 00:13:20,880
like what are the things that assembly

00:13:18,560 --> 00:13:23,839
skip is looking to accomplish

00:13:20,880 --> 00:13:25,040
yeah um in terms of like high level road

00:13:23,839 --> 00:13:26,399
map goals or like

00:13:25,040 --> 00:13:28,160
what's next on our road map things of

00:13:26,399 --> 00:13:29,120
that sort yeah i mean you'd mention so

00:13:28,160 --> 00:13:30,800
assembly script

00:13:29,120 --> 00:13:32,160
uh it's not it's not backed by anything

00:13:30,800 --> 00:13:33,040
to a company it has an open collective

00:13:32,160 --> 00:13:35,920
so you guys have

00:13:33,040 --> 00:13:36,240
a sort of core team i imagine yeah that

00:13:35,920 --> 00:13:38,079
has

00:13:36,240 --> 00:13:40,160
thoughts and ideas so like who's part of

00:13:38,079 --> 00:13:41,600
the core team who's driving

00:13:40,160 --> 00:13:43,279
the road map and like what are the

00:13:41,600 --> 00:13:46,560
things that we should be looking out for

00:13:43,279 --> 00:13:47,440
to be able to try cool um so yeah we do

00:13:46,560 --> 00:13:50,959
have a core team

00:13:47,440 --> 00:13:53,120
we have a repo called core you know um

00:13:50,959 --> 00:13:54,480
uh and i'm on the core team but we have

00:13:53,120 --> 00:13:57,360
a list of people

00:13:54,480 --> 00:13:57,760
so uh right now like pretty much we have

00:13:57,360 --> 00:14:00,000
a

00:13:57,760 --> 00:14:00,959
you know we have a core team but more

00:14:00,000 --> 00:14:02,480
rather than like

00:14:00,959 --> 00:14:04,160
you know say these are the three people

00:14:02,480 --> 00:14:05,360
you should talk to we just would rather

00:14:04,160 --> 00:14:06,320
be like hey look depending on what you

00:14:05,360 --> 00:14:07,199
want to do or like what you're

00:14:06,320 --> 00:14:08,560
interested in

00:14:07,199 --> 00:14:10,399
these are the folks that are most active

00:14:08,560 --> 00:14:11,199
in the project so we're all part of the

00:14:10,399 --> 00:14:12,959
core team but

00:14:11,199 --> 00:14:14,000
you know what i'm trying to say yeah um

00:14:12,959 --> 00:14:15,279
so yeah this is pretty much the core

00:14:14,000 --> 00:14:18,399
team here like uh

00:14:15,279 --> 00:14:20,399
daniel is the author max is like daniel

00:14:18,399 --> 00:14:21,839
and max are pretty much like the

00:14:20,399 --> 00:14:24,000
co-partners on like building the actual

00:14:21,839 --> 00:14:26,000
compiler i do a lot of like outreach

00:14:24,000 --> 00:14:27,600
um libraries buildings and stuff joshua

00:14:26,000 --> 00:14:30,000
tenor wrote an amazing

00:14:27,600 --> 00:14:31,519
just like testing library that like

00:14:30,000 --> 00:14:33,040
anyone using a summon super production

00:14:31,519 --> 00:14:33,760
pretty much uses so that's like really

00:14:33,040 --> 00:14:35,279
cool

00:14:33,760 --> 00:14:36,720
um and a bunch of other folks here i

00:14:35,279 --> 00:14:38,320
don't want to name you know sit here for

00:14:36,720 --> 00:14:38,639
like 10 minutes oh yeah this guy built

00:14:38,320 --> 00:14:41,760
this

00:14:38,639 --> 00:14:43,600
this birthday built this but yeah this

00:14:41,760 --> 00:14:44,800
is good to know too as well and uh

00:14:43,600 --> 00:14:46,720
i don't know if a lot of other projects

00:14:44,800 --> 00:14:48,880
have like core repo

00:14:46,720 --> 00:14:50,720
yeah but yeah this is super useful i

00:14:48,880 --> 00:14:52,240
actually took notes um so another thing

00:14:50,720 --> 00:14:54,399
about me is i used to work on the amp

00:14:52,240 --> 00:14:56,399
team at google and honestly i learned

00:14:54,399 --> 00:14:57,519
a lot from just working on like a larger

00:14:56,399 --> 00:14:58,720
open source project from google and i

00:14:57,519 --> 00:14:59,920
was like okay that's

00:14:58,720 --> 00:15:01,279
so they have a similar thing where they

00:14:59,920 --> 00:15:03,199
have a core repo and i was like that was

00:15:01,279 --> 00:15:04,560
a good idea let me uh

00:15:03,199 --> 00:15:06,320
let me bring this over to some of the

00:15:04,560 --> 00:15:08,560
scripts yeah

00:15:06,320 --> 00:15:09,680
but uh what's going to say about this

00:15:08,560 --> 00:15:12,079
but you asked about

00:15:09,680 --> 00:15:13,600
our roadmap and things so personally um

00:15:12,079 --> 00:15:16,480
i think we all honestly have

00:15:13,600 --> 00:15:17,839
different you know goals and things but

00:15:16,480 --> 00:15:19,360
i think the big one we've all kind of

00:15:17,839 --> 00:15:20,800
like agreed upon is the next

00:15:19,360 --> 00:15:22,480
or like the last big thing that we need

00:15:20,800 --> 00:15:24,399
for the compiler is closures

00:15:22,480 --> 00:15:25,519
um so the idea of like passing functions

00:15:24,399 --> 00:15:27,279
around it's kind of like

00:15:25,519 --> 00:15:28,320
fundamental to like how an advanced

00:15:27,279 --> 00:15:29,759
javascript developer writes their

00:15:28,320 --> 00:15:31,600
javascript applications

00:15:29,759 --> 00:15:32,720
um so it's one like our last big

00:15:31,600 --> 00:15:33,440
sticking point is that we're missing

00:15:32,720 --> 00:15:36,880
that because

00:15:33,440 --> 00:15:38,720
you know writing compilers is hard

00:15:36,880 --> 00:15:40,079
but uh i think that's the last one and

00:15:38,720 --> 00:15:42,399
then after that i think we might start

00:15:40,079 --> 00:15:43,839
considering things like 1. 1.0 in the

00:15:42,399 --> 00:15:46,560
project and this of that sort

00:15:43,839 --> 00:15:47,279
um another uh the other last sticking

00:15:46,560 --> 00:15:50,240
point was red

00:15:47,279 --> 00:15:51,120
wreckage regex but that was written by

00:15:50,240 --> 00:15:52,639
colin

00:15:51,120 --> 00:15:54,639
they built an assembly for projects

00:15:52,639 --> 00:15:55,519
library which isn't like fully fleshed

00:15:54,639 --> 00:15:56,959
out but

00:15:55,519 --> 00:15:58,160
people are using it and it's working for

00:15:56,959 --> 00:16:00,079
them so we're like alright cool like

00:15:58,160 --> 00:16:02,959
check that one off the box

00:16:00,079 --> 00:16:04,320
i mean in the meantime um but yeah does

00:16:02,959 --> 00:16:04,800
that answer the question um yeah the

00:16:04,320 --> 00:16:06,399
enclosure's

00:16:04,800 --> 00:16:08,000
probably like the biggest thing that

00:16:06,399 --> 00:16:09,600
yeah it's good to know um

00:16:08,000 --> 00:16:11,040
and yeah that was going to catch up on

00:16:09,600 --> 00:16:11,600
like things that are missing too as well

00:16:11,040 --> 00:16:13,839
but

00:16:11,600 --> 00:16:14,959
uh so i'm curious how would folks if

00:16:13,839 --> 00:16:16,560
they're interested in you getting

00:16:14,959 --> 00:16:17,920
started with webassembly maybe want to

00:16:16,560 --> 00:16:20,240
build a project like what would

00:16:17,920 --> 00:16:22,240
your recommendation be oh yeah um so

00:16:20,240 --> 00:16:23,120
another website i maintain is wasn't by

00:16:22,240 --> 00:16:25,440
example

00:16:23,120 --> 00:16:27,120
um so what this is is essentially it's

00:16:25,440 --> 00:16:28,560
like a very hand-holdy i don't know if

00:16:27,120 --> 00:16:30,800
you're familiar with go by example

00:16:28,560 --> 00:16:32,480
yes um yeah so it's like go by example

00:16:30,800 --> 00:16:33,839
where it's a lot of bite-sized examples

00:16:32,480 --> 00:16:35,199
this one i will is a little bit more

00:16:33,839 --> 00:16:36,079
hand-holding a little bit more tutorial

00:16:35,199 --> 00:16:37,440
style but

00:16:36,079 --> 00:16:39,759
it does have a lot of copy-pastable

00:16:37,440 --> 00:16:41,199
snippets for sure so for example here

00:16:39,759 --> 00:16:42,320
we're talking about the whole concept of

00:16:41,199 --> 00:16:44,480
linear memory

00:16:42,320 --> 00:16:45,360
and uh one other thing i'll take a step

00:16:44,480 --> 00:16:47,120
back real quick

00:16:45,360 --> 00:16:48,320
there's a language so you can choose

00:16:47,120 --> 00:16:49,519
what language you're comfortable in and

00:16:48,320 --> 00:16:51,839
do these examples

00:16:49,519 --> 00:16:53,360
which is like i'm pretty stoked on um

00:16:51,839 --> 00:16:54,959
and then we also try to do some

00:16:53,360 --> 00:16:56,720
translations i think we only have rush

00:16:54,959 --> 00:16:57,680
translated to portuguese but someone was

00:16:56,720 --> 00:16:58,720
like hey i know portuguese they'll

00:16:57,680 --> 00:17:01,519
translate

00:16:58,720 --> 00:17:02,720
okay cool yeah thank you but we'll do a

00:17:01,519 --> 00:17:03,519
summary script here just because i'm on

00:17:02,720 --> 00:17:06,000
the chord team there

00:17:03,519 --> 00:17:07,039
it's easiest for me but for example here

00:17:06,000 --> 00:17:08,319
you know we'll say like let's say we

00:17:07,039 --> 00:17:09,839
want to play linear memory

00:17:08,319 --> 00:17:11,760
this is all using pointers just because

00:17:09,839 --> 00:17:13,120
i want to show the concept of like

00:17:11,760 --> 00:17:14,640
here's how you pass things between that

00:17:13,120 --> 00:17:15,760
javascript and webassembly boundary in

00:17:14,640 --> 00:17:17,199
the browser

00:17:15,760 --> 00:17:18,640
um so yeah pretty much it's like you

00:17:17,199 --> 00:17:19,839
know i have a bunch of commented code

00:17:18,640 --> 00:17:21,120
here saying this is what this does this

00:17:19,839 --> 00:17:22,319
is what that's doing

00:17:21,120 --> 00:17:24,160
you know let's compile using the

00:17:22,319 --> 00:17:25,199
compiler and things of that sort so on

00:17:24,160 --> 00:17:28,160
and so forth you know

00:17:25,199 --> 00:17:30,000
words about webassembly and stuff so i

00:17:28,160 --> 00:17:32,320
would definitely go through here um

00:17:30,000 --> 00:17:33,600
it's been funny too because uh it's been

00:17:32,320 --> 00:17:34,880
really like inception because i've been

00:17:33,600 --> 00:17:36,000
doing like interviews with people now

00:17:34,880 --> 00:17:36,720
and they're like oh yeah i learned about

00:17:36,000 --> 00:17:38,799
what was something from

00:17:36,720 --> 00:17:41,039
by example and i'm like what i'm like no

00:17:38,799 --> 00:17:42,640
i don't know

00:17:41,039 --> 00:17:44,720
i built that they're like yeah we know

00:17:42,640 --> 00:17:46,320
you built that like no way

00:17:44,720 --> 00:17:48,559
oh yeah yeah so yeah it's amazing when

00:17:46,320 --> 00:17:51,120
people use the things you uh you build

00:17:48,559 --> 00:17:52,320
yeah um but yeah so pretty much this

00:17:51,120 --> 00:17:53,600
will show you how to like get started

00:17:52,320 --> 00:17:55,440
web assembly in the browser

00:17:53,600 --> 00:17:56,320
again you know there's lots of folks

00:17:55,440 --> 00:17:57,520
that want to want to use it for

00:17:56,320 --> 00:18:00,160
serverless and things um

00:17:57,520 --> 00:18:01,840
that knowledge still transfers over um

00:18:00,160 --> 00:18:03,520
and it does this does start off a little

00:18:01,840 --> 00:18:04,880
bit more low level but it

00:18:03,520 --> 00:18:06,720
eventually shows how to do like more of

00:18:04,880 --> 00:18:08,559
the high level stuff because um

00:18:06,720 --> 00:18:09,840
again not everyone wants to use pointers

00:18:08,559 --> 00:18:12,000
for like their uh

00:18:09,840 --> 00:18:13,600
for their stuff so like there's hey how

00:18:12,000 --> 00:18:14,480
to do like passing high level types and

00:18:13,600 --> 00:18:16,000
stuff and

00:18:14,480 --> 00:18:17,200
classes and kind of the introduction of

00:18:16,000 --> 00:18:17,840
that wow thing i was talking about that

00:18:17,200 --> 00:18:20,240
kind of

00:18:17,840 --> 00:18:21,520
node for web assembly that like kind of

00:18:20,240 --> 00:18:22,000
server side usage how to get started

00:18:21,520 --> 00:18:24,000
there

00:18:22,000 --> 00:18:25,440
um so yeah i think this is mostly people

00:18:24,000 --> 00:18:27,039
have told me like yeah i like started

00:18:25,440 --> 00:18:28,480
here and like now i'm doing web assembly

00:18:27,039 --> 00:18:30,000
professional and stuff i mean not that

00:18:28,480 --> 00:18:31,840
like this is a professional guy but

00:18:30,000 --> 00:18:33,840
you know this is a starting point i

00:18:31,840 --> 00:18:34,559
verified i have proof someone learned

00:18:33,840 --> 00:18:38,000
from this

00:18:34,559 --> 00:18:39,919
point yeah so yeah

00:18:38,000 --> 00:18:41,679
i would start with blazing by example um

00:18:39,919 --> 00:18:42,559
or let's say you're like a really big

00:18:41,679 --> 00:18:44,080
rust fan

00:18:42,559 --> 00:18:45,360
rust has amazing web assembly

00:18:44,080 --> 00:18:46,000
documentation you can start there as

00:18:45,360 --> 00:18:46,880
well

00:18:46,000 --> 00:18:48,640
if you want to start from that

00:18:46,880 --> 00:18:49,520
perspective rather than like the front

00:18:48,640 --> 00:18:52,960
end browser

00:18:49,520 --> 00:18:54,400
person perspective yeah so yeah

00:18:52,960 --> 00:18:56,640
i hope that that helps i don't know if

00:18:54,400 --> 00:18:56,640
that

00:18:58,000 --> 00:19:01,360
i mean this is great too as well because

00:18:59,520 --> 00:19:02,960
you're you're giving us a lot of context

00:19:01,360 --> 00:19:04,960
and a lot of content for uh

00:19:02,960 --> 00:19:06,160
for folks to sort of jump in and get

00:19:04,960 --> 00:19:09,039
started uh

00:19:06,160 --> 00:19:10,480
i'm curious though about the adoption so

00:19:09,039 --> 00:19:13,679
you had mentioned the

00:19:10,480 --> 00:19:15,120
bite size uh by code alliance yeah and

00:19:13,679 --> 00:19:16,720
all those uh folks on the list they're

00:19:15,120 --> 00:19:17,520
all notable companies that we've we've

00:19:16,720 --> 00:19:20,320
heard of

00:19:17,520 --> 00:19:21,520
um but i'm curious about adoption do

00:19:20,320 --> 00:19:22,720
what what do you see where on the

00:19:21,520 --> 00:19:24,000
trajectory of

00:19:22,720 --> 00:19:25,760
the adoption curve when it comes to

00:19:24,000 --> 00:19:27,600
webassembly so like

00:19:25,760 --> 00:19:29,520
i get that firefox is leveraging in

00:19:27,600 --> 00:19:30,960
fastly and cloudflare and all these

00:19:29,520 --> 00:19:34,000
other companies are using it for

00:19:30,960 --> 00:19:35,760
these really intense use cases

00:19:34,000 --> 00:19:37,440
um but when you think webassembly is

00:19:35,760 --> 00:19:39,520
going to become like a normal

00:19:37,440 --> 00:19:40,880
thing that people will pick up and grab

00:19:39,520 --> 00:19:44,080
yeah so um

00:19:40,880 --> 00:19:46,240
another i'm glad you mentioned this uh

00:19:44,080 --> 00:19:47,360
so i think it depends um if i could

00:19:46,240 --> 00:19:49,120
crystal ball a little bit

00:19:47,360 --> 00:19:50,080
um i think we're going to see a lot of

00:19:49,120 --> 00:19:50,960
some of the usage first in the

00:19:50,080 --> 00:19:52,240
serverless space

00:19:50,960 --> 00:19:53,840
yeah just because that's where like a

00:19:52,240 --> 00:19:54,720
lot of like folks are investing the most

00:19:53,840 --> 00:19:56,559
time into

00:19:54,720 --> 00:19:58,240
and i think the browser will probably

00:19:56,559 --> 00:19:59,520
end up like really exploding once more

00:19:58,240 --> 00:20:00,880
people get comfortable with it

00:19:59,520 --> 00:20:03,360
once things like assembly script get a

00:20:00,880 --> 00:20:04,480
lot or even just if you know as more

00:20:03,360 --> 00:20:05,919
tooling comes out for javascript

00:20:04,480 --> 00:20:06,799
developers to like really pick it up you

00:20:05,919 --> 00:20:08,480
can play with it

00:20:06,799 --> 00:20:10,480
or someone could you know implements

00:20:08,480 --> 00:20:11,520
different things but at the end of the

00:20:10,480 --> 00:20:12,640
day i think what's going to be most

00:20:11,520 --> 00:20:13,919
interesting is web with some is going to

00:20:12,640 --> 00:20:14,799
be one of those like behind the scenes

00:20:13,919 --> 00:20:16,799
type things

00:20:14,799 --> 00:20:18,080
so one thing about it being a module is

00:20:16,799 --> 00:20:18,640
that it's really easy to package to an

00:20:18,080 --> 00:20:21,039
npm

00:20:18,640 --> 00:20:21,760
module for example so you can go ahead

00:20:21,039 --> 00:20:24,400
and upload

00:20:21,760 --> 00:20:25,679
the webassembly to like npm for example

00:20:24,400 --> 00:20:26,400
and then just wrap in a little bit of

00:20:25,679 --> 00:20:27,840
javascript

00:20:26,400 --> 00:20:29,919
shim type thing and use it in the

00:20:27,840 --> 00:20:31,200
background so like for example unity for

00:20:29,919 --> 00:20:32,720
example you know we already talked about

00:20:31,200 --> 00:20:34,240
is using web sum in the background

00:20:32,720 --> 00:20:35,760
there's a lot of like js game engines

00:20:34,240 --> 00:20:36,720
that are now implementing web assembly

00:20:35,760 --> 00:20:38,080
in the background

00:20:36,720 --> 00:20:40,080
so you could be using webassembly and

00:20:38,080 --> 00:20:42,159
not even know it at some point

00:20:40,080 --> 00:20:43,360
um so i think we'll i guess maybe the

00:20:42,159 --> 00:20:45,600
end goal will be

00:20:43,360 --> 00:20:46,880
not you know the industry end goal but

00:20:45,600 --> 00:20:48,159
in my personal opinion what i think will

00:20:46,880 --> 00:20:49,760
happen is that webassembly

00:20:48,159 --> 00:20:51,360
for jobs developers will probably sit

00:20:49,760 --> 00:20:52,640
more in the background and like

00:20:51,360 --> 00:20:55,360
some of the folks that like really want

00:20:52,640 --> 00:20:57,600
to use it um but i would like to

00:20:55,360 --> 00:20:59,280
like my personal desire for the world

00:20:57,600 --> 00:21:01,600
would be cool like you know we all start

00:20:59,280 --> 00:21:02,640
learning the web with html css sending

00:21:01,600 --> 00:21:04,240
it to javascript

00:21:02,640 --> 00:21:05,520
and then once you know once you get

00:21:04,240 --> 00:21:07,039
those three nailed down then i think

00:21:05,520 --> 00:21:08,960
webassembly would be like okay

00:21:07,039 --> 00:21:10,159
what's the last key i need to like go

00:21:08,960 --> 00:21:10,400
build that video editor now that i'm

00:21:10,159 --> 00:21:11,840
like

00:21:10,400 --> 00:21:13,679
feeling really comfortable my developer

00:21:11,840 --> 00:21:16,240
skills um

00:21:13,679 --> 00:21:18,480
level one level deeper into having

00:21:16,240 --> 00:21:20,240
access but also performance that you can

00:21:18,480 --> 00:21:22,080
unlock with like a regular javascript

00:21:20,240 --> 00:21:24,480
runtime which i i want to ask

00:21:22,080 --> 00:21:26,080
like are there web assembly runtimes

00:21:24,480 --> 00:21:29,120
like you you mentioned in passive

00:21:26,080 --> 00:21:31,280
about that so like i can use actually

00:21:29,120 --> 00:21:32,799
are there any examples out there yeah so

00:21:31,280 --> 00:21:35,520
probably the one i would most suggest

00:21:32,799 --> 00:21:36,240
is called wasm time um it's built you

00:21:35,520 --> 00:21:38,080
know kind of like

00:21:36,240 --> 00:21:39,840
sponsored by the by code alliance and

00:21:38,080 --> 00:21:41,600
things are

00:21:39,840 --> 00:21:44,000
sponsored the right word you know buy

00:21:41,600 --> 00:21:46,720
code alliance does stuff with it

00:21:44,000 --> 00:21:48,320
so uh yeah it's a you know has a runtime

00:21:46,720 --> 00:21:50,080
there and you can download it and like

00:21:48,320 --> 00:21:52,240
run different webassembly modules

00:21:50,080 --> 00:21:53,600
um but what's cool about wisem time too

00:21:52,240 --> 00:21:54,720
is that let's say

00:21:53,600 --> 00:21:56,400
again we're building some like

00:21:54,720 --> 00:21:56,799
application maybe like a web browser

00:21:56,400 --> 00:21:58,240
maybe

00:21:56,799 --> 00:21:59,919
like a video game itself and we want to

00:21:58,240 --> 00:22:01,679
provide like a scripting tool

00:21:59,919 --> 00:22:04,159
what people oftentimes will do is take

00:22:01,679 --> 00:22:06,799
wisem time embed it in their like rust

00:22:04,159 --> 00:22:08,799
or python or go projects and then allow

00:22:06,799 --> 00:22:10,640
their users to submit or

00:22:08,799 --> 00:22:12,080
maybe their community to submit

00:22:10,640 --> 00:22:12,799
webassembly modules and then they can

00:22:12,080 --> 00:22:14,400
run them

00:22:12,799 --> 00:22:16,320
in wisem time and interface with the

00:22:14,400 --> 00:22:17,760
results they give um

00:22:16,320 --> 00:22:20,480
so for example let me think of a good

00:22:17,760 --> 00:22:22,240
one like for example uh

00:22:20,480 --> 00:22:23,840
a lot of smart contract folks you're

00:22:22,240 --> 00:22:25,120
using things like wisem time

00:22:23,840 --> 00:22:27,280
to go ahead and execute their smart

00:22:25,120 --> 00:22:28,480
contracts and then they pretty much run

00:22:27,280 --> 00:22:29,600
whatever the smart contract is as a

00:22:28,480 --> 00:22:31,840
webassembly module

00:22:29,600 --> 00:22:33,039
get the result that like to just outputs

00:22:31,840 --> 00:22:33,600
and then they can like do whatever they

00:22:33,039 --> 00:22:37,039
want to do

00:22:33,600 --> 00:22:38,880
in their larger application so

00:22:37,039 --> 00:22:40,080
yeah that makes sense i know it's hard i

00:22:38,880 --> 00:22:41,840
need a whiteboard to explain

00:22:40,080 --> 00:22:43,600
it better yeah it makes sense to me

00:22:41,840 --> 00:22:44,000
because like uh the example i have in

00:22:43,600 --> 00:22:46,240
the

00:22:44,000 --> 00:22:47,919
example i use to experiment with

00:22:46,240 --> 00:22:49,679
different javascript runtimes

00:22:47,919 --> 00:22:51,600
is the tool we're using right now to

00:22:49,679 --> 00:22:54,000
stream this to twitch it's called obs

00:22:51,600 --> 00:22:55,840
and obs uses a it uses the regular

00:22:54,000 --> 00:22:58,799
browser runtime for node

00:22:55,840 --> 00:22:59,919
um which is i forget whatever the anyway

00:22:58,799 --> 00:23:02,720
the basic one v8

00:22:59,919 --> 00:23:04,880
uh it uses that and i can interface with

00:23:02,720 --> 00:23:06,880
it as if i'm using it on my terminal or

00:23:04,880 --> 00:23:08,320
if i'm using it in chrome

00:23:06,880 --> 00:23:09,919
but the problem with that is i'm

00:23:08,320 --> 00:23:13,360
shipping this up and shipping

00:23:09,919 --> 00:23:14,400
at this point uh what's the numbers 3300

00:23:13,360 --> 00:23:16,320
kilobits

00:23:14,400 --> 00:23:17,840
per second for the stream so that way

00:23:16,320 --> 00:23:19,360
our faces are not choppy and we're not

00:23:17,840 --> 00:23:20,799
dropping frames

00:23:19,360 --> 00:23:22,400
but would be really nice if i can get

00:23:20,799 --> 00:23:24,880
this down to like zero percent

00:23:22,400 --> 00:23:26,880
cpu usage uh and still have the

00:23:24,880 --> 00:23:30,480
animations and go like between

00:23:26,880 --> 00:23:32,159
here to to here to back to here

00:23:30,480 --> 00:23:33,679
yeah well i meant to put back to your

00:23:32,159 --> 00:23:35,280
screen but what i'm getting at is like

00:23:33,679 --> 00:23:37,440
that takes some power

00:23:35,280 --> 00:23:39,120
yeah like my setup is pretty simple but

00:23:37,440 --> 00:23:40,640
it's pretty simple because i know

00:23:39,120 --> 00:23:42,240
if it gets more intense i could drop

00:23:40,640 --> 00:23:43,600
frames so

00:23:42,240 --> 00:23:45,200
with that being said like i would love

00:23:43,600 --> 00:23:47,039
to see like an obs implementation that

00:23:45,200 --> 00:23:49,120
uses like waxy time or

00:23:47,039 --> 00:23:50,400
all these other brand new javascript

00:23:49,120 --> 00:23:53,200
runtime so that way i can

00:23:50,400 --> 00:23:54,880
ensure me streaming through the internet

00:23:53,200 --> 00:23:56,799
is as fast as possible

00:23:54,880 --> 00:23:58,880
and perhaps even containerized enough

00:23:56,799 --> 00:24:01,600
that i i don't have to worry about

00:23:58,880 --> 00:24:02,720
again dropping frames yeah and i'm glad

00:24:01,600 --> 00:24:04,000
you mentioned that because what you

00:24:02,720 --> 00:24:06,480
identified for sure was

00:24:04,000 --> 00:24:08,320
a good example of where you should try

00:24:06,480 --> 00:24:09,600
web assembly and like whether it be work

00:24:08,320 --> 00:24:11,520
or personal projects and things

00:24:09,600 --> 00:24:12,640
is that like javascript's just slightly

00:24:11,520 --> 00:24:14,000
too slow here let me try to add a

00:24:12,640 --> 00:24:15,600
website let's see if that like gives me

00:24:14,000 --> 00:24:16,640
over the performance hump that i need to

00:24:15,600 --> 00:24:18,559
do my thing

00:24:16,640 --> 00:24:20,960
um so yeah but to your point as well

00:24:18,559 --> 00:24:22,559
yeah this webis has a scripting language

00:24:20,960 --> 00:24:23,679
inside of it so you can do custom like

00:24:22,559 --> 00:24:25,520
plugins and things

00:24:23,679 --> 00:24:26,559
um right now it's in javascript but you

00:24:25,520 --> 00:24:27,840
know if they were to use something like

00:24:26,559 --> 00:24:29,039
why some time i don't want to like just

00:24:27,840 --> 00:24:31,279
be like we'll be if you need to go do

00:24:29,039 --> 00:24:34,000
this live on twitch

00:24:31,279 --> 00:24:35,200
like we're just brainstorming here uh

00:24:34,000 --> 00:24:36,320
they could you know possibly do

00:24:35,200 --> 00:24:37,600
something like wasn't time and then you

00:24:36,320 --> 00:24:38,320
could write a webassembly module and

00:24:37,600 --> 00:24:40,240
like rust

00:24:38,320 --> 00:24:42,080
some script whatever you want to do and

00:24:40,240 --> 00:24:43,360
just load that into obs and then

00:24:42,080 --> 00:24:44,799
ideally you would get all the benefits

00:24:43,360 --> 00:24:46,159
from webassembly compared to using

00:24:44,799 --> 00:24:48,559
something like a

00:24:46,159 --> 00:24:49,440
javascript engine so yeah yeah yeah and

00:24:48,559 --> 00:24:52,000
like i

00:24:49,440 --> 00:24:53,840
i mentioned that example a lot because

00:24:52,000 --> 00:24:54,799
uh it is a pain point for me when i when

00:24:53,840 --> 00:24:57,039
i do streaming

00:24:54,799 --> 00:24:58,640
i've had to upgrade my computer or get a

00:24:57,039 --> 00:24:59,919
graphics card and all of this stuff

00:24:58,640 --> 00:25:01,760
because i need to make sure i can do

00:24:59,919 --> 00:25:03,760
this but it'd be great if i get this

00:25:01,760 --> 00:25:05,279
stream from twitch from my mac laptop

00:25:03,760 --> 00:25:06,880
without the extra

00:25:05,279 --> 00:25:09,039
cables and wires and stuff like that is

00:25:06,880 --> 00:25:10,799
needed to to make sure nothing goes down

00:25:09,039 --> 00:25:12,400
live on air which has happened on

00:25:10,799 --> 00:25:15,039
occasion um

00:25:12,400 --> 00:25:16,480
but yeah i i i think that's amazing i

00:25:15,039 --> 00:25:18,240
think of the folks that are working at

00:25:16,480 --> 00:25:18,880
companies and looking for the next level

00:25:18,240 --> 00:25:21,120
of things

00:25:18,880 --> 00:25:22,159
i know video you mentioned video video

00:25:21,120 --> 00:25:24,240
streaming is something that

00:25:22,159 --> 00:25:26,159
kind of really took off a lot this year

00:25:24,240 --> 00:25:27,679
and yeah seeing more and more tools and

00:25:26,159 --> 00:25:29,039
folks trying to get you know a lossless

00:25:27,679 --> 00:25:29,679
compression and stuff like that for

00:25:29,039 --> 00:25:32,799
stream

00:25:29,679 --> 00:25:33,600
your live events uh we saw hop in get

00:25:32,799 --> 00:25:35,520
acquired or

00:25:33,600 --> 00:25:37,600
you know hop in acquired stream yard

00:25:35,520 --> 00:25:39,039
streaming being a tool to stream

00:25:37,600 --> 00:25:41,520
like that's all stuff that's all built

00:25:39,039 --> 00:25:43,919
in the browser and like using webrtc

00:25:41,520 --> 00:25:46,080
so like do you are there any web simply

00:25:43,919 --> 00:25:48,400
examples of like webrtc and like

00:25:46,080 --> 00:25:49,520
crossing the streams that way yeah so if

00:25:48,400 --> 00:25:52,240
you ever use

00:25:49,520 --> 00:25:53,440
zoom you ever use zoom in the browser

00:25:52,240 --> 00:25:55,840
that uses web assembly

00:25:53,440 --> 00:25:56,960
oh wow yeah so exactly another thing

00:25:55,840 --> 00:25:58,320
where it's just like

00:25:56,960 --> 00:25:59,520
webassembly i think will eventually be

00:25:58,320 --> 00:26:00,720
this thing that just kind of powers the

00:25:59,520 --> 00:26:02,559
web but like no one

00:26:00,720 --> 00:26:04,320
really knows it unless like you're in

00:26:02,559 --> 00:26:06,000
the scene so as it grows

00:26:04,320 --> 00:26:08,480
it'll become more apparent but like yeah

00:26:06,000 --> 00:26:09,520
zoom for web uses webassembly they um

00:26:08,480 --> 00:26:11,039
if i'm not mistaken they have enough

00:26:09,520 --> 00:26:13,039
scripting code base and they just

00:26:11,039 --> 00:26:13,760
compiled that c plus plus code base to

00:26:13,039 --> 00:26:14,880
the web

00:26:13,760 --> 00:26:16,320
and that's how they do all their like

00:26:14,880 --> 00:26:17,679
decoding stuff or something like that

00:26:16,320 --> 00:26:18,640
yeah i'm sure i could find an article

00:26:17,679 --> 00:26:20,080
about it but i don't know if you all

00:26:18,640 --> 00:26:21,520
want to watch me furiously google for

00:26:20,080 --> 00:26:22,960
the next five minutes i mean i think

00:26:21,520 --> 00:26:24,720
people are googling right now as we

00:26:22,960 --> 00:26:26,880
speak

00:26:24,720 --> 00:26:28,640
um but i mean that's it's mind-boggling

00:26:26,880 --> 00:26:30,320
too as well and as you explain

00:26:28,640 --> 00:26:31,919
a web assembly sort of doing the work in

00:26:30,320 --> 00:26:33,279
the background and not sort of like

00:26:31,919 --> 00:26:35,600
trying to teach you

00:26:33,279 --> 00:26:36,720
how to write some sort of syntax or a

00:26:35,600 --> 00:26:39,200
new language or

00:26:36,720 --> 00:26:40,880
a new library and frameworks um i think

00:26:39,200 --> 00:26:41,520
it's something that also introduced me

00:26:40,880 --> 00:26:43,440
to rust

00:26:41,520 --> 00:26:45,440
early on back in like again around the

00:26:43,440 --> 00:26:47,200
time i learned about webassembly

00:26:45,440 --> 00:26:49,120
my intro the rust was when i was writing

00:26:47,200 --> 00:26:50,480
ruby code and

00:26:49,120 --> 00:26:52,159
the first thing i ever learned how to

00:26:50,480 --> 00:26:55,600
build was create a ruby gym

00:26:52,159 --> 00:26:56,960
using rust yeah it's like with ruby um

00:26:55,600 --> 00:26:58,640
a lot of people have problems with ruby

00:26:56,960 --> 00:27:00,159
and like the maybe it's too slow or

00:26:58,640 --> 00:27:03,039
doesn't do what they wanted to do

00:27:00,159 --> 00:27:04,320
and rust was a way to build a ruby gym

00:27:03,039 --> 00:27:06,400
inside like build

00:27:04,320 --> 00:27:08,320
and rust code and then have that point

00:27:06,400 --> 00:27:10,559
to the uh the rubygems file

00:27:08,320 --> 00:27:11,840
uh in the libraries and uh i thought

00:27:10,559 --> 00:27:12,960
that was like mind-boggling that you

00:27:11,840 --> 00:27:14,640
could sort of inject another whole

00:27:12,960 --> 00:27:15,840
another language inside

00:27:14,640 --> 00:27:18,000
of the language that you're normally

00:27:15,840 --> 00:27:19,200
writing so it sounds like webassembly

00:27:18,000 --> 00:27:21,679
could do something very similar

00:27:19,200 --> 00:27:23,360
especially like your zooming sample

00:27:21,679 --> 00:27:25,360
being able to have like webrtc in the

00:27:23,360 --> 00:27:28,080
browser uh and actually

00:27:25,360 --> 00:27:29,600
leverage byte code as opposed to you

00:27:28,080 --> 00:27:31,120
know javascript runtimes and stuff like

00:27:29,600 --> 00:27:34,159
that so

00:27:31,120 --> 00:27:35,200
absolutely fascinating um yeah i

00:27:34,159 --> 00:27:37,760
i'm definitely gonna be going through

00:27:35,200 --> 00:27:40,159
that made with a web uh maple blossom

00:27:37,760 --> 00:27:41,360
example and just like going through that

00:27:40,159 --> 00:27:42,159
i think it's at this point a couple

00:27:41,360 --> 00:27:44,880
hundred

00:27:42,159 --> 00:27:46,720
different 125 projects so yeah gonna

00:27:44,880 --> 00:27:48,799
definitely check that out

00:27:46,720 --> 00:27:50,080
anything else you want to touch or cover

00:27:48,799 --> 00:27:52,720
on webassembly

00:27:50,080 --> 00:27:53,600
um i think that i think we did a pretty

00:27:52,720 --> 00:27:56,399
good round of the

00:27:53,600 --> 00:27:57,760
round of the rounds yeah yeah it was uh

00:27:56,399 --> 00:28:00,480
it was it was quite a tour

00:27:57,760 --> 00:28:01,600
for sure yeah um actually if i mean if

00:28:00,480 --> 00:28:03,039
can i just throw some resources out

00:28:01,600 --> 00:28:05,120
there if you don't go for it

00:28:03,039 --> 00:28:06,320
so another thing is since uh you know

00:28:05,120 --> 00:28:08,559
there's talks and things

00:28:06,320 --> 00:28:09,600
uh i assume since you're watching a

00:28:08,559 --> 00:28:10,720
twitch stream you probably like watching

00:28:09,600 --> 00:28:11,919
talks and things as well

00:28:10,720 --> 00:28:14,080
uh there's a lot of great youtube

00:28:11,919 --> 00:28:15,679
content so webassembly summit is a

00:28:14,080 --> 00:28:17,200
conference i help run with serma you

00:28:15,679 --> 00:28:19,679
know jefferel from google

00:28:17,200 --> 00:28:20,799
like das serma i think on twitter but

00:28:19,679 --> 00:28:21,120
there's a lot of great content here as

00:28:20,799 --> 00:28:22,880
well

00:28:21,120 --> 00:28:24,080
i would say like um there's a lot of

00:28:22,880 --> 00:28:24,960
great speakers here this one's like from

00:28:24,080 --> 00:28:26,880
brian weber

00:28:24,960 --> 00:28:28,320
another great use case is uh so they

00:28:26,880 --> 00:28:29,679
work at wikimedia

00:28:28,320 --> 00:28:31,679
essentially they need to write like an

00:28:29,679 --> 00:28:34,000
open source decoding thing

00:28:31,679 --> 00:28:35,840
um and they couldn't use like mp4 video

00:28:34,000 --> 00:28:37,200
for like copyright reasons

00:28:35,840 --> 00:28:39,039
uh so they ended up writing their own

00:28:37,200 --> 00:28:39,520
decoder and webassembly as their video

00:28:39,039 --> 00:28:40,799
player

00:28:39,520 --> 00:28:42,799
and it worked out great for them because

00:28:40,799 --> 00:28:44,000
again like javascript they even showed

00:28:42,799 --> 00:28:45,200
some examples in javascript it was just

00:28:44,000 --> 00:28:46,399
kind of too slow the way it was like

00:28:45,200 --> 00:28:48,159
processing the frame so

00:28:46,399 --> 00:28:49,600
so it's a web assembly with like threads

00:28:48,159 --> 00:28:52,159
and things it was just like boom

00:28:49,600 --> 00:28:53,600
just a good video player so the idea

00:28:52,159 --> 00:28:54,720
here would be like future poly filling

00:28:53,600 --> 00:28:56,000
using web assembly

00:28:54,720 --> 00:28:57,440
which i think is another like kind of

00:28:56,000 --> 00:28:58,559
unspoken thing on the browser you're not

00:28:57,440 --> 00:29:00,799
really unspoken but

00:28:58,559 --> 00:29:02,240
i was highlighted yeah um and another

00:29:00,799 --> 00:29:04,000
great channel is uh

00:29:02,240 --> 00:29:05,360
so this is funny guy google thinks this

00:29:04,000 --> 00:29:06,159
google earth video is about the flat

00:29:05,360 --> 00:29:08,799
earth

00:29:06,159 --> 00:29:09,520
like it's just a funny i don't know why

00:29:08,799 --> 00:29:12,159
but uh

00:29:09,520 --> 00:29:12,799
webassembly sf is a uh another great

00:29:12,159 --> 00:29:14,559
resource

00:29:12,799 --> 00:29:16,320
that's where we met at that one event

00:29:14,559 --> 00:29:17,760
but they've had so many events now that

00:29:16,320 --> 00:29:19,760
they've recorded all the talks that um

00:29:17,760 --> 00:29:21,200
there's some really good use cases here

00:29:19,760 --> 00:29:22,960
google earth really highlighted again

00:29:21,200 --> 00:29:24,640
that code portability that like multiple

00:29:22,960 --> 00:29:26,320
languages compiled a web assembly

00:29:24,640 --> 00:29:28,000
they have one c code base for all like

00:29:26,320 --> 00:29:28,240
the google earth stuff and they compile

00:29:28,000 --> 00:29:30,880
it

00:29:28,240 --> 00:29:32,159
to android ios and the web so that you

00:29:30,880 --> 00:29:32,960
know just choose the target they want to

00:29:32,159 --> 00:29:34,240
compile to

00:29:32,960 --> 00:29:35,840
and that way they can have one code base

00:29:34,240 --> 00:29:37,039
but then compile to multiple platforms

00:29:35,840 --> 00:29:37,919
and then webassembly is kind of what

00:29:37,039 --> 00:29:40,320
powers the

00:29:37,919 --> 00:29:42,000
web version these days um using the same

00:29:40,320 --> 00:29:43,600
code base so

00:29:42,000 --> 00:29:44,799
that's another thing maybe i'm glad we

00:29:43,600 --> 00:29:46,320
brought it up because now i can talk

00:29:44,799 --> 00:29:48,720
about code portability

00:29:46,320 --> 00:29:49,760
and then i think that was those are the

00:29:48,720 --> 00:29:52,559
other two things oh yeah

00:29:49,760 --> 00:29:54,159
again just the two channels so yeah cool

00:29:52,559 --> 00:29:54,960
um that's i think those are the last

00:29:54,159 --> 00:29:57,600
points

00:29:54,960 --> 00:29:59,600
i can think of right now uh tolka i

00:29:57,600 --> 00:30:01,520
guess if i got that t-tolka uh mentioned

00:29:59,600 --> 00:30:04,799
web components is actually now

00:30:01,520 --> 00:30:07,039
powered by webassembly oh wow yes i

00:30:04,799 --> 00:30:08,559
believe that web components um

00:30:07,039 --> 00:30:10,080
it does specifically the google project

00:30:08,559 --> 00:30:12,000
which i i assume that's what you're

00:30:10,080 --> 00:30:15,120
you're referring to with the capital

00:30:12,000 --> 00:30:16,399
um semantics but yeah um yeah so good

00:30:15,120 --> 00:30:18,159
shout out there as well

00:30:16,399 --> 00:30:19,440
yeah it seems like what web assembly is

00:30:18,159 --> 00:30:20,080
kind of sliding in a lot of different

00:30:19,440 --> 00:30:21,679
places

00:30:20,080 --> 00:30:23,200
where we've come a long way from just

00:30:21,679 --> 00:30:24,960
sort of having lots of talks and

00:30:23,200 --> 00:30:26,480
presentations on how cool it is

00:30:24,960 --> 00:30:28,080
to now it's actually being implemented

00:30:26,480 --> 00:30:28,880
in quite a different a few different

00:30:28,080 --> 00:30:31,039
places

00:30:28,880 --> 00:30:32,720
uh it makes me want to pick up assembly

00:30:31,039 --> 00:30:34,720
script and sort of kick the tires a bit

00:30:32,720 --> 00:30:36,240
and see how i can

00:30:34,720 --> 00:30:38,720
benefit benefits of my projects using

00:30:36,240 --> 00:30:41,200
some uh some webassembly for sure

00:30:38,720 --> 00:30:41,840
yeah definitely and to your point i

00:30:41,200 --> 00:30:44,240
didn't want to

00:30:41,840 --> 00:30:45,120
since we're just here chatting if obs is

00:30:44,240 --> 00:30:47,840
using v8

00:30:45,120 --> 00:30:49,440
you should in theory be able to load

00:30:47,840 --> 00:30:50,559
webassembly in there what you could do

00:30:49,440 --> 00:30:52,240
even if it doesn't allow you to mold

00:30:50,559 --> 00:30:53,520
multiple files and you're not supposed

00:30:52,240 --> 00:30:55,760
to do this but you can technically

00:30:53,520 --> 00:30:57,279
base64 encode a webassembly module

00:30:55,760 --> 00:30:58,799
decode it in js real quick and then try

00:30:57,279 --> 00:31:00,000
to kick it over and see if obs will let

00:30:58,799 --> 00:31:01,679
you run some wisem

00:31:00,000 --> 00:31:03,360
depending on the v8 version it might not

00:31:01,679 --> 00:31:04,159
but like if it's a newer v8 you might be

00:31:03,360 --> 00:31:06,000
able to

00:31:04,159 --> 00:31:08,399
get away with it if you want to do that

00:31:06,000 --> 00:31:10,559
as your you know beginner wisem project

00:31:08,399 --> 00:31:12,080
yeah for sure yeah for whatever reason

00:31:10,559 --> 00:31:13,600
obs is a it's a

00:31:12,080 --> 00:31:15,440
project i've reached out to a couple

00:31:13,600 --> 00:31:16,240
times and uh i would love to have them

00:31:15,440 --> 00:31:18,559
on and chat

00:31:16,240 --> 00:31:20,559
and like explain how things are set up

00:31:18,559 --> 00:31:23,120
and how i can even compile the thing

00:31:20,559 --> 00:31:24,799
um but yeah i i guess i should probably

00:31:23,120 --> 00:31:27,200
just start kicking the tires and uh

00:31:24,799 --> 00:31:27,840
open up a pr if i can if i can get it to

00:31:27,200 --> 00:31:29,279
work

00:31:27,840 --> 00:31:31,679
uh yeah that'd be a couple weekends

00:31:29,279 --> 00:31:34,960
before i before i get something working

00:31:31,679 --> 00:31:35,840
but uh yeah yeah great point and i would

00:31:34,960 --> 00:31:37,679
love to have

00:31:35,840 --> 00:31:38,880
honestly if there's like a lighter

00:31:37,679 --> 00:31:40,640
version of obs

00:31:38,880 --> 00:31:42,320
i would love that um so i think

00:31:40,640 --> 00:31:43,919
streamyard does a great job

00:31:42,320 --> 00:31:45,440
of building on top of some of these

00:31:43,919 --> 00:31:46,480
technologies and gives me a lighter

00:31:45,440 --> 00:31:48,880
version of it

00:31:46,480 --> 00:31:50,320
i'd love to have that but open source

00:31:48,880 --> 00:31:52,480
that would be amazing

00:31:50,320 --> 00:31:53,440
definitely um aaron thanks so much for

00:31:52,480 --> 00:31:56,559
chatting about

00:31:53,440 --> 00:32:00,000
wasm web assembly a subway script

00:31:56,559 --> 00:32:01,360
all the above game boy emulation totally

00:32:00,000 --> 00:32:10,000
yeah thanks for having me it's always

00:32:01,360 --> 00:32:10,000

YouTube URL: https://www.youtube.com/watch?v=97ej9-CE3Gc


