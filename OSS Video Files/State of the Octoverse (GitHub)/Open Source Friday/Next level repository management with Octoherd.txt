Title: Next level repository management with Octoherd
Publication date: 2021-02-26
Playlist: Open Source Friday
Description: 
	The management of multiple repositories in an organization can become time-consuming.

Join @bdougieYO and @gr2m in learning to leverage the octoherd/cli to manage multiple repository updates all at once.

0:00 - Start
1:32 - What is Octoherd?
9:19 - Octoherd Demo

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:00,320 --> 00:00:03,199
uh hope you enjoyed the last

00:00:01,439 --> 00:00:04,720
conversation if you were sticking around

00:00:03,199 --> 00:00:06,960
uh to hang out with us this is open

00:00:04,720 --> 00:00:08,559
source friday uh a time when we sit and

00:00:06,960 --> 00:00:09,679
talk to open source maintainers about

00:00:08,559 --> 00:00:12,400
their projects

00:00:09,679 --> 00:00:13,920
um their pain points their wins and uh

00:00:12,400 --> 00:00:15,440
today we've got a returning guest

00:00:13,920 --> 00:00:17,520
you're actually our first returning

00:00:15,440 --> 00:00:19,119
guest gregor so congratulations

00:00:17,520 --> 00:00:21,680
um do you want to give a quick intro of

00:00:19,119 --> 00:00:23,519
who you are and why are you here

00:00:21,680 --> 00:00:25,519
sure yeah thank you so much for having

00:00:23,519 --> 00:00:28,960
me again

00:00:25,519 --> 00:00:30,640
i'm gregor i am the maintainer of

00:00:28,960 --> 00:00:33,840
github's arcticat for

00:00:30,640 --> 00:00:36,480
javascript and typescript

00:00:33,840 --> 00:00:37,920
and i do maintain several established

00:00:36,480 --> 00:00:41,120
open source projects in the

00:00:37,920 --> 00:00:43,840
node in javascript community and yeah

00:00:41,120 --> 00:00:45,360
and i'm here today to introduce you to

00:00:43,840 --> 00:00:47,520
octoherd which is like a

00:00:45,360 --> 00:00:49,680
project that i just started out and i

00:00:47,520 --> 00:00:52,320
thought might be interesting for

00:00:49,680 --> 00:00:53,280
your viewers yeah and uh i think this is

00:00:52,320 --> 00:00:56,079
probably the

00:00:53,280 --> 00:00:56,559
the earl the i guess the most how would

00:00:56,079 --> 00:00:59,039
i say the

00:00:56,559 --> 00:00:59,920
as far as age goes it's probably the

00:00:59,039 --> 00:01:02,239
youngest project

00:00:59,920 --> 00:01:03,600
that we've had on the on the stream uh

00:01:02,239 --> 00:01:04,799
but we've had a lot of conversations

00:01:03,600 --> 00:01:06,240
about this and um

00:01:04,799 --> 00:01:08,240
i just wanted to point out real quick

00:01:06,240 --> 00:01:09,760
folks if you did not see the original

00:01:08,240 --> 00:01:12,080
conversation that we had

00:01:09,760 --> 00:01:13,360
around automating open source main uh

00:01:12,080 --> 00:01:16,000
maintenance with bots and

00:01:13,360 --> 00:01:17,280
octokit uh there is a youtube video so

00:01:16,000 --> 00:01:19,119
definitely check out the youtube

00:01:17,280 --> 00:01:20,720
the github youtube channel uh you can

00:01:19,119 --> 00:01:22,880
check that out but today

00:01:20,720 --> 00:01:24,640
we're gonna talk about next level

00:01:22,880 --> 00:01:25,759
repository management so like we're

00:01:24,640 --> 00:01:29,200
moving

00:01:25,759 --> 00:01:30,320
to the next level uh and if

00:01:29,200 --> 00:01:31,920
if you don't mind i guess that we could

00:01:30,320 --> 00:01:32,799
just go ahead and jump right in to

00:01:31,920 --> 00:01:36,240
octaherd

00:01:32,799 --> 00:01:38,400
and what octohurt is so you have a brief

00:01:36,240 --> 00:01:39,759
explanation but uh do you want to talk

00:01:38,400 --> 00:01:41,840
about like what where

00:01:39,759 --> 00:01:43,920
where it came from and what it's sort of

00:01:41,840 --> 00:01:48,000
doing today

00:01:43,920 --> 00:01:51,040
sure so it came from me creating lots

00:01:48,000 --> 00:01:51,520
and lots of like atomic little scripts

00:01:51,040 --> 00:01:54,240
to do

00:01:51,520 --> 00:01:56,240
tasks because i'm an engineer and i

00:01:54,240 --> 00:01:57,040
don't like to repeat myself so soon i

00:01:56,240 --> 00:01:59,040
see myself

00:01:57,040 --> 00:02:00,880
like doing a thing three times i'm like

00:01:59,040 --> 00:02:03,040
nah nah nah i'm going to

00:02:00,880 --> 00:02:04,240
script this and because i happen to know

00:02:03,040 --> 00:02:06,560
the kitab

00:02:04,240 --> 00:02:09,039
platform apis very very well because i

00:02:06,560 --> 00:02:10,399
built all this tooling

00:02:09,039 --> 00:02:12,239
in a position where i can create the

00:02:10,399 --> 00:02:14,800
scripts very quickly

00:02:12,239 --> 00:02:16,080
and my i probably a hundred folders of

00:02:14,800 --> 00:02:17,680
these scripts and i just create them

00:02:16,080 --> 00:02:19,840
once and then throw them away and never

00:02:17,680 --> 00:02:22,400
use them again

00:02:19,840 --> 00:02:24,239
but over time i just seen like recurring

00:02:22,400 --> 00:02:26,400
patterns and i thought it's about time

00:02:24,239 --> 00:02:26,400
to

00:02:26,480 --> 00:02:30,879
put it into some kind of form which

00:02:28,160 --> 00:02:34,560
makes it easier to share

00:02:30,879 --> 00:02:37,360
with others and octoherd

00:02:34,560 --> 00:02:40,160
is basically it's more a pattern than

00:02:37,360 --> 00:02:43,200
any kind of framework it gives you

00:02:40,160 --> 00:02:44,959
in the possibility to create a single

00:02:43,200 --> 00:02:48,239
function which gives you an octocat

00:02:44,959 --> 00:02:50,720
instance and repository contacts and

00:02:48,239 --> 00:02:52,480
options that the user passed and then

00:02:50,720 --> 00:02:55,360
you can run whatever you want

00:02:52,480 --> 00:02:56,239
on each repository that you loaded with

00:02:55,360 --> 00:02:59,680
dr heard

00:02:56,239 --> 00:03:02,080
um cli yeah and that's it

00:02:59,680 --> 00:03:04,159
you know it's not like you need to know

00:03:02,080 --> 00:03:06,720
what you're doing it's it's it's not

00:03:04,159 --> 00:03:08,879
like super end user friendly but if you

00:03:06,720 --> 00:03:10,080
are a coder and you know the github apis

00:03:08,879 --> 00:03:11,920
a little bit

00:03:10,080 --> 00:03:13,360
then this is a great tool for you at

00:03:11,920 --> 00:03:14,959
this point and

00:03:13,360 --> 00:03:16,480
i wanted to provide some context real

00:03:14,959 --> 00:03:17,280
quick too as well for folks who don't

00:03:16,480 --> 00:03:19,120
know who you are

00:03:17,280 --> 00:03:21,519
um you maintained this project um

00:03:19,120 --> 00:03:24,640
started this sdk called octokit rest.js

00:03:21,519 --> 00:03:27,120
it's the node library to

00:03:24,640 --> 00:03:28,480
manage interactions with github's api

00:03:27,120 --> 00:03:31,920
and web hooks and

00:03:28,480 --> 00:03:32,480
and then and then some but my context

00:03:31,920 --> 00:03:34,879
with this

00:03:32,480 --> 00:03:36,319
is i actually have and i wonder if i

00:03:34,879 --> 00:03:38,959
have a terminal that's

00:03:36,319 --> 00:03:39,519
ready to go uh i have actually have a

00:03:38,959 --> 00:03:41,200
repo

00:03:39,519 --> 00:03:43,280
where i have scripts for interactions

00:03:41,200 --> 00:03:44,239
with the github api and um

00:03:43,280 --> 00:03:46,480
i don't think the terminal is going to

00:03:44,239 --> 00:03:47,680
come up but actually i'm not sure why

00:03:46,480 --> 00:03:48,720
that's not coming up but we'll we'll

00:03:47,680 --> 00:03:51,599
move on from there

00:03:48,720 --> 00:03:52,959
but i have a basically a long script of

00:03:51,599 --> 00:03:53,920
like if i need to manipulate a bunch of

00:03:52,959 --> 00:03:56,080
repos

00:03:53,920 --> 00:03:57,120
for i have a second account called not

00:03:56,080 --> 00:03:59,439
be dougie

00:03:57,120 --> 00:04:00,480
and i wanted to archive all those repos

00:03:59,439 --> 00:04:02,000
because it's

00:04:00,480 --> 00:04:04,080
it's where i put a bunch of junk code as

00:04:02,000 --> 00:04:06,640
i'm testing stuff i fork a lot of stuff

00:04:04,080 --> 00:04:08,080
and manipulate actions and in pro-bot

00:04:06,640 --> 00:04:10,319
apps and stuff like that

00:04:08,080 --> 00:04:12,840
so i wanted to archive all my all my

00:04:10,319 --> 00:04:15,120
projects on that one

00:04:12,840 --> 00:04:17,359
organization account so i have a octokit

00:04:15,120 --> 00:04:18,320
script that i just run whenever i want

00:04:17,359 --> 00:04:21,120
to archive

00:04:18,320 --> 00:04:22,400
a bunch of projects um i have another

00:04:21,120 --> 00:04:24,720
use case too as well

00:04:22,400 --> 00:04:26,479
where honestly i'm thinking this i know

00:04:24,720 --> 00:04:28,639
we oh there's my terminal

00:04:26,479 --> 00:04:29,840
uh i'm not sure why that took forever

00:04:28,639 --> 00:04:31,280
but um

00:04:29,840 --> 00:04:32,960
i've got this other thing called github

00:04:31,280 --> 00:04:36,639
craftwork which is

00:04:32,960 --> 00:04:39,040
a way for me to teach automation uh

00:04:36,639 --> 00:04:39,759
on github through github uh so we got

00:04:39,040 --> 00:04:41,199
this little

00:04:39,759 --> 00:04:43,600
repo but then we have all these other

00:04:41,199 --> 00:04:45,040
repos uh that

00:04:43,600 --> 00:04:47,040
everybody who starts the workshop with

00:04:45,040 --> 00:04:47,600
me or does it on their own creates a

00:04:47,040 --> 00:04:49,440
repo

00:04:47,600 --> 00:04:51,440
as you go through it so i wanted to

00:04:49,440 --> 00:04:52,000
write a script to transfer repos to the

00:04:51,440 --> 00:04:53,360
owner

00:04:52,000 --> 00:04:56,479
so that way i can just get rid of them

00:04:53,360 --> 00:04:58,000
out of the organization um

00:04:56,479 --> 00:04:59,759
those are scripts we don't have to solve

00:04:58,000 --> 00:05:00,960
today but these are scripts that i have

00:04:59,759 --> 00:05:04,080
sitting in a folder

00:05:00,960 --> 00:05:05,520
uh in a basically a javascript file to

00:05:04,080 --> 00:05:07,759
automate the process of this because

00:05:05,520 --> 00:05:09,280
at this point like it just gets to the

00:05:07,759 --> 00:05:11,120
point where this is too many people

00:05:09,280 --> 00:05:13,360
in the organization and too many repos

00:05:11,120 --> 00:05:14,320
that i need to do a script where i just

00:05:13,360 --> 00:05:17,039
look for

00:05:14,320 --> 00:05:18,800
the word ci and not my name and

00:05:17,039 --> 00:05:19,360
hopefully people named it the proper way

00:05:18,800 --> 00:05:21,520
which

00:05:19,360 --> 00:05:23,280
we have one person who didn't and then

00:05:21,520 --> 00:05:26,240
it makes it even more challenging

00:05:23,280 --> 00:05:26,960
to to run a script like that but um

00:05:26,240 --> 00:05:29,440
since we're

00:05:26,960 --> 00:05:30,800
uh we started a little bit late uh i'm

00:05:29,440 --> 00:05:32,800
curious if you wanted to jump in and

00:05:30,800 --> 00:05:34,240
give us an example of

00:05:32,800 --> 00:05:36,400
things that we could we could automate

00:05:34,240 --> 00:05:38,160
through octoherd sure

00:05:36,400 --> 00:05:40,240
yeah i just wanted to say regarding

00:05:38,160 --> 00:05:40,560
octokid it's not only for node it's also

00:05:40,240 --> 00:05:42,880
for

00:05:40,560 --> 00:05:43,600
javascript and it works with dino now as

00:05:42,880 --> 00:05:46,720
well

00:05:43,600 --> 00:05:49,120
oh really i'm very interested in dino um

00:05:46,720 --> 00:05:50,320
especially for cli this is really great

00:05:49,120 --> 00:05:52,880
did you uh okay

00:05:50,320 --> 00:05:54,160
did you work on the the dino um or dino

00:05:52,880 --> 00:05:57,199
denno

00:05:54,160 --> 00:06:01,120
option so

00:05:57,199 --> 00:06:03,520
yeah um it's the same source code right

00:06:01,120 --> 00:06:06,800
and you know it's just web platform and

00:06:03,520 --> 00:06:09,039
octokid works in the browsers

00:06:06,800 --> 00:06:11,039
so it should mostly work out of the box

00:06:09,039 --> 00:06:12,880
there are some differences

00:06:11,039 --> 00:06:14,160
and also do not support typescript out

00:06:12,880 --> 00:06:16,560
of the box so there was

00:06:14,160 --> 00:06:18,000
some things i had to do some problems

00:06:16,560 --> 00:06:19,440
that came up

00:06:18,000 --> 00:06:20,800
with you know they didn't come up with

00:06:19,440 --> 00:06:22,479
the other platforms but these are

00:06:20,800 --> 00:06:25,440
resolved now

00:06:22,479 --> 00:06:27,440
so you can run dino scripts with

00:06:25,440 --> 00:06:30,639
typescript support

00:06:27,440 --> 00:06:32,880
um right now and

00:06:30,639 --> 00:06:34,880
it's great because it's basically like

00:06:32,880 --> 00:06:37,520
like a cli with the browser

00:06:34,880 --> 00:06:39,199
security sandbox so you can just run a

00:06:37,520 --> 00:06:41,039
script that is just hosted on a random

00:06:39,199 --> 00:06:42,160
website and it won't be able to harm

00:06:41,039 --> 00:06:45,039
your

00:06:42,160 --> 00:06:46,639
operating system because it just can't

00:06:45,039 --> 00:06:48,400
randomly read and write files on your

00:06:46,639 --> 00:06:49,680
system and stuff

00:06:48,400 --> 00:06:51,919
so it's very interesting and it's

00:06:49,680 --> 00:06:53,759
actually perfect use case for of the

00:06:51,919 --> 00:06:55,520
herd and i really want to make octopus

00:06:53,759 --> 00:06:59,280
compatible

00:06:55,520 --> 00:07:00,800
with you know so at this point

00:06:59,280 --> 00:07:02,560
you know you were talking about your

00:07:00,800 --> 00:07:04,400
scripts and basically you could just

00:07:02,560 --> 00:07:06,240
you know take one after the show and

00:07:04,400 --> 00:07:09,599
just try to convert it

00:07:06,240 --> 00:07:11,599
yeah um like i have like a few

00:07:09,599 --> 00:07:13,440
you know scripts that i created as

00:07:11,599 --> 00:07:15,199
examples here

00:07:13,440 --> 00:07:16,639
and i just want to start with one that

00:07:15,199 --> 00:07:19,520
is a little bit more complicated because

00:07:16,639 --> 00:07:23,440
it has been asked for

00:07:19,520 --> 00:07:24,400
and it's a way to synchronize branch

00:07:23,440 --> 00:07:26,960
protections

00:07:24,400 --> 00:07:29,840
so you know you use the octaher cli and

00:07:26,960 --> 00:07:33,120
you pass in

00:07:29,840 --> 00:07:36,400
user authentication token and then you

00:07:33,120 --> 00:07:38,400
pass the path to the script

00:07:36,400 --> 00:07:40,160
and then you can pass on what

00:07:38,400 --> 00:07:41,840
repositories do you want it to run

00:07:40,160 --> 00:07:43,599
so you can just pass a star and it will

00:07:41,840 --> 00:07:44,400
run on all repositories you have access

00:07:43,599 --> 00:07:46,639
to

00:07:44,400 --> 00:07:49,039
or octahertz star runs it on all

00:07:46,639 --> 00:07:51,199
octahedra repositories

00:07:49,039 --> 00:07:52,879
and after that are user options that are

00:07:51,199 --> 00:07:56,400
specific to the script

00:07:52,879 --> 00:07:56,400
in this case i want to load

00:07:56,720 --> 00:08:00,240
the current branch protection settings

00:07:59,520 --> 00:08:02,400
of

00:08:00,240 --> 00:08:03,840
octoherd cli and then just apply it to

00:08:02,400 --> 00:08:05,680
all of the hurt

00:08:03,840 --> 00:08:07,360
repositories right so this is our use

00:08:05,680 --> 00:08:10,560
case like branch protections are

00:08:07,360 --> 00:08:13,360
kind of a pita so um

00:08:10,560 --> 00:08:13,919
we want to load it from one repository

00:08:13,360 --> 00:08:18,160
which is

00:08:13,919 --> 00:08:18,160
cli let me see what they look like

00:08:18,400 --> 00:08:26,319
octoherd cli settings branches

00:08:22,960 --> 00:08:28,240
here on the main branch so we require

00:08:26,319 --> 00:08:29,599
pull request reviews and we require

00:08:28,240 --> 00:08:32,640
status checks

00:08:29,599 --> 00:08:35,839
and that's it so it's quite simple but

00:08:32,640 --> 00:08:41,839
we don't have the same on for example

00:08:35,839 --> 00:08:41,839
the scripts folder i think

00:08:43,440 --> 00:08:47,680
uh i'm also understanding the name now

00:08:45,440 --> 00:08:51,360
on the reason for octoherd

00:08:47,680 --> 00:08:53,519
um it's clever because as you um

00:08:51,360 --> 00:08:54,959
like did you have maintainers in mind

00:08:53,519 --> 00:08:56,880
when you build this maintainers who have

00:08:54,959 --> 00:08:59,360
multiple projects like yourself

00:08:56,880 --> 00:09:00,320
as you're trying to manage the herd

00:08:59,360 --> 00:09:03,360
absolutely

00:09:00,320 --> 00:09:05,120
like maintainers this is for you if you

00:09:03,360 --> 00:09:07,360
are

00:09:05,120 --> 00:09:08,320
you know if you do tons of open source

00:09:07,360 --> 00:09:09,760
maintenance or

00:09:08,320 --> 00:09:11,600
maintenance for your work and your funds

00:09:09,760 --> 00:09:15,279
of repositories

00:09:11,600 --> 00:09:15,279
and this will save you a lot of time

00:09:15,920 --> 00:09:20,000
all right um so here i just deleted the

00:09:18,880 --> 00:09:23,200
branch protection

00:09:20,000 --> 00:09:26,240
and now let me just run run the script

00:09:23,200 --> 00:09:26,240
as it's shown here

00:09:26,399 --> 00:09:30,000
let's see if this will work

00:09:30,080 --> 00:09:35,440
so i have to pass in my actual github

00:09:33,600 --> 00:09:36,560
token here

00:09:35,440 --> 00:09:38,160
okay i was going to ask if you're going

00:09:36,560 --> 00:09:41,279
to actually paste in a token but it

00:09:38,160 --> 00:09:44,720
seems like you you came prepared

00:09:41,279 --> 00:09:47,920
exactly i think the rest is

00:09:44,720 --> 00:09:51,519
good oh no actually because

00:09:47,920 --> 00:09:53,920
i do not have access here

00:09:51,519 --> 00:09:55,760
i'm in a different folder okay so this

00:09:53,920 --> 00:09:58,160
should work so this would this needs to

00:09:55,760 --> 00:09:58,560
be like a path of an actual script and i

00:09:58,160 --> 00:10:02,640
think

00:09:58,560 --> 00:10:05,839
that scripts

00:10:02,640 --> 00:10:07,040
and then sync and script so this is the

00:10:05,839 --> 00:10:08,560
file that i'll be running and i will

00:10:07,040 --> 00:10:10,560
show you the file in a moment but let's

00:10:08,560 --> 00:10:13,680
just see what's happening

00:10:10,560 --> 00:10:16,560
um and then i can also up to her

00:10:13,680 --> 00:10:17,440
i can just enable more debug logs and

00:10:16,560 --> 00:10:19,760
now

00:10:17,440 --> 00:10:21,760
play you know let's pray to the demogods

00:10:19,760 --> 00:10:24,880
as well

00:10:21,760 --> 00:10:24,880
this will actually work

00:10:24,959 --> 00:10:30,079
excellent yeah so with mpx it installs

00:10:27,920 --> 00:10:31,279
it on the fly and just runs it so

00:10:30,079 --> 00:10:34,560
if you have known installed you can

00:10:31,279 --> 00:10:36,480
basically just just run it

00:10:34,560 --> 00:10:37,680
and then again like with dino there

00:10:36,480 --> 00:10:39,360
would be no install

00:10:37,680 --> 00:10:41,519
like you would need to install the dino

00:10:39,360 --> 00:10:44,560
library but you don't need to install

00:10:41,519 --> 00:10:45,680
any binaries or anything and the script

00:10:44,560 --> 00:10:48,640
could be directly

00:10:45,680 --> 00:10:49,360
run from a website all right so it's

00:10:48,640 --> 00:10:51,200
running here

00:10:49,360 --> 00:10:54,000
we have some locks so it's loading all

00:10:51,200 --> 00:10:57,279
the repositories

00:10:54,000 --> 00:10:59,920
um it found the branch protections

00:10:57,279 --> 00:11:01,440
here and there's some blocks that i

00:10:59,920 --> 00:11:04,320
should remove

00:11:01,440 --> 00:11:06,560
anyway um and now like one thing that it

00:11:04,320 --> 00:11:10,880
does for example is by default

00:11:06,560 --> 00:11:13,360
it asks you to confirm any destructive

00:11:10,880 --> 00:11:15,839
request so whenever you do a request

00:11:13,360 --> 00:11:17,440
which is a delete or a put or post

00:11:15,839 --> 00:11:19,040
it asks you to do it you know just

00:11:17,440 --> 00:11:21,200
because you don't want to break stuff

00:11:19,040 --> 00:11:21,920
and this is not on git you cannot really

00:11:21,200 --> 00:11:24,399
just simply

00:11:21,920 --> 00:11:26,320
undo it so here it asks me like do i

00:11:24,399 --> 00:11:28,720
want to update the branch protections

00:11:26,320 --> 00:11:31,760
for after cli and no i do not because

00:11:28,720 --> 00:11:33,920
this is already my template repository

00:11:31,760 --> 00:11:36,399
and this is up to her script so here i

00:11:33,920 --> 00:11:39,440
can say yes

00:11:36,399 --> 00:11:41,279
and so it sent a request you know it has

00:11:39,440 --> 00:11:42,880
like the debug information here with the

00:11:41,279 --> 00:11:44,160
properties that it did and then it

00:11:42,880 --> 00:11:46,079
continues

00:11:44,160 --> 00:11:49,760
but that's already it so i can just you

00:11:46,079 --> 00:11:52,959
know say no to the others

00:11:49,760 --> 00:11:56,160
and then go back to my browser and in

00:11:52,959 --> 00:11:58,320
theory i should now reload and here is

00:11:56,160 --> 00:12:01,920
my branch protection

00:11:58,320 --> 00:12:04,000
so ta-da um

00:12:01,920 --> 00:12:05,680
this is the same protections that i had

00:12:04,000 --> 00:12:08,959
on the default branch on the octa

00:12:05,680 --> 00:12:10,399
cli so far so clear yeah yeah

00:12:08,959 --> 00:12:11,760
that sounds great i'm actually intrigued

00:12:10,399 --> 00:12:12,560
to see what the the script looks like

00:12:11,760 --> 00:12:15,519
too as well

00:12:12,560 --> 00:12:17,519
um is there like i understand under the

00:12:15,519 --> 00:12:17,920
installing the cli locally uh but the

00:12:17,519 --> 00:12:19,920
script

00:12:17,920 --> 00:12:24,160
itself do you need to pass in parameters

00:12:19,920 --> 00:12:27,200
for it to interact with the cli

00:12:24,160 --> 00:12:30,720
so you pass the path to the script

00:12:27,200 --> 00:12:31,279
right now okay um but inside the script

00:12:30,720 --> 00:12:32,959
file

00:12:31,279 --> 00:12:36,240
it doesn't need to know anything other

00:12:32,959 --> 00:12:38,639
than it seems like octo kit

00:12:36,240 --> 00:12:39,279
yeah it gets basically it gets an

00:12:38,639 --> 00:12:41,760
octokit

00:12:39,279 --> 00:12:44,480
instance um passed through here which is

00:12:41,760 --> 00:12:47,120
a custom optical instance from octoherd

00:12:44,480 --> 00:12:48,399
so it has some some features built in

00:12:47,120 --> 00:12:51,600
like pagination

00:12:48,399 --> 00:12:53,279
and throttling and request retries and

00:12:51,600 --> 00:12:55,200
the confirm

00:12:53,279 --> 00:12:56,320
um question the confirm prompt that you

00:12:55,200 --> 00:12:58,000
have seen

00:12:56,320 --> 00:13:00,079
and we probably add some more stuff to

00:12:58,000 --> 00:13:01,680
that so and then

00:13:00,079 --> 00:13:03,519
you know it's checking if i pass this

00:13:01,680 --> 00:13:05,360
template um

00:13:03,519 --> 00:13:07,440
cli argument and if it didn't it would

00:13:05,360 --> 00:13:09,760
just pro

00:13:07,440 --> 00:13:11,120
so in the script now i have octokid and

00:13:09,760 --> 00:13:14,880
i can do whatever i want

00:13:11,120 --> 00:13:16,160
right so octokid has request method and

00:13:14,880 --> 00:13:18,399
here i can

00:13:16,160 --> 00:13:22,000
you know just whatever like get the get

00:13:18,399 --> 00:13:25,920
the current repositories for example

00:13:22,000 --> 00:13:30,160
um and then what i get from the

00:13:25,920 --> 00:13:32,240
script as well is the repository object

00:13:30,160 --> 00:13:34,480
so i can directly access that and say

00:13:32,240 --> 00:13:36,320
like repository

00:13:34,480 --> 00:13:37,920
owner and you see you get like the whole

00:13:36,320 --> 00:13:40,720
intellisense

00:13:37,920 --> 00:13:42,639
because octokid has very good typescript

00:13:40,720 --> 00:13:44,480
support for all the endpoints

00:13:42,639 --> 00:13:46,800
yeah so you don't need to guess so you

00:13:44,480 --> 00:13:48,720
can just you know i know it's repository

00:13:46,800 --> 00:13:51,680
and then its name

00:13:48,720 --> 00:13:54,000
and then like i could store the data

00:13:51,680 --> 00:13:56,720
like this

00:13:54,000 --> 00:13:58,320
so and now i would get all the

00:13:56,720 --> 00:13:59,600
information about the repository which i

00:13:58,320 --> 00:14:02,000
already have so i don't need to do it

00:13:59,600 --> 00:14:04,560
but just to showcase basically all 600

00:14:02,000 --> 00:14:06,079
plus endpoints are here for you and you

00:14:04,560 --> 00:14:09,839
can do whatever you want

00:14:06,079 --> 00:14:09,839
and you can also um

00:14:09,920 --> 00:14:14,000
use graphql requests as well with the

00:14:12,240 --> 00:14:16,240
graphql method and you just pass in your

00:14:14,000 --> 00:14:18,959
query here

00:14:16,240 --> 00:14:19,839
so in this case i'm first checking if i

00:14:18,959 --> 00:14:22,079
already loaded

00:14:19,839 --> 00:14:23,600
the template bridge protection settings

00:14:22,079 --> 00:14:26,240
yeah and if i didn't

00:14:23,600 --> 00:14:28,839
then i read out the parameter and here i

00:14:26,240 --> 00:14:30,000
actually get the repository the template

00:14:28,839 --> 00:14:32,560
repository

00:14:30,000 --> 00:14:33,920
and i get the default branch and for the

00:14:32,560 --> 00:14:35,600
default branch i'm loading the

00:14:33,920 --> 00:14:38,639
protection

00:14:35,600 --> 00:14:40,480
and then i have to kind of translate the

00:14:38,639 --> 00:14:43,199
response data

00:14:40,480 --> 00:14:45,199
into input parameters because the format

00:14:43,199 --> 00:14:47,680
is not the same

00:14:45,199 --> 00:14:50,000
so what i get from github looks like

00:14:47,680 --> 00:14:52,800
this it has like url properties

00:14:50,000 --> 00:14:53,600
and they're like enabled objects and

00:14:52,800 --> 00:14:55,440
what i want

00:14:53,600 --> 00:14:57,120
to for the update request is just the

00:14:55,440 --> 00:14:58,959
false and the true

00:14:57,120 --> 00:15:01,120
for example and i cannot pass all the

00:14:58,959 --> 00:15:03,279
url stuff so here's a method i created

00:15:01,120 --> 00:15:05,920
to clean that up

00:15:03,279 --> 00:15:08,720
so once i have that i have my template

00:15:05,920 --> 00:15:12,480
branch protection settings and then i go

00:15:08,720 --> 00:15:15,839
here through the current repository

00:15:12,480 --> 00:15:17,680
so i load the branch protection settings

00:15:15,839 --> 00:15:19,920
for the current repositories default

00:15:17,680 --> 00:15:23,279
branch

00:15:19,920 --> 00:15:26,079
and then you know i log it

00:15:23,279 --> 00:15:27,680
and if there are no branch protection

00:15:26,079 --> 00:15:31,519
settings

00:15:27,680 --> 00:15:33,519
then i then we are fine and i create the

00:15:31,519 --> 00:15:36,160
branch protection settings

00:15:33,519 --> 00:15:37,519
and otherwise i lock the current branch

00:15:36,160 --> 00:15:42,959
protection settings out

00:15:37,519 --> 00:15:45,440
so i can compare them and that's it

00:15:42,959 --> 00:15:47,279
so you know it looks more than it is and

00:15:45,440 --> 00:15:50,959
this is a pretty complex

00:15:47,279 --> 00:15:52,560
script yeah but uh yeah there's a lot of

00:15:50,959 --> 00:15:55,519
stuff happening that i don't need

00:15:52,560 --> 00:15:56,720
to worry about basically which is what

00:15:55,519 --> 00:16:00,560
the whole octavert

00:15:56,720 --> 00:16:02,160
cli does for you yeah and um

00:16:00,560 --> 00:16:03,920
yeah i love it and then so my next

00:16:02,160 --> 00:16:05,600
question is uh so

00:16:03,920 --> 00:16:07,120
you're a maintainer of multiple repos in

00:16:05,600 --> 00:16:10,079
an organization

00:16:07,120 --> 00:16:10,880
you have let's just say 25 repos and you

00:16:10,079 --> 00:16:12,880
want to now

00:16:10,880 --> 00:16:14,240
you want to enable auto so you want to

00:16:12,880 --> 00:16:18,800
get auto merge so you need

00:16:14,240 --> 00:16:20,959
branch protections um so can i run this

00:16:18,800 --> 00:16:23,120
on a number of repos at the same time or

00:16:20,959 --> 00:16:25,440
do i need to update the script to do

00:16:23,120 --> 00:16:27,120
this as well

00:16:25,440 --> 00:16:29,600
no you can just do whatever like we can

00:16:27,120 --> 00:16:32,880
just do it on octokid right now

00:16:29,600 --> 00:16:34,399
right like the script that i had um

00:16:32,880 --> 00:16:37,680
like i have this installed so i don't

00:16:34,399 --> 00:16:40,160
need to use npx

00:16:37,680 --> 00:16:41,120
so it's just a parameter like instead of

00:16:40,160 --> 00:16:43,920
octaher like

00:16:41,120 --> 00:16:44,560
i say just just run it on octokit and

00:16:43,920 --> 00:16:50,399
and use

00:16:44,560 --> 00:16:53,519
like i don't know um

00:16:50,399 --> 00:16:56,160
templates and then

00:16:53,519 --> 00:16:57,360
octokids rest.js as something as a

00:16:56,160 --> 00:17:00,160
template

00:16:57,360 --> 00:17:00,880
oh it should just work and that's it

00:17:00,160 --> 00:17:03,120
right

00:17:00,880 --> 00:17:04,880
okay so now now i understand i missed

00:17:03,120 --> 00:17:07,520
this part where you actually pass in the

00:17:04,880 --> 00:17:09,919
parameter of the organization

00:17:07,520 --> 00:17:11,039
but your template is not i was assuming

00:17:09,919 --> 00:17:11,839
the template was something you were

00:17:11,039 --> 00:17:14,480
pulling from

00:17:11,839 --> 00:17:15,520
the file structure somewhere else um but

00:17:14,480 --> 00:17:17,439
your template is actually you're

00:17:15,520 --> 00:17:20,799
mirroring the template of octocat rest

00:17:17,439 --> 00:17:23,280
onto the rest of the octagon exactly

00:17:20,799 --> 00:17:24,880
genius okay got it like how do you how

00:17:23,280 --> 00:17:26,319
do you define the branch protection

00:17:24,880 --> 00:17:27,360
settings right i mean you could do it

00:17:26,319 --> 00:17:29,600
whatever you want

00:17:27,360 --> 00:17:31,200
and you know as you said this project is

00:17:29,600 --> 00:17:33,919
very early right now

00:17:31,200 --> 00:17:36,080
and once kind of the foundation is solid

00:17:33,919 --> 00:17:37,919
i want to make it much easier to create

00:17:36,080 --> 00:17:39,840
the scripts and to fork these scripts

00:17:37,919 --> 00:17:42,000
and to share the scripts

00:17:39,840 --> 00:17:43,840
so instead of you know blowing up the

00:17:42,000 --> 00:17:45,600
script of a thousand options i want

00:17:43,840 --> 00:17:46,320
people to come in and just fork my

00:17:45,600 --> 00:17:47,919
script

00:17:46,320 --> 00:17:49,280
yeah and then just say you know i want

00:17:47,919 --> 00:17:51,600
to read out the branch protection

00:17:49,280 --> 00:17:53,600
settings from environment variables or

00:17:51,600 --> 00:17:55,280
some kind of file or whatever

00:17:53,600 --> 00:17:57,200
and that should be easy to do and then

00:17:55,280 --> 00:17:58,640
we have you know let a thousand branch

00:17:57,200 --> 00:18:00,240
protection scripts bloom

00:17:58,640 --> 00:18:02,640
and you just pick whatever you want and

00:18:00,240 --> 00:18:03,679
if it's not there pick what is closest

00:18:02,640 --> 00:18:06,720
to what you need

00:18:03,679 --> 00:18:09,039
use it as a template and edit it

00:18:06,720 --> 00:18:12,400
so yeah i better stop there because i

00:18:09,039 --> 00:18:15,840
don't want to update any ruby

00:18:12,400 --> 00:18:17,760
protection stuff um uh so

00:18:15,840 --> 00:18:19,280
i guess my next question is then uh

00:18:17,760 --> 00:18:21,520
because i know we're short on time

00:18:19,280 --> 00:18:22,720
where can folks find scripts or suggest

00:18:21,520 --> 00:18:26,880
scripts um

00:18:22,720 --> 00:18:27,919
to for octokid or maybe like

00:18:26,880 --> 00:18:30,000
i guess let's just leave it at that

00:18:27,919 --> 00:18:31,760
where where can people find existing

00:18:30,000 --> 00:18:35,280
scripts but also

00:18:31,760 --> 00:18:38,080
request scripts yeah so

00:18:35,280 --> 00:18:40,400
um right now the best place is probably

00:18:38,080 --> 00:18:42,880
the octaher scripts

00:18:40,400 --> 00:18:45,440
repository and they can just check out

00:18:42,880 --> 00:18:47,120
the scripts that i have created here and

00:18:45,440 --> 00:18:48,799
you know they can create issues and ask

00:18:47,120 --> 00:18:49,760
for more and i think that you and i we

00:18:48,799 --> 00:18:53,120
had some discussions

00:18:49,760 --> 00:18:53,840
ourselves yep um i've also just

00:18:53,120 --> 00:18:57,919
yesterday

00:18:53,840 --> 00:19:01,120
found out that stowe

00:18:57,919 --> 00:19:01,840
uh created the same repository and they

00:19:01,120 --> 00:19:03,280
have

00:19:01,840 --> 00:19:05,600
you know just did the same thing and

00:19:03,280 --> 00:19:06,400
they just created their own repositories

00:19:05,600 --> 00:19:10,080
right here

00:19:06,400 --> 00:19:13,440
scripts right here so that's easy enough

00:19:10,080 --> 00:19:16,960
um but i think what i want to do next is

00:19:13,440 --> 00:19:18,799
just publish scripts to npm one script

00:19:16,960 --> 00:19:20,480
per package and then just make it very

00:19:18,799 --> 00:19:22,640
easy

00:19:20,480 --> 00:19:24,000
to create a script and to maintain these

00:19:22,640 --> 00:19:26,240
scripts and to test

00:19:24,000 --> 00:19:27,760
these scripts and to easily update these

00:19:26,240 --> 00:19:29,360
scripts for compatibility with new

00:19:27,760 --> 00:19:30,880
versions and so on

00:19:29,360 --> 00:19:33,120
yeah so that's probably the next thing

00:19:30,880 --> 00:19:34,960
that i would work on so yeah the best

00:19:33,120 --> 00:19:36,160
way to start is you have an idea you

00:19:34,960 --> 00:19:38,400
want to do

00:19:36,160 --> 00:19:39,919
create an issue and then just try to

00:19:38,400 --> 00:19:41,039
build it yourself and i will help you

00:19:39,919 --> 00:19:42,559
along the way

00:19:41,039 --> 00:19:44,640
and i'm pretty sure you come up with use

00:19:42,559 --> 00:19:47,520
cases that i didn't consider yet

00:19:44,640 --> 00:19:49,200
so we can you know iterate on the

00:19:47,520 --> 00:19:50,960
foundation

00:19:49,200 --> 00:19:52,240
and then the next step is you know to

00:19:50,960 --> 00:19:54,880
make this script

00:19:52,240 --> 00:19:56,400
more easy to distribute and to share

00:19:54,880 --> 00:19:57,280
yeah and once we have that or in

00:19:56,400 --> 00:19:58,799
parallel

00:19:57,280 --> 00:20:01,200
you know as i already mentioned i want

00:19:58,799 --> 00:20:02,720
this to be compatible with dino

00:20:01,200 --> 00:20:04,080
which will make it much easier to run

00:20:02,720 --> 00:20:05,200
these scripts for example in github

00:20:04,080 --> 00:20:06,799
actions too

00:20:05,200 --> 00:20:08,480
because there are no dependencies right

00:20:06,799 --> 00:20:10,159
they will just run

00:20:08,480 --> 00:20:12,320
and you don't need any build step or

00:20:10,159 --> 00:20:14,400
anything oh that's and actually

00:20:12,320 --> 00:20:16,400
pretty powerful real quick uh with

00:20:14,400 --> 00:20:17,919
github actions what not a lot of people

00:20:16,400 --> 00:20:20,880
know but github's grip is a

00:20:17,919 --> 00:20:22,159
it's a optical powered um get up action

00:20:20,880 --> 00:20:25,200
and um

00:20:22,159 --> 00:20:27,840
you could actually run shell commands

00:20:25,200 --> 00:20:30,480
uh within your github actions as well so

00:20:27,840 --> 00:20:32,159
imagine if you had a cron job of like

00:20:30,480 --> 00:20:34,559
keep everything consistent across the

00:20:32,159 --> 00:20:37,679
the board for all your your repositories

00:20:34,559 --> 00:20:39,440
uh i saw stows um labels

00:20:37,679 --> 00:20:41,520
something that i try to take consistent

00:20:39,440 --> 00:20:42,880
with across my repositories which i'm

00:20:41,520 --> 00:20:46,159
not really good at is

00:20:42,880 --> 00:20:47,679
keeping labels consistent uh keeping

00:20:46,159 --> 00:20:49,760
the other thing is like the contributing

00:20:47,679 --> 00:20:52,320
md like i have the same rules

00:20:49,760 --> 00:20:54,080
in all my projects exactly i don't keep

00:20:52,320 --> 00:20:56,640
them up to date everywhere so

00:20:54,080 --> 00:20:57,840
if i update my sort of i don't know my

00:20:56,640 --> 00:21:00,640
pinnacle project

00:20:57,840 --> 00:21:02,400
of like in your case maybe octaget rest

00:21:00,640 --> 00:21:03,600
uh you perhaps you want to

00:21:02,400 --> 00:21:04,880
you want to update the rest of the

00:21:03,600 --> 00:21:05,760
octaget libraries with the same

00:21:04,880 --> 00:21:07,919
contributing md

00:21:05,760 --> 00:21:08,799
the same code of conduct the same etc

00:21:07,919 --> 00:21:12,159
etc

00:21:08,799 --> 00:21:14,720
um yeah interesting yeah

00:21:12,159 --> 00:21:15,520
but you know then oftentimes it's like

00:21:14,720 --> 00:21:17,200
in 90

00:21:15,520 --> 00:21:19,120
you want that but in some cases you

00:21:17,200 --> 00:21:21,840
don't want to override the contributing

00:21:19,120 --> 00:21:23,280
mds that you updated specifically for

00:21:21,840 --> 00:21:25,760
this right

00:21:23,280 --> 00:21:27,679
so it's something that you can kind of

00:21:25,760 --> 00:21:29,919
automate to an extent

00:21:27,679 --> 00:21:31,200
but then you want to keep some control

00:21:29,919 --> 00:21:34,000
and that is something i want to take

00:21:31,200 --> 00:21:36,320
into account with the cli

00:21:34,000 --> 00:21:38,240
so it would be nice to kind of have diff

00:21:36,320 --> 00:21:38,720
used for example like hey if you run

00:21:38,240 --> 00:21:40,320
this

00:21:38,720 --> 00:21:42,559
command like this is the current

00:21:40,320 --> 00:21:44,880
contributing md and this is the new one

00:21:42,559 --> 00:21:46,559
do you want to have this update but

00:21:44,880 --> 00:21:48,559
instead of going manually through

00:21:46,559 --> 00:21:50,000
every repository you will have it right

00:21:48,559 --> 00:21:53,360
there and you go step by step

00:21:50,000 --> 00:21:57,360
and you don't lose contacts

00:21:53,360 --> 00:21:58,880
um so yeah actions are

00:21:57,360 --> 00:22:00,480
powerful and this is definitely a good

00:21:58,880 --> 00:22:01,360
target for that if you want to automate

00:22:00,480 --> 00:22:03,120
them also what

00:22:01,360 --> 00:22:05,200
i didn't show you this you can write

00:22:03,120 --> 00:22:06,559
scripts to gather data it's actually an

00:22:05,200 --> 00:22:09,840
idea from you

00:22:06,559 --> 00:22:10,240
yeah that you had right so i created

00:22:09,840 --> 00:22:13,840
this

00:22:10,240 --> 00:22:13,840
um this script to

00:22:14,159 --> 00:22:18,880
find this is not mine

00:22:20,240 --> 00:22:23,280
to find releases

00:22:25,280 --> 00:22:28,559
and then you know what it does is the

00:22:27,679 --> 00:22:33,039
whole

00:22:28,559 --> 00:22:35,440
logging is um at the end of my

00:22:33,039 --> 00:22:36,559
at the end of the script it will look

00:22:35,440 --> 00:22:40,799
like a path

00:22:36,559 --> 00:22:42,799
of um where it created a file with the

00:22:40,799 --> 00:22:45,280
with the log data and this is just

00:22:42,799 --> 00:22:47,120
newline delimited json and then you can

00:22:45,280 --> 00:22:48,640
use this json and do all kinds of

00:22:47,120 --> 00:22:49,919
analytics with it so you could use like

00:22:48,640 --> 00:22:52,960
jku

00:22:49,919 --> 00:22:54,000
or what i did is i can quickly show i

00:22:52,960 --> 00:22:57,840
uploaded it to

00:22:54,000 --> 00:23:00,960
big query okay um

00:22:57,840 --> 00:23:02,720
basically the output of octahertz right

00:23:00,960 --> 00:23:04,559
and then you can load a bigquery as a

00:23:02,720 --> 00:23:07,200
source for this data studio and can very

00:23:04,559 --> 00:23:10,320
quickly create this kind of reports

00:23:07,200 --> 00:23:12,320
um and that's something that i think i'm

00:23:10,320 --> 00:23:13,919
also very interested in because for one

00:23:12,320 --> 00:23:16,880
you have these scripts that you want to

00:23:13,919 --> 00:23:18,640
update stuff and keep it in

00:23:16,880 --> 00:23:21,600
in sync and the other one is you kind of

00:23:18,640 --> 00:23:23,600
want to run this complicated

00:23:21,600 --> 00:23:25,039
or like get data like once per week or

00:23:23,600 --> 00:23:26,080
something which you could also run an

00:23:25,039 --> 00:23:28,880
action and then just

00:23:26,080 --> 00:23:31,440
write the raw data log somewhere and

00:23:28,880 --> 00:23:33,039
then have some reporting on it

00:23:31,440 --> 00:23:35,360
so you can do that with octoherd as well

00:23:33,039 --> 00:23:36,799
that is within the scope of the project

00:23:35,360 --> 00:23:38,159
and then ideally i want to be able to

00:23:36,799 --> 00:23:40,400
share these reports too you know it

00:23:38,159 --> 00:23:42,240
could be it could be very interesting

00:23:40,400 --> 00:23:43,919
yeah it's valuable information and i

00:23:42,240 --> 00:23:44,640
think it's the the challenge is the the

00:23:43,919 --> 00:23:46,320
limitation

00:23:44,640 --> 00:23:48,320
of like github's rate limiting like we

00:23:46,320 --> 00:23:49,279
do have a rate limit uh so like you

00:23:48,320 --> 00:23:50,960
can't just

00:23:49,279 --> 00:23:52,559
scrape all your stuff all the time you

00:23:50,960 --> 00:23:54,240
know every hour um

00:23:52,559 --> 00:23:55,600
yeah but to be able to have scripts that

00:23:54,240 --> 00:23:57,679
are ready to go and

00:23:55,600 --> 00:23:59,760
models that folks maintainers can share

00:23:57,679 --> 00:24:01,600
across organizations

00:23:59,760 --> 00:24:03,200
um i like this and i like the fact that

00:24:01,600 --> 00:24:04,240
these um we're starting to see well we

00:24:03,200 --> 00:24:06,799
have this script which is

00:24:04,240 --> 00:24:07,279
octoherd script but also stowe who also

00:24:06,799 --> 00:24:10,640
has an

00:24:07,279 --> 00:24:13,440
octahedr uh script as well um

00:24:10,640 --> 00:24:15,279
so seeing the the collaboration um is

00:24:13,440 --> 00:24:16,000
nice so i'm curious what's your thoughts

00:24:15,279 --> 00:24:18,559
on

00:24:16,000 --> 00:24:19,600
centralizing all the scripts uh will it

00:24:18,559 --> 00:24:22,400
be like a database

00:24:19,600 --> 00:24:24,000
uh in the future for folks to look

00:24:22,400 --> 00:24:26,880
forward to yeah

00:24:24,000 --> 00:24:28,559
so i think why i want to go is to make

00:24:26,880 --> 00:24:30,480
it more atomic you know

00:24:28,559 --> 00:24:32,960
before i call you talk about monorepos

00:24:30,480 --> 00:24:33,840
basically script repo is a monorepo

00:24:32,960 --> 00:24:37,520
right now

00:24:33,840 --> 00:24:40,320
but i wanted to be um separate

00:24:37,520 --> 00:24:42,000
repositories or even just gists but i

00:24:40,320 --> 00:24:43,679
think repositories would be great and

00:24:42,000 --> 00:24:45,440
then i would probably utilize a github

00:24:43,679 --> 00:24:47,760
action which you install

00:24:45,440 --> 00:24:49,840
on all these repositories and that way i

00:24:47,760 --> 00:24:50,880
know all the scripts out there and i can

00:24:49,840 --> 00:24:53,520
also

00:24:50,880 --> 00:24:55,200
help you run your tests and you know run

00:24:53,520 --> 00:24:57,760
run your tests against a new version of

00:24:55,200 --> 00:24:59,440
the cli and so on automatically

00:24:57,760 --> 00:25:02,240
basically like a dependent board

00:24:59,440 --> 00:25:04,240
specific for octoherd scripts

00:25:02,240 --> 00:25:05,919
so that's my idea right now and with

00:25:04,240 --> 00:25:08,080
that information i could also create a

00:25:05,919 --> 00:25:09,600
website where people can just search and

00:25:08,080 --> 00:25:10,559
and just find the script whatever they

00:25:09,600 --> 00:25:12,799
want

00:25:10,559 --> 00:25:14,080
and then run it directly so ideally they

00:25:12,799 --> 00:25:17,440
would have the dino cli

00:25:14,080 --> 00:25:19,440
and you would get like one url that you

00:25:17,440 --> 00:25:22,080
paste and then it will include both the

00:25:19,440 --> 00:25:25,200
cli logic and the script

00:25:22,080 --> 00:25:28,400
and you can just run an out of the box

00:25:25,200 --> 00:25:28,720
um yeah and for me the end goal of this

00:25:28,400 --> 00:25:30,400
is

00:25:28,720 --> 00:25:31,840
not the end goal but kind of the next

00:25:30,400 --> 00:25:34,159
goal would be

00:25:31,840 --> 00:25:35,840
to just have a nice web ui where you run

00:25:34,159 --> 00:25:38,480
this stuff

00:25:35,840 --> 00:25:40,000
yeah because octokid works in browsers

00:25:38,480 --> 00:25:42,000
so why not

00:25:40,000 --> 00:25:44,159
and then you can provide a nice ui like

00:25:42,000 --> 00:25:47,360
an oauth login

00:25:44,159 --> 00:25:50,080
and you know better like ways to define

00:25:47,360 --> 00:25:51,919
settings or like automatically provide

00:25:50,080 --> 00:25:54,080
the reports that could be

00:25:51,919 --> 00:25:55,440
published together with the with the

00:25:54,080 --> 00:25:57,200
scripts themselves you could

00:25:55,440 --> 00:25:59,120
basically publish like a report script

00:25:57,200 --> 00:26:02,240
which reduces the data it is something

00:25:59,120 --> 00:26:04,159
usable um and then

00:26:02,240 --> 00:26:05,679
you know you can kind of just have an

00:26:04,159 --> 00:26:08,240
online editor ideally with all the

00:26:05,679 --> 00:26:10,480
intellisense that you've seen in vs code

00:26:08,240 --> 00:26:12,400
load one of my scripts or a script that

00:26:10,480 --> 00:26:15,760
exists and just edit it

00:26:12,400 --> 00:26:18,559
and run it right after and rerun it and

00:26:15,760 --> 00:26:21,679
rerun it until it does what you want

00:26:18,559 --> 00:26:23,039
yeah once we have that then

00:26:21,679 --> 00:26:24,880
you know we'll be at a point where you

00:26:23,039 --> 00:26:26,559
can really just create a script like

00:26:24,880 --> 00:26:28,480
this in five minutes

00:26:26,559 --> 00:26:30,240
and run it but also leave it in a place

00:26:28,480 --> 00:26:31,760
where others might find it and even if

00:26:30,240 --> 00:26:33,440
you never use it again

00:26:31,760 --> 00:26:35,440
they might need it or they might use it

00:26:33,440 --> 00:26:37,679
as a starting point for their own script

00:26:35,440 --> 00:26:39,200
and this is what i want to get with

00:26:37,679 --> 00:26:42,559
octoherd so it's a

00:26:39,200 --> 00:26:44,159
great time to get uh involved yeah yeah

00:26:42,559 --> 00:26:45,600
folks if you're looking to contribute to

00:26:44,159 --> 00:26:48,240
a project uh provide

00:26:45,600 --> 00:26:48,960
insight some value or just get value out

00:26:48,240 --> 00:26:50,880
of it um

00:26:48,960 --> 00:26:52,320
the way to get value is by asking

00:26:50,880 --> 00:26:54,159
questions and uh

00:26:52,320 --> 00:26:55,760
seeing if this thing will work for your

00:26:54,159 --> 00:26:58,559
projects um so

00:26:55,760 --> 00:26:59,840
gregor um uh we're gonna have to round

00:26:58,559 --> 00:27:01,919
up the conversation now

00:26:59,840 --> 00:27:04,320
um folks if you want if you're

00:27:01,919 --> 00:27:05,840
interested uh definitely check out the

00:27:04,320 --> 00:27:07,279
the meetup page uh this is where we're

00:27:05,840 --> 00:27:08,799
gonna be posting our future

00:27:07,279 --> 00:27:10,960
conversations um

00:27:08,799 --> 00:27:12,159
with other maintainers i believe next uh

00:27:10,960 --> 00:27:12,559
in the next couple weeks we're gonna

00:27:12,159 --> 00:27:16,000
have

00:27:12,559 --> 00:27:18,240
a github action maintainer uh talk about

00:27:16,000 --> 00:27:19,200
ai powered github actions that do visual

00:27:18,240 --> 00:27:20,559
testing

00:27:19,200 --> 00:27:22,480
for your websites that's in that

00:27:20,559 --> 00:27:22,720
textbook next week and the week after we

00:27:22,480 --> 00:27:25,760
have

00:27:22,720 --> 00:27:26,559
the maintainer of octoprint which is a

00:27:25,760 --> 00:27:29,600
3d

00:27:26,559 --> 00:27:30,799
printing library sorry 3d printing open

00:27:29,600 --> 00:27:33,279
source project

00:27:30,799 --> 00:27:34,799
so gina is going to be coming on to talk

00:27:33,279 --> 00:27:37,760
about that as well so

00:27:34,799 --> 00:27:39,200
um like and subscribe hit the the bells

00:27:37,760 --> 00:27:42,000
and all that other stuff

00:27:39,200 --> 00:27:44,640
and uh we'll we'll see in the next one

00:27:42,000 --> 00:27:47,919
gregor thanks for coming on

00:27:44,640 --> 00:27:47,919

YouTube URL: https://www.youtube.com/watch?v=qXHiXSSD3Kc


