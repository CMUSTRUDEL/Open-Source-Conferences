Title: Open Source automation and maintenance with bots & Octokit - Open Source Friday
Publication date: 2020-09-22
Playlist: Open Source Friday
Description: 
	Join us live for Open Source Fridays at https://www.meetup.com/GitHub-Virtual-Meetup

Watch Gregor, the maintainer of octokit/rest.js, Probot, and contributor many other libraries teach how to automate the maintenance of open source projects on GitHub.

Find Gregor on GitHub at https://github.com/gr2m/

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
Google+: http://google.com/+github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:02,480 --> 00:00:06,720
all right

00:00:04,640 --> 00:00:07,759
excellent all right welcome to open

00:00:06,720 --> 00:00:12,480
source friday

00:00:07,759 --> 00:00:12,480
and uh we have a guest here

00:00:13,519 --> 00:00:17,279
and um yeah so we're actually going to

00:00:15,120 --> 00:00:20,720
be talking about automation github

00:00:17,279 --> 00:00:26,000
got gregor here already gregor

00:00:20,720 --> 00:00:27,359
hey can you hear me yes i i am i am here

00:00:26,000 --> 00:00:29,199
excellent well yeah appreciate you

00:00:27,359 --> 00:00:31,279
coming through and taking some time

00:00:29,199 --> 00:00:32,640
time away from the family and from all

00:00:31,279 --> 00:00:34,640
the open source stuff

00:00:32,640 --> 00:00:36,160
um y'all this is my first time in the

00:00:34,640 --> 00:00:38,000
new mixer if you were on the live stream

00:00:36,160 --> 00:00:41,040
open source friday you know we had some

00:00:38,000 --> 00:00:43,280
some issues some some background noise

00:00:41,040 --> 00:00:44,160
uh specifically for the mixer that low

00:00:43,280 --> 00:00:46,160
hump

00:00:44,160 --> 00:00:47,600
uh so i think everything's fixed but if

00:00:46,160 --> 00:00:48,960
there are volume levels

00:00:47,600 --> 00:00:50,559
uh feel free to like this drop it out of

00:00:48,960 --> 00:00:51,440
the chat i'm happy to fix that on the

00:00:50,559 --> 00:00:53,280
fly

00:00:51,440 --> 00:00:54,559
um like to say in the business we're

00:00:53,280 --> 00:00:58,320
doing it live so

00:00:54,559 --> 00:01:00,079
this is this is it and um but yeah

00:00:58,320 --> 00:01:01,280
uh if your first time here coming

00:01:00,079 --> 00:01:02,079
through for open source friday on the

00:01:01,280 --> 00:01:03,920
twitch channel

00:01:02,079 --> 00:01:05,439
uh feel free to hit the follow button uh

00:01:03,920 --> 00:01:07,200
this will give you notifications

00:01:05,439 --> 00:01:09,200
for when we do new streams we have

00:01:07,200 --> 00:01:10,720
streams on the github channel for

00:01:09,200 --> 00:01:12,560
learning how to use git and github

00:01:10,720 --> 00:01:14,000
learning how to do some

00:01:12,560 --> 00:01:15,680
well we have an enterprise channel so

00:01:14,000 --> 00:01:17,040
enterprise stuff's over there but

00:01:15,680 --> 00:01:18,400
yeah hit the follow if you're just

00:01:17,040 --> 00:01:19,360
interested in talking to some github

00:01:18,400 --> 00:01:22,000
employees

00:01:19,360 --> 00:01:22,640
and um yeah so gregor do you want to say

00:01:22,000 --> 00:01:24,640
hello

00:01:22,640 --> 00:01:27,119
um also i love your mug that you have

00:01:24,640 --> 00:01:29,680
your your twitter handle on the mug

00:01:27,119 --> 00:01:32,079
it's amazing are you github handle as

00:01:29,680 --> 00:01:32,079
well yeah

00:01:32,400 --> 00:01:36,320
yeah it's not my twitch channel um that

00:01:34,799 --> 00:01:37,439
one is taken which is why i'm not on

00:01:36,320 --> 00:01:40,880
twitch

00:01:37,439 --> 00:01:41,920
until yesterday i am the real gr2m on

00:01:40,880 --> 00:01:44,960
twitch now

00:01:41,920 --> 00:01:47,119
and i'm hoping to learn from you how to

00:01:44,960 --> 00:01:50,640
stream because i think it's a

00:01:47,119 --> 00:01:52,240
it's actually a great way to um on board

00:01:50,640 --> 00:01:54,079
potentially new contributors like i

00:01:52,240 --> 00:01:55,360
could imagine to just record whatever i

00:01:54,079 --> 00:01:57,040
do for octokid

00:01:55,360 --> 00:01:58,560
yeah you know and then say hey oh this

00:01:57,040 --> 00:02:00,880
is an issue similar to this one in the

00:01:58,560 --> 00:02:02,960
past you can watch this video

00:02:00,880 --> 00:02:04,799
or even you know attach the video to the

00:02:02,960 --> 00:02:06,479
issue when it was resolved and say hey i

00:02:04,799 --> 00:02:08,160
recorded how i did this

00:02:06,479 --> 00:02:09,599
and then turned it into a learning

00:02:08,160 --> 00:02:12,959
opportunity that way

00:02:09,599 --> 00:02:14,080
yeah yeah i mean so i just came off a

00:02:12,959 --> 00:02:14,480
stream this morning doing some open

00:02:14,080 --> 00:02:15,599
source

00:02:14,480 --> 00:02:18,000
and i think you said you mentioned you

00:02:15,599 --> 00:02:20,160
watched it um yeah

00:02:18,000 --> 00:02:21,520
you contributed to node.js i think and

00:02:20,160 --> 00:02:23,200
i've seen you running tests and then i

00:02:21,520 --> 00:02:26,160
felt very sorry for you and then i

00:02:23,200 --> 00:02:27,599
went to get a coffee yes that was the

00:02:26,160 --> 00:02:28,800
whole stream was me talking and then

00:02:27,599 --> 00:02:30,800
running tests

00:02:28,800 --> 00:02:32,319
and then merging dependable prs that was

00:02:30,800 --> 00:02:35,599
the so i think that's

00:02:32,319 --> 00:02:37,440
uh that's pretty much switch

00:02:35,599 --> 00:02:38,959
oh my good friend depending on what we

00:02:37,440 --> 00:02:40,640
uh we are going to talk about

00:02:38,959 --> 00:02:42,480
kind of what today i think yeah

00:02:40,640 --> 00:02:44,160
excellent so do you want to give an

00:02:42,480 --> 00:02:46,319
introduction uh tell us what you do what

00:02:44,160 --> 00:02:49,760
you're involved in

00:02:46,319 --> 00:02:51,680
sure yeah hi i am gregor i'm currently

00:02:49,760 --> 00:02:53,519
the main turner for that javascript

00:02:51,680 --> 00:02:56,560
octokit for github

00:02:53,519 --> 00:03:00,480
as a contractor that's what i

00:02:56,560 --> 00:03:03,280
you know work on maybe 50 of my time

00:03:00,480 --> 00:03:05,440
i do some open source work on my free

00:03:03,280 --> 00:03:09,599
time of which i have much less

00:03:05,440 --> 00:03:12,640
now than i used to have and recently i

00:03:09,599 --> 00:03:15,760
also started to help snowpack

00:03:12,640 --> 00:03:18,319
from from pica and yeah

00:03:15,760 --> 00:03:18,959
i'm here in cambria california you might

00:03:18,319 --> 00:03:20,959
have heard

00:03:18,959 --> 00:03:23,519
uh you know we are living hell here

00:03:20,959 --> 00:03:24,640
right now unfortunately cambria central

00:03:23,519 --> 00:03:26,640
coast uh

00:03:24,640 --> 00:03:28,480
i'm fairly far away from the bad fires

00:03:26,640 --> 00:03:32,239
but i feel really bad for my friends in

00:03:28,480 --> 00:03:35,440
portland seattle san francisco right now

00:03:32,239 --> 00:03:35,440
so i hope they're staying safe

00:03:35,920 --> 00:03:39,360
yeah yeah it's interesting times uh i

00:03:38,080 --> 00:03:39,920
was just looking at the air quality this

00:03:39,360 --> 00:03:43,519
morning

00:03:39,920 --> 00:03:45,040
and it was like 2 48

00:03:43,519 --> 00:03:46,799
which you know what our numbers i don't

00:03:45,040 --> 00:03:47,760
even know what that means uh in air

00:03:46,799 --> 00:03:49,360
quality numbers but it's

00:03:47,760 --> 00:03:51,920
bad yeah i know that's pretty high below

00:03:49,360 --> 00:03:52,480
50 is good below 50. it should be below

00:03:51,920 --> 00:03:54,400
50.

00:03:52,480 --> 00:03:55,599
you know if you if you are exposed

00:03:54,400 --> 00:03:58,400
inside

00:03:55,599 --> 00:03:59,760
to 200 or over 150 for too long you will

00:03:58,400 --> 00:04:03,120
get headache

00:03:59,760 --> 00:04:06,239
and you just feel bad and

00:04:03,120 --> 00:04:07,200
you know start taping off your vents and

00:04:06,239 --> 00:04:10,239
windows

00:04:07,200 --> 00:04:13,519
and get an air purifier yeah that's

00:04:10,239 --> 00:04:16,880
uh you know go ahead

00:04:13,519 --> 00:04:17,919
i just wanted to say for like it's for

00:04:16,880 --> 00:04:21,040
us it's

00:04:17,919 --> 00:04:22,320
it's serious because our kids have

00:04:21,040 --> 00:04:24,160
vulnerable lungs they have been

00:04:22,320 --> 00:04:25,759
intubated for a long time

00:04:24,160 --> 00:04:27,600
which is why they're vulnerable to covet

00:04:25,759 --> 00:04:29,440
as well you know and

00:04:27,600 --> 00:04:31,440
with the fine dust in the air that's

00:04:29,440 --> 00:04:34,080
that's a danger to them so we take this

00:04:31,440 --> 00:04:36,160
very seriously and i have

00:04:34,080 --> 00:04:37,600
serious air purifiers set up here

00:04:36,160 --> 00:04:39,199
everywhere

00:04:37,600 --> 00:04:43,120
and the kids are very upset they cannot

00:04:39,199 --> 00:04:46,160
go out but you know

00:04:43,120 --> 00:04:47,440
they're worse things yeah that's um yeah

00:04:46,160 --> 00:04:48,800
it's a lot to think about and like i

00:04:47,440 --> 00:04:49,840
honestly we're thinking about getting an

00:04:48,800 --> 00:04:52,240
air purifier now

00:04:49,840 --> 00:04:52,960
because it seems to be pretty consistent

00:04:52,240 --> 00:04:55,759
that uh

00:04:52,960 --> 00:04:57,360
we're having issues here and uh uh here

00:04:55,759 --> 00:04:58,160
in california specifically but you know

00:04:57,360 --> 00:05:00,479
just

00:04:58,160 --> 00:05:01,600
the world and climate change and all

00:05:00,479 --> 00:05:04,080
this other stuff like

00:05:01,600 --> 00:05:05,680
uh it's uh intriguing but you know we

00:05:04,080 --> 00:05:06,479
could talk about world events and and

00:05:05,680 --> 00:05:07,840
news uh

00:05:06,479 --> 00:05:10,160
another time that's a whole nother

00:05:07,840 --> 00:05:11,680
stream sorry i'm sorry i didn't mean to

00:05:10,160 --> 00:05:13,520
derail the conversation i don't know

00:05:11,680 --> 00:05:14,800
what's going on in my head right now no

00:05:13,520 --> 00:05:16,880
and honestly that's uh

00:05:14,800 --> 00:05:18,960
that's part of like the work that we do

00:05:16,880 --> 00:05:21,520
and like contribute to open source it

00:05:18,960 --> 00:05:23,520
it comes in waves and like you you

00:05:21,520 --> 00:05:25,680
happen to have the benefit that you can

00:05:23,520 --> 00:05:27,360
contribute and you do get contracted uh

00:05:25,680 --> 00:05:28,080
by github to contribute to things like

00:05:27,360 --> 00:05:29,919
octokid

00:05:28,080 --> 00:05:31,120
i'm curious in the chat too as well um

00:05:29,919 --> 00:05:33,680
see a lot of familiar names

00:05:31,120 --> 00:05:34,639
does anybody use octokit to leverage um

00:05:33,680 --> 00:05:36,880
the github api

00:05:34,639 --> 00:05:37,680
for anything uh if you do i'd love to

00:05:36,880 --> 00:05:39,600
hear your your

00:05:37,680 --> 00:05:41,360
ideas and what you've sort of leveraged

00:05:39,600 --> 00:05:42,880
it for but

00:05:41,360 --> 00:05:45,039
do you want to give like a sort of like

00:05:42,880 --> 00:05:45,840
intro to what octokid is inside how that

00:05:45,039 --> 00:05:49,360
sort of drives

00:05:45,840 --> 00:05:52,960
your open source contributions sure

00:05:49,360 --> 00:05:56,240
um so octokid is

00:05:52,960 --> 00:05:58,960
um the official sdk

00:05:56,240 --> 00:06:00,720
or like set of libraries to integrate

00:05:58,960 --> 00:06:02,240
with github's platform apis

00:06:00,720 --> 00:06:04,840
and there are actually kits in different

00:06:02,240 --> 00:06:08,160
languages mostly

00:06:04,840 --> 00:06:10,319
ruby.net in javascript right now

00:06:08,160 --> 00:06:11,680
and i am the maintainer of the

00:06:10,319 --> 00:06:14,080
javascript doctor kit

00:06:11,680 --> 00:06:15,360
so it's like all the tooling for when

00:06:14,080 --> 00:06:18,479
you use it in a browser

00:06:15,360 --> 00:06:19,360
or use it in iot or node.js and on the

00:06:18,479 --> 00:06:23,840
backend side

00:06:19,360 --> 00:06:26,960
and also dino now then you're using

00:06:23,840 --> 00:06:29,680
using multiple link and the idea is that

00:06:26,960 --> 00:06:30,960
it's an extension of github's apis you

00:06:29,680 --> 00:06:34,080
know there's graphql

00:06:30,960 --> 00:06:36,240
and there are rest apis and instead of

00:06:34,080 --> 00:06:37,919
law integrating with this low-level apis

00:06:36,240 --> 00:06:40,720
you should use

00:06:37,919 --> 00:06:42,240
an environment that is familiar to you

00:06:40,720 --> 00:06:44,880
so as a javascript developer you would

00:06:42,240 --> 00:06:48,000
just call methods you get asynchronous

00:06:44,880 --> 00:06:49,840
responses and you handle them

00:06:48,000 --> 00:06:51,520
yeah and there are some things that we

00:06:49,840 --> 00:06:53,599
can only do in a client side like

00:06:51,520 --> 00:06:56,000
implement best practices like request

00:06:53,599 --> 00:06:58,560
retries or throttling for example

00:06:56,000 --> 00:07:01,039
yeah so you can just get that um out of

00:06:58,560 --> 00:07:03,919
the box transparently and you don't need

00:07:01,039 --> 00:07:04,319
to vary about it so that's my work yeah

00:07:03,919 --> 00:07:08,240
you know

00:07:04,319 --> 00:07:10,000
if utilizing the github api is it's hard

00:07:08,240 --> 00:07:13,919
when you're a javascript developer

00:07:10,000 --> 00:07:16,400
then i'm the person to complain to

00:07:13,919 --> 00:07:17,039
yeah and it's probably um good to

00:07:16,400 --> 00:07:18,880
mention too

00:07:17,039 --> 00:07:21,120
as well that there are a few different

00:07:18,880 --> 00:07:23,039
octokid libraries that are out there

00:07:21,120 --> 00:07:25,520
uh so you have to maintain specifically

00:07:23,039 --> 00:07:29,360
the rest version of this

00:07:25,520 --> 00:07:31,360
yeah exactly there's also i mean there's

00:07:29,360 --> 00:07:35,280
also octokid.rb

00:07:31,360 --> 00:07:38,400
um and octopus update.net on

00:07:35,280 --> 00:07:41,120
like github.com octokid

00:07:38,400 --> 00:07:42,240
yeah they're also linked here so these

00:07:41,120 --> 00:07:43,919
are the ones

00:07:42,240 --> 00:07:45,759
what's what's different with the

00:07:43,919 --> 00:07:47,840
javascript one is

00:07:45,759 --> 00:07:49,039
that it's spread out across many

00:07:47,840 --> 00:07:52,240
repositories

00:07:49,039 --> 00:07:55,280
i think over 30 while the ruby and net

00:07:52,240 --> 00:07:56,560
are like a single repository and one

00:07:55,280 --> 00:07:58,639
reason for that is

00:07:56,560 --> 00:08:00,319
um that the goal for especially the

00:07:58,639 --> 00:08:01,840
javascript doctor kit was to make it

00:08:00,319 --> 00:08:03,680
very decomposable

00:08:01,840 --> 00:08:06,720
yeah because of the requirements of

00:08:03,680 --> 00:08:08,879
javascript you know being used in

00:08:06,720 --> 00:08:11,199
browsers and just low memory

00:08:08,879 --> 00:08:13,759
environments like iot

00:08:11,199 --> 00:08:14,960
bundle size and cpu usage is more

00:08:13,759 --> 00:08:16,879
significant

00:08:14,960 --> 00:08:19,280
yeah so when you use the javascript

00:08:16,879 --> 00:08:21,120
autocad you can kind of

00:08:19,280 --> 00:08:22,560
strike a balance between the devil

00:08:21,120 --> 00:08:25,680
experience you want

00:08:22,560 --> 00:08:28,160
and the resulting final size

00:08:25,680 --> 00:08:30,800
an octokit rest is probably the one that

00:08:28,160 --> 00:08:32,800
people know the most

00:08:30,800 --> 00:08:36,080
it used to be called just github like

00:08:32,800 --> 00:08:38,479
the npm package just get up

00:08:36,080 --> 00:08:39,360
and this is the package that github

00:08:38,479 --> 00:08:41,760
decided to

00:08:39,360 --> 00:08:43,159
adopt when i was hired to take over

00:08:41,760 --> 00:08:47,200
maintenance that was

00:08:43,159 --> 00:08:50,399
2017 and i think honestly it was adopted

00:08:47,200 --> 00:08:52,240
because it had the most stars

00:08:50,399 --> 00:08:55,040
but it had the most stars because it was

00:08:52,240 --> 00:08:58,480
the oldest project i think um

00:08:55,040 --> 00:09:02,880
the you know the origin of of

00:08:58,480 --> 00:09:06,080
octocad rest goes back to 2010

00:09:02,880 --> 00:09:09,680
which it pretty basically predates

00:09:06,080 --> 00:09:13,920
the npm registry it's the time of node

00:09:09,680 --> 00:09:16,399
0.1 so it was like a very very early on

00:09:13,920 --> 00:09:19,279
early adopter um library that you could

00:09:16,399 --> 00:09:21,519
use with node.js before there was even a

00:09:19,279 --> 00:09:23,839
node modules and stuff like that so

00:09:21,519 --> 00:09:26,399
there was a lot of

00:09:23,839 --> 00:09:28,080
legacy in this library and i spent a lot

00:09:26,399 --> 00:09:31,519
of time

00:09:28,080 --> 00:09:33,040
to adopt it

00:09:31,519 --> 00:09:36,160
in a way that it becomes more

00:09:33,040 --> 00:09:38,399
maintainable yeah

00:09:36,160 --> 00:09:40,800
and then later decomposable and octocad

00:09:38,399 --> 00:09:44,480
rest still exists today

00:09:40,800 --> 00:09:47,519
um but you know before it was

00:09:44,480 --> 00:09:49,600
i don't know 40 000 lines of code or so

00:09:47,519 --> 00:09:51,200
everything together and now when you

00:09:49,600 --> 00:09:53,120
look at the source code of it it's i

00:09:51,200 --> 00:09:56,080
think just 10 lines of code

00:09:53,120 --> 00:09:57,760
oh really wow yeah well because it

00:09:56,080 --> 00:10:00,080
basically just composes

00:09:57,760 --> 00:10:01,120
other things together so when you go to

00:10:00,080 --> 00:10:04,160
the source

00:10:01,120 --> 00:10:04,640
directory and the index.js file you can

00:10:04,160 --> 00:10:08,160
kind of

00:10:04,640 --> 00:10:10,720
get an idea um of what it is right so

00:10:08,160 --> 00:10:12,640
there's an octokit core package

00:10:10,720 --> 00:10:14,399
okay which basically implements you know

00:10:12,640 --> 00:10:16,480
just authentication and

00:10:14,399 --> 00:10:18,079
a low level request method and a graphql

00:10:16,480 --> 00:10:20,240
method and then

00:10:18,079 --> 00:10:22,640
there is a plug-in architecture so there

00:10:20,240 --> 00:10:24,959
is a plug-in

00:10:22,640 --> 00:10:26,560
for pagination and the biggest one is

00:10:24,959 --> 00:10:28,640
the endpoint methods which adds the

00:10:26,560 --> 00:10:31,600
600-plus methods

00:10:28,640 --> 00:10:32,079
and this is where most of the code went

00:10:31,600 --> 00:10:35,519
really

00:10:32,079 --> 00:10:39,360
yeah yeah in this repository there is um

00:10:35,519 --> 00:10:41,920
how it works dot md file

00:10:39,360 --> 00:10:43,040
um that you know we could go through a

00:10:41,920 --> 00:10:45,040
little bit just to

00:10:43,040 --> 00:10:46,079
make people understand like how this is

00:10:45,040 --> 00:10:49,120
all yeah

00:10:46,079 --> 00:10:52,320
set up so before we jump into this um

00:10:49,120 --> 00:10:53,920
uh uh i still can't pronounce your your

00:10:52,320 --> 00:10:57,200
name your last name but uh

00:10:53,920 --> 00:10:59,519
um he's my my dutch friend and

00:10:57,200 --> 00:11:01,279
he asked if there is a python equivalent

00:10:59,519 --> 00:11:02,000
of octokit rest because we mentioned

00:11:01,279 --> 00:11:06,720
ruby and

00:11:02,000 --> 00:11:07,680
net so there are a lot of community

00:11:06,720 --> 00:11:10,480
libraries

00:11:07,680 --> 00:11:12,160
but no official one so there is not one

00:11:10,480 --> 00:11:14,240
that is official

00:11:12,160 --> 00:11:15,519
and like this page honestly i don't know

00:11:14,240 --> 00:11:18,959
how well

00:11:15,519 --> 00:11:20,880
updated it is yeah um

00:11:18,959 --> 00:11:23,120
but i'm pretty sure i mean you know

00:11:20,880 --> 00:11:24,880
every developer with python who

00:11:23,120 --> 00:11:26,079
meets integrated github apis i don't

00:11:24,880 --> 00:11:28,320
think they want to start out they're

00:11:26,079 --> 00:11:30,720
creating their own library so i'm pretty

00:11:28,320 --> 00:11:33,279
sure there are some

00:11:30,720 --> 00:11:35,920
yeah the idea was to basically create

00:11:33,279 --> 00:11:38,720
optical libraries for the top 10

00:11:35,920 --> 00:11:40,880
languages yeah i think it's still the

00:11:38,720 --> 00:11:44,160
goal but you know things happened

00:11:40,880 --> 00:11:44,720
and priorities shift so eventually i

00:11:44,160 --> 00:11:47,680
hope

00:11:44,720 --> 00:11:48,240
um we can either you know get a piedmont

00:11:47,680 --> 00:11:50,560
library

00:11:48,240 --> 00:11:52,240
under the octokid umbrella and have

00:11:50,560 --> 00:11:53,440
either a contractor or github or

00:11:52,240 --> 00:11:55,760
maintain it

00:11:53,440 --> 00:11:57,920
or maybe as part of the octokid program

00:11:55,760 --> 00:12:00,320
i think we can provide very good tooling

00:11:57,920 --> 00:12:02,079
and manuals for maintainers

00:12:00,320 --> 00:12:03,360
just to make their lives easier and and

00:12:02,079 --> 00:12:06,480
support them in their work

00:12:03,360 --> 00:12:08,959
so that we have community run projects

00:12:06,480 --> 00:12:10,480
that are of very high quality and very

00:12:08,959 --> 00:12:13,680
well maintained for example

00:12:10,480 --> 00:12:17,200
um google has a go library

00:12:13,680 --> 00:12:18,399
which they use so it's like so that one

00:12:17,200 --> 00:12:22,480
is pretty well maintained

00:12:18,399 --> 00:12:22,480
yeah yes oh yeah

00:12:22,800 --> 00:12:25,839
so you can see i mean there are you know

00:12:24,480 --> 00:12:28,800
they're not there it's like

00:12:25,839 --> 00:12:30,639
a lot of activity in this but i actually

00:12:28,800 --> 00:12:33,680
reached out to them a while ago

00:12:30,639 --> 00:12:35,360
um you know this is now uh i want to

00:12:33,680 --> 00:12:36,639
talk about automation now already

00:12:35,360 --> 00:12:38,480
um but basically i do a lot of

00:12:36,639 --> 00:12:40,000
automation like i'm not manually

00:12:38,480 --> 00:12:43,600
maintaining 600 plus

00:12:40,000 --> 00:12:46,639
rest api endpoints yeah but they do

00:12:43,600 --> 00:12:48,800
and i kind of wanted them to take

00:12:46,639 --> 00:12:51,440
advantage of the tooling that i have

00:12:48,800 --> 00:12:52,000
um and i hope that we can still do that

00:12:51,440 --> 00:12:54,160
just to

00:12:52,000 --> 00:12:56,079
help them a little bit maintain the

00:12:54,160 --> 00:12:57,920
library to keep it up to date

00:12:56,079 --> 00:12:59,600
because the most common problems issues

00:12:57,920 --> 00:13:02,639
that you see is like someone hey

00:12:59,600 --> 00:13:04,079
like get up launch this new lpi already

00:13:02,639 --> 00:13:07,040
an hour ago and you still haven't

00:13:04,079 --> 00:13:08,959
implemented you know yeah um that is

00:13:07,040 --> 00:13:11,200
challenging and

00:13:08,959 --> 00:13:12,079
yeah it is it is very challenging which

00:13:11,200 --> 00:13:13,920
is

00:13:12,079 --> 00:13:15,920
why i let the robots do the heavy

00:13:13,920 --> 00:13:18,800
lifting there exactly and i just want to

00:13:15,920 --> 00:13:20,560
apologize to my belgian friend who is

00:13:18,800 --> 00:13:21,839
not dutch

00:13:20,560 --> 00:13:24,000
you're from belgium thank you for

00:13:21,839 --> 00:13:26,480
calling me out i appreciate that

00:13:24,000 --> 00:13:28,000
um but yeah this is interesting because

00:13:26,480 --> 00:13:31,680
this is a project i've actually

00:13:28,000 --> 00:13:33,120
contributed to this as well and um

00:13:31,680 --> 00:13:34,800
yeah there's a lot of hoops to jump

00:13:33,120 --> 00:13:36,000
through and i think the things like

00:13:34,800 --> 00:13:37,120
having automation because i know they

00:13:36,000 --> 00:13:38,320
have like a cla

00:13:37,120 --> 00:13:40,320
so that's like one thing that is

00:13:38,320 --> 00:13:43,199
opportunity for automation um

00:13:40,320 --> 00:13:44,880
but i definitely want to hear how your

00:13:43,199 --> 00:13:46,560
how you approach the automation piece

00:13:44,880 --> 00:13:48,720
and how you sort of work around some of

00:13:46,560 --> 00:13:50,399
these problems uh but yeah feel free to

00:13:48,720 --> 00:13:52,000
walk us through this uh how does it work

00:13:50,399 --> 00:13:54,639
file

00:13:52,000 --> 00:13:55,279
yeah so you know up top you see this

00:13:54,639 --> 00:13:57,839
graphic

00:13:55,279 --> 00:13:59,120
that is the maximum that i'm capable of

00:13:57,839 --> 00:14:02,639
in terms of creating

00:13:59,120 --> 00:14:05,760
visual design and i apologize

00:14:02,639 --> 00:14:08,480
but it shows kind of the

00:14:05,760 --> 00:14:11,519
like the request life cycle um when you

00:14:08,480 --> 00:14:15,279
send a request to github's apis

00:14:11,519 --> 00:14:17,920
and what you see here is um

00:14:15,279 --> 00:14:18,880
what happens first is that you get

00:14:17,920 --> 00:14:21,040
options

00:14:18,880 --> 00:14:22,560
but which i call endpoint options which

00:14:21,040 --> 00:14:25,680
i think like the

00:14:22,560 --> 00:14:26,240
http methods like get post you know and

00:14:25,680 --> 00:14:30,000
then the

00:14:26,240 --> 00:14:33,360
um the the path of the rest api

00:14:30,000 --> 00:14:35,199
endpoint like slash repos slash

00:14:33,360 --> 00:14:37,040
organization name slash reporting for

00:14:35,199 --> 00:14:39,279
example yeah

00:14:37,040 --> 00:14:40,959
and then there are some global defaults

00:14:39,279 --> 00:14:45,040
um for example

00:14:40,959 --> 00:14:47,440
the the the default accept header

00:14:45,040 --> 00:14:48,480
and the default user agent header and

00:14:47,440 --> 00:14:50,440
the base url

00:14:48,480 --> 00:14:52,639
you know like the root path

00:14:50,440 --> 00:14:56,959
api.github.com for example

00:14:52,639 --> 00:14:59,760
yeah yeah and then

00:14:56,959 --> 00:15:00,160
there are some user options as well like

00:14:59,760 --> 00:15:02,480
many

00:15:00,160 --> 00:15:03,199
most of these api endpoints require to

00:15:02,480 --> 00:15:05,199
you to pass

00:15:03,199 --> 00:15:08,079
in options like for example organization

00:15:05,199 --> 00:15:10,959
name repository name

00:15:08,079 --> 00:15:13,360
and these three options or sources of

00:15:10,959 --> 00:15:15,600
options are combined

00:15:13,360 --> 00:15:17,519
in these four steps and then turned into

00:15:15,600 --> 00:15:19,839
generic request options

00:15:17,519 --> 00:15:22,399
okay which is basically just the you

00:15:19,839 --> 00:15:25,440
know http method the full url

00:15:22,399 --> 00:15:28,560
and then the request body and headers

00:15:25,440 --> 00:15:28,560
so yeah

00:15:28,639 --> 00:15:31,759
so you see there these are kind of the

00:15:30,480 --> 00:15:36,959
the end points

00:15:31,759 --> 00:15:36,959
plus many more based on the

00:15:37,199 --> 00:15:43,600
route and then this is how

00:15:40,399 --> 00:15:46,560
it will end up to look like as a generic

00:15:43,600 --> 00:15:48,079
request object and if you like if you

00:15:46,560 --> 00:15:51,199
kind of want to use the most

00:15:48,079 --> 00:15:53,440
low level of octokid you can stop there

00:15:51,199 --> 00:15:55,680
just like octokid endpoint which only

00:15:53,440 --> 00:15:57,600
you know kind of transforms these

00:15:55,680 --> 00:15:59,279
endpoint options

00:15:57,600 --> 00:16:01,519
into request options and then you can

00:15:59,279 --> 00:16:04,160
utilize your own request library

00:16:01,519 --> 00:16:05,839
but it kind of gives you a nice api to

00:16:04,160 --> 00:16:08,240
basically copy and paste whatever is

00:16:05,839 --> 00:16:11,360
documented on the rest api docs

00:16:08,240 --> 00:16:13,199
yeah and it you will get just just

00:16:11,360 --> 00:16:14,800
generic request options and you can pass

00:16:13,199 --> 00:16:15,839
it into whatever request library you

00:16:14,800 --> 00:16:17,839
have

00:16:15,839 --> 00:16:19,279
so when using electron and like react

00:16:17,839 --> 00:16:21,519
native and they are having like their

00:16:19,279 --> 00:16:23,279
own little built-in request

00:16:21,519 --> 00:16:24,800
library maybe this is the right thing

00:16:23,279 --> 00:16:26,959
for you

00:16:24,800 --> 00:16:27,920
but then i was going to ask about this

00:16:26,959 --> 00:16:29,360
because

00:16:27,920 --> 00:16:32,000
for some people who have used github

00:16:29,360 --> 00:16:35,279
actions uh there's like a github action

00:16:32,000 --> 00:16:37,120
that bundles up the github octa kit

00:16:35,279 --> 00:16:39,759
engagement is that what is this what

00:16:37,120 --> 00:16:39,759
power is that

00:16:40,160 --> 00:16:47,279
um so specifically uh yeah

00:16:43,680 --> 00:16:50,959
specifically distance car or uh

00:16:47,279 --> 00:16:53,519
i think it's actions github

00:16:50,959 --> 00:16:55,199
so if i go this is the wrong library but

00:16:53,519 --> 00:16:58,560
what i'm trying to find is

00:16:55,199 --> 00:17:02,639
oh got a saml

00:16:58,560 --> 00:17:04,640
oh you didn't see this there we go um

00:17:02,639 --> 00:17:06,400
so the actions toolkit has a github

00:17:04,640 --> 00:17:10,799
package that it points to

00:17:06,400 --> 00:17:10,799
oh okay yeah go go into packages

00:17:11,439 --> 00:17:17,679
and then there is github

00:17:14,880 --> 00:17:18,559
and then this is it right so basically

00:17:17,679 --> 00:17:20,959
when you go

00:17:18,559 --> 00:17:22,160
here into into the source it's the same

00:17:20,959 --> 00:17:23,880
as

00:17:22,160 --> 00:17:27,089
or similar to um

00:17:23,880 --> 00:17:27,089
[Music]

00:17:27,839 --> 00:17:31,919
to what you've seen in octokid the rest

00:17:29,520 --> 00:17:33,919
it's using octokid rest under the hood

00:17:31,919 --> 00:17:35,520
and it's doing some default options and

00:17:33,919 --> 00:17:38,320
custom

00:17:35,520 --> 00:17:38,960
um plug-ins and it just kind of compiles

00:17:38,320 --> 00:17:42,160
it into

00:17:38,960 --> 00:17:44,080
something that that they want yeah

00:17:42,160 --> 00:17:45,440
yeah it looks like this is uh yeah

00:17:44,080 --> 00:17:47,520
coming from all these uh separate

00:17:45,440 --> 00:17:48,960
activate libraries and here's our

00:17:47,520 --> 00:17:50,640
rest endpoint method so yeah they're

00:17:48,960 --> 00:17:52,480
based they're basically

00:17:50,640 --> 00:17:54,240
the i guess the wrong term is like

00:17:52,480 --> 00:17:54,960
they're shoving octokit into github

00:17:54,240 --> 00:17:56,240
actions

00:17:54,960 --> 00:17:58,000
and these are the interactions you get

00:17:56,240 --> 00:17:59,679
when you manipulate with the uh the sort

00:17:58,000 --> 00:18:00,559
of context that comes back from github

00:17:59,679 --> 00:18:02,320
like

00:18:00,559 --> 00:18:03,840
you trigger an action on the issue or

00:18:02,320 --> 00:18:05,840
pull requests like that's the context

00:18:03,840 --> 00:18:07,360
that powers it

00:18:05,840 --> 00:18:09,280
exactly yeah they're adding some you

00:18:07,360 --> 00:18:11,120
know some some additional api

00:18:09,280 --> 00:18:13,039
so you get directly access to the event

00:18:11,120 --> 00:18:16,080
name and even payload

00:18:13,039 --> 00:18:17,840
and some other convenience apis to that

00:18:16,080 --> 00:18:18,720
but you know it's probably 95 percent

00:18:17,840 --> 00:18:20,880
octokid

00:18:18,720 --> 00:18:22,880
yeah and then they have the custom apis

00:18:20,880 --> 00:18:25,000
on it which is a perfect

00:18:22,880 --> 00:18:28,080
um you know showcase for for how the

00:18:25,000 --> 00:18:30,080
decomposability of octogate works

00:18:28,080 --> 00:18:31,600
so that is great yeah so you're

00:18:30,080 --> 00:18:34,160
dynamically importing so like

00:18:31,600 --> 00:18:34,640
h1's got a question is this octokit rest

00:18:34,160 --> 00:18:36,080
only

00:18:34,640 --> 00:18:38,160
and does it imply all new github

00:18:36,080 --> 00:18:42,320
features that will be in rest

00:18:38,160 --> 00:18:44,720
for the vta v3 api

00:18:42,320 --> 00:18:45,360
um no it's not it's not rest api only

00:18:44,720 --> 00:18:47,600
it's also

00:18:45,360 --> 00:18:50,880
it's also graphql and it's also

00:18:47,600 --> 00:18:53,679
different authentication strategies

00:18:50,880 --> 00:18:57,360
um so basically everything that github 8

00:18:53,679 --> 00:19:00,080
that you would consider a github api

00:18:57,360 --> 00:19:02,559
is implemented with a with an autocad

00:19:00,080 --> 00:19:02,559
library

00:19:02,720 --> 00:19:06,720
yeah so octocad core comes out of the

00:19:04,640 --> 00:19:08,320
box for example with a graphql method

00:19:06,720 --> 00:19:10,640
which is just a convenience method to

00:19:08,320 --> 00:19:12,799
use to send a graphql query

00:19:10,640 --> 00:19:13,679
yeah which i like that i've actually

00:19:12,799 --> 00:19:15,600
leveraged i loved

00:19:13,679 --> 00:19:17,919
autographql and just being able to just

00:19:15,600 --> 00:19:20,799
uh not know what i'm doing in this pipe

00:19:17,919 --> 00:19:21,440
a graphql query into that uh has been

00:19:20,799 --> 00:19:23,360
nice and

00:19:21,440 --> 00:19:25,200
i've been i don't use graphql a lot in

00:19:23,360 --> 00:19:27,919
my automation because i tend to

00:19:25,200 --> 00:19:29,360
i tend to um not like what it gives

00:19:27,919 --> 00:19:29,760
gives me back and i just know how to

00:19:29,360 --> 00:19:31,360
sort of

00:19:29,760 --> 00:19:32,960
navigate the rest api when it comes to

00:19:31,360 --> 00:19:34,559
github um

00:19:32,960 --> 00:19:36,640
but um maybe i should stop complaining

00:19:34,559 --> 00:19:39,760
about my employer and uh let's continue

00:19:36,640 --> 00:19:42,960
to uh let's continue to move on with uh

00:19:39,760 --> 00:19:45,760
yeah just yeah so let me go back

00:19:42,960 --> 00:19:46,640
go back to how it works oh yeah it's

00:19:45,760 --> 00:19:49,760
very quick

00:19:46,640 --> 00:19:51,520
like i think yeah yeah so basically now

00:19:49,760 --> 00:19:55,520
you have the generic request options

00:19:51,520 --> 00:19:57,760
and then octokid what we use

00:19:55,520 --> 00:19:58,960
to send requests is node fetch which is

00:19:57,760 --> 00:20:01,440
a polyfill for the

00:19:58,960 --> 00:20:02,880
for browser's native fetch api just

00:20:01,440 --> 00:20:05,600
because we

00:20:02,880 --> 00:20:06,400
optimize for browsers and the browser

00:20:05,600 --> 00:20:09,200
bundle size

00:20:06,400 --> 00:20:09,760
yeah and and for node you know it's okay

00:20:09,200 --> 00:20:12,559
to have

00:20:09,760 --> 00:20:13,919
a bigger bundle size at least it used to

00:20:12,559 --> 00:20:16,400
you know now with serverless

00:20:13,919 --> 00:20:18,480
like uh the payload on node.js side it

00:20:16,400 --> 00:20:20,480
becomes a problem as well so we might

00:20:18,480 --> 00:20:22,159
migrate to something more efficient for

00:20:20,480 --> 00:20:24,720
node.js users but anyway

00:20:22,159 --> 00:20:26,720
like node fetch is our library that we

00:20:24,720 --> 00:20:28,000
use and the way we have the same apis

00:20:26,720 --> 00:20:31,120
for our own environments and we just

00:20:28,000 --> 00:20:33,520
pass in these generic request

00:20:31,120 --> 00:20:35,039
options in there and no fetch takes care

00:20:33,520 --> 00:20:36,320
of sending and receiving

00:20:35,039 --> 00:20:38,480
sending requests and receiving the

00:20:36,320 --> 00:20:42,640
response

00:20:38,480 --> 00:20:45,039
okay um yeah and then you have hooks

00:20:42,640 --> 00:20:46,799
which is how the whole architecture

00:20:45,039 --> 00:20:48,000
plugin architecture works so you can

00:20:46,799 --> 00:20:51,600
hook into the request

00:20:48,000 --> 00:20:53,840
lifecycle you can run custom code before

00:20:51,600 --> 00:20:54,880
a request is sent and for example alter

00:20:53,840 --> 00:20:58,640
options

00:20:54,880 --> 00:21:00,240
you can entirely replace the request

00:20:58,640 --> 00:21:02,640
method you know when you see

00:21:00,240 --> 00:21:04,000
this code right here on the very bottom

00:21:02,640 --> 00:21:06,000
i can

00:21:04,000 --> 00:21:07,600
i can just swap out my request method

00:21:06,000 --> 00:21:08,559
and do something else which is great for

00:21:07,600 --> 00:21:11,280
testing

00:21:08,559 --> 00:21:13,039
yeah for example you know you can just

00:21:11,280 --> 00:21:13,600
instead of sending any requests you can

00:21:13,039 --> 00:21:15,520
just test

00:21:13,600 --> 00:21:17,039
if you get the right options and return

00:21:15,520 --> 00:21:19,039
some dummy data

00:21:17,039 --> 00:21:20,799
so that is great you can handle our

00:21:19,039 --> 00:21:22,320
errors for example when you want to

00:21:20,799 --> 00:21:25,360
implement

00:21:22,320 --> 00:21:27,679
um like http caching for example or

00:21:25,360 --> 00:21:28,400
you know request retries then you can

00:21:27,679 --> 00:21:30,480
handle the

00:21:28,400 --> 00:21:32,400
error and just resend the request again

00:21:30,480 --> 00:21:34,480
for example

00:21:32,400 --> 00:21:35,840
yeah and because of that that kind of

00:21:34,480 --> 00:21:38,320
enables us to have this very

00:21:35,840 --> 00:21:40,720
decomposable architecture

00:21:38,320 --> 00:21:42,720
which also results in the challenge that

00:21:40,720 --> 00:21:44,400
we i think right now yesterday i checked

00:21:42,720 --> 00:21:46,880
i think we have 37

00:21:44,400 --> 00:21:48,000
packages on npm with octocad and each

00:21:46,880 --> 00:21:51,280
one of them

00:21:48,000 --> 00:21:53,200
has their own repository so and i'm not

00:21:51,280 --> 00:21:57,039
a big fan of of mono

00:21:53,200 --> 00:22:00,320
repositories um i like my

00:21:57,039 --> 00:22:03,280
um yeah i think when you go to npm.com

00:22:00,320 --> 00:22:05,280
slash org slash octokit then you will

00:22:03,280 --> 00:22:07,520
see them all

00:22:05,280 --> 00:22:08,720
yeah navigating instead of package just

00:22:07,520 --> 00:22:12,080
yeah there we go

00:22:08,720 --> 00:22:14,400
that should i think so yep yeah it says

00:22:12,080 --> 00:22:16,640
25 but i think you can just load more

00:22:14,400 --> 00:22:18,400
um and then you know you can kind of go

00:22:16,640 --> 00:22:20,640
through it and you see all the different

00:22:18,400 --> 00:22:22,559
stuff that we do

00:22:20,640 --> 00:22:24,559
and there are of course like a lot of

00:22:22,559 --> 00:22:26,080
other plugins that just users created

00:22:24,559 --> 00:22:29,440
that i also have on my own account

00:22:26,080 --> 00:22:30,960
which are more like higher level plugins

00:22:29,440 --> 00:22:33,360
yeah i like this because um i've been

00:22:30,960 --> 00:22:35,280
doing experimentation with um

00:22:33,360 --> 00:22:36,799
so someone asked in the chat uh written

00:22:35,280 --> 00:22:39,440
you asked uh what

00:22:36,799 --> 00:22:40,960
meeting presentation software using uh

00:22:39,440 --> 00:22:42,640
this is google hangouts no i'm just

00:22:40,960 --> 00:22:44,000
kidding uh this is

00:22:42,640 --> 00:22:45,600
we're actually using zoom to actually

00:22:44,000 --> 00:22:47,120
have the conversation and then i'm

00:22:45,600 --> 00:22:49,760
leveraging obs

00:22:47,120 --> 00:22:51,039
to do a bunch of chicanery and uh pipe

00:22:49,760 --> 00:22:53,600
this onto the screen

00:22:51,039 --> 00:22:54,240
so um yeah that's sort of the secret

00:22:53,600 --> 00:22:56,720
sauce

00:22:54,240 --> 00:22:57,919
but i mentioned obs because one of the

00:22:56,720 --> 00:22:59,600
places the environments and you

00:22:57,919 --> 00:23:02,000
mentioned package sizes

00:22:59,600 --> 00:23:02,880
um for me to get this from obs from my

00:23:02,000 --> 00:23:05,760
windows pc

00:23:02,880 --> 00:23:06,960
up into twitch if i do any other like

00:23:05,760 --> 00:23:10,080
fancy javascript

00:23:06,960 --> 00:23:12,400
to sort of power my obs um

00:23:10,080 --> 00:23:14,240
that could slow down and actually and

00:23:12,400 --> 00:23:15,440
decrease my bit rate too as well

00:23:14,240 --> 00:23:16,799
so like that's one thing that i'm sort

00:23:15,440 --> 00:23:18,320
of thinking right now when it comes to

00:23:16,799 --> 00:23:21,440
leveraging node.js and

00:23:18,320 --> 00:23:23,679
leveraging apis and libraries uh i've

00:23:21,440 --> 00:23:25,760
been trying to only use what i need

00:23:23,679 --> 00:23:26,799
uh so right now my chat integration so i

00:23:25,760 --> 00:23:30,480
i um

00:23:26,799 --> 00:23:32,559
i stream uh tuesday and fridays on bbw

00:23:30,480 --> 00:23:34,000
um it's my twitch channel i normally

00:23:32,559 --> 00:23:36,080
would have had our twitch handles

00:23:34,000 --> 00:23:37,039
are on the screen but i forgot to put

00:23:36,080 --> 00:23:38,640
that up there

00:23:37,039 --> 00:23:41,679
but i mentioned that because i like the

00:23:38,640 --> 00:23:43,679
setup where i can just grab what i need

00:23:41,679 --> 00:23:44,720
um if i wanted to basically build my own

00:23:43,679 --> 00:23:47,360
github actions

00:23:44,720 --> 00:23:48,640
or my own actions runner or whatnot but

00:23:47,360 --> 00:23:50,559
i don't want to bring everything along

00:23:48,640 --> 00:23:53,520
for the ride i just only need

00:23:50,559 --> 00:23:55,120
what's going to make the job run yeah

00:23:53,520 --> 00:23:57,600
but yeah

00:23:55,120 --> 00:23:59,039
well you know that's i mean that would

00:23:57,600 --> 00:24:00,640
be the same with uh with a mono

00:23:59,039 --> 00:24:02,559
repository you still have to

00:24:00,640 --> 00:24:04,240
you know separate npm packages but

00:24:02,559 --> 00:24:06,720
everything is in the same repository

00:24:04,240 --> 00:24:07,279
and yeah the reason why the main reason

00:24:06,720 --> 00:24:09,120
to me

00:24:07,279 --> 00:24:11,600
why i split this up into separate

00:24:09,120 --> 00:24:14,480
repositories is to

00:24:11,600 --> 00:24:15,520
um make it easy to contributers yeah

00:24:14,480 --> 00:24:17,600
okay yeah

00:24:15,520 --> 00:24:20,240
because you know when you you get

00:24:17,600 --> 00:24:23,200
overwhelmed if all this code was in one

00:24:20,240 --> 00:24:25,039
repository and every issue and every

00:24:23,200 --> 00:24:26,400
pull request was in the same repository

00:24:25,039 --> 00:24:28,559
it would be hard

00:24:26,400 --> 00:24:30,640
to onboard new contributors and give

00:24:28,559 --> 00:24:32,480
them ownership of something

00:24:30,640 --> 00:24:34,320
yeah well the way this is you know

00:24:32,480 --> 00:24:36,320
there's like an octagon webhooks.js

00:24:34,320 --> 00:24:37,760
for example repository which is only

00:24:36,320 --> 00:24:40,559
taking care of

00:24:37,760 --> 00:24:42,480
receiving webhooks um of verifying

00:24:40,559 --> 00:24:46,720
signature and so on

00:24:42,480 --> 00:24:48,880
um and there were some people who who

00:24:46,720 --> 00:24:51,279
you know tried to become contributors

00:24:48,880 --> 00:24:52,880
and i mentored them a little bit and now

00:24:51,279 --> 00:24:54,480
there's oscar for example who did a

00:24:52,880 --> 00:24:56,320
fantastic job and just migrated the

00:24:54,480 --> 00:24:57,600
whole repository from javascript to

00:24:56,320 --> 00:25:00,880
typescript

00:24:57,600 --> 00:25:01,200
and and he's now the main maintainer and

00:25:00,880 --> 00:25:03,039
i

00:25:01,200 --> 00:25:05,520
see myself more in a supportive role

00:25:03,039 --> 00:25:05,520
right now

00:25:05,760 --> 00:25:10,480
and if this was all in one repository

00:25:08,880 --> 00:25:12,840
would be much harder i could not

00:25:10,480 --> 00:25:14,159
leverage all the github repository

00:25:12,840 --> 00:25:16,080
settings

00:25:14,159 --> 00:25:17,440
for example and they would be

00:25:16,080 --> 00:25:19,279
overwhelmed with

00:25:17,440 --> 00:25:22,559
hundreds of issues that are not relevant

00:25:19,279 --> 00:25:25,760
to them so it definitely makes my life

00:25:22,559 --> 00:25:29,440
harder in terms of maintaining it

00:25:25,760 --> 00:25:31,600
it's harder to reproduce problems

00:25:29,440 --> 00:25:32,880
that you know go across multiple

00:25:31,600 --> 00:25:35,520
packages

00:25:32,880 --> 00:25:36,240
but i rather work on that problem with

00:25:35,520 --> 00:25:39,440
good tooling

00:25:36,240 --> 00:25:41,279
and you know bots then

00:25:39,440 --> 00:25:43,600
kind of focusing on making my own life

00:25:41,279 --> 00:25:46,000
easier um but

00:25:43,600 --> 00:25:47,760
raising the bar for contributors yeah so

00:25:46,000 --> 00:25:50,159
can we dig into that too as well because

00:25:47,760 --> 00:25:51,760
my question is how do you even so it's

00:25:50,159 --> 00:25:53,279
great that you have a maintainer that's

00:25:51,760 --> 00:25:54,880
managing this project

00:25:53,279 --> 00:25:57,039
but it sounds like a lot of the weight

00:25:54,880 --> 00:25:57,840
is on you to manage these like 30 plus

00:25:57,039 --> 00:26:00,400
repos

00:25:57,840 --> 00:26:01,840
so how do you even triage all those

00:26:00,400 --> 00:26:03,120
issues that are coming in all the pr's

00:26:01,840 --> 00:26:05,760
that are coming in

00:26:03,120 --> 00:26:06,240
and do you leverage automation for that

00:26:05,760 --> 00:26:09,520
yeah

00:26:06,240 --> 00:26:13,120
so let's start here let me

00:26:09,520 --> 00:26:14,720
post a link to our chat here

00:26:13,120 --> 00:26:16,400
so that's cool about my work i can't

00:26:14,720 --> 00:26:17,440
work for github but everything i do is

00:26:16,400 --> 00:26:20,559
open source

00:26:17,440 --> 00:26:23,360
um so it's easy to share everything now

00:26:20,559 --> 00:26:25,120
um sorry where'd you post chat oh you

00:26:23,360 --> 00:26:26,960
posted in there

00:26:25,120 --> 00:26:28,799
you are currently timed out from chat

00:26:26,960 --> 00:26:30,640
that's funny yeah so

00:26:28,799 --> 00:26:31,919
you've been bitten by the mods yeah

00:26:30,640 --> 00:26:33,440
because this channel has a lot of

00:26:31,919 --> 00:26:35,360
following and we do have a lot of people

00:26:33,440 --> 00:26:38,320
coming through uh we had to disable

00:26:35,360 --> 00:26:40,240
uh links uh because got it because

00:26:38,320 --> 00:26:43,760
spammers

00:26:40,240 --> 00:26:45,919
yeah oh man anyway

00:26:43,760 --> 00:26:47,440
so i can i can just tell you there you

00:26:45,919 --> 00:26:52,159
go

00:26:47,440 --> 00:26:54,640
go into the project boards i got it up

00:26:52,159 --> 00:26:55,840
uh it's it's on the organization not the

00:26:54,640 --> 00:26:59,120
repository

00:26:55,840 --> 00:27:01,760
yeah so it's orgs octokid projects one

00:26:59,120 --> 00:27:01,760
uh got it

00:27:03,279 --> 00:27:07,840
project slash pro qrl

00:27:08,000 --> 00:27:11,440
learn how to type with b dougie that's

00:27:09,520 --> 00:27:14,640
the uh the name of the stream

00:27:11,440 --> 00:27:16,640
yeah and so this is kind of my

00:27:14,640 --> 00:27:17,840
my project board um with which i can

00:27:16,640 --> 00:27:20,240
also give

00:27:17,840 --> 00:27:23,600
just transparency you know to to my to

00:27:20,240 --> 00:27:26,559
my managers but also to the community

00:27:23,600 --> 00:27:28,640
and what you see here are the four kind

00:27:26,559 --> 00:27:30,240
of main columns and how i categorize or

00:27:28,640 --> 00:27:32,840
try etch everything

00:27:30,240 --> 00:27:34,080
which is support maintenance bugs and

00:27:32,840 --> 00:27:36,000
features

00:27:34,080 --> 00:27:37,520
and it also gives me an idea like where

00:27:36,000 --> 00:27:39,440
am i spending my time on

00:27:37,520 --> 00:27:41,440
like yeah you know is this more is there

00:27:39,440 --> 00:27:42,559
more features something that brings us

00:27:41,440 --> 00:27:44,799
ahead or is there

00:27:42,559 --> 00:27:46,399
more bugs which means we just don't have

00:27:44,799 --> 00:27:49,120
a good quality

00:27:46,399 --> 00:27:51,039
of code um more certain increase of

00:27:49,120 --> 00:27:52,640
support which is usually a sign we need

00:27:51,039 --> 00:27:56,960
better documentation

00:27:52,640 --> 00:28:00,240
and this board is entirely automated

00:27:56,960 --> 00:28:01,840
um so that's that's fascinating so

00:28:00,240 --> 00:28:03,120
you automate it on the level sorry i'm

00:28:01,840 --> 00:28:04,320
going to drop the chat so people can

00:28:03,120 --> 00:28:07,279
actually click through yeah

00:28:04,320 --> 00:28:08,240
and take a look um so you i've made it

00:28:07,279 --> 00:28:10,080
on the level where

00:28:08,240 --> 00:28:11,679
when an issue gets opened it actually

00:28:10,080 --> 00:28:14,880
shows up on the board

00:28:11,679 --> 00:28:17,120
yeah oh here we are exactly

00:28:14,880 --> 00:28:18,080
i think yeah so basically um i just

00:28:17,120 --> 00:28:20,399
hacked together

00:28:18,080 --> 00:28:22,000
um actually a probot app you know which

00:28:20,399 --> 00:28:23,200
is using autocad internally to build

00:28:22,000 --> 00:28:25,600
github apps

00:28:23,200 --> 00:28:27,440
and it's hosted on this cool website

00:28:25,600 --> 00:28:29,200
called glitch.com where you can just go

00:28:27,440 --> 00:28:29,760
in and type away and it's hosted right

00:28:29,200 --> 00:28:32,720
away

00:28:29,760 --> 00:28:34,240
yeah so uh and i think i'll link that

00:28:32,720 --> 00:28:36,000
when you press on the menu you can see

00:28:34,240 --> 00:28:39,600
the source code of it actually

00:28:36,000 --> 00:28:41,520
on the on the menu icon on the right

00:28:39,600 --> 00:28:46,559
side

00:28:41,520 --> 00:28:49,679
i think you should click on show more

00:28:46,559 --> 00:28:51,520
oh yeah so basically this is a you know

00:28:49,679 --> 00:28:53,360
node.js application

00:28:51,520 --> 00:28:55,360
and what it does is every new pull

00:28:53,360 --> 00:28:57,440
request every new issue goes into the

00:28:55,360 --> 00:29:01,520
first inbox column

00:28:57,440 --> 00:29:04,960
and then depending on

00:29:01,520 --> 00:29:07,679
on labels that are attached to it

00:29:04,960 --> 00:29:08,559
you see they're like maintenance bark

00:29:07,679 --> 00:29:11,679
feature

00:29:08,559 --> 00:29:13,120
and line 49 it categorizes them

00:29:11,679 --> 00:29:14,159
correctly and moves them to their

00:29:13,120 --> 00:29:16,960
respective

00:29:14,159 --> 00:29:19,520
column and then when i assign myself

00:29:16,960 --> 00:29:21,919
then it gets also moved to

00:29:19,520 --> 00:29:23,679
uh to a column i think in progress and

00:29:21,919 --> 00:29:25,120
then when it's done i think this is

00:29:23,679 --> 00:29:28,000
github built in automation

00:29:25,120 --> 00:29:29,360
it just is moves to the done column okay

00:29:28,000 --> 00:29:31,440
yeah yeah because the automation on the

00:29:29,360 --> 00:29:32,880
project board is

00:29:31,440 --> 00:29:34,480
there's there's existing automation that

00:29:32,880 --> 00:29:36,159
happens that you could actually enable

00:29:34,480 --> 00:29:38,880
but it is limited so

00:29:36,159 --> 00:29:40,960
yeah you can't do not enough for my my

00:29:38,880 --> 00:29:42,799
requirements so this is this is uh

00:29:40,960 --> 00:29:44,799
you know i mean people feel free to

00:29:42,799 --> 00:29:46,480
steal this it's it's very useful it was

00:29:44,799 --> 00:29:47,840
like a one-hour hack but man i'm using

00:29:46,480 --> 00:29:49,520
this every day

00:29:47,840 --> 00:29:51,360
wow whatever it's just very hacky

00:29:49,520 --> 00:29:53,440
because i'm the only user so it's really

00:29:51,360 --> 00:29:53,760
nice to just kind of hack away and you

00:29:53,440 --> 00:29:55,200
know

00:29:53,760 --> 00:29:57,919
if something's not working then it only

00:29:55,200 --> 00:29:58,799
affects me so that's a fun thing to to

00:29:57,919 --> 00:30:01,919
just

00:29:58,799 --> 00:30:03,120
work on yeah and um

00:30:01,919 --> 00:30:05,120
there was a mention in the chat too as

00:30:03,120 --> 00:30:06,159
well uh octobox too as well as another

00:30:05,120 --> 00:30:08,320
good solution

00:30:06,159 --> 00:30:09,600
oh yeah for managing this uh which i use

00:30:08,320 --> 00:30:12,000
octobox for a while

00:30:09,600 --> 00:30:13,679
uh my limitation is well it's it's not a

00:30:12,000 --> 00:30:15,760
long implementation anymore

00:30:13,679 --> 00:30:17,760
uh but i couldn't use it for github

00:30:15,760 --> 00:30:18,960
because we have github enterprise and we

00:30:17,760 --> 00:30:21,120
had to get octobox to work in

00:30:18,960 --> 00:30:22,640
anyways a long story i have a lot of

00:30:21,120 --> 00:30:23,440
issues on github that i have to manage

00:30:22,640 --> 00:30:25,039
in those repos

00:30:23,440 --> 00:30:27,039
and i couldn't use that for that but

00:30:25,039 --> 00:30:30,399
yeah the project board i love

00:30:27,039 --> 00:30:32,240
as an idea

00:30:30,399 --> 00:30:33,520
yeah everything that it does is it also

00:30:32,240 --> 00:30:35,679
uses some ci

00:30:33,520 --> 00:30:37,600
integration so in pull requests it sets

00:30:35,679 --> 00:30:39,440
a status if you didn't

00:30:37,600 --> 00:30:41,279
add one of the labels that i require you

00:30:39,440 --> 00:30:42,880
to set so it reminds me oh

00:30:41,279 --> 00:30:44,480
please tell me is this a bug is this a

00:30:42,880 --> 00:30:47,600
feature

00:30:44,480 --> 00:30:50,480
um and if not then i will just fail the

00:30:47,600 --> 00:30:53,679
ci until you do

00:30:50,480 --> 00:30:55,760
yes that's a i love that so you allow

00:30:53,679 --> 00:30:59,120
pull requests without issues is that the

00:30:55,760 --> 00:31:02,399
the case um

00:30:59,120 --> 00:31:03,039
i mean i allow for it but you know

00:31:02,399 --> 00:31:05,360
usually

00:31:03,039 --> 00:31:06,720
in general uh the rule is when you come

00:31:05,360 --> 00:31:08,000
to an open source project and you don't

00:31:06,720 --> 00:31:10,080
know exactly what to do

00:31:08,000 --> 00:31:12,640
then you are in someone else's house and

00:31:10,080 --> 00:31:14,399
be kind and if you think you want to add

00:31:12,640 --> 00:31:15,760
something then maybe ask and talk to

00:31:14,399 --> 00:31:17,679
them first

00:31:15,760 --> 00:31:19,600
because otherwise you might waste a lot

00:31:17,679 --> 00:31:21,440
of time and get upset if they just close

00:31:19,600 --> 00:31:25,360
your pull requests and saying

00:31:21,440 --> 00:31:27,679
no i'm not interested in that um

00:31:25,360 --> 00:31:29,600
but yeah i mean another thing that opens

00:31:27,679 --> 00:31:31,200
a lot of pull requests directly is the

00:31:29,600 --> 00:31:32,799
panabot for example

00:31:31,200 --> 00:31:35,600
that you know we can talk about a little

00:31:32,799 --> 00:31:37,279
bit but yeah so this is kind of my my

00:31:35,600 --> 00:31:38,960
headquarters if you want so my project

00:31:37,279 --> 00:31:40,799
board and when you see the first column

00:31:38,960 --> 00:31:42,559
i left some issues there for you the

00:31:40,799 --> 00:31:45,760
inbox which we can talk about this is

00:31:42,559 --> 00:31:46,320
all my robots all of them are my robots

00:31:45,760 --> 00:31:48,080
and and

00:31:46,320 --> 00:31:50,240
you can quickly go through them if you

00:31:48,080 --> 00:31:54,080
like yeah let's take a look

00:31:50,240 --> 00:31:56,720
which one is that oh fixtures yeah

00:31:54,080 --> 00:31:58,159
so you know the thing is um when you're

00:31:56,720 --> 00:32:00,559
running your test

00:31:58,159 --> 00:32:03,679
for an sdk against an api you don't want

00:32:00,559 --> 00:32:05,279
to send real requested api because

00:32:03,679 --> 00:32:07,039
you will just you know hit the rate

00:32:05,279 --> 00:32:10,480
limit so what i do

00:32:07,039 --> 00:32:14,159
i created fixtures scenarios which

00:32:10,480 --> 00:32:16,480
get automatically updated every night um

00:32:14,159 --> 00:32:19,200
so basically it sends the request once

00:32:16,480 --> 00:32:21,200
and then i have i then have a logic that

00:32:19,200 --> 00:32:23,120
normalizes the responses so all the time

00:32:21,200 --> 00:32:24,960
stamps and ids are the same

00:32:23,120 --> 00:32:27,600
and that way for example here you can

00:32:24,960 --> 00:32:28,159
say github started to respond with a new

00:32:27,600 --> 00:32:31,039
property

00:32:28,159 --> 00:32:32,399
members can create pages yeah this is

00:32:31,039 --> 00:32:36,000
just something that showed up often

00:32:32,399 --> 00:32:38,000
times before they even document it

00:32:36,000 --> 00:32:39,760
and that way i can just accept it and

00:32:38,000 --> 00:32:42,159
all my

00:32:39,760 --> 00:32:42,960
tests now basically test against the

00:32:42,159 --> 00:32:46,720
real api

00:32:42,960 --> 00:32:48,799
response that way ah interesting

00:32:46,720 --> 00:32:49,760
so it's a real api response but you're

00:32:48,799 --> 00:32:54,320
just you're

00:32:49,760 --> 00:32:56,480
creating these nightly um or on a cron

00:32:54,320 --> 00:32:58,240
exactly yeah so you know you see the raw

00:32:56,480 --> 00:33:00,320
picture this is actually the real

00:32:58,240 --> 00:33:02,000
response right okay and you see like the

00:33:00,320 --> 00:33:02,399
timestamps change and so on but you can

00:33:02,000 --> 00:33:05,919
just

00:33:02,399 --> 00:33:07,519
hide this away as viewed yeah um because

00:33:05,919 --> 00:33:08,960
then there is another one which is

00:33:07,519 --> 00:33:10,320
called normalized

00:33:08,960 --> 00:33:12,480
fixture and this is the one that is

00:33:10,320 --> 00:33:14,960
relevant and in there you see

00:33:12,480 --> 00:33:16,880
only two lines have changed the new

00:33:14,960 --> 00:33:18,320
property and the content length because

00:33:16,880 --> 00:33:20,080
the property has changed

00:33:18,320 --> 00:33:22,000
so this is the normalized one this is

00:33:20,080 --> 00:33:24,080
where

00:33:22,000 --> 00:33:25,200
it only changes if there are actual

00:33:24,080 --> 00:33:27,440
changes

00:33:25,200 --> 00:33:29,039
yeah and i only get pull requests from

00:33:27,440 --> 00:33:31,200
my little fixture spot here

00:33:29,039 --> 00:33:32,880
if they're actually changes so i would

00:33:31,200 --> 00:33:34,000
say there are not many and the api

00:33:32,880 --> 00:33:36,480
doesn't change so often

00:33:34,000 --> 00:33:38,399
for existing api methods yeah but you

00:33:36,480 --> 00:33:38,799
know every once in a while there are

00:33:38,399 --> 00:33:41,200
some

00:33:38,799 --> 00:33:41,919
and and it's just good you know for for

00:33:41,200 --> 00:33:44,799
me

00:33:41,919 --> 00:33:47,440
to have the confidence that the tastics

00:33:44,799 --> 00:33:50,159
for example and octokid rests

00:33:47,440 --> 00:33:51,600
that run against that i'm actually

00:33:50,159 --> 00:33:53,120
running against the real thing and don't

00:33:51,600 --> 00:33:54,960
get into a situation where i create

00:33:53,120 --> 00:33:57,039
mocks once and they get out of date and

00:33:54,960 --> 00:33:59,200
i think my tests are passing but the

00:33:57,039 --> 00:34:01,440
reality is different now

00:33:59,200 --> 00:34:02,640
so this is an approach to work around

00:34:01,440 --> 00:34:04,880
that

00:34:02,640 --> 00:34:06,880
so the question of the chat is are we

00:34:04,880 --> 00:34:09,440
able to dig deeper in how this is done

00:34:06,880 --> 00:34:11,520
like and how you actually are writing

00:34:09,440 --> 00:34:14,240
the the automation

00:34:11,520 --> 00:34:15,119
sure um so i use a chrome job using

00:34:14,240 --> 00:34:18,839
github action

00:34:15,119 --> 00:34:21,839
so look into github workflows

00:34:18,839 --> 00:34:21,839
updates

00:34:22,000 --> 00:34:25,359
and this is you see a it's running a

00:34:23,599 --> 00:34:29,520
chrome job so every night at

00:34:25,359 --> 00:34:32,839
midnight pacific time it runs

00:34:29,520 --> 00:34:35,280
the script in line 16 node bin record

00:34:32,839 --> 00:34:38,560
update

00:34:35,280 --> 00:34:40,560
and then i pass in some some tokens

00:34:38,560 --> 00:34:42,159
you know especially you know like 19 and

00:34:40,560 --> 00:34:43,679
20 i basically created

00:34:42,159 --> 00:34:45,280
dummy users that i use for that

00:34:43,679 --> 00:34:47,359
specifically yeah

00:34:45,280 --> 00:34:49,440
and they need these these tokens in

00:34:47,359 --> 00:34:52,639
order to make the requests

00:34:49,440 --> 00:34:55,520
um and then there's a lot of logic that

00:34:52,639 --> 00:34:56,879
um receives the response and then

00:34:55,520 --> 00:34:58,160
normalizes it

00:34:56,879 --> 00:34:59,440
that's a lot of code and i don't want to

00:34:58,160 --> 00:35:00,560
go through that now i will rather show

00:34:59,440 --> 00:35:02,320
you some more bots

00:35:00,560 --> 00:35:05,359
but definitely check it out like for me

00:35:02,320 --> 00:35:08,720
the idea with this is

00:35:05,359 --> 00:35:11,440
um to add more scenarios like maybe you

00:35:08,720 --> 00:35:14,480
can check out the folder scenarios

00:35:11,440 --> 00:35:17,760
that something else we can do um

00:35:14,480 --> 00:35:19,920
when you go to the root folder

00:35:17,760 --> 00:35:21,440
oh well nested pretty deeply all right

00:35:19,920 --> 00:35:23,520
here we go

00:35:21,440 --> 00:35:24,960
so let me see where is scenarios oh yeah

00:35:23,520 --> 00:35:26,640
so you see like scenarios

00:35:24,960 --> 00:35:28,079
right now only for api github.com and

00:35:26,640 --> 00:35:30,000
then you see

00:35:28,079 --> 00:35:31,280
like all these different scenarios for

00:35:30,000 --> 00:35:34,480
example i don't know

00:35:31,280 --> 00:35:37,599
you can say create i like something more

00:35:34,480 --> 00:35:39,520
add labels okay add labels

00:35:37,599 --> 00:35:41,520
add labels issue right and then when you

00:35:39,520 --> 00:35:43,119
see on the record it's just a javascript

00:35:41,520 --> 00:35:44,000
file so when you know some javascript

00:35:43,119 --> 00:35:46,400
you are able to to

00:35:44,000 --> 00:35:48,480
do this yeah and the interesting thing

00:35:46,400 --> 00:35:50,720
is that you know there's like a multiple

00:35:48,480 --> 00:35:53,119
request scenario thing including the

00:35:50,720 --> 00:35:55,599
same requests that will have a different

00:35:53,119 --> 00:35:57,359
response which is the kind of real-life

00:35:55,599 --> 00:36:00,079
examples we want we want to

00:35:57,359 --> 00:36:01,040
test in our real apps so you can do this

00:36:00,079 --> 00:36:04,320
pretty easily

00:36:01,040 --> 00:36:06,640
yeah and then uh

00:36:04,320 --> 00:36:07,760
if you edit there from then on it just

00:36:06,640 --> 00:36:10,640
gets recorded

00:36:07,760 --> 00:36:12,160
wow until the end of time so if you if

00:36:10,640 --> 00:36:13,920
you would like to utilize that for your

00:36:12,160 --> 00:36:15,119
own tests and something is missing then

00:36:13,920 --> 00:36:17,920
let me know and we

00:36:15,119 --> 00:36:18,800
can add something and in the future i

00:36:17,920 --> 00:36:20,880
would love

00:36:18,800 --> 00:36:22,400
to enable others to just add their own

00:36:20,880 --> 00:36:25,280
scenarios kind of like

00:36:22,400 --> 00:36:27,119
i provide you a recorder and then you

00:36:25,280 --> 00:36:27,920
can record the scenarios that you are

00:36:27,119 --> 00:36:30,960
interested in

00:36:27,920 --> 00:36:32,960
and you create your own dummy users um

00:36:30,960 --> 00:36:35,040
and then maybe you can you know have

00:36:32,960 --> 00:36:37,119
these normalized fixtures as a result

00:36:35,040 --> 00:36:40,480
and then you could publish these results

00:36:37,119 --> 00:36:42,160
to npm or something so everyone can

00:36:40,480 --> 00:36:43,920
take advantage of it and we could have

00:36:42,160 --> 00:36:45,760
like a big repository of

00:36:43,920 --> 00:36:48,160
scenarios so you would check in like hey

00:36:45,760 --> 00:36:50,640
did someone create a scenario to

00:36:48,160 --> 00:36:52,240
dispatch an action workflow event yet

00:36:50,640 --> 00:36:54,640
and then oh yeah someone did or maybe

00:36:52,240 --> 00:36:56,640
not and then you just create it

00:36:54,640 --> 00:36:57,760
because it's a really hard problem like

00:36:56,640 --> 00:36:59,599
testing with mocks

00:36:57,760 --> 00:37:00,800
yeah so this is kind of addressing the

00:36:59,599 --> 00:37:03,119
problem that

00:37:00,800 --> 00:37:04,560
keeps mox always up to date yeah yeah we

00:37:03,119 --> 00:37:05,839
even we haven't even mentioned the fact

00:37:04,560 --> 00:37:08,160
that you're a maintainer of noc

00:37:05,839 --> 00:37:08,880
too as well which is a library i use in

00:37:08,160 --> 00:37:12,320
some of these

00:37:08,880 --> 00:37:14,240
these scenarios um but like

00:37:12,320 --> 00:37:16,079
the way i do this is like i i run a real

00:37:14,240 --> 00:37:17,760
request i copy and paste the output and

00:37:16,079 --> 00:37:19,359
i make it into my own fixture

00:37:17,760 --> 00:37:21,440
which i might i might be on the same

00:37:19,359 --> 00:37:22,160
chat um jeff mentioned that this is

00:37:21,440 --> 00:37:24,000
really cool

00:37:22,160 --> 00:37:26,000
did never i never thought of automating

00:37:24,000 --> 00:37:27,839
fixtures i knew there was a lot of cool

00:37:26,000 --> 00:37:28,960
stuff happening in these repos but did

00:37:27,839 --> 00:37:32,320
not even

00:37:28,960 --> 00:37:36,720
consider uh this approach but uh it's

00:37:32,320 --> 00:37:39,760
yeah quite interesting

00:37:36,720 --> 00:37:41,760
uh i'll jump back into the uh

00:37:39,760 --> 00:37:42,880
the example boards too as well because

00:37:41,760 --> 00:37:46,000
uh we only have like

00:37:42,880 --> 00:37:47,119
probably like 25 minutes so we can how

00:37:46,000 --> 00:37:50,079
many projects does

00:37:47,119 --> 00:37:50,079
gregor maintain

00:37:52,960 --> 00:37:56,480
i mean serious projects maybe five or

00:37:54,800 --> 00:37:58,560
six and i also want to make clear i am

00:37:56,480 --> 00:37:59,760
not the maintainer of these projects

00:37:58,560 --> 00:38:01,599
mostly i am a

00:37:59,760 --> 00:38:03,200
maintainer you know i don't want to take

00:38:01,599 --> 00:38:04,079
all the credit there are amazing people

00:38:03,200 --> 00:38:05,359
working on it

00:38:04,079 --> 00:38:06,800
i think in the description you said i'm

00:38:05,359 --> 00:38:08,560
the maintainer of snowpack i'm not the

00:38:06,800 --> 00:38:10,240
main general snowpack

00:38:08,560 --> 00:38:12,000
i'm just helping out with a few hours

00:38:10,240 --> 00:38:15,280
per week um

00:38:12,000 --> 00:38:17,359
you know that's mostly fred and drew um

00:38:15,280 --> 00:38:18,480
you know just to just to make that clear

00:38:17,359 --> 00:38:22,079
but yeah i

00:38:18,480 --> 00:38:24,160
i tend to maintain a lot of projects and

00:38:22,079 --> 00:38:26,560
and i really enjoy it um and i kind of

00:38:24,160 --> 00:38:28,960
learned to to strike a good balance

00:38:26,560 --> 00:38:30,240
and not burn out on it yeah well yeah

00:38:28,960 --> 00:38:32,079
let's go for some other different ways

00:38:30,240 --> 00:38:34,000
to uh if you get tired of this

00:38:32,079 --> 00:38:36,000
um fixture library you can move into

00:38:34,000 --> 00:38:37,839
another one

00:38:36,000 --> 00:38:39,440
so yeah what recommend what what else do

00:38:37,839 --> 00:38:42,720
you recommend let's take a look at

00:38:39,440 --> 00:38:44,720
can we talk about that um uh yeah let's

00:38:42,720 --> 00:38:46,640
check our web box

00:38:44,720 --> 00:38:49,680
and then i want to show you some magic

00:38:46,640 --> 00:38:49,680
on this webhooks one too

00:38:51,280 --> 00:38:55,040
so this is though something changed in

00:38:53,200 --> 00:38:55,440
the way web hooks are managed on github

00:38:55,040 --> 00:38:57,440
zen

00:38:55,440 --> 00:39:00,800
so this is what this is basically the my

00:38:57,440 --> 00:39:03,839
bot you know explains what it does there

00:39:00,800 --> 00:39:07,200
so you know it's basically a crawler

00:39:03,839 --> 00:39:09,680
right it crawls github's documentation

00:39:07,200 --> 00:39:12,480
which is just html and then turns it

00:39:09,680 --> 00:39:16,720
into machine renewable json so i have

00:39:12,480 --> 00:39:20,079
a description that i can parse for every

00:39:16,720 --> 00:39:20,880
github webhook event including its

00:39:20,079 --> 00:39:23,520
payload

00:39:20,880 --> 00:39:25,599
and that's something i use mostly for

00:39:23,520 --> 00:39:27,760
typescript definitions

00:39:25,599 --> 00:39:29,680
so when you use my webhooks library you

00:39:27,760 --> 00:39:31,440
get pretty nice type of heads and say

00:39:29,680 --> 00:39:33,359
okay if you listen to the issues event

00:39:31,440 --> 00:39:35,680
then the payload has these properties

00:39:33,359 --> 00:39:37,440
and you don't need to look it up at all

00:39:35,680 --> 00:39:39,119
and here you can maybe check out the

00:39:37,440 --> 00:39:41,520
second commit

00:39:39,119 --> 00:39:43,119
the work in progress webhooks update

00:39:41,520 --> 00:39:45,280
commit because the first one is just the

00:39:43,119 --> 00:39:48,240
cache update

00:39:45,280 --> 00:39:49,520
and the bot is doing these uh yeah these

00:39:48,240 --> 00:39:52,640
commits okay

00:39:49,520 --> 00:39:56,160
yeah of course yeah so you see now

00:39:52,640 --> 00:39:59,680
it looks like github published a new

00:39:56,160 --> 00:40:01,520
event called goat scanning alert yes

00:39:59,680 --> 00:40:04,000
which is probably documented since two

00:40:01,520 --> 00:40:04,000
days ago

00:40:04,640 --> 00:40:09,119
and now i just kind of can look through

00:40:07,680 --> 00:40:10,000
it make sure that the crawler works

00:40:09,119 --> 00:40:13,359
correctly but that

00:40:10,000 --> 00:40:16,720
all looks fine and now what my next step

00:40:13,359 --> 00:40:17,760
is i say oh okay feature it's this is a

00:40:16,720 --> 00:40:20,880
feature

00:40:17,760 --> 00:40:24,880
pull request so i can simply

00:40:20,880 --> 00:40:27,760
change the pull request title

00:40:24,880 --> 00:40:28,960
um to follow a certain convention like

00:40:27,760 --> 00:40:33,440
it's already done here

00:40:28,960 --> 00:40:36,079
you see yeah it has now this feat prefix

00:40:33,440 --> 00:40:36,720
and i reviewed it okay and then you can

00:40:36,079 --> 00:40:39,040
see

00:40:36,720 --> 00:40:40,720
right now the project board when you're

00:40:39,040 --> 00:40:43,040
going to go to conversation and show the

00:40:40,720 --> 00:40:45,359
statuses

00:40:43,040 --> 00:40:48,240
uh sorry say that again to the

00:40:45,359 --> 00:40:53,839
conversation tab

00:40:48,240 --> 00:40:53,839
oh there you go

00:40:54,720 --> 00:40:58,720
so you see this is my project board

00:40:57,040 --> 00:40:59,760
which says now hey you have to add one

00:40:58,720 --> 00:41:02,400
of these labels

00:40:59,760 --> 00:41:04,000
so let me do that so it's correctly

00:41:02,400 --> 00:41:07,920
categorized

00:41:04,000 --> 00:41:10,560
and there it goes yep and now i can just

00:41:07,920 --> 00:41:10,560
merge it in

00:41:10,800 --> 00:41:14,160
um and this is a very important

00:41:13,119 --> 00:41:16,480
automation now

00:41:14,160 --> 00:41:17,280
i have so many repositories i cannot

00:41:16,480 --> 00:41:20,160
manually

00:41:17,280 --> 00:41:22,000
um publish these things all the time so

00:41:20,160 --> 00:41:23,280
it's entirely automated based on a few

00:41:22,000 --> 00:41:26,319
conventions

00:41:23,280 --> 00:41:28,240
and the conventions are commit prefixes

00:41:26,319 --> 00:41:31,440
and the most important ones are

00:41:28,240 --> 00:41:34,160
feat for feature fix for bug fixes

00:41:31,440 --> 00:41:35,599
or you know the words breaking change in

00:41:34,160 --> 00:41:37,839
all capitals and

00:41:35,599 --> 00:41:38,960
commit body and as long as i follow

00:41:37,839 --> 00:41:40,800
these conventions

00:41:38,960 --> 00:41:42,079
and i just merge it into the default

00:41:40,800 --> 00:41:44,800
branch

00:41:42,079 --> 00:41:45,839
um i have a bot called semantic release

00:41:44,800 --> 00:41:47,440
which is another project i'm a

00:41:45,839 --> 00:41:50,000
maintainer of

00:41:47,440 --> 00:41:51,359
which takes care of the entire

00:41:50,000 --> 00:41:53,920
automation of

00:41:51,359 --> 00:41:55,040
of releasing this so i think by now

00:41:53,920 --> 00:41:56,960
maybe it's already done

00:41:55,040 --> 00:41:58,560
it runs pretty quickly when you scroll

00:41:56,960 --> 00:42:00,480
down i got the notification that was

00:41:58,560 --> 00:42:02,720
published to npm so

00:42:00,480 --> 00:42:03,760
any second there should be a new comment

00:42:02,720 --> 00:42:06,319
here

00:42:03,760 --> 00:42:08,319
where my semantic release bot um informs

00:42:06,319 --> 00:42:09,920
us that there is a new release

00:42:08,319 --> 00:42:12,800
you might need to reload the page i

00:42:09,920 --> 00:42:14,400
don't know yeah sometimes the uh

00:42:12,800 --> 00:42:16,240
oh it's still it's still it's still

00:42:14,400 --> 00:42:18,400
running okay

00:42:16,240 --> 00:42:19,599
and that's running as a bot or an action

00:42:18,400 --> 00:42:22,720
that does the publishing

00:42:19,599 --> 00:42:24,319
that's i i consider everything a bot you

00:42:22,720 --> 00:42:26,480
know like whatever it's running

00:42:24,319 --> 00:42:28,319
i mean i run github action i run github

00:42:26,480 --> 00:42:31,760
apps and get up actions too so it's

00:42:28,319 --> 00:42:35,040
really getting confusing

00:42:31,760 --> 00:42:37,040
um so

00:42:35,040 --> 00:42:38,720
while this is running the yeah the

00:42:37,040 --> 00:42:40,400
question is how do you avoid burnout

00:42:38,720 --> 00:42:41,599
uh does it seem like the bots are just

00:42:40,400 --> 00:42:43,520
breathing down your neck feeding you

00:42:41,599 --> 00:42:46,800
more work

00:42:43,520 --> 00:42:47,359
oh i mean the way i avoid burnout in

00:42:46,800 --> 00:42:51,599
general

00:42:47,359 --> 00:42:54,319
is i learn not to care about

00:42:51,599 --> 00:42:57,119
anything by default which sounds harsh

00:42:54,319 --> 00:42:59,359
but especially i mean for octokid

00:42:57,119 --> 00:43:00,880
i am paid for this right so but still i

00:42:59,359 --> 00:43:03,680
can only do so much

00:43:00,880 --> 00:43:05,200
and i understand that if there are 150

00:43:03,680 --> 00:43:06,640
issues and there are some angry people

00:43:05,200 --> 00:43:10,160
complaining

00:43:06,640 --> 00:43:11,280
um i don't let it turn me into something

00:43:10,160 --> 00:43:13,520
where i feel

00:43:11,280 --> 00:43:15,200
i really have to do this in the special

00:43:13,520 --> 00:43:16,720
case they are somewhat entitled but in

00:43:15,200 --> 00:43:18,240
most other projects like knock and

00:43:16,720 --> 00:43:21,040
semantic release

00:43:18,240 --> 00:43:22,960
nobody's entitled to my attention and i

00:43:21,040 --> 00:43:24,000
do care about their feedback but on my

00:43:22,960 --> 00:43:25,839
own terms

00:43:24,000 --> 00:43:27,119
yeah and that is easier said than done

00:43:25,839 --> 00:43:27,920
and it's something that you have to

00:43:27,119 --> 00:43:30,640
learn

00:43:27,920 --> 00:43:32,800
because when you create a project and

00:43:30,640 --> 00:43:34,480
people love it and people use it

00:43:32,800 --> 00:43:36,319
you will see that you created this

00:43:34,480 --> 00:43:39,119
project out of fun

00:43:36,319 --> 00:43:40,720
um you created a project because you

00:43:39,119 --> 00:43:42,160
solved your own problem but once you

00:43:40,720 --> 00:43:44,640
have thousands tens of thousands of

00:43:42,160 --> 00:43:46,720
users you will realize at some point

00:43:44,640 --> 00:43:49,200
i didn't code on this project for weeks

00:43:46,720 --> 00:43:51,280
i only respond to issues

00:43:49,200 --> 00:43:52,960
and if you don't know how to maintain

00:43:51,280 --> 00:43:54,000
this and how to distance yourself from

00:43:52,960 --> 00:43:56,640
these requests

00:43:54,000 --> 00:43:58,240
you will you will just drop it because

00:43:56,640 --> 00:44:00,160
you will realize that this is not fun

00:43:58,240 --> 00:44:03,359
anymore and then projects die

00:44:00,160 --> 00:44:05,680
yeah but you know it is possible

00:44:03,359 --> 00:44:06,560
you but you have to learn to really not

00:44:05,680 --> 00:44:08,240
to care

00:44:06,560 --> 00:44:09,760
um and that's something that i learned a

00:44:08,240 --> 00:44:12,160
new on

00:44:09,760 --> 00:44:13,680
um in my my first open source project

00:44:12,160 --> 00:44:15,680
called hoodie where do i have great

00:44:13,680 --> 00:44:18,079
co-maintainers especially young leonard

00:44:15,680 --> 00:44:21,200
from whom i learned exactly that

00:44:18,079 --> 00:44:22,000
the hard way um so yeah hey we have our

00:44:21,200 --> 00:44:24,079
comment here

00:44:22,000 --> 00:44:25,839
yes so this is my bot you see what it

00:44:24,079 --> 00:44:28,960
does is it automatically

00:44:25,839 --> 00:44:30,400
um calculates the next version

00:44:28,960 --> 00:44:32,160
based on semantic versioning it

00:44:30,400 --> 00:44:34,000
publishes to npm

00:44:32,160 --> 00:44:36,160
it creates a github release you can

00:44:34,000 --> 00:44:38,400
maybe click on the github release

00:44:36,160 --> 00:44:40,319
so it creates a tag and it creates a

00:44:38,400 --> 00:44:41,040
release and based on the commit messages

00:44:40,319 --> 00:44:43,119
it creates

00:44:41,040 --> 00:44:45,280
change logs so all this is automated and

00:44:43,119 --> 00:44:46,240
this is i could not live without this at

00:44:45,280 --> 00:44:49,280
all i probably

00:44:46,240 --> 00:44:52,160
released five to ten times per day

00:44:49,280 --> 00:44:53,839
but only because it is so easy for me i

00:44:52,160 --> 00:44:56,000
release all the time

00:44:53,839 --> 00:44:56,960
which is also great for contributors you

00:44:56,000 --> 00:44:58,560
know when we're talking about open

00:44:56,960 --> 00:45:00,000
source maintenance you want to onboard

00:44:58,560 --> 00:45:01,680
new contributors

00:45:00,000 --> 00:45:02,880
and when someone submits a pull request

00:45:01,680 --> 00:45:04,640
and you merge it and then it takes

00:45:02,880 --> 00:45:06,720
months until you actually release it

00:45:04,640 --> 00:45:08,480
that's not nice on the other side when

00:45:06,720 --> 00:45:10,880
you merge something and

00:45:08,480 --> 00:45:12,720
minutes later some kind of weird ball

00:45:10,880 --> 00:45:14,720
tells you oh hey this is out this is the

00:45:12,720 --> 00:45:16,400
version you know thank you very much

00:45:14,720 --> 00:45:18,160
and they can use it right away that's

00:45:16,400 --> 00:45:19,839
very motivating that's really nice

00:45:18,160 --> 00:45:21,359
and it's more likely for them to stick

00:45:19,839 --> 00:45:23,920
around yeah

00:45:21,359 --> 00:45:25,119
no that's great and i i'm gaining a lot

00:45:23,920 --> 00:45:28,240
of insight because i knew

00:45:25,119 --> 00:45:30,480
a lot of this existed but i haven't

00:45:28,240 --> 00:45:32,240
took the time to actually go and massage

00:45:30,480 --> 00:45:33,760
my projects and actually set up proper

00:45:32,240 --> 00:45:35,359
automation to

00:45:33,760 --> 00:45:37,839
do things like i do automate my release

00:45:35,359 --> 00:45:39,040
notes uh and i do partially use some of

00:45:37,839 --> 00:45:41,280
the semantic uh

00:45:39,040 --> 00:45:42,560
versioning stuff that automates but i

00:45:41,280 --> 00:45:45,839
haven't gone

00:45:42,560 --> 00:45:47,040
deep into that that world yet um but

00:45:45,839 --> 00:45:49,920
i've also been sitting on a

00:45:47,040 --> 00:45:50,720
a hot fix for two weeks because i just

00:45:49,920 --> 00:45:52,160
haven't had a

00:45:50,720 --> 00:45:53,920
time to even look at it and see if it

00:45:52,160 --> 00:45:55,200
works uh

00:45:53,920 --> 00:45:56,800
i kind of released this morning but it

00:45:55,200 --> 00:45:58,400
took me two weeks and i had the code

00:45:56,800 --> 00:46:01,440
that worked for two weeks and uh

00:45:58,400 --> 00:46:05,040
yeah so it's exciting

00:46:01,440 --> 00:46:06,640
so yeah i mean this is kind of one side

00:46:05,040 --> 00:46:09,280
of a coin though

00:46:06,640 --> 00:46:10,800
in terms of challenges that i face

00:46:09,280 --> 00:46:14,319
having all these different

00:46:10,800 --> 00:46:16,480
repositories because now i want my

00:46:14,319 --> 00:46:18,400
octokid library that depends on web

00:46:16,480 --> 00:46:20,720
hooks releases on these definitions to

00:46:18,400 --> 00:46:22,880
get updated automatically as well

00:46:20,720 --> 00:46:24,560
and that is something you know where i

00:46:22,880 --> 00:46:26,160
use the pen about

00:46:24,560 --> 00:46:29,119
i used to use green keeper for that

00:46:26,160 --> 00:46:31,040
which is a project that

00:46:29,119 --> 00:46:32,800
you know i helped create myself and the

00:46:31,040 --> 00:46:35,920
company neighborhoodie

00:46:32,800 --> 00:46:38,319
um was running it for a long time but

00:46:35,920 --> 00:46:39,640
it was just bought up by snick i think

00:46:38,319 --> 00:46:43,839
oh really i didn't need no it's

00:46:39,640 --> 00:46:43,839
greenkeeper.ioh yes

00:46:46,560 --> 00:46:50,800
oh man it's it's hard to you know search

00:46:49,359 --> 00:46:52,480
for green keeper because you just get a

00:46:50,800 --> 00:46:56,079
lot of people

00:46:52,480 --> 00:46:58,640
um talking about golf

00:46:56,079 --> 00:46:59,839
um yeah so green keeper green keeper was

00:46:58,640 --> 00:47:02,480
fantastic for that

00:46:59,839 --> 00:47:03,520
um but now that they got brought up i

00:47:02,480 --> 00:47:05,440
decided to

00:47:03,520 --> 00:47:06,880
dog food and the panama was actually

00:47:05,440 --> 00:47:08,319
acquired by github itself

00:47:06,880 --> 00:47:10,640
so i thought i should use dependenbard

00:47:08,319 --> 00:47:10,640
about

00:47:10,720 --> 00:47:14,480
yeah and what dependable does is you you

00:47:13,920 --> 00:47:15,839
just

00:47:14,480 --> 00:47:17,599
actually usually you would install a

00:47:15,839 --> 00:47:19,760
github app but because it's internal you

00:47:17,599 --> 00:47:20,079
just create a dependent.yaml file in

00:47:19,760 --> 00:47:23,280
your

00:47:20,079 --> 00:47:25,119
github folder and you configure it and

00:47:23,280 --> 00:47:26,720
then it sends pull requests for you

00:47:25,119 --> 00:47:30,720
whenever any

00:47:26,720 --> 00:47:30,720
uh dependency was updated

00:47:30,960 --> 00:47:39,599
now i'm struggling to find the uh

00:47:34,319 --> 00:47:41,680
tab we were just looking at here you go

00:47:39,599 --> 00:47:42,800
yeah the dependent body ammo is new and

00:47:41,680 --> 00:47:45,280
um

00:47:42,800 --> 00:47:47,119
i just started using it um i know it was

00:47:45,280 --> 00:47:53,839
released a couple

00:47:47,119 --> 00:47:53,839
yeah a couple months ago yeah

00:47:56,160 --> 00:47:59,200
yeah the problem with this is and you

00:47:57,839 --> 00:48:00,400
know i'm in contact with them and

00:47:59,200 --> 00:48:03,040
telling them that

00:48:00,400 --> 00:48:03,839
this is very very noisy it updates

00:48:03,040 --> 00:48:06,480
everything

00:48:03,839 --> 00:48:08,000
what i want as a library maintainer

00:48:06,480 --> 00:48:10,640
though is i only want

00:48:08,000 --> 00:48:11,359
updates when there is an out of range

00:48:10,640 --> 00:48:13,680
update

00:48:11,359 --> 00:48:14,640
so if you know if i have a dependency

00:48:13,680 --> 00:48:16,640
and

00:48:14,640 --> 00:48:18,480
it should cover the range of version two

00:48:16,640 --> 00:48:20,480
then i only want to receive an update

00:48:18,480 --> 00:48:22,640
when it gets to version three

00:48:20,480 --> 00:48:24,079
and something that greenkeeper did that

00:48:22,640 --> 00:48:26,640
i'm very very

00:48:24,079 --> 00:48:28,319
miss is it created it still created

00:48:26,640 --> 00:48:29,280
branches for every update in the

00:48:28,319 --> 00:48:32,079
background

00:48:29,280 --> 00:48:34,800
and so it triggered the ci but then when

00:48:32,079 --> 00:48:37,200
every test passed it just you know

00:48:34,800 --> 00:48:37,839
deleted the branch and i never even knew

00:48:37,200 --> 00:48:40,160
about it

00:48:37,839 --> 00:48:41,040
but when your ci fails then there is a

00:48:40,160 --> 00:48:43,200
possibility

00:48:41,040 --> 00:48:44,640
that this in-range update actually

00:48:43,200 --> 00:48:46,400
causes problems and then

00:48:44,640 --> 00:48:48,240
greenkeeper infront me by creating an

00:48:46,400 --> 00:48:50,160
issue and telling hey this in-range

00:48:48,240 --> 00:48:52,559
update creates problems

00:48:50,160 --> 00:48:54,319
so it was much much less noise but the

00:48:52,559 --> 00:48:57,280
same value but anyway

00:48:54,319 --> 00:48:58,240
yeah so updating releases and updating

00:48:57,280 --> 00:49:01,280
dependencies

00:48:58,240 --> 00:49:03,280
is probably the most important thing

00:49:01,280 --> 00:49:04,559
that i have to do with the setup of

00:49:03,280 --> 00:49:06,240
octokid having all these different

00:49:04,559 --> 00:49:07,680
repositories and it's working great for

00:49:06,240 --> 00:49:09,839
me

00:49:07,680 --> 00:49:11,680
yeah that's uh i mean just dependencies

00:49:09,839 --> 00:49:13,920
alone that's another the other half of

00:49:11,680 --> 00:49:14,559
my project is uh i've got like 13 prs

00:49:13,920 --> 00:49:16,240
from

00:49:14,559 --> 00:49:17,599
dependable just sitting there waiting

00:49:16,240 --> 00:49:20,640
for me to

00:49:17,599 --> 00:49:21,839
look at and um a lot of times the

00:49:20,640 --> 00:49:23,280
when you talk about out of range a lot

00:49:21,839 --> 00:49:24,960
of times i just end up deleting them

00:49:23,280 --> 00:49:27,200
because i'm just like i don't think this

00:49:24,960 --> 00:49:28,559
is going to provide any value

00:49:27,200 --> 00:49:30,880
especially if folks like you who are

00:49:28,559 --> 00:49:32,319
automating their releases

00:49:30,880 --> 00:49:33,520
i'm going to get an update from

00:49:32,319 --> 00:49:35,680
dependenbot saying and there's a new

00:49:33,520 --> 00:49:37,280
release of octokid slash whatever

00:49:35,680 --> 00:49:39,119
and then now i have i got four i

00:49:37,280 --> 00:49:41,040
probably do have like four octa kit

00:49:39,119 --> 00:49:42,400
libraries that have updates waiting for

00:49:41,040 --> 00:49:45,440
me

00:49:42,400 --> 00:49:47,280
yeah i'm sorry i'm sorry uh you know

00:49:45,440 --> 00:49:49,599
i do so many releases but really it's

00:49:47,280 --> 00:49:51,680
the pen and bot's fault not mine

00:49:49,599 --> 00:49:53,920
just keep putting that keep get blaming

00:49:51,680 --> 00:49:55,040
down the road

00:49:53,920 --> 00:49:57,359
i don't think i'm playing i think

00:49:55,040 --> 00:49:57,680
they're aware no they definitely aren't

00:49:57,359 --> 00:50:00,160
but

00:49:57,680 --> 00:50:02,640
um so they're focusing on apps where you

00:50:00,160 --> 00:50:04,559
want to have an update for everything

00:50:02,640 --> 00:50:06,160
yeah but for libraries where you have

00:50:04,559 --> 00:50:07,839
other consumers

00:50:06,160 --> 00:50:09,599
it's not really necessary you want to

00:50:07,839 --> 00:50:12,160
make sure that everything works with

00:50:09,599 --> 00:50:14,240
every update

00:50:12,160 --> 00:50:15,839
but i as a maintainer i don't need to be

00:50:14,240 --> 00:50:17,280
notified about it if everything still

00:50:15,839 --> 00:50:19,119
works

00:50:17,280 --> 00:50:20,640
let's go maybe back to the i think we

00:50:19,119 --> 00:50:21,280
have a few minutes left let's maybe do

00:50:20,640 --> 00:50:24,839
one more

00:50:21,280 --> 00:50:28,240
about automation thing that i do

00:50:24,839 --> 00:50:32,960
um let's do

00:50:28,240 --> 00:50:34,400
uh go down my specification change this

00:50:32,960 --> 00:50:35,760
one here this is a good one

00:50:34,400 --> 00:50:37,920
yeah i just wanted to point out too as

00:50:35,760 --> 00:50:39,200
well that um the card we were just

00:50:37,920 --> 00:50:42,640
looking at just got murdered

00:50:39,200 --> 00:50:45,119
got moved because she merged the pr

00:50:42,640 --> 00:50:47,680
um exactly it got it got actually moved

00:50:45,119 --> 00:50:49,200
twice it first got moved into the

00:50:47,680 --> 00:50:51,119
feature column because i applied the

00:50:49,200 --> 00:50:53,520
label and then it got moved to the down

00:50:51,119 --> 00:50:55,520
column because it got merged

00:50:53,520 --> 00:50:56,880
so this is now going back to octokid

00:50:55,520 --> 00:50:58,880
rest mostly

00:50:56,880 --> 00:51:00,319
um you see this is not optical address

00:50:58,880 --> 00:51:02,880
this is the rest api

00:51:00,319 --> 00:51:04,400
rest endpoint methods plugin yeah which

00:51:02,880 --> 00:51:05,920
all the you know where all the sources

00:51:04,400 --> 00:51:08,800
basically

00:51:05,920 --> 00:51:10,720
and this is my bot which automatically

00:51:08,800 --> 00:51:11,359
updates the code now like literally the

00:51:10,720 --> 00:51:13,280
code

00:51:11,359 --> 00:51:15,200
um like all these methods that you see

00:51:13,280 --> 00:51:17,359
that i said it's very hard to maintain

00:51:15,200 --> 00:51:20,000
manually

00:51:17,359 --> 00:51:22,000
and it used to be that i crawled the

00:51:20,000 --> 00:51:24,880
entire documentation and created my

00:51:22,000 --> 00:51:26,240
own json api for this but now there is

00:51:24,880 --> 00:51:29,119
an official

00:51:26,240 --> 00:51:30,160
github of maybe i specification that i

00:51:29,119 --> 00:51:31,910
use here

00:51:30,160 --> 00:51:33,440
and when you go to files

00:51:31,910 --> 00:51:36,559
[Music]

00:51:33,440 --> 00:51:38,960
files changed you see

00:51:36,559 --> 00:51:40,319
like all the different uh all the

00:51:38,960 --> 00:51:41,599
updates that are happening here this is

00:51:40,319 --> 00:51:43,599
just documentation

00:51:41,599 --> 00:51:45,040
so they are maybe not you know not so

00:51:43,599 --> 00:51:48,160
interesting

00:51:45,040 --> 00:51:49,680
um and

00:51:48,160 --> 00:51:51,760
and this is actually being populated

00:51:49,680 --> 00:51:54,720
from the actual website

00:51:51,760 --> 00:51:56,720
he imported i it used to be from the

00:51:54,720 --> 00:51:59,040
website now it's from the open api spec

00:51:56,720 --> 00:52:01,280
of which the website is also generated

00:51:59,040 --> 00:52:02,880
so that swapped yeah

00:52:01,280 --> 00:52:04,640
so you know you see like the whole code

00:52:02,880 --> 00:52:06,640
scanning there was a new webhook event

00:52:04,640 --> 00:52:09,680
and now there's also rest api so that

00:52:06,640 --> 00:52:10,319
all makes makes a lot of sense right um

00:52:09,680 --> 00:52:14,000
i think

00:52:10,319 --> 00:52:14,640
maybe use the filter um drop down and

00:52:14,000 --> 00:52:16,960
let's just

00:52:14,640 --> 00:52:18,480
look on the ts files and and hide the

00:52:16,960 --> 00:52:20,960
others

00:52:18,480 --> 00:52:22,559
yep also shout out if people did not

00:52:20,960 --> 00:52:24,079
know this existed you can filter your

00:52:22,559 --> 00:52:26,079
files

00:52:24,079 --> 00:52:28,000
and here you see what happens this is

00:52:26,079 --> 00:52:29,760
basically the method when you use

00:52:28,000 --> 00:52:32,319
when you know octocate you have like

00:52:29,760 --> 00:52:35,040
this octokid.repost.get

00:52:32,319 --> 00:52:37,440
and this is where the magic happens this

00:52:35,040 --> 00:52:38,160
is a very compressed way to define this

00:52:37,440 --> 00:52:40,319
right

00:52:38,160 --> 00:52:42,240
so basically you now have a method

00:52:40,319 --> 00:52:45,599
called code scanning

00:52:42,240 --> 00:52:48,880
that list recent analysis

00:52:45,599 --> 00:52:50,480
and it re it returns this endpoint

00:52:48,880 --> 00:52:52,750
options which is the method get

00:52:50,480 --> 00:52:54,720
and then the path

00:52:52,750 --> 00:52:57,359
[Music]

00:52:54,720 --> 00:52:59,280
and it requires um you know the owner

00:52:57,359 --> 00:53:01,440
and the repo parameters

00:52:59,280 --> 00:53:02,400
so basically this is how it all comes

00:53:01,440 --> 00:53:05,760
together

00:53:02,400 --> 00:53:05,760
and what's interesting above

00:53:06,160 --> 00:53:10,720
that the code scanning get alert method

00:53:09,040 --> 00:53:13,040
actually got changed

00:53:10,720 --> 00:53:14,160
right the alert id was renamed to alert

00:53:13,040 --> 00:53:15,920
number

00:53:14,160 --> 00:53:18,480
which is not a breaking change to the

00:53:15,920 --> 00:53:19,920
github api but for the sdks this is a

00:53:18,480 --> 00:53:21,359
breaking change so it's something we

00:53:19,920 --> 00:53:23,839
have to take care of

00:53:21,359 --> 00:53:24,400
so we added an extension to github's

00:53:23,839 --> 00:53:27,040
open

00:53:24,400 --> 00:53:28,079
specification to maintain these kind of

00:53:27,040 --> 00:53:30,640
changes

00:53:28,079 --> 00:53:31,280
so for me what i do now i keep track of

00:53:30,640 --> 00:53:33,359
this here

00:53:31,280 --> 00:53:35,280
and when you use the old alert id

00:53:33,359 --> 00:53:37,119
parameter you now get a deprecation

00:53:35,280 --> 00:53:38,559
message telling you

00:53:37,119 --> 00:53:41,359
hey you have to change it to alert

00:53:38,559 --> 00:53:43,440
number and then when i

00:53:41,359 --> 00:53:44,480
upgrade when i do a braking release like

00:53:43,440 --> 00:53:47,280
version 19

00:53:44,480 --> 00:53:48,160
i can just drop all these deprecations

00:53:47,280 --> 00:53:51,839
yeah

00:53:48,160 --> 00:53:53,839
okay well so the deprecations though

00:53:51,839 --> 00:53:55,359
are they also automated the the drop

00:53:53,839 --> 00:53:57,520
everything is automatically yeah

00:53:55,359 --> 00:53:59,040
no the drop yes so basically what i do

00:53:57,520 --> 00:54:02,960
is i

00:53:59,040 --> 00:54:05,359
um i pass um a date string and say

00:54:02,960 --> 00:54:06,720
ignore all changes before october 1st

00:54:05,359 --> 00:54:07,520
let's say i do the release on october

00:54:06,720 --> 00:54:09,760
1st

00:54:07,520 --> 00:54:11,480
then i just drop all changes before and

00:54:09,760 --> 00:54:14,800
then you know the line

00:54:11,480 --> 00:54:16,800
267 will just disappear

00:54:14,800 --> 00:54:18,720
what i try to do with breaking changes

00:54:16,800 --> 00:54:21,200
is to only

00:54:18,720 --> 00:54:22,960
remove previously deprecated things just

00:54:21,200 --> 00:54:25,760
to help people migrate i don't want to

00:54:22,960 --> 00:54:27,839
use breaking changes to add new features

00:54:25,760 --> 00:54:29,920
or anything else

00:54:27,839 --> 00:54:32,559
i think breaking changes in an ideal

00:54:29,920 --> 00:54:35,760
world should be

00:54:32,559 --> 00:54:37,280
only to remove apis or apply changes

00:54:35,760 --> 00:54:39,119
that you have previously announced with

00:54:37,280 --> 00:54:40,799
deprecations and that way

00:54:39,119 --> 00:54:43,839
people can migrate very easily i can

00:54:40,799 --> 00:54:47,200
tell them use the last version

00:54:43,839 --> 00:54:49,440
of 18 and run your tests see

00:54:47,200 --> 00:54:52,079
the deprecation messages address them

00:54:49,440 --> 00:54:53,680
and then upgrading super easy yeah

00:54:52,079 --> 00:54:55,920
and all this automation helps me with

00:54:53,680 --> 00:54:55,920
that

00:54:56,160 --> 00:55:00,400
so yeah and then you know there are some

00:54:58,079 --> 00:55:04,240
other optical libraries that get updated

00:55:00,400 --> 00:55:07,359
by um by the way api specifications too

00:55:04,240 --> 00:55:10,160
like the pagination one um

00:55:07,359 --> 00:55:11,119
it just looks for normalizing responses

00:55:10,160 --> 00:55:15,359
and then there is

00:55:11,119 --> 00:55:19,200
throttling is interesting um

00:55:15,359 --> 00:55:20,960
like there's plug-in throttling you know

00:55:19,200 --> 00:55:22,480
which also gets updated by the open api

00:55:20,960 --> 00:55:24,559
spec because

00:55:22,480 --> 00:55:26,559
throttling rules are different depending

00:55:24,559 --> 00:55:28,480
on the request if a request creates a

00:55:26,559 --> 00:55:29,440
notification you have to throttle more

00:55:28,480 --> 00:55:32,400
otherwise you get

00:55:29,440 --> 00:55:33,359
abuse limits okay okay so when you

00:55:32,400 --> 00:55:34,720
create a new issue

00:55:33,359 --> 00:55:36,079
you should only create a new issue every

00:55:34,720 --> 00:55:37,760
three seconds and when you use the

00:55:36,079 --> 00:55:40,480
throttle plug-in

00:55:37,760 --> 00:55:42,000
it just does that for you magically but

00:55:40,480 --> 00:55:44,480
again you have to maintain

00:55:42,000 --> 00:55:46,000
all these endpoints right and i don't

00:55:44,480 --> 00:55:48,400
maintain it manually my bot

00:55:46,000 --> 00:55:50,400
is doing that for me using another open

00:55:48,400 --> 00:55:53,599
api specification extension

00:55:50,400 --> 00:55:55,440
that we use with github yeah

00:55:53,599 --> 00:55:57,119
there's graphql you know i just have

00:55:55,440 --> 00:55:58,960
like a repository that just updates the

00:55:57,119 --> 00:56:00,480
graphql schema for me that people can

00:55:58,960 --> 00:56:02,480
just install

00:56:00,480 --> 00:56:04,559
so they can use it in their own plugins

00:56:02,480 --> 00:56:06,160
and you know implement like graphql type

00:56:04,559 --> 00:56:08,319
aheads and stuff like that that's really

00:56:06,160 --> 00:56:12,960
cool

00:56:08,319 --> 00:56:16,559
um and there are like a lot of other

00:56:12,960 --> 00:56:17,040
automations that i use like maybe like

00:56:16,559 --> 00:56:19,760
one

00:56:17,040 --> 00:56:20,799
one uh i would love to to mention if you

00:56:19,760 --> 00:56:22,960
have the time it's

00:56:20,799 --> 00:56:25,359
as twitter together which i think you

00:56:22,960 --> 00:56:26,880
use as well just to kind of change the

00:56:25,359 --> 00:56:28,640
topic entirely because all these

00:56:26,880 --> 00:56:32,079
automations might look fun but i think

00:56:28,640 --> 00:56:33,520
they're not very applicable to others

00:56:32,079 --> 00:56:35,680
but twitter together is basically a

00:56:33,520 --> 00:56:37,440
github action which lets you collaborate

00:56:35,680 --> 00:56:39,359
with your open source maintainers on a

00:56:37,440 --> 00:56:41,520
twitter account and you basically can

00:56:39,359 --> 00:56:43,920
tweet

00:56:41,520 --> 00:56:45,440
you can tweet by by merging pull

00:56:43,920 --> 00:56:47,839
requests and you get all the ci

00:56:45,440 --> 00:56:49,440
integrations with requiring reviews and

00:56:47,839 --> 00:56:53,280
so on

00:56:49,440 --> 00:56:54,960
um and and that's something that

00:56:53,280 --> 00:56:56,799
i'm very passionate about i would love

00:56:54,960 --> 00:56:58,240
to create more tooling to make open

00:56:56,799 --> 00:57:00,240
source project

00:56:58,240 --> 00:57:01,839
more approachable for contributors other

00:57:00,240 --> 00:57:05,200
than code contributors

00:57:01,839 --> 00:57:06,960
yeah especially editorial contributors

00:57:05,200 --> 00:57:07,280
and i would love to create more bots and

00:57:06,960 --> 00:57:09,760
more

00:57:07,280 --> 00:57:10,400
more tooling for that yeah i love this

00:57:09,760 --> 00:57:12,640
action

00:57:10,400 --> 00:57:13,920
and i actually leveraged this myself uh

00:57:12,640 --> 00:57:15,359
for my project

00:57:13,920 --> 00:57:17,040
for things like the uh and i haven't

00:57:15,359 --> 00:57:20,480
actually fixed it yet um

00:57:17,040 --> 00:57:22,319
but i have a whenever a release gets cut

00:57:20,480 --> 00:57:23,920
i'm setting up automation to actually

00:57:22,319 --> 00:57:26,960
set up a tweet

00:57:23,920 --> 00:57:28,319
in my my tweets project and then when

00:57:26,960 --> 00:57:29,680
that that tweet gets set up

00:57:28,319 --> 00:57:31,359
i can just look at it and then hit the

00:57:29,680 --> 00:57:33,520
merge button so

00:57:31,359 --> 00:57:35,119
you you've inspired me because hopefully

00:57:33,520 --> 00:57:37,040
i can just look at it and add a label

00:57:35,119 --> 00:57:38,640
and then the tweet goes out at a certain

00:57:37,040 --> 00:57:40,880
time to notify everybody hey

00:57:38,640 --> 00:57:42,559
new release is cut the one thing i'm

00:57:40,880 --> 00:57:46,240
actually interested in intrigued by

00:57:42,559 --> 00:57:47,280
now github has these uh in your profile

00:57:46,240 --> 00:57:48,799
you can actually add your twitter

00:57:47,280 --> 00:57:52,079
account directly

00:57:48,799 --> 00:57:53,680
oh yeah to your profile at the moment i

00:57:52,079 --> 00:57:55,119
don't think it actually is exposed in

00:57:53,680 --> 00:57:57,280
the api yet

00:57:55,119 --> 00:57:58,960
um but my thought is to be able to

00:57:57,280 --> 00:58:00,480
actually look at whoever because twitter

00:57:58,960 --> 00:58:01,920
handles are sometimes different between

00:58:00,480 --> 00:58:03,200
like obviously your twitch channel

00:58:01,920 --> 00:58:04,480
your twitch handle is different than

00:58:03,200 --> 00:58:05,119
your twitter handle or your github

00:58:04,480 --> 00:58:07,200
handle

00:58:05,119 --> 00:58:08,319
yeah so being able to under like

00:58:07,200 --> 00:58:11,359
cross-reference

00:58:08,319 --> 00:58:12,720
twitter mentions to github handles uh is

00:58:11,359 --> 00:58:15,280
something i'm i'm working on

00:58:12,720 --> 00:58:16,640
to be able to celebrate oh my god that

00:58:15,280 --> 00:58:19,599
would be cool yeah

00:58:16,640 --> 00:58:20,480
yeah like one one may one advice on that

00:58:19,599 --> 00:58:21,920
is

00:58:20,480 --> 00:58:24,240
yeah you can automate all this and

00:58:21,920 --> 00:58:27,200
automation is fun but i would be careful

00:58:24,240 --> 00:58:31,040
with automation with automating

00:58:27,200 --> 00:58:34,160
um recognition and when it comes to

00:58:31,040 --> 00:58:36,160
like all these contributors um i mean

00:58:34,160 --> 00:58:37,680
like it's kind of dull to have a robot

00:58:36,160 --> 00:58:40,079
tell you oh yeah thank you for your

00:58:37,680 --> 00:58:43,119
first contribution you know it's

00:58:40,079 --> 00:58:45,280
i mean it's nice but it's not as

00:58:43,119 --> 00:58:46,799
it doesn't work as well compared to when

00:58:45,280 --> 00:58:47,359
you do it as a maintainer and you

00:58:46,799 --> 00:58:49,359
clearly

00:58:47,359 --> 00:58:50,960
spend at least a minute think about it

00:58:49,359 --> 00:58:52,160
look up this person and write something

00:58:50,960 --> 00:58:55,520
custom

00:58:52,160 --> 00:58:57,280
yeah yeah so i do i do like half

00:58:55,520 --> 00:59:00,319
automate this you know i use the

00:58:57,280 --> 00:59:02,559
the hard emoji reaction actually all

00:59:00,319 --> 00:59:04,400
over optical repositories to bookmark

00:59:02,559 --> 00:59:05,200
things that i think are worthy of shout

00:59:04,400 --> 00:59:07,119
out

00:59:05,200 --> 00:59:08,960
and then i have a tool when i do an a

00:59:07,119 --> 00:59:11,839
project update

00:59:08,960 --> 00:59:13,119
that finds all these bookmarked contents

00:59:11,839 --> 00:59:14,799
you know it just gives them to me and

00:59:13,119 --> 00:59:16,480
then i take the time look into it and

00:59:14,799 --> 00:59:18,480
then i actually

00:59:16,480 --> 00:59:20,319
give shout outs to these people um and i

00:59:18,480 --> 00:59:22,079
spend some time on it just to make it

00:59:20,319 --> 00:59:23,760
worth more and i don't give everyone a

00:59:22,079 --> 00:59:25,599
shout out yeah um

00:59:23,760 --> 00:59:26,960
and i give some people who did multiple

00:59:25,599 --> 00:59:30,240
contributions you know

00:59:26,960 --> 00:59:32,400
like more of a shout out for example

00:59:30,240 --> 00:59:33,839
no i love that that's a that's a good

00:59:32,400 --> 00:59:35,119
point too as well and i love the fact

00:59:33,839 --> 00:59:38,319
that you leverage

00:59:35,119 --> 00:59:39,599
an emoji to to bookmark something that

00:59:38,319 --> 00:59:41,760
needs to be uh

00:59:39,599 --> 00:59:43,440
to me needs to be shout out or shouted

00:59:41,760 --> 00:59:45,359
out um

00:59:43,440 --> 00:59:47,040
yeah i love that idea and i love that uh

00:59:45,359 --> 00:59:49,040
this approach into automation the

00:59:47,040 --> 00:59:50,880
project i know we're like right at time

00:59:49,040 --> 00:59:53,119
uh any like last words any things you

00:59:50,880 --> 00:59:55,200
want to mention uh i encourage people

00:59:53,119 --> 00:59:56,799
let me drop this in the chat too as well

00:59:55,200 --> 00:59:59,119
uh check out twitter together because

00:59:56,799 --> 01:00:00,640
that is a

00:59:59,119 --> 01:00:02,400
that conversation went pretty heavily

01:00:00,640 --> 01:00:03,920
after kit and i imagine because i knew

01:00:02,400 --> 01:00:05,680
there was gonna be a lot of repos

01:00:03,920 --> 01:00:08,799
um but this is definitely worth checking

01:00:05,680 --> 01:00:12,000
out as another option

01:00:08,799 --> 01:00:12,000
so any last words gregor

01:00:12,240 --> 01:00:15,520
well thank you so much uh for having me

01:00:14,799 --> 01:00:18,480
on

01:00:15,520 --> 01:00:19,520
i'm a big fan of your work i hope i will

01:00:18,480 --> 01:00:21,760
learn how to

01:00:19,520 --> 01:00:23,599
you know run these these uh this twitch

01:00:21,760 --> 01:00:25,119
sessions because i think it's a very

01:00:23,599 --> 01:00:28,160
powerful tool

01:00:25,119 --> 01:00:29,839
um to share um your inside knowledge of

01:00:28,160 --> 01:00:31,520
the open source projects you maintain

01:00:29,839 --> 01:00:33,599
and contribute to

01:00:31,520 --> 01:00:35,440
um and scaling open source maintenance

01:00:33,599 --> 01:00:37,040
is a big problem that we are having and

01:00:35,440 --> 01:00:37,839
i want to leverage that a little bit

01:00:37,040 --> 01:00:39,760
more in future

01:00:37,839 --> 01:00:42,400
so thanks for that and you know all the

01:00:39,760 --> 01:00:43,599
respect for keeping it up and and making

01:00:42,400 --> 01:00:45,200
it so much fun

01:00:43,599 --> 01:00:47,119
yeah yeah i'm having a lot of fun

01:00:45,200 --> 01:00:48,720
because i learned this is kind of like

01:00:47,119 --> 01:00:50,319
self-serving for me because i learned so

01:00:48,720 --> 01:00:53,440
much about open source

01:00:50,319 --> 01:00:55,200
and like the the back room conversations

01:00:53,440 --> 01:00:56,319
uh so part of the reason why i do open

01:00:55,200 --> 01:00:57,040
source friday part of the reason we're

01:00:56,319 --> 01:00:59,040
having this

01:00:57,040 --> 01:01:00,319
running every week for the rest of the

01:00:59,040 --> 01:01:01,359
month and through october and

01:01:00,319 --> 01:01:04,160
hacktoberfest

01:01:01,359 --> 01:01:05,359
we will have a stream every friday so

01:01:04,160 --> 01:01:06,960
next week we'll have tanner talking

01:01:05,359 --> 01:01:08,079
about react query and how asynchronous

01:01:06,960 --> 01:01:10,400
data fetching

01:01:08,079 --> 01:01:11,359
and handling updates and caching uh

01:01:10,400 --> 01:01:13,359
through react

01:01:11,359 --> 01:01:14,880
so i'm excited about that it will be at

01:01:13,359 --> 01:01:17,520
an apac time so

01:01:14,880 --> 01:01:18,960
it'll be 12 hours from now will be when

01:01:17,520 --> 01:01:19,839
the stream is where we want to basically

01:01:18,960 --> 01:01:22,480
encompass

01:01:19,839 --> 01:01:23,920
not just the west coast us or just us in

01:01:22,480 --> 01:01:25,680
general but also encompass other people

01:01:23,920 --> 01:01:27,680
who want to join so

01:01:25,680 --> 01:01:28,799
rsvp if you are available the following

01:01:27,680 --> 01:01:30,480
week we're going to talk to

01:01:28,799 --> 01:01:32,960
brandon about blitzjs which is another

01:01:30,480 --> 01:01:35,440
react library uh but a full stack

01:01:32,960 --> 01:01:36,640
react library so uh check out the meetup

01:01:35,440 --> 01:01:38,400
page where this is the meetup page is

01:01:36,640 --> 01:01:40,160
brand new uh and we're

01:01:38,400 --> 01:01:41,760
gonna start putting the the future

01:01:40,160 --> 01:01:44,079
streams out there since we've

01:01:41,760 --> 01:01:45,359
done a great job i say we the only two

01:01:44,079 --> 01:01:48,240
of us that are doing this

01:01:45,359 --> 01:01:49,359
um we've done such a great job of uh

01:01:48,240 --> 01:01:50,799
scheduling

01:01:49,359 --> 01:01:52,559
some of these maintainers and having

01:01:50,799 --> 01:01:55,680
actual schedules so

01:01:52,559 --> 01:01:58,799
hit the follow button on twitch and um

01:01:55,680 --> 01:02:00,960
follow me on twitch uh follow me it's bw

01:01:58,799 --> 01:02:02,880
and i'll type that out real quick i

01:02:00,960 --> 01:02:07,039
think i typed it out earlier

01:02:02,880 --> 01:02:09,359
i'm in the wrong twitch there it is

01:02:07,039 --> 01:02:10,720
on twitch uh hit me up i do a stream

01:02:09,359 --> 01:02:13,280
i'll be doing a stream later today

01:02:10,720 --> 01:02:14,960
on github actions and i'm actually gonna

01:02:13,280 --> 01:02:15,520
be using this web hook library too as

01:02:14,960 --> 01:02:18,720
well

01:02:15,520 --> 01:02:20,240
um to power a twitch chat powered by

01:02:18,720 --> 01:02:22,640
octokit webhooks

01:02:20,240 --> 01:02:24,160
to tell me on screen when someone has

01:02:22,640 --> 01:02:26,000
started a repo so it's

01:02:24,160 --> 01:02:27,440
little effort i've already implemented

01:02:26,000 --> 01:02:30,160
it twice but

01:02:27,440 --> 01:02:30,640
i did not save the code that i it's on

01:02:30,160 --> 01:02:31,839
another

01:02:30,640 --> 01:02:34,079
computer and i think i deleted the

01:02:31,839 --> 01:02:35,039
branch so i'm going to do it again on

01:02:34,079 --> 01:02:37,119
stream

01:02:35,039 --> 01:02:38,319
you know i'm your man if you have any

01:02:37,119 --> 01:02:40,000
questions uh

01:02:38,319 --> 01:02:41,440
you know how to implement github

01:02:40,000 --> 01:02:43,920
automation stuff uh

01:02:41,440 --> 01:02:45,520
i am very happy to help you on excellent

01:02:43,920 --> 01:02:46,480
well i'll be in touch you might get a

01:02:45,520 --> 01:02:48,880
mention on a

01:02:46,480 --> 01:02:50,559
on an issue or a pr uh but i appreciate

01:02:48,880 --> 01:02:52,079
the offer and uh friends

01:02:50,559 --> 01:02:54,160
uh thanks for sitting and chatting with

01:02:52,079 --> 01:02:56,559
us and having conversation

01:02:54,160 --> 01:02:57,200
and uh we'll see you in the next one on

01:02:56,559 --> 01:03:03,839
the

01:02:57,200 --> 01:03:03,839

YouTube URL: https://www.youtube.com/watch?v=HLhN2MxgWEM


