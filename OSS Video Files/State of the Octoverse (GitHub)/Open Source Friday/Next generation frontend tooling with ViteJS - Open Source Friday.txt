Title: Next generation frontend tooling with ViteJS - Open Source Friday
Publication date: 2021-02-12
Playlist: Open Source Friday
Description: 
	Watch Evan You (creator of Vue) and share about a new breed of frontend build tool that significantly improves the frontend development experience. It consists of two major parts:

A dev server that serves your source files over native ES modules, with rich built-in features and astonishingly fast Hot Module Replacement (HMR).

A build command that bundles your code with Rollup, pre-configured to output highly optimized static assets for production.

In addition, Vite is highly extensible via its Plugin API and JavaScript API with full typing support.

0:00 - Start
1:21 - What is Vite?
4:54 - Why is Vite needed at this time?
6:38 - Vite getting started (demo)
13:25 - Index.html as the entry point and the module graph
23:47 - Vite compared to the vue-cli
23:28 - Is Vite extendable to other frameworks?
27:01 - Tailwind CSS + Vite setup
35:44 - Vite + React (JSX) setup
41:26 - ESBuild + vite --force explanation
47:44 - DX experience
52:16 - Server Side Rendering with Vite
1:09:55 - chat.vitejs.dev

Join bdougie and friends live for Open Source Fridays at https://www.meetup.com/GitHub-Virtual-Meetup/

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:01,839 --> 00:00:06,960
all right everybody welcome

00:00:03,360 --> 00:00:08,080
you have made it um this is this is uh

00:00:06,960 --> 00:00:10,240
open source friday

00:00:08,080 --> 00:00:11,599
uh it's a fridays where we talk to open

00:00:10,240 --> 00:00:12,639
source maintainers about the projects

00:00:11,599 --> 00:00:14,240
they work on

00:00:12,639 --> 00:00:17,039
sometimes we actually contribute

00:00:14,240 --> 00:00:19,359
projects sometimes we build projects and

00:00:17,039 --> 00:00:20,240
i'm super stoked to have evan you here

00:00:19,359 --> 00:00:23,760
evan

00:00:20,240 --> 00:00:25,760
hello welcome uh just about beyond his

00:00:23,760 --> 00:00:26,960
your your head you've got the view logo

00:00:25,760 --> 00:00:28,560
and uh yeah

00:00:26,960 --> 00:00:30,240
creator view maintainer one of the

00:00:28,560 --> 00:00:31,679
maintainers of you as well

00:00:30,240 --> 00:00:32,960
and uh why don't you go ahead and

00:00:31,679 --> 00:00:34,239
introduce yourself and tell us why

00:00:32,960 --> 00:00:37,520
you're here today

00:00:34,239 --> 00:00:40,719
sure my name is evan yu and uh i'm

00:00:37,520 --> 00:00:43,920
i i wrote pjs i'm the

00:00:40,719 --> 00:00:44,719
lead team lead of ujs but uh in the past

00:00:43,920 --> 00:00:47,520
few months i've

00:00:44,719 --> 00:00:48,320
also been working on a project called

00:00:47,520 --> 00:00:50,399
feet

00:00:48,320 --> 00:00:51,680
which is what i'm going to be talking

00:00:50,399 --> 00:00:56,079
about today so

00:00:51,680 --> 00:00:58,320
um yeah uh veet was initially created

00:00:56,079 --> 00:01:00,000
somewhat related to vue but uh now it

00:00:58,320 --> 00:01:03,680
kind of evolved into its own

00:01:00,000 --> 00:01:07,040
thing uh and uh i'm kind of

00:01:03,680 --> 00:01:09,119
hoping that it can uh benefit developers

00:01:07,040 --> 00:01:11,119
especially front-end developers not just

00:01:09,119 --> 00:01:14,320
few users like all front dev

00:01:11,119 --> 00:01:16,799
developers excellent

00:01:14,320 --> 00:01:18,320
yeah and uh it's funny because i've

00:01:16,799 --> 00:01:20,159
definitely i know we chatted

00:01:18,320 --> 00:01:21,840
what was it last week um for a

00:01:20,159 --> 00:01:24,240
completely different project

00:01:21,840 --> 00:01:26,479
but i'd never heard veet said out loud

00:01:24,240 --> 00:01:29,600
yeah and i always called invite

00:01:26,479 --> 00:01:33,040
yeah recently a lot of people uh

00:01:29,600 --> 00:01:34,960
discovered that i i don't know like

00:01:33,040 --> 00:01:36,240
i picked uh i picked the name it's

00:01:34,960 --> 00:01:40,400
actually a french word

00:01:36,240 --> 00:01:43,920
uh in french it means fast or quickly so

00:01:40,400 --> 00:01:45,840
um i thought it's cool too to stick to

00:01:43,920 --> 00:01:46,720
its original pronunciation but we are

00:01:45,840 --> 00:01:49,680
now kind of in

00:01:46,720 --> 00:01:50,159
uh in a dilemma because uh some people

00:01:49,680 --> 00:01:52,720
are like

00:01:50,159 --> 00:01:54,799
if vt is pronounced in the french way

00:01:52,720 --> 00:01:56,560
then why isn't view pronounced in the

00:01:54,799 --> 00:01:58,399
french way

00:01:56,560 --> 00:01:59,840
because view is actually a french word

00:01:58,399 --> 00:02:03,040
as well so

00:01:59,840 --> 00:02:06,399
um to that my only explanation is

00:02:03,040 --> 00:02:09,520
uh just stick to whatever

00:02:06,399 --> 00:02:11,599
the the author prefers i guess

00:02:09,520 --> 00:02:13,120
yeah and uh sorry i was just messing

00:02:11,599 --> 00:02:14,720
with the screens because i did see that

00:02:13,120 --> 00:02:17,520
somewhere oh here we go

00:02:14,720 --> 00:02:17,840
yeah french word for fast so all the all

00:02:17,520 --> 00:02:19,760
the

00:02:17,840 --> 00:02:21,440
the tips on how to speak french is right

00:02:19,760 --> 00:02:24,480
here in the readme as well so

00:02:21,440 --> 00:02:24,480
appreciate y'all doing that

00:02:24,800 --> 00:02:28,640
excellent so i i guess what's the the

00:02:27,120 --> 00:02:31,040
over the high level of what

00:02:28,640 --> 00:02:32,160
what veed is um like fast is one of the

00:02:31,040 --> 00:02:33,440
key words but like how would you

00:02:32,160 --> 00:02:35,280
describe it

00:02:33,440 --> 00:02:36,800
yeah it's actually a little hard which

00:02:35,280 --> 00:02:39,840
is uh why every time

00:02:36,800 --> 00:02:40,959
people ask me to explain what it is like

00:02:39,840 --> 00:02:44,400
there's no really

00:02:40,959 --> 00:02:47,760
concise one sentence description of it

00:02:44,400 --> 00:02:49,920
uh but if you want to make a comparison

00:02:47,760 --> 00:02:51,040
like if you've been using i think the

00:02:49,920 --> 00:02:54,319
closest thing in

00:02:51,040 --> 00:02:56,319
existence is parcel like the in terms of

00:02:54,319 --> 00:02:57,519
what it does and what it kind of affords

00:02:56,319 --> 00:03:00,720
you but

00:02:57,519 --> 00:03:03,920
um uh paso bundler

00:03:00,720 --> 00:03:04,480
um google's not helping me today yeah

00:03:03,920 --> 00:03:06,879
but

00:03:04,480 --> 00:03:08,239
uh obviously like the differences in how

00:03:06,879 --> 00:03:11,920
it's implemented

00:03:08,239 --> 00:03:13,840
and uh uh in terms of how the dev server

00:03:11,920 --> 00:03:16,000
works it's fundamentally different

00:03:13,840 --> 00:03:18,480
um but in terms of what it does you can

00:03:16,000 --> 00:03:22,560
think of it as something that

00:03:18,480 --> 00:03:24,640
takes some of your code and serve it

00:03:22,560 --> 00:03:26,480
yeah i think it's really interesting

00:03:24,640 --> 00:03:29,040
because it's a dev server

00:03:26,480 --> 00:03:30,080
and a pre-configured bundler all in the

00:03:29,040 --> 00:03:33,040
same thing

00:03:30,080 --> 00:03:33,440
so like we can call it a front-end build

00:03:33,040 --> 00:03:35,599
tool

00:03:33,440 --> 00:03:36,879
but that's so generic people just kind

00:03:35,599 --> 00:03:39,200
of it doesn't

00:03:36,879 --> 00:03:41,599
really explain anything in itself so i'm

00:03:39,200 --> 00:03:43,360
i'm kind of struggling to come up with a

00:03:41,599 --> 00:03:44,799
you know really concise way to describe

00:03:43,360 --> 00:03:46,400
what it is which is why

00:03:44,799 --> 00:03:47,840
like i kind of want to do this live

00:03:46,400 --> 00:03:50,239
stream because

00:03:47,840 --> 00:03:51,519
i think it's actually easier to just

00:03:50,239 --> 00:03:54,080
show people

00:03:51,519 --> 00:03:56,159
like what it does and how it works so

00:03:54,080 --> 00:03:56,480
you get a very direct understanding of

00:03:56,159 --> 00:03:58,400
oh

00:03:56,480 --> 00:04:00,879
this is what it does like this is what

00:03:58,400 --> 00:04:03,200
beat is yeah and um

00:04:00,879 --> 00:04:04,159
i think we're actually so i do a lot of

00:04:03,200 --> 00:04:05,680
front end myself

00:04:04,159 --> 00:04:07,360
uh i come from like a react background

00:04:05,680 --> 00:04:10,239
i've kind of some view projects too

00:04:07,360 --> 00:04:11,280
uh on github as well and i feel like

00:04:10,239 --> 00:04:12,799
we're going through our evolution that

00:04:11,280 --> 00:04:14,640
we're sort of seeing i think we saw this

00:04:12,799 --> 00:04:16,000
five years ago probably longer than that

00:04:14,640 --> 00:04:18,320
with uh like webpack

00:04:16,000 --> 00:04:19,440
and how folks have sort of adopted that

00:04:18,320 --> 00:04:21,519
type of bundler

00:04:19,440 --> 00:04:23,199
uh and i'm not trying to keep bundlers

00:04:21,519 --> 00:04:24,080
you know as a one-to-one comparison

00:04:23,199 --> 00:04:26,560
because i know you're

00:04:24,080 --> 00:04:27,120
having trouble describing what this is

00:04:26,560 --> 00:04:28,479
um

00:04:27,120 --> 00:04:30,160
but i think we are looking through an

00:04:28,479 --> 00:04:31,680
evolution i think we're now seeing

00:04:30,160 --> 00:04:33,040
even some of the hosting providers who

00:04:31,680 --> 00:04:34,639
are now adding all these bells and

00:04:33,040 --> 00:04:36,800
whistles and new features

00:04:34,639 --> 00:04:38,160
um like there's we're ready for our next

00:04:36,800 --> 00:04:40,160
the next wave and

00:04:38,160 --> 00:04:41,600
that's why the the stream is called next

00:04:40,160 --> 00:04:43,360
the next frontier

00:04:41,600 --> 00:04:44,639
or actually what is the stream called i

00:04:43,360 --> 00:04:45,440
accept the title and i don't even know

00:04:44,639 --> 00:04:47,840
what it's called

00:04:45,440 --> 00:04:50,000
but um the next front end tool tooling

00:04:47,840 --> 00:04:53,759
system generation that's what it was

00:04:50,000 --> 00:04:57,120
yep but yeah excellent so what why

00:04:53,759 --> 00:05:01,360
why veet at this point in time

00:04:57,120 --> 00:05:03,440
uh so i think vt is essentially a um

00:05:01,360 --> 00:05:04,960
like a vet alongside you know snowpack

00:05:03,440 --> 00:05:07,759
wmr

00:05:04,960 --> 00:05:08,639
web dev server i think we all come at a

00:05:07,759 --> 00:05:12,080
time where

00:05:08,639 --> 00:05:15,280
native es modules has finally somewhat

00:05:12,080 --> 00:05:15,840
reached it's close to being universally

00:05:15,280 --> 00:05:19,440
available

00:05:15,840 --> 00:05:20,240
finally uh all right uh if we disregard

00:05:19,440 --> 00:05:22,160
ie11

00:05:20,240 --> 00:05:24,160
then the latest version of all these

00:05:22,160 --> 00:05:27,600
major browsers all support

00:05:24,160 --> 00:05:30,800
native vs modules it's now usable

00:05:27,600 --> 00:05:35,120
in node.js as well

00:05:30,800 --> 00:05:35,600
so the ecosystem is finally now starting

00:05:35,120 --> 00:05:37,759
to

00:05:35,600 --> 00:05:39,360
to do this sort of huge migration where

00:05:37,759 --> 00:05:40,320
everyone is finally okay we have a

00:05:39,360 --> 00:05:42,560
standard

00:05:40,320 --> 00:05:43,680
module system now and it runs natively

00:05:42,560 --> 00:05:47,039
in the browser

00:05:43,680 --> 00:05:49,600
so uh all the a lot of the assumptions

00:05:47,039 --> 00:05:51,600
about tooling uh especially like if a

00:05:49,600 --> 00:05:52,479
tool if you assume that all the code is

00:05:51,600 --> 00:05:55,520
going to be

00:05:52,479 --> 00:05:59,440
standard es modules um

00:05:55,520 --> 00:06:02,800
you can link up a lot of stuff you can

00:05:59,440 --> 00:06:04,960
delegate a lot of stuff to browsers or

00:06:02,800 --> 00:06:06,000
some tools that just handle specific

00:06:04,960 --> 00:06:09,600
parts of the workflow

00:06:06,000 --> 00:06:11,039
faster than existing tools

00:06:09,600 --> 00:06:13,120
and i think that's where this next

00:06:11,039 --> 00:06:13,759
generation of tools is going to be

00:06:13,120 --> 00:06:16,720
focused on

00:06:13,759 --> 00:06:17,199
is um you know finally we have this

00:06:16,720 --> 00:06:20,160
native

00:06:17,199 --> 00:06:22,080
standard module system that's going to

00:06:20,160 --> 00:06:22,720
be somewhat universal and how can we

00:06:22,080 --> 00:06:25,759
sort of

00:06:22,720 --> 00:06:29,039
reimagine the tooling and just kind of

00:06:25,759 --> 00:06:32,160
take this opportunity to rethink how

00:06:29,039 --> 00:06:34,639
what a clean slate or a faster

00:06:32,160 --> 00:06:36,160
version of what we are doing today could

00:06:34,639 --> 00:06:39,840
be like

00:06:36,160 --> 00:06:41,919
yeah so speaking of fast i know we

00:06:39,840 --> 00:06:43,360
prepared to share some screens too as

00:06:41,919 --> 00:06:44,479
well i don't know if we want to jump in

00:06:43,360 --> 00:06:46,800
and give like

00:06:44,479 --> 00:06:48,560
a high level of what what to do with vt

00:06:46,800 --> 00:06:50,560
and how to sort of getting get installed

00:06:48,560 --> 00:06:53,280
or involved with the project

00:06:50,560 --> 00:06:55,120
uh sure yeah so i think i'm just gonna

00:06:53,280 --> 00:06:56,800
start sharing my screen right now

00:06:55,120 --> 00:07:00,080
because i think that's

00:06:56,800 --> 00:07:03,680
going to be the all right so yep

00:07:00,080 --> 00:07:05,840
yep so this is my screen and um

00:07:03,680 --> 00:07:08,160
uh if you go to get started uh it's

00:07:05,840 --> 00:07:10,560
going to ask you to use node.js and

00:07:08,160 --> 00:07:12,400
like use this uh init vjs app but this

00:07:10,560 --> 00:07:14,880
is really for

00:07:12,400 --> 00:07:16,880
you know for people who don't want to go

00:07:14,880 --> 00:07:18,400
through like menu stuff but like today

00:07:16,880 --> 00:07:20,479
we're not going to do that so what i

00:07:18,400 --> 00:07:23,840
want to do today is just like

00:07:20,479 --> 00:07:26,880
here is a uh fresh demo

00:07:23,840 --> 00:07:28,960
like i have an empty demo folder there's

00:07:26,880 --> 00:07:30,479
nothing here so i'm just going to do

00:07:28,960 --> 00:07:33,919
yarn and beat

00:07:30,479 --> 00:07:37,120
uh you're going to add the beat

00:07:33,919 --> 00:07:37,120
probably going to make this bigger

00:07:37,280 --> 00:07:44,400
so i just installed it uh

00:07:40,479 --> 00:07:47,680
it doesn't scroll to the end why

00:07:44,400 --> 00:07:48,639
okay so uh installed pretty fast uh so

00:07:47,680 --> 00:07:50,560
vt is uh

00:07:48,639 --> 00:07:51,759
let's take a look at the note modules

00:07:50,560 --> 00:07:55,680
it's 18 megabytes

00:07:51,759 --> 00:07:57,199
so uh it's also very small amount of

00:07:55,680 --> 00:07:58,560
modules that's actually being installed

00:07:57,199 --> 00:08:01,039
because we pre-bundle

00:07:58,560 --> 00:08:02,240
most of them uh to just make sure the

00:08:01,039 --> 00:08:05,919
install is faster

00:08:02,240 --> 00:08:07,520
um this is why um compared to something

00:08:05,919 --> 00:08:08,560
like maybe create react app you're

00:08:07,520 --> 00:08:10,800
probably gonna have

00:08:08,560 --> 00:08:12,560
you're probably gonna see a noticeable

00:08:10,800 --> 00:08:13,919
difference in terms just installing this

00:08:12,560 --> 00:08:16,639
thing itself

00:08:13,919 --> 00:08:16,960
like how how faster how much faster it

00:08:16,639 --> 00:08:21,280
is

00:08:16,960 --> 00:08:24,960
so now we have this thing here

00:08:21,280 --> 00:08:26,000
uh yes so i have these let's just ignore

00:08:24,960 --> 00:08:27,360
all of the existing stuff

00:08:26,000 --> 00:08:28,479
i'm just going to create a new can you

00:08:27,360 --> 00:08:30,879
explain what we're looking at too as

00:08:28,479 --> 00:08:34,320
well oh these are the node modules

00:08:30,879 --> 00:08:36,640
yeah so this is just after you run

00:08:34,320 --> 00:08:37,360
npm installer yarn ad this is just what

00:08:36,640 --> 00:08:39,919
it creates

00:08:37,360 --> 00:08:44,000
just doesn't really matter so i'm just

00:08:39,919 --> 00:08:44,000
going to create an index.html file

00:08:44,159 --> 00:08:51,720
and uh say hello

00:08:47,920 --> 00:08:54,720
and then i'm going to so you can do

00:08:51,720 --> 00:08:54,720
mpxvid

00:08:57,519 --> 00:09:02,800
a little bit okay let's just move it

00:09:00,320 --> 00:09:02,800
here then

00:09:03,839 --> 00:09:09,440
okay or i'm going to just going here at

00:09:06,800 --> 00:09:13,519
a script

00:09:09,440 --> 00:09:13,519
so i'm going to say dev feeds

00:09:14,080 --> 00:09:16,560
and then

00:09:17,200 --> 00:09:25,519
oh move this up yarn

00:09:20,839 --> 00:09:28,880
dev so i started the dev server

00:09:25,519 --> 00:09:30,000
um notice that i didn't um didn't do

00:09:28,880 --> 00:09:32,000
anything other than

00:09:30,000 --> 00:09:33,040
just running this right so you can kind

00:09:32,000 --> 00:09:34,880
of think so

00:09:33,040 --> 00:09:36,240
at the bare minimum think of it as a

00:09:34,880 --> 00:09:39,279
static file server

00:09:36,240 --> 00:09:42,320
right um you probably use something like

00:09:39,279 --> 00:09:44,399
serv or like http

00:09:42,320 --> 00:09:46,480
static server or whatever like whatever

00:09:44,399 --> 00:09:47,680
static file server you use to locally

00:09:46,480 --> 00:09:50,880
serve a

00:09:47,680 --> 00:09:52,080
directory of static files right just the

00:09:50,880 --> 00:09:55,279
veed command

00:09:52,080 --> 00:09:56,320
does that right uh at the bare minimum

00:09:55,279 --> 00:09:58,560
so you see hello

00:09:56,320 --> 00:10:00,240
and that's the index html being served

00:09:58,560 --> 00:10:01,120
so this is kind of like the uh so i use

00:10:00,240 --> 00:10:04,320
a lot of

00:10:01,120 --> 00:10:06,240
like mpx serve as a serve npm

00:10:04,320 --> 00:10:07,920
file are you familiar with that package

00:10:06,240 --> 00:10:10,000
yeah yeah okay so

00:10:07,920 --> 00:10:11,920
so far out of the box i can get a very

00:10:10,000 --> 00:10:14,399
similar command to serve

00:10:11,920 --> 00:10:15,839
the static files yeah right so it's a

00:10:14,399 --> 00:10:18,240
static file server but it's not

00:10:15,839 --> 00:10:20,079
obviously it's not meant for serving it

00:10:18,240 --> 00:10:20,800
in production right because it does all

00:10:20,079 --> 00:10:23,120
these

00:10:20,800 --> 00:10:23,839
development stuff so i edit and save and

00:10:23,120 --> 00:10:28,240
just

00:10:23,839 --> 00:10:32,480
we get like page reload out of the box

00:10:28,240 --> 00:10:35,279
uh and with native modules uh

00:10:32,480 --> 00:10:36,320
with native esm you can do script type

00:10:35,279 --> 00:10:39,920
of module

00:10:36,320 --> 00:10:39,920
right so you can do uh

00:10:40,000 --> 00:10:43,920
you can either do import here in line

00:10:42,720 --> 00:10:47,360
let's just do that

00:10:43,920 --> 00:10:48,959
actually main.js so it tells you

00:10:47,360 --> 00:10:50,560
it failed to resolve my js because it

00:10:48,959 --> 00:10:52,640
doesn't exist so i'm going to create

00:10:50,560 --> 00:10:53,510
that here

00:10:52,640 --> 00:10:56,659
and

00:10:53,510 --> 00:10:56,659
[Music]

00:10:56,720 --> 00:11:02,720
so reload the page so

00:11:00,640 --> 00:11:04,560
make sure the console actually locks

00:11:02,720 --> 00:11:07,360
hello so you also see this

00:11:04,560 --> 00:11:08,399
vconnect thing which is our hot module

00:11:07,360 --> 00:11:11,680
replacement client

00:11:08,399 --> 00:11:14,560
that's been been run

00:11:11,680 --> 00:11:17,120
so if you added your file here it also

00:11:14,560 --> 00:11:19,920
reloads page

00:11:17,120 --> 00:11:20,880
and you can see this main.js file has

00:11:19,920 --> 00:11:24,399
been updated

00:11:20,880 --> 00:11:24,880
and reloaded so this is not real hot

00:11:24,399 --> 00:11:26,640
module

00:11:24,880 --> 00:11:28,399
replacement going on because this is

00:11:26,640 --> 00:11:31,600
just simply reloading the page

00:11:28,399 --> 00:11:33,839
but it tracks all the things that's

00:11:31,600 --> 00:11:34,959
being imported from your index html to

00:11:33,839 --> 00:11:36,800
know that

00:11:34,959 --> 00:11:38,399
if you edit this file i need to reload

00:11:36,800 --> 00:11:41,680
the page if you add other things i

00:11:38,399 --> 00:11:44,800
i don't need to care about it um

00:11:41,680 --> 00:11:48,399
and then some of the common stuff that

00:11:44,800 --> 00:11:52,079
uh we may want to do is um

00:11:48,399 --> 00:11:56,959
like link to css files um

00:11:52,079 --> 00:12:00,079
so let's just um say style.css

00:11:56,959 --> 00:12:03,760
h1 color red

00:12:00,079 --> 00:12:08,160
you can obviously just use a link

00:12:03,760 --> 00:12:11,600
right so um style.css

00:12:08,160 --> 00:12:14,079
so notice here i can uh because it's a

00:12:11,600 --> 00:12:15,040
actual http server you can use like

00:12:14,079 --> 00:12:17,040
absolute

00:12:15,040 --> 00:12:18,880
paths here it's just like what you'd

00:12:17,040 --> 00:12:22,079
expect so we got this

00:12:18,880 --> 00:12:23,600
thing showing red on the screen and if i

00:12:22,079 --> 00:12:25,600
edit it

00:12:23,600 --> 00:12:27,360
so you're you're mentioned about the

00:12:25,600 --> 00:12:28,320
absolute pass someone's actually in the

00:12:27,360 --> 00:12:30,240
chat how to

00:12:28,320 --> 00:12:32,399
use vt from another folder than just

00:12:30,240 --> 00:12:34,720
root

00:12:32,399 --> 00:12:36,639
how to use it from another folder yeah

00:12:34,720 --> 00:12:39,040
so i guess if you had like your css

00:12:36,639 --> 00:12:39,920
in like a styles folder or like i guess

00:12:39,040 --> 00:12:42,160
you could still

00:12:39,920 --> 00:12:44,880
do relative paths too yeah you can do

00:12:42,160 --> 00:12:48,160
relative paths you can even alias stuff

00:12:44,880 --> 00:12:49,519
uh it also follows all the npm node

00:12:48,160 --> 00:12:52,240
modules resolve

00:12:49,519 --> 00:12:53,360
algorithm okay which we'll show in a bit

00:12:52,240 --> 00:12:55,519
um

00:12:53,360 --> 00:12:56,480
but as you can see like even via the

00:12:55,519 --> 00:13:00,720
simple uh

00:12:56,480 --> 00:13:02,639
link here and notice how when i edit

00:13:00,720 --> 00:13:04,160
this thing the page actually didn't

00:13:02,639 --> 00:13:08,079
reload

00:13:04,160 --> 00:13:11,600
it's hot updating the css in place

00:13:08,079 --> 00:13:14,880
so what it what's making that work

00:13:11,600 --> 00:13:17,519
is this running server

00:13:14,880 --> 00:13:20,000
magic oh yeah so so we just doing the

00:13:17,519 --> 00:13:22,000
work of recording the relationship so

00:13:20,000 --> 00:13:23,279
uh one thing we i kind of want to point

00:13:22,000 --> 00:13:25,360
out is like when we

00:13:23,279 --> 00:13:27,680
when a lot of users coming from webpack

00:13:25,360 --> 00:13:30,480
um they're so used to

00:13:27,680 --> 00:13:32,800
thinking of this main js as their entry

00:13:30,480 --> 00:13:33,760
point of application and html being the

00:13:32,800 --> 00:13:37,040
afterthought

00:13:33,760 --> 00:13:40,240
so in v it's kind of think of it as

00:13:37,040 --> 00:13:41,519
a server so your html is actually your

00:13:40,240 --> 00:13:44,079
entry point

00:13:41,519 --> 00:13:44,720
and veed actually parses everything here

00:13:44,079 --> 00:13:48,079
to

00:13:44,720 --> 00:13:49,120
consider it a model graph entry so style

00:13:48,079 --> 00:13:52,079
css is

00:13:49,120 --> 00:13:54,320
considered part of the module graph this

00:13:52,079 --> 00:13:56,880
thing is turned into an inline module

00:13:54,320 --> 00:13:57,680
and which imports this main.js which is

00:13:56,880 --> 00:13:59,920
another module

00:13:57,680 --> 00:14:01,120
so notice how like index.html is

00:13:59,920 --> 00:14:02,880
actually the entry point to your

00:14:01,120 --> 00:14:04,880
application and it's kind of

00:14:02,880 --> 00:14:06,240
from there we construct the whole module

00:14:04,880 --> 00:14:08,320
graph of your application

00:14:06,240 --> 00:14:10,320
instead of like we're going from here

00:14:08,320 --> 00:14:11,519
then going backwards and figure out what

00:14:10,320 --> 00:14:14,800
the html should be

00:14:11,519 --> 00:14:17,839
right um so that's kind of

00:14:14,800 --> 00:14:20,880
a thing a lot of people kind of have to

00:14:17,839 --> 00:14:22,959
uh sort of flip a switch

00:14:20,880 --> 00:14:24,399
in order to to get into v i think uh

00:14:22,959 --> 00:14:25,920
parasol does this too

00:14:24,399 --> 00:14:28,160
right so parcel is kind of the pioneer

00:14:25,920 --> 00:14:30,000
of this concept of html being your entry

00:14:28,160 --> 00:14:31,600
and being part of the module graph and i

00:14:30,000 --> 00:14:35,040
think that's kind of the

00:14:31,600 --> 00:14:37,440
uh for web development in particular uh

00:14:35,040 --> 00:14:38,079
this is just uh for me it's a more

00:14:37,440 --> 00:14:40,160
natural

00:14:38,079 --> 00:14:41,519
sort of mental model to work with but

00:14:40,160 --> 00:14:44,480
either way right so

00:14:41,519 --> 00:14:46,240
what v does under the hood is um we

00:14:44,480 --> 00:14:46,959
actually record these all these import

00:14:46,240 --> 00:14:50,240
relationships

00:14:46,959 --> 00:14:53,839
between the html and the css files

00:14:50,240 --> 00:14:56,560
uh so so we can

00:14:53,839 --> 00:14:56,880
uh we get to actually just update this

00:14:56,560 --> 00:15:00,160
link

00:14:56,880 --> 00:15:03,199
css in place and uh

00:15:00,160 --> 00:15:05,120
so that's right this is not too

00:15:03,199 --> 00:15:07,120
much different from say a static file

00:15:05,120 --> 00:15:08,079
server so some of the things we also do

00:15:07,120 --> 00:15:10,720
out of the box

00:15:08,079 --> 00:15:10,720
is um

00:15:11,120 --> 00:15:19,839
let's say we have style.module.css

00:15:16,959 --> 00:15:21,279
i'm going to say uh what's the uh the

00:15:19,839 --> 00:15:22,639
module keyword i've actually not seen

00:15:21,279 --> 00:15:24,480
that before

00:15:22,639 --> 00:15:26,560
right so this is a convention right so

00:15:24,480 --> 00:15:28,880
if you've worked with css modules

00:15:26,560 --> 00:15:31,279
um it's kind of a convention to name

00:15:28,880 --> 00:15:34,240
your files with this module.css

00:15:31,279 --> 00:15:36,720
postfix um and in vp this is also a

00:15:34,240 --> 00:15:40,880
convention so if you see we see a file

00:15:36,720 --> 00:15:45,360
named like this and i'm gonna say uh

00:15:40,880 --> 00:15:49,120
text color

00:15:45,360 --> 00:15:50,639
red and then i'm going to comment out

00:15:49,120 --> 00:15:54,079
this one

00:15:50,639 --> 00:15:57,920
and i'm going to say import classes

00:15:54,079 --> 00:16:01,519
from style dot

00:15:57,920 --> 00:16:05,120
module dot css

00:16:01,519 --> 00:16:08,639
let's just log this and as you can see

00:16:05,120 --> 00:16:10,800
it gives you this object with text in it

00:16:08,639 --> 00:16:13,120
so this is a class name so i'm going to

00:16:10,800 --> 00:16:13,120
say

00:16:16,130 --> 00:16:20,079
[Music]

00:16:18,839 --> 00:16:23,440
document.queryselectorh1.classname

00:16:20,079 --> 00:16:27,440
equals classes dot

00:16:23,440 --> 00:16:30,959
text and

00:16:27,440 --> 00:16:32,639
now we get red here so if we edit this

00:16:30,959 --> 00:16:35,440
thing here

00:16:32,639 --> 00:16:37,120
it also reloads uh so this is not not

00:16:35,440 --> 00:16:38,720
much replacement but

00:16:37,120 --> 00:16:40,880
but you get the idea right so we have a

00:16:38,720 --> 00:16:42,480
lot these uh big conventions here so

00:16:40,880 --> 00:16:44,880
imagine if you are

00:16:42,480 --> 00:16:45,920
you previously had a project with plain

00:16:44,880 --> 00:16:49,440
webpack and now

00:16:45,920 --> 00:16:51,839
you say i want to work with css modules

00:16:49,440 --> 00:16:53,040
uh you probably have to go through a

00:16:51,839 --> 00:16:55,600
guide to teach you what

00:16:53,040 --> 00:16:57,279
css loader is what style loader is what

00:16:55,600 --> 00:16:59,279
i've definitely been down that path

00:16:57,279 --> 00:17:00,720
uh then you need to look at all the post

00:16:59,279 --> 00:17:02,800
css configurations for

00:17:00,720 --> 00:17:04,799
css loader add those loaders to your

00:17:02,800 --> 00:17:07,600
webpack config and

00:17:04,799 --> 00:17:10,000
you get what i mean right so uh so the

00:17:07,600 --> 00:17:12,000
idea of veet is it's pretty opinionated

00:17:10,000 --> 00:17:13,360
it has a lot of these kind of things

00:17:12,000 --> 00:17:16,400
things built in

00:17:13,360 --> 00:17:17,760
and to sort of minimize the

00:17:16,400 --> 00:17:20,079
the hoops you need to jump through to

00:17:17,760 --> 00:17:22,720
get certain things working

00:17:20,079 --> 00:17:24,799
um similarly if you want to have custom

00:17:22,720 --> 00:17:26,640
post css configs

00:17:24,799 --> 00:17:28,240
so you just add a post user's config

00:17:26,640 --> 00:17:31,280
thing

00:17:28,240 --> 00:17:32,799
you export oppose us config so this is

00:17:31,280 --> 00:17:34,799
um

00:17:32,799 --> 00:17:37,039
this is similar to how you get uh

00:17:34,799 --> 00:17:38,880
tailwind css working because tailwind

00:17:37,039 --> 00:17:42,880
itself is really a post css

00:17:38,880 --> 00:17:46,240
plugin right so if you configure

00:17:42,880 --> 00:17:50,320
you want to configure tailwind with feet

00:17:46,240 --> 00:17:51,600
uh let's see how can we get that working

00:17:50,320 --> 00:17:55,200
i probably

00:17:51,600 --> 00:17:58,240
need to go to tailwind css

00:17:55,200 --> 00:18:00,640
uh and i'm gonna look for feet i think

00:17:58,240 --> 00:18:02,480
there is a guide with feet here

00:18:00,640 --> 00:18:04,000
yes so why are you looking for that

00:18:02,480 --> 00:18:06,240
there's some some question that came in

00:18:04,000 --> 00:18:08,400
uh the chat is there so someone like

00:18:06,240 --> 00:18:11,120
create react app is there like an eject

00:18:08,400 --> 00:18:12,000
feature or is you just get beat and

00:18:11,120 --> 00:18:14,320
that's it so

00:18:12,000 --> 00:18:15,360
here's the thing like there's there's

00:18:14,320 --> 00:18:17,679
really no need

00:18:15,360 --> 00:18:19,120
to eject soviet has its own

00:18:17,679 --> 00:18:21,520
configuration format

00:18:19,120 --> 00:18:22,320
but it's not based on webpack the idea

00:18:21,520 --> 00:18:24,400
is

00:18:22,320 --> 00:18:25,440
css module is something that just works

00:18:24,400 --> 00:18:28,080
in vt there's

00:18:25,440 --> 00:18:28,960
really like uh if you want to configure

00:18:28,080 --> 00:18:33,520
it yes you can

00:18:28,960 --> 00:18:37,200
you just create a read config.js

00:18:33,520 --> 00:18:40,720
and you can say export default

00:18:37,200 --> 00:18:42,320
css modules then

00:18:40,720 --> 00:18:44,320
these options will be passed on to the

00:18:42,320 --> 00:18:47,679
post css modules

00:18:44,320 --> 00:18:51,200
uh plugin so you can configure like

00:18:47,679 --> 00:18:54,799
locals convention to be

00:18:51,200 --> 00:18:57,280
camel case only if you want

00:18:54,799 --> 00:18:59,039
like if you use css modules you you know

00:18:57,280 --> 00:19:00,720
what this does but like

00:18:59,039 --> 00:19:02,720
most of these built-in stuff is also

00:19:00,720 --> 00:19:06,320
configurable but the thing is

00:19:02,720 --> 00:19:08,880
um my personal opinion is

00:19:06,320 --> 00:19:10,559
because i've worked um we we maintained

00:19:08,880 --> 00:19:13,600
view cri for view right

00:19:10,559 --> 00:19:15,840
ucr is built on top of webpack and we

00:19:13,600 --> 00:19:18,160
ship a lot of these stuff out of the box

00:19:15,840 --> 00:19:22,160
in fuse in view cri as well

00:19:18,160 --> 00:19:22,960
so we have in subway uh if you use feed

00:19:22,160 --> 00:19:26,799
with vue

00:19:22,960 --> 00:19:29,679
you almost get identical feature set

00:19:26,799 --> 00:19:31,280
with vue cli in terms of what you can do

00:19:29,679 --> 00:19:34,320
with source code

00:19:31,280 --> 00:19:36,000
but we have to maintain a pretty

00:19:34,320 --> 00:19:38,880
complicated web pack config

00:19:36,000 --> 00:19:39,760
internally and when people want to

00:19:38,880 --> 00:19:43,360
configure that

00:19:39,760 --> 00:19:46,400
it's typically quite involved

00:19:43,360 --> 00:19:49,520
and the idea with veet is um

00:19:46,400 --> 00:19:52,000
we essentially extracted

00:19:49,520 --> 00:19:52,799
a lot of these things that we know like

00:19:52,000 --> 00:19:56,160
users

00:19:52,799 --> 00:19:59,919
will need this in a typical project

00:19:56,160 --> 00:20:01,919
and also uh because over time it kind of

00:19:59,919 --> 00:20:02,960
in view ci we've come to these

00:20:01,919 --> 00:20:05,600
conclusions like this

00:20:02,960 --> 00:20:06,880
is kind of the sensible default most

00:20:05,600 --> 00:20:08,559
people will want this

00:20:06,880 --> 00:20:09,919
so that's how we're going to present it

00:20:08,559 --> 00:20:13,679
in vit by default

00:20:09,919 --> 00:20:14,400
as well and if there are certain things

00:20:13,679 --> 00:20:16,000
that you

00:20:14,400 --> 00:20:20,159
we know that users will want to

00:20:16,000 --> 00:20:22,080
customize we expose them via an option

00:20:20,159 --> 00:20:23,440
and the plug-in system of each is also

00:20:22,080 --> 00:20:26,720
uh pretty flexible

00:20:23,440 --> 00:20:30,400
um but i don't think we want to dig into

00:20:26,720 --> 00:20:32,559
that just as yet so i guess

00:20:30,400 --> 00:20:33,520
understanding these conventions like as

00:20:32,559 --> 00:20:34,799
i was talking about the

00:20:33,520 --> 00:20:36,159
the bundlers and how we've sort of

00:20:34,799 --> 00:20:36,720
advanced and now where everybody's got

00:20:36,159 --> 00:20:37,919
like new

00:20:36,720 --> 00:20:40,400
things they're looking forward like the

00:20:37,919 --> 00:20:40,720
next generation yeah i love the fact

00:20:40,400 --> 00:20:42,559
that

00:20:40,720 --> 00:20:44,880
there are strong opinions happening now

00:20:42,559 --> 00:20:46,400
in front end the javascript world

00:20:44,880 --> 00:20:48,559
because i when you talk about like the

00:20:46,400 --> 00:20:50,240
webpack like i'm triggered where

00:20:48,559 --> 00:20:51,679
i've definitely got to the point where i

00:20:50,240 --> 00:20:54,000
want to use this new thing

00:20:51,679 --> 00:20:55,600
like tailwinds at the time and but i

00:20:54,000 --> 00:20:57,120
don't know how to get it

00:20:55,600 --> 00:20:58,799
like in my webpack config and there's

00:20:57,120 --> 00:21:00,080
sometimes there's some some hoops i have

00:20:58,799 --> 00:21:01,280
to jump through sometimes

00:21:00,080 --> 00:21:03,039
two different plug-ins that are

00:21:01,280 --> 00:21:03,760
competing against each other for for

00:21:03,039 --> 00:21:05,919
space

00:21:03,760 --> 00:21:06,880
and sometimes i need both of them and uh

00:21:05,919 --> 00:21:08,960
like i i'm

00:21:06,880 --> 00:21:11,600
i've sort of been burnt out enough about

00:21:08,960 --> 00:21:12,799
that situation but it sounds like with v

00:21:11,600 --> 00:21:15,280
a lot of the stuff's just working on the

00:21:12,799 --> 00:21:17,679
box yeah i think um

00:21:15,280 --> 00:21:18,400
it's so being more strongly opinionated

00:21:17,679 --> 00:21:20,000
doesn't

00:21:18,400 --> 00:21:22,400
i think it's just the the different

00:21:20,000 --> 00:21:22,799
value proposition and different sort of

00:21:22,400 --> 00:21:25,039
uh

00:21:22,799 --> 00:21:26,000
where how how at which level the tool

00:21:25,039 --> 00:21:27,760
wants to live at

00:21:26,000 --> 00:21:30,559
yeah webpack itself i think is still

00:21:27,760 --> 00:21:32,960
kind of very low level uh

00:21:30,559 --> 00:21:34,880
the downside is when you have such a low

00:21:32,960 --> 00:21:37,840
level abstraction

00:21:34,880 --> 00:21:38,960
and you want to allow all the higher

00:21:37,840 --> 00:21:41,120
level features to

00:21:38,960 --> 00:21:42,960
be configurable in user space the

00:21:41,120 --> 00:21:46,240
complexity just explodes

00:21:42,960 --> 00:21:47,440
yeah whereas if you if the tool comes in

00:21:46,240 --> 00:21:49,840
and say hey i just want to be

00:21:47,440 --> 00:21:52,400
opinionated so i can manage

00:21:49,840 --> 00:21:54,159
much more for the user and because the

00:21:52,400 --> 00:21:54,960
tool gets to manage all these things

00:21:54,159 --> 00:21:57,520
together

00:21:54,960 --> 00:21:58,720
together so the tool gets gets to sort

00:21:57,520 --> 00:22:01,280
of work

00:21:58,720 --> 00:22:02,720
all these systems in uh somewhat

00:22:01,280 --> 00:22:03,760
smoother because you have more control

00:22:02,720 --> 00:22:05,280
at the tooling layer

00:22:03,760 --> 00:22:06,880
instead of forcing the user to figure

00:22:05,280 --> 00:22:08,799
out all these how to get

00:22:06,880 --> 00:22:10,159
plugging feature a to be compatible with

00:22:08,799 --> 00:22:13,840
feature b and all that

00:22:10,159 --> 00:22:16,000
right yeah um and i think um

00:22:13,840 --> 00:22:17,840
it's not necessarily saying like i think

00:22:16,000 --> 00:22:20,320
it's actually a miracle that you can

00:22:17,840 --> 00:22:22,559
make all these things work with webpack

00:22:20,320 --> 00:22:24,720
just like looking at all the plugins and

00:22:22,559 --> 00:22:28,000
loaders that you put together

00:22:24,720 --> 00:22:30,720
uh but but you know

00:22:28,000 --> 00:22:32,640
like if if the over time i think we come

00:22:30,720 --> 00:22:36,000
to the conclusion that most users don't

00:22:32,640 --> 00:22:38,720
really want to deal with that uh so if

00:22:36,000 --> 00:22:40,640
the tool can sort of already handle most

00:22:38,720 --> 00:22:42,159
of these stuff in an opinionated way for

00:22:40,640 --> 00:22:45,280
them they are happy to

00:22:42,159 --> 00:22:46,799
sort of just follow along and uh

00:22:45,280 --> 00:22:49,120
and i think that takes time too because

00:22:46,799 --> 00:22:51,760
like we we as an ecosystem as

00:22:49,120 --> 00:22:53,600
as the community we we need we needed

00:22:51,760 --> 00:22:54,080
something to pave the way like webpack

00:22:53,600 --> 00:22:56,480
right

00:22:54,080 --> 00:22:58,080
then we try to put all these things

00:22:56,480 --> 00:22:59,919
together on top of webpack then we

00:22:58,080 --> 00:23:02,960
realize okay we finally

00:22:59,919 --> 00:23:03,760
come to this sort of almost a shared

00:23:02,960 --> 00:23:05,840
convention

00:23:03,760 --> 00:23:07,520
like how we deal with css how we deal

00:23:05,840 --> 00:23:09,600
with certain types of features

00:23:07,520 --> 00:23:11,520
right so if you look at things across

00:23:09,600 --> 00:23:14,799
like create react app or

00:23:11,520 --> 00:23:16,480
view cli or next.js a lot of stuff

00:23:14,799 --> 00:23:18,240
is shared right we're doing a lot of

00:23:16,480 --> 00:23:21,440
similar stuff on top of webpack

00:23:18,240 --> 00:23:22,080
so uh i think we finally reached a time

00:23:21,440 --> 00:23:24,640
where

00:23:22,080 --> 00:23:25,600
most users almost take some of these as

00:23:24,640 --> 00:23:28,080
sort of

00:23:25,600 --> 00:23:30,400
granted they think oh it's natural that

00:23:28,080 --> 00:23:31,600
i'm able to import css it's natural that

00:23:30,400 --> 00:23:35,039
i'm able to

00:23:31,600 --> 00:23:38,240
just use post css out of the box uh

00:23:35,039 --> 00:23:39,120
so i think feet it's just in some way

00:23:38,240 --> 00:23:41,679
it's like

00:23:39,120 --> 00:23:43,840
okay if that's what people are used to

00:23:41,679 --> 00:23:46,000
already then we can sort of

00:23:43,840 --> 00:23:48,400
uh just go directly to provide it out of

00:23:46,000 --> 00:23:51,520
the box right

00:23:48,400 --> 00:23:52,720
yeah and so question um

00:23:51,520 --> 00:23:55,360
so we just saw you do a bunch of

00:23:52,720 --> 00:23:57,440
commands with veet uh how about

00:23:55,360 --> 00:23:59,520
like how do we compare this with the vue

00:23:57,440 --> 00:24:00,960
cli are they gonna be working together

00:23:59,520 --> 00:24:03,600
eventually or do they work together

00:24:00,960 --> 00:24:05,760
today uh they don't work together today

00:24:03,600 --> 00:24:08,880
because vcli is still webpack based

00:24:05,760 --> 00:24:12,080
so in the in the long term we probably

00:24:08,880 --> 00:24:15,679
want to eventually migrate vci to be

00:24:12,080 --> 00:24:18,240
uh to be based um

00:24:15,679 --> 00:24:20,400
so vue cli in terms of scope is a little

00:24:18,240 --> 00:24:21,840
bit higher level than these because it

00:24:20,400 --> 00:24:24,720
also includes

00:24:21,840 --> 00:24:26,400
you know scaffolding yeah it has more uh

00:24:24,720 --> 00:24:29,919
built-in scaffolding it has

00:24:26,400 --> 00:24:33,679
uh this like its own plugin system

00:24:29,919 --> 00:24:36,640
which um i don't know if we want to keep

00:24:33,679 --> 00:24:37,039
if we eventually migrate to v but uh vci

00:24:36,640 --> 00:24:40,159
lives

00:24:37,039 --> 00:24:40,960
at a higher level where it's view

00:24:40,159 --> 00:24:44,080
specific

00:24:40,960 --> 00:24:45,520
has more scaffolding and also

00:24:44,080 --> 00:24:47,200
gives you more opinionated integration

00:24:45,520 --> 00:24:47,679
with like test runners and all the stuff

00:24:47,200 --> 00:24:51,600
so it's

00:24:47,679 --> 00:24:53,279
more an even more complete solution so

00:24:51,600 --> 00:24:55,039
it's interesting yeah so vt is like

00:24:53,279 --> 00:24:56,320
higher level than webpack but lower

00:24:55,039 --> 00:24:59,679
level than vue cli

00:24:56,320 --> 00:25:02,559
somewhere in between um

00:24:59,679 --> 00:25:03,919
got it and um yeah i mean i i'm looking

00:25:02,559 --> 00:25:05,279
forward to seeing things like that being

00:25:03,919 --> 00:25:06,799
integrated with ucli because

00:25:05,279 --> 00:25:08,880
i like i like the opinions you get with

00:25:06,799 --> 00:25:10,400
the cli because i don't want

00:25:08,880 --> 00:25:12,640
i spent a lot of time working through

00:25:10,400 --> 00:25:14,960
different frameworks and different

00:25:12,640 --> 00:25:16,640
projects that i don't i have to contact

00:25:14,960 --> 00:25:18,320
switch quite a bit especially in my role

00:25:16,640 --> 00:25:19,919
at github because i just we just ship a

00:25:18,320 --> 00:25:21,520
lot of random stuff and then

00:25:19,919 --> 00:25:22,960
move on to the next thing i think it's

00:25:21,520 --> 00:25:25,840
like a devrel thing really

00:25:22,960 --> 00:25:27,440
um and i imagine folks who do um like

00:25:25,840 --> 00:25:28,480
they do a lot of production sites and

00:25:27,440 --> 00:25:31,919
like agencies

00:25:28,480 --> 00:25:33,600
so my question is is veet um extendable

00:25:31,919 --> 00:25:36,400
in other different frameworks and

00:25:33,600 --> 00:25:37,520
uh within the javascript ecosystem yeah

00:25:36,400 --> 00:25:40,559
yeah definitely

00:25:37,520 --> 00:25:42,000
um so we have so there's

00:25:40,559 --> 00:25:44,720
several different ways to look at this

00:25:42,000 --> 00:25:46,400
so first of all vt is framework agnostic

00:25:44,720 --> 00:25:49,440
so you can use it to work with almost

00:25:46,400 --> 00:25:54,080
any like front-end framework of choice

00:25:49,440 --> 00:25:57,840
and then vt itself uh exposes a pretty

00:25:54,080 --> 00:26:00,559
uh pretty well-defined javascript api

00:25:57,840 --> 00:26:01,200
so you can use vt inside a higher level

00:26:00,559 --> 00:26:04,320
tool so

00:26:01,200 --> 00:26:06,559
um an example is veetpress which is a

00:26:04,320 --> 00:26:09,039
static site generator that

00:26:06,559 --> 00:26:10,000
is built on top of it it actually wraps

00:26:09,039 --> 00:26:12,080
feed internally

00:26:10,000 --> 00:26:15,120
and does a bunch of opinionated stuff on

00:26:12,080 --> 00:26:18,559
top of it which i can probably uh

00:26:15,120 --> 00:26:21,120
show around showcase a bit uh

00:26:18,559 --> 00:26:22,080
do you have something that's true not

00:26:21,120 --> 00:26:24,799
really but it's

00:26:22,080 --> 00:26:25,600
it's pretty cool because um it doesn't

00:26:24,799 --> 00:26:27,840
really need

00:26:25,600 --> 00:26:29,279
like i i really like this live stream

00:26:27,840 --> 00:26:30,720
that i can just show how it works

00:26:29,279 --> 00:26:33,120
instead of talking about it

00:26:30,720 --> 00:26:34,400
actually yeah yeah i personally like we

00:26:33,120 --> 00:26:35,200
talked about this before we were live

00:26:34,400 --> 00:26:38,240
but i love that

00:26:35,200 --> 00:26:39,360
the fact that i know a lot of folks are

00:26:38,240 --> 00:26:41,200
in the stream who haven't been here

00:26:39,360 --> 00:26:42,799
before on open source friday but it's an

00:26:41,200 --> 00:26:43,679
opportunity for us to have conversations

00:26:42,799 --> 00:26:45,200
about projects

00:26:43,679 --> 00:26:47,039
open up the web browser and talk as

00:26:45,200 --> 00:26:48,799
opposed to like a podcast where

00:26:47,039 --> 00:26:50,480
you have to talk high level and sort of

00:26:48,799 --> 00:26:52,240
walk through different patterns without

00:26:50,480 --> 00:26:53,440
getting to actually show it

00:26:52,240 --> 00:26:55,360
and then i don't know how many people

00:26:53,440 --> 00:26:56,400
read the show notes but uh it's nice to

00:26:55,360 --> 00:26:58,320
see you

00:26:56,400 --> 00:27:00,640
just give us the examples right here and

00:26:58,320 --> 00:27:04,240
like right in front of us

00:27:00,640 --> 00:27:05,120
yep all right so uh i'm going to just

00:27:04,240 --> 00:27:07,360
like quickly get

00:27:05,120 --> 00:27:09,200
tailwind going because so this is just

00:27:07,360 --> 00:27:12,000
uh installing a bunch of stuff so i'm

00:27:09,200 --> 00:27:15,600
going to use yarn and

00:27:12,000 --> 00:27:17,120
d with all these tailwind stuff right

00:27:15,600 --> 00:27:18,960
so these are just like standard

00:27:17,120 --> 00:27:21,200
dependencies that tailwind wants you to

00:27:18,960 --> 00:27:23,440
install

00:27:21,200 --> 00:27:25,760
and once you install that i'm going to

00:27:23,440 --> 00:27:30,720
tailwind

00:27:25,760 --> 00:27:30,720
what is that tailwind css and the p

00:27:32,080 --> 00:27:36,640
so if you're wondering why i i i was

00:27:34,320 --> 00:27:39,679
able to run that without the npm

00:27:36,640 --> 00:27:43,840
mpx prefix because uh

00:27:39,679 --> 00:27:45,520
i configured my path to include the

00:27:43,840 --> 00:27:47,279
the node modules in the current

00:27:45,520 --> 00:27:49,600
directory

00:27:47,279 --> 00:27:50,320
so i can always run the bins in the

00:27:49,600 --> 00:27:52,240
current

00:27:50,320 --> 00:27:53,840
node modules in the current directory

00:27:52,240 --> 00:27:55,760
without any prefix

00:27:53,840 --> 00:27:57,440
okay that's just your personal

00:27:55,760 --> 00:28:00,559
development environment

00:27:57,440 --> 00:28:02,480
yeah that's just a thing that i do

00:28:00,559 --> 00:28:04,320
okay i mean i love the other thing i

00:28:02,480 --> 00:28:05,840
love about this is i get to learn

00:28:04,320 --> 00:28:07,679
from other people who how to write code

00:28:05,840 --> 00:28:08,000
it's like i'm pair programming with you

00:28:07,679 --> 00:28:09,440
but

00:28:08,000 --> 00:28:12,000
i'm i'm really this sort of in the

00:28:09,440 --> 00:28:16,399
passenger seat watching you code

00:28:12,000 --> 00:28:19,600
and yeah but yeah i love this cool so

00:28:16,399 --> 00:28:21,919
as well just a heads up so i just

00:28:19,600 --> 00:28:24,640
created this uh tailwind config

00:28:21,919 --> 00:28:26,159
yep this post css config so there is

00:28:24,640 --> 00:28:29,600
really nothing special to do

00:28:26,159 --> 00:28:32,720
here other than oh this thing

00:28:29,600 --> 00:28:34,880
i mean this is kind of um

00:28:32,720 --> 00:28:36,399
some of you specific so we'll ignore

00:28:34,880 --> 00:28:39,279
this because this is like a

00:28:36,399 --> 00:28:40,720
tailwind specifics thing but this is the

00:28:39,279 --> 00:28:44,559
source code you want to actually just

00:28:40,720 --> 00:28:47,760
copy and put it here

00:28:44,559 --> 00:28:51,279
and just re re-enable

00:28:47,760 --> 00:28:53,760
this and then

00:28:51,279 --> 00:28:55,760
okay so pages actually already reloaded

00:28:53,760 --> 00:28:57,760
so i think

00:28:55,760 --> 00:29:00,320
i should have tailwind css in there so i

00:28:57,760 --> 00:29:03,039
want to uh

00:29:00,320 --> 00:29:05,039
ah i don't use tailwind css and just

00:29:03,039 --> 00:29:08,880
like tough enough i think something like

00:29:05,039 --> 00:29:12,080
class equals 3xl no

00:29:08,880 --> 00:29:13,840
no i'm

00:29:12,080 --> 00:29:15,279
actually if anybody is a tailwind expert

00:29:13,840 --> 00:29:17,840
if you want to drop uh

00:29:15,279 --> 00:29:19,520
whatever the uh oh it's text dash three

00:29:17,840 --> 00:29:21,039
yeah

00:29:19,520 --> 00:29:22,720
excel see this is the other thing the

00:29:21,039 --> 00:29:26,159
the mob programming with the

00:29:22,720 --> 00:29:30,080
with twitch so it doesn't really work

00:29:26,159 --> 00:29:32,799
wondering why uh it's not working

00:29:30,080 --> 00:29:34,000
let's see yeah there's some other wreck

00:29:32,799 --> 00:29:34,320
i don't know if you have the chat open

00:29:34,000 --> 00:29:37,679
but

00:29:34,320 --> 00:29:40,480
text dash xs

00:29:37,679 --> 00:29:42,159
um yeah everybody's now searching the

00:29:40,480 --> 00:29:44,960
docs for you too as well

00:29:42,159 --> 00:29:47,039
yeah wait it's not actually updating the

00:29:44,960 --> 00:29:49,120
index.html does it need to be uh

00:29:47,039 --> 00:29:50,799
oh because i'm actually overwriting it

00:29:49,120 --> 00:29:53,840
here okay i got it

00:29:50,799 --> 00:29:57,039
yeah so now text to esl is in

00:29:53,840 --> 00:29:58,640
still isn't really working so style.css

00:29:57,039 --> 00:30:00,159
so the cool thing about so another thing

00:29:58,640 --> 00:30:01,600
i want to showcase here is when you're

00:30:00,159 --> 00:30:04,320
debugging with something like v

00:30:01,600 --> 00:30:06,320
because we don't concatenate everything

00:30:04,320 --> 00:30:06,880
so easiest way to debug stuff is just

00:30:06,320 --> 00:30:09,919
looking

00:30:06,880 --> 00:30:10,960
at the network tab because every module

00:30:09,919 --> 00:30:13,279
is actually a

00:30:10,960 --> 00:30:15,360
individual request here so i'm just

00:30:13,279 --> 00:30:18,559
going to look at this

00:30:15,360 --> 00:30:20,559
and it's not really doing anything

00:30:18,559 --> 00:30:22,159
yeah i think this is because i didn't

00:30:20,559 --> 00:30:26,000
restart the server

00:30:22,159 --> 00:30:27,760
is that yeah this importing the uh

00:30:26,000 --> 00:30:30,159
the tailwind library do you have to get

00:30:27,760 --> 00:30:32,640
out of the file oh there you go

00:30:30,159 --> 00:30:33,760
okay something changed yeah so i

00:30:32,640 --> 00:30:35,520
restarted server

00:30:33,760 --> 00:30:39,600
because it didn't load the post css

00:30:35,520 --> 00:30:39,600
config previously it cached uh

00:30:39,679 --> 00:30:44,480
before i restart i added the post css

00:30:41,679 --> 00:30:47,520
config and the server was like um

00:30:44,480 --> 00:30:49,440
i didn't notice it's already here so

00:30:47,520 --> 00:30:50,799
yeah well that just goes to show that

00:30:49,440 --> 00:30:53,279
even even you

00:30:50,799 --> 00:30:54,159
needs to debug sometimes you can't just

00:30:53,279 --> 00:30:57,440
live code

00:30:54,159 --> 00:30:58,320
on on whim yeah okay and then just

00:30:57,440 --> 00:31:01,039
looking at the uh

00:30:58,320 --> 00:31:01,600
index.html we're not importing the css

00:31:01,039 --> 00:31:03,600
oh we are

00:31:01,600 --> 00:31:04,799
line two got it we're using this link

00:31:03,600 --> 00:31:07,120
here got it so

00:31:04,799 --> 00:31:09,519
so it works as you can see post css also

00:31:07,120 --> 00:31:12,880
works over these normal links

00:31:09,519 --> 00:31:15,760
right because this is treated as a

00:31:12,880 --> 00:31:17,039
dependency in vtlan as well so if you

00:31:15,760 --> 00:31:19,919
have like nested ad

00:31:17,039 --> 00:31:20,960
imports inside the css file we also

00:31:19,919 --> 00:31:23,519
trace all of that

00:31:20,960 --> 00:31:25,279
we also kind of record the module graph

00:31:23,519 --> 00:31:27,519
the dependency chain so

00:31:25,279 --> 00:31:29,600
when you edit like nested ad imported

00:31:27,519 --> 00:31:30,799
css files we also do hot module

00:31:29,600 --> 00:31:34,640
replacement

00:31:30,799 --> 00:31:37,279
and all that uh okay so

00:31:34,640 --> 00:31:40,399
that's it i think we're gonna wrap it up

00:31:37,279 --> 00:31:43,440
here for css actually um

00:31:40,399 --> 00:31:47,200
maybe also showcase something like

00:31:43,440 --> 00:31:50,240
um i'm going to yarn add

00:31:47,200 --> 00:31:53,279
the sass

00:31:50,240 --> 00:31:55,279
so i'm just installing sass itself

00:31:53,279 --> 00:31:59,039
and i'm going to create a new file

00:31:55,279 --> 00:32:02,559
called style.scss

00:31:59,039 --> 00:32:05,760
uh and then color red

00:32:02,559 --> 00:32:05,760
is that the syntax

00:32:07,120 --> 00:32:15,840
so i wrote some scss

00:32:11,279 --> 00:32:15,840
and i'm going to just link it like this

00:32:19,120 --> 00:32:22,640
so yeah so you install sass and then you

00:32:21,760 --> 00:32:25,600
can use

00:32:22,640 --> 00:32:27,519
sass or scss and it just works like this

00:32:25,600 --> 00:32:31,120
of course you can also do

00:32:27,519 --> 00:32:34,159
it like this if you want

00:32:31,120 --> 00:32:34,159
works the same way

00:32:36,799 --> 00:32:45,679
or you can do

00:32:40,840 --> 00:32:45,679
um something like this

00:32:46,720 --> 00:32:52,399
uh also works right so

00:32:50,559 --> 00:32:54,320
most of the conventional stuff that you

00:32:52,399 --> 00:32:58,799
expect that should work

00:32:54,320 --> 00:32:58,799
it probably will work okay um

00:33:00,159 --> 00:33:03,600
and this is because we didn't do

00:33:02,080 --> 00:33:04,570
anything here so i'm just going to

00:33:03,600 --> 00:33:06,519
change this to

00:33:04,570 --> 00:33:08,720
[Music]

00:33:06,519 --> 00:33:13,120
style.scss

00:33:08,720 --> 00:33:14,640
and reloads the page nice

00:33:13,120 --> 00:33:17,200
and then real quick going back to the

00:33:14,640 --> 00:33:19,039
veep config we didn't do much to

00:33:17,200 --> 00:33:20,880
set this up we did uh create some

00:33:19,039 --> 00:33:22,960
postgres that was the

00:33:20,880 --> 00:33:24,720
config that we had before so we didn't

00:33:22,960 --> 00:33:26,720
really do anything to um

00:33:24,720 --> 00:33:28,799
yeah make this work yeah we didn't

00:33:26,720 --> 00:33:30,320
really like this is actually unnecessary

00:33:28,799 --> 00:33:33,120
right now because i was just showing

00:33:30,320 --> 00:33:33,600
how you can customize css modules yeah

00:33:33,120 --> 00:33:36,640
okay

00:33:33,600 --> 00:33:39,279
excellent yeah so technically

00:33:36,640 --> 00:33:40,159
like anything you don't need just like

00:33:39,279 --> 00:33:42,960
remove them

00:33:40,159 --> 00:33:44,640
and it doesn't affect anything like like

00:33:42,960 --> 00:33:46,159
if you just want sass

00:33:44,640 --> 00:33:48,399
like this is all you need to work with

00:33:46,159 --> 00:33:50,960
sass like

00:33:48,399 --> 00:33:52,960
uh so really like it's more like uh if

00:33:50,960 --> 00:33:54,480
you want to go the super super minimal

00:33:52,960 --> 00:33:56,960
route like

00:33:54,480 --> 00:33:57,840
you just have your html css in

00:33:56,960 --> 00:34:01,360
javascript

00:33:57,840 --> 00:34:04,320
optionally with post css or

00:34:01,360 --> 00:34:05,440
a preprocessor like this is not much

00:34:04,320 --> 00:34:07,440
from a

00:34:05,440 --> 00:34:09,280
static file server except it magically

00:34:07,440 --> 00:34:10,159
knows some of the stuff that you want to

00:34:09,280 --> 00:34:13,440
use

00:34:10,159 --> 00:34:15,520
um okay so um

00:34:13,440 --> 00:34:17,040
so this is for people who want to just

00:34:15,520 --> 00:34:19,679
like have a

00:34:17,040 --> 00:34:20,480
you know a smarter server yeah but we

00:34:19,679 --> 00:34:23,760
can do

00:34:20,480 --> 00:34:24,639
more than this obviously so the one use

00:34:23,760 --> 00:34:25,919
case that i have

00:34:24,639 --> 00:34:27,200
and because i've been doing so much

00:34:25,919 --> 00:34:27,839
twitch streaming this year and we just

00:34:27,200 --> 00:34:30,159
had a

00:34:27,839 --> 00:34:32,240
live stream last week me and michelle uh

00:34:30,159 --> 00:34:33,119
from michelle from australia i was gonna

00:34:32,240 --> 00:34:35,280
i don't know i was making that

00:34:33,119 --> 00:34:37,040
distinction but um we

00:34:35,280 --> 00:34:38,960
we built a twitch bot and the one thing

00:34:37,040 --> 00:34:40,560
i've noticed with things like obs so

00:34:38,960 --> 00:34:41,679
like right now we're leveraging obs to

00:34:40,560 --> 00:34:44,079
get everything on the screen

00:34:41,679 --> 00:34:45,359
at the moment is that it has a

00:34:44,079 --> 00:34:46,960
javascript runtime

00:34:45,359 --> 00:34:49,520
and i've been messing around with using

00:34:46,960 --> 00:34:52,079
like denno and js time

00:34:49,520 --> 00:34:53,359
inside of obs i haven't really published

00:34:52,079 --> 00:34:56,240
anything that works yet

00:34:53,359 --> 00:34:57,440
but i'm curious of things like we talked

00:34:56,240 --> 00:35:00,839
about typescript but what about

00:34:57,440 --> 00:35:02,160
things like deno will that be compatible

00:35:00,839 --> 00:35:04,640
um

00:35:02,160 --> 00:35:05,599
probably so dental is a whole different

00:35:04,640 --> 00:35:08,720
story because

00:35:05,599 --> 00:35:11,760
zeno is its own thing so

00:35:08,720 --> 00:35:12,640
vt is currently built on top of node.js

00:35:11,760 --> 00:35:14,400
apis so

00:35:12,640 --> 00:35:16,400
it's not going to be triple to get it

00:35:14,400 --> 00:35:18,560
running in deno okay well that's good to

00:35:16,400 --> 00:35:18,560
know

00:35:18,800 --> 00:35:22,320
all right so uh let's see what we can do

00:35:21,760 --> 00:35:26,560
next

00:35:22,320 --> 00:35:30,079
um i'm going to add a dependency now

00:35:26,560 --> 00:35:33,599
so let's say i want to use

00:35:30,079 --> 00:35:33,599
react right

00:35:34,160 --> 00:35:37,200
all right so i added react and react dom

00:35:36,800 --> 00:35:40,160
and

00:35:37,200 --> 00:35:40,880
uh so inside main js we probably want to

00:35:40,160 --> 00:35:45,359
change this to

00:35:40,880 --> 00:35:49,599
jsx because we're going to use some jsx

00:35:45,359 --> 00:35:53,440
so i'm going to say imporiant from react

00:35:49,599 --> 00:35:56,079
uh import

00:35:53,440 --> 00:35:58,800
yeah dom from random i think that's how

00:35:56,079 --> 00:36:02,720
it works

00:35:58,800 --> 00:36:06,079
so forgive me because i'm actually uh

00:36:02,720 --> 00:36:09,680
react dom dot

00:36:06,079 --> 00:36:11,119
render we all came to watch evan you

00:36:09,680 --> 00:36:14,880
write react

00:36:11,119 --> 00:36:19,920
yeah get element by the

00:36:14,880 --> 00:36:22,480
app maybe so that means we need to have

00:36:19,920 --> 00:36:24,960
something here so i'm going to say div

00:36:22,480 --> 00:36:24,960
tab

00:36:25,040 --> 00:36:29,680
and um so

00:36:28,400 --> 00:36:31,839
the the main thing i'm actually

00:36:29,680 --> 00:36:34,640
showcasing here is not really like

00:36:31,839 --> 00:36:35,520
uh react but we need a app right so

00:36:34,640 --> 00:36:39,760
function app

00:36:35,520 --> 00:36:39,760
return um

00:36:39,839 --> 00:36:44,960
h1 hello so let's see

00:36:45,680 --> 00:36:52,640
no of course

00:36:49,599 --> 00:36:55,040
uh because we changed it to main jsx

00:36:52,640 --> 00:36:56,880
yeah so i'm going to change it here all

00:36:55,040 --> 00:37:00,000
right so we got hello underwear

00:36:56,880 --> 00:37:01,839
so this is rendered by by react uh and

00:37:00,000 --> 00:37:03,280
as you can see jsx just kind of worked

00:37:01,839 --> 00:37:05,119
out of the box as well you didn't need

00:37:03,280 --> 00:37:08,640
to configure anything

00:37:05,119 --> 00:37:11,680
it kind of just worked um so

00:37:08,640 --> 00:37:16,480
same for uh

00:37:11,680 --> 00:37:16,480
like so if if you use tsx

00:37:16,960 --> 00:37:23,599
and let's just like export function app

00:37:20,640 --> 00:37:28,000
like this so remember you need react

00:37:23,599 --> 00:37:30,160
because we are using the vs16 transform

00:37:28,000 --> 00:37:31,680
and instead of that i'm going to say

00:37:30,160 --> 00:37:35,119
imports

00:37:31,680 --> 00:37:35,119
app from

00:37:35,200 --> 00:37:42,000
app and it works the same way

00:37:38,960 --> 00:37:45,839
all right so um

00:37:42,000 --> 00:37:47,920
so typescript jsx tsx

00:37:45,839 --> 00:37:50,000
works out of the box you can just import

00:37:47,920 --> 00:37:51,920
them and they just work

00:37:50,000 --> 00:37:53,440
uh you didn't even need to install

00:37:51,920 --> 00:37:56,480
typescript itself

00:37:53,440 --> 00:38:00,320
the assumption here is you

00:37:56,480 --> 00:38:02,880
will likely be doing uh type check

00:38:00,320 --> 00:38:04,160
and run so when you're developing your

00:38:02,880 --> 00:38:06,640
ide probably

00:38:04,160 --> 00:38:08,640
knows something right so uh say you can

00:38:06,640 --> 00:38:11,280
add a ts config here

00:38:08,640 --> 00:38:13,359
and your id will start linking these ts

00:38:11,280 --> 00:38:15,839
files and give you errors and warnings

00:38:13,359 --> 00:38:17,200
so feat itself doesn't care about any of

00:38:15,839 --> 00:38:19,599
the type checks

00:38:17,200 --> 00:38:21,200
all it does is transform the syntax into

00:38:19,599 --> 00:38:22,400
actual javascript that the browser can

00:38:21,200 --> 00:38:24,560
understand

00:38:22,400 --> 00:38:26,880
uh and it does that using es build so

00:38:24,560 --> 00:38:28,560
this is where we start to

00:38:26,880 --> 00:38:30,480
actually already leverage ds building

00:38:28,560 --> 00:38:32,720
two places up to this point the first

00:38:30,480 --> 00:38:36,160
is uh yes build is transforming these

00:38:32,720 --> 00:38:38,240
jsx and tsx files into playing js for us

00:38:36,160 --> 00:38:40,880
so uh for those who don't know what es

00:38:38,240 --> 00:38:43,680
build is uh it's a

00:38:40,880 --> 00:38:45,680
javascript build tool transpile tool

00:38:43,680 --> 00:38:47,920
that's written in go

00:38:45,680 --> 00:38:49,040
so it's written it's compiled to native

00:38:47,920 --> 00:38:51,839
binaries

00:38:49,040 --> 00:38:52,560
and it's extremely extremely fast and

00:38:51,839 --> 00:38:54,800
that was shipped

00:38:52,560 --> 00:38:56,480
pretty recently wasn't it uh it's

00:38:54,800 --> 00:38:58,320
actually been around for a while

00:38:56,480 --> 00:38:59,599
okay yeah maybe just made the

00:38:58,320 --> 00:39:03,280
newsletters recently

00:38:59,599 --> 00:39:04,640
okay yeah it i mean it takes a time for

00:39:03,280 --> 00:39:06,400
these kind of projects to mature because

00:39:04,640 --> 00:39:10,400
it's covering so much features but

00:39:06,400 --> 00:39:12,160
um but the basic idea here is um

00:39:10,400 --> 00:39:14,000
uh v when you install vh we already

00:39:12,160 --> 00:39:15,359
installed es build for you so you don't

00:39:14,000 --> 00:39:17,599
you didn't need to install anything

00:39:15,359 --> 00:39:18,000
extra to get these trans violations and

00:39:17,599 --> 00:39:21,040
this

00:39:18,000 --> 00:39:22,880
is at least 20 to 30 times faster than

00:39:21,040 --> 00:39:26,800
vanilla tsc

00:39:22,880 --> 00:39:29,920
um so psc will probably take like

00:39:26,800 --> 00:39:33,119
30 40 milliseconds to transpile

00:39:29,920 --> 00:39:37,200
a tsx file but with es build it's like

00:39:33,119 --> 00:39:39,920
one millisecond most of the time um

00:39:37,200 --> 00:39:42,320
and feed leverages that so imagine if

00:39:39,920 --> 00:39:42,960
you have a project with like 100 ts

00:39:42,320 --> 00:39:46,000
files

00:39:42,960 --> 00:39:47,839
uh so that kind of adds up right

00:39:46,000 --> 00:39:49,200
another aspect of this is when we

00:39:47,839 --> 00:39:50,720
started server here

00:39:49,200 --> 00:39:53,660
notice this thing here says new

00:39:50,720 --> 00:39:54,800
dependency found react and random

00:39:53,660 --> 00:39:57,920
[Music]

00:39:54,800 --> 00:40:00,400
if you are used to using react with like

00:39:57,920 --> 00:40:01,280
create react app or webpack uh you're

00:40:00,400 --> 00:40:03,920
kind of used to

00:40:01,280 --> 00:40:04,319
like doing like import react from react

00:40:03,920 --> 00:40:07,359
like

00:40:04,319 --> 00:40:08,800
this and it just works and sometimes we

00:40:07,359 --> 00:40:12,240
may even do things like

00:40:08,800 --> 00:40:15,200
you know named exports like this yeah

00:40:12,240 --> 00:40:18,160
right um but if you actually look at

00:40:15,200 --> 00:40:21,280
what the files react is shipping

00:40:18,160 --> 00:40:25,599
let's going to react here

00:40:21,280 --> 00:40:30,319
and look at the package json here uh

00:40:25,599 --> 00:40:32,560
it says main index.js so nfcs

00:40:30,319 --> 00:40:34,000
it says module.exports equals require

00:40:32,560 --> 00:40:36,880
blah blah blah and this is actually

00:40:34,000 --> 00:40:39,440
commonjs so react doesn't ship native vs

00:40:36,880 --> 00:40:43,280
modules it ships common js

00:40:39,440 --> 00:40:43,599
um ships common.js but we are able to

00:40:43,280 --> 00:40:46,640
just

00:40:43,599 --> 00:40:48,480
import it like an actual es module here

00:40:46,640 --> 00:40:49,680
so there's obviously something going on

00:40:48,480 --> 00:40:52,800
in the background

00:40:49,680 --> 00:40:54,240
uh webpack roll up you know if you use

00:40:52,800 --> 00:40:56,480
this with roll up you will need

00:40:54,240 --> 00:40:58,319
something like roller plug in common js

00:40:56,480 --> 00:41:00,079
yeah webpack does a lot of the interrupt

00:40:58,319 --> 00:41:03,760
behind the behind the scene but

00:41:00,079 --> 00:41:05,599
um how do we get to make react actually

00:41:03,760 --> 00:41:08,800
work in the browser so let's take a look

00:41:05,599 --> 00:41:08,800
at the network here

00:41:10,240 --> 00:41:14,960
uh oh god how do i

00:41:15,599 --> 00:41:23,359
i can't get to grab this part uh

00:41:18,640 --> 00:41:25,119
anyway so here's the react so um

00:41:23,359 --> 00:41:27,359
notice that we are getting this require

00:41:25,119 --> 00:41:30,319
react so this all this

00:41:27,359 --> 00:41:30,720
code is actually generated by uh es bill

00:41:30,319 --> 00:41:33,760
so

00:41:30,720 --> 00:41:36,800
um when we restart the server

00:41:33,760 --> 00:41:36,800
if i say uh

00:41:37,040 --> 00:41:43,200
feed force there is a

00:41:41,200 --> 00:41:44,960
thing here says what's the uh the force

00:41:43,200 --> 00:41:47,040
command the force means

00:41:44,960 --> 00:41:48,079
uh ignore the dependency cache and

00:41:47,040 --> 00:41:50,319
reforce

00:41:48,079 --> 00:41:51,359
process all the dependencies okay

00:41:50,319 --> 00:41:53,920
interesting yeah so

00:41:51,359 --> 00:41:54,560
uh if you don't if you don't do that it

00:41:53,920 --> 00:41:56,640
won't

00:41:54,560 --> 00:41:58,000
it will check some hash and if the hash

00:41:56,640 --> 00:41:59,839
matches you won't need to do anything

00:41:58,000 --> 00:42:03,119
when you restart the server

00:41:59,839 --> 00:42:06,960
but if you've passed the force it will

00:42:03,119 --> 00:42:06,960
you know you just said past the force

00:42:07,040 --> 00:42:12,400
yeah um so it will detect it

00:42:10,079 --> 00:42:13,920
so what v it is doing here is it will

00:42:12,400 --> 00:42:16,400
look at your source code notice you are

00:42:13,920 --> 00:42:18,240
relying on reaction via dom and then it

00:42:16,400 --> 00:42:20,640
will check react and rear dom and notice

00:42:18,240 --> 00:42:22,720
they are not actually es modules

00:42:20,640 --> 00:42:24,079
uh which means we need to do something

00:42:22,720 --> 00:42:27,839
about them so

00:42:24,079 --> 00:42:30,560
we will use es build to process them

00:42:27,839 --> 00:42:32,240
pre-bundle them into something that

00:42:30,560 --> 00:42:34,240
actually works in the browser as native

00:42:32,240 --> 00:42:36,720
vs modules and we have some

00:42:34,240 --> 00:42:39,520
also smart interrupts so that you can

00:42:36,720 --> 00:42:43,119
use named exports even though

00:42:39,520 --> 00:42:46,160
technically a common js

00:42:43,119 --> 00:42:48,720
model transform to yes module like only

00:42:46,160 --> 00:42:50,319
has a single default export but like we

00:42:48,720 --> 00:42:54,240
kind of make that work

00:42:50,319 --> 00:42:57,359
um with some some runtime interrupt

00:42:54,240 --> 00:42:59,359
um and the benefit of this is kind of

00:42:57,359 --> 00:43:02,480
twofold the first is uh you make

00:42:59,359 --> 00:43:05,680
common js modules work

00:43:02,480 --> 00:43:06,160
as native es modules uh another benefit

00:43:05,680 --> 00:43:08,079
of this

00:43:06,160 --> 00:43:09,200
is say you have something like low dash

00:43:08,079 --> 00:43:12,319
es

00:43:09,200 --> 00:43:15,520
uh low.gs has like 600 internal modules

00:43:12,319 --> 00:43:17,359
when you import es uh

00:43:15,520 --> 00:43:20,400
without any optimization you are loading

00:43:17,359 --> 00:43:22,720
all those six 600 modules

00:43:20,400 --> 00:43:24,640
here so if you look at the network tab

00:43:22,720 --> 00:43:26,400
when you load

00:43:24,640 --> 00:43:28,079
maybe i can just do that you know yarn

00:43:26,400 --> 00:43:31,760
add low dash

00:43:28,079 --> 00:43:37,520
yes and i'm gonna say uh

00:43:31,760 --> 00:43:37,520
import from low dash yes

00:43:38,079 --> 00:43:41,119
uh well that didn't actually result in a

00:43:40,640 --> 00:43:43,920
lot of

00:43:41,119 --> 00:43:45,040
requests because our server the veed

00:43:43,920 --> 00:43:47,760
server smartly

00:43:45,040 --> 00:43:49,760
detected loads yes and chunked into a

00:43:47,760 --> 00:43:54,240
single file on the fly

00:43:49,760 --> 00:43:56,319
so uh if if we didn't do that you'll

00:43:54,240 --> 00:43:58,240
this will you will see like 600 requests

00:43:56,319 --> 00:44:00,079
here and it's gonna jam the browser

00:43:58,240 --> 00:44:01,599
even though it's it's relatively fast

00:44:00,079 --> 00:44:02,319
it's like there's still a lot of

00:44:01,599 --> 00:44:04,319
overhead

00:44:02,319 --> 00:44:05,359
when you process the http request right

00:44:04,319 --> 00:44:07,040
so ideally

00:44:05,359 --> 00:44:08,480
even during dev we still want to reduce

00:44:07,040 --> 00:44:11,280
number of requests but

00:44:08,480 --> 00:44:12,160
veed kind of does this for you so that

00:44:11,280 --> 00:44:15,359
even if you

00:44:12,160 --> 00:44:17,119
import a dependency with even a thousand

00:44:15,359 --> 00:44:19,359
internal modules

00:44:17,119 --> 00:44:20,319
we still kind of chunk it into a single

00:44:19,359 --> 00:44:22,640
file

00:44:20,319 --> 00:44:23,839
yeah and because we do that with es

00:44:22,640 --> 00:44:26,640
build

00:44:23,839 --> 00:44:27,200
it's so fast like how how much time it

00:44:26,640 --> 00:44:30,480
did this

00:44:27,200 --> 00:44:31,520
within like a second right less than a

00:44:30,480 --> 00:44:35,839
second

00:44:31,520 --> 00:44:37,280
but if you do this with say uh something

00:44:35,839 --> 00:44:39,359
so this this comes into play like

00:44:37,280 --> 00:44:43,119
because um even with

00:44:39,359 --> 00:44:46,319
huge dependencies maybe like uh

00:44:43,119 --> 00:44:50,160
you're at material

00:44:46,319 --> 00:44:52,240
ui core

00:44:50,160 --> 00:44:52,980
so this is going to be pretty intense

00:44:52,240 --> 00:44:54,480
right uh

00:44:52,980 --> 00:44:58,640
[Music]

00:44:54,480 --> 00:44:58,640
from material ui core

00:44:59,440 --> 00:45:04,480
so we finished that uh we imported

00:45:02,079 --> 00:45:06,400
materia core uh

00:45:04,480 --> 00:45:07,680
and still it takes less than a second

00:45:06,400 --> 00:45:11,200
granted this is

00:45:07,680 --> 00:45:14,720
i'm running on an m1 arm mac which is

00:45:11,200 --> 00:45:17,040
insanely fast but still like uh the same

00:45:14,720 --> 00:45:17,440
thing if you process it with say webpack

00:45:17,040 --> 00:45:19,280
or

00:45:17,440 --> 00:45:21,920
rollup you probably have to wait a few

00:45:19,280 --> 00:45:25,440
seconds uh

00:45:21,920 --> 00:45:27,520
and so this so this is where es build

00:45:25,440 --> 00:45:29,440
really makes this process just like

00:45:27,520 --> 00:45:31,040
insanely fast and

00:45:29,440 --> 00:45:32,480
some of the noticeable differences like

00:45:31,040 --> 00:45:34,560
i've tested this is

00:45:32,480 --> 00:45:36,720
tested this on a real world app using

00:45:34,560 --> 00:45:39,200
react and material ui and bunch of other

00:45:36,720 --> 00:45:41,200
dependencies

00:45:39,200 --> 00:45:45,839
and i tried to pre-bundle with roll-up

00:45:41,200 --> 00:45:47,119
and took me 28 seconds on an m1 mac

00:45:45,839 --> 00:45:49,839
and we've got a curiosity are you on

00:45:47,119 --> 00:45:51,839
amazon mac right now yes

00:45:49,839 --> 00:45:53,200
yeah yeah there's speculation in the the

00:45:51,839 --> 00:45:56,240
chat right now

00:45:53,200 --> 00:45:59,200
yeah so after we switched v

00:45:56,240 --> 00:46:01,599
to us use yes build for this process it

00:45:59,200 --> 00:46:04,480
took 1.5 seconds

00:46:01,599 --> 00:46:06,880
uh so that's like 20 times faster

00:46:04,480 --> 00:46:10,160
startup time

00:46:06,880 --> 00:46:12,160
and because every time you detect a new

00:46:10,160 --> 00:46:14,079
import or you add new dependencies the

00:46:12,160 --> 00:46:15,599
cache will likely invalidate so you kind

00:46:14,079 --> 00:46:19,040
of have to do this

00:46:15,599 --> 00:46:20,960
uh relatively frequently so having es

00:46:19,040 --> 00:46:22,560
build handle this is just like lifesaver

00:46:20,960 --> 00:46:26,800
because it's like cut down the time

00:46:22,560 --> 00:46:30,079
so much most of the time

00:46:26,800 --> 00:46:31,920
with with m1 plus yes phil like i'm

00:46:30,079 --> 00:46:33,359
i'm just i'll start getting patient

00:46:31,920 --> 00:46:35,359
whenever i start a project and i have to

00:46:33,359 --> 00:46:38,480
wait more than one second

00:46:35,359 --> 00:46:42,240
uh you're right yeah i'm spoiled

00:46:38,480 --> 00:46:45,200
honestly uh and

00:46:42,240 --> 00:46:45,760
also note like yes bill uh currently yes

00:46:45,200 --> 00:46:49,599
bill still

00:46:45,760 --> 00:46:52,160
only ships the uh intel binary

00:46:49,599 --> 00:46:53,040
uh it doesn't have uh apple silicon

00:46:52,160 --> 00:46:55,839
native

00:46:53,040 --> 00:46:57,920
binary of es built yet i think the

00:46:55,839 --> 00:46:59,680
latest version of go does support it but

00:46:57,920 --> 00:47:01,680
yes build hasn't really started shipping

00:46:59,680 --> 00:47:04,079
the arm native

00:47:01,680 --> 00:47:05,520
binaries yet so we are actually running

00:47:04,079 --> 00:47:09,119
es field on ml mac

00:47:05,520 --> 00:47:11,359
through rosetta 2. so imagine

00:47:09,119 --> 00:47:12,960
it can be another like 20 to 30 percent

00:47:11,359 --> 00:47:17,359
faster once we have

00:47:12,960 --> 00:47:17,359
native arm mac yes build binaries

00:47:17,760 --> 00:47:22,000
so yeah so this is part of the where the

00:47:21,040 --> 00:47:25,280
uh this this

00:47:22,000 --> 00:47:26,800
feed the fastness comes into play when

00:47:25,280 --> 00:47:27,920
you when you notice the difference when

00:47:26,800 --> 00:47:30,160
you have um

00:47:27,920 --> 00:47:31,680
not just for a simple demo project when

00:47:30,160 --> 00:47:33,119
you have a real project with like

00:47:31,680 --> 00:47:35,520
hundreds of dependencies

00:47:33,119 --> 00:47:36,559
this is start to be a very very

00:47:35,520 --> 00:47:38,559
significant

00:47:36,559 --> 00:47:40,000
very very significant difference in

00:47:38,559 --> 00:47:43,520
terms of

00:47:40,000 --> 00:47:45,760
the dx right so if you have to wait like

00:47:43,520 --> 00:47:47,839
half a minute or a whole minute before

00:47:45,760 --> 00:47:50,079
every time you spin up the dev server

00:47:47,839 --> 00:47:52,640
i'm going to be really reluctant to even

00:47:50,079 --> 00:47:56,400
think about working on that project

00:47:52,640 --> 00:47:57,839
right and um this kind of helps me with

00:47:56,400 --> 00:47:58,400
debugging too because now like every

00:47:57,839 --> 00:48:00,480
time

00:47:58,400 --> 00:48:01,920
someone reports a new thing i clone the

00:48:00,480 --> 00:48:03,520
reproduction

00:48:01,920 --> 00:48:05,440
it almost always starts instantly i

00:48:03,520 --> 00:48:07,920
don't have to like wait

00:48:05,440 --> 00:48:10,000
so uh it just makes debugging feed

00:48:07,920 --> 00:48:12,720
itself also much more pleasant

00:48:10,000 --> 00:48:13,599
yep yeah i mean i've got some projects

00:48:12,720 --> 00:48:15,920
that do

00:48:13,599 --> 00:48:17,599
actually bw live my regular site

00:48:15,920 --> 00:48:19,280
actually takes quite some time to

00:48:17,599 --> 00:48:21,680
to build so i won't drop any uh

00:48:19,280 --> 00:48:23,359
frameworks any names down but uh

00:48:21,680 --> 00:48:24,880
it's got some issues uh i do have some

00:48:23,359 --> 00:48:28,000
questions from the chat though

00:48:24,880 --> 00:48:29,119
um what about a production and is v

00:48:28,000 --> 00:48:31,200
ready for production i know

00:48:29,119 --> 00:48:34,400
there's a beta flag on the 2.0 right now

00:48:31,200 --> 00:48:37,280
on the yeah the repo

00:48:34,400 --> 00:48:38,640
so we are actually pretty stable for the

00:48:37,280 --> 00:48:42,319
past few weeks

00:48:38,640 --> 00:48:45,839
no major bugs left really so there are

00:48:42,319 --> 00:48:47,920
a few small edge cases if you have some

00:48:45,839 --> 00:48:49,920
particularly tricky dependencies where

00:48:47,920 --> 00:48:51,839
it's like a mix of es modules in common

00:48:49,920 --> 00:48:55,520
gs there might be small

00:48:51,839 --> 00:48:58,240
issues um but for the most part

00:48:55,520 --> 00:48:59,760
we already have close to 30 000

00:48:58,240 --> 00:49:03,280
downloads per week

00:48:59,760 --> 00:49:04,720
and uh the latest field versions has

00:49:03,280 --> 00:49:06,400
been pretty stable

00:49:04,720 --> 00:49:07,760
so i think we're going out of beta

00:49:06,400 --> 00:49:10,400
pretty soon

00:49:07,760 --> 00:49:10,400
and um

00:49:11,440 --> 00:49:15,359
yeah one thing i kind of want to talk

00:49:13,359 --> 00:49:18,000
about is the production story is like

00:49:15,359 --> 00:49:22,079
when you want to shift to production

00:49:18,000 --> 00:49:22,079
uh let's add a script here

00:49:22,640 --> 00:49:26,480
build feed build

00:49:27,280 --> 00:49:31,920
so that is literally it you just run

00:49:30,400 --> 00:49:35,359
your own build so

00:49:31,920 --> 00:49:38,640
anything that you can have working

00:49:35,359 --> 00:49:39,280
in depth theoretically uh we guarantee

00:49:38,640 --> 00:49:41,920
that

00:49:39,280 --> 00:49:43,599
we we we guarantee that it will work uh

00:49:41,920 --> 00:49:45,599
in build as well so if

00:49:43,599 --> 00:49:47,119
it doesn't work as expected then it's a

00:49:45,599 --> 00:49:51,040
bug we'll fix it but

00:49:47,119 --> 00:49:53,760
you know uh the idea is uh

00:49:51,040 --> 00:49:53,760
anything that

00:49:54,079 --> 00:50:01,920
so we build it and we also give you a

00:49:58,559 --> 00:50:04,319
neat command called feed

00:50:01,920 --> 00:50:04,319
preview

00:50:05,280 --> 00:50:10,839
which will just serve this directory

00:50:08,720 --> 00:50:12,400
that we just built which is the this

00:50:10,839 --> 00:50:15,280
directory

00:50:12,400 --> 00:50:17,599
and it'll serve it in production so this

00:50:15,280 --> 00:50:19,200
is the production bill

00:50:17,599 --> 00:50:21,040
we do a lot of interesting stuff in

00:50:19,200 --> 00:50:23,280
production

00:50:21,040 --> 00:50:25,599
for the production build and so in the

00:50:23,280 --> 00:50:27,760
features section or docs here

00:50:25,599 --> 00:50:30,079
there is a dedicated section here says

00:50:27,760 --> 00:50:33,359
uh build optimizations

00:50:30,079 --> 00:50:36,400
um the native target the default target

00:50:33,359 --> 00:50:37,119
build target for vt is browsers that

00:50:36,400 --> 00:50:39,440
support

00:50:37,119 --> 00:50:40,880
native vs modules so by default it

00:50:39,440 --> 00:50:43,200
doesn't support ie11

00:50:40,880 --> 00:50:45,839
so this is something to keep in mind uh

00:50:43,200 --> 00:50:47,920
veet is modern by default but we do have

00:50:45,839 --> 00:50:50,559
opt-in support for legacy browsers

00:50:47,920 --> 00:50:52,720
which i'll talk about in a bit but if

00:50:50,559 --> 00:50:55,359
you're targeting modern only

00:50:52,720 --> 00:50:56,720
obviously you don't need to do expensive

00:50:55,359 --> 00:50:58,720
uh babel

00:50:56,720 --> 00:51:00,960
battle preset m transformations which

00:50:58,720 --> 00:51:03,920
makes the build faster as well

00:51:00,960 --> 00:51:05,200
we automatically polyfill dynamic import

00:51:03,920 --> 00:51:07,880
so that it works

00:51:05,200 --> 00:51:10,079
uh there is actually a support

00:51:07,880 --> 00:51:12,800
discrepancy between

00:51:10,079 --> 00:51:15,040
native es modules and native es modules

00:51:12,800 --> 00:51:16,559
dynamic import so we powder fill that to

00:51:15,040 --> 00:51:19,839
just make it even

00:51:16,559 --> 00:51:21,760
um we have css code splitting so if you

00:51:19,839 --> 00:51:23,280
all the code splitting in a v project

00:51:21,760 --> 00:51:27,040
can be done with just

00:51:23,280 --> 00:51:29,280
yes module dynamic import so

00:51:27,040 --> 00:51:30,559
we because we treat css as part of the

00:51:29,280 --> 00:51:33,280
module graph as well

00:51:30,559 --> 00:51:34,160
we can code split css so if you have an

00:51:33,280 --> 00:51:37,040
async

00:51:34,160 --> 00:51:38,880
chunk a lazy route all the css imported

00:51:37,040 --> 00:51:40,160
by that route is split into a separate

00:51:38,880 --> 00:51:43,839
file

00:51:40,160 --> 00:51:45,359
and uh we also when you when that chunk

00:51:43,839 --> 00:51:48,160
is being requested we fetch the

00:51:45,359 --> 00:51:51,200
javascript and the css in parallel

00:51:48,160 --> 00:51:52,880
yeah then ensure the css is loaded

00:51:51,200 --> 00:51:54,319
before the javascript module is

00:51:52,880 --> 00:51:56,800
evaluated

00:51:54,319 --> 00:51:58,079
so you don't get the flash of unstyled

00:51:56,800 --> 00:52:00,400
content

00:51:58,079 --> 00:52:02,000
stuff so this is all done for you out of

00:52:00,400 --> 00:52:02,839
the box you don't need to configure

00:52:02,000 --> 00:52:05,520
anything

00:52:02,839 --> 00:52:06,559
uh if you want to get the same working

00:52:05,520 --> 00:52:08,960
with webpack you

00:52:06,559 --> 00:52:10,160
it's another story like you have to look

00:52:08,960 --> 00:52:13,200
into css

00:52:10,160 --> 00:52:15,119
mini css distract plugging

00:52:13,200 --> 00:52:16,400
all this stuff the question that's come

00:52:15,119 --> 00:52:18,079
up quite a few times in the chat and i

00:52:16,400 --> 00:52:20,400
wasn't sure if it was relevant but um

00:52:18,079 --> 00:52:21,200
server side rendering without the speed

00:52:20,400 --> 00:52:23,040
that this

00:52:21,200 --> 00:52:24,559
does this i can imagine surface side

00:52:23,040 --> 00:52:26,000
rendering being a really good story for

00:52:24,559 --> 00:52:28,319
v

00:52:26,000 --> 00:52:29,520
so v has currently experimental

00:52:28,319 --> 00:52:33,520
server-side rendering

00:52:29,520 --> 00:52:35,200
uh so yes i can um

00:52:33,520 --> 00:52:36,640
setting up it from scratch can be a bit

00:52:35,200 --> 00:52:40,079
involved because

00:52:36,640 --> 00:52:43,440
uh because the idea here is um

00:52:40,079 --> 00:52:44,640
but but the idea here so let's take a

00:52:43,440 --> 00:52:45,599
step back and think about what servers

00:52:44,640 --> 00:52:48,000
are rendering

00:52:45,599 --> 00:52:49,520
what we need with a bundler to get

00:52:48,000 --> 00:52:51,359
server side rendering to work

00:52:49,520 --> 00:52:53,839
right the idea is you want your code to

00:52:51,359 --> 00:52:57,839
be running in node.js as well

00:52:53,839 --> 00:53:02,079
but we are writing we're writing

00:52:57,839 --> 00:53:04,720
code that's using esm and um

00:53:02,079 --> 00:53:05,839
if you are not using like the latest

00:53:04,720 --> 00:53:09,119
latest version of

00:53:05,839 --> 00:53:11,440
node module latest version of node.js

00:53:09,119 --> 00:53:14,880
with native es module support

00:53:11,440 --> 00:53:17,520
um this code won't run right because

00:53:14,880 --> 00:53:18,800
uh previous versions of node.js expects

00:53:17,520 --> 00:53:22,480
commonjs

00:53:18,800 --> 00:53:24,240
uh and um what we're doing here is we

00:53:22,480 --> 00:53:26,800
provide a programmatic api

00:53:24,240 --> 00:53:28,160
called uh ssr load module so this is

00:53:26,800 --> 00:53:30,079
inspired by

00:53:28,160 --> 00:53:32,000
some of the work that rich harris is

00:53:30,079 --> 00:53:36,079
doing in spell kit

00:53:32,000 --> 00:53:39,280
uh and uh the idea here is

00:53:36,079 --> 00:53:41,200
you can use feet as a middleware inside

00:53:39,280 --> 00:53:42,480
an existing node.js server so

00:53:41,200 --> 00:53:43,839
if you're doing server side rendering

00:53:42,480 --> 00:53:44,720
you'll likely want to control the server

00:53:43,839 --> 00:53:47,119
yourself right

00:53:44,720 --> 00:53:50,400
so you can use say express server run

00:53:47,119 --> 00:53:54,440
feed as a middleware inside of it

00:53:50,400 --> 00:53:58,160
and then uh use this method called

00:53:54,440 --> 00:53:58,160
feed.ssr load module

00:53:59,200 --> 00:54:03,280
and load it your server load your server

00:54:01,359 --> 00:54:07,040
entry like this

00:54:03,280 --> 00:54:08,559
and that's pretty much it your server

00:54:07,040 --> 00:54:11,040
entry

00:54:08,559 --> 00:54:13,359
runs in node.js and it can use the same

00:54:11,040 --> 00:54:14,400
es import syntax to load rest of your

00:54:13,359 --> 00:54:15,920
application

00:54:14,400 --> 00:54:18,160
obviously you need to make sure you

00:54:15,920 --> 00:54:18,880
write your code that is node compatible

00:54:18,160 --> 00:54:22,800
but

00:54:18,880 --> 00:54:25,280
um you can use es module syntax

00:54:22,800 --> 00:54:25,920
and veet will transform these syntax on

00:54:25,280 --> 00:54:27,440
the fly

00:54:25,920 --> 00:54:30,400
into something that's compatible to

00:54:27,440 --> 00:54:33,920
commonjs so it can run in node.js

00:54:30,400 --> 00:54:34,800
and um and what we typically do in a

00:54:33,920 --> 00:54:38,240
webpack based

00:54:34,800 --> 00:54:39,440
ssr setup is we actually do a whole ssr

00:54:38,240 --> 00:54:42,559
bundle

00:54:39,440 --> 00:54:44,240
uh as you develop so it

00:54:42,559 --> 00:54:46,319
uses webpack to bundle your whole

00:54:44,240 --> 00:54:48,240
application and output it as common.js

00:54:46,319 --> 00:54:50,079
so that it runs in node.js

00:54:48,240 --> 00:54:52,000
the the downside of this is obviously

00:54:50,079 --> 00:54:55,760
every time you edit a file

00:54:52,000 --> 00:54:58,400
you are rebundling the whole uh

00:54:55,760 --> 00:54:59,119
application for commonjs and that is

00:54:58,400 --> 00:55:03,040
slow

00:54:59,119 --> 00:55:05,119
right uh with vt when you load this

00:55:03,040 --> 00:55:06,640
all these modules are similarly cached

00:55:05,119 --> 00:55:07,920
individually like

00:55:06,640 --> 00:55:09,680
just like in the browser right one of

00:55:07,920 --> 00:55:10,240
the reasons we want to leverage native

00:55:09,680 --> 00:55:12,480
esm

00:55:10,240 --> 00:55:13,920
is because each module is now cached

00:55:12,480 --> 00:55:15,920
individually so

00:55:13,920 --> 00:55:17,520
we do hot module replacement we're only

00:55:15,920 --> 00:55:20,079
invalidating

00:55:17,520 --> 00:55:21,920
the specific modules that's being edited

00:55:20,079 --> 00:55:23,040
similarly for the server side rendering

00:55:21,920 --> 00:55:26,240
story

00:55:23,040 --> 00:55:29,760
we cache all these modules

00:55:26,240 --> 00:55:31,680
that's specifically instantiated for ssr

00:55:29,760 --> 00:55:32,880
in our internal module graph and when

00:55:31,680 --> 00:55:35,280
you edit a file

00:55:32,880 --> 00:55:36,400
we only invalidate the certain modules

00:55:35,280 --> 00:55:38,319
that's affected by this

00:55:36,400 --> 00:55:40,160
specific edit so kind of you can kind of

00:55:38,319 --> 00:55:41,680
think of it as hot module replacement

00:55:40,160 --> 00:55:44,480
for server side rendering

00:55:41,680 --> 00:55:45,440
during development so you never rebundle

00:55:44,480 --> 00:55:49,119
your whole app

00:55:45,440 --> 00:55:52,480
also feet will smartly externalize

00:55:49,119 --> 00:55:55,760
dependencies that ships uh

00:55:52,480 --> 00:55:56,480
common.js for example uh if you use fuel

00:55:55,760 --> 00:55:59,359
or react

00:55:56,480 --> 00:56:01,520
right uh react is already common js

00:55:59,359 --> 00:56:03,119
right so if you use react during service

00:56:01,520 --> 00:56:05,040
rendering you just require it you don't

00:56:03,119 --> 00:56:07,359
want to say like bundle it

00:56:05,040 --> 00:56:09,839
process it that's unnecessary because

00:56:07,359 --> 00:56:12,000
react shifts as comes as common genes

00:56:09,839 --> 00:56:14,880
so v12 detect all these dependencies

00:56:12,000 --> 00:56:17,440
automatically externalize them

00:56:14,880 --> 00:56:19,359
and uh when you import react it just

00:56:17,440 --> 00:56:20,640
it's actually just calling require react

00:56:19,359 --> 00:56:24,160
under the hood

00:56:20,640 --> 00:56:25,839
so you don't pay the cost of

00:56:24,160 --> 00:56:28,480
like processing right as part of your

00:56:25,839 --> 00:56:30,160
bundle uh on every change

00:56:28,480 --> 00:56:32,319
um and a lot of this is done

00:56:30,160 --> 00:56:35,599
automatically and we have this guide

00:56:32,319 --> 00:56:38,240
for server side rendering so um

00:56:35,599 --> 00:56:39,839
if you go to our github repo we also

00:56:38,240 --> 00:56:44,079
have uh

00:56:39,839 --> 00:56:45,680
actually i can probably show here

00:56:44,079 --> 00:56:47,760
so what you were just explaining does

00:56:45,680 --> 00:56:50,400
that also fall in line with the context

00:56:47,760 --> 00:56:52,079
of incremental builds

00:56:50,400 --> 00:56:54,000
uh it's different from incremental

00:56:52,079 --> 00:56:56,319
builds so adults are still

00:56:54,000 --> 00:56:58,480
full because uh incremental bills are a

00:56:56,319 --> 00:57:00,720
lot more uh

00:56:58,480 --> 00:57:02,400
difficult this is mostly focused on the

00:57:00,720 --> 00:57:03,280
development experience like when you're

00:57:02,400 --> 00:57:05,839
developing

00:57:03,280 --> 00:57:06,480
okay gotcha yeah and then real quick uh

00:57:05,839 --> 00:57:08,880
time check

00:57:06,480 --> 00:57:09,920
i know we only booked uh this this time

00:57:08,880 --> 00:57:11,839
for an hour but

00:57:09,920 --> 00:57:13,200
okay i'm good to keep going if you want

00:57:11,839 --> 00:57:14,000
to keep going if you want to finish some

00:57:13,200 --> 00:57:16,240
thoughts

00:57:14,000 --> 00:57:17,280
um it seems like the chat is really

00:57:16,240 --> 00:57:19,680
loving this so far

00:57:17,280 --> 00:57:21,440
getting the sort of hands-on experience

00:57:19,680 --> 00:57:24,400
and looking over your shoulder

00:57:21,440 --> 00:57:26,079
so cool so uh yeah so if you're

00:57:24,400 --> 00:57:28,400
interested in server-side rendering with

00:57:26,079 --> 00:57:29,119
these check out the the github repo so

00:57:28,400 --> 00:57:30,640
we have this

00:57:29,119 --> 00:57:32,960
pretty comprehensive playground

00:57:30,640 --> 00:57:36,799
directory in the source code

00:57:32,960 --> 00:57:38,799
where it has these demo playground of

00:57:36,799 --> 00:57:41,359
all the major features

00:57:38,799 --> 00:57:42,640
and these are two fully working

00:57:41,359 --> 00:57:46,000
server-side rendering

00:57:42,640 --> 00:57:49,280
examples with vue and react

00:57:46,000 --> 00:57:54,480
uh so if you want to try them out

00:57:49,280 --> 00:57:56,079
just use these as references um cool so

00:57:54,480 --> 00:57:58,319
um

00:57:56,079 --> 00:58:01,280
okay so of all this i uh there's one

00:57:58,319 --> 00:58:02,799
thing i still haven't really mentioned

00:58:01,280 --> 00:58:05,760
up to this point which is hot module

00:58:02,799 --> 00:58:08,559
replacement so um

00:58:05,760 --> 00:58:09,119
i'm going to just create a new one say

00:58:08,559 --> 00:58:13,220
cva

00:58:09,119 --> 00:58:14,480
is my local alias for create veed app

00:58:13,220 --> 00:58:17,760
[Applause]

00:58:14,480 --> 00:58:18,400
feed view demo so our create so when you

00:58:17,760 --> 00:58:21,599
run

00:58:18,400 --> 00:58:24,559
npm edit add feed js slash

00:58:21,599 --> 00:58:25,119
app this is also the what you'll you'll

00:58:24,559 --> 00:58:28,799
see

00:58:25,119 --> 00:58:31,200
so it will run the vjs create app

00:58:28,799 --> 00:58:31,920
application on the fly and you can pick

00:58:31,200 --> 00:58:34,400
some of these

00:58:31,920 --> 00:58:36,480
existing templates that you can go with

00:58:34,400 --> 00:58:39,839
right so i'm going to just go with the

00:58:36,480 --> 00:58:43,520
basic view template here uh

00:58:39,839 --> 00:58:45,839
see each view demo

00:58:43,520 --> 00:58:46,640
i'm going to just use my locally linked

00:58:45,839 --> 00:58:50,000
feed

00:58:46,640 --> 00:58:53,920
install the dependencies and i

00:58:50,000 --> 00:58:59,040
get so this is a

00:58:53,920 --> 00:58:59,040
v3 app that's running on vt um

00:58:59,440 --> 00:59:05,839
let me open this in code

00:59:07,040 --> 00:59:10,720
so this is very standard if you've

00:59:08,960 --> 00:59:12,720
worked with uci before

00:59:10,720 --> 00:59:14,400
this won't feel right at home right most

00:59:12,720 --> 00:59:18,400
of the stuff is the same

00:59:14,400 --> 00:59:22,160
um so i obviously if i edit something

00:59:18,400 --> 00:59:24,240
i'm going to hit the counter

00:59:22,160 --> 00:59:26,490
just to show that the hmr doesn't

00:59:24,240 --> 00:59:28,319
actually blow the state away

00:59:26,490 --> 00:59:32,079
[Music]

00:59:28,319 --> 00:59:35,359
right and hmr

00:59:32,079 --> 00:59:35,680
is really really fast so the idea here

00:59:35,359 --> 00:59:37,839
is

00:59:35,680 --> 00:59:38,880
um if you're working on a large

00:59:37,839 --> 00:59:42,160
application

00:59:38,880 --> 00:59:45,920
right reloading the page on every edit

00:59:42,160 --> 00:59:46,960
is obviously not optimal especially say

00:59:45,920 --> 00:59:49,359
you have some

00:59:46,960 --> 00:59:50,880
page state where you're like i want to

00:59:49,359 --> 00:59:54,319
see how this drop down

00:59:50,880 --> 00:59:56,160
look like uh when i'm tweaking the logic

00:59:54,319 --> 00:59:57,839
or tweaking the style you don't want to

00:59:56,160 --> 01:00:00,000
have the whole application reload and

00:59:57,839 --> 01:00:03,119
then you have to reopen the drop down

01:00:00,000 --> 01:00:07,200
every time so hot module replacement is

01:00:03,119 --> 01:00:10,240
uh one thing i believe that sort of um

01:00:07,200 --> 01:00:15,040
it decouples the feedback

01:00:10,240 --> 01:00:18,160
speed from the size of your application

01:00:15,040 --> 01:00:20,000
which is again like this whole idea of

01:00:18,160 --> 01:00:22,000
making things faster is because

01:00:20,000 --> 01:00:23,680
personally as a as a developer myself

01:00:22,000 --> 01:00:25,040
whenever i'm working on something if

01:00:23,680 --> 01:00:28,480
if i know something is going to take a

01:00:25,040 --> 01:00:30,799
long time i will be reluctant to do it

01:00:28,480 --> 01:00:31,920
it just creates this friction just makes

01:00:30,799 --> 01:00:34,640
you less

01:00:31,920 --> 01:00:35,520
likely to do something it makes it makes

01:00:34,640 --> 01:00:38,000
you enjoy

01:00:35,520 --> 01:00:40,000
your work less right so if everything is

01:00:38,000 --> 01:00:42,160
snappy and fast you're just

01:00:40,000 --> 01:00:43,599
you're a happier developer and happier

01:00:42,160 --> 01:00:45,359
developers are more productive

01:00:43,599 --> 01:00:48,640
developers that's what i believe

01:00:45,359 --> 01:00:50,720
right so um and how to make developers

01:00:48,640 --> 01:00:54,240
happy make their tools fast

01:00:50,720 --> 01:00:56,799
um so uh so that that's the whole

01:00:54,240 --> 01:00:58,960
premise right so um here

01:00:56,799 --> 01:01:00,079
if we take a higher level look at what

01:00:58,960 --> 01:01:02,799
feed is uh

01:01:00,079 --> 01:01:04,640
trying to do here uh why don't we just

01:01:02,799 --> 01:01:08,240
use yes build for everything

01:01:04,640 --> 01:01:10,640
if it's so fast the the thing is

01:01:08,240 --> 01:01:12,319
even if es build is really fast uh you

01:01:10,640 --> 01:01:14,400
probably don't want to

01:01:12,319 --> 01:01:15,440
rebundle your whole thing on every

01:01:14,400 --> 01:01:19,280
single edit

01:01:15,440 --> 01:01:21,440
right uh because even it's fast if

01:01:19,280 --> 01:01:23,200
it's going to get slower slower the size

01:01:21,440 --> 01:01:24,480
of your application grows the idea is i

01:01:23,200 --> 01:01:26,400
want to decouple

01:01:24,480 --> 01:01:27,920
the added feedback from the total

01:01:26,400 --> 01:01:29,599
seizure application

01:01:27,920 --> 01:01:31,119
which is why we need hot hot module

01:01:29,599 --> 01:01:34,319
replacement but

01:01:31,119 --> 01:01:36,000
the the the downside the the challenge

01:01:34,319 --> 01:01:37,520
that we've had in the past is like say

01:01:36,000 --> 01:01:40,799
with webpack

01:01:37,520 --> 01:01:41,440
i don't know why but in practice we've

01:01:40,799 --> 01:01:43,040
noticed that

01:01:41,440 --> 01:01:46,000
webpack's hot module replacement

01:01:43,040 --> 01:01:47,520
performance just degrades as the size of

01:01:46,000 --> 01:01:49,760
your application grows

01:01:47,520 --> 01:01:50,640
right technically i mean theoretically

01:01:49,760 --> 01:01:53,920
it shouldn't

01:01:50,640 --> 01:01:56,799
but that's what's happening and um say

01:01:53,920 --> 01:01:58,319
in a large web pack application you even

01:01:56,799 --> 01:02:00,640
with hot module replacement it's not

01:01:58,319 --> 01:02:04,000
uncommon to wait a few seconds before it

01:02:00,640 --> 01:02:06,319
the thing actually finally updates but

01:02:04,000 --> 01:02:08,400
uh the premise of beat or uh you know

01:02:06,319 --> 01:02:11,039
other native esm

01:02:08,400 --> 01:02:12,480
hot module replacement over native esm

01:02:11,039 --> 01:02:15,440
the premise is because

01:02:12,480 --> 01:02:17,200
each module is now cached individually

01:02:15,440 --> 01:02:19,599
when you edit a file we simply

01:02:17,200 --> 01:02:20,400
invalidate the cache for that specific

01:02:19,599 --> 01:02:23,599
module

01:02:20,400 --> 01:02:25,839
and uh maybe the uh

01:02:23,599 --> 01:02:27,359
a chain an important chain up to other

01:02:25,839 --> 01:02:30,160
way where we can say this

01:02:27,359 --> 01:02:32,559
is a this is a reload boundary where we

01:02:30,160 --> 01:02:35,920
can re-import this model from here

01:02:32,559 --> 01:02:36,480
um so say when you are editing a view

01:02:35,920 --> 01:02:38,160
file

01:02:36,480 --> 01:02:40,799
the only thing that's being invalidated

01:02:38,160 --> 01:02:43,119
is this is this file itself

01:02:40,799 --> 01:02:44,160
um so we're not doing any of the extra

01:02:43,119 --> 01:02:46,559
work saying like

01:02:44,160 --> 01:02:48,319
now let's recreate a whole bundle so

01:02:46,559 --> 01:02:50,400
that then we reload the page

01:02:48,319 --> 01:02:52,160
right there's nothing like that all

01:02:50,400 --> 01:02:56,640
we're doing is say

01:02:52,160 --> 01:02:56,640
uh in fact if we look at the network tab

01:03:00,839 --> 01:03:05,039
here

01:03:02,160 --> 01:03:05,039
god this is too

01:03:06,160 --> 01:03:09,839
can i clear no not this one this is

01:03:09,359 --> 01:03:11,520
anyway

01:03:09,839 --> 01:03:14,880
uncharted territory for me i've never

01:03:11,520 --> 01:03:17,280
seen such an active network tab

01:03:14,880 --> 01:03:18,640
yeah so right uh i think the cool thing

01:03:17,280 --> 01:03:20,400
is like everything is imported

01:03:18,640 --> 01:03:23,280
individually and uh

01:03:20,400 --> 01:03:23,280
so here

01:03:23,680 --> 01:03:28,799
uh okay this one so

01:03:26,880 --> 01:03:31,119
this is the only new network request

01:03:28,799 --> 01:03:33,280
that we made every time we edit

01:03:31,119 --> 01:03:34,720
we're just fetching an updated version

01:03:33,280 --> 01:03:38,000
of this specific

01:03:34,720 --> 01:03:42,400
file and then we apply the update

01:03:38,000 --> 01:03:44,480
precisely so we don't reload

01:03:42,400 --> 01:03:46,160
the whole application we don't need to

01:03:44,480 --> 01:03:49,440
do any bundling work

01:03:46,160 --> 01:03:50,640
and it just it's it's as precise as it

01:03:49,440 --> 01:03:52,480
can be

01:03:50,640 --> 01:03:55,760
did you mentioned uh things like tree

01:03:52,480 --> 01:03:58,000
shaking does this um

01:03:55,760 --> 01:03:59,839
veep does it grab stuff that's not being

01:03:58,000 --> 01:04:02,480
used or actively being

01:03:59,839 --> 01:04:03,599
leveraged uh tree shaking is a more like

01:04:02,480 --> 01:04:06,559
a production

01:04:03,599 --> 01:04:07,039
concern because during development you

01:04:06,559 --> 01:04:09,039
do

01:04:07,039 --> 01:04:10,640
you don't really worry about loading a

01:04:09,039 --> 01:04:14,480
few extra kilobytes of

01:04:10,640 --> 01:04:15,839
code right in production you do want to

01:04:14,480 --> 01:04:16,160
leverage cheat sheeting but that's kind

01:04:15,839 --> 01:04:18,559
of

01:04:16,160 --> 01:04:21,200
what the bundlers do right so for

01:04:18,559 --> 01:04:23,119
production feeds still uses bundlers

01:04:21,200 --> 01:04:25,440
vit is built on top of rollup for

01:04:23,119 --> 01:04:28,880
production

01:04:25,440 --> 01:04:32,079
and uh in fact uh v pluggings

01:04:28,880 --> 01:04:33,599
are a super set of roller pluggings so

01:04:32,079 --> 01:04:35,839
uh if you know how to write a roller

01:04:33,599 --> 01:04:37,200
plug-in you already kind of know how to

01:04:35,839 --> 01:04:40,160
write a v-plugging

01:04:37,200 --> 01:04:41,119
okay uh a lot of the the concept like

01:04:40,160 --> 01:04:44,559
resolve id

01:04:41,119 --> 01:04:47,680
transform load they are exactly the same

01:04:44,559 --> 01:04:48,160
uh features extends rollups interface to

01:04:47,680 --> 01:04:52,559
provide

01:04:48,160 --> 01:04:52,559
a few feed specific uh

01:04:52,640 --> 01:04:59,599
these specific properties or hooks um

01:04:56,480 --> 01:05:02,640
so to make it uh easier

01:04:59,599 --> 01:05:04,000
cool so um i think that's um

01:05:02,640 --> 01:05:05,920
that's pretty much it i don't know if

01:05:04,000 --> 01:05:08,480
there's anything i kind of want to

01:05:05,920 --> 01:05:10,400
talk about we already talked about like

01:05:08,480 --> 01:05:12,079
built-in framework support and i know

01:05:10,400 --> 01:05:15,280
there are a bunch of um

01:05:12,079 --> 01:05:16,240
spelt users working on a svelte

01:05:15,280 --> 01:05:19,440
integration

01:05:16,240 --> 01:05:21,520
for veed as well in fact um

01:05:19,440 --> 01:05:24,880
i know a fork of roll-up plug-ins fell

01:05:21,520 --> 01:05:27,200
just worked pretty much just works

01:05:24,880 --> 01:05:28,640
um there is a question that came up

01:05:27,200 --> 01:05:30,559
about just what you just mentioned about

01:05:28,640 --> 01:05:32,319
roll up and why not yes build for

01:05:30,559 --> 01:05:35,839
production

01:05:32,319 --> 01:05:37,839
so the thing here is um yes build for

01:05:35,839 --> 01:05:39,119
production still has a bunch of things

01:05:37,839 --> 01:05:42,000
that

01:05:39,119 --> 01:05:44,160
so essentially es builds es build story

01:05:42,000 --> 01:05:47,920
for bundling and application is still

01:05:44,160 --> 01:05:49,839
a little bit incomplete i would say

01:05:47,920 --> 01:05:51,839
i think in the future in the future

01:05:49,839 --> 01:05:53,839
where yes build gets more robust

01:05:51,839 --> 01:05:55,760
application oriented bundling support

01:05:53,839 --> 01:05:56,319
will probably you know it's a it's an

01:05:55,760 --> 01:05:58,480
open

01:05:56,319 --> 01:06:00,720
uh possibility that we can switch to it

01:05:58,480 --> 01:06:03,200
because we already leverage it a lot

01:06:00,720 --> 01:06:05,119
uh the thing here is for example you

01:06:03,200 --> 01:06:08,400
want to have more control over

01:06:05,119 --> 01:06:11,599
the chunk rendering uh and

01:06:08,400 --> 01:06:13,119
the into cross imports the hash and then

01:06:11,599 --> 01:06:15,359
handling assets

01:06:13,119 --> 01:06:16,240
emitting files and then getting the

01:06:15,359 --> 01:06:18,000
bundle

01:06:16,240 --> 01:06:19,760
analyzing the bundle optimizing the

01:06:18,000 --> 01:06:22,880
cross imports and all that stuff

01:06:19,760 --> 01:06:24,240
with es build that's sort of um you

01:06:22,880 --> 01:06:26,160
don't you pretty much don't get any

01:06:24,240 --> 01:06:27,280
control over the chunking processing yes

01:06:26,160 --> 01:06:30,480
build right now

01:06:27,280 --> 01:06:31,440
so that's something and i know evan

01:06:30,480 --> 01:06:34,880
wallace said he

01:06:31,440 --> 01:06:36,720
is planning to rewrite uh code splitting

01:06:34,880 --> 01:06:39,680
in es build at some point

01:06:36,720 --> 01:06:41,760
so which is why we don't really rely on

01:06:39,680 --> 01:06:43,760
it i mean in terms of bundling for apple

01:06:41,760 --> 01:06:44,799
bundling applications roll up is still a

01:06:43,760 --> 01:06:46,640
much more

01:06:44,799 --> 01:06:49,119
i mean battle test and a more robust

01:06:46,640 --> 01:06:51,599
choice at this point of time

01:06:49,119 --> 01:06:53,119
uh so obviously it's it means the

01:06:51,599 --> 01:06:54,000
production builder feed is going to be

01:06:53,119 --> 01:06:56,240
much slower

01:06:54,000 --> 01:06:58,559
than something that you know you

01:06:56,240 --> 01:07:01,039
leverage just build all the way through

01:06:58,559 --> 01:07:01,839
but the benefit is you get you likely

01:07:01,039 --> 01:07:05,280
get a

01:07:01,839 --> 01:07:08,240
more robust and more efficient bundle

01:07:05,280 --> 01:07:10,160
uh for production so one thing you can

01:07:08,240 --> 01:07:10,960
do is you can use es field as the

01:07:10,160 --> 01:07:12,880
minifier

01:07:10,960 --> 01:07:14,079
so the default minifier is terser but

01:07:12,880 --> 01:07:17,440
you can say

01:07:14,079 --> 01:07:19,599
v2 build dash dash midify es build

01:07:17,440 --> 01:07:20,559
uh so it we can use es build as the

01:07:19,599 --> 01:07:22,319
minifier which

01:07:20,559 --> 01:07:24,160
already speeds up the build by quite a

01:07:22,319 --> 01:07:26,240
bit but um

01:07:24,160 --> 01:07:27,280
in most cases the bundle will be

01:07:26,240 --> 01:07:29,119
slightly larger

01:07:27,280 --> 01:07:30,640
so it's a trade-off that you can make

01:07:29,119 --> 01:07:32,880
that make your call yourself

01:07:30,640 --> 01:07:34,319
are you willing to trade maybe five to

01:07:32,880 --> 01:07:36,480
ten percent larger bundle

01:07:34,319 --> 01:07:37,920
in return for faster builds it's up to

01:07:36,480 --> 01:07:41,119
you

01:07:37,920 --> 01:07:43,119
okay excellent yeah and um

01:07:41,119 --> 01:07:44,559
i think the the last question would be

01:07:43,119 --> 01:07:47,119
how can folks

01:07:44,559 --> 01:07:48,720
stay up to date with veet um check out

01:07:47,119 --> 01:07:50,880
the releases and are you

01:07:48,720 --> 01:07:52,319
taking contributions right now as you're

01:07:50,880 --> 01:07:53,920
approaching the uh

01:07:52,319 --> 01:07:55,760
leaving the basement yeah we have a lot

01:07:53,920 --> 01:07:56,960
of contributors already so the easiest

01:07:55,760 --> 01:08:00,799
way to stay in touch

01:07:56,960 --> 01:08:04,000
is go to uh this twitter handle

01:08:00,799 --> 01:08:06,799
uh at feet underscore js

01:08:04,000 --> 01:08:09,119
unfortunately the uh no underscore

01:08:06,799 --> 01:08:12,400
version is already taken

01:08:09,119 --> 01:08:16,560
i wonder what that project is yeah

01:08:12,400 --> 01:08:17,839
and um so vjs and then uh we have

01:08:16,560 --> 01:08:18,400
already have a lot of contributors on

01:08:17,839 --> 01:08:21,520
github

01:08:18,400 --> 01:08:25,120
uh feel free to oh also we have this

01:08:21,520 --> 01:08:25,600
uh chat.vjs.dev that's our discord

01:08:25,120 --> 01:08:28,560
server

01:08:25,600 --> 01:08:29,279
so if you want to join i didn't realize

01:08:28,560 --> 01:08:33,120
discord was

01:08:29,279 --> 01:08:35,040
um allowing uh domains

01:08:33,120 --> 01:08:37,440
oh this is just a custom redirect oh you

01:08:35,040 --> 01:08:42,640
redirected okay i wasn't sure

01:08:37,440 --> 01:08:44,799
okay yeah so chat.vjsfeetjs.dev

01:08:42,640 --> 01:08:45,759
um you get an automatic invite into our

01:08:44,799 --> 01:08:48,239
discord server

01:08:45,759 --> 01:08:49,440
and there's a pretty cool community

01:08:48,239 --> 01:08:54,239
going on there

01:08:49,440 --> 01:08:56,319
um yeah and uh that's pretty much it

01:08:54,239 --> 01:08:57,839
yeah well i appreciate your time evan

01:08:56,319 --> 01:08:59,679
and walking through this i think it's a

01:08:57,839 --> 01:09:01,199
really good uh format and uh hope you

01:08:59,679 --> 01:09:02,319
definitely pick up on the the live

01:09:01,199 --> 01:09:04,880
streaming game

01:09:02,319 --> 01:09:06,560
um yeah folks have if you have enjoyed

01:09:04,880 --> 01:09:09,120
this you can definitely find evan

01:09:06,560 --> 01:09:11,359
uh he has a twitter or sorry he has a

01:09:09,120 --> 01:09:13,600
twitter but he also has a twitch

01:09:11,359 --> 01:09:15,279
so um which you mentioned your twitch is

01:09:13,600 --> 01:09:18,159
different is it different than what's

01:09:15,279 --> 01:09:19,600
on the screen uh twitch is the no it's

01:09:18,159 --> 01:09:21,279
the same answer okay gotcha

01:09:19,600 --> 01:09:23,040
okay so everybody just follow evan on

01:09:21,279 --> 01:09:24,880
twitch to make sure whenever he goes

01:09:23,040 --> 01:09:26,560
live showing some some code

01:09:24,880 --> 01:09:28,480
uh you definitely don't want to miss it

01:09:26,560 --> 01:09:29,359
and uh if you are interested in learning

01:09:28,480 --> 01:09:30,640
about more

01:09:29,359 --> 01:09:32,000
projects uh definitely follow the

01:09:30,640 --> 01:09:34,319
channel open source friday we do have a

01:09:32,000 --> 01:09:36,960
meetup group for notification reasons

01:09:34,319 --> 01:09:38,960
and uh i also live stream so my name is

01:09:36,960 --> 01:09:40,640
here bw that's who i am

01:09:38,960 --> 01:09:42,400
uh i do a lot of github action work

01:09:40,640 --> 01:09:43,199
which i didn't actually shout out my new

01:09:42,400 --> 01:09:46,480
t-shirt

01:09:43,199 --> 01:09:48,480
uh it's in the get up shop at the moment

01:09:46,480 --> 01:09:51,679
too so get it before it's sold out

01:09:48,480 --> 01:09:55,760
and uh with that i think we can go uh

01:09:51,679 --> 01:09:58,719
and in the stream so thanks everybody

01:09:55,760 --> 01:09:58,719

YouTube URL: https://www.youtube.com/watch?v=UJypSr8IhKY


