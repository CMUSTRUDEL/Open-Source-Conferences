Title: dry-rb, collection of next-generation Ruby libraries
Publication date: 2020-10-24
Playlist: Open Source Friday
Description: 
	dry-rb helps you write clear, flexible, and more maintainable Ruby code. Each dry-rb gem fulfils a common task, and together they make a powerful platform for any kind of Ruby application.

Join bdougie and friends live for Open Source Fridays at https://www.meetup.com/GitHub-Virtual-Meetup

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
Google+: http://google.com/+github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:01,920 --> 00:00:04,400
[Music]

00:00:03,760 --> 00:00:08,080
all right

00:00:04,400 --> 00:00:11,679
hello welcome to open source

00:00:08,080 --> 00:00:13,200
friday figuring everything out right now

00:00:11,679 --> 00:00:15,679
let's see i've got all my screens

00:00:13,200 --> 00:00:17,920
everywhere yeah thanks very much for

00:00:15,679 --> 00:00:19,359
coming to the at this point this is

00:00:17,920 --> 00:00:21,840
technically the second edition

00:00:19,359 --> 00:00:23,199
though if you did come to the first one

00:00:21,840 --> 00:00:24,000
that was sort of the first edition but

00:00:23,199 --> 00:00:27,680
we didn't really

00:00:24,000 --> 00:00:29,119
publish that but uh yeah today is a very

00:00:27,680 --> 00:00:31,359
special day because not only is it

00:00:29,119 --> 00:00:33,920
friday we actually have tim riley here

00:00:31,359 --> 00:00:35,280
and tammy you want to say hello hi

00:00:33,920 --> 00:00:38,000
thanks for having me

00:00:35,280 --> 00:00:39,440
excellent yeah so this is a this little

00:00:38,000 --> 00:00:41,200
side project this little

00:00:39,440 --> 00:00:42,480
passion project that i've been working

00:00:41,200 --> 00:00:44,239
on like open source friday has been a

00:00:42,480 --> 00:00:46,800
thing like i think most

00:00:44,239 --> 00:00:48,239
companies and developers are aware maybe

00:00:46,800 --> 00:00:49,280
some developers aren't aware i guess we

00:00:48,239 --> 00:00:51,360
shouldn't assume

00:00:49,280 --> 00:00:52,800
but i'm super happy and pleased to have

00:00:51,360 --> 00:00:53,920
the opportunity to talk to you and talk

00:00:52,800 --> 00:00:56,000
about your project

00:00:53,920 --> 00:00:57,840
but before i jump right in i just want

00:00:56,000 --> 00:00:59,280
to say hello to the chat thanks for uh i

00:00:57,840 --> 00:01:02,079
see sean actually showed up

00:00:59,280 --> 00:01:03,760
and uh thanks for staying up late with

00:01:02,079 --> 00:01:07,119
us sean and

00:01:03,760 --> 00:01:10,880
um coronico happy happy to see you

00:01:07,119 --> 00:01:13,840
got the emojis coming in hot and uh

00:01:10,880 --> 00:01:14,240
yeah um some other names that i cannot

00:01:13,840 --> 00:01:15,840
uh

00:01:14,240 --> 00:01:18,000
pronounce but yeah definitely come in

00:01:15,840 --> 00:01:19,439
the chat i do want to

00:01:18,000 --> 00:01:20,799
also call out if you do have questions

00:01:19,439 --> 00:01:22,080
about open source questions about the

00:01:20,799 --> 00:01:23,759
project i want to talk about questions

00:01:22,080 --> 00:01:25,840
about tim or about github

00:01:23,759 --> 00:01:27,600
please use the chat to ans to ask those

00:01:25,840 --> 00:01:29,759
questions and we'll address them

00:01:27,600 --> 00:01:30,640
as we have some breaks and um especially

00:01:29,759 --> 00:01:32,720
at the end as well

00:01:30,640 --> 00:01:33,759
i have time permitting i know tim's

00:01:32,720 --> 00:01:36,880
family is actually out

00:01:33,759 --> 00:01:37,520
in on a stroll giving us some some

00:01:36,880 --> 00:01:41,119
bandwidth

00:01:37,520 --> 00:01:42,320
so which is amazing clear yeah so tim

00:01:41,119 --> 00:01:43,439
i've talked enough do you want to

00:01:42,320 --> 00:01:45,040
introduce yourself tell us why you're

00:01:43,439 --> 00:01:48,720
here

00:01:45,040 --> 00:01:51,680
so i am tim riley i am a software

00:01:48,720 --> 00:01:54,079
developer based in canberra in australia

00:01:51,680 --> 00:01:55,439
and in the open source world i work

00:01:54,079 --> 00:01:58,880
predominantly in the

00:01:55,439 --> 00:01:59,520
ruby community and i'm involved in in

00:01:58,880 --> 00:02:02,399
several

00:01:59,520 --> 00:02:03,439
ruby open source organizations uh one of

00:02:02,399 --> 00:02:06,159
them is dry ib

00:02:03,439 --> 00:02:07,520
which will be our topic today but of

00:02:06,159 --> 00:02:08,080
late i've also been quite heavily

00:02:07,520 --> 00:02:11,840
involved

00:02:08,080 --> 00:02:14,239
in the hanami project and which is a

00:02:11,840 --> 00:02:15,360
which is an effort between dryabi hanami

00:02:14,239 --> 00:02:17,200
and another

00:02:15,360 --> 00:02:19,360
organization i work with roma be a

00:02:17,200 --> 00:02:22,480
persistence toolkit

00:02:19,360 --> 00:02:24,319
to create a an alternative uh web

00:02:22,480 --> 00:02:26,560
framework for ruby and together we're

00:02:24,319 --> 00:02:29,120
working on the version two release

00:02:26,560 --> 00:02:29,760
okay wow i didn't i knew dry rb but i

00:02:29,120 --> 00:02:32,640
didn't actually

00:02:29,760 --> 00:02:34,160
take a poke in the hanami but um are you

00:02:32,640 --> 00:02:35,280
able to give us like a tour or maybe an

00:02:34,160 --> 00:02:38,400
explanation of like what

00:02:35,280 --> 00:02:40,800
how that sort of um how your involvement

00:02:38,400 --> 00:02:44,560
is uh played out through those projects

00:02:40,800 --> 00:02:44,560
and particularly hanami and jairby

00:02:44,640 --> 00:02:49,519
well my involvement mostly began

00:02:47,760 --> 00:02:51,760
i guess for background i've been working

00:02:49,519 --> 00:02:54,319
with ruby for a very long time

00:02:51,760 --> 00:02:54,800
and like many other rubyists ruby on

00:02:54,319 --> 00:02:59,200
rails

00:02:54,800 --> 00:03:03,040
was my tool of choice my daily driver

00:02:59,200 --> 00:03:05,040
but over many years and many projects

00:03:03,040 --> 00:03:06,720
i began to feel somewhat dissatisfied

00:03:05,040 --> 00:03:08,159
with some of the outcomes i was getting

00:03:06,720 --> 00:03:11,920
with rails

00:03:08,159 --> 00:03:13,519
and i wanted to find i wanted to search

00:03:11,920 --> 00:03:16,560
for a better way

00:03:13,519 --> 00:03:19,840
something to give me some guide rails

00:03:16,560 --> 00:03:21,680
to help me conceptualize my projects

00:03:19,840 --> 00:03:22,400
better to organize my business logic

00:03:21,680 --> 00:03:26,480
better

00:03:22,400 --> 00:03:28,239
to create projects that i can

00:03:26,480 --> 00:03:30,159
i can ship to meet client demands i

00:03:28,239 --> 00:03:31,840
worked for a long time in an agency

00:03:30,159 --> 00:03:33,920
but at the same time not feel like i had

00:03:31,840 --> 00:03:35,120
to make so many shortcuts to get

00:03:33,920 --> 00:03:37,280
the project out the door under

00:03:35,120 --> 00:03:40,319
commercial pressure uh and that's

00:03:37,280 --> 00:03:41,519
when i started uh discovering a

00:03:40,319 --> 00:03:43,760
community of people

00:03:41,519 --> 00:03:45,599
who were building up this alternative

00:03:43,760 --> 00:03:50,400
ecosystem of tools in ruby

00:03:45,599 --> 00:03:53,200
and this was back in 2014 2015

00:03:50,400 --> 00:03:53,760
and yeah so i followed some people on

00:03:53,200 --> 00:03:55,439
twitter

00:03:53,760 --> 00:03:57,840
um followed some of the work that i do

00:03:55,439 --> 00:04:01,120
on github sent a few emails

00:03:57,840 --> 00:04:03,280
and that ended up in a collaboration now

00:04:01,120 --> 00:04:04,319
that has lasted for nearly five years it

00:04:03,280 --> 00:04:07,360
spans

00:04:04,319 --> 00:04:08,640
three different organizations and the

00:04:07,360 --> 00:04:11,120
the gems we've made

00:04:08,640 --> 00:04:13,040
uh to my knowledge uh are used by

00:04:11,120 --> 00:04:15,439
thousands of developers around the world

00:04:13,040 --> 00:04:16,160
and in some rather large organizations

00:04:15,439 --> 00:04:19,280
so it's

00:04:16,160 --> 00:04:21,600
it's kind of great to see how

00:04:19,280 --> 00:04:23,360
a a personal desire to change some

00:04:21,600 --> 00:04:24,080
aspect of your programming practice can

00:04:23,360 --> 00:04:26,000
actually

00:04:24,080 --> 00:04:27,840
turn into something so much bigger yeah

00:04:26,000 --> 00:04:30,240
so i'm curious like at the

00:04:27,840 --> 00:04:31,120
at the point that you wanted to dig in

00:04:30,240 --> 00:04:32,880
deeper and actually

00:04:31,120 --> 00:04:34,639
like build these sort of quote-unquote

00:04:32,880 --> 00:04:36,479
guardrails had you already

00:04:34,639 --> 00:04:38,000
already been involved in open source at

00:04:36,479 --> 00:04:39,199
that point like did you know that was

00:04:38,000 --> 00:04:43,040
like a path to actually

00:04:39,199 --> 00:04:46,320
solve these problems yeah so

00:04:43,040 --> 00:04:47,759
i mean one of the amazing things i don't

00:04:46,320 --> 00:04:48,479
want to knock ruby on rails it's an

00:04:47,759 --> 00:04:51,520
amazing

00:04:48,479 --> 00:04:52,160
project and it's enabled many many

00:04:51,520 --> 00:04:55,759
developers

00:04:52,160 --> 00:04:57,360
and made possible many many projects uh

00:04:55,759 --> 00:04:59,280
and one of the great things about it and

00:04:57,360 --> 00:05:00,160
about ruby in general is that the source

00:04:59,280 --> 00:05:02,080
is all there

00:05:00,160 --> 00:05:04,080
you know you can you can bundle in your

00:05:02,080 --> 00:05:06,479
project hit bundle open on any gym

00:05:04,080 --> 00:05:08,880
and instantly dig in and this is not

00:05:06,479 --> 00:05:11,840
necessarily an experience you get

00:05:08,880 --> 00:05:14,479
with other ecosystems and you know

00:05:11,840 --> 00:05:16,800
github has been a part of that

00:05:14,479 --> 00:05:17,759
flow for a very long time too so you see

00:05:16,800 --> 00:05:19,680
the

00:05:17,759 --> 00:05:21,600
you see this as a collaborative hub and

00:05:19,680 --> 00:05:23,199
an easy way to see what people are doing

00:05:21,600 --> 00:05:24,960
and reach out to others so

00:05:23,199 --> 00:05:26,720
yeah i was i was familiar with open

00:05:24,960 --> 00:05:28,720
source i hadn't done

00:05:26,720 --> 00:05:29,919
i hadn't made any serious investments in

00:05:28,720 --> 00:05:31,600
it i dabbled

00:05:29,919 --> 00:05:33,360
uh you know you threw up your personal

00:05:31,600 --> 00:05:36,639
projects online

00:05:33,360 --> 00:05:37,440
uh i made a couple of gems which i used

00:05:36,639 --> 00:05:40,720
myself

00:05:37,440 --> 00:05:42,000
but uh perhaps of limited usage to

00:05:40,720 --> 00:05:44,720
others

00:05:42,000 --> 00:05:45,600
uh so yeah it wasn't it wasn't from

00:05:44,720 --> 00:05:47,199
ground zero

00:05:45,600 --> 00:05:49,199
i guess i'd done enough to start to feel

00:05:47,199 --> 00:05:52,160
confident and

00:05:49,199 --> 00:05:53,840
that was some useful some useful

00:05:52,160 --> 00:05:54,960
background because when the moment did

00:05:53,840 --> 00:05:57,600
arrive when i felt

00:05:54,960 --> 00:05:58,240
like there was an opportunity for me to

00:05:57,600 --> 00:06:00,639
actually

00:05:58,240 --> 00:06:02,800
create something of value um that people

00:06:00,639 --> 00:06:05,199
would use to a great extent

00:06:02,800 --> 00:06:06,720
i had some of the i had sort of done the

00:06:05,199 --> 00:06:08,400
dabbling done the learning

00:06:06,720 --> 00:06:10,960
and i felt like i was equipped to get

00:06:08,400 --> 00:06:13,759
ready to go and hit the ground running

00:06:10,960 --> 00:06:14,880
awesome yeah i so me personally my

00:06:13,759 --> 00:06:16,639
introduction to

00:06:14,880 --> 00:06:18,080
programming at open source was ruby on

00:06:16,639 --> 00:06:20,080
rails as well like i haven't contributed

00:06:18,080 --> 00:06:22,240
to ruben or else but

00:06:20,080 --> 00:06:24,080
my introduction was in that ecosystem so

00:06:22,240 --> 00:06:26,960
like having

00:06:24,080 --> 00:06:28,720
a clear path to solve a problem which

00:06:26,960 --> 00:06:30,800
was i was building web apps

00:06:28,720 --> 00:06:32,160
and or i had an idea for web app and

00:06:30,800 --> 00:06:34,319
ruby on rails sort of

00:06:32,160 --> 00:06:35,680
gave me all sort of batteries included

00:06:34,319 --> 00:06:37,120
with it so like

00:06:35,680 --> 00:06:38,720
i'm super appreciative of that and like

00:06:37,120 --> 00:06:40,319
also being able to look at github source

00:06:38,720 --> 00:06:43,680
code i don't work on github

00:06:40,319 --> 00:06:44,240
uh github github today um but i do look

00:06:43,680 --> 00:06:46,479
at the code

00:06:44,240 --> 00:06:48,319
and i do ask a lot of questions uh to

00:06:46,479 --> 00:06:50,479
help solve my role uh

00:06:48,319 --> 00:06:52,000
and being able to look at that code base

00:06:50,479 --> 00:06:52,479
and knowing exactly where things should

00:06:52,000 --> 00:06:55,280
be

00:06:52,479 --> 00:06:55,919
and looking at like just knowing they're

00:06:55,280 --> 00:06:58,240
there

00:06:55,919 --> 00:06:59,360
um is super helpful and i think uh

00:06:58,240 --> 00:07:01,520
having things like that is

00:06:59,360 --> 00:07:04,080
is also super helpful but speaking about

00:07:01,520 --> 00:07:05,680
having projects with batteries included

00:07:04,080 --> 00:07:07,360
can we talk about like dry rb and like

00:07:05,680 --> 00:07:10,479
what that is and

00:07:07,360 --> 00:07:13,840
uh what sort of problems it solves

00:07:10,479 --> 00:07:15,680
certainly so one of the

00:07:13,840 --> 00:07:17,199
defining aspects of dryer b is you can

00:07:15,680 --> 00:07:18,160
choose how many batteries you want to

00:07:17,199 --> 00:07:20,960
include

00:07:18,160 --> 00:07:22,400
because it is a collection of relatively

00:07:20,960 --> 00:07:24,720
small libraries

00:07:22,400 --> 00:07:25,599
with each one trying to solve a common

00:07:24,720 --> 00:07:27,759
task

00:07:25,599 --> 00:07:30,000
and we we call them next generation ruby

00:07:27,759 --> 00:07:31,680
libraries it's because

00:07:30,000 --> 00:07:33,360
we're building on the back of years of

00:07:31,680 --> 00:07:33,919
learning uh working in the ruby

00:07:33,360 --> 00:07:36,319
community

00:07:33,919 --> 00:07:37,360
and we're bringing those learning

00:07:36,319 --> 00:07:40,639
experiences

00:07:37,360 --> 00:07:44,000
together and packaging them up in the

00:07:40,639 --> 00:07:45,680
in these gems that we ship so they

00:07:44,000 --> 00:07:47,280
try and tackle a range of problems and

00:07:45,680 --> 00:07:50,800
they do it in a fairly

00:07:47,280 --> 00:07:52,479
coherent way uh so a lot of the dryer b

00:07:50,800 --> 00:07:54,080
um what's interesting a lot about a lot

00:07:52,479 --> 00:07:55,039
of the driving libraries is that they

00:07:54,080 --> 00:07:57,360
follow this

00:07:55,039 --> 00:07:58,479
blended functional object-oriented

00:07:57,360 --> 00:08:02,160
approach to ruby

00:07:58,479 --> 00:08:03,360
which hasn't always been very widespread

00:08:02,160 --> 00:08:05,120
in the ruby community

00:08:03,360 --> 00:08:07,680
but we've found it to be really helpful

00:08:05,120 --> 00:08:10,080
ruby is a multi-paradigm language

00:08:07,680 --> 00:08:12,240
you can write highly functional code in

00:08:10,080 --> 00:08:13,840
it but you can also write uh

00:08:12,240 --> 00:08:15,280
highly object-oriented code in it that's

00:08:13,840 --> 00:08:15,919
one of the amazing things about the

00:08:15,280 --> 00:08:18,400
language

00:08:15,919 --> 00:08:19,520
it's so malleable but what we've found

00:08:18,400 --> 00:08:22,080
is that if we

00:08:19,520 --> 00:08:22,960
if we just do a few things like

00:08:22,080 --> 00:08:24,560
minimizing

00:08:22,960 --> 00:08:26,560
mutable state in our applications

00:08:24,560 --> 00:08:28,720
minimizing globals

00:08:26,560 --> 00:08:30,400
making it so that the objects that you

00:08:28,720 --> 00:08:31,680
work with can have a really clear flow

00:08:30,400 --> 00:08:35,200
of data through them

00:08:31,680 --> 00:08:38,080
then what you achieve is a really

00:08:35,200 --> 00:08:39,279
clear understanding of the the flow of

00:08:38,080 --> 00:08:42,000
logic in your application

00:08:39,279 --> 00:08:43,360
so these gems together create that uh

00:08:42,000 --> 00:08:46,399
effect when you use them

00:08:43,360 --> 00:08:48,399
okay so like if my correct and like

00:08:46,399 --> 00:08:49,920
the we started with talking about ruby

00:08:48,399 --> 00:08:51,040
on rails and like all batteries included

00:08:49,920 --> 00:08:52,640
and you mentioned

00:08:51,040 --> 00:08:54,240
you could choose what batteries you want

00:08:52,640 --> 00:08:56,720
so could you technically build

00:08:54,240 --> 00:08:57,440
a ruby on rails with a bunch of next

00:08:56,720 --> 00:08:58,800
like these uh

00:08:57,440 --> 00:09:01,279
next generation libraries that you had

00:08:58,800 --> 00:09:03,360
mentioned yeah absolutely

00:09:01,279 --> 00:09:04,959
and for the last few years it's been

00:09:03,360 --> 00:09:07,519
something that you have to do

00:09:04,959 --> 00:09:08,160
with sort of a lot of perseverance on

00:09:07,519 --> 00:09:09,680
your own

00:09:08,160 --> 00:09:11,839
own behalf you've got to figure out how

00:09:09,680 --> 00:09:12,640
to connect things we did we did create a

00:09:11,839 --> 00:09:15,600
few different

00:09:12,640 --> 00:09:17,120
sort of umbrella um helpers that

00:09:15,600 --> 00:09:18,560
combined the gems together and we

00:09:17,120 --> 00:09:20,240
integrated them with the rotor

00:09:18,560 --> 00:09:22,640
routing framework which is a sinatra

00:09:20,240 --> 00:09:24,160
style micro routing library but using

00:09:22,640 --> 00:09:26,480
routing trees

00:09:24,160 --> 00:09:27,760
but now we're doing it with the hanami

00:09:26,480 --> 00:09:29,839
project because

00:09:27,760 --> 00:09:32,160
an army already has a lot of visibility

00:09:29,839 --> 00:09:34,800
it has a strong user base

00:09:32,160 --> 00:09:36,000
luca the maintainer of that project his

00:09:34,800 --> 00:09:37,839
vision for a web

00:09:36,000 --> 00:09:39,680
framework experience very much aligns

00:09:37,839 --> 00:09:41,279
with ours and so

00:09:39,680 --> 00:09:43,600
what we're seeing here i think is a new

00:09:41,279 --> 00:09:45,360
model of uh

00:09:43,600 --> 00:09:46,720
collaboration in the ruby open source

00:09:45,360 --> 00:09:48,160
community where we have

00:09:46,720 --> 00:09:49,920
multiple distinct groups working

00:09:48,160 --> 00:09:50,640
together to create something that is

00:09:49,920 --> 00:09:52,880
coherent

00:09:50,640 --> 00:09:55,120
and batteries included while each

00:09:52,880 --> 00:09:57,040
project still maintains its own identity

00:09:55,120 --> 00:10:00,640
and while each project still provides a

00:09:57,040 --> 00:10:02,880
set of clear independent abstractions so

00:10:00,640 --> 00:10:04,160
often if you spin up a rails project you

00:10:02,880 --> 00:10:05,920
get everything from the rails

00:10:04,160 --> 00:10:06,880
organization bundled up there together

00:10:05,920 --> 00:10:08,720
for you

00:10:06,880 --> 00:10:11,120
but because they're all developed uh

00:10:08,720 --> 00:10:13,040
together it does mean that sometimes

00:10:11,120 --> 00:10:13,839
it's a bit harder to dig down and tease

00:10:13,040 --> 00:10:15,519
things apart

00:10:13,839 --> 00:10:17,279
and you know there are ongoing efforts

00:10:15,519 --> 00:10:18,720
for that but it's not it's not their

00:10:17,279 --> 00:10:22,399
priority uh the rails

00:10:18,720 --> 00:10:23,040
uh community whereas ours is very much a

00:10:22,399 --> 00:10:25,519
bottom-up

00:10:23,040 --> 00:10:27,279
uh approach to development we've

00:10:25,519 --> 00:10:27,920
implemented all the driver libraries on

00:10:27,279 --> 00:10:30,320
their own

00:10:27,920 --> 00:10:31,279
first to be independently useful and

00:10:30,320 --> 00:10:33,600
then we

00:10:31,279 --> 00:10:35,040
made sure that they are composable as

00:10:33,600 --> 00:10:37,440
gems so that you can

00:10:35,040 --> 00:10:38,480
bring them together in a way that the

00:10:37,440 --> 00:10:40,720
sum of their parts

00:10:38,480 --> 00:10:42,640
um that the end result is greater than

00:10:40,720 --> 00:10:44,000
the sum of their parts so that's how

00:10:42,640 --> 00:10:46,079
that's how we're looking that's the

00:10:44,000 --> 00:10:48,240
model for this project which is

00:10:46,079 --> 00:10:49,279
yes a coherent battery is included

00:10:48,240 --> 00:10:52,079
framework experience

00:10:49,279 --> 00:10:53,920
up top uh powered by independent and

00:10:52,079 --> 00:10:55,680
still independently useful

00:10:53,920 --> 00:10:57,519
libraries and organizations for those

00:10:55,680 --> 00:10:58,160
who do want to just use them on their

00:10:57,519 --> 00:10:59,920
own

00:10:58,160 --> 00:11:01,200
or replace certain parts of the

00:10:59,920 --> 00:11:03,519
framework with

00:11:01,200 --> 00:11:04,880
with something else okay and then um i'm

00:11:03,519 --> 00:11:06,959
curious about the hanami i know we

00:11:04,880 --> 00:11:09,120
started talking about dryer b but like

00:11:06,959 --> 00:11:10,720
uh and we were focused on dryer b but it

00:11:09,120 --> 00:11:12,399
seems like there is a

00:11:10,720 --> 00:11:14,000
part of your fan club is actually here

00:11:12,399 --> 00:11:15,200
well fan club uh one of your

00:11:14,000 --> 00:11:17,040
contributors or

00:11:15,200 --> 00:11:19,839
i guess users i don't know we wouldn't

00:11:17,040 --> 00:11:23,200
call them customers in this space but uh

00:11:19,839 --> 00:11:24,480
um so iowaski actually

00:11:23,200 --> 00:11:26,560
came through and asked a question in the

00:11:24,480 --> 00:11:28,720
chat um he's familiar with nami 2

00:11:26,560 --> 00:11:30,480
in the template how does it actually map

00:11:28,720 --> 00:11:31,360
up to the official honor 2 application

00:11:30,480 --> 00:11:33,120
structure

00:11:31,360 --> 00:11:35,120
a follower see he's correcting me

00:11:33,120 --> 00:11:38,560
followers uh what he mentioned

00:11:35,120 --> 00:11:39,920
um is hanami 2 going to be a a set of

00:11:38,560 --> 00:11:41,600
libraries that you can pick

00:11:39,920 --> 00:11:43,120
from or is it going to be provide app

00:11:41,600 --> 00:11:45,279
structure out of the box like version

00:11:43,120 --> 00:11:48,880
one

00:11:45,279 --> 00:11:50,399
uh it will it will provide an experience

00:11:48,880 --> 00:11:52,959
that is similar to what

00:11:50,399 --> 00:11:54,320
hanami provided in version one uh just a

00:11:52,959 --> 00:11:57,680
retooled experience

00:11:54,320 --> 00:12:02,399
and refined experience the hanami 2

00:11:57,680 --> 00:12:07,120
project is an extremely ambitious effort

00:12:02,399 --> 00:12:09,920
because we have big goals but it

00:12:07,120 --> 00:12:10,880
in reality it's worked on by four or

00:12:09,920 --> 00:12:14,240
five people

00:12:10,880 --> 00:12:17,040
uh at night time after work uh

00:12:14,240 --> 00:12:18,639
and across well me and australia and the

00:12:17,040 --> 00:12:21,600
rest of them in europe i get like 45

00:12:18,639 --> 00:12:25,120
minutes a day when i can talk to them

00:12:21,600 --> 00:12:27,360
so that the plan is still to provide a

00:12:25,120 --> 00:12:29,920
all batteries included framework with a

00:12:27,360 --> 00:12:32,560
blessed structure recommended structure

00:12:29,920 --> 00:12:34,800
but i have a very strong motivation to

00:12:32,560 --> 00:12:35,360
make every part of that configurable or

00:12:34,800 --> 00:12:38,160
opt out

00:12:35,360 --> 00:12:39,519
if you want to do something different

00:12:38,160 --> 00:12:42,079
and one thing i've realized

00:12:39,519 --> 00:12:43,040
is that yeah the the effort to make an

00:12:42,079 --> 00:12:44,880
army 2

00:12:43,040 --> 00:12:46,639
is going to take as long as it takes

00:12:44,880 --> 00:12:49,760
it's volunteer labor

00:12:46,639 --> 00:12:51,440
we do it because we we love doing it and

00:12:49,760 --> 00:12:54,000
we're trying to create tools that we

00:12:51,440 --> 00:12:56,399
want to use in the future but

00:12:54,000 --> 00:12:58,639
it takes as long as it takes but in the

00:12:56,399 --> 00:12:58,959
meantime i've actually been using hanami

00:12:58,639 --> 00:13:01,360
00:12:58,959 --> 00:13:04,560
for over a year using the unstable

00:13:01,360 --> 00:13:07,279
branches of many of the gems

00:13:04,560 --> 00:13:09,279
and so i figured people out there in the

00:13:07,279 --> 00:13:11,440
community who are interested in it

00:13:09,279 --> 00:13:12,720
uh shouldn't have to wait until we've

00:13:11,440 --> 00:13:14,079
shipped the next alpha which we're

00:13:12,720 --> 00:13:15,920
working very hard on doing but that

00:13:14,079 --> 00:13:17,839
might still be another month away

00:13:15,920 --> 00:13:19,600
in the meantime i have this whole

00:13:17,839 --> 00:13:20,160
application structure that i've cobbled

00:13:19,600 --> 00:13:23,200
together

00:13:20,160 --> 00:13:24,240
using various panami ii dryabi ramob

00:13:23,200 --> 00:13:26,160
components

00:13:24,240 --> 00:13:27,680
that i could share with the community so

00:13:26,160 --> 00:13:29,279
that's what i did just a couple of weeks

00:13:27,680 --> 00:13:32,000
ago i made a

00:13:29,279 --> 00:13:34,000
github template repository that that

00:13:32,000 --> 00:13:35,839
shows the

00:13:34,000 --> 00:13:37,360
that shows how you can make a hanami 2

00:13:35,839 --> 00:13:38,800
application today if you're willing to

00:13:37,360 --> 00:13:40,800
live on the bleeding edge

00:13:38,800 --> 00:13:42,639
and willing to figure a few things out

00:13:40,800 --> 00:13:44,399
and and really that's a great way

00:13:42,639 --> 00:13:46,560
for people who are interested in seeing

00:13:44,399 --> 00:13:48,800
the progress of development because they

00:13:46,560 --> 00:13:49,360
can follow that uh template as it

00:13:48,800 --> 00:13:51,040
evolves

00:13:49,360 --> 00:13:52,399
they can go in and try things for

00:13:51,040 --> 00:13:54,720
themselves and

00:13:52,399 --> 00:13:56,160
it just gets it just makes that first

00:13:54,720 --> 00:13:57,120
step a bit easier because they don't

00:13:56,160 --> 00:13:58,560
have to worry about

00:13:57,120 --> 00:14:00,560
bringing together the components that's

00:13:58,560 --> 00:14:01,839
done uh they can then just go in and say

00:14:00,560 --> 00:14:02,320
oh how would i implement my business

00:14:01,839 --> 00:14:04,160
logic

00:14:02,320 --> 00:14:05,760
or how would i make my blog in 15

00:14:04,160 --> 00:14:08,079
minutes inside

00:14:05,760 --> 00:14:09,040
this framework uh such as it is right

00:14:08,079 --> 00:14:11,120
now

00:14:09,040 --> 00:14:12,480
excellent and i'm curious about adoption

00:14:11,120 --> 00:14:13,120
we at least have one follower in the

00:14:12,480 --> 00:14:15,120
chat

00:14:13,120 --> 00:14:16,720
but adoption for things like jrb and

00:14:15,120 --> 00:14:19,120
hanami like are you seeing

00:14:16,720 --> 00:14:20,959
a good amount of feedback and

00:14:19,120 --> 00:14:24,079
collaboration and conversation

00:14:20,959 --> 00:14:26,240
uh for projects uh to this nature

00:14:24,079 --> 00:14:27,760
yeah so i think it might make sense just

00:14:26,240 --> 00:14:28,240
to talk a little bit about what the

00:14:27,760 --> 00:14:31,120
drive

00:14:28,240 --> 00:14:32,000
libraries do actually we touched them on

00:14:31,120 --> 00:14:34,160
a high level

00:14:32,000 --> 00:14:36,560
let's actually transition the sharing

00:14:34,160 --> 00:14:39,839
i'll share my screen actually

00:14:36,560 --> 00:14:42,959
once i figure out where that button went

00:14:39,839 --> 00:14:44,639
there we go and then maybe if you

00:14:42,959 --> 00:14:47,760
if you hop to the home page your other

00:14:44,639 --> 00:14:50,959
tab we can uh take a look

00:14:47,760 --> 00:14:52,560
at some of the examples oop seems like i

00:14:50,959 --> 00:14:54,720
uh

00:14:52,560 --> 00:14:56,160
there we go that should work sorry i'm

00:14:54,720 --> 00:14:56,639
just making sure everybody can see

00:14:56,160 --> 00:14:59,120
everything

00:14:56,639 --> 00:15:00,079
so sorry you mentioned the uh the home

00:14:59,120 --> 00:15:02,959
tab

00:15:00,079 --> 00:15:04,160
if you just uh changed the chrome tab oh

00:15:02,959 --> 00:15:06,880
there we go

00:15:04,160 --> 00:15:07,680
yep excellent so if you scroll up a

00:15:06,880 --> 00:15:10,880
little bit

00:15:07,680 --> 00:15:12,399
uh so these represent some of the things

00:15:10,880 --> 00:15:15,440
that the dry ib libraries do

00:15:12,399 --> 00:15:17,440
and the question was about adoption and

00:15:15,440 --> 00:15:21,120
i think one of the benefits from

00:15:17,440 --> 00:15:23,440
approaching uh creating ruby gems in

00:15:21,120 --> 00:15:25,040
this way is that it's very easy to adopt

00:15:23,440 --> 00:15:26,399
particular gems you don't need to throw

00:15:25,040 --> 00:15:26,720
out everything you've done your whole

00:15:26,399 --> 00:15:28,320
app

00:15:26,720 --> 00:15:30,160
framework you know hanami is an

00:15:28,320 --> 00:15:31,600
ambitious effort to create a framework

00:15:30,160 --> 00:15:33,759
of the future but

00:15:31,600 --> 00:15:35,040
it's it's fair to say that not

00:15:33,759 --> 00:15:36,639
everyone's going to rewrite their

00:15:35,040 --> 00:15:37,199
application on hanami 2 as soon as it

00:15:36,639 --> 00:15:39,360
comes out

00:15:37,199 --> 00:15:42,160
yeah but in the meantime there are these

00:15:39,360 --> 00:15:44,880
gems that can satisfy particular needs

00:15:42,160 --> 00:15:45,519
so dry validation is probably the second

00:15:44,880 --> 00:15:48,639
oldest

00:15:45,519 --> 00:15:50,079
of our gems and it's it's gone through a

00:15:48,639 --> 00:15:50,720
lot of development over the years

00:15:50,079 --> 00:15:52,880
because

00:15:50,720 --> 00:15:54,959
it's an incredibly important and common

00:15:52,880 --> 00:15:58,800
task so dry validation

00:15:54,959 --> 00:16:00,240
is a library to help you validate

00:15:58,800 --> 00:16:01,839
any kind of data that you want your

00:16:00,240 --> 00:16:04,000
application to process so

00:16:01,839 --> 00:16:04,880
if you're building a web app in ruby

00:16:04,000 --> 00:16:06,800
what i

00:16:04,880 --> 00:16:08,399
always recommend is trying to validate

00:16:06,800 --> 00:16:10,160
your data as close to the edge of your

00:16:08,399 --> 00:16:12,720
application as possible so as soon as

00:16:10,160 --> 00:16:13,279
as soon as you've received your http

00:16:12,720 --> 00:16:15,199
request

00:16:13,279 --> 00:16:16,880
or as soon as you've got a json document

00:16:15,199 --> 00:16:20,399
that you want to process

00:16:16,880 --> 00:16:22,959
and drive validation lets you do that

00:16:20,399 --> 00:16:23,600
via standalone validation contracts so

00:16:22,959 --> 00:16:25,759
that means

00:16:23,600 --> 00:16:27,839
you can make a validation contract for

00:16:25,759 --> 00:16:28,880
every single different use case in your

00:16:27,839 --> 00:16:30,720
application

00:16:28,880 --> 00:16:32,959
whereas with the active record or active

00:16:30,720 --> 00:16:34,639
model style validations

00:16:32,959 --> 00:16:36,000
those are often bundled up with the

00:16:34,639 --> 00:16:38,880
actual domain

00:16:36,000 --> 00:16:39,519
object that they're meant to concern

00:16:38,880 --> 00:16:42,160
which

00:16:39,519 --> 00:16:43,120
which is helpful in some ways because

00:16:42,160 --> 00:16:44,880
they're all together

00:16:43,120 --> 00:16:47,120
but as soon as your application grows

00:16:44,880 --> 00:16:49,279
and applications always do

00:16:47,120 --> 00:16:50,800
you start to want to break out and

00:16:49,279 --> 00:16:51,519
validate things differently in different

00:16:50,800 --> 00:16:53,199
contexts

00:16:51,519 --> 00:16:54,639
and drive validation do you have an

00:16:53,199 --> 00:16:56,000
issue is this the two examples of

00:16:54,639 --> 00:16:57,440
the difference because i'm familiar with

00:16:56,000 --> 00:16:58,079
active record and the validations that

00:16:57,440 --> 00:17:00,639
they give you

00:16:58,079 --> 00:17:01,600
for free in rails yeah so an example

00:17:00,639 --> 00:17:04,000
might be

00:17:01,600 --> 00:17:06,240
say say you're building a blog and you

00:17:04,000 --> 00:17:08,799
have two types of users in your admin

00:17:06,240 --> 00:17:11,520
area you've got regular uh publishers

00:17:08,799 --> 00:17:12,319
and you've got sort of editors and the

00:17:11,520 --> 00:17:13,919
editors

00:17:12,319 --> 00:17:15,439
might be permitted to set some more

00:17:13,919 --> 00:17:17,600
flags on articles like they might be

00:17:15,439 --> 00:17:18,959
allowed to set the publication date or

00:17:17,600 --> 00:17:20,640
or some other sort of publishing

00:17:18,959 --> 00:17:23,280
workflow flags

00:17:20,640 --> 00:17:24,079
so in this case you need to you have two

00:17:23,280 --> 00:17:27,280
different people

00:17:24,079 --> 00:17:29,679
editing your blog posts one of them

00:17:27,280 --> 00:17:31,120
the regular author can only set the

00:17:29,679 --> 00:17:32,720
title in the body

00:17:31,120 --> 00:17:34,559
and so in this case we can set a

00:17:32,720 --> 00:17:38,000
validation contract just

00:17:34,559 --> 00:17:40,240
to model those validations

00:17:38,000 --> 00:17:41,679
uh whereas the the super users or the

00:17:40,240 --> 00:17:43,360
editors we can write a validation

00:17:41,679 --> 00:17:45,919
contract that models the

00:17:43,360 --> 00:17:48,080
the full breadth of attributes that they

00:17:45,919 --> 00:17:49,840
might want to change on the articles

00:17:48,080 --> 00:17:51,600
whereas if you had all your validations

00:17:49,840 --> 00:17:52,400
centralized on some sort of article

00:17:51,600 --> 00:17:55,280
model

00:17:52,400 --> 00:17:57,520
then it becomes a lot harder to think

00:17:55,280 --> 00:18:00,160
about each of those validation contexts

00:17:57,520 --> 00:18:01,200
in isolation let alone test them in

00:18:00,160 --> 00:18:02,720
isolation

00:18:01,200 --> 00:18:04,880
so here you end up with two separate

00:18:02,720 --> 00:18:06,720
ruby classes two different ruby objects

00:18:04,880 --> 00:18:08,400
with different responsibilities

00:18:06,720 --> 00:18:09,760
and you can work with them much more

00:18:08,400 --> 00:18:11,840
easily and understand

00:18:09,760 --> 00:18:13,440
each one much more easily and that

00:18:11,840 --> 00:18:14,000
that's a really big part of the drive

00:18:13,440 --> 00:18:15,679
philosophy

00:18:14,000 --> 00:18:18,400
which is we value single

00:18:15,679 --> 00:18:21,120
responsibilities and we try to let

00:18:18,400 --> 00:18:22,559
our gems we try to create our gems so

00:18:21,120 --> 00:18:24,320
that people can build

00:18:22,559 --> 00:18:26,000
single responsibility components using

00:18:24,320 --> 00:18:27,919
them okay yeah you're uh

00:18:26,000 --> 00:18:29,600
you're speaking like the uh what's the

00:18:27,919 --> 00:18:32,640
uh sandy mets

00:18:29,600 --> 00:18:33,200
practical object programming yes which

00:18:32,640 --> 00:18:36,720
uh

00:18:33,200 --> 00:18:38,559
for anybody who's uh unaware um

00:18:36,720 --> 00:18:40,480
the putter book this is something i read

00:18:38,559 --> 00:18:43,039
early in my programming career

00:18:40,480 --> 00:18:44,559
um it actually changed so i it was like

00:18:43,039 --> 00:18:45,919
my first job as a junior engineer it

00:18:44,559 --> 00:18:47,679
actually changed my approach about

00:18:45,919 --> 00:18:49,600
everything and i still use these

00:18:47,679 --> 00:18:50,320
concepts even in things like javascript

00:18:49,600 --> 00:18:52,320
as well

00:18:50,320 --> 00:18:53,520
yeah when i read that book for the first

00:18:52,320 --> 00:18:55,600
time i

00:18:53,520 --> 00:18:57,280
had that brain explode i'm enlightened

00:18:55,600 --> 00:18:58,960
moment but then i had

00:18:57,280 --> 00:19:01,200
immediately after this moment of

00:18:58,960 --> 00:19:02,720
confusion because sandy preaches such

00:19:01,200 --> 00:19:03,280
amazing practices but then i've looked

00:19:02,720 --> 00:19:05,360
back

00:19:03,280 --> 00:19:07,039
at the tools that i'm using at the time

00:19:05,360 --> 00:19:08,799
and i just wouldn't know how to

00:19:07,039 --> 00:19:10,559
exercise those practices using those

00:19:08,799 --> 00:19:12,400
tools like i thought i'd be finding my

00:19:10,559 --> 00:19:14,720
tools to exercise them

00:19:12,400 --> 00:19:16,240
and all i wanted to be able to do was

00:19:14,720 --> 00:19:18,320
look sandy mitts in the eye and feel

00:19:16,240 --> 00:19:21,200
good about the code that i'm writing so

00:19:18,320 --> 00:19:22,320
in the end uh what we did was create our

00:19:21,200 --> 00:19:25,200
own

00:19:22,320 --> 00:19:25,919
library of tools to to let people more

00:19:25,200 --> 00:19:27,840
easily

00:19:25,919 --> 00:19:28,880
model their code in a way that adheres

00:19:27,840 --> 00:19:29,919
to some of these really helpful

00:19:28,880 --> 00:19:31,760
principles

00:19:29,919 --> 00:19:33,600
okay so yeah we talked about the

00:19:31,760 --> 00:19:36,720
validations and then we have these

00:19:33,600 --> 00:19:38,799
so you have a dry struct um

00:19:36,720 --> 00:19:40,320
so these are sort of semi-related

00:19:38,799 --> 00:19:43,360
they're in the sort of same family

00:19:40,320 --> 00:19:45,760
of of tools this is all about uh

00:19:43,360 --> 00:19:46,960
precision modeling and clarity around

00:19:45,760 --> 00:19:50,559
your data

00:19:46,960 --> 00:19:52,400
and ruby is famously um

00:19:50,559 --> 00:19:53,760
it has it's fast and loose when it comes

00:19:52,400 --> 00:19:56,559
to handling types in general

00:19:53,760 --> 00:19:57,280
yeah uh but it is helpful to lay on some

00:19:56,559 --> 00:19:59,440
strictness

00:19:57,280 --> 00:20:00,559
where it makes sense for your domain so

00:19:59,440 --> 00:20:03,120
dry types is

00:20:00,559 --> 00:20:03,919
a data typing library uh you'll see the

00:20:03,120 --> 00:20:06,480
example there

00:20:03,919 --> 00:20:08,400
it gives you the opportunity to create

00:20:06,480 --> 00:20:11,280
well-named types that represent

00:20:08,400 --> 00:20:12,640
certain uh cert the structure for

00:20:11,280 --> 00:20:13,919
certain pieces of data that you want in

00:20:12,640 --> 00:20:17,039
your application

00:20:13,919 --> 00:20:19,280
so you know you might make for instance

00:20:17,039 --> 00:20:20,880
a type that represents an article slug

00:20:19,280 --> 00:20:23,280
and you want to make sure that

00:20:20,880 --> 00:20:24,799
some piece of data is conformant with a

00:20:23,280 --> 00:20:26,799
slug and

00:20:24,799 --> 00:20:27,919
for example's sake we might say a slug

00:20:26,799 --> 00:20:30,640
has to be lowercased

00:20:27,919 --> 00:20:32,000
and dashes only so you can create a type

00:20:30,640 --> 00:20:32,799
that represents that and once you do

00:20:32,000 --> 00:20:34,320
that once

00:20:32,799 --> 00:20:36,000
you can reuse that logic throughout the

00:20:34,320 --> 00:20:37,280
entirety of your application okay

00:20:36,000 --> 00:20:39,039
including uh

00:20:37,280 --> 00:20:40,559
by making your own struct classes which

00:20:39,039 --> 00:20:43,919
is the the dry structure

00:20:40,559 --> 00:20:45,840
there okay so this so you see their

00:20:43,919 --> 00:20:47,280
class person if we keep with my example

00:20:45,840 --> 00:20:49,120
you might have class article

00:20:47,280 --> 00:20:51,360
yeah these are the kinds of things that

00:20:49,120 --> 00:20:53,520
your rails models typically represent

00:20:51,360 --> 00:20:55,440
but the the challenge of rails models is

00:20:53,520 --> 00:20:56,159
that they do so many things they model

00:20:55,440 --> 00:20:57,919
your data

00:20:56,159 --> 00:20:59,760
they they hold the attributes they carry

00:20:57,919 --> 00:21:02,080
a live connection to the database

00:20:59,760 --> 00:21:02,799
they represent validations they do dirty

00:21:02,080 --> 00:21:05,039
tracking

00:21:02,799 --> 00:21:06,080
they have a state that can be mutated in

00:21:05,039 --> 00:21:08,559
a thousand ways

00:21:06,080 --> 00:21:10,400
which makes it hard to test them hard to

00:21:08,559 --> 00:21:10,799
understand how they're used and it means

00:21:10,400 --> 00:21:12,559
that

00:21:10,799 --> 00:21:13,840
you have to be really careful when you

00:21:12,559 --> 00:21:15,039
pass them around your application

00:21:13,840 --> 00:21:16,480
because some view

00:21:15,039 --> 00:21:17,760
over over a way on the other side of

00:21:16,480 --> 00:21:19,280
your app might make a query to the

00:21:17,760 --> 00:21:21,600
database by accident and suddenly you've

00:21:19,280 --> 00:21:24,400
got an n plus one problem

00:21:21,600 --> 00:21:25,200
with dry struct you have the opportunity

00:21:24,400 --> 00:21:27,280
to model

00:21:25,200 --> 00:21:28,799
your domain entities as simple value

00:21:27,280 --> 00:21:31,200
objects so this is

00:21:28,799 --> 00:21:32,480
this is an immutable object that carries

00:21:31,200 --> 00:21:35,760
just the data

00:21:32,480 --> 00:21:37,760
and allows you to add extra behavior

00:21:35,760 --> 00:21:39,440
around that data if you want

00:21:37,760 --> 00:21:41,360
and you'll know they'll always be valid

00:21:39,440 --> 00:21:42,240
because they can't be initialized unless

00:21:41,360 --> 00:21:44,640
that data is

00:21:42,240 --> 00:21:45,600
already conformant to all those types

00:21:44,640 --> 00:21:48,240
and attributes

00:21:45,600 --> 00:21:49,120
so you get a lot more confidence uh when

00:21:48,240 --> 00:21:50,880
you pass these

00:21:49,120 --> 00:21:52,720
uh structs around and work with them in

00:21:50,880 --> 00:21:55,679
your application

00:21:52,720 --> 00:21:57,120
excellent yeah that's i mean you talk

00:21:55,679 --> 00:21:58,640
about the i brought up

00:21:57,120 --> 00:22:00,000
uh the putter book and sandy mess

00:21:58,640 --> 00:22:01,600
because as you're explaining this i'm

00:22:00,000 --> 00:22:03,520
like oh yeah

00:22:01,600 --> 00:22:04,880
yeah like wrestling your tools is

00:22:03,520 --> 00:22:06,320
something that i definitely

00:22:04,880 --> 00:22:08,080
as a junior engineer when i first read

00:22:06,320 --> 00:22:09,760
that book i felt like that i had

00:22:08,080 --> 00:22:11,200
i had the hammer even though she

00:22:09,760 --> 00:22:12,559
actually specifically calls it out in

00:22:11,200 --> 00:22:13,840
the book not to do

00:22:12,559 --> 00:22:16,080
but i had the hammer and i was going to

00:22:13,840 --> 00:22:17,360
hammer everything i knew or everything i

00:22:16,080 --> 00:22:20,000
approached because i had

00:22:17,360 --> 00:22:21,200
like all this knowledge but you find

00:22:20,000 --> 00:22:22,320
that really quickly especially if you're

00:22:21,200 --> 00:22:23,679
in a rails project

00:22:22,320 --> 00:22:25,360
that you didn't have to build all these

00:22:23,679 --> 00:22:27,440
other abstractions that then i think

00:22:25,360 --> 00:22:28,400
might be counter and productive like i

00:22:27,440 --> 00:22:29,679
had um

00:22:28,400 --> 00:22:31,600
there was another clean ruby book

00:22:29,679 --> 00:22:32,080
actually i read around uh shortly after

00:22:31,600 --> 00:22:35,039
that

00:22:32,080 --> 00:22:37,280
i forgot the author of that but um his

00:22:35,039 --> 00:22:40,480
approach was like these service objects

00:22:37,280 --> 00:22:41,360
um and ice we started me and a few other

00:22:40,480 --> 00:22:43,039
people on our team

00:22:41,360 --> 00:22:45,440
started making all these service objects

00:22:43,039 --> 00:22:47,280
for everything uh and this became out

00:22:45,440 --> 00:22:48,799
it just turned out a hand like yes we

00:22:47,280 --> 00:22:50,480
could test them really well

00:22:48,799 --> 00:22:52,480
uh but no one could read the code

00:22:50,480 --> 00:22:54,320
because we got too too clever

00:22:52,480 --> 00:22:56,480
and i think that's uh another struggle

00:22:54,320 --> 00:22:57,520
that we have to sort of combat as we

00:22:56,480 --> 00:22:59,360
figure out how to

00:22:57,520 --> 00:23:00,960
yeah do some of these things like the

00:22:59,360 --> 00:23:02,080
cleverness is what we what we really

00:23:00,960 --> 00:23:03,600
fall over

00:23:02,080 --> 00:23:06,240
yeah that's that's in fact one of the

00:23:03,600 --> 00:23:09,440
other things that dryabi does help with

00:23:06,240 --> 00:23:11,120
uh in terms of building functional

00:23:09,440 --> 00:23:12,559
service objects command objects query

00:23:11,120 --> 00:23:15,360
objects call them what you want

00:23:12,559 --> 00:23:16,880
but drive system and some of its

00:23:15,360 --> 00:23:18,559
companion gems

00:23:16,880 --> 00:23:20,159
make it really easy for you to work with

00:23:18,559 --> 00:23:21,039
dependency injection inside your

00:23:20,159 --> 00:23:22,880
application

00:23:21,039 --> 00:23:24,320
and dependency injection is one of the

00:23:22,880 --> 00:23:27,039
things in the poodle book

00:23:24,320 --> 00:23:28,799
that that made sense immediately when

00:23:27,039 --> 00:23:30,240
sandy introduced it but i had no idea

00:23:28,799 --> 00:23:33,600
how to implement in real life

00:23:30,240 --> 00:23:34,960
and so we we provide a set of tools that

00:23:33,600 --> 00:23:37,120
organize all the components in your

00:23:34,960 --> 00:23:38,799
application and make it really easy for

00:23:37,120 --> 00:23:41,360
you to follow a simple pattern

00:23:38,799 --> 00:23:42,080
in terms of composing those components

00:23:41,360 --> 00:23:44,400
so you'll see

00:23:42,080 --> 00:23:45,679
in that create article example at the

00:23:44,400 --> 00:23:48,880
bottom there

00:23:45,679 --> 00:23:50,480
we include that module which defines the

00:23:48,880 --> 00:23:52,080
default dependencies that you want to be

00:23:50,480 --> 00:23:53,440
injected and each one of those

00:23:52,080 --> 00:23:55,600
dependencies is a

00:23:53,440 --> 00:23:57,760
is an identifier in this container that

00:23:55,600 --> 00:23:58,960
that organizes the components in your

00:23:57,760 --> 00:24:01,520
system so

00:23:58,960 --> 00:24:02,960
it actually becomes really low friction

00:24:01,520 --> 00:24:05,360
to start to write

00:24:02,960 --> 00:24:07,279
single purpose composable components

00:24:05,360 --> 00:24:08,799
that can be tested independently

00:24:07,279 --> 00:24:10,640
thought about in isolation but then

00:24:08,799 --> 00:24:13,840
brought together to achieve

00:24:10,640 --> 00:24:13,840
far more powerful results

00:24:13,919 --> 00:24:19,520
very cool yeah i mean monads that's a

00:24:17,760 --> 00:24:21,440
that's a sticky subject right there

00:24:19,520 --> 00:24:23,600
that's that's the last aspect of our

00:24:21,440 --> 00:24:25,520
sort of functional approach but

00:24:23,600 --> 00:24:27,120
i use them a lot uh they come with some

00:24:25,520 --> 00:24:28,799
baggage but i actually find they're

00:24:27,120 --> 00:24:30,240
really helpful if you just think about

00:24:28,799 --> 00:24:32,000
them as a way to

00:24:30,240 --> 00:24:33,840
signal successful failure for your

00:24:32,000 --> 00:24:35,520
operations and

00:24:33,840 --> 00:24:37,279
once you start to do that you also get

00:24:35,520 --> 00:24:39,039
some really amazing

00:24:37,279 --> 00:24:40,480
benefits like being able to chain them

00:24:39,039 --> 00:24:42,960
together safely and

00:24:40,480 --> 00:24:43,760
create sort of railways railway style

00:24:42,960 --> 00:24:46,159
programming

00:24:43,760 --> 00:24:47,760
yeah uh in ruby of all places so you get

00:24:46,159 --> 00:24:49,919
the benefits of some of these functional

00:24:47,760 --> 00:24:51,440
approaches but you still get the comfort

00:24:49,919 --> 00:24:54,240
flexibility amazing

00:24:51,440 --> 00:24:55,919
um ecosystem of of this mature

00:24:54,240 --> 00:24:58,000
programming language that we that we use

00:24:55,919 --> 00:25:00,320
every day

00:24:58,000 --> 00:25:02,000
awesome so i yeah we just reached the

00:25:00,320 --> 00:25:05,679
end of our functional journey

00:25:02,000 --> 00:25:07,600
um i'm curious yeah so yeah go ahead so

00:25:05,679 --> 00:25:09,600
the the benefit of splitting these up is

00:25:07,600 --> 00:25:10,640
that uh you can pick and choose which of

00:25:09,600 --> 00:25:11,679
these you want to work with

00:25:10,640 --> 00:25:14,640
if you don't want to use them all

00:25:11,679 --> 00:25:16,159
together and so we've we've had we've

00:25:14,640 --> 00:25:18,400
we've got thousands of users i'm sure

00:25:16,159 --> 00:25:20,559
around the world um i know that drive

00:25:18,400 --> 00:25:21,600
libraries dry validation is used in

00:25:20,559 --> 00:25:22,960
shopify um

00:25:21,600 --> 00:25:24,480
they have probably some of the most

00:25:22,960 --> 00:25:25,440
gnarly validations on the planet when it

00:25:24,480 --> 00:25:26,960
comes to

00:25:25,440 --> 00:25:29,600
shopping cart validation and things like

00:25:26,960 --> 00:25:31,520
that um netflix uses dry structure and

00:25:29,600 --> 00:25:33,760
dry types i know it's used in some

00:25:31,520 --> 00:25:37,120
systems behind the scenes at apple

00:25:33,760 --> 00:25:39,120
uh so it is it's a beginning beginning

00:25:37,120 --> 00:25:40,720
to become a widely accepted project and

00:25:39,120 --> 00:25:41,600
in the early days we saw a lot of people

00:25:40,720 --> 00:25:43,200
scratch their heads

00:25:41,600 --> 00:25:45,039
and wonder why we're building things in

00:25:43,200 --> 00:25:47,600
this way

00:25:45,039 --> 00:25:48,799
that's because i think i think there are

00:25:47,600 --> 00:25:50,960
two types of people

00:25:48,799 --> 00:25:52,320
looking at dry bee projects they're the

00:25:50,960 --> 00:25:54,080
types that wonder why it's even

00:25:52,320 --> 00:25:55,760
necessary because they're writing

00:25:54,080 --> 00:25:57,440
simple applications that rails serves

00:25:55,760 --> 00:25:58,799
beautifully um

00:25:57,440 --> 00:26:00,400
and then the other type is a person who

00:25:58,799 --> 00:26:02,240
instantly recognizes the need for these

00:26:00,400 --> 00:26:03,600
sorts of tools and and knows exactly how

00:26:02,240 --> 00:26:04,799
they might want to slot them into their

00:26:03,600 --> 00:26:06,799
application and by

00:26:04,799 --> 00:26:09,279
splitting them up like this uh we've

00:26:06,799 --> 00:26:11,600
made it possible for that to happen

00:26:09,279 --> 00:26:13,600
awesome so i just jumped i as you were

00:26:11,600 --> 00:26:16,000
talking i jumped into a whole nother uh

00:26:13,600 --> 00:26:16,960
uh into a repo but i also want to

00:26:16,000 --> 00:26:18,240
acknowledge some of the people in the

00:26:16,960 --> 00:26:19,360
chat too that are joining so i

00:26:18,240 --> 00:26:21,840
appreciate uh

00:26:19,360 --> 00:26:22,799
mish uh helping uh guide everybody and

00:26:21,840 --> 00:26:24,720
saying hello

00:26:22,799 --> 00:26:26,960
but just want to say hello to yg

00:26:24,720 --> 00:26:28,480
actually i've seen you in my repos i'm

00:26:26,960 --> 00:26:30,640
very happy you're here

00:26:28,480 --> 00:26:32,080
and uh a couple other people too as well

00:26:30,640 --> 00:26:32,799
just been talking about the fact that

00:26:32,080 --> 00:26:34,320
we're

00:26:32,799 --> 00:26:36,480
not we're not playing games on twitch

00:26:34,320 --> 00:26:38,799
right now we're actually we're

00:26:36,480 --> 00:26:39,760
we're showing off code which is uh how

00:26:38,799 --> 00:26:41,120
games are made

00:26:39,760 --> 00:26:43,279
i guess i'm not sure if there's any

00:26:41,120 --> 00:26:45,200
games that are using this library but

00:26:43,279 --> 00:26:48,640
perhaps the websites that power those uh

00:26:45,200 --> 00:26:51,840
those login dashboards i'm sure

00:26:48,640 --> 00:26:52,720
so i'm curious that if we're able to get

00:26:51,840 --> 00:26:54,480
like a

00:26:52,720 --> 00:26:56,240
actually just notice too as well the the

00:26:54,480 --> 00:26:58,559
use by is a great little

00:26:56,240 --> 00:26:59,600
way to find out at least what projects

00:26:58,559 --> 00:27:03,120
have installed

00:26:59,600 --> 00:27:05,440
um drive validations in particular

00:27:03,120 --> 00:27:06,799
so anybody's who's interested in sort of

00:27:05,440 --> 00:27:09,279
jumping in there and figuring that out

00:27:06,799 --> 00:27:10,320
um definitely click that big old package

00:27:09,279 --> 00:27:12,400
button

00:27:10,320 --> 00:27:14,320
um but are you able to give us a tour of

00:27:12,400 --> 00:27:14,720
maybe one of the uh the repos and sort

00:27:14,320 --> 00:27:17,600
of how

00:27:14,720 --> 00:27:19,360
the structure of it is laid out yeah so

00:27:17,600 --> 00:27:21,840
dry validation is probably a pretty good

00:27:19,360 --> 00:27:21,840
one to look at

00:27:22,799 --> 00:27:26,000
in terms of how ruby gems are packaged

00:27:24,640 --> 00:27:28,480
these follow the

00:27:26,000 --> 00:27:29,520
standard practices so we have a gem spec

00:27:28,480 --> 00:27:32,960
which is the

00:27:29,520 --> 00:27:35,120
sort of the the the

00:27:32,960 --> 00:27:37,000
file that defines your gem it's down the

00:27:35,120 --> 00:27:39,279
bottom there

00:27:37,000 --> 00:27:39,679
drivevalidation.gemspec okay there we

00:27:39,279 --> 00:27:42,320
are

00:27:39,679 --> 00:27:44,720
yep so that's just the sort of metadata

00:27:42,320 --> 00:27:47,200
that the rubygems package

00:27:44,720 --> 00:27:48,880
system uses in order to that's the

00:27:47,200 --> 00:27:50,399
return information

00:27:48,880 --> 00:27:52,080
if anybody's against it yeah if

00:27:50,399 --> 00:27:55,840
anybody's not familiar with ruby

00:27:52,080 --> 00:27:58,080
in rubygems uh similar like npm packages

00:27:55,840 --> 00:28:00,000
uh pip packages this is where ruby sort

00:27:58,080 --> 00:28:02,399
of the community has collectively

00:28:00,000 --> 00:28:04,640
decided to put all their code um

00:28:02,399 --> 00:28:06,320
for sort of installing and downloading

00:28:04,640 --> 00:28:08,000
it lives here on rupee gym so

00:28:06,320 --> 00:28:10,880
i think if we can you look it up drive

00:28:08,000 --> 00:28:10,880
validation let's see

00:28:12,399 --> 00:28:17,039
nearly 10 million downloads that's

00:28:13,840 --> 00:28:19,600
pretty good yeah not bad it's uh

00:28:17,039 --> 00:28:20,799
that's a pretty good weekend oh update

00:28:19,600 --> 00:28:21,840
in the last okay i don't know if that

00:28:20,799 --> 00:28:25,279
was per month but yeah

00:28:21,840 --> 00:28:27,039
that's total that's all time

00:28:25,279 --> 00:28:29,039
this is this is not the this is not the

00:28:27,039 --> 00:28:29,679
js ecosystem yeah you know we do our

00:28:29,039 --> 00:28:32,159
best

00:28:29,679 --> 00:28:33,520
yeah yeah javascript they uh well yeah

00:28:32,159 --> 00:28:36,559
they're they're pretty intense with

00:28:33,520 --> 00:28:36,559
their downloads for sure

00:28:37,120 --> 00:28:43,919
yeah awesome and i i see a familiar face

00:28:41,600 --> 00:28:45,440
yeah yeah so that that just goes to show

00:28:43,919 --> 00:28:46,880
when we say the package is managed by a

00:28:45,440 --> 00:28:49,679
small handful of people

00:28:46,880 --> 00:28:50,880
uh only really three of those faces are

00:28:49,679 --> 00:28:52,399
still sort of actively looking after

00:28:50,880 --> 00:28:54,320
that project at the moment

00:28:52,399 --> 00:28:56,399
so i'm curious uh before we jump back

00:28:54,320 --> 00:28:58,880
into the code who supports this

00:28:56,399 --> 00:29:00,320
so who's who's other than all your free

00:28:58,880 --> 00:29:03,279
time and sweat and tears

00:29:00,320 --> 00:29:06,000
um like how does how does a project like

00:29:03,279 --> 00:29:09,600
this stay afloat

00:29:06,000 --> 00:29:11,840
uh through a lot of free labor um

00:29:09,600 --> 00:29:12,799
and you know i want to acknowledge that

00:29:11,840 --> 00:29:15,919
i

00:29:12,799 --> 00:29:19,200
am privileged enough to offer that um

00:29:15,919 --> 00:29:22,480
which which is something that is a

00:29:19,200 --> 00:29:24,399
a tricky subject um but

00:29:22,480 --> 00:29:26,159
you know there's a lot people benefit a

00:29:24,399 --> 00:29:27,520
lot from open source in the broader

00:29:26,159 --> 00:29:29,279
community

00:29:27,520 --> 00:29:30,799
and i'm very happy that i can contribute

00:29:29,279 --> 00:29:32,159
but not everyone can

00:29:30,799 --> 00:29:34,799
open source contributions don't

00:29:32,159 --> 00:29:37,600
necessarily signify that you're

00:29:34,799 --> 00:29:39,200
more or less worthy as a developer but i

00:29:37,600 --> 00:29:40,559
just so happen to have been lucky enough

00:29:39,200 --> 00:29:42,960
to

00:29:40,559 --> 00:29:45,120
put myself out there but in terms of how

00:29:42,960 --> 00:29:48,399
these things are supported

00:29:45,120 --> 00:29:51,520
it is an entirely volunteer run project

00:29:48,399 --> 00:29:53,120
in my in my previous job i was one of

00:29:51,520 --> 00:29:54,000
the owners of the company so i got to

00:29:53,120 --> 00:29:56,960
spend a bit of company

00:29:54,000 --> 00:29:58,559
time on it but these days it's all uh

00:29:56,960 --> 00:30:01,600
nights and weekends

00:29:58,559 --> 00:30:03,600
and it's just something that we've all

00:30:01,600 --> 00:30:05,840
learned to become patient with

00:30:03,600 --> 00:30:07,039
open source happens when it happens i

00:30:05,840 --> 00:30:09,840
think ruby in particular

00:30:07,039 --> 00:30:10,720
doesn't have the huge corporate backing

00:30:09,840 --> 00:30:14,080
that you see

00:30:10,720 --> 00:30:15,279
in some language ecosystems or tooling

00:30:14,080 --> 00:30:18,080
ecosystems

00:30:15,279 --> 00:30:19,440
so we just do our best and fortunately

00:30:18,080 --> 00:30:22,559
our community is

00:30:19,440 --> 00:30:25,679
really accommodating of that

00:30:22,559 --> 00:30:27,039
uh you know these two to our benefit

00:30:25,679 --> 00:30:27,600
these are still relatively small

00:30:27,039 --> 00:30:30,880
projects

00:30:27,600 --> 00:30:31,440
and it is uh it is manageable to stay on

00:30:30,880 --> 00:30:33,440
top of them

00:30:31,440 --> 00:30:34,840
as a side project but yeah that's how

00:30:33,440 --> 00:30:38,399
that's how it happens

00:30:34,840 --> 00:30:39,919
and i think all of us

00:30:38,399 --> 00:30:41,679
the one nice thing about it is that

00:30:39,919 --> 00:30:44,000
we're not just making this

00:30:41,679 --> 00:30:44,960
exclusively on the side we get to use

00:30:44,000 --> 00:30:47,440
all of these gems

00:30:44,960 --> 00:30:48,799
uh so the the three of the core team for

00:30:47,440 --> 00:30:51,919
dryer b which is uh

00:30:48,799 --> 00:30:53,600
me piot somnitsa who's the second face

00:30:51,919 --> 00:30:54,799
there and nikita shionikov who's the

00:30:53,600 --> 00:30:57,679
last face there

00:30:54,799 --> 00:30:58,320
uh we all use these tools in our work

00:30:57,679 --> 00:31:01,600
projects

00:30:58,320 --> 00:31:04,000
so and i think that's a really important

00:31:01,600 --> 00:31:06,000
aspect of the open source development

00:31:04,000 --> 00:31:07,679
life cycle

00:31:06,000 --> 00:31:09,440
you really need to be able to see the

00:31:07,679 --> 00:31:11,200
problems and feel the problems

00:31:09,440 --> 00:31:12,880
in your day-to-day application

00:31:11,200 --> 00:31:15,360
development life

00:31:12,880 --> 00:31:15,919
identify needs try and help satisfy

00:31:15,360 --> 00:31:18,240
those

00:31:15,919 --> 00:31:19,679
needs by building tools and then use

00:31:18,240 --> 00:31:21,840
those tools again to see if they

00:31:19,679 --> 00:31:24,880
actually fit that's a really important

00:31:21,840 --> 00:31:26,799
feedback cycle and i'm really happy that

00:31:24,880 --> 00:31:28,320
i've been able to work through that

00:31:26,799 --> 00:31:30,000
feedback cycle over many years

00:31:28,320 --> 00:31:31,919
and i think they make you know they've

00:31:30,000 --> 00:31:33,440
made for some really well-rounded tools

00:31:31,919 --> 00:31:35,519
uh today

00:31:33,440 --> 00:31:36,880
yeah and i'm curious like how does one

00:31:35,519 --> 00:31:39,039
how does one person

00:31:36,880 --> 00:31:40,640
even approach like i've used a lot of

00:31:39,039 --> 00:31:41,200
libraries i've used a lot of gems in a

00:31:40,640 --> 00:31:42,880
lot of

00:31:41,200 --> 00:31:44,720
javascript packages and et cetera et

00:31:42,880 --> 00:31:47,760
cetera like how does one

00:31:44,720 --> 00:31:49,600
person even think through or approach

00:31:47,760 --> 00:31:50,960
or is it through company sponsorship or

00:31:49,600 --> 00:31:52,399
your own sponsorship when you're running

00:31:50,960 --> 00:31:53,760
a company like how do you even approach

00:31:52,399 --> 00:31:56,159
to

00:31:53,760 --> 00:31:58,399
go into a project and say something's

00:31:56,159 --> 00:32:01,440
broken or i would like to participate

00:31:58,399 --> 00:32:02,720
and and uh ship something and maybe

00:32:01,440 --> 00:32:04,559
we're jumping ahead of ourselves too

00:32:02,720 --> 00:32:07,279
because like we literally just

00:32:04,559 --> 00:32:08,080
walked through looking at the metadata

00:32:07,279 --> 00:32:10,000
well

00:32:08,080 --> 00:32:11,279
that's a good question and i would say

00:32:10,000 --> 00:32:14,080
that for

00:32:11,279 --> 00:32:15,760
projects like ours which are mostly

00:32:14,080 --> 00:32:18,240
volunteer driven

00:32:15,760 --> 00:32:20,640
those sorts of pieces of feedback and

00:32:18,240 --> 00:32:22,880
contributions are extremely welcome

00:32:20,640 --> 00:32:24,640
you know if someone sees a need and

00:32:22,880 --> 00:32:25,919
discusses it with us and we all agree

00:32:24,640 --> 00:32:27,919
together that it's

00:32:25,919 --> 00:32:29,519
it's an adjustment or an improvement or

00:32:27,919 --> 00:32:31,760
a new feature that we think would fit

00:32:29,519 --> 00:32:35,840
with the ethos of these libraries

00:32:31,760 --> 00:32:38,960
then that is uh really really welcome

00:32:35,840 --> 00:32:40,480
uh and i know piotr has certainly said

00:32:38,960 --> 00:32:42,240
on a number of occasions where he's gone

00:32:40,480 --> 00:32:43,919
through a whole month where

00:32:42,240 --> 00:32:45,519
with tools like dry validation most of

00:32:43,919 --> 00:32:47,120
his job has been merging community

00:32:45,519 --> 00:32:47,919
contributions which is you know an

00:32:47,120 --> 00:32:50,399
amazing thing

00:32:47,919 --> 00:32:51,440
when you see that uh open source network

00:32:50,399 --> 00:32:54,559
effect uh

00:32:51,440 --> 00:32:57,600
start to happen uh but

00:32:54,559 --> 00:32:59,600
we're friendly people we have uh a code

00:32:57,600 --> 00:33:02,159
of conducts all our projects these are

00:32:59,600 --> 00:33:03,200
uh these are spaces where people are

00:33:02,159 --> 00:33:06,399
welcome to come in

00:33:03,200 --> 00:33:08,080
and share their questions their feedback

00:33:06,399 --> 00:33:11,279
and hopefully that can lead to

00:33:08,080 --> 00:33:15,120
improvements to the tools excellent

00:33:11,279 --> 00:33:17,760
yeah we have some questions um i think

00:33:15,120 --> 00:33:18,799
i said ayawski but it had to be 10 10

00:33:17,760 --> 00:33:21,440
waski

00:33:18,799 --> 00:33:22,000
but yeah twitch handles are challenging

00:33:21,440 --> 00:33:23,600
but

00:33:22,000 --> 00:33:25,440
we didn't really address the whole

00:33:23,600 --> 00:33:27,760
migration from version one but i think

00:33:25,440 --> 00:33:30,399
we could probably if we have time we can

00:33:27,760 --> 00:33:31,440
jump into the other project um and maybe

00:33:30,399 --> 00:33:33,039
talk about that

00:33:31,440 --> 00:33:34,000
but i did want to address that some

00:33:33,039 --> 00:33:35,360
people are asking if you're the

00:33:34,000 --> 00:33:36,640
maintainer of ruby gems

00:33:35,360 --> 00:33:39,679
and i don't know if you want to address

00:33:36,640 --> 00:33:42,399
that i'm not the maintainer of ruby gems

00:33:39,679 --> 00:33:45,200
uh the ruby gem i'm the maintainer of

00:33:42,399 --> 00:33:48,559
these ruby gems but not rubygems itself

00:33:45,200 --> 00:33:50,399
uh ruby uh has an amazing community of

00:33:48,559 --> 00:33:52,320
other people who handle things like that

00:33:50,399 --> 00:33:54,080
yes for sure yeah hopefully we'll have

00:33:52,320 --> 00:33:57,679
uh the ruby gems uh

00:33:54,080 --> 00:34:01,519
folks on in the future we'll see how uh

00:33:57,679 --> 00:34:03,440
how big this open source friday becomes

00:34:01,519 --> 00:34:04,559
so with the uh and my understanding of

00:34:03,440 --> 00:34:07,679
like ruby gems

00:34:04,559 --> 00:34:11,040
is the um i get the gem stack actually

00:34:07,679 --> 00:34:12,240
i've built one gem which is uh

00:34:11,040 --> 00:34:14,560
i'm only going to mention it because i

00:34:12,240 --> 00:34:16,800
love mentioning it uh mainly because i

00:34:14,560 --> 00:34:20,639
built it on a weekend like a saturday

00:34:16,800 --> 00:34:22,480
and it's uh it's called marky markdown

00:34:20,639 --> 00:34:24,639
which is not an original name i'm just

00:34:22,480 --> 00:34:25,520
gonna say that out loud if anybody's

00:34:24,639 --> 00:34:26,879
wondering but

00:34:25,520 --> 00:34:28,480
this was actually my first gym i

00:34:26,879 --> 00:34:29,839
actually published rubygems i built a

00:34:28,480 --> 00:34:32,800
couple other gyms but

00:34:29,839 --> 00:34:33,679
mainly as training purposes but it's a

00:34:32,800 --> 00:34:36,879
it's a markdown

00:34:33,679 --> 00:34:38,960
parser so i can power my github actions

00:34:36,879 --> 00:34:40,320
and basically i take variables and

00:34:38,960 --> 00:34:41,520
markdown actually

00:34:40,320 --> 00:34:44,240
my action is called variables and

00:34:41,520 --> 00:34:46,960
markdown uh and then my example is like

00:34:44,240 --> 00:34:48,320
um the way it works actually i didn't do

00:34:46,960 --> 00:34:50,399
a good job in explaining

00:34:48,320 --> 00:34:51,760
the uh the code and the readme as i'm

00:34:50,399 --> 00:34:54,879
looking at it now

00:34:51,760 --> 00:34:56,000
but uh i'm just taking a transformer

00:34:54,879 --> 00:34:58,320
and then i'm transforming that

00:34:56,000 --> 00:34:58,720
transformer and then outputs the body

00:34:58,320 --> 00:35:01,760
with

00:34:58,720 --> 00:35:03,359
the variables been transformed

00:35:01,760 --> 00:35:04,880
sorry that was like a it was a long way

00:35:03,359 --> 00:35:06,400
to get to a joke and that's the second

00:35:04,880 --> 00:35:07,760
time i've done a stream where i got to

00:35:06,400 --> 00:35:08,560
this point where i share a marquee

00:35:07,760 --> 00:35:10,880
markdown

00:35:08,560 --> 00:35:12,000
but i digress i think i think pun driven

00:35:10,880 --> 00:35:13,599
development's a thing

00:35:12,000 --> 00:35:15,119
it happens and i feel like there's a lot

00:35:13,599 --> 00:35:17,520
of freedom in that yeah

00:35:15,119 --> 00:35:19,040
we sidestepped that with dryer b by by

00:35:17,520 --> 00:35:20,640
picking the world's most boring naming

00:35:19,040 --> 00:35:22,480
scheme but it is uh

00:35:20,640 --> 00:35:24,400
naming is one of the hard things so we

00:35:22,480 --> 00:35:25,599
sort of took care of that by coming out

00:35:24,400 --> 00:35:26,960
with a very simple rule

00:35:25,599 --> 00:35:29,200
yeah and we actually skipped over the

00:35:26,960 --> 00:35:32,480
fact of dryer b actually being uh

00:35:29,200 --> 00:35:34,960
the acronym itself and we i picked up on

00:35:32,480 --> 00:35:36,000
the sandy met's philosophy of practical

00:35:34,960 --> 00:35:39,119
object

00:35:36,000 --> 00:35:41,440
project practical object oriented design

00:35:39,119 --> 00:35:42,960
uh in ruby but dry is also our acronym

00:35:41,440 --> 00:35:45,359
which is um

00:35:42,960 --> 00:35:47,119
do you want to explain dry yeah it

00:35:45,359 --> 00:35:48,560
stands for don't repeat yourself uh the

00:35:47,119 --> 00:35:50,880
idea being that

00:35:48,560 --> 00:35:52,240
if you have a thing that you need to do

00:35:50,880 --> 00:35:55,040
multiple times over

00:35:52,240 --> 00:35:56,240
it makes sense to build some abstraction

00:35:55,040 --> 00:35:57,680
to help you do that thing without

00:35:56,240 --> 00:36:01,119
repeating the

00:35:57,680 --> 00:36:02,640
the steps uh it's it's uh so yeah we

00:36:01,119 --> 00:36:05,119
sort of co-opted that for our

00:36:02,640 --> 00:36:06,400
organization name because each of these

00:36:05,119 --> 00:36:08,880
tools helps you avoid

00:36:06,400 --> 00:36:11,200
you know repeating yourself excellent

00:36:08,880 --> 00:36:12,960
yeah so i i went down that tangent about

00:36:11,200 --> 00:36:14,560
rubygems because i understand like the

00:36:12,960 --> 00:36:16,160
um

00:36:14,560 --> 00:36:18,000
that the code itself like it should be

00:36:16,160 --> 00:36:19,119
pretty approachable so did we want to

00:36:18,000 --> 00:36:21,200
look through some of the code and how

00:36:19,119 --> 00:36:24,000
that's sort of bundled yeah

00:36:21,200 --> 00:36:24,720
it works so the lib directory is where

00:36:24,000 --> 00:36:26,320
all the

00:36:24,720 --> 00:36:28,400
implementation code lives and that's the

00:36:26,320 --> 00:36:28,960
same for all ruby ruby projects

00:36:28,400 --> 00:36:32,000
typically

00:36:28,960 --> 00:36:32,640
uh ruby libraries i mean apps can be a

00:36:32,000 --> 00:36:35,200
bit different

00:36:32,640 --> 00:36:35,760
yeah and the directory structure more or

00:36:35,200 --> 00:36:38,800
less

00:36:35,760 --> 00:36:39,280
mirrors your module name space so all of

00:36:38,800 --> 00:36:41,599
our

00:36:39,280 --> 00:36:42,800
modules all of our gems live within the

00:36:41,599 --> 00:36:44,960
dry name space

00:36:42,800 --> 00:36:46,640
so we have that top level dry folder and

00:36:44,960 --> 00:36:47,440
so everything dry validation related

00:36:46,640 --> 00:36:51,200
will be

00:36:47,440 --> 00:36:54,960
nested inside validation okay

00:36:51,200 --> 00:36:58,000
excellent and we're looking at oh

00:36:54,960 --> 00:36:59,520
60 lines of code that's included

00:36:58,000 --> 00:37:01,440
with that simple yeah that's the sort of

00:36:59,520 --> 00:37:04,960
the entry point file which has the

00:37:01,440 --> 00:37:07,520
sort of main interface so all the rest

00:37:04,960 --> 00:37:08,240
yeah yeah yeah so all of the rest is

00:37:07,520 --> 00:37:12,079
required

00:37:08,240 --> 00:37:13,760
uh more deeply in the project okay

00:37:12,079 --> 00:37:16,480
there we go we're just gonna go one one

00:37:13,760 --> 00:37:16,480
more turtle down

00:37:17,040 --> 00:37:20,480
so contract there would be the sort of

00:37:19,280 --> 00:37:21,760
that's the main class

00:37:20,480 --> 00:37:23,839
that you use when you work with dry

00:37:21,760 --> 00:37:25,359
validation so you see that requires a

00:37:23,839 --> 00:37:28,560
whole lot of other behavior

00:37:25,359 --> 00:37:30,880
yeah um we we use

00:37:28,560 --> 00:37:33,680
uh the standard ruby tool for docs uh

00:37:30,880 --> 00:37:37,280
inline api docs which is called yardock

00:37:33,680 --> 00:37:40,560
so that lets you define uh

00:37:37,280 --> 00:37:43,839
introductory help um api

00:37:40,560 --> 00:37:45,760
api example usages as well as parameter

00:37:43,839 --> 00:37:47,839
specifications for classes and methods

00:37:45,760 --> 00:37:49,440
in ruby so yard doc actually do you run

00:37:47,839 --> 00:37:50,800
a command to then

00:37:49,440 --> 00:37:53,119
publish that somewhere or is it

00:37:50,800 --> 00:37:56,400
published into another folder

00:37:53,119 --> 00:37:57,280
uh you can run a command it's the yard

00:37:56,400 --> 00:38:00,079
command

00:37:57,280 --> 00:38:01,599
and that will generate html but in the

00:38:00,079 --> 00:38:04,560
in the ruby world there's

00:38:01,599 --> 00:38:05,040
a website that does it automatically

00:38:04,560 --> 00:38:10,000
from

00:38:05,040 --> 00:38:10,000
released gems and from github which is

00:38:12,400 --> 00:38:22,000
trying to find the name

00:38:18,800 --> 00:38:24,400
i can't find it right now but uh on our

00:38:22,000 --> 00:38:27,040
documentation website on dryabi.org

00:38:24,400 --> 00:38:30,240
uh we link to the api docs which are

00:38:27,040 --> 00:38:30,240
generated from those comments

00:38:30,839 --> 00:38:35,599
okay just

00:38:32,800 --> 00:38:37,040
lost my mouse there we go all right and

00:38:35,599 --> 00:38:38,880
then the

00:38:37,040 --> 00:38:40,000
the code itself i mean minus the

00:38:38,880 --> 00:38:41,520
comments and sometimes you can get a

00:38:40,000 --> 00:38:42,800
little lost in the comments i think uh

00:38:41,520 --> 00:38:44,480
first time into a project

00:38:42,800 --> 00:38:46,480
the comments are definitely necessary

00:38:44,480 --> 00:38:49,599
especially since you're using yard

00:38:46,480 --> 00:38:51,839
uh your docs um but

00:38:49,599 --> 00:38:53,040
do you want to explain the um sort of

00:38:51,839 --> 00:38:56,160
how this contract

00:38:53,040 --> 00:38:58,400
works yeah i mean so we're already

00:38:56,160 --> 00:39:01,839
seeing other drivi libraries in usage

00:38:58,400 --> 00:39:05,520
right here we use dry equalizer

00:39:01,839 --> 00:39:09,200
that is another dryabi library which

00:39:05,520 --> 00:39:10,560
provides equality behavior to objects so

00:39:09,200 --> 00:39:12,800
dry equalizer here

00:39:10,560 --> 00:39:14,560
says that a contract is comparable to

00:39:12,800 --> 00:39:17,599
another object a contract

00:39:14,560 --> 00:39:20,160
if it's schema rules messages match um

00:39:17,599 --> 00:39:21,839
that's that top line there

00:39:20,160 --> 00:39:23,920
so that's just a very simple mixing that

00:39:21,839 --> 00:39:26,480
gives us equality behavior

00:39:23,920 --> 00:39:28,560
it's a really powerful tool to use we

00:39:26,480 --> 00:39:29,440
also use dry initializer and that's what

00:39:28,560 --> 00:39:32,000
gives us these

00:39:29,440 --> 00:39:32,720
options uh below so each of those

00:39:32,000 --> 00:39:34,560
options

00:39:32,720 --> 00:39:35,839
are options you can pass to the

00:39:34,560 --> 00:39:37,839
initializer

00:39:35,839 --> 00:39:39,200
of the contract class when you create an

00:39:37,839 --> 00:39:42,720
instance of it

00:39:39,200 --> 00:39:44,720
so that's these are really kind of

00:39:42,720 --> 00:39:48,000
nitty-gritty details about the contract

00:39:44,720 --> 00:39:50,000
um okay typically though yeah

00:39:48,000 --> 00:39:51,359
call here is the main that's a good one

00:39:50,000 --> 00:39:53,520
to point out call here is the main

00:39:51,359 --> 00:39:56,960
interface so you define a contract

00:39:53,520 --> 00:39:59,440
uh you specify your validation uh schema

00:39:56,960 --> 00:40:00,960
and any other validation rules uh and

00:39:59,440 --> 00:40:03,119
then you initialize your class so you've

00:40:00,960 --> 00:40:05,200
got a contract instance at that point

00:40:03,119 --> 00:40:06,480
and then to use it you call it um with

00:40:05,200 --> 00:40:09,280
some input data

00:40:06,480 --> 00:40:10,560
and we use call uh quite meaningfully

00:40:09,280 --> 00:40:12,240
here because

00:40:10,560 --> 00:40:14,160
each of these objects and this pattern

00:40:12,240 --> 00:40:16,240
is followed across many of the dryabi

00:40:14,160 --> 00:40:18,400
projects each of these objects can be

00:40:16,240 --> 00:40:20,720
considered a functional object or even

00:40:18,400 --> 00:40:22,960
like a function on its own so the idea

00:40:20,720 --> 00:40:25,040
is that this is a pure function

00:40:22,960 --> 00:40:26,400
you call it with some input data it'll

00:40:25,040 --> 00:40:29,200
give you the same output

00:40:26,400 --> 00:40:30,720
every single time and that class that

00:40:29,200 --> 00:40:31,839
object can be called multiple times over

00:40:30,720 --> 00:40:34,560
with different inputs and you get

00:40:31,839 --> 00:40:36,240
different outputs and there's no sort of

00:40:34,560 --> 00:40:38,160
there's no mutable state which means

00:40:36,240 --> 00:40:39,680
that you can much more readily pass

00:40:38,160 --> 00:40:41,040
validation contracts

00:40:39,680 --> 00:40:43,599
around your app and reuse them in

00:40:41,040 --> 00:40:43,599
different places

00:40:44,000 --> 00:40:47,839
okay and uh it also means it also means

00:40:46,400 --> 00:40:50,640
you can mix these

00:40:47,839 --> 00:40:52,480
call for those who are new to ruby is

00:40:50,640 --> 00:40:53,119
the interface that ruby uses for its

00:40:52,480 --> 00:40:55,920
closures

00:40:53,119 --> 00:40:58,079
uh which are like blocks landers procs

00:40:55,920 --> 00:41:00,960
whatever there are various ones but

00:40:58,079 --> 00:41:02,560
this makes our objects inter

00:41:00,960 --> 00:41:04,800
interchangeable with those

00:41:02,560 --> 00:41:06,079
which means that sort of data processing

00:41:04,800 --> 00:41:08,240
pipelines become possible

00:41:06,079 --> 00:41:09,520
and you can mix and match okay yeah you

00:41:08,240 --> 00:41:10,480
get the same sort of features that you

00:41:09,520 --> 00:41:13,359
would get from a

00:41:10,480 --> 00:41:14,079
proc okay and then sorry do you can you

00:41:13,359 --> 00:41:15,280
uh

00:41:14,079 --> 00:41:17,200
sorry this is like a this was an

00:41:15,280 --> 00:41:18,480
interview question they had years ago

00:41:17,200 --> 00:41:20,560
what's the difference between a proc and

00:41:18,480 --> 00:41:24,560
a lambda

00:41:20,560 --> 00:41:26,400
ah a lambda will i'm on the spot here i

00:41:24,560 --> 00:41:29,599
didn't talk about this years ago

00:41:26,400 --> 00:41:31,359
uh you you can do an a lambda has

00:41:29,599 --> 00:41:33,599
stricter arity checking

00:41:31,359 --> 00:41:34,400
so arity is like the number of

00:41:33,599 --> 00:41:37,599
parameters

00:41:34,400 --> 00:41:39,520
um that that it takes

00:41:37,599 --> 00:41:41,280
and with a proc or a block you don't

00:41:39,520 --> 00:41:42,000
have to pass exactly the number of

00:41:41,280 --> 00:41:44,160
parameters

00:41:42,000 --> 00:41:45,040
that are defined in those but a lambda

00:41:44,160 --> 00:41:47,359
you do

00:41:45,040 --> 00:41:48,319
and a lambda you can also do an early

00:41:47,359 --> 00:41:50,480
return from

00:41:48,319 --> 00:41:52,880
whereas you can't necessarily do that in

00:41:50,480 --> 00:41:55,359
all situations with a proc or a block

00:41:52,880 --> 00:41:56,800
okay let me know if i can work at github

00:41:55,359 --> 00:41:59,440
now

00:41:56,800 --> 00:42:00,800
oh well i the question the the interview

00:41:59,440 --> 00:42:01,680
i had that question i ended up getting

00:42:00,800 --> 00:42:03,520
that job

00:42:01,680 --> 00:42:05,359
but uh i definitely fumbled through that

00:42:03,520 --> 00:42:06,720
pretty heavily because i'd use both of

00:42:05,359 --> 00:42:08,880
them but like i just like

00:42:06,720 --> 00:42:10,480
being able to articulate that i i just

00:42:08,880 --> 00:42:12,480
did not know i mean

00:42:10,480 --> 00:42:14,400
that's one of the that's one of the

00:42:12,480 --> 00:42:16,000
things that makes ruby great is that

00:42:14,400 --> 00:42:17,599
there are more than one way to do

00:42:16,000 --> 00:42:20,800
anything yes and

00:42:17,599 --> 00:42:23,520
it gives you the the space to

00:42:20,800 --> 00:42:24,319
to work within to express your logic in

00:42:23,520 --> 00:42:27,440
the most

00:42:24,319 --> 00:42:28,480
concise or most correct or or the nicest

00:42:27,440 --> 00:42:30,800
way possible

00:42:28,480 --> 00:42:32,319
and that's to its credit and to its

00:42:30,800 --> 00:42:34,800
fault but i think it's why so many

00:42:32,319 --> 00:42:38,160
people love the language

00:42:34,800 --> 00:42:39,599
excellent and then um uh i think all

00:42:38,160 --> 00:42:41,440
the thing about ruby is like a lot of

00:42:39,599 --> 00:42:42,480
the stuff is pretty readable like uh

00:42:41,440 --> 00:42:45,280
error

00:42:42,480 --> 00:42:46,880
and uh like it might be self-explanatory

00:42:45,280 --> 00:42:49,280
but my assumption like if i were to

00:42:46,880 --> 00:42:50,160
take a guess um because this isn't a

00:42:49,280 --> 00:42:51,920
private

00:42:50,160 --> 00:42:55,119
i saw a private flag oh yeah private

00:42:51,920 --> 00:42:56,720
here that this is like um

00:42:55,119 --> 00:42:58,480
this is gonna take over if there is an

00:42:56,720 --> 00:42:59,760
error in the project like how

00:42:58,480 --> 00:43:01,920
how would you explain this so that's

00:42:59,760 --> 00:43:03,359
that's private api within the class

00:43:01,920 --> 00:43:05,200
that's one of the things that yardock is

00:43:03,359 --> 00:43:06,880
good for but what you can

00:43:05,200 --> 00:43:08,400
look for is that when you call a

00:43:06,880 --> 00:43:09,520
contract if you just scroll up to that

00:43:08,400 --> 00:43:12,560
call method

00:43:09,520 --> 00:43:14,319
uh you will get returned a result so

00:43:12,560 --> 00:43:15,680
all the behavior you get on the output

00:43:14,319 --> 00:43:17,040
of calling that contract is all on the

00:43:15,680 --> 00:43:19,200
result object

00:43:17,040 --> 00:43:21,200
and result does have an errors message

00:43:19,200 --> 00:43:22,960
so you can check if it was a successful

00:43:21,200 --> 00:43:24,640
result or a failure result

00:43:22,960 --> 00:43:26,720
and then inspect the error messages and

00:43:24,640 --> 00:43:28,160
you get

00:43:26,720 --> 00:43:30,240
you get the information about whether

00:43:28,160 --> 00:43:32,720
your validation succeeded

00:43:30,240 --> 00:43:34,079
and if it didn't why it didn't succeed

00:43:32,720 --> 00:43:35,920
okay

00:43:34,079 --> 00:43:39,359
excellent this uh looking at this code

00:43:35,920 --> 00:43:41,119
makes me want to write more ruby code

00:43:39,359 --> 00:43:43,920
and also makes me want to actually try

00:43:41,119 --> 00:43:46,400
out the project as well

00:43:43,920 --> 00:43:47,359
sorry i'm enticed so then the other

00:43:46,400 --> 00:43:48,560
question about like

00:43:47,359 --> 00:43:50,640
there's more than one way to do

00:43:48,560 --> 00:43:53,680
everything i'm curious um

00:43:50,640 --> 00:43:54,480
testing i see a spec file am i going to

00:43:53,680 --> 00:43:56,960
see

00:43:54,480 --> 00:43:59,280
many tests when i open this uh no you'll

00:43:56,960 --> 00:44:01,040
see aspects

00:43:59,280 --> 00:44:03,359
we that's just something that we all

00:44:01,040 --> 00:44:05,119
instinctively chose to use

00:44:03,359 --> 00:44:07,359
because it's a tool that we're already

00:44:05,119 --> 00:44:09,599
familiar with and already happy with

00:44:07,359 --> 00:44:10,640
aspect is probably one of my favorite

00:44:09,599 --> 00:44:13,680
ruby tools

00:44:10,640 --> 00:44:18,240
because it's so powerful and expressive

00:44:13,680 --> 00:44:20,720
and i love nothing more than

00:44:18,240 --> 00:44:22,000
you know refining my test suite making

00:44:20,720 --> 00:44:25,520
things fast making my test

00:44:22,000 --> 00:44:27,839
expressive because you know in in

00:44:25,520 --> 00:44:29,359
the typical testing cycle where you want

00:44:27,839 --> 00:44:30,160
to run them frequently while you change

00:44:29,359 --> 00:44:32,319
your code

00:44:30,160 --> 00:44:34,160
the more effort that you put into making

00:44:32,319 --> 00:44:35,440
those tests nice the better that cycle

00:44:34,160 --> 00:44:38,240
becomes

00:44:35,440 --> 00:44:39,680
so yeah we use aspect to test all of our

00:44:38,240 --> 00:44:41,680
all of our libraries and in fact the

00:44:39,680 --> 00:44:43,280
test suite is a great way

00:44:41,680 --> 00:44:45,119
if you have questions about how things

00:44:43,280 --> 00:44:45,599
work and the documentation maybe hasn't

00:44:45,119 --> 00:44:47,599
quite

00:44:45,599 --> 00:44:48,720
explained it being a volunteer around

00:44:47,599 --> 00:44:51,440
project the docs are

00:44:48,720 --> 00:44:52,800
sometimes the last things we do and

00:44:51,440 --> 00:44:54,560
there's always more we could do there

00:44:52,800 --> 00:44:55,359
but the test suite is also a great way

00:44:54,560 --> 00:44:57,839
if you know ruby

00:44:55,359 --> 00:44:58,560
you can dig in you can see how each uh

00:44:57,839 --> 00:45:00,880
each

00:44:58,560 --> 00:45:01,599
feature of the the tools is meant to

00:45:00,880 --> 00:45:03,280
work

00:45:01,599 --> 00:45:05,760
and learn a little bit more about the

00:45:03,280 --> 00:45:07,680
different ways they can be used

00:45:05,760 --> 00:45:09,040
excellent yeah i'm a big fan of looking

00:45:07,680 --> 00:45:09,680
at tests uh it's actually the first

00:45:09,040 --> 00:45:10,880
thing i did

00:45:09,680 --> 00:45:13,200
actually the first thing i did when i

00:45:10,880 --> 00:45:15,280
joined github uh i'd mentioned i don't

00:45:13,200 --> 00:45:17,680
actually contribute to github's

00:45:15,280 --> 00:45:19,440
github.com but i did start reading the

00:45:17,680 --> 00:45:22,960
test uh once i got my laptop

00:45:19,440 --> 00:45:23,520
and had my um my github locally i just

00:45:22,960 --> 00:45:25,280
started just

00:45:23,520 --> 00:45:27,119
scrolling through because i it was a

00:45:25,280 --> 00:45:30,240
wealth of information because i

00:45:27,119 --> 00:45:31,119
long term long time rubyist uh so it was

00:45:30,240 --> 00:45:32,880
just like

00:45:31,119 --> 00:45:35,040
a lot of a lot of fun to look through

00:45:32,880 --> 00:45:35,760
there yeah there's a question about

00:45:35,040 --> 00:45:37,920
rubicop

00:45:35,760 --> 00:45:39,280
if you you're using rubicopa in the uh

00:45:37,920 --> 00:45:40,800
project

00:45:39,280 --> 00:45:42,319
yeah we actually have a fairly

00:45:40,800 --> 00:45:45,119
sophisticated setup

00:45:42,319 --> 00:45:46,560
uh if you hop back to the drive

00:45:45,119 --> 00:45:47,520
organization you know one of the things

00:45:46,560 --> 00:45:50,160
you'll see there

00:45:47,520 --> 00:45:50,800
is that we actually have more than 20

00:45:50,160 --> 00:45:54,160
different

00:45:50,800 --> 00:45:55,760
uh repositories that we look after

00:45:54,160 --> 00:45:57,280
and so one of the challenges was

00:45:55,760 --> 00:45:59,200
actually making it

00:45:57,280 --> 00:46:01,359
manageable to work on all of these and

00:45:59,200 --> 00:46:03,920
to keep them consistent over time

00:46:01,359 --> 00:46:04,400
and uh piotr actually put in a huge

00:46:03,920 --> 00:46:07,680
effort

00:46:04,400 --> 00:46:08,160
um to do this uh so he created a dev

00:46:07,680 --> 00:46:10,560
tools

00:46:08,160 --> 00:46:11,599
uh repository and that's where we keep a

00:46:10,560 --> 00:46:15,119
lot of common

00:46:11,599 --> 00:46:18,160
uh elements like a rubikop

00:46:15,119 --> 00:46:18,960
uh rules definition we keep let's yeah

00:46:18,160 --> 00:46:22,560
let's have a look

00:46:18,960 --> 00:46:24,240
um i think we keep a gem spec there that

00:46:22,560 --> 00:46:26,560
we generate based on templates

00:46:24,240 --> 00:46:29,200
um and these are all hooked up together

00:46:26,560 --> 00:46:31,599
using ruby uh using github actions

00:46:29,200 --> 00:46:32,880
so whenever there's a change to this dev

00:46:31,599 --> 00:46:35,280
tools repository

00:46:32,880 --> 00:46:37,040
uh some actions run that actually push

00:46:35,280 --> 00:46:38,880
out the dev tools changes to every

00:46:37,040 --> 00:46:42,240
single drive project

00:46:38,880 --> 00:46:44,000
and that's been a huge uh help

00:46:42,240 --> 00:46:45,680
uh in terms of making it easy for us to

00:46:44,000 --> 00:46:46,240
manage all these things that's excellent

00:46:45,680 --> 00:46:48,160
i mean i'm

00:46:46,240 --> 00:46:49,359
i'm a github actions fan of anybody who

00:46:48,160 --> 00:46:52,400
follows me on twitter

00:46:49,359 --> 00:46:54,000
uh is very well aware and actions

00:46:52,400 --> 00:46:55,520
i did not think actions would come up in

00:46:54,000 --> 00:46:59,359
this conversation but it has

00:46:55,520 --> 00:47:00,960
and yeah so we use actions for this um

00:46:59,359 --> 00:47:02,400
and you see there gem install aussie

00:47:00,960 --> 00:47:04,000
that's the name of the tool that we use

00:47:02,400 --> 00:47:05,920
to uh

00:47:04,000 --> 00:47:07,680
create these sort of template files that

00:47:05,920 --> 00:47:11,359
we spread across all the

00:47:07,680 --> 00:47:15,760
all the projects we use actions for ci

00:47:11,359 --> 00:47:18,480
and just how fast they are is is amazing

00:47:15,760 --> 00:47:19,440
we also use actions to build our website

00:47:18,480 --> 00:47:21,280
the website was

00:47:19,440 --> 00:47:23,280
previously just a single repository made

00:47:21,280 --> 00:47:24,480
with middleman which is a ruby static

00:47:23,280 --> 00:47:26,079
site generator

00:47:24,480 --> 00:47:28,000
but you know we had this challenge here

00:47:26,079 --> 00:47:30,880
where the docks would drift

00:47:28,000 --> 00:47:32,000
um away from the actual implemented

00:47:30,880 --> 00:47:32,800
features because they're in different

00:47:32,000 --> 00:47:35,680
repositories

00:47:32,800 --> 00:47:36,000
yeah so now we have a doc site directory

00:47:35,680 --> 00:47:38,000
in

00:47:36,000 --> 00:47:39,280
every repository so dry validation has

00:47:38,000 --> 00:47:41,119
one

00:47:39,280 --> 00:47:43,119
and that actually has the markdown files

00:47:41,119 --> 00:47:45,440
for our user documentation

00:47:43,119 --> 00:47:47,680
and then every time there's a change in

00:47:45,440 --> 00:47:50,960
those directories we use a github action

00:47:47,680 --> 00:47:53,040
to incorporate them into the

00:47:50,960 --> 00:47:54,720
documentation website and spin up a new

00:47:53,040 --> 00:47:56,960
build and push that up to

00:47:54,720 --> 00:47:58,880
github pages so it's a really a really

00:47:56,960 --> 00:48:01,599
nice cycle and it lets us update

00:47:58,880 --> 00:48:03,040
docs and code in the same place which is

00:48:01,599 --> 00:48:05,599
uh which is something that means we can

00:48:03,040 --> 00:48:07,760
take care of the both at the same time

00:48:05,599 --> 00:48:09,839
awesome yeah thanks for sharing that and

00:48:07,760 --> 00:48:10,880
um aussie is that supposed to be open

00:48:09,839 --> 00:48:12,640
source

00:48:10,880 --> 00:48:13,920
or is that supposed to be uh play on

00:48:12,640 --> 00:48:15,920
aussie

00:48:13,920 --> 00:48:17,760
no it's not i think it's just your open

00:48:15,920 --> 00:48:20,559
source buddy maybe something like that

00:48:17,760 --> 00:48:21,200
yeah okay clever you need a you need a

00:48:20,559 --> 00:48:24,000
um

00:48:21,200 --> 00:48:25,920
a mascot yeah that would be nice the

00:48:24,000 --> 00:48:27,119
octocat's taken now so

00:48:25,920 --> 00:48:28,640
yeah open source tools are pretty

00:48:27,119 --> 00:48:30,880
sophisticated these days we don't have a

00:48:28,640 --> 00:48:33,359
mascot but at least we have a logo and a

00:48:30,880 --> 00:48:34,160
you know relatively presentable website

00:48:33,359 --> 00:48:35,839
so um

00:48:34,160 --> 00:48:37,359
i did want to make time for questions

00:48:35,839 --> 00:48:39,040
everybody else had questions uh

00:48:37,359 --> 00:48:40,720
and addressed the the question that

00:48:39,040 --> 00:48:43,920
around the version one

00:48:40,720 --> 00:48:44,800
migration to um i'm ready sorry i

00:48:43,920 --> 00:48:48,000
already

00:48:44,800 --> 00:48:49,119
it's for hanami yes yeah

00:48:48,000 --> 00:48:52,079
that's something we'll still have to

00:48:49,119 --> 00:48:55,200
consider it's challenging because we're

00:48:52,079 --> 00:48:58,160
changing hanami version one tried

00:48:55,200 --> 00:49:00,240
uh to make things as stateless as make

00:48:58,160 --> 00:49:02,400
his objects as stateless as possible

00:49:00,240 --> 00:49:03,280
make it so each object is a single

00:49:02,400 --> 00:49:06,000
responsibility

00:49:03,280 --> 00:49:07,280
object within your application uh and it

00:49:06,000 --> 00:49:09,440
got a lot of the way

00:49:07,280 --> 00:49:11,119
um but not quite all the way and part of

00:49:09,440 --> 00:49:14,640
what we're doing with version two

00:49:11,119 --> 00:49:17,119
is to really um embed that

00:49:14,640 --> 00:49:18,160
philosophically deep into the soul of

00:49:17,119 --> 00:49:19,440
the framework

00:49:18,160 --> 00:49:21,280
and to have everything for that

00:49:19,440 --> 00:49:22,319
philosophy as much as possible

00:49:21,280 --> 00:49:24,480
and at the same time we're

00:49:22,319 --> 00:49:27,040
re-implementing many parts of hanami

00:49:24,480 --> 00:49:29,520
on the dryabi libraries whereas before

00:49:27,040 --> 00:49:31,760
it wasn't the case

00:49:29,520 --> 00:49:33,040
so this means there are going to be

00:49:31,760 --> 00:49:36,319
changes um

00:49:33,040 --> 00:49:38,000
i'm not sure how i'm not sure how the

00:49:36,319 --> 00:49:39,200
migration path will look for version one

00:49:38,000 --> 00:49:41,839
to version two

00:49:39,200 --> 00:49:42,640
uh the the nature of the applications

00:49:41,839 --> 00:49:45,920
isn't changing

00:49:42,640 --> 00:49:47,680
uh we still have views

00:49:45,920 --> 00:49:49,119
as standalone objects actions are

00:49:47,680 --> 00:49:50,800
standalone objects you still have a

00:49:49,119 --> 00:49:53,440
routes file

00:49:50,800 --> 00:49:54,079
hanami model will become more powerful

00:49:53,440 --> 00:49:55,280
but

00:49:54,079 --> 00:49:56,559
we're still building these things and

00:49:55,280 --> 00:49:59,280
we're yet to get to the point where we

00:49:56,559 --> 00:50:02,000
think about the migration path

00:49:59,280 --> 00:50:03,680
but what i hope is that it'll be an

00:50:02,000 --> 00:50:05,839
enticing

00:50:03,680 --> 00:50:07,920
new release and people will want to

00:50:05,839 --> 00:50:09,920
bring their applications

00:50:07,920 --> 00:50:11,680
uh up to that version because it makes

00:50:09,920 --> 00:50:14,880
things so much more powerful

00:50:11,680 --> 00:50:16,800
and makes it possible to model your

00:50:14,880 --> 00:50:20,400
application with even more clarity

00:50:16,800 --> 00:50:22,640
than you could before excellent

00:50:20,400 --> 00:50:23,839
um so i appreciate you taking time that

00:50:22,640 --> 00:50:25,440
they answered that question too and

00:50:23,839 --> 00:50:28,559
hopefully um

00:50:25,440 --> 00:50:30,400
uh ayawski tenwoski i

00:50:28,559 --> 00:50:31,839
apologize i didn't see if you actually

00:50:30,400 --> 00:50:34,400
corrected me on your name

00:50:31,839 --> 00:50:36,960
but uh perhaps she can help and jump

00:50:34,400 --> 00:50:37,839
into the uh the issues and help triage

00:50:36,960 --> 00:50:40,559
uh which

00:50:37,839 --> 00:50:41,760
brings me to well one i'm gonna yg

00:50:40,559 --> 00:50:43,599
actually i'm just gonna mention i did

00:50:41,760 --> 00:50:45,680
triage your issues in mutual fund

00:50:43,599 --> 00:50:47,440
so just gonna just call you out there

00:50:45,680 --> 00:50:49,599
and uh answer your question

00:50:47,440 --> 00:50:50,960
um i will have i'll show everything i've

00:50:49,599 --> 00:50:53,599
triaged yesterday on my stream

00:50:50,960 --> 00:50:54,319
uh which is bw which i think was linked

00:50:53,599 --> 00:50:56,960
earlier

00:50:54,319 --> 00:50:59,119
but um i'm curious if someone where's

00:50:56,960 --> 00:51:01,440
the first place you'd mention testing

00:50:59,119 --> 00:51:03,119
but um where's the first place that

00:51:01,440 --> 00:51:05,680
someone would go to if they're like okay

00:51:03,119 --> 00:51:07,520
i like dry rb i like what you're like

00:51:05,680 --> 00:51:10,640
what you're putting out so

00:51:07,520 --> 00:51:12,640
where can i help today well

00:51:10,640 --> 00:51:14,480
i think the first place is to go to the

00:51:12,640 --> 00:51:16,960
website to peruse

00:51:14,480 --> 00:51:19,040
the list of gems learn about how they

00:51:16,960 --> 00:51:22,240
work and start to use them

00:51:19,040 --> 00:51:24,000
uh you know we are these are used by

00:51:22,240 --> 00:51:25,440
thousands of people but

00:51:24,000 --> 00:51:27,599
relative to the size of the ruby

00:51:25,440 --> 00:51:29,119
community the ruby ecosystem in general

00:51:27,599 --> 00:51:29,520
that's still a very very small number of

00:51:29,119 --> 00:51:33,520
people

00:51:29,520 --> 00:51:35,359
yeah so there are a lot of use cases

00:51:33,520 --> 00:51:36,559
that maybe haven't been touched upon

00:51:35,359 --> 00:51:37,920
because everyone has a different

00:51:36,559 --> 00:51:38,480
application everyone has a different

00:51:37,920 --> 00:51:41,839
context

00:51:38,480 --> 00:51:42,640
everyone wants to do things in different

00:51:41,839 --> 00:51:44,400
ways

00:51:42,640 --> 00:51:46,160
so the first step would be just to try

00:51:44,400 --> 00:51:49,200
them out and to learn

00:51:46,160 --> 00:51:50,319
how they can satisfy your needs if there

00:51:49,200 --> 00:51:52,960
are any gaps

00:51:50,319 --> 00:51:54,000
um where they're not satisfying your

00:51:52,960 --> 00:51:56,240
requirements

00:51:54,000 --> 00:51:58,400
and then come back to us and chat about

00:51:56,240 --> 00:52:00,400
them we have a discourse forum

00:51:58,400 --> 00:52:01,839
where we we talk about the gems and we

00:52:00,400 --> 00:52:05,200
do support

00:52:01,839 --> 00:52:06,559
and we have a chat room in zulu um which

00:52:05,200 --> 00:52:08,559
is a great way for a little

00:52:06,559 --> 00:52:09,920
a bit of a faster back and forth what is

00:52:08,559 --> 00:52:13,359
uh is

00:52:09,920 --> 00:52:16,880
zoolop yeah zulip is the the chat

00:52:13,359 --> 00:52:18,720
system there on the right um okay

00:52:16,880 --> 00:52:20,000
it's it's like slack uh but it's

00:52:18,720 --> 00:52:22,319
topic-based so

00:52:20,000 --> 00:52:23,119
threads are like a first-class feature

00:52:22,319 --> 00:52:26,559
and

00:52:23,119 --> 00:52:28,400
they uh they support

00:52:26,559 --> 00:52:29,839
open-source organizations by giving free

00:52:28,400 --> 00:52:30,480
accounts so we found it's a really

00:52:29,839 --> 00:52:33,680
useful

00:52:30,480 --> 00:52:35,520
tool for us okay um so that would be the

00:52:33,680 --> 00:52:38,720
first step would be just to try them out

00:52:35,520 --> 00:52:40,720
um and then if you're using them and you

00:52:38,720 --> 00:52:44,720
want to understand how things work

00:52:40,720 --> 00:52:46,400
drop into the code start to explore and

00:52:44,720 --> 00:52:48,480
then come to us in the forum with

00:52:46,400 --> 00:52:52,079
questions and

00:52:48,480 --> 00:52:54,160
ultimately if we if we

00:52:52,079 --> 00:52:55,359
decide that something can be implemented

00:52:54,160 --> 00:52:57,040
then that's

00:52:55,359 --> 00:52:59,200
that's your opportunity to to do

00:52:57,040 --> 00:53:01,440
something the good thing about the gems

00:52:59,200 --> 00:53:03,599
i think is that because they're focused

00:53:01,440 --> 00:53:04,160
it is easy to get a sense for what they

00:53:03,599 --> 00:53:06,079
do

00:53:04,160 --> 00:53:07,839
it's not an insurmountable task to read

00:53:06,079 --> 00:53:11,119
through the code of one of these gems

00:53:07,839 --> 00:53:12,400
and understand what it does and because

00:53:11,119 --> 00:53:13,680
they're because they're focused and

00:53:12,400 --> 00:53:15,119
because they have a clear

00:53:13,680 --> 00:53:17,520
boundary like they're not trying to do

00:53:15,119 --> 00:53:20,640
everything um which means

00:53:17,520 --> 00:53:24,720
hopefully contributions uh are more

00:53:20,640 --> 00:53:27,200
possible than you know gems that are

00:53:24,720 --> 00:53:29,040
three four times as old or three four

00:53:27,200 --> 00:53:32,160
times as big

00:53:29,040 --> 00:53:33,520
so that would be my my recommended first

00:53:32,160 --> 00:53:36,800
steps

00:53:33,520 --> 00:53:39,520
other things you could do we have

00:53:36,800 --> 00:53:40,559
issues on github and we tag them as help

00:53:39,520 --> 00:53:43,520
wanted

00:53:40,559 --> 00:53:45,200
whenever we whenever we can oh yeah

00:53:43,520 --> 00:53:47,839
there we go help wanted

00:53:45,200 --> 00:53:49,040
um you know there's only 29 of them a

00:53:47,839 --> 00:53:50,640
lot of these gems are actually getting

00:53:49,040 --> 00:53:51,680
close or have just recently passed their

00:53:50,640 --> 00:53:53,920
1.0

00:53:51,680 --> 00:53:54,720
release which is a big milestone which

00:53:53,920 --> 00:53:55,839
means we're

00:53:54,720 --> 00:53:58,240
we're happy with the initial

00:53:55,839 --> 00:53:58,960
functionality um they can always be made

00:53:58,240 --> 00:54:02,319
better

00:53:58,960 --> 00:54:03,839
but um yeah

00:54:02,319 --> 00:54:05,520
those opportunities come when people

00:54:03,839 --> 00:54:09,200
come with new use cases and

00:54:05,520 --> 00:54:11,040
and want to talk to us and if possible

00:54:09,200 --> 00:54:13,599
bring some of their own ideas and time

00:54:11,040 --> 00:54:13,599
to the project

00:54:16,160 --> 00:54:19,920
cool uh sorry i was answering a question

00:54:19,040 --> 00:54:22,960
about our 10

00:54:19,920 --> 00:54:25,839
our non-1080p stream uh we're we're

00:54:22,960 --> 00:54:27,680
streaming in high output of uh 720

00:54:25,839 --> 00:54:29,280
and it's really around legibility i

00:54:27,680 --> 00:54:30,240
think i spent a lot of time in the last

00:54:29,280 --> 00:54:32,559
stream

00:54:30,240 --> 00:54:34,000
zooming and doing a lot of stuff and

00:54:32,559 --> 00:54:36,319
this stream i've not zoomed

00:54:34,000 --> 00:54:38,160
hardly ever um so yeah this is

00:54:36,319 --> 00:54:40,799
addressing that question and

00:54:38,160 --> 00:54:41,200
uh yeah i appreciate this uh this tour

00:54:40,799 --> 00:54:42,799
um

00:54:41,200 --> 00:54:45,760
also want to point out if anybody wasn't

00:54:42,799 --> 00:54:47,280
aware uh i know you have a um

00:54:45,760 --> 00:54:48,640
yeah there's only three issues here so

00:54:47,280 --> 00:54:49,520
probably not the best project to check

00:54:48,640 --> 00:54:52,640
it out on but

00:54:49,520 --> 00:54:54,079
yeah dry validation has a fair number of

00:54:52,640 --> 00:54:56,799
issues if that's what you're looking for

00:54:54,079 --> 00:54:58,880
yeah let's go to that one but if you go

00:54:56,799 --> 00:55:02,160
to slash contribute

00:54:58,880 --> 00:55:03,760
all right uh tribute you can actually

00:55:02,160 --> 00:55:06,799
see

00:55:03,760 --> 00:55:08,400
there's one uh and the way i think maybe

00:55:06,799 --> 00:55:11,680
it's it goes by uh

00:55:08,400 --> 00:55:16,240
help wanted in docs yeah

00:55:11,680 --> 00:55:18,079
right yep yep yeah but actually it also

00:55:16,240 --> 00:55:19,119
perhaps the conversation so this is

00:55:18,079 --> 00:55:20,079
machine learning that does that so

00:55:19,119 --> 00:55:21,440
perhaps the conversation

00:55:20,079 --> 00:55:23,520
made it seem like someone was already

00:55:21,440 --> 00:55:25,200
taking care of it um

00:55:23,520 --> 00:55:27,119
so yeah that's what this uh this little

00:55:25,200 --> 00:55:27,920
feature does it just sees anything

00:55:27,119 --> 00:55:32,160
that's actually

00:55:27,920 --> 00:55:33,920
ups or grabs not just uh simply labeled

00:55:32,160 --> 00:55:35,760
i'm also curious did you uh catch the

00:55:33,920 --> 00:55:38,880
satellite uh announcements last

00:55:35,760 --> 00:55:40,400
last week uh the event

00:55:38,880 --> 00:55:41,920
took place while i was asleep but i did

00:55:40,400 --> 00:55:43,440
i didn't read the summary of all the

00:55:41,920 --> 00:55:44,160
announcements yeah yeah i would highly

00:55:43,440 --> 00:55:46,319
recommend uh

00:55:44,160 --> 00:55:47,359
get up discussions uh giving out a spin

00:55:46,319 --> 00:55:50,319
too as well

00:55:47,359 --> 00:55:51,359
um if yeah we're keen to give it a try i

00:55:50,319 --> 00:55:54,319
mean

00:55:51,359 --> 00:55:56,319
it's uh the the more we can put in this

00:55:54,319 --> 00:55:58,799
collaboration collaboration hub the

00:55:56,319 --> 00:56:00,480
easier everyone's life gets i think yeah

00:55:58,799 --> 00:56:02,079
i'm actually looking forward to starting

00:56:00,480 --> 00:56:06,079
to use it for my projects

00:56:02,079 --> 00:56:07,280
i've had access to it for a bit but um

00:56:06,079 --> 00:56:09,359
it's hard to really test the feature

00:56:07,280 --> 00:56:11,839
when only you have access

00:56:09,359 --> 00:56:13,760
oh and it looks like uh perhaps i

00:56:11,839 --> 00:56:16,319
spelled it wrong

00:56:13,760 --> 00:56:17,680
but it should be stairs somewhere team

00:56:16,319 --> 00:56:22,240
management

00:56:17,680 --> 00:56:22,240
maybe it's not on here i know it is uh

00:56:23,040 --> 00:56:26,160
yeah it probably didn't make that i

00:56:24,319 --> 00:56:26,640
think it's still progressively being

00:56:26,160 --> 00:56:27,920
rolled out

00:56:26,640 --> 00:56:30,160
so maybe it's not there yet for sure

00:56:27,920 --> 00:56:31,839
yeah we only have a handful of projects

00:56:30,160 --> 00:56:33,200
using it today but highly recommend

00:56:31,839 --> 00:56:35,839
checking that out

00:56:33,200 --> 00:56:37,520
but yeah also um actually i did want to

00:56:35,839 --> 00:56:40,799
wrap up and wind down

00:56:37,520 --> 00:56:44,400
um to see github.com

00:56:40,799 --> 00:56:46,240
stars so if you don't mind

00:56:44,400 --> 00:56:48,319
and i if i spelled that right not stars

00:56:46,240 --> 00:56:50,000
but stars

00:56:48,319 --> 00:56:51,440
uh do you mind going to that on your

00:56:50,000 --> 00:56:54,559
your screen uh

00:56:51,440 --> 00:56:56,839
yep um i like to i'm curious if anybody

00:56:54,559 --> 00:56:58,079
in the chat too if you want to go to

00:56:56,839 --> 00:57:00,000
github.com

00:56:58,079 --> 00:57:01,520
it out and let me know what the last

00:57:00,000 --> 00:57:05,359
repo you start was

00:57:01,520 --> 00:57:06,960
um so i'll go first um

00:57:05,359 --> 00:57:08,160
actually yeah i'll go first and explain

00:57:06,960 --> 00:57:09,440
that we're doing a meet up actually

00:57:08,160 --> 00:57:11,119
tomorrow

00:57:09,440 --> 00:57:13,680
well it's my tomorrow but it's

00:57:11,119 --> 00:57:15,280
technically only a few hours

00:57:13,680 --> 00:57:17,599
no it's gonna be eight hours from now

00:57:15,280 --> 00:57:19,119
yeah so we're doing a meetup uh

00:57:17,599 --> 00:57:21,119
with india so it's gonna be the india

00:57:19,119 --> 00:57:21,359
meetup and uh highly recommend we're

00:57:21,119 --> 00:57:24,640
gonna

00:57:21,359 --> 00:57:26,720
do it here on twitch.tv github so

00:57:24,640 --> 00:57:28,000
if you are around or you happen not to

00:57:26,720 --> 00:57:30,319
be in this time zone

00:57:28,000 --> 00:57:31,839
um feel free to check it out uh so i

00:57:30,319 --> 00:57:34,240
started that repo because i'm

00:57:31,839 --> 00:57:35,680
announcing it right now and then the

00:57:34,240 --> 00:57:37,520
other thing is um

00:57:35,680 --> 00:57:40,400
crazymax was actually on the stream he

00:57:37,520 --> 00:57:42,160
was uh in the chat earlier today and uh

00:57:40,400 --> 00:57:44,640
he has a github action

00:57:42,160 --> 00:57:45,440
um freaking pages so i just started

00:57:44,640 --> 00:57:46,880
because uh

00:57:45,440 --> 00:57:48,240
he's super helpful and he's answers a

00:57:46,880 --> 00:57:48,960
lot of questions and shows up on my

00:57:48,240 --> 00:57:50,240
streams

00:57:48,960 --> 00:57:51,839
uh and i didn't know he actually had

00:57:50,240 --> 00:57:52,480
actions actually i never even looked at

00:57:51,839 --> 00:57:55,200
his his

00:57:52,480 --> 00:57:56,640
his uh get up account until today so

00:57:55,200 --> 00:57:59,200
it's cool to see crazymax uh

00:57:56,640 --> 00:58:01,520
it's got some code out there and 87

00:57:59,200 --> 00:58:04,000
stars that's pretty good too

00:58:01,520 --> 00:58:05,680
so what do you what do you have uh tim i

00:58:04,000 --> 00:58:06,799
just dropped it in the zoom chat so you

00:58:05,680 --> 00:58:09,119
can uh

00:58:06,799 --> 00:58:10,160
bring it up uh now i have to figure out

00:58:09,119 --> 00:58:12,880
where oh

00:58:10,160 --> 00:58:12,880
this is the chat

00:58:16,799 --> 00:58:20,799
oh do you want me to say it oh i got it

00:58:19,119 --> 00:58:23,119
there you go yeah yeah

00:58:20,799 --> 00:58:24,880
yes so this is this is the last uh

00:58:23,119 --> 00:58:27,839
project i have starred

00:58:24,880 --> 00:58:28,319
uh and there's a few things to say about

00:58:27,839 --> 00:58:31,119
this

00:58:28,319 --> 00:58:31,839
um it's written by tess double which is

00:58:31,119 --> 00:58:36,000
uh

00:58:31,839 --> 00:58:38,480
an excellent uh agency and a long time

00:58:36,000 --> 00:58:40,240
sort of supporter and contributor to the

00:58:38,480 --> 00:58:43,040
ruby ecosystem

00:58:40,240 --> 00:58:43,680
and uh justin searles was one of its

00:58:43,040 --> 00:58:46,720
founders

00:58:43,680 --> 00:58:48,640
and he's the one building this so a

00:58:46,720 --> 00:58:51,280
couple of things to say here

00:58:48,640 --> 00:58:52,799
i think you come to the you come to ruby

00:58:51,280 --> 00:58:53,520
for the language but you stay for the

00:58:52,799 --> 00:58:56,480
community

00:58:53,520 --> 00:58:57,680
yeah and justin is one of the stalwarts

00:58:56,480 --> 00:59:00,880
of the ruby community

00:58:57,680 --> 00:59:04,000
um he is an amazing speaker

00:59:00,880 --> 00:59:06,799
and he shares his ideas

00:59:04,000 --> 00:59:09,200
openly and what he's doing here is

00:59:06,799 --> 00:59:12,640
particularly interesting to me because

00:59:09,200 --> 00:59:15,520
it's it's blending uh these two modes

00:59:12,640 --> 00:59:16,319
of building websites i'm i love writing

00:59:15,520 --> 00:59:18,559
with ruby so

00:59:16,319 --> 00:59:19,760
i'll keep doing it for as much as i can

00:59:18,559 --> 00:59:21,200
um

00:59:19,760 --> 00:59:23,200
but not everything needs a full-blown

00:59:21,200 --> 00:59:24,319
app so justin's experimenting out in the

00:59:23,200 --> 00:59:27,440
open here with this

00:59:24,319 --> 00:59:28,240
approach of writing a rails app but also

00:59:27,440 --> 00:59:30,559
having that app

00:59:28,240 --> 00:59:32,319
host a statically generated website for

00:59:30,559 --> 00:59:34,000
content that doesn't need to be dynamic

00:59:32,319 --> 00:59:35,680
yeah and this is a fairly trendy

00:59:34,000 --> 00:59:38,400
approach these days for good reason

00:59:35,680 --> 00:59:39,359
um you'll see uh your last uh

00:59:38,400 --> 00:59:40,799
interviewee tim

00:59:39,359 --> 00:59:43,119
works for burcell right so this is one

00:59:40,799 --> 00:59:46,799
of their things where you can have

00:59:43,119 --> 00:59:47,839
your dynamic and static js applications

00:59:46,799 --> 00:59:51,359
like hosted

00:59:47,839 --> 00:59:53,119
in in the same system uh justin's i

00:59:51,359 --> 00:59:54,880
think trying to angle at this from the

00:59:53,119 --> 00:59:56,480
from the ruby side which i think is

00:59:54,880 --> 00:59:59,200
really interesting because

00:59:56,480 --> 01:00:00,960
despite ruby perhaps um having gone past

00:59:59,200 --> 01:00:02,720
that peak of the hype cycle

01:00:00,960 --> 01:00:04,160
there's still a lot you can do with it

01:00:02,720 --> 01:00:06,960
um and

01:00:04,160 --> 01:00:08,079
there's no reason that we should give up

01:00:06,960 --> 01:00:09,359
uh

01:00:08,079 --> 01:00:11,359
give up all that we've learned

01:00:09,359 --> 01:00:13,280
necessarily

01:00:11,359 --> 01:00:15,520
just to try a different application

01:00:13,280 --> 01:00:16,240
deployment or configuration methodology

01:00:15,520 --> 01:00:19,599
so

01:00:16,240 --> 01:00:20,319
this is a cutting edge thing um and i'm

01:00:19,599 --> 01:00:23,200
just following

01:00:20,319 --> 01:00:25,119
along with his experiments yeah and it's

01:00:23,200 --> 01:00:26,720
funny that um

01:00:25,119 --> 01:00:28,400
i actually i was completely unaware of

01:00:26,720 --> 01:00:31,280
this um so actually i

01:00:28,400 --> 01:00:31,760
i've i've been watching uh uh justin

01:00:31,280 --> 01:00:33,680
since

01:00:31,760 --> 01:00:35,359
beginning of my career so i went to my

01:00:33,680 --> 01:00:37,280
first conference he spoke at

01:00:35,359 --> 01:00:39,119
and i've just been hooked on his uh his

01:00:37,280 --> 01:00:40,880
presence on stage but also the

01:00:39,119 --> 01:00:42,079
all the libraries that he puts out as

01:00:40,880 --> 01:00:42,960
well as test double they do a lot of

01:00:42,079 --> 01:00:46,880
great work

01:00:42,960 --> 01:00:49,760
um but uh this term jam stack

01:00:46,880 --> 01:00:52,319
it's funny enough i actually host a

01:00:49,760 --> 01:00:54,799
podcast which is called jam stack radio

01:00:52,319 --> 01:00:55,760
oh well and uh i'm very familiar with

01:00:54,799 --> 01:00:59,280
the term because

01:00:55,760 --> 01:01:02,720
i've been doing jam stack type projects

01:00:59,280 --> 01:01:03,839
um for quite some time so

01:01:02,720 --> 01:01:05,760
i didn't think i was going to be uh

01:01:03,839 --> 01:01:07,440
pitching this podcast but they go

01:01:05,760 --> 01:01:09,520
yeah if you're interested my thing with

01:01:07,440 --> 01:01:10,400
ruby is it's a language that endures for

01:01:09,520 --> 01:01:13,119
a good reason

01:01:10,400 --> 01:01:14,319
and there is always the opportunity so

01:01:13,119 --> 01:01:18,160
the dry beer project

01:01:14,319 --> 01:01:20,319
came well past the early mid 2000s when

01:01:18,160 --> 01:01:23,119
ruby was at the peak of his popularity

01:01:20,319 --> 01:01:24,559
but there is always the opportunity for

01:01:23,119 --> 01:01:26,079
someone to try something new and

01:01:24,559 --> 01:01:27,520
interesting in this language

01:01:26,079 --> 01:01:29,119
and in fact the language makes it

01:01:27,520 --> 01:01:29,520
possible to try new and interesting

01:01:29,119 --> 01:01:32,559
things

01:01:29,520 --> 01:01:34,319
easily because it's so flexible and

01:01:32,559 --> 01:01:35,760
this is just another piece of evidence

01:01:34,319 --> 01:01:38,160
that you can still

01:01:35,760 --> 01:01:39,520
use ruby for so much today yeah yeah

01:01:38,160 --> 01:01:41,440
it's awesome i need to actually reach

01:01:39,520 --> 01:01:42,720
them out uh so this is my podcast and

01:01:41,440 --> 01:01:44,240
i'm definitely gonna reach out to justin

01:01:42,720 --> 01:01:45,200
to see if he wants to chat about static

01:01:44,240 --> 01:01:47,200
rails and

01:01:45,200 --> 01:01:48,319
the that's the story behind that project

01:01:47,200 --> 01:01:50,079
uh and also

01:01:48,319 --> 01:01:51,520
i just gave it a star i encourage

01:01:50,079 --> 01:01:52,559
everybody in the the chat to also give

01:01:51,520 --> 01:01:54,240
it a star

01:01:52,559 --> 01:01:56,799
uh i want to shout out that someone

01:01:54,240 --> 01:01:58,960
starred uh the hanami 2 application

01:01:56,799 --> 01:02:01,599
template which was your project

01:01:58,960 --> 01:02:02,160
um i assume it's your project it's under

01:02:01,599 --> 01:02:04,240
your uh

01:02:02,160 --> 01:02:05,599
your name yeah that one's under my name

01:02:04,240 --> 01:02:07,359
uh that's the sort of

01:02:05,599 --> 01:02:09,039
unofficial how to get started with

01:02:07,359 --> 01:02:12,000
hanami uh

01:02:09,039 --> 01:02:14,000
in the meantime uh until we build the

01:02:12,000 --> 01:02:16,480
the fully fledged application generators

01:02:14,000 --> 01:02:17,039
uh and everything all right excellent

01:02:16,480 --> 01:02:18,960
yeah so

01:02:17,039 --> 01:02:20,240
i gave that a star so they you have 16

01:02:18,960 --> 01:02:22,640
everybody else

01:02:20,240 --> 01:02:24,960
falls to share stars i mean they're free

01:02:22,640 --> 01:02:27,359
so like don't hold out

01:02:24,960 --> 01:02:29,280
and uh yeah tim thanks very much for for

01:02:27,359 --> 01:02:31,200
jumping on and chatting with me

01:02:29,280 --> 01:02:32,480
um i had a lot of fun learning about

01:02:31,200 --> 01:02:35,200
this project uh

01:02:32,480 --> 01:02:36,960
i don't know if you have a hard stop um

01:02:35,200 --> 01:02:38,640
but if anybody has any other questions

01:02:36,960 --> 01:02:42,480
uh feel free to put a few more minutes

01:02:38,640 --> 01:02:42,480
so yeah happy to answer questions

01:02:43,119 --> 01:02:46,240
yeah other than that i think we answered

01:02:44,720 --> 01:02:47,039
uh we answered all the questions so

01:02:46,240 --> 01:02:50,079
anybody

01:02:47,039 --> 01:02:50,079
will stick around for a bit

01:02:53,760 --> 01:02:56,079
nice

01:03:00,400 --> 01:03:06,000
cool well there's no questions um yeah i

01:03:03,520 --> 01:03:07,920
i think this was super insightful and uh

01:03:06,000 --> 01:03:09,760
i uh i'm always looking for reasons to

01:03:07,920 --> 01:03:11,280
write ruby code and uh

01:03:09,760 --> 01:03:12,799
that's why some of my actions are

01:03:11,280 --> 01:03:13,680
powered by ruby and i was super pleased

01:03:12,799 --> 01:03:16,000
to see

01:03:13,680 --> 01:03:16,880
that you had um that you're using

01:03:16,000 --> 01:03:19,359
actions to

01:03:16,880 --> 01:03:21,039
keep all your your project in sync so

01:03:19,359 --> 01:03:23,440
i'm gonna actually

01:03:21,039 --> 01:03:25,520
dig deeper into that and uh actually i

01:03:23,440 --> 01:03:27,119
should even start that repo too as well

01:03:25,520 --> 01:03:29,359
i i'm a big fan of starring so i'm just

01:03:27,119 --> 01:03:30,960
gonna i store stars everywhere

01:03:29,359 --> 01:03:34,880
but i'm not sure if you were familiar

01:03:30,960 --> 01:03:34,880
with the github.com

01:03:35,039 --> 01:03:44,000
how many stars do i have um

01:03:39,200 --> 01:03:46,960
let's have a look i have 793 stars

01:03:44,000 --> 01:03:48,559
excellent mitch says in the chat that

01:03:46,960 --> 01:03:51,839
she stars everything

01:03:48,559 --> 01:03:51,839
yeah they're free why not

01:03:52,400 --> 01:03:58,559
and 405 of them are ruby projects

01:03:56,079 --> 01:03:59,680
excellent yeah it's also cool like i

01:03:58,559 --> 01:04:01,280
think mine are actually mostly

01:03:59,680 --> 01:04:02,880
javascript projects

01:04:01,280 --> 01:04:04,960
because that's what i spent the last

01:04:02,880 --> 01:04:08,640
three years writing is tons of

01:04:04,960 --> 01:04:11,599
react code um at my previous employer

01:04:08,640 --> 01:04:14,079
but yeah i'm at 52 ruby 254 javascript

01:04:11,599 --> 01:04:17,039
so there's a bit of an imbalance

01:04:14,079 --> 01:04:18,960
in my actually in 47 go so actually i

01:04:17,039 --> 01:04:22,799
start as much ruby

01:04:18,960 --> 01:04:24,720
as i do go so

01:04:22,799 --> 01:04:27,520
that was a that was another life though

01:04:24,720 --> 01:04:29,599
the go code

01:04:27,520 --> 01:04:31,359
excellent well i'm gonna i'm gonna end

01:04:29,599 --> 01:04:33,039
the stream i think uh let me just

01:04:31,359 --> 01:04:34,559
give a last check with the chat this

01:04:33,039 --> 01:04:35,200
everybody's just dropping emojis and

01:04:34,559 --> 01:04:37,839
stars

01:04:35,200 --> 01:04:38,319
and uh yeah big fan so if you wanna sit

01:04:37,839 --> 01:04:40,319
good chat

01:04:38,319 --> 01:04:42,319
chat still stays on but the stream will

01:04:40,319 --> 01:04:43,520
stop now so everybody have a good uh

01:04:42,319 --> 01:04:46,480
weekend and

01:04:43,520 --> 01:04:46,799
go ship some code just uh yeah if it's

01:04:46,480 --> 01:04:48,480
not

01:04:46,799 --> 01:04:50,559
if it hasn't become clear during this

01:04:48,480 --> 01:04:52,319
stream i love talking about this stuff

01:04:50,559 --> 01:04:53,680
i'm more than happy to answer questions

01:04:52,319 --> 01:04:56,440
on twitter uh

01:04:53,680 --> 01:04:58,000
my name is tim riley on twitter

01:04:56,440 --> 01:04:59,599
t-i-m-r-i-l-e-y

01:04:58,000 --> 01:05:01,520
so yeah if you think of something later

01:04:59,599 --> 01:05:02,720
on anyone who sees this uh yeah feel

01:05:01,520 --> 01:05:04,720
free to hit me up

01:05:02,720 --> 01:05:06,559
awesome yeah sorry i didn't even tell

01:05:04,720 --> 01:05:08,000
people tim riley it's actually below

01:05:06,559 --> 01:05:09,839
your head too as well um

01:05:08,000 --> 01:05:11,839
so i know you haven't seen the stream

01:05:09,839 --> 01:05:13,599
but it is below in the cards cool

01:05:11,839 --> 01:05:15,200
so definitely check that out people and

01:05:13,599 --> 01:05:17,520
i'm bw and this is uh

01:05:15,200 --> 01:05:19,680
open source friday on the github twitch

01:05:17,520 --> 01:05:19,680

YouTube URL: https://www.youtube.com/watch?v=aiZrD_pyk2E


