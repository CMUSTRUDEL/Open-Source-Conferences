Title: Project Skara: migrating OpenJDK to Git & GitHub - GitHub Universe 2020
Publication date: 2020-12-11
Playlist: GitHub Universe 2020: Developer - Open Source Communities
Description: 
	Presented by 
Erik Duveblad, Principal Member of Technical Staff, Oracle
Robin Westberg, Consulting Member of Technical Staff, Oracle

Erik and Robin are the two developers who wrote over 50,000 lines of Java to enable the transition of OpenJDK—which is relied upon by millions of developers around the world—to Git and GitHub. This session will cover the challenges they discovered over the two-year migration, as they transitioned an established open source community from using a self-hosted Mercurial server to using Git and GitHub. You'll learn how Erik and Robin converted over 65,000 Mercurial commits to Git, created GitHub apps to customize contribution workflow, and how they scaled pull requests to work well for an open source project with over 250 active contributors.

For more from GitHub Universe 2020, visit https://githubuniverse.com

As always, feel free to leave us a comment below and don't forget to subscribe: http://bit.ly/subgithub

Thanks!

Connect with us.
Facebook: http://fb.com/github
Twitter: http://twitter.com/github
LinkedIn: http://linkedin.com/company/github

About GitHub
GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Millions of people use GitHub to build amazing things together. For more info, go to http://github.com
Captions: 
	00:00:02,380 --> 00:00:05,490
[Applause]

00:00:06,210 --> 00:00:09,330
[Music]

00:00:10,400 --> 00:00:13,599
all right

00:00:11,120 --> 00:00:14,320
thank you and we're really excited to be

00:00:13,599 --> 00:00:17,520
here today

00:00:14,320 --> 00:00:19,920
and i'm robin

00:00:17,520 --> 00:00:21,920
and i'm eric and i would like to give

00:00:19,920 --> 00:00:24,320
everyone a really warm welcome

00:00:21,920 --> 00:00:26,560
to our session today on project scorer

00:00:24,320 --> 00:00:30,480
migrating open indicate to git

00:00:26,560 --> 00:00:33,120
and github

00:00:30,480 --> 00:00:34,399
and our goal with today's session is to

00:00:33,120 --> 00:00:36,640
share with you all

00:00:34,399 --> 00:00:38,160
how we use github for a large open

00:00:36,640 --> 00:00:39,520
source project

00:00:38,160 --> 00:00:41,760
you will see a little bit on how we

00:00:39,520 --> 00:00:43,840
actually got to git in the first place

00:00:41,760 --> 00:00:44,960
how we ended up on github but we also

00:00:43,840 --> 00:00:46,800
want to talk a little bit about the

00:00:44,960 --> 00:00:48,000
customizations we've done to the default

00:00:46,800 --> 00:00:50,800
github workflow

00:00:48,000 --> 00:00:52,079
to suit a very large open source project

00:00:50,800 --> 00:00:54,640
but before we begin

00:00:52,079 --> 00:00:54,640
who are we

00:00:55,680 --> 00:00:58,800
we are coming to you live from stockholm

00:00:57,840 --> 00:01:01,359
sweden today

00:00:58,800 --> 00:01:03,520
and i'm eric and i've worked in open

00:01:01,359 --> 00:01:05,439
source for more than eight years

00:01:03,520 --> 00:01:07,040
usually my day job is to hack on the

00:01:05,439 --> 00:01:09,520
yola virtual machine

00:01:07,040 --> 00:01:10,479
but lately i've been more focused on git

00:01:09,520 --> 00:01:12,400
and github

00:01:10,479 --> 00:01:16,159
and if you swing by my desk you will

00:01:12,400 --> 00:01:16,159
often see me living in a terminal

00:01:17,040 --> 00:01:21,439
all right and i'm robin and i've also

00:01:20,400 --> 00:01:23,840
worked with and

00:01:21,439 --> 00:01:27,600
contributed to open source in various

00:01:23,840 --> 00:01:30,479
capacities since at least 2005

00:01:27,600 --> 00:01:33,840
and my background is mostly an operating

00:01:30,479 --> 00:01:35,840
system and platform specific development

00:01:33,840 --> 00:01:37,759
and i've been working on runtime aspects

00:01:35,840 --> 00:01:39,200
of the java virtual machine for a few

00:01:37,759 --> 00:01:41,920
years now

00:01:39,200 --> 00:01:43,360
but unlike eric i willingly admit to

00:01:41,920 --> 00:01:45,360
preferring a good ide

00:01:43,360 --> 00:01:47,920
to perform my daily development

00:01:45,360 --> 00:01:47,920
activities

00:01:48,640 --> 00:01:55,920
but enough about us so let's get started

00:01:52,640 --> 00:01:57,040
so i'm gonna start with a brief

00:01:55,920 --> 00:02:00,560
introduction on what

00:01:57,040 --> 00:02:02,719
the open jdk product actually is so

00:02:00,560 --> 00:02:04,399
simply put it's the product that

00:02:02,719 --> 00:02:06,840
develops the

00:02:04,399 --> 00:02:08,640
reference implementation of the java

00:02:06,840 --> 00:02:11,360
platform

00:02:08,640 --> 00:02:12,400
and the java platform includes the java

00:02:11,360 --> 00:02:15,200
class library

00:02:12,400 --> 00:02:15,760
the java compiler and the java virtual

00:02:15,200 --> 00:02:19,200
machine

00:02:15,760 --> 00:02:21,200
called hotspot and while java itself

00:02:19,200 --> 00:02:24,480
celebrated its 25th

00:02:21,200 --> 00:02:27,920
birthday earlier this year it was made

00:02:24,480 --> 00:02:30,400
open source by sun microsystems back in

00:02:27,920 --> 00:02:33,760
may of 2007

00:02:30,400 --> 00:02:36,319
so that's a little bit over 13 years ago

00:02:33,760 --> 00:02:38,000
so this is when the open jdk product was

00:02:36,319 --> 00:02:41,840
created

00:02:38,000 --> 00:02:44,959
and the from the open jdk source code

00:02:41,840 --> 00:02:46,000
oracle and many other vendors like red

00:02:44,959 --> 00:02:49,200
hat sap

00:02:46,000 --> 00:02:51,280
amazon azul just to mention if you go on

00:02:49,200 --> 00:02:54,640
to create distributions of java

00:02:51,280 --> 00:02:54,640
in various forms

00:02:55,519 --> 00:02:59,760
and what do i mean with a large open

00:02:58,640 --> 00:03:04,080
source project

00:02:59,760 --> 00:03:07,200
well the open jdk contains over 7.5

00:03:04,080 --> 00:03:10,000
million lines of code which form

00:03:07,200 --> 00:03:11,680
over a hundred thousand distinct

00:03:10,000 --> 00:03:14,080
comments

00:03:11,680 --> 00:03:17,280
and over the years the product has seen

00:03:14,080 --> 00:03:20,239
over a thousand unique contributors

00:03:17,280 --> 00:03:22,480
and of those there are over 300 that

00:03:20,239 --> 00:03:23,760
have remained active over longer periods

00:03:22,480 --> 00:03:26,319
of time

00:03:23,760 --> 00:03:28,720
and have attained the roles of reviewers

00:03:26,319 --> 00:03:31,360
and committers in the products

00:03:28,720 --> 00:03:32,319
so i'll talk a little bit about what

00:03:31,360 --> 00:03:35,599
exactly those

00:03:32,319 --> 00:03:36,560
rules might mean later but i think it's

00:03:35,599 --> 00:03:38,720
fair to say that

00:03:36,560 --> 00:03:40,159
we're not exaggerating when we say that

00:03:38,720 --> 00:03:44,480
open edk can be

00:03:40,159 --> 00:03:44,480
considered a fairly large open source

00:03:44,840 --> 00:03:48,480
project

00:03:46,080 --> 00:03:49,120
we've been on quite a journey for the

00:03:48,480 --> 00:03:52,080
past

00:03:49,120 --> 00:03:53,680
two years almost uh we started out with

00:03:52,080 --> 00:03:54,879
moving from the mercurial version

00:03:53,680 --> 00:03:57,280
control system

00:03:54,879 --> 00:03:58,000
to git and then later on once we were on

00:03:57,280 --> 00:04:00,159
git

00:03:58,000 --> 00:04:01,920
we moved to github and now we want to

00:04:00,159 --> 00:04:04,480
share the first steps of this dna

00:04:01,920 --> 00:04:04,480
with you all

00:04:05,920 --> 00:04:11,439
so if you are converting something from

00:04:09,040 --> 00:04:12,720
another version system to the git

00:04:11,439 --> 00:04:14,239
version chrome system

00:04:12,720 --> 00:04:16,639
you are going to find yourself staring

00:04:14,239 --> 00:04:19,519
at this manual page quite a bit

00:04:16,639 --> 00:04:21,519
this is the man page for git fast import

00:04:19,519 --> 00:04:22,639
which is an excellent tool whenever you

00:04:21,519 --> 00:04:25,520
need to get data

00:04:22,639 --> 00:04:26,240
into a git repository as the description

00:04:25,520 --> 00:04:28,560
says

00:04:26,240 --> 00:04:29,440
this program is usually not what an end

00:04:28,560 --> 00:04:31,759
user

00:04:29,440 --> 00:04:33,040
runs directly this is more for people

00:04:31,759 --> 00:04:35,280
like me and robin

00:04:33,040 --> 00:04:37,280
who want to transition from an existing

00:04:35,280 --> 00:04:40,960
version control system like mercurial

00:04:37,280 --> 00:04:43,680
subversion cvs whatever you have

00:04:40,960 --> 00:04:45,120
and the git fast import is really the

00:04:43,680 --> 00:04:47,440
right tool for that

00:04:45,120 --> 00:04:48,240
work it's like a swiss army knife for

00:04:47,440 --> 00:04:51,840
getting data

00:04:48,240 --> 00:04:54,639
into git you write an exporter

00:04:51,840 --> 00:04:56,800
which outputs data on standard out and

00:04:54,639 --> 00:04:57,440
then you pipe that to get fast the

00:04:56,800 --> 00:04:59,040
import

00:04:57,440 --> 00:05:01,520
which will take care of all the little

00:04:59,040 --> 00:05:04,320
details of getting your data

00:05:01,520 --> 00:05:07,199
into a correct git repository million

00:05:04,320 --> 00:05:10,479
robin wrote a custom exporter in java

00:05:07,199 --> 00:05:12,720
the git fast import protocol is simple

00:05:10,479 --> 00:05:14,320
and when you're doing a custom exporter

00:05:12,720 --> 00:05:16,479
you can take the opportunity

00:05:14,320 --> 00:05:18,639
to also adjust commit messages or do

00:05:16,479 --> 00:05:20,720
other kind of modifications

00:05:18,639 --> 00:05:21,680
to your commits before they end up in

00:05:20,720 --> 00:05:23,680
the git repo

00:05:21,680 --> 00:05:25,120
we took the chance for example to adjust

00:05:23,680 --> 00:05:27,199
the commit messages a bit

00:05:25,120 --> 00:05:28,960
to better suit the way the git community

00:05:27,199 --> 00:05:30,800
formats commit messages

00:05:28,960 --> 00:05:34,720
and with this we've been very happy to

00:05:30,800 --> 00:05:34,720
convert more than 100 000 commits

00:05:36,880 --> 00:05:43,440
so after the mercurial to get conversion

00:05:41,120 --> 00:05:45,759
was taken care of

00:05:43,440 --> 00:05:47,039
uh it's time to talk a little bit about

00:05:45,759 --> 00:05:49,520
the transition we did

00:05:47,039 --> 00:05:50,720
from using a self-hosted mercurial

00:05:49,520 --> 00:05:53,919
repository

00:05:50,720 --> 00:05:56,000
to starting to use the github platform

00:05:53,919 --> 00:05:57,440
and to get a little bit of context on

00:05:56,000 --> 00:05:59,600
why this matters

00:05:57,440 --> 00:06:02,240
i want to start with describing the

00:05:59,600 --> 00:06:04,080
existing open jdk development practices

00:06:02,240 --> 00:06:08,479
a bit

00:06:04,080 --> 00:06:11,120
and before the move to github and

00:06:08,479 --> 00:06:12,240
so these practices they have had over 13

00:06:11,120 --> 00:06:14,560
years to stabilize

00:06:12,240 --> 00:06:16,000
and they can be considered quite mature

00:06:14,560 --> 00:06:18,560
by now

00:06:16,000 --> 00:06:20,479
and first of all all discussions over

00:06:18,560 --> 00:06:22,880
and reviews so what goes into the open

00:06:20,479 --> 00:06:24,080
jdk is handled using various mailing

00:06:22,880 --> 00:06:26,080
lists

00:06:24,080 --> 00:06:27,319
and a quick look at the index reveals

00:06:26,080 --> 00:06:30,319
that there are over

00:06:27,319 --> 00:06:33,440
150 active ones which can

00:06:30,319 --> 00:06:36,400
certainly be feel a bit intimidating

00:06:33,440 --> 00:06:38,880
especially if you are a new contributor

00:06:36,400 --> 00:06:39,600
and secondly the open jdk product

00:06:38,880 --> 00:06:43,039
defines

00:06:39,600 --> 00:06:46,160
multiple contributor roles

00:06:43,039 --> 00:06:46,840
so after your have a first few small

00:06:46,160 --> 00:06:50,160
patches

00:06:46,840 --> 00:06:52,080
accepted you can attain the author role

00:06:50,160 --> 00:06:54,319
and that makes it a little bit easier to

00:06:52,080 --> 00:06:56,479
contribute further

00:06:54,319 --> 00:06:58,560
and after you have contributed a number

00:06:56,479 --> 00:07:02,000
of reasonably sized changes

00:06:58,560 --> 00:07:05,280
you can obtain the committer role and

00:07:02,000 --> 00:07:06,160
finally the reviewer role that requires

00:07:05,280 --> 00:07:09,199
a good amount

00:07:06,160 --> 00:07:12,800
of significant changes and also

00:07:09,199 --> 00:07:14,400
participating in reviewing changes

00:07:12,800 --> 00:07:16,080
however as soon as you obtain the

00:07:14,400 --> 00:07:18,880
committee role you also obtained

00:07:16,080 --> 00:07:20,560
direct push access to the mercurial

00:07:18,880 --> 00:07:23,919
repositories

00:07:20,560 --> 00:07:25,280
and this however it did not mean that

00:07:23,919 --> 00:07:26,880
you could just start pushing whatever

00:07:25,280 --> 00:07:28,400
you felt like now

00:07:26,880 --> 00:07:30,800
every push must be done with the

00:07:28,400 --> 00:07:33,280
correctly formatted commit message

00:07:30,800 --> 00:07:34,560
it's a reference a proper issue in the

00:07:33,280 --> 00:07:37,360
issue tracker

00:07:34,560 --> 00:07:39,039
and at least one capital r reviewer must

00:07:37,360 --> 00:07:41,680
have approved it

00:07:39,039 --> 00:07:44,800
and as i said all these reviews are made

00:07:41,680 --> 00:07:47,199
over email before anything can be pushed

00:07:44,800 --> 00:07:49,360
so this is a little bit different from

00:07:47,199 --> 00:07:50,639
the usual github workflow where you open

00:07:49,360 --> 00:07:52,560
up a pull request

00:07:50,639 --> 00:07:54,000
and eventually a maintainer presses the

00:07:52,560 --> 00:07:56,080
green merge button

00:07:54,000 --> 00:07:58,400
perhaps after a bit of discussion

00:07:56,080 --> 00:08:01,680
discussion in the

00:07:58,400 --> 00:08:05,360
in comments in the pull request

00:08:01,680 --> 00:08:07,919
so one of the main questions for us was

00:08:05,360 --> 00:08:09,120
how can we make both this and open jdk

00:08:07,919 --> 00:08:11,039
contributors

00:08:09,120 --> 00:08:13,360
as well as new ones comfortable with

00:08:11,039 --> 00:08:14,800
working on github and using pull

00:08:13,360 --> 00:08:17,039
requests

00:08:14,800 --> 00:08:18,000
so in order to support this existing

00:08:17,039 --> 00:08:20,479
open jdk

00:08:18,000 --> 00:08:22,479
development practices where possible

00:08:20,479 --> 00:08:24,720
there were three key areas where we have

00:08:22,479 --> 00:08:26,800
made customizations to the standard

00:08:24,720 --> 00:08:30,479
github workflow

00:08:26,800 --> 00:08:33,360
and those would be checks notifications

00:08:30,479 --> 00:08:33,360
and commands

00:08:33,760 --> 00:08:38,240
so we can start with a quick look at how

00:08:36,320 --> 00:08:40,640
we are using github checks

00:08:38,240 --> 00:08:42,560
to enforce open jdk specific

00:08:40,640 --> 00:08:44,880
requirements

00:08:42,560 --> 00:08:46,800
and one goal we had here was to automate

00:08:44,880 --> 00:08:48,720
as much as possible

00:08:46,800 --> 00:08:50,880
because there's no need to waste

00:08:48,720 --> 00:08:52,880
valuable reviewer time on manually

00:08:50,880 --> 00:08:55,360
checking that lines don't end with the

00:08:52,880 --> 00:08:57,680
trailing white space for example

00:08:55,360 --> 00:08:59,680
so instead we really want to enable

00:08:57,680 --> 00:09:00,800
reviewers to focus on the important

00:08:59,680 --> 00:09:02,880
aspects

00:09:00,800 --> 00:09:04,880
like design and correctness of an

00:09:02,880 --> 00:09:06,880
implementation

00:09:04,880 --> 00:09:09,279
and these checks are performed as soon

00:09:06,880 --> 00:09:11,279
as a pull request is opened up

00:09:09,279 --> 00:09:12,959
because when a pull request is created

00:09:11,279 --> 00:09:13,600
you're usually at a stage where you're

00:09:12,959 --> 00:09:16,240
looking for

00:09:13,600 --> 00:09:18,880
human reviewer feedback and are ready to

00:09:16,240 --> 00:09:21,440
make changes based on that feedback

00:09:18,880 --> 00:09:23,440
so it makes a lot of sense to also

00:09:21,440 --> 00:09:26,080
provide this automated feedback at the

00:09:23,440 --> 00:09:26,080
same time

00:09:26,480 --> 00:09:31,200
and some examples of the checks we have

00:09:30,160 --> 00:09:34,320
implemented is

00:09:31,200 --> 00:09:36,480
role-based access controls so this

00:09:34,320 --> 00:09:37,279
handles our notion of reviewers and

00:09:36,480 --> 00:09:39,600
committers

00:09:37,279 --> 00:09:41,519
and gives them slightly different

00:09:39,600 --> 00:09:45,519
capabilities

00:09:41,519 --> 00:09:48,000
we have our own bug tracker integration

00:09:45,519 --> 00:09:48,880
and we make sure that every pull request

00:09:48,000 --> 00:09:51,839
references an

00:09:48,880 --> 00:09:53,440
open issue and that the issue itself has

00:09:51,839 --> 00:09:55,120
not been used in a different commit

00:09:53,440 --> 00:09:57,360
already

00:09:55,120 --> 00:09:59,040
and we also look a bit at what's

00:09:57,360 --> 00:10:01,040
actually in the

00:09:59,040 --> 00:10:02,160
in the commits like we look for trading

00:10:01,040 --> 00:10:03,920
white space

00:10:02,160 --> 00:10:06,160
incorrect file permissions and we don't

00:10:03,920 --> 00:10:07,360
want binary files or symbolic links in

00:10:06,160 --> 00:10:11,200
the repository

00:10:07,360 --> 00:10:12,000
either and i guess we can also mention

00:10:11,200 --> 00:10:14,399
that we have

00:10:12,000 --> 00:10:16,480
also started using github actions to

00:10:14,399 --> 00:10:19,839
perform initial building and testing of

00:10:16,480 --> 00:10:19,839
changes in a pull request

00:10:20,480 --> 00:10:23,839
and the second area that we've been

00:10:22,560 --> 00:10:27,519
focusing on is

00:10:23,839 --> 00:10:28,800
around notifications so like many other

00:10:27,519 --> 00:10:30,800
open source project

00:10:28,800 --> 00:10:33,600
there are many more contributors in open

00:10:30,800 --> 00:10:36,320
dk than there are experienced reviewers

00:10:33,600 --> 00:10:37,760
so reviewer time is scarce and is very

00:10:36,320 --> 00:10:39,200
valuable

00:10:37,760 --> 00:10:41,120
this means that we need to provide the

00:10:39,200 --> 00:10:43,760
right notifications

00:10:41,120 --> 00:10:45,519
at the right time for reviewers also

00:10:43,760 --> 00:10:47,600
remember that as robin said

00:10:45,519 --> 00:10:49,440
opiate decay is more than a seven and a

00:10:47,600 --> 00:10:52,320
half million lines of code

00:10:49,440 --> 00:10:54,720
it's impossible for a single person to

00:10:52,320 --> 00:10:57,360
be able to review a patch to any

00:10:54,720 --> 00:10:59,120
of the source files so instead reviewers

00:10:57,360 --> 00:11:00,880
have different areas of expertise

00:10:59,120 --> 00:11:02,480
where they can engage with contributors

00:11:00,880 --> 00:11:03,920
and provide feedback

00:11:02,480 --> 00:11:06,000
this means that we need to reach

00:11:03,920 --> 00:11:06,800
reviewers at the right time and also

00:11:06,000 --> 00:11:08,800
need to

00:11:06,800 --> 00:11:10,560
tell reviewers about changes they care

00:11:08,800 --> 00:11:11,839
about and skip the ones they don't care

00:11:10,560 --> 00:11:15,120
about

00:11:11,839 --> 00:11:17,120
to enable this we implemented automatic

00:11:15,120 --> 00:11:19,600
labeling of pull requests

00:11:17,120 --> 00:11:21,279
with the help of a github application

00:11:19,600 --> 00:11:22,000
this means that for example let's say

00:11:21,279 --> 00:11:23,680
you make a

00:11:22,000 --> 00:11:27,440
pull request and you change one of the

00:11:23,680 --> 00:11:29,680
make files used for building opendk

00:11:27,440 --> 00:11:31,360
our program will then automatically look

00:11:29,680 --> 00:11:32,320
at the files in the pull request that

00:11:31,360 --> 00:11:34,720
you changed

00:11:32,320 --> 00:11:36,560
realize your only change to make files

00:11:34,720 --> 00:11:37,839
and then automatically apply the build

00:11:36,560 --> 00:11:40,720
label

00:11:37,839 --> 00:11:43,120
the build label will also mean that an

00:11:40,720 --> 00:11:46,000
email will be sent to the corresponding

00:11:43,120 --> 00:11:48,079
build dev mailing list at opendk where

00:11:46,000 --> 00:11:51,200
the experienced reviewers for the build

00:11:48,079 --> 00:11:53,040
system for opendk hang out

00:11:51,200 --> 00:11:54,639
experienced reviewers of sorry

00:11:53,040 --> 00:11:56,639
experience contributors

00:11:54,639 --> 00:11:57,680
can definitely override this automation

00:11:56,639 --> 00:11:59,440
but for newcomers

00:11:57,680 --> 00:12:01,519
this is great when you're coming into a

00:11:59,440 --> 00:12:04,160
project as big as open ak

00:12:01,519 --> 00:12:07,920
and you don't really know who to ping

00:12:04,160 --> 00:12:07,920
for looking at your pull request

00:12:09,279 --> 00:12:13,440
so again reviewer time very variable we

00:12:11,680 --> 00:12:16,240
don't want to waste that resource

00:12:13,440 --> 00:12:17,760
uh now in addition to automatically

00:12:16,240 --> 00:12:19,519
labeling the pull request and sending it

00:12:17,760 --> 00:12:22,240
to the correct mailing list

00:12:19,519 --> 00:12:23,200
when your viewers hang out we also delay

00:12:22,240 --> 00:12:25,680
a little bit

00:12:23,200 --> 00:12:27,120
when an email is sent so as we mentioned

00:12:25,680 --> 00:12:28,800
we have several checks

00:12:27,120 --> 00:12:31,360
that automatically kicks in when you

00:12:28,800 --> 00:12:33,200
create a pull request we will not notify

00:12:31,360 --> 00:12:36,720
the corresponding mailing lists

00:12:33,200 --> 00:12:38,720
until those automated checks have passed

00:12:36,720 --> 00:12:40,000
this really isn't no need for a viewer

00:12:38,720 --> 00:12:42,320
to look at a change

00:12:40,000 --> 00:12:43,760
that hasn't passed these basic checks

00:12:42,320 --> 00:12:47,440
like trailing whitebase

00:12:43,760 --> 00:12:51,680
or having a symbolic link in the pr

00:12:47,440 --> 00:12:54,560
and again we use these labels uh to map

00:12:51,680 --> 00:12:56,160
requests to the correct main list and i

00:12:54,560 --> 00:12:59,279
want to point out there that

00:12:56,160 --> 00:13:01,040
even though many reviewers prefer

00:12:59,279 --> 00:13:03,279
perhaps the more a little bit old-school

00:13:01,040 --> 00:13:05,120
way of interacting over main list

00:13:03,279 --> 00:13:07,680
there are also reviewers who can choose

00:13:05,120 --> 00:13:09,760
to use github notifications

00:13:07,680 --> 00:13:11,360
natively and those though and that of

00:13:09,760 --> 00:13:12,240
course is fully supported they will

00:13:11,360 --> 00:13:14,079
interact

00:13:12,240 --> 00:13:16,160
as many of you do on github with the

00:13:14,079 --> 00:13:19,360
default notification system

00:13:16,160 --> 00:13:20,959
but for those a bit more perhaps

00:13:19,360 --> 00:13:22,480
experience the viewers hanging out on

00:13:20,959 --> 00:13:24,800
the main list more used

00:13:22,480 --> 00:13:26,720
to that way of working we also implement

00:13:24,800 --> 00:13:28,959
that bi-directional thing

00:13:26,720 --> 00:13:30,800
with regards to the main list so once

00:13:28,959 --> 00:13:32,320
the notification hits the mainly if the

00:13:30,800 --> 00:13:34,399
reviewer has comments

00:13:32,320 --> 00:13:35,360
then he or she can post a reply to the

00:13:34,399 --> 00:13:37,760
main list

00:13:35,360 --> 00:13:39,600
and that reply will become a comment on

00:13:37,760 --> 00:13:42,720
the pull request on github

00:13:39,600 --> 00:13:44,079
this way uh people used to the default

00:13:42,720 --> 00:13:46,480
github workflow

00:13:44,079 --> 00:13:48,240
can interact with open education the

00:13:46,480 --> 00:13:50,720
regular github workflow

00:13:48,240 --> 00:13:52,160
and experienced sloppy mdk reviewers who

00:13:50,720 --> 00:13:54,160
prefer using main list

00:13:52,160 --> 00:13:55,680
can still opt to choose to use main list

00:13:54,160 --> 00:13:58,000
and they can both communicate with each

00:13:55,680 --> 00:13:58,000
other

00:13:59,360 --> 00:14:04,160
the third and the last area we focused

00:14:01,839 --> 00:14:05,199
on customization and tailoring to open

00:14:04,160 --> 00:14:07,920
the case needs

00:14:05,199 --> 00:14:10,079
is around pull request commands a pull

00:14:07,920 --> 00:14:12,240
request command might sound fancy

00:14:10,079 --> 00:14:13,839
but it's really just a regular comment

00:14:12,240 --> 00:14:15,440
on a pull request starting with a

00:14:13,839 --> 00:14:16,720
forward slash

00:14:15,440 --> 00:14:19,440
you might have seen this from other

00:14:16,720 --> 00:14:21,120
applications like slack or irc

00:14:19,440 --> 00:14:23,120
where if you start a message with a

00:14:21,120 --> 00:14:25,680
forward slash it usually means that you

00:14:23,120 --> 00:14:27,839
are invoking a command

00:14:25,680 --> 00:14:29,680
for opening case needs we have

00:14:27,839 --> 00:14:31,760
implemented several such commands

00:14:29,680 --> 00:14:34,320
that both contributors and reviewers can

00:14:31,760 --> 00:14:36,160
use when working with pull requests

00:14:34,320 --> 00:14:38,320
we use these commands to automate the

00:14:36,160 --> 00:14:40,160
open ldk workflow

00:14:38,320 --> 00:14:42,000
to streamline things and make everyone a

00:14:40,160 --> 00:14:45,199
bit more efficient

00:14:42,000 --> 00:14:45,600
for example opendk committers do not

00:14:45,199 --> 00:14:47,199
have

00:14:45,600 --> 00:14:49,680
direct write access to the option

00:14:47,199 --> 00:14:51,199
repositories but with the help of one of

00:14:49,680 --> 00:14:54,480
our pull request commands

00:14:51,199 --> 00:14:56,839
they can easily integrate

00:14:54,480 --> 00:14:58,000
a reviewed pull request into the option

00:14:56,839 --> 00:15:00,560
repository

00:14:58,000 --> 00:15:02,240
uh we also have support for

00:15:00,560 --> 00:15:03,600
automatically formatting a commit

00:15:02,240 --> 00:15:05,680
message

00:15:03,600 --> 00:15:07,680
for the result of a pull request and

00:15:05,680 --> 00:15:08,959
these commit messages can be adjusted

00:15:07,680 --> 00:15:10,079
with the help of these pull request

00:15:08,959 --> 00:15:12,320
commands

00:15:10,079 --> 00:15:13,680
and finally some pull request needs more

00:15:12,320 --> 00:15:15,760
attention

00:15:13,680 --> 00:15:17,120
so reviewers can then flag them using

00:15:15,760 --> 00:15:19,760
commands to say that

00:15:17,120 --> 00:15:21,920
they need more review from either more

00:15:19,760 --> 00:15:23,360
reviewers or a different kind of review

00:15:21,920 --> 00:15:26,560
and on the next slide we will see a

00:15:23,360 --> 00:15:28,399
couple of examples

00:15:26,560 --> 00:15:30,160
for example the main command that almost

00:15:28,399 --> 00:15:30,560
every opinion k contributor uses is

00:15:30,160 --> 00:15:33,519
slash

00:15:30,560 --> 00:15:35,279
integrate this will rebase and squash

00:15:33,519 --> 00:15:38,079
the commits in a public quest

00:15:35,279 --> 00:15:40,000
on top of the target branch it will also

00:15:38,079 --> 00:15:41,839
automatically format the final commit

00:15:40,000 --> 00:15:44,560
message for the result of the pull

00:15:41,839 --> 00:15:48,560
request using opennd case conventions

00:15:44,560 --> 00:15:51,920
and format this means that the reviewers

00:15:48,560 --> 00:15:53,279
don't have to spend time merging already

00:15:51,920 --> 00:15:56,079
reviewed pull requests

00:15:53,279 --> 00:15:56,639
instead the water of the pull request

00:15:56,079 --> 00:16:00,639
can

00:15:56,639 --> 00:16:02,720
once all the criterias are met integrate

00:16:00,639 --> 00:16:04,000
easily the pull request without

00:16:02,720 --> 00:16:06,560
resorting to

00:16:04,000 --> 00:16:08,959
git rebase or anything similar an

00:16:06,560 --> 00:16:11,040
example of a command that

00:16:08,959 --> 00:16:13,040
is for reviewers is the slash csr

00:16:11,040 --> 00:16:14,880
command which means that this pull

00:16:13,040 --> 00:16:16,320
request requires a compatibility and

00:16:14,880 --> 00:16:18,560
specification review

00:16:16,320 --> 00:16:20,399
uh opendk and the java programming

00:16:18,560 --> 00:16:21,680
language and platform takes backwards

00:16:20,399 --> 00:16:24,720
compatibility

00:16:21,680 --> 00:16:26,079
extremely seriously so for many changes

00:16:24,720 --> 00:16:27,759
to the language and to the core

00:16:26,079 --> 00:16:30,160
libraries

00:16:27,759 --> 00:16:32,480
there needs to be additional reviews

00:16:30,160 --> 00:16:34,399
from very very experienced reviewers

00:16:32,480 --> 00:16:36,240
who take backwards compatibility into

00:16:34,399 --> 00:16:37,600
consideration when looking at those pull

00:16:36,240 --> 00:16:40,160
requests

00:16:37,600 --> 00:16:41,040
finally to help out newcomers into the

00:16:40,160 --> 00:16:42,720
community

00:16:41,040 --> 00:16:44,959
we have the sponsor command which

00:16:42,720 --> 00:16:45,839
existing open uk commuters and reviewers

00:16:44,959 --> 00:16:47,680
can use

00:16:45,839 --> 00:16:49,839
to easily integrate changes from

00:16:47,680 --> 00:16:52,320
newcomers who are not yet part of our

00:16:49,839 --> 00:16:52,320
community

00:16:55,600 --> 00:17:01,759
all right so finally i just

00:16:59,120 --> 00:17:04,000
wanted to talk a little bit about our

00:17:01,759 --> 00:17:07,199
product itself

00:17:04,000 --> 00:17:10,400
so the project scara

00:17:07,199 --> 00:17:14,160
is an open jdk project and

00:17:10,400 --> 00:17:15,919
it was created to at first investigate

00:17:14,160 --> 00:17:17,679
and then to actually perform the

00:17:15,919 --> 00:17:21,360
transition of open jdk

00:17:17,679 --> 00:17:24,000
to git and github and

00:17:21,360 --> 00:17:25,679
the product score itself is fully open

00:17:24,000 --> 00:17:28,880
source

00:17:25,679 --> 00:17:31,200
it is written in java and it

00:17:28,880 --> 00:17:32,080
obviously makes heavy use of the github

00:17:31,200 --> 00:17:35,120
rest and

00:17:32,080 --> 00:17:38,720
graphql apis

00:17:35,120 --> 00:17:40,960
and also in addition to implementing the

00:17:38,720 --> 00:17:42,480
services and tools we have touched upon

00:17:40,960 --> 00:17:44,960
briefly today

00:17:42,480 --> 00:17:47,360
it also provides a suite of cli tools

00:17:44,960 --> 00:17:49,360
for open jdk developers that prefer to

00:17:47,360 --> 00:17:52,720
work in the terminal

00:17:49,360 --> 00:17:54,559
so for open jdk contributors like eric

00:17:52,720 --> 00:17:55,840
there's actually no need to open up a

00:17:54,559 --> 00:17:58,160
web browser or

00:17:55,840 --> 00:17:59,200
any other graphical tool at any stage of

00:17:58,160 --> 00:18:01,280
the process

00:17:59,200 --> 00:18:04,080
of getting a change integrated into the

00:18:01,280 --> 00:18:04,080
open jdk

00:18:04,960 --> 00:18:09,120
and that was pretty much what we wanted

00:18:08,480 --> 00:18:12,400
to

00:18:09,120 --> 00:18:13,520
talk about today and if you want to

00:18:12,400 --> 00:18:17,039
learn more about

00:18:13,520 --> 00:18:20,559
the openjdk product itself feel free to

00:18:17,039 --> 00:18:22,640
visit us at openjdk.java.net

00:18:20,559 --> 00:18:24,240
and you are also very welcome to follow

00:18:22,640 --> 00:18:27,760
us at twitter.com

00:18:24,240 --> 00:18:30,960
openadk and obviously

00:18:27,760 --> 00:18:31,520
all the source for open adk and its

00:18:30,960 --> 00:18:33,760
various

00:18:31,520 --> 00:18:35,440
projects such as project scara is

00:18:33,760 --> 00:18:40,480
available at

00:18:35,440 --> 00:18:40,480
github.com openjdk

00:18:41,520 --> 00:18:45,440
so thank you so much for tuning in today

00:18:44,240 --> 00:18:47,840
to our session

00:18:45,440 --> 00:18:48,559
we are happy to take answers that you

00:18:47,840 --> 00:18:51,120
can

00:18:48,559 --> 00:18:53,039
questions that you can tell to our hosts

00:18:51,120 --> 00:18:53,919
and we will happily answer questions

00:18:53,039 --> 00:18:56,720
about the

00:18:53,919 --> 00:18:57,760
githubs the github rest apis graphql

00:18:56,720 --> 00:19:00,720
apis

00:18:57,760 --> 00:19:02,400
um optimization and github and also if

00:19:00,720 --> 00:19:04,320
you want to transition from

00:19:02,400 --> 00:19:05,919
mercurial to git we are happy to answer

00:19:04,320 --> 00:19:10,000
those questions as well

00:19:05,919 --> 00:19:10,000

YouTube URL: https://www.youtube.com/watch?v=fWE6k7HxTi8


