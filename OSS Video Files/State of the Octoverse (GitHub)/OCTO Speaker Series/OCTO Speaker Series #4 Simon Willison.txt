Title: OCTO Speaker Series #4 Simon Willison
Publication date: 2020-11-12
Playlist: OCTO Speaker Series
Description: 
	Personal Data Warehouses: Reclaiming Your Data

Every nerd deserves their own personal data warehouse - a system that gives them the same kind of analytical capability that is usually reserved for giant tech companies. I've figured out how to build one, using SQLite, Datasette and a handful of open source scripts and APIs.

I'll demonstrate my own personal Dogsheep, built using data from GitHub, Twitter, Foursquare, Apple Photos, Google, LinkedIn, 23AndMe and more. I'll show how legislation such as Europe's GDPR have made it easier for us to build our own personal analytics platforms, and discuss the way forward towards a world where we can empower even non-nerds to finally take control of their personal data.

About Simon Willison
Simon is the creator of Datasette, an open source tool for exploring and publishing data.

Datasette is based on Simon's experiences working as a data journalist at the UK's Guardian newspaper.

Simon is also a co-creator of the Django web framework. He recently completed the JSK Fellowship program at Stanford.

Twitter: @SIMONW
GitHub: SIMONW
Web: https://simonwillison.net/

Learn more about the OCTO Speaker series here: https://octo.github.com/
Captions: 
	00:00:06,860 --> 00:00:14,000
[Music]

00:00:11,840 --> 00:00:17,279
good morning hi everyone i'm edan

00:00:14,000 --> 00:00:20,000
and i work in github's office as a cto

00:00:17,279 --> 00:00:21,279
our mission is to explore the future of

00:00:20,000 --> 00:00:24,400
software development

00:00:21,279 --> 00:00:27,439
we figure out how to make it uh safer

00:00:24,400 --> 00:00:28,560
faster easier and more accessible

00:00:27,439 --> 00:00:30,160
when i was thinking about how to

00:00:28,560 --> 00:00:32,079
introduce our speaker for today i

00:00:30,160 --> 00:00:34,160
realized that our mission is missing

00:00:32,079 --> 00:00:36,399
something that simon has been

00:00:34,160 --> 00:00:39,040
doing for most of his career writing

00:00:36,399 --> 00:00:41,760
software that's impactful software

00:00:39,040 --> 00:00:44,800
that enables others to use software

00:00:41,760 --> 00:00:47,600
lowering the cost of entry for everyone

00:00:44,800 --> 00:00:49,440
most often associated with the creation

00:00:47,600 --> 00:00:50,399
of the django web framework simon has

00:00:49,440 --> 00:00:52,000
been influencing

00:00:50,399 --> 00:00:54,480
journalism and journalists throughout

00:00:52,000 --> 00:00:55,600
his career django itself was born out of

00:00:54,480 --> 00:00:58,160
the needs of the newsroom

00:00:55,600 --> 00:00:59,840
at the lawrence journal world and later

00:00:58,160 --> 00:01:00,800
on at the guardian he was involved in

00:00:59,840 --> 00:01:02,640
one of the first

00:01:00,800 --> 00:01:05,519
large-scale crowdsourced journalism

00:01:02,640 --> 00:01:08,240
campaigns building tools to annotate

00:01:05,519 --> 00:01:09,280
a gigantic cache of government documents

00:01:08,240 --> 00:01:11,280
bringing

00:01:09,280 --> 00:01:12,720
sunlight to what would otherwise be

00:01:11,280 --> 00:01:15,840
impenetrable

00:01:12,720 --> 00:01:18,240
and more recently he was a jsk fellow at

00:01:15,840 --> 00:01:18,960
stanford working on dataset a swiss army

00:01:18,240 --> 00:01:21,840
knife

00:01:18,960 --> 00:01:23,759
for querying and sharing data that is

00:01:21,840 --> 00:01:25,759
aimed squarely at journalists

00:01:23,759 --> 00:01:28,159
scientists and anyone who needs to

00:01:25,759 --> 00:01:30,400
explore and publish data

00:01:28,159 --> 00:01:32,400
it's been my experience that whatever

00:01:30,400 --> 00:01:34,479
simon is chasing ends up being accepted

00:01:32,400 --> 00:01:35,360
best practice for everyone in about two

00:01:34,479 --> 00:01:37,520
years

00:01:35,360 --> 00:01:39,280
so i'm incredibly excited to hear about

00:01:37,520 --> 00:01:42,399
his latest efforts to grapple with

00:01:39,280 --> 00:01:45,439
our growing mountain of personal data

00:01:42,399 --> 00:01:48,159
uh if you have any questions simon

00:01:45,439 --> 00:01:48,799
will shortly be sharing a google doc url

00:01:48,159 --> 00:01:51,520
where

00:01:48,799 --> 00:01:52,560
they'll be collected for q a at the end

00:01:51,520 --> 00:01:56,159
simon

00:01:52,560 --> 00:01:56,159
thank you so much for joining us

00:01:56,560 --> 00:02:02,799
oh thank you um

00:01:59,840 --> 00:02:03,920
thank you idan hello everyone so yeah my

00:02:02,799 --> 00:02:06,000
name is simon willison

00:02:03,920 --> 00:02:08,160
and i am going to be talking today about

00:02:06,000 --> 00:02:11,200
personal data warehouses so

00:02:08,160 --> 00:02:11,840
what they are um why you want one how to

00:02:11,200 --> 00:02:13,920
build one

00:02:11,840 --> 00:02:15,840
and some of the kind of crazy things you

00:02:13,920 --> 00:02:18,800
can do with them once you've got one

00:02:15,840 --> 00:02:20,239
running and i'm just going to share my

00:02:18,800 --> 00:02:22,400
screen

00:02:20,239 --> 00:02:23,680
you're good i am good my screen is

00:02:22,400 --> 00:02:27,040
visible fantastic

00:02:23,680 --> 00:02:28,879
okay so um as edan mentioned i'll be

00:02:27,040 --> 00:02:29,360
taking questions for this in a google

00:02:28,879 --> 00:02:30,720
doc

00:02:29,360 --> 00:02:32,400
so there's a url at the bottom of the

00:02:30,720 --> 00:02:35,200
screen bitly.com

00:02:32,400 --> 00:02:37,040
octo hyphen simon w if you go there

00:02:35,200 --> 00:02:39,200
you'll be dropped into this document

00:02:37,040 --> 00:02:40,800
and you can collect questions in this

00:02:39,200 --> 00:02:41,680
section at the bottom and also please

00:02:40,800 --> 00:02:43,920
feel free to

00:02:41,680 --> 00:02:45,360
add in notes and things as we go along

00:02:43,920 --> 00:02:48,959
as well let's use this as a

00:02:45,360 --> 00:02:51,920
collaborative space during the talk um

00:02:48,959 --> 00:02:53,680
so i'm gonna start with a demo um and

00:02:51,920 --> 00:02:54,400
for the demo i'm going to use cleo this

00:02:53,680 --> 00:02:56,800
is cleo

00:02:54,400 --> 00:02:59,200
clear as my dog and as you can tell she

00:02:56,800 --> 00:02:59,519
is a proud resident of san francisco she

00:02:59,200 --> 00:03:02,080
um

00:02:59,519 --> 00:03:03,120
won first prize in a costume competition

00:03:02,080 --> 00:03:05,040
a couple of years ago

00:03:03,120 --> 00:03:06,319
dressed here as the golden gate bridge

00:03:05,040 --> 00:03:08,480
um but the question

00:03:06,319 --> 00:03:09,680
i want to answer is how much of a san

00:03:08,480 --> 00:03:12,560
francisco hipster

00:03:09,680 --> 00:03:13,680
is clio and i can do that using my data

00:03:12,560 --> 00:03:16,319
warehouse

00:03:13,680 --> 00:03:17,200
so i use foursquare swarm and i've used

00:03:16,319 --> 00:03:19,200
it for

00:03:17,200 --> 00:03:20,319
nearly a decade now and i check in at

00:03:19,200 --> 00:03:22,959
different places that i go

00:03:20,319 --> 00:03:24,799
so i've exported all of my data out of

00:03:22,959 --> 00:03:27,200
swarm on a regular basis

00:03:24,799 --> 00:03:29,280
into a database table so i can see a map

00:03:27,200 --> 00:03:31,840
of 10 years worth of my check-ins

00:03:29,280 --> 00:03:33,040
but much more interestingly every time i

00:03:31,840 --> 00:03:35,599
check in with clio

00:03:33,040 --> 00:03:36,959
i use the wolf emoji in the shout which

00:03:35,599 --> 00:03:39,040
is the check-in message

00:03:36,959 --> 00:03:40,720
which means i can run a query where i

00:03:39,040 --> 00:03:41,599
can say show me all the check-ins where

00:03:40,720 --> 00:03:44,879
the shout

00:03:41,599 --> 00:03:45,440
contains that wolf emoji and if i do

00:03:44,879 --> 00:03:46,720
that

00:03:45,440 --> 00:03:48,400
it will this will trim all of my

00:03:46,720 --> 00:03:50,000
checkings down to basically a map of

00:03:48,400 --> 00:03:52,400
cleo's favorite places

00:03:50,000 --> 00:03:53,120
this is 280 places that cleo has checked

00:03:52,400 --> 00:03:55,040
into

00:03:53,120 --> 00:03:56,400
but i want to know sort of what kind of

00:03:55,040 --> 00:03:59,519
stuff is she into

00:03:56,400 --> 00:04:01,680
so i'm going to facet by venue category

00:03:59,519 --> 00:04:03,040
faceting is essentially a sort of group

00:04:01,680 --> 00:04:05,599
by count operation

00:04:03,040 --> 00:04:07,680
that shows you a count of the number of

00:04:05,599 --> 00:04:08,319
value of different unique values in a

00:04:07,680 --> 00:04:09,680
column

00:04:08,319 --> 00:04:12,799
and so i can see that cleo has checked

00:04:09,680 --> 00:04:13,760
into a park 57 times a dog run 32 times

00:04:12,799 --> 00:04:16,880
but a coffee shop

00:04:13,760 --> 00:04:18,880
19 times so in our exploration of her

00:04:16,880 --> 00:04:19,680
san francisco hipsterness let's take a

00:04:18,880 --> 00:04:22,400
look at a

00:04:19,680 --> 00:04:23,440
map of coffee shops that clejo's cleo

00:04:22,400 --> 00:04:26,160
has checked into

00:04:23,440 --> 00:04:28,240
she's got 19 chickens um they should

00:04:26,160 --> 00:04:29,520
just here we go there they all are and i

00:04:28,240 --> 00:04:32,320
confess it once again by

00:04:29,520 --> 00:04:33,520
the venue names um simon apologies for

00:04:32,320 --> 00:04:34,560
interrupting we're not seeing your

00:04:33,520 --> 00:04:37,759
screen update

00:04:34,560 --> 00:04:38,400
uh well that's strange we are still

00:04:37,759 --> 00:04:40,479
seeing your

00:04:38,400 --> 00:04:42,000
your title screen so maybe try unsharing

00:04:40,479 --> 00:04:43,090
and reaching your screen

00:04:42,000 --> 00:04:46,310
okay um

00:04:43,090 --> 00:04:46,310
[Music]

00:04:46,479 --> 00:04:52,560
how do i do which but um

00:04:50,800 --> 00:04:53,840
how about now can be can you see

00:04:52,560 --> 00:04:57,120
anything now

00:04:53,840 --> 00:05:01,440
success and you can see a map of

00:04:57,120 --> 00:05:04,560
of clio's check-ins right yes

00:05:01,440 --> 00:05:06,479
fantastic i apologize for that so very

00:05:04,560 --> 00:05:08,080
briefly i started with

00:05:06,479 --> 00:05:09,919
all of these check-ins i filtered them

00:05:08,080 --> 00:05:10,800
down to just the ones with the wolf

00:05:09,919 --> 00:05:12,240
emoji

00:05:10,800 --> 00:05:13,919
and then i filtered those down to just

00:05:12,240 --> 00:05:15,360
the ones where the venue where the venue

00:05:13,919 --> 00:05:17,360
category was coffee shop

00:05:15,360 --> 00:05:19,440
now i'm seeing a map of coffee shops

00:05:17,360 --> 00:05:22,080
that cleo my dog likes to visit

00:05:19,440 --> 00:05:23,600
and um if i fast it by venue name i can

00:05:22,080 --> 00:05:24,160
see that she's been to blue bottle 11

00:05:23,600 --> 00:05:26,240
times

00:05:24,160 --> 00:05:27,600
ritual roasters three times but she has

00:05:26,240 --> 00:05:30,400
occasionally um

00:05:27,600 --> 00:05:32,240
week um sort of been unable to avoid the

00:05:30,400 --> 00:05:34,080
temptation of starbucks

00:05:32,240 --> 00:05:35,759
so obviously this is a really useful

00:05:34,080 --> 00:05:37,919
thing being able to do a map of all of

00:05:35,759 --> 00:05:39,440
the coffee shops that your dog likes is

00:05:37,919 --> 00:05:40,479
hopefully reason enough to build

00:05:39,440 --> 00:05:42,720
yourself

00:05:40,479 --> 00:05:44,240
to to get interested in analyzing your

00:05:42,720 --> 00:05:46,000
own personal data

00:05:44,240 --> 00:05:47,520
but i'm going to take a step back from

00:05:46,000 --> 00:05:49,039
the demo and talk about the software

00:05:47,520 --> 00:05:50,080
talk about how this system actually

00:05:49,039 --> 00:05:52,479
works

00:05:50,080 --> 00:05:54,400
the key piece of software here is um

00:05:52,479 --> 00:05:55,840
this web application i'm running called

00:05:54,400 --> 00:05:57,440
dataset and dataset

00:05:55,840 --> 00:05:59,680
is a project i've been working on for

00:05:57,440 --> 00:06:00,240
almost exactly three years now in fact

00:05:59,680 --> 00:06:02,160
the

00:06:00,240 --> 00:06:03,360
three year anniversary of its initial

00:06:02,160 --> 00:06:06,240
launch is tomorrow

00:06:03,360 --> 00:06:07,440
so this is almost dataset's birthday and

00:06:06,240 --> 00:06:10,560
the idea with dataset

00:06:07,440 --> 00:06:11,199
is to build a application that makes it

00:06:10,560 --> 00:06:13,600
as easy as

00:06:11,199 --> 00:06:15,680
and cheap and inexpensive as possible to

00:06:13,600 --> 00:06:17,039
explore data in all sorts of different

00:06:15,680 --> 00:06:19,120
shapes and sizes

00:06:17,039 --> 00:06:20,319
and i'll show you one more demo of

00:06:19,120 --> 00:06:22,479
dataset just to

00:06:20,319 --> 00:06:23,440
give an idea of what it can be of how it

00:06:22,479 --> 00:06:25,759
can apply to

00:06:23,440 --> 00:06:28,240
um journalism well actually i'll talk

00:06:25,759 --> 00:06:29,520
about where this idea came from so i was

00:06:28,240 --> 00:06:32,319
working at the guardian

00:06:29,520 --> 00:06:32,960
um nearly 10 years ago and one of the

00:06:32,319 --> 00:06:34,639
things

00:06:32,960 --> 00:06:36,479
i realized when i joined the guardian is

00:06:34,639 --> 00:06:38,240
that the guardian had enormous

00:06:36,479 --> 00:06:38,880
quantities of really interesting data

00:06:38,240 --> 00:06:40,800
already

00:06:38,880 --> 00:06:42,240
because it's a newspaper and any time a

00:06:40,800 --> 00:06:44,400
newspaper publishes a

00:06:42,240 --> 00:06:45,440
chart or a map or any kind of

00:06:44,400 --> 00:06:47,440
visualization

00:06:45,440 --> 00:06:49,759
in the paper somebody had to go and dig

00:06:47,440 --> 00:06:50,880
up the numbers for that visualization

00:06:49,759 --> 00:06:52,880
there was a journalist there called

00:06:50,880 --> 00:06:55,280
simon rodgers who was

00:06:52,880 --> 00:06:56,240
an absolute wizard at tracking down data

00:06:55,280 --> 00:06:57,759
he could

00:06:56,240 --> 00:06:59,440
ask him for any facts in the world and

00:06:57,759 --> 00:07:01,280
he'd know who to call and who to

00:06:59,440 --> 00:07:03,039
which which government sources to bother

00:07:01,280 --> 00:07:04,560
to get that data back out again

00:07:03,039 --> 00:07:06,080
and all of that data lived in excel

00:07:04,560 --> 00:07:08,080
spreadsheets on his

00:07:06,080 --> 00:07:09,599
on his desktop um on his desktop

00:07:08,080 --> 00:07:11,680
computer so we

00:07:09,599 --> 00:07:13,599
we conspired and thought okay is there a

00:07:11,680 --> 00:07:15,440
way that we can publish this data

00:07:13,599 --> 00:07:17,120
as well as the stories sort of published

00:07:15,440 --> 00:07:18,479
the numbers behind the stories

00:07:17,120 --> 00:07:20,800
and we started this thing called the

00:07:18,479 --> 00:07:22,240
data blog and the idea was

00:07:20,800 --> 00:07:23,680
anytime the guardian puts out a story

00:07:22,240 --> 00:07:25,120
with numbers in we'll publish the

00:07:23,680 --> 00:07:26,560
numbers as well

00:07:25,120 --> 00:07:28,720
the challenge we had is how do we

00:07:26,560 --> 00:07:31,120
publish those numbers and we ended up

00:07:28,720 --> 00:07:31,919
going for the sort of cheapest and most

00:07:31,120 --> 00:07:33,840
um

00:07:31,919 --> 00:07:34,960
easy to get going solution which was

00:07:33,840 --> 00:07:36,639
google sheets

00:07:34,960 --> 00:07:39,199
so the guardian would publish a google

00:07:36,639 --> 00:07:41,120
sheet with us public debt by day

00:07:39,199 --> 00:07:42,479
or whatever the number was behind the

00:07:41,120 --> 00:07:44,560
stories at the time

00:07:42,479 --> 00:07:46,319
and despite being a pretty low-tech way

00:07:44,560 --> 00:07:47,280
of doing things this worked extremely

00:07:46,319 --> 00:07:49,759
well we had a

00:07:47,280 --> 00:07:51,280
community of people who would um they

00:07:49,759 --> 00:07:52,879
had a flicker group where they'd publish

00:07:51,280 --> 00:07:53,680
their own visualizations of numbers from

00:07:52,879 --> 00:07:55,440
the guardian

00:07:53,680 --> 00:07:56,800
and it turned and it's since become

00:07:55,440 --> 00:07:58,960
pretty common for

00:07:56,800 --> 00:08:00,479
newspapers to to publish that underlying

00:07:58,960 --> 00:08:03,440
data which i think is a really

00:08:00,479 --> 00:08:05,199
really exciting trend but i was always

00:08:03,440 --> 00:08:07,840
frustrated by this because i felt like

00:08:05,199 --> 00:08:08,319
there really should be something better

00:08:07,840 --> 00:08:10,000
than

00:08:08,319 --> 00:08:11,919
google sheets for publishing data

00:08:10,000 --> 00:08:13,199
something more flexible and more

00:08:11,919 --> 00:08:14,879
essentially more open

00:08:13,199 --> 00:08:16,319
that we could use to get this data out

00:08:14,879 --> 00:08:18,960
into the world

00:08:16,319 --> 00:08:19,840
so fast forward seven years in 2017 i

00:08:18,960 --> 00:08:22,240
was looking at

00:08:19,840 --> 00:08:24,160
serverless hosting and these new this

00:08:22,240 --> 00:08:26,000
new style of hosting provider

00:08:24,160 --> 00:08:27,680
and thinking okay what are the things

00:08:26,000 --> 00:08:28,879
that i can do with this that i couldn't

00:08:27,680 --> 00:08:30,639
have done previously

00:08:28,879 --> 00:08:32,399
it's a question i always ask myself with

00:08:30,639 --> 00:08:35,039
new technology is okay what does this

00:08:32,399 --> 00:08:36,640
let me build that wasn't possible before

00:08:35,039 --> 00:08:38,159
and there are lots of definitions of

00:08:36,640 --> 00:08:40,640
serverless out there my personal

00:08:38,159 --> 00:08:42,159
favorite is this idea of scale to zero

00:08:40,640 --> 00:08:44,399
if your project isn't getting any

00:08:42,159 --> 00:08:44,720
traffic you're not spending any money on

00:08:44,399 --> 00:08:47,440
it

00:08:44,720 --> 00:08:48,880
and as somebody who loves creating crazy

00:08:47,440 --> 00:08:51,360
little side projects but

00:08:48,880 --> 00:08:52,880
but this this is absolute gold for me

00:08:51,360 --> 00:08:53,279
because it means i can build a crazy

00:08:52,880 --> 00:08:55,360
thing

00:08:53,279 --> 00:08:56,720
put it online and not end up paying five

00:08:55,360 --> 00:08:59,440
or ten dollars a month for the rest of

00:08:56,720 --> 00:09:01,680
my life for it to stay stay visible

00:08:59,440 --> 00:09:03,680
so these serverless hosts um they scale

00:09:01,680 --> 00:09:04,720
to xero they're very inexpensive

00:09:03,680 --> 00:09:06,480
generally

00:09:04,720 --> 00:09:08,000
but the cats that you find with a lot of

00:09:06,480 --> 00:09:10,160
these things like um the

00:09:08,000 --> 00:09:11,839
cell which used to be called zeit now or

00:09:10,160 --> 00:09:13,680
google cloud run or

00:09:11,839 --> 00:09:15,040
or heroku is that if you're on a

00:09:13,680 --> 00:09:17,680
database it tends to cost

00:09:15,040 --> 00:09:19,760
extra because databases things that are

00:09:17,680 --> 00:09:21,920
storing data that's changing over time

00:09:19,760 --> 00:09:23,360
are still a lot more expensive to run

00:09:21,920 --> 00:09:25,040
and operate and scale

00:09:23,360 --> 00:09:26,560
up one of the beautiful things about

00:09:25,040 --> 00:09:28,880
serverless hosting is

00:09:26,560 --> 00:09:30,000
since it's just code you can they you

00:09:28,880 --> 00:09:31,760
can scale it by just

00:09:30,000 --> 00:09:34,000
running more copies of it so you

00:09:31,760 --> 00:09:35,440
essentially get an infinite scale

00:09:34,000 --> 00:09:37,040
provided you're not worrying about a

00:09:35,440 --> 00:09:38,880
database

00:09:37,040 --> 00:09:40,240
this made me think well okay so i'm not

00:09:38,880 --> 00:09:41,040
allowed to database on these things but

00:09:40,240 --> 00:09:43,040
essentially

00:09:41,040 --> 00:09:44,720
they give i get to give them a docker

00:09:43,040 --> 00:09:45,360
container and they run that container in

00:09:44,720 --> 00:09:47,440
the cloud

00:09:45,360 --> 00:09:49,120
what if i put my data in the docker

00:09:47,440 --> 00:09:50,240
container like what if i'm dealing with

00:09:49,120 --> 00:09:52,800
databases that don't

00:09:50,240 --> 00:09:54,080
have updates they're not changing but

00:09:52,800 --> 00:09:54,720
they're still data that i want to

00:09:54,080 --> 00:09:56,240
publish

00:09:54,720 --> 00:09:57,680
and i realized that that was the exact

00:09:56,240 --> 00:09:59,040
problem that we'd been wanting to solve

00:09:57,680 --> 00:10:01,200
with the guardian how do you

00:09:59,040 --> 00:10:04,560
publish data online in a way that's as

00:10:01,200 --> 00:10:06,640
flexible and inexpensive as possible

00:10:04,560 --> 00:10:08,000
and so that was the original the initial

00:10:06,640 --> 00:10:09,680
impetus for dataset was

00:10:08,000 --> 00:10:11,040
if i bundle the data and the code

00:10:09,680 --> 00:10:13,519
together in a

00:10:11,040 --> 00:10:15,120
single usually in a docker container and

00:10:13,519 --> 00:10:16,640
deploy that to the internet

00:10:15,120 --> 00:10:19,839
can i take advantage of serverless

00:10:16,640 --> 00:10:19,839
hosting and

00:10:20,079 --> 00:10:23,680
for the size of projects i was carrying

00:10:21,600 --> 00:10:25,680
about um but use it to share these

00:10:23,680 --> 00:10:27,600
interesting data sets with the world

00:10:25,680 --> 00:10:29,680
so the initial the first couple of years

00:10:27,600 --> 00:10:30,480
of on data set was spent solving exactly

00:10:29,680 --> 00:10:32,800
that problem

00:10:30,480 --> 00:10:34,640
i'll show you another demo um this is a

00:10:32,800 --> 00:10:35,440
organization called the world resources

00:10:34,640 --> 00:10:37,519
institute

00:10:35,440 --> 00:10:38,720
and they publish a global database of

00:10:37,519 --> 00:10:41,600
power plants

00:10:38,720 --> 00:10:43,440
and they publish this as csv files on

00:10:41,600 --> 00:10:45,200
github and this is a pattern i'm seeing

00:10:43,440 --> 00:10:46,560
increasingly these days there are so

00:10:45,200 --> 00:10:48,720
many interesting

00:10:46,560 --> 00:10:51,120
like um points of truth data sources

00:10:48,720 --> 00:10:52,640
that use github as their primary way of

00:10:51,120 --> 00:10:54,959
distributing the data

00:10:52,640 --> 00:10:55,920
um and the csv file is great but we can

00:10:54,959 --> 00:10:58,320
do better than that

00:10:55,920 --> 00:10:59,680
so i've got a script which runs i think

00:10:58,320 --> 00:11:01,519
a couple of times a day

00:10:59,680 --> 00:11:03,680
checks for updates to this and if there

00:11:01,519 --> 00:11:04,240
are updates it publishes it using data

00:11:03,680 --> 00:11:06,399
set

00:11:04,240 --> 00:11:08,399
so this right here is that is the

00:11:06,399 --> 00:11:10,480
contents of that csv file that the

00:11:08,399 --> 00:11:12,240
is published by this organization only

00:11:10,480 --> 00:11:14,720
once i've got it in data set i can start

00:11:12,240 --> 00:11:17,279
doing more interesting things with it um

00:11:14,720 --> 00:11:18,800
dataset supports plugins you've already

00:11:17,279 --> 00:11:20,800
seen this plug-in for my

00:11:18,800 --> 00:11:22,000
my dog's map of coffee shops this is a

00:11:20,800 --> 00:11:24,320
plug-in called dataset

00:11:22,000 --> 00:11:26,000
cluster map what it does is looks for

00:11:24,320 --> 00:11:26,480
tables with latitude and longitude

00:11:26,000 --> 00:11:28,560
columns

00:11:26,480 --> 00:11:29,519
and if it finds one it draws them on the

00:11:28,560 --> 00:11:31,120
map so

00:11:29,519 --> 00:11:32,399
straight away looking this data you

00:11:31,120 --> 00:11:33,440
notice oh there's a couple of power

00:11:32,399 --> 00:11:35,519
plants down here

00:11:33,440 --> 00:11:38,240
in antarctica yeah this is mcmurdo

00:11:35,519 --> 00:11:42,320
station which has a 6.6 megawatt

00:11:38,240 --> 00:11:43,040
um oil generator and ross island has a

00:11:42,320 --> 00:11:44,800
oh look at this

00:11:43,040 --> 00:11:46,160
i didn't know that there's a wind farm

00:11:44,800 --> 00:11:48,880
down in antarctica

00:11:46,160 --> 00:11:50,079
knocking out um one one megawatts of um

00:11:48,880 --> 00:11:52,880
electricity

00:11:50,079 --> 00:11:55,279
um but this is also an illustration of

00:11:52,880 --> 00:11:58,480
faceting so if i want to see a map of

00:11:55,279 --> 00:12:00,160
just the nuclear power plants in there's

00:11:58,480 --> 00:12:02,079
198 nuclear power plants

00:12:00,160 --> 00:12:03,760
in the world and i just want to see the

00:12:02,079 --> 00:12:06,079
19 that are in france

00:12:03,760 --> 00:12:08,079
here it is this is a slice and dice of

00:12:06,079 --> 00:12:10,240
nuclear power plants in france

00:12:08,079 --> 00:12:11,519
a couple of really important features um

00:12:10,240 --> 00:12:13,680
that i should illustrate

00:12:11,519 --> 00:12:16,160
firstly everything that you can see in

00:12:13,680 --> 00:12:17,680
data set you can get out as raw data so

00:12:16,160 --> 00:12:20,800
if i click json right here

00:12:17,680 --> 00:12:24,000
this is a json document of nuclear power

00:12:20,800 --> 00:12:25,839
plants in france it's not filtered data

00:12:24,000 --> 00:12:27,040
i can also get it back as csv if i want

00:12:25,839 --> 00:12:29,760
to export it into

00:12:27,040 --> 00:12:31,440
excel or other csv compatible um

00:12:29,760 --> 00:12:34,079
software

00:12:31,440 --> 00:12:35,120
even more fun if i click view and edit

00:12:34,079 --> 00:12:37,360
sql

00:12:35,120 --> 00:12:38,639
i get the actual sql query that was used

00:12:37,360 --> 00:12:40,720
to generate this page

00:12:38,639 --> 00:12:41,920
which i can edit so i can say you know

00:12:40,720 --> 00:12:44,480
what i just want the

00:12:41,920 --> 00:12:46,000
capacity the latitude longitude and the

00:12:44,480 --> 00:12:49,200
primary fuel

00:12:46,000 --> 00:12:51,600
and if i trim this down here

00:12:49,200 --> 00:12:53,120
and then re-execute the query there we

00:12:51,600 --> 00:12:56,079
go this is just giving me

00:12:53,120 --> 00:12:57,279
back um this is just giving me back

00:12:56,079 --> 00:13:00,399
those four columns

00:12:57,279 --> 00:13:02,639
which i can then get back as json so

00:13:00,399 --> 00:13:03,519
this in most web applications would be

00:13:02,639 --> 00:13:06,079
seen as a

00:13:03,519 --> 00:13:07,279
terrifying security hole because this is

00:13:06,079 --> 00:13:08,880
sql injection

00:13:07,279 --> 00:13:11,040
except as a core feature of the

00:13:08,880 --> 00:13:11,760
framework um the reason it's not a

00:13:11,040 --> 00:13:14,079
problem here

00:13:11,760 --> 00:13:15,600
is um firstly we're dealing with a

00:13:14,079 --> 00:13:17,839
read-only database

00:13:15,600 --> 00:13:19,440
um updates and inserts and such like

00:13:17,839 --> 00:13:22,480
just aren't allowed the file is

00:13:19,440 --> 00:13:25,440
um the the database is is immutable

00:13:22,480 --> 00:13:26,800
um i've also got a time limit set in

00:13:25,440 --> 00:13:27,600
here so if the query takes more than a

00:13:26,800 --> 00:13:30,160
second to run

00:13:27,600 --> 00:13:32,160
it'll return with an error and also the

00:13:30,160 --> 00:13:34,320
whole point of this system is to publish

00:13:32,160 --> 00:13:36,000
data there is nothing in this database

00:13:34,320 --> 00:13:38,160
that isn't safe to be exposed to the

00:13:36,000 --> 00:13:40,000
world there are no password hashes or

00:13:38,160 --> 00:13:42,079
any private data at all

00:13:40,000 --> 00:13:43,199
but this also means that we've got an ap

00:13:42,079 --> 00:13:46,000
a json api

00:13:43,199 --> 00:13:48,240
that lets javascript execute sql queries

00:13:46,000 --> 00:13:51,440
like i can construct this url up here

00:13:48,240 --> 00:13:54,000
in javascript add json as the extension

00:13:51,440 --> 00:13:54,800
and get back the json results of any sql

00:13:54,000 --> 00:13:56,959
query

00:13:54,800 --> 00:13:58,800
which i initially thought was just kind

00:13:56,959 --> 00:14:00,639
of kind of amusing but i've actually

00:13:58,800 --> 00:14:02,720
found as a prototyping tool this is

00:14:00,639 --> 00:14:04,399
really powerful i can build prototypes

00:14:02,720 --> 00:14:08,320
in javascript where i literally embed

00:14:04,399 --> 00:14:12,240
sql statements into my javascript code

00:14:08,320 --> 00:14:13,600
so that's a sort of example of the kind

00:14:12,240 --> 00:14:15,360
the kind of stuff that you can do with

00:14:13,600 --> 00:14:16,959
dataset it's worth talking about what

00:14:15,360 --> 00:14:19,279
the secret source under the hood

00:14:16,959 --> 00:14:21,360
is and the secret source behind all this

00:14:19,279 --> 00:14:21,920
is this incredible database called sql

00:14:21,360 --> 00:14:25,199
lite

00:14:21,920 --> 00:14:25,839
um everyone on this call uses sqlite

00:14:25,199 --> 00:14:27,360
every day

00:14:25,839 --> 00:14:29,680
even if you don't realize it because it

00:14:27,360 --> 00:14:31,120
is the um it calls itself the most used

00:14:29,680 --> 00:14:33,519
database engine in the world

00:14:31,120 --> 00:14:35,600
it's designed to run on on on devices so

00:14:33,519 --> 00:14:37,279
i've got a sqlite database in my apple

00:14:35,600 --> 00:14:39,760
watch that tracks my steps

00:14:37,279 --> 00:14:40,720
sql most of the uh apps on my iphone are

00:14:39,760 --> 00:14:43,120
using sqlite

00:14:40,720 --> 00:14:44,240
desktop apps use it it's absolutely

00:14:43,120 --> 00:14:47,440
everywhere and

00:14:44,240 --> 00:14:49,120
it's fast it's self-contained it's very

00:14:47,440 --> 00:14:51,680
reliable extremely well tested

00:14:49,120 --> 00:14:54,000
but my favorite um attribute of sql like

00:14:51,680 --> 00:14:55,120
is that the database itself is a single

00:14:54,000 --> 00:14:58,639
file on disk

00:14:55,120 --> 00:15:00,240
it's a db file you compare this to mysql

00:14:58,639 --> 00:15:00,800
or postgres where you've got a server

00:15:00,240 --> 00:15:02,480
with

00:15:00,800 --> 00:15:04,399
all sorts of crazy directory structures

00:15:02,480 --> 00:15:05,760
going on now a sqlite database is one

00:15:04,399 --> 00:15:07,600
file which means you can

00:15:05,760 --> 00:15:09,680
back it up you can send it to people

00:15:07,600 --> 00:15:12,160
it's it's a really easy thing

00:15:09,680 --> 00:15:14,320
to to work with and for my purposes it's

00:15:12,160 --> 00:15:16,800
easy to package up in a docker container

00:15:14,320 --> 00:15:18,399
so all of these deployed data sets are a

00:15:16,800 --> 00:15:20,000
database file that i've created

00:15:18,399 --> 00:15:22,079
i stick it in the container with the

00:15:20,000 --> 00:15:25,360
application code and i put that thing

00:15:22,079 --> 00:15:27,920
online so

00:15:25,360 --> 00:15:29,759
i'm going to show another demo which i

00:15:27,920 --> 00:15:33,519
think is particularly relevant to

00:15:29,759 --> 00:15:34,720
um to to to to thinking about how github

00:15:33,519 --> 00:15:38,720
fits into all of this

00:15:34,720 --> 00:15:40,240
um last year um you may remember that pg

00:15:38,720 --> 00:15:42,079
e the electricity

00:15:40,240 --> 00:15:44,160
um company that covers most of

00:15:42,079 --> 00:15:46,399
california had a whole bunch of

00:15:44,160 --> 00:15:47,680
scheduled outages to deal with with

00:15:46,399 --> 00:15:49,759
risks of wildfires it was

00:15:47,680 --> 00:15:50,959
they turned off power to huge quantities

00:15:49,759 --> 00:15:53,680
of california

00:15:50,959 --> 00:15:55,360
and i got really lucky with this because

00:15:53,680 --> 00:15:57,759
six months before they started doing

00:15:55,360 --> 00:15:59,040
that i'd started quietly scraping their

00:15:57,759 --> 00:16:02,240
outage map

00:15:59,040 --> 00:16:05,120
and dumping the results into

00:16:02,240 --> 00:16:06,320
a git repository so this right here is a

00:16:05,120 --> 00:16:09,759
get github repo

00:16:06,320 --> 00:16:12,320
with 34 000 commits tracking the

00:16:09,759 --> 00:16:13,600
history of outages that pg e published

00:16:12,320 --> 00:16:15,360
on their outage map

00:16:13,600 --> 00:16:17,680
you can see that two minutes ago they

00:16:15,360 --> 00:16:19,920
added 35 new outages they removed two

00:16:17,680 --> 00:16:21,519
outages and they updated the details on

00:16:19,920 --> 00:16:24,480
on 23 of them

00:16:21,519 --> 00:16:25,199
um this is a technique that i recently

00:16:24,480 --> 00:16:26,800
um

00:16:25,199 --> 00:16:29,600
gave it gave a name to i'm calling it

00:16:26,800 --> 00:16:32,639
git scraping the idea with git scraping

00:16:29,600 --> 00:16:35,360
is here we go is that

00:16:32,639 --> 00:16:36,000
any you can take any data endpoint on

00:16:35,360 --> 00:16:37,440
the web

00:16:36,000 --> 00:16:39,440
which is a sort of point in time

00:16:37,440 --> 00:16:40,160
snapshot like this is the power outages

00:16:39,440 --> 00:16:42,320
right now

00:16:40,160 --> 00:16:44,160
and if you repeatedly commit it to a git

00:16:42,320 --> 00:16:45,839
repository you get a commit log that

00:16:44,160 --> 00:16:49,600
tells the story of the history

00:16:45,839 --> 00:16:52,800
of that particular thing um

00:16:49,600 --> 00:16:55,120
this you may that this this technique

00:16:52,800 --> 00:16:56,079
really stood out um just last week when

00:16:55,120 --> 00:16:57,519
the during the

00:16:56,079 --> 00:16:59,120
well the election results were coming in

00:16:57,519 --> 00:16:59,680
you may have seen this website this is

00:16:59,120 --> 00:17:02,639
the

00:16:59,680 --> 00:17:03,519
new york times 2020 election scraper so

00:17:02,639 --> 00:17:05,919
the um

00:17:03,519 --> 00:17:07,679
what this page does is it scrapes the

00:17:05,919 --> 00:17:11,199
new york times current list

00:17:07,679 --> 00:17:12,880
of um of of um votes that have come in

00:17:11,199 --> 00:17:15,039
but because it's keeping a history of

00:17:12,880 --> 00:17:16,640
them in in a git repository it can show

00:17:15,039 --> 00:17:19,520
you how they have changed so it'll show

00:17:16,640 --> 00:17:22,480
you that um 39 minutes ago

00:17:19,520 --> 00:17:24,000
the um there was a change of 140 votes

00:17:22,480 --> 00:17:26,640
in the state of nevada

00:17:24,000 --> 00:17:28,000
um and this is it's absolutely worth

00:17:26,640 --> 00:17:30,480
taking a look at the code for this

00:17:28,000 --> 00:17:31,440
um it's a github action script that runs

00:17:30,480 --> 00:17:33,200
on a schedule

00:17:31,440 --> 00:17:34,960
and then it's a repo where they've been

00:17:33,200 --> 00:17:37,360
tracking the history of this over time

00:17:34,960 --> 00:17:38,960
plus some really clever python code to

00:17:37,360 --> 00:17:40,240
build that web page and figure out the

00:17:38,960 --> 00:17:41,280
differences and all of that kind of

00:17:40,240 --> 00:17:44,240
stuff

00:17:41,280 --> 00:17:44,799
but this technique i think is super

00:17:44,240 --> 00:17:47,600
useful

00:17:44,799 --> 00:17:49,520
um as a in working in journalism for

00:17:47,600 --> 00:17:51,679
tracking things but also for all

00:17:49,520 --> 00:17:53,520
for any time that you want to keep track

00:17:51,679 --> 00:17:55,360
of how something changes over time

00:17:53,520 --> 00:17:56,559
thanks to github scheduled actions

00:17:55,360 --> 00:18:00,320
setting one of these up is

00:17:56,559 --> 00:18:02,160
is really really simple so i've got

00:18:00,320 --> 00:18:03,360
a demo i'm going to do a very a little

00:18:02,160 --> 00:18:05,679
bit of live coding

00:18:03,360 --> 00:18:06,400
just to show you how this kind of stuff

00:18:05,679 --> 00:18:09,600
works

00:18:06,400 --> 00:18:11,919
um i'm going to use the cal fire website

00:18:09,600 --> 00:18:14,240
um so this is the official state of

00:18:11,919 --> 00:18:17,440
california fire website and

00:18:14,240 --> 00:18:19,200
any time i see a map like this my first

00:18:17,440 --> 00:18:19,840
instinct is to open up the developer

00:18:19,200 --> 00:18:21,360
tools

00:18:19,840 --> 00:18:23,039
and see if i can figure out how it

00:18:21,360 --> 00:18:24,000
actually works so i'm going to hit

00:18:23,039 --> 00:18:26,559
inspect element

00:18:24,000 --> 00:18:28,000
i'm going to open up the network tab

00:18:26,559 --> 00:18:30,480
refresh the page

00:18:28,000 --> 00:18:31,440
and then a really fun trick with these

00:18:30,480 --> 00:18:34,400
is to

00:18:31,440 --> 00:18:35,280
filter by xhr requests and then order by

00:18:34,400 --> 00:18:37,360
size

00:18:35,280 --> 00:18:39,039
because when you do that inevitably the

00:18:37,360 --> 00:18:40,320
thing at the top of the list

00:18:39,039 --> 00:18:42,240
the things at the top list are the

00:18:40,320 --> 00:18:43,520
actual data for that page this thing

00:18:42,240 --> 00:18:46,960
right here looks interesting

00:18:43,520 --> 00:18:49,919
i'm going to open this in a new tab this

00:18:46,960 --> 00:18:52,400
appears to be a json file telling me

00:18:49,919 --> 00:18:55,039
about all of the current fire incidents

00:18:52,400 --> 00:18:57,200
in the state of california and it is

00:18:55,039 --> 00:18:57,840
that so i actually set up a scraper for

00:18:57,200 --> 00:19:00,799
this

00:18:57,840 --> 00:19:02,799
um a while ago which grabs copy which

00:19:00,799 --> 00:19:03,840
which commits this to a git repository

00:19:02,799 --> 00:19:06,720
but i'm going to take this a step

00:19:03,840 --> 00:19:09,760
further and turn this into a data set

00:19:06,720 --> 00:19:11,600
instance um

00:19:09,760 --> 00:19:13,039
have it looking at this the all year

00:19:11,600 --> 00:19:15,440
instance key appears to be the most

00:19:13,039 --> 00:19:17,280
interesting it's got 260 things in it

00:19:15,440 --> 00:19:18,640
each of these is a fire that occurred

00:19:17,280 --> 00:19:22,799
this year

00:19:18,640 --> 00:19:25,679
so i'm going to curl this

00:19:22,799 --> 00:19:26,559
that gives me back the json i'm i'm just

00:19:25,679 --> 00:19:29,360
interested in

00:19:26,559 --> 00:19:31,039
all incidents so i'm going to pipe this

00:19:29,360 --> 00:19:34,160
through the jq command

00:19:31,039 --> 00:19:37,360
jq dot um

00:19:34,160 --> 00:19:40,559
what was that thing called dot all

00:19:37,360 --> 00:19:40,559
year incidents

00:19:41,360 --> 00:19:44,720
there we go that's a list of of instance

00:19:43,919 --> 00:19:46,000
this year

00:19:44,720 --> 00:19:48,080
now i'm going to pipe this into a tool

00:19:46,000 --> 00:19:49,600
i've been building called sqlite utils

00:19:48,080 --> 00:19:51,919
which is a suite of

00:19:49,600 --> 00:19:52,799
utilities for manipulating these sqlite

00:19:51,919 --> 00:19:54,240
databases

00:19:52,799 --> 00:19:57,200
in this case i'm going to use the insert

00:19:54,240 --> 00:19:59,280
command insert it into a files.db

00:19:57,200 --> 00:20:02,559
i'm going to call it incidents actually

00:19:59,280 --> 00:20:04,799
now called ca fires

00:20:02,559 --> 00:20:06,080
and i'm going to read from standard in

00:20:04,799 --> 00:20:09,200
so i do that

00:20:06,080 --> 00:20:12,240
and now i've got this ca fires.db

00:20:09,200 --> 00:20:13,120
um file so i can open open that in

00:20:12,240 --> 00:20:15,840
dataset

00:20:13,120 --> 00:20:17,840
running the dataset command and here it

00:20:15,840 --> 00:20:19,679
is this right now this is a brand new

00:20:17,840 --> 00:20:22,880
database that we just created

00:20:19,679 --> 00:20:24,880
using data from this api and you can see

00:20:22,880 --> 00:20:25,360
there are 261 rows you straight away see

00:20:24,880 --> 00:20:28,400
that

00:20:25,360 --> 00:20:28,799
one of them has a dodgy piece of data

00:20:28,400 --> 00:20:30,240
entry and

00:20:28,799 --> 00:20:32,640
the last few longitude have been set to

00:20:30,240 --> 00:20:34,320
the same value but 258 of them are in

00:20:32,640 --> 00:20:37,360
the right kind of place

00:20:34,320 --> 00:20:40,159
and i can also do things like um

00:20:37,360 --> 00:20:42,240
i can facet by county so i can see which

00:20:40,159 --> 00:20:44,960
counties this year had the most fires

00:20:42,240 --> 00:20:46,240
riverside had 21. but i'm going to take

00:20:44,960 --> 00:20:46,559
this step further further and i'm going

00:20:46,240 --> 00:20:49,200
to

00:20:46,559 --> 00:20:50,000
put this on the internet using a command

00:20:49,200 --> 00:20:53,039
called data set

00:20:50,000 --> 00:20:56,480
publish so with data set publish i can

00:20:53,039 --> 00:20:58,000
select the um the hosting provider i

00:20:56,480 --> 00:20:59,120
want to use i'm going to use verse cell

00:20:58,000 --> 00:21:01,280
because i don't know

00:20:59,120 --> 00:21:03,760
it deploys really quickly i'm going to

00:21:01,280 --> 00:21:06,240
say database says publish burst cell

00:21:03,760 --> 00:21:07,919
ca fires.db and i'm going to give it a

00:21:06,240 --> 00:21:09,200
project called ca fires

00:21:07,919 --> 00:21:11,039
and i'm also going to tell it that i

00:21:09,200 --> 00:21:14,400
want it to install

00:21:11,039 --> 00:21:18,080
that dataset cluster map plugin

00:21:14,400 --> 00:21:20,559
so this will then take that ca fires.db

00:21:18,080 --> 00:21:21,360
it'll bundle it up with the dataset code

00:21:20,559 --> 00:21:23,360
itself

00:21:21,360 --> 00:21:24,640
it'll push it out to versel it gives me

00:21:23,360 --> 00:21:27,919
this url so i can

00:21:24,640 --> 00:21:30,400
watch what it's doing right here um

00:21:27,919 --> 00:21:31,200
this will probably take about 30 seconds

00:21:30,400 --> 00:21:34,720
um

00:21:31,200 --> 00:21:36,159
to build that data it's cued so maybe

00:21:34,720 --> 00:21:37,919
maybe i'm in a queue behind a few other

00:21:36,159 --> 00:21:39,520
things i'll come back to this in a few

00:21:37,919 --> 00:21:42,559
seconds

00:21:39,520 --> 00:21:44,000
um but the idea here is to make it to to

00:21:42,559 --> 00:21:46,159
have as few steps as possible

00:21:44,000 --> 00:21:48,240
between finding some interesting data

00:21:46,159 --> 00:21:48,880
turning it into a sqlite database such

00:21:48,240 --> 00:21:50,799
that you can

00:21:48,880 --> 00:21:52,880
query it and use dataset on top of it

00:21:50,799 --> 00:21:54,480
and then stick it online with a url so

00:21:52,880 --> 00:21:55,360
that other people can start using that

00:21:54,480 --> 00:21:57,200
as well

00:21:55,360 --> 00:21:58,799
um oh here we go it's installing

00:21:57,200 --> 00:22:00,640
required dependencies

00:21:58,799 --> 00:22:02,320
uploading build outputs and it's done

00:22:00,640 --> 00:22:05,360
and now when i click visit

00:22:02,320 --> 00:22:06,240
this right here is that database that i

00:22:05,360 --> 00:22:08,480
just created

00:22:06,240 --> 00:22:10,080
but it's now available online for anyone

00:22:08,480 --> 00:22:12,159
to um for anyone to

00:22:10,080 --> 00:22:14,400
to view it query interact with it and

00:22:12,159 --> 00:22:14,720
even export json back out and build

00:22:14,400 --> 00:22:17,120
their

00:22:14,720 --> 00:22:19,440
own um api integrations on top of this

00:22:17,120 --> 00:22:20,799
data

00:22:19,440 --> 00:22:22,720
but what has this got to do with

00:22:20,799 --> 00:22:25,360
personal data warehouses so i've given

00:22:22,720 --> 00:22:28,240
you a whistle stop tour of um dataset

00:22:25,360 --> 00:22:30,159
for the purposes of publishing data and

00:22:28,240 --> 00:22:32,240
sort of doing serious journalism

00:22:30,159 --> 00:22:34,640
and then last year i read this essay

00:22:32,240 --> 00:22:36,320
this is an essay by stephen wolfram

00:22:34,640 --> 00:22:38,159
and it's the title is wonderful it's

00:22:36,320 --> 00:22:39,440
called seeking the productive life

00:22:38,159 --> 00:22:41,520
some details of my personal

00:22:39,440 --> 00:22:43,120
infrastructure the main feature of this

00:22:41,520 --> 00:22:44,480
essay is how long it is if you look at

00:22:43,120 --> 00:22:48,000
this little scroll bar

00:22:44,480 --> 00:22:50,400
it's this incredible exploration of

00:22:48,000 --> 00:22:52,080
40 years worth of productivity hacks

00:22:50,400 --> 00:22:54,880
that stephen wolfram has applied

00:22:52,080 --> 00:22:57,200
in order to become a ceo of a thousand

00:22:54,880 --> 00:22:57,600
person company who works remotely he's

00:22:57,200 --> 00:22:59,039
um

00:22:57,600 --> 00:23:01,120
based a thousand miles away from the

00:22:59,039 --> 00:23:03,120
office um which i guess we all are now

00:23:01,120 --> 00:23:05,440
with with kovid but he was he was a

00:23:03,120 --> 00:23:07,039
he was ahead of us in that one but he's

00:23:05,440 --> 00:23:07,679
put an enormous amount of work into

00:23:07,039 --> 00:23:09,520
optimizing

00:23:07,679 --> 00:23:11,200
every aspect of his professional and

00:23:09,520 --> 00:23:13,200
personal life now he has

00:23:11,200 --> 00:23:14,320
a standing desk but then his heart rate

00:23:13,200 --> 00:23:15,520
monster showed him that

00:23:14,320 --> 00:23:17,280
his heart rate's better when he walked

00:23:15,520 --> 00:23:17,679
around outside so he built himself a

00:23:17,280 --> 00:23:19,360
little

00:23:17,679 --> 00:23:21,840
laptop tray so he could go walking in

00:23:19,360 --> 00:23:23,760
the woods and he scanned every document

00:23:21,840 --> 00:23:25,840
from when he was 11 years old he's got

00:23:23,760 --> 00:23:27,360
a green screen in his basement so he can

00:23:25,840 --> 00:23:29,360
give talks from home

00:23:27,360 --> 00:23:30,559
all of this amazing stuff and i was

00:23:29,360 --> 00:23:31,840
reading through this thinking wow this

00:23:30,559 --> 00:23:33,600
is completely crazy

00:23:31,840 --> 00:23:35,840
but there was one thing in here that

00:23:33,600 --> 00:23:37,919
really caught my eye he talked about how

00:23:35,840 --> 00:23:39,679
he has a thing that he calls a meta

00:23:37,919 --> 00:23:40,799
searcher it's a search box on his

00:23:39,679 --> 00:23:43,039
personal homepage

00:23:40,799 --> 00:23:44,080
that can search across all of his emails

00:23:43,039 --> 00:23:45,600
and journals and

00:23:44,080 --> 00:23:47,600
people he knows and files on his

00:23:45,600 --> 00:23:50,400
machines everything he's ever done

00:23:47,600 --> 00:23:52,159
um all brought together in one place and

00:23:50,400 --> 00:23:54,559
i thought to myself you know

00:23:52,159 --> 00:23:56,159
i really want that i love this idea of

00:23:54,559 --> 00:23:58,640
like a personal portal

00:23:56,159 --> 00:24:00,720
onto my own stuff and so because it was

00:23:58,640 --> 00:24:02,480
inspired by stephen wolfram but i was

00:24:00,720 --> 00:24:04,640
planning on building a much less sort of

00:24:02,480 --> 00:24:06,480
alpha version of what stephen wolf

00:24:04,640 --> 00:24:07,279
stephen wolfram had built i decided to

00:24:06,480 --> 00:24:09,679
call it dog

00:24:07,279 --> 00:24:11,279
sheep he's stephen wolfram my thing is

00:24:09,679 --> 00:24:13,279
called dog sheep

00:24:11,279 --> 00:24:14,880
and so i've been building this over the

00:24:13,279 --> 00:24:16,559
past year and this is

00:24:14,880 --> 00:24:18,159
essentially this is my personal data

00:24:16,559 --> 00:24:20,400
warehouse this is a tool

00:24:18,159 --> 00:24:22,320
which pulls in as much data as i can

00:24:20,400 --> 00:24:22,960
find about myself from as many different

00:24:22,320 --> 00:24:24,480
sources

00:24:22,960 --> 00:24:26,799
and gives me an interface that lets me

00:24:24,480 --> 00:24:28,320
explore it and run queries against it

00:24:26,799 --> 00:24:30,320
and so i've got data in here from

00:24:28,320 --> 00:24:32,559
twitter from apple watch

00:24:30,320 --> 00:24:33,360
health kit i've got github data swarm

00:24:32,559 --> 00:24:35,840
check-ins

00:24:33,360 --> 00:24:36,720
my photos i've got a copy of my genome

00:24:35,840 --> 00:24:38,159
there's a

00:24:36,720 --> 00:24:40,080
whole bunch of different stuff that i'm

00:24:38,159 --> 00:24:41,760
running in here and i'll show you a

00:24:40,080 --> 00:24:42,480
couple of demos um here's another demo

00:24:41,760 --> 00:24:45,279
with clio

00:24:42,480 --> 00:24:46,480
so clio has a twitter account and every

00:24:45,279 --> 00:24:49,279
time she goes to the vet

00:24:46,480 --> 00:24:50,000
she posts a selfie and she says how much

00:24:49,279 --> 00:24:51,919
she weighs

00:24:50,000 --> 00:24:53,679
because she gets weighed at the vet and

00:24:51,919 --> 00:24:54,559
so what i'm doing here is i've got a sql

00:24:53,679 --> 00:24:56,799
query

00:24:54,559 --> 00:24:57,919
which finds every tweet where she

00:24:56,799 --> 00:24:59,919
mentions her weight

00:24:57,919 --> 00:25:01,520
uses a regular expression to full pull

00:24:59,919 --> 00:25:04,000
out her weight in pounds

00:25:01,520 --> 00:25:05,360
and then i can use a charting plug-in to

00:25:04,000 --> 00:25:07,360
draw a chart

00:25:05,360 --> 00:25:08,400
of her weight over time so this is

00:25:07,360 --> 00:25:10,880
cleo's

00:25:08,400 --> 00:25:12,799
clear's weight over time as reported by

00:25:10,880 --> 00:25:14,640
her personal selfies on twitter

00:25:12,799 --> 00:25:15,919
um it's clearly another super useful

00:25:14,640 --> 00:25:18,480
thing to be able to do

00:25:15,919 --> 00:25:20,000
um i did 23andme a few years ago um so

00:25:18,480 --> 00:25:22,880
i've got a copy of my genome

00:25:20,000 --> 00:25:24,240
in in dog sheep and i figured out a sql

00:25:22,880 --> 00:25:25,039
query that can tell me what color my

00:25:24,240 --> 00:25:27,520
eyes are

00:25:25,039 --> 00:25:28,400
and apparently my eyes are blue 99 of

00:25:27,520 --> 00:25:31,440
the time because

00:25:28,400 --> 00:25:34,480
this the gene that this rs id is is a gg

00:25:31,440 --> 00:25:36,080
genotype um again crazy useful um

00:25:34,480 --> 00:25:38,320
i mentioned apple health kit so i use

00:25:36,080 --> 00:25:39,600
the apple watch the amount of data the

00:25:38,320 --> 00:25:40,960
apple watch tracks about you is

00:25:39,600 --> 00:25:42,559
absolutely astonishing

00:25:40,960 --> 00:25:44,159
and something i really like about

00:25:42,559 --> 00:25:44,640
apple's approach to this is that they

00:25:44,159 --> 00:25:46,159
don't

00:25:44,640 --> 00:25:48,159
stick this on the cloud for you they

00:25:46,159 --> 00:25:50,240
keep it on your watch and on your phone

00:25:48,159 --> 00:25:51,840
turns out there's an export button in

00:25:50,240 --> 00:25:53,919
the health app on the phone

00:25:51,840 --> 00:25:54,880
that you can use to export a zip file

00:25:53,919 --> 00:25:56,880
full of xml

00:25:54,880 --> 00:25:58,320
with all of this stuff in so i wrote a

00:25:56,880 --> 00:26:00,640
script which converts that

00:25:58,320 --> 00:26:01,919
zip file of xml into a sqlite database

00:26:00,640 --> 00:26:04,320
and now i've got things like

00:26:01,919 --> 00:26:06,400
my basal energy burned my body fat

00:26:04,320 --> 00:26:08,240
percentage reported by my scales

00:26:06,400 --> 00:26:10,240
flights of stairs that i've climbed my

00:26:08,240 --> 00:26:11,840
heart rate my mindful sessions although

00:26:10,240 --> 00:26:13,919
i've only done one mindful session

00:26:11,840 --> 00:26:16,960
because apparently i'm not very mindful

00:26:13,919 --> 00:26:17,440
um but the really fun stuff is anytime

00:26:16,960 --> 00:26:19,039
you do an

00:26:17,440 --> 00:26:21,200
outdoor workout and track it on the

00:26:19,039 --> 00:26:22,559
apple watch turns out it records your

00:26:21,200 --> 00:26:25,200
latitude and longitude

00:26:22,559 --> 00:26:26,720
every few seconds um and you can get

00:26:25,200 --> 00:26:28,320
that data back out again so i

00:26:26,720 --> 00:26:30,640
when i ran the san francisco half

00:26:28,320 --> 00:26:31,919
marathon um this was what three years

00:26:30,640 --> 00:26:34,400
ago

00:26:31,919 --> 00:26:35,520
i got i now have a map of the exact

00:26:34,400 --> 00:26:37,279
route that i took

00:26:35,520 --> 00:26:38,960
um and again it's available as csv it's

00:26:37,279 --> 00:26:42,320
available as json this is

00:26:38,960 --> 00:26:44,080
a really amazing way of exploring you

00:26:42,320 --> 00:26:46,159
of extracting exploring your own

00:26:44,080 --> 00:26:46,799
personal data every time i go on a walk

00:26:46,159 --> 00:26:49,200
now i

00:26:46,799 --> 00:26:51,200
track it as an outdoor walk on my watch

00:26:49,200 --> 00:26:53,200
just so i can get that gps data back out

00:26:51,200 --> 00:26:56,240
again later

00:26:53,200 --> 00:26:58,400
um a couple of other things this is a

00:26:56,240 --> 00:26:59,760
super useful thing for people who use

00:26:58,400 --> 00:27:02,480
github a lot

00:26:59,760 --> 00:27:03,039
i've pulled in all of my github activity

00:27:02,480 --> 00:27:04,720
from

00:27:03,039 --> 00:27:07,039
and that's commits i've made to projects

00:27:04,720 --> 00:27:08,159
issues issue comments releases

00:27:07,039 --> 00:27:10,559
everything that i can get out of the

00:27:08,159 --> 00:27:12,559
github api for my project

00:27:10,559 --> 00:27:14,640
and it means i can do things like view

00:27:12,559 --> 00:27:16,159
all of my commits to everything

00:27:14,640 --> 00:27:17,760
every project i have on github i can

00:27:16,159 --> 00:27:20,159
fast it and say okay show me

00:27:17,760 --> 00:27:22,480
the 61 commits i made a dataset cluster

00:27:20,159 --> 00:27:24,399
map i can search them so if i search for

00:27:22,480 --> 00:27:25,840
pi test it'll show me all of my commits

00:27:24,399 --> 00:27:26,720
that mentioned pi test in the commit

00:27:25,840 --> 00:27:30,080
message

00:27:26,720 --> 00:27:32,320
um and again i can and because i can

00:27:30,080 --> 00:27:34,320
build custom sql queries here

00:27:32,320 --> 00:27:35,679
i can actually build essentially little

00:27:34,320 --> 00:27:37,600
applications

00:27:35,679 --> 00:27:39,440
that are defined as sql queries which i

00:27:37,600 --> 00:27:41,919
then bookmark so if i want

00:27:39,440 --> 00:27:42,559
um so i've got a bookmark which can show

00:27:41,919 --> 00:27:44,960
me

00:27:42,559 --> 00:27:47,200
issues that i haven't replied to yet

00:27:44,960 --> 00:27:51,039
based on a sort of sql subquery

00:27:47,200 --> 00:27:52,799
um i've got um i i use sql views as well

00:27:51,039 --> 00:27:53,679
here are recent releases across all of

00:27:52,799 --> 00:27:55,279
my projects

00:27:53,679 --> 00:27:57,120
which is very useful when once a week

00:27:55,279 --> 00:27:59,279
i'm trying to write up my weak notes on

00:27:57,120 --> 00:28:02,720
what on what i've been working on

00:27:59,279 --> 00:28:04,000
um a really fun one uh i use apple

00:28:02,720 --> 00:28:07,200
photos

00:28:04,000 --> 00:28:08,960
and again apple photos like health kit

00:28:07,200 --> 00:28:10,159
it does a huge amount of work on your

00:28:08,960 --> 00:28:12,320
own devices

00:28:10,159 --> 00:28:13,600
including it turns out running machine

00:28:12,320 --> 00:28:15,600
learning analysis

00:28:13,600 --> 00:28:16,880
against your photographs directly on

00:28:15,600 --> 00:28:19,039
your device apple

00:28:16,880 --> 00:28:20,080
download a machine learning model to you

00:28:19,039 --> 00:28:21,520
to your phone

00:28:20,080 --> 00:28:23,919
and they run that against photographs

00:28:21,520 --> 00:28:25,919
that you take and it's all stored in

00:28:23,919 --> 00:28:27,279
sqlite there's a sql like database for

00:28:25,919 --> 00:28:29,520
the apple photos app

00:28:27,279 --> 00:28:30,320
which once you get access to it to it

00:28:29,520 --> 00:28:32,480
you can pull

00:28:30,320 --> 00:28:34,000
sorts of interesting things out of it so

00:28:32,480 --> 00:28:37,760
here are photos that i've taken

00:28:34,000 --> 00:28:39,039
um which is and you've got location

00:28:37,760 --> 00:28:40,159
information and that kind of stuff as

00:28:39,039 --> 00:28:42,640
well

00:28:40,159 --> 00:28:44,000
but if you pull out the machine learning

00:28:42,640 --> 00:28:45,600
labels you can do things like

00:28:44,000 --> 00:28:47,520
run sql queries that show you

00:28:45,600 --> 00:28:50,720
photographs you've taken of pelicans

00:28:47,520 --> 00:28:52,080
so this is a sql query that's um finding

00:28:50,720 --> 00:28:53,360
everything where one of the machine

00:28:52,080 --> 00:28:54,960
learning labels was pelican

00:28:53,360 --> 00:28:57,120
you can see that apple photos does a

00:28:54,960 --> 00:29:00,000
pretty great job of identical and

00:28:57,120 --> 00:29:01,120
identifying pelicans but the really fun

00:29:00,000 --> 00:29:01,840
thing i found digging through their

00:29:01,120 --> 00:29:04,320
database

00:29:01,840 --> 00:29:05,279
is it turns out they calculate scores so

00:29:04,320 --> 00:29:08,320
there are columns

00:29:05,279 --> 00:29:10,799
in apple photos for things like z

00:29:08,320 --> 00:29:12,159
overall aesthetic score z highlight

00:29:10,799 --> 00:29:14,080
visibility score

00:29:12,159 --> 00:29:15,440
um harmonious color score there's even

00:29:14,080 --> 00:29:18,559
one for um

00:29:15,440 --> 00:29:20,640
inch pleasant camera tilt score and they

00:29:18,559 --> 00:29:22,640
don't expose this in the applications

00:29:20,640 --> 00:29:24,240
but it's there in the data so this right

00:29:22,640 --> 00:29:25,840
here isn't just a

00:29:24,240 --> 00:29:27,600
photos of pelicans i've taken this is

00:29:25,840 --> 00:29:28,000
ordered by the aesthetic school so this

00:29:27,600 --> 00:29:30,480
is

00:29:28,000 --> 00:29:32,320
apple's algorithmically selected best

00:29:30,480 --> 00:29:34,000
photographs i've taken the pelican

00:29:32,320 --> 00:29:36,399
which is a pretty useful thing to be

00:29:34,000 --> 00:29:38,000
able to do um

00:29:36,399 --> 00:29:40,399
if you want to know more about this

00:29:38,000 --> 00:29:42,880
there are links in the notes i

00:29:40,399 --> 00:29:44,399
have a um entering my blog where i talk

00:29:42,880 --> 00:29:46,559
about using sql to find my best

00:29:44,399 --> 00:29:48,960
photograph of a pelican

00:29:46,559 --> 00:29:50,640
and then a few weeks ago i finally got

00:29:48,960 --> 00:29:53,039
around to building the search engine

00:29:50,640 --> 00:29:53,679
um this is i'm calling this dog sheep

00:29:53,039 --> 00:29:55,279
beta

00:29:53,679 --> 00:29:56,960
because stephen wolfram has a search

00:29:55,279 --> 00:29:59,840
engine called wolf from alpha

00:29:56,960 --> 00:30:00,159
and actually the um the the the pun for

00:29:59,840 --> 00:30:01,840
this

00:30:00,159 --> 00:30:03,440
um i came up with this panic a year ago

00:30:01,840 --> 00:30:05,039
and i enjoyed the puns so much i

00:30:03,440 --> 00:30:06,799
committed to building software

00:30:05,039 --> 00:30:08,559
this is essentially 12 months of pun

00:30:06,799 --> 00:30:11,039
driven development at this point

00:30:08,559 --> 00:30:12,000
um but this lets me search across my

00:30:11,039 --> 00:30:14,559
tweets

00:30:12,000 --> 00:30:15,120
bookmarks my blog get commits and blog

00:30:14,559 --> 00:30:17,200
entries

00:30:15,120 --> 00:30:19,279
my comments on hacking news all of this

00:30:17,200 --> 00:30:20,480
different stuff all in one place

00:30:19,279 --> 00:30:21,919
and i actually use this the other day i

00:30:20,480 --> 00:30:22,480
was trying to answer the question when

00:30:21,919 --> 00:30:25,360
did i

00:30:22,480 --> 00:30:26,480
last last eat a um ice cream that was

00:30:25,360 --> 00:30:28,720
shaped like a fish

00:30:26,480 --> 00:30:30,559
i remember i did it in cooperty now if i

00:30:28,720 --> 00:30:32,960
search for cupertino

00:30:30,559 --> 00:30:34,159
this shows me photo it shows me tweets

00:30:32,960 --> 00:30:35,919
about cupertino

00:30:34,159 --> 00:30:37,600
oh hold on oh that's because i've got

00:30:35,919 --> 00:30:39,440
the is public filter on

00:30:37,600 --> 00:30:41,440
and it also shows me my photographs and

00:30:39,440 --> 00:30:45,200
that were labeled in cupertino

00:30:41,440 --> 00:30:45,200
and so i can scroll through these and

00:30:45,440 --> 00:30:49,600
there we go this is the last time i had

00:30:47,120 --> 00:30:52,880
a a ice cream shape like a waffle was

00:30:49,600 --> 00:30:54,880
the 5th of december 2019

00:30:52,880 --> 00:30:56,480
but this is um this hopefully gives you

00:30:54,880 --> 00:30:58,399
an idea for the kind of

00:30:56,480 --> 00:30:59,840
the kind of power you get once you get

00:30:58,399 --> 00:31:01,039
all of if you can get all of your data

00:30:59,840 --> 00:31:02,960
into one place

00:31:01,039 --> 00:31:04,799
especially into like a database that you

00:31:02,960 --> 00:31:05,519
control the things that you can build on

00:31:04,799 --> 00:31:08,960
top of it are

00:31:05,519 --> 00:31:11,039
essentially limitless um and i feel like

00:31:08,960 --> 00:31:12,080
lots of lots of nerdy people have tried

00:31:11,039 --> 00:31:13,840
doing this stuff in the past

00:31:12,080 --> 00:31:15,519
the catch is always okay so you've

00:31:13,840 --> 00:31:17,760
accumulated all of this data

00:31:15,519 --> 00:31:18,960
how can you build stuff on top of it and

00:31:17,760 --> 00:31:20,880
i think being able to

00:31:18,960 --> 00:31:23,519
having it in these sqlite databases with

00:31:20,880 --> 00:31:25,279
a relatively simple web interface on top

00:31:23,519 --> 00:31:26,720
that feels to me like the missing piece

00:31:25,279 --> 00:31:27,760
that's the thing that you need in order

00:31:26,720 --> 00:31:29,760
to be able to

00:31:27,760 --> 00:31:31,600
slice and dice your data without having

00:31:29,760 --> 00:31:35,360
to write lots of additional software

00:31:31,600 --> 00:31:35,360
on top of that that raw interface

00:31:35,600 --> 00:31:41,679
um oh there we go that's the uh

00:31:38,720 --> 00:31:44,840
the cell um the cell application has is

00:31:41,679 --> 00:31:47,279
deployed here and is running here

00:31:44,840 --> 00:31:50,320
so a couple of last thoughts

00:31:47,279 --> 00:31:52,159
um firstly one of the big

00:31:50,320 --> 00:31:53,600
helpers in all of this is this european

00:31:52,159 --> 00:31:55,360
law the gdpr

00:31:53,600 --> 00:31:57,120
um which came into effect a couple of

00:31:55,360 --> 00:31:58,720
years ago and

00:31:57,120 --> 00:32:00,320
essentially it means that you have a

00:31:58,720 --> 00:32:01,360
right to the data that companies hold

00:32:00,320 --> 00:32:03,679
about you

00:32:01,360 --> 00:32:05,360
most of the big internet companies and

00:32:03,679 --> 00:32:08,080
their their answer to this has been

00:32:05,360 --> 00:32:08,880
to add export options so if you dig

00:32:08,080 --> 00:32:10,480
around in

00:32:08,880 --> 00:32:12,080
pretty much any large site you use

00:32:10,480 --> 00:32:14,480
facebook or linkedin or

00:32:12,080 --> 00:32:15,919
um or twitter they're somewhere buried

00:32:14,480 --> 00:32:16,399
in the settings there'll be an export

00:32:15,919 --> 00:32:18,080
button

00:32:16,399 --> 00:32:19,840
and if you click that export button

00:32:18,080 --> 00:32:21,600
they'll probably email you a two

00:32:19,840 --> 00:32:24,320
gigabyte a link to a two gigabyte zip

00:32:21,600 --> 00:32:27,360
file full of xml or json or whatever

00:32:24,320 --> 00:32:29,919
which isn't that useful on the surface

00:32:27,360 --> 00:32:31,279
but if you build tools to turn that into

00:32:29,919 --> 00:32:33,120
say a sqlite database

00:32:31,279 --> 00:32:35,039
you can suddenly suddenly start deriving

00:32:33,120 --> 00:32:38,799
all kinds of useful things about it

00:32:35,039 --> 00:32:39,600
um the gdpr actually it turns out you

00:32:38,799 --> 00:32:41,600
can normally

00:32:39,600 --> 00:32:42,640
um you can contact these companies

00:32:41,600 --> 00:32:44,399
directly and

00:32:42,640 --> 00:32:46,159
make a i think it's called a subject

00:32:44,399 --> 00:32:48,320
information request um

00:32:46,159 --> 00:32:49,919
you can request additional data which

00:32:48,320 --> 00:32:51,200
they will send you as well

00:32:49,919 --> 00:32:53,360
but they're trying to keep their

00:32:51,200 --> 00:32:54,000
customer support um costs down as much

00:32:53,360 --> 00:32:55,760
as possible

00:32:54,000 --> 00:32:57,120
by giving you that that that

00:32:55,760 --> 00:32:58,799
self-service export

00:32:57,120 --> 00:33:00,480
so a lot of this stuff has become this

00:32:58,799 --> 00:33:00,880
stuff becomes increasingly easy over

00:33:00,480 --> 00:33:02,720
time

00:33:00,880 --> 00:33:05,120
as more companies build the export tools

00:33:02,720 --> 00:33:06,640
that we need to to build this

00:33:05,120 --> 00:33:09,039
and then the other challenge is how do

00:33:06,640 --> 00:33:11,200
we democratize access to this stuff

00:33:09,039 --> 00:33:12,480
so everything i've shown you it's it's

00:33:11,200 --> 00:33:14,240
all open source you're welcome to go and

00:33:12,480 --> 00:33:16,559
run it yourself but you will have to

00:33:14,240 --> 00:33:18,399
set up cron jobs run a server somewhere

00:33:16,559 --> 00:33:19,039
figure out how to secure it all of that

00:33:18,399 --> 00:33:22,320
kind of stuff

00:33:19,039 --> 00:33:24,000
and it's it's a lot of work um but

00:33:22,320 --> 00:33:26,480
this it feels like this is something

00:33:24,000 --> 00:33:28,159
that regular non-super nerd humans

00:33:26,480 --> 00:33:31,600
should have access to

00:33:28,159 --> 00:33:33,919
um i've got a few thoughts about that um

00:33:31,600 --> 00:33:35,840
i think ask expecting regular human

00:33:33,919 --> 00:33:38,000
beings to run a web service somewhere

00:33:35,840 --> 00:33:39,519
is pretty terrifying right running a web

00:33:38,000 --> 00:33:42,320
server is not easy

00:33:39,519 --> 00:33:44,000
um i have been looking at wire guard and

00:33:42,320 --> 00:33:45,840
tail scale as some

00:33:44,000 --> 00:33:47,200
sort of personal vpn options which do

00:33:45,840 --> 00:33:49,120
make it a little bit easier

00:33:47,200 --> 00:33:51,120
to secure access between your devices

00:33:49,120 --> 00:33:52,880
but this is still like a super power

00:33:51,120 --> 00:33:56,080
user level type of thing

00:33:52,880 --> 00:33:57,679
um i've shown this demo to a few people

00:33:56,080 --> 00:33:58,640
wow you could totally like do this as a

00:33:57,679 --> 00:34:00,720
hosted service

00:33:58,640 --> 00:34:02,399
i would hate that right taking

00:34:00,720 --> 00:34:05,200
responsibility for people's

00:34:02,399 --> 00:34:06,720
super private personal data is a

00:34:05,200 --> 00:34:07,760
terrible risk and it's also a terrible

00:34:06,720 --> 00:34:09,200
business model you're not going to make

00:34:07,760 --> 00:34:10,240
a great deal of money out of people

00:34:09,200 --> 00:34:12,079
doing that for them

00:34:10,240 --> 00:34:13,760
so i think the best option to this stuff

00:34:12,079 --> 00:34:14,879
are applications that people run on

00:34:13,760 --> 00:34:17,919
their own devices

00:34:14,879 --> 00:34:19,599
um imagine a desktop application or even

00:34:17,919 --> 00:34:20,240
better a mobile application that people

00:34:19,599 --> 00:34:22,720
could run

00:34:20,240 --> 00:34:24,079
which could ingest their data and give

00:34:22,720 --> 00:34:26,320
them the ability to

00:34:24,079 --> 00:34:27,359
explore it in in this way and so i've

00:34:26,320 --> 00:34:29,679
been looking at how

00:34:27,359 --> 00:34:31,040
dataset itself could run on mobile

00:34:29,679 --> 00:34:32,800
devices

00:34:31,040 --> 00:34:34,639
make with an interface that lets you

00:34:32,800 --> 00:34:37,280
into integrate with different um

00:34:34,639 --> 00:34:38,800
different data sources i think it's it's

00:34:37,280 --> 00:34:39,919
a lot again it's a lot of work i'm

00:34:38,800 --> 00:34:41,760
hoping i

00:34:39,919 --> 00:34:43,359
it's it's not top of my priority list

00:34:41,760 --> 00:34:44,399
right now so i'm hoping i can inspire

00:34:43,359 --> 00:34:45,760
other people to

00:34:44,399 --> 00:34:47,599
to start thinking about how to solve

00:34:45,760 --> 00:34:48,639
these problems but i do think there's

00:34:47,599 --> 00:34:51,359
something

00:34:48,639 --> 00:34:52,240
very very powerful about giving people

00:34:51,359 --> 00:34:54,960
this sort of

00:34:52,240 --> 00:34:56,480
super flexible and control and access to

00:34:54,960 --> 00:35:00,480
the data that exists

00:34:56,480 --> 00:35:01,839
about them about them around the world

00:35:00,480 --> 00:35:03,440
my call to action please try this

00:35:01,839 --> 00:35:04,640
yourself uh everything i've shown you

00:35:03,440 --> 00:35:06,960
today is open source

00:35:04,640 --> 00:35:07,920
if you go to dataset.io that's details

00:35:06,960 --> 00:35:11,839
about dataset

00:35:07,920 --> 00:35:14,640
i have um github.com dog sheep is the

00:35:11,839 --> 00:35:16,400
organization that um sits on top of all

00:35:14,640 --> 00:35:16,800
of the dog sheep tools these are things

00:35:16,400 --> 00:35:18,560
like

00:35:16,800 --> 00:35:20,880
github to sqlite and health kit to

00:35:18,560 --> 00:35:22,720
sqlite and swarm to sql knight you may

00:35:20,880 --> 00:35:24,880
notice a naming convention here

00:35:22,720 --> 00:35:26,400
these are tools that um turn that data

00:35:24,880 --> 00:35:27,680
into sqlite so that you can use it in

00:35:26,400 --> 00:35:28,960
that way

00:35:27,680 --> 00:35:30,880
and if you check out my blog

00:35:28,960 --> 00:35:33,760
simonwilson.net or follow me on twitter

00:35:30,880 --> 00:35:35,280
i'm this is something i i talk about a

00:35:33,760 --> 00:35:38,079
lot there as well

00:35:35,280 --> 00:35:38,880
um so i'm going to switch over to the

00:35:38,079 --> 00:35:42,079
google doc

00:35:38,880 --> 00:35:46,720
and see if we have questions i should

00:35:42,079 --> 00:35:51,520
answer um oh what happened there hang on

00:35:46,720 --> 00:35:51,520
bitly.com octosimw

00:35:54,720 --> 00:35:58,000
okay i'll skip the first two because i

00:35:57,040 --> 00:36:00,480
see it with those just

00:35:58,000 --> 00:36:01,920
in case um ah will there be a data set

00:36:00,480 --> 00:36:05,280
hosted service i can pay for

00:36:01,920 --> 00:36:07,839
yes there will but it's not for

00:36:05,280 --> 00:36:09,119
um i'm not i'm not creating it for

00:36:07,839 --> 00:36:10,800
personal use

00:36:09,119 --> 00:36:12,320
i mean you could use it personally but

00:36:10,800 --> 00:36:13,280
the idea that i have around the hosted

00:36:12,320 --> 00:36:14,720
services i want

00:36:13,280 --> 00:36:17,040
um i want to help journalists and

00:36:14,720 --> 00:36:18,720
newsrooms and people who need

00:36:17,040 --> 00:36:20,560
essentially a version of dog sheet but

00:36:18,720 --> 00:36:21,920
for their organization for their company

00:36:20,560 --> 00:36:23,839
um so i've been building out a

00:36:21,920 --> 00:36:26,000
cloud-hosted version of dataset

00:36:23,839 --> 00:36:26,960
partly because i put so much work into

00:36:26,000 --> 00:36:28,240
building these things

00:36:26,960 --> 00:36:30,240
and then i showed them to journalists

00:36:28,240 --> 00:36:31,280
and they're like so i have to install

00:36:30,240 --> 00:36:33,520
this where

00:36:31,280 --> 00:36:35,520
and you know the um i feel like i'm not

00:36:33,520 --> 00:36:36,240
able to unlock the value of the software

00:36:35,520 --> 00:36:37,520
i've built

00:36:36,240 --> 00:36:39,440
if i have to talk people through

00:36:37,520 --> 00:36:40,960
installing python 3 and getting an

00:36:39,440 --> 00:36:42,240
environment set up and running a server

00:36:40,960 --> 00:36:44,880
and all of that kind of junk

00:36:42,240 --> 00:36:45,599
so i am building a sort of aimed

00:36:44,880 --> 00:36:47,520
company's

00:36:45,599 --> 00:36:49,280
hosted version of data set uh at the

00:36:47,520 --> 00:36:50,480
moment

00:36:49,280 --> 00:36:52,240
how do you sync your data from your

00:36:50,480 --> 00:36:53,359
phone and watch to the data warehouse it

00:36:52,240 --> 00:36:56,000
is a manual process

00:36:53,359 --> 00:36:57,119
um you know what i can actually do a

00:36:56,000 --> 00:36:59,680
very quick demo

00:36:57,119 --> 00:37:00,320
to show you how that works um i found

00:36:59,680 --> 00:37:03,119
out recently

00:37:00,320 --> 00:37:04,640
you can run quicktime and you can tell

00:37:03,119 --> 00:37:08,320
quicktime that you want to do

00:37:04,640 --> 00:37:12,880
a new recording oh

00:37:08,320 --> 00:37:14,800
except aha there we go

00:37:12,880 --> 00:37:16,320
so you can now see you can you can use

00:37:14,800 --> 00:37:19,119
quicktime to mirror your iphone

00:37:16,320 --> 00:37:20,880
to your desktop so i'm going to open up

00:37:19,119 --> 00:37:23,040
the apple health app

00:37:20,880 --> 00:37:24,880
and then in the health app there is a

00:37:23,040 --> 00:37:27,839
export all health data button

00:37:24,880 --> 00:37:29,040
you click that and it churns away for

00:37:27,839 --> 00:37:31,040
about five minutes

00:37:29,040 --> 00:37:32,720
um but then it gives you a literal zip

00:37:31,040 --> 00:37:33,599
file that you can airdrop onto your

00:37:32,720 --> 00:37:35,440
computer

00:37:33,599 --> 00:37:37,280
so i do that i airdrop onto my computer

00:37:35,440 --> 00:37:39,440
and then i run my health kit to sqlites

00:37:37,280 --> 00:37:41,119
quick there most of the sources and data

00:37:39,440 --> 00:37:42,880
in dog sheep thankfully are automated

00:37:41,119 --> 00:37:43,520
they have apis that i can hit from a

00:37:42,880 --> 00:37:45,520
cron job

00:37:43,520 --> 00:37:47,359
the health kit data is the one that is

00:37:45,520 --> 00:37:48,160
is the best example of data that i can't

00:37:47,359 --> 00:37:50,320
do that with

00:37:48,160 --> 00:37:51,920
i have to about once a month i'll run

00:37:50,320 --> 00:37:54,960
the export i'll run the script and then

00:37:51,920 --> 00:37:57,200
i ssh up the database

00:37:54,960 --> 00:37:59,119
um when accessing github twitter do you

00:37:57,200 --> 00:38:02,800
want quiz against the api

00:37:59,119 --> 00:38:05,440
um yeah uh right so one of the

00:38:02,800 --> 00:38:07,040
core philosophies i have around this is

00:38:05,440 --> 00:38:08,480
i just want all of the data

00:38:07,040 --> 00:38:10,160
right because if you you can give me an

00:38:08,480 --> 00:38:11,839
api with like search

00:38:10,160 --> 00:38:13,760
filters and all kinds of different

00:38:11,839 --> 00:38:15,599
things and i'll still think of something

00:38:13,760 --> 00:38:18,240
that i can't do with your api

00:38:15,599 --> 00:38:19,760
what i'll do instead is i will try and

00:38:18,240 --> 00:38:20,960
find an endpoint that i can paginate

00:38:19,760 --> 00:38:23,200
through to get everything

00:38:20,960 --> 00:38:25,359
i'll pull down all of the data stick in

00:38:23,200 --> 00:38:26,400
a local sqlite database and run queries

00:38:25,359 --> 00:38:28,960
against it that way

00:38:26,400 --> 00:38:29,680
so my biggest ask of anyone who has an

00:38:28,960 --> 00:38:31,839
api

00:38:29,680 --> 00:38:33,440
is give me a endpoint that gives me

00:38:31,839 --> 00:38:34,960
everything and then give me an end point

00:38:33,440 --> 00:38:35,680
that gives me everything that's changed

00:38:34,960 --> 00:38:39,839
in the last

00:38:35,680 --> 00:38:41,839
say two hours um so things like swarm

00:38:39,839 --> 00:38:43,359
i run it i actually um you know i can

00:38:41,839 --> 00:38:45,119
show you the swarm thing

00:38:43,359 --> 00:38:47,599
um so i have command called swarm to

00:38:45,119 --> 00:38:51,119
sqlite and i can say

00:38:47,599 --> 00:38:52,880
swarm.db and i can say since equals 2w

00:38:51,119 --> 00:38:55,280
and this will then fetch all of my

00:38:52,880 --> 00:38:58,839
check-ins for the past two weeks

00:38:55,280 --> 00:39:00,800
oh that's interesting i wonder why that

00:38:58,839 --> 00:39:03,200
happened

00:39:00,800 --> 00:39:05,920
all right the problems with live demos

00:39:03,200 --> 00:39:09,760
something has broken about this

00:39:05,920 --> 00:39:09,760
or maybe it hasn't um

00:39:12,000 --> 00:39:17,200
so i have got that there we go so i've

00:39:15,200 --> 00:39:18,160
got my swarm database and if i open that

00:39:17,200 --> 00:39:20,560
up in dataset

00:39:18,160 --> 00:39:21,280
i'm now looking at just two weeks worth

00:39:20,560 --> 00:39:24,400
of check-ins

00:39:21,280 --> 00:39:25,760
um but yeah so a lot of the endpoints

00:39:24,400 --> 00:39:26,800
that the endpoints i like are the ones

00:39:25,760 --> 00:39:28,320
where you can say give me everything

00:39:26,800 --> 00:39:29,599
that's changed recently because then you

00:39:28,320 --> 00:39:33,040
can hit them from a cron job

00:39:29,599 --> 00:39:34,960
um as often as you want to uh have you

00:39:33,040 --> 00:39:37,040
explored doing this as a single page app

00:39:34,960 --> 00:39:38,000
um so it's possible displays a static

00:39:37,040 --> 00:39:41,520
site

00:39:38,000 --> 00:39:42,560
well um i'm a proper old-fashioned

00:39:41,520 --> 00:39:45,920
service

00:39:42,560 --> 00:39:49,359
um server-side engineer so i i think you

00:39:45,920 --> 00:39:51,839
what you you could potentially do this

00:39:49,359 --> 00:39:53,760
as a static app by getting all that data

00:39:51,839 --> 00:39:56,400
into a sqlite database and then there's

00:39:53,760 --> 00:39:59,520
a thing called sql.js which is

00:39:56,400 --> 00:40:02,240
sqlite itself compiled

00:39:59,520 --> 00:40:03,119
into javascript using um webassembly and

00:40:02,240 --> 00:40:05,119
such like

00:40:03,119 --> 00:40:07,760
and there's actually um there's an

00:40:05,119 --> 00:40:11,119
observable notebook

00:40:07,760 --> 00:40:13,680
that does exactly that um

00:40:11,119 --> 00:40:16,000
so this right here is an example of an

00:40:13,680 --> 00:40:16,880
observable notebook that in javascript

00:40:16,000 --> 00:40:20,319
is pulling in

00:40:16,880 --> 00:40:21,760
a sqlite database and then querying it

00:40:20,319 --> 00:40:23,200
from sql

00:40:21,760 --> 00:40:24,560
so you can do that kind of thing you'd

00:40:23,200 --> 00:40:26,079
have to rebuild all the data set because

00:40:24,560 --> 00:40:28,160
dataset is a

00:40:26,079 --> 00:40:29,280
design as a server-side application the

00:40:28,160 --> 00:40:32,560
other thing that's good

00:40:29,280 --> 00:40:34,560
is um i wonder if i've got sftrees.com

00:40:32,560 --> 00:40:38,160
working

00:40:34,560 --> 00:40:39,839
um maybe it's sf python and because

00:40:38,160 --> 00:40:42,000
everything that dataset does is exposes

00:40:39,839 --> 00:40:44,400
a json api you can build

00:40:42,000 --> 00:40:45,280
javascript applications that query that

00:40:44,400 --> 00:40:47,359
api

00:40:45,280 --> 00:40:49,040
and this is an example i built which is

00:40:47,359 --> 00:40:51,839
a search engine for trees

00:40:49,040 --> 00:40:53,520
in san francisco and this is a it's a

00:40:51,839 --> 00:40:55,119
single-page javascript app

00:40:53,520 --> 00:40:58,000
if you watch what it's actually doing

00:40:55,119 --> 00:41:00,960
let's search for each tree or palm

00:40:58,000 --> 00:41:02,160
trees what it's doing is it's doing a

00:41:00,960 --> 00:41:04,880
json request

00:41:02,160 --> 00:41:05,440
to a data set instance and running a sql

00:41:04,880 --> 00:41:09,440
query

00:41:05,440 --> 00:41:11,359
so literally um somewhere in here

00:41:09,440 --> 00:41:12,640
here we go there is a sql query embedded

00:41:11,359 --> 00:41:15,920
in the javascript

00:41:12,640 --> 00:41:17,119
dataset supports course headers so this

00:41:15,920 --> 00:41:19,440
little this little javascript

00:41:17,119 --> 00:41:20,240
application right here is static html

00:41:19,440 --> 00:41:22,880
and javascript

00:41:20,240 --> 00:41:24,240
that's pulling from a dataset api and i

00:41:22,880 --> 00:41:27,839
recently um well

00:41:24,240 --> 00:41:28,720
this year i built a um a dataset plugin

00:41:27,839 --> 00:41:31,040
that lets you do

00:41:28,720 --> 00:41:32,960
a graphql queries as well so if you go

00:41:31,040 --> 00:41:36,160
and look at this demo here

00:41:32,960 --> 00:41:37,520
there is a graphql api to in this case

00:41:36,160 --> 00:41:39,040
all of my um

00:41:37,520 --> 00:41:40,640
my the github data that i've pulled in

00:41:39,040 --> 00:41:43,040
so if you like using graphql

00:41:40,640 --> 00:41:44,000
dataset can act as a graphql backend for

00:41:43,040 --> 00:41:47,680
your um

00:41:44,000 --> 00:41:49,040
your apps apps as well um do i have any

00:41:47,680 --> 00:41:50,000
crown job examples of the scrapers that

00:41:49,040 --> 00:41:53,440
i can share

00:41:50,000 --> 00:41:56,640
yes what i will do is

00:41:53,440 --> 00:41:59,280
um so

00:41:56,640 --> 00:42:01,040
um quadruple samsung scrapers i will

00:41:59,280 --> 00:42:02,000
share those in that document later on

00:42:01,040 --> 00:42:04,880
i'll copy and paste

00:42:02,000 --> 00:42:06,319
them over from my private repository um

00:42:04,880 --> 00:42:07,839
and then what possibilities the data

00:42:06,319 --> 00:42:09,440
entry tools do the writable can

00:42:07,839 --> 00:42:11,200
queries open up that's a very

00:42:09,440 --> 00:42:13,359
interesting question um

00:42:11,200 --> 00:42:14,480
so writeable canned queries are a

00:42:13,359 --> 00:42:17,599
feature that i added

00:42:14,480 --> 00:42:21,359
in data set

00:42:17,599 --> 00:42:24,880
um 0.4

00:42:21,359 --> 00:42:28,160
0.48 maybe about six months ago

00:42:24,880 --> 00:42:29,839
and this was um basically um

00:42:28,160 --> 00:42:31,040
this is part of moving data set from

00:42:29,839 --> 00:42:32,720
this thing that just works with

00:42:31,040 --> 00:42:35,440
read-only data to a thing that can

00:42:32,720 --> 00:42:36,960
that can write to sqlite databases too

00:42:35,440 --> 00:42:39,520
so you can

00:42:36,960 --> 00:42:40,720
create a essentially you can configure

00:42:39,520 --> 00:42:44,560
dataset and say

00:42:40,720 --> 00:42:47,680
i want a an update query an insert query

00:42:44,560 --> 00:42:48,240
um which which sits on a page and people

00:42:47,680 --> 00:42:51,359
can then

00:42:48,240 --> 00:42:52,880
um use that to execute controlled writes

00:42:51,359 --> 00:42:53,359
against the database right we don't want

00:42:52,880 --> 00:42:55,440
people

00:42:53,359 --> 00:42:56,880
executing any sql that they like but if

00:42:55,440 --> 00:42:58,960
you sort of um

00:42:56,880 --> 00:42:59,920
allow list sql queries that that you

00:42:58,960 --> 00:43:02,720
know are safe

00:42:59,920 --> 00:43:03,280
then you can build them that way um i've

00:43:02,720 --> 00:43:05,200
not

00:43:03,280 --> 00:43:07,359
really explored those as much as i want

00:43:05,200 --> 00:43:10,640
to yet one of the ideas there is

00:43:07,359 --> 00:43:12,480
to make it super easy for people to

00:43:10,640 --> 00:43:14,560
essentially create forms right create

00:43:12,480 --> 00:43:17,599
forms that submit data into

00:43:14,560 --> 00:43:19,920
a um into a database

00:43:17,599 --> 00:43:20,880
i think it's it's still very early days

00:43:19,920 --> 00:43:23,359
with that feature though

00:43:20,880 --> 00:43:25,520
so i'm keen on exploring that for things

00:43:23,359 --> 00:43:28,560
like building crowdsourcing applications

00:43:25,520 --> 00:43:30,000
accepting feedback from people um like

00:43:28,560 --> 00:43:31,440
blog comments there's lots of things

00:43:30,000 --> 00:43:33,359
like that that you could build

00:43:31,440 --> 00:43:35,760
but it's not really been an emphasis of

00:43:33,359 --> 00:43:38,720
the projects i've been working on

00:43:35,760 --> 00:43:40,240
um okay for the local version we had one

00:43:38,720 --> 00:43:41,359
line push to deploy how do you handle

00:43:40,240 --> 00:43:44,720
updates

00:43:41,359 --> 00:43:45,760
that is your so that was um when i ran

00:43:44,720 --> 00:43:47,599
data set publish

00:43:45,760 --> 00:43:49,280
yep um with all of these hosting

00:43:47,599 --> 00:43:51,359
providers you literally

00:43:49,280 --> 00:43:52,400
just publish it you deploy a new version

00:43:51,359 --> 00:43:55,680
um like

00:43:52,400 --> 00:43:56,079
the cell was designed to allow people

00:43:55,680 --> 00:43:57,440
they

00:43:56,079 --> 00:43:59,200
they actually had to cut down the number

00:43:57,440 --> 00:44:00,960
of deploys people do they now only allow

00:43:59,200 --> 00:44:02,560
i think 160 deploys a month

00:44:00,960 --> 00:44:04,240
because people like me would be using it

00:44:02,560 --> 00:44:05,760
like crazy um

00:44:04,240 --> 00:44:07,440
but yeah if you've got a data source

00:44:05,760 --> 00:44:09,440
which only changes once a day

00:44:07,440 --> 00:44:10,720
that's only 24 deploys a month you know

00:44:09,440 --> 00:44:13,280
it's not a big deal

00:44:10,720 --> 00:44:14,319
um so i have because some of my projects

00:44:13,280 --> 00:44:16,319
like the pge

00:44:14,319 --> 00:44:18,160
outages stuff because that's a database

00:44:16,319 --> 00:44:18,960
that changes every few minutes i tend to

00:44:18,160 --> 00:44:20,640
run those

00:44:18,960 --> 00:44:22,720
on traditional hosting providers with

00:44:20,640 --> 00:44:23,280
cron jobs that write to a database on

00:44:22,720 --> 00:44:24,960
disk

00:44:23,280 --> 00:44:26,720
but yeah if you've got data that changes

00:44:24,960 --> 00:44:28,480
less often than that i think there's no

00:44:26,720 --> 00:44:29,359
harm at all in just deploying a brand

00:44:28,480 --> 00:44:30,640
new version

00:44:29,359 --> 00:44:32,560
every time you have an update to the

00:44:30,640 --> 00:44:36,960
data

00:44:32,560 --> 00:44:38,560
okay um i think i've

00:44:36,960 --> 00:44:40,000
answered all of the questions in the

00:44:38,560 --> 00:44:43,119
document i'm going to

00:44:40,000 --> 00:44:45,440
um pair up with with with it and to

00:44:43,119 --> 00:44:48,160
finish off

00:44:45,440 --> 00:44:49,280
thank you simon that was a fantastic a

00:44:48,160 --> 00:44:52,560
really great tour

00:44:49,280 --> 00:44:54,720
of dataset and where dataset can

00:44:52,560 --> 00:44:56,160
go and uh the kind of impact it can have

00:44:54,720 --> 00:44:58,800
and i

00:44:56,160 --> 00:45:00,480
am going to abuse my my privilege and

00:44:58,800 --> 00:45:03,680
ask one final question

00:45:00,480 --> 00:45:04,000
um right now this is clearly at a stage

00:45:03,680 --> 00:45:06,640
that

00:45:04,000 --> 00:45:07,359
demonstrates uh the the possibility sort

00:45:06,640 --> 00:45:10,240
of the power

00:45:07,359 --> 00:45:10,640
of of the approach that dataset espouses

00:45:10,240 --> 00:45:12,480
of

00:45:10,640 --> 00:45:14,079
pulling and data having a static data

00:45:12,480 --> 00:45:15,520
set and then exposing an interface for

00:45:14,079 --> 00:45:17,440
working with that data

00:45:15,520 --> 00:45:18,720
and looking at this i can see a future

00:45:17,440 --> 00:45:22,800
where i

00:45:18,720 --> 00:45:24,079
reclaim control over the 49 silos of my

00:45:22,800 --> 00:45:26,400
personal data

00:45:24,079 --> 00:45:27,599
um what does that future look like you

00:45:26,400 --> 00:45:30,400
know if i

00:45:27,599 --> 00:45:32,000
if i wave a magic wand and say okay now

00:45:30,400 --> 00:45:35,359
it's easy enough for the

00:45:32,000 --> 00:45:38,160
uh quote-unquote uh non-super nerds to

00:45:35,359 --> 00:45:39,520
to do this sort of thing um what do you

00:45:38,160 --> 00:45:41,680
think that future looks like when it

00:45:39,520 --> 00:45:43,680
comes to sort of our personal data

00:45:41,680 --> 00:45:44,960
um whether or not it's the data set or

00:45:43,680 --> 00:45:47,520
through other tools where are we going

00:45:44,960 --> 00:45:50,480
with this

00:45:47,520 --> 00:45:51,040
so i think my my personal like my dream

00:45:50,480 --> 00:45:53,839
state

00:45:51,040 --> 00:45:54,960
is anyone can install the dog sheep app

00:45:53,839 --> 00:45:57,200
on their phone

00:45:54,960 --> 00:45:58,480
they can like click some buttons in it

00:45:57,200 --> 00:46:00,160
to authenticate against different

00:45:58,480 --> 00:46:00,640
providers start getting that data coming

00:46:00,160 --> 00:46:03,280
in

00:46:00,640 --> 00:46:04,000
and then they can also like occasionally

00:46:03,280 --> 00:46:06,640
like do

00:46:04,000 --> 00:46:08,079
well you know ideally that that would

00:46:06,640 --> 00:46:10,400
that that would give them

00:46:08,079 --> 00:46:11,760
and to be honest like apple health kit

00:46:10,400 --> 00:46:13,839
is sort of hinting in this direction

00:46:11,760 --> 00:46:14,560
apple healthcare integrates with your

00:46:13,839 --> 00:46:16,240
doctor's

00:46:14,560 --> 00:46:18,240
like online database for your health

00:46:16,240 --> 00:46:19,520
data but why can't this exist for

00:46:18,240 --> 00:46:21,440
why can't this exist for all of your

00:46:19,520 --> 00:46:22,480
other data as well the apis are there

00:46:21,440 --> 00:46:24,400
the exports are there

00:46:22,480 --> 00:46:25,680
the legal framework is there thanks to

00:46:24,400 --> 00:46:27,599
things like the gdpr

00:46:25,680 --> 00:46:29,359
what's missing is the software that is

00:46:27,599 --> 00:46:30,880
easy enough for regular people to use

00:46:29,359 --> 00:46:32,720
that they can start pulling that stuff

00:46:30,880 --> 00:46:35,119
in i'm also i'm i

00:46:32,720 --> 00:46:36,160
i'd love to get to a point with say with

00:46:35,119 --> 00:46:37,920
dog sheep where

00:46:36,160 --> 00:46:39,440
other people are using it to the point

00:46:37,920 --> 00:46:41,280
that they're building extra

00:46:39,440 --> 00:46:42,480
extra sort of plugins and features for

00:46:41,280 --> 00:46:44,400
it like imagine if

00:46:42,480 --> 00:46:47,040
i found the cool sql query that figured

00:46:44,400 --> 00:46:48,480
out my heart rate over time

00:46:47,040 --> 00:46:50,480
compared to what i'd been reading on

00:46:48,480 --> 00:46:52,480
twitter and if i could bundle that at

00:46:50,480 --> 00:46:53,839
the sql query and send it to you and you

00:46:52,480 --> 00:46:55,280
could run that query against your

00:46:53,839 --> 00:46:57,040
personal data as well

00:46:55,280 --> 00:46:58,720
i think i hinted that with the um the

00:46:57,040 --> 00:46:59,040
thing that tells me what color my eyes

00:46:58,720 --> 00:47:01,280
are

00:46:59,040 --> 00:47:02,560
by running against my genome i love the

00:47:01,280 --> 00:47:05,200
idea of this sort of home

00:47:02,560 --> 00:47:06,160
spun here are queries that you can run

00:47:05,200 --> 00:47:07,760
which will tell you something

00:47:06,160 --> 00:47:09,920
interesting but i don't need access to

00:47:07,760 --> 00:47:10,960
your database i'm just sharing the the

00:47:09,920 --> 00:47:12,800
queries and the

00:47:10,960 --> 00:47:14,800
sort of visualization tools and maybe

00:47:12,800 --> 00:47:15,760
little javascript visualization plug-ins

00:47:14,800 --> 00:47:17,440
and so forth

00:47:15,760 --> 00:47:19,119
so i think there's it feels to me like

00:47:17,440 --> 00:47:22,319
this could be a massively

00:47:19,119 --> 00:47:24,960
exciting open source ecosystem of

00:47:22,319 --> 00:47:26,640
homebrew personal analytics like you can

00:47:24,960 --> 00:47:28,559
find the simplest possible way for

00:47:26,640 --> 00:47:29,920
people to muck around find something

00:47:28,559 --> 00:47:30,640
interesting and then share it with other

00:47:29,920 --> 00:47:32,160
people

00:47:30,640 --> 00:47:33,680
maybe that comes down to like a sort of

00:47:32,160 --> 00:47:35,920
plug-in marketplace

00:47:33,680 --> 00:47:37,599
or i don't know quite what shape that

00:47:35,920 --> 00:47:39,200
could take but it feels like

00:47:37,599 --> 00:47:42,400
something that's very that really fits

00:47:39,200 --> 00:47:44,960
in with the ethos of open source

00:47:42,400 --> 00:47:47,040
yeah uh you know if we if we think about

00:47:44,960 --> 00:47:49,119
all of these piles of data

00:47:47,040 --> 00:47:50,880
um what you're talking about is is not

00:47:49,119 --> 00:47:51,760
just a sharing of like oh here's a

00:47:50,880 --> 00:47:54,319
plug-in it's

00:47:51,760 --> 00:47:56,160
here's a means i've figured out how to

00:47:54,319 --> 00:47:56,880
extract some meaning from this data for

00:47:56,160 --> 00:47:59,040
myself

00:47:56,880 --> 00:48:00,720
and i'd like to share that that that

00:47:59,040 --> 00:48:04,079
meaning tool with you

00:48:00,720 --> 00:48:06,800
um and so it's a marketplace of meaning

00:48:04,079 --> 00:48:07,680
which is obviously one one layer of the

00:48:06,800 --> 00:48:09,200
raw data

00:48:07,680 --> 00:48:11,599
which is what we all struggle to sort of

00:48:09,200 --> 00:48:14,000
get at so fascinating

00:48:11,599 --> 00:48:14,880
um simon thank you so much for for

00:48:14,000 --> 00:48:16,000
coming and sharing

00:48:14,880 --> 00:48:18,160
sharing your work with us and sharing

00:48:16,000 --> 00:48:19,680
your time with us um and

00:48:18,160 --> 00:48:21,119
uh hopefully we can have you back at

00:48:19,680 --> 00:48:22,240
some point to tell us about new and

00:48:21,119 --> 00:48:24,240
exciting developments

00:48:22,240 --> 00:48:26,000
in the space awesome thanks a lot and

00:48:24,240 --> 00:48:27,760
i'll um i'll update our google doc with

00:48:26,000 --> 00:48:29,200
a whole bunch of extra stuff so

00:48:27,760 --> 00:48:32,480
if you people keep an eye on the google

00:48:29,200 --> 00:48:35,280
doc it'll turn into a handout later on

00:48:32,480 --> 00:48:49,839
okay fantastic thank you thanks for

00:48:35,280 --> 00:48:49,839

YouTube URL: https://www.youtube.com/watch?v=l1EFThsAFgs


