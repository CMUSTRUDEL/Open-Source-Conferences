Title: OCTO Speaker Series #6   Fred K  Schott
Publication date: 2021-01-22
Playlist: OCTO Speaker Series
Description: 
	JavaScript: The Next Ten Years

What's next for JavaScript, web development, and the internet as a whole? Explore the global trends and specific technologies that will come to define the best tech stacks of this decade.

About Fred K. Schott
Fred K. Schott is the founder of Skypack, a next-gen CDN for JavaScript and modern web development. Fred also created Snowpack, a modern build tool for web developers that leverages new JavaScript features to speed up traditional development workflows by 10x or more. Fred lives with his wife in Oakland, CA. He has spent the last 8 years working in JavaScript and Open Source Software at companies like Box, Google, and Ripple.

Twitter: @FREDKSCHOTT
GitHub: FREDKSCHOTT

Web: https://fredkschott.com/
Captions: 
	00:00:06,860 --> 00:00:12,550
[Music]

00:00:12,960 --> 00:00:15,759
hi

00:00:13,360 --> 00:00:17,359
everyone uh i'm edan and i work in

00:00:15,759 --> 00:00:19,840
github's office of the cto

00:00:17,359 --> 00:00:22,640
and my team's mission is to explore the

00:00:19,840 --> 00:00:25,760
future of developer experiences

00:00:22,640 --> 00:00:27,359
and when we reflect on the trajectory of

00:00:25,760 --> 00:00:29,279
development particularly

00:00:27,359 --> 00:00:31,199
front-end development targeting the web

00:00:29,279 --> 00:00:34,480
the first thing that comes to

00:00:31,199 --> 00:00:37,680
my mind is javascript fatigue right

00:00:34,480 --> 00:00:39,280
in 2016 uh there was a year of

00:00:37,680 --> 00:00:42,000
excitement for the renaissance

00:00:39,280 --> 00:00:43,399
of javascript es6 had just been

00:00:42,000 --> 00:00:46,640
formalized as

00:00:43,399 --> 00:00:48,399
es2015 and there was a healthy dose of

00:00:46,640 --> 00:00:51,440
language improvements working its way

00:00:48,399 --> 00:00:54,000
through the tc39 process

00:00:51,440 --> 00:00:55,920
so we had a bright future ahead of us

00:00:54,000 --> 00:00:59,039
from a language perspective

00:00:55,920 --> 00:01:01,199
and at the same time node.js and iojs

00:00:59,039 --> 00:01:03,039
had just buried the hatchet resolving

00:01:01,199 --> 00:01:04,799
some big unknowns about the future of

00:01:03,039 --> 00:01:08,080
javascript on the server

00:01:04,799 --> 00:01:09,680
uh yarn and npm were competing on

00:01:08,080 --> 00:01:11,600
performance and features

00:01:09,680 --> 00:01:13,200
and all of us were the winners in that

00:01:11,600 --> 00:01:15,520
competition

00:01:13,200 --> 00:01:16,479
and we had an explosion of of frameworks

00:01:15,520 --> 00:01:18,799
and tooling

00:01:16,479 --> 00:01:21,040
to let us skip the weight and reach into

00:01:18,799 --> 00:01:24,000
the future and use all these goodies

00:01:21,040 --> 00:01:26,000
right away we papered over run time

00:01:24,000 --> 00:01:28,720
differences and deficiencies

00:01:26,000 --> 00:01:31,040
with layers of tooling we figured out

00:01:28,720 --> 00:01:31,759
how to hot swap code at run time with

00:01:31,040 --> 00:01:33,520
tooling

00:01:31,759 --> 00:01:35,360
we figured out how to bundle code

00:01:33,520 --> 00:01:38,720
together for production

00:01:35,360 --> 00:01:40,880
with tooling so in 2016

00:01:38,720 --> 00:01:42,880
there was a moment where we all looked

00:01:40,880 --> 00:01:45,280
in the mirror and asked ourselves

00:01:42,880 --> 00:01:47,200
is is this glut of tooling is all of

00:01:45,280 --> 00:01:49,520
this tooling is it is it good

00:01:47,200 --> 00:01:50,240
because all of that tooling came with a

00:01:49,520 --> 00:01:52,000
cost

00:01:50,240 --> 00:01:53,520
you had to configure it and you had to

00:01:52,000 --> 00:01:56,240
patch it you had to work

00:01:53,520 --> 00:01:56,960
out the tricky interactions between the

00:01:56,240 --> 00:01:59,360
tools

00:01:56,960 --> 00:02:00,320
this tooling promised magic but we spent

00:01:59,360 --> 00:02:02,880
hours

00:02:00,320 --> 00:02:03,520
fighting brittleness being a front-end

00:02:02,880 --> 00:02:05,840
developer

00:02:03,520 --> 00:02:07,680
became as much about wrangling the

00:02:05,840 --> 00:02:10,560
tooling as it was about

00:02:07,680 --> 00:02:12,560
the writing of the software and we did

00:02:10,560 --> 00:02:14,319
more tooling proliferated but ultimately

00:02:12,560 --> 00:02:16,720
most people coalesced around

00:02:14,319 --> 00:02:18,239
a handful of stacks but in the

00:02:16,720 --> 00:02:20,000
intervening five or so years

00:02:18,239 --> 00:02:22,080
something interesting happened the

00:02:20,000 --> 00:02:23,920
underlying run times grew up

00:02:22,080 --> 00:02:25,520
all of the polyfills and wrappers that

00:02:23,920 --> 00:02:27,840
we needed to support

00:02:25,520 --> 00:02:31,280
old browsers became moot when those old

00:02:27,840 --> 00:02:33,599
browsers dropped off the usage charts

00:02:31,280 --> 00:02:36,480
it's at this moment that fred's work on

00:02:33,599 --> 00:02:37,920
pica and snowpack and later skypack are

00:02:36,480 --> 00:02:39,840
starting to look like the seeds of

00:02:37,920 --> 00:02:41,760
another javascript renaissance

00:02:39,840 --> 00:02:43,120
shedding the constraints of backwards

00:02:41,760 --> 00:02:45,040
compatibility

00:02:43,120 --> 00:02:47,360
is about more than just using the latest

00:02:45,040 --> 00:02:48,720
features or making production bundles

00:02:47,360 --> 00:02:50,879
smaller and faster

00:02:48,720 --> 00:02:52,160
they open up entirely new developer

00:02:50,879 --> 00:02:54,239
experiences and

00:02:52,160 --> 00:02:56,160
it's a fascinating moment to watch

00:02:54,239 --> 00:02:58,720
unfold

00:02:56,160 --> 00:03:00,480
fred's been on the front lines of this

00:02:58,720 --> 00:03:02,560
renaissance for the last few years and i

00:03:00,480 --> 00:03:05,519
can think of few people who have such a

00:03:02,560 --> 00:03:07,040
credible knowledgeable vantage point on

00:03:05,519 --> 00:03:08,959
where all this is going

00:03:07,040 --> 00:03:11,280
through his work on skypac he's been

00:03:08,959 --> 00:03:13,920
exploring futures where our dependencies

00:03:11,280 --> 00:03:14,640
aren't even on our computers no node

00:03:13,920 --> 00:03:18,400
modules

00:03:14,640 --> 00:03:22,080
with 50 000 files uh or stuff like that

00:03:18,400 --> 00:03:23,840
and how that model with no dependencies

00:03:22,080 --> 00:03:26,319
on your computer can improve

00:03:23,840 --> 00:03:27,599
the security posture of developers with

00:03:26,319 --> 00:03:29,599
snowpack he's created

00:03:27,599 --> 00:03:31,040
an environment for development that's so

00:03:29,599 --> 00:03:34,000
fast that it feels

00:03:31,040 --> 00:03:35,680
unreal if you haven't used it before and

00:03:34,000 --> 00:03:36,799
i don't need to sell anyone on the

00:03:35,680 --> 00:03:38,640
benefits of

00:03:36,799 --> 00:03:40,080
instant startup and magically fast

00:03:38,640 --> 00:03:43,680
updates and overall

00:03:40,080 --> 00:03:45,680
less tooling so uh it's with a ton of

00:03:43,680 --> 00:03:47,280
excitement that i welcome fred today to

00:03:45,680 --> 00:03:49,760
the octo speaker series

00:03:47,280 --> 00:03:51,680
because i can't think of something more

00:03:49,760 --> 00:03:54,480
directly on theme for us

00:03:51,680 --> 00:03:56,159
than a look at the next 10 years of

00:03:54,480 --> 00:04:00,000
javascript

00:03:56,159 --> 00:04:02,640
um one final note before i bring fred on

00:04:00,000 --> 00:04:04,480
we're taking questions at this github

00:04:02,640 --> 00:04:06,000
discussions thread the url is down here

00:04:04,480 --> 00:04:08,080
on the screen

00:04:06,000 --> 00:04:10,640
i'll also try to keep an eye out for

00:04:08,080 --> 00:04:12,799
questions in twitch chat

00:04:10,640 --> 00:04:14,480
and i'll ask that you please keep things

00:04:12,799 --> 00:04:16,720
positive and welcoming to everyone we've

00:04:14,480 --> 00:04:18,880
got a code of conduct in the repo

00:04:16,720 --> 00:04:20,239
that that discussions threat is on and

00:04:18,880 --> 00:04:23,360
it's really important to us

00:04:20,239 --> 00:04:28,320
uh that everyone abide by that and so

00:04:23,360 --> 00:04:30,320
uh without further ado uh welcome fred

00:04:28,320 --> 00:04:32,000
thank you so much for having me i'm uh

00:04:30,320 --> 00:04:34,160
really excited to be here and talking

00:04:32,000 --> 00:04:37,360
about this with everyone today

00:04:34,160 --> 00:04:38,880
um our pleasure take care as

00:04:37,360 --> 00:04:41,040
you mentioned this is a space that i

00:04:38,880 --> 00:04:42,720
think a lot about um

00:04:41,040 --> 00:04:44,240
and anything that's looking into the

00:04:42,720 --> 00:04:46,720
future is essentially

00:04:44,240 --> 00:04:48,400
fiction so this this talk is science

00:04:46,720 --> 00:04:49,919
fiction at the end of the day

00:04:48,400 --> 00:04:51,840
um but i want it to be good science

00:04:49,919 --> 00:04:54,560
fiction i want this to be like

00:04:51,840 --> 00:04:56,160
your favorite episode of black mirror um

00:04:54,560 --> 00:04:59,280
but not one of the ones where we all

00:04:56,160 --> 00:05:00,160
die or get killed by bees or robot dogs

00:04:59,280 --> 00:05:01,680
like

00:05:00,160 --> 00:05:04,080
hopefully this leaves you with a sense

00:05:01,680 --> 00:05:04,560
of hope for where the internet is headed

00:05:04,080 --> 00:05:07,440
like

00:05:04,560 --> 00:05:08,240
one of two happy black mirror episodes

00:05:07,440 --> 00:05:11,280
ever made

00:05:08,240 --> 00:05:12,560
ever but i don't

00:05:11,280 --> 00:05:15,440
write a lot of science fiction i don't

00:05:12,560 --> 00:05:18,160
write much fiction at all so

00:05:15,440 --> 00:05:18,639
doing this talk was a bit of a challenge

00:05:18,160 --> 00:05:20,400
so

00:05:18,639 --> 00:05:21,919
first thing i did was i consulted the

00:05:20,400 --> 00:05:24,639
experts and

00:05:21,919 --> 00:05:25,840
tried to figure out what makes a good

00:05:24,639 --> 00:05:29,520
science fiction

00:05:25,840 --> 00:05:31,600
story um the first thing i learned while

00:05:29,520 --> 00:05:33,600
googling around is that

00:05:31,600 --> 00:05:34,720
science fiction writers are constantly

00:05:33,600 --> 00:05:36,720
procrastinating

00:05:34,720 --> 00:05:37,680
so 90 of all advice that i saw was

00:05:36,720 --> 00:05:39,120
essentially you know stop

00:05:37,680 --> 00:05:39,840
procrastinating stop reading this

00:05:39,120 --> 00:05:41,919
article

00:05:39,840 --> 00:05:43,600
go write the damn thing and you know

00:05:41,919 --> 00:05:45,919
this is all nonsense

00:05:43,600 --> 00:05:46,800
um so that made me feel a little hopeful

00:05:45,919 --> 00:05:49,120
i'm a

00:05:46,800 --> 00:05:50,320
pretty consistent procrastinator so i

00:05:49,120 --> 00:05:51,600
felt like that was you know i was

00:05:50,320 --> 00:05:53,039
already kind of off on the right foot

00:05:51,600 --> 00:05:55,600
there

00:05:53,039 --> 00:05:56,720
um but looking past that i kept digging

00:05:55,600 --> 00:05:58,160
and i found this really interesting

00:05:56,720 --> 00:06:00,560
quote which i really liked

00:05:58,160 --> 00:06:03,440
um talking about what makes a good

00:06:00,560 --> 00:06:04,639
dystopian kind of thriller sci-fi and

00:06:03,440 --> 00:06:06,560
that its roots are really in the

00:06:04,639 --> 00:06:08,240
breakdown of self-policing

00:06:06,560 --> 00:06:09,919
in the same society people keep each

00:06:08,240 --> 00:06:11,600
other in check it's only when that

00:06:09,919 --> 00:06:12,080
breaks down that the government steps in

00:06:11,600 --> 00:06:14,479
with

00:06:12,080 --> 00:06:16,960
robot dogs and killer bees and brain

00:06:14,479 --> 00:06:20,400
implants replacing violent thoughts with

00:06:16,960 --> 00:06:22,960
compulsions to dance in this case

00:06:20,400 --> 00:06:24,800
um not really related to javascript but

00:06:22,960 --> 00:06:26,560
i couldn't help just you know as i read

00:06:24,800 --> 00:06:29,120
that think of you know every mean

00:06:26,560 --> 00:06:31,600
comment i've ever gotten on hacker news

00:06:29,120 --> 00:06:33,840
as not not just nonsense but the

00:06:31,600 --> 00:06:35,280
linchpin of society self-policing and

00:06:33,840 --> 00:06:38,400
gatekeeping actually

00:06:35,280 --> 00:06:40,080
keeping us from total destruction um i

00:06:38,400 --> 00:06:41,840
doubt that's the case but that

00:06:40,080 --> 00:06:43,440
that made me tickle to think of it that

00:06:41,840 --> 00:06:45,199
way

00:06:43,440 --> 00:06:46,720
the main advice that i found which i

00:06:45,199 --> 00:06:48,400
think is really relevant here

00:06:46,720 --> 00:06:50,639
is that good sci-fi is all about

00:06:48,400 --> 00:06:52,960
exploring one good idea

00:06:50,639 --> 00:06:54,720
very deeply so instead of throwing a

00:06:52,960 --> 00:06:55,840
hundred ideas at the wall and

00:06:54,720 --> 00:06:57,919
next thing you know you're on your

00:06:55,840 --> 00:07:00,560
spaceship to the moon base to talk to

00:06:57,919 --> 00:07:03,199
the queen of the sun

00:07:00,560 --> 00:07:04,880
it all gets very messy good sci-fi can

00:07:03,199 --> 00:07:07,599
just be one

00:07:04,880 --> 00:07:09,120
real idea but taken to the extreme

00:07:07,599 --> 00:07:11,039
pushed out into the future

00:07:09,120 --> 00:07:12,560
all the implications of that idea and

00:07:11,039 --> 00:07:14,160
that's the model that i wanted to follow

00:07:12,560 --> 00:07:16,720
for this talk

00:07:14,160 --> 00:07:17,520
um black mirror again is like they are

00:07:16,720 --> 00:07:19,199
the

00:07:17,520 --> 00:07:20,560
the experts at this you know they

00:07:19,199 --> 00:07:22,000
essentially had one of their best

00:07:20,560 --> 00:07:25,440
episodes was

00:07:22,000 --> 00:07:28,160
you know uber ratings but for everything

00:07:25,440 --> 00:07:30,720
and just an hour and a half of really

00:07:28,160 --> 00:07:32,400
compelling really scary television

00:07:30,720 --> 00:07:35,280
about what happens when everything you

00:07:32,400 --> 00:07:36,880
do is given a score and a ranking and

00:07:35,280 --> 00:07:38,960
you know that's all they had to do is

00:07:36,880 --> 00:07:41,520
one idea that exists today

00:07:38,960 --> 00:07:43,039
pushed out into the future that's the

00:07:41,520 --> 00:07:44,400
model i want to follow here so i want to

00:07:43,039 --> 00:07:47,039
look at the last

00:07:44,400 --> 00:07:48,319
decade of javascript and web development

00:07:47,039 --> 00:07:50,479
as a whole

00:07:48,319 --> 00:07:51,840
look for patterns and let's take one of

00:07:50,479 --> 00:07:52,639
those patterns and just push it out

00:07:51,840 --> 00:07:55,039
entirely

00:07:52,639 --> 00:07:55,919
push it out into the next decade and see

00:07:55,039 --> 00:07:58,080
what happens what

00:07:55,919 --> 00:07:59,039
what can we expect from web development

00:07:58,080 --> 00:08:01,199
what will

00:07:59,039 --> 00:08:02,479
our tooling stack look like in a world

00:08:01,199 --> 00:08:03,120
where things that are already happening

00:08:02,479 --> 00:08:06,639
today just

00:08:03,120 --> 00:08:09,199
kind of keep going those trends continue

00:08:06,639 --> 00:08:10,479
there are some limitations to this right

00:08:09,199 --> 00:08:11,840
alien attack

00:08:10,479 --> 00:08:13,520
aliens attack i am not going to be

00:08:11,840 --> 00:08:15,039
building websites i promise you

00:08:13,520 --> 00:08:16,639
whoever is building websites it will

00:08:15,039 --> 00:08:19,919
look very different

00:08:16,639 --> 00:08:21,280
um nuclear war i assume i won't be

00:08:19,919 --> 00:08:24,720
building websites either

00:08:21,280 --> 00:08:26,080
kind of hope i wouldn't um robot dogs

00:08:24,720 --> 00:08:29,039
and kill like

00:08:26,080 --> 00:08:30,639
huge technical innovations um create a

00:08:29,039 --> 00:08:31,919
little bit of a trickiness and that's

00:08:30,639 --> 00:08:33,039
right how can you predict something that

00:08:31,919 --> 00:08:36,719
is by definition

00:08:33,039 --> 00:08:37,120
groundbreaking um but i think it's it's

00:08:36,719 --> 00:08:39,360
actually

00:08:37,120 --> 00:08:40,560
a bit more accurate than you think um

00:08:39,360 --> 00:08:42,399
for example

00:08:40,560 --> 00:08:43,919
you know i couldn't in a million of

00:08:42,399 --> 00:08:46,640
years figured that

00:08:43,919 --> 00:08:48,560
a foldable phone was even possible but

00:08:46,640 --> 00:08:49,839
just because that exists today i don't

00:08:48,560 --> 00:08:51,600
know if that necessarily means it's

00:08:49,839 --> 00:08:53,200
groundbreaking um

00:08:51,600 --> 00:08:54,320
you know good for them for building it

00:08:53,200 --> 00:08:55,040
but i don't know if that's going to

00:08:54,320 --> 00:08:57,040
define

00:08:55,040 --> 00:08:59,120
a decade of development in the same way

00:08:57,040 --> 00:09:00,800
an iphone would so

00:08:59,120 --> 00:09:02,720
you know we have a we by sensing the

00:09:00,800 --> 00:09:04,560
trends you can kind of tell

00:09:02,720 --> 00:09:06,399
not just you know a groundbreaking

00:09:04,560 --> 00:09:08,080
technology is important but

00:09:06,399 --> 00:09:09,120
does it actually change the way we

00:09:08,080 --> 00:09:10,800
interact with the internet does it

00:09:09,120 --> 00:09:11,519
change behavior is it connected to a

00:09:10,800 --> 00:09:15,279
larger

00:09:11,519 --> 00:09:17,519
human story or is it just a gimmick

00:09:15,279 --> 00:09:18,560
there's actually a jeff bezos quote that

00:09:17,519 --> 00:09:21,040
i really like which

00:09:18,560 --> 00:09:22,480
to be fair is reeking of survivorship

00:09:21,040 --> 00:09:23,760
bias but

00:09:22,480 --> 00:09:26,000
has this really interesting way of

00:09:23,760 --> 00:09:27,519
thinking of not just what the future

00:09:26,000 --> 00:09:30,320
will look like but

00:09:27,519 --> 00:09:31,360
what things won't change so really

00:09:30,320 --> 00:09:32,880
getting at those trends what are the

00:09:31,360 --> 00:09:33,920
trends today that just will continue

00:09:32,880 --> 00:09:37,120
tomorrow

00:09:33,920 --> 00:09:39,360
and using that to predict the future so

00:09:37,120 --> 00:09:41,440
in amazon's case right no user is going

00:09:39,360 --> 00:09:44,240
to say i want higher prices i want

00:09:41,440 --> 00:09:46,080
slower deliveries i want less options

00:09:44,240 --> 00:09:48,959
jeff bezos point in this longer quote is

00:09:46,080 --> 00:09:50,320
that by focusing on those truths

00:09:48,959 --> 00:09:52,800
you can actually get a really clear

00:09:50,320 --> 00:09:54,160
sense of what the future will look like

00:09:52,800 --> 00:09:55,920
what people want and what will drive

00:09:54,160 --> 00:09:58,560
them to the decisions they make

00:09:55,920 --> 00:09:58,560
in the future

00:09:58,959 --> 00:10:02,560
the work i've been doing is really based

00:10:00,800 --> 00:10:03,760
on this idea so pico was a project back

00:10:02,560 --> 00:10:05,279
in 2018

00:10:03,760 --> 00:10:06,880
that was trying to look at the future of

00:10:05,279 --> 00:10:08,720
web development and

00:10:06,880 --> 00:10:10,560
snowpack and skypack the two projects

00:10:08,720 --> 00:10:13,200
that came out of that

00:10:10,560 --> 00:10:13,920
essentially are taking those human

00:10:13,200 --> 00:10:15,760
truths as

00:10:13,920 --> 00:10:17,600
specifically developer truths and and

00:10:15,760 --> 00:10:20,560
turning those into products

00:10:17,600 --> 00:10:22,800
so snowpack is a faster web development

00:10:20,560 --> 00:10:24,320
environment it's based on the idea that

00:10:22,800 --> 00:10:25,839
if you can have something faster in a

00:10:24,320 --> 00:10:27,839
developer world you want it right no one

00:10:25,839 --> 00:10:29,760
wants a slower dev environment

00:10:27,839 --> 00:10:32,000
and then the technology it's based on is

00:10:29,760 --> 00:10:33,600
just a means to an end in that story

00:10:32,000 --> 00:10:35,120
you simplify tooling you simplify

00:10:33,600 --> 00:10:38,079
configuration

00:10:35,120 --> 00:10:39,200
sky packs a lot the same way and all the

00:10:38,079 --> 00:10:40,000
other things being equal you don't

00:10:39,200 --> 00:10:42,079
really want like

00:10:40,000 --> 00:10:43,360
your packages and all the work that it

00:10:42,079 --> 00:10:45,600
takes to get those from

00:10:43,360 --> 00:10:47,040
downloaded from a tarball eventually

00:10:45,600 --> 00:10:49,680
shipped to your user in

00:10:47,040 --> 00:10:51,360
javascript you want something that's a

00:10:49,680 --> 00:10:52,399
little more on demand and i pull the

00:10:51,360 --> 00:10:55,360
code that i want

00:10:52,399 --> 00:10:57,839
if things are simpler generally people

00:10:55,360 --> 00:10:59,839
appreciate that and it's a good thing

00:10:57,839 --> 00:11:00,959
so this whole talk is really based

00:10:59,839 --> 00:11:02,560
around that idea of what are what are

00:11:00,959 --> 00:11:04,959
these truths what are these trends

00:11:02,560 --> 00:11:07,760
can we pull them forward into the future

00:11:04,959 --> 00:11:10,160
and what do we find when we do that

00:11:07,760 --> 00:11:11,839
um this is just an exercise but built

00:11:10,160 --> 00:11:13,680
around the work i've been doing

00:11:11,839 --> 00:11:14,959
the way that i've seen the web evolve

00:11:13,680 --> 00:11:16,640
over the last few years and

00:11:14,959 --> 00:11:19,040
and what we're building for into the

00:11:16,640 --> 00:11:19,040
future

00:11:19,600 --> 00:11:23,440
so the first question to pull the trend

00:11:22,399 --> 00:11:24,399
out is we have to find out what that

00:11:23,440 --> 00:11:25,839
trend is so what

00:11:24,399 --> 00:11:29,040
defined the last decade of web

00:11:25,839 --> 00:11:31,120
development you know as users we replace

00:11:29,040 --> 00:11:32,959
laptops and desktops with phones and

00:11:31,120 --> 00:11:34,959
tablets and we use our fingers to

00:11:32,959 --> 00:11:37,279
interact with things now

00:11:34,959 --> 00:11:39,120
more people got online than ever before

00:11:37,279 --> 00:11:41,519
billions of people connected to the fir

00:11:39,120 --> 00:11:43,120
to the internet for the first time on

00:11:41,519 --> 00:11:44,959
all different sorts of devices on all

00:11:43,120 --> 00:11:47,760
different sorts of connections

00:11:44,959 --> 00:11:48,240
so what we build for now is is no longer

00:11:47,760 --> 00:11:49,920
you know

00:11:48,240 --> 00:11:51,839
above the fold versus below the fold

00:11:49,920 --> 00:11:54,000
because you have this consistent

00:11:51,839 --> 00:11:56,720
you know machine instead you're

00:11:54,000 --> 00:11:58,959
designing for a world where the user

00:11:56,720 --> 00:12:00,240
could look and and behave like anyone

00:11:58,959 --> 00:12:02,160
they they could have a high powered

00:12:00,240 --> 00:12:03,920
device or a low powered device a fast or

00:12:02,160 --> 00:12:05,920
slow

00:12:03,920 --> 00:12:07,680
the world of the internet is just more

00:12:05,920 --> 00:12:11,040
accessible than ever

00:12:07,680 --> 00:12:11,920
to more and more people on the flip side

00:12:11,040 --> 00:12:13,920
for developers

00:12:11,920 --> 00:12:15,440
you know cloud computing is this huge

00:12:13,920 --> 00:12:17,600
trend of the last decade where

00:12:15,440 --> 00:12:19,040
instead of me managing servers in my

00:12:17,600 --> 00:12:21,839
basement

00:12:19,040 --> 00:12:23,200
or as a company having to buy data

00:12:21,839 --> 00:12:24,160
center space and manage those racks

00:12:23,200 --> 00:12:26,959
myself i just

00:12:24,160 --> 00:12:29,040
click a button and get compute or

00:12:26,959 --> 00:12:31,920
database or storage

00:12:29,040 --> 00:12:32,560
um this on-demand price access model

00:12:31,920 --> 00:12:34,800
really

00:12:32,560 --> 00:12:36,880
for things that had traditionally always

00:12:34,800 --> 00:12:40,240
been high cost of maintenance and

00:12:36,880 --> 00:12:41,519
setup also for developers was this idea

00:12:40,240 --> 00:12:43,200
that javascript

00:12:41,519 --> 00:12:44,880
especially for web developers moved away

00:12:43,200 --> 00:12:46,000
from just being a browser language and

00:12:44,880 --> 00:12:48,160
it moved

00:12:46,000 --> 00:12:49,680
essentially all the way down the stack

00:12:48,160 --> 00:12:51,920
so node.js brought

00:12:49,680 --> 00:12:53,920
javascript out of the browser and into

00:12:51,920 --> 00:12:55,519
the servers

00:12:53,920 --> 00:12:57,440
into you can build your api with

00:12:55,519 --> 00:12:58,880
javascript you can talk to your database

00:12:57,440 --> 00:13:01,200
with javascript you can build

00:12:58,880 --> 00:13:01,920
a front-end application a native

00:13:01,200 --> 00:13:05,120
application

00:13:01,920 --> 00:13:07,360
a desktop application the last decade

00:13:05,120 --> 00:13:10,079
has really been about javascript's

00:13:07,360 --> 00:13:13,519
journey out of the browser and into just

00:13:10,079 --> 00:13:15,279
every other facet of development

00:13:13,519 --> 00:13:17,120
npm as a part of that is a single

00:13:15,279 --> 00:13:18,320
javascript ecosystem across front end

00:13:17,120 --> 00:13:21,200
and back end one

00:13:18,320 --> 00:13:23,360
ecosystem of a community of packages and

00:13:21,200 --> 00:13:25,360
code that's shareable

00:13:23,360 --> 00:13:27,279
and react specifically gets a callout

00:13:25,360 --> 00:13:28,880
because it took a model where the front

00:13:27,279 --> 00:13:32,240
end was really about

00:13:28,880 --> 00:13:34,720
getting html and css delivered

00:13:32,240 --> 00:13:36,560
and then adding functionality react

00:13:34,720 --> 00:13:38,959
flipped that model where it said

00:13:36,560 --> 00:13:39,760
no it's really about defining parts of

00:13:38,959 --> 00:13:42,320
your site

00:13:39,760 --> 00:13:43,519
of your application and giving them the

00:13:42,320 --> 00:13:45,920
full control so

00:13:43,519 --> 00:13:47,040
not just functionality but also view

00:13:45,920 --> 00:13:49,839
rendering that

00:13:47,040 --> 00:13:51,519
component architecture of the front end

00:13:49,839 --> 00:13:52,880
took javascript not just from

00:13:51,519 --> 00:13:54,399
being the thing that makes your site run

00:13:52,880 --> 00:13:56,160
but actually the thing that your whole

00:13:54,399 --> 00:13:58,160
site is built on top of

00:13:56,160 --> 00:13:59,920
so a huge decade of transformation for

00:13:58,160 --> 00:14:01,360
users and for developers and how we

00:13:59,920 --> 00:14:04,160
think about websites and how we think

00:14:01,360 --> 00:14:04,160
about our users

00:14:04,320 --> 00:14:07,920
so let's take a look at that let's let's

00:14:06,000 --> 00:14:10,320
take that thread right

00:14:07,920 --> 00:14:11,279
that idea of more people online

00:14:10,320 --> 00:14:13,120
everywhere but

00:14:11,279 --> 00:14:14,800
javascripts kind of break out from the

00:14:13,120 --> 00:14:16,639
browser

00:14:14,800 --> 00:14:18,240
what will define the next decade of web

00:14:16,639 --> 00:14:21,279
development i want to

00:14:18,240 --> 00:14:23,360
posit that it's javascript javascript

00:14:21,279 --> 00:14:26,240
continues its journey out of the browser

00:14:23,360 --> 00:14:27,920
and into all parts of the stack

00:14:26,240 --> 00:14:29,680
what that really means is javascript has

00:14:27,920 --> 00:14:32,720
a universal language

00:14:29,680 --> 00:14:34,880
you know we can run it anywhere it can

00:14:32,720 --> 00:14:36,320
be used to build anything but what that

00:14:34,880 --> 00:14:37,600
really means is now the front end

00:14:36,320 --> 00:14:40,720
developer

00:14:37,600 --> 00:14:41,600
has the ability to build at all levels

00:14:40,720 --> 00:14:43,279
of the stack

00:14:41,600 --> 00:14:44,800
if you know javascript you actually can

00:14:43,279 --> 00:14:46,240
get by by writing your api with

00:14:44,800 --> 00:14:47,600
javascript you can

00:14:46,240 --> 00:14:50,240
talk to your database with javascript

00:14:47,600 --> 00:14:53,519
you can build a full stack

00:14:50,240 --> 00:14:55,279
essentially all the way down with one

00:14:53,519 --> 00:14:56,959
language

00:14:55,279 --> 00:14:59,360
that ease of use and kind of

00:14:56,959 --> 00:15:01,839
accessibility to everyone

00:14:59,360 --> 00:15:03,839
it creates a language that is that is

00:15:01,839 --> 00:15:05,760
everyone is incentivized to build for

00:15:03,839 --> 00:15:07,839
it's this feedback loop where not only

00:15:05,760 --> 00:15:09,839
do web developers need to use javascript

00:15:07,839 --> 00:15:10,959
but they can then also build everything

00:15:09,839 --> 00:15:14,480
else they need to power

00:15:10,959 --> 00:15:16,480
that web application experience

00:15:14,480 --> 00:15:19,120
it's beginner friendly so it's also like

00:15:16,480 --> 00:15:22,079
not a huge upfront cost when compared to

00:15:19,120 --> 00:15:22,560
other languages although that certainly

00:15:22,079 --> 00:15:24,560
you know

00:15:22,560 --> 00:15:26,800
maybe the next decade sees that go that

00:15:24,560 --> 00:15:28,240
goes away as we keep adding features but

00:15:26,800 --> 00:15:29,600
for the most part it's this really nice

00:15:28,240 --> 00:15:30,720
feedback loop of more and more people

00:15:29,600 --> 00:15:32,399
getting involved

00:15:30,720 --> 00:15:34,320
and more and more being possible with a

00:15:32,399 --> 00:15:36,880
single language in a way that's never

00:15:34,320 --> 00:15:39,279
really been possible before

00:15:36,880 --> 00:15:40,160
this isn't a new idea for 2021 but this

00:15:39,279 --> 00:15:43,120
is

00:15:40,160 --> 00:15:44,560
the trend that's kind of ever since node

00:15:43,120 --> 00:15:46,160
really took off

00:15:44,560 --> 00:15:47,360
that's brought javascript essentially

00:15:46,160 --> 00:15:48,800
everywhere and the person who knows

00:15:47,360 --> 00:15:52,160
javascript can build

00:15:48,800 --> 00:15:53,839
anything with a single language

00:15:52,160 --> 00:15:55,279
so i want to take this thread and i want

00:15:53,839 --> 00:15:56,079
to pull where does this go for web

00:15:55,279 --> 00:15:57,680
development what

00:15:56,079 --> 00:15:59,680
javascript is a universal language what

00:15:57,680 --> 00:16:02,240
does that mean um

00:15:59,680 --> 00:16:03,600
and to kind of start that journey out of

00:16:02,240 --> 00:16:04,240
the decade into the future i want to

00:16:03,600 --> 00:16:07,519
look at

00:16:04,240 --> 00:16:09,040
2013. 2013 was this really interesting

00:16:07,519 --> 00:16:10,880
year for two reasons

00:16:09,040 --> 00:16:12,480
um the first one is that react was

00:16:10,880 --> 00:16:14,880
released

00:16:12,480 --> 00:16:16,880
so react as i mentioned took this idea

00:16:14,880 --> 00:16:19,120
of the front end not as

00:16:16,880 --> 00:16:20,560
get html get the things you you're gonna

00:16:19,120 --> 00:16:23,920
show from the server and then

00:16:20,560 --> 00:16:25,759
kind of hydrate them with functionality

00:16:23,920 --> 00:16:27,600
react with this very interesting

00:16:25,759 --> 00:16:29,279
approach for the time which is

00:16:27,600 --> 00:16:32,000
your whole component is run in

00:16:29,279 --> 00:16:34,800
javascript and there might be css

00:16:32,000 --> 00:16:36,079
but it's generating that html for you

00:16:34,800 --> 00:16:39,279
javascript is the answer

00:16:36,079 --> 00:16:40,959
in that react world and this talk is

00:16:39,279 --> 00:16:42,480
so interesting to go back and look at

00:16:40,959 --> 00:16:43,600
now because you can tell how much

00:16:42,480 --> 00:16:45,519
they're having to convince people

00:16:43,600 --> 00:16:46,800
no no hear us out this is actually a

00:16:45,519 --> 00:16:48,720
good idea

00:16:46,800 --> 00:16:50,399
this goes against every best practice at

00:16:48,720 --> 00:16:52,800
the time but but trust us that was

00:16:50,399 --> 00:16:54,240
essentially their message

00:16:52,800 --> 00:16:56,000
at the time it was this idea that

00:16:54,240 --> 00:16:57,440
templating and

00:16:56,000 --> 00:16:59,199
functionality should be kept separate

00:16:57,440 --> 00:17:00,880
there's there are different concerns but

00:16:59,199 --> 00:17:03,519
react's big insight was like no they're

00:17:00,880 --> 00:17:04,000
not they're actually the same concept is

00:17:03,519 --> 00:17:06,480
that the

00:17:04,000 --> 00:17:07,439
functionality of the thing is directly

00:17:06,480 --> 00:17:09,679
tied to how

00:17:07,439 --> 00:17:11,520
it looks how it behaves and what its

00:17:09,679 --> 00:17:13,039
parts are

00:17:11,520 --> 00:17:14,959
so this was a really big big

00:17:13,039 --> 00:17:16,720
transformation because it took

00:17:14,959 --> 00:17:18,319
javascript not as just we'll add

00:17:16,720 --> 00:17:19,039
functionality to something that exists

00:17:18,319 --> 00:17:21,679
and now

00:17:19,039 --> 00:17:22,319
we will use javascript to build a site

00:17:21,679 --> 00:17:25,439
to build

00:17:22,319 --> 00:17:26,959
parts of a site the second thing that

00:17:25,439 --> 00:17:27,280
happened this decade was something that

00:17:26,959 --> 00:17:30,080
i

00:17:27,280 --> 00:17:32,000
got to work on which was this idea of

00:17:30,080 --> 00:17:33,360
app box the company i was working at we

00:17:32,000 --> 00:17:35,679
were trying to figure out what this

00:17:33,360 --> 00:17:37,679
front-end architecture meant for us

00:17:35,679 --> 00:17:39,840
so i got to i was lucky enough to work

00:17:37,679 --> 00:17:41,760
under a engineer named nicholas dakis

00:17:39,840 --> 00:17:43,440
you might know him for creating eslint

00:17:41,760 --> 00:17:46,720
and his you know

00:17:43,440 --> 00:17:48,080
numerous writing books really smart

00:17:46,720 --> 00:17:49,280
person

00:17:48,080 --> 00:17:51,280
at the time we were trying to figure out

00:17:49,280 --> 00:17:52,400
what the front end of box the company

00:17:51,280 --> 00:17:54,559
should look like

00:17:52,400 --> 00:17:55,600
and you know we had this idea where you

00:17:54,559 --> 00:17:58,000
know previously what

00:17:55,600 --> 00:17:59,120
existed was that that same idea that

00:17:58,000 --> 00:18:01,760
react was looking at where

00:17:59,120 --> 00:18:03,760
html is coming from the server and then

00:18:01,760 --> 00:18:06,960
the front end is just kind of

00:18:03,760 --> 00:18:08,559
making it work um

00:18:06,960 --> 00:18:10,960
we started looking at node instead of

00:18:08,559 --> 00:18:13,440
react as the way to solve this so

00:18:10,960 --> 00:18:14,000
a different model where we we saw node

00:18:13,440 --> 00:18:15,760
as the

00:18:14,000 --> 00:18:17,600
thing that the front-end developer who

00:18:15,760 --> 00:18:20,799
knows javascript could use

00:18:17,600 --> 00:18:22,320
to take advantage of that html rendering

00:18:20,799 --> 00:18:24,640
essentially moving to a model more like

00:18:22,320 --> 00:18:27,120
this where

00:18:24,640 --> 00:18:28,480
ui was generated html is generated still

00:18:27,120 --> 00:18:30,000
on the server so we weren't moving as

00:18:28,480 --> 00:18:31,840
far as react had gone

00:18:30,000 --> 00:18:34,480
but all of a sudden the front end

00:18:31,840 --> 00:18:37,039
developer is now managing a server

00:18:34,480 --> 00:18:38,880
so this got it more of the kind of

00:18:37,039 --> 00:18:41,440
separation of responsibilities was

00:18:38,880 --> 00:18:43,919
actually changing at this time

00:18:41,440 --> 00:18:45,360
the responsibility of the front end

00:18:43,919 --> 00:18:47,440
before it just been this runs in the

00:18:45,360 --> 00:18:49,360
browser this runs on the server

00:18:47,440 --> 00:18:50,480
hard line it's like a that's my turf as

00:18:49,360 --> 00:18:51,280
a front end developer and back in

00:18:50,480 --> 00:18:54,320
developers that's

00:18:51,280 --> 00:18:56,799
that's your turf um the shift was that

00:18:54,320 --> 00:18:58,400
not a front end isn't front end like no

00:18:56,799 --> 00:19:00,320
server it's front in like the ui

00:18:58,400 --> 00:19:01,840
application layer

00:19:00,320 --> 00:19:03,840
it's about that ownership of the

00:19:01,840 --> 00:19:06,160
application itself where

00:19:03,840 --> 00:19:07,280
someone can know javascript and own both

00:19:06,160 --> 00:19:10,480
what runs in the client

00:19:07,280 --> 00:19:12,000
and on a server but

00:19:10,480 --> 00:19:13,840
there's still business logic that can be

00:19:12,000 --> 00:19:15,440
run by a backend team that that

00:19:13,840 --> 00:19:17,919
understands permissioning

00:19:15,440 --> 00:19:19,360
data models the actual you know make

00:19:17,919 --> 00:19:21,120
sure that the right data is getting sent

00:19:19,360 --> 00:19:23,280
to the right person is a problem all on

00:19:21,120 --> 00:19:24,559
its own

00:19:23,280 --> 00:19:26,320
so it's funny so we had these two

00:19:24,559 --> 00:19:26,799
different approaches where you could

00:19:26,320 --> 00:19:28,240
look at

00:19:26,799 --> 00:19:30,400
you know the front end developers world

00:19:28,240 --> 00:19:31,360
changing is it changing through react or

00:19:30,400 --> 00:19:32,640
through node

00:19:31,360 --> 00:19:34,480
but at the end of the day what you end

00:19:32,640 --> 00:19:37,200
up with is something a lot like the

00:19:34,480 --> 00:19:38,640
single page application architecture

00:19:37,200 --> 00:19:41,039
this is pretty spot on where

00:19:38,640 --> 00:19:42,720
the front end application is running

00:19:41,039 --> 00:19:44,880
it's it's its own thing you think of the

00:19:42,720 --> 00:19:46,960
application as a single code base

00:19:44,880 --> 00:19:48,320
and then the business logic the the

00:19:46,960 --> 00:19:50,720
powers it is

00:19:48,320 --> 00:19:52,880
its own service somewhere else and an

00:19:50,720 --> 00:19:54,480
api connects the two

00:19:52,880 --> 00:19:56,480
so this is the way that a lot of us

00:19:54,480 --> 00:19:59,760
think about web development today

00:19:56,480 --> 00:20:01,840
um it's not a big application that

00:19:59,760 --> 00:20:02,799
spans back end and front end it's this

00:20:01,840 --> 00:20:06,640
really nice clear

00:20:02,799 --> 00:20:08,799
cutoff between the two

00:20:06,640 --> 00:20:09,919
this is a really good architecture for

00:20:08,799 --> 00:20:12,320
that reason of

00:20:09,919 --> 00:20:13,520
having a clear separation so you have

00:20:12,320 --> 00:20:15,280
not just you know

00:20:13,520 --> 00:20:17,120
good ownership practices and people who

00:20:15,280 --> 00:20:19,760
are working on the ui have this full

00:20:17,120 --> 00:20:21,520
ownership of their experience but that

00:20:19,760 --> 00:20:23,600
api especially within a big company you

00:20:21,520 --> 00:20:26,799
have that really explicit contract

00:20:23,600 --> 00:20:28,320
so i've seen countless bugs where

00:20:26,799 --> 00:20:30,159
oh if you click this and you click this

00:20:28,320 --> 00:20:31,200
and you click this all of a sudden you

00:20:30,159 --> 00:20:32,080
can do something you're not supposed to

00:20:31,200 --> 00:20:33,760
do

00:20:32,080 --> 00:20:35,600
what's nice about the api is the most

00:20:33,760 --> 00:20:38,720
secure part of your application

00:20:35,600 --> 00:20:39,440
there's no three you know the the flow

00:20:38,720 --> 00:20:41,760
is just

00:20:39,440 --> 00:20:43,280
an api call and an api response it's

00:20:41,760 --> 00:20:45,039
really explicit you can document it

00:20:43,280 --> 00:20:46,559
internally it encourages that

00:20:45,039 --> 00:20:49,360
and you can test it on both sides right

00:20:46,559 --> 00:20:51,120
you can just hit that api and test it or

00:20:49,360 --> 00:20:52,799
on the ui you can mock it out and test

00:20:51,120 --> 00:20:55,120
it you have this really clear contract

00:20:52,799 --> 00:20:57,039
between the two

00:20:55,120 --> 00:20:58,240
and right you get to separate out the ui

00:20:57,039 --> 00:21:00,000
so you can build for the browser you can

00:20:58,240 --> 00:21:01,840
build for native you can build for ios

00:21:00,000 --> 00:21:03,679
and android

00:21:01,840 --> 00:21:05,200
it's all the same api that powers all of

00:21:03,679 --> 00:21:06,720
that so you have a really nice kind of

00:21:05,200 --> 00:21:08,240
organizational structure as well

00:21:06,720 --> 00:21:11,919
a lot of code reuse on the most

00:21:08,240 --> 00:21:13,679
important core parts of your app

00:21:11,919 --> 00:21:15,039
and for in terms of what you need to

00:21:13,679 --> 00:21:17,120
know the front end developer

00:21:15,039 --> 00:21:18,799
knows html css javascript they can own

00:21:17,120 --> 00:21:20,080
the full ui

00:21:18,799 --> 00:21:22,159
and the backend can be powered by

00:21:20,080 --> 00:21:23,039
whatever whatever you want it could be

00:21:22,159 --> 00:21:24,559
javascript

00:21:23,039 --> 00:21:26,880
with node.js or it could be something

00:21:24,559 --> 00:21:30,720
entirely entirely different the api

00:21:26,880 --> 00:21:32,159
stays the same no matter what

00:21:30,720 --> 00:21:33,840
and this is where jam stack comes in

00:21:32,159 --> 00:21:36,000
where a jam stack was this i

00:21:33,840 --> 00:21:38,159
really kind of a bit of marketing but

00:21:36,000 --> 00:21:40,720
really a solidification of why this is

00:21:38,159 --> 00:21:42,640
important as a concept is because

00:21:40,720 --> 00:21:44,159
jam stacks standing for javascript apis

00:21:42,640 --> 00:21:46,559
and markup

00:21:44,159 --> 00:21:47,200
you get this really nice distribution

00:21:46,559 --> 00:21:49,120
model

00:21:47,200 --> 00:21:50,480
where you can take your ui application

00:21:49,120 --> 00:21:52,080
which is essentially just a static

00:21:50,480 --> 00:21:54,159
bundle of assets and

00:21:52,080 --> 00:21:56,799
distribute it anywhere so put it under a

00:21:54,159 --> 00:21:58,480
cdn distribute it around the world

00:21:56,799 --> 00:22:00,720
and you're no longer hitting this kind

00:21:58,480 --> 00:22:02,240
of business logic server that's also

00:22:00,720 --> 00:22:04,080
doing html rendering you just have a

00:22:02,240 --> 00:22:06,400
really nice model of

00:22:04,080 --> 00:22:08,159
really close access to the application

00:22:06,400 --> 00:22:10,000
and an api for the most important bits

00:22:08,159 --> 00:22:13,280
and you can scale that api now

00:22:10,000 --> 00:22:15,360
as much as you need so

00:22:13,280 --> 00:22:16,320
this is a core of what became you know

00:22:15,360 --> 00:22:19,200
modern job

00:22:16,320 --> 00:22:20,720
jam stack this is really good for

00:22:19,200 --> 00:22:22,960
developers all these things are really

00:22:20,720 --> 00:22:25,760
good about organizational structural

00:22:22,960 --> 00:22:26,000
responsibilities contracts the problem

00:22:25,760 --> 00:22:29,120
was

00:22:26,000 --> 00:22:31,600
it was pretty slow for developers

00:22:29,120 --> 00:22:33,280
that's a pretty big global statement but

00:22:31,600 --> 00:22:35,200
on the whole it's really easy to build

00:22:33,280 --> 00:22:37,280
something that's very slow for

00:22:35,200 --> 00:22:38,480
example you're loading a full

00:22:37,280 --> 00:22:40,960
application

00:22:38,480 --> 00:22:42,960
of javascript code that will then render

00:22:40,960 --> 00:22:44,720
the thing your user wants to see

00:22:42,960 --> 00:22:45,679
versus just sending the thing the user

00:22:44,720 --> 00:22:48,080
the thing they wanted to see in the

00:22:45,679 --> 00:22:50,240
first place it's this like indirect step

00:22:48,080 --> 00:22:51,120
um that gets them where they they wanted

00:22:50,240 --> 00:22:54,400
to go which is to

00:22:51,120 --> 00:22:56,000
use your website um and

00:22:54,400 --> 00:22:58,000
on top of that you're sending the full

00:22:56,000 --> 00:22:59,600
functionality so even if you solve for

00:22:58,000 --> 00:23:02,000
that problem you're sending okay every

00:22:59,600 --> 00:23:03,360
drop down and then button click and

00:23:02,000 --> 00:23:04,720
every part of your site you're sending

00:23:03,360 --> 00:23:06,640
what happens when it gets clicked your

00:23:04,720 --> 00:23:09,039
user might not ever even click it

00:23:06,640 --> 00:23:10,640
so it's really wasteful in that way

00:23:09,039 --> 00:23:12,559
where the user's experience they're

00:23:10,640 --> 00:23:14,720
loading a lot of unnecessary things

00:23:12,559 --> 00:23:16,080
to get the same experience of something

00:23:14,720 --> 00:23:17,520
that was just sending them the response

00:23:16,080 --> 00:23:19,440
they wanted in the first place

00:23:17,520 --> 00:23:22,720
by rendering it on the device you get

00:23:19,440 --> 00:23:23,200
this device level cost especially as we

00:23:22,720 --> 00:23:24,960
get

00:23:23,200 --> 00:23:26,799
slower and lower power devices and more

00:23:24,960 --> 00:23:28,799
and more people accessing it

00:23:26,799 --> 00:23:31,039
you know you you run into a real problem

00:23:28,799 --> 00:23:33,440
there

00:23:31,039 --> 00:23:34,960
so that's where we're at today um you

00:23:33,440 --> 00:23:35,760
know there are people solving this

00:23:34,960 --> 00:23:37,360
problem now but

00:23:35,760 --> 00:23:38,799
that's kind of where the decade left us

00:23:37,360 --> 00:23:40,000
i'd say that's our big problem with the

00:23:38,799 --> 00:23:42,799
site architecture

00:23:40,000 --> 00:23:43,840
i'm a ui developer i want to own my full

00:23:42,799 --> 00:23:46,000
stack i want a

00:23:43,840 --> 00:23:47,360
single code base to power the website

00:23:46,000 --> 00:23:50,480
that i'm building

00:23:47,360 --> 00:23:51,440
what do i do about this um

00:23:50,480 --> 00:23:53,200
so let's take a look at site

00:23:51,440 --> 00:23:54,799
architecture and what could we do to

00:23:53,200 --> 00:23:57,200
take this model either

00:23:54,799 --> 00:23:59,039
throughout it entirely or build on top

00:23:57,200 --> 00:24:00,880
of it what what happens when we keep

00:23:59,039 --> 00:24:02,799
going down this path

00:24:00,880 --> 00:24:04,320
um the easiest is we just keep this

00:24:02,799 --> 00:24:06,320
current model right so let's

00:24:04,320 --> 00:24:08,000
keep this ui application this this idea

00:24:06,320 --> 00:24:11,760
of a single page app

00:24:08,000 --> 00:24:14,320
um but let's address these concerns um

00:24:11,760 --> 00:24:15,919
that ends up bringing in something to do

00:24:14,320 --> 00:24:17,440
the rendering for us

00:24:15,919 --> 00:24:19,039
so this idea of okay i'm not going to

00:24:17,440 --> 00:24:20,000
send down the full application i'm going

00:24:19,039 --> 00:24:22,880
to send down

00:24:20,000 --> 00:24:24,559
some rendered version of it first so the

00:24:22,880 --> 00:24:26,559
user gets back that experience of

00:24:24,559 --> 00:24:28,480
give me a website and the server tells

00:24:26,559 --> 00:24:29,840
it what it's going to look like ahead of

00:24:28,480 --> 00:24:31,600
time

00:24:29,840 --> 00:24:33,120
that's really powerful it solves this

00:24:31,600 --> 00:24:35,679
problem right but

00:24:33,120 --> 00:24:37,279
the problem is that you end up now

00:24:35,679 --> 00:24:38,640
essentially moving back to this older

00:24:37,279 --> 00:24:39,919
model that

00:24:38,640 --> 00:24:41,679
that was that was talked about in that

00:24:39,919 --> 00:24:43,600
first post where

00:24:41,679 --> 00:24:45,520
you now are bringing a server back into

00:24:43,600 --> 00:24:48,320
the story so before you had add

00:24:45,520 --> 00:24:49,679
back-end apis from an application api

00:24:48,320 --> 00:24:53,360
contract

00:24:49,679 --> 00:24:55,679
now you have back-end application server

00:24:53,360 --> 00:24:56,480
doing some api stuff and then front-end

00:24:55,679 --> 00:24:57,679
application

00:24:56,480 --> 00:24:59,760
is what the server is doing but it's

00:24:57,679 --> 00:25:01,279
also what's running in the browser

00:24:59,760 --> 00:25:03,520
a lot of this complexity of the last

00:25:01,279 --> 00:25:06,960
decade kind of comes from

00:25:03,520 --> 00:25:08,960
that odd place that we find ourselves

00:25:06,960 --> 00:25:10,320
you have a ui application that you're

00:25:08,960 --> 00:25:12,080
building but it also has to run on the

00:25:10,320 --> 00:25:14,240
server and render on the server

00:25:12,080 --> 00:25:15,360
it's great when it works but it also

00:25:14,240 --> 00:25:18,320
really complicates what

00:25:15,360 --> 00:25:20,000
started as a very simple story so server

00:25:18,320 --> 00:25:22,480
side rendering is the term for that

00:25:20,000 --> 00:25:23,120
next.js and remix are two great projects

00:25:22,480 --> 00:25:25,039
that are

00:25:23,120 --> 00:25:27,679
exploring that what if we kind of give

00:25:25,039 --> 00:25:30,400
you an api for that model

00:25:27,679 --> 00:25:32,320
but it's a doubling down and it's a it's

00:25:30,400 --> 00:25:32,960
a bringing in complexity to solve that

00:25:32,320 --> 00:25:34,880
problem

00:25:32,960 --> 00:25:36,720
not necessarily a bad thing but it it

00:25:34,880 --> 00:25:40,080
gets rid or starts to chip away at the

00:25:36,720 --> 00:25:40,080
simplicity of the model

00:25:41,760 --> 00:25:46,480
that idea of complexity growing i think

00:25:44,720 --> 00:25:47,840
starts to tell a different story or

00:25:46,480 --> 00:25:48,720
starts to bring in different incentives

00:25:47,840 --> 00:25:50,799
so

00:25:48,720 --> 00:25:51,760
if web development gets difficult to the

00:25:50,799 --> 00:25:53,679
point where

00:25:51,760 --> 00:25:55,279
i'm no longer just distributing a set of

00:25:53,679 --> 00:25:56,720
assets that get distributed around the

00:25:55,279 --> 00:25:57,279
world and sent to my user and that's

00:25:56,720 --> 00:25:58,640
that

00:25:57,279 --> 00:26:01,360
i now need to think about a server

00:25:58,640 --> 00:26:03,120
component all of a sudden we start to

00:26:01,360 --> 00:26:04,559
now have this need that needs to be

00:26:03,120 --> 00:26:06,480
filled this idea of

00:26:04,559 --> 00:26:08,400
who's running the server am i running

00:26:06,480 --> 00:26:09,600
the server in which case i need to build

00:26:08,400 --> 00:26:12,400
it how do i build it

00:26:09,600 --> 00:26:13,600
how do i distribute it how do i scale it

00:26:12,400 --> 00:26:15,120
when there's a need of complexity

00:26:13,600 --> 00:26:16,640
especially when the expectation is

00:26:15,120 --> 00:26:18,320
simple

00:26:16,640 --> 00:26:20,240
is there going to be a rise of platforms

00:26:18,320 --> 00:26:21,600
that rise up to solve this need

00:26:20,240 --> 00:26:24,320
so i think vercell is a really

00:26:21,600 --> 00:26:25,679
interesting company in that it does

00:26:24,320 --> 00:26:27,840
a lot of things it does a lot of kind of

00:26:25,679 --> 00:26:28,880
agnostic hosting but their clear

00:26:27,840 --> 00:26:30,799
connection is to

00:26:28,880 --> 00:26:32,960
next.js they have a lot of next.js

00:26:30,799 --> 00:26:35,279
features like analytics where it's

00:26:32,960 --> 00:26:37,120
clearly the best host for an xts that's

00:26:35,279 --> 00:26:38,400
the story they're trying to tell

00:26:37,120 --> 00:26:40,480
which is really interesting because it's

00:26:38,400 --> 00:26:42,799
a solution to a problem

00:26:40,480 --> 00:26:43,840
that is the problem of a solution that

00:26:42,799 --> 00:26:45,760
they created like

00:26:43,840 --> 00:26:48,960
it's a solution to the problem of the

00:26:45,760 --> 00:26:52,080
server component of a ui application

00:26:48,960 --> 00:26:53,200
getting more complex so

00:26:52,080 --> 00:26:55,039
it's a really good experience when it

00:26:53,200 --> 00:26:56,880
works but again it's this idea of will

00:26:55,039 --> 00:26:58,080
we have platforms rise up to take on

00:26:56,880 --> 00:26:59,840
this complexity uh

00:26:58,080 --> 00:27:02,480
a smart hosting platform like for sale

00:26:59,840 --> 00:27:03,840
which can run your server component of

00:27:02,480 --> 00:27:06,080
the front end and essentially hide the

00:27:03,840 --> 00:27:08,400
fact that there is this new complexity

00:27:06,080 --> 00:27:10,159
you keep building an application but

00:27:08,400 --> 00:27:10,559
you're now distributing it to a host

00:27:10,159 --> 00:27:12,000
that

00:27:10,559 --> 00:27:14,559
can run a server for you without you

00:27:12,000 --> 00:27:16,080
even really noticing

00:27:14,559 --> 00:27:18,559
react server components if you've seen

00:27:16,080 --> 00:27:20,240
this that came out in december

00:27:18,559 --> 00:27:21,919
was kind of officially started talked

00:27:20,240 --> 00:27:24,799
about by the team

00:27:21,919 --> 00:27:25,919
this idea of a server component actually

00:27:24,799 --> 00:27:28,640
a front-end

00:27:25,919 --> 00:27:31,360
react team working on server components

00:27:28,640 --> 00:27:33,279
i think was a really interesting

00:27:31,360 --> 00:27:34,559
admission of of where they see this

00:27:33,279 --> 00:27:36,880
feature going

00:27:34,559 --> 00:27:38,399
um the idea of a front-end what had

00:27:36,880 --> 00:27:39,679
always been a front-end framework

00:27:38,399 --> 00:27:41,039
that was rendered on the server now

00:27:39,679 --> 00:27:42,000
actually creating primitives for the

00:27:41,039 --> 00:27:43,360
server so

00:27:42,000 --> 00:27:45,440
this is clearly a trend that a lot of

00:27:43,360 --> 00:27:47,600
people believe will continue

00:27:45,440 --> 00:27:48,799
um how you know will it change web

00:27:47,600 --> 00:27:49,200
development to the point where we think

00:27:48,799 --> 00:27:51,200
of

00:27:49,200 --> 00:27:54,000
hosts as these platforms that own the

00:27:51,200 --> 00:27:54,000
full application

00:27:54,720 --> 00:27:57,919
another part of that story is

00:27:56,640 --> 00:27:59,679
essentially i call this slide like the

00:27:57,919 --> 00:28:00,559
whatever the hell cloudflare is doing

00:27:59,679 --> 00:28:02,880
right now

00:28:00,559 --> 00:28:04,559
um because cloudflare is really telling

00:28:02,880 --> 00:28:05,039
this story better than anyone right now

00:28:04,559 --> 00:28:06,559
but

00:28:05,039 --> 00:28:08,720
it's kind of unclear how it all fits

00:28:06,559 --> 00:28:10,559
together at this point

00:28:08,720 --> 00:28:11,440
cloudflare has this idea that well okay

00:28:10,559 --> 00:28:13,120
if you're going to render the

00:28:11,440 --> 00:28:14,799
application anyway

00:28:13,120 --> 00:28:16,240
why not render it as close to the users

00:28:14,799 --> 00:28:17,600
as possible so if there's going to be a

00:28:16,240 --> 00:28:18,880
server let's move it as close to the

00:28:17,600 --> 00:28:20,399
user as possible so that they have this

00:28:18,880 --> 00:28:21,840
really quick connection

00:28:20,399 --> 00:28:24,240
a user in australia isn't going to have

00:28:21,840 --> 00:28:25,840
to go and talk to a server in new york

00:28:24,240 --> 00:28:27,039
just to get back this html

00:28:25,840 --> 00:28:28,720
at that point it might have been better

00:28:27,039 --> 00:28:30,000
to just serve them the whole application

00:28:28,720 --> 00:28:33,120
have them do it themselves

00:28:30,000 --> 00:28:34,480
on device so cloudflare is exploring

00:28:33,120 --> 00:28:36,399
this okay fine let's take that

00:28:34,480 --> 00:28:38,399
complexity as is and now let's build

00:28:36,399 --> 00:28:40,080
a whole new hosting model for it where

00:28:38,399 --> 00:28:43,200
things happen at the edge

00:28:40,080 --> 00:28:44,080
workers we can render your code kv is a

00:28:43,200 --> 00:28:45,600
key value store

00:28:44,080 --> 00:28:48,080
that actually gives you globally

00:28:45,600 --> 00:28:49,840
distributed data durable objects bring

00:28:48,080 --> 00:28:52,159
your user data closer to the user so

00:28:49,840 --> 00:28:53,520
that it actually can work like that

00:28:52,159 --> 00:28:54,720
it's a really interesting model it's

00:28:53,520 --> 00:28:55,440
it's just unclear how it all fits

00:28:54,720 --> 00:28:58,000
together but

00:28:55,440 --> 00:28:58,880
in a world where that complexity is

00:28:58,000 --> 00:29:01,520
taken for

00:28:58,880 --> 00:29:03,440
you know essentially as a reality as a

00:29:01,520 --> 00:29:05,200
certainty

00:29:03,440 --> 00:29:06,960
this model is really compelling in that

00:29:05,200 --> 00:29:07,600
it speeds that up even more than anyone

00:29:06,960 --> 00:29:12,559
else could

00:29:07,600 --> 00:29:14,240
by running things closer to your users

00:29:12,559 --> 00:29:15,679
the flip side of all this is let's just

00:29:14,240 --> 00:29:17,279
you know at a certain point if it gets

00:29:15,679 --> 00:29:19,039
too complicated

00:29:17,279 --> 00:29:20,640
are we going to start questioning this

00:29:19,039 --> 00:29:23,679
single page application this ui

00:29:20,640 --> 00:29:25,120
application layer entirely if we still

00:29:23,679 --> 00:29:26,480
need a server well wasn't that the whole

00:29:25,120 --> 00:29:29,679
reason we moved away

00:29:26,480 --> 00:29:31,600
from a rails model for instance where

00:29:29,679 --> 00:29:33,360
your server-side code and front-end code

00:29:31,600 --> 00:29:36,880
mixed together

00:29:33,360 --> 00:29:38,159
next js is is really at its core a

00:29:36,880 --> 00:29:39,840
framework for

00:29:38,159 --> 00:29:41,679
mixing server code and frontend code in

00:29:39,840 --> 00:29:43,600
the same ui application so

00:29:41,679 --> 00:29:45,760
we are we really just moving back to an

00:29:43,600 --> 00:29:47,760
older model in which case

00:29:45,760 --> 00:29:49,200
are these older models actually going to

00:29:47,760 --> 00:29:50,960
give us what we need anyway do we even

00:29:49,200 --> 00:29:52,799
need to reinvent the wheel

00:29:50,960 --> 00:29:54,640
so rails has been talking a lot about

00:29:52,799 --> 00:29:56,799
hotwire which is a way to kind of send

00:29:54,640 --> 00:29:58,640
these updates to the browser

00:29:56,799 --> 00:30:00,480
phoenix has live view there are these

00:29:58,640 --> 00:30:04,480
solutions which give a lot more

00:30:00,480 --> 00:30:06,240
front-end reactivity and dynamicism

00:30:04,480 --> 00:30:08,320
but using older or more traditional

00:30:06,240 --> 00:30:10,159
technology that was traditionally only

00:30:08,320 --> 00:30:12,159
server side

00:30:10,159 --> 00:30:13,039
so maybe we just say you know what

00:30:12,159 --> 00:30:14,799
they've actually done a lot of

00:30:13,039 --> 00:30:16,240
development over the last decade

00:30:14,799 --> 00:30:17,840
we already have this idea of bringing a

00:30:16,240 --> 00:30:19,120
server and so why leave the server that

00:30:17,840 --> 00:30:20,640
we had you know

00:30:19,120 --> 00:30:22,240
i think that's a really interesting part

00:30:20,640 --> 00:30:23,760
of this of of

00:30:22,240 --> 00:30:26,080
what are the benefits if we're if we're

00:30:23,760 --> 00:30:27,840
bringing that complexity back in

00:30:26,080 --> 00:30:31,039
um i don't know if we all appreciate

00:30:27,840 --> 00:30:32,720
that that's really what we're doing

00:30:31,039 --> 00:30:34,399
the other reaction to this if we pull

00:30:32,720 --> 00:30:36,720
this long enough is

00:30:34,399 --> 00:30:38,480
let's just give up entirely um if this

00:30:36,720 --> 00:30:40,320
is gonna get more complicated are we now

00:30:38,480 --> 00:30:42,480
dropping the accessibility of

00:30:40,320 --> 00:30:44,480
web development are we making it too

00:30:42,480 --> 00:30:47,120
complex for some developers

00:30:44,480 --> 00:30:50,240
um at that point if no code or low code

00:30:47,120 --> 00:30:52,399
solutions sort of like webflow

00:30:50,240 --> 00:30:53,440
and then that growing suite of tools

00:30:52,399 --> 00:30:56,159
maybe that's just

00:30:53,440 --> 00:30:57,919
enough maybe for a developer who isn't

00:30:56,159 --> 00:30:59,360
super familiar with web development

00:30:57,919 --> 00:31:01,840
maybe that's enough maybe they don't

00:30:59,360 --> 00:31:02,399
even need a full web host themselves and

00:31:01,840 --> 00:31:05,600
a full

00:31:02,399 --> 00:31:07,840
application that they built themselves

00:31:05,600 --> 00:31:09,360
i think also shopify is a really

00:31:07,840 --> 00:31:11,840
interesting story here where

00:31:09,360 --> 00:31:13,200
why build a website at all you know if

00:31:11,840 --> 00:31:16,080
shopify keeps getting good or

00:31:13,200 --> 00:31:16,480
or some platform gives someone the tools

00:31:16,080 --> 00:31:19,279
to

00:31:16,480 --> 00:31:20,720
design their site in the context of a

00:31:19,279 --> 00:31:23,919
larger product like

00:31:20,720 --> 00:31:24,480
i want to sell things why leave that

00:31:23,919 --> 00:31:26,080
bubble

00:31:24,480 --> 00:31:27,600
right that could be a really compelling

00:31:26,080 --> 00:31:29,360
it's just another type of platform

00:31:27,600 --> 00:31:31,919
similar to versailles but

00:31:29,360 --> 00:31:33,360
focused on the use case that that user

00:31:31,919 --> 00:31:34,240
was already going to them to solve so

00:31:33,360 --> 00:31:37,519
it's

00:31:34,240 --> 00:31:39,840
web hosting becomes table stakes um i

00:31:37,519 --> 00:31:41,519
would certainly you know i i think

00:31:39,840 --> 00:31:42,240
that's a really compelling story to the

00:31:41,519 --> 00:31:44,960
users

00:31:42,240 --> 00:31:46,080
of that but it drops your options it's a

00:31:44,960 --> 00:31:47,840
little more limited

00:31:46,080 --> 00:31:49,279
is that what's best for the web or is it

00:31:47,840 --> 00:31:50,000
just the reality of what will start to

00:31:49,279 --> 00:31:52,320
happen

00:31:50,000 --> 00:31:55,440
if web development stays complex or

00:31:52,320 --> 00:31:55,440
grows even more complex

00:31:56,159 --> 00:31:59,279
i think one important part of the story

00:31:58,080 --> 00:32:01,519
and where we can

00:31:59,279 --> 00:32:04,000
make some progress away from complexity

00:32:01,519 --> 00:32:05,440
is the tooling

00:32:04,000 --> 00:32:06,960
for example wasm is something that

00:32:05,440 --> 00:32:07,919
people really like to talk about is

00:32:06,960 --> 00:32:11,440
saving

00:32:07,919 --> 00:32:13,039
grace for the web right i can

00:32:11,440 --> 00:32:15,200
no longer that requirement for

00:32:13,039 --> 00:32:17,120
javascript in the browser

00:32:15,200 --> 00:32:18,399
i can write whatever i want compile it

00:32:17,120 --> 00:32:22,000
and ship it to the browser

00:32:18,399 --> 00:32:23,600
so rust go see whatever language you

00:32:22,000 --> 00:32:25,440
want can be run in the browser

00:32:23,600 --> 00:32:27,600
using this this layer that is

00:32:25,440 --> 00:32:29,360
essentially wasm

00:32:27,600 --> 00:32:31,120
it takes that story of the javascript

00:32:29,360 --> 00:32:31,360
developer now owning their full stack

00:32:31,120 --> 00:32:32,960
and

00:32:31,360 --> 00:32:34,720
kind of flips it right it's the back-end

00:32:32,960 --> 00:32:36,320
developer now taking over some front-end

00:32:34,720 --> 00:32:38,720
development

00:32:36,320 --> 00:32:41,279
i think this remains to be seen i think

00:32:38,720 --> 00:32:43,440
the trends don't really point to this

00:32:41,279 --> 00:32:45,679
being a knockout success yet where they

00:32:43,440 --> 00:32:48,399
really point to is two different places

00:32:45,679 --> 00:32:50,399
really focused solutions for example if

00:32:48,399 --> 00:32:52,399
you haven't seen squoosh.app it's

00:32:50,399 --> 00:32:54,559
google's kind of flagship idea of what

00:32:52,399 --> 00:32:56,799
wasm could be where it'll actually

00:32:54,559 --> 00:32:58,320
compress images for you in the browser

00:32:56,799 --> 00:32:59,760
um it's really fun and especially if you

00:32:58,320 --> 00:33:02,240
need like just a quick tool it's

00:32:59,760 --> 00:33:03,519
actually useful i find myself using it

00:33:02,240 --> 00:33:06,000
that's a really good example it's a

00:33:03,519 --> 00:33:08,159
really specific need that wasm solves

00:33:06,000 --> 00:33:09,200
really beautifully because javascript

00:33:08,159 --> 00:33:10,960
could never

00:33:09,200 --> 00:33:12,480
compress an image in the browser like

00:33:10,960 --> 00:33:15,600
that it's it's really a

00:33:12,480 --> 00:33:18,000
a wasm specific story

00:33:15,600 --> 00:33:19,679
the other is this idea of hybrid wasm

00:33:18,000 --> 00:33:20,080
tooling which is something that my work

00:33:19,679 --> 00:33:22,720
is

00:33:20,080 --> 00:33:23,840
started touching on so snopepac as a dev

00:33:22,720 --> 00:33:25,600
tool for web developers it's a

00:33:23,840 --> 00:33:27,120
javascript built tool

00:33:25,600 --> 00:33:29,120
but there's a realization that

00:33:27,120 --> 00:33:29,919
javascript itself it it's not great at

00:33:29,120 --> 00:33:31,840
compute right

00:33:29,919 --> 00:33:33,279
it's it's not a really heavy duty tool

00:33:31,840 --> 00:33:35,120
and that it can't

00:33:33,279 --> 00:33:36,880
bundle your application or build files

00:33:35,120 --> 00:33:37,519
and transpile all this compute heavy

00:33:36,880 --> 00:33:39,919
stuff

00:33:37,519 --> 00:33:40,960
isn't really what javascript is good at

00:33:39,919 --> 00:33:42,320
but

00:33:40,960 --> 00:33:44,320
instead of throwing the whole thing out

00:33:42,320 --> 00:33:46,159
we can actually start to bring in

00:33:44,320 --> 00:33:47,760
these compiled tools for really specific

00:33:46,159 --> 00:33:49,200
use cases so

00:33:47,760 --> 00:33:50,880
one really nice thing about snowpack is

00:33:49,200 --> 00:33:53,039
that 99 of it is

00:33:50,880 --> 00:33:54,880
is javascript or typescript specifically

00:33:53,039 --> 00:33:56,000
but that flavor of javascript where it's

00:33:54,880 --> 00:33:58,159
familiar to the people

00:33:56,000 --> 00:33:59,279
who are using it we get contributions we

00:33:58,159 --> 00:34:02,320
get fixes

00:33:59,279 --> 00:34:03,919
it's a familiar ecosystem but for that

00:34:02,320 --> 00:34:06,320
one percent that ends up doing a lot of

00:34:03,919 --> 00:34:08,800
work like how do you build a file

00:34:06,320 --> 00:34:09,359
for the front end that becomes something

00:34:08,800 --> 00:34:10,960
that we can

00:34:09,359 --> 00:34:13,919
basically farm out to a compiled

00:34:10,960 --> 00:34:15,760
language specifically to es build

00:34:13,919 --> 00:34:16,960
so we have this kind of hybrid model

00:34:15,760 --> 00:34:18,720
where

00:34:16,960 --> 00:34:20,000
the really complex stuff can be handled

00:34:18,720 --> 00:34:23,119
by a compiled language

00:34:20,000 --> 00:34:24,800
in a really fast way but all the

00:34:23,119 --> 00:34:27,280
stitching together of that can be

00:34:24,800 --> 00:34:27,839
done by a layer or within a language

00:34:27,280 --> 00:34:29,359
where

00:34:27,839 --> 00:34:32,079
the developers and the people using the

00:34:29,359 --> 00:34:34,560
tool understand the language of the tool

00:34:32,079 --> 00:34:36,399
so you still have a healthy ecosystem of

00:34:34,560 --> 00:34:37,359
contributors around a language that they

00:34:36,399 --> 00:34:39,520
already know

00:34:37,359 --> 00:34:42,399
but you're getting the same benefits of

00:34:39,520 --> 00:34:44,159
a compiled language and all that speed

00:34:42,399 --> 00:34:46,320
so i think we'll see whether that

00:34:44,159 --> 00:34:48,399
actually changes web development

00:34:46,320 --> 00:34:49,839
really globally or if it's really

00:34:48,399 --> 00:34:52,000
specifically seeded into these

00:34:49,839 --> 00:34:53,520
really specific use cases but in a way

00:34:52,000 --> 00:34:56,480
that reaches all developers

00:34:53,520 --> 00:34:56,480
kind of indirectly

00:34:57,280 --> 00:35:00,400
the other thing that i spend a lot of

00:34:58,560 --> 00:35:03,440
time on is esm so

00:35:00,400 --> 00:35:06,560
esm is pretty much the technical

00:35:03,440 --> 00:35:09,520
focus of snowpack and skypack

00:35:06,560 --> 00:35:10,960
the two projects that i work on so esm

00:35:09,520 --> 00:35:13,040
is this idea that the browser now has

00:35:10,960 --> 00:35:14,800
the ability to load code

00:35:13,040 --> 00:35:17,119
a native module system of code in the

00:35:14,800 --> 00:35:18,800
browser so instead of having to

00:35:17,119 --> 00:35:20,560
bundle and process and do all this work

00:35:18,800 --> 00:35:20,880
ahead of time you can if you want to

00:35:20,560 --> 00:35:23,280
just

00:35:20,880 --> 00:35:24,880
send your browser the code that you're

00:35:23,280 --> 00:35:26,720
working on locally so

00:35:24,880 --> 00:35:28,160
i say import this file i ship it to the

00:35:26,720 --> 00:35:28,560
browser and the browser will go out and

00:35:28,160 --> 00:35:31,119
load

00:35:28,560 --> 00:35:34,079
all the things i need to run in the

00:35:31,119 --> 00:35:34,079
browser directly

00:35:34,320 --> 00:35:37,599
snowpack takes this idea and says okay

00:35:35,839 --> 00:35:38,880
great we'll stop doing this work

00:35:37,599 --> 00:35:40,400
we'll give the browser the native

00:35:38,880 --> 00:35:42,560
modules and we just get to speed up a

00:35:40,400 --> 00:35:43,920
lot of our processing time

00:35:42,560 --> 00:35:45,680
we can ship updates really quickly

00:35:43,920 --> 00:35:48,720
because we rely on the browser to

00:35:45,680 --> 00:35:49,760
natively stitch them in skypack takes

00:35:48,720 --> 00:35:52,560
this idea to

00:35:49,760 --> 00:35:54,320
the javascript ecosystem which says do

00:35:52,560 --> 00:35:56,000
you really want all this processing in

00:35:54,320 --> 00:35:58,480
your packages this idea of

00:35:56,000 --> 00:36:00,800
a package that i've installed um like

00:35:58,480 --> 00:36:03,280
react or maybe some big package

00:36:00,800 --> 00:36:04,720
within the react ecosystem today you're

00:36:03,280 --> 00:36:06,240
doing a lot of bundling and building of

00:36:04,720 --> 00:36:06,800
those files you're kind of compressing

00:36:06,240 --> 00:36:09,040
them and

00:36:06,800 --> 00:36:10,000
turning them from raw packages which

00:36:09,040 --> 00:36:13,119
started out as a

00:36:10,000 --> 00:36:14,480
tarball that got downloaded into front

00:36:13,119 --> 00:36:17,440
end code it's a it's a

00:36:14,480 --> 00:36:18,000
long pipeline to get to the user what if

00:36:17,440 --> 00:36:19,359
instead

00:36:18,000 --> 00:36:21,520
using that same import we could just

00:36:19,359 --> 00:36:24,160
pull the code from cdn

00:36:21,520 --> 00:36:26,000
so in development you can pull it within

00:36:24,160 --> 00:36:28,480
snowpack and kind of cache it so you now

00:36:26,000 --> 00:36:29,760
have react you didn't have to build it

00:36:28,480 --> 00:36:31,359
you didn't have to

00:36:29,760 --> 00:36:33,599
download a package you just grabbed it

00:36:31,359 --> 00:36:37,040
as you needed it um

00:36:33,599 --> 00:36:39,200
and taking that idea even further why

00:36:37,040 --> 00:36:40,160
why not just ship that into production

00:36:39,200 --> 00:36:41,440
directly

00:36:40,160 --> 00:36:43,280
i think that's what remains to be seen

00:36:41,440 --> 00:36:45,440
is how far can we take that idea of

00:36:43,280 --> 00:36:47,760
loading dependencies by url

00:36:45,440 --> 00:36:49,119
if i can load react by url and i can

00:36:47,760 --> 00:36:51,599
load all of my dependencies all of a

00:36:49,119 --> 00:36:53,520
sudden the majority of my application

00:36:51,599 --> 00:36:55,839
is no longer my responsibility to bundle

00:36:53,520 --> 00:36:58,079
and build i just point to it i have this

00:36:55,839 --> 00:37:01,200
kind of pointer by url

00:36:58,079 --> 00:37:04,400
my build is dramatically

00:37:01,200 --> 00:37:04,720
shrunk and the speed of my build speeds

00:37:04,400 --> 00:37:06,480
up

00:37:04,720 --> 00:37:07,839
the amount of complexity of my builds

00:37:06,480 --> 00:37:08,640
i'm just focusing on the code that i

00:37:07,839 --> 00:37:10,720
write

00:37:08,640 --> 00:37:12,240
that's the model of skype pack and i'm

00:37:10,720 --> 00:37:13,599
curious to see how that plays out into

00:37:12,240 --> 00:37:15,040
the decade

00:37:13,599 --> 00:37:16,640
what are the kind of you know what do we

00:37:15,040 --> 00:37:19,200
learn from that model and

00:37:16,640 --> 00:37:22,720
does the simplicity that it brings um

00:37:19,200 --> 00:37:24,640
connect with users

00:37:22,720 --> 00:37:26,240
i think browser ideas are the one other

00:37:24,640 --> 00:37:27,520
place where this gets really interesting

00:37:26,240 --> 00:37:30,240
which is

00:37:27,520 --> 00:37:31,040
taking a look at codepen for example a

00:37:30,240 --> 00:37:33,119
lot of

00:37:31,040 --> 00:37:34,400
these ids experiences in the browser

00:37:33,119 --> 00:37:35,440
have always been limited and

00:37:34,400 --> 00:37:37,599
we're starting to get smarter and

00:37:35,440 --> 00:37:38,240
smarter ways to develop in the browser

00:37:37,599 --> 00:37:40,000
so

00:37:38,240 --> 00:37:41,280
github has a code spaces product that i

00:37:40,000 --> 00:37:43,520
believe is in beta

00:37:41,280 --> 00:37:44,960
code sandbox over the last couple years

00:37:43,520 --> 00:37:46,320
has been really big

00:37:44,960 --> 00:37:48,800
but codepen is really interesting is

00:37:46,320 --> 00:37:50,880
that they've whether through patience or

00:37:48,800 --> 00:37:52,240
smart thinking or luck they have stayed

00:37:50,880 --> 00:37:55,520
really small and focused

00:37:52,240 --> 00:37:57,520
on front end only um there's not a like

00:37:55,520 --> 00:37:58,240
a server an api that spins up every time

00:37:57,520 --> 00:38:01,520
you open a code

00:37:58,240 --> 00:38:03,119
sandbox it runs in the browser so

00:38:01,520 --> 00:38:04,720
it gets to take advantage of this idea

00:38:03,119 --> 00:38:05,920
of the browser now having native

00:38:04,720 --> 00:38:07,119
primitives so if you haven't used

00:38:05,920 --> 00:38:08,400
codepen in a while

00:38:07,119 --> 00:38:10,320
it's really worth checking out because

00:38:08,400 --> 00:38:11,520
you essentially get a modern dev

00:38:10,320 --> 00:38:13,599
workflow

00:38:11,520 --> 00:38:14,960
by pulling dependencies by url and it's

00:38:13,599 --> 00:38:16,640
all running in the browser

00:38:14,960 --> 00:38:18,079
so there's not that like big startup

00:38:16,640 --> 00:38:19,760
cost where it's downloading things and

00:38:18,079 --> 00:38:21,839
starting up a server for you

00:38:19,760 --> 00:38:22,800
and if your connection dies you lose

00:38:21,839 --> 00:38:25,040
that it's

00:38:22,800 --> 00:38:26,079
a totally browser native experience for

00:38:25,040 --> 00:38:28,160
development

00:38:26,079 --> 00:38:29,200
that feels as if you're you're running

00:38:28,160 --> 00:38:33,200
much more

00:38:29,200 --> 00:38:35,359
powerful tooling that you're used to

00:38:33,200 --> 00:38:36,320
so i see that as being a big trend into

00:38:35,359 --> 00:38:37,839
the future is that

00:38:36,320 --> 00:38:39,359
if the browser is smart enough to handle

00:38:37,839 --> 00:38:42,640
these things now

00:38:39,359 --> 00:38:44,320
and can offer a much simpler model

00:38:42,640 --> 00:38:45,920
it's a really promising way to bring

00:38:44,320 --> 00:38:49,119
more people into the development kind of

00:38:45,920 --> 00:38:49,119
world into that workflow

00:38:50,000 --> 00:38:53,040
last i just want to talk about what the

00:38:51,520 --> 00:38:53,760
user sees throughout this decade right

00:38:53,040 --> 00:38:55,359
because

00:38:53,760 --> 00:38:57,119
the 2010s were really about bringing

00:38:55,359 --> 00:38:58,880
more and more people online

00:38:57,119 --> 00:39:00,160
and even for the people who were already

00:38:58,880 --> 00:39:01,520
online

00:39:00,160 --> 00:39:03,599
connecting more and more of the internet

00:39:01,520 --> 00:39:05,520
into their life

00:39:03,599 --> 00:39:07,680
so not only is you know if you had

00:39:05,520 --> 00:39:08,880
internet on a desktop now that internet

00:39:07,680 --> 00:39:09,760
is everywhere it's on your phone it's

00:39:08,880 --> 00:39:12,880
buzzing you

00:39:09,760 --> 00:39:15,599
constantly um let's take a look

00:39:12,880 --> 00:39:17,200
what happens if that trend continues um

00:39:15,599 --> 00:39:18,960
hopefully we don't end all

00:39:17,200 --> 00:39:20,880
end up in a black mirror you know

00:39:18,960 --> 00:39:21,760
hellscape hopefully this is actually a

00:39:20,880 --> 00:39:24,720
good trend this

00:39:21,760 --> 00:39:26,160
is what we're all hoping um i think that

00:39:24,720 --> 00:39:28,880
trend ends up looking like

00:39:26,160 --> 00:39:29,440
just more internet everywhere and not

00:39:28,880 --> 00:39:30,720
like

00:39:29,440 --> 00:39:32,640
your light bulbs are now connected to

00:39:30,720 --> 00:39:35,359
the internet i mean if

00:39:32,640 --> 00:39:36,800
you enjoy that go nuts but more the idea

00:39:35,359 --> 00:39:38,720
of

00:39:36,800 --> 00:39:41,599
i i try to summarize at the bottom here

00:39:38,720 --> 00:39:43,839
your account versus your machine

00:39:41,599 --> 00:39:45,040
we still think in terms of terminals and

00:39:43,839 --> 00:39:47,200
machines like even now

00:39:45,040 --> 00:39:48,560
i'm recording this on a laptop and what

00:39:47,200 --> 00:39:50,480
i wanted to do was buy

00:39:48,560 --> 00:39:52,160
some new you know much more powerful

00:39:50,480 --> 00:39:54,480
recording machine i'd have it in here

00:39:52,160 --> 00:39:56,160
i could sell my laptop but how do i

00:39:54,480 --> 00:39:58,000
share files between those two you know

00:39:56,160 --> 00:40:00,480
i have a nice little coding set up here

00:39:58,000 --> 00:40:02,400
and i want to code and set up over there

00:40:00,480 --> 00:40:04,640
we still think of the you know the work

00:40:02,400 --> 00:40:07,280
that we do on machines as per machine

00:40:04,640 --> 00:40:07,920
per machine and i think the future holds

00:40:07,280 --> 00:40:10,000
more for

00:40:07,920 --> 00:40:11,119
that kind of cloud-based account model

00:40:10,000 --> 00:40:13,200
all the way down to

00:40:11,119 --> 00:40:14,800
you know what if your operating system

00:40:13,200 --> 00:40:15,839
was just a part of logging into an

00:40:14,800 --> 00:40:17,440
account

00:40:15,839 --> 00:40:19,200
um that certainly is a trend that's

00:40:17,440 --> 00:40:21,280
already started it's just a lot of

00:40:19,200 --> 00:40:24,720
pieces have to get into place before the

00:40:21,280 --> 00:40:27,520
actual lowest level can be changed um

00:40:24,720 --> 00:40:28,240
who knows if that will happen but it's

00:40:27,520 --> 00:40:29,359
it's

00:40:28,240 --> 00:40:31,440
i mainly bring this up to kind of

00:40:29,359 --> 00:40:31,839
juxtapose against like vr as the future

00:40:31,440 --> 00:40:34,160
i think

00:40:31,839 --> 00:40:35,359
vr is really cool but it's a totally

00:40:34,160 --> 00:40:37,599
different story it's not about

00:40:35,359 --> 00:40:39,680
connecting more people online

00:40:37,599 --> 00:40:41,200
vr equipment is you know for a long time

00:40:39,680 --> 00:40:43,119
not going to be cheaper than

00:40:41,200 --> 00:40:44,720
a phone if ever so it's not about

00:40:43,119 --> 00:40:48,160
connecting more people

00:40:44,720 --> 00:40:49,280
um i i hope it works but it's it's i'm

00:40:48,160 --> 00:40:50,960
making the point of

00:40:49,280 --> 00:40:52,160
the internet as connection has been the

00:40:50,960 --> 00:40:54,079
story of the last decade if that

00:40:52,160 --> 00:40:56,640
continues we should see

00:40:54,079 --> 00:40:58,400
more things thought of as as connecting

00:40:56,640 --> 00:41:01,359
to a network versus

00:40:58,400 --> 00:41:01,359
connecting to a machine

00:41:02,560 --> 00:41:06,000
so to bring this all together you know

00:41:04,640 --> 00:41:07,359
this is an interesting talk because

00:41:06,000 --> 00:41:08,960
normally you kind of set up with a

00:41:07,359 --> 00:41:10,160
thesis you prove the thesis and then you

00:41:08,960 --> 00:41:12,079
wrap it up

00:41:10,160 --> 00:41:13,520
um in this talk i set out with a thesis

00:41:12,079 --> 00:41:15,200
and then just kind of like

00:41:13,520 --> 00:41:16,560
what if this happened so there's not

00:41:15,200 --> 00:41:17,280
really like and here's how i proved my

00:41:16,560 --> 00:41:19,119
point

00:41:17,280 --> 00:41:20,560
um the thesis was not proven it

00:41:19,119 --> 00:41:21,760
essentially was the excuse to talk about

00:41:20,560 --> 00:41:23,440
all this stuff

00:41:21,760 --> 00:41:25,040
um but i do think that there are some

00:41:23,440 --> 00:41:26,240
kind of common themes and things that

00:41:25,040 --> 00:41:29,440
you can bring into your kind of

00:41:26,240 --> 00:41:31,040
the way that you see the web today um

00:41:29,440 --> 00:41:32,319
you know the first is that story of the

00:41:31,040 --> 00:41:32,640
lines between the front end and the back

00:41:32,319 --> 00:41:35,680
end

00:41:32,640 --> 00:41:37,200
will continue to blur we either

00:41:35,680 --> 00:41:38,720
will solve this performance problem of

00:41:37,200 --> 00:41:41,119
the single page application

00:41:38,720 --> 00:41:43,520
of the kind of full ui application we'll

00:41:41,119 --> 00:41:46,800
either solve it with more server logic

00:41:43,520 --> 00:41:48,400
or we will you know move away or

00:41:46,800 --> 00:41:50,640
maybe there's some third answer to this

00:41:48,400 --> 00:41:52,000
this problem which is um a reduction of

00:41:50,640 --> 00:41:52,720
you know maybe can we get rid of the

00:41:52,000 --> 00:41:53,760
server

00:41:52,720 --> 00:41:55,200
that's one of those things where is

00:41:53,760 --> 00:41:56,160
there a groundbreaking technology out

00:41:55,200 --> 00:41:59,119
there that will

00:41:56,160 --> 00:42:00,480
actually change this framing completely

00:41:59,119 --> 00:42:02,240
maybe

00:42:00,480 --> 00:42:03,359
but barring that we have this

00:42:02,240 --> 00:42:03,920
performance problem that we need to

00:42:03,359 --> 00:42:05,440
solve and

00:42:03,920 --> 00:42:07,280
the way it looks like we're solving it

00:42:05,440 --> 00:42:08,079
is by adding more complexity and more

00:42:07,280 --> 00:42:10,800
logic

00:42:08,079 --> 00:42:12,880
and more server-side components to the

00:42:10,800 --> 00:42:15,680
front-end workflow

00:42:12,880 --> 00:42:16,160
so what solves for that problem do we

00:42:15,680 --> 00:42:19,440
leave it

00:42:16,160 --> 00:42:21,440
do we build on it do we who knows it's

00:42:19,440 --> 00:42:22,960
it's a blurring of the lens that that is

00:42:21,440 --> 00:42:25,119
adding complexity

00:42:22,960 --> 00:42:26,800
and you know i think that will define

00:42:25,119 --> 00:42:28,839
what happens over the next decade is

00:42:26,800 --> 00:42:31,280
how we respond to that complexity as

00:42:28,839 --> 00:42:32,800
developers

00:42:31,280 --> 00:42:34,880
and as someone working on tooling i

00:42:32,800 --> 00:42:36,560
can't help but feel like there is a

00:42:34,880 --> 00:42:37,680
tooling answer here somewhere right this

00:42:36,560 --> 00:42:40,000
idea that

00:42:37,680 --> 00:42:40,720
we have spent the last decade processing

00:42:40,000 --> 00:42:43,119
and bundling

00:42:40,720 --> 00:42:45,280
and and using tooling to solve

00:42:43,119 --> 00:42:47,040
limitations in the platform

00:42:45,280 --> 00:42:48,560
but the platform's grown up and we now

00:42:47,040 --> 00:42:51,119
have a browser that can

00:42:48,560 --> 00:42:52,640
actually run code the way that we think

00:42:51,119 --> 00:42:54,000
about code which is dependencies

00:42:52,640 --> 00:42:56,319
connections

00:42:54,000 --> 00:42:57,760
we have browser primitives that help you

00:42:56,319 --> 00:42:59,680
load an application that looks a lot

00:42:57,760 --> 00:43:01,680
like the application you're building

00:42:59,680 --> 00:43:03,040
so tooling in the next decade should

00:43:01,680 --> 00:43:04,079
hopefully be able to take advantage of

00:43:03,040 --> 00:43:06,160
all these

00:43:04,079 --> 00:43:07,520
features all these primitives and build

00:43:06,160 --> 00:43:09,280
a much simpler

00:43:07,520 --> 00:43:10,560
tooling workflow for the people building

00:43:09,280 --> 00:43:12,160
for the web

00:43:10,560 --> 00:43:14,000
so if that excites you please check out

00:43:12,160 --> 00:43:17,040
snowpack and skypac two projects that

00:43:14,000 --> 00:43:18,640
are looking at this problem today

00:43:17,040 --> 00:43:20,160
that's my talk i hope this has been

00:43:18,640 --> 00:43:22,079
really interesting and exciting

00:43:20,160 --> 00:43:23,599
i hope we don't get killed by attack

00:43:22,079 --> 00:43:24,800
dogs and killer bees and if we're all

00:43:23,599 --> 00:43:26,240
here in a decade

00:43:24,800 --> 00:43:28,880
please you know set a reminder on your

00:43:26,240 --> 00:43:30,880
phone bug me in in 10 years and then let

00:43:28,880 --> 00:43:32,079
me know how i did on this

00:43:30,880 --> 00:43:35,680
but thank you all for your time really

00:43:32,079 --> 00:43:35,680
appreciate it thank you very much

00:43:36,480 --> 00:43:42,560
fantastic fred thank you uh so so much

00:43:40,079 --> 00:43:43,520
um that was an excellent excellent look

00:43:42,560 --> 00:43:46,720
at the future

00:43:43,520 --> 00:43:48,000
thank you uh i'm gonna throw the banner

00:43:46,720 --> 00:43:50,240
back up

00:43:48,000 --> 00:43:51,920
if i can find the link to the thing

00:43:50,240 --> 00:43:54,319
where's the banner here we go

00:43:51,920 --> 00:43:55,200
uh if you have uh questions and you're

00:43:54,319 --> 00:43:56,640
you're uh

00:43:55,200 --> 00:43:59,680
you're watching then please drop them

00:43:56,640 --> 00:44:02,079
into the um the discussions

00:43:59,680 --> 00:44:03,760
um well let me ask a couple that i've

00:44:02,079 --> 00:44:06,880
already queued up

00:44:03,760 --> 00:44:09,680
while you've been talking um

00:44:06,880 --> 00:44:11,119
now one of the questions uh uh

00:44:09,680 --> 00:44:14,800
specifically around sort of

00:44:11,119 --> 00:44:18,319
uh skypack and uh dependencies is um

00:44:14,800 --> 00:44:21,359
that loading uh public code from

00:44:18,319 --> 00:44:23,680
a url sounds scary uh what's

00:44:21,359 --> 00:44:24,560
what's the security story there look

00:44:23,680 --> 00:44:26,319
like and

00:44:24,560 --> 00:44:27,839
i know that there's prior art there when

00:44:26,319 --> 00:44:29,359
it comes to denno

00:44:27,839 --> 00:44:31,200
deno makes an argument that this is

00:44:29,359 --> 00:44:33,040
basically how browsers work

00:44:31,200 --> 00:44:34,640
so if you're okay with how browsers work

00:44:33,040 --> 00:44:38,079
then you should be okay with how

00:44:34,640 --> 00:44:40,800
dena worked um i assume you have

00:44:38,079 --> 00:44:42,560
uh some more insight into that than i do

00:44:40,800 --> 00:44:43,599
yeah it's it's how browsers are already

00:44:42,560 --> 00:44:46,240
working but it's also

00:44:43,599 --> 00:44:48,240
how npm and the npm ecosystem that we

00:44:46,240 --> 00:44:50,319
all use today is already working so

00:44:48,240 --> 00:44:51,599
the idea of loading code from a url

00:44:50,319 --> 00:44:53,839
isn't too different

00:44:51,599 --> 00:44:55,520
than loading code from an npm package

00:44:53,839 --> 00:44:57,440
name what npm is doing is

00:44:55,520 --> 00:44:59,920
turning that package name into a url of

00:44:57,440 --> 00:45:03,440
a tarball that it then downloads for you

00:44:59,920 --> 00:45:05,599
um that doesn't mean that it's it's less

00:45:03,440 --> 00:45:06,480
of a risk or more verse it's just it's a

00:45:05,599 --> 00:45:09,680
model that we all

00:45:06,480 --> 00:45:11,520
already implicitly have bought into um

00:45:09,680 --> 00:45:12,960
but making it much more explicit that

00:45:11,520 --> 00:45:14,800
you have this url

00:45:12,960 --> 00:45:16,000
um especially in production i think that

00:45:14,800 --> 00:45:16,960
is where there's a difference here you

00:45:16,000 --> 00:45:18,000
are now

00:45:16,960 --> 00:45:19,920
especially if you push this to

00:45:18,000 --> 00:45:21,200
production there's a url that you're

00:45:19,920 --> 00:45:23,520
pointing to

00:45:21,200 --> 00:45:24,800
that is loading code in production so i

00:45:23,520 --> 00:45:26,079
think that's where we need a little bit

00:45:24,800 --> 00:45:28,800
of a browser catch-up

00:45:26,079 --> 00:45:30,400
for example the ability to fingerprint

00:45:28,800 --> 00:45:33,040
some of the things that we load from

00:45:30,400 --> 00:45:34,640
a cdn like skypac so that if it changes

00:45:33,040 --> 00:45:36,400
at all the browser is like no way i'm

00:45:34,640 --> 00:45:37,920
not doing this

00:45:36,400 --> 00:45:39,440
but there's also benefits to this model

00:45:37,920 --> 00:45:40,480
where if you think about what you get

00:45:39,440 --> 00:45:42,960
with npm today

00:45:40,480 --> 00:45:44,079
you put in a package name npm downloads

00:45:42,960 --> 00:45:45,839
that packet name and then has

00:45:44,079 --> 00:45:48,160
full scripting capabilities on your

00:45:45,839 --> 00:45:50,160
machine so if you get a typo

00:45:48,160 --> 00:45:51,440
or if one of those packages gets hacked

00:45:50,160 --> 00:45:53,599
you know npm any

00:45:51,440 --> 00:45:55,200
essentially anyone in your dependency

00:45:53,599 --> 00:45:56,480
tree that owns a package has the ability

00:45:55,200 --> 00:45:59,280
to push a script

00:45:56,480 --> 00:46:00,000
up to you that gets run on your machine

00:45:59,280 --> 00:46:02,400
with pretty much

00:46:00,000 --> 00:46:04,400
full access so there's already security

00:46:02,400 --> 00:46:06,079
concerns it's a different security model

00:46:04,400 --> 00:46:07,680
um i think for the most part it's better

00:46:06,079 --> 00:46:10,240
but it's different and there's

00:46:07,680 --> 00:46:12,400
definitely pros and cons

00:46:10,240 --> 00:46:14,640
uh i think sort of there's a related

00:46:12,400 --> 00:46:17,920
follow-up question here which is um

00:46:14,640 --> 00:46:20,079
how how are dependencies managed or

00:46:17,920 --> 00:46:21,760
pinned with something like snowpack and

00:46:20,079 --> 00:46:23,280
um specifically

00:46:21,760 --> 00:46:25,200
uh maybe going forward with the

00:46:23,280 --> 00:46:28,240
streaming imports is it just

00:46:25,200 --> 00:46:29,920
you know we're relying on urls uh and uh

00:46:28,240 --> 00:46:30,880
having sort of versioning tokens in the

00:46:29,920 --> 00:46:32,240
urls and then

00:46:30,880 --> 00:46:34,880
so long as i'm still referring to the

00:46:32,240 --> 00:46:36,800
same url that's the package

00:46:34,880 --> 00:46:37,920
yeah it's a it's an interesting new set

00:46:36,800 --> 00:46:39,599
of you know it's it's like

00:46:37,920 --> 00:46:41,760
we have this whole ecosystem built up

00:46:39,599 --> 00:46:44,079
with npm and package lock files and

00:46:41,760 --> 00:46:45,280
locking things down and then okay throw

00:46:44,079 --> 00:46:48,240
that out what happens next

00:46:45,280 --> 00:46:48,800
um deno takes the stance said no the url

00:46:48,240 --> 00:46:51,440
is

00:46:48,800 --> 00:46:52,880
the lock so the url goes into the code

00:46:51,440 --> 00:46:53,920
and that's essentially what you are

00:46:52,880 --> 00:46:55,760
loading from so they

00:46:53,920 --> 00:46:57,599
kind of push this problem out they say

00:46:55,760 --> 00:46:59,359
we don't want to deal with it

00:46:57,599 --> 00:47:00,880
snowpack tries to answer this a little

00:46:59,359 --> 00:47:02,880
bit better way because i've tried

00:47:00,880 --> 00:47:05,440
writing full import urls in my code and

00:47:02,880 --> 00:47:08,319
i i don't really enjoy it so

00:47:05,440 --> 00:47:09,520
um the convenience of writing a package

00:47:08,319 --> 00:47:10,960
name and getting that that's something

00:47:09,520 --> 00:47:11,920
that i definitely care about as a

00:47:10,960 --> 00:47:13,760
developer

00:47:11,920 --> 00:47:15,760
um snowpack will essentially lock it

00:47:13,760 --> 00:47:17,520
down for you behind the scenes so give

00:47:15,760 --> 00:47:19,520
you something a lot like a package lock

00:47:17,520 --> 00:47:20,880
file that has your versions

00:47:19,520 --> 00:47:22,880
and then the development experience of

00:47:20,880 --> 00:47:24,480
working in snowpack if you want to

00:47:22,880 --> 00:47:25,839
connect to a cdn like skype pack and

00:47:24,480 --> 00:47:27,599
have that streaming imports feature

00:47:25,839 --> 00:47:28,480
where we just load dependencies over the

00:47:27,599 --> 00:47:31,200
wire

00:47:28,480 --> 00:47:32,079
you're essentially using this lock file

00:47:31,200 --> 00:47:34,960
to

00:47:32,079 --> 00:47:35,359
translate that package name into a url

00:47:34,960 --> 00:47:36,960
um

00:47:35,359 --> 00:47:38,400
to the specific version that you want so

00:47:36,960 --> 00:47:40,720
that that doesn't change over time you

00:47:38,400 --> 00:47:42,480
get a really locked down experience

00:47:40,720 --> 00:47:44,000
it's the same model as an npm but

00:47:42,480 --> 00:47:46,319
instead of running an npm install you're

00:47:44,000 --> 00:47:50,000
just getting it as you develop so

00:47:46,319 --> 00:47:53,280
borrowing from a lot of those same ideas

00:47:50,000 --> 00:47:58,160
right um okay

00:47:53,280 --> 00:48:00,559
um i have a question from luciano

00:47:58,160 --> 00:48:01,280
ratamero i think i hopefully i said this

00:48:00,559 --> 00:48:03,280
correctly is

00:48:01,280 --> 00:48:04,880
asking how would i know at a project

00:48:03,280 --> 00:48:06,640
level um

00:48:04,880 --> 00:48:08,079
what are the dependencies and their

00:48:06,640 --> 00:48:10,160
sizes something like

00:48:08,079 --> 00:48:11,920
what webpack bundle tracker does for me

00:48:10,160 --> 00:48:14,480
like how do i sort of get a grip

00:48:11,920 --> 00:48:15,760
especially if i'm not pre-installing it

00:48:14,480 --> 00:48:17,920
and therefore can just walk the

00:48:15,760 --> 00:48:18,240
directory tree and see the file sizes

00:48:17,920 --> 00:48:20,000
and

00:48:18,240 --> 00:48:21,760
and whatnot like how do i get a sense

00:48:20,000 --> 00:48:24,480
for like oh man i'm shipping

00:48:21,760 --> 00:48:25,200
four megabytes of javascript to my front

00:48:24,480 --> 00:48:26,880
ends

00:48:25,200 --> 00:48:28,720
yeah make sure i don't fall into that

00:48:26,880 --> 00:48:30,240
trap yeah right if you have a url that's

00:48:28,720 --> 00:48:32,000
kind of like all you get for free is

00:48:30,240 --> 00:48:33,599
like okay there's code there right

00:48:32,000 --> 00:48:36,000
like that's where that's where react

00:48:33,599 --> 00:48:38,960
lives but oh god it loaded 10 things

00:48:36,000 --> 00:48:40,319
um part of it is really on the cdn to

00:48:38,960 --> 00:48:41,839
surface that information

00:48:40,319 --> 00:48:44,480
so it's it's really why we focused on

00:48:41,839 --> 00:48:45,760
having a catalog to back up skypack

00:48:44,480 --> 00:48:47,760
and putting more and more information

00:48:45,760 --> 00:48:49,040
about a package

00:48:47,760 --> 00:48:51,040
within that catalog so you can kind of

00:48:49,040 --> 00:48:52,240
come to learn about the package

00:48:51,040 --> 00:48:54,079
through the catalog and understand

00:48:52,240 --> 00:48:55,599
what's inside

00:48:54,079 --> 00:48:57,359
the other nice thing about snowpack and

00:48:55,599 --> 00:49:00,000
it's kind of an interplay between

00:48:57,359 --> 00:49:01,359
the registry or the the cdn and the

00:49:00,000 --> 00:49:02,559
tooling that uses it is

00:49:01,359 --> 00:49:03,839
the tooling is kind of has that

00:49:02,559 --> 00:49:05,599
responsibility to tell you in the same

00:49:03,839 --> 00:49:08,640
way that webpack currently tells you

00:49:05,599 --> 00:49:10,319
how big your packages are snowpack the

00:49:08,640 --> 00:49:11,280
the new tool that talks to these things

00:49:10,319 --> 00:49:13,599
it's kind of on

00:49:11,280 --> 00:49:15,040
that tool to tell you so one nice thing

00:49:13,599 --> 00:49:17,040
about snowpack streaming import support

00:49:15,040 --> 00:49:18,800
is at the end of the day your build

00:49:17,040 --> 00:49:20,319
we haven't made the jump to putting urls

00:49:18,800 --> 00:49:22,559
in your final build yet

00:49:20,319 --> 00:49:24,079
um that's still a little bit more

00:49:22,559 --> 00:49:25,760
radical idea you can do it but it's not

00:49:24,079 --> 00:49:26,400
our default our default is to pull the

00:49:25,760 --> 00:49:28,400
code

00:49:26,400 --> 00:49:30,079
and bundle it into your application so

00:49:28,400 --> 00:49:31,280
the end result is that exact same story

00:49:30,079 --> 00:49:33,200
you can see

00:49:31,280 --> 00:49:35,119
via the final result how much code you

00:49:33,200 --> 00:49:35,839
pulled in um what your dependencies look

00:49:35,119 --> 00:49:37,680
like and

00:49:35,839 --> 00:49:39,839
what their performance impact on your

00:49:37,680 --> 00:49:42,079
site is

00:49:39,839 --> 00:49:43,040
right interesting i i like you know i'm

00:49:42,079 --> 00:49:44,800
personally

00:49:43,040 --> 00:49:46,319
wondering if there's going to be in the

00:49:44,800 --> 00:49:49,280
same way that sort of

00:49:46,319 --> 00:49:50,160
the react dev tools made react

00:49:49,280 --> 00:49:53,520
development

00:49:50,160 --> 00:49:55,680
a lot easier by having something that's

00:49:53,520 --> 00:49:57,520
sampling the thing that's actually

00:49:55,680 --> 00:49:59,520
produced in the browser

00:49:57,520 --> 00:50:01,520
right there in my chrome or firefox

00:49:59,520 --> 00:50:03,359
devtools maybe there's something that's

00:50:01,520 --> 00:50:06,319
going to sort of like emerge

00:50:03,359 --> 00:50:07,920
on that side that's less focused on

00:50:06,319 --> 00:50:10,400
here's all the stuff that went over the

00:50:07,920 --> 00:50:13,599
wire and more focused on

00:50:10,400 --> 00:50:15,040
i'm aware of your dependencies and what

00:50:13,599 --> 00:50:16,800
dependencies they're pulling in

00:50:15,040 --> 00:50:18,079
and sort of like another display of that

00:50:16,800 --> 00:50:19,839
same information

00:50:18,079 --> 00:50:21,200
like you know for the developer in the

00:50:19,839 --> 00:50:23,520
browser yeah i

00:50:21,200 --> 00:50:25,839
i mentioned on a slide the webpack

00:50:23,520 --> 00:50:27,599
module federation i think it's called

00:50:25,839 --> 00:50:28,960
deserves a call out because it's not esm

00:50:27,599 --> 00:50:30,480
based but it's

00:50:28,960 --> 00:50:32,160
really it's spiritually very close to

00:50:30,480 --> 00:50:34,000
what esm allows which is

00:50:32,160 --> 00:50:35,599
um i'm blanking on the developer's name

00:50:34,000 --> 00:50:37,520
is working on that i apologize but

00:50:35,599 --> 00:50:39,040
there's a lot of work going into a

00:50:37,520 --> 00:50:40,400
dashboard to manage your dependencies

00:50:39,040 --> 00:50:42,720
and this idea of actually

00:50:40,400 --> 00:50:44,559
being able to kind of hot patch an

00:50:42,720 --> 00:50:46,480
update to a dependency

00:50:44,559 --> 00:50:49,200
from some ui so this idea of connecting

00:50:46,480 --> 00:50:50,640
your dependency graph to a ui dashboard

00:50:49,200 --> 00:50:52,319
um they're starting to take a look at

00:50:50,640 --> 00:50:53,440
that for for that exact reason to have a

00:50:52,319 --> 00:50:54,240
little bit more of a connection to

00:50:53,440 --> 00:50:56,079
what's being run

00:50:54,240 --> 00:50:57,599
and being able to kind of navigate and

00:50:56,079 --> 00:50:59,119
almost live update it

00:50:57,599 --> 00:51:01,680
it's a really interesting idea that we

00:50:59,119 --> 00:51:05,119
even we haven't really dug as much into

00:51:01,680 --> 00:51:08,240
but certainly a compelling story there

00:51:05,119 --> 00:51:08,800
awesome um we still have a couple more

00:51:08,240 --> 00:51:11,520
minutes

00:51:08,800 --> 00:51:12,319
and a couple more questions so maybe

00:51:11,520 --> 00:51:15,440
we'll

00:51:12,319 --> 00:51:18,480
switch gears and ask about

00:51:15,440 --> 00:51:22,160
um uh what about the

00:51:18,480 --> 00:51:25,680
distributed web this is maybe sort of uh

00:51:22,160 --> 00:51:29,200
in parallel or orthogonal to all this um

00:51:25,680 --> 00:51:32,480
development but um all of these uh

00:51:29,200 --> 00:51:34,559
novelties that that you you highlight

00:51:32,480 --> 00:51:36,960
there's still like you know more bricks

00:51:34,559 --> 00:51:39,119
on top of the same building that we've

00:51:36,960 --> 00:51:42,000
been building for the past i don't know

00:51:39,119 --> 00:51:42,000
20 years whatever

00:51:42,079 --> 00:51:46,400
whereas now we're starting to look at

00:51:43,760 --> 00:51:48,480
all these quote-unquote decentralized or

00:51:46,400 --> 00:51:51,839
distributed web technologies things that

00:51:48,480 --> 00:51:54,720
permit local first apps not relying

00:51:51,839 --> 00:51:56,839
on central distribution of your static

00:51:54,720 --> 00:52:01,200
app uh technologies like ipv5

00:51:56,839 --> 00:52:01,200
ipfs and beaker browser and

00:52:01,280 --> 00:52:06,960
before that there's uh uh i'm blanking

00:52:05,119 --> 00:52:11,119
on the thing but it was a dat

00:52:06,960 --> 00:52:14,240
um um uh thinking back a few years

00:52:11,119 --> 00:52:15,680
um where do you see these sort of in

00:52:14,240 --> 00:52:18,800
relationship to

00:52:15,680 --> 00:52:22,000
um this growth of uh of

00:52:18,800 --> 00:52:24,960
of technologies for building

00:52:22,000 --> 00:52:26,480
and using the web itself for delivering

00:52:24,960 --> 00:52:28,640
the dependencies that are needed to

00:52:26,480 --> 00:52:30,880
build

00:52:28,640 --> 00:52:32,559
yeah it's a it's a really interesting

00:52:30,880 --> 00:52:34,319
part of this like

00:52:32,559 --> 00:52:36,559
whether you love blockchain or hate

00:52:34,319 --> 00:52:38,400
blockchain or think it's amazing or

00:52:36,559 --> 00:52:40,400
totally fake like it's essentially a

00:52:38,400 --> 00:52:41,760
funding model for a lot of decentralized

00:52:40,400 --> 00:52:43,920
projects

00:52:41,760 --> 00:52:45,119
so who knows if it'll pan out but

00:52:43,920 --> 00:52:46,960
there's certainly some early

00:52:45,119 --> 00:52:48,240
promises showing in those projects you

00:52:46,960 --> 00:52:50,000
listed of

00:52:48,240 --> 00:52:51,599
using something that has a distributed

00:52:50,000 --> 00:52:54,240
backing um

00:52:51,599 --> 00:52:55,359
to rethink even yeah this idea of a

00:52:54,240 --> 00:52:57,200
server

00:52:55,359 --> 00:52:58,800
especially if we tie that into the story

00:52:57,200 --> 00:53:00,400
i was telling around like this rise of

00:52:58,800 --> 00:53:01,119
the platform and stopping to think about

00:53:00,400 --> 00:53:02,960
like i have

00:53:01,119 --> 00:53:04,160
deployed a server and more just like i

00:53:02,960 --> 00:53:05,920
deployed to this

00:53:04,160 --> 00:53:07,520
company and they've figured it out for

00:53:05,920 --> 00:53:08,800
me um

00:53:07,520 --> 00:53:10,559
what does that look like in a model

00:53:08,800 --> 00:53:12,079
where there doesn't even really need to

00:53:10,559 --> 00:53:12,960
be a company or a server there's just

00:53:12,079 --> 00:53:16,160
this like

00:53:12,960 --> 00:53:16,400
distributed mesh um that you deploy to

00:53:16,160 --> 00:53:18,160
and

00:53:16,400 --> 00:53:20,800
it's just kind of this living breathing

00:53:18,160 --> 00:53:22,480
dynamic thing that that has no owner

00:53:20,800 --> 00:53:23,839
um it's one of those things where it's a

00:53:22,480 --> 00:53:25,200
really compelling story if they can get

00:53:23,839 --> 00:53:26,559
it right and there certainly are a lot

00:53:25,200 --> 00:53:27,520
of people trying to get it right right

00:53:26,559 --> 00:53:30,800
now

00:53:27,520 --> 00:53:32,480
um so there's a project called ips sql

00:53:30,800 --> 00:53:33,599
that uh michael rogers is working on

00:53:32,480 --> 00:53:34,880
which is

00:53:33,599 --> 00:53:36,800
really like the perfect kind of like

00:53:34,880 --> 00:53:38,400
mind-blowing um

00:53:36,800 --> 00:53:40,000
way that this could pan out which is

00:53:38,400 --> 00:53:41,280
still very early but it's this idea of a

00:53:40,000 --> 00:53:44,800
sql database

00:53:41,280 --> 00:53:47,680
backed by ipfs so a sql interface

00:53:44,800 --> 00:53:49,200
for a distributed data structure so

00:53:47,680 --> 00:53:50,400
build your index application on the

00:53:49,200 --> 00:53:52,480
distributed you know

00:53:50,400 --> 00:53:53,440
app or on the distributed you know kind

00:53:52,480 --> 00:53:55,839
of network that is

00:53:53,440 --> 00:53:57,200
ipfs it's a really interesting story

00:53:55,839 --> 00:53:57,599
that's still so early it's still you

00:53:57,200 --> 00:53:58,880
know

00:53:57,599 --> 00:54:00,400
you really have to fiddle with a lot of

00:53:58,880 --> 00:54:01,599
tooling yourself but if you can get it

00:54:00,400 --> 00:54:04,800
working it's

00:54:01,599 --> 00:54:07,280
it's i know it's fascinating yeah

00:54:04,800 --> 00:54:08,480
uh i i know that there's um some

00:54:07,280 --> 00:54:10,640
interesting work coming out of

00:54:08,480 --> 00:54:12,559
um inc and switch i don't know if you've

00:54:10,640 --> 00:54:13,359
seen the uh the cambria white paper

00:54:12,559 --> 00:54:16,960
about

00:54:13,359 --> 00:54:19,440
um the sort of um

00:54:16,960 --> 00:54:21,119
how do you do data migrations when you

00:54:19,440 --> 00:54:22,880
can't count on everyone having the same

00:54:21,119 --> 00:54:24,559
data model

00:54:22,880 --> 00:54:26,160
when when these things are separate and

00:54:24,559 --> 00:54:28,480
how do you how do you build

00:54:26,160 --> 00:54:29,599
uh apps that are going to be robust in

00:54:28,480 --> 00:54:31,200
the face of

00:54:29,599 --> 00:54:32,640
like you know i'm version 44 your

00:54:31,200 --> 00:54:35,119
version 42

00:54:32,640 --> 00:54:35,680
like it i don't want to like split the

00:54:35,119 --> 00:54:37,200
network

00:54:35,680 --> 00:54:38,799
and make it so that like i can only

00:54:37,200 --> 00:54:42,160
speak with 44 and up and

00:54:38,799 --> 00:54:43,280
right talk with me um right so it's a

00:54:42,160 --> 00:54:45,200
very different model where

00:54:43,280 --> 00:54:46,559
you like almost as a user of a site like

00:54:45,200 --> 00:54:48,960
that have your own

00:54:46,559 --> 00:54:50,480
database that then talks to the main

00:54:48,960 --> 00:54:52,000
database and like you say like

00:54:50,480 --> 00:54:53,760
you're much more of a client syncing

00:54:52,000 --> 00:54:56,240
with a hub

00:54:53,760 --> 00:54:58,480
versus like okay stream this website

00:54:56,240 --> 00:55:00,400
down to me stream everything down to me

00:54:58,480 --> 00:55:01,920
um yeah there's really it's it's a very

00:55:00,400 --> 00:55:04,960
different way of thinking that even i am

00:55:01,920 --> 00:55:08,640
still you know not an expert on at all

00:55:04,960 --> 00:55:09,760
um i'm looking for more questions that

00:55:08,640 --> 00:55:11,359
have appeared in the

00:55:09,760 --> 00:55:12,480
that there was one question that's

00:55:11,359 --> 00:55:14,319
related to this how do you think about

00:55:12,480 --> 00:55:16,240
local first functionality

00:55:14,319 --> 00:55:18,480
fitting into these architectural changes

00:55:16,240 --> 00:55:20,720
how can we support user-centric

00:55:18,480 --> 00:55:23,119
local first models while moving towards

00:55:20,720 --> 00:55:26,319
the ux benefits of the account oriented

00:55:23,119 --> 00:55:28,000
approach that you discussed yeah it's

00:55:26,319 --> 00:55:29,520
i think that's part of what needs to be

00:55:28,000 --> 00:55:31,440
decided you know the browser

00:55:29,520 --> 00:55:32,720
ecosystem especially google really cares

00:55:31,440 --> 00:55:35,200
about this you know i think

00:55:32,720 --> 00:55:37,599
google as a company sees this as like a

00:55:35,200 --> 00:55:40,319
more philosophical battle of like web

00:55:37,599 --> 00:55:41,680
versus native right um so i guess apple

00:55:40,319 --> 00:55:42,240
would be the other side of that story

00:55:41,680 --> 00:55:46,160
like

00:55:42,240 --> 00:55:48,799
having the web browser be a first class

00:55:46,160 --> 00:55:50,160
application platform um because it

00:55:48,799 --> 00:55:51,599
allows you to connect to this kind of

00:55:50,160 --> 00:55:52,799
way of thinking which then as a company

00:55:51,599 --> 00:55:55,040
benefits them so their

00:55:52,799 --> 00:55:56,480
incentives are certainly you know um you

00:55:55,040 --> 00:55:58,000
know it's not just a moral

00:55:56,480 --> 00:56:00,000
win for them it's also a financial one

00:55:58,000 --> 00:56:02,559
but having that

00:56:00,000 --> 00:56:04,480
company backing the web in that way

00:56:02,559 --> 00:56:07,280
leads to a lot of interesting features

00:56:04,480 --> 00:56:08,400
around the web platform as a kind of

00:56:07,280 --> 00:56:12,079
local native

00:56:08,400 --> 00:56:13,760
app experience so houdini is a project a

00:56:12,079 --> 00:56:16,880
lot of these ideas come out of on

00:56:13,760 --> 00:56:18,480
on the web end a file system api for

00:56:16,880 --> 00:56:20,240
actually reaching into the file system

00:56:18,480 --> 00:56:22,240
on your computer

00:56:20,240 --> 00:56:23,599
um even chromebooks i think are kind of

00:56:22,240 --> 00:56:25,200
an interesting part of this or they kind

00:56:23,599 --> 00:56:27,440
of are pushing that idea of

00:56:25,200 --> 00:56:29,440
of a low power device that you log into

00:56:27,440 --> 00:56:32,000
via an account

00:56:29,440 --> 00:56:33,680
um all the pieces are kind of mixing

00:56:32,000 --> 00:56:35,200
around and melding around so

00:56:33,680 --> 00:56:37,599
it feels like we're there's a vision

00:56:35,200 --> 00:56:39,839
there somewhere

00:56:37,599 --> 00:56:40,880
yeah um i mean it's definitely something

00:56:39,839 --> 00:56:43,760
that uh

00:56:40,880 --> 00:56:45,119
that um my team is thinking about a lot

00:56:43,760 --> 00:56:46,319
in the context of something like code

00:56:45,119 --> 00:56:50,400
spaces where

00:56:46,319 --> 00:56:51,760
um if i can have a development

00:56:50,400 --> 00:56:55,119
environment that is

00:56:51,760 --> 00:56:57,040
purely cloud-based i can now

00:56:55,119 --> 00:56:58,960
consider swapping this incredibly

00:56:57,040 --> 00:57:01,680
expensive macbook for

00:56:58,960 --> 00:57:03,119
some 500 chromebook and still have a

00:57:01,680 --> 00:57:06,240
development experience

00:57:03,119 --> 00:57:06,960
but um the problem with this fantasy is

00:57:06,240 --> 00:57:09,839
ultimately

00:57:06,960 --> 00:57:11,680
eventually i need to be able to operate

00:57:09,839 --> 00:57:13,200
on stuff on my local file system and

00:57:11,680 --> 00:57:14,960
like eventually at some point i run into

00:57:13,200 --> 00:57:15,280
a brick wall and then i miss my macbook

00:57:14,960 --> 00:57:17,200
and

00:57:15,280 --> 00:57:18,799
so like it's not yet it's not quite

00:57:17,200 --> 00:57:20,000
there yeah right there's always like

00:57:18,799 --> 00:57:20,559
there's always one more thing with

00:57:20,000 --> 00:57:22,000
that's

00:57:20,559 --> 00:57:23,359
like chromebooks are helping a lot of

00:57:22,000 --> 00:57:25,119
people but developers are like there's

00:57:23,359 --> 00:57:26,480
always one more thing for a developer

00:57:25,119 --> 00:57:28,000
i've tried a couple of times to move

00:57:26,480 --> 00:57:28,319
over to an ipad for coding and there's

00:57:28,000 --> 00:57:31,520
just

00:57:28,319 --> 00:57:32,799
there's always that one thing um

00:57:31,520 --> 00:57:35,280
eventually there would hopefully not be

00:57:32,799 --> 00:57:38,640
one more thing but for now

00:57:35,280 --> 00:57:39,280
okay um oh we have time for one more

00:57:38,640 --> 00:57:42,319
question

00:57:39,280 --> 00:57:43,119
um uh so let me make it a really

00:57:42,319 --> 00:57:46,559
difficult one

00:57:43,119 --> 00:57:49,680
oh great and on an incredibly low note

00:57:46,559 --> 00:57:49,680
and then and like

00:57:50,400 --> 00:57:54,720
so uh it's it's clear you know you

00:57:53,040 --> 00:57:57,760
touched on wasm

00:57:54,720 --> 00:57:59,520
as sort of a path for perf

00:57:57,760 --> 00:58:01,119
sensitive code you know i want to

00:57:59,520 --> 00:58:03,920
process a bunch of data

00:58:01,119 --> 00:58:05,359
or imagery or do machine learning or

00:58:03,920 --> 00:58:07,200
whatever all these things are

00:58:05,359 --> 00:58:09,119
sort of great great targets anything

00:58:07,200 --> 00:58:09,920
that can happen sort of outside the main

00:58:09,119 --> 00:58:13,040
thread

00:58:09,920 --> 00:58:13,599
um wasm offers a lot of opportunities

00:58:13,040 --> 00:58:17,040
for

00:58:13,599 --> 00:58:19,280
uh performance optimization

00:58:17,040 --> 00:58:20,960
what's less clear to me is is where the

00:58:19,280 --> 00:58:22,160
interaction point with regular code is

00:58:20,960 --> 00:58:24,960
going to be are we going to see

00:58:22,160 --> 00:58:26,799
sort of a mirror of like the last 10

00:58:24,960 --> 00:58:28,799
years of javascript happen again

00:58:26,799 --> 00:58:30,079
with wasm that in the beginning it's

00:58:28,799 --> 00:58:32,000
going to be ill-defined and i'm going to

00:58:30,079 --> 00:58:34,960
be leaning on like a lot of tooling

00:58:32,000 --> 00:58:36,079
to make my life like to give me an

00:58:34,960 --> 00:58:38,319
experience

00:58:36,079 --> 00:58:40,640
while like you know sort of the the

00:58:38,319 --> 00:58:42,160
primitives catch up to the point that

00:58:40,640 --> 00:58:44,319
you know we no longer need like you know

00:58:42,160 --> 00:58:46,079
layers above or polyfills

00:58:44,319 --> 00:58:47,839
are we eventually going to be compiling

00:58:46,079 --> 00:58:49,280
stuff for the web like we compile other

00:58:47,839 --> 00:58:51,839
software like you know i have a tool

00:58:49,280 --> 00:58:53,200
chain and it spits out a binary and i

00:58:51,839 --> 00:58:54,480
like you know put the binary up

00:58:53,200 --> 00:58:57,599
somewhere and

00:58:54,480 --> 00:58:59,680
like i invoke it um like what

00:58:57,599 --> 00:59:00,960
what's your sort of like uh your sense

00:58:59,680 --> 00:59:02,799
for how

00:59:00,960 --> 00:59:04,000
uh how that's going to feel like over

00:59:02,799 --> 00:59:06,160
the coming years is sort of this

00:59:04,000 --> 00:59:07,359
becomes a little bit more mainstream

00:59:06,160 --> 00:59:07,920
yeah that's i mean that's a great

00:59:07,359 --> 00:59:10,240
question

00:59:07,920 --> 00:59:11,680
um i i think that what i always get

00:59:10,240 --> 00:59:13,359
stuck on with wasm is that

00:59:11,680 --> 00:59:14,799
most front-end developers aren't asking

00:59:13,359 --> 00:59:16,000
for wasm um

00:59:14,799 --> 00:59:17,599
what they're asking for is like the

00:59:16,000 --> 00:59:18,559
features of wasm but then if you're like

00:59:17,599 --> 00:59:19,760
oh great just

00:59:18,559 --> 00:59:21,520
throw out everything you know and try

00:59:19,760 --> 00:59:22,480
something new it's a little bit of a

00:59:21,520 --> 00:59:24,000
harder story

00:59:22,480 --> 00:59:25,119
um and that even assumes that there are

00:59:24,000 --> 00:59:26,880
no you know that the technical

00:59:25,119 --> 00:59:29,760
limitations match up with

00:59:26,880 --> 00:59:30,480
what they're used to i think what we've

00:59:29,760 --> 00:59:32,960
seen

00:59:30,480 --> 00:59:34,640
a lot of success in up to this point is

00:59:32,960 --> 00:59:36,480
i have a really specific

00:59:34,640 --> 00:59:38,079
need and wasm solves it right so it's

00:59:36,480 --> 00:59:39,359
like i integrate wisely into my

00:59:38,079 --> 00:59:41,520
application

00:59:39,359 --> 00:59:43,280
um i think that will continue to happen

00:59:41,520 --> 00:59:45,680
that that makes so much sense

00:59:43,280 --> 00:59:47,760
the kind of like white whale of a lot of

00:59:45,680 --> 00:59:49,119
front-end thinking is this idea of what

00:59:47,760 --> 00:59:51,520
if we can move

00:59:49,119 --> 00:59:53,280
the application logic off of the main

00:59:51,520 --> 00:59:55,440
thread entirely so what if we could

00:59:53,280 --> 00:59:57,040
have your rendering just kind of be like

00:59:55,440 --> 00:59:59,040
priority number one on the browser it's

00:59:57,040 --> 01:00:00,799
its own thread it never gets blocked

00:59:59,040 --> 01:00:02,319
it's always just rendering and then like

01:00:00,799 --> 01:00:03,760
the application logic

01:00:02,319 --> 01:00:06,720
happens somewhere else in a different

01:00:03,760 --> 01:00:09,760
thread like react concurrent mode is is

01:00:06,720 --> 01:00:11,599
kind of an attempt at that idea of of

01:00:09,760 --> 01:00:12,960
at least you know not blocking when you

01:00:11,599 --> 01:00:14,640
run code

01:00:12,960 --> 01:00:16,640
um there could be a way that that like

01:00:14,640 --> 01:00:17,920
wasm solves for that if you think it was

01:00:16,640 --> 01:00:18,559
i'm saying it runs off of the main

01:00:17,920 --> 01:00:20,480
thread and

01:00:18,559 --> 01:00:21,920
kind of gets its own worker and maybe

01:00:20,480 --> 01:00:24,000
that's the communication between the two

01:00:21,920 --> 01:00:26,559
if was and code could

01:00:24,000 --> 01:00:27,839
output instructions for a renderer it's

01:00:26,559 --> 01:00:29,200
it's less clear to me how that could all

01:00:27,839 --> 01:00:31,200
fit together but

01:00:29,200 --> 01:00:32,400
in terms of okay what is the need that

01:00:31,200 --> 01:00:34,799
this could solve

01:00:32,400 --> 01:00:36,799
there is this need for especially as

01:00:34,799 --> 01:00:37,920
applications get more complex and user

01:00:36,799 --> 01:00:39,760
expectations

01:00:37,920 --> 01:00:42,079
rise and rise and rise for more dynamic

01:00:39,760 --> 01:00:43,599
more native feeling applications built

01:00:42,079 --> 01:00:46,000
with the web

01:00:43,599 --> 01:00:47,119
is there some way to power it with

01:00:46,000 --> 01:00:48,559
something that isn't a traditional

01:00:47,119 --> 01:00:49,599
javascript application that all shares

01:00:48,559 --> 01:00:51,359
one thread and

01:00:49,599 --> 01:00:54,640
power it with something else that then

01:00:51,359 --> 01:00:57,440
talks to a rendering engine

01:00:54,640 --> 01:00:59,040
do you think that we're gonna see um

01:00:57,440 --> 01:01:00,880
that what's like impeding adoption of

01:00:59,040 --> 01:01:02,960
things like wasm right now or just

01:01:00,880 --> 01:01:03,920
um is it just like developer experience

01:01:02,960 --> 01:01:06,160
things like

01:01:03,920 --> 01:01:07,920
you know if wasm was easier to target

01:01:06,160 --> 01:01:11,599
easier to build for

01:01:07,920 --> 01:01:13,599
um even using languages that i

01:01:11,599 --> 01:01:15,040
as a web developer quote unquote already

01:01:13,599 --> 01:01:16,720
know like you know i don't need to reach

01:01:15,040 --> 01:01:19,440
for rust to target wow

01:01:16,720 --> 01:01:20,079
write typescript and target wasm but

01:01:19,440 --> 01:01:22,079
it's like

01:01:20,079 --> 01:01:23,680
so complex and whatever and like i don't

01:01:22,079 --> 01:01:25,440
you know as a web developer like i don't

01:01:23,680 --> 01:01:26,160
know it off the top of my head it's not

01:01:25,440 --> 01:01:27,200
like

01:01:26,160 --> 01:01:28,880
everything i've done before and

01:01:27,200 --> 01:01:30,319
therefore i don't reach for it but if i

01:01:28,880 --> 01:01:32,000
made it easier

01:01:30,319 --> 01:01:33,599
then it would see more adoption and

01:01:32,000 --> 01:01:35,200
usage um

01:01:33,599 --> 01:01:36,960
or is it just that it's like the tech

01:01:35,200 --> 01:01:38,000
isn't ready yet for like widespread

01:01:36,960 --> 01:01:39,040
adoption like where do you

01:01:38,000 --> 01:01:41,200
where do you think are sort of like the

01:01:39,040 --> 01:01:42,720
biggest pain points there yeah i think

01:01:41,200 --> 01:01:44,640
right now it's a little bit of

01:01:42,720 --> 01:01:45,760
everything right so it is a more

01:01:44,640 --> 01:01:47,920
technical lift

01:01:45,760 --> 01:01:48,960
to integrate wisem into your site it's

01:01:47,920 --> 01:01:50,240
there's just you know there's a whole

01:01:48,960 --> 01:01:52,079
suite of javascript tooling about

01:01:50,240 --> 01:01:54,160
building html css and javascript

01:01:52,079 --> 01:01:55,359
and then not as much for someone

01:01:54,160 --> 01:01:57,359
building for wasm

01:01:55,359 --> 01:01:58,559
and kind of every community as far as i

01:01:57,359 --> 01:02:00,240
can tell kind of needs to work on their

01:01:58,559 --> 01:02:02,000
own like the go community needs

01:02:00,240 --> 01:02:03,359
their compiler the rest communities

01:02:02,000 --> 01:02:04,640
their compiler so

01:02:03,359 --> 01:02:06,640
there's a little bit less shared work

01:02:04,640 --> 01:02:08,319
than you than you would hope for and

01:02:06,640 --> 01:02:10,160
just more of a technical lift given that

01:02:08,319 --> 01:02:11,920
it's so new

01:02:10,160 --> 01:02:14,000
um i think there's a size component as

01:02:11,920 --> 01:02:15,039
well so a lot of was i'm thinking or a

01:02:14,000 --> 01:02:16,559
lot of you know compiled language

01:02:15,039 --> 01:02:18,000
thinking is okay

01:02:16,559 --> 01:02:20,160
you see this in gaming a lot when people

01:02:18,000 --> 01:02:21,599
try and build gaming for the web

01:02:20,160 --> 01:02:24,400
and trying to use what has them for this

01:02:21,599 --> 01:02:25,839
it's this idea of a big compiled

01:02:24,400 --> 01:02:27,839
you know it's it's bundle in essentially

01:02:25,839 --> 01:02:29,599
this compiled artifact that gets shipped

01:02:27,839 --> 01:02:31,680
to the browser it's it's pretty heavy

01:02:29,599 --> 01:02:33,280
right if it has all these assets and

01:02:31,680 --> 01:02:35,200
and um and code that's been compiled

01:02:33,280 --> 01:02:36,960
it's just the performance story is

01:02:35,200 --> 01:02:39,520
isn't really built on the same one that

01:02:36,960 --> 01:02:41,200
the web has refined for 30 years

01:02:39,520 --> 01:02:42,640
um so there's a little bit of a

01:02:41,200 --> 01:02:43,599
technical story but then again i just

01:02:42,640 --> 01:02:45,839
think that there's not

01:02:43,599 --> 01:02:46,799
as many people asking for it really in

01:02:45,839 --> 01:02:49,440
their day-to-day

01:02:46,799 --> 01:02:50,319
i think they want the idea of a faster

01:02:49,440 --> 01:02:53,280
site and

01:02:50,319 --> 01:02:55,280
i think everyone will love the idea of

01:02:53,280 --> 01:02:56,880
yeah better performance but

01:02:55,280 --> 01:02:58,400
no one wants to drop everything they

01:02:56,880 --> 01:02:59,760
know so the user audience kind of

01:02:58,400 --> 01:03:01,359
doesn't match up the person who loves

01:02:59,760 --> 01:03:02,880
wasm

01:03:01,359 --> 01:03:05,039
it's not really the traditional web

01:03:02,880 --> 01:03:06,720
developer at least until they can create

01:03:05,039 --> 01:03:08,799
a story that is so compelling i would

01:03:06,720 --> 01:03:12,880
okay i will learn how this works because

01:03:08,799 --> 01:03:16,720
i want that thing whatever that thing is

01:03:12,880 --> 01:03:17,039
okay fantastic uh fred thank you so much

01:03:16,720 --> 01:03:18,880
for

01:03:17,039 --> 01:03:21,039
for coming on and and sharing your

01:03:18,880 --> 01:03:23,680
wisdom with us that was a fantastic talk

01:03:21,039 --> 01:03:25,760
um i'll remind everybody that the uh

01:03:23,680 --> 01:03:27,200
discussion thread that i linked earlier

01:03:25,760 --> 01:03:29,280
is going to stay open and if people want

01:03:27,200 --> 01:03:30,079
to keep um engaging or answering

01:03:29,280 --> 01:03:32,960
questions there

01:03:30,079 --> 01:03:33,680
um uh absolutely please do we're happy

01:03:32,960 --> 01:03:35,760
to

01:03:33,680 --> 01:03:37,680
um uh sort of foster a community of

01:03:35,760 --> 01:03:41,359
people talking about these things

01:03:37,680 --> 01:03:42,160
um um fred from all of us at github

01:03:41,359 --> 01:03:45,280
thank you so much

01:03:42,160 --> 01:03:59,839
and everybody have a lovely day

01:03:45,280 --> 01:03:59,839
thank you

01:04:01,359 --> 01:04:03,440

YouTube URL: https://www.youtube.com/watch?v=pJy8V5b5588


