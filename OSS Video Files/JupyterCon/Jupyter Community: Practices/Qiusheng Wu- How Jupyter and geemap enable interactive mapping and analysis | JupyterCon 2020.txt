Title: Qiusheng Wu- How Jupyter and geemap enable interactive mapping and analysis | JupyterCon 2020
Publication date: 2020-11-02
Playlist: Jupyter Community: Practices
Description: 
	Brief Summary
geemap is a Python package for interactive mapping and analysis of large-scale geospatial datasets hosted in the Google Earth Engine cloud computing platform. This presentation highlights the use of geemap, ipyleaflet, and Jupyter widgets for interactive mapping and analysis of Earth Engine datasets, and demonstrates how to build and deploy interactive apps using Jupyter and VoilÃ .

Outline
The Earth is constantly changing, which brings profound challenges for the environment and human society. To address these challenges at the global scale, the Earth science community is heavily relying on geospatial datasets acquired from satellite, aerial, and mobile sensors. The explosive growth in geospatial datasets during the past decades is overwhelming the Earth science communityâ€™s capacity for storage, analysis, and visualization.

The advent of the Google Earth Engine (GEE) cloud computing platform makes it possible to access, manipulate, and analyze large volumes of geospatial datasets on-the-fly. During the past few years, GEE has become very popular in the geospatial community and it has empowered numerous Earth science applications at local, regional, and global scales. GEE provides both JavaScript and Python APIs for making computational requests to the Earth Engine servers. However, compared with the comprehensive documentation and interactive IDE (i.e., GEE JavaScript Code Editor) of the GEE JavaScript API, the GEE Python API has relatively little documentation and limited functionality for visualizing datasets and computational results interactively. The geemap Python package was created to fill this gap. It is built upon ipyleaflet and ipywidgets, and enables users to analyze and visualize Earth Engine datasets interactively within a Jupyter-based environment. Geemap users can utilize the Python ecosystem of diverse libraries and tools to explore Google Earth Engine and perform planetary-scale geospatial analysis. Geemap was originally created to support teaching university classes. Since its initial release on GitHub, geemap has been widely used by the Earth Engine community for scientific research.

This presentation highlights the use of geemap and the Jupyter ecosystem for interactive mapping and analysis of large-scale geospatial datasets, and demonstrates how to build and deploy interactive apps using Jupyter and VoilÃ .

This presentation is intended for scientific programmers, data scientists, data journalists, geospatial analysts, and concerned citizens of Earth. The attendees are expected to have a basic understanding of Python and the Jupyter ecosystem. Familiarity with Earth science and geospatial datasets is useful but not required.

Outline:

Motivation: Overview of Earth science data analysis workflows, needed tools, and current issues.
How to access Earth science data: Google Earth Engine
Jupyter components relevant for geospatial data analysis; 3.1. mapping (ipyleaflet); 3.2. time series visualization (bqplot); 3.3. data presentation (ipytree, ipywidgets)
Example usage; 4.1. data analysis in JupyterLab / Colab; 4.2. building and deploying interactive apps with VoilÃ 
Installation options
Relevant resources:

Google Earth Engine: https://earthengine.google.com/
Geemap: https://github.com/giswqs/geemap
Tutorials: https://github.com/giswqs/geemap/tree/master/examples

----

JupyterCon brings together data scientists, business analysts, researchers, educators, developers, core Project contributors, and tool creators for in-depth training, insightful keynotes, networking, and practical talks exploring the Project Jupyter ecosystem.

https://jupytercon.com/ 

JupyterCon is possible thanks to the generous support of our sponsors, and the labor of many volunteer organizers. 

https://jupytercon.com/sponsors/ 

https://jupytercon.com/about/#Organizing%20Committee
Captions: 
	00:00:04,000 --> 00:00:06,879
hello

00:00:04,720 --> 00:00:08,639
welcome to our presentation my name is

00:00:06,879 --> 00:00:09,679
yusun wu i'm from the university of

00:00:08,639 --> 00:00:12,080
tennessee

00:00:09,679 --> 00:00:12,799
my co-presenter is tyler erickson from

00:00:12,080 --> 00:00:15,200
google

00:00:12,799 --> 00:00:16,640
hello i'm tyler erickson a developer

00:00:15,200 --> 00:00:18,000
advocate working on the earth engine

00:00:16,640 --> 00:00:19,520
project at google

00:00:18,000 --> 00:00:21,680
in this presentation we are going to

00:00:19,520 --> 00:00:24,080
talk about how jupiter and gmap

00:00:21,680 --> 00:00:26,800
enable interactive mapping and analysis

00:00:24,080 --> 00:00:29,039
of large scale geospatial data sets

00:00:26,800 --> 00:00:30,400
the slides of our presentation can be

00:00:29,039 --> 00:00:31,000
accessed through the link here at the

00:00:30,400 --> 00:00:34,719
bottom

00:00:31,000 --> 00:00:37,120
gsharp.org jupitercon

00:00:34,719 --> 00:00:38,960
here is the outline of our presentation

00:00:37,120 --> 00:00:41,040
first i will let tyler talk about the

00:00:38,960 --> 00:00:41,920
motivation and need for the ge map

00:00:41,040 --> 00:00:44,559
package

00:00:41,920 --> 00:00:46,640
and then i will introduce gmap and how

00:00:44,559 --> 00:00:49,920
to install and get started with

00:00:46,640 --> 00:00:51,520
the package and then i will

00:00:49,920 --> 00:00:54,239
demonstrate some of the api

00:00:51,520 --> 00:00:57,360
documentation and video tutorials and

00:00:54,239 --> 00:00:59,760
key features of the package lastly i

00:00:57,360 --> 00:01:00,239
will show you some additional resources

00:00:59,760 --> 00:01:03,520
and

00:01:00,239 --> 00:01:05,760
how you can contribute to gmap on the

00:01:03,520 --> 00:01:08,560
right here shows you in an animation of

00:01:05,760 --> 00:01:09,600
service water dynamics using the landsat

00:01:08,560 --> 00:01:11,680
satellite data

00:01:09,600 --> 00:01:13,520
for the past few decades and this is

00:01:11,680 --> 00:01:15,759
something you can easily create

00:01:13,520 --> 00:01:17,520
using the gmap package without writing

00:01:15,759 --> 00:01:19,439
any line of code

00:01:17,520 --> 00:01:21,600
if you want you can try out the web app

00:01:19,439 --> 00:01:24,640
here by clicking the link

00:01:21,600 --> 00:01:27,360
and then you can navigate to

00:01:24,640 --> 00:01:28,159
any location of your interest and draw a

00:01:27,360 --> 00:01:29,920
rectangle

00:01:28,159 --> 00:01:31,600
and then you will be able to create an

00:01:29,920 --> 00:01:34,000
animation like this

00:01:31,600 --> 00:01:35,200
for any location and to be using social

00:01:34,000 --> 00:01:37,520
media or

00:01:35,200 --> 00:01:39,439
on your website you can also check out

00:01:37,520 --> 00:01:43,600
the noble example to see the source code

00:01:39,439 --> 00:01:43,600
behind how this app was created

00:01:44,320 --> 00:01:48,960
so next i will then title talk about the

00:01:46,560 --> 00:01:49,920
motivation of the gmat package

00:01:48,960 --> 00:01:52,479
and i'm going to give a little

00:01:49,920 --> 00:01:54,479
motivation for the gee package and why i

00:01:52,479 --> 00:01:57,520
think that it's so important

00:01:54,479 --> 00:01:58,960
to understand the need for ge map you

00:01:57,520 --> 00:02:00,079
first need to understand what earth

00:01:58,960 --> 00:02:02,399
engine is

00:02:00,079 --> 00:02:03,920
earth engine is google's cloud platform

00:02:02,399 --> 00:02:06,479
for earth science data

00:02:03,920 --> 00:02:07,759
analysis it runs in google's cloud

00:02:06,479 --> 00:02:09,440
infrastructure and gives you a

00:02:07,759 --> 00:02:12,080
browser-based access to

00:02:09,440 --> 00:02:12,879
remote sensing data climate and weather

00:02:12,080 --> 00:02:16,360
data

00:02:12,879 --> 00:02:17,520
dem files etc the home page is at

00:02:16,360 --> 00:02:19,280
earthengine.google.com

00:02:17,520 --> 00:02:21,599
and you can also find the developer docs

00:02:19,280 --> 00:02:22,000
for the api at developers.google.com

00:02:21,599 --> 00:02:24,400
earth

00:02:22,000 --> 00:02:26,319
engine what's important to also

00:02:24,400 --> 00:02:28,160
understand is that earth engine

00:02:26,319 --> 00:02:30,080
and google earth are two very different

00:02:28,160 --> 00:02:31,599
products even though they work together

00:02:30,080 --> 00:02:33,599
google earth is what most people are

00:02:31,599 --> 00:02:35,040
familiar with it's the 3d globe that

00:02:33,599 --> 00:02:36,800
allows you to zoom to anywhere in the

00:02:35,040 --> 00:02:39,680
world and zoom into your own house

00:02:36,800 --> 00:02:41,120
etc but it's mostly a visualization tool

00:02:39,680 --> 00:02:43,920
earth engine on the other hand

00:02:41,120 --> 00:02:45,200
is a geospatial analysis tool it's used

00:02:43,920 --> 00:02:46,959
to generate data

00:02:45,200 --> 00:02:49,280
earth engine is composed of two

00:02:46,959 --> 00:02:51,680
important parts a very large

00:02:49,280 --> 00:02:53,120
data catalog of earth science data and a

00:02:51,680 --> 00:02:55,360
computational platform

00:02:53,120 --> 00:02:57,040
that allows you to apply algorithms to

00:02:55,360 --> 00:02:58,080
that earth science data to get results

00:02:57,040 --> 00:03:00,319
that you need

00:02:58,080 --> 00:03:02,480
this functionality is available through

00:03:00,319 --> 00:03:04,560
a variety of apis including python

00:03:02,480 --> 00:03:06,319
javascript and a rest api

00:03:04,560 --> 00:03:09,280
the earth engine data catalog is

00:03:06,319 --> 00:03:11,040
extensive it contains currently over 30

00:03:09,280 --> 00:03:13,200
petabytes of data and we're adding about

00:03:11,040 --> 00:03:13,760
one petabyte of new data every month to

00:03:13,200 --> 00:03:16,080
it

00:03:13,760 --> 00:03:17,760
the largest data sets in the catalog are

00:03:16,080 --> 00:03:20,080
from satellite imagery

00:03:17,760 --> 00:03:21,360
from the landsat and sentinel programs

00:03:20,080 --> 00:03:23,680
but we also have

00:03:21,360 --> 00:03:25,519
vector data in here terrain and land

00:03:23,680 --> 00:03:27,440
cover weather and climate data

00:03:25,519 --> 00:03:30,000
a common workflow in earth engine is to

00:03:27,440 --> 00:03:31,920
start with a large collection of images

00:03:30,000 --> 00:03:33,440
develop an algorithm that can be mapped

00:03:31,920 --> 00:03:35,680
over all the images

00:03:33,440 --> 00:03:37,200
apply that algorithm and then reduce all

00:03:35,680 --> 00:03:40,959
the resulting images

00:03:37,200 --> 00:03:43,040
to a produce a single image or a table

00:03:40,959 --> 00:03:44,480
or some other output one way you can

00:03:43,040 --> 00:03:47,280
think about earth engine

00:03:44,480 --> 00:03:48,080
conceptually is think of it as a large

00:03:47,280 --> 00:03:50,000
funnel

00:03:48,080 --> 00:03:51,280
that actually takes lots of input data

00:03:50,000 --> 00:03:54,400
from satellite data

00:03:51,280 --> 00:03:54,879
weather data etc and then it filters it

00:03:54,400 --> 00:03:56,560
down

00:03:54,879 --> 00:03:58,159
reduces it to something that's quite a

00:03:56,560 --> 00:04:01,599
bit smaller like a chart

00:03:58,159 --> 00:04:03,360
a map tile a table etc and this filter

00:04:01,599 --> 00:04:04,400
will have a series of knobs that a user

00:04:03,360 --> 00:04:07,920
might want to control

00:04:04,400 --> 00:04:09,680
like what location what time etc

00:04:07,920 --> 00:04:12,799
but the key concept of this is that

00:04:09,680 --> 00:04:14,080
there's a large large reduction of data

00:04:12,799 --> 00:04:16,560
and we even have this concept

00:04:14,080 --> 00:04:18,560
encapsulated in the ee reducer

00:04:16,560 --> 00:04:20,720
objects within earth engine which of

00:04:18,560 --> 00:04:22,079
this of at this point there are about 50

00:04:20,720 --> 00:04:24,080
different ways to reduce

00:04:22,079 --> 00:04:26,560
collections of objects in earth engine

00:04:24,080 --> 00:04:28,880
down as you can see over here on the api

00:04:26,560 --> 00:04:30,240
reference docs on the right so for

00:04:28,880 --> 00:04:32,639
example for ee

00:04:30,240 --> 00:04:33,280
reducer percentile you can specify a

00:04:32,639 --> 00:04:35,759
collection

00:04:33,280 --> 00:04:36,479
and then a list of percentiles like

00:04:35,759 --> 00:04:39,280
fifth

00:04:36,479 --> 00:04:42,320
percent 25th percent 50th percent and

00:04:39,280 --> 00:04:44,000
then you will basically reduce all the

00:04:42,320 --> 00:04:45,840
images in that collection

00:04:44,000 --> 00:04:47,520
but another important point to keep

00:04:45,840 --> 00:04:50,160
track of is that there are

00:04:47,520 --> 00:04:51,840
many many knobs potentially for these

00:04:50,160 --> 00:04:52,800
algorithms that are being run inside of

00:04:51,840 --> 00:04:54,479
earth engine

00:04:52,800 --> 00:04:56,000
and you need a good way for your user

00:04:54,479 --> 00:04:57,520
actually to specify

00:04:56,000 --> 00:05:00,479
the values for that knob so you can

00:04:57,520 --> 00:05:02,479
control how the data is being reduced

00:05:00,479 --> 00:05:04,080
now the earth engine team has been

00:05:02,479 --> 00:05:06,000
maintaining a

00:05:04,080 --> 00:05:07,440
browser-based development environment

00:05:06,000 --> 00:05:08,240
that we call the code editor or

00:05:07,440 --> 00:05:11,120
playground

00:05:08,240 --> 00:05:12,240
since 2012. and it does a lot of things

00:05:11,120 --> 00:05:13,919
that you would want to do

00:05:12,240 --> 00:05:16,720
when you're working with uh earth

00:05:13,919 --> 00:05:18,560
science data so it has a place to

00:05:16,720 --> 00:05:20,240
code things up you know a code editor

00:05:18,560 --> 00:05:21,680
window as a way to manage

00:05:20,240 --> 00:05:24,240
assets that you're uploading or

00:05:21,680 --> 00:05:25,039
referring to them there's a way to save

00:05:24,240 --> 00:05:26,880
scripts

00:05:25,039 --> 00:05:29,600
there's a place to get output whether

00:05:26,880 --> 00:05:30,960
it's a console output like a chart or

00:05:29,600 --> 00:05:33,759
you can actually overlay

00:05:30,960 --> 00:05:34,639
layers on a map and you can authenticate

00:05:33,759 --> 00:05:36,320
things like that

00:05:34,639 --> 00:05:38,320
all this is contained within the code

00:05:36,320 --> 00:05:39,919
editor so it's really useful for

00:05:38,320 --> 00:05:40,720
actually teaching earth engine we use it

00:05:39,919 --> 00:05:43,759
to teach

00:05:40,720 --> 00:05:44,880
classes and allow people to learn the

00:05:43,759 --> 00:05:47,840
concepts of it

00:05:44,880 --> 00:05:50,080
however in order to use the code editor

00:05:47,840 --> 00:05:51,199
you need to code against the javascript

00:05:50,080 --> 00:05:52,880
api

00:05:51,199 --> 00:05:55,440
and that can be a bit frustrating for

00:05:52,880 --> 00:05:58,240
python programmers

00:05:55,440 --> 00:05:59,280
so can jupiter help in this regard well

00:05:58,240 --> 00:06:02,160
i think so

00:05:59,280 --> 00:06:03,840
back in 2014 that's the scipy conference

00:06:02,160 --> 00:06:06,800
i presented a prototype

00:06:03,840 --> 00:06:08,560
widget for ipython notebook at the time

00:06:06,800 --> 00:06:11,280
this is before jupiter

00:06:08,560 --> 00:06:12,560
that would allow users to refer to earth

00:06:11,280 --> 00:06:14,560
engine

00:06:12,560 --> 00:06:16,800
algorithms and display the resulting

00:06:14,560 --> 00:06:19,759
tiles on an interactive map

00:06:16,800 --> 00:06:20,000
and it worked but it was a little bit

00:06:19,759 --> 00:06:22,000
hard

00:06:20,000 --> 00:06:23,520
to a lot of code was required in order

00:06:22,000 --> 00:06:25,600
to do this and

00:06:23,520 --> 00:06:27,600
didn't feel that it was uh ready to be

00:06:25,600 --> 00:06:30,400
maintained at that time

00:06:27,600 --> 00:06:31,600
skip forward to jupitercon 2018

00:06:30,400 --> 00:06:33,919
presented some work

00:06:31,600 --> 00:06:35,600
of hooking up the jupiter widgets in

00:06:33,919 --> 00:06:40,240
particular ipy leaflet

00:06:35,600 --> 00:06:42,000
bq plot to the earth engine python api

00:06:40,240 --> 00:06:44,160
and that allows you to do some more

00:06:42,000 --> 00:06:46,000
complex interactions because of the two

00:06:44,160 --> 00:06:48,080
day directional

00:06:46,000 --> 00:06:49,759
interactivity of the widgets so you

00:06:48,080 --> 00:06:50,720
could actually select a location on a

00:06:49,759 --> 00:06:52,560
map

00:06:50,720 --> 00:06:54,400
get back time series data select a

00:06:52,560 --> 00:06:56,240
location on time series get back map

00:06:54,400 --> 00:06:58,560
data

00:06:56,240 --> 00:06:59,280
and so this concept i knew that it could

00:06:58,560 --> 00:07:00,880
work

00:06:59,280 --> 00:07:02,560
but there's still a lot of code that

00:07:00,880 --> 00:07:04,800
needs to be done a lot of configuration

00:07:02,560 --> 00:07:06,240
in order to get the things to

00:07:04,800 --> 00:07:08,639
get the two parts to be connected

00:07:06,240 --> 00:07:11,039
together jupiter and retention

00:07:08,639 --> 00:07:13,919
but that's where ge map comes along the

00:07:11,039 --> 00:07:16,000
ge map package simplifies a lot of the

00:07:13,919 --> 00:07:17,759
interactions that a typical earth

00:07:16,000 --> 00:07:19,199
science user would want to set up

00:07:17,759 --> 00:07:21,440
when they're working in a jupiter

00:07:19,199 --> 00:07:23,759
environment with earth engine

00:07:21,440 --> 00:07:26,000
so with that let's go into a deeper dive

00:07:23,759 --> 00:07:29,440
of what ge map provides

00:07:26,000 --> 00:07:32,000
so next let's get into the the package

00:07:29,440 --> 00:07:33,360
and so the package is open source

00:07:32,000 --> 00:07:35,039
hosting on github

00:07:33,360 --> 00:07:36,400
you're welcome to check out the link in

00:07:35,039 --> 00:07:39,280
here essentially

00:07:36,400 --> 00:07:40,000
it is a python package for interactive

00:07:39,280 --> 00:07:42,160
mapping

00:07:40,000 --> 00:07:44,000
with google as engine and also ipad

00:07:42,160 --> 00:07:46,800
leaflet and ipad widgets

00:07:44,000 --> 00:07:48,160
so it's basically built upon the jupiter

00:07:46,800 --> 00:07:50,400
widgets system

00:07:48,160 --> 00:07:51,680
and if you see from here on the right

00:07:50,400 --> 00:07:54,639
here i list

00:07:51,680 --> 00:07:56,479
some key dependencies so the first one

00:07:54,639 --> 00:07:58,080
here is os engine api so this is the

00:07:56,479 --> 00:08:00,800
python api and it's doing

00:07:58,080 --> 00:08:03,280
for doing computation ipad leaflet is

00:08:00,800 --> 00:08:05,280
the protein backend how we can visualize

00:08:03,280 --> 00:08:07,520
those engine data interactively

00:08:05,280 --> 00:08:08,960
i also use folium so formula is another

00:08:07,520 --> 00:08:12,080
protein backend and

00:08:08,960 --> 00:08:14,160
the reason i use this one because the

00:08:12,080 --> 00:08:15,440
gmail package is designed to run on the

00:08:14,160 --> 00:08:18,479
jupiter-based uh

00:08:15,440 --> 00:08:20,960
environment um but for collect

00:08:18,479 --> 00:08:23,120
i call it currently does not support ipi

00:08:20,960 --> 00:08:26,240
leaplet so that's why i use the

00:08:23,120 --> 00:08:28,080
volume and also the ipad widgets so this

00:08:26,240 --> 00:08:29,680
is also very powerful we used it to

00:08:28,080 --> 00:08:31,759
create all kind of uh

00:08:29,680 --> 00:08:33,519
for example drop down list to accept

00:08:31,759 --> 00:08:37,360
user input also buttons

00:08:33,519 --> 00:08:40,000
and and others so um it's how we

00:08:37,360 --> 00:08:41,279
use this one to interact with users and

00:08:40,000 --> 00:08:44,240
and and to provide

00:08:41,279 --> 00:08:45,920
output back to the users we also use the

00:08:44,240 --> 00:08:47,920
bq plot so the big pro

00:08:45,920 --> 00:08:49,360
is used for doing uh plotting so

00:08:47,920 --> 00:08:51,600
sometimes you need to see

00:08:49,360 --> 00:08:52,480
uh the pro the time series you can use

00:08:51,600 --> 00:08:54,800
this one

00:08:52,480 --> 00:08:55,920
and the last one here is voila so voila

00:08:54,800 --> 00:08:58,880
is how we uh

00:08:55,920 --> 00:09:00,480
turn a jupiter noble into a stain alone

00:08:58,880 --> 00:09:02,240
web application so

00:09:00,480 --> 00:09:04,160
you know you can deploy this one to the

00:09:02,240 --> 00:09:06,720
internet and people

00:09:04,160 --> 00:09:08,000
without coding skills or without us

00:09:06,720 --> 00:09:11,279
ending account can also

00:09:08,000 --> 00:09:13,519
visualize uh engine products and

00:09:11,279 --> 00:09:15,440
so since it's a python package we

00:09:13,519 --> 00:09:16,720
provide a couple of ways for you to

00:09:15,440 --> 00:09:19,120
install the package

00:09:16,720 --> 00:09:21,600
you can install using pip or you can use

00:09:19,120 --> 00:09:24,160
to install using a conda or

00:09:21,600 --> 00:09:24,800
mamba you can also install directly from

00:09:24,160 --> 00:09:27,920
github

00:09:24,800 --> 00:09:28,640
and i also provide way here for you how

00:09:27,920 --> 00:09:31,120
to

00:09:28,640 --> 00:09:32,720
update the package and i also provide a

00:09:31,120 --> 00:09:35,200
series of tutorials you can

00:09:32,720 --> 00:09:36,160
watch the tutorial if you want to

00:09:35,200 --> 00:09:38,800
install the package

00:09:36,160 --> 00:09:39,920
we also provide a docker image so this

00:09:38,800 --> 00:09:42,560
is provided by

00:09:39,920 --> 00:09:44,880
my co-presenter title ericsson so you're

00:09:42,560 --> 00:09:48,320
welcome to check out the url here

00:09:44,880 --> 00:09:49,360
and to look for the detailed instruction

00:09:48,320 --> 00:09:53,200
how to

00:09:49,360 --> 00:09:56,399
use dma in docker so here

00:09:53,200 --> 00:09:57,360
i provide two simple examples for you to

00:09:56,399 --> 00:09:59,279
get started

00:09:57,360 --> 00:10:01,279
if you want to use google collect you

00:09:59,279 --> 00:10:03,920
can follow my example here on the left

00:10:01,279 --> 00:10:06,079
if you want to use in jupyter your local

00:10:03,920 --> 00:10:08,480
jupiter or your

00:10:06,079 --> 00:10:09,519
jupiter server you can see the example

00:10:08,480 --> 00:10:11,519
here from the right

00:10:09,519 --> 00:10:13,279
so it's actually very simple you just

00:10:11,519 --> 00:10:15,360
import the libraries and then

00:10:13,279 --> 00:10:17,519
add the earth's engine data and then you

00:10:15,360 --> 00:10:19,600
display the earth's engine data so uh

00:10:17,519 --> 00:10:21,040
simple and straightforward if you use

00:10:19,600 --> 00:10:23,120
google collect uh you

00:10:21,040 --> 00:10:24,560
pay attention that you we need to

00:10:23,120 --> 00:10:26,640
install gmap

00:10:24,560 --> 00:10:27,760
every time when you launch a collab

00:10:26,640 --> 00:10:30,320
section because

00:10:27,760 --> 00:10:31,440
the package is not installed by default

00:10:30,320 --> 00:10:34,240
by collab

00:10:31,440 --> 00:10:34,959
and also you need to use the folium

00:10:34,240 --> 00:10:37,360
protein

00:10:34,959 --> 00:10:38,320
backend because uh ipy leaflet is not

00:10:37,360 --> 00:10:41,200
supported

00:10:38,320 --> 00:10:42,000
on google codelab yet and so this is

00:10:41,200 --> 00:10:44,880
relatively

00:10:42,000 --> 00:10:46,320
limited functionality you can add the

00:10:44,880 --> 00:10:47,680
data to the map and then you can

00:10:46,320 --> 00:10:49,760
visualize the data

00:10:47,680 --> 00:10:52,320
if you want to fully utilize the

00:10:49,760 --> 00:10:55,200
interactive functionality of the package

00:10:52,320 --> 00:10:55,680
then i highly recommend you use the ipad

00:10:55,200 --> 00:10:57,760
on

00:10:55,680 --> 00:10:59,600
the jupyter notebook environment or

00:10:57,760 --> 00:11:00,480
jupyter lab so the the differences

00:10:59,600 --> 00:11:02,959
between these two

00:11:00,480 --> 00:11:05,200
is that if i leave letter enables um

00:11:02,959 --> 00:11:07,760
bi-directional communication so

00:11:05,200 --> 00:11:08,480
for example if the user click a mouse on

00:11:07,760 --> 00:11:10,320
the map

00:11:08,480 --> 00:11:11,600
and then you can use ipad leaflet to

00:11:10,320 --> 00:11:13,040
extract the coordinates

00:11:11,600 --> 00:11:15,040
and then you can fully use the

00:11:13,040 --> 00:11:16,320
coordinates to extract data from the

00:11:15,040 --> 00:11:18,720
earth's engine

00:11:16,320 --> 00:11:20,800
data set but if you use volume you

00:11:18,720 --> 00:11:22,959
cannot once the map is created

00:11:20,800 --> 00:11:24,160
it's kind of static you can zoom in and

00:11:22,959 --> 00:11:26,240
we can zoom out

00:11:24,160 --> 00:11:28,720
but you cannot really accept using

00:11:26,240 --> 00:11:31,120
improve so i want you to be aware

00:11:28,720 --> 00:11:32,880
the differences between the two on the

00:11:31,120 --> 00:11:34,399
left side here i also provide a normal

00:11:32,880 --> 00:11:37,519
example you can click link

00:11:34,399 --> 00:11:40,240
and open uh in collect you can also have

00:11:37,519 --> 00:11:42,320
a video here shows you how to use a gmap

00:11:40,240 --> 00:11:44,959
in google called that i also have a

00:11:42,320 --> 00:11:45,920
short paper that describing the uh the

00:11:44,959 --> 00:11:48,560
gmail package

00:11:45,920 --> 00:11:50,160
it's published in the journal of open

00:11:48,560 --> 00:11:50,800
source software you're welcome to check

00:11:50,160 --> 00:11:52,880
out the

00:11:50,800 --> 00:11:55,120
paper if you're interested in learning

00:11:52,880 --> 00:11:56,240
more about the package next i'd like to

00:11:55,120 --> 00:12:00,160
introduce some

00:11:56,240 --> 00:12:02,560
api documentation so i here is the link

00:12:00,160 --> 00:12:04,320
at the bottom here provide the link to

00:12:02,560 --> 00:12:07,600
the documentation

00:12:04,320 --> 00:12:08,000
and you can look at some of the examples

00:12:07,600 --> 00:12:11,279
i

00:12:08,000 --> 00:12:12,560
provided and also tutorials and also

00:12:11,279 --> 00:12:15,600
what i would like to point out

00:12:12,560 --> 00:12:17,440
is the api reference so one thing uh

00:12:15,600 --> 00:12:18,880
that's nice about this is that you can

00:12:17,440 --> 00:12:20,399
look at the source code behind its

00:12:18,880 --> 00:12:21,600
function so if you're interested in

00:12:20,399 --> 00:12:24,000
learning more

00:12:21,600 --> 00:12:25,920
um what's behind this function you just

00:12:24,000 --> 00:12:27,360
go to the website and then you click

00:12:25,920 --> 00:12:29,200
the function and then you will be able

00:12:27,360 --> 00:12:30,720
to show you the source code so

00:12:29,200 --> 00:12:32,800
this might be a good way if you want to

00:12:30,720 --> 00:12:34,720
contribute to this package you can um

00:12:32,800 --> 00:12:36,079
locate some of the source code behind

00:12:34,720 --> 00:12:38,800
next i'd like to

00:12:36,079 --> 00:12:40,720
introduce you to some of the tutorials

00:12:38,800 --> 00:12:41,440
that i have developed for this package

00:12:40,720 --> 00:12:44,480
so

00:12:41,440 --> 00:12:47,120
if you go to my youtube channel i have a

00:12:44,480 --> 00:12:48,079
playlist for google's engine python

00:12:47,120 --> 00:12:51,440
tutorials

00:12:48,079 --> 00:12:53,519
so so far i have developed 37 videos

00:12:51,440 --> 00:12:55,680
and you can see here the total lens is

00:12:53,519 --> 00:12:57,120
nine hours so due to the time limit i

00:12:55,680 --> 00:12:59,680
don't have time to

00:12:57,120 --> 00:13:01,600
get into the details every video but

00:12:59,680 --> 00:13:04,399
you're welcome to check out the uh

00:13:01,600 --> 00:13:05,279
the youtube channel and to learn more

00:13:04,399 --> 00:13:09,519
about

00:13:05,279 --> 00:13:12,160
how to use the gmat python package

00:13:09,519 --> 00:13:14,240
here is a list of all the tutorials so

00:13:12,160 --> 00:13:17,839
if uh here shows you uh

00:13:14,240 --> 00:13:21,519
20 and the other one here is 16. so

00:13:17,839 --> 00:13:23,600
in total of 36 uh tutorials and so for

00:13:21,519 --> 00:13:24,240
each tutorial i provide the full length

00:13:23,600 --> 00:13:27,519
video

00:13:24,240 --> 00:13:29,440
uh usually is around 10 to 20 minutes i

00:13:27,519 --> 00:13:31,040
also provide a gf animation

00:13:29,440 --> 00:13:32,560
so if you don't have time to watch the

00:13:31,040 --> 00:13:35,040
full lens video

00:13:32,560 --> 00:13:36,480
you can watch the animation so just to

00:13:35,040 --> 00:13:39,839
get the highlights

00:13:36,480 --> 00:13:42,000
of the video i also provide a jupiter

00:13:39,839 --> 00:13:43,199
noble example so you can reproduce

00:13:42,000 --> 00:13:46,480
exactly what i did

00:13:43,199 --> 00:13:47,839
in that tutorial and so

00:13:46,480 --> 00:13:50,240
you're welcome to check out all these

00:13:47,839 --> 00:13:52,320
resources to learn more about

00:13:50,240 --> 00:13:54,399
the package so lastly i would like to

00:13:52,320 --> 00:13:55,360
demonstrate some of the key features of

00:13:54,399 --> 00:13:58,000
the package

00:13:55,360 --> 00:13:58,560
first if you learn google's engine most

00:13:58,000 --> 00:14:01,440
likely

00:13:58,560 --> 00:14:02,240
you probably use a javascript to get

00:14:01,440 --> 00:14:05,199
started

00:14:02,240 --> 00:14:07,680
so i in the gmail package i provide some

00:14:05,199 --> 00:14:10,160
function for you to easily convert

00:14:07,680 --> 00:14:11,279
javascript examples to jupyter notebook

00:14:10,160 --> 00:14:13,360
and python so

00:14:11,279 --> 00:14:15,120
if you see from the video here very

00:14:13,360 --> 00:14:15,680
simple just copy the source code and

00:14:15,120 --> 00:14:17,279
paste

00:14:15,680 --> 00:14:19,120
and then hit run you'll be able to

00:14:17,279 --> 00:14:21,920
convert this one directly to

00:14:19,120 --> 00:14:22,720
python and then to display the result in

00:14:21,920 --> 00:14:24,880
here in

00:14:22,720 --> 00:14:26,480
jupyter notebook if you already have a

00:14:24,880 --> 00:14:29,440
bunch of

00:14:26,480 --> 00:14:30,000
javascript on your computer you can also

00:14:29,440 --> 00:14:33,040
use

00:14:30,000 --> 00:14:34,880
some functions in the gmap to

00:14:33,040 --> 00:14:36,959
do best conversion so i also have

00:14:34,880 --> 00:14:38,240
another video um

00:14:36,959 --> 00:14:40,079
show you how to do that so you are

00:14:38,240 --> 00:14:40,480
welcome to check out the youtube channel

00:14:40,079 --> 00:14:43,600
to

00:14:40,480 --> 00:14:44,079
learn how to do this next one you can

00:14:43,600 --> 00:14:45,839
search

00:14:44,079 --> 00:14:47,440
and import data sets from the earth's

00:14:45,839 --> 00:14:49,519
engine data catalog so

00:14:47,440 --> 00:14:51,600
earlier i show you that the os engine

00:14:49,519 --> 00:14:52,880
has a huge data catalog more than 30

00:14:51,600 --> 00:14:54,880
petabytes so

00:14:52,880 --> 00:14:56,399
if you use gmap you will see here you

00:14:54,880 --> 00:14:56,959
don't need to write any source code

00:14:56,399 --> 00:14:59,199
users

00:14:56,959 --> 00:15:00,560
create the inter interactive map using

00:14:59,199 --> 00:15:02,240
two lines of code

00:15:00,560 --> 00:15:03,600
and then you can click the button here

00:15:02,240 --> 00:15:06,880
to uh

00:15:03,600 --> 00:15:09,279
to to to display the uh dialog

00:15:06,880 --> 00:15:10,720
and then all you need to just enter the

00:15:09,279 --> 00:15:12,560
keywords you want to search

00:15:10,720 --> 00:15:15,120
and then just hit input and then you

00:15:12,560 --> 00:15:16,720
will create a new sale here

00:15:15,120 --> 00:15:18,880
beneath the the map and then you just

00:15:16,720 --> 00:15:20,480
hit one and then you will so the data so

00:15:18,880 --> 00:15:22,399
you don't need to download any data so

00:15:20,480 --> 00:15:25,440
this is very very powerful that

00:15:22,399 --> 00:15:27,360
uh very easy um without really writing

00:15:25,440 --> 00:15:29,360
uh many lines of code you can get the

00:15:27,360 --> 00:15:32,800
data and then you can use it

00:15:29,360 --> 00:15:34,560
to do uh data processing also we can

00:15:32,800 --> 00:15:38,320
search the api documentation

00:15:34,560 --> 00:15:41,920
so there's just thousands of functions

00:15:38,320 --> 00:15:43,839
available for the earth engine python

00:15:41,920 --> 00:15:45,600
api so there's no way that you can

00:15:43,839 --> 00:15:48,000
remember every detail so

00:15:45,600 --> 00:15:48,959
you can use the the gmail package

00:15:48,000 --> 00:15:51,519
actually to

00:15:48,959 --> 00:15:52,000
search the api documentation you can

00:15:51,519 --> 00:15:53,759
also

00:15:52,000 --> 00:15:55,600
import data set from your os engine

00:15:53,759 --> 00:15:57,920
account your personal account so that

00:15:55,600 --> 00:16:00,160
you don't have to go back to the

00:15:57,920 --> 00:16:01,680
javascript code editor to look for the

00:16:00,160 --> 00:16:07,440
data set so it provides

00:16:01,680 --> 00:16:10,959
you an easy way to access your data sets

00:16:07,440 --> 00:16:12,800
and also since this is for geospatial

00:16:10,959 --> 00:16:14,720
analysis so most of time you were trying

00:16:12,800 --> 00:16:16,079
to produce some products so at the end

00:16:14,720 --> 00:16:18,480
for example if you

00:16:16,079 --> 00:16:20,240
do lane using lane cover classification

00:16:18,480 --> 00:16:23,360
you might want to display

00:16:20,240 --> 00:16:26,160
um a legend so basically to indicate

00:16:23,360 --> 00:16:28,160
uh what is color represent so in in the

00:16:26,160 --> 00:16:28,959
package i provide you an easy way that

00:16:28,160 --> 00:16:31,440
you can

00:16:28,959 --> 00:16:32,720
use some built-in legend you can also

00:16:31,440 --> 00:16:35,279
customize so

00:16:32,720 --> 00:16:37,519
you can also copy the color code from

00:16:35,279 --> 00:16:38,959
the earth engine official documentation

00:16:37,519 --> 00:16:40,399
and then just paste

00:16:38,959 --> 00:16:42,880
and then you can convert that one to a

00:16:40,399 --> 00:16:43,199
laser like this so very simple and easy

00:16:42,880 --> 00:16:46,800
to

00:16:43,199 --> 00:16:49,360
do in gmap

00:16:46,800 --> 00:16:50,320
you can also add some basement from the

00:16:49,360 --> 00:16:54,240
internet so

00:16:50,320 --> 00:16:55,839
for example xyz and wms type services so

00:16:54,240 --> 00:16:58,560
this one is not available in the

00:16:55,839 --> 00:17:02,160
google's engine javascript api

00:16:58,560 --> 00:17:03,759
so you have a lot more data set that you

00:17:02,160 --> 00:17:04,799
can utilize from the internet you don't

00:17:03,759 --> 00:17:07,120
have to download anything

00:17:04,799 --> 00:17:09,839
also we provide this spread panel map so

00:17:07,120 --> 00:17:12,079
this one is built upon the ipad leaflet

00:17:09,839 --> 00:17:13,600
split panel so you will see in here we

00:17:12,079 --> 00:17:15,039
only need one line of code you can

00:17:13,600 --> 00:17:16,959
create something like this

00:17:15,039 --> 00:17:19,120
this is just a demonstration you can

00:17:16,959 --> 00:17:19,600
load any dataset you want onto the map

00:17:19,120 --> 00:17:21,280
and then

00:17:19,600 --> 00:17:23,520
left and right then you can use the

00:17:21,280 --> 00:17:25,600
slider to compare

00:17:23,520 --> 00:17:27,520
this is especially useful for example if

00:17:25,600 --> 00:17:29,840
you want to publish data set as

00:17:27,520 --> 00:17:30,640
to the news outlet or social media

00:17:29,840 --> 00:17:32,720
people

00:17:30,640 --> 00:17:34,400
would love this because you can compare

00:17:32,720 --> 00:17:35,440
especially if you have some natural

00:17:34,400 --> 00:17:37,600
disasters

00:17:35,440 --> 00:17:38,559
people want to see what's behind before

00:17:37,600 --> 00:17:40,160
and after

00:17:38,559 --> 00:17:42,400
and this is a quick way people can

00:17:40,160 --> 00:17:45,600
visualize the differences

00:17:42,400 --> 00:17:46,400
of the changes you can also use the

00:17:45,600 --> 00:17:49,440
inspector

00:17:46,400 --> 00:17:52,000
um to inspect data values uh

00:17:49,440 --> 00:17:53,919
different from like traditional map

00:17:52,000 --> 00:17:55,440
applications you can only see the jpeg

00:17:53,919 --> 00:17:56,640
images but you cannot really get the

00:17:55,440 --> 00:17:59,520
original data

00:17:56,640 --> 00:18:00,720
so in here we are using earth's engine

00:17:59,520 --> 00:18:02,720
data everything is like

00:18:00,720 --> 00:18:04,080
in the raw data set you can still get

00:18:02,720 --> 00:18:06,480
the pixel values

00:18:04,080 --> 00:18:08,240
out of the imagery so you can load the

00:18:06,480 --> 00:18:10,559
dataset and then just

00:18:08,240 --> 00:18:12,400
enable the inspector then you just click

00:18:10,559 --> 00:18:15,360
hit your

00:18:12,400 --> 00:18:15,840
mouse on the map and then we based on

00:18:15,360 --> 00:18:17,760
the

00:18:15,840 --> 00:18:19,360
coordinates it will extract all the

00:18:17,760 --> 00:18:21,919
pixel values behind

00:18:19,360 --> 00:18:24,080
the data set and then to display the

00:18:21,919 --> 00:18:25,039
values to you so uh very simple and

00:18:24,080 --> 00:18:26,640
straightforward

00:18:25,039 --> 00:18:28,240
similarly this one is similar to the

00:18:26,640 --> 00:18:30,880
javascript api

00:18:28,240 --> 00:18:31,360
so everything you can do in javascript

00:18:30,880 --> 00:18:33,760
api

00:18:31,360 --> 00:18:34,960
you right now most uploads are also

00:18:33,760 --> 00:18:37,679
available in the

00:18:34,960 --> 00:18:38,799
gmap package through the os engine

00:18:37,679 --> 00:18:40,960
python api

00:18:38,799 --> 00:18:42,559
and also you can do interactive plotting

00:18:40,960 --> 00:18:44,559
earlier i mentioned that one of the key

00:18:42,559 --> 00:18:47,520
dependencies is a bq plot

00:18:44,559 --> 00:18:49,520
so this is use the bq plot and you can

00:18:47,520 --> 00:18:51,840
load the data set for example

00:18:49,520 --> 00:18:52,720
lenses data have seven spectral bands

00:18:51,840 --> 00:18:55,520
you can also

00:18:52,720 --> 00:18:57,200
low multi uh hyperspectral data has

00:18:55,520 --> 00:18:58,960
hundreds of bands

00:18:57,200 --> 00:19:01,039
and then you can click your mouse and

00:18:58,960 --> 00:19:03,039
you can extract the

00:19:01,039 --> 00:19:04,480
values and then display you can do all

00:19:03,039 --> 00:19:07,360
kind of porting you can also

00:19:04,480 --> 00:19:07,760
export uh the values if you want so for

00:19:07,360 --> 00:19:09,440
this

00:19:07,760 --> 00:19:11,200
animation shows you you can just click

00:19:09,440 --> 00:19:13,280
your mouse sometimes you want to for

00:19:11,200 --> 00:19:15,600
example you want to

00:19:13,280 --> 00:19:16,880
create some training data you can use

00:19:15,600 --> 00:19:19,679
this way so you just

00:19:16,880 --> 00:19:21,440
load the data set click on the mouse and

00:19:19,679 --> 00:19:23,200
then click click click

00:19:21,440 --> 00:19:25,600
you will be able to directly export they

00:19:23,200 --> 00:19:29,280
want all the pixel values

00:19:25,600 --> 00:19:32,480
as a csv and then you can do for example

00:19:29,280 --> 00:19:33,120
folder processing or you can create more

00:19:32,480 --> 00:19:36,840
plots

00:19:33,120 --> 00:19:38,240
using other software packages if you

00:19:36,840 --> 00:19:40,480
want

00:19:38,240 --> 00:19:42,720
so this one here shows you how you can

00:19:40,480 --> 00:19:43,440
uh similar to the earlier display panel

00:19:42,720 --> 00:19:46,160
mat

00:19:43,440 --> 00:19:48,160
and but i pre-loaded all the data set

00:19:46,160 --> 00:19:49,120
for example the common one landsat and

00:19:48,160 --> 00:19:52,160
also

00:19:49,120 --> 00:19:54,400
uh the nav image one meter resolution

00:19:52,160 --> 00:19:56,160
so you don't have to create those image

00:19:54,400 --> 00:19:57,360
collection by yourself uh if you want to

00:19:56,160 --> 00:19:59,600
visualize the changes

00:19:57,360 --> 00:20:01,120
at any location on earth surface you can

00:19:59,600 --> 00:20:03,360
use this app just

00:20:01,120 --> 00:20:04,240
one line of code then you can create

00:20:03,360 --> 00:20:06,559
something like this

00:20:04,240 --> 00:20:09,280
and to visualize changes also if you're

00:20:06,559 --> 00:20:12,000
doing a geospatial analysis most likely

00:20:09,280 --> 00:20:13,760
you might want to use some uh data from

00:20:12,000 --> 00:20:15,679
your local computer so for example

00:20:13,760 --> 00:20:17,600
vector data shot files if you use

00:20:15,679 --> 00:20:19,679
javascript api you have to upload the

00:20:17,600 --> 00:20:21,840
data set to your account

00:20:19,679 --> 00:20:23,600
so in here in the gmat python package i

00:20:21,840 --> 00:20:24,559
provide you a way for you to load the

00:20:23,600 --> 00:20:27,360
data set

00:20:24,559 --> 00:20:29,039
and directly convert to earth's engine

00:20:27,360 --> 00:20:30,240
object so in that way you don't have to

00:20:29,039 --> 00:20:33,200
upload data to

00:20:30,240 --> 00:20:34,559
your account it can save you some time

00:20:33,200 --> 00:20:38,720
similarly

00:20:34,559 --> 00:20:41,120
i also use a x array leaflet package to

00:20:38,720 --> 00:20:43,280
low last data log store on your local

00:20:41,120 --> 00:20:46,400
computer so this example shows you

00:20:43,280 --> 00:20:48,960
here how easy it is to load local raster

00:20:46,400 --> 00:20:51,120
so in this way you can utilize data set

00:20:48,960 --> 00:20:53,840
uh from the google's engine public

00:20:51,120 --> 00:20:54,400
data catalog you can also utilize data

00:20:53,840 --> 00:20:56,080
that's

00:20:54,400 --> 00:20:57,760
stored on your local computer so in this

00:20:56,080 --> 00:20:59,600
way you can insert

00:20:57,760 --> 00:21:01,919
those data set together for example you

00:20:59,600 --> 00:21:05,280
want to compare the differences

00:21:01,919 --> 00:21:08,640
this is an easy way to do

00:21:05,280 --> 00:21:10,799
you can also publish uh the interactive

00:21:08,640 --> 00:21:11,919
maps using just one knighted call so

00:21:10,799 --> 00:21:14,640
this one use a

00:21:11,919 --> 00:21:15,600
volume package and also the data pane

00:21:14,640 --> 00:21:17,360
python package

00:21:15,600 --> 00:21:20,000
and then you can embed this one into

00:21:17,360 --> 00:21:20,799
social media or or any website uh you

00:21:20,000 --> 00:21:23,280
want

00:21:20,799 --> 00:21:24,240
and the reason for this one is sometimes

00:21:23,280 --> 00:21:26,799
after you uh

00:21:24,240 --> 00:21:28,000
create those excellent products you want

00:21:26,799 --> 00:21:30,000
the public to

00:21:28,000 --> 00:21:31,120
utilize what you have done so this is a

00:21:30,000 --> 00:21:34,320
quick way that you can

00:21:31,120 --> 00:21:36,080
allow people to use your uh products

00:21:34,320 --> 00:21:37,520
otherwise know everyone has those engine

00:21:36,080 --> 00:21:39,440
skills or they have the

00:21:37,520 --> 00:21:41,039
earth any account they don't know how to

00:21:39,440 --> 00:21:44,000
do the coding so

00:21:41,039 --> 00:21:44,960
this is quick way to make your uh

00:21:44,000 --> 00:21:47,280
information

00:21:44,960 --> 00:21:49,120
available to the public so that everyone

00:21:47,280 --> 00:21:51,440
can go online and then look at your

00:21:49,120 --> 00:21:53,440
stuff lastly i would like to show you

00:21:51,440 --> 00:21:54,720
the uh earth engine app so this is

00:21:53,440 --> 00:21:57,760
earlier at the um

00:21:54,720 --> 00:21:59,679
the outlines the slides i'll show you

00:21:57,760 --> 00:22:03,039
how to create an animation um

00:21:59,679 --> 00:22:06,320
like this and so the key packages we

00:22:03,039 --> 00:22:08,080
are using here is voila so voila is icon

00:22:06,320 --> 00:22:10,559
package that you can turn a jupiter

00:22:08,080 --> 00:22:12,480
noble into a stain along web application

00:22:10,559 --> 00:22:14,159
so basically

00:22:12,480 --> 00:22:16,400
you don't need to worry about the source

00:22:14,159 --> 00:22:20,799
code people can just

00:22:16,400 --> 00:22:23,520
use ipad wizard to interact with the map

00:22:20,799 --> 00:22:24,480
and then to get the results in here you

00:22:23,520 --> 00:22:26,559
can try out the

00:22:24,480 --> 00:22:27,679
web app you can click the link uh pay

00:22:26,559 --> 00:22:29,760
attention if you

00:22:27,679 --> 00:22:30,880
too many people are visiting the same

00:22:29,760 --> 00:22:33,679
app it might

00:22:30,880 --> 00:22:34,320
take some time too low so next i'm going

00:22:33,679 --> 00:22:37,280
to

00:22:34,320 --> 00:22:38,159
demonstrate this one how you can use

00:22:37,280 --> 00:22:40,480
this one to

00:22:38,159 --> 00:22:41,200
convert zubin a nobody into a web

00:22:40,480 --> 00:22:44,400
application

00:22:41,200 --> 00:22:45,760
so in here you're welcome to host your

00:22:44,400 --> 00:22:47,679
web application on your

00:22:45,760 --> 00:22:49,440
cloud server you can also use some free

00:22:47,679 --> 00:22:52,640
service like heroku or

00:22:49,440 --> 00:22:55,200
ngrok and i'm going to show you

00:22:52,640 --> 00:22:55,919
here how i did it so as you can see when

00:22:55,200 --> 00:22:58,559
you create the

00:22:55,919 --> 00:23:00,400
web app this is the zooping notebook so

00:22:58,559 --> 00:23:03,200
once you uh click the link

00:23:00,400 --> 00:23:05,120
you will be convert basically execute

00:23:03,200 --> 00:23:06,799
execute the jupyter noble and then click

00:23:05,120 --> 00:23:08,559
all the results and then display this

00:23:06,799 --> 00:23:10,880
one here uh to you

00:23:08,559 --> 00:23:12,720
so this is what it looks like i can also

00:23:10,880 --> 00:23:14,480
show you uh the source code behind so

00:23:12,720 --> 00:23:16,240
let me uh

00:23:14,480 --> 00:23:17,840
unhide the source code so if you see

00:23:16,240 --> 00:23:19,600
from the source code here this is what

00:23:17,840 --> 00:23:21,600
it looks like to create

00:23:19,600 --> 00:23:23,200
a web app at the beginning of the

00:23:21,600 --> 00:23:25,200
jupyter notebook i also show you the

00:23:23,200 --> 00:23:27,520
instructions step by step how to

00:23:25,200 --> 00:23:28,559
create this one and how to deploy so

00:23:27,520 --> 00:23:31,520
that you can

00:23:28,559 --> 00:23:32,799
anyone with the with internet access

00:23:31,520 --> 00:23:35,520
they can visualize

00:23:32,799 --> 00:23:36,720
the data set and they can do exactly

00:23:35,520 --> 00:23:39,760
what you

00:23:36,720 --> 00:23:42,559
provide them so let me

00:23:39,760 --> 00:23:44,320
hide the source code so in here i'm

00:23:42,559 --> 00:23:45,520
trying to create for example i want to

00:23:44,320 --> 00:23:48,559
show the changes of

00:23:45,520 --> 00:23:50,240
service water in this area i just click

00:23:48,559 --> 00:23:53,840
here draw a rectangle

00:23:50,240 --> 00:23:54,799
and then from here once you clear the

00:23:53,840 --> 00:23:57,440
rectangle so

00:23:54,799 --> 00:23:59,120
here you can customize using different

00:23:57,440 --> 00:24:01,039
band combinations so for example

00:23:59,120 --> 00:24:02,880
i'm going to use this one and you can

00:24:01,039 --> 00:24:04,159
change the title if you want you can

00:24:02,880 --> 00:24:06,640
change the year and

00:24:04,159 --> 00:24:08,240
start year and year you can also change

00:24:06,640 --> 00:24:11,039
the color for the text

00:24:08,240 --> 00:24:12,000
we are going to add to the to the

00:24:11,039 --> 00:24:15,039
animation so

00:24:12,000 --> 00:24:18,240
once you are done with those parameters

00:24:15,039 --> 00:24:20,960
just hit submit and

00:24:18,240 --> 00:24:22,480
it might take a couple seconds up to one

00:24:20,960 --> 00:24:24,400
minute to

00:24:22,480 --> 00:24:25,679
for us engine to collect the data and

00:24:24,400 --> 00:24:28,320
then do some

00:24:25,679 --> 00:24:30,240
processing mosaic the data and then to

00:24:28,320 --> 00:24:30,799
give you the animation and then after

00:24:30,240 --> 00:24:33,120
that

00:24:30,799 --> 00:24:34,559
i use some functions to add text

00:24:33,120 --> 00:24:37,440
automatically

00:24:34,559 --> 00:24:39,279
to the map okay so now we have the map i

00:24:37,440 --> 00:24:40,320
have the animation so if you can see

00:24:39,279 --> 00:24:43,200
here you can zoom in

00:24:40,320 --> 00:24:44,320
you can zoom out and you can draw a

00:24:43,200 --> 00:24:46,960
rectangle on

00:24:44,320 --> 00:24:48,080
any location around the globe to create

00:24:46,960 --> 00:24:51,039
animation like this

00:24:48,080 --> 00:24:52,320
so for example i can go back here and to

00:24:51,039 --> 00:24:53,039
show you for example you're going to

00:24:52,320 --> 00:24:56,159
look at

00:24:53,039 --> 00:24:57,679
the urban expansion in las vegas we can

00:24:56,159 --> 00:25:00,400
draw a rectangle

00:24:57,679 --> 00:25:02,159
like this and again you can change the

00:25:00,400 --> 00:25:04,320
combination

00:25:02,159 --> 00:25:05,600
like this you can change the color if

00:25:04,320 --> 00:25:08,400
you want and then hit run

00:25:05,600 --> 00:25:10,559
okay so now we have the animation for

00:25:08,400 --> 00:25:12,559
showing the urban expansion in last

00:25:10,559 --> 00:25:13,360
figure so as you can see it's very easy

00:25:12,559 --> 00:25:15,919
to do

00:25:13,360 --> 00:25:17,279
no coding required draw a rectangle and

00:25:15,919 --> 00:25:19,520
then set the parameter

00:25:17,279 --> 00:25:21,200
parameters you're done so you can get

00:25:19,520 --> 00:25:22,320
this one and they can post on social

00:25:21,200 --> 00:25:24,240
media

00:25:22,320 --> 00:25:26,880
lastly i would like to provide some

00:25:24,240 --> 00:25:29,840
additional resources for gmap

00:25:26,880 --> 00:25:30,960
if you want more background on earth

00:25:29,840 --> 00:25:32,640
engine with jupiter

00:25:30,960 --> 00:25:34,400
you can watch the two conference

00:25:32,640 --> 00:25:38,000
presentations by tyler

00:25:34,400 --> 00:25:39,919
at scipy 2014 and jupiter con 2018

00:25:38,000 --> 00:25:41,200
we will also welcome your contribution

00:25:39,919 --> 00:25:44,000
to the gde map package

00:25:41,200 --> 00:25:45,520
you can contribute in a number of ways

00:25:44,000 --> 00:25:47,840
you are welcome to submit official

00:25:45,520 --> 00:25:48,880
requests or pull requests on the github

00:25:47,840 --> 00:25:51,360
repo

00:25:48,880 --> 00:25:53,200
you can also add more jupyter nobel

00:25:51,360 --> 00:25:56,720
examples to the ripple with

00:25:53,200 --> 00:25:58,799
already a 360 noble examples

00:25:56,720 --> 00:26:00,320
and you can also help maintain the

00:25:58,799 --> 00:26:03,120
earth's engine and gmap

00:26:00,320 --> 00:26:04,799
docker image even one more live

00:26:03,120 --> 00:26:08,320
discussion

00:26:04,799 --> 00:26:10,640
you can join the gmap slack channel

00:26:08,320 --> 00:26:11,440
lastly you are welcome to leave comments

00:26:10,640 --> 00:26:14,880
on the

00:26:11,440 --> 00:26:17,120
gmat by youtube tutorials

00:26:14,880 --> 00:26:19,039
okay that's all for our presentation

00:26:17,120 --> 00:26:25,840
thank you very much for your attention

00:26:19,039 --> 00:26:25,840

YouTube URL: https://www.youtube.com/watch?v=5Nab84IssxA


