Title: Running BSD on AWS - Julien Simon & Nicolas David
Publication date: 2019-10-16
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

No, Amazon Web Services is not only Linux territory! Itâ€™s actually quite easy
to run your favorite BSD OS in the Cloud and weâ€™ll show you how in this session.
First, weâ€™ll start with a quick recap on the AWS infrastructure, before
explaining how you can build and launch BSD-based Amazon Machine Images.
Weâ€™ll then start a FreeBSD instance on a rather large server and weâ€™ll build a
ZFS volume based on local disks. Finally, weâ€™ll see how fast we can run a full
â€˜build worldâ€™: place your bets ðŸ˜‰

Speaker biography:

Julien Simon, Principal Technical Evangelist at Amazon Web Services.
Before joining AWS, Julien served for 10 years as CTO/VP Engineering in
top-tier web startups. Thus, heâ€™s particularly interested in all things
architecture, deployment, performance, scalability and data. As a Principal
Technical Evangelist, Julien speaks very frequently at conferences and technical
workshops, where he meets developers and enterprises to help them bring their
ideas to life thanks to the Amazon Web Services infrastructure.
Nicolas David. Prior to joining AWS, Nicolas evolved for 15 years
in information technology industry at major French and European
actors of the Software Edition, Bank and Insurance businesses in a
variety of roles. Today, Nicolas uses his experience to support AWS
customers transforming their way to think IT using the cloud
computing. While delivering a broad range of sessions from introductory
level (AWSome Days, AWS Technical Essentials, AWS Business Essentials),
to advanced courses (Architecting/Advanced Architecting Concepts
on AWS, System Operations on AWS, Security Operations on AWS, DevOps
Engineering on AWS, Big Data on AWS); Nicolas contributes to
Presentations, Hands-on Labs and the material used in and around
AWS Training Sessions, like events, meetups and public talks.
Captions: 
	00:00:00,030 --> 00:00:05,520
all right good afternoon everyone so I'm

00:00:02,879 --> 00:00:09,690
Nikolas just so you won't mix up both of

00:00:05,520 --> 00:00:11,880
us I'm a technical trainer based in

00:00:09,690 --> 00:00:15,150
Paris I'm delivering trainings for AWS

00:00:11,880 --> 00:00:17,730
all over EMEA and Julian is our beloved

00:00:15,150 --> 00:00:19,949
Technical Evangelist for for the French

00:00:17,730 --> 00:00:22,529
region but it's not really in France

00:00:19,949 --> 00:00:26,189
he's all over the world so today we're

00:00:22,529 --> 00:00:28,500
going to discuss about running of BSD so

00:00:26,189 --> 00:00:31,800
FreeBSD mostly and a little bit of open

00:00:28,500 --> 00:00:33,570
BSD on AWS and we thought we had some

00:00:31,800 --> 00:00:39,329
fun we'll have some fun with with those

00:00:33,570 --> 00:00:42,329
two S's and so this is a little bit

00:00:39,329 --> 00:00:44,969
about us I'll start with myself and then

00:00:42,329 --> 00:00:48,200
I'll I'll hand you the mic so I

00:00:44,969 --> 00:00:50,910
discovered open BSD in early 2000 and

00:00:48,200 --> 00:00:53,010
the spark station that you can see here

00:00:50,910 --> 00:00:57,149
is the first machine I installed open

00:00:53,010 --> 00:00:59,969
BSD on so this dates a long time ago and

00:00:57,149 --> 00:01:03,030
then shortly after that I was you know a

00:00:59,969 --> 00:01:05,129
little bit alone in the being French and

00:01:03,030 --> 00:01:08,430
learning about open BSD so I started the

00:01:05,129 --> 00:01:11,520
open BSD friends community which I ended

00:01:08,430 --> 00:01:15,470
I believe this year early this year by

00:01:11,520 --> 00:01:20,220
lack of time too much things to do and

00:01:15,470 --> 00:01:22,170
so I've been learning learning unix's in

00:01:20,220 --> 00:01:29,549
general starting from the OpenBSD

00:01:22,170 --> 00:01:31,680
background i and yeah i'm julian and so

00:01:29,549 --> 00:01:34,170
i'm an older guy so i won't actually

00:01:31,680 --> 00:01:37,259
tell you when i I started with

00:01:34,170 --> 00:01:39,240
open-source makes me feel so bad you can

00:01:37,259 --> 00:01:42,000
guess by the age of my CD ROM collection

00:01:39,240 --> 00:01:44,280
over there most of I guess most of you

00:01:42,000 --> 00:01:49,049
were not even born so that's a terrible

00:01:44,280 --> 00:01:53,009
thought and back in 90 back in 96 I

00:01:49,049 --> 00:01:56,100
think I translated this book which it's

00:01:53,009 --> 00:01:58,950
probably somewhere in your library which

00:01:56,100 --> 00:02:01,770
is the French version of of Kirk Marx

00:01:58,950 --> 00:02:04,259
mcusic's book on on BSD right and I know

00:02:01,770 --> 00:02:05,820
it was here a few days ago and it's it's

00:02:04,259 --> 00:02:08,280
a tragedy that I could not even get to

00:02:05,820 --> 00:02:10,860
meet him because I was travelling so hi

00:02:08,280 --> 00:02:13,700
Kirk me again

00:02:10,860 --> 00:02:13,700
alright and

00:02:13,900 --> 00:02:17,170
no

00:02:25,110 --> 00:02:34,180
[Applause]

00:02:31,200 --> 00:02:36,340
it's the first time we meet it's it's a

00:02:34,180 --> 00:02:37,360
Wow I know I cannot do this presentation

00:02:36,340 --> 00:02:44,110
anymore

00:02:37,360 --> 00:02:47,680
I feel so worthless you should be

00:02:44,110 --> 00:02:49,660
filming this guy yeah I didn't bring it

00:02:47,680 --> 00:02:52,660
but that's okay you made my day he's a

00:02:49,660 --> 00:02:58,630
legend is a proper legend alright so now

00:02:52,660 --> 00:03:02,530
we should be really good right okay so

00:02:58,630 --> 00:03:03,970
here's the agenda for now so we're going

00:03:02,530 --> 00:03:07,060
to talk about the AWS infrastructure

00:03:03,970 --> 00:03:10,560
just for a bit just to to show you what

00:03:07,060 --> 00:03:14,290
kind of architecture we have and then

00:03:10,560 --> 00:03:17,670
nikola is going to talk about instance

00:03:14,290 --> 00:03:21,340
these virtual machines operating systems

00:03:17,670 --> 00:03:23,110
and we'll start some benchmarks right

00:03:21,340 --> 00:03:26,739
because it's important to see how fast

00:03:23,110 --> 00:03:29,049
things are running and then we'll spend

00:03:26,739 --> 00:03:34,569
a bit of time talking about are you here

00:03:29,049 --> 00:03:38,819
- man I know everybody in here alright

00:03:34,569 --> 00:03:38,819
okay so now I need to be double good man

00:03:38,940 --> 00:03:44,650
we're going to look at how to build

00:03:41,230 --> 00:03:46,900
Amazon machine images with BSD and I

00:03:44,650 --> 00:03:48,970
it's an interesting process I will talk

00:03:46,900 --> 00:03:50,079
about automation quite a bit and then

00:03:48,970 --> 00:03:51,760
we'll look at the results of our

00:03:50,079 --> 00:03:55,540
benchmarks which hopefully will be

00:03:51,760 --> 00:03:57,940
complete right so don't be too fast all

00:03:55,540 --> 00:03:59,260
right and then we'll take your Q&A and

00:03:57,940 --> 00:04:01,450
actually we decided we would love to

00:03:59,260 --> 00:04:03,220
take your Q&A during the session right

00:04:01,450 --> 00:04:04,930
to make it more interactive so if

00:04:03,220 --> 00:04:07,660
there's anything that doesn't make sense

00:04:04,930 --> 00:04:10,359
anything you disagree with if you want

00:04:07,660 --> 00:04:11,889
to throw stuff at us that's okay you

00:04:10,359 --> 00:04:13,019
know where we can take it we've seen

00:04:11,889 --> 00:04:15,910
worse

00:04:13,019 --> 00:04:18,160
okay a word about infrastructure then so

00:04:15,910 --> 00:04:21,489
as you probably know our infrastructure

00:04:18,160 --> 00:04:26,260
is spread across 16 regions across the

00:04:21,489 --> 00:04:27,880
world these regions are broken into

00:04:26,260 --> 00:04:30,820
availability zones which are

00:04:27,880 --> 00:04:32,810
infrastructure partitions that are close

00:04:30,820 --> 00:04:35,870
enough to low for rapid

00:04:32,810 --> 00:04:39,110
etc but far enough so that if one of

00:04:35,870 --> 00:04:43,100
them actually explodes or if a volcano

00:04:39,110 --> 00:04:45,500
erupts in Dublin probably then you know

00:04:43,100 --> 00:04:47,870
the other one should keep running and we

00:04:45,500 --> 00:04:50,530
have a whole lot of edge locations and

00:04:47,870 --> 00:04:53,389
I'm sure this number is already false

00:04:50,530 --> 00:04:56,810
these are the locations for the cloud

00:04:53,389 --> 00:04:59,900
front service which is our content

00:04:56,810 --> 00:05:04,720
delivery network which spans you know

00:04:59,900 --> 00:05:08,720
the globe now so a region is a number of

00:05:04,720 --> 00:05:11,210
data centers and when I say a number the

00:05:08,720 --> 00:05:13,820
number is larger than one right I know

00:05:11,210 --> 00:05:17,030
some let's yeah let's call them

00:05:13,820 --> 00:05:18,500
competitors like to call regions one

00:05:17,030 --> 00:05:20,960
there are center for us it's much more

00:05:18,500 --> 00:05:23,510
because we think redundancy and hea is

00:05:20,960 --> 00:05:26,240
really really important so we have

00:05:23,510 --> 00:05:28,400
multiple availability zones we'll talk

00:05:26,240 --> 00:05:30,620
about that in a second they're fully

00:05:28,400 --> 00:05:33,770
connected with a very very low latency

00:05:30,620 --> 00:05:36,800
network usually less than one

00:05:33,770 --> 00:05:39,410
millisecond which really allows us to

00:05:36,800 --> 00:05:41,780
replicate data you know storage

00:05:39,410 --> 00:05:44,510
databases etc to replicate it even

00:05:41,780 --> 00:05:46,250
synchronously so that's one of the

00:05:44,510 --> 00:05:49,070
regions and you probably know we're

00:05:46,250 --> 00:05:52,970
going to open a region in France this

00:05:49,070 --> 00:05:57,470
year yeah this year right so it's

00:05:52,970 --> 00:06:01,340
between now and December 31st 11:59 a.m.

00:05:57,470 --> 00:06:02,990
59 seconds right people keep asking me

00:06:01,340 --> 00:06:04,400
yeah they asked me for the day on

00:06:02,990 --> 00:06:08,450
Twitter all the time like I was gonna

00:06:04,400 --> 00:06:10,720
say yeah this year all right if you want

00:06:08,450 --> 00:06:13,789
to know more about this stuff there's a

00:06:10,720 --> 00:06:16,880
well just a brilliant presentation from

00:06:13,789 --> 00:06:18,890
reinvent by James Hamilton who's one of

00:06:16,880 --> 00:06:22,729
our infrastructure gurus I cannot

00:06:18,890 --> 00:06:26,810
recommend it hard enough it's yeah it's

00:06:22,729 --> 00:06:29,030
legendary too so inside an AZ we have

00:06:26,810 --> 00:06:30,440
multiple data centers right so let's

00:06:29,030 --> 00:06:35,120
talk about the franchisees that are

00:06:30,440 --> 00:06:37,310
coming each AZ will be at least one data

00:06:35,120 --> 00:06:41,560
center but in fact it's it's always more

00:06:37,310 --> 00:06:44,479
right so the largest ACS could have six

00:06:41,560 --> 00:06:46,550
seven maybe a C's in the US you know

00:06:44,479 --> 00:06:50,639
there are older regions higher

00:06:46,550 --> 00:06:52,499
so each each AZ is going to be a number

00:06:50,639 --> 00:06:54,779
of data centers and again they're close

00:06:52,499 --> 00:06:56,729
enough that you know you can do

00:06:54,779 --> 00:06:59,909
synchronous stuff but distant enough so

00:06:56,729 --> 00:07:02,939
that if one is broken or if one has a

00:06:59,909 --> 00:07:05,309
power failure or or a fire or disaster

00:07:02,939 --> 00:07:07,229
like that the other one should keep

00:07:05,309 --> 00:07:09,689
running and when it comes to network

00:07:07,229 --> 00:07:13,619
latency they are very very close right

00:07:09,689 --> 00:07:17,339
we're very very low you know much much

00:07:13,619 --> 00:07:19,679
less than a millisecond so so this shows

00:07:17,339 --> 00:07:21,209
you that we have a multiple level of

00:07:19,679 --> 00:07:23,309
redundancy right we could lose a data

00:07:21,209 --> 00:07:26,909
center and not losing AZ we could lose

00:07:23,309 --> 00:07:30,319
an AZ and not lose the region we could

00:07:26,909 --> 00:07:34,169
lose a region god forbid never happened

00:07:30,319 --> 00:07:36,929
and if you had a multi region design you

00:07:34,169 --> 00:07:38,899
probably would be okay I guess we'll

00:07:36,929 --> 00:07:43,139
find out when we lose the region right

00:07:38,899 --> 00:07:45,449
not not soon I hope and inside the data

00:07:43,139 --> 00:07:47,699
center well we guess what we have racks

00:07:45,449 --> 00:07:50,339
and servers that's not really original

00:07:47,699 --> 00:07:51,419
except it's all custom stuff right and

00:07:50,339 --> 00:07:53,610
if you want to know more about that

00:07:51,419 --> 00:07:56,159
please look at James Hamilton's keynote

00:07:53,610 --> 00:07:58,349
it goes into some of the detail for the

00:07:56,159 --> 00:08:00,389
servers and the routing and the the

00:07:58,349 --> 00:08:02,759
network equipment etc it's all custom

00:08:00,389 --> 00:08:04,979
everything hundred percent because we

00:08:02,759 --> 00:08:06,929
think this is where we have a advantage

00:08:04,979 --> 00:08:08,419
from a technology point of view and a

00:08:06,929 --> 00:08:11,009
price point of view of of course as well

00:08:08,419 --> 00:08:13,909
so we decided not to have very large

00:08:11,009 --> 00:08:16,919
data centers of course we could have

00:08:13,909 --> 00:08:20,369
much more than 50k servers inside the

00:08:16,919 --> 00:08:24,599
data center but if they go too big then

00:08:20,369 --> 00:08:27,239
if one dies the blast radius the impact

00:08:24,599 --> 00:08:29,849
on the rest of the system is terrible so

00:08:27,239 --> 00:08:34,019
we stick to I would say mid sized data

00:08:29,849 --> 00:08:38,159
centers and we built many of them right

00:08:34,019 --> 00:08:43,729
next to one another okay make sense all

00:08:38,159 --> 00:08:43,729
right mr. David your turn

00:08:44,540 --> 00:08:49,770
all right so let's talk about instances

00:08:47,100 --> 00:08:50,990
those virtual machines in the cloud and

00:08:49,770 --> 00:08:53,190
os's

00:08:50,990 --> 00:08:53,910
I'll start with saying that we call them

00:08:53,190 --> 00:08:57,420
easy too

00:08:53,910 --> 00:09:00,300
there will no not be any ec3 or ec1 ever

00:08:57,420 --> 00:09:04,980
if you to stands for elastic cloud

00:09:00,300 --> 00:09:06,959
compute and so those machines or virtual

00:09:04,980 --> 00:09:11,580
machines based on the exam hypervisor

00:09:06,959 --> 00:09:13,320
for now and then in the future some

00:09:11,580 --> 00:09:16,560
things are going to evolve and we signed

00:09:13,320 --> 00:09:18,300
a partnership with VMware last year I

00:09:16,560 --> 00:09:20,910
believe and things have grown really

00:09:18,300 --> 00:09:22,410
really fast this hypervisor is now

00:09:20,910 --> 00:09:26,810
available in one of the regions in the

00:09:22,410 --> 00:09:29,279
u.s. u.s. East one around Washington and

00:09:26,810 --> 00:09:30,660
then to run those machines you need of

00:09:29,279 --> 00:09:32,279
course hardware but you also need

00:09:30,660 --> 00:09:35,120
software and this is where it gets very

00:09:32,279 --> 00:09:38,370
interesting you have multiple places to

00:09:35,120 --> 00:09:40,620
grab I would say something called an ami

00:09:38,370 --> 00:09:44,430
an Amazon machine image so an OS

00:09:40,620 --> 00:09:46,680
template that contains euro s plus some

00:09:44,430 --> 00:09:50,730
more stuff by default

00:09:46,680 --> 00:09:53,730
AWS gives you access to a mi tsan well

00:09:50,730 --> 00:09:55,260
windows you have to have those Linux's

00:09:53,730 --> 00:09:59,670
and in some BS DS

00:09:55,260 --> 00:10:03,620
like freebsd for now and we're hoping to

00:09:59,670 --> 00:10:06,060
have an open BSD soon very soon and then

00:10:03,620 --> 00:10:08,579
so those I am eyes are pretty basic they

00:10:06,060 --> 00:10:11,450
only have the OS latest latest kernel

00:10:08,579 --> 00:10:14,520
latest patches and all of that stuff but

00:10:11,450 --> 00:10:15,899
then you might want to have something a

00:10:14,520 --> 00:10:18,810
little bit more custom you might want to

00:10:15,899 --> 00:10:20,910
add your own layer of security tools you

00:10:18,810 --> 00:10:23,190
know custom kernel and all of that stuff

00:10:20,910 --> 00:10:24,720
so you may want to create your own AMI

00:10:23,190 --> 00:10:26,730
this is by the way one of the things

00:10:24,720 --> 00:10:29,459
we'll be attempting to do on open BSD

00:10:26,730 --> 00:10:33,779
using some of the stuff that aunt when

00:10:29,459 --> 00:10:35,370
she could have been doing in the past so

00:10:33,779 --> 00:10:36,930
you can create your own ami put all your

00:10:35,370 --> 00:10:38,700
stuff in there and then eventually share

00:10:36,930 --> 00:10:40,110
it with the entire world which becomes

00:10:38,700 --> 00:10:43,290
really interesting when you want to

00:10:40,110 --> 00:10:45,180
distribute your software in the past it

00:10:43,290 --> 00:10:49,020
used to be you know floppies large

00:10:45,180 --> 00:10:51,029
smaller CDs DVDs download and now you

00:10:49,020 --> 00:10:53,160
can run your own server with the

00:10:51,029 --> 00:10:55,650
application already pre-installed so no

00:10:53,160 --> 00:10:58,020
one can tell you well you've done it

00:10:55,650 --> 00:11:00,959
wrong right it's the software

00:10:58,020 --> 00:11:04,260
or the the person granting access to

00:11:00,959 --> 00:11:06,240
this am I the is making sure that this

00:11:04,260 --> 00:11:08,040
ami has all the right configuration the

00:11:06,240 --> 00:11:10,170
right tools so when you boot it when you

00:11:08,040 --> 00:11:15,450
boot your instance everything is running

00:11:10,170 --> 00:11:16,950
fine and then you know this being said

00:11:15,450 --> 00:11:20,820
you might want to make some money with

00:11:16,950 --> 00:11:23,279
this ami at some point in time and then

00:11:20,820 --> 00:11:25,410
in order to make some money with that we

00:11:23,279 --> 00:11:28,190
have a place called the marketplace the

00:11:25,410 --> 00:11:31,830
marketplace allows you to sell

00:11:28,190 --> 00:11:33,690
quote-unquote by the hour the license to

00:11:31,830 --> 00:11:36,450
your ami to your software installed on

00:11:33,690 --> 00:11:38,700
the ami so you can either pay a little

00:11:36,450 --> 00:11:41,640
bit per hour or you can pay you know per

00:11:38,700 --> 00:11:43,920
agreement on the one-year term is the

00:11:41,640 --> 00:11:45,630
most I've seen so far so it's pretty

00:11:43,920 --> 00:11:49,050
interesting for places to get your ami

00:11:45,630 --> 00:11:51,930
and then inside of this ami you have the

00:11:49,050 --> 00:11:54,570
software and the US and you you want to

00:11:51,930 --> 00:11:56,580
instantiate that on some hardware so for

00:11:54,570 --> 00:11:58,260
some hardware we have a little bit of

00:11:56,580 --> 00:12:02,870
combinations of hardware you'll see that

00:11:58,260 --> 00:12:06,180
in the next next slides and then and

00:12:02,870 --> 00:12:08,670
until now you had to pay by the hour of

00:12:06,180 --> 00:12:10,140
those resources so the compute the

00:12:08,670 --> 00:12:12,480
storage and then some of the network

00:12:10,140 --> 00:12:15,390
stuff starting October 2nd you will pay

00:12:12,480 --> 00:12:16,829
on a per second basis which is very

00:12:15,390 --> 00:12:19,380
interesting because most of the stuff

00:12:16,829 --> 00:12:22,020
that you run doesn't it you know require

00:12:19,380 --> 00:12:23,640
an entire hour of time maybe you require

00:12:22,020 --> 00:12:26,100
five minutes and you don't want to pay

00:12:23,640 --> 00:12:28,740
for an entire hour so you'll pay for you

00:12:26,100 --> 00:12:30,720
know one minute the boot time and then

00:12:28,740 --> 00:12:32,490
the rest of it will be the running time

00:12:30,720 --> 00:12:35,130
of your instance so this is coming up

00:12:32,490 --> 00:12:37,529
October 2nd and this is only for Nexus

00:12:35,130 --> 00:12:41,160
you know the windows license had maybe

00:12:37,529 --> 00:12:45,000
some things to do with it right and so

00:12:41,160 --> 00:12:47,040
you may wanna you want to say well you

00:12:45,000 --> 00:12:49,470
know this VM is cheaper at somewhere

00:12:47,040 --> 00:12:52,980
else somewhere SS place and it's not

00:12:49,470 --> 00:12:55,380
really the case you might want to think

00:12:52,980 --> 00:12:57,630
about comparing apples and oranges we

00:12:55,380 --> 00:13:01,709
have as Gina said a very broad

00:12:57,630 --> 00:13:03,390
geographical cover we also have a bunch

00:13:01,709 --> 00:13:06,180
of services an ecosystem of services

00:13:03,390 --> 00:13:08,400
running with those ec2 instances there's

00:13:06,180 --> 00:13:10,620
about a hundred services now going from

00:13:08,400 --> 00:13:11,459
very basic stuff compute storage network

00:13:10,620 --> 00:13:15,149
all the way up

00:13:11,459 --> 00:13:19,259
to IOT machine-learning elasticsearch

00:13:15,149 --> 00:13:21,509
and all that cool stuff inside of a

00:13:19,259 --> 00:13:22,740
region as Union pointed again we also

00:13:21,509 --> 00:13:24,689
have multiple availability zones

00:13:22,740 --> 00:13:27,209
allowing you to have high availability

00:13:24,689 --> 00:13:29,129
for your workloads and synchronizing

00:13:27,209 --> 00:13:33,149
your data between the distance those

00:13:29,129 --> 00:13:35,149
different availability zones so let's

00:13:33,149 --> 00:13:37,589
look at you know those instance types

00:13:35,149 --> 00:13:40,199
the naming scheme is pretty easy it's

00:13:37,589 --> 00:13:42,179
the family the generation and then the

00:13:40,199 --> 00:13:43,980
size of it just like t-shirts now we

00:13:42,179 --> 00:13:45,899
made it pretty simple except that

00:13:43,980 --> 00:13:49,619
sometimes the size goes really really

00:13:45,899 --> 00:13:50,879
big like this one may want to buy some

00:13:49,619 --> 00:13:51,480
sheets instead of a shirt that size

00:13:50,879 --> 00:13:55,079
right

00:13:51,480 --> 00:13:57,509
toga party something like that so we

00:13:55,079 --> 00:14:00,929
have GPU in some of the instance

00:13:57,509 --> 00:14:03,269
families the g3 family the p2 family the

00:14:00,929 --> 00:14:05,279
p2 is quite exceptional you have 16 GPUs

00:14:03,269 --> 00:14:09,360
its NVIDIA Quadro so if I remember

00:14:05,279 --> 00:14:13,139
correctly with about 12 to 12 gigs of

00:14:09,360 --> 00:14:15,300
ram on each of these GPUs so that leaves

00:14:13,139 --> 00:14:18,209
you quite a few possibilities to compute

00:14:15,300 --> 00:14:20,309
a lot of stuff right if you're looking

00:14:18,209 --> 00:14:22,350
at memory optimized instances the r

00:14:20,309 --> 00:14:25,199
family or the X family which is the

00:14:22,350 --> 00:14:28,589
biggest one that we have so far it's 128

00:14:25,199 --> 00:14:31,019
cores and 4 terabytes of RAM with a 25

00:14:28,589 --> 00:14:34,279
gig network interface again proprietary

00:14:31,019 --> 00:14:38,189
stuff that we built below this layer and

00:14:34,279 --> 00:14:40,019
we're extending it soon to 16 terabytes

00:14:38,189 --> 00:14:42,660
of RAM so if you're running you know

00:14:40,019 --> 00:14:44,309
in-memory databases or caches this is

00:14:42,660 --> 00:14:47,100
probably one of the sweetest instances

00:14:44,309 --> 00:14:50,100
to run your stuff on and then so the

00:14:47,100 --> 00:14:52,799
smallest instance is one core half a gig

00:14:50,100 --> 00:14:55,499
of ram and as I said the biggest 128

00:14:52,799 --> 00:14:56,939
cores 4 terabytes of RAM so in those

00:14:55,499 --> 00:14:58,139
families of instances you will have to

00:14:56,939 --> 00:15:00,689
choose something that fits your needs

00:14:58,139 --> 00:15:02,730
and ideally one of the things that we'll

00:15:00,689 --> 00:15:05,730
try to highlight with julia across those

00:15:02,730 --> 00:15:08,119
this presentation is that the size

00:15:05,730 --> 00:15:12,779
doesn't matter most of the time right

00:15:08,119 --> 00:15:14,790
yeah well I mean you know I'm just you

00:15:12,779 --> 00:15:19,049
know running in the urban legend size

00:15:14,790 --> 00:15:21,240
doesn't matter right and so and biggest

00:15:19,049 --> 00:15:23,790
instant size all the way to the most

00:15:21,240 --> 00:15:24,840
broad family the t2 family and you can

00:15:23,790 --> 00:15:26,970
see the CPUs here

00:15:24,840 --> 00:15:29,400
are all internal Zeon's and on those

00:15:26,970 --> 00:15:31,950
Intel CPUs you can tap onto a lot of

00:15:29,400 --> 00:15:33,870
things instruction sets P States and C

00:15:31,950 --> 00:15:36,000
States control a lot of things are

00:15:33,870 --> 00:15:38,060
available to you just to tweak your

00:15:36,000 --> 00:15:40,710
application for that

00:15:38,060 --> 00:15:42,690
so today Julia will be performing a few

00:15:40,710 --> 00:15:45,540
things that he'll tell you about on the

00:15:42,690 --> 00:15:51,270
i3 family the c-4 family and the x1

00:15:45,540 --> 00:15:52,680
family so the x1 family let's dive a

00:15:51,270 --> 00:15:55,470
little deeper into it

00:15:52,680 --> 00:15:59,880
it's Intel i7 Haswell processors the 25

00:15:55,470 --> 00:16:03,090
gig network interface is quite sweet and

00:15:59,880 --> 00:16:04,230
then the C for instance is the second

00:16:03,090 --> 00:16:07,010
family that you know will be using

00:16:04,230 --> 00:16:10,560
Haswell processors at 2.9 gigahertz

00:16:07,010 --> 00:16:12,660
instead of the usual 2.3 maximum so that

00:16:10,560 --> 00:16:14,700
means that we have custom CPUs you know

00:16:12,660 --> 00:16:16,710
Intel is one of the partners that we're

00:16:14,700 --> 00:16:19,680
working with and we're buying a lot of

00:16:16,710 --> 00:16:21,330
CPUs from them and I mean a lot right so

00:16:19,680 --> 00:16:23,310
at some point in time we want to make a

00:16:21,330 --> 00:16:25,830
market differentiator we want the same

00:16:23,310 --> 00:16:28,200
CPU that everybody else can have but at

00:16:25,830 --> 00:16:30,450
a higher frequency and this is about 30

00:16:28,200 --> 00:16:32,340
percent more performance than what you

00:16:30,450 --> 00:16:38,810
have on regular CPUs and it's only

00:16:32,340 --> 00:16:38,810
available on AWS okay yep

00:16:47,390 --> 00:16:50,460
[Music]

00:16:51,180 --> 00:17:07,420
it's for sockets of 32 yes you do

00:17:03,660 --> 00:17:09,160
actually the the the x1 is so it's a

00:17:07,420 --> 00:17:11,770
multiprocessor architecture with the

00:17:09,160 --> 00:17:15,220
Numa architecture so each socket has

00:17:11,770 --> 00:17:17,410
dedicated memory and that's how you get

00:17:15,220 --> 00:17:20,470
to 4 terabytes and see the amounts like

00:17:17,410 --> 00:17:24,070
that and if the OS supports it you know

00:17:20,470 --> 00:17:26,650
we can migrate frequently access pages

00:17:24,070 --> 00:17:29,470
to the closest CPU right

00:17:26,650 --> 00:17:33,130
so if CPU one is actually accessing

00:17:29,470 --> 00:17:36,130
memory from CPU 0 quite a lot then you

00:17:33,130 --> 00:17:38,410
know we can migrate that that stuff to

00:17:36,130 --> 00:17:44,400
the closest CPU but that that requires

00:17:38,410 --> 00:17:46,360
our support right thank you Judy yeah

00:17:44,400 --> 00:17:49,690
the last family that I want to talk

00:17:46,360 --> 00:17:52,120
about is sorry the i3 family I three

00:17:49,690 --> 00:17:53,800
stands for i/o and we mean a ton of i/o

00:17:52,120 --> 00:17:56,050
with this family of instances this is

00:17:53,800 --> 00:17:59,440
the newest generation of instances it's

00:17:56,050 --> 00:18:03,910
using nvme storage so quite fast and you

00:17:59,440 --> 00:18:06,430
can get up to 3.3 million iOS 3.3

00:18:03,910 --> 00:18:10,840
million iOS this is you know like fast

00:18:06,430 --> 00:18:13,030
really and then same thing at 25 gig eni

00:18:10,840 --> 00:18:15,430
elastic network interface available

00:18:13,030 --> 00:18:19,510
again on this instance half a terabytes

00:18:15,430 --> 00:18:20,290
of ram and 64 cores again custom cpu for

00:18:19,510 --> 00:18:23,140
this one as well

00:18:20,290 --> 00:18:28,330
lots of promising performance for this

00:18:23,140 --> 00:18:29,860
machine so we have the storage we have

00:18:28,330 --> 00:18:31,390
sorry the compute the memory we need to

00:18:29,860 --> 00:18:32,560
know about the storage that's you know

00:18:31,390 --> 00:18:34,720
what comes next

00:18:32,560 --> 00:18:37,420
this is where we'll store or instantiate

00:18:34,720 --> 00:18:40,540
our ami as well and so we have two main

00:18:37,420 --> 00:18:42,700
families of of storage we have classical

00:18:40,540 --> 00:18:46,030
standard magnetic hard drive and we have

00:18:42,700 --> 00:18:48,070
SSD drives for those two types of EBS

00:18:46,030 --> 00:18:51,460
volumes we call them EBS for elastic

00:18:48,070 --> 00:18:53,530
block store we do have a little bit of

00:18:51,460 --> 00:18:54,820
advantage so for example for the

00:18:53,530 --> 00:18:58,600
magnetic hard drive we're looking more

00:18:54,820 --> 00:19:00,790
at the throughput of those drives 250

00:18:58,600 --> 00:19:01,260
Meg's per second on the cold drives and

00:19:00,790 --> 00:19:03,690
then

00:19:01,260 --> 00:19:07,080
on the throughput optimized 500 Meg's

00:19:03,690 --> 00:19:09,510
per second versus on the SSD drive we

00:19:07,080 --> 00:19:10,770
have two types of families the general

00:19:09,510 --> 00:19:13,890
purpose and the provision die ups

00:19:10,770 --> 00:19:16,710
general purpose can burst up to 10,000

00:19:13,890 --> 00:19:19,740
IUP's and you can merge may be or raid

00:19:16,710 --> 00:19:22,140
one two three four of them so to go all

00:19:19,740 --> 00:19:23,850
the way up to 40,000 AI ups or

00:19:22,140 --> 00:19:25,890
eventually for your databases which

00:19:23,850 --> 00:19:27,330
require a lot of AI ops and we could

00:19:25,890 --> 00:19:30,150
have provision I of which deliver a

00:19:27,330 --> 00:19:32,490
constant 20,000 AI ups and then again

00:19:30,150 --> 00:19:33,840
you can raid two of them to get all the

00:19:32,490 --> 00:19:37,080
way up or multiple of them to get all

00:19:33,840 --> 00:19:39,150
the way up to 40,000 AI ups obviously

00:19:37,080 --> 00:19:41,130
it's this is probably going to be right

00:19:39,150 --> 00:19:43,470
0 surely going to be right 0 at minimum

00:19:41,130 --> 00:19:44,970
because behind each and every one of the

00:19:43,470 --> 00:19:48,840
blocks that we present for those types

00:19:44,970 --> 00:19:51,510
of storage are actual may be multiple

00:19:48,840 --> 00:19:53,010
physical blocks actual surely multiple

00:19:51,510 --> 00:19:54,540
physical blocks so that if we lose a

00:19:53,010 --> 00:19:56,790
hard drive you don't lose your data and

00:19:54,540 --> 00:19:58,260
then one of the questions that I get

00:19:56,790 --> 00:19:59,840
asked often is that you know how do you

00:19:58,260 --> 00:20:02,760
how do you guys destroy the hard drives

00:19:59,840 --> 00:20:04,740
you have a special process are you you

00:20:02,760 --> 00:20:06,050
know throwing it in the back of the data

00:20:04,740 --> 00:20:08,940
center and and you know eventually

00:20:06,050 --> 00:20:10,530
moving in somewhere else or do you have

00:20:08,940 --> 00:20:12,660
an actual process well we do have an

00:20:10,530 --> 00:20:14,820
actual process from the Department of

00:20:12,660 --> 00:20:15,930
Defense in the u.s. it's a three steps

00:20:14,820 --> 00:20:19,890
process pretty easy

00:20:15,930 --> 00:20:21,870
first one demagnetize second one with

00:20:19,890 --> 00:20:24,330
real holes at regular intervals just in

00:20:21,870 --> 00:20:27,110
case and then again just in case third

00:20:24,330 --> 00:20:30,030
part of the process we just shred them

00:20:27,110 --> 00:20:34,410
so then you can grow new hard drives

00:20:30,030 --> 00:20:39,000
right or eventually separate metal parts

00:20:34,410 --> 00:20:40,530
from the rest this storage the EBS

00:20:39,000 --> 00:20:42,570
storage is something you have to pay for

00:20:40,530 --> 00:20:44,700
but there's another option that is free

00:20:42,570 --> 00:20:47,280
we talked about the 3.3 million Arabs

00:20:44,700 --> 00:20:49,230
for the i3 family those are actually the

00:20:47,280 --> 00:20:53,100
hard drives the storage attached to the

00:20:49,230 --> 00:20:55,830
hypervisor and for the i3 family again

00:20:53,100 --> 00:20:57,900
3.3 million Arabs up to 15 point 2

00:20:55,830 --> 00:20:59,910
terabytes of storage but those hard

00:20:57,900 --> 00:21:01,710
drives are free good point

00:20:59,910 --> 00:21:04,800
they're really performant excellent

00:21:01,710 --> 00:21:07,890
point but the storage is not persistent

00:21:04,800 --> 00:21:09,300
how come right there's no such thing as

00:21:07,890 --> 00:21:11,210
a free lunch this is the thing that I

00:21:09,300 --> 00:21:13,350
grew up with so there must be something

00:21:11,210 --> 00:21:14,970
well when you start your instance you

00:21:13,350 --> 00:21:17,549
start your instance on a hypervisor

00:21:14,970 --> 00:21:19,710
and eventually if you stop and then

00:21:17,549 --> 00:21:21,120
start again your instance you have more

00:21:19,710 --> 00:21:22,679
chances of winning the lottery than

00:21:21,120 --> 00:21:25,980
running the instance on the same

00:21:22,679 --> 00:21:27,840
hypervisor again so for security and of

00:21:25,980 --> 00:21:29,940
course privacy issues we won't copy the

00:21:27,840 --> 00:21:31,650
data from one of the hard drives to one

00:21:29,940 --> 00:21:34,440
a hypervisor to another so you will lose

00:21:31,650 --> 00:21:36,240
this data however if you can work with

00:21:34,440 --> 00:21:38,059
that if you can cope with that knowing

00:21:36,240 --> 00:21:40,770
that this storage can be used for maybe

00:21:38,059 --> 00:21:43,200
temporary files transformation of files

00:21:40,770 --> 00:21:45,780
maybe video maybe other cool stuff that

00:21:43,200 --> 00:21:49,409
I don't know about this is really really

00:21:45,780 --> 00:21:51,630
fast um one of her customers Netflix you

00:21:49,409 --> 00:21:53,280
guys may have heard of them they're

00:21:51,630 --> 00:21:56,370
using more than a hundred thousand

00:21:53,280 --> 00:21:58,799
instances on AWS and they're not using

00:21:56,370 --> 00:22:00,179
anymore of the EBS drives because of the

00:21:58,799 --> 00:22:03,270
costs and because of the performance

00:22:00,179 --> 00:22:05,429
compared to instant storage and instant

00:22:03,270 --> 00:22:07,020
storage again is really really fast I

00:22:05,429 --> 00:22:11,270
mean this is this is you will see that

00:22:07,020 --> 00:22:13,740
in a minute really really fast and then

00:22:11,270 --> 00:22:21,179
it's free but then again you have to

00:22:13,740 --> 00:22:23,490
work with that so this is yes parts okay

00:22:21,179 --> 00:22:26,039
and thanks for all this information on

00:22:23,490 --> 00:22:29,100
instances but you know they have very

00:22:26,039 --> 00:22:31,830
different specs and we want to know how

00:22:29,100 --> 00:22:34,950
fast they are on real-life workloads you

00:22:31,830 --> 00:22:36,750
know benchmarking is awesome synthetic

00:22:34,950 --> 00:22:38,039
benchmark can be useful up to a point

00:22:36,750 --> 00:22:40,200
but at the end of the day you want to

00:22:38,039 --> 00:22:41,700
run a real workload and see what happens

00:22:40,200 --> 00:22:45,240
okay so that's what we're gonna do

00:22:41,700 --> 00:22:49,080
so I've picked the largest C for the

00:22:45,240 --> 00:22:51,809
largest x1 and the largest I three and

00:22:49,080 --> 00:22:53,940
here are the specs again and the set up

00:22:51,809 --> 00:22:56,159
and we're going to build the world on

00:22:53,940 --> 00:23:00,720
FreeBSD and see what's what

00:22:56,159 --> 00:23:03,750
right so I'm using 11.1 release which is

00:23:00,720 --> 00:23:04,200
uh the ami available right now on the

00:23:03,750 --> 00:23:09,809
marketplace

00:23:04,200 --> 00:23:11,789
all right and I think it's faster now

00:23:09,809 --> 00:23:14,460
with the latest you know the latest

00:23:11,789 --> 00:23:16,559
versions but DMI still 11.1 okay so I

00:23:14,460 --> 00:23:19,799
wanted to run the test that anybody can

00:23:16,559 --> 00:23:22,380
replay in five minutes or so okay so c4

00:23:19,799 --> 00:23:26,220
as you can see has a bit of memory a few

00:23:22,380 --> 00:23:28,649
cores network storage but I'm using

00:23:26,220 --> 00:23:29,340
provide provision I ops so I should have

00:23:28,649 --> 00:23:33,870
a reliable

00:23:29,340 --> 00:23:39,529
I am level there I'm using UF UF s as

00:23:33,870 --> 00:23:42,720
the file system x1 has a ton of memory a

00:23:39,529 --> 00:23:46,139
ton of course an instant store so I've

00:23:42,720 --> 00:23:49,649
got about 4 terabytes of local SSD to to

00:23:46,139 --> 00:23:53,909
build on and for my i3 I've got quite a

00:23:49,649 --> 00:23:58,200
bit of memory to a few cores that new

00:23:53,909 --> 00:24:00,570
generation of SSD GLE nvme and well

00:23:58,200 --> 00:24:03,840
since I have 8 volumes I figured I might

00:24:00,570 --> 00:24:05,940
give ZFS of ZFS or ZFS a try I'm madly

00:24:03,840 --> 00:24:08,070
in love with the ZFS so that's my excuse

00:24:05,940 --> 00:24:11,549
for trying it and so we're going to

00:24:08,070 --> 00:24:13,409
build and see what happens and I also

00:24:11,549 --> 00:24:15,149
did run those numbers with a ram disk

00:24:13,409 --> 00:24:16,799
and we'll see what's happening there

00:24:15,149 --> 00:24:19,740
it's interesting as well and we'll talk

00:24:16,799 --> 00:24:22,740
about the price the early price of each

00:24:19,740 --> 00:24:24,509
of those instances ok so just a few more

00:24:22,740 --> 00:24:26,190
details before we actually do this so

00:24:24,509 --> 00:24:31,230
once again I'm building on those three

00:24:26,190 --> 00:24:33,179
instance types for the DX one remember

00:24:31,230 --> 00:24:36,440
I've got two local SSD so I'm using one

00:24:33,179 --> 00:24:39,090
for USSR see you use one for us our Rob

00:24:36,440 --> 00:24:41,519
and I'm gonna use all available cores to

00:24:39,090 --> 00:24:43,590
build on the c4 I'm putting both

00:24:41,519 --> 00:24:46,590
directories on the same network volume

00:24:43,590 --> 00:24:48,360
with the 10k I ops that's the simplest

00:24:46,590 --> 00:24:50,940
way to do it and again I'm using all

00:24:48,360 --> 00:24:55,139
cores and for the i3 I'm creating two

00:24:50,940 --> 00:24:58,379
ZFS pools for SRC on herbs and using all

00:24:55,139 --> 00:25:00,149
course ok so let's do the set up real

00:24:58,379 --> 00:25:02,820
quick launch the benchmarks and then

00:25:00,149 --> 00:25:15,330
Nikola will go and explain how to build

00:25:02,820 --> 00:25:17,789
a nice one second just for the thing to

00:25:15,330 --> 00:25:24,950
refresh I want to see you terminal

00:25:17,789 --> 00:25:24,950
show me you terminal it's all black

00:25:32,840 --> 00:25:58,200
probably so no no not the region

00:25:43,080 --> 00:26:01,790
come on ah there we go I'm running my

00:25:58,200 --> 00:26:05,550
three instances there and I'm going to

00:26:01,790 --> 00:26:11,370
SSH to each of them which should already

00:26:05,550 --> 00:26:15,270
be the case right so here's my c4 is my

00:26:11,370 --> 00:26:16,620
x1 here's my three okay so in the

00:26:15,270 --> 00:26:19,140
interest of time I've got all the

00:26:16,620 --> 00:26:22,050
comments ready but I don't think you're

00:26:19,140 --> 00:26:26,160
going to learn anything here most likely

00:26:22,050 --> 00:26:30,420
you're gonna fix my fix my commands so

00:26:26,160 --> 00:26:32,670
for the c4 I'm just doing this right I'm

00:26:30,420 --> 00:26:35,580
just extracting sources which I think I

00:26:32,670 --> 00:26:38,310
don't know that already and just go and

00:26:35,580 --> 00:26:41,430
build world on 36 cores okay so we can

00:26:38,310 --> 00:26:43,850
just go and do this just make sure this

00:26:41,430 --> 00:26:43,850
is the right

00:26:47,990 --> 00:26:58,730
yeah that should be quite fast so on the

00:26:52,340 --> 00:27:03,200
x1 actually I can see right I can see my

00:26:58,730 --> 00:27:08,840
two instant store volumes here right XB

00:27:03,200 --> 00:27:15,470
d 1x PD - okay so I'm just gonna you

00:27:08,840 --> 00:27:16,100
know format them mount them that should

00:27:15,470 --> 00:27:22,280
be fast

00:27:16,100 --> 00:27:29,780
that's the x1 right okay okay and yeah

00:27:22,280 --> 00:27:31,810
go see for all right okay and now I can

00:27:29,780 --> 00:27:42,560
do pretty much the same thing

00:27:31,810 --> 00:27:44,060
extract sources and build alright and

00:27:42,560 --> 00:27:50,060
yeah maybe you want to see that thing

00:27:44,060 --> 00:27:57,860
actually happening right well of course

00:27:50,060 --> 00:28:01,820
all right okay so c4 is starting to

00:27:57,860 --> 00:28:05,600
build and then on the i3 same thing I

00:28:01,820 --> 00:28:09,860
can see my I can see my volumes here by

00:28:05,600 --> 00:28:20,950
8:00 and vme volumes here they are right

00:28:09,860 --> 00:28:20,950
and I'm gonna quickly build my pools

00:28:28,980 --> 00:28:49,029
okay all right so x1 is building - okay

00:28:39,250 --> 00:28:52,230
and same thing here okay so I can see my

00:28:49,029 --> 00:28:55,750
two pools we're ready to go

00:28:52,230 --> 00:29:00,720
extract the sources and build okay so

00:28:55,750 --> 00:29:03,820
this is gonna run for some minutes right

00:29:00,720 --> 00:29:06,159
and I'm just want to make sure this one

00:29:03,820 --> 00:29:08,649
is actually starting before handing the

00:29:06,159 --> 00:29:14,379
mic over back - yep so they were on

00:29:08,649 --> 00:29:24,220
their way here and yeah this one I guess

00:29:14,379 --> 00:29:28,899
oh yeah okay this one is starting -

00:29:24,220 --> 00:29:36,129
right okay so all three instances are

00:29:28,899 --> 00:29:37,750
building again let's show you let's show

00:29:36,129 --> 00:29:40,629
you those what's happening here oh yeah

00:29:37,750 --> 00:29:44,049
I just want to show you those specs once

00:29:40,629 --> 00:29:47,379
again so that you can decide which one

00:29:44,049 --> 00:29:49,480
you think is gonna be fastest right and

00:29:47,379 --> 00:29:51,970
you know just all right don't lie to

00:29:49,480 --> 00:29:56,200
yourself okay just pick one and don't

00:29:51,970 --> 00:30:01,929
change your mind okay yeah let's okay

00:29:56,200 --> 00:30:03,909
who's going for the c4 yeah come on just

00:30:01,929 --> 00:30:05,110
go ahead I mean it's gonna be closer

00:30:03,909 --> 00:30:11,529
it's gonna be closer than you think

00:30:05,110 --> 00:30:17,590
anyway right so okay who goes for x1 all

00:30:11,529 --> 00:30:18,909
right who goes for the high three okay

00:30:17,590 --> 00:30:21,639
so you don't you guys don't believe too

00:30:18,909 --> 00:30:23,620
much in the c4 right okay so and the

00:30:21,639 --> 00:30:27,309
rest is pretty much split so yeah it's

00:30:23,620 --> 00:30:29,610
like yeah most people are adults you

00:30:27,309 --> 00:30:33,460
know they're split between x1 and i3

00:30:29,610 --> 00:30:36,190
yeah okay well a brave soul I said the

00:30:33,460 --> 00:30:38,860
c-4 would win okay there is always a

00:30:36,190 --> 00:30:41,530
brave soul okay so that's fine we need

00:30:38,860 --> 00:30:44,160
brave souls in this silly world

00:30:41,530 --> 00:30:48,550
all right so it's it's it's going right

00:30:44,160 --> 00:30:51,370
okay so let's switch back to slides and

00:30:48,550 --> 00:30:54,100
we can check the results at the end okay

00:30:51,370 --> 00:30:57,220
yeah and Nicola is going into the

00:30:54,100 --> 00:31:01,660
process of building PSD OpenBSD right

00:30:57,220 --> 00:31:04,360
OpenBSD Mis I'm a FreeBSD guy like you

00:31:01,660 --> 00:31:07,120
understood but okay I you know come on

00:31:04,360 --> 00:31:10,620
we were to be you know we're brothers

00:31:07,120 --> 00:31:15,310
right so all right thank you should yeah

00:31:10,620 --> 00:31:18,490
so well Julian's build world is going on

00:31:15,310 --> 00:31:20,980
for all of those instances we'll just

00:31:18,490 --> 00:31:23,500
talk about building VSD a.m. eyes

00:31:20,980 --> 00:31:26,710
I think loja in the back of the room

00:31:23,500 --> 00:31:28,630
right there raise your hand man yeah he

00:31:26,710 --> 00:31:31,510
had a presentation yesterday a very nice

00:31:28,630 --> 00:31:33,670
presentation on how to build stuff with

00:31:31,510 --> 00:31:38,020
console right and OpenBSD

00:31:33,670 --> 00:31:41,290
and so part of the stuff that you use

00:31:38,020 --> 00:31:41,890
probably could be taken care of from the

00:31:41,290 --> 00:31:44,460
marketplace

00:31:41,890 --> 00:31:47,920
there's a lot of things available there

00:31:44,460 --> 00:31:49,900
but what I want to talk about today is

00:31:47,920 --> 00:31:51,640
to use a few tools other than just

00:31:49,900 --> 00:31:53,950
console but maybe in compliment of

00:31:51,640 --> 00:31:56,410
console like Packer for example which is

00:31:53,950 --> 00:31:58,060
from the same company maybe some other

00:31:56,410 --> 00:31:59,890
tools like the CLI which is the

00:31:58,060 --> 00:32:03,210
command-line interface or the shell CLI

00:31:59,890 --> 00:32:06,580
which I really really like about AWS or

00:32:03,210 --> 00:32:11,430
eventually I mean Atta for other os's

00:32:06,580 --> 00:32:15,250
right to build your own AMI and so

00:32:11,430 --> 00:32:17,680
there's one one template that we've

00:32:15,250 --> 00:32:19,360
we've shared to build your own CI CD

00:32:17,680 --> 00:32:22,330
pipeline and this is the idea behind

00:32:19,360 --> 00:32:24,850
what I want to show you is how we can

00:32:22,330 --> 00:32:29,620
bring some of the stuff we do manually

00:32:24,850 --> 00:32:31,450
on OpenBSD up to see ICD and then speed

00:32:29,620 --> 00:32:35,410
up some things and maybe check some more

00:32:31,450 --> 00:32:36,730
stuff and maybe use manage services so

00:32:35,410 --> 00:32:39,340
for those of you who don't know what

00:32:36,730 --> 00:32:40,750
manage services are it's the same thing

00:32:39,340 --> 00:32:42,730
as what you're doing with the hands but

00:32:40,750 --> 00:32:45,880
with no hands right it's usually cheaper

00:32:42,730 --> 00:32:50,700
it's usually as secure if not more

00:32:45,880 --> 00:32:53,740
secure and it's in a payment model in

00:32:50,700 --> 00:32:55,330
pay-as-you-go so if you consume it just

00:32:53,740 --> 00:32:57,010
like turning on the light in room

00:32:55,330 --> 00:32:58,240
you pay for the lights if you turn off

00:32:57,010 --> 00:33:01,060
the light you don't pay for the light

00:32:58,240 --> 00:33:05,170
anymore and that's the idea behind most

00:33:01,060 --> 00:33:07,960
of the managed services on AWS so we're

00:33:05,170 --> 00:33:10,510
going to build an open BSD AMI factory

00:33:07,960 --> 00:33:13,000
we're going to have a host which already

00:33:10,510 --> 00:33:15,430
runs open BSD and has about 12 gigs

00:33:13,000 --> 00:33:17,770
available so some room for the ami that

00:33:15,430 --> 00:33:20,200
we're going to create plus about 4 gigs

00:33:17,770 --> 00:33:25,270
of temporary files write something about

00:33:20,200 --> 00:33:28,750
right Rohan yeah we also going to use

00:33:25,270 --> 00:33:31,150
the create ami script from Antoine who

00:33:28,750 --> 00:33:33,850
basically brings everything together on

00:33:31,150 --> 00:33:36,010
a local file system and then with a

00:33:33,850 --> 00:33:39,220
little bit of magic pushes it to a

00:33:36,010 --> 00:33:41,980
storage service on AWS called s3 again

00:33:39,220 --> 00:33:43,840
there will not be any s4 s3 stands for

00:33:41,980 --> 00:33:45,850
simple storage service it's one of the

00:33:43,840 --> 00:33:50,470
oldest iw services I believe it's like

00:33:45,850 --> 00:33:53,740
12 or 13 years old and in the Ireland

00:33:50,470 --> 00:33:54,820
region it's one of the coolest services

00:33:53,740 --> 00:33:58,630
that I use

00:33:54,820 --> 00:34:01,090
it's about 2.2 cents per gig and it can

00:33:58,630 --> 00:34:02,890
also trigger notifications upon the

00:34:01,090 --> 00:34:05,320
arrival of a file so if something

00:34:02,890 --> 00:34:07,720
happens then poof I can eventually use

00:34:05,320 --> 00:34:10,300
this notification to run some code maybe

00:34:07,720 --> 00:34:12,100
you know do some modification of my

00:34:10,300 --> 00:34:14,440
infrastructure again just as long showed

00:34:12,100 --> 00:34:17,890
you in this previous presentation and so

00:34:14,440 --> 00:34:19,780
here what I want to do is this I went to

00:34:17,890 --> 00:34:22,570
commit my code and then eventually

00:34:19,780 --> 00:34:25,240
trigger a service called lambda lambda

00:34:22,570 --> 00:34:28,870
is a container managed service that runs

00:34:25,240 --> 00:34:31,420
your code in Java JavaScript Python or C

00:34:28,870 --> 00:34:33,700
sharp upon notification it runs between

00:34:31,420 --> 00:34:36,580
100 milliseconds and five minutes of

00:34:33,700 --> 00:34:38,440
time and the first million executions of

00:34:36,580 --> 00:34:41,950
that code or the first million execution

00:34:38,440 --> 00:34:46,300
of lambda is free forever the second

00:34:41,950 --> 00:34:48,880
million twenty cents pretty cheap right

00:34:46,300 --> 00:34:52,000
and so here I'm just needing to run this

00:34:48,880 --> 00:34:54,460
for maybe a split second to notify my

00:34:52,000 --> 00:34:56,440
OpenBSD host here to create a new ami

00:34:54,460 --> 00:34:58,870
that includes the code that I committed

00:34:56,440 --> 00:35:01,840
and then eventually notify me saying hey

00:34:58,870 --> 00:35:03,970
you know the a new ami is ready maybe

00:35:01,840 --> 00:35:06,310
you can use it with something called

00:35:03,970 --> 00:35:08,870
code pipeline could pipeline if you guys

00:35:06,310 --> 00:35:12,890
know Jenkins is about the same thing

00:35:08,870 --> 00:35:16,340
but in a managed way and very api AWS

00:35:12,890 --> 00:35:18,350
developer services oriented so once we

00:35:16,340 --> 00:35:20,780
have this notification code pipeline can

00:35:18,350 --> 00:35:22,570
then trigger another service sorry many

00:35:20,780 --> 00:35:24,920
services called CloudFormation

00:35:22,570 --> 00:35:27,920
CloudFormation is one of my favorite

00:35:24,920 --> 00:35:29,570
services again just as lambda in s3 but

00:35:27,920 --> 00:35:31,670
not my favorite one and then

00:35:29,570 --> 00:35:33,470
CloudFormation basically allows you to

00:35:31,670 --> 00:35:36,620
describe your infrastructure using

00:35:33,470 --> 00:35:40,340
either Jason or llamo whichever is your

00:35:36,620 --> 00:35:43,520
preference okay just like asking spaces

00:35:40,340 --> 00:35:47,300
or tabs something like that we won't do

00:35:43,520 --> 00:35:49,480
that today I promise yeah yeah

00:35:47,300 --> 00:35:49,480
absolutely

00:35:50,020 --> 00:35:56,000
and so platform ation will then take all

00:35:53,480 --> 00:35:57,470
of this information scan it identify the

00:35:56,000 --> 00:35:59,990
resources needed to be created first

00:35:57,470 --> 00:36:01,820
like network like security stuff and

00:35:59,990 --> 00:36:04,010
then the resources that it can it in

00:36:01,820 --> 00:36:06,260
parallel and so you can create your

00:36:04,010 --> 00:36:08,990
entire infrastructure really really fast

00:36:06,260 --> 00:36:11,720
this can be used for many things I want

00:36:08,990 --> 00:36:14,510
to deploy my application in uit or I

00:36:11,720 --> 00:36:17,390
want to deploy my dr with you know all

00:36:14,510 --> 00:36:19,670
of that stuff and the cool thing about

00:36:17,390 --> 00:36:21,710
it is that every time you create

00:36:19,670 --> 00:36:23,840
something it creates a stack that can be

00:36:21,710 --> 00:36:28,700
either updated with different behaviors

00:36:23,840 --> 00:36:29,840
or well main advantage from from

00:36:28,700 --> 00:36:33,290
transformation is that it creates

00:36:29,840 --> 00:36:35,800
idempotent stuff so the very same thing

00:36:33,290 --> 00:36:38,570
all the time things that us humans are

00:36:35,800 --> 00:36:42,860
most of the time not as good as you know

00:36:38,570 --> 00:36:44,240
services that yeah so once we have this

00:36:42,860 --> 00:36:46,940
done CloudFormation will deploy the

00:36:44,240 --> 00:36:49,820
application in UAT you will then be able

00:36:46,940 --> 00:36:51,380
to run some stuff right some of the

00:36:49,820 --> 00:36:53,270
stuff that we can run maybe security

00:36:51,380 --> 00:36:56,480
slash compliance tests we have a service

00:36:53,270 --> 00:36:58,400
for that called inspector if you guys

00:36:56,480 --> 00:37:01,220
know missus this is a managed version of

00:36:58,400 --> 00:37:04,820
misuse kind of thing we have a different

00:37:01,220 --> 00:37:06,860
set of tests or books of tests that have

00:37:04,820 --> 00:37:08,750
been created and some of them are quite

00:37:06,860 --> 00:37:11,480
interesting pci DSS compliant for

00:37:08,750 --> 00:37:13,010
example so to run this on your

00:37:11,480 --> 00:37:15,140
application maybe you want to do load

00:37:13,010 --> 00:37:17,120
tests really like the name of this one

00:37:15,140 --> 00:37:19,370
really cool it's called bees with

00:37:17,120 --> 00:37:21,710
machine guns it's a tool from News Corp

00:37:19,370 --> 00:37:22,430
if you guys know News Corp pretty good

00:37:21,710 --> 00:37:23,869
pretty cool

00:37:22,430 --> 00:37:26,329
company and then maybe some other stuff

00:37:23,869 --> 00:37:27,500
you want to maybe test load and security

00:37:26,329 --> 00:37:30,079
at the same time you know if your

00:37:27,500 --> 00:37:32,089
application behaves the same way with a

00:37:30,079 --> 00:37:34,339
full load or eventually more than

00:37:32,089 --> 00:37:37,069
expected load and then maybe some

00:37:34,339 --> 00:37:38,720
features is it still working do I have

00:37:37,069 --> 00:37:42,050
to have manual intervention or can I do

00:37:38,720 --> 00:37:43,250
it automatically so with that then you

00:37:42,050 --> 00:37:44,599
have some results and then you can

00:37:43,250 --> 00:37:46,069
either feed that back to the developer

00:37:44,599 --> 00:37:48,680
because hey you missed out on something

00:37:46,069 --> 00:37:51,500
here or maybe the percentage of comments

00:37:48,680 --> 00:37:54,109
versus the percentage of code is not you

00:37:51,500 --> 00:37:55,640
know good enough and then eventually

00:37:54,109 --> 00:37:56,720
things will go well and then you can

00:37:55,640 --> 00:37:59,900
move on from UAT

00:37:56,720 --> 00:38:01,339
to production this is the goal and then

00:37:59,900 --> 00:38:04,160
you can use the blue-green deployment

00:38:01,339 --> 00:38:05,690
methods for example with the blue the

00:38:04,160 --> 00:38:07,550
existing environment and in the green

00:38:05,690 --> 00:38:10,280
the new environment so to switch from

00:38:07,550 --> 00:38:12,349
one to another without interrupting the

00:38:10,280 --> 00:38:16,270
customers experience it's one of the

00:38:12,349 --> 00:38:20,690
goals right I want my stuff to work so

00:38:16,270 --> 00:38:22,970
that said I think it's this one yes it's

00:38:20,690 --> 00:38:27,230
right where I start to do some some

00:38:22,970 --> 00:38:29,720
demos all right so did I do any chickens

00:38:27,230 --> 00:38:35,180
enough chickens today so that my demos

00:38:29,720 --> 00:38:41,059
will run well okay so let's yeah let's

00:38:35,180 --> 00:38:47,270
take this one loop and in this move onto

00:38:41,059 --> 00:38:51,040
here and an SSH to my OpenBSD host so as

00:38:47,270 --> 00:38:56,809
you can see this is six point one and

00:38:51,040 --> 00:38:57,619
then sorry - edge a little bit of stuff

00:38:56,809 --> 00:39:00,170
going on here

00:38:57,619 --> 00:39:00,710
I haven't cleaned my stuff since since

00:39:00,170 --> 00:39:06,309
this morning

00:39:00,710 --> 00:39:12,350
actually since you know an hour ago yeah

00:39:06,309 --> 00:39:13,690
just-in-time delivery absolutely so I

00:39:12,350 --> 00:39:16,579
[Music]

00:39:13,690 --> 00:39:17,809
could do this automatically but I want

00:39:16,579 --> 00:39:21,740
you guys to see how things are working

00:39:17,809 --> 00:39:24,130
and do you have opened this in Adam

00:39:21,740 --> 00:39:24,130
already

00:39:29,300 --> 00:39:51,270
sorry about this no this is yours I'm so

00:39:48,410 --> 00:39:54,660
so I love information we want you to see

00:39:51,270 --> 00:39:57,780
there we go and this is the stuff that I

00:39:54,660 --> 00:39:59,790
will be loading so I'll be exporting

00:39:57,780 --> 00:40:03,480
some stuff and then I'm going to add

00:39:59,790 --> 00:40:08,640
some mirror I'm showing my keys I don't

00:40:03,480 --> 00:40:10,320
like that here we go I'm going to set a

00:40:08,640 --> 00:40:13,320
mirror for Ireland as my machine is

00:40:10,320 --> 00:40:16,500
running in Ireland region then I'm going

00:40:13,320 --> 00:40:19,580
to add some cool stuff clone my

00:40:16,500 --> 00:40:22,650
repository make some modifications

00:40:19,580 --> 00:40:27,740
somewhere here and then generate the ami

00:40:22,650 --> 00:40:27,740
so let's cut and paste there we go

00:40:31,250 --> 00:40:43,530
please don't take a photo of my Mikey's

00:40:34,560 --> 00:40:52,020
that would help really yeah okay mmm

00:40:43,530 --> 00:40:55,010
let's remove those keys real fast so

00:40:52,020 --> 00:40:59,670
let's run this I'm cloning some stuff

00:40:55,010 --> 00:41:02,040
all right getting the scripts and

00:40:59,670 --> 00:41:04,500
creating the ami so you've probably run

00:41:02,040 --> 00:41:06,090
seen this already creating the storage

00:41:04,500 --> 00:41:08,490
creating all of the stuff that I want to

00:41:06,090 --> 00:41:10,859
and then once this will be done I will

00:41:08,490 --> 00:41:15,270
be notifying the rest of my applications

00:41:10,859 --> 00:41:17,580
in the pipeline via a service called SNS

00:41:15,270 --> 00:41:20,940
for simple notification service right

00:41:17,580 --> 00:41:22,380
and it can send a lot of types of

00:41:20,940 --> 00:41:25,040
notification the one that I'm going to

00:41:22,380 --> 00:41:25,040
use is

00:41:25,780 --> 00:41:30,589
signifying the the end of a task to

00:41:28,609 --> 00:41:32,020
lambda so that lambda can run with the

00:41:30,589 --> 00:41:36,320
rest of it

00:41:32,020 --> 00:41:37,640
so as we're building this is something

00:41:36,320 --> 00:41:38,030
that none of you guys have seen before

00:41:37,640 --> 00:41:43,250
right

00:41:38,030 --> 00:41:45,619
except my keys as I'm building this is

00:41:43,250 --> 00:41:47,450
one of the things that I want to draw

00:41:45,619 --> 00:41:50,570
your attention to this process is

00:41:47,450 --> 00:41:52,190
working it's a great process however it

00:41:50,570 --> 00:41:55,250
takes a little bit of time it takes a

00:41:52,190 --> 00:41:56,570
little bit of time because well some of

00:41:55,250 --> 00:41:58,730
the tools that we're using are not

00:41:56,570 --> 00:42:01,310
up-to-date some of the drivers may be

00:41:58,730 --> 00:42:03,589
that we're using are not giving their

00:42:01,310 --> 00:42:07,060
best and maybe this is one of the things

00:42:03,589 --> 00:42:10,730
that we might want to require you guys

00:42:07,060 --> 00:42:12,980
for some help help us make it better on

00:42:10,730 --> 00:42:14,869
AWS and there's a lot of things that can

00:42:12,980 --> 00:42:16,700
be done we have a slide later on for

00:42:14,869 --> 00:42:20,780
FreeBSD as well as some of the stuff

00:42:16,700 --> 00:42:22,369
that we're needing some help on um yeah

00:42:20,780 --> 00:42:25,910
there's a lot of people running a net

00:42:22,369 --> 00:42:28,339
bsd in australia on AWS and there's in

00:42:25,910 --> 00:42:30,650
the US and in Europe in Canada as well

00:42:28,339 --> 00:42:36,020
we're starting to see a lot of a lot of

00:42:30,650 --> 00:42:39,950
open BSD thanks to Antoine and Reich yes

00:42:36,020 --> 00:42:41,869
that helped us alright so this is being

00:42:39,950 --> 00:42:50,060
built let me go back to the slides real

00:42:41,869 --> 00:42:52,070
quick there we go this is it so we're at

00:42:50,060 --> 00:42:53,720
this stage right here we're pushing the

00:42:52,070 --> 00:42:55,849
notification here and then we're

00:42:53,720 --> 00:42:58,190
building this once this is done the

00:42:55,849 --> 00:42:59,960
notification will go here could pipeline

00:42:58,190 --> 00:43:03,470
will trigger launch cloud formation and

00:42:59,960 --> 00:43:06,109
deploy the application so platform ation

00:43:03,470 --> 00:43:08,900
is quite easy actually once you get used

00:43:06,109 --> 00:43:11,450
to it but this is only for AWS one of

00:43:08,900 --> 00:43:13,339
the services that you know is dedicated

00:43:11,450 --> 00:43:16,310
for AWS however if you want something

00:43:13,339 --> 00:43:17,810
that is more platform agnostic right you

00:43:16,310 --> 00:43:20,930
guys have probably heard of a tool

00:43:17,810 --> 00:43:22,849
called telephone right and this is

00:43:20,930 --> 00:43:25,070
pretty cool because you use one DSN and

00:43:22,849 --> 00:43:27,200
then you plug whatever you want behind

00:43:25,070 --> 00:43:29,930
it and start running about the same

00:43:27,200 --> 00:43:32,240
thing again apples and oranges in those

00:43:29,930 --> 00:43:34,150
different environments I've seen a lot

00:43:32,240 --> 00:43:36,380
of customers doing this with VMware

00:43:34,150 --> 00:43:37,580
because you know it was already there

00:43:36,380 --> 00:43:39,350
and you need you know you bought those

00:43:37,580 --> 00:43:41,510
very very

00:43:39,350 --> 00:43:47,330
costs costly licenses so you need to

00:43:41,510 --> 00:43:49,400
maybe use them at some point and so yeah

00:43:47,330 --> 00:43:51,440
by API interactions by CloudFormation

00:43:49,400 --> 00:43:55,040
you can do stuff inside of AWS or

00:43:51,440 --> 00:43:57,290
outside of the AWS I could be talking

00:43:55,040 --> 00:43:59,690
about chef maybe your puppet or

00:43:57,290 --> 00:44:01,550
unseeable or salt where once your

00:43:59,690 --> 00:44:03,110
application is deployed you have

00:44:01,550 --> 00:44:04,730
different configurations between you IT

00:44:03,110 --> 00:44:07,070
and production so maybe you put

00:44:04,730 --> 00:44:09,440
everything that is most stable

00:44:07,070 --> 00:44:10,880
quote-unquote or most non moving parts

00:44:09,440 --> 00:44:12,530
into your AMI

00:44:10,880 --> 00:44:16,250
and then the moving parts you can add

00:44:12,530 --> 00:44:17,030
them later on once your once your ami

00:44:16,250 --> 00:44:19,370
has been baked

00:44:17,030 --> 00:44:21,200
once your ami has been used to deploy

00:44:19,370 --> 00:44:22,910
and create new instances in your

00:44:21,200 --> 00:44:24,770
environments and maybe you can modify

00:44:22,910 --> 00:44:26,270
the configuration and then those

00:44:24,770 --> 00:44:29,150
configuration management tools are

00:44:26,270 --> 00:44:31,610
really good to do this at a large scale

00:44:29,150 --> 00:44:33,230
because let's face it I'm doing it with

00:44:31,610 --> 00:44:35,660
a few instances here but maybe you could

00:44:33,230 --> 00:44:38,060
do it for hundreds a thousand a hundred

00:44:35,660 --> 00:44:43,450
thousand instances maybe at the scale of

00:44:38,060 --> 00:44:43,450
some of our largest customers right yep

00:44:56,300 --> 00:45:01,740
yep yep you can do that absolutely

00:44:58,800 --> 00:45:03,150
that's a great question again most of

00:45:01,740 --> 00:45:04,770
them most of the stuff that I'm doing is

00:45:03,150 --> 00:45:06,810
just a one-shot thing just to show you

00:45:04,770 --> 00:45:08,550
how it will run the first time but later

00:45:06,810 --> 00:45:12,030
on you will have to maybe maintain more

00:45:08,550 --> 00:45:14,520
am is maybe more versions of your

00:45:12,030 --> 00:45:16,050
application and think about it 1 am i /

00:45:14,520 --> 00:45:18,150
version of your application the boot

00:45:16,050 --> 00:45:22,500
time of a machine is what 1 to 3 minutes

00:45:18,150 --> 00:45:24,330
for most of the unix's quite fast so you

00:45:22,500 --> 00:45:26,670
can boot that and deploy that with the

00:45:24,330 --> 00:45:29,190
template that was the version of your

00:45:26,670 --> 00:45:30,540
application equals the template so you

00:45:29,190 --> 00:45:32,369
have a template and an ami you can

00:45:30,540 --> 00:45:33,869
deploy that very easily and each and

00:45:32,369 --> 00:45:35,160
every one of the ami is that you create

00:45:33,869 --> 00:45:37,980
has a unique ID

00:45:35,160 --> 00:45:39,990
so it's a mi - something something

00:45:37,980 --> 00:45:42,119
something something hard to remember

00:45:39,990 --> 00:45:43,770
most of the time so you'd have to build

00:45:42,119 --> 00:45:46,170
some tools maybe with automation with

00:45:43,770 --> 00:45:48,540
the CLI with some scripts to have some

00:45:46,170 --> 00:45:51,890
kind of management of those a Mis and

00:45:48,540 --> 00:45:54,869
also good point you pay for the storage

00:45:51,890 --> 00:45:57,359
so as you create more and more a.m. eyes

00:45:54,869 --> 00:45:59,160
you may want to have some automated way

00:45:57,359 --> 00:46:02,730
of recreating those ami is very quickly

00:45:59,160 --> 00:46:05,730
and you know make the decision for cost

00:46:02,730 --> 00:46:08,460
as well right because storage or image

00:46:05,730 --> 00:46:10,770
generation time is going to take more or

00:46:08,460 --> 00:46:13,160
less money so you have to take something

00:46:10,770 --> 00:46:16,590
that is tailored to your needs

00:46:13,160 --> 00:46:20,310
ok does that make sense

00:46:16,590 --> 00:46:21,570
all right so while this image is

00:46:20,310 --> 00:46:23,100
building it's taking a little bit of

00:46:21,570 --> 00:46:25,340
time a little bit too much time actually

00:46:23,100 --> 00:46:28,500
this is what I was asking for some help

00:46:25,340 --> 00:46:31,920
it's right now it's about 20 to 25

00:46:28,500 --> 00:46:34,350
minutes to build an open BSD ami it's

00:46:31,920 --> 00:46:36,150
still reasonable you know by automation

00:46:34,350 --> 00:46:38,670
it's pretty good but we can make it

00:46:36,150 --> 00:46:41,609
faster we can make it a lot faster so

00:46:38,670 --> 00:46:44,910
for that drivers and tools or your best

00:46:41,609 --> 00:46:47,280
friends back to what I was saying

00:46:44,910 --> 00:46:49,260
earlier once once you're you've

00:46:47,280 --> 00:46:51,210
committed you back the ami you notified

00:46:49,260 --> 00:46:53,070
your teams and called pipeline you

00:46:51,210 --> 00:46:55,619
deploy in UAT environment and use this

00:46:53,070 --> 00:46:57,540
new ami you test your application and

00:46:55,619 --> 00:47:01,220
then once everything is satisfactory

00:46:57,540 --> 00:47:01,220
then you move on to the next stage yep

00:47:02,819 --> 00:47:08,739
this is what we're doing

00:47:06,299 --> 00:47:10,089
this is what we're doing and maybe Luhan

00:47:08,739 --> 00:47:15,390
technique was a little bit more faster

00:47:10,089 --> 00:47:17,440
than mine a little bit fashion oh okay

00:47:15,390 --> 00:47:22,479
from your experience how long does it

00:47:17,440 --> 00:47:25,199
take to build a am i from vagrant with

00:47:22,479 --> 00:47:25,199
Packer yeah sorry

00:47:32,130 --> 00:47:36,849
so with different tools see we can split

00:47:34,569 --> 00:47:41,160
the the building time in half I'm sure

00:47:36,849 --> 00:47:41,160
we can do a lot faster I'm really sure

00:47:41,999 --> 00:47:56,769
yep mm-hmm

00:47:53,670 --> 00:48:00,910
okay so different techniques maybe

00:47:56,769 --> 00:48:02,529
different results I'm just like you

00:48:00,910 --> 00:48:04,029
probably need you know you don't have to

00:48:02,529 --> 00:48:07,839
pick one or the other I mean sometime

00:48:04,029 --> 00:48:09,880
most of the time you you want to be on

00:48:07,839 --> 00:48:11,650
this table on this table OS and you just

00:48:09,880 --> 00:48:13,839
want to maybe you know rebuild EMI and

00:48:11,650 --> 00:48:15,549
add extra stuff and when there's a new

00:48:13,839 --> 00:48:16,809
version coming out then yeah maybe you

00:48:15,549 --> 00:48:19,329
want to rebuild completely from scratch

00:48:16,809 --> 00:48:20,920
so it's a combination right it's a

00:48:19,329 --> 00:48:22,299
combination and and most of the time

00:48:20,920 --> 00:48:24,579
you're just going to be deploying your

00:48:22,299 --> 00:48:26,589
rap anyway on the latest ami that you

00:48:24,579 --> 00:48:29,319
have so that's gonna be really fast so

00:48:26,589 --> 00:48:32,709
it could be just deploy the app just you

00:48:29,319 --> 00:48:35,170
know do what you were doing start from a

00:48:32,709 --> 00:48:37,239
stable OS and and build my mi or rebuild

00:48:35,170 --> 00:48:39,569
it completely all three makes sense at

00:48:37,239 --> 00:48:42,789
some point in your development process

00:48:39,569 --> 00:48:45,099
right so takeaways from this is that

00:48:42,789 --> 00:48:47,109
DevOps is for ami is but it's also maybe

00:48:45,099 --> 00:48:49,329
for containers you've seen probably the

00:48:47,109 --> 00:48:51,989
process resembling some some other stuff

00:48:49,329 --> 00:48:55,059
like maybe docker or things like that

00:48:51,989 --> 00:48:57,190
try to use services instead of servers

00:48:55,059 --> 00:49:00,309
right so to you know make up some more

00:48:57,190 --> 00:49:03,489
time to more to experiment more things

00:49:00,309 --> 00:49:07,089
more services right and this is clearly

00:49:03,489 --> 00:49:10,479
going towards DevOps I know but this is

00:49:07,089 --> 00:49:13,420
the way you're using AWS to the most

00:49:10,479 --> 00:49:13,890
agile way to use AWS security again is

00:49:13,420 --> 00:49:16,410
something

00:49:13,890 --> 00:49:18,510
very important again when you're renting

00:49:16,410 --> 00:49:20,940
those services to access different parts

00:49:18,510 --> 00:49:22,080
we have a service called IIM that I

00:49:20,940 --> 00:49:24,030
didn't show sorry

00:49:22,080 --> 00:49:26,400
lack of time identity and access

00:49:24,030 --> 00:49:29,520
management which handles users groups

00:49:26,400 --> 00:49:30,870
policies and roles which can be assumed

00:49:29,520 --> 00:49:32,630
by different services or different

00:49:30,870 --> 00:49:34,260
resources to talk to each other and

00:49:32,630 --> 00:49:35,850
along the way

00:49:34,260 --> 00:49:37,470
when you're going to build this CIC D

00:49:35,850 --> 00:49:41,820
pipeline you're going to have to use

00:49:37,470 --> 00:49:43,560
roles and make sure that you use the the

00:49:41,820 --> 00:49:46,110
least amount of privileges for the right

00:49:43,560 --> 00:49:47,700
amount of actions okay and then last but

00:49:46,110 --> 00:49:50,700
not least one of the advantages is

00:49:47,700 --> 00:49:52,860
clearly to pay by the usage of what you

00:49:50,700 --> 00:49:54,810
need one of the services that I didn't

00:49:52,860 --> 00:49:57,630
show you is called code build that can

00:49:54,810 --> 00:50:01,560
build your code and you pay by the time

00:49:57,630 --> 00:50:02,820
of execution and the number of builds so

00:50:01,560 --> 00:50:04,980
quite interesting as well instead of

00:50:02,820 --> 00:50:07,230
maintaining everything together many

00:50:04,980 --> 00:50:14,130
services can help you with that with

00:50:07,230 --> 00:50:16,140
that remote before looking at the

00:50:14,130 --> 00:50:17,670
benchmark results this is how you can

00:50:16,140 --> 00:50:22,530
help so if you're involved in the

00:50:17,670 --> 00:50:26,280
FreeBSD sorry the OpenBSD community then

00:50:22,530 --> 00:50:29,340
helping us improve the speed of those

00:50:26,280 --> 00:50:33,150
scripts is definitely top of the list so

00:50:29,340 --> 00:50:34,740
please get in touch and if you're if you

00:50:33,150 --> 00:50:39,570
made the right choice in your life and

00:50:34,740 --> 00:50:43,410
you're actually using FreeBSD then oh it

00:50:39,570 --> 00:50:47,070
is the FreeBSD room I told you yeah yeah

00:50:43,410 --> 00:50:48,840
Colleen is our is our hero so yeah thank

00:50:47,070 --> 00:50:51,990
you so much for for the hard work on

00:50:48,840 --> 00:50:53,940
building those a.m. eyes and it's part

00:50:51,990 --> 00:50:57,600
of the FreeBSD core team as you know and

00:50:53,940 --> 00:51:00,450
II need your help on testing FreeBSD on

00:50:57,600 --> 00:51:03,570
AWS need your help on writing

00:51:00,450 --> 00:51:05,220
documentation which is always so

00:51:03,570 --> 00:51:08,610
important and sometimes you know the

00:51:05,220 --> 00:51:10,980
most difficult part of open-source so

00:51:08,610 --> 00:51:13,590
please help out and any any help that

00:51:10,980 --> 00:51:18,420
you can provide also on you know having

00:51:13,590 --> 00:51:20,970
one-click instant everything for freebsd

00:51:18,420 --> 00:51:23,040
would be very nice today we have the M

00:51:20,970 --> 00:51:25,560
eyes but we would love to have no proper

00:51:23,040 --> 00:51:27,400
packages proper a.m. eyes ready to go we

00:51:25,560 --> 00:51:28,960
know with WordPress

00:51:27,400 --> 00:51:30,940
and whatever people like to run on

00:51:28,960 --> 00:51:35,079
FreeBSD okay so there's plenty of ways

00:51:30,940 --> 00:51:36,970
yeah everybody loves WordPress and so

00:51:35,079 --> 00:51:39,849
anything that you can can do there would

00:51:36,970 --> 00:51:41,950
be much appreciated right so he's there

00:51:39,849 --> 00:51:44,500
talk to him that's the email address

00:51:41,950 --> 00:51:47,200
flood him he needs your help and you

00:51:44,500 --> 00:51:50,380
know we want to see previous D much more

00:51:47,200 --> 00:51:55,539
on AWS okay let's look at the benchmark

00:51:50,380 --> 00:51:57,309
results okay all right so let's just

00:51:55,539 --> 00:52:11,710
look at the numbers I run those tests

00:51:57,309 --> 00:52:17,650
again yesterday C 4 is 11 minutes 42

00:52:11,710 --> 00:52:23,260
seconds right so keep that one in mind

00:52:17,650 --> 00:52:29,529
this one is x1 1138 and now all the guys

00:52:23,260 --> 00:52:42,549
yeah I knew the x1 was faster and I 3 is

00:52:29,529 --> 00:52:44,890
under 11 minutes right so and it's it's

00:52:42,549 --> 00:52:47,410
it's it's fun because it's pretty much

00:52:44,890 --> 00:52:51,369
you know exactly the numbers I did

00:52:47,410 --> 00:52:58,119
yesterday so so this is what we get

00:52:51,369 --> 00:53:01,020
right so I three wins okay and that goes

00:52:58,119 --> 00:53:05,049
to show a few things that goes to show

00:53:01,020 --> 00:53:07,569
nvme storage is just insane right I need

00:53:05,049 --> 00:53:10,289
you know I knew it was gonna be fast but

00:53:07,569 --> 00:53:12,940
it's blazingly fast and you would think

00:53:10,289 --> 00:53:15,549
you know my guess when I did this test

00:53:12,940 --> 00:53:21,190
was x1 is going to destroy everything

00:53:15,549 --> 00:53:25,480
right because building is all about CPU

00:53:21,190 --> 00:53:28,210
you know CPU you know blood and fire and

00:53:25,480 --> 00:53:31,150
and flames and skulls and it's just you

00:53:28,210 --> 00:53:34,839
know the biggest baddest cpu wins but no

00:53:31,150 --> 00:53:36,099
and my guess is when I actually I spent

00:53:34,839 --> 00:53:37,240
a few hours looking at this build

00:53:36,099 --> 00:53:40,150
process all over again

00:53:37,240 --> 00:53:41,190
is that the and that's know and you know

00:53:40,150 --> 00:53:44,970
don't take offense in any

00:53:41,190 --> 00:53:47,819
way but the the FreeBSD build process is

00:53:44,970 --> 00:53:50,579
just not parallel enough to actually to

00:53:47,819 --> 00:53:52,829
actually leverage those 128 CPUs you

00:53:50,579 --> 00:53:55,140
know there are lots of sequential steps

00:53:52,829 --> 00:53:56,940
that are just running on a single core

00:53:55,140 --> 00:53:58,589
and you waste a lot of time doing that

00:53:56,940 --> 00:54:00,390
but I don't think I'm not sure it can be

00:53:58,589 --> 00:54:02,369
helped but you can actually see most of

00:54:00,390 --> 00:54:05,130
the time you know you just don't see

00:54:02,369 --> 00:54:06,839
parallelism on a lot of steps and I

00:54:05,130 --> 00:54:08,760
think you know that's where you would

00:54:06,839 --> 00:54:12,470
win yeah yeah that's where you wouldn't

00:54:08,760 --> 00:54:12,470
make a lot of speed and you don't yeah

00:54:19,910 --> 00:54:25,319
yeah but that's exactly exactly my point

00:54:23,550 --> 00:54:36,780
we're not using them you know I could

00:54:25,319 --> 00:54:38,640
have no no the thing is I know so the so

00:54:36,780 --> 00:54:39,720
we're using I don't know I don't have

00:54:38,640 --> 00:54:42,300
what the Maxie I don't know what the

00:54:39,720 --> 00:54:44,069
maximum number is but you know we

00:54:42,300 --> 00:54:46,650
probably end up using I don't know at

00:54:44,069 --> 00:54:49,380
any given time maybe 40 or 50 cores in

00:54:46,650 --> 00:54:51,930
parallel but we never go as high as one

00:54:49,380 --> 00:54:57,990
and 28 right because you know we'd yeah

00:54:51,930 --> 00:55:00,660
please so I actually ran these

00:54:57,990 --> 00:55:02,760
benchmarks this morning because I I knew

00:55:00,660 --> 00:55:06,540
they were going to be tests here I

00:55:02,760 --> 00:55:10,200
actually the the x1 if you only run with

00:55:06,540 --> 00:55:11,630
64 parallelism it takes 10 minutes and

00:55:10,200 --> 00:55:15,510
39 seconds

00:55:11,630 --> 00:55:17,700
we actually have issues with kernel

00:55:15,510 --> 00:55:20,940
locking we're just spending too much

00:55:17,700 --> 00:55:24,119
time with contention there's there's

00:55:20,940 --> 00:55:28,200
work in head which improves that with a

00:55:24,119 --> 00:55:30,869
a head kernel compiling 11.1 we can do

00:55:28,200 --> 00:55:32,160
it in 8 minutes and 31 seconds so

00:55:30,869 --> 00:55:34,109
there's there's definitely progress

00:55:32,160 --> 00:55:35,910
happening there but it's it's a

00:55:34,109 --> 00:55:37,770
scalability issue in the kernel not just

00:55:35,910 --> 00:55:39,720
with the build process so that's what I

00:55:37,770 --> 00:55:41,690
referred to earlier I mean I'm using

00:55:39,720 --> 00:55:43,349
11.1 release because it's the official

00:55:41,690 --> 00:55:47,099
am i right now

00:55:43,349 --> 00:55:48,630
but yeah it's gonna get faster so it's

00:55:47,099 --> 00:55:52,290
you know it's pretty interesting to see

00:55:48,630 --> 00:55:55,109
that not the biggest instance wins

00:55:52,290 --> 00:55:58,559
actually so I run those same tests

00:55:55,109 --> 00:56:00,539
exact same parameters on on ramdisk and

00:55:58,559 --> 00:56:04,380
this is what I get so I have a minor

00:56:00,539 --> 00:56:06,900
improvement on c4 I have a small

00:56:04,380 --> 00:56:09,869
improvement on x1 and I run this

00:56:06,900 --> 00:56:14,940
repeatedly and actually I get slower

00:56:09,869 --> 00:56:19,109
with the ramdisk on a3 and my conclusion

00:56:14,940 --> 00:56:20,759
here is that FS is just brilliant but

00:56:19,109 --> 00:56:23,640
that's probably my flow for today and

00:56:20,759 --> 00:56:27,539
the last thing is how much do these cost

00:56:23,640 --> 00:56:29,910
right you know we pay per hour and soon

00:56:27,539 --> 00:56:36,299
we're going to be paying per second so

00:56:29,910 --> 00:56:40,249
here are the prices right yeah so again

00:56:36,299 --> 00:56:42,420
it goes to show one thing is that

00:56:40,249 --> 00:56:45,989
performance is very nice

00:56:42,420 --> 00:56:47,400
but at the end of the day even if you're

00:56:45,989 --> 00:56:50,759
gonna use i3 right

00:56:47,400 --> 00:56:51,239
would you be willing to pay for yeah

00:56:50,759 --> 00:56:54,029
almost

00:56:51,239 --> 00:56:56,459
yeah four to five times the hourly price

00:56:54,029 --> 00:56:56,819
just to gain a few seconds I don't think

00:56:56,459 --> 00:56:58,890
so

00:56:56,819 --> 00:57:01,109
and so that's the advice we give to

00:56:58,890 --> 00:57:02,489
customers all the time again and again

00:57:01,109 --> 00:57:05,369
and again and lower we'll agree with

00:57:02,489 --> 00:57:07,739
that when they ask us I've got this work

00:57:05,369 --> 00:57:09,749
load watch instance size and what's

00:57:07,739 --> 00:57:12,749
instance family what instance I should I

00:57:09,749 --> 00:57:16,259
pick the only reasonable answer is

00:57:12,749 --> 00:57:19,289
please run Europe benchmarks please run

00:57:16,259 --> 00:57:21,809
the actual application and figure it out

00:57:19,289 --> 00:57:24,299
okay and then you get that performance

00:57:21,809 --> 00:57:26,819
level and you decide how much you want

00:57:24,299 --> 00:57:29,099
to pay for that okay so if absolute

00:57:26,819 --> 00:57:31,739
speed matters and maybe not for a

00:57:29,099 --> 00:57:32,880
building right let's agree on this could

00:57:31,739 --> 00:57:34,920
be another application you could say

00:57:32,880 --> 00:57:37,440
yeah every second counts okay I'm paying

00:57:34,920 --> 00:57:39,299
that premium here but I guess the right

00:57:37,440 --> 00:57:42,539
price point here for this use case would

00:57:39,299 --> 00:57:44,219
be c4 right so run your benchmarks again

00:57:42,539 --> 00:57:46,890
you know synthetic benchmarks are nice

00:57:44,219 --> 00:57:48,959
but the real testing should happen with

00:57:46,890 --> 00:57:49,890
the real workload and then you know you

00:57:48,959 --> 00:57:53,999
can see what happens

00:57:49,890 --> 00:57:57,359
okay as a conclusion we talked about BSD

00:57:53,999 --> 00:57:59,190
today but actually you know this is just

00:57:57,359 --> 00:58:01,920
TOS right it's important but it's just

00:57:59,190 --> 00:58:04,229
us and then all of our customers on top

00:58:01,920 --> 00:58:06,180
of that all are our users they run a

00:58:04,229 --> 00:58:09,110
crazy amount of open source right and

00:58:06,180 --> 00:58:12,620
you know from data bases to no sequel to

00:58:09,110 --> 00:58:15,620
doop - yeah puppet and chef and Jenkins

00:58:12,620 --> 00:58:19,010
and all the CI CD tools etc and actually

00:58:15,620 --> 00:58:21,560
all of these one way or the other work

00:58:19,010 --> 00:58:24,320
really well on the ws some of our

00:58:21,560 --> 00:58:27,560
services are even based on those on

00:58:24,320 --> 00:58:30,410
those pieces of technology like Amazon

00:58:27,560 --> 00:58:32,480
RDS for our relational databases where

00:58:30,410 --> 00:58:35,870
you can pick from my sequel and Postgres

00:58:32,480 --> 00:58:38,780
etc Mario TV and so on so you know all

00:58:35,870 --> 00:58:43,250
of those one way or the other we help

00:58:38,780 --> 00:58:45,110
you run them on your OS okay and let's

00:58:43,250 --> 00:58:50,090
face it yes sometime it's running Linux

00:58:45,110 --> 00:58:53,420
right but so we help BSD run better on

00:58:50,090 --> 00:58:55,700
AWS but we don't just stop there right

00:58:53,420 --> 00:58:58,460
we really want to have as many

00:58:55,700 --> 00:59:00,680
open-source projects running very well

00:58:58,460 --> 00:59:02,300
on AWS so keep that in mind and you know

00:59:00,680 --> 00:59:06,740
feel free to ask questions later on or

00:59:02,300 --> 00:59:08,600
get us on Twitter and write and pretty

00:59:06,740 --> 00:59:11,260
much that's my conclusion so thank you

00:59:08,600 --> 00:59:11,260
very much for listening

00:59:17,339 --> 00:59:22,509
and you know we're really really looking

00:59:19,989 --> 00:59:24,309
forward to have more more FreeBSD and

00:59:22,509 --> 00:59:26,259
and maybe a little bit of open BSD and

00:59:24,309 --> 00:59:28,239
that BS do you run as well on it obvious

00:59:26,259 --> 00:59:29,410
thanks again and if you have questions

00:59:28,239 --> 00:59:32,609
you know we love hanging around so

00:59:29,410 --> 00:59:32,609

YouTube URL: https://www.youtube.com/watch?v=2F7XU5sMh4c


