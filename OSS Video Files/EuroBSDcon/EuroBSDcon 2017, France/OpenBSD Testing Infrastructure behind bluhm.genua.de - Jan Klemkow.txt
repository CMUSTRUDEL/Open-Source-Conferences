Title: OpenBSD Testing Infrastructure behind bluhm.genua.de - Jan Klemkow
Publication date: 2019-10-16
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

I have built an infrastructure for semi-automatic testing of source code
changes. Clean systems can be automatically installed on real hardware
based on the latest published snapshot. The serial console and power
switch of each system can be accessed over the Internet.
My college and OpenBSD developer bluhm@ has used this infrastructure to
run the OpenBSD regression tests. Results for those tests have been
available at http://bluhm.genua.de/regress/results/regress.html for over
a year now.

The test infrastructure is mostly made of old hardware that had
accumulated in our company for years. So it should be quite easy and
inexpensive to replicate a similar infrastructure for your testing
needs.

The talk will explain the infrastructure in detail, include live-demos
that show how easy it can be used and share some ideas on how the system
could be improved further.

Speaker biography:

Jan Klemkow has been an OpenBSD user since 3.9 and contributor since
5.0. He finished his master degree in technical computer science at the
university of applied science Wismar in 2013. Since 2011 he has been
working as a software developer at genua GmbH near Munich.
Captions: 
	00:00:00,829 --> 00:00:08,790
thank you yeah

00:00:03,600 --> 00:00:12,269
asked as mentioned I'm young clink oh no

00:00:08,790 --> 00:00:15,210
no me maybe the most of you I'm a

00:00:12,269 --> 00:00:19,500
software engineer with made my master

00:00:15,210 --> 00:00:21,300
degree in engineering and workers

00:00:19,500 --> 00:00:24,210
software developer at the Suffolk

00:00:21,300 --> 00:00:28,380
country in Munich called quinoa maybe

00:00:24,210 --> 00:00:31,969
some of your heart of I'm addicted to

00:00:28,380 --> 00:00:35,130
obesity and I use it since

00:00:31,969 --> 00:00:41,780
three-point-nine and contributing a

00:00:35,130 --> 00:00:44,370
couple of changes a year since 5.0 and

00:00:41,780 --> 00:00:47,879
in this talk I will show you the

00:00:44,370 --> 00:00:51,600
infrastructure behind Bloomberg in Ooty

00:00:47,879 --> 00:00:53,129
how many of you know about this these

00:00:51,600 --> 00:00:58,140
these website and the regression tests

00:00:53,129 --> 00:01:01,559
or sort okay if you if you're not it

00:00:58,140 --> 00:01:03,780
simply gets some attention on the

00:01:01,559 --> 00:01:05,760
Internet especially on on Twitter and

00:01:03,780 --> 00:01:08,220
some and in the optimistic core

00:01:05,760 --> 00:01:09,150
developer community it's simply just

00:01:08,220 --> 00:01:12,600
this website

00:01:09,150 --> 00:01:14,810
let's make off my colleague and he used

00:01:12,600 --> 00:01:19,950
this infrastructure I I showed you today

00:01:14,810 --> 00:01:21,930
and I will have some words on it this

00:01:19,950 --> 00:01:28,159
website shows two things the relative

00:01:21,930 --> 00:01:32,100
crash tests and the and the the results

00:01:28,159 --> 00:01:33,689
you can see here tests you see this

00:01:32,100 --> 00:01:37,890
tables will see with different

00:01:33,689 --> 00:01:44,720
regression tests and it's a parse of

00:01:37,890 --> 00:01:44,720
fail and we had another

00:01:50,190 --> 00:01:56,729
yeah and we have this performance test

00:01:53,290 --> 00:02:00,550
and I will lost a few words of for this

00:01:56,729 --> 00:02:02,320
okay this is to large scale and they're

00:02:00,550 --> 00:02:09,580
there some performance graphs we do

00:02:02,320 --> 00:02:11,230
regularly regularly so let's begin first

00:02:09,580 --> 00:02:14,350
of all the performance tests just to

00:02:11,230 --> 00:02:18,400
show you what they're how they are made

00:02:14,350 --> 00:02:22,150
of we have for testing lap in our

00:02:18,400 --> 00:02:24,970
company just server room visuals of

00:02:22,150 --> 00:02:27,430
Harper and we using for the performances

00:02:24,970 --> 00:02:29,800
our own product hardware we make a

00:02:27,430 --> 00:02:32,350
firewalling product based on ethnicity

00:02:29,800 --> 00:02:37,060
for application of okay to application

00:02:32,350 --> 00:02:37,840
every gate varies and and layer three

00:02:37,060 --> 00:02:44,110
four

00:02:37,840 --> 00:02:45,430
routers make and we use our our greater

00:02:44,110 --> 00:02:47,410
powerful machines to make this

00:02:45,430 --> 00:02:53,730
aggression test and it's pretty simple

00:02:47,410 --> 00:02:56,920
we have we use two or several notes

00:02:53,730 --> 00:02:59,560
based on community Knox because of the

00:02:56,920 --> 00:03:03,549
better performance of these machines as

00:02:59,560 --> 00:03:05,650
a source and the sink system and we need

00:03:03,549 --> 00:03:09,010
to connect them with a 10 gigabit link

00:03:05,650 --> 00:03:13,140
to our product hardware where we don't

00:03:09,010 --> 00:03:17,140
boot or our product system which is and

00:03:13,140 --> 00:03:19,269
highly modified OpenBSD we just for this

00:03:17,140 --> 00:03:23,980
test we use just the snapshots every

00:03:19,269 --> 00:03:26,739
night install an MV 6-4 system and make

00:03:23,980 --> 00:03:32,040
an eye perf TCP through protests with

00:03:26,739 --> 00:03:34,269
routing and with real ad and we have an

00:03:32,040 --> 00:03:36,820
IPSec test where we have two machines

00:03:34,269 --> 00:03:38,980
every measure how how much the

00:03:36,820 --> 00:03:42,760
throughput is through both machines if

00:03:38,980 --> 00:03:45,400
we have a middle line with IPSec and

00:03:42,760 --> 00:03:45,910
it's just from several line of nodes the

00:03:45,400 --> 00:03:49,150
iperf

00:03:45,910 --> 00:03:52,390
combined and TCP and UDP and you see the

00:03:49,150 --> 00:03:55,269
graphs on the website how they are how

00:03:52,390 --> 00:03:56,829
they're are changing over over time from

00:03:55,269 --> 00:03:59,380
from from 99 from Shannon episode

00:03:56,829 --> 00:04:02,230
snapshot maybe some some

00:03:59,380 --> 00:04:04,570
some days missing in the graphs then

00:04:02,230 --> 00:04:06,100
something bad happened pet show you

00:04:04,570 --> 00:04:08,440
something and something bad happens this

00:04:06,100 --> 00:04:11,080
is possible so don't rely on the on the

00:04:08,440 --> 00:04:17,280
on the dates in the grasses there could

00:04:11,080 --> 00:04:22,210
be some missings so now to the main part

00:04:17,280 --> 00:04:24,690
the infrastructure which is which is

00:04:22,210 --> 00:04:29,530
used for the aggression test I started

00:04:24,690 --> 00:04:33,550
two years ago but not to make regression

00:04:29,530 --> 00:04:35,440
tests my colleague Alexander uses for

00:04:33,550 --> 00:04:38,620
the grand chess but I actually had in

00:04:35,440 --> 00:04:43,090
mind to make diff testing easier what

00:04:38,620 --> 00:04:46,480
happens is in 2011 I start developing a

00:04:43,090 --> 00:04:48,250
little test or no test on little dips

00:04:46,480 --> 00:04:49,990
for obesity and sends it to the list and

00:04:48,250 --> 00:04:53,200
one reply I got worse

00:04:49,990 --> 00:04:54,820
oh no this won't compile or this has

00:04:53,200 --> 00:04:56,860
these in these problems or you send a

00:04:54,820 --> 00:04:59,950
part and you get back you're missing

00:04:56,860 --> 00:05:03,310
some dependency and this is because most

00:04:59,950 --> 00:05:06,540
developers use their own notebook to

00:05:03,310 --> 00:05:09,370
develop the changes and to test them and

00:05:06,540 --> 00:05:11,710
actually or if you make actually when

00:05:09,370 --> 00:05:13,720
you make parts and you're missing a

00:05:11,710 --> 00:05:15,220
dependency you don't get it because it's

00:05:13,720 --> 00:05:17,530
in some new system because it's your

00:05:15,220 --> 00:05:20,410
daily it's your daily business system

00:05:17,530 --> 00:05:22,510
you're using and you can't wipe

00:05:20,410 --> 00:05:26,490
everything from it and make a clean test

00:05:22,510 --> 00:05:29,400
and so I start about how to make and

00:05:26,490 --> 00:05:34,810
simple infrastructure that I have a

00:05:29,400 --> 00:05:38,350
machine by side I can use to wipe and

00:05:34,810 --> 00:05:40,690
install and then make my tests on it so

00:05:38,350 --> 00:05:43,510
you can make clean tests for other for

00:05:40,690 --> 00:05:46,630
wand if you make clean tests on on one

00:05:43,510 --> 00:05:48,640
system and know if the dependency is

00:05:46,630 --> 00:05:51,910
missing or if something else goes wrong

00:05:48,640 --> 00:05:54,100
or if you have the problem you really

00:05:51,910 --> 00:05:56,229
fell into some bigger problems maybe

00:05:54,100 --> 00:05:58,360
follows the gdb and have to debug it and

00:05:56,229 --> 00:05:59,950
it's pretty annoying if you do this with

00:05:58,360 --> 00:06:02,530
your own app is your own notebook where

00:05:59,950 --> 00:06:04,180
I had to read to mails and you have to

00:06:02,530 --> 00:06:06,280
read the source code in parallel or

00:06:04,180 --> 00:06:08,560
surfing in something like this so this

00:06:06,280 --> 00:06:12,660
is pretty critical and not everything

00:06:08,560 --> 00:06:12,660
could be done in a virtual machine

00:06:13,620 --> 00:06:19,210
and then I start thinking about how to

00:06:16,570 --> 00:06:22,030
how we can make it something better or

00:06:19,210 --> 00:06:25,420
how can i but the system for myself to

00:06:22,030 --> 00:06:30,670
do better and cleaner testing of my own

00:06:25,420 --> 00:06:34,800
divs and fortunately we have a nice lab

00:06:30,670 --> 00:06:37,300
in our company which is just for for

00:06:34,800 --> 00:06:40,450
customers enough Oh Christmas for

00:06:37,300 --> 00:06:43,390
employees to testing with open source

00:06:40,450 --> 00:06:44,740
technology it's called the open misdeal

00:06:43,390 --> 00:06:46,840
app in our house because mainly

00:06:44,740 --> 00:06:48,790
developers are there who testing some of

00:06:46,840 --> 00:06:51,100
my stuff in it but there's also other

00:06:48,790 --> 00:06:54,580
stuff there are some obviously Forks of

00:06:51,100 --> 00:06:56,200
some employees for us who just playing

00:06:54,580 --> 00:06:57,850
around with the source code and making

00:06:56,200 --> 00:07:00,220
something different and them bring

00:06:57,850 --> 00:07:03,910
something out and what what I've done is

00:07:00,220 --> 00:07:07,990
I took a machine and I make some

00:07:03,910 --> 00:07:11,050
automatic installation and then I I saw

00:07:07,990 --> 00:07:13,950
oh there's a way how says there's a way

00:07:11,050 --> 00:07:17,020
where I can get it automatically and

00:07:13,950 --> 00:07:20,620
from over the time of the last two years

00:07:17,020 --> 00:07:22,090
I developed them pretty for me pretty

00:07:20,620 --> 00:07:24,340
good working system to automatically

00:07:22,090 --> 00:07:27,000
install a new machine and then alexander

00:07:24,340 --> 00:07:29,550
came to me and say hey i would like to

00:07:27,000 --> 00:07:33,130
run the group russian tests on it

00:07:29,550 --> 00:07:35,080
because he don't have hardware and I

00:07:33,130 --> 00:07:37,540
have these slightly working

00:07:35,080 --> 00:07:41,380
infrastructure and she was or he was the

00:07:37,540 --> 00:07:44,380
first the first customer of this new

00:07:41,380 --> 00:07:49,930
system and tested heavily and I show you

00:07:44,380 --> 00:07:53,050
this infrastructure in the the main

00:07:49,930 --> 00:07:55,450
infrastructure is are these some yellow

00:07:53,050 --> 00:07:57,220
computers and down there these are

00:07:55,450 --> 00:08:00,430
pretty old machines and some machines I

00:07:57,220 --> 00:08:03,130
think in every IT company there are some

00:08:00,430 --> 00:08:05,080
old machines laying on the ground and

00:08:03,130 --> 00:08:07,540
the in the corner and nobody cares off

00:08:05,080 --> 00:08:09,730
and exactly this this machines you can

00:08:07,540 --> 00:08:11,920
get without any question and start

00:08:09,730 --> 00:08:14,110
playing with it and so we integrated

00:08:11,920 --> 00:08:17,290
into this infrastructure first I was

00:08:14,110 --> 00:08:20,200
just one trust for me and then Alex and

00:08:17,290 --> 00:08:23,650
I came to me was a special special

00:08:20,200 --> 00:08:25,860
requirements and one of his primary I

00:08:23,650 --> 00:08:28,469
want to make and path and you tests

00:08:25,860 --> 00:08:30,120
we need four machines with three cables

00:08:28,469 --> 00:08:32,250
on us that's the reason why the first

00:08:30,120 --> 00:08:35,579
four machines are interconnected with an

00:08:32,250 --> 00:08:39,269
red cable so that she can make this kind

00:08:35,579 --> 00:08:42,570
of test the infrastructure is inside of

00:08:39,269 --> 00:08:44,760
that said of this pretty easy it's just

00:08:42,570 --> 00:08:47,910
every machine with every interface is

00:08:44,760 --> 00:08:50,850
connected to one gigabit switch and is

00:08:47,910 --> 00:08:53,640
behind these tests Marsden note these

00:08:50,850 --> 00:08:55,110
tests Marsten note is part of the lab

00:08:53,640 --> 00:08:56,339
network itself and has an outside

00:08:55,110 --> 00:09:00,420
connection to the Internet and it's

00:08:56,339 --> 00:09:05,160
reachable from the outside I plan to

00:09:00,420 --> 00:09:06,779
make this computers really isolated the

00:09:05,160 --> 00:09:08,640
test machines itself are not connected

00:09:06,779 --> 00:09:12,450
to the Internet they're not routed they

00:09:08,640 --> 00:09:14,490
just have access to our internal open

00:09:12,450 --> 00:09:16,519
misty mirror which we use also for our

00:09:14,490 --> 00:09:20,310
internal development in the company

00:09:16,519 --> 00:09:22,350
because it's much faster to to install

00:09:20,310 --> 00:09:24,089
from this or a tenth of the packages

00:09:22,350 --> 00:09:26,190
from this server if you free would

00:09:24,089 --> 00:09:29,459
installed from the outside it costs a

00:09:26,190 --> 00:09:31,440
lot more time that's a reason why I use

00:09:29,459 --> 00:09:33,660
this and this is interconnected why our

00:09:31,440 --> 00:09:36,990
real ad running on the test market so

00:09:33,660 --> 00:09:41,190
the test master itself has some other

00:09:36,990 --> 00:09:44,880
infrastructure connected I have I found

00:09:41,190 --> 00:09:47,040
an power switch just some just a power

00:09:44,880 --> 00:09:49,769
supply which is a switchable wire a

00:09:47,040 --> 00:09:52,110
serial connection now ready so we

00:09:49,769 --> 00:09:55,850
upgraded to a power supply switch which

00:09:52,110 --> 00:09:58,800
is searchable over open network and

00:09:55,850 --> 00:10:01,769
chest muscles capable to switch every

00:09:58,800 --> 00:10:04,949
machine on and off so if you really

00:10:01,769 --> 00:10:07,350
screwed up if you're on a remote session

00:10:04,949 --> 00:10:10,260
somewhere else maybe in Paris and you

00:10:07,350 --> 00:10:12,540
screwed up your machine you can at least

00:10:10,260 --> 00:10:17,250
you can switch off the power and turn it

00:10:12,540 --> 00:10:20,040
on again if nothing goes on and more

00:10:17,250 --> 00:10:23,279
important so structure is the serial

00:10:20,040 --> 00:10:27,810
connection in the test master there are

00:10:23,279 --> 00:10:31,170
some multiples serial PCI cards in it

00:10:27,810 --> 00:10:34,589
and we have an every test system has

00:10:31,170 --> 00:10:36,569
these serial connection so if you make

00:10:34,589 --> 00:10:39,649
some kernel tests or if you've tried to

00:10:36,569 --> 00:10:41,699
reproduce some kernel box you can

00:10:39,649 --> 00:10:43,829
after this hour you can you have

00:10:41,699 --> 00:10:46,470
reproduced it you can debug this thing

00:10:43,829 --> 00:10:48,329
and in the DDB which is quite annoying

00:10:46,470 --> 00:10:50,819
if you don't have serial and you try to

00:10:48,329 --> 00:10:53,639
remotely debug something or debug it

00:10:50,819 --> 00:10:55,620
wire VGA and it's rich but why would you

00:10:53,639 --> 00:10:57,810
L is horrible because you can't really

00:10:55,620 --> 00:11:01,740
copy some some messages who everything

00:10:57,810 --> 00:11:06,230
have you type and type it by by hand and

00:11:01,740 --> 00:11:06,230
so it's quite comfortable comfortable

00:11:06,500 --> 00:11:11,399
the regression test itself don't run of

00:11:09,689 --> 00:11:13,259
the test master test mass is just the

00:11:11,399 --> 00:11:15,209
basic infrastructure and at the

00:11:13,259 --> 00:11:18,329
interface I provide for myself and for

00:11:15,209 --> 00:11:23,279
Alexander and for another developer who

00:11:18,329 --> 00:11:27,149
use it and the test itself and the

00:11:23,279 --> 00:11:30,000
website I show before run on the blue

00:11:27,149 --> 00:11:32,040
machine with zoom that quinoa T and G

00:11:30,000 --> 00:11:34,490
this machine is also connected to the

00:11:32,040 --> 00:11:37,310
outside world and having public access

00:11:34,490 --> 00:11:41,220
and from this machines on every night

00:11:37,310 --> 00:11:42,839
this machines use my interface to to

00:11:41,220 --> 00:11:44,579
automatically install the the first

00:11:42,839 --> 00:11:46,649
machine or the first two machines and

00:11:44,579 --> 00:11:49,980
and run the regression test on it and

00:11:46,649 --> 00:11:53,819
some regression tests require that it

00:11:49,980 --> 00:11:57,540
reaches the OpenBSD test machine three

00:11:53,819 --> 00:11:59,100
and four so that these machines are just

00:11:57,540 --> 00:12:01,860
a life and the first to get

00:11:59,100 --> 00:12:08,279
automatically their installed with a

00:12:01,860 --> 00:12:10,709
fresh clean snapshot every night how

00:12:08,279 --> 00:12:13,319
does the interface look like the

00:12:10,709 --> 00:12:16,379
interface I thought which is pretty nice

00:12:13,319 --> 00:12:18,750
to me at least them as you just have SSH

00:12:16,379 --> 00:12:22,069
so if you have SSH on your computer you

00:12:18,750 --> 00:12:27,540
could use this kind of infrastructure

00:12:22,069 --> 00:12:30,319
there you just have to mention the

00:12:27,540 --> 00:12:35,550
computer on which you want to run your

00:12:30,319 --> 00:12:38,579
your tests as the user and then just SSH

00:12:35,550 --> 00:12:41,189
the machine at the test master system

00:12:38,579 --> 00:12:44,100
and then the command if you have nothing

00:12:41,189 --> 00:12:47,189
you directly get to the serial to serial

00:12:44,100 --> 00:12:50,100
console and you can interactively typing

00:12:47,189 --> 00:12:51,809
in to enter it and have direct access if

00:12:50,100 --> 00:12:52,770
you want to install this system you just

00:12:51,809 --> 00:12:54,840
type

00:12:52,770 --> 00:12:56,790
install or upgrade to some upgrade

00:12:54,840 --> 00:12:58,380
upgrade is a pretty nice feature if you

00:12:56,790 --> 00:12:59,970
have some configuration files and tries

00:12:58,380 --> 00:13:02,250
some stuff and have some great ad if

00:12:59,970 --> 00:13:04,160
then want to upgrade them if you make a

00:13:02,250 --> 00:13:06,720
clean install you wipe everything and

00:13:04,160 --> 00:13:09,680
you lost your configuration so you can

00:13:06,720 --> 00:13:12,540
keep it but if you really want a clean

00:13:09,680 --> 00:13:14,850
test and you can should make install and

00:13:12,540 --> 00:13:19,830
Eve heart is wiped during the

00:13:14,850 --> 00:13:21,810
installation process to don't get in

00:13:19,830 --> 00:13:23,250
conflict with other users in parallel I

00:13:21,810 --> 00:13:25,350
have this lock and free command so you

00:13:23,250 --> 00:13:29,070
can lock your machine that nobody other

00:13:25,350 --> 00:13:31,410
can install upgrade it or nobody other

00:13:29,070 --> 00:13:34,040
current is able to switch you power off

00:13:31,410 --> 00:13:37,320
and on or cycle the power power sting

00:13:34,040 --> 00:13:39,360
the power supply and it's pretty it is

00:13:37,320 --> 00:13:42,450
see the interface and you have nothing

00:13:39,360 --> 00:13:46,830
to new more than this and the background

00:13:42,450 --> 00:13:48,480
which I've shown the next slide there

00:13:46,830 --> 00:13:53,820
are some infrastructure I built but just

00:13:48,480 --> 00:13:56,760
with the simple shell scripts let's look

00:13:53,820 --> 00:13:59,400
what's happened first on the test master

00:13:56,760 --> 00:14:03,810
system there's this is HD configured

00:13:59,400 --> 00:14:07,010
which knows that the users for the for

00:14:03,810 --> 00:14:10,320
every machine for example here the ot1

00:14:07,010 --> 00:14:13,650
has the first command for weddings are

00:14:10,320 --> 00:14:16,680
forbidden and you're allowed to open an

00:14:13,650 --> 00:14:19,470
SSH tunnel to the machine so that you're

00:14:16,680 --> 00:14:21,120
not if you're if you have to type a lot

00:14:19,470 --> 00:14:22,710
and have to let the debugging on the

00:14:21,120 --> 00:14:26,340
machine it's not that annoying because

00:14:22,710 --> 00:14:29,000
of the slowly serial access you can open

00:14:26,340 --> 00:14:34,260
most people as H sessions when you first

00:14:29,000 --> 00:14:36,150
connect to the console and taken SSH

00:14:34,260 --> 00:14:40,110
tunnel with it so you can locally

00:14:36,150 --> 00:14:43,170
forward to the SSH parts of the machine

00:14:40,110 --> 00:14:46,050
and you can fastly typing on it and NT

00:14:43,170 --> 00:14:48,960
bucks you start testing your stuff so

00:14:46,050 --> 00:14:53,040
what what just happened in the run

00:14:48,960 --> 00:14:57,810
command the run script is just simple

00:14:53,040 --> 00:15:00,120
set shell script where are parties these

00:14:57,810 --> 00:15:04,710
commands console on-off cycle and the

00:15:00,120 --> 00:15:05,960
and the rest and it starts the console

00:15:04,710 --> 00:15:09,490
program

00:15:05,960 --> 00:15:13,210
and the the serial lines are managed by

00:15:09,490 --> 00:15:16,730
conserve I dunno are you familiar with

00:15:13,210 --> 00:15:20,960
console management conserve is daemon

00:15:16,730 --> 00:15:24,410
which handles 0 serial consoles of

00:15:20,960 --> 00:15:28,640
different types over directly of a phone

00:15:24,410 --> 00:15:31,430
line or or over or a serial card in your

00:15:28,640 --> 00:15:33,560
computer or over over USB or over telnet

00:15:31,430 --> 00:15:35,450
or something else this demon managed all

00:15:33,560 --> 00:15:38,120
the stuff and this had a client which

00:15:35,450 --> 00:15:40,220
called console and which type console

00:15:38,120 --> 00:15:44,090
and the user you directly connected you

00:15:40,220 --> 00:15:46,910
are falsely connected to the could to to

00:15:44,090 --> 00:15:47,660
the console why are these in these

00:15:46,910 --> 00:15:52,430
infrastructure

00:15:47,660 --> 00:15:56,840
why are these this demon and if it type

00:15:52,430 --> 00:15:59,090
the on/off switches on the cycle then

00:15:56,840 --> 00:16:02,570
the shell script is started with just

00:15:59,090 --> 00:16:07,160
sent a package to the or make an HTTP

00:16:02,570 --> 00:16:11,300
request to the switchable power supply

00:16:07,160 --> 00:16:13,520
and then it switches the the power

00:16:11,300 --> 00:16:18,920
supply for this machine so it's pretty

00:16:13,520 --> 00:16:22,700
pretty easy how the con servers

00:16:18,920 --> 00:16:27,650
configured to limit the access to the

00:16:22,700 --> 00:16:30,500
different machines I limit the access of

00:16:27,650 --> 00:16:32,300
all the live of all the OT users so they

00:16:30,500 --> 00:16:34,400
can just have just read write permission

00:16:32,300 --> 00:16:36,500
for its own here for example it's um

00:16:34,400 --> 00:16:38,930
it's a snippet of the configuration you

00:16:36,500 --> 00:16:42,320
see we have these cards every card has

00:16:38,930 --> 00:16:44,480
the same bout rate and the write

00:16:42,320 --> 00:16:48,170
permission is just for the for the own

00:16:44,480 --> 00:16:51,670
for the user of this machine and they

00:16:48,170 --> 00:16:56,570
have directly access to the device and

00:16:51,670 --> 00:16:58,580
yeah and the limitation is it's

00:16:56,570 --> 00:17:00,680
important because if you don't limit 8

00:16:58,580 --> 00:17:02,630
the excess then the user is able to

00:17:00,680 --> 00:17:04,250
connect to run serial access and there

00:17:02,630 --> 00:17:06,320
are some shortcut commands where you can

00:17:04,250 --> 00:17:09,140
maybe switch the bout rate if you have

00:17:06,320 --> 00:17:11,240
to or you can send a break message if

00:17:09,140 --> 00:17:13,430
you want to but you can also switch the

00:17:11,240 --> 00:17:18,589
console to another serial access line

00:17:13,430 --> 00:17:19,790
and to limit 8 this this the nobody can

00:17:18,589 --> 00:17:21,020
switch

00:17:19,790 --> 00:17:22,910
that usually don't can switch between

00:17:21,020 --> 00:17:25,459
the lines you have to limitate the XS

00:17:22,910 --> 00:17:30,380
and that that's it so it's kind of

00:17:25,459 --> 00:17:36,130
secure to give all the authorization

00:17:30,380 --> 00:17:39,170
access it's pretty easy you just have to

00:17:36,130 --> 00:17:40,970
give me your SSH key or you develop I

00:17:39,170 --> 00:17:44,210
can give me a Saturday's H key here's

00:17:40,970 --> 00:17:47,090
for example our both keys in the

00:17:44,210 --> 00:17:52,250
authorized key files and in front of it

00:17:47,090 --> 00:17:55,340
I wrote and an hard-coded environment

00:17:52,250 --> 00:17:57,620
variable test user these scripts which

00:17:55,340 --> 00:17:59,680
are running and preparing the machine

00:17:57,620 --> 00:18:03,050
and rebooting and something like this

00:17:59,680 --> 00:18:06,590
look at looking at them these variable

00:18:03,050 --> 00:18:09,980
and this variable does see the locking

00:18:06,590 --> 00:18:12,140
locking mechanism at all so if some some

00:18:09,980 --> 00:18:15,500
user locking his machine then it depends

00:18:12,140 --> 00:18:17,780
at every other every locked command it's

00:18:15,500 --> 00:18:21,980
just done by the by the test user which

00:18:17,780 --> 00:18:23,990
is named by by this variable and in this

00:18:21,980 --> 00:18:26,600
way you can also have multiple piece

00:18:23,990 --> 00:18:27,830
like Alexander has from his notebook and

00:18:26,600 --> 00:18:30,400
from his testing machines their

00:18:27,830 --> 00:18:34,100
different piece and so we can use this

00:18:30,400 --> 00:18:36,110
this is this feature I for myself at the

00:18:34,100 --> 00:18:41,420
to I have mostly machines but most

00:18:36,110 --> 00:18:43,070
people SSH keys and you can put the

00:18:41,420 --> 00:18:44,930
multiplication in it but you can give it

00:18:43,070 --> 00:18:50,120
the same username and in front so it's

00:18:44,930 --> 00:18:51,680
no problem to deal with this the

00:18:50,120 --> 00:18:54,740
machines are pretty easy configured

00:18:51,680 --> 00:18:56,390
there's just a directory called n in

00:18:54,740 --> 00:18:59,330
every home directory of every machine

00:18:56,390 --> 00:19:03,620
and it's just contained files a named

00:18:59,330 --> 00:19:06,680
machine architecture IP and the MAC

00:19:03,620 --> 00:19:10,640
address and with its information the

00:19:06,680 --> 00:19:16,610
install script knows how to configure

00:19:10,640 --> 00:19:21,170
the HTTP know the DHCP D and took on how

00:19:16,610 --> 00:19:23,660
to configure the TFTP daemon to to let

00:19:21,170 --> 00:19:27,350
the machines automatically boot of over

00:19:23,660 --> 00:19:29,060
network and if I want to pluck a new

00:19:27,350 --> 00:19:32,710
machine into the infrastructure I just

00:19:29,060 --> 00:19:35,110
copied the this directory

00:19:32,710 --> 00:19:39,490
I set up in your new user copy this

00:19:35,110 --> 00:19:40,660
directory added these files and then I

00:19:39,490 --> 00:19:43,000
have a new machine with a new MAC

00:19:40,660 --> 00:19:45,820
address and and it just works it's

00:19:43,000 --> 00:19:48,190
pretty convenient and easy to to do this

00:19:45,820 --> 00:19:49,990
process the only imitations I have is

00:19:48,190 --> 00:19:52,750
the amount of serial lines on one

00:19:49,990 --> 00:19:58,030
computer so at the moment we have enough

00:19:52,750 --> 00:20:04,480
just that's okay so the installation

00:19:58,030 --> 00:20:07,810
script you can run over SSH

00:20:04,480 --> 00:20:10,210
it started via the NFT err program it's

00:20:07,810 --> 00:20:12,790
a pretty nice program from DJ beam as

00:20:10,210 --> 00:20:16,570
far as I know and it works pretty easy

00:20:12,790 --> 00:20:18,850
it's just some you run in fear and after

00:20:16,570 --> 00:20:22,300
this the first command or the first

00:20:18,850 --> 00:20:26,980
argument is in a folder and it reads the

00:20:22,300 --> 00:20:29,560
folder with the related files we shall

00:20:26,980 --> 00:20:31,690
lose it here and after this you give

00:20:29,560 --> 00:20:35,500
another command which is these insults

00:20:31,690 --> 00:20:37,570
script and then all these files are then

00:20:35,500 --> 00:20:41,290
in the environment with their first line

00:20:37,570 --> 00:20:45,040
as as content of the variables and so

00:20:41,290 --> 00:20:47,050
the script knows on which machine which

00:20:45,040 --> 00:20:50,050
architecture which IP address have it

00:20:47,050 --> 00:20:53,080
had to configure and then the automatic

00:20:50,050 --> 00:20:58,120
boot system runs and make the auto

00:20:53,080 --> 00:21:00,610
install what that's the script ulcers in

00:20:58,120 --> 00:21:03,310
beginning it loads the current Peaks

00:21:00,610 --> 00:21:05,620
eboot and B is the Rd file from the from

00:21:03,310 --> 00:21:10,060
the from the local Moreau it modifies

00:21:05,620 --> 00:21:12,220
DTH PD config based on these files and

00:21:10,060 --> 00:21:15,610
the environment variable the information

00:21:12,220 --> 00:21:18,280
from the home directory then reboots or

00:21:15,610 --> 00:21:21,850
cycled the Machine reboot also runs over

00:21:18,280 --> 00:21:25,390
SSH is locked in as root user on the

00:21:21,850 --> 00:21:27,400
machine and run the reboot command or if

00:21:25,390 --> 00:21:32,290
it doesn't work it just power cycle the

00:21:27,400 --> 00:21:36,700
Machine and and after this it looks at

00:21:32,290 --> 00:21:38,710
the serial output of the of of the

00:21:36,700 --> 00:21:41,170
machine itself and when it's or the

00:21:38,710 --> 00:21:43,090
machine run into the gradual ation your

00:21:41,170 --> 00:21:45,639
system is installed message then it

00:21:43,090 --> 00:21:48,579
turns off the pigs

00:21:45,639 --> 00:21:50,999
the HPD boot the network boot and then

00:21:48,579 --> 00:21:54,639
machine recycles and you get your prompt

00:21:50,999 --> 00:21:56,799
the whole process costs about seven

00:21:54,639 --> 00:21:59,499
minutes seven to eight minutes depending

00:21:56,799 --> 00:22:03,719
a little bit on the machine and if you

00:21:59,499 --> 00:22:05,919
just type as a sage machine at test lab

00:22:03,719 --> 00:22:08,349
install its cost you seven minutes and

00:22:05,919 --> 00:22:10,119
if you clean install system with a

00:22:08,349 --> 00:22:16,749
current snapshot and you can start

00:22:10,119 --> 00:22:20,169
testing your you diffs and to conclude

00:22:16,749 --> 00:22:23,200
everything what do you get from from

00:22:20,169 --> 00:22:25,029
this infrastructure you have a clean

00:22:23,200 --> 00:22:29,229
current snapshot installed into seven

00:22:25,029 --> 00:22:31,329
minutes you have the current source code

00:22:29,229 --> 00:22:35,070
available yr n FS is automatically

00:22:31,329 --> 00:22:42,459
mounted the machines are installed with

00:22:35,070 --> 00:22:43,989
site tar t TG set file with where some

00:22:42,459 --> 00:22:46,179
pre configuration is done you have

00:22:43,989 --> 00:22:49,029
faults on every installation you have

00:22:46,179 --> 00:22:51,339
the same as houses H keys so that is the

00:22:49,029 --> 00:22:52,899
it doesn't annoy you when you connect in

00:22:51,339 --> 00:22:54,459
over SSH over and over again after

00:22:52,899 --> 00:22:56,950
installation that you have to remove the

00:22:54,459 --> 00:23:00,309
old he and and accept the new one these

00:22:56,950 --> 00:23:01,209
are static and these NFS configuration

00:23:00,309 --> 00:23:02,139
is that again the interface

00:23:01,209 --> 00:23:07,349
configuration with IP addresses

00:23:02,139 --> 00:23:10,719
aesthetic so you just can start testing

00:23:07,349 --> 00:23:12,969
packages are also installed able to

00:23:10,719 --> 00:23:16,089
install from a local Moreau

00:23:12,969 --> 00:23:17,799
in no times just on the local network so

00:23:16,089 --> 00:23:21,309
it's pretty fast to to install the

00:23:17,799 --> 00:23:23,379
packages and you can see parking in us

00:23:21,309 --> 00:23:25,329
as I mentioned before you have direct

00:23:23,379 --> 00:23:27,129
access to the serial console so if you

00:23:25,329 --> 00:23:30,459
have internal diff and panics you can

00:23:27,129 --> 00:23:33,429
erect ladybug heads and when everything

00:23:30,459 --> 00:23:36,599
 up you can't plug the power

00:23:33,429 --> 00:23:41,739
switch remotely and put it in and retry

00:23:36,599 --> 00:23:46,059
so and I think this is for for most

00:23:41,739 --> 00:23:48,519
cases what you need if you make it diff

00:23:46,059 --> 00:23:50,409
in the in the kernel of besides off

00:23:48,519 --> 00:23:52,599
actual hardware development and maybe

00:23:50,409 --> 00:23:54,190
you have to put on your hands on but for

00:23:52,599 --> 00:23:56,859
most other cases if your this

00:23:54,190 --> 00:23:58,440
environment you can remotely debug

00:23:56,859 --> 00:24:05,759
everything and test

00:23:58,440 --> 00:24:07,529
everything unclean systems at least I

00:24:05,759 --> 00:24:11,129
will just show some problems and then

00:24:07,529 --> 00:24:13,500
some future expectations or some future

00:24:11,129 --> 00:24:16,980
plans I had in my head made which I

00:24:13,500 --> 00:24:19,019
would like to maybe implement problems

00:24:16,980 --> 00:24:22,590
we now have we have some race conditions

00:24:19,019 --> 00:24:25,259
so it's not it works in general but if

00:24:22,590 --> 00:24:28,950
multiple users would at the same time

00:24:25,259 --> 00:24:33,059
install several machines it's not rest

00:24:28,950 --> 00:24:36,840
condition free beakers the pigs eboot PX

00:24:33,059 --> 00:24:41,070
e butum runs or at runs the path slash

00:24:36,840 --> 00:24:44,250
bsd on the on the machines and try to

00:24:41,070 --> 00:24:45,720
get them from the from the TFTP and if

00:24:44,250 --> 00:24:51,419
you run multiple architectures or

00:24:45,720 --> 00:24:55,529
different versions of fdbs team Colonel

00:24:51,419 --> 00:24:58,710
van you got in trouble because maybe

00:24:55,529 --> 00:25:00,480
there's an armed PSD files kernel to

00:24:58,710 --> 00:25:02,399
load and in some other user in the

00:25:00,480 --> 00:25:04,500
second later over overwrite it with a

00:25:02,399 --> 00:25:08,220
new installation and this is my 386 or

00:25:04,500 --> 00:25:13,590
AMD 64 and so you can can get it in

00:25:08,220 --> 00:25:15,659
conflict but if you install it in a

00:25:13,590 --> 00:25:17,970
reasonable distance and it's it's okay

00:25:15,659 --> 00:25:18,720
and if you just have a few users it runs

00:25:17,970 --> 00:25:20,279
for the moment

00:25:18,720 --> 00:25:22,470
at the moment they are three users it's

00:25:20,279 --> 00:25:25,919
me it's Alexander and it's a Patrick

00:25:22,470 --> 00:25:28,620
Patrick make just some arm stuff and

00:25:25,919 --> 00:25:30,809
there we got fine firstly into this into

00:25:28,620 --> 00:25:32,700
these problems that there that I reckon

00:25:30,809 --> 00:25:34,679
in the TFTP directory they erase from

00:25:32,700 --> 00:25:36,960
some kernels laying around which is not

00:25:34,679 --> 00:25:40,200
for I 386 architecture and the machines

00:25:36,960 --> 00:25:46,019
doesn't boot so and this is a problem

00:25:40,200 --> 00:25:48,870
I'm working on at the moment my future

00:25:46,019 --> 00:25:51,929
plans for the system to make it um a my

00:25:48,870 --> 00:25:53,370
usable I got into action with or in

00:25:51,929 --> 00:25:56,820
discussions with other obviously

00:25:53,370 --> 00:26:01,580
developers we're firstly more

00:25:56,820 --> 00:26:05,250
architectures so that we can provide

00:26:01,580 --> 00:26:09,560
these infrastructure for other omic

00:26:05,250 --> 00:26:11,900
developers to have an easy access

00:26:09,560 --> 00:26:14,300
for other architectures which not

00:26:11,900 --> 00:26:16,850
everybody has in this home or there's

00:26:14,300 --> 00:26:20,570
just a few developers few enthusiastic

00:26:16,850 --> 00:26:23,630
developers who have really many machines

00:26:20,570 --> 00:26:28,400
at home and testing on but most don't

00:26:23,630 --> 00:26:30,850
and so most don't care of if something

00:26:28,400 --> 00:26:37,460
break on other architectures and to

00:26:30,850 --> 00:26:40,040
lower the what scroll to lower the the

00:26:37,460 --> 00:26:43,480
amount of effort you have to make to

00:26:40,040 --> 00:26:45,470
test it on spark or empower PC or MIPS I

00:26:43,480 --> 00:26:47,840
would like to provide these

00:26:45,470 --> 00:26:51,860
infrastructure remotely ysh for other

00:26:47,840 --> 00:26:53,780
developers so that they if they have it

00:26:51,860 --> 00:26:56,270
diff maybe deeply in the kernel or so

00:26:53,780 --> 00:26:58,610
and don't know if it works or not they

00:26:56,270 --> 00:27:01,700
have the ability to easy test that with

00:26:58,610 --> 00:27:04,130
this infrastructure this is to my my my

00:27:01,700 --> 00:27:05,690
main purpose at the moment to to provide

00:27:04,130 --> 00:27:09,230
this kind of service for the core

00:27:05,690 --> 00:27:12,770
developers and Armen sparc64 we have in

00:27:09,230 --> 00:27:15,980
our lab thanks to MPI and and chris says

00:27:12,770 --> 00:27:21,980
obviously they sent me two machines and

00:27:15,980 --> 00:27:25,460
PowerPC g5 system which are which is to

00:27:21,980 --> 00:27:29,090
prepare to get into the system or and I

00:27:25,460 --> 00:27:31,340
guess I get quadrants Chris and mips64

00:27:29,090 --> 00:27:34,010
machine which also pretty interesting so

00:27:31,340 --> 00:27:38,690
we have from the alignment perspective

00:27:34,010 --> 00:27:43,310
and from the strictness and the memory

00:27:38,690 --> 00:27:44,870
we have a huge a good good test coverage

00:27:43,310 --> 00:27:47,300
and go to Habakkuk coverage at the

00:27:44,870 --> 00:27:49,820
moment so and then except is to

00:27:47,300 --> 00:27:52,670
integrate these systems Patrick is

00:27:49,820 --> 00:27:57,560
working on an arm and he have an own arm

00:27:52,670 --> 00:28:00,920
machine the way I can remotely debug on

00:27:57,560 --> 00:28:08,090
and developing on which use of maybe

00:28:00,920 --> 00:28:10,040
just he at the moment from from Patrick

00:28:08,090 --> 00:28:12,200
I got another requirement he would like

00:28:10,040 --> 00:28:14,450
to remotely upload binaries at the

00:28:12,200 --> 00:28:16,130
moment he he has a root access on this

00:28:14,450 --> 00:28:18,940
machine on the test master machine

00:28:16,130 --> 00:28:21,560
itself and here lock in and and put his

00:28:18,940 --> 00:28:22,850
binaries in place in the TFTP directory

00:28:21,560 --> 00:28:26,630
and

00:28:22,850 --> 00:28:29,900
and boota boota manually amalric edit CD

00:28:26,630 --> 00:28:33,290
HTTP config and I think it's more

00:28:29,900 --> 00:28:35,630
convenient find a way to give him access

00:28:33,290 --> 00:28:40,390
to just upload the file remotely and and

00:28:35,630 --> 00:28:42,680
switch on and off the DHCP config and

00:28:40,390 --> 00:28:44,840
recurse in arm is at the moment not

00:28:42,680 --> 00:28:46,700
possible to make it whole automatic

00:28:44,840 --> 00:28:49,940
installation because Patrick is working

00:28:46,700 --> 00:28:54,140
on initially get some boards some some

00:28:49,940 --> 00:28:56,180
arm chips or socks working and there you

00:28:54,140 --> 00:29:01,280
don't have an convenient or installation

00:28:56,180 --> 00:29:04,310
so so if I implement some switches on

00:29:01,280 --> 00:29:07,010
this level it would work for for this

00:29:04,310 --> 00:29:10,880
work it would help for for this work

00:29:07,010 --> 00:29:14,090
directly on the source and the last idea

00:29:10,880 --> 00:29:17,000
which came me for interactive is an male

00:29:14,090 --> 00:29:21,290
interface because the main of misty

00:29:17,000 --> 00:29:23,350
workflow is there are people who are

00:29:21,290 --> 00:29:26,900
sending dibs on the mailing list and

00:29:23,350 --> 00:29:28,970
pretty nice interface would be to send

00:29:26,900 --> 00:29:31,100
mails directly or forward mails from

00:29:28,970 --> 00:29:33,260
take directly after the test machines

00:29:31,100 --> 00:29:35,090
and they get automatically installed

00:29:33,260 --> 00:29:37,070
they'd if applied above the regression

00:29:35,090 --> 00:29:40,460
test run and if something in the chain

00:29:37,070 --> 00:29:44,270
failed you can reply with which has the

00:29:40,460 --> 00:29:46,400
error messages in it says hey see there

00:29:44,270 --> 00:29:50,120
this that doesn't run or if everything

00:29:46,400 --> 00:29:54,790
Runyan you can just start testing on the

00:29:50,120 --> 00:29:58,520
on the on the whole on the whole diff

00:29:54,790 --> 00:30:00,770
and there's add insult and you don't

00:29:58,520 --> 00:30:02,630
have to filling yourself with installing

00:30:00,770 --> 00:30:04,640
machine and make off the stuff and so

00:30:02,630 --> 00:30:05,960
just type it in and in ten minutes you

00:30:04,640 --> 00:30:08,510
have your machine with stiff and you can

00:30:05,960 --> 00:30:10,370
test it by your own then just should be

00:30:08,510 --> 00:30:14,900
lower the F Court or for testing tips

00:30:10,370 --> 00:30:17,750
and maybe get some more pocus on and if

00:30:14,900 --> 00:30:20,330
testing yeah but this is somebody for

00:30:17,750 --> 00:30:25,100
the future which I might make through

00:30:20,330 --> 00:30:29,230
the next year or so I will see yeah it's

00:30:25,100 --> 00:30:29,230
mine sanitation have you any questions

00:30:33,840 --> 00:30:39,070
yeah I'm cool stuff um you said you did

00:30:37,240 --> 00:30:41,620
a regression test every night it means

00:30:39,070 --> 00:30:44,470
you step step up the machine built IPSec

00:30:41,620 --> 00:30:47,110
tunnels to the performance test and then

00:30:44,470 --> 00:30:50,559
use the your lab for other things during

00:30:47,110 --> 00:30:52,270
the day the webpage you said you showed

00:30:50,559 --> 00:30:55,240
in the beginning that you said use do

00:30:52,270 --> 00:30:58,480
some regression test every day yeah if

00:30:55,240 --> 00:31:01,059
that infrastructure I showed this is

00:30:58,480 --> 00:31:03,669
just the regression tests yes every

00:31:01,059 --> 00:31:12,029
night at two o'clock I think around two

00:31:03,669 --> 00:31:16,779
o'clock the computer the Quran drop a

00:31:12,029 --> 00:31:19,120
cron job running on bloom starts it's h

00:31:16,779 --> 00:31:20,440
commands to to the test master than the

00:31:19,120 --> 00:31:23,260
machine tool automatically installed if

00:31:20,440 --> 00:31:25,570
it's finished it makes it run

00:31:23,260 --> 00:31:29,909
suppression tests and they're ready in

00:31:25,570 --> 00:31:29,909
the morning or so I was caused several

00:32:40,720 --> 00:32:47,210
thanks for the talk I wanted to ask you

00:32:43,790 --> 00:32:49,610
we were doing we're also doing a network

00:32:47,210 --> 00:32:51,680
testing well we do in the network

00:32:49,610 --> 00:32:55,130
testing but in similar environments and

00:32:51,680 --> 00:32:57,200
we wanted to I want to ask if you

00:32:55,130 --> 00:32:59,750
consider to use IP my interface instead

00:32:57,200 --> 00:33:01,790
of the power switch we use the power

00:32:59,750 --> 00:33:03,980
switch before but now we use IPMI

00:33:01,790 --> 00:33:06,680
because it eliminates lots of cables and

00:33:03,980 --> 00:33:11,210
a need to maintain another device

00:33:06,680 --> 00:33:13,940
basically thanks I got asked about the

00:33:11,210 --> 00:33:16,700
IP my interface to by other developers

00:33:13,940 --> 00:33:18,740
but to be true the machines we are

00:33:16,700 --> 00:33:23,090
running there are so old they don't have

00:33:18,740 --> 00:33:25,460
an IPA interface that's reason but for

00:33:23,090 --> 00:33:27,140
all for spark and for newer I 286

00:33:25,460 --> 00:33:29,090
machines you're right IPM I would be

00:33:27,140 --> 00:33:30,470
nice at a phrase at the moment we are

00:33:29,090 --> 00:33:32,840
running good with this power switches

00:33:30,470 --> 00:33:39,830
it's it's ok but yeah but you're right

00:33:32,840 --> 00:33:42,280
there's a lot of cables any more

00:33:39,830 --> 00:33:42,280
questions

00:33:45,690 --> 00:33:52,410

YouTube URL: https://www.youtube.com/watch?v=bTZ7YhZpVeg


