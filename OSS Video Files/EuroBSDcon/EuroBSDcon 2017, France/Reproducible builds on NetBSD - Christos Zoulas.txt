Title: Reproducible builds on NetBSD - Christos Zoulas
Publication date: 2019-10-16
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

I will talk about my recent work getting reproducible
builds on NetBSD. The talk will be based on information that I
first posted at:
https://blog.netbsd.org/tnf/entry/netbsd_fully_reproducible_builds

and it will have more detailed examples of the toolchain, build,
and application changes that every OS needs to make to achieve
reprodicibility.

I will also discuss the meaning of timestamps and other “build-specific”
information that needs to become predictable for fully reproducible
builds, and if it is worth faking in the first place to achieve
identical built artifacts at the media level.

Speaker biography:

I live in New York City and work in the Finance Sector. I spend most
of my free time with my kids. When they let me I try to write and
fix things for NetBSD/file/tcsh/libedit/… and other pieces of code
I’ve worked on over the years.
Captions: 
	00:00:00,810 --> 00:00:09,719
so hi my name is christos ULA's and I've

00:00:04,500 --> 00:00:12,179
been with me forever year I've been

00:00:09,719 --> 00:00:15,630
trying to get that PSD to work with

00:00:12,179 --> 00:00:19,250
reproducible builds so my first these

00:00:15,630 --> 00:00:19,250
picture is very irrelevant to me because

00:00:22,460 --> 00:00:26,789
elementary school and although they have

00:00:24,810 --> 00:00:29,910
a much more modern version please that's

00:00:26,789 --> 00:00:32,130
how they gave us our homework and you

00:00:29,910 --> 00:00:35,760
know it looked almost the same so we

00:00:32,130 --> 00:00:37,079
were it was kind of consistent but why

00:00:35,760 --> 00:00:40,110
do we want to happen to produce low

00:00:37,079 --> 00:00:42,600
bills so first of all you know would you

00:00:40,110 --> 00:00:44,399
buy a product that's different every

00:00:42,600 --> 00:00:47,039
time but let's consider you buying it

00:00:44,399 --> 00:00:49,379
soft drink like you buy a product that

00:00:47,039 --> 00:00:52,440
tastes differently every time or

00:00:49,379 --> 00:00:55,949
depending on if it was manufactured in

00:00:52,440 --> 00:00:58,050
the States or in Paris or you know if it

00:00:55,949 --> 00:01:03,320
was manufactured today or tomorrow and

00:00:58,050 --> 00:01:03,320
taste it differently or yes you would

00:01:04,110 --> 00:01:12,000
but anyway depending which factory build

00:01:09,000 --> 00:01:14,369
it or if it was raining or it was a hot

00:01:12,000 --> 00:01:17,960
or cold while it was built well I don't

00:01:14,369 --> 00:01:20,820
think so and you know in science

00:01:17,960 --> 00:01:22,920
reproducibility is one of the major

00:01:20,820 --> 00:01:25,680
cornerstones and you know well it lately

00:01:22,920 --> 00:01:27,420
we have seen even there you know

00:01:25,680 --> 00:01:29,759
complaints from the scientific community

00:01:27,420 --> 00:01:32,640
that it's kind of like usability people

00:01:29,759 --> 00:01:34,650
are coming up with you know very wild

00:01:32,640 --> 00:01:37,250
claims and other laboratories around the

00:01:34,650 --> 00:01:41,400
world have trouble reproduces them

00:01:37,250 --> 00:01:44,009
because we don't really have a clear

00:01:41,400 --> 00:01:46,920
process to go from the ingredients were

00:01:44,009 --> 00:01:50,310
for the basic premise up to the result

00:01:46,920 --> 00:01:52,380
and so there is a lot of gaps in the way

00:01:50,310 --> 00:01:54,570
that we are described in our processes

00:01:52,380 --> 00:01:58,259
and these kind of gaps make it virtually

00:01:54,570 --> 00:02:00,090
impossible so you know in software we're

00:01:58,259 --> 00:02:03,090
doing well with open source but then

00:02:00,090 --> 00:02:03,840
we're also doing poorly because we don't

00:02:03,090 --> 00:02:06,539
have a

00:02:03,840 --> 00:02:12,989
good engineering process when we built

00:02:06,539 --> 00:02:16,260
it and yes you know we you know can sign

00:02:12,989 --> 00:02:18,300
this you know the result of a build the

00:02:16,260 --> 00:02:21,629
faculty installed media we can design

00:02:18,300 --> 00:02:25,379
the source that built a big media that

00:02:21,629 --> 00:02:28,140
provides you know we trust the person

00:02:25,379 --> 00:02:31,349
build it and we trust that nothing has

00:02:28,140 --> 00:02:34,230
been tampered with in the process but

00:02:31,349 --> 00:02:36,200
you know can we verify that this person

00:02:34,230 --> 00:02:42,180
built this source and produced this

00:02:36,200 --> 00:02:44,610
binary artifact you know and today for

00:02:42,180 --> 00:02:45,989
most things it's impossible because you

00:02:44,610 --> 00:02:50,150
know even if you take the source and

00:02:45,989 --> 00:02:52,470
build it ourselves it won't match so

00:02:50,150 --> 00:02:56,940
revolution build is all about the

00:02:52,470 --> 00:02:59,239
ability to make sure that the path from

00:02:56,940 --> 00:03:01,739
you know the source tree or the

00:02:59,239 --> 00:03:03,959
repository down to the distribution

00:03:01,739 --> 00:03:07,730
media receive your omlet say is

00:03:03,959 --> 00:03:09,870
producing exactly the same results

00:03:07,730 --> 00:03:11,579
they're people who say this is a waste

00:03:09,870 --> 00:03:13,109
of time and you know we shouldn't be

00:03:11,579 --> 00:03:14,819
doing that we have better things to do

00:03:13,109 --> 00:03:16,980
you know instead of spending time

00:03:14,819 --> 00:03:19,650
twiddling bit sometime times which is

00:03:16,980 --> 00:03:22,440
really intriguing to be fixing bugs you

00:03:19,650 --> 00:03:24,870
know all of this 100% the

00:03:22,440 --> 00:03:27,260
reproducibility is kind of useless you

00:03:24,870 --> 00:03:29,849
know we should make sure that at least

00:03:27,260 --> 00:03:32,340
we have certain things that are useful

00:03:29,849 --> 00:03:34,620
for example the results of the compiler

00:03:32,340 --> 00:03:36,540
you know if you build particular biomes

00:03:34,620 --> 00:03:39,329
but you know the pilot lights it's the

00:03:36,540 --> 00:03:42,000
same all the time but not go all the way

00:03:39,329 --> 00:03:46,319
from source to binder to see your own

00:03:42,000 --> 00:03:48,450
and that makes life really complicated

00:03:46,319 --> 00:03:49,889
for everybody because you know you end

00:03:48,450 --> 00:03:52,739
up with the cd-rom that looks like an

00:03:49,889 --> 00:03:54,540
ami you know picking up or picking up

00:03:52,739 --> 00:03:56,910
I'm picking up and taking things of

00:03:54,540 --> 00:03:57,870
course until you find out what why you

00:03:56,910 --> 00:03:59,670
know

00:03:57,870 --> 00:04:01,709
yes this check some of that Stevie ROM

00:03:59,670 --> 00:04:05,610
doesn't match the one who actually just

00:04:01,709 --> 00:04:07,739
built right now and you know yeah being

00:04:05,610 --> 00:04:11,160
planted backdoor is easier but you know

00:04:07,739 --> 00:04:14,489
it's getting less important if you sign

00:04:11,160 --> 00:04:17,160
things and bit wiser permissibility tide

00:04:14,489 --> 00:04:22,760
a whole lot of perth in open source

00:04:17,160 --> 00:04:26,669
product or you know have achieved that

00:04:22,760 --> 00:04:32,220
so i was really talking to start with

00:04:26,669 --> 00:04:38,580
making is the actually because people

00:04:32,220 --> 00:04:41,070
have done most of the work around the

00:04:38,580 --> 00:04:44,190
internet and fetch star balls to do

00:04:41,070 --> 00:04:46,610
distribution there is an integrated tool

00:04:44,190 --> 00:04:49,080
chain that means that already because

00:04:46,610 --> 00:04:51,240
people have been thinking about this

00:04:49,080 --> 00:04:53,669
everything that we're supposed to be

00:04:51,240 --> 00:04:55,650
building binary artifacts that are

00:04:53,669 --> 00:04:57,870
participating in the end product has

00:04:55,650 --> 00:04:59,610
been too defined so that means that

00:04:57,870 --> 00:05:02,130
there is no external dependencies of the

00:04:59,610 --> 00:05:04,289
operating system to use the operating

00:05:02,130 --> 00:05:07,560
system tools to build things that i need

00:05:04,289 --> 00:05:10,590
to be usable and there is no spell the

00:05:07,560 --> 00:05:12,000
name so basically what it means is I can

00:05:10,590 --> 00:05:14,400
build on a different operating system

00:05:12,000 --> 00:05:17,130
and that's what Debian and Debian folks

00:05:14,400 --> 00:05:18,660
do when with reproducible builds or they

00:05:17,130 --> 00:05:20,610
just download their source

00:05:18,660 --> 00:05:23,099
they run you'll notice age and that's

00:05:20,610 --> 00:05:29,340
all they have to do to get the foam that

00:05:23,099 --> 00:05:31,080
BSD build is trivial on cross build set

00:05:29,340 --> 00:05:34,169
because these days you know nobody wants

00:05:31,080 --> 00:05:36,930
to build on their slows you they have

00:05:34,169 --> 00:05:38,910
they build on the fast so that means but

00:05:36,930 --> 00:05:40,680
for most architectures this is you know

00:05:38,910 --> 00:05:43,620
a different architecture than the target

00:05:40,680 --> 00:05:47,190
architecture so if you look go to this

00:05:43,620 --> 00:05:49,620
website you see basically one we use

00:05:47,190 --> 00:05:52,650
exactly this the red stuff is mine so

00:05:49,620 --> 00:05:55,940
they built things twice there they are

00:05:52,650 --> 00:05:55,940
the few variations which

00:05:56,110 --> 00:06:00,050
first of all which is basically dipped

00:05:59,060 --> 00:06:02,180
on steroids

00:06:00,050 --> 00:06:03,800
so it's responded to these two is a

00:06:02,180 --> 00:06:05,840
great tool it's responsible for actually

00:06:03,800 --> 00:06:08,300
peeling the onion you give it a cd-rom

00:06:05,840 --> 00:06:09,830
when it goes down and takes it apart

00:06:08,300 --> 00:06:11,570
apart apart and you like finds the

00:06:09,830 --> 00:06:21,020
source of difference and then it runs

00:06:11,570 --> 00:06:22,550
the appropriate tool for example so and

00:06:21,020 --> 00:06:24,380
all of that is on the website so it's

00:06:22,550 --> 00:06:26,060
very nice because you know you every

00:06:24,380 --> 00:06:28,010
week I went there and I was disappointed

00:06:26,060 --> 00:06:30,260
by seeing my bills were still different

00:06:28,010 --> 00:06:32,540
but on the other hand I just pinpoint

00:06:30,260 --> 00:06:35,120
all of the parts of the bills are all

00:06:32,540 --> 00:06:38,650
different and that runs all

00:06:35,120 --> 00:06:40,940
automatically and right now since like

00:06:38,650 --> 00:06:41,680
the beginning of the year in February

00:06:40,940 --> 00:06:46,100
March

00:06:41,680 --> 00:06:49,220
we are usable on both architectures or

00:06:46,100 --> 00:06:53,780
spartax before and x86 64 that gets

00:06:49,220 --> 00:07:05,900
built weekly on debian so baby and

00:06:53,780 --> 00:07:08,780
buries it up a few things and it also

00:07:05,900 --> 00:07:11,270
varies the umass you know it doesn't bar

00:07:08,780 --> 00:07:13,430
in the city you you know time to fire

00:07:11,270 --> 00:07:16,280
the file system but these are the things

00:07:13,430 --> 00:07:18,320
that people are considering you know are

00:07:16,280 --> 00:07:21,200
the sorts of differences that prevent us

00:07:18,320 --> 00:07:23,480
from doing reproducible bills well if

00:07:21,200 --> 00:07:27,350
you distill them down there are really

00:07:23,480 --> 00:07:30,500
ten categories here so their time stamps

00:07:27,350 --> 00:07:33,080
as you know dates and times embedded in

00:07:30,500 --> 00:07:35,860
the source code there we build things

00:07:33,080 --> 00:07:39,280
depending on time zone and you know

00:07:35,860 --> 00:07:41,639
embed time comes that times independent

00:07:39,280 --> 00:07:45,810
parties with another

00:07:41,639 --> 00:07:49,979
each one source order if we try to build

00:07:45,810 --> 00:07:54,780
things with random data every last one

00:07:49,979 --> 00:07:56,370
is passed your organization the tools

00:07:54,780 --> 00:07:58,169
that I've mentioned build parameters

00:07:56,370 --> 00:08:00,330
environment Watterson you know finally

00:07:58,169 --> 00:08:02,370
it would be nice to be able to build as

00:08:00,330 --> 00:08:15,139
anybody and be able to build the cd-rom

00:08:02,370 --> 00:08:15,139
that is exactly the same so the latest

00:08:22,129 --> 00:08:29,969
and all the file system objects get this

00:08:27,120 --> 00:08:38,969
time to find it when we start to build

00:08:29,969 --> 00:08:44,760
you know we have to unfortunately CVS we

00:08:38,969 --> 00:08:46,709
use CVS it's not so yeah I don't want to

00:08:44,760 --> 00:08:51,329
get too much of that slide but we put it

00:08:46,709 --> 00:08:55,290
this way that CVS takes a view of you

00:08:51,329 --> 00:08:58,320
know five by five there is no kind of

00:08:55,290 --> 00:09:00,779
global view so there is also an issue

00:08:58,320 --> 00:09:04,890
with updates versus checkouts where

00:09:00,779 --> 00:09:07,380
because updates make the file by the

00:09:04,890 --> 00:09:08,730
current timestamp and that's because it

00:09:07,380 --> 00:09:10,490
makes sense let's say that you're in

00:09:08,730 --> 00:09:13,470
directory that you're building a program

00:09:10,490 --> 00:09:16,860
let's call it two dots a the top see and

00:09:13,470 --> 00:09:18,449
you just build it now you CVS update and

00:09:16,860 --> 00:09:21,360
there is a newer version of food of see

00:09:18,449 --> 00:09:23,279
you want that then the you could see you

00:09:21,360 --> 00:09:24,320
just download from the latest time and

00:09:23,279 --> 00:09:26,480
so it's newer

00:09:24,320 --> 00:09:29,149
what we'll just build because you were

00:09:26,480 --> 00:09:31,250
just updated and so that it gets

00:09:29,149 --> 00:09:33,529
revealed next time around me on the

00:09:31,250 --> 00:09:37,540
other hand this is not the right time

00:09:33,529 --> 00:09:40,490
sign so we I just added a fly or minus D

00:09:37,540 --> 00:09:42,769
check out consistent I'm Sam so when you

00:09:40,490 --> 00:09:44,120
update your three major reproducible

00:09:42,769 --> 00:09:48,259
bills you can do that

00:09:44,120 --> 00:10:00,040
and finally tuples yes latest that scans

00:09:48,259 --> 00:10:00,040
a CVS repository in and then you have to

00:10:08,360 --> 00:10:11,450
[Music]

00:10:16,490 --> 00:10:19,549
[Music]

00:10:26,980 --> 00:10:36,380
which is very nice file transfer you

00:10:34,579 --> 00:10:37,910
know to preserve times the format

00:10:36,380 --> 00:10:41,829
anymore so the times have to be they are

00:10:37,910 --> 00:10:52,600
less than useful and finally all of that

00:10:41,829 --> 00:10:55,579
documents but use for that speaking says

00:10:52,600 --> 00:10:57,019
disable it for you know conditioning

00:10:55,579 --> 00:11:00,860
that make file to do so here produced

00:10:57,019 --> 00:11:03,319
for bills so for the very thing bait

00:11:00,860 --> 00:11:05,269
sometimes you have to remove these three

00:11:03,319 --> 00:11:07,699
modules from the sources and that's good

00:11:05,269 --> 00:11:09,740
like a you know eventually you can put

00:11:07,699 --> 00:11:12,800
them back and helps if you feel big obey

00:11:09,740 --> 00:11:15,319
the environment viable to build to put

00:11:12,800 --> 00:11:18,620
the feet viable second viable face of it

00:11:15,319 --> 00:11:20,810
for a timestamp and again therefore

00:11:18,620 --> 00:11:22,050
they're fast informants that want to

00:11:20,810 --> 00:11:30,839
make local time

00:11:22,050 --> 00:12:14,670
I saw images again you have to the you

00:11:30,839 --> 00:12:18,420
know we sort after the deal was done

00:12:14,670 --> 00:12:22,190
each guild was done by far the most

00:12:18,420 --> 00:12:25,850
volunteer and faithful one was GCC and

00:12:22,190 --> 00:12:28,500
GCC has many many different nuanced

00:12:25,850 --> 00:12:30,510
issues here the first one is basically

00:12:28,500 --> 00:12:34,200
the expansion of underscore underscore

00:12:30,510 --> 00:12:36,029
fire and for that you can use - I

00:12:34,200 --> 00:12:49,230
remarked which is maybe is the extension

00:12:36,029 --> 00:12:51,899
by the way there how many good which one

00:12:49,230 --> 00:12:54,029
of these and how to do them exactly so

00:12:51,899 --> 00:12:56,190
the first one is easy you just you know

00:12:54,029 --> 00:12:58,740
it just remarked the path the second way

00:12:56,190 --> 00:13:01,350
is a bit more complicated so there is my

00:12:58,740 --> 00:13:04,589
necessity but prefix man inside you see

00:13:01,350 --> 00:13:07,199
right now the problem is that you can't

00:13:04,589 --> 00:13:11,370
really put the source file in there

00:13:07,199 --> 00:13:14,250
that's why because if you put a source

00:13:11,370 --> 00:13:19,140
path what happens is that the expanded

00:13:14,250 --> 00:13:24,560
source path ends up in the DW 80

00:13:19,140 --> 00:13:28,399
producer and the W 80 count dir path so

00:13:24,560 --> 00:13:28,399
here sorry

00:13:30,110 --> 00:13:49,199
there then so you see basically expanded

00:13:46,769 --> 00:13:51,240
so that would be different than every

00:13:49,199 --> 00:13:53,490
bill depending on where I build so the

00:13:51,240 --> 00:13:57,060
extent of the extension here to GCC was

00:13:53,490 --> 00:13:58,920
basically to go and expand the

00:13:57,060 --> 00:14:05,370
environment variable in the source and

00:13:58,920 --> 00:14:13,740
he finds a dollar instead of the more

00:14:05,370 --> 00:14:15,750
complicated stuff depending if you're

00:14:13,740 --> 00:14:19,430
building on a PhD with object

00:14:15,750 --> 00:14:21,000
directories or not you know your your

00:14:19,430 --> 00:14:36,149
bill passed

00:14:21,000 --> 00:14:39,809
become different so but nevertheless

00:14:36,149 --> 00:14:42,569
what that does is it uses kind of the

00:14:39,809 --> 00:14:44,399
Reg it captures syntax like said to mark

00:14:42,569 --> 00:14:45,899
things around so that things are being

00:14:44,399 --> 00:14:49,019
consistent if you're using object

00:14:45,899 --> 00:14:50,790
directories or not the same thing

00:14:49,019 --> 00:14:55,309
trivially is added for length again for

00:14:50,790 --> 00:14:59,370
link libraries and that does it with

00:14:55,309 --> 00:15:02,069
parts from GCC now unfortunately we have

00:14:59,370 --> 00:15:06,059
to deal with you balling place and you

00:15:02,069 --> 00:15:08,189
know it's fine to limit your your build

00:15:06,059 --> 00:15:09,809
saying okay it has to be rooted at a

00:15:08,189 --> 00:15:12,899
particular directory and that has to be

00:15:09,809 --> 00:15:14,160
user source documentation but we don't

00:15:12,899 --> 00:15:16,829
want that we want people to build

00:15:14,160 --> 00:15:18,990
without root with whatever directories

00:15:16,829 --> 00:15:21,959
they want to build and those directories

00:15:18,990 --> 00:15:24,839
can contain symlinks anywhere so the

00:15:21,959 --> 00:15:29,879
problem is the program's when they start

00:15:24,839 --> 00:15:35,269
up they can either believe what the WD

00:15:29,879 --> 00:15:38,699
is verified or use gates WB together

00:15:35,269 --> 00:15:48,360
so what we want to do is you want to be

00:15:38,699 --> 00:15:50,459
consistent this can actually you know

00:15:48,360 --> 00:15:52,529
take the logical path and convert into

00:15:50,459 --> 00:15:53,929
physical before it runs me and that's

00:15:52,529 --> 00:15:57,449
kind of schools of things for us

00:15:53,929 --> 00:16:02,100
so the solution there is to basically

00:15:57,449 --> 00:16:06,569
make me obey the working directory and

00:16:02,100 --> 00:16:10,470
then it's look using the shell make

00:16:06,569 --> 00:16:12,569
basically use make directly to tell it

00:16:10,470 --> 00:16:14,730
change to the path that feature already

00:16:12,569 --> 00:16:17,279
existed so you know you can do that and

00:16:14,730 --> 00:16:19,319
we did that because may is already - but

00:16:17,279 --> 00:16:21,720
the shell is not so basically we're

00:16:19,319 --> 00:16:23,249
using the operating system shell so we

00:16:21,720 --> 00:16:25,860
can't depend on it but we build our own

00:16:23,249 --> 00:16:30,600
need so you know we can depend on you to

00:16:25,860 --> 00:16:34,410
do the right thing so what is a tool now

00:16:30,600 --> 00:16:37,920
so this is the list of all of you know

00:16:34,410 --> 00:16:47,610
machine independent tools so these are

00:16:37,920 --> 00:16:51,920
all the programs you know they don't

00:16:47,610 --> 00:16:51,920
exist in circle to change

00:16:52,760 --> 00:16:57,940
[Music]

00:16:55,150 --> 00:17:00,610
great or some of those my particular

00:16:57,940 --> 00:17:03,160
kinetic is these data Jennison

00:17:00,610 --> 00:17:05,680
some of them are used for cameras like

00:17:03,160 --> 00:17:07,660
impiety there is a lot of them out there

00:17:05,680 --> 00:17:09,069
but this is the total set of machine

00:17:07,660 --> 00:17:10,300
independent tools machine dependent

00:17:09,069 --> 00:17:12,430
means that no matter what the

00:17:10,300 --> 00:17:14,050
architecture is I need those tools and

00:17:12,430 --> 00:17:18,939
they have to produce cross architecture

00:17:14,050 --> 00:17:21,880
independent builds then we have the

00:17:18,939 --> 00:17:24,220
tools the machine dependent which is

00:17:21,880 --> 00:17:29,410
basically your standard assemblers

00:17:24,220 --> 00:17:31,390
linkers etc independent that's because

00:17:29,410 --> 00:17:33,309
make knows about your current

00:17:31,390 --> 00:17:35,559
architecture on this make is the shell

00:17:33,309 --> 00:17:37,150
script wrapper that is

00:17:35,559 --> 00:17:43,480
architecture-specific where the other

00:17:37,150 --> 00:17:45,429
one is the architecture neutral so the

00:17:43,480 --> 00:17:47,860
other thing that's very complicated as

00:17:45,429 --> 00:17:49,450
you all know is that every package has

00:17:47,860 --> 00:17:51,070
different build options you can build

00:17:49,450 --> 00:17:52,770
with different back-end libraries with

00:17:51,070 --> 00:18:20,490
different defines different features

00:17:52,770 --> 00:18:22,929
listen that process of producing

00:18:20,490 --> 00:18:25,990
incompatible builds but simple enough to

00:18:22,929 --> 00:18:28,300
fix we just haven't done it yet so this

00:18:25,990 --> 00:18:31,110
is a set of parameters for example that

00:18:28,300 --> 00:18:34,590
have values not just

00:18:31,110 --> 00:18:38,429
you know boolean and these are the

00:18:34,590 --> 00:18:52,140
tunable 's that we have in met BST so

00:18:38,429 --> 00:18:54,450
you see they're just too many to the 12

00:18:52,140 --> 00:18:57,299
times seven kind of combination of bills

00:18:54,450 --> 00:19:01,649
and that unwieldy I mean some of them

00:18:57,299 --> 00:19:04,590
you should just get rid of so as far as

00:19:01,649 --> 00:19:08,360
the last part which is like the

00:19:04,590 --> 00:19:12,990
isolation of the build environment

00:19:08,360 --> 00:19:15,510
provide useful you know you can go for

00:19:12,990 --> 00:19:21,299
the extreme case where you control you

00:19:15,510 --> 00:19:23,580
totally control the environment which if

00:19:21,299 --> 00:19:26,850
I have VM so I construct at the end

00:19:23,580 --> 00:19:29,190
knowing the exactly in parameters and

00:19:26,850 --> 00:19:30,450
then I can only build in the VM and this

00:19:29,190 --> 00:19:33,090
is the only way I can make their probe

00:19:30,450 --> 00:19:35,789
useful bills well that's the easy part

00:19:33,090 --> 00:19:39,179
but it's also the least satisfactory

00:19:35,789 --> 00:19:41,549
want but you have to go both ways you

00:19:39,179 --> 00:19:44,750
have to like both fix the source and fix

00:19:41,549 --> 00:19:44,750
the things that are easy to fix

00:19:49,549 --> 00:19:54,389
so for example of the things that we did

00:19:52,260 --> 00:19:56,850
sanitize the source and sometimes an ill

00:19:54,389 --> 00:19:59,880
system are great but if you wanted to

00:19:56,850 --> 00:20:01,860
build as non-root user it's harder but

00:19:59,880 --> 00:20:17,059
fortunately me PhD has already done that

00:20:01,860 --> 00:20:22,970
and so you can just do this is basically

00:20:17,059 --> 00:20:22,970
all of the programs again that artifact

00:20:27,919 --> 00:20:44,809
specification and produce having

00:20:37,200 --> 00:20:47,309
actually we recently synchronize it and

00:20:44,809 --> 00:20:50,190
make sure that the only thing that

00:20:47,309 --> 00:20:53,940
actually installs binary artifacts those

00:20:50,190 --> 00:20:57,950
be director is or files install and then

00:20:53,940 --> 00:21:01,919
when you do that you can only use

00:20:57,950 --> 00:21:06,419
install to install those files and by

00:21:01,919 --> 00:21:08,070
specifying this slide the setting the

00:21:06,419 --> 00:21:11,760
permissions of the destination files

00:21:08,070 --> 00:21:14,940
just append them to the metal of so when

00:21:11,760 --> 00:21:17,370
you actually build our files or make a

00:21:14,940 --> 00:21:19,320
file system you can tell it to consult

00:21:17,370 --> 00:21:21,510
the permissions for those paths from the

00:21:19,320 --> 00:21:23,610
metal log and put them inside the

00:21:21,510 --> 00:21:25,919
partnering artifacts using the correct

00:21:23,610 --> 00:21:28,440
user so you can actually build without

00:21:25,919 --> 00:21:35,149
being rude and end up with the same

00:21:28,440 --> 00:21:35,149
results so to build make the car

00:21:38,530 --> 00:21:43,270
be able to say - Tonto II which means

00:21:41,770 --> 00:21:46,840
that if you go to the release

00:21:43,270 --> 00:21:48,970
engineering website on downloads you

00:21:46,840 --> 00:21:51,250
know the binary artifacts of the

00:21:48,970 --> 00:21:53,200
particular build with the sourcing for

00:21:51,250 --> 00:21:56,650
particular architecture you should be

00:21:53,200 --> 00:22:00,040
able to run the same building the same

00:21:56,650 --> 00:22:01,660
source you just downloaded and your

00:22:00,040 --> 00:22:03,250
binaries of the build should be

00:22:01,660 --> 00:22:09,640
identical to the ones that we downloaded

00:22:03,250 --> 00:22:12,220
from the build server is no check which

00:22:09,640 --> 00:22:14,470
means that we are not doing two

00:22:12,220 --> 00:22:16,810
different two different builds with

00:22:14,470 --> 00:22:19,240
variations like Debian does make sure

00:22:16,810 --> 00:22:35,200
that we haven't violated civility in our

00:22:19,240 --> 00:22:37,270
village we basically have reducible

00:22:35,200 --> 00:22:41,500
builds we could put those back to just

00:22:37,270 --> 00:23:01,090
be consistent so you can see as you can

00:22:41,500 --> 00:23:02,830
see here this is the kernel was built

00:23:01,090 --> 00:23:06,780
it's pretty neat to see the whole

00:23:02,830 --> 00:23:09,460
filesystem have one x and there were

00:23:06,780 --> 00:23:10,720
there other button you know we need to

00:23:09,460 --> 00:23:13,950
add more sources rather

00:23:10,720 --> 00:23:13,950
rambutan during the build

00:23:16,140 --> 00:23:20,970
you know we have sometimes an

00:23:17,820 --> 00:23:22,620
initialized memory and setting into

00:23:20,970 --> 00:23:24,630
different boundaries between bills can

00:23:22,620 --> 00:23:27,950
actually reveal more sources than your

00:23:24,630 --> 00:23:31,110
box but we have to fix it is alive again

00:23:27,950 --> 00:23:32,910
become you know basically what that

00:23:31,110 --> 00:23:58,760
means is that if you're storing pointers

00:23:32,910 --> 00:23:58,760
you are storing stuff then you know

00:24:01,490 --> 00:24:08,070
basically you see on some of the risk

00:24:06,270 --> 00:24:13,140
machines that when you build with

00:24:08,070 --> 00:24:15,800
profile uses the function ID number to

00:24:13,140 --> 00:24:19,320
build labels of that function ID number

00:24:15,800 --> 00:24:21,360
changes the order of optimization of

00:24:19,320 --> 00:24:26,450
some function so you turn the optimizer

00:24:21,360 --> 00:24:30,030
off resulting very some randomness in

00:24:26,450 --> 00:24:32,300
sorting the functions or processing the

00:24:30,030 --> 00:24:37,050
function the processing or the function

00:24:32,300 --> 00:24:38,580
and finally I would like to thank to you

00:24:37,050 --> 00:24:40,980
know the lately is the foundation for

00:24:38,580 --> 00:24:45,720
having all of this top almost ready to

00:24:40,980 --> 00:24:48,150
go and the Debian people for giving us

00:24:45,720 --> 00:24:50,610
both the infrastructure and being you

00:24:48,150 --> 00:24:53,490
know very strong force for everyone to

00:24:50,610 --> 00:24:55,710
work towards getting most open-source

00:24:53,490 --> 00:24:59,760
beautiful useful build and supporting

00:24:55,710 --> 00:25:03,090
great tools such as divorce book which

00:24:59,760 --> 00:25:06,080
was actually work on reproducible builds

00:25:03,090 --> 00:25:08,420
with your Tom's

00:25:06,080 --> 00:25:11,810
[Music]

00:25:08,420 --> 00:25:14,140
the dog for the music's H so thank you

00:25:11,810 --> 00:25:14,140
very much

00:25:17,210 --> 00:25:20,279
[Applause]

00:25:37,170 --> 00:25:40,309
[Music]

00:25:42,850 --> 00:25:49,440
[Music]

00:26:27,890 --> 00:26:32,430
these to change box actually you know

00:26:31,350 --> 00:26:34,910
they're how to fix I mean they're

00:26:32,430 --> 00:26:34,910
different ways

00:26:48,309 --> 00:26:55,279
yeah yeah they're both frustrating

00:26:53,210 --> 00:26:58,009
process of you know get into the last

00:26:55,279 --> 00:26:59,899
mile and saying you know that you've

00:26:58,009 --> 00:27:01,669
played ended the result some of them you

00:26:59,899 --> 00:27:03,259
know I really nice to fix and they don't

00:27:01,669 --> 00:27:05,749
depend on you and you have to have a lot

00:27:03,259 --> 00:27:09,730
of piety from upstream to tell look guys

00:27:05,749 --> 00:27:09,730
you know we wanted with this

00:28:01,300 --> 00:28:04,460
[Music]

00:28:32,039 --> 00:28:41,049
it's a comment on Russia but over from

00:28:35,470 --> 00:28:45,250
the project says my aunt I would like

00:28:41,049 --> 00:28:47,610
you to come to your school okay thank

00:28:45,250 --> 00:28:47,610

YouTube URL: https://www.youtube.com/watch?v=7nlJboDPMe4


