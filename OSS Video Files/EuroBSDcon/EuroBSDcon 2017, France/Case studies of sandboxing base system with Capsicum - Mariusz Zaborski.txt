Title: Case studies of sandboxing base system with Capsicum - Mariusz Zaborski
Publication date: 2019-10-16
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

Background

Capsicum is a sandbox framework in the FreeBSD operating systems
and it’s based on the capabilities concept. Programs running in a sandbox
don’t have access to any global namespaces (such as fillesytem or network
namespace). Last year was very productive for Capsicum. More people got
involved in the project and new interesting features were developed. However,
most importantly a lot of applications from base systems were sandboxed.
Research

With a growing number of sandboxed applications we also recognized
new kinds of problems. Some of them we’ve already managed to solve. The
FreeBSD community was able to sandbox around 22 new applications re-
cently, but it’s still long way from sandboxing all of them.

One of the thing we noticed during that process is a large chunk of code
which we needed to rewrite multiple times in different programs. To simplify
the use of this framework we introduced Capsicum helpers, a small C header
of few inline functions which allows to reduce repeating parts of codes. One
of very common thing is to limit standard output and input descriptors,
this forces us to copy paste around 15 lines of code. Thanks to simple API
1we are able to limit it to 2 lines of code. The header
provides us also more grainy API for every descriptor:

- caph_limit_stdio
- caph_limit_stdout
- caph_limit_stdin
- caph_limit_stderr

As well as generic function caph_limit_stream which can limit any descriptor
provided. All those function are limiting descriptor to the most common ioctl
and capability rights.

Capsicum helpers also provides a few functions which allows to cache some
common used data. For example localtime need to read once /etc/localtime.
If localtime function is called after entering sandbox then function will get bad
time. The caph_cache_tzdata function was introduced to cache time zones
files. One of the reasons of collecting such functions is also documenting for
developers which things need to be cached before entering Capsicum.
A very common problem of Capsicum is silent failures. When sandbox
is added to an application, a developer cannot notice some conditions of
program. For example if an application is using a library and this library
is using random number generator by opening /dev/random if possible and
otherwise use some insecure random generator. If a developer will not no-
tice this behavior by analyzing the code this can lead to introducing new
bugs while snadboxing application. One way is to use ktrace infrastructure
but this also can be unnoticed by developer. Due to the new debugging
feature for Capsicum which was implemented by Konstantin Belousov un-
der FreeBSD foundation sponsorship. Enabling procctl(PROC_TRAPCAP)
(per-process) or sysctl kern.trap_enocap (globally in the system) kernel will
issue SIGTRAP to generate a core dump or enter the debugger incited of
returning ENOTCAPABLE or ECAPMODE.

Some sandboxed applications had very interesting stories, like dd. One
of the problem we encountered was that dd is a build tool. Another one was
the problem which overrating stderr descriptor. Case studies of sandboxing
applications like that can be very educational for future developers.

Summary

Last year was crucial for the Capsicum community. My presentation
will focus on the past year of development of Capsicum framework. We
introduced a few interesting features (like Capsicum helper or new debugging
infrastructure). FreeBSD got a few new sandboxed applications, some of
them, like dd, has a very interesting history that are worth presenting.

Speaker biography:

Mariusz Zaborski is a software developer at WHEEL Systems and student at
Warsaw University of Technology.
Mariusz’s main ares of interest are OS security and low-level
programming. At Wheel Systems, Mariusz is developing a solution to
monitor, record and control traffic in an IT infrastructure.

He has been involved in the development of Capsicum and Casper since
Google Summer of Code 2013, which he successfully passed under
the mentorship of Paweł Jakub Dawidek.

Mariusz has been a FreeBSD project commiter since 2015.
Captions: 
	00:00:00,060 --> 00:00:07,520
it's already like 3 years when I'm

00:00:02,639 --> 00:00:07,520
working for FreeBSD so yeah

00:00:09,200 --> 00:00:15,269
so our today outline I will present you

00:00:13,170 --> 00:00:19,109
a capsicum itself I will describe what

00:00:15,269 --> 00:00:22,529
it is and how it works a little bit then

00:00:19,109 --> 00:00:25,560
I will show you how we capsicum eyes

00:00:22,529 --> 00:00:27,630
some of the base tools and then I will

00:00:25,560 --> 00:00:30,300
present you a new debugging

00:00:27,630 --> 00:00:32,730
infrastructure which was presented last

00:00:30,300 --> 00:00:35,370
year which is connected to the capsicum

00:00:32,730 --> 00:00:37,590
and then I will tell you a little bit

00:00:35,370 --> 00:00:40,020
how the casper works and what it is

00:00:37,590 --> 00:00:43,050
itself and I will tell you a little bit

00:00:40,020 --> 00:00:48,059
about the future so outgoing work in

00:00:43,050 --> 00:00:51,059
capsicum world so capsicum so in the

00:00:48,059 --> 00:00:53,670
dark ages of computer science our

00:00:51,059 --> 00:00:56,489
process had something called ambient

00:00:53,670 --> 00:00:59,010
Authority which means that they had

00:00:56,489 --> 00:01:01,379
access to every single thing in our

00:00:59,010 --> 00:01:04,199
computer that means that can create a

00:01:01,379 --> 00:01:07,020
connection to whatever they want they

00:01:04,199 --> 00:01:08,820
can open any files from our disk of

00:01:07,020 --> 00:01:11,939
course there are some restriction about

00:01:08,820 --> 00:01:13,260
the users and so on but mainly compras s

00:01:11,939 --> 00:01:18,060
can do anything they want

00:01:13,260 --> 00:01:18,780
so capsicum use is implementation of

00:01:18,060 --> 00:01:21,240
so-called

00:01:18,780 --> 00:01:23,520
capabilities which is the different

00:01:21,240 --> 00:01:25,890
totally different thing from a metal

00:01:23,520 --> 00:01:28,740
purity that means in capability mode we

00:01:25,890 --> 00:01:31,710
say that process has access only to the

00:01:28,740 --> 00:01:32,700
thing that the process should have

00:01:31,710 --> 00:01:36,360
access to

00:01:32,700 --> 00:01:38,909
so if process works on file system then

00:01:36,360 --> 00:01:42,930
it don't need to connect to the network

00:01:38,909 --> 00:01:46,460
so the he has some access to file system

00:01:42,930 --> 00:01:50,640
but he don't have any access to to

00:01:46,460 --> 00:01:54,740
network so capsicum was introduced in

00:01:50,640 --> 00:01:58,770
FreeBSD 9 it was implemented mostly in

00:01:54,740 --> 00:02:01,140
Cambridge and by Robert Watson and

00:01:58,770 --> 00:02:09,360
Jonathan Anderson with some cooperation

00:02:01,140 --> 00:02:11,879
from Google from Ben Lowry so the kernel

00:02:09,360 --> 00:02:12,810
infrastructure of capsicum is one simple

00:02:11,879 --> 00:02:15,780
system

00:02:12,810 --> 00:02:18,870
CTL which is cap enter which enters to

00:02:15,780 --> 00:02:21,660
the capability mode after entering after

00:02:18,870 --> 00:02:24,870
calling the Cisco Cisco we don't have

00:02:21,660 --> 00:02:26,910
access to any global namespaces so here

00:02:24,870 --> 00:02:31,830
are some here are all the global

00:02:26,910 --> 00:02:35,700
instances that we have in FreeBSD so for

00:02:31,830 --> 00:02:38,700
example if we enter the capability mode

00:02:35,700 --> 00:02:40,770
we don't have access to file path

00:02:38,700 --> 00:02:44,310
namespace that means we cannot anymore

00:02:40,770 --> 00:02:47,190
open any directories files on our disk

00:02:44,310 --> 00:02:49,140
or we don't have access to a protocol

00:02:47,190 --> 00:02:54,410
address which means that we cannot

00:02:49,140 --> 00:02:57,209
create any connections to the network so

00:02:54,410 --> 00:03:01,430
another part of capsicum is so-called

00:02:57,209 --> 00:03:07,530
capability right capability rights are

00:03:01,430 --> 00:03:09,480
right the Icicle it's like a local

00:03:07,530 --> 00:03:12,410
capabilities it's stored in the

00:03:09,480 --> 00:03:17,070
descriptor so we can open for example

00:03:12,410 --> 00:03:19,620
descriptor to a file system and that

00:03:17,070 --> 00:03:22,410
means that we have a capability to that

00:03:19,620 --> 00:03:24,720
directory we can do anything we want in

00:03:22,410 --> 00:03:26,670
that directory so going a little bit

00:03:24,720 --> 00:03:28,350
further capsicum implements so-called

00:03:26,670 --> 00:03:33,480
capability rights which means we can

00:03:28,350 --> 00:03:35,940
even further limit that the script or

00:03:33,480 --> 00:03:38,670
itself we can say ok this descriptor is

00:03:35,940 --> 00:03:41,250
read-only or right only that means that

00:03:38,670 --> 00:03:43,019
if somebody will if we have a descriptor

00:03:41,250 --> 00:03:45,600
read-only and somebody tries to write

00:03:43,019 --> 00:03:50,700
then Colonel we say now you don't have

00:03:45,600 --> 00:03:53,280
the capability to that to do that so

00:03:50,700 --> 00:03:56,340
here are some of cup of capsicum rights

00:03:53,280 --> 00:03:59,519
we have like cap read or cap happened

00:03:56,340 --> 00:04:02,640
it's sometimes the capability rights are

00:03:59,519 --> 00:04:05,430
capsicum rights are dependent on the

00:04:02,640 --> 00:04:08,549
type of the descriptor so for example we

00:04:05,430 --> 00:04:12,540
have a concept which will be used only

00:04:08,549 --> 00:04:18,239
on the socket and so ant cap receive

00:04:12,540 --> 00:04:21,780
would also be used only on socket so we

00:04:18,239 --> 00:04:24,940
can get capabilities in two ways in

00:04:21,780 --> 00:04:28,520
capsicum one is by

00:04:24,940 --> 00:04:31,760
by getting access to some directories or

00:04:28,520 --> 00:04:35,060
some descriptors before entering the

00:04:31,760 --> 00:04:38,540
capsicum so before in the for example in

00:04:35,060 --> 00:04:41,780
the main phase we open some directories

00:04:38,540 --> 00:04:44,270
we open some socket connections and we

00:04:41,780 --> 00:04:48,340
entered the capability mode in that way

00:04:44,270 --> 00:04:52,370
we have only access to those those

00:04:48,340 --> 00:04:54,430
capabilities which we asked before

00:04:52,370 --> 00:04:59,600
entering the capability mode

00:04:54,430 --> 00:05:02,060
another way is by delegation so because

00:04:59,600 --> 00:05:04,970
we can send descriptors by using UNIX

00:05:02,060 --> 00:05:07,430
domain socket we can send the scripture

00:05:04,970 --> 00:05:10,940
from one process to another one so if we

00:05:07,430 --> 00:05:12,920
have if some process have access to some

00:05:10,940 --> 00:05:16,610
directory for example or some other

00:05:12,920 --> 00:05:18,500
resource then he we can ask that process

00:05:16,610 --> 00:05:21,560
to give us the permission to that

00:05:18,500 --> 00:05:23,750
resource so we have for example the

00:05:21,560 --> 00:05:26,030
sandbox process with capsicum which can

00:05:23,750 --> 00:05:27,800
speak with another process which pre

00:05:26,030 --> 00:05:29,300
will privilege one which has access to

00:05:27,800 --> 00:05:32,980
some research and we can ask that

00:05:29,300 --> 00:05:35,990
privilege process to give us there and

00:05:32,980 --> 00:05:39,380
access to resources that we want so for

00:05:35,990 --> 00:05:42,740
example and we can ask the privilege

00:05:39,380 --> 00:05:46,040
process for some more files or some some

00:05:42,740 --> 00:05:51,790
more or some connection to the network

00:05:46,040 --> 00:05:55,100
so it's capsicum hard subsidizing hard

00:05:51,790 --> 00:05:59,750
it's not for a new code when we design

00:05:55,100 --> 00:06:02,660
everything in compiled in separate it

00:05:59,750 --> 00:06:04,400
with some with some separation the

00:06:02,660 --> 00:06:07,490
implementation of capsicum in our

00:06:04,400 --> 00:06:09,620
program is really really easy at will

00:06:07,490 --> 00:06:14,090
system we use it for almost our our

00:06:09,620 --> 00:06:17,450
process or for all our demands but we

00:06:14,090 --> 00:06:20,390
designed as operate our ecosystem to

00:06:17,450 --> 00:06:27,350
support that so what about existing one

00:06:20,390 --> 00:06:30,310
is it hard or not so we in - 2015 we had

00:06:27,350 --> 00:06:33,740
a capsicum implemented in few tools

00:06:30,310 --> 00:06:35,580
there are few knife tools like TCP Dom

00:06:33,740 --> 00:06:39,990
or D H client

00:06:35,580 --> 00:06:44,430
but most of them are sshd but we still

00:06:39,990 --> 00:06:48,330
was lacking from a lot of base system

00:06:44,430 --> 00:06:52,560
tools and unfortunately it took us a

00:06:48,330 --> 00:06:55,319
long time to get when we are now in 2016

00:06:52,560 --> 00:06:59,159
we have a little bit more programs that

00:06:55,319 --> 00:07:03,449
we capsicum nice so there are simple

00:06:59,159 --> 00:07:06,240
programs you like like yes which is also

00:07:03,449 --> 00:07:08,270
capsicum iced but we have also a little

00:07:06,240 --> 00:07:13,229
bit more complicated and which are not

00:07:08,270 --> 00:07:16,250
even in basis unlike iris iris in client

00:07:13,229 --> 00:07:18,800
iris iris C client you receive our

00:07:16,250 --> 00:07:23,130
package which also is capitalized

00:07:18,800 --> 00:07:26,669
whenever it's it's need even if we

00:07:23,130 --> 00:07:29,789
receive some if we receive some package

00:07:26,669 --> 00:07:32,219
from the internet and we want to check

00:07:29,789 --> 00:07:38,280
the checksum of this package we don't

00:07:32,219 --> 00:07:40,830
want strong internet it's the comparing

00:07:38,280 --> 00:07:45,990
that counting of the hashes is done in

00:07:40,830 --> 00:07:50,580
capsicum in capability mode so our story

00:07:45,990 --> 00:07:53,880
starts from two bags in 2016 of BS pouch

00:07:50,580 --> 00:07:58,020
those are was very easy that was very

00:07:53,880 --> 00:08:03,349
simple bags which allow us to exploit vs

00:07:58,020 --> 00:08:09,330
patch one of them was one of them was

00:08:03,349 --> 00:08:12,420
integer overflow and another one was

00:08:09,330 --> 00:08:12,420
[Music]

00:08:13,729 --> 00:08:22,409
sorry there was a integer overflows so I

00:08:19,159 --> 00:08:25,229
enjoyed seeing those two patches decided

00:08:22,409 --> 00:08:27,779
that hey how hard would be to employ to

00:08:25,229 --> 00:08:30,750
sandbox be a sponge so it's really loud

00:08:27,779 --> 00:08:32,669
it wasn't so hard so first of our are

00:08:30,750 --> 00:08:35,729
first of all we need to read some cow I

00:08:32,669 --> 00:08:37,200
hope you see a little bit very good

00:08:35,729 --> 00:08:42,329
discount because we will have a lot of

00:08:37,200 --> 00:08:45,720
code in this presentation so for step

00:08:42,329 --> 00:08:47,850
zero of every sandboxing is to read the

00:08:45,720 --> 00:08:48,800
code we need to understand how the code

00:08:47,850 --> 00:08:50,570
works

00:08:48,800 --> 00:08:53,120
it's not important if we are using sec

00:08:50,570 --> 00:08:55,870
complex or capsicum or whatever we need

00:08:53,120 --> 00:09:02,660
to understand what our code does

00:08:55,870 --> 00:09:06,500
so these patches are applications that -

00:09:02,660 --> 00:09:11,209
for patching the source code or some

00:09:06,500 --> 00:09:14,060
files and so it's work mostly on two

00:09:11,209 --> 00:09:19,459
files one which is part another file

00:09:14,060 --> 00:09:23,209
that we we are patching so here we have

00:09:19,459 --> 00:09:25,519
some random opens which I mentioned

00:09:23,209 --> 00:09:31,010
earlier that we need to open some files

00:09:25,519 --> 00:09:33,709
in a vs patch and those are interesting

00:09:31,010 --> 00:09:38,570
things in capsicum because we cannot

00:09:33,709 --> 00:09:41,029
open files in capability mode so step

00:09:38,570 --> 00:09:43,010
one is to reorganize the code like I

00:09:41,029 --> 00:09:46,820
mentioned before one of the ways to

00:09:43,010 --> 00:09:49,579
obtain any privileges in the capability

00:09:46,820 --> 00:09:51,680
amount is to open everything that we

00:09:49,579 --> 00:09:54,770
need before entering the capsicum itself

00:09:51,680 --> 00:09:58,279
so we just read when i reorganize the

00:09:54,770 --> 00:10:01,910
code and we put all the opens before

00:09:58,279 --> 00:10:04,130
entering the capability mode so it's we

00:10:01,910 --> 00:10:07,430
just need to call cap enter after all

00:10:04,130 --> 00:10:12,709
those opens and we are already sandbox

00:10:07,430 --> 00:10:17,959
dps but we can go even further and we

00:10:12,709 --> 00:10:20,810
can see that most of the we can see how

00:10:17,959 --> 00:10:24,260
the application is working with those

00:10:20,810 --> 00:10:30,649
description here for example it's just

00:10:24,260 --> 00:10:35,930
the is doing some reads and here we have

00:10:30,649 --> 00:10:39,860
some f6 so after reading that we can go

00:10:35,930 --> 00:10:43,579
a step further and and limit the

00:10:39,860 --> 00:10:46,220
descriptors to do only that so we have

00:10:43,579 --> 00:10:50,199
for example we have what I showed you

00:10:46,220 --> 00:10:52,670
before we'd give the descriptors

00:10:50,199 --> 00:10:54,949
capability here a treat and see if

00:10:52,670 --> 00:10:57,709
somebody would act still exploit the BS

00:10:54,949 --> 00:10:59,120
patch then he don't he can't do anything

00:10:57,709 --> 00:11:06,460
more with this descriptor

00:10:59,120 --> 00:11:10,730
and read and see so here is part for the

00:11:06,460 --> 00:11:14,330
for the Sun boxing the cmp program which

00:11:10,730 --> 00:11:19,190
is a very easy tool for comparing two

00:11:14,330 --> 00:11:22,820
files and they're in capsicum we had we

00:11:19,190 --> 00:11:25,850
had some duplicated code which we was

00:11:22,820 --> 00:11:30,310
doing all the time the same the same in

00:11:25,850 --> 00:11:35,630
every application so we went for example

00:11:30,310 --> 00:11:38,600
here we limiting the esterday out file

00:11:35,630 --> 00:11:42,170
description most most of the programs in

00:11:38,600 --> 00:11:44,089
base system are using yesterday out and

00:11:42,170 --> 00:11:46,510
Esther day in descriptor so this is

00:11:44,089 --> 00:11:50,600
what's done in many many application

00:11:46,510 --> 00:11:56,440
this is a little bit more complicated

00:11:50,600 --> 00:11:58,850
code because we not only limit the

00:11:56,440 --> 00:12:02,150
capability rights on the descriptor but

00:11:58,850 --> 00:12:05,930
we also limit the ioctl that we can do

00:12:02,150 --> 00:12:10,690
on those descriptors and another example

00:12:05,930 --> 00:12:14,720
which is that many applications we need

00:12:10,690 --> 00:12:17,920
to use for example error functions which

00:12:14,720 --> 00:12:22,970
prints not some nice error message and

00:12:17,920 --> 00:12:26,330
unfortunately for the NL NL s native

00:12:22,970 --> 00:12:27,890
language support we need to pre open

00:12:26,330 --> 00:12:31,360
some files in the system so

00:12:27,890 --> 00:12:34,820
unfortunately this is not allowed in

00:12:31,360 --> 00:12:37,130
capability mode we cannot open any files

00:12:34,820 --> 00:12:39,800
in after entering the cut mark a

00:12:37,130 --> 00:12:44,360
capability mode we need to pre open them

00:12:39,800 --> 00:12:47,270
before so we introduced so-called

00:12:44,360 --> 00:12:49,940
capsicum helpers those are few inline

00:12:47,270 --> 00:12:54,170
functions that allow us to limit some of

00:12:49,940 --> 00:12:56,600
the some of the most popular I think so

00:12:54,170 --> 00:13:00,650
we have like a pH limit stream which

00:12:56,600 --> 00:13:02,750
limits all the pop all the free just the

00:13:00,650 --> 00:13:05,570
file descriptor 2 for as to the out

00:13:02,750 --> 00:13:07,880
esterday as to the air or we can call

00:13:05,570 --> 00:13:10,200
the separate functions like ester doubt

00:13:07,880 --> 00:13:13,020
or ester the into limit only one

00:13:10,200 --> 00:13:15,120
of them so instead of doing all that

00:13:13,020 --> 00:13:17,480
work that I showed in the previous slide

00:13:15,120 --> 00:13:21,090
we can call one function which will do

00:13:17,480 --> 00:13:24,960
that for us so unfortunately like

00:13:21,090 --> 00:13:28,560
emotionally PC isn't our friend and like

00:13:24,960 --> 00:13:33,120
our needs for from some analyst files

00:13:28,560 --> 00:13:35,610
for native language support we have a

00:13:33,120 --> 00:13:38,460
little bit more issue with leave see for

00:13:35,610 --> 00:13:41,670
example local time need to read a time

00:13:38,460 --> 00:13:44,130
zone for our operating system it's done

00:13:41,670 --> 00:13:47,610
only on the first call of local time and

00:13:44,130 --> 00:13:50,300
it's cached of time zone for us but when

00:13:47,610 --> 00:13:53,460
we call the first time the local time it

00:13:50,300 --> 00:13:55,920
it's pre opened those files so if we

00:13:53,460 --> 00:13:58,050
would do local time the first time after

00:13:55,920 --> 00:14:01,110
entering the capability mode then

00:13:58,050 --> 00:14:04,920
unfortunately would get wrong time so we

00:14:01,110 --> 00:14:10,080
need to somehow pre open those files so

00:14:04,920 --> 00:14:12,810
we do that by introducing more capsicum

00:14:10,080 --> 00:14:17,760
fireplace like cut pages which is done

00:14:12,810 --> 00:14:20,370
for caching the analyst files or the TC

00:14:17,760 --> 00:14:27,060
data which allow us to pre care the

00:14:20,370 --> 00:14:29,400
local time data so we can now the

00:14:27,060 --> 00:14:34,380
duplicate code and now the code looks

00:14:29,400 --> 00:14:37,290
out a bit simple we just limit the

00:14:34,380 --> 00:14:39,720
esterday out and use the another

00:14:37,290 --> 00:14:45,570
capsicum helper to catch the otherwise

00:14:39,720 --> 00:14:47,010
pages okay so now I would like to tell

00:14:45,570 --> 00:14:51,350
you a little bit about the debugging

00:14:47,010 --> 00:14:55,110
frustration which we have in capsicum so

00:14:51,350 --> 00:14:58,230
from the beginning key trace implements

00:14:55,110 --> 00:15:00,720
supports from capsicum so we can trace

00:14:58,230 --> 00:15:03,060
our program and we are getting the

00:15:00,720 --> 00:15:05,820
information about trace of the program

00:15:03,060 --> 00:15:08,910
so get resolved us to see which sis

00:15:05,820 --> 00:15:12,120
calls out our call and what was the exit

00:15:08,910 --> 00:15:15,000
status so the support for the capsicum

00:15:12,120 --> 00:15:17,330
in key trees is basically that it's tell

00:15:15,000 --> 00:15:21,529
us which capabilities are missing

00:15:17,330 --> 00:15:25,610
unfortunately this this approach has a

00:15:21,529 --> 00:15:27,740
- two problems one of them is that it's

00:15:25,610 --> 00:15:29,660
very easy to miss something we just

00:15:27,740 --> 00:15:32,029
don't see we can miss something in

00:15:29,660 --> 00:15:34,339
cadres and we need to also to use

00:15:32,029 --> 00:15:36,350
catrice on every sandbox the program now

00:15:34,339 --> 00:15:39,410
what was the trace of the program so we

00:15:36,350 --> 00:15:44,689
need to see which Cisco was done and if

00:15:39,410 --> 00:15:47,059
the Cisco ended with error so it's very

00:15:44,689 --> 00:15:49,550
hard it's very easy to miss something

00:15:47,059 --> 00:15:52,430
and it's hard also to cover all pad to

00:15:49,550 --> 00:15:55,100
touch the patches in the program because

00:15:52,430 --> 00:15:59,209
there are some ifs which can be called

00:15:55,100 --> 00:16:01,639
or can be can be true in some some

00:15:59,209 --> 00:16:06,699
condition and not training another so we

00:16:01,639 --> 00:16:11,540
need to test it in many many ways so

00:16:06,699 --> 00:16:15,430
this example of cadres output we call

00:16:11,540 --> 00:16:18,769
the cap internal and we try to open some

00:16:15,430 --> 00:16:27,769
file that is not allowed in capability

00:16:18,769 --> 00:16:33,319
mode so Constantine present a new sister

00:16:27,769 --> 00:16:37,009
to L which is how Anat cap which trap in

00:16:33,319 --> 00:16:39,410
a cup which if something is done and

00:16:37,009 --> 00:16:42,559
it's not allowed in capability mode the

00:16:39,410 --> 00:16:46,670
process will the the kernel will send

00:16:42,559 --> 00:16:50,449
the trap signal to the process so we

00:16:46,670 --> 00:16:52,699
will create some core dam - for

00:16:50,449 --> 00:16:57,649
analyzing our process this is a little

00:16:52,699 --> 00:17:00,920
bit more more handy in working system we

00:16:57,649 --> 00:17:04,520
can have like a lot of capsicum iced

00:17:00,920 --> 00:17:06,559
programs and we can just see if

00:17:04,520 --> 00:17:12,559
something is starting broke in our

00:17:06,559 --> 00:17:15,620
system we can also enable that by

00:17:12,559 --> 00:17:22,390
procedural in our code if you want only

00:17:15,620 --> 00:17:27,140
one process - to be to be trace it and

00:17:22,390 --> 00:17:29,720
but the this approach has also the same

00:17:27,140 --> 00:17:32,330
issue like before it's hard to cover all

00:17:29,720 --> 00:17:33,470
parts of the program and we are not sure

00:17:32,330 --> 00:17:38,179
if

00:17:33,470 --> 00:17:44,179
we are we are not failing in some some

00:17:38,179 --> 00:17:48,230
conditions so here is the curtain from

00:17:44,179 --> 00:17:51,379
one of the program that was failing like

00:17:48,230 --> 00:17:55,429
Riskin see we have nice praise of the

00:17:51,379 --> 00:17:57,919
program where it was failing in in

00:17:55,429 --> 00:18:00,700
capability so we was calling the open

00:17:57,919 --> 00:18:04,909
which which is not allowed in our code

00:18:00,700 --> 00:18:11,019
in capability mode so now I will

00:18:04,909 --> 00:18:11,019
introduce you to the Casper Casper is

00:18:12,190 --> 00:18:19,100
this library that provides us the

00:18:16,809 --> 00:18:21,350
functionality that are not allowed in

00:18:19,100 --> 00:18:25,159
capability mode so for example if we

00:18:21,350 --> 00:18:28,629
want to create some sockets or open some

00:18:25,159 --> 00:18:32,659
files which are which is not allowed to

00:18:28,629 --> 00:18:37,759
in capsicum we can ask Casper to do that

00:18:32,659 --> 00:18:40,820
for us so if we have some some code that

00:18:37,759 --> 00:18:44,809
is duplicated in many programs like for

00:18:40,820 --> 00:18:47,029
example I want to open some files and we

00:18:44,809 --> 00:18:51,919
don't want to fork and implement

00:18:47,029 --> 00:18:54,109
everything to all the IPC between the

00:18:51,919 --> 00:18:56,570
processes that are asking about give me

00:18:54,109 --> 00:18:59,029
there and give me another descriptor to

00:18:56,570 --> 00:19:02,419
the file or give me another directory or

00:18:59,029 --> 00:19:05,330
give me another another connection to

00:19:02,419 --> 00:19:09,230
the internet we can do that using Casper

00:19:05,330 --> 00:19:12,590
so the API so of Casper is very similar

00:19:09,230 --> 00:19:15,230
to Lib C we tries to not we try to not

00:19:12,590 --> 00:19:17,779
modify the IP ice at all so for example

00:19:15,230 --> 00:19:23,869
if we have get held my name function and

00:19:17,779 --> 00:19:27,499
we have saw equivalent in capital Casper

00:19:23,869 --> 00:19:29,570
it's it's exactly the same interface

00:19:27,499 --> 00:19:33,529
between the PC version of cat was by

00:19:29,570 --> 00:19:36,950
name and the Casper one so the idea

00:19:33,529 --> 00:19:40,700
behind Casper is to make think very easy

00:19:36,950 --> 00:19:42,739
to separate the programs and we need to

00:19:40,700 --> 00:19:44,820
create password because Casper is the

00:19:42,739 --> 00:19:49,320
fork of our program before

00:19:44,820 --> 00:19:51,600
entering the capability mode so how

00:19:49,320 --> 00:19:54,450
Casper was so we have some process and

00:19:51,600 --> 00:19:56,700
in that process we call a function

00:19:54,450 --> 00:20:00,750
called cap in it which create as the

00:19:56,700 --> 00:20:03,000
Casper and now custom we can ask Casper

00:20:00,750 --> 00:20:05,220
to do some stuff for us but before that

00:20:03,000 --> 00:20:07,530
Casper is also forking the second time

00:20:05,220 --> 00:20:11,190
so calls I got like it is a very

00:20:07,530 --> 00:20:15,170
lightweight process that will be used to

00:20:11,190 --> 00:20:19,290
create a new services in our for our

00:20:15,170 --> 00:20:22,170
programs so now when we call a cap

00:20:19,290 --> 00:20:26,220
service open for example to open the DNS

00:20:22,170 --> 00:20:29,730
service we will we will clump the zygote

00:20:26,220 --> 00:20:32,190
and create a service from it and after

00:20:29,730 --> 00:20:36,690
that Casper will pass us the connection

00:20:32,190 --> 00:20:40,020
to the service and after that if we only

00:20:36,690 --> 00:20:42,180
want to open one service we'd can close

00:20:40,020 --> 00:20:44,790
the connection to the Casper or we can

00:20:42,180 --> 00:20:48,570
ask Casper to create us more services

00:20:44,790 --> 00:20:52,740
for example filesystem service or some

00:20:48,570 --> 00:20:55,020
other service so after that we can call

00:20:52,740 --> 00:20:57,750
the close we can close connection to the

00:20:55,020 --> 00:21:00,000
Casper and we can talk directly to the

00:20:57,750 --> 00:21:02,010
service and we can ask him to provide us

00:21:00,000 --> 00:21:04,370
some information like for example to eat

00:21:02,010 --> 00:21:09,150
eNOS resolution

00:21:04,370 --> 00:21:12,930
result in containers so right now we

00:21:09,150 --> 00:21:15,840
have five customer services and I can

00:21:12,930 --> 00:21:18,870
mention the system DNS services which

00:21:15,840 --> 00:21:23,100
all have to resolve some dns names we

00:21:18,870 --> 00:21:26,580
have GP service which allow us to work

00:21:23,100 --> 00:21:28,590
with the group group operations like

00:21:26,580 --> 00:21:32,510
searching information about the groups

00:21:28,590 --> 00:21:35,370
we have PWD and which is used for

00:21:32,510 --> 00:21:40,020
password database operations we have

00:21:35,370 --> 00:21:44,850
random service which are as to obtain

00:21:40,020 --> 00:21:46,950
some random random data from service and

00:21:44,850 --> 00:21:51,580
we have also see serial service which

00:21:46,950 --> 00:21:55,960
allow us to get information from

00:21:51,580 --> 00:21:57,940
from the operating system so what is

00:21:55,960 --> 00:22:00,009
also very interesting about caster is

00:21:57,940 --> 00:22:03,129
that all those services can be even

00:22:00,009 --> 00:22:06,789
further limited so we can say that okay

00:22:03,129 --> 00:22:09,940
we want to resolve only IP file for a

00:22:06,789 --> 00:22:12,759
DNS if somebody will try to resolve IP

00:22:09,940 --> 00:22:15,309
for six have written an error that this

00:22:12,759 --> 00:22:17,440
is not allowed or we can even go a

00:22:15,309 --> 00:22:21,100
little bit further and say okay I want

00:22:17,440 --> 00:22:23,889
to I want to limit hazard to be able

00:22:21,100 --> 00:22:24,730
only to resolve one domain like I know

00:22:23,889 --> 00:22:28,989
Google pal

00:22:24,730 --> 00:22:31,600
a good cop and if we will try to resolve

00:22:28,989 --> 00:22:33,759
others names then Casper would say okay

00:22:31,600 --> 00:22:36,789
that's that's not allowed in our system

00:22:33,759 --> 00:22:38,559
so this is the limitation in the Casper

00:22:36,789 --> 00:22:41,109
stuff but we can also go a little bit

00:22:38,559 --> 00:22:43,749
further and limit the Casper itself and

00:22:41,109 --> 00:22:50,340
say okay I interested in creating only

00:22:43,749 --> 00:22:53,649
System DNS and not not others services

00:22:50,340 --> 00:22:57,509
so here we have our trace route we have

00:22:53,649 --> 00:23:00,940
a part for the trace route which use

00:22:57,509 --> 00:23:06,940
Casper for sandboxing so like I

00:23:00,940 --> 00:23:10,929
mentioned before we we create Casper by

00:23:06,940 --> 00:23:16,659
calling cut in it's done on the from the

00:23:10,929 --> 00:23:19,419
top of the patch then we open service by

00:23:16,659 --> 00:23:21,850
calling caps trip is open we open the

00:23:19,419 --> 00:23:24,100
DNS service and we are limiting the

00:23:21,850 --> 00:23:26,649
service to name and address the poorest

00:23:24,100 --> 00:23:35,080
following and we are limiting Casper for

00:23:26,649 --> 00:23:37,179
IP fell for own and after after we do

00:23:35,080 --> 00:23:50,080
that we can enter the capability mode

00:23:37,179 --> 00:23:53,019
and this is we also limit here the so

00:23:50,080 --> 00:23:56,739
yeah we also limit the other things in a

00:23:53,019 --> 00:23:59,440
trace route itself like we limit the

00:23:56,739 --> 00:24:03,460
send socket to be able only to send this

00:23:59,440 --> 00:24:04,240
the packages and we limit the receive

00:24:03,460 --> 00:24:08,080
socket only

00:24:04,240 --> 00:24:12,309
to be able to receive after that we need

00:24:08,080 --> 00:24:15,730
also to replace I'll get was my name sis

00:24:12,309 --> 00:24:18,280
calls a function call to tap get was by

00:24:15,730 --> 00:24:21,970
name unfortunately right now we also

00:24:18,280 --> 00:24:27,929
adds the if depth that if for example

00:24:21,970 --> 00:24:29,890
trade route isn't in is it's not in the

00:24:27,929 --> 00:24:33,610
missing the base system but it's not

00:24:29,890 --> 00:24:36,280
it's maintaining also by others so we

00:24:33,610 --> 00:24:38,740
need to add like if there's that we have

00:24:36,280 --> 00:24:43,870
or not have Casper itself in the base

00:24:38,740 --> 00:24:46,059
system so now I would like to tell you

00:24:43,870 --> 00:24:48,910
about a little bit about the future of

00:24:46,059 --> 00:24:54,910
capsicum and what its ongoing work in

00:24:48,910 --> 00:24:57,790
that field so one of the things we are

00:24:54,910 --> 00:25:01,480
working right now is Casper mocks and I

00:24:57,790 --> 00:25:05,740
can show you before on the patch we have

00:25:01,480 --> 00:25:08,350
a lot of evenings in our culture idea of

00:25:05,740 --> 00:25:10,630
Casper Mouse is that we will hide all

00:25:08,350 --> 00:25:13,870
the if that's inside the Casper itself

00:25:10,630 --> 00:25:15,940
so Casper will this the you will only

00:25:13,870 --> 00:25:21,010
compile Casper once and Casper will

00:25:15,940 --> 00:25:24,309
decide if we have and if we are using

00:25:21,010 --> 00:25:26,980
our real function or not so we have all

00:25:24,309 --> 00:25:31,059
all Casper functions will be mocked for

00:25:26,980 --> 00:25:38,050
us we will not need to do that in the

00:25:31,059 --> 00:25:41,650
code itself there is existing review of

00:25:38,050 --> 00:25:46,270
this change unfortunately it is like a

00:25:41,650 --> 00:25:48,760
third implementation of those months we

00:25:46,270 --> 00:25:51,970
had a few ideas how to do that one of

00:25:48,760 --> 00:25:56,550
them was by use just marketing the

00:25:51,970 --> 00:26:00,309
library so we would have a leap Casper

00:25:56,550 --> 00:26:02,860
version of library which is not used

00:26:00,309 --> 00:26:06,300
it's not doing anything is just calling

00:26:02,860 --> 00:26:10,210
the standard Lib C functions and this

00:26:06,300 --> 00:26:13,030
approach was dropped because we didn't

00:26:10,210 --> 00:26:15,640
want to link to the library that don't

00:26:13,030 --> 00:26:20,500
do anything so

00:26:15,640 --> 00:26:23,830
approach that we are trying to do now is

00:26:20,500 --> 00:26:26,830
to implement monks using a lot of in

00:26:23,830 --> 00:26:30,130
lines and defines and we will do not

00:26:26,830 --> 00:26:34,650
need to link to the library itself we

00:26:30,130 --> 00:26:43,630
would just need to we would just need to

00:26:34,650 --> 00:26:47,200
include the header itself so another I

00:26:43,630 --> 00:26:49,660
have a lot of ideas around the cat fur

00:26:47,200 --> 00:26:53,680
so one of them is to integrate the

00:26:49,660 --> 00:26:57,790
casper in the lips itself and we would

00:26:53,680 --> 00:27:00,940
just inside the lip see we would decide

00:26:57,790 --> 00:27:03,220
if you have Casper or not or how we want

00:27:00,940 --> 00:27:05,440
to do like it was by name function if

00:27:03,220 --> 00:27:07,570
you want to use in the secure way using

00:27:05,440 --> 00:27:10,300
other process or we want to use the

00:27:07,570 --> 00:27:12,970
standard path other approach which we

00:27:10,300 --> 00:27:15,580
are thinking is make our lip seen

00:27:12,970 --> 00:27:17,680
previously more proplugger pluggable

00:27:15,580 --> 00:27:21,010
that means that we would we could

00:27:17,680 --> 00:27:23,410
register very different version of lip

00:27:21,010 --> 00:27:27,250
see a different version of Gautreau's by

00:27:23,410 --> 00:27:30,160
name depending on on libraries that we

00:27:27,250 --> 00:27:33,880
are linking to so for it have like

00:27:30,160 --> 00:27:37,840
structure or of the functions and we

00:27:33,880 --> 00:27:41,860
would just in our we we could just

00:27:37,840 --> 00:27:44,620
change the implementation of of the cat

00:27:41,860 --> 00:27:47,830
for my name time dynamically so right

00:27:44,620 --> 00:27:51,430
now we also need to call cap in it with

00:27:47,830 --> 00:27:53,470
those changes we also could do that in

00:27:51,430 --> 00:27:55,210
the start method and start functions

00:27:53,470 --> 00:27:57,580
that means that we would not need to

00:27:55,210 --> 00:27:59,800
call it in the main function itself we

00:27:57,580 --> 00:28:06,460
would just have the Casper and we will

00:27:59,800 --> 00:28:10,780
just use it transparently with with in

00:28:06,460 --> 00:28:13,180
our program so we are so thinking about

00:28:10,780 --> 00:28:17,860
this unboxing services itself right now

00:28:13,180 --> 00:28:21,489
Casper is not son boxes at all its

00:28:17,860 --> 00:28:24,999
have its it is privileged a process and

00:28:21,489 --> 00:28:30,549
he has ambient outdoor et to everything

00:28:24,999 --> 00:28:32,710
so we if somebody would I would exploit

00:28:30,549 --> 00:28:35,200
the IPC between a Casper and the

00:28:32,710 --> 00:28:39,999
processor he would get access to all of

00:28:35,200 --> 00:28:45,669
our data so we also wanted to somehow

00:28:39,999 --> 00:28:48,610
sandbox the Casper itself and we think

00:28:45,669 --> 00:28:50,200
this everything which are we doing here

00:28:48,610 --> 00:28:54,279
with the Casper it's also about they're

00:28:50,200 --> 00:29:00,309
reducing TCP trusted code base so we

00:28:54,279 --> 00:29:05,320
don't need to now trust the whole lip

00:29:00,309 --> 00:29:08,169
seat but we need to track that our IPC

00:29:05,320 --> 00:29:13,809
library is safe between Casper and and

00:29:08,169 --> 00:29:15,850
process so it also some it is also some

00:29:13,809 --> 00:29:18,840
surface for the attack but it's still

00:29:15,850 --> 00:29:21,759
smaller than hole Lipsy

00:29:18,840 --> 00:29:26,109
so we also thinking about introducing

00:29:21,759 --> 00:29:29,019
new a customer services like file system

00:29:26,109 --> 00:29:32,350
which is missing from for a while and

00:29:29,019 --> 00:29:34,769
it's important for us because it's

00:29:32,350 --> 00:29:38,669
stopping us from

00:29:34,769 --> 00:29:43,989
sandboxing a lot of base tools like

00:29:38,669 --> 00:29:46,859
tools that are used that are working on

00:29:43,989 --> 00:29:50,320
multiple files like for example grab and

00:29:46,859 --> 00:29:54,070
we are also thinking about implementing

00:29:50,320 --> 00:29:57,669
for example services called system pls

00:29:54,070 --> 00:30:00,609
which we would be would would allow us

00:29:57,669 --> 00:30:03,999
to create a TLS socket and a Casper

00:30:00,609 --> 00:30:08,289
would provide us all the negotiation

00:30:03,999 --> 00:30:13,109
between our process and the internet we

00:30:08,289 --> 00:30:15,850
also want to implement the socket

00:30:13,109 --> 00:30:18,970
services which will allow us to create

00:30:15,850 --> 00:30:24,419
arbitrary socket to the internet raw

00:30:18,970 --> 00:30:26,590
sockets without any encryption and so we

00:30:24,419 --> 00:30:29,830
we're almost discussing also to

00:30:26,590 --> 00:30:32,110
implement like configurations

00:30:29,830 --> 00:30:35,200
service which will provide us the

00:30:32,110 --> 00:30:40,570
configuration of of the file so we would

00:30:35,200 --> 00:30:43,870
have like this is also very interesting

00:30:40,570 --> 00:30:48,580
from the operating system point of view

00:30:43,870 --> 00:30:50,919
because we can have some a lot of

00:30:48,580 --> 00:30:53,620
different formats of the configuration

00:30:50,919 --> 00:30:56,140
and Kasper would be responsible for

00:30:53,620 --> 00:31:01,299
parsing them and and send as the

00:30:56,140 --> 00:31:04,990
configuration in a unified way so there

00:31:01,299 --> 00:31:07,480
are two more very interesting services

00:31:04,990 --> 00:31:09,519
syslog and clogging and we will look a

00:31:07,480 --> 00:31:14,909
little bit closer why we would like to

00:31:09,519 --> 00:31:17,500
implement them in freebsd so

00:31:14,909 --> 00:31:22,779
unfortunately right now if we would

00:31:17,500 --> 00:31:25,510
enter who we are using the in the sis

00:31:22,779 --> 00:31:29,139
tell that sent the trap in up top

00:31:25,510 --> 00:31:31,690
trapped in a cab in our system the each

00:31:29,139 --> 00:31:35,350
client from the start of the system will

00:31:31,690 --> 00:31:37,840
tell us that something is wrong so let's

00:31:35,350 --> 00:31:41,289
see a little bit closer what is wrong

00:31:37,840 --> 00:31:45,340
with the we did each client as we can

00:31:41,289 --> 00:31:47,880
see it's create a call done for us it's

00:31:45,340 --> 00:31:52,299
like I said it's receiving the trap

00:31:47,880 --> 00:31:55,690
signal from from the kernel so if you

00:31:52,299 --> 00:31:58,440
will see a closer in the trace we see

00:31:55,690 --> 00:32:02,740
that if C is trying to do connections

00:31:58,440 --> 00:32:07,179
connect to the somewhere so if we would

00:32:02,740 --> 00:32:09,700
see a little bit closer to the to the

00:32:07,179 --> 00:32:13,870
encode we can see that it's called from

00:32:09,700 --> 00:32:19,389
the Saudi times trying to do connection

00:32:13,870 --> 00:32:23,590
and as we can see i didn't mark that but

00:32:19,389 --> 00:32:26,320
I hope it's visible for you it's trying

00:32:23,590 --> 00:32:30,100
to call it's the connection which is

00:32:26,320 --> 00:32:34,330
trying to do is done by syslog itself so

00:32:30,100 --> 00:32:37,870
we can see now the cloud of DDH kindest

00:32:34,330 --> 00:32:40,210
unboxing of the th PI and and it tries

00:32:37,870 --> 00:32:42,210
to pre open this this log before

00:32:40,210 --> 00:32:45,800
entering the capability mode so

00:32:42,210 --> 00:32:50,880
everything should be fine unfortunately

00:32:45,800 --> 00:32:53,250
and syslog is very interesting and I

00:32:50,880 --> 00:33:00,060
think it's kind of messy code

00:32:53,250 --> 00:33:02,520
unfortunately and open lock don't return

00:33:00,060 --> 00:33:06,360
us any value it means it's always

00:33:02,520 --> 00:33:08,790
succeeding so we cannot fail when we try

00:33:06,360 --> 00:33:11,130
to open lock we also can fail when we

00:33:08,790 --> 00:33:13,590
are trying to lock something so it's

00:33:11,130 --> 00:33:20,400
always succeeding unfortunately this

00:33:13,590 --> 00:33:25,080
isn't a true because as you can see each

00:33:20,400 --> 00:33:27,870
client is started after syslog D so it's

00:33:25,080 --> 00:33:30,270
turns out the D H file done cannot

00:33:27,870 --> 00:33:33,780
connect to the syslog at the time and we

00:33:30,270 --> 00:33:39,540
cannot even print the error because we

00:33:33,780 --> 00:33:41,940
don't know about that so we have to

00:33:39,540 --> 00:33:45,870
approach to this problem we can change

00:33:41,940 --> 00:33:50,070
the order of the syslog and the d h

00:33:45,870 --> 00:33:52,470
client and our D we can just implement

00:33:50,070 --> 00:33:58,020
the Casper services which will provide

00:33:52,470 --> 00:34:01,400
as all the functionality of society and

00:33:58,020 --> 00:34:03,750
I didn't mention that why the

00:34:01,400 --> 00:34:06,180
disconnection was trying to do and why

00:34:03,750 --> 00:34:08,550
it's failed it's because this syslog

00:34:06,180 --> 00:34:11,610
tried to reconnect every time when we

00:34:08,550 --> 00:34:13,320
try to log something to the in the

00:34:11,610 --> 00:34:15,840
operating system so if we're trying to

00:34:13,320 --> 00:34:19,470
send some bug and it's not connected to

00:34:15,840 --> 00:34:22,110
a syslog D then he tries to reconnect

00:34:19,470 --> 00:34:24,540
and because we don't have information

00:34:22,110 --> 00:34:26,610
that it's connected or not it's failed

00:34:24,540 --> 00:34:28,890
in the capability mode because he is

00:34:26,610 --> 00:34:32,790
trying to do a connection to see and

00:34:28,890 --> 00:34:35,640
this is disallowed in capability mode so

00:34:32,790 --> 00:34:38,070
another example is a society which is

00:34:35,640 --> 00:34:41,580
also failing on my machine when I enter

00:34:38,070 --> 00:34:44,840
the init cup mode so when I try to

00:34:41,580 --> 00:34:48,600
assign to it I see in the damask that

00:34:44,840 --> 00:34:51,420
something is wrong with my SS a 2 T so

00:34:48,600 --> 00:34:54,150
after doing all the work with the thing

00:34:51,420 --> 00:34:55,770
the the bugger and seeing what is wrong

00:34:54,150 --> 00:34:59,880
with the trace

00:34:55,770 --> 00:35:04,200
we see that there is a part of the cult

00:34:59,880 --> 00:35:09,950
which called GTP vivo class this code is

00:35:04,200 --> 00:35:14,940
failing in our in our sandbox this

00:35:09,950 --> 00:35:20,490
function is responsible for for reading

00:35:14,940 --> 00:35:24,200
the laudanum Kampf logging conf and et

00:35:20,490 --> 00:35:24,200
Cie login dot-com files and

00:35:24,320 --> 00:35:29,310
unfortunately we can't pre-open those

00:35:27,390 --> 00:35:32,160
files because before out an

00:35:29,310 --> 00:35:34,500
authorization we don't know which file

00:35:32,160 --> 00:35:38,940
to open because it's a home directory of

00:35:34,500 --> 00:35:41,910
the user that is trying to login so we

00:35:38,940 --> 00:35:43,710
also would be I'm also working on

00:35:41,910 --> 00:35:47,760
implementing the system log the log in

00:35:43,710 --> 00:35:50,250
to provide the functionality for reading

00:35:47,760 --> 00:35:52,350
those files and what is also very

00:35:50,250 --> 00:35:56,400
interesting about this part of the code

00:35:52,350 --> 00:35:58,530
which is broken at the FreeBSD is that

00:35:56,400 --> 00:36:00,869
this code exists only in the Fugees

00:35:58,530 --> 00:36:08,040
dispatches maintaining on on maintain

00:36:00,869 --> 00:36:10,080
and only by by FreeBSD developers so I

00:36:08,040 --> 00:36:12,890
would like to thanks few people that

00:36:10,080 --> 00:36:15,540
will contribute a lot to the product

00:36:12,890 --> 00:36:17,960
from last from last year

00:36:15,540 --> 00:36:21,830
I enjoyed which done the most of the

00:36:17,960 --> 00:36:25,170
capsicum eyes especially the BS bar

00:36:21,830 --> 00:36:28,790
Baptiste Conrad and AD which also did a

00:36:25,170 --> 00:36:34,260
lot of work around capsicum and

00:36:28,790 --> 00:36:39,000
Constantine which implemented the city

00:36:34,260 --> 00:36:42,410
I'll not come so thank you very much

00:36:39,000 --> 00:36:42,410
are there any questions

00:36:43,810 --> 00:36:49,860
[Applause]

00:37:07,190 --> 00:37:24,600
programs so at the beginning of the

00:37:14,100 --> 00:37:30,540
presentation I said yes so this is this

00:37:24,600 --> 00:37:35,580
is the old that are was was Sun boxes

00:37:30,540 --> 00:37:38,020
indeed 2016 and the list before is with

00:37:35,580 --> 00:37:41,359
the Aldi

00:37:38,020 --> 00:37:44,119
sandboxes applications so those two

00:37:41,359 --> 00:37:46,640
lists come contains all these sandboxes

00:37:44,119 --> 00:37:49,809
application right now in the previous

00:37:46,640 --> 00:37:49,809
the operating system

00:37:53,270 --> 00:38:29,300
I also need this and loving service yes

00:38:12,230 --> 00:38:33,080
this terrible yeah this was my first

00:38:29,300 --> 00:38:36,170
attempt to read that as his log house

00:38:33,080 --> 00:38:38,920
and it was very very messy and I'm very

00:38:36,170 --> 00:38:43,450
surprised that we use that curve still

00:38:38,920 --> 00:38:43,450
but yeah it's it's very messy

00:38:48,570 --> 00:38:52,810
so you're saying that you are trying to

00:38:51,130 --> 00:38:56,260
or services

00:38:52,810 --> 00:39:11,560
espera desert and you said that you know

00:38:56,260 --> 00:39:13,750
actually yes so the surface will be the

00:39:11,560 --> 00:39:17,020
same because it's still the same library

00:39:13,750 --> 00:39:19,930
that we are using for IPC so the service

00:39:17,020 --> 00:39:24,220
the service will be the same but we need

00:39:19,930 --> 00:39:26,260
news services to make capsicum a little

00:39:24,220 --> 00:39:30,670
bit more usable in many cases for

00:39:26,260 --> 00:39:32,590
example we cannot implement grab we

00:39:30,670 --> 00:39:35,110
cannot capsicum eyes grep right now

00:39:32,590 --> 00:39:40,270
because we are missing the whole file

00:39:35,110 --> 00:39:43,270
system namespace so we could do like a

00:39:40,270 --> 00:39:47,130
workaround like the fork from the graph

00:39:43,270 --> 00:39:50,440
and try to you know implement ad hoc the

00:39:47,130 --> 00:39:54,580
service itself but it would make the

00:39:50,440 --> 00:39:57,070
code I think it this would introduce the

00:39:54,580 --> 00:39:59,410
bigger surface of attack because it's a

00:39:57,070 --> 00:40:02,310
specific implementation only for one

00:39:59,410 --> 00:40:02,310
application

00:40:21,130 --> 00:40:24,209
[Music]

00:40:30,560 --> 00:40:35,199
[Music]

00:40:35,349 --> 00:40:44,720
okay so the difference is in the

00:40:40,060 --> 00:40:48,140
approach of the of the rights that we

00:40:44,720 --> 00:40:53,480
are accessing so capsicum says that you

00:40:48,140 --> 00:40:55,369
have a right to some capabilities inside

00:40:53,480 --> 00:40:58,160
the program and there are managed by

00:40:55,369 --> 00:41:01,339
file descriptors so you have like the

00:40:58,160 --> 00:41:06,430
right to to open the files in that

00:41:01,339 --> 00:41:08,750
directory or you have a file or you have

00:41:06,430 --> 00:41:09,740
descriptors to connect to the internet

00:41:08,750 --> 00:41:12,859
and so on

00:41:09,740 --> 00:41:14,690
in my opinion implied the approach is a

00:41:12,859 --> 00:41:17,329
little bit different than you say okay

00:41:14,690 --> 00:41:20,210
this is the namespace use that namespace

00:41:17,329 --> 00:41:24,560
and you get the access to whole

00:41:20,210 --> 00:41:27,079
namespace so in some cases a pledge is

00:41:24,560 --> 00:41:31,520
very useful for example if we would see

00:41:27,079 --> 00:41:34,550
the diversion of pledget WC it's great

00:41:31,520 --> 00:41:37,339
it's just like one pledge call entered

00:41:34,550 --> 00:41:40,790
you have access to file system I don't

00:41:37,339 --> 00:41:42,650
care anymore right and it's great but if

00:41:40,790 --> 00:41:47,680
you would go a little bit further and

00:41:42,650 --> 00:41:54,140
for example if some developer would miss

00:41:47,680 --> 00:41:56,260
this give too many rights to the to the

00:41:54,140 --> 00:41:59,750
program for example I'm giving you the

00:41:56,260 --> 00:42:01,700
access to my file system namespace and I

00:41:59,750 --> 00:42:04,280
also giving you the access to network

00:42:01,700 --> 00:42:06,589
then the application itself isn't such

00:42:04,280 --> 00:42:08,569
secure because I can read all your data

00:42:06,589 --> 00:42:14,869
and send it over the Internet

00:42:08,569 --> 00:42:16,570
so pledge is more like about the about

00:42:14,869 --> 00:42:19,730
the

00:42:16,570 --> 00:42:25,700
reducing the surface of the attacking

00:42:19,730 --> 00:42:28,990
the application but making some some

00:42:25,700 --> 00:42:41,710
[Music]

00:42:28,990 --> 00:42:45,200
sorry I missed the word making some so

00:42:41,710 --> 00:42:48,230
it's easier to use but it's a little bit

00:42:45,200 --> 00:42:50,870
less secure in some cases I also what

00:42:48,230 --> 00:42:51,530
I'm also don't like about that and I

00:42:50,870 --> 00:42:54,770
hope

00:42:51,530 --> 00:42:58,730
OpenBSD people will figure out how to

00:42:54,770 --> 00:43:01,520
fix that is that if you would fork from

00:42:58,730 --> 00:43:04,850
in the pledge application and do exact

00:43:01,520 --> 00:43:08,030
on any on any program then the new

00:43:04,850 --> 00:43:11,510
program is without sandbox so you can

00:43:08,030 --> 00:43:14,540
some in some cases theoretically you can

00:43:11,510 --> 00:43:18,140
escape from the assemble itself in

00:43:14,540 --> 00:43:21,320
capsicum you don't have a such issue

00:43:18,140 --> 00:43:24,800
you always are fully secure because you

00:43:21,320 --> 00:43:29,210
have only limited rights to do things in

00:43:24,800 --> 00:43:30,830
in capsicum and this is also why the

00:43:29,210 --> 00:43:32,990
capsicum so little bit harder to

00:43:30,830 --> 00:43:35,650
implement that in implement in some

00:43:32,990 --> 00:43:35,650
applications

00:43:57,190 --> 00:44:01,699
[Music]

00:44:02,650 --> 00:44:09,140
so yes we would like to do that one of

00:44:06,200 --> 00:44:12,470
the thing is the missing file system for

00:44:09,140 --> 00:44:15,890
example that is lacking from a long time

00:44:12,470 --> 00:44:22,640
already it should be done soon I hope

00:44:15,890 --> 00:44:25,550
and we outside that so this stuff has

00:44:22,640 --> 00:44:28,640
for some bouncing all the programs that

00:44:25,550 --> 00:44:31,160
use the file system so like grabbed the

00:44:28,640 --> 00:44:34,070
rag WC and so on

00:44:31,160 --> 00:44:38,780
this makes it's a nightmare to sandbox

00:44:34,070 --> 00:44:42,070
with applications and besides that yes

00:44:38,780 --> 00:44:45,980
we would like to see more patches in in

00:44:42,070 --> 00:44:49,630
capsicum and more sandbox at application

00:44:45,980 --> 00:44:49,630
and yeah

00:45:16,070 --> 00:45:31,330
[Music]

00:45:18,030 --> 00:45:33,460
yes so again it's a bigger surface of

00:45:31,330 --> 00:45:35,620
pata right because in lights like you

00:45:33,460 --> 00:45:37,840
mentioned you have access to whole file

00:45:35,620 --> 00:45:41,130
system its retried you can do whatever

00:45:37,840 --> 00:45:44,320
you want with the file system itself but

00:45:41,130 --> 00:45:46,570
in capsicum you have two descriptors you

00:45:44,320 --> 00:45:49,720
have only toast to rights to work with

00:45:46,570 --> 00:45:52,620
and there are very specific ones and you

00:45:49,720 --> 00:45:52,620
can undo anything

00:46:20,400 --> 00:46:23,590
[Music]

00:46:27,340 --> 00:46:30,459
[Music]

00:46:50,740 --> 00:46:58,990
pretty cool place

00:46:53,890 --> 00:46:58,990
open open was open

00:47:00,150 --> 00:47:07,310
policy right

00:47:16,730 --> 00:47:22,260
yes unfortunately there is also to be

00:47:20,520 --> 00:47:25,710
fair with the pledge right it's also

00:47:22,260 --> 00:47:27,450
hard with a lot of third party libraries

00:47:25,710 --> 00:47:31,400
because they for example don't work with

00:47:27,450 --> 00:47:35,780
descriptors and do like some open hidden

00:47:31,400 --> 00:47:39,869
calls to the in the inside themselves I

00:47:35,780 --> 00:47:41,520
remember we had like one issue with Sun

00:47:39,869 --> 00:47:44,010
boxing I don't remember which

00:47:41,520 --> 00:47:47,130
application but it was the issue that we

00:47:44,010 --> 00:47:49,200
are the the library itself third party

00:47:47,130 --> 00:47:51,510
library was opening directly to deaf

00:47:49,200 --> 00:47:54,869
random and nobody saw that in the crowd

00:47:51,510 --> 00:47:57,980
so we was unable to open the random

00:47:54,869 --> 00:48:00,900
number generator and we was using like

00:47:57,980 --> 00:48:05,970
we didn't have enough entropy to

00:48:00,900 --> 00:48:09,839
generate right correct numbers so to be

00:48:05,970 --> 00:48:14,849
fair both approach has downsized and

00:48:09,839 --> 00:48:17,339
upside and there are different approach

00:48:14,849 --> 00:48:20,579
to the problem in my opinion one is like

00:48:17,339 --> 00:48:23,010
ed said it's like objective approach

00:48:20,579 --> 00:48:25,279
when you have access to the one object

00:48:23,010 --> 00:48:28,619
or few objects to the set of objects and

00:48:25,279 --> 00:48:32,039
another one is to have our access to

00:48:28,619 --> 00:48:34,829
whole namespace in some cases the access

00:48:32,039 --> 00:48:37,170
to whole namespaces works right but in

00:48:34,829 --> 00:48:40,200
more complicated applications it will

00:48:37,170 --> 00:48:43,680
have the exactly the same if you would

00:48:40,200 --> 00:48:45,660
like to do it in correct way the procure

00:48:43,680 --> 00:48:50,240
way it will have the same issue for

00:48:45,660 --> 00:48:59,539
example I saw the implementation of the

00:48:50,240 --> 00:49:03,480
note the the mail client inside and then

00:48:59,539 --> 00:49:06,359
implied you have access of course to the

00:49:03,480 --> 00:49:07,950
file system you have access to the to

00:49:06,359 --> 00:49:14,260
the

00:49:07,950 --> 00:49:16,660
- today Network and you have also access

00:49:14,260 --> 00:49:19,150
to default and exit and this is done

00:49:16,660 --> 00:49:21,700
because they can't reload the

00:49:19,150 --> 00:49:25,539
configuration itself so they just fork

00:49:21,700 --> 00:49:28,839
and exact one more time that the

00:49:25,539 --> 00:49:31,059
application itself to regenerate the to

00:49:28,839 --> 00:49:33,339
reload the configuration this is a big

00:49:31,059 --> 00:49:37,150
attack surface for the attacker because

00:49:33,339 --> 00:49:39,250
if I can open the client itself why I

00:49:37,150 --> 00:49:41,380
will open the client itself maybe I will

00:49:39,250 --> 00:49:45,780
open that cut with some arguments and

00:49:41,380 --> 00:49:48,609
just create a backdoor to do that system

00:49:45,780 --> 00:49:51,010
so yeah it's it's different approach and

00:49:48,609 --> 00:49:54,730
in some approaches the pledge was

00:49:51,010 --> 00:49:57,220
drained in some I will be more secure

00:49:54,730 --> 00:50:19,180
feel I would feel more secure using

00:49:57,220 --> 00:50:21,240
capsicum I didn't put it on the

00:50:19,180 --> 00:50:24,819
presentation but we have a very nice

00:50:21,240 --> 00:50:26,970
wiki page of the about the capsicum

00:50:24,819 --> 00:50:29,710
there is our full list of the

00:50:26,970 --> 00:50:32,079
application that are already sandbox it

00:50:29,710 --> 00:50:34,750
and there is a list of the applications

00:50:32,079 --> 00:50:38,309
that are waiting and there are that we

00:50:34,750 --> 00:50:38,309
want to sandbox in the future

00:50:44,910 --> 00:50:51,100
so the most risky applic I will not give

00:50:49,300 --> 00:50:53,710
you the list of the application itself

00:50:51,100 --> 00:50:56,800
because I I don't remember but the most

00:50:53,710 --> 00:50:59,410
risky applications are those that that

00:50:56,800 --> 00:51:02,050
are working with some kind of parsers

00:50:59,410 --> 00:51:04,750
right for example gret is great example

00:51:02,050 --> 00:51:07,560
what we had a lot of the issue with

00:51:04,750 --> 00:51:10,630
grabs because it has a very complicated

00:51:07,560 --> 00:51:15,490
syntax of reg X and it's very easy to

00:51:10,630 --> 00:51:18,790
find somehow that if it's exploitable so

00:51:15,490 --> 00:51:23,950
everything that is like parsers and so

00:51:18,790 --> 00:51:26,020
on should be should be some boxes for

00:51:23,950 --> 00:51:30,160
example TCP dump right we are receiving

00:51:26,020 --> 00:51:31,810
the the package from untrusted source we

00:51:30,160 --> 00:51:34,240
are also doing some analysis of this

00:51:31,810 --> 00:51:36,970
package is also very unsecure so we also

00:51:34,240 --> 00:51:38,830
are think I would also recommend to find

00:51:36,970 --> 00:51:41,530
an application that is working with

00:51:38,830 --> 00:51:42,670
untrusted input like for example the

00:51:41,530 --> 00:51:46,030
network 1 right

00:51:42,670 --> 00:51:48,250
I guess the applications like WC for

00:51:46,030 --> 00:51:51,910
example which only counts and don't work

00:51:48,250 --> 00:52:05,530
with real data itself right it's can go

00:51:51,910 --> 00:52:07,859
in the in the next step basic thank you

00:52:05,530 --> 00:52:07,859

YouTube URL: https://www.youtube.com/watch?v=jHfjEJIdmTQ


