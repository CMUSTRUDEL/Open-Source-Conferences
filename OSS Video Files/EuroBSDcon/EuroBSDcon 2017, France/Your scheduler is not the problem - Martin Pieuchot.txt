Title: Your scheduler is not the problem - Martin Pieuchot
Publication date: 2019-10-16
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

Analysing performance issues might be tricky. No matter how powerful
your tools are, you have to point them to the correct spot and be able
to interpret their output.
This talk presents the analysis and fixes for a performance regression
introduced in Firefox 40.0 on OpenBSD. A debug story from X to libpthread
with a detour in the scheduler all of that without DTrace.

Speaker biography:

Martin Pieuchot is an OpenBSD developer coordinating the ongoing effort
to make the network stack MP-safe. He works as a freelance developer and
consultant.
Captions: 
	00:00:00,060 --> 00:00:07,740
thank you for coming I hope not unit too

00:00:03,000 --> 00:00:12,030
sleepy I'm gonna tell you a story it's a

00:00:07,740 --> 00:00:14,940
story about how I found out that I was

00:00:12,030 --> 00:00:17,400
wrong and how I found out this killer it

00:00:14,940 --> 00:00:18,119
was not a problem I was looking for so

00:00:17,400 --> 00:00:20,730
Who am I

00:00:18,119 --> 00:00:22,830
Martin pure Shaw the French developer

00:00:20,730 --> 00:00:25,289
from Paris were really happy to have a

00:00:22,830 --> 00:00:25,920
lot of BSD enthusiasts and developer

00:00:25,289 --> 00:00:29,640
around here

00:00:25,920 --> 00:00:32,700
my hometown I joined the OpenBSD crew

00:00:29,640 --> 00:00:37,110
around six years ago and since then I've

00:00:32,700 --> 00:00:39,149
mainly been improving the kernel working

00:00:37,110 --> 00:00:42,030
on some parallelization stuff in the

00:00:39,149 --> 00:00:45,180
network stack improving the USB stack

00:00:42,030 --> 00:00:45,690
getting some support of drivers I don't

00:00:45,180 --> 00:00:51,660
know

00:00:45,690 --> 00:00:55,969
Travis driver profiling and lately I got

00:00:51,660 --> 00:00:55,969
a problem with Firefox

00:01:00,990 --> 00:01:06,550
the way I'm not when I'm not working on

00:01:03,700 --> 00:01:09,460
OpenBSD and on my day job I try to work

00:01:06,550 --> 00:01:11,710
on OpenBSD so I go for consulting and I

00:01:09,460 --> 00:01:14,650
say well I believe in open source I

00:01:11,710 --> 00:01:17,010
believe in free software and I'm sure a

00:01:14,650 --> 00:01:20,260
lot of you a lot of company have

00:01:17,010 --> 00:01:21,370
problems not necessarily with free

00:01:20,260 --> 00:01:24,550
software but they have problem with

00:01:21,370 --> 00:01:26,530
software and when it comes to resolving

00:01:24,550 --> 00:01:28,750
a problem I was discussing that with a

00:01:26,530 --> 00:01:31,960
lot of you we have a lot of discussion

00:01:28,750 --> 00:01:34,840
about DTrace or any performance tool and

00:01:31,960 --> 00:01:40,090
we have a great keynote tomorrow but the

00:01:34,840 --> 00:01:43,020
question is how do people can think how

00:01:40,090 --> 00:01:45,640
do people can use those tools and how

00:01:43,020 --> 00:01:48,100
what's the step right because we are all

00:01:45,640 --> 00:01:51,729
making assumption for here but the

00:01:48,100 --> 00:01:54,220
scheduler so I go on consulting and what

00:01:51,729 --> 00:01:56,350
height here generally oh I have to go

00:01:54,220 --> 00:01:59,470
there yes

00:01:56,350 --> 00:02:01,000
what I hear general is urs meaning open

00:01:59,470 --> 00:02:04,600
gears do you want to talk to me does not

00:02:01,000 --> 00:02:07,479
work it's your fault it doesn't scale

00:02:04,600 --> 00:02:11,830
the scheduler sucks I will switch to

00:02:07,479 --> 00:02:13,989
whatever Linux FreeBSD windows ok so I

00:02:11,830 --> 00:02:19,330
just say ok I go back home sorry thanks

00:02:13,989 --> 00:02:23,049
for coming in now my word and my passion

00:02:19,330 --> 00:02:25,090
is to try to solve problems so how do we

00:02:23,049 --> 00:02:29,260
solve problems when somebody come and

00:02:25,090 --> 00:02:34,290
say well it sucks higher the problems

00:02:29,260 --> 00:02:36,970
Firefox right so let's take this example

00:02:34,290 --> 00:02:41,860
first I will expose the regression or at

00:02:36,970 --> 00:02:45,910
least well how it came to me then I will

00:02:41,860 --> 00:02:48,010
dive into my own mistakes so what I call

00:02:45,910 --> 00:02:51,700
the first little hacks on how to solve

00:02:48,010 --> 00:02:54,570
this problem based on that mistake how I

00:02:51,700 --> 00:02:57,070
learn about it I found a real solution

00:02:54,570 --> 00:03:00,459
with some interesting challenge

00:02:57,070 --> 00:03:04,690
technically I will explain that before

00:03:00,459 --> 00:03:09,060
the conclusion of this talk so first my

00:03:04,690 --> 00:03:12,960
Firefox problem so I like to watch movie

00:03:09,060 --> 00:03:16,890
on internet especially an AG a

00:03:12,960 --> 00:03:20,790
d and well if it's a katana why not

00:03:16,890 --> 00:03:23,130
at the time in August 2015 I was really

00:03:20,790 --> 00:03:25,620
and I'm still a big fan of Firefox and

00:03:23,130 --> 00:03:27,330
there really is like a new version the

00:03:25,620 --> 00:03:31,440
number really doesn't matter at that

00:03:27,330 --> 00:03:35,970
time it was Firefox 40 and I could not

00:03:31,440 --> 00:03:36,330
watch my movies anymore so well what did

00:03:35,970 --> 00:03:38,760
I do

00:03:36,330 --> 00:03:42,750
I started looking at the change load I

00:03:38,760 --> 00:03:44,400
didn't see anything obvious I had the

00:03:42,750 --> 00:03:46,290
feeling like I was coming back 10 years

00:03:44,400 --> 00:03:47,670
ago when we had like this flash plugging

00:03:46,290 --> 00:03:50,790
it was not working and we had to

00:03:47,670 --> 00:03:53,940
download stuff manually and like no so I

00:03:50,790 --> 00:03:56,010
just switched to the long-term support

00:03:53,940 --> 00:03:58,170
version of Firefox which still work at

00:03:56,010 --> 00:04:00,060
that point and when it did not because

00:03:58,170 --> 00:04:02,220
it got upgraded at switch to Chrome so

00:04:00,060 --> 00:04:06,960
problem was fixed I could still watch my

00:04:02,220 --> 00:04:08,460
movies but the problem wasn't fixed from

00:04:06,960 --> 00:04:09,900
the point of you know as developer you

00:04:08,460 --> 00:04:13,440
still have something that happened you

00:04:09,900 --> 00:04:15,570
don't know what so what can we do at

00:04:13,440 --> 00:04:17,730
that point what we all do at this point

00:04:15,570 --> 00:04:20,580
while we start making gas wells because

00:04:17,730 --> 00:04:22,140
the moon at the time and we start

00:04:20,580 --> 00:04:26,700
blaming people so I'm not sure if

00:04:22,140 --> 00:04:29,700
laundry is here today laundry no

00:04:26,700 --> 00:04:31,260
laundry's is maintaining Firefox on open

00:04:29,700 --> 00:04:32,550
business doing amazing work we will talk

00:04:31,260 --> 00:04:36,510
about that I think tomorrow

00:04:32,550 --> 00:04:38,730
and so laundry at some point start to

00:04:36,510 --> 00:04:40,770
say please stop tell me that Firefox I

00:04:38,730 --> 00:04:42,780
would work I know it does not work I

00:04:40,770 --> 00:04:46,530
know we had a problem but nobody is

00:04:42,780 --> 00:04:49,230
doing anything about it so my thing is

00:04:46,530 --> 00:04:51,660
ok if you complain that's fine but if

00:04:49,230 --> 00:04:55,350
you really want to make things better

00:04:51,660 --> 00:04:57,960
you have to explain or to say what's not

00:04:55,350 --> 00:05:00,810
working and that's not trivial because

00:04:57,960 --> 00:05:02,250
we all use the computer as a consumer to

00:05:00,810 --> 00:05:08,700
watch our Keating video and we don't

00:05:02,250 --> 00:05:10,260
know what to look at so generally when

00:05:08,700 --> 00:05:14,910
it comes to open source and free

00:05:10,260 --> 00:05:19,410
software people tend to focus on on the

00:05:14,910 --> 00:05:22,169
source code and this week for example

00:05:19,410 --> 00:05:24,240
well last week a couple of weeks ago I

00:05:22,169 --> 00:05:24,960
introduced a regression in the kernel

00:05:24,240 --> 00:05:27,389
and

00:05:24,960 --> 00:05:29,850
and all I got is like I'm allowed these

00:05:27,389 --> 00:05:31,770
commits brought blah which is great

00:05:29,850 --> 00:05:33,509
because people have access to the source

00:05:31,770 --> 00:05:36,720
code so they can tell you what this

00:05:33,509 --> 00:05:40,650
committee is wrong but looking at the

00:05:36,720 --> 00:05:43,169
source code or history of a program does

00:05:40,650 --> 00:05:46,169
not always work in the case of Firefox

00:05:43,169 --> 00:05:48,600
you have this huge program that even if

00:05:46,169 --> 00:05:50,970
it's open source it for me

00:05:48,600 --> 00:05:53,970
really complicated to deal with and open

00:05:50,970 --> 00:05:55,710
visit is not a supported platform in the

00:05:53,970 --> 00:05:57,389
sense that they don't check every change

00:05:55,710 --> 00:06:00,210
on it so it's really hard to backtrack

00:05:57,389 --> 00:06:02,930
so what can we do the same is applies to

00:06:00,210 --> 00:06:05,520
close through software within your own

00:06:02,930 --> 00:06:08,010
software developed by your coworker that

00:06:05,520 --> 00:06:10,650
you don't know now what I said and what

00:06:08,010 --> 00:06:13,860
I did is I took the black black box

00:06:10,650 --> 00:06:17,580
approach so the black box approach is

00:06:13,860 --> 00:06:19,919
basically well Firefox I don't look at

00:06:17,580 --> 00:06:23,070
what he's doing I will just look at the

00:06:19,919 --> 00:06:25,560
metrics what are the metrics well if you

00:06:23,070 --> 00:06:27,120
take the metaphor of the car generally

00:06:25,560 --> 00:06:29,310
if your car as something does not go

00:06:27,120 --> 00:06:31,500
well in your car like it's more lights

00:06:29,310 --> 00:06:34,380
start blinking Oh what is it what is it

00:06:31,500 --> 00:06:36,900
and in all our voices we have a lot of

00:06:34,380 --> 00:06:39,270
tool that give us those information we

00:06:36,900 --> 00:06:41,240
just don't know how to use it we don't

00:06:39,270 --> 00:06:44,639
know which one of them we have to look

00:06:41,240 --> 00:06:49,190
so at least a lot of them that I used

00:06:44,639 --> 00:06:53,330
regularly just well just run it and

00:06:49,190 --> 00:06:55,620
since in this case we had a software

00:06:53,330 --> 00:06:59,430
year server version so the long-term

00:06:55,620 --> 00:07:03,210
support of of Firefox I could grab my

00:06:59,430 --> 00:07:05,370
video of kitten run one statistic to see

00:07:03,210 --> 00:07:06,960
how the the metrics are and then I

00:07:05,370 --> 00:07:09,210
grabbed the newer version the one that I

00:07:06,960 --> 00:07:10,949
could not see the video with and I can

00:07:09,210 --> 00:07:13,110
look at the statistic what's very

00:07:10,949 --> 00:07:15,570
different so you consider yourself as a

00:07:13,110 --> 00:07:17,699
black box and you poke at all the

00:07:15,570 --> 00:07:20,460
registers all the statistic your

00:07:17,699 --> 00:07:23,460
operating system is giving you I did

00:07:20,460 --> 00:07:26,010
that I did that and before entering to

00:07:23,460 --> 00:07:28,080
do to the mailing list I gathered the

00:07:26,010 --> 00:07:29,639
relevant information in the case of

00:07:28,080 --> 00:07:33,500
Firefox in the case of this regression

00:07:29,639 --> 00:07:36,510
had two really interesting metrics so

00:07:33,500 --> 00:07:37,830
this kind of interpretation now even if

00:07:36,510 --> 00:07:39,870
you're not a developer

00:07:37,830 --> 00:07:41,639
you're aware of single this is different

00:07:39,870 --> 00:07:42,810
so you can send any mail here I found

00:07:41,639 --> 00:07:46,199
that it's different I don't know what is

00:07:42,810 --> 00:07:50,370
mean but it's different so what I got I

00:07:46,199 --> 00:07:52,199
got vmstat and the - I option on OpenBSD

00:07:50,370 --> 00:07:54,720
but on other operating system as well

00:07:52,199 --> 00:07:57,840
reports the interoperate so how many

00:07:54,720 --> 00:08:00,090
interrupts you got four in a period of

00:07:57,840 --> 00:08:00,900
time on this case with a new version of

00:08:00,090 --> 00:08:04,889
Firefox

00:08:00,900 --> 00:08:08,550
I do incredible interpret for

00:08:04,889 --> 00:08:11,099
inter-process communication IP I and I

00:08:08,550 --> 00:08:12,800
was like with the old version of Firefox

00:08:11,099 --> 00:08:16,379
are almost known and this version I like

00:08:12,800 --> 00:08:17,310
30,000 or more well that's something we

00:08:16,379 --> 00:08:21,509
don't know what it is but that's

00:08:17,310 --> 00:08:23,789
something the other interesting metrics

00:08:21,509 --> 00:08:24,889
is that when I run top sometime around

00:08:23,789 --> 00:08:28,199
tops

00:08:24,889 --> 00:08:30,419
well I just see that basically five of

00:08:28,199 --> 00:08:33,810
course playing ping pong was my CPU so

00:08:30,419 --> 00:08:36,060
one process was going on CPU one and it

00:08:33,810 --> 00:08:38,719
was going to CP 2 then coming back CP 1

00:08:36,060 --> 00:08:41,669
and I'm going to CPU 3 and it's like oh

00:08:38,719 --> 00:08:45,810
and my movie is not playing but you're

00:08:41,669 --> 00:08:47,820
like anyway that's something maybe I

00:08:45,810 --> 00:08:51,990
cannot interpret it but ok let's dig a

00:08:47,820 --> 00:08:52,709
bit a bit in this direction so what do

00:08:51,990 --> 00:08:54,570
we do next

00:08:52,709 --> 00:08:58,320
first we've got the metric something is

00:08:54,570 --> 00:09:00,750
different well we lose a really useful

00:08:58,320 --> 00:09:02,790
tool that we have in OpenBSD and and we

00:09:00,750 --> 00:09:03,360
have this saying of tetris or it did not

00:09:02,790 --> 00:09:05,750
happen

00:09:03,360 --> 00:09:09,600
so k trace you might not know it but

00:09:05,750 --> 00:09:12,990
it's use it's a tool that register

00:09:09,600 --> 00:09:14,700
basically all the cisco so they function

00:09:12,990 --> 00:09:19,050
that enter the kernel and exit the

00:09:14,700 --> 00:09:20,670
kernel ways doing some action and tells

00:09:19,050 --> 00:09:24,560
you if it sucks it or not what's rich on

00:09:20,670 --> 00:09:28,980
value at what which time stand and the

00:09:24,560 --> 00:09:31,949
left value on the slide is the PID so

00:09:28,980 --> 00:09:34,110
the idea of the process and after the

00:09:31,949 --> 00:09:36,630
flash you have an idea of the thread so

00:09:34,110 --> 00:09:39,839
on the first line you see that asteroid

00:09:36,630 --> 00:09:41,910
with some ID call fiscal which is

00:09:39,839 --> 00:09:45,240
scheduled well we don't know whether is

00:09:41,910 --> 00:09:47,640
but it called that and then on to line

00:09:45,240 --> 00:09:50,480
it it's returned from it then it call it

00:09:47,640 --> 00:09:52,459
again and then another thread from the

00:09:50,480 --> 00:09:53,959
same process so we now we know well

00:09:52,459 --> 00:09:57,649
there's these two thread they call the

00:09:53,959 --> 00:09:59,120
same Cisco well cool and then another

00:09:57,649 --> 00:10:01,040
one which different number also called

00:09:59,120 --> 00:10:02,959
this Cisco wall there are lot of thread

00:10:01,040 --> 00:10:04,430
well that might explain the ping-pong

00:10:02,959 --> 00:10:07,370
game right and they're all calling the

00:10:04,430 --> 00:10:09,290
same Cisco so now we are curious we can

00:10:07,370 --> 00:10:11,600
look at the manual page while manse is

00:10:09,290 --> 00:10:13,339
called what my man scared yell what does

00:10:11,600 --> 00:10:17,480
kill kill does maybe you already know

00:10:13,339 --> 00:10:19,370
well schedule is say oh sorry I'm there

00:10:17,480 --> 00:10:22,579
I don't know I cannot do anything just

00:10:19,370 --> 00:10:25,209
please pick somebody else so it's like

00:10:22,579 --> 00:10:27,680
communicating with scheduler I say well

00:10:25,209 --> 00:10:31,550
for any reason I don't want to continue

00:10:27,680 --> 00:10:35,060
doing something so there I got okay

00:10:31,550 --> 00:10:38,089
something is related to the scheduler so

00:10:35,060 --> 00:10:40,970
first guess I explained why it was wrong

00:10:38,089 --> 00:10:43,070
inside well scheduler is a problem there

00:10:40,970 --> 00:10:45,470
because somehow we are connected there

00:10:43,070 --> 00:10:45,829
so let's dig a bit what happened after

00:10:45,470 --> 00:10:49,130
that

00:10:45,829 --> 00:10:51,560
well I looked at the difference between

00:10:49,130 --> 00:10:53,990
the catch phrase done that I got from

00:10:51,560 --> 00:10:56,660
the Earth's ESR version so the long-term

00:10:53,990 --> 00:10:58,490
version of Firefox and the nightly

00:10:56,660 --> 00:11:01,100
version that I build from source to be

00:10:58,490 --> 00:11:04,370
sure well something is happening and I

00:11:01,100 --> 00:11:07,970
could isolate the problem to escape you

00:11:04,370 --> 00:11:09,470
call that I saw were really different so

00:11:07,970 --> 00:11:12,079
maybe they are related to the other

00:11:09,470 --> 00:11:14,779
metric of same so so far as in a ping

00:11:12,079 --> 00:11:18,290
pong AB single huge number of IP ID and

00:11:14,779 --> 00:11:21,680
in term of codes a lot of schedules

00:11:18,290 --> 00:11:24,050
really interesting what next what could

00:11:21,680 --> 00:11:25,819
I do with that well this is directly an

00:11:24,050 --> 00:11:28,970
entry point to the code so I could look

00:11:25,819 --> 00:11:33,709
at the code there is many tools on

00:11:28,970 --> 00:11:35,690
internet Oh could look at the code well

00:11:33,709 --> 00:11:39,500
now look at good there's many tool on

00:11:35,690 --> 00:11:40,970
internet and with the only you to search

00:11:39,500 --> 00:11:44,209
directly so in this case I was looking

00:11:40,970 --> 00:11:47,870
for Firefox and for Penn BSD so I put

00:11:44,209 --> 00:11:49,579
two web interface big star dot su that I

00:11:47,870 --> 00:11:52,490
use every day for developing open BSD

00:11:49,579 --> 00:11:54,970
which it's a website like it's an open

00:11:52,490 --> 00:11:57,589
rock maybe you know that it's allow you

00:11:54,970 --> 00:11:59,480
to search in the source code of all the

00:11:57,589 --> 00:12:02,149
BSD is very useful to check for

00:11:59,480 --> 00:12:04,190
differences to know where this is call

00:12:02,149 --> 00:12:06,020
is oh really

00:12:04,190 --> 00:12:08,600
and you have the same for Mozilla

00:12:06,020 --> 00:12:11,870
project which is geeks are that much not

00:12:08,600 --> 00:12:14,870
at all so my entry point is this is Cole

00:12:11,870 --> 00:12:18,290
and I found basically two different

00:12:14,870 --> 00:12:20,150
places where it was cold either by

00:12:18,290 --> 00:12:21,560
Firefox directly one when I said

00:12:20,150 --> 00:12:24,800
directly there's a lot of layers of

00:12:21,560 --> 00:12:29,360
attraction but it's directly in the

00:12:24,800 --> 00:12:32,840
binary and through a library that I got

00:12:29,360 --> 00:12:39,440
linked to the two binary which is a

00:12:32,840 --> 00:12:42,200
lipid version of OpenBSD in a second

00:12:39,440 --> 00:12:43,880
pointer and in the name of how pthread

00:12:42,200 --> 00:12:47,690
libraries lib earth threat for real

00:12:43,880 --> 00:12:50,720
threat so I said what else can we do

00:12:47,690 --> 00:12:54,890
with that is it coming from there is it

00:12:50,720 --> 00:12:57,080
coming from here or both right so there

00:12:54,890 --> 00:12:58,330
I say we have another tube we have el

00:12:57,080 --> 00:13:02,770
tres

00:12:58,330 --> 00:13:05,540
so el tres is basically to see which

00:13:02,770 --> 00:13:07,550
function are originating from a library

00:13:05,540 --> 00:13:09,550
it's based on up and visit on the kid

00:13:07,550 --> 00:13:15,470
tray so use it exactly the same way

00:13:09,550 --> 00:13:16,700
however Firefox is a huge process you

00:13:15,470 --> 00:13:20,150
don't learn anything when I tell you

00:13:16,700 --> 00:13:23,930
that and you cannot directly while

00:13:20,150 --> 00:13:26,360
outside running El trace from the

00:13:23,930 --> 00:13:28,850
beginning and all the startup process of

00:13:26,360 --> 00:13:32,420
Firefox may be really complicated to see

00:13:28,850 --> 00:13:35,480
what's happening because you have a lot

00:13:32,420 --> 00:13:37,990
of noise so it's like general concept

00:13:35,480 --> 00:13:40,550
when I'm trying to analyze a problem

00:13:37,990 --> 00:13:43,700
that oh you know something is wrong but

00:13:40,550 --> 00:13:45,740
you when do you have to look at it and

00:13:43,700 --> 00:13:48,770
how do I make sure that what I'm looking

00:13:45,740 --> 00:13:53,020
at is effectively what's corresponding

00:13:48,770 --> 00:13:56,420
to the problem so in this case I try to

00:13:53,020 --> 00:13:59,050
generate the simpler test case with

00:13:56,420 --> 00:14:01,490
Firefox possible and for me it was

00:13:59,050 --> 00:14:04,580
starting the browser waiting for it to

00:14:01,490 --> 00:14:06,470
settle and on the blank page so nothing

00:14:04,580 --> 00:14:08,330
too random nothing just move the curse

00:14:06,470 --> 00:14:10,970
of my mouth like a little bit like like

00:14:08,330 --> 00:14:12,770
you're just touching it and that trigger

00:14:10,970 --> 00:14:14,240
all the crazy stuff I've just described

00:14:12,770 --> 00:14:16,819
before

00:14:14,240 --> 00:14:20,329
so there I start fire for generally and

00:14:16,819 --> 00:14:23,240
I started L trace to see when I move the

00:14:20,329 --> 00:14:25,999
mouse what's happened to second up

00:14:23,240 --> 00:14:28,939
something that's asleep too and then

00:14:25,999 --> 00:14:33,170
stop the tracing and what did I see

00:14:28,939 --> 00:14:36,319
well I said that it comes indeed from

00:14:33,170 --> 00:14:38,540
the liebe air thread because I think

00:14:36,319 --> 00:14:40,790
that a lot of the skills you were coming

00:14:38,540 --> 00:14:45,589
from a function which is called spin

00:14:40,790 --> 00:14:46,999
lock Oh interest and a match the number

00:14:45,589 --> 00:14:49,819
of this kid yield that I had in my

00:14:46,999 --> 00:14:52,459
catchphrase was the number of spin lock

00:14:49,819 --> 00:14:55,480
that hired in in this dump

00:14:52,459 --> 00:14:58,869
and it was exactly almost the same so I

00:14:55,480 --> 00:15:01,939
kind of going the right direction right

00:14:58,869 --> 00:15:05,360
well I think something must be wrong

00:15:01,939 --> 00:15:07,279
with this scheduler I don't know why

00:15:05,360 --> 00:15:10,929
it's like scheduler it's funny subject

00:15:07,279 --> 00:15:13,550
even for me so any of those guests I

00:15:10,929 --> 00:15:15,379
learned I learned last week I learned

00:15:13,550 --> 00:15:17,779
last week I was consulting and and that

00:15:15,379 --> 00:15:22,160
our brain works in two different fashion

00:15:17,779 --> 00:15:24,279
so you have like this am suggestion that

00:15:22,160 --> 00:15:26,299
you brings meg which are not always

00:15:24,279 --> 00:15:30,709
interesting so the guy asked me a

00:15:26,299 --> 00:15:34,279
question so if i buy a cell phone and a

00:15:30,709 --> 00:15:39,290
case to protect it for the total of 110

00:15:34,279 --> 00:15:41,629
euros well and on top of that if i tell

00:15:39,290 --> 00:15:44,360
you that the cell phone cost 100 euro

00:15:41,629 --> 00:15:47,869
more than the case how much cost the

00:15:44,360 --> 00:15:52,429
case it's very interesting question and

00:15:47,869 --> 00:15:55,129
the answer it's it's not ten right and

00:15:52,429 --> 00:15:58,389
exactly that was happening in this

00:15:55,129 --> 00:16:01,990
situation I got this intuition and I

00:15:58,389 --> 00:16:05,449
it's one and that happened to everybody

00:16:01,990 --> 00:16:06,860
what was more complicated in that I said

00:16:05,449 --> 00:16:09,769
okay the Froman scheduler so let's have

00:16:06,860 --> 00:16:16,850
the scheduler well what did I do

00:16:09,769 --> 00:16:18,589
I started to say well on OpenBSD we have

00:16:16,850 --> 00:16:20,980
like a modified version of the original

00:16:18,589 --> 00:16:24,410
B of the scheduler

00:16:20,980 --> 00:16:27,530
every time a task want to be executed or

00:16:24,410 --> 00:16:30,320
thread in our case we will say well

00:16:27,530 --> 00:16:34,400
first select a CPU put on the queue for

00:16:30,320 --> 00:16:37,510
the CPU and if there is somebody already

00:16:34,400 --> 00:16:40,190
being executed you will be picked later

00:16:37,510 --> 00:16:42,260
so I said ah the problem I said I'd

00:16:40,190 --> 00:16:43,700
guess not time well that should be

00:16:42,260 --> 00:16:46,310
certainly dad because they are playing

00:16:43,700 --> 00:16:48,980
ping pong between each other so maybe I

00:16:46,310 --> 00:16:51,740
didn't know I really did not know so I

00:16:48,980 --> 00:16:54,890
start by ripping out all those perk you

00:16:51,740 --> 00:16:56,750
sleep the CPU a purse a few cues so just

00:16:54,890 --> 00:16:59,060
a well as soon as the CP has nothing to

00:16:56,750 --> 00:17:01,850
do it takes from a global list what I

00:16:59,060 --> 00:17:04,420
represented here on the right the next

00:17:01,850 --> 00:17:11,270
thread of task that needs to be executed

00:17:04,420 --> 00:17:13,280
and it works why well it would be

00:17:11,270 --> 00:17:17,470
interesting to explain but it's more

00:17:13,280 --> 00:17:20,480
interesting to explain why it was wrong

00:17:17,470 --> 00:17:23,950
so is it to problem really there I make

00:17:20,480 --> 00:17:26,030
a guess I write it if it works

00:17:23,950 --> 00:17:28,100
people are happy people are running with

00:17:26,030 --> 00:17:31,100
it and as I know I cannot commit that

00:17:28,100 --> 00:17:35,450
because I don't understand it what did I

00:17:31,100 --> 00:17:36,860
do next well I get to do a different

00:17:35,450 --> 00:17:41,270
inspection of what was really happening

00:17:36,860 --> 00:17:45,920
into the library I wanted to use gdb but

00:17:41,270 --> 00:17:48,680
I'm crying for help till today we have a

00:17:45,920 --> 00:17:50,540
real problem there there's no debug

00:17:48,680 --> 00:17:52,130
symbol in port so I've been whining for

00:17:50,540 --> 00:17:54,910
years but it's still not happening on

00:17:52,130 --> 00:17:58,010
open BSD and it's really hard to debug

00:17:54,910 --> 00:18:01,490
shredded for programs and OpenBSD with

00:17:58,010 --> 00:18:04,220
gdb basically as soon as you stop

00:18:01,490 --> 00:18:06,050
debugging it your programs stay in

00:18:04,220 --> 00:18:08,870
stupid state and you cannot do anything

00:18:06,050 --> 00:18:10,790
with it so I we don't have dynamic

00:18:08,870 --> 00:18:12,350
tracer we don't have anything else so

00:18:10,790 --> 00:18:15,890
let's go for print of the beginning why

00:18:12,350 --> 00:18:19,400
not right and with my nice print if I

00:18:15,890 --> 00:18:23,510
got with those information on dawn on

00:18:19,400 --> 00:18:27,800
the slide what does it say that you have

00:18:23,510 --> 00:18:29,930
the address on the code where am the

00:18:27,800 --> 00:18:30,990
yield function the skilled illness is

00:18:29,930 --> 00:18:33,360
called

00:18:30,990 --> 00:18:35,420
and has been executed and how many times

00:18:33,360 --> 00:18:39,330
so it's kind of rate limited right

00:18:35,420 --> 00:18:45,420
that's really interesting here what we

00:18:39,330 --> 00:18:47,429
say is that multiple time a single

00:18:45,420 --> 00:18:49,530
thread has been calling the same

00:18:47,429 --> 00:18:51,900
schedule so it's like in a loop right I

00:18:49,530 --> 00:18:53,370
was trying to call this is called the

00:18:51,900 --> 00:18:55,890
other really interesting thing that we

00:18:53,370 --> 00:18:58,620
see is that they're calling them from

00:18:55,890 --> 00:19:02,160
two different function on the right new

00:18:58,620 --> 00:19:04,260
text log and cone for condition variable

00:19:02,160 --> 00:19:06,270
time the weight that was related to new

00:19:04,260 --> 00:19:10,410
text and some wife you know it's

00:19:06,270 --> 00:19:14,550
retirees what what what did I learn

00:19:10,410 --> 00:19:16,920
there well I started to fear that the

00:19:14,550 --> 00:19:19,830
problem was more in the pthread library

00:19:16,920 --> 00:19:21,480
but more interesting that other OpenBSD

00:19:19,830 --> 00:19:24,360
developer was saying are the problem is

00:19:21,480 --> 00:19:26,040
coming from contention on Malik but if

00:19:24,360 --> 00:19:27,780
the problem was really only on

00:19:26,040 --> 00:19:28,230
contention of Malik I'm not saying it's

00:19:27,780 --> 00:19:31,050
not

00:19:28,230 --> 00:19:33,690
it was also we should not see there's so

00:19:31,050 --> 00:19:36,090
many way yield on a condition time wait

00:19:33,690 --> 00:19:38,670
so we also have another problem that we

00:19:36,090 --> 00:19:46,800
still don't know what it is so what it

00:19:38,670 --> 00:19:49,800
is well at some point you try to read

00:19:46,800 --> 00:19:53,640
some code and make a guess about what

00:19:49,800 --> 00:19:57,480
you read and get see if it's much the

00:19:53,640 --> 00:20:00,960
information you're getting so I read

00:19:57,480 --> 00:20:03,800
some code at that time another guy on

00:20:00,960 --> 00:20:06,059
our mailing list started to post a new

00:20:03,800 --> 00:20:08,730
scheduler with not without really

00:20:06,059 --> 00:20:09,960
explaining anything and I start looking

00:20:08,730 --> 00:20:12,510
at this differently from it's really

00:20:09,960 --> 00:20:14,010
interesting what I found really

00:20:12,510 --> 00:20:14,400
interesting it could be completely

00:20:14,010 --> 00:20:17,790
different

00:20:14,400 --> 00:20:21,990
Toki's how the priority works in a BSD

00:20:17,790 --> 00:20:24,690
scheduler what interesting is that at

00:20:21,990 --> 00:20:29,640
that time when the code has been written

00:20:24,690 --> 00:20:31,050
you didn't have threads right what does

00:20:29,640 --> 00:20:33,090
that mean that means that when we

00:20:31,050 --> 00:20:35,190
started supporting threads we didn't

00:20:33,090 --> 00:20:36,809
change the scheduler and we didn't even

00:20:35,190 --> 00:20:41,790
serve all in there a problem there and

00:20:36,809 --> 00:20:44,550
indeed there is the problem that I found

00:20:41,790 --> 00:20:50,380
by reading the code is that

00:20:44,550 --> 00:20:52,450
if a thread has a high priority which is

00:20:50,380 --> 00:20:56,170
true if it has not been running for some

00:20:52,450 --> 00:20:58,000
time he will be selected before other

00:20:56,170 --> 00:21:01,390
thread of the same process that's how

00:20:58,000 --> 00:21:06,550
the scheduler world and it's priority

00:21:01,390 --> 00:21:10,030
decrease proportionally to the Tami has

00:21:06,550 --> 00:21:11,740
been executing so as long as his

00:21:10,030 --> 00:21:16,750
priority is high it will be still be

00:21:11,740 --> 00:21:19,630
picked by the scheduler so it can scold

00:21:16,750 --> 00:21:22,450
schedule as much as it wants it will

00:21:19,630 --> 00:21:23,830
still be selected so generally when you

00:21:22,450 --> 00:21:26,470
call schedules ahead I cannot do

00:21:23,830 --> 00:21:28,600
anything I don't want to be executed

00:21:26,470 --> 00:21:33,160
please pick somebody else but in this

00:21:28,600 --> 00:21:35,020
case the scheduler was picking the same

00:21:33,160 --> 00:21:37,180
shredder again and again so you could in

00:21:35,020 --> 00:21:40,810
a loop those nine hundred thousand time

00:21:37,180 --> 00:21:42,670
or even more the same function now one

00:21:40,810 --> 00:21:46,390
could say well then fix the scheduler

00:21:42,670 --> 00:21:49,390
well somehow that's what I did and I had

00:21:46,390 --> 00:21:51,400
a hack to to the function to the

00:21:49,390 --> 00:21:53,140
scheduled function well actually as

00:21:51,400 --> 00:21:56,590
suggested a hack and kitten is how did

00:21:53,140 --> 00:21:58,450
it and is it when a multi-threaded

00:21:56,590 --> 00:22:03,820
program is thread from a multi-threaded

00:21:58,450 --> 00:22:05,050
program and asked to be stopped it

00:22:03,820 --> 00:22:08,050
doesn't want to do anything it could

00:22:05,050 --> 00:22:12,070
shed yield then you change its priority

00:22:08,050 --> 00:22:14,140
to make sure that if another thread was

00:22:12,070 --> 00:22:16,000
blocking it because it was holding a

00:22:14,140 --> 00:22:19,990
data structure or a mutex that the one

00:22:16,000 --> 00:22:21,550
wanted then you want the one that the

00:22:19,990 --> 00:22:26,260
thread which is not being executed with

00:22:21,550 --> 00:22:29,500
a lower priority to run so the way to

00:22:26,260 --> 00:22:32,560
achieve that is to decrease the priority

00:22:29,500 --> 00:22:36,510
of the thread calling scale yield to at

00:22:32,560 --> 00:22:39,820
least the priority of its siblings

00:22:36,510 --> 00:22:44,350
though that works somehow it kind of

00:22:39,820 --> 00:22:47,560
improve Firefox is aged it improved a

00:22:44,350 --> 00:22:50,770
lot of lips thread ports actually

00:22:47,560 --> 00:22:54,850
because most if not all the ports use

00:22:50,770 --> 00:22:58,350
some P thread function and it even

00:22:54,850 --> 00:23:02,820
improved other third party and

00:22:58,350 --> 00:23:05,380
code like Java that rely on on schedule

00:23:02,820 --> 00:23:08,260
but was it really the problem I was

00:23:05,380 --> 00:23:10,510
looking for because if you followed my

00:23:08,260 --> 00:23:13,600
talks to this point I thought that you

00:23:10,510 --> 00:23:16,840
call scale yield and it doesn't what I

00:23:13,600 --> 00:23:20,950
expected so maybe scheduler is wrong and

00:23:16,840 --> 00:23:24,820
to some extent it is but maybe we should

00:23:20,950 --> 00:23:26,710
not come scale in the first place so

00:23:24,820 --> 00:23:29,260
that's how I came up to the real

00:23:26,710 --> 00:23:32,920
solution I said that I start looking in

00:23:29,260 --> 00:23:36,790
Limpy thread and how does that work why

00:23:32,920 --> 00:23:38,530
because when I say I don't want to run

00:23:36,790 --> 00:23:42,250
anymore like please pick somebody else

00:23:38,530 --> 00:23:43,750
how do i I'm guaranteed that the

00:23:42,250 --> 00:23:46,270
somebody else will make progress and

00:23:43,750 --> 00:23:48,190
then I will be continued continuing my

00:23:46,270 --> 00:23:50,230
work after that there's no such thing

00:23:48,190 --> 00:23:52,929
that's what we are this priority problem

00:23:50,230 --> 00:23:55,179
which helped but did not solve it so if

00:23:52,929 --> 00:23:57,880
you like an I would say all the machine

00:23:55,179 --> 00:24:01,120
you could still not use Firefox to play

00:23:57,880 --> 00:24:04,840
your HD video so now I hope you're not

00:24:01,120 --> 00:24:10,770
sleeping now it's time we're going into

00:24:04,840 --> 00:24:10,770
the technical stuff right

00:24:12,210 --> 00:24:19,570
so how and I guess all of you have heard

00:24:16,540 --> 00:24:21,250
of mutexes log and shower stories I'm

00:24:19,570 --> 00:24:23,770
really famous about shower and locks but

00:24:21,250 --> 00:24:26,050
it's not for today for today I'm not

00:24:23,770 --> 00:24:29,590
going to talk about how do you use a

00:24:26,050 --> 00:24:32,200
lock but how you implement a lock that's

00:24:29,590 --> 00:24:33,970
really interesting because generally you

00:24:32,200 --> 00:24:36,400
say oh yeah well I need to protect this

00:24:33,970 --> 00:24:38,380
data structure I go to the toilet so I

00:24:36,400 --> 00:24:41,650
close door turn the lock and nobody can

00:24:38,380 --> 00:24:44,679
enter fine but how do you implement the

00:24:41,650 --> 00:24:47,440
door did you look at it well in software

00:24:44,679 --> 00:24:49,720
there's many way to do how was it in in

00:24:47,440 --> 00:24:53,020
6.1 how was it when when we had that bug

00:24:49,720 --> 00:24:55,900
on on on file for this regression well

00:24:53,020 --> 00:24:57,640
that's what I tried to explain so if you

00:24:55,900 --> 00:25:02,050
don't really understand sorry

00:24:57,640 --> 00:25:04,440
don't hesitate to raise your hand yes

00:25:02,050 --> 00:25:04,440
honey

00:25:04,650 --> 00:25:13,600
yes except enemy okay so the what I'm

00:25:10,450 --> 00:25:17,830
describing here is the pthread mutex

00:25:13,600 --> 00:25:21,910
lock so the best the simpler idea to say

00:25:17,830 --> 00:25:25,360
hey I'm a threat I want to own this lock

00:25:21,910 --> 00:25:28,090
is to say well to write my name Martin

00:25:25,360 --> 00:25:29,530
in the lock so everybody else say oh

00:25:28,090 --> 00:25:30,820
it's Martin you know it's basically what

00:25:29,530 --> 00:25:33,280
you do when you have a party and

00:25:30,820 --> 00:25:34,780
everybody has a glass and you're like

00:25:33,280 --> 00:25:37,570
you write your name on the glass and you

00:25:34,780 --> 00:25:40,360
know people know it's your glass right

00:25:37,570 --> 00:25:41,890
and unlocking it would you best to just

00:25:40,360 --> 00:25:43,750
be washing your name from the glass and

00:25:41,890 --> 00:25:47,710
then someone else can use it right it's

00:25:43,750 --> 00:25:50,290
fine so that's what we were doing but in

00:25:47,710 --> 00:25:53,800
order to make sure in order to make sure

00:25:50,290 --> 00:25:55,810
that I'm the only one writing my name on

00:25:53,800 --> 00:25:57,940
the glass right well I would take the

00:25:55,810 --> 00:26:00,670
glass go to the toilet close the door

00:25:57,940 --> 00:26:02,350
have a look write my name then I can

00:26:00,670 --> 00:26:03,850
open the door and I come back and I'm

00:26:02,350 --> 00:26:05,410
sure I'm the only one because otherwise

00:26:03,850 --> 00:26:06,490
I will fight with Hennig with some glass

00:26:05,410 --> 00:26:09,790
and trying to write my name on it

00:26:06,490 --> 00:26:12,100
doesn't work so the first function we

00:26:09,790 --> 00:26:16,720
enter and that I represented in the

00:26:12,100 --> 00:26:20,050
graph is this lock so okay I grab I grab

00:26:16,720 --> 00:26:22,330
my glass I grab a lot and look Oh is

00:26:20,050 --> 00:26:26,220
there a name written on this glass on

00:26:22,330 --> 00:26:28,480
this mutex by the way if there is one

00:26:26,220 --> 00:26:30,330
because I want still to use this glass

00:26:28,480 --> 00:26:33,400
another no other one well I will wait

00:26:30,330 --> 00:26:34,750
waiting min calling another she's called

00:26:33,400 --> 00:26:37,510
that you have on the right side which is

00:26:34,750 --> 00:26:40,900
Fred slip and I will help that somebody

00:26:37,510 --> 00:26:44,520
will wake me up when somebody wakes me

00:26:40,900 --> 00:26:46,450
up I try to acquire the lock again

00:26:44,520 --> 00:26:48,730
because the function trace lip is

00:26:46,450 --> 00:26:51,840
designed to release the lock then go to

00:26:48,730 --> 00:26:54,460
sleep and then I will start again is

00:26:51,840 --> 00:26:56,830
that is there a name written on this on

00:26:54,460 --> 00:26:59,380
these new types well there isn't

00:26:56,830 --> 00:27:02,860
oh well then I write my name I release

00:26:59,380 --> 00:27:05,260
the lock and now it's mine written so

00:27:02,860 --> 00:27:07,600
that sounds really familiar but what's

00:27:05,260 --> 00:27:11,410
not really clear on this graphic there

00:27:07,600 --> 00:27:12,790
is that on you code your critical

00:27:11,410 --> 00:27:16,899
section actually what you want to

00:27:12,790 --> 00:27:19,309
protect with mutex start after

00:27:16,899 --> 00:27:21,440
so that's the function you call pretend

00:27:19,309 --> 00:27:24,529
meet X like you got a lock then you do

00:27:21,440 --> 00:27:25,759
something and then you unlock it so

00:27:24,529 --> 00:27:29,749
what's the problem with that

00:27:25,759 --> 00:27:34,580
how did I manage to understand that the

00:27:29,749 --> 00:27:38,029
problem was to call scaled yield is that

00:27:34,580 --> 00:27:39,979
first we have a spin lock right so the

00:27:38,029 --> 00:27:41,659
spin lock is basically try to grab the

00:27:39,979 --> 00:27:44,149
lock no you do not grab you try to grab

00:27:41,659 --> 00:27:46,419
the lock and every time you fail you go

00:27:44,149 --> 00:27:48,859
to the kernel and say well please I

00:27:46,419 --> 00:27:52,759
cannot make progress because I cannot

00:27:48,859 --> 00:27:56,509
grab this log so pick somebody else fine

00:27:52,759 --> 00:27:59,840
that can make sense but in this case we

00:27:56,509 --> 00:28:01,909
even don't know if somebody has the new

00:27:59,840 --> 00:28:04,210
mutex or not so you're waiting before

00:28:01,909 --> 00:28:09,619
even knowing if you have to wait or not

00:28:04,210 --> 00:28:11,149
that might be confusing right you want

00:28:09,619 --> 00:28:12,950
to project data structure so you want to

00:28:11,149 --> 00:28:22,099
grab a lock and now you need to grab a

00:28:12,950 --> 00:28:23,419
lock to grab a lock that's confusing so

00:28:22,099 --> 00:28:25,879
the first primitive that we have to

00:28:23,419 --> 00:28:28,909
build this parameter clock is a spin

00:28:25,879 --> 00:28:31,849
lock and just we don't know if the

00:28:28,909 --> 00:28:34,190
Dmytryk is hold or not and we kept some

00:28:31,849 --> 00:28:37,340
time checking oh can I check can I check

00:28:34,190 --> 00:28:40,129
can I check and actually Mozilla was

00:28:37,340 --> 00:28:42,529
using a lot of try lock which is

00:28:40,129 --> 00:28:45,379
basically the same you want to look at

00:28:42,529 --> 00:28:47,570
the mutex is somebody holding it and if

00:28:45,379 --> 00:28:49,399
there is you say well it's it's busy

00:28:47,570 --> 00:28:51,649
somebody has the line so basically you

00:28:49,399 --> 00:28:53,899
were busy waiting just to check if

00:28:51,649 --> 00:28:55,669
someone has the lock so you were

00:28:53,899 --> 00:28:59,599
creating extra contention of top and the

00:28:55,669 --> 00:29:02,330
contention now the problem of that is

00:28:59,599 --> 00:29:03,679
what I've written done which we are what

00:29:02,330 --> 00:29:05,359
we are interested in is that if you have

00:29:03,679 --> 00:29:06,529
a contention I mean if you don't have

00:29:05,359 --> 00:29:07,729
contention you don't not have any

00:29:06,529 --> 00:29:09,470
problem at all because you could have

00:29:07,729 --> 00:29:12,619
contention if you don't have a simply

00:29:09,470 --> 00:29:15,950
system you don't have problems now in

00:29:12,619 --> 00:29:19,190
the continent ContentID case you might

00:29:15,950 --> 00:29:23,869
end up doing as many schedule and or as

00:29:19,190 --> 00:29:26,509
many atomic operation as well you've

00:29:23,869 --> 00:29:29,590
been executed or as the scheduler say

00:29:26,509 --> 00:29:29,590
what try again try again

00:29:30,309 --> 00:29:36,710
so what can we do with that well maybe

00:29:34,549 --> 00:29:38,149
you've studied that what you want is

00:29:36,710 --> 00:29:40,159
they say well if I cannot grab the lock

00:29:38,149 --> 00:29:41,059
well just go to sleep and tell me later

00:29:40,159 --> 00:29:44,570
what I want

00:29:41,059 --> 00:29:46,389
there is many solution for that and I

00:29:44,570 --> 00:29:48,649
say well I'm not going to reinvent mine

00:29:46,389 --> 00:29:50,929
because I want to get the job done

00:29:48,649 --> 00:29:52,700
quickly and I want other people to

00:29:50,929 --> 00:29:56,960
contribute so I went for well-known

00:29:52,700 --> 00:29:59,720
solution and went for solution based on

00:29:56,960 --> 00:30:01,570
CX socio text you might have heard about

00:29:59,720 --> 00:30:04,700
it

00:30:01,570 --> 00:30:08,629
some say it's coming from bos

00:30:04,700 --> 00:30:11,059
it's different name it's well documented

00:30:08,629 --> 00:30:14,750
and there's many option and many subsets

00:30:11,059 --> 00:30:17,210
but basically in the implementation we

00:30:14,750 --> 00:30:21,289
have on open BSD right now the way we

00:30:17,210 --> 00:30:25,039
use it are its the diagram of the graph

00:30:21,289 --> 00:30:29,090
on the right cylinders so the difference

00:30:25,039 --> 00:30:32,600
is that you rely on an atomic operation

00:30:29,090 --> 00:30:35,259
and if the atomic operation fails you

00:30:32,600 --> 00:30:37,879
know that somebody is running the mutex

00:30:35,259 --> 00:30:40,039
so you don't need to spin loop spin up

00:30:37,879 --> 00:30:42,980
you just do one atomic operation and no

00:30:40,039 --> 00:30:45,649
skid you and then ah somebody has a

00:30:42,980 --> 00:30:47,690
mutex somebody wrote his name on the

00:30:45,649 --> 00:30:49,970
glass right so please tell me it

00:30:47,690 --> 00:30:52,730
potatoes guy with a few texts Cisco

00:30:49,970 --> 00:30:56,090
please wake me up when you finish with

00:30:52,730 --> 00:30:57,409
the glass when it wakes you up you still

00:30:56,090 --> 00:30:59,059
have to do another to make a person to

00:30:57,409 --> 00:31:01,610
make sure nobody stole the glass between

00:30:59,059 --> 00:31:05,779
you will awaken and you really check it

00:31:01,610 --> 00:31:07,460
and if nobody wrote his name well nobody

00:31:05,779 --> 00:31:10,639
took the glass and it's for you and you

00:31:07,460 --> 00:31:13,750
have it now so the really interesting

00:31:10,639 --> 00:31:17,059
here at that

00:31:13,750 --> 00:31:19,279
well you read is you you really reduce

00:31:17,059 --> 00:31:20,929
the number of of Cisco and atomic

00:31:19,279 --> 00:31:24,080
operation in the continuity case which

00:31:20,929 --> 00:31:26,649
was the problem we had all passes the

00:31:24,080 --> 00:31:29,539
problem I experienced with Firefox and

00:31:26,649 --> 00:31:32,169
the problem that created like a snowball

00:31:29,539 --> 00:31:36,350
effect with the scheduler we have and

00:31:32,169 --> 00:31:37,789
this new solution which is not new

00:31:36,350 --> 00:31:40,399
actually this is very like just a new

00:31:37,789 --> 00:31:41,360
implementation solve a lot of latency

00:31:40,399 --> 00:31:46,520
problem for

00:31:41,360 --> 00:31:49,760
Deportes so why did I go for that well I

00:31:46,520 --> 00:31:52,490
kind of explained but there's a little

00:31:49,760 --> 00:31:55,250
of documentation my time is limited I

00:31:52,490 --> 00:31:56,540
want to solve the issue that I want to

00:31:55,250 --> 00:31:59,780
watch a video I don't want to reinvent

00:31:56,540 --> 00:32:01,250
something that already exists and it's

00:31:59,780 --> 00:32:03,230
already complicated if you have to

00:32:01,250 --> 00:32:06,080
really implement the Cisco if you have

00:32:03,230 --> 00:32:08,630
to rewrite the library bits without a

00:32:06,080 --> 00:32:11,059
real debugger working so if I can rely

00:32:08,630 --> 00:32:16,429
on existing tests well it helps that's

00:32:11,059 --> 00:32:18,320
free software I like it now of course

00:32:16,429 --> 00:32:22,040
there's much more left to do the

00:32:18,320 --> 00:32:23,720
solution is better right now this

00:32:22,040 --> 00:32:27,830
solution that is described with the

00:32:23,720 --> 00:32:31,070
mutex is on enable on on I 26 I'm 64 and

00:32:27,830 --> 00:32:32,840
mips64 architecture I think it's a

00:32:31,070 --> 00:32:35,690
matter of testing and maybe finding the

00:32:32,840 --> 00:32:37,820
remaining books and there is a challenge

00:32:35,690 --> 00:32:39,650
for some architecture that do not

00:32:37,820 --> 00:32:44,270
provide the atomic operation this

00:32:39,650 --> 00:32:45,350
solution relies on but other operating

00:32:44,270 --> 00:32:49,750
systems solve that

00:32:45,350 --> 00:32:53,000
so there's possible options and now I'm

00:32:49,750 --> 00:32:57,200
I concentrate myself on the most

00:32:53,000 --> 00:32:59,210
critical part of the leap fifth library

00:32:57,200 --> 00:33:01,070
the one that were really contended and

00:32:59,210 --> 00:33:04,669
used by most of the program we can

00:33:01,070 --> 00:33:06,919
continue and clean that and I can come

00:33:04,669 --> 00:33:09,169
back to the scheduler because now that

00:33:06,919 --> 00:33:11,059
the bottleneck the real bottleneck has

00:33:09,169 --> 00:33:13,100
been fixed in new zealand we are

00:33:11,059 --> 00:33:14,150
exposing a new bottleneck yes software

00:33:13,100 --> 00:33:17,990
is never finished you always find

00:33:14,150 --> 00:33:20,799
important so what did I learn with that

00:33:17,990 --> 00:33:22,970
is like it's it's kind of my story and I

00:33:20,799 --> 00:33:26,059
wanted to share it because I think it's

00:33:22,970 --> 00:33:29,210
more important to explain how I do stuff

00:33:26,059 --> 00:33:32,120
and it's not magical stuff and it's not

00:33:29,210 --> 00:33:35,390
also a complicated stuff that lets you

00:33:32,120 --> 00:33:38,600
go step to step I do mistake and I have

00:33:35,390 --> 00:33:40,100
to live with that so you always will

00:33:38,600 --> 00:33:43,010
always have a problem and no matter who

00:33:40,100 --> 00:33:44,390
you are talking it's not good enough and

00:33:43,010 --> 00:33:46,669
and they always to change it but

00:33:44,390 --> 00:33:48,169
actually what people want and when I go

00:33:46,669 --> 00:33:49,910
to some concert if they want the problem

00:33:48,169 --> 00:33:52,910
to be solved no matter how you solve it

00:33:49,910 --> 00:33:54,370
right I like to fix free software so I

00:33:52,910 --> 00:33:57,860
do that

00:33:54,370 --> 00:34:01,150
gathering data is like a black box

00:33:57,860 --> 00:34:04,270
analysis what I was saying is I think a

00:34:01,150 --> 00:34:06,740
method which is not very well practice

00:34:04,270 --> 00:34:08,810
either in the professional IT were in

00:34:06,740 --> 00:34:10,399
general I was doing that with a lot of

00:34:08,810 --> 00:34:11,950
people today and it's really nice that

00:34:10,399 --> 00:34:15,110
we have all those people talking about

00:34:11,950 --> 00:34:18,169
trying to performance tool and because

00:34:15,110 --> 00:34:19,250
when you car does not work you don't get

00:34:18,169 --> 00:34:21,050
buy a new car

00:34:19,250 --> 00:34:22,580
well you look at what's not working in

00:34:21,050 --> 00:34:26,270
your car or you bring it somebody and

00:34:22,580 --> 00:34:28,070
and we have to do that we might not know

00:34:26,270 --> 00:34:30,050
how to do it properly but there's many

00:34:28,070 --> 00:34:33,350
tools that are available since 30 years

00:34:30,050 --> 00:34:34,790
and they already fulfill a lot even if

00:34:33,350 --> 00:34:36,919
you don't have Detroit even if you don't

00:34:34,790 --> 00:34:41,000
have a really big er you can find most

00:34:36,919 --> 00:34:43,580
of the stuff now I make a lot of guests

00:34:41,000 --> 00:34:45,260
I've tried not to make them but I still

00:34:43,580 --> 00:34:47,300
make them and it's really complicated

00:34:45,260 --> 00:34:49,790
when you make a guess you make a diff

00:34:47,300 --> 00:34:52,820
that sounds great and it hides the

00:34:49,790 --> 00:34:54,619
problem it's it's it's a problem because

00:34:52,820 --> 00:34:56,240
it might solve your problem now but

00:34:54,619 --> 00:34:57,800
another developer will come in five year

00:34:56,240 --> 00:34:59,630
and will hate me because I've hiding the

00:34:57,800 --> 00:35:01,910
real problem and now he has to undo my

00:34:59,630 --> 00:35:05,180
work and we do something else and I can

00:35:01,910 --> 00:35:07,190
tell a lot about that so finding the

00:35:05,180 --> 00:35:09,230
bottleneck is generally do a hard part

00:35:07,190 --> 00:35:11,390
about it so it's greater of great tools

00:35:09,230 --> 00:35:15,770
but even simpler tools can help with

00:35:11,390 --> 00:35:18,800
that and I love to fix them and not

00:35:15,770 --> 00:35:21,290
everybody can fix or like to fix them if

00:35:18,800 --> 00:35:22,910
I could just spend my time fixing the

00:35:21,290 --> 00:35:24,350
problem I would be even more happier

00:35:22,910 --> 00:35:26,420
because I don't have to find the problem

00:35:24,350 --> 00:35:28,820
right so I hope that you can learn from

00:35:26,420 --> 00:35:30,470
my experience and also find the problem

00:35:28,820 --> 00:35:33,770
and then tell me about this form can you

00:35:30,470 --> 00:35:36,740
fix it for me and well I think it's it's

00:35:33,770 --> 00:35:39,170
it's kind of another purse where now yes

00:35:36,740 --> 00:35:41,750
we need a dynamic dresser I encourage

00:35:39,170 --> 00:35:43,220
you to come to the conference of Jasper

00:35:41,750 --> 00:35:46,280
tomorrow because we are working on that

00:35:43,220 --> 00:35:49,760
for the OpenBSD and we are proud of what

00:35:46,280 --> 00:35:52,130
we're doing and we like it so come see

00:35:49,760 --> 00:35:52,640
what we have to say thank you for

00:35:52,130 --> 00:35:56,510
attention

00:35:52,640 --> 00:35:58,490
oh I went to first in a pig to exit well

00:35:56,510 --> 00:36:01,640
so I'm keeping a blog I'm trying to

00:35:58,490 --> 00:36:04,310
write article and explaining how I do

00:36:01,640 --> 00:36:05,990
stuff how we do stuff on OpenBSD and you

00:36:04,310 --> 00:36:07,070
might be interesting on particular

00:36:05,990 --> 00:36:08,720
subject

00:36:07,070 --> 00:36:11,720
- Mikey if I can make that more

00:36:08,720 --> 00:36:15,380
accessible like sexy but also accessible

00:36:11,720 --> 00:36:18,070
to you well come talk to me now if you

00:36:15,380 --> 00:36:18,070
have any question

00:36:20,520 --> 00:36:28,789
[Applause]

00:36:56,369 --> 00:37:06,720
I just implemented them but renewing as

00:37:03,089 --> 00:37:09,510
well now renewing is kind of tricky to

00:37:06,720 --> 00:37:10,980
use correctly and I had a

00:37:09,510 --> 00:37:13,530
work-in-progress version for the

00:37:10,980 --> 00:37:15,570
condition viable but since it's not yet

00:37:13,530 --> 00:37:25,800
the bottleneck I don't want to spend too

00:37:15,570 --> 00:37:28,160
much time on that why not sure any other

00:37:25,800 --> 00:37:28,160
question

00:37:46,190 --> 00:37:53,010
well nothing prevented it but I find

00:37:50,250 --> 00:37:57,060
bisecting Firefox code really

00:37:53,010 --> 00:37:59,790
complicated so for me if I have to debug

00:37:57,060 --> 00:38:03,630
a Firefox or proprietary application

00:37:59,790 --> 00:38:06,750
it's the same it's like too big and and

00:38:03,630 --> 00:38:09,210
I don't know if I thought at that time

00:38:06,750 --> 00:38:10,890
like Ted wrote an article and I got

00:38:09,210 --> 00:38:13,170
contacted by a Firefox developer will

00:38:10,890 --> 00:38:14,490
tell me well maybe we might help but I

00:38:13,170 --> 00:38:15,960
don't know well I don't know where we

00:38:14,490 --> 00:38:17,940
have to look at right and somebody has

00:38:15,960 --> 00:38:19,230
to bisect and compile Firefox and you

00:38:17,940 --> 00:38:22,740
know how much time it takes every time

00:38:19,230 --> 00:38:24,650
you compile it right and the part of the

00:38:22,740 --> 00:38:27,960
approach and the talk I was giving is

00:38:24,650 --> 00:38:30,960
exactly yes you can always buy a sec but

00:38:27,960 --> 00:38:33,060
bisecting only gives you part of the

00:38:30,960 --> 00:38:35,730
solution so I can give you another

00:38:33,060 --> 00:38:39,720
example I was talking we had like those

00:38:35,730 --> 00:38:42,870
security guards found some weeks ago by

00:38:39,720 --> 00:38:46,350
a bunch poodle and as a measure we

00:38:42,870 --> 00:38:49,140
decide to remove a similar code that we

00:38:46,350 --> 00:38:53,450
found suspect and I removed some of

00:38:49,140 --> 00:38:56,000
those code in in a USB driver and

00:38:53,450 --> 00:38:59,610
suddenly I introduced a regression and

00:38:56,000 --> 00:39:01,500
people did bisect my chain and said your

00:38:59,610 --> 00:39:03,180
change is wrong but I still could not

00:39:01,500 --> 00:39:05,100
figure out okay now I back out the

00:39:03,180 --> 00:39:10,290
change but I still what's the problem

00:39:05,100 --> 00:39:12,120
and I we managed with Kate race and and

00:39:10,290 --> 00:39:15,120
by looking at what's happening to see

00:39:12,120 --> 00:39:17,700
how it's it's blocking it should not

00:39:15,120 --> 00:39:19,170
blocks there so when you run top you see

00:39:17,700 --> 00:39:22,080
it's blocking there it should not block

00:39:19,170 --> 00:39:24,990
there and bicycling does not give you

00:39:22,080 --> 00:39:27,840
this information so I think we should

00:39:24,990 --> 00:39:29,550
start or continue to learn this tool

00:39:27,840 --> 00:39:32,690
what's happening in the system and not

00:39:29,550 --> 00:39:32,690
just focus on the code

00:39:36,380 --> 00:39:40,250
or more questions

00:39:43,369 --> 00:40:13,460
I was really sad not user-facing

00:40:09,200 --> 00:40:16,519
problems might be even easier let me

00:40:13,460 --> 00:40:18,440
explain you want what you need basically

00:40:16,519 --> 00:40:20,450
is a way what the approach that I was

00:40:18,440 --> 00:40:22,849
describing and I'm trying to apply is

00:40:20,450 --> 00:40:25,099
the black bloc black box approach right

00:40:22,849 --> 00:40:28,220
you consider you software or you

00:40:25,099 --> 00:40:31,279
appliance on whatever as a black box and

00:40:28,220 --> 00:40:34,819
you say well when I do that I have a

00:40:31,279 --> 00:40:37,190
problem so what do you mean when I do

00:40:34,819 --> 00:40:39,160
that that's the problem we have to

00:40:37,190 --> 00:40:43,549
answer so if you for example am

00:40:39,160 --> 00:40:46,730
measuring a firewall application and you

00:40:43,549 --> 00:40:48,109
say ah look I configure my system I send

00:40:46,730 --> 00:40:51,470
that traffic and when that's in more

00:40:48,109 --> 00:40:55,700
than that many packet per second it

00:40:51,470 --> 00:40:59,140
start doing some crazy stuff right so

00:40:55,700 --> 00:41:01,579
now you have like a reproducible

00:40:59,140 --> 00:41:04,339
scenario that's a really important part

00:41:01,579 --> 00:41:07,609
so you try to build a scenario that you

00:41:04,339 --> 00:41:09,920
can repeat and that you can monitor and

00:41:07,609 --> 00:41:12,079
when you build this scenario you have to

00:41:09,920 --> 00:41:15,559
make sure you don't introduce too much

00:41:12,079 --> 00:41:17,210
noise in it in the case of Firefox I try

00:41:15,559 --> 00:41:20,930
to build a really small scenario just

00:41:17,210 --> 00:41:23,089
moving the mouse right but when you

00:41:20,930 --> 00:41:24,559
black forwarding packets maybe you want

00:41:23,089 --> 00:41:27,430
to make sure you forward packet for

00:41:24,559 --> 00:41:30,769
enough time so that you have like a

00:41:27,430 --> 00:41:32,839
stable flow that trigger the problems

00:41:30,769 --> 00:41:35,480
that you don't have interference right

00:41:32,839 --> 00:41:36,920
and once you have your senior are you

00:41:35,480 --> 00:41:40,090
and you can reproduce it then you start

00:41:36,920 --> 00:41:47,130
watching the matrix

00:41:40,090 --> 00:41:47,130
[Music]

00:41:48,080 --> 00:42:08,910
it's not an assumption it's the best

00:41:50,460 --> 00:42:10,830
beginning of the problem so I think we

00:42:08,910 --> 00:42:13,920
should always look for it so when you

00:42:10,830 --> 00:42:15,720
you work for performance it's it's in my

00:42:13,920 --> 00:42:18,240
opinion in the way I work with that it's

00:42:15,720 --> 00:42:20,760
an every week or every day work so you

00:42:18,240 --> 00:42:22,860
have to allocate some time and to start

00:42:20,760 --> 00:42:24,930
gathering data to have more knowledge

00:42:22,860 --> 00:42:27,720
what's happening what does my

00:42:24,930 --> 00:42:29,700
application do which Cisco do they do

00:42:27,720 --> 00:42:32,340
how much time do you spend and and if

00:42:29,700 --> 00:42:34,140
you say oh look I have some regression

00:42:32,340 --> 00:42:36,390
test regression performance test and and

00:42:34,140 --> 00:42:38,370
this week it's much better than last

00:42:36,390 --> 00:42:40,110
week and you have data and you start

00:42:38,370 --> 00:42:42,270
with why Oh this week is worse than last

00:42:40,110 --> 00:42:44,400
week right so I would say you should

00:42:42,270 --> 00:42:46,620
always look for it not maybe the full

00:42:44,400 --> 00:42:50,400
week but take one hour to what does my

00:42:46,620 --> 00:42:52,620
program do and if you you do that new

00:42:50,400 --> 00:42:54,900
development process then you will create

00:42:52,620 --> 00:42:56,640
awareness and that's the most

00:42:54,900 --> 00:42:58,440
complicated thing because you cannot

00:42:56,640 --> 00:43:00,150
address performance by just one day oh

00:42:58,440 --> 00:43:02,130
now I want hundred percent like like

00:43:00,150 --> 00:43:04,530
generally manager wants well this model

00:43:02,130 --> 00:43:06,390
will do performance all great no you

00:43:04,530 --> 00:43:09,980
have to build awareness around the time

00:43:06,390 --> 00:43:09,980
to look all the time what you're doing

00:43:15,850 --> 00:43:18,840
thank you very much

00:43:19,010 --> 00:43:23,479

YouTube URL: https://www.youtube.com/watch?v=6Of5FSOzPjw


