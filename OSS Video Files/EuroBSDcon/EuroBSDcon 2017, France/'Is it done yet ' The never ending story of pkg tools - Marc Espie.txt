Title: 'Is it done yet ' The never ending story of pkg tools - Marc Espie
Publication date: 2019-10-15
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

Some programs just keep evolving. Each time you think you’re finished
with them, some new ideas come around the corner.
And things keep accreting. The only reason such a program may stop
evolving is because it’s dead, drowned in its own misfeatures.

This talk will look at ways we managed complexity in the past, successes and
failures at keeping enough compatibility for migrations to be less painful.

And also, a roadmap to the future, how we set priorities for what we want
while still keeping the pkg tools in working condition, the current challenge
being to get things faster while still keeping them mostly bug-free.


Speaker biography:

Marc Espie has been an OpenBSD developer for about twenty years, in charge
of the ports and packages infrastructure for over ten years.
When he’s not coding, he’s also a teacher and researcher at Epita’s
Systems and security Lab, trying to teach young pups how to write code that
isn’t complete crap.
Captions: 
	00:00:00,060 --> 00:00:04,470
so yeah the title is like different

00:00:02,129 --> 00:00:08,130
because there's a funny story where

00:00:04,470 --> 00:00:10,650
because usually you send your conference

00:00:08,130 --> 00:00:13,980
proposal about four months in advance

00:00:10,650 --> 00:00:16,020
and sometimes you forget a little bit

00:00:13,980 --> 00:00:19,650
what you were going to talk about which

00:00:16,020 --> 00:00:23,900
is exactly what happened so I figure it

00:00:19,650 --> 00:00:26,880
out because Morris I know the plan and

00:00:23,900 --> 00:00:29,699
this is this talk is a bit special

00:00:26,880 --> 00:00:33,390
because it's more about plans and how to

00:00:29,699 --> 00:00:36,239
try to see your head than just normal

00:00:33,390 --> 00:00:38,520
details so this is why this is mostly

00:00:36,239 --> 00:00:40,770
with some title actually because

00:00:38,520 --> 00:00:42,570
whenever running story of page tools is

00:00:40,770 --> 00:00:45,750
more or less but we have a system that

00:00:42,570 --> 00:00:48,270
is in production and we have to keep

00:00:45,750 --> 00:00:52,020
evolving and not break things too much

00:00:48,270 --> 00:00:56,870
so what users while both of them keep

00:00:52,020 --> 00:01:00,809
using OpenBSD actually so fernback again

00:00:56,870 --> 00:01:05,939
the idea is that sometimes you try to

00:01:00,809 --> 00:01:09,299
change stuff and sometimes it fails in

00:01:05,939 --> 00:01:13,229
that specific case about a year ago I

00:01:09,299 --> 00:01:16,830
broke package that intentionally like at

00:01:13,229 --> 00:01:20,790
some point in time you try to use

00:01:16,830 --> 00:01:24,420
package that and either you had all

00:01:20,790 --> 00:01:26,850
packaged tools and you didn't work or

00:01:24,420 --> 00:01:29,939
you had the new package tools and all

00:01:26,850 --> 00:01:34,820
packages and it don't work either like

00:01:29,939 --> 00:01:38,130
this is what you got six-zero when you

00:01:34,820 --> 00:01:40,740
try to install an old package it was

00:01:38,130 --> 00:01:43,320
telling you but actually the fact that

00:01:40,740 --> 00:01:45,420
you had was a completely inside the cage

00:01:43,320 --> 00:01:50,490
which was completely false because it

00:01:45,420 --> 00:01:53,040
was signed but we built it so this does

00:01:50,490 --> 00:01:55,140
not happen very often various very good

00:01:53,040 --> 00:02:00,600
reason for that one and I'm going to go

00:01:55,140 --> 00:02:04,439
into details instance and then I'm going

00:02:00,600 --> 00:02:07,500
to talk about why this had to happen and

00:02:04,439 --> 00:02:10,190
why I'm trying very hard for it's never

00:02:07,500 --> 00:02:10,190
to happen again

00:02:12,660 --> 00:02:20,050
so what actually happens in that case is

00:02:17,220 --> 00:02:22,270
that we changed completely away

00:02:20,050 --> 00:02:25,510
signature worked in incompatible ways

00:02:22,270 --> 00:02:26,290
and so all tools couldn't cope with a

00:02:25,510 --> 00:02:29,080
new one

00:02:26,290 --> 00:02:31,209
which is always expected like you add

00:02:29,080 --> 00:02:33,970
some functionality and then you discover

00:02:31,209 --> 00:02:39,130
that it doesn't work with all tools yeah

00:02:33,970 --> 00:02:43,230
sure but the old ones when you tools you

00:02:39,130 --> 00:02:43,230
don't work with the own package which is

00:02:44,250 --> 00:02:49,420
all start signatures so if you want to

00:02:47,890 --> 00:02:56,500
look at real details you're going to

00:02:49,420 --> 00:02:57,940
find it in the history of ok the basic

00:02:56,500 --> 00:03:00,640
idea is but we want to be able to

00:02:57,940 --> 00:03:03,459
install packages on the fly so we take

00:03:00,640 --> 00:03:06,610
some every file storage exams inside

00:03:03,459 --> 00:03:10,209
manifest file a packing list and the

00:03:06,610 --> 00:03:18,250
packing list itself is signed this adds

00:03:10,209 --> 00:03:20,920
a case I have a picture here and I

00:03:18,250 --> 00:03:26,489
probably have a picture here on that

00:03:20,920 --> 00:03:29,680
monitor definitely yours thank you so

00:03:26,489 --> 00:03:32,650
the benefits are that you get on the

00:03:29,680 --> 00:03:35,170
flightcheck you can stop extracting an

00:03:32,650 --> 00:03:39,670
achieve an archive before we can't

00:03:35,170 --> 00:03:42,790
without do you think any security there

00:03:39,670 --> 00:03:45,609
are some drawbacks as well one of which

00:03:42,790 --> 00:03:47,950
is that you have to rewrite the package

00:03:45,609 --> 00:03:49,570
for signing which is to be real slow

00:03:47,950 --> 00:03:52,209
because you had to unpack everything

00:03:49,570 --> 00:03:54,370
sign the packing list and put everything

00:03:52,209 --> 00:03:57,579
back again I talked about that more

00:03:54,370 --> 00:04:03,850
later probably if I don't forget and

00:03:57,579 --> 00:04:08,760
ferment rebecky ask you pass everything

00:04:03,850 --> 00:04:08,760
to change it first welcome

00:04:09,720 --> 00:04:21,280
hello yeah what everything does not work

00:04:18,239 --> 00:04:23,889
you have to pass everything to change it

00:04:21,280 --> 00:04:26,919
or some kind of change it before you

00:04:23,889 --> 00:04:29,710
check anything and once you start

00:04:26,919 --> 00:04:32,220
looking at the unpacking code you

00:04:29,710 --> 00:04:35,950
realize that it's almost impossible but

00:04:32,220 --> 00:04:38,800
s code is safe but we have to be books

00:04:35,950 --> 00:04:43,720
in a library in any version of that

00:04:38,800 --> 00:04:46,510
library and while you could before and

00:04:43,720 --> 00:04:48,880
try to edit it and try to fix it but you

00:04:46,510 --> 00:04:51,600
can also be lazy and say okay who gives

00:04:48,880 --> 00:04:56,350
a we're going to get to rid of that

00:04:51,600 --> 00:04:59,160
so you deal NuStar we are going to stop

00:04:56,350 --> 00:05:04,570
the signature itself outside

00:04:59,160 --> 00:05:08,590
so that we get rid of attention because

00:05:04,570 --> 00:05:12,479
then we're never going to pass any

00:05:08,590 --> 00:05:16,330
unchecked information to unpacking and

00:05:12,479 --> 00:05:17,919
of course we still have to trust some

00:05:16,330 --> 00:05:20,919
people we have to trust our fellow

00:05:17,919 --> 00:05:25,300
developers to write packages but don't

00:05:20,919 --> 00:05:31,690
fool with Trojans and everything but

00:05:25,300 --> 00:05:33,820
this should happen usually and ok when

00:05:31,690 --> 00:05:36,070
we don't care if AG zip code is

00:05:33,820 --> 00:05:41,740
completely broken because we're only

00:05:36,070 --> 00:05:43,860
with a passing trusted attitude sign not

00:05:41,740 --> 00:05:47,010
which is important for rest of you talk

00:05:43,860 --> 00:05:49,389
we are not actually extending anything

00:05:47,010 --> 00:05:52,120
like if you look at register form at

00:05:49,389 --> 00:05:55,860
first actually a common field which we

00:05:52,120 --> 00:05:59,680
are using to put our signatures so that

00:05:55,860 --> 00:06:03,160
still appears to be perfectly normal

00:05:59,680 --> 00:06:05,050
gzip files from your side if you don't

00:06:03,160 --> 00:06:07,539
have any package tools you can still

00:06:05,050 --> 00:06:10,300
know the new pen bsd package and it will

00:06:07,539 --> 00:06:13,060
look as a perfectly normal

00:06:10,300 --> 00:06:15,070
gzip tar file eventhough there are some

00:06:13,060 --> 00:06:20,470
very interesting things going on inside

00:06:15,070 --> 00:06:20,950
it so it's a typical signature on the

00:06:20,470 --> 00:06:23,830
news

00:06:20,950 --> 00:06:27,100
like if you look in the comments field

00:06:23,830 --> 00:06:28,450
of any OpenBSD bike engine on remove all

00:06:27,100 --> 00:06:32,950
these days you're going to see something

00:06:28,450 --> 00:06:38,620
like that very interested common part is

00:06:32,950 --> 00:06:41,170
they do sports but yeah well does not

00:06:38,620 --> 00:06:45,100
matter just the wave X signifies

00:06:41,170 --> 00:06:50,170
producing signatures it's going to tell

00:06:45,100 --> 00:06:53,370
you but it's using that specific e like

00:06:50,170 --> 00:06:56,710
we don't really have any certificate

00:06:53,370 --> 00:06:58,690
chain trust at the OpenBSD we don't

00:06:56,710 --> 00:07:00,700
really care about that ins complicated

00:06:58,690 --> 00:07:03,010
and gets wrong all the time so basically

00:07:00,700 --> 00:07:05,410
any K that's installed in the right

00:07:03,010 --> 00:07:09,130
directory is going to be considered as a

00:07:05,410 --> 00:07:11,620
value k that's it so it's outside what

00:07:09,130 --> 00:07:18,130
I'm doing I'm not very well for that one

00:07:11,620 --> 00:07:20,230
and then we have lists of keywords just

00:07:18,130 --> 00:07:22,420
so because we know that things are going

00:07:20,230 --> 00:07:25,870
to change at some point so we have to

00:07:22,420 --> 00:07:27,880
provide for the future like here we're

00:07:25,870 --> 00:07:29,680
going to say that we are using this

00:07:27,880 --> 00:07:33,130
algorithm for now though as some

00:07:29,680 --> 00:07:35,230
discussion with Neddie like which

00:07:33,130 --> 00:07:36,970
algorithm is the best for us like we

00:07:35,230 --> 00:07:40,150
want to have something which is which

00:07:36,970 --> 00:07:44,800
gonna be small one and fifty fifty six

00:07:40,150 --> 00:07:49,170
bytes sorry is enough but shall 512

00:07:44,800 --> 00:07:53,830
flash 256 is apparently the best way to

00:07:49,170 --> 00:07:56,140
do check sums in almost all you start

00:07:53,830 --> 00:07:59,020
out with these days on wooden

00:07:56,140 --> 00:08:01,030
architectures and then we have block

00:07:59,020 --> 00:08:05,170
sizes because we still want to be able

00:08:01,030 --> 00:08:09,070
to extract stuff formula Phi so looking

00:08:05,170 --> 00:08:12,430
at packages we decided that 64 kilobytes

00:08:09,070 --> 00:08:14,650
was probably right size fortunately so

00:08:12,430 --> 00:08:18,070
this is a major departure from what was

00:08:14,650 --> 00:08:20,500
going on before as we no longer

00:08:18,070 --> 00:08:24,040
check some individual files we just

00:08:20,500 --> 00:08:27,760
check some compressed

00:08:24,040 --> 00:08:31,090
gzipstream and as soon as it's actually

00:08:27,760 --> 00:08:33,289
checked to be to be okay to have the

00:08:31,090 --> 00:08:37,550
right signature we can

00:08:33,289 --> 00:08:40,759
to pick up as father it's perfectly safe

00:08:37,550 --> 00:08:48,949
unless someone manages to break one of

00:08:40,759 --> 00:08:51,680
our cryptographic algorithms so why does

00:08:48,949 --> 00:08:56,329
it break the form of action of

00:08:51,680 --> 00:08:58,040
signatures in baggage ad what's much

00:08:56,329 --> 00:09:00,319
more friendly from a coding point of

00:08:58,040 --> 00:09:03,350
view because everything was done inside

00:09:00,319 --> 00:09:06,259
the package at proper so you could have

00:09:03,350 --> 00:09:08,389
design checks and DeSanto messages like

00:09:06,259 --> 00:09:11,019
you unpacked the packing list and you

00:09:08,389 --> 00:09:14,899
see without sign or not and you can even

00:09:11,019 --> 00:09:17,810
ask the user whether they want to add

00:09:14,899 --> 00:09:20,480
them inside package on that now we've

00:09:17,810 --> 00:09:23,329
you wanna like adjourn no longer knows

00:09:20,480 --> 00:09:25,940
anything but mostly about signatures it

00:09:23,329 --> 00:09:29,600
passes everything to not side program

00:09:25,940 --> 00:09:32,480
signified which is going to check the

00:09:29,600 --> 00:09:34,970
archive and it's all nothing like

00:09:32,480 --> 00:09:37,610
signify is going to give you an error

00:09:34,970 --> 00:09:40,040
message that says I haven't found any

00:09:37,610 --> 00:09:42,800
signature I haven't found any valid

00:09:40,040 --> 00:09:47,510
signature and in that case that's all

00:09:42,800 --> 00:09:50,690
but package ad has to say about it hence

00:09:47,510 --> 00:09:52,399
the research well this is this was your

00:09:50,690 --> 00:09:56,060
first mention of a message it's a bit of

00:09:52,399 --> 00:09:58,040
a stupid message I stumbled upon

00:09:56,060 --> 00:10:03,199
something similar during my last

00:09:58,040 --> 00:10:06,079
vacation like I don't know if you can

00:10:03,199 --> 00:10:09,319
really see that picture but this is

00:10:06,079 --> 00:10:15,860
concrete right and you have this sign

00:10:09,319 --> 00:10:17,870
that says forbidden grass so this is a

00:10:15,860 --> 00:10:27,500
kind of a narrow message that doesn't

00:10:17,870 --> 00:10:29,930
mean anything in that case so breaking

00:10:27,500 --> 00:10:33,769
things was a conscious decision usually

00:10:29,930 --> 00:10:36,649
we try not to break things but in that

00:10:33,769 --> 00:10:40,670
case we decided eventhough there is no

00:10:36,649 --> 00:10:45,200
security hole in jessup for now but it

00:10:40,670 --> 00:10:47,750
was best to for free deprecated we old

00:10:45,200 --> 00:10:52,279
signature process and only she bought

00:10:47,750 --> 00:10:55,130
the new ones after all this is OpenBSD

00:10:52,279 --> 00:10:58,940
so usually when we have a choice between

00:10:55,130 --> 00:11:01,339
more security and more usability we

00:10:58,940 --> 00:11:07,850
decide to err on the side of security as

00:11:01,339 --> 00:11:18,410
usual this kind of stuff actually

00:11:07,850 --> 00:11:21,940
happens all the time what do you do

00:11:18,410 --> 00:11:21,940
ah sorry

00:11:24,790 --> 00:11:33,460
yeah we do change internal details of

00:11:28,600 --> 00:11:41,320
packages ports about every two months

00:11:33,460 --> 00:11:44,200
and this is one case in about ten years

00:11:41,320 --> 00:11:48,250
that users noticed anything that we had

00:11:44,200 --> 00:11:52,510
to actually break compatibility in that

00:11:48,250 --> 00:11:58,000
manner as you probably know if you were

00:11:52,510 --> 00:12:02,230
in this room when we they are usually

00:11:58,000 --> 00:12:04,750
supportive and up until to release after

00:12:02,230 --> 00:12:06,670
once so that means for your we are going

00:12:04,750 --> 00:12:10,060
to be able to work with open visit then

00:12:06,670 --> 00:12:13,030
you have to upgrade over time actually

00:12:10,060 --> 00:12:15,190
this is not true for packages in general

00:12:13,030 --> 00:12:17,980
if you're working with packaged tools

00:12:15,190 --> 00:12:21,550
usually you're going to be able to play

00:12:17,980 --> 00:12:23,980
with all packages but they back five or

00:12:21,550 --> 00:12:29,650
six years like we have keyboards bad

00:12:23,980 --> 00:12:31,540
change and most of the time I try to

00:12:29,650 --> 00:12:39,910
keep supporting them for much longer

00:12:31,540 --> 00:12:41,710
period the idea is that if we can we

00:12:39,910 --> 00:12:46,990
shouldn't break backward compatibility

00:12:41,710 --> 00:12:51,010
as long as it's not too complex and this

00:12:46,990 --> 00:12:54,820
happened maybe five years ago back when

00:12:51,010 --> 00:12:56,620
I was starting I gets too small and at

00:12:54,820 --> 00:12:56,980
that point things were evolving really

00:12:56,620 --> 00:13:00,820
fast

00:12:56,980 --> 00:13:02,770
so it became a case of meta programming

00:13:00,820 --> 00:13:04,660
like you have to have some

00:13:02,770 --> 00:13:07,960
infrastructure so that you are resilient

00:13:04,660 --> 00:13:11,350
to change to only wanted Church so at

00:13:07,960 --> 00:13:14,040
that point I added the specific class

00:13:11,350 --> 00:13:18,310
for all keywords into attacking list

00:13:14,040 --> 00:13:23,950
price pacifically very tricky we named

00:13:18,310 --> 00:13:26,110
all and I've seen no reason to get rid

00:13:23,950 --> 00:13:28,180
of its structure and usually I clean it

00:13:26,110 --> 00:13:31,830
up every five or six years like I you

00:13:28,180 --> 00:13:35,320
look at any keyword in that list and if

00:13:31,830 --> 00:13:36,300
it's been there for over five years

00:13:35,320 --> 00:13:38,160
Julie

00:13:36,300 --> 00:13:40,710
completely get rid of that because

00:13:38,160 --> 00:13:43,650
everybody has whole packages but they

00:13:40,710 --> 00:13:45,990
beg that for usually as a time to

00:13:43,650 --> 00:13:48,660
upgrade and the seen repeated messages

00:13:45,990 --> 00:13:49,620
but they're seasonal compatible and blah

00:13:48,660 --> 00:13:56,910
blah blah you should've written

00:13:49,620 --> 00:13:58,980
originally so I'm going to talk a bit

00:13:56,910 --> 00:14:02,640
about the development process the design

00:13:58,980 --> 00:14:05,850
guidelines in general as some of you

00:14:02,640 --> 00:14:09,780
probably know when you do some open this

00:14:05,850 --> 00:14:12,900
stuff we do it by remote most of the

00:14:09,780 --> 00:14:15,750
time but we meet once twice a year to

00:14:12,900 --> 00:14:17,640
the stuff in person like yeah this one

00:14:15,750 --> 00:14:21,210
this was realist I get turns which we

00:14:17,640 --> 00:14:21,630
had embarrassing well it was so long ago

00:14:21,210 --> 00:14:24,510
I

00:14:21,630 --> 00:14:28,530
yeah time passes I probably ten years

00:14:24,510 --> 00:14:30,420
ago and it looks like this we put a lot

00:14:28,530 --> 00:14:33,450
of developers in the same room and we

00:14:30,420 --> 00:14:39,480
have to give which actor Kiefer we do

00:14:33,450 --> 00:14:42,420
lots of stuff together this is also from

00:14:39,480 --> 00:14:45,150
I captain but more private one with only

00:14:42,420 --> 00:14:46,910
a few select people's invite him to a

00:14:45,150 --> 00:14:50,340
secret place in the middle of friends

00:14:46,910 --> 00:14:55,650
with mostly cheese and stuff to drink

00:14:50,340 --> 00:15:00,390
and a bit of what overstuffed sometimes

00:14:55,650 --> 00:15:02,340
high school sometimes well actually I

00:15:00,390 --> 00:15:04,020
have another way to look at a curtain

00:15:02,340 --> 00:15:06,300
specifically pots like it turns where I

00:15:04,020 --> 00:15:12,630
meet my fellow developers which looks

00:15:06,300 --> 00:15:17,460
more like this like I have my colleagues

00:15:12,630 --> 00:15:19,680
and friends and I just observe them

00:15:17,460 --> 00:15:22,200
trying to make their way from Potts tree

00:15:19,680 --> 00:15:22,790
and trying to fix things trying to make

00:15:22,200 --> 00:15:27,330
things work

00:15:22,790 --> 00:15:31,010
somewhere in this one yeah like that

00:15:27,330 --> 00:15:36,060
yeah it's a prime example of a guy who

00:15:31,010 --> 00:15:39,510
sometimes acts done on purpose so that I

00:15:36,060 --> 00:15:42,330
don't get to be to have too much of a

00:15:39,510 --> 00:15:45,360
hero complex and that I have to fix

00:15:42,330 --> 00:15:48,790
things so that we can understand what's

00:15:45,360 --> 00:15:55,050
going on and this is very important guys

00:15:48,790 --> 00:15:57,250
think it has a joke yeah this is really

00:15:55,050 --> 00:15:59,589
important you had some feedback about

00:15:57,250 --> 00:16:01,899
what you're doing so that you don't go

00:15:59,589 --> 00:16:04,660
into crazy seochon but you don't write

00:16:01,899 --> 00:16:08,560
stuff that is impossible to understand

00:16:04,660 --> 00:16:09,959
for anybody there's also a challenge

00:16:08,560 --> 00:16:14,980
that's for real

00:16:09,959 --> 00:16:17,740
pots work is how to do like you are

00:16:14,980 --> 00:16:20,889
solving hard problems like a betting

00:16:17,740 --> 00:16:24,250
stuff can be difficult while dealing

00:16:20,889 --> 00:16:26,589
with massive amounts of code which day

00:16:24,250 --> 00:16:29,500
we have something like 30 gigabytes of

00:16:26,589 --> 00:16:31,240
packages and everything has to keep

00:16:29,500 --> 00:16:32,290
working and there are exceptions all the

00:16:31,240 --> 00:16:35,680
time

00:16:32,290 --> 00:16:37,480
Wow some of them could be avoidable

00:16:35,680 --> 00:16:39,399
like when you've got ed Barret

00:16:37,480 --> 00:16:40,779
mentioning tech life for instance you

00:16:39,399 --> 00:16:45,579
know that something wrong is going to

00:16:40,779 --> 00:16:48,370
happen but apart from that yeah well a

00:16:45,579 --> 00:16:52,089
very good for keeping me in check and we

00:16:48,370 --> 00:16:55,779
can show my design is sound and possible

00:16:52,089 --> 00:16:58,569
to change by other people so let's talk

00:16:55,779 --> 00:17:01,930
about more personal stuff like my actual

00:16:58,569 --> 00:17:07,209
work environment for real this is my

00:17:01,930 --> 00:17:12,040
preferred work environment so yeah this

00:17:07,209 --> 00:17:14,890
is budapest obviously Inver if you

00:17:12,040 --> 00:17:17,910
haven't if you go for with the best you

00:17:14,890 --> 00:17:20,110
definitely have to go to the bus but

00:17:17,910 --> 00:17:23,410
completely amazing out to be small and

00:17:20,110 --> 00:17:25,600
everything and this place not be that

00:17:23,410 --> 00:17:30,910
this problem the bath itself is probably

00:17:25,600 --> 00:17:34,450
where I do my best working like when

00:17:30,910 --> 00:17:38,080
you've been coding for a while I think

00:17:34,450 --> 00:17:40,390
that sometimes you have to dive deep

00:17:38,080 --> 00:17:43,210
into the corner and then you have to

00:17:40,390 --> 00:17:44,200
step back and think about what you're

00:17:43,210 --> 00:17:46,929
going to do next

00:17:44,200 --> 00:17:49,540
because with this writing more code in

00:17:46,929 --> 00:17:53,169
packages it's very easy I know the code

00:17:49,540 --> 00:17:56,169
mostly by heart but I'm lazy I don't

00:17:53,169 --> 00:17:58,750
want to write new code and also I know

00:17:56,169 --> 00:18:01,049
that every time I had I add some new

00:17:58,750 --> 00:18:03,150
code I'm going to introduce some new

00:18:01,049 --> 00:18:06,059
we only code with no bags is no

00:18:03,150 --> 00:18:10,980
collateral so being away from Ricki

00:18:06,059 --> 00:18:13,620
boredom and not writing code just

00:18:10,980 --> 00:18:16,230
thinking about stuff this is something

00:18:13,620 --> 00:18:19,799
that's really important for every aspect

00:18:16,230 --> 00:18:21,750
of a metro project if you lose yourself

00:18:19,799 --> 00:18:23,070
too much in the detail of the codes

00:18:21,750 --> 00:18:25,289
you're not going to see the big picture

00:18:23,070 --> 00:18:32,549
and you're going to miss opportunities

00:18:25,289 --> 00:18:34,770
for optimization and new stuff like for

00:18:32,549 --> 00:18:37,230
signatures we happen mostly by accident

00:18:34,770 --> 00:18:39,419
when new ones at some point I was

00:18:37,230 --> 00:18:47,100
looking at gzip and we were trying to

00:18:39,419 --> 00:18:52,140
fix something I was trying to yeah I was

00:18:47,100 --> 00:18:54,690
trying to see if I could use some Street

00:18:52,140 --> 00:18:57,150
specific streaming gzip algorithm which

00:18:54,690 --> 00:19:00,030
would compress better and which would

00:18:57,150 --> 00:19:02,909
work with a sink and I realized well

00:19:00,030 --> 00:19:05,309
about five different pad shifts for a

00:19:02,909 --> 00:19:07,640
different version of the set library and

00:19:05,309 --> 00:19:10,110
none of them were applicable to us and

00:19:07,640 --> 00:19:13,110
then I realized what to miss this was

00:19:10,110 --> 00:19:16,140
and I realized that gzip was basically

00:19:13,110 --> 00:19:18,120
broken and so that we had to put

00:19:16,140 --> 00:19:20,789
signatures outside and when everything

00:19:18,120 --> 00:19:23,400
happened look at is trivial women I hear

00:19:20,789 --> 00:19:28,280
is that realized there is a program

00:19:23,400 --> 00:19:28,280
somewhere and when you will fix it

00:19:28,580 --> 00:19:34,320
actually must have code developers of

00:19:31,350 --> 00:19:36,870
OpenBSD follow that precept some of them

00:19:34,320 --> 00:19:39,570
better than others like for instance our

00:19:36,870 --> 00:19:44,130
fearless leader we spending lots of time

00:19:39,570 --> 00:19:46,380
at roles instead of advocate Bob and so

00:19:44,130 --> 00:19:49,830
is a top-notch developer because of that

00:19:46,380 --> 00:19:52,980
and you have to keep giving money to you

00:19:49,830 --> 00:19:54,870
can be so that we can keep having

00:19:52,980 --> 00:19:58,070
Heights and I get turns and everything

00:19:54,870 --> 00:20:03,240
and so that we can think beyond code and

00:19:58,070 --> 00:20:05,309
actually make some good designs if you

00:20:03,240 --> 00:20:07,140
want to hear more about that you'll have

00:20:05,309 --> 00:20:08,880
in stock on tomorrow I guess she's going

00:20:07,140 --> 00:20:10,500
to talk about pledge if you not know

00:20:08,880 --> 00:20:13,629
about pledge you should go and see the

00:20:10,500 --> 00:20:18,249
stock because it's really awesome

00:20:13,629 --> 00:20:20,919
all its of reason back to me I can't

00:20:18,249 --> 00:20:24,159
always being with the best I guess what

00:20:20,919 --> 00:20:27,100
robot would kill me at some point of

00:20:24,159 --> 00:20:34,869
course so have reproduced the same

00:20:27,100 --> 00:20:37,539
environment at home should be for

00:20:34,869 --> 00:20:39,100
various reasons and I was actually a

00:20:37,539 --> 00:20:42,909
very twisting detail here

00:20:39,100 --> 00:20:45,489
it's a bit shy so yeah I'd want it to be

00:20:42,909 --> 00:20:52,450
fuzzy of the picture and I completes it

00:20:45,489 --> 00:20:54,789
you need to be on a better picture so

00:20:52,450 --> 00:20:57,249
this is my inspiration I keep this in

00:20:54,789 --> 00:20:59,169
the bathtub so that when I take a bath I

00:20:57,249 --> 00:21:05,590
have to think about the OpenBSD and to

00:20:59,169 --> 00:21:07,899
fix more stuff and yeah I'm saying all

00:21:05,590 --> 00:21:10,539
this in terms of a job but that's for

00:21:07,899 --> 00:21:12,489
real when I say that some of the best

00:21:10,539 --> 00:21:15,820
ideas and some of the best things that

00:21:12,489 --> 00:21:18,970
we have in our pockets tools have been

00:21:15,820 --> 00:21:21,849
done in the bath that's true the last

00:21:18,970 --> 00:21:24,309
one which I'm going to talk about at

00:21:21,849 --> 00:21:29,440
Vienna came to me while I was taking

00:21:24,309 --> 00:21:31,989
about surgery let's talk about some

00:21:29,440 --> 00:21:35,759
specific topics in package read few of

00:21:31,989 --> 00:21:35,759
em yeah

00:21:43,310 --> 00:21:47,470
so this is all about change this is a

00:21:45,260 --> 00:21:52,030
part which is talking about the

00:21:47,470 --> 00:21:55,370
neverending story of packaged tools

00:21:52,030 --> 00:21:59,120
sometimes we have to revisit some

00:21:55,370 --> 00:22:02,270
decisions some of them are not mine at

00:21:59,120 --> 00:22:04,580
all like when I decide each row rate for

00:22:02,270 --> 00:22:06,920
packaged tools we already had built a

00:22:04,580 --> 00:22:11,360
CAD format which is mostly the gzip

00:22:06,920 --> 00:22:14,660
double there are some pros and cons for

00:22:11,360 --> 00:22:16,880
it most interesting things about it is

00:22:14,660 --> 00:22:20,000
that it's a perfect internal format so

00:22:16,880 --> 00:22:22,790
if you take a package from OpenBSD and

00:22:20,000 --> 00:22:26,630
you have to look at it and an overall

00:22:22,790 --> 00:22:29,120
rating system you will be able to look

00:22:26,630 --> 00:22:31,250
at it for the most part maybe a bit

00:22:29,120 --> 00:22:35,020
complicated and on Windows but you can

00:22:31,250 --> 00:22:44,480
probably find tar on it as well black

00:22:35,020 --> 00:22:47,630
time but still every time that we are

00:22:44,480 --> 00:22:50,000
going to do something our tools we are

00:22:47,630 --> 00:22:55,030
going to have to question whether or not

00:22:50,000 --> 00:22:59,090
we should change stuff and sometimes

00:22:55,030 --> 00:23:00,860
some details are going to change while

00:22:59,090 --> 00:23:02,840
we outside appearance is going to say

00:23:00,860 --> 00:23:04,760
the same

00:23:02,840 --> 00:23:07,340
how would you talked about signatures

00:23:04,760 --> 00:23:09,200
like you have actually a significant

00:23:07,340 --> 00:23:15,580
come on film in which these videos is

00:23:09,200 --> 00:23:18,410
this let's talk a bit about chunk gzip

00:23:15,580 --> 00:23:21,830
which is something I was aware of about

00:23:18,410 --> 00:23:27,290
15 years ago but back when we did the

00:23:21,830 --> 00:23:29,990
first version of signing nothing we

00:23:27,290 --> 00:23:35,390
might any of it like you know you can

00:23:29,990 --> 00:23:37,880
actually pick up a file which is if it

00:23:35,390 --> 00:23:41,600
pick up a second file gzip it as well

00:23:37,880 --> 00:23:44,330
and concatenate both files together and

00:23:41,600 --> 00:23:48,140
you will have that we will valid gzip

00:23:44,330 --> 00:23:49,970
file like you pass into gems upon to

00:23:48,140 --> 00:23:52,940
just unpack the first stream then the

00:23:49,970 --> 00:23:54,700
second stream and almost you

00:23:52,940 --> 00:23:55,950
specifically asked for it

00:23:54,700 --> 00:23:57,929
you

00:23:55,950 --> 00:24:02,850
see the difference it's exactly as if

00:23:57,929 --> 00:24:05,700
you had one single gzip file so this

00:24:02,850 --> 00:24:09,899
helped a lot at first for Allstate

00:24:05,700 --> 00:24:14,210
signatures instead of having you work

00:24:09,899 --> 00:24:17,240
package as one gzip file needing to

00:24:14,210 --> 00:24:21,750
extract everything sign the packing list

00:24:17,240 --> 00:24:25,500
and then repackage everything you can

00:24:21,750 --> 00:24:31,230
just do your package in two parts you're

00:24:25,500 --> 00:24:31,740
going to create the beginning of at our

00:24:31,230 --> 00:24:35,519
archive

00:24:31,740 --> 00:24:39,059
we've just a packing list you compress

00:24:35,519 --> 00:24:42,090
that then you take the rest of the

00:24:39,059 --> 00:24:44,220
stream and you compress it separately so

00:24:42,090 --> 00:24:47,970
you have one gzip we've just a packing

00:24:44,220 --> 00:24:49,159
list if you have a gzip with everything

00:24:47,970 --> 00:24:52,919
that goes after it

00:24:49,159 --> 00:24:56,480
and when it comes time for signing you

00:24:52,919 --> 00:25:00,299
just don't like the first part sign it

00:24:56,480 --> 00:25:01,799
compress it again and then you just copy

00:25:00,299 --> 00:25:06,059
the rest of the file you don't have to

00:25:01,799 --> 00:25:10,919
James if I'm Jessie pitch again we went

00:25:06,059 --> 00:25:14,309
for from I guess for us for signing for

00:25:10,919 --> 00:25:17,250
snapshots for full package Shepherds for

00:25:14,309 --> 00:25:22,289
OpenBSD to about 40 minutes on the same

00:25:17,250 --> 00:25:26,070
machine using the static what's your

00:25:22,289 --> 00:25:28,110
events with this because as you know we

00:25:26,070 --> 00:25:31,769
no longer put the signature inside

00:25:28,110 --> 00:25:35,639
Jessup's we still use this technique for

00:25:31,769 --> 00:25:38,179
origins like when we want to transfer

00:25:35,639 --> 00:25:38,179
packages

00:25:41,460 --> 00:25:50,220
we actually put them inside changes with

00:25:45,960 --> 00:25:55,530
it files for each chunk so that I think

00:25:50,220 --> 00:25:58,590
is a pivot what's going on here is that

00:25:55,530 --> 00:26:01,470
a few years ago and again because we

00:25:58,590 --> 00:26:04,860
already have checksums or we fire inside

00:26:01,470 --> 00:26:09,660
an archive we decided to depart a bit

00:26:04,860 --> 00:26:13,050
from the usual performance what it's

00:26:09,660 --> 00:26:14,520
still perfectly normal turbo but if you

00:26:13,050 --> 00:26:19,020
older doesn't match your back against

00:26:14,520 --> 00:26:21,150
anymore these days we have the packing

00:26:19,020 --> 00:26:24,680
list which lists every file inside we

00:26:21,150 --> 00:26:30,210
archive and we have the archive proper

00:26:24,680 --> 00:26:33,120
which does list files out of order with

00:26:30,210 --> 00:26:37,140
the most recent files first and the

00:26:33,120 --> 00:26:39,300
fights that didn't change at the end so

00:26:37,140 --> 00:26:41,730
that when you upgrade your machine

00:26:39,300 --> 00:26:45,030
instead of unpacking everything from

00:26:41,730 --> 00:26:49,620
every table you are only going to on top

00:26:45,030 --> 00:26:52,400
the fights but do change inside you your

00:26:49,620 --> 00:26:54,690
package and as soon as it finds that

00:26:52,400 --> 00:26:57,600
remaining checks and are just the same

00:26:54,690 --> 00:27:03,660
it will be perfectly happy to skip the

00:26:57,600 --> 00:27:07,530
end of a archive and to tell you that we

00:27:03,660 --> 00:27:10,170
have read is complete for most packages

00:27:07,530 --> 00:27:13,940
this is not a significant win like

00:27:10,170 --> 00:27:17,160
sometimes you are going to get 20% 25%

00:27:13,940 --> 00:27:19,730
or are some exceptions for if you look

00:27:17,160 --> 00:27:23,520
at stuff like a decline for instance

00:27:19,730 --> 00:27:26,490
lots of very small details that change

00:27:23,520 --> 00:27:28,500
but without competing in significant

00:27:26,490 --> 00:27:30,840
compelled to verge sheer size of the

00:27:28,500 --> 00:27:33,240
package I think that the tech life

00:27:30,840 --> 00:27:35,340
package is this when you put everything

00:27:33,240 --> 00:27:39,480
together you could once you get bytes of

00:27:35,340 --> 00:27:45,570
files and on each subnet with this

00:27:39,480 --> 00:27:47,640
technique you get to extract maybe 5% of

00:27:45,570 --> 00:27:51,300
the deck left out so instead of watching

00:27:47,640 --> 00:27:53,210
you buy 200 megabytes no yeah almost

00:27:51,300 --> 00:27:58,430
that's a huge win

00:27:53,210 --> 00:28:01,850
and it also work we were think because

00:27:58,430 --> 00:28:05,540
we change files from yet and we've no

00:28:01,850 --> 00:28:07,730
longer store any time stamp inside the

00:28:05,540 --> 00:28:12,530
table body safe obviously Brian put the

00:28:07,730 --> 00:28:16,520
king list and so Indians you are going

00:28:12,530 --> 00:28:19,160
just to transfer the new chunks at the

00:28:16,520 --> 00:28:21,320
start of the archive that change at the

00:28:19,160 --> 00:28:24,250
rest I think he is going to say as it

00:28:21,320 --> 00:28:30,440
supposed to do okay didn't change so

00:28:24,250 --> 00:28:32,390
let's not transfer it the only reason

00:28:30,440 --> 00:28:35,270
this kind of stuff keeps happening in

00:28:32,390 --> 00:28:37,780
OpenBSD it's because we look at stuff

00:28:35,270 --> 00:28:44,870
that we are doing and but we are

00:28:37,780 --> 00:28:47,780
designing stuff to be faster if we did

00:28:44,870 --> 00:28:50,710
not have all star signatures we don't

00:28:47,780 --> 00:28:55,300
have folks about changjae zip and then

00:28:50,710 --> 00:28:55,300
none of us would have happened actually

00:28:56,710 --> 00:29:06,890
next guest Judy your opposite to

00:29:00,080 --> 00:29:08,660
reformat itself when Peggy ITF open

00:29:06,890 --> 00:29:13,010
believes that we don't have any index

00:29:08,660 --> 00:29:17,210
for packages but we do have tools but

00:29:13,010 --> 00:29:22,550
you can use Feinstein's to look at files

00:29:17,210 --> 00:29:24,530
we have make package look at DB which

00:29:22,550 --> 00:29:27,320
gives you a specific package which is

00:29:24,530 --> 00:29:30,080
basically look at database of every fire

00:29:27,320 --> 00:29:38,570
in every package but the package tools

00:29:30,080 --> 00:29:43,190
themselves do not rely on but at first

00:29:38,570 --> 00:29:45,320
it was just a game the idea was that I

00:29:43,190 --> 00:29:47,360
did the first version of package read

00:29:45,320 --> 00:29:50,360
which was only doing addition when I

00:29:47,360 --> 00:29:54,470
need updates and everything and I wanted

00:29:50,360 --> 00:29:59,080
to know how far I could get but needing

00:29:54,470 --> 00:30:02,930
any annex and then at some points maybe

00:29:59,080 --> 00:30:04,550
10 years ago I realized okay I'm done

00:30:02,930 --> 00:30:07,399
enough I can manage to do everything

00:30:04,550 --> 00:30:09,919
without a global index

00:30:07,399 --> 00:30:12,620
and so I do not need to go kinetics and

00:30:09,919 --> 00:30:15,500
this is good because this is oneness

00:30:12,620 --> 00:30:18,769
things that needs that can get out of

00:30:15,500 --> 00:30:20,630
sinking and on your local machine as

00:30:18,769 --> 00:30:22,130
well if you look at an open BSD you'll

00:30:20,630 --> 00:30:25,490
notice that there is one major

00:30:22,130 --> 00:30:27,440
difference with other machines we move

00:30:25,490 --> 00:30:30,200
operating system which is that we don't

00:30:27,440 --> 00:30:32,899
have an actual database of everything

00:30:30,200 --> 00:30:37,460
that's installed on the machine whoever

00:30:32,899 --> 00:30:39,470
gave it to e VAR DB package in which you

00:30:37,460 --> 00:30:41,029
have one sub directory for each package

00:30:39,470 --> 00:30:44,570
which is installed on the machine but

00:30:41,029 --> 00:30:46,299
varies no global database but says ok we

00:30:44,570 --> 00:30:50,149
have a depends on that on everything

00:30:46,299 --> 00:30:52,519
everything is very fine granddad fast

00:30:50,149 --> 00:30:58,010
it's very resilient because it can get

00:30:52,519 --> 00:31:00,500
it can't get out of sync very small

00:30:58,010 --> 00:31:02,510
price to pay sometimes things could be

00:31:00,500 --> 00:31:09,320
slightly faster we are working on that

00:31:02,510 --> 00:31:13,570
and for us some solutions and this

00:31:09,320 --> 00:31:17,350
decision has some consequences some

00:31:13,570 --> 00:31:21,529
contractor Balkan consequences actually

00:31:17,350 --> 00:31:25,940
we have snapshots which are about 40

00:31:21,529 --> 00:31:28,549
gigabytes with the tools that we had

00:31:25,940 --> 00:31:31,669
with this we you have one new snapshot

00:31:28,549 --> 00:31:33,769
every two or three days for magitek show

00:31:31,669 --> 00:31:35,750
the of course you are not going to get

00:31:33,769 --> 00:31:38,779
the new package snapshot for sparc64

00:31:35,750 --> 00:31:42,139
every few days that would need but we do

00:31:38,779 --> 00:31:46,600
work right probably through waste box or

00:31:42,139 --> 00:31:50,860
something like that that's not efficient

00:31:46,600 --> 00:31:53,419
so when you upload the new snapshot

00:31:50,860 --> 00:31:56,990
you're going to get into a sharing

00:31:53,419 --> 00:32:00,830
program like at some point you're going

00:31:56,990 --> 00:32:04,519
to have some of the new packages already

00:32:00,830 --> 00:32:06,500
transferred and some of all packages we

00:32:04,519 --> 00:32:11,090
trust him we're in the process of

00:32:06,500 --> 00:32:12,710
getting updated so this means that the

00:32:11,090 --> 00:32:17,090
solution that we currently have that

00:32:12,710 --> 00:32:19,350
each package is independently signed is

00:32:17,090 --> 00:32:22,170
the only possible solution

00:32:19,350 --> 00:32:24,240
otherwise you would always if you had

00:32:22,170 --> 00:32:27,480
the global signature like a manifest for

00:32:24,240 --> 00:32:32,820
every package and the checksum of every

00:32:27,480 --> 00:32:35,250
package recorded at some point it

00:32:32,820 --> 00:32:39,570
wouldn't work because all the time you

00:32:35,250 --> 00:32:42,480
would end up with discrepancies like

00:32:39,570 --> 00:32:50,400
some of your packets are I don't know of

00:32:42,480 --> 00:32:54,920
a signature regeneration base Nova

00:32:50,400 --> 00:32:54,920
solution in fact

00:32:57,350 --> 00:33:02,110
like I said very well there are some

00:32:59,300 --> 00:33:08,180
drawbacks to this way of doing things

00:33:02,110 --> 00:33:10,820
some limitations of a Moodle everything

00:33:08,180 --> 00:33:13,130
we do is based on package names because

00:33:10,820 --> 00:33:16,430
when you are going to do in a bit you're

00:33:13,130 --> 00:33:20,060
not going to go into that package like

00:33:16,430 --> 00:33:23,120
to really look at every single file for

00:33:20,060 --> 00:33:23,870
something like 9,000 packages on the FTP

00:33:23,120 --> 00:33:29,750
site is this

00:33:23,870 --> 00:33:32,720
I think so we have to have consistent

00:33:29,750 --> 00:33:34,850
package names sometimes this does not

00:33:32,720 --> 00:33:36,980
happen so yeah we don't have an index

00:33:34,850 --> 00:33:40,790
but we have an escape mechanism called

00:33:36,980 --> 00:33:41,840
quirks because sometimes we want to

00:33:40,790 --> 00:33:46,460
rename stuff

00:33:41,840 --> 00:33:49,610
not too often up for it and then we have

00:33:46,460 --> 00:33:51,560
to open each package to check for where

00:33:49,610 --> 00:33:53,570
varieties indeed for writer debt we've

00:33:51,560 --> 00:34:00,080
all right some what stuff that's going

00:33:53,570 --> 00:34:02,960
on or not I catch a deep self doesn't do

00:34:00,080 --> 00:34:08,000
it because I can't do everything it's

00:34:02,960 --> 00:34:10,970
still lazy so we use the FTP command is

00:34:08,000 --> 00:34:15,409
this which control e but it says also

00:34:10,970 --> 00:34:22,010
under HTTP and HTTPS and that becomes a

00:34:15,409 --> 00:34:25,909
problem because it can be slow for

00:34:22,010 --> 00:34:28,129
instance these days we have the very

00:34:25,909 --> 00:34:31,159
minor problem which is that you are

00:34:28,129 --> 00:34:36,760
supposed to huge package a HTTP

00:34:31,159 --> 00:34:40,909
repository and you can use it on HTTP

00:34:36,760 --> 00:34:43,250
repository but won't be so good because

00:34:40,909 --> 00:34:45,320
each connection server repository is

00:34:43,250 --> 00:34:49,610
going to be a separate connection using

00:34:45,320 --> 00:34:53,629
a separate FTP comment due to limitation

00:34:49,610 --> 00:34:56,450
of our TLS and some design decision in

00:34:53,629 --> 00:34:59,560
FTP it means that every single FTP is

00:34:56,450 --> 00:35:03,200
going to have to wear to ticket with

00:34:59,560 --> 00:35:05,350
HTTPS to go distant repository and it

00:35:03,200 --> 00:35:10,360
costs a lot

00:35:05,350 --> 00:35:12,040
I said this is my no problem because we

00:35:10,360 --> 00:35:16,630
have signatures which are completely

00:35:12,040 --> 00:35:19,930
independent from HTTP so whatever

00:35:16,630 --> 00:35:23,670
happens if you connect to a file you

00:35:19,930 --> 00:35:25,230
don't repository Wow you will get

00:35:23,670 --> 00:35:27,880
[Music]

00:35:25,230 --> 00:35:34,120
packages with bad signatures and that's

00:35:27,880 --> 00:35:37,740
it we do stop itself right away we

00:35:34,120 --> 00:35:40,360
should not trust FTP itself and we don't

00:35:37,740 --> 00:35:43,300
at the same time but we change

00:35:40,360 --> 00:35:46,540
signatures we also added some level of

00:35:43,300 --> 00:35:49,570
privilege separation to package that so

00:35:46,540 --> 00:35:53,380
that if TP security run as its own user

00:35:49,570 --> 00:35:58,510
can do anything can't sorry do anything

00:35:53,380 --> 00:36:01,240
on the system so it's perfectly fine so

00:35:58,510 --> 00:36:04,930
it's just a minor problem we issue being

00:36:01,240 --> 00:36:07,930
that if you are using packages on

00:36:04,930 --> 00:36:12,460
European business system but I still one

00:36:07,930 --> 00:36:14,770
small secret application yeah I think

00:36:12,460 --> 00:36:21,910
that you are falling asleep so what's

00:36:14,770 --> 00:36:24,360
the security implication right we are

00:36:21,910 --> 00:36:27,360
leaking the packages we were installing

00:36:24,360 --> 00:36:27,360
yeah

00:36:45,060 --> 00:36:50,740
that's also a very to program the

00:36:47,890 --> 00:36:53,590
problem being that if a hiker decides to

00:36:50,740 --> 00:36:55,750
keep a copy of an old repository before

00:36:53,590 --> 00:36:57,640
there was the security updates and

00:36:55,750 --> 00:37:02,050
potentially there could be some trouble

00:36:57,640 --> 00:37:04,720
but we took care of it like you have the

00:37:02,050 --> 00:37:07,540
quicks package every package if you

00:37:04,720 --> 00:37:11,859
remember one of the first slides has got

00:37:07,540 --> 00:37:15,099
the timestamp right and whenever you do

00:37:11,859 --> 00:37:17,520
an update using package rat its will it

00:37:15,099 --> 00:37:22,540
will display the timestamp for quirks

00:37:17,520 --> 00:37:24,430
which is vermin package with everything

00:37:22,540 --> 00:37:28,390
useful every meta information for

00:37:24,430 --> 00:37:30,780
overall repository so you have to read

00:37:28,390 --> 00:37:33,099
because we don't know at which wait

00:37:30,780 --> 00:37:36,550
snapshots are dated and it depends on

00:37:33,099 --> 00:37:40,330
the architecture but you will see that

00:37:36,550 --> 00:37:42,849
your quick stats back from that time so

00:37:40,330 --> 00:37:44,410
if you have a reader of quicks which

00:37:42,849 --> 00:37:47,619
usually means that something wrong is

00:37:44,410 --> 00:37:50,530
going on and then inside cracks itself

00:37:47,619 --> 00:37:52,450
you've got a list of packages with

00:37:50,530 --> 00:37:56,430
security holes that have been updated

00:37:52,450 --> 00:38:01,290
since then and during the grade process

00:37:56,430 --> 00:38:01,290
if package eight count fine

00:38:01,390 --> 00:38:07,390
a newer package for one of those with

00:38:04,630 --> 00:38:09,520
security implications then it will tell

00:38:07,390 --> 00:38:12,070
you that there is a problem so yeah

00:38:09,520 --> 00:38:19,530
that's definitely a theoretical problem

00:38:12,070 --> 00:38:19,530
but that one we solved yep

00:38:23,690 --> 00:38:28,080
yes I'm still running but I ever read

00:38:26,220 --> 00:38:34,470
something of quark but I can do anything

00:38:28,080 --> 00:38:37,260
about what like what's recent 464 three

00:38:34,470 --> 00:38:47,390
or four days recent force buck sixty

00:38:37,260 --> 00:38:50,970
four six months is recent okay yeah well

00:38:47,390 --> 00:38:52,860
but yeah you have to engage your brain

00:38:50,970 --> 00:38:55,140
we are talking about security it's not

00:38:52,860 --> 00:38:58,890
it's not Windows where everything is

00:38:55,140 --> 00:39:01,140
insecure by default but if you don't

00:38:58,890 --> 00:39:03,680
look at what the system tells you you're

00:39:01,140 --> 00:39:10,650
going to run into trouble

00:39:03,680 --> 00:39:15,270
oops okay too much as usual I'm just

00:39:10,650 --> 00:39:21,810
going to finish with the various and

00:39:15,270 --> 00:39:24,120
stuff which became part of OpenBSD

00:39:21,810 --> 00:39:30,240
packaged systems about this one a week

00:39:24,120 --> 00:39:33,510
ago and which is called fashion I was

00:39:30,240 --> 00:39:36,120
talking about package names being an

00:39:33,510 --> 00:39:39,900
integral part of OpenBSD and sometimes

00:39:36,120 --> 00:39:43,950
we do system-wide changes this happened

00:39:39,900 --> 00:39:46,170
a few years ago when we change type left

00:39:43,950 --> 00:39:50,460
once I'm wrong across all architectures

00:39:46,170 --> 00:39:52,200
and this works it whispers yeah because

00:39:50,460 --> 00:39:54,990
the mumbling and everything and if you

00:39:52,200 --> 00:39:56,550
change direct your tech name so every

00:39:54,990 --> 00:40:01,020
function name changes and you have to

00:39:56,550 --> 00:40:03,810
bump to change specific patched version

00:40:01,020 --> 00:40:06,840
of every package depending on surplus

00:40:03,810 --> 00:40:10,890
press and then more recently we switched

00:40:06,840 --> 00:40:14,610
on to my know architectures from GCC to

00:40:10,890 --> 00:40:17,040
clone and this breaks for c++ again

00:40:14,610 --> 00:40:19,700
hmm maybe right something wrong with C++

00:40:17,040 --> 00:40:19,700
after all

00:40:20,410 --> 00:40:27,170
so we did but every package first time

00:40:24,430 --> 00:40:30,620
the people who helped to invent are

00:40:27,170 --> 00:40:33,170
still scared by it we don't want to do

00:40:30,620 --> 00:40:34,940
it again so this time we decided okay

00:40:33,170 --> 00:40:38,270
we're not going to do it we are going to

00:40:34,940 --> 00:40:40,010
tell people while you I don't like

00:40:38,270 --> 00:40:44,300
you and you have to update everything my

00:40:40,010 --> 00:40:47,930
friend force in a bit and then Stuart

00:40:44,300 --> 00:40:50,090
with very smart guy convinced me but

00:40:47,930 --> 00:40:56,840
maybe I should try to find something

00:40:50,090 --> 00:40:59,810
else to do first I thought I'm not going

00:40:56,840 --> 00:41:05,680
to do that because basically I need to

00:40:59,810 --> 00:41:09,830
put best system dependency somewhere and

00:41:05,680 --> 00:41:12,350
I hate that because I'm going to end up

00:41:09,830 --> 00:41:14,090
with a fine sauce but I will have to

00:41:12,350 --> 00:41:18,080
burn from time to time and I'm going to

00:41:14,090 --> 00:41:20,120
run into tio all over again which is a

00:41:18,080 --> 00:41:24,430
program because when you get to eros in

00:41:20,120 --> 00:41:27,680
front of each other we fight usually and

00:41:24,430 --> 00:41:30,140
if I realized I was going at it all

00:41:27,680 --> 00:41:31,970
wrong like I don't need at all to have a

00:41:30,140 --> 00:41:34,280
dependency on the best system I can put

00:41:31,970 --> 00:41:37,430
it directly inside the package and first

00:41:34,280 --> 00:41:39,860
fashion was born like what we have right

00:41:37,430 --> 00:41:45,410
now is that each package has got a kind

00:41:39,860 --> 00:41:48,980
of Cylon number that gets inside the

00:41:45,410 --> 00:41:51,040
package system proper without any

00:41:48,980 --> 00:41:53,720
reference to our source system and

00:41:51,040 --> 00:41:56,540
without any dependency to external stuff

00:41:53,720 --> 00:42:00,320
it's very simple like if you have a

00:41:56,540 --> 00:42:02,360
package that says cash on zero and then

00:42:00,320 --> 00:42:04,460
you look at the snapshot and you see a

00:42:02,360 --> 00:42:09,620
package that says version one okay

00:42:04,460 --> 00:42:11,270
that's a new package I just a bit though

00:42:09,620 --> 00:42:14,750
it bits it's mint

00:42:11,270 --> 00:42:17,480
it's be strange we have a flag to

00:42:14,750 --> 00:42:19,790
package gate which is minus V where that

00:42:17,480 --> 00:42:21,410
you can use multiple time to build the

00:42:19,790 --> 00:42:23,620
rational number by adding numbers to

00:42:21,410 --> 00:42:23,620
giver

00:42:24,900 --> 00:42:30,660
the idea is that it's very simple to do

00:42:27,630 --> 00:42:33,030
that we were needing anemic magic so

00:42:30,660 --> 00:42:35,910
that you can have matching in opponent

00:42:33,030 --> 00:42:39,150
parts and machine dependent parts in the

00:42:35,910 --> 00:42:41,430
same make file like currently you have

00:42:39,150 --> 00:42:44,760
the wall open business system which is

00:42:41,430 --> 00:42:48,210
at version zero and then when you one MD

00:42:44,760 --> 00:42:54,060
64 or voids and processors it goes up to

00:42:48,210 --> 00:42:56,790
one because of a second minus B and it

00:42:54,060 --> 00:43:00,180
turned out to be incredibly simple like

00:42:56,790 --> 00:43:02,820
if you look at this patch for the amount

00:43:00,180 --> 00:43:06,840
of color to change it's about twenty

00:43:02,820 --> 00:43:10,380
lines all considered any change

00:43:06,840 --> 00:43:13,800
everything like now we have a mechanism

00:43:10,380 --> 00:43:15,780
but Wiles use to move to GCC to move

00:43:13,800 --> 00:43:18,630
along seamlessly like if you're running

00:43:15,780 --> 00:43:20,550
OpenBSD stable and you move from six

00:43:18,630 --> 00:43:24,390
point one to six point two you won't

00:43:20,550 --> 00:43:27,570
notice hopefully but we change compilers

00:43:24,390 --> 00:43:29,640
especially the package system well you

00:43:27,570 --> 00:43:34,530
will notice that you will a bit almost

00:43:29,640 --> 00:43:35,820
every package but that's it and it can

00:43:34,530 --> 00:43:38,370
be used again in the future

00:43:35,820 --> 00:43:42,990
without needing anything more so what's

00:43:38,370 --> 00:43:45,810
really cool um

00:43:42,990 --> 00:43:49,080
you know I was a bit long so I was also

00:43:45,810 --> 00:43:51,450
going to talk about the future but I

00:43:49,080 --> 00:43:55,820
don't think I have any time for that so

00:43:51,450 --> 00:43:55,820
yeah maybe another talk nice job

00:43:57,460 --> 00:44:05,110
[Applause]

00:44:03,150 --> 00:44:14,800
and of course I'm going to take

00:44:05,110 --> 00:44:22,600
questions no but I can talk into this

00:44:14,800 --> 00:44:28,890
one ones questions for those of us are

00:44:22,600 --> 00:44:31,180
running snapshots obviously lives easier

00:44:28,890 --> 00:44:33,760
sometimes I'm in the situation where I

00:44:31,180 --> 00:44:36,550
installed a version of userland and it

00:44:33,760 --> 00:44:38,110
turns out these snapshots of packages

00:44:36,550 --> 00:44:42,820
are not yet updated so I have to wait

00:44:38,110 --> 00:44:44,530
for 24 hours is there any way I can know

00:44:42,820 --> 00:44:48,940
beforehand that I'm not blowing my

00:44:44,530 --> 00:44:51,430
system away the next day I'm afraid that

00:44:48,940 --> 00:44:55,840
we don't have enough human resources to

00:44:51,430 --> 00:44:58,480
be able to unless one like the most we

00:44:55,840 --> 00:45:02,910
could do is to get the turnover to be

00:44:58,480 --> 00:45:05,760
faster which will really did but

00:45:02,910 --> 00:45:08,470
basically being able to inform you that

00:45:05,760 --> 00:45:10,780
when the snapshots are going to be

00:45:08,470 --> 00:45:13,150
online it's just extra communication

00:45:10,780 --> 00:45:15,310
which takes more time like if you do

00:45:13,150 --> 00:45:18,390
this stuff you're going to have to wait

00:45:15,310 --> 00:45:21,310
for a few more hours each time probably

00:45:18,390 --> 00:45:23,860
also I think that rise from paranoia

00:45:21,310 --> 00:45:25,780
involved like some details of the

00:45:23,860 --> 00:45:28,570
singing process are not completely

00:45:25,780 --> 00:45:31,420
public signing on which machine is down

00:45:28,570 --> 00:45:38,530
and we don't want to leak information

00:45:31,420 --> 00:45:40,750
concerning that sorry that maybe I can

00:45:38,530 --> 00:45:45,250
reply to this question you everyone has

00:45:40,750 --> 00:45:47,290
its own acts and you can just follow the

00:45:45,250 --> 00:45:49,090
CVS commits see when the library gets

00:45:47,290 --> 00:45:50,530
bumped up for example and you just

00:45:49,090 --> 00:45:52,360
compare with what's on the near all

00:45:50,530 --> 00:45:53,830
right now because as Mark told you can

00:45:52,360 --> 00:45:55,690
extract the package and look what's

00:45:53,830 --> 00:45:58,870
inside and you will see in the signature

00:45:55,690 --> 00:46:00,580
if it matches what's in the package will

00:45:58,870 --> 00:46:04,540
match what you will have on your running

00:46:00,580 --> 00:46:06,880
snapshot so maybe you can download the

00:46:04,540 --> 00:46:08,740
snapshot look at the last library when

00:46:06,880 --> 00:46:10,660
when it was don't in the case of

00:46:08,740 --> 00:46:14,140
libraries when you have written change

00:46:10,660 --> 00:46:15,020
in the channel but then you can compare

00:46:14,140 --> 00:46:16,940
that the snapshot

00:46:15,020 --> 00:46:19,880
will match the libraries which are in

00:46:16,940 --> 00:46:23,270
the packages and everyone has his own

00:46:19,880 --> 00:46:25,970
acts this way actually might be a

00:46:23,270 --> 00:46:28,460
solution assuming the canal doesn't

00:46:25,970 --> 00:46:31,130
change too much because you will be

00:46:28,460 --> 00:46:35,390
flagged when obviously you could use

00:46:31,130 --> 00:46:39,110
virtuals that we used to build ports

00:46:35,390 --> 00:46:41,240
peewit new short you can use it to

00:46:39,110 --> 00:46:44,270
populate an area of the disk with a

00:46:41,240 --> 00:46:46,700
snapshot for instance and then you go

00:46:44,270 --> 00:46:50,090
into into vitória and you could try to

00:46:46,700 --> 00:46:53,120
do a package read - m bar to check

00:46:50,090 --> 00:46:57,530
whether or not it will work that's a bit

00:46:53,120 --> 00:46:59,690
intensive but at least was almost no

00:46:57,530 --> 00:47:22,370
human intervention you probably can do

00:46:59,690 --> 00:47:27,590
that in with a script would be affected

00:47:22,370 --> 00:47:29,600
by some GCC plus or C++ update now the

00:47:27,590 --> 00:47:32,180
idea is to burp everything system more

00:47:29,600 --> 00:47:34,550
and more or less like we have this

00:47:32,180 --> 00:47:36,800
mechanism that some people objected to

00:47:34,550 --> 00:47:38,990
but we that we're very happy to have

00:47:36,800 --> 00:47:41,420
these days which is that you can have

00:47:38,990 --> 00:47:45,020
arch independent packages like a logic

00:47:41,420 --> 00:47:47,390
equal to star and basically I use that

00:47:45,020 --> 00:47:49,190
you not put any version in my packages

00:47:47,390 --> 00:47:53,510
because I know that force packages are

00:47:49,190 --> 00:47:55,010
just text files Morris and transfer

00:47:53,510 --> 00:47:58,130
independent of the architecture and

00:47:55,010 --> 00:48:01,220
everything else got bumped it's it's

00:47:58,130 --> 00:48:03,710
it's a question of being safe Beethoven

00:48:01,220 --> 00:48:06,470
sorry because you already have

00:48:03,710 --> 00:48:09,410
dependencies where you more or less know

00:48:06,470 --> 00:48:12,020
that most packages that depend on trunk

00:48:09,410 --> 00:48:15,170
have been updated like if you depend on

00:48:12,020 --> 00:48:17,210
the C library in C++ library of course

00:48:15,170 --> 00:48:20,270
you're going to get mapped but he didn't

00:48:17,210 --> 00:48:23,090
catch everything so we just decided to

00:48:20,270 --> 00:48:25,640
bump it all we don't have enough human

00:48:23,090 --> 00:48:27,750
resources to check every single package

00:48:25,640 --> 00:48:31,410
that various compatibility

00:48:27,750 --> 00:48:34,849
and got it right the package with the

00:48:31,410 --> 00:48:37,800
arch star are not updated by the world

00:48:34,849 --> 00:48:41,810
yeah yeah there's no version in those

00:48:37,800 --> 00:48:41,810
packages and this mechanism is actually

00:48:42,319 --> 00:48:48,300
somewhat more generic like if we want to

00:48:45,240 --> 00:48:50,270
had an over part to the version part we

00:48:48,300 --> 00:48:58,290
could

00:48:50,270 --> 00:49:02,869
that's the question well there doesn't

00:48:58,290 --> 00:49:07,170
really fit the model but if you have

00:49:02,869 --> 00:49:10,319
reproducible builds then then you might

00:49:07,170 --> 00:49:12,599
be able to say well I'm rebuilding this

00:49:10,319 --> 00:49:16,589
package but it's but the result is the

00:49:12,599 --> 00:49:19,380
same so there's no need to upgrade well

00:49:16,589 --> 00:49:23,040
we try to have a producible path for

00:49:19,380 --> 00:49:25,619
lots of stuff but actually it deters

00:49:23,040 --> 00:49:27,450
from security if you look at the recent

00:49:25,619 --> 00:49:29,849
open via the Machine you'll notice that

00:49:27,450 --> 00:49:32,310
it does running it's coming in on a

00:49:29,849 --> 00:49:35,670
monitors it running some libraries in

00:49:32,310 --> 00:49:37,200
one our models and we try to had some

00:49:35,670 --> 00:49:40,619
randomization so that's some kind of

00:49:37,200 --> 00:49:42,569
exports are more complex so reproducible

00:49:40,619 --> 00:49:47,609
builds yeah that's nice goal when you

00:49:42,569 --> 00:49:49,980
are trying to debug stuff but it's more

00:49:47,609 --> 00:49:51,960
complexity because when you open

00:49:49,980 --> 00:49:54,750
business setting you will have to have

00:49:51,960 --> 00:49:56,700
different switches so that sometimes you

00:49:54,750 --> 00:50:02,880
build reproduce ibly in other times you

00:49:56,700 --> 00:50:05,670
have more security and but while there

00:50:02,880 --> 00:50:08,130
are bugs and you're going to run into

00:50:05,670 --> 00:50:10,380
them I have a very specific sample of a

00:50:08,130 --> 00:50:14,130
recent problem that we had to fix after

00:50:10,380 --> 00:50:17,069
we switch to clunky on almost every

00:50:14,130 --> 00:50:18,750
OpenBSD executable you've got no point

00:50:17,069 --> 00:50:21,720
with the specific section which is

00:50:18,750 --> 00:50:24,930
called OpenBSD random data which is

00:50:21,720 --> 00:50:26,369
mostly used to see the canary generator

00:50:24,930 --> 00:50:31,650
off or stack protection and everything

00:50:26,369 --> 00:50:33,510
and clumb which is a bit stupid just

00:50:31,650 --> 00:50:37,230
decided that because it's a section it

00:50:33,510 --> 00:50:38,930
does not know about each out to be

00:50:37,230 --> 00:50:42,230
filled with zeros

00:50:38,930 --> 00:50:43,790
and we had to fix that and this was

00:50:42,230 --> 00:50:45,920
completely out of the blue nobody you

00:50:43,790 --> 00:50:48,620
worked with clunk noticed until I think

00:50:45,920 --> 00:50:53,030
it was - its himself who noticed what it

00:50:48,620 --> 00:50:56,330
was work yes and if you do reproducible

00:50:53,030 --> 00:50:58,700
build then you lose some of security

00:50:56,330 --> 00:51:02,600
features that we have and if you do that

00:50:58,700 --> 00:51:04,730
as a switch then maybe you will break

00:51:02,600 --> 00:51:07,280
something and you will notice six months

00:51:04,730 --> 00:51:17,990
later like certain for some of our

00:51:07,280 --> 00:51:19,870
voices let base defects so yeah all

00:51:17,990 --> 00:51:22,280
right if there are no further questions

00:51:19,870 --> 00:51:24,140
I'd like to thank Mark for your

00:51:22,280 --> 00:51:25,240
presentation and thank you for these

00:51:24,140 --> 00:51:27,290
meeting days

00:51:25,240 --> 00:51:27,290

YouTube URL: https://www.youtube.com/watch?v=7hmBgniE00s


