Title: State of the DragonFly's graphics stack - François Tigeot
Publication date: 2019-10-16
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

Following my “Porting the drm/kms graphic drivers to DragonFly” talk at
EuroBSDCon 2014, and my “State of the graphics stack in DragonFly” talk
at EuroBSDCon 2015, I plan to give an updated version of the later talk
this year.

About DragonFly

- Unix-like operating system, BSD descendant
- Started from FreeBSD 4.x in 2003
- High-performance, unique approach to MP operation
- Unique features: HAMMER filesystem, swapcache

I have been trying to make DragonFly more useful by benchmarking its
performance, making it able to use some common technologies and porting
various pieces of software.

In particular, I have been working since 2012 on porting drm/kms graphic
drivers to DragonFly. I am also generally involved in various
discussions about graphics in the DragonFly community.

Speaker biography:

- Independent consultant, sysadmin
- X11 and BSD user since the 1990s
- DragonFly developer since 2011
- Has ported drm/i915 and drm/radeon kernel drivers to DragonFly
Captions: 
	00:00:01,280 --> 00:00:06,750
so my name is from Swati show I'm

00:00:04,200 --> 00:00:12,679
reachable on IRC email

00:00:06,750 --> 00:00:12,679
I generally hung out and free nada

00:00:13,769 --> 00:00:22,260
I'm an independent consultant and system

00:00:16,289 --> 00:00:27,900
engineer I'm x11 and B as the user since

00:00:22,260 --> 00:00:33,390
many years now I've been a dragonfly the

00:00:27,900 --> 00:00:36,660
view developers since 2011 I originally

00:00:33,390 --> 00:00:42,870
ported the einen 15 and a Radeon driver

00:00:36,660 --> 00:00:50,550
dragonfly um I have been updating the I

00:00:42,870 --> 00:00:53,219
915 driver than them dragonfly is a

00:00:50,550 --> 00:00:57,149
unix-like operating system it's a BSD

00:00:53,219 --> 00:01:02,789
descendant it was originally forked from

00:00:57,149 --> 00:01:06,180
FreeBSD in 2003 by someone called

00:01:02,789 --> 00:01:11,460
Matthew Dillon which with sort of genius

00:01:06,180 --> 00:01:14,220
in his own way dragonfly is

00:01:11,460 --> 00:01:19,320
high-performance and scalable it uses

00:01:14,220 --> 00:01:23,220
per core replicated resources and many

00:01:19,320 --> 00:01:27,509
versions are naturally luckless so it

00:01:23,220 --> 00:01:33,270
really likes AI Kirkland SMP systems and

00:01:27,509 --> 00:01:37,320
so on dragonfly use innovative hammer

00:01:33,270 --> 00:01:41,100
file system and you were worth passion

00:01:37,320 --> 00:01:45,210
will be coming this year um it's really

00:01:41,100 --> 00:01:48,930
great for disaster recovery or heavy

00:01:45,210 --> 00:01:53,850
storage in general the amorphous system

00:01:48,930 --> 00:01:58,219
can retain story all transactions can be

00:01:53,850 --> 00:02:01,439
kept on disk for up to 60 days and

00:01:58,219 --> 00:02:04,549
history can be streamed between local

00:02:01,439 --> 00:02:04,549
and remote file systems

00:02:05,930 --> 00:02:11,300
it can be used in a sort of real-time

00:02:08,810 --> 00:02:14,590
way so it's really great for disaster

00:02:11,300 --> 00:02:16,820
recovery and general heavy storage

00:02:14,590 --> 00:02:19,760
systems

00:02:16,820 --> 00:02:23,090
there's also integrated the replication

00:02:19,760 --> 00:02:27,080
chip the replication you don't need tons

00:02:23,090 --> 00:02:32,420
of memory to do replicate data it's

00:02:27,080 --> 00:02:34,880
great with small servers like machines

00:02:32,420 --> 00:02:38,120
have been only four gigabytes or so and

00:02:34,880 --> 00:02:41,209
I've have been successfully using it on

00:02:38,120 --> 00:02:46,239
some client systems using DNA or

00:02:41,209 --> 00:02:46,239
proteins or generally scientific data

00:02:49,989 --> 00:02:59,000
and now I will focus on the graphics

00:02:53,510 --> 00:03:02,120
drivers so all the drivers is they are

00:02:59,000 --> 00:03:07,100
based on Linux there are many many

00:03:02,120 --> 00:03:10,489
people corporate developers developing

00:03:07,100 --> 00:03:14,570
writing graphic drivers for Intel in

00:03:10,489 --> 00:03:17,060
particular but also MD and so on nobody

00:03:14,570 --> 00:03:22,310
is working on dragonfly all of them

00:03:17,060 --> 00:03:29,030
working Linux I guess nobody has heard

00:03:22,310 --> 00:03:31,430
of dragonfly in that area so I have to

00:03:29,030 --> 00:03:36,440
manage with the current situation and

00:03:31,430 --> 00:03:38,840
porcelanic strivers to be on fire um the

00:03:36,440 --> 00:03:41,989
easiest way I found to do that is

00:03:38,840 --> 00:03:44,269
actually not reported reverbs but true

00:03:41,989 --> 00:03:47,019
reemployment a Linux subsystem in the

00:03:44,269 --> 00:03:47,019
dragonfly Channel

00:03:52,330 --> 00:03:59,209
most modern graphics in Linux used

00:03:55,849 --> 00:04:05,810
something called CRM subsystem which

00:03:59,209 --> 00:04:08,480
means direct rendering manager this

00:04:05,810 --> 00:04:17,769
subsystem and the drivers themselves

00:04:08,480 --> 00:04:23,000
directly use terms of Linux api's and

00:04:17,769 --> 00:04:25,820
had to implement these api's and in

00:04:23,000 --> 00:04:29,120
general makes the drivers believe they

00:04:25,820 --> 00:04:30,950
were running in a Linux kernel so for

00:04:29,120 --> 00:04:34,930
the purpose the Dragonfly kernel can be

00:04:30,950 --> 00:04:34,930
considered an implementation of Linux I

00:04:36,610 --> 00:04:44,990
was quite lucky for many BSD systems

00:04:40,760 --> 00:04:49,880
already at limited Linux API support

00:04:44,990 --> 00:04:55,570
limited Linux API implementations when I

00:04:49,880 --> 00:05:02,860
first started open BSD was probably the

00:04:55,570 --> 00:05:06,740
most successful PSD for DRM support

00:05:02,860 --> 00:05:09,289
there were many api's I took I choose

00:05:06,740 --> 00:05:14,270
implementations from open BSD there was

00:05:09,289 --> 00:05:16,970
also specific subsystem for some high

00:05:14,270 --> 00:05:23,090
performance network devices in FreeBSD

00:05:16,970 --> 00:05:26,300
using Linux api's at some point let BSD

00:05:23,090 --> 00:05:28,490
people decided to also party their arms

00:05:26,300 --> 00:05:31,580
of system and implementing many things

00:05:28,490 --> 00:05:37,280
missing in dragonfly so I took a bit

00:05:31,580 --> 00:05:45,530
from all other FreeBSD projects we also

00:05:37,280 --> 00:05:47,900
add some subsystem we managed to use to

00:05:45,530 --> 00:05:51,220
implement other Linux api's like idea

00:05:47,900 --> 00:05:54,750
which is a sort of small integer

00:05:51,220 --> 00:05:56,500
registering a system

00:05:54,750 --> 00:05:58,550
[Music]

00:05:56,500 --> 00:06:01,180
occasionally we'll strip some

00:05:58,550 --> 00:06:04,940
implementations from Linux itself

00:06:01,180 --> 00:06:07,220
contrary to popular beliefs all see

00:06:04,940 --> 00:06:11,110
Linux kernel code is not under a GPL

00:06:07,220 --> 00:06:15,200
license there are many pieces under

00:06:11,110 --> 00:06:19,460
multi-barreled licenses like MIT x11 and

00:06:15,200 --> 00:06:27,070
so on and this is particularly true for

00:06:19,460 --> 00:06:29,630
Durham subsystem and drivers our Linux

00:06:27,070 --> 00:06:33,169
compatibility layer keeps growing from

00:06:29,630 --> 00:06:40,760
year to year we are know of more than

00:06:33,169 --> 00:06:44,900
100 input files they mostly are wrappers

00:06:40,760 --> 00:06:47,180
from other api's which were already

00:06:44,900 --> 00:06:52,310
implemented as UNIX api's or BSD

00:06:47,180 --> 00:07:03,290
specific API most of the wrappers are

00:06:52,310 --> 00:07:07,520
under two close BSD or MIT license I 9

00:07:03,290 --> 00:07:10,970
15 kernel driver is mostly at the same

00:07:07,520 --> 00:07:19,460
state in the same state at the one found

00:07:10,970 --> 00:07:26,720
in linux 4.7 dot m we support core to -

00:07:19,460 --> 00:07:31,580
cable i GPUs which makes it GPUs from

00:07:26,720 --> 00:07:37,520
about 2005 2006 to the current

00:07:31,580 --> 00:07:39,700
generations Hardware more recently an

00:07:37,520 --> 00:07:48,770
expression support is being worked on

00:07:39,700 --> 00:07:55,580
and many people have had general story

00:07:48,770 --> 00:07:58,900
of the I 915 camel driver in 2010 there

00:07:55,580 --> 00:08:04,070
was a G sock google Summer of Code

00:07:58,900 --> 00:08:07,729
project student called

00:08:04,070 --> 00:08:09,100
David shall try to work on island 15

00:08:07,729 --> 00:08:11,770
support

00:08:09,100 --> 00:08:12,640
it didn't many things but for many

00:08:11,770 --> 00:08:18,160
reasons

00:08:12,640 --> 00:08:21,940
I don't really knows his work was not

00:08:18,160 --> 00:08:26,440
integrated into the dragonfly source

00:08:21,940 --> 00:08:30,430
code repository so it was a bit of a

00:08:26,440 --> 00:08:33,490
waste but at least when I try to

00:08:30,430 --> 00:08:36,520
understand what happened years later I

00:08:33,490 --> 00:08:39,599
found many discussions and ideas I

00:08:36,520 --> 00:08:42,640
simply could reuse with the trying to

00:08:39,599 --> 00:08:49,480
waste time finding out myself

00:08:42,640 --> 00:08:53,710
what had to be done I started to work on

00:08:49,480 --> 00:08:58,570
porting i 915 two years later in summer

00:08:53,710 --> 00:09:04,270
2012 at that point FreeBSD I just

00:08:58,570 --> 00:09:06,820
released new port of I need 15 from

00:09:04,270 --> 00:09:10,660
Linux and it was working on current

00:09:06,820 --> 00:09:13,120
hardware and since FreeBSD and dragonfly

00:09:10,660 --> 00:09:15,610
were somewhat closed due to the shared

00:09:13,120 --> 00:09:17,680
history I decided to put two parts the

00:09:15,610 --> 00:09:24,790
drivers from FreeBSD and not directly

00:09:17,680 --> 00:09:28,960
from Linux one year later we add the

00:09:24,790 --> 00:09:33,340
driver working reasonably well we had to

00:09:28,960 --> 00:09:36,550
implement some low-level support for

00:09:33,340 --> 00:09:41,680
cache management which we didn't expect

00:09:36,550 --> 00:09:43,720
at all at first but that really was the

00:09:41,680 --> 00:09:52,210
meeting point the missing piece which

00:09:43,720 --> 00:09:55,750
allowed us to working after that I

00:09:52,210 --> 00:09:58,440
discovered FreeBSD had stopped updating

00:09:55,750 --> 00:09:58,440
its driver

00:09:58,830 --> 00:10:04,090
nobody told me exactly what was

00:10:01,690 --> 00:10:07,060
happening or what the situation was

00:10:04,090 --> 00:10:09,850
people in the FreeBSD community

00:10:07,060 --> 00:10:15,649
community apparently still believed a

00:10:09,850 --> 00:10:17,089
work in progress update we

00:10:15,649 --> 00:10:20,480
be committed they will be pushed in the

00:10:17,089 --> 00:10:23,029
future but nothing happened so I didn't

00:10:20,480 --> 00:10:26,829
really understand what was going on and

00:10:23,029 --> 00:10:32,600
at some point I decided to try porting

00:10:26,829 --> 00:10:38,379
newer changes from Linux directly and it

00:10:32,600 --> 00:10:41,959
was not until one year litres and we had

00:10:38,379 --> 00:10:44,929
working house well support as well with

00:10:41,959 --> 00:10:48,980
the newest Intel CPU generation and at

00:10:44,929 --> 00:10:53,119
the time and since then I have been

00:10:48,980 --> 00:10:58,819
steadily upgrading or Linux - driver

00:10:53,119 --> 00:11:02,329
version and we are now at the Linux four

00:10:58,819 --> 00:11:04,999
point seven point ten level and all

00:11:02,329 --> 00:11:13,220
currently song 9 and 15 Hardware is

00:11:04,999 --> 00:11:17,540
supported out-of-the-box Jairam were

00:11:13,220 --> 00:11:20,059
ready and is another driver I started to

00:11:17,540 --> 00:11:24,410
port it one year later than the island

00:11:20,059 --> 00:11:27,879
15 driver which is currently mostly

00:11:24,410 --> 00:11:34,939
synchronized with the same Linux version

00:11:27,879 --> 00:11:37,309
Linux four point seven point it uses a

00:11:34,939 --> 00:11:42,889
special subsystem for memory management

00:11:37,309 --> 00:11:45,889
which is called TM and well virtual

00:11:42,889 --> 00:11:49,339
memory management is hard not many

00:11:45,889 --> 00:11:53,809
people understand really what is going

00:11:49,339 --> 00:11:58,029
on at its low hardware level so it has

00:11:53,809 --> 00:12:02,689
been stuck on the Linux 3.11 level for

00:11:58,029 --> 00:12:05,749
four years now there were so many people

00:12:02,689 --> 00:12:10,879
involved in debugging and helping to

00:12:05,749 --> 00:12:20,059
improve various subsystem related to

00:12:10,879 --> 00:12:25,399
read and support so the story was summer

00:12:20,059 --> 00:12:28,740
2012 2013 I started ported the Radeon

00:12:25,399 --> 00:12:35,840
driver which was working

00:12:28,740 --> 00:12:39,060
about one year later at that point we

00:12:35,840 --> 00:12:41,730
updated it from time to time to new

00:12:39,060 --> 00:12:44,640
world in expressions but it has been

00:12:41,730 --> 00:12:49,380
somewhat neglected and it was not until

00:12:44,640 --> 00:12:53,310
this years and they chose originally she

00:12:49,380 --> 00:12:55,890
took out her decided to partially

00:12:53,310 --> 00:13:00,000
updated to Linux four point seven point

00:12:55,890 --> 00:13:02,700
eight but unfortunately there are

00:13:00,000 --> 00:13:11,840
problems with this update and there are

00:13:02,700 --> 00:13:15,510
talks of a partial waiver the MTU driver

00:13:11,840 --> 00:13:19,950
is a new GPU driver for newer already

00:13:15,510 --> 00:13:24,270
and hardware mmm I don't really know

00:13:19,950 --> 00:13:28,710
what the radium condemns mean in terms

00:13:24,270 --> 00:13:31,500
of commercial graphic car names but it's

00:13:28,710 --> 00:13:32,360
generally required for newer GPU

00:13:31,500 --> 00:13:35,220
familism

00:13:32,360 --> 00:13:40,640
and nobody is known to be working on it

00:13:35,220 --> 00:13:40,640
and this has no change since 2015

00:13:43,010 --> 00:13:54,570
Nouveau super Chan Nouveau is the Linux

00:13:46,710 --> 00:13:56,670
kernel driver for NVIDIA hardware Nvidia

00:13:54,570 --> 00:14:01,230
artwork was liberally well supported

00:13:56,670 --> 00:14:05,630
since Nvidia itself the company loves to

00:14:01,230 --> 00:14:09,090
push his proprietary driver everywhere

00:14:05,630 --> 00:14:11,400
support has actually regressed since at

00:14:09,090 --> 00:14:13,160
some point there was a 2t accelerated

00:14:11,400 --> 00:14:16,920
driver in X Hawker

00:14:13,160 --> 00:14:22,220
but it has not been updated for years

00:14:16,920 --> 00:14:22,220
and cannot be used with resin hardware

00:14:22,670 --> 00:14:28,800
so almost nobody in the Dragonfly

00:14:25,230 --> 00:14:33,900
community as Nvidia Hardware I still

00:14:28,800 --> 00:14:37,550
play a bit with the driver it is an

00:14:33,900 --> 00:14:39,100
interesting challenge something limbs

00:14:37,550 --> 00:14:41,350
our

00:14:39,100 --> 00:14:46,410
present with the same names in different

00:14:41,350 --> 00:14:50,170
sub directories and our build system

00:14:46,410 --> 00:14:53,190
cannot compile them why I guess it could

00:14:50,170 --> 00:14:55,990
be fixed by renaming some of them or

00:14:53,190 --> 00:14:59,200
changing the belt system a bit but there

00:14:55,990 --> 00:15:02,800
is not bit have been enough interest for

00:14:59,200 --> 00:15:06,100
people to do that and well actually

00:15:02,800 --> 00:15:10,320
there was a bit of interest for NVIDIA

00:15:06,100 --> 00:15:13,090
hardware but in order to disable it and

00:15:10,320 --> 00:15:16,900
the only improvement we've had since

00:15:13,090 --> 00:15:20,350
2015 on that front is it's now possible

00:15:16,900 --> 00:15:24,310
to disable Nvidia Hardware on hybrid

00:15:20,350 --> 00:15:27,690
laptops so people can know first the use

00:15:24,310 --> 00:15:35,890
of the I 915 driver and use their laptop

00:15:27,690 --> 00:15:39,490
out of the box with this we also have a

00:15:35,890 --> 00:15:43,570
driver it's interesting it's basically

00:15:39,490 --> 00:15:48,730
using small firmware inspections

00:15:43,570 --> 00:15:54,730
there's verily old and low level BIOS

00:15:48,730 --> 00:15:57,960
API and it allows the use of nvidia

00:15:54,730 --> 00:16:01,510
hardware as a damn framebuffer

00:15:57,960 --> 00:16:05,650
it can also be used with some other GPUs

00:16:01,510 --> 00:16:10,060
like Intel and ready an but since they

00:16:05,650 --> 00:16:13,320
have accelerated drivers it's only

00:16:10,060 --> 00:16:16,480
really useful for Nvidia at this point

00:16:13,320 --> 00:16:18,400
of course nothing is accelerated so if

00:16:16,480 --> 00:16:21,190
you try to display static images like

00:16:18,400 --> 00:16:24,910
pictures and X terms and so on it's fine

00:16:21,190 --> 00:16:26,110
but if you try to play video or

00:16:24,910 --> 00:16:34,300
animations

00:16:26,110 --> 00:16:36,370
well everything will be dog slow now all

00:16:34,300 --> 00:16:43,240
of these drivers except visa

00:16:36,370 --> 00:16:45,600
you seem generic erm subsystem um it's a

00:16:43,240 --> 00:16:48,750
bit of mixed bag for

00:16:45,600 --> 00:16:54,570
in order to be able to support current

00:16:48,750 --> 00:16:58,440
head were and update drivers and so on I

00:16:54,570 --> 00:17:02,310
have somewhat neglected it and so we

00:16:58,440 --> 00:17:07,380
have some parts up to Linux for that

00:17:02,310 --> 00:17:10,319
7.10 but others much older like for

00:17:07,380 --> 00:17:15,260
example we have no dear master and no

00:17:10,319 --> 00:17:19,199
DMF support well naturally been

00:17:15,260 --> 00:17:23,730
problematic with applications but at

00:17:19,199 --> 00:17:27,020
some point it will probably become to

00:17:23,730 --> 00:17:27,020
implement the missing pieces

00:17:31,080 --> 00:17:39,480
one of the recent change was related to

00:17:34,020 --> 00:17:42,690
the i2c subsystem the i2c bus is a low

00:17:39,480 --> 00:17:47,340
bandwidth bus

00:17:42,690 --> 00:17:50,640
general it's used to provide additional

00:17:47,340 --> 00:17:53,909
information on video outputs like for

00:17:50,640 --> 00:18:02,309
example hdmi cables or even the old vga

00:17:53,909 --> 00:18:06,960
connector monitors can provide their

00:18:02,309 --> 00:18:09,650
profile they can describes a preferred

00:18:06,960 --> 00:18:15,690
video resolution and other capabilities

00:18:09,650 --> 00:18:19,230
so that PCs and other piece of the

00:18:15,690 --> 00:18:23,669
pieces of equipment can auto configure

00:18:19,230 --> 00:18:26,669
themselves to use it automatically of

00:18:23,669 --> 00:18:32,309
course it isn't always perfect working

00:18:26,669 --> 00:18:36,080
like the HDMI cable I desert of this

00:18:32,309 --> 00:18:36,080
presentation I'm sorry for that

00:18:36,270 --> 00:18:45,530
anyway I to see subsystem is a Linux

00:18:41,640 --> 00:18:48,600
system I reinvented it from scratch and

00:18:45,530 --> 00:18:52,429
finally pushed the changes to the dragon

00:18:48,600 --> 00:18:52,429
factional in October 2016

00:18:52,580 --> 00:18:58,669
it eventually replaces and all the and

00:18:57,240 --> 00:19:02,179
dragonfly specifics

00:18:58,669 --> 00:19:03,619
Systema called IIC which was completely

00:19:02,179 --> 00:19:06,049
different

00:19:03,619 --> 00:19:09,379
she was completely different api's and

00:19:06,049 --> 00:19:13,580
for no good reason it was bit of a

00:19:09,379 --> 00:19:19,129
hindrance when trying to upgrade driver

00:19:13,580 --> 00:19:23,659
versions which make it much easier for

00:19:19,129 --> 00:19:26,720
me to add a TI 915 driver and at some

00:19:23,659 --> 00:19:30,200
point it probable it would probably be a

00:19:26,720 --> 00:19:33,559
good idea to change the Radian driver to

00:19:30,200 --> 00:19:40,789
use it also it's currently only used by

00:19:33,559 --> 00:19:45,470
n 15 another big change this year has

00:19:40,789 --> 00:19:49,429
been vgs which we support via true is

00:19:45,470 --> 00:19:54,169
nozzle in accept system used to manage

00:19:49,429 --> 00:19:57,619
hybrid graphics many laptops know where

00:19:54,169 --> 00:20:00,169
days are ql GPUs since Intel always

00:19:57,619 --> 00:20:03,489
integrate a GPU in its low-end and

00:20:00,169 --> 00:20:03,489
low-power processors

00:20:03,649 --> 00:20:15,109
some companies like to also provide a

00:20:09,409 --> 00:20:20,919
more powerful GPU like Nvidia 10 from

00:20:15,109 --> 00:20:25,879
Singh MX and so on on some laptops and

00:20:20,919 --> 00:20:29,720
so we need vision secured support in

00:20:25,879 --> 00:20:32,299
order to manage these two GPUs to be

00:20:29,720 --> 00:20:35,119
able to use and then 15 GPU if the

00:20:32,299 --> 00:20:39,889
hardware was configured to use discrete

00:20:35,119 --> 00:20:42,080
Radeon or nvidia GPU by default so

00:20:39,889 --> 00:20:47,929
someone called Peter must ported it in

00:20:42,080 --> 00:20:54,129
March of this year it allows the use of

00:20:47,929 --> 00:20:54,129
a 915 on the hybrid graphics laptops

00:20:54,519 --> 00:21:01,399
Peter must also ported the different sub

00:20:57,619 --> 00:21:05,359
system called apology max and it's

00:21:01,399 --> 00:21:10,299
really specific to some Apple laptop

00:21:05,359 --> 00:21:10,299
models some poor books and poor marks

00:21:10,800 --> 00:21:19,210
some hybrid graphic laptops provide both

00:21:14,560 --> 00:21:21,700
GPUs with fuel video outputs if you

00:21:19,210 --> 00:21:24,880
program the i9 15 GPU you see something

00:21:21,700 --> 00:21:28,540
in the screen or on an external without

00:21:24,880 --> 00:21:32,140
boat like a VGA port Sam with the Nvidia

00:21:28,540 --> 00:21:34,300
already in discrete GPU but in some

00:21:32,140 --> 00:21:36,780
particular Atwell models the video

00:21:34,300 --> 00:21:42,250
outputs are not directly connected to

00:21:36,780 --> 00:21:46,630
either the screen or the cable the plugs

00:21:42,250 --> 00:21:49,740
you can use the case they are connected

00:21:46,630 --> 00:21:54,760
to a different component called GMAX and

00:21:49,740 --> 00:21:57,820
so we have to program that chip to be

00:21:54,760 --> 00:22:02,790
able to choose whether to use a 9:15

00:21:57,820 --> 00:22:07,060
hardware or nvidia hardware for example

00:22:02,790 --> 00:22:10,740
so since april of this year we are now

00:22:07,060 --> 00:22:16,500
able to also for the use of a 9:15

00:22:10,740 --> 00:22:16,500
hardware on hepl laptops

00:22:16,590 --> 00:22:22,750
unfortunately this code was directly

00:22:20,800 --> 00:22:27,100
ported from linux and not for

00:22:22,750 --> 00:22:31,570
implemented it's gplv2 curves so we put

00:22:27,100 --> 00:22:36,280
it in a separate place just to be sure

00:22:31,570 --> 00:22:42,700
not to mix it with more liberally

00:22:36,280 --> 00:22:50,170
listens license code know about user and

00:22:42,700 --> 00:22:54,990
software system called Portage's reports

00:22:50,170 --> 00:22:57,970
is framework based on FreeBSD ports

00:22:54,990 --> 00:23:00,460
which is a repository of package

00:22:57,970 --> 00:23:03,160
building instructions and we

00:23:00,460 --> 00:23:07,240
automatically patch FreeBSD ports to

00:23:03,160 --> 00:23:10,600
improve dragonfly support so we have an

00:23:07,240 --> 00:23:13,810
automatic adaptation layer and automatic

00:23:10,600 --> 00:23:17,590
test validation and so on

00:23:13,810 --> 00:23:20,410
it's single-handedly maintained by a guy

00:23:17,590 --> 00:23:24,549
called John Marino and we now have more

00:23:20,410 --> 00:23:28,460
than 25,000 packages

00:23:24,549 --> 00:23:31,250
it's really a great system for dragonfly

00:23:28,460 --> 00:23:35,150
is a small community and we don't have

00:23:31,250 --> 00:23:37,640
enough people to maintain such a number

00:23:35,150 --> 00:23:41,200
of application so it's great we are able

00:23:37,640 --> 00:23:43,460
to reuse free as the porters were can

00:23:41,200 --> 00:23:54,650
automatically create a case

00:23:43,460 --> 00:23:56,659
now it's great work well that the

00:23:54,650 --> 00:24:00,590
current version of exert but previous

00:23:56,659 --> 00:24:03,159
one we have generally current versions

00:24:00,590 --> 00:24:03,159
of drivers

00:24:05,380 --> 00:24:13,429
except 86 drivers are 2d drivers and for

00:24:10,010 --> 00:24:17,570
internal special for internal stopped

00:24:13,429 --> 00:24:19,970
releasing you were Russians and we know

00:24:17,570 --> 00:24:23,360
how to directly use code from their

00:24:19,970 --> 00:24:26,480
capture repository so this one is not

00:24:23,360 --> 00:24:32,059
based on FreeBSD ports but is managed

00:24:26,480 --> 00:24:34,220
locally and Cairo is a liberal reform

00:24:32,059 --> 00:24:38,150
generally used for 2-day accelerations

00:24:34,220 --> 00:24:43,360
and displaying pictures and so on so

00:24:38,150 --> 00:24:48,740
it's reasonably current and Mesa is a 3d

00:24:43,360 --> 00:24:56,110
driver library and is also reasonably

00:24:48,740 --> 00:25:00,250
current version completely everything

00:24:56,110 --> 00:25:06,220
related to to day operations and even 3d

00:25:00,250 --> 00:25:08,510
OpenGL works fine most graphic

00:25:06,220 --> 00:25:12,919
environments work fine

00:25:08,510 --> 00:25:14,750
I don't think we have any known users so

00:25:12,919 --> 00:25:16,820
I don't really know about the state of

00:25:14,750 --> 00:25:21,140
gnome but those are like step

00:25:16,820 --> 00:25:26,690
environments like Metis or KDE unknown

00:25:21,140 --> 00:25:30,770
to work well people even wrote the

00:25:26,690 --> 00:25:32,450
dragonfly IRC channel to congratulate us

00:25:30,770 --> 00:25:34,549
about the state of carrier support at

00:25:32,450 --> 00:25:38,019
some point

00:25:34,549 --> 00:25:41,389
we also can play sweetie camps so

00:25:38,019 --> 00:25:45,679
generally used open arena as a testing

00:25:41,389 --> 00:25:47,450
framework be sure to do Persians still

00:25:45,679 --> 00:25:54,889
continue to vote to work fine after

00:25:47,450 --> 00:26:00,100
driver updates doing right well I think

00:25:54,889 --> 00:26:00,100
that was quite fast for such an old game

00:26:00,760 --> 00:26:12,860
other people also tested GPU calculation

00:26:10,460 --> 00:26:20,570
frameworks there's something called

00:26:12,860 --> 00:26:26,990
Binet I don't really use it myself he's

00:26:20,570 --> 00:26:29,120
generally in a good state so Weyland

00:26:26,990 --> 00:26:32,090
Weyland is a bit mysterious for me it's

00:26:29,120 --> 00:26:37,220
a sort of future exact version or

00:26:32,090 --> 00:26:41,450
replacement applications have to report

00:26:37,220 --> 00:26:44,600
it so I can simply use my usual usual

00:26:41,450 --> 00:26:47,080
window manager and tell it to use

00:26:44,600 --> 00:26:50,200
Wayland so that's why I have not really

00:26:47,080 --> 00:26:54,130
tested it but other people have and

00:26:50,200 --> 00:26:58,450
apparently some versions work fine

00:26:54,130 --> 00:26:58,450
especially with the island 15 driver

00:26:59,139 --> 00:27:06,110
with newer Russians Sears Wayland or

00:27:03,380 --> 00:27:09,649
some part of Weyland I've heard about

00:27:06,110 --> 00:27:13,940
Western now requires special Libra

00:27:09,649 --> 00:27:18,110
column input to manage Mouse events

00:27:13,940 --> 00:27:20,179
keyboard support and so on people are

00:27:18,110 --> 00:27:26,029
working on it but I'm not really

00:27:20,179 --> 00:27:29,510
involved myself we have difficult spots

00:27:26,029 --> 00:27:36,490
of course one of them is virtual memory

00:27:29,510 --> 00:27:40,789
management in general graphic drivers

00:27:36,490 --> 00:27:45,100
now try to manage it from memory they

00:27:40,789 --> 00:27:47,730
have their tentacles deep into some

00:27:45,100 --> 00:27:52,470
kernel memory systems

00:27:47,730 --> 00:27:55,380
and it's our the to make sure things

00:27:52,470 --> 00:28:01,640
work probably with non Linux VM

00:27:55,380 --> 00:28:04,080
subsystems since the dragonfly VM is

00:28:01,640 --> 00:28:15,600
very different format than the next one

00:28:04,080 --> 00:28:17,309
see the models are not but VM VM is

00:28:15,600 --> 00:28:20,520
something which is a bit out of my

00:28:17,309 --> 00:28:23,280
league so we're lucky to have material

00:28:20,520 --> 00:28:26,820
and for that I think at this point is

00:28:23,280 --> 00:28:30,140
the only one to really understand what's

00:28:26,820 --> 00:28:34,260
going on with such a low-level subsystem

00:28:30,140 --> 00:28:40,860
and of course the big challenge with a

00:28:34,260 --> 00:28:44,429
915 is it keeps being Intel people

00:28:40,860 --> 00:28:48,870
constantly make changes much mores and

00:28:44,429 --> 00:28:51,740
with other drivers right now I think

00:28:48,870 --> 00:28:54,860
I've more than eight hundred commits

00:28:51,740 --> 00:28:58,890
from one Linux fashion to the next so

00:28:54,860 --> 00:29:08,760
this makes it difficult to continue

00:28:58,890 --> 00:29:12,870
updating it we also of course some

00:29:08,760 --> 00:29:18,210
recent GPUs slight display corruptions

00:29:12,870 --> 00:29:21,390
in some cases I've heard about scrambled

00:29:18,210 --> 00:29:24,419
most pointers and so on well minor

00:29:21,390 --> 00:29:27,299
things and it's generally only visible

00:29:24,419 --> 00:29:35,640
on most recent GPUs so it's possible or

00:29:27,299 --> 00:29:40,220
I 915 driver it's not stable enough for

00:29:35,640 --> 00:29:43,559
car by latest report for example so

00:29:40,220 --> 00:29:48,360
updating it to a new veeram an accession

00:29:43,559 --> 00:29:52,200
could probably fix that we also have

00:29:48,360 --> 00:29:55,440
problem with some acceleration features

00:29:52,200 --> 00:29:57,710
like last level cache support in the 2d

00:29:55,440 --> 00:29:57,710
driver

00:29:59,089 --> 00:30:06,570
it's probably something we're not doing

00:30:01,919 --> 00:30:11,519
correctly in memory management fit from

00:30:06,570 --> 00:30:14,969
memory management our key malloc

00:30:11,519 --> 00:30:19,679
functions also a note to behave

00:30:14,969 --> 00:30:22,379
differently than minutes one thing I

00:30:19,679 --> 00:30:24,960
didn't understand at first is Linux

00:30:22,379 --> 00:30:28,919
version of camel lock provides

00:30:24,960 --> 00:30:30,839
physically contiguous memory ranges but

00:30:28,919 --> 00:30:35,989
the gregandfi version only provides

00:30:30,839 --> 00:30:41,339
virtually contiguous memory ranges and

00:30:35,989 --> 00:30:45,239
GPU and CPU parts of the chips are not

00:30:41,339 --> 00:30:50,129
completely current if we white thumb

00:30:45,239 --> 00:30:52,799
sing from the CPU to cache memory it

00:30:50,129 --> 00:30:56,099
will not be completely pushed to real

00:30:52,799 --> 00:30:59,159
memory and the GPU part of the chip will

00:30:56,099 --> 00:31:02,429
not see it same in the other directions

00:30:59,159 --> 00:31:10,799
so we have to make sure cache memory is

00:31:02,429 --> 00:31:16,589
properly managed and we should try to

00:31:10,799 --> 00:31:19,169
fix our key malloc function to make sure

00:31:16,589 --> 00:31:22,529
it chooses physically contiguous memory

00:31:19,169 --> 00:31:24,419
ranges it was probably one of the

00:31:22,529 --> 00:31:27,210
reasons we have some slight display

00:31:24,419 --> 00:31:35,759
corruption in somewhere in some rare

00:31:27,210 --> 00:31:39,779
cases no about the future well an

00:31:35,759 --> 00:31:44,099
obvious future thing to do will be to

00:31:39,779 --> 00:31:49,799
continue updating the 915 driver at this

00:31:44,099 --> 00:31:53,849
point I guess most people most regular

00:31:49,799 --> 00:31:57,869
users of Intel are where you are where

00:31:53,849 --> 00:32:02,159
some rare people also use ready and

00:31:57,869 --> 00:32:04,799
hardware but a rough guess of my part

00:32:02,159 --> 00:32:06,619
will be more than 90% of people use

00:32:04,799 --> 00:32:09,210
Intel hardware

00:32:06,619 --> 00:32:10,630
most people use laptops these days and

00:32:09,210 --> 00:32:16,300
most laptops

00:32:10,630 --> 00:32:23,470
use intel chips we said we need to

00:32:16,300 --> 00:32:26,050
continue updating the NL 15 driver well

00:32:23,470 --> 00:32:30,180
of course Intel keeps creating a new

00:32:26,050 --> 00:32:30,180
driver family new GPU families so

00:32:30,510 --> 00:32:37,300
otherwise dragonfly will not be able to

00:32:33,430 --> 00:32:43,030
work on recent TPU families and recently

00:32:37,300 --> 00:32:46,600
UPS drivers also need some love but

00:32:43,030 --> 00:32:53,650
since there is such a low amount of

00:32:46,600 --> 00:32:57,100
users it's a bit difficult to improve it

00:32:53,650 --> 00:33:00,490
still uses all the api's and freebsd or

00:32:57,100 --> 00:33:07,360
dragonfly specific code there's not been

00:33:00,490 --> 00:33:09,790
a few Lee appear a based on Linux all

00:33:07,360 --> 00:33:14,580
things to do will be to use for more

00:33:09,790 --> 00:33:20,680
tests truths and ran benchmarks and so

00:33:14,580 --> 00:33:25,480
try to find out some more in a sort of

00:33:20,680 --> 00:33:28,230
automatical way regressions and fixes in

00:33:25,480 --> 00:33:28,230
immediately

00:33:29,590 --> 00:33:36,520
undeserved future things to at least

00:33:33,910 --> 00:33:41,770
investigate is high resolution timer

00:33:36,520 --> 00:33:48,370
support Linux is a subsystem called

00:33:41,770 --> 00:33:50,410
assure timer and we currently have an

00:33:48,370 --> 00:33:53,800
implementation of that sub system in

00:33:50,410 --> 00:33:58,360
dragonfly which is based on the old

00:33:53,800 --> 00:34:03,250
colored mechanism which was originally a

00:33:58,360 --> 00:34:06,130
mechanism probably implemented in 1987

00:34:03,250 --> 00:34:12,500
and it's not high resolution at all it's

00:34:06,130 --> 00:34:16,280
about it fires about 28 times per second

00:34:12,500 --> 00:34:21,380
at some points it would be interesting

00:34:16,280 --> 00:34:25,550
to implement a resolution timers with a

00:34:21,380 --> 00:34:29,720
real high resolution back-end um some

00:34:25,550 --> 00:34:33,320
developers well I think it was mostly in

00:34:29,720 --> 00:34:39,980
Revit as began to investigate and in

00:34:33,320 --> 00:34:43,940
theory using this facility properly will

00:34:39,980 --> 00:34:50,780
mean we could have important power

00:34:43,940 --> 00:34:55,340
savings so right now a modern laptops

00:34:50,780 --> 00:34:58,220
such as sky like ones uses about 2 or 3

00:34:55,340 --> 00:35:02,560
watts very for just 2d playing exhale

00:34:58,220 --> 00:35:04,940
pick Church and if we manage to

00:35:02,560 --> 00:35:09,080
drastically limits the number of times

00:35:04,940 --> 00:35:15,110
interrupts or biotic functions fire we

00:35:09,080 --> 00:35:19,510
could tremendously decrease CPU time the

00:35:15,110 --> 00:35:24,320
decrease used CPU time and generally

00:35:19,510 --> 00:35:27,610
improve power savings and get a much

00:35:24,320 --> 00:35:27,610
better battery life on a laptop

00:35:32,230 --> 00:35:37,470
now this is about people involved well

00:35:38,130 --> 00:35:48,070
party drivers the vicho was your generic

00:35:43,560 --> 00:35:50,310
student which gave have many ideas many

00:35:48,070 --> 00:35:54,640
many people were also involved and

00:35:50,310 --> 00:36:03,580
helped for various things during these

00:35:54,640 --> 00:36:13,119
last four years so one down do you have

00:36:03,580 --> 00:36:18,430
any questions you talked about formal

00:36:13,119 --> 00:36:21,790
tests with other any well there are

00:36:18,430 --> 00:36:26,140
there's an own internal tests with the

00:36:21,790 --> 00:36:30,750
name accepts me at the moment but at

00:36:26,140 --> 00:36:35,800
some point some people try to use it

00:36:30,750 --> 00:36:40,619
there's also OpenGL test to it and an

00:36:35,800 --> 00:36:45,730
exact one but I've been relatively busy

00:36:40,619 --> 00:36:49,030
trying to keep up with Intel upgrades

00:36:45,730 --> 00:36:54,359
and have not properly used them since a

00:36:49,030 --> 00:36:57,640
few years now have you ever tried to

00:36:54,359 --> 00:37:00,520
upstream some small changing to the

00:36:57,640 --> 00:37:03,010
Linux kernel code something like you you

00:37:00,520 --> 00:37:07,300
could benefit or some other BSD could

00:37:03,010 --> 00:37:10,300
believe it yeah at some point I found

00:37:07,300 --> 00:37:14,920
the hardware burg and a particular super

00:37:10,300 --> 00:37:20,200
Makram at the board and I reported it as

00:37:14,920 --> 00:37:22,560
a bug and some channel I think it was

00:37:20,200 --> 00:37:26,890
your next I'm not so sure anymore and

00:37:22,560 --> 00:37:29,500
see fix West pushed was implemented by

00:37:26,890 --> 00:37:32,160
one of the Intel developers and it's

00:37:29,500 --> 00:37:35,800
known in the Linux kernel but in general

00:37:32,160 --> 00:37:40,330
we don't have many things to push since

00:37:35,800 --> 00:37:43,290
we're already using a relatively old

00:37:40,330 --> 00:37:43,290
version of minutes

00:37:44,320 --> 00:37:53,300
at some points I have found bugs in the

00:37:47,510 --> 00:37:58,040
island 15 drivers their driver or maybe

00:37:53,300 --> 00:38:01,010
once in CTMS system in general but when

00:37:58,040 --> 00:38:07,220
I checked on the seeker and get master

00:38:01,010 --> 00:38:10,160
of it was already fixed ya know right

00:38:07,220 --> 00:38:14,270
now or focus is not in trying to push

00:38:10,160 --> 00:38:16,520
changes to Durham next or Linux it's

00:38:14,270 --> 00:38:31,400
about to being the most Linux compatible

00:38:16,520 --> 00:38:35,720
as possible BSD they're also making a

00:38:31,400 --> 00:38:37,640
Linux KPI for porting DRM drivers is

00:38:35,720 --> 00:38:39,890
there some do you work together with

00:38:37,640 --> 00:38:44,090
each other or in order totally separate

00:38:39,890 --> 00:38:46,250
projects well it's a separate project in

00:38:44,090 --> 00:38:50,780
the sense then it's been maintained in

00:38:46,250 --> 00:38:54,110
freebsd but that kpi's subsystem was

00:38:50,780 --> 00:38:59,090
originally based on more limit limited

00:38:54,110 --> 00:39:01,010
Linux also Linux KPIs system which was

00:38:59,090 --> 00:39:03,650
called differently I don't remember the

00:39:01,010 --> 00:39:09,100
name it was used for high performance

00:39:03,650 --> 00:39:10,630
network hardware and Mellanox hard were

00:39:09,100 --> 00:39:14,240
often yeah

00:39:10,630 --> 00:39:18,380
AFET oh yeah that was the effect stack

00:39:14,240 --> 00:39:20,300
and I originally took some of that curve

00:39:18,380 --> 00:39:24,560
from the offered stack if you check the

00:39:20,300 --> 00:39:28,490
copyright mentions in the Linux

00:39:24,560 --> 00:39:31,040
something that edge drivers we have in

00:39:28,490 --> 00:39:34,850
dragonfly originating from FreeBSD and

00:39:31,040 --> 00:39:38,240
the effect stack em in the other

00:39:34,850 --> 00:39:40,330
iterations one of the effective loppers

00:39:38,240 --> 00:39:43,640
took some of patch engines and

00:39:40,330 --> 00:39:47,510
incorporated in that Linux KPI subsystem

00:39:43,640 --> 00:39:49,220
so changes work both way but say they

00:39:47,510 --> 00:39:52,460
cannot really be maintained in a

00:39:49,220 --> 00:39:56,500
commentary for many details a specific

00:39:52,460 --> 00:39:56,500
to dragonfly or FreeBSD kernel

00:39:59,350 --> 00:40:03,920
does does dragon play implement the user

00:40:03,050 --> 00:40:08,000
pointer interface

00:40:03,920 --> 00:40:11,840
sorry dragonfly implement the DRM user

00:40:08,000 --> 00:40:13,900
pointer interface CRM user pointer

00:40:11,840 --> 00:40:16,460
interface right so it lets you basically

00:40:13,900 --> 00:40:19,160
malloc memory and then use an i/o

00:40:16,460 --> 00:40:25,460
control to create a gem object that's

00:40:19,160 --> 00:40:28,900
backed by by user mean yeah there are

00:40:25,460 --> 00:40:34,460
some Yoshiki l which allows the use of

00:40:28,900 --> 00:40:38,660
user generated data without having to

00:40:34,460 --> 00:40:44,810
copy it change it in one way or another

00:40:38,660 --> 00:40:47,570
I think at the moment well implemented

00:40:44,810 --> 00:40:54,140
it implementing it requires some work

00:40:47,570 --> 00:40:58,820
and well I prefer to keep grading a 9/15

00:40:54,140 --> 00:41:03,070
driver versions than trying to it could

00:40:58,820 --> 00:41:06,010
be helpful to improve performance but at

00:41:03,070 --> 00:41:11,600
some right now what we need is to

00:41:06,010 --> 00:41:14,780
continue updating the driver and make

00:41:11,600 --> 00:41:18,260
sure we still work with you were Intel

00:41:14,780 --> 00:41:19,910
hardware so it will probably be changed

00:41:18,260 --> 00:41:23,200
at some point but this is not the

00:41:19,910 --> 00:41:23,200
highest priority right now

00:41:31,640 --> 00:41:39,420
in recent Musa and so on there is a lot

00:41:36,480 --> 00:41:41,730
of work where they are using fairly

00:41:39,420 --> 00:41:49,490
script or passing instead of shared

00:41:41,730 --> 00:41:53,190
memory directly I forgot the name of the

00:41:49,490 --> 00:41:55,490
call that he's been used for that if

00:41:53,190 --> 00:41:58,430
you've done some work or so to support

00:41:55,490 --> 00:42:01,200
[Music]

00:41:58,430 --> 00:42:10,290
descriptive passing api's was out on the

00:42:01,200 --> 00:42:14,599
old shared memory interfaces involved

00:42:10,290 --> 00:42:20,400
with since a long time

00:42:14,599 --> 00:42:22,680
one of the recent messages was a bit

00:42:20,400 --> 00:42:26,940
problematic but it was I think one year

00:42:22,680 --> 00:42:31,280
ago maybe this is a performance

00:42:26,940 --> 00:42:35,609
optimization but I have not

00:42:31,280 --> 00:42:39,450
it's a security issue well no I have not

00:42:35,609 --> 00:42:45,230
really followed the change I'm mostly

00:42:39,450 --> 00:42:45,230
focusing on the eye 915 drivers is this

00:42:54,010 --> 00:43:02,930
well in general we take miss packages

00:43:00,050 --> 00:43:08,320
the me report has presenting the FreeBSD

00:43:02,930 --> 00:43:08,320
upholstery and we don't really change it

00:43:17,410 --> 00:43:22,760
say yeah at some point we will probably

00:43:19,850 --> 00:43:25,869
need to add support the new kernel

00:43:22,760 --> 00:43:29,710
interfaces but right now

00:43:25,869 --> 00:43:29,710

YouTube URL: https://www.youtube.com/watch?v=l8JfLKvuLE4


