Title: FreeBSD as a Hosting Platform, Revisited - Patrick M. Hausen
Publication date: 2019-10-16
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

At EuroBSDCon 2010 I presented how we used NanoBSD to facilitate the operation and management of larger quantities of hosting servers.
Seven years later not only has hardware become incredibly more powerful. Customers and software developing colleagues alike expect more agile management, provisioning and deployment of resources to meet their applications’ demands.

I’d like to present how we employ jails and ZFS to manage a large number of “virtual” environments while we kept some of the concepts learned from successful use of NanoBSD as far as software provisioning, updates and general management of production environments are concerned.

Speaker biography:

Patrick M. Hausen, born 1968, developed an interest in “all things Unix” and networking in general in the late 80’s. Having worked on various commercial implementations and looking for an operating system that would be more capable than Minix for actual daily use at home he found out about FreeBSD in 1993. He’s been using, hacking, advocatiing and occasionally cursing FreeBSD ever since.
Captions: 
	00:00:00,030 --> 00:00:06,899
I'm surprised to see so many faces in

00:00:02,879 --> 00:00:09,090
here the theme is more application

00:00:06,899 --> 00:00:10,620
oriented when I was preparing the

00:00:09,090 --> 00:00:13,259
presentation I thought I should apply

00:00:10,620 --> 00:00:15,660
for the least technical content of all

00:00:13,259 --> 00:00:19,260
the conference talks award so we're not

00:00:15,660 --> 00:00:21,660
going to dig deep into ansible playbooks

00:00:19,260 --> 00:00:23,100
programming details and everything but

00:00:21,660 --> 00:00:25,170
I'll give you an outline of the

00:00:23,100 --> 00:00:27,330
architecture we developed and the

00:00:25,170 --> 00:00:33,660
reasoning behind it and our experience

00:00:27,330 --> 00:00:36,120
with it the agenda is not the table of

00:00:33,660 --> 00:00:39,239
contents so I don't have any slides with

00:00:36,120 --> 00:00:41,040
all of this as a title it gives you a

00:00:39,239 --> 00:00:45,510
rough outline of what I'd like to talk

00:00:41,040 --> 00:00:47,910
about and this is introduction of our

00:00:45,510 --> 00:00:50,550
company and what we do the challenges we

00:00:47,910 --> 00:00:54,719
face in hosting our first attempt at

00:00:50,550 --> 00:00:56,850
solving these challenges and then why we

00:00:54,719 --> 00:00:59,609
change from a nano bsd set up to j based

00:00:56,850 --> 00:01:01,829
architecture what we do now in our data

00:00:59,609 --> 00:01:06,600
center and what we like to do in the

00:01:01,829 --> 00:01:12,060
future I myself have been working in IT

00:01:06,600 --> 00:01:16,400
since 1986 and my UNIX endeavors started

00:01:12,060 --> 00:01:20,130
with discovering meanings in 1989 and

00:01:16,400 --> 00:01:22,560
ever since I took on FreeBSD in 93 I

00:01:20,130 --> 00:01:25,920
haven't looked back and never agree

00:01:22,560 --> 00:01:27,990
regretted it I'm currently in charge of

00:01:25,920 --> 00:01:34,799
network and data center operations at

00:01:27,990 --> 00:01:38,700
puncta te and I'm proud member of the

00:01:34,799 --> 00:01:41,310
team mops the magnificent operators we

00:01:38,700 --> 00:01:45,899
have three guys who are originally

00:01:41,310 --> 00:01:50,159
operator type people and one fresh

00:01:45,899 --> 00:01:52,020
colleague who is a developer the fun

00:01:50,159 --> 00:01:54,750
part is that mops - all the German

00:01:52,020 --> 00:01:57,479
speakers means a park that smallish kind

00:01:54,750 --> 00:02:02,880
of dock so we have an official team logo

00:01:57,479 --> 00:02:07,670
that looks like this does that mean that

00:02:02,880 --> 00:02:11,310
we do DevOps now well yes no I think

00:02:07,670 --> 00:02:13,200
DevOps must be the most misused IT term

00:02:11,310 --> 00:02:16,140
for last year -

00:02:13,200 --> 00:02:18,560
when managers say DevOps they mean one

00:02:16,140 --> 00:02:22,740
or two things most of the time either

00:02:18,560 --> 00:02:26,700
they mean no UPS so the developers

00:02:22,740 --> 00:02:28,320
because the operators job but there's a

00:02:26,700 --> 00:02:30,330
reason why people like me are still

00:02:28,320 --> 00:02:33,500
around and why it's a profession to

00:02:30,330 --> 00:02:36,150
manage a data center or they mean

00:02:33,500 --> 00:02:38,910
infrastructure as code and just slap the

00:02:36,150 --> 00:02:39,270
DevOps label on it and I'm fine with

00:02:38,910 --> 00:02:41,220
that

00:02:39,270 --> 00:02:43,050
because this is what we're trying to do

00:02:41,220 --> 00:02:47,130
and what I'm going to show you what we

00:02:43,050 --> 00:02:51,450
do this is the agenda of our entire team

00:02:47,130 --> 00:02:55,560
for the last couple of years from Totti

00:02:51,450 --> 00:02:58,500
II the company was founded in 96 started

00:02:55,560 --> 00:03:00,420
as an isp well internet these lines are

00:02:58,500 --> 00:03:03,150
a commodity nowadays even for companies

00:03:00,420 --> 00:03:06,660
so now we're hosting web applications

00:03:03,150 --> 00:03:09,750
and we have to development teams for

00:03:06,660 --> 00:03:11,730
hosting roughly a hundred servers we

00:03:09,750 --> 00:03:15,810
arrive member Dean ik member all the

00:03:11,730 --> 00:03:20,420
necessary requirements as I said three

00:03:15,810 --> 00:03:20,420
teams and all in all about 30 people

00:03:21,860 --> 00:03:29,120
challenges when hosting as I see it our

00:03:25,520 --> 00:03:33,180
availability performance cost and

00:03:29,120 --> 00:03:35,580
manageability and manageability is often

00:03:33,180 --> 00:03:37,860
underestimated but it's the key point in

00:03:35,580 --> 00:03:39,739
my opinion that these sites about the

00:03:37,860 --> 00:03:42,480
scalability of your entire data center

00:03:39,739 --> 00:03:44,250
how many people do you need to manage a

00:03:42,480 --> 00:03:47,130
couple of servers and how far can you

00:03:44,250 --> 00:03:50,160
scale we now have a hundred at the

00:03:47,130 --> 00:03:52,230
current location we can place about 300

00:03:50,160 --> 00:03:55,350
but what if we want to scale to a

00:03:52,230 --> 00:03:56,280
thousand or even more hopefully we will

00:03:55,350 --> 00:03:59,040
get there one day

00:03:56,280 --> 00:04:02,600
and we don't necessarily want to

00:03:59,040 --> 00:04:02,600
increase the number of employees tenfold

00:04:04,520 --> 00:04:09,870
ok one challenge when it comes to server

00:04:07,620 --> 00:04:11,340
management how do you do updates well

00:04:09,870 --> 00:04:15,660
I'd never do updates because never

00:04:11,340 --> 00:04:16,410
change the running system right and how

00:04:15,660 --> 00:04:18,359
do you backup

00:04:16,410 --> 00:04:21,799
I mean nobody wants backup everybody

00:04:18,359 --> 00:04:21,799
just wants restore I didn't get it

00:04:26,660 --> 00:04:34,080
so as our first try to get a better

00:04:30,810 --> 00:04:37,289
management platform for service we try

00:04:34,080 --> 00:04:39,840
to tackle the individual machine and we

00:04:37,289 --> 00:04:42,690
use the Nano bsd based set up nano bsd

00:04:39,840 --> 00:04:47,639
was developed by pauline in camp for

00:04:42,690 --> 00:04:50,789
embedded systems and the service we used

00:04:47,639 --> 00:04:53,070
had two hard disks you may know the

00:04:50,789 --> 00:04:55,470
device names from freebsd and what we

00:04:53,070 --> 00:04:57,690
did was we put a John mirror on top of

00:04:55,470 --> 00:05:00,930
that on those hard disk so you know it

00:04:57,690 --> 00:05:05,280
even gets technical and on this mirror

00:05:00,930 --> 00:05:10,320
we put a couple of partitions and these

00:05:05,280 --> 00:05:13,949
partitions part of the Nano BS the

00:05:10,320 --> 00:05:16,050
architecture we have two slices that are

00:05:13,949 --> 00:05:20,159
for the operating systems and all the

00:05:16,050 --> 00:05:22,979
install packages so this is the entire

00:05:20,159 --> 00:05:25,919
root system over here and we have an

00:05:22,979 --> 00:05:27,720
alternate slice with more or less the

00:05:25,919 --> 00:05:30,870
identical software that is not active

00:05:27,720 --> 00:05:35,430
and you can update the system by simply

00:05:30,870 --> 00:05:37,860
using DD to copy a prebuilt image to the

00:05:35,430 --> 00:05:41,699
inactive slice reboot into the other one

00:05:37,860 --> 00:05:44,550
you can easily roll back and so on the

00:05:41,699 --> 00:05:47,250
persistent customer data goes into the

00:05:44,550 --> 00:05:49,110
third slice as goes the persistent

00:05:47,250 --> 00:05:51,120
conflict data that you need and the

00:05:49,110 --> 00:05:56,030
magic of nano bsd will copy it over to

00:05:51,120 --> 00:05:56,030
ECC at boot time works quite well

00:05:57,590 --> 00:06:05,280
advantages core OS and packages are all

00:06:01,830 --> 00:06:07,830
read-only so there's one less thing to

00:06:05,280 --> 00:06:08,520
worry about even if somebody would have

00:06:07,830 --> 00:06:12,810
root access

00:06:08,520 --> 00:06:14,940
he cannot build say a Trojan into sshd

00:06:12,810 --> 00:06:18,300
or everything a keylogger stuff like

00:06:14,940 --> 00:06:19,949
that the partition is not modifiable if

00:06:18,300 --> 00:06:21,960
you raise the secure level of your

00:06:19,949 --> 00:06:24,719
system you cannot remount it at runtime

00:06:21,960 --> 00:06:28,229
so you're secure in that regard

00:06:24,719 --> 00:06:30,990
you get atomic updates so hopefully if

00:06:28,229 --> 00:06:32,760
your build procedure is okay you have

00:06:30,990 --> 00:06:34,289
everything in one consistent state

00:06:32,760 --> 00:06:37,259
fitting together so no

00:06:34,289 --> 00:06:42,719
libraries and everything you get one

00:06:37,259 --> 00:06:45,960
system that you know will work you can

00:06:42,719 --> 00:06:50,009
roll back by simply activating the

00:06:45,960 --> 00:06:52,349
previous active petition sometimes

00:06:50,009 --> 00:06:54,270
that's not quite true for example when

00:06:52,349 --> 00:06:57,119
you upgrade from FreeBSD seven to

00:06:54,270 --> 00:06:59,819
FreeBSD eight the metadata for the

00:06:57,119 --> 00:07:02,669
Jumeirah module gets updated on disk so

00:06:59,819 --> 00:07:05,550
you cannot go back but most of the time

00:07:02,669 --> 00:07:07,939
you can and if you do it right you have

00:07:05,550 --> 00:07:13,339
identical software for all your service

00:07:07,939 --> 00:07:18,149
yeah but there are also some drawbacks

00:07:13,339 --> 00:07:20,399
the first one was homemade we did not at

00:07:18,149 --> 00:07:22,589
the time automate image creation so it

00:07:20,399 --> 00:07:25,499
was still a manual process installing

00:07:22,589 --> 00:07:28,589
the packages from ports into the new

00:07:25,499 --> 00:07:30,569
nano bsd image sometimes people make

00:07:28,589 --> 00:07:34,770
mistakes we had in consists of software

00:07:30,569 --> 00:07:36,839
version stuff like that then caused by

00:07:34,770 --> 00:07:38,899
the architecture we need to reboot of

00:07:36,839 --> 00:07:42,300
the entire machine for each update and

00:07:38,899 --> 00:07:44,370
we cannot easily install additional

00:07:42,300 --> 00:07:46,110
software after machine has been

00:07:44,370 --> 00:07:47,969
provisioned with a certain set of

00:07:46,110 --> 00:07:49,589
software without going through all the

00:07:47,969 --> 00:07:51,209
process built into a image and

00:07:49,589 --> 00:07:52,979
everything and sometimes a customer

00:07:51,209 --> 00:07:55,289
calls in and says well I need PHP

00:07:52,979 --> 00:08:01,709
module' through so how do you go about

00:07:55,289 --> 00:08:03,209
that yeah and we have one PHP one my

00:08:01,709 --> 00:08:05,999
sequel version at everything for the

00:08:03,209 --> 00:08:08,519
entire machine so if you have a shared

00:08:05,999 --> 00:08:11,009
environment like Apache V House or

00:08:08,519 --> 00:08:12,899
whatever you cannot have different PHP

00:08:11,009 --> 00:08:16,019
versions for different customers on that

00:08:12,899 --> 00:08:18,659
very same system we addressed some of

00:08:16,019 --> 00:08:21,180
these with a knowledge we acquired

00:08:18,659 --> 00:08:23,759
during the last couple of years about

00:08:21,180 --> 00:08:27,059
infrastructure as code and everything we

00:08:23,759 --> 00:08:28,919
dug deep into vagrant so now Nano B as

00:08:27,059 --> 00:08:31,860
the image creation for our legacy

00:08:28,919 --> 00:08:33,959
service is a simple vagrant up and then

00:08:31,860 --> 00:08:36,209
an up to date image will come out of

00:08:33,959 --> 00:08:39,449
that after three or four hours coffee

00:08:36,209 --> 00:08:41,490
break no problem you can run it on a

00:08:39,449 --> 00:08:43,680
server it triggered by Jenkins what

00:08:41,490 --> 00:08:46,690
whatever go the entire continues

00:08:43,680 --> 00:08:50,800
delivery way it works really great

00:08:46,690 --> 00:08:53,170
and we built our own put here to build

00:08:50,800 --> 00:08:55,230
our own packages which is an absolutely

00:08:53,170 --> 00:08:57,550
fantastic tool

00:08:55,230 --> 00:08:59,470
one of the cornerstones when people ask

00:08:57,550 --> 00:09:01,240
me why FreeBSD I always say they give

00:08:59,470 --> 00:09:03,569
you infrastructure nor product and

00:09:01,240 --> 00:09:10,839
career is definitely one of those

00:09:03,569 --> 00:09:13,180
infrastructure things so what do we want

00:09:10,839 --> 00:09:15,040
from the new architecture we want an

00:09:13,180 --> 00:09:17,889
even better isolation of customers on

00:09:15,040 --> 00:09:20,410
the same machine something virtual

00:09:17,889 --> 00:09:24,519
machine like we want individual

00:09:20,410 --> 00:09:26,680
configuration per customer and we want a

00:09:24,519 --> 00:09:29,459
couple of instances on one piece of

00:09:26,680 --> 00:09:34,509
hardware faster updates and everything

00:09:29,459 --> 00:09:37,000
fully automated not that surprising

00:09:34,509 --> 00:09:39,160
altogether that has been the talk of the

00:09:37,000 --> 00:09:43,209
last years and data center management

00:09:39,160 --> 00:09:46,480
and hosting in architecture so we have

00:09:43,209 --> 00:09:49,720
two guys that are currently I think the

00:09:46,480 --> 00:09:53,380
Big Kahuna is here we into the OpenStack

00:09:49,720 --> 00:09:55,600
summit in Atlanta and so a private cloud

00:09:53,380 --> 00:09:58,689
with all hypervisor based architecture

00:09:55,600 --> 00:10:01,329
seems to be the thing to do maybe or

00:09:58,689 --> 00:10:04,720
that one I must admit they have a cute

00:10:01,329 --> 00:10:08,170
mascot so it's all docker you build it

00:10:04,720 --> 00:10:11,980
you run eight containers yeah 100%

00:10:08,170 --> 00:10:16,930
buzzword compliant but didn't fit us

00:10:11,980 --> 00:10:24,699
that well so why not why not a

00:10:16,930 --> 00:10:27,819
hypervisor one VM per customer we

00:10:24,699 --> 00:10:31,079
decided against hypervisors because it

00:10:27,819 --> 00:10:33,730
would increase our workload multifold

00:10:31,079 --> 00:10:37,089
because each VM is a separate system you

00:10:33,730 --> 00:10:39,850
can it easily take into the VMS file

00:10:37,089 --> 00:10:41,829
system from the outside to do updates

00:10:39,850 --> 00:10:44,199
over 100 VMs at the same time you have

00:10:41,829 --> 00:10:46,600
to treat each VM as a separate host even

00:10:44,199 --> 00:10:49,300
if you go automating stuff with ansible

00:10:46,600 --> 00:10:53,459
or chef dot IO or everything essentially

00:10:49,300 --> 00:10:53,459
on this wait a minute

00:10:54,010 --> 00:10:59,140
here we have sixteen machines to manage

00:10:57,100 --> 00:11:03,790
although it's only four pieces of

00:10:59,140 --> 00:11:06,220
physical hardware then you have a little

00:11:03,790 --> 00:11:07,840
bit of overhead not that much given how

00:11:06,220 --> 00:11:10,450
powerful today's machines are that's not

00:11:07,840 --> 00:11:12,640
really a problem but you cannot smoothly

00:11:10,450 --> 00:11:14,710
over provision like in a symmetric

00:11:12,640 --> 00:11:16,750
multiprocessing environment memory and

00:11:14,710 --> 00:11:20,710
CPU in a hypervisor but you have fixed

00:11:16,750 --> 00:11:24,370
resource sets for each VM and then which

00:11:20,710 --> 00:11:27,190
virtualization technology to pick when

00:11:24,370 --> 00:11:28,810
VMware came up to be the big guys I've

00:11:27,190 --> 00:11:31,420
been talking that I'm at every cbut fair

00:11:28,810 --> 00:11:33,520
year after year and asked them ok please

00:11:31,420 --> 00:11:35,680
show me you you always tell me you can

00:11:33,520 --> 00:11:38,230
save so much money by employing VMware

00:11:35,680 --> 00:11:40,390
ok just do the math for me you're the

00:11:38,230 --> 00:11:43,360
sales guy you do it and they just

00:11:40,390 --> 00:11:45,910
couldn't because their math depends on

00:11:43,360 --> 00:11:48,300
lots of servers that are running Windows

00:11:45,910 --> 00:11:52,270
like operating systems and I mostly idle

00:11:48,300 --> 00:11:53,800
and like in enterprises of course you

00:11:52,270 --> 00:11:55,450
have your Active Directory you have your

00:11:53,800 --> 00:11:58,150
database server you have a exchange

00:11:55,450 --> 00:12:00,310
server and if you can fit all of them on

00:11:58,150 --> 00:12:03,940
one machine and you're saving of course

00:12:00,310 --> 00:12:06,040
for a data center where rent a dedicated

00:12:03,940 --> 00:12:09,640
piece of hardware to a customer and the

00:12:06,040 --> 00:12:12,430
customer wants this precise amount of

00:12:09,640 --> 00:12:14,410
CPU RAM and everything that doesn't

00:12:12,430 --> 00:12:18,190
scale if you count the cost of VMware

00:12:14,410 --> 00:12:21,400
licenses on top plus hardware that is

00:12:18,190 --> 00:12:23,320
ten times as powerful as a standard one

00:12:21,400 --> 00:12:26,020
unit server with a single socket or two

00:12:23,320 --> 00:12:30,850
sockets is most of the time more than

00:12:26,020 --> 00:12:33,760
ten times as expensive so not that much

00:12:30,850 --> 00:12:38,080
scalability in our case and storage is

00:12:33,760 --> 00:12:40,690
either fast or cheap yeah I didn't

00:12:38,080 --> 00:12:42,430
forget reliable that reliable is not an

00:12:40,690 --> 00:12:47,860
option I mean leaving out reliable you

00:12:42,430 --> 00:12:51,400
don't want that okay so while about that

00:12:47,860 --> 00:12:57,330
container guy lat cute blue whale I must

00:12:51,400 --> 00:12:57,330
admit I have a cute level well no

00:12:58,720 --> 00:13:04,330
at least that's what even daca

00:13:02,560 --> 00:13:06,400
proponents and people working in the

00:13:04,330 --> 00:13:08,200
field keep telling me they say if you

00:13:06,400 --> 00:13:10,260
want to ssh into a container you're

00:13:08,200 --> 00:13:12,070
doing it wrong it's all about

00:13:10,260 --> 00:13:16,990
orchestrating containers from the

00:13:12,070 --> 00:13:20,560
outside and you don't do that okay why

00:13:16,990 --> 00:13:24,010
don't you do it because it's supposed to

00:13:20,560 --> 00:13:26,800
work like this what what you have to

00:13:24,010 --> 00:13:28,900
look at virtualization technologies with

00:13:26,800 --> 00:13:31,210
the question what precisely does the

00:13:28,900 --> 00:13:34,720
technology actually virtualize so if you

00:13:31,210 --> 00:13:37,870
have a hypervisor it's like IBM VM by in

00:13:34,720 --> 00:13:40,870
the 70s it virtualizes the entire

00:13:37,870 --> 00:13:42,910
machine you get n machines instead of

00:13:40,870 --> 00:13:46,570
one and you put an operating system

00:13:42,910 --> 00:13:49,240
kernel boot loader hey VMware even has a

00:13:46,570 --> 00:13:51,460
BIOS setup for their machines that you

00:13:49,240 --> 00:13:52,720
can get into yeah your virtualizing

00:13:51,460 --> 00:13:54,910
machines and you can run arbitrary

00:13:52,720 --> 00:13:56,800
constants the plus sign you can run

00:13:54,910 --> 00:14:02,440
Windows you can run Linux Chicken on

00:13:56,800 --> 00:14:04,870
FreeBSD okay when we have jails which is

00:14:02,440 --> 00:14:07,080
much more lightweight we essentially

00:14:04,870 --> 00:14:11,500
which relies slash has been slash in it

00:14:07,080 --> 00:14:13,420
so a jail is just a file system tree

00:14:11,500 --> 00:14:15,760
starting at some top-level directory and

00:14:13,420 --> 00:14:18,310
then we can bootstrap an entire

00:14:15,760 --> 00:14:21,190
operating system with everything at the

00:14:18,310 --> 00:14:24,459
kernel so we start at another process

00:14:21,190 --> 00:14:27,459
and then go all the way to from et CR C

00:14:24,459 --> 00:14:32,110
all the way down until all the services

00:14:27,459 --> 00:14:34,839
are started and docker actually aims to

00:14:32,110 --> 00:14:37,240
just visualize a single process just one

00:14:34,839 --> 00:14:39,790
thing and nginx server my sequel

00:14:37,240 --> 00:14:44,560
database moriah DB elasticsearch

00:14:39,790 --> 00:14:46,750
what-have-you and it happens to be that

00:14:44,560 --> 00:14:49,510
our customers are of the style that they

00:14:46,750 --> 00:14:51,490
want the full stack on one machine with

00:14:49,510 --> 00:14:56,470
a persistent storage and they can SSH

00:14:51,490 --> 00:14:59,080
into it that we as operators want to

00:14:56,470 --> 00:15:02,500
give them don't want to give them their

00:14:59,080 --> 00:15:04,660
hypervisor based fully emulated virtual

00:15:02,500 --> 00:15:09,690
machine because that's too expensive so

00:15:04,660 --> 00:15:09,690
we meet precisely here in the jails

00:15:10,430 --> 00:15:15,840
this is a rough summary they want the

00:15:14,100 --> 00:15:19,890
semantics of a VM they want to feel

00:15:15,840 --> 00:15:25,460
alone on their system and we want fast

00:15:19,890 --> 00:15:25,460
provisioning easy updates and low cost

00:15:27,740 --> 00:15:32,310
okay

00:15:28,950 --> 00:15:34,230
jails are at an advantage here because

00:15:32,310 --> 00:15:37,290
they look like a VM to the customer they

00:15:34,230 --> 00:15:39,120
have lower overhead contrary to docker

00:15:37,290 --> 00:15:42,330
they don't require a separate server

00:15:39,120 --> 00:15:43,950
process and now it's getting really

00:15:42,330 --> 00:15:46,140
beautiful because from the view of the

00:15:43,950 --> 00:15:48,630
host system all the processes inside the

00:15:46,140 --> 00:15:51,180
jails are just regular system processes

00:15:48,630 --> 00:15:54,660
and all the J's file systems are just

00:15:51,180 --> 00:15:57,450
regular system file systems so you can

00:15:54,660 --> 00:16:00,900
with local file system semantics always

00:15:57,450 --> 00:16:02,730
touch and twiddle and tweak all the

00:16:00,900 --> 00:16:04,860
stuff that is in the jails from within

00:16:02,730 --> 00:16:10,800
the host system which you cannot do

00:16:04,860 --> 00:16:13,170
either with docker and nor with a VM so

00:16:10,800 --> 00:16:15,450
and the last innovation is virtualized

00:16:13,170 --> 00:16:18,690
Network stack which is absolutely great

00:16:15,450 --> 00:16:20,880
and if you know your stuff you can do

00:16:18,690 --> 00:16:26,970
whatever you like I'll get into the

00:16:20,880 --> 00:16:28,800
architecture a little bit later this

00:16:26,970 --> 00:16:32,010
virtualized network stack the image in

00:16:28,800 --> 00:16:34,650
freebsd introduces the e pair interface

00:16:32,010 --> 00:16:37,800
a pair is essentially a virtual patch

00:16:34,650 --> 00:16:39,990
cable and one end of the cable happens

00:16:37,800 --> 00:16:42,240
to be inside the jail as an interface

00:16:39,990 --> 00:16:45,600
that you can if config up down IP

00:16:42,240 --> 00:16:47,190
address ipv6 everything and the other

00:16:45,600 --> 00:16:50,010
end happens to be an interface in the

00:16:47,190 --> 00:16:51,960
host system and every packet that the

00:16:50,010 --> 00:16:54,810
jail processes right into that interface

00:16:51,960 --> 00:16:56,180
happens to come out at the host side and

00:16:54,810 --> 00:16:59,820
the other way around

00:16:56,180 --> 00:17:02,250
he's got his own MAC address so you can

00:16:59,820 --> 00:17:04,740
bridge route and network at restaurants

00:17:02,250 --> 00:17:07,439
later to your heart's content we use

00:17:04,740 --> 00:17:10,579
bridges to connect those interfaces I'll

00:17:07,439 --> 00:17:10,579
show you the architecture

00:17:13,230 --> 00:17:18,120
we have the couple of customer jails the

00:17:15,569 --> 00:17:20,639
Iver interface is called Vienna zero in

00:17:18,120 --> 00:17:22,529
in all of the jails and then we have a

00:17:20,639 --> 00:17:23,789
bridge interface which is connected to

00:17:22,529 --> 00:17:26,329
the physical interface of the host

00:17:23,789 --> 00:17:30,330
machine which is connected to the wire

00:17:26,329 --> 00:17:33,149
and the beauty is you don't need to do

00:17:30,330 --> 00:17:36,539
it that way instead of the physical

00:17:33,149 --> 00:17:39,240
interface you can use a cloned loopback

00:17:36,539 --> 00:17:41,669
interface instance for example assigned

00:17:39,240 --> 00:17:44,399
a private IP address to that and then

00:17:41,669 --> 00:17:47,639
use your host systems routing and noting

00:17:44,399 --> 00:17:51,240
capability to do whatever you like you

00:17:47,639 --> 00:17:55,679
can create multiple of these in every

00:17:51,240 --> 00:17:59,700
jail you can connect them to VLAN tag

00:17:55,679 --> 00:18:03,240
sub interfaces of this you can use a

00:17:59,700 --> 00:18:07,919
jail as a Rooter and whatever you desire

00:18:03,240 --> 00:18:09,600
it just works and if you know networking

00:18:07,919 --> 00:18:12,139
basics it's really really really

00:18:09,600 --> 00:18:12,139
straightforward

00:18:14,960 --> 00:18:21,029
ok the shameless marketing plug we

00:18:18,779 --> 00:18:23,070
called the new product the pro server

00:18:21,029 --> 00:18:26,539
this is how we address the customers

00:18:23,070 --> 00:18:29,549
what is so by developers for developers

00:18:26,539 --> 00:18:32,429
with that product it is that we try to

00:18:29,549 --> 00:18:35,220
put all the technologies in there that

00:18:32,429 --> 00:18:37,320
more than web applications need for a

00:18:35,220 --> 00:18:40,679
certain set of applications so we're

00:18:37,320 --> 00:18:42,630
still PHP based some people would

00:18:40,679 --> 00:18:51,200
challenge the modern when it comes to

00:18:42,630 --> 00:18:54,210
PHP but we put elasticsearch locks the

00:18:51,200 --> 00:18:57,240
variety be instead of my sequel engine

00:18:54,210 --> 00:18:59,460
eggs and Apache and everything that you

00:18:57,240 --> 00:19:02,519
might want if you are a PHP developer in

00:18:59,460 --> 00:19:04,679
there so the customer gets a full set of

00:19:02,519 --> 00:19:08,130
features and doesn't have to install

00:19:04,679 --> 00:19:09,870
that themselves or care about it that

00:19:08,130 --> 00:19:13,049
update thing again it's a managed

00:19:09,870 --> 00:19:16,049
platform that combines the power of a

00:19:13,049 --> 00:19:18,419
managed platform with root access so

00:19:16,049 --> 00:19:21,299
configuration wise the customers can do

00:19:18,419 --> 00:19:24,020
whatever they want but we take care of

00:19:21,299 --> 00:19:26,990
all the software in an automated fashion

00:19:24,020 --> 00:19:29,510
okay customers get either virtual pro

00:19:26,990 --> 00:19:31,400
server this is a jail instance all that

00:19:29,510 --> 00:19:34,100
can render dedicated pro server which is

00:19:31,400 --> 00:19:35,900
a virtual instance jail host and they

00:19:34,100 --> 00:19:39,020
can put as many jails on that as they

00:19:35,900 --> 00:19:44,690
desire and for us is all the same

00:19:39,020 --> 00:19:46,910
technology so it's easily manageable our

00:19:44,690 --> 00:19:51,530
current virtual pro server host is all

00:19:46,910 --> 00:19:55,670
SSD based all that FS of course 256 gigs

00:19:51,530 --> 00:19:58,100
of ram 20 cores 40 threats and currently

00:19:55,670 --> 00:20:11,059
we have one machine with 50 jails and

00:19:58,100 --> 00:20:17,090
it's just twiddling could do more so how

00:20:11,059 --> 00:20:20,090
do we manage this sue actually the stack

00:20:17,090 --> 00:20:22,550
has grown quite big the jail is of

00:20:20,090 --> 00:20:24,950
course the most important element of

00:20:22,550 --> 00:20:27,260
abstraction here and we have looked into

00:20:24,950 --> 00:20:29,750
jail manages there has been easy jail

00:20:27,260 --> 00:20:32,870
and FreeBSD pretty early then there was

00:20:29,750 --> 00:20:35,750
the warden jail management tool which is

00:20:32,870 --> 00:20:38,390
part of FreeNAS still in FreeNAS 11 and

00:20:35,750 --> 00:20:39,559
the new freeness jail manager which is

00:20:38,390 --> 00:20:43,450
called IO cage

00:20:39,559 --> 00:20:45,710
currently rewritten in Python and we are

00:20:43,450 --> 00:20:47,090
helping a little bit and are actively

00:20:45,710 --> 00:20:50,000
involved in the development of that

00:20:47,090 --> 00:20:52,550
Python io cage by a branch Neider it's a

00:20:50,000 --> 00:20:56,990
great tool and if you like check out the

00:20:52,550 --> 00:21:03,050
github page these things are supposed to

00:20:56,990 --> 00:21:06,920
help management of jails so how do they

00:21:03,050 --> 00:21:09,350
do this all of these I'm not quite sure

00:21:06,920 --> 00:21:11,780
about ez jail but warden and io cage

00:21:09,350 --> 00:21:14,300
have the concept of a template jail so

00:21:11,780 --> 00:21:17,900
you create a jail with a certain FreeBSD

00:21:14,300 --> 00:21:20,900
distribution say 11.1 and you install

00:21:17,900 --> 00:21:23,570
all the software you need PHP in my Seco

00:21:20,900 --> 00:21:26,210
all the same stuff again into the

00:21:23,570 --> 00:21:29,240
template jail and then you want to

00:21:26,210 --> 00:21:31,910
actually do something with it so you

00:21:29,240 --> 00:21:36,050
instantiate it for a certain customer or

00:21:31,910 --> 00:21:37,789
a certain application and by default in

00:21:36,050 --> 00:21:41,119
warden as well as in I okay

00:21:37,789 --> 00:21:43,909
this happens this way you create a

00:21:41,119 --> 00:21:49,879
snapshot of the ZFS dataset that

00:21:43,909 --> 00:21:54,350
contains the template jail and a new

00:21:49,879 --> 00:21:57,619
clone the snapshot problem

00:21:54,350 --> 00:21:59,570
these are copy-on-write clones of a ZFS

00:21:57,619 --> 00:22:04,100
snapshot ins that have a snapshot is

00:21:59,570 --> 00:22:07,549
immutable so again we're facing this one

00:22:04,100 --> 00:22:10,820
does not simply update how how am I

00:22:07,549 --> 00:22:15,229
going to update these things what I as

00:22:10,820 --> 00:22:17,769
an operator want is not three instances

00:22:15,229 --> 00:22:25,549
that are only to address separately I

00:22:17,769 --> 00:22:28,070
want to update this which I can do but

00:22:25,549 --> 00:22:30,679
it won't propagate into these instances

00:22:28,070 --> 00:22:38,869
because these instances depend on a

00:22:30,679 --> 00:22:41,450
snapshot okay question so far good so

00:22:38,869 --> 00:22:45,529
what we came up with is something we

00:22:41,450 --> 00:22:47,539
call blueprint jails we made up the term

00:22:45,529 --> 00:22:50,539
blueprint jail for that because template

00:22:47,539 --> 00:22:53,320
is already a keyword in an i/o cage and

00:22:50,539 --> 00:22:56,720
we wanted to avoid a confusion

00:22:53,320 --> 00:22:59,299
says so in my first sentence is not IOH

00:22:56,720 --> 00:23:02,779
templates we just create a regular jail

00:22:59,299 --> 00:23:06,409
with a freebsd release install all the

00:23:02,779 --> 00:23:09,590
software that we need the packages come

00:23:06,409 --> 00:23:12,700
from our own put where and all of this

00:23:09,590 --> 00:23:16,159
is automatically done with ansible and

00:23:12,700 --> 00:23:21,129
after initial creation we shut down the

00:23:16,159 --> 00:23:21,129
template jail and never touch it again

00:23:23,889 --> 00:23:28,639
and then we come to an instance jail and

00:23:26,749 --> 00:23:31,190
instance jail for a customer application

00:23:28,639 --> 00:23:34,429
is an empty jail in I okay check okay I

00:23:31,190 --> 00:23:37,309
can do that and then we mount the

00:23:34,429 --> 00:23:40,159
blueprint jail on top read-only with new

00:23:37,309 --> 00:23:42,739
Lucas that's a local mount that

00:23:40,159 --> 00:23:45,679
preserves the full POSIX file system

00:23:42,739 --> 00:23:47,179
semantics and all the readwrite

00:23:45,679 --> 00:23:49,840
directories that a customer's

00:23:47,179 --> 00:23:51,740
application might need /e T C and so on

00:23:49,840 --> 00:23:53,960
are separate

00:23:51,740 --> 00:23:58,580
data sets that we mount read right on

00:23:53,960 --> 00:24:01,670
top of that all those enemies mount

00:23:58,580 --> 00:24:05,059
points are set to legacy and I okay HS

00:24:01,670 --> 00:24:06,950
get FS top feature for which it

00:24:05,059 --> 00:24:09,950
automatically mounts a certain set of

00:24:06,950 --> 00:24:26,830
directories and file system at JS

00:24:09,950 --> 00:24:26,830
startup okay okay yep nope nope nope

00:24:32,290 --> 00:24:41,450
okay so file system layout is like this

00:24:37,429 --> 00:24:44,510
we have an empty base jail this instance

00:24:41,450 --> 00:24:47,690
is vPro double-o 48 that's just the pro

00:24:44,510 --> 00:24:51,290
server product that we manage at this

00:24:47,690 --> 00:24:53,000
point then we mount our template jail on

00:24:51,290 --> 00:24:56,360
top the template jails are the blueprint

00:24:53,000 --> 00:24:58,100
is blueprint gels are named like the

00:24:56,360 --> 00:25:00,590
quarter of the port's collection that we

00:24:58,100 --> 00:25:02,780
use which PHP version is in there which

00:25:00,590 --> 00:25:05,330
elasticsearch version is in there so we

00:25:02,780 --> 00:25:08,230
can have different configuration that we

00:25:05,330 --> 00:25:10,970
apply to different customer jails and

00:25:08,230 --> 00:25:17,540
then we mount all the writable

00:25:10,970 --> 00:25:19,580
directories on top of them and this

00:25:17,540 --> 00:25:22,100
mount is an all FS mount and it's

00:25:19,580 --> 00:25:24,679
read-only and the other mount our

00:25:22,100 --> 00:25:33,460
standard set of has mounts and they are

00:25:24,679 --> 00:25:36,080
read/write the FS tab looks like this

00:25:33,460 --> 00:25:39,290
shortened it a bit so I could use a

00:25:36,080 --> 00:25:41,450
larger fund and I'm not quite sure if

00:25:39,290 --> 00:25:43,130
ever staff would accept continuation

00:25:41,450 --> 00:25:46,670
markets but you get the idea what I'm

00:25:43,130 --> 00:25:49,760
trying to express here we have some

00:25:46,670 --> 00:25:53,590
interesting things this is one of the on

00:25:49,760 --> 00:25:56,600
one of the big machines with shared or

00:25:53,590 --> 00:25:59,900
virtual pro server products so we have

00:25:56,600 --> 00:26:02,750
up to 50 currently instances of the J's

00:25:59,900 --> 00:26:05,310
on this thing so you can see that we

00:26:02,750 --> 00:26:07,800
have for the read/write mounts

00:26:05,310 --> 00:26:11,610
we have one set pool here that is called

00:26:07,800 --> 00:26:13,440
set theta this is a rate set - and we

00:26:11,610 --> 00:26:16,200
have another one that is set root with

00:26:13,440 --> 00:26:18,330
others a mirror and all these database

00:26:16,200 --> 00:26:20,460
directories here this is VAR DB my

00:26:18,330 --> 00:26:22,290
sequel are specifically tuned for

00:26:20,460 --> 00:26:23,970
database operations so the block size is

00:26:22,290 --> 00:26:26,900
different the metadata cache is

00:26:23,970 --> 00:26:30,750
different and that's definite and

00:26:26,900 --> 00:26:34,220
another thing you have the blueprint

00:26:30,750 --> 00:26:38,660
jail read-only mount on the very top and

00:26:34,220 --> 00:26:41,700
then we mount for example the et Cie and

00:26:38,660 --> 00:26:44,640
the user local et Cie rewrite on top of

00:26:41,700 --> 00:26:49,080
that and then again we mount the RCD

00:26:44,640 --> 00:26:51,660
directory for example read-only on top

00:26:49,080 --> 00:26:53,730
of that one so the customer always gets

00:26:51,660 --> 00:26:58,560
the startup scripts that match the

00:26:53,730 --> 00:27:00,480
packages that are installed so we do

00:26:58,560 --> 00:27:03,450
this for startup scripts and for the

00:27:00,480 --> 00:27:05,160
package database so package info inside

00:27:03,450 --> 00:27:11,510
the customers jails gives a consistent

00:27:05,160 --> 00:27:13,920
output and everything works nope

00:27:11,510 --> 00:27:22,380
our customers choose this product

00:27:13,920 --> 00:27:25,260
because they don't want to we do it okay

00:27:22,380 --> 00:27:27,210
provisioning of the entire system works

00:27:25,260 --> 00:27:29,940
like this the pro server host is

00:27:27,210 --> 00:27:31,470
installed by a pixie boot we have

00:27:29,940 --> 00:27:33,660
managed to get this completely

00:27:31,470 --> 00:27:35,730
unattended including set FS and

00:27:33,660 --> 00:27:38,250
everything up to a point where you can

00:27:35,730 --> 00:27:41,730
manage the system with ansible and the

00:27:38,250 --> 00:27:44,100
first version of that installed chef

00:27:41,730 --> 00:27:46,830
that IO client and registered at the

00:27:44,100 --> 00:27:49,770
chef server we've switched to Angelo for

00:27:46,830 --> 00:27:54,150
various reasons and we can install the

00:27:49,770 --> 00:27:57,090
hardware completely automatically the

00:27:54,150 --> 00:28:00,740
blueprint jail is installed with ansible

00:27:57,090 --> 00:28:05,400
using the packages from our pro year and

00:28:00,740 --> 00:28:08,480
the instance jail is again provisioned

00:28:05,400 --> 00:28:08,480
with ansible and

00:28:14,180 --> 00:28:21,840
so how do we update a customer's

00:28:18,900 --> 00:28:24,630
instance now the the great thing about

00:28:21,840 --> 00:28:27,990
jails is that a jail need not be running

00:28:24,630 --> 00:28:30,870
two accesses from the host system and

00:28:27,990 --> 00:28:34,500
even to do things inside the jail I

00:28:30,870 --> 00:28:36,150
cannot point this out intensively enough

00:28:34,500 --> 00:28:39,480
to to people who are not familiar with

00:28:36,150 --> 00:28:43,200
FreeBSD it's just in an incredible

00:28:39,480 --> 00:28:45,000
feature in my opinion so the jail is

00:28:43,200 --> 00:28:47,910
just the file system tree that's lying

00:28:45,000 --> 00:28:51,420
somewhere on your hard disk and if you

00:28:47,910 --> 00:28:54,000
have working resolved conf inside the

00:28:51,420 --> 00:28:55,890
jail the jail need not be running you

00:28:54,000 --> 00:28:59,960
can just change route into it use the

00:28:55,890 --> 00:28:59,960
host networking and to a package upgrade

00:29:00,290 --> 00:29:07,440
and I don't know any other container

00:29:02,580 --> 00:29:14,850
technology that would do this well we

00:29:07,440 --> 00:29:17,540
don't do that why because of that

00:29:14,850 --> 00:29:22,140
buzzword here immutable infrastructure

00:29:17,540 --> 00:29:24,480
as one of those rollback things so once

00:29:22,140 --> 00:29:27,930
the blueprint jails are created and

00:29:24,480 --> 00:29:29,940
provision we don't change them again but

00:29:27,930 --> 00:29:34,080
if we want to do out dates we create a

00:29:29,940 --> 00:29:36,420
new one and then we update all the

00:29:34,080 --> 00:29:38,340
instances that depend on them because we

00:29:36,420 --> 00:29:41,340
just have to iterate over all the

00:29:38,340 --> 00:29:46,310
customer jails shut down change mount

00:29:41,340 --> 00:29:49,800
points boot that takes about 30 seconds

00:29:46,310 --> 00:29:52,140
so customer gets 30-second interruption

00:29:49,800 --> 00:29:54,890
of service and has all the latest

00:29:52,140 --> 00:29:54,890
security fixes

00:30:00,650 --> 00:30:08,730
okay backups we have set of s easy we do

00:30:06,720 --> 00:30:09,390
snapshots you can do them hourly can do

00:30:08,730 --> 00:30:13,799
them daily

00:30:09,390 --> 00:30:16,650
there's the SIS util you know the best

00:30:13,799 --> 00:30:19,110
tools port that contains a set of s out

00:30:16,650 --> 00:30:21,390
of snapshot utility that you can run

00:30:19,110 --> 00:30:23,400
from cron and you just tell it how many

00:30:21,390 --> 00:30:25,860
snapshots you want to retain and work

00:30:23,400 --> 00:30:29,429
similarly to time machine so you can say

00:30:25,860 --> 00:30:32,039
okay hourly for 24 hours daily for seven

00:30:29,429 --> 00:30:34,470
days weekly for one month and everything

00:30:32,039 --> 00:30:39,000
and you have all those snapshots on the

00:30:34,470 --> 00:30:42,539
local system the backup for help I need

00:30:39,000 --> 00:30:45,690
to rollback something I did to my

00:30:42,539 --> 00:30:49,890
application that case of restore is

00:30:45,690 --> 00:30:53,789
solved and for disaster recovery we copy

00:30:49,890 --> 00:30:55,679
these snapshots to a different system to

00:30:53,789 --> 00:30:58,620
a large a backup server with just lots

00:30:55,679 --> 00:31:01,380
of storage we plan to have one of those

00:30:58,620 --> 00:31:03,030
Parekh to have them physically near and

00:31:01,380 --> 00:31:07,289
have faster network connections and

00:31:03,030 --> 00:31:09,600
distribute the load a bit I found a tool

00:31:07,289 --> 00:31:12,990
on github that was called service backup

00:31:09,600 --> 00:31:15,780
from Solaris it hasn't been updated for

00:31:12,990 --> 00:31:17,880
two or three years or so but it works

00:31:15,780 --> 00:31:18,299
quite well it's a shell script I liked

00:31:17,880 --> 00:31:20,220
it

00:31:18,299 --> 00:31:21,450
we have built a port out of that but

00:31:20,220 --> 00:31:23,490
that still needs a little bit of

00:31:21,450 --> 00:31:25,620
polishing because before I can submit it

00:31:23,490 --> 00:31:28,980
for inclusion in the port's tree but I

00:31:25,620 --> 00:31:39,960
will do it promise works works for us

00:31:28,980 --> 00:31:42,090
now so so thus this was the overview of

00:31:39,960 --> 00:31:46,049
our architecture and how we run our

00:31:42,090 --> 00:31:48,419
hosting so after we tackled some of the

00:31:46,049 --> 00:31:51,720
problems we have what's what's left well

00:31:48,419 --> 00:31:55,110
so I've open and what's left to do we

00:31:51,720 --> 00:31:58,080
essentially replaced the VM staff that

00:31:55,110 --> 00:31:59,789
is difficult to manage with jails and we

00:31:58,080 --> 00:32:02,190
develop the tools that make them easy to

00:31:59,789 --> 00:32:06,750
manage what we of course would like to

00:32:02,190 --> 00:32:10,230
have is some sort of central storage for

00:32:06,750 --> 00:32:13,320
all of this central distributed I'm not

00:32:10,230 --> 00:32:21,769
quite sure without introducing

00:32:13,320 --> 00:32:24,179
new single point of failure and I

00:32:21,769 --> 00:32:27,659
submitted a birds of a feather session

00:32:24,179 --> 00:32:30,029
that is starting after his talk all the

00:32:27,659 --> 00:32:32,340
way upstairs and I would love if anyone

00:32:30,029 --> 00:32:34,649
interested in high-availability storage

00:32:32,340 --> 00:32:37,049
on freebsd would just come to discuss

00:32:34,649 --> 00:32:40,529
concepts and everything I must admit

00:32:37,049 --> 00:32:43,980
that I don't have a plan or ready to go

00:32:40,529 --> 00:32:50,149
solution but I have some ideas and I

00:32:43,980 --> 00:32:54,630
just like to discuss it see just a sec

00:32:50,149 --> 00:32:57,419
so another point would be if we could

00:32:54,630 --> 00:32:59,909
offer self provisioning of customers so

00:32:57,419 --> 00:33:02,809
like a true cloud solution they could

00:32:59,909 --> 00:33:05,460
just click and get their Jail instance

00:33:02,809 --> 00:33:08,789
specify to their needs that would be

00:33:05,460 --> 00:33:11,549
nice and it would essentially give us a

00:33:08,789 --> 00:33:13,529
private cloud solution we are planning

00:33:11,549 --> 00:33:16,350
to go that way slowly given the

00:33:13,529 --> 00:33:18,149
resources we have with four people but

00:33:16,350 --> 00:33:21,110
first thing we want to implement as an

00:33:18,149 --> 00:33:23,490
API for all that Angela code we have

00:33:21,110 --> 00:33:28,529
possibly arrests possibly something

00:33:23,490 --> 00:33:30,809
different and when the API is done then

00:33:28,529 --> 00:33:37,260
the front and can be implemented by

00:33:30,809 --> 00:33:39,240
anyone but as I learned today possibly

00:33:37,260 --> 00:33:43,019
something like this already exists

00:33:39,240 --> 00:33:46,169
there are some people at booth upstairs

00:33:43,019 --> 00:33:51,330
from how that was a different difficult

00:33:46,169 --> 00:33:55,980
name ex tinfinity and they claimed to

00:33:51,330 --> 00:33:59,100
have a complete open stack like private

00:33:55,980 --> 00:34:01,470
cloud infrastructure based on FreeBSD

00:33:59,100 --> 00:34:05,159
and I'm definitely going to check that

00:34:01,470 --> 00:34:07,620
out and I mean open stack like not

00:34:05,159 --> 00:34:09,149
OpenStack compatible or anything so

00:34:07,620 --> 00:34:11,609
they're doing everything on set of ass

00:34:09,149 --> 00:34:14,010
jails and they say they have a control

00:34:11,609 --> 00:34:16,770
panel they have distributed storage and

00:34:14,010 --> 00:34:20,310
I'm really curious how far ahead of us

00:34:16,770 --> 00:34:22,470
they are or if they are essentially not

00:34:20,310 --> 00:34:25,450
so much for add I don't know I really

00:34:22,470 --> 00:34:31,630
don't have a clue at the moment

00:34:25,450 --> 00:34:31,630
so now for that one yep

00:34:37,930 --> 00:34:44,740
we used the resource limits that were

00:34:41,690 --> 00:34:51,340
implemented for jails not so long ago

00:34:44,740 --> 00:34:51,340
and we apply them again with interval

00:34:59,380 --> 00:35:03,830
okay so the question was how do we

00:35:01,700 --> 00:35:06,440
control resources do we give every

00:35:03,830 --> 00:35:09,110
customer all the 20 cores and all the 40

00:35:06,440 --> 00:35:12,920
threads said no we we just used the

00:35:09,110 --> 00:35:15,560
resource limits this limits which I our

00:35:12,920 --> 00:35:18,410
experience shows that for a CPU cores

00:35:15,560 --> 00:35:20,270
they work quite well for memory not so

00:35:18,410 --> 00:35:21,950
much and I have to look a little bit

00:35:20,270 --> 00:35:24,700
deeper into this how it's actually

00:35:21,950 --> 00:35:27,680
implemented and how it works because I

00:35:24,700 --> 00:35:28,880
figure it might be a hard problem to do

00:35:27,680 --> 00:35:34,850
something like this with failed

00:35:28,880 --> 00:35:50,600
technology any clue Kirk how's it how it

00:35:34,850 --> 00:35:52,160
is done resource limits for jails so now

00:35:50,600 --> 00:35:54,140
there was a few comments in the room

00:35:52,160 --> 00:35:56,270
that what you've done is very

00:35:54,140 --> 00:35:59,540
implemented some of the easy jail

00:35:56,270 --> 00:36:01,250
features into IOH have you done it in

00:35:59,540 --> 00:36:04,190
such a way that you could commit this

00:36:01,250 --> 00:36:06,110
upstream to IO cage to so that I okay

00:36:04,190 --> 00:36:10,010
can cage can catch up with easy jail on

00:36:06,110 --> 00:36:12,320
this front well we sent all our changes

00:36:10,010 --> 00:36:15,370
to IO cage to Brennan for inclusion

00:36:12,320 --> 00:36:19,160
which he did but we're actually not

00:36:15,370 --> 00:36:21,410
really implementing ez jail in IO cage

00:36:19,160 --> 00:36:24,500
we just create a custom FS type for IO

00:36:21,410 --> 00:36:28,060
cage to use to as I now learn to

00:36:24,500 --> 00:36:30,500
implement something similar to ez jail

00:36:28,060 --> 00:36:32,600
so actually there is nothing to

00:36:30,500 --> 00:36:34,520
open-source if you if you take the

00:36:32,600 --> 00:36:37,370
current IO cage and give it an FS top

00:36:34,520 --> 00:36:44,240
file like the one I showed you

00:36:37,370 --> 00:36:46,840
there you go question for me when we

00:36:44,240 --> 00:36:49,940
investigated jail management which was

00:36:46,840 --> 00:36:51,800
well quite quite some time ago it looked

00:36:49,940 --> 00:36:56,870
like easy jail was more or less a

00:36:51,800 --> 00:36:59,030
dead-end project and then I existent

00:36:56,870 --> 00:37:01,370
started to sponsor reimplementation of

00:36:59,030 --> 00:37:04,760
Io cage so that's why we put our pass on

00:37:01,370 --> 00:37:18,380
that so when when did ez jail wake up

00:37:04,760 --> 00:37:20,900
again and so I'd your honest answer is I

00:37:18,380 --> 00:37:24,950
think there's still ongoing effort in

00:37:20,900 --> 00:37:28,010
FreeBSD to revamp the way that you run

00:37:24,950 --> 00:37:30,830
and configure jails and this is not a

00:37:28,010 --> 00:37:37,160
done thing so that's where where you're

00:37:30,830 --> 00:37:40,400
stuck as well I guess thanks one last

00:37:37,160 --> 00:37:43,700
thing FreeBSD used jailed comp and easy

00:37:40,400 --> 00:37:53,330
jail doesn't support that there were a

00:37:43,700 --> 00:37:55,910
set of patches to work with thanks for

00:37:53,330 --> 00:37:59,390
the talk I have two questions first of

00:37:55,910 --> 00:38:02,450
all those resource control things do

00:37:59,390 --> 00:38:04,280
they cause any trouble with Java because

00:38:02,450 --> 00:38:06,110
I knew those existed because Java

00:38:04,280 --> 00:38:08,810
assumes that you're running like you

00:38:06,110 --> 00:38:11,570
have two hundred gigas but you you you

00:38:08,810 --> 00:38:13,310
actually have like two and and it causes

00:38:11,570 --> 00:38:15,710
problems when it tries to allocate at

00:38:13,310 --> 00:38:19,480
all you know and the second thing have

00:38:15,710 --> 00:38:24,290
you considered using Union effects for

00:38:19,480 --> 00:38:27,010
defaults and let users alter their

00:38:24,290 --> 00:38:31,010
configuration if they want to Thanks

00:38:27,010 --> 00:38:33,380
okay second question first I pointed out

00:38:31,010 --> 00:38:36,950
at another occasion that as an operator

00:38:33,380 --> 00:38:40,190
I want Union F s like semantics instead

00:38:36,950 --> 00:38:42,770
of copy-on-write clones so I understand

00:38:40,190 --> 00:38:46,010
your question the fact is that currently

00:38:42,770 --> 00:38:50,390
Eugene has simply broken and not being

00:38:46,010 --> 00:38:53,920
worked upon much as far as I get it

00:38:50,390 --> 00:38:57,200
and it seems to be a problem that is not

00:38:53,920 --> 00:38:59,690
at all easy to solve for the general

00:38:57,200 --> 00:39:02,180
case because of what happens when you

00:38:59,690 --> 00:39:04,880
delete things in the upper layers and

00:39:02,180 --> 00:39:07,279
how they are propagated down so possibly

00:39:04,880 --> 00:39:14,059
this will never see the day of light the

00:39:07,279 --> 00:39:15,829
light of day first question yes that's

00:39:14,059 --> 00:39:17,960
why I made that remark about memory

00:39:15,829 --> 00:39:21,740
management and resource limits as I said

00:39:17,960 --> 00:39:25,460
it works really well for CPU cores but

00:39:21,740 --> 00:39:28,190
we had Java processors run stray and

00:39:25,460 --> 00:39:31,010
consume definitely more memory than they

00:39:28,190 --> 00:39:33,799
were entitled to and we had to fix this

00:39:31,010 --> 00:39:35,809
on the application level just contact

00:39:33,799 --> 00:39:38,000
the customer and politely tell them to

00:39:35,809 --> 00:39:40,539
limit their elasticsearch memory and

00:39:38,000 --> 00:39:40,539
stuff like that

00:39:43,250 --> 00:39:47,599
two things first one is you might not be

00:39:46,039 --> 00:39:49,309
with it I think Steve wills is working

00:39:47,599 --> 00:39:50,839
on a port of the now open source

00:39:49,309 --> 00:39:53,809
danceable tower

00:39:50,839 --> 00:39:56,960
aw weeks two FreeBSD and that would

00:39:53,809 --> 00:40:01,720
provide you with a REST API to put your

00:39:56,960 --> 00:40:03,619
UI sugar on top so that's probably the

00:40:01,720 --> 00:40:08,059
other question is how do you deal with

00:40:03,619 --> 00:40:16,940
things like selective stash log in your

00:40:08,059 --> 00:40:21,230
jails and well since the finished

00:40:16,940 --> 00:40:22,940
product is managed root server all the

00:40:21,230 --> 00:40:25,519
jails have their own private logging

00:40:22,940 --> 00:40:27,440
because the customer is route with the

00:40:25,519 --> 00:40:30,349
exception that he cannot install his own

00:40:27,440 --> 00:40:33,349
software which we manage for him which

00:40:30,349 --> 00:40:35,509
is what people seem to appreciate so

00:40:33,349 --> 00:40:37,549
that's the deadlock thing we haven't

00:40:35,509 --> 00:40:39,769
looked into tower yet if you're

00:40:37,549 --> 00:40:42,259
interested we started our data center

00:40:39,769 --> 00:40:45,829
data center automation with Chef dot IO

00:40:42,259 --> 00:40:48,619
and we ran one quarter long project

00:40:45,829 --> 00:40:50,990
where we very very intensively worked

00:40:48,619 --> 00:40:54,680
with developers and operators and

00:40:50,990 --> 00:40:58,640
implemented a really huge now I must

00:40:54,680 --> 00:41:00,740
admit over engineered system of managing

00:40:58,640 --> 00:41:03,810
chef recipes and cookbooks

00:41:00,740 --> 00:41:05,850
we had unit tests we had integration

00:41:03,810 --> 00:41:07,560
tests we had server spec tests we

00:41:05,850 --> 00:41:10,800
provisioned them and push them into the

00:41:07,560 --> 00:41:12,990
chef server with Jenkins and then

00:41:10,800 --> 00:41:15,780
finally loaded them down to the manage

00:41:12,990 --> 00:41:18,330
hosts then we had this version pinning

00:41:15,780 --> 00:41:21,300
thing with the Burks file and everything

00:41:18,330 --> 00:41:23,670
you can imagine and it was just

00:41:21,300 --> 00:41:27,210
definitely over engineered so now with

00:41:23,670 --> 00:41:30,420
ansible we go with a more lean approach

00:41:27,210 --> 00:41:32,820
they're actually still hard-coded

00:41:30,420 --> 00:41:35,370
constants things that apply only to our

00:41:32,820 --> 00:41:38,700
data center so it doesn't make sense to

00:41:35,370 --> 00:41:40,800
open-source that part because nobody

00:41:38,700 --> 00:41:43,200
else would be able to work with us

00:41:40,800 --> 00:41:45,750
together on the project I'm very willing

00:41:43,200 --> 00:41:48,270
and we're very open to share anything we

00:41:45,750 --> 00:41:51,810
actually create it as far as knowledge

00:41:48,270 --> 00:41:54,350
is concerned and our approach to the

00:41:51,810 --> 00:41:56,580
ansible service that we are continuously

00:41:54,350 --> 00:41:59,760
refactoring the entire thing every

00:41:56,580 --> 00:42:01,830
couple of months anyway so it will

00:41:59,760 --> 00:42:04,350
probably never be a finished product or

00:42:01,830 --> 00:42:14,010
something that is usable in the general

00:42:04,350 --> 00:42:19,110
case security risks of accessing data

00:42:14,010 --> 00:42:21,150
and things from outside ETL for example

00:42:19,110 --> 00:42:24,330
if you have a sibling inside to jail and

00:42:21,150 --> 00:42:27,240
you look at it from outside and it point

00:42:24,330 --> 00:42:30,990
it's it's absolute point to something

00:42:27,240 --> 00:42:34,920
else we use IOH console to change into

00:42:30,990 --> 00:42:36,990
the jail most of the time and when when

00:42:34,920 --> 00:42:44,400
we don't we hopefully know what we're

00:42:36,990 --> 00:42:47,430
doing I had a question how so what

00:42:44,400 --> 00:42:49,080
benefits does this give you to access to

00:42:47,430 --> 00:42:50,250
jails from the outside it's a bit of a

00:42:49,080 --> 00:42:51,900
trick question because we're doing the

00:42:50,250 --> 00:42:59,220
same ourselves but I would like to hear

00:42:51,900 --> 00:43:00,990
your ideas first to me it's not so much

00:42:59,220 --> 00:43:02,520
accessing jazz from the outside it's the

00:43:00,990 --> 00:43:05,010
fact that it's actually local file

00:43:02,520 --> 00:43:07,590
system mounts so you can share for

00:43:05,010 --> 00:43:10,650
example the same file system or data set

00:43:07,590 --> 00:43:14,010
among multiple jails and all of them

00:43:10,650 --> 00:43:16,500
have local semantics so you can have a

00:43:14,010 --> 00:43:17,640
UNIX domain socket on them like my

00:43:16,500 --> 00:43:19,910
sequel dot soccer

00:43:17,640 --> 00:43:24,660
PHP fpm that's like so you can isolate

00:43:19,910 --> 00:43:27,750
the database the webserver PHP fpm you

00:43:24,660 --> 00:43:30,329
can have to jails running different

00:43:27,750 --> 00:43:33,660
versions of PHP fpm and both have

00:43:30,329 --> 00:43:36,029
mounted the same customer files and PHP

00:43:33,660 --> 00:43:37,890
applications data set so the customer

00:43:36,029 --> 00:43:41,099
can try is application with different

00:43:37,890 --> 00:43:45,299
versions of PHP and all that stuff the

00:43:41,099 --> 00:43:47,190
single opportunity we're really go into

00:43:45,299 --> 00:43:49,799
a jail and access it from the outside is

00:43:47,190 --> 00:43:52,230
as I said when I want to do updates or a

00:43:49,799 --> 00:43:54,210
quick modification add a package that

00:43:52,230 --> 00:43:57,359
will of course later go back into the

00:43:54,210 --> 00:43:59,160
Enzo book code but if I need to manually

00:43:57,359 --> 00:44:01,109
add a package to one of our blueprint

00:43:59,160 --> 00:44:03,869
jails and the blueprint rails is of

00:44:01,109 --> 00:44:06,359
course not running while it's mounted

00:44:03,869 --> 00:44:08,359
into all those customers instances but I

00:44:06,359 --> 00:44:11,309
can just change route into it and

00:44:08,359 --> 00:44:13,470
package install something I could even

00:44:11,309 --> 00:44:15,059
use without the change route package

00:44:13,470 --> 00:44:17,430
install and give it a destination path

00:44:15,059 --> 00:44:19,829
and everything that's about the only

00:44:17,430 --> 00:44:22,440
application we have but the general

00:44:19,829 --> 00:44:24,539
architecture is local files of file

00:44:22,440 --> 00:44:26,910
system errands beat everything in my

00:44:24,539 --> 00:44:28,500
opinion and you can do so many fancy

00:44:26,910 --> 00:44:34,700
things with that that I don't want to

00:44:28,500 --> 00:44:34,700
miss it now what are you doing with them

00:44:41,230 --> 00:44:46,610
okay forgot that one of course we run

00:44:44,030 --> 00:44:49,190
the stock security scripts and daily

00:44:46,610 --> 00:44:54,190
scripts as well as our own ones only on

00:44:49,190 --> 00:44:54,190
the host system and not in the jails I

00:44:58,540 --> 00:45:07,610
also use ansible and and jails

00:45:01,760 --> 00:45:10,310
specifically ez jail and IO cage I like

00:45:07,610 --> 00:45:14,480
the idea that you're putting the local

00:45:10,310 --> 00:45:16,520
system data on separate file sets I like

00:45:14,480 --> 00:45:18,650
that idea because I like that a vest and

00:45:16,520 --> 00:45:21,080
I like to put anything that you may ever

00:45:18,650 --> 00:45:23,540
want to use separately in a different

00:45:21,080 --> 00:45:25,580
data set and I'm tempted to do that for

00:45:23,540 --> 00:45:29,450
my own jails at home which I'm updating

00:45:25,580 --> 00:45:31,400
myself I also like the approach of never

00:45:29,450 --> 00:45:34,480
updating in place but just creating a

00:45:31,400 --> 00:45:38,870
new jail and I may wind up doing that

00:45:34,480 --> 00:45:41,060
safe or Postgres I have pgo one jail

00:45:38,870 --> 00:45:43,460
which hosts use at the moment and

00:45:41,060 --> 00:45:46,610
instead of upgrading that in place on

00:45:43,460 --> 00:45:48,850
may create pgo to update everything in

00:45:46,610 --> 00:45:51,200
there and then just swap everything over

00:45:48,850 --> 00:45:53,690
that's not great for high availability

00:45:51,200 --> 00:45:57,020
because there's going to be downtime but

00:45:53,690 --> 00:45:59,210
hey it it's at home but a few good ideas

00:45:57,020 --> 00:46:04,270
and what you gave me there no questions

00:45:59,210 --> 00:46:04,270
just thanks great let you liked it

00:46:11,380 --> 00:46:16,040
do you have any idea how much time

00:46:13,670 --> 00:46:17,810
you're saving now during updates because

00:46:16,040 --> 00:46:20,000
now you just have to shut them down flip

00:46:17,810 --> 00:46:23,500
that path and bring them back up is it

00:46:20,000 --> 00:46:26,120
saving you time already yes definitely I

00:46:23,500 --> 00:46:29,450
can't tell you how much time or money

00:46:26,120 --> 00:46:31,430
precisely but definitely updating those

00:46:29,450 --> 00:46:33,860
nano VSD service despite the fact that

00:46:31,430 --> 00:46:36,170
it was sort of atomic and nano bsd and

00:46:33,860 --> 00:46:38,720
everything was always a hassle and we

00:46:36,170 --> 00:46:41,570
dreaded the the update days and we've

00:46:38,720 --> 00:46:43,040
changed to a monthly schedule of doing

00:46:41,570 --> 00:46:45,350
updates whether there are security

00:46:43,040 --> 00:46:48,020
updates or not we just do it monthly to

00:46:45,350 --> 00:46:50,780
keep our customer base educated sort of

00:46:48,020 --> 00:46:53,000
and in case of an emergency of course we

00:46:50,780 --> 00:46:55,070
do them right away and we don't have a

00:46:53,000 --> 00:47:01,340
problem to update all the systems we do

00:46:55,070 --> 00:47:11,540
it in you know two or three hours all

00:47:01,340 --> 00:47:13,760
the jail based ones those yes yes yes

00:47:11,540 --> 00:47:15,470
the the interruption per jail is in the

00:47:13,760 --> 00:47:18,080
order of 30 seconds to a minute or even

00:47:15,470 --> 00:47:19,820
less depending on the the amount of

00:47:18,080 --> 00:47:22,490
services the customers are running and

00:47:19,820 --> 00:47:26,350
how how much time they need to to write

00:47:22,490 --> 00:47:30,650
out their volatile data and everything

00:47:26,350 --> 00:47:32,030
so we've used um h a proxy to put stuff

00:47:30,650 --> 00:47:34,700
behind and actually end up with seamless

00:47:32,030 --> 00:47:37,040
updates as a result so we have a like an

00:47:34,700 --> 00:47:38,930
inactive jail that's performing service

00:47:37,040 --> 00:47:43,910
we have the new upgraded one in place

00:47:38,930 --> 00:47:46,010
ready to go and then just set the the

00:47:43,910 --> 00:47:49,580
back end of a chopra key for the old

00:47:46,010 --> 00:47:51,470
jail to maintenance and then it just

00:47:49,580 --> 00:47:53,600
automatically traffic just switches over

00:47:51,470 --> 00:47:55,100
to the new one and I don't think what's

00:47:53,600 --> 00:47:58,190
your customers but certainly for us that

00:47:55,100 --> 00:47:59,780
makes upgrades embarrassingly easy so

00:47:58,190 --> 00:48:04,760
much that we have our databases behind

00:47:59,780 --> 00:48:08,060
it now our message queue behind it ap is

00:48:04,760 --> 00:48:09,550
to external to third-party api's as well

00:48:08,060 --> 00:48:13,070
and it's really really nice

00:48:09,550 --> 00:48:14,780
so you're doing this for centralized

00:48:13,070 --> 00:48:17,950
services like a centralized database

00:48:14,780 --> 00:48:20,390
server or a couple of them and

00:48:17,950 --> 00:48:22,150
centralized message queue server and/or

00:48:20,390 --> 00:48:31,210
a couple of them not

00:48:22,150 --> 00:48:34,140
instance per customer or is it what yes

00:48:31,210 --> 00:48:38,020
so we're not a hosted service we it's a

00:48:34,140 --> 00:48:40,059
we're running our own business and we

00:48:38,020 --> 00:48:41,950
have multiple databases clustered

00:48:40,059 --> 00:48:44,740
databases clusters message queue and

00:48:41,950 --> 00:48:46,210
they are accessed from H a proxy so it

00:48:44,740 --> 00:48:48,849
looks like one externally but we have

00:48:46,210 --> 00:48:51,039
them on multiple nodes so for example

00:48:48,849 --> 00:48:55,359
that this Jail host here receives

00:48:51,039 --> 00:48:56,619
traffic to its local database and this

00:48:55,359 --> 00:48:58,180
that's down for maintenance in which

00:48:56,619 --> 00:49:01,569
case it just goes to the nearest one

00:48:58,180 --> 00:49:05,049
yeah yeah yeah that's that's definitely

00:49:01,569 --> 00:49:07,539
the way to go we don't do it for these

00:49:05,049 --> 00:49:10,000
customer jails because we have a

00:49:07,539 --> 00:49:11,829
plethora of independent customers who

00:49:10,000 --> 00:49:14,500
all run they're completely independent

00:49:11,829 --> 00:49:16,539
instance with a full stack so that

00:49:14,500 --> 00:49:22,839
wouldn't scale too well you have not

00:49:16,539 --> 00:49:24,369
found a way to do that here hey what

00:49:22,839 --> 00:49:26,410
happens if a customer's not okay with a

00:49:24,369 --> 00:49:28,000
downtime of 30 seconds what do you do

00:49:26,410 --> 00:49:29,920
then or is it just your business model

00:49:28,000 --> 00:49:34,140
just saying this is how it's done and

00:49:29,920 --> 00:49:37,119
you have to accept it oh he can book

00:49:34,140 --> 00:49:40,000
jail an additional jail that is not

00:49:37,119 --> 00:49:43,990
built as highly because it's inactive

00:49:40,000 --> 00:49:46,089
most of the time come up with his agency

00:49:43,990 --> 00:49:48,910
you does the software for him or with us

00:49:46,089 --> 00:49:51,339
with a replication mechanism and then we

00:49:48,910 --> 00:49:56,920
switch over to the inactive one update

00:49:51,339 --> 00:49:59,470
the active one they go or have two jails

00:49:56,920 --> 00:50:01,799
the same size and simply switch over of

00:49:59,470 --> 00:50:01,799
course

00:50:10,110 --> 00:50:18,660
okay so no no question if you made that

00:50:15,800 --> 00:50:20,280
presentation two months ago I would tell

00:50:18,660 --> 00:50:22,710
you that you were wrong about the secret

00:50:20,280 --> 00:50:35,430
command but now Solaris is dead you are

00:50:22,710 --> 00:50:37,560
you are right since you managed to

00:50:35,430 --> 00:50:40,110
failover situation where you have a

00:50:37,560 --> 00:50:42,920
separate Jail where you replicate and

00:50:40,110 --> 00:50:45,360
stuff how do we handle post updates

00:50:42,920 --> 00:50:47,970
physical machines do you have the same

00:50:45,360 --> 00:50:49,980
mechanism somehow or do you say it's

00:50:47,970 --> 00:50:52,560
part of the business model their host

00:50:49,980 --> 00:50:54,900
runs very few applications on its own so

00:50:52,560 --> 00:50:57,750
it's mostly the base operating system

00:50:54,900 --> 00:51:01,140
and we schedule a maintenance window and

00:50:57,750 --> 00:51:04,430
inform the customers in that case for

00:51:01,140 --> 00:51:08,010
several of them who have contracts that

00:51:04,430 --> 00:51:10,440
match that we actually switch to jails

00:51:08,010 --> 00:51:18,440
on a different host but not for all of

00:51:10,440 --> 00:51:29,550
them okay thank you

00:51:18,440 --> 00:51:29,550

YouTube URL: https://www.youtube.com/watch?v=RHLRW88AJLE


