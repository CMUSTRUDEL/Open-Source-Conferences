Title: Discovering OpenBSD on AWS - Laurent Bernaille
Publication date: 2019-10-16
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

I have been using AWS for several years and many projects require deploying core infrastructure services such as administration hosts, DNS, VPN gateways and Service Discovery tools. I used to achieve this using Linux distributions (Debian or Ubuntu in most cases) but always found them complicated to automate and not well adapted for these use cases. OpenBSD has been available on AWS for about a year and I have started using it instead. I had no previous knowledge of OpenBSD but found it a really great experience. In this talk I will present the rational behind this shift and will demo how we can automatically build these services with Terraform. I will show how we can build a dynamic DNS server backed by Consul for its configuration with everything running on OpenBSD.

Speaker biography:

Laurent Bernaille is a solution architect specialized in cloud, containers, and
automation. He is an open source enthusiast and has lately been focusing on helping organizations improve their deployment pipelines. He is really
interested in how these new technologies are transforming organizations and IT jobs.
Captions: 
	00:00:00,439 --> 00:00:06,750
so hello everyone so yes I discovered at

00:00:04,380 --> 00:00:08,460
the bluest before OpenBSD I'm very new

00:00:06,750 --> 00:00:21,119
to OpenBSD and this is going to be part

00:00:08,460 --> 00:00:22,859
of the talk I'm going to give today so

00:00:21,119 --> 00:00:25,230
first of all a very quick introduction

00:00:22,859 --> 00:00:28,140
so my name is Johanna and I work at a

00:00:25,230 --> 00:00:30,660
small consulting company called D - si

00:00:28,140 --> 00:00:31,560
I've got mostly a Linux background and

00:00:30,660 --> 00:00:34,829
I'm just getting to know

00:00:31,560 --> 00:00:36,930
OpenBSD and I've been working on cloud

00:00:34,829 --> 00:00:39,510
project for the last five years or

00:00:36,930 --> 00:00:41,070
something and I really like it and I

00:00:39,510 --> 00:00:43,260
really love discovering building and

00:00:41,070 --> 00:00:49,379
breaking new things and I really enjoyed

00:00:43,260 --> 00:00:51,300
discovering OpenBSD so what what you can

00:00:49,379 --> 00:00:52,920
expect from this talk is on this slide

00:00:51,300 --> 00:00:56,129
so the first thing I'm going to talk

00:00:52,920 --> 00:00:58,940
about is our open BSD came to be on AWS

00:00:56,129 --> 00:01:02,100
and I would centigrate it with it and

00:00:58,940 --> 00:01:03,960
then we'll talk about and we do a demo

00:01:02,100 --> 00:01:06,540
which hopefully is going to work but

00:01:03,960 --> 00:01:10,080
it's the demos I will see and how we can

00:01:06,540 --> 00:01:11,850
use OpenBSD to do micro services and

00:01:10,080 --> 00:01:15,150
I'll give you an example of how we can

00:01:11,850 --> 00:01:18,689
build dynamic VPNs using a tool like

00:01:15,150 --> 00:01:20,820
console and all this on OpenBSD and

00:01:18,689 --> 00:01:22,470
finally like throughout the top you I'm

00:01:20,820 --> 00:01:24,210
gonna give you my feeling with open BSD

00:01:22,470 --> 00:01:25,590
and I can already tell you that it's

00:01:24,210 --> 00:01:30,650
been very good and I've been very

00:01:25,590 --> 00:01:34,290
impressed by by this operating system so

00:01:30,650 --> 00:01:39,470
first is well our open BSD came to be on

00:01:34,290 --> 00:01:39,470
AWS so it's all started when

00:01:45,860 --> 00:01:53,439
it's the pets why do you want me to talk

00:01:49,189 --> 00:01:53,439
louder I can talk louder okay

00:01:57,010 --> 00:02:05,570
okay so the the whole Cerebus so the

00:02:01,520 --> 00:02:08,900
whole story of OpenBSD awh started in

00:02:05,570 --> 00:02:11,690
2015 when aunt when Jack Widow most of

00:02:08,900 --> 00:02:14,210
you know I assume started working at D -

00:02:11,690 --> 00:02:17,780
si with us and at that moment we are

00:02:14,210 --> 00:02:19,790
already working a lot on AWS and when I

00:02:17,780 --> 00:02:22,040
don't want when didn't know AWS very at

00:02:19,790 --> 00:02:24,950
the time and it checked if open busy was

00:02:22,040 --> 00:02:26,360
working on AWS and it wasn't so most

00:02:24,950 --> 00:02:29,030
Linux distribution were already

00:02:26,360 --> 00:02:31,190
available on AWS and free beers it was

00:02:29,030 --> 00:02:33,470
also available but open busy was not

00:02:31,190 --> 00:02:37,310
there so it took at the challenge to

00:02:33,470 --> 00:02:38,750
create an image for open vision AWS and

00:02:37,310 --> 00:02:41,540
it proved to be quite a challenge

00:02:38,750 --> 00:02:43,550
because well it was it made an image

00:02:41,540 --> 00:02:47,300
quite quite right at the beginning but

00:02:43,550 --> 00:02:49,460
then discovered that due to lack of Zen

00:02:47,300 --> 00:02:51,170
supports many things were not working so

00:02:49,460 --> 00:02:54,350
the instance was boring but there was no

00:02:51,170 --> 00:02:58,070
network support at the beginning so it's

00:02:54,350 --> 00:03:00,350
thanks to a lot of work by my cats as

00:02:58,070 --> 00:03:01,010
danira all these screen support has been

00:03:00,350 --> 00:03:02,570
progressed

00:03:01,010 --> 00:03:05,630
Brett pastoring progressing over time

00:03:02,570 --> 00:03:07,489
and so basically like beginning of 2016

00:03:05,630 --> 00:03:11,239
there was the first open BSD image

00:03:07,489 --> 00:03:12,800
working on AWS if you interested in all

00:03:11,239 --> 00:03:14,750
this story you can have a look at all

00:03:12,800 --> 00:03:16,730
these all this link I put on the slides

00:03:14,750 --> 00:03:20,390
so the first one is like an introduction

00:03:16,730 --> 00:03:22,280
of how the first image was built the

00:03:20,390 --> 00:03:24,140
second one is the github repository

00:03:22,280 --> 00:03:27,770
where you have the code on how to build

00:03:24,140 --> 00:03:29,959
the actual image on AWS and the last one

00:03:27,770 --> 00:03:34,850
is by Mike and it's explaining how it

00:03:29,959 --> 00:03:37,040
worked on exam support for OpenGL D so

00:03:34,850 --> 00:03:39,500
yes so the first image worked when the

00:03:37,040 --> 00:03:42,350
network was fixed and the second issue

00:03:39,500 --> 00:03:44,600
was was disk so at the beginning open

00:03:42,350 --> 00:03:46,880
busy was using IDE fallback for disk

00:03:44,600 --> 00:03:49,280
support so it was okay for the root disk

00:03:46,880 --> 00:03:53,630
but if we're adding additional disk on

00:03:49,280 --> 00:03:55,310
AWS it was not working so like meat 16

00:03:53,630 --> 00:03:59,180
this was this was ok it was it was it

00:03:55,310 --> 00:04:02,660
was fixed what a big surprise at the end

00:03:59,180 --> 00:04:04,220
of 2016 when suddenly some open BSD

00:04:02,660 --> 00:04:06,380
machines were not starting so when we

00:04:04,220 --> 00:04:08,600
are studying an instance on AWS with the

00:04:06,380 --> 00:04:09,200
same image in some cases it was not

00:04:08,600 --> 00:04:12,260
working

00:04:09,200 --> 00:04:14,510
so it was like very surprising and what

00:04:12,260 --> 00:04:16,340
was happening is actually edible ESD the

00:04:14,510 --> 00:04:18,609
change in the hypervisor and some

00:04:16,340 --> 00:04:24,950
primitive from Zen we're not supported

00:04:18,609 --> 00:04:28,130
so this was fixed in January 2017 and so

00:04:24,950 --> 00:04:30,650
it was always fixes available since 6.1

00:04:28,130 --> 00:04:33,169
and so the picture I put there on the

00:04:30,650 --> 00:04:35,240
right is at the time of the first patch

00:04:33,169 --> 00:04:36,800
for for this issue we're actually

00:04:35,240 --> 00:04:38,780
working for a customer in Mullica with

00:04:36,800 --> 00:04:40,220
Antoine and you received an email from

00:04:38,780 --> 00:04:42,020
Mike telling him like I have a patch

00:04:40,220 --> 00:04:45,260
available can you test it and we're at

00:04:42,020 --> 00:04:46,460
the bar so we're drinking and and so we

00:04:45,260 --> 00:04:48,410
are discussing and suddenly like Antoine

00:04:46,460 --> 00:04:50,510
like couldn't take it anymore it took up

00:04:48,410 --> 00:04:52,490
this laptop Patchett's apply the patch

00:04:50,510 --> 00:04:54,080
and tested it live in this bar so this

00:04:52,490 --> 00:04:57,010
is what this picture is and you can

00:04:54,080 --> 00:05:00,380
select races of pizza on the table

00:04:57,010 --> 00:05:02,750
so all the demo I'm going to show you is

00:05:00,380 --> 00:05:03,979
going to be based on 6.1 and you can

00:05:02,750 --> 00:05:09,290
expect many more performance

00:05:03,979 --> 00:05:10,940
improvements in 6.2 so very soon so

00:05:09,290 --> 00:05:14,330
let's have a look so I'm going to start

00:05:10,940 --> 00:05:16,070
and open Beauty machine on on AWS so

00:05:14,330 --> 00:05:19,940
it's going to be hard typing with the

00:05:16,070 --> 00:05:21,560
mic I'm gonna do my best so I don't know

00:05:19,940 --> 00:05:23,300
if most of you have already seen the

00:05:21,560 --> 00:05:25,310
ablest console so this is like the

00:05:23,300 --> 00:05:27,860
console will gets you in the WS where

00:05:25,310 --> 00:05:30,020
you want to create instances and so what

00:05:27,860 --> 00:05:33,140
I'm gonna do now is I'm going to create

00:05:30,020 --> 00:05:40,039
an open busy instance so I'm just going

00:05:33,140 --> 00:05:42,890
to look for OpenBSD okay I'm gonna get

00:05:40,039 --> 00:05:45,590
the latest image here and I'm going to

00:05:42,890 --> 00:05:48,500
start it so I won't touch most of the

00:05:45,590 --> 00:05:58,400
options I'm just going to give it a tag

00:05:48,500 --> 00:06:00,080
so we know what it is okay then I need

00:05:58,400 --> 00:06:01,700
to be able to access the machine so what

00:06:00,080 --> 00:06:03,650
I'm gonna do is I'm going to create a

00:06:01,700 --> 00:06:06,680
security group which is for people not

00:06:03,650 --> 00:06:09,800
familiar with AWS and a firewall in the

00:06:06,680 --> 00:06:13,419
hypervisor of AWS to filter traffic so

00:06:09,800 --> 00:06:13,419
let's call it SSH demo

00:06:20,149 --> 00:06:24,599
okay typing with one hand is definite

00:06:22,589 --> 00:06:26,490
gonna be tricky and wait I can do it I

00:06:24,599 --> 00:06:28,110
can even say okay only my IEP so its

00:06:26,490 --> 00:06:31,050
people won't be able to connect to it

00:06:28,110 --> 00:06:32,430
and so now it's starting so what's

00:06:31,050 --> 00:06:34,529
important and we're going to deep dive

00:06:32,430 --> 00:06:36,479
into this just later is it's asking me

00:06:34,529 --> 00:06:37,710
for a keeper so that's going to be put

00:06:36,479 --> 00:06:42,749
in the authorised key file on the

00:06:37,710 --> 00:06:45,719
machine so I can connect to it so the

00:06:42,749 --> 00:06:47,669
machine is starting it's going to take

00:06:45,719 --> 00:06:49,499
about probably like 1 minute so you can

00:06:47,669 --> 00:06:50,789
see here I mean my mission is starting

00:06:49,499 --> 00:06:53,759
okay

00:06:50,789 --> 00:06:56,849
and we will be able to connect to it in

00:06:53,759 --> 00:06:58,499
about a minute so as you can see like we

00:06:56,849 --> 00:07:01,080
have several information on the machine

00:06:58,499 --> 00:07:04,649
like it's been given a public IP address

00:07:01,080 --> 00:07:07,439
I can connect to it also has a private

00:07:04,649 --> 00:07:10,199
IP address because what AWS does is all

00:07:07,439 --> 00:07:12,089
machines only have private IPS that if

00:07:10,199 --> 00:07:13,949
machines are in public submit they have

00:07:12,089 --> 00:07:15,569
one-to-one NAT mapping with the public

00:07:13,949 --> 00:07:17,669
IP address so we will be able to connect

00:07:15,569 --> 00:07:19,830
using this address and then you have all

00:07:17,669 --> 00:07:21,870
the things like instance type so it

00:07:19,830 --> 00:07:23,669
shows a very small one and we don't need

00:07:21,870 --> 00:07:25,139
anymore anymore and you also have like

00:07:23,669 --> 00:07:27,569
security group which is the one I just

00:07:25,139 --> 00:07:32,490
created to allow only connection from

00:07:27,569 --> 00:07:35,479
dead wife IP address and on port 22 so

00:07:32,490 --> 00:07:35,479
let's try and connect to it

00:07:49,339 --> 00:07:52,439
okay so here I'm connected with the user

00:07:51,899 --> 00:07:54,809
called

00:07:52,439 --> 00:07:55,860
easy to user which is standard on the ws

00:07:54,809 --> 00:07:57,449
and I'm going to explain to you

00:07:55,860 --> 00:07:58,860
afterwards how its work so as you can

00:07:57,449 --> 00:08:02,429
see I'm disconnected to the OpenBSD

00:07:58,860 --> 00:08:03,659
machine on 6.1 and that's it so it's we

00:08:02,429 --> 00:08:06,029
have an open busy machine on inside

00:08:03,659 --> 00:08:08,249
NWA's so it's not very interesting but

00:08:06,029 --> 00:08:11,729
we're gonna dive into a few more things

00:08:08,249 --> 00:08:14,159
so first the first thing is you saw that

00:08:11,729 --> 00:08:16,589
I put my public IP address and I put my

00:08:14,159 --> 00:08:18,539
publicly sorry when I created the

00:08:16,589 --> 00:08:20,849
machine and there and the question is

00:08:18,539 --> 00:08:22,619
how can i connect to it so of course I

00:08:20,849 --> 00:08:24,959
have my private key on my laptop so

00:08:22,619 --> 00:08:27,419
that's why I was able to SSH but how was

00:08:24,959 --> 00:08:30,839
the key download it to a ws so the way

00:08:27,419 --> 00:08:32,959
this works is AWS exposes a metadata web

00:08:30,839 --> 00:08:35,939
server at this dis address there and

00:08:32,959 --> 00:08:36,990
there are a lot of information and we're

00:08:35,939 --> 00:08:39,389
going to go through a few months

00:08:36,990 --> 00:08:43,250
afterwards but the one we're interested

00:08:39,389 --> 00:08:45,720
in now is public key which is like

00:08:43,250 --> 00:08:47,879
directory where you can get the public

00:08:45,720 --> 00:08:50,750
key that you gave to to the machine so

00:08:47,879 --> 00:08:50,750
we're just going to check that

00:09:06,509 --> 00:09:11,499
okay so as you can see when I connected

00:09:09,699 --> 00:09:13,209
to this and with the same address I gave

00:09:11,499 --> 00:09:16,259
you I can I can see this and now I'm

00:09:13,209 --> 00:09:16,259
gonna get the public itself

00:09:29,890 --> 00:09:34,750
okay so this is this is actually my

00:09:32,709 --> 00:09:37,390
public key okay so it's available on the

00:09:34,750 --> 00:09:39,339
on the metadata server and as you can

00:09:37,390 --> 00:09:43,589
see if I look into my authoritah key

00:09:39,339 --> 00:09:43,589
file I got exactly the same keys there

00:09:46,440 --> 00:09:51,730
so this is how it this is the same thing

00:09:49,420 --> 00:10:02,560
so now the question is how did the key

00:09:51,730 --> 00:10:04,510
get there so this question is how did it

00:10:02,560 --> 00:10:06,970
get configured and how my key ended up

00:10:04,510 --> 00:10:09,220
there is a crow interesting is to do

00:10:06,970 --> 00:10:11,829
this most Linux distribution rely on a

00:10:09,220 --> 00:10:13,690
tool called cloud in it so I gave you

00:10:11,829 --> 00:10:16,450
the link there and basically this tool

00:10:13,690 --> 00:10:18,100
is as its origin in ubuntu clouds so

00:10:16,450 --> 00:10:19,959
they wrote it to configure machine when

00:10:18,100 --> 00:10:21,459
they were building and it became like

00:10:19,959 --> 00:10:24,279
the standard for most Linux

00:10:21,459 --> 00:10:27,519
distributions so they almost all over I

00:10:24,279 --> 00:10:29,500
mean the other one I know now uses cloud

00:10:27,519 --> 00:10:31,720
in it so clearly does a lot of things

00:10:29,500 --> 00:10:34,449
but it's it's a very big piece of

00:10:31,720 --> 00:10:36,970
software in Python and it's very landing

00:10:34,449 --> 00:10:40,060
specific so in order to have like

00:10:36,970 --> 00:10:42,190
minimal coordinate implementation on to

00:10:40,060 --> 00:10:46,149
enroll easy to in it there and you can

00:10:42,190 --> 00:10:47,740
access also the repository here and this

00:10:46,149 --> 00:10:49,120
tool is actually run and when the

00:10:47,740 --> 00:10:51,600
machine is starting and it's very early

00:10:49,120 --> 00:10:54,820
in the boot process because it started

00:10:51,600 --> 00:10:58,500
when the interface comes up okay so we

00:10:54,820 --> 00:10:58,500
can have a quick look at this file

00:11:08,080 --> 00:11:11,890
okay so you get that when the interface

00:11:09,820 --> 00:11:13,870
comes up it's configured using DHCP

00:11:11,890 --> 00:11:16,720
which is the normal way to do things in

00:11:13,870 --> 00:11:20,190
AWS and then it's executing this script

00:11:16,720 --> 00:11:20,190
here the one I was just talking about

00:11:22,950 --> 00:11:27,130
okay so this script is not that long but

00:11:25,630 --> 00:11:28,720
I'm won't go through it I'm just going

00:11:27,130 --> 00:11:37,630
to give you a quick idea of what it does

00:11:28,720 --> 00:11:39,250
okay so this is like all these are the

00:11:37,630 --> 00:11:40,959
functions called by about the devisor

00:11:39,250 --> 00:11:42,940
script and I'm going to go through it

00:11:40,959 --> 00:11:44,950
quite quickly so the first thing is

00:11:42,940 --> 00:11:47,529
since this script is run very early in

00:11:44,950 --> 00:11:49,000
the boot process PF is not open so the

00:11:47,529 --> 00:11:50,560
first thing the script does is it opens

00:11:49,000 --> 00:11:53,620
PDF so we can connect to the metadata

00:11:50,560 --> 00:11:55,240
server the third thing is this script is

00:11:53,620 --> 00:11:57,640
run every time the machine is started

00:11:55,240 --> 00:11:58,990
and we only want to configure it once at

00:11:57,640 --> 00:12:01,540
the first boot basically when the

00:11:58,990 --> 00:12:03,640
instance is created so the way this is

00:12:01,540 --> 00:12:06,459
achieved is it's getting a metadata

00:12:03,640 --> 00:12:07,690
information which instanceid which is

00:12:06,459 --> 00:12:10,029
like the unique identifier of the

00:12:07,690 --> 00:12:13,089
machine inside the WS and it's comparing

00:12:10,029 --> 00:12:15,339
it to a fine bearer so valley between it

00:12:13,089 --> 00:12:18,370
and if it is different it means like

00:12:15,339 --> 00:12:20,350
it's it's a new machine okay and if it's

00:12:18,370 --> 00:12:21,850
a new machine we need to configure it so

00:12:20,350 --> 00:12:24,010
the first thing the first thing it does

00:12:21,850 --> 00:12:26,200
then it's it's actually creating the

00:12:24,010 --> 00:12:28,089
value between it file so it puts the

00:12:26,200 --> 00:12:29,560
instance ID there so when we reboot the

00:12:28,089 --> 00:12:32,589
script is going to fail at the it's

00:12:29,560 --> 00:12:34,120
gonna stop at the first Eve and then

00:12:32,589 --> 00:12:35,890
it's getting the public key so this is

00:12:34,120 --> 00:12:37,839
how my public key got in there and how I

00:12:35,890 --> 00:12:39,610
connect it to the machine its

00:12:37,839 --> 00:12:41,589
configuring the host name of the machine

00:12:39,610 --> 00:12:43,540
based on AWS metadata because when you

00:12:41,589 --> 00:12:46,300
create a machine in the ws add various

00:12:43,540 --> 00:12:50,050
gives it a default hostname so this way

00:12:46,300 --> 00:12:52,600
it's going to match this function here

00:12:50,050 --> 00:12:56,350
is executing user data which is another

00:12:52,600 --> 00:12:57,579
metadata information that EWS gives and

00:12:56,350 --> 00:13:02,290
we're going to focus on that a little

00:12:57,579 --> 00:13:03,490
later this last two I'm going to first

00:13:02,290 --> 00:13:05,860
talk about this one so this one is

00:13:03,490 --> 00:13:08,019
easier to understand so since Cree is

00:13:05,860 --> 00:13:09,820
going to clean up the instance so if you

00:13:08,019 --> 00:13:10,600
create an image from an existing open B

00:13:09,820 --> 00:13:11,890
installation

00:13:10,600 --> 00:13:14,860
what's going to happen is you're gonna

00:13:11,890 --> 00:13:16,930
have SSH key logs and ditches police for

00:13:14,860 --> 00:13:18,760
instance and this trip is going to

00:13:16,930 --> 00:13:20,420
remove all that so we start with a brand

00:13:18,760 --> 00:13:23,150
new machine ok

00:13:20,420 --> 00:13:25,190
so then when this is done the the

00:13:23,150 --> 00:13:27,070
machines gonna boots since there is no

00:13:25,190 --> 00:13:30,410
SSH key it's going to narrate one and

00:13:27,070 --> 00:13:33,860
what this trip does here is is gonna

00:13:30,410 --> 00:13:35,660
write to ask the first time a very small

00:13:33,860 --> 00:13:37,880
scripts to display the fingerprints of

00:13:35,660 --> 00:13:41,960
the SSH key because once again the

00:13:37,880 --> 00:13:43,400
standard behavior from those AWS images

00:13:41,960 --> 00:13:45,110
where at the end of the boot you've got

00:13:43,400 --> 00:13:48,880
the fingerprints of the SSH key that has

00:13:45,110 --> 00:13:48,880
that have been generated for the machine

00:13:51,340 --> 00:13:57,080
another thing is you remember when I

00:13:53,630 --> 00:13:59,570
connected I used the ec2 user to connect

00:13:57,080 --> 00:14:00,380
to the machine so this is like solid

00:13:59,570 --> 00:14:02,330
baby on AWS

00:14:00,380 --> 00:14:05,660
well basically you never connect as root

00:14:02,330 --> 00:14:10,100
so you use there's no SSH SSH key for

00:14:05,660 --> 00:14:12,350
for root and another Nanak's was using

00:14:10,100 --> 00:14:14,980
easy to user from the beginning and most

00:14:12,350 --> 00:14:18,920
Linux distribution went the same way so

00:14:14,980 --> 00:14:21,560
reddit federal center eyes and FreeBSD

00:14:18,920 --> 00:14:23,150
made the same choice Debian and Ubuntu

00:14:21,560 --> 00:14:25,190
made different ones so as you can see

00:14:23,150 --> 00:14:26,450
the Debian you default to the reside min

00:14:25,190 --> 00:14:31,070
and we're going to is Ubuntu they'd

00:14:26,450 --> 00:14:32,420
never do anything like the others and so

00:14:31,070 --> 00:14:36,800
and when I connect to the machine this

00:14:32,420 --> 00:14:38,180
digital user as like unlimited do as do

00:14:36,800 --> 00:14:40,400
as access so if we look at the

00:14:38,180 --> 00:14:43,180
configuration of us we can see that we

00:14:40,400 --> 00:14:43,180
have automations

00:14:51,899 --> 00:14:56,980
so you can see that I can do anything

00:14:54,220 --> 00:15:06,310
with to user and I don't need to enter a

00:14:56,980 --> 00:15:08,709
password so for instance like and so you

00:15:06,310 --> 00:15:10,570
see when I ID plate image I can see all

00:15:08,709 --> 00:15:12,370
the fingerprints from the machine from

00:15:10,570 --> 00:15:16,170
when it booty so the one created by the

00:15:12,370 --> 00:15:16,170
script I showed you earlier

00:15:24,120 --> 00:15:28,060
ok so now that we have an instance we're

00:15:26,589 --> 00:15:29,649
going to try and do a few things with it

00:15:28,060 --> 00:15:31,089
so the first thing we is going to do is

00:15:29,649 --> 00:15:33,910
we're going to install the tool called

00:15:31,089 --> 00:15:36,760
terraform and then we're going to clone

00:15:33,910 --> 00:15:39,430
a repository and do a few thing with

00:15:36,760 --> 00:15:41,740
styrofoam so for those of you who do not

00:15:39,430 --> 00:15:44,529
know to reform it's it's a tool to

00:15:41,740 --> 00:15:47,709
describe clad infrastructure components

00:15:44,529 --> 00:15:49,390
and build them in a repeatable way so

00:15:47,709 --> 00:15:51,790
you can think of it as a pipette but for

00:15:49,390 --> 00:15:53,490
instead of configuring several services

00:15:51,790 --> 00:15:55,959
inside server it's going to configure

00:15:53,490 --> 00:15:57,880
infrastructure so you have alternative

00:15:55,959 --> 00:16:00,390
like cloud formation which is AWS

00:15:57,880 --> 00:16:03,550
specific and hit that was developed for

00:16:00,390 --> 00:16:04,870
OpenStack but Tara home is is getting to

00:16:03,550 --> 00:16:07,000
be like the standard for all kind of

00:16:04,870 --> 00:16:12,390
things it's supported also by GCP by

00:16:07,000 --> 00:16:12,390
Asia and by OpenStack now so let's

00:16:19,889 --> 00:16:21,949
you

00:16:28,879 --> 00:16:41,419
okay so first I'm inserting console and

00:16:31,459 --> 00:16:43,369
I'm gonna install get okay and then I'm

00:16:41,419 --> 00:16:45,949
going to clone a repository where all

00:16:43,369 --> 00:16:47,449
that the Devo is and everything is on

00:16:45,949 --> 00:16:50,109
github so you can can have a look at it

00:16:47,449 --> 00:16:50,109
afterwards if you want

00:16:58,490 --> 00:17:03,930
okay so in this repository we have

00:17:00,540 --> 00:17:06,089
several things and the first thing I'm

00:17:03,930 --> 00:17:08,760
gonna do is I'm gonna build a V PC

00:17:06,089 --> 00:17:11,189
inside AWS and I'm gonna show you what

00:17:08,760 --> 00:17:17,280
it is since you gotta take a few about a

00:17:11,189 --> 00:17:21,439
minute I'm gonna start it okay okay I

00:17:17,280 --> 00:17:21,439
installed I didn't solve terraform sorry

00:17:29,630 --> 00:17:34,370
thanks okay

00:17:41,130 --> 00:17:44,220
I went too fast I already installed

00:17:42,900 --> 00:17:46,410
console on this machine where I'd known

00:17:44,220 --> 00:17:56,670
it is so that's going to work a lot

00:17:46,410 --> 00:18:04,860
better now it's very hard to type with

00:17:56,670 --> 00:18:06,450
the mic okay I need something else and

00:18:04,860 --> 00:18:08,070
it so this is interesting so what's

00:18:06,450 --> 00:18:10,470
happening is I'm telling terraform to do

00:18:08,070 --> 00:18:12,300
things and I have no permission inside

00:18:10,470 --> 00:18:14,250
of the brush to do it so what I forgot

00:18:12,300 --> 00:18:15,750
to do is to update my credentials from

00:18:14,250 --> 00:18:18,290
to upload my credential bear so I'm

00:18:15,750 --> 00:18:18,290
going to do it right now

00:18:54,490 --> 00:18:59,710
okay so I'm using a profile here so I

00:18:57,150 --> 00:19:01,810
have simple identities inside my

00:18:59,710 --> 00:19:04,590
database credentials Partizan getting

00:19:01,810 --> 00:19:04,590
the one I'm using

00:19:10,580 --> 00:19:20,540
okay okay let should have work a lot

00:19:14,910 --> 00:19:20,540
better okay what happens

00:20:30,930 --> 00:20:46,300
okay we're there sorry for this well

00:20:44,680 --> 00:20:47,920
actually this is not the real demon

00:20:46,300 --> 00:20:49,780
power because afterwards things might

00:20:47,920 --> 00:20:52,750
break this is something that should that

00:20:49,780 --> 00:20:54,250
work like from the beginning okay so I

00:20:52,750 --> 00:20:55,780
trusted the reform plan which is like

00:20:54,250 --> 00:20:57,820
telling me what the reform is going to

00:20:55,780 --> 00:20:59,230
do so it is saying that it is going to

00:20:57,820 --> 00:21:02,310
create a whole bunch of resources and

00:20:59,230 --> 00:21:02,310
I'm going to show it just afterwards

00:21:13,200 --> 00:21:17,410
okay so I don't know if most of you have

00:21:15,940 --> 00:21:18,700
heard of Tara forms I'm just going to

00:21:17,410 --> 00:21:20,980
give you a very quick introduction to

00:21:18,700 --> 00:21:24,100
what it what it looks like so basically

00:21:20,980 --> 00:21:26,470
it did in in the on the black box is

00:21:24,100 --> 00:21:28,720
here you have description of resources

00:21:26,470 --> 00:21:31,270
inside the WS so on the on the top for

00:21:28,720 --> 00:21:33,309
instance you have the description of the

00:21:31,270 --> 00:21:35,530
DPC sorry which is basically like a

00:21:33,309 --> 00:21:39,510
private subnet inside the WS a dedicated

00:21:35,530 --> 00:21:41,740
subnet a whole bunch of subnets and

00:21:39,510 --> 00:21:43,030
inside this isolated network you can

00:21:41,740 --> 00:21:46,000
create different resources such as

00:21:43,030 --> 00:21:48,610
Sundays for instance and this snippet

00:21:46,000 --> 00:21:50,650
here is creating a public subnet so

00:21:48,610 --> 00:21:53,200
what's interesting is this resource is a

00:21:50,650 --> 00:21:55,120
subnet and I call it public and what's

00:21:53,200 --> 00:21:56,440
important here is I can I can give it a

00:21:55,120 --> 00:21:57,280
reference to another object that I've

00:21:56,440 --> 00:21:59,679
created before

00:21:57,280 --> 00:22:01,510
so this VPC ID there is actually

00:21:59,679 --> 00:22:04,299
pointing to the VP's that I've created

00:22:01,510 --> 00:22:06,179
before so I can like dynamically get the

00:22:04,299 --> 00:22:07,990
idea of the object that was created and

00:22:06,179 --> 00:22:10,120
terraform is going to do a whole

00:22:07,990 --> 00:22:13,390
dependency graph so all the resources

00:22:10,120 --> 00:22:17,110
are created in order and in addition to

00:22:13,390 --> 00:22:18,789
like networking things I'm also creating

00:22:17,110 --> 00:22:20,080
a machine so a bastion host where I'm

00:22:18,789 --> 00:22:22,150
going to attach you to connect two

00:22:20,080 --> 00:22:23,919
different machines and like you have

00:22:22,150 --> 00:22:26,380
like different parameters for foreign

00:22:23,919 --> 00:22:28,030
machine like the instance I've t2 micro

00:22:26,380 --> 00:22:30,970
which is the same one than the machine

00:22:28,030 --> 00:22:34,570
I'm using right now the ami which is the

00:22:30,970 --> 00:22:37,059
using and here it's so the OpenBSD ami

00:22:34,570 --> 00:22:40,059
and in which that I'm going to create it

00:22:37,059 --> 00:22:41,620
and and so on so if we're lucky there

00:22:40,059 --> 00:22:44,770
are from it is going to have worked

00:22:41,620 --> 00:22:46,450
let's let's have a look at it okay so

00:22:44,770 --> 00:22:50,559
it's still creating but I can I can

00:22:46,450 --> 00:22:53,350
start showing you things so I'm going to

00:22:50,559 --> 00:22:55,390
the VP see part of edible us so I'm

00:22:53,350 --> 00:22:58,120
going to show you the DBC I'm creating

00:22:55,390 --> 00:23:01,270
so let's filter on the new one so it's

00:22:58,120 --> 00:23:05,950
this one called demo Europe ESD con so

00:23:01,270 --> 00:23:10,690
this is with this address ranch and I

00:23:05,950 --> 00:23:13,299
have like several subnets like three

00:23:10,690 --> 00:23:14,409
public and three private subnets okay

00:23:13,299 --> 00:23:16,720
and so everything you like is being

00:23:14,409 --> 00:23:17,950
configured right now and so if you

00:23:16,720 --> 00:23:20,320
remember just before I showed you an

00:23:17,950 --> 00:23:22,780
example with only four subnets because

00:23:20,320 --> 00:23:28,480
it was easier to fit on the slide

00:23:22,780 --> 00:23:30,520
now is so this is what we're currently

00:23:28,480 --> 00:23:32,020
building now so everything is almost

00:23:30,520 --> 00:23:34,990
ready the only thing that's missing is

00:23:32,020 --> 00:23:36,940
then that gateway here so you have two

00:23:34,990 --> 00:23:39,160
different kind of subnets in a ws public

00:23:36,940 --> 00:23:40,420
ones which are machine we have a which

00:23:39,160 --> 00:23:42,820
have a public IP address so you can

00:23:40,420 --> 00:23:44,290
directly connect to them and private

00:23:42,820 --> 00:23:45,880
subnets which are certain let's

00:23:44,290 --> 00:23:48,070
Commission only have private IP

00:23:45,880 --> 00:23:49,690
addresses so if these machines want to

00:23:48,070 --> 00:23:51,520
connect to the internet they need to be

00:23:49,690 --> 00:23:53,800
an added and there's a service inside of

00:23:51,520 --> 00:23:55,420
us to provide this nut so basically any

00:23:53,800 --> 00:23:58,210
machine here would connect to the

00:23:55,420 --> 00:24:00,130
internet using this not gateway and this

00:23:58,210 --> 00:24:02,460
is a little long to create but it should

00:24:00,130 --> 00:24:02,460
be okay now

00:24:20,280 --> 00:24:24,940
yes exactly with the description I gave

00:24:22,720 --> 00:24:27,520
you the examples it's what's in the code

00:24:24,940 --> 00:24:28,690
there actually okay with like different

00:24:27,520 --> 00:24:30,100
thing because it's not the same kind of

00:24:28,690 --> 00:24:31,420
exactly the same thing because it's

00:24:30,100 --> 00:24:33,160
different subnets but this exact is the

00:24:31,420 --> 00:24:34,630
idea so it's a language that describe

00:24:33,160 --> 00:24:36,760
what you want inside the blue eyes and

00:24:34,630 --> 00:24:41,800
then it's going to create them inside

00:24:36,760 --> 00:24:44,250
the ws oh it's it's similar like what we

00:24:41,800 --> 00:24:46,450
yeah exactly

00:24:44,250 --> 00:24:48,880
okay so everything is done so this is

00:24:46,450 --> 00:24:51,370
all the objects that were created okay

00:24:48,880 --> 00:25:01,630
and I can connect to this new virtual

00:24:51,370 --> 00:25:03,490
machine here and here we go

00:25:01,630 --> 00:25:06,720
okay I'm connected on the new machine so

00:25:03,490 --> 00:25:09,460
these are this is the first machine here

00:25:06,720 --> 00:25:11,490
so I can show you its IP address so the

00:25:09,460 --> 00:25:19,540
one from which I'm working terraform

00:25:11,490 --> 00:25:22,100
okay and this is the new one okay

00:25:19,540 --> 00:25:23,540
okay so this one is in the adoration

00:25:22,100 --> 00:25:31,580
that I just showed you and under on the

00:25:23,540 --> 00:25:33,290
slice okay so now what we're going to do

00:25:31,580 --> 00:25:35,600
is we're going to start creating more

00:25:33,290 --> 00:25:37,580
and more interesting things okay so we

00:25:35,600 --> 00:25:39,500
add like the basics so all the network

00:25:37,580 --> 00:25:41,680
basics and what we're going to do now is

00:25:39,500 --> 00:25:46,190
we are going to build a console cluster

00:25:41,680 --> 00:25:48,410
so consume is a tool developed by Hetchy

00:25:46,190 --> 00:25:50,810
Corp so the people would do vagrant

00:25:48,410 --> 00:25:53,480
packer and terraform and it's useful

00:25:50,810 --> 00:25:55,850
service discovery and it's a distributed

00:25:53,480 --> 00:25:57,890
key-value store so in our case this

00:25:55,850 --> 00:26:00,110
cluster is going to be made of three

00:25:57,890 --> 00:26:03,070
machines there which are console server

00:26:00,110 --> 00:26:05,660
so server that participate in the rafts

00:26:03,070 --> 00:26:08,540
distributing consensus and that store

00:26:05,660 --> 00:26:10,220
data and this one is just a client of

00:26:08,540 --> 00:26:11,810
the controller so it's part of the

00:26:10,220 --> 00:26:13,640
cluster but it's not actually going to

00:26:11,810 --> 00:26:16,370
store any actual data and not

00:26:13,640 --> 00:26:18,530
participating in any master election and

00:26:16,370 --> 00:26:20,090
I'm just using it to connect to the UI

00:26:18,530 --> 00:26:22,910
so I can give you like a graphical

00:26:20,090 --> 00:26:25,420
version of what's happening and let's

00:26:22,910 --> 00:26:25,420
let's do that

00:26:42,140 --> 00:26:46,710
okay so now I'm using another to reform

00:26:44,610 --> 00:26:48,360
script it's similar to the one before

00:26:46,710 --> 00:26:51,630
but instead of creating network

00:26:48,360 --> 00:26:52,950
resources it's going to create machines

00:26:51,630 --> 00:26:59,880
like the formation that I just showed

00:26:52,950 --> 00:27:03,170
you to build the console cluster so it's

00:26:59,880 --> 00:27:03,170
going to take probably like a minute

00:27:07,100 --> 00:27:13,110
okay so this is well this is a spider

00:27:10,560 --> 00:27:15,090
but I already told all this what's

00:27:13,110 --> 00:27:17,820
important Wisconsin is it's used a lot

00:27:15,090 --> 00:27:20,130
in micro services because it allows

00:27:17,820 --> 00:27:22,320
service discovery so basically machines

00:27:20,130 --> 00:27:24,570
our containers can register themselves

00:27:22,320 --> 00:27:26,880
as providing a service and then you can

00:27:24,570 --> 00:27:29,910
use console as a DNS to connect to these

00:27:26,880 --> 00:27:31,770
machines it also provides a key value

00:27:29,910 --> 00:27:33,360
store so you can store configuration and

00:27:31,770 --> 00:27:35,400
you can have your application get this

00:27:33,360 --> 00:27:38,280
configure it get that data from console

00:27:35,400 --> 00:27:40,320
and get configuration from there what's

00:27:38,280 --> 00:27:43,380
important is it's very resilient it's

00:27:40,320 --> 00:27:44,790
been tested a lot for for resiliency and

00:27:43,380 --> 00:27:47,610
that's why this is a rough

00:27:44,790 --> 00:27:49,500
implementation for to make sure that

00:27:47,610 --> 00:27:51,900
there's on data is always consistent

00:27:49,500 --> 00:27:53,490
there's always a master and if one node

00:27:51,900 --> 00:27:57,030
were to go down everything would still

00:27:53,490 --> 00:28:01,740
be okay so let's see if it's if it's up

00:27:57,030 --> 00:28:10,350
now okay so as you can see there it's

00:28:01,740 --> 00:28:13,320
it's it's app okay we can have a quick

00:28:10,350 --> 00:28:15,420
look at it so I'm going to as you

00:28:13,320 --> 00:28:17,400
remember I there's all these machines

00:28:15,420 --> 00:28:19,410
have only private IP addresses so I need

00:28:17,400 --> 00:28:22,220
to connect to this one through this one

00:28:19,410 --> 00:28:22,220
so I'm just going to do that

00:28:44,640 --> 00:28:49,840
so this is the control UI so the cursor

00:28:47,410 --> 00:28:52,690
has been built and as you can see

00:28:49,840 --> 00:28:54,700
console identified four nodes so three

00:28:52,690 --> 00:28:56,860
console nodes where there's one service

00:28:54,700 --> 00:28:58,750
which is the console service itself and

00:28:56,860 --> 00:29:00,370
well control agent where there's no

00:28:58,750 --> 00:29:04,270
service it's on your client on the

00:29:00,370 --> 00:29:06,010
cluster and this is the view we have the

00:29:04,270 --> 00:29:07,570
UI from from console but we can also

00:29:06,010 --> 00:29:09,160
check it from the machine itself so I'm

00:29:07,570 --> 00:29:10,720
going to connect I'm going to connect to

00:29:09,160 --> 00:29:19,180
one of the console servers and show you

00:29:10,720 --> 00:29:22,150
that console is not a tablet specific it

00:29:19,180 --> 00:29:25,600
could run anywhere and there are for

00:29:22,150 --> 00:29:26,290
most a telecom can can drive AWS GCP

00:29:25,600 --> 00:29:31,270
asier

00:29:26,290 --> 00:29:32,740
OpenStack and many more no no I mean the

00:29:31,270 --> 00:29:34,750
adverse support is very important

00:29:32,740 --> 00:29:36,730
because it's how they started but

00:29:34,750 --> 00:29:39,840
there's a big very big community and

00:29:36,730 --> 00:29:39,840
many people like working on it

00:29:52,340 --> 00:29:58,559
and I can see here exactly the same

00:29:55,139 --> 00:30:00,149
information we had on the UI okay so on

00:29:58,559 --> 00:30:03,450
this server we have come to installed

00:30:00,149 --> 00:30:06,929
and in the agent so now I mean you

00:30:03,450 --> 00:30:08,700
remember I told you like I started open

00:30:06,929 --> 00:30:17,340
dat machine and I have consultants so

00:30:08,700 --> 00:30:18,749
how did we did so so you see that all

00:30:17,340 --> 00:30:20,879
this machine are configured and we have

00:30:18,749 --> 00:30:22,830
a console cluster but with the a.m. I

00:30:20,879 --> 00:30:24,659
thought the image I used when I started

00:30:22,830 --> 00:30:26,789
the cluster is a standard open busy

00:30:24,659 --> 00:30:28,379
machine with not nothing installed in

00:30:26,789 --> 00:30:31,860
there so of course console is not in

00:30:28,379 --> 00:30:33,990
sober so the way this works is with the

00:30:31,860 --> 00:30:35,610
user data I mentioned before so it's a

00:30:33,990 --> 00:30:37,080
script that you can provide when you

00:30:35,610 --> 00:30:38,490
create in the de bellas machine that's

00:30:37,080 --> 00:30:40,679
going to be available on the metadata

00:30:38,490 --> 00:30:43,110
server and that is going to be run by

00:30:40,679 --> 00:30:45,090
clouding it or in our case ec2 in it and

00:30:43,110 --> 00:30:46,950
it provides you a way to bootstrap the

00:30:45,090 --> 00:30:50,669
machine and so a whole bunch of stuff

00:30:46,950 --> 00:30:53,129
and do configuration if you want yeah

00:30:50,669 --> 00:30:54,539
you could you could actually one of the

00:30:53,129 --> 00:30:56,429
reason cloud unit is so big is because

00:30:54,539 --> 00:30:59,159
you can have direct puppet primitive in

00:30:56,429 --> 00:31:00,659
there for instance so you could you

00:30:59,159 --> 00:31:02,700
could do a puppet run here for instance

00:31:00,659 --> 00:31:04,499
in my case what I want to do is very

00:31:02,700 --> 00:31:05,519
simple so I don't need puppet that you

00:31:04,499 --> 00:31:08,549
could you could definitely do it with

00:31:05,519 --> 00:31:10,710
pepper if you want so and what I do is

00:31:08,549 --> 00:31:13,259
be clear install console and then I do

00:31:10,710 --> 00:31:14,610
the console configuration so I'm not

00:31:13,259 --> 00:31:16,860
going to go into too much detail but

00:31:14,610 --> 00:31:18,389
basically this part here is telling is

00:31:16,860 --> 00:31:20,669
telling console it's turning console

00:31:18,389 --> 00:31:22,049
that this is a server ok you remember

00:31:20,669 --> 00:31:24,509
there's two distinct notes in console

00:31:22,049 --> 00:31:26,220
servers and clients and so this one is a

00:31:24,509 --> 00:31:28,169
server and this one the boot up expect

00:31:26,220 --> 00:31:31,710
is selling like don't bootstrap any

00:31:28,169 --> 00:31:34,590
cluster while you don't have at at least

00:31:31,710 --> 00:31:36,779
three members ok so because if you don't

00:31:34,590 --> 00:31:37,919
have anything like this in there when

00:31:36,779 --> 00:31:39,960
the server is going to start is going to

00:31:37,919 --> 00:31:41,519
start in standalone note and you

00:31:39,960 --> 00:31:42,990
wouldn't have any resiliency in our case

00:31:41,519 --> 00:31:44,700
we want some so we would Nutella

00:31:42,990 --> 00:31:49,379
constantly I start with Sri know that

00:31:44,700 --> 00:31:52,590
list sorry yes exactly

00:31:49,379 --> 00:31:54,419
I think like if a console server is by

00:31:52,590 --> 00:31:55,830
itself it's going to establish go run

00:31:54,419 --> 00:31:57,840
for one okay

00:31:55,830 --> 00:31:59,250
so that's why I'm telling it well don't

00:31:57,840 --> 00:32:03,210
start anything before you at least three

00:31:59,250 --> 00:32:04,740
and the thing is like it need to

00:32:03,210 --> 00:32:07,230
discover the whole host of

00:32:04,740 --> 00:32:08,760
because the first all the three console

00:32:07,230 --> 00:32:11,429
servers are going to install console and

00:32:08,760 --> 00:32:12,779
start with this configuration but the

00:32:11,429 --> 00:32:14,549
thing is they need to find the other

00:32:12,779 --> 00:32:16,559
ones to build the cluster and bid the

00:32:14,549 --> 00:32:18,840
quorum and the way it is done is you

00:32:16,559 --> 00:32:21,840
have different discovery mechanism and

00:32:18,840 --> 00:32:24,270
the one I use here is integration they

00:32:21,840 --> 00:32:26,520
did with AWS which is it's trying to

00:32:24,270 --> 00:32:29,789
discover other members from the cluster

00:32:26,520 --> 00:32:30,750
by using AdWords API so what what

00:32:29,789 --> 00:32:32,760
console is going to do is going to

00:32:30,750 --> 00:32:34,320
describe all instances and it's going to

00:32:32,760 --> 00:32:36,870
have all instance is going to try to

00:32:34,320 --> 00:32:38,940
connect to all instances with this

00:32:36,870 --> 00:32:40,470
specific tag here okay so a tag called

00:32:38,940 --> 00:32:42,059
console closure with value comes home

00:32:40,470 --> 00:32:44,059
and I'm going to show you that the

00:32:42,059 --> 00:32:46,770
British consul how it works afterwards

00:32:44,059 --> 00:32:48,330
and then when we need to enable the

00:32:46,770 --> 00:32:50,090
console service so if we reboot the

00:32:48,330 --> 00:32:53,070
machine consider gonna start and then

00:32:50,090 --> 00:32:55,230
there's a small workaround I had to do

00:32:53,070 --> 00:32:57,899
to get console to start at first boot is

00:32:55,230 --> 00:33:00,750
since I in able console very early in

00:32:57,899 --> 00:33:02,370
the boot process it's it's done by when

00:33:00,750 --> 00:33:04,110
the interface is coming up so it's

00:33:02,370 --> 00:33:05,640
enabled so it's going to be written this

00:33:04,110 --> 00:33:08,429
is going to be written to I'll see that

00:33:05,640 --> 00:33:11,070
contact local but the thing is this file

00:33:08,429 --> 00:33:11,970
is path is passed earlier on only once

00:33:11,070 --> 00:33:13,620
in the boot process

00:33:11,970 --> 00:33:15,659
so basically console is going to be

00:33:13,620 --> 00:33:17,700
appended to pick a jscript to be to be

00:33:15,659 --> 00:33:20,039
started but it's since it's not gonna be

00:33:17,700 --> 00:33:21,539
really reread afterwards control would

00:33:20,039 --> 00:33:24,149
not start okay so to have it twelve

00:33:21,539 --> 00:33:27,059
starts what I did is I write to RC first

00:33:24,149 --> 00:33:37,320
time start console okay so this is wait

00:33:27,059 --> 00:33:43,799
it's gonna start that afterwards here on

00:33:37,320 --> 00:33:46,320
the console the few things I told you so

00:33:43,799 --> 00:33:47,909
we have now we have many more instances

00:33:46,320 --> 00:33:50,730
than before because we have the new the

00:33:47,909 --> 00:33:54,149
four new ones the concern ones and if I

00:33:50,730 --> 00:33:56,039
click on this this here I can show you

00:33:54,149 --> 00:33:58,590
that there's a tag and this is how all

00:33:56,039 --> 00:34:02,730
the console servers are finding each

00:33:58,590 --> 00:34:04,980
other and also so I won't dive dive into

00:34:02,730 --> 00:34:07,919
it but the machines needs to have

00:34:04,980 --> 00:34:09,990
permissions to call the AdWords API so

00:34:07,919 --> 00:34:11,879
the Machine have a row which allows them

00:34:09,990 --> 00:34:14,480
to do a describe instance so basically

00:34:11,879 --> 00:34:16,440
all the instance with a given tag okay

00:34:14,480 --> 00:34:18,270
and if you have question about the you

00:34:16,440 --> 00:34:20,820
can discussions afterwards

00:34:18,270 --> 00:34:23,790
so now that we have this control cluster

00:34:20,820 --> 00:34:25,350
well what we can what what are we going

00:34:23,790 --> 00:34:26,940
to do is it so there are many things you

00:34:25,350 --> 00:34:28,740
can do with Wisconsin I was saying

00:34:26,940 --> 00:34:31,020
before but in our case we're going to

00:34:28,740 --> 00:34:32,850
use something that's presently pretty

00:34:31,020 --> 00:34:34,139
simple we're going to use a companion to

00:34:32,850 --> 00:34:36,389
the console that's called console

00:34:34,139 --> 00:34:39,360
templates and what console template does

00:34:36,389 --> 00:34:41,310
is it's connected it connects to console

00:34:39,360 --> 00:34:43,050
and watch for keys in console and when

00:34:41,310 --> 00:34:44,460
they change it can generate a template

00:34:43,050 --> 00:34:46,679
it can generate your file from the

00:34:44,460 --> 00:34:48,690
template and it can execute a script or

00:34:46,679 --> 00:34:51,750
like a reload of configuration for

00:34:48,690 --> 00:34:53,190
instance so what we're going to do with

00:34:51,750 --> 00:34:55,350
this is we're going to build a dynamic

00:34:53,190 --> 00:34:56,879
VPN gateway so what we want to do what

00:34:55,350 --> 00:34:58,260
we want to achieve is to have a generic

00:34:56,879 --> 00:35:00,240
the piano scene without any

00:34:58,260 --> 00:35:02,850
configuration and what we could do is

00:35:00,240 --> 00:35:05,400
put the configuration we need like in

00:35:02,850 --> 00:35:06,869
turn create key and all this inside

00:35:05,400 --> 00:35:10,020
console and then it's going to build the

00:35:06,869 --> 00:35:12,860
configuration and and start the VPN okay

00:35:10,020 --> 00:35:12,860
so let's let's do that

00:35:22,369 --> 00:35:29,469
so I'm using telephone again to build

00:35:25,489 --> 00:35:29,469
this machine is simple concrete

00:35:43,150 --> 00:35:48,890
so this is where we were before and I'm

00:35:46,910 --> 00:35:50,900
building this new machine here okay and

00:35:48,890 --> 00:35:52,430
this new machine is going to be the

00:35:50,900 --> 00:35:54,770
machine which which we are going to use

00:35:52,430 --> 00:35:57,049
to be at the VPN okay

00:35:54,770 --> 00:35:58,520
so it's gonna be ready in a few second

00:35:57,049 --> 00:35:59,990
you can either look at and you can ever

00:35:58,520 --> 00:36:01,880
look at it so what we're going to just

00:35:59,990 --> 00:36:05,270
afterwards is we're actually going to

00:36:01,880 --> 00:36:07,880
connect that afterwards is just to win

00:36:05,270 --> 00:36:09,799
some time so what we're gonna do is it's

00:36:07,880 --> 00:36:12,109
gonna it's gonna be this okay so I'm

00:36:09,799 --> 00:36:14,210
gonna start a machine inside another AWS

00:36:12,109 --> 00:36:16,819
region in the US okay this is the one

00:36:14,210 --> 00:36:19,640
called demo there and I'm gonna build a

00:36:16,819 --> 00:36:23,030
VPN towards this mission in I'm gonna be

00:36:19,640 --> 00:36:25,640
between this this machine here and the

00:36:23,030 --> 00:36:28,220
region in the regional region of AWS I'm

00:36:25,640 --> 00:36:30,380
not gonna build the plane between my

00:36:28,220 --> 00:36:32,180
OpenBSD machine inside islands and

00:36:30,380 --> 00:36:34,280
another opened in this Domitian inside

00:36:32,180 --> 00:36:38,780
Virginia what I'm going to do is I'm

00:36:34,280 --> 00:36:42,319
going to use the native AWS VPN service

00:36:38,780 --> 00:36:44,630
which is called virtual gateway in the

00:36:42,319 --> 00:36:45,680
WS so basically Edwards as a VPN service

00:36:44,630 --> 00:36:47,630
and what I'm going to do is I'm going

00:36:45,680 --> 00:36:49,160
I'm going to connect my machine to this

00:36:47,630 --> 00:36:51,790
VPN service and then I'm going to try

00:36:49,160 --> 00:36:54,799
and ping the demo server inside this

00:36:51,790 --> 00:36:56,900
division in Ireland so let's let's just

00:36:54,799 --> 00:36:59,319
go back to to the machine and see where

00:36:56,900 --> 00:36:59,319
it is

00:37:10,050 --> 00:37:27,160
okay here we go and we can check that

00:37:16,920 --> 00:37:29,200
IPSec is has been enabled so well

00:37:27,160 --> 00:37:31,150
there's no episode that configuration

00:37:29,200 --> 00:37:48,579
yet because I haven't done anything with

00:37:31,150 --> 00:37:50,619
the machine there's nothing I mean I am

00:37:48,579 --> 00:37:53,740
i p6 enable but there's nothing in there

00:37:50,619 --> 00:37:55,240
and you remember before we did we

00:37:53,740 --> 00:37:59,440
installed console using user data and

00:37:55,240 --> 00:38:03,640
this time we did a few more things okay

00:37:59,440 --> 00:38:05,319
so this is like we enable the PC IPSec

00:38:03,640 --> 00:38:10,930
which is what I just showed you okay

00:38:05,319 --> 00:38:12,849
here and then we installed console and

00:38:10,930 --> 00:38:14,319
we so this tool I was telling you about

00:38:12,849 --> 00:38:15,640
which is constant amplitude is going to

00:38:14,319 --> 00:38:20,440
connect the console and get data from

00:38:15,640 --> 00:38:23,170
from there so package and we configure

00:38:20,440 --> 00:38:25,630
it okay so we're going to connect with

00:38:23,170 --> 00:38:28,089
the local console agents okay so in so

00:38:25,630 --> 00:38:30,849
also control agents on the VPN machine

00:38:28,089 --> 00:38:33,309
and then this template configuration

00:38:30,849 --> 00:38:36,010
which is basically well I have an IPSec

00:38:33,309 --> 00:38:37,569
template file okay you're going to use

00:38:36,010 --> 00:38:39,160
this template and when you have when

00:38:37,569 --> 00:38:41,319
they are when you have keys inside

00:38:39,160 --> 00:38:43,690
console that matches this template

00:38:41,319 --> 00:38:46,630
you're going to generate this IPSec that

00:38:43,690 --> 00:38:47,530
con file okay and when the file change

00:38:46,630 --> 00:38:49,089
what you're going to do is you're going

00:38:47,530 --> 00:38:53,079
to run this command which is going to

00:38:49,089 --> 00:38:57,609
reload the IPSec configuration and here

00:38:53,079 --> 00:38:59,410
is the template here so I want the way

00:38:57,609 --> 00:39:01,059
the template works it's basically I'm

00:38:59,410 --> 00:39:02,890
going to create keys inside console that

00:39:01,059 --> 00:39:05,530
are going to loop this way okay so I'm

00:39:02,890 --> 00:39:07,450
going to add a root key called VPN and

00:39:05,530 --> 00:39:09,339
then like a description for the VPN

00:39:07,450 --> 00:39:12,099
endpoints I want to I want to connect to

00:39:09,339 --> 00:39:13,540
and then I have three sub keys which

00:39:12,099 --> 00:39:15,460
have all the configuration I need to

00:39:13,540 --> 00:39:18,309
build the IPSec configuration and so

00:39:15,460 --> 00:39:20,380
that's basically the network I want to

00:39:18,309 --> 00:39:21,849
connect to the endpoint which is the IP

00:39:20,380 --> 00:39:22,840
address of the machine I wants you to go

00:39:21,849 --> 00:39:24,250
to

00:39:22,840 --> 00:39:26,110
and appreciate key I want to use so

00:39:24,250 --> 00:39:27,130
basically from this in console we're

00:39:26,110 --> 00:39:29,190
going to try and generate this

00:39:27,130 --> 00:39:31,300
configuration in the IPSec that conf and

00:39:29,190 --> 00:39:34,680
the way this is done with console

00:39:31,300 --> 00:39:36,940
champion is with this I mean frankly

00:39:34,680 --> 00:39:39,850
language which is derived from go

00:39:36,940 --> 00:39:42,580
template and what it does is it's going

00:39:39,850 --> 00:39:44,920
to iterate over all sub keys inside VPN

00:39:42,580 --> 00:39:47,890
so this is the first line it's going to

00:39:44,920 --> 00:39:49,300
check if these variables are not empty

00:39:47,890 --> 00:39:52,780
because I wouldn't want to create an

00:39:49,300 --> 00:39:54,280
invalid IPSec configuration and so it's

00:39:52,780 --> 00:39:56,320
like basic sanitation I don't want this

00:39:54,280 --> 00:39:59,050
variable to be empty and then just going

00:39:56,320 --> 00:40:01,840
to generate this this code inside the IP

00:39:59,050 --> 00:40:09,190
second final okay so let's let's go back

00:40:01,840 --> 00:40:11,080
to the machine we can we can check that

00:40:09,190 --> 00:40:13,410
a console and concert template are

00:40:11,080 --> 00:40:13,410
started

00:40:36,070 --> 00:40:39,619
what I'm gonna do now is I'm going to

00:40:38,300 --> 00:40:41,330
create the machine inside the other

00:40:39,619 --> 00:40:43,640
region so we can check that we can

00:40:41,330 --> 00:40:49,180
actually build the VPN so I'm gonna go

00:40:43,640 --> 00:40:49,180
to Virginia here

00:40:59,520 --> 00:41:02,610
and I'm going to create a new a new

00:41:01,110 --> 00:41:09,570
machine so it's also going to be an open

00:41:02,610 --> 00:41:11,750
VOD machine let's do that that's not

00:41:09,570 --> 00:41:14,640
gonna work

00:41:11,750 --> 00:41:21,840
okay so this one is a copy of the latest

00:41:14,640 --> 00:41:59,640
machine let's start it okay no there's

00:41:21,840 --> 00:42:08,880
okay so let's call it it's okay that

00:41:59,640 --> 00:42:10,530
should work okay so the instance is

00:42:08,880 --> 00:42:12,750
starting so this is a new a new machine

00:42:10,530 --> 00:42:15,240
that is that's this one is in the US and

00:42:12,750 --> 00:42:17,910
what I was telling you before is we're

00:42:15,240 --> 00:42:22,410
going to build a VPN who is connected to

00:42:17,910 --> 00:42:26,070
the AWS service inside the VPN service

00:42:22,410 --> 00:42:28,859
iws so it's it's configured here okay so

00:42:26,070 --> 00:42:30,810
this is like the VPN gateway from AWS it

00:42:28,859 --> 00:42:32,640
it has been created and the reason I

00:42:30,810 --> 00:42:35,850
created it before a photo demo is

00:42:32,640 --> 00:42:37,890
building this this and configurated is

00:42:35,850 --> 00:42:41,070
taking like at least ten minutes so

00:42:37,890 --> 00:42:43,170
frodeno it's it's kind of long and so

00:42:41,070 --> 00:42:45,630
this endpoint here is the public IP

00:42:43,170 --> 00:42:47,820
address of my machine so my VPN machine

00:42:45,630 --> 00:42:49,200
and the way I did that to make sure that

00:42:47,820 --> 00:42:50,910
this address is not going to change and

00:42:49,200 --> 00:42:52,680
that that UPN is going to come up here

00:42:50,910 --> 00:42:54,900
is I use a concept called

00:42:52,680 --> 00:42:56,430
an elastic IP inside AWS so basically

00:42:54,900 --> 00:42:59,760
when I started the VPN machine instead

00:42:56,430 --> 00:43:01,800
of letting AWS pick a random public IP I

00:42:59,760 --> 00:43:05,850
told him like use this one that I've

00:43:01,800 --> 00:43:11,000
reserved already and down does this deep

00:43:05,850 --> 00:43:16,850
end connection okay

00:43:11,000 --> 00:43:19,610
so so this is a VPN connection and if we

00:43:16,850 --> 00:43:21,830
look at the details well there are two

00:43:19,610 --> 00:43:23,780
endpoints inside the WS which both sat

00:43:21,830 --> 00:43:25,310
with these two IP addresses and the

00:43:23,780 --> 00:43:27,830
tuner is done of course because I mean

00:43:25,310 --> 00:43:29,150
there's nothing configured on my side ok

00:43:27,830 --> 00:43:32,720
so what I'm going to do is I'm going to

00:43:29,150 --> 00:43:35,750
get the configuration and I'm going to

00:43:32,720 --> 00:43:37,700
input it inside console so let's go

00:43:35,750 --> 00:43:40,010
there ok so this is the configuration

00:43:37,700 --> 00:43:41,480
for the VPN so you have like

00:43:40,010 --> 00:43:43,580
configuration for different equipment

00:43:41,480 --> 00:43:50,860
but I'm just I'm just I'm just

00:43:43,580 --> 00:43:53,360
interested in the appreciate ok so I

00:43:50,860 --> 00:43:55,280
mean you remember when I go to the

00:43:53,360 --> 00:43:55,850
mission there's nothing in I per second

00:43:55,280 --> 00:43:59,780
if I can

00:43:55,850 --> 00:44:01,070
we can go you remember there's nothing

00:43:59,780 --> 00:44:03,200
in there and what I'm gonna do now is

00:44:01,070 --> 00:44:04,850
I'm gonna put in from the necessary

00:44:03,200 --> 00:44:08,090
information in console to get this

00:44:04,850 --> 00:44:09,410
generated so I'm going to I'm gonna

00:44:08,090 --> 00:44:11,500
mirror out the organization I showed you

00:44:09,410 --> 00:44:11,500
before

00:44:20,800 --> 00:44:27,660
I read in the US

00:44:45,230 --> 00:44:47,230
Oh

00:44:59,670 --> 00:45:03,820
okay so it puts all the necessary

00:45:01,840 --> 00:45:07,260
information inside inside console and if

00:45:03,820 --> 00:45:07,260
now I look Thanks

00:45:23,520 --> 00:45:31,260
thank you so let's it's working

00:45:38,170 --> 00:45:43,300
okay so this is the part of the demo

00:45:40,520 --> 00:45:45,680
that were it's it may not work let's see

00:45:43,300 --> 00:45:46,910
so I'm taking the IP address of the

00:45:45,680 --> 00:45:48,530
mission that has been created so it's

00:45:46,910 --> 00:45:51,970
it's really it's private IP address

00:45:48,530 --> 00:45:54,660
inside AWS and I'm gonna try and ping it

00:45:51,970 --> 00:46:03,739
okay cool that worked

00:45:54,660 --> 00:46:03,739
[Applause]

00:46:04,870 --> 00:46:09,500
yeah I mean alpha me of course like all

00:46:07,550 --> 00:46:10,790
the time when you repeat it works but

00:46:09,500 --> 00:46:12,050
when you do demo it kind of think like

00:46:10,790 --> 00:46:15,590
you have so many things that's so many

00:46:12,050 --> 00:46:21,950
moving parts and so if I look at the

00:46:15,590 --> 00:46:23,720
IPSec flows so IPSec city okay you can

00:46:21,950 --> 00:46:27,380
set my tooth I mean all the flows have

00:46:23,720 --> 00:46:33,980
been created with with AWS so we don't

00:46:27,380 --> 00:46:37,040
for the demo part let's go back there so

00:46:33,980 --> 00:46:46,130
this we did okay and so we're done like

00:46:37,040 --> 00:46:50,900
I'm so just like at the conclusion what

00:46:46,130 --> 00:46:52,370
I wanted to do a few things I mean one

00:46:50,900 --> 00:46:54,140
of the reason I think open G is very

00:46:52,370 --> 00:46:55,610
interesting for this kind of service

00:46:54,140 --> 00:46:57,710
it's like it's basic infrastructure

00:46:55,610 --> 00:46:58,880
service that's that's going to be core

00:46:57,710 --> 00:47:01,040
in your infrastructure when you start

00:46:58,880 --> 00:47:02,660
using it so using a simple and very

00:47:01,040 --> 00:47:04,970
secure operating system is very

00:47:02,660 --> 00:47:06,230
important so I think reopen business

00:47:04,970 --> 00:47:09,470
very good choice for this kind of use

00:47:06,230 --> 00:47:10,490
case and in my demo there are many

00:47:09,470 --> 00:47:12,500
things that could be improved in terms

00:47:10,490 --> 00:47:15,140
of security I mean I did it in a very

00:47:12,500 --> 00:47:17,630
simple way so it's it's I mean it's

00:47:15,140 --> 00:47:20,030
already a little long so in console you

00:47:17,630 --> 00:47:22,550
can enable SSL or in my case there's no

00:47:20,030 --> 00:47:26,000
SSL communication you can also have HCL

00:47:22,550 --> 00:47:28,400
so you can limit you can give tokens to

00:47:26,000 --> 00:47:29,720
people for certain set of keys and let

00:47:28,400 --> 00:47:31,280
me access to certain keys because you

00:47:29,720 --> 00:47:32,720
wouldn't want anyone with access to

00:47:31,280 --> 00:47:37,130
consume to be able to reconfigure your

00:47:32,720 --> 00:47:39,680
VPN and also you saw that I put the pre

00:47:37,130 --> 00:47:41,750
shared key inside console and since it's

00:47:39,680 --> 00:47:43,910
a secret it might be better if it's you

00:47:41,750 --> 00:47:45,290
will encrypt it even at rest and so

00:47:43,910 --> 00:47:47,180
there are other tools you could use for

00:47:45,290 --> 00:47:49,040
encryption and there's actually a tool

00:47:47,180 --> 00:47:49,980
also built by the people that do the

00:47:49,040 --> 00:47:53,339
reform and console

00:47:49,980 --> 00:47:56,760
called vaults which can be used to store

00:47:53,339 --> 00:48:00,270
like secrets and what also works on open

00:47:56,760 --> 00:48:02,670
jersey by the way so my my use of open

00:48:00,270 --> 00:48:04,800
busy is very recent but I've used it in

00:48:02,670 --> 00:48:06,420
several use cases like Rypien gateways

00:48:04,800 --> 00:48:10,859
I've just showed you

00:48:06,420 --> 00:48:12,570
DNS trucks is our DNS resolvers and now

00:48:10,859 --> 00:48:15,510
console of course there are many many

00:48:12,570 --> 00:48:17,550
more use cases what I found interesting

00:48:15,510 --> 00:48:19,680
and this is also in discussion I had

00:48:17,550 --> 00:48:21,780
with with aunt one when he told me to to

00:48:19,680 --> 00:48:23,790
propose a talk for for here was like

00:48:21,780 --> 00:48:26,210
it's interesting to see OpenBSD used for

00:48:23,790 --> 00:48:28,859
micro services kind of workloads because

00:48:26,210 --> 00:48:32,550
we can see that it's it can be used for

00:48:28,859 --> 00:48:34,250
theta for this thing's for today all the

00:48:32,550 --> 00:48:37,349
code for the demo is available in github

00:48:34,250 --> 00:48:39,510
if you have any question afterwards you

00:48:37,349 --> 00:48:41,730
can ping me on on Twitter and the

00:48:39,510 --> 00:48:45,829
problem and if you have question now I

00:48:41,730 --> 00:48:45,829
mean we have a few minutes for it

00:48:46,200 --> 00:48:57,280
[Applause]

00:48:54,700 --> 00:49:00,050
thanks very much for this presentation

00:48:57,280 --> 00:49:02,480
so that's a lot of automation in there

00:49:00,050 --> 00:49:05,930
already but there are some some parts

00:49:02,480 --> 00:49:08,720
missing a glue-like you have to

00:49:05,930 --> 00:49:10,850
terraform stuff building everything

00:49:08,720 --> 00:49:13,610
automatically and then you have to

00:49:10,850 --> 00:49:15,380
create the VPC manually in your case and

00:49:13,610 --> 00:49:18,680
looking up the IP address from the

00:49:15,380 --> 00:49:21,440
elastic IP add that to console manually

00:49:18,680 --> 00:49:24,100
again question is did you try to have

00:49:21,440 --> 00:49:27,520
something like ansible modules creating

00:49:24,100 --> 00:49:29,960
the VPC they are available but then

00:49:27,520 --> 00:49:36,830
retrieving the IP information and

00:49:29,960 --> 00:49:39,350
putting it into console why are so they

00:49:36,830 --> 00:49:42,710
like the terraform party I mean actually

00:49:39,350 --> 00:49:44,120
terrified you can compare it to tariffs

00:49:42,710 --> 00:49:46,460
I mean unstable can be compared

00:49:44,120 --> 00:49:48,230
I mean unstable is mostly focused for

00:49:46,460 --> 00:49:51,710
what's happening inside servers even if

00:49:48,230 --> 00:49:54,200
it now has no modules to be able to

00:49:51,710 --> 00:49:57,470
manage AWS I think that for managing

00:49:54,200 --> 00:49:59,600
clouds cloud objects terraform is better

00:49:57,470 --> 00:50:01,280
than unstable one of the main reason for

00:49:59,600 --> 00:50:03,470
this is Sara for maintaining the states

00:50:01,280 --> 00:50:05,540
of all the rizal it creates so if you

00:50:03,470 --> 00:50:07,880
remove something from you terraform file

00:50:05,540 --> 00:50:09,860
is going to be destroyed more as

00:50:07,880 --> 00:50:11,810
pronounceable it's easy to deploy but

00:50:09,860 --> 00:50:13,790
when you want to remove things you need

00:50:11,810 --> 00:50:16,940
to have new playbooks so it's they're

00:50:13,790 --> 00:50:19,010
actually very you can use a telephone

00:50:16,940 --> 00:50:21,680
for the whole infrastructure part like v

00:50:19,010 --> 00:50:22,670
pcs and all these things and you could

00:50:21,680 --> 00:50:26,090
use the unseeable to configure the

00:50:22,670 --> 00:50:28,160
machine themself and you say like the

00:50:26,090 --> 00:50:30,170
build of the V PC was actually automated

00:50:28,160 --> 00:50:32,300
it's a first terraform run I did

00:50:30,170 --> 00:50:40,910
I built the V PC automatically with Sara

00:50:32,300 --> 00:50:43,780
for more questions was it the same or

00:50:40,910 --> 00:50:43,780
hands previously

00:50:47,400 --> 00:50:52,840
slides yes sure where I I don't know I

00:50:51,369 --> 00:50:55,060
mean I know it is something that's

00:50:52,840 --> 00:50:57,880
already prepared by the conference

00:50:55,060 --> 00:50:59,070
otherwise I put them on slide sure no

00:50:57,880 --> 00:51:02,020
problem

00:50:59,070 --> 00:51:04,590
just get the fake LinkedIn account and

00:51:02,020 --> 00:51:07,270
you can go to SlideShare

00:51:04,590 --> 00:51:08,800
yeah and and and the repo is is there

00:51:07,270 --> 00:51:10,119
for the code but there's no stylist what

00:51:08,800 --> 00:51:17,730
I'll do is I'll put a link to the slides

00:51:10,119 --> 00:51:21,430
on the repo what's the state of Amazon

00:51:17,730 --> 00:51:24,609
supporting OpenBSD officially well

00:51:21,430 --> 00:51:26,680
there's today there is no official MI

00:51:24,609 --> 00:51:28,570
I know it's it's a trick question maybe

00:51:26,680 --> 00:51:39,640
I don't when you're better place to

00:51:28,570 --> 00:51:41,470
train for this Adamus is interested in

00:51:39,640 --> 00:51:45,400
having of short spots but it's it's not

00:51:41,470 --> 00:51:48,690
done yet but the M either is is working

00:51:45,400 --> 00:51:48,690
well perfectly mmm

00:51:49,530 --> 00:51:53,160
any other questions

00:51:56,210 --> 00:51:58,940

YouTube URL: https://www.youtube.com/watch?v=icR06naQ8LI


