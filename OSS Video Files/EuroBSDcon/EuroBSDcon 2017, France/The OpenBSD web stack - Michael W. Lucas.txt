Title: The OpenBSD web stack - Michael W. Lucas
Publication date: 2019-10-16
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

OpenBSD includes a variety of tools for building robust web server
solutions. The httpd web server is a lean, fast platform for serving
web pages. Relayd allows you to distribute a site’s load between
multiple servers for redundancy, extra capacity, or both. These two
servers, combined with CARP, PF, and other OpenBSD tools, let you
slice hundreds of thousands of dollars off the cost of deploying
your applications.
This talk will cover:

- setting up web sites
- administering chroots for web apps
- Lua patterns
- OpenBSD’s ACME client
- OCSP stapling
- multi-server clusters
- load balancer clusters

Speaker biography:

Michael W Lucas is the author of many technical books, including
“Absolute FreeBSD,” “Absolute OpenBSD,” “PAM Mastery,” and the
brand-new “Relayd and Httpd Mastery.” He lives in Detroit, Michigan,
with his wife and an assortment of rats. Learn more at
https://www.mwl.io.
Captions: 
	00:00:02,270 --> 00:00:08,820
thank you for inviting me to Paris uh if

00:00:06,180 --> 00:00:13,290
I start to speak too quickly say

00:00:08,820 --> 00:00:15,299
something throw rocks whatever I'm a

00:00:13,290 --> 00:00:16,980
little groggy because I got to spend

00:00:15,299 --> 00:00:19,199
last night at the police station your

00:00:16,980 --> 00:00:27,119
French police are wonderful I highly

00:00:19,199 --> 00:00:29,429
recommend them so I was not there for

00:00:27,119 --> 00:00:34,230
anything that I may or may not have done

00:00:29,429 --> 00:00:38,460
wrong so I'm here to talk about the

00:00:34,230 --> 00:00:42,809
OpenBSD web stack so who am i I've been

00:00:38,460 --> 00:00:45,480
a Sisyphean for 20-plus years now uh I

00:00:42,809 --> 00:00:49,140
helped found the southeast Michigan BSD

00:00:45,480 --> 00:00:50,640
user group which is this little tiny dot

00:00:49,140 --> 00:00:55,739
on the other side of the planet from

00:00:50,640 --> 00:00:59,609
here I write books fiction and

00:00:55,739 --> 00:01:08,060
nonfiction and my most recent tech book

00:00:59,609 --> 00:01:14,520
is on real ad and httpd from OpenBSD so

00:01:08,060 --> 00:01:17,100
let's talk about the web the web is a

00:01:14,520 --> 00:01:18,299
sewer it's awful it's horrible it is

00:01:17,100 --> 00:01:21,210
full of crap

00:01:18,299 --> 00:01:26,009
though the web is the worst thing to

00:01:21,210 --> 00:01:27,930
happen to the Internet in in the whole

00:01:26,009 --> 00:01:30,750
history of the Internet

00:01:27,930 --> 00:01:33,329
well okay we had Usenet that was pretty

00:01:30,750 --> 00:01:41,130
bad there was a lot of junk and crap on

00:01:33,329 --> 00:01:45,180
that but you know there's just all kinds

00:01:41,130 --> 00:01:49,009
of terrible things and that the okay

00:01:45,180 --> 00:01:49,009
mailing list they're they're bad too

00:01:49,850 --> 00:01:55,649
but but really the the you know the in

00:01:53,970 --> 00:01:58,170
the good old days the internet was just

00:01:55,649 --> 00:02:02,479
so much better and cleaner and easier to

00:01:58,170 --> 00:02:02,479
you well okay fine nevermind

00:02:03,259 --> 00:02:10,440
so let's talk about the software

00:02:05,939 --> 00:02:12,330
lifecycle here there's a whole bunch of

00:02:10,440 --> 00:02:13,470
open-source developers in here and you

00:02:12,330 --> 00:02:16,500
and you you

00:02:13,470 --> 00:02:18,320
you've seen this many times once you've

00:02:16,500 --> 00:02:22,080
been around a few years you realize that

00:02:18,320 --> 00:02:24,600
someone writes a simple tool so to us to

00:02:22,080 --> 00:02:27,420
solve a problem and it's a great tool

00:02:24,600 --> 00:02:31,500
and people love your tool and they start

00:02:27,420 --> 00:02:33,210
to use it and you get a patch and the

00:02:31,500 --> 00:02:37,790
patch looks nice it looks good it adds

00:02:33,210 --> 00:02:41,160
something on this is kind of cool and

00:02:37,790 --> 00:02:43,590
then other people send features and then

00:02:41,160 --> 00:02:45,450
you get you know some hyper caffeinated

00:02:43,590 --> 00:02:48,120
squirrel that has nothing better to do

00:02:45,450 --> 00:02:50,160
than add really awesome functionality to

00:02:48,120 --> 00:02:53,120
this thing you made and it's wonderful

00:02:50,160 --> 00:02:53,120
and then you get Apache

00:02:54,080 --> 00:03:03,990
so and then someone comes along and says

00:03:00,330 --> 00:03:05,700
hey I'm gonna write a simple tool to

00:03:03,990 --> 00:03:13,020
solve this problem because the existing

00:03:05,700 --> 00:03:23,190
tools are just so damn huge and someone

00:03:13,020 --> 00:03:26,540
sends them a patch so OpenBSD does

00:03:23,190 --> 00:03:26,540
things a little bit differently

00:03:26,550 --> 00:03:35,820
have you seen the the blog post features

00:03:30,150 --> 00:03:38,390
our fault by Teddy if you have not you

00:03:35,820 --> 00:03:42,209
know if you take nothing else from this

00:03:38,390 --> 00:03:46,590
go read that article it is written in

00:03:42,209 --> 00:03:48,870
clear and accessible language I'm gonna

00:03:46,590 --> 00:03:52,620
turn this so I can pace properly and

00:03:48,870 --> 00:03:55,080
still see my notes it's written in clear

00:03:52,620 --> 00:04:00,180
and accessible language there's there's

00:03:55,080 --> 00:04:02,400
you know no make files or code or

00:04:00,180 --> 00:04:05,280
anything in it but it explains what the

00:04:02,400 --> 00:04:07,380
problem is with software the more you

00:04:05,280 --> 00:04:10,170
add to it the more complexity you get

00:04:07,380 --> 00:04:14,400
and the more ways there are for it to

00:04:10,170 --> 00:04:16,140
break and open open BSD has one thing

00:04:14,400 --> 00:04:20,730
that they do really really well and that

00:04:16,140 --> 00:04:23,970
is saying no no you can't have that no

00:04:20,730 --> 00:04:26,130
we're not going to do that no this is

00:04:23,970 --> 00:04:27,180
what this tool does and no more and you

00:04:26,130 --> 00:04:28,770
can pipe it through

00:04:27,180 --> 00:04:30,720
set a knock and write your own Perl

00:04:28,770 --> 00:04:36,080
script around it that's fine we don't

00:04:30,720 --> 00:04:36,080
care but we're not adding that function

00:04:36,169 --> 00:04:46,949
so ah and most of us for web servers we

00:04:43,380 --> 00:04:49,139
need simple web servers 90% of the pages

00:04:46,949 --> 00:04:52,320
on the internet not not the popular

00:04:49,139 --> 00:04:55,410
sites but just the raw pages are pretty

00:04:52,320 --> 00:04:57,889
simple sites that do pretty simple

00:04:55,410 --> 00:05:02,190
things they don't have complicated

00:04:57,889 --> 00:05:04,470
backends they're just providing a

00:05:02,190 --> 00:05:11,940
document or presenting the company face

00:05:04,470 --> 00:05:14,220
or you know some some idiots web site

00:05:11,940 --> 00:05:17,220
that you know they publish in an article

00:05:14,220 --> 00:05:19,889
and suddenly 50 million people come read

00:05:17,220 --> 00:05:22,410
it and their web server bill goes

00:05:19,889 --> 00:05:28,740
through the roof it's really simple

00:05:22,410 --> 00:05:32,639
stuff and that is the simple stuff is

00:05:28,740 --> 00:05:38,909
where the OpenBSD web stack really

00:05:32,639 --> 00:05:41,460
excels it it's composed of the HTTP web

00:05:38,909 --> 00:05:43,289
server if I have a criticism of their

00:05:41,460 --> 00:05:46,380
project it's that they called the web

00:05:43,289 --> 00:05:51,590
server httpd go search for that on

00:05:46,380 --> 00:05:57,180
Google real ad is a general-purpose

00:05:51,590 --> 00:06:01,320
proxy and redirector they use carp for

00:05:57,180 --> 00:06:03,900
IP layer redundancy all of this plugs

00:06:01,320 --> 00:06:07,680
into PF and it's built on top of Libya

00:06:03,900 --> 00:06:10,800
SSL the libera SL point here is

00:06:07,680 --> 00:06:12,960
important because if your system doesn't

00:06:10,800 --> 00:06:16,229
have Liberty SL you have to either build

00:06:12,960 --> 00:06:19,620
your own packages or run a different web

00:06:16,229 --> 00:06:23,490
server but they they use library SSL

00:06:19,620 --> 00:06:28,560
specific api's because why would you use

00:06:23,490 --> 00:06:31,979
open SSL if you had a choice so it runs

00:06:28,560 --> 00:06:34,729
on open BSD of course ah true us

00:06:31,979 --> 00:06:39,210
hardened BSD are built with liber8 is

00:06:34,729 --> 00:06:40,620
libera SSL I've built custom packages on

00:06:39,210 --> 00:06:45,740
FreeBSD

00:06:40,620 --> 00:06:49,410
I'm and the the farther you vary from

00:06:45,740 --> 00:06:53,760
OpenBSD the less luck you will have

00:06:49,410 --> 00:06:59,600
running I'm sure someone will port httpd

00:06:53,760 --> 00:06:59,600
to Linux and plug it into I pee tables

00:07:01,940 --> 00:07:10,050
so httpd simple web server the config

00:07:07,320 --> 00:07:17,240
syntax is reminiscent and there's

00:07:10,050 --> 00:07:19,980
someone who doesn't use libera SSL can

00:07:17,240 --> 00:07:22,650
config setting text looks like nginx

00:07:19,980 --> 00:07:23,970
looks like pretty much every other open

00:07:22,650 --> 00:07:28,260
BSD server

00:07:23,970 --> 00:07:29,400
it runs privilege separation CH routed

00:07:28,260 --> 00:07:33,770
and devar dub-dub-dub

00:07:29,400 --> 00:07:37,200
you configure it in etsy httpd.conf and

00:07:33,770 --> 00:07:40,710
dynamic content comes through fast cgi

00:07:37,200 --> 00:07:48,060
integration and and here's what a config

00:07:40,710 --> 00:07:50,520
looks like you you set a macro you

00:07:48,060 --> 00:07:53,850
define a server all the servers are

00:07:50,520 --> 00:07:57,690
virtual servers you can include a file

00:07:53,850 --> 00:08:00,690
you can have web aliases you listen on

00:07:57,690 --> 00:08:04,590
the macro on port 80 and set a root

00:08:00,690 --> 00:08:06,840
directory inside the chroot if you have

00:08:04,590 --> 00:08:11,100
used any OpenBSD software this should

00:08:06,840 --> 00:08:13,650
look real familiar you can also have per

00:08:11,100 --> 00:08:15,690
location rules in there here we've set

00:08:13,650 --> 00:08:17,730
well we want the whole site

00:08:15,690 --> 00:08:20,310
automatically indexed if you're in the

00:08:17,730 --> 00:08:22,770
files directory there's no automatic

00:08:20,310 --> 00:08:25,950
index you have to know where a file is

00:08:22,770 --> 00:08:30,300
to be able to grab it and here we've set

00:08:25,950 --> 00:08:32,370
up some password authentication and even

00:08:30,300 --> 00:08:38,130
put a little message that will appear in

00:08:32,370 --> 00:08:40,890
in the authentication box so there is a

00:08:38,130 --> 00:08:44,520
default server that listens on all IPs

00:08:40,890 --> 00:08:48,270
of the host by default if a client just

00:08:44,520 --> 00:08:50,430
does a netcat to port 80 and again they

00:08:48,270 --> 00:08:54,000
get the default server which is in the

00:08:50,430 --> 00:08:56,490
htdocs directory HD

00:08:54,000 --> 00:09:01,140
PD makes heavy use of blocks and

00:08:56,490 --> 00:09:04,650
redirects there is no rewrite there is

00:09:01,140 --> 00:09:12,180
no like purl mile mod rewrite this is a

00:09:04,650 --> 00:09:17,100
feature so there are ways around it and

00:09:12,180 --> 00:09:18,690
we'll talk about it but this with blocks

00:09:17,100 --> 00:09:21,350
and redirects you can do things like

00:09:18,690 --> 00:09:25,430
here we're listening on port 80 but we

00:09:21,350 --> 00:09:30,720
transparently redirect to the sea to the

00:09:25,430 --> 00:09:35,340
TLS version of the website you can use

00:09:30,720 --> 00:09:38,100
globs standard shell globs you have

00:09:35,340 --> 00:09:40,920
servers you know web server 0 through 9

00:09:38,100 --> 00:09:45,780
on your web farm well they can all share

00:09:40,920 --> 00:09:49,110
a config I'll share a root directory you

00:09:45,780 --> 00:09:52,710
can use wildcards again just like the

00:09:49,110 --> 00:09:55,860
shell here we have any host name under

00:09:52,710 --> 00:09:58,890
Mallard dot info and we have an alias

00:09:55,860 --> 00:10:01,800
for just plain Mallard dot info comes

00:09:58,890 --> 00:10:04,440
here you can do really complicated

00:10:01,800 --> 00:10:08,510
annoying things like this I don't know

00:10:04,440 --> 00:10:08,510
why you would want to but it's an option

00:10:09,589 --> 00:10:20,190
Perl reg exits does anybody how many of

00:10:13,620 --> 00:10:23,670
you feel you know Perl reg X's ok the

00:10:20,190 --> 00:10:25,680
fact I normally tell people that they're

00:10:23,670 --> 00:10:28,080
wrong when they raise their hand however

00:10:25,680 --> 00:10:30,900
the fact that every person raised their

00:10:28,080 --> 00:10:37,100
hand kind of hesitantly and yet yeah

00:10:30,900 --> 00:10:40,200
you're right you from the the OpenBSD

00:10:37,100 --> 00:10:42,420
perspective as I understand it one of

00:10:40,200 --> 00:10:46,350
the big problems with Perl regex is it

00:10:42,420 --> 00:10:49,400
is verifying the code it is just ghastly

00:10:46,350 --> 00:10:55,500
and most people only use a tiny subset

00:10:49,400 --> 00:10:59,960
so why add these features that nobody

00:10:55,500 --> 00:11:03,340
really exercises and with code that is

00:10:59,960 --> 00:11:06,400
gigantic nasty and unavoidable

00:11:03,340 --> 00:11:08,830
so instead they grabbed Lua patterns

00:11:06,400 --> 00:11:11,110
which have a lot of regex style

00:11:08,830 --> 00:11:16,350
functions they're much smaller much

00:11:11,110 --> 00:11:19,510
simpler they they are not Lovecraftian

00:11:16,350 --> 00:11:21,730
and they look a lot like globs they look

00:11:19,510 --> 00:11:24,160
so much like globs that they've added

00:11:21,730 --> 00:11:28,570
this match keyword to say no this is a

00:11:24,160 --> 00:11:30,730
pattern so and I'm gonna go a little

00:11:28,570 --> 00:11:33,370
quickly through this I'm just trying to

00:11:30,730 --> 00:11:36,070
let you be aware of what's in it rather

00:11:33,370 --> 00:11:40,870
than teach you how to build us because

00:11:36,070 --> 00:11:43,029
we have a bunch to get through you know

00:11:40,870 --> 00:11:48,270
classes of all digits all printable

00:11:43,029 --> 00:11:48,270
characters you know all alphanumerics

00:11:48,570 --> 00:11:54,130
put classes and characters in brackets

00:11:51,700 --> 00:11:57,779
you have all seen this before you

00:11:54,130 --> 00:11:57,779
already know how to configure these

00:11:59,400 --> 00:12:08,830
anchoring to the front and back of a

00:12:01,750 --> 00:12:10,780
string one or more zero or more so that

00:12:08,830 --> 00:12:14,970
you can use all of this to set server

00:12:10,780 --> 00:12:14,970
names and directory names and locations

00:12:15,390 --> 00:12:23,910
so httpd defaults to the traditional

00:12:22,060 --> 00:12:26,260
Apache log style

00:12:23,910 --> 00:12:31,420
does anybody here actually use

00:12:26,260 --> 00:12:33,430
traditional Apache logs and a few of the

00:12:31,420 --> 00:12:35,310
OpenBSD people raise their hands in the

00:12:33,430 --> 00:12:37,780
back

00:12:35,310 --> 00:12:40,480
OpenBSD has written further developers

00:12:37,780 --> 00:12:42,700
they like Apache logs that answers the

00:12:40,480 --> 00:12:45,790
question of why the hell did they decide

00:12:42,700 --> 00:12:48,910
on that format so it also supports

00:12:45,790 --> 00:12:53,560
combined logs which most other people

00:12:48,910 --> 00:12:56,709
use and you just set that they're set in

00:12:53,560 --> 00:12:59,670
the access log error log these are all

00:12:56,709 --> 00:12:59,670
under the chroot

00:13:03,390 --> 00:13:08,459
debugging is pretty straightforward test

00:13:06,580 --> 00:13:12,250
the configuration before you start it

00:13:08,459 --> 00:13:14,650
tests an alternate config if you're

00:13:12,250 --> 00:13:15,430
really having trouble you can run the

00:13:14,650 --> 00:13:16,499
webserver

00:13:15,430 --> 00:13:18,659
in

00:13:16,499 --> 00:13:24,209
the foreground with verbose debugging

00:13:18,659 --> 00:13:26,909
and watch as it answers replies and this

00:13:24,209 --> 00:13:29,999
is where you discover that you used a an

00:13:26,909 --> 00:13:32,849
asterisk instead of a plus in your Lua

00:13:29,999 --> 00:13:38,369
pattern and that's why people are

00:13:32,849 --> 00:13:44,269
getting the wrong server now dynamic

00:13:38,369 --> 00:13:46,769
content Oh PHP rules the web I'm sorry

00:13:44,269 --> 00:13:50,399
there are people who staging the

00:13:46,769 --> 00:13:58,259
revolution but right now they are the

00:13:50,399 --> 00:14:04,109
Empire OpenBSD uses slow G slow CGI to

00:13:58,259 --> 00:14:08,549
support the fast cgi interface slow cgi

00:14:04,109 --> 00:14:10,619
is actually pretty fast but if you're

00:14:08,549 --> 00:14:16,229
running dynamic content and you get a

00:14:10,619 --> 00:14:18,809
500 error slow cgi is not running that

00:14:16,229 --> 00:14:23,039
little tip will save you about three

00:14:18,809 --> 00:14:24,959
hours of screaming at your keyboard and

00:14:23,039 --> 00:14:28,919
and basically you just you set a

00:14:24,959 --> 00:14:33,689
location you say where the the scripts

00:14:28,919 --> 00:14:37,669
are and tell it fast cgi and and it

00:14:33,689 --> 00:14:42,149
feeds it to a socket inside the chroot

00:14:37,669 --> 00:14:43,919
and talking about the chroot the plus

00:14:42,149 --> 00:14:47,159
side is you know if your web server is

00:14:43,919 --> 00:14:48,269
broken into only stuff inside the CH

00:14:47,159 --> 00:14:51,359
root is accessible

00:14:48,269 --> 00:14:53,369
the downside is as assisted man only

00:14:51,359 --> 00:14:55,919
stuff inside the CH way to success is

00:14:53,369 --> 00:14:59,279
accessible ah

00:14:55,919 --> 00:15:06,019
remember you can't symlink out of a CH

00:14:59,279 --> 00:15:08,279
root so you'll if you're running

00:15:06,019 --> 00:15:13,049
WordPress or something you will want to

00:15:08,279 --> 00:15:17,249
add stuff like resolve conflict I'm

00:15:13,049 --> 00:15:22,259
these these critical system files you

00:15:17,249 --> 00:15:24,179
may need an Etsy hosts and if you're

00:15:22,259 --> 00:15:28,409
running something more complicated say

00:15:24,179 --> 00:15:30,360
you have an actual pearl CGI you'll want

00:15:28,409 --> 00:15:33,589
to use ldd to find the share

00:15:30,360 --> 00:15:39,750
libraries you need and get them in there

00:15:33,589 --> 00:15:41,820
but let's look at if you can if your web

00:15:39,750 --> 00:15:46,490
server can run WordPress it can run

00:15:41,820 --> 00:15:56,070
anything so let's run some wordpress

00:15:46,490 --> 00:15:59,550
pardon me just a moment so some

00:15:56,070 --> 00:16:02,339
important details here if you go

00:15:59,550 --> 00:16:04,860
searching for the MySQL package on

00:16:02,339 --> 00:16:08,130
OpenBSD you will become very frustrated

00:16:04,860 --> 00:16:10,560
they're using Moriah DB since I

00:16:08,130 --> 00:16:15,690
discovered that I'm now using Moriah DB

00:16:10,560 --> 00:16:19,050
everywhere because Oracle ah open BSD

00:16:15,690 --> 00:16:22,560
will let you install multiple versions

00:16:19,050 --> 00:16:24,529
of PHP simultaneously I strongly

00:16:22,560 --> 00:16:29,550
recommend you pick one and stick with it

00:16:24,529 --> 00:16:32,630
and go into RC conf

00:16:29,550 --> 00:16:36,180
you don't need any special flags for

00:16:32,630 --> 00:16:40,010
httpd but you do want to start the peat

00:16:36,180 --> 00:16:46,230
your chosen PHP fpm processor which is

00:16:40,010 --> 00:16:50,720
fast CGI for PHP you'll also need a

00:16:46,230 --> 00:16:55,620
database socket inside the CH root and

00:16:50,720 --> 00:17:02,670
you'll need to tell my Mariah DB to put

00:16:55,620 --> 00:17:08,040
the socket inside the chroot OpenBSD

00:17:02,670 --> 00:17:11,010
also ships all kinds of modules but they

00:17:08,040 --> 00:17:14,610
go the configuration for their pH for

00:17:11,010 --> 00:17:17,750
the PHP module initiation scripts go in

00:17:14,610 --> 00:17:22,949
this sample directory you'll want to

00:17:17,750 --> 00:17:28,890
copy your your ini files into the actual

00:17:22,949 --> 00:17:36,210
PHP configuration and then start the the

00:17:28,890 --> 00:17:40,980
PHP F p.m. module so all you really need

00:17:36,210 --> 00:17:43,430
to run PHP it's tell it an index dot PHP

00:17:40,980 --> 00:17:47,120
is an index file

00:17:43,430 --> 00:17:50,750
and then specify and instead of the

00:17:47,120 --> 00:17:56,060
default fast CGI socket tell it no look

00:17:50,750 --> 00:17:58,520
at the the PHP socket and that's really

00:17:56,060 --> 00:18:03,230
it for configuring your dynamic web

00:17:58,520 --> 00:18:05,600
server there's no long config file

00:18:03,230 --> 00:18:09,380
there's there's nothing else and the

00:18:05,600 --> 00:18:11,300
nice thing is I'm pretty confident given

00:18:09,380 --> 00:18:15,260
the people developing it that it's not

00:18:11,300 --> 00:18:17,720
going to get well you may get an extra

00:18:15,260 --> 00:18:22,120
line or two of configuration somewhere

00:18:17,720 --> 00:18:22,120
sometime but it's not going to be much

00:18:26,770 --> 00:18:40,460
I'm sorry I move my head a lot ah I'm

00:18:31,240 --> 00:18:46,370
going to play Dalek a bit TLS how many

00:18:40,460 --> 00:18:49,220
of you run SSL you you do know that you

00:18:46,370 --> 00:18:52,070
know TLS is the successor protocol and

00:18:49,220 --> 00:18:55,820
you should not be running SSL so having

00:18:52,070 --> 00:18:57,590
said that how many of you run SSL yeah a

00:18:55,820 --> 00:19:00,490
bunch of hands still go up I know I'm

00:18:57,590 --> 00:19:00,490
sorry we're stuck

00:19:02,290 --> 00:19:11,000
I'm remember TLS transport layer

00:19:09,170 --> 00:19:17,390
security is a much better name because

00:19:11,000 --> 00:19:20,000
it only supports data in transit it TLS

00:19:17,390 --> 00:19:24,140
does not secure your web server ah

00:19:20,000 --> 00:19:26,110
and really despite all that happens with

00:19:24,140 --> 00:19:28,730
these certificate authorities and them

00:19:26,110 --> 00:19:32,330
sending you know you have to send your

00:19:28,730 --> 00:19:35,000
driver's license and a DNA print and all

00:19:32,330 --> 00:19:38,330
of these things to get to prove your

00:19:35,000 --> 00:19:42,620
identity all that these certificates do

00:19:38,330 --> 00:19:48,770
is verify who controls the DNS of that

00:19:42,620 --> 00:19:53,660
website so um I'll sum this up as saying

00:19:48,770 --> 00:19:56,600
certificate authorities suck they charge

00:19:53,660 --> 00:20:00,140
large sums of money to run shell scripts

00:19:56,600 --> 00:20:02,740
ah and and when I say that I suck what I

00:20:00,140 --> 00:20:08,660
really mean is that I'm envious

00:20:02,740 --> 00:20:15,350
so let's encrypt how many of you have

00:20:08,660 --> 00:20:20,720
used let's encrypt I love BSD Khan's I I

00:20:15,350 --> 00:20:22,790
deeply love BSD Khan's okay so three ssl

00:20:20,720 --> 00:20:27,140
scripts for everyone for every purpose

00:20:22,790 --> 00:20:28,970
for anything and and let's encrypt works

00:20:27,140 --> 00:20:32,150
there there are two ways you can verify

00:20:28,970 --> 00:20:35,270
that you control a domain either through

00:20:32,150 --> 00:20:38,350
an entry on a web page or an entry in a

00:20:35,270 --> 00:20:38,350
DNS server ah

00:20:41,140 --> 00:20:47,080
OpenBSD includes they this Acme client

00:20:45,080 --> 00:20:50,540
for the automated certificate management

00:20:47,080 --> 00:20:52,640
environment i can't hear that name

00:20:50,540 --> 00:21:00,590
without thinking of wily coyote by the

00:20:52,640 --> 00:21:06,050
way and OpenBSD has the best simple Acme

00:21:00,590 --> 00:21:07,790
client I have ever seen I love it and

00:21:06,050 --> 00:21:11,660
that the certs are good for ninety days

00:21:07,790 --> 00:21:13,820
you can manually uh you can manually

00:21:11,660 --> 00:21:16,030
renew them if you do it that way you're

00:21:13,820 --> 00:21:16,030
an idiot

00:21:19,180 --> 00:21:27,920
so whoops that slide shouldn't have been

00:21:24,380 --> 00:21:29,480
there I'm sorry I've given this talk two

00:21:27,920 --> 00:21:36,190
times and each time I think I need to

00:21:29,480 --> 00:21:39,080
pull that slide out okay how Acme works

00:21:36,190 --> 00:21:41,120
at the Annette the first time you run

00:21:39,080 --> 00:21:43,640
the client it creates a an

00:21:41,120 --> 00:21:47,810
authentication key pair with let's

00:21:43,640 --> 00:21:49,640
encrypt the client asks the Acme

00:21:47,810 --> 00:21:52,730
certificate authority what proof it will

00:21:49,640 --> 00:21:56,720
accept let's encrypt accepts HTTP and

00:21:52,730 --> 00:21:57,580
DNS client gets to pick between the

00:21:56,720 --> 00:22:05,600
options

00:21:57,580 --> 00:22:07,660
Acme client only uses HTTP Acme client

00:22:05,600 --> 00:22:10,040
creates this certificate signing request

00:22:07,660 --> 00:22:13,670
sends it in

00:22:10,040 --> 00:22:16,730
the let's encrypt says if you're really

00:22:13,670 --> 00:22:17,450
this create a file on the server and

00:22:16,730 --> 00:22:20,510
sign it

00:22:17,450 --> 00:22:22,790
Acme client creates that file the CA

00:22:20,510 --> 00:22:32,090
checks the file verifies the signature

00:22:22,790 --> 00:22:35,270
issues a certificate and OpenBSD has a

00:22:32,090 --> 00:22:39,560
directory in the chroot just for Acme

00:22:35,270 --> 00:22:43,790
operations and basically you can just

00:22:39,560 --> 00:22:46,490
set this location on your website tell

00:22:43,790 --> 00:22:49,070
it that the root directory is there this

00:22:46,490 --> 00:22:52,430
root strip too looks a little odd but

00:22:49,070 --> 00:22:55,190
all it means is strip these first two

00:22:52,430 --> 00:22:59,320
entries off the directory off the URL

00:22:55,190 --> 00:23:03,370
before putting it in that root and don't

00:22:59,320 --> 00:23:12,260
automatically index your Acme to rectory

00:23:03,370 --> 00:23:17,000
and here is an Etsy Acme client comp for

00:23:12,260 --> 00:23:20,120
the domain you set the domain name set

00:23:17,000 --> 00:23:22,580
some alternate domain names define where

00:23:20,120 --> 00:23:27,920
each of the files go and then say sign

00:23:22,580 --> 00:23:31,640
it with let's encrypt so with Acme

00:23:27,920 --> 00:23:36,380
client start off with Acme client - a

00:23:31,640 --> 00:23:38,960
create that key pair get that search all

00:23:36,380 --> 00:23:42,200
you need them the - Dee for the domain

00:23:38,960 --> 00:23:44,300
the first time you run it add a couple -

00:23:42,200 --> 00:23:49,160
V's to see what's really happening

00:23:44,300 --> 00:23:53,030
behind the scene and then turn on TLS

00:23:49,160 --> 00:23:57,830
and httpd.conf here I've put in an

00:23:53,030 --> 00:24:00,530
automatic redirect and I hear is the

00:23:57,830 --> 00:24:05,720
actual TLS website we're listening on

00:24:00,530 --> 00:24:08,720
all addresses we add TLS on port 443 we

00:24:05,720 --> 00:24:12,950
we define the the certificate with the

00:24:08,720 --> 00:24:14,870
full chain file we have the the path to

00:24:12,950 --> 00:24:17,690
the TLS key

00:24:14,870 --> 00:24:24,470
you can also use HSTs high-security

00:24:17,690 --> 00:24:27,680
trends I forget the acronym strict

00:24:24,470 --> 00:24:29,750
Transport Security thank you which

00:24:27,680 --> 00:24:32,420
sounds really cool but what it means is

00:24:29,750 --> 00:24:34,460
if you ever break your ssl nobody can

00:24:32,420 --> 00:24:38,780
talk to your site including let's

00:24:34,460 --> 00:24:41,090
encrypt so be real confident in your

00:24:38,780 --> 00:24:44,060
setup in it that you've renewed certs a

00:24:41,090 --> 00:24:46,490
few times before you do that not that

00:24:44,060 --> 00:24:52,510
I've ever locked my own web server

00:24:46,490 --> 00:24:55,880
renewal out or anything there's a this

00:24:52,510 --> 00:24:59,200
fiendishly complicated process to check

00:24:55,880 --> 00:25:03,380
and renew your script your your TLS

00:24:59,200 --> 00:25:05,540
certificates and if you get a you know

00:25:03,380 --> 00:25:10,330
you you run Acme client and the domain

00:25:05,540 --> 00:25:16,640
name so do you need to renew yes or no

00:25:10,330 --> 00:25:22,030
if you get a certificate back reload the

00:25:16,640 --> 00:25:29,510
web server so how many of you have used

00:25:22,030 --> 00:25:31,790
OCSP before ok OCSP as i a if your

00:25:29,510 --> 00:25:37,100
website is small and you don't care how

00:25:31,790 --> 00:25:42,110
fast it is OCSP is traditionally not

00:25:37,100 --> 00:25:46,100
been worth your time it every time you

00:25:42,110 --> 00:25:48,320
contact an a TLS web site your web

00:25:46,100 --> 00:25:49,970
browser contacts the certificate

00:25:48,320 --> 00:25:52,520
authority to make sure that the search

00:25:49,970 --> 00:25:54,100
is still valid that it has not been

00:25:52,520 --> 00:25:59,320
revoked

00:25:54,100 --> 00:26:04,150
so this slows down your website OCSP

00:25:59,320 --> 00:26:07,130
basically staples a recently generated

00:26:04,150 --> 00:26:08,990
certificate for your certificate that

00:26:07,130 --> 00:26:12,800
says this certificate has not been

00:26:08,990 --> 00:26:14,360
revoked in the last seven days and it

00:26:12,800 --> 00:26:18,500
provides that to the client and it

00:26:14,360 --> 00:26:21,440
provides a bit of a speed-up and it

00:26:18,500 --> 00:26:26,270
doesn't tell the CA when someone is

00:26:21,440 --> 00:26:30,460
actually using the certificate so

00:26:26,270 --> 00:26:34,490
there is a command you know OCSP check

00:26:30,460 --> 00:26:38,060
set the file set the key plug it into

00:26:34,490 --> 00:26:44,120
httpd.conf it is so easy it is suddenly

00:26:38,060 --> 00:26:47,000
worth doing for every 100 CSP certs

00:26:44,120 --> 00:26:49,670
expire weekly use this complicated shell

00:26:47,000 --> 00:26:55,130
script the worst part is the path to

00:26:49,670 --> 00:26:57,260
your key files and reload the web server

00:26:55,130 --> 00:27:00,650
if you have a new one okay some things

00:26:57,260 --> 00:27:03,160
you can do you shouldn't necessarily do

00:27:00,650 --> 00:27:09,410
these but the internet is stupid and

00:27:03,160 --> 00:27:12,710
sometimes you have to you can affect the

00:27:09,410 --> 00:27:16,280
tcp behavior of the web server in

00:27:12,710 --> 00:27:19,550
httpd.conf you can set a time to live on

00:27:16,280 --> 00:27:22,220
your 8 on your web server packets so if

00:27:19,550 --> 00:27:24,500
you don't want this website accessible

00:27:22,220 --> 00:27:27,950
outside the company even if the firewall

00:27:24,500 --> 00:27:31,360
team screws up again you put a time to

00:27:27,950 --> 00:27:36,080
live of 2 on your website packets and

00:27:31,360 --> 00:27:38,450
they can't leave the company you can

00:27:36,080 --> 00:27:42,530
change TLS versions and ciphers don't do

00:27:38,450 --> 00:27:46,030
that the the the ciphers and versions

00:27:42,530 --> 00:27:48,740
were chosen by people smarter than you

00:27:46,030 --> 00:27:50,690
if you have users with their own

00:27:48,740 --> 00:27:59,140
websites put their web their home

00:27:50,690 --> 00:27:59,140
directories inside the chroot ok real ad

00:27:59,170 --> 00:28:07,690
real ad is a arbitrary traffic

00:28:04,880 --> 00:28:07,690
redirector ah

00:28:08,860 --> 00:28:14,060
OpenBSD comes with PF they can redirect

00:28:11,660 --> 00:28:20,360
traffic's to hosts inside your firewall

00:28:14,060 --> 00:28:23,990
and it includes a load balancer that is

00:28:20,360 --> 00:28:26,360
basically fault oblivious it sends

00:28:23,990 --> 00:28:29,210
traffic to hosts whether they are alive

00:28:26,360 --> 00:28:30,950
or not and real ad is basically it just

00:28:29,210 --> 00:28:33,680
tests the hosts to see if they should

00:28:30,950 --> 00:28:36,790
receive traffic and it adjusts the

00:28:33,680 --> 00:28:40,190
tables in in the firewall appropriately

00:28:36,790 --> 00:28:43,460
so real ad can also act as a layer

00:28:40,190 --> 00:28:46,070
seven proxy you can terminate a TCP

00:28:43,460 --> 00:28:48,830
connection at it muck with the

00:28:46,070 --> 00:28:56,919
connection and create a new connection

00:28:48,830 --> 00:28:59,840
ah always start with a PF firewall a

00:28:56,919 --> 00:29:02,809
working firewall you have to have packet

00:28:59,840 --> 00:29:05,570
forwarding make sure that you know the

00:29:02,809 --> 00:29:12,500
inside can't connect to the firewall the

00:29:05,570 --> 00:29:16,309
usual lockdown your host so real ad has

00:29:12,500 --> 00:29:19,190
four components a parent process Thank

00:29:16,309 --> 00:29:21,919
You privilege separation a host check

00:29:19,190 --> 00:29:24,500
engine that pokes at all your servers

00:29:21,919 --> 00:29:27,919
and sees if they're still alive a PF

00:29:24,500 --> 00:29:30,080
engine that talks to the firewall and a

00:29:27,919 --> 00:29:32,870
relay engine that accepts and creates

00:29:30,080 --> 00:29:35,409
connection relay control manages all of

00:29:32,870 --> 00:29:35,409
this ah

00:29:37,149 --> 00:29:45,350
relay DS the part I usually use is the

00:29:41,929 --> 00:29:53,419
redirection which is just pure TCP IP

00:29:45,350 --> 00:29:57,519
forwarding what time is it I have ten

00:29:53,419 --> 00:29:57,519
more minutes oh crap okay

00:29:57,559 --> 00:30:08,299
you have tables you can say listen on

00:30:01,399 --> 00:30:13,549
the outside address and forward to these

00:30:08,299 --> 00:30:15,710
servers on forward two servers in this

00:30:13,549 --> 00:30:20,090
table and this is how you check those

00:30:15,710 --> 00:30:24,679
hosts you can set macros like every

00:30:20,090 --> 00:30:30,409
other OpenBSD program you can use relay

00:30:24,679 --> 00:30:32,450
control to check and show what

00:30:30,409 --> 00:30:34,639
redirections you have what hosts are

00:30:32,450 --> 00:30:40,399
there are they up and working how many

00:30:34,639 --> 00:30:46,759
hosts are in a current table host X you

00:30:40,399 --> 00:30:51,169
can check by ICMP ping you can do TCP

00:30:46,759 --> 00:30:54,520
port tests HTTP response code tests are

00:30:51,169 --> 00:30:57,260
you getting a

00:30:54,520 --> 00:31:00,140
200 error do you suddenly have 500

00:30:57,260 --> 00:31:03,830
errors oh you can check and see if TLS

00:31:00,140 --> 00:31:07,640
is working you can do HTTP response

00:31:03,830 --> 00:31:10,160
codes over TLS and you can check file

00:31:07,640 --> 00:31:14,990
the integrity of files download a file

00:31:10,160 --> 00:31:20,780
from the web server sha-256 check it if

00:31:14,990 --> 00:31:23,660
it matches great so you can also do

00:31:20,780 --> 00:31:27,550
things like err we're forwarding to a

00:31:23,660 --> 00:31:31,670
bail server and we send this string

00:31:27,550 --> 00:31:35,510
nothing and we expect to 20 may old up

00:31:31,670 --> 00:31:40,220
michael w lucas comm is my mail server

00:31:35,510 --> 00:31:42,970
working keep it in the pool or not here

00:31:40,220 --> 00:31:49,430
I have a script to check a DNS server

00:31:42,970 --> 00:31:52,850
which we we dig a domain name we we grep

00:31:49,430 --> 00:31:56,090
for the the string that means that there

00:31:52,850 --> 00:31:56,930
is an authoritative answer here and we

00:31:56,090 --> 00:31:58,910
return

00:31:56,930 --> 00:32:02,540
you know we invert the return code and

00:31:58,910 --> 00:32:05,000
send it back if the DNS server is

00:32:02,540 --> 00:32:09,590
serving authoritative data keep it in

00:32:05,000 --> 00:32:11,840
the pool relays accept TCP connections

00:32:09,590 --> 00:32:13,910
accept traffic create new connections

00:32:11,840 --> 00:32:17,180
and forwarded on and can filter the

00:32:13,910 --> 00:32:18,890
traffic I'm I am hurrying up a little

00:32:17,180 --> 00:32:20,770
here because we had camera trouble in

00:32:18,890 --> 00:32:25,670
the beginning I'm sorry I did not

00:32:20,770 --> 00:32:30,020
anticipate that ah here's a common thing

00:32:25,670 --> 00:32:32,750
you'll see where we relay traffic to SSH

00:32:30,020 --> 00:32:38,870
servers inside your firewall so your

00:32:32,750 --> 00:32:42,320
developers can get access and we've

00:32:38,870 --> 00:32:45,650
defined a protocol here down at the

00:32:42,320 --> 00:32:48,740
bottom this protocol fix up where we

00:32:45,650 --> 00:32:51,650
apply a change to the TCP stack say when

00:32:48,740 --> 00:32:54,890
you create this connection use TCP no

00:32:51,650 --> 00:32:58,660
delay I encourage all of you at some

00:32:54,890 --> 00:33:04,760
time to run an SSH connection without

00:32:58,660 --> 00:33:07,049
TCP no delay it is an education relays

00:33:04,760 --> 00:33:11,369
let you do really straight

00:33:07,049 --> 00:33:16,259
change things um here we've defined this

00:33:11,369 --> 00:33:18,809
HD protocol called get only and it

00:33:16,259 --> 00:33:23,309
passes anything with an HTTP method of

00:33:18,809 --> 00:33:25,519
get and then it returns an error for

00:33:23,309 --> 00:33:30,330
anything else that says forbidden method

00:33:25,519 --> 00:33:34,440
my developer swears to me that his

00:33:30,330 --> 00:33:40,580
application only uses HTTP gets he's

00:33:34,440 --> 00:33:47,129
promised this let's find out

00:33:40,580 --> 00:33:48,779
you can block requests you know bill has

00:33:47,129 --> 00:33:52,590
also promised that he will never again

00:33:48,779 --> 00:33:55,109
use PHP myadmin so we're blocking that

00:33:52,590 --> 00:34:02,549
particular URL and we're returning an

00:33:55,109 --> 00:34:04,049
error message for bill I in writing this

00:34:02,549 --> 00:34:05,850
book I discovered there's this thing

00:34:04,049 --> 00:34:12,929
called WebSockets that basically

00:34:05,850 --> 00:34:14,609
re-implement tcp/ip inside HTTP you can

00:34:12,929 --> 00:34:16,500
set something that says if the client

00:34:14,609 --> 00:34:18,960
requests this through this upgrade

00:34:16,500 --> 00:34:22,440
method say no no we don't allow

00:34:18,960 --> 00:34:26,280
WebSockets I also encourage you to try

00:34:22,440 --> 00:34:28,559
this because it is an education on just

00:34:26,280 --> 00:34:29,909
what web developers will do to get

00:34:28,559 --> 00:34:34,500
around the fact that we have blocked

00:34:29,909 --> 00:34:38,609
everything but port 80 and if you really

00:34:34,500 --> 00:34:42,329
really hate your web developer you can

00:34:38,609 --> 00:34:44,940
strip the user-agent header and I'm

00:34:42,329 --> 00:34:46,679
giving all of these not just to be mean

00:34:44,940 --> 00:34:49,589
but just these are examples of things

00:34:46,679 --> 00:34:55,950
that you can do because again the

00:34:49,589 --> 00:34:59,309
Internet is stupid so here's a config

00:34:55,950 --> 00:35:02,280
straight from the example that you can

00:34:59,309 --> 00:35:06,630
put your SSL on the load balancer take

00:35:02,280 --> 00:35:08,849
it off the web server these days a TLS

00:35:06,630 --> 00:35:12,299
acceleration is not as desperate and

00:35:08,849 --> 00:35:14,970
need as it once was however if you find

00:35:12,299 --> 00:35:17,579
yourself stuck and the new hardware

00:35:14,970 --> 00:35:19,800
hasn't arrived and you've got to get

00:35:17,579 --> 00:35:23,520
some load off the web servers

00:35:19,800 --> 00:35:29,730
it is nice to have the option to move

00:35:23,520 --> 00:35:32,700
that load elsewhere um other things on

00:35:29,730 --> 00:35:37,460
relays they do not do sni yet there is a

00:35:32,700 --> 00:35:40,760
rewrite in progress to work on that you

00:35:37,460 --> 00:35:43,170
can enable and disable client-side

00:35:40,760 --> 00:35:44,820
renegotiations second session tickets

00:35:43,170 --> 00:35:51,000
etc and you can do high availability

00:35:44,820 --> 00:35:57,080
with curb so I have probably about 30

00:35:51,000 --> 00:36:02,610
seconds little more five minutes

00:35:57,080 --> 00:36:05,970
so um we have a few minutes talk real ad

00:36:02,610 --> 00:36:10,530
I'm gonna take care of something now as

00:36:05,970 --> 00:36:13,050
a US citizen trips like this are

00:36:10,530 --> 00:36:17,040
deductible on my taxes if they are for

00:36:13,050 --> 00:36:19,080
business so I need to say I'm a writer

00:36:17,040 --> 00:36:29,310
buy books please thank you

00:36:19,080 --> 00:36:31,620
so I'm Andy and if this should you know

00:36:29,310 --> 00:36:34,560
show up in an IRS audit you know there's

00:36:31,620 --> 00:36:36,900
this session tape it's nothing against

00:36:34,560 --> 00:36:42,180
you personally mr. auditor I love you

00:36:36,900 --> 00:36:47,250
you are a nice man so ah are there any

00:36:42,180 --> 00:36:54,500
questions I will start in the front yes

00:36:47,250 --> 00:37:01,100
sir the beaches web stick with the

00:36:54,500 --> 00:37:04,650
library for first CGI to write it on NC

00:37:01,100 --> 00:37:07,650
it's from the same guy who made the egg

00:37:04,650 --> 00:37:14,250
makind if you're heard I haven't worked

00:37:07,650 --> 00:37:17,040
with that first thing - to answer to

00:37:14,250 --> 00:37:19,380
that question the author of both acne

00:37:17,040 --> 00:37:22,020
client and beaches and mando Kristoff's

00:37:19,380 --> 00:37:25,440
johnson's explicitly told me to greet

00:37:22,020 --> 00:37:28,290
everybody at this conference he stuck in

00:37:25,440 --> 00:37:31,350
LA and couldn't come second thing I'm

00:37:28,290 --> 00:37:33,210
currently doing an an audit on that

00:37:31,350 --> 00:37:37,500
library

00:37:33,210 --> 00:37:42,030
on behalf of kristaps company okay Pam

00:37:37,500 --> 00:37:45,570
and I must say reading the code is is

00:37:42,030 --> 00:37:49,410
fun it is it is very small it is very

00:37:45,570 --> 00:37:51,660
clean it is automatically written so if

00:37:49,410 --> 00:37:54,540
you have a choice then writing of that

00:37:51,660 --> 00:37:57,780
application in pure mzc

00:37:54,540 --> 00:38:03,000
with the beaches stack is probably

00:37:57,780 --> 00:38:06,210
superior to writing it in PHP but of

00:38:03,000 --> 00:38:09,540
course but of course you have to do you

00:38:06,210 --> 00:38:12,990
have a nice and it's it's also quite

00:38:09,540 --> 00:38:16,200
true to the to the OpenBSD way for

00:38:12,990 --> 00:38:20,660
example myself I've also written my main

00:38:16,200 --> 00:38:23,400
web application man OpenBSD orc in an zc

00:38:20,660 --> 00:38:26,160
without any scripting language that

00:38:23,400 --> 00:38:30,090
works and it gives quite nice and fast

00:38:26,160 --> 00:38:30,420
applications but sorry for yeah thank

00:38:30,090 --> 00:38:33,900
you

00:38:30,420 --> 00:38:38,790
they say I love BSD Khan's other people

00:38:33,900 --> 00:38:41,340
answer the questions um next question

00:38:38,790 --> 00:38:43,830
let's say you have two hosts load

00:38:41,340 --> 00:38:45,630
balance with real ad cannot tell real ad

00:38:43,830 --> 00:38:48,720
hey I'm working on that one host I want

00:38:45,630 --> 00:38:51,330
to do a software upgrade please keep

00:38:48,720 --> 00:38:53,250
that out of the rotation of energy and

00:38:51,330 --> 00:38:55,350
don't fiddle with the with the PF tables

00:38:53,250 --> 00:39:01,860
in the next few minutes of course you

00:38:55,350 --> 00:39:04,620
can perfect thank you yeah I was

00:39:01,860 --> 00:39:11,880
wondering you said that the httpd server

00:39:04,620 --> 00:39:16,050
is true it but stay true oh yes but is

00:39:11,880 --> 00:39:24,480
the PHP fast eg server CH Farid as well

00:39:16,050 --> 00:39:29,670
yes ok ok yes you Europe you put the

00:39:24,480 --> 00:39:38,630
socket into the Apache HTTP d CH root

00:39:29,670 --> 00:39:42,030
and the PHP itself runs elsewhere I I

00:39:38,630 --> 00:39:45,420
trust them to have locked it down yeah I

00:39:42,030 --> 00:39:49,320
shouldn't but I do

00:39:45,420 --> 00:39:52,290
hi I'm pretty sure use templates for

00:39:49,320 --> 00:39:56,490
your consideration for HTTP at least for

00:39:52,290 --> 00:39:59,670
a virtual host do you have a specific

00:39:56,490 --> 00:40:01,230
template for HTTP only before using ACMA

00:39:59,670 --> 00:40:03,690
client to generate your first

00:40:01,230 --> 00:40:06,030
certificate or do you have some kind of

00:40:03,690 --> 00:40:09,060
automation that's sort of a

00:40:06,030 --> 00:40:12,840
chicken-and-egg problem I guess

00:40:09,060 --> 00:40:15,620
what I usually do to bootstrap TLS on

00:40:12,840 --> 00:40:20,370
the web server is I run a simple site

00:40:15,620 --> 00:40:24,330
that only has the virtual server and the

00:40:20,370 --> 00:40:27,840
Acme entry and I generate the cert there

00:40:24,330 --> 00:40:31,410
and then I switch everything over to TLS

00:40:27,840 --> 00:40:36,980
and let's encrypt we'll go to the TLS

00:40:31,410 --> 00:40:39,420
site to check for the new Acme updates

00:40:36,980 --> 00:40:49,770
you would probably kill me but what

00:40:39,420 --> 00:40:51,900
about HTTP - yes yes what what are the

00:40:49,770 --> 00:40:55,910
penalties for you know Violent Crimes in

00:40:51,900 --> 00:41:00,270
France asking for a friend

00:40:55,910 --> 00:41:09,630
I'm sorry yeah I'll call it a protest

00:41:00,270 --> 00:41:11,520
okay the web server is what it is if it

00:41:09,630 --> 00:41:14,940
does not meet your needs feel free to

00:41:11,520 --> 00:41:18,480
use a different one having said that you

00:41:14,940 --> 00:41:21,230
know there are people working on that

00:41:18,480 --> 00:41:24,960
the OpenBSD folks watch what's happening

00:41:21,230 --> 00:41:27,810
one of them will need HTTP - and they

00:41:24,960 --> 00:41:29,880
will say oh and just for the record for

00:41:27,810 --> 00:41:32,520
the camera since the cameras pointing it

00:41:29,880 --> 00:41:33,630
up here let me show that Peter Hessler

00:41:32,520 --> 00:41:38,760
has raised his hand

00:41:33,630 --> 00:41:46,080
oh no you raised your hand here we know

00:41:38,760 --> 00:41:48,090
who's responsible so first off HTTP -

00:41:46,080 --> 00:41:51,630
solves solves the problem in the wrong

00:41:48,090 --> 00:41:55,470
way the correct answer is don't load 700

00:41:51,630 --> 00:41:57,090
JavaScript things in your web app - the

00:41:55,470 --> 00:42:00,530
other answer is use a different web

00:41:57,090 --> 00:42:00,530
server don't care

00:42:04,960 --> 00:42:14,950
today at another web header to httpd

00:42:09,190 --> 00:42:18,970
like HP HP KP um real ad will let you

00:42:14,950 --> 00:42:23,080
add all kinds of web headers I do not

00:42:18,970 --> 00:42:24,520
recall off the top of my head if httpd

00:42:23,080 --> 00:42:29,950
will let you add a header

00:42:24,520 --> 00:42:32,470
no thank you and just curious do you use

00:42:29,950 --> 00:42:35,230
this for your own websites I use this

00:42:32,470 --> 00:42:39,310
for some of my websites I will be

00:42:35,230 --> 00:42:42,550
switching the rest over ah I'm running

00:42:39,310 --> 00:42:45,670
my my database stuff goes on a ZFS

00:42:42,550 --> 00:42:48,460
backed web server however I'm planning

00:42:45,670 --> 00:42:51,760
to do a book on FreeBSD packaging next

00:42:48,460 --> 00:42:58,270
year so I'll be building liberate us or

00:42:51,760 --> 00:43:04,710
sell packages and going that way okay

00:42:58,270 --> 00:43:08,650
thank you I have a question concerning

00:43:04,710 --> 00:43:13,390
Acme client in in an enterprise

00:43:08,650 --> 00:43:18,580
environment so only for internal use how

00:43:13,390 --> 00:43:20,620
do you get certificates there well

00:43:18,580 --> 00:43:24,730
there's a how do you get a certificate

00:43:20,620 --> 00:43:28,660
in private enterprise that if it's a

00:43:24,730 --> 00:43:31,720
private site what I would do is you know

00:43:28,660 --> 00:43:37,540
there is uh back in the day we called it

00:43:31,720 --> 00:43:39,850
split horizon DNS where you had a public

00:43:37,540 --> 00:43:42,240
dns entry for something and then a

00:43:39,850 --> 00:43:45,610
private DNS entry with a different IP

00:43:42,240 --> 00:43:49,600
and depending on where you were you got

00:43:45,610 --> 00:43:53,370
different answers so and you can have

00:43:49,600 --> 00:43:57,160
multiple names on one Acme client search

00:43:53,370 --> 00:44:00,640
so I would put something that faces the

00:43:57,160 --> 00:44:03,850
public that has just a whole slew of

00:44:00,640 --> 00:44:06,970
names on it I'll renew the cert out

00:44:03,850 --> 00:44:09,310
there and use some whatever scripting

00:44:06,970 --> 00:44:11,730
mojo you have to pull that cert inside

00:44:09,310 --> 00:44:11,730
the enterprise

00:44:12,470 --> 00:44:22,329
there's also dan lan joel is working on

00:44:15,680 --> 00:44:26,290
something called anvil which is this if

00:44:22,329 --> 00:44:31,970
you have complicated let's encrypt needs

00:44:26,290 --> 00:44:36,609
it may solve those problems if it but

00:44:31,970 --> 00:44:36,609
solve that problem as simply as you can

00:44:42,849 --> 00:44:49,670
you mentioned or I think it was Ingo who

00:44:47,329 --> 00:44:51,859
mentioned the C applications that you

00:44:49,670 --> 00:44:55,150
want to run on your dynamic website yes

00:44:51,859 --> 00:45:00,109
do you have any suggestions for running

00:44:55,150 --> 00:45:02,599
simple small Python or Lua scripts it's

00:45:00,109 --> 00:45:06,980
perfectly it it should be perfectly

00:45:02,599 --> 00:45:11,180
doable get uh you're gonna need

00:45:06,980 --> 00:45:17,950
something to run fast cgi protocol you

00:45:11,180 --> 00:45:20,210
point the httpd fast cgi socket

00:45:17,950 --> 00:45:24,230
configuration at the socket for your

00:45:20,210 --> 00:45:28,220
fast cgi interpreter and it should just

00:45:24,230 --> 00:45:34,280
work I have not run Python or Lua

00:45:28,220 --> 00:45:36,079
websites so I'm I'm sure this is a

00:45:34,280 --> 00:45:41,030
wonderful group of people to ask during

00:45:36,079 --> 00:45:44,750
the break though I learned that the

00:45:41,030 --> 00:45:46,640
FASTA GI argument in httpd takes a port

00:45:44,750 --> 00:45:50,230
number as an argument so instead of a

00:45:46,640 --> 00:46:01,960
socket you do : that's a way to do

00:45:50,230 --> 00:46:01,960

YouTube URL: https://www.youtube.com/watch?v=u-62QXjhLxk


