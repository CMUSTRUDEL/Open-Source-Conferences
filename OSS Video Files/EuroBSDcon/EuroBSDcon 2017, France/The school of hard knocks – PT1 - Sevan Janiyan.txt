Title: The school of hard knocks – PT1 - Sevan Janiyan
Publication date: 2019-10-16
Playlist: EuroBSDcon 2017, France
Description: 
	Description:

You’ve been asked to provide a workshop at local event, you agree and start to prepare. Very quickly you run into issues such as things being flat out broken & from there the yak shaving commences, you are immersed in a set of problems which you need to resolve otherwise the workshop will run into difficulties. This talk will cover how many different pot holes are discovered & filled in during the process to hopefully prevent future hazards (at least until the next conflicting change).

Speaker biography:

Sevan Janiyan is a sysadmin from South East England who has an interest
in different operating systems & computers. He is a member of the NetBSD
foundation and the FreeBSD project working primarily on the
cross-platform packaging system pkgsrc & the FreeBSD documentation team.
Captions: 
	00:00:00,060 --> 00:00:08,330
good morning thank you for coming to my

00:00:02,370 --> 00:00:12,990
talk so as York said I'm a member of

00:00:08,330 --> 00:00:16,609
FreeBSD and BSD team and I was given an

00:00:12,990 --> 00:00:21,119
opportunity to give some workshops at

00:00:16,609 --> 00:00:24,000
various events in London and in England

00:00:21,119 --> 00:00:27,029
and this is a talk about the various

00:00:24,000 --> 00:00:32,090
issues that we ended up addressing in

00:00:27,029 --> 00:00:36,899
fbst so that the workshops ran smoothly

00:00:32,090 --> 00:00:39,120
so a bit of background there's a series

00:00:36,899 --> 00:00:43,860
of there's a group of electronic

00:00:39,120 --> 00:00:48,329
engineers based around London who run

00:00:43,860 --> 00:00:51,510
various events and back in 2013 they

00:00:48,329 --> 00:00:54,960
decided that they were going to run a

00:00:51,510 --> 00:01:01,559
workshop on very look for programming

00:00:54,960 --> 00:01:03,840
FPGA and we started with what were these

00:01:01,559 --> 00:01:08,990
introductory boards from altaira

00:01:03,840 --> 00:01:13,350
and using the proprietary closed source

00:01:08,990 --> 00:01:16,439
tool chain for learning very look and

00:01:13,350 --> 00:01:20,130
this workshop was just an absolute

00:01:16,439 --> 00:01:22,619
disaster it was over a weekend and the

00:01:20,130 --> 00:01:24,990
first day we basically just spent the

00:01:22,619 --> 00:01:28,049
entire day trying to get the tool chain

00:01:24,990 --> 00:01:30,030
to install the problem is is that there

00:01:28,049 --> 00:01:32,009
is no open source alternative and you're

00:01:30,030 --> 00:01:36,329
stuck with this tool chain and you have

00:01:32,009 --> 00:01:38,310
to kind of get it working they provide

00:01:36,329 --> 00:01:41,009
you there with this four gigabytes

00:01:38,310 --> 00:01:44,450
download which on compresses and

00:01:41,009 --> 00:01:48,030
installs to about 13 gigabytes of

00:01:44,450 --> 00:01:53,250
multiple versions of pearl tickle and

00:01:48,030 --> 00:01:55,860
various modules that go with it so we

00:01:53,250 --> 00:01:58,049
spent best part of the day trying to get

00:01:55,860 --> 00:02:00,360
this to install and then when we

00:01:58,049 --> 00:02:02,909
actually started doing the exercises and

00:02:00,360 --> 00:02:05,299
went to synthesize we realized that some

00:02:02,909 --> 00:02:07,409
of us had actually installed the

00:02:05,299 --> 00:02:09,450
licensed version and not the free

00:02:07,409 --> 00:02:12,900
version and you would have to go back

00:02:09,450 --> 00:02:13,440
and reinstall them start again the

00:02:12,900 --> 00:02:16,330
reason I'm

00:02:13,440 --> 00:02:20,050
this story is because it made me

00:02:16,330 --> 00:02:21,730
realized actually in some cases the

00:02:20,050 --> 00:02:24,760
tools are kind of mandated and you have

00:02:21,730 --> 00:02:26,350
no choice whereas in our case we're an

00:02:24,760 --> 00:02:32,590
open-source project and we can change

00:02:26,350 --> 00:02:35,350
things move forward a few years on I was

00:02:32,590 --> 00:02:39,670
invited to give a talk about the bsd

00:02:35,350 --> 00:02:41,680
family of operating systems to the same

00:02:39,670 --> 00:02:45,070
group of engineers basically and why it

00:02:41,680 --> 00:02:47,820
would benefit them for running bsd on

00:02:45,070 --> 00:02:47,820
their hardware

00:02:48,030 --> 00:02:54,340
at that event i kind of took a more

00:02:51,340 --> 00:03:00,820
generic approach and represented orderby

00:02:54,340 --> 00:03:02,830
SDS and about a month or so a few months

00:03:00,820 --> 00:03:06,880
onwards i was invited to actually come

00:03:02,830 --> 00:03:08,860
and do a workshop and I've never run a

00:03:06,880 --> 00:03:12,190
workshop before and my skills of

00:03:08,860 --> 00:03:14,739
teaching non-existent so I decided that

00:03:12,190 --> 00:03:19,870
I would actually just focus on one bsd

00:03:14,739 --> 00:03:25,140
and try to make that run smoothly so I

00:03:19,870 --> 00:03:25,140
picked no BSD to do that

00:03:28,480 --> 00:03:36,250
just as I should I forgot to switch

00:03:32,220 --> 00:03:41,890
slides so the other thing that actually

00:03:36,250 --> 00:03:44,530
came out from that FPGA workshops is the

00:03:41,890 --> 00:03:47,830
guys two of the guys went on to actually

00:03:44,530 --> 00:03:51,070
setting up an open-source fpga board

00:03:47,830 --> 00:03:52,510
with an fpga tool chain so you don't

00:03:51,070 --> 00:04:11,830
have to inflict this on other people

00:03:52,510 --> 00:04:13,000
ever again this is true so i've most of

00:04:11,830 --> 00:04:15,130
these people who are turning up are

00:04:13,000 --> 00:04:18,120
actually not interested in the software

00:04:15,130 --> 00:04:22,030
insert itself but what it can actually

00:04:18,120 --> 00:04:23,620
do for them so my idea was to basically

00:04:22,030 --> 00:04:25,560
raise our expectations of what they

00:04:23,620 --> 00:04:28,180
should expect from an operating system

00:04:25,560 --> 00:04:31,150
which we can do because we're a fairly

00:04:28,180 --> 00:04:34,919
mature project fairly well documented

00:04:31,150 --> 00:04:38,470
have fairly decent practices in place

00:04:34,919 --> 00:04:41,380
and it was also very enlightening that

00:04:38,470 --> 00:04:44,950
the things that we are darah of concern

00:04:41,380 --> 00:04:47,800
to us don't really hit the ball for them

00:04:44,950 --> 00:04:51,610
so you know mentioning that we don't

00:04:47,800 --> 00:04:54,520
have system D just doesn't register

00:04:51,610 --> 00:05:00,340
where it's obviously it's paying for

00:04:54,520 --> 00:05:01,870
most of us to suffer it and I thought

00:05:00,340 --> 00:05:03,310
that I would basically the angle that I

00:05:01,870 --> 00:05:07,120
would take it is this is how you can

00:05:03,310 --> 00:05:09,220
save time trying to do your projects and

00:05:07,120 --> 00:05:17,169
these tools will allow you to do that

00:05:09,220 --> 00:05:20,110
and kind of develop that so

00:05:17,169 --> 00:05:21,820
traditionally if you want to kind of get

00:05:20,110 --> 00:05:23,650
involved with the BS DS there's quite a

00:05:21,820 --> 00:05:25,200
steep learning curve in terms of the

00:05:23,650 --> 00:05:28,510
amount of text that you actually have to

00:05:25,200 --> 00:05:30,760
take in to become proficient and

00:05:28,510 --> 00:05:35,560
actually just how things are put

00:05:30,760 --> 00:05:37,539
together and I didn't really want to

00:05:35,560 --> 00:05:40,220
kind of do go down that line I wanted to

00:05:37,539 --> 00:05:42,680
kind of find all the older bits

00:05:40,220 --> 00:05:44,560
a very high level that would allow me to

00:05:42,680 --> 00:05:48,230
demonstrate how they could save time and

00:05:44,560 --> 00:05:52,490
avoid digging into any of these

00:05:48,230 --> 00:05:54,080
technical details because most probably

00:05:52,490 --> 00:05:56,780
they're not actually interested I

00:05:54,080 --> 00:06:00,920
probably do a bad job at it most likely

00:05:56,780 --> 00:06:03,200
as well and you should be able to kind

00:06:00,920 --> 00:06:05,950
of do some things without actually

00:06:03,200 --> 00:06:07,820
having to resort to the internals

00:06:05,950 --> 00:06:10,640
interesting thing that's actually come

00:06:07,820 --> 00:06:14,860
up in the past a couple of weeks as this

00:06:10,640 --> 00:06:17,270
new hashtag called unqualified for tech

00:06:14,860 --> 00:06:19,160
people are talking about you know the

00:06:17,270 --> 00:06:23,780
senior roles that they have without that

00:06:19,160 --> 00:06:30,610
could emic backgrounds which is it's

00:06:23,780 --> 00:06:32,750
nice to see so you quickly realized that

00:06:30,610 --> 00:06:36,620
most of these folks have to kind of

00:06:32,750 --> 00:06:40,150
suffer really brittle tools to get their

00:06:36,620 --> 00:06:42,890
job done like one thing that was quite

00:06:40,150 --> 00:06:47,180
enlightening for me was the way that we

00:06:42,890 --> 00:06:53,030
generate project files for our

00:06:47,180 --> 00:06:55,120
bootloader for Windows CE II we do we

00:06:53,030 --> 00:06:58,090
have this orc file which generates our

00:06:55,120 --> 00:07:02,210
visual studio configuration file which

00:06:58,090 --> 00:07:04,220
you can load and you can build if you

00:07:02,210 --> 00:07:05,720
make the slightest adjustment in one

00:07:04,220 --> 00:07:09,080
pixel from the user interface

00:07:05,720 --> 00:07:10,940
environment Visual Studio will corrupt

00:07:09,080 --> 00:07:14,960
that project and that's it you can't

00:07:10,940 --> 00:07:16,490
make any progress obviously we don't

00:07:14,960 --> 00:07:19,250
have to suffer this but I'm sure there's

00:07:16,490 --> 00:07:24,710
been many hours man-hours lost by people

00:07:19,250 --> 00:07:28,669
trying to work with Visual Studio things

00:07:24,710 --> 00:07:32,030
like Brendan Greg's shouting in the data

00:07:28,669 --> 00:07:33,919
center video which you know showed the

00:07:32,030 --> 00:07:37,580
ability when you have really rich tools

00:07:33,919 --> 00:07:40,970
to you know shout a bunch of jbods

00:07:37,580 --> 00:07:42,730
and through the instrumentation tools in

00:07:40,970 --> 00:07:47,240
your operating system be able to see

00:07:42,730 --> 00:07:48,380
actually what impact that had most

00:07:47,240 --> 00:07:50,010
people don't have this in their

00:07:48,380 --> 00:07:54,450
day-to-day work

00:07:50,010 --> 00:08:00,260
as a researcher by the name of Brett

00:07:54,450 --> 00:08:04,890
Victor who was he gave his talk about

00:08:00,260 --> 00:08:08,120
rich tools and the example that he was

00:08:04,890 --> 00:08:11,160
giving was when you're developing a game

00:08:08,120 --> 00:08:13,440
going from trying to work out the

00:08:11,160 --> 00:08:16,350
correct setting for a value to set for

00:08:13,440 --> 00:08:20,490
your environment you know in relation to

00:08:16,350 --> 00:08:23,430
gravity to being able to see that change

00:08:20,490 --> 00:08:25,310
dynamically in real time to being able

00:08:23,430 --> 00:08:28,020
to project where you're going to go so

00:08:25,310 --> 00:08:30,990
it goes from how did I end up here -

00:08:28,020 --> 00:08:34,950
what am I actually capable of - where

00:08:30,990 --> 00:08:38,820
can I actually end up going and the last

00:08:34,950 --> 00:08:42,630
one Brian Cantrell did a talk back in

00:08:38,820 --> 00:08:45,960
2009 about the early days of DTrace and

00:08:42,630 --> 00:08:47,910
how that came about where they had a son

00:08:45,960 --> 00:08:52,770
e 10 K that they'd sold to a customer

00:08:47,910 --> 00:08:54,900
and it was misconfigured and it would

00:08:52,770 --> 00:08:56,820
crash and it would take another 45

00:08:54,900 --> 00:08:58,650
minutes for the system to come back up

00:08:56,820 --> 00:09:01,680
again so when you're actually trying to

00:08:58,650 --> 00:09:05,280
develop something with debug a problem a

00:09:01,680 --> 00:09:12,540
45 minute turnaround is quite a serious

00:09:05,280 --> 00:09:15,030
time sink so and there's enough examples

00:09:12,540 --> 00:09:16,860
of you know really bad tools that people

00:09:15,030 --> 00:09:19,250
have the kind of suffer and that

00:09:16,860 --> 00:09:22,500
manifests in kind of really weird

00:09:19,250 --> 00:09:25,940
behavior which I guess which was kind of

00:09:22,500 --> 00:09:28,560
touched on in um at the opening keynote

00:09:25,940 --> 00:09:30,240
the amount of Windows users that you

00:09:28,560 --> 00:09:32,250
know live in fear of having to restart

00:09:30,240 --> 00:09:35,070
because you know suddenly your machine

00:09:32,250 --> 00:09:36,930
is going to go down into this long

00:09:35,070 --> 00:09:39,140
update cycle to shutdown and then

00:09:36,930 --> 00:09:41,340
there's going to be another two or three

00:09:39,140 --> 00:09:45,120
reboots again when your system comes

00:09:41,340 --> 00:09:46,440
back up you know not doing updates

00:09:45,120 --> 00:09:49,250
because you don't know what's going to

00:09:46,440 --> 00:09:54,810
actually happen when you update and

00:09:49,250 --> 00:09:56,700
especially you like in firmware the

00:09:54,810 --> 00:09:58,760
system is so brittle that you can't

00:09:56,700 --> 00:10:00,950
actually explore any ideas

00:09:58,760 --> 00:10:03,980
or like in the network world where

00:10:00,950 --> 00:10:05,390
redundancy as a licensed feature you're

00:10:03,980 --> 00:10:08,300
really scared to change anything because

00:10:05,390 --> 00:10:09,310
if the system goes down you can't do

00:10:08,300 --> 00:10:12,890
anything about it

00:10:09,310 --> 00:10:15,860
and I think most of these things are

00:10:12,890 --> 00:10:22,310
just a non-issue for us and in the bsd

00:10:15,860 --> 00:10:27,380
world especially in the PSD project so

00:10:22,310 --> 00:10:30,190
as i said focus on basically how how net

00:10:27,380 --> 00:10:34,220
bsd can make someone's life easier and

00:10:30,190 --> 00:10:36,290
ignore the system internal details to

00:10:34,220 --> 00:10:37,880
keep it really high-level and just make

00:10:36,290 --> 00:10:40,760
sure that the process is really smooth

00:10:37,880 --> 00:10:48,740
so we can go through it without actually

00:10:40,760 --> 00:10:50,390
having to besides itraq so these were

00:10:48,740 --> 00:10:53,540
the topics that I decided decided to

00:10:50,390 --> 00:10:56,000
kind of cover demonstrate that our

00:10:53,540 --> 00:10:57,610
system is fully documented and not fully

00:10:56,000 --> 00:11:02,660
documented but the documentation is

00:10:57,610 --> 00:11:05,690
available and easily browsable maybe in

00:11:02,660 --> 00:11:09,320
the era of github it's not so important

00:11:05,690 --> 00:11:10,930
but demonstrate that the history in the

00:11:09,320 --> 00:11:14,390
source repository is readily available

00:11:10,930 --> 00:11:17,690
and you know the FreeBSD project has

00:11:14,390 --> 00:11:23,540
their CSR G history that you can kind of

00:11:17,690 --> 00:11:25,700
go back and explore the cross

00:11:23,540 --> 00:11:28,160
compilation stuff that makes it really

00:11:25,700 --> 00:11:32,950
easy to do things without having to run

00:11:28,160 --> 00:11:35,600
the the target environment locally

00:11:32,950 --> 00:11:39,170
actually explore the internals of what

00:11:35,600 --> 00:11:41,470
explore the system with newer do some

00:11:39,170 --> 00:11:44,360
things with ramp

00:11:41,470 --> 00:11:49,790
explore the simulation devices like the

00:11:44,360 --> 00:11:53,470
GPIO sim and then I look at kind of

00:11:49,790 --> 00:11:53,470
tamper resistance were very exact

00:11:58,950 --> 00:12:09,370
so we had this problem in that we

00:12:06,279 --> 00:12:11,770
generate images but the image is you

00:12:09,370 --> 00:12:16,529
can't log into on the network standard

00:12:11,770 --> 00:12:20,950
because root doesn't have a password and

00:12:16,529 --> 00:12:23,230
you know you can't login so at the

00:12:20,950 --> 00:12:26,680
moment the requirement is that you need

00:12:23,230 --> 00:12:31,420
to have a serial adapter to go in and

00:12:26,680 --> 00:12:34,149
connect the problem with that is is for

00:12:31,420 --> 00:12:36,010
the Linux users you kind of get

00:12:34,149 --> 00:12:39,279
sidetracked into installing a uucp

00:12:36,010 --> 00:12:42,339
package so you can get see you and have

00:12:39,279 --> 00:12:44,740
the kind of sidetrack into changing file

00:12:42,339 --> 00:12:48,370
system permissions which kind of people

00:12:44,740 --> 00:12:49,779
get lost that I'm not sure if this is

00:12:48,370 --> 00:12:52,570
still the case on the latest version of

00:12:49,779 --> 00:12:55,779
OS X but in the older versions you would

00:12:52,570 --> 00:12:57,670
get unsigned kernel extensions which

00:12:55,779 --> 00:13:00,040
would mean people would have to kind of

00:12:57,670 --> 00:13:04,750
fill around with their efi settings and

00:13:00,040 --> 00:13:06,370
turn off signing the nice thing is is

00:13:04,750 --> 00:13:09,580
actually that one thing we do do is we

00:13:06,370 --> 00:13:12,190
have multicast dns enabled a standard

00:13:09,580 --> 00:13:15,060
for our arm images so discovery on the

00:13:12,190 --> 00:13:19,930
network is really easy but we don't have

00:13:15,060 --> 00:13:24,490
means of log it in on on the network yet

00:13:19,930 --> 00:13:27,130
but I that's my target so that you'd end

00:13:24,490 --> 00:13:28,890
up just right in the image plugging it

00:13:27,130 --> 00:13:35,860
into your device booting it and then

00:13:28,890 --> 00:13:38,040
associating in so some of the kind of

00:13:35,860 --> 00:13:42,700
issues that were kind of evident

00:13:38,040 --> 00:13:44,560
immediately was when we came into doing

00:13:42,700 --> 00:13:47,140
like the cross compilation stuff the

00:13:44,560 --> 00:13:51,010
Otakon scripts for the various

00:13:47,140 --> 00:13:53,910
components that we pack were out of date

00:13:51,010 --> 00:14:00,040
so the notion of you know 64-bit Windows

00:13:53,910 --> 00:14:03,640
running say Gwyn just wasn't a thing at

00:14:00,040 --> 00:14:07,510
the arm image that we were generating

00:14:03,640 --> 00:14:08,360
wasn't actually bootable on the Beagle

00:14:07,510 --> 00:14:13,759
board

00:14:08,360 --> 00:14:17,860
I was actually experimenting on the gpio

00:14:13,759 --> 00:14:22,179
driver wasn't actually working properly

00:14:17,860 --> 00:14:27,709
which Paul helped me guilty of me fix

00:14:22,179 --> 00:14:29,839
and most of the arm boards that we

00:14:27,709 --> 00:14:31,730
support as a generic kernel

00:14:29,839 --> 00:14:34,730
configuration and everything is a

00:14:31,730 --> 00:14:36,459
derivative of that there were some cases

00:14:34,730 --> 00:14:39,799
specifically in the BeagleBone black

00:14:36,459 --> 00:14:41,959
that it was actually on a kernel

00:14:39,799 --> 00:14:43,759
configuration of its own which meant

00:14:41,959 --> 00:14:45,709
that certain options weren't enabled

00:14:43,759 --> 00:14:49,279
which I didn't actually find out until

00:14:45,709 --> 00:14:51,019
we came to the lesson and somebody was

00:14:49,279 --> 00:14:52,610
actually having to do extra work that

00:14:51,019 --> 00:14:59,540
didn't need to be done because the PI

00:14:52,610 --> 00:15:01,910
users have relevant parts and the last

00:14:59,540 --> 00:15:06,350
one which is still yet unsolved there's

00:15:01,910 --> 00:15:11,239
a broken new boot scripts now in you

00:15:06,350 --> 00:15:14,839
boot it's very much like a linux project

00:15:11,239 --> 00:15:18,230
in terms of there's various support

00:15:14,839 --> 00:15:21,739
support for various platforms but the

00:15:18,230 --> 00:15:24,369
inconsistency is there in terms of T I

00:15:21,739 --> 00:15:27,049
have contributed a bunch of changes for

00:15:24,369 --> 00:15:30,769
adding an extra configuration file for

00:15:27,049 --> 00:15:33,529
your firmware which one family of boards

00:15:30,769 --> 00:15:36,199
have picked up on and another family of

00:15:33,529 --> 00:15:38,829
boards do not have which means that we

00:15:36,199 --> 00:15:42,019
can't actually have a consistent

00:15:38,829 --> 00:15:43,970
configuration file and the reason this

00:15:42,019 --> 00:15:46,819
is a problem is that because we have two

00:15:43,970 --> 00:15:50,360
different steps one ends up overriding

00:15:46,819 --> 00:15:53,419
the other in the order of execution and

00:15:50,360 --> 00:15:55,970
it means that we're trying to execute a

00:15:53,419 --> 00:16:03,980
kernel that doesn't work on the Beagle

00:15:55,970 --> 00:16:10,669
bone so since that stuff has started

00:16:03,980 --> 00:16:13,309
since this has started mark made various

00:16:10,669 --> 00:16:15,329
changes to the Lua subsystem in in OBS D

00:16:13,309 --> 00:16:18,990
he bought Lua

00:16:15,329 --> 00:16:21,059
up to dates and he had some things in

00:16:18,990 --> 00:16:23,329
his github which I'm not sure have made

00:16:21,059 --> 00:16:26,850
it in yet

00:16:23,329 --> 00:16:31,399
Jared McNeil made it very easy for us to

00:16:26,850 --> 00:16:34,860
ship you boots he created packages and

00:16:31,399 --> 00:16:37,410
it's trivial to add new images now

00:16:34,860 --> 00:16:45,110
literally two or three lines in a make

00:16:37,410 --> 00:16:48,509
file and we have new firmware to do I

00:16:45,110 --> 00:16:51,959
need to kind of my idea is to basically

00:16:48,509 --> 00:16:56,089
create a kind of a worksheet that so

00:16:51,959 --> 00:17:01,170
people can just work off easily so

00:16:56,089 --> 00:17:04,709
that's provide better lure and ramp

00:17:01,170 --> 00:17:10,049
examples the reason I kind of wanted to

00:17:04,709 --> 00:17:12,659
do the demonstrate the rump mechanism to

00:17:10,049 --> 00:17:15,659
the to the engineers was because there

00:17:12,659 --> 00:17:20,010
was a blog post by an T about how he

00:17:15,659 --> 00:17:21,659
developed Intel wireless driver and it's

00:17:20,010 --> 00:17:24,569
being able to pass through a device to

00:17:21,659 --> 00:17:27,449
the rump environment and developer

00:17:24,569 --> 00:17:30,330
develop that the thing is is that

00:17:27,449 --> 00:17:33,559
actually trying to demonstrate that you

00:17:30,330 --> 00:17:37,110
need to actually have quite a lot of

00:17:33,559 --> 00:17:39,179
context set up about the system

00:17:37,110 --> 00:17:40,380
internals because you need to turn

00:17:39,179 --> 00:17:44,070
around and say you need the following

00:17:40,380 --> 00:17:46,140
subsystems to instantiate so that it

00:17:44,070 --> 00:17:49,919
works correctly and that kind of goes

00:17:46,140 --> 00:17:51,659
off in a different tangent so I'm trying

00:17:49,919 --> 00:17:53,520
to think of an easy example that would

00:17:51,659 --> 00:17:55,500
kind of work without having to you know

00:17:53,520 --> 00:17:57,480
player explain that oh you need to find

00:17:55,500 --> 00:18:04,200
mount a file system you'll need the VFS

00:17:57,480 --> 00:18:07,049
module and x y&z as I said implement

00:18:04,200 --> 00:18:09,690
mechanism to add users for network

00:18:07,049 --> 00:18:13,140
access the way that we provide our

00:18:09,690 --> 00:18:15,600
images we have a dos partition and Jared

00:18:13,140 --> 00:18:18,120
had this idea of maybe we could just

00:18:15,600 --> 00:18:19,860
create a text file with a username and

00:18:18,120 --> 00:18:22,529
password and then when the system boots

00:18:19,860 --> 00:18:26,820
up that text file is read and the user

00:18:22,529 --> 00:18:28,710
is created so that it's available when

00:18:26,820 --> 00:18:35,450
the system is up

00:18:28,710 --> 00:18:39,560
but yeah I haven't exploited the options

00:18:35,450 --> 00:18:42,860
unified the you beat script so actually

00:18:39,560 --> 00:18:45,420
address this issue of having a single

00:18:42,860 --> 00:18:47,400
file which deals with all the board's

00:18:45,420 --> 00:18:53,220
that we support rather than having this

00:18:47,400 --> 00:18:56,990
split across multiple platforms my mark

00:18:53,220 --> 00:19:00,420
Ballmer created this newer binding

00:18:56,990 --> 00:19:03,480
called UNIX which provides some of the

00:19:00,420 --> 00:19:06,690
common Siskel's for the OS and I'm

00:19:03,480 --> 00:19:10,560
guessing that was on to do list to make

00:19:06,690 --> 00:19:14,700
it in but maybe provide something around

00:19:10,560 --> 00:19:17,610
that to show that you can actually

00:19:14,700 --> 00:19:22,350
interact with the system without having

00:19:17,610 --> 00:19:27,090
to resort to writing C and just from

00:19:22,350 --> 00:19:32,370
yesterday's cherries talk perhaps maybe

00:19:27,090 --> 00:19:35,910
an ATF and Anita talk example to show

00:19:32,370 --> 00:19:38,360
how you can do tests but my only concern

00:19:35,910 --> 00:19:49,590
is that you'd kind of go off into

00:19:38,360 --> 00:19:53,490
dealing with Kim you yep so my thanks go

00:19:49,590 --> 00:19:56,250
to mark Baumer for doing the Lua Lua

00:19:53,490 --> 00:20:01,110
subsystem Paul Quixote for helping me

00:19:56,250 --> 00:20:05,040
with the bug fixes Nick with making the

00:20:01,110 --> 00:20:07,110
images bootable long-arm Jared for you

00:20:05,040 --> 00:20:15,780
boot and no thanks to Jarrod for you

00:20:07,110 --> 00:20:18,120
boot it's true it's not as forth

00:20:15,780 --> 00:20:20,250
entirely and the London hax place where

00:20:18,120 --> 00:20:22,490
I kind of worked on most of this stuff

00:20:20,250 --> 00:20:25,980
and open source hardware user group

00:20:22,490 --> 00:20:29,400
where I got to present run these

00:20:25,980 --> 00:20:32,070
workshops and the next one is going to

00:20:29,400 --> 00:20:37,800
be next Saturday in Oxford at the Oxford

00:20:32,070 --> 00:20:40,340
tax base so hopefully kind of could

00:20:37,800 --> 00:20:40,340
continue running

00:20:42,920 --> 00:21:04,560
any questions just a little suggestion

00:21:00,890 --> 00:21:11,280
it may be easier to 1/2 people install

00:21:04,560 --> 00:21:21,090
putty then see you that's true

00:21:11,280 --> 00:21:24,000
yes even but the CU is on for linux okay

00:21:21,090 --> 00:21:27,980
I didn't I didn't realize I thought it

00:21:24,000 --> 00:21:30,660
was still a Windows thing so anecdotally

00:21:27,980 --> 00:21:32,400
I've heard from several people that they

00:21:30,660 --> 00:21:34,770
have like one or more arm boards in the

00:21:32,400 --> 00:21:37,590
drawer and it's was just too frustrating

00:21:34,770 --> 00:21:39,420
to get like Nettie stood over us to get

00:21:37,590 --> 00:21:44,010
anything booting on them so you know

00:21:39,420 --> 00:21:47,190
they're sitting in a drawer so I think I

00:21:44,010 --> 00:21:49,830
think you could get a lot more arm users

00:21:47,190 --> 00:21:54,780
if there was a simple and working how-to

00:21:49,830 --> 00:21:58,650
for a couple of the most often used of

00:21:54,780 --> 00:22:01,290
these BOTS I think one thing I should

00:21:58,650 --> 00:22:04,410
mention is the testament to the cross

00:22:01,290 --> 00:22:07,590
compilation framework in their PSD it

00:22:04,410 --> 00:22:08,940
was basically the other thing that we

00:22:07,590 --> 00:22:11,220
address is that we don't we're not

00:22:08,940 --> 00:22:13,050
inflicting a foreign environment to them

00:22:11,220 --> 00:22:15,030
as the offset you know they're they're

00:22:13,050 --> 00:22:16,260
really sitting in their own environment

00:22:15,030 --> 00:22:18,960
that they're comfortable in would be at

00:22:16,260 --> 00:22:20,880
Mac OS or Linux we've had a couple of

00:22:18,960 --> 00:22:24,450
people with Windows but they've kind of

00:22:20,880 --> 00:22:27,660
had different problems and yeah it's

00:22:24,450 --> 00:22:29,700
really easy to get up and going I didn't

00:22:27,660 --> 00:22:31,770
actually end up running a full release

00:22:29,700 --> 00:22:35,820
as part of the workshop because

00:22:31,770 --> 00:22:36,900
obviously varying speeds of laptops you

00:22:35,820 --> 00:22:39,570
know you're not going to be able to turn

00:22:36,900 --> 00:22:42,600
our release around in a short time but

00:22:39,570 --> 00:22:45,390
we can actually do build the tool chain

00:22:42,600 --> 00:22:48,270
and build a current arm kernel in less

00:22:45,390 --> 00:22:50,420
than 15 minutes on a modern laptop and

00:22:48,270 --> 00:22:52,940
that just works smoothly

00:22:50,420 --> 00:22:54,500
for windows tenders there's been

00:22:52,940 --> 00:22:57,380
different problems and that's just been

00:22:54,500 --> 00:22:59,270
you know one user hadn't been on the

00:22:57,380 --> 00:23:02,390
up-to-date builds so it didn't have like

00:22:59,270 --> 00:23:04,610
the Linux subsystem and another user had

00:23:02,390 --> 00:23:06,380
the Linux subsystem but it was buggy so

00:23:04,610 --> 00:23:12,830
when he started you know on compressing

00:23:06,380 --> 00:23:15,140
stuff the system just crashed and the

00:23:12,830 --> 00:23:18,350
situation with the Ombuds improving as

00:23:15,140 --> 00:23:22,400
well one of the biggest issue was always

00:23:18,350 --> 00:23:25,640
finding the correct you boot version for

00:23:22,400 --> 00:23:30,130
the board and that's being worked on was

00:23:25,640 --> 00:23:35,150
the packages and also the FTT support

00:23:30,130 --> 00:23:37,820
makes it easier to get working kernel

00:23:35,150 --> 00:23:40,400
for your wart without having to compile

00:23:37,820 --> 00:23:42,860
it yourself and things like that so but

00:23:40,400 --> 00:23:47,510
I fully agree that the documentation

00:23:42,860 --> 00:23:51,110
still needs a bit work to make it easier

00:23:47,510 --> 00:23:56,150
I think the you boot documentation it's

00:23:51,110 --> 00:24:00,770
just it's so user hostile again one

00:23:56,150 --> 00:24:03,500
remark about the serial console on Linux

00:24:00,770 --> 00:24:10,640
on newer versions you might have to

00:24:03,500 --> 00:24:13,330
disable modem D so modem manager or

00:24:10,640 --> 00:24:16,760
whatever it is called so basically

00:24:13,330 --> 00:24:20,420
someone in the patterning land decided

00:24:16,760 --> 00:24:23,900
that all serial devices are obviously

00:24:20,420 --> 00:24:28,160
modems and they always send some some

00:24:23,900 --> 00:24:31,070
eighty sequences to it to try to get it

00:24:28,160 --> 00:24:33,950
to talkback and it's especially annoying

00:24:31,070 --> 00:24:37,520
if you are dealing with FPGAs you want

00:24:33,950 --> 00:24:40,100
to program but it can also mess up any

00:24:37,520 --> 00:24:45,670
other use of serial console so this is

00:24:40,100 --> 00:24:45,670
just a service announcement we want

00:24:49,540 --> 00:24:52,069

YouTube URL: https://www.youtube.com/watch?v=rV-J0ITkq4g


