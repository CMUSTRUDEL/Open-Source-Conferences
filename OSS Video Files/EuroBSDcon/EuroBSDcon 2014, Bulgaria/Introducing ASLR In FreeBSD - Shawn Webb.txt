Title: Introducing ASLR In FreeBSD - Shawn Webb
Publication date: 2019-10-14
Playlist: EuroBSDcon 2014, Bulgaria
Description: 
	Abstract:

Address Space Layout Randomization, an exploit mitigation technique which randomizes the in-memory layout of executables, is a feature lacking in FreeBSD that people have been asking for for a number of years. Oliver Pinter and Shawn Webb have come up with an innovative implementation of ASLR for FreeBSD. This presentation gives an introduction and a live demo of our ASLR implementation.

Speaker biography:

Brief CV of Shawn Webb: 
 * Current employee of Cisco Systems, Inc. I work on ClamAV full-time. 
 * I created libhijack, a library to make runtime process infection extremely simple on Linux and FreeBSD. 
 * Maintainer of a number of FreeBSD ports
Captions: 
	00:00:08,189 --> 00:00:12,219
so thank you for coming

00:00:09,799 --> 00:00:13,860
my name is Sean Webb I go by

00:00:12,219 --> 00:00:15,990
online

00:00:13,860 --> 00:00:18,330
and as people are coming in I thought I

00:00:15,990 --> 00:00:22,619
would introduce Groff as you all know

00:00:18,330 --> 00:00:27,900
this is my lovely goat he was born at

00:00:22,619 --> 00:00:30,529
BST can and he he was born because I had

00:00:27,900 --> 00:00:34,170
tweeted and it caused a tweet storm

00:00:30,529 --> 00:00:37,200
about how I was preparing for my ASL our

00:00:34,170 --> 00:00:39,840
presentation for BSD can and I had

00:00:37,200 --> 00:00:43,460
sacrifi and I had yet to sacrifice the

00:00:39,840 --> 00:00:46,170
traditional three and a half goats so

00:00:43,460 --> 00:00:48,690
Alan Jude and a few others picked it up

00:00:46,170 --> 00:00:52,020
and who suggested that Alan Jude picked

00:00:48,690 --> 00:00:54,980
up a goat for BSD can so that I didn't

00:00:52,020 --> 00:00:58,200
have to bring one through US Customs

00:00:54,980 --> 00:01:07,979
so Groff was born and he is my little

00:00:58,200 --> 00:01:10,020
baby I love him so today's presentation

00:01:07,979 --> 00:01:14,130
is about address space layout

00:01:10,020 --> 00:01:15,890
randomization or ASL are for short while

00:01:14,130 --> 00:01:19,080
people are filling in I'm gonna have a

00:01:15,890 --> 00:01:22,320
moment of arrogance and egotism and I'm

00:01:19,080 --> 00:01:24,450
going to talk about myself so my name is

00:01:22,320 --> 00:01:26,670
Sean Webb I'm a big fan of open source

00:01:24,450 --> 00:01:30,750
and I've been I was introduced to

00:01:26,670 --> 00:01:33,630
FreeBSD when I was a teenager and I had

00:01:30,750 --> 00:01:36,350
joined a an Internet and online hacking

00:01:33,630 --> 00:01:40,020
community and they introduced me to

00:01:36,350 --> 00:01:42,780
FreeBSD and how it's much more hacker

00:01:40,020 --> 00:01:45,360
like than even Slackware and I just fell

00:01:42,780 --> 00:01:49,470
in love from day one I'm passionate

00:01:45,360 --> 00:01:51,090
about security I have been working in

00:01:49,470 --> 00:01:53,850
the security industry for the past few

00:01:51,090 --> 00:01:56,670
years and my first introduction to

00:01:53,850 --> 00:02:00,000
security when I was about 14 15 years

00:01:56,670 --> 00:02:02,189
old and introduced to the Internet a lot

00:02:00,000 --> 00:02:05,430
of you will recognize names NetZero and

00:02:02,189 --> 00:02:08,700
Juno they offered free dial-up service

00:02:05,430 --> 00:02:13,709
if you agreed to install a piece of

00:02:08,700 --> 00:02:16,920
adware on your computer that would dial

00:02:13,709 --> 00:02:18,720
in to the to their network for you and

00:02:16,920 --> 00:02:22,980
then once you're connected it would

00:02:18,720 --> 00:02:24,690
display some ads well I figured that you

00:02:22,980 --> 00:02:26,610
know dial-up is precious bandwidth and I

00:02:24,690 --> 00:02:27,690
don't want these big banners on my

00:02:26,610 --> 00:02:33,690
screen it takes up

00:02:27,690 --> 00:02:35,880
a lot of bandwidth so I I ran a hex

00:02:33,690 --> 00:02:37,620
editor and strings and I found out how

00:02:35,880 --> 00:02:39,480
they were what numbers they were using

00:02:37,620 --> 00:02:43,830
to dial in and how they did the

00:02:39,480 --> 00:02:46,140
authentication mechanisms and I was able

00:02:43,830 --> 00:02:51,690
to reverse-engineer that and created my

00:02:46,140 --> 00:02:58,020
own dial-up script to to not have to

00:02:51,690 --> 00:03:01,500
deal with the adware so from that day on

00:02:58,020 --> 00:03:03,360
I loved security you know taking a look

00:03:01,500 --> 00:03:04,820
at things and manipulating things that

00:03:03,360 --> 00:03:08,090
the original developers or designers

00:03:04,820 --> 00:03:11,120
never thought of I submitted a few

00:03:08,090 --> 00:03:14,640
insignificant patches to FreeBSD I

00:03:11,120 --> 00:03:18,090
worked on set facl get facl I'm a

00:03:14,640 --> 00:03:19,980
maintainer of a few ports which are

00:03:18,090 --> 00:03:22,800
pretty much defunct now because I

00:03:19,980 --> 00:03:25,200
submitted them because they work they

00:03:22,800 --> 00:03:28,190
were my projects and I didn't want to

00:03:25,200 --> 00:03:30,570
maintain my own custom port century

00:03:28,190 --> 00:03:35,160
maybe some people use them but main

00:03:30,570 --> 00:03:37,730
mainly I think it's just me and ICO I

00:03:35,160 --> 00:03:40,950
authored a tool called Lib hijack

00:03:37,730 --> 00:03:45,000
originally for Linux and I ported it

00:03:40,950 --> 00:03:48,239
over to FreeBSD and spoke about spoke

00:03:45,000 --> 00:03:51,000
about that at last year's bsd can it's a

00:03:48,239 --> 00:03:54,690
tool that makes runtime process

00:03:51,000 --> 00:03:57,470
infection and runtime and injection of

00:03:54,690 --> 00:04:01,380
shellcode and arbitrary shared objects

00:03:57,470 --> 00:04:03,630
extremely easy on linux and freebsd i'm

00:04:01,380 --> 00:04:06,330
the co-founder of the harden bsd project

00:04:03,630 --> 00:04:09,239
i'll be talking more about the OpenBSD

00:04:06,330 --> 00:04:15,390
project at the end of the presentation

00:04:09,239 --> 00:04:18,780
and to to satisfy my lawyers or my

00:04:15,390 --> 00:04:22,400
employers lawyers rather anything that i

00:04:18,780 --> 00:04:24,840
say here any opinions ideas thoughts

00:04:22,400 --> 00:04:28,260
implementations projects that kind of

00:04:24,840 --> 00:04:30,630
stuff they represent me and me only

00:04:28,260 --> 00:04:34,650
well actually i'm representing hardened

00:04:30,630 --> 00:04:38,130
bsd and soldier x soldier X is an online

00:04:34,650 --> 00:04:41,120
security community and of which I'm a

00:04:38,130 --> 00:04:41,120
member and

00:04:41,310 --> 00:04:46,680
nothing but nothing reflects any of my

00:04:43,800 --> 00:04:50,910
previous employers current employers or

00:04:46,680 --> 00:04:53,790
future employers so what we're gonna do

00:04:50,910 --> 00:04:55,200
today is we're gonna we're gonna talk

00:04:53,790 --> 00:04:56,820
we're gonna start out with some

00:04:55,200 --> 00:05:00,150
definitions so we're on the same plane

00:04:56,820 --> 00:05:03,090
level and we're going to go through the

00:05:00,150 --> 00:05:06,450
the history of ASL our thank you to

00:05:03,090 --> 00:05:08,669
Wikipedia University and then we're

00:05:06,450 --> 00:05:12,240
going to talk about what FreeBSD has

00:05:08,669 --> 00:05:16,190
done well in security and we're going to

00:05:12,240 --> 00:05:18,690
talk about what what needs to what

00:05:16,190 --> 00:05:22,860
weaknesses they have and what needs to

00:05:18,690 --> 00:05:24,450
be done further since we're implementing

00:05:22,860 --> 00:05:26,700
were since we're a little bit late to

00:05:24,450 --> 00:05:30,930
the game with ASL are we have the unique

00:05:26,700 --> 00:05:33,270
opportunity to learn from others FreeBSD

00:05:30,930 --> 00:05:36,360
is really the only enterprise operating

00:05:33,270 --> 00:05:38,010
system that does not have a SLR so we

00:05:36,360 --> 00:05:40,889
can take this opportunity to learn from

00:05:38,010 --> 00:05:43,530
others their implementations and some of

00:05:40,889 --> 00:05:47,880
these social and political aspects of

00:05:43,530 --> 00:05:50,430
those implementations as well we're

00:05:47,880 --> 00:05:52,919
gonna talk next about how ace how we've

00:05:50,430 --> 00:05:55,890
implemented a SLR and how to use it on

00:05:52,919 --> 00:05:58,830
FreeBSD then we're gonna talk about

00:05:55,890 --> 00:06:01,110
what's next to do what's left and then

00:05:58,830 --> 00:06:06,600
if time permits because I've only got 45

00:06:01,110 --> 00:06:07,229
minutes a live demo so security what is

00:06:06,600 --> 00:06:10,440
security

00:06:07,229 --> 00:06:15,900
it's what Mount Cox and Sony have in

00:06:10,440 --> 00:06:18,660
common they suck at it really security

00:06:15,900 --> 00:06:21,870
is a never is an onion of it's a ever

00:06:18,660 --> 00:06:25,530
increasing layers of an onion that make

00:06:21,870 --> 00:06:27,570
everyone tear up the more layers of

00:06:25,530 --> 00:06:30,270
security you have the more time it takes

00:06:27,570 --> 00:06:36,330
an attacker to successfully exploit your

00:06:30,270 --> 00:06:39,539
system layers of security are called

00:06:36,330 --> 00:06:41,850
exploit mitigations an exploit

00:06:39,539 --> 00:06:44,940
mitigation is a method or technique used

00:06:41,850 --> 00:06:47,789
to prevent the successful exploitation

00:06:44,940 --> 00:06:50,460
of security vulnerabilities one such

00:06:47,789 --> 00:06:53,340
exploitation mitigation technique is

00:06:50,460 --> 00:06:54,370
called a SLR address space layout

00:06:53,340 --> 00:06:59,860
randomization

00:06:54,370 --> 00:07:02,470
a SLR is it what it does is it

00:06:59,860 --> 00:07:05,620
randomizes the memory layout of a

00:07:02,470 --> 00:07:07,840
program if you don't have a SLR on your

00:07:05,620 --> 00:07:09,520
system or don't have it enabled your

00:07:07,840 --> 00:07:11,919
program is going to tell the operating

00:07:09,520 --> 00:07:15,520
system where it needs to be loaded in

00:07:11,919 --> 00:07:18,070
memory if it's not loaded at that place

00:07:15,520 --> 00:07:21,850
in memory it's going to crash it's not

00:07:18,070 --> 00:07:23,410
gonna work right well what a SLR does is

00:07:21,850 --> 00:07:24,970
it allows the program to tell the

00:07:23,410 --> 00:07:29,169
operating system hey I can be loaded

00:07:24,970 --> 00:07:31,450
anywhere but you know so load me

00:07:29,169 --> 00:07:33,070
anywhere load me in a random spot and

00:07:31,450 --> 00:07:34,960
I'll make do I'll figure out where I am

00:07:33,070 --> 00:07:38,880
I'll figure out where my variables are

00:07:34,960 --> 00:07:42,790
where my functions are and I'll make do

00:07:38,880 --> 00:07:46,300
what a SLR helps protect against is very

00:07:42,790 --> 00:07:49,419
low-level things buffer overflow attacks

00:07:46,300 --> 00:07:55,240
integer overflow attacks your very basic

00:07:49,419 --> 00:07:57,880
in low-level vulnerabilities but it does

00:07:55,240 --> 00:08:01,450
not help protect against higher-level

00:07:57,880 --> 00:08:06,539
vulnerabilities such as miss configuring

00:08:01,450 --> 00:08:11,100
pseudo or PHP lfi or RFI vulnerabilities

00:08:06,539 --> 00:08:11,100
really we're talking at a very low level

00:08:11,460 --> 00:08:18,460
vulnerability here a lot of people get

00:08:15,849 --> 00:08:20,380
mistaken that a SLR is the end-all

00:08:18,460 --> 00:08:23,650
be-all of security that once you have a

00:08:20,380 --> 00:08:26,200
SLR that your system is completely

00:08:23,650 --> 00:08:28,630
secure you don't need anything else well

00:08:26,200 --> 00:08:32,469
that's not the case there are techniques

00:08:28,630 --> 00:08:34,839
to break a SLR so a SLR is not the

00:08:32,469 --> 00:08:37,839
end-all be-all of security but it is a

00:08:34,839 --> 00:08:40,390
good first step it is the good one of

00:08:37,839 --> 00:08:46,420
the first layers that you need to apply

00:08:40,390 --> 00:08:50,529
in creating your onion of security so a

00:08:46,420 --> 00:08:54,850
little bit of history in 2001 the pax

00:08:50,529 --> 00:08:57,640
team created a third-party Linux patch

00:08:54,850 --> 00:09:01,720
to the Linux kernel and this kernel

00:08:57,640 --> 00:09:03,940
implemented among other things a SLR to

00:09:01,720 --> 00:09:06,520
this day the pax patch is still

00:09:03,940 --> 00:09:08,950
distributed as a third-party patch

00:09:06,520 --> 00:09:10,029
so that was 13 years ago a lot has

00:09:08,950 --> 00:09:13,330
changed since then

00:09:10,029 --> 00:09:15,700
in 2004 OpenBSD started their work on

00:09:13,330 --> 00:09:17,920
implementing a SLR they get everything

00:09:15,700 --> 00:09:20,800
except for pi support position

00:09:17,920 --> 00:09:23,820
independent executable support we'll

00:09:20,800 --> 00:09:29,440
talk more in depth about what a PI is

00:09:23,820 --> 00:09:32,140
later on in 2005 Linux did something

00:09:29,440 --> 00:09:34,990
incredibly stupid and they keep doing

00:09:32,140 --> 00:09:38,170
this you know even in 9 years later

00:09:34,990 --> 00:09:41,050
almost 10 they keep doing similar things

00:09:38,170 --> 00:09:42,790
what they did is they they saw app

00:09:41,050 --> 00:09:44,800
access patch and they're like oh that's

00:09:42,790 --> 00:09:47,170
a neat idea well we're gonna rip off

00:09:44,800 --> 00:09:50,200
your work we're gonna dumb it down make

00:09:47,170 --> 00:09:53,890
it less secure and market it as more

00:09:50,200 --> 00:09:57,040
secure there was a lot of politics and a

00:09:53,890 --> 00:10:01,600
lot of drama regarding that patch and

00:09:57,040 --> 00:10:04,240
I'll talk about that later in 2007

00:10:01,600 --> 00:10:11,860
Microsoft introduced a SLR for FreeBSD

00:10:04,240 --> 00:10:14,820
or for Windows Vista their

00:10:11,860 --> 00:10:19,450
implementation sucked for Windows Vista

00:10:14,820 --> 00:10:21,970
they had some technical issues and some

00:10:19,450 --> 00:10:24,790
other big gaping issues that that have

00:10:21,970 --> 00:10:27,399
survived to this day so we'll talk more

00:10:24,790 --> 00:10:30,579
in depth about that later in 2007 Apple

00:10:27,399 --> 00:10:36,070
started working on OS aslr for OS 10 and

00:10:30,579 --> 00:10:39,760
finished it in 2012 in 2008 OpenBSD

00:10:36,070 --> 00:10:43,329
completed their implementation for with

00:10:39,760 --> 00:10:45,430
PI support so that was the technical

00:10:43,329 --> 00:10:47,649
base implementation the technical

00:10:45,430 --> 00:10:51,399
implementation that was required to

00:10:47,649 --> 00:10:53,170
finish it up in 2004 and actually

00:10:51,399 --> 00:10:58,899
Yahoo's this year I believe with open

00:10:53,170 --> 00:11:03,130
BSD e55 so it took them 10 years to go

00:10:58,899 --> 00:11:06,630
from no way SLR to having a salar fully

00:11:03,130 --> 00:11:09,010
enabled for all applications in base and

00:11:06,630 --> 00:11:12,490
that's understandable they had a lot of

00:11:09,010 --> 00:11:15,400
work to do and in fact you can see in

00:11:12,490 --> 00:11:17,290
2014 oliver pint er which i'm

00:11:15,400 --> 00:11:19,530
mispronouncing his name he's from hungry

00:11:17,290 --> 00:11:24,840
and we americans love to

00:11:19,530 --> 00:11:26,910
pronounce names he he and I submitted

00:11:24,840 --> 00:11:31,140
our patch to FreeBSD we've been working

00:11:26,910 --> 00:11:32,910
on it for over a year now and so it's

00:11:31,140 --> 00:11:36,720
going to take us a lot longer to have

00:11:32,910 --> 00:11:40,460
full ASLR on FreeBSD I'm gonna guess

00:11:36,720 --> 00:11:44,640
another few years of work

00:11:40,460 --> 00:11:47,100
so what's FreeBSD has done well in the

00:11:44,640 --> 00:11:49,740
security industry is that they've done a

00:11:47,100 --> 00:11:53,670
lot of policy based policy driven

00:11:49,740 --> 00:11:57,270
security they have the Mac framework in

00:11:53,670 --> 00:11:59,850
capsicum the Mac framework is is really

00:11:57,270 --> 00:12:03,150
awesome really extendable and capsicum

00:11:59,850 --> 00:12:05,640
is a sandboxing framework that you have

00:12:03,150 --> 00:12:08,370
to integrate with in your applications

00:12:05,640 --> 00:12:11,730
a developer needs to integrate within

00:12:08,370 --> 00:12:16,530
his his or her applications they have

00:12:11,730 --> 00:12:21,540
nfsv4 and POSIX ACLs so file system ACLs

00:12:16,530 --> 00:12:24,600
that that drives security policy they

00:12:21,540 --> 00:12:27,540
have secure level which which helps with

00:12:24,600 --> 00:12:30,120
the kernel so that you can't change you

00:12:27,540 --> 00:12:31,800
can only do certain things if if the

00:12:30,120 --> 00:12:35,520
secure level is set you're forbidden

00:12:31,800 --> 00:12:38,100
from doing certain things an audit disti

00:12:35,520 --> 00:12:41,070
which which shares which sends all your

00:12:38,100 --> 00:12:43,290
audit logs off to another server so that

00:12:41,070 --> 00:12:45,660
if an attacker compromises your system

00:12:43,290 --> 00:12:48,480
your audit logs are off on a different

00:12:45,660 --> 00:12:52,670
server that hopefully the attacker can't

00:12:48,480 --> 00:12:55,040
can't get to you can think of

00:12:52,670 --> 00:12:57,839
containerization technologies and

00:12:55,040 --> 00:13:02,130
virtualization technologies as a form of

00:12:57,839 --> 00:13:04,020
policy based security if you don't trust

00:13:02,130 --> 00:13:07,020
your application then chances are you're

00:13:04,020 --> 00:13:13,110
gonna want to run it in a in a container

00:13:07,020 --> 00:13:18,110
or in a virtual environment FreeBSD does

00:13:13,110 --> 00:13:21,620
have two - non policy based security

00:13:18,110 --> 00:13:24,030
technologies one of which is a an

00:13:21,620 --> 00:13:28,320
exploit mitigation technology and that

00:13:24,030 --> 00:13:30,720
is the non exec stack prior to you know

00:13:28,320 --> 00:13:31,560
way back in the day back when left one

00:13:30,720 --> 00:13:35,700
row

00:13:31,560 --> 00:13:40,350
his famous paper smashing the stack for

00:13:35,700 --> 00:13:43,620
fun and profit he you know they

00:13:40,350 --> 00:13:45,360
attackers would store their shellcode on

00:13:43,620 --> 00:13:47,610
the stack and get it to run on the stack

00:13:45,360 --> 00:13:50,160
well it's really popular nowadays for

00:13:47,610 --> 00:13:53,940
for servers to have the stack as

00:13:50,160 --> 00:13:56,160
non-executable so that is an exploit

00:13:53,940 --> 00:13:59,790
mitigation technique that no longer an

00:13:56,160 --> 00:14:02,730
attacker can can store and run their

00:13:59,790 --> 00:14:05,460
shellcode on the stack P trace

00:14:02,730 --> 00:14:07,860
restrictions P trace is awesome I love

00:14:05,460 --> 00:14:12,240
it that's what lib hijack uses pretty

00:14:07,860 --> 00:14:14,550
much makes you god mode in regards to

00:14:12,240 --> 00:14:19,500
exploiting or manipulating other

00:14:14,550 --> 00:14:21,540
processes so what FreeBSD needs to

00:14:19,500 --> 00:14:24,270
improve on is that it needs to enable

00:14:21,540 --> 00:14:27,570
the non exec stack on all architectures

00:14:24,270 --> 00:14:32,430
the non exec stack is only enabled by

00:14:27,570 --> 00:14:36,350
default on AMD 64 and i386 it is not

00:14:32,430 --> 00:14:39,740
enabled and not even functional on arm

00:14:36,350 --> 00:14:41,640
so we need to get it enabled on more

00:14:39,740 --> 00:14:45,210
architectures and working on more

00:14:41,640 --> 00:14:47,310
architectures we need position

00:14:45,210 --> 00:14:50,100
independent support independent

00:14:47,310 --> 00:14:54,510
executable support in base we had a

00:14:50,100 --> 00:14:57,900
patch I had actually committed well I

00:14:54,510 --> 00:15:01,260
didn't commit I had upstream to patch to

00:14:57,900 --> 00:15:03,870
FreeBSD that enabled position

00:15:01,260 --> 00:15:07,020
independent executable support there

00:15:03,870 --> 00:15:10,980
were issues with that patch and later it

00:15:07,020 --> 00:15:14,160
was reverted so we need to revisit that

00:15:10,980 --> 00:15:16,080
Andreea implement it of course there's

00:15:14,160 --> 00:15:18,480
no ASLR in freebsd that's why this

00:15:16,080 --> 00:15:21,750
presentation exists why you're here

00:15:18,480 --> 00:15:24,839
there's another third-party patch to the

00:15:21,750 --> 00:15:27,300
linux kernel that hardens both the linux

00:15:24,839 --> 00:15:31,350
kernel and the and the userland called

00:15:27,300 --> 00:15:36,420
gr security or gr sec for short and my

00:15:31,350 --> 00:15:39,959
end goal is to port all features of gr

00:15:36,420 --> 00:15:42,450
sec to freebsd that meant the one the

00:15:39,959 --> 00:15:44,630
features that make sense for freebsd at

00:15:42,450 --> 00:15:48,540
least

00:15:44,630 --> 00:15:49,950
so we have the opportunity to learn from

00:15:48,540 --> 00:15:54,900
others and we're gonna learn from Linux

00:15:49,950 --> 00:15:56,520
today Linux developers love politics I

00:15:54,900 --> 00:16:01,710
think they love it more than actually

00:15:56,520 --> 00:16:04,890
developing what they did is they took

00:16:01,710 --> 00:16:06,960
paksas patch which is awesome it's 13

00:16:04,890 --> 00:16:09,930
years old and it's undergone a few

00:16:06,960 --> 00:16:12,870
changes over over the past 13 years but

00:16:09,930 --> 00:16:16,290
by and large the underlying technique

00:16:12,870 --> 00:16:17,190
that he is using has has withstood the

00:16:16,290 --> 00:16:21,530
test of time

00:16:17,190 --> 00:16:24,780
well the Linux developers took his patch

00:16:21,530 --> 00:16:25,370
completely ripped it out and dumbed it

00:16:24,780 --> 00:16:28,260
down

00:16:25,370 --> 00:16:31,490
imported their dumbed down and less

00:16:28,260 --> 00:16:35,300
secure version into the Linux kernel and

00:16:31,490 --> 00:16:39,420
then marketed it as more secure I

00:16:35,300 --> 00:16:43,380
remember distinctly all the drama that

00:16:39,420 --> 00:16:45,840
happened with that I was about to leave

00:16:43,380 --> 00:16:48,570
the security industry for the security

00:16:45,840 --> 00:16:50,700
scene for about two years and that had

00:16:48,570 --> 00:16:55,350
just barely gone on right before I left

00:16:50,700 --> 00:16:59,430
and I remember that as if it were day

00:16:55,350 --> 00:17:01,200
and night as if it were yesterday Linux

00:16:59,430 --> 00:17:03,089
is a SLR has weaknesses they're not

00:17:01,200 --> 00:17:05,220
randomizing enough bits and they're not

00:17:03,089 --> 00:17:08,100
run randomizing them in the right way

00:17:05,220 --> 00:17:10,170
and there's only one way you can you can

00:17:08,100 --> 00:17:12,540
if you have a misbehaving application if

00:17:10,170 --> 00:17:15,030
you have a closed source application

00:17:12,540 --> 00:17:16,980
we'll take flash for an example flash

00:17:15,030 --> 00:17:21,569
does work but I'm gonna pick on it

00:17:16,980 --> 00:17:24,300
because I hate it you know if if flash

00:17:21,569 --> 00:17:26,069
were to misbehave under a SLR you would

00:17:24,300 --> 00:17:28,730
have to turn a SLR off for your whole

00:17:26,069 --> 00:17:33,450
system because you wanted to run flash

00:17:28,730 --> 00:17:36,360
that's not okay that means for one

00:17:33,450 --> 00:17:38,700
application you have to remove all

00:17:36,360 --> 00:17:42,030
security in your system well not all but

00:17:38,700 --> 00:17:45,120
you know a good a good important piece

00:17:42,030 --> 00:17:48,510
of security in your system and non-root

00:17:45,120 --> 00:17:51,480
users can disable a SLR for their

00:17:48,510 --> 00:17:55,679
applications all they have to do is call

00:17:51,480 --> 00:17:57,299
fork and set a special personality say

00:17:55,679 --> 00:18:00,179
in this

00:17:57,299 --> 00:18:03,570
newly forked process I don't want to

00:18:00,179 --> 00:18:07,110
randomize my my environment and then

00:18:03,570 --> 00:18:13,369
after so it's fork set the personality

00:18:07,110 --> 00:18:16,499
and then exec ve so that's really stupid

00:18:13,369 --> 00:18:22,950
non-root users should never be able to

00:18:16,499 --> 00:18:25,350
disable a SLR windows so Microsoft today

00:18:22,950 --> 00:18:28,919
with Windows 7 and especially Windows 8

00:18:25,350 --> 00:18:31,590
one has a really good implementation of

00:18:28,919 --> 00:18:34,889
a SLR the randomizing enough bits and

00:18:31,590 --> 00:18:38,179
they are randomizing them in the right

00:18:34,889 --> 00:18:42,119
way but the problem is is that

00:18:38,179 --> 00:18:46,039
individual dll's that that an executable

00:18:42,119 --> 00:18:50,730
might import can have a SLR turned off

00:18:46,039 --> 00:18:52,919
so this was the case with a major

00:18:50,730 --> 00:18:57,539
software vendor whose name I will not

00:18:52,919 --> 00:18:59,639
mention but they are used pretty much

00:18:57,539 --> 00:19:02,249
every day by a lot of people to look at

00:18:59,639 --> 00:19:08,279
documentation and to modify graphics

00:19:02,249 --> 00:19:14,659
files they had shipped within this last

00:19:08,279 --> 00:19:17,070
year one of their one of their

00:19:14,659 --> 00:19:22,710
applications to generate documentation

00:19:17,070 --> 00:19:25,919
and and this application had a SLR

00:19:22,710 --> 00:19:29,940
turned on for the executable itself and

00:19:25,919 --> 00:19:35,190
for all of the dll's it imported except

00:19:29,940 --> 00:19:37,529
for one DLL and because of that one DLL

00:19:35,190 --> 00:19:40,230
so what happens is Windows will load

00:19:37,529 --> 00:19:43,109
that executable with a SLR turned on in

00:19:40,230 --> 00:19:47,369
all of the DLLs with a SLR turned on

00:19:43,109 --> 00:19:50,149
except for that one DLL so it's a SLR

00:19:47,369 --> 00:19:53,129
that one DLL will be loaded in a

00:19:50,149 --> 00:19:59,100
deterministic way that means that the

00:19:53,129 --> 00:20:02,609
attacker is now able to generate exploit

00:19:59,100 --> 00:20:04,919
payloads based off of that one DLL

00:20:02,609 --> 00:20:06,869
because it's loaded in a deterministic

00:20:04,919 --> 00:20:09,210
way every single time that that program

00:20:06,869 --> 00:20:10,090
is loaded up it's going to be loaded at

00:20:09,210 --> 00:20:12,760
the same

00:20:10,090 --> 00:20:15,429
Act address it's gonna be loaded in the

00:20:12,760 --> 00:20:24,700
same exact way every single time even

00:20:15,429 --> 00:20:28,630
across reboots so so that that software

00:20:24,700 --> 00:20:30,610
vendor had had had done that they they

00:20:28,630 --> 00:20:32,830
released their application they add a

00:20:30,610 --> 00:20:36,460
vulnerability in a DLL that was

00:20:32,830 --> 00:20:40,029
randomized that had a SLR turned on but

00:20:36,460 --> 00:20:40,840
because of the one DLL that had a SLR

00:20:40,029 --> 00:20:43,960
turned off

00:20:40,840 --> 00:20:47,669
they were attackers were able to

00:20:43,960 --> 00:20:50,559
successfully exploit their application

00:20:47,669 --> 00:20:54,130
relatively easily they didn't need to do

00:20:50,559 --> 00:20:57,190
any anti mitigation techniques they just

00:20:54,130 --> 00:21:01,510
keyed off of that one DLL and they were

00:20:57,190 --> 00:21:03,340
able to pop a shell fortunately

00:21:01,510 --> 00:21:07,740
Microsoft has this tool called Emmett

00:21:03,340 --> 00:21:11,770
and version five-o was released just a

00:21:07,740 --> 00:21:14,799
just within the past few months Emmett

00:21:11,770 --> 00:21:18,940
is a tool that that makes it so that you

00:21:14,799 --> 00:21:23,649
can force a SLR on and other exploit

00:21:18,940 --> 00:21:26,409
mitigation technology features on all

00:21:23,649 --> 00:21:29,679
the time for even for applications and

00:21:26,409 --> 00:21:31,809
dll's that say I don't support a SLR you

00:21:29,679 --> 00:21:34,049
can still force a SLR to be turned on

00:21:31,809 --> 00:21:38,490
for those applications and dll's

00:21:34,049 --> 00:21:41,140
so that's a really good really great

00:21:38,490 --> 00:21:43,690
product there and it's free and if you

00:21:41,140 --> 00:21:45,429
run Windows I highly recommend as does

00:21:43,690 --> 00:21:49,059
everyone in the security industry I

00:21:45,429 --> 00:21:52,720
highly recommend you run Emmett and you

00:21:49,059 --> 00:21:54,760
run it in enforcing mode but what we

00:21:52,720 --> 00:21:57,880
learned is that a SLR is not the end-all

00:21:54,760 --> 00:22:01,090
be-all of security you know it's it's a

00:21:57,880 --> 00:22:05,559
good first step in exploit mitigation

00:22:01,090 --> 00:22:07,390
technologies you can bypass a SLR using

00:22:05,559 --> 00:22:09,640
techniques called blunt using a

00:22:07,390 --> 00:22:12,070
technique called blind drop it's a

00:22:09,640 --> 00:22:14,740
technique that was published earlier

00:22:12,070 --> 00:22:17,890
this year at the black hat USA

00:22:14,740 --> 00:22:20,770
conference and so it's a relatively new

00:22:17,890 --> 00:22:21,990
technique and it's it's kind of a little

00:22:20,770 --> 00:22:24,270
bit error-prone you have to

00:22:21,990 --> 00:22:26,130
try it a few times your victim

00:22:24,270 --> 00:22:28,230
application your target application

00:22:26,130 --> 00:22:32,940
might crash while you're trying to

00:22:28,230 --> 00:22:37,080
generate dynamically payloads but but

00:22:32,940 --> 00:22:41,640
it's it's a technique nevertheless to to

00:22:37,080 --> 00:22:43,980
to get rid of to bypass a SLR so really

00:22:41,640 --> 00:22:47,700
what we need the thing that we can take

00:22:43,980 --> 00:22:50,040
away from Windows is that we need a

00:22:47,700 --> 00:22:53,730
combination of exploit mitigation

00:22:50,040 --> 00:22:56,270
technologies we're not going to we're

00:22:53,730 --> 00:22:59,100
not going to stop once a SLR is finished

00:22:56,270 --> 00:23:00,809
Oliver and I are not going to stop there

00:22:59,100 --> 00:23:03,120
we're going to continue working on

00:23:00,809 --> 00:23:06,840
adding exploit mitigation technologies

00:23:03,120 --> 00:23:12,270
to FreeBSD and Microsoft has proven that

00:23:06,840 --> 00:23:16,020
that is absolutely required so to

00:23:12,270 --> 00:23:18,710
introduce a SLR in freebsd we support

00:23:16,020 --> 00:23:21,870
all architectures that freebsd supports

00:23:18,710 --> 00:23:23,550
we were kind of limited right now

00:23:21,870 --> 00:23:29,460
because we're doing this out of our own

00:23:23,550 --> 00:23:34,620
pocket and we have of course MD 64 boxes

00:23:29,460 --> 00:23:37,380
in i386 boxes I have a BeagleBone black

00:23:34,620 --> 00:23:41,309
and a Raspberry Pi the BeagleBone black

00:23:37,380 --> 00:23:42,720
was donated to me by soldier X as well

00:23:41,309 --> 00:23:46,710
as a sparc64

00:23:42,720 --> 00:23:48,990
box asa larin arm is broken and I'm

00:23:46,710 --> 00:23:53,309
looking for help from people who know

00:23:48,990 --> 00:23:57,870
arm well if you want to talk to me about

00:23:53,309 --> 00:24:00,420
the arm breakage see me after this

00:23:57,870 --> 00:24:02,160
presentation well see me once the

00:24:00,420 --> 00:24:05,520
conference is over because I want to see

00:24:02,160 --> 00:24:11,190
ad masts talk next about LD B that looks

00:24:05,520 --> 00:24:13,679
really interesting but the arm is broken

00:24:11,190 --> 00:24:16,830
pretty much and it's due to the stack

00:24:13,679 --> 00:24:20,880
it's due to the stack and signal

00:24:16,830 --> 00:24:22,980
delivery we can talk about that more

00:24:20,880 --> 00:24:25,730
later sparc64

00:24:22,980 --> 00:24:28,530
I couldn't get a freebsd head box a

00:24:25,730 --> 00:24:32,880
freebsd 11 current box just vanilla

00:24:28,530 --> 00:24:35,440
running on sparc64 I have an old spark

00:24:32,880 --> 00:24:38,970
box donated to me by the same

00:24:35,440 --> 00:24:44,830
the same people the soldier X community

00:24:38,970 --> 00:24:49,870
and but it's old and I can get freebsd

00:24:44,830 --> 00:24:53,260
the vanilla FreeBSD runnin on it so we

00:24:49,870 --> 00:24:56,830
support exec base randomization for

00:24:53,260 --> 00:24:58,960
position independent executables and we

00:24:56,830 --> 00:25:02,110
support basic address layout

00:24:58,960 --> 00:25:06,850
randomization for executables that

00:25:02,110 --> 00:25:11,320
aren't compiled as a PI and we support

00:25:06,850 --> 00:25:14,980
per gel a SLR settings so what a PI is a

00:25:11,320 --> 00:25:17,679
position independent executable is it's

00:25:14,980 --> 00:25:19,390
it's an application that is compiled in

00:25:17,679 --> 00:25:21,250
such a way that it can it tells the

00:25:19,390 --> 00:25:23,880
operating system that I can be that it

00:25:21,250 --> 00:25:26,559
can be load loaded anywhere in memory

00:25:23,880 --> 00:25:28,059
traditionally your application will tell

00:25:26,559 --> 00:25:30,730
the operating system like I said before

00:25:28,059 --> 00:25:33,610
that the that it expects be loaded at a

00:25:30,730 --> 00:25:37,809
certain place and that is due to how the

00:25:33,610 --> 00:25:41,650
elf file format works there's nothing we

00:25:37,809 --> 00:25:45,360
can do to change the elf specification

00:25:41,650 --> 00:25:50,740
that was created a long time ago by Sun

00:25:45,360 --> 00:25:55,000
over 20 years ago I believe and so so

00:25:50,740 --> 00:25:57,760
you in order to make full in order to

00:25:55,000 --> 00:26:00,250
make full utilization of a SLR you have

00:25:57,760 --> 00:26:03,370
to compile your application as a PI as a

00:26:00,250 --> 00:26:06,570
position independent executable we have

00:26:03,370 --> 00:26:09,400
the reverse problem that Microsoft has

00:26:06,570 --> 00:26:12,659
Microsoft has a problem where individual

00:26:09,400 --> 00:26:16,570
exe or dll's might have a SLR turned off

00:26:12,659 --> 00:26:19,630
we have the problem of an application

00:26:16,570 --> 00:26:21,760
itself might have a SLR turned off but

00:26:19,630 --> 00:26:25,450
it's shared objects that it depends on

00:26:21,760 --> 00:26:30,429
or its dll's so to speak that it depends

00:26:25,450 --> 00:26:33,130
on will have a SLR turned on and we

00:26:30,429 --> 00:26:36,220
can't there's no way that we can turn a

00:26:33,130 --> 00:26:38,080
SLR off for individual shared objects

00:26:36,220 --> 00:26:41,350
and that's because of how the elf spec

00:26:38,080 --> 00:26:46,570
works how the elf file format works and

00:26:41,350 --> 00:26:48,610
that works out in our fame favor so when

00:26:46,570 --> 00:26:49,120
you when you compile your what you have

00:26:48,610 --> 00:26:51,450
to do is

00:26:49,120 --> 00:26:57,970
to compile your kernel with a custom

00:26:51,450 --> 00:27:01,960
option the packs a SLR option and when

00:26:57,970 --> 00:27:06,460
you you when you do that you'll have

00:27:01,960 --> 00:27:09,130
these these knobs these tunable z' that

00:27:06,460 --> 00:27:13,180
you can tune at boot time via bootloader

00:27:09,130 --> 00:27:17,590
comp and and this is actually defaulted

00:27:13,180 --> 00:27:20,290
to two now rather than one in our

00:27:17,590 --> 00:27:23,679
implementation and when you look at the

00:27:20,290 --> 00:27:27,610
help when you look at the help for those

00:27:23,679 --> 00:27:29,740
tunable z' you'll see why it's zero one

00:27:27,610 --> 00:27:32,590
two and three there's different things

00:27:29,740 --> 00:27:35,160
that you can set so the status sets

00:27:32,590 --> 00:27:37,860
whether it's whether it's enabled

00:27:35,160 --> 00:27:40,390
whether you want a cell are enabled

00:27:37,860 --> 00:27:44,910
debug is self-explanatory

00:27:40,390 --> 00:27:47,230
the n Maplin that's how many bits of of

00:27:44,910 --> 00:27:50,500
address space are we going to randomize

00:27:47,230 --> 00:27:52,330
when m map is called the stack length is

00:27:50,500 --> 00:27:54,790
the same thing so for the stack how many

00:27:52,330 --> 00:27:57,190
bits of the stack are we going to over

00:27:54,790 --> 00:28:01,420
you know randomized and the exact base

00:27:57,190 --> 00:28:03,670
the exact len is how many bits are we

00:28:01,420 --> 00:28:05,830
going to randomize of the exact base of

00:28:03,670 --> 00:28:07,330
the position independent executable

00:28:05,830 --> 00:28:11,220
where that position independent

00:28:07,330 --> 00:28:14,290
executable the base of where it's loaded

00:28:11,220 --> 00:28:16,300
so what happens when an applicant when

00:28:14,290 --> 00:28:18,610
you have an application that doesn't

00:28:16,300 --> 00:28:21,850
support a SLR it crashes or it

00:28:18,610 --> 00:28:24,309
misbehaves it exhibits bugs well what

00:28:21,850 --> 00:28:27,790
you can do is you can jail it you can

00:28:24,309 --> 00:28:33,460
you can set you can put that application

00:28:27,790 --> 00:28:36,760
inside of a jail and and have a SLR

00:28:33,460 --> 00:28:39,690
turned off just for that jail so you

00:28:36,760 --> 00:28:42,940
have a SLR turned on for everything else

00:28:39,690 --> 00:28:45,910
but except for that application or

00:28:42,940 --> 00:28:50,350
applications in that jail that don't

00:28:45,910 --> 00:28:52,540
support a SLR and that's how we we

00:28:50,350 --> 00:28:56,740
learned from Linux that we don't want

00:28:52,540 --> 00:28:58,920
one knob to rule them all we want to be

00:28:56,740 --> 00:29:03,450
able to be flexible in

00:28:58,920 --> 00:29:07,550
and support having security mitigation

00:29:03,450 --> 00:29:07,550
techniques exploit mitigation techniques

00:29:07,670 --> 00:29:16,020
be enforceable on a per gels basis so

00:29:13,350 --> 00:29:18,740
what we do is there's there's a few

00:29:16,020 --> 00:29:22,770
different ways you can implement a SLR

00:29:18,740 --> 00:29:26,730
you can either sacrifice a lot of

00:29:22,770 --> 00:29:31,680
performance and and have an extremely

00:29:26,730 --> 00:29:35,970
secure version of a SLR implementation

00:29:31,680 --> 00:29:38,790
of a SLR or you can you can sacrifice a

00:29:35,970 --> 00:29:42,840
little bit of security for performance

00:29:38,790 --> 00:29:46,740
for a lot of performance and what we did

00:29:42,840 --> 00:29:49,560
is we took paksas patch or we looked at

00:29:46,740 --> 00:29:52,140
his documentation and we went the

00:29:49,560 --> 00:29:55,940
performance route which is the route

00:29:52,140 --> 00:30:00,900
that he goes with that has withstood the

00:29:55,940 --> 00:30:03,360
the past 13 years so what we do is we

00:30:00,900 --> 00:30:06,570
use Delta's we have calculated what we

00:30:03,360 --> 00:30:09,150
do is we when a process executes we

00:30:06,570 --> 00:30:12,390
generate three different Delta's which

00:30:09,150 --> 00:30:15,450
you saw from those knobs the M map Delta

00:30:12,390 --> 00:30:18,780
the stack Delta and the exact base Delta

00:30:15,450 --> 00:30:20,760
and so these deltas are applied in

00:30:18,780 --> 00:30:23,730
different places so these deltas are

00:30:20,760 --> 00:30:27,990
calculated once and any time you call em

00:30:23,730 --> 00:30:30,450
map in in a specific way the Delta is

00:30:27,990 --> 00:30:32,190
applied so we're not consistently for

00:30:30,450 --> 00:30:33,810
every single mapping we're not

00:30:32,190 --> 00:30:36,030
consistently calling into the

00:30:33,810 --> 00:30:39,300
pseudo-random number generator that is

00:30:36,030 --> 00:30:41,820
one way to do it but that is that would

00:30:39,300 --> 00:30:44,780
cause major issues with performance your

00:30:41,820 --> 00:30:48,570
your computer would slow down to a crawl

00:30:44,780 --> 00:30:51,240
so using those deltas helps us with

00:30:48,570 --> 00:30:55,530
performance and we don't we do lose a

00:30:51,240 --> 00:31:03,810
little bit of security there but it's

00:30:55,530 --> 00:31:05,910
negligible so paksas implementation does

00:31:03,810 --> 00:31:08,580
the same thing and it hasn't been

00:31:05,910 --> 00:31:10,740
defeated yet other than you know blind

00:31:08,580 --> 00:31:12,179
drop is a technique to defeat a SLR

00:31:10,740 --> 00:31:14,090
there's no real way to

00:31:12,179 --> 00:31:16,919
defend against that except through other

00:31:14,090 --> 00:31:22,440
other completely different mitigation

00:31:16,919 --> 00:31:24,389
techniques so the one of the problems

00:31:22,440 --> 00:31:27,059
with position independent executables is

00:31:24,389 --> 00:31:31,350
that they set their exec base in their

00:31:27,059 --> 00:31:32,850
headers to a null so what happens is

00:31:31,350 --> 00:31:37,799
when you're when you're calculating this

00:31:32,850 --> 00:31:41,279
Delta zero is a completely valid random

00:31:37,799 --> 00:31:45,149
number and so our implementation

00:31:41,279 --> 00:31:54,570
guarantees that null will never ever

00:31:45,149 --> 00:31:57,840
ever be used as the exec base so so so

00:31:54,570 --> 00:32:02,309
we guarantee that no mappings will never

00:31:57,840 --> 00:32:04,980
be reached and so what we're gonna once

00:32:02,309 --> 00:32:07,769
we have this ASLR in the base system

00:32:04,980 --> 00:32:12,299
once it's been fully up streamed we're

00:32:07,769 --> 00:32:17,549
gonna next work on reworking that pi

00:32:12,299 --> 00:32:19,769
support that we that we that we had

00:32:17,549 --> 00:32:24,450
committed and reverted before we're

00:32:19,769 --> 00:32:26,820
gonna rework that and redevelop that so

00:32:24,450 --> 00:32:28,379
how to use it first first of all you

00:32:26,820 --> 00:32:31,860
compile your kernels so you need a

00:32:28,379 --> 00:32:34,200
custom kernel and you have to compile it

00:32:31,860 --> 00:32:37,860
with the PAC's aslr option by default

00:32:34,200 --> 00:32:40,019
because this is because ASLR touches a

00:32:37,860 --> 00:32:42,360
whole lot of different places in a Linux

00:32:40,019 --> 00:32:47,639
kernel and especially since it's per

00:32:42,360 --> 00:32:52,440
jail we have decided to make it opt in

00:32:47,639 --> 00:32:54,360
by default so you have to you well not

00:32:52,440 --> 00:32:56,789
often you have to compile a custom

00:32:54,360 --> 00:33:01,379
kernel it is disabled by default in the

00:32:56,789 --> 00:33:05,009
generic kernel once you do that you'll

00:33:01,379 --> 00:33:07,889
get this you'll get the tunable x' that

00:33:05,009 --> 00:33:09,600
are set via the bootloader kampf so if

00:33:07,889 --> 00:33:12,299
you need to change these tunable x' you

00:33:09,600 --> 00:33:14,159
have to reboot which is really good if

00:33:12,299 --> 00:33:16,049
you're you know if you know if you're an

00:33:14,159 --> 00:33:18,929
attacker and you want to turn a SLR off

00:33:16,049 --> 00:33:22,320
you have to reboot which is probably

00:33:18,929 --> 00:33:24,779
going to cause Nagios to to yell at the

00:33:22,320 --> 00:33:25,530
system administrative team the DevOps

00:33:24,779 --> 00:33:27,630
team

00:33:25,530 --> 00:33:34,320
it's gonna set off flags on the network

00:33:27,630 --> 00:33:37,260
and there is another kernel option the

00:33:34,320 --> 00:33:41,900
packs tiel's option that allows

00:33:37,260 --> 00:33:45,150
you to have these these knobs exposed

00:33:41,900 --> 00:33:50,640
while during runtime so you don't have

00:33:45,150 --> 00:33:52,770
to reboot but it is less secure so when

00:33:50,640 --> 00:33:58,920
you do compile your kernel with the

00:33:52,770 --> 00:34:01,260
packs aslr option you have to it is

00:33:58,920 --> 00:34:05,070
enabled by default so aslr will be

00:34:01,260 --> 00:34:07,770
enabled by default and child jails will

00:34:05,070 --> 00:34:10,530
inherit the parent parent jail settings

00:34:07,770 --> 00:34:13,320
so you know how you can have multiple

00:34:10,530 --> 00:34:16,230
levels of jails where a jail a jail

00:34:13,320 --> 00:34:18,090
might have a child jail the child jail

00:34:16,230 --> 00:34:20,640
will inherit the parent jail settings so

00:34:18,090 --> 00:34:23,159
if you have a Salar turned off in the

00:34:20,640 --> 00:34:25,620
parent jail then when you boot or when

00:34:23,159 --> 00:34:31,380
you start this the child jail it will

00:34:25,620 --> 00:34:33,929
start with a SL are turned off so to to

00:34:31,380 --> 00:34:35,790
add support for applications to be

00:34:33,929 --> 00:34:38,760
compiled as a PI you have to compile

00:34:35,790 --> 00:34:42,600
them with certain flags the C flag that

00:34:38,760 --> 00:34:46,290
you compile with is - f pi all one word

00:34:42,600 --> 00:34:50,220
and the pi is capitalized the LD flag

00:34:46,290 --> 00:34:52,610
that you have to set is - PI with PI all

00:34:50,220 --> 00:34:58,830
lowercase

00:34:52,610 --> 00:35:03,690
so our SLR implementation is is just a

00:34:58,830 --> 00:35:07,740
very basic implementation as far as what

00:35:03,690 --> 00:35:10,020
as far as how far along it is I am

00:35:07,740 --> 00:35:14,160
currently researching how to randomize

00:35:10,020 --> 00:35:17,520
PS strings and the video so that's going

00:35:14,160 --> 00:35:21,330
to take a lot of work and changing and

00:35:17,520 --> 00:35:24,450
randomizing PS strings might break ABI

00:35:21,330 --> 00:35:26,460
and API there is potential for that I'm

00:35:24,450 --> 00:35:29,040
still researching it but there is

00:35:26,460 --> 00:35:32,900
potential for that it's a major change

00:35:29,040 --> 00:35:32,900
and it needs to happen otherwise

00:35:33,020 --> 00:35:40,250
otherwise that ASLR implementation won't

00:35:36,510 --> 00:35:40,250
be 100%

00:35:40,950 --> 00:35:46,840
the VDS Oh needs to be randomized as

00:35:43,720 --> 00:35:49,990
well because even though it's tiny you

00:35:46,840 --> 00:35:53,590
can still generate maybe a couple a few

00:35:49,990 --> 00:35:57,520
ROC gadgets out of it

00:35:53,590 --> 00:36:00,820
and one thing that OpenBSD does that I

00:35:57,520 --> 00:36:08,790
really like is that they randomize the

00:36:00,820 --> 00:36:14,070
order of loading shared objects so so I

00:36:08,790 --> 00:36:18,760
really like that I need help with arm I

00:36:14,070 --> 00:36:22,030
am kind of a busy guy so I've been

00:36:18,760 --> 00:36:25,510
trying to learn arm in my spare time but

00:36:22,030 --> 00:36:27,940
my spare time is limited so I haven't

00:36:25,510 --> 00:36:29,890
been able to fix the bug I know what's

00:36:27,940 --> 00:36:33,250
going I know the symptoms but I don't

00:36:29,890 --> 00:36:35,620
know the cause we need a lot more people

00:36:33,250 --> 00:36:38,290
to test this I've done a few call calls

00:36:35,620 --> 00:36:40,150
for testing on the mailing lists and

00:36:38,290 --> 00:36:43,270
we've gotten some good feedback

00:36:40,150 --> 00:36:46,540
I've been running our ASLR patches in

00:36:43,270 --> 00:36:50,830
production for over a year now and I

00:36:46,540 --> 00:36:53,680
have had zero hiccups zero problems so

00:36:50,830 --> 00:36:57,160
we are at a stable point and we have a

00:36:53,680 --> 00:36:59,620
nightly cron job that makes sure that it

00:36:57,160 --> 00:37:04,810
merges still that our work still merges

00:36:59,620 --> 00:37:08,050
in successfully with FreeBSD head and of

00:37:04,810 --> 00:37:11,530
course once a SLR is completed and Pi is

00:37:08,050 --> 00:37:15,970
completed we're going to work on porting

00:37:11,530 --> 00:37:19,230
over more gr ii packs features so the

00:37:15,970 --> 00:37:24,100
hardened bsd project we Oliver and I

00:37:19,230 --> 00:37:26,530
started this we we put in some of the

00:37:24,100 --> 00:37:28,800
foundations of it last late last year

00:37:26,530 --> 00:37:33,190
and we made it official

00:37:28,800 --> 00:37:36,340
just a month or so ago the hardened BSD

00:37:33,190 --> 00:37:41,080
project is a fork of FreeBSD and it's

00:37:36,340 --> 00:37:43,750
pretty much it aims its goal is to serve

00:37:41,080 --> 00:37:46,440
as mainly just a staging area for us to

00:37:43,750 --> 00:37:50,230
do our development of these security

00:37:46,440 --> 00:37:52,120
projects and and have just a place to

00:37:50,230 --> 00:37:55,390
wait for these patches before

00:37:52,120 --> 00:37:56,920
or their fully merged upstream now take

00:37:55,390 --> 00:37:58,660
that with a grain of salt because there

00:37:56,920 --> 00:38:01,270
are some things that we aren't we are

00:37:58,660 --> 00:38:04,390
not going to upstream there are some

00:38:01,270 --> 00:38:06,670
changes that we just it just doesn't

00:38:04,390 --> 00:38:08,950
seem like a good fit for the FreeBSD

00:38:06,670 --> 00:38:14,590
project as a whole but does seem like a

00:38:08,950 --> 00:38:16,330
good fit for hardened BSD so we've

00:38:14,590 --> 00:38:21,130
already implemented one change and that

00:38:16,330 --> 00:38:25,720
is a CTL a knob that allows you to

00:38:21,130 --> 00:38:31,360
disable the map 32-bit functionality for

00:38:25,720 --> 00:38:38,530
AMD 64 because that that can be used and

00:38:31,360 --> 00:38:42,730
miss and and abused to to in may cause

00:38:38,530 --> 00:38:44,440
some security vulnerabilities we are

00:38:42,730 --> 00:38:47,440
slowly becoming a more complete

00:38:44,440 --> 00:38:49,230
downstream distribution of FreeBSD we're

00:38:47,440 --> 00:38:51,970
working on getting an automated build

00:38:49,230 --> 00:38:56,610
infrastructure we're about 90 percent

00:38:51,970 --> 00:39:02,140
complete there and and we're working on

00:38:56,610 --> 00:39:07,600
doing weekly puja air builds and nightly

00:39:02,140 --> 00:39:11,200
builds of head so we have five

00:39:07,600 --> 00:39:15,730
developers and three of them are active

00:39:11,200 --> 00:39:21,660
daily that would be me Oliver and and

00:39:15,730 --> 00:39:24,550
david carly a who is in france so

00:39:21,660 --> 00:39:29,620
hardened bsd is coming along great we

00:39:24,550 --> 00:39:34,810
have we we have cha-cha now implemented

00:39:29,620 --> 00:39:37,840
like like what tom was a talked ed like

00:39:34,810 --> 00:39:42,150
what ted was talking about or not Ted

00:39:37,840 --> 00:39:44,620
Theo Theo was the one talking about it

00:39:42,150 --> 00:39:48,700
sorry too many things going on in my

00:39:44,620 --> 00:39:51,040
brain right now Theo was talking about

00:39:48,700 --> 00:39:53,110
cha-cha on how they replaced their arc

00:39:51,040 --> 00:39:59,110
for implementation with cha-cha we've

00:39:53,110 --> 00:40:01,030
done the same but for FreeBSD so we are

00:39:59,110 --> 00:40:03,550
active daily we're doing a lot of things

00:40:01,030 --> 00:40:05,789
we've gotten quite a few patches up

00:40:03,550 --> 00:40:09,069
streamed already to FreeBSD

00:40:05,789 --> 00:40:12,869
David Carley a has has been doing great

00:40:09,069 --> 00:40:17,230
work in in getting his work up streamed

00:40:12,869 --> 00:40:21,059
so I want to say special thank you to

00:40:17,230 --> 00:40:24,069
Oliver painter who's been an amazing

00:40:21,059 --> 00:40:27,339
person to work with he's the co-founder

00:40:24,069 --> 00:40:31,539
with me on the hardened BSD project an

00:40:27,339 --> 00:40:33,309
inactive developer and he was the work

00:40:31,539 --> 00:40:35,770
the person that originally started

00:40:33,309 --> 00:40:38,619
developing a SLR for FreeBSD and I

00:40:35,770 --> 00:40:41,819
helped I came in a little bit late to

00:40:38,619 --> 00:40:45,190
the project and added cool new things

00:40:41,819 --> 00:40:48,130
and Nilo isn't one of the other

00:40:45,190 --> 00:40:50,230
developers for hardened BSD he has been

00:40:48,130 --> 00:40:54,700
working on another exploit mitigation

00:40:50,230 --> 00:40:58,150
technology called sake V guard and Ryan

00:40:54,700 --> 00:41:01,660
Steinmetz he's on the ports team he's

00:40:58,150 --> 00:41:04,950
one of my co-workers at Cisco and he had

00:41:01,660 --> 00:41:07,480
some really great ideas for adding for

00:41:04,950 --> 00:41:10,480
integrating PI support into the port's

00:41:07,480 --> 00:41:13,119
framework which I have not done yet but

00:41:10,480 --> 00:41:15,789
he has some really awesome ideas there

00:41:13,119 --> 00:41:20,770
I'm gonna murder this name since I'm

00:41:15,789 --> 00:41:23,190
American but yo.hannes Mex nur he

00:41:20,770 --> 00:41:28,109
convinced me to do some stuff about

00:41:23,190 --> 00:41:31,420
about publicizing the ASLR project and

00:41:28,109 --> 00:41:36,730
for anti soldier X for donating hardware

00:41:31,420 --> 00:41:39,420
and and so thank you very much do we

00:41:36,730 --> 00:41:39,420
have any questions

00:41:46,089 --> 00:41:51,890
all right well thank you very much for

00:41:48,589 --> 00:41:55,299
for coming to my presentation I really

00:41:51,890 --> 00:41:55,299
really appreciate it

00:42:00,170 --> 00:42:06,989
mice my slides are up on github so

00:42:04,140 --> 00:42:11,160
they're just a text file that you can

00:42:06,989 --> 00:42:12,989
read with any text editor so go ahead

00:42:11,160 --> 00:42:16,140
and visit my github if you want slides

00:42:12,989 --> 00:42:17,999
there's references for some of the

00:42:16,140 --> 00:42:20,720
vulnerabilities and weaknesses and

00:42:17,999 --> 00:42:27,140
different implementations base

00:42:20,720 --> 00:42:27,140

YouTube URL: https://www.youtube.com/watch?v=2lon3X3__5o


