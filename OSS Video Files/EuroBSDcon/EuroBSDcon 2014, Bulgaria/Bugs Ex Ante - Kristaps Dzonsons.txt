Title: Bugs Ex Ante - Kristaps Dzonsons
Publication date: 2019-10-13
Playlist: EuroBSDcon 2014, Bulgaria
Description: 
	Abstract:

Application sandboxes allow developers to take an unusual stance: not that our systems will be bug-free, and that bugs should be considered the corner-case; but that in fact there will be bugs, bugs as the rule, bugs that will be exploited in the messiest, ugliest way.(I won’t mention current events. But we’ll know what they are…)For this talk, I propose speaking about the design of a CGI framework that assumes exactly that: that its network-touching components will be exploited.After all, CGI frameworks have a celestially vast attack surface: URL query strings; cookies and HTTP headers; and beneath and beyond it all, form parsing. Combine these attack vectors with validation–at best validation of simple types, and then more terrifyingly (and normally) via external libraries such as libpng.In reviewing CGI frameworks in C for some recent work, I noticed less a lack of security focus than a parade committee for exploits. Even given my own small demands for CGI security, I was led to asked myself: can I do better than this?The topic would necessarily focus on available sandbox techniques (e.g., systrace, Capsicum) and their practical pros and cons (portability, ease of implementation, documentation, etc.). After all, if we make mistakes in deploying our sandbox, it’s just more ticker-tape for the parade.The CGI framework in question, kcgi, is one I use for my own small purposes. Obviously it’s ISC-licensed, well-documented C code, and will be mentioned as little as possible beyond as an exemplar of how easy (or hard!) it can be to write portable sandboxes. In short, this isn’t about kcgi, but about systrace, Capsicum, Darwin’s sandbox, and so on.

Speaker biography:

Most of my open-source work focusses on UNIX documentation, e.g., the mandoc suite (now captained by schwarze@) and its constellation of related tools, such as pod2mdoc, docbook2mdoc, etc. Earlier work focussed more on security, from the experimental mult kernel container on OpenBSD and NetBSD to sysjail. In general, I dislike computers and enjoy the sea.
Captions: 
	00:00:01,460 --> 00:00:04,620
welcome to the final day of your abuse

00:00:03,929 --> 00:00:07,589
econ

00:00:04,620 --> 00:00:16,350
2014 our speaker today is Chris

00:00:07,589 --> 00:00:19,350
Johnson's well obesity for years so I am

00:00:16,350 --> 00:00:21,600
this ups this talk is actually about

00:00:19,350 --> 00:00:24,890
security so what I thought we'd start

00:00:21,600 --> 00:00:27,510
with is how many people are developers

00:00:24,890 --> 00:00:29,130
like actively develop software

00:00:27,510 --> 00:00:31,380
all right just out of curiosity of the

00:00:29,130 --> 00:00:34,290
active development and louder of

00:00:31,380 --> 00:00:35,550
software how many people do software

00:00:34,290 --> 00:00:39,540
that you would consider security

00:00:35,550 --> 00:00:41,160
sensitive everybody should be raising

00:00:39,540 --> 00:00:43,860
our hands that's the moral of the story

00:00:41,160 --> 00:00:47,370
who has users of their software that's a

00:00:43,860 --> 00:00:49,620
better question right all right so

00:00:47,370 --> 00:00:52,039
security is a problem okay so who want

00:00:49,620 --> 00:00:55,680
to see teeters talk yesterday about

00:00:52,039 --> 00:00:57,980
security as well all right so we're all

00:00:55,680 --> 00:01:00,180
thinking about that hopefully more now

00:00:57,980 --> 00:01:05,580
given the last few months and what's

00:01:00,180 --> 00:01:07,229
happened and before anyway so I just

00:01:05,580 --> 00:01:09,780
wanted to start by laying out a few

00:01:07,229 --> 00:01:13,140
assumptions or you know the situation in

00:01:09,780 --> 00:01:14,490
general and which I think applies to all

00:01:13,140 --> 00:01:16,470
of us right now is number one is that

00:01:14,490 --> 00:01:17,930
you develop software and if you don't

00:01:16,470 --> 00:01:19,830
pretend that you develop software and

00:01:17,930 --> 00:01:21,330
number two is that people use your

00:01:19,830 --> 00:01:23,369
software if people don't use your

00:01:21,330 --> 00:01:23,729
software you know you're you're in a

00:01:23,369 --> 00:01:26,490
bubble

00:01:23,729 --> 00:01:29,520
so it doesn't really matter a security

00:01:26,490 --> 00:01:31,890
per se but this is usually the case for

00:01:29,520 --> 00:01:34,320
most of us and if we think about this we

00:01:31,890 --> 00:01:37,170
can really change this around to say

00:01:34,320 --> 00:01:38,909
something like this basically that the

00:01:37,170 --> 00:01:42,000
software you write probably has mistakes

00:01:38,909 --> 00:01:44,000
in it and that if people can use that

00:01:42,000 --> 00:01:48,149
then they're probably going to be

00:01:44,000 --> 00:01:50,850
financially you know going for the

00:01:48,149 --> 00:01:52,920
actual resources around your system so

00:01:50,850 --> 00:01:54,030
another question I could ask now is who

00:01:52,920 --> 00:02:00,540
has written software that has been

00:01:54,030 --> 00:02:01,950
exploited in some fashion more of you

00:02:00,540 --> 00:02:04,500
should be raising your hands you

00:02:01,950 --> 00:02:06,180
probably just don't even know it yet so

00:02:04,500 --> 00:02:09,530
who is administered systems that have

00:02:06,180 --> 00:02:09,530
software that has been exploited

00:02:12,180 --> 00:02:16,990
okay so so so already you know there's

00:02:15,220 --> 00:02:18,760
some mistakes other questions

00:02:16,990 --> 00:02:25,330
who is written software that's never had

00:02:18,760 --> 00:02:27,880
a bug in it all right who absolutely has

00:02:25,330 --> 00:02:29,770
bugs in their software right now if

00:02:27,880 --> 00:02:31,660
you're not raising your hands and that

00:02:29,770 --> 00:02:38,620
doesn't make any sense because you you

00:02:31,660 --> 00:02:40,930
know yeah ah all right so who probably

00:02:38,620 --> 00:02:43,690
whose self we're probably has bugs I

00:02:40,930 --> 00:02:45,430
mean pretty much everybody writes so the

00:02:43,690 --> 00:02:48,280
question being if you haven't found the

00:02:45,430 --> 00:02:49,750
bugs yet somebody is going to and when

00:02:48,280 --> 00:02:51,700
you fix it you're probably going to

00:02:49,750 --> 00:02:53,950
introduce new bugs that another person

00:02:51,700 --> 00:02:56,290
is gonna find so basically no matter

00:02:53,950 --> 00:02:57,550
what's and one of the best intentions of

00:02:56,290 --> 00:02:59,680
all of us and you know generally

00:02:57,550 --> 00:03:01,750
generally the intentions that are quite

00:02:59,680 --> 00:03:03,790
good we are gonna have bugs in our

00:03:01,750 --> 00:03:05,920
software and that's what this talk is

00:03:03,790 --> 00:03:07,300
about not so much writing perfect

00:03:05,920 --> 00:03:10,690
software because it's never gonna happen

00:03:07,300 --> 00:03:12,160
especially when somebody like me or you

00:03:10,690 --> 00:03:14,470
know other normal people are writing

00:03:12,160 --> 00:03:16,570
software we're not super geniuses it's

00:03:14,470 --> 00:03:18,430
gonna be broken so the question is what

00:03:16,570 --> 00:03:20,440
do we do about that you know how do we

00:03:18,430 --> 00:03:22,600
accommodate for the fact the software we

00:03:20,440 --> 00:03:23,980
write is gonna be broken and people that

00:03:22,600 --> 00:03:26,200
are using it are going to use that

00:03:23,980 --> 00:03:28,300
brokenness to take advantage of it and

00:03:26,200 --> 00:03:32,200
and get to the underlying system

00:03:28,300 --> 00:03:35,220
resources so that's my talk is bugs

00:03:32,200 --> 00:03:37,530
ex-ante exactly being a Latin term for

00:03:35,220 --> 00:03:39,760
from before

00:03:37,530 --> 00:03:42,550
meaning bugs already exist in your

00:03:39,760 --> 00:03:44,230
system right now so you know how many

00:03:42,550 --> 00:03:46,860
people are running software that they

00:03:44,230 --> 00:03:49,060
wrote on the network on the Internet

00:03:46,860 --> 00:03:50,410
so these are the same people who are

00:03:49,060 --> 00:03:52,470
raising their hands when they said that

00:03:50,410 --> 00:03:55,750
their software certainly has bugs in it

00:03:52,470 --> 00:03:59,290
that's a little scary of course that's

00:03:55,750 --> 00:04:01,540
exactly what we should all expect and

00:03:59,290 --> 00:04:03,880
the kind of theme of this talk is how to

00:04:01,540 --> 00:04:05,560
protect the system resources meaning the

00:04:03,880 --> 00:04:07,209
machine that your software is running on

00:04:05,560 --> 00:04:10,300
from the weakest link of the whole

00:04:07,209 --> 00:04:12,250
system which is you I mean you're making

00:04:10,300 --> 00:04:13,720
mistakes there in your software and if

00:04:12,250 --> 00:04:15,550
you're not making the mistakes which you

00:04:13,720 --> 00:04:17,169
probably are it might be in a third

00:04:15,550 --> 00:04:19,419
party library which you might be using

00:04:17,169 --> 00:04:22,090
voluntarily or might just be there like

00:04:19,419 --> 00:04:22,730
in Ceylon Lipsy which is just there you

00:04:22,090 --> 00:04:25,790
can't do any

00:04:22,730 --> 00:04:28,790
about it so there are mistakes and what

00:04:25,790 --> 00:04:31,370
do we do about it so this is due to an

00:04:28,790 --> 00:04:33,200
attacker which is this lovely dog right

00:04:31,370 --> 00:04:34,880
here this is what the system looks like

00:04:33,200 --> 00:04:37,040
this is nice little kitty right here it

00:04:34,880 --> 00:04:39,500
looks like true love but it's more of an

00:04:37,040 --> 00:04:42,350
appetite thing your software is this

00:04:39,500 --> 00:04:44,150
thin sheet of glass right there but

00:04:42,350 --> 00:04:46,580
that's all it is that's just you know

00:04:44,150 --> 00:04:48,800
the dog is there it's looking in on you

00:04:46,580 --> 00:04:53,240
and you are the glass in this particular

00:04:48,800 --> 00:04:55,400
image right there yes a little scary so

00:04:53,240 --> 00:04:57,470
what can we do about this you know this

00:04:55,400 --> 00:04:59,630
is not really the the aim of this talk

00:04:57,470 --> 00:05:01,670
but I thought I'd bring it up anyway now

00:04:59,630 --> 00:05:03,590
we can do things like write defensive

00:05:01,670 --> 00:05:04,910
code which doesn't really have much of a

00:05:03,590 --> 00:05:07,220
meaning to it but we'll get to it later

00:05:04,910 --> 00:05:10,610
now we can use auditors auditors are

00:05:07,220 --> 00:05:13,220
greats QA flush out or bugs right use

00:05:10,610 --> 00:05:14,330
up-to-date audited libraries and you can

00:05:13,220 --> 00:05:15,950
see this is getting a little ridiculous

00:05:14,330 --> 00:05:17,240
a language with formal underpinnings

00:05:15,950 --> 00:05:19,850
who's ever done that who has ever

00:05:17,240 --> 00:05:21,740
written a program that actually has a

00:05:19,850 --> 00:05:24,650
formal underpinning that you can do

00:05:21,740 --> 00:05:27,800
proofs that's two people now in the

00:05:24,650 --> 00:05:29,360
entire room it's a nightmare it takes so

00:05:27,800 --> 00:05:30,800
long it's ridiculous

00:05:29,360 --> 00:05:32,720
you can run on system supporting your

00:05:30,800 --> 00:05:34,310
defensive strategy fortunately that's

00:05:32,720 --> 00:05:36,710
why we're here and while we're dreaming

00:05:34,310 --> 00:05:38,150
we can ride our uniforms to work every

00:05:36,710 --> 00:05:41,510
day because none of these things really

00:05:38,150 --> 00:05:43,070
happen once we adjust for expense we

00:05:41,510 --> 00:05:44,510
take out the team of orders those are

00:05:43,070 --> 00:05:46,640
expensive we take out the QA that's

00:05:44,510 --> 00:05:49,640
expensive we we don't ordered our

00:05:46,640 --> 00:05:54,400
libraries that's also expensive so we're

00:05:49,640 --> 00:05:57,020
writing code now we're using libraries

00:05:54,400 --> 00:05:58,400
we might be using a language with formal

00:05:57,020 --> 00:06:00,920
underpinnings and we're running on

00:05:58,400 --> 00:06:02,810
systems that are good for defense and

00:06:00,920 --> 00:06:04,310
now when we take time out of it because

00:06:02,810 --> 00:06:06,230
of course time is pretty much the most

00:06:04,310 --> 00:06:07,550
important thing we lose everything else

00:06:06,230 --> 00:06:09,200
so really all we're doing is writing

00:06:07,550 --> 00:06:11,240
code as quickly as we possibly can

00:06:09,200 --> 00:06:13,190
making as many mistakes as we possibly

00:06:11,240 --> 00:06:15,650
can using libraries which have been

00:06:13,190 --> 00:06:18,140
written by the same kind of people and

00:06:15,650 --> 00:06:21,080
the best part of all this is running on

00:06:18,140 --> 00:06:23,140
systems that that are concerned for us

00:06:21,080 --> 00:06:27,230
that are there to help us and that

00:06:23,140 --> 00:06:29,860
usually have resources to help us not

00:06:27,230 --> 00:06:29,860
make mistakes

00:06:31,140 --> 00:06:38,500
yeah we did let me ride a unicorn to

00:06:34,750 --> 00:06:40,140
work no I didn't think so so this is a

00:06:38,500 --> 00:06:42,010
restatement again of the problem is that

00:06:40,140 --> 00:06:44,350
usually there's there's not much

00:06:42,010 --> 00:06:46,090
separating us from the bad people you

00:06:44,350 --> 00:06:47,530
know from the system resources you know

00:06:46,090 --> 00:06:49,720
to the bad people so here we have some

00:06:47,530 --> 00:06:51,640
nice kitty cats down here in the

00:06:49,720 --> 00:06:54,340
distance and we have a very concerned

00:06:51,640 --> 00:06:56,500
individual up here who's just looking

00:06:54,340 --> 00:06:58,360
forward to meeting them and is separated

00:06:56,500 --> 00:07:00,760
by about two stories so that's that's

00:06:58,360 --> 00:07:02,230
all we really are now there's really not

00:07:00,760 --> 00:07:04,750
much separating us and this should scare

00:07:02,230 --> 00:07:06,580
you a little bit and I know personally

00:07:04,750 --> 00:07:08,500
when you write a piece of software

00:07:06,580 --> 00:07:10,150
that's facing the Internet you put it on

00:07:08,500 --> 00:07:12,220
the network and all of a sudden you

00:07:10,150 --> 00:07:13,780
start seeing hits come in from BOTS from

00:07:12,220 --> 00:07:17,220
random places and you start to think

00:07:13,780 --> 00:07:20,760
like it just takes one and it's over

00:07:17,220 --> 00:07:20,760
it's a little scary

00:07:21,010 --> 00:07:25,240
so to restate it before we really get

00:07:22,870 --> 00:07:27,880
started things we absolutely cannot

00:07:25,240 --> 00:07:30,910
change our economics if people out there

00:07:27,880 --> 00:07:32,020
can benefit from invading our systems

00:07:30,910 --> 00:07:32,910
they're gonna do it because they can

00:07:32,020 --> 00:07:35,080
make money doing that

00:07:32,910 --> 00:07:36,340
that's absolutely gonna be the case no

00:07:35,080 --> 00:07:37,540
matter where you are there's always a

00:07:36,340 --> 00:07:40,030
place where there are people who are

00:07:37,540 --> 00:07:42,610
less advantaged than us in terms of

00:07:40,030 --> 00:07:44,050
finances and and who don't have as much

00:07:42,610 --> 00:07:46,150
to lose so they're gonna do it no matter

00:07:44,050 --> 00:07:47,740
what no matter where you are the

00:07:46,150 --> 00:07:50,260
Internet is a global thing it's gonna

00:07:47,740 --> 00:07:51,490
come from wherever it comes the second

00:07:50,260 --> 00:07:54,250
invariant which was demonstrated earlier

00:07:51,490 --> 00:07:54,760
is that your software is buggy you just

00:07:54,250 --> 00:07:58,690
don't know it

00:07:54,760 --> 00:08:01,240
but it's buggy somewhere out there the

00:07:58,690 --> 00:08:03,820
thing that we can change though is the

00:08:01,240 --> 00:08:05,740
actual resources that our software can

00:08:03,820 --> 00:08:08,530
see on the system because that's what

00:08:05,740 --> 00:08:10,300
people are after right you know they're

00:08:08,530 --> 00:08:11,500
not after our software they don't care

00:08:10,300 --> 00:08:13,720
about our software our software is

00:08:11,500 --> 00:08:16,630
enabling them to get to the actual

00:08:13,720 --> 00:08:18,760
system itself so if we think about you

00:08:16,630 --> 00:08:21,010
know users aka the people who want to

00:08:18,760 --> 00:08:23,200
take advantage of us our software and

00:08:21,010 --> 00:08:25,270
the resources themselves you know we

00:08:23,200 --> 00:08:26,470
can't fix our software we can't change

00:08:25,270 --> 00:08:29,140
the fact that users are gonna take

00:08:26,470 --> 00:08:31,780
advantage of it but what we can do is to

00:08:29,140 --> 00:08:34,120
take those resources and find a way to

00:08:31,780 --> 00:08:35,919
to to set them aside to make them

00:08:34,120 --> 00:08:39,940
unreachable and that's what this talk is

00:08:35,919 --> 00:08:41,919
about before I talk about what we can do

00:08:39,940 --> 00:08:43,450
now I think it's useful to start with

00:08:41,919 --> 00:08:45,550
what people used to do

00:08:43,450 --> 00:08:47,320
and as you'll see or hopefully you will

00:08:45,550 --> 00:08:50,920
start to see nothing has really changed

00:08:47,320 --> 00:08:53,230
in 40 years that's a little scary but

00:08:50,920 --> 00:08:54,750
it's absolutely true so I'm going to

00:08:53,230 --> 00:08:57,460
start with a brief history of

00:08:54,750 --> 00:08:59,800
restraining our software from the system

00:08:57,460 --> 00:09:01,660
that it runs on and it goes back to 1961

00:08:59,800 --> 00:09:05,950
it actually probably goes back before

00:09:01,660 --> 00:09:07,390
these are just highlights and if anybody

00:09:05,950 --> 00:09:09,370
can think of something really awesome

00:09:07,390 --> 00:09:12,040
that systems did in terms of

00:09:09,370 --> 00:09:14,740
capabilities or permissions or segment

00:09:12,040 --> 00:09:15,850
separation back in these times just feel

00:09:14,740 --> 00:09:19,210
free to shout it out because it's very

00:09:15,850 --> 00:09:20,800
interesting so let's start with the CP

00:09:19,210 --> 00:09:22,690
SS we'll talk about it very briefly I

00:09:20,800 --> 00:09:24,670
don't want to spend too much time but

00:09:22,690 --> 00:09:26,740
it's fabulously interesting to see

00:09:24,670 --> 00:09:29,950
people doing the same things making the

00:09:26,740 --> 00:09:31,420
same mistakes 40 years ago acknowledging

00:09:29,950 --> 00:09:33,760
that they made the same mistakes we do

00:09:31,420 --> 00:09:35,290
right now and doing nothing about it and

00:09:33,760 --> 00:09:37,240
then we do the same thing 20 years later

00:09:35,290 --> 00:09:39,850
and then the same thing again 20 years

00:09:37,240 --> 00:09:42,100
later arguably we're doing the same

00:09:39,850 --> 00:09:44,410
things now in terms of making mistakes

00:09:42,100 --> 00:09:46,990
that we did 30 years ago and there's

00:09:44,410 --> 00:09:48,280
actually some nice text retrospectives

00:09:46,990 --> 00:09:51,730
on these systems that were written in

00:09:48,280 --> 00:09:54,430
1975 that say things like it's just too

00:09:51,730 --> 00:09:56,830
complicated to write a profile for

00:09:54,430 --> 00:09:58,570
security like systrace profiles it's

00:09:56,830 --> 00:10:00,400
just too much and anybody who's tried to

00:09:58,570 --> 00:10:02,320
write a systrace profile knows it it's

00:10:00,400 --> 00:10:03,760
just too complicated to write a systrace

00:10:02,320 --> 00:10:07,600
profile it's it's the exact same

00:10:03,760 --> 00:10:09,880
criticism anyway so so we're gonna talk

00:10:07,600 --> 00:10:11,560
about cts as briefly and unix because

00:10:09,880 --> 00:10:13,680
they're related we'll talk on multix

00:10:11,560 --> 00:10:15,970
which is the you know it's the grand

00:10:13,680 --> 00:10:18,610
security research in terms of money at

00:10:15,970 --> 00:10:20,410
least we're not gonna talk about RC 4000

00:10:18,610 --> 00:10:23,740
but that was one of the original micro

00:10:20,410 --> 00:10:25,930
kernels which multix again used in terms

00:10:23,740 --> 00:10:28,630
of its security kernel Lamson was the

00:10:25,930 --> 00:10:30,550
guy who really defined that the the

00:10:28,630 --> 00:10:31,630
theory of what it means have an access

00:10:30,550 --> 00:10:34,390
control list which is kind of

00:10:31,630 --> 00:10:36,520
interesting then we have things like

00:10:34,390 --> 00:10:38,320
discretionary access control the bell

00:10:36,520 --> 00:10:40,480
lap a doula model which is basically

00:10:38,320 --> 00:10:42,100
military security and we'll actually

00:10:40,480 --> 00:10:44,350
talk about this briefly because a lot of

00:10:42,100 --> 00:10:46,420
the way we think about security in terms

00:10:44,350 --> 00:10:49,300
of resource constraint and capabilities

00:10:46,420 --> 00:10:51,310
is derived from the military but it's

00:10:49,300 --> 00:10:53,140
ridiculous because you know as regular

00:10:51,310 --> 00:10:54,760
users we don't have any need for that

00:10:53,140 --> 00:10:56,740
you know we don't think in terms of

00:10:54,760 --> 00:10:58,630
classified or top-secret with

00:10:56,740 --> 00:11:00,399
in terms of should I be able to open

00:10:58,630 --> 00:11:02,380
sockets should I be able to read files

00:11:00,399 --> 00:11:04,810
and it's interesting that a lot of our

00:11:02,380 --> 00:11:07,750
security perspectives are driven by a

00:11:04,810 --> 00:11:09,940
method that we just don't use we'll talk

00:11:07,750 --> 00:11:11,830
about Hydra which is very interesting

00:11:09,940 --> 00:11:13,450
it's a person capability system and then

00:11:11,830 --> 00:11:15,370
a little bit more multics we're gonna

00:11:13,450 --> 00:11:18,940
leave out everything else including some

00:11:15,370 --> 00:11:21,820
biggies like system 38 the the earlier

00:11:18,940 --> 00:11:23,410
IBM things as well and of course nothing

00:11:21,820 --> 00:11:25,930
after the 70s because then there's this

00:11:23,410 --> 00:11:27,330
enormous amount of research and we're

00:11:25,930 --> 00:11:30,880
going to ignore it for now

00:11:27,330 --> 00:11:32,890
um I've never worked on one of these but

00:11:30,880 --> 00:11:34,770
I actually have seen one I think at the

00:11:32,890 --> 00:11:37,740
university of latvia they have an old

00:11:34,770 --> 00:11:41,800
1794 or something equivalent and it's

00:11:37,740 --> 00:11:44,709
whole of attic wherever these things go

00:11:41,800 --> 00:11:46,450
to sleep so here we have description

00:11:44,709 --> 00:11:47,800
from the CP SS programmers guide which

00:11:46,450 --> 00:11:51,399
is available to download by the way

00:11:47,800 --> 00:11:53,890
where it talks about the whole group

00:11:51,399 --> 00:11:57,880
user and other permission bits on file

00:11:53,890 --> 00:12:00,880
system this was 1965 but the system is

00:11:57,880 --> 00:12:03,339
from 1961 so 1961 is when people were

00:12:00,880 --> 00:12:05,560
using file permission bits and

00:12:03,339 --> 00:12:08,620
interestingly it didn't even start out

00:12:05,560 --> 00:12:10,690
having an all users bit it was just

00:12:08,620 --> 00:12:12,040
group which they called the problem

00:12:10,690 --> 00:12:14,560
number and programmer number which was

00:12:12,040 --> 00:12:16,120
the user so this goes back to 1961

00:12:14,560 --> 00:12:17,860
people have been doing permissions for a

00:12:16,120 --> 00:12:20,380
long time who has screwed up permissions

00:12:17,860 --> 00:12:23,200
on the file system at some points yeah

00:12:20,380 --> 00:12:25,899
that that is a 50-something year-old

00:12:23,200 --> 00:12:28,329
problem that people have been doing and

00:12:25,899 --> 00:12:30,190
yet still people you know you fat-finger

00:12:28,329 --> 00:12:32,620
it it's incredible

00:12:30,190 --> 00:12:35,980
I felt badly actually because I've done

00:12:32,620 --> 00:12:37,450
this many many many many times and but

00:12:35,980 --> 00:12:41,190
at the same time bit of solidarity like

00:12:37,450 --> 00:12:44,680
people have been doing this for 50 years

00:12:41,190 --> 00:12:48,220
I couldn't actually find a picture of

00:12:44,680 --> 00:12:49,810
the GE which 645 there were some G 635 s

00:12:48,220 --> 00:12:51,190
but I thought most likes is really

00:12:49,810 --> 00:12:53,470
useful to talk about because a lot of

00:12:51,190 --> 00:12:54,940
the things that we think are so fancy

00:12:53,470 --> 00:12:57,850
and cool in terms of security these days

00:12:54,940 --> 00:12:59,529
were actually multix projects but who

00:12:57,850 --> 00:13:03,149
actually has worked on multics please

00:12:59,529 --> 00:13:05,890
anybody all right

00:13:03,149 --> 00:13:08,290
the system was a phenomenal waste of

00:13:05,890 --> 00:13:09,670
money but at the same time it you know a

00:13:08,290 --> 00:13:10,360
lot of things that we use today were

00:13:09,670 --> 00:13:12,579
invented on

00:13:10,360 --> 00:13:14,350
it's very very interesting if anybody

00:13:12,579 --> 00:13:16,540
gets a chance go to Tom van

00:13:14,350 --> 00:13:18,759
Tom van Beck's website morticians org

00:13:16,540 --> 00:13:21,100
it's the most interesting website out

00:13:18,759 --> 00:13:25,660
there it's a fabulous journey through

00:13:21,100 --> 00:13:29,049
the history of computing mistakes Tom

00:13:25,660 --> 00:13:31,509
then like very interesting so they took

00:13:29,049 --> 00:13:33,489
this one step further and the whole

00:13:31,509 --> 00:13:35,589
concept of seeing everything as a file

00:13:33,489 --> 00:13:37,689
really came out of that but they call

00:13:35,589 --> 00:13:39,399
them segments of course we're actually

00:13:37,689 --> 00:13:41,679
memory was mapped into segments as well

00:13:39,399 --> 00:13:43,360
as files as well as sockets pretty much

00:13:41,679 --> 00:13:45,730
everything and then they just enacted

00:13:43,360 --> 00:13:47,139
the same file permission bits on top of

00:13:45,730 --> 00:13:51,699
that and boom you have access control

00:13:47,139 --> 00:13:53,589
lists so that's basically what this says

00:13:51,699 --> 00:13:54,759
this is from the protection and the

00:13:53,589 --> 00:14:01,019
control of information sharing I'm

00:13:54,759 --> 00:14:05,069
multix done in 1974 as we all might know

00:14:01,019 --> 00:14:07,170
multics was certified as under v2

00:14:05,069 --> 00:14:09,910
certification in the orange book and

00:14:07,170 --> 00:14:12,610
this took many years from then actually

00:14:09,910 --> 00:14:15,279
do when they trained of getting from the

00:14:12,610 --> 00:14:17,319
original multics from the early 70s to

00:14:15,279 --> 00:14:19,779
the 1980 version of multics that was

00:14:17,319 --> 00:14:21,549
actually certified for military security

00:14:19,779 --> 00:14:23,589
is incredible the things they had to do

00:14:21,549 --> 00:14:25,629
to get that and they still managed to

00:14:23,589 --> 00:14:26,889
break it all the time is the hilarious

00:14:25,629 --> 00:14:31,179
thing so this was supposed to be a

00:14:26,889 --> 00:14:35,379
military-grade operating system that was

00:14:31,179 --> 00:14:36,910
fully secure and yet now I will see in a

00:14:35,379 --> 00:14:39,549
few slides we'll see and Yeti was broken

00:14:36,910 --> 00:14:41,649
all the time all of the time not because

00:14:39,549 --> 00:14:43,540
the actual security of the system was

00:14:41,649 --> 00:14:45,699
bad but because people just didn't want

00:14:43,540 --> 00:14:49,480
to use the resources that were available

00:14:45,699 --> 00:14:52,029
to them they just ignored it but we'll

00:14:49,480 --> 00:14:55,149
get to that in a few minutes Hydra is is

00:14:52,029 --> 00:14:57,429
not very well known they ran it on a pvp

00:14:55,149 --> 00:14:58,959
11 and Hydra was an experiment in what's

00:14:57,429 --> 00:15:00,579
called capabilities based operating

00:14:58,959 --> 00:15:02,410
systems we're not going to talk about

00:15:00,579 --> 00:15:04,509
the formal language like discretionary

00:15:02,410 --> 00:15:07,049
access controls or mandatory because

00:15:04,509 --> 00:15:09,309
they're really confusing I think and

00:15:07,049 --> 00:15:11,169
they're not really relevant to us we

00:15:09,309 --> 00:15:12,579
just want to have security we don't care

00:15:11,169 --> 00:15:16,329
about the technical terms behind it

00:15:12,579 --> 00:15:20,799
really per se but Hydra was really neat

00:15:16,329 --> 00:15:22,179
because you essentially would take all

00:15:20,799 --> 00:15:23,480
the resources that were available to

00:15:22,179 --> 00:15:25,639
software and

00:15:23,480 --> 00:15:27,860
you would put them into a sandbox

00:15:25,639 --> 00:15:29,899
essentially so this was where sandbox

00:15:27,860 --> 00:15:32,899
has really came out of was in the early

00:15:29,899 --> 00:15:35,120
70s and of course it was done for the

00:15:32,899 --> 00:15:36,709
exact same reason we do it today for to

00:15:35,120 --> 00:15:39,260
prevent people from shooting themselves

00:15:36,709 --> 00:15:41,089
in the foot so is prevent your software

00:15:39,260 --> 00:15:43,399
which has bugs in it from screwing the

00:15:41,089 --> 00:15:45,019
rest of the system or as they say it we

00:15:43,399 --> 00:15:47,630
therefore cannot allow a single user

00:15:45,019 --> 00:15:49,699
application to commandeer the system and

00:15:47,630 --> 00:15:52,279
to the detriment of others so this

00:15:49,699 --> 00:15:59,510
problem still exists today this was 1975

00:15:52,279 --> 00:16:00,889
we still have this problem today so this

00:15:59,510 --> 00:16:02,839
is a nice picture involving two

00:16:00,889 --> 00:16:05,899
gentlemen Paul Karger and rod Rochelle

00:16:02,839 --> 00:16:07,750
was taken in 1984 but it's relevant to

00:16:05,899 --> 00:16:10,070
the early 70s these were the guys who

00:16:07,750 --> 00:16:11,630
went on a mission to break into the

00:16:10,070 --> 00:16:13,880
multics system before its certification

00:16:11,630 --> 00:16:15,920
and they did so these despite all of

00:16:13,880 --> 00:16:17,660
these multi-million at the time multi

00:16:15,920 --> 00:16:19,910
millions of dollars that were invested

00:16:17,660 --> 00:16:21,500
into multics security they still managed

00:16:19,910 --> 00:16:24,589
to break into the system not just once

00:16:21,500 --> 00:16:28,100
or twice but left right and center the

00:16:24,589 --> 00:16:31,339
final report on multi security is really

00:16:28,100 --> 00:16:35,209
awful I mean it's just it was basically

00:16:31,339 --> 00:16:37,220
wide open and this was again right

00:16:35,209 --> 00:16:38,720
before the military certification so

00:16:37,220 --> 00:16:40,399
that was it was in order to get that

00:16:38,720 --> 00:16:44,750
they were kind of trying to rout the

00:16:40,399 --> 00:16:47,630
system left right and center so question

00:16:44,750 --> 00:16:50,149
asked is what went wrong how how is it

00:16:47,630 --> 00:16:51,889
that so much money was was involved in

00:16:50,149 --> 00:16:55,069
the system so much money I mean millions

00:16:51,889 --> 00:16:56,829
of dollars in the 70s how is it that so

00:16:55,069 --> 00:17:00,740
many people wrote so many papers

00:16:56,829 --> 00:17:03,290
conference talks money money money etc

00:17:00,740 --> 00:17:05,449
money and yet still the systems were

00:17:03,290 --> 00:17:07,760
just falling apart I mean how is that

00:17:05,449 --> 00:17:09,500
even possible you know here we are as

00:17:07,760 --> 00:17:10,669
BSD systems we don't have these multi

00:17:09,500 --> 00:17:13,790
millions that are flowing into our

00:17:10,669 --> 00:17:15,860
coffers and they had that and they still

00:17:13,790 --> 00:17:18,020
had problems they still had security

00:17:15,860 --> 00:17:20,299
errors so don't feel badly you know if

00:17:18,020 --> 00:17:22,069
your software doesn't quite work if you

00:17:20,299 --> 00:17:24,500
find yourself exploited from time to

00:17:22,069 --> 00:17:26,480
time just sit down and think well there

00:17:24,500 --> 00:17:28,130
were how much was it it's like four or

00:17:26,480 --> 00:17:30,380
five million dollars were invested into

00:17:28,130 --> 00:17:32,390
multix and they still broke that too so

00:17:30,380 --> 00:17:35,150
it's not you know it's nothing really to

00:17:32,390 --> 00:17:36,510
be that worried about but what people

00:17:35,150 --> 00:17:38,520
came away from in the seven

00:17:36,510 --> 00:17:40,710
and watching all these break-ins was to

00:17:38,520 --> 00:17:44,309
say that and this is Jerry Seltzer again

00:17:40,710 --> 00:17:45,630
saying one too complicated the security

00:17:44,309 --> 00:17:47,790
mechanically these systems that already

00:17:45,630 --> 00:17:50,010
existed were too complicated and they

00:17:47,790 --> 00:17:51,630
couldn't really be audited this sounds

00:17:50,010 --> 00:17:53,460
familiar right who's ever inherited a

00:17:51,630 --> 00:17:56,700
big piece of software looked at it and

00:17:53,460 --> 00:17:58,740
just went mm-hmm yeah it's it's just too

00:17:56,700 --> 00:18:00,090
complicated you just can't do it and go

00:17:58,740 --> 00:18:09,330
don't say yes I know your time at

00:18:00,090 --> 00:18:11,190
man-dog yes yeah exactly it's it's just

00:18:09,330 --> 00:18:12,840
it's just too you know you look at it

00:18:11,190 --> 00:18:14,040
your eyes start to you think it's water

00:18:12,840 --> 00:18:16,650
but they're cheap you know that it's

00:18:14,040 --> 00:18:17,760
blood and and it's it's over you just

00:18:16,650 --> 00:18:19,620
don't want to do it and it's never going

00:18:17,760 --> 00:18:21,480
to happen number two of course is

00:18:19,620 --> 00:18:24,179
economics and this I think we know even

00:18:21,480 --> 00:18:26,820
better that it's just cheaper to do

00:18:24,179 --> 00:18:28,710
things in a privileged or administrator

00:18:26,820 --> 00:18:30,540
or super user mode because we don't have

00:18:28,710 --> 00:18:32,700
to worry about the file permissions we

00:18:30,540 --> 00:18:34,260
can just do it like this this we're all

00:18:32,700 --> 00:18:35,520
guilty of of course it's just doing it

00:18:34,260 --> 00:18:38,970
the easy way of course not me because

00:18:35,520 --> 00:18:40,799
I'm giving the talk rush to get it on

00:18:38,970 --> 00:18:43,049
the air I mean this is the big one and

00:18:40,799 --> 00:18:44,640
in earlier nobody batted an eye when I

00:18:43,049 --> 00:18:46,140
said here's the ideal situation but

00:18:44,640 --> 00:18:48,059
here's what we do because of our time

00:18:46,140 --> 00:18:50,400
constraints and yet here we have people

00:18:48,059 --> 00:18:52,320
in 1974 saying because of our time

00:18:50,400 --> 00:18:53,850
constraints we're not gonna do all these

00:18:52,320 --> 00:18:57,059
cool things we're just gonna do the

00:18:53,850 --> 00:18:59,549
absolute fastest the biggest one is lack

00:18:57,059 --> 00:19:02,450
of understanding and that of course is

00:18:59,549 --> 00:19:07,970
the problem and why I'm here right now

00:19:02,450 --> 00:19:12,809
who knows of all of the bsd security

00:19:07,970 --> 00:19:15,000
software resources that are available to

00:19:12,809 --> 00:19:20,520
us who can actually label them all from

00:19:15,000 --> 00:19:22,830
jails systrace WX ASLR if there's a met

00:19:20,520 --> 00:19:24,120
they're all over the place and some of

00:19:22,830 --> 00:19:25,950
these like what Tito was talking about

00:19:24,120 --> 00:19:27,360
we don't need to know about because they

00:19:25,950 --> 00:19:30,540
run in the systems themselves we don't

00:19:27,360 --> 00:19:33,870
need to know about you know randomized

00:19:30,540 --> 00:19:35,850
stopgap stack gaps or these kind of

00:19:33,870 --> 00:19:37,440
inside of Lipsy or remember we don't

00:19:35,850 --> 00:19:39,870
need to know about that but the things

00:19:37,440 --> 00:19:41,700
we need to do that we as developers need

00:19:39,870 --> 00:19:46,440
to write we don't know about and that's

00:19:41,700 --> 00:19:49,290
that's that's bad I mean a hydro also

00:19:46,440 --> 00:19:51,990
same exact thing it's just too

00:19:49,290 --> 00:19:53,820
to complicated people just didn't

00:19:51,990 --> 00:19:55,230
understand what to do they wanted to

00:19:53,820 --> 00:19:57,420
take their systems they wanted to make

00:19:55,230 --> 00:19:59,400
them secure by using this capability

00:19:57,420 --> 00:20:02,640
system they just didn't know how to do

00:19:59,400 --> 00:20:04,770
it so this is a major problem still

00:20:02,640 --> 00:20:06,230
today we haven't talked about unix yet

00:20:04,770 --> 00:20:08,760
so now we're starting to get modern

00:20:06,230 --> 00:20:14,180
we're gonna go from the 60s to 70s and

00:20:08,760 --> 00:20:16,500
80s unix so this is dennis ritchie again

00:20:14,180 --> 00:20:18,420
first this was a very interesting quotes

00:20:16,500 --> 00:20:19,980
and i didn't know this before there's

00:20:18,420 --> 00:20:21,690
this kind of prevailing notion that we

00:20:19,980 --> 00:20:23,970
all have that UNIX is basically a

00:20:21,690 --> 00:20:25,760
multics tripped down yet Ritchie seems

00:20:23,970 --> 00:20:28,380
to disagree and says it's just C TSS

00:20:25,760 --> 00:20:31,770
which of course makes sense cuz CTS s is

00:20:28,380 --> 00:20:34,080
multix stripped down so this is actually

00:20:31,770 --> 00:20:36,330
an interesting comment as we know the

00:20:34,080 --> 00:20:39,090
the most interesting security feature on

00:20:36,330 --> 00:20:40,680
CP SS was file permissions so we're

00:20:39,090 --> 00:20:43,320
really not talking about advanced

00:20:40,680 --> 00:20:45,840
security here and in fact he goes on to

00:20:43,320 --> 00:20:48,600
the same paper to say that there are

00:20:45,840 --> 00:20:49,920
several security problems now this is

00:20:48,600 --> 00:20:52,980
pretty much the understatement of the

00:20:49,920 --> 00:20:55,140
century because in the 30 or 40 years

00:20:52,980 --> 00:20:56,850
since writing this paper there have been

00:20:55,140 --> 00:20:59,010
more than several security problems

00:20:56,850 --> 00:21:01,920
regarding Unix I think we still had one

00:20:59,010 --> 00:21:04,380
five days ago and what was the batch

00:21:01,920 --> 00:21:09,540
problem was five days ago right there's

00:21:04,380 --> 00:21:11,190
several security problems hmm so now I'm

00:21:09,540 --> 00:21:14,700
gonna really start my talk again for the

00:21:11,190 --> 00:21:16,080
third time and so now we're taking a

00:21:14,700 --> 00:21:17,610
slightly different tack we're now

00:21:16,080 --> 00:21:20,040
considering ourselves as the developers

00:21:17,610 --> 00:21:21,960
and what we can do and this is how often

00:21:20,040 --> 00:21:23,700
you know we end up feeling about

00:21:21,960 --> 00:21:25,110
ourselves after our bugs have been

00:21:23,700 --> 00:21:29,970
exploited is that we had just had no

00:21:25,110 --> 00:21:32,670
idea what we were doing whatsoever so as

00:21:29,970 --> 00:21:35,190
time goes by what has happened since

00:21:32,670 --> 00:21:39,540
this glorious age of security research

00:21:35,190 --> 00:21:41,100
in the 70s more pretty much just this

00:21:39,540 --> 00:21:43,820
list this is disregarding Linux things

00:21:41,100 --> 00:21:46,590
which actually do manage to add several

00:21:43,820 --> 00:21:48,540
equally inscrutable things to this list

00:21:46,590 --> 00:21:50,400
so Linux does have its own things I'm

00:21:48,540 --> 00:21:53,490
just talking about BSD and I'm letting

00:21:50,400 --> 00:21:57,360
Mac kind of work in there just because

00:21:53,490 --> 00:21:58,770
it shares a lot with FreeBSD and or

00:21:57,360 --> 00:22:01,400
Darwin or whatever we really want to

00:21:58,770 --> 00:22:05,240
call that so

00:22:01,400 --> 00:22:07,990
here's the question we're all aware of

00:22:05,240 --> 00:22:11,690
jemaldin said you idea yes

00:22:07,990 --> 00:22:13,820
vaguely okay we all know chroot we

00:22:11,690 --> 00:22:16,760
almost set our limits we've all heard of

00:22:13,820 --> 00:22:18,800
jail who's used jail before okay so

00:22:16,760 --> 00:22:22,580
we're doing okay there who is actually

00:22:18,800 --> 00:22:23,540
use systrace I'm actually surprised I

00:22:22,580 --> 00:22:25,040
thought I would be the only one raising

00:22:23,540 --> 00:22:28,640
my hand okay

00:22:25,040 --> 00:22:31,190
who's used the FreeBSD and Mac POSIX 1e

00:22:28,640 --> 00:22:33,560
facility is the ACL in the ma C is a Mac

00:22:31,190 --> 00:22:36,680
and the ACL facilities who is actually

00:22:33,560 --> 00:22:39,530
use those who's even managed to read the

00:22:36,680 --> 00:22:44,240
man pages for those who started to read

00:22:39,530 --> 00:22:47,810
the man pages for those so so okay how

00:22:44,240 --> 00:22:49,370
many FreeBSD users are here okay so none

00:22:47,810 --> 00:22:51,170
of you have actually used these

00:22:49,370 --> 00:22:53,720
incredibly powerful tools that are on

00:22:51,170 --> 00:22:55,340
your own systems and I'll tell you why -

00:22:53,720 --> 00:22:58,190
I mean we'll look at the man page and

00:22:55,340 --> 00:23:00,200
you'll see why it's it's just I mean but

00:22:58,190 --> 00:23:01,880
whatever okay so Kay off on that BSD I

00:23:00,200 --> 00:23:04,670
threw this in there although it's not

00:23:01,880 --> 00:23:07,340
particularly relevant just because one I

00:23:04,670 --> 00:23:09,350
wanted something from that BSD and two

00:23:07,340 --> 00:23:13,070
it's really powerful but there's no user

00:23:09,350 --> 00:23:14,930
inline interface it would be good I'm

00:23:13,070 --> 00:23:18,610
just saying - any net BSD people out

00:23:14,930 --> 00:23:18,610
there I know there was some

00:23:27,350 --> 00:23:31,140
subsystem construction still suffers

00:23:29,400 --> 00:23:32,610
from being ad hoc being inadequate

00:23:31,140 --> 00:23:35,250
software support from managing the

00:23:32,610 --> 00:23:40,080
programs data structures so basically in

00:23:35,250 --> 00:23:41,340
1978 okay um but but that's that's

00:23:40,080 --> 00:23:43,110
nothing to be ashamed of it all because

00:23:41,340 --> 00:23:45,420
again the same mistake this is a

00:23:43,110 --> 00:23:47,010
tradition I mean that goes back to the

00:23:45,420 --> 00:23:49,440
early 1970s so we're just following

00:23:47,010 --> 00:23:52,680
tradition that has been laid back by our

00:23:49,440 --> 00:23:54,030
poor allure forebears kay of--this is

00:23:52,680 --> 00:23:57,000
interesting that there were a lot of

00:23:54,030 --> 00:23:59,430
attempts to do jails over Kay off even I

00:23:57,000 --> 00:24:01,730
think capsicum over chaos but nothing

00:23:59,430 --> 00:24:04,380
really came out of it but that's not

00:24:01,730 --> 00:24:06,510
sandbox in it is a very useful one

00:24:04,380 --> 00:24:09,390
that's completely hidden away from view

00:24:06,510 --> 00:24:13,290
on Mac systems who's who's even heard of

00:24:09,390 --> 00:24:15,420
sandbox or sandbox in it on Mac yeah

00:24:13,290 --> 00:24:16,950
it's a it's a tricky one and there's no

00:24:15,420 --> 00:24:18,690
document I mean we'll see about the site

00:24:16,950 --> 00:24:20,760
and the last one being capsicum who's

00:24:18,690 --> 00:24:22,980
heard of capsicum and this one is very

00:24:20,760 --> 00:24:25,440
well marketed and very I'll talk a lot

00:24:22,980 --> 00:24:27,930
about capsicum so as you can see though

00:24:25,440 --> 00:24:30,510
in terms of timing there's a little bit

00:24:27,930 --> 00:24:34,980
of a break there you know we have about

00:24:30,510 --> 00:24:40,350
18 years between set our limit in in 4.1

00:24:34,980 --> 00:24:42,540
see bsd and jail were basically nothing

00:24:40,350 --> 00:24:43,830
happened whatsoever so what was

00:24:42,540 --> 00:24:46,290
happening during that time in terms of

00:24:43,830 --> 00:24:48,300
security was probably the point where

00:24:46,290 --> 00:24:50,430
were broken in a lot and then we tried

00:24:48,300 --> 00:24:51,840
to fix it later and now we seem to be

00:24:50,430 --> 00:24:54,780
back at it were broken in a large phase

00:24:51,840 --> 00:24:57,030
but anyway so we have lots of tools to

00:24:54,780 --> 00:25:00,120
use all of these are available on BSD

00:24:57,030 --> 00:25:08,820
systems today right now who has used 50

00:25:00,120 --> 00:25:11,310
percent of these 40 percent 30 20 ok so

00:25:08,820 --> 00:25:13,320
he and I think that why is a useful

00:25:11,310 --> 00:25:14,550
question but I'm not even gonna ask it

00:25:13,320 --> 00:25:16,290
because I think it's obvious so why

00:25:14,550 --> 00:25:18,540
would be because it's hard alright

00:25:16,290 --> 00:25:19,920
they're hard to use I mean and we'll see

00:25:18,540 --> 00:25:23,370
you later as we talk about Chimel and

00:25:19,920 --> 00:25:25,710
said UID is that they're hard and and 2

00:25:23,370 --> 00:25:27,390
is its lack of documentation and we'll

00:25:25,710 --> 00:25:30,390
look at that also briefly so let's go

00:25:27,390 --> 00:25:32,430
over these more or less one by one

00:25:30,390 --> 00:25:34,020
and I want to briefly talk about some

00:25:32,430 --> 00:25:36,030
concepts because not all these are the

00:25:34,020 --> 00:25:36,640
same obviously we're talking about kind

00:25:36,030 --> 00:25:38,590
of different

00:25:36,640 --> 00:25:40,750
here and I'm lumping them all under

00:25:38,590 --> 00:25:44,470
security but they're not all the same

00:25:40,750 --> 00:25:46,750
thing we have three basic concepts one

00:25:44,470 --> 00:25:48,130
is containers I think this is what we're

00:25:46,750 --> 00:25:51,220
most familiar with containers are like

00:25:48,130 --> 00:25:53,500
in jail or achoo roots or some container

00:25:51,220 --> 00:25:55,299
or Linux vserver or whatnot well we're

00:25:53,500 --> 00:25:57,340
actually taking our worldview and

00:25:55,299 --> 00:25:59,650
constraining it to a given file system

00:25:57,340 --> 00:26:01,510
to a given set of processes to a given

00:25:59,650 --> 00:26:03,309
set of network interfaces and then

00:26:01,510 --> 00:26:05,830
everybody in that jail can see the same

00:26:03,309 --> 00:26:07,900
things so it's basically a way of

00:26:05,830 --> 00:26:10,120
containing not only a process but maybe

00:26:07,900 --> 00:26:12,850
a user or something like this it's very

00:26:10,120 --> 00:26:14,530
heavy-handed and and very very useful in

00:26:12,850 --> 00:26:18,220
many regards so it's a kind of way of

00:26:14,530 --> 00:26:19,870
partitioning the system a very different

00:26:18,220 --> 00:26:23,549
is the concept that capabilities where

00:26:19,870 --> 00:26:27,370
we say a given process or a given user

00:26:23,549 --> 00:26:28,900
can cannot see parts of its may be

00:26:27,370 --> 00:26:30,940
contained environment so we can use

00:26:28,900 --> 00:26:33,190
capabilities within the container we can

00:26:30,940 --> 00:26:34,870
say you're in your Jail but you can only

00:26:33,190 --> 00:26:38,110
see these files or only see those files

00:26:34,870 --> 00:26:39,970
you can only access these sockets you

00:26:38,110 --> 00:26:41,890
can only do this you can only do that

00:26:39,970 --> 00:26:44,620
it's a way of saying what a process is

00:26:41,890 --> 00:26:46,000
capable of or a user is capable of and

00:26:44,620 --> 00:26:48,130
then the last one I didn't really know

00:26:46,000 --> 00:26:50,950
what concept name to give it so I just

00:26:48,130 --> 00:26:54,070
said labeling basically access control

00:26:50,950 --> 00:26:57,130
lists trim all set UID all these things

00:26:54,070 --> 00:26:58,750
are basically saying you're part of this

00:26:57,130 --> 00:27:00,880
group or you're this user thus you can

00:26:58,750 --> 00:27:04,600
do that so it's kind of a way of

00:27:00,880 --> 00:27:06,309
capabilities with labeling but this this

00:27:04,600 --> 00:27:08,080
is the most vulnerable I think at some

00:27:06,309 --> 00:27:09,250
point we've all been exposed especially

00:27:08,080 --> 00:27:12,220
in the past few years to privilege

00:27:09,250 --> 00:27:15,640
separation and Chimel and said UID and

00:27:12,220 --> 00:27:18,280
Friends prove dropping as well form the

00:27:15,640 --> 00:27:20,380
bulwark of that and I think a very nice

00:27:18,280 --> 00:27:21,970
quote this is supposed to be the thing

00:27:20,380 --> 00:27:25,929
we should be best at because we've had

00:27:21,970 --> 00:27:37,770
it since yeah UNIX V once we've had this

00:27:25,929 --> 00:27:40,179
since 1971 yeah so that's that was a

00:27:37,770 --> 00:27:43,720
40-something year old concept you were

00:27:40,179 --> 00:27:45,460
just able to find bugs and so what we're

00:27:43,720 --> 00:27:47,650
all supposed to know this so well right

00:27:45,460 --> 00:27:49,240
we're all supposed to know you you fork

00:27:47,650 --> 00:27:49,960
a process you do all your privileged

00:27:49,240 --> 00:27:52,029
work and more

00:27:49,960 --> 00:27:53,770
you do your your sensitive work in

00:27:52,029 --> 00:27:56,470
another you communicate over some sort

00:27:53,770 --> 00:27:59,500
of socket or something like this and and

00:27:56,470 --> 00:28:02,230
yet nobody gets this rights I mean even

00:27:59,500 --> 00:28:05,140
probably one of the the most well known

00:28:02,230 --> 00:28:07,720
programmers and and most powerful in

00:28:05,140 --> 00:28:09,640
terms of brain says requires complicated

00:28:07,720 --> 00:28:11,380
and very detailed programming for

00:28:09,640 --> 00:28:13,360
non-trivial programs that should terrify

00:28:11,380 --> 00:28:16,510
you because that's Theo de Raadt saying

00:28:13,360 --> 00:28:19,179
that I mean I don't think at least I for

00:28:16,510 --> 00:28:21,580
one am not really packing the same guns

00:28:19,179 --> 00:28:23,140
and if somebody else who's like that

00:28:21,580 --> 00:28:24,970
says this requires complicated very

00:28:23,140 --> 00:28:29,169
detailed programming for me that just

00:28:24,970 --> 00:28:31,330
says impossible so but doable for simple

00:28:29,169 --> 00:28:32,649
programs which is nice so who has ever

00:28:31,330 --> 00:28:38,679
done privilege separation it was

00:28:32,649 --> 00:28:45,370
actually written was it easy for which

00:28:38,679 --> 00:28:47,230
programs just out of curiosity okay so

00:28:45,370 --> 00:28:49,179
you've done it for several was it was it

00:28:47,230 --> 00:28:50,409
it was it a difficult was it doable and

00:28:49,179 --> 00:28:53,260
simple programs or was it required

00:28:50,409 --> 00:29:16,570
complicated and simple and very detailed

00:28:53,260 --> 00:29:18,399
programming so if you start what if you

00:29:16,570 --> 00:29:21,190
had to start with existing code you

00:29:18,399 --> 00:29:24,100
think it would have been as easy yeah

00:29:21,190 --> 00:29:26,230
it's it's basically it's it's it's easy

00:29:24,100 --> 00:29:28,510
for us to imagine I think it's a better

00:29:26,230 --> 00:29:30,039
way of saying this but actually doing it

00:29:28,510 --> 00:29:33,960
do you modify it's getting really stuffy

00:29:30,039 --> 00:29:33,960
now but actually doing it is entirely

00:29:35,730 --> 00:29:46,289
oh right so essentially this is what we

00:29:44,130 --> 00:29:47,639
should be best at and yet when you

00:29:46,289 --> 00:29:50,429
actually look at the history of our

00:29:47,639 --> 00:29:51,659
doing it it's pretty complicated I think

00:29:50,429 --> 00:29:54,389
did anybody go to Hennings talk

00:29:51,659 --> 00:29:56,580
yesterday if you went the hanging stock

00:29:54,389 --> 00:29:58,250
he actually had one slide that went over

00:29:56,580 --> 00:30:00,929
the privilege separation process of

00:29:58,250 --> 00:30:03,419
Durham which Damon it was was it bgp d

00:30:00,929 --> 00:30:05,159
yeah it was a whole slide with arrows

00:30:03,419 --> 00:30:07,409
everywhere and little circles and

00:30:05,159 --> 00:30:09,690
everything it was very complicated I saw

00:30:07,409 --> 00:30:11,580
it and I I cried because it's something

00:30:09,690 --> 00:30:14,010
that we have had available to us since

00:30:11,580 --> 00:30:17,789
1971 and it's just still very difficult

00:30:14,010 --> 00:30:19,260
to do and that's that's that's just one

00:30:17,789 --> 00:30:20,250
of these that I'm talking about right

00:30:19,260 --> 00:30:22,919
now

00:30:20,250 --> 00:30:24,870
choo routes is another one Giroud never

00:30:22,919 --> 00:30:29,130
was a security mechanism I don't know

00:30:24,870 --> 00:30:30,149
when it became one it's this is the the

00:30:29,130 --> 00:30:32,490
truth that you see right there is

00:30:30,149 --> 00:30:35,130
actually from the initial chroot

00:30:32,490 --> 00:30:38,460
implementation there was no security

00:30:35,130 --> 00:30:40,409
check it just said okay do it and then

00:30:38,460 --> 00:30:43,919
it was only in a 1981 commit by bill joy

00:30:40,409 --> 00:30:46,529
that some initial security constraints

00:30:43,919 --> 00:30:49,350
were added so it's not trivially easy to

00:30:46,529 --> 00:30:51,029
break out of it it was never meant to be

00:30:49,350 --> 00:30:52,649
a security mechanism people have to stop

00:30:51,029 --> 00:30:54,389
thinking about it as a security madam

00:30:52,649 --> 00:30:59,490
it's a convenience mechanism and nothing

00:30:54,389 --> 00:31:02,010
more set our limit who uses set a limit

00:30:59,490 --> 00:31:05,460
for anything but cores for anything but

00:31:02,010 --> 00:31:07,529
you limit see ok a few people this one

00:31:05,460 --> 00:31:09,059
is useful but very tricky and we can

00:31:07,529 --> 00:31:10,919
talk about that briefly in a case study

00:31:09,059 --> 00:31:12,870
at the end of this so set our limit is

00:31:10,919 --> 00:31:14,940
useful but if somebody really gains

00:31:12,870 --> 00:31:19,049
control your system they can just change

00:31:14,940 --> 00:31:22,470
it back so it's useful but but but very

00:31:19,049 --> 00:31:24,360
brittle jail I think was the first big

00:31:22,470 --> 00:31:26,580
you know now we're gonna be serious

00:31:24,360 --> 00:31:29,159
about security done by a pole hunting

00:31:26,580 --> 00:31:32,149
camp and of course lots of people here

00:31:29,159 --> 00:31:34,500
use jail jail is nice but it's a very

00:31:32,149 --> 00:31:36,690
first year to be rude to run it second

00:31:34,500 --> 00:31:40,799
it can be recursive it's a nice

00:31:36,690 --> 00:31:44,220
container but the implementation of that

00:31:40,799 --> 00:31:45,389
container is such that we don't know if

00:31:44,220 --> 00:31:47,429
there are holes in it and I talked about

00:31:45,389 --> 00:31:49,320
the several years ago when I was saying

00:31:47,429 --> 00:31:51,330
molds we're not gonna go into it right

00:31:49,320 --> 00:31:53,250
a problem that the purposes it's a great

00:31:51,330 --> 00:31:54,930
system that more people should use but

00:31:53,250 --> 00:31:56,370
it's still not going to help you when

00:31:54,930 --> 00:31:58,770
you have two processes that are in the

00:31:56,370 --> 00:32:00,810
same jail that both need to access a

00:31:58,770 --> 00:32:06,560
similar set of files and you don't want

00:32:00,810 --> 00:32:10,410
to have one overwrite the other yes yeah

00:32:06,560 --> 00:32:11,760
yeah you cannot do that okay so you can

00:32:10,410 --> 00:32:14,250
you can run a jail from within a jail

00:32:11,760 --> 00:32:22,590
okay but that's new and that is that new

00:32:14,250 --> 00:32:23,760
oh okay well that's great news in that

00:32:22,590 --> 00:32:27,180
case we can scratch that one out

00:32:23,760 --> 00:32:28,410
so jail is it is a useful tool and I've

00:32:27,180 --> 00:32:29,760
always kind of liked jail because it's

00:32:28,410 --> 00:32:30,930
simple you just run it like this you

00:32:29,760 --> 00:32:33,450
don't need to worry about the details

00:32:30,930 --> 00:32:36,420
and and I think because we've talked so

00:32:33,450 --> 00:32:38,820
much about how complexity is hard we

00:32:36,420 --> 00:32:40,770
should really take a look at that not in

00:32:38,820 --> 00:32:42,420
terms of how it's done but the fact it's

00:32:40,770 --> 00:32:46,140
such a simple interface of just saying

00:32:42,420 --> 00:32:47,580
jail me worked and and and and because

00:32:46,140 --> 00:32:49,770
people are so familiar with it obviously

00:32:47,580 --> 00:32:52,260
it worked not just in terms of utility

00:32:49,770 --> 00:32:54,990
but that we understand it enough to just

00:32:52,260 --> 00:32:58,410
be like oh yeah it's a jail and this is

00:32:54,990 --> 00:33:00,540
really useful systrace does not have the

00:32:58,410 --> 00:33:03,720
same benefit so we've had a few people

00:33:00,540 --> 00:33:06,270
use systrace it was well by Niels Provos

00:33:03,720 --> 00:33:10,380
I could not remember whether it was

00:33:06,270 --> 00:33:12,090
originally done in a PST or OpenBSD and

00:33:10,380 --> 00:33:13,350
I couldn't find the original commits it

00:33:12,090 --> 00:33:14,970
was one or the other they were both

00:33:13,350 --> 00:33:17,490
merged at roughly the same time as all I

00:33:14,970 --> 00:33:19,830
really remember and there was a really

00:33:17,490 --> 00:33:22,820
big brouhaha in 2007 when the Robert

00:33:19,830 --> 00:33:25,440
Watson found warmer abilities and it's

00:33:22,820 --> 00:33:27,420
using systrace there are two ways to use

00:33:25,440 --> 00:33:29,610
it you can either use a userland program

00:33:27,420 --> 00:33:31,440
systrace one in a policy file that says

00:33:29,610 --> 00:33:32,940
this program is allowed to do that and

00:33:31,440 --> 00:33:36,450
that or you can do it programmatically

00:33:32,940 --> 00:33:38,700
and what can only be described as a very

00:33:36,450 --> 00:33:41,190
intricate dance it's it's performance

00:33:38,700 --> 00:33:43,110
art and we can see some examples of this

00:33:41,190 --> 00:33:44,070
if you'd like there are also some major

00:33:43,110 --> 00:33:46,650
problems if you're doing this

00:33:44,070 --> 00:33:49,200
programmatically you cannot systrace

00:33:46,650 --> 00:33:51,900
yourself you can only systrace a child

00:33:49,200 --> 00:33:54,120
or another process and this immediately

00:33:51,900 --> 00:33:55,860
adds another level level of complexity

00:33:54,120 --> 00:33:57,540
to programs where we're inheriting them

00:33:55,860 --> 00:33:59,280
because now we have to do the whole fork

00:33:57,540 --> 00:34:01,860
if we're already privileged separating

00:33:59,280 --> 00:34:03,060
then it's not so difficult but if we're

00:34:01,860 --> 00:34:05,670
working with existing code

00:34:03,060 --> 00:34:07,500
it can be quite hard so again the

00:34:05,670 --> 00:34:10,429
privilege separation complexity applies

00:34:07,500 --> 00:34:12,659
to systrace and that is a major problem

00:34:10,429 --> 00:34:16,080
other than that systrace I think is the

00:34:12,659 --> 00:34:18,510
first and really still almost only

00:34:16,080 --> 00:34:20,790
capabilities-based system that we have

00:34:18,510 --> 00:34:23,129
available to us today unfortunately it's

00:34:20,790 --> 00:34:24,960
not so good for security anymore so this

00:34:23,129 --> 00:34:28,169
is almost not even useful to talk about

00:34:24,960 --> 00:34:33,020
I mean if we're gonna allow Fork then

00:34:28,169 --> 00:34:35,790
you're gone so systrace is useful but

00:34:33,020 --> 00:34:37,740
knight next is POSIX POSIX money and

00:34:35,790 --> 00:34:39,419
again this was a lot of Robert Watson's

00:34:37,740 --> 00:34:40,889
work actually so he really brought a

00:34:39,419 --> 00:34:42,389
tremendous amount of security

00:34:40,889 --> 00:34:45,720
information to the bsd community by a

00:34:42,389 --> 00:34:47,850
trusted BSD and he brought ACF who uses

00:34:45,720 --> 00:34:52,320
access control this not file permissions

00:34:47,850 --> 00:34:57,240
you actually use them okay Google on the

00:34:52,320 --> 00:35:05,340
VFS so VFS for file access controllers

00:34:57,240 --> 00:35:07,290
or for other things as well okay all

00:35:05,340 --> 00:35:08,610
right so we there are some actual users

00:35:07,290 --> 00:35:10,800
of this which i think is interesting cuz

00:35:08,610 --> 00:35:12,330
I thought there wouldn't be any there

00:35:10,800 --> 00:35:15,140
want to move this into the next version

00:35:12,330 --> 00:35:15,140
of POSIX do you also use

00:35:21,370 --> 00:35:24,670
yeah it's

00:35:29,680 --> 00:35:34,760
right that's that's we'll get to this

00:35:31,910 --> 00:35:36,859
problem um so that there are facilities

00:35:34,760 --> 00:35:39,200
for doing this on but it's just FreeBSD

00:35:36,859 --> 00:35:42,319
and Darwin the ACL three-man pages is

00:35:39,200 --> 00:35:44,059
both on FreeBSD in Darwin set F ACL set

00:35:42,319 --> 00:35:45,650
file access control this is something

00:35:44,059 --> 00:35:48,410
they want to push into politics I don't

00:35:45,650 --> 00:35:50,809
think it's there yet though there's also

00:35:48,410 --> 00:35:54,200
mandatory access controls which nobody

00:35:50,809 --> 00:35:55,819
can really define succinctly so it's a

00:35:54,200 --> 00:35:59,390
bit of a mystery world but essentially

00:35:55,819 --> 00:36:00,559
it's this whole military grades defense

00:35:59,390 --> 00:36:02,329
measures that I was talking about that

00:36:00,559 --> 00:36:02,960
we're done again in the 70s using the

00:36:02,329 --> 00:36:06,200
same people

00:36:02,960 --> 00:36:08,089
Biba multi-level security pella pallulah

00:36:06,200 --> 00:36:10,369
that were done of course in the 1970s as

00:36:08,089 --> 00:36:14,869
well so it's what's what's old is new

00:36:10,369 --> 00:36:16,490
again I suggest that people look at

00:36:14,869 --> 00:36:18,440
these man pages and try to figure out

00:36:16,490 --> 00:36:21,170
what they do because I think it's

00:36:18,440 --> 00:36:23,720
impossible there are many of them

00:36:21,170 --> 00:36:26,420
they're all over the place and it

00:36:23,720 --> 00:36:27,740
doesn't really say just do this it says

00:36:26,420 --> 00:36:29,299
you have to know everything about your

00:36:27,740 --> 00:36:30,650
system and you have to do this and you

00:36:29,299 --> 00:36:33,920
have to do that it's very complicated

00:36:30,650 --> 00:36:35,180
and that's not necessarily bad about the

00:36:33,920 --> 00:36:36,349
writer of the documentation it could be

00:36:35,180 --> 00:36:38,809
that the system itself was very

00:36:36,349 --> 00:36:40,190
complicated either away I tried reading

00:36:38,809 --> 00:36:42,049
it all I went through everything that

00:36:40,190 --> 00:36:44,690
was there I finished it I still didn't

00:36:42,049 --> 00:36:46,069
really understand it we will talk about

00:36:44,690 --> 00:36:49,700
sandbox and nets and that's I'm gonna

00:36:46,069 --> 00:36:51,700
hold up as has a good framework that was

00:36:49,700 --> 00:36:53,630
kind of screwed up because it's Apple

00:36:51,700 --> 00:36:55,880
chaos I'm not gonna say much about

00:36:53,630 --> 00:36:58,730
because again it doesn't have a userland

00:36:55,880 --> 00:37:04,549
interface we can't really use it chaos

00:36:58,730 --> 00:37:07,309
was influenced by Mac 10.4 sandboxing

00:37:04,549 --> 00:37:08,960
which was in turn from trusted BSD so

00:37:07,309 --> 00:37:10,790
chaos was influenced at least by the

00:37:08,960 --> 00:37:12,549
same things we just saw but again I'm

00:37:10,790 --> 00:37:16,190
not gonna go over it

00:37:12,549 --> 00:37:17,869
sandbox in it is very useful um it's on

00:37:16,190 --> 00:37:19,819
your Macs and if you want to send box a

00:37:17,869 --> 00:37:22,040
given process you've run one function

00:37:19,819 --> 00:37:24,260
and that's all and you tell that

00:37:22,040 --> 00:37:26,299
function what do I want this process in

00:37:24,260 --> 00:37:29,359
its children to be able to do no

00:37:26,299 --> 00:37:30,799
internet no network no writing no right

00:37:29,359 --> 00:37:35,799
except temporary in just pure

00:37:30,799 --> 00:37:38,990
computation that's the easiest way of

00:37:35,799 --> 00:37:40,040
doing sandboxes or resource constrains

00:37:38,990 --> 00:37:41,860
that I was able to find

00:37:40,040 --> 00:37:43,970
but it's only of course on Mac and

00:37:41,860 --> 00:37:47,270
actually finding the fact that that

00:37:43,970 --> 00:37:47,990
exists was quite difficult and and we'll

00:37:47,270 --> 00:37:50,720
see

00:37:47,990 --> 00:37:53,570
yeah the documentation for sandbox in it

00:37:50,720 --> 00:37:55,520
is is basically that so you are

00:37:53,570 --> 00:37:58,940
basically seeing the man page right now

00:37:55,520 --> 00:38:00,920
it's it's awful a much better read for

00:37:58,940 --> 00:38:02,060
what sandbox and it does is available in

00:38:00,920 --> 00:38:03,620
the case study will briefly talk about

00:38:02,060 --> 00:38:06,500
cuz I'm running at a time which is

00:38:03,620 --> 00:38:08,810
OpenSSH which would revealed to me what

00:38:06,500 --> 00:38:10,310
this does not do now this is not

00:38:08,810 --> 00:38:13,600
available anywhere in the documentation

00:38:10,310 --> 00:38:15,830
I have no idea how the guys who wrote

00:38:13,600 --> 00:38:18,770
the sandbox thing which we'll talk about

00:38:15,830 --> 00:38:20,510
for OpenSSH figured out what these

00:38:18,770 --> 00:38:22,970
actually do or do not do maybe it was

00:38:20,510 --> 00:38:26,360
just trial and error but it's a great

00:38:22,970 --> 00:38:28,640
interface and I think we can learn

00:38:26,360 --> 00:38:30,020
something from it because really if we

00:38:28,640 --> 00:38:32,180
think about sandbox in our programs

00:38:30,020 --> 00:38:33,920
that's all we really care about you know

00:38:32,180 --> 00:38:35,540
all we want to do is is set some broad

00:38:33,920 --> 00:38:38,000
limitations and then maybe fine-tune

00:38:35,540 --> 00:38:39,770
them later but unfortunately it's just

00:38:38,000 --> 00:38:42,890
completely undocumented which is a

00:38:39,770 --> 00:38:44,270
problem capsicum is the last and

00:38:42,890 --> 00:38:48,620
probably the most complicated of all of

00:38:44,270 --> 00:38:50,600
these very recent work it's also kind of

00:38:48,620 --> 00:38:53,660
hard to wrap your mind around because

00:38:50,600 --> 00:38:55,460
capsicum is is very large and capsicum

00:38:53,660 --> 00:38:59,630
actually requires us to think somewhat

00:38:55,460 --> 00:39:00,800
differently about unix because we know

00:38:59,630 --> 00:39:02,060
what a descriptor is we have file

00:39:00,800 --> 00:39:04,520
descriptors we have file descriptors

00:39:02,060 --> 00:39:06,110
that are really sockets capsicum also

00:39:04,520 --> 00:39:09,020
introduces a descriptor that's for

00:39:06,110 --> 00:39:11,510
processes as well so it started kind of

00:39:09,020 --> 00:39:13,960
jams this into the whole file descriptor

00:39:11,510 --> 00:39:16,010
model and it does that with PD Fork

00:39:13,960 --> 00:39:17,480
however people are actually using

00:39:16,010 --> 00:39:19,490
capsicum on FreeBSD which makes me

00:39:17,480 --> 00:39:21,190
really happy there's a list of them out

00:39:19,490 --> 00:39:23,710
there you can just search through the

00:39:21,190 --> 00:39:27,200
the source tree to find it but we have

00:39:23,710 --> 00:39:29,690
OBS patch BSD of TCP dump fetch be zip

00:39:27,200 --> 00:39:32,300
to syslog D and so on these are all

00:39:29,690 --> 00:39:33,830
actually using the capabilities that are

00:39:32,300 --> 00:39:36,320
available from Pat capsicum which is

00:39:33,830 --> 00:39:38,060
great so that that gives me a little bit

00:39:36,320 --> 00:39:43,820
of hope but it's really complicated to

00:39:38,060 --> 00:39:45,140
use all the same so so this is the last

00:39:43,820 --> 00:39:47,030
thing I'm gonna do because I'm pretty

00:39:45,140 --> 00:39:49,910
much out of time right now there's one

00:39:47,030 --> 00:39:51,950
program that I found that really tries

00:39:49,910 --> 00:39:53,359
to bring all of the sandbox in together

00:39:51,950 --> 00:39:57,489
that we can really learn from Annette's

00:39:53,359 --> 00:39:59,720
OpenSSH whose use OpenSSH sandbox mode

00:39:57,489 --> 00:40:01,279
you know you all should raise your hand

00:39:59,720 --> 00:40:03,890
because you're using it by default I

00:40:01,279 --> 00:40:05,809
think so it's it's it's there you are

00:40:03,890 --> 00:40:07,849
being protected every time you use SSH

00:40:05,809 --> 00:40:09,799
that should give you this warm nice

00:40:07,849 --> 00:40:11,900
feeling that that somebody out there is

00:40:09,799 --> 00:40:14,720
really thinking I could screw all of

00:40:11,900 --> 00:40:18,920
this up probably gonna make sure I don't

00:40:14,720 --> 00:40:22,220
do that so they send box and and that's

00:40:18,920 --> 00:40:23,869
great for us as the users but I feel

00:40:22,220 --> 00:40:26,150
badly for the people who develop this

00:40:23,869 --> 00:40:28,430
because they had to take that huge list

00:40:26,150 --> 00:40:31,430
we saw earlier and say I need to make

00:40:28,430 --> 00:40:32,630
this portable to Linux the BS DS I'm

00:40:31,430 --> 00:40:35,569
sure there are other operating systems

00:40:32,630 --> 00:40:38,630
out there I don't know and they have to

00:40:35,569 --> 00:40:47,839
consider all of that so actually doing

00:40:38,630 --> 00:40:49,670
sandboxing and OpenSSH yes right I I'm

00:40:47,839 --> 00:40:54,799
aware of that I'm just I'm keeping it as

00:40:49,670 --> 00:40:57,200
general as possible so in order to do

00:40:54,799 --> 00:41:00,410
sandboxing on OpenSSH it's about a

00:40:57,200 --> 00:41:02,569
thousand lines to do that portably now

00:41:00,410 --> 00:41:05,200
think about how many bugs can live in

00:41:02,569 --> 00:41:08,239
those thousand lines it's a little scary

00:41:05,200 --> 00:41:10,249
so this is a list on if we go to the

00:41:08,239 --> 00:41:12,319
OpenSSH source code which we probably

00:41:10,249 --> 00:41:14,630
all have somewhere because it's a good

00:41:12,319 --> 00:41:16,460
study and we look at how it's actually

00:41:14,630 --> 00:41:18,319
involving sandboxing in and when they

00:41:16,460 --> 00:41:19,970
say sandbox all they really mean is i

00:41:18,319 --> 00:41:22,309
want to take this process and its

00:41:19,970 --> 00:41:23,630
children and disallow them access to the

00:41:22,309 --> 00:41:25,519
environment certain parts of the

00:41:23,630 --> 00:41:28,519
environment which from their perspective

00:41:25,519 --> 00:41:29,210
is basically everything in order to do

00:41:28,519 --> 00:41:32,029
that properly

00:41:29,210 --> 00:41:37,599
it took a thousand lines that's scary I

00:41:32,029 --> 00:41:37,599
mean this is yeah yeah without second

00:41:39,609 --> 00:41:44,210
right it's it's per portability yeah

00:41:42,680 --> 00:41:46,279
so the reason we have so many is because

00:41:44,210 --> 00:41:47,509
all these security things we talked

00:41:46,279 --> 00:41:49,730
about you know what I had written next

00:41:47,509 --> 00:41:51,799
to it which BSD it's available on some

00:41:49,730 --> 00:41:54,349
were open BSD some were FreeBSD some are

00:41:51,799 --> 00:41:56,299
Darwin so in order to write a sandbox in

00:41:54,349 --> 00:41:58,640
for portable code you have to think

00:41:56,299 --> 00:41:59,359
about all of them and it's it's a little

00:41:58,640 --> 00:42:01,849
bit of a nightmare

00:41:59,359 --> 00:42:03,140
so second filters for Linux we can

00:42:01,849 --> 00:42:07,320
disregard that so that brings us down

00:42:03,140 --> 00:42:10,180
only to about six or seven hundred lines

00:42:07,320 --> 00:42:11,740
so in terms of security that it's just a

00:42:10,180 --> 00:42:13,960
little ridiculous and it's no wonder

00:42:11,740 --> 00:42:16,390
that in nineteen seventy five people

00:42:13,960 --> 00:42:19,930
were saying it's just too complicated to

00:42:16,390 --> 00:42:21,490
secure our own systems simply because it

00:42:19,930 --> 00:42:23,230
really is it takes seven hundred lines

00:42:21,490 --> 00:42:25,599
to do and these guys are extremely good

00:42:23,230 --> 00:42:27,910
too now I recommend reading the source

00:42:25,599 --> 00:42:31,030
code by the way it's it shows you what

00:42:27,910 --> 00:42:35,500
the documentation for the sandbox

00:42:31,030 --> 00:42:37,119
systems does not tell you the

00:42:35,500 --> 00:42:39,190
methodology they use is just privilege

00:42:37,119 --> 00:42:41,680
separation and they have to do that

00:42:39,190 --> 00:42:43,720
simply because of systrace so systrace

00:42:41,680 --> 00:42:51,339
is the most complicated of all of these

00:42:43,720 --> 00:42:53,890
if we look at the list that I had so the

00:42:51,339 --> 00:42:56,320
first one jemaldin said UID or probably

00:42:53,890 --> 00:43:00,369
the most difficult to root is just one

00:42:56,320 --> 00:43:04,030
command set or limit the same jail has a

00:43:00,369 --> 00:43:05,290
system call interface but it's a

00:43:04,030 --> 00:43:07,330
container so we're not really gonna go

00:43:05,290 --> 00:43:09,040
into it systrace hugely complicated I

00:43:07,330 --> 00:43:11,980
mean anybody who looks at the systrace

00:43:09,040 --> 00:43:14,230
main page it's just it's very long

00:43:11,980 --> 00:43:17,920
nobody actually understands the POSIX 1e

00:43:14,230 --> 00:43:19,330
so anyway chaos also we're not gonna

00:43:17,920 --> 00:43:22,780
talk about sandbox init one function

00:43:19,330 --> 00:43:26,099
very easy capsicum also slightly more

00:43:22,780 --> 00:43:30,580
complicated but not as bad as this trace

00:43:26,099 --> 00:43:32,140
so anyway it just uses privilege

00:43:30,580 --> 00:43:34,630
separation and it has to do that because

00:43:32,140 --> 00:43:36,160
the systrace it's you have to look at

00:43:34,630 --> 00:43:39,520
the stores yourself it's not easy to do

00:43:36,160 --> 00:43:41,170
this a small other case study is is a

00:43:39,520 --> 00:43:43,510
program that I had written that was

00:43:41,170 --> 00:43:46,060
modeled after OpenSSH a sandbox for CGI

00:43:43,510 --> 00:43:47,530
framework just as comp I wanted to make

00:43:46,060 --> 00:43:50,109
it really easy for myself I want to have

00:43:47,530 --> 00:43:52,390
sandboxing and still without even

00:43:50,109 --> 00:43:53,530
including Linux it's already almost said

00:43:52,390 --> 00:43:56,109
a thousand lines it will be there very

00:43:53,530 --> 00:43:57,730
soon it's just no matter what no matter

00:43:56,109 --> 00:43:59,349
how you do it it's going to be

00:43:57,730 --> 00:44:05,500
complicated and this is a problem it's

00:43:59,349 --> 00:44:07,119
like it's a major problem um so anyway

00:44:05,500 --> 00:44:08,950
we're now I think at the very close of

00:44:07,119 --> 00:44:10,599
this so I thought I would leave you with

00:44:08,950 --> 00:44:12,250
something that doesn't really make sense

00:44:10,599 --> 00:44:14,530
anymore it's a quote by Ken Thompson

00:44:12,250 --> 00:44:16,450
which says you can't trust code that you

00:44:14,530 --> 00:44:19,619
do not totally create yourself who

00:44:16,450 --> 00:44:19,619
trusts their own code

00:44:20,380 --> 00:44:24,350
you want to raise your hands

00:44:22,610 --> 00:44:32,590
evil whole want to like it but now

00:44:24,350 --> 00:44:35,900
you're not gonna do it because of mmm

00:44:32,590 --> 00:44:40,280
yes what's the expression about roads

00:44:35,900 --> 00:44:43,220
and good intentions so this this this

00:44:40,280 --> 00:44:44,450
quote I think guided a lot of people in

00:44:43,220 --> 00:44:46,010
terms of how they think about security

00:44:44,450 --> 00:44:48,080
it's the whole do it yourself and not

00:44:46,010 --> 00:44:50,960
invented here but we make so many

00:44:48,080 --> 00:44:52,640
mistakes as it is that I mean it's it's

00:44:50,960 --> 00:44:53,860
ridiculous of course were they're not

00:44:52,640 --> 00:44:56,150
intentional mistakes

00:44:53,860 --> 00:44:59,420
we're not intentionally trying to damage

00:44:56,150 --> 00:45:01,160
our systems but probably our library

00:44:59,420 --> 00:45:04,280
writers are also intentionally not

00:45:01,160 --> 00:45:06,560
trying to use scanf or they're

00:45:04,280 --> 00:45:08,000
intentionally not trying to use gets or

00:45:06,560 --> 00:45:10,520
something like this but they might have

00:45:08,000 --> 00:45:11,720
them in there so you know this is

00:45:10,520 --> 00:45:13,430
something that we really should take

00:45:11,720 --> 00:45:15,590
away that it's not exactly true you

00:45:13,430 --> 00:45:19,100
can't trust yourself how are you gonna

00:45:15,590 --> 00:45:20,660
deal with that and unfortunately you're

00:45:19,100 --> 00:45:23,240
not gonna deal with it with less than a

00:45:20,660 --> 00:45:25,190
thousand lines so this is my favorite

00:45:23,240 --> 00:45:26,750
picture by the way in the world it's a

00:45:25,190 --> 00:45:28,220
case you can't see it it's a dog sitting

00:45:26,750 --> 00:45:30,320
at a computer saying I have no idea what

00:45:28,220 --> 00:45:32,480
I'm doing and when I was writing in a

00:45:30,320 --> 00:45:35,720
thousand lines for sandboxing I really

00:45:32,480 --> 00:45:39,320
felt like that it's like you know the

00:45:35,720 --> 00:45:40,940
documentation was wrong the or just so

00:45:39,320 --> 00:45:43,250
inscrutable I had no idea what I was

00:45:40,940 --> 00:45:45,290
doing things just failed left and right

00:45:43,250 --> 00:45:46,940
trying to set our limit actually using

00:45:45,290 --> 00:45:48,920
that to limit the number of file

00:45:46,940 --> 00:45:50,480
descriptors you have open you don't know

00:45:48,920 --> 00:45:52,520
how many file descriptors you already

00:45:50,480 --> 00:45:54,800
have open the start very easily so you

00:45:52,520 --> 00:45:56,150
can't just say you know I want no file

00:45:54,800 --> 00:45:59,690
descriptors your program is gonna crash

00:45:56,150 --> 00:46:02,720
like that so it's it's it's very

00:45:59,690 --> 00:46:05,360
ponderous there's a bit of a downer I

00:46:02,720 --> 00:46:09,820
know but that's that's the state of

00:46:05,360 --> 00:46:09,820
affairs thank you

00:46:12,250 --> 00:46:16,709
[Applause]

00:46:30,200 --> 00:46:34,190
I'm wondering a bit what can be done

00:46:33,119 --> 00:46:37,380
about it

00:46:34,190 --> 00:46:42,960
and one thing is obvious you could take

00:46:37,380 --> 00:46:46,110
code like an TPD or OpenSSH and look at

00:46:42,960 --> 00:46:48,750
it and try to do something similar that

00:46:46,110 --> 00:46:49,410
is for the short-term probably not that

00:46:48,750 --> 00:46:51,960
bad

00:46:49,410 --> 00:46:53,940
but in the longer term you want

00:46:51,960 --> 00:46:57,900
something simpler the solution probably

00:46:53,940 --> 00:47:01,470
isn't to just invent a tense framework

00:46:57,900 --> 00:47:03,869
what would you say where should we go so

00:47:01,470 --> 00:47:06,390
I personally like I like the sandbox

00:47:03,869 --> 00:47:08,430
init concepts I like it because it's

00:47:06,390 --> 00:47:09,930
easy and that is for me is really

00:47:08,430 --> 00:47:12,270
important I want to be able to in a

00:47:09,930 --> 00:47:13,830
single command basically say I want to

00:47:12,270 --> 00:47:17,369
be able to do nothing but look at the

00:47:13,830 --> 00:47:19,170
file system no sockets nothing fancy

00:47:17,369 --> 00:47:22,020
just file system I also want to be able

00:47:19,170 --> 00:47:23,369
to say just network or nothing at all

00:47:22,020 --> 00:47:25,080
because most the stuff I do is pure

00:47:23,369 --> 00:47:27,510
computation and I think that they got

00:47:25,080 --> 00:47:30,210
that right unfortunately what that

00:47:27,510 --> 00:47:32,790
really means is a different story what

00:47:30,210 --> 00:47:35,700
does it mean not to be able to open

00:47:32,790 --> 00:47:37,680
files or sockets there's a lot of wiggle

00:47:35,700 --> 00:47:41,220
room there and the documentation is very

00:47:37,680 --> 00:47:42,840
poor also the moment you start to need

00:47:41,220 --> 00:47:45,960
more than that the moment you say I

00:47:42,840 --> 00:47:47,340
don't want any files except one that's

00:47:45,960 --> 00:47:48,420
where we run into a major problem

00:47:47,340 --> 00:47:50,070
because we don't have something that

00:47:48,420 --> 00:47:52,440
that bridges the gap there and I think

00:47:50,070 --> 00:47:54,119
capabilities tries to do this by saying

00:47:52,440 --> 00:47:56,280
you can just restrict everything by

00:47:54,119 --> 00:47:58,530
defaults and then you can add in little

00:47:56,280 --> 00:47:59,910
bits at a time that you want it's really

00:47:58,530 --> 00:48:01,560
the opposite you say what you want and

00:47:59,910 --> 00:48:04,859
then you just allow everything else but

00:48:01,560 --> 00:48:08,460
I think that there needs to be a lot of

00:48:04,859 --> 00:48:10,560
thought done into how to I'm not gonna

00:48:08,460 --> 00:48:12,150
say markets I'm gonna say documents but

00:48:10,560 --> 00:48:13,980
I really mean markets and the tools that

00:48:12,150 --> 00:48:16,020
are out there already because they're

00:48:13,980 --> 00:48:18,240
very poorly explained to the extent that

00:48:16,020 --> 00:48:20,490
it takes hours just to understand even

00:48:18,240 --> 00:48:22,170
the most basics and usually what you end

00:48:20,490 --> 00:48:23,030
up doing is with what I did I just

00:48:22,170 --> 00:48:24,710
abandon look

00:48:23,030 --> 00:48:26,690
the documentation and I look to what

00:48:24,710 --> 00:48:30,740
other people had done instead of looking

00:48:26,690 --> 00:48:37,010
at Mt PD I looked at SSH because I knew

00:48:30,740 --> 00:48:40,040
that it had a sandbox about a tip ntpd

00:48:37,010 --> 00:48:43,820
only difference without privilege

00:48:40,040 --> 00:48:46,670
anymore because it after all right I

00:48:43,820 --> 00:48:50,090
just want to set the clock and what we

00:48:46,670 --> 00:48:52,910
did is introducing absolute device that

00:48:50,090 --> 00:48:56,030
lower settings setting the clock from

00:48:52,910 --> 00:49:00,350
ioctl and the file permission to observe

00:48:56,030 --> 00:49:02,030
the device rosa ntpd to do it as a user

00:49:00,350 --> 00:49:03,470
right and I think that that's also the

00:49:02,030 --> 00:49:05,150
easy case too because we only think

00:49:03,470 --> 00:49:07,280
about mtbd all it's doing is basically

00:49:05,150 --> 00:49:09,620
one thing but a lot of the programs that

00:49:07,280 --> 00:49:13,340
we write or accessing a few files a

00:49:09,620 --> 00:49:15,140
database usually you know sockets one or

00:49:13,340 --> 00:49:17,300
two things either a database connection

00:49:15,140 --> 00:49:20,060
or maybe our PC or something like this

00:49:17,300 --> 00:49:23,240
so it's never as easy as we want it to

00:49:20,060 --> 00:49:25,010
be but I think that the whole concept of

00:49:23,240 --> 00:49:26,930
starting with denying everything and

00:49:25,010 --> 00:49:29,720
then adding it in is useful but it makes

00:49:26,930 --> 00:49:31,340
all of us work much harder so England

00:49:29,720 --> 00:49:32,720
answer your question really I don't know

00:49:31,340 --> 00:49:34,070
I don't know what the good approach is

00:49:32,720 --> 00:49:37,280
all I know is that what we're doing now

00:49:34,070 --> 00:49:39,410
didn't work before and it still doesn't

00:49:37,280 --> 00:49:42,560
work now because nobody's using it if

00:49:39,410 --> 00:49:44,300
only open SSH and NTP D and privilege

00:49:42,560 --> 00:49:47,050
separation for a few others are really

00:49:44,300 --> 00:49:49,340
using any sort of security whatsoever

00:49:47,050 --> 00:49:51,440
that's either we think that we're

00:49:49,340 --> 00:49:53,690
brilliant and obviously we don't or we

00:49:51,440 --> 00:49:55,880
just don't understand I mean it's it's

00:49:53,690 --> 00:49:57,980
it's one or the other and I know that we

00:49:55,880 --> 00:50:01,610
are not what we're great were awesome

00:49:57,980 --> 00:50:02,960
but our code has bugs in it so how are

00:50:01,610 --> 00:50:05,180
we getting from we know our code has

00:50:02,960 --> 00:50:07,190
bugs in it to we're going to be

00:50:05,180 --> 00:50:08,210
exploited what do we do about it you

00:50:07,190 --> 00:50:11,780
know we need some sort of way of

00:50:08,210 --> 00:50:13,400
connecting these unfortunately I don't

00:50:11,780 --> 00:50:14,870
have a good solution right now all I

00:50:13,400 --> 00:50:17,570
know is that the problem exists and it's

00:50:14,870 --> 00:50:20,600
pretty significant so we have all the

00:50:17,570 --> 00:50:22,900
tools out there we have to make them

00:50:20,600 --> 00:50:22,900
work together

00:50:24,930 --> 00:50:30,870
let's thank our speakers

00:50:26,780 --> 00:50:30,870

YouTube URL: https://www.youtube.com/watch?v=DGY7qJBbG5c


