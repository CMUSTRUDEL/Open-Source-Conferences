Title: Smartcom’s control plane software, a customized version of FreeBSD - Boris Astardzhiev
Publication date: 2019-10-14
Playlist: EuroBSDcon 2014, Bulgaria
Description: 
	Abstract:

Smartcom Bulgaria’s switching family consists of Ethernet switches targeted at offering access and aggregation layer L2 and L3 switching solutions for FTTX deployments that satisfy today’s requirements for delivering TriplePlay services with appropriate levels of QoS and security.
The family offers fixed configuration (for the access layer), as well as modular configuration (for the aggregation layer) devices with up to 24x1GE + 4x10GE Ethernet ports.
The switches run Smartcom’s control plane software, a customized version of FreeBSD. The control plane software is modular, ensuring that, even in case of software problems, the switch will continue to operate with minimal or no service disruption.

Speaker biography:

Boris Astardzhiev is a senior developer in the R&D team for Smartcom Bulgaria and, as such, has been involved in the development of Smartcom’s line of CPE, Access and Aggregation Ethernet products since their inception. He comes from networking and software development background and has been in the industry for more than 8 years. *BSD user since 2002.
Captions: 
	00:00:02,060 --> 00:00:09,840
morning my name is Boris after Jeff and

00:00:06,480 --> 00:00:12,300
I work for a smart calm Bulgaria we are

00:00:09,840 --> 00:00:16,500
in the department and today I'm going to

00:00:12,300 --> 00:00:20,240
present you our control plane software

00:00:16,500 --> 00:00:24,779
which is a customized version of FreeBSD

00:00:20,240 --> 00:00:27,210
well a few words about the company smart

00:00:24,779 --> 00:00:30,810
calm Gary has been in the scene since

00:00:27,210 --> 00:00:33,660
1991 and we have approximately 100

00:00:30,810 --> 00:00:35,880
employees at present which split into

00:00:33,660 --> 00:00:37,559
three main departments integration

00:00:35,880 --> 00:00:40,020
microelectronics and research in

00:00:37,559 --> 00:00:43,890
development the integration well my

00:00:40,020 --> 00:00:46,320
colleagues there do deploy certain

00:00:43,890 --> 00:00:50,520
appliances for different projects mainly

00:00:46,320 --> 00:00:55,160
juniper infinera Audiocodes etc and

00:00:50,520 --> 00:00:58,559
micro electronics does well they create

00:00:55,160 --> 00:01:02,160
or actually invent techniques for making

00:00:58,559 --> 00:01:05,970
chips mainly MEMS related and the R&D

00:01:02,160 --> 00:01:09,409
department this were where I am well we

00:01:05,970 --> 00:01:14,659
are about 15 people and we try to create

00:01:09,409 --> 00:01:14,659
actually network appliances for

00:01:15,200 --> 00:01:21,990
difference for different eyes piece so

00:01:18,990 --> 00:01:27,119
that we can give them the ability to

00:01:21,990 --> 00:01:33,110
deliver the Triple Play service to their

00:01:27,119 --> 00:01:36,600
clients obviously data voice and video

00:01:33,110 --> 00:01:40,829
so how do you start in the middle of

00:01:36,600 --> 00:01:43,470
2007 we had actually this picture here

00:01:40,829 --> 00:01:46,799
in Bulgaria this is how I speech

00:01:43,470 --> 00:01:51,479
delivered well there are services and

00:01:46,799 --> 00:01:54,200
obviously as you may presume from time

00:01:51,479 --> 00:01:58,049
to time there were no services at all

00:01:54,200 --> 00:02:05,850
due to the weather conditions and due to

00:01:58,049 --> 00:02:09,330
the obviously bad infrastructure so we

00:02:05,850 --> 00:02:12,260
had to tackle this issue and hence our

00:02:09,330 --> 00:02:13,860
first manageable switch it has a

00:02:12,260 --> 00:02:15,930
protection against

00:02:13,860 --> 00:02:21,360
lightnings and we have certified them

00:02:15,930 --> 00:02:24,870
and it is called Smart Switch Pro 800 a

00:02:21,360 --> 00:02:27,960
motor or CPU lesson real tech it has

00:02:24,870 --> 00:02:34,730
eight 100 extra not copper ports and

00:02:27,960 --> 00:02:34,730
it's managed by a GUI so we wanted

00:02:35,970 --> 00:02:50,160
oh so we wanted to push things further

00:02:45,300 --> 00:02:56,150
okay everything's okay and yes our next

00:02:50,160 --> 00:02:56,150
family of switches called hsv-1 come on

00:02:56,780 --> 00:03:01,550
sorry yes I

00:03:07,390 --> 00:03:31,470
good they're a little better a little

00:03:12,700 --> 00:03:31,470
battery sorry so

00:03:31,769 --> 00:03:39,209
it doesn't work I think right now so but

00:03:35,909 --> 00:03:42,000
there you basically can hear me so I'll

00:03:39,209 --> 00:03:48,420
continue and stream

00:03:42,000 --> 00:03:51,689
well that's pity so this is how we

00:03:48,420 --> 00:03:56,159
wanted to push things further

00:03:51,689 --> 00:03:57,840
hence we created our second family of

00:03:56,159 --> 00:04:03,120
switches called edges we won they were

00:03:57,840 --> 00:04:06,450
arm9 with our nine CPU based on Ravel

00:04:03,120 --> 00:04:09,209
chipsets and they either had the dealer

00:04:06,450 --> 00:04:15,239
have twenty four or eight one hundred

00:04:09,209 --> 00:04:20,250
next a turncoat report or two one gig

00:04:15,239 --> 00:04:24,389
ports that were Linux based and actually

00:04:20,250 --> 00:04:25,889
the main focus was such that we can they

00:04:24,389 --> 00:04:28,949
were able to deliver a triple play

00:04:25,889 --> 00:04:32,780
service but in the middle of 2010 we had

00:04:28,949 --> 00:04:35,190
plenty of issues actually finding

00:04:32,780 --> 00:04:41,449
components and parts for manufacturing

00:04:35,190 --> 00:04:41,449
these switches and can we disable it

00:05:30,110 --> 00:05:38,680
so in the meanwhile we had a new that's

00:05:36,439 --> 00:05:38,680
bad

00:05:39,819 --> 00:05:50,719
well I disabled it but obviously the

00:05:43,939 --> 00:05:54,939
problem is there in my opinion well the

00:05:50,719 --> 00:05:57,289
the new requirement was such that

00:05:54,939 --> 00:05:59,539
actually whether we could create a layer

00:05:57,289 --> 00:06:02,990
three hardware switch obviously a router

00:05:59,539 --> 00:06:08,379
and we started contacting several

00:06:02,990 --> 00:06:13,520
vendors first of Broadcom mediatek

00:06:08,379 --> 00:06:16,550
formerly a link I think real tech as

00:06:13,520 --> 00:06:22,699
well and Marvel and well only Marvel

00:06:16,550 --> 00:06:27,979
gave us a chance we opened actually we

00:06:22,699 --> 00:06:31,669
have signed an NDA so that they could

00:06:27,979 --> 00:06:35,139
handle us their documentation and they

00:06:31,669 --> 00:06:37,879
proposed this to system on chips

00:06:35,139 --> 00:06:40,969
obviously the great thing about them was

00:06:37,879 --> 00:06:44,000
that this is how we could address the

00:06:40,969 --> 00:06:48,020
customers requirement we could redesign

00:06:44,000 --> 00:06:50,210
edge as we won and the great thing to me

00:06:48,020 --> 00:06:52,909
in my opinion was such that they had I

00:06:50,210 --> 00:06:56,150
they actually have identical registers

00:06:52,909 --> 00:06:58,940
so that we could deploy a single system

00:06:56,150 --> 00:07:02,870
and just trim some of the features and

00:06:58,940 --> 00:07:05,900
actually have two different switches so

00:07:02,870 --> 00:07:07,610
so the new appliance is a GSR laboratory

00:07:05,900 --> 00:07:10,370
distribution switch energy has with two

00:07:07,610 --> 00:07:12,560
axes switch substituting edges we won

00:07:10,370 --> 00:07:14,569
they were all well the the switches for

00:07:12,560 --> 00:07:16,159
mentioned they were all designed from

00:07:14,569 --> 00:07:19,310
the ground up in smartphone bugera both

00:07:16,159 --> 00:07:21,650
hardware and software so a few words

00:07:19,310 --> 00:07:24,529
about HD stars hardware it is a Marvel

00:07:21,650 --> 00:07:27,560
system on chip RV v CP with the single

00:07:24,529 --> 00:07:35,659
core one actually 800 megahertz clock

00:07:27,560 --> 00:07:37,250
speed 512 megabytes of memory and 512 a

00:07:35,659 --> 00:07:41,509
USB flash disk

00:07:37,250 --> 00:07:43,880
it has a modular architecture code swap

00:07:41,509 --> 00:07:50,240
architecture 24 1

00:07:43,880 --> 00:07:52,550
ports and up to 410 gig ports so the a

00:07:50,240 --> 00:07:54,830
few words about the alert to features

00:07:52,550 --> 00:07:56,960
and layer three features as well well we

00:07:54,830 --> 00:07:58,330
have we support up to 16,000 MAC

00:07:56,960 --> 00:08:00,380
addresses in hardware

00:07:58,330 --> 00:08:04,870
we support jumbo frames will ask

00:08:00,380 --> 00:08:09,380
obviously stacking layer 3 there are

00:08:04,870 --> 00:08:13,910
30,000 T common trees for routing 4000

00:08:09,380 --> 00:08:21,080
which are for Arps we obviously support

00:08:13,910 --> 00:08:23,830
a CL based routing and a CLS QoS happy

00:08:21,080 --> 00:08:30,280
multicast on cutroso and what's more

00:08:23,830 --> 00:08:34,400
fuels about edges v2 hardware well it is

00:08:30,280 --> 00:08:39,849
it actually has a similar system on chip

00:08:34,400 --> 00:08:45,560
in it we put a little less memory their

00:08:39,849 --> 00:08:51,200
128th and few words about the interfaces

00:08:45,560 --> 00:08:55,220
24 not speed SP rj45 ports and for combo

00:08:51,200 --> 00:09:00,040
1 gig combo ports so this is actually a

00:08:55,220 --> 00:09:00,040
trimmed version of the edges are here so

00:09:00,100 --> 00:09:10,520
it is the brand-name tone 4 edges are

00:09:05,420 --> 00:09:14,270
here is the here's the edges are Ross

00:09:10,520 --> 00:09:16,520
that will be Ross and our CPE again the

00:09:14,270 --> 00:09:18,080
main focus research that we deliver the

00:09:16,520 --> 00:09:20,270
ability to our customers so that they

00:09:18,080 --> 00:09:24,230
can deliver the Triple Play service to

00:09:20,270 --> 00:09:27,920
their customers and so enough with the

00:09:24,230 --> 00:09:31,010
introduction the software choice way we

00:09:27,920 --> 00:09:33,770
choose actually freebsd why of course

00:09:31,010 --> 00:09:39,740
due to the bsd license it's more

00:09:33,770 --> 00:09:41,720
commercial friendly and well the marvel

00:09:39,740 --> 00:09:44,690
system on chips well they had support at

00:09:41,720 --> 00:09:47,660
that time in the 8th branch and this is

00:09:44,690 --> 00:09:49,820
what we use and obviously it's not that

00:09:47,660 --> 00:09:52,880
easy to jump to a newer version but I

00:09:49,820 --> 00:09:54,620
will say a few words about it later we

00:09:52,880 --> 00:09:57,830
were very inspired by net graph at that

00:09:54,620 --> 00:10:01,340
time and to me without starting a flame

00:09:57,830 --> 00:10:04,250
or here well FreeBSD has the biggest

00:10:01,340 --> 00:10:07,100
music community and this is great

00:10:04,250 --> 00:10:11,450
so let me is the head support for our

00:10:07,100 --> 00:10:13,880
chips as well but well they lacked net

00:10:11,450 --> 00:10:16,850
graph in the mainline and this was an

00:10:13,880 --> 00:10:19,460
argument to us OpenBSD did not support

00:10:16,850 --> 00:10:22,250
our chips so the argument actually in

00:10:19,460 --> 00:10:24,410
the decision was quite political and we

00:10:22,250 --> 00:10:29,360
had to start immediately so that we can

00:10:24,410 --> 00:10:31,190
address the deadline which is a couple

00:10:29,360 --> 00:10:35,030
of months so we ended up finally with

00:10:31,190 --> 00:10:36,950
seven or six months I think well but

00:10:35,030 --> 00:10:44,240
I'll skip that valves know step any

00:10:36,950 --> 00:10:47,680
further so where do we start from well

00:10:44,240 --> 00:10:52,430
to be honest in terms of chronology well

00:10:47,680 --> 00:10:54,920
hardware and software well they went in

00:10:52,430 --> 00:10:59,690
parallel it's not just okay here's the

00:10:54,920 --> 00:11:03,140
hardware the guys in the harbor team had

00:10:59,690 --> 00:11:05,750
to actually design it and so forth so we

00:11:03,140 --> 00:11:07,670
ordered a demonstration board so that we

00:11:05,750 --> 00:11:14,570
can start from somewhere with our

00:11:07,670 --> 00:11:17,510
software obviously and now this will

00:11:14,570 --> 00:11:20,660
take that we have the hardware for

00:11:17,510 --> 00:11:24,620
granted so we use the u-boot so that we

00:11:20,660 --> 00:11:27,830
can initialize it initially we use its

00:11:24,620 --> 00:11:31,760
API so that we can connect it to the

00:11:27,830 --> 00:11:35,480
FreeBSD loader so the main idea is so

00:11:31,760 --> 00:11:38,390
that we can export to the freebies in

00:11:35,480 --> 00:11:40,700
order of the callback so that we can

00:11:38,390 --> 00:11:45,710
read from our USB disk yes we can read

00:11:40,700 --> 00:11:51,380
our kernel and you use the ub loader for

00:11:45,710 --> 00:11:55,580
that great project now that we could

00:11:51,380 --> 00:11:57,850
read actually the kernel we started

00:11:55,580 --> 00:12:02,120
reading images but obviously they were

00:11:57,850 --> 00:12:05,080
actually worked why because we had to

00:12:02,120 --> 00:12:09,260
tweak a little a little bit the API and

00:12:05,080 --> 00:12:10,970
yes I wrote a simple feature in the

00:12:09,260 --> 00:12:13,730
loader so that I can

00:12:10,970 --> 00:12:17,120
actually calculate the checksum of the

00:12:13,730 --> 00:12:18,860
image that I have read and to be sure

00:12:17,120 --> 00:12:23,120
that I can read it without erroneous

00:12:18,860 --> 00:12:29,150
bits so that on booting I would not

00:12:23,120 --> 00:12:32,020
experience any let's say crushes and

00:12:29,150 --> 00:12:34,370
hangs so let's move now let's say a few

00:12:32,020 --> 00:12:35,870
words about its design

00:12:34,370 --> 00:12:37,940
first of all let's split it between

00:12:35,870 --> 00:12:45,500
hardware and software here we have the

00:12:37,940 --> 00:12:48,830
Marvel Mac and all of its properties and

00:12:45,500 --> 00:12:52,930
features and ports obviously physical

00:12:48,830 --> 00:12:56,360
ports in kernel space we have a CPU port

00:12:52,930 --> 00:12:59,540
that represents and this is the place

00:12:56,360 --> 00:13:01,790
where we receive the intercepted packets

00:12:59,540 --> 00:13:03,760
now in control plane we need to

00:13:01,790 --> 00:13:08,960
intercept packets so that we can

00:13:03,760 --> 00:13:10,490
actually use some pieces of information

00:13:08,960 --> 00:13:12,860
of them so that we can configure

00:13:10,490 --> 00:13:14,840
features of the hardware then we have

00:13:12,860 --> 00:13:16,910
written a car dealer library well

00:13:14,840 --> 00:13:20,510
obviously we were given such a library

00:13:16,910 --> 00:13:24,050
but the license was not quite good and

00:13:20,510 --> 00:13:26,630
we had to write it our own so it's a

00:13:24,050 --> 00:13:30,740
criminal object basically with tons of

00:13:26,630 --> 00:13:33,830
interfaces in it and methods so that

00:13:30,740 --> 00:13:37,090
it's man ID such that we can control and

00:13:33,830 --> 00:13:46,760
tweak the features of the hardware here

00:13:37,090 --> 00:13:51,490
then well we have 28 physical ports well

00:13:46,760 --> 00:13:56,990
have it in mines like 28 Ethernet cards

00:13:51,490 --> 00:13:58,790
and now we wanted to create a logical

00:13:56,990 --> 00:14:02,000
representation in kernel for that and

00:13:58,790 --> 00:14:07,940
that would be this part here so we

00:14:02,000 --> 00:14:13,070
actually created 28 ports that that can

00:14:07,940 --> 00:14:16,430
easily be viewed by for instance typing

00:14:13,070 --> 00:14:22,490
I have config and this is our objects

00:14:16,430 --> 00:14:24,980
that actually represent the the physical

00:14:22,490 --> 00:14:29,350
part that is down there

00:14:24,980 --> 00:14:32,300
so in user space we use plenty of

00:14:29,350 --> 00:14:34,850
userland demons to facility etc they

00:14:32,300 --> 00:14:39,080
communicate with the kernel of course to

00:14:34,850 --> 00:14:41,060
various interfaces I did split ifconfig

00:14:39,080 --> 00:14:44,110
on purpose because this was our initial

00:14:41,060 --> 00:14:46,850
idea so that the this was the the main

00:14:44,110 --> 00:14:48,470
configuration facility where we had to

00:14:46,850 --> 00:14:52,610
start from something we obviously

00:14:48,470 --> 00:14:58,150
couldn't well say okay here's the COI we

00:14:52,610 --> 00:15:02,180
in the beginning we didn't Cafe CLI so

00:14:58,150 --> 00:15:04,340
the ifconfig facility was its main idea

00:15:02,180 --> 00:15:09,800
was such that we could control basic

00:15:04,340 --> 00:15:12,560
features of the hardware so the network

00:15:09,800 --> 00:15:15,290
stack this is our proposal to the

00:15:12,560 --> 00:15:18,020
network stack well we have plenty of

00:15:15,290 --> 00:15:24,980
ports as I said they can be either

00:15:18,020 --> 00:15:30,080
member of often aggregations or they can

00:15:24,980 --> 00:15:33,200
actually be assigned a villain trunk

00:15:30,080 --> 00:15:36,470
obviously here the unit each unit

00:15:33,200 --> 00:15:43,130
represent represents a single villain

00:15:36,470 --> 00:15:45,800
for that port and well they have plenty

00:15:43,130 --> 00:15:48,560
of properties for instace pv iris this

00:15:45,800 --> 00:15:56,990
is generic here and some of them in here

00:15:48,560 --> 00:16:00,860
it actually properties of the interface

00:15:56,990 --> 00:16:07,910
that is below them so for instance let's

00:16:00,860 --> 00:16:11,920
say that I want to bridge two interfaces

00:16:07,910 --> 00:16:14,840
for for instance a port in a villain in

00:16:11,920 --> 00:16:17,030
one and same bridge actually so

00:16:14,840 --> 00:16:19,250
sometimes in control plane you have to

00:16:17,030 --> 00:16:22,310
do that you have to use some somehow

00:16:19,250 --> 00:16:25,010
unite them against here's the bridge

00:16:22,310 --> 00:16:27,020
part it has obviously again the property

00:16:25,010 --> 00:16:32,090
of a villain and it has to be the same

00:16:27,020 --> 00:16:34,760
with its unit members then we have an

00:16:32,090 --> 00:16:38,510
interface called interface not quite

00:16:34,760 --> 00:16:42,440
wise name but nevermind it serves as a

00:16:38,510 --> 00:16:45,200
demultiplexer for different families for

00:16:42,440 --> 00:16:48,440
instance on top of it it has a sub

00:16:45,200 --> 00:16:51,200
interface here each sub interface

00:16:48,440 --> 00:16:54,560
forests carry a property of a family

00:16:51,200 --> 00:16:56,960
ipv4 ipv6 MPLS etc it is the main idea

00:16:54,560 --> 00:17:01,570
and here's the router party it operates

00:16:56,960 --> 00:17:04,730
on this layer 3 actually interfaces I

00:17:01,570 --> 00:17:06,770
must admit that we were very inspired by

00:17:04,730 --> 00:17:12,079
net graph for this whole infrastructure

00:17:06,770 --> 00:17:18,350
and well we actually ended up creating

00:17:12,079 --> 00:17:21,199
our own infrastructure so that we can

00:17:18,350 --> 00:17:24,350
actually manage the features of the

00:17:21,199 --> 00:17:28,040
switch so I'll give you an example here

00:17:24,350 --> 00:17:33,170
about the single relation here let's say

00:17:28,040 --> 00:17:37,820
I have a port I have net if structure it

00:17:33,170 --> 00:17:39,770
gets a pointer a VLAN trunk here that's

00:17:37,820 --> 00:17:42,170
know which means basically that we I

00:17:39,770 --> 00:17:46,820
don't have a unit on top of it

00:17:42,170 --> 00:17:49,010
well the is just a flag here

00:17:46,820 --> 00:17:51,680
it's another pointer and it point to a

00:17:49,010 --> 00:17:59,200
sub C of an aggregation and this is how

00:17:51,680 --> 00:17:59,200
we connect this how we actually say that

00:17:59,650 --> 00:18:05,270
well there is an aggregation on top of

00:18:03,200 --> 00:18:10,280
us and that this port is actually a

00:18:05,270 --> 00:18:14,060
member of a aggregation then in order to

00:18:10,280 --> 00:18:17,060
well we know I think that you know if

00:18:14,060 --> 00:18:19,660
input pointer here well it is usually

00:18:17,060 --> 00:18:24,980
assigned the ether input function and

00:18:19,660 --> 00:18:27,020
this quite busy function and we wanted

00:18:24,980 --> 00:18:31,190
to skip that so that we can gain certain

00:18:27,020 --> 00:18:35,960
amount of the optimization and we

00:18:31,190 --> 00:18:39,140
actually assign a callback procedure

00:18:35,960 --> 00:18:44,140
from the module that's on top of us in

00:18:39,140 --> 00:18:50,870
our case here the Lac module assigns a

00:18:44,140 --> 00:18:52,310
input procedure for its parent one so as

00:18:50,870 --> 00:18:54,190
we said we gained

00:18:52,310 --> 00:18:57,740
a certain amount of optimization but I

00:18:54,190 --> 00:19:01,730
can't give you performance results which

00:18:57,740 --> 00:19:03,890
is bad so how do it reverse actually the

00:19:01,730 --> 00:19:05,540
network stack here basically we received

00:19:03,890 --> 00:19:10,610
an interrupt here we fetch the frame

00:19:05,540 --> 00:19:15,470
then we end up in the CPU cyst

00:19:10,610 --> 00:19:21,740
actually call with the N buff now now we

00:19:15,470 --> 00:19:24,800
know the source port the source physical

00:19:21,740 --> 00:19:29,600
port and the source villain so we can

00:19:24,800 --> 00:19:33,650
send it to our module here then we check

00:19:29,600 --> 00:19:36,650
the glues actually and if there are none

00:19:33,650 --> 00:19:39,500
no we can pass further and this is how

00:19:36,650 --> 00:19:41,000
we actually traversed instead of calling

00:19:39,500 --> 00:19:47,300
error and put that that's quite busy

00:19:41,000 --> 00:19:52,400
that we will check all of these glues in

00:19:47,300 --> 00:19:54,530
the same time the aggro stall well

00:19:52,400 --> 00:19:56,390
sooner or later the other output

00:19:54,530 --> 00:19:59,750
function will transmit Park where we are

00:19:56,390 --> 00:20:03,140
handoff a and in the if start we are in

00:19:59,750 --> 00:20:07,730
queued with a am buff than win our if

00:20:03,140 --> 00:20:12,470
start procedure in in our module we the

00:20:07,730 --> 00:20:17,000
queue it and hand it to our CPU port

00:20:12,470 --> 00:20:19,070
module and its job is to actually

00:20:17,000 --> 00:20:22,760
compile the frame so that it can address

00:20:19,070 --> 00:20:26,860
the device so a few words about the

00:20:22,760 --> 00:20:29,300
unicast router well there are initial

00:20:26,860 --> 00:20:31,550
obstacles regarding the cobbler here I

00:20:29,300 --> 00:20:35,000
mean the T cam updates well they're

00:20:31,550 --> 00:20:37,310
quite tricky from time to time you must

00:20:35,000 --> 00:20:39,350
stand there the longest prefix match so

00:20:37,310 --> 00:20:46,910
that it is completely consistent with

00:20:39,350 --> 00:20:49,910
the FreeBSD folding table and well

00:20:46,910 --> 00:20:52,370
sometimes you in order to write an entry

00:20:49,910 --> 00:20:55,000
there you may need to fetch a certain

00:20:52,370 --> 00:20:57,920
block top like your entry there and then

00:20:55,000 --> 00:21:01,160
you must write the whole block if you

00:20:57,920 --> 00:21:05,690
don't do that you will you end up with

00:21:01,160 --> 00:21:09,500
inconsistencies and this actually will

00:21:05,690 --> 00:21:18,580
result in let's say software routing

00:21:09,500 --> 00:21:18,580
which is bad for 800 megahertz CPU so

00:21:19,149 --> 00:21:28,330
how do we actually populate our hardware

00:21:22,879 --> 00:21:31,210
well we need to intercept traffic for

00:21:28,330 --> 00:21:34,490
some time I mean we need to trigger Arps

00:21:31,210 --> 00:21:36,470
when - directly connected cost want to

00:21:34,490 --> 00:21:38,419
view each other from different ports and

00:21:36,470 --> 00:21:45,129
in different of villas when up

00:21:38,419 --> 00:21:48,440
they we need to actually eavesdrop this

00:21:45,129 --> 00:21:54,889
communication with the ARBs so we he

00:21:48,440 --> 00:21:57,529
placed a hook in in our input well in

00:21:54,889 --> 00:22:02,269
order to actually intercept traffic we

00:21:57,529 --> 00:22:06,320
need to actually intervene with the

00:22:02,269 --> 00:22:09,289
routing messages system so that we can

00:22:06,320 --> 00:22:14,590
update network prefixes in the T camp so

00:22:09,289 --> 00:22:17,120
that it sooner or later will give us

00:22:14,590 --> 00:22:20,120
some of the traffic so that we can

00:22:17,120 --> 00:22:23,149
actually control T camp and we have

00:22:20,120 --> 00:22:26,539
placed a hook into our to dispatch so

00:22:23,149 --> 00:22:29,690
that when there is a bundle of routing

00:22:26,539 --> 00:22:34,549
messages we can immediately go and

00:22:29,690 --> 00:22:38,450
populate the tecum the multicast router

00:22:34,549 --> 00:22:41,629
well we use freebies DS implementation

00:22:38,450 --> 00:22:45,860
options and routing to me it kind of

00:22:41,629 --> 00:22:47,960
works well in our application we need

00:22:45,860 --> 00:22:51,200
again to intercept not as data traffic

00:22:47,960 --> 00:22:57,320
in CPU so that we actually know this

00:22:51,200 --> 00:23:00,769
source source IPS of certain multicast

00:22:57,320 --> 00:23:02,720
streams and this is how we trigger NFC

00:23:00,769 --> 00:23:04,879
updates and of course to us so that we

00:23:02,720 --> 00:23:07,789
we can populate the cache there which

00:23:04,879 --> 00:23:11,029
placed hooks here and here and this is

00:23:07,789 --> 00:23:14,990
how this guy we can try the tick hand

00:23:11,029 --> 00:23:18,610
activity leader dysfunction well the

00:23:14,990 --> 00:23:21,070
harder give as disability and

00:23:18,610 --> 00:23:25,990
because from time to time when we are

00:23:21,070 --> 00:23:28,360
for instance a first router and aroused

00:23:25,990 --> 00:23:31,240
a rendezvous point we are obviously

00:23:28,360 --> 00:23:33,850
flooded with tons of multicast streams

00:23:31,240 --> 00:23:35,740
and we okay we intercept traffic for a

00:23:33,850 --> 00:23:38,529
second and then we insert the for

00:23:35,740 --> 00:23:40,750
instance a drop rule so that and track

00:23:38,529 --> 00:23:43,740
the T connectivity so that we can

00:23:40,750 --> 00:23:43,740
sustain the cache there

00:23:43,799 --> 00:23:53,649
well the MLC up calls are handled by a

00:23:49,620 --> 00:23:56,799
demon in user space and its main job is

00:23:53,649 --> 00:24:00,429
to actually populate the cache in

00:23:56,799 --> 00:24:04,149
Colonel few words about useful tools and

00:24:00,429 --> 00:24:07,090
implementation well we use plenty of

00:24:04,149 --> 00:24:11,289
facilities here BPF for intercepting

00:24:07,090 --> 00:24:13,049
packets role in remote go out for

00:24:11,289 --> 00:24:16,409
repetitive action advanced controls for

00:24:13,049 --> 00:24:17,529
syncing different proper properties

00:24:16,409 --> 00:24:19,899
synchronously

00:24:17,529 --> 00:24:23,470
ioctl scanner object docks for making

00:24:19,899 --> 00:24:27,370
things atomic well sockets this control

00:24:23,470 --> 00:24:30,669
Cisco's etc and in user space we have in

00:24:27,370 --> 00:24:33,010
the beginning used to lots of all can

00:24:30,669 --> 00:24:39,940
set operations here on I have config

00:24:33,010 --> 00:24:44,820
route SH and well we if we wrote

00:24:39,940 --> 00:24:48,039
actually to that is able to read certain

00:24:44,820 --> 00:24:50,139
well to read all the registers of the

00:24:48,039 --> 00:24:54,700
hardware so that we can track down books

00:24:50,139 --> 00:24:56,590
and misconfigured features then a few

00:24:54,700 --> 00:24:59,500
words about the layer two features

00:24:56,590 --> 00:25:02,070
actually there I've tried to generalize

00:24:59,500 --> 00:25:05,260
them here in in terms of control plane

00:25:02,070 --> 00:25:07,899
well first part there mainly interface

00:25:05,260 --> 00:25:10,480
property related I will enumerate some

00:25:07,899 --> 00:25:12,639
we run tagging CooCoo out learning link

00:25:10,480 --> 00:25:16,260
transitions dampening static MAC

00:25:12,639 --> 00:25:18,370
addresses they they look very different

00:25:16,260 --> 00:25:20,799
but in the same time they're just

00:25:18,370 --> 00:25:23,440
properties of certain objects in our

00:25:20,799 --> 00:25:26,529
network stack and the main idea is

00:25:23,440 --> 00:25:31,770
simple ideas okay we want to create a

00:25:26,529 --> 00:25:31,770
VLAN we issue an i io CTL

00:25:31,790 --> 00:25:35,840
create a villain and it creates an

00:25:33,710 --> 00:25:39,860
object that represents the the physical

00:25:35,840 --> 00:25:42,350
the physical part then we the villain

00:25:39,860 --> 00:25:44,270
interface is responsible for contacting

00:25:42,350 --> 00:25:48,020
our hardware libraries so that we can

00:25:44,270 --> 00:25:49,670
program the controller okay another

00:25:48,020 --> 00:25:53,540
example we want to intercept IGMP

00:25:49,670 --> 00:25:55,640
packets good then say it to the villain

00:25:53,540 --> 00:25:57,320
and its job is to contact again the

00:25:55,640 --> 00:26:01,010
library and this is how we will

00:25:57,320 --> 00:26:04,820
interpret IP packets in control plane

00:26:01,010 --> 00:26:08,770
actually intercept there are the second

00:26:04,820 --> 00:26:11,570
category packet interception Orient LACP

00:26:08,770 --> 00:26:13,820
rstp igmp snooping where we have to

00:26:11,570 --> 00:26:15,950
process certain group memberships DHCP

00:26:13,820 --> 00:26:18,170
snooping where we need to track certain

00:26:15,950 --> 00:26:23,030
States insert option

00:26:18,170 --> 00:26:28,430
82 and all the an obviously great

00:26:23,030 --> 00:26:32,450
feature here we are able to insert an

00:26:28,430 --> 00:26:34,610
allow rule in the ACL so that only the

00:26:32,450 --> 00:26:41,780
HP authorized the persons may have

00:26:34,610 --> 00:26:44,510
internet access well another example now

00:26:41,780 --> 00:26:48,770
that I can intercept IGMP packets

00:26:44,510 --> 00:26:53,860
I can create a daemon i Jim PD its main

00:26:48,770 --> 00:26:59,750
idea is to intercept RGB packets for

00:26:53,860 --> 00:27:03,790
slot 3 port 1010 this actually save pair

00:26:59,750 --> 00:27:06,830
and then as soon as I receive certain

00:27:03,790 --> 00:27:08,600
membership requests I can issue niced

00:27:06,830 --> 00:27:12,230
year so that I can program the cuddlers

00:27:08,600 --> 00:27:15,860
so that it will duplicate traffic

00:27:12,230 --> 00:27:17,390
instead of doing it in software there

00:27:15,860 --> 00:27:19,730
are three features again mainly pact

00:27:17,390 --> 00:27:21,230
interception oriented unicast routing to

00:27:19,730 --> 00:27:24,560
v1 not just route in policy-based

00:27:21,230 --> 00:27:28,400
routing well I simply we can easily use

00:27:24,560 --> 00:27:31,730
be SNMP D and take it for granted

00:27:28,400 --> 00:27:34,340
Pam sparse mode Beach PD we can use open

00:27:31,730 --> 00:27:35,510
Beach PD we can use quarter as well of

00:27:34,340 --> 00:27:38,510
course it's a little bit tricky because

00:27:35,510 --> 00:27:43,520
we had to tweak it with the routing

00:27:38,510 --> 00:27:45,500
messages and our infrastructure needs be

00:27:43,520 --> 00:27:47,690
reliable obviously layer

00:27:45,500 --> 00:27:50,030
feature I'll not step any further and

00:27:47,690 --> 00:27:53,180
another example here I have I have a

00:27:50,030 --> 00:27:56,150
pimp demon I set some options so that I

00:27:53,180 --> 00:27:59,060
can add a bundle of interfaces in IPM

00:27:56,150 --> 00:28:02,180
route then I program the hardware

00:27:59,060 --> 00:28:04,900
through the library I intercept p.m.

00:28:02,180 --> 00:28:07,490
Nigel P packets and multicast frames and

00:28:04,900 --> 00:28:10,690
for the configured interfaces sooner or

00:28:07,490 --> 00:28:18,830
later I I P input will be called so that

00:28:10,690 --> 00:28:20,900
it will end up in MFC cache mesh miss up

00:28:18,830 --> 00:28:27,320
course and this is how we will populate

00:28:20,900 --> 00:28:30,470
the cache an example here about non

00:28:27,320 --> 00:28:32,540
packet interception oriented features

00:28:30,470 --> 00:28:38,630
while routing preferences previously

00:28:32,540 --> 00:28:41,750
wouldn't give us a forwarding table that

00:28:38,630 --> 00:28:43,700
is aware of routing preferences and we

00:28:41,750 --> 00:28:48,610
obviously have to write a demon so that

00:28:43,700 --> 00:28:51,140
it can it could handle different

00:28:48,610 --> 00:28:55,490
actually identical routes with different

00:28:51,140 --> 00:29:00,860
preferences and choose the appropriate

00:28:55,490 --> 00:29:03,080
one so the quality of service we have

00:29:00,860 --> 00:29:07,100
plenty of rate limiter stone controls

00:29:03,080 --> 00:29:10,490
queues progress etc etc but in terms of

00:29:07,100 --> 00:29:16,790
control plane we had to make our CPU

00:29:10,490 --> 00:29:19,640
such that we could split the management

00:29:16,790 --> 00:29:23,540
traffic and the intercepted traffic in

00:29:19,640 --> 00:29:31,070
different queues because if we don't do

00:29:23,540 --> 00:29:35,300
that we may end up with actually the

00:29:31,070 --> 00:29:38,180
case that we would be unable to actually

00:29:35,300 --> 00:29:43,610
manage our switch and which and this is

00:29:38,180 --> 00:29:46,940
bad then now that we have packed all of

00:29:43,610 --> 00:29:52,640
this stuff how do we upgrade it how do

00:29:46,940 --> 00:29:55,250
we hand it to our customers well we use

00:29:52,640 --> 00:29:56,929
a modified version of nano bsd to make

00:29:55,250 --> 00:29:59,240
great project

00:29:56,929 --> 00:30:02,570
it gives redundancy

00:29:59,240 --> 00:30:06,020
we made it to have four slices that

00:30:02,570 --> 00:30:13,190
we'll see you FS for that we have two

00:30:06,020 --> 00:30:16,670
routes for route file systems well one

00:30:13,190 --> 00:30:19,580
of the two route file systems are is

00:30:16,670 --> 00:30:21,650
active and we have a config slice for

00:30:19,580 --> 00:30:24,140
holding configurations and we have a

00:30:21,650 --> 00:30:35,150
miscellaneous slice for testing purposes

00:30:24,140 --> 00:30:41,830
for instance well sometimes it's not

00:30:35,150 --> 00:30:45,980
quite actually good to upgrade a whole

00:30:41,830 --> 00:30:51,080
nan abuse the image and because it's

00:30:45,980 --> 00:30:53,960
slow well it will not actually spoil the

00:30:51,080 --> 00:30:54,620
service but it's slow and sometimes it's

00:30:53,960 --> 00:30:56,660
not necessary

00:30:54,620 --> 00:30:59,840
so I've ported the port collection to

00:30:56,660 --> 00:31:02,690
our needs so that it's a pretty

00:30:59,840 --> 00:31:07,160
customized one and it is so that it is

00:31:02,690 --> 00:31:10,160
focused on partial upgrades and it may

00:31:07,160 --> 00:31:15,559
cross build certain facilities of our

00:31:10,160 --> 00:31:18,860
software well obviously there will be

00:31:15,559 --> 00:31:23,059
little little or no service disruption

00:31:18,860 --> 00:31:26,120
well we we upgrade the kernel we will

00:31:23,059 --> 00:31:28,790
have service disruption but if I want to

00:31:26,120 --> 00:31:35,470
update a certain tool that is able to

00:31:28,790 --> 00:31:40,940
read certain counters and I tend to

00:31:35,470 --> 00:31:43,610
update its source quite frequently well

00:31:40,940 --> 00:31:49,540
maybe handing a single package to Lucas

00:31:43,610 --> 00:31:52,130
to the customer is obviously the right

00:31:49,540 --> 00:31:55,309
approach here so as I said it's

00:31:52,130 --> 00:31:59,000
convenient for partial braids now a few

00:31:55,309 --> 00:32:03,250
words about the COI way nowadays we have

00:31:59,000 --> 00:32:08,360
a see lights based on clich and it's a

00:32:03,250 --> 00:32:13,100
cisco like COI it's hierarchical we use

00:32:08,360 --> 00:32:16,460
luan and shell scripting in it and we

00:32:13,100 --> 00:32:18,410
sqlite3 the interesting here is that

00:32:16,460 --> 00:32:24,100
it's commit oriented instead of entering

00:32:18,410 --> 00:32:28,280
shoot has the juniper COI

00:32:24,100 --> 00:32:30,260
as a juniperus approach and now it's the

00:32:28,280 --> 00:32:32,000
desired way for configuring the device

00:32:30,260 --> 00:32:37,070
instead of just the issuing I have

00:32:32,000 --> 00:32:38,750
config shell scripts and etc etc a few

00:32:37,070 --> 00:32:42,410
words about the developing issues

00:32:38,750 --> 00:32:47,870
well the armed debugging in bolt in

00:32:42,410 --> 00:32:52,010
kernel space in user space well in CRO

00:32:47,870 --> 00:32:55,820
space we may use the JTAG and we can

00:32:52,010 --> 00:32:57,950
trace the kernel at some point but in

00:32:55,820 --> 00:33:01,340
user space it's quite hard in the ED

00:32:57,950 --> 00:33:04,460
branch so we have to to cope with that

00:33:01,340 --> 00:33:06,559
we of course do crush inspections we use

00:33:04,460 --> 00:33:09,320
classic dams to a swap partition or we

00:33:06,559 --> 00:33:12,650
use net dump great project

00:33:09,320 --> 00:33:15,230
well back traces and traces are hard as

00:33:12,650 --> 00:33:17,120
well but to me the toughest part is that

00:33:15,230 --> 00:33:18,860
sometimes I have to import certain

00:33:17,120 --> 00:33:21,320
patches in new stuff from FreeBSD and

00:33:18,860 --> 00:33:26,510
that's hard because the ED branch is

00:33:21,320 --> 00:33:29,690
lying behind nine and ten

00:33:26,510 --> 00:33:32,049
so the toughest part is that it's hard

00:33:29,690 --> 00:33:34,940
that we track latest versions of FreeBSD

00:33:32,049 --> 00:33:37,010
few words about the quality assurance of

00:33:34,940 --> 00:33:41,559
all this stuff well of course we do the

00:33:37,010 --> 00:33:41,559
plenty of black box testing in the

00:33:42,159 --> 00:33:48,770
equivalents partitioning boundary value

00:33:44,630 --> 00:33:51,190
analysis tree stress test our software

00:33:48,770 --> 00:33:53,600
exploratory test in trouble

00:33:51,190 --> 00:33:57,049
interoperability tests with juniper and

00:33:53,600 --> 00:33:59,270
cisco force 10 extremes of course

00:33:57,049 --> 00:34:01,700
testing in real ecology and we automate

00:33:59,270 --> 00:34:04,159
that yes we have regression tests

00:34:01,700 --> 00:34:07,880
through the CLI and through the SNMP

00:34:04,159 --> 00:34:09,859
protocol and we use TCL for that a few

00:34:07,880 --> 00:34:13,639
words about the future development here

00:34:09,859 --> 00:34:18,320
obviously we have to work on ipv6 and we

00:34:13,639 --> 00:34:20,060
support now only ipv4 but I think it's

00:34:18,320 --> 00:34:25,179
quite ok for now

00:34:20,060 --> 00:34:27,220
well we maybe need to focus on

00:34:25,179 --> 00:34:32,510
[Music]

00:34:27,220 --> 00:34:35,600
supporting VRS the hardware gives us

00:34:32,510 --> 00:34:36,200
visibility but we have to enhance the

00:34:35,600 --> 00:34:38,179
software

00:34:36,200 --> 00:34:41,360
well stacking maybe it's a good idea to

00:34:38,179 --> 00:34:48,740
make the switch or actually bundle

00:34:41,360 --> 00:34:51,470
switches act as a single one and well so

00:34:48,740 --> 00:34:54,050
that they can easily be configured via a

00:34:51,470 --> 00:34:56,330
single COI way of course we have to

00:34:54,050 --> 00:35:00,490
optimize the code redesign or implement

00:34:56,330 --> 00:35:05,630
all those bloated parts I think I end

00:35:00,490 --> 00:35:12,850
here so thank you I may may I do a half

00:35:05,630 --> 00:35:12,850
time produce some demonstration here

00:35:19,770 --> 00:35:35,890
so you're here you are plenty of

00:35:26,490 --> 00:35:39,190
actually interfaces okay we have port

00:35:35,890 --> 00:35:47,230
3-1 which is a which is a tank port it

00:35:39,190 --> 00:35:56,859
is a member of an aggregation here is

00:35:47,230 --> 00:36:02,880
our CLI plenty of configurations here we

00:35:56,859 --> 00:36:07,950
have lots of villains well what else I

00:36:02,880 --> 00:36:11,250
think that currently there is a TV

00:36:07,950 --> 00:36:15,520
connected to this switch so I will check

00:36:11,250 --> 00:36:19,329
its memberships well I have this group

00:36:15,520 --> 00:36:24,329
now and it is delivered to a listener in

00:36:19,329 --> 00:36:28,650
belong five nine nine I think that

00:36:24,329 --> 00:36:28,650
skysport HD I don't know

00:36:28,980 --> 00:36:34,839
well I'll stop here they did there's

00:36:31,869 --> 00:36:41,099
plenty of more demonstration I can maybe

00:36:34,839 --> 00:36:41,099
I will leave some time for questions

00:36:48,809 --> 00:36:54,849
Anderson rather large part of the

00:36:51,940 --> 00:36:58,210
traffic flows in the hardware without

00:36:54,849 --> 00:37:02,170
entering the FreeBSD kernel yes but can

00:36:58,210 --> 00:37:06,220
you monitor it in the runtime the the

00:37:02,170 --> 00:37:10,809
amount of traffic I can okay I can

00:37:06,220 --> 00:37:14,739
actually run a TCP Daman our CPU port

00:37:10,809 --> 00:37:17,980
and I can easily view the number of

00:37:14,739 --> 00:37:25,950
packets per seconds for instance and to

00:37:17,980 --> 00:37:29,589
speed on Pierce it will only show you

00:37:25,950 --> 00:37:32,410
the traffic that is to be intercepted I

00:37:29,589 --> 00:37:34,299
mean the traffic that is designated to

00:37:32,410 --> 00:37:39,009
the control plane the card will traffic

00:37:34,299 --> 00:37:41,859
no I mean the hardware router will or

00:37:39,009 --> 00:37:48,160
for instance there to switching will not

00:37:41,859 --> 00:37:59,499
end up in the CPU you will only see

00:37:48,160 --> 00:38:04,049
different the control plane traffic of

00:37:59,499 --> 00:38:04,049
course well

00:38:06,640 --> 00:38:09,569
here

00:38:12,780 --> 00:38:18,810
here is I have plenty of counters

00:38:15,810 --> 00:38:25,850
they're exported via the SNMP protocol

00:38:18,810 --> 00:38:31,910
we can plot tons of mrtg and ready to

00:38:25,850 --> 00:38:31,910
stuff there and we can clear that

00:38:35,000 --> 00:38:39,590
there's time they start sticking again

00:38:43,119 --> 00:38:46,960
you give me the microphone that my voice

00:38:45,460 --> 00:38:48,430
won't go through I will pretend to speak

00:38:46,960 --> 00:38:51,579
into the microphone

00:38:48,430 --> 00:38:52,779
so two questions one is are the chips

00:38:51,579 --> 00:38:57,309
you're using still supported under

00:38:52,779 --> 00:38:59,950
FreeBSD 10 or only under 8 I think that

00:38:57,309 --> 00:39:02,769
they are supporting them okay so there's

00:38:59,950 --> 00:39:04,299
no reason you can't go to 10 other than

00:39:02,769 --> 00:39:07,359
the fact you have a legacy code well

00:39:04,299 --> 00:39:10,269
there is a reason which is the reason

00:39:07,359 --> 00:39:15,309
usage that well we have tested the eight

00:39:10,269 --> 00:39:20,170
branch extensively and we have only

00:39:15,309 --> 00:39:23,920
encountered crashes and certain stop

00:39:20,170 --> 00:39:27,369
there if we jump to another branch we

00:39:23,920 --> 00:39:33,960
must test it again extensively so that

00:39:27,369 --> 00:39:39,130
we discover undiscovered books there

00:39:33,960 --> 00:39:43,410
it's kind of risky we we may focus on

00:39:39,130 --> 00:39:48,729
doing that well we may need to make our

00:39:43,410 --> 00:39:51,519
actually software is module so that it

00:39:48,729 --> 00:39:55,749
is detached from FreeBSD to some amount

00:39:51,519 --> 00:39:57,999
but it's kind of tricky okay and the

00:39:55,749 --> 00:40:01,539
hardware library is there a well-defined

00:39:57,999 --> 00:40:07,410
API or is it just DMA commands to

00:40:01,539 --> 00:40:10,359
control the hardware or well we use the

00:40:07,410 --> 00:40:13,690
kernel object infrastructure where we

00:40:10,359 --> 00:40:19,779
create an amp file a M file and then

00:40:13,690 --> 00:40:24,719
dare you create actually describe the

00:40:19,779 --> 00:40:27,400
methods and this is what we use okay and

00:40:24,719 --> 00:40:31,499
there's any part of this committable

00:40:27,400 --> 00:40:37,890
back to freebsd so well I have given

00:40:31,499 --> 00:40:42,160
some well let's say parts or books but

00:40:37,890 --> 00:40:46,259
well not that not the whole the whole

00:40:42,160 --> 00:40:46,259
stuff not the whole thing yes

00:40:48,270 --> 00:40:55,590
somebody else anybody

00:40:59,330 --> 00:41:05,849
well let's think our speaker then

00:41:02,630 --> 00:41:05,849

YouTube URL: https://www.youtube.com/watch?v=szMedjgLQN8


