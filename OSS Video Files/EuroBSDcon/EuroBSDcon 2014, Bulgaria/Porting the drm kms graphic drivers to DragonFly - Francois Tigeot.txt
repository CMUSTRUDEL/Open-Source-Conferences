Title: Porting the drm kms graphic drivers to DragonFly - Francois Tigeot
Publication date: 2019-10-13
Playlist: EuroBSDcon 2014, Bulgaria
Description: 
	Abstract:

Francois Tigeot has been trying to make DragonFly more useful by improving its performance, making it able to use some common technologies such as PAM/NSS and porting various pieces of software. One of these pieces of software was the new kms infrastructure and its associated drm/i915 driver.
This talk is about how it has been ported from FreeBSD, the difficulties encountered when making it first run on DragonFly and its evolution from there

Speaker biography:

Independent consultant, sysadmin, *BSD and PostgreSQL user since 1999, DragonFly developer since 2011.
Captions: 
	00:00:00,030 --> 00:00:04,429
you hear me good

00:00:17,410 --> 00:00:21,730
so good afternoon everyone my name is

00:00:20,019 --> 00:00:25,989
Francois taeju and I will be talking

00:00:21,730 --> 00:00:29,349
about porting the DRM and kms drivers to

00:00:25,989 --> 00:00:40,180
dragonfly bsd and maybe closing the

00:00:29,349 --> 00:00:42,899
window but myself

00:00:40,180 --> 00:00:46,180
inconsistent consultancies and million

00:00:42,899 --> 00:00:50,439
I'm a former ccTLD system engineer I

00:00:46,180 --> 00:00:55,239
work for the data for registry I have

00:00:50,439 --> 00:00:59,229
been xorg and Excel one user as well as

00:00:55,239 --> 00:01:02,470
a B as the user for a very long time I

00:00:59,229 --> 00:01:06,759
introduced FreeBSD in the data for

00:01:02,470 --> 00:01:09,850
registry so some dirty four machines are

00:01:06,759 --> 00:01:16,930
the FreeBSD machines and I became a

00:01:09,850 --> 00:01:19,990
dragonfly developer since 2011 dragonfly

00:01:16,930 --> 00:01:22,600
is a unix-like operating system it's of

00:01:19,990 --> 00:01:25,359
course PSD based it was forked from

00:01:22,600 --> 00:01:29,770
FreeBSD a little bit more than ten years

00:01:25,359 --> 00:01:34,240
ago now one of the goal of the project

00:01:29,770 --> 00:01:36,509
is to be scalable pregnant I had many

00:01:34,240 --> 00:01:42,219
goals at the beginning

00:01:36,509 --> 00:01:46,299
among them the protect leader decided to

00:01:42,219 --> 00:01:49,149
try to scale from multiprocessor

00:01:46,299 --> 00:01:52,240
operations differently and what most of

00:01:49,149 --> 00:01:54,880
the operating system we're doing so

00:01:52,240 --> 00:01:57,789
dragonfly use the core replicated

00:01:54,880 --> 00:02:01,479
resources doesn't use complicated

00:01:57,789 --> 00:02:05,469
algorithms mediapersons

00:02:01,479 --> 00:02:09,420
naturally a lot less and the goal is to

00:02:05,469 --> 00:02:09,420
keep cash shells as hard as possible

00:02:10,830 --> 00:02:16,720
dragonfly also some very innovative

00:02:13,540 --> 00:02:22,690
features which can be useful for someone

00:02:16,720 --> 00:02:25,510
loads such as database systems it has a

00:02:22,690 --> 00:02:29,440
unique file system which as database

00:02:25,510 --> 00:02:31,360
features the amber file system is

00:02:29,440 --> 00:02:34,930
capable of doing Easter it

00:02:31,360 --> 00:02:39,010
every file person you do is retain you

00:02:34,930 --> 00:02:42,550
can go back in story angels see

00:02:39,010 --> 00:02:45,720
snapshots and so on amber also there's

00:02:42,550 --> 00:02:50,440
deduplication and real-time replication

00:02:45,720 --> 00:02:54,849
to distend file systems in a

00:02:50,440 --> 00:02:58,150
master/slave way a swap cache is the

00:02:54,849 --> 00:03:00,519
second level file cache it uses the

00:02:58,150 --> 00:03:05,470
existing swap infrastructure and is

00:03:00,519 --> 00:03:10,110
optimized versus this a graph is bidders

00:03:05,470 --> 00:03:13,799
and many words and you can see ears the

00:03:10,110 --> 00:03:13,799
scalability of the system

00:03:13,870 --> 00:03:21,849
this Wells a benchmark I ran on a drowsy

00:03:17,410 --> 00:03:25,000
on system on the orange tile on reason

00:03:21,849 --> 00:03:30,489
to line you can see a number of Postgres

00:03:25,000 --> 00:03:32,049
clients on the vertical access this is a

00:03:30,489 --> 00:03:35,440
number of transactions per second you

00:03:32,049 --> 00:03:37,510
get so if compare dragonfly with two

00:03:35,440 --> 00:03:44,470
competing Linux based operating systems

00:03:37,510 --> 00:03:48,940
and dragonflies the green curve will not

00:03:44,470 --> 00:03:52,720
talk about Durham kms drivers in detail

00:03:48,940 --> 00:03:59,889
we had first tentative to port the new

00:03:52,720 --> 00:04:06,400
DRAM drivers to dragonfly bsd in 2010 at

00:03:59,889 --> 00:04:09,069
that point it became more or less

00:04:06,400 --> 00:04:12,609
obvious than if we wanted to keep

00:04:09,069 --> 00:04:18,280
running graphical applications and x11

00:04:12,609 --> 00:04:22,650
in particular we add to implement what's

00:04:18,280 --> 00:04:26,940
going as KMS means kernel mud system and

00:04:22,650 --> 00:04:30,220
it's a new way to manage graphics and

00:04:26,940 --> 00:04:38,680
linux and now other unix-like operating

00:04:30,220 --> 00:04:42,669
systems so we are student tried to port

00:04:38,680 --> 00:04:44,439
a code from linux in 2010 he used a

00:04:42,669 --> 00:04:49,029
compatibility layer

00:04:44,439 --> 00:04:52,539
but sadly he ran into trouble really

00:04:49,029 --> 00:04:55,449
so he stopped this work he filmed the

00:04:52,539 --> 00:04:59,739
google Summer of Code project but try to

00:04:55,449 --> 00:05:02,529
continue later and spare time he adds

00:04:59,739 --> 00:05:06,459
some curve which was apparently working

00:05:02,529 --> 00:05:12,569
on his machine BAM I never could get to

00:05:06,459 --> 00:05:18,069
run in mine so this was a bit of a waste

00:05:12,569 --> 00:05:22,179
so I started again with FreeBSD two

00:05:18,069 --> 00:05:24,459
years later approximately dragonfly was

00:05:22,179 --> 00:05:29,110
better than FreeBSD so we still have

00:05:24,459 --> 00:05:32,259
many common kernel api's it seemed like

00:05:29,110 --> 00:05:34,119
a good idea at the time so in the summer

00:05:32,259 --> 00:05:38,259
I studied to implement some of the

00:05:34,119 --> 00:05:41,800
low-level API is required by it Carol

00:05:38,259 --> 00:05:45,669
by December I had most of the Intel

00:05:41,800 --> 00:05:51,009
driver pardon he didn't work but at

00:05:45,669 --> 00:05:53,229
least it was compiled companion and it

00:05:51,009 --> 00:05:58,240
took many more months to get it working

00:05:53,229 --> 00:06:01,959
and working reliably we had to implement

00:05:58,240 --> 00:06:04,949
many low-level subsystems which we never

00:06:01,959 --> 00:06:08,589
had the need for previously and

00:06:04,949 --> 00:06:14,050
particular the I 915 driver is special

00:06:08,589 --> 00:06:19,629
for it uses shared memory memory which

00:06:14,050 --> 00:06:24,219
is attached to the main CPU and yet the

00:06:19,629 --> 00:06:28,360
GPU and CPUs part of the silicon are not

00:06:24,219 --> 00:06:31,509
current memory pages have to be mapped

00:06:28,360 --> 00:06:36,159
in some special way to be seen by the

00:06:31,509 --> 00:06:40,019
GPU and mapped differently on the CPU

00:06:36,159 --> 00:06:46,149
side and we also have to manage caches

00:06:40,019 --> 00:06:52,599
page by page so seals something very

00:06:46,149 --> 00:06:56,499
well very to to get working reliably it

00:06:52,599 --> 00:07:00,819
uses something called Zpad petty

00:06:56,499 --> 00:07:06,279
which is the page attribute table a new

00:07:00,819 --> 00:07:11,529
feature on modern CPUs so we implemented

00:07:06,279 --> 00:07:15,960
pad support in the camel but first we

00:07:11,529 --> 00:07:18,520
determine cache management was the only

00:07:15,960 --> 00:07:21,550
missing part to get the driver working

00:07:18,520 --> 00:07:24,909
reliably by completely disabling CPU

00:07:21,550 --> 00:07:27,629
caches so we add the system booting like

00:07:24,909 --> 00:07:30,250
it was running a 50 megahertz CPU

00:07:27,629 --> 00:07:34,590
everything was slow as you could see

00:07:30,250 --> 00:07:39,129
lines being redrawn but at least

00:07:34,590 --> 00:07:43,529
graphical operations were perfect text

00:07:39,129 --> 00:07:46,449
Wells displayed correctly windows appear

00:07:43,529 --> 00:07:49,199
so everything was really running fine

00:07:46,449 --> 00:07:52,949
but very slowly

00:07:49,199 --> 00:07:57,430
after having implemented pad support I

00:07:52,949 --> 00:08:00,639
started to work on porting the Radeon

00:07:57,430 --> 00:08:02,860
driver which is also some very common

00:08:00,639 --> 00:08:05,830
adverse in an MDA CPUs

00:08:02,860 --> 00:08:08,379
it's the Radeon GPUs are now integrated

00:08:05,830 --> 00:08:13,719
onto AMD CPUs so it's very important to

00:08:08,379 --> 00:08:18,219
get that working by October of last year

00:08:13,719 --> 00:08:21,849
I had the TPM and ready on part of the

00:08:18,219 --> 00:08:23,979
DRM subsystem mostly portal TTM is a

00:08:21,849 --> 00:08:28,240
special memory manager used by the

00:08:23,979 --> 00:08:31,680
Radeon driver sales actually a bit more

00:08:28,240 --> 00:08:35,469
complicated that what Intel driver uses

00:08:31,680 --> 00:08:38,560
it's a very complex subsystem and also

00:08:35,469 --> 00:08:42,370
I'll get working reliably but we've been

00:08:38,560 --> 00:08:50,050
I finally managed to do it by July of

00:08:42,370 --> 00:08:52,510
this year joy so one of the problem we

00:08:50,050 --> 00:08:56,620
don't control later while FreeBSD drop

00:08:52,510 --> 00:09:00,550
the ball more specifically on the Intel

00:08:56,620 --> 00:09:04,050
driver there were no significant dates

00:09:00,550 --> 00:09:08,019
to the Intel driver after the initial

00:09:04,050 --> 00:09:09,540
commits by FreeBSD people the latest

00:09:08,019 --> 00:09:15,330
portrait where is to your

00:09:09,540 --> 00:09:18,240
owned by now see as Ivybridge gpus it's

00:09:15,330 --> 00:09:21,330
also blocking for freebsd people for the

00:09:18,240 --> 00:09:24,000
can update their ready on driver and

00:09:21,330 --> 00:09:27,920
generate the arm code without breaking

00:09:24,000 --> 00:09:31,350
the intel driver so it's a mess

00:09:27,920 --> 00:09:35,730
think that I switch to Linux for the new

00:09:31,350 --> 00:09:39,150
Intel upstream in September of last year

00:09:35,730 --> 00:09:44,610
my first goal my most important goal was

00:09:39,150 --> 00:09:49,040
to get as well our web support working a

00:09:44,610 --> 00:09:52,440
worm many issues where to take on and

00:09:49,040 --> 00:09:55,590
particularly FreeBSD curve was nothing

00:09:52,440 --> 00:10:01,140
at all what the Linux drivers looked

00:09:55,590 --> 00:10:06,050
like most modern features and maybe from

00:10:01,140 --> 00:10:13,380
Linux 3.2 3.4 secure is vastly different

00:10:06,050 --> 00:10:16,050
FreeBSD also decided to keep the old DRM

00:10:13,380 --> 00:10:18,270
one curve completely separate from the

00:10:16,050 --> 00:10:21,680
updated code so they have to DRM

00:10:18,270 --> 00:10:25,470
repositories the old one the new one I

00:10:21,680 --> 00:10:28,470
ran a diff between the tooth and most

00:10:25,470 --> 00:10:32,400
Kurt was the same so gern to in FreeBSD

00:10:28,470 --> 00:10:41,280
is DRM in freebsd plus a few more

00:10:32,400 --> 00:10:45,560
functions it's a mess so I tried rebels

00:10:41,280 --> 00:10:49,680
on Linux and I'm selected Linux 3.8

00:10:45,560 --> 00:10:52,530
something as a target the Linux 3.8

00:10:49,680 --> 00:10:56,160
branch is interesting from it is the

00:10:52,530 --> 00:11:00,480
first Linux branch with working

00:10:56,160 --> 00:11:03,810
non-working as well as support most

00:11:00,480 --> 00:11:08,670
people also bears the work on Linux 3.8

00:11:03,810 --> 00:11:10,230
the FreeBSD Radeon developer used Linux

00:11:08,670 --> 00:11:14,600
3.8 as basis

00:11:10,230 --> 00:11:17,820
OpenBSD faults also targeting linux 3.8

00:11:14,600 --> 00:11:22,230
and set was real important for me

00:11:17,820 --> 00:11:25,860
because open BSD is apparently the best

00:11:22,230 --> 00:11:28,050
as the best bsd KMS implementation so

00:11:25,860 --> 00:11:32,700
far everything is working their future

00:11:28,050 --> 00:11:36,260
complete with linux and so again I

00:11:32,700 --> 00:11:43,350
figured I could follow in their path and

00:11:36,260 --> 00:11:47,130
use Linux 3.8 as a basis so I first

00:11:43,350 --> 00:11:52,050
tried to remove most missing parts and

00:11:47,130 --> 00:11:56,160
so put both your RAM directories into

00:11:52,050 --> 00:11:59,010
the same one I removed all DRM one

00:11:56,160 --> 00:12:00,780
Radian and in the Intel drivers and

00:11:59,010 --> 00:12:04,500
replaced the Emperor by the updated

00:12:00,780 --> 00:12:08,700
version I also had to clean up the HP

00:12:04,500 --> 00:12:12,720
driver GP is still used for when your

00:12:08,700 --> 00:12:15,600
persons linux people are moving away and

00:12:12,720 --> 00:12:19,260
don't have to use the HP driver anymore

00:12:15,600 --> 00:12:23,670
for with recent Intel GPUs but we still

00:12:19,260 --> 00:12:27,090
have to do with it for now so basically

00:12:23,670 --> 00:12:30,450
I ran diff git diff between the Linux

00:12:27,090 --> 00:12:33,300
and dragonfly code try to figure out

00:12:30,450 --> 00:12:39,480
which parts were important which parts

00:12:33,300 --> 00:12:41,820
were pointless noise implement the

00:12:39,480 --> 00:12:44,760
important differences piece by piece

00:12:41,820 --> 00:12:47,910
so as to try to keep things relatively

00:12:44,760 --> 00:12:50,810
simple for each commit and not to break

00:12:47,910 --> 00:12:50,810
everything at once

00:12:53,570 --> 00:13:01,260
amongst the noise problems I had was

00:12:58,530 --> 00:13:05,430
previously in shell driver used

00:13:01,260 --> 00:13:09,450
different file names for example there's

00:13:05,430 --> 00:13:11,640
one low-level API to end all output

00:13:09,450 --> 00:13:15,690
management like screen size or to

00:13:11,640 --> 00:13:18,140
detection of whatever features the

00:13:15,690 --> 00:13:23,190
display at the end of the cable has

00:13:18,140 --> 00:13:25,050
which is call I to see in Linux and IOC

00:13:23,190 --> 00:13:27,360
in FreeBSD on dragonfly

00:13:25,050 --> 00:13:30,810
well the freebsd intel driver decided to

00:13:27,360 --> 00:13:35,630
rename files having i to sensor names to

00:13:30,810 --> 00:13:37,760
files with i I see inter names so

00:13:35,630 --> 00:13:41,780
pointless differences and tens of

00:13:37,760 --> 00:13:44,990
thousands of coal lines of difference

00:13:41,780 --> 00:13:50,120
we are functions present in different

00:13:44,990 --> 00:13:53,810
fires we add renamed functions for not

00:13:50,120 --> 00:13:56,990
really any good reason renaming things

00:13:53,810 --> 00:13:58,880
from I to see to I I see was not only

00:13:56,990 --> 00:14:03,740
done for file names but also for

00:13:58,880 --> 00:14:07,730
function names it took me a long time to

00:14:03,740 --> 00:14:13,220
figure out what was going on but once I

00:14:07,730 --> 00:14:15,350
learned I had to move functions arounds

00:14:13,220 --> 00:14:17,660
to reduce differences with Linux

00:14:15,350 --> 00:14:21,980
I basically reduce the differences by

00:14:17,660 --> 00:14:26,750
half only by moving functions around so

00:14:21,980 --> 00:14:30,610
I don't know what he was thinking but it

00:14:26,750 --> 00:14:33,110
was a mess see FreeBSD dry in town

00:14:30,610 --> 00:14:36,880
developer also decided to completely

00:14:33,110 --> 00:14:40,910
rewrite the driver to change style

00:14:36,880 --> 00:14:46,190
whereas a Linux used if pointer

00:14:40,910 --> 00:14:51,200
statements he used if pointer not zero

00:14:46,190 --> 00:14:53,780
or if pointer not no statements he added

00:14:51,200 --> 00:14:55,820
for example parentheses to all return

00:14:53,780 --> 00:14:58,400
statements in the next we had return

00:14:55,820 --> 00:15:02,930
zero in FreeBSD we had return

00:14:58,400 --> 00:15:05,450
parentheses zero and parentheses there

00:15:02,930 --> 00:15:09,680
were many things like that he also added

00:15:05,450 --> 00:15:14,090
whitespace Linux used for example eight

00:15:09,680 --> 00:15:15,770
ten twelve white sweat white space

00:15:14,090 --> 00:15:20,450
characters at the beginning of some

00:15:15,770 --> 00:15:23,390
lines and it Ruby as the author moved

00:15:20,450 --> 00:15:27,860
everything to four white space

00:15:23,390 --> 00:15:30,740
characters for no good reason at all as

00:15:27,860 --> 00:15:35,290
still the style was nice it was clearly

00:15:30,740 --> 00:15:42,280
easy to the eye but it introduced

00:15:35,290 --> 00:15:45,140
numerous amount of noise we are tens of

00:15:42,280 --> 00:15:47,660
thousands of thousands of line of code

00:15:45,140 --> 00:15:48,910
differences only caused by the style

00:15:47,660 --> 00:15:53,740
change

00:15:48,910 --> 00:16:00,810
so I had reduce this noise before moving

00:15:53,740 --> 00:16:00,810
to the important paths which I did later

00:16:01,350 --> 00:16:09,220
there are some difficult spots were I

00:16:05,230 --> 00:16:11,770
wasn't able to completely translate

00:16:09,220 --> 00:16:14,050
curve from Xin FreeBSD way of doing

00:16:11,770 --> 00:16:17,170
things to the Linux we're doing things

00:16:14,050 --> 00:16:21,790
which is the Sham a virtual memory code

00:16:17,170 --> 00:16:25,360
gem is a low-level memory manager used

00:16:21,790 --> 00:16:27,790
by the Intel driver to run low different

00:16:25,360 --> 00:16:31,030
mapping depending on if you are in the

00:16:27,790 --> 00:16:36,100
CPU context or the GPU context or so on

00:16:31,030 --> 00:16:40,210
- flash caches and well it's really very

00:16:36,100 --> 00:16:43,210
lowly well and very dangerous if you

00:16:40,210 --> 00:16:45,040
introduce back there if you make a

00:16:43,210 --> 00:16:46,990
little mistake you can crash your

00:16:45,040 --> 00:16:51,670
machine have your machine reboot

00:16:46,990 --> 00:16:54,340
instantly and so on there's also the i2c

00:16:51,670 --> 00:16:58,710
Vestas IHC api which is completely

00:16:54,340 --> 00:17:05,350
different in FreeBSD dragonfly and Linux

00:16:58,710 --> 00:17:10,270
so to do to adapt the driver and

00:17:05,350 --> 00:17:13,480
workarounds these differences for the

00:17:10,270 --> 00:17:16,209
rest I implement chill Linux api's which

00:17:13,480 --> 00:17:23,949
variants which is the same all ideas if

00:17:16,209 --> 00:17:28,810
first google student of code david cello

00:17:23,949 --> 00:17:34,930
try to do which is also what the OpenBSD

00:17:28,810 --> 00:17:37,210
falls are doing but that I used some

00:17:34,930 --> 00:17:40,960
wrapper code which was already presented

00:17:37,210 --> 00:17:43,990
FreeBSD she's completely crazy FreeBSD

00:17:40,960 --> 00:17:45,700
people used Linux wrappers for some of

00:17:43,990 --> 00:17:52,890
the drivers and particular infiniband

00:17:45,700 --> 00:17:52,890
drivers EMC NetApp Bannister's people

00:17:53,070 --> 00:17:59,170
spent years to implement Linux wrappers

00:17:56,350 --> 00:18:01,280
to add Linux drivers work and FreeBSD

00:17:59,170 --> 00:18:05,120
almost out of the box

00:18:01,280 --> 00:18:09,440
and the freebsd intel developer decided

00:18:05,120 --> 00:18:12,560
to not use them so a cop ID is found

00:18:09,440 --> 00:18:19,550
from FreeBSD attitudes add them to

00:18:12,560 --> 00:18:23,180
dragonfly I also used missing parts

00:18:19,550 --> 00:18:26,750
which I took from OpenBSD since they

00:18:23,180 --> 00:18:29,180
also have linux api wrappers and for the

00:18:26,750 --> 00:18:32,570
rest we implemented some of them in

00:18:29,180 --> 00:18:34,970
dragonfly such as idea which is used

00:18:32,570 --> 00:18:42,200
almost everywhere to manage small

00:18:34,970 --> 00:18:45,260
integers in linux see there are many

00:18:42,200 --> 00:18:49,340
reasons why I decided to use Linux

00:18:45,260 --> 00:18:51,710
papers one of them was your work was

00:18:49,340 --> 00:18:56,300
almost already done by other people in

00:18:51,710 --> 00:19:00,140
FreeBSD and OpenBSD but graphic drivers

00:18:56,300 --> 00:19:03,080
in general are very complex they're fast

00:19:00,140 --> 00:19:07,250
moving targets especially when they're

00:19:03,080 --> 00:19:10,190
in the Linux kernel and it makes more

00:19:07,250 --> 00:19:15,830
sense to change the Dragonfly kernels to

00:19:10,190 --> 00:19:18,320
behave like Linux it's more easy in the

00:19:15,830 --> 00:19:25,280
long term it helps to reduce technical

00:19:18,320 --> 00:19:27,590
depth and it's really I think it's

00:19:25,280 --> 00:19:29,870
really the best approach try to makes it

00:19:27,590 --> 00:19:33,340
run off like an L behave like Linux and

00:19:29,870 --> 00:19:38,000
not try to change the graphic drivers

00:19:33,340 --> 00:19:39,800
all the way to be of like drivers which

00:19:38,000 --> 00:19:46,780
were developed an dragonfly in the first

00:19:39,800 --> 00:19:50,000
place that could be more technically

00:19:46,780 --> 00:19:53,450
correct in a way but we just not have

00:19:50,000 --> 00:19:57,140
the manpower to do that only for the

00:19:53,450 --> 00:19:59,480
Intel driver Intel as something like 20

00:19:57,140 --> 00:20:03,680
different developers working on it

00:19:59,480 --> 00:20:06,860
full-time and I'm one of the only one

00:20:03,680 --> 00:20:09,670
doing it in dragonfly and then only my

00:20:06,860 --> 00:20:09,670
spare time so

00:20:09,850 --> 00:20:16,960
it makes more sense to port dragonfly

00:20:12,550 --> 00:20:26,370
cure now to the GM driver api's then the

00:20:16,960 --> 00:20:32,860
opposite so we have mini include Linux

00:20:26,370 --> 00:20:35,710
header files which are just wrappers to

00:20:32,860 --> 00:20:42,040
existing dragonfly bsd api so generic

00:20:35,710 --> 00:20:47,530
bsd api's they are used by 9-15 radium

00:20:42,040 --> 00:20:52,660
TGM and they rarely help to reduce the

00:20:47,530 --> 00:20:55,390
difference compared to linux i didn't

00:20:52,660 --> 00:20:57,400
choose them everywhere still in

00:20:55,390 --> 00:21:01,330
particular I kept the locking

00:20:57,400 --> 00:21:03,670
directories completely separate so the

00:21:01,330 --> 00:21:07,150
locking directives are specific to

00:21:03,670 --> 00:21:10,540
dragonfly and I wanted to keep things

00:21:07,150 --> 00:21:13,540
that way to make more obvious the kennel

00:21:10,540 --> 00:21:17,700
subsystems worked differently in free

00:21:13,540 --> 00:21:17,700
pain-free bsd dragonfly and linux

00:21:20,580 --> 00:21:30,850
so i wanted to get as well support

00:21:25,510 --> 00:21:36,520
working the first step was to reduce

00:21:30,850 --> 00:21:38,890
noise so i reduced the pointless noise

00:21:36,520 --> 00:21:41,860
caused by style differences function

00:21:38,890 --> 00:21:44,950
define different orders and then I moved

00:21:41,860 --> 00:21:48,160
to FreeBSD pies which I replaced by

00:21:44,950 --> 00:21:50,200
Linux ones so many parts are no

00:21:48,160 --> 00:21:53,500
completely identical between the

00:21:50,200 --> 00:21:56,020
dragonfly and Linux drivers and this

00:21:53,500 --> 00:21:58,300
really helped we have fixed many bugs

00:21:56,020 --> 00:22:01,090
just by using the original Linux girl

00:21:58,300 --> 00:22:06,120
and nerd seeker modified by the freebsd

00:22:01,090 --> 00:22:10,800
developer we add eggs almost everywhere

00:22:06,120 --> 00:22:16,590
the drivers know much much more slowly

00:22:10,800 --> 00:22:20,680
after that I figured I had to update

00:22:16,590 --> 00:22:22,690
various subsystems particular the

00:22:20,680 --> 00:22:23,140
interrupt code was completely different

00:22:22,690 --> 00:22:25,450
in

00:22:23,140 --> 00:22:29,170
next three-point ain't than what was in

00:22:25,450 --> 00:22:34,690
FreeBSD which Wells based on Linux 3.2

00:22:29,170 --> 00:22:37,210
or 3.3 I'm not completely sure I also

00:22:34,690 --> 00:22:39,340
add that the ring buffer curls your

00:22:37,210 --> 00:22:43,080
brain buffer is the part of memory which

00:22:39,340 --> 00:22:45,400
is used to store commands for the GPU

00:22:43,080 --> 00:22:47,830
which is then processed in a ring

00:22:45,400 --> 00:22:49,900
fashion commands go to the end of the

00:22:47,830 --> 00:22:51,700
buffer and then they start to be

00:22:49,900 --> 00:22:56,110
processed again at the beginning of the

00:22:51,700 --> 00:22:59,230
buffer and so on the output management

00:22:56,110 --> 00:23:02,410
code was also very special by output and

00:22:59,230 --> 00:23:08,820
mean VG airports all serve plugs and

00:23:02,410 --> 00:23:12,100
cables you can use to plug displays two

00:23:08,820 --> 00:23:17,680
GPUs it's completely different in as

00:23:12,100 --> 00:23:21,520
well in previous GPU generations the

00:23:17,680 --> 00:23:24,790
outputs were more or less linked to a

00:23:21,520 --> 00:23:27,430
different chip set and they are no on

00:23:24,790 --> 00:23:32,650
the CPU die and they also are now

00:23:27,430 --> 00:23:36,940
completely digital there's still some

00:23:32,650 --> 00:23:39,340
special end link for VGA support but if

00:23:36,940 --> 00:23:43,570
I'm not mistaken it will be removed soon

00:23:39,340 --> 00:23:51,610
in some future Intel CPUs generation so

00:23:43,570 --> 00:23:54,160
we add to update the mod driver mode

00:23:51,610 --> 00:24:00,100
management and output auto detection

00:23:54,160 --> 00:24:03,370
code which was one of the last part I

00:24:00,100 --> 00:24:07,000
got working and then we were able to

00:24:03,370 --> 00:24:09,430
display graphics on as well bear they

00:24:07,000 --> 00:24:14,200
were correct that was kind of fun after

00:24:09,430 --> 00:24:16,690
only four you could see window frames be

00:24:14,200 --> 00:24:20,590
displayed and window contents start to

00:24:16,690 --> 00:24:25,360
appear tell pieces by pieces tell bits

00:24:20,590 --> 00:24:29,560
by bits and the former small rectangle

00:24:25,360 --> 00:24:35,690
small rectangular areas and it was

00:24:29,560 --> 00:24:43,210
caused by graphics specific table

00:24:35,690 --> 00:24:44,509
management structures the GPU part of

00:24:43,210 --> 00:24:48,080
internals

00:24:44,509 --> 00:24:51,129
mysticum has its own memory management

00:24:48,080 --> 00:24:53,899
units which are completely your friends

00:24:51,129 --> 00:24:56,570
then the memory management units on the

00:24:53,899 --> 00:25:00,200
cpu part so there are different page

00:24:56,570 --> 00:25:03,259
tables we have to manage the structures

00:25:00,200 --> 00:25:07,759
like we do for generic veteran memorial

00:25:03,259 --> 00:25:11,000
person but we have to do it differently

00:25:07,759 --> 00:25:14,539
any particular as well as different

00:25:11,000 --> 00:25:18,440
cache attributes than previous GPU

00:25:14,539 --> 00:25:22,429
generations so once I had good that

00:25:18,440 --> 00:25:25,419
right we finally are working operations

00:25:22,429 --> 00:25:28,870
and pixel-perfect operations as well as

00:25:25,419 --> 00:25:42,169
it was done in August of this year

00:25:28,870 --> 00:25:45,740
so quite question so so that was the

00:25:42,169 --> 00:25:51,950
channel and I will not speak a bit about

00:25:45,740 --> 00:25:53,690
userland for Scannell part is not

00:25:51,950 --> 00:25:56,870
independent it has to be used

00:25:53,690 --> 00:25:58,279
we as traditional user applications and

00:25:56,870 --> 00:26:02,539
like xorg

00:25:58,279 --> 00:26:05,090
or liberals and so on so until 2013 we

00:26:02,539 --> 00:26:08,360
used something called pkg SS C which is

00:26:05,090 --> 00:26:12,379
the package management systems which was

00:26:08,360 --> 00:26:16,639
created by seeing it be as the guys it

00:26:12,379 --> 00:26:19,269
was containing very very old versions of

00:26:16,639 --> 00:26:25,580
Excel Ehrman wickersham's and he buries

00:26:19,269 --> 00:26:28,509
particular we are EXO server 1.6 it was

00:26:25,580 --> 00:26:33,620
too old version to be able to end all

00:26:28,509 --> 00:26:35,600
recent GPUs so I had dated I tried to do

00:26:33,620 --> 00:26:38,809
some work in pictures se but for many

00:26:35,600 --> 00:26:43,279
reasons they didn't happen and I myself

00:26:38,809 --> 00:26:44,899
lost interest in packaging in 2013

00:26:43,279 --> 00:26:47,860
dragonfly switched to a new system

00:26:44,899 --> 00:26:47,860
called D ports

00:26:48,510 --> 00:26:55,480
it is based on FreeBSD ports an

00:26:51,520 --> 00:26:59,710
automatic adaptative layer automatic

00:26:55,480 --> 00:27:03,010
test and validations version was it was

00:26:59,710 --> 00:27:06,760
much better where we are EXO server 1.12

00:27:03,010 --> 00:27:10,140
which was enough to get the most recent

00:27:06,760 --> 00:27:13,150
CPUs GPUs at the time working

00:27:10,140 --> 00:27:15,580
we also are all sort of admitted

00:27:13,150 --> 00:27:18,400
software to go with it

00:27:15,580 --> 00:27:21,820
suddenly we once again start to have the

00:27:18,400 --> 00:27:24,450
problem we had with pkg SSE previously

00:27:21,820 --> 00:27:28,270
professionals are beginning to lag

00:27:24,450 --> 00:27:32,290
freebsd guys to cares to update Cairo

00:27:28,270 --> 00:27:36,760
which is graphic library used by many

00:27:32,290 --> 00:27:41,280
applications to indulge two dimensions

00:27:36,760 --> 00:27:46,390
no surfaces that you care to update that

00:27:41,280 --> 00:27:51,340
FreeBSD still has and all user land

00:27:46,390 --> 00:27:55,120
Intel driver in its pod system so I have

00:27:51,340 --> 00:27:57,940
to create a local package and used a

00:27:55,120 --> 00:28:00,430
much more recent version it improved

00:27:57,940 --> 00:28:02,890
performance and fixed many bugs with the

00:28:00,430 --> 00:28:05,020
old driver we had the small artifacts -

00:28:02,890 --> 00:28:07,740
black bars black rectangles and so on

00:28:05,020 --> 00:28:10,870
which is no fixed by the new version

00:28:07,740 --> 00:28:14,200
right op FreeBSD will be able to update

00:28:10,870 --> 00:28:17,140
its poor system and every cent libraries

00:28:14,200 --> 00:28:19,810
and applications so the current state

00:28:17,140 --> 00:28:23,970
years the Intel driver is mostly

00:28:19,810 --> 00:28:27,610
synchronized with Linux 3.8 point 16

00:28:23,970 --> 00:28:30,970
except CL lower the low level of virtual

00:28:27,610 --> 00:28:35,070
memory code see gem code during DRM

00:28:30,970 --> 00:28:36,970
radian CDR Meridian driver is

00:28:35,070 --> 00:28:39,660
synchronized with Linux

00:28:36,970 --> 00:28:43,390
3.8 it doesn't have the bug fixes from

00:28:39,660 --> 00:28:44,860
Linux 3.8 by point 13 but it's not

00:28:43,390 --> 00:28:50,530
really a problem at this point in time

00:28:44,860 --> 00:28:54,420
and the TTM memory manager code used by

00:28:50,530 --> 00:28:55,690
the Radeon driver is based on UNIX 3.9

00:28:54,420 --> 00:28:59,140
generic

00:28:55,690 --> 00:29:00,419
DRM part of the curl is bit of a mess we

00:28:59,140 --> 00:29:05,190
still have to add

00:29:00,419 --> 00:29:09,440
to make it more like where he's in linux

00:29:05,190 --> 00:29:13,489
3.8 i already updated some parts but

00:29:09,440 --> 00:29:20,999
also a much more on older and

00:29:13,489 --> 00:29:22,919
troublesome in the future I plan to keep

00:29:20,999 --> 00:29:25,440
synchronizing the germ code and

00:29:22,919 --> 00:29:29,700
particularly generic Durham color with

00:29:25,440 --> 00:29:34,739
Linux 3.8 something it's required by

00:29:29,700 --> 00:29:42,869
features like Durham prime during prime

00:29:34,739 --> 00:29:46,889
is the subsystem which under owns are

00:29:42,869 --> 00:29:49,470
we're using two different GPUs and only

00:29:46,889 --> 00:29:51,809
one set of video outputs like if you

00:29:49,470 --> 00:29:54,450
have a laptop with a NVIDIA GPU and an

00:29:51,809 --> 00:29:56,549
Intel GPU you you need some special

00:29:54,450 --> 00:30:00,419
handling to be able to display graphics

00:29:56,549 --> 00:30:05,119
and the video outputs otherwise your own

00:30:00,419 --> 00:30:05,119
get black screen or whatever

00:30:05,539 --> 00:30:13,889
my goal is them to start updating your M

00:30:10,980 --> 00:30:16,080
drivers to more recent versions once we

00:30:13,889 --> 00:30:20,460
will have something more like Linux in

00:30:16,080 --> 00:30:22,369
the in the generic term code M then

00:30:20,460 --> 00:30:24,869
maybe start putting new drivers and

00:30:22,369 --> 00:30:27,509
particular we had many people ask about

00:30:24,869 --> 00:30:32,590
Nvidia support and for that we will

00:30:27,509 --> 00:30:34,759
require us the nouveau driver a

00:30:32,590 --> 00:30:37,289
[Music]

00:30:34,759 --> 00:30:40,559
requirement for porting nouveau was also

00:30:37,289 --> 00:30:43,590
to get the TDM memory manager working

00:30:40,559 --> 00:30:46,700
reliably which was done with radiance oh

00:30:43,590 --> 00:30:46,700
no we're good to go

00:30:48,470 --> 00:30:58,730
another problem we have is once we start

00:30:52,409 --> 00:31:02,999
running xorg will lose consumed display

00:30:58,730 --> 00:31:06,960
the traditional VGA concerns with 80 by

00:31:02,999 --> 00:31:10,129
25 text characters don't work any more

00:31:06,960 --> 00:31:10,129
once with that Excel

00:31:11,500 --> 00:31:17,210
if I try to get back to the console for

00:31:14,870 --> 00:31:20,360
example I will get a black screen or

00:31:17,210 --> 00:31:22,730
frozen display I could try it in real

00:31:20,360 --> 00:31:30,170
time but it's probably not regrading

00:31:22,730 --> 00:31:33,440
right now so we could try to reset the

00:31:30,170 --> 00:31:39,250
GPU to be more like a traditional vision

00:31:33,440 --> 00:31:42,410
VGA GPU once we quit xorg or

00:31:39,250 --> 00:31:45,050
alternatively implement a graphical TTY

00:31:42,410 --> 00:31:47,720
layer which is what freebsd people are

00:31:45,050 --> 00:31:53,510
doing which was also done by

00:31:47,720 --> 00:31:58,010
openbsd netbsd already as a graphical

00:31:53,510 --> 00:32:02,510
console it is used by non-pc

00:31:58,010 --> 00:32:04,490
architectures in particular well there

00:32:02,510 --> 00:32:08,590
are some pitches floating around but

00:32:04,490 --> 00:32:08,590
nothing serious at this point in time so

00:32:10,090 --> 00:32:17,360
I wanted also to thank some people a

00:32:13,190 --> 00:32:21,020
constant in bellos off whilst freebsd

00:32:17,360 --> 00:32:22,910
developer would pour cheat drm kms in

00:32:21,020 --> 00:32:26,590
general and the intel driver in

00:32:22,910 --> 00:32:29,030
particular to freebsd alexander cab f

00:32:26,590 --> 00:32:32,090
steady to port the Radian driver to

00:32:29,030 --> 00:32:38,510
freebsd and the job was completed by

00:32:32,090 --> 00:32:41,830
jean-sebastien pedro um on the dragonfly

00:32:38,510 --> 00:32:47,480
side I did most of the porting from

00:32:41,830 --> 00:32:49,730
FreeBSD I did see general general DRM

00:32:47,480 --> 00:32:52,400
path as well as the Intel and Radian

00:32:49,730 --> 00:32:55,970
driver and also the TTA memory manager

00:32:52,400 --> 00:33:00,320
required by Radian and some critical

00:32:55,970 --> 00:33:05,720
people mail all of that work and work

00:33:00,320 --> 00:33:10,850
reliably - of mom spent months working

00:33:05,720 --> 00:33:14,390
on bugs on the I 915 driver it was one

00:33:10,850 --> 00:33:19,190
we finally was able to display pixel

00:33:14,390 --> 00:33:22,080
perfect pictures by disabling cache on

00:33:19,190 --> 00:33:24,930
the system Madeline added

00:33:22,080 --> 00:33:29,010
that's support to the kennel and fixed

00:33:24,930 --> 00:33:31,830
critical petrol memory bugs and Joris

00:33:29,010 --> 00:33:33,780
Giovanni Lee and Marcus Pfeiffer who are

00:33:31,830 --> 00:33:38,430
also dragonfly developers and fixed

00:33:33,780 --> 00:33:41,100
critical bugs and spent a long long long

00:33:38,430 --> 00:33:45,480
weeks trying to find bugs and fix them

00:33:41,100 --> 00:33:49,740
we had some stupid things like the AGP

00:33:45,480 --> 00:33:52,050
driver trying to write memory in the

00:33:49,740 --> 00:33:55,670
middle of its window and correct some

00:33:52,050 --> 00:34:01,200
kind of subsystems and some many things

00:33:55,670 --> 00:34:21,900
like that so so I'm done do you have any

00:34:01,200 --> 00:34:24,840
questions yes well I just I just

00:34:21,900 --> 00:34:28,970
discovered this new bsd was doing some

00:34:24,840 --> 00:34:28,970
significant work during this conference

00:34:45,440 --> 00:34:48,749
[Music]

00:35:03,590 --> 00:35:07,520
that's why there's a red helmet

00:35:18,770 --> 00:35:23,420
interesting see that three projects

00:35:30,710 --> 00:35:45,450
slightly different trade

00:35:42,920 --> 00:35:50,040
yeah trying to keep the compatibility

00:35:45,450 --> 00:35:52,050
years compatible and maybe not maybe

00:35:50,040 --> 00:35:54,200
merge them but trying to see what's

00:35:52,050 --> 00:35:57,090
going on in other ability projects and

00:35:54,200 --> 00:36:00,210
see if bugs are fixed or improvements

00:35:57,090 --> 00:36:01,670
Marius it's a very good idea in general

00:36:00,210 --> 00:36:04,800
[Music]

00:36:01,670 --> 00:36:08,480
you said all three projects

00:36:04,800 --> 00:36:11,690
I'm moving to Linux compatibility layer

00:36:08,480 --> 00:36:16,350
it's not completely true

00:36:11,690 --> 00:36:22,400
OpenBSD false did that net bsd forms are

00:36:16,350 --> 00:36:22,400
doing it i just discovered this morning

00:36:22,490 --> 00:36:29,700
i'm doing it on dragonfly but freebsd

00:36:26,540 --> 00:36:31,980
Intel Developer as a different approach

00:36:29,700 --> 00:36:34,110
apparently is trying to completely

00:36:31,980 --> 00:36:38,480
reemployment the Intel driver on his own

00:36:34,110 --> 00:36:41,520
and I don't see what that's workable

00:36:38,480 --> 00:36:44,660
yes BSD projects don't just don't have

00:36:41,520 --> 00:36:44,660
the manpower to do that

00:36:49,570 --> 00:37:03,780
any other question no don't be shy okay

00:37:01,750 --> 00:37:06,929
well thank you

00:37:03,780 --> 00:37:06,929

YouTube URL: https://www.youtube.com/watch?v=-wzPzyv2qK8


