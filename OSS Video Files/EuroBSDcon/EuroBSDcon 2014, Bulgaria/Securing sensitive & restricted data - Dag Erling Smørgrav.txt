Title: Securing sensitive & restricted data - Dag Erling Smørgrav
Publication date: 2019-10-14
Playlist: EuroBSDcon 2014, Bulgaria
Description: 
	Abstract:

Researchers in many scientific fields routinely work with sensitive or restricted data such as patient records, human genetic sequences, or interviews with dissidents in oppressive regimes. Keeping this data secure while retaining the ability to process and analyse it is a non-trivial problem. The University of Oslo’s TSD service is a “walled garden” environment for storing and processing this type of data. We present the architecture of TSD and describe how FreeBSD is used to control the interface between TSD and the world.

Speaker biography:

Dag-Erling Sm¯rgrav is a senior engineer at the University of Oslo, one of the developers of the TSD service and a member of the University’s CERT and information security team. He has been a FreeBSD committer since 1998 and is currently serving as FreeBSD’s Security Officer. He is also the author of OpenPAM.
Captions: 
	00:00:00,030 --> 00:00:02,359
yeah

00:00:18,300 --> 00:00:23,740
okay let's start let me introduce you to

00:00:21,100 --> 00:00:26,170
tackling small graph security officer in

00:00:23,740 --> 00:00:31,170
FreeBSD and working for the security

00:00:26,170 --> 00:00:31,170
team in the University of Oslo thank you

00:00:31,860 --> 00:00:40,000
so as Olivier said I am employed at the

00:00:36,760 --> 00:00:41,800
University of Oslo in Norway where I

00:00:40,000 --> 00:00:43,540
work in the security team and for the

00:00:41,800 --> 00:00:46,210
last two years I was also a developer on

00:00:43,540 --> 00:00:48,670
the TSD project which is what I would

00:00:46,210 --> 00:00:51,490
like to talk to you about today I've

00:00:48,670 --> 00:00:53,700
also been a FreeBSD developer for more

00:00:51,490 --> 00:00:59,260
than 15 years and I'm currently the

00:00:53,700 --> 00:01:01,210
security officer so the title of the

00:00:59,260 --> 00:01:03,579
presentation is securing sensitive and

00:01:01,210 --> 00:01:06,910
restricted data so I'm going to start by

00:01:03,579 --> 00:01:13,240
defining what sensitive and restricted

00:01:06,910 --> 00:01:16,780
data are and in the context of a

00:01:13,240 --> 00:01:22,619
university these are genetic sequences

00:01:16,780 --> 00:01:25,060
patient records responses to surveys

00:01:22,619 --> 00:01:28,929
audio-visual recordings of patients and

00:01:25,060 --> 00:01:33,100
respondents and anything you you care to

00:01:28,929 --> 00:01:37,200
think about so we have in in TSD

00:01:33,100 --> 00:01:40,450
currently we have projects that work on

00:01:37,200 --> 00:01:44,110
human genome data human genetic

00:01:40,450 --> 00:01:52,869
sequences for diagnostic purposes we

00:01:44,110 --> 00:01:55,030
have we have sociologists who work on a

00:01:52,869 --> 00:02:00,119
on a research project regarding

00:01:55,030 --> 00:02:04,030
alcoholism and they have interviews with

00:02:00,119 --> 00:02:08,550
patients we have psychologists who work

00:02:04,030 --> 00:02:12,130
on research project regarding the

00:02:08,550 --> 00:02:15,209
psychological effect of the July 2011

00:02:12,130 --> 00:02:18,840
bombing in in Oslo so they have

00:02:15,209 --> 00:02:23,250
recordings and videotape videos of

00:02:18,840 --> 00:02:27,790
interviews with with victims and and

00:02:23,250 --> 00:02:31,040
next-of-kin things like that in most

00:02:27,790 --> 00:02:33,140
cases these are you know the usual

00:02:31,040 --> 00:02:36,049
these are personally identifiable data

00:02:33,140 --> 00:02:39,079
these are privacy issues but in some

00:02:36,049 --> 00:02:48,019
cases leaking those data could actually

00:02:39,079 --> 00:02:50,480
bring harm to the person in question we

00:02:48,019 --> 00:02:51,980
we might have I don't think that we do

00:02:50,480 --> 00:02:55,549
at the time but we might have for

00:02:51,980 --> 00:02:58,970
instance researchers working with

00:02:55,549 --> 00:03:03,200
dissidents in in the Middle East or in

00:02:58,970 --> 00:03:04,970
Asia where leaking information about

00:03:03,200 --> 00:03:17,540
their research might mean that somebody

00:03:04,970 --> 00:03:19,430
dies in the worst case so the law very

00:03:17,540 --> 00:03:21,920
I'm not a lawyer so I'm not going to

00:03:19,430 --> 00:03:25,400
explain this in detail but I can

00:03:21,920 --> 00:03:27,500
summarize as as as follows personally

00:03:25,400 --> 00:03:30,639
identifiable data which is anything that

00:03:27,500 --> 00:03:33,889
may be connected to a specific person

00:03:30,639 --> 00:03:35,599
may only be collected and retained with

00:03:33,889 --> 00:03:37,489
the person's informed consent for a

00:03:35,599 --> 00:03:42,379
specific purpose for a specific length

00:03:37,489 --> 00:03:44,449
of time and in the academic world at

00:03:42,379 --> 00:03:51,699
least in Norway the way this works is

00:03:44,449 --> 00:03:56,569
that a research group that wishes to to

00:03:51,699 --> 00:04:00,410
collect a certain type of data such as

00:03:56,569 --> 00:04:03,290
patient information or or whatever first

00:04:00,410 --> 00:04:07,449
have to get approval from the academic

00:04:03,290 --> 00:04:09,829
ethics review board for their research

00:04:07,449 --> 00:04:13,160
then they have to get written consent

00:04:09,829 --> 00:04:16,220
from everybody involved they collect the

00:04:13,160 --> 00:04:19,459
data and the the authorization that they

00:04:16,220 --> 00:04:23,479
get from the ethics board has a date

00:04:19,459 --> 00:04:26,419
limit and a specifically stated purpose

00:04:23,479 --> 00:04:36,620
and once that data limit is reached the

00:04:26,419 --> 00:04:40,700
data must be destroyed so the dilemma is

00:04:36,620 --> 00:04:42,439
that the data must be accessible to

00:04:40,700 --> 00:04:45,769
those who collected it

00:04:42,439 --> 00:04:49,729
but thank you impress for running the

00:04:45,769 --> 00:04:53,239
animation backwards the data must remain

00:04:49,729 --> 00:04:55,399
must be kept under lock and key however

00:04:53,239 --> 00:04:57,860
the data must also be accessible to

00:04:55,399 --> 00:05:00,619
those who collect it that's the dilemma

00:04:57,860 --> 00:05:02,929
we've faced it and we solve that by

00:05:00,619 --> 00:05:05,149
providing a fully functional working

00:05:02,929 --> 00:05:09,019
environment which I will define later

00:05:05,149 --> 00:05:12,229
within which the data is accessible but

00:05:09,019 --> 00:05:17,149
from which it cannot be extracted or at

00:05:12,229 --> 00:05:18,800
least cannot easily be extracted so a

00:05:17,149 --> 00:05:21,439
fully functional working environment

00:05:18,800 --> 00:05:24,219
means a storage we're talking about data

00:05:21,439 --> 00:05:27,789
so necessarily there must be storage

00:05:24,219 --> 00:05:29,869
databases for organizing that data

00:05:27,789 --> 00:05:31,309
depending entirely depending on the type

00:05:29,869 --> 00:05:34,159
of data of course some of our users

00:05:31,309 --> 00:05:37,639
require relational databases we offer

00:05:34,159 --> 00:05:40,550
them PostgreSQL and some require

00:05:37,639 --> 00:05:43,159
entirely different tools we provide

00:05:40,550 --> 00:05:47,089
virtual windows and linux desktops with

00:05:43,159 --> 00:05:49,490
remote access we provide the usual suite

00:05:47,089 --> 00:05:53,119
of office software and scientific

00:05:49,490 --> 00:05:57,229
software we have a standard package that

00:05:53,119 --> 00:05:59,779
includes things like biopython R we can

00:05:57,229 --> 00:06:03,469
provide MATLAB Stata SPSS and other

00:05:59,779 --> 00:06:05,029
commercial software on demand provided

00:06:03,469 --> 00:06:13,789
of course that they have licenses or

00:06:05,029 --> 00:06:16,879
they require licenses through us and we

00:06:13,789 --> 00:06:20,929
also have a high performance computing

00:06:16,879 --> 00:06:25,459
cluster inside the TSD environment which

00:06:20,929 --> 00:06:31,729
is separate from our we have an HPC

00:06:25,459 --> 00:06:34,009
cluster which is currently number 400 or

00:06:31,729 --> 00:06:43,550
something on the top 500 list it was at

00:06:34,009 --> 00:06:47,119
number 96 when it was built but so once

00:06:43,550 --> 00:06:51,469
again data the data originates outside

00:06:47,119 --> 00:06:55,070
of TSD and it must be brought in and the

00:06:51,469 --> 00:07:02,340
results must be

00:06:55,070 --> 00:07:05,390
extracted again in in some sort the the

00:07:02,340 --> 00:07:11,910
only direct access that we provide to

00:07:05,390 --> 00:07:13,790
this walled garden is as I mentioned

00:07:11,910 --> 00:07:17,600
earlier virtual windows linux desktops

00:07:13,790 --> 00:07:23,040
with either RDP or spice as a graphical

00:07:17,600 --> 00:07:26,400
remote desktop protocol and those are

00:07:23,040 --> 00:07:28,770
tunneled through SSH and I will explain

00:07:26,400 --> 00:07:32,040
I will describe this in a little more

00:07:28,770 --> 00:07:34,110
detail later so we turn off all side

00:07:32,040 --> 00:07:36,240
channels in those protocols we turn off

00:07:34,110 --> 00:07:42,240
the clipboard we're trying to shared

00:07:36,240 --> 00:07:46,260
folders USB tunneling and other easily

00:07:42,240 --> 00:07:47,580
used sine channels of course let me say

00:07:46,260 --> 00:07:51,300
this right away because if I don't

00:07:47,580 --> 00:07:53,670
inevitably somebody will will ask me

00:07:51,300 --> 00:07:55,590
about it at the end we cannot it is

00:07:53,670 --> 00:07:59,010
impossible to close all side channels

00:07:55,590 --> 00:08:01,290
the only way to do that is to store the

00:07:59,010 --> 00:08:02,850
data on a disk put the data in a bucket

00:08:01,290 --> 00:08:05,490
fill the bucket with concrete and bury

00:08:02,850 --> 00:08:08,070
it in the ground at which point we're

00:08:05,490 --> 00:08:09,960
back to our dilemma it is not accessible

00:08:08,070 --> 00:08:11,840
it needs to be accessible so there will

00:08:09,960 --> 00:08:18,240
always be side channels you can you can

00:08:11,840 --> 00:08:19,410
a MIDI can screen scrape the desktop

00:08:18,240 --> 00:08:23,460
come

00:08:19,410 --> 00:08:28,950
connection you can write an RDP client

00:08:23,460 --> 00:08:32,729
that sends key presses to display the

00:08:28,950 --> 00:08:36,120
daytime then scrapes it and of course we

00:08:32,729 --> 00:08:41,250
have to draw the line somewhere we do we

00:08:36,120 --> 00:08:45,030
make a best effort and we make a certain

00:08:41,250 --> 00:08:49,080
number of assumptions about the the

00:08:45,030 --> 00:08:50,400
users and about the attackers we we will

00:08:49,080 --> 00:08:54,000
never be able to defend ourselves

00:08:50,400 --> 00:09:00,390
against a truly determined adversary

00:08:54,000 --> 00:09:02,490
anyway so we make a best effort so when

00:09:00,390 --> 00:09:06,120
data has to be transferred into the

00:09:02,490 --> 00:09:08,130
system or results or whatever have to be

00:09:06,120 --> 00:09:11,370
transferred out of the system

00:09:08,130 --> 00:09:13,079
we use what we call a data lock in in

00:09:11,370 --> 00:09:16,290
the same sense lock here in the same

00:09:13,079 --> 00:09:22,529
sense as an air lock or a lock on on a

00:09:16,290 --> 00:09:24,750
river which is which is a pair of

00:09:22,529 --> 00:09:29,880
machines which I will describe in

00:09:24,750 --> 00:09:32,459
slightly more detail later where the

00:09:29,880 --> 00:09:37,440
outward-facing machine is an SFTP server

00:09:32,459 --> 00:09:40,410
and data can be deposited there and it

00:09:37,440 --> 00:09:44,009
will be copied into the system and

00:09:40,410 --> 00:09:48,149
likewise users within the system can

00:09:44,009 --> 00:09:52,970
move data into a specific area of the

00:09:48,149 --> 00:09:52,970
storage system from where it will be

00:09:53,209 --> 00:10:02,850
transferred copied to the SFTP server

00:09:55,740 --> 00:10:07,709
and they can download it from there so a

00:10:02,850 --> 00:10:09,839
bird's eye view we have the big bad

00:10:07,709 --> 00:10:12,180
internet for definitely represented as a

00:10:09,839 --> 00:10:13,500
as a cloud so this is it's becoming a

00:10:12,180 --> 00:10:17,490
little bit confusing because the cloud

00:10:13,500 --> 00:10:21,870
is something else now but anyway the big

00:10:17,490 --> 00:10:25,759
bad Internet has is a cloud as is

00:10:21,870 --> 00:10:30,420
traditional and we have two interfaces

00:10:25,759 --> 00:10:33,870
between the red zone between the world

00:10:30,420 --> 00:10:36,920
the internet and our green walled garden

00:10:33,870 --> 00:10:41,100
one of them is the file lock that I just

00:10:36,920 --> 00:10:43,410
described and the other is I've written

00:10:41,100 --> 00:10:44,670
jump post and singular here but there

00:10:43,410 --> 00:10:47,939
are actually two John posts they're

00:10:44,670 --> 00:10:51,540
redundant and those are the John posts

00:10:47,939 --> 00:10:55,470
are the main an entry point for users

00:10:51,540 --> 00:10:58,709
into the system so from the internet

00:10:55,470 --> 00:11:01,709
from I could I could access it from my

00:10:58,709 --> 00:11:05,160
laptop here or from my workstation that

00:11:01,709 --> 00:11:10,620
the University of Oslo or from my PC at

00:11:05,160 --> 00:11:13,860
home or or wherever I can connect to the

00:11:10,620 --> 00:11:16,319
P on post to establish a tunnel and then

00:11:13,860 --> 00:11:20,600
through that tunnel I can connect to my

00:11:16,319 --> 00:11:22,050
virtual desktop and depending on which

00:11:20,600 --> 00:11:25,080
services

00:11:22,050 --> 00:11:31,050
my the research group to which I belong

00:11:25,080 --> 00:11:34,160
have ordered and unpaid for I can get I

00:11:31,050 --> 00:11:36,510
can from that desktop I can access the

00:11:34,160 --> 00:11:39,060
high-performance computing cluster I can

00:11:36,510 --> 00:11:42,450
access databases and of course I can

00:11:39,060 --> 00:11:46,589
always access the storage system where a

00:11:42,450 --> 00:11:49,230
certain amount however many terabytes

00:11:46,589 --> 00:11:52,620
you're willing to pay for have been

00:11:49,230 --> 00:11:58,589
reserved for the project the storage

00:11:52,620 --> 00:12:01,079
system is a segment of a system called

00:11:58,589 --> 00:12:05,310
Astra store which is a seven petabyte

00:12:01,079 --> 00:12:07,920
hierarchical hierarchical sorry storage

00:12:05,310 --> 00:12:10,200
system which is split about evenly I

00:12:07,920 --> 00:12:12,149
think three petabytes of disk and four

00:12:10,200 --> 00:12:19,560
petabytes of tape or the other way

00:12:12,149 --> 00:12:21,240
around so it's a it's a segment of that

00:12:19,560 --> 00:12:25,200
system that has been set aside with a

00:12:21,240 --> 00:12:29,029
separate it has its own head if you're

00:12:25,200 --> 00:12:31,800
familiar with storage terminology so

00:12:29,029 --> 00:12:35,959
there's a huge amount of block storage

00:12:31,800 --> 00:12:40,590
and then there are safes and NFS heads

00:12:35,959 --> 00:12:42,890
front ends that we communicate with

00:12:40,590 --> 00:12:50,279
[Music]

00:12:42,890 --> 00:12:58,950
right so let's take a closer look at the

00:12:50,279 --> 00:13:01,980
network topology that we see here so we

00:12:58,950 --> 00:13:04,770
have two space heaters in the in the

00:13:01,980 --> 00:13:06,449
server room one of them is a big Cisco

00:13:04,770 --> 00:13:09,540
box the other one is a smaller Cisco box

00:13:06,449 --> 00:13:11,940
there are main routers so what I haven't

00:13:09,540 --> 00:13:13,770
shown which is on off the screen here on

00:13:11,940 --> 00:13:16,410
the left is the rest of the university

00:13:13,770 --> 00:13:22,560
network and and the internet and the

00:13:16,410 --> 00:13:27,390
world and the jump hosts are directly

00:13:22,560 --> 00:13:30,779
connected to the to the routers and the

00:13:27,390 --> 00:13:33,990
external half of the data lock is also

00:13:30,779 --> 00:13:35,560
directly connected to the routers so

00:13:33,990 --> 00:13:38,160
these are our access

00:13:35,560 --> 00:13:43,060
Abell they have public IP addresses both

00:13:38,160 --> 00:13:45,490
ipv4 and ipv6 addresses and are accept

00:13:43,060 --> 00:13:47,290
accessible from wherever provided you

00:13:45,490 --> 00:13:52,750
have an account and credentials and

00:13:47,290 --> 00:13:57,700
everything and on the inside the inside

00:13:52,750 --> 00:14:00,370
network is divided into separate quite a

00:13:57,700 --> 00:14:04,570
large number actually of VLANs and

00:14:00,370 --> 00:14:10,210
subnets we have a / 48 ipv6 block that

00:14:04,570 --> 00:14:14,230
we use for everything but as I will as I

00:14:10,210 --> 00:14:17,620
mention on a later slide there we've had

00:14:14,230 --> 00:14:20,260
a lot of trouble with ipv6 so we also

00:14:17,620 --> 00:14:23,260
have to use an RFC 1918 network on the

00:14:20,260 --> 00:14:25,540
inside an ipv4 network but the ipv4

00:14:23,260 --> 00:14:28,450
network is it's a private address space

00:14:25,540 --> 00:14:31,089
and it's not routed whereas the ipv6

00:14:28,450 --> 00:14:36,670
network is a public address is public

00:14:31,089 --> 00:14:38,410
address space and is partially routed so

00:14:36,670 --> 00:14:43,030
that for instance machines on the inside

00:14:38,410 --> 00:14:49,210
can retrieve can retrieve security

00:14:43,030 --> 00:14:53,740
updates install software under within

00:14:49,210 --> 00:14:55,720
certain limits some of our machines need

00:14:53,740 --> 00:14:57,430
to be able to access license servers

00:14:55,720 --> 00:14:59,020
which are than are on the outside some

00:14:57,430 --> 00:15:04,540
of them can be proxied but some of them

00:14:59,020 --> 00:15:06,940
can't things like that so the the John

00:15:04,540 --> 00:15:09,700
posts and the external data lock are

00:15:06,940 --> 00:15:13,600
FreeBSD 10 machines the inside of the

00:15:09,700 --> 00:15:17,950
data lock is Linux most of the the other

00:15:13,600 --> 00:15:20,440
stuff is either Linux or or Windows the

00:15:17,950 --> 00:15:28,240
Nexus which I will describe later is

00:15:20,440 --> 00:15:31,000
also a FreeBSD 10 machine prism is it's

00:15:28,240 --> 00:15:34,029
a it's a Linux VM that sits so we have a

00:15:31,000 --> 00:15:37,540
separate storage VLAN and prism is the

00:15:34,029 --> 00:15:39,640
only the only machine the only VM in

00:15:37,540 --> 00:15:42,550
that VLAN apart from the data lock that

00:15:39,640 --> 00:15:44,440
you that actually has it's a management

00:15:42,550 --> 00:15:47,610
machine we called a prism because it can

00:15:44,440 --> 00:15:49,830
access all the data it's the only

00:15:47,610 --> 00:15:52,110
these two machines are the only ones

00:15:49,830 --> 00:15:56,100
that can access absolutely all the the

00:15:52,110 --> 00:15:59,839
data in the system without and they do

00:15:56,100 --> 00:16:03,870
it by being within the same VLAN so

00:15:59,839 --> 00:16:06,779
everything is routed through the jump

00:16:03,870 --> 00:16:10,230
hosts they have a dual role they are

00:16:06,779 --> 00:16:13,550
both routers and firewalls and also

00:16:10,230 --> 00:16:16,800
login nodes I'll get back to that later

00:16:13,550 --> 00:16:18,480
on the management VLAN here we have for

00:16:16,800 --> 00:16:19,800
instance we have a domain controller we

00:16:18,480 --> 00:16:22,320
actually have two but one of them is

00:16:19,800 --> 00:16:25,829
physical one of them is virtual we have

00:16:22,320 --> 00:16:28,170
an authoritative nameserver which is not

00:16:25,829 --> 00:16:33,810
used as resolver the jump hosts run

00:16:28,170 --> 00:16:38,519
unbound with they run unbound with

00:16:33,810 --> 00:16:40,550
multiple forwarders so the our internal

00:16:38,519 --> 00:16:48,120
authoritative nameserver

00:16:40,550 --> 00:16:50,579
is used to resolve our own DNS domain

00:16:48,120 --> 00:16:55,470
and they forward other requests to the

00:16:50,579 --> 00:16:58,200
universities resolvers our Adina's dns

00:16:55,470 --> 00:17:01,980
base is also exposed by the way to the

00:16:58,200 --> 00:17:04,890
world it makes we we made a decision

00:17:01,980 --> 00:17:10,589
there we made a judgment call and said

00:17:04,890 --> 00:17:12,689
that well it makes our lives much much

00:17:10,589 --> 00:17:18,030
easier to have our dns base be

00:17:12,689 --> 00:17:25,079
accessible and the risk is not really

00:17:18,030 --> 00:17:27,270
that high so we we chose to do that rev

00:17:25,079 --> 00:17:32,419
M is the Red Hat Enterprise

00:17:27,270 --> 00:17:37,080
virtualization management node which is

00:17:32,419 --> 00:17:40,050
a separate most of these so the the jump

00:17:37,080 --> 00:17:44,059
hosts and the external data lock are

00:17:40,050 --> 00:17:46,919
physical machines most of the other our

00:17:44,059 --> 00:17:49,169
other machines are virtual and they run

00:17:46,919 --> 00:17:52,290
on Red Hat Enterprise fertilization in a

00:17:49,169 --> 00:17:54,809
Dell blade server the management node is

00:17:52,290 --> 00:17:56,460
actually a separate physical blade for

00:17:54,809 --> 00:18:01,490
obvious reasons we don't want to have

00:17:56,460 --> 00:18:01,490
the management node be a virtual machine

00:18:01,640 --> 00:18:12,290
the storage obviously is a rather large

00:18:06,240 --> 00:18:16,350
black box literally huge back box and

00:18:12,290 --> 00:18:19,830
not a virtual machine and note that this

00:18:16,350 --> 00:18:23,340
is network topology map so of course

00:18:19,830 --> 00:18:26,490
this large black box is not actually

00:18:23,340 --> 00:18:28,620
located in the same room and inside etc

00:18:26,490 --> 00:18:31,260
it's located in different room there are

00:18:28,620 --> 00:18:36,810
other details that I've hidden there

00:18:31,260 --> 00:18:38,520
there's 10-gig fiber between we actually

00:18:36,810 --> 00:18:40,170
use the built-in switch in the blade

00:18:38,520 --> 00:18:42,120
Center the switch of the blade Center

00:18:40,170 --> 00:18:44,880
has a built in for the built-in switch

00:18:42,120 --> 00:18:47,220
with a 40 gigabytes gigabit backplane I

00:18:44,880 --> 00:18:50,040
think and we have a 10 gig connection

00:18:47,220 --> 00:18:53,610
going from the blade Center to the

00:18:50,040 --> 00:18:56,940
storage facility and 10 gig connections

00:18:53,610 --> 00:19:05,010
going to the camp posts and to the data

00:18:56,940 --> 00:19:07,830
lock yeah so the jump hosts have as I

00:19:05,010 --> 00:19:10,620
mentioned a dual role their routers fire

00:19:07,830 --> 00:19:15,960
slash firewalls and they're also login

00:19:10,620 --> 00:19:20,180
nodes so in hindsight maybe in in

00:19:15,960 --> 00:19:22,020
hindsight this is one of the changes I

00:19:20,180 --> 00:19:24,030
one of the things I would have done

00:19:22,020 --> 00:19:28,770
differently and which we could actually

00:19:24,030 --> 00:19:32,340
probably still change is to separate to

00:19:28,770 --> 00:19:34,860
display the to have login nodes that are

00:19:32,340 --> 00:19:35,820
separate from the from the routers and

00:19:34,860 --> 00:19:38,460
firewalls

00:19:35,820 --> 00:19:40,680
the problem is that the login nodes have

00:19:38,460 --> 00:19:43,410
to have ipv4 addresses because they have

00:19:40,680 --> 00:19:47,040
to be reachable most of our users don't

00:19:43,410 --> 00:19:48,900
have ipv6 so they have to have ipv4

00:19:47,040 --> 00:19:51,210
addresses so we can't I can't just fire

00:19:48,900 --> 00:19:53,010
up a couple of VMs inside TSD and

00:19:51,210 --> 00:19:54,450
designate them as login nodes because

00:19:53,010 --> 00:19:56,940
they won't be reachable you'll have to

00:19:54,450 --> 00:20:02,280
use the login nodes to access the login

00:19:56,940 --> 00:20:06,000
nodes so those are surmountable

00:20:02,280 --> 00:20:08,100
technical obstacles they run freebsd 10

00:20:06,000 --> 00:20:10,860
as I mentioned they started out running

00:20:08,100 --> 00:20:14,960
9.1 and over the course of two years

00:20:10,860 --> 00:20:14,960
they've been upgraded to 9.2 and then

00:20:15,290 --> 00:20:20,760
10 was a huge relief

00:20:18,150 --> 00:20:24,030
there were many issues with for instance

00:20:20,760 --> 00:20:25,650
with carp in freebase d9 that are fixed

00:20:24,030 --> 00:20:29,280
in FreeBSD 10 and some of them are

00:20:25,650 --> 00:20:32,310
issues that I thought I discovered and

00:20:29,280 --> 00:20:34,680
fixed in in the process of developing

00:20:32,310 --> 00:20:36,300
this system and some of them are issues

00:20:34,680 --> 00:20:41,160
that for instance glide completely

00:20:36,300 --> 00:20:44,250
rewrote carp in FreeBSD 10 and it's much

00:20:41,160 --> 00:20:49,560
much much simpler to configure and and

00:20:44,250 --> 00:20:52,110
maintain now and the login function is

00:20:49,560 --> 00:20:57,630
implemented with OpenSSH with two-factor

00:20:52,110 --> 00:21:05,000
authentication I'll go into I'll

00:20:57,630 --> 00:21:12,240
describe the authentication system later

00:21:05,000 --> 00:21:14,850
write multiplicity there are currently

00:21:12,240 --> 00:21:17,940
around 45 separate research projects I'm

00:21:14,850 --> 00:21:21,990
not sure they're all active I say around

00:21:17,940 --> 00:21:24,540
45 because I know that the so internally

00:21:21,990 --> 00:21:27,240
we have objects in our provisioning

00:21:24,540 --> 00:21:29,220
database that are called projects and

00:21:27,240 --> 00:21:33,630
the first 10 are reserved and we're

00:21:29,220 --> 00:21:35,940
currently at 55 or 56 so 55 or 56 minus

00:21:33,630 --> 00:21:38,850
10 equals 45 or 46 but I don't know how

00:21:35,940 --> 00:21:40,650
many of those precisely are are active

00:21:38,850 --> 00:21:45,750
or how many are reserved for future use

00:21:40,650 --> 00:21:48,930
or but it's about that and we get new we

00:21:45,750 --> 00:21:51,630
get new there are a lot of people from

00:21:48,930 --> 00:21:54,720
all over the country because the

00:21:51,630 --> 00:21:56,940
University of Oslo is with 7,000

00:21:54,720 --> 00:21:59,990
employees 30 or 40,000 students were the

00:21:56,940 --> 00:22:05,250
largest in Norway and we provide

00:21:59,990 --> 00:22:10,460
services to other universities and and

00:22:05,250 --> 00:22:15,900
colleges and this is a national service

00:22:10,460 --> 00:22:17,970
we have people we have new applications

00:22:15,900 --> 00:22:20,070
almost daily or at least weekly and

00:22:17,970 --> 00:22:22,860
we've actually gotten to the point where

00:22:20,070 --> 00:22:25,560
we need to rethink the one project per

00:22:22,860 --> 00:22:26,910
VLAN model and where we're probably

00:22:25,560 --> 00:22:30,450
going to merge

00:22:26,910 --> 00:22:32,340
or to place smaller projects projects

00:22:30,450 --> 00:22:36,030
that have very small amounts of data and

00:22:32,340 --> 00:22:39,510
they to place them on the same VLAN but

00:22:36,030 --> 00:22:42,630
with separate subnets so we have a

00:22:39,510 --> 00:22:47,250
slightly lower level of security because

00:22:42,630 --> 00:22:51,210
if somebody managed manages to get root

00:22:47,250 --> 00:22:54,110
on one of the on a VM on one of the

00:22:51,210 --> 00:22:56,910
subnets on that VLAN they can of course

00:22:54,110 --> 00:23:00,450
change their network configuration or

00:22:56,910 --> 00:23:04,800
spoof and talk to other machines on the

00:23:00,450 --> 00:23:07,620
same VLAN but the point is that they

00:23:04,800 --> 00:23:10,050
must be kept separate they must be

00:23:07,620 --> 00:23:13,080
protected from each other and to a

00:23:10,050 --> 00:23:17,700
certain extent from themselves but from

00:23:13,080 --> 00:23:22,770
each other so back to the network

00:23:17,700 --> 00:23:27,600
topology I've removed the Cisco space

00:23:22,770 --> 00:23:30,270
heaters and we have so we have the jump

00:23:27,600 --> 00:23:32,880
hosts here and a few more VLANs that I

00:23:30,270 --> 00:23:35,520
didn't mention earlier we have a

00:23:32,880 --> 00:23:40,860
separate VLAN for tracks serial consoles

00:23:35,520 --> 00:23:44,340
for all the physical although the actual

00:23:40,860 --> 00:23:46,290
Hardware the management VLAN and the

00:23:44,340 --> 00:23:49,740
storage VLAN were shown earlier the

00:23:46,290 --> 00:23:52,920
hypervisor VLAN the red hat and fries

00:23:49,740 --> 00:23:58,500
fertilization host nodes are on a

00:23:52,920 --> 00:24:01,530
separate VLAN and we have project VLANs

00:23:58,500 --> 00:24:05,510
we have a lot of project VLANs that are

00:24:01,530 --> 00:24:10,440
kept separate so all traffic between

00:24:05,510 --> 00:24:13,160
each project and anything else in the

00:24:10,440 --> 00:24:16,560
system is routed through the jump host

00:24:13,160 --> 00:24:18,840
and the jump hosts can monitor and

00:24:16,560 --> 00:24:25,830
control that traffic and we have a very

00:24:18,840 --> 00:24:35,090
fine-grained packet filter in place so I

00:24:25,830 --> 00:24:39,360
talked about the login function we have

00:24:35,090 --> 00:24:40,559
very complex identity authentication

00:24:39,360 --> 00:24:45,950
authorization

00:24:40,559 --> 00:24:48,090
which is composed of multiple different

00:24:45,950 --> 00:24:50,370
I've written multiple provisioning

00:24:48,090 --> 00:24:54,360
systems there but multiple iaa systems

00:24:50,370 --> 00:24:58,200
we have a system a perfecting system

00:24:54,360 --> 00:25:01,559
called cerebrum which was originally

00:24:58,200 --> 00:25:05,249
designed as an ia a system but it has

00:25:01,559 --> 00:25:06,899
grown to all so it's now also a machine

00:25:05,249 --> 00:25:08,850
database we use that the University of

00:25:06,899 --> 00:25:10,999
Oslo and several other universities in

00:25:08,850 --> 00:25:16,139
Norway use it as well and colleges so

00:25:10,999 --> 00:25:20,309
it's a database of persons users those

00:25:16,139 --> 00:25:22,230
are distinct concepts because a person

00:25:20,309 --> 00:25:29,279
can have multiple users associated with

00:25:22,230 --> 00:25:32,730
them and machines not only machines but

00:25:29,279 --> 00:25:35,610
also so it can generate our entire DNS

00:25:32,730 --> 00:25:37,889
zone file it knows about machines and it

00:25:35,610 --> 00:25:39,749
can we can we use it to assign IP

00:25:37,889 --> 00:25:42,860
addresses to machines we use it to

00:25:39,749 --> 00:25:47,490
assign names to machines see names PTR

00:25:42,860 --> 00:25:52,669
DNS records and also roles because we

00:25:47,490 --> 00:25:56,610
can set we can assign roles to machines

00:25:52,669 --> 00:26:06,110
which are then exported as groups in the

00:25:56,610 --> 00:26:10,679
LDAP directory which means that on the

00:26:06,110 --> 00:26:14,700
at the other end we can do an LDAP

00:26:10,679 --> 00:26:16,590
lookup is this machine part of that

00:26:14,700 --> 00:26:19,830
group and if it is then this machine

00:26:16,590 --> 00:26:22,970
will have either automatically install

00:26:19,830 --> 00:26:25,950
this software or things like that

00:26:22,970 --> 00:26:27,899
Active Directory is used for identity

00:26:25,950 --> 00:26:29,970
and authentication internally so

00:26:27,899 --> 00:26:31,830
cerebrum is not something that you

00:26:29,970 --> 00:26:33,269
access directly it's not like when you

00:26:31,830 --> 00:26:35,549
log in on a machine it won't ask

00:26:33,269 --> 00:26:37,740
cerebrum for information about you it's

00:26:35,549 --> 00:26:41,070
a it's a database and when you make a

00:26:37,740 --> 00:26:43,619
change in cerebrum it will push it will

00:26:41,070 --> 00:26:47,029
propagate that change to our domain

00:26:43,619 --> 00:26:51,690
controllers or try our Active Directory

00:26:47,029 --> 00:26:53,880
and also to the Nexus which I forgot to

00:26:51,690 --> 00:26:59,040
list there but it was on the network

00:26:53,880 --> 00:27:02,520
part GMaps so the Nexus is it grew out

00:26:59,040 --> 00:27:05,910
of we made the decision to use cerebrum

00:27:02,520 --> 00:27:10,380
rather late we were initially going to

00:27:05,910 --> 00:27:12,360
have our own provisioning system and the

00:27:10,380 --> 00:27:16,890
remains of that provisioning system is

00:27:12,360 --> 00:27:21,770
Nexus which is used this specifically by

00:27:16,890 --> 00:27:25,290
the two-factor authentication system and

00:27:21,770 --> 00:27:30,300
also for network configuration to a

00:27:25,290 --> 00:27:37,380
certain extent the second factor is

00:27:30,300 --> 00:27:41,160
handled by a radius server which so

00:27:37,380 --> 00:27:45,030
cerebrum when you assign an OTP key to

00:27:41,160 --> 00:27:47,370
the user it is pushed to the Nexus which

00:27:45,030 --> 00:27:49,080
delivers it to the Ray or places it in a

00:27:47,370 --> 00:27:52,680
play place where the radius server will

00:27:49,080 --> 00:27:59,520
find it and then I'm getting ahead of

00:27:52,680 --> 00:28:02,460
myself I have a slide for this here is

00:27:59,520 --> 00:28:04,980
the the entire if anybody here actually

00:28:02,460 --> 00:28:06,990
knows and likes UML I'm terribly

00:28:04,980 --> 00:28:14,220
terribly sorry for my horrible abuse of

00:28:06,990 --> 00:28:18,540
a sequence diagram but anyway so you at

00:28:14,220 --> 00:28:21,540
ESD administrator or tech support person

00:28:18,540 --> 00:28:23,310
creates a user in cerebrum I will not go

00:28:21,540 --> 00:28:25,470
into all the political details there was

00:28:23,310 --> 00:28:29,730
a lot of paperwork because we have to

00:28:25,470 --> 00:28:31,350
get a copy of the Ethics Board approval

00:28:29,730 --> 00:28:35,640
and everything before we will even

00:28:31,350 --> 00:28:40,770
create a project I won't go into that so

00:28:35,640 --> 00:28:42,480
you create a user in cerebrum and that

00:28:40,770 --> 00:28:43,650
is immediately propagated to Active

00:28:42,480 --> 00:28:47,010
Directory and it is immediately

00:28:43,650 --> 00:28:48,960
propagated to the Nexus then you set a

00:28:47,010 --> 00:28:50,880
password and that password is sent to

00:28:48,960 --> 00:28:52,190
Active Directory it is not sent to Nexus

00:28:50,880 --> 00:28:55,710
Nexus doesn't need to know the password

00:28:52,190 --> 00:29:01,530
then you set an OTP key the secret for a

00:28:55,710 --> 00:29:06,880
foreign foreign OTP key which is then

00:29:01,530 --> 00:29:08,769
sent to Nexus so at a later point

00:29:06,880 --> 00:29:11,860
there should be an arrow here that says

00:29:08,769 --> 00:29:15,159
login or whatever but at a later point

00:29:11,860 --> 00:29:16,929
the user attempts to login so we do an

00:29:15,159 --> 00:29:20,860
identity request from Active Directory

00:29:16,929 --> 00:29:29,940
that's LDAP then we ask the user for

00:29:20,860 --> 00:29:32,169
their for a one-time code which is then

00:29:29,940 --> 00:29:36,600
transmitted in a radius request to the

00:29:32,169 --> 00:29:41,980
radius server and the radius server runs

00:29:36,600 --> 00:29:45,879
a program that retrieves the key from

00:29:41,980 --> 00:29:47,470
the nexus database and verifies it and

00:29:45,879 --> 00:29:54,600
if it is correct it will increment the

00:29:47,470 --> 00:29:57,220
counter or to prevent reuse and then the

00:29:54,600 --> 00:30:01,240
OpenSSL verifies the password that's

00:29:57,220 --> 00:30:06,850
actually a Kerberos request to the

00:30:01,240 --> 00:30:08,950
Active Directory server and this line

00:30:06,850 --> 00:30:11,860
was supposed to be there then it updates

00:30:08,950 --> 00:30:15,009
the firewall it uses off PF to insert

00:30:11,860 --> 00:30:21,399
user specific rules into the firewall

00:30:15,009 --> 00:30:25,090
rule set and at a later point at a later

00:30:21,399 --> 00:30:27,700
point when the user eventually logs out

00:30:25,090 --> 00:30:34,440
then of the auth PF process dies and the

00:30:27,700 --> 00:30:34,440
rules are removed from the firewall so

00:30:34,559 --> 00:30:42,600
here's some of the things that we do

00:30:39,100 --> 00:30:49,509
with the provisioning system other than

00:30:42,600 --> 00:30:52,960
other than user management when a

00:30:49,509 --> 00:30:55,960
machine is created in server and machine

00:30:52,960 --> 00:30:58,179
object is created in cerebrum so I type

00:30:55,960 --> 00:31:02,769
into my command prompt on host at house

00:30:58,179 --> 00:31:06,519
add whatever and then I assign a role to

00:31:02,769 --> 00:31:08,950
it that says a role that's called Auto

00:31:06,519 --> 00:31:11,049
provision I assign a role to it but says

00:31:08,950 --> 00:31:15,240
for instance Linux operating system what

00:31:11,049 --> 00:31:19,750
happens is that within a few minutes the

00:31:15,240 --> 00:31:25,050
there's a back-end that will create

00:31:19,750 --> 00:31:28,690
a virtual machine in Rev and start the

00:31:25,050 --> 00:31:31,450
installation we use I think for Windows

00:31:28,690 --> 00:31:33,250
machines when those machines are cloned

00:31:31,450 --> 00:31:35,980
I think I'm not entirely sure because I

00:31:33,250 --> 00:31:38,500
haven't been involved in the windows

00:31:35,980 --> 00:31:47,800
side of things and Linux machines are

00:31:38,500 --> 00:31:50,800
pixi installed with Kickstarter every

00:31:47,800 --> 00:31:52,990
machine in the database has a role which

00:31:50,800 --> 00:31:54,430
is either a Linux operating system

00:31:52,990 --> 00:31:56,110
Windows operating system of FreeBSD

00:31:54,430 --> 00:31:59,890
operating system so that in the LDAP

00:31:56,110 --> 00:32:01,510
directory I can look up a group in LDAP

00:31:59,890 --> 00:32:02,800
called Linux operating system or a

00:32:01,510 --> 00:32:04,690
Windows operating system free/busy

00:32:02,800 --> 00:32:06,280
opposite operating system whatever that

00:32:04,690 --> 00:32:08,140
group will contain almost all the

00:32:06,280 --> 00:32:10,180
machines that run that operating system

00:32:08,140 --> 00:32:14,800
at least in theory if the information in

00:32:10,180 --> 00:32:20,970
the davidís is correct and I can use

00:32:14,800 --> 00:32:23,620
that there's a script that runs every

00:32:20,970 --> 00:32:26,010
either every minute or every five

00:32:23,620 --> 00:32:29,920
minutes something like that that will

00:32:26,010 --> 00:32:32,230
traverse the LDAP directory and look at

00:32:29,920 --> 00:32:37,600
specific groups in the LDAP directory

00:32:32,230 --> 00:32:40,540
and translate those groups into into PF

00:32:37,600 --> 00:32:42,460
address tables so it looks up a group

00:32:40,540 --> 00:32:46,060
for instance Linux operating system and

00:32:42,460 --> 00:32:48,430
it gets a list of it gets a list of

00:32:46,060 --> 00:32:50,500
machine names and then it looks up all

00:32:48,430 --> 00:32:51,910
the machine objects and gets the DNS

00:32:50,500 --> 00:32:55,930
hostname property from the machine

00:32:51,910 --> 00:32:58,810
object resolves that does a DNS lookup

00:32:55,930 --> 00:33:01,090
for that and you end up with a long list

00:32:58,810 --> 00:33:06,970
of addresses and those are shoved into a

00:33:01,090 --> 00:33:09,250
PF table which is updated dynamically so

00:33:06,970 --> 00:33:13,060
we have firewall rules based on those

00:33:09,250 --> 00:33:14,890
tables for instance we have a firewall

00:33:13,060 --> 00:33:16,510
rule that says that Linux machines and

00:33:14,890 --> 00:33:18,940
FreeBSD machines are allowed to talk to

00:33:16,510 --> 00:33:21,040
the cfengine server for configuration

00:33:18,940 --> 00:33:22,690
management but Windows machines aren't

00:33:21,040 --> 00:33:24,940
they have no reason to talk to cfengine

00:33:22,690 --> 00:33:28,150
and I don't want somebody to log in on

00:33:24,940 --> 00:33:31,300
their Windows desktop wherever and start

00:33:28,150 --> 00:33:33,100
messing around with the or try to mess

00:33:31,300 --> 00:33:38,020
around with the cfengine server

00:33:33,100 --> 00:33:45,160
for whatever reason only Windows

00:33:38,020 --> 00:33:50,500
machines are allowed to talk to W you

00:33:45,160 --> 00:33:53,860
know uh wsus the Windows software update

00:33:50,500 --> 00:33:58,090
system for instance Linux machines are

00:33:53,860 --> 00:34:00,429
allowed to talk to our yum proxy which

00:33:58,090 --> 00:34:02,740
is a proxy for the Red Hat Network for

00:34:00,429 --> 00:34:05,919
automatic updates our FreeBSD machines

00:34:02,740 --> 00:34:09,879
are allowed to talk to the FreeBSD

00:34:05,919 --> 00:34:12,129
update and package servers things like

00:34:09,879 --> 00:34:14,200
that and that's updated dynamically so

00:34:12,129 --> 00:34:16,600
you Adam if you add a machine in

00:34:14,200 --> 00:34:18,580
cerebrum five minutes later the machine

00:34:16,600 --> 00:34:19,300
is at least four an Linux machine is

00:34:18,580 --> 00:34:22,570
very fast

00:34:19,300 --> 00:34:26,230
the machine is can create it installed

00:34:22,570 --> 00:34:30,190
and firewall rules have been updated for

00:34:26,230 --> 00:34:31,510
that machine users are affiliated with

00:34:30,190 --> 00:34:33,369
projects and machines actually

00:34:31,510 --> 00:34:35,440
everything in the system is affiliated

00:34:33,369 --> 00:34:37,990
with a project that's one of the

00:34:35,440 --> 00:34:41,740
modifications we made to cerebrum which

00:34:37,990 --> 00:34:43,720
means that we can also modify the

00:34:41,740 --> 00:34:45,700
firewall rules or have firewall rules

00:34:43,720 --> 00:34:50,909
that are specific for groups of users

00:34:45,700 --> 00:34:53,350
and that's something that we haven't

00:34:50,909 --> 00:34:57,609
it's on the to-do list but it hasn't

00:34:53,350 --> 00:35:02,650
been implemented yet but if a user on

00:34:57,609 --> 00:35:05,380
Project 42 logs in then the off the the

00:35:02,650 --> 00:35:11,080
rules that off PF will install into the

00:35:05,380 --> 00:35:16,180
PF rule set will only allow will only

00:35:11,080 --> 00:35:25,420
allow that user to access machines that

00:35:16,180 --> 00:35:27,820
belong to project 42 right here's an

00:35:25,420 --> 00:35:31,510
example of the login process not really

00:35:27,820 --> 00:35:33,130
very very interesting but it's just you

00:35:31,510 --> 00:35:35,490
get a banner you're connecting to the

00:35:33,130 --> 00:35:37,869
University of Oslo blah blah blah

00:35:35,490 --> 00:35:41,050
restricted to duly accredited members so

00:35:37,869 --> 00:35:45,540
this is we had a lawyer who required us

00:35:41,050 --> 00:35:45,540
to print a banner before logging in

00:35:46,290 --> 00:35:54,369
which is fine by me I think the the

00:35:51,099 --> 00:35:55,960
operative part here is that we had a

00:35:54,369 --> 00:35:58,390
research project from the Oslo

00:35:55,960 --> 00:36:03,070
University Hospital and their security

00:35:58,390 --> 00:36:05,170
people have restrictions on which

00:36:03,070 --> 00:36:07,570
machines that they are allowed to use to

00:36:05,170 --> 00:36:14,920
log into our system so that's actually

00:36:07,570 --> 00:36:18,210
why we have that banner here one time

00:36:14,920 --> 00:36:24,609
code password bla I am now logged in and

00:36:18,210 --> 00:36:27,250
what I get when I log in is a screen

00:36:24,609 --> 00:36:35,800
full of text that describes how to use

00:36:27,250 --> 00:36:37,920
yes Oh describes how to use it and of

00:36:35,800 --> 00:36:41,740
course you don't get a shell because

00:36:37,920 --> 00:36:45,670
your login shell is off PF and your home

00:36:41,740 --> 00:36:48,300
directories VAR empty so it just remains

00:36:45,670 --> 00:36:52,119
open until you control C or you lose the

00:36:48,300 --> 00:36:55,119
network connection so where the rubber

00:36:52,119 --> 00:36:58,200
meets the road I've been I've covered I

00:36:55,119 --> 00:37:00,760
think most of how it's supposed to work

00:36:58,200 --> 00:37:02,970
but we've had issues there are always

00:37:00,760 --> 00:37:02,970
issues

00:37:03,089 --> 00:37:08,770
TSD was intended to be an ipv6 only

00:37:06,580 --> 00:37:11,859
environment unfortunately as we

00:37:08,770 --> 00:37:16,540
discovered after a fairly short while a

00:37:11,859 --> 00:37:18,520
lot of software does not support ipv6 or

00:37:16,540 --> 00:37:20,970
they claim to support ipv6 but they

00:37:18,520 --> 00:37:23,530
don't do it properly Red Hat Enterprise

00:37:20,970 --> 00:37:29,109
fertilization does not support ipv6 at

00:37:23,530 --> 00:37:32,710
all that was an eye-opener and even you

00:37:29,109 --> 00:37:35,050
can't even have ipv6 name servers in

00:37:32,710 --> 00:37:37,290
your resolved Kampf on a Red Hat

00:37:35,050 --> 00:37:40,119
Enterprise fertilization host node

00:37:37,290 --> 00:37:43,060
because they don't use the glib C DNS

00:37:40,119 --> 00:37:49,330
resolver they have their own resolver

00:37:43,060 --> 00:37:53,190
which does not understand an ipv6

00:37:49,330 --> 00:37:56,740
address server address in result conf

00:37:53,190 --> 00:37:58,390
also you can't pixie boot over ipv6

00:37:56,740 --> 00:38:01,120
there's an RFC for

00:37:58,390 --> 00:38:05,200
but it's not implemented so the the the

00:38:01,120 --> 00:38:09,370
qmu bios the the bios and the pixie by

00:38:05,200 --> 00:38:12,370
us and the VMS doesn't talk ipv6 we

00:38:09,370 --> 00:38:14,950
can't use slack which would have been

00:38:12,370 --> 00:38:16,600
very nice I mean yes slack has

00:38:14,950 --> 00:38:18,670
limitations and issues and security

00:38:16,600 --> 00:38:21,430
issues but we can't use it because Linux

00:38:18,670 --> 00:38:23,860
source address selection is broken so we

00:38:21,430 --> 00:38:27,610
have to use carp on the inside instead

00:38:23,860 --> 00:38:31,090
of using slack for router advertising

00:38:27,610 --> 00:38:34,420
and also found and fixed some bugs in

00:38:31,090 --> 00:38:38,770
freebies is Right RT out of d some

00:38:34,420 --> 00:38:41,680
crashes and things issues with PF and

00:38:38,770 --> 00:38:44,050
carp that was a bug in freebsd sort

00:38:41,680 --> 00:38:46,630
source address selection as well so the

00:38:44,050 --> 00:38:48,460
backup if you have a you have a master

00:38:46,630 --> 00:38:50,080
and a backup node and they share an IP

00:38:48,460 --> 00:38:51,730
address but the backup node is not

00:38:50,080 --> 00:38:53,260
supposed to use that IP address when to

00:38:51,730 --> 00:38:55,780
the backup node but it would still use

00:38:53,260 --> 00:39:00,250
that IP address as a source address for

00:38:55,780 --> 00:39:03,310
outgoing connections fix that we still

00:39:00,250 --> 00:39:05,530
have problems with the ipv6 routing of

00:39:03,310 --> 00:39:08,560
ipv6 UDP packets and I think it's

00:39:05,530 --> 00:39:11,290
related to the fact that PF does some

00:39:08,560 --> 00:39:14,770
weird things with checksums and i know

00:39:11,290 --> 00:39:17,470
that the the ipv6 the ipv4 code there is

00:39:14,770 --> 00:39:20,440
somewhat wrong and the ipv6 code there

00:39:17,470 --> 00:39:22,600
is very wrong the it will only manifest

00:39:20,440 --> 00:39:25,120
enters under certain circumstances and

00:39:22,600 --> 00:39:26,920
apparently we trigger those there's a

00:39:25,120 --> 00:39:32,770
pair for that that's assigned to me I

00:39:26,920 --> 00:39:34,900
haven't our state our state table kept

00:39:32,770 --> 00:39:38,050
filling up and I discovered that it was

00:39:34,900 --> 00:39:41,140
actually due to DNS NTP Kerberos LDAP

00:39:38,050 --> 00:39:44,440
requests boom like the script that

00:39:41,140 --> 00:39:47,230
populates the PF address tables 2000

00:39:44,440 --> 00:39:49,840
states the moment I run it because it

00:39:47,230 --> 00:39:51,190
does individual LDAP requests the moment

00:39:49,840 --> 00:39:53,700
I run it I suddenly have two or three

00:39:51,190 --> 00:39:56,830
thousand new entries in my state table

00:39:53,700 --> 00:39:59,230
so my state table is now hasn't now has

00:39:56,830 --> 00:40:03,150
a state table limit is now one hundred

00:39:59,230 --> 00:40:03,150
thousand states should be enough

00:40:06,050 --> 00:40:11,099
yeah I double-a issues of free radius is

00:40:09,599 --> 00:40:12,900
difficult to configure correctly it's

00:40:11,099 --> 00:40:14,460
also slightly unreliable there are weird

00:40:12,900 --> 00:40:16,260
things that happen when we add a user

00:40:14,460 --> 00:40:18,690
sometimes free radius insists that the

00:40:16,260 --> 00:40:21,540
user does not exist so you get a u

00:40:18,690 --> 00:40:22,920
invalid user it doesn't even ask the

00:40:21,540 --> 00:40:24,660
back end it doesn't even try to verify

00:40:22,920 --> 00:40:26,280
the code it just know that user doesn't

00:40:24,660 --> 00:40:32,599
exist even though the user has been in

00:40:26,280 --> 00:40:35,190
the EGC SP w d dot whatever for days an

00:40:32,599 --> 00:40:37,580
SS LDAP is also slightly broken and

00:40:35,190 --> 00:40:40,290
that's my fault

00:40:37,580 --> 00:40:41,970
it had a huge bug and I fix the huge bug

00:40:40,290 --> 00:40:44,760
but when I fix the tooth bug I

00:40:41,970 --> 00:40:45,420
introduced a small bug and I'm out of

00:40:44,760 --> 00:40:48,660
time

00:40:45,420 --> 00:40:50,369
I could go on for hours about all the

00:40:48,660 --> 00:40:51,570
things that don't work in TS d and all

00:40:50,369 --> 00:40:53,930
the things we should have done

00:40:51,570 --> 00:41:05,280
differently but I'm out of time so

00:40:53,930 --> 00:41:08,010
questions wait for the microphone do you

00:41:05,280 --> 00:41:10,770
have a mechanism to write limit outgoing

00:41:08,010 --> 00:41:12,930
data transfers to stop bulk export if

00:41:10,770 --> 00:41:17,609
there turns out to be earth a bug in

00:41:12,930 --> 00:41:18,930
your implementation to stop the design

00:41:17,609 --> 00:41:21,540
of the system is to stop people bulk

00:41:18,930 --> 00:41:23,480
extracting the data for yep yeah so do

00:41:21,540 --> 00:41:25,260
you have a mechanism to say write limit

00:41:23,480 --> 00:41:27,480
network throughputs for given

00:41:25,260 --> 00:41:31,140
connections to at least mitigate some of

00:41:27,480 --> 00:41:34,950
that and I'm sorry do I have a mechanism

00:41:31,140 --> 00:41:44,000
to to to write limit to stop o rate

00:41:34,950 --> 00:41:46,619
limit okay the so when you export data

00:41:44,000 --> 00:41:51,980
at some at some level we have to trust

00:41:46,619 --> 00:41:55,650
our users so we have we have groups with

00:41:51,980 --> 00:42:00,690
we have user roles as well and initially

00:41:55,650 --> 00:42:04,550
only the administrator and head of the

00:42:00,690 --> 00:42:07,109
project are allowed to export data and

00:42:04,550 --> 00:42:08,700
they do that by placing it in a specific

00:42:07,109 --> 00:42:10,560
directory and then is copied from there

00:42:08,700 --> 00:42:12,270
to the SFTP server and they can download

00:42:10,560 --> 00:42:14,160
it from there

00:42:12,270 --> 00:42:17,190
currently there's a flaw in that

00:42:14,160 --> 00:42:19,440
mechanism because it's limited to I

00:42:17,190 --> 00:42:24,240
limited it to eight

00:42:19,440 --> 00:42:26,190
can simultaneous transfers so the the

00:42:24,240 --> 00:42:27,990
system scans the directory and then it

00:42:26,190 --> 00:42:29,460
picks up new files and it starts

00:42:27,990 --> 00:42:31,290
transferring them but it won't transfer

00:42:29,460 --> 00:42:32,760
more than eight files at a time the

00:42:31,290 --> 00:42:35,280
problem if of course is that if you have

00:42:32,760 --> 00:42:39,840
aged eight huge files like eight huge

00:42:35,280 --> 00:42:41,520
FASTA files gene sequences then nothing

00:42:39,840 --> 00:42:48,690
else gets transferred until they're done

00:42:41,520 --> 00:42:52,860
so yes that's an issue but other than

00:42:48,690 --> 00:42:54,840
that no we we have to trust our users to

00:42:52,860 --> 00:43:00,930
a certain extent and we chose to trust

00:42:54,840 --> 00:43:05,310
them there any other what you are using

00:43:00,930 --> 00:43:11,700
for OTP exactly oh yeah in tokens using

00:43:05,310 --> 00:43:15,180
SMS or what this RFC 62-38 time-based

00:43:11,700 --> 00:43:21,240
one-time password the same same

00:43:15,180 --> 00:43:25,470
algorithm that Google uses so users who

00:43:21,240 --> 00:43:27,030
have smartphones can use free OTP or the

00:43:25,470 --> 00:43:29,700
Google Authenticator app but I prefer

00:43:27,030 --> 00:43:32,070
free OTP which is Red Hat's version of

00:43:29,700 --> 00:43:33,480
the Google Authenticator app users who

00:43:32,070 --> 00:43:36,150
don't have or don't want to have

00:43:33,480 --> 00:43:38,610
smartphones get a Yubikey instead and so

00:43:36,150 --> 00:43:44,310
they get event mode instead of time mode

00:43:38,610 --> 00:43:46,530
so I just wanted to ask if your jump

00:43:44,310 --> 00:43:49,170
posts are they independently or some

00:43:46,530 --> 00:43:50,850
load balancing between or have the users

00:43:49,170 --> 00:43:54,480
to explicitly choose one of the jump

00:43:50,850 --> 00:43:58,380
posts there is carp both in front and

00:43:54,480 --> 00:44:03,720
behind so the users are instructed to

00:43:58,380 --> 00:44:06,180
SSH to the JH dot T sdw set up I know

00:44:03,720 --> 00:44:10,940
which is the carp address and which will

00:44:06,180 --> 00:44:14,250
go to whichever is the the master so

00:44:10,940 --> 00:44:17,520
it's a failover mechanism not a load

00:44:14,250 --> 00:44:20,430
balancing mechanism if I correctly

00:44:17,520 --> 00:44:23,130
understand the users you have to connect

00:44:20,430 --> 00:44:26,010
to desktop which is inside the perimeter

00:44:23,130 --> 00:44:26,460
yeah so they can access the data from

00:44:26,010 --> 00:44:28,890
there

00:44:26,460 --> 00:44:30,630
so are they some way to prevent the

00:44:28,890 --> 00:44:31,950
users exporting the data from their

00:44:30,630 --> 00:44:34,200
desktops outside

00:44:31,950 --> 00:44:41,220
using some GOP because you mentioned

00:44:34,200 --> 00:44:43,250
that the files are already using sha-256

00:44:41,220 --> 00:44:47,670
old using GOP with this information

00:44:43,250 --> 00:44:54,750
sounds quite easy using u P data Lee

00:44:47,670 --> 00:44:56,730
prevention tools because well so first

00:44:54,750 --> 00:44:59,430
of all they they get a remote desktop

00:44:56,730 --> 00:45:01,290
but they can't copy paste out of that

00:44:59,430 --> 00:45:04,170
desktop right they have to use the file

00:45:01,290 --> 00:45:08,100
lock to send data out and all accesses

00:45:04,170 --> 00:45:10,020
are logged so this is a case so we're

00:45:08,100 --> 00:45:11,670
back to what I said earlier we have to

00:45:10,020 --> 00:45:15,660
trust our users but they're all there's

00:45:11,670 --> 00:45:18,060
also from a legal point of view there's

00:45:15,660 --> 00:45:20,760
a point where our job is no longer to

00:45:18,060 --> 00:45:23,400
prevent data from moving around but to

00:45:20,760 --> 00:45:29,400
be able to document that the data has

00:45:23,400 --> 00:45:31,320
moved around and this is this is what

00:45:29,400 --> 00:45:34,380
what the checksum is for we log the file

00:45:31,320 --> 00:45:38,730
name the user timestamp and a checksum

00:45:34,380 --> 00:45:41,190
checksum checksum of the file and we

00:45:38,730 --> 00:45:43,230
have I mean the system is useless if we

00:45:41,190 --> 00:45:45,960
if our users aren't allowed to extract

00:45:43,230 --> 00:45:51,300
the data at all so it's yeah it's a

00:45:45,960 --> 00:46:02,940
difficult I hope I answered your

00:45:51,300 --> 00:46:05,370
question how easy is it to leverage your

00:46:02,940 --> 00:46:06,660
implementation for other sites like

00:46:05,370 --> 00:46:08,040
other supercomputer sites at

00:46:06,660 --> 00:46:14,220
universities that have got similar

00:46:08,040 --> 00:46:17,520
around requirements yeah so it's a huge

00:46:14,220 --> 00:46:20,280
system really a huge system it's not

00:46:17,520 --> 00:46:22,380
it's not really a product but there are

00:46:20,280 --> 00:46:24,630
components that can be reused and we

00:46:22,380 --> 00:46:27,630
know that there are other other

00:46:24,630 --> 00:46:30,240
institutions such as the Kuhn Liam

00:46:27,630 --> 00:46:34,680
Technica home schooling the real Royal

00:46:30,240 --> 00:46:36,420
Technical College in loon who are

00:46:34,680 --> 00:46:39,810
implementing a similar system and

00:46:36,420 --> 00:46:41,580
they've expressed interest in our file

00:46:39,810 --> 00:46:43,410
lock implementation and that's actually

00:46:41,580 --> 00:46:45,720
that's a self-contained piece of

00:46:43,410 --> 00:46:49,170
software that if you have the

00:46:45,720 --> 00:46:51,030
need to copy data from A to B and log it

00:46:49,170 --> 00:46:53,520
etc that's software that you can

00:46:51,030 --> 00:46:56,040
actually build and it's written under

00:46:53,520 --> 00:47:00,330
BSD license but I don't think the git

00:46:56,040 --> 00:47:02,690
repo is accessible currently so I just

00:47:00,330 --> 00:47:06,720
have to move it to a different get repo

00:47:02,690 --> 00:47:13,770
the OTP code is something that I wrote

00:47:06,720 --> 00:47:18,270
myself it's it's still experimental sort

00:47:13,770 --> 00:47:20,550
of it's in the open Pam SVN repo when I

00:47:18,270 --> 00:47:22,920
when I initially wrote it two years ago

00:47:20,550 --> 00:47:25,109
there were no other BSD license OTP

00:47:22,920 --> 00:47:28,470
implementation except for a command line

00:47:25,109 --> 00:47:29,760
based one for a bsd open BSD is

00:47:28,470 --> 00:47:32,310
authentication framework I don't

00:47:29,760 --> 00:47:40,430
remember what it's called now there are

00:47:32,310 --> 00:47:44,960
plenty but yeah last question how usable

00:47:40,430 --> 00:47:48,869
for end-users is connection to SSH and

00:47:44,960 --> 00:47:51,900
making a local port mapping do you have

00:47:48,869 --> 00:47:54,480
some search party utility for everyone

00:47:51,900 --> 00:48:00,690
like Mac users Windows users which use

00:47:54,480 --> 00:48:07,349
something like a link we are we document

00:48:00,690 --> 00:48:09,589
how to set up pretty basically so there

00:48:07,349 --> 00:48:09,589
unfortunately

00:48:09,619 --> 00:48:17,040
so this screen documents how to use SSH

00:48:14,300 --> 00:48:19,410
unfortunately there is no way you can't

00:48:17,040 --> 00:48:22,339
distribute so putty does not have a file

00:48:19,410 --> 00:48:25,560
based configuration we would have no.you

00:48:22,339 --> 00:48:29,250
it uses a registry so we would have to

00:48:25,560 --> 00:48:32,730
distribute pre generated files that

00:48:29,250 --> 00:48:35,580
install registry Keys dot what is it dot

00:48:32,730 --> 00:48:37,200
reg files that install registry keys to

00:48:35,580 --> 00:48:39,900
configure pretty so we instead we just

00:48:37,200 --> 00:48:43,550
tell people how to do it and most of

00:48:39,900 --> 00:48:43,550
them manage to figure it out

00:49:00,020 --> 00:49:04,890
so the question yeah the question was a

00:49:02,490 --> 00:49:09,810
batch files with peeling can we use that

00:49:04,890 --> 00:49:12,119
instead I haven't looked into it I think

00:49:09,810 --> 00:49:19,440
that somebody looked into it and decided

00:49:12,119 --> 00:49:23,010
that it wasn't as simple so there's the

00:49:19,440 --> 00:49:26,940
two-factor thing I'm not entirely sure

00:49:23,010 --> 00:49:28,560
of why we chose not to do that we did

00:49:26,940 --> 00:49:30,630
look into other Association

00:49:28,560 --> 00:49:32,550
implementations than pootie but we end

00:49:30,630 --> 00:49:37,800
up with putty it's it's not really

00:49:32,550 --> 00:49:40,380
difficult to configure so yeah okay

00:49:37,800 --> 00:49:44,739
thank you very much

00:49:40,380 --> 00:49:44,739

YouTube URL: https://www.youtube.com/watch?v=SRYU262QHzc


