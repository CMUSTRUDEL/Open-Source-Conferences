Title: The LLDB Debugger in FreeBSD - Ed Maste
Publication date: 2019-10-14
Playlist: EuroBSDcon 2014, Bulgaria
Description: 
	Abstract:

LLDB is a modern, high-performance debugger in the LLVM family of projects, and is built as a modular and reusable set of components on top of the Clang/LLVM foundation. It was originally developed for Mac OS X, but now supports FreeBSD and Linux as well, with ongoing work for Windows support.This presentation will provide an overview of the design of LLDB, compare it with the existing GNU debugger in the FreeBSD base system, and present the path to importing LLDB as FreeBSD’s debugger.

Speaker biography:

Ed Maste manages project development for the FreeBSD Foundation and works in an engineering support role with Robert Watson’s research group at the University of Cambridge Computer Laboratory. He has been a FreeBSD committer since 2005.
Captions: 
	00:00:08,250 --> 00:00:13,860
I'm gonna talk to you about L LD be in

00:00:11,459 --> 00:00:15,089
FreeBSD but in order to get there I'm

00:00:13,860 --> 00:00:17,400
going to talk a little bit about the

00:00:15,089 --> 00:00:20,430
history too so that you'll understand

00:00:17,400 --> 00:00:22,259
how we got to where we are and how that

00:00:20,430 --> 00:00:27,300
relates to where we hope to go in the

00:00:22,259 --> 00:00:30,360
future so first of all why do we need a

00:00:27,300 --> 00:00:32,969
new debugger as you you know the

00:00:30,360 --> 00:00:35,219
characteristic of BS DS is the concept

00:00:32,969 --> 00:00:36,719
of a base system cohesive set of

00:00:35,219 --> 00:00:39,020
operating system components that are

00:00:36,719 --> 00:00:41,850
developed and released and debugged and

00:00:39,020 --> 00:00:44,149
built together and released as an

00:00:41,850 --> 00:00:47,370
integrated whole and so one of the

00:00:44,149 --> 00:00:49,140
components of the base system is the

00:00:47,370 --> 00:00:50,579
tool chain which includes the compiler

00:00:49,140 --> 00:00:53,039
and the linker and all those things and

00:00:50,579 --> 00:00:56,309
of course a debugger and FreeBSD has a

00:00:53,039 --> 00:01:02,100
long history with gdb in the base system

00:00:56,309 --> 00:01:03,569
the new debugger so the history actually

00:01:02,100 --> 00:01:06,630
goes a little bit further off to the

00:01:03,569 --> 00:01:09,479
left of this chart I mind the contribs

00:01:06,630 --> 00:01:14,300
lash gdb directory to find out exactly

00:01:09,479 --> 00:01:16,710
when gdb releases came in over time and

00:01:14,300 --> 00:01:18,810
the the very first FreeBSD release

00:01:16,710 --> 00:01:22,470
actually predates the way that the

00:01:18,810 --> 00:01:26,630
source tree is used now so I voted up a

00:01:22,470 --> 00:01:31,200
freebsd 1.0 iso image in a vm to see and

00:01:26,630 --> 00:01:34,590
freebsd 1.0 in 1993 had gdb 3.5 in it

00:01:31,200 --> 00:01:39,270
and then in 96 we imported the source

00:01:34,590 --> 00:01:40,650
for 4.16 into the freebsd so the the

00:01:39,270 --> 00:01:43,110
light blue bar on the top represents

00:01:40,650 --> 00:01:46,500
upstream releases just selected ones and

00:01:43,110 --> 00:01:50,280
then they maybe that's fuchsia or light

00:01:46,500 --> 00:01:52,290
purple bar down below represents the

00:01:50,280 --> 00:01:56,040
time at which we imported that release

00:01:52,290 --> 00:01:57,390
into freebsd so over time GP releases

00:01:56,040 --> 00:01:59,730
would come out new minor releases would

00:01:57,390 --> 00:02:02,310
come out and they'd get imported so we

00:01:59,730 --> 00:02:03,810
skipped a little while and then 4.18

00:02:02,310 --> 00:02:06,360
came out we imported it a new major

00:02:03,810 --> 00:02:08,099
version came out 5.0 and we imported it

00:02:06,360 --> 00:02:10,619
and each time this would happen we'd

00:02:08,099 --> 00:02:12,720
have a bit of work to do to a plot to

00:02:10,619 --> 00:02:15,510
adapt the new release to run properly on

00:02:12,720 --> 00:02:18,720
freebsd so the sorts of things that had

00:02:15,510 --> 00:02:20,640
to be done our support for freebsd is

00:02:18,720 --> 00:02:21,690
threading model support for kernel

00:02:20,640 --> 00:02:26,900
debugging all of the

00:02:21,690 --> 00:02:26,900
didn't exist in the upstream gdb project

00:02:27,740 --> 00:02:33,180
and then as time went on additional gdb

00:02:30,900 --> 00:02:36,480
releases came out and we imported them

00:02:33,180 --> 00:02:38,580
basically once every once every year

00:02:36,480 --> 00:02:40,950
once every other year sort of sort of

00:02:38,580 --> 00:02:43,380
thing a gdb release to get imported into

00:02:40,950 --> 00:02:46,500
FreeBSD and over this time the this

00:02:43,380 --> 00:02:48,540
patch set for supporting gdb on FreeBSD

00:02:46,500 --> 00:02:51,360
kept growing and growing and was a

00:02:48,540 --> 00:02:54,950
larger amount of work on each new import

00:02:51,360 --> 00:02:57,570
and all of this history predates my

00:02:54,950 --> 00:02:59,730
direct involvement with debuggers on on

00:02:57,570 --> 00:03:01,560
three bsd so I don't have a direct

00:02:59,730 --> 00:03:02,850
reference but I talked to the people who

00:03:01,560 --> 00:03:04,560
were doing the work at the time and

00:03:02,850 --> 00:03:09,270
asked for a little bit of the history

00:03:04,560 --> 00:03:11,490
and basically the the developers who

00:03:09,270 --> 00:03:14,220
were working on on gdb and on FreeBSD at

00:03:11,490 --> 00:03:15,930
the time tried to work with upstream gdb

00:03:14,220 --> 00:03:18,120
to get the patches pushed upstream

00:03:15,930 --> 00:03:22,290
because of course it's a lot less effort

00:03:18,120 --> 00:03:24,780
if the changes for your own OS are are

00:03:22,290 --> 00:03:27,000
integrated directly in the the upstream

00:03:24,780 --> 00:03:28,620
project if you have to every time a new

00:03:27,000 --> 00:03:31,080
upstream comes out do a whole bunch of

00:03:28,620 --> 00:03:33,390
work to bring it into your your use case

00:03:31,080 --> 00:03:35,820
then it just becomes a larger and larger

00:03:33,390 --> 00:03:38,250
and larger maintenance overhead and so

00:03:35,820 --> 00:03:40,140
they tried to work with upstream gdb and

00:03:38,250 --> 00:03:43,140
get the patches pushed upstream but

00:03:40,140 --> 00:03:45,720
we're completely unsuccessful basically

00:03:43,140 --> 00:03:47,780
it was it was expectations on the gdb

00:03:45,720 --> 00:03:51,209
side that either they couldn't meet or

00:03:47,780 --> 00:03:53,910
couldn't keep up with with the the pace

00:03:51,209 --> 00:03:55,950
of on going upstream changes I'm not

00:03:53,910 --> 00:03:58,709
sure if the exact details but this is a

00:03:55,950 --> 00:04:01,560
common theme I've heard that it's often

00:03:58,709 --> 00:04:04,739
very difficult to to work with the gdb

00:04:01,560 --> 00:04:09,030
and GCC up streams at least from the

00:04:04,739 --> 00:04:10,410
freebsd community and of course GCC is

00:04:09,030 --> 00:04:13,170
the same sort of thing we've imported

00:04:10,410 --> 00:04:17,180
lots and lots of versions it's a bit

00:04:13,170 --> 00:04:19,980
more frequent and a few sort of more odd

00:04:17,180 --> 00:04:21,720
odd things where we've either waited a

00:04:19,980 --> 00:04:23,100
long time or something some of them

00:04:21,720 --> 00:04:24,960
actually even go backwards because we

00:04:23,100 --> 00:04:29,669
imported a snapshot and then it updated

00:04:24,960 --> 00:04:32,820
to the eventual final release and if we

00:04:29,669 --> 00:04:34,620
extend the history out to today I've

00:04:32,820 --> 00:04:37,680
skipped quite a few really

00:04:34,620 --> 00:04:40,380
I just I put a gdb 7.0 to show a new

00:04:37,680 --> 00:04:44,790
major release came out just before 2010

00:04:40,380 --> 00:04:46,110
and gdb 7.8 is the most recent I think

00:04:44,790 --> 00:04:48,570
it was just this last July

00:04:46,110 --> 00:04:53,960
so of course gdb development is is still

00:04:48,570 --> 00:04:57,090
ongoing and we've stopped as of 6.11 in

00:04:53,960 --> 00:04:59,910
2004 so in the base system in freebsd

00:04:57,090 --> 00:05:02,160
today we have a ten year old version of

00:04:59,910 --> 00:05:06,419
gdp and it's really showing its age so

00:05:02,160 --> 00:05:11,580
c++ debugging is is really locking in

00:05:06,419 --> 00:05:14,610
our base gdb and threaded threaded

00:05:11,580 --> 00:05:17,550
inferior target support is is also not

00:05:14,610 --> 00:05:21,180
particularly not particularly good right

00:05:17,550 --> 00:05:22,560
now and basically what ended up

00:05:21,180 --> 00:05:24,660
happening at this point was the

00:05:22,560 --> 00:05:28,139
developers who were doing this work kept

00:05:24,660 --> 00:05:30,300
I guess got tired of the effort of

00:05:28,139 --> 00:05:33,300
always import of trying to bring in the

00:05:30,300 --> 00:05:39,169
new versions and basically just gave up

00:05:33,300 --> 00:05:41,849
given locking a blocking sufficient

00:05:39,169 --> 00:05:44,310
sufficiently important bug fix or new

00:05:41,849 --> 00:05:47,039
feature in those next few releases there

00:05:44,310 --> 00:05:48,870
was no no real desire to put in the

00:05:47,039 --> 00:05:50,880
effort to do the import and then you'll

00:05:48,870 --> 00:05:54,150
notice that GCC also stopped and that's

00:05:50,880 --> 00:05:57,330
when the new project switched to GPL v3

00:05:54,150 --> 00:05:59,400
and so GPL v3 has a number of new

00:05:57,330 --> 00:06:02,130
restrictions and new clauses that some

00:05:59,400 --> 00:06:05,849
major FreeBSD committers and FreeBSD

00:06:02,130 --> 00:06:07,260
consumers and and previous contributors

00:06:05,849 --> 00:06:09,449
to FreeBSD sort of outside of the

00:06:07,260 --> 00:06:12,930
committer base found onerous or

00:06:09,449 --> 00:06:15,419
objectionable and so the the FreeBSD

00:06:12,930 --> 00:06:18,389
project there the current stance is that

00:06:15,419 --> 00:06:21,000
we won't take a update from a GPL v2

00:06:18,389 --> 00:06:24,210
component in the base system to GPL v3

00:06:21,000 --> 00:06:25,650
without very careful consideration by

00:06:24,210 --> 00:06:27,000
the core team to determine if there is

00:06:25,650 --> 00:06:28,590
if that's the way we want to go or if

00:06:27,000 --> 00:06:31,260
there's something else we would want to

00:06:28,590 --> 00:06:34,050
do so with the the compiler side we

00:06:31,260 --> 00:06:36,000
switched to clang and LLVM 10.0 has

00:06:34,050 --> 00:06:37,860
clang as the system compiler for

00:06:36,000 --> 00:06:39,780
specific for the the main Tier one

00:06:37,860 --> 00:06:42,750
architectures and that's working out

00:06:39,780 --> 00:06:45,150
quite well for us in the base system as

00:06:42,750 --> 00:06:47,969
far as a the compiler goes I'm very

00:06:45,150 --> 00:06:49,559
happy with it it compiles almost

00:06:47,969 --> 00:06:51,779
a large portion of the ports tree and

00:06:49,559 --> 00:06:54,149
works works quite well so that's been a

00:06:51,779 --> 00:06:56,819
very successful transition and then over

00:06:54,149 --> 00:06:59,309
time the additional other architectures

00:06:56,819 --> 00:07:04,349
like MIPS will will transition to clang

00:06:59,309 --> 00:07:06,749
as the system compiler as well so it was

00:07:04,349 --> 00:07:12,149
clear that we needed a new debugger we

00:07:06,749 --> 00:07:14,189
had no path forward and the we had no we

00:07:12,149 --> 00:07:15,869
had no way to move forward and the gdb

00:07:14,189 --> 00:07:19,559
that we had was was increasingly showing

00:07:15,869 --> 00:07:21,089
its age and and becoming a problem so at

00:07:19,559 --> 00:07:24,779
the time there were a few debugger

00:07:21,089 --> 00:07:26,939
projects out there exhaust or otherwise

00:07:24,779 --> 00:07:29,789
and a few new projects started springing

00:07:26,939 --> 00:07:31,199
up within the freebsd community and in

00:07:29,789 --> 00:07:34,559
the the broader open source community

00:07:31,199 --> 00:07:38,879
but none of them really gained critical

00:07:34,559 --> 00:07:44,239
mass and became a viable option for the

00:07:38,879 --> 00:07:46,499
freebsd based system and then in 2010 at

00:07:44,239 --> 00:07:49,559
Apple's Worldwide Developer Conference

00:07:46,499 --> 00:07:51,539
WWDC they announced that they had been

00:07:49,559 --> 00:07:57,509
working on a debugger project called ll

00:07:51,539 --> 00:08:00,300
DB and it it's built on top of clang and

00:07:57,509 --> 00:08:04,769
LLVM as foundational libraries and it

00:08:00,300 --> 00:08:07,229
basically it follows the same the same

00:08:04,769 --> 00:08:09,809
model as clanging all of VM as far as

00:08:07,229 --> 00:08:12,899
it's in the same family it's it's now in

00:08:09,809 --> 00:08:15,149
the the same repository and use the same

00:08:12,899 --> 00:08:19,499
bug tracker it's it's a member of the

00:08:15,149 --> 00:08:21,959
clang and LLVM family so just looking

00:08:19,499 --> 00:08:23,729
briefly at LL DBS history this is the

00:08:21,959 --> 00:08:27,479
the chart just represents lines of code

00:08:23,729 --> 00:08:31,739
data from block duck open hub which used

00:08:27,479 --> 00:08:34,769
to be called ole oh and from mid 2010 to

00:08:31,739 --> 00:08:37,199
about mid 2012 it was really an apple

00:08:34,769 --> 00:08:40,800
project I looked through the commit

00:08:37,199 --> 00:08:44,039
history in the repository at email email

00:08:40,800 --> 00:08:47,519
address domain names and basically

00:08:44,039 --> 00:08:50,129
speaking Apple did all of pretty much

00:08:47,519 --> 00:08:51,839
all of the work during this time I I did

00:08:50,129 --> 00:08:54,899
look to see who the most prolific non

00:08:51,839 --> 00:08:56,130
apple.com committer was and it so I

00:08:54,899 --> 00:08:59,429
looked and it turns out they were

00:08:56,130 --> 00:09:01,380
responsible responsible for two and a

00:08:59,429 --> 00:09:03,540
just under two percent of

00:09:01,380 --> 00:09:05,220
the number of commits during this time

00:09:03,540 --> 00:09:06,780
period and so I wanted to see a little

00:09:05,220 --> 00:09:09,120
bit more about what they were working on

00:09:06,780 --> 00:09:10,440
and what the relationship was and it

00:09:09,120 --> 00:09:13,440
turns out they were actually an intern

00:09:10,440 --> 00:09:14,580
at Apple during this time and their

00:09:13,440 --> 00:09:16,830
email address switched to apple.com

00:09:14,580 --> 00:09:19,010
later on in the history so I looked at

00:09:16,830 --> 00:09:21,660
the next most prolific committer and

00:09:19,010 --> 00:09:23,730
they were responsible for about one and

00:09:21,660 --> 00:09:25,860
a half percent of the commits but

00:09:23,730 --> 00:09:27,330
notably including some initial linux

00:09:25,860 --> 00:09:30,540
support so during this time a few

00:09:27,330 --> 00:09:33,090
patches landed for linux support and for

00:09:30,540 --> 00:09:35,520
a very initial port to freebsd so

00:09:33,090 --> 00:09:38,100
previous tea developers mark peek and

00:09:35,520 --> 00:09:40,050
Kip macy did a lot of the the early work

00:09:38,100 --> 00:09:42,510
and there was someone else even even

00:09:40,050 --> 00:09:45,330
before that that went in during this

00:09:42,510 --> 00:09:47,760
time so the linux support existed in ll

00:09:45,330 --> 00:09:50,790
DB and then kit macy and mark pete took

00:09:47,760 --> 00:09:54,330
that refactored that support into a set

00:09:50,790 --> 00:09:56,070
of POSIX classes and then had FreeBSD

00:09:54,330 --> 00:10:01,320
classes and Linux classes that derived

00:09:56,070 --> 00:10:04,710
from the the POSIX base class and then

00:10:01,320 --> 00:10:06,980
starting in mid 2012 Intel's open source

00:10:04,710 --> 00:10:09,060
group in Qatar in Waterloo Ontario

00:10:06,980 --> 00:10:11,070
Canada just down the street from where I

00:10:09,060 --> 00:10:13,760
live started working on this they had

00:10:11,070 --> 00:10:17,370
about I think they had four committers

00:10:13,760 --> 00:10:19,440
fairly consistently developing ll DB and

00:10:17,370 --> 00:10:21,750
their primary focus was on Linux so they

00:10:19,440 --> 00:10:24,900
wanted it to be a very capable debugger

00:10:21,750 --> 00:10:28,560
on on Linux and there were a few other

00:10:24,900 --> 00:10:30,990
people at Intel that we're committing at

00:10:28,560 --> 00:10:32,760
the same time but primarily a small

00:10:30,990 --> 00:10:37,710
group was was doing quite a lot of work

00:10:32,760 --> 00:10:43,880
and then in early 2013 I started working

00:10:37,710 --> 00:10:46,800
and that that that little bump there is

00:10:43,880 --> 00:10:49,770
it's just an anomaly of the the data

00:10:46,800 --> 00:10:51,840
from from Black Dog it's not that I was

00:10:49,770 --> 00:10:55,260
a very prolific committer just doing all

00:10:51,840 --> 00:10:57,990
kinds of work what really happened there

00:10:55,260 --> 00:11:00,800
is one of the the Intel guys committed a

00:10:57,990 --> 00:11:03,360
whole bunch of API documentation and

00:11:00,800 --> 00:11:05,610
open hub counted that as as lines of

00:11:03,360 --> 00:11:07,260
code so it looks like I showed up and

00:11:05,610 --> 00:11:11,820
did a ton of work but but really it's

00:11:07,260 --> 00:11:14,220
it's just a little glitch so my interest

00:11:11,820 --> 00:11:15,089
in ll DB came from a few different areas

00:11:14,220 --> 00:11:16,709
but

00:11:15,089 --> 00:11:19,800
one of the one of the motivating factors

00:11:16,709 --> 00:11:21,449
is the work I'm doing with the computer

00:11:19,800 --> 00:11:23,699
lab at the University of Cambridge as

00:11:21,449 --> 00:11:26,970
mentioned in collaboration with SR I in

00:11:23,699 --> 00:11:29,069
the US on a DARPA sponsored project for

00:11:26,970 --> 00:11:31,470
Hardware compartmentalization at the

00:11:29,069 --> 00:11:33,920
instruction set level so this introduces

00:11:31,470 --> 00:11:36,809
a whole bunch of interesting new

00:11:33,920 --> 00:11:38,730
requirements as far as registers and

00:11:36,809 --> 00:11:40,559
membrane attributes and things that that

00:11:38,730 --> 00:11:42,329
need to be just shown in a debugger

00:11:40,559 --> 00:11:44,279
context so that's one of the reasons

00:11:42,329 --> 00:11:47,819
that I started getting involved in in

00:11:44,279 --> 00:11:50,370
lldp but one of the in order to be able

00:11:47,819 --> 00:11:52,949
to explore some of those new avenues I

00:11:50,370 --> 00:11:56,160
first had to go and do a lot of work

00:11:52,949 --> 00:11:58,199
just to get LD be on FreeBSD into a good

00:11:56,160 --> 00:11:59,639
state so when I started the port had bit

00:11:58,199 --> 00:12:03,389
rotten a little bit it didn't even build

00:11:59,639 --> 00:12:05,999
actually on FreeBSD and so I had to

00:12:03,389 --> 00:12:07,829
first fix the build issues and then it

00:12:05,999 --> 00:12:10,639
did what you would start it and it just

00:12:07,829 --> 00:12:13,110
basically didn't didn't actually work so

00:12:10,639 --> 00:12:15,540
solving a few of those issues finally I

00:12:13,110 --> 00:12:17,610
got to the point of it's it's usable as

00:12:15,540 --> 00:12:20,249
a basic debugger you can startup bin LS

00:12:17,610 --> 00:12:22,110
set a breakpoint at main and it actually

00:12:20,249 --> 00:12:23,429
does something and then I worked on the

00:12:22,110 --> 00:12:25,920
the test suite so it was the same sort

00:12:23,429 --> 00:12:27,899
of thing at first the test suite didn't

00:12:25,920 --> 00:12:29,009
run on freebsd and i had to do a whole

00:12:27,899 --> 00:12:30,929
bunch of things to get it to pick the

00:12:29,009 --> 00:12:32,910
right compiler and the right lib c++ and

00:12:30,929 --> 00:12:35,249
and those sorts of things and it's not a

00:12:32,910 --> 00:12:38,009
lot of difficult work it's just tedious

00:12:35,249 --> 00:12:39,809
to iterate through all of those special

00:12:38,009 --> 00:12:42,870
cases where they've got you know if

00:12:39,809 --> 00:12:44,459
platform dots starts with Linux and

00:12:42,870 --> 00:12:47,069
eccentric eccentric cetera and then just

00:12:44,459 --> 00:12:48,449
adding a freebsd case on the end but

00:12:47,069 --> 00:12:49,920
there were a lot of those sorts of

00:12:48,449 --> 00:12:57,089
little things that needed to get cleaned

00:12:49,920 --> 00:12:59,790
up and in the beginning of this year

00:12:57,089 --> 00:13:02,639
google has come on board to start doing

00:12:59,790 --> 00:13:05,160
a lot of lldp work as well which is

00:13:02,639 --> 00:13:07,230
really important because the intel guys

00:13:05,160 --> 00:13:08,459
that group eyes actually shut down now

00:13:07,230 --> 00:13:10,589
the office down the street from me has

00:13:08,459 --> 00:13:13,259
closed and they're not working on this

00:13:10,589 --> 00:13:14,939
anymore and there's a lot of work to do

00:13:13,259 --> 00:13:18,509
here in sort of the base infrastructure

00:13:14,939 --> 00:13:20,399
beyond just just porting to linux

00:13:18,509 --> 00:13:22,589
reporting to freebsd as well so it's

00:13:20,399 --> 00:13:25,079
it's it's excellent that another company

00:13:22,589 --> 00:13:27,660
with significant resources has taken a

00:13:25,079 --> 00:13:28,950
large interest in ll DB and their

00:13:27,660 --> 00:13:30,540
primary platforms of

00:13:28,950 --> 00:13:32,130
I've interest our Linux Android and

00:13:30,540 --> 00:13:35,790
they're doing some work on Windows as

00:13:32,130 --> 00:13:37,620
well and then looking through the I

00:13:35,790 --> 00:13:38,580
looked through the rest of the commit

00:13:37,620 --> 00:13:40,200
history to see who else has been

00:13:38,580 --> 00:13:42,120
involved and I just put some of the

00:13:40,200 --> 00:13:43,650
logos based on domain names that I found

00:13:42,120 --> 00:13:45,960
in there and there are quite a few

00:13:43,650 --> 00:13:47,820
people who have doing one or two patches

00:13:45,960 --> 00:13:51,060
here and there build fixes and things so

00:13:47,820 --> 00:13:54,510
my point here is really just that ll DB

00:13:51,060 --> 00:13:56,970
is very much transitioning from what was

00:13:54,510 --> 00:14:00,660
originally an apple project to what is

00:13:56,970 --> 00:14:06,390
now very much a community supported and

00:14:00,660 --> 00:14:08,220
very credible and viable debugger so I'm

00:14:06,390 --> 00:14:12,060
going to talk a little bit about L LD

00:14:08,220 --> 00:14:15,810
B's design and so LD be in a similar way

00:14:12,060 --> 00:14:17,550
to clang in LLVM is built as a modular

00:14:15,810 --> 00:14:20,430
set of components that can be reused for

00:14:17,550 --> 00:14:24,420
other purposes so it allowed to be

00:14:20,430 --> 00:14:26,340
actually is it's built as a library that

00:14:24,420 --> 00:14:27,810
other projects can link against and use

00:14:26,340 --> 00:14:29,760
its functionality so it's designed to

00:14:27,810 --> 00:14:32,580
vend an API and if you're writing a

00:14:29,760 --> 00:14:33,660
command-line debugger so technology be

00:14:32,580 --> 00:14:36,440
at the command line and you're using it

00:14:33,660 --> 00:14:39,000
through a UI or through a text interface

00:14:36,440 --> 00:14:40,710
it's actually just linking against Lib L

00:14:39,000 --> 00:14:43,170
LD be the same way that if you're using

00:14:40,710 --> 00:14:45,810
Xcode on OS 10 its linking against the

00:14:43,170 --> 00:14:49,020
same kind of LD be library underneath

00:14:45,810 --> 00:14:50,910
and you'll see Python actually on here

00:14:49,020 --> 00:14:54,300
in two different spots so pythons on the

00:14:50,910 --> 00:14:55,920
top as a consumer of the ll DB API and

00:14:54,300 --> 00:14:59,010
then it's down here as a script

00:14:55,920 --> 00:15:01,260
interpreter so for the top case you can

00:14:59,010 --> 00:15:03,600
write a Python script that says import

00:15:01,260 --> 00:15:05,730
LL DB and you basically get an LL DB

00:15:03,600 --> 00:15:07,680
object that you can then have start up a

00:15:05,730 --> 00:15:09,000
process to debug set breakpoints single

00:15:07,680 --> 00:15:11,760
step through it so you could write an

00:15:09,000 --> 00:15:13,170
entire debugger front end in Python for

00:15:11,760 --> 00:15:15,270
instance just using the library under

00:15:13,170 --> 00:15:18,060
the hood without actually having to run

00:15:15,270 --> 00:15:19,470
a ll DB binary that that you communicate

00:15:18,060 --> 00:15:23,550
with through some sort of sort of

00:15:19,470 --> 00:15:27,200
interface and then yeah the Python down

00:15:23,550 --> 00:15:29,880
here in the scripting interpreter is

00:15:27,200 --> 00:15:32,250
something that we don't have at all in

00:15:29,880 --> 00:15:34,380
the base system today in gdb the

00:15:32,250 --> 00:15:36,660
scripting interface there is is quite

00:15:34,380 --> 00:15:40,200
limited in what old versions of gdb can

00:15:36,660 --> 00:15:41,940
do newer gdb contemporary gdb has a

00:15:40,200 --> 00:15:42,990
Python scripting interface as well but

00:15:41,940 --> 00:15:44,580
it allows you to do things

00:15:42,990 --> 00:15:47,220
like if you're if you need to walk a

00:15:44,580 --> 00:15:49,200
linked list that's in your target

00:15:47,220 --> 00:15:51,959
process for instance you can write a

00:15:49,200 --> 00:15:54,000
script in Python that will read very

00:15:51,959 --> 00:15:56,610
read member variables and do whatever

00:15:54,000 --> 00:15:58,529
you want to do so that you can automate

00:15:56,610 --> 00:16:01,649
the sorts of tasks that you need to

00:15:58,529 --> 00:16:03,390
execute like that now you can also use

00:16:01,649 --> 00:16:05,670
the script interpreter built into L LD

00:16:03,390 --> 00:16:08,520
be to add new new commands new

00:16:05,670 --> 00:16:10,350
functionality so for instance there's a

00:16:08,520 --> 00:16:11,670
memory search command that someone added

00:16:10,350 --> 00:16:16,980
at some point and that's actually

00:16:11,670 --> 00:16:19,890
implemented in in Python the expression

00:16:16,980 --> 00:16:22,560
parser up here is one really interesting

00:16:19,890 --> 00:16:24,480
part of the way LD works so as you can

00:16:22,560 --> 00:16:27,720
see I mentioned that the orange parts

00:16:24,480 --> 00:16:32,100
there are components that build heavily

00:16:27,720 --> 00:16:34,200
on clang or LLVM build on top of clang

00:16:32,100 --> 00:16:36,420
or LLVM foundation parts so the

00:16:34,200 --> 00:16:39,300
disassembler in the plug-in side is one

00:16:36,420 --> 00:16:41,370
part ll of VM provides the disassembly

00:16:39,300 --> 00:16:44,279
capability but the expression parser is

00:16:41,370 --> 00:16:47,880
really neat so one of the challenges of

00:16:44,279 --> 00:16:49,470
a debugger is giving a faithful

00:16:47,880 --> 00:16:51,300
expression parser so you can type in

00:16:49,470 --> 00:16:54,540
something at the command line to examine

00:16:51,300 --> 00:16:58,070
some complex object and examine member

00:16:54,540 --> 00:17:01,740
variables and some some really complex

00:16:58,070 --> 00:17:02,850
complex variable you have in in in the

00:17:01,740 --> 00:17:06,569
function that you're stopped in in the

00:17:02,850 --> 00:17:08,160
debugger and what ll DB does is takes

00:17:06,569 --> 00:17:10,339
the expression that you've entered at

00:17:08,160 --> 00:17:13,020
the command line wraps it in a function

00:17:10,339 --> 00:17:15,870
and a function sort of wrapper and a

00:17:13,020 --> 00:17:18,030
template and not a C++ template just a

00:17:15,870 --> 00:17:20,160
boilerplate around around your

00:17:18,030 --> 00:17:24,150
expression and then passes it off to

00:17:20,160 --> 00:17:26,400
clang to parse it so that any expression

00:17:24,150 --> 00:17:28,890
any any code that you could X could

00:17:26,400 --> 00:17:30,210
enter in your original source that

00:17:28,890 --> 00:17:33,059
you've compiled and are now debugging

00:17:30,210 --> 00:17:36,870
can also be entered at the command line

00:17:33,059 --> 00:17:40,260
and have LD be through clang execute

00:17:36,870 --> 00:17:41,760
that and so what ll do B does is takes

00:17:40,260 --> 00:17:44,460
the clang ast does a few transformations

00:17:41,760 --> 00:17:46,340
at that level converts it to LLVM ir

00:17:44,460 --> 00:17:49,530
does a few more translations that that

00:17:46,340 --> 00:17:52,080
transformations at that level and then

00:17:49,530 --> 00:17:54,300
depending on what sorts of operations

00:17:52,080 --> 00:17:56,790
your expression actually performs it

00:17:54,300 --> 00:17:59,580
either has an ir interpreter

00:17:56,790 --> 00:18:01,890
can figure out a if you're just reading

00:17:59,580 --> 00:18:04,200
a simple variable it'll just do that

00:18:01,890 --> 00:18:07,620
without doing anything particularly

00:18:04,200 --> 00:18:09,180
complex and if you have a very if you

00:18:07,620 --> 00:18:11,520
have a more complicated expression that

00:18:09,180 --> 00:18:13,410
it can't interpret it will JIT it and

00:18:11,520 --> 00:18:16,070
execute it in your targets in the

00:18:13,410 --> 00:18:19,140
context of your target so that you can

00:18:16,070 --> 00:18:21,360
you can do sort of any function call you

00:18:19,140 --> 00:18:22,680
want with there's certain certain

00:18:21,360 --> 00:18:25,050
limitations but generally speaking you

00:18:22,680 --> 00:18:26,910
can you can execute any sort of function

00:18:25,050 --> 00:18:30,270
call you want you can define local

00:18:26,910 --> 00:18:31,950
variables in your expression in your

00:18:30,270 --> 00:18:34,200
expression context that will remain from

00:18:31,950 --> 00:18:39,210
one expression to the next and I'll show

00:18:34,200 --> 00:18:40,820
a very brief demo of that later on the

00:18:39,210 --> 00:18:43,770
data form where there's our one other

00:18:40,820 --> 00:18:47,640
item I'll talk about just briefly so

00:18:43,770 --> 00:18:51,780
this is built into into L LD B and it

00:18:47,640 --> 00:18:55,140
knows how to interpret the lips tan C++

00:18:51,780 --> 00:18:58,020
or Lib C++ any of the sort of standard

00:18:55,140 --> 00:19:00,810
classes so that you get a nice a nicer

00:18:58,020 --> 00:19:03,690
looking representation for standard

00:19:00,810 --> 00:19:06,600
string or map or vector or whatever

00:19:03,690 --> 00:19:09,240
rather than just splatting out a whole

00:19:06,600 --> 00:19:12,210
bunch of incomprehensible gobbledygook

00:19:09,240 --> 00:19:14,880
and that that's something that

00:19:12,210 --> 00:19:17,400
contemporary gdb does through bringing

00:19:14,880 --> 00:19:19,110
in a Python script as well but in the

00:19:17,400 --> 00:19:22,560
base system today we don't have that

00:19:19,110 --> 00:19:26,970
capability and one of the I don't really

00:19:22,560 --> 00:19:30,780
want to talk about gdb versus L LD be

00:19:26,970 --> 00:19:32,820
too much because you know it's it's not

00:19:30,780 --> 00:19:35,430
really a valid comparison to to say

00:19:32,820 --> 00:19:38,250
contemporary LD B does so much that

00:19:35,430 --> 00:19:41,610
ten-year-old gdb doesn't do it's not

00:19:38,250 --> 00:19:42,870
really a very useful discussion but I

00:19:41,610 --> 00:19:44,280
think one of the things that's very

00:19:42,870 --> 00:19:47,400
interesting is even compared to

00:19:44,280 --> 00:19:49,530
contemporary gdb the discussion is very

00:19:47,400 --> 00:19:51,990
much around what can one do that the

00:19:49,530 --> 00:19:54,210
other can't and I think we'll see over

00:19:51,990 --> 00:19:57,000
the next couple of years as we've seen

00:19:54,210 --> 00:19:59,490
with clang and LLVM the early discussion

00:19:57,000 --> 00:20:02,340
was how does this compare to Klingon LVM

00:19:59,490 --> 00:20:04,830
how does it compare to GCC and that's

00:20:02,340 --> 00:20:05,880
we've largely moved past that now we're

00:20:04,830 --> 00:20:07,350
largely talking about what are the

00:20:05,880 --> 00:20:08,480
interesting things we can do because of

00:20:07,350 --> 00:20:09,950
the way that clanging

00:20:08,480 --> 00:20:11,690
eeehm work and what can we build on top

00:20:09,950 --> 00:20:13,190
of that and I think in the next couple

00:20:11,690 --> 00:20:15,020
of years we'll see the same thing with L

00:20:13,190 --> 00:20:16,070
LD be where we won't be comparing

00:20:15,020 --> 00:20:18,590
features or saying what isn't

00:20:16,070 --> 00:20:20,120
implemented yet it really will be what

00:20:18,590 --> 00:20:23,620
are the cool things that we can do with

00:20:20,120 --> 00:20:23,620
L LD be because of the way it's built

00:20:26,140 --> 00:20:30,700
and this is just a close-up of the the

00:20:29,510 --> 00:20:32,780
plugins I'm not going to go through

00:20:30,700 --> 00:20:34,700
through all of it but I've highlighted

00:20:32,780 --> 00:20:38,510
in blue the ones here that either had to

00:20:34,700 --> 00:20:40,700
be written be written for FreeBSD or the

00:20:38,510 --> 00:20:43,880
pre BSD heavily relies on and the

00:20:40,700 --> 00:20:47,210
process the process plug-in there is

00:20:43,880 --> 00:20:50,090
probably the most important one it

00:20:47,210 --> 00:20:52,370
provides registered definitions and the

00:20:50,090 --> 00:20:56,809
concept any sort of thing that is

00:20:52,370 --> 00:20:59,660
specific to a FreeBSD D buggy FreeBSD

00:20:56,809 --> 00:21:02,809
target the platform represents running L

00:20:59,660 --> 00:21:07,390
LD beyond a FreeBSD host so things like

00:21:02,809 --> 00:21:07,390
copying files to or from the host system

00:21:14,710 --> 00:21:23,900
I'll describe briefly how l DB looks

00:21:19,429 --> 00:21:26,960
from the from actual use so GD B's

00:21:23,900 --> 00:21:30,710
command parser has evolved over time to

00:21:26,960 --> 00:21:33,520
have all kinds of overloaded all the

00:21:30,710 --> 00:21:35,960
commands can take all kinds of different

00:21:33,520 --> 00:21:37,790
different options depending on what

00:21:35,960 --> 00:21:39,559
context they're in without really

00:21:37,790 --> 00:21:42,799
knowing exactly what it what it is so

00:21:39,559 --> 00:21:44,720
for example the breakpoint is the is the

00:21:42,799 --> 00:21:47,120
best example you can set a breakpoint

00:21:44,720 --> 00:21:49,580
and you without really telling it what

00:21:47,120 --> 00:21:51,799
it is it can be a function name it can

00:21:49,580 --> 00:21:54,020
be a file and line number it can be a

00:21:51,799 --> 00:21:58,190
C++ method and it just sort of hopefully

00:21:54,020 --> 00:22:01,460
figures out what it is you mean and ll

00:21:58,190 --> 00:22:03,950
DB it's normal the command parser was

00:22:01,460 --> 00:22:07,130
sort of designed from the beginning to

00:22:03,950 --> 00:22:09,169
try and be very regular and discoverable

00:22:07,130 --> 00:22:11,540
and so all of the commands are of the

00:22:09,169 --> 00:22:15,049
form noun verb and then options and an

00:22:11,540 --> 00:22:17,480
argument so instead of a whole bunch of

00:22:15,049 --> 00:22:19,400
overloaded breakpoint commands it would

00:22:17,480 --> 00:22:22,190
be breakpoints that Josh named main and

00:22:19,400 --> 00:22:26,390
this is a little bit verbose

00:22:22,190 --> 00:22:33,160
but like gdb you can use a the shortest

00:22:26,390 --> 00:22:37,420
unique prefix of the entire command name

00:22:33,160 --> 00:22:41,210
but also LGB introduces a whole bunch of

00:22:37,420 --> 00:22:43,460
aliases so that generally speaking the

00:22:41,210 --> 00:22:46,190
basic functionality of gdb for single

00:22:43,460 --> 00:22:48,580
stepping or for starting a process or

00:22:46,190 --> 00:22:53,510
for setting a breakpoint there is a

00:22:48,580 --> 00:22:55,340
there's an alias that allows ll db2 to

00:22:53,510 --> 00:22:59,030
work with your finger memory for from

00:22:55,340 --> 00:23:00,920
gdb and most of these are just direct

00:22:59,030 --> 00:23:03,560
aliases the command works exactly the

00:23:00,920 --> 00:23:07,550
same way or doesn't take any arguments

00:23:03,560 --> 00:23:11,150
but the break point the break point

00:23:07,550 --> 00:23:13,010
command is actually a specific the beat

00:23:11,150 --> 00:23:15,470
command sorry and ll DB as an alias this

00:23:13,010 --> 00:23:18,160
is a specific command that's implemented

00:23:15,470 --> 00:23:20,840
to try and handle some of the overloaded

00:23:18,160 --> 00:23:23,690
options that you can provide to Gd B's

00:23:20,840 --> 00:23:26,900
break point command but it really it's a

00:23:23,690 --> 00:23:30,050
much limited set so if you're going to

00:23:26,900 --> 00:23:32,930
use ll DB it really is a good idea to

00:23:30,050 --> 00:23:35,090
sort of try using the two to get

00:23:32,930 --> 00:23:41,500
familiar with ll d beads native commands

00:23:35,090 --> 00:23:49,300
and so I'm going to give a very brief

00:23:41,500 --> 00:23:49,300
demo here so

00:24:08,320 --> 00:24:14,020
so I have here the text of Romeo and

00:24:11,350 --> 00:24:16,390
Juliet from the Gutenberg Project and

00:24:14,020 --> 00:24:18,420
this is actually an example from lld B's

00:24:16,390 --> 00:24:21,520
website so if you'd like to try it out

00:24:18,420 --> 00:24:28,690
you can you can follow along follow

00:24:21,520 --> 00:24:31,660
along there and so it's the application

00:24:28,690 --> 00:24:34,240
here is just a simple dictionary that

00:24:31,660 --> 00:24:35,800
will read in that entire file except a

00:24:34,240 --> 00:24:37,870
word and then tell you if it's if it's

00:24:35,800 --> 00:24:39,580
found in the was found in the file or

00:24:37,870 --> 00:24:41,620
not and it builds a binary search tree

00:24:39,580 --> 00:24:44,710
from the file that you you type in and

00:24:41,620 --> 00:24:49,720
then just just shows you if things are

00:24:44,710 --> 00:24:58,750
found so for example if I type in words

00:24:49,720 --> 00:25:00,550
that I would expect to find in in Romeo

00:24:58,750 --> 00:25:04,590
and Juliet they're found and if I type

00:25:00,550 --> 00:25:04,590
in words that would not be expected not

00:25:05,430 --> 00:25:11,500
found but if I type in a word that

00:25:08,760 --> 00:25:13,810
should be in there it says oh it's not

00:25:11,500 --> 00:25:15,040
in there and so that's the the bug

00:25:13,810 --> 00:25:18,810
they've been introduced in this

00:25:15,040 --> 00:25:18,810
hypothetical example

00:25:43,690 --> 00:25:47,080
so you have to may have to bear bear

00:25:45,580 --> 00:25:49,270
with me if something doesn't work here

00:25:47,080 --> 00:25:51,430
because this is actually a development

00:25:49,270 --> 00:25:55,150
snapshot as I've been working through a

00:25:51,430 --> 00:25:57,550
number of issues on my my working

00:25:55,150 --> 00:26:02,410
directory but so will will start up al

00:25:57,550 --> 00:26:08,880
LGB with our our buggy our buggy example

00:26:02,410 --> 00:26:10,960
and first we'll set a break point

00:26:08,880 --> 00:26:12,550
there's a fine word function that takes

00:26:10,960 --> 00:26:21,520
the words that the user has provided and

00:26:12,550 --> 00:26:22,630
performs the binary search so as you'd

00:26:21,520 --> 00:26:23,860
expect with the debugger it stopped at

00:26:22,630 --> 00:26:28,930
our breakpoint it's given us a little

00:26:23,860 --> 00:26:31,630
code a little code snippet and it tells

00:26:28,930 --> 00:26:35,320
us that we stopped the reason is a

00:26:31,630 --> 00:26:38,680
breakpoint what thread ID we stopped in

00:26:35,320 --> 00:26:42,900
the instruction pointer our application

00:26:38,680 --> 00:26:46,650
and the function that we stopped in and

00:26:42,900 --> 00:26:46,650
the functions arguments

00:26:51,470 --> 00:26:58,340
and we can get a back-trace etc so one

00:26:56,179 --> 00:27:00,019
of the really interesting things we can

00:26:58,340 --> 00:27:03,019
do with the the Python scripting is

00:27:00,019 --> 00:27:05,149
write a Python write write Python to be

00:27:03,019 --> 00:27:09,080
able to understand the same data

00:27:05,149 --> 00:27:16,429
structures that we use in our in our C

00:27:09,080 --> 00:27:20,559
code so if we'd say type in script we

00:27:16,429 --> 00:27:27,649
get a Python interpreter and I will just

00:27:20,559 --> 00:27:29,480
cut and paste this so so tree utils is

00:27:27,649 --> 00:27:30,830
the the little snippet that's provided

00:27:29,480 --> 00:27:36,710
that can can understand the binary

00:27:30,830 --> 00:27:38,389
search tree that's in our our code ll DB

00:27:36,710 --> 00:27:41,330
doc frame dot find variable is just

00:27:38,389 --> 00:27:44,000
looking up a variable in the frame that

00:27:41,330 --> 00:27:47,480
will we're stopped in and we're asking

00:27:44,000 --> 00:27:54,350
it to find the path to the word that we

00:27:47,480 --> 00:27:57,080
expect to define there and so the Python

00:27:54,350 --> 00:28:00,320
has told us that we should go right left

00:27:57,080 --> 00:28:11,629
right right left down the tree and and

00:28:00,320 --> 00:28:14,809
find the word that we want to see so if

00:28:11,629 --> 00:28:16,850
we look here this is the defined word

00:28:14,809 --> 00:28:20,419
function that that we stopped in and we

00:28:16,850 --> 00:28:23,269
can see line 134 and line 136 are the

00:28:20,419 --> 00:28:26,289
the two branches for taking the left or

00:28:23,269 --> 00:28:43,850
right branch of the tree as we search

00:28:26,289 --> 00:28:45,500
and so I will add a Python script so

00:28:43,850 --> 00:28:47,720
I'll set breakpoints at the the two

00:28:45,500 --> 00:28:55,639
return statements as we're gonna going

00:28:47,720 --> 00:28:58,549
to go through the walk the tree and now

00:28:55,639 --> 00:29:00,259
we can add a snippet of Python to run

00:28:58,549 --> 00:29:02,809
when we hit the breakpoint and it gives

00:29:00,259 --> 00:29:06,200
it gives a quick little help discussion

00:29:02,809 --> 00:29:09,230
here or a description about variables

00:29:06,200 --> 00:29:12,039
that you'll have to use in the Python

00:29:09,230 --> 00:29:12,039
that you're going to enter

00:29:21,409 --> 00:29:24,409
just

00:29:51,560 --> 00:29:56,990
and so what we're act asking for in this

00:29:54,020 --> 00:29:58,970
little Python snippet is we have that

00:29:56,990 --> 00:30:01,010
path variable that we calculated using

00:29:58,970 --> 00:30:04,970
the the Python version of the tree

00:30:01,010 --> 00:30:07,940
walking earlier and we're saying if the

00:30:04,970 --> 00:30:11,750
first character of the remaining path is

00:30:07,940 --> 00:30:13,460
is R and we're in the right return

00:30:11,750 --> 00:30:16,880
branch then we'll just rip that one off

00:30:13,460 --> 00:30:18,860
and continue but if it if we actually

00:30:16,880 --> 00:30:21,290
take the left branch in the C code and

00:30:18,860 --> 00:30:22,190
we know we're supposed to go right to be

00:30:21,290 --> 00:30:25,490
able to get to the word that we're

00:30:22,190 --> 00:30:34,340
looking for we'll print out a little

00:30:25,490 --> 00:30:36,500
statement and not continue so there's

00:30:34,340 --> 00:30:42,380
are all of our breakpoints that we've

00:30:36,500 --> 00:30:48,620
we've set so we'll disable the initial

00:30:42,380 --> 00:30:55,670
find word breakpoint and we'll restart

00:30:48,620 --> 00:30:57,830
oh and this is there we go there's a

00:30:55,670 --> 00:31:02,270
little bit of a race condition with IO

00:30:57,830 --> 00:31:04,730
handling in my current debug snapshot so

00:31:02,270 --> 00:31:08,080
in this specific case sometimes you'll

00:31:04,730 --> 00:31:10,430
see the LD be prompt came back out here

00:31:08,080 --> 00:31:12,830
ll jeebies command interpreter popped up

00:31:10,430 --> 00:31:18,980
on top of the the target I'm trying to

00:31:12,830 --> 00:31:21,770
run so I just tried again and now I've

00:31:18,980 --> 00:31:23,510
rendered Romeo again and we stopped and

00:31:21,770 --> 00:31:25,460
printed out the text that we had in in

00:31:23,510 --> 00:31:27,980
Python it says we're going down the

00:31:25,460 --> 00:31:37,010
right branch and we should be be going

00:31:27,980 --> 00:31:40,160
down the left and if we look over so we

00:31:37,010 --> 00:31:42,380
can just type script and then a pie

00:31:40,160 --> 00:31:44,260
one-line Python if we don't want to

00:31:42,380 --> 00:31:46,760
actually enter the into the Python

00:31:44,260 --> 00:31:49,280
command interpreter and and then quit

00:31:46,760 --> 00:31:51,920
afterwards and it's telling us that this

00:31:49,280 --> 00:31:55,910
is what's remaining so we had our lr RL

00:31:51,920 --> 00:31:57,200
we stripped off the our and then this is

00:31:55,910 --> 00:32:00,880
the path that we should still be taking

00:31:57,200 --> 00:32:00,880
but we've taken the right path and

00:32:13,640 --> 00:32:20,300
we can look at look down the the tree

00:32:18,830 --> 00:32:22,340
with the path that we've expected and

00:32:20,300 --> 00:32:28,510
there's the word that we want to find

00:32:22,340 --> 00:32:30,980
and if we say the word we're looking for

00:32:28,510 --> 00:32:33,020
that's the word we're we're looking for

00:32:30,980 --> 00:32:35,800
and I mean this is a bit of a contrived

00:32:33,020 --> 00:32:38,210
example so oh there's the problem it's

00:32:35,800 --> 00:32:41,990
we've we've uppercase tour a lower case

00:32:38,210 --> 00:32:44,660
to the the the words as we've inserted

00:32:41,990 --> 00:32:47,180
them into the tree it wouldn't actually

00:32:44,660 --> 00:32:49,160
be that easy of course but it does

00:32:47,180 --> 00:32:52,130
demonstrate the the sort of of power

00:32:49,160 --> 00:32:54,430
that's available through this sort of

00:32:52,130 --> 00:32:54,430
interface

00:33:02,140 --> 00:33:07,040
now I'll just talk very briefly about

00:33:04,340 --> 00:33:09,620
the current status of ll DB on FreeBSD

00:33:07,040 --> 00:33:12,890
so the test suite after a lot of work

00:33:09,620 --> 00:33:14,660
runs consistently on L on FreeBSD there

00:33:12,890 --> 00:33:16,940
are build bots that are running

00:33:14,660 --> 00:33:21,140
regularly on on each commit in the

00:33:16,940 --> 00:33:24,860
upstream clang l vm l DB repositories

00:33:21,140 --> 00:33:26,150
and the full test suite basically runs

00:33:24,860 --> 00:33:30,290
the tests that don't apply to freebsd

00:33:26,150 --> 00:33:34,550
don't but 311 tests tests run and all of

00:33:30,290 --> 00:33:36,620
the failures have have a PR in ll VMS

00:33:34,550 --> 00:33:38,180
Bugzilla so initially there were large

00:33:36,620 --> 00:33:40,700
classes of functionality that just

00:33:38,180 --> 00:33:42,260
didn't work those of all we've moved

00:33:40,700 --> 00:33:44,630
past those sorts of things and what

00:33:42,260 --> 00:33:47,360
remains are some one or two off cases

00:33:44,630 --> 00:33:49,160
that are maybe not fully understood but

00:33:47,360 --> 00:33:52,570
there's there's the beginning of some

00:33:49,160 --> 00:33:54,740
debugging information in the upstream

00:33:52,570 --> 00:33:59,080
repository and actually that's one thing

00:33:54,740 --> 00:34:02,750
that I forgot to mention earlier the I

00:33:59,080 --> 00:34:05,900
mentioned that LLVM or L DB is under the

00:34:02,750 --> 00:34:07,700
same permissive bsd-like license as the

00:34:05,900 --> 00:34:10,340
rest of clang and LLVM but the other

00:34:07,700 --> 00:34:13,250
really big difference is that the

00:34:10,340 --> 00:34:16,460
upstream ll DB community is very helpful

00:34:13,250 --> 00:34:18,200
and very welcoming so I started doing

00:34:16,460 --> 00:34:21,379
some initial work to get the the build

00:34:18,200 --> 00:34:22,820
fixes build fixes ready and was

00:34:21,379 --> 00:34:25,790
submitting a lot of patches and in very

00:34:22,820 --> 00:34:27,500
short order they said we're tired of

00:34:25,790 --> 00:34:29,600
committing these these things for you

00:34:27,500 --> 00:34:30,889
we'd like you to just become an L LD be

00:34:29,600 --> 00:34:35,149
committed so you could push the freebsd

00:34:30,889 --> 00:34:37,330
changes indirectly and so it was it was

00:34:35,149 --> 00:34:39,169
only a matter of a few months of me

00:34:37,330 --> 00:34:40,639
submitting submitting patches and

00:34:39,169 --> 00:34:44,870
getting things moving along that thought

00:34:40,639 --> 00:34:47,030
I was an L LD be committer and the rest

00:34:44,870 --> 00:34:49,159
of the L LD be upstream is very very

00:34:47,030 --> 00:34:52,780
helpful to anyone who comes along with

00:34:49,159 --> 00:34:55,820
questions and talking about ideas for

00:34:52,780 --> 00:34:57,350
future direction or general things that

00:34:55,820 --> 00:35:02,630
people would like to implement across a

00:34:57,350 --> 00:35:05,360
variety of of operating systems in

00:35:02,630 --> 00:35:09,110
FreeBSD right now amd64 is the only

00:35:05,360 --> 00:35:12,410
target that really works and LD be in on

00:35:09,110 --> 00:35:15,480
freebsd is a perfectly capable very

00:35:12,410 --> 00:35:17,280
useable debugger for amd64

00:35:15,480 --> 00:35:19,740
I said I wasn't gonna say this too much

00:35:17,280 --> 00:35:25,440
but at least as good as gdb in the base

00:35:19,740 --> 00:35:27,750
system I 386 there's code in the tree it

00:35:25,440 --> 00:35:30,180
doesn't actually work it's in that same

00:35:27,750 --> 00:35:31,440
state of you know you can't even start a

00:35:30,180 --> 00:35:33,690
simple process instead of a breakpoint

00:35:31,440 --> 00:35:36,720
at main and there's nothing in here I

00:35:33,690 --> 00:35:41,579
think that's particularly difficult it's

00:35:36,720 --> 00:35:43,230
it's just some usual 32 versus 64-bit

00:35:41,579 --> 00:35:44,430
kinds of issues so some offsets are

00:35:43,230 --> 00:35:47,069
incorrect or something along those lines

00:35:44,430 --> 00:35:48,869
it's just that the i386 support has been

00:35:47,069 --> 00:35:50,760
a fairly low priority for me so I

00:35:48,869 --> 00:35:52,589
haven't I haven't spent any time on it

00:35:50,760 --> 00:35:56,910
yet while there are more important

00:35:52,589 --> 00:36:00,240
things to fix in AMD 64 MIPS is not

00:35:56,910 --> 00:36:04,710
usable as a local debugger at the moment

00:36:00,240 --> 00:36:07,349
so you can't actually run LDB mips on

00:36:04,710 --> 00:36:09,480
your little mitts device but it does

00:36:07,349 --> 00:36:16,890
actually support core files from MIPS

00:36:09,480 --> 00:36:20,460
binaries and arm because apple obviously

00:36:16,890 --> 00:36:22,380
cares an awful lot about arm lld B's

00:36:20,460 --> 00:36:23,760
internals have a lot of arm support but

00:36:22,380 --> 00:36:26,700
it hasn't been been brought over for

00:36:23,760 --> 00:36:29,130
freebsd or Linux yet 64-bit arm support

00:36:26,700 --> 00:36:31,260
is starting to come for Linux and we'll

00:36:29,130 --> 00:36:35,309
bring that over to FreeBSD as well it's

00:36:31,260 --> 00:36:38,400
early days yet but I don't think it's it

00:36:35,309 --> 00:36:40,589
won't be particularly long before LDB is

00:36:38,400 --> 00:36:43,440
actually a workable arm 64 divide around

00:36:40,589 --> 00:36:45,900
3 BSD sparc64 it has some volunteer

00:36:43,440 --> 00:36:49,079
effort our sorry PowerPC has some

00:36:45,900 --> 00:36:51,809
volunteer effort and then sparc64 and IA

00:36:49,079 --> 00:36:53,660
64 I don't know if anyone's going to

00:36:51,809 --> 00:37:00,750
going to actually work on getting those

00:36:53,660 --> 00:37:03,510
those working so I've I've looked

00:37:00,750 --> 00:37:05,490
through this over time and it used to be

00:37:03,510 --> 00:37:09,480
that a lot of these things didn't work

00:37:05,490 --> 00:37:11,910
basically now for user land debugging ll

00:37:09,480 --> 00:37:15,930
DB is is great on and again this is AMD

00:37:11,910 --> 00:37:18,630
64 the watch points are an interesting

00:37:15,930 --> 00:37:21,839
one interesting case most of this work

00:37:18,630 --> 00:37:25,319
is is his work that I've done to get

00:37:21,839 --> 00:37:27,420
these things to to function watchpoints

00:37:25,319 --> 00:37:28,530
was actually contributed by another

00:37:27,420 --> 00:37:31,050
developer

00:37:28,530 --> 00:37:32,790
a company called sinuous so it's even in

00:37:31,050 --> 00:37:35,670
within the specific domain of algae

00:37:32,790 --> 00:37:40,230
beyond FreeBSD I'm not the only one

00:37:35,670 --> 00:37:41,880
doing the work I had a google Summer of

00:37:40,230 --> 00:37:46,200
Code student over this past summer

00:37:41,880 --> 00:37:48,620
working on kernel side debugging he

00:37:46,200 --> 00:37:51,030
delivered a workable proof of concept

00:37:48,620 --> 00:37:54,120
demonstrating that yes we can against a

00:37:51,030 --> 00:37:57,900
live running on your your live system

00:37:54,120 --> 00:38:02,100
against dev mem or with kernel core

00:37:57,900 --> 00:38:04,580
dumps it will be possible and it's the

00:38:02,100 --> 00:38:07,770
the project didn't really get as far as

00:38:04,580 --> 00:38:09,630
I would have liked in order to be have

00:38:07,770 --> 00:38:11,790
something committable to the tree

00:38:09,630 --> 00:38:14,970
directly but I'll definitely take that

00:38:11,790 --> 00:38:17,400
work and refine it to to have kernel

00:38:14,970 --> 00:38:20,400
core in live debugging and then on the

00:38:17,400 --> 00:38:24,600
bottom this is something that will come

00:38:20,400 --> 00:38:27,360
a little bit later so for OS 10 kernel

00:38:24,600 --> 00:38:31,680
debugging is done using UDP over

00:38:27,360 --> 00:38:34,320
Ethernet because most systems you wanted

00:38:31,680 --> 00:38:35,520
to bug these days don't have serial

00:38:34,320 --> 00:38:37,230
ports anymore which is the sort of

00:38:35,520 --> 00:38:39,900
traditional interface you have used or

00:38:37,230 --> 00:38:44,130
firewire that's all disappearing so at

00:38:39,900 --> 00:38:47,070
least ll DB and has internal support for

00:38:44,130 --> 00:38:49,050
ethernet remote debugging and it has a

00:38:47,070 --> 00:38:54,090
OS 10 back-end for that only at the

00:38:49,050 --> 00:38:58,890
moment but by the time we have the stub

00:38:54,090 --> 00:39:07,770
support in freebsd I'll work on getting

00:38:58,890 --> 00:39:11,700
the LD b-side in gdb protocol remote

00:39:07,770 --> 00:39:14,220
debugging it's in and it it basically

00:39:11,700 --> 00:39:17,070
works it does need some more testing to

00:39:14,220 --> 00:39:19,920
find if there's any any other corner

00:39:17,070 --> 00:39:22,860
cases that don't work but what's really

00:39:19,920 --> 00:39:24,630
interesting is that hasn't historically

00:39:22,860 --> 00:39:27,030
been particularly useful for freebsd

00:39:24,630 --> 00:39:30,390
because g DB server hasn't hasn't been

00:39:27,030 --> 00:39:34,260
very hasn't been workable for us there

00:39:30,390 --> 00:39:36,900
is a project now called ll DB DB server

00:39:34,260 --> 00:39:39,320
which is a bit of a strange name I just

00:39:36,900 --> 00:39:41,000
call it ll GS and

00:39:39,320 --> 00:39:43,070
it is implementing the same sort of

00:39:41,000 --> 00:39:45,590
functionality so it's a debugging stub

00:39:43,070 --> 00:39:47,810
that you run on your target and the

00:39:45,590 --> 00:39:49,460
debugger connects to it over some some

00:39:47,810 --> 00:39:55,220
interface and controls you're usually

00:39:49,460 --> 00:39:56,840
unprocess over that interface it it's

00:39:55,220 --> 00:40:00,080
being developed by the Google guys for

00:39:56,840 --> 00:40:01,670
Linux initially and I have done a little

00:40:00,080 --> 00:40:04,670
bit of work getting it to FreeBSD and

00:40:01,670 --> 00:40:07,310
again I think it is not yet fully

00:40:04,670 --> 00:40:10,340
working for Linux but it's very close

00:40:07,310 --> 00:40:12,320
and in very short order I'll be able to

00:40:10,340 --> 00:40:15,770
get that that running on FreeBSD so this

00:40:12,320 --> 00:40:16,760
is very important for embedded targets

00:40:15,770 --> 00:40:19,190
where you don't have an awful lot of

00:40:16,760 --> 00:40:22,070
memory and don't have a lot of CPU power

00:40:19,190 --> 00:40:25,220
so it uses a lot of the same low-level

00:40:22,070 --> 00:40:30,170
infrastructure from LL DB but doesn't

00:40:25,220 --> 00:40:32,060
bring along the the clang expression

00:40:30,170 --> 00:40:36,140
parser and all of the the higher-level

00:40:32,060 --> 00:40:38,390
more heavyweight functionality one of

00:40:36,140 --> 00:40:40,730
the really neat things about ll DB is

00:40:38,390 --> 00:40:42,800
that it is it is inherently a crossed

00:40:40,730 --> 00:40:46,900
architecture and cross OS debugger so in

00:40:42,800 --> 00:40:49,940
the same way that clang in LLVM have

00:40:46,900 --> 00:40:52,220
support for a whole bunch of target

00:40:49,940 --> 00:40:54,320
architectures built-in when you can

00:40:52,220 --> 00:40:56,300
chose them at compile time you can but

00:40:54,320 --> 00:41:00,050
generally speaking the entire set that

00:40:56,300 --> 00:41:02,690
that's supported ll DB works the same

00:41:00,050 --> 00:41:05,000
way so what it means is I can run a low

00:41:02,690 --> 00:41:08,120
DB on my freebsd laptop and with that

00:41:05,000 --> 00:41:10,580
same ll DB binary i could debug a local

00:41:08,120 --> 00:41:13,700
process on my laptop i could connect to

00:41:10,580 --> 00:41:18,230
a linux target and do remote debugging

00:41:13,700 --> 00:41:22,010
of a linux target or i could connect to

00:41:18,230 --> 00:41:24,740
say a freebsd mips device on my x86

00:41:22,010 --> 00:41:28,370
laptop using the same the same ll DB

00:41:24,740 --> 00:41:30,320
binary and for the most part that sort

00:41:28,370 --> 00:41:32,630
of works it's because it's not a

00:41:30,320 --> 00:41:36,580
particularly commonly used case yet

00:41:32,630 --> 00:41:38,990
there are quite a few small issues that

00:41:36,580 --> 00:41:40,790
one will run into when trying it so

00:41:38,990 --> 00:41:42,920
really what needs to happen there is

00:41:40,790 --> 00:41:45,860
just getting a lot more testing and bug

00:41:42,920 --> 00:41:49,840
reports and as we find things that don't

00:41:45,860 --> 00:41:49,840
work they they'll get fixed quickly

00:41:53,560 --> 00:42:01,250
ll DB there's a snapshot in the base

00:41:57,560 --> 00:42:02,839
system right now L upstream FreeBSD

00:42:01,250 --> 00:42:05,060
development on L LD be the bleeding edge

00:42:02,839 --> 00:42:07,190
is upstream so all of my work is

00:42:05,060 --> 00:42:09,200
actually going there first now and then

00:42:07,190 --> 00:42:11,000
coming into FreeBSD after settling for a

00:42:09,200 --> 00:42:12,770
little while but we have a snapshot in

00:42:11,000 --> 00:42:15,290
the in the base system it's not built by

00:42:12,770 --> 00:42:18,140
default but if you add with ll DB equals

00:42:15,290 --> 00:42:19,970
yes to source Kampf and the standard

00:42:18,140 --> 00:42:21,589
build world and build kernel as well

00:42:19,970 --> 00:42:25,250
build world and install world is defined

00:42:21,589 --> 00:42:29,900
in the handbook it will give you an L LD

00:42:25,250 --> 00:42:32,390
be in your install clanging 3.5 imports

00:42:29,900 --> 00:42:34,640
coming into FreeBSD sometime in the

00:42:32,390 --> 00:42:38,240
fairly near future and when that happens

00:42:34,640 --> 00:42:40,849
I plan to bring in a new update from old

00:42:38,240 --> 00:42:44,589
from a low DB upstream and enable it by

00:42:40,849 --> 00:42:46,700
default and the last point is that

00:42:44,589 --> 00:42:48,619
Python is a little bit of a trick

00:42:46,700 --> 00:42:50,660
because we're not going to have Python

00:42:48,619 --> 00:42:53,690
in the base system so some of the more

00:42:50,660 --> 00:42:55,520
interesting interesting functionality is

00:42:53,690 --> 00:42:57,650
wouldn't be available unless we can do

00:42:55,520 --> 00:43:00,050
something about this and what my hope is

00:42:57,650 --> 00:43:01,579
that we right now Python in ll DB is a

00:43:00,050 --> 00:43:03,980
compile time option it's very easy to

00:43:01,579 --> 00:43:06,619
build ll dll DB with or without Python

00:43:03,980 --> 00:43:09,319
but it is compile time so my hope is to

00:43:06,619 --> 00:43:12,770
move that to a runtime check and the ll

00:43:09,319 --> 00:43:14,930
DB and the base system will magically be

00:43:12,770 --> 00:43:19,940
able to use Python functionality if

00:43:14,930 --> 00:43:21,310
you've installed the port thank you any

00:43:19,940 --> 00:43:30,630
question

00:43:21,310 --> 00:43:30,630
[Applause]

00:43:38,400 --> 00:43:43,410
the main usage of gdb

00:43:41,550 --> 00:43:46,470
especially imports the current gdb is

00:43:43,410 --> 00:43:49,590
the machine interface that a lot of the

00:43:46,470 --> 00:43:51,930
desktop development environment use LD

00:43:49,590 --> 00:43:55,280
DB has the same machine interface is

00:43:51,930 --> 00:43:57,630
already implemented as just planet or

00:43:55,280 --> 00:44:01,170
the question I feel you want to use can

00:43:57,630 --> 00:44:03,900
develop I could use could develop with

00:44:01,170 --> 00:44:08,400
LD DB or I've just to use gdb is not yet

00:44:03,900 --> 00:44:10,170
implemented the machine interface yeah

00:44:08,400 --> 00:44:12,270
did you a machine interface is used to

00:44:10,170 --> 00:44:16,560
do that to speak right so so gdb

00:44:12,270 --> 00:44:19,050
implements a machine interface which is

00:44:16,560 --> 00:44:22,170
a way for front-end to communicate with

00:44:19,050 --> 00:44:26,130
the gdb binary running lldp has actually

00:44:22,170 --> 00:44:28,760
had a compatible compatible

00:44:26,130 --> 00:44:32,340
implementation of that contributed

00:44:28,760 --> 00:44:37,090
fairly recently so L LD be also can

00:44:32,340 --> 00:44:39,170
speak the same gdb mi protocol so that

00:44:37,090 --> 00:44:41,910
[Music]

00:44:39,170 --> 00:44:42,390
various front ends that know how to

00:44:41,910 --> 00:44:45,240
speak

00:44:42,390 --> 00:44:48,150
gdb mi could talk to LD be am i as the

00:44:45,240 --> 00:44:52,110
as the backend in this case actually

00:44:48,150 --> 00:44:54,720
this is a screenshot from an IDE called

00:44:52,110 --> 00:44:55,980
code light which builds on FreeBSD it

00:44:54,720 --> 00:44:58,830
doesn't include the yellow to be support

00:44:55,980 --> 00:45:04,920
yet but the integration that the code

00:44:58,830 --> 00:45:08,280
light guys have done uses the ll DB

00:45:04,920 --> 00:45:10,260
native API so LD so labelled DB it just

00:45:08,280 --> 00:45:12,540
links into into code light for their use

00:45:10,260 --> 00:45:14,940
but yes any any of the other kinds of

00:45:12,540 --> 00:45:18,440
gdb front ends that speak the mi

00:45:14,940 --> 00:45:18,440
protocol could use a low D beads well

00:45:28,310 --> 00:45:33,090
hi since you mentioned that there were

00:45:31,530 --> 00:45:35,190
watch points there other ones how do i

00:45:33,090 --> 00:45:37,520
watch points or yeah I work ways perfect

00:45:35,190 --> 00:45:37,520
thank you

00:45:46,590 --> 00:45:51,720
look just a question as you had to

00:45:49,560 --> 00:45:54,360
implement all the previously specific

00:45:51,720 --> 00:45:57,420
part how much work is it

00:45:54,360 --> 00:46:01,980
I'm from Minich so we were kind of

00:45:57,420 --> 00:46:04,500
thinking of importing it but that's it

00:46:01,980 --> 00:46:11,820
that's a very difficult question to

00:46:04,500 --> 00:46:13,650
answer a lot more than I expected for a

00:46:11,820 --> 00:46:15,690
few reasons so as I said when I started

00:46:13,650 --> 00:46:17,550
a lot of things were in in fairly poor

00:46:15,690 --> 00:46:21,150
shape and there was actually a bunch of

00:46:17,550 --> 00:46:24,240
internal ll DB functionality that I had

00:46:21,150 --> 00:46:26,820
to fix up for our specific use case that

00:46:24,240 --> 00:46:29,550
was even independent of FreeBSD or Linux

00:46:26,820 --> 00:46:33,540
it you know it was just core internal

00:46:29,550 --> 00:46:34,860
bits that didn't work properly so it's a

00:46:33,540 --> 00:46:38,010
little bit hard to say like I said I've

00:46:34,860 --> 00:46:42,090
I've been working on ll DB off and on

00:46:38,010 --> 00:46:44,240
since the beginning of 2013 I think

00:46:42,090 --> 00:46:47,340
though that with the way things are

00:46:44,240 --> 00:46:48,930
progressing in ll DB now it actually

00:46:47,340 --> 00:46:51,210
isn't going to be all that difficult for

00:46:48,930 --> 00:46:52,710
additional projects to to do a port

00:46:51,210 --> 00:46:54,450
because there's been a whole bunch of

00:46:52,710 --> 00:46:56,190
refactoring that's going on that has

00:46:54,450 --> 00:46:58,050
been going on and is still going on to

00:46:56,190 --> 00:47:00,480
clean up a lot of interfaces so it

00:46:58,050 --> 00:47:02,970
becomes much much more clear where you

00:47:00,480 --> 00:47:07,650
need to plug in OS specific

00:47:02,970 --> 00:47:12,150
functionality and also I think the the

00:47:07,650 --> 00:47:15,660
effort to bring on the next BSD port is

00:47:12,150 --> 00:47:18,630
much less than then what I went through

00:47:15,660 --> 00:47:20,550
with this part so that bsd there is some

00:47:18,630 --> 00:47:24,630
initial build infrastructure in there

00:47:20,550 --> 00:47:27,540
and basically to be able to run ll DB on

00:47:24,630 --> 00:47:30,690
it at bsd host but not the the actual p

00:47:27,540 --> 00:47:32,130
trace interface but I don't think it's I

00:47:30,690 --> 00:47:45,930
don't think it's a huge project anymore

00:47:32,130 --> 00:47:52,020
okay thank you well hi is it possible

00:47:45,930 --> 00:47:56,490
that you connect l DB with the open on

00:47:52,020 --> 00:48:00,120
chip debugger well obviously it supports

00:47:56,490 --> 00:48:07,470
plenty of JTACs and yeah quite useful so

00:48:00,120 --> 00:48:09,690
i mean i think i think that open CD just

00:48:07,470 --> 00:48:11,430
exports the gb remote protocol doesn't

00:48:09,690 --> 00:48:14,850
it so al Adeeb you can speak that

00:48:11,430 --> 00:48:17,130
protocol so that should all just work it

00:48:14,850 --> 00:48:19,470
may there may be reasons that it might

00:48:17,130 --> 00:48:21,480
be interesting to actually use other

00:48:19,470 --> 00:48:23,970
interfaces to open OCD but I think in

00:48:21,480 --> 00:48:25,680
general it would work the same way gdb

00:48:23,970 --> 00:48:36,260
does of speaking the the gdb remote

00:48:25,680 --> 00:48:42,300
debugging protocol okay thank you

00:48:36,260 --> 00:48:48,720
[Applause]

00:48:42,300 --> 00:48:48,720

YouTube URL: https://www.youtube.com/watch?v=aG3vdyA1XBo


