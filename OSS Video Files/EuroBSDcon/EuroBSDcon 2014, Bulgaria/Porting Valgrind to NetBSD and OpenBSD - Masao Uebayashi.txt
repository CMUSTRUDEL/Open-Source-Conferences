Title: Porting Valgrind to NetBSD and OpenBSD - Masao Uebayashi
Publication date: 2019-10-13
Playlist: EuroBSDcon 2014, Bulgaria
Description: 
	Abstract:

Valgrind is a proven opensource instrumentation framework Mainly known by its memory profilerValgrind executes applications in virtual CPU and memory dynamically disassembling target code into intermediate representation (IR) and converting into native code (JIT). This Dynamic Binary Instrumentation (DBI) is useful for users in that no recompilation of target is needed. However, implementing that idea is difficult and code becomes complex. My talk will examine Valgrindâ€™s internal especially around platform dependent code, like system call wrapper, memory management, and signal handling. We also mention things that are needed to port Valgrind to a new platform/cpu, for example, how to debug and test Valgrind itself, and source code structure, etc.

Speaker biography:

Masao Uebayashi is a the founder of Tombi Inc., a small company based in Yokohama, Japan, where he concentrates on *BSD only development consultation. In the past he worked for Brains Corp., who first ported NetBSD to Renesas SuperH platform, and later IIJ, where he brought up NetBSD on OCTEON MIPS64 processor. After having done PowerPC, SuperH, MIPS, and ARM in the last 15 years, he has finally started learning x86.
Captions: 
	00:00:04,100 --> 00:00:13,049
last day of your obesity con 2014 our

00:00:07,980 --> 00:00:14,820
next speaker is muscle hair telling us a

00:00:13,049 --> 00:00:24,720
few things about some useful tools

00:00:14,820 --> 00:00:29,880
supporting to the Beasties thanks for

00:00:24,720 --> 00:00:33,660
attending my name is ma hsiao whoever I

00:00:29,880 --> 00:00:37,460
see coming from Japan and I'm

00:00:33,660 --> 00:00:43,820
self-employed I have my own company

00:00:37,460 --> 00:00:49,440
doing ESD for previously development and

00:00:43,820 --> 00:00:52,739
now I'm working for our customer phase

00:00:49,440 --> 00:00:55,199
developing Network for your world

00:00:52,739 --> 00:01:02,370
product based on obiously

00:00:55,199 --> 00:01:06,409
and they their business is really good

00:01:02,370 --> 00:01:10,820
and they're directing good product and

00:01:06,409 --> 00:01:18,750
extending obesity and they have some

00:01:10,820 --> 00:01:24,680
local extensions including a networking

00:01:18,750 --> 00:01:29,880
page created demons and it works but

00:01:24,680 --> 00:01:35,430
they also had experienced or some

00:01:29,880 --> 00:01:39,240
travelers problems and especially memory

00:01:35,430 --> 00:01:43,710
Rika CH because networking demons around

00:01:39,240 --> 00:01:46,950
for a long time and it lets its call it

00:01:43,710 --> 00:01:51,799
but if it's coded petrea it's strawberry

00:01:46,950 --> 00:01:55,799
leaking a memory and it ended up with

00:01:51,799 --> 00:02:02,880
severe problems and they wanted to fix

00:01:55,799 --> 00:02:08,690
it but finding those dynamic memory

00:02:02,880 --> 00:02:12,590
leakage is very difficult and actually

00:02:08,690 --> 00:02:17,840
there are not not so many of

00:02:12,590 --> 00:02:23,330
chance to find those my wicked memory

00:02:17,840 --> 00:02:29,060
vodka so of they decided to port and

00:02:23,330 --> 00:02:33,910
berlin's which is already pre test or

00:02:29,060 --> 00:02:46,489
the proven its usefulness and found many

00:02:33,910 --> 00:02:51,319
problems in Winx and so 14 previously

00:02:46,489 --> 00:02:54,620
people already put its parent it not to

00:02:51,319 --> 00:02:59,390
really use the widely why the advisory

00:02:54,620 --> 00:03:06,890
but they have fought it and it's it is

00:02:59,390 --> 00:03:11,209
said to be walking but if there is still

00:03:06,890 --> 00:03:14,569
on a biggest uncertainty if it really

00:03:11,209 --> 00:03:20,600
works on open viously because OpenBSD

00:03:14,569 --> 00:03:28,299
has many local features to make it more

00:03:20,600 --> 00:03:32,329
secure but my customer is very good and

00:03:28,299 --> 00:03:41,530
they are generous and they allowed me to

00:03:32,329 --> 00:03:45,410
work on this uncertain project so and my

00:03:41,530 --> 00:03:50,139
protein project is not really finished

00:03:45,410 --> 00:03:54,859
but I have I have reached to a point

00:03:50,139 --> 00:04:02,230
where I can finish this product project

00:03:54,859 --> 00:04:07,430
and so I just want I want to show you

00:04:02,230 --> 00:04:14,530
for us that it's it really it's really

00:04:07,430 --> 00:04:14,530
working and it's it's real

00:04:16,290 --> 00:04:19,530
so yeah

00:04:22,060 --> 00:04:33,100
has anyone tried a parent for obesity

00:04:26,530 --> 00:04:33,100
no okay it's not the

00:04:40,729 --> 00:04:43,729
huh

00:04:46,930 --> 00:04:49,650
No

00:05:14,830 --> 00:05:32,860
I think from it worked 30 min 3 30 mins

00:05:26,000 --> 00:05:32,860
ago but just given for one minute

00:05:37,490 --> 00:05:40,180
you know

00:06:07,240 --> 00:06:11,009
visiting 22.1

00:06:13,279 --> 00:06:16,149
twenties

00:06:27,840 --> 00:06:31,500
one two

00:06:56,360 --> 00:07:02,300
huh anyway I think I can show you

00:07:03,770 --> 00:07:08,910
it's very cross

00:07:05,760 --> 00:07:16,590
justice from the air but it's a little

00:07:08,910 --> 00:07:20,700
difficult anyway so I think I suppose

00:07:16,590 --> 00:07:24,810
horrible you or already had the name of

00:07:20,700 --> 00:07:27,450
bargaining and you already know how you

00:07:24,810 --> 00:07:32,940
have to use it baby

00:07:27,450 --> 00:07:36,350
it's it's basically it's both known as

00:07:32,940 --> 00:07:39,960
our memory profiler memory Ibaka and

00:07:36,350 --> 00:07:45,479
actually it has more features internally

00:07:39,960 --> 00:07:49,530
but for now I'm already working for our

00:07:45,479 --> 00:07:52,350
voting and memory profiler and porting

00:07:49,530 --> 00:07:58,350
all of them is a little to work too much

00:07:52,350 --> 00:08:00,930
work and it's basically for developed

00:07:58,350 --> 00:08:07,970
parts because it helps development and

00:08:00,930 --> 00:08:13,800
actually it can run unmodified programs

00:08:07,970 --> 00:08:20,539
so we can use it just users can use it

00:08:13,800 --> 00:08:24,360
but it does not help to accelerate our

00:08:20,539 --> 00:08:26,789
watching movies something right just

00:08:24,360 --> 00:08:30,229
wrote things then so it's not really a

00:08:26,789 --> 00:08:30,229
foe and um

00:08:33,580 --> 00:08:44,810
well Oh Baron walk is not finished and

00:08:38,840 --> 00:08:48,620
it's a-- it's tree has bags so ah if you

00:08:44,810 --> 00:08:53,870
want to use it now you have to debug

00:08:48,620 --> 00:08:57,260
parent that is not fun but but still I

00:08:53,870 --> 00:09:02,690
need some help from you to stabilize and

00:08:57,260 --> 00:09:06,140
the architect so um I don't want you to

00:09:02,690 --> 00:09:11,300
involve a bug in the roof development a

00:09:06,140 --> 00:09:21,260
deeply but Steve so I I need some help

00:09:11,300 --> 00:09:25,720
from advanced users so I said three

00:09:21,260 --> 00:09:30,320
goals in this presentation part is more

00:09:25,720 --> 00:09:34,820
more more people and explain its

00:09:30,320 --> 00:09:40,610
internal and I want to focus especially

00:09:34,820 --> 00:09:47,230
a three things that is this core system

00:09:40,610 --> 00:09:50,060
core and exec ve when Berglund are

00:09:47,230 --> 00:09:53,330
execute at the web target program

00:09:50,060 --> 00:09:58,340
program it's internally that what connie

00:09:53,330 --> 00:10:03,800
a death for exact be e so a burgundy has

00:09:58,340 --> 00:10:08,240
to assimilate what kernel does exactly

00:10:03,800 --> 00:10:13,660
and it has also has to simulate our

00:10:08,240 --> 00:10:13,660
signal features and it's very fun I

00:10:14,800 --> 00:10:21,290
really am

00:10:16,100 --> 00:10:24,500
Peregrine can work without any pitch

00:10:21,290 --> 00:10:27,860
changes against are not busy or open

00:10:24,500 --> 00:10:33,380
busy work early but unfortunately I need

00:10:27,860 --> 00:10:37,850
I have found some changes to be done so

00:10:33,380 --> 00:10:40,450
I have to convince I make it to accept

00:10:37,850 --> 00:10:40,450
those changes

00:10:40,969 --> 00:10:52,649
so you can see this explanation on at

00:10:48,479 --> 00:10:55,949
the op shop site of bargained or are

00:10:52,649 --> 00:10:58,949
there papers that are violent is a

00:10:55,949 --> 00:11:02,719
framework for our heavyweight dynamic

00:10:58,949 --> 00:11:06,929
binary instrumental instrumentation

00:11:02,719 --> 00:11:10,669
which is a little too difficult to

00:11:06,929 --> 00:11:14,309
understand for me and you can also see

00:11:10,669 --> 00:11:19,049
Wikipedia and it says it is essentially

00:11:14,309 --> 00:11:21,869
about your machine so uh this is much

00:11:19,049 --> 00:11:27,319
easier to understand and in my opinion

00:11:21,869 --> 00:11:27,319
it describes the things more correctly

00:11:27,499 --> 00:11:37,159
so it's it's basically a virtual machine

00:11:32,699 --> 00:11:41,399
and the emulator and once it starts to

00:11:37,159 --> 00:11:47,489
start running what it does internally is

00:11:41,399 --> 00:11:52,019
basically a loop which interprets try

00:11:47,489 --> 00:11:56,579
and develop a court and disassemble it

00:11:52,019 --> 00:12:02,089
and execute those instructions one by

00:11:56,579 --> 00:12:02,089
one it's best career for teach that and

00:12:02,419 --> 00:12:14,309
instead of actually after resistance it

00:12:06,539 --> 00:12:19,349
has a vulture resistance in memory so if

00:12:14,309 --> 00:12:23,189
you see some move instruction which

00:12:19,349 --> 00:12:29,059
moves our Barry from one razor to

00:12:23,189 --> 00:12:39,229
another what it does is just copy that

00:12:29,059 --> 00:12:39,229
were you in part of CPU this is a basic

00:12:39,400 --> 00:12:50,110
this is the Honorable arm bargaining the

00:12:43,990 --> 00:12:57,250
is special in that it exactitude divert

00:12:50,110 --> 00:12:59,380
targets within the same other space it's

00:12:57,250 --> 00:13:04,420
one process berglund

00:12:59,380 --> 00:13:08,770
runs somewhere human process other space

00:13:04,420 --> 00:13:13,840
but still target client target program

00:13:08,770 --> 00:13:16,180
is mapped in the process in the same

00:13:13,840 --> 00:13:20,790
process this is very special for

00:13:16,180 --> 00:13:20,790
Peregrine I think and

00:13:26,130 --> 00:13:37,230
but still I've charged stock are given

00:13:33,029 --> 00:13:42,720
by car now is used by burdened by save

00:13:37,230 --> 00:13:48,740
by self and try and stop is r-rated

00:13:42,720 --> 00:13:52,350
somewhere else so criteria for clients

00:13:48,740 --> 00:13:57,480
it's basically the same it does not know

00:13:52,350 --> 00:14:02,839
if it it is it executed in variant or

00:13:57,480 --> 00:14:05,839
not but the other is asked some

00:14:02,839 --> 00:14:05,839
difference

00:14:10,399 --> 00:14:21,559
you can see many documentation and the

00:14:15,649 --> 00:14:25,180
papers at the per grant dark and which

00:14:21,559 --> 00:14:30,939
is good and my project is based on

00:14:25,180 --> 00:14:42,819
previous reports hosted at bitbucket and

00:14:30,939 --> 00:14:49,809
I could just pop that branch this is our

00:14:42,819 --> 00:14:56,360
view static view how the code is

00:14:49,809 --> 00:15:01,459
structured in a sense they are bare

00:14:56,360 --> 00:15:04,999
ruin'd is emulator and they have a

00:15:01,459 --> 00:15:10,249
vertical tube which is very portable in

00:15:04,999 --> 00:15:14,959
that actually I had to change no code in

00:15:10,249 --> 00:15:20,110
the send central for emerita it's called

00:15:14,959 --> 00:15:25,059
Bex I had to change nothing about it and

00:15:20,110 --> 00:15:29,959
accept our some basic type of

00:15:25,059 --> 00:15:34,899
definitions in headers but it is written

00:15:29,959 --> 00:15:36,110
in portable way and it also has to

00:15:34,899 --> 00:15:41,740
interact

00:15:36,110 --> 00:15:45,529
Crona to do all many realistic things

00:15:41,740 --> 00:15:48,370
right our system call and signal or

00:15:45,529 --> 00:15:48,370
something like that

00:15:48,639 --> 00:15:55,569
r22 port Berglund

00:15:50,779 --> 00:16:03,670
I had I had to or modify those parts

00:15:55,569 --> 00:16:06,879
which I'm explaining and actually those

00:16:03,670 --> 00:16:14,209
resources bargaining variant project

00:16:06,879 --> 00:16:17,769
provides papers are all about M rated

00:16:14,209 --> 00:16:20,529
and those theoretical terrific props and

00:16:17,769 --> 00:16:24,470
all realistic part

00:16:20,529 --> 00:16:37,490
there is no documentation that is a

00:16:24,470 --> 00:16:47,839
problem so there are some numbers many

00:16:37,490 --> 00:16:51,259
machine dependent forests and if this so

00:16:47,839 --> 00:16:59,410
some they have some definitions to

00:16:51,259 --> 00:16:59,410
pro-life this I can see

00:17:15,920 --> 00:17:29,910
you cannot expect 40 of cause right 50

00:17:23,270 --> 00:17:38,520
thank you this is a typical example they

00:17:29,910 --> 00:17:45,140
have in silver dot Sepoy you see one

00:17:38,520 --> 00:17:50,400
if the f3 vp p means up platform and x86

00:17:45,140 --> 00:17:57,929
reenact specific product like this and

00:17:50,400 --> 00:18:05,429
aim to 640 nuts like this and like this

00:17:57,929 --> 00:18:18,030
so this is not beautiful but it works

00:18:05,429 --> 00:18:23,300
because they already have you see o arab

00:18:18,030 --> 00:18:26,730
earth this one if you forget to add your

00:18:23,300 --> 00:18:29,850
platform definition use the compare

00:18:26,730 --> 00:18:33,830
additional error so this is not

00:18:29,850 --> 00:18:40,410
beautiful but it helps to do development

00:18:33,830 --> 00:18:42,559
so if you port parent just get used to

00:18:40,410 --> 00:18:42,559
eat

00:18:49,019 --> 00:18:59,200
so Baroody is basically developed for

00:18:55,120 --> 00:19:05,580
brunettes originally and but it's it's

00:18:59,200 --> 00:19:08,950
bought it and bought it for darling and

00:19:05,580 --> 00:19:13,629
Android which is almost over nuts and

00:19:08,950 --> 00:19:19,149
the Darwin code is already merged into

00:19:13,629 --> 00:19:22,200
their offshore branch and as I said the

00:19:19,149 --> 00:19:25,869
authorizer previous reports but

00:19:22,200 --> 00:19:29,470
unfortunately it is not merged into the

00:19:25,869 --> 00:19:36,999
offshore branch I don't know the reason

00:19:29,470 --> 00:19:42,249
but the page decrees that our previous

00:19:36,999 --> 00:19:45,070
report is maintained out of tree which

00:19:42,249 --> 00:19:50,499
means they don't have they don't intend

00:19:45,070 --> 00:19:55,119
to March previously fort I initially

00:19:50,499 --> 00:20:02,289
wanted to merge my work NAB is really

00:19:55,119 --> 00:20:06,899
busy ports into the main tree but I have

00:20:02,289 --> 00:20:11,289
changed my mind and I think we can

00:20:06,899 --> 00:20:16,230
maintain external our changes as

00:20:11,289 --> 00:20:19,059
external port as far as we don't want to

00:20:16,230 --> 00:20:22,480
extend the basic function or just

00:20:19,059 --> 00:20:26,919
maintain our thought it and and now or

00:20:22,480 --> 00:20:31,860
we have good version control systems

00:20:26,919 --> 00:20:35,940
wray co mercury mercury or it is doable

00:20:31,860 --> 00:20:40,960
so I think I'm I'm happy with a

00:20:35,940 --> 00:20:43,769
maintaining ports in pita pocket

00:20:40,960 --> 00:20:43,769
protector

00:20:49,550 --> 00:21:01,980
my work is kind of between our faculty

00:20:55,200 --> 00:21:08,580
and beta clergy at firsts of course it

00:21:01,980 --> 00:21:13,320
didn't work at all like I'm calling in

00:21:08,580 --> 00:21:19,440
short development stage and um after

00:21:13,320 --> 00:21:24,270
that some limited most simple programs I

00:21:19,440 --> 00:21:30,780
start to work but at that time you don't

00:21:24,270 --> 00:21:34,650
use the head no idea if just code has

00:21:30,780 --> 00:21:38,250
berries or burgled in the heads back so

00:21:34,650 --> 00:21:44,960
you have use these um programs you have

00:21:38,250 --> 00:21:48,420
to divert postings and our revenant is

00:21:44,960 --> 00:21:53,340
basically a debugger but if the bad guys

00:21:48,420 --> 00:22:01,800
have had a bug it's very confusing and

00:21:53,340 --> 00:22:06,260
it's not really fun so I'm I'm now

00:22:01,800 --> 00:22:13,970
trying too hard to make the situation

00:22:06,260 --> 00:22:18,900
from fear - and uh no rage of tear apart

00:22:13,970 --> 00:22:26,000
who don't know Berglund can test on the

00:22:18,900 --> 00:22:26,000
hope yes

00:22:26,420 --> 00:22:40,190
No so I want to explain a system called

00:22:36,070 --> 00:22:45,440
actually bear green it has to simulate

00:22:40,190 --> 00:22:50,540
our system codes so I have to understand

00:22:45,440 --> 00:22:53,420
system ports to simulate it and system

00:22:50,540 --> 00:22:58,930
core from our users application point of

00:22:53,420 --> 00:23:05,480
view it's all C function but internally

00:22:58,930 --> 00:23:10,220
it's okay this one example is this

00:23:05,480 --> 00:23:13,190
OpenBSD is our lead of system for if you

00:23:10,220 --> 00:23:16,720
call off the system call from up your

00:23:13,190 --> 00:23:21,830
court it's just C function jumped

00:23:16,720 --> 00:23:26,300
damndest here and internally there is a

00:23:21,830 --> 00:23:33,500
hue or assumptions and the real system

00:23:26,300 --> 00:23:37,190
for our instruction is here hmm

00:23:33,500 --> 00:23:48,980
this is a map it's it has more advanced

00:23:37,190 --> 00:23:53,440
or a little more code and basically from

00:23:48,980 --> 00:23:57,010
common oath from CPU system core

00:23:53,440 --> 00:24:03,260
instruction is just one of drops or

00:23:57,010 --> 00:24:05,150
exceptions and when plication when

00:24:03,260 --> 00:24:08,290
application code is running while

00:24:05,150 --> 00:24:12,470
running and are its hair it gets

00:24:08,290 --> 00:24:19,060
hardware interrupt CPU and the corner

00:24:12,470 --> 00:24:23,710
try to save all context registers into a

00:24:19,060 --> 00:24:28,130
some areas I called a drop frame and

00:24:23,710 --> 00:24:31,580
after CPU or finishes those are tasks

00:24:28,130 --> 00:24:35,330
it's just list all those information

00:24:31,580 --> 00:24:39,840
back into our CP and just returns back

00:24:35,330 --> 00:24:45,379
to application and applications

00:24:39,840 --> 00:24:50,369
does not notice that it was in

00:24:45,379 --> 00:24:56,159
intervened interrupted force system

00:24:50,369 --> 00:25:00,080
course it's very similar for four

00:24:56,159 --> 00:25:05,849
continents point of view and it's saved

00:25:00,080 --> 00:25:12,739
state into the trap frame as well as

00:25:05,849 --> 00:25:16,950
other areas for interrupt but this time

00:25:12,739 --> 00:25:20,009
application voluntary occurs exception a

00:25:16,950 --> 00:25:23,099
traps and it wants something some

00:25:20,009 --> 00:25:30,119
information or it wants to do something

00:25:23,099 --> 00:25:34,859
for chronic and it when it it comes back

00:25:30,119 --> 00:25:39,299
from Khurana it sees some something

00:25:34,859 --> 00:25:43,259
changed like memory some memory areas

00:25:39,299 --> 00:25:51,419
are written or it was led by kind or

00:25:43,259 --> 00:25:55,679
some and some registers has changed for

00:25:51,419 --> 00:26:02,309
our returning values so it's basically

00:25:55,679 --> 00:26:07,159
trapped and while are entering corner or

00:26:02,309 --> 00:26:17,909
gonna do the things for application and

00:26:07,159 --> 00:26:20,700
it changed it modified where it's

00:26:17,909 --> 00:26:24,779
written with a modified drop frame

00:26:20,700 --> 00:26:31,979
struct and just returned back to

00:26:24,779 --> 00:26:36,719
applications so Rana has to change top

00:26:31,979 --> 00:26:40,249
frame and it also all saves some state

00:26:36,719 --> 00:26:40,249
on stock to

00:26:43,230 --> 00:26:55,150
so their grant has to simulate this and

00:26:48,720 --> 00:26:59,770
its uses system for both for us mr8 boss

00:26:55,150 --> 00:27:03,700
for application to debug target and it

00:26:59,770 --> 00:27:10,419
also used this system code for itself

00:27:03,700 --> 00:27:15,039
and variant does not rely on hostile if

00:27:10,419 --> 00:27:18,520
see for some reason including to avoid a

00:27:15,039 --> 00:27:22,860
symbol conflict I don't know all over

00:27:18,520 --> 00:27:28,840
them depth but it does not I use live C

00:27:22,860 --> 00:27:34,240
chords but instead they has its own

00:27:28,840 --> 00:27:37,780
office system core reports and uses it

00:27:34,240 --> 00:27:42,309
for example I just open and the back

00:27:37,780 --> 00:27:58,470
target 5 lead itself headers something

00:27:42,309 --> 00:28:03,309
like that Base Korea

00:27:58,470 --> 00:28:08,230
where grant simulate what corner dearth

00:28:03,309 --> 00:28:18,990
for system system for the difference is

00:28:08,230 --> 00:28:23,530
that as I said are very greens interrupt

00:28:18,990 --> 00:28:27,610
try and text and it mapped in the

00:28:23,530 --> 00:28:33,270
process and it reads instructions and

00:28:27,610 --> 00:28:40,120
execute one by one and resistors are

00:28:33,270 --> 00:28:42,299
also located in the same process address

00:28:40,120 --> 00:28:42,299
space

00:28:44,790 --> 00:28:49,790
so basically it's

00:28:58,789 --> 00:29:12,070
so most our system courts are just

00:29:07,749 --> 00:29:24,979
passes to the earth column for example

00:29:12,070 --> 00:29:29,179
and sorry if clients want to read some

00:29:24,979 --> 00:29:33,589
party they're green of course has to

00:29:29,179 --> 00:29:36,889
read some file descriptor are some data

00:29:33,589 --> 00:29:46,089
from Cornell otherwise it cannot pass

00:29:36,889 --> 00:29:46,089
that data back to Bryant and

00:29:50,760 --> 00:30:01,530
yes Base Korea it's just modified reads

00:29:57,990 --> 00:30:04,530
our system curve online it bar greens

00:30:01,530 --> 00:30:12,929
meets system call instructions

00:30:04,530 --> 00:30:16,740
it checks mass in state struct and its

00:30:12,929 --> 00:30:21,510
contents has our arguments to system

00:30:16,740 --> 00:30:25,490
courts so it can know or what the back

00:30:21,510 --> 00:30:31,530
target want to pass to Cornell as

00:30:25,490 --> 00:30:41,790
arguments and of course rate it has to

00:30:31,530 --> 00:30:46,070
all return return values as system

00:30:41,790 --> 00:30:49,559
co-written pollutes beer or resistors so

00:30:46,070 --> 00:30:54,980
pair green the piece of current machine

00:30:49,559 --> 00:30:57,980
state and choose or write registers and

00:30:54,980 --> 00:30:57,980
visit

00:31:02,100 --> 00:31:16,580
and internally it actually calls a

00:31:06,590 --> 00:31:16,580
system curve against Cornell and it

00:31:16,610 --> 00:31:27,570
those reports are written Berglund has

00:31:22,470 --> 00:31:38,280
its own or rock path to call real system

00:31:27,570 --> 00:31:43,770
calls because it yes if when bargains is

00:31:38,280 --> 00:31:46,500
grant system : instructions it's it's

00:31:43,770 --> 00:31:52,470
running bar green code its bar green

00:31:46,500 --> 00:31:56,580
column but when per wind executes real

00:31:52,470 --> 00:32:01,039
system call it's for its for Bryant

00:31:56,580 --> 00:32:06,750
Bryant they work target so it has to

00:32:01,039 --> 00:32:09,630
care free swap context and when it

00:32:06,750 --> 00:32:13,610
actually called

00:32:09,630 --> 00:32:17,400
real system call it cover free leads

00:32:13,610 --> 00:32:22,020
resistor barriers from client machine

00:32:17,400 --> 00:32:25,350
state structure to and the move them

00:32:22,020 --> 00:32:30,090
into real registered and just call it

00:32:25,350 --> 00:32:35,090
and after that carefree restored mr.

00:32:30,090 --> 00:32:35,090
Boris back into machine State

00:32:46,480 --> 00:33:00,769
so you have two carefree implement this

00:32:55,450 --> 00:33:10,100
assembly wrappers I'm sorry for just

00:33:00,769 --> 00:33:15,980
include cold but it's basically you see

00:33:10,100 --> 00:33:23,330
there is sig mask it has to block all

00:33:15,980 --> 00:33:28,509
signals during calling system call the

00:33:23,330 --> 00:33:32,120
unary has many problems and I will

00:33:28,509 --> 00:33:37,570
explain later but it's basically per

00:33:32,120 --> 00:33:43,970
greened pours signals it does not accept

00:33:37,570 --> 00:33:47,480
signals and it wants to control all

00:33:43,970 --> 00:33:53,080
signals explicitly so it's basically

00:33:47,480 --> 00:33:56,990
Brookes all signals during system call

00:33:53,080 --> 00:34:01,389
then later are these instructions is

00:33:56,990 --> 00:34:06,769
just are working into the structures and

00:34:01,389 --> 00:34:12,190
assign into real resistor to press them

00:34:06,769 --> 00:34:12,190
as arguments and

00:34:15,179 --> 00:34:22,500
and you have to set a system call number

00:34:19,349 --> 00:34:27,149
two of course and this is a real system

00:34:22,500 --> 00:34:32,240
call and the rater are you had to put

00:34:27,149 --> 00:34:38,069
back resistors in some structure and

00:34:32,240 --> 00:34:47,700
against restore signal Pro single mask

00:34:38,069 --> 00:34:54,559
and the damn bear grind has many where

00:34:47,700 --> 00:34:59,069
it can't have Fuchs for all system calls

00:34:54,559 --> 00:35:04,559
peregrines trucks memory read/write when

00:34:59,069 --> 00:35:07,829
memory is written or it's red and it's

00:35:04,559 --> 00:35:13,619
easy for our user programs but it has

00:35:07,829 --> 00:35:18,839
known married it cannot no it has no

00:35:13,619 --> 00:35:25,760
Nora G what memory is written or read by

00:35:18,839 --> 00:35:30,329
corner so uh if without these merits a

00:35:25,760 --> 00:35:34,470
variant if some memory is written by

00:35:30,329 --> 00:35:37,829
cornea in system core and I'll use the

00:35:34,470 --> 00:35:41,190
application try to lead those memories

00:35:37,829 --> 00:35:44,730
if without these marriages now within

00:35:41,190 --> 00:35:49,230
the mistaken reports that you are you

00:35:44,730 --> 00:35:53,279
are touching insurance memory like that

00:35:49,230 --> 00:35:59,609
so all we have to teach all these

00:35:53,279 --> 00:36:00,960
information for all system course this

00:35:59,609 --> 00:36:04,190
is a little messy

00:36:00,960 --> 00:36:08,910
and if chronic these system calls

00:36:04,190 --> 00:36:15,809
condition areare really right it's much

00:36:08,910 --> 00:36:21,230
much more complicated and it's this it's

00:36:15,809 --> 00:36:21,230
impossible to maintain perfectly

00:36:21,890 --> 00:36:25,880
okay next

00:36:26,150 --> 00:36:34,940
exactly and when as I said when our

00:36:31,140 --> 00:36:40,170
greens execute the back target program

00:36:34,940 --> 00:36:43,880
what it does is actually exactly it has

00:36:40,170 --> 00:36:53,390
to create initial process image and

00:36:43,880 --> 00:36:57,900
execute so bare greens cause this

00:36:53,390 --> 00:37:01,339
operation in it image and it calls all

00:36:57,900 --> 00:37:01,339
just image

00:37:02,550 --> 00:37:05,669
[Music]

00:37:30,869 --> 00:37:36,700
so our initial process image is

00:37:35,070 --> 00:37:41,349
something right

00:37:36,700 --> 00:37:46,839
it's a just process memory and content

00:37:41,349 --> 00:37:50,530
and each of resistors and our process

00:37:46,839 --> 00:37:53,170
resources which is stored in a corner

00:37:50,530 --> 00:37:57,369
and struct persists in obesity and

00:37:53,170 --> 00:38:05,579
search box depending on operating

00:37:57,369 --> 00:38:05,579
systems there are many process resources

00:38:06,990 --> 00:38:19,240
so each memory image is had a text of

00:38:12,670 --> 00:38:24,609
cost and database VSS areas which which

00:38:19,240 --> 00:38:31,930
can be mapped by parsing or F program

00:38:24,609 --> 00:38:33,270
had it has a road and reads so for

00:38:31,930 --> 00:38:38,200
honest

00:38:33,270 --> 00:38:43,329
can L had ever hit a processor in Connie

00:38:38,200 --> 00:38:48,940
and it pauses and look for or Todd's

00:38:43,329 --> 00:38:56,980
Road entries and internally mapped those

00:38:48,940 --> 00:39:04,619
are V note areas pirates into the

00:38:56,980 --> 00:39:04,619
process address space and

00:39:05,880 --> 00:39:15,690
and the insurer process image has a

00:39:09,570 --> 00:39:18,510
stack with arguments and environments

00:39:15,690 --> 00:39:23,370
and auxilliary

00:39:18,510 --> 00:39:29,630
information for dynamic linker which is

00:39:23,370 --> 00:39:29,630
all metadata for processes to initialize

00:39:29,870 --> 00:39:41,580
in which initialize program to set up

00:39:36,620 --> 00:39:45,330
things for our main con main problem so

00:39:41,580 --> 00:39:50,540
main function did or done by a third

00:39:45,330 --> 00:39:55,100
start Court in user on so there is

00:39:50,540 --> 00:39:59,190
hidden ABI there is hidden promises

00:39:55,100 --> 00:40:06,150
between corner exec and all start codes

00:39:59,190 --> 00:40:09,480
in user and of course there are our

00:40:06,150 --> 00:40:12,510
resistors which are used to pass

00:40:09,480 --> 00:40:14,840
parameters from corner to or thoughts

00:40:12,510 --> 00:40:14,840
called

00:40:18,790 --> 00:40:21,869
[Music]

00:40:25,490 --> 00:40:38,450
so exact ve so around this development I

00:40:33,530 --> 00:40:43,400
had to understand exact become function

00:40:38,450 --> 00:40:47,690
in corner to a simulator it on Berglund

00:40:43,400 --> 00:40:51,700
and it had to figure out which part I

00:40:47,690 --> 00:40:56,839
need and the fit but I don't need so but

00:40:51,700 --> 00:41:01,720
when I looked at the exact be function I

00:40:56,839 --> 00:41:04,000
mean that Beasley at the time it was

00:41:01,720 --> 00:41:09,710
wrong

00:41:04,000 --> 00:41:15,160
function which and it has high had no

00:41:09,710 --> 00:41:18,619
idea which is needed dependency was

00:41:15,160 --> 00:41:23,900
unable to understand so I could not

00:41:18,619 --> 00:41:30,589
figure out I could not have a splitting

00:41:23,900 --> 00:41:38,240
those function into small functions it

00:41:30,589 --> 00:41:43,730
was it was fun and and another program

00:41:38,240 --> 00:41:49,760
is obese did have three different or AV

00:41:43,730 --> 00:41:54,230
eyes for this for application it will be

00:41:49,760 --> 00:41:59,230
of course is standard function but as I

00:41:54,230 --> 00:42:02,960
said it has a hidden ABI hidden promise

00:41:59,230 --> 00:42:07,400
from the corner between corner and start

00:42:02,960 --> 00:42:11,210
code and what content to put on stack

00:42:07,400 --> 00:42:14,440
and what berries in resistors they are

00:42:11,210 --> 00:42:20,089
not documented and try to read different

00:42:14,440 --> 00:42:26,000
among business pitch and those

00:42:20,089 --> 00:42:30,440
differences I couldn't see any minute

00:42:26,000 --> 00:42:34,839
benefit one above and they are just

00:42:30,440 --> 00:42:34,839
different for no reason

00:42:35,190 --> 00:42:52,590
it's strange so to initialize a process

00:42:46,250 --> 00:42:59,750
you had to fill these things and our

00:42:52,590 --> 00:43:07,220
typical traditional beasty has on starch

00:42:59,750 --> 00:43:11,820
Roxy and RGB and the M environment and

00:43:07,220 --> 00:43:17,880
aux-in port for mainly a dynamic linker

00:43:11,820 --> 00:43:20,940
and those strengths unstuck and of

00:43:17,880 --> 00:43:32,060
course our entire stack pointer has to

00:43:20,940 --> 00:43:32,060
point on top of those exact augments but

00:43:33,530 --> 00:43:39,570
as a cetera

00:43:35,220 --> 00:43:44,160
there are Q difference difference

00:43:39,570 --> 00:43:49,880
between monkeys did how we had to put a

00:43:44,160 --> 00:43:55,910
stack and elements and how to pass

00:43:49,880 --> 00:44:00,870
arguments for example nobility has

00:43:55,910 --> 00:44:06,390
pierced strings which is just a little

00:44:00,870 --> 00:44:11,550
duplicate of pointers of connected to

00:44:06,390 --> 00:44:17,460
RGV and the MV and Agassi and I count of

00:44:11,550 --> 00:44:21,510
M strings in last one struct and try to

00:44:17,460 --> 00:44:26,610
pass address of that we add registered

00:44:21,510 --> 00:44:27,600
speeches I'm sure it's helpful but not

00:44:26,610 --> 00:44:32,910
really useful

00:44:27,600 --> 00:44:35,700
maybe our open base doesn't have that so

00:44:32,910 --> 00:44:38,240
I had to adjust all those differences

00:44:35,700 --> 00:44:42,560
and the carefully implement it otherwise

00:44:38,240 --> 00:44:42,560
things doesn't work

00:44:44,020 --> 00:45:00,970
I'm buried in the heads to sing rate

00:44:48,310 --> 00:45:04,460
this exact ve precisely so again it has

00:45:00,970 --> 00:45:07,670
penguin runs or target diversity program

00:45:04,460 --> 00:45:12,920
within the same process address space

00:45:07,670 --> 00:45:17,140
and it has a crane machine state or

00:45:12,920 --> 00:45:25,400
register content it's a memory space so

00:45:17,140 --> 00:45:31,400
basically it it sets content in Machine

00:45:25,400 --> 00:45:37,990
state structure and it has to save a

00:45:31,400 --> 00:45:43,780
friend stock exactly the target device a

00:45:37,990 --> 00:45:43,780
target process expect expect

00:45:50,970 --> 00:45:56,210
okay 15 minutes

00:45:56,390 --> 00:46:09,090
signal signal is in stop interesting

00:46:04,440 --> 00:46:18,210
think and I think all over you right you

00:46:09,090 --> 00:46:22,560
know for me it was I have little

00:46:18,210 --> 00:46:26,340
knowledge of about signal and I didn't

00:46:22,560 --> 00:46:32,070
read any called signal code in corner

00:46:26,340 --> 00:46:43,490
but I had to understand it and now I

00:46:32,070 --> 00:46:47,640
like it and yes signal is basically a

00:46:43,490 --> 00:46:52,470
same same as system call it's basically

00:46:47,640 --> 00:46:55,740
a drop and for application it's it looks

00:46:52,470 --> 00:47:04,320
like a functioned it I found if you

00:46:55,740 --> 00:47:07,680
press ask Cronin be a selection of sig

00:47:04,320 --> 00:47:10,680
action function and as Connie just call

00:47:07,680 --> 00:47:14,640
this function when cigarette is

00:47:10,680 --> 00:47:24,830
triggered but from corner point of view

00:47:14,640 --> 00:47:24,830
it's a kind of drop and just yes

00:47:30,940 --> 00:47:40,840
sorry it's special in some ways Tapani

00:47:41,650 --> 00:47:51,050
basically a corner just results

00:47:46,570 --> 00:47:57,020
application a user on state when it it's

00:47:51,050 --> 00:48:00,020
triggered by hardware interrupts except

00:47:57,020 --> 00:48:08,500
one exception was system core and

00:48:00,020 --> 00:48:12,520
another exception was exact j these

00:48:08,500 --> 00:48:18,350
these are our cue or exceptions when

00:48:12,520 --> 00:48:22,840
accountant transport user ant which is

00:48:18,350 --> 00:48:38,470
just not to restoring original context

00:48:22,840 --> 00:48:48,910
and when this is about signal hundred

00:48:38,470 --> 00:48:52,100
signal hundred in user space so when

00:48:48,910 --> 00:48:56,060
application asks corner to call signal

00:48:52,100 --> 00:49:03,160
hundreds instead of just use it

00:48:56,060 --> 00:49:08,420
processes Cornell has to setup context a

00:49:03,160 --> 00:49:15,100
temporarily to call all those grants 700

00:49:08,420 --> 00:49:20,260
function this is done by allocating

00:49:15,100 --> 00:49:24,800
sorry Agra cuting of a small quotes a

00:49:20,260 --> 00:49:30,010
code a small code code or signal

00:49:24,800 --> 00:49:33,800
trumping it's just only you found

00:49:30,010 --> 00:49:38,450
instructions just to call signal hundra

00:49:33,800 --> 00:49:41,460
and just return back to column and the

00:49:38,450 --> 00:49:45,690
signal trampoline

00:49:41,460 --> 00:49:53,970
expects some augments from Cornell which

00:49:45,690 --> 00:49:59,430
is put on stock and from applications

00:49:53,970 --> 00:50:03,359
point of view it's just called just just

00:49:59,430 --> 00:50:08,509
senior hunger function is good and when

00:50:03,359 --> 00:50:16,009
it is it original context is just

00:50:08,509 --> 00:50:22,289
restored but during that can it has to

00:50:16,009 --> 00:50:25,369
save context the original context and if

00:50:22,289 --> 00:50:29,549
the cute of hundred and are again

00:50:25,369 --> 00:50:33,269
restore on the original context and the

00:50:29,549 --> 00:50:37,499
original context are are typically saved

00:50:33,269 --> 00:50:43,579
onto the stack otherwise Connie has no

00:50:37,499 --> 00:50:43,579
space to risk to save that information

00:50:44,089 --> 00:50:54,450
and of course all these there are hidden

00:50:50,539 --> 00:50:59,160
ABI promises between cylinder hundreds

00:50:54,450 --> 00:51:02,119
and Kong and they are slightly different

00:50:59,160 --> 00:51:02,119
among these needs

00:51:06,900 --> 00:51:13,800
this is a Trump raincoat for our

00:51:11,460 --> 00:51:21,480
freebies of freebies there I am a g6

00:51:13,800 --> 00:51:25,410
poor it's in Cornell and only

00:51:21,480 --> 00:51:31,530
humans of assembly code but and these

00:51:25,410 --> 00:51:36,480
are copied into user space when are

00:51:31,530 --> 00:51:45,030
executing see you know hundra and you

00:51:36,480 --> 00:51:48,740
see this expect expect that after singer

00:51:45,030 --> 00:51:59,280
hundra our address is stored on top of

00:51:48,740 --> 00:52:02,880
stack this is all ABI for obviously also

00:51:59,280 --> 00:52:07,740
has signal code in Conan and copies

00:52:02,880 --> 00:52:14,460
those code onto our clients user space

00:52:07,740 --> 00:52:22,200
stack and this one expects senior

00:52:14,460 --> 00:52:24,960
hundred addressed in an abyss D is

00:52:22,200 --> 00:52:28,110
threat read different and special that

00:52:24,960 --> 00:52:37,250
in that it implements Dylan trampling

00:52:28,110 --> 00:52:43,040
user on for some reason so this code is

00:52:37,250 --> 00:52:47,370
code this fragmented code is called

00:52:43,040 --> 00:52:51,780
called actor or singer hundred exist

00:52:47,370 --> 00:52:58,430
this is put Caffrey and as our return

00:52:51,780 --> 00:52:58,430
code of seen hundra rather different

00:52:59,510 --> 00:53:10,530
there greens has a unique strategy to

00:53:06,000 --> 00:53:16,890
handle signal for clients basically it

00:53:10,530 --> 00:53:18,430
drugs or silliness and pours signals our

00:53:16,890 --> 00:53:23,630
wine it wanted

00:53:18,430 --> 00:53:28,609
using a sieve 18 for our system for but

00:53:23,630 --> 00:53:34,119
you cannot broke synchronous signals

00:53:28,609 --> 00:53:38,210
like a segmentation fault and how it

00:53:34,119 --> 00:53:41,710
works internally is very difficult I

00:53:38,210 --> 00:53:47,530
will turn I will explain rate and

00:53:41,710 --> 00:53:54,650
trampling bargain they had no notion to

00:53:47,530 --> 00:53:56,570
copy executive call at one time it may

00:53:54,650 --> 00:54:01,369
be possible but previously people

00:53:56,570 --> 00:54:07,520
decided to avoid that and provide of

00:54:01,369 --> 00:54:18,460
trampling from user this is right Bizzy

00:54:07,520 --> 00:54:22,180
does but it turns it works and when

00:54:18,460 --> 00:54:26,990
returning back to corner our user and

00:54:22,180 --> 00:54:30,830
cannot really return back to current it

00:54:26,990 --> 00:54:33,440
just caused a fake return a system

00:54:30,830 --> 00:54:40,070
called Signet on system :

00:54:33,440 --> 00:54:42,910
it's only handle handled by penguin so

00:54:40,070 --> 00:54:42,910
this

00:54:43,789 --> 00:54:59,089
a bit simplified you can basically it

00:54:54,289 --> 00:55:07,670
has to have end has to sing great what

00:54:59,089 --> 00:55:12,559
color does and okay this is for all

00:55:07,670 --> 00:55:16,160
synchronous signals right our

00:55:12,559 --> 00:55:21,769
segmentation port and this is very very

00:55:16,160 --> 00:55:30,069
difficult to hundred and actually very

00:55:21,769 --> 00:55:37,999
winter or as I said Bergen basically

00:55:30,069 --> 00:55:41,059
brought all signals if possible and it

00:55:37,999 --> 00:55:45,940
receives other process other signals

00:55:41,059 --> 00:55:47,949
right synchronous and the conditions are

00:55:45,940 --> 00:55:53,059
still stable

00:55:47,949 --> 00:55:58,039
sorry static when application want to

00:55:53,059 --> 00:56:01,459
broke some synchronous signals we are

00:55:58,039 --> 00:56:05,959
going to manage it well in the heads are

00:56:01,459 --> 00:56:11,749
I to remember those signal masks in turn

00:56:05,959 --> 00:56:21,529
but still configure corner in the stage

00:56:11,749 --> 00:56:30,650
tomorrow so so basically Berglund had a

00:56:21,529 --> 00:56:35,049
static information internally and when

00:56:30,650 --> 00:56:42,390
parent receives a synchronous signal

00:56:35,049 --> 00:57:10,109
while during execution it jumped to

00:56:42,390 --> 00:57:11,970
oh okay you can leave this in this paper

00:57:10,109 --> 00:57:16,319
is unpublished

00:57:11,970 --> 00:57:22,309
but basically it handles Alice's signal

00:57:16,319 --> 00:57:27,650
and wrong jump out of that context and

00:57:22,309 --> 00:57:32,160
try to the executing schedule from there

00:57:27,650 --> 00:57:36,260
and actually execute or cry and you know

00:57:32,160 --> 00:57:36,260
on drove from living schedule

00:57:42,960 --> 00:57:52,710
so uh I had just one meet I had to

00:57:49,050 --> 00:57:56,000
change this base operating system to

00:57:52,710 --> 00:58:00,150
make a burgundy work

00:57:56,000 --> 00:58:11,010
one needs a system control assist

00:58:00,150 --> 00:58:17,880
control sorry okay - one minute to

00:58:11,010 --> 00:58:22,020
summarize I could manage to work to make

00:58:17,880 --> 00:58:24,869
very deep work almost work but I still

00:58:22,020 --> 00:58:31,770
need a lot of work to support all system

00:58:24,869 --> 00:58:35,910
codes I mean is good for our users and

00:58:31,770 --> 00:58:41,940
it's good as far as it works for users

00:58:35,910 --> 00:58:48,859
but internally for the purpose it needs

00:58:41,940 --> 00:58:48,859
a lot of work and too many to maintain

00:58:49,760 --> 00:58:54,230

YouTube URL: https://www.youtube.com/watch?v=PEPo0PJteaA


