Title: QEMU user mode on FreeBSD - Sean Bruno
Publication date: 2019-10-13
Playlist: EuroBSDcon 2014, Bulgaria
Description: 
	QEMU user mode on FreeBSD - Sean Bruno
Captions: 
	00:00:03,410 --> 00:00:09,510
so after after the presentation

00:00:06,960 --> 00:00:14,639
you're more after the presentation you

00:00:09,510 --> 00:00:18,510
know go off have fun I will do a real

00:00:14,639 --> 00:00:20,670
demo so you know enter a jail build

00:00:18,510 --> 00:00:23,670
build a package by hand the the the

00:00:20,670 --> 00:00:27,840
presentation will be more me doing this

00:00:23,670 --> 00:00:29,990
a lot and and showing slides and then at

00:00:27,840 --> 00:00:33,630
the end of the slides a few questions

00:00:29,990 --> 00:00:37,890
and then we'll do I'll actually use a

00:00:33,630 --> 00:00:39,329
real emulated jail bill PKG or some

00:00:37,890 --> 00:00:42,600
other package that doesn't have a lot of

00:00:39,329 --> 00:00:46,079
dependencies and one that I know builds

00:00:42,600 --> 00:00:47,760
and take you to take your questions yeah

00:00:46,079 --> 00:00:50,700
pkg it'll build it has to build

00:00:47,760 --> 00:00:54,899
otherwise nothing would work it would be

00:00:50,700 --> 00:00:58,590
bad but I just kind of want to show for

00:00:54,899 --> 00:01:01,460
for arm this will work for mips32 this

00:00:58,590 --> 00:01:03,750
will work and for mips64 this will work

00:01:01,460 --> 00:01:10,040
if there are people who are interested

00:01:03,750 --> 00:01:12,659
in PowerPC on FreeBSD or sparc64 the

00:01:10,040 --> 00:01:16,290
QEMU emulator needs some needs a lot of

00:01:12,659 --> 00:01:18,479
help and you can come talk to me about

00:01:16,290 --> 00:01:21,570
that after the presentation but it's

00:01:18,479 --> 00:01:23,659
there there is there's some very good

00:01:21,570 --> 00:01:28,770
things we can do with this emulation to

00:01:23,659 --> 00:01:32,460
keep alive architectures that aren't x86

00:01:28,770 --> 00:01:33,829
that aren't intel all right I'll go

00:01:32,460 --> 00:01:35,909
ahead and get started

00:01:33,829 --> 00:01:38,700
good afternoon and thank you for all

00:01:35,909 --> 00:01:42,060
coming the last presentation slot of the

00:01:38,700 --> 00:01:50,450
day always fun I'll be presenting today

00:01:42,060 --> 00:01:53,689
a status on cross building in a way for

00:01:50,450 --> 00:01:55,680
architectures that are not x86

00:01:53,689 --> 00:02:01,549
specifically I'll be talking about arm

00:01:55,680 --> 00:02:07,409
v6 mips32 and mips64 we'll be using a

00:02:01,549 --> 00:02:10,410
kernel side code userland code QEMU puja

00:02:07,409 --> 00:02:13,320
air PKG

00:02:10,410 --> 00:02:14,940
and we'll get into a little bit of

00:02:13,320 --> 00:02:21,930
demonstrations of how this works

00:02:14,940 --> 00:02:24,000
as we go along the kernel components I'm

00:02:21,930 --> 00:02:26,310
going to I want to kind of show some of

00:02:24,000 --> 00:02:29,750
the code that's involved in the kernel

00:02:26,310 --> 00:02:33,120
to actually intercept execution

00:02:29,750 --> 00:02:36,420
interpret the elf header and redirect

00:02:33,120 --> 00:02:38,730
execution to an emulator it's very it's

00:02:36,420 --> 00:02:41,880
very cool

00:02:38,730 --> 00:02:45,840
the userland components is the tool bin

00:02:41,880 --> 00:02:49,290
mish CTL is the tool you use to

00:02:45,840 --> 00:02:52,980
configure the redirection you input a a

00:02:49,290 --> 00:02:56,340
certain carrot header and an emulator

00:02:52,980 --> 00:02:59,550
give it a name and then that instructs

00:02:56,340 --> 00:03:03,630
the kernel what you want executed when

00:02:59,550 --> 00:03:07,950
the user tries to run a mips32 binary on

00:03:03,630 --> 00:03:10,860
your AMD 64 system the emulator i'm

00:03:07,950 --> 00:03:16,650
using is QEMU a lot of work has been

00:03:10,860 --> 00:03:19,110
done on the bsd user mode specifically

00:03:16,650 --> 00:03:24,990
the freebsd user mode the net bsd and

00:03:19,110 --> 00:03:27,260
OpenBSD user mode tools are not they're

00:03:24,990 --> 00:03:29,820
not in a working state that I'm aware of

00:03:27,260 --> 00:03:34,110
the final user land component that I'll

00:03:29,820 --> 00:03:36,290
be using is as of eight hours ago Poudre

00:03:34,110 --> 00:03:42,510
err develop it's a package you can get

00:03:36,290 --> 00:03:45,900
online now using Nullah fessin chroot

00:03:42,510 --> 00:03:50,730
along with puja air you can trivially

00:03:45,900 --> 00:03:54,030
create jails that allow you to chroot

00:03:50,730 --> 00:03:56,730
into an armed v6 or mips32 environment

00:03:54,030 --> 00:03:58,860
on your machines so you don't if you

00:03:56,730 --> 00:04:01,770
don't want to build packages but you

00:03:58,860 --> 00:04:04,050
want to test your own code for whatever

00:04:01,770 --> 00:04:07,020
reason this is going to be a technique

00:04:04,050 --> 00:04:14,370
that you can do right now on FreeBSD

00:04:07,020 --> 00:04:19,919
head any project of this complexity took

00:04:14,370 --> 00:04:22,740
a lot of people I have been the the

00:04:19,919 --> 00:04:24,060
sheep herder of gathering code from

00:04:22,740 --> 00:04:26,010
other people committing

00:04:24,060 --> 00:04:28,830
pushing it upstream and getting a

00:04:26,010 --> 00:04:32,580
testable version of everything the

00:04:28,830 --> 00:04:36,510
original implementation and idea was

00:04:32,580 --> 00:04:40,400
coded out by Stacey song Jurgen Locke

00:04:36,510 --> 00:04:46,470
the current FreeBSD maintainer of qemu

00:04:40,400 --> 00:04:48,150
has tens of patches to QEMU to get it to

00:04:46,470 --> 00:04:50,400
the point where it's stable

00:04:48,150 --> 00:04:53,700
edie mass to the FreeBSD Foundation

00:04:50,400 --> 00:04:59,090
helped in in several icky situations

00:04:53,700 --> 00:05:02,820
with qmu to get it stabilized peter wem

00:04:59,090 --> 00:05:05,639
walked me through compiling one piece of

00:05:02,820 --> 00:05:08,100
assembly and then decoding it to figure

00:05:05,639 --> 00:05:11,100
out what the signal trampoline address

00:05:08,100 --> 00:05:14,520
was that I needed because it was hard

00:05:11,100 --> 00:05:18,900
and that was very useful alexander cobby

00:05:14,520 --> 00:05:21,570
EV sent in numerous qmu patches Adrian

00:05:18,900 --> 00:05:24,810
Chad didn't help me because I needed to

00:05:21,570 --> 00:05:27,720
learn how to do this myself but he

00:05:24,810 --> 00:05:32,850
guided me to the right piece of code to

00:05:27,720 --> 00:05:35,340
modify in cistern Baptiste punished me

00:05:32,850 --> 00:05:42,060
for all this with a ports commit bit

00:05:35,340 --> 00:05:44,160
Thank You Dmitry vital to getting clang

00:05:42,060 --> 00:05:48,840
stabilized to where we could do this

00:05:44,160 --> 00:05:51,120
gruesome unbelievably confusing way of

00:05:48,840 --> 00:05:54,630
building things Andrew Turner is

00:05:51,120 --> 00:05:58,289
currently working on GCC and other ports

00:05:54,630 --> 00:06:00,990
and linking libraries Mikhail fixed my

00:05:58,289 --> 00:06:04,200
sequel for users on arm v6 which is

00:06:00,990 --> 00:06:07,860
going to be vital Bryan has been helping

00:06:04,200 --> 00:06:11,639
me with powder-keg itself Warner Losh

00:06:07,860 --> 00:06:15,539
actually made a tool chain of amd64

00:06:11,639 --> 00:06:18,870
binaries that outputs arm v6 so that I

00:06:15,539 --> 00:06:22,100
could put that into the jail so that CC

00:06:18,870 --> 00:06:25,620
is not emulated and it runs much faster

00:06:22,100 --> 00:06:28,350
Ian Lepore has been decoding assembly

00:06:25,620 --> 00:06:31,610
instructions and helping me with clang

00:06:28,350 --> 00:06:36,030
and brooks davis inspired me to do this

00:06:31,610 --> 00:06:37,590
this spring in at asia bsd con when he

00:06:36,030 --> 00:06:41,570
pointed me at all this stuff

00:06:37,590 --> 00:06:45,270
and we got the project off the ground so

00:06:41,570 --> 00:06:47,820
kernel components the first thing there

00:06:45,270 --> 00:06:52,950
is a kernel module that's built called

00:06:47,820 --> 00:06:57,750
image act bin mish it is a kernel module

00:06:52,950 --> 00:07:01,160
that hooks in to the execution layer of

00:06:57,750 --> 00:07:05,370
the FreeBSD kernel and allows you to

00:07:01,160 --> 00:07:08,190
execute any emulator any other tool you

00:07:05,370 --> 00:07:10,800
want through the userland tool you can

00:07:08,190 --> 00:07:14,720
completely break your machine in a way

00:07:10,800 --> 00:07:20,010
that is new and exciting you can make it

00:07:14,720 --> 00:07:23,190
completely and totally unusable by

00:07:20,010 --> 00:07:27,840
anyone outside of yourself because you

00:07:23,190 --> 00:07:30,870
can say if somebody executes this type

00:07:27,840 --> 00:07:33,510
of binary run it through an emulator

00:07:30,870 --> 00:07:36,030
which can be a shell or a script or

00:07:33,510 --> 00:07:39,600
anything you like it doesn't have to be

00:07:36,030 --> 00:07:43,040
Q into that so it's fun the module

00:07:39,600 --> 00:07:47,100
itself looks at your art V sub-zero

00:07:43,040 --> 00:07:49,770
looks there and then pushes everything

00:07:47,100 --> 00:07:52,050
out and then drops in your emulator at

00:07:49,770 --> 00:07:54,630
the front of it before execution that's

00:07:52,050 --> 00:07:58,260
really the magic it's manipulating your

00:07:54,630 --> 00:08:05,190
execution string pushing it out and then

00:07:58,260 --> 00:08:07,470
adding in QEMU in my case now I have not

00:08:05,190 --> 00:08:11,310
made this human readable for a reason

00:08:07,470 --> 00:08:14,670
because it's not finished CTL it has a

00:08:11,310 --> 00:08:17,550
man page you can you can look at it it

00:08:14,670 --> 00:08:19,680
works off the following syntax and I

00:08:17,550 --> 00:08:23,970
just kind of want to go into it because

00:08:19,680 --> 00:08:27,840
it's important in this example I have a

00:08:23,970 --> 00:08:31,680
mips32 and an arm v6 execution you will

00:08:27,840 --> 00:08:35,010
run this as route on your machine you

00:08:31,680 --> 00:08:39,450
execute this you give it you say you're

00:08:35,010 --> 00:08:43,140
going to add a redirection you're going

00:08:39,450 --> 00:08:45,600
to call it some name call it arm v6 call

00:08:43,140 --> 00:08:49,880
it Bob we'll call it Bob and it will be

00:08:45,600 --> 00:08:54,110
good you say I want

00:08:49,880 --> 00:08:58,430
this redirector named arm v6 to use this

00:08:54,110 --> 00:09:01,639
program QEMU if a program is executed

00:08:58,430 --> 00:09:04,160
that has this elf header that's actually

00:09:01,639 --> 00:09:08,000
the elf header for an arm v6 binary in

00:09:04,160 --> 00:09:11,870
freebsd match on the following bits in

00:09:08,000 --> 00:09:14,000
that header enable it and you're off and

00:09:11,870 --> 00:09:16,940
running hopefully you've installed QEMU

00:09:14,000 --> 00:09:19,430
by this point so this is the mechanical

00:09:16,940 --> 00:09:23,600
bits that actually get you to the point

00:09:19,430 --> 00:09:24,980
of okay now that the kernel is actually

00:09:23,600 --> 00:09:27,709
lived now the kernel is actually

00:09:24,980 --> 00:09:30,370
configured you can say give me a list of

00:09:27,709 --> 00:09:34,250
the things that are installed this gives

00:09:30,370 --> 00:09:38,660
this will tell you what will be done if

00:09:34,250 --> 00:09:40,339
I add a redirection here is actually how

00:09:38,660 --> 00:09:45,259
you can see if that redirection is

00:09:40,339 --> 00:09:47,389
additive QEMU is the emulator that I am

00:09:45,259 --> 00:09:49,759
using if you have an emulator for an

00:09:47,389 --> 00:09:52,279
architecture that you want to use it

00:09:49,759 --> 00:09:54,829
should just work I don't know of a

00:09:52,279 --> 00:09:57,439
reason why it won't and I'm more than

00:09:54,829 --> 00:09:58,490
happy to test other emulators right now

00:09:57,439 --> 00:10:00,709
in ports

00:09:58,490 --> 00:10:04,370
juergen has created the static user

00:10:00,709 --> 00:10:06,680
version of QEMU that's the one that

00:10:04,370 --> 00:10:08,720
we're using to build packages it's the

00:10:06,680 --> 00:10:10,910
one I recommend because it builds a

00:10:08,720 --> 00:10:12,709
statically linked binary that can be

00:10:10,910 --> 00:10:15,319
copied around anywhere in your file

00:10:12,709 --> 00:10:19,329
system and we will be copying it around

00:10:15,319 --> 00:10:19,329
anywhere in your file system very soon

00:10:21,160 --> 00:10:30,620
emulation is hard to be able to do you

00:10:25,910 --> 00:10:32,779
have to really be prepared to learn how

00:10:30,620 --> 00:10:35,600
a computer works if you don't which I

00:10:32,779 --> 00:10:39,880
didn't and now I definitely don't know

00:10:35,600 --> 00:10:45,439
how computers work the main thing for

00:10:39,880 --> 00:10:48,649
freebsd netbsd openbsd is having QEMU

00:10:45,439 --> 00:10:51,860
understand read/write operations on the

00:10:48,649 --> 00:10:54,319
different ioctl what the SIS call

00:10:51,860 --> 00:10:56,689
numbers are what they mean and how you

00:10:54,319 --> 00:10:59,029
actually exits most of the changes that

00:10:56,689 --> 00:11:02,089
we've been making have been oh we have

00:10:59,029 --> 00:11:03,530
this type of file system property we

00:11:02,089 --> 00:11:06,770
need an i/o CTL for the

00:11:03,530 --> 00:11:12,910
we emulate that and return some value a

00:11:06,770 --> 00:11:17,180
lot of SIS controls are not will return

00:11:12,910 --> 00:11:19,370
amd64 values to a 32-bit environment so

00:11:17,180 --> 00:11:21,380
they have to be shrunk otherwise bad

00:11:19,370 --> 00:11:24,140
things happen those are the kinds of

00:11:21,380 --> 00:11:27,980
problems that we run into

00:11:24,140 --> 00:11:33,470
pooja rare develop is the easiest way

00:11:27,980 --> 00:11:36,260
that I know of to build a jail for doing

00:11:33,470 --> 00:11:38,260
this on your system if you want to use

00:11:36,260 --> 00:11:42,020
make and you want to build your own jail

00:11:38,260 --> 00:11:43,480
good luck have fun you'll figure it out

00:11:42,020 --> 00:11:46,370
it'll be a great journey

00:11:43,480 --> 00:11:49,550
whoo Jair develop already knows how to

00:11:46,370 --> 00:11:51,770
do all of this so if you want to figure

00:11:49,550 --> 00:11:54,020
out how to do this by yourself it's a

00:11:51,770 --> 00:11:55,610
great journey but we've made pooja ere

00:11:54,020 --> 00:11:59,120
know how to do it it knows how to

00:11:55,610 --> 00:12:01,940
configure the kernel it knows if QEMU is

00:11:59,120 --> 00:12:04,070
installed it will copy the right binary

00:12:01,940 --> 00:12:07,160
to the right jail so you don't end up

00:12:04,070 --> 00:12:08,710
with a spark 64 emulator in your mips32

00:12:07,160 --> 00:12:11,270
jail

00:12:08,710 --> 00:12:15,440
pooja air will keep a backup of your

00:12:11,270 --> 00:12:19,000
Jail so that when you break it and you

00:12:15,440 --> 00:12:23,750
will you have a way to go back and

00:12:19,000 --> 00:12:27,650
please use EFS so you can just roll back

00:12:23,750 --> 00:12:32,870
and be done and move on it's much easier

00:12:27,650 --> 00:12:34,570
you need more RAM ok you do I run it on

00:12:32,870 --> 00:12:39,710
my laptop it works

00:12:34,570 --> 00:12:42,620
the puja err syntax in pou gr devel will

00:12:39,710 --> 00:12:44,150
be something like this if you're

00:12:42,620 --> 00:12:45,980
familiar with the syntax of how to build

00:12:44,150 --> 00:12:47,930
packages now it should look very

00:12:45,980 --> 00:12:50,510
familiar except that you're going to be

00:12:47,930 --> 00:12:54,710
passing in an architecture target target

00:12:50,510 --> 00:12:59,990
arch syntax into your command line the

00:12:54,710 --> 00:13:02,300
dash X will build you a tool chain to

00:12:59,990 --> 00:13:04,670
help accelerate the builds because it'll

00:13:02,300 --> 00:13:08,450
be native to your hosts as far as binary

00:13:04,670 --> 00:13:10,220
is concerned but then it will output the

00:13:08,450 --> 00:13:11,900
architecture that you want so it will be

00:13:10,220 --> 00:13:14,240
a little bit of cross building it makes

00:13:11,900 --> 00:13:17,030
it much faster and then of course check

00:13:14,240 --> 00:13:17,540
out your ports so these are three little

00:13:17,030 --> 00:13:19,850
sin

00:13:17,540 --> 00:13:21,709
this these slides are available I sent

00:13:19,850 --> 00:13:25,009
these off to Olivier they should be up

00:13:21,709 --> 00:13:28,370
already these are the commands that I

00:13:25,009 --> 00:13:30,410
run to create the jails so if you want

00:13:28,370 --> 00:13:35,959
to do this you can do this right now on

00:13:30,410 --> 00:13:37,670
your freebsd 11 desktop when you execute

00:13:35,959 --> 00:13:41,420
these commands puja air will give you

00:13:37,670 --> 00:13:43,699
these these file systems and then you're

00:13:41,420 --> 00:13:46,399
going to mount the appropriate dev FS

00:13:43,699 --> 00:13:48,500
and nullify smelts into your jails

00:13:46,399 --> 00:13:53,660
because you have to have those when you

00:13:48,500 --> 00:13:55,630
sure route you can literally just chroot

00:13:53,660 --> 00:13:58,370
in like you would any other jail and

00:13:55,630 --> 00:14:09,620
you're off you have a tool chain you

00:13:58,370 --> 00:14:09,769
have all the things yeah but there you

00:14:09,620 --> 00:14:14,779
go

00:14:09,769 --> 00:14:16,399
put your - s okay and done and then

00:14:14,779 --> 00:14:20,899
you're in you don't have to do anything

00:14:16,399 --> 00:14:22,760
else do what he says - yes so this gives

00:14:20,899 --> 00:14:25,699
you the I mean as you can see I'm on the

00:14:22,760 --> 00:14:26,750
same machine in the freebsd cluster i'm

00:14:25,699 --> 00:14:28,670
amd64

00:14:26,750 --> 00:14:35,000
and now I'm armed and I can start

00:14:28,670 --> 00:14:41,660
building and doing stuff so the bulk

00:14:35,000 --> 00:14:45,290
demo is done real briefly for those of

00:14:41,660 --> 00:14:48,339
you who weren't here we just finished a

00:14:45,290 --> 00:14:52,160
build so my timing was off a little bit

00:14:48,339 --> 00:14:54,380
we built on this run using puja air and

00:14:52,160 --> 00:14:57,529
the jail's from QEMU and all of these

00:14:54,380 --> 00:14:59,959
tools we built 5000 new packages we were

00:14:57,529 --> 00:15:02,720
unable we failed to build 360 for

00:14:59,959 --> 00:15:09,670
because they're broken and we skipped

00:15:02,720 --> 00:15:14,829
4,000 4,000 600 because probably GCC and

00:15:09,670 --> 00:15:19,060
Java let's see let's take a look what is

00:15:14,829 --> 00:15:19,060
what is the worst offender

00:15:20,150 --> 00:15:27,330
indeed so now we know and now we know

00:15:24,540 --> 00:15:30,480
these will not build on arm we have a

00:15:27,330 --> 00:15:33,210
prop we don't have a GCC toolchain live

00:15:30,480 --> 00:15:35,790
VPX doesn't build we can see what

00:15:33,210 --> 00:15:38,160
packages depend on that so now you know

00:15:35,790 --> 00:15:40,590
the scope of the work you know how much

00:15:38,160 --> 00:15:44,730
work there is to do to get what you need

00:15:40,590 --> 00:15:50,100
working obviously the Linux emulators

00:15:44,730 --> 00:15:52,350
won't build up and then the failure

00:15:50,100 --> 00:15:56,280
ports also give you them from

00:15:52,350 --> 00:15:59,220
interesting information and so we've

00:15:56,280 --> 00:16:02,340
been working through this list in

00:15:59,220 --> 00:16:05,460
various places some of these are build

00:16:02,340 --> 00:16:10,530
failures some of these are qemu failures

00:16:05,460 --> 00:16:13,290
like core dump probably not the code

00:16:10,530 --> 00:16:13,940
itself probably QEMU needs to be

00:16:13,290 --> 00:16:18,750
adjusted

00:16:13,940 --> 00:16:21,480
things like linker error that's probably

00:16:18,750 --> 00:16:24,510
the port and so we've been guessing and

00:16:21,480 --> 00:16:26,850
fixing and changing and getting ports

00:16:24,510 --> 00:16:30,210
into the into a place where we can

00:16:26,850 --> 00:16:35,810
actually say yes you can run FreeBSD

00:16:30,210 --> 00:16:38,820
with packages on your our machine maybe

00:16:35,810 --> 00:16:42,360
so that was an engine X Server on the

00:16:38,820 --> 00:16:44,310
back end the man page for puja air has

00:16:42,360 --> 00:16:47,220
the configuration or is it in share

00:16:44,310 --> 00:16:49,440
examples it's in share examples so that

00:16:47,220 --> 00:16:51,780
that that web front-end is available to

00:16:49,440 --> 00:16:54,710
you if you install puja air if you have

00:16:51,780 --> 00:16:58,440
never installed it it's really useful

00:16:54,710 --> 00:17:01,730
the core dumps and the question marks

00:16:58,440 --> 00:17:06,300
and the bad C++ code those errors are

00:17:01,730 --> 00:17:07,650
probably QEMU probably and that's where

00:17:06,300 --> 00:17:09,480
the sharp edges are that's where the

00:17:07,650 --> 00:17:12,900
interesting things aren't that need to

00:17:09,480 --> 00:17:20,580
be fixed and the need to be fixed in

00:17:12,900 --> 00:17:22,800
them so you can actually chroot in type

00:17:20,580 --> 00:17:24,270
make and it will fetch the packages and

00:17:22,800 --> 00:17:27,630
it will build them and it will do stuff

00:17:24,270 --> 00:17:30,780
will do this in a moment I have failed

00:17:27,630 --> 00:17:32,880
you all and I'm sorry I have not written

00:17:30,780 --> 00:17:33,510
this down good there's not a good

00:17:32,880 --> 00:17:40,620
explanation

00:17:33,510 --> 00:17:42,540
this the bin mich CTL command I don't

00:17:40,620 --> 00:17:44,910
know how you would figure that out if

00:17:42,540 --> 00:17:48,000
you didn't go and look at the FreeBSD

00:17:44,910 --> 00:17:49,710
wiki and copy and paste from there if

00:17:48,000 --> 00:17:51,750
you understand the if you understand the

00:17:49,710 --> 00:17:56,460
elf format oh well of course that's the

00:17:51,750 --> 00:17:58,770
elf format that's what it is so we need

00:17:56,460 --> 00:18:01,080
better documentation for this I need to

00:17:58,770 --> 00:18:04,800
spend time and update the man pages and

00:18:01,080 --> 00:18:08,160
I would like to add shortcuts to the

00:18:04,800 --> 00:18:13,080
command finish CTL - where you just save

00:18:08,160 --> 00:18:14,460
in mich CTL give me an arm thing and you

00:18:13,080 --> 00:18:18,870
don't have to enter in all the rest of

00:18:14,460 --> 00:18:22,070
it it would just do the right thing so

00:18:18,870 --> 00:18:27,120
for the future what's going to happen

00:18:22,070 --> 00:18:31,620
soonish I have been promised clang four

00:18:27,120 --> 00:18:34,980
myths over and over and over again

00:18:31,620 --> 00:18:39,240
clang four mips will help a lot

00:18:34,980 --> 00:18:42,270
soon we'll be having armed 64 support in

00:18:39,240 --> 00:18:45,360
QEMU and freebsd which means we'll be

00:18:42,270 --> 00:18:50,630
building packages for that i will be

00:18:45,360 --> 00:18:52,890
adding some debug handling for ioctl

00:18:50,630 --> 00:18:56,130
operations that are not supported in

00:18:52,890 --> 00:18:58,620
QEMU i stole some code from John Baldwin

00:18:56,130 --> 00:19:00,540
of the FreeBSD project and I'll be

00:18:58,620 --> 00:19:05,160
putting that into the debug version of

00:19:00,540 --> 00:19:07,170
QEMU so that you can get useful error

00:19:05,160 --> 00:19:09,750
output and I'll show that I'll show the

00:19:07,170 --> 00:19:15,030
unuseful error output here in a moment

00:19:09,750 --> 00:19:18,110
let me do the demo so is there anything

00:19:15,030 --> 00:19:20,550
before before I do a demo

00:19:18,110 --> 00:19:23,790
what would you folks like to see with

00:19:20,550 --> 00:19:26,940
this is there anything that is more

00:19:23,790 --> 00:19:28,890
interesting than something else or if I

00:19:26,940 --> 00:19:30,060
skipped something or do you need a

00:19:28,890 --> 00:19:33,990
coffee

00:19:30,060 --> 00:19:40,500
should it be cooler in here should we

00:19:33,990 --> 00:19:43,750
have music oh god some seriously 4:45

00:19:40,500 --> 00:19:46,430
and there's not a case of beer here

00:19:43,750 --> 00:19:46,850
anyway are there any questions at this

00:19:46,430 --> 00:19:54,950
point

00:19:46,850 --> 00:19:57,530
yes no yes

00:19:54,950 --> 00:20:01,250
so what little yes so what will work on

00:19:57,530 --> 00:20:07,760
10 right now everything ever so on 10

00:20:01,250 --> 00:20:15,080
you can do everything except dash X and

00:20:07,760 --> 00:20:17,900
if you install puja air devel now you

00:20:15,080 --> 00:20:20,900
will have one one thing I have not MF

00:20:17,900 --> 00:20:24,320
seed from current so I added some

00:20:20,900 --> 00:20:27,320
features to the image activator code

00:20:24,320 --> 00:20:29,810
it's not that's generic that I have not

00:20:27,320 --> 00:20:34,360
NF seed to 10 I had no intention of MF

00:20:29,810 --> 00:20:37,190
seeing it you can build some packages

00:20:34,360 --> 00:20:43,580
but you will see interesting failures

00:20:37,190 --> 00:20:48,020
when when you try to emulate a shell

00:20:43,580 --> 00:20:52,730
script because you need to emulate bin

00:20:48,020 --> 00:20:56,090
SH but you've already put QEMU in front

00:20:52,730 --> 00:20:58,640
of your shell script but then you don't

00:20:56,090 --> 00:21:02,030
do that because it is a shell script and

00:20:58,640 --> 00:21:05,300
it fails I think you will see that I'll

00:21:02,030 --> 00:21:15,650
show you the code in a little bit it

00:21:05,300 --> 00:21:17,720
just dies yeah what it works it works it

00:21:15,650 --> 00:21:25,400
works it works in a special case that

00:21:17,720 --> 00:21:30,380
that yes yes you can the failure case

00:21:25,400 --> 00:21:36,290
will be if you try to use my fancy amd64

00:21:30,380 --> 00:21:39,170
tool chain because then it's how does it

00:21:36,290 --> 00:21:41,570
work yeah all I have to get it correct

00:21:39,170 --> 00:21:48,970
so because there's a lot of layers here

00:21:41,570 --> 00:21:52,940
so the amd64 tool chain will call make

00:21:48,970 --> 00:21:56,790
from the amd64 tool chain which will end

00:21:52,940 --> 00:22:01,410
up calling in to 32-bit are

00:21:56,790 --> 00:22:04,770
v6 shell scripts sometimes it will do it

00:22:01,410 --> 00:22:08,250
in such a way that only the shell script

00:22:04,770 --> 00:22:10,830
image activator will fire and not the

00:22:08,250 --> 00:22:12,600
bin mish activator will fire and it will

00:22:10,830 --> 00:22:15,300
fail and you will be like why did this

00:22:12,600 --> 00:22:16,890
fail and so that is some code that I've

00:22:15,300 --> 00:22:19,830
made a change in current and we'll look

00:22:16,890 --> 00:22:22,320
at it I have a diff and commits and all

00:22:19,830 --> 00:22:23,640
kinds of things well we will go into it

00:22:22,320 --> 00:22:25,290
and you can do it you can do some of

00:22:23,640 --> 00:22:27,000
this on 10:1 so if you have ten one

00:22:25,290 --> 00:22:30,530
installed or 1000 installed right now I

00:22:27,000 --> 00:22:30,530
think you can get away with some of this

00:22:31,640 --> 00:22:37,130
you type make it's fine it's fine

00:22:37,220 --> 00:22:40,760
any more questions

00:22:47,810 --> 00:23:05,610
now no we Baptiste okay you can just go

00:23:04,830 --> 00:23:09,120
right here

00:23:05,610 --> 00:23:11,460
there right there so a fish don't call

00:23:09,120 --> 00:23:14,280
him don't call Baptiste don't call port

00:23:11,460 --> 00:23:19,740
manager you can yell at me and we'll do

00:23:14,280 --> 00:23:23,280
some Bugzilla stuff and whatnot what's

00:23:19,740 --> 00:23:26,250
that make it a tutorial because it's

00:23:23,280 --> 00:23:28,170
look my documentation sucks I'm sorry I

00:23:26,250 --> 00:23:31,070
feel I actually do feel bad this is the

00:23:28,170 --> 00:23:37,460
best this slides is the best

00:23:31,070 --> 00:23:37,460
documentation that exists you're welcome

00:23:37,960 --> 00:23:59,150
questions up so far okay please puja air

00:23:55,430 --> 00:24:00,710
devel yes it will and we will do that I

00:23:59,150 --> 00:24:01,130
will show you with doing it here in a

00:24:00,710 --> 00:24:03,860
moment

00:24:01,130 --> 00:24:06,620
but yes food your devil as of this

00:24:03,860 --> 00:24:12,170
morning does all of the things that are

00:24:06,620 --> 00:24:14,990
needed to get started and then yes if

00:24:12,170 --> 00:24:16,700
you install Poudre devel it will when

00:24:14,990 --> 00:24:18,800
you go to build pou drear devel to

00:24:16,700 --> 00:24:21,500
install it it'll actually ask you if you

00:24:18,800 --> 00:24:23,420
want QEMU but it'll ask you if you want

00:24:21,500 --> 00:24:25,610
if you want to install the QEMU port

00:24:23,420 --> 00:24:33,470
it's a it's an optional dependency and

00:24:25,610 --> 00:24:35,990
that's what it's there for when you

00:24:33,470 --> 00:24:38,120
execute been mich CTL it will load the

00:24:35,990 --> 00:24:41,870
image activator for you so just

00:24:38,120 --> 00:24:49,520
executing bin mich CTL activates loads

00:24:41,870 --> 00:24:53,360
the the appropriate module for you I'll

00:24:49,520 --> 00:24:55,520
do it on my laptop great because I can't

00:24:53,360 --> 00:25:05,590
can I can't connect back to the US right

00:24:55,520 --> 00:25:05,590
now it's very slow questions really ok

00:25:07,850 --> 00:25:14,230
so we're gonna leave this machine maybe

00:25:14,470 --> 00:25:23,929
oK we've left alright so I already have

00:25:20,750 --> 00:25:27,200
I already have a jail built because I

00:25:23,929 --> 00:25:29,570
cheated because I think most of you know

00:25:27,200 --> 00:25:32,270
what a build world looks like I can do

00:25:29,570 --> 00:25:34,100
it if you want me to but I think we all

00:25:32,270 --> 00:25:41,120
want to leave and get beer

00:25:34,100 --> 00:25:43,850
I've also cheated and I put those into

00:25:41,120 --> 00:25:46,010
my RC local because I don't want to ever

00:25:43,850 --> 00:25:47,450
have to remember how to type this if

00:25:46,010 --> 00:25:49,910
somebody would like a copy of this to

00:25:47,450 --> 00:25:53,150
turn it into documentation please come

00:25:49,910 --> 00:25:57,260
see me so this allows me to emulate

00:25:53,150 --> 00:26:01,070
mips64 arm v6 mips32 and work on the

00:25:57,260 --> 00:26:05,570
development of PowerPC 32 PowerPC 64 and

00:26:01,070 --> 00:26:07,460
SPARC 60 so those are all so the fact

00:26:05,570 --> 00:26:18,590
that I execute these commands at host

00:26:07,460 --> 00:26:20,870
startup means that I already have the

00:26:18,590 --> 00:26:25,190
correct module loaded so I don't even

00:26:20,870 --> 00:26:27,110
have to think about that anymore the

00:26:25,190 --> 00:26:30,309
interesting code I want to show you

00:26:27,110 --> 00:26:30,309
before I start building

00:26:55,020 --> 00:27:05,140
okay so Stacy wrote won't Stacy wrote

00:26:59,380 --> 00:27:09,730
this code the interesting bits just as

00:27:05,140 --> 00:27:12,010
kind of a what's going on here when you

00:27:09,730 --> 00:27:13,780
add an entry there's a whole bunch of

00:27:12,010 --> 00:27:16,600
data structures being set up

00:27:13,780 --> 00:27:22,420
when you search and find this is the way

00:27:16,600 --> 00:27:25,530
that it's going about doing it when is

00:27:22,420 --> 00:27:25,530
this the execution part

00:27:34,799 --> 00:27:38,789
now hold it farther down

00:27:38,820 --> 00:27:44,830
okay so the kernel executes these

00:27:41,620 --> 00:27:53,340
functions here so the kernel is going to

00:27:44,830 --> 00:27:53,340
execute the registered handler which is

00:27:55,080 --> 00:28:00,519
so on an on module load it's going to

00:27:58,390 --> 00:28:02,380
load the initialization routine and then

00:28:00,519 --> 00:28:05,169
when it exits this is this is the actual

00:28:02,380 --> 00:28:08,039
mechanism that the kernel uses to

00:28:05,169 --> 00:28:10,990
register arbitrary functions and

00:28:08,039 --> 00:28:15,299
execution through Sisson it insists on

00:28:10,990 --> 00:28:18,429
an it the actual image the image

00:28:15,299 --> 00:28:20,380
activator this is a common data

00:28:18,429 --> 00:28:22,870
structure in FreeBSD you can have you

00:28:20,380 --> 00:28:25,690
can redefine your own image activator to

00:28:22,870 --> 00:28:28,480
do whatever you want it's done through

00:28:25,690 --> 00:28:32,139
this mechanism the macro exact set tells

00:28:28,480 --> 00:28:34,779
current exec do this when this type of

00:28:32,139 --> 00:28:39,490
file is executed and in our case we're

00:28:34,779 --> 00:28:43,690
gonna execute image act bin mish and do

00:28:39,490 --> 00:28:48,419
all kinds of interesting stuff this

00:28:43,690 --> 00:28:48,419
looks like the main yeah okay so in here

00:28:48,929 --> 00:28:58,690
we look for the actual does this binary

00:28:54,460 --> 00:29:01,149
match something we know about if it does

00:28:58,690 --> 00:29:06,840
we're gonna we're going to mess with Arg

00:29:01,149 --> 00:29:09,730
V Sub Zero and that happens down here

00:29:06,840 --> 00:29:12,850
the shell script stuff I was talking

00:29:09,730 --> 00:29:14,769
about is up in here there's actually

00:29:12,850 --> 00:29:18,519
code that looks at the first character

00:29:14,769 --> 00:29:20,769
of the file if it's a if it's if it's

00:29:18,519 --> 00:29:22,690
going to execute a shell script we have

00:29:20,769 --> 00:29:26,019
to behave differently than if you're

00:29:22,690 --> 00:29:28,269
executing a binary we save off the Arg V

00:29:26,019 --> 00:29:33,789
sub 0 or we exit and we don't know what

00:29:28,269 --> 00:29:36,210
this is is that ledge can you read not

00:29:33,789 --> 00:29:36,210
even a little

00:29:48,010 --> 00:29:51,150
are you think 14

00:29:52,610 --> 00:30:02,679
yeah ah all right I like to show code

00:29:58,549 --> 00:30:02,679
because code is easier to understand

00:30:03,190 --> 00:30:10,460
this code all it does is take the

00:30:08,360 --> 00:30:14,059
execution string that the kernel is

00:30:10,460 --> 00:30:16,010
about to fire off make it longer move

00:30:14,059 --> 00:30:18,710
the code that move the actual execution

00:30:16,010 --> 00:30:21,500
string down and put in your emulator

00:30:18,710 --> 00:30:23,870
into the execution string that's its

00:30:21,500 --> 00:30:31,210
entire job and this is the code that

00:30:23,870 --> 00:30:32,960
does it let's do this

00:30:31,210 --> 00:30:35,870
let's see if I can do this without

00:30:32,960 --> 00:30:39,559
typing my root password for everyone to

00:30:35,870 --> 00:30:48,440
see super secret okay

00:30:39,559 --> 00:30:56,889
so right now I have that so I will not

00:30:48,440 --> 00:30:56,889
do it the baptiste way so we do this

00:31:27,740 --> 00:31:32,360
so now all I've done is I've mounted a

00:31:30,110 --> 00:31:36,740
dev tree I've mounted the port's tree in

00:31:32,360 --> 00:31:44,380
I'm just going to route in so here on my

00:31:36,740 --> 00:31:44,380
laptop I'm now in an arm box

00:31:52,410 --> 00:31:55,820
we really need to change them

00:31:59,890 --> 00:32:05,620
because I'm lazy let's see if we can get

00:32:04,179 --> 00:32:07,750
some let's see if we can get some messy

00:32:05,620 --> 00:32:14,160
ioctl information I know I'm still

00:32:07,750 --> 00:32:20,200
building 137 good god what's that

00:32:14,160 --> 00:32:23,340
outdated I'm old it's bad now what is

00:32:20,200 --> 00:32:23,340
this thing doing behind the scenes

00:32:33,549 --> 00:32:50,390
yes would've been that was good oh I'm

00:32:42,020 --> 00:32:55,450
sure you guys don't notice the QEMU is

00:32:50,390 --> 00:32:58,490
not running oh there it is oh it's gone

00:32:55,450 --> 00:33:03,380
because I'm using an AMD 64 tool chain

00:32:58,490 --> 00:33:09,140
and the qemu is firing off to run shell

00:33:03,380 --> 00:33:16,460
scripts configure anything else what

00:33:09,140 --> 00:33:26,140
else would pkg be doing yeah so things

00:33:16,460 --> 00:33:26,140
are happening oh Jesus yeah see

00:33:40,500 --> 00:33:47,730
so I so we've been we've been kind of

00:33:44,130 --> 00:33:53,480
considering some way of putting Perl and

00:33:47,730 --> 00:33:59,669
Python in here to do the right thing

00:33:53,480 --> 00:34:04,140
well let's say right now so these are

00:33:59,669 --> 00:34:05,960
some variables I learned about did you

00:34:04,140 --> 00:34:08,429
know you can do that

00:34:05,960 --> 00:34:12,659
of course you did you're the one who

00:34:08,429 --> 00:34:16,619
told me I think I think did you

00:34:12,659 --> 00:34:20,070
was it Warner so food your ear with the

00:34:16,619 --> 00:34:23,700
dash X does this to the make comp in the

00:34:20,070 --> 00:34:26,460
jail and this is saying that when

00:34:23,700 --> 00:34:31,080
somebody needs a compiler use this one

00:34:26,460 --> 00:34:36,530
it's overriding user bin CC because if

00:34:31,080 --> 00:34:36,530
we look at verses

00:34:41,349 --> 00:34:47,109
for the back audience so in this this is

00:34:44,319 --> 00:34:49,029
what I was talking about user bin CC is

00:34:47,109 --> 00:34:51,549
still there it's ready to be used its

00:34:49,029 --> 00:34:54,369
clang but it's going to be fully

00:34:51,549 --> 00:34:56,859
emulated it's going to be very slow what

00:34:54,369 --> 00:35:02,410
we have now in the base system is a new

00:34:56,859 --> 00:35:04,660
target called if you make native X build

00:35:02,410 --> 00:35:06,670
with the correct target target arch

00:35:04,660 --> 00:35:09,400
you'll actually get a compiler tool

00:35:06,670 --> 00:35:12,339
chain that you can move into the jail

00:35:09,400 --> 00:35:15,150
and it'll it'll do the right thing and

00:35:12,339 --> 00:35:22,359
we can use this to speed up builds a lot

00:35:15,150 --> 00:35:24,249
along with flex and said all of these

00:35:22,359 --> 00:35:26,319
all of these are common tool chain

00:35:24,249 --> 00:35:28,479
components they're gonna be run over and

00:35:26,319 --> 00:35:31,719
over and over again so we went from

00:35:28,479 --> 00:35:34,329
three weeks down to one week for a full

00:35:31,719 --> 00:35:41,920
build and that was primarily because of

00:35:34,329 --> 00:35:44,859
this questions what would you like to

00:35:41,920 --> 00:35:53,249
see you're having me here or you can

00:35:44,859 --> 00:35:58,589
leave no LibreOffice get out of here

00:35:53,249 --> 00:35:58,589
mad man someday someday

00:36:00,479 --> 00:36:30,539
so the yes no well some some of it was a

00:36:25,749 --> 00:36:30,539
lot of emulation for us is

00:36:30,570 --> 00:36:39,360
shrinking values trunk we have to

00:36:32,820 --> 00:36:41,640
truncate values reverse values so it's

00:36:39,360 --> 00:36:45,120
very similar to I 3ds because it's its

00:36:41,640 --> 00:36:49,410
arm 32 it's very similar but in some

00:36:45,120 --> 00:36:56,250
cases there is special code in QEMU to

00:36:49,410 --> 00:37:00,420
handle changing hwf is mem from so it

00:36:56,250 --> 00:37:03,060
doesn't get reported to in here as 128

00:37:00,420 --> 00:37:06,540
gig it gets reported as maximum so we

00:37:03,060 --> 00:37:14,850
cheat so some of those are true but yeah

00:37:06,540 --> 00:37:15,630
some some are just copy-paste know it

00:37:14,850 --> 00:37:17,460
stand alone

00:37:15,630 --> 00:37:21,290
so it will break when we change things

00:37:17,460 --> 00:37:21,290
in the kernel it'll be great

00:37:26,450 --> 00:37:32,190
what does a stand alone port that I

00:37:29,580 --> 00:37:36,470
would not build very often the small one

00:37:32,190 --> 00:37:36,470
you think

00:37:47,050 --> 00:37:53,440
I'm trying to think if I actually oh god

00:37:50,060 --> 00:37:53,440
I've actually built this for some reason

00:37:55,630 --> 00:38:07,280
so if I RM user ports dist bottles yeah

00:38:04,280 --> 00:38:09,410
I do know I want to delete the dis one I

00:38:07,280 --> 00:38:12,290
absolutely do

00:38:09,410 --> 00:38:21,410
yeah I wanna I wanna I want to show what

00:38:12,290 --> 00:38:23,330
I mean thank you see I'm just a Newports

00:38:21,410 --> 00:38:34,460
committer he's my mentor so he have to

00:38:23,330 --> 00:38:38,600
tell me see why why well I already I

00:38:34,460 --> 00:38:40,070
already removed the dist file yeah okay

00:38:38,600 --> 00:38:42,910
let's see if this let's see if this does

00:38:40,070 --> 00:38:42,910
what I want it to do

00:38:43,210 --> 00:38:57,800
where's my internet man no that's fine

00:38:50,840 --> 00:39:05,480
it's fine what's that in here I already

00:38:57,800 --> 00:39:07,820
put it in there doughnut I'm trying to

00:39:05,480 --> 00:39:10,540
remember how old this is all right fine

00:39:07,820 --> 00:39:10,540
fine fine

00:39:22,120 --> 00:39:30,560
I'm gonna be I'm gonna be difficult for

00:39:26,000 --> 00:39:33,380
the sake of being difficult oh there's

00:39:30,560 --> 00:39:58,100
not two ends in it you know I'd be done

00:39:33,380 --> 00:40:02,650
already if I just use jail - yes I don't

00:39:58,100 --> 00:40:05,420
know ah there we go

00:40:02,650 --> 00:40:07,790
that's what I wanted to see these are

00:40:05,420 --> 00:40:09,290
the sharp edges so good we don't

00:40:07,790 --> 00:40:09,890
actually I don't actually have to fail

00:40:09,290 --> 00:40:15,200
anymore

00:40:09,890 --> 00:40:17,990
so my next goal is to turn this error

00:40:15,200 --> 00:40:19,790
into something that is useful and you

00:40:17,990 --> 00:40:21,650
can go see what needs to be implemented

00:40:19,790 --> 00:40:23,840
and I can generate I can generate an

00:40:21,650 --> 00:40:27,770
error so I mean these these don't mean

00:40:23,840 --> 00:40:30,530
anything right yes so this these are all

00:40:27,770 --> 00:40:33,170
this is a all I did was in the jail - if

00:40:30,530 --> 00:40:34,940
config and all of this stuff comes out

00:40:33,170 --> 00:40:36,290
so these are these are the errors these

00:40:34,940 --> 00:40:40,040
are a lot of the errors that are causing

00:40:36,290 --> 00:40:42,560
build problems this is this is an

00:40:40,040 --> 00:40:45,200
ongoing maintenance task so when you add

00:40:42,560 --> 00:40:49,180
new syscalls and new I octaves remember

00:40:45,200 --> 00:40:52,640
you're causing me more work anyway

00:40:49,180 --> 00:40:56,630
any question anything you guys would

00:40:52,640 --> 00:41:00,530
like to see do you want to leave because

00:40:56,630 --> 00:41:02,130
we can go No thank you everyone

00:41:00,530 --> 00:41:09,439
that's good

00:41:02,130 --> 00:41:09,439

YouTube URL: https://www.youtube.com/watch?v=ruNdupZOXks


