Title: Cross Building the FreeBSD ports tree - Baptiste Daroussin
Publication date: 2019-10-14
Playlist: EuroBSDcon 2014, Bulgaria
Description: 
	Abstract:

Building packages is a resource consuming task and can take very long on embedded devices or low power architectures. Being able to use the power of amd64 servers to build packages for arm or mips allows to make this task faster and less tedious.

This talk will cover the following topics:

- State of art to build arm/mips packages on FreeBSD from a powerful amd64 box
- How to create a cross building environement
- How the ports tree does automatically handle cross building
- How dependencies are handled when cross building packages
- How to workaround non cross buildable or broken build system like perl and python
- Cross build monster ports: chromium, libreoffice, openjdk and firefox
- What are the current limitation
- Future directions for the cross building framework in the ports tree

Speaker biography:

Baptiste Daroussin is a unix system engineer, FreeBSD committer for both base and ports, a member of the port management team.
He is responsible for a couple of the important changes that happened in the ports over the past few years: New options framework, pkgng, Stage support and more.
Captions: 
	00:00:00,000 --> 00:00:09,380
Naing every one of the night one wasn't

00:00:03,750 --> 00:00:12,440
too hard too hard too short whatever and

00:00:09,380 --> 00:00:16,260
when I introduced you to but it's dasa

00:00:12,440 --> 00:00:19,560
core team member FreeBSD Authority aarÃ³n

00:00:16,260 --> 00:00:29,660
pkg speaking about crows building the

00:00:19,560 --> 00:00:35,820
FreeBSD ports tree right into attending

00:00:29,660 --> 00:00:37,980
so we tried recently to see how much

00:00:35,820 --> 00:00:40,590
complicated it would be to get the

00:00:37,980 --> 00:00:42,210
poetry cross buildable a lot of people

00:00:40,590 --> 00:00:44,399
wants to be able to crawl build thing

00:00:42,210 --> 00:00:47,129
we're talking about that for I think in

00:00:44,399 --> 00:00:49,469
the beginning of the poetry and we're

00:00:47,129 --> 00:00:53,610
starting to get something that is able

00:00:49,469 --> 00:00:57,719
to cross build so the goal for cross

00:00:53,610 --> 00:00:59,879
building is to be able to well build

00:00:57,719 --> 00:01:02,280
first packages for new architectures or

00:00:59,879 --> 00:01:06,750
for not fully supported architectures

00:01:02,280 --> 00:01:09,390
yes - and if we can just start to build

00:01:06,750 --> 00:01:12,420
things patch things to say ok FreeBSD

00:01:09,390 --> 00:01:15,689
knows about arm v6 FreeBSD known about

00:01:12,420 --> 00:01:19,799
maybe 64 whatever we can have a start of

00:01:15,689 --> 00:01:22,049
packages and we need to build them the

00:01:19,799 --> 00:01:25,229
embedded platforms is getting more and

00:01:22,049 --> 00:01:28,619
more interests and most of them are not

00:01:25,229 --> 00:01:30,299
yet very very powerful so you might want

00:01:28,619 --> 00:01:34,710
to be able to build your own packages on

00:01:30,299 --> 00:01:37,079
a fast machine on an AMD 64 box with a

00:01:34,710 --> 00:01:39,360
lot of course RAM whatever instead

00:01:37,079 --> 00:01:44,820
building I don't know leave office on

00:01:39,360 --> 00:01:47,880
your Raspberry Pi it's also very useful

00:01:44,820 --> 00:01:51,869
because a lot of package are not really

00:01:47,880 --> 00:01:54,479
a lot of different package or needs a

00:01:51,869 --> 00:01:57,119
bootstrap to be able to so to be able to

00:01:54,479 --> 00:01:58,979
to compare the first time so you get a

00:01:57,119 --> 00:02:01,140
chicken-egg problem where you cannot

00:01:58,979 --> 00:02:06,060
bootstrap if a bootstrap doesn't exist

00:02:01,140 --> 00:02:07,649
yet like Java Haskell whatever so you

00:02:06,060 --> 00:02:09,319
need to be able to cross bail from

00:02:07,649 --> 00:02:12,709
somewhere to be able to create the first

00:02:09,319 --> 00:02:14,810
bootstrap and you don't want to

00:02:12,709 --> 00:02:20,209
doing in a complicated in the corrugated

00:02:14,810 --> 00:02:23,329
way and the last thing is if you're able

00:02:20,209 --> 00:02:25,640
to cross bill then you also able to

00:02:23,329 --> 00:02:28,459
cross bill for other operating systems

00:02:25,640 --> 00:02:31,310
and you might want that if you want to

00:02:28,459 --> 00:02:33,680
be able to cross built for example

00:02:31,310 --> 00:02:35,930
things for the Linux emulation instead

00:02:33,680 --> 00:02:40,129
of relying on packages provided by

00:02:35,930 --> 00:02:41,870
another project like $10 shoes whatever

00:02:40,129 --> 00:02:45,019
you can decide to build your own

00:02:41,870 --> 00:02:47,680
packages for that older operating system

00:02:45,019 --> 00:02:49,220
so you would still use your

00:02:47,680 --> 00:02:51,260
infrastructure to build your own

00:02:49,220 --> 00:02:53,299
packages but users target something else

00:02:51,260 --> 00:02:55,939
so it's really important to be able to

00:02:53,299 --> 00:02:58,730
cross beyond and it allows as well to

00:02:55,939 --> 00:03:03,319
make sure that the framework is clean

00:02:58,730 --> 00:03:05,090
enough to pass the right variables to

00:03:03,319 --> 00:03:07,370
the different build system make sure

00:03:05,090 --> 00:03:09,709
that things are respecting see flags are

00:03:07,370 --> 00:03:11,599
respecting the compiler you're passing

00:03:09,709 --> 00:03:13,430
and not trying too hard cut some in a

00:03:11,599 --> 00:03:18,169
way or another the path to its own

00:03:13,430 --> 00:03:22,699
compiler so crowd building is something

00:03:18,169 --> 00:03:24,590
we really want as make sure as the

00:03:22,699 --> 00:03:26,359
crutch insurance if we're able to cross

00:03:24,590 --> 00:03:31,840
build a and our package system is quite

00:03:26,359 --> 00:03:35,569
sane but it's not something you want for

00:03:31,840 --> 00:03:37,280
production without testing you can cross

00:03:35,569 --> 00:03:39,560
build things but you need to make sure

00:03:37,280 --> 00:03:41,030
that you can run them as well if you

00:03:39,560 --> 00:03:47,629
just cross Belladonna mean that you do

00:03:41,030 --> 00:03:49,370
support them so we went very different

00:03:47,629 --> 00:03:52,579
way to be able to cross build the first

00:03:49,370 --> 00:03:55,430
way was we wanted to instead of cross

00:03:52,579 --> 00:03:59,750
building we decided that maybe we could

00:03:55,430 --> 00:04:02,989
emulate things so we use the QM you use

00:03:59,750 --> 00:04:06,859
a LAN emulation thing to say okay here

00:04:02,989 --> 00:04:10,370
in this Jail I'll put only arm on v6

00:04:06,859 --> 00:04:12,139
binaries and we will run them through

00:04:10,370 --> 00:04:14,750
the CMU emulator

00:04:12,139 --> 00:04:16,579
not as a full emulation but as a user

00:04:14,750 --> 00:04:20,209
emulation meaning each time I found a

00:04:16,579 --> 00:04:22,099
binary which is our basic then I will

00:04:20,209 --> 00:04:23,060
run it through the emulation if it's an

00:04:22,099 --> 00:04:23,880
MD 64

00:04:23,060 --> 00:04:26,130
we will

00:04:23,880 --> 00:04:28,800
use it so that was not cross building

00:04:26,130 --> 00:04:32,820
but the good point of this this one is

00:04:28,800 --> 00:04:36,060
we are building packaging in the regular

00:04:32,820 --> 00:04:37,770
way so we are making sure that if you

00:04:36,060 --> 00:04:41,520
are trying to build something on the

00:04:37,770 --> 00:04:43,410
Raspberry Pi then we will test something

00:04:41,520 --> 00:04:44,700
which it goes which was the same way

00:04:43,410 --> 00:04:46,770
that what will you will do

00:04:44,700 --> 00:04:49,290
Shanon Bruno has done a lot of work in

00:04:46,770 --> 00:04:49,860
that area and he talked about it

00:04:49,290 --> 00:04:52,770
yesterday

00:04:49,860 --> 00:04:56,910
the result is with that way we are able

00:04:52,770 --> 00:05:01,290
to build almost all the bots tree on arm

00:04:56,910 --> 00:05:04,410
v6 and the only one that fails or there

00:05:01,290 --> 00:05:07,980
are two major one but most of them add

00:05:04,410 --> 00:05:10,200
you to not having bootstrap like OpenJDK

00:05:07,980 --> 00:05:12,570
or because it's something that is not

00:05:10,200 --> 00:05:14,190
supposed to work on our v6 so we got

00:05:12,570 --> 00:05:16,140
pretty good result with that in two

00:05:14,190 --> 00:05:21,450
years there has been a lot of a lot of

00:05:16,140 --> 00:05:27,870
improvements here the problem with this

00:05:21,450 --> 00:05:30,840
approach is can you user emulation is a

00:05:27,870 --> 00:05:35,670
bit fragile basically you have a mapping

00:05:30,840 --> 00:05:38,670
between Siskel's from forearm v6 to the

00:05:35,670 --> 00:05:40,770
version for AMD 64 and the way the other

00:05:38,670 --> 00:05:44,190
way around so you have to implement

00:05:40,770 --> 00:05:46,500
everything into a huge switch case

00:05:44,190 --> 00:05:49,440
saying okay the binary is trying to do

00:05:46,500 --> 00:05:52,140
that how I can translate that to AMD 64

00:05:49,440 --> 00:05:56,010
and turns it back and the other thing is

00:05:52,140 --> 00:05:59,130
it's slow so it's 3 weeks to be able to

00:05:56,010 --> 00:06:01,040
build all the poor all the other package

00:05:59,130 --> 00:06:04,740
while on the same machine you have

00:06:01,040 --> 00:06:08,550
something like 15 15 hours to be able to

00:06:04,740 --> 00:06:11,130
build them natively not something so

00:06:08,550 --> 00:06:15,630
we'd get another way which was enabled

00:06:11,130 --> 00:06:17,790
way we decided to use the user emulation

00:06:15,630 --> 00:06:19,530
for everything that we will build and to

00:06:17,790 --> 00:06:23,640
use a cross tool chain to be able to use

00:06:19,530 --> 00:06:31,370
them to natively run binaries that are

00:06:23,640 --> 00:06:33,780
often called like CC 3 LDS extra so I

00:06:31,370 --> 00:06:35,760
won't go further on this because this is

00:06:33,780 --> 00:06:37,409
not compilation this is just the

00:06:35,760 --> 00:06:40,169
background of where we were

00:06:37,409 --> 00:06:43,619
from and we so we modified we had it a

00:06:40,169 --> 00:06:46,169
new kernel module which is able to say

00:06:43,619 --> 00:06:48,989
that oh this binary is actually an armed

00:06:46,169 --> 00:06:53,879
binary so I prepare the emulation on it

00:06:48,989 --> 00:06:56,639
and run it so it was okay but that

00:06:53,879 --> 00:07:00,300
doesn't that improved a lot of speed but

00:06:56,639 --> 00:07:02,999
as tears flow it's a week now to get so

00:07:00,300 --> 00:07:05,249
we get from three week to one week to be

00:07:02,999 --> 00:07:09,479
able to build the packages so we still

00:07:05,249 --> 00:07:13,019
on something faster so the true way is

00:07:09,479 --> 00:07:16,379
to go to the real cross compilation it's

00:07:13,019 --> 00:07:18,929
faster it's simpler because basically if

00:07:16,379 --> 00:07:21,419
your framework is good enough it's just

00:07:18,929 --> 00:07:23,459
passing a new compiler and a couple of

00:07:21,419 --> 00:07:26,719
environment variables so that it knows

00:07:23,459 --> 00:07:29,599
were the armed basics libraries are and

00:07:26,719 --> 00:07:33,059
everything is run with native speed so

00:07:29,599 --> 00:07:34,709
it's cleaner and it's easier to use for

00:07:33,059 --> 00:07:39,479
a regular user as you don't have to know

00:07:34,709 --> 00:07:42,509
about then been missing which or you

00:07:39,479 --> 00:07:45,449
don't have to you to know about qmu and

00:07:42,509 --> 00:07:52,110
you don't have to prepare special number

00:07:45,449 --> 00:07:55,019
environment so the overhead of this

00:07:52,110 --> 00:07:56,999
approach is on the poetry if you want to

00:07:55,019 --> 00:07:59,309
cross build packages you have to cross

00:07:56,999 --> 00:08:01,800
you have to cross build to build them

00:07:59,309 --> 00:08:04,409
most of them twice you have to build

00:08:01,800 --> 00:08:08,149
them all the bill dependency the Lib

00:08:04,409 --> 00:08:10,979
dependency in a native version and in

00:08:08,149 --> 00:08:14,129
target version why because if you think

00:08:10,979 --> 00:08:16,469
about the XSLT for example it has to

00:08:14,129 --> 00:08:17,969
sing it has a library so you want the

00:08:16,469 --> 00:08:21,409
target version so that you can link to

00:08:17,969 --> 00:08:24,539
it properly that if something is running

00:08:21,409 --> 00:08:26,759
XSLT prog then you need the native

00:08:24,539 --> 00:08:29,579
version so we had to figure out a way to

00:08:26,759 --> 00:08:32,699
install the same package twice with two

00:08:29,579 --> 00:08:39,539
different binary format in that it does

00:08:32,699 --> 00:08:43,559
not conflict so first we had to have a

00:08:39,539 --> 00:08:47,220
look at how building system works to

00:08:43,559 --> 00:08:50,490
make sure that we can plug easily in it

00:08:47,220 --> 00:08:52,980
to make them do something nice

00:08:50,490 --> 00:08:55,830
with cross building so first you have

00:08:52,980 --> 00:08:58,460
Auto tools or Auto to see their usual

00:08:55,830 --> 00:09:01,610
configure mag make install so

00:08:58,460 --> 00:09:04,770
surprisingly it really works out of box

00:09:01,610 --> 00:09:06,300
most of the time you just take it pass

00:09:04,770 --> 00:09:10,050
it through the right variables and you

00:09:06,300 --> 00:09:12,720
get good cross built binaries except

00:09:10,050 --> 00:09:16,740
that no one knows how to use them

00:09:12,720 --> 00:09:18,450
correctly and you often end up with you

00:09:16,740 --> 00:09:21,210
often end up with people not

00:09:18,450 --> 00:09:24,390
understanding how cross building should

00:09:21,210 --> 00:09:27,030
be done in Auto tools building temporary

00:09:24,390 --> 00:09:29,100
binaries in the target format instead of

00:09:27,030 --> 00:09:31,890
building them in the natty format and

00:09:29,100 --> 00:09:34,100
then you try to run them - I don't know

00:09:31,890 --> 00:09:38,100
convert this file to something else or

00:09:34,100 --> 00:09:43,260
build this into this other object and it

00:09:38,100 --> 00:09:46,710
just fails so rarity is still most of

00:09:43,260 --> 00:09:51,900
the usage you can find our working out

00:09:46,710 --> 00:09:52,560
of box Simic is basically one of the

00:09:51,900 --> 00:09:56,640
good player

00:09:52,560 --> 00:09:59,970
I haven't had major problems with it

00:09:56,640 --> 00:10:03,330
except people trying to be smarter than

00:09:59,970 --> 00:10:05,700
what Simic proposed and trying to extend

00:10:03,330 --> 00:10:09,500
this their own way instead of getting

00:10:05,700 --> 00:10:09,500
through the seaming the documentation

00:10:10,970 --> 00:10:19,170
somehow the BSD magnifiers are mostly

00:10:14,600 --> 00:10:21,870
properly done for cross compilation it's

00:10:19,170 --> 00:10:26,040
more a matter of how people do use them

00:10:21,870 --> 00:10:26,670
I mean using outside of users or user

00:10:26,040 --> 00:10:29,040
ports

00:10:26,670 --> 00:10:31,290
I mean someone figure out that it's

00:10:29,040 --> 00:10:34,590
quite nice and easy to use to build my

00:10:31,290 --> 00:10:36,720
own thing so I will use them and we got

00:10:34,590 --> 00:10:38,640
the same problem like we see maker auto

00:10:36,720 --> 00:10:41,190
tools that people don't understand that

00:10:38,640 --> 00:10:43,680
cross it should be cross buildable or

00:10:41,190 --> 00:10:45,840
not and sometime we have targets that

00:10:43,680 --> 00:10:51,180
generates a binary and use that binary

00:10:45,840 --> 00:10:55,770
directly instead of the negative one so

00:10:51,180 --> 00:10:59,370
now the bad players so please never ever

00:10:55,770 --> 00:11:03,000
use this one this is probably the worst

00:10:59,370 --> 00:11:10,110
build system I've seen it has

00:11:03,000 --> 00:11:13,020
no it doesn't define a framework a real

00:11:10,110 --> 00:11:14,670
firm much to do things so it doesn't

00:11:13,020 --> 00:11:17,970
know about the basics that anyone is

00:11:14,670 --> 00:11:21,060
expecting to it depend on how the the

00:11:17,970 --> 00:11:22,800
people using it are implementing it so

00:11:21,060 --> 00:11:25,080
basically you can have scorn that knows

00:11:22,800 --> 00:11:27,390
about that you're not you can have

00:11:25,080 --> 00:11:28,980
scones that knows about I can pass a

00:11:27,390 --> 00:11:31,770
different compiler than one you do

00:11:28,980 --> 00:11:35,700
expect or not respecting see flags or

00:11:31,770 --> 00:11:41,640
not whatever so Scots is please don't do

00:11:35,700 --> 00:11:43,920
that what building is simple you know

00:11:41,640 --> 00:11:47,130
it's just like the C file I think this

00:11:43,920 --> 00:11:52,320
compiler and I generates an object out

00:11:47,130 --> 00:11:55,470
of it yes it's simple real world

00:11:52,320 --> 00:11:59,010
building is not that simple if things

00:11:55,470 --> 00:12:02,340
like Auto tulsi make our BSD make file

00:11:59,010 --> 00:12:05,970
whatever are that complicated it's on

00:12:02,340 --> 00:12:08,490
purpose it's because there is a lot of

00:12:05,970 --> 00:12:10,800
use case you don't know about so writing

00:12:08,490 --> 00:12:13,490
by hand your own make file except if you

00:12:10,800 --> 00:12:15,930
have really good experience with

00:12:13,490 --> 00:12:17,820
building things on different operating

00:12:15,930 --> 00:12:21,450
system different architecture different

00:12:17,820 --> 00:12:23,570
versions different trying to cross bail

00:12:21,450 --> 00:12:26,670
or not if you don't have this experience

00:12:23,570 --> 00:12:29,010
please don't try to be more clever than

00:12:26,670 --> 00:12:31,500
people that spending a lot of time on

00:12:29,010 --> 00:12:33,690
this use something that already exists

00:12:31,500 --> 00:12:41,120
and is able to do the good stuff for you

00:12:33,690 --> 00:12:44,370
except scoffs yeah well it's kind of

00:12:41,120 --> 00:12:45,750
free homemade build system but it's not

00:12:44,370 --> 00:12:48,920
even going through make or whatever

00:12:45,750 --> 00:12:52,110
please stop with the shell scripts that

00:12:48,920 --> 00:12:53,550
tries to be clever as well there's a

00:12:52,110 --> 00:12:56,550
number of things or you have

00:12:53,550 --> 00:12:58,980
oh please build me and it doesn't magic

00:12:56,550 --> 00:12:59,970
you cannot control what is going on

00:12:58,980 --> 00:13:03,750
inside

00:12:59,970 --> 00:13:07,290
so although those in your in in the same

00:13:03,750 --> 00:13:12,860
environment so the main complication we

00:13:07,290 --> 00:13:16,500
had now when we try to cross build ease

00:13:12,860 --> 00:13:21,570
so pearl paris-nice

00:13:16,500 --> 00:13:23,580
it's it's crossbell friendly if it it's

00:13:21,570 --> 00:13:26,700
called blood family if you have a look

00:13:23,580 --> 00:13:30,990
at the documentation but if you try to

00:13:26,700 --> 00:13:36,120
do it in real life it's a bit different

00:13:30,990 --> 00:13:37,620
so it requires when you do oh I will

00:13:36,120 --> 00:13:40,080
cross bill this for this target it

00:13:37,620 --> 00:13:43,800
requires you to get actually the target

00:13:40,080 --> 00:13:49,950
box somewhere it asks you for a sec

00:13:43,800 --> 00:13:52,770
chooser a password or a key and it goes

00:13:49,950 --> 00:13:54,270
it connects through this box executing

00:13:52,770 --> 00:13:57,300
over there bring them back into your

00:13:54,270 --> 00:13:58,830
system and build this is really not what

00:13:57,300 --> 00:14:04,830
you want when you want to cross build

00:13:58,830 --> 00:14:06,690
things the other problem is pison so

00:14:04,830 --> 00:14:09,450
python is cross well for me it's using

00:14:06,690 --> 00:14:12,960
auto tools it's supposed to do good

00:14:09,450 --> 00:14:15,570
things whatever there's one thing to

00:14:12,960 --> 00:14:19,980
forgot about well they do be of the

00:14:15,570 --> 00:14:22,470
Python binary and then they use it well

00:14:19,980 --> 00:14:25,770
if you cross build you get an arm Python

00:14:22,470 --> 00:14:29,190
binary on an AMD 64 box then you try to

00:14:25,770 --> 00:14:31,350
run it and you just say what is this do

00:14:29,190 --> 00:14:36,180
something with that there are patches

00:14:31,350 --> 00:14:39,300
for very very long there are patches for

00:14:36,180 --> 00:14:43,440
very very long in the bison bug tracker

00:14:39,300 --> 00:14:45,900
and its release or almost each release

00:14:43,440 --> 00:14:49,020
they say ok we fix that and then you

00:14:45,900 --> 00:14:54,090
discover you fall apart of the patch and

00:14:49,020 --> 00:14:55,590
I think I think now oh I think now

00:14:54,090 --> 00:14:58,740
invite some three four it's fixed but I

00:14:55,590 --> 00:15:01,650
haven't checked yet mmm because in

00:14:58,740 --> 00:15:04,020
FreeBSD we do like a lot to complicate

00:15:01,650 --> 00:15:06,690
our life because other are not

00:15:04,020 --> 00:15:10,590
complicating enough for us so we do that

00:15:06,690 --> 00:15:13,980
ourselves and I don't know how we ended

00:15:10,590 --> 00:15:18,150
up with the Bison port and the way we do

00:15:13,980 --> 00:15:21,210
build that but it was everything but how

00:15:18,150 --> 00:15:24,720
you should build bison thank the Python

00:15:21,210 --> 00:15:28,230
to him now it's fixed and we have we're

00:15:24,720 --> 00:15:29,820
using the regular build from Tyson so I

00:15:28,230 --> 00:15:31,590
can apply

00:15:29,820 --> 00:15:33,540
the regular patch is available to make

00:15:31,590 --> 00:15:41,100
Paisano's bill and I can crawl tell

00:15:33,540 --> 00:15:44,030
Tyson properly open GDK well this one is

00:15:41,100 --> 00:15:47,910
surprisingly crossbell from me for real

00:15:44,030 --> 00:15:51,660
it's really built properly on a cross

00:15:47,910 --> 00:15:54,750
build and it works well it generates

00:15:51,660 --> 00:15:57,300
binary I haven't tried to run it but I

00:15:54,750 --> 00:15:59,730
have a Java binary in the end so that

00:15:57,300 --> 00:16:01,470
means with the crowd built framework I

00:15:59,730 --> 00:16:04,110
am able to generate the bootstrap

00:16:01,470 --> 00:16:08,000
because they decided somehow in the

00:16:04,110 --> 00:16:10,950
middle of the development of gd6 that

00:16:08,000 --> 00:16:13,950
being able to build Java without Java is

00:16:10,950 --> 00:16:16,440
something crazy so now they enforce Java

00:16:13,950 --> 00:16:18,780
to build Java so you need to build the

00:16:16,440 --> 00:16:21,450
first bootstrap and now we can do that

00:16:18,780 --> 00:16:26,250
because we can close build for our v6

00:16:21,450 --> 00:16:29,460
for sparc64 whatever except that to get

00:16:26,250 --> 00:16:32,130
into to get into open JDK you need both

00:16:29,460 --> 00:16:33,450
of them and without both of them you

00:16:32,130 --> 00:16:37,230
have pretty much nothing in the past

00:16:33,450 --> 00:16:40,890
three and so we need to figure out a way

00:16:37,230 --> 00:16:43,890
for both of them to fix now the tool

00:16:40,890 --> 00:16:45,690
chains well I said to change because we

00:16:43,890 --> 00:16:47,790
have different tools and in the previous

00:16:45,690 --> 00:16:53,070
project we have LLVM clang and we have

00:16:47,790 --> 00:16:56,430
the very old GCC so first clang clang is

00:16:53,070 --> 00:16:59,190
wonderful force it's one of the Oh

00:16:56,430 --> 00:17:01,320
it's a compiler which is crossbell

00:16:59,190 --> 00:17:03,150
friendly you know it's multi-target by

00:17:01,320 --> 00:17:04,800
default so you build it and then you

00:17:03,150 --> 00:17:07,310
just have to specify your target and it

00:17:04,800 --> 00:17:10,200
does a right thing to generate you and

00:17:07,310 --> 00:17:13,020
they're the right binaries and call the

00:17:10,200 --> 00:17:15,390
right beauty so it's nice you don't have

00:17:13,020 --> 00:17:18,540
to you don't need to have ten different

00:17:15,390 --> 00:17:21,030
copies of playing one for targeting arm

00:17:18,540 --> 00:17:28,440
one from targeting mips whatever so

00:17:21,030 --> 00:17:32,180
clang is nice the problem is while clang

00:17:28,440 --> 00:17:35,460
is working properly on Intel boxes and

00:17:32,180 --> 00:17:39,770
since forbids it and we have it working

00:17:35,460 --> 00:17:39,770
properly on our exact big-endian

00:17:40,470 --> 00:17:45,760
other targets are not working with clang

00:17:43,330 --> 00:17:47,650
so one of the point of the Cross

00:17:45,760 --> 00:17:53,410
building is for example to be able to

00:17:47,650 --> 00:17:58,870
target MIPS which is usually very small

00:17:53,410 --> 00:18:00,490
CPU loop or whatever so well kind is

00:17:58,870 --> 00:18:02,730
nice allows us to do a lot of thing

00:18:00,490 --> 00:18:05,590
except that our targets are not

00:18:02,730 --> 00:18:08,140
supported right now by clang well maybe

00:18:05,590 --> 00:18:11,170
should be supported quite soon I heard

00:18:08,140 --> 00:18:15,070
poor PC is quite close to get supported

00:18:11,170 --> 00:18:17,410
as well and someone did the work for

00:18:15,070 --> 00:18:19,740
sparc64 so you should have a sparsity

00:18:17,410 --> 00:18:25,090
for back in soon

00:18:19,740 --> 00:18:26,920
GCC well first we have GCC for two if

00:18:25,090 --> 00:18:29,830
you try to do anything modern with GCC

00:18:26,920 --> 00:18:33,670
for two you won't have much in

00:18:29,830 --> 00:18:35,830
particular in C++ so if we want to do

00:18:33,670 --> 00:18:38,110
cross bolding we cannot rely on GCC for

00:18:35,830 --> 00:18:45,700
two so we need to go to a newer version

00:18:38,110 --> 00:18:48,160
of GCC and having crossbell friendly the

00:18:45,700 --> 00:18:49,150
second thing is as I said in freebies

00:18:48,160 --> 00:18:51,760
you would like to complicate our lives

00:18:49,150 --> 00:18:53,680
so I don't know in that case if new

00:18:51,760 --> 00:18:56,380
people were complicating our life or if

00:18:53,680 --> 00:19:00,040
we did or a mix of boss it's one being

00:18:56,380 --> 00:19:04,030
pissed off by the thing is we have a

00:19:00,040 --> 00:19:06,400
couple of patches that we need to have

00:19:04,030 --> 00:19:08,620
GCC knows about some of the targets we

00:19:06,400 --> 00:19:11,800
have for example we have patches to get

00:19:08,620 --> 00:19:14,100
armed binary it to get GCC creating

00:19:11,800 --> 00:19:17,380
freebies differently on binaries and

00:19:14,100 --> 00:19:20,290
those patches will never upstream so if

00:19:17,380 --> 00:19:23,430
you want to use a modern GCC with to

00:19:20,290 --> 00:19:26,530
generate arm target then you don't have

00:19:23,430 --> 00:19:30,640
you won't be able to to build our own

00:19:26,530 --> 00:19:33,400
packages so recently on drew the the

00:19:30,640 --> 00:19:34,690
work of patching GCC for eight so we

00:19:33,400 --> 00:19:36,400
need to do the same work to pull that

00:19:34,690 --> 00:19:39,010
into the five branch because I think

00:19:36,400 --> 00:19:41,050
it's the last open branch but we are

00:19:39,010 --> 00:19:43,570
slowly getting there the other thing is

00:19:41,050 --> 00:19:47,530
it's not just a matter of format we have

00:19:43,570 --> 00:19:51,070
a couple of extensions to be able to

00:19:47,530 --> 00:19:53,320
build the kernel with with GCC and those

00:19:51,070 --> 00:19:53,870
extension we have also to either to push

00:19:53,320 --> 00:19:56,210
them or

00:19:53,870 --> 00:19:59,630
to maintain something on top of the new

00:19:56,210 --> 00:20:01,700
GCC so to build packages I just need to

00:19:59,630 --> 00:20:04,850
make sure that this is he knows the

00:20:01,700 --> 00:20:06,170
format we knows and we want but if I

00:20:04,850 --> 00:20:08,210
really want to be able to cross build a

00:20:06,170 --> 00:20:10,309
wall system with an external chain then

00:20:08,210 --> 00:20:16,010
I need also to upstream more patches

00:20:10,309 --> 00:20:19,430
we've had it recently to GCC that will

00:20:16,010 --> 00:20:22,070
be a bit of work because GCC is a fast

00:20:19,430 --> 00:20:24,559
moving target and since clang is out

00:20:22,070 --> 00:20:27,620
it's getting faster and if you do

00:20:24,559 --> 00:20:31,160
something for DCC for eight you it's not

00:20:27,620 --> 00:20:32,660
that easy to port it to GCC five you

00:20:31,160 --> 00:20:34,550
might have to change a lot of things or

00:20:32,660 --> 00:20:38,240
not you don't know but still it's rather

00:20:34,550 --> 00:20:40,309
work and it's not really a cross bill

00:20:38,240 --> 00:20:42,910
friendly compiler well it knows how to

00:20:40,309 --> 00:20:45,050
cross build for sure hopefully otherwise

00:20:42,910 --> 00:20:47,690
there's a lot of things that won't work

00:20:45,050 --> 00:20:51,230
today's the thing is you will need to

00:20:47,690 --> 00:20:53,090
have a copy of GCC / targets you want to

00:20:51,230 --> 00:20:55,640
aim at you cannot have one single

00:20:53,090 --> 00:20:58,520
installation of GCC and say oh I will

00:20:55,640 --> 00:21:02,150
build this for arm I will build this

00:20:58,520 --> 00:21:07,760
from hips well you can but it's not

00:21:02,150 --> 00:21:12,080
working exactly as you expect and of

00:21:07,760 --> 00:21:14,360
course we have two two compilers the new

00:21:12,080 --> 00:21:16,570
one is trying to get as close as

00:21:14,360 --> 00:21:19,820
possible to GCC

00:21:16,570 --> 00:21:22,130
except sometimes and in particular and

00:21:19,820 --> 00:21:26,690
things that are interesting us in the

00:21:22,130 --> 00:21:28,490
case of cross building so you get to

00:21:26,690 --> 00:21:30,200
through all the documentation you can

00:21:28,490 --> 00:21:32,510
find on the internet on how to use the

00:21:30,200 --> 00:21:35,059
proper crossbow and thing like this

00:21:32,510 --> 00:21:36,620
without having to prepare yourself for

00:21:35,059 --> 00:21:39,559
special target for that and then you

00:21:36,620 --> 00:21:41,150
discover that how this almost works and

00:21:39,559 --> 00:21:43,520
I don't know why the wrong be new tips

00:21:41,150 --> 00:21:45,860
are being used whatever and you discover

00:21:43,520 --> 00:21:47,630
that you need changes so that means in

00:21:45,860 --> 00:21:50,600
the framework I need to first discover

00:21:47,630 --> 00:21:52,990
if you're trying to build with GCC or if

00:21:50,600 --> 00:21:55,700
you are trying to build with clang and

00:21:52,990 --> 00:21:58,340
pass the variables a bit differently

00:21:55,700 --> 00:22:03,040
depending on which is which of the

00:21:58,340 --> 00:22:08,260
compiler are you using binutils

00:22:03,040 --> 00:22:10,870
so in the base system we have delay

00:22:08,260 --> 00:22:16,390
gplv2 binutils plus a couple of patches

00:22:10,870 --> 00:22:18,160
on top of it and I decided that I won't

00:22:16,390 --> 00:22:20,230
use this version for cross compilation I

00:22:18,160 --> 00:22:21,150
will use the most recent version of

00:22:20,230 --> 00:22:25,770
binutils

00:22:21,150 --> 00:22:28,890
because it supports more targets because

00:22:25,770 --> 00:22:31,890
it's simpler to get through supports

00:22:28,890 --> 00:22:36,580
cross build version of Beaneaters

00:22:31,890 --> 00:22:38,620
the thing is has for GCC we didn't have

00:22:36,580 --> 00:22:43,060
streamer patches in particular the arm

00:22:38,620 --> 00:22:46,840
supports because GCC the old version we

00:22:43,060 --> 00:22:50,170
have in base never it was out before our

00:22:46,840 --> 00:22:52,240
most popular so it didn't have proper

00:22:50,170 --> 00:22:56,470
support for arm so we had to write it

00:22:52,240 --> 00:22:59,770
ourselves but of course we didn't

00:22:56,470 --> 00:23:02,760
upstream that so that was a problem and

00:22:59,770 --> 00:23:05,170
I don't remember who did the work of

00:23:02,760 --> 00:23:07,950
adapting our patches to the newer be new

00:23:05,170 --> 00:23:10,990
to it but now it's fixed and next of

00:23:07,950 --> 00:23:13,090
next upstream version of businesses will

00:23:10,990 --> 00:23:16,480
have our patches to build bird to cross

00:23:13,090 --> 00:23:18,220
build and be notice this cross belt

00:23:16,480 --> 00:23:21,340
friendly you can have a multi target

00:23:18,220 --> 00:23:23,410
version of B neuter saying okay I'll

00:23:21,340 --> 00:23:25,450
build this binutils and depending on the

00:23:23,410 --> 00:23:29,050
flag I pass it will generate our binary

00:23:25,450 --> 00:23:31,420
and or it will generate MIPS binary or

00:23:29,050 --> 00:23:38,620
not even re accept that

00:23:31,420 --> 00:23:41,920
gasps is not able to be multi targets so

00:23:38,620 --> 00:23:43,600
basically that makes things a bit more

00:23:41,920 --> 00:23:46,360
complicated without yet you don't get

00:23:43,600 --> 00:23:50,590
four you can get very far so we ended up

00:23:46,360 --> 00:23:53,410
having two to create one B nutrients per

00:23:50,590 --> 00:23:56,320
architecture we want to target two just

00:23:53,410 --> 00:23:58,930
because of gas well actually the other

00:23:56,320 --> 00:24:02,710
thing is it makes things simpler because

00:23:58,930 --> 00:24:06,130
if you have a multi target been utils

00:24:02,710 --> 00:24:09,040
then you have to manually specify the

00:24:06,130 --> 00:24:12,190
the LD Flags you need for the given

00:24:09,040 --> 00:24:15,160
target and if you have been until that

00:24:12,190 --> 00:24:18,029
only target one platform then it

00:24:15,160 --> 00:24:21,400
automatically knows what

00:24:18,029 --> 00:24:23,400
the flags you want to specify for this

00:24:21,400 --> 00:24:26,679
target

00:24:23,400 --> 00:24:30,840
so speaking of complicating our life

00:24:26,679 --> 00:24:35,320
I need a sister ought to be able to

00:24:30,840 --> 00:24:37,870
build packages I need to say to my

00:24:35,320 --> 00:24:41,679
compiler to my linker here is my headers

00:24:37,870 --> 00:24:43,570
for our Harris here are my biner my

00:24:41,679 --> 00:24:46,480
libraries for arm you need to link again

00:24:43,570 --> 00:24:49,830
them and etc so we need to be able to

00:24:46,480 --> 00:24:53,529
Brianna sis root out of the regular

00:24:49,830 --> 00:24:55,539
FreeBSD sources so we used to have well

00:24:53,529 --> 00:25:01,240
we still have something called max dev

00:24:55,539 --> 00:25:05,110
this was basically trying to build cross

00:25:01,240 --> 00:25:06,490
tool chain based on the base on the on

00:25:05,110 --> 00:25:09,220
the tool chain we have the base system

00:25:06,490 --> 00:25:12,399
and then cross build all the libraries

00:25:09,220 --> 00:25:14,740
and put that into a nice fashion into a

00:25:12,399 --> 00:25:16,720
repository a directory where you can

00:25:14,740 --> 00:25:21,309
find everything ready to be able to do

00:25:16,720 --> 00:25:24,820
crawlable well it worked so it created a

00:25:21,309 --> 00:25:27,340
sister a cross compilation tool it

00:25:24,820 --> 00:25:29,440
worked pretty well but it's inconsistent

00:25:27,340 --> 00:25:32,679
about the version in the poetry we do

00:25:29,440 --> 00:25:36,460
support FreeBSD 8 FreeBSD 9 FreeBSD 10

00:25:32,679 --> 00:25:38,950
FreeBSD head so we need to be able to

00:25:36,460 --> 00:25:42,010
provide the same feature whatever

00:25:38,950 --> 00:25:43,899
version of FreeBSD we do we use so I

00:25:42,010 --> 00:25:47,919
need to be able to have a seat for

00:25:43,899 --> 00:25:50,710
FreeBSD 8 as well as head and make it

00:25:47,919 --> 00:25:54,750
they have basically is only properly

00:25:50,710 --> 00:25:58,090
working right now in what will be 10:1

00:25:54,750 --> 00:25:59,970
it's only properly working if you are

00:25:58,090 --> 00:26:02,200
targeting something that has clang

00:25:59,970 --> 00:26:07,929
because it will use to work properly on

00:26:02,200 --> 00:26:09,730
on nine but when clang went in there are

00:26:07,929 --> 00:26:14,350
some magics that was involved to decide

00:26:09,730 --> 00:26:16,690
oh I use I need to build this tool or

00:26:14,350 --> 00:26:18,929
not into the tool chain I need to build

00:26:16,690 --> 00:26:21,460
this tool or not into the tool chain and

00:26:18,929 --> 00:26:25,299
because everyone was happy to get rid of

00:26:21,460 --> 00:26:28,059
GCC probably then if she targeting at

00:26:25,299 --> 00:26:29,799
something which is still using GCC well

00:26:28,059 --> 00:26:31,649
it just broke up because some part of

00:26:29,799 --> 00:26:39,960
missing

00:26:31,649 --> 00:26:43,119
so it's we need we need to figure that

00:26:39,960 --> 00:26:46,869
so the solution was okay we can use X

00:26:43,119 --> 00:26:48,609
def to build us his fruit but the

00:26:46,869 --> 00:26:51,009
toolchain whatever we will use clang

00:26:48,609 --> 00:26:53,289
from from the poultry so I focused on

00:26:51,009 --> 00:26:54,700
clang and I'm recently switching to JCC

00:26:53,289 --> 00:26:57,429
to be able to get the other or

00:26:54,700 --> 00:27:00,940
architecture I focused on clang I

00:26:57,429 --> 00:27:02,919
decided that the less building the last

00:27:00,940 --> 00:27:05,850
build the user have to do the better

00:27:02,919 --> 00:27:10,330
there are there are so because in

00:27:05,850 --> 00:27:11,440
FreeBSD 10 clang is is good enough to be

00:27:10,330 --> 00:27:14,350
able to cross don't think I will use

00:27:11,440 --> 00:27:16,989
base clanging if possible if you're

00:27:14,350 --> 00:27:21,369
building on nine then we will use a port

00:27:16,989 --> 00:27:22,809
version of clearing and so that's why we

00:27:21,369 --> 00:27:26,350
will fall back if your version is too

00:27:22,809 --> 00:27:29,470
old on the pod version so right now 3.3

00:27:26,350 --> 00:27:31,389
is enough I probably switch to by

00:27:29,470 --> 00:27:34,119
default having a suite of four version

00:27:31,389 --> 00:27:35,440
and in that case if you want an o it

00:27:34,119 --> 00:27:38,830
will automatically use a version from

00:27:35,440 --> 00:27:41,379
the poetry and we will use binutils from

00:27:38,830 --> 00:27:44,619
pot all the time because it's simpler

00:27:41,379 --> 00:27:47,739
for us to say okay this is the version

00:27:44,619 --> 00:27:49,690
we want instead of has buys the right

00:27:47,739 --> 00:27:54,999
thing the right Beaneaters to be able to

00:27:49,690 --> 00:27:57,210
do to do our stuff but building using

00:27:54,999 --> 00:28:02,369
the new tools from from the poetry has

00:27:57,210 --> 00:28:07,419
kind of quick for us basically gas is

00:28:02,369 --> 00:28:11,830
more pedantic in some areas and most of

00:28:07,419 --> 00:28:14,859
our assembly files were missing some n

00:28:11,830 --> 00:28:17,230
sections and yeah new yorkers who are

00:28:14,859 --> 00:28:19,330
just dying on this so we had to fix them

00:28:17,230 --> 00:28:21,549
so right now we have fixed the arm

00:28:19,330 --> 00:28:24,820
version i need to check all the other

00:28:21,549 --> 00:28:34,409
targets to fix to get someone fixing the

00:28:24,820 --> 00:28:37,539
other targets and we need to create some

00:28:34,409 --> 00:28:40,149
some ports that are able to build the

00:28:37,539 --> 00:28:42,399
secret because the user just want to get

00:28:40,149 --> 00:28:44,390
into a directory say I want to build

00:28:42,399 --> 00:28:47,460
this for FreeBSD 10

00:28:44,390 --> 00:28:48,990
the user don't want to have to prepare a

00:28:47,460 --> 00:28:51,630
lot of thing by it's by himself before

00:28:48,990 --> 00:28:54,030
so we need to get a poet that is able to

00:28:51,630 --> 00:28:55,920
fetch the freebsd sources whatever

00:28:54,030 --> 00:29:06,090
version we do support and generate the

00:28:55,920 --> 00:29:08,400
sisterhood out of that okay so creating

00:29:06,090 --> 00:29:11,750
the sea route now we have seen that

00:29:08,400 --> 00:29:15,060
Maggie's dev is not really nice for us

00:29:11,750 --> 00:29:18,270
so we don't have a target for mixes for

00:29:15,060 --> 00:29:21,690
to create a Cecil we need one really we

00:29:18,270 --> 00:29:25,230
it's something that user will often want

00:29:21,690 --> 00:29:28,410
actually everyone building appliances on

00:29:25,230 --> 00:29:30,780
FreeBSD I guess is probably creating its

00:29:28,410 --> 00:29:34,020
own sister out often

00:29:30,780 --> 00:29:36,900
so we need one but yeah because

00:29:34,020 --> 00:29:40,590
otherwise it's something really easy to

00:29:36,900 --> 00:29:42,540
do and it's just this small common line

00:29:40,590 --> 00:29:44,040
to be able to you with a couple of magic

00:29:42,540 --> 00:29:46,890
in the middle where you say I don't on

00:29:44,040 --> 00:29:49,830
this but I want this no really we need

00:29:46,890 --> 00:29:52,440
the target who knows that you only for

00:29:49,830 --> 00:29:55,410
example never sources incur sees need to

00:29:52,440 --> 00:29:59,040
build first a build tool to generate

00:29:55,410 --> 00:30:02,010
headers or yet its headers and who knows

00:29:59,040 --> 00:30:04,710
this no one so we need a simple target

00:30:02,010 --> 00:30:09,960
create a Cisco for me please take this

00:30:04,710 --> 00:30:10,980
compiler take this this linker and put

00:30:09,960 --> 00:30:13,860
everything in there

00:30:10,980 --> 00:30:19,590
we need that that's what makes dev was

00:30:13,860 --> 00:30:21,660
intended for at the beginning if we look

00:30:19,590 --> 00:30:25,320
at the port's infrastructure it was

00:30:21,660 --> 00:30:29,600
surprisingly not intrusive to add

00:30:25,320 --> 00:30:32,370
support for cross compilation and

00:30:29,600 --> 00:30:35,100
basically you need to keep a track of

00:30:32,370 --> 00:30:37,200
what is your house compiler because the

00:30:35,100 --> 00:30:39,720
native compiler because you will need to

00:30:37,200 --> 00:30:42,510
pass it to think that have build tools

00:30:39,720 --> 00:30:44,610
they want to have native we need to

00:30:42,510 --> 00:30:50,130
switch the default compiler to the cross

00:30:44,610 --> 00:30:52,410
compiler and we need to point the strip

00:30:50,130 --> 00:30:55,620
command because we use it a lot in the

00:30:52,410 --> 00:30:58,220
past three to the strip coming from the

00:30:55,620 --> 00:31:02,550
cross pietÃ  version

00:30:58,220 --> 00:31:07,280
and well I needed to modify a bit

00:31:02,550 --> 00:31:12,240
package because package is introspecting

00:31:07,280 --> 00:31:13,620
binary not introspecting is is in asking

00:31:12,240 --> 00:31:16,010
the host what is your target when it

00:31:13,620 --> 00:31:17,760
tries to build what is your native

00:31:16,010 --> 00:31:21,000
architecture when it tries to build a

00:31:17,760 --> 00:31:25,320
packet so it can write ok this package

00:31:21,000 --> 00:31:27,060
is for FreeBSD 10 MD 64 whatever so you

00:31:25,320 --> 00:31:30,420
can overwrite it in the pathway saying

00:31:27,060 --> 00:31:32,460
this is no arts package this is you can

00:31:30,420 --> 00:31:34,560
change it but by default it uses the

00:31:32,460 --> 00:31:36,900
version on the host and to do that I

00:31:34,560 --> 00:31:38,880
don't rely on the kernel because you can

00:31:36,900 --> 00:31:41,130
run a recent kernel with an unguent

00:31:38,880 --> 00:31:44,250
userland so I rely on the user learn and

00:31:41,130 --> 00:31:47,310
I read is the bean shell binary because

00:31:44,250 --> 00:31:48,870
I guess everyone has been shocked but if

00:31:47,310 --> 00:31:50,760
you do crowbill you have a sister out so

00:31:48,870 --> 00:31:54,300
you don't have any bean shell so I had

00:31:50,760 --> 00:31:55,860
to modify package so that it can read it

00:31:54,300 --> 00:31:58,680
can read the ABI

00:31:55,860 --> 00:32:01,320
it supports from one of the file inside

00:31:58,680 --> 00:32:04,860
that sister and I decided to use one of

00:32:01,320 --> 00:32:08,910
the value will always have which is CRT

00:32:04,860 --> 00:32:11,220
one dot o and we have a couple of viable

00:32:08,910 --> 00:32:13,170
like making package Kampf well we don't

00:32:11,220 --> 00:32:15,990
use package config on FreeBSD because

00:32:13,170 --> 00:32:19,080
package config is quite of crap right

00:32:15,990 --> 00:32:20,580
now where you have it you need jelly to

00:32:19,080 --> 00:32:23,400
write 12 package config and package

00:32:20,580 --> 00:32:25,140
config need jail even you know Angelini

00:32:23,400 --> 00:32:26,970
to a cat config so we use something

00:32:25,140 --> 00:32:28,440
called package combat it's basically

00:32:26,970 --> 00:32:30,870
exactly the same and support the same

00:32:28,440 --> 00:32:34,290
syntax and the same features as package

00:32:30,870 --> 00:32:35,910
config and so you need to tell package

00:32:34,290 --> 00:32:38,430
config that I have a seat route

00:32:35,910 --> 00:32:40,620
somewhere so instead of carrying the dot

00:32:38,430 --> 00:32:46,710
PC fight from the host please carry them

00:32:40,620 --> 00:32:49,790
from the sis route we have to change a

00:32:46,710 --> 00:32:53,160
bit a couple of behavior so we have to

00:32:49,790 --> 00:32:55,140
kind of dependency macros in in the post

00:32:53,160 --> 00:32:57,690
framework the Lib dependency and the

00:32:55,140 --> 00:32:59,760
bill dependency and I have to say ok if

00:32:57,690 --> 00:33:02,910
something is in the bill dependency or

00:32:59,760 --> 00:33:05,280
in the leaf dependency pill please build

00:33:02,910 --> 00:33:10,050
it twice the native and the cross bill

00:33:05,280 --> 00:33:11,760
and we need I needed to be able to

00:33:10,050 --> 00:33:15,630
install packages in

00:33:11,760 --> 00:33:18,480
two different our destination so what we

00:33:15,630 --> 00:33:20,760
do is we natively install the dependency

00:33:18,480 --> 00:33:25,320
on the host for the native dependency

00:33:20,760 --> 00:33:29,960
and I added - - relocates option to

00:33:25,320 --> 00:33:33,570
package register so I can install the

00:33:29,960 --> 00:33:36,090
target into the C suit so I have two

00:33:33,570 --> 00:33:42,000
different clean environment were to find

00:33:36,090 --> 00:33:44,460
I were to put my batteries and and I

00:33:42,000 --> 00:33:46,860
needed to to get a couple of matching

00:33:44,460 --> 00:33:49,380
saying okay if I do cross compilation

00:33:46,860 --> 00:33:51,750
then I have a dependency on this route

00:33:49,380 --> 00:33:53,400
which is this port I have a dependency

00:33:51,750 --> 00:33:57,840
on this being yourself I have a

00:33:53,400 --> 00:34:00,810
dependency on this compiler and then you

00:33:57,840 --> 00:34:03,180
have two weeks from ports by ports

00:34:00,810 --> 00:34:06,420
because we have lot of people trying to

00:34:03,180 --> 00:34:10,399
be more clever than what is already

00:34:06,420 --> 00:34:14,130
offered so you have to fix what they did

00:34:10,399 --> 00:34:16,139
so how would you we did fix pearl we

00:34:14,130 --> 00:34:19,830
have two choice that is for very long

00:34:16,139 --> 00:34:22,409
time a pearl pearl cross project which

00:34:19,830 --> 00:34:25,350
never get never find its way into the

00:34:22,409 --> 00:34:29,070
into the main pearl which basically

00:34:25,350 --> 00:34:31,320
provide auto tools to build pearl and

00:34:29,070 --> 00:34:34,260
well it works very well if you want to

00:34:31,320 --> 00:34:37,500
do cross building the other thing is you

00:34:34,260 --> 00:34:40,409
do provide you can do it through

00:34:37,500 --> 00:34:44,040
providing preceded configured edge files

00:34:40,409 --> 00:34:45,899
and so you have first to run the pearl

00:34:44,040 --> 00:34:48,000
configure on the different targets

00:34:45,899 --> 00:34:51,570
you're aiming at you get back the

00:34:48,000 --> 00:34:53,909
headers and then you remove from it

00:34:51,570 --> 00:34:56,129
everything that you know that is version

00:34:53,909 --> 00:34:58,710
dependent architecture dependent and you

00:34:56,129 --> 00:35:01,140
basically do the configure job by

00:34:58,710 --> 00:35:01,380
yourself instead of letting people doing

00:35:01,140 --> 00:35:03,660
it

00:35:01,380 --> 00:35:07,860
that's what is done for example in open

00:35:03,660 --> 00:35:12,330
wrt and other embedded linux platform

00:35:07,860 --> 00:35:16,260
that the cross building so python what

00:35:12,330 --> 00:35:20,520
we need to do is bring the parts that

00:35:16,260 --> 00:35:22,830
are needed to to 7 so pison well we can

00:35:20,520 --> 00:35:25,230
attach spicen so that it will build a

00:35:22,830 --> 00:35:27,480
native version of Python and

00:35:25,230 --> 00:35:29,550
target version of Python but we can

00:35:27,480 --> 00:35:32,670
patch it to say okay I already have

00:35:29,550 --> 00:35:35,280
Python on my system so and it's a good

00:35:32,670 --> 00:35:37,290
version so if you try if you build bill

00:35:35,280 --> 00:35:39,119
like you want to build meaning only

00:35:37,290 --> 00:35:41,119
target but when it would try to run

00:35:39,119 --> 00:35:43,740
bison use the version from my native

00:35:41,119 --> 00:35:46,650
package I have already installed so that

00:35:43,740 --> 00:35:48,270
is what we need to bring back and I

00:35:46,650 --> 00:35:51,290
think all the stuff has been committed

00:35:48,270 --> 00:35:52,440
in two three four so I need to check

00:35:51,290 --> 00:35:55,320
scones

00:35:52,440 --> 00:35:58,619
well there is no solution for scones I

00:35:55,320 --> 00:36:01,170
mean I think somebody is now using that

00:35:58,619 --> 00:36:03,450
and somebody's probably the only one

00:36:01,170 --> 00:36:05,340
that manage to get something working

00:36:03,450 --> 00:36:07,440
with counts and I can cross bills on I

00:36:05,340 --> 00:36:09,240
don't know how they did that but all

00:36:07,440 --> 00:36:13,460
other project I never managed to get

00:36:09,240 --> 00:36:13,460
something really reliable based on this

00:36:13,760 --> 00:36:19,590
okay so from the ports user from the end

00:36:17,010 --> 00:36:20,940
user point of view when you now you want

00:36:19,590 --> 00:36:23,340
to cross bill all you have to do is

00:36:20,940 --> 00:36:25,950
you're going to a port you specify one

00:36:23,340 --> 00:36:28,740
magic macro and you say okay I will

00:36:25,950 --> 00:36:32,040
build for this version of FreeBSD for

00:36:28,740 --> 00:36:34,050
arm v6 AMD CGI bi we do support and

00:36:32,040 --> 00:36:37,710
create a package for me you can do that

00:36:34,050 --> 00:36:41,400
as a user it works and what it will do

00:36:37,710 --> 00:36:43,380
is it will check your compiler okay you

00:36:41,400 --> 00:36:47,100
have claimed in but I will use it it

00:36:43,380 --> 00:36:50,100
will say okay I need this double -

00:36:47,100 --> 00:36:52,230
double slash be no tips arm whatever -

00:36:50,100 --> 00:36:54,450
so it will install it and it will go

00:36:52,230 --> 00:36:59,070
through a port which I haven't imported

00:36:54,450 --> 00:37:03,510
yet but which is FreeBSD sis routes arm

00:36:59,070 --> 00:37:05,070
v6 quite long name and it really it will

00:37:03,510 --> 00:37:07,200
build us this route install it so you

00:37:05,070 --> 00:37:09,780
don't have to know yourself how to build

00:37:07,200 --> 00:37:14,460
FreeBSD sis route you just let the

00:37:09,780 --> 00:37:16,650
poetry do the magic and well it's

00:37:14,460 --> 00:37:19,020
supposed to be wishes with or without

00:37:16,650 --> 00:37:21,450
the provided to sort with with provided

00:37:19,020 --> 00:37:23,970
sis what a lot of companies are using

00:37:21,450 --> 00:37:25,680
FreeBSD in their appliances so they are

00:37:23,970 --> 00:37:27,840
already building their own T's route and

00:37:25,680 --> 00:37:30,900
they don't want the overhead of building

00:37:27,840 --> 00:37:33,570
again as his fruit on top of it so they

00:37:30,900 --> 00:37:36,420
want to be able to say okay I still want

00:37:33,570 --> 00:37:38,550
all of this to work out of box but I

00:37:36,420 --> 00:37:38,950
will tell the system that my sis root is

00:37:38,550 --> 00:37:40,810
there

00:37:38,950 --> 00:37:43,900
you can specify it with another macro

00:37:40,810 --> 00:37:45,280
that you wrote it there and the poster

00:37:43,900 --> 00:37:46,930
will do all the magic I was going

00:37:45,280 --> 00:37:49,390
through the dependency install the 91

00:37:46,930 --> 00:37:51,730
install the target one and create the

00:37:49,390 --> 00:37:53,260
package and everything if you have

00:37:51,730 --> 00:37:55,000
already all the dependency install

00:37:53,260 --> 00:37:59,230
everything is done as a regular user you

00:37:55,000 --> 00:38:03,970
don't need any root credentials the

00:37:59,230 --> 00:38:08,980
limitation we have is I'm a bit late I

00:38:03,970 --> 00:38:13,359
think okay so the limitation we have now

00:38:08,980 --> 00:38:15,010
is the base system that still view the

00:38:13,359 --> 00:38:20,230
version of the base system that still

00:38:15,010 --> 00:38:23,589
use GCC are bringing lips on a C++ from

00:38:20,230 --> 00:38:27,060
GCC for two and it gives us a nightmare

00:38:23,589 --> 00:38:30,599
because you're getting mix with newer

00:38:27,060 --> 00:38:35,020
standards of lip C++ and all the one and

00:38:30,599 --> 00:38:36,940
it gets complicated so I need to figure

00:38:35,020 --> 00:38:43,150
out a way to fake that the other thing

00:38:36,940 --> 00:38:45,430
is we need to use ECC anyway for

00:38:43,150 --> 00:38:48,310
everything that is not supported in in

00:38:45,430 --> 00:38:51,220
Clank so openmp for example is not

00:38:48,310 --> 00:38:54,819
supported in Clank everything that is

00:38:51,220 --> 00:38:58,930
not respecting C++ Turner is relying on

00:38:54,819 --> 00:39:03,369
GCC we have a couple of we still have a

00:38:58,930 --> 00:39:05,740
lot of people using those weird nested

00:39:03,369 --> 00:39:07,480
function in C that is a new extension

00:39:05,740 --> 00:39:10,390
which is not supported in clang as well

00:39:07,480 --> 00:39:14,859
so we need to to find a way to to have

00:39:10,390 --> 00:39:17,319
this clean by the way we for for OpenMP

00:39:14,859 --> 00:39:22,060
we have a solution while using GCC but

00:39:17,319 --> 00:39:24,550
not linking to new sanno c++ which is we

00:39:22,060 --> 00:39:28,680
tweaked a bit g plus plus so that it

00:39:24,550 --> 00:39:34,510
uses lead c++ it's quite easy to do and

00:39:28,680 --> 00:39:36,940
well right now with how until until

00:39:34,510 --> 00:39:39,490
yesterday I want able to do anything

00:39:36,940 --> 00:39:43,030
with GCC only platform yesterday I

00:39:39,490 --> 00:39:48,520
managed to get first package she is

00:39:43,030 --> 00:39:53,460
building for arm arm big endian so using

00:39:48,520 --> 00:39:58,599
GCC for eight so we are getting close

00:39:53,460 --> 00:40:01,020
thank you without s do you have any

00:39:58,599 --> 00:40:01,020
questions

00:40:09,570 --> 00:40:14,020
it's not exactly a question but since

00:40:12,340 --> 00:40:17,170
I'm OpenBSD I don't have to be

00:40:14,020 --> 00:40:18,940
diplomatic about things up streaming

00:40:17,170 --> 00:40:21,670
purchased to JCCC it's definitely a

00:40:18,940 --> 00:40:24,190
success fault it's almost impossible to

00:40:21,670 --> 00:40:26,950
do a real open source work with the GCC

00:40:24,190 --> 00:40:29,350
people because you do a patch when you

00:40:26,950 --> 00:40:31,420
submit beat upstream and they tell you

00:40:29,350 --> 00:40:33,730
that it's not very test version so they

00:40:31,420 --> 00:40:36,280
don't accept it and it takes at least

00:40:33,730 --> 00:40:38,860
one month to get that reply usually and

00:40:36,280 --> 00:40:41,530
then you try it with the newest version

00:40:38,860 --> 00:40:45,040
of actually non-working branch on your

00:40:41,530 --> 00:40:47,290
operating system and you submit a bug

00:40:45,040 --> 00:40:50,770
report you wait for another month or

00:40:47,290 --> 00:40:52,870
somebody to fix it then you realize that

00:40:50,770 --> 00:40:55,660
your patch has changed but you need to

00:40:52,870 --> 00:40:58,020
write it you submit it again then you

00:40:55,660 --> 00:41:00,910
wait for another month you realize that

00:40:58,020 --> 00:41:03,520
you missed something in the incredible

00:41:00,910 --> 00:41:05,530
coding guidelines that we have so they

00:41:03,520 --> 00:41:07,240
send it back to you telling you to fix

00:41:05,530 --> 00:41:09,940
it because you miss the space somewhere

00:41:07,240 --> 00:41:11,920
you wait for another Mouse you realize

00:41:09,940 --> 00:41:14,950
that it doesn't work anymore with yet

00:41:11,920 --> 00:41:17,140
version so it's no fun yeah at all so

00:41:14,950 --> 00:41:18,790
maybe you can do something about it

00:41:17,140 --> 00:41:20,590
since you have lots of money in the

00:41:18,790 --> 00:41:22,810
freebsd foundation but if you really

00:41:20,590 --> 00:41:24,640
want to get upstream patches you have to

00:41:22,810 --> 00:41:28,360
pay somebody to do that because it's not

00:41:24,640 --> 00:41:30,520
fun anyway the main point for us is to

00:41:28,360 --> 00:41:45,040
move everything development all other

00:41:30,520 --> 00:41:47,140
targets who claim in the end so yes so

00:41:45,040 --> 00:41:48,390
obviously with this work you're doing

00:41:47,140 --> 00:41:50,860
you're seeing a lot more

00:41:48,390 --> 00:41:52,900
interdependencies between package

00:41:50,860 --> 00:41:54,540
building and the source tree yeah what

00:41:52,900 --> 00:41:57,340
is your long-term roadmap for

00:41:54,540 --> 00:42:02,410
essentially kind of merging the notion

00:41:57,340 --> 00:42:04,690
of cross building everything well so one

00:42:02,410 --> 00:42:08,080
of the nice thing I saw with that is I'm

00:42:04,690 --> 00:42:09,760
now having a prepared external tool

00:42:08,080 --> 00:42:13,210
chain so I can build the base system

00:42:09,760 --> 00:42:16,870
with an external routine so my roadmap

00:42:13,210 --> 00:42:18,280
is first get things working with GCC

00:42:16,870 --> 00:42:19,570
because that's where we basically need

00:42:18,280 --> 00:42:24,460
an external tool chain

00:42:19,570 --> 00:42:26,980
and once I have this done then go back

00:42:24,460 --> 00:42:31,150
into the source tree create the Maxis

00:42:26,980 --> 00:42:33,400
fruit finish what I need to finish - to

00:42:31,150 --> 00:42:39,460
use an external compiler in the base

00:42:33,400 --> 00:42:42,970
system but basically was simple with

00:42:39,460 --> 00:42:46,030
this simple thing you're able to use an

00:42:42,970 --> 00:42:48,010
external tool chain totally also thus it

00:42:46,030 --> 00:42:52,000
is not does not need the the base

00:42:48,010 --> 00:42:54,100
compiler at all but basically this is

00:42:52,000 --> 00:42:57,460
extracted from xyx dev so if you look at

00:42:54,100 --> 00:42:59,470
make file dot Inc one in the in the base

00:42:57,460 --> 00:43:03,070
system you have a cleaner version of

00:42:59,470 --> 00:43:06,640
this I try to compact it a bit but I

00:43:03,070 --> 00:43:09,370
just tweaked it a bit so pass for

00:43:06,640 --> 00:43:21,370
example it's not tricked like this in

00:43:09,370 --> 00:43:24,640
the base system but I could have stood

00:43:21,370 --> 00:43:27,580
up at me talking to Glenn a little bit

00:43:24,640 --> 00:43:30,640
about the notion of release profiles to

00:43:27,580 --> 00:43:32,350
drive the make release inclusion process

00:43:30,640 --> 00:43:34,420
with a profile that describes

00:43:32,350 --> 00:43:36,100
essentially all the pieces of base you

00:43:34,420 --> 00:43:38,020
want and all the packages that you want

00:43:36,100 --> 00:43:39,370
because essentially to build an

00:43:38,020 --> 00:43:42,160
appliance that's what you're doing right

00:43:39,370 --> 00:43:44,080
it's it's it's folding in the Nano BST

00:43:42,160 --> 00:43:45,940
functionality and making it part of the

00:43:44,080 --> 00:43:47,380
release building process so that's kind

00:43:45,940 --> 00:43:48,370
of what I was hinting at when I was

00:43:47,380 --> 00:43:50,170
asking you about your longer-term

00:43:48,370 --> 00:43:51,820
roadmap okay ultimately I want to build

00:43:50,170 --> 00:43:55,120
it all together I have another project

00:43:51,820 --> 00:43:57,520
in fact for that and well it will use

00:43:55,120 --> 00:43:59,890
all of these but it's separate because

00:43:57,520 --> 00:44:03,100
pottery and base system are living in

00:43:59,890 --> 00:44:06,700
two different repository what I ended up

00:44:03,100 --> 00:44:10,720
is fine a third one and I used my I use

00:44:06,700 --> 00:44:12,730
my puller tool to edit a new sub command

00:44:10,720 --> 00:44:15,430
it will happen probably in the fourth

00:44:12,730 --> 00:44:18,820
version of puyo where you can specify

00:44:15,430 --> 00:44:20,950
okay I need base with these options and

00:44:18,820 --> 00:44:24,250
these packages and please build me a

00:44:20,950 --> 00:44:28,020
freebsd release as it's done on on the

00:44:24,250 --> 00:44:31,450
FreeBSD project or please build me

00:44:28,020 --> 00:44:34,000
USB stick with this package install and

00:44:31,450 --> 00:44:36,970
whatever or please give me a proceeded

00:44:34,000 --> 00:44:38,710
jail I can deploy somewhere with those

00:44:36,970 --> 00:44:40,330
package and it'll do the magic of

00:44:38,710 --> 00:44:42,900
building everything preparing the

00:44:40,330 --> 00:44:57,670
environment and in the end creates the

00:44:42,900 --> 00:45:00,340
create the media anymore question you

00:44:57,670 --> 00:45:03,760
said you're gonna use clang from ports

00:45:00,340 --> 00:45:05,410
for older versions of PSD I can I think

00:45:03,760 --> 00:45:08,560
you you will for cross building right or

00:45:05,410 --> 00:45:11,350
no I will use the base version if its

00:45:08,560 --> 00:45:13,330
recent enough and the version I fall

00:45:11,350 --> 00:45:15,640
back on the version from ports if the

00:45:13,330 --> 00:45:19,090
base version is not good enough for

00:45:15,640 --> 00:45:20,680
example and then right now I use always

00:45:19,090 --> 00:45:22,150
clang when I can because the oldest

00:45:20,680 --> 00:45:25,450
version we have in base system is three

00:45:22,150 --> 00:45:27,010
three which is good enough but I'm more

00:45:25,450 --> 00:45:29,770
and more attempting to switch to three

00:45:27,010 --> 00:45:32,290
four which is way better so meaning that

00:45:29,770 --> 00:45:34,210
then one will use base version and then

00:45:32,290 --> 00:45:36,310
Oh will use a pot version okay will you

00:45:34,210 --> 00:45:37,990
also use a new version of lip C++ in

00:45:36,310 --> 00:45:39,760
that case or what you always rely on the

00:45:37,990 --> 00:45:41,920
one from a system I will rely on the one

00:45:39,760 --> 00:45:43,810
from the system because you will be

00:45:41,920 --> 00:45:52,390
linked to a given version so you need to

00:45:43,810 --> 00:45:53,440
keep that one thank you thank you okay

00:45:52,390 --> 00:45:57,869
thank you all

00:45:53,440 --> 00:45:57,869

YouTube URL: https://www.youtube.com/watch?v=Mt_EYfIHx9M


