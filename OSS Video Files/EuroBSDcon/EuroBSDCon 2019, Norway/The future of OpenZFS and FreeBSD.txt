Title: The future of OpenZFS and FreeBSD
Publication date: 2019-10-27
Playlist: EuroBSDCon 2019, Norway
Description: 
	Looking at the recent changes to the OpenZFS Project, and how FreeBSD will interact with the OpenZFS Project going forward.

This talk will discuss:

How the OpenZFS project started
How the OpenZFS project has changed over the last 5 years
The introduction of the monthly ZFS Leadership Call
New problems as ZFS has matured (needing to add a deprecation policy, etc)
How the OpenZFS project is working to reduce the differences across platforms (command line switches, NFS differences)
Interoperability improvements (feature flag ‘compatibility’ groups)
New procedures to prevent divergence and coordinate development across platforms (reserving flags, wider discussion before names for features/flags are decided)
Then switch gears and cover FreeBSD specific issues:

The switch to ZoL as upstream
Why we are making the change
What we get out of it
How it is better for all of OpenZFS
And finally a status report:

ZFS-on-Linux and ZFS-on-FreeBSD are now “OpenZFS”
There is no LinuxKPI in ZFS (kill the FUD)
What has OpenZFS done for me lately (new and upcoming features)
Allan Jude

FreeBSD user (2001), doc (2014), and src (2015) committer. FreeBSD Core Team (2016-2020)
Co-Author of “FreeBSD Mastery: ZFS” and “FreeBSD Mastery: Advanced ZFS” with Michael W. Lucas
VP Engineering at Klara Inc (FreeBSD development and support services)
Captions: 
	00:00:02,590 --> 00:00:07,830
hello everyone so welcome to the last

00:00:05,260 --> 00:00:10,240
talk of the morning session I want to

00:00:07,830 --> 00:00:22,900
we'll be talking about the future of

00:00:10,240 --> 00:00:25,210
open the defense on FreeBSD thank you so

00:00:22,900 --> 00:00:27,310
as me I said my name is Alan Jude I'm a

00:00:25,210 --> 00:00:29,520
FreeBSD developer and on the core team

00:00:27,310 --> 00:00:32,800
and I'm also an open data fest developer

00:00:29,520 --> 00:00:35,140
and I worked for Clara which is a

00:00:32,800 --> 00:00:38,530
FreeBSD professional services and

00:00:35,140 --> 00:00:40,480
consulting company so if you use FreeBSD

00:00:38,530 --> 00:00:43,839
and need help with it then reach out to

00:00:40,480 --> 00:00:45,850
us so brief overview of what we'll talk

00:00:43,839 --> 00:00:49,239
about today we're going to talk about

00:00:45,850 --> 00:00:50,800
how open ZFS got started some of the

00:00:49,239 --> 00:00:53,890
roadblocks that hit along the way and

00:00:50,800 --> 00:00:56,469
how we overcame those and how that has

00:00:53,890 --> 00:00:58,199
changed in the present and how it's

00:00:56,469 --> 00:01:00,399
going to change even more in the future

00:00:58,199 --> 00:01:01,899
including some of the challenges that

00:01:00,399 --> 00:01:06,370
opens out of essence facing today and

00:01:01,899 --> 00:01:08,710
how we will overcome those and then as

00:01:06,370 --> 00:01:10,750
part of that on FreeBSD we'll be

00:01:08,710 --> 00:01:13,000
changing the upstream we use to get ZFS

00:01:10,750 --> 00:01:15,100
from so that we can more closely track

00:01:13,000 --> 00:01:17,680
the active development and get all of

00:01:15,100 --> 00:01:19,719
the latest features and then we will all

00:01:17,680 --> 00:01:22,390
stock about what's going to be coming up

00:01:19,719 --> 00:01:27,430
instead of s over the next couple of

00:01:22,390 --> 00:01:30,310
years so to start at the beginning as

00:01:27,430 --> 00:01:32,130
they say ZFS was written he developed at

00:01:30,310 --> 00:01:35,590
Sun Microsystems as most people know

00:01:32,130 --> 00:01:37,329
work started back in 2001 meaning that

00:01:35,590 --> 00:01:38,619
said if s is almost twenty years old at

00:01:37,329 --> 00:01:43,210
this point

00:01:38,619 --> 00:01:44,680
and the first version that leaked out

00:01:43,210 --> 00:01:47,469
for everybody to have under the

00:01:44,680 --> 00:01:48,969
open-source CDL license came out in 2005

00:01:47,469 --> 00:01:53,469
with the release of that version of open

00:01:48,969 --> 00:01:54,750
Solaris but sadly in 2010 Oracle ruined

00:01:53,469 --> 00:01:57,820
everything

00:01:54,750 --> 00:02:01,869
they bought Sun and ended up closing off

00:01:57,820 --> 00:02:04,469
development of Solaris and taking all of

00:02:01,869 --> 00:02:09,390
the future changes they made to ZFS

00:02:04,469 --> 00:02:12,090
internal only and so out of that

00:02:09,390 --> 00:02:14,490
they forked the last version of open

00:02:12,090 --> 00:02:17,460
Solaris that was under the CD DL and

00:02:14,490 --> 00:02:20,580
made illumos and that basically became

00:02:17,460 --> 00:02:23,570
our upstream for ZFS because all the

00:02:20,580 --> 00:02:35,640
files were still in the same place and

00:02:23,570 --> 00:02:39,750
everything was good yeah

00:02:35,640 --> 00:02:41,430
so the Lumos became the upstream for

00:02:39,750 --> 00:02:43,920
freebsd and previously was able to

00:02:41,430 --> 00:02:45,840
follow that very quickly in a previous

00:02:43,920 --> 00:02:48,090
presentation I did some analysis on it

00:02:45,840 --> 00:02:52,680
and found that when a new feature went

00:02:48,090 --> 00:02:55,320
into a Lumos version of ZFS it on

00:02:52,680 --> 00:02:58,500
average was in freebsd within a week I

00:02:55,320 --> 00:03:00,330
think the slowest one in general was

00:02:58,500 --> 00:03:01,920
about sixty days that it took for a

00:03:00,330 --> 00:03:04,490
feature to get ported to FreeBSD because

00:03:01,920 --> 00:03:07,260
it required some amount of extra work

00:03:04,490 --> 00:03:09,240
you know supported in the OS it wasn't

00:03:07,260 --> 00:03:14,880
necessarily because of something in

00:03:09,240 --> 00:03:15,989
stead of s but that's over the time ZFS

00:03:14,880 --> 00:03:17,670
was ported to a number of different

00:03:15,989 --> 00:03:20,430
platforms including when it was

00:03:17,670 --> 00:03:21,750
introduced to freebsd in 2007 and then

00:03:20,430 --> 00:03:23,160
there were a number of different efforts

00:03:21,750 --> 00:03:25,800
to try to make something for linux

00:03:23,160 --> 00:03:27,630
including one using fuse they didn't

00:03:25,800 --> 00:03:29,519
really go anywhere but at Lawrence

00:03:27,630 --> 00:03:32,010
Livermore National Labs in the States

00:03:29,519 --> 00:03:35,760
they had what became these edifices on

00:03:32,010 --> 00:03:38,070
Linux project which started in 2008 but

00:03:35,760 --> 00:03:40,200
once we had all these and especially

00:03:38,070 --> 00:03:41,910
when they started to diverge of it

00:03:40,200 --> 00:03:45,840
features would get added to freebsd and

00:03:41,910 --> 00:03:47,400
not put back into a Lumos or in the set

00:03:45,840 --> 00:03:49,620
effects on linux project they added some

00:03:47,400 --> 00:03:51,989
extra command line flags that didn't

00:03:49,620 --> 00:03:54,239
exist anywhere else and it was starting

00:03:51,989 --> 00:03:56,130
to look at like you know ZFS wouldn't be

00:03:54,239 --> 00:03:58,320
the same everywhere and that would be

00:03:56,130 --> 00:04:00,239
bad so the open set of s project was

00:03:58,320 --> 00:04:02,700
started to try to coordinate development

00:04:00,239 --> 00:04:04,230
across platforms and keep you know so

00:04:02,700 --> 00:04:06,600
the ZFS knowledge you built up on

00:04:04,230 --> 00:04:07,230
previously would translate to any of the

00:04:06,600 --> 00:04:10,019
other os's

00:04:07,230 --> 00:04:12,450
and ZFS would be ZFS everywhere at least

00:04:10,019 --> 00:04:16,640
opens NFS would be open ZFS everywhere a

00:04:12,450 --> 00:04:16,640
game Oracle bad

00:04:19,790 --> 00:04:26,290
so opens NFS the original plan for open

00:04:23,660 --> 00:04:28,550
ZFS was actually this one common repo

00:04:26,290 --> 00:04:31,190
basically it be a github repo that

00:04:28,550 --> 00:04:33,470
contained only ZFS and none of the OS

00:04:31,190 --> 00:04:35,900
specific code and then each of the

00:04:33,470 --> 00:04:38,660
operating systems like illumos FreeBSD

00:04:35,900 --> 00:04:41,150
and Linux and then later OS 10 etc would

00:04:38,660 --> 00:04:43,670
pull down that common code and then add

00:04:41,150 --> 00:04:48,200
in their OS specific goop to make it

00:04:43,670 --> 00:04:49,640
work however that would take someone

00:04:48,200 --> 00:04:52,910
would have to do a lot of effort to keep

00:04:49,640 --> 00:04:55,280
this one true clean copy of ZFS with

00:04:52,910 --> 00:04:57,230
none of the OS goop in it and it turns

00:04:55,280 --> 00:04:59,990
out there were no volunteers to do all

00:04:57,230 --> 00:05:01,460
this extra work for nothing you know it

00:04:59,990 --> 00:05:03,470
wasn't gonna help the effort of any one

00:05:01,460 --> 00:05:06,260
operating system and it wasn't gonna

00:05:03,470 --> 00:05:07,730
help any company and so there was

00:05:06,260 --> 00:05:11,180
basically no way to make that

00:05:07,730 --> 00:05:14,270
sustainable so instead the the repo of

00:05:11,180 --> 00:05:18,410
record for open ZFS became a fork of the

00:05:14,270 --> 00:05:22,370
illumos code and because the illumos

00:05:18,410 --> 00:05:26,330
request to integrate process was very

00:05:22,370 --> 00:05:30,500
complicated for an outsider and very

00:05:26,330 --> 00:05:32,510
slow at the time if you made a pull

00:05:30,500 --> 00:05:36,080
request against the open set of s repo

00:05:32,510 --> 00:05:39,620
mat errands who is one of the so in in

00:05:36,080 --> 00:05:40,880
illumos they have these merge advocates

00:05:39,620 --> 00:05:42,800
and there's only like ten of them and

00:05:40,880 --> 00:05:45,410
there's the people that can commit and

00:05:42,800 --> 00:05:47,840
you give your code to them and they

00:05:45,410 --> 00:05:49,370
committed kind of thing so Matt and his

00:05:47,840 --> 00:05:51,470
team would take care of the illumos

00:05:49,370 --> 00:05:53,180
process for you so if you tried to

00:05:51,470 --> 00:05:54,800
upstream something to ZFS they would get

00:05:53,180 --> 00:05:56,150
reviewed and they would take care of

00:05:54,800 --> 00:05:58,130
getting it integrated for you because

00:05:56,150 --> 00:06:01,010
that process was too hostile for an

00:05:58,130 --> 00:06:03,020
outsider but as I mentioned previously

00:06:01,010 --> 00:06:05,330
tracked this repo very closely commit by

00:06:03,020 --> 00:06:08,390
commit we could pull in each commit that

00:06:05,330 --> 00:06:09,860
happened to be affecting ZFS and bring

00:06:08,390 --> 00:06:13,940
it into freebsd and we were able to keep

00:06:09,860 --> 00:06:16,670
up very nicely but then the number of

00:06:13,940 --> 00:06:19,670
platforms started to explode you know

00:06:16,670 --> 00:06:22,490
you have a Lumos was basically the start

00:06:19,670 --> 00:06:25,430
of it all and it's many distributions

00:06:22,490 --> 00:06:27,860
and then we had freebsd and derivatives

00:06:25,430 --> 00:06:29,120
like FreeNAS and pfSense and so on that

00:06:27,860 --> 00:06:31,850
were using ZFS

00:06:29,120 --> 00:06:33,500
and then net bsd started their version

00:06:31,850 --> 00:06:35,270
of opens edifice but they started by

00:06:33,500 --> 00:06:37,310
porting the one from FreeBSD rather than

00:06:35,270 --> 00:06:39,380
the one from illumos because it would

00:06:37,310 --> 00:06:41,570
more closely match their VFS and so on

00:06:39,380 --> 00:06:46,040
but you get these kind of follow-on

00:06:41,570 --> 00:06:47,810
effects where especially if you're very

00:06:46,040 --> 00:06:49,370
far downstream it can take a while for a

00:06:47,810 --> 00:06:50,960
commit that happens up here to trickle

00:06:49,370 --> 00:06:54,260
down to your upstream to then trickle

00:06:50,960 --> 00:06:56,270
down into your version of the OS which

00:06:54,260 --> 00:07:00,440
was especially funny when the port to OS

00:06:56,270 --> 00:07:02,330
10 started by or started from the ZFS on

00:07:00,440 --> 00:07:05,780
linux repo rather than the blue mouse so

00:07:02,330 --> 00:07:07,460
it ended up further away and then your

00:07:05,780 --> 00:07:11,630
gang got bored one day and ported it to

00:07:07,460 --> 00:07:12,860
Windows but the Windows port has come

00:07:11,630 --> 00:07:15,470
quite a long way in the last couple of

00:07:12,860 --> 00:07:18,590
years and is basically usable in a

00:07:15,470 --> 00:07:20,990
development sense at this point but you

00:07:18,590 --> 00:07:23,389
can actually import a ZFS pool on

00:07:20,990 --> 00:07:26,630
Windows and do send receive and read and

00:07:23,389 --> 00:07:28,370
write files and it does work just

00:07:26,630 --> 00:07:31,280
there's lots of debug messages and it's

00:07:28,370 --> 00:07:35,599
not fast but it's coming along and then

00:07:31,280 --> 00:07:38,780
OS V which is a kind of virtualization

00:07:35,599 --> 00:07:41,510
specific OS has also integrated instead

00:07:38,780 --> 00:07:44,030
of s and then lots of other Linux it

00:07:41,510 --> 00:07:45,590
shows like Ubuntu next long-term support

00:07:44,030 --> 00:07:48,110
release is going to support ZFS on route

00:07:45,590 --> 00:07:50,810
and proxmox which is a hypervisor

00:07:48,110 --> 00:07:55,970
appliance uses edifice on route instead

00:07:50,810 --> 00:07:57,800
of s2 back all the VMS but we even

00:07:55,970 --> 00:08:00,410
though the goal of the open service

00:07:57,800 --> 00:08:01,970
project was to prevent divergence there

00:08:00,410 --> 00:08:05,210
still being quite a bit of divergence as

00:08:01,970 --> 00:08:06,919
we get new features generally start in

00:08:05,210 --> 00:08:09,590
one OS and maybe get sent to the others

00:08:06,919 --> 00:08:12,530
but that generally relies on the other

00:08:09,590 --> 00:08:15,949
wes coming and getting them and

00:08:12,530 --> 00:08:17,750
especially at before now that process

00:08:15,949 --> 00:08:19,970
usually involved somebody from linux

00:08:17,750 --> 00:08:21,740
should upstream their changes into a

00:08:19,970 --> 00:08:24,380
Lumos and then once they were there that

00:08:21,740 --> 00:08:26,000
we pulled into freebsd but again now

00:08:24,380 --> 00:08:27,320
you're further away from where the

00:08:26,000 --> 00:08:32,120
change is happening you're many steps

00:08:27,320 --> 00:08:33,469
away and that's slower so one of the

00:08:32,120 --> 00:08:35,659
things opens that efest did early on was

00:08:33,469 --> 00:08:38,120
replaced the concept of the pool version

00:08:35,659 --> 00:08:40,940
numbers if you remember using is edifis

00:08:38,120 --> 00:08:42,270
on freebsd back in like 7 and 8 days you

00:08:40,940 --> 00:08:45,420
started with you know

00:08:42,270 --> 00:08:47,370
like said of SV 12 and then the 17 and

00:08:45,420 --> 00:08:51,500
20 and then eventually got to 28 and

00:08:47,370 --> 00:08:53,720
that's when Oracle ruined everything but

00:08:51,500 --> 00:08:55,890
basically from that point we decided

00:08:53,720 --> 00:08:58,140
because development is happening across

00:08:55,890 --> 00:08:59,460
many different platforms features are

00:08:58,140 --> 00:09:01,560
going to show up in different orders on

00:08:59,460 --> 00:09:03,450
different platforms so a monotonically

00:09:01,560 --> 00:09:06,630
increasing version number is not very

00:09:03,450 --> 00:09:08,130
helpful for that because you know if the

00:09:06,630 --> 00:09:09,420
30 is going to mean one thing on

00:09:08,130 --> 00:09:11,850
previously and another thing on linux

00:09:09,420 --> 00:09:14,850
that's not going to work so instead we

00:09:11,850 --> 00:09:16,680
added feature flags so basically your

00:09:14,850 --> 00:09:18,960
pool has a list of features that are

00:09:16,680 --> 00:09:20,940
either on or off and then when you go to

00:09:18,960 --> 00:09:23,610
import that pool on a different platform

00:09:20,940 --> 00:09:25,950
or a different version of FreeBSD you

00:09:23,610 --> 00:09:28,050
can only read that pool if you have all

00:09:25,950 --> 00:09:29,850
the features that are enabled or if

00:09:28,050 --> 00:09:30,930
those features have a special flight

00:09:29,850 --> 00:09:32,940
says this feature is read-only

00:09:30,930 --> 00:09:34,410
compatible it means that you can read

00:09:32,940 --> 00:09:35,790
the data but you can't change data

00:09:34,410 --> 00:09:40,650
because it requires you to have some

00:09:35,790 --> 00:09:44,970
feature you don't have but so that solve

00:09:40,650 --> 00:09:47,610
the problem of features but so it'd be

00:09:44,970 --> 00:09:49,560
obvious if your pooled had a feature or

00:09:47,610 --> 00:09:53,610
didn't have a feature that some other OS

00:09:49,560 --> 00:09:54,930
did but bug fixes sometimes you know as

00:09:53,610 --> 00:09:56,730
part of writing this new feature they

00:09:54,930 --> 00:09:58,620
found and fix the bug somewhere else

00:09:56,730 --> 00:10:00,960
instead of s and because it was buried

00:09:58,620 --> 00:10:02,370
in that feature or whatever FreeBSD

00:10:00,960 --> 00:10:04,170
would know that there was a bug fix and

00:10:02,370 --> 00:10:06,300
it wouldn't get copied into a Lumos and

00:10:04,170 --> 00:10:07,620
then back down into FreeBSD and so we

00:10:06,300 --> 00:10:09,570
wouldn't know that there was this bug

00:10:07,620 --> 00:10:13,530
and that it had been fixed elsewhere and

00:10:09,570 --> 00:10:16,290
so the versions kept diverging and again

00:10:13,530 --> 00:10:17,850
yo FreeBSD developers are doing a bunch

00:10:16,290 --> 00:10:20,100
of work and stuff they don't necessarily

00:10:17,850 --> 00:10:22,230
go talk to a bunch of Linux developers

00:10:20,100 --> 00:10:23,250
about it and so each camp didn't

00:10:22,230 --> 00:10:25,290
necessarily know what the other was

00:10:23,250 --> 00:10:27,300
doing or would only hear about it at the

00:10:25,290 --> 00:10:30,060
end when it was actually available not

00:10:27,300 --> 00:10:32,640
in progress and so that caused quite a

00:10:30,060 --> 00:10:36,120
bit of divergence in the edifice

00:10:32,640 --> 00:10:36,780
codebase so to help with that back in

00:10:36,120 --> 00:10:38,820
00:10:36,780 --> 00:10:41,640
Matt Aaron started up the open ZFS

00:10:38,820 --> 00:10:43,470
developer summit which was a once yearly

00:10:41,640 --> 00:10:45,360
summit to bring together developers from

00:10:43,470 --> 00:10:46,890
all the platforms and actually talk

00:10:45,360 --> 00:10:48,240
about what they were working on so

00:10:46,890 --> 00:10:51,540
everybody have a better idea of what's

00:10:48,240 --> 00:10:53,250
going on and also made it a good place

00:10:51,540 --> 00:10:54,450
to discuss future direction and features

00:10:53,250 --> 00:10:56,459
and so on

00:10:54,450 --> 00:10:58,410
so in that first one they had a platform

00:10:56,459 --> 00:11:00,570
panel with representatives from each of

00:10:58,410 --> 00:11:02,370
the different OSS that was active

00:11:00,570 --> 00:11:04,019
instead of s at the time and then have a

00:11:02,370 --> 00:11:05,760
vendor lightning talk so the companies

00:11:04,019 --> 00:11:07,800
could also present what cool things they

00:11:05,760 --> 00:11:10,230
were working on and so on so when it

00:11:07,800 --> 00:11:13,230
started back in 2013 there were 30

00:11:10,230 --> 00:11:15,329
developers that attended now the

00:11:13,230 --> 00:11:17,970
conference is actually limited to 100

00:11:15,329 --> 00:11:22,440
slots because of the venue we use and so

00:11:17,970 --> 00:11:23,639
we try to the first so many tickets are

00:11:22,440 --> 00:11:25,050
available to anybody and then after that

00:11:23,639 --> 00:11:27,779
it kind of goes into a weightless thing

00:11:25,050 --> 00:11:29,730
where we sadly have to pick and choose

00:11:27,779 --> 00:11:33,209
whose can come because we only have so

00:11:29,730 --> 00:11:34,639
much room but we also added a second day

00:11:33,209 --> 00:11:36,990
to the conference which is the hackathon

00:11:34,639 --> 00:11:39,000
where you can get in a room with a bunch

00:11:36,990 --> 00:11:40,980
of other developers and work on

00:11:39,000 --> 00:11:43,199
prototypes of new features and being

00:11:40,980 --> 00:11:44,910
able to have the experts on every

00:11:43,199 --> 00:11:46,709
different subsystems edifice in the room

00:11:44,910 --> 00:11:49,769
makes it much quicker to be able to ask

00:11:46,709 --> 00:11:51,389
questions like you know where do I look

00:11:49,769 --> 00:11:54,060
to find the code that does this in the

00:11:51,389 --> 00:11:56,370
arc or whatever and also facilitates

00:11:54,060 --> 00:11:57,480
those kind of design discussions being

00:11:56,370 --> 00:11:59,339
able to get a bunch of set of s

00:11:57,480 --> 00:12:01,980
developers around a whiteboard and draw

00:11:59,339 --> 00:12:03,630
out how a feature will work and have all

00:12:01,980 --> 00:12:05,010
their experience about you know there's

00:12:03,630 --> 00:12:06,899
going to be a gotcha if we tried it this

00:12:05,010 --> 00:12:12,089
way we might want to do it this way is

00:12:06,899 --> 00:12:15,240
super helpful so at the summit last year

00:12:12,089 --> 00:12:17,130
especially as these edifice on linux

00:12:15,240 --> 00:12:18,800
project was becoming more and more the

00:12:17,130 --> 00:12:21,480
place where more work was happening as

00:12:18,800 --> 00:12:22,740
some illumos based companies had

00:12:21,480 --> 00:12:24,120
switched to linux or just in general

00:12:22,740 --> 00:12:29,190
linux has been attracting more

00:12:24,120 --> 00:12:31,769
developers we decided to in order to

00:12:29,190 --> 00:12:34,140
keep that reigned in that we would need

00:12:31,769 --> 00:12:36,420
to have meetings more than once a year

00:12:34,140 --> 00:12:39,600
so we started the zetas fest leadership

00:12:36,420 --> 00:12:43,500
meeting which is a monthly call the time

00:12:39,600 --> 00:12:45,360
changes every that we do two calls or

00:12:43,500 --> 00:12:47,279
the first two any two months are done

00:12:45,360 --> 00:12:51,029
where it's convenient for North America

00:12:47,279 --> 00:12:52,949
and then we shift the one on the every

00:12:51,029 --> 00:12:55,560
third meeting to be more convenient for

00:12:52,949 --> 00:12:57,089
Europe versus Asia so that we can cover

00:12:55,560 --> 00:12:59,760
so everybody gets a chance to

00:12:57,089 --> 00:13:01,589
participate because it's really helpful

00:12:59,760 --> 00:13:03,569
to have the developer that's working on

00:13:01,589 --> 00:13:05,790
OS 10 and windows support and the call

00:13:03,569 --> 00:13:07,470
but he lives in Japan which is you know

00:13:05,790 --> 00:13:09,660
12 hours off set for

00:13:07,470 --> 00:13:11,520
the east coast of North America but it

00:13:09,660 --> 00:13:12,840
means any time that's convenient for him

00:13:11,520 --> 00:13:14,760
is inconvenient for all the Russian

00:13:12,840 --> 00:13:18,150
developers and so we shuffle back and

00:13:14,760 --> 00:13:19,530
forth but the goal is to keep the

00:13:18,150 --> 00:13:20,760
platform better in sync and keep

00:13:19,530 --> 00:13:23,490
everybody better informed of what's

00:13:20,760 --> 00:13:26,430
going on especially as we're designing

00:13:23,490 --> 00:13:27,960
features said laying out the feature a

00:13:26,430 --> 00:13:30,060
specific way makes perfect sense in your

00:13:27,960 --> 00:13:32,070
platform but on some other platform with

00:13:30,060 --> 00:13:33,090
limitation or something might mean it

00:13:32,070 --> 00:13:35,160
we've been better do it slightly

00:13:33,090 --> 00:13:36,690
differently that wouldn't have made any

00:13:35,160 --> 00:13:38,760
difference to say the Linney's

00:13:36,690 --> 00:13:41,100
implementation will make the freebsd one

00:13:38,760 --> 00:13:43,950
work better or be more possible or

00:13:41,100 --> 00:13:44,880
whatever then I say well this meeting is

00:13:43,950 --> 00:13:46,740
open to anyone

00:13:44,880 --> 00:13:49,920
it's a giant zoom call there's usually

00:13:46,740 --> 00:13:52,170
like 50 ish people on not everybody

00:13:49,920 --> 00:13:53,850
talks so that helps but they're also

00:13:52,170 --> 00:13:55,470
live streamed and recorded and available

00:13:53,850 --> 00:13:57,060
on YouTube so you can go back and watch

00:13:55,470 --> 00:13:59,400
all the meetings to get caught up if you

00:13:57,060 --> 00:14:01,980
want or it's just a good way to keep

00:13:59,400 --> 00:14:05,090
informed on what's happening for example

00:14:01,980 --> 00:14:09,180
the last one was Tuesday of this week

00:14:05,090 --> 00:14:11,040
last week and it was announced that one

00:14:09,180 --> 00:14:13,740
of the companies has is going to open

00:14:11,040 --> 00:14:15,540
source a better version of dedupe that

00:14:13,740 --> 00:14:18,180
does it based on the time we needed you

00:14:15,540 --> 00:14:20,790
to block not just the hash so that the

00:14:18,180 --> 00:14:25,500
the performance isn't nearly as bad as

00:14:20,790 --> 00:14:26,970
the current DD so the outcome of that is

00:14:25,500 --> 00:14:28,770
that these leadership meetings have been

00:14:26,970 --> 00:14:31,010
very successful we got better direction

00:14:28,770 --> 00:14:33,000
and we started working on some of the

00:14:31,010 --> 00:14:34,800
interesting problems we've come into

00:14:33,000 --> 00:14:37,070
like that ZFS has never had any

00:14:34,800 --> 00:14:40,170
defecation policy for removing a feature

00:14:37,070 --> 00:14:42,660
and needing to work out those kind of

00:14:40,170 --> 00:14:44,220
things but also working out the

00:14:42,660 --> 00:14:48,660
cross-platform compatibility so that's

00:14:44,220 --> 00:14:50,550
better and the other one is working out

00:14:48,660 --> 00:14:53,610
how to name some of the two tables and

00:14:50,550 --> 00:14:55,110
stuff you know what the original

00:14:53,610 --> 00:14:57,120
developer thinks it should be called and

00:14:55,110 --> 00:14:58,650
what people more familiar with the

00:14:57,120 --> 00:15:02,040
administrative side think it should be

00:14:58,650 --> 00:15:03,450
tough for example I'm sure many people

00:15:02,040 --> 00:15:07,500
that use data fests are familiar with

00:15:03,450 --> 00:15:09,990
the a shift variable that one was never

00:15:07,500 --> 00:15:12,270
that's an internal implementation detail

00:15:09,990 --> 00:15:13,589
if it was exposed to the user it

00:15:12,270 --> 00:15:16,560
definitely should have been called like

00:15:13,589 --> 00:15:19,080
minimum sector size or something because

00:15:16,560 --> 00:15:22,020
and it should probably be in bytes not

00:15:19,080 --> 00:15:25,500
in powers of two

00:15:22,020 --> 00:15:27,150
and so trying to prevent more of that

00:15:25,500 --> 00:15:29,490
type of thing or if you remember back in

00:15:27,150 --> 00:15:34,080
older versions of ZFS especially on

00:15:29,490 --> 00:15:37,800
FreeBSD where you'd have like was it the

00:15:34,080 --> 00:15:40,320
prefetch disabled was the flag and so

00:15:37,800 --> 00:15:42,510
one was actually disabled and 0 was

00:15:40,320 --> 00:15:44,250
enabled and it's very confusing when you

00:15:42,510 --> 00:15:48,570
have a double negative like that and so

00:15:44,250 --> 00:15:50,040
on so trying to avoid more of that so

00:15:48,570 --> 00:15:53,790
some of the ones that are currently

00:15:50,040 --> 00:15:55,800
being worked on is that for example NFS

00:15:53,790 --> 00:15:57,570
you have the share NFS property and you

00:15:55,800 --> 00:16:00,360
can stick a bunch of NFS settings in

00:15:57,570 --> 00:16:02,610
that but it turns out the NFS settings

00:16:00,360 --> 00:16:05,130
on a Lumos linux and freebsd don't match

00:16:02,610 --> 00:16:07,740
up at all completely different settings

00:16:05,130 --> 00:16:09,060
and formats and so this means that if

00:16:07,740 --> 00:16:10,740
you export the pool on freebsd and

00:16:09,060 --> 00:16:13,230
imported non illumos your NFS chairs

00:16:10,740 --> 00:16:15,870
aren't gonna work correctly or it might

00:16:13,230 --> 00:16:18,570
even actually confuse or break the NFS

00:16:15,870 --> 00:16:20,220
daemon on the OS as this is gonna be

00:16:18,570 --> 00:16:22,680
like oh you have an invalid config now

00:16:20,220 --> 00:16:24,540
I'm not going to share anything you

00:16:22,680 --> 00:16:27,180
definitely don't want that

00:16:24,540 --> 00:16:28,920
so trying to decide whether zed if I

00:16:27,180 --> 00:16:31,710
should have its own common least common

00:16:28,920 --> 00:16:33,090
denominator implementation or if there

00:16:31,710 --> 00:16:35,400
should be a separate property for each

00:16:33,090 --> 00:16:37,410
OS so you actually said share NFS :

00:16:35,400 --> 00:16:39,180
FreeBSD and put the FreeBSD settings and

00:16:37,410 --> 00:16:40,560
if you're gonna use it on another west

00:16:39,180 --> 00:16:43,410
that'll be ignored and you can set the

00:16:40,560 --> 00:16:45,120
Linux specific ones if you want but you

00:16:43,410 --> 00:16:46,710
know that leads to oh I updated the

00:16:45,120 --> 00:16:49,110
FreeBSD ones I forgot to update Linux

00:16:46,710 --> 00:16:50,430
ones and now it gets problem so ah that

00:16:49,110 --> 00:16:54,060
discussions still aren't going if you

00:16:50,430 --> 00:16:55,500
have ideas or gotchas about that you can

00:16:54,060 --> 00:16:58,080
participate on the opens at a festival

00:16:55,500 --> 00:17:03,060
for my own list or join the call next

00:16:58,080 --> 00:17:04,680
month other problems including extended

00:17:03,060 --> 00:17:07,050
attributes that turns out the way X

00:17:04,680 --> 00:17:09,120
adders are implemented in each OS we

00:17:07,050 --> 00:17:11,250
each have our own namespace you know

00:17:09,120 --> 00:17:13,530
FreeBSD 6 the word FreeBSD at the

00:17:11,250 --> 00:17:15,360
beginning of the attribute or user if

00:17:13,530 --> 00:17:17,430
it's a user attribute and Linux does its

00:17:15,360 --> 00:17:19,740
own thing that's different and Solaris

00:17:17,430 --> 00:17:24,000
uses some random jumble of letters that

00:17:19,740 --> 00:17:26,579
I don't understand but again you want a

00:17:24,000 --> 00:17:29,790
pool created on FreeBSD that say using

00:17:26,579 --> 00:17:32,010
samba and storing extended attributes

00:17:29,790 --> 00:17:33,540
for Windows to just work when it goes on

00:17:32,010 --> 00:17:34,290
Linux not for all those extended

00:17:33,540 --> 00:17:36,600
attributes to the

00:17:34,290 --> 00:17:38,040
appear when you go to Windows especially

00:17:36,600 --> 00:17:40,200
in this case where previously and Linux

00:17:38,040 --> 00:17:44,280
are both using the same sample software

00:17:40,200 --> 00:17:47,420
to share assemby first illumos has its

00:17:44,280 --> 00:17:50,420
own different SMB implementation and so

00:17:47,420 --> 00:17:53,340
you know we don't want to make the

00:17:50,420 --> 00:17:55,650
Exeter's feature of that offense

00:17:53,340 --> 00:17:57,600
specific to samba because you know we're

00:17:55,650 --> 00:18:03,360
also getting mac and windows support

00:17:57,600 --> 00:18:04,920
here so how do we work that out and then

00:18:03,360 --> 00:18:06,600
we have the additional consideration of

00:18:04,920 --> 00:18:09,000
you know on freebsd in illumos we could

00:18:06,600 --> 00:18:11,400
actually change the VFS code to make it

00:18:09,000 --> 00:18:13,530
you know always use zpool dot as a

00:18:11,400 --> 00:18:17,040
prefix for x adders or something if it's

00:18:13,530 --> 00:18:19,800
that offense but on us on linux and on

00:18:17,040 --> 00:18:22,490
OS 10 and windows the people working on

00:18:19,800 --> 00:18:24,750
ZFS have no control over the OS you know

00:18:22,490 --> 00:18:26,910
because that FS on linux can't the

00:18:24,750 --> 00:18:29,340
upstream the upstream developers like to

00:18:26,910 --> 00:18:33,060
be hostile to ZFS and try to do things

00:18:29,340 --> 00:18:35,640
to break it even and so you know we're

00:18:33,060 --> 00:18:40,200
not gonna convince them to make a VFS

00:18:35,640 --> 00:18:42,840
change specifically for ZFS and so you

00:18:40,200 --> 00:18:44,190
know some of our typically the immediate

00:18:42,840 --> 00:18:45,450
solutions that the previously that Lou

00:18:44,190 --> 00:18:47,040
most people thought of turns that won't

00:18:45,450 --> 00:18:51,330
work on Linux because they don't get to

00:18:47,040 --> 00:18:53,520
control their VFS layer or the

00:18:51,330 --> 00:18:54,920
deprecation policy it's you know Zen

00:18:53,520 --> 00:18:57,270
offense has been around for 18 years now

00:18:54,920 --> 00:18:59,580
and this is the first time we've ever

00:18:57,270 --> 00:19:02,100
thought of removing a feature but it

00:18:59,580 --> 00:19:04,680
turns out so there's a feature separate

00:19:02,100 --> 00:19:05,880
from D dupe called deduplicated send so

00:19:04,680 --> 00:19:08,310
this is when you're doing is that if I

00:19:05,880 --> 00:19:10,320
send it doesn't matter whether you're

00:19:08,310 --> 00:19:12,480
using deduplication or not because the

00:19:10,320 --> 00:19:15,360
send protocol serializes everything and

00:19:12,480 --> 00:19:17,010
is unrelated to what's on your disk but

00:19:15,360 --> 00:19:19,320
it has a deduplication feature where it

00:19:17,010 --> 00:19:20,790
will start as it's doing the sin don't

00:19:19,320 --> 00:19:22,920
keep track of the blocks that is sent

00:19:20,790 --> 00:19:24,600
and if it sees a duplicate block it will

00:19:22,920 --> 00:19:26,640
just reference the previous version of

00:19:24,600 --> 00:19:28,230
it but friends that this doesn't work

00:19:26,640 --> 00:19:31,710
very well and it's intest very well and

00:19:28,230 --> 00:19:33,960
so they'd like to remove it but you know

00:19:31,710 --> 00:19:35,280
we've never done that before and how do

00:19:33,960 --> 00:19:37,440
we actually do this how long do we need

00:19:35,280 --> 00:19:40,110
to give people and it turns out we're

00:19:37,440 --> 00:19:42,540
also going to need to build a utility to

00:19:40,110 --> 00:19:46,200
take a stream that was made previously

00:19:42,540 --> 00:19:48,179
that used d dupe and undated rehydrate

00:19:46,200 --> 00:19:49,740
it as we say so that you'll still

00:19:48,179 --> 00:19:52,350
able to receive it because one of the

00:19:49,740 --> 00:19:54,929
guarantees we make with ZFS send his

00:19:52,350 --> 00:19:56,460
views NFS send and store it you'll still

00:19:54,929 --> 00:19:58,830
be able to restore that like ten years

00:19:56,460 --> 00:20:00,539
later on a newer version of Zed of s is

00:19:58,830 --> 00:20:03,090
that if I send is backwards compatible

00:20:00,539 --> 00:20:05,429
down to old versions of his NFS and all

00:20:03,090 --> 00:20:08,279
future versions acidifies so we don't

00:20:05,429 --> 00:20:09,809
want to break that so we have to figure

00:20:08,279 --> 00:20:11,789
out how to do that and how much warning

00:20:09,809 --> 00:20:14,039
we need to give people and especially

00:20:11,789 --> 00:20:16,070
you have problems like the current

00:20:14,039 --> 00:20:18,960
long-term support version of Ubuntu

00:20:16,070 --> 00:20:21,049
includes gen effects on Linux version

00:20:18,960 --> 00:20:25,139
zero that 6.4 or something like that

00:20:21,049 --> 00:20:27,690
we're currently on 0.8 and that ones two

00:20:25,139 --> 00:20:28,889
or three years old at least but is still

00:20:27,690 --> 00:20:32,159
going to be supportive for a couple more

00:20:28,889 --> 00:20:34,909
years so if we don't get a fix for this

00:20:32,159 --> 00:20:36,269
well even if we defecate this now and

00:20:34,909 --> 00:20:38,309
remove it

00:20:36,269 --> 00:20:40,529
the next long-term support release of

00:20:38,309 --> 00:20:42,570
Ubuntu that comes out next April or

00:20:40,529 --> 00:20:43,860
whatever is going to be using the 0.8

00:20:42,570 --> 00:20:45,509
branch and it's still going to have this

00:20:43,860 --> 00:20:47,460
feature so they're still going to be

00:20:45,509 --> 00:20:50,070
people with this feature six years from

00:20:47,460 --> 00:20:51,330
now so we really have to think about the

00:20:50,070 --> 00:20:53,639
defecation policy because we're gonna

00:20:51,330 --> 00:20:55,139
have such a long lead time before things

00:20:53,639 --> 00:20:56,159
actually get deprecated so we kind of

00:20:55,139 --> 00:20:57,960
want to defecate them as soon as

00:20:56,159 --> 00:20:59,549
possible because we're already going to

00:20:57,960 --> 00:21:03,570
have to put up with it for six years or

00:20:59,549 --> 00:21:06,809
more and another one that we want to get

00:21:03,570 --> 00:21:09,659
rid of but maybe we can't now is ditto

00:21:06,809 --> 00:21:11,429
the idea was that if you write if you

00:21:09,659 --> 00:21:13,019
have when you're deduping if you

00:21:11,429 --> 00:21:16,259
actually have a block that you have more

00:21:13,019 --> 00:21:18,779
than 100 instances of you that's right a

00:21:16,259 --> 00:21:20,100
second copy of it to the disk instead of

00:21:18,779 --> 00:21:21,690
detailing it all down to one coffee

00:21:20,100 --> 00:21:23,820
because you have a hundred different

00:21:21,690 --> 00:21:26,419
copies of this if that one goes bad

00:21:23,820 --> 00:21:29,460
you'll feel really really not good

00:21:26,419 --> 00:21:32,159
but it turns out that while that works

00:21:29,460 --> 00:21:37,139
during a scrubber or e silver the second

00:21:32,159 --> 00:21:40,320
copy never gets fixed whoops

00:21:37,139 --> 00:21:41,909
so rather than fixing that it was like

00:21:40,320 --> 00:21:45,029
oh we could just remove it that we find

00:21:41,909 --> 00:21:46,379
like nobody uses D do but then last week

00:21:45,029 --> 00:21:47,610
somebody's like well we got this new

00:21:46,379 --> 00:21:49,289
version of D do if that works much

00:21:47,610 --> 00:21:52,019
better and we're gonna open source it

00:21:49,289 --> 00:21:53,429
for everybody and so now maybe we can't

00:21:52,019 --> 00:21:56,340
get rid of dudududu and somebody has to

00:21:53,429 --> 00:22:00,389
fix it but either way we need to figure

00:21:56,340 --> 00:22:01,990
out what to do there then we have the

00:22:00,389 --> 00:22:03,580
problem again

00:22:01,990 --> 00:22:05,080
some Linux would like to remove support

00:22:03,580 --> 00:22:08,559
for sent OS six in Red Hat Enterprise

00:22:05,080 --> 00:22:12,220
Linux six since but those have

00:22:08,559 --> 00:22:15,160
end-of-life times yo said Wes and Red

00:22:12,220 --> 00:22:19,150
Hat provide ten years with a version of

00:22:15,160 --> 00:22:21,790
the LS and well sent to a six will still

00:22:19,150 --> 00:22:23,650
be supported in the 0.8 branch of opens

00:22:21,790 --> 00:22:25,660
the errors that have s on Linux we want

00:22:23,650 --> 00:22:27,460
to remove it from 0.9 but again how much

00:22:25,660 --> 00:22:29,559
warning do we need to give people that

00:22:27,460 --> 00:22:30,970
you know if you're using send OS six you

00:22:29,559 --> 00:22:33,130
can't have new features

00:22:30,970 --> 00:22:36,070
I think they mostly understand that but

00:22:33,130 --> 00:22:37,480
we have to figure out how to message

00:22:36,070 --> 00:22:38,710
that like how do we get this message out

00:22:37,480 --> 00:22:42,370
to enough people that we're not going to

00:22:38,710 --> 00:22:44,500
surprise people and then we also have

00:22:42,370 --> 00:22:47,860
the same problem currently you can use

00:22:44,500 --> 00:22:49,660
the newer version of ZFS that we'll talk

00:22:47,860 --> 00:22:52,780
about in a minute on freebsd by

00:22:49,660 --> 00:22:54,610
installing it as a port but if we

00:22:52,780 --> 00:22:55,330
continue with offering that so that

00:22:54,610 --> 00:22:58,450
you'll be able to have like a

00:22:55,330 --> 00:23:00,010
development branch of ZFS as a port to

00:22:58,450 --> 00:23:01,900
update the version that instead of the

00:23:00,010 --> 00:23:03,070
version that's in the base system how

00:23:01,900 --> 00:23:04,660
we're going to manage the support

00:23:03,070 --> 00:23:06,490
lifecycle for that because at some point

00:23:04,660 --> 00:23:08,920
you know you're gonna be running the

00:23:06,490 --> 00:23:10,750
oldest supported version of freebsd and

00:23:08,920 --> 00:23:13,179
trying to run the newest version of ZFS

00:23:10,750 --> 00:23:15,010
and do we allow that and how long do we

00:23:13,179 --> 00:23:21,429
have to put up with people that won't

00:23:15,010 --> 00:23:23,320
upgrade and then other problem is some

00:23:21,429 --> 00:23:25,510
features instead of s are getting a bit

00:23:23,320 --> 00:23:27,160
old for example bales ad for compressors

00:23:25,510 --> 00:23:30,429
really good and really fast and we'd

00:23:27,160 --> 00:23:32,140
like it but we've bundled the version of

00:23:30,429 --> 00:23:34,780
it that back then didn't even have a

00:23:32,140 --> 00:23:36,370
version number into ZFS and we've just

00:23:34,780 --> 00:23:38,530
continued to use that same version

00:23:36,370 --> 00:23:41,350
there's a newer version that's about 30%

00:23:38,530 --> 00:23:44,380
faster and has a number of optimizations

00:23:41,350 --> 00:23:48,000
for newer CPUs but if we import it it

00:23:44,380 --> 00:23:48,000
might break some things in particular

00:23:48,540 --> 00:23:51,850
currently we expect that if you take the

00:23:50,590 --> 00:23:54,040
same data and compress it again you'll

00:23:51,850 --> 00:23:56,290
get the same hash but if it turns out we

00:23:54,040 --> 00:23:57,490
can press it better nowadays it won't

00:23:56,290 --> 00:23:59,830
have the same hash and this will break

00:23:57,490 --> 00:24:01,480
some things so trying to figure out how

00:23:59,830 --> 00:24:03,700
to do that it mostly came up when I was

00:24:01,480 --> 00:24:06,070
looking at importing said standard which

00:24:03,700 --> 00:24:07,390
is a new confessor and is under active

00:24:06,070 --> 00:24:10,270
development has new versions very

00:24:07,390 --> 00:24:11,470
frequently and you know just over the

00:24:10,270 --> 00:24:14,230
course of my development of it they've

00:24:11,470 --> 00:24:15,559
had two new major versions well

00:24:14,230 --> 00:24:18,499
little versions or whatever

00:24:15,559 --> 00:24:20,450
but you know we don't want to be sucked

00:24:18,499 --> 00:24:22,249
on the old version when all the when the

00:24:20,450 --> 00:24:23,899
new version has better compression and

00:24:22,249 --> 00:24:24,889
more speed and more of the goodness that

00:24:23,899 --> 00:24:28,419
we're trying to get in the first place

00:24:24,889 --> 00:24:32,179
so how to work out how to deal with that

00:24:28,419 --> 00:24:34,190
and so the other big feature coming out

00:24:32,179 --> 00:24:36,529
of the open set of s leadership meeting

00:24:34,190 --> 00:24:38,779
is trying to come up with compatibility

00:24:36,529 --> 00:24:41,570
stuff so in particular when you create a

00:24:38,779 --> 00:24:43,759
new pool on any OS it defaults to having

00:24:41,570 --> 00:24:45,559
all the newest features turned on but

00:24:43,759 --> 00:24:46,879
that list of features might not be

00:24:45,559 --> 00:24:48,919
compatible with the other less you're

00:24:46,879 --> 00:24:51,830
trying to use or even you know even in

00:24:48,919 --> 00:24:53,330
the cases used rubbing in freebsd 12.1

00:24:51,830 --> 00:24:54,710
when it comes out in november and you

00:24:53,330 --> 00:24:56,269
create a pool then try to import it on

00:24:54,710 --> 00:24:59,809
your 11.3 machine and i won't work

00:24:56,269 --> 00:25:01,879
because it has one newer feature may be

00:24:59,809 --> 00:25:04,820
the default shouldn't be that so we're

00:25:01,879 --> 00:25:08,869
looking at creating a special flag that

00:25:04,820 --> 00:25:10,190
would be opens out of s - the year so it

00:25:08,869 --> 00:25:11,090
would be whatever features were

00:25:10,190 --> 00:25:13,490
supported by the lowest common

00:25:11,090 --> 00:25:16,249
denominator of set of s platforms at

00:25:13,490 --> 00:25:17,990
January of that year so you'd be able to

00:25:16,249 --> 00:25:20,299
easily say just give me something that

00:25:17,990 --> 00:25:23,149
will work with every set of s in 2019 or

00:25:20,299 --> 00:25:24,860
in 2020 or whatever or you know give me

00:25:23,149 --> 00:25:27,769
a version that will work with FreeBSD

00:25:24,860 --> 00:25:29,240
twelve but how do we keep that list from

00:25:27,769 --> 00:25:30,649
getting too long you know we have to

00:25:29,240 --> 00:25:32,389
decide what we're going to support and

00:25:30,649 --> 00:25:35,330
maybe that's previous t12 rather than

00:25:32,389 --> 00:25:37,519
12.1 vs. 12.2 that 12 this rate whatever

00:25:35,330 --> 00:25:38,570
but you know and how long before we can

00:25:37,519 --> 00:25:39,710
prune off that list

00:25:38,570 --> 00:25:42,889
we don't wanna break people's scripts

00:25:39,710 --> 00:25:45,110
and you know need to figure out how did

00:25:42,889 --> 00:25:46,759
that and if you have ideas please speak

00:25:45,110 --> 00:25:50,720
up on the opens edifice developer

00:25:46,759 --> 00:25:53,350
mailing list so the big thing that this

00:25:50,720 --> 00:25:57,799
talk was about is the change of upstream

00:25:53,350 --> 00:25:58,909
it turns out that like 70 plus percent

00:25:57,799 --> 00:26:01,929
of the new development instead of s

00:25:58,909 --> 00:26:05,419
happens in these edifice on Linux repo

00:26:01,929 --> 00:26:07,970
and in general is taking a very long

00:26:05,419 --> 00:26:10,730
time or is not being ported to illumos

00:26:07,970 --> 00:26:12,889
and since illumise is free pcs upstream

00:26:10,730 --> 00:26:15,740
it's either taking a long time or we're

00:26:12,889 --> 00:26:17,299
not getting the new features so we'd

00:26:15,740 --> 00:26:20,389
like to change our upstream to ZFS on

00:26:17,299 --> 00:26:26,000
Linux so that we will get the features

00:26:20,389 --> 00:26:28,519
faster but as we tried to do that it

00:26:26,000 --> 00:26:29,090
turns out that because ZFS on Linux was

00:26:28,519 --> 00:26:31,970
developed

00:26:29,090 --> 00:26:33,860
for a long period of time as they added

00:26:31,970 --> 00:26:36,070
features they worked on them but the

00:26:33,860 --> 00:26:38,240
imported stuff from illumos in between

00:26:36,070 --> 00:26:39,830
so when I tried to pull over one of the

00:26:38,240 --> 00:26:41,840
features that's relatively small called

00:26:39,830 --> 00:26:45,500
the multi mount protection designed for

00:26:41,840 --> 00:26:46,790
jbods you know they had the first couple

00:26:45,500 --> 00:26:49,010
of commits to it and then they merge

00:26:46,790 --> 00:26:51,320
this feature form illumos that rewrote

00:26:49,010 --> 00:26:53,570
house equal import works which is where

00:26:51,320 --> 00:26:55,280
most of the MMP code goes and then they

00:26:53,570 --> 00:26:57,020
had more commits to it while trying to

00:26:55,280 --> 00:26:59,270
port that to freebsd when all the

00:26:57,020 --> 00:27:01,130
illumos commits are already merged but

00:26:59,270 --> 00:27:04,250
in a different order made it really

00:27:01,130 --> 00:27:07,490
really difficult so it was decided the

00:27:04,250 --> 00:27:11,270
easier way would be just report all of

00:27:07,490 --> 00:27:12,860
ZFS on linux to freebsd because the way

00:27:11,270 --> 00:27:14,600
linux did it was basically take the

00:27:12,860 --> 00:27:17,000
Solaris code and then on the side they

00:27:14,600 --> 00:27:19,460
wrote the Solaris porting layer which

00:27:17,000 --> 00:27:21,770
basically converted Solaris internals

00:27:19,460 --> 00:27:23,270
into Linux internals we already had

00:27:21,770 --> 00:27:25,910
something like that called open Solaris

00:27:23,270 --> 00:27:27,050
KO or on FreeBSD and so it was mostly a

00:27:25,910 --> 00:27:30,620
matter of just lining that up and

00:27:27,050 --> 00:27:33,290
cleaning up the little bits but it turns

00:27:30,620 --> 00:27:35,900
out that we took it one step further and

00:27:33,290 --> 00:27:40,070
actually separated out the OS specific

00:27:35,900 --> 00:27:43,370
bits so now in the edifice on FreeBSD

00:27:40,070 --> 00:27:45,650
tree there's a module called OS with

00:27:43,370 --> 00:27:47,030
FreeBSD and Linux and all the OS

00:27:45,650 --> 00:27:49,490
specific code lives in one of those two

00:27:47,030 --> 00:27:52,850
sub directories and all the ZFS generic

00:27:49,490 --> 00:27:54,590
code is in the ZFS module and luckily

00:27:52,850 --> 00:27:58,850
these NFS on Linux people have agreed to

00:27:54,590 --> 00:28:01,910
let us upstream that so that will mean

00:27:58,850 --> 00:28:03,410
that going forward there will be one

00:28:01,910 --> 00:28:07,490
refill that became both the Linux and

00:28:03,410 --> 00:28:08,840
FreeBSD code and any OS specific bits

00:28:07,490 --> 00:28:13,880
will be in a certain subdirectory

00:28:08,840 --> 00:28:15,920
specific to that OS and the advantage of

00:28:13,880 --> 00:28:19,250
this means that we will also connect to

00:28:15,920 --> 00:28:21,320
one common CI system so that anytime a

00:28:19,250 --> 00:28:24,200
Linux developer makes a change to the

00:28:21,320 --> 00:28:26,570
ZFS on Linux repo it also gets tested on

00:28:24,200 --> 00:28:30,290
FreeBSD and if it breaks then it can't

00:28:26,570 --> 00:28:32,840
be merged and then we're actually going

00:28:30,290 --> 00:28:34,610
to get even farther and the set of s on

00:28:32,840 --> 00:28:37,100
OS 10 people are going to join that

00:28:34,610 --> 00:28:39,380
effort and add their OS as well and we

00:28:37,100 --> 00:28:42,230
will actually end up with that common

00:28:39,380 --> 00:28:44,600
open set of s repo like we talked about

00:28:42,230 --> 00:28:46,640
and to help try to fight some of the

00:28:44,600 --> 00:28:49,150
Fudd around you know the concept of

00:28:46,640 --> 00:28:51,980
FreeBSD - being dependent on Linux for

00:28:49,150 --> 00:28:54,020
opens NFS because it's not right to the

00:28:51,980 --> 00:28:55,010
ZFS on Linux people are ZFS people that

00:28:54,020 --> 00:28:57,290
I happened to be working on Linux

00:28:55,010 --> 00:28:58,640
they're not Linux developers you know

00:28:57,290 --> 00:29:01,580
the Linux developers don't like them

00:28:58,640 --> 00:29:04,910
because they're using the CDL license

00:29:01,580 --> 00:29:06,770
right so they've agreed that once we

00:29:04,910 --> 00:29:08,930
finish the up streaming process of

00:29:06,770 --> 00:29:10,910
adding freebsd support to their repo

00:29:08,930 --> 00:29:13,040
they'll actually change them of their

00:29:10,910 --> 00:29:16,040
organisation and github from ZFS on

00:29:13,040 --> 00:29:18,860
Linux to just open ZFS and so will have

00:29:16,040 --> 00:29:20,660
the one true open ZFS repo with OS

00:29:18,860 --> 00:29:22,430
support for three or more OSS built into

00:29:20,660 --> 00:29:26,570
it and everybody can just work in that

00:29:22,430 --> 00:29:28,880
repo and then do releases based on it

00:29:26,570 --> 00:29:31,220
so specifically that means that there

00:29:28,880 --> 00:29:33,920
will be no GPL code leaking into FreeBSD

00:29:31,220 --> 00:29:36,920
and there will be no Linux KPI shims or

00:29:33,920 --> 00:29:38,540
anything like that so all the Linux code

00:29:36,920 --> 00:29:41,180
will sit inside and we won't import it

00:29:38,540 --> 00:29:42,740
and then there'll be a OS FreeBSD where

00:29:41,180 --> 00:29:43,850
we put all the previously specific code

00:29:42,740 --> 00:29:47,300
just like we would have if we were

00:29:43,850 --> 00:29:48,410
importing it from illumos in fact it'll

00:29:47,300 --> 00:29:50,270
actually be slightly cleaner because we

00:29:48,410 --> 00:29:53,060
don't have all these if def limit if def

00:29:50,270 --> 00:29:54,650
illumos else for freebsd will just have

00:29:53,060 --> 00:29:58,940
a freebsd subdirectory with all the

00:29:54,650 --> 00:30:00,620
freebsd specific code in it and so we

00:29:58,940 --> 00:30:01,790
end up with the kind of like we do the

00:30:00,620 --> 00:30:03,710
machine dependent and machine

00:30:01,790 --> 00:30:05,810
independent code in the kernel will have

00:30:03,710 --> 00:30:09,260
OS dependent and OS independent code in

00:30:05,810 --> 00:30:11,180
opens edifice and like I said will

00:30:09,260 --> 00:30:12,200
leverage the CI work that those edifice

00:30:11,180 --> 00:30:15,320
and Linux people have done a very good

00:30:12,200 --> 00:30:17,060
job with and any change we'll have to

00:30:15,320 --> 00:30:22,730
work on both linux and freebsd before it

00:30:17,060 --> 00:30:24,290
gets merged currently there were a

00:30:22,730 --> 00:30:25,940
couple of things that are specific to

00:30:24,290 --> 00:30:28,580
freebsd or that'll be changing as part

00:30:25,940 --> 00:30:30,290
of this first freebsd has had trim

00:30:28,580 --> 00:30:31,640
instead of s for a long time and we were

00:30:30,290 --> 00:30:34,490
the only platform that had it for a long

00:30:31,640 --> 00:30:35,210
time but max enta had built one for a

00:30:34,490 --> 00:30:38,240
Lumos

00:30:35,210 --> 00:30:41,090
and that got worked on a lot and ported

00:30:38,240 --> 00:30:42,470
to Linux and it turns out it's actually

00:30:41,090 --> 00:30:44,720
slightly better and has better queuing

00:30:42,470 --> 00:30:47,960
and batching and it also supports both

00:30:44,720 --> 00:30:49,730
online and on-demand trim so you can do

00:30:47,960 --> 00:30:52,190
normal trim like we are now where you

00:30:49,730 --> 00:30:54,200
trim everything as you delete it or you

00:30:52,190 --> 00:30:55,400
can say don't do any trims right now

00:30:54,200 --> 00:30:58,970
but every once in a while I want to trim

00:30:55,400 --> 00:31:00,980
all my free space and you can do that so

00:30:58,970 --> 00:31:04,220
we'll be switching to their trim code

00:31:00,980 --> 00:31:07,430
because it's better jails are based on

00:31:04,220 --> 00:31:09,200
that Lumos zone our Jail support and ZFS

00:31:07,430 --> 00:31:10,760
is based on zones and that'll be

00:31:09,200 --> 00:31:12,490
retained as FreeBSD specific code

00:31:10,760 --> 00:31:16,010
because there's no analog on Linux and

00:31:12,490 --> 00:31:17,630
our previous or nfsv4 acls will be

00:31:16,010 --> 00:31:22,430
retained as OS dependent code because

00:31:17,630 --> 00:31:23,900
Linux doesn't have that so before I get

00:31:22,430 --> 00:31:26,590
into the list of features does anybody

00:31:23,900 --> 00:31:26,590
have any questions

00:31:28,810 --> 00:31:34,820
okay so currently features that are

00:31:32,300 --> 00:31:36,920
relatively new to ZFS that are available

00:31:34,820 --> 00:31:38,180
on all platforms is the new subscription

00:31:36,920 --> 00:31:40,910
scrub and we silver you'll probably

00:31:38,180 --> 00:31:42,710
notice I think in previously twelve that

00:31:40,910 --> 00:31:45,920
instead of scrubbing everything based on

00:31:42,710 --> 00:31:49,100
the order in the file system it will

00:31:45,920 --> 00:31:49,880
actually scan and find blocks to

00:31:49,100 --> 00:31:52,600
resilvered

00:31:49,880 --> 00:31:55,610
or scrub and put them in this range tree

00:31:52,600 --> 00:31:58,220
and which i think is limited to like 600

00:31:55,610 --> 00:32:00,080
megabytes of ram as that gets full it

00:31:58,220 --> 00:32:02,150
takes the largest contiguous block and

00:32:00,080 --> 00:32:04,100
does that scrub every silver and then

00:32:02,150 --> 00:32:05,540
goes back to scanning so this means most

00:32:04,100 --> 00:32:08,210
of your scrub ends up being sequential

00:32:05,540 --> 00:32:09,950
reads instead of random and makes your

00:32:08,210 --> 00:32:12,230
scrubber are-- silver somewhere between

00:32:09,950 --> 00:32:15,530
2 and 16 times faster than the old code

00:32:12,230 --> 00:32:18,710
and you can also pause and resume scrubs

00:32:15,530 --> 00:32:19,880
now so that you can say don't do any

00:32:18,710 --> 00:32:21,800
scrubbing during business hours

00:32:19,880 --> 00:32:24,320
you know the scrub might take three days

00:32:21,800 --> 00:32:25,820
but lets you know pause it during

00:32:24,320 --> 00:32:28,850
business hours and resume it outside of

00:32:25,820 --> 00:32:32,750
business hours device removal is finally

00:32:28,850 --> 00:32:34,400
available in freebsd so if you have mir

00:32:32,750 --> 00:32:36,610
v devs or stripe v devs

00:32:34,400 --> 00:32:39,860
you can actually remove a disc from ZFS

00:32:36,610 --> 00:32:42,440
and shrink the pool you can't do it with

00:32:39,860 --> 00:32:44,450
rates ed but with single disks or

00:32:42,440 --> 00:32:46,460
mirrors you can actually remove this

00:32:44,450 --> 00:32:47,990
from ZFS and make your pool smaller if

00:32:46,460 --> 00:32:52,130
you decide you don't need such a big

00:32:47,990 --> 00:32:55,130
pool anymore z pool checkpoint allows

00:32:52,130 --> 00:32:57,290
you to do a whole pool snapshot which

00:32:55,130 --> 00:32:59,390
allows you to undo anything you can do

00:32:57,290 --> 00:33:01,870
to ZFS so if you create a whole pool

00:32:59,390 --> 00:33:04,430
snapshot of what you can only have one

00:33:01,870 --> 00:33:05,750
but basically once you have a zpool

00:33:04,430 --> 00:33:07,460
checkpoint

00:33:05,750 --> 00:33:09,410
nothing actually gets deleted when you

00:33:07,460 --> 00:33:12,290
delete stuff so even if you destroy a

00:33:09,410 --> 00:33:13,430
data set it gets marked is free but we

00:33:12,290 --> 00:33:16,370
don't actually delete the data or

00:33:13,430 --> 00:33:17,690
overwrite the data so no face ever gets

00:33:16,370 --> 00:33:19,820
freed so eventually you fill up your

00:33:17,690 --> 00:33:21,770
pool but it means that if you're doing

00:33:19,820 --> 00:33:23,330
something like an upgrade and you're

00:33:21,770 --> 00:33:24,920
going to delete a database and make a

00:33:23,330 --> 00:33:26,780
new copy or whatever especially on the

00:33:24,920 --> 00:33:29,900
appliance it means that you can always

00:33:26,780 --> 00:33:32,330
undo it all so you create the checkpoint

00:33:29,900 --> 00:33:34,070
rename stuff delete stuff add disk

00:33:32,330 --> 00:33:35,870
whatever you gonna do especially the

00:33:34,070 --> 00:33:38,450
operations instead of s that normally

00:33:35,870 --> 00:33:40,070
are really risky you could the

00:33:38,450 --> 00:33:41,450
checkpoint first do it if you're happy

00:33:40,070 --> 00:33:43,580
with it destroy the checkpoint get your

00:33:41,450 --> 00:33:45,770
free space back but if it goes sideways

00:33:43,580 --> 00:33:48,350
you just export import from that

00:33:45,770 --> 00:33:50,090
checkpoint and you have you know things

00:33:48,350 --> 00:33:53,180
are unreal a man done deleted and

00:33:50,090 --> 00:33:56,420
everything's back the way it was a zpool

00:33:53,180 --> 00:33:59,150
initialized goes through and writes to

00:33:56,420 --> 00:34:00,860
every sector so if you're using a thin

00:33:59,150 --> 00:34:03,890
provision storage especially off like

00:34:00,860 --> 00:34:05,330
Amazon EBS it turns out the first time

00:34:03,890 --> 00:34:07,340
you write to a block is a lot slower

00:34:05,330 --> 00:34:08,870
than later because Amazon's in the

00:34:07,340 --> 00:34:12,170
background having to go find space and

00:34:08,870 --> 00:34:15,020
allocate that block so zip will

00:34:12,170 --> 00:34:17,240
initialize allows you to write all that

00:34:15,020 --> 00:34:19,520
space in the beginning so that your disk

00:34:17,240 --> 00:34:21,290
will be fast even if you you have

00:34:19,520 --> 00:34:23,390
terabytes storage from Amazon you can

00:34:21,290 --> 00:34:25,940
claim it all now so it'll be fast as

00:34:23,390 --> 00:34:28,640
you're using it the new space map

00:34:25,940 --> 00:34:30,230
encoding supports makes it more

00:34:28,640 --> 00:34:33,080
efficient to have very large drives and

00:34:30,230 --> 00:34:35,930
take less space for the space map and

00:34:33,080 --> 00:34:37,430
make them load faster channel programs

00:34:35,930 --> 00:34:38,870
if you want know more about that Matt

00:34:37,430 --> 00:34:41,210
gave a whole presentation about it at

00:34:38,870 --> 00:34:44,030
BSD can but basically allows you to have

00:34:41,210 --> 00:34:46,790
little Lua scripts that run inside the

00:34:44,030 --> 00:34:48,980
ZFS transaction lock so that you can do

00:34:46,790 --> 00:34:51,560
many administrative operations as one

00:34:48,980 --> 00:34:54,800
atomic unit so if you need to you know

00:34:51,560 --> 00:34:56,330
roll back ten data sets or create manage

00:34:54,800 --> 00:34:58,040
snapshots and renames at a bunch of

00:34:56,330 --> 00:35:00,080
stuff it allows you to do them all as

00:34:58,040 --> 00:35:02,810
one atomic operation by writing a short

00:35:00,080 --> 00:35:04,730
Lua script and then the large denotes

00:35:02,810 --> 00:35:06,410
support is a Linux Pacific feature to

00:35:04,730 --> 00:35:10,310
support the very large directories

00:35:06,410 --> 00:35:11,750
because Linux is bad at that some of the

00:35:10,310 --> 00:35:13,850
features we'll get when we import the

00:35:11,750 --> 00:35:16,220
newer version of ZFS includes

00:35:13,850 --> 00:35:17,960
encryption so native encryption per data

00:35:16,220 --> 00:35:19,760
set so each data set can have its own

00:35:17,960 --> 00:35:22,040
separate encryption key

00:35:19,760 --> 00:35:24,080
and you can unmount a data set when

00:35:22,040 --> 00:35:26,000
you're not needing it and unload the key

00:35:24,080 --> 00:35:30,380
so the data is actually at rest and

00:35:26,000 --> 00:35:31,760
protected and it also allows scrub and

00:35:30,380 --> 00:35:34,220
we silver can still happen without the

00:35:31,760 --> 00:35:37,310
encryption keys loaded because the

00:35:34,220 --> 00:35:40,340
checksum is stored half as the plaintext

00:35:37,310 --> 00:35:42,110
and half as the encrypted text the multi

00:35:40,340 --> 00:35:43,400
import protection I mentioned is so that

00:35:42,110 --> 00:35:47,540
if you have two heads connected to a

00:35:43,400 --> 00:35:48,770
common disk or common j-bot that you

00:35:47,540 --> 00:35:52,550
don't import the fool on both at the

00:35:48,770 --> 00:35:54,470
same time and then metadata allocation

00:35:52,550 --> 00:35:55,850
class or special allocation classes

00:35:54,470 --> 00:35:57,950
allows you to put all your metadata on a

00:35:55,850 --> 00:36:00,710
dedicated device instead of mixing it

00:35:57,950 --> 00:36:02,300
with your data on the pool parallel data

00:36:00,710 --> 00:36:03,800
fast mount allows you just if you have a

00:36:02,300 --> 00:36:05,330
thousand data sets mount more than one

00:36:03,800 --> 00:36:07,550
at a time

00:36:05,330 --> 00:36:10,130
trim the new way already mentioned zpool

00:36:07,550 --> 00:36:12,170
sync is just a command to make sure that

00:36:10,130 --> 00:36:14,960
everything has been flushed before you

00:36:12,170 --> 00:36:16,340
you know reset a VM or something and

00:36:14,960 --> 00:36:23,890
being able to restart every silver if

00:36:16,340 --> 00:36:23,890
you need it okay any other questions

00:36:27,520 --> 00:36:30,520
microphone

00:36:42,130 --> 00:36:46,880
okay thank you very much I've been

00:36:45,619 --> 00:36:54,890
looking forward to the channel commands

00:36:46,880 --> 00:36:58,760
yes can I finally do my multiple

00:36:54,890 --> 00:37:00,770
snapshots no the channel programs are

00:36:58,760 --> 00:37:15,770
transactions which are purple it's

00:37:00,770 --> 00:37:17,839
purple there is a new update to the

00:37:15,770 --> 00:37:23,390
rayjet expansion in the ZFS on linux

00:37:17,839 --> 00:37:25,369
repo which you can easily do I get

00:37:23,390 --> 00:37:29,119
rebase to pull it into the ZFS on

00:37:25,369 --> 00:37:31,119
FreeBSD it's still very beta but it's

00:37:29,119 --> 00:37:35,859
coming along there's been progress

00:37:31,119 --> 00:37:35,859
finally after a long time of no progress

00:37:42,520 --> 00:37:47,330
implementation in one repository and

00:37:44,660 --> 00:37:50,240
maybe just doing these specific bits and

00:37:47,330 --> 00:37:52,700
folders and stuff but it kind of reminds

00:37:50,240 --> 00:37:55,190
me of the Apache foundation or something

00:37:52,700 --> 00:37:58,220
like that because then it seems that the

00:37:55,190 --> 00:38:00,500
project would probably slow down quite a

00:37:58,220 --> 00:38:03,109
bit because the development would then

00:38:00,500 --> 00:38:04,460
have to take care of things as a

00:38:03,109 --> 00:38:07,790
developer if I want to change something

00:38:04,460 --> 00:38:08,359
I would have to make sure all performs

00:38:07,790 --> 00:38:11,089
will work

00:38:08,359 --> 00:38:14,060
so it might discourage me from changes

00:38:11,089 --> 00:38:15,470
or I cannot do such a big changes it

00:38:14,060 --> 00:38:17,930
mostly depends on the change most

00:38:15,470 --> 00:38:20,839
changes are only specific to ZFS and

00:38:17,930 --> 00:38:22,609
won't require any OS specific bits when

00:38:20,839 --> 00:38:24,680
they do that's why we have the service

00:38:22,609 --> 00:38:26,720
leadership call if a platform were to

00:38:24,680 --> 00:38:28,369
fall behind and we're becoming a

00:38:26,720 --> 00:38:29,660
roadblock they probably get disconnected

00:38:28,369 --> 00:38:31,700
from the CI and that would be their

00:38:29,660 --> 00:38:33,349
problem so we have the monthly

00:38:31,700 --> 00:38:35,630
leadership call specifically to prevent

00:38:33,349 --> 00:38:36,920
this so that if there is you know if the

00:38:35,630 --> 00:38:38,660
Linux developer is working on something

00:38:36,920 --> 00:38:40,790
in needs a previously developers help to

00:38:38,660 --> 00:38:44,119
get the previously side port done that's

00:38:40,790 --> 00:38:47,540
why we have a monthly meeting of the

00:38:44,119 --> 00:38:48,980
project slowing down no basically this

00:38:47,540 --> 00:38:51,040
is mostly the result of the projects

00:38:48,980 --> 00:38:54,050
up more than we could handle the old way

00:38:51,040 --> 00:38:55,700
so we're trying to adapt to be move

00:38:54,050 --> 00:38:57,350
faster although at the same time we are

00:38:55,700 --> 00:38:57,830
trying to make sure that we don't break

00:38:57,350 --> 00:38:59,930
anything

00:38:57,830 --> 00:39:01,340
because as Kirk says you know if you

00:38:59,930 --> 00:39:04,300
curdle some of these file system once

00:39:01,340 --> 00:39:04,300
they will never trust you again

00:39:06,490 --> 00:39:12,980
you mentioned the initialized feature of

00:39:10,330 --> 00:39:14,480
unthink provisioning the underlying

00:39:12,980 --> 00:39:18,530
block storage yeah

00:39:14,480 --> 00:39:20,330
what does Amazon think about it that's

00:39:18,530 --> 00:39:22,670
their problem well I mean what I'm

00:39:20,330 --> 00:39:24,710
saying to me for the whole terabyte the

00:39:22,670 --> 00:39:27,500
whole time anyway so yeah what I'm

00:39:24,710 --> 00:39:29,780
saying is that what I see is a hazard

00:39:27,500 --> 00:39:32,060
you know they may start back brushing on

00:39:29,780 --> 00:39:34,280
that or banning that kind of stuff

00:39:32,060 --> 00:39:36,830
well however they can do this I mean

00:39:34,280 --> 00:39:39,170
it's from the political standpoint it's

00:39:36,830 --> 00:39:41,240
a little bit dangerous like when we had

00:39:39,170 --> 00:39:45,290
this talk I don't know if you were on

00:39:41,240 --> 00:39:47,330
that regarding the do age and the DNS

00:39:45,290 --> 00:39:49,700
over HTTP yeah so it seems like a good

00:39:47,330 --> 00:39:51,500
idea at the beginning but when you go

00:39:49,700 --> 00:39:53,030
through then it seems right a lot of

00:39:51,500 --> 00:39:54,650
people it's definitely an optional

00:39:53,030 --> 00:39:58,250
feature and most people won't need to

00:39:54,650 --> 00:39:59,900
use it but for Dell fixes database

00:39:58,250 --> 00:40:02,270
virtualization appliance it was very

00:39:59,900 --> 00:40:03,770
important that they don't get random you

00:40:02,270 --> 00:40:06,200
know 100 millisecond right Layton sees

00:40:03,770 --> 00:40:12,859
on blocks just because it wasn't a block

00:40:06,200 --> 00:40:15,800
they've written before thank you also

00:40:12,859 --> 00:40:17,750
about the zpool initialized if I'm

00:40:15,800 --> 00:40:20,660
reusing some old disks to create a new

00:40:17,750 --> 00:40:22,460
pool does it zero them out you can

00:40:20,660 --> 00:40:24,380
although there's also the trim on init

00:40:22,460 --> 00:40:26,690
feature so when you first create the

00:40:24,380 --> 00:40:28,250
pool you can trim the whole drive before

00:40:26,690 --> 00:40:31,780
you start and that might that would be

00:40:28,250 --> 00:40:31,780
more efficient in that case right Thanks

00:40:32,980 --> 00:40:37,910
it's going once twice

00:40:36,109 --> 00:40:48,130
okay thank you

00:40:37,910 --> 00:40:48,130
[Applause]

00:40:58,210 --> 00:41:00,270

YouTube URL: https://www.youtube.com/watch?v=gmaHZBwDKho


