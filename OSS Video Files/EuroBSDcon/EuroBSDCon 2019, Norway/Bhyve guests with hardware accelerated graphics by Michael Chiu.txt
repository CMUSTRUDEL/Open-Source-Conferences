Title: Bhyve guests with hardware accelerated graphics by Michael Chiu
Publication date: 2019-10-21
Playlist: EuroBSDCon 2019, Norway
Description: 
	Bhyve guests with hardware accelerated graphics

FreeBSD is not only a great platform for server, it is also a brilliant choice for workstation and desktop. However, there’re still a lot of applications that are not *BSD aware. The solution is Bhyve, the BSD Hypervisor which allows you to run these applications in virtual machines on top of FreeBSD. You also want these fancy, graphically intensive desktop applications to run smooth! Therefore a Smart BSD user like you automatically think about GPU passthrough…. and you quickly realise it’s not support as listed in the bhyve Wiki.

*Or is it? *

If you are someone like me who run FreeBSD-CURRENT on your primary workstation, you may have encountered the following problems:

    Your new shinny RTX graphics card won’t work in CURRENT because the official Nvidia driver only support up to 12-STABLE and the driver from ports only support up to 1080Ti.
    You need to run some applications in a Bhyve Virtual machines that’s graphically intensive
    You want to accelerate OpenGL on *nix VM. 

This talk will introduce you some tricks to enable usable GPU passthrough and other tricks to enable hardware acceleration for bhyve guests

More Info:
https://2019.eurobsdcon.org/talk-speakers/#bhyve
Captions: 
	00:00:03,840 --> 00:00:09,880
so I feel good news and bad news for you

00:00:07,210 --> 00:00:12,820
the bad news is that this presentation

00:00:09,880 --> 00:00:15,280
is not that technical at all in fact all

00:00:12,820 --> 00:00:18,099
the things described here we work on 12

00:00:15,280 --> 00:00:19,900
release or even 11 the good news is it's

00:00:18,099 --> 00:00:24,579
not technical at all so everyone can try

00:00:19,900 --> 00:00:26,140
at home my name is Michael I'm actually

00:00:24,579 --> 00:00:29,829
from Hong Kong but right now I'm

00:00:26,140 --> 00:00:32,259
studying pure maths in San Jose I'm a

00:00:29,829 --> 00:00:35,680
FreeBSD user since maybe four or five

00:00:32,259 --> 00:00:38,829
years ago and s identity I start

00:00:35,680 --> 00:00:48,129
programming in a lot of different stuff

00:00:38,829 --> 00:00:51,280
and sometimes OS so there are a lot of

00:00:48,129 --> 00:00:55,870
reasons why you want to have GPU

00:00:51,280 --> 00:00:58,030
accelerated guess in beehive first of

00:00:55,870 --> 00:01:00,309
all you might want you might have some

00:00:58,030 --> 00:01:03,850
application that you just want fancy

00:01:00,309 --> 00:01:06,159
graphics and that breaks into a few

00:01:03,850 --> 00:01:09,210
categories for example you might only

00:01:06,159 --> 00:01:11,680
want to accelerate one application and

00:01:09,210 --> 00:01:13,690
all you want to actually render

00:01:11,680 --> 00:01:17,400
something but you don't really care what

00:01:13,690 --> 00:01:19,510
it shows on screens but the last kind of

00:01:17,400 --> 00:01:23,640
acceleration it's like you actually want

00:01:19,510 --> 00:01:28,570
to always have access to some graphic

00:01:23,640 --> 00:01:30,010
interfaces so for application level

00:01:28,570 --> 00:01:32,440
stuff that's quite easy you don't need

00:01:30,010 --> 00:01:36,130
to do anything special you can just use

00:01:32,440 --> 00:01:38,680
Virtual GL or our CUDA in that case you

00:01:36,130 --> 00:01:41,740
don't need to worry about anything about

00:01:38,680 --> 00:01:45,310
hardware level things like GPU pass

00:01:41,740 --> 00:01:49,900
through or even V GPU which is kind of

00:01:45,310 --> 00:01:52,960
interesting thing so a question about

00:01:49,900 --> 00:01:55,780
beehive is is GPU pass-through is

00:01:52,960 --> 00:01:58,870
impossible because if nowadays you look

00:01:55,780 --> 00:02:02,530
at the beehive wiki they will tell you

00:01:58,870 --> 00:02:04,540
that GPU pass-through is not supported I

00:02:02,530 --> 00:02:07,960
mean VGA pass-through is not supported

00:02:04,540 --> 00:02:11,130
in beehive but in reality a GPU is just

00:02:07,960 --> 00:02:15,190
like any other PCI device with some

00:02:11,130 --> 00:02:16,910
extra features so it's it is actually

00:02:15,190 --> 00:02:22,340
possible to pass through

00:02:16,910 --> 00:02:24,560
GPU to beehive for example this thing

00:02:22,340 --> 00:02:28,100
for my Twitter when I accidentally

00:02:24,560 --> 00:02:32,060
discover this fat as you can see here is

00:02:28,100 --> 00:02:34,790
actually running out he x2 2070 and it's

00:02:32,060 --> 00:02:37,130
actually running in a beehive gasps the

00:02:34,790 --> 00:02:40,100
wheat the story behind this is that I

00:02:37,130 --> 00:02:42,440
have previously machine at home and it's

00:02:40,100 --> 00:02:46,010
running current but apparently the

00:02:42,440 --> 00:02:48,170
latest NVIDIA GPU and the drivers does

00:02:46,010 --> 00:02:50,540
not support current he only support up

00:02:48,170 --> 00:02:53,570
to 12 and if you want to compile against

00:02:50,540 --> 00:02:57,260
current you actually crash or panic your

00:02:53,570 --> 00:03:00,020
kernel so I was just trying to make a

00:02:57,260 --> 00:03:02,180
virtual server out of it but I never

00:03:00,020 --> 00:03:04,870
thought they actually I get graphics out

00:03:02,180 --> 00:03:11,330
of it and they actually work on a

00:03:04,870 --> 00:03:12,560
monitor so GP passu is possible but it's

00:03:11,330 --> 00:03:15,590
not perfect

00:03:12,560 --> 00:03:18,800
for example the GPU you try to pass

00:03:15,590 --> 00:03:22,580
through to the VM must not be used

00:03:18,800 --> 00:03:25,430
before for example if the BIOS I thought

00:03:22,580 --> 00:03:29,060
the boot the BIOS thing if we ever run

00:03:25,430 --> 00:03:31,280
on the GPU or if your console has ever

00:03:29,060 --> 00:03:33,860
run on the GPU cannot pass through that

00:03:31,280 --> 00:03:38,690
GPU so what you need to do is actually

00:03:33,860 --> 00:03:40,670
use a separate GPU for basic console

00:03:38,690 --> 00:03:45,770
stuff and then we need to have another

00:03:40,670 --> 00:03:49,250
GPU that use only two pass for to pass

00:03:45,770 --> 00:03:51,380
through to the virtual machine and after

00:03:49,250 --> 00:03:54,050
you pass it to the virtual machine you

00:03:51,380 --> 00:03:57,320
can actually only use it once that means

00:03:54,050 --> 00:03:59,510
if you want to use again the only thing

00:03:57,320 --> 00:04:03,130
you can do is to reboot the host because

00:03:59,510 --> 00:04:03,130
now the GPU is

00:04:04,799 --> 00:04:11,829
yep actually we thought about later but

00:04:08,859 --> 00:04:14,950
actually I tried to tweet the PPD driver

00:04:11,829 --> 00:04:18,570
as well but it does not really help but

00:04:14,950 --> 00:04:23,830
but it's actually interesting discussion

00:04:18,570 --> 00:04:26,500
later so it also does not work on all

00:04:23,830 --> 00:04:31,060
different kind of OS for example I was

00:04:26,500 --> 00:04:34,860
never able to boot windows from a crash

00:04:31,060 --> 00:04:38,110
instantly yeah its windows come on

00:04:34,860 --> 00:04:40,060
so some prerequisites that you need to

00:04:38,110 --> 00:04:41,919
pass through a GPU to a guest first of

00:04:40,060 --> 00:04:44,229
all of course it's a GPU hat i mean it's

00:04:41,919 --> 00:04:46,960
a pci pass rule so all the things you

00:04:44,229 --> 00:04:49,210
normally would do to pass through device

00:04:46,960 --> 00:04:51,930
to a beehive gasps you need to do it

00:04:49,210 --> 00:04:56,580
here and again the GPU must not be

00:04:51,930 --> 00:05:00,160
initialized yet and also that the GPU

00:04:56,580 --> 00:05:02,560
must be a real trivial GPU for example

00:05:00,160 --> 00:05:04,509
you feel laptop GPU like a fing pad and

00:05:02,560 --> 00:05:06,520
then when in the BIOS is a hyper

00:05:04,509 --> 00:05:08,320
graphics you cannot pass through that

00:05:06,520 --> 00:05:10,870
because sometimes when you actually use

00:05:08,320 --> 00:05:15,159
it when you initialize integrated

00:05:10,870 --> 00:05:18,880
graphics somehow it touched a video

00:05:15,159 --> 00:05:21,909
graphics card as well so that won't work

00:05:18,880 --> 00:05:23,620
yeah the third one is a good one but you

00:05:21,909 --> 00:05:34,810
don't really have to do that which is to

00:05:23,620 --> 00:05:37,030
donate to PSD project so firstly I've

00:05:34,810 --> 00:05:41,320
tried a lot of things to work around the

00:05:37,030 --> 00:05:44,560
initialization problem of the GPU so the

00:05:41,320 --> 00:05:47,979
GPU I use is actually out TX 2070 and I

00:05:44,560 --> 00:05:51,009
spell it wrong which actually lie about

00:05:47,979 --> 00:05:54,639
itself we actually lie that is support

00:05:51,009 --> 00:05:57,099
function level we set but even the PPT

00:05:54,639 --> 00:05:59,860
try to reset it with a actually won't

00:05:57,099 --> 00:06:01,720
work so when you try to use again for

00:05:59,860 --> 00:06:05,139
other VM it just won't work

00:06:01,720 --> 00:06:08,710
so the way I do it is I modify the drive

00:06:05,139 --> 00:06:11,259
a little bit and I force it to use PC at

00:06:08,710 --> 00:06:14,020
how we set which dropped the power stay

00:06:11,259 --> 00:06:16,650
to d3 and bring it back back again it

00:06:14,020 --> 00:06:16,650
won't work so

00:06:17,189 --> 00:06:24,300
that's pretty much hopeless until 30

00:06:20,740 --> 00:06:28,840
minutes ago I figure of something but

00:06:24,300 --> 00:06:32,860
and for we will experiment of course I

00:06:28,840 --> 00:06:35,349
mean I tried it right so but I don't try

00:06:32,860 --> 00:06:38,710
on every kind of machine I mean I only

00:06:35,349 --> 00:06:42,009
have one desktop and it's a mb desktop

00:06:38,710 --> 00:06:45,430
so maybe we TV offers something

00:06:42,009 --> 00:06:49,379
different but that's what AMD offers I

00:06:45,430 --> 00:06:53,800
use a gigabyte it's this motherboard

00:06:49,379 --> 00:06:56,379
it's not commercial so why use it

00:06:53,800 --> 00:06:58,569
because it has five PCIe slots so you

00:06:56,379 --> 00:07:02,319
make doing these kind of things really

00:06:58,569 --> 00:07:03,009
interesting and easy the first slot for

00:07:02,319 --> 00:07:07,659
the host

00:07:03,009 --> 00:07:10,090
I actually assign a 1050 Ti but because

00:07:07,659 --> 00:07:13,569
it is compatible with the old video

00:07:10,090 --> 00:07:16,419
drivers in the ports and I actually

00:07:13,569 --> 00:07:19,830
tried to GPU which pass through two

00:07:16,419 --> 00:07:22,029
guesses the first one is at least 20 70

00:07:19,830 --> 00:07:25,150
that's a whole reason why I even try

00:07:22,029 --> 00:07:30,279
this project the other one is the AMD

00:07:25,150 --> 00:07:33,069
one 550 because I was curious if came up

00:07:30,279 --> 00:07:35,529
the hour and whatever work and all the

00:07:33,069 --> 00:07:40,240
guests are installed on SSDs of the

00:07:35,529 --> 00:07:42,610
beehive just read from the diff we

00:07:40,240 --> 00:07:47,009
talked about before all the Windows 10

00:07:42,610 --> 00:07:50,669
guests actually does not work at all so

00:07:47,009 --> 00:07:54,729
I check on lines try to figure out why

00:07:50,669 --> 00:07:57,909
and it turns out former debian VGA

00:07:54,729 --> 00:08:02,159
pass-through wiki they say that

00:07:57,909 --> 00:08:07,419
sometimes you cannot really assign the

00:08:02,159 --> 00:08:08,319
GPU to the root bus because it will

00:08:07,419 --> 00:08:12,069
confuse the driver

00:08:08,319 --> 00:08:15,219
so naturally I try to assign it to a

00:08:12,069 --> 00:08:18,029
different bus in order to do it in

00:08:15,219 --> 00:08:21,610
Beehive I need to pass the - why flat

00:08:18,029 --> 00:08:26,800
but somehow we actually crash beehive

00:08:21,610 --> 00:08:28,570
with a assertion failed so I can never

00:08:26,800 --> 00:08:31,780
be try

00:08:28,570 --> 00:08:34,300
windows but maybe I mean maybe if I were

00:08:31,780 --> 00:08:35,050
in hell mother ball things can be a

00:08:34,300 --> 00:08:38,860
little bit different

00:08:35,050 --> 00:08:41,680
who knows so what's this

00:08:38,860 --> 00:08:44,670
so we have like freebsd guesses right

00:08:41,680 --> 00:08:49,390
because that's always the safest choice

00:08:44,670 --> 00:08:52,480
the first attempt I was using alteast

00:08:49,390 --> 00:08:56,380
2070 and pass through to FreeBSD yes

00:08:52,480 --> 00:08:58,750
so I actually download the latest video

00:08:56,380 --> 00:09:01,090
fish no driver so I'll make Mickey

00:08:58,750 --> 00:09:02,740
install it we'll just work the trick is

00:09:01,090 --> 00:09:05,830
that if you want to use the FreeBSD

00:09:02,740 --> 00:09:09,070
guest you must use that UEFI loader the

00:09:05,830 --> 00:09:11,550
reason why is you want to enable the VT

00:09:09,070 --> 00:09:14,140
console so you can do statics otherwise

00:09:11,550 --> 00:09:18,520
X to actually complain about it and you

00:09:14,140 --> 00:09:20,950
cannot do anything and of course it's X

00:09:18,520 --> 00:09:22,690
so the console issue will not show on

00:09:20,950 --> 00:09:24,330
screen so you don't get a lot important

00:09:22,690 --> 00:09:26,140
anything like that

00:09:24,330 --> 00:09:29,550
therefore you actually need to

00:09:26,140 --> 00:09:33,520
explicitly at the pass ID to XCOM and

00:09:29,550 --> 00:09:36,400
your statics but if you want to use

00:09:33,520 --> 00:09:36,820
FreeBSD guest and use set of s on the

00:09:36,400 --> 00:09:40,120
guests

00:09:36,820 --> 00:09:45,490
there's a trick which is you cannot have

00:09:40,120 --> 00:09:48,630
a video low and really most at low in

00:09:45,490 --> 00:09:52,420
loaded or cough the reason what is

00:09:48,630 --> 00:09:56,740
nvidia Tokio and NVIDIA moves at RKO

00:09:52,420 --> 00:09:58,450
they are so big that if you load it in

00:09:56,740 --> 00:10:02,100
load of the coffee actually does not

00:09:58,450 --> 00:10:04,600
have enough memory to low set of s okay

00:10:02,100 --> 00:10:07,210
so you ended up with something that you

00:10:04,600 --> 00:10:10,600
can output and you can tune in the load

00:10:07,210 --> 00:10:12,760
up armed and then disable a blacklist a

00:10:10,600 --> 00:10:14,890
video and then you then you can set us

00:10:12,760 --> 00:10:16,720
back again and then you go back in you

00:10:14,890 --> 00:10:20,350
remove it from loaded config and golf

00:10:16,720 --> 00:10:23,290
and then you add it to our sitcom that's

00:10:20,350 --> 00:10:26,350
the only way you can get it work but

00:10:23,290 --> 00:10:29,740
there's a bonus for the Nvidia graphics

00:10:26,350 --> 00:10:32,500
card which is that the USB C port on the

00:10:29,740 --> 00:10:32,850
graphics card actually works as a USB C

00:10:32,500 --> 00:10:35,680
port

00:10:32,850 --> 00:10:37,780
why is it the bonus is because I try to

00:10:35,680 --> 00:10:40,980
pass through two different USB

00:10:37,780 --> 00:10:45,269
controller to my behalf gasp it

00:10:40,980 --> 00:10:49,339
not work for example when I plug in a

00:10:45,269 --> 00:10:53,610
USB thumb drive to the USB controller

00:10:49,339 --> 00:10:55,889
somehow the FreeBSD gasps keep say like

00:10:53,610 --> 00:10:58,350
the USB detach and attach and detach and

00:10:55,889 --> 00:11:01,920
attach which I'm not entirely sure with

00:10:58,350 --> 00:11:06,570
a beehive problem or be a FreeBSD

00:11:01,920 --> 00:11:11,220
drivers forum so the next one obviously

00:11:06,570 --> 00:11:14,070
is AMD LTS driver which used the DRM

00:11:11,220 --> 00:11:16,649
came up I was curious about this because

00:11:14,070 --> 00:11:19,829
a region I thought there's some magics

00:11:16,649 --> 00:11:21,779
in a media driver that somehow we just

00:11:19,829 --> 00:11:26,279
know how to initialize a graphics card

00:11:21,779 --> 00:11:29,070
without VG BIOS but it turns out the DRM

00:11:26,279 --> 00:11:30,920
came out actually just worked so you

00:11:29,070 --> 00:11:35,459
actually get a load of home from your

00:11:30,920 --> 00:11:41,220
comm console but until a point that a

00:11:35,459 --> 00:11:42,839
loader AMD GPU Tokyo actually that the

00:11:41,220 --> 00:11:45,449
console actually show up on the screen

00:11:42,839 --> 00:11:53,339
so everything just work you don't even

00:11:45,449 --> 00:11:56,190
need a bus ID yep I haven't tried that

00:11:53,339 --> 00:11:58,170
yet because I actually did teachers do

00:11:56,190 --> 00:12:02,730
it for experiment I mean come on if you

00:11:58,170 --> 00:12:05,069
have a 20 70 and AMD 550 I mean 580 you

00:12:02,730 --> 00:12:09,690
want to use the immediate one because

00:12:05,069 --> 00:12:14,220
it's faster so that is actually amazing

00:12:09,690 --> 00:12:18,120
because that means if there's anything

00:12:14,220 --> 00:12:20,519
go wrong with GPU has to it's less

00:12:18,120 --> 00:12:22,769
likely to be a driver issue because the

00:12:20,519 --> 00:12:24,899
album is actually open source driver so

00:12:22,769 --> 00:12:29,579
you can actually look around and see

00:12:24,899 --> 00:12:34,940
what's missing and you probably will not

00:12:29,579 --> 00:12:37,649
find some secret stuff from video that I

00:12:34,940 --> 00:12:41,790
mean you know I mean it's like if every

00:12:37,649 --> 00:12:43,860
dia has some secret sauce then the RM

00:12:41,790 --> 00:12:46,500
chemo should not work but the fact that

00:12:43,860 --> 00:12:50,850
care and the RM chemo work that means

00:12:46,500 --> 00:12:54,380
the fetcher from the driver self input

00:12:50,850 --> 00:12:58,380
proprietary was like less likely so

00:12:54,380 --> 00:13:02,670
um and that we can look at the

00:12:58,380 --> 00:13:06,390
performance figure so I'm too lazy so I

00:13:02,670 --> 00:13:10,530
only run the GL map to French mark and

00:13:06,390 --> 00:13:15,750
as you can see here is the performance

00:13:10,530 --> 00:13:22,050
of the LTX 2070 when it passed to a VM

00:13:15,750 --> 00:13:25,860
and the blue one but above blue is the L

00:13:22,050 --> 00:13:28,080
th 2070 when it runs on bare metal but

00:13:25,860 --> 00:13:29,880
this result may not be totally accurate

00:13:28,080 --> 00:13:33,360
because I cannot pass through all my

00:13:29,880 --> 00:13:36,440
coils and grams and sometimes OpenGL

00:13:33,360 --> 00:13:42,150
does have has the problem that the CPU

00:13:36,440 --> 00:13:45,810
might actually throttle the GPU because

00:13:42,150 --> 00:13:48,450
there's thank you TV chatter and cue

00:13:45,810 --> 00:13:50,700
commands and the GPU actually wait for

00:13:48,450 --> 00:13:58,410
the CPU to in kill more calm and things

00:13:50,700 --> 00:14:03,050
like that I mean this the other thing

00:13:58,410 --> 00:14:06,210
that's very interesting is the Intel DVD

00:14:03,050 --> 00:14:09,120
which is like a technology that allows

00:14:06,210 --> 00:14:13,140
you to create a virtual GPU from Intel

00:14:09,120 --> 00:14:17,370
integrated GPU of course that means you

00:14:13,140 --> 00:14:22,350
can pass it to virtual machines and the

00:14:17,370 --> 00:14:24,300
cool thing about it is that actually all

00:14:22,350 --> 00:14:29,910
most of the code are already available

00:14:24,300 --> 00:14:33,140
in AI 915 DRM driver so that means it

00:14:29,910 --> 00:14:36,300
might only need like very little tweak

00:14:33,140 --> 00:14:39,690
for us to get it working and once it

00:14:36,300 --> 00:14:41,700
work it probably just appear as some PCI

00:14:39,690 --> 00:14:44,400
device that you can just pass through to

00:14:41,700 --> 00:14:48,090
the virtual machine and the fact that is

00:14:44,400 --> 00:14:55,860
designed to run as like a vgpu might

00:14:48,090 --> 00:14:58,050
help us avoid a lot of issues so I can

00:14:55,860 --> 00:14:59,790
tell you two quick here but the reason

00:14:58,050 --> 00:15:01,680
why I get one to get it quicker to the

00:14:59,790 --> 00:15:04,530
future work and work in progress is the

00:15:01,680 --> 00:15:06,100
game that to the frame will talk about

00:15:04,530 --> 00:15:10,210
the initializer

00:15:06,100 --> 00:15:12,880
which bring us to the website so when I

00:15:10,210 --> 00:15:16,270
investigate like what happened that

00:15:12,880 --> 00:15:19,660
causes the GPU not being able to

00:15:16,270 --> 00:15:23,380
initialize again ultimately we can think

00:15:19,660 --> 00:15:28,150
about us few factors the first factor is

00:15:23,380 --> 00:15:31,090
the PPC driver the second factor is the

00:15:28,150 --> 00:15:33,760
GPU itself because if the GPU actually

00:15:31,090 --> 00:15:36,220
has some limitation imposed by the

00:15:33,760 --> 00:15:39,940
vendors then of course the vendors will

00:15:36,220 --> 00:15:42,670
try their best to stop you to do pass

00:15:39,940 --> 00:15:47,890
rule and the third one is actually the

00:15:42,670 --> 00:15:51,490
guest OS original I thought is the GPUs

00:15:47,890 --> 00:15:54,220
problem because of the Nvidia thing but

00:15:51,490 --> 00:15:58,180
later when I see when the RM came up

00:15:54,220 --> 00:16:01,600
works it kind of made me rethink about

00:15:58,180 --> 00:16:05,230
it because DRM camera is an open-source

00:16:01,600 --> 00:16:10,990
driver so if the vendor really tried to

00:16:05,230 --> 00:16:14,740
do something special to prevent the GPU

00:16:10,990 --> 00:16:17,320
being initialize again and again then it

00:16:14,740 --> 00:16:19,900
should not really happen - the album

00:16:17,320 --> 00:16:24,430
came up because open-source developers

00:16:19,900 --> 00:16:28,750
they are less likely want to impose this

00:16:24,430 --> 00:16:32,740
limitation and then it goes and then we

00:16:28,750 --> 00:16:36,610
have to investigate more I move on to

00:16:32,740 --> 00:16:40,810
the guest OS and I realize maybe it's

00:16:36,610 --> 00:16:43,930
possible that when the freebsd gets shut

00:16:40,810 --> 00:16:47,050
down that's not really tear down the

00:16:43,930 --> 00:16:48,880
graph is caparelli if that is the case

00:16:47,050 --> 00:16:50,890
then the graphics guy is still in the

00:16:48,880 --> 00:16:53,800
state of like already being initialized

00:16:50,890 --> 00:16:57,730
and if the PPD driver does not do

00:16:53,800 --> 00:17:01,390
anything then the GPU was still stuck in

00:16:57,730 --> 00:17:05,740
the state of being initialized and hence

00:17:01,390 --> 00:17:10,560
it cannot be initialized again and the

00:17:05,740 --> 00:17:14,980
first possibility is actually the

00:17:10,560 --> 00:17:18,270
Peabody driver itself because I just

00:17:14,980 --> 00:17:18,270
forgot I live like 30 minutes ago

00:17:18,350 --> 00:17:27,169
I find this very interesting thing on

00:17:21,620 --> 00:17:31,940
kcal when investigate GPU has flew on

00:17:27,169 --> 00:17:34,429
Linux because I know on linux on KVM it

00:17:31,940 --> 00:17:37,970
is possible to reuse the GPU again and

00:17:34,429 --> 00:17:42,940
again so it is sensible thing to do to

00:17:37,970 --> 00:17:45,500
actually see what they do to enable it

00:17:42,940 --> 00:17:48,620
instantly you can see they have like

00:17:45,500 --> 00:17:49,850
this start and stop script here let me

00:17:48,620 --> 00:17:56,929
try to make it again

00:17:49,850 --> 00:18:03,620
I can't but anyway you can see when it

00:17:56,929 --> 00:18:06,919
tried to start to pass with GPU actually

00:18:03,620 --> 00:18:11,840
stopped the eggs of course but then it

00:18:06,919 --> 00:18:14,929
actually unbind the VT consoles so after

00:18:11,840 --> 00:18:19,299
Empire which consoles the unbind the if

00:18:14,929 --> 00:18:26,270
I frame buffer and also it detached the

00:18:19,299 --> 00:18:29,779
PCI device using the leap the equivalent

00:18:26,270 --> 00:18:33,950
of PPD thing after that they basically

00:18:29,779 --> 00:18:40,070
load the VF IO kernel module and then

00:18:33,950 --> 00:18:44,770
they actually damn password to the k vm

00:18:40,070 --> 00:18:47,450
gas and it works and when they stopped

00:18:44,770 --> 00:18:49,279
they actually do the same thing again

00:18:47,450 --> 00:18:51,260
but this time they reattach the driver

00:18:49,279 --> 00:18:55,070
so it made me think about if it's

00:18:51,260 --> 00:18:57,260
possible that our PPD driver is doing is

00:18:55,070 --> 00:19:00,429
missing something that maybe is not

00:18:57,260 --> 00:19:04,850
detaching or attaching those device

00:19:00,429 --> 00:19:08,270
correctly to cause the GPU not being

00:19:04,850 --> 00:19:14,510
initialized I mean the in your eyes

00:19:08,270 --> 00:19:20,270
correctly so I get I think it could lead

00:19:14,510 --> 00:19:24,799
to be too vast and actually that's

00:19:20,270 --> 00:19:29,799
pretty much what was they basically just

00:19:24,799 --> 00:19:29,799
like a report or what's going on so any

00:19:41,830 --> 00:19:44,830
yep

00:19:46,970 --> 00:19:51,890
so I'm wondering how you could use the

00:19:49,460 --> 00:19:54,350
same GPU on the host and in multiple

00:19:51,890 --> 00:19:57,620
guests at the same time with Intel you

00:19:54,350 --> 00:20:00,290
said there's a convertible GPU the other

00:19:57,620 --> 00:20:01,640
operating systems is it possible and and

00:20:00,290 --> 00:20:05,360
what mechanism of they're using for

00:20:01,640 --> 00:20:07,700
nvidia and AMD I think Nvidia has their

00:20:05,360 --> 00:20:11,090
own prepared I mean they have like a

00:20:07,700 --> 00:20:14,960
series of GPU that's for virtual machine

00:20:11,090 --> 00:20:18,170
but that those are really expensive so

00:20:14,960 --> 00:20:21,320
and I don't have one so I don't have the

00:20:18,170 --> 00:20:24,080
details but for the Intel one what it

00:20:21,320 --> 00:20:30,140
does is basically allow you to create

00:20:24,080 --> 00:20:32,420
like vgpu out from the integrated GPU

00:20:30,140 --> 00:20:34,130
and this will allow you to you can't you

00:20:32,420 --> 00:20:36,550
can create multiple of them the only

00:20:34,130 --> 00:20:39,830
limitation is like each guest can only

00:20:36,550 --> 00:20:43,370
use one of them and from my

00:20:39,830 --> 00:20:47,000
understanding the guest can actually use

00:20:43,370 --> 00:20:49,970
those GPU with the Intel on i-15 driver

00:20:47,000 --> 00:20:52,820
so the driver issue probably won't be a

00:20:49,970 --> 00:20:57,920
problem because as long as they can use

00:20:52,820 --> 00:20:59,380
on i-15 from Nvidia I'm not sure but

00:20:57,920 --> 00:21:01,130
they might have their own proprietary

00:20:59,380 --> 00:21:05,810
technology to do that

00:21:01,130 --> 00:21:07,880
and like yeah actually I have a friend

00:21:05,810 --> 00:21:09,560
who working in VD he tried to get me one

00:21:07,880 --> 00:21:15,290
of those graphics kappa unfortunately

00:21:09,560 --> 00:21:18,950
last few months I was I'm not able to do

00:21:15,290 --> 00:21:20,390
a lot of research because as you know

00:21:18,950 --> 00:21:26,470
what happened in Hong Kong so I was

00:21:20,390 --> 00:21:26,470
never able to get my hand on those gpgpu

00:21:29,830 --> 00:21:34,809
before running your OpenGL benchmarks

00:21:32,529 --> 00:21:37,720
inside the VM did you recreate with a

00:21:34,809 --> 00:21:40,809
CPU topology inside beehive so that we

00:21:37,720 --> 00:21:43,059
see peers were pinned and matched I'm

00:21:40,809 --> 00:21:46,989
not really but what I do is like I

00:21:43,059 --> 00:21:49,090
basically just run it from scratch we

00:21:46,989 --> 00:21:52,149
say the same beehive script and then but

00:21:49,090 --> 00:21:55,720
I didn't used Sh flat but I realized

00:21:52,149 --> 00:21:59,230
something strange if I pass through too

00:21:55,720 --> 00:22:02,230
much CPU or too much RAM to be high if I

00:21:59,230 --> 00:22:05,289
actually crashed beehive we've unable to

00:22:02,230 --> 00:22:09,129
set a memory but I'm not sure if it's

00:22:05,289 --> 00:22:11,169
like a AMD program so the best thing I

00:22:09,129 --> 00:22:14,739
can do actually is to pass through for

00:22:11,169 --> 00:22:18,429
GPS CPU to beehive and 16 gigabytes of

00:22:14,739 --> 00:22:19,899
RAM but of course on bare metal is like

00:22:18,429 --> 00:22:24,549
a huge difference right because I

00:22:19,899 --> 00:22:28,480
actually get 32 fret and 64 gigabytes of

00:22:24,549 --> 00:22:31,149
RAM but I don't think the CPU should

00:22:28,480 --> 00:22:33,509
Frodo the GPU performance that much

00:22:31,149 --> 00:22:33,509
though

00:22:42,020 --> 00:22:47,330
you mentioned that in when you're

00:22:44,510 --> 00:22:49,190
loading from loader Kampf having nvidia

00:22:47,330 --> 00:22:52,250
mode setting kernel driver loaded and

00:22:49,190 --> 00:22:53,630
the ZFS driver loaded oh yeah that it

00:22:52,250 --> 00:22:57,560
would there was enough memory for the

00:22:53,630 --> 00:22:59,060
two on my laptop that's exactly what I'm

00:22:57,560 --> 00:23:01,070
doing and it works fine so is this

00:22:59,060 --> 00:23:02,810
something that was only in guests that

00:23:01,070 --> 00:23:07,280
you found to be a problem or also in the

00:23:02,810 --> 00:23:09,770
host I've mostly in guess on host I once

00:23:07,280 --> 00:23:12,080
those tons of Drive I mean tons of

00:23:09,770 --> 00:23:16,880
modules with loader calm and it were

00:23:12,080 --> 00:23:19,910
fine but on gas II never worked on my

00:23:16,880 --> 00:23:23,210
fing pad it actually sometimes when I

00:23:19,910 --> 00:23:25,670
low like a years and I instead of s and

00:23:23,210 --> 00:23:29,000
a media modules I get the same issue as

00:23:25,670 --> 00:23:31,220
the gas so the limitation is in FreeBSD

00:23:29,000 --> 00:23:34,550
su Fei loader it has to do with the

00:23:31,220 --> 00:23:36,050
bootloader the way if I booting works we

00:23:34,550 --> 00:23:48,320
have to make a temporary buffer that we

00:23:36,050 --> 00:23:49,730
copy the kernel modules into is like you

00:23:48,320 --> 00:23:52,040
can there's a tunable by default I think

00:23:49,730 --> 00:24:05,890
it's 64 megabytes one standard 64 you

00:23:52,040 --> 00:24:08,600
can make it bigger so it's actually

00:24:05,890 --> 00:24:10,760
quite interesting to discover these

00:24:08,600 --> 00:24:13,670
stuff and some of you might wonder where

00:24:10,760 --> 00:24:15,140
our Linux the reason why Linux are not

00:24:13,670 --> 00:24:18,980
here because I have such a hard time

00:24:15,140 --> 00:24:22,160
configuring Linux to work correctly for

00:24:18,980 --> 00:24:26,060
example when I've opened to guess and

00:24:22,160 --> 00:24:30,320
when I try to make it default the GPU to

00:24:26,060 --> 00:24:33,740
the slot that I assigned somehow he just

00:24:30,320 --> 00:24:37,340
crashed without even putting so I was

00:24:33,740 --> 00:24:40,280
never able to test well and in addition

00:24:37,340 --> 00:24:45,740
to my slides I choose one more thing

00:24:40,280 --> 00:24:47,360
which is that on Linux and I once tried

00:24:45,740 --> 00:24:50,030
to pass with you Linux and it worked

00:24:47,360 --> 00:24:53,240
without putting the graphics directly to

00:24:50,030 --> 00:24:55,869
the monitor but I suspect the GPU itself

00:24:53,240 --> 00:25:00,259
is still functional but it won't

00:24:55,869 --> 00:25:03,769
Ramudu as far as I know even sometimes

00:25:00,259 --> 00:25:07,609
in KVM Coolidge's won't work so running

00:25:03,769 --> 00:25:11,450
kuda in the VN is probably not quite

00:25:07,609 --> 00:25:15,999
possible but other things like running a

00:25:11,450 --> 00:25:18,499
virtual GL server publisher work and

00:25:15,999 --> 00:25:20,989
that's actually exactly what I do with

00:25:18,499 --> 00:25:23,899
my 2070 graphics card

00:25:20,989 --> 00:25:26,239
I run a virtual server in the VM and

00:25:23,899 --> 00:25:28,639
there I just asked my host to use it

00:25:26,239 --> 00:25:34,149
because my host is running current and

00:25:28,639 --> 00:25:34,149
you cannot run the latest Nvidia driver

00:25:45,609 --> 00:25:57,879
inside virtualized GPUs on purpose yeah

00:26:24,549 --> 00:26:27,549
okay

00:26:28,670 --> 00:26:37,750
yes yeah and that is like a consumer you

00:26:32,990 --> 00:26:37,750
have this car so this is cheating

00:26:49,190 --> 00:26:56,719
[Applause]

00:27:02,520 --> 00:27:04,580

YouTube URL: https://www.youtube.com/watch?v=ckqveGsIcA0


