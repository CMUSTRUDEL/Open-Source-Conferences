Title: ZFS for Newbies
Publication date: 2019-10-26
Playlist: EuroBSDCon 2019, Norway
Description: 
	Dan Langille thinks ZFS is the best thing to happen to filesystems since he stopped using floppy disks. ZFS can simplify so many things and lets you do things you could not do before. If you’re not using ZFS already, this entry-level talk will introduce you to the basics. Things we will cover include:

a short history of the origins
an overview of how ZFS works
replacing a failed drive
why you don’t want a RAID card
scalability
data integrity (detection of file corruption)
why you’ll love snapshots
sending of filesystems to remote servers
creating a mirror
how to create a ZFS array with multiple drives which can lose up to 3 drives without loss of data.
mounting datasets anywhere in other datasets
using zfs to save your current install before upgrading it
simple recommendations for ZFS arrays
why single drive ZFS is better than no ZFS
no, you don’t need ECC
quotas
monitoring ZFS
This talk is designed to get you interested in ZFS and see the potential for making your your data safer and your sysadmin duties lighter. If you come away with half the enthusiasm for ZFS that Dan has, you’ll really enjoy ZFS and appreciate how much easier it makes every-day tasks.

Dan Langille

Dan Langille first started with Unix-like operating systems sometime in the early 1980s. In 1998, he discovered FreeBSD on a near-daily basis after needing a firewall for his ADSL connection. From that start, he began several online journals, founded two highly successful open source conferences, and eventually turned his hobby into a profession.

Dan now works as a sysadmin for a widely-known infosec company and is frequently impressed by those he works with.

When not running conferences or working, Dan blogs about this activities. He wishes he did more mountain biking.
Captions: 
	00:00:02,590 --> 00:00:11,469
I like this disclaimer because it

00:00:07,839 --> 00:00:13,389
absolves me of all responsibility so

00:00:11,469 --> 00:00:15,430
those of you familiar with edifice may

00:00:13,389 --> 00:00:17,340
feel that I'm not fully covering some

00:00:15,430 --> 00:00:22,990
issues and that's but on purpose because

00:00:17,340 --> 00:00:26,289
this is for newbies I can't I can't go

00:00:22,990 --> 00:00:30,699
into detail so you'll hear me say

00:00:26,289 --> 00:00:32,320
something you'll say that don't because

00:00:30,699 --> 00:00:33,970
it's not relevant to newbies

00:00:32,320 --> 00:00:35,380
it'll be relevant to the months they've

00:00:33,970 --> 00:00:35,920
been using it for well but if you're a

00:00:35,380 --> 00:00:38,620
newbie

00:00:35,920 --> 00:00:41,320
those little esoteric things that I've

00:00:38,620 --> 00:00:43,210
not mentioned or glossed over aren't

00:00:41,320 --> 00:00:48,550
relevant because I am grossly

00:00:43,210 --> 00:00:50,310
simplifying so I will admit stuff and

00:00:48,550 --> 00:00:54,090
there will be options skipped because

00:00:50,310 --> 00:00:56,560
this is a talk for newbies mm-hm

00:00:54,090 --> 00:01:01,540
so what we're gonna cover are gonna

00:00:56,560 --> 00:01:06,630
cover all that that's just a copy of

00:01:01,540 --> 00:01:10,240
what was in that in the program so

00:01:06,630 --> 00:01:12,880
started as Sun Microsystems 2008 that

00:01:10,240 --> 00:01:15,369
became a part of FreeBSD and I don't

00:01:12,880 --> 00:01:20,799
really know when I started it sometime

00:01:15,369 --> 00:01:23,409
between 2008 and March 2010 I don't know

00:01:20,799 --> 00:01:27,130
where in there but I just remember what

00:01:23,409 --> 00:01:29,710
I was doing at the time not listed in

00:01:27,130 --> 00:01:32,319
this list is the Sun is the Oracle

00:01:29,710 --> 00:01:34,539
acquisition of Sun and ZFS is still

00:01:32,319 --> 00:01:37,600
developed in Hibbs there and most of the

00:01:34,539 --> 00:01:40,689
open zetas festive element now occurs

00:01:37,600 --> 00:01:43,270
into the open ZFS project this is stuff

00:01:40,689 --> 00:01:45,009
you can look up basically you're not

00:01:43,270 --> 00:01:47,079
gonna run out you're gonna run out of

00:01:45,009 --> 00:01:55,270
hardware before you run out of address

00:01:47,079 --> 00:01:56,889
space in ZFS um ZFS is not raid don't

00:01:55,270 --> 00:02:00,789
think of it as raid think of it as

00:01:56,889 --> 00:02:02,590
redundancy basically you put your drives

00:02:00,789 --> 00:02:06,130
together into a pool which we call a

00:02:02,590 --> 00:02:10,240
zpool you can create a mirror consisting

00:02:06,130 --> 00:02:12,610
of two to n drives you can create a raid

00:02:10,240 --> 00:02:14,800
Z which mean

00:02:12,610 --> 00:02:16,240
which usually has a number 1 2 3 after

00:02:14,800 --> 00:02:18,640
it that's the number of drives you can

00:02:16,240 --> 00:02:22,840
lose from that device without losing any

00:02:18,640 --> 00:02:26,380
data I like to think about that way

00:02:22,840 --> 00:02:28,420
instead of traditional raid because if I

00:02:26,380 --> 00:02:31,630
have a raid C 3 sitting here I can lose

00:02:28,420 --> 00:02:37,600
three of those 8 drives and the system

00:02:31,630 --> 00:02:39,220
still performs think of raid Z is buying

00:02:37,600 --> 00:02:41,260
your time to replace the failed drive

00:02:39,220 --> 00:02:43,150
it's not it's not keeping your data it's

00:02:41,260 --> 00:02:47,170
just buying you time to replace the

00:02:43,150 --> 00:02:50,530
drive before you lose your data all the

00:02:47,170 --> 00:02:54,670
above commands to create a pool come

00:02:50,530 --> 00:02:56,800
from Z pull create a file system is part

00:02:54,670 --> 00:02:59,410
of a zpool so you put your drives in the

00:02:56,800 --> 00:03:01,989
box you say ok these drives are going to

00:02:59,410 --> 00:03:05,050
be this Z pull and then in that zpool

00:03:01,989 --> 00:03:07,480
you create a fall system because you're

00:03:05,050 --> 00:03:12,280
drawing from your pool of disks to

00:03:07,480 --> 00:03:15,220
create a file system a file system can

00:03:12,280 --> 00:03:18,459
have inherited properties so if you say

00:03:15,220 --> 00:03:20,350
ok this is equal I'm gonna put

00:03:18,459 --> 00:03:23,140
compression on and you can say

00:03:20,350 --> 00:03:25,209
everything below it is going to have

00:03:23,140 --> 00:03:27,640
compression on such as you're gonna have

00:03:25,209 --> 00:03:31,330
say slash of R is gonna have compression

00:03:27,640 --> 00:03:32,920
then VAR temp VAR DB whatever else is

00:03:31,330 --> 00:03:36,220
created in there by default will have

00:03:32,920 --> 00:03:40,150
compression on you can override it in

00:03:36,220 --> 00:03:43,200
any let at any step along the way the

00:03:40,150 --> 00:03:45,730
big advantage of pooling your drives

00:03:43,200 --> 00:03:47,739
instead of giving a partition for each

00:03:45,730 --> 00:03:50,620
little part of the system that you used

00:03:47,739 --> 00:03:54,790
to do is that you don't wind up having

00:03:50,620 --> 00:03:57,160
no space at all on VAR DB but 200 Meghan

00:03:54,790 --> 00:03:59,709
slash user isn't Watlington you don't

00:03:57,160 --> 00:04:03,989
have to do assembling from VAR DB MySQL

00:03:59,709 --> 00:04:08,799
to slash user local minus QL for example

00:04:03,989 --> 00:04:11,170
this is a zpool this is equal taken from

00:04:08,799 --> 00:04:15,310
a did you loosen droplet that I have

00:04:11,170 --> 00:04:17,470
that does an egg is installation this is

00:04:15,310 --> 00:04:21,520
the name of the 0 how much drive space I

00:04:17,470 --> 00:04:23,380
have was allocated used fragmentation is

00:04:21,520 --> 00:04:23,940
not the fragmentation that you think of

00:04:23,380 --> 00:04:27,000
when you think

00:04:23,940 --> 00:04:29,490
fragmentation so forget it capacity is

00:04:27,000 --> 00:04:32,750
how much of this I've used and yeah it's

00:04:29,490 --> 00:04:35,220
online and dee doop don't use D be

00:04:32,750 --> 00:04:36,570
friends don't let friends use dee doop

00:04:35,220 --> 00:04:38,160
you'll hear about it and you'll want to

00:04:36,570 --> 00:04:43,050
use it but don't do it use compression

00:04:38,160 --> 00:04:46,830
instead so this is this whole file

00:04:43,050 --> 00:04:50,250
system based on that this is set up for

00:04:46,830 --> 00:04:52,530
be e admin sorry boot environment we'll

00:04:50,250 --> 00:04:55,170
talk about that later but if you just

00:04:52,530 --> 00:04:57,150
ignore the Z root bit you can basically

00:04:55,170 --> 00:04:59,310
see the fall system which is more or

00:04:57,150 --> 00:05:03,000
less mirrored over here you don't have

00:04:59,310 --> 00:05:05,880
to do it that way I could create Z root

00:05:03,000 --> 00:05:10,650
Dan and mount it over here under user

00:05:05,880 --> 00:05:13,200
home Dan so your mount points are

00:05:10,650 --> 00:05:15,090
separate from your filesystem names

00:05:13,200 --> 00:05:16,620
either your filesystem names all the way

00:05:15,090 --> 00:05:21,750
through here and these are the mount

00:05:16,620 --> 00:05:23,190
points so let me just make sure I kept

00:05:21,750 --> 00:05:26,520
everything Z root is the name of the

00:05:23,190 --> 00:05:29,880
zpool 0 slash root is a data set file

00:05:26,520 --> 00:05:35,760
system within that pool Z root root

00:05:29,880 --> 00:05:38,280
default this one here o 0 root default

00:05:35,760 --> 00:05:39,990
is a descendant of root and is also a

00:05:38,280 --> 00:05:44,790
filesystem so yeah this is a filesystem

00:05:39,990 --> 00:05:46,800
lots of file systems as a Soza it does

00:05:44,790 --> 00:05:49,350
not have to be named root by the way it

00:05:46,800 --> 00:05:51,450
can be named whatever you want for this

00:05:49,350 --> 00:05:56,310
boot environment we'll get into boot

00:05:51,450 --> 00:05:59,090
environments later legacy this legacy

00:05:56,310 --> 00:06:04,020
bit here it means that the bootloader

00:05:59,090 --> 00:06:07,560
VFS root man from equals gets set from 0

00:06:04,020 --> 00:06:09,930
: 0 default basically in here that's

00:06:07,560 --> 00:06:12,390
what the legacy means and it's derived

00:06:09,930 --> 00:06:15,360
from the boot FS property of the pool so

00:06:12,390 --> 00:06:17,880
each Z pool you can say ok when you want

00:06:15,360 --> 00:06:22,860
to boot from here boot from there which

00:06:17,880 --> 00:06:25,560
means you can turn the bios off and your

00:06:22,860 --> 00:06:28,860
HBA so it doesn't iterate all the drives

00:06:25,560 --> 00:06:31,280
and it boots up faster because I

00:06:28,860 --> 00:06:33,300
generally boot from a separate Drive

00:06:31,280 --> 00:06:36,840
connected directly to the motherboard

00:06:33,300 --> 00:06:37,800
rather than off the HBA ok what's a

00:06:36,840 --> 00:06:41,190
v-dub I

00:06:37,800 --> 00:06:43,979
again grossly grossly simplified because

00:06:41,190 --> 00:06:45,509
it's skipping over spares logs cache and

00:06:43,979 --> 00:06:47,580
files which you don't want to know about

00:06:45,509 --> 00:06:49,770
because worker this is a newbie talk

00:06:47,580 --> 00:06:52,590
what savvy death a V dev is a single

00:06:49,770 --> 00:06:56,250
disk that V dev can be a mirror of two

00:06:52,590 --> 00:06:57,720
or more disks or V dev can be a raid Z

00:06:56,250 --> 00:07:00,150
which we've already covered all these

00:06:57,720 --> 00:07:03,180
terms so why do you need to know about a

00:07:00,150 --> 00:07:09,150
V dev because you create a zpool from a

00:07:03,180 --> 00:07:10,409
V dev do I get that right so some of the

00:07:09,150 --> 00:07:13,349
terms I'm going to use I'm gonna

00:07:10,409 --> 00:07:14,909
constantly refer to fall systems on I'm

00:07:13,349 --> 00:07:18,780
gonna refer to data sets they are the

00:07:14,909 --> 00:07:22,379
same thing don't get confused by that so

00:07:18,780 --> 00:07:24,629
a data set can be a filesystem a volume

00:07:22,379 --> 00:07:26,610
which is not commonly used or it can be

00:07:24,629 --> 00:07:28,979
a snapshot and we'll cover snapshots

00:07:26,610 --> 00:07:32,159
later but that's a read-only version of

00:07:28,979 --> 00:07:34,430
a file system these are some interesting

00:07:32,159 --> 00:07:38,250
properties you can set on a filesystem

00:07:34,430 --> 00:07:41,219
and set a time off if you don't set a

00:07:38,250 --> 00:07:43,440
time off what happens is when you read

00:07:41,219 --> 00:07:47,789
something it's going to write something

00:07:43,440 --> 00:07:49,400
every time so W here IO and a time isn't

00:07:47,789 --> 00:07:52,380
really as relevant as it used to be

00:07:49,400 --> 00:07:54,389
exact equals no is useful especially if

00:07:52,380 --> 00:07:56,520
you put it on something slack like slash

00:07:54,389 --> 00:07:58,590
temp because it means someone can't

00:07:56,520 --> 00:08:04,110
write a file there and then run it which

00:07:58,590 --> 00:08:04,710
breaks IO cage reservation means hey

00:08:04,110 --> 00:08:07,560
listen

00:08:04,710 --> 00:08:11,639
always keep 10 gigs spare on this file

00:08:07,560 --> 00:08:15,120
system or don't let anyone go over 5 gig

00:08:11,639 --> 00:08:16,620
on this file system so you give space to

00:08:15,120 --> 00:08:21,300
your users they have a writable

00:08:16,620 --> 00:08:23,129
directory and you set a limit on it when

00:08:21,300 --> 00:08:26,400
it comes time to replace a failed Drive

00:08:23,129 --> 00:08:30,210
step one is the important bit you don't

00:08:26,400 --> 00:08:33,570
want to remove the wrong Drive some

00:08:30,210 --> 00:08:35,579
people will do a very clever thing which

00:08:33,570 --> 00:08:38,490
involves putting the serial number in

00:08:35,579 --> 00:08:41,550
the device name which can be useful

00:08:38,490 --> 00:08:44,970
because then you can see which drive

00:08:41,550 --> 00:08:47,160
you're supposed to pull out so add the

00:08:44,970 --> 00:08:49,949
new Drive in remember I didn't save her

00:08:47,160 --> 00:08:51,720
remove the failing drive because you

00:08:49,949 --> 00:08:53,580
your drive may be wonky

00:08:51,720 --> 00:08:58,260
but your system is still perfectly

00:08:53,580 --> 00:08:59,880
intact the zpool is not degraded and if

00:08:58,260 --> 00:09:04,200
you pull a drive out you Z pull is

00:08:59,880 --> 00:09:06,630
degraded and if another drive fails then

00:09:04,200 --> 00:09:09,120
you've got an even bigger problem so if

00:09:06,630 --> 00:09:12,510
you can keep your existing drive in

00:09:09,120 --> 00:09:14,190
there until this process finishes at

00:09:12,510 --> 00:09:16,080
which case the failing drive is no

00:09:14,190 --> 00:09:21,600
longer part of the Z poling just pull it

00:09:16,080 --> 00:09:24,510
out so this is a system in which I did

00:09:21,600 --> 00:09:27,450
exactly what I'm talking about this is

00:09:24,510 --> 00:09:29,820
an old case I'm not sure if I still have

00:09:27,450 --> 00:09:32,730
it but I might have a is uh I think

00:09:29,820 --> 00:09:37,140
there's three HBAs up on the top here

00:09:32,730 --> 00:09:41,640
and so I had to replace a drive this was

00:09:37,140 --> 00:09:43,620
actually me replacing three terabyte

00:09:41,640 --> 00:09:45,480
drives with five terabyte drives and yes

00:09:43,620 --> 00:09:48,690
that is just sitting loose in the case

00:09:45,480 --> 00:09:50,490
and there is actually this may have been

00:09:48,690 --> 00:09:53,160
before I attach the power cords and so

00:09:50,490 --> 00:09:55,980
but I put the I took one of my drives

00:09:53,160 --> 00:09:59,070
out of the drive bays down here and put

00:09:55,980 --> 00:10:01,710
it in there and then put a new drive in

00:09:59,070 --> 00:10:04,020
here and then started replacing the 3

00:10:01,710 --> 00:10:06,200
terabyte with five terabyte one at a

00:10:04,020 --> 00:10:06,200
time

00:10:06,890 --> 00:10:12,810
don't use regen cards just like I said

00:10:10,560 --> 00:10:16,230
friends don't let friends do something

00:10:12,810 --> 00:10:18,210
what was it before do you do friends

00:10:16,230 --> 00:10:22,440
don't let friends do use red curtains

00:10:18,210 --> 00:10:24,240
LFS raid hides stuff so the rate card

00:10:22,440 --> 00:10:25,740
will try to fix something and fix

00:10:24,240 --> 00:10:27,480
something and fix something and say oh

00:10:25,740 --> 00:10:30,000
no this drive is Jed I can't do anything

00:10:27,480 --> 00:10:33,210
with it and then zetas fesses what

00:10:30,000 --> 00:10:36,180
where'd my Drive go where as NFS will

00:10:33,210 --> 00:10:38,820
try and fix the drive for you it'll say

00:10:36,180 --> 00:10:40,500
ok this Drive is having trouble reading

00:10:38,820 --> 00:10:42,030
from over here let me go over and check

00:10:40,500 --> 00:10:43,470
this drive because it's mirrored cuz I

00:10:42,030 --> 00:10:45,150
know it's gonna be over here oh it's

00:10:43,470 --> 00:10:49,589
there it's just fine oh I'll put this

00:10:45,150 --> 00:10:50,700
somewhere else over here but it works so

00:10:49,589 --> 00:10:53,700
zetta thoughts are trying to fix

00:10:50,700 --> 00:10:56,550
something if it can and if it can't

00:10:53,700 --> 00:10:58,770
it'll tell you that it failed it won't

00:10:56,550 --> 00:11:01,830
silently give you a corrupted file it'll

00:10:58,770 --> 00:11:04,010
tell you that it failed so use HPA not

00:11:01,830 --> 00:11:04,010
right

00:11:04,019 --> 00:11:09,129
scaling if you need more space you can

00:11:07,509 --> 00:11:10,779
do what I did earlier and upgrade all

00:11:09,129 --> 00:11:13,600
the drives replace three terabyte with

00:11:10,779 --> 00:11:15,730
five terabyte or you can add a new video

00:11:13,600 --> 00:11:17,800
we talked about vide Ed's earlier so

00:11:15,730 --> 00:11:19,809
you've got a mirror here of drives you

00:11:17,800 --> 00:11:25,809
can just add another mirror what you

00:11:19,809 --> 00:11:28,420
can't do is just take a raid Z something

00:11:25,809 --> 00:11:30,670
and add new drives so you can't go from

00:11:28,420 --> 00:11:33,819
an eighth drive raid z2 to a nine drive

00:11:30,670 --> 00:11:36,309
raid-z to because math is hard like

00:11:33,819 --> 00:11:41,050
really hard to do that so but they are

00:11:36,309 --> 00:11:43,420
working on changing that so you may have

00:11:41,050 --> 00:11:46,269
heard the ZFS is not not expandable

00:11:43,420 --> 00:11:49,389
that's the bit that's not expandable it

00:11:46,269 --> 00:11:52,779
is expandable where you can say either Z

00:11:49,389 --> 00:11:56,050
pool with 8 drives it's a raid Z 2

00:11:52,779 --> 00:11:58,990
here's another 8 drives rigsy true is it

00:11:56,050 --> 00:12:02,490
raid-z to strike them and it's done its

00:11:58,990 --> 00:12:02,490
stripes you'd not doubled your space

00:12:02,999 --> 00:12:09,600
this is a single most important reason

00:12:05,740 --> 00:12:13,389
to use ZFS even if it's only one drive

00:12:09,600 --> 00:12:15,939
it checks sums everything it puts it in

00:12:13,389 --> 00:12:18,129
metadata and it's hierarchical so

00:12:15,939 --> 00:12:20,829
basically you write data down here in a

00:12:18,129 --> 00:12:22,480
file and it puts a checksum here but

00:12:20,829 --> 00:12:24,279
then it checks on it with the other data

00:12:22,480 --> 00:12:26,589
that matches up and all the way up to

00:12:24,279 --> 00:12:29,589
the top of the tree it's check sums all

00:12:26,589 --> 00:12:33,490
the way down so when it goes to read

00:12:29,589 --> 00:12:35,199
something it checks sums data and looks

00:12:33,490 --> 00:12:37,809
at the checksum that's already on disk

00:12:35,199 --> 00:12:39,430
and if it doesn't match it goes to try

00:12:37,809 --> 00:12:43,240
and fix it but if it can't fix it it

00:12:39,430 --> 00:12:45,519
tells you but it'll tell you about the

00:12:43,240 --> 00:12:47,949
errors and it'll look for them and can

00:12:45,519 --> 00:12:49,629
correct it if it can so the difference

00:12:47,949 --> 00:12:51,910
between that and a regular file system

00:12:49,629 --> 00:12:54,730
will non check something file system is

00:12:51,910 --> 00:12:56,470
that you'll find out about the data

00:12:54,730 --> 00:12:58,720
being wrong instead of just being given

00:12:56,470 --> 00:13:01,660
this here's this photograph but one bit

00:12:58,720 --> 00:13:04,779
somewhere is wrong instead you'll be

00:13:01,660 --> 00:13:08,889
told here's this photograph and the data

00:13:04,779 --> 00:13:12,699
is bad not so much important in a file

00:13:08,889 --> 00:13:14,410
but sorry in a photograph but maybe in a

00:13:12,699 --> 00:13:16,390
file that has a bunch of accounting

00:13:14,410 --> 00:13:25,510
figures in it and one bit is

00:13:16,390 --> 00:13:27,430
changed so scrubs what scrubs does is it

00:13:25,510 --> 00:13:30,520
reads all the data that you've written

00:13:27,430 --> 00:13:32,800
to the disk and it reads it all and

00:13:30,520 --> 00:13:35,740
compares checksums and reports any

00:13:32,800 --> 00:13:38,050
errors that it finds and attempts to fix

00:13:35,740 --> 00:13:41,290
any errors that you find always turn

00:13:38,050 --> 00:13:43,540
this on and it's very easy to turn on I

00:13:41,290 --> 00:13:44,110
do it every 7 days you can do it every

00:13:43,540 --> 00:13:45,970
month

00:13:44,110 --> 00:13:48,250
however frequent you want to do it just

00:13:45,970 --> 00:13:51,490
make sure you don't do it more frequent

00:13:48,250 --> 00:13:54,370
than it takes to run I've got some

00:13:51,490 --> 00:13:58,120
scrubs that take about 24 hours run but

00:13:54,370 --> 00:14:00,970
they won't overlap snapshots are the

00:13:58,120 --> 00:14:03,250
most fantastic thing for backups one of

00:14:00,970 --> 00:14:05,530
the biggest problems with backups is

00:14:03,250 --> 00:14:07,360
that you will start your backup let's

00:14:05,530 --> 00:14:09,790
say at midnight and you'll be backing up

00:14:07,360 --> 00:14:15,070
all these files and by the time you

00:14:09,790 --> 00:14:17,710
finish at 2:30 a.m. this log file over

00:14:15,070 --> 00:14:19,300
here doesn't match this log file over

00:14:17,710 --> 00:14:21,520
here because this log file stops at

00:14:19,300 --> 00:14:24,300
midnight and this log file stops at 2:30

00:14:21,520 --> 00:14:26,920
because they're constantly being written

00:14:24,300 --> 00:14:28,240
what you can do in the snapshot because

00:14:26,920 --> 00:14:30,850
it's read-only is you can take a

00:14:28,240 --> 00:14:33,580
snapshot at midnight and every single

00:14:30,850 --> 00:14:36,040
file as of midnight is in that snapshot

00:14:33,580 --> 00:14:39,190
it does not change for the lifetime of

00:14:36,040 --> 00:14:41,830
the backup so you take a snapshot you

00:14:39,190 --> 00:14:43,540
backup the snapshot you don't back up a

00:14:41,830 --> 00:14:47,340
lot of file system you backup the

00:14:43,540 --> 00:14:50,770
snapshot and it's an instant in time

00:14:47,340 --> 00:14:53,290
snapshots are usually very quick so you

00:14:50,770 --> 00:14:54,820
do a snapshot it's done yesterday ever

00:14:53,290 --> 00:14:56,710
this I discovered a snapshot that

00:14:54,820 --> 00:15:02,530
started running on Friday the 13th

00:14:56,710 --> 00:15:04,960
I had to reboot the system nobody could

00:15:02,530 --> 00:15:07,840
figure out what was going on snapshots

00:15:04,960 --> 00:15:10,360
cannot be modified so they're good in

00:15:07,840 --> 00:15:13,390
terms of I don't know if they would pass

00:15:10,360 --> 00:15:15,970
say some legal requirements for for

00:15:13,390 --> 00:15:18,520
images of files but they can't be

00:15:15,970 --> 00:15:23,200
changed that's why I like them for

00:15:18,520 --> 00:15:25,330
backups and but keep in mind snapshots

00:15:23,200 --> 00:15:28,080
then the same hosts who not backups but

00:15:25,330 --> 00:15:30,220
you can send a snapshot to another host

00:15:28,080 --> 00:15:31,630
so you've got a host on these

00:15:30,220 --> 00:15:34,240
coasts and you get a hosts on the west

00:15:31,630 --> 00:15:36,160
coast take a snapshot and you send it to

00:15:34,240 --> 00:15:38,620
the other host you can share a snapshot

00:15:36,160 --> 00:15:42,880
from any system to another system or

00:15:38,620 --> 00:15:47,400
even in a system to within the same

00:15:42,880 --> 00:15:51,610
system it's just an ability to say okay

00:15:47,400 --> 00:15:54,340
ZFS send type ZFS receive it's a little

00:15:51,610 --> 00:15:57,390
more complex than that but it is a

00:15:54,340 --> 00:15:58,900
useful way to do backups send them

00:15:57,390 --> 00:16:01,570
wherever you want

00:15:58,900 --> 00:16:05,020
because snapshots on another host are

00:16:01,570 --> 00:16:06,010
read-only and are a copy of the data

00:16:05,020 --> 00:16:09,180
offline

00:16:06,010 --> 00:16:11,440
well offline relative the first system

00:16:09,180 --> 00:16:13,630
we talked briefly about mirrors before

00:16:11,440 --> 00:16:16,480
two more drives with duplicate content

00:16:13,630 --> 00:16:18,940
but you can also stripe over mirrors so

00:16:16,480 --> 00:16:20,800
basically you have a set of mirrors here

00:16:18,940 --> 00:16:23,320
and a set of mirrors air and you stripe

00:16:20,800 --> 00:16:26,590
over both of them it's sometimes

00:16:23,320 --> 00:16:29,740
referred to as raid 10 because the raid

00:16:26,590 --> 00:16:31,810
1 is the mirror in that 10 is the

00:16:29,740 --> 00:16:38,830
striping over the two raid 0 is usually

00:16:31,810 --> 00:16:41,470
referred to as striping but in in a

00:16:38,830 --> 00:16:42,820
stripe over two mirrors you can lose two

00:16:41,470 --> 00:16:48,880
drives so long as they're not in the

00:16:42,820 --> 00:16:51,790
same mirror before you die so briefly

00:16:48,880 --> 00:16:56,230
talked about raid Z so you need at least

00:16:51,790 --> 00:17:01,060
four drives to do raid Z and that'll get

00:16:56,230 --> 00:17:05,050
your raid Z one but the more drives you

00:17:01,060 --> 00:17:07,510
have the higher this number can come and

00:17:05,050 --> 00:17:09,189
this is the beauty you can lose n drives

00:17:07,510 --> 00:17:10,630
and still be operational and by

00:17:09,189 --> 00:17:14,829
operational I mean the system would

00:17:10,630 --> 00:17:16,810
continue to run it's not like oh my god

00:17:14,829 --> 00:17:21,839
this is some Cameron because I'm missing

00:17:16,810 --> 00:17:26,439
two it now it just runs one of the most

00:17:21,839 --> 00:17:29,410
neat things I use on ZFS is mounting

00:17:26,439 --> 00:17:33,180
within mounts so I have a bunch of slow

00:17:29,410 --> 00:17:36,160
drives for the main system two old

00:17:33,180 --> 00:17:38,050
spinning disks and that's what I boot

00:17:36,160 --> 00:17:39,970
from there directly connected to the

00:17:38,050 --> 00:17:42,480
motherboard but then I have a database

00:17:39,970 --> 00:17:45,539
that I run run on the system so

00:17:42,480 --> 00:17:48,480
add in a couple of SSDs for that

00:17:45,539 --> 00:17:50,700
database and I create the Z pull on the

00:17:48,480 --> 00:17:53,220
SSDs but then mount them in VAR DB

00:17:50,700 --> 00:17:55,919
Postgres which is just a mount point on

00:17:53,220 --> 00:17:57,450
the main system and your your code

00:17:55,919 --> 00:17:59,279
doesn't care it's on a different file

00:17:57,450 --> 00:18:01,289
system it's completely hidden and it

00:17:59,279 --> 00:18:03,899
just works you can also do this with

00:18:01,289 --> 00:18:08,519
slash temp but slash temp on the fast

00:18:03,899 --> 00:18:11,159
drives as well so here's an example of

00:18:08,519 --> 00:18:13,440
me doing exactly that for podría or have

00:18:11,159 --> 00:18:16,350
my Z root with my smaller drives here

00:18:13,440 --> 00:18:18,809
but then I have my fast tank with a lot

00:18:16,350 --> 00:18:21,029
of space here and you can see that

00:18:18,809 --> 00:18:23,940
pudiera is mounted at user local food

00:18:21,029 --> 00:18:26,129
rare and that's just part of user and

00:18:23,940 --> 00:18:29,340
it's completely transparent to anything

00:18:26,129 --> 00:18:31,320
else that I'm doing this is also another

00:18:29,340 --> 00:18:35,039
way to expand the system if you don't

00:18:31,320 --> 00:18:36,929
want to touch your original raid-z you

00:18:35,039 --> 00:18:38,909
can just put the space where you want up

00:18:36,929 --> 00:18:47,700
you can do a whole bunch of mount points

00:18:38,909 --> 00:18:50,210
like this boot environments a boot

00:18:47,700 --> 00:18:52,889
environment is a ZFS file system

00:18:50,210 --> 00:18:55,769
designed for booting and there's a few

00:18:52,889 --> 00:18:57,090
requirements for that but we're not

00:18:55,769 --> 00:18:58,859
gonna get into what the actual

00:18:57,090 --> 00:19:00,840
requirements are for a boot environment

00:18:58,859 --> 00:19:01,440
we're just gonna show you what you can

00:19:00,840 --> 00:19:06,359
do with it

00:19:01,440 --> 00:19:08,070
because you're gonna like it basically

00:19:06,359 --> 00:19:11,399
you can manage boot environments with

00:19:08,070 --> 00:19:14,249
b/e admin or be ECT LBE admin it's been

00:19:11,399 --> 00:19:18,350
around a bit longer Bea's CTL is now in

00:19:14,249 --> 00:19:21,809
base on FreeBSD I think be admin is

00:19:18,350 --> 00:19:23,549
imports basically what it does is it

00:19:21,809 --> 00:19:26,070
saves your current boot environment and

00:19:23,549 --> 00:19:31,289
the use case that we're going to use is

00:19:26,070 --> 00:19:34,259
we're going to upgrade from FreeBSD 11.3

00:19:31,289 --> 00:19:36,929
to FreeBSD 12 so what you do is you save

00:19:34,259 --> 00:19:38,850
your current boot environment and what

00:19:36,929 --> 00:19:41,600
that does basically is it clones the

00:19:38,850 --> 00:19:44,309
environment that you're booting from now

00:19:41,600 --> 00:19:46,759
after you've done that you upgrade your

00:19:44,309 --> 00:19:52,080
current environment and then you reboot

00:19:46,759 --> 00:19:54,480
and if so all okay great if it's not you

00:19:52,080 --> 00:19:55,380
reboot and during the reboot process you

00:19:54,480 --> 00:19:58,110
choose the

00:19:55,380 --> 00:20:00,900
environment that you saved away here's

00:19:58,110 --> 00:20:03,810
an example see this magic option here

00:20:00,900 --> 00:20:09,060
number seven I press number seven here

00:20:03,810 --> 00:20:10,650
and I got that which is my default and I

00:20:09,060 --> 00:20:12,330
change it to that which is really

00:20:10,650 --> 00:20:15,270
difficult to read but that's the other

00:20:12,330 --> 00:20:19,350
bit environment and then I put it back

00:20:15,270 --> 00:20:20,940
in to eleven point three so anytime

00:20:19,350 --> 00:20:23,340
you're doing updates anytime you're

00:20:20,940 --> 00:20:25,560
doing major changes you can use boot

00:20:23,340 --> 00:20:28,410
environments for something like that you

00:20:25,560 --> 00:20:31,370
can also use it for booting new kernels

00:20:28,410 --> 00:20:34,620
if you're doing a lot of kernel work

00:20:31,370 --> 00:20:36,690
next boot is the neat thing that you can

00:20:34,620 --> 00:20:40,260
use for that because all you do just say

00:20:36,690 --> 00:20:42,630
on my next boot boot from this and then

00:20:40,260 --> 00:20:46,320
the next boot after that is what you're

00:20:42,630 --> 00:20:50,640
using before so it is truly just boot

00:20:46,320 --> 00:20:51,990
once from this other thing so we're

00:20:50,640 --> 00:20:55,890
gonna go through some very simple

00:20:51,990 --> 00:21:02,030
configuration things here we're creating

00:20:55,890 --> 00:21:04,650
a partition on da0 we add a ZFS

00:21:02,030 --> 00:21:06,720
partition this is just for K alignment

00:21:04,650 --> 00:21:09,870
this is a label which is the serial

00:21:06,720 --> 00:21:12,270
number of the drive and boom that's what

00:21:09,870 --> 00:21:15,270
looks like there and you've got the ZFS

00:21:12,270 --> 00:21:16,710
partition and then what I do is I've

00:21:15,270 --> 00:21:19,440
done the same thing with my other drive

00:21:16,710 --> 00:21:20,580
and I saves you pool create this is the

00:21:19,440 --> 00:21:22,500
name of the Z pool

00:21:20,580 --> 00:21:24,000
I'm call it it's going to be a mirror

00:21:22,500 --> 00:21:29,040
and it's gonna be on those two drives

00:21:24,000 --> 00:21:30,720
and bang there's my Z pool now this is

00:21:29,040 --> 00:21:34,830
actually an older Z pool because I

00:21:30,720 --> 00:21:37,770
actually did a scrub on this but you can

00:21:34,830 --> 00:21:40,620
see that it is it is called env D it

00:21:37,770 --> 00:21:46,050
doesn't match up with my data because

00:21:40,620 --> 00:21:48,990
this is actually taken from one system

00:21:46,050 --> 00:21:53,160
and then modified to suit the example

00:21:48,990 --> 00:21:55,440
ignore that part basically here's mirror

00:21:53,160 --> 00:21:57,270
zero and if you have a stripe of mirrors

00:21:55,440 --> 00:21:59,310
you could duplicate these three lines

00:21:57,270 --> 00:22:02,130
just down below here we'll see that in

00:21:59,310 --> 00:22:04,020
the next example so here we've got four

00:22:02,130 --> 00:22:07,260
drives and we're going to create a raid

00:22:04,020 --> 00:22:09,059
z1 again it's going to be called my data

00:22:07,260 --> 00:22:12,149
and it's raid-z one and it's

00:22:09,059 --> 00:22:15,480
four drives what does that look raid-z -

00:22:12,149 --> 00:22:17,009
we just had another drive crazies we'll

00:22:15,480 --> 00:22:20,509
get to raise the three nets but there's

00:22:17,009 --> 00:22:26,580
raid-z - you can see the four the five

00:22:20,509 --> 00:22:30,509
six drive one of them has a serial

00:22:26,580 --> 00:22:35,129
number in it so there's a red XIII with

00:22:30,509 --> 00:22:37,139
six Drive there's a raid z1 again you

00:22:35,129 --> 00:22:38,850
basically give it a name say I'm gonna

00:22:37,139 --> 00:22:40,830
mirror those two drives and I'm gonna

00:22:38,850 --> 00:22:43,049
mirror those two drives and you can

00:22:40,830 --> 00:22:47,190
repeat that process as far down the

00:22:43,049 --> 00:22:50,639
pages you have drives and there's a red

00:22:47,190 --> 00:22:53,249
Z raid10

00:22:50,639 --> 00:22:58,799
a mirror a mirror and it's striped over

00:22:53,249 --> 00:23:01,169
the to talk briefly about quotas it's on

00:22:58,799 --> 00:23:02,759
the data set its limit on how much space

00:23:01,169 --> 00:23:04,950
you can use and it includes the

00:23:02,759 --> 00:23:07,019
descendants so if you let you use your

00:23:04,950 --> 00:23:09,480
create new file systems that's all going

00:23:07,019 --> 00:23:11,850
to be included in there the other thing

00:23:09,480 --> 00:23:13,619
is it includes snapshots because

00:23:11,850 --> 00:23:16,710
although you take a snap if you take a

00:23:13,619 --> 00:23:18,659
snapshot and then delete a five gig file

00:23:16,710 --> 00:23:20,999
it doesn't free up the space because

00:23:18,659 --> 00:23:23,039
it's still involved in the snapshot so

00:23:20,999 --> 00:23:26,789
you got to keep that in mind that

00:23:23,039 --> 00:23:28,700
snapshots when you make them that space

00:23:26,789 --> 00:23:32,970
will stay around until you delete the

00:23:28,700 --> 00:23:35,249
snapshot yeah and I don't want to get

00:23:32,970 --> 00:23:37,950
into this stuff because even I have

00:23:35,249 --> 00:23:41,340
trouble figuring out what it means

00:23:37,950 --> 00:23:43,549
remember to scrub you can create an egg

00:23:41,340 --> 00:23:43,549
as

00:23:43,960 --> 00:23:49,280
script for doing that also runs evil

00:23:47,840 --> 00:23:52,100
status because that tells you if there's

00:23:49,280 --> 00:23:54,020
any problems monitor quotas and

00:23:52,100 --> 00:23:55,790
monitored the capacity and there are

00:23:54,020 --> 00:23:58,580
scripts for during all that easily

00:23:55,790 --> 00:24:02,180
available now we're gonna go through

00:23:58,580 --> 00:24:08,350
some myth-busting because there's a lot

00:24:02,180 --> 00:24:11,120
of bad advice that says that there so I

00:24:08,350 --> 00:24:12,980
said this before a single Drive with set

00:24:11,120 --> 00:24:17,030
if s is better than those edifice at all

00:24:12,980 --> 00:24:19,370
so just try it and you will enjoy it ECC

00:24:17,030 --> 00:24:23,720
is not required people will say you got

00:24:19,370 --> 00:24:26,600
to use ECC with ZFS but ZFS what the ECC

00:24:23,720 --> 00:24:28,700
is better than those edifice at all you

00:24:26,600 --> 00:24:31,430
need high-end our hardware no you don't

00:24:28,700 --> 00:24:34,070
most of my systems are consumer grade

00:24:31,430 --> 00:24:37,160
they're definitely not enterprise you

00:24:34,070 --> 00:24:39,350
can get an HPA for about $100 off ebay I

00:24:37,160 --> 00:24:40,910
do have some super micro chess ease

00:24:39,350 --> 00:24:44,630
because I bought myself birthday

00:24:40,910 --> 00:24:47,090
presents and they were very much nicer

00:24:44,630 --> 00:24:49,220
than what I had before when you're

00:24:47,090 --> 00:24:50,840
looking for hardware look to the FreeNAS

00:24:49,220 --> 00:24:51,620
community because they figured this all

00:24:50,840 --> 00:24:56,810
out already

00:24:51,620 --> 00:24:59,390
especially for consumer-grade stuff lots

00:24:56,810 --> 00:25:02,240
of RAM no that's not true either I have

00:24:59,390 --> 00:25:04,850
a system running with one gig of ram and

00:25:02,240 --> 00:25:07,610
that one system runs with 250 gig free

00:25:04,850 --> 00:25:10,130
250 mega free sorry and that's the

00:25:07,610 --> 00:25:12,770
digitalocean droplet that I have it's

00:25:10,130 --> 00:25:14,690
very slow when I go to the web page but

00:25:12,770 --> 00:25:18,910
it's just for monitoring I don't I don't

00:25:14,690 --> 00:25:18,910
need speed I just needed to monitor oh

00:25:19,990 --> 00:25:23,990
so this isn't a tip from last night this

00:25:22,460 --> 00:25:29,240
is more like a tip from sometime in

00:25:23,990 --> 00:25:31,880
August but put your OS on a zetas fit

00:25:29,240 --> 00:25:35,440
for your operating system on an on a ZFS

00:25:31,880 --> 00:25:40,700
mirror and put your data on the rest

00:25:35,440 --> 00:25:44,570
because then you can actually you could

00:25:40,700 --> 00:25:46,640
actually use you FS on the OS instead

00:25:44,570 --> 00:25:47,120
but whatever you do don't move from the

00:25:46,640 --> 00:25:52,280
HBA

00:25:47,120 --> 00:25:55,370
and the reason I say that is if you have

00:25:52,280 --> 00:25:56,910
your boot drives spread across seven or

00:25:55,370 --> 00:25:59,520
eight drives in your raid Z

00:25:56,910 --> 00:26:01,710
the HP is going to choose one of them to

00:25:59,520 --> 00:26:04,800
boot from and that means you have to

00:26:01,710 --> 00:26:06,690
iterate through all those drives during

00:26:04,800 --> 00:26:08,760
the boot process you can speed up your

00:26:06,690 --> 00:26:11,760
boot process by turning off the BIOS on

00:26:08,760 --> 00:26:15,780
your drive if you're booting from things

00:26:11,760 --> 00:26:19,740
directly connected to the motherboard

00:26:15,780 --> 00:26:22,470
and the the main reason I like booting

00:26:19,740 --> 00:26:24,150
from the motherboard is it eliminates

00:26:22,470 --> 00:26:28,350
any problems that you might have with

00:26:24,150 --> 00:26:30,900
the HBA if your raid Z gives out or the

00:26:28,350 --> 00:26:32,880
HP ink is out you can probably still

00:26:30,900 --> 00:26:36,440
boot off the motherboard I just think it

00:26:32,880 --> 00:26:39,420
removes complexity from your breeding I

00:26:36,440 --> 00:26:41,490
got some tips from savage late she's

00:26:39,420 --> 00:26:46,520
here I don't know if she's in the room

00:26:41,490 --> 00:26:53,490
but she is at the conference oh oh

00:26:46,520 --> 00:26:55,730
that's not good there's this one button

00:26:53,490 --> 00:26:58,140
down here that takes me out of it I

00:26:55,730 --> 00:27:00,600
already mentioned this tell your BIOS to

00:26:58,140 --> 00:27:03,510
ignore the HP so it's fewer drives to

00:27:00,600 --> 00:27:07,230
scan that goes faster you can safely

00:27:03,510 --> 00:27:09,540
partition SSDs using the OS so basically

00:27:07,230 --> 00:27:12,300
you get your two SSDs you get the OS

00:27:09,540 --> 00:27:15,060
mounted on you don't need all that space

00:27:12,300 --> 00:27:18,060
for the sf4 for the OS you only need

00:27:15,060 --> 00:27:21,240
what to three gig for the operating

00:27:18,060 --> 00:27:23,330
system you can partition other bits of

00:27:21,240 --> 00:27:26,940
that SSD and use it for other things

00:27:23,330 --> 00:27:28,890
create another Z pool so basically the

00:27:26,940 --> 00:27:33,110
same Drive is involved in multiple Z

00:27:28,890 --> 00:27:33,110
pools and I do that I do that at home

00:27:33,800 --> 00:27:42,750
set your record size very big for files

00:27:37,080 --> 00:27:46,800
that have large data you can go you can

00:27:42,750 --> 00:27:48,090
get another 5 to 10 it was a significant

00:27:46,800 --> 00:27:49,440
percentage I don't want to say how much

00:27:48,090 --> 00:27:51,750
it was but it was a significant

00:27:49,440 --> 00:27:54,560
percentage we change the record size on

00:27:51,750 --> 00:27:54,560
on some drives

00:27:58,350 --> 00:28:02,560
when I restarted this it lost my time

00:28:01,240 --> 00:28:05,310
so basically I've been going about a

00:28:02,560 --> 00:28:10,810
half hour now right we started at 10:30

00:28:05,310 --> 00:28:12,430
so we covered a lot of stuff I went

00:28:10,810 --> 00:28:16,050
through that way faster than I thought I

00:28:12,430 --> 00:28:16,050
would coffee helps

00:28:16,830 --> 00:28:27,220
there must be questions because as well

00:28:20,160 --> 00:28:29,800
you I bet you this can move I just so it

00:28:27,220 --> 00:28:34,180
gets recorded so two questions from

00:28:29,800 --> 00:28:36,970
newbie you said that snapshots are good

00:28:34,180 --> 00:28:41,260
for backup but they are read-only so how

00:28:36,970 --> 00:28:43,110
do you restore you just restore as you

00:28:41,260 --> 00:28:45,790
would and you restore it over the main

00:28:43,110 --> 00:28:48,400
file system you don't restore into the

00:28:45,790 --> 00:28:51,540
backup yeah but if you send your

00:28:48,400 --> 00:28:54,820
snapshot back it's still read-only right

00:28:51,540 --> 00:28:58,060
yeah so you remove the read-only flag

00:28:54,820 --> 00:29:00,160
and you're done or I mean no no how do

00:28:58,060 --> 00:29:03,430
you make it readwrite again what you can

00:29:00,160 --> 00:29:06,520
do is you there's a hidden directory

00:29:03,430 --> 00:29:09,010
called dot ZFS at the top of every file

00:29:06,520 --> 00:29:12,370
system and if you just want one file you

00:29:09,010 --> 00:29:15,880
can do CDs NFS slash snapshot slash

00:29:12,370 --> 00:29:17,200
whatever you name the snapshot down to

00:29:15,880 --> 00:29:20,230
where you have the file and you can copy

00:29:17,200 --> 00:29:22,660
it over or you can do a ZFS roll back

00:29:20,230 --> 00:29:25,360
but that rolls back everything now what

00:29:22,660 --> 00:29:29,770
I mean is suppose you make a snapshot of

00:29:25,360 --> 00:29:30,730
your dataset oh yeah yeah send it to

00:29:29,770 --> 00:29:33,670
another data center

00:29:30,730 --> 00:29:35,080
yeah and in your original data center

00:29:33,670 --> 00:29:39,760
there was a disaster so you lost

00:29:35,080 --> 00:29:42,700
everything now you want to restore so

00:29:39,760 --> 00:29:44,560
you have read-only it's not shot waiting

00:29:42,700 --> 00:29:48,430
for you to that's a good point

00:29:44,560 --> 00:29:51,850
is the thing that you sent actually

00:29:48,430 --> 00:29:53,260
read-only no I don't think it is because

00:29:51,850 --> 00:29:55,590
it's not a snapshot anyone done this

00:29:53,260 --> 00:29:55,590
already

00:29:58,750 --> 00:30:17,590
what you've received is not read-only

00:30:00,730 --> 00:30:19,840
right yeah yeah so you just do is that a

00:30:17,590 --> 00:30:25,780
first send of your snapshot into the

00:30:19,840 --> 00:30:28,390
first receive closely person right you

00:30:25,780 --> 00:30:30,640
know is that if I send over to your

00:30:28,390 --> 00:30:34,300
other system so the first receive which

00:30:30,640 --> 00:30:35,920
unpacks it as a user FS in the system

00:30:34,300 --> 00:30:41,140
and it's rewrite on the other says do

00:30:35,920 --> 00:30:43,210
everything yep thank you Dan I have a

00:30:41,140 --> 00:30:49,030
question regarding terminology you said

00:30:43,210 --> 00:30:55,840
ZFS but zebu mm-hmm why why is the

00:30:49,030 --> 00:30:59,040
Rossetti havoc habit because that pool

00:30:55,840 --> 00:31:03,250
doesn't sound very good and yeah

00:30:59,040 --> 00:31:09,930
Canadian so it is if is it I don't know

00:31:03,250 --> 00:31:13,890
how my vocabulary changes I don't know

00:31:09,930 --> 00:31:13,890
what what do Americans say

00:31:20,950 --> 00:31:32,299
another question so to keep the flame

00:31:29,389 --> 00:31:36,529
wars and III I mean the religious wars

00:31:32,299 --> 00:31:38,960
away very briefly your comments or your

00:31:36,529 --> 00:31:40,759
comparison of is it the fest with but

00:31:38,960 --> 00:31:48,619
Rufus oh that's easy

00:31:40,759 --> 00:31:53,559
I've never used better FS when you are

00:31:48,619 --> 00:31:57,919
asking about the zpool why is that VF o

00:31:53,559 --> 00:31:59,690
Z pullers consists of V devs right right

00:31:57,919 --> 00:32:01,489
I always have trouble remembering this

00:31:59,690 --> 00:32:03,499
myself I'm figuring out I just know that

00:32:01,489 --> 00:32:06,559
I create busy people a lot of travelers

00:32:03,499 --> 00:32:08,929
but like the Zetas okay oh virtual

00:32:06,559 --> 00:32:10,940
device I think is what it means but I

00:32:08,929 --> 00:32:13,669
have question about the partitions you

00:32:10,940 --> 00:32:17,779
but before you add a drive to a Zippo

00:32:13,669 --> 00:32:20,029
you partition a with GP t yes and I

00:32:17,779 --> 00:32:22,099
don't know why because the drives may

00:32:20,029 --> 00:32:26,389
have slightly different sizes or

00:32:22,099 --> 00:32:29,839
something Linux tends to just give it a

00:32:26,389 --> 00:32:32,929
whole drive FreeBSD tends to partitioner

00:32:29,839 --> 00:32:34,849
and give it the partition that allows

00:32:32,929 --> 00:32:36,349
you to do a lot of things I think the

00:32:34,849 --> 00:32:38,659
main reason is because you can do a lot

00:32:36,349 --> 00:32:40,369
of magic with giome if you have the

00:32:38,659 --> 00:32:45,409
partitions but if you have the raw drive

00:32:40,369 --> 00:32:48,679
you can't the other reason is give it

00:32:45,409 --> 00:32:50,089
our partition don't use all the drive so

00:32:48,679 --> 00:32:52,369
then if you have to replace it with

00:32:50,089 --> 00:32:54,499
another drive which may be slightly

00:32:52,369 --> 00:32:56,779
smaller even though it's advertises the

00:32:54,499 --> 00:32:59,109
same size you can just produce a

00:32:56,779 --> 00:33:07,909
partition a little bit and you haven't

00:32:59,109 --> 00:33:12,970
run into a bad place more questions so

00:33:07,909 --> 00:33:16,520
who hasn't used that FS yet all right

00:33:12,970 --> 00:33:17,120
so it's been around a long time it

00:33:16,520 --> 00:33:20,840
worked

00:33:17,120 --> 00:33:22,010
it's pretty solid once you get into the

00:33:20,840 --> 00:33:28,280
bigger jobs you don't have to worry

00:33:22,010 --> 00:33:31,059
about the F sack at the beginning it's

00:33:28,280 --> 00:33:33,530
no more questions

00:33:31,059 --> 00:33:41,900
we're done thank you

00:33:33,530 --> 00:33:41,900
[Applause]

00:33:46,840 --> 00:33:48,900

YouTube URL: https://www.youtube.com/watch?v=3oG-1U5AI9A


