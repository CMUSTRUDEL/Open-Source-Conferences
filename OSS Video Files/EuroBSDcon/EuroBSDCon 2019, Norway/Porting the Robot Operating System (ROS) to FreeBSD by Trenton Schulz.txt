Title: Porting the Robot Operating System (ROS) to FreeBSD by Trenton Schulz
Publication date: 2019-10-21
Playlist: EuroBSDCon 2019, Norway
Description: 
	Porting the Robot Operating System (ROS) to FreeBSD

Robots are an exciting technology that is continually being researched and brought closer to the mainstream. Why should the BSDs be left out of this technology? The robot operating system (ROS) is a middleware solution for communicating between different robot and sensor nodes. It is also a collection of software mostly under a BSD or BSD-compatible license. Being open source, much of it can work on FreeBSD, but there are a few missing pieces. This talk will introduce ROS, talk a little about its past history with FreeBSD, describe the missing pieces to make it work on FreeBSD, document the porting process, and offer a starting point for how to integrate ROS into the ports system.

More Info:
https://2019.eurobsdcon.org/talk-speakers/#ROS
Captions: 
	00:00:05,200 --> 00:00:10,680
[Applause]

00:00:08,030 --> 00:00:12,090
Thank You Rene and thanks for everyone

00:00:10,680 --> 00:00:15,120
for for showing up

00:00:12,090 --> 00:00:18,720
my name is Trenton Schultz and I'm

00:00:15,120 --> 00:00:20,970
actually a PhD standed eight at the

00:00:18,720 --> 00:00:24,270
University of Oslo and I'm looking at

00:00:20,970 --> 00:00:27,239
human robot interaction and this is kind

00:00:24,270 --> 00:00:29,130
of a story that's based on on the side

00:00:27,239 --> 00:00:32,790
path of what I was doing in my research

00:00:29,130 --> 00:00:34,530
so when we got a laptop at the

00:00:32,790 --> 00:00:37,830
University of or when you get a laptop

00:00:34,530 --> 00:00:39,210
as part of a PhD candidate they're kind

00:00:37,830 --> 00:00:40,680
of okay with since you can install

00:00:39,210 --> 00:00:42,000
whatever sort of operating system you

00:00:40,680 --> 00:00:45,030
want on it as long as you're willing to

00:00:42,000 --> 00:00:48,030
take care of it so I installed FreeBSD

00:00:45,030 --> 00:00:50,880
and that worked pretty well for a year

00:00:48,030 --> 00:00:53,760
or so but then I eventually had to start

00:00:50,880 --> 00:00:56,220
working with the robots with robots and

00:00:53,760 --> 00:01:00,690
I needed to use the robot operating

00:00:56,220 --> 00:01:03,180
system or Ross as it is called and well

00:01:00,690 --> 00:01:06,840
it really needed to work run on an

00:01:03,180 --> 00:01:09,000
abundant for it to work very well and I

00:01:06,840 --> 00:01:11,370
was thinking well maybe I could try to

00:01:09,000 --> 00:01:15,659
port this and so this is kind of a story

00:01:11,370 --> 00:01:17,159
of porting and and how it works we'll

00:01:15,659 --> 00:01:21,720
see how well it kind of works out at the

00:01:17,159 --> 00:01:24,720
end so first I'll talk a little bit

00:01:21,720 --> 00:01:28,830
about why you would actually need some

00:01:24,720 --> 00:01:31,260
sort of robot operating system so if we

00:01:28,830 --> 00:01:33,270
take a look at a robot robot has kind of

00:01:31,260 --> 00:01:36,750
this interesting combination of a

00:01:33,270 --> 00:01:40,320
physical presence and software so this

00:01:36,750 --> 00:01:42,060
is a turtle bot 3 it's it's a robot that

00:01:40,320 --> 00:01:43,470
kind of just moves around and can be

00:01:42,060 --> 00:01:46,770
used for its kind of sensing its

00:01:43,470 --> 00:01:48,840
environment and it has several parts

00:01:46,770 --> 00:01:51,900
that we need to kind of that a robot

00:01:48,840 --> 00:01:54,900
needs to do do its things so first it

00:01:51,900 --> 00:01:56,369
has a sensor which here's a lidar sensor

00:01:54,900 --> 00:01:59,400
which it uses to kind of figure out

00:01:56,369 --> 00:02:02,100
where it's going it also has these

00:01:59,400 --> 00:02:04,860
motors and wheels that it can use to

00:02:02,100 --> 00:02:08,149
move around and turn in that course has

00:02:04,860 --> 00:02:11,639
a microcontroller that controls these

00:02:08,149 --> 00:02:15,419
different wheels and the sensor and of

00:02:11,639 --> 00:02:16,590
course you have a CPU that would be the

00:02:15,419 --> 00:02:20,940
brain of

00:02:16,590 --> 00:02:23,040
the robot but of course it this is all

00:02:20,940 --> 00:02:25,470
software or hardware that's just running

00:02:23,040 --> 00:02:28,140
by itself so you actually need something

00:02:25,470 --> 00:02:30,030
else too you need software that kind of

00:02:28,140 --> 00:02:31,920
like works and deals with all these

00:02:30,030 --> 00:02:34,640
things so you need something that'll be

00:02:31,920 --> 00:02:38,130
reading data from the slide our sensor

00:02:34,640 --> 00:02:41,670
you need to be able to start and stop

00:02:38,130 --> 00:02:44,489
your motors and like for example turn

00:02:41,670 --> 00:02:45,900
them you need something to drive the

00:02:44,489 --> 00:02:48,330
controls hardware that will actually

00:02:45,900 --> 00:02:51,660
tell it to do that and then on the CPU

00:02:48,330 --> 00:02:53,730
you need to be running navigation to be

00:02:51,660 --> 00:02:56,610
able to figure out where you want to go

00:02:53,730 --> 00:02:58,560
you need something called odometry which

00:02:56,610 --> 00:03:00,840
is basically telling you where you are

00:02:58,560 --> 00:03:02,910
at the moment and then you also need to

00:03:00,840 --> 00:03:04,739
be able to send commands to these to

00:03:02,910 --> 00:03:07,349
these things so everything works like

00:03:04,739 --> 00:03:09,750
that the light our sensor is on like

00:03:07,349 --> 00:03:11,340
what is the current value from the lidar

00:03:09,750 --> 00:03:15,870
sensor so I can figure out where I am

00:03:11,340 --> 00:03:17,250
and all that so this is kind of you know

00:03:15,870 --> 00:03:19,709
there's a lot of software that you need

00:03:17,250 --> 00:03:24,480
to do to work with this and this is kind

00:03:19,709 --> 00:03:25,920
of where Ross can come in so calling it

00:03:24,480 --> 00:03:28,140
an operating system is a bit of a

00:03:25,920 --> 00:03:30,060
misnomer it's it's not really an

00:03:28,140 --> 00:03:32,549
operating system but it's a bunch of

00:03:30,060 --> 00:03:34,500
things that you can get that will help

00:03:32,549 --> 00:03:37,500
you run a robot

00:03:34,500 --> 00:03:39,989
so how Ross likes to describe it even on

00:03:37,500 --> 00:03:42,390
their own website is that the first part

00:03:39,989 --> 00:03:45,380
is plumbing and that's this middleware

00:03:42,390 --> 00:03:49,319
layer so it's this middleware network

00:03:45,380 --> 00:03:52,859
that you create nodes that can either

00:03:49,319 --> 00:03:54,720
publish or subscribe to information and

00:03:52,859 --> 00:03:56,430
then you have messages that you define

00:03:54,720 --> 00:03:58,680
and these are well defined messages that

00:03:56,430 --> 00:04:00,780
all the robots or all the nodes and the

00:03:58,680 --> 00:04:02,970
network know about so you can publish

00:04:00,780 --> 00:04:05,880
for example picture information you can

00:04:02,970 --> 00:04:07,709
publish sensor information and another

00:04:05,880 --> 00:04:10,769
node can pick up that information and do

00:04:07,709 --> 00:04:13,560
its processing on it of course there's

00:04:10,769 --> 00:04:17,010
also a need for tooling around working

00:04:13,560 --> 00:04:18,450
with robots so you need ways of being

00:04:17,010 --> 00:04:20,190
able to check what these notes are

00:04:18,450 --> 00:04:22,620
saying you need to be able to see

00:04:20,190 --> 00:04:24,270
probably simulation environments to be

00:04:22,620 --> 00:04:27,520
able to test robots before you have a

00:04:24,270 --> 00:04:29,970
robot built you also

00:04:27,520 --> 00:04:32,889
might want to actually capture data and

00:04:29,970 --> 00:04:36,460
replay it back multiple times so you can

00:04:32,889 --> 00:04:38,229
refine algorithms or other things so

00:04:36,460 --> 00:04:41,080
these are things that you need to do a

00:04:38,229 --> 00:04:42,699
lot of when you're building the robot

00:04:41,080 --> 00:04:44,590
and getting things to work adjusting

00:04:42,699 --> 00:04:46,360
your algorithms the other nice thing

00:04:44,590 --> 00:04:49,259
about this is kind of the other two

00:04:46,360 --> 00:04:52,000
parts are kind of built into that so

00:04:49,259 --> 00:04:54,039
once you have this plumbing layer you

00:04:52,000 --> 00:04:57,940
can design your these capabilities you

00:04:54,039 --> 00:05:00,729
can you can basically build nodes on top

00:04:57,940 --> 00:05:02,770
of each other and build libraries so

00:05:00,729 --> 00:05:05,530
that you can do things like navigate

00:05:02,770 --> 00:05:07,539
around so you can build a navigation

00:05:05,530 --> 00:05:09,940
stack and then for example if you wanted

00:05:07,539 --> 00:05:13,229
to do something like take out the way

00:05:09,940 --> 00:05:15,849
that a robot speeds up and slows down

00:05:13,229 --> 00:05:18,190
like I was doing in my research then you

00:05:15,849 --> 00:05:19,900
just have to build that little section

00:05:18,190 --> 00:05:22,199
and you don't have to build an entire

00:05:19,900 --> 00:05:25,240
navigation stack which is really nice

00:05:22,199 --> 00:05:27,069
instead of having to like learn a whole

00:05:25,240 --> 00:05:29,860
new navigation stack and do it for every

00:05:27,069 --> 00:05:31,720
single every single time and then the

00:05:29,860 --> 00:05:33,370
thing is that there's this community

00:05:31,720 --> 00:05:35,199
that kind of springs up about it because

00:05:33,370 --> 00:05:36,909
everybody wants to kind of share these

00:05:35,199 --> 00:05:39,639
libraries and have it work with

00:05:36,909 --> 00:05:41,259
different robots and that's kind of the

00:05:39,639 --> 00:05:43,659
the other side of this at the end of the

00:05:41,259 --> 00:05:45,820
day you know it's great to do it for one

00:05:43,659 --> 00:05:47,169
robot but eventually you're gonna want

00:05:45,820 --> 00:05:49,570
to be able to do it with lots of

00:05:47,169 --> 00:05:52,210
different robots and Roth kind of

00:05:49,570 --> 00:05:53,860
enables you to do that so on the ross

00:05:52,210 --> 00:05:56,259
website they have a list of all the

00:05:53,860 --> 00:06:01,180
robots that are currently available that

00:05:56,259 --> 00:06:02,530
can run ross and in general most of the

00:06:01,180 --> 00:06:04,870
robots that you're probably familiar

00:06:02,530 --> 00:06:08,620
with that are like not science fiction

00:06:04,870 --> 00:06:13,030
robots are probably listed on there and

00:06:08,620 --> 00:06:15,009
have a sort of Ross interface and then

00:06:13,030 --> 00:06:20,440
the final thing that they do to kind of

00:06:15,009 --> 00:06:22,659
make this work easily is that they have

00:06:20,440 --> 00:06:25,449
kind of standardized on Anna bunt to

00:06:22,659 --> 00:06:28,690
distribution and they basically have

00:06:25,449 --> 00:06:31,419
releases that follow that are similar to

00:06:28,690 --> 00:06:33,190
the abun to releases so right now

00:06:31,419 --> 00:06:35,380
there's these two here that are in green

00:06:33,190 --> 00:06:39,760
and these are basically following the

00:06:35,380 --> 00:06:41,230
the long-term releases the Ubuntu

00:06:39,760 --> 00:06:44,800
long-term release thing

00:06:41,230 --> 00:06:47,560
so they so you have the yeah and they

00:06:44,800 --> 00:06:49,840
all have these wonderful animal names so

00:06:47,560 --> 00:06:51,940
based on sea turtles of course so you

00:06:49,840 --> 00:06:56,950
have the kinetic column a and the

00:06:51,940 --> 00:06:59,080
melodic Marie Nia and yeah so they these

00:06:56,950 --> 00:07:01,990
will be there on for the end of till the

00:06:59,080 --> 00:07:03,970
end of life and then they have some

00:07:01,990 --> 00:07:05,860
little incremental releases that happen

00:07:03,970 --> 00:07:08,670
that are tied to other abun to releases

00:07:05,860 --> 00:07:11,350
so in general they've kind of like

00:07:08,670 --> 00:07:13,180
standardized on robot on a bun too and

00:07:11,350 --> 00:07:16,270
this kind of comes back to where I was

00:07:13,180 --> 00:07:20,020
like I kind of wanted to see if we could

00:07:16,270 --> 00:07:22,450
run this on FreeBSD and the main reason

00:07:20,020 --> 00:07:25,450
I kind of wanted to do that was that I

00:07:22,450 --> 00:07:27,070
felt that this was a way because most of

00:07:25,450 --> 00:07:29,740
the software was open-source that we

00:07:27,070 --> 00:07:32,080
would keep like putting it on FreeBSD

00:07:29,740 --> 00:07:33,610
helps keep Roth honest about it being

00:07:32,080 --> 00:07:37,120
open source and actually running on

00:07:33,610 --> 00:07:38,910
multiple platforms I also thought like

00:07:37,120 --> 00:07:41,860
it was weird to kind of have this weird

00:07:38,910 --> 00:07:45,160
have a monoculture of operating systems

00:07:41,860 --> 00:07:47,920
for robots I mean there are other

00:07:45,160 --> 00:07:49,840
security issues with with Ross that I

00:07:47,920 --> 00:07:52,090
won't get into in this talk but it would

00:07:49,840 --> 00:07:54,520
seem that having multiple operating

00:07:52,090 --> 00:07:56,080
systems might be a good thing when

00:07:54,520 --> 00:07:58,300
you're dealing with when you're dealing

00:07:56,080 --> 00:08:01,000
with robots and then the other side of

00:07:58,300 --> 00:08:03,400
it is that Ross in general is is kind of

00:08:01,000 --> 00:08:06,490
all it's not dealing with hardware

00:08:03,400 --> 00:08:08,350
directly all that hardware stuff is kind

00:08:06,490 --> 00:08:10,720
of you have to build that yourself in

00:08:08,350 --> 00:08:13,000
whatever operating system but Ross

00:08:10,720 --> 00:08:15,460
itself is offering communication nodes

00:08:13,000 --> 00:08:17,050
which is based on networking so it's

00:08:15,460 --> 00:08:19,840
assuming you have networking a

00:08:17,050 --> 00:08:22,630
networking stack working you you have

00:08:19,840 --> 00:08:24,750
that working all the tools are are

00:08:22,630 --> 00:08:29,070
basically cross-platform there are no

00:08:24,750 --> 00:08:32,260
system specific things in those tools

00:08:29,070 --> 00:08:34,120
yeah and so all of that stuff was

00:08:32,260 --> 00:08:35,530
cross-platform by nature I looked at

00:08:34,120 --> 00:08:41,440
what most of the stuff was built out of

00:08:35,530 --> 00:08:43,510
it was built out of C++ boost and Python

00:08:41,440 --> 00:08:46,060
and I was like well most of this stuff

00:08:43,510 --> 00:08:48,400
is already available on FreeBSD so why

00:08:46,060 --> 00:08:50,200
don't we try to do this now of course

00:08:48,400 --> 00:08:52,540
the first thing you're going to do when

00:08:50,200 --> 00:08:55,090
you when you want to port something to

00:08:52,540 --> 00:08:57,420
FreeBSD is you go to fresh ports

00:08:55,090 --> 00:09:01,170
and double-check if it is there and

00:08:57,420 --> 00:09:04,150
there was a version of Ross already and

00:09:01,170 --> 00:09:05,880
Rene who just introduced me actually was

00:09:04,150 --> 00:09:09,430
the person who did it

00:09:05,880 --> 00:09:11,680
back in the day but you might notice

00:09:09,430 --> 00:09:13,450
here that it says that it's been

00:09:11,680 --> 00:09:17,430
deprecated because it's unsupported

00:09:13,450 --> 00:09:20,920
upstream and it expired back in 2015 and

00:09:17,430 --> 00:09:24,750
the version is one point four point ten

00:09:20,920 --> 00:09:27,240
and this corresponds back to this

00:09:24,750 --> 00:09:32,430
Diamondback version which came out in

00:09:27,240 --> 00:09:34,930
2011 so there's been nine years of

00:09:32,430 --> 00:09:36,970
changes that have happened with Ross and

00:09:34,930 --> 00:09:38,680
you can see even back then that this

00:09:36,970 --> 00:09:40,510
version of Ross didn't have like an

00:09:38,680 --> 00:09:44,530
end-of-life date and it did not have

00:09:40,510 --> 00:09:49,390
this sort of more coherent distribution

00:09:44,530 --> 00:09:51,400
way of doing stuff so I was like well

00:09:49,390 --> 00:09:53,980
maybe we can try to do this maybe we can

00:09:51,400 --> 00:09:56,410
try to get this to work I went to the

00:09:53,980 --> 00:09:58,990
website and saw that they even had like

00:09:56,410 --> 00:10:00,280
a way of building it from source so it's

00:09:58,990 --> 00:10:01,690
like okay there is a source

00:10:00,280 --> 00:10:05,230
infrastructure I could probably build

00:10:01,690 --> 00:10:09,700
this myself and I also saw that it had a

00:10:05,230 --> 00:10:12,100
Mac os10 homebrew instructions so then I

00:10:09,700 --> 00:10:14,020
thought like well maybe some of these

00:10:12,100 --> 00:10:16,360
shell script Linux isms have probably

00:10:14,020 --> 00:10:21,880
fallen out a little bit too because

00:10:16,360 --> 00:10:23,770
there's a FreeBSD user land in OS 10 so

00:10:21,880 --> 00:10:25,150
that was kind of the the thing that I

00:10:23,770 --> 00:10:28,150
tried to do and I kind of wanted to

00:10:25,150 --> 00:10:31,690
follow the source instructions and do it

00:10:28,150 --> 00:10:36,460
sort of the Ross way with trying to

00:10:31,690 --> 00:10:39,100
blend it a bit with FreeBSD so if you're

00:10:36,460 --> 00:10:42,400
gonna build from source for Roth they

00:10:39,100 --> 00:10:45,270
basically divided up into two three big

00:10:42,400 --> 00:10:47,770
steps the first step is installing the

00:10:45,270 --> 00:10:50,320
pre-requisites which is raw step and its

00:10:47,770 --> 00:10:53,110
friends the second step is you use those

00:10:50,320 --> 00:10:55,810
prerequisites to create a source check

00:10:53,110 --> 00:10:59,710
out of Roth and then finally at the end

00:10:55,810 --> 00:11:02,110
you build Ross and then hopefully you

00:10:59,710 --> 00:11:04,240
have a working system that's that's of

00:11:02,110 --> 00:11:06,630
course the the final step that they

00:11:04,240 --> 00:11:06,630
don't mention

00:11:06,810 --> 00:11:13,950
of course for doing this thing which I

00:11:10,180 --> 00:11:17,080
found over to which I found jails to be

00:11:13,950 --> 00:11:18,580
extremely helpful in this because there

00:11:17,080 --> 00:11:21,940
were times where you actually had to

00:11:18,580 --> 00:11:24,070
like yeah you had to install a lot of

00:11:21,940 --> 00:11:25,810
things and maybe you didn't want all

00:11:24,070 --> 00:11:27,460
those things on your system that you

00:11:25,810 --> 00:11:29,650
would probably forget about and just

00:11:27,460 --> 00:11:32,590
they'd sit there forever taking up space

00:11:29,650 --> 00:11:34,780
so and then you didn't want extra

00:11:32,590 --> 00:11:35,290
dependencies kind of like affecting your

00:11:34,780 --> 00:11:37,000
build

00:11:35,290 --> 00:11:39,100
so the jails were a really good way of

00:11:37,000 --> 00:11:43,840
helping out making sure things were

00:11:39,100 --> 00:11:47,350
saying so step one is to get the

00:11:43,840 --> 00:11:49,210
prerequisites installed so we already

00:11:47,350 --> 00:11:52,570
have quite a few of the things already

00:11:49,210 --> 00:11:53,830
in the system and in the port's tree and

00:11:52,570 --> 00:11:56,560
there's just a couple of things that are

00:11:53,830 --> 00:12:00,360
very raw specific that aren't in the

00:11:56,560 --> 00:12:05,310
system already so claying boost see make

00:12:00,360 --> 00:12:08,320
ninja and then a lot of Python libraries

00:12:05,310 --> 00:12:11,170
the there's a little side note that

00:12:08,320 --> 00:12:13,260
Python or Roth at the moment works best

00:12:11,170 --> 00:12:16,510
with Python 2.7

00:12:13,260 --> 00:12:18,940
they claim that like they've been

00:12:16,510 --> 00:12:20,920
claiming since 2015 that like all

00:12:18,940 --> 00:12:22,750
maintainer x' and everything should make

00:12:20,920 --> 00:12:26,920
sure that it's running if atleast python

00:12:22,750 --> 00:12:29,650
3.5 or whatever but when I tried it out

00:12:26,920 --> 00:12:31,720
here with Python 3 it did not quite work

00:12:29,650 --> 00:12:36,580
right so I just went back to Python 2.7

00:12:31,720 --> 00:12:38,860
and went there there's there's and

00:12:36,580 --> 00:12:40,150
looking at other things in there there's

00:12:38,860 --> 00:12:43,210
a bit of work that needs to happen

00:12:40,150 --> 00:12:45,250
before Ross can truly be a Python 3

00:12:43,210 --> 00:12:48,370
thing so that's outside the scope of

00:12:45,250 --> 00:12:51,280
this talk but there are some missing

00:12:48,370 --> 00:12:53,950
bits here which I'll talk about

00:12:51,280 --> 00:12:56,710
so there's Roth's depth the Roth oops

00:12:53,950 --> 00:12:59,650
Roth install generator and this ws tool

00:12:56,710 --> 00:13:04,450
to tool thing and then several the small

00:12:59,650 --> 00:13:11,440
Python dependencies so what are these

00:13:04,450 --> 00:13:13,900
things well Ross has this enhancement

00:13:11,440 --> 00:13:15,850
proposal thing which is of course very

00:13:13,900 --> 00:13:18,370
similar to the Python enhancement

00:13:15,850 --> 00:13:19,150
proposals and I guess to to some extent

00:13:18,370 --> 00:13:22,570
the FreeBSD

00:13:19,150 --> 00:13:24,840
munity proposals and they've documented

00:13:22,570 --> 00:13:27,670
when they started going into this whole

00:13:24,840 --> 00:13:29,530
way of making it following Ubuntu they

00:13:27,670 --> 00:13:33,370
were very good at documenting how things

00:13:29,530 --> 00:13:36,360
should work and how things would be

00:13:33,370 --> 00:13:40,000
built up so there's of course lots of

00:13:36,360 --> 00:13:42,130
reps here rep three of course is just

00:13:40,000 --> 00:13:43,750
talking about how there are they chart

00:13:42,130 --> 00:13:47,440
they're targeting to bun to and what

00:13:43,750 --> 00:13:50,650
what is important for them rep 125 is

00:13:47,440 --> 00:13:54,010
this raw step to which I'll be talking

00:13:50,650 --> 00:13:56,760
about in a moment and then Ross step two

00:13:54,010 --> 00:13:59,800
is also very dependent on these Ross

00:13:56,760 --> 00:14:01,300
distribution files so I'll talk about

00:13:59,800 --> 00:14:04,690
the Ross distribution files and then

00:14:01,300 --> 00:14:07,750
talk about Ross step two Ross

00:14:04,690 --> 00:14:11,410
distribution files they are basically

00:14:07,750 --> 00:14:17,260
just the set of llamo files that explain

00:14:11,410 --> 00:14:19,060
how explain first dependencies for for

00:14:17,260 --> 00:14:21,580
the operating system or four components

00:14:19,060 --> 00:14:24,820
for for Ross and then it also explains

00:14:21,580 --> 00:14:27,580
like okay this melodic distribution has

00:14:24,820 --> 00:14:29,020
all these components so if you want to

00:14:27,580 --> 00:14:32,620
say that you have a melodic distribution

00:14:29,020 --> 00:14:35,530
all these bits need to be here so here's

00:14:32,620 --> 00:14:37,420
an example I took of B zip - because

00:14:35,530 --> 00:14:39,640
it's an easy example to point out and

00:14:37,420 --> 00:14:41,320
you can just see that this has these

00:14:39,640 --> 00:14:43,060
different architectures here so you can

00:14:41,320 --> 00:14:46,770
even see they have a cygwin so if they

00:14:43,060 --> 00:14:53,290
have debian fedora and then a freebsd

00:14:46,770 --> 00:14:56,500
bit that's in there so what this so this

00:14:53,290 --> 00:14:59,770
this Ross distribution file is used by

00:14:56,500 --> 00:15:02,860
Roth step so Roth step is basically a

00:14:59,770 --> 00:15:05,350
small little program that will update

00:15:02,860 --> 00:15:08,650
your distribution information and

00:15:05,350 --> 00:15:12,280
install dependencies so how it works is

00:15:08,650 --> 00:15:15,100
that first it will find and download the

00:15:12,280 --> 00:15:17,920
ross distro files from ross or from the

00:15:15,100 --> 00:15:21,970
roth github repository so downloads

00:15:17,920 --> 00:15:24,880
those yamo files then later you can say

00:15:21,970 --> 00:15:26,530
I want the dependencies for stuff and it

00:15:24,880 --> 00:15:29,830
will actually go and call the local

00:15:26,530 --> 00:15:31,540
package manager on your operating system

00:15:29,830 --> 00:15:35,920
and install the things

00:15:31,540 --> 00:15:40,300
so um Roth depth yeah so there's

00:15:35,920 --> 00:15:42,790
backends for pip YUM apt and there was

00:15:40,300 --> 00:15:49,210
one for FreeBSD I guess Rene did some of

00:15:42,790 --> 00:15:51,070
that or there what there was one for

00:15:49,210 --> 00:15:53,110
FreeBSD that was using package but it

00:15:51,070 --> 00:15:55,060
was using the older package tools

00:15:53,110 --> 00:15:57,880
so using package underscore add package

00:15:55,060 --> 00:16:00,310
underscore remove but that was actually

00:15:57,880 --> 00:16:03,640
very very straightforward to just update

00:16:00,310 --> 00:16:05,980
to use package so then it basically will

00:16:03,640 --> 00:16:08,080
be using package I mean one could in

00:16:05,980 --> 00:16:09,880
theory also write a just a straight

00:16:08,080 --> 00:16:12,580
ports back-end if you really wanted to

00:16:09,880 --> 00:16:14,800
do that but you're gonna be spending a

00:16:12,580 --> 00:16:16,540
while building Roth anyway so maybe you

00:16:14,800 --> 00:16:19,180
want to cut down on compile time and

00:16:16,540 --> 00:16:24,970
actually get to building Roth instead of

00:16:19,180 --> 00:16:26,590
building all the dependencies so the

00:16:24,970 --> 00:16:29,170
other programs we need are this Roth

00:16:26,590 --> 00:16:31,510
installed generator that basically will

00:16:29,170 --> 00:16:33,160
also use the Roth distro file to pull

00:16:31,510 --> 00:16:34,780
out all the names of the components that

00:16:33,160 --> 00:16:37,180
we need and that will be stored in a

00:16:34,780 --> 00:16:40,620
little tar file that you can then feed

00:16:37,180 --> 00:16:44,530
to this ws tool program which will then

00:16:40,620 --> 00:16:47,250
which basically is just a cross source

00:16:44,530 --> 00:16:50,890
code control mechanism for downloading

00:16:47,250 --> 00:16:53,170
shadow clones or whatever of a of a

00:16:50,890 --> 00:16:56,320
source code repository into something

00:16:53,170 --> 00:17:03,220
called catkin to a catkin workspace so

00:16:56,320 --> 00:17:06,400
catkin is a fee make and Python macros

00:17:03,220 --> 00:17:08,440
and then finally there's something

00:17:06,400 --> 00:17:12,699
called Roth console bridge which is just

00:17:08,440 --> 00:17:16,780
a way of bridging information from one

00:17:12,699 --> 00:17:20,620
program into the Ross logging system so

00:17:16,780 --> 00:17:23,230
those are all the prerequisites and most

00:17:20,620 --> 00:17:25,540
of them as I said we're Python libraries

00:17:23,230 --> 00:17:27,250
or Python ports so it was actually

00:17:25,540 --> 00:17:32,320
pretty straightforward to create ports

00:17:27,250 --> 00:17:34,750
for all of these and so I did that now

00:17:32,320 --> 00:17:38,200
once those are installed then you can

00:17:34,750 --> 00:17:41,470
actually try to build Rauf or get the

00:17:38,200 --> 00:17:43,390
components so this has several steps as

00:17:41,470 --> 00:17:45,310
well so first of all you initialize Ross

00:17:43,390 --> 00:17:48,580
step that will down

00:17:45,310 --> 00:17:50,980
those distribution files you do that as

00:17:48,580 --> 00:17:54,280
route because you want to write it to

00:17:50,980 --> 00:17:57,010
the user local Etsy directory once

00:17:54,280 --> 00:18:01,060
you've done that you run Ross update as

00:17:57,010 --> 00:18:02,680
a normal user that will then update all

00:18:01,060 --> 00:18:06,120
the files make sure it has the latest

00:18:02,680 --> 00:18:10,810
version of everything you make a catkin

00:18:06,120 --> 00:18:14,200
workspace directory CD into it run this

00:18:10,810 --> 00:18:16,300
Ross install generator thing Ross of

00:18:14,200 --> 00:18:17,800
course has several different levels of

00:18:16,300 --> 00:18:19,530
distributions you can have one where

00:18:17,800 --> 00:18:22,090
you're just dealing with communications

00:18:19,530 --> 00:18:23,710
you have one where it's getting all the

00:18:22,090 --> 00:18:26,440
desktop tools and then you can have a

00:18:23,710 --> 00:18:28,420
full desktop which also includes all

00:18:26,440 --> 00:18:31,060
these different simulators that are

00:18:28,420 --> 00:18:33,220
included for this talk I'll just have

00:18:31,060 --> 00:18:35,830
the desktop here I've tested desktop and

00:18:33,220 --> 00:18:36,730
the communication tools the these steps

00:18:35,830 --> 00:18:40,480
here are going to be pretty much the

00:18:36,730 --> 00:18:42,900
same the full desktop will not work at

00:18:40,480 --> 00:18:45,430
the moment because we need to port

00:18:42,900 --> 00:18:47,410
simulators over and that's not in the

00:18:45,430 --> 00:18:50,260
port's tree so that's something for

00:18:47,410 --> 00:18:52,540
future fun stuff so once you've

00:18:50,260 --> 00:18:55,300
generated this Ross install file you

00:18:52,540 --> 00:18:58,390
pass it to this workspace tool to

00:18:55,300 --> 00:19:01,270
download all these files so this will

00:18:58,390 --> 00:19:04,900
download in the case of a desktop about

00:19:01,270 --> 00:19:10,240
a hundred and ninety projects that are

00:19:04,900 --> 00:19:12,040
specific to just Ross and then you have

00:19:10,240 --> 00:19:13,180
to build the dependencies no you don't

00:19:12,040 --> 00:19:15,010
have to build the dependencies because

00:19:13,180 --> 00:19:17,890
you use Roth step to just install all

00:19:15,010 --> 00:19:20,920
these dependencies so Roth step then

00:19:17,890 --> 00:19:23,650
will go through its files find the

00:19:20,920 --> 00:19:26,560
FreeBSD dependencies and install them so

00:19:23,650 --> 00:19:29,710
it just will call package for you of

00:19:26,560 --> 00:19:31,510
course it's some assumed here

00:19:29,710 --> 00:19:33,310
well since it's coming from an abundant

00:19:31,510 --> 00:19:35,800
world that it will use sudo to install

00:19:33,310 --> 00:19:37,900
so of course your user needs to be in

00:19:35,800 --> 00:19:42,570
the the user building needs to be in the

00:19:37,900 --> 00:19:44,920
sudoers file then you run a little patch

00:19:42,570 --> 00:19:48,340
most of this patch is actually fairly

00:19:44,920 --> 00:19:51,550
straightforward a lot of it is that the

00:19:48,340 --> 00:19:54,850
minimum version of GCC is not as strict

00:19:51,550 --> 00:19:57,610
on c++ as the claim is so most of the

00:19:54,850 --> 00:20:00,610
changes in here were

00:19:57,610 --> 00:20:02,620
changing a zero to an or using a null

00:20:00,610 --> 00:20:04,450
where they were passing null and then

00:20:02,620 --> 00:20:06,220
actually using it as an integer so you

00:20:04,450 --> 00:20:09,930
just actually change it to a zero

00:20:06,220 --> 00:20:14,410
instead and there was one other small

00:20:09,930 --> 00:20:17,380
change where or they one of the packages

00:20:14,410 --> 00:20:19,870
has a has its own copy of G tests and of

00:20:17,380 --> 00:20:21,610
course it the include paths get messed

00:20:19,870 --> 00:20:25,180
up because you have the Google tests

00:20:21,610 --> 00:20:27,310
that get installed as a its own thing so

00:20:25,180 --> 00:20:31,420
you just kind of move that to a to a

00:20:27,310 --> 00:20:34,300
what he could say G test 1.7 and link to

00:20:31,420 --> 00:20:37,290
that instead once all that's ready you

00:20:34,300 --> 00:20:40,540
just run this cap can make isolated and

00:20:37,290 --> 00:20:43,420
then you pass it you tell it to use

00:20:40,540 --> 00:20:45,750
ninja and it just builds the reason you

00:20:43,420 --> 00:20:48,790
tell it to use tell it to use ninja is

00:20:45,750 --> 00:20:51,270
that since this is coming from a bun too

00:20:48,790 --> 00:20:54,880
it will generate goo new make files and

00:20:51,270 --> 00:20:57,580
it will just call make which of course

00:20:54,880 --> 00:21:00,550
will call the BFD make and then it will

00:20:57,580 --> 00:21:03,370
fail eventually in one of the make files

00:21:00,550 --> 00:21:05,950
because there's a disparity between you

00:21:03,370 --> 00:21:08,290
new make files and and bsd make files

00:21:05,950 --> 00:21:10,420
and at the same time is like well if i

00:21:08,290 --> 00:21:12,610
have to install another build tool to

00:21:10,420 --> 00:21:15,760
make this work i may as well use ninja

00:21:12,610 --> 00:21:17,830
because in freebsd and the ports tree

00:21:15,760 --> 00:21:20,200
anything that see make based is set up

00:21:17,830 --> 00:21:21,730
by default to use ninja at the moment so

00:21:20,200 --> 00:21:25,810
i just used

00:21:21,730 --> 00:21:28,090
ninja and made life slightly easier then

00:21:25,810 --> 00:21:30,040
you just you know sit around wait have a

00:21:28,090 --> 00:21:33,010
cup of coffee and stuff and everything

00:21:30,040 --> 00:21:35,770
should build right until it doesn't

00:21:33,010 --> 00:21:40,300
and there's one issue here that i

00:21:35,770 --> 00:21:45,430
couldn't fix all ahead of time and it's

00:21:40,300 --> 00:21:49,270
basically ross uses cute for a lot of

00:21:45,430 --> 00:21:50,980
its graphical tools and they have of

00:21:49,270 --> 00:21:53,710
course python bindings that they create

00:21:50,980 --> 00:21:54,250
for all their items and what they did

00:21:53,710 --> 00:21:56,800
there

00:21:54,250 --> 00:22:00,610
and so that of course means they need to

00:21:56,800 --> 00:22:03,730
call sip or pi side to do this and what

00:22:00,610 --> 00:22:06,130
happens of course that generates a make

00:22:03,730 --> 00:22:08,440
file and the sip config dot pi has some

00:22:06,130 --> 00:22:10,660
sort of issue in as one of its patches

00:22:08,440 --> 00:22:14,170
that passes

00:22:10,660 --> 00:22:16,810
pass information in and bad names for

00:22:14,170 --> 00:22:19,600
libraries it doesn't it says it should

00:22:16,810 --> 00:22:22,420
link against Qt core instead of qt5 core

00:22:19,600 --> 00:22:25,120
and I don't know how to fix that yet so

00:22:22,420 --> 00:22:28,720
I'm I was I will probably send a thing

00:22:25,120 --> 00:22:30,310
to the KDE people at freebsd org and see

00:22:28,720 --> 00:22:31,750
if there's a way that we can fix it

00:22:30,310 --> 00:22:34,660
because it seems like it's just a patch

00:22:31,750 --> 00:22:39,100
that happens in sip config that just

00:22:34,660 --> 00:22:41,200
goes a bit wrong but anyway so I had to

00:22:39,100 --> 00:22:45,090
fix that make file manually but once

00:22:41,200 --> 00:22:45,090
that's done it's done and it's built so

00:22:45,240 --> 00:22:50,830
I'll show you a demonstration of that

00:22:47,710 --> 00:22:59,140
and see how well this actually works so

00:22:50,830 --> 00:23:03,130
a live demo yeah I know yeah I was gonna

00:22:59,140 --> 00:23:05,710
say ideally I would have liked to have

00:23:03,130 --> 00:23:12,400
had a robot here that I could showing

00:23:05,710 --> 00:23:15,130
off but the the problem was that well

00:23:12,400 --> 00:23:17,620
yeah there just wasn't time to to get a

00:23:15,130 --> 00:23:20,260
to test this out with a real robot so

00:23:17,620 --> 00:23:22,690
I'm going to show you a this is going to

00:23:20,260 --> 00:23:25,000
be an example that's like all locally on

00:23:22,690 --> 00:23:30,910
the computer so the example I'm going to

00:23:25,000 --> 00:23:35,080
show you is is the is this pipe or is a

00:23:30,910 --> 00:23:37,360
example for transformations so the idea

00:23:35,080 --> 00:23:42,480
here is that I will try to point this

00:23:37,360 --> 00:23:45,490
out I've run a node already and then or

00:23:42,480 --> 00:23:49,090
run a program and this creates several

00:23:45,490 --> 00:23:51,280
nodes so we have a simulator node which

00:23:49,090 --> 00:23:53,590
is this turtle simulator here we have a

00:23:51,280 --> 00:23:56,100
tella operation node so I'll be using

00:23:53,590 --> 00:23:58,990
that in a moment and then you have to

00:23:56,100 --> 00:24:01,570
turtle broadcaster nodes and a turtle

00:23:58,990 --> 00:24:04,570
pointer so the idea of this is that I

00:24:01,570 --> 00:24:09,670
have to show they it's a tutorial to

00:24:04,570 --> 00:24:13,840
just show how these I have to the user

00:24:09,670 --> 00:24:15,280
interface isn't perfect for this so the

00:24:13,840 --> 00:24:17,620
idea is that you're supposed to be able

00:24:15,280 --> 00:24:20,080
to move this turtle around and it's

00:24:17,620 --> 00:24:22,720
putting out transforms and the other

00:24:20,080 --> 00:24:24,400
turtle is figuring out its transforms

00:24:22,720 --> 00:24:27,880
and so it's basically just you

00:24:24,400 --> 00:24:29,680
you have a world transform and and it's

00:24:27,880 --> 00:24:31,750
just like trying to show that you can

00:24:29,680 --> 00:24:33,820
figure out all this in pretty quick time

00:24:31,750 --> 00:24:36,640
and the other turtle is able to follow

00:24:33,820 --> 00:24:39,220
you and get close to you and everything

00:24:36,640 --> 00:24:40,570
like that so that's kind of the main

00:24:39,220 --> 00:24:42,340
point of that it's showing that there's

00:24:40,570 --> 00:24:44,890
several different nodes that are running

00:24:42,340 --> 00:24:48,220
here these nodes didn't have to run that

00:24:44,890 --> 00:24:51,250
one computer I mean ideally these two

00:24:48,220 --> 00:24:52,570
turtles would be different robots that

00:24:51,250 --> 00:24:57,580
would all be connected onto the same

00:24:52,570 --> 00:24:59,170
network so what I'll also show here just

00:24:57,580 --> 00:25:05,559
to kind of show that it's not just a a

00:24:59,170 --> 00:25:09,330
fluke is so when everything is is built

00:25:05,559 --> 00:25:11,530
in Roth you get a this Roth catkin

00:25:09,330 --> 00:25:15,490
workspace and it all ends up in this

00:25:11,530 --> 00:25:18,250
install isolated directory now I was

00:25:15,490 --> 00:25:20,380
playing around trying to get my trying

00:25:18,250 --> 00:25:22,929
to do this all from inside the jail and

00:25:20,380 --> 00:25:25,929
I couldn't get the X display to show

00:25:22,929 --> 00:25:29,950
correctly so the nice thing is is that

00:25:25,929 --> 00:25:32,230
the that this install isolated directory

00:25:29,950 --> 00:25:35,950
really is isolated so there's just like

00:25:32,230 --> 00:25:38,470
a little setup script here that you can

00:25:35,950 --> 00:25:43,690
set up all your environment variables so

00:25:38,470 --> 00:25:45,910
I can also do a Roth topic list and so

00:25:43,690 --> 00:25:48,040
that'll actually go through and list all

00:25:45,910 --> 00:25:50,890
the topics that are available and just

00:25:48,040 --> 00:25:57,120
to kind of show an example here I'll

00:25:50,890 --> 00:26:02,530
just do a Ross topic echo of turtle ones

00:25:57,120 --> 00:26:04,500
poses so this should yeah so it's just

00:26:02,530 --> 00:26:07,480
basically printing out all these poses

00:26:04,500 --> 00:26:11,260
but if I start moving you can see that

00:26:07,480 --> 00:26:13,450
all these values are are changing now of

00:26:11,260 --> 00:26:16,059
course you know this is fine when you're

00:26:13,450 --> 00:26:17,590
doing some debugging but maybe for other

00:26:16,059 --> 00:26:19,600
cases you actually want to store that

00:26:17,590 --> 00:26:22,030
topic you want to graph that topic and

00:26:19,600 --> 00:26:26,460
stuff and all these tools are are

00:26:22,030 --> 00:26:31,360
working I can also show there's a a

00:26:26,460 --> 00:26:34,830
visualization program let's see if I can

00:26:31,360 --> 00:26:34,830
get that working

00:26:35,080 --> 00:26:41,030
but for this thing it doesn't show

00:26:37,610 --> 00:26:43,640
something very amazing and of course it

00:26:41,030 --> 00:26:47,540
crashed so that's why you don't do too

00:26:43,640 --> 00:26:54,110
much on demos but it's it's basically a

00:26:47,540 --> 00:26:56,690
visualization program used for for for

00:26:54,110 --> 00:26:59,480
visualizing different values and you can

00:26:56,690 --> 00:27:03,880
also use it to kind of do mapping and

00:26:59,480 --> 00:27:08,020
navigation but apparently it crashed so

00:27:03,880 --> 00:27:08,020
I'll let that one go for now

00:27:14,450 --> 00:27:20,440
so that was my demonstration and

00:27:20,859 --> 00:27:28,220
basically so what's kind of what's next

00:27:24,289 --> 00:27:32,239
so as to speak so I've created a bunch

00:27:28,220 --> 00:27:35,649
of bug reports for all these for all

00:27:32,239 --> 00:27:37,999
these ports here so I've put them in I

00:27:35,649 --> 00:27:39,679
recently updated them all this last week

00:27:37,999 --> 00:27:44,509
to make sure that they're running the

00:27:39,679 --> 00:27:48,169
latest version of that's available from

00:27:44,509 --> 00:27:51,049
the Ross up stream for example Ross step

00:27:48,169 --> 00:27:53,570
I was actually able to push the package

00:27:51,049 --> 00:27:55,159
changes up to two them and they they

00:27:53,570 --> 00:27:58,519
were actually very willing to accept

00:27:55,159 --> 00:28:00,619
them they they said like we have we have

00:27:58,519 --> 00:28:02,809
no specific rules that we don't want

00:28:00,619 --> 00:28:04,009
wanted to run on other operating systems

00:28:02,809 --> 00:28:05,869
we're happy to have it running on other

00:28:04,009 --> 00:28:08,239
operating systems but they aren't going

00:28:05,869 --> 00:28:10,940
to provide much infrastructure for for

00:28:08,239 --> 00:28:14,379
testing at least at the moment but all

00:28:10,940 --> 00:28:18,470
these work a couple of them are a bit

00:28:14,379 --> 00:28:22,369
hairy this develop our dawn program is

00:28:18,470 --> 00:28:24,590
or library was a is a very old library

00:28:22,369 --> 00:28:27,440
that doesn't seem to be maintained much

00:28:24,590 --> 00:28:30,830
but it's it's a requirement inside the

00:28:27,440 --> 00:28:33,049
the thing so it's I got it to build it

00:28:30,830 --> 00:28:34,220
was a it was that was probably that was

00:28:33,049 --> 00:28:37,850
probably more difficult than most

00:28:34,220 --> 00:28:40,999
everything else in in this the other

00:28:37,850 --> 00:28:43,909
thing that needs to happen is I need to

00:28:40,999 --> 00:28:46,549
push up more of these Ross distro things

00:28:43,909 --> 00:28:49,909
that have more of the freebsd items in

00:28:46,549 --> 00:28:53,269
there I did this very ad hoc so I

00:28:49,909 --> 00:28:55,730
basically would go through run Ross step

00:28:53,269 --> 00:28:57,799
update or Ross step install and and be

00:28:55,730 --> 00:29:00,080
like oh I don't know how to install this

00:28:57,799 --> 00:29:02,090
package and then so you would go look up

00:29:00,080 --> 00:29:03,470
what the packages and put it in there

00:29:02,090 --> 00:29:05,529
could be a way of actually probably

00:29:03,470 --> 00:29:09,049
going through and being a bit more um

00:29:05,529 --> 00:29:11,989
correct in like making this a bit more

00:29:09,049 --> 00:29:15,289
complete and then I'm positive that this

00:29:11,989 --> 00:29:16,909
can also be pushed up I got some version

00:29:15,289 --> 00:29:19,879
of this pushed up but they were also

00:29:16,909 --> 00:29:21,230
like well yeah but you're missing some

00:29:19,879 --> 00:29:23,690
like some of these things don't actually

00:29:21,230 --> 00:29:25,249
exist in fresh ports so do you do these

00:29:23,690 --> 00:29:27,139
things actually exist and I'm like well

00:29:25,249 --> 00:29:28,010
it's kind of a chicken and egg problem

00:29:27,139 --> 00:29:30,050
so like

00:29:28,010 --> 00:29:31,760
you have to put that up there so there's

00:29:30,050 --> 00:29:33,470
a reason to put it into fresh ports I

00:29:31,760 --> 00:29:38,180
was thinking or I mean into the port's

00:29:33,470 --> 00:29:41,930
tree so in the meantime I've created

00:29:38,180 --> 00:29:45,110
twos or sort of github things the

00:29:41,930 --> 00:29:47,540
freebsd by ports has my ports but it

00:29:45,110 --> 00:29:50,990
also has a Ross thing and that's set up

00:29:47,540 --> 00:29:54,050
to use they use the port shaker thing so

00:29:50,990 --> 00:29:56,180
you can actually just mix that in with

00:29:54,050 --> 00:29:57,560
your with your other stuff there's a

00:29:56,180 --> 00:29:59,540
couple other things in there too if

00:29:57,560 --> 00:30:01,550
you're if you're a big fan of running

00:29:59,540 --> 00:30:03,710
Zotero you can actually build a port of

00:30:01,550 --> 00:30:05,210
that too but that's a that's a whole

00:30:03,710 --> 00:30:07,730
nother story

00:30:05,210 --> 00:30:09,950
and then there's a Roth just and then I

00:30:07,730 --> 00:30:12,650
have a copy of the Ross distro which is

00:30:09,950 --> 00:30:15,380
basically up to date as of earlier this

00:30:12,650 --> 00:30:18,290
week that file does not change ma much

00:30:15,380 --> 00:30:21,770
but yeah so you have that you're

00:30:18,290 --> 00:30:25,070
basically ready to go oh yeah there's

00:30:21,770 --> 00:30:29,870
this thing called Ross - so all the

00:30:25,070 --> 00:30:31,160
stuff I talked about is Ross one you

00:30:29,870 --> 00:30:33,890
could say if you've been in the Roth's

00:30:31,160 --> 00:30:37,420
community people are aware of several

00:30:33,890 --> 00:30:40,130
issues with the current version of Ross

00:30:37,420 --> 00:30:43,640
- that I can name off the top of my head

00:30:40,130 --> 00:30:47,170
are one it is not very the network

00:30:43,640 --> 00:30:49,460
design is not very secure you basically

00:30:47,170 --> 00:30:51,020
you're basically recommended not to run

00:30:49,460 --> 00:30:53,720
it with a firewall because it creates

00:30:51,020 --> 00:30:56,330
all these UDP ports that there's no

00:30:53,720 --> 00:30:59,000
range it just picks one and sites like

00:30:56,330 --> 00:31:01,790
we're gonna use this now the other thing

00:30:59,000 --> 00:31:03,470
is that it's the current Ross

00:31:01,790 --> 00:31:05,990
architecture with its nodes and

00:31:03,470 --> 00:31:09,170
everything is too slow to do things in

00:31:05,990 --> 00:31:11,150
real time so there's a in the robotics

00:31:09,170 --> 00:31:13,580
community there's a thing called RoboCup

00:31:11,150 --> 00:31:17,320
where you build your robots to play

00:31:13,580 --> 00:31:22,430
soccer or sorry football we're in Europe

00:31:17,320 --> 00:31:25,760
too - yeah and all that is built custom

00:31:22,430 --> 00:31:28,190
because Ross is too slow but Ross - is

00:31:25,760 --> 00:31:30,590
an attempt to actually like have a bit

00:31:28,190 --> 00:31:32,809
more real time and they actually have

00:31:30,590 --> 00:31:35,090
sort of a real time

00:31:32,809 --> 00:31:38,210
controller that's actually included and

00:31:35,090 --> 00:31:41,330
you can add your own as well

00:31:38,210 --> 00:31:45,020
good news most of the tools that I just

00:31:41,330 --> 00:31:48,740
talked about Ross step the Roth install

00:31:45,020 --> 00:31:50,539
files you use those as well in Ross two

00:31:48,740 --> 00:31:53,480
so the fact that they're already there

00:31:50,539 --> 00:31:55,820
you you just probably need to build a

00:31:53,480 --> 00:31:57,740
different Ross install file and instead

00:31:55,820 --> 00:31:59,929
of using catkin it uses a different

00:31:57,740 --> 00:32:03,140
build system but it's the same thing

00:31:59,929 --> 00:32:06,590
it's a bunch of Python and C make macros

00:32:03,140 --> 00:32:11,179
that are inside the Ross distribution so

00:32:06,590 --> 00:32:13,220
that's a that's basically it I like to

00:32:11,179 --> 00:32:15,860
say that my take home is that Ross can

00:32:13,220 --> 00:32:18,679
be brought to FreeBSD it's gonna need

00:32:15,860 --> 00:32:20,390
some work I would say the the lowest

00:32:18,679 --> 00:32:23,840
hanging fruit is adding the ports and

00:32:20,390 --> 00:32:26,110
then pushing the the Roth distro stuff

00:32:23,840 --> 00:32:28,429
upstream and they as I said they're very

00:32:26,110 --> 00:32:31,850
the Ross group seems to be pretty

00:32:28,429 --> 00:32:35,750
willing to accept these new changes and

00:32:31,850 --> 00:32:39,230
longer term creating perhaps these Ross

00:32:35,750 --> 00:32:42,169
desktop of meta ports and then building

00:32:39,230 --> 00:32:43,340
all these other little bits in but the

00:32:42,169 --> 00:32:44,650
thing is with these ports you can

00:32:43,340 --> 00:32:46,990
actually build your own Ross

00:32:44,650 --> 00:32:50,510
distribution on your own which is nice

00:32:46,990 --> 00:32:52,700
so that's kind of good to have the other

00:32:50,510 --> 00:32:54,830
thing is that should be done is looking

00:32:52,700 --> 00:32:57,559
at the Gazebo simulator so this is a

00:32:54,830 --> 00:33:01,240
this is like a full-blown kind of

00:32:57,559 --> 00:33:04,100
physics simulator for you can take a

00:33:01,240 --> 00:33:06,350
model of your robot and put it in a

00:33:04,100 --> 00:33:09,080
simulator and see how it works it's a

00:33:06,350 --> 00:33:11,480
it's very nice it's very CPU or sorry

00:33:09,080 --> 00:33:15,020
GPU intensive but it would be good to

00:33:11,480 --> 00:33:16,789
have and it's also open source but I

00:33:15,020 --> 00:33:21,409
don't think anybody has bothered

00:33:16,789 --> 00:33:24,320
building it for freebsd and then finally

00:33:21,409 --> 00:33:26,270
also Ross to but after taking a look at

00:33:24,320 --> 00:33:29,809
what what the basics are to build Ross

00:33:26,270 --> 00:33:31,730
to I think it actually is a fairly low

00:33:29,809 --> 00:33:35,480
threshold to actually get it working on

00:33:31,730 --> 00:33:38,720
freebsd with that I'll say thank you and

00:33:35,480 --> 00:33:47,029
I'll take any questions

00:33:38,720 --> 00:33:47,029
[Applause]

00:33:50,250 --> 00:33:54,909
thank you very much for the talk it's

00:33:53,289 --> 00:33:56,200
not my main question but I wanted to

00:33:54,909 --> 00:34:01,210
know you a little bit more about your

00:33:56,200 --> 00:34:05,320
github account name in Roccat oh that's

00:34:01,210 --> 00:34:10,840
a sa long they say it's a very inside

00:34:05,320 --> 00:34:12,849
joke in in Norway there are these forest

00:34:10,840 --> 00:34:17,800
cats they're actually called Norwegian

00:34:12,849 --> 00:34:23,220
Forest cats in English and oh sorry

00:34:17,800 --> 00:34:30,690
Oh ten minutes okay good but eh but um

00:34:23,220 --> 00:34:50,320
my mom mistaken for a cat so it's just a

00:34:30,690 --> 00:34:53,770
joke right well for example that

00:34:50,320 --> 00:34:55,720
turtlebot three that i showed you all it

00:34:53,770 --> 00:34:58,330
is the main cpu is just basically a

00:34:55,720 --> 00:35:01,180
Raspberry Pi that they've used and they

00:34:58,330 --> 00:35:03,849
actually just use a bun to distribution

00:35:01,180 --> 00:35:06,970
for Raspberry Pi and put it on and it's

00:35:03,849 --> 00:35:09,430
a full distribution if you like they

00:35:06,970 --> 00:35:11,440
they include like they tell you for the

00:35:09,430 --> 00:35:13,300
role for Roth prefer that robot they're

00:35:11,440 --> 00:35:16,150
like oh just plug in the HDMI cable and

00:35:13,300 --> 00:35:18,160
like load up X and then do the rest of

00:35:16,150 --> 00:35:20,380
the Roth configuration and there and

00:35:18,160 --> 00:35:24,190
then unplug which really kind of like

00:35:20,380 --> 00:35:25,480
frightens me but ideally yes I think

00:35:24,190 --> 00:35:28,300
what you could do is just do the Ross

00:35:25,480 --> 00:35:30,730
bear calms and that would get you sort

00:35:28,300 --> 00:35:32,950
of the basic stuff to create a core the

00:35:30,730 --> 00:35:35,440
raw score node and then you would

00:35:32,950 --> 00:35:39,130
basically build your your own things and

00:35:35,440 --> 00:35:41,320
just kind of install them so it's how

00:35:39,130 --> 00:35:43,630
could I say the weird thing is is that

00:35:41,320 --> 00:35:45,790
since it's built on a bun to every every

00:35:43,630 --> 00:35:47,730
robot thing is kind of built on this

00:35:45,790 --> 00:35:50,770
idea of like oh well you have a natural

00:35:47,730 --> 00:35:52,330
complete Linux distribution so you have

00:35:50,770 --> 00:35:53,140
all that stuff right there's secure

00:35:52,330 --> 00:35:58,769
shell in and

00:35:53,140 --> 00:36:02,049
copy it over and all that so yeah anyway

00:35:58,769 --> 00:36:05,220
so in the States we have this company

00:36:02,049 --> 00:36:10,029
called spark fund that sells lots of

00:36:05,220 --> 00:36:13,569
tinker toys like this challenge every

00:36:10,029 --> 00:36:16,210
year and they've since stopped at doing

00:36:13,569 --> 00:36:18,670
the airborne version but they had a

00:36:16,210 --> 00:36:21,180
group drive like a Jeep around a track

00:36:18,670 --> 00:36:24,039
and they have different sizes from like

00:36:21,180 --> 00:36:29,019
it's really fun to watch the point size

00:36:24,039 --> 00:36:30,660
and pound and like smaller than four

00:36:29,019 --> 00:36:32,950
inches tall

00:36:30,660 --> 00:36:36,309
all the way up to the Gigantor in

00:36:32,950 --> 00:36:38,890
category which is the Jeep mm self

00:36:36,309 --> 00:36:43,299
around their parking lot right but they

00:36:38,890 --> 00:36:46,359
used to also do and that was really fun

00:36:43,299 --> 00:36:49,990
to watch because you know quad copters

00:36:46,359 --> 00:36:54,569
and various things and it was around the

00:36:49,990 --> 00:36:54,569
lake and they had to drop tennis balls

00:36:55,230 --> 00:37:01,630
roped off part of the lake and then they

00:36:58,029 --> 00:37:04,059
had like you get points for anything you

00:37:01,630 --> 00:37:05,859
do and you have a time limit so every

00:37:04,059 --> 00:37:11,349
second that goes by you lose you lose a

00:37:05,859 --> 00:37:14,680
point right and so any of the challenges

00:37:11,349 --> 00:37:16,299
you do give you points right and so it's

00:37:14,680 --> 00:37:18,579
really fun to watch but occasionally you

00:37:16,299 --> 00:37:22,900
see interesting things like someone did

00:37:18,579 --> 00:37:32,500
it with a gas helicopter that was a lot

00:37:22,900 --> 00:37:35,559
of points quickly but it also like one

00:37:32,500 --> 00:37:37,599
of the quad copters we don't know what

00:37:35,559 --> 00:37:39,700
happened but it was flying along just

00:37:37,599 --> 00:37:41,200
fine over the lake and then all of a

00:37:39,700 --> 00:37:48,759
sudden just straight into the lake and

00:37:41,200 --> 00:37:50,259
god I was saying Ross to is also that

00:37:48,759 --> 00:37:52,599
was part of the reason for Ross too is

00:37:50,259 --> 00:37:56,559
that quad copters and stuff it's Ross

00:37:52,599 --> 00:38:01,180
one is too slow for that so yeah anyway

00:37:56,559 --> 00:38:03,460
yes maybe I missed this but so the

00:38:01,180 --> 00:38:05,100
robots that run Linux how do they do the

00:38:03,460 --> 00:38:08,340
hardware control forum or ISM

00:38:05,100 --> 00:38:11,100
moving around they're usually like the

00:38:08,340 --> 00:38:13,290
turtlebot 3 there is using something

00:38:11,100 --> 00:38:15,900
called open CR which is basically their

00:38:13,290 --> 00:38:17,190
version of Arduino so it as far as I

00:38:15,900 --> 00:38:19,760
know they just have a thing that

00:38:17,190 --> 00:38:23,790
connects to it and then they just run

00:38:19,760 --> 00:38:26,640
they have a driver for that so it's it's

00:38:23,790 --> 00:38:28,380
called open CR I can if it's kind of has

00:38:26,640 --> 00:38:31,230
an open space so they they hand off all

00:38:28,380 --> 00:38:34,800
the work to Michael yes exactly

00:38:31,230 --> 00:38:38,100
yeah so so it's not yeah so basically

00:38:34,800 --> 00:38:40,080
the CPU does all this communication or

00:38:38,100 --> 00:38:41,790
all the calculations and then it just

00:38:40,080 --> 00:38:43,500
basically sends like these other

00:38:41,790 --> 00:38:47,460
messages off those messages will then

00:38:43,500 --> 00:38:49,890
tell a microcontroller to talk it BSD

00:38:47,460 --> 00:38:52,980
can a few years ago and where there was

00:38:49,890 --> 00:38:55,110
a girl in black and hexapod that walked

00:38:52,980 --> 00:38:57,270
around and that used the the real-time

00:38:55,110 --> 00:38:58,530
units on the system on a chip to do the

00:38:57,270 --> 00:39:00,090
drive right you would have a

00:38:58,530 --> 00:39:04,860
microcontroller but that would be a lot

00:39:00,090 --> 00:39:06,630
of stuff to port to freebsd probably it

00:39:04,860 --> 00:39:09,390
would be I mean the other thing that's

00:39:06,630 --> 00:39:12,480
kind of nice about this is that is that

00:39:09,390 --> 00:39:14,460
you're also like you can also still use

00:39:12,480 --> 00:39:16,380
FreeBSD as your your daily driver and

00:39:14,460 --> 00:39:19,830
run all these tools which is also kind

00:39:16,380 --> 00:39:21,900
of the other part of it I mean like the

00:39:19,830 --> 00:39:23,940
the robot that's on the main picture on

00:39:21,900 --> 00:39:26,730
the front page of the the thing is is

00:39:23,940 --> 00:39:30,180
running a version of Ross on a on a

00:39:26,730 --> 00:39:32,640
Linux distribution ideally I want like

00:39:30,180 --> 00:39:35,490
but the idea with Ross is that all that

00:39:32,640 --> 00:39:37,100
stuff is like platform neutral so I can

00:39:35,490 --> 00:39:40,170
still run my tools I can run my

00:39:37,100 --> 00:39:41,970
calculations on my own computer if I

00:39:40,170 --> 00:39:44,130
have a stronger computer and a good

00:39:41,970 --> 00:39:45,720
enough network I might be able to do

00:39:44,130 --> 00:39:47,910
better than the thing that's on the

00:39:45,720 --> 00:39:52,070
robot so that's the other kind of

00:39:47,910 --> 00:39:58,950
advantage with it so yeah

00:39:52,070 --> 00:40:02,180
anything else no well thank you very

00:39:58,950 --> 00:40:02,180
much and enjoy

00:40:11,430 --> 00:40:13,490

YouTube URL: https://www.youtube.com/watch?v=7rqlNl416Os


