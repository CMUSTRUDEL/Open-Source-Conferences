Title: OpenBSD: add VMM to ‘packer’
Publication date: 2019-10-27
Playlist: EuroBSDCon 2019, Norway
Description: 
	The sysadmin view of virtualization usually starts at a hypervisor running some kind of “image”. Packer is a framework to create such an image using various host and virtualized operating systems and adding some more bolts.

This talk shows the efforts and pitfalls of building a plugin for packer using the VMM framework on OpenBSD. Some details go down the rabbit hole (or reducing it) to provide a Go binary runnable as a plugin. For ease of installation, the ways how to package this as an OpenBSD ‘port’ are shown.

On top a bigger picture is provided on how to provide configurable OpenBSD images “at scale” by using the above accomplishments.

Philipp Buehler

Philipp uses Unix since mid 1990s and OpenBSD since 2000. Born and working in Germany mainly in Unix/Linux/BSD areas including ISP services and networking. Been an OpenBSD developer from 2002 to 2005, trying to cleanup and test pf(4). Co-founder of sysfive.com GmbH having the technical lead in designing and operating FOSS-based business plattforms.
Captions: 
	00:00:02,620 --> 00:00:06,640
good morning everyone thank you for

00:00:04,480 --> 00:00:08,280
attending we're here to welcome Philip

00:00:06,640 --> 00:00:19,750
Bueller who will be talking to us about

00:00:08,280 --> 00:00:21,490
OpenBSD and PBS TV mmm and Tucker good

00:00:19,750 --> 00:00:22,990
morning everybody I hope it's not too

00:00:21,490 --> 00:00:24,580
early on a Sunday morning after the

00:00:22,990 --> 00:00:28,449
social around is always a bit of a

00:00:24,580 --> 00:00:30,820
problem having a talk in this slot and I

00:00:28,449 --> 00:00:32,020
see it's not that many people and

00:00:30,820 --> 00:00:35,230
hopefully on the stream and the

00:00:32,020 --> 00:00:36,850
recording later on I will reach out for

00:00:35,230 --> 00:00:39,790
you know people who are interested in

00:00:36,850 --> 00:00:41,620
that only quick introduction about the

00:00:39,790 --> 00:00:44,800
company like you can read all that and

00:00:41,620 --> 00:00:47,410
we have been founded in 2000 and we are

00:00:44,800 --> 00:00:49,720
doing cloudy things even before the term

00:00:47,410 --> 00:00:52,810
cloud was have a coin so that's about

00:00:49,720 --> 00:00:55,840
that and myself I'm doing an accept

00:00:52,810 --> 00:01:05,619
ministration for or just around or a

00:00:55,840 --> 00:01:13,509
little bit more than 25 years so who is

00:01:05,619 --> 00:01:17,049
already using our packer oh that's who

00:01:13,509 --> 00:01:22,289
knows what packer might be is okay

00:01:17,049 --> 00:01:22,289
that's a bit more people okay thanks so

00:01:22,710 --> 00:01:28,680
the major thing every everybody wants to

00:01:26,380 --> 00:01:31,290
have relation

00:01:28,680 --> 00:01:33,420
segmentation and running around with

00:01:31,290 --> 00:01:36,480
their laptop having half the

00:01:33,420 --> 00:01:38,550
infrastructure on it all the hypervisors

00:01:36,480 --> 00:01:41,580
have basically the least common

00:01:38,550 --> 00:01:44,490
denominator and that's having kind of a

00:01:41,580 --> 00:01:46,710
box or image file where you have a raw

00:01:44,490 --> 00:01:50,250
disk with your installed system some

00:01:46,710 --> 00:01:56,670
metadata about how many CPUs ram usage

00:01:50,250 --> 00:01:59,640
whatever and apparently it's like xkcd

00:01:56,670 --> 00:02:06,030
story or we have 14 standards let's

00:01:59,640 --> 00:02:09,300
invent 215th so every hypervisor out

00:02:06,030 --> 00:02:11,370
there has its own metadata format but

00:02:09,300 --> 00:02:15,860
basically it's always the same stuff

00:02:11,370 --> 00:02:15,860
just packed a little differently and

00:02:16,070 --> 00:02:21,330
that's the first thing you have to

00:02:19,860 --> 00:02:23,940
address if you want to do some

00:02:21,330 --> 00:02:28,820
automation in that area the the other

00:02:23,940 --> 00:02:31,200
arm objective for me is to have not only

00:02:28,820 --> 00:02:34,260
infrastructure as code but

00:02:31,200 --> 00:02:37,320
infrastructure to go like I want to have

00:02:34,260 --> 00:02:41,570
my automation scripts on the laptop so I

00:02:37,320 --> 00:02:41,570
can work on it while being on the plane

00:02:41,690 --> 00:02:49,110
and this also adds reproducibility

00:02:46,100 --> 00:02:50,850
because I'm just running exactly the

00:02:49,110 --> 00:02:54,510
same code on the laptop and on the big

00:02:50,850 --> 00:02:57,930
machines in the data center and this is

00:02:54,510 --> 00:02:59,760
reached by what Packer can do is it

00:02:57,930 --> 00:03:02,450
works across host or even cross

00:02:59,760 --> 00:03:05,180
virtualized so you can just interchange

00:03:02,450 --> 00:03:07,980
the same script

00:03:05,180 --> 00:03:11,930
between something like always acts with

00:03:07,980 --> 00:03:15,660
VirtualBox AWS with a my images and

00:03:11,930 --> 00:03:20,880
since this project you will be able to

00:03:15,660 --> 00:03:25,440
do that without misting vmm so creating

00:03:20,880 --> 00:03:29,400
those images are usually something like

00:03:25,440 --> 00:03:31,970
I didn't write out that one but like you

00:03:29,400 --> 00:03:37,200
can do in VirtualBox application measure

00:03:31,970 --> 00:03:39,840
export this machine as a new box and

00:03:37,200 --> 00:03:41,380
typically it will begin that people

00:03:39,840 --> 00:03:43,630
write a shell script around

00:03:41,380 --> 00:03:46,440
box manager something like that so

00:03:43,630 --> 00:03:52,450
that's creating your own shell script

00:03:46,440 --> 00:03:54,010
the worse version of that is you pull

00:03:52,450 --> 00:03:58,420
something from github you have never

00:03:54,010 --> 00:04:02,050
seen before and just pop it into SH or

00:03:58,420 --> 00:04:05,710
you have those guys doing that at night

00:04:02,050 --> 00:04:09,370
and when you need a new image for

00:04:05,710 --> 00:04:10,810
example there was some CVE and security

00:04:09,370 --> 00:04:13,840
problems so you have to recreate the

00:04:10,810 --> 00:04:14,620
image the guy is having a hangover or is

00:04:13,840 --> 00:04:18,489
on vacation

00:04:14,620 --> 00:04:24,160
well nobody can do it I was just adding

00:04:18,489 --> 00:04:28,240
that after yesterday you can replace the

00:04:24,160 --> 00:04:30,880
shell script with Perl of course by the

00:04:28,240 --> 00:04:33,370
way ansible or something like that isn't

00:04:30,880 --> 00:04:38,530
the key thing here because we are

00:04:33,370 --> 00:04:40,540
talking about virtualized bare-metal so

00:04:38,530 --> 00:04:44,890
there's no Python yet so you cannot do

00:04:40,540 --> 00:04:46,900
chef ansible whatever but I will come to

00:04:44,890 --> 00:04:49,990
that at a later point where you can hook

00:04:46,900 --> 00:04:55,150
in for example ansible yeah well and

00:04:49,990 --> 00:04:58,360
then Packer comes into play who knows

00:04:55,150 --> 00:05:01,420
and is using your background or Waker

00:04:58,360 --> 00:05:06,060
and like I like it to say oh that's not

00:05:01,420 --> 00:05:08,470
so many as well but this is background

00:05:06,060 --> 00:05:11,800
it's just an abstraction layer for

00:05:08,470 --> 00:05:15,100
hypervisor management and this is from

00:05:11,800 --> 00:05:21,100
Hoshi Corp and Packer is also from

00:05:15,100 --> 00:05:22,690
Mexico so in their very own description

00:05:21,100 --> 00:05:29,380
you can can read that yourself

00:05:22,690 --> 00:05:34,960
I hope it's readable okay background is

00:05:29,380 --> 00:05:37,810
written in a pepper

00:05:34,960 --> 00:05:40,360
so Packers written go long the very

00:05:37,810 --> 00:05:44,650
pepper core is only a communication

00:05:40,360 --> 00:05:48,880
proxy during RPC within other code bases

00:05:44,650 --> 00:05:52,180
so every actual thingy doing something

00:05:48,880 --> 00:05:54,340
you can see is a plugin and it's talking

00:05:52,180 --> 00:05:57,680
why are this

00:05:54,340 --> 00:06:01,220
corporal water wear RPC calls and then

00:05:57,680 --> 00:06:03,560
reaching the other plugins like hey I

00:06:01,220 --> 00:06:07,430
finished something please please take

00:06:03,560 --> 00:06:11,510
over into to your stuff and the

00:06:07,430 --> 00:06:16,790
configuration for Packer is just one

00:06:11,510 --> 00:06:19,070
JSON file and for the easy and typical

00:06:16,790 --> 00:06:21,500
cases this is something like I have an

00:06:19,070 --> 00:06:25,520
example later on it's maybe like 15 or

00:06:21,500 --> 00:06:29,720
20 lines maximum for actually built

00:06:25,520 --> 00:06:33,310
description but you can make it a bit

00:06:29,720 --> 00:06:37,419
more complex if you want to spit out

00:06:33,310 --> 00:06:41,600
images for like five or six hypervisors

00:06:37,419 --> 00:06:43,970
but it's not really a difficult for me

00:06:41,600 --> 00:06:47,840
to understand and you can have a second

00:06:43,970 --> 00:06:51,400
file like location or host specific

00:06:47,840 --> 00:06:57,550
variables file but that's optional

00:06:51,400 --> 00:07:01,070
options are good if they are optional so

00:06:57,550 --> 00:07:04,060
every tool kit whatever comes with its

00:07:01,070 --> 00:07:07,130
own terminology and I will go over that

00:07:04,060 --> 00:07:09,979
quickly because that's important when

00:07:07,130 --> 00:07:12,200
I'm just saying like oh there's a

00:07:09,979 --> 00:07:13,880
template yeah what could that be because

00:07:12,200 --> 00:07:18,850
everybody is understanding something

00:07:13,880 --> 00:07:24,250
different given only know in itself so

00:07:18,850 --> 00:07:27,110
Packer will speak is artifacts which are

00:07:24,250 --> 00:07:31,490
the resulting image files to the

00:07:27,110 --> 00:07:37,070
hypervisor can directly consume a build

00:07:31,490 --> 00:07:40,280
a running build is just the plugins and

00:07:37,070 --> 00:07:44,990
the core doing its thing to create

00:07:40,280 --> 00:07:47,720
artifacts the builders are the actual

00:07:44,990 --> 00:07:51,080
code base that will be run to have a

00:07:47,720 --> 00:07:53,660
build and then creating an artifact then

00:07:51,080 --> 00:07:56,780
they are provisioners like after

00:07:53,660 --> 00:08:00,550
spinning up the vm and the Builder can

00:07:56,780 --> 00:08:04,389
then do its thing to bring up the vm

00:08:00,550 --> 00:08:08,050
launching or let launch to curl

00:08:04,389 --> 00:08:10,360
and if you want to do additional

00:08:08,050 --> 00:08:14,919
customer customization which is to give

00:08:10,360 --> 00:08:17,470
main point here anyway so you can hook

00:08:14,919 --> 00:08:19,930
in just maybe something like two or

00:08:17,470 --> 00:08:25,050
three lines of our share script like

00:08:19,930 --> 00:08:31,180
package at Python and you can then also

00:08:25,050 --> 00:08:34,539
go and call within Packer say oh please

00:08:31,180 --> 00:08:37,089
use ansible and decent that our playbook

00:08:34,539 --> 00:08:39,419
provided from over there or you hook in

00:08:37,089 --> 00:08:42,070
chef and all that they are way more

00:08:39,419 --> 00:08:43,240
that's on the next slide and then

00:08:42,070 --> 00:08:47,940
there's post-processing

00:08:43,240 --> 00:08:51,160
which is actually tearing down to VM

00:08:47,940 --> 00:08:54,420
like in VirtualBox terms like exporting

00:08:51,160 --> 00:08:59,320
it and then making a touch is that file

00:08:54,420 --> 00:09:05,110
with raw disk device depending on a

00:08:59,320 --> 00:09:08,550
hypervisor OVF XML files and all that

00:09:05,110 --> 00:09:12,820
whatever is needed that you have a valid

00:09:08,550 --> 00:09:14,500
VirtualBox box or our a my image to be

00:09:12,820 --> 00:09:20,350
used in Amazon Cloud and all that and

00:09:14,500 --> 00:09:22,540
templates in pack of speak is that's

00:09:20,350 --> 00:09:26,589
just a configuration Chasen it's not

00:09:22,540 --> 00:09:29,770
like you having a VM image as a template

00:09:26,589 --> 00:09:32,470
you will be modifying because many other

00:09:29,770 --> 00:09:35,800
things in this area will have the

00:09:32,470 --> 00:09:47,560
terminology that the template is just an

00:09:35,800 --> 00:09:50,790
image viewer modifying so as of at least

00:09:47,560 --> 00:09:54,970
some weeks ago those hypervisors are

00:09:50,790 --> 00:09:59,110
supported by the Packer as distributed

00:09:54,970 --> 00:10:03,399
by hashey Corp that's a lot of things

00:09:59,110 --> 00:10:08,040
already including stuff I never have

00:10:03,399 --> 00:10:08,040
heard of before like profit breaks

00:10:08,070 --> 00:10:15,000
whatever

00:10:10,560 --> 00:10:18,630
and since the whole packet structure is

00:10:15,000 --> 00:10:25,230
blackened based anyway it's very easy to

00:10:18,630 --> 00:10:27,990
add additional builders and you can just

00:10:25,230 --> 00:10:30,839
pack them in some things like three

00:10:27,990 --> 00:10:34,279
three directories we are packable look

00:10:30,839 --> 00:10:42,510
for legitimate plugins you could call

00:10:34,279 --> 00:10:43,019
and besides that Manny the fur party

00:10:42,510 --> 00:10:45,720
world

00:10:43,019 --> 00:10:49,680
I think this list goes on for maybe

00:10:45,720 --> 00:10:53,610
another 20 or something so more or less

00:10:49,680 --> 00:10:57,029
everything out there doing hypervisor

00:10:53,610 --> 00:10:57,660
stuff is already supported what was

00:10:57,029 --> 00:11:03,140
missing

00:10:57,660 --> 00:11:06,089
we mmm so I think it was in Bucharest

00:11:03,140 --> 00:11:09,899
where Antoine was approaching my leg I

00:11:06,089 --> 00:11:13,740
doing all this background stuff please

00:11:09,899 --> 00:11:17,220
add up miss D we mmm support to Packer

00:11:13,740 --> 00:11:17,490
because Packer itself was already ported

00:11:17,220 --> 00:11:23,550
to

00:11:17,490 --> 00:11:32,450
open BSD and you can use it right now to

00:11:23,550 --> 00:11:39,529
create Amazon images so after the

00:11:32,450 --> 00:11:39,529
bringing up the VM and doing let's say

00:11:39,680 --> 00:11:45,870
author install features of the operating

00:11:43,589 --> 00:11:47,880
system itself like Auto installing

00:11:45,870 --> 00:11:52,410
obesity or kick start in anything

00:11:47,880 --> 00:11:56,000
redhead paste or all this stuff you can

00:11:52,410 --> 00:12:00,170
also hook additional provisioning which

00:11:56,000 --> 00:12:03,930
has a built-in support like distributed

00:12:00,170 --> 00:12:06,180
of those things even here I learned

00:12:03,930 --> 00:12:09,930
something new like break point break

00:12:06,180 --> 00:12:11,380
point with master last night just

00:12:09,930 --> 00:12:14,350
another

00:12:11,380 --> 00:12:17,440
not invented here thing or something and

00:12:14,350 --> 00:12:19,510
of course you can add third-party

00:12:17,440 --> 00:12:22,210
provisioners as a blocking as well but

00:12:19,510 --> 00:12:28,060
that's not covered here because we are

00:12:22,210 --> 00:12:30,310
or I was concentrating in this area on

00:12:28,060 --> 00:12:36,970
the open misty side everybody knows open

00:12:30,310 --> 00:12:39,480
BSD but I was adding this here for

00:12:36,970 --> 00:12:43,180
reference and completeness completeness

00:12:39,480 --> 00:12:47,020
so you have to the kernel side of things

00:12:43,180 --> 00:12:51,400
you have a user and daemon handling the

00:12:47,020 --> 00:12:54,730
VM and a userland CLI to start and stop

00:12:51,400 --> 00:12:59,470
the VMS and all that and a configuration

00:12:54,730 --> 00:13:01,120
file you do not necessarily need but if

00:12:59,470 --> 00:13:05,020
you want to persist your configuration

00:13:01,120 --> 00:13:09,520
and I think switch setups are only

00:13:05,020 --> 00:13:12,160
possible with VM conf yeah but I'm not

00:13:09,520 --> 00:13:17,110
not using switch as of now so I don't

00:13:12,160 --> 00:13:21,700
need that one concept in Packer is baked

00:13:17,110 --> 00:13:25,390
in already it tries to use at the least

00:13:21,700 --> 00:13:29,640
privilege needed that's a nice thing and

00:13:25,390 --> 00:13:33,880
if it needs privilege for doing whatever

00:13:29,640 --> 00:13:36,160
it will by default cause you do but it

00:13:33,880 --> 00:13:39,720
won't be any good any long and OpenBSD

00:13:36,160 --> 00:13:44,230
but do s support it's not a problem

00:13:39,720 --> 00:13:48,090
sorry there's only one thing I will be

00:13:44,230 --> 00:13:48,090
talking about the details in a bit

00:13:49,560 --> 00:13:57,700
while Packer is handling the build you

00:13:54,580 --> 00:14:01,000
cannot access the terminal so you cannot

00:13:57,700 --> 00:14:03,610
type in a password it would be possible

00:14:01,000 --> 00:14:06,550
to do something like a spaz password

00:14:03,610 --> 00:14:09,370
upfront and then pass it into the

00:14:06,550 --> 00:14:12,790
session but if this is running longer

00:14:09,370 --> 00:14:15,370
than five minutes the credential will

00:14:12,790 --> 00:14:17,980
timeout and you would have to type in

00:14:15,370 --> 00:14:21,480
again under that's impossible so you

00:14:17,980 --> 00:14:23,960
have to have a do as configuration this

00:14:21,480 --> 00:14:28,060
works with no pass because

00:14:23,960 --> 00:14:28,060
the timeouts too early

00:14:29,500 --> 00:14:36,650
typically if you are installing doing a

00:14:33,920 --> 00:14:37,910
custom build or to install you will need

00:14:36,650 --> 00:14:41,480
to reach out

00:14:37,910 --> 00:14:43,970
well at least farther than the host you

00:14:41,480 --> 00:14:46,160
are building on so on the host you need

00:14:43,970 --> 00:14:53,870
a PF configuration like that for the

00:14:46,160 --> 00:14:56,690
main resolution and the actual HTTP

00:14:53,870 --> 00:14:59,000
requests making happen to fetch down new

00:14:56,690 --> 00:15:02,240
packages or whatever configuration

00:14:59,000 --> 00:15:04,700
service you need so and since we are

00:15:02,240 --> 00:15:08,120
using that we need I be forwarding

00:15:04,700 --> 00:15:11,870
enabled and of course you have to start

00:15:08,120 --> 00:15:16,190
we MD that's all the dependencies you

00:15:11,870 --> 00:15:21,350
have before you can use Packer with this

00:15:16,190 --> 00:15:26,060
plug-in I've written so we have kind of

00:15:21,350 --> 00:15:29,450
stage here so not like in Tokyo we can

00:15:26,060 --> 00:15:32,600
just rush over there and so if you have

00:15:29,450 --> 00:15:35,330
questions we are doing that at the end

00:15:32,600 --> 00:15:47,780
of the talk and I will be in the hallway

00:15:35,330 --> 00:15:50,930
for the next hour needs in terms of

00:15:47,780 --> 00:15:55,010
tooling and space for developing Packer

00:15:50,930 --> 00:15:57,590
plugins all of them as you need go line

00:15:55,010 --> 00:15:59,510
packet which are easily available

00:15:57,590 --> 00:16:00,220
packages and OpenBSD so that's a

00:15:59,510 --> 00:16:03,470
no-brainer

00:16:00,220 --> 00:16:06,950
you obviously you need an editor of your

00:16:03,470 --> 00:16:09,100
choice I was adding editor not only

00:16:06,950 --> 00:16:14,210
visual because of all that ad hype

00:16:09,100 --> 00:16:19,220
lately the go dependency needed for this

00:16:14,210 --> 00:16:22,400
plug-in are around 1.5 1.5 gigabyte and

00:16:19,220 --> 00:16:25,910
then it depends on what you are actually

00:16:22,400 --> 00:16:29,630
doing like if you have making super lean

00:16:25,910 --> 00:16:31,190
images with one gigabyte root disks you

00:16:29,630 --> 00:16:33,530
will need less players if you are doing

00:16:31,190 --> 00:16:37,090
something with a 100 Gig you will need

00:16:33,530 --> 00:16:37,090
way more so that's obvious

00:16:37,779 --> 00:16:49,310
in the in the source layout they are

00:16:43,490 --> 00:16:53,060
like two breeds in the pepper ecosystem

00:16:49,310 --> 00:16:57,920
like the one breed is doing everything

00:16:53,060 --> 00:17:02,240
in the well root directory of that

00:16:57,920 --> 00:17:07,040
repository but I think it's a bit nice

00:17:02,240 --> 00:17:10,970
so to have a make file readme and maybe

00:17:07,040 --> 00:17:14,480
the main entry hook in root directory

00:17:10,970 --> 00:17:17,270
but well hiding the dirty work somewhere

00:17:14,480 --> 00:17:26,180
else like in the cellar so I'm doing

00:17:17,270 --> 00:17:29,930
that in a subdirectory and from the

00:17:26,180 --> 00:17:32,960
source files perspective just some

00:17:29,930 --> 00:17:35,870
simple make file to make things nice

00:17:32,960 --> 00:17:40,400
like I'm even doing the presentation

00:17:35,870 --> 00:17:42,350
with make show presentation VM it's an

00:17:40,400 --> 00:17:46,130
oh by the way all the slides aren't

00:17:42,350 --> 00:17:48,890
github and all that so getting a link on

00:17:46,130 --> 00:17:52,460
the last page and even the presenting

00:17:48,890 --> 00:17:55,490
the presenter VM and the presentations

00:17:52,460 --> 00:17:58,730
all on github so self-hosted more or

00:17:55,490 --> 00:18:03,290
less well I'm not hosting it Harper get

00:17:58,730 --> 00:18:06,350
an idea so the make file can do building

00:18:03,290 --> 00:18:09,770
the plug-in install it in corresponding

00:18:06,350 --> 00:18:13,280
directory we mb is building a test we

00:18:09,770 --> 00:18:19,990
and with that builder then format and

00:18:13,280 --> 00:18:22,580
whetting for gold let's say linting and

00:18:19,990 --> 00:18:25,040
formatting and all that and yeah we're

00:18:22,580 --> 00:18:28,490
testin uninstall is speaking for itself

00:18:25,040 --> 00:18:30,800
in the main go source file there's only

00:18:28,490 --> 00:18:34,610
like ten lines or something like that

00:18:30,800 --> 00:18:41,630
which is actually importing the build or

00:18:34,610 --> 00:18:45,470
into the pack the world and it will have

00:18:41,630 --> 00:18:47,450
a blocking type of server so in on the

00:18:45,470 --> 00:18:48,930
RPC side of things you always have a

00:18:47,450 --> 00:18:52,110
server and client

00:18:48,930 --> 00:18:59,100
so this builder is a server connecting

00:18:52,110 --> 00:19:01,680
to the core our PC run a goroutine from

00:18:59,100 --> 00:19:05,790
from pakka itself it will register under

00:19:01,680 --> 00:19:08,610
its name like if you are having done a

00:19:05,790 --> 00:19:12,420
configuration that says build of EMM

00:19:08,610 --> 00:19:16,350
OpenBSD the RPC server has to have knows

00:19:12,420 --> 00:19:21,200
where is that plug-in running in terms

00:19:16,350 --> 00:19:23,850
of RPC addressing and then it will just

00:19:21,200 --> 00:19:26,730
being invoked as a go routine or in

00:19:23,850 --> 00:19:31,190
simpler UNIX speak it's spinning around

00:19:26,730 --> 00:19:31,190
so it's acting more or less like a demon

00:19:40,460 --> 00:19:48,330
config ov isn't about partly pausing the

00:19:46,380 --> 00:19:49,790
configuration because that is Packer

00:19:48,330 --> 00:19:54,690
doing for us already

00:19:49,790 --> 00:19:57,030
you only define a big struct where all

00:19:54,690 --> 00:19:59,130
the keywords and the value type are

00:19:57,030 --> 00:20:01,740
being defined and that's all you have to

00:19:59,130 --> 00:20:04,710
do everything else is more or less

00:20:01,740 --> 00:20:07,530
popping out of the Chasen and other

00:20:04,710 --> 00:20:09,240
parsing stuff that the Packer core is

00:20:07,530 --> 00:20:11,850
already doing for you actually it's a

00:20:09,240 --> 00:20:15,060
conflict blogging of Packard doing that

00:20:11,850 --> 00:20:17,640
for the core and communicating you the

00:20:15,060 --> 00:20:25,490
resulting data structure into your

00:20:17,640 --> 00:20:29,400
plugin ya build ago itself will be doing

00:20:25,490 --> 00:20:33,240
whether the rough groundwork for all of

00:20:29,400 --> 00:20:37,020
it like bringing the code into life

00:20:33,240 --> 00:20:40,680
anyway using the configuration struct

00:20:37,020 --> 00:20:41,240
into your running instance like in your

00:20:40,680 --> 00:20:44,970
build

00:20:41,240 --> 00:20:49,460
so the Builder is populating the build

00:20:44,970 --> 00:20:51,810
with conflict and then run a tokenized

00:20:49,460 --> 00:20:54,810
build structure you will see that riff

00:20:51,810 --> 00:20:57,960
steps on the next side what's happening

00:20:54,810 --> 00:20:59,560
over there and yeah well nicely you can

00:20:57,960 --> 00:21:03,040
cancel it

00:20:59,560 --> 00:21:06,940
which is nice in that way the Packer is

00:21:03,040 --> 00:21:11,580
doing if you doing multiple artifacts

00:21:06,940 --> 00:21:14,410
like you're building from the same built

00:21:11,580 --> 00:21:16,090
post-processing into Amazon Google Cloud

00:21:14,410 --> 00:21:20,310
VirtualBox and whatever it could take

00:21:16,090 --> 00:21:24,550
ages and you can cancel the build and

00:21:20,310 --> 00:21:26,710
Packer won't just shoot the routines in

00:21:24,550 --> 00:21:29,890
the Hat like kill - 9 or something like

00:21:26,710 --> 00:21:35,860
that but it will first signal over RPC

00:21:29,890 --> 00:21:40,300
hey please stop cancel and then you can

00:21:35,860 --> 00:21:47,050
have coat when this cancel comes it's

00:21:40,300 --> 00:21:51,490
like you are doing in the sea world just

00:21:47,050 --> 00:21:53,740
having a trap handler for six dot so you

00:21:51,490 --> 00:22:02,140
can actually do cleanup when a cancel

00:21:53,740 --> 00:22:04,960
happens sick aboard try to go and you

00:22:02,140 --> 00:22:08,170
can name that whatever you want to but

00:22:04,960 --> 00:22:10,720
it's if you want to have a community

00:22:08,170 --> 00:22:12,910
around it well use this terminology and

00:22:10,720 --> 00:22:19,960
find him so people know we had to look

00:22:12,910 --> 00:22:25,260
into what for so the driver holds the

00:22:19,960 --> 00:22:29,260
coat this actually doing more or less

00:22:25,260 --> 00:22:35,290
shell exact or something and in this

00:22:29,260 --> 00:22:40,930
case it's like spitting out needed we am

00:22:35,290 --> 00:22:42,820
CTL call with - capital L minus whatever

00:22:40,930 --> 00:22:50,910
needed disk image is over here and all

00:22:42,820 --> 00:22:58,770
that I will talk about this fixed me on

00:22:50,910 --> 00:23:01,600
the outlook future and whatever page

00:22:58,770 --> 00:23:07,630
because that's still a bit of a problem

00:23:01,600 --> 00:23:11,840
here - to get the IP address needed for

00:23:07,630 --> 00:23:16,450
the so called boot commands oh well

00:23:11,840 --> 00:23:16,450
we'll start the Builder is instructed to

00:23:16,809 --> 00:23:22,580
launch three my way i'm CTL with a

00:23:19,760 --> 00:23:24,169
connected sierra console and this serial

00:23:22,580 --> 00:23:27,500
console won't be connected to your

00:23:24,169 --> 00:23:33,110
terminal but to a packer internal t2i

00:23:27,500 --> 00:23:38,240
handler and packer is then able I have a

00:23:33,110 --> 00:23:40,309
demo of it to type in commands like if

00:23:38,240 --> 00:23:41,240
you are old enough and remember expect

00:23:40,309 --> 00:23:44,600
or something like that

00:23:41,240 --> 00:23:49,250
so it can interact with with that and

00:23:44,600 --> 00:23:54,880
Packer is doing this I have only to

00:23:49,250 --> 00:23:59,059
press 1a or so leave it to the machines

00:23:54,880 --> 00:24:06,740
and there are several step whatever

00:23:59,059 --> 00:24:11,630
those go friend and it's just depending

00:24:06,740 --> 00:24:15,320
what you are actually doing so splitting

00:24:11,630 --> 00:24:18,590
in up debt massively into single files

00:24:15,320 --> 00:24:21,020
which are done like out out there is

00:24:18,590 --> 00:24:27,200
probably only like 15 lines or something

00:24:21,020 --> 00:24:30,380
might look a bit here well spending a

00:24:27,200 --> 00:24:33,500
lot of effort for no reason but it's

00:24:30,380 --> 00:24:36,789
it's the way the community is doing this

00:24:33,500 --> 00:24:38,870
so just follow the hurt

00:24:36,789 --> 00:24:42,080
otherwise you're on annoying as a

00:24:38,870 --> 00:24:44,419
service as we have looked so out there

00:24:42,080 --> 00:24:46,039
is creating just just M Cadoo and

00:24:44,419 --> 00:24:50,600
checking permissions and all that and

00:24:46,039 --> 00:24:54,200
then creating a disk with VM CTL create

00:24:50,600 --> 00:24:59,539
in queue cow or R or whatever you have

00:24:54,200 --> 00:25:05,149
defined in the configuration Jason get

00:24:59,539 --> 00:25:09,130
VM perms holds cold a code to retrieve

00:25:05,149 --> 00:25:15,890
information and put it in a so called

00:25:09,130 --> 00:25:18,760
state back this state back is only let's

00:25:15,890 --> 00:25:22,780
say alive while the build is running and

00:25:18,760 --> 00:25:25,210
it's a possibility that all those

00:25:22,780 --> 00:25:27,000
plug-in components can

00:25:25,210 --> 00:25:30,610
right into like a temporary

00:25:27,000 --> 00:25:34,659
configuration buffer so you can write

00:25:30,610 --> 00:25:40,120
into it like it's put and then you can

00:25:34,659 --> 00:25:43,140
from from another wherever you are you

00:25:40,120 --> 00:25:50,289
can get this information to graph of

00:25:43,140 --> 00:25:53,740
conflict passing which is there for the

00:25:50,289 --> 00:25:57,340
reason that Packer is doing parallel

00:25:53,740 --> 00:26:01,539
stuff and you don't want to pass this

00:25:57,340 --> 00:26:03,940
information why our function parameters

00:26:01,539 --> 00:26:06,429
or something like that you write the

00:26:03,940 --> 00:26:09,940
information into a back and then

00:26:06,429 --> 00:26:12,370
multiple functions when they need it can

00:26:09,940 --> 00:26:14,799
read it from there and that's a main

00:26:12,370 --> 00:26:17,350
difference to just having a function

00:26:14,799 --> 00:26:32,140
call with twenty arguments or something

00:26:17,350 --> 00:26:34,929
like that so launching do we M is why

00:26:32,140 --> 00:26:39,070
are the driver VM CTS start obviously

00:26:34,929 --> 00:26:42,190
and doing all that right now especially

00:26:39,070 --> 00:26:45,130
for debugging purposes if the startup

00:26:42,190 --> 00:26:48,990
doesn't work because maybe you ran out

00:26:45,130 --> 00:26:54,610
of RAM on the on the laptop or wherever

00:26:48,990 --> 00:26:58,840
I'm not yet having the necessary cancel

00:26:54,610 --> 00:27:04,870
code to shoot down the we m properly

00:26:58,840 --> 00:27:06,460
like you know Pico and all that so it's

00:27:04,870 --> 00:27:10,140
not happening that often and I'm just

00:27:06,460 --> 00:27:13,809
right now leave the VM running so I can

00:27:10,140 --> 00:27:16,450
connect to it analyze it whatever and

00:27:13,809 --> 00:27:18,970
not just shooting it away and and you

00:27:16,450 --> 00:27:21,909
have difficulties to do a post-mortem

00:27:18,970 --> 00:27:29,399
analysis of what what happened what if

00:27:21,909 --> 00:27:29,399
what did go wrong boot command is doing

00:27:29,669 --> 00:27:36,270
exactly that thing I was already talking

00:27:32,289 --> 00:27:38,070
about like you have a keyboard typing

00:27:36,270 --> 00:27:43,320
machine

00:27:38,070 --> 00:27:47,760
PACA provides and in the early days

00:27:43,320 --> 00:27:50,430
people have been using that having a

00:27:47,760 --> 00:27:55,320
boot command with something like a

00:27:50,430 --> 00:27:58,920
hundred lines or order like running the

00:27:55,320 --> 00:28:01,770
installer in interactive mode and in

00:27:58,920 --> 00:28:04,190
instead of typing this hostname whatever

00:28:01,770 --> 00:28:08,190
you can do that in the boot command

00:28:04,190 --> 00:28:13,100
array but that's super tedious because

00:28:08,190 --> 00:28:13,100
if when something is not quite right

00:28:13,640 --> 00:28:24,210
especially on the timing part of things

00:28:18,200 --> 00:28:27,180
like Packer can type very slowly but it

00:28:24,210 --> 00:28:31,830
cannot type very fast it's a bit crazy

00:28:27,180 --> 00:28:33,960
and while it wasn't only one bill that

00:28:31,830 --> 00:28:36,090
failed because boot command was typing

00:28:33,960 --> 00:28:38,340
too fast or too slow or the wrong thing

00:28:36,090 --> 00:28:40,890
at the wrong time

00:28:38,340 --> 00:28:46,620
well auto installed to the rescue

00:28:40,890 --> 00:28:50,070
obviously there's one problem here

00:28:46,620 --> 00:28:51,870
Packer will run up if you if you tell

00:28:50,070 --> 00:28:54,780
Packer to do it

00:28:51,870 --> 00:29:00,020
Packer can run up a built-in httpd

00:28:54,780 --> 00:29:05,880
server which will serve files from its

00:29:00,020 --> 00:29:13,910
from a configured directory is somewhere

00:29:05,880 --> 00:29:17,670
on the host and it will run it on on

00:29:13,910 --> 00:29:21,390
just some some random high port north of

00:29:17,670 --> 00:29:24,120
8,000 or so and auto install isn't

00:29:21,390 --> 00:29:30,990
capable of that so if you are doing a

00:29:24,120 --> 00:29:34,980
pixie net boot with DHCP provided file

00:29:30,990 --> 00:29:40,620
named Auto install the shell script Auto

00:29:34,980 --> 00:29:44,940
install a happily run off ask the DHCP

00:29:40,620 --> 00:29:47,750
server or this next server supported

00:29:44,940 --> 00:29:51,350
already I don't know

00:29:47,750 --> 00:29:55,640
no matter what in the whole thing of

00:29:51,350 --> 00:29:59,210
that there is no possibility to say

00:29:55,640 --> 00:30:03,520
something here what wait a minute our

00:29:59,210 --> 00:30:07,460
install repository server is on a port

00:30:03,520 --> 00:30:12,830
different and part ii' just doesn't work

00:30:07,460 --> 00:30:16,730
so I'm not doing in this plugin

00:30:12,830 --> 00:30:19,270
a real of a real effect of whatever if

00:30:16,730 --> 00:30:24,669
it would be functioning anyway

00:30:19,270 --> 00:30:33,159
pixie paste that boot oughta install but

00:30:24,669 --> 00:30:37,370
actually doing interactive installed by

00:30:33,159 --> 00:30:41,870
from the way it VM is booting and then

00:30:37,370 --> 00:30:48,730
the boot command only is configured

00:30:41,870 --> 00:30:52,130
press capital A plus passing this URL

00:30:48,730 --> 00:30:55,190
with the dynamic IP and port that is

00:30:52,130 --> 00:31:03,470
only valid for this very one built

00:30:55,190 --> 00:31:04,850
running okay yeah so already there demo

00:31:03,470 --> 00:31:07,690
time

00:31:04,850 --> 00:31:10,460
like I said a configuration isn't like

00:31:07,690 --> 00:31:14,090
very complicated or something just like

00:31:10,460 --> 00:31:15,980
names disk size this form and whatever

00:31:14,090 --> 00:31:19,610
where where to fetch the ISO image

00:31:15,980 --> 00:31:21,590
either from this local disk or HTTP or

00:31:19,610 --> 00:31:25,880
whatever and here's the thing with the

00:31:21,590 --> 00:31:29,780
boot command to order install and here

00:31:25,880 --> 00:31:32,960
is a ul and Packer will provide this

00:31:29,780 --> 00:31:36,380
variable to me and know I have to

00:31:32,960 --> 00:31:41,390
provide this variable by looking up tap

00:31:36,380 --> 00:31:44,360
interface and the port will be provided

00:31:41,390 --> 00:31:46,940
via to state back configuration so some

00:31:44,360 --> 00:31:48,890
plug-in elsewhere will write this

00:31:46,940 --> 00:31:54,980
information is into the back and I can

00:31:48,890 --> 00:31:57,710
read it so the demo here the or install

00:31:54,980 --> 00:32:01,240
demo cast is within the repository as

00:31:57,710 --> 00:32:01,240
well so you can just replayed her

00:32:18,429 --> 00:32:25,330
start readable down there okay cool oh

00:32:25,360 --> 00:32:33,350
hang on

00:32:27,160 --> 00:32:35,660
sheared first so so I'm using this a

00:32:33,350 --> 00:32:41,900
cinema which is a really really nice

00:32:35,660 --> 00:32:50,540
tool to record terminal sessions so this

00:32:41,900 --> 00:32:52,490
is this is just a little HB microserver

00:32:50,540 --> 00:32:57,650
sitting in our office so this this is

00:32:52,490 --> 00:33:01,160
lap time I'm doing this right here

00:32:57,650 --> 00:33:03,350
because Syria consoles can only be

00:33:01,160 --> 00:33:06,080
connected once so I need to see your

00:33:03,350 --> 00:33:09,320
console within Packer itself for boot

00:33:06,080 --> 00:33:12,500
command if you do a second session with

00:33:09,320 --> 00:33:14,840
screen or Cu or tip or mini-com whatever

00:33:12,500 --> 00:33:17,179
connecting to the sames here console

00:33:14,840 --> 00:33:19,070
here while fireworks actually you know

00:33:17,179 --> 00:33:21,080
it's more like dark black dark black

00:33:19,070 --> 00:33:24,350
hole because nothing will happen anymore

00:33:21,080 --> 00:33:26,720
until you kill the VM and all that so

00:33:24,350 --> 00:33:28,880
I'm writing from Packer into a log file

00:33:26,720 --> 00:33:32,570
and I'm telling that instead of having

00:33:28,880 --> 00:33:36,790
the serial console output here so just

00:33:32,570 --> 00:33:40,070
pack a build and you're chasing file and

00:33:36,790 --> 00:33:43,070
packable brings in nice greenish color

00:33:40,070 --> 00:33:45,140
yeah now no colors creating the disk

00:33:43,070 --> 00:33:47,030
image that that is wood out there and

00:33:45,140 --> 00:33:49,850
all that this doing bringing up the VM

00:33:47,030 --> 00:33:54,170
and then you just have optimistic

00:33:49,850 --> 00:33:57,110
booting it's all here

00:33:54,170 --> 00:34:02,330
this built in HTTP server stopping up

00:33:57,110 --> 00:34:06,020
and now you see oh it's just here the I

00:34:02,330 --> 00:34:08,570
it's the first ID and boot wait is a

00:34:06,020 --> 00:34:10,220
permit for the boot command how long to

00:34:08,570 --> 00:34:13,129
wait until you should do that

00:34:10,220 --> 00:34:15,350
it should be dynamically waiting for the

00:34:13,129 --> 00:34:24,350
question instead of writing a fixed time

00:34:15,350 --> 00:34:26,780
but one thing after another and here

00:34:24,350 --> 00:34:28,250
after thing I'm typing in a four order

00:34:26,780 --> 00:34:33,919
install if we

00:34:28,250 --> 00:34:35,629
try to boot to fetch it from port 80 but

00:34:33,919 --> 00:34:39,139
it doesn't work and the fallback is to

00:34:35,629 --> 00:34:41,480
ask for the UL again and this is where

00:34:39,139 --> 00:34:46,599
Packer is typing in the URL and then

00:34:41,480 --> 00:34:49,849
it's fetching to install either come or

00:34:46,599 --> 00:34:53,119
install configuration file and then what

00:34:49,849 --> 00:34:55,849
install is doing what it's doing one

00:34:53,119 --> 00:34:59,150
thing with this my log is you will see

00:34:55,849 --> 00:35:01,550
there is no progress bar here until it's

00:34:59,150 --> 00:35:05,119
finished this is because this tty

00:35:01,550 --> 00:35:06,830
catcher waits for a line feed so it's

00:35:05,119 --> 00:35:09,290
not printing every character by its own

00:35:06,830 --> 00:35:12,470
but when the line is finished it pops up

00:35:09,290 --> 00:35:14,359
I'd have 100% so this is time elapsed

00:35:12,470 --> 00:35:17,150
the first time I was doing there like

00:35:14,359 --> 00:35:27,440
 nothing happens and then suddenly

00:35:17,150 --> 00:35:33,589
what it continues yeah all this or just

00:35:27,440 --> 00:35:37,099
standard auto install stuff and then we

00:35:33,589 --> 00:35:39,320
have the Installer we try to reboot but

00:35:37,099 --> 00:35:41,780
in this case it will actually fail to

00:35:39,320 --> 00:35:45,740
reboot because it has no idea what it

00:35:41,780 --> 00:35:48,230
was running just before so actually it's

00:35:45,740 --> 00:35:51,080
convenient because I need a stopped VM

00:35:48,230 --> 00:35:53,570
to export it anyway so it's rebooting

00:35:51,080 --> 00:35:57,320
but actually saying rebooting but it's

00:35:53,570 --> 00:36:00,109
actually stopping the thing and then you

00:35:57,320 --> 00:36:02,380
have from 900 Mac nice nicely usable

00:36:00,109 --> 00:36:02,380
image

00:36:12,060 --> 00:36:19,869
so status you have seen what it can do

00:36:15,720 --> 00:36:26,320
all the basic basic stuff is there well

00:36:19,869 --> 00:36:29,310
getting a lag here so it's only two

00:36:26,320 --> 00:36:29,310
pages no worries

00:36:29,520 --> 00:36:42,670
although all the basic needs are there

00:36:32,920 --> 00:36:45,670
the only thing is battery dying is the

00:36:42,670 --> 00:36:48,190
function get tap IP address if you want

00:36:45,670 --> 00:36:50,859
to have details about that as I said I

00:36:48,190 --> 00:36:52,839
mean in the hallway the problem is Pekka

00:36:50,859 --> 00:36:56,470
needs to know the IP address of the host

00:36:52,839 --> 00:37:01,080
tap interface where it will be where it

00:36:56,470 --> 00:37:03,910
is binding the built-in httpd server and

00:37:01,080 --> 00:37:05,740
right now I have some assumptions in the

00:37:03,910 --> 00:37:09,369
code about something and the assumptions

00:37:05,740 --> 00:37:18,369
is the mother of all fuck-ups so I have

00:37:09,369 --> 00:37:21,060
to fix that and future plans would be

00:37:18,369 --> 00:37:24,400
like having a disc label configuration

00:37:21,060 --> 00:37:27,099
option multiple discs more networking

00:37:24,400 --> 00:37:35,500
and all that that will be something for

00:37:27,099 --> 00:37:37,150
next year and integration making

00:37:35,500 --> 00:37:40,930
peccaries so of the Pekka builder

00:37:37,150 --> 00:37:43,660
plug-in or package ports and the same

00:37:40,930 --> 00:37:45,550
thing with background and then creating

00:37:43,660 --> 00:37:49,480
more or less a little bit of a ecosystem

00:37:45,550 --> 00:37:51,640
and maybe some readme about how to

00:37:49,480 --> 00:37:53,560
integrate that with our domains and then

00:37:51,640 --> 00:37:56,170
using real ad on the outside and all

00:37:53,560 --> 00:37:59,200
that and the other day you will have

00:37:56,170 --> 00:38:05,740
tough launch which will be cloud on your

00:37:59,200 --> 00:38:11,680
laptop without Misty only so the slides

00:38:05,740 --> 00:38:16,089
are on github this is just static

00:38:11,680 --> 00:38:18,700
location redirect it all started so the

00:38:16,089 --> 00:38:22,060
idea was coming from on 20 Booker's but

00:38:18,700 --> 00:38:26,140
actually hacking started in cloud

00:38:22,060 --> 00:38:28,869
we am CTL - capital B - fake I'm a net

00:38:26,140 --> 00:38:31,060
boot to the idea of that was developed

00:38:28,869 --> 00:38:34,030
in in Glarus as well and claudia was

00:38:31,060 --> 00:38:37,150
taking it into the into the gang and

00:38:34,030 --> 00:38:39,790
then something like - capital B happened

00:38:37,150 --> 00:38:42,280
and that's very convenient even if you

00:38:39,790 --> 00:38:44,710
are not using packer and that's all good

00:38:42,280 --> 00:38:49,150
Grubin out helped me with some gold

00:38:44,710 --> 00:38:53,230
stuff and adding iso and you kow support

00:38:49,150 --> 00:38:56,950
for the disks multi-disc support will be

00:38:53,230 --> 00:39:00,430
the next thing or growing file file

00:38:56,950 --> 00:39:03,010
systems and all that so I think

00:39:00,430 --> 00:39:07,359
questions will be a bit of a problem

00:39:03,010 --> 00:39:11,760
timers okay so here is the URLs like I

00:39:07,359 --> 00:39:14,320
said presentation it's all online and

00:39:11,760 --> 00:39:28,869
thank you open for questions first

00:39:14,320 --> 00:39:37,180
minutes whatever nobody oh come on Misha

00:39:28,869 --> 00:39:39,460
you have questions okay in here okay so

00:39:37,180 --> 00:39:42,339
you're talking about spy flinch right

00:39:39,460 --> 00:39:44,530
have you tried to do like queuing system

00:39:42,339 --> 00:39:48,730
for if you need for example multiple

00:39:44,530 --> 00:39:50,380
machines at once you don't need to do

00:39:48,730 --> 00:39:53,500
that because Packer is absolutely

00:39:50,380 --> 00:39:55,930
capable of it was in there in a internal

00:39:53,500 --> 00:40:00,280
description like every step of those

00:39:55,930 --> 00:40:02,830
five major steps in a Pecha build will

00:40:00,280 --> 00:40:05,800
be run in parallel by default Packer

00:40:02,830 --> 00:40:08,349
will be taking care of it so you do not

00:40:05,800 --> 00:40:10,660
need to you have your own kind of

00:40:08,349 --> 00:40:12,760
queueing parallel the parallelism that's

00:40:10,660 --> 00:40:15,190
why it everything is doing RPC and not

00:40:12,760 --> 00:40:17,740
directs your realized calls okay even

00:40:15,190 --> 00:40:21,750
for the logs and if you have a device

00:40:17,740 --> 00:40:21,750
for reference or something okay

00:40:25,030 --> 00:40:30,609
is there a special reason that you run

00:40:28,480 --> 00:40:33,400
the installation isn't it possible to

00:40:30,609 --> 00:40:35,140
pack the image by itself so just create

00:40:33,400 --> 00:40:36,960
an image and pack the install files into

00:40:35,140 --> 00:40:38,800
it directly

00:40:36,960 --> 00:40:40,440
it's instead of run the whole

00:40:38,800 --> 00:40:45,849
installation to virtual machine

00:40:40,440 --> 00:40:49,869
why are there ten religions that's all

00:40:45,849 --> 00:40:53,890
the answer like the the one kind of

00:40:49,869 --> 00:40:56,109
breed is doing images and re cloning

00:40:53,890 --> 00:40:58,450
them and modifying it and the other

00:40:56,109 --> 00:41:00,700
brain is doing completely customized

00:40:58,450 --> 00:41:02,740
full builds and this is about full boots

00:41:00,700 --> 00:41:05,560
if you want to do it differently

00:41:02,740 --> 00:41:07,480
use something else I just ask you for

00:41:05,560 --> 00:41:10,599
the advantages you have if you do it

00:41:07,480 --> 00:41:12,520
this way because I try this myself but

00:41:10,599 --> 00:41:17,369
just for one specific cloud we have in

00:41:12,520 --> 00:41:20,920
our company and there I am copied the

00:41:17,369 --> 00:41:24,099
the build infrastructure of how install

00:41:20,920 --> 00:41:26,050
ISO is is this done and asked what do

00:41:24,099 --> 00:41:26,500
you what your advantages is if you do it

00:41:26,050 --> 00:41:29,800
this way

00:41:26,500 --> 00:41:34,390
hang on if you have an mi image or

00:41:29,800 --> 00:41:37,930
VirtualBox box you are having this one

00:41:34,390 --> 00:41:42,270
box and then you clone or import it and

00:41:37,930 --> 00:41:45,730
you can still manipulate customize it

00:41:42,270 --> 00:41:49,810
this thing is not about instantiating a

00:41:45,730 --> 00:41:54,760
VM but building the underlying image so

00:41:49,810 --> 00:41:56,859
you can customize the images up front or

00:41:54,760 --> 00:42:00,430
you're doing it more or less a simple

00:41:56,859 --> 00:42:02,560
image like just plain six five install

00:42:00,430 --> 00:42:04,930
like in the demo and then why you are

00:42:02,560 --> 00:42:07,210
instantiating it with Amazon or

00:42:04,930 --> 00:42:10,180
recurrent then you can still have

00:42:07,210 --> 00:42:13,089
provisioning afterwards so it's just

00:42:10,180 --> 00:42:18,119
different area of what we are talking

00:42:13,089 --> 00:42:18,119
about okay okay thanks

00:42:23,470 --> 00:42:29,920
[Applause]

00:42:34,630 --> 00:42:36,690

YouTube URL: https://www.youtube.com/watch?v=GNmeFi3C1Xg


