Title: pkgbase: Are we there yet ???
Publication date: 2019-10-26
Playlist: EuroBSDCon 2019, Norway
Description: 
	pkgbase on FreeBSD is the method currently developed to handle base installation and update/upgrade with pkg(8). It was started by Baptiste Daroussin (bapt@) a few years ago and first presented in BSDCan 2015 (see https://www.bsdcan.org/2015/schedule/events/563.en.html). It was also planned to be included in 12.0-RELEASE but this didn’t happened.

I recently revive the work since I needed to create an appliance with an installer and an update system. Of course it didn’t work out of the box and I had a lots of issues, some known, some not known. We will see all the remaining issues when I started working on it, from config file to bsdinstall(8) support and multiple kernel installation. Since this is an ongoing effort all those issues will be hopefully resolved by the time this presentation is happening.

Emmanuel Vadot

FreeBSD kernel hacker and ARM board collector.
Captions: 
	00:00:07,200 --> 00:00:12,370
thank you thanks for 10 in my talk I

00:00:10,000 --> 00:00:15,459
hope you had a great lunch and you are

00:00:12,370 --> 00:00:18,820
not too tired and you can have a nap but

00:00:15,459 --> 00:00:21,670
just be quiet don't snore I would love

00:00:18,820 --> 00:00:23,920
to have enough personally so yeah I

00:00:21,670 --> 00:00:26,500
thought when said that we I'm going to

00:00:23,920 --> 00:00:31,270
talk about PKG base which is a big

00:00:26,500 --> 00:00:34,390
project in freebsd to use PKG to to

00:00:31,270 --> 00:00:36,519
distribute and update the base system so

00:00:34,390 --> 00:00:39,579
first of all who I am so my name is

00:00:36,519 --> 00:00:42,489
Minerva Dorman attributed org um FreeBSD

00:00:39,579 --> 00:00:46,749
user since 2004 source comatose since

00:00:42,489 --> 00:00:50,350
2016 in source I mostly deal with arm

00:00:46,749 --> 00:00:53,859
and I'm 64 related stuff I'm a freebsd

00:00:50,350 --> 00:00:57,249
pot committer since 2018 and they are

00:00:53,859 --> 00:01:01,809
also deal with a man on 64 rated stuff

00:00:57,249 --> 00:01:06,040
most most of all boot loaders and I'm a

00:01:01,809 --> 00:01:08,460
freelance developer so what is PKG base

00:01:06,040 --> 00:01:12,549
what it's using PKG for packaging and

00:01:08,460 --> 00:01:15,899
updating freebsd base not really

00:01:12,549 --> 00:01:18,340
surprising from the name

00:01:15,899 --> 00:01:22,380
PKG is the default package manager

00:01:18,340 --> 00:01:27,460
managers is since 12.0 which means that

00:01:22,380 --> 00:01:32,859
every supported branch is using PKG the

00:01:27,460 --> 00:01:35,229
old PKG tool i've been deprecated the

00:01:32,859 --> 00:01:39,570
goal is to split base into multiple

00:01:35,229 --> 00:01:43,990
packages so that package manager and

00:01:39,570 --> 00:01:46,079
started a long time ago in 2015 by

00:01:43,990 --> 00:01:49,600
baptist that was sound but that freebsd

00:01:46,079 --> 00:01:53,770
he first presented at all cat PSD cam

00:01:49,600 --> 00:01:56,200
2015 and he started around January or

00:01:53,770 --> 00:02:01,810
February of this year so it's been a

00:01:56,200 --> 00:02:07,359
long time it was a bundle for a lot of

00:02:01,810 --> 00:02:10,450
time and I've picked up last March so

00:02:07,359 --> 00:02:14,170
the goal are to provide binary upgrades

00:02:10,450 --> 00:02:15,360
for all the freebsd release so freebsd

00:02:14,170 --> 00:02:19,800
stable branch

00:02:15,360 --> 00:02:22,710
and the freebsd Kira branch it sort of

00:02:19,800 --> 00:02:24,450
fine-grain installation so if you want

00:02:22,710 --> 00:02:27,000
to have a system without send mail

00:02:24,450 --> 00:02:30,390
without NFS without to chain because

00:02:27,000 --> 00:02:35,220
your appliance or your use case don't

00:02:30,390 --> 00:02:40,050
need it it's better so you can do that

00:02:35,220 --> 00:02:42,990
really easily it's a lot PKG to deal

00:02:40,050 --> 00:02:45,720
with conf configuration file

00:02:42,990 --> 00:02:49,290
PKG have a three-way merging mechanism

00:02:45,720 --> 00:02:51,090
where it's more as you will never have

00:02:49,290 --> 00:02:55,500
any problem if you do some local

00:02:51,090 --> 00:02:57,420
modification on some files so when you

00:02:55,500 --> 00:03:00,510
are you will update the base system and

00:02:57,420 --> 00:03:02,310
it will update a new default

00:03:00,510 --> 00:03:04,770
configuration file it will do a

00:03:02,310 --> 00:03:08,190
three-way merge and most of the time you

00:03:04,770 --> 00:03:10,590
won't have any problem and it allows

00:03:08,190 --> 00:03:15,000
developers to provide a package for user

00:03:10,590 --> 00:03:17,489
to tests for example if somebody said to

00:03:15,000 --> 00:03:21,360
me ok so I think that this driver is

00:03:17,489 --> 00:03:25,410
broken but I do not really know or want

00:03:21,360 --> 00:03:29,100
to compile a new kernel or some specific

00:03:25,410 --> 00:03:31,320
part of the U of gos I can just send it

00:03:29,100 --> 00:03:33,930
to him one package and it will install

00:03:31,320 --> 00:03:39,209
it test and provide feedback and then

00:03:33,930 --> 00:03:42,000
wrote back to the official package it

00:03:39,209 --> 00:03:44,720
also lo us to provide some for example

00:03:42,000 --> 00:03:49,560
subchannel package that enables some

00:03:44,720 --> 00:03:52,950
some new flag for example some new way

00:03:49,560 --> 00:03:54,950
of doing locking or whatever freebsd

00:03:52,950 --> 00:03:58,080
could provide a new kernel configuration

00:03:54,950 --> 00:04:00,870
put some package and this will be easier

00:03:58,080 --> 00:04:05,970
for user to test those modification and

00:04:00,870 --> 00:04:08,730
report problems so calls are also that

00:04:05,970 --> 00:04:12,450
everything must live in the build system

00:04:08,730 --> 00:04:16,140
so currently you build your package with

00:04:12,450 --> 00:04:20,190
the make packages targets we don't want

00:04:16,140 --> 00:04:21,840
any external tool so not using the parse

00:04:20,190 --> 00:04:24,360
tree not using some shell scripts that

00:04:21,840 --> 00:04:26,159
lives in a in a

00:04:24,360 --> 00:04:28,379
in a user branch or whatever we want

00:04:26,159 --> 00:04:34,500
everything integrated in the build

00:04:28,379 --> 00:04:37,979
system it needs also to be able to build

00:04:34,500 --> 00:04:41,759
and create packages as a user no need

00:04:37,979 --> 00:04:45,509
for for root accounts and this is

00:04:41,759 --> 00:04:49,199
currently the case it also need to be

00:04:45,509 --> 00:04:53,039
able to create a package for Otto

00:04:49,199 --> 00:04:56,219
architecture it's really important for

00:04:53,039 --> 00:04:58,409
small embedded boards where if you want

00:04:56,219 --> 00:05:02,659
to build the best is the best system or

00:04:58,409 --> 00:05:05,370
even the kernel it could take ages

00:05:02,659 --> 00:05:07,289
sometimes you saw people on the freebsd

00:05:05,370 --> 00:05:09,449
our mailing lists that say oh yeah I've

00:05:07,289 --> 00:05:12,479
just run a make builder on my Raspberry

00:05:09,449 --> 00:05:15,000
Pi which is running at may be found read

00:05:12,479 --> 00:05:17,300
mega earths on an SD card of really slow

00:05:15,000 --> 00:05:21,449
SD card and say yeah and two days later

00:05:17,300 --> 00:05:24,569
I managed to do it or it broke and you

00:05:21,449 --> 00:05:27,860
don't want to wait two days just to test

00:05:24,569 --> 00:05:33,270
an update or just to update your system

00:05:27,860 --> 00:05:35,580
and so I wrote I want people to create

00:05:33,270 --> 00:05:39,150
freebsd distros what i mean by that that

00:05:35,580 --> 00:05:41,819
i see a lot on the internet people

00:05:39,150 --> 00:05:45,599
preaching linux distro like based on

00:05:41,819 --> 00:05:48,089
debian for example for armboard you have

00:05:45,599 --> 00:05:51,089
something called piehole which just a

00:05:48,089 --> 00:05:54,960
debian based on a raspbian so debian a

00:05:51,089 --> 00:05:58,080
distro for raspberry pi that are you to

00:05:54,960 --> 00:06:01,020
have a dns hole and not have any ads on

00:05:58,080 --> 00:06:05,520
the internet on YouTube etc having

00:06:01,020 --> 00:06:07,529
FreeBSD package will be way easier for

00:06:05,520 --> 00:06:11,310
people to create some freebsd distro

00:06:07,529 --> 00:06:13,169
that is done for a specific task you

00:06:11,310 --> 00:06:15,449
could replace reversely distro by

00:06:13,169 --> 00:06:17,639
appliance to but the appliance is like

00:06:15,449 --> 00:06:20,099
more professional way and destroys like

00:06:17,639 --> 00:06:21,539
yeah I just I just did that I put that

00:06:20,099 --> 00:06:23,940
on YouTube and if you want to donate

00:06:21,539 --> 00:06:28,770
some money so I continue etc these two

00:06:23,940 --> 00:06:31,199
appliance is more professional so how

00:06:28,770 --> 00:06:35,159
the package are generated we first

00:06:31,199 --> 00:06:36,390
install a fake fruit drinks make targets

00:06:35,159 --> 00:06:38,880
called wall stain

00:06:36,390 --> 00:06:42,180
turn off stage this is cold

00:06:38,880 --> 00:06:45,470
automatically when you are doing the

00:06:42,180 --> 00:06:48,530
make package package these targets and

00:06:45,470 --> 00:06:52,590
so everything will be installed in your

00:06:48,530 --> 00:06:56,310
obesity here under the under a directory

00:06:52,590 --> 00:06:59,700
called world stage and kernel stage and

00:06:56,310 --> 00:07:02,840
used it uses two mechanism the first

00:06:59,700 --> 00:07:07,380
thing that it passes - Dino routes which

00:07:02,840 --> 00:07:09,390
will not call install with - option so

00:07:07,380 --> 00:07:13,290
it will never set the correct ownership

00:07:09,390 --> 00:07:15,150
or set the correct right instead

00:07:13,290 --> 00:07:17,760
everything will be returned in a file

00:07:15,150 --> 00:07:20,160
called meta log which is just an empty

00:07:17,760 --> 00:07:22,740
file and so you will have the world

00:07:20,160 --> 00:07:26,850
stage that are just the file just copied

00:07:22,740 --> 00:07:30,380
and associate with that you have a

00:07:26,850 --> 00:07:31,950
metalic file where you find the correct

00:07:30,380 --> 00:07:36,600
write the correct

00:07:31,950 --> 00:07:38,970
owner etcetera and tar more more

00:07:36,600 --> 00:07:42,120
precisely lib archive which is used by

00:07:38,970 --> 00:07:44,190
Tao and by pkg can read a metal metal

00:07:42,120 --> 00:07:46,080
OGG file and so when you will create the

00:07:44,190 --> 00:07:48,120
package it will just read the correct

00:07:46,080 --> 00:07:54,000
right and correct owner from this file

00:07:48,120 --> 00:07:56,670
to be associated with the file it also

00:07:54,000 --> 00:07:59,160
had some tags in the meta log so that's

00:07:56,670 --> 00:08:01,980
just entry tags which contains the name

00:07:59,160 --> 00:08:04,680
of the package and this will be used to

00:08:01,980 --> 00:08:12,630
choose a destination package for a

00:08:04,680 --> 00:08:16,110
specific file by default if someone if

00:08:12,630 --> 00:08:18,210
some part of the will do not specify a

00:08:16,110 --> 00:08:21,090
package everything will go to the

00:08:18,210 --> 00:08:23,850
FreeBSD - utilities package this a

00:08:21,090 --> 00:08:26,600
package that I created last week or

00:08:23,850 --> 00:08:29,880
maybe two weeks ago it used to be

00:08:26,600 --> 00:08:33,600
different different one for the default

00:08:29,880 --> 00:08:36,360
package it's it's done like that because

00:08:33,600 --> 00:08:40,170
it's just easier I will talk about later

00:08:36,360 --> 00:08:43,110
on also plan to split so freebsd utility

00:08:40,170 --> 00:08:45,990
package if you have if you want more

00:08:43,110 --> 00:08:48,400
information on how this is done you can

00:08:45,990 --> 00:08:51,040
look at the bsd empty

00:08:48,400 --> 00:08:57,610
file in shell /mj and you will see

00:08:51,040 --> 00:08:59,110
everything about the package creation as

00:08:57,610 --> 00:09:02,800
I say make file can overwrite the

00:08:59,110 --> 00:09:05,500
package by just putting back a package

00:09:02,800 --> 00:09:09,930
equal bla bla bla in thermic file and

00:09:05,500 --> 00:09:15,100
that's how you choose a target package

00:09:09,930 --> 00:09:17,920
it is UCL so that's config universal

00:09:15,100 --> 00:09:23,140
configuration language this is language

00:09:17,920 --> 00:09:26,320
used by pkg - father father manifest

00:09:23,140 --> 00:09:28,990
file also use also used in base for

00:09:26,320 --> 00:09:32,110
different thing I think gels can use UCL

00:09:28,990 --> 00:09:34,930
file what was the tools that you

00:09:32,110 --> 00:09:38,950
converted syslog of Co new syslog your

00:09:34,930 --> 00:09:40,960
syslog oh yeah UCL is a bit used in

00:09:38,950 --> 00:09:43,630
freebsd will act more use of it and

00:09:40,960 --> 00:09:46,540
since package already use it it makes

00:09:43,630 --> 00:09:49,870
sense to you to use a UCL to define the

00:09:46,540 --> 00:09:52,540
package and all the usual file that

00:09:49,870 --> 00:09:56,550
defines a package for PKG base around

00:09:52,540 --> 00:10:01,570
also release large packages directory

00:09:56,550 --> 00:10:03,790
and the police creation so in the packet

00:10:01,570 --> 00:10:06,400
in to create of a package you have to

00:10:03,790 --> 00:10:09,130
provide a description of the package

00:10:06,400 --> 00:10:11,410
like with the Messner was what the names

00:10:09,130 --> 00:10:14,440
of version etc and you have to provide a

00:10:11,410 --> 00:10:17,020
list of file and this is ultimately

00:10:14,440 --> 00:10:24,010
automatically generated with the help of

00:10:17,020 --> 00:10:26,800
the meta log file what the make packages

00:10:24,010 --> 00:10:29,680
target does it's it not only creates a

00:10:26,800 --> 00:10:34,710
packages it also creates a repository so

00:10:29,680 --> 00:10:37,540
at the end you only have to sync or SCP

00:10:34,710 --> 00:10:41,560
the directory and have it served either

00:10:37,540 --> 00:10:45,480
locally or by some HTTP and you can

00:10:41,560 --> 00:10:49,270
distribute package for everyone to use

00:10:45,480 --> 00:10:53,250
so possible splits in speeds

00:10:49,270 --> 00:10:56,860
first of all we cannot please everyone

00:10:53,250 --> 00:10:58,680
if I think that some part of the base

00:10:56,860 --> 00:11:01,260
system should be in its own package

00:10:58,680 --> 00:11:02,380
someone else will have some other

00:11:01,260 --> 00:11:04,690
argument

00:11:02,380 --> 00:11:06,880
not better not worse but another

00:11:04,690 --> 00:11:10,420
argument so yeah we cannot please anyone

00:11:06,880 --> 00:11:13,000
everyone to four thousand subs the only

00:11:10,420 --> 00:11:14,830
one that's working on pkg bass well I

00:11:13,000 --> 00:11:16,630
have my arguments and you have to deal

00:11:14,830 --> 00:11:22,900
with it so unless you have a really

00:11:16,630 --> 00:11:28,060
better argument we will go my way thank

00:11:22,900 --> 00:11:30,940
you first of all the chrome speech is

00:11:28,060 --> 00:11:33,370
not final in the past month I've done a

00:11:30,940 --> 00:11:38,910
lot of commits that changes a lot of

00:11:33,370 --> 00:11:42,910
stuff and I'm still not done I hope -

00:11:38,910 --> 00:11:46,650
yeah I hope to set it up set up maybe in

00:11:42,910 --> 00:11:50,290
a month or two but yeah we'll see

00:11:46,650 --> 00:11:52,120
so first of all each kernel is it is in

00:11:50,290 --> 00:11:53,980
its own package based on the config file

00:11:52,120 --> 00:11:57,610
what does that means that you can have

00:11:53,980 --> 00:11:59,950
multiple kernel package so for release

00:11:57,610 --> 00:12:01,810
think about a distributing a generic

00:11:59,950 --> 00:12:03,910
package and a generic slash debug

00:12:01,810 --> 00:12:07,060
package so that we don't know user to

00:12:03,910 --> 00:12:09,640
just install a new package to use the

00:12:07,060 --> 00:12:15,100
debug camera provide information to the

00:12:09,640 --> 00:12:17,920
user etc for for current branch the

00:12:15,100 --> 00:12:21,550
default is to build the debug kernel and

00:12:17,920 --> 00:12:23,800
have a - no debug so the same thing if

00:12:21,550 --> 00:12:26,410
you want to run around but but don't

00:12:23,800 --> 00:12:28,570
have all the overhead of running debug

00:12:26,410 --> 00:12:31,780
kernel while you can you can choose and

00:12:28,570 --> 00:12:34,900
if you define your own your own channel

00:12:31,780 --> 00:12:37,900
config it will also be created and it

00:12:34,900 --> 00:12:39,940
will be in a package we have of course

00:12:37,900 --> 00:12:42,910
FreeBSD bootloader contain everything

00:12:39,940 --> 00:12:46,150
boot rada really related so that's also

00:12:42,910 --> 00:12:48,310
file in slash boots except the kernel so

00:12:46,150 --> 00:12:52,240
the call also configuration file is all

00:12:48,310 --> 00:12:53,830
you of force etc we have the salad

00:12:52,240 --> 00:12:55,630
package that contains the several times

00:12:53,830 --> 00:13:00,010
so that's a runtime Nicole it's silly

00:12:55,630 --> 00:13:03,310
thread etc the reason is that the design

00:13:00,010 --> 00:13:04,900
in their own package is that so I'm not

00:13:03,310 --> 00:13:07,150
sure that I've understood everything

00:13:04,900 --> 00:13:12,460
correctly is also made from cheap Co

00:13:07,150 --> 00:13:15,280
certain values of from April 29 on the

00:13:12,460 --> 00:13:15,820
PKG base mailing lists so you can have a

00:13:15,280 --> 00:13:17,350
look

00:13:15,820 --> 00:13:22,260
to be sure that I've understood

00:13:17,350 --> 00:13:25,950
correctly so all the external ibi are

00:13:22,260 --> 00:13:29,740
backward compatible and will always walk

00:13:25,950 --> 00:13:32,500
between if for example an ordinary is

00:13:29,740 --> 00:13:34,270
linked with null Lipsey but you hope

00:13:32,500 --> 00:13:38,260
that you lip see it will work with a new

00:13:34,270 --> 00:13:42,280
lip see but also internal between lip

00:13:38,260 --> 00:13:45,100
see lip thread etc not stable and will

00:13:42,280 --> 00:13:48,070
never be stable so you have to update

00:13:45,100 --> 00:13:50,890
them more or less at the same time and

00:13:48,070 --> 00:13:54,910
if you put them in a really really big

00:13:50,890 --> 00:13:56,680
package with a lot of other stuff there

00:13:54,910 --> 00:14:00,250
is a real chance that lip see will be

00:13:56,680 --> 00:14:03,820
updated first because alphabetically

00:14:00,250 --> 00:14:07,750
it's it's one of the first file and lip

00:14:03,820 --> 00:14:10,510
thread will be updated very very long a

00:14:07,750 --> 00:14:12,970
very long time after so we you will most

00:14:10,510 --> 00:14:16,030
likely have a big breakage and will have

00:14:12,970 --> 00:14:20,470
to boot from external media to recover

00:14:16,030 --> 00:14:23,320
your phoebus the entire installation we

00:14:20,470 --> 00:14:25,750
have the FreeBSD runtime package this

00:14:23,320 --> 00:14:29,050
used to be the default to go package it

00:14:25,750 --> 00:14:32,110
was very big it was even at the time it

00:14:29,050 --> 00:14:35,560
was not correctly named so and now it's

00:14:32,110 --> 00:14:36,910
even less less correctly named so I need

00:14:35,560 --> 00:14:40,450
to change the name I still don't know

00:14:36,910 --> 00:14:42,640
how we'll call it but the goal is to

00:14:40,450 --> 00:14:44,700
have everything to be able to boot into

00:14:42,640 --> 00:14:47,590
a single user and repair on installation

00:14:44,700 --> 00:14:49,510
so this means is that if you install the

00:14:47,590 --> 00:14:53,230
FreeBSD kernel package the boot loader

00:14:49,510 --> 00:14:56,050
psyllids and runtime you can put onto a

00:14:53,230 --> 00:15:01,920
single user and have everything to

00:14:56,050 --> 00:15:05,530
repair ufs or ZFS disc you have enough

00:15:01,920 --> 00:15:08,200
network tools to be able to configure so

00:15:05,530 --> 00:15:09,820
network and maybe grab some fire etc so

00:15:08,200 --> 00:15:12,430
that's one of the world so maybe I would

00:15:09,820 --> 00:15:15,520
really need through FreeBSD coreutils

00:15:12,430 --> 00:15:17,710
butts and core utilities is using Linux

00:15:15,520 --> 00:15:19,630
but yeah I mean the name the name makes

00:15:17,710 --> 00:15:21,790
sense to correct call you trees but I

00:15:19,630 --> 00:15:23,119
don't feel so yeah it will change as

00:15:21,790 --> 00:15:25,459
 on though

00:15:23,119 --> 00:15:27,909
what name I will choose if you have any

00:15:25,459 --> 00:15:35,959
ID please

00:15:27,909 --> 00:15:38,479
mmm what prepare Oh repair yeah well

00:15:35,959 --> 00:15:40,219
it's not only from for retirement this

00:15:38,479 --> 00:15:43,669
is also tools that you'll need to have a

00:15:40,219 --> 00:15:48,529
full freebsd the Nemean is our that's

00:15:43,669 --> 00:15:51,079
all you have the freebsd - RC package

00:15:48,529 --> 00:15:55,969
which contains a RC subsystem as with

00:15:51,079 --> 00:15:59,059
those not so long ago for tourism there

00:15:55,969 --> 00:16:01,999
is some people working on a policy for

00:15:59,059 --> 00:16:05,599
freebsd the iock system guy i don't know

00:16:01,999 --> 00:16:07,309
if we if we will ever see some ports or

00:16:05,599 --> 00:16:09,919
whatever to be able to use that in

00:16:07,309 --> 00:16:12,499
freebsd vania but at least not so

00:16:09,919 --> 00:16:14,989
ossified are in the own package and if

00:16:12,499 --> 00:16:19,099
you want to just experiment with another

00:16:14,989 --> 00:16:20,929
OC system it will be easier and also if

00:16:19,099 --> 00:16:22,479
you just take the freebsd runtime and

00:16:20,929 --> 00:16:26,719
freebsd psyllids

00:16:22,479 --> 00:16:29,989
package is very ND to create a small NFS

00:16:26,719 --> 00:16:32,959
would set up everything to bootstrap to

00:16:29,989 --> 00:16:35,059
everything else and most most of the

00:16:32,959 --> 00:16:36,589
time when you do a small embedded MF s

00:16:35,059 --> 00:16:38,449
route so that's a memory file system

00:16:36,589 --> 00:16:41,149
that is loaded by the kernel or

00:16:38,449 --> 00:16:45,079
integrated into the kernel you will have

00:16:41,149 --> 00:16:48,019
a specific /v g c LC files that just do

00:16:45,079 --> 00:16:52,609
what you want to do so that's the reason

00:16:48,019 --> 00:16:54,019
it was splitted and as i said phoebus

00:16:52,609 --> 00:16:55,969
the utilities it's not the default

00:16:54,019 --> 00:17:01,429
package and it contained a lot of

00:16:55,969 --> 00:17:03,709
different thing yep it's true go package

00:17:01,429 --> 00:17:11,299
so there is still some stuff that I need

00:17:03,709 --> 00:17:13,699
to take out every package is also split

00:17:11,299 --> 00:17:16,699
with - debug that's level prompt that's

00:17:13,699 --> 00:17:19,369
profile package user also the back file

00:17:16,699 --> 00:17:21,829
will amber p2 a dash debug develop on

00:17:19,369 --> 00:17:24,459
file so address etc in their own package

00:17:21,829 --> 00:17:28,850
and something for the profile file

00:17:24,459 --> 00:17:31,759
that's really useful for previous users

00:17:28,850 --> 00:17:32,990
because most of the time you don't need

00:17:31,759 --> 00:17:35,240
debug file you don't need development

00:17:32,990 --> 00:17:35,570
file you will just install you freebsd

00:17:35,240 --> 00:17:39,500
honest

00:17:35,570 --> 00:17:41,600
and send some package and run it and if

00:17:39,500 --> 00:17:43,009
you have any problems you can still

00:17:41,600 --> 00:17:45,049
install the dash debug file

00:17:43,009 --> 00:17:46,850
corresponding to the subsystems that you

00:17:45,049 --> 00:17:49,070
want to debug do your debugging and

00:17:46,850 --> 00:17:51,289
remove the package same thing for

00:17:49,070 --> 00:17:53,990
development profile and this is done

00:17:51,289 --> 00:17:58,970
automatically based on the on the type

00:17:53,990 --> 00:18:01,909
of the file on 64-bit are that solid two

00:17:58,970 --> 00:18:04,549
bits support so that's only amd64 for

00:18:01,909 --> 00:18:08,480
now we also create some - lead sorry -

00:18:04,549 --> 00:18:13,370
package I don't know if anyone's Chi you

00:18:08,480 --> 00:18:15,559
see she'll use lip sorry - on MV 64 I

00:18:13,370 --> 00:18:18,019
personally have no use for it I'm pretty

00:18:15,559 --> 00:18:23,149
sure that there is a lot of use I think

00:18:18,019 --> 00:18:26,889
that wine on empty 64 at least used to

00:18:23,149 --> 00:18:26,889
use those but I'm not sure anymore

00:18:28,039 --> 00:18:34,970
every everything coming from concrete so

00:18:31,639 --> 00:18:37,909
some stuffs that we pull from another

00:18:34,970 --> 00:18:40,639
repository are in their own package the

00:18:37,909 --> 00:18:45,799
reason that for security advisories or

00:18:40,639 --> 00:18:49,070
air eternities you are usually not you

00:18:45,799 --> 00:18:50,929
could be not one in advance and since

00:18:49,070 --> 00:18:54,049
you need to run out to package very very

00:18:50,929 --> 00:18:56,600
quick it's easier to add this in the own

00:18:54,049 --> 00:19:01,269
package so you will already have some

00:18:56,600 --> 00:19:01,269
part of the tree to Touro distributes

00:19:01,539 --> 00:19:05,450
free/busy tests contain all the tests

00:19:03,769 --> 00:19:08,149
treats again most of the time people

00:19:05,450 --> 00:19:10,039
don't care about test user don't care

00:19:08,149 --> 00:19:12,409
about tests only developer should care

00:19:10,039 --> 00:19:14,779
of a test and I'm not sure that a lot of

00:19:12,409 --> 00:19:19,070
developer to care but I personally don't

00:19:14,779 --> 00:19:23,990
really sorry I'm bad I'm bad for that I

00:19:19,070 --> 00:19:26,480
know I'm bad you can boo me at least I'm

00:19:23,990 --> 00:19:28,909
honest I knows as other people will not

00:19:26,480 --> 00:19:30,590
say the same so anyway everything in the

00:19:28,909 --> 00:19:33,500
FreeBSD test content knowledge - sweet

00:19:30,590 --> 00:19:35,360
maybe we should put clear some clear

00:19:33,500 --> 00:19:38,360
bellari we have some clear bin area

00:19:35,360 --> 00:19:40,509
entry maybe we should just put

00:19:38,360 --> 00:19:44,570
everything in the in the test package

00:19:40,509 --> 00:19:47,000
battle and the other package our

00:19:44,570 --> 00:19:49,390
application or lip specific for example

00:19:47,000 --> 00:19:51,250
I've created not so long ago

00:19:49,390 --> 00:19:54,160
free/busy that's brutal spec Brutus

00:19:51,250 --> 00:19:57,130
package you don't need bluetooth in a in

00:19:54,160 --> 00:20:01,120
a server I hope you don't need Brutus in

00:19:57,130 --> 00:20:04,600
a jail same scene for WPA or stay PG etc

00:20:01,120 --> 00:20:06,760
so I've created those packets so if you

00:20:04,600 --> 00:20:08,950
don't want them don't need them well

00:20:06,760 --> 00:20:12,190
it's there for you if you want to

00:20:08,950 --> 00:20:16,390
install them but I don't think that most

00:20:12,190 --> 00:20:17,920
of the people will use them and yeah I

00:20:16,390 --> 00:20:20,320
will continue to move things out of the

00:20:17,920 --> 00:20:24,760
utilities package maybe I should move

00:20:20,320 --> 00:20:26,919
NFS out of it again you don't need NFS

00:20:24,760 --> 00:20:29,980
in the jail unless you have some really

00:20:26,919 --> 00:20:33,490
real change set up something for

00:20:29,980 --> 00:20:35,309
Kerberos I used to love Kerberos and use

00:20:33,490 --> 00:20:37,990
it a lot when I was at university I

00:20:35,309 --> 00:20:40,900
don't think it's very very used outside

00:20:37,990 --> 00:20:43,059
of the FreeBSD cluster right now so

00:20:40,900 --> 00:20:46,030
maybe it makes sense to just put

00:20:43,059 --> 00:20:48,970
everything in a in a Chavez package that

00:20:46,030 --> 00:20:52,270
will also possibly help if people want

00:20:48,970 --> 00:20:54,429
to install either em dal or mi chica

00:20:52,270 --> 00:20:59,410
barrels from pots you will not have

00:20:54,429 --> 00:21:02,820
conflict with the base charge utilities

00:20:59,410 --> 00:21:02,820
I don't know

00:21:03,700 --> 00:21:09,880
so at the beginning of pkg base there

00:21:06,460 --> 00:21:13,270
was a lot of complain about the number

00:21:09,880 --> 00:21:18,730
of packages that we have it used to be

00:21:13,270 --> 00:21:20,590
around 800 that was if you count debug

00:21:18,730 --> 00:21:22,929
development profile and leap solely to

00:21:20,590 --> 00:21:27,309
package upon treat matters to some

00:21:22,929 --> 00:21:30,059
people for me Tony matters because if

00:21:27,309 --> 00:21:32,890
you have a really huge amount of package

00:21:30,059 --> 00:21:33,429
the first time you install it is very

00:21:32,890 --> 00:21:36,820
long

00:21:33,429 --> 00:21:39,100
it's way longer that what we we are

00:21:36,820 --> 00:21:41,910
currently doing which is just extracting

00:21:39,100 --> 00:21:45,400
bus that takes that and cannot take that

00:21:41,910 --> 00:21:47,620
instead of dealing with to tar file you

00:21:45,400 --> 00:21:50,770
are dealing with 800 so of course it's

00:21:47,620 --> 00:21:52,929
stronger I personally don't really care

00:21:50,770 --> 00:21:55,600
about for since these reasons I don't

00:21:52,929 --> 00:21:57,110
care to have a huge number of package as

00:21:55,600 --> 00:21:59,270
long as a

00:21:57,110 --> 00:22:02,330
the splitting is done in a logical way

00:21:59,270 --> 00:22:07,700
at least well yeah that one that could

00:22:02,330 --> 00:22:14,420
be explained right now

00:22:07,700 --> 00:22:16,190
we have through 392 package if you don't

00:22:14,420 --> 00:22:18,950
count the back development profile it's

00:22:16,190 --> 00:22:21,050
only one other 18 and if you don't

00:22:18,950 --> 00:22:24,860
insult the literally - it's only a cheap

00:22:21,050 --> 00:22:28,430
package which i think is good it's not

00:22:24,860 --> 00:22:31,460
that long to install as I said I will

00:22:28,430 --> 00:22:35,090
continue to split up some stuff out of a

00:22:31,460 --> 00:22:36,830
utility package but I think we can we

00:22:35,090 --> 00:22:41,000
can have a target of around a hundred

00:22:36,830 --> 00:22:43,180
package and it will still be ok

00:22:41,000 --> 00:22:49,010
performance-wise so yes that's what I'm

00:22:43,180 --> 00:22:51,920
planning true so in freebies system with

00:22:49,010 --> 00:22:53,540
after we have a with and without in a

00:22:51,920 --> 00:22:57,530
sauce we don't confess that control what

00:22:53,540 --> 00:23:00,830
will be built and also if we built with

00:22:57,530 --> 00:23:05,090
some liberally supports with pkg base

00:23:00,830 --> 00:23:07,970
you have you have to weigh well there is

00:23:05,090 --> 00:23:08,840
two two things that will happen if you

00:23:07,970 --> 00:23:11,900
start to tweak

00:23:08,840 --> 00:23:14,870
if for example you don't build with you

00:23:11,900 --> 00:23:18,140
build with without a PMI with oMG those

00:23:14,870 --> 00:23:20,630
package will simply not be created if

00:23:18,140 --> 00:23:22,790
you don't build for example without

00:23:20,630 --> 00:23:26,450
capsicum is if we change the compounds

00:23:22,790 --> 00:23:29,150
of the package for now there is no real

00:23:26,450 --> 00:23:33,920
solution ports of mechanism called

00:23:29,150 --> 00:23:35,360
flavours so we can maybe add something

00:23:33,920 --> 00:23:40,000
like that that we had for example

00:23:35,360 --> 00:23:42,200
FreeBSD - utilities - no capsicum I

00:23:40,000 --> 00:23:46,060
don't really have planned for now to

00:23:42,200 --> 00:23:46,060
work on that but yeah we need something

00:23:47,800 --> 00:23:55,730
another complain but from user was yeah

00:23:53,330 --> 00:23:58,760
each time I'm rebuilding my system I

00:23:55,730 --> 00:24:01,490
make the package I need to reinstall an

00:23:58,760 --> 00:24:04,430
upgrade every package even if the

00:24:01,490 --> 00:24:08,360
content haven't change and this is true

00:24:04,430 --> 00:24:09,610
if you just do what I just said so make

00:24:08,360 --> 00:24:12,420
packages and used to be

00:24:09,610 --> 00:24:15,130
to package things that there is a way to

00:24:12,420 --> 00:24:19,450
provide some good package it just that

00:24:15,130 --> 00:24:21,700
it was never documented I think that

00:24:19,450 --> 00:24:24,309
must slide as he only documentation so

00:24:21,700 --> 00:24:28,270
we try to put that on the FreeBSD wiki

00:24:24,309 --> 00:24:30,340
which could be useful for people so the

00:24:28,270 --> 00:24:34,570
first thing is to define with report

00:24:30,340 --> 00:24:36,880
disabled rapidly so build will will

00:24:34,570 --> 00:24:40,090
strip some all the date in compiled

00:24:36,880 --> 00:24:42,059
binaries etc so that mean if you use the

00:24:40,090 --> 00:24:45,040
same compiler to compile the same source

00:24:42,059 --> 00:24:48,210
at any point of time you will have the

00:24:45,040 --> 00:24:51,760
same binaries some Pienaar we produced

00:24:48,210 --> 00:24:53,919
this is the default on release and

00:24:51,760 --> 00:24:55,990
current and it's not to default on a

00:24:53,919 --> 00:24:59,500
sorry I release and stubborn and it's

00:24:55,990 --> 00:25:00,790
not to default in FreeBSD current you

00:24:59,500 --> 00:25:05,710
need to define SUSE date epoch

00:25:00,790 --> 00:25:08,530
that's available I yeah I think I spent

00:25:05,710 --> 00:25:10,600
a whole afternoon searching for this

00:25:08,530 --> 00:25:12,760
viable and when I say Baptiste oh and it

00:25:10,600 --> 00:25:15,780
took that say yeah didn't I tell you

00:25:12,760 --> 00:25:19,650
about it as in no to Dylan's so yeah

00:25:15,780 --> 00:25:22,900
this just this is used to tweak

00:25:19,650 --> 00:25:26,410
liberally Bach I've put it we'll just

00:25:22,900 --> 00:25:28,870
set the time stone to to every files

00:25:26,410 --> 00:25:32,559
through the x term that you set in the

00:25:28,870 --> 00:25:37,450
in this vial you need to pass free polio

00:25:32,559 --> 00:25:40,660
to make to have the repository add some

00:25:37,450 --> 00:25:42,700
some pass in your in your system you

00:25:40,660 --> 00:25:44,770
make packages and then you can

00:25:42,700 --> 00:25:47,260
distribute so this is how you bootstrap

00:25:44,770 --> 00:25:51,820
your package for example for sorting dot

00:25:47,260 --> 00:25:56,080
o then when we will have search in dot o

00:25:51,820 --> 00:25:59,230
- P 1 P 2 P 3 meaning we have some

00:25:56,080 --> 00:26:03,730
security advisories errata

00:25:59,230 --> 00:26:06,460
what we will do is again define repolish

00:26:03,730 --> 00:26:08,530
repolish but will we use the same source

00:26:06,460 --> 00:26:12,880
date epoch as the one we use to

00:26:08,530 --> 00:26:15,460
bootstrap you need to set pkg version to

00:26:12,880 --> 00:26:18,130
match because by default if you make the

00:26:15,460 --> 00:26:21,460
package it will be called search in lot

00:26:18,130 --> 00:26:23,039
o - P 1 and it will be calls that also

00:26:21,460 --> 00:26:26,639
inside

00:26:23,039 --> 00:26:28,739
inside the town inside the the manifest

00:26:26,639 --> 00:26:31,799
of the package so you need to use the

00:26:28,739 --> 00:26:33,840
same value as a bootstrap run a just

00:26:31,799 --> 00:26:36,029
temporary repo dear you come' pass a

00:26:33,840 --> 00:26:40,590
package with a with a bootstrap one can

00:26:36,029 --> 00:26:42,899
just use md5 or whenever you regenerate

00:26:40,590 --> 00:26:47,009
the package with a correct to start

00:26:42,899 --> 00:26:49,830
debug and the new PKG version and also

00:26:47,009 --> 00:26:52,139
packages that change you Aaron ugh them

00:26:49,830 --> 00:26:52,499
from the original repo you copies a new

00:26:52,139 --> 00:26:55,739
one

00:26:52,499 --> 00:26:58,080
you won't generate repository and then

00:26:55,739 --> 00:27:00,749
you will if for example only so colonel

00:26:58,080 --> 00:27:02,730
have a retinal tease you wouldn't have

00:27:00,749 --> 00:27:06,600
with just one new package we see which

00:27:02,730 --> 00:27:10,980
is FreeBSD - kernel does generate - such

00:27:06,600 --> 00:27:12,570
in dot o - P one there is nothing

00:27:10,980 --> 00:27:14,460
currently in the source tree that does

00:27:12,570 --> 00:27:16,409
that automatically is something that I'm

00:27:14,460 --> 00:27:22,649
working on and I hope to have everything

00:27:16,409 --> 00:27:27,799
ready so no sorry still one problem with

00:27:22,649 --> 00:27:32,639
package that issue if if for example I

00:27:27,799 --> 00:27:35,249
create a new package and people just PKG

00:27:32,639 --> 00:27:38,999
upgrade to a browser stem so new package

00:27:35,249 --> 00:27:41,820
will will not be installed unless it's a

00:27:38,999 --> 00:27:43,980
new dependency of an existing package so

00:27:41,820 --> 00:27:45,269
there is a plan to use a PKG good see

00:27:43,980 --> 00:27:47,700
the features that I am currently

00:27:45,269 --> 00:27:49,470
developing Baptist design

00:27:47,700 --> 00:27:51,450
pkg whoops a long time ago but on

00:27:49,470 --> 00:27:55,350
miyanji pepper and when I mean pepper I

00:27:51,450 --> 00:27:57,480
mean in it in his head so this is

00:27:55,350 --> 00:27:59,190
basically meta package like we have on

00:27:57,480 --> 00:28:01,649
the upholstery but as a report

00:27:59,190 --> 00:28:04,639
repository level so when you create your

00:28:01,649 --> 00:28:06,989
application repository you give it a

00:28:04,639 --> 00:28:09,570
directory with a lot of pediatric groups

00:28:06,989 --> 00:28:14,940
and it will create fake packages that

00:28:09,570 --> 00:28:18,179
only have dependencies so then the

00:28:14,940 --> 00:28:20,730
freebies in stock who just have freebus

00:28:18,179 --> 00:28:22,769
lead as - bass group - debug - slip

00:28:20,730 --> 00:28:26,700
sorry - and we just select which groups

00:28:22,769 --> 00:28:29,519
that you want to install and yeah since

00:28:26,700 --> 00:28:31,320
you are updating a group now new package

00:28:29,519 --> 00:28:34,170
will be installed automatically on

00:28:31,320 --> 00:28:36,820
update for example a few days ago

00:28:34,170 --> 00:28:39,700
maybe it was yesterday my to Siemens and

00:28:36,820 --> 00:28:42,490
mail to pick achievers and say yeah I've

00:28:39,700 --> 00:28:44,140
abetted my PKG base system and I was

00:28:42,490 --> 00:28:46,420
missing a lot of fine a lot of package

00:28:44,140 --> 00:28:50,860
and yeah this is no problem and we need

00:28:46,420 --> 00:28:53,020
to solve it we speak attributes one

00:28:50,860 --> 00:28:55,840
thing that I plan to do maybe not for

00:28:53,020 --> 00:28:57,940
the first for the first one of Pikachu

00:28:55,840 --> 00:29:01,180
group will be multiple candidates for

00:28:57,940 --> 00:29:04,180
one package so if the FreeBSD recently

00:29:01,180 --> 00:29:08,560
nine team wants to create a - no manual

00:29:04,180 --> 00:29:11,290
or - no capsicum package in the group

00:29:08,560 --> 00:29:13,810
you will have as a conduit for FreeBSD -

00:29:11,290 --> 00:29:16,000
utilities multiple conjugates so that

00:29:13,810 --> 00:29:18,670
will be the first one that will without

00:29:16,000 --> 00:29:20,950
any associated comfort wicking and you

00:29:18,670 --> 00:29:24,370
can could have another one which is with

00:29:20,950 --> 00:29:27,070
associated comfort week I think it would

00:29:24,370 --> 00:29:32,020
be good but it would be probably on the

00:29:27,070 --> 00:29:32,410
on the bigotry good version - so it

00:29:32,020 --> 00:29:34,240
won't work

00:29:32,410 --> 00:29:37,300
I have BSD install supports that means

00:29:34,240 --> 00:29:41,410
that in Sarah is able to install a pkg

00:29:37,300 --> 00:29:44,380
base installation it's a bit crappy I

00:29:41,410 --> 00:29:47,350
don't plan to unwrap it because I want

00:29:44,380 --> 00:29:50,950
first to use pkg group so yeah I just

00:29:47,350 --> 00:29:54,190
made two parts so I could test that

00:29:50,950 --> 00:29:56,530
everything was working something I'll

00:29:54,190 --> 00:29:58,600
have a really see much support but there

00:29:56,530 --> 00:30:00,430
is no part of committing that if the

00:29:58,600 --> 00:30:02,950
Installer don't have support and Sarah

00:30:00,430 --> 00:30:06,460
needs a pkg group but at least it's done

00:30:02,950 --> 00:30:09,910
and I know that it's working I'll bet a

00:30:06,460 --> 00:30:13,660
script called kernel selects which will

00:30:09,910 --> 00:30:17,830
allow - so ever on a pkg based system

00:30:13,660 --> 00:30:20,860
when you install the kernel it will in

00:30:17,830 --> 00:30:24,220
turn in slash boots last kernel that can

00:30:20,860 --> 00:30:26,320
come and cannot see like it's just tools

00:30:24,220 --> 00:30:29,590
that will Auto registers channels that

00:30:26,320 --> 00:30:31,480
you install by registering link

00:30:29,590 --> 00:30:33,610
slash good start kernel so the

00:30:31,480 --> 00:30:35,800
bootloader could find it and it will

00:30:33,610 --> 00:30:37,900
also remove itself and fall back to a

00:30:35,800 --> 00:30:40,870
default one if you remove a package so

00:30:37,900 --> 00:30:42,730
for example if you you are you have

00:30:40,870 --> 00:30:46,630
installed your FreeBSD

00:30:42,730 --> 00:30:47,710
salty not o which pkg base and you want

00:30:46,630 --> 00:30:49,480
to test your videos either

00:30:47,710 --> 00:30:51,820
picanha if you pick a application

00:30:49,480 --> 00:30:55,630
installed FreeBSD - kernel does generic

00:30:51,820 --> 00:30:58,539
debugger it will auto select it for the

00:30:55,630 --> 00:31:01,000
next put and if you remove it it will

00:30:58,539 --> 00:31:03,429
remove the link and use the previous one

00:31:01,000 --> 00:31:07,059
or if the previous one is not installed

00:31:03,429 --> 00:31:12,039
anymore it will just use a free - the

00:31:07,059 --> 00:31:16,870
FreeBSD - generic channel and I need to

00:31:12,039 --> 00:31:18,159
do more package splits again yeah so if

00:31:16,870 --> 00:31:20,020
you to work I really need to talk to

00:31:18,159 --> 00:31:21,880
release in generating so we can have

00:31:20,020 --> 00:31:25,330
official package even if we say to

00:31:21,880 --> 00:31:31,659
everyone don't choose it or use it only

00:31:25,330 --> 00:31:34,120
for test not having right now package in

00:31:31,659 --> 00:31:36,549
an official we Pro means that people

00:31:34,120 --> 00:31:39,520
cannot freely experience correctly the

00:31:36,549 --> 00:31:41,380
pkg based project and yeah I think it's

00:31:39,520 --> 00:31:43,690
bad

00:31:41,380 --> 00:31:46,630
I see me to do a freebies FreeBSD

00:31:43,690 --> 00:31:48,370
updates a utility right no freebies the

00:31:46,630 --> 00:31:51,510
update is just edgy update to get you

00:31:48,370 --> 00:31:54,070
upgrade and everything is done correctly

00:31:51,510 --> 00:31:57,010
but yeah I need to do that you know in

00:31:54,070 --> 00:31:58,870
the scripture that will take exactly the

00:31:57,010 --> 00:32:02,520
same argument as FreeBSD update so if

00:31:58,870 --> 00:32:04,179
people have cron job or I don't know

00:32:02,520 --> 00:32:06,370
unstable or sult

00:32:04,179 --> 00:32:09,610
jobs that does FreeBSD updates if we

00:32:06,370 --> 00:32:11,770
just work with them I might want to do

00:32:09,610 --> 00:32:13,809
put really much support so put the image

00:32:11,770 --> 00:32:16,539
put there is a tool to build package and

00:32:13,809 --> 00:32:18,370
can also build not a your image of the

00:32:16,539 --> 00:32:20,770
freebie system with the package that you

00:32:18,370 --> 00:32:23,020
build and yeah we need to had some

00:32:20,770 --> 00:32:25,179
polymer support but if someone else

00:32:23,020 --> 00:32:30,940
wants to beat me to that I will be

00:32:25,179 --> 00:32:33,730
perfectly happy so are we there yet not

00:32:30,940 --> 00:32:36,510
yet but much close that it used to be an

00:32:33,730 --> 00:32:39,039
at least we have someone working on it

00:32:36,510 --> 00:32:42,179
if you want to help just till a few bugs

00:32:39,039 --> 00:32:44,860
in the MK file I'm honestly very

00:32:42,179 --> 00:32:46,840
surprised and very scared when people

00:32:44,860 --> 00:32:49,600
tell me that they are using FreeBSD base

00:32:46,840 --> 00:32:52,179
PKG base for a long time because i

00:32:49,600 --> 00:32:56,919
honestly don't know how some stuff could

00:32:52,179 --> 00:32:59,750
have worked right now I'm only aware of

00:32:56,919 --> 00:33:01,940
one bug in the MK file

00:32:59,750 --> 00:33:06,220
it's not really a bad bug it's just that

00:33:01,940 --> 00:33:09,260
some profile and debugger and the bug

00:33:06,220 --> 00:33:11,120
file end up with the wrong package so

00:33:09,260 --> 00:33:15,380
you will still have them it's not the

00:33:11,120 --> 00:33:17,840
rule it's just not the right package and

00:33:15,380 --> 00:33:20,539
if you want to test just create a free

00:33:17,840 --> 00:33:26,150
minimal FreeBSD base package and install

00:33:20,539 --> 00:33:29,809
for example FreeBSD - I scuzzy D and try

00:33:26,150 --> 00:33:31,909
to use s QCD just to see if the speed

00:33:29,809 --> 00:33:34,549
was done correctly if the packets

00:33:31,909 --> 00:33:37,130
contain everything and if all the

00:33:34,549 --> 00:33:39,650
dependency are brought in automatically

00:33:37,130 --> 00:33:42,679
I will never have time to test every

00:33:39,650 --> 00:33:44,960
package independently so yeah we need

00:33:42,679 --> 00:33:46,850
some Apple that and there is no matter

00:33:44,960 --> 00:33:49,480
mailing list PKG base at free/busy dot

00:33:46,850 --> 00:33:53,870
org just an email i try to read I

00:33:49,480 --> 00:33:57,350
usually don't respond often but yeah I

00:33:53,870 --> 00:34:02,270
will try to do that more I want to say

00:33:57,350 --> 00:34:04,730
batiste and Alan Webber who were first

00:34:02,270 --> 00:34:07,640
of all review all my all my work on pkg

00:34:04,730 --> 00:34:11,119
base and reviewed my slide also so big

00:34:07,640 --> 00:34:14,500
thanks to them I know if you have any

00:34:11,119 --> 00:34:14,500
question I will be happy to answer

00:34:23,089 --> 00:34:32,129
lupa Leila yeah thank you for the talk I

00:34:28,710 --> 00:34:35,220
was interested in when you split

00:34:32,129 --> 00:34:38,970
packages like NFS which have kernel

00:34:35,220 --> 00:34:41,129
support does the kernel parts go into

00:34:38,970 --> 00:34:43,619
the kernel or the package with the

00:34:41,129 --> 00:34:47,849
feature no it's a camel part will not be

00:34:43,619 --> 00:34:50,129
spit as long as a generic image define

00:34:47,849 --> 00:34:54,200
NFS support in the kernel it will stay

00:34:50,129 --> 00:34:57,299
like that but also usual and utilities

00:34:54,200 --> 00:34:59,760
will be in their own package okay thank

00:34:57,299 --> 00:35:02,220
you and something for every other

00:34:59,760 --> 00:35:06,839
subsystem what about things that are

00:35:02,220 --> 00:35:08,250
kernel modules so when I said I'd say

00:35:06,839 --> 00:35:10,770
okay I don't want I just want to have

00:35:08,250 --> 00:35:13,829
one package for kernel but some are to

00:35:10,770 --> 00:35:20,099
work and the more things that we should

00:35:13,829 --> 00:35:21,299
have some kernel splited like there is a

00:35:20,099 --> 00:35:25,710
lot of others that I don't care about

00:35:21,299 --> 00:35:28,589
and if I find a elegant and easy way to

00:35:25,710 --> 00:35:31,200
generate some kernel package that only

00:35:28,589 --> 00:35:34,020
contains a kernel and splits the module

00:35:31,200 --> 00:35:36,450
into different sub package maybe that

00:35:34,020 --> 00:35:38,609
would be some things that I would like

00:35:36,450 --> 00:35:40,109
but it should be done easy when the

00:35:38,609 --> 00:35:42,420
start there might be just all the

00:35:40,109 --> 00:35:44,760
firmware stuff yeah a few more file for

00:35:42,420 --> 00:35:47,280
example should should be should be in a

00:35:44,760 --> 00:35:51,030
separate package yeah and after that we

00:35:47,280 --> 00:35:52,770
I should just commit quickly while

00:35:51,030 --> 00:35:54,270
nobody is really working at pkg base

00:35:52,770 --> 00:35:56,640
because I'm sure that if I do something

00:35:54,270 --> 00:35:59,609
like that it will bike shed for months

00:35:56,640 --> 00:36:01,049
and months and years and years so my

00:35:59,609 --> 00:36:02,430
question was more about you talked about

00:36:01,049 --> 00:36:04,109
Poudre image support yeah

00:36:02,430 --> 00:36:05,849
does it make sense to build it in the

00:36:04,109 --> 00:36:07,380
Poudre air image if it's just for

00:36:05,849 --> 00:36:09,690
building the packages or do we need like

00:36:07,380 --> 00:36:13,790
a prude rear base to kind of like bulk

00:36:09,690 --> 00:36:17,190
but for building just the base repo so

00:36:13,790 --> 00:36:19,170
put a very nice report I think the best

00:36:17,190 --> 00:36:21,630
way would be that you will not compile

00:36:19,170 --> 00:36:27,420
your journal and which will just Intel

00:36:21,630 --> 00:36:30,450
fishel pkg so you don't have to compile

00:36:27,420 --> 00:36:33,660
anything right what if I want to compile

00:36:30,450 --> 00:36:35,990
just the repo for a base system that's

00:36:33,660 --> 00:36:35,990
package

00:36:36,540 --> 00:36:40,510
well you could you could use you could

00:36:38,980 --> 00:36:42,730
just pkg wait so I don't touch that

00:36:40,510 --> 00:36:44,859
either you you will bootstrap your your

00:36:42,730 --> 00:36:50,910
staff gives a USB key to someone and

00:36:44,859 --> 00:36:50,910
they could automatically update it I

00:36:51,119 --> 00:36:58,480
don't know but please open some some mad

00:36:56,619 --> 00:37:05,050
requests on Puglia and we will talk

00:36:58,480 --> 00:37:06,670
about that if I may not question so one

00:37:05,050 --> 00:37:08,980
of the things which I really liked about

00:37:06,670 --> 00:37:12,190
FreeBSD and I actually use it daily

00:37:08,980 --> 00:37:15,339
is that if you download the tar balls

00:37:12,190 --> 00:37:17,980
from the distribution from the download

00:37:15,339 --> 00:37:19,839
and you just untie them all you have the

00:37:17,980 --> 00:37:23,500
FreeBSD in that they return like it's a

00:37:19,839 --> 00:37:27,369
fully functional thing yeah so what the

00:37:23,500 --> 00:37:29,589
pickety base will that still be possible

00:37:27,369 --> 00:37:31,930
without any like and I do that sometimes

00:37:29,589 --> 00:37:34,960
on other operating systems like on Linux

00:37:31,930 --> 00:37:38,650
for example yeah so will I have to have

00:37:34,960 --> 00:37:40,690
a binary of bgg to install stuff in a

00:37:38,650 --> 00:37:43,000
director or I still will be able to just

00:37:40,690 --> 00:37:45,490
use star to create a folder full of

00:37:43,000 --> 00:37:48,460
rubies I don't think that we have some

00:37:45,490 --> 00:37:52,119
plan to remove the bastard to exit and

00:37:48,460 --> 00:37:54,970
cannot take that our creation will not

00:37:52,119 --> 00:37:57,760
make sense okay but it's but after like

00:37:54,970 --> 00:38:00,760
considering we are fully BG base and I

00:37:57,760 --> 00:38:03,310
forgot about like ever having non

00:38:00,760 --> 00:38:05,800
Piketty base will it still be like how I

00:38:03,310 --> 00:38:08,890
I don't see how it how it plays well

00:38:05,800 --> 00:38:11,099
together like having base DX that with

00:38:08,890 --> 00:38:14,260
the package of base at the same time

00:38:11,099 --> 00:38:16,650
well some people would probably want to

00:38:14,260 --> 00:38:21,190
still use them because I have a lot of

00:38:16,650 --> 00:38:22,900
CI job using it etcetera I also plan to

00:38:21,190 --> 00:38:26,170
make a script that will convert your

00:38:22,900 --> 00:38:27,940
existing system into a pkg base so we

00:38:26,170 --> 00:38:30,010
just fake the record if you have the

00:38:27,940 --> 00:38:33,700
correct file and so you could use for

00:38:30,010 --> 00:38:36,070
example you could just extract basket

00:38:33,700 --> 00:38:39,490
egghead runs a script and you will have

00:38:36,070 --> 00:38:43,599
PKG based system but without ever

00:38:39,490 --> 00:38:45,430
running PKG in store yeah but which you

00:38:43,599 --> 00:38:46,500
you are talking something where in the

00:38:45,430 --> 00:38:48,450
future

00:38:46,500 --> 00:38:50,640
we should have a lot of stuff to do

00:38:48,450 --> 00:38:53,220
before yeah that would be cool that we

00:38:50,640 --> 00:38:55,230
have that feature thank you also are the

00:38:53,220 --> 00:38:59,339
package files are just har files so if

00:38:55,230 --> 00:39:00,960
you ignore the manifest and three other

00:38:59,339 --> 00:39:03,300
files you can just extract all the

00:39:00,960 --> 00:39:05,700
packages in duis Li and you would have

00:39:03,300 --> 00:39:08,160
the exact same thing yeah so my question

00:39:05,700 --> 00:39:10,440
was going to be about how do we convert

00:39:08,160 --> 00:39:15,300
in the existing system but your answer

00:39:10,440 --> 00:39:18,300
is yeah so the idea of the script came

00:39:15,300 --> 00:39:20,250
up when I was talking to to Baptiste and

00:39:18,300 --> 00:39:22,470
say yeah but if people complain about

00:39:20,250 --> 00:39:25,470
the install time because we have it well

00:39:22,470 --> 00:39:27,750
this was when we had a heightened read

00:39:25,470 --> 00:39:29,579
package said yeah we can just do exactly

00:39:27,750 --> 00:39:33,900
the same thing and do a scripts that

00:39:29,579 --> 00:39:36,680
will just install the just create a fake

00:39:33,900 --> 00:39:42,180
PKG based system but that can be

00:39:36,680 --> 00:39:43,650
upgraded after first of all thank you

00:39:42,180 --> 00:39:45,210
very much for all your work on this

00:39:43,650 --> 00:39:47,880
i think it's great that someone's picked

00:39:45,210 --> 00:39:49,579
it up and is charging at forward yep so

00:39:47,880 --> 00:39:51,930
so my next question is not meant to

00:39:49,579 --> 00:39:53,550
disenfranchise at all but i just wanted

00:39:51,930 --> 00:39:57,030
to understand what your thoughts were

00:39:53,550 --> 00:40:00,119
about the true OS idea of having the

00:39:57,030 --> 00:40:01,470
package base out out of source and when

00:40:00,119 --> 00:40:02,880
I sort of saw that I thought that's an

00:40:01,470 --> 00:40:05,760
interesting idea I mean a lot of work

00:40:02,880 --> 00:40:07,619
had already been put in at that point to

00:40:05,760 --> 00:40:10,079
getting package base in in the source

00:40:07,619 --> 00:40:11,730
tree but if I look at every other

00:40:10,079 --> 00:40:13,319
program you build you don't you don't

00:40:11,730 --> 00:40:15,839
put the instructions on how to make a

00:40:13,319 --> 00:40:17,670
package in in the source tree for that

00:40:15,839 --> 00:40:19,589
program you do that separately like in

00:40:17,670 --> 00:40:21,150
the port's tree so it kind of aligned

00:40:19,589 --> 00:40:23,910
well from that point of view in my mind

00:40:21,150 --> 00:40:27,000
what are your thoughts on that and I

00:40:23,910 --> 00:40:29,760
guess now it's been dropped so yeah yeah

00:40:27,000 --> 00:40:32,760
apparently so yeah so yeah i hack system

00:40:29,760 --> 00:40:34,710
started a side project or side pkg base

00:40:32,760 --> 00:40:39,000
projects that shoes supports tree to

00:40:34,710 --> 00:40:41,849
build to build a zero package system

00:40:39,000 --> 00:40:43,800
split was not done the same way and I'm

00:40:41,849 --> 00:40:46,680
not going to talk about that but yes you

00:40:43,800 --> 00:40:51,329
have maybe 12 20 package I think it's

00:40:46,680 --> 00:40:54,270
it's not enough my main problem is you

00:40:51,329 --> 00:40:58,950
can not use pot system efficiently to

00:40:54,270 --> 00:40:59,730
cross build so meaning that we I cannot

00:40:58,950 --> 00:41:02,700
choose right now

00:40:59,730 --> 00:41:05,670
there exists a method to cross built for

00:41:02,700 --> 00:41:12,150
anti 7 or 164 that's a big showstopper

00:41:05,670 --> 00:41:15,270
for me I have a lot a lot of other minor

00:41:12,150 --> 00:41:19,200
concern but that's one of the primary

00:41:15,270 --> 00:41:20,940
one and I had one other question I guess

00:41:19,200 --> 00:41:23,069
concerned with the large number of

00:41:20,940 --> 00:41:24,540
packages which I'm agree with you what I

00:41:23,069 --> 00:41:26,579
care too much either except when I

00:41:24,540 --> 00:41:27,960
download them each time a new it starts

00:41:26,579 --> 00:41:29,609
to download the next package there's a

00:41:27,960 --> 00:41:31,859
slight pause before the download then

00:41:29,609 --> 00:41:34,890
continues and I started wondering how

00:41:31,859 --> 00:41:36,450
does freebsd update or port snap do that

00:41:34,890 --> 00:41:39,750
so quickly and then I found that they

00:41:36,450 --> 00:41:42,240
have this thing called pipeline HTTP or

00:41:39,750 --> 00:41:43,980
PhD DP get as it's called and you can

00:41:42,240 --> 00:41:47,119
look up the man page forms do you know

00:41:43,980 --> 00:41:50,970
if there's any work to to try and get

00:41:47,119 --> 00:41:56,839
package to use pipeline to HTTP there is

00:41:50,970 --> 00:41:59,960
no work but I've but what about having

00:41:56,839 --> 00:42:02,369
multiple don't know connect multiple

00:41:59,960 --> 00:42:08,430
concurrency download into package and

00:42:02,369 --> 00:42:10,920
he's thinking of doing it and each time

00:42:08,430 --> 00:42:12,809
I see him I try to convince even a

00:42:10,920 --> 00:42:14,880
little more that he should really work

00:42:12,809 --> 00:42:18,000
on that same thing for the installation

00:42:14,880 --> 00:42:22,770
there is a lot of package that you could

00:42:18,000 --> 00:42:26,190
install in parallel because said to not

00:42:22,770 --> 00:42:28,410
conflict and sometimes it makes sense to

00:42:26,190 --> 00:42:31,530
extract a lot of tar in the same places

00:42:28,410 --> 00:42:35,609
like if you have an nvme drive you can

00:42:31,530 --> 00:42:39,630
extract maybe 4 5 10 20 GZ at the same

00:42:35,609 --> 00:42:41,819
time and it will be ok so it's blender I

00:42:39,630 --> 00:42:44,130
would say but nothing is really

00:42:41,819 --> 00:42:45,420
happening for the downward side the

00:42:44,130 --> 00:42:47,040
gentleman that implemented that I think

00:42:45,420 --> 00:42:48,990
was Colin Percival who's next door doing

00:42:47,040 --> 00:42:53,450
it yeah talk right now so it's maybe

00:42:48,990 --> 00:42:53,450
getting baptized yeah yeah

00:42:56,780 --> 00:43:02,190
yeah exactly so well what about

00:43:00,270 --> 00:43:05,910
versioning this game some pet releases

00:43:02,190 --> 00:43:09,690
if you follow what about upgrading and

00:43:05,910 --> 00:43:12,360
versioning scheme and match releases so

00:43:09,690 --> 00:43:13,710
uploading patch release will be ultra

00:43:12,360 --> 00:43:15,150
packages will be serve on the same

00:43:13,710 --> 00:43:18,360
repository because it's still for

00:43:15,150 --> 00:43:20,880
example after the Saltine dot oh and if

00:43:18,360 --> 00:43:23,970
you want a compound upgrade to a 13.1

00:43:20,880 --> 00:43:28,050
one 30.1 is out these some things that

00:43:23,970 --> 00:43:31,320
the fake freebsd updates scrip shell

00:43:28,050 --> 00:43:35,010
that i said i will make will we london

00:43:31,320 --> 00:43:39,000
so it will just replace your PKG PKG

00:43:35,010 --> 00:43:43,140
based cons if it will replace repository

00:43:39,000 --> 00:43:46,680
and just update your kernel first you

00:43:43,140 --> 00:43:49,080
fetch all the packages reboot on the new

00:43:46,680 --> 00:43:50,880
clean all we see all base inserts a new

00:43:49,080 --> 00:43:52,890
base and you're good to go

00:43:50,880 --> 00:43:55,380
okay I was thinking more the the patch

00:43:52,890 --> 00:43:57,600
release is one goes to p1 p2 and there's

00:43:55,380 --> 00:44:00,060
a security updated but just one packages

00:43:57,600 --> 00:44:02,460
is actually influenced by that and you

00:44:00,060 --> 00:44:05,010
and what about what happens then is

00:44:02,460 --> 00:44:07,230
there anything you just don't know the

00:44:05,010 --> 00:44:10,100
new package just like one but yeah so if

00:44:07,230 --> 00:44:14,160
there's a bug in or in a router thing in

00:44:10,100 --> 00:44:15,840
ZFS dual sample you will just get the

00:44:14,160 --> 00:44:17,670
new trapeze the investools and that will

00:44:15,840 --> 00:44:21,000
have P 1 and the rest won't yeah exactly

00:44:17,670 --> 00:44:23,060
so how does it comply to free BC were

00:44:21,000 --> 00:44:26,910
version will that be upgraded still then

00:44:23,060 --> 00:44:31,170
just the free/busy version come analysis

00:44:26,910 --> 00:44:33,600
essay ok you have 12 1 p1 yeah i'd only

00:44:31,170 --> 00:44:35,550
few currently working with free/busy -

00:44:33,600 --> 00:44:39,240
russian but i will make sure that if

00:44:35,550 --> 00:44:42,720
it's not and I don't see why it would

00:44:39,240 --> 00:44:47,340
not work but I have I have to I have to

00:44:42,720 --> 00:44:50,700
look say because really bsd - russian

00:44:47,340 --> 00:44:53,700
come on yeah yeah but every package

00:44:50,700 --> 00:44:57,270
would actually then influence that one a

00:44:53,700 --> 00:45:00,180
binary right yeah so maybe we will need

00:44:57,270 --> 00:45:02,550
to put everything related to freebase

00:45:00,180 --> 00:45:04,380
the - version in in its own package and

00:45:02,550 --> 00:45:09,310
this package will be will be burnt that

00:45:04,380 --> 00:45:12,670
each - PE something I don't know

00:45:09,310 --> 00:45:14,440
good question that I thought about it

00:45:12,670 --> 00:45:16,090
because you have like 200 packages you

00:45:14,440 --> 00:45:18,430
wouldn't have to and aversions yeah yeah

00:45:16,090 --> 00:45:23,410
like in like you know Linux days yeah I

00:45:18,430 --> 00:45:24,100
will look at that yeah thank you thank

00:45:23,410 --> 00:45:26,700
you I'm on you either

00:45:24,100 --> 00:45:26,700
it's thank you

00:45:31,970 --> 00:45:34,030
you

00:45:40,839 --> 00:45:42,900

YouTube URL: https://www.youtube.com/watch?v=Wp4u-SoJw1g


