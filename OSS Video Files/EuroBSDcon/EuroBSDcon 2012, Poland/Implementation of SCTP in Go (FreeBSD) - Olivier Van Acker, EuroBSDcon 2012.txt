Title: Implementation of SCTP in Go (FreeBSD) - Olivier Van Acker, EuroBSDcon 2012
Publication date: 2012-12-07
Playlist: EuroBSDcon 2012, Poland
Description: 
	EuroBSDcon 2012 
Warsaw, Poland 18-21 October
Captions: 
	                              thank you for attending my talk this                               talk is about I just finished my maths                               and food science and my dissertation                               topic was implementing or extending the                               goal library the network library with                               the HTTP protocol so this is what they                               stalk us about a short introduction I                               live in London I studied part time at                               birkbeck University and I've been                                working for broadcasting most of my                                working life and at the moment I'm                                working for a company who builds games                                for children so why freebsd so first                                actually a question who is familiar with                                the HTTP protocol ok a little bit more                                about HTTP protocol it's a transport                                layer protocol in the same layer as TCP                                and UDP and it's ten years old now and                                it's starting to get some traction Xin                                specific industries I will explain a                                little bit more later go who is familiar                                with go not that many again so goal is                                the new computer language invented set                                of created by people in them in google                                most notably can Thompson and Rob Pike                                are the main contributors to this                                language so okay so why previously first                                of all girl runs on freebsd so that's a                                good thing and the reference                                implementation of setp is mainly done on                                freebsd it's also done mainly on mac OS                                x and the demo or gif at the end of this                                talk will be on OS X                                  so first I will give an overview of                                assets be and go so everybody can get                                familiar what it actually is okay so the                                first thing with a ctp well it's a                                connection protocol and it's quite                                similar to TCP in that you can open a                                socket you can open a connection like                                with client and server but it's also                                very similar to UDP where you can                                actually just send a message to a server                                and that will open a connection for you                                to an sctp you don't really talk about                                like a sockets you have sockets but if                                you talk about connections and                                connecting from a server to a client of                                a former client or server you talk                                actually about associations so what is                                an association is it feasible not really                                ok so let's say this is the server and                                this is our clients the first thing you                                will notice if you create an sctp                                application is that you within a single                                connection you have this concept of                                streams so what does this mean so within                                a ctp you can actually send a specific                                data or all the data is message bounced                                like UDP but you can send it over a                                specific stream so if one stream of data                                loses some of the packages lots of stuff                                get resends like you're havin tcp and                                the problem is called the head of line                                blocking so with setp you can have like                                multiple data streams and if your data                                is not related to each other you send it                                over different streams and it will not                                block each other so that's one of the                                concepts of a ctp another thing which                                you will see immediately is that within                                one setp association you can have                                multiple network routes                                this was actually mainly done because of                                requests from the telephone industry who                                was not really happy with the failover                                capability of DCP there was thin ten                                years ago but another nice thing about                                asset via wat what I think is nice is                                that just like UDP you can have a single                                server with a single association of                                listening on a single association and                                multiple clients can connect to it so                                that's a very short overview of what                                ilysm so already mentioned is it's not                                in byte stream protocol it's in setp you                                have message boundaries just the same                                luck and UDP another thing which is I                                think worth mentioning is how the                                connection is set up if you compare it                                with TCP you get a sink and acknowledge                                and at the red dot resources get                                allocated in setp you first initialize                                then you get an acknowledge where the                                server will send some information the                                the client has to resend that and say                                I'm really I'm really why I say I am and                                then the resources get allocated and                                then the acknowledged gets sent back                                 this mechanism prevents a syn flood                                 attacks so a quick comparison with the                                 with TCP because they are very similar                                 if you look at the TCP socket API you                                 see over here socket bind lesson accepts                                 receives and close this for the surface                                 item if you look at the asset besides                                 you see socket bind lesson                                 and then receive message send message                                 and clothes first thing you notice is                                 that setting up a collect and connection                                 in setp is implicit so you don't have to                                 worry about it the other thing you                                 notice is that setp makes use of                                 received messages and send message these                                 are quite old system calls I think they                                 were introduced in bsd in one of the                                 first ones and receive and send message                                 why designed to actually send messages                                 together with ancillary data like                                 metadata about what you're sending to                                 the other side and setp actually makes                                 use of the mechanism to send a ctp                                 specific information via d system kassam                                 ok now the bird's eye view from go this                                 is going to be like really brief of you                                 what is possible and go but only we'll                                 talk about the things which are relevant                                 for this dark so the first thing you see                                 if you have variables is the first thing                                 you will see if it kind of has a cease                                 and texaco with the first thing you                                 always will eventually will notice is                                 that the type is after the name that's                                 one of the things another thing is that                                 go has pointers but it doesn't do                                 pointer arithmetic just to keep it                                 simple but keeping it simple is actually                                 one of the design philosophies of the                                 goal design team and then you have                                 various ways to create your variables                                 initialize that if you don't say                                 anything that always gets initialized to                                 zero so you don't have to think about it                                 and if you want specific value you can                                 say it like that                                 so let's have a look at the function one                                 of the things would go is that well it's                                 a normal function the type comes after                                 the name as i said before but the other                                 thing is this part is that functions in                                 go can have multiple return types so                                 what you see here so for example if the                                 count equals                                                             equal sign and then you can say you can                                 send an error back or otherwise the                                 greeting and then the error will be nil                                 so if you have this function you can                                 call this function like this so greeting                                 and then the error so the two variables                                 and they were they get initialized and                                 created by this symbol and then you can                                 see you can check for the error and or                                 you can just print the greeting if you                                 do if you're not interested in the error                                 because you know that I'll always go                                 crack correctly you can ignore it with                                 an engine in the score so in go you can                                 also have structures may have a type                                 struct and you put some variables in                                 there very straightforward if you want                                 to add a method to your structure you                                 don't define it within your structure                                 itself but outside you actually say                                 something like this you say I have a                                 function which is called say hello and i                                 want to add that to my person structure                                 when i just mentioned before and the                                 inputs of this method is a string                                 so go also has interfaces this is an                                 extremely simple implementation where we                                 have an animal interface we have a cat                                 object doesn't have anything in it and                                 we add the implementation of the talk                                 method is here you can see the tart                                 method is added to the to a cat object                                 and then we have a small program over                                 here which actually initialize a cat                                 object then the cat object talks and in                                 this one we create a variable of animal                                 type with the cat object which actually                                 then get cost to animal object and this                                 is like an animal object which talks                                 then again so there is much more with                                 the goal language the things i'm                                 actually not mentioning is goroutines                                 and channels which isn't mechanism to do                                 concurrency concurrency is actually                                 primitive built into the language itself                                 it's a bit like airline the other thing                                 i did mention is that our goal has                                 closures and another interesting thing                                 which is worth looking at it's slices                                 people say it's really nicely                                 implemented on the go website itself                                 there is like an interactive tutorial                                 takes                                                                   you have a very good idea what the                                 language can do ok so now a little bit                                 about the goal network library because                                 the problem I stated in my dissertation                                 is if I have the sctp protocol how well                                 will it fit into the existing go network                                 library and because conceptually as it                                 appears quite different from a TCP and                                 UDP but it's also quite similar so this                                 research was actually to find                                 out if it was possible to actually use                                 the existing library and extend it                                 instead of creating a whole new library                                 so but I first going to do is first                                 going to show you a very typical echo                                 what is it a client which just sends a                                 message with TCP hope people can read                                 this this is like package imports for                                 the net library and then we have a                                 function main and in here you see we do                                 a dial with the TCP protocol to                                 localhost this is the guy enter this                                 returns an error and a connection object                                 so if the error is no then oh this is a                                 lot of nice feature and go is that we                                 can actually already say beforehand that                                 we want to close the connection if it is                                 not needed anymore it's very useful if                                 you have multiple exit points in your                                 function you only have the state to                                 connect the close once you can do it                                 with all sorts with all different                                 functions or methods ok so that's the                                 clothes statement and then if the                                 message is received over if we have the                                 connection be right and message to it                                 which is like by terrain and hello world                                 so this is the most typical clients you                                 can do so all the old protocols in them                                 in go network library like Eunice                                 sockets UDP but well that's it actually                                 and TCP all use the same mechanism is                                 dial for the client side so now a quick                                 look how a server would catch this                                 message so what we see over here let's                                 first we create a lesson we do a lesson                                 which will create a lesson objects the                                 lesson actually does the creation of the                                 sockets the binding to it and the lesson                                 all-in-ones so the three system calls                                 are actually wrapped in this this one we                                 check for an error we create a buffer to                                 hold message and then we have like an                                 endless loop but we doing except for an                                 incoming connection once the connection                                 is there we read from the buffer i                                 repented that a tender meat start again                                 so very straightforward not that much                                 code personally I think it's very                                 readable with comparative see so a quite                                 like that so the next part of this talk                                 is about extending the goal networking                                 library with a ctp so if we then look                                 how a server should look like we we have                                 what we previously we saw the net dot                                 lesson which actually implement is                                 implementing the lesson interface in the                                 goal Network library and the lesson                                 interface is an interface for stream                                 oriented protocols so there's also a                                 lesson packet interface which is meant                                 for message based protocols like UDP and                                 in this case setp so what i did i took                                 that interface the lesson connection of                                 the lesson packet interface and start                                 implementing all the sctp methods so a                                 typical client should look like this                                 listen packets with a ctp protocol start                                 the lesson localhost also the same defer                                 close connection and there we making a                                 byte array and then be read from and                                 then printed out                                 so you can already see that actually is                                 extremely this is kind of the same but                                 use the same mechanism as any other                                 protocol and God would do if we want to                                 use more specific setp functionality for                                 example we want to know what the stream                                 ID is so you know which stream the data                                 is coming from or you want to look at                                 the association ID so you know where it                                 actually is coming from then you can do                                 a more specific goal which I added to                                 the sctp connection object and which                                 then does a read from setp and then it's                                 kind of an extension to read from but if                                 you look at the return values you have                                 much more specific as it to be                                 information coming back so for example                                 the SSID is then the stream ID and the a                                 ID is then the association ID so if you                                 are interested in that you use a more                                 specific goal so a typical server which                                 is more as it to be specific and makes                                 use more of the sctp functionality                                 itself would look like this first we                                 need to have like an sctp address object                                 which we create with this then we create                                 a connection object and this connection                                 object is not just a packet connection                                 object that isn't a ctp connection                                 object then we say lesson to a ctp see                                 more specific we say to that it be                                 protocol and then we say we give it the                                 address thing okay differ close and then                                 we go into the for loop before the                                 message and here you see the smtp                                 specific method read from setp and in                                 this case i'm only interested in the                                 stream ID                                 which are then print out together with a                                 message so now how I will explain how i                                 implemented it and I will only look at                                 the server itself because of time                                 constraints so we'll talk from where the                                 system calls and then all the way up so                                 if you look into go itself and in the                                 source code if you go all the way down                                 and then you look why I'll go actually                                 access the system calls you will at                                 certain point you will see some assembly                                 goats and that is actually delay between                                 the go language and colonel so these are                                 kind of very generic system calls but                                 you can actually say this is the system                                 call number i have and this these are                                 the param parameters i want to pass                                 through this system call and then you                                 get a return so of course not everything                                 is written in assembly if you don't look                                 a bit further into the go library and                                 specifically in the cisco library you                                 see a whole host of perl scripts these                                 perl scripts are actually used to                                 generate codes which can actually access                                 the system calls via the assembly code i                                 just show if you start adding but so                                 what i did was actually these build                                 scripts they look at header files and in                                 case of freebsd to the master cisco a                                 file or is it to scout master to                                 actually generate the system calls and                                 the corresponding goats so what I did                                 was actually adding the sctp had a false                                 and pointing to the right direction I                                 had to upgrade my freebsd kernel to the                                 latest version to be compatible with the                                 latest                                 ctp api which actually changed six                                 months ago quite dramatically and then                                 it started generated loads of these code                                 system calls and okay so what I also                                 need to do is adding the structures of                                 adding the structure for ancillary data                                 which sent messages and receives message                                 needs specific for HTTP it's kind of                                 done in the same way there are also                                 specific Perl scripts if the point into                                 the right direction you have to hand                                 code a little bit here and there and                                 then you get all the information you                                 need to have like a low level access to                                 the colonel so this is it would have                                 been better if this was like kind of a                                 sequence diagram but if you look at this                                 you see Cisco this is actually the                                 cessful towards the assembly code I                                 showed you and then on top of that you                                 do a cisco lesson that's kind of an and                                 a wrapper around the nicely generated of                                 the wrapper around how to generate the                                 code which is not very nicely doesn't                                 really nicely fit into the goal                                 philosophy it actually works between                                 safe pointers and not wait go point                                     you have to do some casting around and                                 then on top of that you do like an                                 internet socket call and then awesome                                 these are the other system calls which                                 are done I've put them to the side and                                 on top of that you see the lesson setp                                 which i showed you in the other example                                 and above that is then the lesson packet                                 so from an application developer                                 perspective you can start using the top                                 one or that one and all these underneath                                 it you can also use if you want to look                                 to do really specific things I think                                 that's one of the nice things with go                                 and how the network library is designed                                 that if you don't have not really                                 interested in the nitty gritty details                                 of a specific                                 protocol you can just go use the really                                 simple method but if you want to go                                 really specific you can go deeper and                                 deeper and deeper so okay so this is                                 done the same a                                                       lesson you had to read from where you                                 have the system call to the received                                 message you see the SIS receive message                                 it's a it's the number which corresponds                                 I think with the master says call number                                 freebsd and then it goes all the way up                                 and then more and more nice wrapper                                 around it and easier to use okay so now                                 i'm going to do a small demo session i                                 have to say this all these folds is if                                 they is available on my bed Berkut                                 account so that i've got a goal setp                                 which can be cloned and this boat this                                 will work on mac OS x and previously and                                 must be the latest version of freebsd                                 otherwise the system calls another not                                 correct                                 okay the nice thing with go is that you                                 can do the compilation and execution in                                 one step by saying go run so the part of                                 the demo so and the first thing you see                                 over here is that the dial it says the                                 protocol is not supported because this                                 is intentionally hello we really okay so                                 yet so this is intentionally because I                                 didn't load the driver think of this                                 like oh I've already compiled the                                 driving so so now we do the rim no                                 deserve so deserve is running now it's                                 actually almost the same as in the                                 example is only one difference this is                                 actually listening for a message and if                                 it gets the message it returns it                                 doesn't echo to the clients so we got an                                 answer for running over here now so we                                 go here so we do this is in their small                                 actually I can show to call may be used                                 it's bit more coding in there on the                                 slides what you see over here is you see                                 is it readable going well the function                                 but I send a message yeah I send a                                 message every one second and then wait                                 for the message you can see the rights                                 to and then the read from and then there                                 is like a for loop going on there so                                 let's run this one like appliance and if                                 we look at the server we see the server                                 over here receiving that message                                 actually I want to do it slightly                                 different because I want to say this                                 message is first and I ecv the first                                 message is being received by the server                                 and now to demonstrate the Association                                 kind of thing we gonna start and                                   seconds clients with measured seconds                                 and let's have a look what the service                                 and the service is receiving both                                 messages so the server is actually just                                 listening on one socket which is an                                 association and its receiving our                                 messages from two different lines                                 so so this implementation I've done so                                 far is actually a very basic                                 implementation is the kind of the                                 minimal implementation needed to                                 actually make stp work and go I'm                                 actually having plans for future work                                 one of the things I want to do is that                                 as it p is not available on all                                 platforms so it's not natively available                                 for example on Windows and what will be                                 is the things I don't know actually                                 quite sure but there are implementations                                 of setp running and use the land on top                                 of UDP so one of the things i want to do                                 in the next step is actually                                 implementing setp on top of UDP in goal                                 and then the wherever you whatever                                 platform you're using you can always use                                 the HTTP protocol in that way and                                 another thing what you want to do is                                 that go has this the go teens which have                                 channels and these channels communicate                                 with lightweight functions it's actually                                 kind of the Erlang metal a model of                                 concurrency where message get passed                                 from background poses to another one and                                 there used to be an library in gold                                 called the net gen library where these                                 channels could run over a network but                                 that's before the version of one of gold                                 that live we got pulled because Rob Pike                                 was not a happy with the implementation                                 now I'm think I'm not sure because I                                 have to actually implement it and build                                 it and prove it is that the concept of                                 streams is could easily be matched                                 conceptually to net channels so once                                 stream could be one net channel and I'm                                 thinking of actually building an                                 alternative for this net Chan library so                                 that                                 teens can start talking over a network                                 so that's actually the future of of them                                 what I want to do with my research so if                                 people are interested in my work there                                 are a wordpress Twitter on the bit                                 bucket I'm using because the goal                                 official go repository is using material                                 which is supported by bait buckets so my                                 implementation is on bitbucket I try to                                 keep up to date with the latest changes                                 of the official goal repository and on                                 my normal github account does all the                                 implementations are dead for my                                 dissertation all the examples you saw in                                 this slides and more bigger examples are                                 available for my github account if you                                 have any questions you want to try it                                 out you can always you email me and it's                                 my website ok so far this presentation                                 are there any questions                                 have you passed any of this back to the                                 folks at Google not yet I handed in my                                 dissertation three weeks ago and I                                 finish the paper for a night ripple a                                 conference but I was after that our land                                 send an email to didn't because I think                                 they would be interested in this what I                                 think I definitely hope so XD yeah I was                                 just wondering you using a receive                                 message right and if I justice class                                 that's the normal receive master Cisco                                 all right yeah that's gross wondering                                 how do you distinguish different water                                 that flows in these streams in the how                                 do you distinguish it out of your own                                 different sessions so if you have the                                 received message there is this message                                 header actually know the but you see in                                 that you have this message had a                                 structure in the received message and                                 this message has a structure you can                                 also add an eye of X structure and this                                 I of X structure is then used to put an                                 sctp structure in there which contains                                 all the information to distinguish                                 between associations of kind of another                                 things                                 and the other questions nope okay thank                                 you very much
YouTube URL: https://www.youtube.com/watch?v=0bsxjosoSoc


