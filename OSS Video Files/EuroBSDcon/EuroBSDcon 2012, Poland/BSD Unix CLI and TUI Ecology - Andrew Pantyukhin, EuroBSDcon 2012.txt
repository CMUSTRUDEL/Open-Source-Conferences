Title: BSD Unix CLI and TUI Ecology - Andrew Pantyukhin, EuroBSDcon 2012
Publication date: 2012-12-07
Playlist: EuroBSDcon 2012, Poland
Description: 
	EuroBSDcon 2012
Warsaw, Poland 18 - 21 October
Captions: 
	                              hello everyone so the the talk is or                               other                               topic of these d unix command line and                               text-based user interface equality we're                               simply down a bit it's just it although                               just clear calls you really piss text                               text based user interfaces basically                               ports clay and pots GUI and of course                               clear is usually bsd unix so what's that                                what's what am i talking about what's                                what's ecology what's what i mean when i                                say clay CLI is it what is it defined by                                is it defined by a terminal a specific                                device a specific specific bit of                                software that manages user input and the                                processes aid tools that you use when                                you use any clay or is it the process of                                software development that you're                                virtually doing in real time when using                                the interface or is it much more it it                                is it none of these or any of these but                                do we mean something more more whole and                                more general when we advocate common                                line user interface so i kind of I'm                                kind of fascinated with with the idea of                                simple interfaces but I'm also amazed at                                how few studies there or the raw about                                it when you google like all the sources                                you know you'll only get like maximum a                                few dozen studies and actually maybe                                half of those references will be                                patterns so actually this is a patent by                                IBM filed in                                                           later that basically patents patents                                command-line interface but they do it in                                relation to network devices but it's                                it's pretty much does so use a rain boot                                processing batching and                                and stuff so how about a little bit a                                tiny bit of history the comment line                                interface to the extent that we know it                                basically starts with this guy and this                                guy's name is Louis was on his french                                but he worked in the                                                   mighty on CT SS and it was a batch in                                system which obviously dealt with                                batches but he wrote this nifty little                                program called Ron calm for it which                                allowed uses to have this shell like                                interface that they could manage their                                task same and so everyone loved him this                                guy and the program because they threw                                this run chrome interface they could                                launch batches and they didn't have to                                wait overnight for them to stay up in                                the university they could just go home                                and the the manager will would solve the                                of the kind of problems and then next he                                n                                                                    multics team before going back to France                                and it was in that year when they when                                he was kind of toying with the rom-com                                principles and suggested them to the                                multics team and they all together they                                came up with the word the word shelf or                                race so that's the word the term was                                born there then and the multics team                                loved the concept so they adopted by the                                way the this luego is pretty interesting                                I don't know if Coco or anyone knows him                                personally but later in                                              working on the French internet sick Lord                                is watching                                employed invention of data grams packets                                and generally heavily influenced the in                                stuffs work on on the real internet when                                you speak about text user interface it                                comes down to this guy bill joy who                                invented VI in                                                         work on terminals bill had to invent                                this term cap dictionary sort of                                software dictionary for terminal                                capabilities that allowed him to easily                                pause the program to multiple or him or                                others to port this program to multiple                                different terminals before that terminal                                text user text based user interface were                                actually existing in other areas like on                                mainframes but it's just with this with                                with job camp the term curb and VI that                                it became possible to code something for                                like interactive interactive interaction                                interactive management of screen                                terminal and then it would work                                everywhere so that gives a punch or a                                boost and then there was this guy who                                can all-world who poured his pots of VI                                into separate library in                                            which was called curses it's actually                                 more correct with note that it's a                                 library and then every everyone started                                 using it and of course the first use for                                 it was was the rogue game then different                                 people started working on curses and                                 introducing more and more support for                                 for more and more terminals so the the                                 modern version                                 and Curtis named ncurses new curses was                                 born it's part of a new project in                                    and basically ever since is just more                                 support for much more terminals and                                 unicode support both so what I mean by                                 ecology how did that work getting to get                                 into the topic name so some time ago I                                 stumbled over this this very interesting                                 captivation field name ecological                                 interface design what is ecological                                 interface so most interfaces and most                                 most desert where a much design and most                                 interfaces are designed quite in an                                 unscientific way so let's take a quick                                 look at computer interfaces this is                                 zeros some                                                          course Steve Jobs came came by and his                                 Apple visa the first Apple Computer with                                 gray and then the this is windows                                    like                                                                  years later these came Boyd's Mac OS X                                 the most advanced operating system                                 system in the world as we know it now so                                 whatever                                 consumer i miss the world right but if                                 we look in this at this in a quick                                 succession then we kind of have a chance                                 to see that the progress that has been                                 made is quite quite little and it's it                                 would be a stretch to say that it will                                 be a stretch to suggest or you even                                 suspect that a team of real scientists                                 are set down in a room and looked at all                                 the data they have and kind of try to                                 construct a GUI in a very scientific and                                 mindful way it doesn't they the way                                 these interfaces look it doesn't suggest                                 that at least to me and I wrote here and                                 it's not just about computer interface                                 it's it's about any interface out there                                 if we're lucky we get some artistic                                 qualities about that like about them                                 like a sports car dashboard or of course                                 Hollywood movie computer interfaces like                                 this in Minority Report oil-based matrix                                 are always fascinating and very                                 interesting but in real world we we can                                 only look at the exceptions of the                                 bedroom and the exceptions are very very                                 rare for between this is a fighter jet                                  tastes a shuttle enterprise corpus                                 and nuclear power plant so the                                 exceptions are general relief military                                 space and very critical industries                                 mostly just nuclear power plant and it's                                 obvious it's obvious why because well                                 touch on that later but it's obvious why                                 the exceptions are what they are because                                 those are not consumer products and they                                 can't afford any mistakes to be made so                                 they virtually have to hire scientists                                 and to sit on on the designs and                                 interfaces                                 and come up with something foolproof but                                 usually we get like glue like this this                                 is thang khuu w jet w get all like                                 consumer products like this treadmill                                 which is it's not very positive reviews                                 when it gets the text interfaces they                                 they tend to be even less scientific I                                 they were first kept quite cool and                                 mindful thanks to severe limitations for                                 example well historically limitations                                 were quite severe starting with many old                                 manual control rooms and then to these                                 slow teletype machines early terminals                                 and of course we get to this which is                                 almost all mighty compared to all the                                 devices and when it comes to modern                                 terminals murder modern terminal                                 emulation modern computers they're so                                 fast that the quality of software and                                 user interfaces is now completely at                                 mercy of particular developers working                                 on new and old programs so most of this                                 even if it gets some thought most of the                                 designs currently is follows the                                 so-called parody of user-centered design                                 and what it is it's a very simple                                 paradigm which implies that actually                                 this explicit set of norms about it                                 which says that user centered design is                                 about predetermined fully defined                                 environment we understand who the user                                 raised were understand what all the                                 tasks or whenever they will be and there                                 are no exceptions so it's all it's all                                 the workflow is completely bounded to                                 something that will know before it                                 started                                 the user is involved in in the design                                 and actually each time we design we look                                 at the user with what he says explicitly                                 or knows about it and we iterate and                                 it's all about procedures so it's mostly                                 if you know all the tasks why do we need                                 separate tools when we can just provide                                 the buttons that are tied to all the                                 procedures that we know about so the                                 ecological interface design came about                                 as as an ipod great of that mindset and                                 it started with this guy named Kim sent                                 his work and he's still working at the                                 University of Toronto but in the late                                                                                               researchers from a few other                                 universities from across the world                                 chance Rasmussen was wall probably from                                 Sweden I don't remember but they kind of                                 joined forces there were some                                 researchers from Japan too and they                                 looked they what they had to do is was                                 to invent some ways to look at those                                 critical military space and other                                 industries to come up with something                                 more foolproof why because actually                                 defense agencies started looking for                                 researchers in universities to help them                                 with that by the way Apollo program was                                 the first one that really engaged a lot                                 of scientists to work on specifically                                 interfaces so they tried to the the the                                 looked at how numbers are located on a                                 keypad like do we start from like seven                                 eight nine and go down or the other way                                 around they experimented they tested                                 every possibility and they came up with                                 a scientific way to build a perfect                                 interface that this was in the late                                 eighties there was a critical mass of                                 researchers                                 willing to upgrade the field and so they                                 came up with this new ideology of                                 ecological interface design which was                                 more about complete which was standard                                 not have uses but workflows so they                                 analyzed work domain as opposed to                                 analyze in separate user tasks and                                 separate users they analyzed the whole                                 workflow domain and they focused on on                                 the cognitive part of of the control we                                 exert on machines knows the the kind of                                 key presses and button presses that some                                 designers might focus on like you know                                 let's get this buttons together but they                                 focused on how in our minds with process                                 interfaces and we can attempt to exert                                 control and build a mind mind based or                                 internal to all mines build maps of                                 interfaces that are much larger than                                 what we see visually and what what this                                 approach in Lord for was unanticipated                                 tasks because when you're in the fighter                                 jet or an Apollo program shuttlecraft or                                 or in a nuclear power plant most of the                                 dashboard functions before you are not                                 for anticipated tasks they are for                                 unanticipated tasks so you don't know if                                 you if you fly an f                                                  which model of a fighter jet with North                                 Koreans or Russians fly su or if you're                                 in a nuclear power plant you don't know                                 if it will be a tsunami or a failure in                                 in some or structural failure or                                 something else so it the these types of                                 interfaces are for unanticipated tasks                                 and is based on on the notion that some                                 systems are so complicated that users                                 can most even professionals can master                                 only partial understand                                 of the whole system of the whole of the                                 whole entirety of constraints and                                 complexity so users don't understand how                                 the systems work and they have to cope                                 very quickly with the very diverse sort                                 of emergency tasks that they can't                                 anticipate so that's the sort of                                 environment in your ideology was built                                 around and the the research in the field                                 it wasn't the fruits of the research                                 weren't specific to these emergency                                 emergency style interfaces in fact the                                 the error is so fascinated when when I                                 first stumbled upon it I immediately                                 recognized that the classic command-line                                 interface is a very good example of                                 ecological interface design why well                                 because obviously it focuses at least                                 when we when we look at FreeBSD based                                 system or any BS debate system it                                 focuses on instruments and empowering                                 you with these instruments for arbitrary                                 situations as opposed to fixed                                 procedures that that's what gooeys are                                 usually more biased to it's also the the                                 classic CLI also implies that we don't                                 understand the system completely it's                                 actually what it does it does a really                                 good job at progressive exposure of                                 different parts of the system to us so                                 we might meet start using a UNIX system                                 with just a few basic commands but will                                 then learn more and more and we feel                                 more important at each tah level we feel                                 in control and of course it's its                                 workflow based because it was from the                                 beginning designed even though it's not                                 about fixed procedures but what about                                 instruments from the beginning it was                                 around certain workflows if we take UNIX                                 it was about of well different file in                                 administrative filing workflows and what                                 they just did is find the right                                 abstracts in the workflow and                                 materialized them in form of simple                                 atomic commands another when speaking of                                 workflow workflow base design another                                 fascinating topic is a flow based                                 program in the some months ago I was                                 kinda quite tired of what we did like                                 most companies would develop software                                 and I was quite tired of looking as                                 programmers cope with the tasks that I                                 know if you if you look at current                                 modern and sort of enterprise coding                                 much about it just would tickle you the                                 wrong way because people people tend to                                 develop the same stuff over and over                                 again make the same mistakes and i was                                 just googling you know new paralegal                                 verdicts in software and then it was                                 recurrently redirecting me to flow based                                 program at programming and it was this                                 guy John Paul Morrison and                                          published a paper named data responsive                                 program in which he later renamed to                                 flow based programming and from then on                                 he was a huge advocate of it he is                                 actually Canadian and he convinced a                                 major Canadian bank to switch to this                                 kind of purging and actually starting in                                 the early                                                               keep forgetting its name because I guess                                 nobody cares to to know because it's                                 everywhere where flow based programming                                 is mentioned the Canadian bank is                                 mentioned as a major                                 Canadian bank and nevermind but it is a                                 it's real and this wish to disparaging                                 back then like                                                       still run the same the same framework                                 it's sufficient to fulfill all their                                 needs and the development is really                                 simple and when you look at the                                 principles of flow based programming                                 it's all about building these little                                 black box style sort of software which                                 is very versatile and very atomic in in                                 the conceptual sense and then what                                 happens is the program the program in                                 boils down to interconnect in all these                                 black boxes all these tools between each                                 other and when you look at it and if you                                 have enough experience with the codeine                                 shellcode then you instantly recognize                                 that that's exactly what you're doing                                 when you code bourne shell it feels                                 really natural because that's what we do                                 the real world we don't build everything                                 from scratch we have a lot of tools and                                 we just know how to interconnect them                                 would have people with we know which                                 information to pass back and forth it's                                 really addictive most people say like                                 well most people say that about Lisp                                 tubers with flow flow based programming                                 it's it's really it seems to be                                 addictive so there's a band kids in it                                 and unix shell is deported and I                                 instantly understood that really I've                                 been coding in in this fbp manner for                                 four years and that's why like any other                                 style of coding is a feels a bit                                 not natural to me so back to work so                                 cliff or for a while so what is it what                                 again is it defined by the basic objects                                 they are a terminal the terminal or any                                 of media device the interpreter and the                                 tools that you use through the                                 interpreter so if we look at terminals                                 which saw a few pictures a few minutes                                 ago but the the history the tirst                                 history of it of them is very simple so                                 from the start of electronic computers                                 in the                                                                 punch cards and basic teletypes and then                                 in                                                                                                                                            like                                                                   his class it was just seven hundred                                 dollars for a keyboard but it really                                 revolutionary revolutionized access to                                 computers and then                                                    came came up with this fascinating                                 series of terminals hardware terminal                                 starting with VT                                                      already quite quite kind of capable I it                                 ran                                                                      then the few years later VT horrid of                                 course and then in the                                              there was more and more computers with a                                 bitmap access to to their graphic cards                                 and screens so emulators started to                                 spring up here and there and just equate                                 for a quick look at the parallel                                 universe IBM was was so what what's                                 happening in the mainframe world world                                 which was all about terminals so it was                                 pretty straightforward and the                                 interfaces I assure you haven't changed                                 a bit in                                                              see today when you use the timeshare in                                 extensions for the the very latest                                 the very latest version of mainframe                                 operating systems address in IBM it's                                 say it's half command based half text                                 based user interface most interaction                                 happens through these texts user text                                 based user interface extensions which is                                 is pfds oh it's pretty straightforward                                 back to the real world so the with                                 terminals it's pretty straightforward so                                 emulators started springing up in the                                                                                                         interpreters we saw that we came up with                                 ron coleman                                                            multics shell and then it was a pretty                                 consistent history of of shell evolution                                 culminating with I think bourne shell                                 and sea shell during the years that PSD                                 was most actively developed in of course                                 if you're not using the shell by this                                 time you're doing something wrong but                                 it's not just about shells it's also                                 about simple shells like what we use in                                 freebsd for different boot stages like                                 put                                                                systems with mainframes but also                                 mainframe like systems like PP systems                                 PowerPC systems for enterprise they use                                 this Rex language which is quite a cane                                 and obsolete but it's going to pull like                                 and people love it and actually it's the                                 it has a huge open source community                                 about his dating back to                                              active today this power shell that I                                 think introduced the most the most                                 important introduction that Microsoft                                 did in PowerShell was structured                                 pipeline when they learned how to they                                 they introduce the function to                                 automatically serialize objects when you                                 build a pipeline of them otherwise it's                                 mostly based                                 on unix of course it has access to                                 different proprietary api's but they                                 took most of the inspiration from from                                 unix and of course there are well Ruby                                 Python and interpreters for actually                                 almost any other language any other                                 modern language and I know a lot of                                 programmers who a lot of quarters who                                 actually do most of their tasking in                                 let's say in an interactive Ruby shell                                 and it's not just about interpreting URI                                 but it's about it's also about how                                 exactly the input for example three or                                 four or maybe five years ago I switch to                                 VI mode on all my shells and think yeah                                 when when random people come up to to my                                 terminal and try to do something with it                                 they get slightly surprised but I tend                                 to think that it's more far more                                 efficient and obviously it's not just                                 just like the way you input data and                                 entities but also history management and                                 everything that helps you doing and the                                 most the most importance and the biggest                                 part of it all is of course the the                                 tools and components of the system but                                 the black boxes that we connect that we                                 build collections connections between                                 and the the major players in the area                                 was and or of course eunuchs which                                 bootstrapped and ignited the whole                                 process of this component development                                 and then BS do and glue of which i think                                 bsd played and in the possibly still                                 plays the the critical role because it                                 attracted it was the first to attract at                                 a critical time to attract a lot of                                 researchers from many universities                                 around the world and by virtue of coke                                 here and a few of his old pals to sift                                 through best innovations in common line                                 interface you                                 it is to sift through them and to merge                                 them into something much more usable                                 than the original unix much more usable                                 than the later do reincarnations very                                 clean and concise base based system                                 which we still enjoying in current BSD                                 systems then there was obviously new                                 which worked mostly from mon pages and                                 other documentation resources to win we                                 implement everything and basically what                                 what they were what kind of is obvious                                 about the utilities is they were happy                                 to say ok the common line come on line                                 switches are too short let's let's get                                 them longer and let's get more of them                                 in but the original concept across all                                 of of all of the three camps was of                                 course do one thing well for each                                 utility and by that version we get                                 flexibility will get interoperability                                 because no one steps on each other's                                 toes and they call all of the                                 interconnections between all of those                                 tools were text-based which was also                                 quite a advanced decision and very                                 virtuous decision because it's a lot so                                 much to be text is very versatile it's a                                 large so much innovation built to be                                 built around the concept so sooner or                                 later get out got to be the standard way                                 of processing common line arguments                                 mostly options and their parameters                                 there are still two main flavors of it                                 get up and get out long there are other                                 flavors grow in a growing number of them                                 unfortunately                                 all they do like most of them are                                 focused just on one or more of error                                 handling automatic usage passage                                 generation and casting of parameters to                                 correct values so mostly useless so I                                 did a quick get up started just some                                 crappy enough freebsd base the few                                 hundred get up calls and basically there                                 was just just about seven options / cool                                 meaning just about seven options / /                                 tool on average and the lodge                                 significant portion of that require                                 parameters which from i couldn't get the                                 hard data in time but from subjective                                 looking at base system scripts and the                                 scripts and histories in the wild only a                                 fraction of this is actually used in the                                 oil in the world so what's happening the                                 the other way to kind of extend the                                 other way to extend functionality is by                                 using the sub commands like we will get                                 OCS in the base in freebsd based system                                 which is commish is composed of several                                 program to like COI co check in check                                 out and then CVS and subversion and get                                 Capcom alone and instead of finding a                                 modular way to kind of introduce                                 themselves into the basic objects what                                 what is easier for them what makes sense                                 for them is to introduce the whole other                                 namespace so it's now CBS c IC vs                                   which makes sense but it actually                                 introduces some more complexity so what                                 i think is happening is a massive                                 specialization over both tools and the                                 options and parameters which invariably                                 leads to loss of concepts so if in there                                 regional and the classic bsd unix most                                 of the tools are almost conceptual so                                 there's no like tool to to copy files                                 from from hard drive to floor p is just                                 copy which does anything so it's very                                 close to concept but now what we get and                                 especially with                                                        ports is massive specialization so that                                 we get more and more utilities that are                                 focused on a very narrow desk and                                 there's no concept to describe that so                                 people it gets hard and recorded to                                 memorize them to draw the Dominion of of                                 these over special specialized tools I                                 found a few studies on comparing kleeto                                 GUI and text user interfaces one of them                                 said that they did acquire any                                 interesting stability they took if you                                 grew two groups of people they try to                                 teach one of them a text a common line                                 interface and they are the GUI based                                 interface and the both of the interfaces                                 did the very same thing I like control a                                 very simple process but this record                                 still required learning and it turned                                 out that people learned equal quickly                                 and remember it's equally well both of                                 these interfaces but this another study                                 that says that if you ask users                                 afterwards then they'll always prefer                                 GUI or most of them will because it                                 seems perceived ease of use and                                 perceived ease of learning is much                                 harder for visual interfaces although                                 it's not true altogether so learning is                                 like the real factual qualities are                                 similar by the perceived qualities for                                 for many people are much higher for                                 visual interfaces and just a few just a                                 couple other nodes that that you can be                                 cooperative command-line interfaces is                                 thinking about how they how they serve                                 you in emergency procedures like you                                 know backup what backup so when it comes                                 to when you really need to do something                                 to solve a very massive problem really                                 quickly subjectively again I think it's                                 much more efficient to get to the right                                 stuff whether it's login review or quick                                 fixes or quick script in with                                 command-line interfaces then then gooeys                                 and what's fascinating about it is that                                 the military solved the same problem                                 they everything everything they design                                 is about emergency procedures like what                                 happens when the nuke falls and                                 seatbelts are very closely related                                 because when you have emergency                                 procedures to do something very big very                                 quickly then you must make sure that you                                 don't make it you don't do it by mistake                                 or without meaning so that's why I think                                 you'll find sometimes that some programs                                 could be made it could be named are a                                 little bit closely like the first day I                                 mean literally they could their names                                 could be much more similar but on                                 purpose they were the the creator's                                 chose the names more distant from each                                 other not to allow people to mix the mom                                 and the other wisdom is something that i                                 would call Lempel Ziv naming LZ                                 compression is about finding the the                                 stuff that that that's most recurrent                                 most frequent and assigning the shortest                                 name to you so it's all about                                 classic UNIX you find whatever using the                                 most tends to be tends to have a very                                 short name and that allows if you if you                                 marry that two to the right names like                                 contractions of real worlds of real                                 words then you get instantaneous when                                 you're nicole retention because because                                 it all adds up even if the contraction                                 is very terse if it's really short that                                 means you use it very frequently and it                                 makes no effort for you to learn it if                                 it's slightly longer then it gets even                                 more similar to the original title of                                 the concept and so it's really easy to                                 to learn unix for most people so thanks                                 and this is kind of experimental or kind                                 of obscure and little covered topics so                                 if you want to kind of for the five to                                 three minutes that we have to discuss                                 any parts of it you're welcome if not                                 off to refreshments
YouTube URL: https://www.youtube.com/watch?v=eXgymkDNmes


