Title: Prometheus Community & The Ecosystem Meeting 2020-07-01
Publication date: 2020-07-01
Playlist: Prometheus Community & The Ecosystem Meetings
Description: 
	http://bit.ly/prometheus-community-agenda
Captions: 
	00:00:00,000 --> 00:00:05,040
hello everyone and fatherless verse

00:00:02,040 --> 00:00:08,280
Atticus and Amir host this is prometheus

00:00:05,040 --> 00:00:10,230
and worker system community call we

00:00:08,280 --> 00:00:13,530
follow Prometheus code of conduct here

00:00:10,230 --> 00:00:15,450
so please be nice to one another this is

00:00:13,530 --> 00:00:18,029
being recorded and will be published on

00:00:15,450 --> 00:00:20,460
youtube today we will be giving away

00:00:18,029 --> 00:00:22,560
Prometheus fact active participants in

00:00:20,460 --> 00:00:25,439
order to qualify you just need to ask a

00:00:22,560 --> 00:00:28,439
question our co-host Mathias will help

00:00:25,439 --> 00:00:31,800
us randomly pick a person at the end of

00:00:28,439 --> 00:00:33,739
the meeting also all that questions we

00:00:31,800 --> 00:00:36,750
we will go through questions at the end

00:00:33,739 --> 00:00:41,010
we have our quite a big agenda today so

00:00:36,750 --> 00:00:46,800
let's start with Prometheus Brian pick

00:00:41,010 --> 00:00:51,690
away yeah so when the next previous

00:00:46,800 --> 00:00:54,210
lease is reaches 220 and there is a few

00:00:51,690 --> 00:00:56,039
features to coming in there so there's

00:00:54,210 --> 00:00:57,270
two new service discoveries and it's

00:00:56,039 --> 00:00:59,820
been a while since we've had any heal

00:00:57,270 --> 00:01:04,650
ones and those are digital ocean and

00:00:59,820 --> 00:01:08,130
Tuckers warm he also had Marco who's

00:01:04,650 --> 00:01:10,380
wait the cortex return oh so I can never

00:01:08,130 --> 00:01:13,380
remember I also made it found a nice

00:01:10,380 --> 00:01:15,060
little optimization in some of our bit

00:01:13,380 --> 00:01:17,340
twiddling internals which will make pom

00:01:15,060 --> 00:01:21,930
QL a bit faster which is always nice and

00:01:17,340 --> 00:01:23,159
also then it was a new aggregation out

00:01:21,930 --> 00:01:25,110
of the previous which doesn't do

00:01:23,159 --> 00:01:27,600
anything you but will just help make

00:01:25,110 --> 00:01:33,030
certain accounts of counts more self

00:01:27,600 --> 00:01:35,640
documenting and the next release which

00:01:33,030 --> 00:01:39,720
you can always find in the release MD

00:01:35,640 --> 00:01:40,290
file inside Prometheus is on the 15th of

00:01:39,720 --> 00:01:42,360
this month

00:01:40,290 --> 00:01:45,270
so that's in two weeks time that's when

00:01:42,360 --> 00:01:51,930
it'll start and probably release about a

00:01:45,270 --> 00:01:54,720
week after that the next item I believe

00:01:51,930 --> 00:01:58,590
is also mine which is a problem code

00:01:54,720 --> 00:02:00,030
update so we don't know I managed call

00:01:58,590 --> 00:02:02,100
for papers and figuring out the schedule

00:02:00,030 --> 00:02:03,780
so we do currently have a rough schedule

00:02:02,100 --> 00:02:05,939
we're just clearing out exact dates

00:02:03,780 --> 00:02:08,849
hopefully that will all go online now

00:02:05,939 --> 00:02:10,739
yeah well today hopefully but we're

00:02:08,849 --> 00:02:13,800
looking at the same week as the original

00:02:10,739 --> 00:02:15,240
problem and it will be

00:02:13,800 --> 00:02:16,590
be a bit shorter than a normal profile

00:02:15,240 --> 00:02:18,870
I'm currently looking at spreading it

00:02:16,590 --> 00:02:21,090
out over three days and as usual people

00:02:18,870 --> 00:02:21,780
will be able to submit like who talks on

00:02:21,090 --> 00:02:23,580
the fly

00:02:21,780 --> 00:02:24,990
that's probably you're going to be a

00:02:23,580 --> 00:02:25,800
Google Form or something I've yet to

00:02:24,990 --> 00:02:28,050
figure it out

00:02:25,800 --> 00:02:39,360
but looking the usual places for

00:02:28,050 --> 00:02:41,850
information yeah so I think next up is

00:02:39,360 --> 00:02:47,190
prom label proxy moved to prometheus

00:02:41,850 --> 00:02:49,770
community not sure who added that I

00:02:47,190 --> 00:02:51,720
think Simon was going to talk about this

00:02:49,770 --> 00:02:54,290
because he did the majority of the work

00:02:51,720 --> 00:03:00,150
but I don't see him in the all right now

00:02:54,290 --> 00:03:02,900
actually if someone can promote him he's

00:03:00,150 --> 00:03:02,900
on the attendee list

00:03:07,940 --> 00:03:14,930
yeah okay sorry at some troubles with my

00:03:12,540 --> 00:03:19,080
resume settings

00:03:14,930 --> 00:03:23,550
yeah so premier web proxy is a project

00:03:19,080 --> 00:03:25,560
that started inside OpenShift so in the

00:03:23,550 --> 00:03:29,459
context of cube entities the idea is

00:03:25,560 --> 00:03:33,030
that you it allows to enforce the

00:03:29,459 --> 00:03:35,880
presence of certain levels in from QL

00:03:33,030 --> 00:03:39,030
expressions so say that you have a very

00:03:35,880 --> 00:03:41,190
simple expression like app where we for

00:03:39,030 --> 00:03:44,040
the app matrix and you you want to

00:03:41,190 --> 00:03:47,100
enforce that it's only for given

00:03:44,040 --> 00:03:49,590
namespace then prom labelled proxy will

00:03:47,100 --> 00:03:51,510
take that query inject the label

00:03:49,590 --> 00:03:53,190
selector that you defined in the

00:03:51,510 --> 00:03:56,940
configuration of chrome labelled proxy

00:03:53,190 --> 00:03:59,900
and it will forward that week that query

00:03:56,940 --> 00:04:03,420
to primitives directly so it's kind of a

00:03:59,900 --> 00:04:07,890
enforcement of what you can see which

00:04:03,420 --> 00:04:11,910
matrix in which query you can run in raw

00:04:07,890 --> 00:04:14,730
materials so as I said initially it was

00:04:11,910 --> 00:04:17,310
done for open but the need is not

00:04:14,730 --> 00:04:20,190
limited to that basically you can

00:04:17,310 --> 00:04:25,470
configure any label names that you want

00:04:20,190 --> 00:04:27,750
to enforce so yeah that's that's why we

00:04:25,470 --> 00:04:31,380
moved it to prometheus community because

00:04:27,750 --> 00:04:33,570
we felt it was useful not only for for

00:04:31,380 --> 00:04:36,050
our use case but more generally for

00:04:33,570 --> 00:04:40,500
people that want to have some kind of

00:04:36,050 --> 00:04:44,550
soft tenancy when accessing primitives

00:04:40,500 --> 00:04:48,300
metrics so initially it started for from

00:04:44,550 --> 00:04:50,820
QL queries but if you look at the at the

00:04:48,300 --> 00:04:55,050
project itself it has also been extended

00:04:50,820 --> 00:04:57,450
to support the rules API in primitive

00:04:55,050 --> 00:05:00,960
use the alerts appear in primitive same

00:04:57,450 --> 00:05:03,900
same principle it will enforce a certain

00:05:00,960 --> 00:05:09,330
value for a label and also the silence

00:05:03,900 --> 00:05:13,380
is in a lot manager API so quickly if

00:05:09,330 --> 00:05:16,910
you find it useful try it we are open to

00:05:13,380 --> 00:05:21,920
suggestions and improvement obviously

00:05:16,910 --> 00:05:24,720
yeah educate awesome thanks for the

00:05:21,920 --> 00:05:27,600
announcement yeah if if anyone has a

00:05:24,720 --> 00:05:32,310
question please put them either on our

00:05:27,600 --> 00:05:35,240
Google Doc or just zoom BAM and we will

00:05:32,310 --> 00:05:38,220
go through them at the end so next up is

00:05:35,240 --> 00:05:43,050
announcement about monitoring mix-ins

00:05:38,220 --> 00:05:44,430
but quickly quickly Chalian as some of

00:05:43,050 --> 00:05:47,220
the announcements from the ecosystem

00:05:44,430 --> 00:05:49,230
went quite long lastly I want to stress

00:05:47,220 --> 00:05:51,480
that everybody gets five like three to

00:05:49,230 --> 00:05:55,169
five minutes max so please keep it brief

00:05:51,480 --> 00:05:58,500
so everybody enough time for questions

00:05:55,169 --> 00:06:00,930
at the end thank you awesome

00:05:58,500 --> 00:06:04,350
yeah so Paolo if you can take away what

00:06:00,930 --> 00:06:07,050
the awesome it's a monitoring since this

00:06:04,350 --> 00:06:10,200
is a concept that we know for two years

00:06:07,050 --> 00:06:13,500
or so but till now the discoverability

00:06:10,200 --> 00:06:16,320
of new make sense was kind of hard you

00:06:13,500 --> 00:06:18,510
need to know wherever you are and if you

00:06:16,320 --> 00:06:23,310
want to use them you need to have a

00:06:18,510 --> 00:06:25,890
fairly good knowledge of JSON that so I

00:06:23,310 --> 00:06:28,500
created a website but it's mostly

00:06:25,890 --> 00:06:31,280
covering the default monitoring make

00:06:28,500 --> 00:06:36,150
sense and generating family producing me

00:06:31,280 --> 00:06:38,940
if you for generated already consumable

00:06:36,150 --> 00:06:40,980
make sense which is our district or

00:06:38,940 --> 00:06:45,150
controls and dashboards

00:06:40,980 --> 00:06:49,200
is already you can already see it at

00:06:45,150 --> 00:06:52,500
monitoring installed dev and I hope that

00:06:49,200 --> 00:06:55,800
if there will be new mix-ins coming in I

00:06:52,500 --> 00:06:59,820
will just be updating this currently

00:06:55,800 --> 00:07:06,360
it's a manual process but soon it will

00:06:59,820 --> 00:07:11,160
be automated awesome

00:07:06,360 --> 00:07:14,160
yeah let's move on on to supporting

00:07:11,160 --> 00:07:17,130
Forester low latency generation I think

00:07:14,160 --> 00:07:19,560
my job yeah that's mine yeah exactly so

00:07:17,130 --> 00:07:23,460
kind of like in the same room trying to

00:07:19,560 --> 00:07:29,040
make the chase mr. we do a bit more

00:07:23,460 --> 00:07:32,490
accessible so I during prank on this

00:07:29,040 --> 00:07:36,000
prompt to its SLO generator and so hard

00:07:32,490 --> 00:07:39,270
this has only been supporting generating

00:07:36,000 --> 00:07:44,190
the multi era burn rate alerts for

00:07:39,270 --> 00:07:47,130
errors and just last night essentially I

00:07:44,190 --> 00:07:52,440
finally merged the support to also be

00:07:47,130 --> 00:07:55,320
able to generate routes on like 99% of

00:07:52,440 --> 00:07:57,090
your requests need to be faster than I

00:07:55,320 --> 00:07:59,310
don't know one second for example if you

00:07:57,090 --> 00:08:02,820
have too many requests constantly that

00:07:59,310 --> 00:08:05,250
burn error budget in terms of like being

00:08:02,820 --> 00:08:08,610
too slow then you can alert on this as

00:08:05,250 --> 00:08:10,590
well and hopefully I can also soon push

00:08:08,610 --> 00:08:13,410
the combination of both which use

00:08:10,590 --> 00:08:15,750
histograms and kind of like the status

00:08:13,410 --> 00:08:18,210
code in histograms to actually get both

00:08:15,750 --> 00:08:20,880
of them like combined and a really cool

00:08:18,210 --> 00:08:24,510
scenario that actually if you're taught

00:08:20,880 --> 00:08:27,180
me a while back but so for now you can

00:08:24,510 --> 00:08:28,950
you can do that for for errors you can

00:08:27,180 --> 00:08:32,520
also now do it for Layton sees and

00:08:28,950 --> 00:08:35,970
hopefully it helps someone so give me a

00:08:32,520 --> 00:08:39,270
feedback and I will try to Tim proof on

00:08:35,970 --> 00:08:43,110
top of that going forward and that's

00:08:39,270 --> 00:08:43,740
kind of it so going further or going to

00:08:43,110 --> 00:08:48,120
the next topic

00:08:43,740 --> 00:08:52,680
that's the Thanos 0.13 release cool and

00:08:48,120 --> 00:08:54,870
that would be me so yeah some news from

00:08:52,680 --> 00:08:57,120
Thanos basically I think

00:08:54,870 --> 00:09:00,269
the newest release handed that is

00:08:57,120 --> 00:09:02,820
happening today so basically most

00:09:00,269 --> 00:09:04,860
important newsprint on us is basically I

00:09:02,820 --> 00:09:07,769
think Thomas native compound and his

00:09:04,860 --> 00:09:09,690
production ready I know have had folks

00:09:07,769 --> 00:09:11,670
has been running it for a while in

00:09:09,690 --> 00:09:14,190
production and they basically fixed a

00:09:11,670 --> 00:09:18,120
bunch of bugs and stuff like that so

00:09:14,190 --> 00:09:21,360
basically if you want to run panis sort

00:09:18,120 --> 00:09:22,920
of as monitoring metrics as a service

00:09:21,360 --> 00:09:25,910
kind of thing where you just push met

00:09:22,920 --> 00:09:30,839
your own metrics you can use receive

00:09:25,910 --> 00:09:33,540
usually people convert to receive

00:09:30,839 --> 00:09:36,899
component then we have like issues with

00:09:33,540 --> 00:09:39,930
our ton of cycle model and you have like

00:09:36,899 --> 00:09:41,430
a large number of plan aside cars and

00:09:39,930 --> 00:09:44,430
sort of you start getting those

00:09:41,430 --> 00:09:46,649
connection issues are basically long

00:09:44,430 --> 00:09:49,230
delays on like basically acquiring all

00:09:46,649 --> 00:09:51,899
the leaf nodes and basically tannaz

00:09:49,230 --> 00:09:55,079
network mesh so yeah definitely check

00:09:51,899 --> 00:10:00,449
out the basically receive if if it

00:09:55,079 --> 00:10:02,760
solves your use case yeah also we marco

00:10:00,449 --> 00:10:06,000
has added memcached matter and chunk

00:10:02,760 --> 00:10:09,899
caching amazing piece of work if you use

00:10:06,000 --> 00:10:13,350
memcache definitely try it also we fixed

00:10:09,899 --> 00:10:17,459
a bunch of car issues like some

00:10:13,350 --> 00:10:20,880
overlapping blocks deduplication bug

00:10:17,459 --> 00:10:23,699
also some performance improvements and

00:10:20,880 --> 00:10:28,050
on the last note we recently passed

00:10:23,699 --> 00:10:30,000
subserve ability due diligence review so

00:10:28,050 --> 00:10:34,649
which means that we are going to be

00:10:30,000 --> 00:10:37,199
continuing on to basically turn CF toc

00:10:34,649 --> 00:10:42,540
review and after that we might be moving

00:10:37,199 --> 00:10:44,940
on to basically changing our Ciencias

00:10:42,540 --> 00:10:49,110
stage basically promoting gazprom

00:10:44,940 --> 00:10:53,060
sandbox to incubation I will link you to

00:10:49,110 --> 00:10:55,889
the due diligence dark eye and Bartek

00:10:53,060 --> 00:11:00,079
basically brought if anybody is

00:10:55,889 --> 00:11:00,079
interested so yeah thank you

00:11:00,089 --> 00:11:02,149
you

00:11:03,090 --> 00:11:09,630
and our next topic I think is m3 to be

00:11:08,670 --> 00:11:15,080
release

00:11:09,630 --> 00:11:22,860
I don't believe Rob is on Bacall

00:11:15,080 --> 00:11:27,000
let me quickly check in the middle of

00:11:22,860 --> 00:11:30,030
the night for the I guess we can quickly

00:11:27,000 --> 00:11:33,230
read it if there's anything to read so

00:11:30,030 --> 00:11:36,060
there was a new release with M and 3db

00:11:33,230 --> 00:11:38,940
that comes with global Korea resource

00:11:36,060 --> 00:11:42,180
limits and multi-tenant readwrite Auto

00:11:38,940 --> 00:11:45,000
laid the headers sounds really cool so

00:11:42,180 --> 00:11:48,300
if you want to learn more I guess all we

00:11:45,000 --> 00:11:51,510
can do for now is redirect you to to the

00:11:48,300 --> 00:11:54,420
release notes and then hopefully in the

00:11:51,510 --> 00:12:00,030
next card you might be able to tell us a

00:11:54,420 --> 00:12:05,490
bit more again yeah awesome so next up

00:12:00,030 --> 00:12:08,490
is Karthik's newest release hi I'm Brian

00:12:05,490 --> 00:12:15,030
Boram I am the release Shepherd for a

00:12:08,490 --> 00:12:17,730
cortex 1.2 it's Samarco is gonna talk a

00:12:15,030 --> 00:12:20,880
little bit about the changes to the

00:12:17,730 --> 00:12:22,230
experimental test DB store where that

00:12:20,880 --> 00:12:25,980
was probably where the most change has

00:12:22,230 --> 00:12:28,200
happened and outside of that my favorite

00:12:25,980 --> 00:12:29,700
change is that it no longer prints all

00:12:28,200 --> 00:12:34,110
of the flags if you make up small

00:12:29,700 --> 00:12:35,910
mistake because we heard I don't know we

00:12:34,110 --> 00:12:40,350
had like more flags than there are atoms

00:12:35,910 --> 00:12:43,320
in the Sun or something like that so you

00:12:40,350 --> 00:12:46,230
used to used to annoy me that's my

00:12:43,320 --> 00:12:48,980
favorite change yeah a lot a huge number

00:12:46,230 --> 00:12:54,960
of you know bug fixes experiment

00:12:48,980 --> 00:12:57,600
incremental improvements it is built

00:12:54,960 --> 00:12:59,220
with go 1.14 which i think makes a

00:12:57,600 --> 00:13:03,300
little bit smaller a little bit faster

00:12:59,220 --> 00:13:06,020
and I shall turn over to Marco for his

00:13:03,300 --> 00:13:06,020
additions

00:13:06,790 --> 00:13:13,009
yeah so very quickly in the block

00:13:10,699 --> 00:13:15,680
storage er we backported the shared

00:13:13,009 --> 00:13:17,870
cache based on memcache T for metadata

00:13:15,680 --> 00:13:21,649
and chunks caching which we introduced

00:13:17,870 --> 00:13:24,069
in Tanis first and we've also introduced

00:13:21,649 --> 00:13:27,559
the limits in terms of maximum serious

00:13:24,069 --> 00:13:29,660
pertinent which we can ingest and keep

00:13:27,559 --> 00:13:32,209
in memory in the in jesters and maxi is

00:13:29,660 --> 00:13:35,600
a parametric name and in tenènte which

00:13:32,209 --> 00:13:39,379
were missing in the block storage and we

00:13:35,600 --> 00:13:41,509
one of the major probably changes are

00:13:39,379 --> 00:13:44,089
that we introduced a consistency check

00:13:41,509 --> 00:13:46,220
that we run at query time to make sure

00:13:44,089 --> 00:13:48,920
that all the expected blocks have been

00:13:46,220 --> 00:13:52,730
queried there because there may be some

00:13:48,920 --> 00:13:55,100
edge cases when do two blocks are

00:13:52,730 --> 00:13:57,740
starting or cured in the last few

00:13:55,100 --> 00:13:59,809
seconds we may actually miss the query

00:13:57,740 --> 00:14:02,480
some blocks through through the store

00:13:59,809 --> 00:14:05,990
gateways and basically what we want to

00:14:02,480 --> 00:14:08,660
do to have is guarantee correctness for

00:14:05,990 --> 00:14:11,600
each query and if this consistency check

00:14:08,660 --> 00:14:14,410
fail we try to refresh missing series

00:14:11,600 --> 00:14:16,790
from missing blocks across different

00:14:14,410 --> 00:14:19,879
store gateway sir based on the

00:14:16,790 --> 00:14:22,339
replication factor configured and if at

00:14:19,879 --> 00:14:24,920
the end of this process the consistency

00:14:22,339 --> 00:14:27,800
checks still fail we do fail the entire

00:14:24,920 --> 00:14:30,199
query and instead of returning partial

00:14:27,800 --> 00:14:34,279
results I'm not sure if Brian mentioned

00:14:30,199 --> 00:14:37,490
but today gossip support has been marked

00:14:34,279 --> 00:14:42,139
stable and I think those are the main

00:14:37,490 --> 00:14:48,079
changes awesome nice work

00:14:42,139 --> 00:14:50,929
next up is Prometheus operator yeah so

00:14:48,079 --> 00:14:53,540
Prometheus operator version zero 40 was

00:14:50,929 --> 00:14:57,980
released by Lily a couple of days ago

00:14:53,540 --> 00:15:00,620
and most notably if you if you just run

00:14:57,980 --> 00:15:02,300
one replica of the alert manager we

00:15:00,620 --> 00:15:07,240
finally disable the high availability

00:15:02,300 --> 00:15:09,259
mode because like it's just one replicas

00:15:07,240 --> 00:15:11,990
additionally there are a bunch of things

00:15:09,259 --> 00:15:15,259
for for the founder site Kara so we

00:15:11,990 --> 00:15:18,410
added a minimum time argument then

00:15:15,259 --> 00:15:19,990
there's now the possibility to actually

00:15:18,410 --> 00:15:22,200
set a script time

00:15:19,990 --> 00:15:24,400
globally we have configuration

00:15:22,200 --> 00:15:26,470
parameters so you don't need to do it

00:15:24,400 --> 00:15:27,850
her so this monitor is the way that I

00:15:26,470 --> 00:15:30,840
see this

00:15:27,850 --> 00:15:34,690
we also edit an enforced sample limit

00:15:30,840 --> 00:15:39,130
which again like globally enforces a

00:15:34,690 --> 00:15:41,500
sample limit for target and then last

00:15:39,130 --> 00:15:44,170
but not least we also added the ability

00:15:41,500 --> 00:15:47,110
to X cube roots from namespace labor

00:15:44,170 --> 00:15:48,730
enforcement so a bunch of things if you

00:15:47,110 --> 00:15:51,880
want to learn more again go to the

00:15:48,730 --> 00:15:55,630
release their own bodies and come and

00:15:51,880 --> 00:15:58,150
talk to us on github or the kubernetes

00:15:55,630 --> 00:16:01,470
lick in the prometheus operator channel

00:15:58,150 --> 00:16:05,440
actually so feel free to reach out

00:16:01,470 --> 00:16:25,420
awesome now we are moving on to

00:16:05,440 --> 00:16:35,200
questions the first one is we just

00:16:25,420 --> 00:16:37,900
wanted to engage having blocks to be

00:16:35,200 --> 00:16:43,510
compacted when considering deviations in

00:16:37,900 --> 00:16:45,310
colleges so working off memory here that

00:16:43,510 --> 00:16:49,020
number was just a number of fabian chose

00:16:45,310 --> 00:16:51,880
a few years of back so it's a number and

00:16:49,020 --> 00:16:54,370
like I'm not gonna claim this the right

00:16:51,880 --> 00:16:55,720
number but the concern is if you were to

00:16:54,370 --> 00:16:57,790
do it just because there was a single

00:16:55,720 --> 00:16:59,290
deletion of some single series you have

00:16:57,790 --> 00:17:02,500
to rewrite the entire block which is

00:16:59,290 --> 00:17:03,700
expensive at least for Prometheus and on

00:17:02,500 --> 00:17:05,230
the other hand if you don't delete

00:17:03,700 --> 00:17:07,990
things then it's going to use up this

00:17:05,230 --> 00:17:11,020
place so those are the trade-offs that's

00:17:07,990 --> 00:17:12,310
just a number of Prometheus chose if it

00:17:11,020 --> 00:17:16,900
is the wrong number we should change

00:17:12,310 --> 00:17:19,800
that but no one has ever complained does

00:17:16,900 --> 00:17:22,540
that answer your question yeah I just

00:17:19,800 --> 00:17:32,020
just promoted Gautam he said he actually

00:17:22,540 --> 00:17:33,370
chose that yeah it's just a number that

00:17:32,020 --> 00:18:16,710
we chose

00:17:33,370 --> 00:18:21,850
Brian said like so if you thanks

00:18:16,710 --> 00:18:23,220
perfectly okay with that we can move on

00:18:21,850 --> 00:18:28,170
to the next question

00:18:23,220 --> 00:18:31,000
so it says hi I'm a software developer

00:18:28,170 --> 00:18:33,850
intern from AWS I'm going to implement

00:18:31,000 --> 00:18:35,380
it plus prometheus exporter for open

00:18:33,850 --> 00:18:37,660
telemetry we have a question about the

00:18:35,380 --> 00:18:41,200
HTTP server support in Java and Python

00:18:37,660 --> 00:18:43,840
open telemetry prometheus exporter do

00:18:41,200 --> 00:18:45,940
not have an HTTP server inside and they

00:18:43,840 --> 00:18:49,120
make use of the server provided by the

00:18:45,940 --> 00:18:50,770
Prometheus client for Noches and go on

00:18:49,120 --> 00:18:52,900
the other hand they support HTTP

00:18:50,770 --> 00:18:54,850
endpoints inside the exporter what is

00:18:52,900 --> 00:18:58,300
the best practice for supporting the

00:18:54,850 --> 00:19:00,880
HTTP server from the Prometheus

00:18:58,300 --> 00:19:04,240
perspective we notice that C++

00:19:00,880 --> 00:19:06,130
Prometheus clan also has an exposure

00:19:04,240 --> 00:19:08,050
class to work as a server do you

00:19:06,130 --> 00:19:12,160
recommend using these hos a class

00:19:08,050 --> 00:19:14,950
directly this sounds like a bit too

00:19:12,160 --> 00:19:19,540
specific a question I'd have to actually

00:19:14,950 --> 00:19:22,870
dig into the code and so in general the

00:19:19,540 --> 00:19:24,790
King is that it depends on the language

00:19:22,870 --> 00:19:27,730
as to fighter a client libraries way to

00:19:24,790 --> 00:19:29,440
have HTTP server so though happens to be

00:19:27,730 --> 00:19:31,600
designed that it basically comes with a

00:19:29,440 --> 00:19:34,000
HTTP server out of the box so there's no

00:19:31,600 --> 00:19:36,280
need for don't kind to do anything in

00:19:34,000 --> 00:19:38,380
the case of Java requires a bit of work

00:19:36,280 --> 00:19:41,770
to hook one together so it has one

00:19:38,380 --> 00:19:44,980
piping yeah there's also one kind of

00:19:41,770 --> 00:19:46,000
included C++ I'd have to check which C++

00:19:44,980 --> 00:19:47,080
files because I know there's at least

00:19:46,000 --> 00:19:49,989
two room out there

00:19:47,080 --> 00:19:52,119
and it probably just depends on your

00:19:49,989 --> 00:19:53,529
preferences but I would presume if

00:19:52,119 --> 00:19:56,769
you're writing an export or you need an

00:19:53,529 --> 00:19:59,259
HTTP server somewhere so use whatever

00:19:56,769 --> 00:20:00,970
framework you normally use for HTTP

00:19:59,259 --> 00:20:02,679
stuff and just make sure it works

00:20:00,970 --> 00:20:04,840
without ever client like you're using

00:20:02,679 --> 00:20:07,659
I can't unfortunately a better advice

00:20:04,840 --> 00:20:09,279
without looking at the code also one

00:20:07,659 --> 00:20:12,129
note regarding open telemetry

00:20:09,279 --> 00:20:15,340
specifically as far as I know the main

00:20:12,129 --> 00:20:18,029
collecting is still deltas which means

00:20:15,340 --> 00:20:21,249
you can run into timing issues once you

00:20:18,029 --> 00:20:25,379
recalculate this into into counters so

00:20:21,249 --> 00:20:25,379
just be aware of that pitfall

00:20:26,700 --> 00:20:31,870
okay perfect where where's the best to

00:20:30,130 --> 00:20:35,560
follow up on that I guess like sending

00:20:31,870 --> 00:20:37,930
email to the Prometheus users we just

00:20:35,560 --> 00:20:39,730
developers missed I guess no it's just

00:20:37,930 --> 00:20:41,680
sort of question it's like how do i hook

00:20:39,730 --> 00:20:43,390
into the HTTP server did generalize rays

00:20:41,680 --> 00:20:48,120
make it work however you need to make it

00:20:43,390 --> 00:20:53,020
work it's a good answer for sure okay

00:20:48,120 --> 00:20:55,750
yeah yeah so we have a question from Rob

00:20:53,020 --> 00:20:58,240
batting from and 3db our folks open to a

00:20:55,750 --> 00:21:01,330
new prometheus 3d API that performs

00:20:58,240 --> 00:21:04,390
streaming responses consumable by spark

00:21:01,330 --> 00:21:06,250
Presta also may need to think not just

00:21:04,390 --> 00:21:09,430
about reading but also supply at least

00:21:06,250 --> 00:21:11,920
some rudimentary functions like at least

00:21:09,430 --> 00:21:13,330
rated increased since sequel doesn't

00:21:11,920 --> 00:21:15,550
have an easy way to perform those

00:21:13,330 --> 00:21:17,950
operations and analytics becomes

00:21:15,550 --> 00:21:25,600
difficult if you can sum up counts in a

00:21:17,950 --> 00:21:27,370
time window so I can try search it is

00:21:25,600 --> 00:21:29,380
like just not enough detail to answer

00:21:27,370 --> 00:21:34,390
this particularly because I don't know

00:21:29,380 --> 00:21:36,520
what spark impress to consume so like we

00:21:34,390 --> 00:21:38,590
already support some streaming inserts

00:21:36,520 --> 00:21:39,940
of the real read endpoint but that is

00:21:38,590 --> 00:21:43,870
raw data so it's not going to have

00:21:39,940 --> 00:21:46,420
queries so I'm going to guess this is a

00:21:43,870 --> 00:21:48,610
guess that you're looking over time

00:21:46,420 --> 00:21:50,500
windows in which case write some form of

00:21:48,610 --> 00:21:53,470
adapter that those multiple query ranges

00:21:50,500 --> 00:21:54,880
and feed it in and if you're trying to

00:21:53,470 --> 00:21:56,950
do it series by series rather than

00:21:54,880 --> 00:22:00,340
overtime that would require a new API of

00:21:56,950 --> 00:22:02,620
some form and I personally would prefer

00:22:00,340 --> 00:22:05,070
me you know use the existing API is that

00:22:02,620 --> 00:22:07,960
our day a rather than you know adding

00:22:05,070 --> 00:22:09,520
well analytics specific stuff there

00:22:07,960 --> 00:22:13,240
because per media can provide the raw

00:22:09,520 --> 00:22:14,830
data in these two ways already and built

00:22:13,240 --> 00:22:17,290
on top of - but I think this kind of

00:22:14,830 --> 00:22:18,730
needs more detail to know exactly what

00:22:17,290 --> 00:22:21,970
we currently have and what it doesn't

00:22:18,730 --> 00:22:25,920
doesn't provide because I would suspect

00:22:21,970 --> 00:22:28,870
we probably have what's already needed

00:22:25,920 --> 00:22:32,050
yeah I feel I feel kind of similar I I

00:22:28,870 --> 00:22:36,790
would suggest that maybe right kind of

00:22:32,050 --> 00:22:39,879
the shittim first and if if what you

00:22:36,790 --> 00:22:42,069
need if the existing API stoned or

00:22:39,879 --> 00:22:44,979
you support everything that you need and

00:22:42,069 --> 00:22:48,579
I think that's kind of discussable right

00:22:44,979 --> 00:22:50,199
but there's there's a number of systems

00:22:48,579 --> 00:22:52,329
that would want to integrate with

00:22:50,199 --> 00:22:54,249
prometheus and it doesn't really make

00:22:52,329 --> 00:22:56,409
sense to integrate with all of them we

00:22:54,249 --> 00:22:58,659
have an API but if it doesn't that

00:22:56,409 --> 00:23:00,609
doesn't provide the functionality

00:22:58,659 --> 00:23:03,459
required for these systems then there's

00:23:00,609 --> 00:23:05,499
something that can be discussed whatever

00:23:03,459 --> 00:23:08,309
an addition might look like wouldn't

00:23:05,499 --> 00:23:10,539
that need to be discussed obviously but

00:23:08,309 --> 00:23:25,659
yeah that's the that's the way that I

00:23:10,539 --> 00:23:27,759
was awesome so next one is I'm also an

00:23:25,659 --> 00:23:29,349
intern working on open telemetry and I'm

00:23:27,759 --> 00:23:31,629
working on an expert on that since they

00:23:29,349 --> 00:23:34,539
tie directly to a remote storage in the

00:23:31,629 --> 00:23:37,419
process I reference the configuration of

00:23:34,539 --> 00:23:39,849
remote right and notice relabeling can

00:23:37,419 --> 00:23:41,349
be done during the remote right and the

00:23:39,849 --> 00:23:43,539
central a building is useful when

00:23:41,349 --> 00:23:45,909
scraping so what's the use case when

00:23:43,539 --> 00:23:47,589
writing is it used to provide

00:23:45,909 --> 00:23:49,179
information to the storage back-end or

00:23:47,589 --> 00:23:53,109
has it something to do with the

00:23:49,179 --> 00:23:54,249
internals of prometheus so the reason

00:23:53,109 --> 00:23:56,649
that I added

00:23:54,249 --> 00:23:58,209
relabeling to remote right so I can in

00:23:56,649 --> 00:24:02,259
fact that readings everywhere you cannot

00:23:58,209 --> 00:24:04,869
escape it hahaha is so that if you only

00:24:02,259 --> 00:24:06,999
want to send a subset of metrics to the

00:24:04,869 --> 00:24:08,739
remote endpoint like if you don't want

00:24:06,999 --> 00:24:11,169
to send everything but just want to send

00:24:08,739 --> 00:24:13,690
things for recording rules you can use a

00:24:11,169 --> 00:24:16,149
keep action to do that the actual

00:24:13,690 --> 00:24:18,729
replace action I am what hope is not

00:24:16,149 --> 00:24:21,339
used much and but basically it's so you

00:24:18,729 --> 00:24:23,259
can restrict what wash time series are

00:24:21,339 --> 00:24:26,889
actually centered on storage that's its

00:24:23,259 --> 00:24:30,940
primary purpose we actually make use of

00:24:26,889 --> 00:24:34,749
this exact use case so we're happy that

00:24:30,940 --> 00:24:36,729
it's there for this exact reason yeah I

00:24:34,749 --> 00:24:39,399
think one of the use cases for replace

00:24:36,729 --> 00:24:41,579
was anonymizing using the modulus

00:24:39,399 --> 00:24:41,579
function

00:24:45,519 --> 00:24:52,309
cool I think that's that answer to a

00:24:49,070 --> 00:24:55,940
question we have a next question from

00:24:52,309 --> 00:24:57,820
Ben do you wanna go ahead and ask sure

00:24:55,940 --> 00:25:01,809
so there's been a couple of different

00:24:57,820 --> 00:25:04,990
posts on the mailing list about the

00:25:01,809 --> 00:25:08,269
interaction between the storage size

00:25:04,990 --> 00:25:09,679
blocks and the ore that the storage

00:25:08,269 --> 00:25:16,309
space for tension in the time-based

00:25:09,679 --> 00:25:19,009
retention and with long storage

00:25:16,309 --> 00:25:23,720
retentions and block or longer block

00:25:19,009 --> 00:25:25,940
sizes you can end up in a case where too

00:25:23,720 --> 00:25:31,490
many compactions happen and now you've

00:25:25,940 --> 00:25:34,220
got a short time window but a long but

00:25:31,490 --> 00:25:37,879
you can compact it like 30 or 40 percent

00:25:34,220 --> 00:25:40,429
of your data and then the stock size

00:25:37,879 --> 00:25:41,659
based retention kicks in and deletes a

00:25:40,429 --> 00:25:42,200
huge chunk of data that you weren't

00:25:41,659 --> 00:25:46,850
expecting

00:25:42,200 --> 00:25:49,369
and also so I was thinking maybe we

00:25:46,850 --> 00:25:53,360
should unhide the max block duration to

00:25:49,369 --> 00:25:58,460
allow easier tuning of the of the of the

00:25:53,360 --> 00:26:01,730
block size also this is a standard tag a

00:25:58,460 --> 00:26:06,409
flag panel uses to make the max block

00:26:01,730 --> 00:26:08,899
size match the min block size yeah I'd

00:26:06,409 --> 00:26:11,659
really prefer it didn't do but it's a

00:26:08,899 --> 00:26:14,200
provide context the min and max block

00:26:11,659 --> 00:26:17,869
Flags exist for basically no testing of

00:26:14,200 --> 00:26:20,269
radius yet but they are also extremely

00:26:17,869 --> 00:26:23,480
useful for other situations so it's not

00:26:20,269 --> 00:26:25,999
give me a second to explain so they just

00:26:23,480 --> 00:26:29,990
for that and most users attempting to

00:26:25,999 --> 00:26:30,889
change min are basically tying

00:26:29,990 --> 00:26:33,909
themselves into nuts

00:26:30,889 --> 00:26:37,429
so now indicates this particular issue

00:26:33,909 --> 00:26:39,379
just thinking about it there I think we

00:26:37,429 --> 00:26:41,179
should try to find something that solves

00:26:39,379 --> 00:26:43,999
this without the users having to do pass

00:26:41,179 --> 00:26:45,619
an additional flag like we can be smart

00:26:43,999 --> 00:26:47,809
enough but the problem is that they're

00:26:45,619 --> 00:26:50,179
independent but like one of the things

00:26:47,809 --> 00:26:52,609
we do is that the max block size under

00:26:50,179 --> 00:26:57,620
covers is set to whichever is the

00:26:52,609 --> 00:27:00,620
smaller of about 21 days and 10% of the

00:26:57,620 --> 00:27:03,440
em time range which is actually a

00:27:00,620 --> 00:27:07,430
suggestion van hi and we could probably

00:27:03,440 --> 00:27:10,040
do something smart making sure that no

00:27:07,430 --> 00:27:11,390
block ends up more than 10% of the size

00:27:10,040 --> 00:27:13,280
it would probably have to be in the TS

00:27:11,390 --> 00:27:14,510
DB or something we could probably do

00:27:13,280 --> 00:27:16,400
something to make sure that basically

00:27:14,510 --> 00:27:19,070
hey this block would be bigger than 10%

00:27:16,400 --> 00:27:21,740
but the only issue here actually is the

00:27:19,070 --> 00:27:24,320
tombstones but five presents we can live

00:27:21,740 --> 00:27:28,190
with so like I would suggest we look

00:27:24,320 --> 00:27:30,110
into - Rotterdam and you know make me

00:27:28,190 --> 00:27:33,650
ten percent of your total storage that

00:27:30,110 --> 00:27:35,120
seems fine and like it's not after

00:27:33,650 --> 00:27:37,370
database which is what these uses are

00:27:35,120 --> 00:27:38,720
ring into and that way it just works

00:27:37,370 --> 00:27:42,590
with no additional configuration which

00:27:38,720 --> 00:27:44,390
will be nice one

00:27:42,590 --> 00:27:48,710
one thing I proposed a while ago was

00:27:44,390 --> 00:27:54,800
actually changing the the 10% to 5% so

00:27:48,710 --> 00:27:59,390
for example 21 days is 5% of 365 days so

00:27:54,800 --> 00:28:01,840
by lowering that max we reduced the

00:27:59,390 --> 00:28:06,710
number of very very early compactions

00:28:01,840 --> 00:28:10,790
for smaller databases so if you've got

00:28:06,710 --> 00:28:13,809
say a 30 day retention we don't end up

00:28:10,790 --> 00:28:16,490
compacting a 21 day block in a in a 30 I

00:28:13,809 --> 00:28:18,500
think I think that would happen I'm

00:28:16,490 --> 00:28:23,179
trying to remember what the if you have

00:28:18,500 --> 00:28:26,090
like a moderate-sized time retention

00:28:23,179 --> 00:28:29,780
like 30 or 60 days you'll end up with 21

00:28:26,090 --> 00:28:33,620
day blocks and that might be too many -

00:28:29,780 --> 00:28:37,280
too much retention so reducing from 10%

00:28:33,620 --> 00:28:40,580
to 5% might help with this no no so it's

00:28:37,280 --> 00:28:43,429
10% at a time so if you have turkey day

00:28:40,580 --> 00:28:45,860
1 for example end up with a 3 day max

00:28:43,429 --> 00:28:48,970
block size because that's how the math

00:28:45,860 --> 00:28:52,010
works oh yeah I don't think that change

00:28:48,970 --> 00:28:53,990
it doesn't work that way so maybe you're

00:28:52,010 --> 00:28:59,179
talking about something else maybe it's

00:28:53,990 --> 00:29:02,360
more it it helps with like mmm more

00:28:59,179 --> 00:29:05,320
medium range like 90 day yeah that would

00:29:02,360 --> 00:29:08,690
be 9 days but actually fine still yeah

00:29:05,320 --> 00:29:10,790
yeah I think that guys feast in order to

00:29:08,690 --> 00:29:11,600
conversations other t-sne stuff realized

00:29:10,790 --> 00:29:14,210
that one of the reasons

00:29:11,600 --> 00:29:16,429
we changed previous ones reaches to was

00:29:14,210 --> 00:29:18,500
too juiced how many time through your at

00:29:16,429 --> 00:29:20,809
the data because the previous one design

00:29:18,500 --> 00:29:23,390
would rewrite at ten times and also in

00:29:20,809 --> 00:29:26,000
ways that required tons of ions it turns

00:29:23,390 --> 00:29:27,890
out preaches to is current Eurasian

00:29:26,000 --> 00:29:31,070
tanks thirteen times so we kind of

00:29:27,890 --> 00:29:32,360
missed that goal so like one of the

00:29:31,070 --> 00:29:34,820
things you might want to do is right now

00:29:32,360 --> 00:29:36,620
we always take two blocks and merge them

00:29:34,820 --> 00:29:38,900
into one and I think one of the things

00:29:36,620 --> 00:29:40,640
Tom mentioned in the past was we should

00:29:38,900 --> 00:29:42,919
be using four because a party that's

00:29:40,640 --> 00:29:45,289
optimal Purdue research so maybe that's

00:29:42,919 --> 00:29:47,900
something else to look at and cuz that

00:29:45,289 --> 00:29:49,880
would also you know save all the

00:29:47,900 --> 00:29:51,650
rewrites and not take out SSDs although

00:29:49,880 --> 00:29:54,320
nowhere near as bad as greatest one did

00:29:51,650 --> 00:29:55,850
cuz turn that modern SSDs don't give as

00:29:54,320 --> 00:30:01,820
much life as you think before should

00:29:55,850 --> 00:30:03,799
leave nano see so it it seems like there

00:30:01,820 --> 00:30:07,490
are a couple of use cases that are worth

00:30:03,799 --> 00:30:10,460
covering and some of them seem to happen

00:30:07,490 --> 00:30:13,669
to be solvable with the flag but not

00:30:10,460 --> 00:30:16,549
necessarily it doesn't necessarily align

00:30:13,669 --> 00:30:18,289
with kind of a jig way so I would

00:30:16,549 --> 00:30:20,510
suggest that we can maybe move this to

00:30:18,289 --> 00:30:23,090
the developers mailing list and discuss

00:30:20,510 --> 00:30:26,090
a little bit further I think this the

00:30:23,090 --> 00:30:28,909
use case is sound but the strategy kind

00:30:26,090 --> 00:30:32,120
of needs to be discussed yeah that

00:30:28,909 --> 00:30:34,580
sounds good yeah yeah in general let's

00:30:32,120 --> 00:30:46,070
avoid adding flags for things if we can

00:30:34,580 --> 00:30:50,120
we don't have to so the next person like

00:30:46,070 --> 00:30:52,280
I think it's being mix in there and

00:30:50,120 --> 00:30:54,020
prone to its death work together are

00:30:52,280 --> 00:30:56,210
they intended to be used together or are

00:30:54,020 --> 00:30:57,679
those two completely separate approaches

00:30:56,210 --> 00:30:59,450
that would also say independent from

00:30:57,679 --> 00:31:01,460
each other would be great to generate

00:30:59,450 --> 00:31:03,740
also dashboards out of the rules from

00:31:01,460 --> 00:31:07,070
the pro mathilde from e prompt who it's

00:31:03,740 --> 00:31:12,370
def rules so the first part of the

00:31:07,070 --> 00:31:15,740
question may be yes for the first part

00:31:12,370 --> 00:31:17,799
prometheus tools dev is for generation

00:31:15,740 --> 00:31:21,530
part where you can use it to generate

00:31:17,799 --> 00:31:24,340
alerts based on your s follows or rules

00:31:21,530 --> 00:31:26,799
and as for monitoring mix and stuff this

00:31:24,340 --> 00:31:29,679
is only the presentation part where you

00:31:26,799 --> 00:31:32,980
already have created some mix in and

00:31:29,679 --> 00:31:36,250
want to present it in the directed form

00:31:32,980 --> 00:31:39,190
so those are two separate separate

00:31:36,250 --> 00:31:41,520
projects they can work together if you

00:31:39,190 --> 00:31:44,440
create something and add it over and

00:31:41,520 --> 00:31:45,700
they're not evenly different approaches

00:31:44,440 --> 00:31:48,400
they are basically for something

00:31:45,700 --> 00:31:51,610
different as for the second part what

00:31:48,400 --> 00:31:53,500
yes I think is yeah yeah so yeah like

00:31:51,610 --> 00:31:56,200
that that's exactly how I see it as well

00:31:53,500 --> 00:32:00,789
and so essentially the SLO lab sonnet is

00:31:56,200 --> 00:32:04,750
a library as like a sauna is basically

00:32:00,789 --> 00:32:08,200
Jason the library so like any mixin can

00:32:04,750 --> 00:32:10,149
import the SLO sonnet library and make

00:32:08,200 --> 00:32:12,899
use of that to generate like for the

00:32:10,149 --> 00:32:18,220
specific application routes and it works

00:32:12,899 --> 00:32:20,200
for for that use case right so um the

00:32:18,220 --> 00:32:21,970
the wacky I that I build is just like

00:32:20,200 --> 00:32:24,309
some ad hoc like you want to like maybe

00:32:21,970 --> 00:32:26,620
try something out or you like you you

00:32:24,309 --> 00:32:28,059
don't want like the folio Jason approach

00:32:26,620 --> 00:32:32,710
and just copy paste something into your

00:32:28,059 --> 00:32:35,380
stack so definitely like I think there

00:32:32,710 --> 00:32:37,720
are some make sense already using this I

00:32:35,380 --> 00:32:39,279
think yeah I try I started using it in

00:32:37,720 --> 00:32:41,710
the kubernetes Nixon but then for the

00:32:39,279 --> 00:32:43,210
API so I went super specific so I

00:32:41,710 --> 00:32:46,539
removed it again because it was too

00:32:43,210 --> 00:32:49,029
specific but yeah like generally it is

00:32:46,539 --> 00:32:52,240
intended to be included and basically

00:32:49,029 --> 00:32:54,520
all the mix-ins out there and for the

00:32:52,240 --> 00:32:57,190
generating dashboards that's something

00:32:54,520 --> 00:32:59,590
that I pretty much already put in it

00:32:57,190 --> 00:33:02,200
just needs more dashboards more panels

00:32:59,590 --> 00:33:07,510
more graphs and it's kind of tricky to

00:33:02,200 --> 00:33:09,159
generate the dashboards um for for a

00:33:07,510 --> 00:33:10,809
specific application because like it

00:33:09,159 --> 00:33:13,750
always depends on your application right

00:33:10,809 --> 00:33:16,570
so what I do is just like generate the

00:33:13,750 --> 00:33:18,330
for example like a graph panel but then

00:33:16,570 --> 00:33:21,130
you need to kind of include it in like a

00:33:18,330 --> 00:33:23,710
an entire dashboard that you somehow

00:33:21,130 --> 00:33:26,700
consume so that's kind of up to to the

00:33:23,710 --> 00:33:29,230
to the person implementing that effort

00:33:26,700 --> 00:33:31,000
for the most part like it's it's pretty

00:33:29,230 --> 00:33:33,700
low-level there's a lot of science stuff

00:33:31,000 --> 00:33:36,190
and but like the prompt to its death

00:33:33,700 --> 00:33:37,360
should kind of like at least get people

00:33:36,190 --> 00:33:41,620
started

00:33:37,360 --> 00:33:44,920
with a simple approach so I hope that

00:33:41,620 --> 00:33:48,880
answers the question and then going on

00:33:44,920 --> 00:33:53,820
to the last question does cortex 1.2

00:33:48,880 --> 00:33:57,190
have the alert manager you I support it

00:33:53,820 --> 00:34:01,570
all right I could take that I typed in

00:33:57,190 --> 00:34:03,220
the box but um yeah maybe so so there is

00:34:01,570 --> 00:34:07,630
a UI I mean it's basically the

00:34:03,220 --> 00:34:10,840
Prometheus alert manager UI tweak to be

00:34:07,630 --> 00:34:13,840
multi-tenant and the Prometheus alert

00:34:10,840 --> 00:34:15,340
manager UI is is I think quite quite

00:34:13,840 --> 00:34:18,210
minimal you know it will show you what's

00:34:15,340 --> 00:34:20,950
firing it will let you put a silence in

00:34:18,210 --> 00:34:25,180
so all of that works inside cortex and

00:34:20,950 --> 00:34:26,470
it works multi-tenant if you were hoping

00:34:25,180 --> 00:34:29,470
for something more than that then

00:34:26,470 --> 00:34:32,580
probably not and it hasn't changed in a

00:34:29,470 --> 00:34:32,580
long while as far as I can remember

00:34:36,270 --> 00:34:44,190
awesome I think that dance was the last

00:34:39,429 --> 00:34:47,530
question I think it's time to roll for

00:34:44,190 --> 00:34:57,970
for swag basically Mathias if you can do

00:34:47,530 --> 00:34:59,890
that almost sure roll a dice dice I mean

00:34:57,970 --> 00:35:05,880
you can yeah you wanted to do that up

00:34:59,890 --> 00:35:05,880
front for a long time sure we just need

00:35:06,000 --> 00:35:12,190
one d4 also do Trina I teach for you

00:35:11,680 --> 00:35:23,020
somewhere else

00:35:12,190 --> 00:35:33,790
yeah it wasn't a skill to is what I came

00:35:23,020 --> 00:35:36,310
out is you want to acting me on since

00:35:33,790 --> 00:35:38,980
you have slack and we will get that

00:35:36,310 --> 00:35:42,700
sorted okay so thank you everyone I

00:35:38,980 --> 00:35:48,660
think this is it our community meeting

00:35:42,700 --> 00:35:51,960
is over I'll see you next month see ya

00:35:48,660 --> 00:35:51,960

YouTube URL: https://www.youtube.com/watch?v=VXSjOlWTNCU


