Title: Prometheus Community & The Ecosystem Meeting 2020-02-08
Publication date: 2020-02-18
Playlist: Prometheus Community & The Ecosystem Meetings
Description: 
	Meeting Information:  https://bit.ly/prom-community 
Agenda: http://bit.ly/prometheus-community-agenda
Captions: 
	00:00:00,060 --> 00:00:07,799
I guess we can start Haleh loved one

00:00:03,300 --> 00:00:09,630
Impala Smurfs Atticus I'm your host this

00:00:07,799 --> 00:00:12,150
is prometheus and backer system

00:00:09,630 --> 00:00:16,770
community crawl this call is being

00:00:12,150 --> 00:00:19,529
recorded so basically an and will be

00:00:16,770 --> 00:00:22,140
published on YouTube so be nice to one

00:00:19,529 --> 00:00:24,539
another we also follow Chauncey F

00:00:22,140 --> 00:00:29,460
conduct code of conduct here today we

00:00:24,539 --> 00:00:34,140
also have a co-host Mathias I guess he's

00:00:29,460 --> 00:00:37,440
not in yet but anyway we have today we

00:00:34,140 --> 00:00:40,940
have a couple of announcements one is

00:00:37,440 --> 00:00:40,940
from prometheus

00:00:40,969 --> 00:00:50,910
Julian do you want to cover that yes so

00:00:47,870 --> 00:00:53,309
there is a new release of point is that

00:00:50,910 --> 00:00:55,620
is coming up the 2.16 which is ready to

00:00:53,309 --> 00:00:58,230
be tested the release is delayed at the

00:00:55,620 --> 00:01:00,899
moment because we could not own a bunch

00:00:58,230 --> 00:01:04,010
just like we wanted but I guess that

00:01:00,899 --> 00:01:04,010
will be fixed very soon

00:01:05,510 --> 00:01:12,560
call so quick update from Prometheus I'd

00:01:08,760 --> 00:01:12,560
thank you does anyone have any questions

00:01:14,510 --> 00:01:21,090
you wanna highlight a couple of things

00:01:17,450 --> 00:01:30,090
that are being released in this release

00:01:21,090 --> 00:01:33,960
so we have a new query lock we have a

00:01:30,090 --> 00:01:36,600
new local timestamp available in the new

00:01:33,960 --> 00:01:39,450
react UI there is been a lot of work in

00:01:36,600 --> 00:01:41,310
the new react way again and there is a

00:01:39,450 --> 00:01:43,260
new pond query function also and the

00:01:41,310 --> 00:01:53,850
rest there is a lot of memory

00:01:43,260 --> 00:01:55,440
improvements as well improvements in the

00:01:53,850 --> 00:01:57,600
previous release I don't think we did

00:01:55,440 --> 00:01:59,160
much there in this one no we didn't

00:01:57,600 --> 00:02:02,250
maybe you should mention that yeah I'm

00:01:59,160 --> 00:02:06,920
covering a bit of this but yeah then the

00:02:02,250 --> 00:02:09,060
block loading thing that was in 215 I

00:02:06,920 --> 00:02:11,730
think there are definitely performance

00:02:09,060 --> 00:02:14,400
improvements in 216 and especially

00:02:11,730 --> 00:02:17,070
around reloads and making more efficient

00:02:14,400 --> 00:02:20,160
but I don't think there isn't and some

00:02:17,070 --> 00:02:21,269
performance improvements in querying but

00:02:20,160 --> 00:02:22,769
the big memory improvements from the

00:02:21,269 --> 00:02:24,709
previous release unless I've missed

00:02:22,769 --> 00:02:27,959
something

00:02:24,709 --> 00:02:29,730
yes you missed something we improved the

00:02:27,959 --> 00:02:33,750
queries that the leaders the most resent

00:02:29,730 --> 00:02:36,870
to a wealth of data might change

00:02:33,750 --> 00:02:39,660
although your other one they were still

00:02:36,870 --> 00:02:46,320
waiting on the one two that you took off

00:02:39,660 --> 00:02:48,510
from me yeah you know so yeah what we're

00:02:46,320 --> 00:02:52,350
talking about is putting a change that

00:02:48,510 --> 00:02:54,720
if you have a query which only touches

00:02:52,350 --> 00:02:56,190
the head block and nothing else it

00:02:54,720 --> 00:02:57,510
avoids a whole pot of sorting we don't

00:02:56,190 --> 00:02:59,700
need because it's only touched a

00:02:57,510 --> 00:03:02,269
headlock and so if you're touching a

00:02:59,700 --> 00:03:06,269
million series it's like a second faster

00:03:02,269 --> 00:03:08,400
yeah so but however if the query touches

00:03:06,269 --> 00:03:11,190
the head block and anything else it's

00:03:08,400 --> 00:03:12,360
the same speed as always and there's no

00:03:11,190 --> 00:03:14,010
difference for teens it only touched

00:03:12,360 --> 00:03:18,000
normal blocks because they didn't ever

00:03:14,010 --> 00:03:19,410
need to be sorted anyway then hopefully

00:03:18,000 --> 00:03:21,090
in the next release I

00:03:19,410 --> 00:03:22,170
like because that's most useful for

00:03:21,090 --> 00:03:24,930
recording rules they don't even come

00:03:22,170 --> 00:03:27,900
back an hour and hopefully Julian has a

00:03:24,930 --> 00:03:32,510
change that will help with hide sure in

00:03:27,900 --> 00:03:32,510
scenarios when that sorting is involved

00:03:33,770 --> 00:03:40,310
should we mention something that we are

00:03:36,120 --> 00:03:44,310
heavily working on like Ganesh is doing

00:03:40,310 --> 00:03:46,620
about flashing certain chunks from head

00:03:44,310 --> 00:03:48,930
to disk and a muppet

00:03:46,620 --> 00:03:50,970
so essentially reducing memory

00:03:48,930 --> 00:03:52,560
consumption for headlocks enormously and

00:03:50,970 --> 00:04:01,920
that should land in next release

00:03:52,560 --> 00:04:06,930
hopefully does anyone have any questions

00:04:01,920 --> 00:04:12,960
or comments if not then we can one

00:04:06,930 --> 00:04:15,120
around noose around panels cool it's

00:04:12,960 --> 00:04:16,739
particular here I'm panels and previews

00:04:15,120 --> 00:04:20,820
maintainer so this is like a quick

00:04:16,739 --> 00:04:22,440
update on from tennis team last and next

00:04:20,820 --> 00:04:24,480
races we are really focused on the

00:04:22,440 --> 00:04:27,870
stability and cost optimizations for

00:04:24,480 --> 00:04:30,480
using tunnel system and we made huge

00:04:27,870 --> 00:04:32,910
progress already which you think which

00:04:30,480 --> 00:04:35,160
you can take advantage of right now so

00:04:32,910 --> 00:04:37,350
first of all thanks to the fact that

00:04:35,160 --> 00:04:39,780
good amount of code we kind of reuse

00:04:37,350 --> 00:04:42,510
from from hugh's we direct the import

00:04:39,780 --> 00:04:44,040
that code so the fixes that we're done

00:04:42,510 --> 00:04:46,860
improve with the improvements that we

00:04:44,040 --> 00:04:49,380
thought were done in from cues 2.15

00:04:46,860 --> 00:04:52,650
which improved memory consumption for

00:04:49,380 --> 00:04:54,030
compaction directly mapped into into

00:04:52,650 --> 00:04:57,060
improvements for tunnels because we

00:04:54,030 --> 00:05:00,030
really use the same code for compaction

00:04:57,060 --> 00:05:02,940
so the newest really is the 0.10 but one

00:05:00,030 --> 00:05:04,980
has has amazing improvements there as

00:05:02,940 --> 00:05:07,410
well and I think it's fair to say that

00:05:04,980 --> 00:05:09,960
open source is amazing because like it

00:05:07,410 --> 00:05:12,720
allows us to reuse so much and help each

00:05:09,960 --> 00:05:15,060
other and it was so easy I just updated

00:05:12,720 --> 00:05:17,610
the tunnel titanos well the confuse

00:05:15,060 --> 00:05:20,430
dependence in tano's and that's it so at

00:05:17,610 --> 00:05:22,140
the end we have almost constant memory

00:05:20,430 --> 00:05:24,240
users can you say that probably probably

00:05:22,140 --> 00:05:26,820
not but let me like definitely reduce

00:05:24,240 --> 00:05:28,470
memory usage of compaction process of

00:05:26,820 --> 00:05:29,220
the you know compactor component in

00:05:28,470 --> 00:05:31,719
internals

00:05:29,220 --> 00:05:34,059
which is crucial because Thanos can

00:05:31,719 --> 00:05:36,339
users of talents usually have huge huge

00:05:34,059 --> 00:05:39,909
blocks to work with sometimes almost up

00:05:36,339 --> 00:05:42,339
to terabyte size and in the same release

00:05:39,909 --> 00:05:46,029
we also fix potential raise condition

00:05:42,339 --> 00:05:47,619
that can trigger some data loss so make

00:05:46,029 --> 00:05:49,179
sure to have big compact or at least

00:05:47,619 --> 00:05:52,209
compactor to the newest version should

00:05:49,179 --> 00:05:54,189
be should be seamless and second thing

00:05:52,209 --> 00:05:55,749
worth mentioning is that in the next

00:05:54,189 --> 00:05:58,149
release and something that is already

00:05:55,749 --> 00:06:00,519
implemented in the latest master of

00:05:58,149 --> 00:06:05,619
tano's is the store gateway improvement

00:06:00,519 --> 00:06:08,229
so we designed a road block loading

00:06:05,619 --> 00:06:10,269
mechanisms that you used to you know

00:06:08,229 --> 00:06:13,239
Stargate wasters app and load the things

00:06:10,269 --> 00:06:15,039
from the object storage certain powered

00:06:13,239 --> 00:06:17,409
parts that are needed for the for the

00:06:15,039 --> 00:06:19,629
functionality so we wrote an rewritten

00:06:17,409 --> 00:06:21,999
this path directly it was using like

00:06:19,629 --> 00:06:24,279
something like index castration and now

00:06:21,999 --> 00:06:27,939
we are kind of following good patterns

00:06:24,279 --> 00:06:30,999
of produce and we are actually using the

00:06:27,939 --> 00:06:35,019
spoke binary format and we are using a

00:06:30,999 --> 00:06:37,389
map process to efficiently load those

00:06:35,019 --> 00:06:40,479
things on startup so it it should

00:06:37,389 --> 00:06:43,959
enormous ly reduce memory consumption

00:06:40,479 --> 00:06:46,059
and also startup time because suddenly

00:06:43,959 --> 00:06:49,149
you don't need to download huge index

00:06:46,059 --> 00:06:50,709
files because it just picks the things

00:06:49,149 --> 00:06:54,909
that are really required for start ready

00:06:50,709 --> 00:06:57,579
to run so you can increase your kind of

00:06:54,909 --> 00:07:00,819
startup synchronization parlays like

00:06:57,579 --> 00:07:04,389
there is an option for that and and

00:07:00,819 --> 00:07:08,349
already some users report that he used

00:07:04,389 --> 00:07:10,929
to have like Stargate with 150 gigabytes

00:07:08,349 --> 00:07:14,169
using and now it's using 40 gigabytes I

00:07:10,929 --> 00:07:16,300
think it's still a bit much and I will

00:07:14,169 --> 00:07:17,979
be looking like on what's going on there

00:07:16,300 --> 00:07:20,229
I think we can improve even that but

00:07:17,979 --> 00:07:22,629
this is the base I memory that was was

00:07:20,229 --> 00:07:24,279
reduced for us or gateway and you can

00:07:22,629 --> 00:07:27,459
already use that so if you grab the

00:07:24,279 --> 00:07:33,279
latest docker image and an enable

00:07:27,459 --> 00:07:35,619
special flag that I'm adding to nodes it

00:07:33,279 --> 00:07:38,229
will essentially use the new kind of

00:07:35,619 --> 00:07:40,749
index scheduled feature and it's still

00:07:38,229 --> 00:07:42,369
experimental we are working on tests and

00:07:40,749 --> 00:07:44,709
benchmarks but it should be fully

00:07:42,369 --> 00:07:45,390
functional and working so I mean don't

00:07:44,709 --> 00:07:47,700
run that

00:07:45,390 --> 00:07:49,920
like critical production but try it on

00:07:47,700 --> 00:07:52,380
you're staging testing and and let us

00:07:49,920 --> 00:07:54,720
know how it goes because we are super

00:07:52,380 --> 00:07:57,420
excited about it and yeah that's it from

00:07:54,720 --> 00:07:59,400
me for us on Twitter if you want like up

00:07:57,420 --> 00:08:03,210
to date the latest news as well

00:07:59,400 --> 00:08:06,230
thanks cool thank you very much does

00:08:03,210 --> 00:08:06,230
anyone have any questions

00:08:13,610 --> 00:08:19,040
cool I guess that is it thank you

00:08:16,620 --> 00:08:22,070
everyone if you missed something

00:08:19,040 --> 00:08:24,840
recording will be available on youtube

00:08:22,070 --> 00:08:30,860
yeah thank you everyone I think we're

00:08:24,840 --> 00:08:30,860
done with the meeting all guys see you

00:08:31,490 --> 00:08:34,730

YouTube URL: https://www.youtube.com/watch?v=dTp0ZWRc1zs


