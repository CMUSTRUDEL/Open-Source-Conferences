Title: OpenMetrics 2021-05-06
Publication date: 2021-05-07
Playlist: OpenMetrics dev summits
Description: 
	
Captions: 
	00:00:03,360 --> 00:00:09,599
oh it should be recorded now

00:00:06,560 --> 00:00:11,120
it still says yeah well

00:00:09,599 --> 00:00:13,599
that's the thing i hate about me it

00:00:11,120 --> 00:00:14,880
still says it's waiting but we are

00:00:13,599 --> 00:00:16,560
depending so

00:00:14,880 --> 00:00:19,600
okay let's just pretend it's recording

00:00:16,560 --> 00:00:21,840
and let's see if it's actually recording

00:00:19,600 --> 00:00:23,279
this recording in the top left for me so

00:00:21,840 --> 00:00:27,840
i think we're good

00:00:23,279 --> 00:00:27,840
now it says it's a second time okay okay

00:00:28,240 --> 00:00:34,960
anyway it is recording now

00:00:31,359 --> 00:00:39,760
also according to my own thing so first

00:00:34,960 --> 00:00:43,040
i think we have ben with toc updates

00:00:39,760 --> 00:00:45,600
sure so i had a call with the cncftoc

00:00:43,040 --> 00:00:47,200
on doing the due diligence they just

00:00:45,600 --> 00:00:48,480
asked a bunch of questions about uh

00:00:47,200 --> 00:00:52,480
mostly around

00:00:48,480 --> 00:00:56,480
who's using it why um what's it about

00:00:52,480 --> 00:00:58,640
and the the the the two funny takeaways

00:00:56,480 --> 00:01:01,280
that i got were

00:00:58,640 --> 00:01:02,559
i was saying that we started openmetrics

00:01:01,280 --> 00:01:05,040
because

00:01:02,559 --> 00:01:05,600
vendors like cisco look at prometheus as

00:01:05,040 --> 00:01:08,799
being

00:01:05,600 --> 00:01:10,400
proprietary and the toc was like but

00:01:08,799 --> 00:01:12,720
prometheus isn't proprietary

00:01:10,400 --> 00:01:14,560
it's open source and i said yes but

00:01:12,720 --> 00:01:17,200
that's not how vendors think

00:01:14,560 --> 00:01:18,159
and so we have to do this standards body

00:01:17,200 --> 00:01:22,000
stuff

00:01:18,159 --> 00:01:23,360
uh and i kind of compared it to like

00:01:22,000 --> 00:01:26,560
ipfix which is

00:01:23,360 --> 00:01:28,640
proprietary cisco or netflow was

00:01:26,560 --> 00:01:32,079
proprietary cisco and ipfix

00:01:28,640 --> 00:01:34,240
is the rename of uh netflow

00:01:32,079 --> 00:01:35,680
i thought that was a reasonable analogy

00:01:34,240 --> 00:01:38,799
if people know what

00:01:35,680 --> 00:01:40,320
either of those two things are um

00:01:38,799 --> 00:01:42,479
and then the the second one that i

00:01:40,320 --> 00:01:45,280
wanted to get some help with which is

00:01:42,479 --> 00:01:45,600
uh links to contacts to talk to people

00:01:45,280 --> 00:01:48,000
who

00:01:45,600 --> 00:01:49,840
are open metrics implementers that are

00:01:48,000 --> 00:01:53,520
not part of prometheus

00:01:49,840 --> 00:01:54,240
uh and so uh i figure rob's a good one

00:01:53,520 --> 00:01:56,960
for that

00:01:54,240 --> 00:01:58,479
uh i don't know who else uh if if i can

00:01:56,960 --> 00:02:01,840
get some offline

00:01:58,479 --> 00:02:05,360
contact information for uh

00:02:01,840 --> 00:02:08,720
implementers and or users

00:02:05,360 --> 00:02:10,800
users probably most people

00:02:08,720 --> 00:02:12,319
that i also had a call with toc and

00:02:10,800 --> 00:02:16,959
that's the point which i made that

00:02:12,319 --> 00:02:18,959
most anyone uh using using a variety of

00:02:16,959 --> 00:02:20,480
of what we have in our ecosystem will be

00:02:18,959 --> 00:02:24,000
will already be

00:02:20,480 --> 00:02:26,319
an adopter um datadock

00:02:24,000 --> 00:02:28,239
brian i think you can talk on datadog

00:02:26,319 --> 00:02:31,360
datadog because they've contributed

00:02:28,239 --> 00:02:34,959
to client fighting okay so maybe we

00:02:31,360 --> 00:02:34,959
should just forward this information

00:02:35,040 --> 00:02:38,319
yeah i guess open telemetry you're doing

00:02:37,280 --> 00:02:40,879
something as well

00:02:38,319 --> 00:02:40,879
uh yes

00:02:43,040 --> 00:02:47,200
yeah how they can how are they consuming

00:02:45,760 --> 00:02:48,720
and integrating right now they're

00:02:47,200 --> 00:02:51,840
they're re-implementing the spec

00:02:48,720 --> 00:02:51,840
themselves right

00:02:53,200 --> 00:02:58,159
yes we will focus on

00:02:56,239 --> 00:02:59,599
so currently the main focus is within

00:02:58,159 --> 00:03:01,680
within the collector

00:02:59,599 --> 00:03:03,040
where you have the focus also on the

00:03:01,680 --> 00:03:06,159
remote right

00:03:03,040 --> 00:03:07,760
yeah but obviously i was just trying to

00:03:06,159 --> 00:03:09,760
work out whether they were

00:03:07,760 --> 00:03:11,280
like how how they were doing the scrape

00:03:09,760 --> 00:03:12,080
code were they writing the scrape code

00:03:11,280 --> 00:03:15,440
themselves

00:03:12,080 --> 00:03:18,080
uh are they okay yes right

00:03:15,440 --> 00:03:19,280
sounds good so they're implementing the

00:03:18,080 --> 00:03:22,720
scrape code ads per

00:03:19,280 --> 00:03:22,720
open metric spec essentially

00:03:22,959 --> 00:03:26,319
yeah there it becomes a little bit uh

00:03:25,200 --> 00:03:28,159
complicated of course they have

00:03:26,319 --> 00:03:32,000
different parts in their pipeline

00:03:28,159 --> 00:03:34,799
yes once as currently the main

00:03:32,000 --> 00:03:37,599
the main focus is on the collector and

00:03:34,799 --> 00:03:39,840
the main focus is on remote right

00:03:37,599 --> 00:03:41,680
so actually that this doesn't actually

00:03:39,840 --> 00:03:45,680
go through open metrics

00:03:41,680 --> 00:03:49,599
at all because this is already in

00:03:45,680 --> 00:03:52,159
a well alike format

00:03:49,599 --> 00:03:52,959
but obviously to to to have full

00:03:52,159 --> 00:03:54,879
integration

00:03:52,959 --> 00:03:56,959
with the complete ecosystem they also

00:03:54,879 --> 00:03:59,760
need to be able to expose metrics in

00:03:56,959 --> 00:04:00,560
in open metrics compatible format which

00:03:59,760 --> 00:04:03,040
is currently

00:04:00,560 --> 00:04:05,840
not the focus area of uh of the

00:04:03,040 --> 00:04:09,360
compatibility work of prometheus wg

00:04:05,840 --> 00:04:11,280
but that is one of the

00:04:09,360 --> 00:04:13,360
things which need to be ticked to to be

00:04:11,280 --> 00:04:15,280
actually able to have a prometheus or

00:04:13,360 --> 00:04:18,239
compatible scrape

00:04:15,280 --> 00:04:18,959
a metrics endpoint which has been

00:04:18,239 --> 00:04:22,240
instrumented

00:04:18,959 --> 00:04:23,759
through through open telemetry and i

00:04:22,240 --> 00:04:26,880
just sent you privately there

00:04:23,759 --> 00:04:29,120
the uh contacted the person with datadog

00:04:26,880 --> 00:04:29,120
who

00:04:34,240 --> 00:04:41,280
okay test suite

00:04:37,919 --> 00:04:44,639
yes no for anyone who let let me let me

00:04:41,280 --> 00:04:47,440
do th so on monday we uh we at

00:04:44,639 --> 00:04:48,400
christina and cncf announced um the

00:04:47,440 --> 00:04:52,000
prometheans con

00:04:48,400 --> 00:04:56,000
prometheus con prometheus conformance

00:04:52,000 --> 00:04:59,680
program which is structured into a

00:04:56,000 --> 00:05:02,560
component compliance and when you are

00:04:59,680 --> 00:05:04,560
compliant with whatever sections or

00:05:02,560 --> 00:05:05,360
whatever components are applicable to

00:05:04,560 --> 00:05:08,000
you

00:05:05,360 --> 00:05:09,759
then your art promise is compatible so

00:05:08,000 --> 00:05:10,960
the prometheus agent which will

00:05:09,759 --> 00:05:13,600
relatively soon be

00:05:10,960 --> 00:05:16,240
a thing obviously doesn't have a prom kl

00:05:13,600 --> 00:05:18,560
component so as of right now it only has

00:05:16,240 --> 00:05:19,759
a remote right and open metrics to be

00:05:18,560 --> 00:05:22,240
complying to

00:05:19,759 --> 00:05:23,280
to pick uh to be considered prometheus

00:05:22,240 --> 00:05:26,479
compatible because

00:05:23,280 --> 00:05:27,840
there is no problem in in the agent

00:05:26,479 --> 00:05:30,160
maybe there will be at some point for

00:05:27,840 --> 00:05:32,560
certain use cases but as of right now

00:05:30,160 --> 00:05:35,680
there isn't so it's it's not a required

00:05:32,560 --> 00:05:38,400
check mark for compatibility

00:05:35,680 --> 00:05:39,280
from the perspective of that compliance

00:05:38,400 --> 00:05:41,680
suite

00:05:39,280 --> 00:05:42,800
which you can find at prometheus

00:05:41,680 --> 00:05:45,199
compliance in

00:05:42,800 --> 00:05:47,840
on github i can also link it in the

00:05:45,199 --> 00:05:47,840
meeting notes

00:05:48,639 --> 00:05:54,720
we simply bless the openmetrics

00:05:51,919 --> 00:05:56,800
test suite as part of the prometheus

00:05:54,720 --> 00:06:00,880
compliance test suite

00:05:56,800 --> 00:06:03,600
uh so it simply refers to um

00:06:00,880 --> 00:06:06,240
now it's in the book so it simply refers

00:06:03,600 --> 00:06:09,039
to the openmetrics specification and

00:06:06,240 --> 00:06:10,080
test suite as the canonical thing to to

00:06:09,039 --> 00:06:13,520
be compliant to

00:06:10,080 --> 00:06:15,759
to have the compliance on on promethean

00:06:13,520 --> 00:06:15,759
side

00:06:16,080 --> 00:06:22,400
there are several angles how we can

00:06:19,680 --> 00:06:24,880
reuse the open metrics thing within the

00:06:22,400 --> 00:06:28,479
prometheus compliance in particular

00:06:24,880 --> 00:06:31,199
we have to remote write compliance

00:06:28,479 --> 00:06:31,759
which in theory could simply take all

00:06:31,199 --> 00:06:34,639
the

00:06:31,759 --> 00:06:35,840
open metrics output and check that

00:06:34,639 --> 00:06:39,440
everything which is

00:06:35,840 --> 00:06:40,479
which is valid or invalid on openmetrics

00:06:39,440 --> 00:06:45,360
site makes it

00:06:40,479 --> 00:06:45,360
to the other side as correct data or not

00:06:45,600 --> 00:06:48,639
which also allows obviously to to test

00:06:47,680 --> 00:06:52,319
all the all the

00:06:48,639 --> 00:06:53,120
pipelines and such the other is more

00:06:52,319 --> 00:06:57,039
automation

00:06:53,120 --> 00:06:57,360
around around test data which is emitted

00:06:57,039 --> 00:07:00,400
from

00:06:57,360 --> 00:07:01,039
exporters and integrations but that will

00:07:00,400 --> 00:07:03,680
still

00:07:01,039 --> 00:07:04,560
not ever be fully fully automatable i

00:07:03,680 --> 00:07:06,240
think

00:07:04,560 --> 00:07:07,840
yeah i think we can get a lot and one

00:07:06,240 --> 00:07:11,599
thing to keep in mind though

00:07:07,840 --> 00:07:13,520
is that prometheus is it can parse

00:07:11,599 --> 00:07:15,680
correct open metrics

00:07:13,520 --> 00:07:16,639
but it'll also accept certain incorrect

00:07:15,680 --> 00:07:19,680
inputs

00:07:16,639 --> 00:07:21,039
so prometheus parsing things is

00:07:19,680 --> 00:07:23,199
necessary but not sufficient to

00:07:21,039 --> 00:07:24,720
determine compliance and on top of that

00:07:23,199 --> 00:07:26,000
even with the automated tests and as

00:07:24,720 --> 00:07:27,520
much we can automate there's still a few

00:07:26,000 --> 00:07:28,479
things that require a human to look at

00:07:27,520 --> 00:07:30,000
them

00:07:28,479 --> 00:07:32,160
just because there will be exceptions

00:07:30,000 --> 00:07:33,360
sometimes like maybe you really do have

00:07:32,160 --> 00:07:35,120
one label that occurs that

00:07:33,360 --> 00:07:36,960
flies across an entire target like that

00:07:35,120 --> 00:07:40,080
is theoretically possible that it might

00:07:36,960 --> 00:07:40,080
come up extremely rarely

00:07:40,479 --> 00:07:45,680
i suspect that similar to prom kill

00:07:44,000 --> 00:07:47,680
where it's also unlikely that

00:07:45,680 --> 00:07:48,960
that there ever will be a fully

00:07:47,680 --> 00:07:52,080
automated

00:07:48,960 --> 00:07:54,639
test but it is what it is um

00:07:52,080 --> 00:07:55,759
yeah but i see things is we're kind of

00:07:54,639 --> 00:07:57,840
just testing

00:07:55,759 --> 00:07:59,120
exporters and applications say is this

00:07:57,840 --> 00:08:01,360
output good or not

00:07:59,120 --> 00:08:02,720
and for parsers it's like right here's

00:08:01,360 --> 00:08:03,919
all your data

00:08:02,720 --> 00:08:06,479
are you rejecting the things you should

00:08:03,919 --> 00:08:06,479
be rejecting

00:08:07,360 --> 00:08:10,080
and there are things there information

00:08:08,720 --> 00:08:11,280
won't reject because it's only looking

00:08:10,080 --> 00:08:13,280
at things line by line

00:08:11,280 --> 00:08:14,400
and that's okay pretty spec i mean i

00:08:13,280 --> 00:08:15,280
just separate those out a bit but

00:08:14,400 --> 00:08:16,160
there's other things it should be

00:08:15,280 --> 00:08:19,039
catching and so on

00:08:16,160 --> 00:08:20,160
so there's you know there's wiggle room

00:08:19,039 --> 00:08:21,680
for the sake of making it easy to

00:08:20,160 --> 00:08:22,879
implement because we don't want everyone

00:08:21,680 --> 00:08:24,479
to have to do a full

00:08:22,879 --> 00:08:26,720
state machine parser to figure out all

00:08:24,479 --> 00:08:28,000
the metric families and so on because

00:08:26,720 --> 00:08:29,759
you know we wanted to be easy james

00:08:28,000 --> 00:08:31,039
great wish uh

00:08:29,759 --> 00:08:32,320
but like yeah if we're going for

00:08:31,039 --> 00:08:33,120
someone's claiming full complete

00:08:32,320 --> 00:08:34,080
compliance

00:08:33,120 --> 00:08:36,479
there's extra things they should be

00:08:34,080 --> 00:08:36,479
looking for

00:08:37,200 --> 00:08:44,080
so gibson's first understand you want to

00:08:40,000 --> 00:08:47,519
do work on on the test suite correct

00:08:44,080 --> 00:08:48,959
uh yeah this will um help drive it

00:08:47,519 --> 00:08:52,320
internally

00:08:48,959 --> 00:08:55,440
that gives yeah we we've taken on uh

00:08:52,320 --> 00:08:56,959
the uh yeah the uh

00:08:55,440 --> 00:08:58,959
i mean we've taken the first pass on

00:08:56,959 --> 00:09:01,600
this on the open metrics test

00:08:58,959 --> 00:09:03,440
and then um uh yeah we have some

00:09:01,600 --> 00:09:04,800
engineering bandwidth to also take on

00:09:03,440 --> 00:09:07,440
more and then

00:09:04,800 --> 00:09:08,080
um if you're up for it gives it and i

00:09:07,440 --> 00:09:10,000
think

00:09:08,080 --> 00:09:11,440
we had a brief discussion about this um

00:09:10,000 --> 00:09:13,440
it'd be good to

00:09:11,440 --> 00:09:15,279
for us to like help shepherd that

00:09:13,440 --> 00:09:17,600
internally

00:09:15,279 --> 00:09:18,640
yeah definitely definitely uh and i'm

00:09:17,600 --> 00:09:20,399
just curious like

00:09:18,640 --> 00:09:22,000
i don't know if there's i'm just looking

00:09:20,399 --> 00:09:24,880
through i'm i wasn't clear on like

00:09:22,000 --> 00:09:26,560
how and this is why i still like tbed

00:09:24,880 --> 00:09:27,360
since things are still in draft mode but

00:09:26,560 --> 00:09:29,519
like

00:09:27,360 --> 00:09:30,959
how do how how do we go about like

00:09:29,519 --> 00:09:34,160
reviewing

00:09:30,959 --> 00:09:35,839
um certain like test results and um

00:09:34,160 --> 00:09:37,839
giving out the certifications and like

00:09:35,839 --> 00:09:40,240
what is that process of submitting

00:09:37,839 --> 00:09:41,279
test results like how does how is that

00:09:40,240 --> 00:09:43,920
going to work for people

00:09:41,279 --> 00:09:44,959
uh and are we are we the ones reviewing

00:09:43,920 --> 00:09:47,040
um

00:09:44,959 --> 00:09:50,160
yes so so there's a question whether

00:09:47,040 --> 00:09:52,560
we're looking at a parser or an exposure

00:09:50,160 --> 00:09:54,160
so for a parser we basically take all

00:09:52,560 --> 00:09:57,200
the test cases chuck them at it

00:09:54,160 --> 00:09:58,720
see what fails and then analyze it like

00:09:57,200 --> 00:09:59,920
there are a few extra tests we should

00:09:58,720 --> 00:10:01,680
probably be adding in there

00:09:59,920 --> 00:10:03,040
because like these tests are designed to

00:10:01,680 --> 00:10:04,800
test the python client

00:10:03,040 --> 00:10:06,399
like they're reasonably exhaustive but

00:10:04,800 --> 00:10:07,600
they don't test things that don't need

00:10:06,399 --> 00:10:09,839
to be tested in the python client

00:10:07,600 --> 00:10:11,360
because i know i've done the right thing

00:10:09,839 --> 00:10:14,240
but for example we should probably add a

00:10:11,360 --> 00:10:16,079
test of something that has 100 labels

00:10:14,240 --> 00:10:17,360
just to kind of set a line in the sound

00:10:16,079 --> 00:10:18,480
of no no really you should accept at

00:10:17,360 --> 00:10:21,440
least this many

00:10:18,480 --> 00:10:22,560
how many more than that is debatable but

00:10:21,440 --> 00:10:24,240
at least setting

00:10:22,560 --> 00:10:25,600
an example of by the way this is a

00:10:24,240 --> 00:10:28,480
reasonable number

00:10:25,600 --> 00:10:29,120
uh if we're talking an exposure uh so an

00:10:28,480 --> 00:10:30,880
exporter

00:10:29,120 --> 00:10:32,480
basically you chuck the python client at

00:10:30,880 --> 00:10:34,880
it and see if it

00:10:32,480 --> 00:10:36,880
if it produces that output but there's

00:10:34,880 --> 00:10:38,720
probably some also best practices stuff

00:10:36,880 --> 00:10:40,800
we could add code to detect and this

00:10:38,720 --> 00:10:41,920
would be open metric specific because

00:10:40,800 --> 00:10:44,079
the person doesn't need to know about

00:10:41,920 --> 00:10:45,440
this like taking for example like we do

00:10:44,079 --> 00:10:46,640
a scrape we do a scrape

00:10:45,440 --> 00:10:48,720
once a minute for five minutes or

00:10:46,640 --> 00:10:50,800
something and look for weird stuff

00:10:48,720 --> 00:10:51,839
across scrapes like series disappearing

00:10:50,800 --> 00:10:53,600
and disappearing

00:10:51,839 --> 00:10:55,760
or you notice that hey this label is

00:10:53,600 --> 00:10:57,120
across everything or we notice hey these

00:10:55,760 --> 00:10:58,320
counters are going backwards or these

00:10:57,120 --> 00:11:00,160
counters are resetting

00:10:58,320 --> 00:11:01,600
or you know just looking for weird stuff

00:11:00,160 --> 00:11:04,320
like that to

00:11:01,600 --> 00:11:05,920
aid to human and reviewing things so

00:11:04,320 --> 00:11:08,640
that that's more like a compliance

00:11:05,920 --> 00:11:09,920
test uh brian rather than integration

00:11:08,640 --> 00:11:12,320
tests right

00:11:09,920 --> 00:11:13,600
uh yeah it's more like hey are you

00:11:12,320 --> 00:11:14,880
following the spirit as well as the

00:11:13,600 --> 00:11:18,240
latter sort of thing

00:11:14,880 --> 00:11:20,240
right but you know yeah

00:11:18,240 --> 00:11:22,399
but that that uh just just to get on the

00:11:20,240 --> 00:11:25,760
same page so that that would be a tool

00:11:22,399 --> 00:11:28,720
not like a test suite

00:11:25,760 --> 00:11:30,160
yeah yeah okay that makes sense you

00:11:28,720 --> 00:11:33,519
still need to run this as far as

00:11:30,160 --> 00:11:35,040
clients but right you know it's not a

00:11:33,519 --> 00:11:36,800
hard pass fail but it's certainly

00:11:35,040 --> 00:11:39,600
suggestive

00:11:36,800 --> 00:11:41,440
yeah yeah and then to to answer the

00:11:39,600 --> 00:11:43,680
other part of gibb's question

00:11:41,440 --> 00:11:45,839
the the actual stamp is something which

00:11:43,680 --> 00:11:49,600
is a little bit tbd still because that's

00:11:45,839 --> 00:11:51,120
that's still how basically cncf

00:11:49,600 --> 00:11:52,959
needs to needs to figure out some

00:11:51,120 --> 00:11:54,839
paperwork and such and prometheus team

00:11:52,959 --> 00:11:59,040
along with tntf

00:11:54,839 --> 00:12:01,040
um but i i mean on a high level when

00:11:59,040 --> 00:12:02,880
openmetrics is happy prometheus is happy

00:12:01,040 --> 00:12:06,240
and then this will be part of

00:12:02,880 --> 00:12:08,480
them but how how this works exactly is

00:12:06,240 --> 00:12:10,160
is a little bit tbd indeed the more

00:12:08,480 --> 00:12:13,279
automation we can offer

00:12:10,160 --> 00:12:15,839
the easier it becomes for everyone to to

00:12:13,279 --> 00:12:17,920
stay up to date

00:12:15,839 --> 00:12:19,680
yeah especially if we are requiring this

00:12:17,920 --> 00:12:23,279
every 12

00:12:19,680 --> 00:12:23,279
weeks um or months

00:12:23,440 --> 00:12:28,000
the current thinking is every 12 weeks

00:12:25,760 --> 00:12:30,720
which uh which will hopefully

00:12:28,000 --> 00:12:32,800
lead to not everything being being done

00:12:30,720 --> 00:12:36,160
all at once if we

00:12:32,800 --> 00:12:37,279
if we find that this is too short term

00:12:36,160 --> 00:12:39,760
or something or that

00:12:37,279 --> 00:12:41,120
things are not moving so quickly that

00:12:39,760 --> 00:12:43,600
they need

00:12:41,120 --> 00:12:45,440
regular updates we can always extend

00:12:43,600 --> 00:12:48,800
those periods

00:12:45,440 --> 00:12:51,200
the thinking is just to be more careful

00:12:48,800 --> 00:12:52,880
and extend because you cannot ever take

00:12:51,200 --> 00:12:54,160
anything away when it's marketing

00:12:52,880 --> 00:12:56,240
relevant

00:12:54,160 --> 00:12:58,320
or or certification wise it's a lot

00:12:56,240 --> 00:12:58,720
easier to just extend once we have some

00:12:58,320 --> 00:13:01,120
sort

00:12:58,720 --> 00:13:03,360
of understanding what what that actually

00:13:01,120 --> 00:13:04,480
means and day-to-day okay

00:13:03,360 --> 00:13:06,560
that's good to know and then i'm

00:13:04,480 --> 00:13:08,079
assuming like once details get flushed

00:13:06,560 --> 00:13:11,360
out more like

00:13:08,079 --> 00:13:15,279
the readmes and whatnot will get more

00:13:11,360 --> 00:13:17,120
uh beefed up with like the details um

00:13:15,279 --> 00:13:18,800
so now just reading through it was still

00:13:17,120 --> 00:13:19,600
a little bit unclear of how the whole

00:13:18,800 --> 00:13:22,079
process would

00:13:19,600 --> 00:13:23,600
would work um when when going about

00:13:22,079 --> 00:13:27,519
these tests as like a

00:13:23,600 --> 00:13:27,519
as like an end user of everything so

00:13:27,839 --> 00:13:31,040
on the positive side that means uh

00:13:30,240 --> 00:13:34,639
anyone who

00:13:31,040 --> 00:13:36,399
who drives the work gets to decide so

00:13:34,639 --> 00:13:38,959
if if you want to drive this you get to

00:13:36,399 --> 00:13:38,959
refine it

00:13:39,600 --> 00:13:43,920
that's a good offer yeah no um i mean

00:13:42,240 --> 00:13:46,639
yeah no i think

00:13:43,920 --> 00:13:47,279
i mean i can definitely help like add

00:13:46,639 --> 00:13:50,399
some of my

00:13:47,279 --> 00:13:51,360
initial thoughts to like the read needs

00:13:50,399 --> 00:13:53,120
and whatnot just like

00:13:51,360 --> 00:13:54,480
just things that i think i would find

00:13:53,120 --> 00:13:55,519
helpful myself and i'm sure others would

00:13:54,480 --> 00:13:58,240
as well

00:13:55,519 --> 00:14:00,639
in terms of details or just knowing when

00:13:58,240 --> 00:14:03,839
to expect things timing wise as well

00:14:00,639 --> 00:14:03,839
would be helpful i think for people

00:14:06,240 --> 00:14:09,360
yeah but like in development terms being

00:14:08,320 --> 00:14:11,040
able to you know

00:14:09,360 --> 00:14:12,800
have some compliance tests developed

00:14:11,040 --> 00:14:14,800
will be useful like the one that

00:14:12,800 --> 00:14:17,440
takes a few scrapes over time and checks

00:14:14,800 --> 00:14:20,639
weird stuff isn't happening

00:14:17,440 --> 00:14:24,160
yep yeah we'll um i think i think we can

00:14:20,639 --> 00:14:26,079
take that on um

00:14:24,160 --> 00:14:27,279
i'll uh i'll have to get back to you

00:14:26,079 --> 00:14:30,320
with with

00:14:27,279 --> 00:14:32,160
like timelines but yep

00:14:30,320 --> 00:14:33,839
um and and like anything else on the

00:14:32,160 --> 00:14:37,440
development side i mean we can just

00:14:33,839 --> 00:14:39,279
start with that for time being um

00:14:37,440 --> 00:14:40,880
but uh yeah i guess like the rest of the

00:14:39,279 --> 00:14:42,240
compliance stuff like i mean remember

00:14:40,880 --> 00:14:45,360
ryan pronq you are already

00:14:42,240 --> 00:14:47,360
fairly sophisticated so

00:14:45,360 --> 00:14:48,480
but so actually i mean i guess here

00:14:47,360 --> 00:14:51,760
brian you mentioned

00:14:48,480 --> 00:14:53,120
a few test cases as well on the existing

00:14:51,760 --> 00:14:55,760
parser

00:14:53,120 --> 00:14:56,639
side such as 100 labels and and other

00:14:55,760 --> 00:14:59,120
things would be good

00:14:56,639 --> 00:15:00,399
is that right yeah yeah that's one just

00:14:59,120 --> 00:15:00,959
because i don't need the test of the

00:15:00,399 --> 00:15:03,279
point

00:15:00,959 --> 00:15:04,240
because it has no limit yeah but i think

00:15:03,279 --> 00:15:05,839
we should set

00:15:04,240 --> 00:15:08,480
at least an implicit expectation because

00:15:05,839 --> 00:15:10,079
the docs like i said the spec it says

00:15:08,480 --> 00:15:11,600
you know you can have limits but keep in

00:15:10,079 --> 00:15:14,240
mind real use cases and if we

00:15:11,600 --> 00:15:14,639
i think if we choose a hundred labels

00:15:14,240 --> 00:15:17,360
that

00:15:14,639 --> 00:15:18,800
yeah that should satisfy all reasonable

00:15:17,360 --> 00:15:20,880
use cases that currently exist because i

00:15:18,800 --> 00:15:24,079
think for example

00:15:20,880 --> 00:15:25,680
um i'll be on an info metric most likely

00:15:24,079 --> 00:15:27,920
because otherwise showing you two or

00:15:25,680 --> 00:15:29,839
three generally yeah

00:15:27,920 --> 00:15:31,759
like there are there's some amazon

00:15:29,839 --> 00:15:34,560
feature that unless you have 60 labels

00:15:31,759 --> 00:15:36,160
60 tags on something so chucking all of

00:15:34,560 --> 00:15:37,600
those into an infometric seems like a

00:15:36,160 --> 00:15:40,399
reasonable use case for me

00:15:37,600 --> 00:15:41,040
so if we just pick 100 out of the air

00:15:40,399 --> 00:15:42,800
that's

00:15:41,040 --> 00:15:44,639
enough to cover any information of that

00:15:42,800 --> 00:15:47,839
size

00:15:44,639 --> 00:15:51,360
the largest we've seen i think was 40 to

00:15:47,839 --> 00:15:54,639
50 i mean numbers can always be hammered

00:15:51,360 --> 00:15:56,800
out at some point um i think the largest

00:15:54,639 --> 00:15:59,120
we saw in the field within cncf

00:15:56,800 --> 00:16:01,360
was 50 all things considered going

00:15:59,120 --> 00:16:04,320
through the full pipeline but

00:16:01,360 --> 00:16:06,880
rough that order of magnitude ish

00:16:04,320 --> 00:16:09,440
probably makes sense

00:16:06,880 --> 00:16:11,040
as a baseline it's fine a thousand might

00:16:09,440 --> 00:16:13,680
be going a bit far but i think 100 is

00:16:11,040 --> 00:16:16,079
pretty reasonable 10 will be too small

00:16:13,680 --> 00:16:16,800
yeah yeah i think 10 is too small agreed

00:16:16,079 --> 00:16:18,880
i think

00:16:16,800 --> 00:16:20,839
looking at what is in cncs but this also

00:16:18,880 --> 00:16:24,079
seems to be like a detail

00:16:20,839 --> 00:16:27,360
um for for actual

00:16:24,079 --> 00:16:27,920
work i think just creating one two three

00:16:27,360 --> 00:16:30,240
issues

00:16:27,920 --> 00:16:31,920
and and and hashing out the actual work

00:16:30,240 --> 00:16:33,440
packages from there is probably the the

00:16:31,920 --> 00:16:35,839
most prudent way

00:16:33,440 --> 00:16:37,279
uh yeah i put some of this stuff in the

00:16:35,839 --> 00:16:40,560
outer dock

00:16:37,279 --> 00:16:44,000
oh wait which dog

00:16:40,560 --> 00:16:44,000
the previous one that you created

00:16:46,240 --> 00:16:52,240
look we can link this from the from the

00:16:49,120 --> 00:16:55,199
thing from the meaning notes

00:16:52,240 --> 00:16:55,199
yeah that'd be helpful

00:16:58,720 --> 00:17:02,720
with the tool that checks in exporter

00:17:03,360 --> 00:17:08,160
yeah we like will we get enough data

00:17:06,480 --> 00:17:10,079
like are we concerned that like an

00:17:08,160 --> 00:17:13,760
exporter

00:17:10,079 --> 00:17:16,880
i know we run it and like it's such a

00:17:13,760 --> 00:17:18,799
basic set of data it's exporting that

00:17:16,880 --> 00:17:20,000
we don't check some of its other

00:17:18,799 --> 00:17:22,079
behaviors

00:17:20,000 --> 00:17:23,839
i i think that um actually it's the

00:17:22,079 --> 00:17:28,640
other one is how long it takes

00:17:23,839 --> 00:17:31,440
and i think the main thing is um

00:17:28,640 --> 00:17:32,799
basically run realistic road truth for n

00:17:31,440 --> 00:17:34,320
minutes

00:17:32,799 --> 00:17:35,919
and see what it is because obviously if

00:17:34,320 --> 00:17:37,280
someone just turns an exporter up

00:17:35,919 --> 00:17:38,000
pointing at my sequel that's doing

00:17:37,280 --> 00:17:40,799
nothing

00:17:38,000 --> 00:17:42,000
for example it's not spot issues but if

00:17:40,799 --> 00:17:43,919
realistic road

00:17:42,000 --> 00:17:45,760
and that's about you know hardly

00:17:43,919 --> 00:17:48,960
specified is going through

00:17:45,760 --> 00:17:51,520
and yeah okay

00:17:48,960 --> 00:17:53,200
so i mean like it it might even yeah

00:17:51,520 --> 00:17:54,400
that makes sense um it might even be

00:17:53,200 --> 00:17:57,840
worth at least like

00:17:54,400 --> 00:18:01,280
saying i mean we could say up front like

00:17:57,840 --> 00:18:04,080
we expect whatever test we run here

00:18:01,280 --> 00:18:04,720
for all metric types to be exported at

00:18:04,080 --> 00:18:05,679
least or

00:18:04,720 --> 00:18:07,679
like like maybe there's some

00:18:05,679 --> 00:18:08,880
prerequisites we could have on that i

00:18:07,679 --> 00:18:09,919
could see it being hard though because

00:18:08,880 --> 00:18:12,160
like you can imagine it

00:18:09,919 --> 00:18:13,280
yeah maybe my sequel exporter doesn't

00:18:12,160 --> 00:18:15,200
have a

00:18:13,280 --> 00:18:16,880
infometric or something like that yeah

00:18:15,200 --> 00:18:18,880
well that's fine we don't

00:18:16,880 --> 00:18:20,080
require exporters to have info metrics

00:18:18,880 --> 00:18:22,000
at all

00:18:20,080 --> 00:18:23,600
like what we're creating right the

00:18:22,000 --> 00:18:26,840
output is valid

00:18:23,600 --> 00:18:28,000
and b over time it doesn't do weird

00:18:26,840 --> 00:18:31,200
stuff

00:18:28,000 --> 00:18:32,480
yep yep run your regression tests

00:18:31,200 --> 00:18:34,880
against it

00:18:32,480 --> 00:18:36,160
grab grab a scrape run your regression

00:18:34,880 --> 00:18:38,000
tests again

00:18:36,160 --> 00:18:39,280
grab a scrape send us both of those to

00:18:38,000 --> 00:18:40,640
us and we see if

00:18:39,280 --> 00:18:42,720
anything odd has happened between those

00:18:40,640 --> 00:18:45,600
two yep yeah

00:18:42,720 --> 00:18:49,120
that that all sounds good i i'm the uh

00:18:45,600 --> 00:18:49,120
you could just use a prometheus right

00:18:49,919 --> 00:18:53,280
basically basically point a prometheus

00:18:51,440 --> 00:18:56,400
server at a target

00:18:53,280 --> 00:18:57,039
let it run for some amount of time and

00:18:56,400 --> 00:18:59,600
then

00:18:57,039 --> 00:19:00,080
use the prometheus servers metametrics

00:18:59,600 --> 00:19:02,400
and

00:19:00,080 --> 00:19:04,799
all and then pull all the metrics for

00:19:02,400 --> 00:19:06,320
that target and do some analysis on it

00:19:04,799 --> 00:19:08,240
i'm not sure for me this is actually

00:19:06,320 --> 00:19:09,679
gathering enough data for that

00:19:08,240 --> 00:19:11,360
i think we pretty much multiplied

00:19:09,679 --> 00:19:12,400
compliance here

00:19:11,360 --> 00:19:14,160
because we want to actually put out

00:19:12,400 --> 00:19:14,480
metric families and like it's not it's

00:19:14,160 --> 00:19:15,760
not

00:19:14,480 --> 00:19:18,320
processing anyway i think it is only

00:19:15,760 --> 00:19:20,320
those fibers

00:19:18,320 --> 00:19:22,960
yeah i would also tend to agree that

00:19:20,320 --> 00:19:25,200
this probably makes sense but also

00:19:22,960 --> 00:19:26,320
i mean part of this is just writing down

00:19:25,200 --> 00:19:28,320
what we expect to happen

00:19:26,320 --> 00:19:29,760
and and if we automate running three

00:19:28,320 --> 00:19:31,919
different things again

00:19:29,760 --> 00:19:32,799
against an exporter that also is totally

00:19:31,919 --> 00:19:35,919
fine

00:19:32,799 --> 00:19:39,600
um yeah so

00:19:35,919 --> 00:19:41,919
yeah okay yeah i just wanted i was

00:19:39,600 --> 00:19:41,919
yeah yeah

00:19:43,600 --> 00:19:47,520
i was wondering about the use case of

00:19:44,960 --> 00:19:51,600
like i don't know some someone

00:19:47,520 --> 00:19:53,600
is implementing open metrics and they

00:19:51,600 --> 00:19:54,880
they're they're they they run it against

00:19:53,600 --> 00:19:58,160
the tool and

00:19:54,880 --> 00:20:00,320
you know they only export like a few

00:19:58,160 --> 00:20:02,559
metrics um and they actually have a

00:20:00,320 --> 00:20:03,440
whole bunch of bad behaviors but it

00:20:02,559 --> 00:20:05,840
doesn't

00:20:03,440 --> 00:20:07,760
expose that behavior because it they

00:20:05,840 --> 00:20:08,400
said they put such a naive workload

00:20:07,760 --> 00:20:10,960
through it

00:20:08,400 --> 00:20:13,360
but i mean i guess yet to brian and

00:20:10,960 --> 00:20:15,360
ben's point we can just kind of like

00:20:13,360 --> 00:20:16,799
say that it should be loads that's

00:20:15,360 --> 00:20:18,880
representative of

00:20:16,799 --> 00:20:20,320
the tool like if the onus is on them if

00:20:18,880 --> 00:20:23,120
they haven't tested

00:20:20,320 --> 00:20:24,880
more of it yeah that every metric is

00:20:23,120 --> 00:20:26,320
actuated or whatever or

00:20:24,880 --> 00:20:27,360
you know like there might be some metric

00:20:26,320 --> 00:20:28,159
that pretty much is never meant to be

00:20:27,360 --> 00:20:29,360
done but yeah

00:20:28,159 --> 00:20:30,960
you're basically just putting text

00:20:29,360 --> 00:20:32,080
they're saying hey please actually use

00:20:30,960 --> 00:20:34,000
all your metrics

00:20:32,080 --> 00:20:35,520
yeah to be honest the sort of problems i

00:20:34,000 --> 00:20:36,640
expect to see would probably on

00:20:35,520 --> 00:20:38,880
be on ones that would be on their

00:20:36,640 --> 00:20:40,400
typical load anyway rather than getting

00:20:38,880 --> 00:20:42,640
out into weeds

00:20:40,400 --> 00:20:42,640
yep

00:20:44,480 --> 00:20:48,000
cool and like if we're giving

00:20:46,799 --> 00:20:49,840
certifications for 12 weeks

00:20:48,000 --> 00:20:52,320
if he does arise he can be dealt with in

00:20:49,840 --> 00:20:52,320
12 weeks

00:20:54,080 --> 00:20:57,679
cool awesome thanks for yeah that's

00:20:56,480 --> 00:21:01,200
right i just wanted to

00:20:57,679 --> 00:21:02,880
clarify all that stuff great

00:21:01,200 --> 00:21:04,720
i guess probably linting stuff as well

00:21:02,880 --> 00:21:06,960
like hey what are your units like and so

00:21:04,720 --> 00:21:06,960
on

00:21:09,039 --> 00:21:12,080
this would also make sense to just

00:21:10,480 --> 00:21:13,919
re-test then

00:21:12,080 --> 00:21:15,440
once we are at that level it also makes

00:21:13,919 --> 00:21:17,919
sense to to automate

00:21:15,440 --> 00:21:19,440
for example around be exported or try

00:21:17,919 --> 00:21:20,400
and automate around the exporters and

00:21:19,440 --> 00:21:25,039
such would be

00:21:20,400 --> 00:21:27,600
list on the website and everything

00:21:25,039 --> 00:21:29,120
um the last thing on the agenda is a

00:21:27,600 --> 00:21:32,480
little bit of a non-update

00:21:29,120 --> 00:21:35,280
itf a lot of itf members

00:21:32,480 --> 00:21:36,799
promised to write feedback and there

00:21:35,280 --> 00:21:40,640
hasn't been

00:21:36,799 --> 00:21:45,760
a lot of that so i started poking people

00:21:40,640 --> 00:21:49,280
to please friends like i promised um

00:21:45,760 --> 00:21:52,400
yeah once coupon is over

00:21:49,280 --> 00:21:54,080
um i'll do the the few minor things

00:21:52,400 --> 00:21:56,480
which which they have asked

00:21:54,080 --> 00:21:59,760
i think we can remove the the

00:21:56,480 --> 00:22:01,360
autobuilder thing from from github again

00:21:59,760 --> 00:22:03,280
because it's kind of broken all the time

00:22:01,360 --> 00:22:05,840
anyway and i can just run

00:22:03,280 --> 00:22:07,760
the the id building thing locally from

00:22:05,840 --> 00:22:13,840
the markdown

00:22:07,760 --> 00:22:13,840
um but that's basically the itf update

00:22:16,640 --> 00:22:23,200
cool cool i think that's more or less it

00:22:20,799 --> 00:22:23,200
already

00:22:23,600 --> 00:22:27,039
yeah the testing thing as well it might

00:22:25,440 --> 00:22:28,799
be worthwhile just

00:22:27,039 --> 00:22:30,080
someone with fresh eyes like you'd say

00:22:28,799 --> 00:22:31,280
just go to the doc and see if there's

00:22:30,080 --> 00:22:32,159
anything else that isn't covered by the

00:22:31,280 --> 00:22:36,080
tests

00:22:32,159 --> 00:22:36,960
yep yep as i said like the tests are

00:22:36,080 --> 00:22:38,720
designed to test

00:22:36,960 --> 00:22:39,840
the pipe and client implementation so

00:22:38,720 --> 00:22:41,039
there's probably tons of stuff i've

00:22:39,840 --> 00:22:44,240
missed just because i know

00:22:41,039 --> 00:22:46,799
internally it's not a problem yeah

00:22:44,240 --> 00:22:47,840
yeah it gives we can go through like a

00:22:46,799 --> 00:22:50,559
you know

00:22:47,840 --> 00:22:51,360
look at all the tests go like read the

00:22:50,559 --> 00:22:53,440
spec

00:22:51,360 --> 00:22:55,520
again you know just scrolling through it

00:22:53,440 --> 00:22:58,000
and just making sure that there's like

00:22:55,520 --> 00:22:58,559
major things that aren't like are

00:22:58,000 --> 00:23:01,679
missing

00:22:58,559 --> 00:23:04,480
that i'm that are missing tests

00:23:01,679 --> 00:23:04,880
yeah that and just like more explanation

00:23:04,480 --> 00:23:08,400
on

00:23:04,880 --> 00:23:11,120
how to go about the process to like

00:23:08,400 --> 00:23:12,240
do the tests yes or what i was getting

00:23:11,120 --> 00:23:14,480
at but that's very

00:23:12,240 --> 00:23:16,159
a little bit still fuzzy well now for me

00:23:14,480 --> 00:23:20,159
at least when i was looking so

00:23:16,159 --> 00:23:20,880
um we could we can we can do that while

00:23:20,159 --> 00:23:22,400
we

00:23:20,880 --> 00:23:24,159
kind of run these internally it could be

00:23:22,400 --> 00:23:26,960
like a good

00:23:24,159 --> 00:23:27,760
way to kind of get some feedback out of

00:23:26,960 --> 00:23:32,720
that

00:23:27,760 --> 00:23:34,559
yep sounds good yeah great

00:23:32,720 --> 00:23:36,159
and this this fresh eye thing is

00:23:34,559 --> 00:23:39,200
absolutely correct so

00:23:36,159 --> 00:23:41,919
i think he will be best posed to find

00:23:39,200 --> 00:23:41,919
stuff we missed

00:23:47,600 --> 00:23:51,279
is open metrics is it like a committee

00:23:49,840 --> 00:23:53,600
that works on the whole conformance

00:23:51,279 --> 00:23:56,080
program or is it

00:23:53,600 --> 00:23:58,320
or are people is that you're that's you

00:23:56,080 --> 00:23:58,320
okay

00:23:59,039 --> 00:24:03,600
i guess it's the current absolute extent

00:24:02,559 --> 00:24:05,440
of it so

00:24:03,600 --> 00:24:06,799
welcome to the club i didn't know if

00:24:05,440 --> 00:24:07,520
there was like separate people working

00:24:06,799 --> 00:24:09,600
on the other

00:24:07,520 --> 00:24:10,960
other compliance tests or if it's just

00:24:09,600 --> 00:24:13,919
like kind of yeah

00:24:10,960 --> 00:24:14,720
julius donated um the remote right stuff

00:24:13,919 --> 00:24:16,720
right

00:24:14,720 --> 00:24:18,320
no tom did the remote right and julius

00:24:16,720 --> 00:24:20,880
did the problem but that is

00:24:18,320 --> 00:24:21,919
then with the that's the prometheus

00:24:20,880 --> 00:24:25,520
compliance

00:24:21,919 --> 00:24:27,919
yeah yeah open metrics compliance uh

00:24:25,520 --> 00:24:29,919
neither of whom work on this but again

00:24:27,919 --> 00:24:32,320
also for the remote right

00:24:29,919 --> 00:24:34,480
it might make sense to just pull in all

00:24:32,320 --> 00:24:37,440
the tests of openmetrics

00:24:34,480 --> 00:24:38,320
and and and see what comes out on the

00:24:37,440 --> 00:24:41,760
other side

00:24:38,320 --> 00:24:44,240
um that might actually also be

00:24:41,760 --> 00:24:45,840
an interesting thing how would that that

00:24:44,240 --> 00:24:46,799
would mean that an implementer must

00:24:45,840 --> 00:24:49,840
accept

00:24:46,799 --> 00:24:51,039
remote right though which i don't think

00:24:49,840 --> 00:24:54,159
is going to be the case no

00:24:51,039 --> 00:24:56,080
no look at the no look at how the uh

00:24:54,159 --> 00:24:58,400
you can you can either you can do this

00:24:56,080 --> 00:25:00,400
with prometheus or the grafana agent or

00:24:58,400 --> 00:25:03,120
soon the prometheus agent

00:25:00,400 --> 00:25:04,400
they just expose everything as a static

00:25:03,120 --> 00:25:06,880
website

00:25:04,400 --> 00:25:07,840
uh or web page and then you you just

00:25:06,880 --> 00:25:10,159
ingest this and

00:25:07,840 --> 00:25:11,760
see what is emitted as remote right on

00:25:10,159 --> 00:25:14,960
the other side if you look at the test

00:25:11,760 --> 00:25:17,039
suite it's it's relatively easy to

00:25:14,960 --> 00:25:18,640
add new things yeah i think we briefly

00:25:17,039 --> 00:25:20,480
talked about this though like i mean ben

00:25:18,640 --> 00:25:21,840
was saying you could just put into

00:25:20,480 --> 00:25:24,480
prometheus and

00:25:21,840 --> 00:25:25,520
to to brian's point like it might just

00:25:24,480 --> 00:25:28,799
be easier to just

00:25:25,520 --> 00:25:29,760
be very specific very specific nuanced

00:25:28,799 --> 00:25:32,400
tests in

00:25:29,760 --> 00:25:33,279
like some python code rather than like

00:25:32,400 --> 00:25:36,480
do some

00:25:33,279 --> 00:25:38,960
you know mechanical stuff like we're

00:25:36,480 --> 00:25:38,960
talking about

00:25:41,120 --> 00:25:44,799
okay it just i guess like that's one

00:25:43,600 --> 00:25:47,200
interesting thing but

00:25:44,799 --> 00:25:49,360
it seems like we can get more specific

00:25:47,200 --> 00:25:51,919
on what we test if we actually

00:25:49,360 --> 00:25:53,760
have a thing talking directly to the to

00:25:51,919 --> 00:25:55,360
the exposure

00:25:53,760 --> 00:25:57,039
right at the end of the day what we need

00:25:55,360 --> 00:25:59,919
to test it is two scrapes

00:25:57,039 --> 00:25:59,919
a few more doesn't hurt

00:26:00,960 --> 00:26:03,360
because like the sort of thing you're

00:26:02,080 --> 00:26:04,880
testing when you're involving your

00:26:03,360 --> 00:26:06,320
prometheus is that you're testing your

00:26:04,880 --> 00:26:10,480
prometheus equivalent you're not testing

00:26:06,320 --> 00:26:12,240
the exposure

00:26:10,480 --> 00:26:14,559
also i could see that like folks would

00:26:12,240 --> 00:26:17,679
appreciate it being a very

00:26:14,559 --> 00:26:19,919
small scoped test if that makes sense

00:26:17,679 --> 00:26:21,039
like yeah if you're running if you're

00:26:19,919 --> 00:26:23,200
writing an embedded

00:26:21,039 --> 00:26:24,960
open metrics exposure it'd probably be

00:26:23,200 --> 00:26:27,039
nice that you can just

00:26:24,960 --> 00:26:28,240
run like a very small thing rather than

00:26:27,039 --> 00:26:29,840
have to set up

00:26:28,240 --> 00:26:32,480
you know things like all other things

00:26:29,840 --> 00:26:32,480
over the network

00:26:33,919 --> 00:26:36,400
actually just looking at the remote

00:26:34,880 --> 00:26:37,039
right test and wondering how it's

00:26:36,400 --> 00:26:39,360
testing for

00:26:37,039 --> 00:26:39,360
on this

00:26:40,880 --> 00:26:47,600
it's not on yet i think stairless is not

00:26:44,080 --> 00:26:47,600
yet being tested

00:26:48,480 --> 00:26:51,679
by the way i noticed in the open metric

00:26:50,080 --> 00:26:52,960
spec and definitely

00:26:51,679 --> 00:26:54,640
quite late for the next meeting now but

00:26:52,960 --> 00:26:56,159
i noticed in the open metrics there's

00:26:54,640 --> 00:26:58,640
nothing about staleness

00:26:56,159 --> 00:26:59,919
right that's correct no there is there's

00:26:58,640 --> 00:27:02,480
enough of that stillness

00:26:59,919 --> 00:27:04,000
because stillness remembers reducing

00:27:02,480 --> 00:27:06,799
internal implementation detail

00:27:04,000 --> 00:27:08,080
yeah yeah metric spec says is if

00:27:06,799 --> 00:27:11,279
something no longer exists

00:27:08,080 --> 00:27:13,600
no longer expose it yeah

00:27:11,279 --> 00:27:14,480
this touches on on part of what for the

00:27:13,600 --> 00:27:17,200
prometheus

00:27:14,480 --> 00:27:18,480
compliance uh we might end up with

00:27:17,200 --> 00:27:22,559
certain tests which are then

00:27:18,480 --> 00:27:27,279
just somewhat holistic end-to-end uh

00:27:22,559 --> 00:27:27,279
hand-wavy definition um

00:27:27,440 --> 00:27:31,360
which is why the only the combination of

00:27:29,520 --> 00:27:32,559
all relevant components in the end will

00:27:31,360 --> 00:27:34,960
then be

00:27:32,559 --> 00:27:36,480
considered prometheus compatible yeah

00:27:34,960 --> 00:27:37,520
and this is also one of the reasons why

00:27:36,480 --> 00:27:39,840
a human can use

00:27:37,520 --> 00:27:40,559
a loop because generally a time series

00:27:39,840 --> 00:27:42,720
disappearing

00:27:40,559 --> 00:27:44,080
from an exposure is not what you want to

00:27:42,720 --> 00:27:46,159
do if it's like a counter

00:27:44,080 --> 00:27:46,960
that's direct instrumentation but if

00:27:46,159 --> 00:27:48,399
you're looking at something like a file

00:27:46,960 --> 00:27:49,120
system is unmounted it's the right thing

00:27:48,399 --> 00:27:50,480
to do

00:27:49,120 --> 00:27:52,000
so a human needs to look at that and say

00:27:50,480 --> 00:27:55,279
actually no no that makes total sense or

00:27:52,000 --> 00:27:55,279
actually no no please don't do that

00:27:56,480 --> 00:27:59,840
same as rob i'm also pretty much at time

00:27:58,799 --> 00:28:01,760
um i

00:27:59,840 --> 00:28:03,120
i can drop and leave this running i

00:28:01,760 --> 00:28:03,600
don't know if the recording will still

00:28:03,120 --> 00:28:06,799
run

00:28:03,600 --> 00:28:08,720
um but i would need to drop i think

00:28:06,799 --> 00:28:12,000
we're kind of done

00:28:08,720 --> 00:28:12,640
also going yeah okay cool then thank you

00:28:12,000 --> 00:28:17,840
very much

00:28:12,640 --> 00:28:17,840

YouTube URL: https://www.youtube.com/watch?v=uGSd1SJTMCM


