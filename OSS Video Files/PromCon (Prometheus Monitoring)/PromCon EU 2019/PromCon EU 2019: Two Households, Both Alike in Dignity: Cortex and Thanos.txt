Title: PromCon EU 2019: Two Households, Both Alike in Dignity: Cortex and Thanos
Publication date: 2019-12-29
Playlist: PromCon EU 2019
Description: 
	Speakers: Bartlomiej Plotka and Tom Wilkie

Perhaps some of the success of the original Prometheus project can be attributed to the desire to keep it simple: no dependencies, no trendy distributed systems, a single binary with a simple mission. This approach left some problems unsolved - how do you scale your Prometheus installation across multiple sites? How do you ensure your metrics are durably stored for long term analysis? And how do you build a monitoring system that can transparently tolerate machine failure? In this talk, we introduce two of the most popular solutions to these problems: Cortex and Thanos. Both CNCF projects, Cortex and Thanos share many components with Prometheus, but they take a fundamentally different approach to how these pieces are joined together. This talk will help you understand the different tradeoffs these two projects have taken, give you an understanding of where each projectâ€™s strengths lie and help you decide which of these projects is best for you.

Slides: https://promcon.io/2019-munich/slides/two-households-both-alike-in-dignity-cortex-and-thanos.pdf
Captions: 
	00:00:00,650 --> 00:00:08,910
[Music]

00:00:10,140 --> 00:00:16,470
Bartek Arctic before our to our taxes

00:00:13,110 --> 00:00:21,660
okay Julius close we didn't even do that

00:00:16,470 --> 00:00:24,509
one in school start my name is Bart

00:00:21,660 --> 00:00:26,699
vodka I'm here with Tom honky-tonk is VP

00:00:24,509 --> 00:00:28,289
product of the Gulf Anna and one of the

00:00:26,699 --> 00:00:31,380
initial authors of the cortex project

00:00:28,289 --> 00:00:34,800
and I'm a software engineer at Red Hat

00:00:31,380 --> 00:00:37,019
and one of the quadrants project so

00:00:34,800 --> 00:00:39,629
today we won't you want to walk you

00:00:37,019 --> 00:00:43,229
through those two projects thymus and

00:00:39,629 --> 00:00:47,430
cortex which I would say extends from

00:00:43,229 --> 00:00:49,199
Hughes in some way and maybe talk when

00:00:47,430 --> 00:00:51,239
we go through you know kind of

00:00:49,199 --> 00:00:53,220
trade-offs and strengths each product

00:00:51,239 --> 00:00:56,850
project has from the very high-level

00:00:53,220 --> 00:00:59,940
overview and hopefully those will help

00:00:56,850 --> 00:01:02,159
you to choose what project to use if you

00:00:59,940 --> 00:01:04,949
are looking for the next long-term

00:01:02,159 --> 00:01:07,049
storage for example system and at the

00:01:04,949 --> 00:01:10,439
end we are planning to tell some

00:01:07,049 --> 00:01:12,900
exciting plans for the future so it's

00:01:10,439 --> 00:01:13,590
pretty cool so as the title states two

00:01:12,900 --> 00:01:16,110
households

00:01:13,590 --> 00:01:20,100
maybe two systems may be different but

00:01:16,110 --> 00:01:23,640
alike in the same way absolutely so just

00:01:20,100 --> 00:01:26,520
quick catch-up tano's was started almost

00:01:23,640 --> 00:01:28,980
two years ago by five in Reiner's who is

00:01:26,520 --> 00:01:31,320
somewhere here maybe in this venue for

00:01:28,980 --> 00:01:34,020
sure so if you keep meet him like say

00:01:31,320 --> 00:01:36,360
hello to him and and me it was almost

00:01:34,020 --> 00:01:39,270
two years ago and then yeah this year we

00:01:36,360 --> 00:01:41,280
also joined the CN CF sandbox stage on

00:01:39,270 --> 00:01:43,350
the other hand cortex was started year

00:01:41,280 --> 00:01:47,940
before tonneaus a three and a half years

00:01:43,350 --> 00:01:49,980
ago and by Tom and Judy's walls and yet

00:01:47,940 --> 00:01:53,490
they joined CNC of sandbox stage as well

00:01:49,980 --> 00:01:54,750
year before towers so okay before we

00:01:53,490 --> 00:02:01,770
move on some questions to the audience

00:01:54,750 --> 00:02:03,870
who is using tano's Wow I'm surprised

00:02:01,770 --> 00:02:06,030
okay so I hope we have nice discussion

00:02:03,870 --> 00:02:08,390
today on the party about current you

00:02:06,030 --> 00:02:10,560
know issue progress and discussions and

00:02:08,390 --> 00:02:11,370
plans for improvement so that's pretty

00:02:10,560 --> 00:02:15,629
cool

00:02:11,370 --> 00:02:18,799
who is using cortex yeah yeah and how

00:02:15,629 --> 00:02:18,799
many of them work for the farm labs

00:02:19,950 --> 00:02:24,910
anyway even even though like you you're

00:02:22,510 --> 00:02:27,190
running a huge scale so if you have any

00:02:24,910 --> 00:02:29,290
questions around that like crap tone or

00:02:27,190 --> 00:02:31,480
anyone from Ravana because that's

00:02:29,290 --> 00:02:33,370
exciting as well okay who is using

00:02:31,480 --> 00:02:38,280
Prometheus for Direction all good come

00:02:33,370 --> 00:02:41,230
to use Federation yeah that's good is

00:02:38,280 --> 00:02:43,120
first so that's pretty exciting as well

00:02:41,230 --> 00:02:44,830
okay some asking because going to share

00:02:43,120 --> 00:02:47,710
what are the girls who want to solve

00:02:44,830 --> 00:02:50,200
what we're actually the goals we wanted

00:02:47,710 --> 00:02:53,290
to solve where we designing the those

00:02:50,200 --> 00:02:55,030
post systems and what did we yeah what

00:02:53,290 --> 00:02:57,040
do you want to solve the session so

00:02:55,030 --> 00:02:59,670
probably everyone is familiar with those

00:02:57,040 --> 00:03:02,650
you know three dreams every prom to use

00:02:59,670 --> 00:03:06,670
user have any of your ability system

00:03:02,650 --> 00:03:09,100
actually have one to that right so first

00:03:06,670 --> 00:03:11,410
of all global view right so you know

00:03:09,100 --> 00:03:13,000
ability to do queries and aggravations

00:03:11,410 --> 00:03:15,520
over the data from the bootable from

00:03:13,000 --> 00:03:18,070
Chios servers for example you know you

00:03:15,520 --> 00:03:20,530
maybe want to have the via memory

00:03:18,070 --> 00:03:23,530
consumption for certain service over

00:03:20,530 --> 00:03:25,690
multiple multiple clusters right or or

00:03:23,530 --> 00:03:27,820
maybe average QP is fork ups of those

00:03:25,690 --> 00:03:29,800
servers across different data centers so

00:03:27,820 --> 00:03:31,420
that's that's pretty important questions

00:03:29,800 --> 00:03:33,580
to be able to solve from the single

00:03:31,420 --> 00:03:35,650
query and not manually count that one on

00:03:33,580 --> 00:03:39,430
different dashboards right or different

00:03:35,650 --> 00:03:41,770
queries so and overall you can do from

00:03:39,430 --> 00:03:46,870
Q's Federation for that and that's true

00:03:41,770 --> 00:03:49,060
however it has some painful points so we

00:03:46,870 --> 00:03:54,910
need to look for for another solution on

00:03:49,060 --> 00:03:56,500
that and we also need to users want to

00:03:54,910 --> 00:03:59,110
have prom to use to be highly available

00:03:56,500 --> 00:04:00,420
right one is that because yes monitoring

00:03:59,110 --> 00:04:03,880
is is very critical

00:04:00,420 --> 00:04:05,320
but because mainly is that you when you

00:04:03,880 --> 00:04:07,090
have an outage you don't want to have

00:04:05,320 --> 00:04:08,740
caps in your graphs right so you need to

00:04:07,090 --> 00:04:11,110
want to really want to minimize the

00:04:08,740 --> 00:04:13,510
dance downtime or the whole congestion

00:04:11,110 --> 00:04:15,190
and the query path and that's part of

00:04:13,510 --> 00:04:18,340
the release you want to learn from the

00:04:15,190 --> 00:04:20,680
past and run some you know long-term

00:04:18,340 --> 00:04:24,070
analysis on the metrics or or maybe look

00:04:20,680 --> 00:04:28,060
on the past situation that happened and

00:04:24,070 --> 00:04:30,040
then see what what are were the were the

00:04:28,060 --> 00:04:31,560
metrics and the characteristic I have

00:04:30,040 --> 00:04:34,680
back in time so for example you

00:04:31,560 --> 00:04:36,389
to compare quickly you know you have

00:04:34,680 --> 00:04:38,280
regression and you to compare what were

00:04:36,389 --> 00:04:40,770
the resources usage on the certain

00:04:38,280 --> 00:04:44,100
situation back in time or maybe you

00:04:40,770 --> 00:04:45,690
missed some metric analysis on certain

00:04:44,100 --> 00:04:47,490
post-mortem analyzes and you want to go

00:04:45,690 --> 00:04:52,169
back to that so that's pretty as a

00:04:47,490 --> 00:04:54,240
pretty pretty important stop or maybe if

00:04:52,169 --> 00:04:56,340
you want to have some you know you do

00:04:54,240 --> 00:04:58,800
some capacity planning you want to how

00:04:56,340 --> 00:05:01,410
you do that you need to compare you know

00:04:58,800 --> 00:05:03,060
maybe CPUs research user that was

00:05:01,410 --> 00:05:05,370
happening in the past during certain

00:05:03,060 --> 00:05:07,229
load and you want to see the growth of

00:05:05,370 --> 00:05:11,130
it and try to predict and how to

00:05:07,229 --> 00:05:12,960
allocate that before has and yes you can

00:05:11,130 --> 00:05:14,910
still still say that from to use local

00:05:12,960 --> 00:05:16,830
storage is just not for this purpose for

00:05:14,910 --> 00:05:18,930
the long-term storage should have people

00:05:16,830 --> 00:05:20,700
who running that for years with the

00:05:18,930 --> 00:05:23,040
heirs of the data however the tricky

00:05:20,700 --> 00:05:24,990
it's tricky to back up certain

00:05:23,040 --> 00:05:28,440
performance or other certain operations

00:05:24,990 --> 00:05:30,930
like resize and immigrations that cetera

00:05:28,440 --> 00:05:33,800
so overall both channels and cortex was

00:05:30,930 --> 00:05:36,570
built with those in mind

00:05:33,800 --> 00:05:39,840
so let's move to the to the first go

00:05:36,570 --> 00:05:43,530
global view so how we can combine those

00:05:39,840 --> 00:05:45,990
data from the multiple hue servers into

00:05:43,530 --> 00:05:50,910
one single um collaboration so to get an

00:05:45,990 --> 00:05:53,250
average yeah of the global agency or the

00:05:50,910 --> 00:05:55,470
sum of the global resource consumption

00:05:53,250 --> 00:05:57,780
or just simply count how many services I

00:05:55,470 --> 00:06:00,900
have over all my infrastructure right so

00:05:57,780 --> 00:06:03,930
basics basic use cases

00:06:00,900 --> 00:06:05,430
so let's look on the drums first let's

00:06:03,930 --> 00:06:07,710
say you have somebody above two servers

00:06:05,430 --> 00:06:09,870
and they're running engaging the

00:06:07,710 --> 00:06:13,350
separate cluster to attach tunnels you

00:06:09,870 --> 00:06:16,350
start a sidecar component in next to the

00:06:13,350 --> 00:06:19,380
confuse and supporter step you start

00:06:16,350 --> 00:06:22,590
stateless queriers services which does

00:06:19,380 --> 00:06:26,310
the global evaluation for prop romka

00:06:22,590 --> 00:06:28,320
well which fun they the query funnels to

00:06:26,310 --> 00:06:30,210
the each correspond is matched for me to

00:06:28,320 --> 00:06:33,120
use server and pulls this areas from

00:06:30,210 --> 00:06:36,300
from from the confuse through the

00:06:33,120 --> 00:06:38,130
sidecar and back to the query and this

00:06:36,300 --> 00:06:40,380
allows to finalize the query and

00:06:38,130 --> 00:06:43,020
aggregate the data over multiple sources

00:06:40,380 --> 00:06:45,020
so prefer Nana or any other clients can

00:06:43,020 --> 00:06:48,259
have access to all of the day

00:06:45,020 --> 00:06:51,440
all the from few servers have proven one

00:06:48,259 --> 00:06:54,409
query in cortex it's a bit different

00:06:51,440 --> 00:06:56,720
instead of cool we have push right so

00:06:54,409 --> 00:06:59,509
you configure primitives to string the

00:06:56,720 --> 00:07:03,349
data to cortex cluster by a remote right

00:06:59,509 --> 00:07:07,699
API in this central hub in this central

00:07:03,349 --> 00:07:09,620
cluster cortex engines the receives

00:07:07,699 --> 00:07:12,430
metrics store saves it to the disk to

00:07:09,620 --> 00:07:14,720
the storage sorry of your choice and

00:07:12,430 --> 00:07:17,150
yeah all the queries from the client to

00:07:14,720 --> 00:07:19,460
the fauna can go to the central location

00:07:17,150 --> 00:07:23,539
and then have access to all of it

00:07:19,460 --> 00:07:26,750
because everything waited to it and yes

00:07:23,539 --> 00:07:30,159
let's try to maintain justice' you know

00:07:26,750 --> 00:07:32,990
simple table comparison of of those two

00:07:30,159 --> 00:07:35,500
projects for every dimension or for

00:07:32,990 --> 00:07:37,940
every feature we are talking about and

00:07:35,500 --> 00:07:42,080
before we go to the good strengths

00:07:37,940 --> 00:07:44,030
strengths and and trade-offs let's talk

00:07:42,080 --> 00:07:46,190
about similarities right both projects

00:07:44,030 --> 00:07:47,659
I've done on cortex are using exactly

00:07:46,190 --> 00:07:49,969
the same prompt well engine

00:07:47,659 --> 00:07:51,740
implementations of produce is using the

00:07:49,969 --> 00:07:56,060
same color exposing the same query API

00:07:51,740 --> 00:07:58,819
and they use G RPC protocol for internal

00:07:56,060 --> 00:08:01,520
micro service communication so the

00:07:58,819 --> 00:08:05,419
difference is the main strengths I would

00:08:01,520 --> 00:08:10,240
say under on the tunnel side it's easy

00:08:05,419 --> 00:08:12,770
to deploy and incrementally adopt and

00:08:10,240 --> 00:08:15,590
this is because you don't need to you

00:08:12,770 --> 00:08:18,020
know create another cluster and and have

00:08:15,590 --> 00:08:21,710
maintained a right path that is scalable

00:08:18,020 --> 00:08:24,529
on the other hand cortex has this

00:08:21,710 --> 00:08:28,250
powerful feature of you know if you

00:08:24,529 --> 00:08:30,319
feature characteristic is that if one of

00:08:28,250 --> 00:08:34,459
these monetary clusters or from queues

00:08:30,319 --> 00:08:36,200
or our down or there is an outage or you

00:08:34,459 --> 00:08:38,300
know there is network but partition

00:08:36,200 --> 00:08:41,510
between you and this cluster you can

00:08:38,300 --> 00:08:43,370
still observe the data which from the

00:08:41,510 --> 00:08:45,860
centroids cortes cluster so you can

00:08:43,370 --> 00:08:48,380
maybe even figured out who would cause

00:08:45,860 --> 00:08:52,250
this outage in the first place so that's

00:08:48,380 --> 00:08:54,410
pretty powerful yeah

00:08:52,250 --> 00:08:56,209
thank you very much I must say it's a

00:08:54,410 --> 00:08:57,860
bit surreal having you present on cortex

00:08:56,209 --> 00:09:01,610
yes

00:08:57,860 --> 00:09:02,870
I feel very comfortable and now it's

00:09:01,610 --> 00:09:07,340
gonna be even more surreal to hear me

00:09:02,870 --> 00:09:09,560
talk about Alice what does that say okay

00:09:07,340 --> 00:09:11,170
multi replicas Prometheus so we should

00:09:09,560 --> 00:09:14,030
all be pretty familiar with this

00:09:11,170 --> 00:09:15,440
Prometheus is a single binary and you

00:09:14,030 --> 00:09:17,960
know only has dependencies on its disk

00:09:15,440 --> 00:09:19,010
on its network so if you need to restart

00:09:17,960 --> 00:09:20,960
that machine if you need to upgrade

00:09:19,010 --> 00:09:23,060
policÃ­as you end up with a gap in your

00:09:20,960 --> 00:09:24,220
graph is that simple and this is not

00:09:23,060 --> 00:09:26,660
nice we want to get rid of those gaps

00:09:24,220 --> 00:09:29,630
the best practices is to run a pair of

00:09:26,660 --> 00:09:37,280
Prometheus's but Prometheus service was

00:09:29,630 --> 00:09:38,210
beyond Prometheus and the sorry the but

00:09:37,280 --> 00:09:39,650
the problem is you still have these gaps

00:09:38,210 --> 00:09:40,640
depending on which one you go to right

00:09:39,650 --> 00:09:42,020
and they might be slightly out of sync

00:09:40,640 --> 00:09:45,110
because they might scrape up slightly

00:09:42,020 --> 00:09:47,420
different times so what does that do

00:09:45,110 --> 00:09:49,310
Dallas as we talked about earlier it

00:09:47,420 --> 00:09:50,930
fans the queries out and pulls the data

00:09:49,310 --> 00:09:53,060
back from each Prometheus so if you run

00:09:50,930 --> 00:09:55,220
to Prometheus with the Faneuil sidecar

00:09:53,060 --> 00:09:57,920
in each data center it will pull from

00:09:55,220 --> 00:09:59,720
both of them then at query time it will

00:09:57,920 --> 00:10:01,400
deed you between these two different

00:09:59,720 --> 00:10:03,170
sources of data and uses a really simple

00:10:01,400 --> 00:10:05,060
algorithm to figure out which one to

00:10:03,170 --> 00:10:08,060
show and basically gives you that no

00:10:05,060 --> 00:10:11,270
gaps experience what you want Cortez

00:10:08,060 --> 00:10:14,690
cortex does is differently again we push

00:10:11,270 --> 00:10:17,090
we push from pairs and then at right

00:10:14,690 --> 00:10:18,890
time to cortex we choose which pair to

00:10:17,090 --> 00:10:21,470
read to to accept the rights from so we

00:10:18,890 --> 00:10:22,100
effectively do this is actually

00:10:21,470 --> 00:10:24,110
something Callen

00:10:22,100 --> 00:10:26,060
where's counting on yeah Callum

00:10:24,110 --> 00:10:28,070
implemented this maybe the Amelia this

00:10:26,060 --> 00:10:30,350
year and this means you only store one

00:10:28,070 --> 00:10:32,630
copy of that data and then all the

00:10:30,350 --> 00:10:35,630
queries just go to that one copy it's

00:10:32,630 --> 00:10:37,190
pretty straightforward we use a net CD

00:10:35,630 --> 00:10:38,810
or a console to basically store

00:10:37,190 --> 00:10:40,610
consistently which one we're accepting

00:10:38,810 --> 00:10:44,050
examples from and then we use like a

00:10:40,610 --> 00:10:48,380
simple timeout so let's compare the two

00:10:44,050 --> 00:10:49,910
in its query time in cortex it's a right

00:10:48,380 --> 00:10:52,130
time that's about it really

00:10:49,910 --> 00:10:54,020
um they both basically give you the same

00:10:52,130 --> 00:10:56,570
solution I wouldn't I wouldn't really

00:10:54,020 --> 00:10:58,940
draw any massive differences like I

00:10:56,570 --> 00:11:01,700
think one really really my new tiny

00:10:58,940 --> 00:11:03,470
detail is like at write time basically

00:11:01,700 --> 00:11:05,840
shortly after that date has been scraped

00:11:03,470 --> 00:11:07,250
in cortex we've chosen which one to

00:11:05,840 --> 00:11:08,540
write to be chosen which one was the

00:11:07,250 --> 00:11:09,740
authoritative source we've written it to

00:11:08,540 --> 00:11:11,390
disk and that's never going to change

00:11:09,740 --> 00:11:13,760
with the fan off

00:11:11,390 --> 00:11:15,230
because your d duping a query time the

00:11:13,760 --> 00:11:17,210
result you get will actually depend on

00:11:15,230 --> 00:11:19,160
which Prometheus's are available so if

00:11:17,210 --> 00:11:20,540
both to available it's stable but if

00:11:19,160 --> 00:11:22,640
one's missing you might get a slightly

00:11:20,540 --> 00:11:24,530
different result but even then you've

00:11:22,640 --> 00:11:27,410
got to really be paying attention to to

00:11:24,530 --> 00:11:39,260
notice the difference thank you thank

00:11:27,410 --> 00:11:41,600
you yes long-term storage so how we you

00:11:39,260 --> 00:11:44,450
know solve the problem of storing mom's

00:11:41,600 --> 00:11:47,690
and here's accessing those data over

00:11:44,450 --> 00:11:49,700
time so can you raise a hand if you

00:11:47,690 --> 00:11:52,040
would like to have your data that you're

00:11:49,700 --> 00:11:53,840
strong with the prompt use log them like

00:11:52,040 --> 00:11:58,490
moans our ears would you like a

00:11:53,840 --> 00:12:01,340
long-term storage everyone like 90% but

00:11:58,490 --> 00:12:05,180
still so yeah I mean it is useful I mean

00:12:01,340 --> 00:12:08,450
I'm sure this answer depends or if on

00:12:05,180 --> 00:12:11,390
the cost of that decision right so

00:12:08,450 --> 00:12:13,100
that's important factor other still yeah

00:12:11,390 --> 00:12:14,900
everyone agree it is useful to have it

00:12:13,100 --> 00:12:17,600
we're talking about capacity planning

00:12:14,900 --> 00:12:19,340
maybe post-mortem analysis maybe you

00:12:17,600 --> 00:12:21,560
want to report your s lives right over

00:12:19,340 --> 00:12:23,720
time and compare with s ellos and you

00:12:21,560 --> 00:12:26,840
want to have this report you know per

00:12:23,720 --> 00:12:29,090
month and so having that ready to go

00:12:26,840 --> 00:12:32,680
just ad hoc and the actual query is

00:12:29,090 --> 00:12:36,260
super useful so how can also choose that

00:12:32,680 --> 00:12:39,500
Thanos well start with let's start with

00:12:36,260 --> 00:12:42,260
the prompt use right Prometheus stores

00:12:39,500 --> 00:12:44,930
the data in these DB blocks and actually

00:12:42,260 --> 00:12:48,320
forms all the those blocks every two

00:12:44,930 --> 00:12:51,400
hours in just two hours blocks which is

00:12:48,320 --> 00:12:54,800
called TSD be essentially blog and

00:12:51,400 --> 00:12:57,650
homicide card if enabled is capable to

00:12:54,800 --> 00:12:59,840
upload synchronously those blocks to the

00:12:57,650 --> 00:13:02,860
object storage of your charts can be GCS

00:12:59,840 --> 00:13:05,570
as reassure and and couple of more and

00:13:02,860 --> 00:13:07,760
thanks to dodge tongue you can set up

00:13:05,570 --> 00:13:09,920
into your centralized place store

00:13:07,760 --> 00:13:12,560
gateway which is responsible for

00:13:09,920 --> 00:13:14,780
matching the for fetching the series or

00:13:12,560 --> 00:13:17,510
selecting the series from the object

00:13:14,780 --> 00:13:21,740
storage maybe month or years of the

00:13:17,510 --> 00:13:24,320
worth of blocks from the object storage

00:13:21,740 --> 00:13:27,860
itself right additionally

00:13:24,320 --> 00:13:29,450
a nose runs compacted compaction to

00:13:27,860 --> 00:13:32,330
compact smaller blows the bigger one and

00:13:29,450 --> 00:13:35,930
each it can be extended without sounding

00:13:32,330 --> 00:13:38,740
off your chunks and at this point we're

00:13:35,930 --> 00:13:41,900
on the like again maybe a global

00:13:38,740 --> 00:13:44,630
location have both access to the fresh

00:13:41,900 --> 00:13:46,400
data from the chrome tubes and the

00:13:44,630 --> 00:13:48,980
long-term storage data from the store

00:13:46,400 --> 00:13:50,780
gateway which which graph the data

00:13:48,980 --> 00:13:52,880
directly from the object storage which

00:13:50,780 --> 00:13:55,940
is which is the only level desolate

00:13:52,880 --> 00:13:59,600
Alice at this point for Cortez for

00:13:55,940 --> 00:14:01,630
cortex this again be different you know

00:13:59,600 --> 00:14:05,390
everything is streamed to the cortex

00:14:01,630 --> 00:14:09,470
cluster and during kind of the ejection

00:14:05,390 --> 00:14:11,990
path cortex matches the samples receive

00:14:09,470 --> 00:14:13,700
samples into absorb compression chunks

00:14:11,990 --> 00:14:15,650
which are exactly the same compression

00:14:13,700 --> 00:14:19,670
format of Chrome to use and tunnels are

00:14:15,650 --> 00:14:21,890
using and you know it periodically

00:14:19,670 --> 00:14:25,520
flushes those charms into the object

00:14:21,890 --> 00:14:27,380
storage however it builds the index it

00:14:25,520 --> 00:14:29,660
has to build the index inverted index

00:14:27,380 --> 00:14:32,680
which is really similar to the psdb

00:14:29,660 --> 00:14:36,140
index that is put into the block and

00:14:32,680 --> 00:14:39,980
however it is flashed to the no SQL

00:14:36,140 --> 00:14:42,920
database now on the query on the ground

00:14:39,980 --> 00:14:46,640
the query part you know a grant client

00:14:42,920 --> 00:14:50,630
client kevanna - ports are accessing

00:14:46,640 --> 00:14:53,830
those acquiring the central cortex

00:14:50,630 --> 00:14:56,510
cluster and you know cortex then are

00:14:53,830 --> 00:15:01,100
doing the lookup from the node on the

00:14:56,510 --> 00:15:03,560
whole no SQL database so where the index

00:15:01,100 --> 00:15:05,930
is stored and I should mention that you

00:15:03,560 --> 00:15:10,160
know it could be BigTable then I'm a DBA

00:15:05,930 --> 00:15:11,600
Cassandra and lookup tells you what

00:15:10,160 --> 00:15:13,040
chunks you should read from the object

00:15:11,600 --> 00:15:16,300
storage and that's how you satisfy the

00:15:13,040 --> 00:15:19,930
query and this is overall how cortex

00:15:16,300 --> 00:15:22,910
yeah where is the long-term storage now

00:15:19,930 --> 00:15:26,150
again maybe start with similarities and

00:15:22,910 --> 00:15:28,340
this point we all use sore compression

00:15:26,150 --> 00:15:30,980
shank from Houston Austin cortex which

00:15:28,340 --> 00:15:34,210
is nice and and the main difference I

00:15:30,980 --> 00:15:36,980
would say came from the trade-off of

00:15:34,210 --> 00:15:37,580
between operation operational costs and

00:15:36,980 --> 00:15:41,990
the

00:15:37,580 --> 00:15:44,030
Gorman's now Pano's is object storage so

00:15:41,990 --> 00:15:47,290
it's the only kind of dependence it has

00:15:44,030 --> 00:15:50,690
an object storage tends to be cheaper

00:15:47,290 --> 00:15:52,880
however cortex is using no SQL databases

00:15:50,690 --> 00:15:55,730
at all which may be mostly for the

00:15:52,880 --> 00:15:58,640
indexing but still and it can lead to

00:15:55,730 --> 00:16:01,250
the better performance however as you

00:15:58,640 --> 00:16:05,270
not very know no SQL tends to cost more

00:16:01,250 --> 00:16:07,610
per iOS or data start so this is

00:16:05,270 --> 00:16:12,320
actually the maned high level difference

00:16:07,610 --> 00:16:15,470
between those two systems so we can

00:16:12,320 --> 00:16:16,280
simplify to those two to this to this

00:16:15,470 --> 00:16:18,650
one trade-off

00:16:16,280 --> 00:16:22,280
now as you can see through the all those

00:16:18,650 --> 00:16:26,720
kind of comparisons we yeah we have many

00:16:22,280 --> 00:16:30,830
overlaps but not many like overall like

00:16:26,720 --> 00:16:33,710
differences and yeah hopefully this kind

00:16:30,830 --> 00:16:35,990
of high-level comparison helps you to to

00:16:33,710 --> 00:16:38,990
to kind of map in your mind where are

00:16:35,990 --> 00:16:41,570
those systems laying and and where is it

00:16:38,990 --> 00:16:45,400
where are the trade-offs so yeah let's

00:16:41,570 --> 00:16:46,970
move forward to nice exciting stuff

00:16:45,400 --> 00:16:52,820
thank you

00:16:46,970 --> 00:16:54,890
so future so you may not know but Bartok

00:16:52,820 --> 00:16:56,750
also lives in London as do i and we like

00:16:54,890 --> 00:16:59,090
to get together plot and scheme

00:16:56,750 --> 00:17:00,950
occasionally and so we've always we've

00:16:59,090 --> 00:17:03,200
been wanting to kind of work together a

00:17:00,950 --> 00:17:05,600
lot for a for a while now and we've come

00:17:03,200 --> 00:17:07,130
up with a couple of projects that's that

00:17:05,600 --> 00:17:10,310
we started so I just want to give you a

00:17:07,130 --> 00:17:11,510
little bit of an insight into how cortex

00:17:10,310 --> 00:17:14,830
and thousand communities can work

00:17:11,510 --> 00:17:16,910
together so the first one this is pretty

00:17:14,830 --> 00:17:18,620
this is pretty straightforward we have a

00:17:16,910 --> 00:17:20,449
component in the cortex architecture

00:17:18,620 --> 00:17:23,900
called the query front-end the query

00:17:20,449 --> 00:17:26,330
front ends job is taking queries it will

00:17:23,900 --> 00:17:28,130
slice them up so that you can parallel

00:17:26,330 --> 00:17:30,890
process individual days worth of data

00:17:28,130 --> 00:17:32,090
and then it will cache the results of

00:17:30,890 --> 00:17:34,490
some of that data and you know there's a

00:17:32,090 --> 00:17:36,590
lot of detail in there about how it

00:17:34,490 --> 00:17:38,450
caches it and and how it aligns it with

00:17:36,590 --> 00:17:39,350
steps of how it recombines the results

00:17:38,450 --> 00:17:41,480
and how to make sure you don't have

00:17:39,350 --> 00:17:42,920
fresh data but if you want those details

00:17:41,480 --> 00:17:45,470
there's a blog post there's also a talk

00:17:42,920 --> 00:17:48,800
at the meetup that Bartok organizers in

00:17:45,470 --> 00:17:50,720
London actually yeah one of the pieces

00:17:48,800 --> 00:17:52,820
of work we've done recently is make it

00:17:50,720 --> 00:17:55,820
the cortex query front-end can talk to

00:17:52,820 --> 00:17:57,650
any Prometheus compatible API so you can

00:17:55,820 --> 00:17:58,909
put it in front of Prometheus you can

00:17:57,650 --> 00:18:00,559
put it in front of house and you can get

00:17:58,909 --> 00:18:02,960
all the benefits of caching and of

00:18:00,559 --> 00:18:05,630
parallelization that you do with cortex

00:18:02,960 --> 00:18:07,730
and this you know it's very sensitive to

00:18:05,630 --> 00:18:09,080
the kind of query you run but I would

00:18:07,730 --> 00:18:10,610
argue for almost every type of query

00:18:09,080 --> 00:18:12,289
this will make it faster and especially

00:18:10,610 --> 00:18:13,580
for queries that hit the cache of

00:18:12,289 --> 00:18:15,470
queries that go over very long time

00:18:13,580 --> 00:18:17,720
ranges this can make things

00:18:15,470 --> 00:18:19,159
significantly faster and it's also worth

00:18:17,720 --> 00:18:22,070
saying this is not an original idea

00:18:19,159 --> 00:18:24,799
right like trickster the Comcast

00:18:22,070 --> 00:18:26,720
projects did the caching the only reason

00:18:24,799 --> 00:18:28,370
we ended up doing our own wanting cortex

00:18:26,720 --> 00:18:30,350
was because the tricks that wasn't

00:18:28,370 --> 00:18:31,400
particularly embeddable and I understand

00:18:30,350 --> 00:18:34,190
they've actually improved that now as

00:18:31,400 --> 00:18:37,100
well yeah so that's the first point you

00:18:34,190 --> 00:18:38,120
can put you can put cortex gruntin in

00:18:37,100 --> 00:18:39,080
front of Thanos now which i think is

00:18:38,120 --> 00:18:41,000
kind of cool

00:18:39,080 --> 00:18:44,179
do you know anyone we do that a graph

00:18:41,000 --> 00:18:45,260
our laps we do as well so you should do

00:18:44,179 --> 00:18:47,690
this like it's really easy the

00:18:45,260 --> 00:18:54,470
instructions in the blog post yeah

00:18:47,690 --> 00:18:55,850
but different use documented tomorrow so

00:18:54,470 --> 00:18:58,280
this this one's really cool actually so

00:18:55,850 --> 00:19:01,190
Bartok talked about how object stores

00:18:58,280 --> 00:19:02,960
are cheaper no super stores this is you

00:19:01,190 --> 00:19:04,880
know this is not something we we shy

00:19:02,960 --> 00:19:06,950
away from and something we've always

00:19:04,880 --> 00:19:08,929
wanted to do is adopt a lot of the

00:19:06,950 --> 00:19:10,760
famous style of flushing blocks and

00:19:08,929 --> 00:19:13,429
queering blocks in object stores in

00:19:10,760 --> 00:19:14,840
cortex so I can't actually claim credit

00:19:13,429 --> 00:19:17,809
for this because this was actually done

00:19:14,840 --> 00:19:19,190
by Thor digitalocean they put a PR in

00:19:17,809 --> 00:19:21,559
that made this work and it's still kind

00:19:19,190 --> 00:19:24,110
of prototype we've merged it but you

00:19:21,559 --> 00:19:26,030
know only enable it if you're very you

00:19:24,110 --> 00:19:28,760
know kind of experimental but it works

00:19:26,030 --> 00:19:31,570
and you can now have cortex build chunks

00:19:28,760 --> 00:19:33,620
and flush them to an object store I

00:19:31,570 --> 00:19:35,120
believe right now we actually only work

00:19:33,620 --> 00:19:37,669
with AWS but that's just because of the

00:19:35,120 --> 00:19:39,500
way we've ended the conflict and he

00:19:37,669 --> 00:19:43,870
should you should eventually work is

00:19:39,500 --> 00:19:46,130
Marko it works much the most that PR

00:19:43,870 --> 00:19:47,720
yeah so you can have this flushing

00:19:46,130 --> 00:19:50,830
blocks to GCS and we can query those

00:19:47,720 --> 00:19:52,909
blocks off of GCS and you can operate

00:19:50,830 --> 00:19:54,770
cortex in a very similar way to have

00:19:52,909 --> 00:19:56,840
your very thoughts and in fact we've

00:19:54,770 --> 00:19:59,330
just used the code to do this like we've

00:19:56,840 --> 00:20:01,399
just rendered the code and an interface

00:19:59,330 --> 00:20:02,809
in the right way and this is kind of

00:20:01,399 --> 00:20:04,230
interesting I think this is kind of a

00:20:02,809 --> 00:20:05,700
bit strange and one of the

00:20:04,230 --> 00:20:08,610
things I think I'm particularly keen on

00:20:05,700 --> 00:20:10,650
here is you know a lot of the

00:20:08,610 --> 00:20:13,020
improvements we can make in cortex we

00:20:10,650 --> 00:20:14,460
focus on very large scale and the

00:20:13,020 --> 00:20:17,250
clusters are profile apps getting pretty

00:20:14,460 --> 00:20:20,160
big now and we always focused on crude

00:20:17,250 --> 00:20:21,750
forms the talk I gave earlier about the

00:20:20,160 --> 00:20:23,400
talk I gave that the meetup was all

00:20:21,750 --> 00:20:25,470
about caching and parallelization and

00:20:23,400 --> 00:20:26,549
actually I'm hoping maybe if we get time

00:20:25,470 --> 00:20:27,809
to do a little lightning talk or

00:20:26,549 --> 00:20:29,610
something call we're doing with great

00:20:27,809 --> 00:20:31,500
performance at the moment and I'm hoping

00:20:29,610 --> 00:20:32,850
we can start bringing some of that SAP

00:20:31,500 --> 00:20:34,860
house as well some of the very

00:20:32,850 --> 00:20:38,900
large-scale we run out and some of the

00:20:34,860 --> 00:20:40,919
query performance and caching and so on

00:20:38,900 --> 00:20:43,290
yeah if you want to check out for SBR

00:20:40,919 --> 00:20:44,720
it's it's link there otherwise I think

00:20:43,290 --> 00:20:54,120
we've got five minutes for questions

00:20:44,720 --> 00:20:58,200
thank you so much so we've up to 15

00:20:54,120 --> 00:21:00,150
minutes for questions yeah the previous

00:20:58,200 --> 00:21:03,179
ones finished 10 minutes any more lines

00:21:00,150 --> 00:21:04,950
works well I also do that I will make a

00:21:03,179 --> 00:21:08,220
brief plug while you're thinking of your

00:21:04,950 --> 00:21:10,020
deep and detailed questions and there is

00:21:08,220 --> 00:21:12,299
the board out there now in principle we

00:21:10,020 --> 00:21:13,919
already have enough talks for today and

00:21:12,299 --> 00:21:15,299
tomorrow depending on how fast things go

00:21:13,919 --> 00:21:17,700
but you still put things down we might

00:21:15,299 --> 00:21:18,630
end up doing more tomorrow and also

00:21:17,700 --> 00:21:21,000
apparently

00:21:18,630 --> 00:21:26,010
the novices say for expand has migrated

00:21:21,000 --> 00:21:28,309
to hash prom Khan 2019 so yeah you don't

00:21:26,010 --> 00:21:31,350
want to see it and it's not pretty

00:21:28,309 --> 00:21:33,600
don't look at that I've personally

00:21:31,350 --> 00:21:39,419
reported them all I'd know anyway

00:21:33,600 --> 00:21:40,620
first question can we just make sure the

00:21:39,419 --> 00:21:43,799
questions come from the other side now

00:21:40,620 --> 00:21:52,320
next you try to do this last year for to

00:21:43,799 --> 00:21:54,179
me querying for thoughts as it's

00:21:52,320 --> 00:21:56,070
actually clearing Prometheus does that

00:21:54,179 --> 00:22:00,059
mean that you could write a query the

00:21:56,070 --> 00:22:02,490
crashes your entire state House members

00:22:00,059 --> 00:22:05,070
everything where is that not possible

00:22:02,490 --> 00:22:06,780
for I mean we've definitely had had

00:22:05,070 --> 00:22:09,090
queries of death lingotek's yeah but it

00:22:06,780 --> 00:22:10,380
wouldn't actually crash the little

00:22:09,090 --> 00:22:12,750
restive Promethea because they're

00:22:10,380 --> 00:22:14,280
they're isolated here am i right but you

00:22:12,750 --> 00:22:15,120
know there's you can crash the central

00:22:14,280 --> 00:22:16,890
cortex cluster

00:22:15,120 --> 00:22:17,380
I wouldn't say quite easily I mean we

00:22:16,890 --> 00:22:20,590
haven't had

00:22:17,380 --> 00:22:21,760
for over a year now but I'm just don't

00:22:20,590 --> 00:22:23,530
think the last one is probably over a

00:22:21,760 --> 00:22:25,900
year ago now but yes it's possible to

00:22:23,530 --> 00:22:27,970
take down cortex Russell with her so is

00:22:25,900 --> 00:22:30,400
that potentially an advantage on the

00:22:27,970 --> 00:22:34,360
cortex side that it's that slightly more

00:22:30,400 --> 00:22:36,520
decoupled that's you might have just

00:22:34,360 --> 00:22:38,530
seen is the coupled with the query on

00:22:36,520 --> 00:22:40,960
the cortex side however nowadays

00:22:38,530 --> 00:22:44,200
essentially with a new remote suite that

00:22:40,960 --> 00:22:46,750
that we have it's harder to kill from

00:22:44,200 --> 00:22:49,120
queues itself because you have you

00:22:46,750 --> 00:22:51,160
stream those series and you can have

00:22:49,120 --> 00:22:53,800
like a timeout so yeah it's pretty hard

00:22:51,160 --> 00:22:55,600
to do to actually kill it with the weed

00:22:53,800 --> 00:23:03,930
buff this at this point but yeah

00:22:55,600 --> 00:23:03,930
technically thank you next question but

00:23:05,460 --> 00:23:10,780
yeah so question about cortex front

00:23:08,800 --> 00:23:12,550
turns and combination of tunnels last

00:23:10,780 --> 00:23:16,390
time I tried to do it I believe a month

00:23:12,550 --> 00:23:18,430
ago these implementations kind of killed

00:23:16,390 --> 00:23:22,420
all the replicas of my store a ton of

00:23:18,430 --> 00:23:26,350
stores because of Kyle cortex fronting

00:23:22,420 --> 00:23:30,640
divides query long crunch query photo

00:23:26,350 --> 00:23:33,460
day length so and basically query would

00:23:30,640 --> 00:23:36,550
hit raw data on the stores which is much

00:23:33,460 --> 00:23:38,020
more bigger much bigger lot for for this

00:23:36,550 --> 00:23:40,810
company that are you saying that it's

00:23:38,020 --> 00:23:46,090
kind of fixed or is there a workaround

00:23:40,810 --> 00:23:50,260
I mean I'm just saying you can limit the

00:23:46,090 --> 00:23:52,510
parallelization you don't want to

00:23:50,260 --> 00:23:54,340
dispatch you know 365 queries to your

00:23:52,510 --> 00:23:55,870
cluster then you just set the flag to

00:23:54,340 --> 00:23:57,490
whatever the limit is I think the

00:23:55,870 --> 00:24:03,820
defaults below those so I'm surprised

00:23:57,490 --> 00:24:07,420
you've done that as we as I kind of

00:24:03,820 --> 00:24:09,730
suggested to you but the key point is

00:24:07,420 --> 00:24:12,010
that the you know cortex doesn't have

00:24:09,730 --> 00:24:13,950
done something if as other means to just

00:24:12,010 --> 00:24:17,490
improve this path however tonneaus has

00:24:13,950 --> 00:24:22,030
so we need to think about making sure

00:24:17,490 --> 00:24:26,500
cortex from that so the caching is have

00:24:22,030 --> 00:24:29,230
I hope you can follow the contributions

00:24:26,500 --> 00:24:30,370
for that as we discovered yeah

00:24:29,230 --> 00:24:31,390
essentially we need to make sure that

00:24:30,370 --> 00:24:33,740
you know when you

00:24:31,390 --> 00:24:36,530
potentially on some data you don't spit

00:24:33,740 --> 00:24:37,940
by day but by other means and then cash

00:24:36,530 --> 00:24:40,190
in a different way it's not

00:24:37,940 --> 00:24:42,740
straightforward but definitely we need

00:24:40,190 --> 00:24:45,890
to make this path yeah easy for portal

00:24:42,740 --> 00:24:49,820
users right but for now you can just

00:24:45,890 --> 00:24:51,799
disable pass premium that's it okay I

00:24:49,820 --> 00:24:53,480
think mean I'm just I'm just anything

00:24:51,799 --> 00:24:56,179
like that splitting and the cash and

00:24:53,480 --> 00:25:07,880
quite heavily coupled so probably better

00:24:56,179 --> 00:25:11,179
off limiting the parallelization okay hi

00:25:07,880 --> 00:25:13,669
I have a question how does the learning

00:25:11,179 --> 00:25:17,210
engine work with tunnels or cortex

00:25:13,669 --> 00:25:24,140
behind can we query and alert on all the

00:25:17,210 --> 00:25:25,250
like multiple clusters and so on so yes

00:25:24,140 --> 00:25:27,860
it's a good question

00:25:25,250 --> 00:25:29,570
yeah the normally the topology is that

00:25:27,860 --> 00:25:31,160
you should keep your eyelids look at

00:25:29,570 --> 00:25:32,720
each other in the queues but you you

00:25:31,160 --> 00:25:34,940
have a good point that okay what about

00:25:32,720 --> 00:25:36,890
the global others let's say so others

00:25:34,940 --> 00:25:39,500
that use you know the pepper requires

00:25:36,890 --> 00:25:43,340
the global view essentially and yet for

00:25:39,500 --> 00:25:46,429
this we have a special panels ruler

00:25:43,340 --> 00:25:48,860
component which does you know query

00:25:46,429 --> 00:25:51,230
other to rule evaluations on top of

00:25:48,860 --> 00:25:54,140
query API and cortex is exactly the same

00:25:51,230 --> 00:25:55,700
thing and I guess you can tell us more

00:25:54,140 --> 00:25:57,700
about you know other optimizations you

00:25:55,700 --> 00:26:01,520
made for example use database for rules

00:25:57,700 --> 00:26:03,350
or like you have large kind of many

00:26:01,520 --> 00:26:10,070
different types of rules I heard about

00:26:03,350 --> 00:26:12,020
those I'm not working there it actually

00:26:10,070 --> 00:26:14,360
Jacobs and in the back he's the most

00:26:12,020 --> 00:26:17,210
recent ones I've touched it and so he

00:26:14,360 --> 00:26:18,470
fixes the next law bugs but no it's it's

00:26:17,210 --> 00:26:21,049
we have every summer story we have a

00:26:18,470 --> 00:26:23,179
ruler component and you can run and it

00:26:21,049 --> 00:26:25,549
will evaluate walls we have live data in

00:26:23,179 --> 00:26:27,679
the cortex cluster we relatively live

00:26:25,549 --> 00:26:29,540
data so you could have a great alerts

00:26:27,679 --> 00:26:30,770
there but it's Bart Excel I wouldn't

00:26:29,540 --> 00:26:32,299
advise it you should evaluate the look

00:26:30,770 --> 00:26:35,750
at the alerts in the Prometheus in my

00:26:32,299 --> 00:26:36,919
opinion yeah I mean Jacob can could go

00:26:35,750 --> 00:26:39,440
into more we've recently made it

00:26:36,919 --> 00:26:40,730
horizontally scalable and so you can run

00:26:39,440 --> 00:26:43,090
you know as many as you want and rules

00:26:40,730 --> 00:26:44,230
will be shouted out to individual rulers

00:26:43,090 --> 00:26:45,730
yeah

00:26:44,230 --> 00:26:47,590
we can store the config you know we have

00:26:45,730 --> 00:26:49,540
a config API so you can load the config

00:26:47,590 --> 00:26:50,650
in via an API and instead of complex

00:26:49,540 --> 00:26:53,530
hours but I believe you can also use

00:26:50,650 --> 00:26:54,400
concrete files and it's you know it's

00:26:53,530 --> 00:26:56,320
all there all the other stuff

00:26:54,400 --> 00:26:58,540
multi-tenant etc but it's like in

00:26:56,320 --> 00:27:02,950
general it's the same as the way that

00:26:58,540 --> 00:27:06,700
most does it uses the same code no

00:27:02,950 --> 00:27:10,230
really long-term storage how long are

00:27:06,700 --> 00:27:16,480
you committed to be compatible with

00:27:10,230 --> 00:27:17,919
archived Blanc's cortex side do you

00:27:16,480 --> 00:27:23,410
still have three years worth of data

00:27:17,919 --> 00:27:25,299
right yes so we started the project

00:27:23,410 --> 00:27:26,290
three and a half years ago and we've

00:27:25,299 --> 00:27:29,740
still got later from three and a half

00:27:26,290 --> 00:27:31,630
years ago that we can only read three

00:27:29,740 --> 00:27:35,740
years apparently but like I'd love to

00:27:31,630 --> 00:27:37,780
know why but no like we we did

00:27:35,740 --> 00:27:40,000
deprecated a couple of schemes but I

00:27:37,780 --> 00:27:41,169
believe that was not actually affecting

00:27:40,000 --> 00:27:42,630
backward compatibility because you can

00:27:41,169 --> 00:27:47,350
always read via the old schema versions

00:27:42,630 --> 00:27:49,360
yeah like long story but yeah no I mean

00:27:47,350 --> 00:27:52,150
our plan is to always be able to read

00:27:49,360 --> 00:27:53,470
data basically like as long as it

00:27:52,150 --> 00:27:55,299
doesn't become too much for burden and

00:27:53,470 --> 00:27:57,340
then we'll have to engage with community

00:27:55,299 --> 00:27:58,630
and see but I've we've got no plans to

00:27:57,340 --> 00:28:01,000
delete code which wouldn't stop is

00:27:58,630 --> 00:28:03,280
reading all data about yeah yeah but

00:28:01,000 --> 00:28:06,130
honest we use you know the t's DB blog

00:28:03,280 --> 00:28:08,110
format so we're trying to be as yeah

00:28:06,130 --> 00:28:13,210
trying to use exactly the same - link

00:28:08,110 --> 00:28:15,309
and and you know even coach in certain

00:28:13,210 --> 00:28:16,990
places it's prom accused us and since

00:28:15,309 --> 00:28:19,750
before my didn't change we don't have

00:28:16,990 --> 00:28:22,169
that problem but yes this format is also

00:28:19,750 --> 00:28:25,120
version so I guess we could rely on this

00:28:22,169 --> 00:28:28,270
yeah we had to we had to take a fork of

00:28:25,120 --> 00:28:30,690
prom ql4 early versions for the old

00:28:28,270 --> 00:28:33,040
alert version the old alert syntax

00:28:30,690 --> 00:28:35,230
because they used to be used to not use

00:28:33,040 --> 00:28:36,790
Yammer before Prometheus to da I used to

00:28:35,230 --> 00:28:38,530
use are in format so we've actually

00:28:36,790 --> 00:28:40,390
still got the ability to read

00:28:38,530 --> 00:28:43,179
Prometheus one other locals in cortex

00:28:40,390 --> 00:28:44,830
which I thought was interesting yeah but

00:28:43,179 --> 00:28:53,169
the good point need to maintain that for

00:28:44,830 --> 00:28:57,639
the long term so so in the very long run

00:28:53,169 --> 00:28:58,899
will cortex and time must become one

00:28:57,639 --> 00:29:03,369
maybe that's the implication although

00:28:58,899 --> 00:29:05,079
it's not really up to me I mean it all

00:29:03,369 --> 00:29:09,700
depends on the courage both committees

00:29:05,079 --> 00:29:11,950
and collaborations that starts now I

00:29:09,700 --> 00:29:15,329
think it's a very good step forward two

00:29:11,950 --> 00:29:17,739
days and whatever will happen let's see

00:29:15,329 --> 00:29:20,739
but I really like that you know both

00:29:17,739 --> 00:29:22,719
credits can have benefits from joining

00:29:20,739 --> 00:29:25,899
forces on minor pieces here and there

00:29:22,719 --> 00:29:32,489
who knows how future like we don't want

00:29:25,899 --> 00:29:32,489
to push anything we've tried many there

00:29:34,529 --> 00:29:40,809
the day I found some v1 rules sitting on

00:29:37,839 --> 00:29:43,169
my laptop apparently I was testing

00:29:40,809 --> 00:29:44,849
something in 2017 and never deleted them

00:29:43,169 --> 00:29:48,129
his next question

00:29:44,849 --> 00:29:52,299
oh yeah I'm not going to do that because

00:29:48,129 --> 00:30:01,539
I see what a camera is I've showed you

00:29:52,299 --> 00:30:03,249
in front of you yes look at me close I

00:30:01,539 --> 00:30:07,059
have a question which is pointing into

00:30:03,249 --> 00:30:09,909
the way how long data can be stored and

00:30:07,059 --> 00:30:13,749
also how can I make rate my out data

00:30:09,909 --> 00:30:17,049
which is potentially also three years

00:30:13,749 --> 00:30:20,679
old or older - tano's if I want to go to

00:30:17,049 --> 00:30:25,259
from a normal Prometheus set up -

00:30:20,679 --> 00:30:29,139
Prometheus data set up so mmm-hmm

00:30:25,259 --> 00:30:31,389
so if he is prone to use right now it's

00:30:29,139 --> 00:30:33,999
kind of straightforward there's a hidden

00:30:31,389 --> 00:30:36,190
flag on side card that just uploads they

00:30:33,999 --> 00:30:37,809
compacted all data so it should be

00:30:36,190 --> 00:30:39,879
straightforward and the interesting part

00:30:37,809 --> 00:30:42,700
would be to know how to do it from other

00:30:39,879 --> 00:30:44,950
systems but I guess wins on some counts

00:30:42,700 --> 00:30:46,359
on some custom code for that but yeah

00:30:44,950 --> 00:30:56,739
from Tom's perspective it should be seen

00:30:46,359 --> 00:30:58,580
your okay let's put it in another

00:30:56,739 --> 00:31:08,610
flush

00:30:58,580 --> 00:31:11,640
one night there yep I have one question

00:31:08,610 --> 00:31:15,210
about the goal of a global overview

00:31:11,640 --> 00:31:17,550
I think core tech supports multi-tenancy

00:31:15,210 --> 00:31:21,690
in a way to limit read access to the

00:31:17,550 --> 00:31:24,210
data and we are trying to get like a

00:31:21,690 --> 00:31:27,240
super user who can then read all data

00:31:24,210 --> 00:31:29,460
but we can make it work is is it

00:31:27,240 --> 00:31:31,560
possible or not yes a really good

00:31:29,460 --> 00:31:33,420
question can we have our super user

00:31:31,560 --> 00:31:35,190
access to the data so interesting thing

00:31:33,420 --> 00:31:37,190
about cortex is nowhere is there

00:31:35,190 --> 00:31:40,320
actually like a list of users run down

00:31:37,190 --> 00:31:41,970
each request you send in has a user ID

00:31:40,320 --> 00:31:44,100
header basically that says what users

00:31:41,970 --> 00:31:45,690
for and and similarly with queries that

00:31:44,100 --> 00:31:49,380
going to have you know the same user ID

00:31:45,690 --> 00:31:50,760
header so it's relatively easy to write

00:31:49,380 --> 00:31:53,340
a query into write cones that would

00:31:50,760 --> 00:31:57,120
execute query against all users that

00:31:53,340 --> 00:31:59,880
have written to the system recently but

00:31:57,120 --> 00:32:01,650
the challenge would be historically we

00:31:59,880 --> 00:32:03,840
would you know we'd need a second index

00:32:01,650 --> 00:32:05,160
basically for that so that's really I

00:32:03,840 --> 00:32:08,670
guess the only thing that's stopping us

00:32:05,160 --> 00:32:10,560
do it right now but again not something

00:32:08,670 --> 00:32:11,850
I'm I've been working on it all like I

00:32:10,560 --> 00:32:13,350
know I know something Brian over in the

00:32:11,850 --> 00:32:16,560
corner here has been pretty keen on was

00:32:13,350 --> 00:32:18,000
asked for in the past and then you know

00:32:16,560 --> 00:32:19,290
I think there's a compromise we could

00:32:18,000 --> 00:32:21,270
find that would work quickly in the

00:32:19,290 --> 00:32:23,400
longer term thing we could figure out by

00:32:21,270 --> 00:32:26,360
the end no not a not something you can

00:32:23,400 --> 00:32:26,360
do out of the box right now

00:32:27,410 --> 00:32:45,660
topher letter one or two a question not

00:32:35,370 --> 00:32:48,180
a statement when will course a nose be

00:32:45,660 --> 00:33:05,490
just a build time option of the singer

00:32:48,180 --> 00:33:07,680
binaries and also like reusing the

00:33:05,490 --> 00:33:09,330
Prometheus code is super easy and it's

00:33:07,680 --> 00:33:10,590
really it's got well-defined as the

00:33:09,330 --> 00:33:11,490
chapter insisting said like so really

00:33:10,590 --> 00:33:13,620
well-defined interface

00:33:11,490 --> 00:33:18,029
so there wouldn't even be much of a

00:33:13,620 --> 00:33:19,320
benefit from merging into prometheus you

00:33:18,029 --> 00:33:23,960
know you're just you're just ramen are

00:33:19,320 --> 00:33:27,120
you okay so I'm not feed you it's like

00:33:23,960 --> 00:33:29,220
so how many Romeo and Juliet references

00:33:27,120 --> 00:33:34,679
did I make you remove by little internal

00:33:29,220 --> 00:33:37,380
I've never actually read Romans even

00:33:34,679 --> 00:33:43,470
even I taught of a to Bartok

00:33:37,380 --> 00:33:51,720
then for cortex same water any other

00:33:43,470 --> 00:33:54,750
questions okay I I was gonna say why not

00:33:51,720 --> 00:33:56,250
merge the sidecar at least aside some of

00:33:54,750 --> 00:33:59,880
the sidecar components into communities

00:33:56,250 --> 00:34:01,230
itself yeah like it's we most remote

00:33:59,880 --> 00:34:03,690
right I see no reason why we shouldn't

00:34:01,230 --> 00:34:05,070
be merge the shipper well actually I'm

00:34:03,690 --> 00:34:07,049
thinking more the query interface the

00:34:05,070 --> 00:34:08,720
GRDC query interface makes more sense to

00:34:07,049 --> 00:34:11,040
me but yeah the shippers well we're not

00:34:08,720 --> 00:34:15,690
so did you see their faces Super Sentai

00:34:11,040 --> 00:34:17,099
right now so technically yeah the kind

00:34:15,690 --> 00:34:17,609
of sheer the shipping stuff would be

00:34:17,099 --> 00:34:20,520
fully

00:34:17,609 --> 00:34:22,080
interesting to to console area and

00:34:20,520 --> 00:34:23,220
that's another area we've been talking

00:34:22,080 --> 00:34:25,349
about collaborating on like we have a

00:34:23,220 --> 00:34:27,089
very similar interfaces like cortex for

00:34:25,349 --> 00:34:28,950
shipping chunks around on query time

00:34:27,089 --> 00:34:31,139
between in jesters and various other

00:34:28,950 --> 00:34:32,339
components and if we unified on that it

00:34:31,139 --> 00:34:33,899
would make kind of interoperability

00:34:32,339 --> 00:34:39,389
between the two systems for you straight

00:34:33,899 --> 00:34:42,899
forward okay no more questions are

00:34:39,389 --> 00:34:45,450
trolling right then it's break time for

00:34:42,899 --> 00:34:47,339
half an hour so be here again on the

00:34:45,450 --> 00:34:48,610
hour and we'll start lightning talks on

00:34:47,339 --> 00:34:52,179
time

00:34:48,610 --> 00:34:55,309
[Applause]

00:34:52,179 --> 00:34:55,309
[Music]

00:34:55,830 --> 00:35:01,890
you

00:34:56,810 --> 00:35:01,890

YouTube URL: https://www.youtube.com/watch?v=KmJnmd3K3Ws


