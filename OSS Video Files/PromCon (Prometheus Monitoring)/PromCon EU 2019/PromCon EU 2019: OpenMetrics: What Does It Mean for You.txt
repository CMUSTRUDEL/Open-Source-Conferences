Title: PromCon EU 2019: OpenMetrics: What Does It Mean for You
Publication date: 2019-12-29
Playlist: PromCon EU 2019
Description: 
	Speaker: Brian Brazil

The OpenMetrics format intends to standardise metric exposition, making it easy for both those developing and operating systems to monitor them. It is however a new format. Will it be supported by your monitoring system? Will you need to rewrite your existing instrumentation? What's needed to transition? What about 3rd party systems you don't control? How does this differ and expand, and improve on the existing Prometheus format? This session will cover all of these questions.

Slides: https://promcon.io/2019-munich/slides/openmetrics-what-does-it-mean-for-you.pdf
Captions: 
	00:00:00,650 --> 00:00:08,910
[Music]

00:00:10,150 --> 00:00:17,710
hello so starting in front of you again

00:00:14,709 --> 00:00:19,599
this time actually speaking and we're

00:00:17,710 --> 00:00:22,779
going to look at open metrics which some

00:00:19,599 --> 00:00:25,090
of you have simply heard about we're

00:00:22,779 --> 00:00:28,180
looking to MIT for more I presume you

00:00:25,090 --> 00:00:29,619
largely know who I am among the list is

00:00:28,180 --> 00:00:32,489
that I'm one of the people for the last

00:00:29,619 --> 00:00:34,989
three years now how I have been talking

00:00:32,489 --> 00:00:39,130
like once every two weeks about open

00:00:34,989 --> 00:00:40,600
metrics to try and solidify this down so

00:00:39,130 --> 00:00:42,339
last year

00:00:40,600 --> 00:00:55,769
Richie was standing up here talking

00:00:42,339 --> 00:00:58,719
about open metrics okay this is no happy

00:00:55,769 --> 00:01:00,579
will remember this moment so last year

00:00:58,719 --> 00:01:02,920
as I said Richard was up here talking

00:01:00,579 --> 00:01:04,750
about open metrics it was lot of the

00:01:02,920 --> 00:01:06,970
theory about why we're doing it but not

00:01:04,750 --> 00:01:09,070
what it actually is in the actual

00:01:06,970 --> 00:01:11,620
details which we have now almost

00:01:09,070 --> 00:01:12,610
completely worked out so what I want to

00:01:11,620 --> 00:01:15,070
take you through is how it actually

00:01:12,610 --> 00:01:16,870
matters to you what difference is going

00:01:15,070 --> 00:01:19,330
to make to you as per meatiest users and

00:01:16,870 --> 00:01:23,710
as part of the monitoring ecosystem more

00:01:19,330 --> 00:01:26,440
broadly so a recap which some of Richie

00:01:23,710 --> 00:01:28,180
covered in his modbus talk that the

00:01:26,440 --> 00:01:32,290
closest thing we've heard to a metric

00:01:28,180 --> 00:01:35,260
standard is SNMP and for its age and

00:01:32,290 --> 00:01:37,720
it's actually pretty good the data model

00:01:35,260 --> 00:01:41,290
isn't that far off prettiest like it has

00:01:37,720 --> 00:01:43,000
labels for call tables and it has lots

00:01:41,290 --> 00:01:44,980
of problems which don't help its scaling

00:01:43,000 --> 00:01:46,840
so it's very chatty and doesn't have

00:01:44,980 --> 00:01:51,070
windowing which basically means it's

00:01:46,840 --> 00:01:51,970
slow the fact that it is polar pushed or

00:01:51,070 --> 00:01:53,110
whatnot is irrelevant

00:01:51,970 --> 00:01:55,060
the fact it's very chatty without

00:01:53,110 --> 00:01:57,850
windowing and there's lots of cases

00:01:55,060 --> 00:01:59,590
where vendors might be following like

00:01:57,850 --> 00:02:02,080
the letter of the law like yes that is

00:01:59,590 --> 00:02:03,760
syntactically a valid SNMP message but

00:02:02,080 --> 00:02:06,220
why are you putting a float in a string

00:02:03,760 --> 00:02:08,140
rather than using the float standard

00:02:06,220 --> 00:02:10,060
which net was never standardized

00:02:08,140 --> 00:02:12,220
unfortunately einar's order weird stuff

00:02:10,060 --> 00:02:14,260
let's put multiple floats in there

00:02:12,220 --> 00:02:16,150
separated by commas cuz that's

00:02:14,260 --> 00:02:17,650
definitely going to be easy to parse so

00:02:16,150 --> 00:02:20,920
in many cases you end up having to parse

00:02:17,650 --> 00:02:22,900
English which is always fun because well

00:02:20,920 --> 00:02:26,530
I can't get a computer to parse English

00:02:22,900 --> 00:02:29,290
I need tell us what to do I'm and

00:02:26,530 --> 00:02:30,640
there's also various utter as various

00:02:29,290 --> 00:02:32,530
formats like staff see actually that

00:02:30,640 --> 00:02:34,900
formats pretty popular Graphite's

00:02:32,530 --> 00:02:36,970
popular and in books to be was there for

00:02:34,900 --> 00:02:38,290
a while if you want to achieve just one

00:02:36,970 --> 00:02:40,750
of them but otherwise like there isn't

00:02:38,290 --> 00:02:43,769
aren't really standard protocols that

00:02:40,750 --> 00:02:43,769
you're going to come across

00:02:45,959 --> 00:02:50,370
yeah I just didn't like those two words

00:02:51,629 --> 00:02:59,920
and so that's kind of a bit of a problem

00:02:55,209 --> 00:03:02,500
but the good news is - prettiest and

00:02:59,920 --> 00:03:05,620
particular it's text format became a de

00:03:02,500 --> 00:03:07,239
facto standard somewhere around two to

00:03:05,620 --> 00:03:10,840
three years ago to paying away where you

00:03:07,239 --> 00:03:12,819
couch it's obviously hard to measure the

00:03:10,840 --> 00:03:14,680
factor standards there is no standard

00:03:12,819 --> 00:03:16,900
for de facto standards merely the facto

00:03:14,680 --> 00:03:20,019
standard reference tractor standards and

00:03:16,900 --> 00:03:22,420
but everyone's using it like we've got

00:03:20,019 --> 00:03:24,340
all the main monitoring vendors can

00:03:22,420 --> 00:03:25,720
import this in some way even though

00:03:24,340 --> 00:03:27,310
several of them are justify a telegraph

00:03:25,720 --> 00:03:28,989
which then spits out graphite or

00:03:27,310 --> 00:03:31,810
something but they have an entry of

00:03:28,989 --> 00:03:34,840
here's how we input this and there are

00:03:31,810 --> 00:03:36,519
what 500 plus exporters that we know of

00:03:34,840 --> 00:03:38,230
that's just in the port list which is

00:03:36,519 --> 00:03:40,720
you know the unofficial list of all

00:03:38,230 --> 00:03:42,549
exporters and so that means that

00:03:40,720 --> 00:03:44,760
monitoring systems not just permit is

00:03:42,549 --> 00:03:48,340
rather than competing on we have n

00:03:44,760 --> 00:03:50,410
integrations can't compete on well are

00:03:48,340 --> 00:03:51,250
you eyes nice or we support exemplars or

00:03:50,410 --> 00:03:54,190
other things that are actually

00:03:51,250 --> 00:03:58,180
interesting rather than you know stamp

00:03:54,190 --> 00:04:00,609
collecting and that's good okay because

00:03:58,180 --> 00:04:01,930
it means we can do more Tings and focus

00:04:00,609 --> 00:04:04,090
them to more interesting problems and

00:04:01,930 --> 00:04:06,069
the introduction of labels is also

00:04:04,090 --> 00:04:08,500
pretty handy even though they were kind

00:04:06,069 --> 00:04:09,940
there would estimate P but we know it's

00:04:08,500 --> 00:04:11,230
a more standard thing that you don't

00:04:09,940 --> 00:04:14,230
have to guess the meaning of something

00:04:11,230 --> 00:04:16,060
as much so this is good and everyone the

00:04:14,230 --> 00:04:19,450
room is well aware of how for me is

00:04:16,060 --> 00:04:21,099
format is nice but there is kind of a

00:04:19,450 --> 00:04:24,520
problem with the previous text format

00:04:21,099 --> 00:04:26,530
and that is the word for Matthias so if

00:04:24,520 --> 00:04:29,400
you're going to talk out to like a

00:04:26,530 --> 00:04:31,210
network hardware vendor or something and

00:04:29,400 --> 00:04:32,830
they're going to say oh no we're gonna

00:04:31,210 --> 00:04:34,990
use that that's proprietary or if you're

00:04:32,830 --> 00:04:36,729
talking to another monitoring vendor not

00:04:34,990 --> 00:04:38,589
so much these days but really

00:04:36,729 --> 00:04:41,770
a touch that actually just drew still

00:04:38,589 --> 00:04:43,629
one vendor doing that so recently but

00:04:41,770 --> 00:04:47,080
you know it's kind of hard because why

00:04:43,629 --> 00:04:48,460
would we support our competitors so you

00:04:47,080 --> 00:04:50,110
know we don't want them continuously

00:04:48,460 --> 00:04:52,089
inventing their own things which they

00:04:50,110 --> 00:04:53,559
like doing as well because that kind of

00:04:52,089 --> 00:04:55,240
puts us back where we are where everyone

00:04:53,559 --> 00:04:56,889
has to implement an integration with

00:04:55,240 --> 00:05:00,339
every possible third party piece of

00:04:56,889 --> 00:05:02,889
software into their monitoring system so

00:05:00,339 --> 00:05:04,779
the idea then spearheaded by Richie

00:05:02,889 --> 00:05:07,449
primarily was we take the Prometheus

00:05:04,779 --> 00:05:09,819
format and we then evolve it into a

00:05:07,449 --> 00:05:12,309
neutral standard and working with

00:05:09,819 --> 00:05:15,399
engineers and people who care from other

00:05:12,309 --> 00:05:19,569
competing monitoring solutions working

00:05:15,399 --> 00:05:21,399
together really like remember myself

00:05:19,569 --> 00:05:22,479
from Paul dicks last year or talking

00:05:21,399 --> 00:05:24,099
like everyone told me at the massive

00:05:22,479 --> 00:05:26,620
beef lose you said her psyche no no it's

00:05:24,099 --> 00:05:30,339
fine it's all fine just perfectly follow

00:05:26,620 --> 00:05:32,199
technical decisions okay so as it stands

00:05:30,339 --> 00:05:33,729
there's a whole pile of companies like

00:05:32,199 --> 00:05:36,999
this is the old list from last year

00:05:33,729 --> 00:05:39,789
because I'm lazy yeah but the whole pod

00:05:36,999 --> 00:05:44,379
companies are signed on saying yes we

00:05:39,789 --> 00:05:46,180
will use this so that's good so in terms

00:05:44,379 --> 00:05:48,909
of the actual process like how do you go

00:05:46,180 --> 00:05:50,909
about creating a standard so largely we

00:05:48,909 --> 00:05:53,819
have video hubs meetings every Tuesday

00:05:50,909 --> 00:05:58,270
we cancel this Tuesday because of this

00:05:53,819 --> 00:06:00,009
and an hour normally and we also had one

00:05:58,270 --> 00:06:02,949
in-person meeting in London maybe two

00:06:00,009 --> 00:06:05,229
years back and over the years because

00:06:02,949 --> 00:06:07,599
it's been years now and they've been

00:06:05,229 --> 00:06:11,110
people from Google we've had SolarWinds

00:06:07,599 --> 00:06:13,360
we've had influx to be lots of different

00:06:11,110 --> 00:06:14,830
monitoring vendors represented at some

00:06:13,360 --> 00:06:16,360
stage to rudder because Oh have you

00:06:14,830 --> 00:06:19,509
thought about this or that or is this

00:06:16,360 --> 00:06:23,050
case covered and so on at this late

00:06:19,509 --> 00:06:24,879
stage like we're not encouraging

00:06:23,050 --> 00:06:26,259
additional attendees because the points

00:06:24,879 --> 00:06:29,589
we're talking about are very nation

00:06:26,259 --> 00:06:32,169
corner and it took us like two years

00:06:29,589 --> 00:06:34,330
just to get the idea of target labels

00:06:32,169 --> 00:06:36,219
across and just like using the word

00:06:34,330 --> 00:06:38,439
annotation is a great way to derail

00:06:36,219 --> 00:06:40,629
everything because it's like wait what

00:06:38,439 --> 00:06:42,699
type of annotation do you mean do you

00:06:40,629 --> 00:06:46,930
mean on a label name enable value a

00:06:42,699 --> 00:06:49,959
target a particular event yeah don't use

00:06:46,930 --> 00:06:50,889
the word annotation so you know at this

00:06:49,959 --> 00:06:53,169
point for Justin

00:06:50,889 --> 00:06:55,449
there's like two maybe two or three

00:06:53,169 --> 00:07:00,819
things we have to fully finalize and

00:06:55,449 --> 00:07:03,749
they're very niche questions so in terms

00:07:00,819 --> 00:07:06,999
of what the offer metric standard does

00:07:03,749 --> 00:07:08,439
the are lots of kind of warts in the

00:07:06,999 --> 00:07:11,259
original format from easiest we'd like

00:07:08,439 --> 00:07:12,939
to kind of fix one Ratish so the

00:07:11,259 --> 00:07:15,189
previous format has two different ways

00:07:12,939 --> 00:07:16,330
of doing escaping there's no way it

00:07:15,189 --> 00:07:18,580
asked them to cause implementation

00:07:16,330 --> 00:07:19,779
problems so we now have one way of doing

00:07:18,580 --> 00:07:22,389
is skipping because there's different

00:07:19,779 --> 00:07:25,569
rules for label values versus help not

00:07:22,389 --> 00:07:27,460
anymore and spacing as well it's all

00:07:25,569 --> 00:07:30,729
tightened up so you know it's much

00:07:27,460 --> 00:07:32,259
smaller tighter standard allowing for a

00:07:30,729 --> 00:07:34,210
nanosecond resolution time stamps that

00:07:32,259 --> 00:07:35,469
was a request from a fox tibi apparently

00:07:34,210 --> 00:07:38,080
is important in the financial industry

00:07:35,469 --> 00:07:42,009
and we also have supports in addition to

00:07:38,080 --> 00:07:43,990
a float 64 or floating point and in 64

00:07:42,009 --> 00:07:45,879
because it turns out if you have an

00:07:43,990 --> 00:07:49,300
hundred gigabit network interface that

00:07:45,879 --> 00:07:50,860
matters slightly and because the other

00:07:49,300 --> 00:07:53,139
hand if you are trying to measure it

00:07:50,860 --> 00:07:56,050
because like the 53 bits of mantissa you

00:07:53,139 --> 00:07:57,849
have in the float64 it's going to run

00:07:56,050 --> 00:07:59,259
out in like a day and 100 gigabit and

00:07:57,849 --> 00:08:01,839
network interface to try to measure

00:07:59,259 --> 00:08:04,060
bandwidth on the other hand it means

00:08:01,839 --> 00:08:06,909
that yes it's now off by 10 bytes on

00:08:04,060 --> 00:08:09,629
something that's doing 10 billion bytes

00:08:06,909 --> 00:08:11,680
a second so not the ended work but still

00:08:09,629 --> 00:08:15,909
this is gonna matter for some use cases

00:08:11,680 --> 00:08:17,020
so in 64 counters incidentally talking

00:08:15,909 --> 00:08:20,789
about a Christian so on there were

00:08:17,020 --> 00:08:23,439
questions from yesterday's talk around

00:08:20,789 --> 00:08:25,509
you know data accuracy and so on

00:08:23,439 --> 00:08:27,069
benchmarking and so I am currently

00:08:25,509 --> 00:08:28,029
running some benchmarks on Victoria

00:08:27,069 --> 00:08:28,750
metrics and will hopefully be able to

00:08:28,029 --> 00:08:30,819
share it later

00:08:28,750 --> 00:08:34,240
cuz I know last year asking questions so

00:08:30,819 --> 00:08:35,949
see what the answers are and so aside

00:08:34,240 --> 00:08:38,050
from that like units are now explicit

00:08:35,949 --> 00:08:39,459
there because the more metadata we can

00:08:38,050 --> 00:08:41,829
give to front ends like profanity better

00:08:39,459 --> 00:08:44,290
and they can do something with it and

00:08:41,829 --> 00:08:45,670
there's also a created for child

00:08:44,290 --> 00:08:48,070
creation this is something that Google

00:08:45,670 --> 00:08:50,949
waters from stackdriver and if you're

00:08:48,070 --> 00:08:53,560
aware of the issue of if I at the time

00:08:50,949 --> 00:08:54,579
series just appears as a counter for

00:08:53,560 --> 00:08:57,250
each doesn't know when that happened

00:08:54,579 --> 00:08:59,040
this will let us know and we may be able

00:08:57,250 --> 00:09:02,800
to get ready to do something with this

00:08:59,040 --> 00:09:05,020
it's about my handy and there's also now

00:09:02,800 --> 00:09:07,180
a long time issue

00:09:05,020 --> 00:09:10,030
we want to know if the transfer was

00:09:07,180 --> 00:09:11,590
interrupted so like if the HTTP

00:09:10,030 --> 00:09:13,300
connection just died in the middle and

00:09:11,590 --> 00:09:15,610
there was no content link too much we

00:09:13,300 --> 00:09:17,830
can't tell you know depending on exactly

00:09:15,610 --> 00:09:19,390
where it stops we might not be able to

00:09:17,830 --> 00:09:20,950
tell was interrupted or if that was

00:09:19,390 --> 00:09:23,920
everything so there's an explicit end

00:09:20,950 --> 00:09:25,300
the file and notation in there so we

00:09:23,920 --> 00:09:26,320
actually checked that because you do not

00:09:25,300 --> 00:09:29,200
want to have to try and deal with

00:09:26,320 --> 00:09:31,720
partial metrics it's terribly possible

00:09:29,200 --> 00:09:34,090
but practically you know you just can't

00:09:31,720 --> 00:09:35,590
figure it out the mats it's too hard cuz

00:09:34,090 --> 00:09:37,270
it's like hey we don't order it is and

00:09:35,590 --> 00:09:41,080
the random pile of stuff is disappearing

00:09:37,270 --> 00:09:42,330
every time good look or it failed one of

00:09:41,080 --> 00:09:45,880
those much easier to deal with

00:09:42,330 --> 00:09:48,040
we're also have made optional the final

00:09:45,880 --> 00:09:50,920
new line because that is probably the

00:09:48,040 --> 00:09:52,000
most common mistake that's been made in

00:09:50,920 --> 00:09:53,710
terms of writing a client library is

00:09:52,000 --> 00:09:55,630
forgetting the trailing newline on the

00:09:53,710 --> 00:09:57,040
last line so it's one place where we've

00:09:55,630 --> 00:09:59,140
actually made the spec a little looser

00:09:57,040 --> 00:10:01,780
just because we saw that mistake being

00:09:59,140 --> 00:10:04,360
made so often in terms of beauty is for

00:10:01,780 --> 00:10:07,030
rush and there were considerations in

00:10:04,360 --> 00:10:09,100
there for both push and pull like it is

00:10:07,030 --> 00:10:11,380
agnostic it's a transfer format with

00:10:09,100 --> 00:10:14,350
some extra considerations on top so like

00:10:11,380 --> 00:10:15,580
for pool like B and for top-down service

00:10:14,350 --> 00:10:17,290
discovery we don't want target labels

00:10:15,580 --> 00:10:19,390
put in everything because that breaks

00:10:17,290 --> 00:10:20,830
things but push kind of needs that stuff

00:10:19,390 --> 00:10:22,060
also so we've kind of talked about all

00:10:20,830 --> 00:10:22,980
this stuff and how to make it work for

00:10:22,060 --> 00:10:25,600
everyone

00:10:22,980 --> 00:10:27,220
well that and there's also optional

00:10:25,600 --> 00:10:29,200
support for protobufs which is kind of

00:10:27,220 --> 00:10:32,620
dropped out of prometheus come back

00:10:29,200 --> 00:10:34,839
again and open metrics now what's new

00:10:32,620 --> 00:10:38,530
and as it's been hinted already and

00:10:34,839 --> 00:10:41,440
reiterated by Richie is exemplars so

00:10:38,530 --> 00:10:44,380
this is an example of this you can see

00:10:41,440 --> 00:10:46,810
our new creation is here and here after

00:10:44,380 --> 00:10:49,660
these buckets you can see there's a hash

00:10:46,810 --> 00:10:53,110
a label set and value so this is an

00:10:49,660 --> 00:10:57,370
exemplar saying that hey in this bucket

00:10:53,110 --> 00:10:58,900
here that number is too large anyway I

00:10:57,370 --> 00:11:01,270
was looking at this number and so that

00:10:58,900 --> 00:11:02,710
one it's ground pretend it's smaller

00:11:01,270 --> 00:11:04,440
number but saying it hey there's an

00:11:02,710 --> 00:11:07,720
Allpoint for tree in this bucket and

00:11:04,440 --> 00:11:09,130
this is the ID of the trace so you can

00:11:07,720 --> 00:11:11,470
can go to Jaeger or your logs and

00:11:09,130 --> 00:11:12,700
whatnot and got it up back and same

00:11:11,470 --> 00:11:15,310
principle there you can also have a

00:11:12,700 --> 00:11:17,140
timestamp here and there are limits here

00:11:15,310 --> 00:11:18,579
to fred people abusing it but that's the

00:11:17,140 --> 00:11:20,199
basic idea that we're

00:11:18,579 --> 00:11:23,350
yep the less than ten bucket there's

00:11:20,199 --> 00:11:24,819
this it's 2.7 yeah

00:11:23,350 --> 00:11:26,739
I'll fix that afterwards before I put

00:11:24,819 --> 00:11:28,989
them up and otherwise like you got your

00:11:26,739 --> 00:11:33,220
camp near some unusual and food creation

00:11:28,989 --> 00:11:34,929
as I said in seconds so that's when we

00:11:33,220 --> 00:11:36,850
pretty exciting and as was mentioned as

00:11:34,929 --> 00:11:38,889
well by gruesome there's a pee or from

00:11:36,850 --> 00:11:40,899
yesterday and adding support actually

00:11:38,889 --> 00:11:44,019
parse the exemplars in permit eases

00:11:40,899 --> 00:11:46,089
internal thingy now this is the

00:11:44,019 --> 00:11:51,639
important slide how do you know that it

00:11:46,089 --> 00:11:55,059
says it breaking changes the big change

00:11:51,639 --> 00:11:57,189
that is going to by people is that

00:11:55,059 --> 00:11:59,290
because we add the dis created thing the

00:11:57,189 --> 00:12:02,799
current convention the counters ended in

00:11:59,290 --> 00:12:03,999
underscore total is now mandatory so if

00:12:02,799 --> 00:12:07,809
you're already following this convention

00:12:03,999 --> 00:12:10,569
everything's fine however for the rest

00:12:07,809 --> 00:12:12,429
world which is a lot of people and you

00:12:10,569 --> 00:12:13,809
will find that going to apply to every

00:12:12,429 --> 00:12:17,429
we'll have I have the disc underscore

00:12:13,809 --> 00:12:21,309
total for you in a nice transparent way

00:12:17,429 --> 00:12:23,199
so yeah so be aware of that and the

00:12:21,309 --> 00:12:25,239
other ting time stamps in the format are

00:12:23,199 --> 00:12:27,189
in seconds rather than milliseconds now

00:12:25,239 --> 00:12:29,709
just for consistency I have what time

00:12:27,189 --> 00:12:32,079
stamps are pretty rarely used so I'm not

00:12:29,709 --> 00:12:33,399
expecting any impact here the total is

00:12:32,079 --> 00:12:35,589
going to be the main thing I think for

00:12:33,399 --> 00:12:38,049
people because as soon as a client

00:12:35,589 --> 00:12:39,610
library it starts supporting the open

00:12:38,049 --> 00:12:41,259
metrics data model as this thing from

00:12:39,610 --> 00:12:49,540
the from easiest data model that's gonna

00:12:41,259 --> 00:12:50,679
flip so where are we today this is

00:12:49,540 --> 00:12:53,679
obviously slightly out of date as of

00:12:50,679 --> 00:12:56,019
yesterday so the previous Python client

00:12:53,679 --> 00:12:57,369
is the reference implementation of open

00:12:56,019 --> 00:12:58,959
metrics so it's using the open metrics

00:12:57,369 --> 00:13:02,410
data module internally it's going to add

00:12:58,959 --> 00:13:05,439
your total if you haven't and so that's

00:13:02,410 --> 00:13:08,379
their Prometheus since for about a year

00:13:05,439 --> 00:13:10,449
now and will negotiate for open metrics

00:13:08,379 --> 00:13:12,399
from scraping so basically if you have a

00:13:10,449 --> 00:13:13,809
recent Prometheus with a recent previous

00:13:12,399 --> 00:13:15,160
client library they're going to be

00:13:13,809 --> 00:13:17,549
speaking open metrics to each other

00:13:15,160 --> 00:13:21,569
rather than Prometheus text format and

00:13:17,549 --> 00:13:25,779
this is invisible to you that's good

00:13:21,569 --> 00:13:27,579
there are two kind of patterns we have

00:13:25,779 --> 00:13:29,319
four basically for handling strings in

00:13:27,579 --> 00:13:31,809
Prometheus that we've seen the info

00:13:29,319 --> 00:13:32,650
metric like Prometheus build info and so

00:13:31,809 --> 00:13:34,990
on

00:13:32,650 --> 00:13:36,610
and also enums which actually 18 kinda

00:13:34,990 --> 00:13:39,250
started in cube state metrics and

00:13:36,610 --> 00:13:43,450
they're now first-class features within

00:13:39,250 --> 00:13:44,620
OPA metrics and the Python client so you

00:13:43,450 --> 00:13:45,820
can just use them as much more

00:13:44,620 --> 00:13:47,320
user-friendly than trying to do it by

00:13:45,820 --> 00:13:48,850
hand like particularly the enum you

00:13:47,320 --> 00:13:50,260
don't have to worry about making sure

00:13:48,850 --> 00:13:51,490
only one of them assess because that's

00:13:50,260 --> 00:13:53,380
now all being handled for you by the

00:13:51,490 --> 00:13:56,980
code because I've written at once you

00:13:53,380 --> 00:13:58,660
don't need to worry and if you are going

00:13:56,980 --> 00:13:59,770
about it for meatiest text format for

00:13:58,660 --> 00:14:02,410
whatever reason it just gracefully

00:13:59,770 --> 00:14:05,200
downgrades so yep their gauges instead

00:14:02,410 --> 00:14:07,090
of being info or state set so we get the

00:14:05,200 --> 00:14:09,100
benefit of these new types and better

00:14:07,090 --> 00:14:11,440
api at a programming level and you can

00:14:09,100 --> 00:14:13,840
still expose the daughter stuff and as

00:14:11,440 --> 00:14:15,280
well the Python client sparser it can be

00:14:13,840 --> 00:14:18,120
used to test exposition compliance

00:14:15,280 --> 00:14:21,160
because it is a very very strict parser

00:14:18,120 --> 00:14:23,620
unlike the text format one Python which

00:14:21,160 --> 00:14:26,920
is look we guarantee will accept valid

00:14:23,620 --> 00:14:28,330
in push this one is we guarantee you

00:14:26,920 --> 00:14:30,670
will accept valid input and we guarantee

00:14:28,330 --> 00:14:32,140
we will reject invalid push because it's

00:14:30,670 --> 00:14:36,580
the reference processor it has to be

00:14:32,140 --> 00:14:38,980
strict in terms of other implementations

00:14:36,580 --> 00:14:40,750
data dog actually supports ingestion of

00:14:38,980 --> 00:14:41,950
over metrics because we're using the

00:14:40,750 --> 00:14:43,450
Python parser and they've actually

00:14:41,950 --> 00:14:45,460
interpreted quite a few performance

00:14:43,450 --> 00:14:48,070
improvements chewed the Python parser

00:14:45,460 --> 00:14:50,080
probe metrics as they did previously for

00:14:48,070 --> 00:14:52,180
a radius format so no gosh is like three

00:14:50,080 --> 00:14:56,680
times faster which is always good to see

00:14:52,180 --> 00:14:58,720
and open calamity as mentioned it plans

00:14:56,680 --> 00:15:00,340
the supporting a pile of stuff but one

00:14:58,720 --> 00:15:03,460
of them is it will support open metrics

00:15:00,340 --> 00:15:07,750
exposition for metrics it's an idea

00:15:03,460 --> 00:15:09,310
anyway metrics and so you'll be able to

00:15:07,750 --> 00:15:11,200
use it together like there's all the

00:15:09,310 --> 00:15:13,450
confusion as to how open telemetry and

00:15:11,200 --> 00:15:15,280
open metrics interact and like they're

00:15:13,450 --> 00:15:17,470
complementary things we're an output

00:15:15,280 --> 00:15:19,330
format they're a tracing systems with

00:15:17,470 --> 00:15:22,000
those logging in stuff so we're just now

00:15:19,330 --> 00:15:25,210
perform at largely and one thing I have

00:15:22,000 --> 00:15:27,040
noticed a fair bit and both reviewing

00:15:25,210 --> 00:15:29,500
CFPs for cue Connor what not and just

00:15:27,040 --> 00:15:31,350
generally online is projects will talk

00:15:29,500 --> 00:15:32,890
about supporting open metrics exposition

00:15:31,350 --> 00:15:34,390
but they don't

00:15:32,890 --> 00:15:37,030
while they're actually exposing its

00:15:34,390 --> 00:15:38,440
radius text format now it's good the

00:15:37,030 --> 00:15:40,270
people are supporting it from his text

00:15:38,440 --> 00:15:44,920
format the more the merrier but that's

00:15:40,270 --> 00:15:46,600
kind of confusing so I'm going to show

00:15:44,920 --> 00:15:49,750
you one way you can spot

00:15:46,600 --> 00:15:51,580
is here so here we have Prometheus

00:15:49,750 --> 00:15:53,650
someone's following the convention so

00:15:51,580 --> 00:15:57,100
it's two seconds total is a counter and

00:15:53,650 --> 00:15:59,950
it's few seconds total and a value so

00:15:57,100 --> 00:16:01,720
open metrics this unit here is called

00:15:59,950 --> 00:16:04,210
few seconds and the underscore total is

00:16:01,720 --> 00:16:06,280
a suffix so the metric name here and

00:16:04,210 --> 00:16:07,750
here like this is the metric name the

00:16:06,280 --> 00:16:09,850
time series name they're different for

00:16:07,750 --> 00:16:12,160
discounters so that's one way to spot it

00:16:09,850 --> 00:16:14,160
like in Prometheus it was the few

00:16:12,160 --> 00:16:16,420
seconds and it just be still few seconds

00:16:14,160 --> 00:16:17,560
and something else that'll typically

00:16:16,420 --> 00:16:19,420
they're like it is technically optional

00:16:17,560 --> 00:16:21,190
but to create a time series is there

00:16:19,420 --> 00:16:24,490
that's a good sign that at least the

00:16:21,190 --> 00:16:26,620
data model is open metrics and this unit

00:16:24,490 --> 00:16:31,570
is specific to open metrics so here the

00:16:26,620 --> 00:16:32,650
unit is seconds yeah two seconds has

00:16:31,570 --> 00:16:35,110
units of seconds the Kansas City

00:16:32,650 --> 00:16:38,380
underscores where the things line up so

00:16:35,110 --> 00:16:40,060
also you've got this AOF on the ends to

00:16:38,380 --> 00:16:43,030
signal yes yes this is definitely I

00:16:40,060 --> 00:16:45,340
didn't get interrupted bid transfer so

00:16:43,030 --> 00:16:47,710
if you kind of see Eunice and EOF and

00:16:45,340 --> 00:16:49,780
things are underscore total you can be

00:16:47,710 --> 00:16:52,510
pretty sure that that is open metrics

00:16:49,780 --> 00:16:53,530
rather than Prometheus format just so

00:16:52,510 --> 00:16:55,540
you know what you're actually getting

00:16:53,530 --> 00:16:58,780
like things should the gray gracefully

00:16:55,540 --> 00:17:01,620
stall should be okay but best name

00:16:58,780 --> 00:17:01,620
things what they actually are

00:17:02,490 --> 00:17:07,839
so the standard like because our goal is

00:17:05,860 --> 00:17:10,329
to become a standard and you know it

00:17:07,839 --> 00:17:12,130
kind of probably feels that we've been

00:17:10,329 --> 00:17:15,730
locked in a room for two three years and

00:17:12,130 --> 00:17:16,900
nothing has happened or we used VC so

00:17:15,730 --> 00:17:20,650
we're technically locked in several

00:17:16,900 --> 00:17:23,140
rooms and the basic text format spec is

00:17:20,650 --> 00:17:26,140
done like the actual principle of the

00:17:23,140 --> 00:17:28,300
spec and the proko is me looked at in

00:17:26,140 --> 00:17:31,180
terms of actually writing a draft for

00:17:28,300 --> 00:17:33,490
the RFC basically we're getting delayed

00:17:31,180 --> 00:17:34,690
by life so obviously Richie is building

00:17:33,490 --> 00:17:36,490
his data center then having his

00:17:34,690 --> 00:17:37,690
intelligence there in my case for

00:17:36,490 --> 00:17:40,750
example we thought we'd have a draft

00:17:37,690 --> 00:17:43,360
ready for this then my sister was kind

00:17:40,750 --> 00:17:44,980
enough to announce her engagement and

00:17:43,360 --> 00:17:45,460
that she was getting married in ten days

00:17:44,980 --> 00:17:48,490
time

00:17:45,460 --> 00:17:51,610
so anyway one quick transatlantic trip

00:17:48,490 --> 00:17:53,860
later yeah took it out of me and then

00:17:51,610 --> 00:17:56,080
shortened hauled it went girlfriend and

00:17:53,860 --> 00:17:59,800
then I was doing gaming for 36 hours

00:17:56,080 --> 00:18:00,820
over 72 hours that didn't do well for my

00:17:59,800 --> 00:18:02,710
health so yeah

00:18:00,820 --> 00:18:04,509
covering from all aspect so hopefully

00:18:02,710 --> 00:18:06,220
we'll get to it but basically there's a

00:18:04,509 --> 00:18:07,539
lotta more it's missing we have all the

00:18:06,220 --> 00:18:09,759
decisions they're all sitting in github

00:18:07,539 --> 00:18:11,919
and in our extensive meeting notes

00:18:09,759 --> 00:18:13,960
we just need to convert them to English

00:18:11,919 --> 00:18:17,259
and wordsmith it so hope you'll get that

00:18:13,960 --> 00:18:20,440
soon in general in terms of compliance

00:18:17,259 --> 00:18:21,940
testing because like well as matbus you

00:18:20,440 --> 00:18:23,529
won't actually test things work and are

00:18:21,940 --> 00:18:25,120
following the standards and the

00:18:23,529 --> 00:18:28,750
recommendations as well let me visit the

00:18:25,120 --> 00:18:32,679
considerations and the Python parser can

00:18:28,750 --> 00:18:36,669
be used to verify exposition and then

00:18:32,679 --> 00:18:38,500
we're also Rob is doing a taking

00:18:36,669 --> 00:18:40,450
basically the unit tests for the Python

00:18:38,500 --> 00:18:42,370
parser and making that into a test as

00:18:40,450 --> 00:18:43,539
well for parsers it's like okay you

00:18:42,370 --> 00:18:46,240
should accept this input you should

00:18:43,539 --> 00:18:47,740
reject this one because one of the thing

00:18:46,240 --> 00:18:52,419
we want to watch out that happened with

00:18:47,740 --> 00:18:53,919
SNMP is vendors taking liberties so if

00:18:52,419 --> 00:18:56,710
we can spot these both things they're

00:18:53,919 --> 00:18:58,509
definitely wrong and then there's other

00:18:56,710 --> 00:19:00,129
places where we can say hey we've

00:18:58,509 --> 00:19:01,690
noticed that all these metrics have the

00:19:00,129 --> 00:19:04,990
exact same label or the exact same

00:19:01,690 --> 00:19:06,220
prefix are you sure that's right and

00:19:04,990 --> 00:19:07,870
that sort of thing to hopefully

00:19:06,220 --> 00:19:09,580
encourage people in the right direction

00:19:07,870 --> 00:19:11,230
like it's not a violation of the letter

00:19:09,580 --> 00:19:13,179
of the standard but we've clearly

00:19:11,230 --> 00:19:14,559
written down discourage or we'll have

00:19:13,179 --> 00:19:18,250
written down a spirit but life gets out

00:19:14,559 --> 00:19:21,460
of the way so the next steps are course

00:19:18,250 --> 00:19:24,190
to complete the draft RFC then we'll

00:19:21,460 --> 00:19:26,080
hopefully bring it to the IETF and we're

00:19:24,190 --> 00:19:28,090
looking to get more open metric support

00:19:26,080 --> 00:19:30,159
in more permittees client libraries and

00:19:28,090 --> 00:19:32,200
I probably won't detail more we should

00:19:30,159 --> 00:19:33,399
do for media self is considering some

00:19:32,200 --> 00:19:36,129
exempt our support that's still

00:19:33,399 --> 00:19:38,169
technically true because I haven't

00:19:36,129 --> 00:19:41,139
gotten the chance to respond to P or for

00:19:38,169 --> 00:19:42,639
some reason and of course we're looking

00:19:41,139 --> 00:19:43,929
at I think refine and loking and so on

00:19:42,639 --> 00:19:45,820
are looking to use all this stuff

00:19:43,929 --> 00:19:50,110
considering they're the ones working on

00:19:45,820 --> 00:19:52,679
this you just told me someone just told

00:19:50,110 --> 00:19:55,240
me to calm was working on this stuff oh

00:19:52,679 --> 00:19:56,799
yeah but if we can get this sort of

00:19:55,240 --> 00:20:00,519
integration working all the way true

00:19:56,799 --> 00:20:02,110
that will be pretty nice and so in

00:20:00,519 --> 00:20:04,269
general when you are transitioning to

00:20:02,110 --> 00:20:06,309
open metrics I would suggest now you

00:20:04,269 --> 00:20:08,200
start getting underscore totally in for

00:20:06,309 --> 00:20:10,720
counseling control how that change goes

00:20:08,200 --> 00:20:12,549
out rather than someone upgrading the

00:20:10,720 --> 00:20:14,590
Python client or subsequently Java or

00:20:12,549 --> 00:20:16,029
zoom LIGO work the same way so you can

00:20:14,590 --> 00:20:18,220
show that changed rather than happen by

00:20:16,029 --> 00:20:20,860
subtle otherwise if you use an existing

00:20:18,220 --> 00:20:23,740
client library this is a no op nothing

00:20:20,860 --> 00:20:25,390
for you to worry about now if you're not

00:20:23,740 --> 00:20:26,919
using a client library or you're some

00:20:25,390 --> 00:20:28,570
third party vendor like the readiest

00:20:26,919 --> 00:20:30,130
text format is simple that's one of its

00:20:28,570 --> 00:20:31,419
big advantages and why we both know it

00:20:30,130 --> 00:20:33,580
rather than something more compressed or

00:20:31,419 --> 00:20:38,620
complicated is it you can just bang it

00:20:33,580 --> 00:20:41,140
out in echo and bash or whatnot at some

00:20:38,620 --> 00:20:42,610
point paradius is going to change its

00:20:41,140 --> 00:20:44,020
default presumption when it's parsing

00:20:42,610 --> 00:20:46,059
like if you don't send a content type

00:20:44,020 --> 00:20:47,620
at some point we'll start presuming it's

00:20:46,059 --> 00:20:49,750
open metrics rather than parameters for

00:20:47,620 --> 00:20:51,669
much so please set the right content

00:20:49,750 --> 00:20:53,919
type similarly if you're trying to

00:20:51,669 --> 00:20:55,960
scrape things at some point the client

00:20:53,919 --> 00:20:58,270
libraries will switch from giving you

00:20:55,960 --> 00:21:00,130
four media's text format by default to

00:20:58,270 --> 00:21:01,450
giving you open metrics by default so

00:21:00,130 --> 00:21:03,640
once again set your accept header

00:21:01,450 --> 00:21:05,919
appropriately so it's all just standard

00:21:03,640 --> 00:21:07,149
HTTP call to negotiation I will have

00:21:05,919 --> 00:21:08,830
appropriate warnings before this

00:21:07,149 --> 00:21:10,120
happened like we're meant to person I

00:21:08,830 --> 00:21:11,980
don't notice about this a year ago we

00:21:10,120 --> 00:21:14,830
forgot so it'll be at least year from

00:21:11,980 --> 00:21:15,880
now but get in your accept headers make

00:21:14,830 --> 00:21:18,460
sure your content type headers are

00:21:15,880 --> 00:21:19,570
correct now if you're some tired party

00:21:18,460 --> 00:21:23,830
who's not using one of the existing

00:21:19,570 --> 00:21:26,320
client libraries and at that point I'm

00:21:23,830 --> 00:21:34,210
going to open up for questions

00:21:26,320 --> 00:21:34,210
[Applause]

00:21:40,490 --> 00:21:46,260
it's the is this time they're already

00:21:42,960 --> 00:21:48,179
ready enough for the other client

00:21:46,260 --> 00:21:56,580
libraries to start implementing this

00:21:48,179 --> 00:21:59,279
this new output format it's good enough

00:21:56,580 --> 00:22:00,330
for what's there but yeah like that's

00:21:59,279 --> 00:22:02,789
the diesel can be changed afterwards

00:22:00,330 --> 00:22:05,010
it's also like Paul fearing stuff out

00:22:02,789 --> 00:22:07,019
for the Python client it's better to

00:22:05,010 --> 00:22:08,279
have one client for taking those details

00:22:07,019 --> 00:22:11,309
right rather than breaking a whole pot

00:22:08,279 --> 00:22:12,389
of users so like I'll do Java at some

00:22:11,309 --> 00:22:15,799
point but it's going to be breaking

00:22:12,389 --> 00:22:19,559
changes so okay this stuff follow Matt

00:22:15,799 --> 00:22:21,960
hi are you aware of when kubernetes

00:22:19,559 --> 00:22:25,080
metric server will transition to open

00:22:21,960 --> 00:22:27,539
metrics standard presumably once the

00:22:25,080 --> 00:22:29,730
format is added to client go lying and

00:22:27,539 --> 00:22:31,980
they upgrade like this is going to be

00:22:29,730 --> 00:22:40,440
seamless largely under the underscore

00:22:31,980 --> 00:22:41,549
total thank you maybe I missed us I

00:22:40,440 --> 00:22:44,760
think it was related to when you talk

00:22:41,549 --> 00:22:45,990
about kind of typing except um ah are

00:22:44,760 --> 00:22:47,940
you thinking about is there actually

00:22:45,990 --> 00:22:49,980
explicit version numbers in the open

00:22:47,940 --> 00:22:55,409
metrics and are you considering that do

00:22:49,980 --> 00:22:56,490
for future compatibility so yes there

00:22:55,409 --> 00:22:58,200
isn't a personal number is I think this

00:22:56,490 --> 00:23:00,210
is zero zero one or something whatever

00:22:58,200 --> 00:23:02,490
version it is it isn't standard and the

00:23:00,210 --> 00:23:05,549
idea is - you have to be able to grade

00:23:02,490 --> 00:23:07,409
down because Park the idea as well is

00:23:05,549 --> 00:23:09,299
that you don't want to have binary

00:23:07,409 --> 00:23:10,950
formats there are a special parsing

00:23:09,299 --> 00:23:12,570
everything like everything should break

00:23:10,950 --> 00:23:13,980
down to a counter or page and so you'll

00:23:12,570 --> 00:23:18,600
send that or they'll be an except you'll

00:23:13,980 --> 00:23:20,100
send in this version was better to keep

00:23:18,600 --> 00:23:22,010
in mind as well is that we'll be far

00:23:20,100 --> 00:23:25,110
fewer parsers and all be generators

00:23:22,010 --> 00:23:27,000
hello um are we come is there gonna be

00:23:25,110 --> 00:23:28,260
open metrics client libraries or is it

00:23:27,000 --> 00:23:30,120
just gonna be the Prometheus client

00:23:28,260 --> 00:23:31,799
libraries not sure we fully settled as

00:23:30,120 --> 00:23:33,120
it stands it looks like they're going to

00:23:31,799 --> 00:23:35,639
be two previous ones they might move to

00:23:33,120 --> 00:23:38,130
another org or something and and then

00:23:35,639 --> 00:23:39,809
open sense and also declaratory is also

00:23:38,130 --> 00:23:41,909
going to be a client over to supports

00:23:39,809 --> 00:23:43,950
there's question of like some features

00:23:41,909 --> 00:23:44,520
like exemplars like the Python client is

00:23:43,950 --> 00:23:47,390
the

00:23:44,520 --> 00:23:51,990
his point so it has intimate every hey

00:23:47,390 --> 00:23:55,020
and so on so thank you yeah like there

00:23:51,990 --> 00:24:01,520
will be client libraries I was basing my

00:23:55,020 --> 00:24:05,309
question as well so okay another behind

00:24:01,520 --> 00:24:07,020
okay what when you said them you're

00:24:05,309 --> 00:24:09,210
looking for like a fun or low-key to

00:24:07,020 --> 00:24:10,260
support them I mean what does that what

00:24:09,210 --> 00:24:13,260
are you looking for what does that mean

00:24:10,260 --> 00:24:14,429
remember him had the picture with it

00:24:13,260 --> 00:24:14,610
just means exemplars and things like

00:24:14,429 --> 00:24:16,860
that

00:24:14,610 --> 00:24:18,720
like the exemplars are there please use

00:24:16,860 --> 00:24:21,059
them yeah stuff like the units and so on

00:24:18,720 --> 00:24:23,940
if you can use hints from that things

00:24:21,059 --> 00:24:26,370
like info and II know it's like it's

00:24:23,940 --> 00:24:28,080
metadata for me she's has no use for it

00:24:26,370 --> 00:24:29,700
but maybe profiler can do some cool

00:24:28,080 --> 00:24:32,280
stuff has there been any changes to the

00:24:29,700 --> 00:24:33,780
label formats exactly the same the

00:24:32,280 --> 00:24:35,360
limits on like length or number or

00:24:33,780 --> 00:24:38,120
anything no no there will be

00:24:35,360 --> 00:24:40,020
considerations against abuse

00:24:38,120 --> 00:24:42,960
because what we've talked about

00:24:40,020 --> 00:24:44,820
cardinality here as well and we I

00:24:42,960 --> 00:24:47,820
imagine most people here have seen what

00:24:44,820 --> 00:24:49,770
happens developers start off it's like

00:24:47,820 --> 00:24:53,250
oh yeah Howie uses for meatiest Inc then

00:24:49,770 --> 00:24:53,940
they discover labels and normally within

00:24:53,250 --> 00:24:55,770
a day or two

00:24:53,940 --> 00:24:57,900
the whoever's running Prometheus

00:24:55,770 --> 00:24:59,970
discovers cardinality explosions so

00:24:57,900 --> 00:25:01,380
there's going to be extensive

00:24:59,970 --> 00:25:02,790
consideration sections going over this

00:25:01,380 --> 00:25:05,160
and one of the other ones as well one of

00:25:02,790 --> 00:25:07,559
the problems with SNMP is that pulling

00:25:05,160 --> 00:25:08,670
all the data I can take 15 minutes if

00:25:07,559 --> 00:25:10,850
we're trying to walk everything even

00:25:08,670 --> 00:25:13,410
using bulk walk and all that and that's

00:25:10,850 --> 00:25:15,420
like yes you technically support SNMP

00:25:13,410 --> 00:25:17,040
but not in a useful fashion so we're

00:25:15,420 --> 00:25:17,910
gonna have strong recommendations of

00:25:17,040 --> 00:25:22,920
yeah this should take you less than a

00:25:17,910 --> 00:25:25,860
second first thank you for the

00:25:22,920 --> 00:25:27,330
initiative it's really good to see

00:25:25,860 --> 00:25:32,010
something

00:25:27,330 --> 00:25:36,210
have you considered to make the help

00:25:32,010 --> 00:25:40,650
text mandatory to because as a user it

00:25:36,210 --> 00:25:42,840
is often extremely difficult to figure

00:25:40,650 --> 00:25:48,330
out which metrics you get and the

00:25:42,840 --> 00:25:50,610
documentation just sucks so to make help

00:25:48,330 --> 00:25:52,410
mandatory because people would just put

00:25:50,610 --> 00:25:54,059
dummy text and copy and paste any way

00:25:52,410 --> 00:25:55,950
like in client libraries for meatiest

00:25:54,059 --> 00:25:57,240
client libraries we require you to

00:25:55,950 --> 00:25:58,950
provide it but you

00:25:57,240 --> 00:25:59,970
put in an empty string because like if

00:25:58,950 --> 00:26:04,350
you're gonna buy passage you're gonna

00:25:59,970 --> 00:26:06,240
bypass it anyway so it will be nice but

00:26:04,350 --> 00:26:07,559
you know hopefully you know if one of

00:26:06,240 --> 00:26:08,789
the things at least for me cheese

00:26:07,559 --> 00:26:12,809
mattress is the metric name itself

00:26:08,789 --> 00:26:16,500
should be kind of useful cuz if we can

00:26:12,809 --> 00:26:19,080
get that that's a big step already um

00:26:16,500 --> 00:26:33,630
are there plans for for message formats

00:26:19,080 --> 00:26:36,419
beyond text and protobuf Oh another one

00:26:33,630 --> 00:26:39,000
um can we like what has anyone discussed

00:26:36,419 --> 00:26:40,350
adding like source code locations for

00:26:39,000 --> 00:26:44,460
each of the metric definitions cuz I

00:26:40,350 --> 00:26:45,539
think that'd be a really cool like is

00:26:44,460 --> 00:26:47,130
you know reason the client library

00:26:45,539 --> 00:26:51,179
couldn't have acted to help thanks right

00:26:47,130 --> 00:26:52,470
yeah that's how I'd like maybe in a

00:26:51,179 --> 00:26:54,690
future version will be an additional

00:26:52,470 --> 00:26:55,890
optional metadata or something but it

00:26:54,690 --> 00:26:58,789
seems like health tech stuff for me

00:26:55,890 --> 00:27:02,820
personally I just take the metric name

00:26:58,789 --> 00:27:04,320
yeah the worry right is if people start

00:27:02,820 --> 00:27:05,940
overloading help text and embedding

00:27:04,320 --> 00:27:06,960
structured data in there then it'll

00:27:05,940 --> 00:27:08,190
quickly get out of hand

00:27:06,960 --> 00:27:14,880
yeah which probably but it's recommended

00:27:08,190 --> 00:27:18,299
limits on how the text yeah help text

00:27:14,880 --> 00:27:20,130
Prometric Andrew our link limits on how

00:27:18,299 --> 00:27:21,620
long the exempt our labels can be I

00:27:20,130 --> 00:27:24,929
think

00:27:21,620 --> 00:27:34,620
hello I think limits on that would be

00:27:24,929 --> 00:27:37,470
losing well you mentioned that now it's

00:27:34,620 --> 00:27:39,600
gonna support into integers um how is it

00:27:37,470 --> 00:27:41,010
gonna be differentiated if it's the

00:27:39,600 --> 00:27:44,580
values of it's supposed to be a float or

00:27:41,010 --> 00:27:46,110
an integer well if it's a float and it's

00:27:44,580 --> 00:27:48,750
in the text format it will have a

00:27:46,110 --> 00:27:51,600
decimal point if it's an integer it

00:27:48,750 --> 00:27:52,740
won't okay and be honest Prometheus is

00:27:51,600 --> 00:27:55,440
gonna treat you to all slopes anyway

00:27:52,740 --> 00:28:00,049
bush like there are other systems which

00:27:55,440 --> 00:28:00,049
can do better teams there Thanks

00:28:03,920 --> 00:28:15,950
that's going to be fun nice throw is

00:28:13,550 --> 00:28:18,050
there any implication to the remote read

00:28:15,950 --> 00:28:19,670
and write API for this I mean sigh as

00:28:18,050 --> 00:28:21,770
far as I know today like the unit to

00:28:19,670 --> 00:28:23,750
help Dex that's not actually transmitted

00:28:21,770 --> 00:28:26,870
in the remote protocols is that right

00:28:23,750 --> 00:28:28,730
there's no effect because this is just

00:28:26,870 --> 00:28:30,110
front-end stuff which for meteor smoke

00:28:28,730 --> 00:28:32,540
it doesn't completely throw it away

00:28:30,110 --> 00:28:34,730
but we don't do much with it right now

00:28:32,540 --> 00:28:37,010
right like right now the metadata API

00:28:34,730 --> 00:28:39,020
does have doing this because I add for

00:28:37,010 --> 00:28:41,210
those padding the parser okay so you can

00:28:39,020 --> 00:28:44,450
get it there but otherwise like yeah

00:28:41,210 --> 00:28:46,580
this is the same as help today it's not

00:28:44,450 --> 00:28:49,820
in the Wow so we don't have you should

00:28:46,580 --> 00:28:51,590
talk to where's the joshan and me

00:28:49,820 --> 00:28:55,280
because we want to do that next

00:28:51,590 --> 00:28:58,610
all right yeah yes please yeah so one

00:28:55,280 --> 00:29:05,210
question will indeed f64 be possible in

00:28:58,610 --> 00:29:07,190
prometheus sometime somehow yeah so you

00:29:05,210 --> 00:29:09,560
stick with floating-point internally

00:29:07,190 --> 00:29:11,330
yeah I just no plans to change from that

00:29:09,560 --> 00:29:14,690
I know I said I'll give you even if you

00:29:11,330 --> 00:29:17,240
are 100 kg fish network interface being

00:29:14,690 --> 00:29:19,490
off by 10 kilobytes is not exactly the

00:29:17,240 --> 00:29:21,050
end of the world and even then like the

00:29:19,490 --> 00:29:22,940
SNMP export which is the only place this

00:29:21,050 --> 00:29:27,850
really comes up already takes a modulus

00:29:22,940 --> 00:29:30,530
so it's in fact legal so they're created

00:29:27,850 --> 00:29:32,780
metadata does it mean that we will have

00:29:30,530 --> 00:29:36,800
twice as much mate

00:29:32,780 --> 00:29:38,510
data inside the tsdp no no like radius

00:29:36,800 --> 00:29:42,050
does not store any metadata inside as

00:29:38,510 --> 00:29:43,970
TST be that your our questions activity

00:29:42,050 --> 00:29:46,940
to go to exemplars we can't store the

00:29:43,970 --> 00:29:49,100
DST be because I've done the math that's

00:29:46,940 --> 00:29:50,360
way too much data so how we're gonna

00:29:49,100 --> 00:29:52,280
work on a notion how do you deal to

00:29:50,360 --> 00:29:55,130
changing over time or big questions

00:29:52,280 --> 00:29:56,630
which after we solve - do I have any we

00:29:55,130 --> 00:29:58,550
can focus ok how does that work remote

00:29:56,630 --> 00:30:00,620
right then like were they attached on

00:29:58,550 --> 00:30:03,080
the fly do we send it sometimes do we

00:30:00,620 --> 00:30:04,460
send it not as it's a separate API maybe

00:30:03,080 --> 00:30:06,200
they just pull it from the Wow and we

00:30:04,460 --> 00:30:07,490
write it there like there's design

00:30:06,200 --> 00:30:11,320
questions Jared just to keep the

00:30:07,490 --> 00:30:11,320
bandwidth sane thank you

00:30:23,970 --> 00:30:28,390
so I'm confused about the differences

00:30:26,410 --> 00:30:29,890
between open telemetry and open metrics

00:30:28,390 --> 00:30:37,510
and how they relate oh great question

00:30:29,890 --> 00:30:42,430
let me answer that because that's one of

00:30:37,510 --> 00:30:49,360
the things where I'm the initiating okay

00:30:42,430 --> 00:30:51,850
do you want to answer so the two main

00:30:49,360 --> 00:30:53,860
reasons why why isn't merging or

00:30:51,850 --> 00:30:56,530
anything a we have this huge install

00:30:53,860 --> 00:30:57,370
base for permittees so we don't want to

00:30:56,530 --> 00:30:58,870
just throw it away

00:30:57,370 --> 00:31:01,960
that's what Brian answered the other

00:30:58,870 --> 00:31:03,520
thing is we intend to maintain this for

00:31:01,960 --> 00:31:05,830
years and decades like if he has an

00:31:03,520 --> 00:31:08,170
industrial stuff or you have switches or

00:31:05,830 --> 00:31:10,630
routers or something it won't change all

00:31:08,170 --> 00:31:12,880
that quickly from what baktun told me he

00:31:10,630 --> 00:31:14,950
intends to have a lot more iterations or

00:31:12,880 --> 00:31:18,220
not quicker iterations within open

00:31:14,950 --> 00:31:20,170
telemetry so we are more for the long

00:31:18,220 --> 00:31:23,050
term and for stability and he's more for

00:31:20,170 --> 00:31:24,490
moving quickly in breaking things like

00:31:23,050 --> 00:31:27,220
there are provisions in there who want

00:31:24,490 --> 00:31:29,320
to go beyond in 64 or flows 1 to 8 ever

00:31:27,220 --> 00:31:36,460
becomes attained there's there's space

00:31:29,320 --> 00:31:37,560
there to allow - yeah I didn't see it

00:31:36,460 --> 00:31:40,510
sorry

00:31:37,560 --> 00:31:41,820
they were so busy throwing microphones

00:31:40,510 --> 00:31:45,700
at people

00:31:41,820 --> 00:31:55,410
[Applause]

00:31:45,700 --> 00:31:55,410

YouTube URL: https://www.youtube.com/watch?v=orV4hrk0fJM


