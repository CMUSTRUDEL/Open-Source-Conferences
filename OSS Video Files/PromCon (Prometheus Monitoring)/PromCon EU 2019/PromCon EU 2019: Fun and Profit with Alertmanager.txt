Title: PromCon EU 2019: Fun and Profit with Alertmanager
Publication date: 2019-12-29
Playlist: PromCon EU 2019
Description: 
	Speaker: Simon Pasquier

Getting someone to know that a problem exists is the main reason why we run monitoring infrastructure. Prometheus and AlertManager are very good at it but requirements vary from person to person. In this presentation, Simon Pasquier will introduce the Prometheus alerting philosophy. Then he will discuss AlertManager's good practices and pitfalls. Finally he will show advanced use cases.

Slides: https://promcon.io/2019-munich/slides/fun-and-profit-with-alertmanager.pdf
Captions: 
	00:00:00,650 --> 00:00:08,910
[Music]

00:00:12,010 --> 00:00:18,880
so we are going to talk a little bit

00:00:14,410 --> 00:00:20,890
about alerting and as well now I hope

00:00:18,880 --> 00:00:24,400
that after this presentation we will

00:00:20,890 --> 00:00:28,270
bring back home some ideas and new

00:00:24,400 --> 00:00:32,560
things about alerting in general and a

00:00:28,270 --> 00:00:37,360
lot manager component few words about

00:00:32,560 --> 00:00:40,390
myself like guru said I'm walking out

00:00:37,360 --> 00:00:42,850
where that specifically on the primitive

00:00:40,390 --> 00:00:48,460
stream indeed from a service offering

00:00:42,850 --> 00:00:52,449
community if you didn't up guests from

00:00:48,460 --> 00:00:55,120
my accent and French and most

00:00:52,449 --> 00:00:57,550
specifically I work on a lot manager I'm

00:00:55,120 --> 00:01:00,190
one of the three maintenance with Max

00:00:57,550 --> 00:01:03,269
and Stuart that couldn't make it this

00:01:00,190 --> 00:01:06,510
time so if you have interacted with the

00:01:03,269 --> 00:01:10,020
project like following issues with

00:01:06,510 --> 00:01:13,390
submitting pr's or anything like that

00:01:10,020 --> 00:01:15,909
chances are that you we have interacting

00:01:13,390 --> 00:01:19,329
together if you have anything to share

00:01:15,909 --> 00:01:21,759
about what your experience was

00:01:19,329 --> 00:01:25,630
please come after the presentation I'll

00:01:21,759 --> 00:01:28,110
be able to discuss with you but before

00:01:25,630 --> 00:01:30,340
going to Alette master in particular

00:01:28,110 --> 00:01:32,680
let's look at a little bit about

00:01:30,340 --> 00:01:34,689
alerting I call this slide alerting

00:01:32,680 --> 00:01:37,329
graph because a lot of thing is really

00:01:34,689 --> 00:01:40,090
writing with the alerting rules is a

00:01:37,329 --> 00:01:42,880
skill that is not easy to yet and I'm

00:01:40,090 --> 00:01:46,630
going to be to give a few guidelines of

00:01:42,880 --> 00:01:51,310
what I think is important and just as a

00:01:46,630 --> 00:01:53,619
refresher this is how like a loading

00:01:51,310 --> 00:01:56,439
rule is configured so we've got a name

00:01:53,619 --> 00:01:58,299
which is I request latency we've got a

00:01:56,439 --> 00:02:00,130
prompt your expression that's going to

00:01:58,299 --> 00:02:02,979
trigger the alert anytime that

00:02:00,130 --> 00:02:04,899
expression written something we've got

00:02:02,979 --> 00:02:08,229
the for duration which we'll talk a

00:02:04,899 --> 00:02:12,700
little bit later and we've got labels

00:02:08,229 --> 00:02:15,370
that can be added to the 2d levels

00:02:12,700 --> 00:02:18,310
already written by the expression in

00:02:15,370 --> 00:02:20,190
that case that disability and labels are

00:02:18,310 --> 00:02:23,620
super important because that's

00:02:20,190 --> 00:02:27,640
everything that our banner will use to

00:02:23,620 --> 00:02:30,220
group dispatch and also end all silences

00:02:27,640 --> 00:02:33,220
on the alert and finally with whadya

00:02:30,220 --> 00:02:35,530
notations which are free form fields

00:02:33,220 --> 00:02:39,430
that that are mostly used to provide

00:02:35,530 --> 00:02:43,989
more context about the problem that the

00:02:39,430 --> 00:02:46,090
alert is is supposed to track so how do

00:02:43,989 --> 00:02:49,420
you write good dialect alerting rules

00:02:46,090 --> 00:02:52,510
first of all you need to think about the

00:02:49,420 --> 00:02:55,090
labels that's going to be sent by

00:02:52,510 --> 00:02:57,010
primitives to alert manager that is to

00:02:55,090 --> 00:02:57,370
say there are several ways to do to do

00:02:57,010 --> 00:02:59,519
it

00:02:57,370 --> 00:03:02,290
obviously there are the levels that are

00:02:59,519 --> 00:03:05,230
configured in the rule you can also

00:03:02,290 --> 00:03:07,870
attach additional levels using the earth

00:03:05,230 --> 00:03:14,220
external levels configuration in comma

00:03:07,870 --> 00:03:16,870
tools but most most of it boils down to

00:03:14,220 --> 00:03:20,109
your levels are going to be used by a

00:03:16,870 --> 00:03:23,829
lot manager mainly for two things first

00:03:20,109 --> 00:03:26,170
you want to be able to identify who is

00:03:23,829 --> 00:03:29,500
responsible for the alert which we you

00:03:26,170 --> 00:03:33,459
should notify about the problem

00:03:29,500 --> 00:03:36,130
currently happening this is typically

00:03:33,459 --> 00:03:38,530
what you can use a combination of levels

00:03:36,130 --> 00:03:40,540
you can use things like having your team

00:03:38,530 --> 00:03:44,250
level attached with alert that will

00:03:40,540 --> 00:03:47,410
route the alert to the correct recipient

00:03:44,250 --> 00:03:49,870
anything that suits you need is enough

00:03:47,410 --> 00:03:51,879
but keep in mind that you will need to

00:03:49,870 --> 00:03:55,329
have in your alerts something that can

00:03:51,879 --> 00:03:57,340
tell alert manager which we call the

00:03:55,329 --> 00:03:59,590
second one is being able to

00:03:57,340 --> 00:04:02,199
differentiate between alerts that are

00:03:59,590 --> 00:04:04,180
urgent and alerts that can wait

00:04:02,199 --> 00:04:06,730
basically merchants allows you want

00:04:04,180 --> 00:04:09,519
someone to react immediately we want to

00:04:06,730 --> 00:04:13,419
pay some someone and to be the alert to

00:04:09,519 --> 00:04:18,130
be actionable for words that are less

00:04:13,419 --> 00:04:19,419
important then they can be treated they

00:04:18,130 --> 00:04:22,539
don't have to be treated immediately

00:04:19,419 --> 00:04:24,430
they can be treated later on so maybe

00:04:22,539 --> 00:04:27,220
you want those adults who do it well

00:04:24,430 --> 00:04:29,050
chat channel you might want them to go

00:04:27,220 --> 00:04:31,060
to an email but again they there needs

00:04:29,050 --> 00:04:33,550
to be something in the alerts that will

00:04:31,060 --> 00:04:36,909
specify the criticality of the road

00:04:33,550 --> 00:04:39,270
basically most people use celerity level

00:04:36,909 --> 00:04:39,270
for that

00:04:39,330 --> 00:04:47,280
the second point is that you want to

00:04:43,050 --> 00:04:49,200
order to be as as simple as possible not

00:04:47,280 --> 00:04:51,870
to say that the they need to be simple

00:04:49,200 --> 00:04:56,330
but do not talk about complicate you are

00:04:51,870 --> 00:04:58,950
alerting wolves the previous presenters

00:04:56,330 --> 00:05:01,230
alluded to that this morning like

00:04:58,950 --> 00:05:03,570
writing alerts is no different than

00:05:01,230 --> 00:05:05,850
writing code we need to apply the same

00:05:03,570 --> 00:05:09,030
techniques that we use for software

00:05:05,850 --> 00:05:13,470
engineering to writing and configuring

00:05:09,030 --> 00:05:16,770
alerts you need to think about designing

00:05:13,470 --> 00:05:19,320
your alerts making making sure that they

00:05:16,770 --> 00:05:22,740
are tested and that they are pushing

00:05:19,320 --> 00:05:25,260
prediction after being validated having

00:05:22,740 --> 00:05:28,220
some sort of validation code we do test

00:05:25,260 --> 00:05:28,220
CI et cetera

00:05:28,370 --> 00:05:37,410
the last point is something that that

00:05:33,210 --> 00:05:40,080
can be sometimes overlooked so we ended

00:05:37,410 --> 00:05:43,950
up both informative and in a lot manager

00:05:40,080 --> 00:05:46,650
we we have a way to talk to template the

00:05:43,950 --> 00:05:48,720
alerts and the notifications and this is

00:05:46,650 --> 00:05:50,790
based on the automatic system that might

00:05:48,720 --> 00:05:53,490
not be the easiest system to use but

00:05:50,790 --> 00:05:56,010
that's what we are so I think it was

00:05:53,490 --> 00:06:00,630
spending a bit of time getting familiar

00:05:56,010 --> 00:06:03,240
with it so that you can basically extend

00:06:00,630 --> 00:06:07,950
your alert with useful information as an

00:06:03,240 --> 00:06:12,750
example I've got so here I've got an

00:06:07,950 --> 00:06:17,160
alert which is basically triggering when

00:06:12,750 --> 00:06:21,360
we got more than half of our targets

00:06:17,160 --> 00:06:24,240
that are done for given job alone that

00:06:21,360 --> 00:06:28,790
doesn't tell us much what I've done here

00:06:24,240 --> 00:06:28,790
in the description is that I've used

00:06:28,880 --> 00:06:37,140
the query function which can be used to

00:06:33,740 --> 00:06:39,840
run additional queries once the alert

00:06:37,140 --> 00:06:41,550
has been triggered in that case it tells

00:06:39,840 --> 00:06:46,919
us to get the list of all the instances

00:06:41,550 --> 00:06:48,900
that are down correctly currently I even

00:06:46,919 --> 00:06:52,010
have written a test for that

00:06:48,900 --> 00:06:56,730
because yes you can write tests for that

00:06:52,010 --> 00:06:59,460
and the test is something like that well

00:06:56,730 --> 00:07:05,520
you would declare the time series that

00:06:59,460 --> 00:07:07,500
you you want to provision to mock and

00:07:05,520 --> 00:07:10,590
then a difference at all you can

00:07:07,500 --> 00:07:13,080
evaluate the alert and and check that

00:07:10,590 --> 00:07:15,420
it's firing or not yeah we can see that

00:07:13,080 --> 00:07:18,030
at this point in time the adult should

00:07:15,420 --> 00:07:20,880
fire because we are two nodes out of

00:07:18,030 --> 00:07:24,360
three that are down in the description

00:07:20,880 --> 00:07:27,060
here is telling me exactly how many

00:07:24,360 --> 00:07:29,250
nodes the percentage of nodes that are

00:07:27,060 --> 00:07:36,170
failing and which are the instances that

00:07:29,250 --> 00:07:38,790
are down I can even run the test just to

00:07:36,170 --> 00:07:42,870
show you how it works so we are using

00:07:38,790 --> 00:07:46,110
the palm to CRI for that and we are

00:07:42,870 --> 00:07:49,380
providing the unit test file like that

00:07:46,110 --> 00:07:55,320
so you see if I change something like

00:07:49,380 --> 00:07:57,690
here I make your typo and I run again

00:07:55,320 --> 00:08:01,290
then it will tell me that that's not

00:07:57,690 --> 00:08:03,240
exactly what which would be this way by

00:08:01,290 --> 00:08:07,650
the way when I wrote this initially I

00:08:03,240 --> 00:08:12,840
had a typo I inverted the percentage so

00:08:07,650 --> 00:08:22,230
that was 33 dot 33% and I noticed it

00:08:12,840 --> 00:08:24,210
just by looking at the unit ask not that

00:08:22,230 --> 00:08:27,270
we've seen how we can fight figure

00:08:24,210 --> 00:08:30,390
alerts from primitives let's dig a

00:08:27,270 --> 00:08:32,130
little bit into one of the first

00:08:30,390 --> 00:08:35,340
question that come up when you start

00:08:32,130 --> 00:08:37,560
using a lot management primitives is how

00:08:35,340 --> 00:08:40,560
long will they will it take me for being

00:08:37,560 --> 00:08:43,170
notified that something is working so

00:08:40,560 --> 00:08:45,750
I've got this very simple alerting Road

00:08:43,170 --> 00:08:48,060
which is just triggering when my full

00:08:45,750 --> 00:08:50,010
matrix is above zero and we have a for

00:08:48,060 --> 00:08:51,720
duration of two minutes meaning that the

00:08:50,010 --> 00:08:54,060
alerts needs to be active for two

00:08:51,720 --> 00:08:57,300
minutes before it gets sent to alert

00:08:54,060 --> 00:08:59,220
manager the first interval that will

00:08:57,300 --> 00:09:02,430
come into play is the scrape interval so

00:08:59,220 --> 00:09:04,530
at most we need one scrape interval

00:09:02,430 --> 00:09:06,780
from it used to be able to retrieve the

00:09:04,530 --> 00:09:10,440
metric and store it into its internal

00:09:06,780 --> 00:09:11,820
database then we've got another interval

00:09:10,440 --> 00:09:14,160
which is the time it takes for

00:09:11,820 --> 00:09:18,960
primitives to evaluate the other area a

00:09:14,160 --> 00:09:23,160
lot is evaluated at each interval and so

00:09:18,960 --> 00:09:24,840
at most we need to wait another one at

00:09:23,160 --> 00:09:27,540
least one evaluation interval for the

00:09:24,840 --> 00:09:31,670
alert to be active meaning that is going

00:09:27,540 --> 00:09:34,470
to be pending in our primitive jargon

00:09:31,670 --> 00:09:37,020
then it's going to be a very rigid again

00:09:34,470 --> 00:09:39,480
if it's still actually continue to be

00:09:37,020 --> 00:09:43,310
pending until we get to the time where

00:09:39,480 --> 00:09:47,010
we have reached the two minutes duration

00:09:43,310 --> 00:09:49,860
now primitives will send the alert for

00:09:47,010 --> 00:09:52,440
that monitor and then a lot manager will

00:09:49,860 --> 00:09:57,510
wait a bit of time before sending the

00:09:52,440 --> 00:10:00,390
notification to the final recipient so

00:09:57,510 --> 00:10:03,330
this is specified by the group weight

00:10:00,390 --> 00:10:06,420
parameter which we as we can declare

00:10:03,330 --> 00:10:09,060
when in the routing configuration of a

00:10:06,420 --> 00:10:12,270
load module so overall we've got all

00:10:09,060 --> 00:10:15,090
this period of time that can alas

00:10:12,270 --> 00:10:17,940
between the time where the metric has

00:10:15,090 --> 00:10:20,220
been reach the condition of the alert

00:10:17,940 --> 00:10:23,910
and the time the notification got fired

00:10:20,220 --> 00:10:29,250
we've got a few more timers that come

00:10:23,910 --> 00:10:32,730
into play once we get our group of words

00:10:29,250 --> 00:10:35,190
that has fired the first time then we

00:10:32,730 --> 00:10:37,530
might receive new alerts firing those

00:10:35,190 --> 00:10:39,690
alerts will not be notified again

00:10:37,530 --> 00:10:43,710
immediately they will be notified at

00:10:39,690 --> 00:10:46,560
every group interval parameter and when

00:10:43,710 --> 00:10:51,380
the group offers isn't this it for a

00:10:46,560 --> 00:10:54,450
certain amount of time then it will be

00:10:51,380 --> 00:10:58,530
notified again as a reminder at the

00:10:54,450 --> 00:11:01,050
repeat interval duration if you use very

00:10:58,530 --> 00:11:04,260
long repeat interval like something like

00:11:01,050 --> 00:11:07,500
one month or even longer if you want to

00:11:04,260 --> 00:11:09,510
disable completely with repeated

00:11:07,500 --> 00:11:12,120
notifications then take care about

00:11:09,510 --> 00:11:13,950
setting the data retention flag on your

00:11:12,120 --> 00:11:16,080
alert measure otherwise you might have

00:11:13,950 --> 00:11:19,770
troubles or at least not yet

00:11:16,080 --> 00:11:23,100
the behavior that we expect short note

00:11:19,770 --> 00:11:26,070
on the for duration it can be very Indy

00:11:23,100 --> 00:11:28,380
to avoid flapping alerts like an alert

00:11:26,070 --> 00:11:30,540
that's that's firing for two minutes

00:11:28,380 --> 00:11:34,410
that's being active for two minutes then

00:11:30,540 --> 00:11:36,600
going down and then following again if

00:11:34,410 --> 00:11:39,870
if that's another that's not about an

00:11:36,600 --> 00:11:41,880
urgent problem they do and the alert is

00:11:39,870 --> 00:11:43,980
flapping do not hesitate to increase the

00:11:41,880 --> 00:11:51,150
for duration as it will reduce the the

00:11:43,980 --> 00:11:53,460
noise short word about no now let's go

00:11:51,150 --> 00:11:56,100
to the to the topic of routing the

00:11:53,460 --> 00:11:58,380
alerts so that's basically grouping the

00:11:56,100 --> 00:12:00,540
alerts together so that the the

00:11:58,380 --> 00:12:06,090
notification is meaningful for the e for

00:12:00,540 --> 00:12:08,540
the user and also dispatching to the

00:12:06,090 --> 00:12:12,120
external system that will under the

00:12:08,540 --> 00:12:15,390
communication to the users so this is a

00:12:12,120 --> 00:12:18,000
tweet that's been published a couple of

00:12:15,390 --> 00:12:21,450
weeks ago from Tim Simon's from

00:12:18,000 --> 00:12:25,650
digitalocean where I shared is routing

00:12:21,450 --> 00:12:28,530
three configuration every year we can

00:12:25,650 --> 00:12:33,210
see it but that's red dot and every red

00:12:28,530 --> 00:12:37,170
dots is a grouping is a routing three

00:12:33,210 --> 00:12:40,310
and three I'm not sure if it's

00:12:37,170 --> 00:12:43,650
frightening or impressive let you judge

00:12:40,310 --> 00:12:46,290
at least we didn't complain that manager

00:12:43,650 --> 00:12:48,480
wasn't working so at least we can we can

00:12:46,290 --> 00:12:56,310
suppose that it it was okay for others

00:12:48,480 --> 00:12:57,990
to deal with to be to be honest alone we

00:12:56,310 --> 00:13:00,930
don't recommend that you go that that

00:12:57,990 --> 00:13:02,970
road immediately again the idea is to

00:13:00,930 --> 00:13:05,970
keep things simple so that you don't

00:13:02,970 --> 00:13:07,770
over complicate your alerting pipeline

00:13:05,970 --> 00:13:11,970
and you make sure that you get the

00:13:07,770 --> 00:13:17,460
alerts that are needed in time so if you

00:13:11,970 --> 00:13:20,070
if you can live with a single very few

00:13:17,460 --> 00:13:22,110
cases in you are alerting tree then

00:13:20,070 --> 00:13:23,820
that's fine when you start to

00:13:22,110 --> 00:13:26,880
incorporate more services more teams

00:13:23,820 --> 00:13:29,370
into your monitoring then it might be

00:13:26,880 --> 00:13:32,070
time to think about creating sub routes

00:13:29,370 --> 00:13:36,320
and typically you want to have roots

00:13:32,070 --> 00:13:39,750
that match on services or teams and then

00:13:36,320 --> 00:13:43,100
every service or team manage its own

00:13:39,750 --> 00:13:48,029
search we are letting configuration

00:13:43,100 --> 00:13:50,820
again we can test that with the I into

00:13:48,029 --> 00:13:53,910
Sierra which is the alert manager CLI or

00:13:50,820 --> 00:13:58,860
we have also a visual routing 3d tour

00:13:53,910 --> 00:14:00,570
the one that was displayed here so this

00:13:58,860 --> 00:14:03,800
can be used to validate that sure an

00:14:00,570 --> 00:14:08,100
alert is going to the right recipient

00:14:03,800 --> 00:14:11,279
before you push that to production so I

00:14:08,100 --> 00:14:14,760
have a shot example the requirements

00:14:11,279 --> 00:14:17,940
here at we we have some adults firing we

00:14:14,760 --> 00:14:21,690
want all notifications to go to slag we

00:14:17,940 --> 00:14:23,250
want the adults with the up drop level

00:14:21,690 --> 00:14:25,740
to be mailed to the up team

00:14:23,250 --> 00:14:27,960
if the in addition if the alert is

00:14:25,740 --> 00:14:31,770
critical we want also to page their team

00:14:27,960 --> 00:14:34,740
and any other words that's not for the

00:14:31,770 --> 00:14:37,440
our team but at as critical severity

00:14:34,740 --> 00:14:40,860
should page the operation team we have

00:14:37,440 --> 00:14:44,970
several ways to do it

00:14:40,860 --> 00:14:47,820
the first one is using continue so again

00:14:44,970 --> 00:14:52,860
this is the on tool you can visualize

00:14:47,820 --> 00:14:56,040
your waiting routing on the inner

00:14:52,860 --> 00:14:58,560
terminal and you can even test if it's

00:14:56,040 --> 00:15:02,760
doing the right way the right thing you

00:14:58,560 --> 00:15:06,110
expect so here the thing is that we will

00:15:02,760 --> 00:15:08,160
use continue to so by default the first

00:15:06,110 --> 00:15:11,459
entry default route will match

00:15:08,160 --> 00:15:13,830
everything and so that will go to slack

00:15:11,459 --> 00:15:16,020
we have a continue so the yellowed will

00:15:13,830 --> 00:15:17,640
be a very cheap buy for the second line

00:15:16,020 --> 00:15:20,880
which is for the job

00:15:17,640 --> 00:15:23,490
eager a koala up and if that matches it

00:15:20,880 --> 00:15:25,050
sends an email and so on and so on the

00:15:23,490 --> 00:15:27,959
last who don't have continued because we

00:15:25,050 --> 00:15:30,209
want yellow to stop there that's one way

00:15:27,959 --> 00:15:33,060
to do it there is another way that I

00:15:30,209 --> 00:15:39,110
found more elegant but again that's more

00:15:33,060 --> 00:15:41,220
a matter of taste where we can in fact

00:15:39,110 --> 00:15:42,690
when you start looking at the alert

00:15:41,220 --> 00:15:43,510
manager configuration you expect that

00:15:42,690 --> 00:15:46,000
one with

00:15:43,510 --> 00:15:48,130
equals one system that you want to

00:15:46,000 --> 00:15:51,100
notify that's in fact the receiver can

00:15:48,130 --> 00:15:54,520
be can contain the slack channel can be

00:15:51,100 --> 00:15:57,310
an email and a page so you can group all

00:15:54,520 --> 00:15:59,470
this together and to my own in my

00:15:57,310 --> 00:16:01,600
opinion simplify the configuration so

00:15:59,470 --> 00:16:06,370
that it's more straightforward to to

00:16:01,600 --> 00:16:09,460
read and instead of encoding the

00:16:06,370 --> 00:16:12,340
destination in the tree it's only there

00:16:09,460 --> 00:16:19,780
in the receiver configuration you know

00:16:12,340 --> 00:16:21,490
you do it is here really simple I've you

00:16:19,780 --> 00:16:23,680
know I've created a receiver which is

00:16:21,490 --> 00:16:27,780
basically sending everything for the a

00:16:23,680 --> 00:16:31,360
team the page on email and to slack and

00:16:27,780 --> 00:16:33,040
even using Ya'alon cause I can factorize

00:16:31,360 --> 00:16:36,730
my configuration and don't have to

00:16:33,040 --> 00:16:39,940
declare to duplicate on my configuration

00:16:36,730 --> 00:16:42,730
all over the place you could obviously

00:16:39,940 --> 00:16:46,410
also use JSON it like that's been

00:16:42,730 --> 00:16:46,410
demonstrated this morning for that word

00:16:52,020 --> 00:16:56,650
the next topic is going to be oh you can

00:16:54,940 --> 00:16:58,510
mute a lot

00:16:56,650 --> 00:17:02,380
there are basically two choices you can

00:16:58,510 --> 00:17:03,190
use silences which are for things that

00:17:02,380 --> 00:17:07,350
are temporary

00:17:03,190 --> 00:17:10,990
so silences can be treated at will they

00:17:07,350 --> 00:17:13,959
can be created with the API with the CLI

00:17:10,990 --> 00:17:16,959
with the UI there are I guess a

00:17:13,959 --> 00:17:19,540
temporary for things like known outage

00:17:16,959 --> 00:17:22,300
that you are currently investigating and

00:17:19,540 --> 00:17:25,570
you don't want to be bothered by less

00:17:22,300 --> 00:17:28,480
important alerts inhibitions are more

00:17:25,570 --> 00:17:31,480
likely like when you have the service a

00:17:28,480 --> 00:17:33,100
depending on a service be service be you

00:17:31,480 --> 00:17:35,470
know is down so you don't want to be

00:17:33,100 --> 00:17:37,030
notified about others we gotta actually

00:17:35,470 --> 00:17:40,420
say because you know that you need to

00:17:37,030 --> 00:17:42,940
focus on service be on the opposite

00:17:40,420 --> 00:17:45,370
emissions are only configured in the

00:17:42,940 --> 00:17:50,250
alert manager configuration file so the

00:17:45,370 --> 00:17:54,210
usually not change softer this is our

00:17:50,250 --> 00:17:56,950
inhibition world works basically three

00:17:54,210 --> 00:17:59,890
levels there is the source we

00:17:56,950 --> 00:18:03,010
defines which alert is going to trigger

00:17:59,890 --> 00:18:06,450
the innovation role in that is another

00:18:03,010 --> 00:18:08,770
being the note is down the target

00:18:06,450 --> 00:18:11,620
specify which others are going to be

00:18:08,770 --> 00:18:14,020
inhibited by the by the rule

00:18:11,620 --> 00:18:16,150
so in that case any alerts that same

00:18:14,020 --> 00:18:19,530
target noun might be in immediately by

00:18:16,150 --> 00:18:24,490
not down and the last bit is the equal

00:18:19,530 --> 00:18:26,080
parameter that tells that for target

00:18:24,490 --> 00:18:31,170
down to be inhibited it should be the

00:18:26,080 --> 00:18:31,170
same instance as in the sauce alert

00:18:33,240 --> 00:18:40,600
yeah if you think I'm going to skip

00:18:38,200 --> 00:18:42,670
maybe just the the second item is quite

00:18:40,600 --> 00:18:44,940
important for people that use incident

00:18:42,670 --> 00:18:48,100
management systems like page or duty or

00:18:44,940 --> 00:18:50,890
option II when you've got a group of

00:18:48,100 --> 00:18:54,730
adults that's been firing then created

00:18:50,890 --> 00:18:56,140
an incident in your system if you

00:18:54,730 --> 00:18:59,020
silence all the alerts

00:18:56,140 --> 00:19:01,870
then and the adult gets resolved during

00:18:59,020 --> 00:19:03,970
that silence then the incident

00:19:01,870 --> 00:19:06,220
management system will never get the

00:19:03,970 --> 00:19:08,950
result notification which can be an

00:19:06,220 --> 00:19:16,830
issue as it won't close the incident

00:19:08,950 --> 00:19:23,080
automatically quick word on availability

00:19:16,830 --> 00:19:25,090
as you will know to make read to avoid

00:19:23,080 --> 00:19:27,940
this of a single point of failure with

00:19:25,090 --> 00:19:29,950
formatives you will run two redundant

00:19:27,940 --> 00:19:31,630
from a two servers with the same

00:19:29,950 --> 00:19:34,780
configuration they don't communicate at

00:19:31,630 --> 00:19:36,940
all one with another without manager

00:19:34,780 --> 00:19:39,700
it's a bit different because we don't

00:19:36,940 --> 00:19:43,230
want to send duplicates notifications or

00:19:39,700 --> 00:19:47,220
we want to avoid that so instead we use

00:19:43,230 --> 00:19:50,110
gossip protocol that will replicate

00:19:47,220 --> 00:19:53,470
information across all the nodes forming

00:19:50,110 --> 00:19:55,000
the alert manager cluster the trade-off

00:19:53,470 --> 00:19:58,510
is that we want

00:19:55,000 --> 00:20:01,680
we prefer notifications to be sent in a

00:19:58,510 --> 00:20:03,910
duplicate fashion than not sending

00:20:01,680 --> 00:20:07,750
notifications because the cluster is

00:20:03,910 --> 00:20:10,160
down or is splitted in a network

00:20:07,750 --> 00:20:13,700
partition

00:20:10,160 --> 00:20:15,410
so I guess like I said that's mostly

00:20:13,700 --> 00:20:18,470
used to grow that's used to broadcast

00:20:15,410 --> 00:20:22,160
silences and notification notes which

00:20:18,470 --> 00:20:25,070
are the information about which group of

00:20:22,160 --> 00:20:28,070
adults has been notified or not I'm

00:20:25,070 --> 00:20:30,050
going to skip probably the next slide

00:20:28,070 --> 00:20:32,200
just to show you how would this work in

00:20:30,050 --> 00:20:34,520
practice we've got one adult manager

00:20:32,200 --> 00:20:36,530
we've got a second one that we start

00:20:34,520 --> 00:20:39,350
telling it to connect to the first one

00:20:36,530 --> 00:20:41,540
we start another one also connecting to

00:20:39,350 --> 00:20:44,480
the first one and automatically this

00:20:41,540 --> 00:20:47,180
will found the cluster each node in the

00:20:44,480 --> 00:20:51,770
cluster will have a position that we'll

00:20:47,180 --> 00:20:55,670
use will be used basically to delay this

00:20:51,770 --> 00:20:59,500
a lot manager will send the notification

00:20:55,670 --> 00:21:02,330
right away in case one is a is needed

00:20:59,500 --> 00:21:05,120
this one will wait by default fifteen

00:21:02,330 --> 00:21:07,580
seven and this one will wait 30 seconds

00:21:05,120 --> 00:21:09,500
in normal circumstances the first one

00:21:07,580 --> 00:21:11,540
will of standard notification

00:21:09,500 --> 00:21:13,790
acknowledge the response and the other

00:21:11,540 --> 00:21:15,710
one will detect that this group of

00:21:13,790 --> 00:21:18,760
adults has already been notified so

00:21:15,710 --> 00:21:18,760
nothing has to be done anymore

00:21:18,880 --> 00:21:24,080
going to skip that if you have some

00:21:21,920 --> 00:21:29,240
question about clustering availability

00:21:24,080 --> 00:21:37,610
we can discuss this later just to say

00:21:29,240 --> 00:21:40,390
that we've got if you run a cluster of

00:21:37,610 --> 00:21:45,260
more than three at measure there will be

00:21:40,390 --> 00:21:46,970
they will not be the messages will not

00:21:45,260 --> 00:21:49,070
be replicated on all the nodes at the

00:21:46,970 --> 00:21:51,020
same time it will take some time for the

00:21:49,070 --> 00:21:52,760
information to converge but in general

00:21:51,020 --> 00:21:56,540
people who run something like two or

00:21:52,760 --> 00:21:59,660
three nodes it's enough what we are

00:21:56,540 --> 00:22:02,330
looking for in the next evolution of the

00:21:59,660 --> 00:22:05,780
clustering is to add encryption and

00:22:02,330 --> 00:22:07,940
authentication to the protocol which is

00:22:05,780 --> 00:22:10,010
not supported out of the box and also

00:22:07,940 --> 00:22:13,130
better support for environments like

00:22:10,010 --> 00:22:18,020
doctor swamp which are today a bit

00:22:13,130 --> 00:22:20,650
annoying to set up so to conclude test

00:22:18,020 --> 00:22:23,510
everything just reach your alerting as

00:22:20,650 --> 00:22:26,810
regular software development

00:22:23,510 --> 00:22:29,210
keep it simple and we welcome any

00:22:26,810 --> 00:22:38,210
contribution if you have things to share

00:22:29,210 --> 00:22:39,350
please come to us thank you thank you we

00:22:38,210 --> 00:22:47,600
have time for maybe two or three

00:22:39,350 --> 00:22:49,100
questions to test alerting rules and

00:22:47,600 --> 00:22:51,440
recording rules we already have a tool

00:22:49,100 --> 00:22:55,340
is there anything available to test

00:22:51,440 --> 00:22:57,350
routing of the alerts yeah so I can show

00:22:55,340 --> 00:23:06,230
you is that automatic or is it just

00:22:57,350 --> 00:23:09,230
visual so this is so here I'm

00:23:06,230 --> 00:23:14,750
visualizing the routing tree and then I

00:23:09,230 --> 00:23:17,840
can test it by saying I will send an

00:23:14,750 --> 00:23:23,210
alert with the job labelled equal to odd

00:23:17,840 --> 00:23:26,240
and the severity equal to physical and

00:23:23,210 --> 00:23:29,510
then it will tell me which of the

00:23:26,240 --> 00:23:35,930
receiver is going to be caught I can do

00:23:29,510 --> 00:23:41,270
it with the other example and use a type

00:23:35,930 --> 00:23:43,850
of configuration and in that case I see

00:23:41,270 --> 00:23:52,280
the list of forces definitely I think we

00:23:43,850 --> 00:23:54,290
can improve that so I actually have a

00:23:52,280 --> 00:23:58,460
question posted on the YouTube

00:23:54,290 --> 00:24:00,470
livestream what are the possible

00:23:58,460 --> 00:24:02,870
solutions for synchronizing queries

00:24:00,470 --> 00:24:13,580
between an alert and rule and a graph on

00:24:02,870 --> 00:24:15,020
a dashboard well so if you if you have

00:24:13,580 --> 00:24:16,700
an a letting rule you have a query for

00:24:15,020 --> 00:24:19,400
that and then you want to have that

00:24:16,700 --> 00:24:21,770
query be used in a graph on a dashboard

00:24:19,400 --> 00:24:23,210
so when you click on when you get an

00:24:21,770 --> 00:24:25,220
alert you can click and go to it yeah

00:24:23,210 --> 00:24:28,780
for it and get the so it might be that

00:24:25,220 --> 00:24:31,610
JSON it might help yeah if you generate

00:24:28,780 --> 00:24:36,570
you use JSON I to generate everything

00:24:31,610 --> 00:24:39,519
might be some some IDs I don't know

00:24:36,570 --> 00:24:41,500
okay one more question here so let's say

00:24:39,519 --> 00:24:44,049
you have multiple receivers like bunch

00:24:41,500 --> 00:24:46,570
of web hooks that go to whatever let's

00:24:44,049 --> 00:24:49,299
say slack and one of them is failing

00:24:46,570 --> 00:24:52,840
yeah so and you get an alert saying that

00:24:49,299 --> 00:24:54,549
receiver failed but there is no label

00:24:52,840 --> 00:24:57,399
saying which one's failing because I

00:24:54,549 --> 00:24:58,690
think it's a cardinality issue or

00:24:57,399 --> 00:25:00,460
something yeah exactly

00:24:58,690 --> 00:25:03,090
so since we can't control how many

00:25:00,460 --> 00:25:06,010
receivers you are going to declare we

00:25:03,090 --> 00:25:09,399
didn't want to include the receiver name

00:25:06,010 --> 00:25:11,409
as a label so the idea is that you will

00:25:09,399 --> 00:25:14,440
get an alert saying okay you've got

00:25:11,409 --> 00:25:16,720
email integration that is varying too

00:25:14,440 --> 00:25:22,120
many times then you will have to go to

00:25:16,720 --> 00:25:24,940
the look at the logs and it's not a

00:25:22,120 --> 00:25:26,799
straightforward way to determine and if

00:25:24,940 --> 00:25:29,279
you have like let's say it like even

00:25:26,799 --> 00:25:31,269
like with five it's already complicated

00:25:29,279 --> 00:25:34,299
to determine which one's actually

00:25:31,269 --> 00:25:37,059
failing so yeah the idea would be to

00:25:34,299 --> 00:25:40,120
have some integrated monitoring solution

00:25:37,059 --> 00:25:51,570
like you've got logs and metrics in the

00:25:40,120 --> 00:25:54,909
same place I'm not going to pitch high

00:25:51,570 --> 00:25:56,889
so I often stood before the problem too

00:25:54,909 --> 00:25:59,679
that I had to work on deployment and

00:25:56,889 --> 00:26:02,740
before that I wanted to silence yeah

00:25:59,679 --> 00:26:05,169
something but other do you have any good

00:26:02,740 --> 00:26:07,299
practices on how to find out which

00:26:05,169 --> 00:26:09,669
alerts to silence before doing an

00:26:07,299 --> 00:26:15,490
operation so I think the previous

00:26:09,669 --> 00:26:17,440
presentation from exactly this use case

00:26:15,490 --> 00:26:20,049
where they said that when deploying a

00:26:17,440 --> 00:26:22,299
service they set up a silence first

00:26:20,049 --> 00:26:24,940
first thing they do is deploy your

00:26:22,299 --> 00:26:27,490
silence matching the service levels so

00:26:24,940 --> 00:26:29,590
that they are not annoyed by the service

00:26:27,490 --> 00:26:31,769
before the service goes to production

00:26:29,590 --> 00:26:34,389
then you need to do some median on

00:26:31,769 --> 00:26:37,240
cleaning up the silences when you're

00:26:34,389 --> 00:26:42,539
really ready to go to production not to

00:26:37,240 --> 00:26:44,260
miss any alerts after that one last one

00:26:42,539 --> 00:26:46,870
thank you

00:26:44,260 --> 00:26:48,830
so I had this problem that I want to

00:26:46,870 --> 00:26:53,000
make one time alert

00:26:48,830 --> 00:26:56,600
one time working - so what I did was I

00:26:53,000 --> 00:26:58,670
created a route in alert manager - with

00:26:56,600 --> 00:27:02,240
read notification interval for one year

00:26:58,670 --> 00:27:05,090
or something but despite that I have in

00:27:02,240 --> 00:27:07,190
some cases when I restart for example I

00:27:05,090 --> 00:27:10,190
think when I restored one note in the

00:27:07,190 --> 00:27:13,730
alert manager cluster it really notified

00:27:10,190 --> 00:27:21,170
all the others so do you know what what

00:27:13,730 --> 00:27:23,180
happens I mean is there my question

00:27:21,170 --> 00:27:26,690
would be is there an easier way to do a

00:27:23,180 --> 00:27:29,810
one-time alerting go so I guess that the

00:27:26,690 --> 00:27:31,640
contract is that we Karen we try to

00:27:29,810 --> 00:27:36,710
guarantee that we you will be notified

00:27:31,640 --> 00:27:39,260
that is once witching implies that you

00:27:36,710 --> 00:27:41,960
might be to notify it several times in

00:27:39,260 --> 00:27:45,230
some corner cases like you lose your

00:27:41,960 --> 00:27:49,120
story and stuff like that yeah all right

00:27:45,230 --> 00:27:53,390
there is a partition thank you again

00:27:49,120 --> 00:28:01,530
[Applause]

00:27:53,390 --> 00:28:01,530

YouTube URL: https://www.youtube.com/watch?v=VgsM8pOyN5s


