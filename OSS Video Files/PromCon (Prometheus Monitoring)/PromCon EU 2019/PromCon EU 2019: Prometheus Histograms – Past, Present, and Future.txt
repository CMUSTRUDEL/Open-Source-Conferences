Title: PromCon EU 2019: Prometheus Histograms – Past, Present, and Future
Publication date: 2019-12-29
Playlist: PromCon EU 2019
Description: 
	Speaker: Björn Rabenstein

Representing distributions in a metrics-based monitoring system is both important and hard. Doing it right unlocks many powerful use cases. What does Prometheus offer in this regard? And what are the pitfalls with the current state of the art? To help understand the present, this talk will also shed light on the past. How have the Histogram and Summary metric types become what they are today with all their weal and woe? Finally, let's have a look at the rich body of research happening in the area, and how it might benefit future versions of Prometheus.

Slides: https://promcon.io/2019-munich/slides/prometheus-histograms-past-present-and-future.pdf
Captions: 
	00:00:00,650 --> 00:00:08,910
[Music]

00:00:12,500 --> 00:00:18,259
yeah I would like to talk about one of

00:00:15,269 --> 00:00:21,869
my top three most favorite topics

00:00:18,259 --> 00:00:24,990
infirmities languages histograms past

00:00:21,869 --> 00:00:25,830
personal future first of all this is not

00:00:24,990 --> 00:00:27,720
a how-to

00:00:25,830 --> 00:00:30,630
there are gazillions of talks and blog

00:00:27,720 --> 00:00:32,550
posts and how to's and everything on the

00:00:30,630 --> 00:00:34,710
internet about how to use Prometheus

00:00:32,550 --> 00:00:37,050
histograms there's a lot to say about it

00:00:34,710 --> 00:00:40,140
if you haven't used them or you use them

00:00:37,050 --> 00:00:42,480
in the wrong way there's a link does

00:00:40,140 --> 00:00:45,059
that work no so there's the link to the

00:00:42,480 --> 00:00:47,550
very old but still very valid best

00:00:45,059 --> 00:00:49,200
practice document on our web page and

00:00:47,550 --> 00:00:51,570
you can just take it from there

00:00:49,200 --> 00:00:53,969
I guess so the idea of this talk was to

00:00:51,570 --> 00:00:57,000
first obviously parse of histograms not

00:00:53,969 --> 00:00:59,699
so much to explain you how they work but

00:00:57,000 --> 00:01:03,600
more like why they work the way they do

00:00:59,699 --> 00:01:05,309
and I kind of was tempted to have a

00:01:03,600 --> 00:01:07,440
subtitle like secret history of

00:01:05,309 --> 00:01:09,750
Prometheus systems unfortunately that

00:01:07,440 --> 00:01:12,180
was all when I thought this talk will be

00:01:09,750 --> 00:01:16,229
40 minutes so we have to skip the past

00:01:12,180 --> 00:01:19,440
because we have only 20 minutes there

00:01:16,229 --> 00:01:21,209
there will be I hope at some point I can

00:01:19,440 --> 00:01:24,270
give the director's cut of this talk and

00:01:21,209 --> 00:01:27,349
then I can put all the secret history in

00:01:24,270 --> 00:01:30,240
it so we have to jump to the present

00:01:27,349 --> 00:01:32,310
mostly looking at what really works well

00:01:30,240 --> 00:01:34,319
our histograms and what doesn't work

00:01:32,310 --> 00:01:36,590
that well and then of course later we

00:01:34,319 --> 00:01:39,630
look at the future what we might improve

00:01:36,590 --> 00:01:41,190
okay part one of the present what works

00:01:39,630 --> 00:01:46,200
really well I summarized it all on one

00:01:41,190 --> 00:01:47,550
slide so these questions that I have put

00:01:46,200 --> 00:01:49,470
here these are questions you might have

00:01:47,550 --> 00:01:51,300
asked what percentage of requests in the

00:01:49,470 --> 00:01:54,060
last hour got a response in 100

00:01:51,300 --> 00:01:56,720
milliseconds or less I think this is one

00:01:54,060 --> 00:01:58,530
of the most relevant questions in

00:01:56,720 --> 00:02:01,860
observability or whatever they call it

00:01:58,530 --> 00:02:04,410
these days also like stuff like like

00:02:01,860 --> 00:02:06,920
between certain time frames this is what

00:02:04,410 --> 00:02:10,050
Prometheus histograms can do perfectly

00:02:06,920 --> 00:02:11,370
almost perfectly accurate optics if you

00:02:10,050 --> 00:02:12,810
have never heard about it you can look

00:02:11,370 --> 00:02:15,239
it up it was mentioned in one of the

00:02:12,810 --> 00:02:18,690
talks that's very similar to this same

00:02:15,239 --> 00:02:20,280
thing so these are kind of the relevant

00:02:18,690 --> 00:02:22,080
questions there are two things that are

00:02:20,280 --> 00:02:23,580
perhaps not that well-known the one

00:02:22,080 --> 00:02:25,590
thing is really important you

00:02:23,580 --> 00:02:28,650
for granted I guess as happy formative

00:02:25,590 --> 00:02:31,080
uses we can mathematically correct

00:02:28,650 --> 00:02:33,690
aggregate histograms or sometimes called

00:02:31,080 --> 00:02:36,360
they emerge about and this is what many

00:02:33,690 --> 00:02:37,890
people still get wrong like the shortest

00:02:36,360 --> 00:02:40,110
version is you cannot aggregate

00:02:37,890 --> 00:02:44,760
pre-calculated contents there are still

00:02:40,110 --> 00:02:46,710
talks and ah like like flame wars on the

00:02:44,760 --> 00:02:50,190
internet about it it's really quite

00:02:46,710 --> 00:02:51,950
amusing the other thing and this is what

00:02:50,190 --> 00:02:54,810
you might probably have missed

00:02:51,950 --> 00:02:56,970
high-frequency sampling is feasible like

00:02:54,810 --> 00:02:59,370
you could totally tell you from easy

00:02:56,970 --> 00:03:01,620
server to scrape you target every second

00:02:59,370 --> 00:03:03,030
about every second sample the histogram

00:03:01,620 --> 00:03:04,680
and you have one second resolution or

00:03:03,030 --> 00:03:06,660
five million things even would probably

00:03:04,680 --> 00:03:08,550
still work like there's the incremental

00:03:06,660 --> 00:03:10,440
cost of making the sampling more

00:03:08,550 --> 00:03:14,810
frequent is really low and that's also

00:03:10,440 --> 00:03:17,940
something that many other setups

00:03:14,810 --> 00:03:20,010
competitors whatever don't do so keep

00:03:17,940 --> 00:03:22,440
that in mind will play a role later so

00:03:20,010 --> 00:03:25,470
this all what works well there are

00:03:22,440 --> 00:03:27,180
asterisks almost everywhere except the

00:03:25,470 --> 00:03:29,370
high frequency sampling which makes it

00:03:27,180 --> 00:03:31,350
even more awesome so all the asterisk

00:03:29,370 --> 00:03:33,330
are essentially one thing if you little

00:03:31,350 --> 00:03:34,950
buckets defined so here you need to run

00:03:33,330 --> 00:03:36,840
on a millisecond bucket here you need to

00:03:34,950 --> 00:03:38,940
four kilobyte bucket for optics you need

00:03:36,840 --> 00:03:39,510
your tolerated and target value whatever

00:03:38,940 --> 00:03:41,580
they call it

00:03:39,510 --> 00:03:44,280
and even for the correct aggregation you

00:03:41,580 --> 00:03:46,110
need compatible bucket layouts I'm not

00:03:44,280 --> 00:03:48,330
saying the same because you can have

00:03:46,110 --> 00:03:51,000
compatible layouts if you like subdivide

00:03:48,330 --> 00:03:54,560
buckets there we did some trickery with

00:03:51,000 --> 00:03:57,650
cumulative difficult cumulative pockets

00:03:54,560 --> 00:03:59,880
but everything requires that you have

00:03:57,650 --> 00:04:02,280
predefined the bucket layout in the

00:03:59,880 --> 00:04:05,370
right way so this is already one of the

00:04:02,280 --> 00:04:07,320
problems we will come to that later so

00:04:05,370 --> 00:04:08,880
now a list of problems I left out all

00:04:07,320 --> 00:04:10,739
the very several problems that might

00:04:08,880 --> 00:04:12,470
still bite you badly but there are too

00:04:10,739 --> 00:04:17,130
subtle to explain in twenty minutes so

00:04:12,470 --> 00:04:18,750
incomplete list so this this is not the

00:04:17,130 --> 00:04:19,650
problem this is actually why we created

00:04:18,750 --> 00:04:23,400
histograms

00:04:19,650 --> 00:04:26,030
back then in 2015 the idea was you want

00:04:23,400 --> 00:04:29,220
to calculate 99th percentile latency

00:04:26,030 --> 00:04:31,979
median latency and we created together a

00:04:29,220 --> 00:04:34,350
cystogram this infamous function

00:04:31,979 --> 00:04:36,690
histogram canta so what's wrong about

00:04:34,350 --> 00:04:37,200
this kind of nothing is wrong about it

00:04:36,690 --> 00:04:40,200
but

00:04:37,200 --> 00:04:41,700
our problems interestingly nowadays I

00:04:40,200 --> 00:04:44,340
think the crash night on the previous

00:04:41,700 --> 00:04:46,440
life that work really well they are in

00:04:44,340 --> 00:04:49,320
my opinion way more relevant in modern

00:04:46,440 --> 00:04:51,030
observability land because this 99th can

00:04:49,320 --> 00:04:53,670
tell is totally overrated but still

00:04:51,030 --> 00:04:56,550
sometimes you want to know it so what's

00:04:53,670 --> 00:04:58,800
the problem first thing the accuracy

00:04:56,550 --> 00:05:01,020
depends on your bucket layout if you're

00:04:58,800 --> 00:05:03,570
99% Elaine C is quite close to a bucket

00:05:01,020 --> 00:05:05,580
boundary great it's very accurate if

00:05:03,570 --> 00:05:09,120
it's far away from a bucket boundary not

00:05:05,580 --> 00:05:11,760
so great so obviously countermeasure

00:05:09,120 --> 00:05:13,800
just have a lot of pockets problem

00:05:11,760 --> 00:05:14,910
pockets are expensive so what we

00:05:13,800 --> 00:05:17,220
recommend kind of more or less

00:05:14,910 --> 00:05:19,500
officially just put your pocket layouts

00:05:17,220 --> 00:05:22,260
where you think you have interesting

00:05:19,500 --> 00:05:23,940
values if your SLO latency is something

00:05:22,260 --> 00:05:27,660
like a millisecond spook put a bucket

00:05:23,940 --> 00:05:28,830
boundary there and it's great right ok

00:05:27,660 --> 00:05:31,500
let's keep it there

00:05:28,830 --> 00:05:33,360
the other thing is the asterisk

00:05:31,500 --> 00:05:36,060
essentially but now for this thing bar

00:05:33,360 --> 00:05:38,070
coding scheme must be compatible across

00:05:36,060 --> 00:05:40,470
aggregated metrics so these might be

00:05:38,070 --> 00:05:42,210
many metrics histograms to correct

00:05:40,470 --> 00:05:44,370
aggregation if the bucket layout is

00:05:42,210 --> 00:05:46,110
compatible but also across the rate

00:05:44,370 --> 00:05:48,390
calculation which is 5 minutes here

00:05:46,110 --> 00:05:50,910
that's kind of easy to keep the same

00:05:48,390 --> 00:05:53,940
bucket layout over five minutes but this

00:05:50,910 --> 00:05:55,440
could be days in certain use cases where

00:05:53,940 --> 00:05:56,730
you have to pay attention that you

00:05:55,440 --> 00:05:59,540
haven't changed your bucket layout an

00:05:56,730 --> 00:06:01,860
incompatible session in that time frame

00:05:59,540 --> 00:06:04,080
now why would you ever change it the

00:06:01,860 --> 00:06:06,780
bucket layout you you you come up with

00:06:04,080 --> 00:06:08,700
one and you be done with it now I just

00:06:06,780 --> 00:06:09,210
said in the previous point we tell

00:06:08,700 --> 00:06:11,190
people

00:06:09,210 --> 00:06:14,220
put the bucket layout put the bucket

00:06:11,190 --> 00:06:16,680
boundaries were you have interesting

00:06:14,220 --> 00:06:19,590
latency values so if you got the next

00:06:16,680 --> 00:06:21,360
generation CPU or something or you

00:06:19,590 --> 00:06:23,340
optimize your code and suddenly you have

00:06:21,360 --> 00:06:24,930
half the latency then the interesting

00:06:23,340 --> 00:06:26,910
values have just changed and you change

00:06:24,930 --> 00:06:28,590
your bucket layout so kind of this is

00:06:26,910 --> 00:06:31,830
all related and it makes each other

00:06:28,590 --> 00:06:33,390
worse and it has all to do this pockets

00:06:31,830 --> 00:06:35,850
are too expensive this is where I have

00:06:33,390 --> 00:06:37,800
to be like this judicious pocket layout

00:06:35,850 --> 00:06:41,130
and have to change it all the time man

00:06:37,800 --> 00:06:42,920
ok the other thing is really completely

00:06:41,130 --> 00:06:47,390
independent that's the ingestion

00:06:42,920 --> 00:06:50,680
isolation Ganesh already talked about it

00:06:47,390 --> 00:06:52,960
if you ingest is great information

00:06:50,680 --> 00:06:55,449
the scrape symbols will show up one

00:06:52,960 --> 00:06:57,100
after another in the TCB which is like

00:06:55,449 --> 00:07:00,490
fraction of a second it's not bad

00:06:57,100 --> 00:07:01,690
usually but if you hit different buckets

00:07:00,490 --> 00:07:03,340
like if some of the buckets already

00:07:01,690 --> 00:07:04,720
updated in the same scraper and others

00:07:03,340 --> 00:07:08,289
are not this could under circumstances

00:07:04,720 --> 00:07:10,479
create really weird results and if you

00:07:08,289 --> 00:07:12,039
aggregate a lot of histograms from

00:07:10,479 --> 00:07:15,520
different targets the likelihood that

00:07:12,039 --> 00:07:17,590
you hit that case is increasingly high

00:07:15,520 --> 00:07:19,120
and we want to aggregate this is why we

00:07:17,590 --> 00:07:22,930
created histograms to be aggregated on

00:07:19,120 --> 00:07:26,139
so this is kind of bad as well okay

00:07:22,930 --> 00:07:28,960
final thing this is almost precisely the

00:07:26,139 --> 00:07:33,849
slice at the slice I have done too much

00:07:28,960 --> 00:07:35,710
go this slide that Chris used this is

00:07:33,849 --> 00:07:37,840
how we recommend you should do the

00:07:35,710 --> 00:07:39,910
partitioning you take a counter failure

00:07:37,840 --> 00:07:42,430
for your HTTP request and your petition

00:07:39,910 --> 00:07:44,710
by status and method and whatnot and

00:07:42,430 --> 00:07:47,380
then you have a histogram that you are

00:07:44,710 --> 00:07:49,419
not partitioning why because pockets are

00:07:47,380 --> 00:07:52,780
expensive right so this is just a

00:07:49,419 --> 00:07:54,639
multiplier in your cardinality so now I

00:07:52,780 --> 00:07:56,620
have found my I mean Chris just said

00:07:54,639 --> 00:07:59,380
it's great right you just do this and if

00:07:56,620 --> 00:08:01,900
you really need precise information you

00:07:59,380 --> 00:08:05,820
go to your event processing system but

00:08:01,900 --> 00:08:08,830
I'm always did something I'm always

00:08:05,820 --> 00:08:11,289
really I mean recently I got

00:08:08,830 --> 00:08:13,750
increasingly annoyed by that because I

00:08:11,289 --> 00:08:15,610
had a lot of those okay I get a forum

00:08:13,750 --> 00:08:17,680
for storm how fast am I actually

00:08:15,610 --> 00:08:19,330
responding to for force is that okay

00:08:17,680 --> 00:08:22,479
your stat creating my outage right now

00:08:19,330 --> 00:08:24,610
or I get like 5 or 3 is this like do we

00:08:22,479 --> 00:08:26,349
have two different timeouts I hate like

00:08:24,610 --> 00:08:28,419
two different populations or is it all

00:08:26,349 --> 00:08:30,849
the same and of course I still want to

00:08:28,419 --> 00:08:33,310
know like just my to hundreds how fast

00:08:30,849 --> 00:08:35,529
they are well I have a four for storm or

00:08:33,310 --> 00:08:38,020
something I find myself quite often in

00:08:35,529 --> 00:08:39,370
that situation again you can partition

00:08:38,020 --> 00:08:41,760
your histograms planned that you have to

00:08:39,370 --> 00:08:47,310
be super stingy with your pockets

00:08:41,760 --> 00:08:50,890
okay the future how we tie was sorry

00:08:47,310 --> 00:08:54,209
the future is kind of difficult to

00:08:50,890 --> 00:08:57,100
predict but I prune the problem list in

00:08:54,209 --> 00:08:59,200
kind of some manipulative way but we

00:08:57,100 --> 00:09:00,610
have only two problems essentially the

00:08:59,200 --> 00:09:04,750
manas pockets are too freaking expensive

00:09:00,610 --> 00:09:06,760
and the other is isolation so look at

00:09:04,750 --> 00:09:08,080
different options option 0 I call it

00:09:06,760 --> 00:09:09,190
zero because it's not really an option

00:09:08,080 --> 00:09:12,610
we're doing it anyway

00:09:09,190 --> 00:09:14,020
fixed isolation so Ganesh explained that

00:09:12,610 --> 00:09:16,630
already so I don't have to do a lot

00:09:14,020 --> 00:09:18,910
about it but I should mention this was

00:09:16,630 --> 00:09:21,130
already treated here at prom con two

00:09:18,910 --> 00:09:22,480
years ago was my most favorite from

00:09:21,130 --> 00:09:24,520
contour kits probably the one talk that

00:09:22,480 --> 00:09:27,040
everybody forgot who was there two years

00:09:24,520 --> 00:09:28,630
ago because you were just open mouth and

00:09:27,040 --> 00:09:31,420
had no idea what this guy was talking

00:09:28,630 --> 00:09:33,910
about this was Brian's staleness talk

00:09:31,420 --> 00:09:37,480
right but it was also about isolation dn

00:09:33,910 --> 00:09:38,980
and I loved it but interestingly I

00:09:37,480 --> 00:09:42,450
looked up the slides it was written like

00:09:38,980 --> 00:09:46,540
I'm almost done with that and that's the

00:09:42,450 --> 00:09:50,740
pull request number 105 and TS DB which

00:09:46,540 --> 00:09:53,080
then got redone by Gautham in 2018

00:09:50,740 --> 00:09:54,970
I mean garnish already explained that

00:09:53,080 --> 00:09:56,860
right so we have to pick this up we have

00:09:54,970 --> 00:09:59,200
to get it done it might have a slight

00:09:56,860 --> 00:10:01,660
performance penalty but like ingestion

00:09:59,200 --> 00:10:04,000
is just very fast anyway so we will do

00:10:01,660 --> 00:10:04,360
this and isolations done one problem

00:10:04,000 --> 00:10:08,860
gone

00:10:04,360 --> 00:10:13,600
which leads us yeah okay I thought he

00:10:08,860 --> 00:10:15,960
was like silently weeping now pockets

00:10:13,600 --> 00:10:19,690
are too expensive so what can we do

00:10:15,960 --> 00:10:22,150
option one we do nothing that mean we

00:10:19,690 --> 00:10:24,040
live for that like forever like 2015 we

00:10:22,150 --> 00:10:25,990
created histograms this was not a

00:10:24,040 --> 00:10:28,210
surprise we were totally aware that this

00:10:25,990 --> 00:10:31,450
is a problem and he said yeah I mean we

00:10:28,210 --> 00:10:33,130
will if is that now there are various

00:10:31,450 --> 00:10:36,400
reasons why I don't think we should do

00:10:33,130 --> 00:10:38,770
nothing the one is from bzees is kind of

00:10:36,400 --> 00:10:41,980
popular by now so people we get backlash

00:10:38,770 --> 00:10:44,650
I see a lot of like people complaining

00:10:41,980 --> 00:10:47,860
spreading fault and everything you could

00:10:44,650 --> 00:10:49,330
all say we don't care like if they don't

00:10:47,860 --> 00:10:51,960
want to use our awesome open-source

00:10:49,330 --> 00:10:54,400
monitoring system it's their loss right

00:10:51,960 --> 00:10:57,370
but it's kind of there is usually a

00:10:54,400 --> 00:11:00,660
route like a true thing in this and

00:10:57,370 --> 00:11:02,740
often it has to do with histograms or

00:11:00,660 --> 00:11:03,160
just that they are difficult to work

00:11:02,740 --> 00:11:04,330
with

00:11:03,160 --> 00:11:06,850
are you have to pre you find your

00:11:04,330 --> 00:11:08,740
barking layout or whatever so I think

00:11:06,850 --> 00:11:11,500
this is also it's actually as Chris said

00:11:08,740 --> 00:11:13,570
like confirms what I have what I was

00:11:11,500 --> 00:11:15,160
thinking you just switch over to your

00:11:13,570 --> 00:11:17,020
event processing system if you have to

00:11:15,160 --> 00:11:18,220
answer like difficult questions fair

00:11:17,020 --> 00:11:21,220
right put

00:11:18,220 --> 00:11:23,830
I not do this within Prometheus okay

00:11:21,220 --> 00:11:26,440
whatever but there's also a reason where

00:11:23,830 --> 00:11:27,850
I think as an engineer or has like

00:11:26,440 --> 00:11:30,390
somebody who wasn't the project for a

00:11:27,850 --> 00:11:33,640
while I think this should be should be

00:11:30,390 --> 00:11:37,180
improved and that's one of my proverbs I

00:11:33,640 --> 00:11:39,850
my one my other top three favorite topic

00:11:37,180 --> 00:11:41,230
is Prometheus proverbs instrument first

00:11:39,850 --> 00:11:43,600
ask questions later that's one of the

00:11:41,230 --> 00:11:45,640
Proverbs that essentially means you can

00:11:43,600 --> 00:11:46,870
just do a very low-level instrumentation

00:11:45,640 --> 00:11:48,190
in your code you don't have to think a

00:11:46,870 --> 00:11:51,010
lot and then later you can ask questions

00:11:48,190 --> 00:11:53,050
for instagrams that doesn't really hold

00:11:51,010 --> 00:11:54,550
because you have to know your SLO what

00:11:53,050 --> 00:11:57,340
latency values are interested

00:11:54,550 --> 00:12:00,340
you cannot partition so you cannot later

00:11:57,340 --> 00:12:02,530
ask for for or force specifically all

00:12:00,340 --> 00:12:05,020
those things right so I think we are not

00:12:02,530 --> 00:12:08,470
delivering that promise and I really

00:12:05,020 --> 00:12:11,860
would like to improve this I I have

00:12:08,470 --> 00:12:15,520
liked that for quite some time okay so

00:12:11,860 --> 00:12:16,780
option to make pockets a bit cheaper we

00:12:15,520 --> 00:12:18,220
can just make it a bit more efficient

00:12:16,780 --> 00:12:21,610
right there are there should be some

00:12:18,220 --> 00:12:23,020
ways of doing this and I see to like

00:12:21,610 --> 00:12:26,470
this is kind of the low-hanging fruit

00:12:23,020 --> 00:12:28,180
thing and I see to like attack vectors

00:12:26,470 --> 00:12:30,940
the one is the expose it format and the

00:12:28,180 --> 00:12:34,660
other one is TTS V so this is the

00:12:30,940 --> 00:12:36,580
exposition format as we have it now you

00:12:34,660 --> 00:12:39,580
see like the bucket boundaries look

00:12:36,580 --> 00:12:43,030
really well that's because it's taken

00:12:39,580 --> 00:12:45,550
from the little example program inclined

00:12:43,030 --> 00:12:48,220
rolling and this doesn't just hard code

00:12:45,550 --> 00:12:49,990
the boundaries it calculates them and

00:12:48,220 --> 00:12:53,830
then you get those like floating point

00:12:49,990 --> 00:12:55,420
inaccuracies so this is not frequent

00:12:53,830 --> 00:12:57,220
like often you just hard code and you

00:12:55,420 --> 00:12:59,080
say my SLO latency someone mainly

00:12:57,220 --> 00:13:01,960
setting yourself a hard-coded 20.1 and

00:12:59,080 --> 00:13:03,670
then it looks not as bad but it's still

00:13:01,960 --> 00:13:05,560
like if you calculate the pocket

00:13:03,670 --> 00:13:07,450
boundaries and this is often a very

00:13:05,560 --> 00:13:09,220
reasonable approach it's just more

00:13:07,450 --> 00:13:11,560
sophisticated so not so many people are

00:13:09,220 --> 00:13:13,690
doing it you get those weird things and

00:13:11,560 --> 00:13:16,210
then you see it's really repetitive

00:13:13,690 --> 00:13:20,230
because this metric name is repeated all

00:13:16,210 --> 00:13:21,730
the time and I didn't even partition

00:13:20,230 --> 00:13:23,290
this histogram following our best

00:13:21,730 --> 00:13:25,840
practices but purpose I want you right

00:13:23,290 --> 00:13:29,590
and then it gets even more blown up so

00:13:25,840 --> 00:13:32,830
this is 1676 bytes for a single non

00:13:29,590 --> 00:13:36,800
predation histogram our usual

00:13:32,830 --> 00:13:39,380
our usual excuse was that compression

00:13:36,800 --> 00:13:41,960
saves the day from easy fuses

00:13:39,380 --> 00:13:44,420
compression by default and indeed if we

00:13:41,960 --> 00:13:50,120
gzip this whole thing 330 miles that's

00:13:44,420 --> 00:13:53,750
fine but I think this is a bit of a yeah

00:13:50,120 --> 00:13:56,510
kind of a dead LA or something there is

00:13:53,750 --> 00:13:59,420
this cube state metric story were marks

00:13:56,510 --> 00:14:01,370
in and found out the compression is

00:13:59,420 --> 00:14:03,980
actually more expensive than the network

00:14:01,370 --> 00:14:05,480
bandwidth usually so for cube state

00:14:03,980 --> 00:14:07,610
medical it just jumps hundreds and

00:14:05,480 --> 00:14:10,700
hundreds of megabytes of metrics onto

00:14:07,610 --> 00:14:12,200
the wire they by default disabled gzip

00:14:10,700 --> 00:14:16,880
compression because it was just faster

00:14:12,200 --> 00:14:19,130
faster mind-blowing so even if

00:14:16,880 --> 00:14:21,140
compression would be free if you have a

00:14:19,130 --> 00:14:23,240
lot of this somebody has to render this

00:14:21,140 --> 00:14:25,670
and somebody has to pass it like the

00:14:23,240 --> 00:14:28,430
parser is super optimized of course but

00:14:25,670 --> 00:14:31,790
still it's a cost right now interesting

00:14:28,430 --> 00:14:33,860
we had a less repetitive exposition

00:14:31,790 --> 00:14:35,420
format proud of us

00:14:33,860 --> 00:14:37,340
I mean labels are still kind of

00:14:35,420 --> 00:14:38,930
repetitive but it didn't need to repeat

00:14:37,340 --> 00:14:41,270
all the metrics and it has all the

00:14:38,930 --> 00:14:43,370
floats as just floats like binary

00:14:41,270 --> 00:14:48,260
encoded if you do the very same thing

00:14:43,370 --> 00:14:51,830
it's 257 bites and protobuf if you

00:14:48,260 --> 00:14:53,450
compress that weirdly it's not

00:14:51,830 --> 00:14:58,570
compressed much and it's even larger

00:14:53,450 --> 00:15:00,860
than the compressed text format okay so

00:14:58,570 --> 00:15:01,910
but the the kind of the interesting

00:15:00,860 --> 00:15:04,070
thing is it doesn't even need

00:15:01,910 --> 00:15:05,720
compression so we could have gone down

00:15:04,070 --> 00:15:07,520
that right but now we have just learned

00:15:05,720 --> 00:15:10,340
of metrics is almost done so we are kind

00:15:07,520 --> 00:15:13,100
of stuck with the left's alright I would

00:15:10,340 --> 00:15:15,440
also say that there's still a lot of

00:15:13,100 --> 00:15:18,110
numbers in there so there was a short

00:15:15,440 --> 00:15:20,060
discussion when from each is to drop the

00:15:18,110 --> 00:15:21,350
protobuf format that he should make this

00:15:20,060 --> 00:15:23,180
more compact and one of these

00:15:21,350 --> 00:15:24,770
suggestions looked like that that you

00:15:23,180 --> 00:15:26,510
just have the metric named ones and then

00:15:24,770 --> 00:15:28,370
you have all the buckets with their

00:15:26,510 --> 00:15:31,940
count and then you have the sum and the

00:15:28,370 --> 00:15:34,460
total count in the end I don't know why

00:15:31,940 --> 00:15:38,330
this never got traction but this is

00:15:34,460 --> 00:15:39,650
already much better it's like seven it's

00:15:38,330 --> 00:15:42,920
not of this slide its program my notes

00:15:39,650 --> 00:15:44,980
it's 702 bytes so it's like twice as

00:15:42,920 --> 00:15:47,350
large as the protobuf

00:15:44,980 --> 00:15:49,060
and and more like hard-coded back layout

00:15:47,350 --> 00:15:51,430
would be quite nice but it's still a lot

00:15:49,060 --> 00:15:53,110
of numbers and numbers in text is kind

00:15:51,430 --> 00:15:55,029
of not very efficient so if you want to

00:15:53,110 --> 00:15:57,940
be super efficient we would like some

00:15:55,029 --> 00:16:01,029
binary format we could also do stuff

00:15:57,940 --> 00:16:03,610
like there were some kind of compressed

00:16:01,029 --> 00:16:05,620
VAR bit encoding of the Cohens and we

00:16:03,610 --> 00:16:07,360
could if we have a partition histogram

00:16:05,620 --> 00:16:09,579
we could have the bucket scheme only

00:16:07,360 --> 00:16:11,680
once and not every time we feed it

00:16:09,579 --> 00:16:13,480
so there is some potential of optimizing

00:16:11,680 --> 00:16:15,490
this but it would be a different

00:16:13,480 --> 00:16:18,610
exposition format okay

00:16:15,490 --> 00:16:20,800
let's quickly look at the TSV this is

00:16:18,610 --> 00:16:21,660
how you can query as a histogram in the

00:16:20,800 --> 00:16:24,310
TSV

00:16:21,660 --> 00:16:26,620
interestingly this looks really similar

00:16:24,310 --> 00:16:28,690
to the text format and that's not by

00:16:26,620 --> 00:16:31,959
coincidence that's because the text

00:16:28,690 --> 00:16:35,800
format was informed by the way that

00:16:31,959 --> 00:16:38,440
Prometheus saves time series in its PSDB

00:16:35,800 --> 00:16:41,170
and the problem is that the TSV has zero

00:16:38,440 --> 00:16:43,029
notion of histograms what we just do we

00:16:41,170 --> 00:16:45,250
save every pocket as a time series we

00:16:43,029 --> 00:16:47,620
save the car count and the sum as a time

00:16:45,250 --> 00:16:49,750
series and since we cannot have like

00:16:47,620 --> 00:16:52,899
floating point values as label value we

00:16:49,750 --> 00:16:55,209
encode the pocket boundary as a string

00:16:52,899 --> 00:16:57,850
and then when we read it again and we

00:16:55,209 --> 00:16:59,380
have to like do math on it in the

00:16:57,850 --> 00:17:01,000
history of corner function we pass it

00:16:59,380 --> 00:17:04,900
again as a float which is a bit weird

00:17:01,000 --> 00:17:06,549
anyway this is not as graceful as it

00:17:04,900 --> 00:17:10,480
looks because there are symbol tables

00:17:06,549 --> 00:17:13,240
and TSB and all those things so I think

00:17:10,480 --> 00:17:16,089
the biggest potential of saving here is

00:17:13,240 --> 00:17:18,850
that the every pocket is a whole series

00:17:16,089 --> 00:17:21,339
in the index I'm not even so sure what

00:17:18,850 --> 00:17:24,160
helps so much but it would help perhaps

00:17:21,339 --> 00:17:26,380
a bit if we could just teach TSB to

00:17:24,160 --> 00:17:28,840
treat a whole histogram as one value

00:17:26,380 --> 00:17:31,090
similar to floating point value and then

00:17:28,840 --> 00:17:34,570
we have just one in entering the index

00:17:31,090 --> 00:17:38,260
per histogram we could also leverage

00:17:34,570 --> 00:17:40,299
this then by doing some compression we

00:17:38,260 --> 00:17:42,040
have C double Delta for simple values

00:17:40,299 --> 00:17:43,840
anyway and timestamp but we could per

00:17:42,040 --> 00:17:46,120
something cross pockets like pockets

00:17:43,840 --> 00:17:48,669
always go up and they have certain

00:17:46,120 --> 00:17:49,960
patterns that might compress nicely so

00:17:48,669 --> 00:17:52,000
this is also something we could think

00:17:49,960 --> 00:17:54,400
about and then we could still make it

00:17:52,000 --> 00:17:56,200
all compatible that for prom ql for the

00:17:54,400 --> 00:17:58,299
evaluation engine would still look like

00:17:56,200 --> 00:17:58,870
this so this could probably be done

00:17:58,299 --> 00:18:03,990
lesson on

00:17:58,870 --> 00:18:08,650
breaking change but yeah good help of it

00:18:03,990 --> 00:18:11,170
okay but I think to make it really nice

00:18:08,650 --> 00:18:14,440
we have make to make pockets a lot

00:18:11,170 --> 00:18:16,770
cheaper how about having an infinite

00:18:14,440 --> 00:18:19,780
number of pockets and like every bucket

00:18:16,770 --> 00:18:22,059
boundary is just 5% above the previous

00:18:19,780 --> 00:18:25,840
one so we have like a five percent error

00:18:22,059 --> 00:18:27,880
margin on everything that would solve

00:18:25,840 --> 00:18:29,440
our pocket change problems because that

00:18:27,880 --> 00:18:31,510
pocket scheme would be so rich we never

00:18:29,440 --> 00:18:34,059
need to change it and it will also be

00:18:31,510 --> 00:18:36,130
super accurate whatever value we have we

00:18:34,059 --> 00:18:37,720
would deliver our promise we just have

00:18:36,130 --> 00:18:40,050
to make a cheap infinite number of

00:18:37,720 --> 00:18:42,550
pockets infinitely cheap or something

00:18:40,050 --> 00:18:46,150
sounds like not not a great option

00:18:42,550 --> 00:18:50,800
however there are those small as famous

00:18:46,150 --> 00:18:52,540
approaches that kind of follow that that

00:18:50,800 --> 00:18:55,059
idea eight-year histogram is super

00:18:52,540 --> 00:18:59,260
famous surco knows has for their

00:18:55,059 --> 00:19:02,050
proprietary matrix offer whatever it's

00:18:59,260 --> 00:19:04,900
called hosted metrics they have this ll

00:19:02,050 --> 00:19:06,400
his log linear histogram which the

00:19:04,900 --> 00:19:08,080
library is open source like they have

00:19:06,400 --> 00:19:12,340
open source everything about what they

00:19:08,080 --> 00:19:16,360
are doing there and then there is very

00:19:12,340 --> 00:19:20,020
hot paper science porn DD sketch from

00:19:16,360 --> 00:19:21,940
data doc this is it looks like

00:19:20,020 --> 00:19:23,260
mathematically super sophisticated but

00:19:21,940 --> 00:19:25,960
is actually very similar to this so

00:19:23,260 --> 00:19:28,330
Cronus thing it's it's actually very

00:19:25,960 --> 00:19:30,429
simple it's essentially infinite number

00:19:28,330 --> 00:19:33,550
of pockets with a more or less fixed

00:19:30,429 --> 00:19:36,670
schemer and the only secret for all of

00:19:33,550 --> 00:19:38,860
them is it can handle sparseness so

00:19:36,670 --> 00:19:40,120
empty pockets have no cost and that's

00:19:38,860 --> 00:19:40,750
what we are totally not doing in

00:19:40,120 --> 00:19:42,640
prometheus

00:19:40,750 --> 00:19:44,440
so if he wanted to adopt something like

00:19:42,640 --> 00:19:46,600
that we have to change everything to

00:19:44,440 --> 00:19:50,470
handles parcels so that would be very

00:19:46,600 --> 00:19:56,770
invasive but it would buy us quite a bit

00:19:50,470 --> 00:20:01,390
here there's another thing ok another

00:19:56,770 --> 00:20:04,450
thing is the how they aggregate stuff so

00:20:01,390 --> 00:20:05,890
this is a single histogram then you have

00:20:04,450 --> 00:20:07,420
systems from different instances they

00:20:05,890 --> 00:20:09,580
should all look slightly different I was

00:20:07,420 --> 00:20:12,370
just not had no time to make them

00:20:09,580 --> 00:20:15,799
different and then over time

00:20:12,370 --> 00:20:18,860
this is what they do in general all

00:20:15,799 --> 00:20:20,809
those metrics providers they always

00:20:18,860 --> 00:20:22,940
collect a histogram for one minute

00:20:20,809 --> 00:20:25,429
and then send it over to the metrics

00:20:22,940 --> 00:20:27,500
provider and then they reset it this is

00:20:25,429 --> 00:20:29,330
why sparseness works really well that

00:20:27,500 --> 00:20:31,610
because every minute they start from an

00:20:29,330 --> 00:20:33,260
empty slate and then every bucket is

00:20:31,610 --> 00:20:35,750
empty and has no cost and then they

00:20:33,260 --> 00:20:38,480
slowly fill up in prometheus land we do

00:20:35,750 --> 00:20:40,580
something different we we accumulate the

00:20:38,480 --> 00:20:42,679
histogram forever and we take the elders

00:20:40,580 --> 00:20:45,770
between two points in time to calculate

00:20:42,679 --> 00:20:47,809
our percentile and whatnot in this time

00:20:45,770 --> 00:20:50,600
frame which is good because it gives us

00:20:47,809 --> 00:20:52,190
this resolution that could be once per

00:20:50,600 --> 00:20:54,260
second or something they have just a one

00:20:52,190 --> 00:20:56,059
minute resolution which like when

00:20:54,260 --> 00:20:59,179
Siegelman doesn't like that for example

00:20:56,059 --> 00:21:02,210
so we could we have a good approach but

00:20:59,179 --> 00:21:06,080
this accumulating forever is a problem

00:21:02,210 --> 00:21:08,419
with sponsors I think there are ways out

00:21:06,080 --> 00:21:11,270
of it or to at least mitigate it but we

00:21:08,419 --> 00:21:14,450
don't have time for that so let me

00:21:11,270 --> 00:21:19,880
quickly go to option for some kind of

00:21:14,450 --> 00:21:21,950
digest or sketch so didi data doc call

00:21:19,880 --> 00:21:25,450
their stuff Sketch up but I think it's

00:21:21,950 --> 00:21:27,320
not really a sketch this is something so

00:21:25,450 --> 00:21:29,150
philosophical we had this also at this

00:21:27,320 --> 00:21:30,500
conference like if this is problematic

00:21:29,150 --> 00:21:31,820
you should perhaps not have it if

00:21:30,500 --> 00:21:33,980
pockets are expensive first you

00:21:31,820 --> 00:21:35,750
shouldn't have pockets so this is all

00:21:33,980 --> 00:21:37,790
about finding a solution where you

00:21:35,750 --> 00:21:39,890
mathematically represent kind of the

00:21:37,790 --> 00:21:43,490
shape of the histogram in some weird way

00:21:39,890 --> 00:21:46,340
in some digest this is the same problem

00:21:43,490 --> 00:21:49,610
as before all those algorithms there's

00:21:46,340 --> 00:21:53,270
like huge pile of papers from the last

00:21:49,610 --> 00:21:55,040
whatever 20 years the early algorithms

00:21:53,270 --> 00:21:57,470
had this problem they were not Murchie

00:21:55,040 --> 00:22:00,410
belanger gettable now the more modern

00:21:57,470 --> 00:22:02,960
they have this property they are merge

00:22:00,410 --> 00:22:05,510
both you can do this but then again for

00:22:02,960 --> 00:22:07,970
Prometheus we need this subtract ability

00:22:05,510 --> 00:22:11,419
we have to take the others and the best

00:22:07,970 --> 00:22:13,130
candidate more science porn this this

00:22:11,419 --> 00:22:15,260
thing here I think I put it here here

00:22:13,130 --> 00:22:17,030
this is the same thing in big so this is

00:22:15,260 --> 00:22:20,270
the moment base corner sketch thing and

00:22:17,030 --> 00:22:23,530
this almost delivers the promise of

00:22:20,270 --> 00:22:25,940
being like subtractive oh it's

00:22:23,530 --> 00:22:27,889
hilariously complicated that's the like

00:22:25,940 --> 00:22:30,289
ten page appendix just with all the

00:22:27,889 --> 00:22:33,980
maximum entropy proof and whatever it's

00:22:30,289 --> 00:22:36,200
fascinating it's really fascinating and

00:22:33,980 --> 00:22:37,970
I'm really sad I think it doesn't work

00:22:36,200 --> 00:22:39,769
for Prometheus even if we were willing

00:22:37,970 --> 00:22:41,779
to change everything I'm still a

00:22:39,769 --> 00:22:43,789
discussion with my boss Tom and with

00:22:41,779 --> 00:22:44,000
another guy and I have to make sure of

00:22:43,789 --> 00:22:47,899
that

00:22:44,000 --> 00:22:50,269
but yeah I think the Delta thing doesn't

00:22:47,899 --> 00:22:51,799
really work completely and also I think

00:22:50,269 --> 00:22:54,139
the biggest problem is all the sketches

00:22:51,799 --> 00:22:57,379
is longtail latency which is the one we

00:22:54,139 --> 00:22:59,360
are interested in it has it quote it's

00:22:57,379 --> 00:23:01,039
an estimate and it has an arrow March

00:22:59,360 --> 00:23:03,049
and that is just too big in my opinion

00:23:01,039 --> 00:23:04,399
or even the data rocks opinion this is

00:23:03,049 --> 00:23:05,799
why they wrote the other paper and

00:23:04,399 --> 00:23:08,149
they've probably called it sketch sort

00:23:05,799 --> 00:23:09,980
for to resonate but it's not a sketch

00:23:08,149 --> 00:23:12,649
and especially this question like how

00:23:09,980 --> 00:23:14,029
many requests have reserved below

00:23:12,649 --> 00:23:15,740
hundred milliseconds like what

00:23:14,029 --> 00:23:18,950
percentage I can answer this precisely

00:23:15,740 --> 00:23:21,740
and this is wishy-washy the sad so okay

00:23:18,950 --> 00:23:24,470
quickly my hit list the four options I

00:23:21,740 --> 00:23:26,929
mean we do isolation anyway do nothing I

00:23:24,470 --> 00:23:29,179
already said that I don't like that died

00:23:26,929 --> 00:23:30,769
just sketches fascinating super nice

00:23:29,179 --> 00:23:33,200
science mathematics but I think it

00:23:30,769 --> 00:23:35,509
doesn't help us and it kind of weakens

00:23:33,200 --> 00:23:37,100
where we are strong as make markets a

00:23:35,509 --> 00:23:39,350
bit cheaper if we can do nothing else I

00:23:37,100 --> 00:23:41,690
want to do this but I would really like

00:23:39,350 --> 00:23:43,549
to do this like in the close future to

00:23:41,690 --> 00:23:44,990
work on this process problem and if you

00:23:43,549 --> 00:23:45,500
can master that we can do something like

00:23:44,990 --> 00:23:47,330
that

00:23:45,500 --> 00:23:56,530
okay thank you

00:23:47,330 --> 00:23:56,530
[Applause]

00:24:00,550 --> 00:24:12,680
Thank You Baron so questions

00:24:02,990 --> 00:24:18,650
I can't guarantee he's just going to not

00:24:12,680 --> 00:24:22,280
just gonna hand you a paper she's been

00:24:18,650 --> 00:24:24,800
more than you were well I asked earlier

00:24:22,280 --> 00:24:25,850
people remember dish but it turns out we

00:24:24,800 --> 00:24:32,450
actually don't that many people who are

00:24:25,850 --> 00:24:36,680
here two years ago hello

00:24:32,450 --> 00:24:39,140
I I'm sort of asking us as someone who

00:24:36,680 --> 00:24:41,830
who codes on on bits of this and

00:24:39,140 --> 00:24:46,310
alternative implementations and so on is

00:24:41,830 --> 00:24:48,110
other than the histogram functions this

00:24:46,310 --> 00:24:50,150
with the some rate and so on that I have

00:24:48,110 --> 00:24:53,660
to copy and paste because I have no idea

00:24:50,150 --> 00:24:56,930
how to actually write that long so are

00:24:53,660 --> 00:24:59,960
there other uses I mean beyond just kind

00:24:56,930 --> 00:25:02,350
of inspecting the data and so on because

00:24:59,960 --> 00:25:05,510
I I kind of I kind of felt that that a

00:25:02,350 --> 00:25:09,380
very specialized data structure for a

00:25:05,510 --> 00:25:11,510
histogram made sense to me

00:25:09,380 --> 00:25:13,340
but I don't know enough about how that

00:25:11,510 --> 00:25:14,960
data is used so like you know are there

00:25:13,340 --> 00:25:16,700
other ways in which the data is used

00:25:14,960 --> 00:25:19,580
other than feed into that function I

00:25:16,700 --> 00:25:22,040
mean the the initial questions that work

00:25:19,580 --> 00:25:24,230
really well they just work directly on

00:25:22,040 --> 00:25:27,170
this bucket time series because you know

00:25:24,230 --> 00:25:31,340
the 100 millisecond time series which

00:25:27,170 --> 00:25:32,870
you call le equals o1 hopefully that's

00:25:31,340 --> 00:25:34,670
the time series I want to look at to

00:25:32,870 --> 00:25:37,640
calculate that and you're kind of deke

00:25:34,670 --> 00:25:39,560
directly into this which is fine and

00:25:37,640 --> 00:25:41,710
it's even makes sense to have this as a

00:25:39,560 --> 00:25:44,480
separate time series in that case and

00:25:41,710 --> 00:25:48,520
history or Con Dao looks at all of them

00:25:44,480 --> 00:25:51,790
at once essentially but yeah that's the

00:25:48,520 --> 00:25:54,530
that's the only case where we kind of

00:25:51,790 --> 00:25:56,960
reach or actively reconstruct this

00:25:54,530 --> 00:25:59,230
complex data structure virtually if that

00:25:56,960 --> 00:25:59,230
makes sense

00:26:02,020 --> 00:26:07,040
you want to give a statement in my love

00:26:04,850 --> 00:26:09,020
today this is how we you know like the

00:26:07,040 --> 00:26:10,220
SLO based error budget alerting that's

00:26:09,020 --> 00:26:12,380
very fit and very popular right now

00:26:10,220 --> 00:26:14,240
that's how we do it we we look at just

00:26:12,380 --> 00:26:16,940
one of the buckets like the yellow

00:26:14,240 --> 00:26:18,770
bucket basically and for updates you

00:26:16,940 --> 00:26:20,570
have to look at two buckets because they

00:26:18,770 --> 00:26:22,070
have two lightening Z values and then

00:26:20,570 --> 00:26:23,960
you have to predefined them properly

00:26:22,070 --> 00:26:26,540
well like these circles approach

00:26:23,960 --> 00:26:29,330
essentially they have 110 milliseconds

00:26:26,540 --> 00:26:34,190
120 milliseconds 130 milliseconds and so

00:26:29,330 --> 00:26:43,340
on and this is what like what's the SoCo

00:26:34,190 --> 00:26:45,170
nose guy I forgot his name like product

00:26:43,340 --> 00:26:48,080
manager just won't they never would tell

00:26:45,170 --> 00:26:50,630
you 123 milliseconds as well they always

00:26:48,080 --> 00:26:52,070
say 120 then they have to skew to a

00:26:50,630 --> 00:26:57,400
pocket already in the history okay

00:26:52,070 --> 00:26:57,400
that's kind of the idea okay there was

00:26:59,350 --> 00:27:06,710
we have people listening to this

00:27:01,190 --> 00:27:09,800
afterwards and online right now with the

00:27:06,710 --> 00:27:11,570
with this sparse um representation does

00:27:09,800 --> 00:27:13,550
that have any implications on the

00:27:11,570 --> 00:27:18,200
exposition format for the client

00:27:13,550 --> 00:27:20,810
libraries so I think we empowered

00:27:18,200 --> 00:27:23,560
histogram we need a specific exposition

00:27:20,810 --> 00:27:26,000
format for it this is the kind of the

00:27:23,560 --> 00:27:27,980
tom was kind of speculating Carrie just

00:27:26,000 --> 00:27:30,290
shoehorn it into this normal thing I

00:27:27,980 --> 00:27:31,850
think it will have a lot of numbers like

00:27:30,290 --> 00:27:34,700
these Socorro system has essentially

00:27:31,850 --> 00:27:36,650
40,000 pockets but they are not not a

00:27:34,700 --> 00:27:38,960
lot of them I use but we cannot do the

00:27:36,650 --> 00:27:40,670
cumulative thing to be sparse and I

00:27:38,960 --> 00:27:42,620
think we have so much numbers in there

00:27:40,670 --> 00:27:45,140
in the end that we need some kind of

00:27:42,620 --> 00:27:46,430
binary encoding I mean this is all

00:27:45,140 --> 00:27:48,020
speculation all right this is the

00:27:46,430 --> 00:27:50,270
beginning of a research and I wanted to

00:27:48,020 --> 00:27:52,580
give you this like now that I have more

00:27:50,270 --> 00:28:00,320
time to work on that if my boss wants me

00:27:52,580 --> 00:28:01,100
to the question is does a configurable

00:28:00,320 --> 00:28:04,280
metrics

00:28:01,100 --> 00:28:08,090
yes I mean it this would be also metrics

00:28:04,280 --> 00:28:14,920
all would be metrics I don't know like

00:28:08,090 --> 00:28:14,920
this is totally yeah kind of beyond that

00:28:18,670 --> 00:28:25,430
are slightly related subjects Oh

00:28:23,540 --> 00:28:28,070
in the future do you think that we can

00:28:25,430 --> 00:28:31,670
teach summaries and this question also

00:28:28,070 --> 00:28:37,130
to you in the open metric standard you

00:28:31,670 --> 00:28:39,170
would have summaries that's an open

00:28:37,130 --> 00:28:42,140
metrics question yeah we've got the

00:28:39,170 --> 00:28:45,110
summary still in open metrics for the

00:28:42,140 --> 00:28:46,850
same reasons its summary was first

00:28:45,110 --> 00:28:48,350
information - histogram came later but

00:28:46,850 --> 00:28:50,900
the thing is just so many things out

00:28:48,350 --> 00:28:52,370
there that expose quantiles that to be

00:28:50,900 --> 00:28:54,590
compatible with them and keep them on

00:28:52,370 --> 00:28:56,690
board it's still there like it's

00:28:54,590 --> 00:29:00,080
discouraged but it's still there like

00:28:56,690 --> 00:29:03,530
Diigo like the garbage collector exposes

00:29:00,080 --> 00:29:07,250
internal metrics about the 25th 75th and

00:29:03,530 --> 00:29:09,020
media content latency garbage collection

00:29:07,250 --> 00:29:10,790
generation and we just mirror this

00:29:09,020 --> 00:29:12,350
directly into Prometheus if you go

00:29:10,790 --> 00:29:15,470
online and this is just a summary right

00:29:12,350 --> 00:29:17,210
and also like Brian will always say the

00:29:15,470 --> 00:29:18,080
the summon count alone this oughta be

00:29:17,210 --> 00:29:21,230
quite valuable

00:29:18,080 --> 00:29:22,550
so this as a summary is always nice and

00:29:21,230 --> 00:29:24,230
sometimes you don't want to aggregate

00:29:22,550 --> 00:29:25,670
like you who wants to aggregate like

00:29:24,230 --> 00:29:27,320
garbage collection types across the

00:29:25,670 --> 00:29:29,540
whole fleet like you want to pinpoint

00:29:27,320 --> 00:29:32,630
that this one process is kind of weird

00:29:29,540 --> 00:29:34,730
and then yeah it makes sense graph it

00:29:32,630 --> 00:29:36,710
also the coulomb doesn't give us

00:29:34,730 --> 00:29:38,060
anything else okay there are cases where

00:29:36,710 --> 00:29:42,370
it makes sense so we're gonna be

00:29:38,060 --> 00:29:46,730
starting lightning talks very soon so

00:29:42,370 --> 00:29:51,620
Rob have his question so if Arica arava

00:29:46,730 --> 00:29:53,180
and java spoken basically describe

00:29:51,620 --> 00:29:54,940
somebody won't you ask something yeah I

00:29:53,180 --> 00:29:57,530
was just going to get them up

00:29:54,940 --> 00:30:03,650
parla nice official no it was just raw

00:29:57,530 --> 00:30:08,400
last question I'd be on I just wanted to

00:30:03,650 --> 00:30:11,190
ask what your thoughts are on team

00:30:08,400 --> 00:30:14,220
oh you know what I got to strength it

00:30:11,190 --> 00:30:15,840
from sorry I just wanted to ask what

00:30:14,220 --> 00:30:17,730
your thoughts are on tea digests and

00:30:15,840 --> 00:30:20,370
which is another merge more data

00:30:17,730 --> 00:30:22,830
structure this is not the hottest paper

00:30:20,370 --> 00:30:25,710
it's on my pile of papers at home I

00:30:22,830 --> 00:30:27,690
think as far as my research well this is

00:30:25,710 --> 00:30:31,260
a while ago I think he died it doesn't

00:30:27,690 --> 00:30:33,300
do this abstract ability thing and it's

00:30:31,260 --> 00:30:35,610
also same problem I think it's even

00:30:33,300 --> 00:30:37,230
worse than the moments based then they

00:30:35,610 --> 00:30:38,940
they compare like everybody claims that

00:30:37,230 --> 00:30:41,490
the others are worse of course but they

00:30:38,940 --> 00:30:43,920
have a lot of data to prove that and I

00:30:41,490 --> 00:30:45,630
think the moment based stuff here this

00:30:43,920 --> 00:30:48,059
is really the hottest and sexiest and I

00:30:45,630 --> 00:30:50,880
think they're a bit better per effort

00:30:48,059 --> 00:30:52,260
unit than tea digest and they have this

00:30:50,880 --> 00:30:53,850
protection of being subtract about

00:30:52,260 --> 00:30:55,380
although as my doubts so it's really

00:30:53,850 --> 00:30:58,890
really complicated and I think in the

00:30:55,380 --> 00:31:01,200
end we want precise 99.9 percent our

00:30:58,890 --> 00:31:05,700
latency and I think this they will never

00:31:01,200 --> 00:31:07,180
deliver that this is how this I think ok

00:31:05,700 --> 00:31:10,410
thanks very much Bjorn

00:31:07,180 --> 00:31:20,130
[Applause]

00:31:10,410 --> 00:31:20,130

YouTube URL: https://www.youtube.com/watch?v=7sQFkaMCyEI


