Title: PromCon EU 2019: Managing Grafana Dashboards with grafonnet and git
Publication date: 2019-12-29
Playlist: PromCon EU 2019
Description: 
	Speaker: Adam Wolfe Gordon

Grafana is a wonderful tool for visualizing Prometheus data. Getting started with Grafana is simple: login, create a dashboard, add some graphs, and call it a day. Come back later, add some graphs, edit some graphs, hit save and it's all live! Flash forward a few months or years and your Grafana instance probably has tens or hundreds of dashboards. Many of them present similar data in slightly inconsistent ways. You can see who last edited a dashboard and why, but it's hard to visualize the changes they made. There's no good way to review changes before they go live like you would for any other code you write. One row on your favorite dashboard is ever so slightly taller than the others and it makes you twitch every time you notice. At DigitalOcean we've solved these problems by storing our dashboard definitions in git, making them human-readable with grafonnet, and updating them via continuous integration. In this talk we'll describe our setup, show how it enables component re-use between dashboards, and demonstrate how it improves the ergonomics of managing Grafana dashboards at scale.

Slides: https://promcon.io/2019-munich/slides/managing-grafana-dashboards-with-grafonnet-and-git.pdf
Captions: 
	00:00:00,650 --> 00:00:08,910
[Music]

00:00:09,890 --> 00:00:13,790
all right thank you good morning

00:00:11,300 --> 00:00:15,410
everyone i'm madame wolf gordon i'm a

00:00:13,790 --> 00:00:17,300
senior engineer to solution where i work

00:00:15,410 --> 00:00:19,250
on our fenders to communities product i

00:00:17,300 --> 00:00:21,290
have a since a prank on i'm not going to

00:00:19,250 --> 00:00:25,640
talk about kubernetes I'm going to talk

00:00:21,290 --> 00:00:27,350
book or fauna and specifically I'm going

00:00:25,640 --> 00:00:30,170
to talk about how our team manages our

00:00:27,350 --> 00:00:32,870
funded dashboards using I get enticing a

00:00:30,170 --> 00:00:34,550
two o'clock or clinic which I like so I

00:00:32,870 --> 00:00:36,530
want to start today with a little bit of

00:00:34,550 --> 00:00:38,510
audience participation so just quick

00:00:36,530 --> 00:00:40,390
show of hands how many of you use graph

00:00:38,510 --> 00:00:43,360
on

00:00:40,390 --> 00:00:45,530
alright that's like almost everyone

00:00:43,360 --> 00:00:49,129
ideas anyone doesn't know worker fun is

00:00:45,530 --> 00:00:51,019
refine a is a visualization system lets

00:00:49,129 --> 00:00:52,580
you build dashboards supports Prometheus

00:00:51,019 --> 00:00:55,299
supports lots of other metrics backends

00:00:52,580 --> 00:00:57,470
as well as logs and various other things

00:00:55,299 --> 00:00:59,150
the nice thing will crow fauna is lets

00:00:57,470 --> 00:01:00,260
you see a lot of data in one place lets

00:00:59,150 --> 00:01:04,430
you pull in metrics from multiple

00:01:00,260 --> 00:01:05,990
sources into a single dashboard yeah

00:01:04,430 --> 00:01:07,310
it saves you from having to remember a

00:01:05,990 --> 00:01:10,520
bunch of prompt deliveries for metrics

00:01:07,310 --> 00:01:12,320
that you use a lot how many of you is

00:01:10,520 --> 00:01:14,740
sacred fauna is important to important

00:01:12,320 --> 00:01:18,170
to your operations

00:01:14,740 --> 00:01:19,660
alright a lot of us it's definitely

00:01:18,170 --> 00:01:21,830
important for us at digitalocean

00:01:19,660 --> 00:01:23,870
if something goes wrong if I get paged

00:01:21,830 --> 00:01:25,100
in the middle of the night Griffin is

00:01:23,870 --> 00:01:27,020
one of the first places I go and look to

00:01:25,100 --> 00:01:29,270
see maybe what's going on what am I

00:01:27,020 --> 00:01:30,680
getting paged for if I deploy something

00:01:29,270 --> 00:01:33,080
and I'm not totally confident in its

00:01:30,680 --> 00:01:34,580
performance characteristics I go find is

00:01:33,080 --> 00:01:36,970
where I'm gonna go and look watch make

00:01:34,580 --> 00:01:39,950
sure this look good

00:01:36,970 --> 00:01:41,510
how many of you do code review for your

00:01:39,950 --> 00:01:45,140
application or service whatever it is

00:01:41,510 --> 00:01:48,440
you're building almost differently most

00:01:45,140 --> 00:01:50,140
people how many of you do some kind of

00:01:48,440 --> 00:01:52,520
CI testing for your services

00:01:50,140 --> 00:01:55,340
how many do some kind of just continuous

00:01:52,520 --> 00:01:58,100
deployment so quite a few of us I think

00:01:55,340 --> 00:02:00,890
these are all you know pretty commonly

00:01:58,100 --> 00:02:04,100
accepted engineering practices now in an

00:02:00,890 --> 00:02:05,659
industry most of us review our code

00:02:04,100 --> 00:02:07,490
before it's committed most of us test it

00:02:05,659 --> 00:02:10,450
before it's committed most of us deploy

00:02:07,490 --> 00:02:13,129
right now once it's once it is committed

00:02:10,450 --> 00:02:14,810
how many of you do code review and CI

00:02:13,129 --> 00:02:18,380
testing and continuous deployment for

00:02:14,810 --> 00:02:21,890
your family dashboards all right there's

00:02:18,380 --> 00:02:23,000
a few that's good so some of us but not

00:02:21,890 --> 00:02:24,230
a lot of us

00:02:23,000 --> 00:02:26,240
most of us are doing it for our

00:02:24,230 --> 00:02:27,700
applications in our services but not for

00:02:26,240 --> 00:02:30,500
our girls

00:02:27,700 --> 00:02:32,600
and we weren't either but we decided

00:02:30,500 --> 00:02:34,040
that we should we remember we said our

00:02:32,600 --> 00:02:35,360
defended efforts are important to us

00:02:34,040 --> 00:02:37,430
they're important part of our operations

00:02:35,360 --> 00:02:39,680
so we should apply good engineering

00:02:37,430 --> 00:02:42,260
practices to them we should keep them in

00:02:39,680 --> 00:02:44,390
version control so that we can see who

00:02:42,260 --> 00:02:46,040
changed them when they changed it why

00:02:44,390 --> 00:02:48,530
they changed it what actually change

00:02:46,040 --> 00:02:50,570
when we should do code review for them

00:02:48,530 --> 00:02:53,110
we should take a look at what's changing

00:02:50,570 --> 00:02:55,460
before we actually make the change live

00:02:53,110 --> 00:02:57,560
ideally we do some kind of continuous

00:02:55,460 --> 00:02:59,840
integrations kind of testing validate

00:02:57,560 --> 00:03:02,120
that changes are correct before we roll

00:02:59,840 --> 00:03:03,200
them out and we should deploy

00:03:02,120 --> 00:03:05,840
automatically as well so we're not

00:03:03,200 --> 00:03:07,690
stepping on each other's toes and one

00:03:05,840 --> 00:03:10,120
that I didn't mention but is also a good

00:03:07,690 --> 00:03:12,440
practices component we use if we have

00:03:10,120 --> 00:03:14,420
metrics a bunch of services that produce

00:03:12,440 --> 00:03:16,100
the same metrics it's nice if they look

00:03:14,420 --> 00:03:18,620
the same everywhere on your dashboards

00:03:16,100 --> 00:03:20,000
that reduces the cognitive overhead when

00:03:18,620 --> 00:03:22,070
you go to look at a dashboard you don't

00:03:20,000 --> 00:03:24,110
have to figure out you know which panel

00:03:22,070 --> 00:03:29,360
is where I they're in the same place for

00:03:24,110 --> 00:03:31,370
all services that are sort of similar so

00:03:29,360 --> 00:03:36,170
we wanted to do all of these things and

00:03:31,370 --> 00:03:38,150
I went said oh do this and I discovered

00:03:36,170 --> 00:03:40,180
the girlfriend has an API so that this

00:03:38,150 --> 00:03:43,550
should be easy we can write our

00:03:40,180 --> 00:03:47,060
dashboards in JSON and we can deploy

00:03:43,550 --> 00:03:48,980
them using nigrum api i discovered that

00:03:47,060 --> 00:03:52,100
it wasn't quite so simple and there were

00:03:48,980 --> 00:03:55,340
two basic challenges for one griffin is

00:03:52,100 --> 00:03:56,900
JSON model for dashboards isn't really

00:03:55,340 --> 00:03:59,840
meant to be consumed by humans it's not

00:03:56,900 --> 00:04:03,320
nice it's really an internal

00:03:59,840 --> 00:04:04,760
representation which is bare but that

00:04:03,320 --> 00:04:07,610
meant that it wasn't great for just sort

00:04:04,760 --> 00:04:09,739
of writing it but by hand the other

00:04:07,610 --> 00:04:12,050
issue is the dashboards are inherently

00:04:09,739 --> 00:04:13,430
visual things right that's the whole

00:04:12,050 --> 00:04:16,519
point of having a dashboard is to look

00:04:13,430 --> 00:04:19,370
at it and so it's kind of hard to test

00:04:16,519 --> 00:04:21,080
or verify a change hard to see when

00:04:19,370 --> 00:04:23,330
you're reviewing code what a change is

00:04:21,080 --> 00:04:25,070
going to look like just from looking at

00:04:23,330 --> 00:04:26,510
the JSON model or some kind of code

00:04:25,070 --> 00:04:29,270
representation of the dashboard you want

00:04:26,510 --> 00:04:32,479
to be able to see it live so I had two

00:04:29,270 --> 00:04:35,030
problems to solve number one is how to

00:04:32,479 --> 00:04:36,090
make the date dashboard JSON human

00:04:35,030 --> 00:04:38,040
readable how to make it nice

00:04:36,090 --> 00:04:40,410
to work with and the other was how to

00:04:38,040 --> 00:04:42,720
make it reviewable how to generate

00:04:40,410 --> 00:04:46,650
previews or have some kind of way to see

00:04:42,720 --> 00:04:48,479
your changes before they go left so my

00:04:46,650 --> 00:04:50,850
solution for the first problem was jews

00:04:48,479 --> 00:04:53,340
json it ended up library calligraph line

00:04:50,850 --> 00:04:57,660
i json it is a json temporary i

00:04:53,340 --> 00:04:59,100
templating language so it supports

00:04:57,660 --> 00:05:01,590
everything that json supports even right

00:04:59,100 --> 00:05:03,060
broad json unit but it also supports to

00:05:01,590 --> 00:05:04,949
find functions and having variables

00:05:03,060 --> 00:05:06,210
trailing commas and all the other nice

00:05:04,949 --> 00:05:09,840
things that you like to have writing

00:05:06,210 --> 00:05:12,720
code graph on it is a griphon a library

00:05:09,840 --> 00:05:16,740
for json it so it understands how it has

00:05:12,720 --> 00:05:19,830
built into it all of the gryphon has

00:05:16,740 --> 00:05:22,440
specific json bits so it knows how to

00:05:19,830 --> 00:05:25,740
generate valid dashboard JSON for

00:05:22,440 --> 00:05:27,600
Gahanna i this combination is really

00:05:25,740 --> 00:05:30,360
nice it lets you write sort of human

00:05:27,600 --> 00:05:31,740
friendly human readable code it feels

00:05:30,360 --> 00:05:34,139
like reading and writing code rather

00:05:31,740 --> 00:05:36,389
than reading and writing just json and

00:05:34,139 --> 00:05:38,250
you can see on the slide up at the top i

00:05:36,389 --> 00:05:40,440
have a little snippet of json it where

00:05:38,250 --> 00:05:42,479
i'm importing the refinement library and

00:05:40,440 --> 00:05:43,860
defining me dashboard and you can see it

00:05:42,479 --> 00:05:47,780
compiles into this big message json

00:05:43,860 --> 00:05:47,780
which is much less than they still get

00:05:48,560 --> 00:05:53,190
my solution for the second problem was a

00:05:51,599 --> 00:05:55,229
feature of gravano that I hadn't really

00:05:53,190 --> 00:05:58,289
used much before I started working on

00:05:55,229 --> 00:06:01,229
this and that was snapshots a snapshot

00:05:58,289 --> 00:06:04,410
is an immutable point in time copy of a

00:06:01,229 --> 00:06:05,729
dashboard so it shows you a dashboard as

00:06:04,410 --> 00:06:07,740
it looked at a particular time with the

00:06:05,729 --> 00:06:11,130
data and everything and this is sort of

00:06:07,740 --> 00:06:12,630
most commonly used for sort of

00:06:11,130 --> 00:06:13,800
permalinks into dashboards so if you

00:06:12,630 --> 00:06:15,630
have an incident or something and you

00:06:13,800 --> 00:06:17,130
want to see what did my metrics look

00:06:15,630 --> 00:06:19,440
like at that time you create a sound

00:06:17,130 --> 00:06:23,490
shot it's easy to share on slack ramp

00:06:19,440 --> 00:06:25,080
was more it turns out that you can

00:06:23,490 --> 00:06:26,580
create a dashboard angriff on alright

00:06:25,080 --> 00:06:27,990
sorry i snapshotting gravano without

00:06:26,580 --> 00:06:29,910
having a dashboard for it you can

00:06:27,990 --> 00:06:33,419
actually just create a snapshot from a

00:06:29,910 --> 00:06:36,000
blob of JSON that defines it so that's

00:06:33,419 --> 00:06:37,440
exactly what we did to be able to have

00:06:36,000 --> 00:06:41,580
previews of dashboards when you're

00:06:37,440 --> 00:06:43,620
changing them we create a snapshot ingre

00:06:41,580 --> 00:06:45,810
fauna of the dashboard that we are

00:06:43,620 --> 00:06:47,580
changing and you can see up here I have

00:06:45,810 --> 00:06:49,380
a little snippet of JSON it again

00:06:47,580 --> 00:06:52,560
just defining a def brag

00:06:49,380 --> 00:06:54,480
and I can run a preview script and turn

00:06:52,560 --> 00:06:55,850
it into this dashboard that I can

00:06:54,480 --> 00:06:57,750
actually look at see what it looks like

00:06:55,850 --> 00:06:59,550
the one of the nice things about

00:06:57,750 --> 00:07:00,960
snapshots is they can have expiry times

00:06:59,550 --> 00:07:03,630
so we're not gonna fill up our whole

00:07:00,960 --> 00:07:04,980
graph on a server with these temporary

00:07:03,630 --> 00:07:06,990
or things that are intended to be

00:07:04,980 --> 00:07:08,850
temporary we can set them to expire

00:07:06,990 --> 00:07:13,290
after five minutes or seven days or

00:07:08,850 --> 00:07:15,740
whatever things appropriate so just to

00:07:13,290 --> 00:07:18,120
put together these pieces a little bit

00:07:15,740 --> 00:07:19,200
the way we manage our funded afterwards

00:07:18,120 --> 00:07:21,990
is in a git repository

00:07:19,200 --> 00:07:25,590
it's full of JSON a dashboard

00:07:21,990 --> 00:07:27,030
definitions like I mentioned and we have

00:07:25,590 --> 00:07:29,130
a script January preview so as you're

00:07:27,030 --> 00:07:30,330
working on a dashboard you'll generate a

00:07:29,130 --> 00:07:32,850
live preview you can see what you're

00:07:30,330 --> 00:07:34,560
working on we when you put up a pull

00:07:32,850 --> 00:07:36,330
request we have a CI job that finds

00:07:34,560 --> 00:07:38,070
changes in the dashboards in your flow

00:07:36,330 --> 00:07:39,210
request and it generates a preview for

00:07:38,070 --> 00:07:41,520
each of those dashboards supposed to

00:07:39,210 --> 00:07:42,810
link back to the board list and finally

00:07:41,520 --> 00:07:44,760
once you emerge something we have a

00:07:42,810 --> 00:07:46,680
continuous to play a job that publishes

00:07:44,760 --> 00:07:51,510
all the dashboards to Hana so they're

00:07:46,680 --> 00:07:52,980
live right away and that I think sounds

00:07:51,510 --> 00:07:55,530
like fun but it's more fun if you

00:07:52,980 --> 00:07:57,870
actually see it so we'll try a live demo

00:07:55,530 --> 00:08:01,470
here and hopefully the Wi-Fi holds up

00:07:57,870 --> 00:08:09,240
and everything let's say let's give it a

00:08:01,470 --> 00:08:11,970
try so for this demo I've deployed this

00:08:09,240 --> 00:08:13,670
sort of standard kubernetes demo thing

00:08:11,970 --> 00:08:16,140
which is emoji Votto

00:08:13,670 --> 00:08:19,710
this is a little set of micro services

00:08:16,140 --> 00:08:21,960
he's pretty widely in and demos and you

00:08:19,710 --> 00:08:24,810
see it's just a little page lets us vote

00:08:21,960 --> 00:08:29,160
for our favorite emoji it has a

00:08:24,810 --> 00:08:30,780
leaderboard and the sort of fun features

00:08:29,160 --> 00:08:32,870
if you vote for the donut throws error

00:08:30,780 --> 00:08:35,310
so you get some errors in your Luck's

00:08:32,870 --> 00:08:37,320
this is a special version of emoji photo

00:08:35,310 --> 00:08:39,630
that I have deployed today this one has

00:08:37,320 --> 00:08:42,840
previous metrics and I have a Prometheus

00:08:39,630 --> 00:08:45,150
service scraping it and I have your

00:08:42,840 --> 00:08:47,490
phone a setup to visualize it so I've

00:08:45,150 --> 00:08:49,950
built a little dashboard here of emoji

00:08:47,490 --> 00:08:52,290
popularity over time it just graphs I

00:08:49,950 --> 00:08:54,480
you know which emojis are being voted

00:08:52,290 --> 00:08:56,580
for and down at the bottom I have its

00:08:54,480 --> 00:08:58,050
top 20 emojis in the last 24 hours

00:08:56,580 --> 00:09:00,710
there's a low generator running on this

00:08:58,050 --> 00:09:03,720
I haven't been just like

00:09:00,710 --> 00:09:07,050
so this is happening automatically you

00:09:03,720 --> 00:09:09,480
can see how many boats there are the

00:09:07,050 --> 00:09:15,540
source for this dashboard is in a git

00:09:09,480 --> 00:09:17,640
repository which I have here so this is

00:09:15,540 --> 00:09:19,050
a repository it looks very much like the

00:09:17,640 --> 00:09:19,590
one that we use for our dashboards at

00:09:19,050 --> 00:09:22,620
digitalocean

00:09:19,590 --> 00:09:25,530
I in particular it has this dashboards

00:09:22,620 --> 00:09:26,730
directory which has in their case

00:09:25,530 --> 00:09:28,530
something one subdirectory but has sub

00:09:26,730 --> 00:09:30,960
directories these sub directories turn

00:09:28,530 --> 00:09:35,010
into folders under fauna so you can keep

00:09:30,960 --> 00:09:37,350
your dashboards nicely organized so

00:09:35,010 --> 00:09:39,720
here's our - our dashboard definitions

00:09:37,350 --> 00:09:42,020
in JSON so we'll look at the emoji

00:09:39,720 --> 00:09:45,120
popularity one they were just looking at

00:09:42,020 --> 00:09:47,070
you can see up top we imported a bunch

00:09:45,120 --> 00:09:51,270
of things these are just just importing

00:09:47,070 --> 00:09:52,710
the graph on a library I mentioned the

00:09:51,270 --> 00:09:54,450
next part you'll see here is a nice

00:09:52,710 --> 00:09:57,390
feature of JSON it which is that we can

00:09:54,450 --> 00:09:59,850
define local variables so we don't have

00:09:57,390 --> 00:10:02,130
to just sort of put all of our JSON in

00:09:59,850 --> 00:10:06,720
line we can give it useful names we can

00:10:02,130 --> 00:10:08,040
make it reusable variables finally we

00:10:06,720 --> 00:10:09,870
get to the actual dashboard definition

00:10:08,040 --> 00:10:11,370
this is what defining a real dashboard

00:10:09,870 --> 00:10:13,890
looks like in JSON it

00:10:11,370 --> 00:10:16,470
we've called dashboard button you we add

00:10:13,890 --> 00:10:19,350
panels to it you can see a little bit

00:10:16,470 --> 00:10:22,230
lower the Prometheus queries that we're

00:10:19,350 --> 00:10:26,160
putting in and you can see here that

00:10:22,230 --> 00:10:29,160
we're also able to use arbitrary JSON

00:10:26,160 --> 00:10:31,020
when we need to put JSON right in and

00:10:29,160 --> 00:10:32,910
you can do things like this where you

00:10:31,020 --> 00:10:34,110
have a JSON element defined in a

00:10:32,910 --> 00:10:35,910
variable and you want to merge it into

00:10:34,110 --> 00:10:38,190
something that you already have you can

00:10:35,910 --> 00:10:41,820
just add it merges it so it's pretty

00:10:38,190 --> 00:10:42,810
nice to use pretty ergonomic let's say

00:10:41,820 --> 00:10:45,750
that we want to make it change this

00:10:42,810 --> 00:10:47,220
dashboard so I have my dashboard here

00:10:45,750 --> 00:10:49,020
that we just looked at with my top 20

00:10:47,220 --> 00:10:50,670
emojis in the last 24 hours I want to

00:10:49,020 --> 00:10:53,400
add another table of top 20 emojis of

00:10:50,670 --> 00:10:57,570
all time just as an interesting the

00:10:53,400 --> 00:10:59,220
trick so hi here's my your closet area

00:10:57,570 --> 00:11:01,230
again just checked out and I've actually

00:10:59,220 --> 00:11:03,870
already made the change so that I didn't

00:11:01,230 --> 00:11:07,050
have to do that live so this is the

00:11:03,870 --> 00:11:09,090
change that I've made you can see I've

00:11:07,050 --> 00:11:12,300
just I'm adding another table panel with

00:11:09,090 --> 00:11:14,359
a very similar query in it just of all

00:11:12,300 --> 00:11:16,589
times

00:11:14,359 --> 00:11:20,399
so I want to see what that change is

00:11:16,589 --> 00:11:23,119
actually going to look like I'm gonna

00:11:20,399 --> 00:11:35,819
run my preview script am I gonna pass it

00:11:23,119 --> 00:11:37,769
my dashboard definition and that's going

00:11:35,819 --> 00:11:38,910
to generate a preview and it's actually

00:11:37,769 --> 00:11:41,220
going to just pop it open in a browser

00:11:38,910 --> 00:11:42,839
window and I can see it right away so

00:11:41,220 --> 00:11:44,519
now this is the same dashboard we just

00:11:42,839 --> 00:11:46,709
looked at except on the right-hand side

00:11:44,519 --> 00:11:51,059
now we have top 20 movies of all time

00:11:46,709 --> 00:11:54,480
dog is the most popular earning so

00:11:51,059 --> 00:11:55,049
that's a nice way to see what I'm

00:11:54,480 --> 00:11:57,509
working on

00:11:55,049 --> 00:11:58,619
if I create a pull request for that and

00:11:57,509 --> 00:12:03,029
again I've done the stay out of times

00:11:58,619 --> 00:12:05,069
they were a cute live we have I have a

00:12:03,029 --> 00:12:07,319
github action that runs on the floor

00:12:05,069 --> 00:12:08,699
request it finds files that were changed

00:12:07,319 --> 00:12:10,829
into pleura breast and generates

00:12:08,699 --> 00:12:13,980
previews for them so I can click through

00:12:10,829 --> 00:12:17,429
to this preview that it's generated and

00:12:13,980 --> 00:12:20,220
posted to my PR and we'll see the same

00:12:17,429 --> 00:12:21,449
thing the numbers might be a little bit

00:12:20,220 --> 00:12:26,279
different because this is again a

00:12:21,449 --> 00:12:29,160
snapshot it's time and this dashboard

00:12:26,279 --> 00:12:30,749
lasts for some number of days so if I -

00:12:29,160 --> 00:12:34,699
if someone took a long time to review my

00:12:30,749 --> 00:12:34,699
PR I might have to regenerate previews

00:12:34,759 --> 00:12:39,119
and I'm going to merge this pull request

00:12:36,660 --> 00:12:40,709
and we'll come back in a minute and

00:12:39,119 --> 00:12:44,939
we'll see that - news deployment has

00:12:40,709 --> 00:12:48,600
actually employed the change for the

00:12:44,939 --> 00:12:50,160
other piece that I mentioned is have

00:12:48,600 --> 00:12:51,509
being able to build reusable components

00:12:50,160 --> 00:12:54,480
and this is something we can do easily

00:12:51,509 --> 00:12:56,009
with JSON engrafted I I have a

00:12:54,480 --> 00:12:59,639
reasonable component in my templates

00:12:56,009 --> 00:13:01,319
directory here called G RPC so I have

00:12:59,639 --> 00:13:04,019
two g RPC services running as part of

00:13:01,319 --> 00:13:06,929
this demo and they are generating basic

00:13:04,019 --> 00:13:08,850
request metrics so request counts error

00:13:06,929 --> 00:13:12,209
counts request durations things you

00:13:08,850 --> 00:13:14,009
expect and I want to have dashboards for

00:13:12,209 --> 00:13:15,269
all of these services and I want them to

00:13:14,009 --> 00:13:16,350
look the same because they're generating

00:13:15,269 --> 00:13:19,919
the same metrics destroy the same

00:13:16,350 --> 00:13:22,799
metrics so I have a little graph on a

00:13:19,919 --> 00:13:24,509
component that I've written here I have

00:13:22,799 --> 00:13:26,390
a function called new in this file that

00:13:24,509 --> 00:13:30,110
returns a set of rows and

00:13:26,390 --> 00:13:31,790
set of rows is a row of request rates so

00:13:30,110 --> 00:13:33,200
it has a graph of request Bayer rate by

00:13:31,790 --> 00:13:36,200
method request favorite raped by

00:13:33,200 --> 00:13:38,420
response code then I have a row of error

00:13:36,200 --> 00:13:41,180
information so total error rate error

00:13:38,420 --> 00:13:43,820
rate by method finally a row of

00:13:41,180 --> 00:13:48,440
durations so request traditions P 50 P

00:13:43,820 --> 00:13:49,940
90 p net so basic sort of service

00:13:48,440 --> 00:13:54,860
metrics that you might have for any kind

00:13:49,940 --> 00:13:58,310
of service and we can see the way we use

00:13:54,860 --> 00:14:00,590
this template now is to import it into a

00:13:58,310 --> 00:14:03,950
dashboard I have my moji service for

00:14:00,590 --> 00:14:06,830
example I create a dashboard I've

00:14:03,950 --> 00:14:08,930
imported my G RPC library and I called

00:14:06,830 --> 00:14:10,970
GRP I knew I pass it my data source name

00:14:08,930 --> 00:14:14,600
and my service name and that's going to

00:14:10,970 --> 00:14:18,110
generate those three rows for this

00:14:14,600 --> 00:14:23,660
particular service and if I go to the

00:14:18,110 --> 00:14:26,810
fauna here we can see what that looks

00:14:23,660 --> 00:14:28,700
like I've got my response code request

00:14:26,810 --> 00:14:31,280
rates my error rates and my request

00:14:28,700 --> 00:14:32,960
durations which are pretty uniform

00:14:31,280 --> 00:14:36,350
that's not a very interesting demo in

00:14:32,960 --> 00:14:37,400
terms of metrics the voting service one

00:14:36,350 --> 00:14:42,110
is a little bit more addressing because

00:14:37,400 --> 00:14:45,440
it does have errors so you can see we've

00:14:42,110 --> 00:14:47,840
got the canary so let's say that I want

00:14:45,440 --> 00:14:50,420
to make a change to this template now I

00:14:47,840 --> 00:14:52,040
want to move all the legends onto the

00:14:50,420 --> 00:14:52,820
right-hand sides of the graph just so

00:14:52,040 --> 00:14:54,740
they're a little bit more readable

00:14:52,820 --> 00:14:57,640
because for example we have a lot of

00:14:54,740 --> 00:15:03,470
different metrics on this graph here

00:14:57,640 --> 00:15:10,070
again I've made the change ahead of time

00:15:03,470 --> 00:15:11,930
show you this is a pretty simple change

00:15:10,070 --> 00:15:14,030
just adding some legend parameters to

00:15:11,930 --> 00:15:16,160
all my tables are all of my my graph

00:15:14,030 --> 00:15:22,760
panels so if they show up in a nicer way

00:15:16,160 --> 00:15:24,770
and again I've created the flow requests

00:15:22,760 --> 00:15:29,030
ahead of time so if I go my port lists

00:15:24,770 --> 00:15:34,850
here got improved legend Sandri RPC

00:15:29,030 --> 00:15:36,940
graphs and the someone's left a calm

00:15:34,850 --> 00:15:41,410
cool

00:15:36,940 --> 00:15:42,970
I hope I hope that's a thumbs up you see

00:15:41,410 --> 00:15:44,620
my github action has actually detected

00:15:42,970 --> 00:15:46,240
all of the dashboards that import the

00:15:44,620 --> 00:15:48,010
component I changed and generated

00:15:46,240 --> 00:15:51,070
previews for all of them so if we change

00:15:48,010 --> 00:15:54,730
our shared component we get previews for

00:15:51,070 --> 00:15:56,530
all of them which is a nice feature so I

00:15:54,730 --> 00:15:59,920
can click on any one of these see what

00:15:56,530 --> 00:16:01,690
this actually will look like we should

00:15:59,920 --> 00:16:04,950
see the legends drop off right there

00:16:01,690 --> 00:16:15,850
exactly as we expected

00:16:04,950 --> 00:16:19,690
so now if I merge this all right there

00:16:15,850 --> 00:16:24,640
we go I click over to yeah I will sleep

00:16:19,690 --> 00:16:26,020
the branch don't worry I click over my

00:16:24,640 --> 00:16:28,060
github actions I have this publish

00:16:26,020 --> 00:16:29,500
dashboards unmerge action but you can

00:16:28,060 --> 00:16:32,470
see his run for the the previous merge

00:16:29,500 --> 00:16:33,910
that we did this one is is not

00:16:32,470 --> 00:16:35,350
especially smart and actually just

00:16:33,910 --> 00:16:37,180
publishes all the dashboards every time

00:16:35,350 --> 00:16:40,150
I'm rich that's sort of the easiest

00:16:37,180 --> 00:16:42,640
thing to do but that means if we go over

00:16:40,150 --> 00:16:43,780
here let's try refreshing this dashboard

00:16:42,640 --> 00:16:46,690
and see if that second changes rolled

00:16:43,780 --> 00:16:50,310
out yeah the one we just merged has has

00:16:46,690 --> 00:16:52,510
already been deployed we can see our

00:16:50,310 --> 00:16:56,800
legends now show up on the right hand

00:16:52,510 --> 00:16:59,380
side and if we go back to our emoji

00:16:56,800 --> 00:17:00,550
service dashboard as well see I've got

00:16:59,380 --> 00:17:05,260
the changes follow since we changed the

00:17:00,550 --> 00:17:06,959
template powers both of these that's

00:17:05,260 --> 00:17:11,189
really all I wanted to show you today

00:17:06,959 --> 00:17:14,800
that's pretty much it for this I do have

00:17:11,189 --> 00:17:21,610
three things to mention before we wrap

00:17:14,800 --> 00:17:22,930
up one thing is my email is on the slide

00:17:21,610 --> 00:17:24,459
here feel free to send me an email if

00:17:22,930 --> 00:17:27,490
you have questions about this or it's

00:17:24,459 --> 00:17:28,900
interesting my second thing is the code

00:17:27,490 --> 00:17:32,710
for all this is some of you have already

00:17:28,900 --> 00:17:34,000
discovered is on github and you can take

00:17:32,710 --> 00:17:35,650
a look at it there the github actions

00:17:34,000 --> 00:17:36,820
there I think should be reusable so if

00:17:35,650 --> 00:17:39,010
you want to use it to power your own

00:17:36,820 --> 00:17:40,840
dashboard automation you should be able

00:17:39,010 --> 00:17:43,780
to give that a try if not I'm interested

00:17:40,840 --> 00:17:45,220
to hear what doesn't work the third

00:17:43,780 --> 00:17:46,570
thing I want to mention is the dev rel

00:17:45,220 --> 00:17:49,270
team at digitalocean has sent me here

00:17:46,570 --> 00:17:50,380
with like 500 stickers to give up so if

00:17:49,270 --> 00:17:52,299
you like stickers

00:17:50,380 --> 00:17:54,160
please come and find me I'll put some

00:17:52,299 --> 00:17:56,559
out of there table there alright I'll

00:17:54,160 --> 00:17:58,990
put some out there but yes I'll come

00:17:56,559 --> 00:18:00,370
find me chap about this or a dissolution

00:17:58,990 --> 00:18:02,620
or whatever and I'll give you some of

00:18:00,370 --> 00:18:04,750
these stickers like these things for the

00:18:02,620 --> 00:18:05,830
sticker lovers in your life I thank you

00:18:04,750 --> 00:18:14,380
very much I think we've got time for

00:18:05,830 --> 00:18:14,980
questions yeah we've got plenty of time

00:18:14,380 --> 00:18:23,830
for questions

00:18:14,980 --> 00:18:25,140
Oh Tom hello how did you detect the

00:18:23,830 --> 00:18:27,370
dashboards that had changed when you

00:18:25,140 --> 00:18:31,659
when you change the central library do

00:18:27,370 --> 00:18:32,890
and do you do that Trent of Lior I don't

00:18:31,659 --> 00:18:34,480
do it transitively so if you had

00:18:32,890 --> 00:18:37,299
templates that imported other templates

00:18:34,480 --> 00:18:41,080
it wouldn't detect it I but I detect it

00:18:37,299 --> 00:18:53,049
using git log in ground so it's not like

00:18:41,080 --> 00:18:55,000
it's not anything ok cool oh yeah yes

00:18:53,049 --> 00:18:57,340
Tom engine they have a tool called

00:18:55,000 --> 00:19:01,179
tankers they're called yeah that can i

00:18:57,340 --> 00:19:04,270
generate transitive dependencies for I

00:19:01,179 --> 00:19:09,010
will take a look at that thank you how

00:19:04,270 --> 00:19:11,650
do you people find making dashboards in

00:19:09,010 --> 00:19:13,539
code rather than using the UI which

00:19:11,650 --> 00:19:15,610
obviously is the standard where the

00:19:13,539 --> 00:19:17,159
people learn initially yeah that's a

00:19:15,610 --> 00:19:21,429
good question

00:19:17,159 --> 00:19:22,539
it's a little hit or miss I for simple

00:19:21,429 --> 00:19:24,220
things and for things that we've done

00:19:22,539 --> 00:19:26,409
before it's super easy it's faster

00:19:24,220 --> 00:19:28,330
because yeah you can copy a base you can

00:19:26,409 --> 00:19:30,880
use chair components when you're doing

00:19:28,330 --> 00:19:33,640
something new I found sometimes I do

00:19:30,880 --> 00:19:35,080
have to go into the UI and like create

00:19:33,640 --> 00:19:36,190
what I something that I want and then

00:19:35,080 --> 00:19:39,730
figure out how to translate that into

00:19:36,190 --> 00:19:42,159
code its refine it makes it pretty easy

00:19:39,730 --> 00:19:46,330
it has for all the basic things it has

00:19:42,159 --> 00:19:47,620
functions and tools but now and then you

00:19:46,330 --> 00:19:50,770
get something weird that you want to do

00:19:47,620 --> 00:19:52,570
like sort of table a certain way or you

00:19:50,770 --> 00:19:53,950
know the actually the hardest thing I

00:19:52,570 --> 00:19:56,590
found is figuring out what the default

00:19:53,950 --> 00:19:58,360
colors are that grifone I uses because

00:19:56,590 --> 00:20:00,100
the default colors that inputs on the

00:19:58,360 --> 00:20:02,799
graphs are not colors that you can like

00:20:00,100 --> 00:20:03,820
select didn't you lie so for things like

00:20:02,799 --> 00:20:06,850
that it's

00:20:03,820 --> 00:20:08,620
like experimentation one really handy

00:20:06,850 --> 00:20:11,740
tool for doing that is if you build a

00:20:08,620 --> 00:20:14,680
dashboard in Griffin oh you can get go

00:20:11,740 --> 00:20:16,840
view panel JSON and then you at least

00:20:14,680 --> 00:20:20,470
know like what you're trying to generate

00:20:16,840 --> 00:20:22,150
but yeah it's a bit of a mixed bag yeah

00:20:20,470 --> 00:20:24,490
I guess with the similar question

00:20:22,150 --> 00:20:26,620
actually how do you find the people

00:20:24,490 --> 00:20:28,780
moving between wanna do like little

00:20:26,620 --> 00:20:32,850
ad-hoc tweaks to actually go through a

00:20:28,780 --> 00:20:35,530
github PR review process and everything

00:20:32,850 --> 00:20:37,690
yeah how do you like you know allow

00:20:35,530 --> 00:20:42,040
people to move quickly and and and and

00:20:37,690 --> 00:20:45,550
and and mukluks things and then yeah um

00:20:42,040 --> 00:20:46,780
so I mean the number one way we convince

00:20:45,550 --> 00:20:51,040
people to use it is by Merkin all the

00:20:46,780 --> 00:20:52,240
dashboards read-only you actually and

00:20:51,040 --> 00:20:53,650
also sometimes I put like a warning

00:20:52,240 --> 00:20:55,450
banner at the top this is this is this

00:20:53,650 --> 00:20:57,880
dashboard is source control please don't

00:20:55,450 --> 00:21:01,890
edit it so there's a little bit of

00:20:57,880 --> 00:21:04,180
social pressure there I think in general

00:21:01,890 --> 00:21:07,780
on our team like we were obviously

00:21:04,180 --> 00:21:09,880
interested in doing this so people are

00:21:07,780 --> 00:21:13,690
pretty inclined to edit them in source

00:21:09,880 --> 00:21:14,260
and like having the history but it it

00:21:13,690 --> 00:21:17,710
does limit

00:21:14,260 --> 00:21:19,060
sort of how fast you can wait well

00:21:17,710 --> 00:21:22,210
luckily most the changes are pretty

00:21:19,060 --> 00:21:25,770
small and easy to review so it's not

00:21:22,210 --> 00:21:29,350
usually too much okay Adam do you use

00:21:25,770 --> 00:21:31,210
variables and alerting and that or can

00:21:29,350 --> 00:21:37,120
you do variables and alerting we use

00:21:31,210 --> 00:21:39,130
that heavily do so in fright - I do yeah

00:21:37,120 --> 00:21:40,960
refine our learning we use it because we

00:21:39,130 --> 00:21:44,260
not only have Prometheus unfortunately

00:21:40,960 --> 00:21:46,480
and so we have to and we heavily use

00:21:44,260 --> 00:21:49,750
variables and dashboards to distinguish

00:21:46,480 --> 00:21:51,670
environments for example okay yeah so we

00:21:49,750 --> 00:21:52,900
do sometimes use variables and

00:21:51,670 --> 00:21:56,560
dashboards and those are easy to set up

00:21:52,900 --> 00:21:58,420
in graph on it we don't use the alerting

00:21:56,560 --> 00:22:00,610
piece specifically though we've managed

00:21:58,420 --> 00:22:10,900
our manager infrastructure separately so

00:22:00,610 --> 00:22:12,010
it's that's hello again um do you

00:22:10,900 --> 00:22:15,300
I forgot was gonna something you know

00:22:12,010 --> 00:22:17,800
sorry complete

00:22:15,300 --> 00:22:19,150
there's a three in the password that I

00:22:17,800 --> 00:22:25,930
wrote the wrong way around I don't know

00:22:19,150 --> 00:22:29,320
why so part part of what I've always

00:22:25,930 --> 00:22:31,780
found nice about having dashboards in

00:22:29,320 --> 00:22:34,930
source control is that we can like run

00:22:31,780 --> 00:22:37,150
graph Anna in a stateless matter but

00:22:34,930 --> 00:22:38,980
like snapshots kind of conflict with

00:22:37,150 --> 00:22:42,309
that how do you deal with that you just

00:22:38,980 --> 00:22:46,510
attach persistent storage to it or yeah

00:22:42,309 --> 00:22:47,920
that's a good question to be honest the

00:22:46,510 --> 00:22:50,080
way we deal with it is my team doesn't

00:22:47,920 --> 00:22:54,130
really let our observability team render

00:22:50,080 --> 00:22:56,350
photo for us but yes the payback I

00:22:54,130 --> 00:22:57,970
remembered what was gonna ask now what

00:22:56,350 --> 00:23:00,150
could we do ingre fana to make this

00:22:57,970 --> 00:23:00,150
better

00:23:00,300 --> 00:23:09,610
that's a good question I I think yeah

00:23:07,530 --> 00:23:11,559
export desperate is pure fun I would be

00:23:09,610 --> 00:23:15,309
ideal but even next making it easier to

00:23:11,559 --> 00:23:17,290
export all dashboard is JSON and I sort

00:23:15,309 --> 00:23:19,360
of see what it looks like hey there's

00:23:17,290 --> 00:23:22,960
probably some API tweaks that it would

00:23:19,360 --> 00:23:24,970
be helpful but yeah the biggest one of

00:23:22,960 --> 00:23:30,309
these making it easy to go from a

00:23:24,970 --> 00:23:32,800
prebuilt dashboard to hey how do you

00:23:30,309 --> 00:23:36,160
import the dashboards generated progress

00:23:32,800 --> 00:23:38,620
on it into performer yeah so it's it

00:23:36,160 --> 00:23:40,540
sort of a two-step process the first

00:23:38,620 --> 00:23:43,360
process is to compile it into JSON using

00:23:40,540 --> 00:23:45,429
JSON once you have the JSON blob then we

00:23:43,360 --> 00:23:46,570
just use the Griffin API so it's just

00:23:45,429 --> 00:23:49,870
like an HTTP POST

00:23:46,570 --> 00:23:51,850
for each dashboard and if you look at

00:23:49,870 --> 00:24:01,080
the git repository there's as the

00:23:51,850 --> 00:24:01,080
scripts or any more questions

00:24:02,640 --> 00:24:05,920
[Music]

00:24:04,000 --> 00:24:08,230
have you had the experience with major

00:24:05,920 --> 00:24:10,150
upgrades version upgrades of Griffin any

00:24:08,230 --> 00:24:14,260
issues with that one on your template

00:24:10,150 --> 00:24:16,000
sir we didn't we we have done a major

00:24:14,260 --> 00:24:19,809
upgrade and I don't think we had any

00:24:16,000 --> 00:24:21,940
major issues graph on it can set the

00:24:19,809 --> 00:24:23,650
schema version bond afterwards so then I

00:24:21,940 --> 00:24:25,480
think we found is pretty good at being

00:24:23,650 --> 00:24:28,300
backwards compatible and understanding

00:24:25,480 --> 00:24:30,010
differ using a previous scheme version

00:24:28,300 --> 00:24:32,110
there are for example if you look in the

00:24:30,010 --> 00:24:34,150
repository I have some dashboards there

00:24:32,110 --> 00:24:35,590
that are using newer schema version some

00:24:34,150 --> 00:24:36,430
that are using an older one because

00:24:35,590 --> 00:24:38,200
there was some where I wanted to use

00:24:36,430 --> 00:24:41,050
frozen somewhere I wanted to do like the

00:24:38,200 --> 00:24:48,250
fruit one thing but yeah setting the

00:24:41,050 --> 00:24:51,190
schema version yeah so for me it looks

00:24:48,250 --> 00:24:53,560
like it's a lot of troubles and a lot of

00:24:51,190 --> 00:24:56,410
steps to go through to put everything is

00:24:53,560 --> 00:24:57,670
a code for graph Anna and I didn't

00:24:56,410 --> 00:25:01,060
really feel the problem you are solving

00:24:57,670 --> 00:25:03,160
like it's a lot of effort so I conceived

00:25:01,060 --> 00:25:04,810
there with automation and persuading

00:25:03,160 --> 00:25:07,120
people that they need to go to the code

00:25:04,810 --> 00:25:10,600
and learn this stuff and he did that

00:25:07,120 --> 00:25:12,850
there's both with the code but what does

00:25:10,600 --> 00:25:14,470
it solve and shirt yeah so there are two

00:25:12,850 --> 00:25:14,830
there were two major things we want to

00:25:14,470 --> 00:25:17,230
solve

00:25:14,830 --> 00:25:18,520
number one was being able to have a

00:25:17,230 --> 00:25:22,420
reasonable components like I mentioned

00:25:18,520 --> 00:25:24,850
so we have a ton of G RPC services it's

00:25:22,420 --> 00:25:25,990
hard to well you can like duplicate a

00:25:24,850 --> 00:25:27,310
dashboard and go and change it but it's

00:25:25,990 --> 00:25:29,320
a lot of work just set up a dashboard

00:25:27,310 --> 00:25:31,000
for a new service and when it's like

00:25:29,320 --> 00:25:33,850
exactly the same as for another service

00:25:31,000 --> 00:25:35,830
it's a nice field just copy over that

00:25:33,850 --> 00:25:37,540
was one the other thing was we did have

00:25:35,830 --> 00:25:42,340
trouble with people would go and change

00:25:37,540 --> 00:25:43,870
a dashboard and I we didn't know and so

00:25:42,340 --> 00:25:45,100
you'd go and look at the dashboard and

00:25:43,870 --> 00:25:46,510
you be like wait this didn't used to

00:25:45,100 --> 00:25:48,400
look like this what happened what

00:25:46,510 --> 00:25:50,890
changed and there was no good wink or

00:25:48,400 --> 00:25:52,750
find out to see who changed it when they

00:25:50,890 --> 00:25:54,700
changed it why they changed it I know

00:25:52,750 --> 00:25:55,930
there is the like antara commonly it's

00:25:54,700 --> 00:25:57,670
the Save button thing that people don't

00:25:55,930 --> 00:25:59,350
really use it consistently so being able

00:25:57,670 --> 00:26:02,470
to do code review and being able to see

00:25:59,350 --> 00:26:05,380
real good history for what changed and

00:26:02,470 --> 00:26:07,330
to be clear this is like tens or

00:26:05,380 --> 00:26:10,090
hundreds of dashboards like it's we have

00:26:07,330 --> 00:26:11,500
a lot of f-words so being able to see

00:26:10,090 --> 00:26:14,530
that history was really the biggest

00:26:11,500 --> 00:26:18,040
thing I'd be able to see it in a one

00:26:14,530 --> 00:26:19,480
clear place I'm quickly to media

00:26:18,040 --> 00:26:21,070
recommend I heard there were some people

00:26:19,480 --> 00:26:23,020
sitting on the floor though I don't see

00:26:21,070 --> 00:26:24,940
it now but there are more spaces over

00:26:23,020 --> 00:26:28,060
here in this area I count like five or

00:26:24,940 --> 00:26:31,290
six so if you need more places to sit

00:26:28,060 --> 00:26:31,290
but maybe it's fine

00:26:32,130 --> 00:26:37,470
hi what was the reason you decided for

00:26:34,549 --> 00:26:39,210
gruff on it and yes Annette have you

00:26:37,470 --> 00:26:41,910
looked at the other possibilities to

00:26:39,210 --> 00:26:46,799
generate dashboards with code like

00:26:41,910 --> 00:26:49,919
granola yeah it's a good question the I

00:26:46,799 --> 00:26:53,179
would say the number one reason was it

00:26:49,919 --> 00:26:55,380
was the first thing I found but also I

00:26:53,179 --> 00:26:57,330
it gives you a lot of flexibility with

00:26:55,380 --> 00:26:59,039
JSON it the net one of the really nice

00:26:57,330 --> 00:27:00,539
things in JSON it like a mentioned is

00:26:59,039 --> 00:27:02,250
you can merge in arbitrary if it's a

00:27:00,539 --> 00:27:04,710
JSON so if there's something that graph

00:27:02,250 --> 00:27:09,960
on it doesn't support you can always

00:27:04,710 --> 00:27:11,789
just play paste in the JSON for it so

00:27:09,960 --> 00:27:13,890
that's a nice feature I haven't looked a

00:27:11,789 --> 00:27:15,630
lot at core for final label though I did

00:27:13,890 --> 00:27:18,929
look at it a little bit and that was one

00:27:15,630 --> 00:27:21,929
thing I found there was it was just a

00:27:18,929 --> 00:27:24,630
little bit easier to sort of do it gave

00:27:21,929 --> 00:27:28,590
us a little bit more flexibility yeah

00:27:24,630 --> 00:27:32,820
definitely so we already had some issues

00:27:28,590 --> 00:27:34,890
with enforcing defaults for for example

00:27:32,820 --> 00:27:37,559
like the granularity over time and

00:27:34,890 --> 00:27:39,799
everything I guess this will be easy

00:27:37,559 --> 00:27:44,909
with choice not had your same issues so

00:27:39,799 --> 00:27:46,080
yeah but that's one of the other one of

00:27:44,909 --> 00:27:47,490
the other things that we got out of this

00:27:46,080 --> 00:27:50,880
and then we were looking to get out of

00:27:47,490 --> 00:27:52,770
this was for example I making it really

00:27:50,880 --> 00:27:55,190
easy to set all of our dashboards to be

00:27:52,770 --> 00:27:57,929
in UTC so they're not in local transit

00:27:55,190 --> 00:28:01,140
that was something that was very easy to

00:27:57,929 --> 00:28:03,270
do with this it's easy to just set it to

00:28:01,140 --> 00:28:06,840
be UTC in each file or and you can

00:28:03,270 --> 00:28:12,510
enforce that for sure components yeah

00:28:06,840 --> 00:28:15,210
that's definitely a helpful feature I so

00:28:12,510 --> 00:28:17,520
you are using the dashboard API have you

00:28:15,210 --> 00:28:25,289
looked at the provisioning dashboard the

00:28:17,520 --> 00:28:25,770
future and Gotha no no I have any more

00:28:25,289 --> 00:28:29,909
questions

00:28:25,770 --> 00:28:32,120
oh okay okay two more that's but that's

00:28:29,909 --> 00:28:32,120
it

00:28:35,169 --> 00:28:41,899
my question is and what kind of IDE or

00:28:39,679 --> 00:28:44,299
what are you using to to write the code

00:28:41,899 --> 00:28:49,549
is there is there chasin that support in

00:28:44,299 --> 00:28:53,889
I don't know sure so personally I use

00:28:49,549 --> 00:28:53,889
Emacs and there is a JSON airborne Emacs

00:28:57,460 --> 00:29:02,210
yeah I'm not sure if there are further

00:28:59,629 --> 00:29:06,019
IDs I'd be curious to hear if there's

00:29:02,210 --> 00:29:07,460
like IV s code okay sounds like there is

00:29:06,019 --> 00:29:12,619
a BS code integration is also there is

00:29:07,460 --> 00:29:13,369
some JSON so you have a GF PC that clips

00:29:12,619 --> 00:29:14,840
on that file

00:29:13,369 --> 00:29:17,629
do you think that there would be

00:29:14,840 --> 00:29:20,419
advantages that we provide that directly

00:29:17,629 --> 00:29:24,099
within json ID that can of a level

00:29:20,419 --> 00:29:29,149
helpers sure that's a good question i

00:29:24,099 --> 00:29:31,909
think it's like that that GBC lip sonnet

00:29:29,149 --> 00:29:34,539
file is going to vary depending on how

00:29:31,909 --> 00:29:36,889
you're generating your GFC metrics

00:29:34,539 --> 00:29:40,970
depending on your language runtime and

00:29:36,889 --> 00:29:43,609
etc so it definitely could be useful you

00:29:40,970 --> 00:29:46,340
might need more parameters to be able to

00:29:43,609 --> 00:29:47,299
make it useful you know the one that I

00:29:46,340 --> 00:29:48,710
showed you really just give it the

00:29:47,299 --> 00:29:52,460
service name and that's that's all you

00:29:48,710 --> 00:29:54,590
need yeah if it could take you know a

00:29:52,460 --> 00:29:56,799
set of metric names and you know one for

00:29:54,590 --> 00:29:58,849
request rates one for your average

00:29:56,799 --> 00:30:02,679
iterations or something

00:29:58,849 --> 00:30:03,950
yeah potentially a very useful thing

00:30:02,679 --> 00:30:05,630
awesome

00:30:03,950 --> 00:30:10,980
alright thank you so much

00:30:05,630 --> 00:30:20,690
[Applause]

00:30:10,980 --> 00:30:20,690

YouTube URL: https://www.youtube.com/watch?v=kV3Ua6guynI


