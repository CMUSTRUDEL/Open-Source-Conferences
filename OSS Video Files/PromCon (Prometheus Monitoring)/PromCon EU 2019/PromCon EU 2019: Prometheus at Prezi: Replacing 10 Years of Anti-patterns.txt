Title: PromCon EU 2019: Prometheus at Prezi: Replacing 10 Years of Anti-patterns
Publication date: 2019-12-29
Playlist: PromCon EU 2019
Description: 
	Speaker: David Guerrero

This talk goes over how our micro-services infrastructure is set up at Prezi, how it used to be monitored with convoluted and unreliable solutions, how we introduced Prometheus to all of our services, what we learned, where we failed, how it improved our engineers' life and what it enables us to do now. We recently spent 8 months redesigning our entire monitoring infrastructure, replacing 10 years of unreliable organically grown solutions to a uniform and highly available Prometheus-based platform. Our services being mostly written in Django/Python, we spent a lot of time getting in right and contributed back to the community (see https://engineering.prezi.com/prometheus-unchained-331b7ab8737, https://github.com/prezi/django-exporter). This was also the opportunity to revise our alerting philosophy (using the famous "My Philosophy on Alerting") and had to re-educate all of our engineers on how to alert and how to make great dashboards (or not making any and just using generic alerts and dashboards). A key point was to measure the impact of these changes by counting the alerts and how engineer react to them (was the alert actionable?). Based on that, we can see how well our practices are performing and react if necessary.

Slides: https://promcon.io/2019-munich/slides/prometheus-at-prezi-replacing-10-years-of-anti-patterns.pdf
Captions: 
	00:00:00,650 --> 00:00:08,910
[Music]

00:00:10,730 --> 00:00:15,740
so I am David sorry I'm a s3 at frizzy

00:00:14,120 --> 00:00:17,800
and I'm gonna talk about how we

00:00:15,740 --> 00:00:20,900
introduced primitives so I was the

00:00:17,800 --> 00:00:23,029
project lead doing that project so

00:00:20,900 --> 00:00:25,220
what's crazy we are an online platform

00:00:23,029 --> 00:00:28,700
where you can basically create and

00:00:25,220 --> 00:00:31,099
browse presentations like this one in

00:00:28,700 --> 00:00:34,270
terms of scale now we have over hundred

00:00:31,099 --> 00:00:37,880
million users registered and behind that

00:00:34,270 --> 00:00:40,100
15 engineering teams around 100 back-end

00:00:37,880 --> 00:00:42,590
micro services most of them are in

00:00:40,100 --> 00:00:44,900
Python and Django some in Scala and very

00:00:42,590 --> 00:00:47,000
few in go and we also have web desktop

00:00:44,900 --> 00:00:51,590
and mobile clients and we need to

00:00:47,000 --> 00:00:54,130
monitor all of these so monitoring the

00:00:51,590 --> 00:00:58,640
issue is like Prezi was born in 2009 and

00:00:54,130 --> 00:01:00,680
guess what happens if you build 10 years

00:00:58,640 --> 00:01:02,300
of organic build up and also if you have

00:01:00,680 --> 00:01:04,610
a huge lack of best practices what

00:01:02,300 --> 00:01:07,340
happens then what you end up with this

00:01:04,610 --> 00:01:10,729
huge mitering monster that we used to

00:01:07,340 --> 00:01:14,509
have it was very slow and stable we used

00:01:10,729 --> 00:01:16,429
to have to fix it often so we had a lot

00:01:14,509 --> 00:01:19,509
of issues with this but let me just walk

00:01:16,429 --> 00:01:21,049
you through how it used to look like

00:01:19,509 --> 00:01:22,639
someone walked you through the

00:01:21,049 --> 00:01:24,859
architecture let's say you have a

00:01:22,639 --> 00:01:26,749
microservice and if it needs behaves you

00:01:24,859 --> 00:01:30,380
want to get the page in our case we use

00:01:26,749 --> 00:01:31,850
a duty mostly and also slack so let's

00:01:30,380 --> 00:01:33,889
let's go through how it how it used to

00:01:31,850 --> 00:01:36,530
look like so the service didn't have any

00:01:33,889 --> 00:01:38,329
notion of metric there was only logs so

00:01:36,530 --> 00:01:40,069
debug logs these dogs will go down to a

00:01:38,329 --> 00:01:43,159
log processing node and that flow'd

00:01:40,069 --> 00:01:44,509
process signal every 60 second it used

00:01:43,159 --> 00:01:46,909
to process the last minute of logs

00:01:44,509 --> 00:01:48,619
actually we had a custom Python script

00:01:46,909 --> 00:01:50,779
for every one of our back-end services a

00:01:48,619 --> 00:01:52,759
different Python script and that would

00:01:50,779 --> 00:01:55,579
parse these logs and output matrix from

00:01:52,759 --> 00:01:57,770
them and then this matrix would end up

00:01:55,579 --> 00:02:00,950
into a graphite which is a time series

00:01:57,770 --> 00:02:02,630
database and then I know that you have

00:02:00,950 --> 00:02:04,520
matrix then you can create them if you

00:02:02,630 --> 00:02:06,619
want to evaluate errors so for that we

00:02:04,520 --> 00:02:08,810
had what we call a checker node which

00:02:06,619 --> 00:02:11,690
would every 60 second evaluate rules

00:02:08,810 --> 00:02:13,160
against our graphite and then from that

00:02:11,690 --> 00:02:14,930
you have an erecting state and now you

00:02:13,160 --> 00:02:17,000
can say okay I have my editing state I

00:02:14,930 --> 00:02:19,610
can just send that to parity or stack

00:02:17,000 --> 00:02:20,599
actually it's not that simple so every

00:02:19,610 --> 00:02:23,480
60 seconds

00:02:20,599 --> 00:02:24,550
actually the chequered node would send

00:02:23,480 --> 00:02:31,570
the state of

00:02:24,550 --> 00:02:33,790
others as logs to another node which was

00:02:31,570 --> 00:02:36,460
caught this multiplexer node which would

00:02:33,790 --> 00:02:40,080
then convert this alert status logs back

00:02:36,460 --> 00:02:45,220
as a metric in through another graphite

00:02:40,080 --> 00:02:47,020
why a different one good question but I

00:02:45,220 --> 00:02:49,480
said it's a multiplexer so it was doing

00:02:47,020 --> 00:02:51,160
a second thing it was also sending

00:02:49,480 --> 00:02:53,290
finally the earth state to one lead

00:02:51,160 --> 00:02:53,770
singer which is an agarose fork if you

00:02:53,290 --> 00:02:55,900
don't know

00:02:53,770 --> 00:02:59,290
and finally yeah I think I can actually

00:02:55,900 --> 00:03:01,000
send that to parity or slack there was

00:02:59,290 --> 00:03:06,010
one good element we actually use

00:03:01,000 --> 00:03:08,500
graphing ah so which is good because our

00:03:06,010 --> 00:03:10,540
engineers you know how to use that in

00:03:08,500 --> 00:03:12,310
terms of single points of failure there

00:03:10,540 --> 00:03:17,320
is not a single one there is multiple

00:03:12,310 --> 00:03:19,000
ones so if any of these fail our whole

00:03:17,320 --> 00:03:21,160
writing pipeline and monitoring pipeline

00:03:19,000 --> 00:03:24,910
doesn't work and it used to be done a

00:03:21,160 --> 00:03:26,770
lot so compared to primitives the

00:03:24,910 --> 00:03:28,210
standard architecture I guess now

00:03:26,770 --> 00:03:30,070
everyone is familiar with that primitive

00:03:28,210 --> 00:03:32,230
scripts the service areas come to our ad

00:03:30,070 --> 00:03:34,080
manager the duplicates Center to

00:03:32,230 --> 00:03:36,280
Petrucci and slack will softw a phenom

00:03:34,080 --> 00:03:39,400
we have multiple of these stocks we

00:03:36,280 --> 00:03:42,970
Wendy seen a j2 primitives per stack and

00:03:39,400 --> 00:03:45,760
we have a single item at your cluster so

00:03:42,970 --> 00:03:47,770
that's it for yeah but technical part

00:03:45,760 --> 00:03:49,989
but there was also a huge lack of best

00:03:47,770 --> 00:03:51,940
practices and especially a lack of

00:03:49,989 --> 00:03:53,080
common best practices because 15

00:03:51,940 --> 00:03:54,820
engineering teams start with micro

00:03:53,080 --> 00:03:57,850
services everyone used to do their own

00:03:54,820 --> 00:03:59,560
sauce basically - very bad not that

00:03:57,850 --> 00:04:01,690
welding guideline at know everything

00:03:59,560 --> 00:04:03,520
guideline that means we had service

00:04:01,690 --> 00:04:04,780
without any dartboard actually so this

00:04:03,520 --> 00:04:07,180
is with too many dashboards dashboards

00:04:04,780 --> 00:04:11,410
that don't work alerts which are bad

00:04:07,180 --> 00:04:12,910
flaky really bad things everywhere so

00:04:11,410 --> 00:04:15,670
now we actually identified all of our

00:04:12,910 --> 00:04:18,850
issues with our 10 years of monitoring

00:04:15,670 --> 00:04:21,549
monster so how did we actually sell the

00:04:18,850 --> 00:04:23,290
project so how do we sell primitives

00:04:21,549 --> 00:04:25,510
so first what was very important is

00:04:23,290 --> 00:04:29,169
setting clear goals if you remember this

00:04:25,510 --> 00:04:31,240
you're monitoring monster there we split

00:04:29,169 --> 00:04:34,539
our issues into three main groups first

00:04:31,240 --> 00:04:36,700
one alerting quality if you have added

00:04:34,539 --> 00:04:38,030
fatigue and actually we had this we had

00:04:36,700 --> 00:04:40,370
outages due to be

00:04:38,030 --> 00:04:42,080
ignoring other steno okay is that an

00:04:40,370 --> 00:04:43,670
important all right or not they were

00:04:42,080 --> 00:04:44,870
just on their way home okay maybe it's

00:04:43,670 --> 00:04:45,890
not important and due to that we

00:04:44,870 --> 00:04:48,530
actually a data jeez

00:04:45,890 --> 00:04:51,050
so these we want to fix second one user

00:04:48,530 --> 00:04:52,550
experience or dashboards were slow so

00:04:51,050 --> 00:04:54,680
let's say you get the page you go to

00:04:52,550 --> 00:04:56,150
graph for now it takes like one or two

00:04:54,680 --> 00:04:58,040
minutes to load then if you want to

00:04:56,150 --> 00:04:59,660
browse that next time you make a change

00:04:58,040 --> 00:05:01,880
you cannot know if it's effective or not

00:04:59,660 --> 00:05:04,760
that's also makes your attach is longer

00:05:01,880 --> 00:05:07,310
we also want it to fix that and finally

00:05:04,760 --> 00:05:08,810
uniformity and future proofing so our

00:05:07,310 --> 00:05:10,430
mooring system was not built for the

00:05:08,810 --> 00:05:13,490
future and we actually want to move

00:05:10,430 --> 00:05:14,900
towards communities now and if we want

00:05:13,490 --> 00:05:17,300
to do this which starts we ramp the

00:05:14,900 --> 00:05:18,980
whole thing and also uniformity as I

00:05:17,300 --> 00:05:20,930
said we want the same best practices

00:05:18,980 --> 00:05:24,320
across the whole company and I've

00:05:20,930 --> 00:05:26,210
actually monitoring as a platform the

00:05:24,320 --> 00:05:29,900
second useful thing is to have a

00:05:26,210 --> 00:05:31,490
champion in that case that's you or that

00:05:29,900 --> 00:05:33,080
was Mia was actually here two years ago

00:05:31,490 --> 00:05:34,730
I was sitting there on that corner and

00:05:33,080 --> 00:05:36,200
so if you have someone with experience

00:05:34,730 --> 00:05:38,000
someone with a vision that can actually

00:05:36,200 --> 00:05:40,040
bring this forward and convince people

00:05:38,000 --> 00:05:41,500
okay that's the way that we should do

00:05:40,040 --> 00:05:44,320
things that that's really useful a

00:05:41,500 --> 00:05:47,180
second thing is also running experiments

00:05:44,320 --> 00:05:49,250
so for us we had the chance of changing

00:05:47,180 --> 00:05:51,530
our CI a platform four years ago and we

00:05:49,250 --> 00:05:53,780
said ok for this new CI platform let's

00:05:51,530 --> 00:05:55,550
just monitor it with Prometheus and from

00:05:53,780 --> 00:05:57,590
that we could actually run and avoid

00:05:55,550 --> 00:05:59,210
making the same mistakes when we roll it

00:05:57,590 --> 00:06:01,220
out to the whole company and you could

00:05:59,210 --> 00:06:04,100
also just evaluate whether it was a good

00:06:01,220 --> 00:06:05,620
solution or not for us and finally if

00:06:04,100 --> 00:06:06,830
you have this theoretical and practical

00:06:05,620 --> 00:06:08,660
experience

00:06:06,830 --> 00:06:10,610
now you can scope and plan and we came

00:06:08,660 --> 00:06:12,890
up with a great plan of all these things

00:06:10,610 --> 00:06:17,510
that we needed to do to get to achieve

00:06:12,890 --> 00:06:19,580
our vision and now that you have a plan

00:06:17,510 --> 00:06:23,180
and that you of course you need to know

00:06:19,580 --> 00:06:25,400
okay how is your plan plan performing

00:06:23,180 --> 00:06:26,870
against your goals so here I'm going to

00:06:25,400 --> 00:06:29,000
take the example of the everything

00:06:26,870 --> 00:06:30,650
quality that we wanted to improve so

00:06:29,000 --> 00:06:32,540
first we need to identify key metrics

00:06:30,650 --> 00:06:35,510
the first one is going to be the total

00:06:32,540 --> 00:06:37,580
number of pages because for equal

00:06:35,510 --> 00:06:39,550
availability or a better availability if

00:06:37,580 --> 00:06:42,890
you have less pages well that's better

00:06:39,550 --> 00:06:45,140
because people wake up less often the

00:06:42,890 --> 00:06:46,760
second one is acknowledgment rate so if

00:06:45,140 --> 00:06:48,890
you are familiar with basic system

00:06:46,760 --> 00:06:51,470
usually you click acknowledge when you

00:06:48,890 --> 00:06:52,040
get a page and if you acknowledge an

00:06:51,470 --> 00:06:54,050
alert that means

00:06:52,040 --> 00:06:56,450
two things one Jared was not ignored

00:06:54,050 --> 00:06:58,490
always created which is good and second

00:06:56,450 --> 00:07:00,290
it was not auto resolved in a short

00:06:58,490 --> 00:07:01,850
manner because sometimes you get the

00:07:00,290 --> 00:07:03,050
page you I kept you pick up your phone

00:07:01,850 --> 00:07:04,790
you're gonna click add knowledge but

00:07:03,050 --> 00:07:06,050
actually it's already green because it

00:07:04,790 --> 00:07:07,940
was auto resolved because maybe you are

00:07:06,050 --> 00:07:09,350
the spike or something in your metric

00:07:07,940 --> 00:07:10,460
and that's also bad you don't want to

00:07:09,350 --> 00:07:13,700
get woken up for no reason

00:07:10,460 --> 00:07:15,770
and finally action operate and by this

00:07:13,700 --> 00:07:17,720
we mean having real and actionable

00:07:15,770 --> 00:07:19,580
alerts when you need a human being to go

00:07:17,720 --> 00:07:21,200
there because the third case is you get

00:07:19,580 --> 00:07:23,240
a page you can actually acknowledge it

00:07:21,200 --> 00:07:25,340
but there is nothing you can do maybe it

00:07:23,240 --> 00:07:27,200
was actually some other team which did

00:07:25,340 --> 00:07:30,410
something bad it was not sure domain

00:07:27,200 --> 00:07:32,090
knowledge and so in this case is one so

00:07:30,410 --> 00:07:34,100
we want to fix these three action matrix

00:07:32,090 --> 00:07:35,890
the only issue here is that if we use

00:07:34,100 --> 00:07:38,300
pejorative for example we can get this

00:07:35,890 --> 00:07:39,710
total number of pages and we can get

00:07:38,300 --> 00:07:41,990
this acknowledgment rate pretty easily

00:07:39,710 --> 00:07:43,700
that just starts but the action of

00:07:41,990 --> 00:07:44,960
alright how do you get that well

00:07:43,700 --> 00:07:47,030
actually you need instrumentation you

00:07:44,960 --> 00:07:49,250
need to ask people was it actionable or

00:07:47,030 --> 00:07:51,110
not for every page that you get and so

00:07:49,250 --> 00:07:54,620
for us we did that through a slack bot

00:07:51,110 --> 00:07:56,480
which we call quality bot and so if you

00:07:54,620 --> 00:07:57,920
got the page the next day quali bot will

00:07:56,480 --> 00:07:59,720
ping you and we'll ask you ok

00:07:57,920 --> 00:08:02,540
was this page actionable non-actionable

00:07:59,720 --> 00:08:04,850
or was it a duplicate and from that we

00:08:02,540 --> 00:08:07,070
can finally have our actionable rate and

00:08:04,850 --> 00:08:09,020
now we can measure and we actually have

00:08:07,070 --> 00:08:11,720
a full-fledged dashboard with all of our

00:08:09,020 --> 00:08:14,870
algorithm quality metrics so this is not

00:08:11,720 --> 00:08:16,610
graph analysis like product matrix and

00:08:14,870 --> 00:08:19,310
in there we can for example aggregate by

00:08:16,610 --> 00:08:20,810
team or by platform so we can say ok

00:08:19,310 --> 00:08:23,030
this team has better odds than the other

00:08:20,810 --> 00:08:24,340
team or the affirmatives platform that

00:08:23,030 --> 00:08:26,840
we built

00:08:24,340 --> 00:08:27,700
overall provides better a less than the

00:08:26,840 --> 00:08:32,030
previous one

00:08:27,700 --> 00:08:34,040
and also you measure performance so now

00:08:32,030 --> 00:08:36,620
what did we actually do during this

00:08:34,040 --> 00:08:39,860
project so here's a timeline so we

00:08:36,620 --> 00:08:43,640
started last September to actually from

00:08:39,860 --> 00:08:46,220
scratch and we planned when to finish

00:08:43,640 --> 00:08:48,440
this end of march turns out we needed a

00:08:46,220 --> 00:08:50,570
few more months so x2 Nate that for one

00:08:48,440 --> 00:08:52,640
more quarter and since end of June we

00:08:50,570 --> 00:08:54,740
are in maintenance mode which means we

00:08:52,640 --> 00:08:58,340
just provide support for this new

00:08:54,740 --> 00:09:00,560
platform and fixed critical bugs so what

00:08:58,340 --> 00:09:02,570
did we do for doing this eight or nine

00:09:00,560 --> 00:09:04,070
months well there was the implementation

00:09:02,570 --> 00:09:04,990
of the new junior platform so the

00:09:04,070 --> 00:09:06,339
technical things

00:09:04,990 --> 00:09:09,190
and also the education of our

00:09:06,339 --> 00:09:10,560
engineering teams displaced practices

00:09:09,190 --> 00:09:13,240
that I talked about that we needed to

00:09:10,560 --> 00:09:14,529
spread around so for the implementation

00:09:13,240 --> 00:09:18,010
the main thing that we did was

00:09:14,529 --> 00:09:20,459
configuration generation a lot of people

00:09:18,010 --> 00:09:23,709
do the same we quickly identified that

00:09:20,459 --> 00:09:25,480
for people to write primitives configure

00:09:23,709 --> 00:09:26,950
or art major config themselves that's

00:09:25,480 --> 00:09:28,870
too much to ask and that's also pretty

00:09:26,950 --> 00:09:30,970
complex and also it goes against all

00:09:28,870 --> 00:09:32,589
uniformity go because if you want to set

00:09:30,970 --> 00:09:35,649
boundaries if we want off best practices

00:09:32,589 --> 00:09:38,170
that's just not going to pass so here

00:09:35,649 --> 00:09:39,610
you can see the example of configuration

00:09:38,170 --> 00:09:43,810
for mentoring for one of our services

00:09:39,610 --> 00:09:45,010
here which is called folder service here

00:09:43,810 --> 00:09:46,779
for example you can see it scraping

00:09:45,010 --> 00:09:48,430
config being said just by 1/9 if you

00:09:46,779 --> 00:09:50,770
said this line it means that we will

00:09:48,430 --> 00:09:53,200
generate the scripting configuration for

00:09:50,770 --> 00:09:55,720
the Django exporter and at rebuild you

00:09:53,200 --> 00:09:57,399
can also set a group of alert so we have

00:09:55,720 --> 00:09:59,560
group of alerts here because for example

00:09:57,399 --> 00:10:01,330
for the security alerts that's pretty

00:09:59,560 --> 00:10:03,250
useful because if you then add a new

00:10:01,330 --> 00:10:04,570
alert to that group every service using

00:10:03,250 --> 00:10:07,029
that group of alerts will have this new

00:10:04,570 --> 00:10:08,980
alert and you can also include other

00:10:07,029 --> 00:10:10,510
words one by one and override thresholds

00:10:08,980 --> 00:10:13,990
if you need so we provide our routing

00:10:10,510 --> 00:10:16,000
templates so we don't let people really

00:10:13,990 --> 00:10:17,200
write their own routes we provide

00:10:16,000 --> 00:10:19,450
templates for them and they can override

00:10:17,200 --> 00:10:21,520
some trash or if they want and we also

00:10:19,450 --> 00:10:25,209
have target management for that manager

00:10:21,520 --> 00:10:27,970
so people can set up their slug hooks or

00:10:25,209 --> 00:10:29,350
pay Duty integrations just by writing

00:10:27,970 --> 00:10:32,470
code here they don't have to do anything

00:10:29,350 --> 00:10:35,170
through the UI the second thing was

00:10:32,470 --> 00:10:37,510
generic dashboards so we saw that some

00:10:35,170 --> 00:10:38,860
people here of dashboard generation

00:10:37,510 --> 00:10:40,630
through code like raffinate and these

00:10:38,860 --> 00:10:44,140
kind of things so we went another way

00:10:40,630 --> 00:10:45,850
which is actually not having many - was

00:10:44,140 --> 00:10:48,220
just a few - moss but they are all

00:10:45,850 --> 00:10:51,040
generic so across our hundred of micro

00:10:48,220 --> 00:10:54,310
services whether they are general Scala

00:10:51,040 --> 00:10:57,220
or grow services we use recording rules

00:10:54,310 --> 00:10:59,020
and best practices on labels so we end

00:10:57,220 --> 00:11:01,060
up with generic metrics that are the

00:10:59,020 --> 00:11:02,800
same across all of our services and then

00:11:01,060 --> 00:11:04,270
we can just have like five six

00:11:02,800 --> 00:11:06,250
dashboards for example that are all

00:11:04,270 --> 00:11:08,529
generic while you can use graphing of

00:11:06,250 --> 00:11:09,490
variables and then you have already your

00:11:08,529 --> 00:11:13,209
dashboard so you don't have to build

00:11:09,490 --> 00:11:14,949
anything is already there and third

00:11:13,209 --> 00:11:16,870
thing that we did is actually migration

00:11:14,949 --> 00:11:18,160
tooling so if you have hundred services

00:11:16,870 --> 00:11:20,589
or more

00:11:18,160 --> 00:11:22,720
you need to update all of them to make

00:11:20,589 --> 00:11:25,149
them export matrix if you don't have any

00:11:22,720 --> 00:11:27,279
tooling around making this faster that's

00:11:25,149 --> 00:11:28,660
just going to take too much time and if

00:11:27,279 --> 00:11:32,470
we didn't do this we would still be

00:11:28,660 --> 00:11:34,089
doing migrations right now they will see

00:11:32,470 --> 00:11:35,699
also things slowing us down

00:11:34,089 --> 00:11:38,829
main one being Django and Python

00:11:35,699 --> 00:11:40,839
especially jewnicorn so if you messed

00:11:38,829 --> 00:11:44,230
around a multi-process is mode with the

00:11:40,839 --> 00:11:46,990
Python client for primitives that can

00:11:44,230 --> 00:11:48,610
get pretty tedious we actually fixed a

00:11:46,990 --> 00:11:51,040
bug there so we spend some time there

00:11:48,610 --> 00:11:53,160
second thing is client-side mitering as

00:11:51,040 --> 00:11:56,410
I said we have desktop mobile clients

00:11:53,160 --> 00:11:58,180
web clients Prometheus cannot scrape

00:11:56,410 --> 00:12:00,759
this so you need to have logs you need

00:11:58,180 --> 00:12:01,959
to have lot processing and still it's

00:12:00,759 --> 00:12:04,120
something that we don't feel like we

00:12:01,959 --> 00:12:06,850
solved the right way and my name is

00:12:04,120 --> 00:12:09,160
actual right way so if anyone has tipped

00:12:06,850 --> 00:12:11,050
run this especially something that would

00:12:09,160 --> 00:12:13,779
read logs from Kafka and export matrix

00:12:11,050 --> 00:12:16,089
come to me I'm interested

00:12:13,779 --> 00:12:17,439
and finally retention in scaling so

00:12:16,089 --> 00:12:19,779
fine-tuning the parameters of your

00:12:17,439 --> 00:12:22,779
primitives how much CPU how much memory

00:12:19,779 --> 00:12:25,240
how much disk much I ups like this took

00:12:22,779 --> 00:12:27,550
us some time to get stable primitive

00:12:25,240 --> 00:12:29,500
stack and even if you look on the

00:12:27,550 --> 00:12:32,139
internet there is no best practices you

00:12:29,500 --> 00:12:34,660
have to find you need depending on your

00:12:32,139 --> 00:12:37,750
own usage you have to iterate that next

00:12:34,660 --> 00:12:39,639
time on the education side

00:12:37,750 --> 00:12:41,769
we mostly base ourselves on these

00:12:39,639 --> 00:12:45,490
documents my views of you narrating I

00:12:41,769 --> 00:12:46,600
think it's a nap from the SRA book so

00:12:45,490 --> 00:12:49,529
basically it's a collection of best

00:12:46,600 --> 00:12:51,970
practices around alerting and monitoring

00:12:49,529 --> 00:12:54,339
we also had a lot of presentations and

00:12:51,970 --> 00:12:55,810
sessions to educate our engineers these

00:12:54,339 --> 00:12:58,899
are the best practices this is how you

00:12:55,810 --> 00:13:00,550
use our new monitoring platform we also

00:12:58,899 --> 00:13:02,230
provide continuous support so people can

00:13:00,550 --> 00:13:04,569
come to us so the Essery team at any

00:13:02,230 --> 00:13:05,920
point they ask us okay how do I write

00:13:04,569 --> 00:13:07,750
another word how should I write this all

00:13:05,920 --> 00:13:09,459
right well should I monitor this it's

00:13:07,750 --> 00:13:11,380
very important that we are here for them

00:13:09,459 --> 00:13:14,290
and that we can continue providing these

00:13:11,380 --> 00:13:16,389
best practices and of course extensive

00:13:14,290 --> 00:13:18,309
documentation I know this can be

00:13:16,389 --> 00:13:20,589
difficult but that's very useful because

00:13:18,309 --> 00:13:22,569
if you provide support it's really nice

00:13:20,589 --> 00:13:25,029
to have documentation to point to so

00:13:22,569 --> 00:13:27,069
it's just faster for you on the

00:13:25,029 --> 00:13:28,290
education side there were also things

00:13:27,069 --> 00:13:31,000
slowing us down

00:13:28,290 --> 00:13:31,960
mostly attachment to other words so if

00:13:31,000 --> 00:13:34,450
you have an arrow twitch

00:13:31,960 --> 00:13:37,089
ten years old chances are the person

00:13:34,450 --> 00:13:39,700
that fraud is hurt in all cases it was

00:13:37,089 --> 00:13:41,529
given in chef that was defined this

00:13:39,700 --> 00:13:42,850
person is not there anymore and now

00:13:41,529 --> 00:13:45,430
another person is in charge of that area

00:13:42,850 --> 00:13:46,870
ten this person will not know okay is it

00:13:45,430 --> 00:13:48,279
okay to remove this is it okay to

00:13:46,870 --> 00:13:50,080
rewrite this how should I rewrite it in

00:13:48,279 --> 00:13:52,089
primitives and this creates a lot of

00:13:50,080 --> 00:13:52,810
debates a lot of arguments across the

00:13:52,089 --> 00:13:54,520
organization

00:13:52,810 --> 00:13:57,160
and so that can take time and you have

00:13:54,520 --> 00:13:59,560
to be prepared for this but the biggest

00:13:57,160 --> 00:14:02,260
point was lack of awareness and by this

00:13:59,560 --> 00:14:04,480
I mean I don't know if you know Plato's

00:14:02,260 --> 00:14:06,160
allegory of the cave but basically

00:14:04,480 --> 00:14:08,230
people didn't realize that there is a

00:14:06,160 --> 00:14:10,180
better world out there so people were

00:14:08,230 --> 00:14:12,610
used to this like eight nine years old

00:14:10,180 --> 00:14:14,620
monitoring stock that was slow that one

00:14:12,610 --> 00:14:17,470
minute points of resolution that had two

00:14:14,620 --> 00:14:19,000
or three minutes of delay that when you

00:14:17,470 --> 00:14:20,589
are in quois means that you get woken up

00:14:19,000 --> 00:14:21,820
every night people are like okay that's

00:14:20,589 --> 00:14:23,680
how it is that's how the world looks

00:14:21,820 --> 00:14:25,810
like so they were like oh engineering

00:14:23,680 --> 00:14:27,100
teams at the bottom of the cave and we

00:14:25,810 --> 00:14:28,720
have to tell them ya know there is a

00:14:27,100 --> 00:14:31,270
better world out there we can do much

00:14:28,720 --> 00:14:32,740
much better we can have like five

00:14:31,270 --> 00:14:34,810
seconds resolution if we want we can

00:14:32,740 --> 00:14:37,120
have real time we can have smooth

00:14:34,810 --> 00:14:39,010
on-call rotations and we had to convince

00:14:37,120 --> 00:14:44,800
people that it's possible it's doable

00:14:39,010 --> 00:14:48,100
and so finally how did we fare against

00:14:44,800 --> 00:14:50,770
all of these goals so for user

00:14:48,100 --> 00:14:52,930
experience and uniformity the simple

00:14:50,770 --> 00:14:55,870
setup and configuration was really

00:14:52,930 --> 00:14:57,970
appreciating and before as I said so we

00:14:55,870 --> 00:14:59,529
defined stuff in chef and it used to

00:14:57,970 --> 00:15:00,880
take us like two or three days for one

00:14:59,529 --> 00:15:03,550
person just to set up monitoring

00:15:00,880 --> 00:15:05,350
everything dashboards if they create a

00:15:03,550 --> 00:15:06,730
new service now if they create a new

00:15:05,350 --> 00:15:08,620
service they don't have anything to do

00:15:06,730 --> 00:15:12,670
it's already there just add a few lines

00:15:08,620 --> 00:15:15,760
of alerts if you want and that's it -

00:15:12,670 --> 00:15:17,890
what are really helping us with that we

00:15:15,760 --> 00:15:20,380
feel that that's a good solution and

00:15:17,890 --> 00:15:23,170
finally we also monitoring as a platform

00:15:20,380 --> 00:15:24,640
and by this I mean that not everyone is

00:15:23,170 --> 00:15:26,260
managing their own mentoring they just

00:15:24,640 --> 00:15:28,180
manage configuration for the platform

00:15:26,260 --> 00:15:30,820
that we provide and that's a completely

00:15:28,180 --> 00:15:32,470
different thing because now if we want

00:15:30,820 --> 00:15:34,510
we can provide features to the

00:15:32,470 --> 00:15:36,339
monitoring platform for example in this

00:15:34,510 --> 00:15:38,050
generic - was recently we could add

00:15:36,339 --> 00:15:40,450
annotations on graph enough for

00:15:38,050 --> 00:15:42,190
deployment and we just did it and now

00:15:40,450 --> 00:15:44,079
it's there for everyone at zero cost and

00:15:42,190 --> 00:15:45,160
before they would have to everyone would

00:15:44,079 --> 00:15:45,800
have to update their dashboard they

00:15:45,160 --> 00:15:47,510
would have done

00:15:45,800 --> 00:15:51,800
patience so it would have been a mess

00:15:47,510 --> 00:15:55,279
and now it's a platform we own this and

00:15:51,800 --> 00:15:57,140
that's that's really helping and real

00:15:55,279 --> 00:16:00,649
time - was annoyed so now we use

00:15:57,140 --> 00:16:05,120
actually a five seconds resolution and

00:16:00,649 --> 00:16:06,500
we have two months of retention and so

00:16:05,120 --> 00:16:08,630
that means that for example showing in

00:16:06,500 --> 00:16:10,459
an outage situation before when you make

00:16:08,630 --> 00:16:12,079
a change you would have to just make you

00:16:10,459 --> 00:16:12,769
change and then wait in front of your

00:16:12,079 --> 00:16:15,079
graph for now

00:16:12,769 --> 00:16:17,420
one minute two minutes three minutes and

00:16:15,079 --> 00:16:18,890
IBUs your points changing then maybe you

00:16:17,420 --> 00:16:20,750
wait for two points you can get the

00:16:18,890 --> 00:16:22,670
trend and that's already five minutes of

00:16:20,750 --> 00:16:24,110
voltage right there now we have five

00:16:22,670 --> 00:16:24,680
five second resolution so if you make a

00:16:24,110 --> 00:16:26,329
change

00:16:24,680 --> 00:16:28,040
ten seconds later you already know if it

00:16:26,329 --> 00:16:29,690
was effective or not and just from that

00:16:28,040 --> 00:16:32,870
you'd already save like five minutes of

00:16:29,690 --> 00:16:36,290
voltage and that's really important and

00:16:32,870 --> 00:16:39,800
this was true actually only for 95% of

00:16:36,290 --> 00:16:42,740
our use cases because these are actually

00:16:39,800 --> 00:16:44,149
the happiest cases if it fits in our

00:16:42,740 --> 00:16:46,040
platform it fits in the configuration

00:16:44,149 --> 00:16:47,420
generation we built but there is an

00:16:46,040 --> 00:16:50,570
issue because there is a remaining five

00:16:47,420 --> 00:16:52,339
percent which is whatever is custom so

00:16:50,570 --> 00:16:53,839
for example we have a data engineering

00:16:52,339 --> 00:16:55,700
team that use Kafka they need 12

00:16:53,839 --> 00:16:57,230
monitoring for Kafka if you need to do

00:16:55,700 --> 00:16:58,700
anything custom which is not in the

00:16:57,230 --> 00:17:01,579
framework with beauty which is not in

00:16:58,700 --> 00:17:02,990
the auditing template we build then now

00:17:01,579 --> 00:17:04,339
you have to learn okay what is

00:17:02,990 --> 00:17:06,079
primitives how do I wipe remit to us

00:17:04,339 --> 00:17:07,730
configuration what is the right manager

00:17:06,079 --> 00:17:09,890
what's the gauge what's the counter I'll

00:17:07,730 --> 00:17:10,910
do I wait from query so now you have to

00:17:09,890 --> 00:17:13,699
learn all of that if you need to do

00:17:10,910 --> 00:17:16,520
anything custom and that's actually more

00:17:13,699 --> 00:17:17,990
complex than what we had before so

00:17:16,520 --> 00:17:20,419
that's the trade-off that we did so for

00:17:17,990 --> 00:17:21,860
95% of the use cases you don't have to

00:17:20,419 --> 00:17:23,630
know anything about primitives which you

00:17:21,860 --> 00:17:25,429
just write a few lines and that's it but

00:17:23,630 --> 00:17:28,280
for the remaining 5% now you have way

00:17:25,429 --> 00:17:31,400
more to learn so you have to make

00:17:28,280 --> 00:17:34,970
trade-off there in terms of erecting

00:17:31,400 --> 00:17:37,040
quality so for on-call experience if you

00:17:34,970 --> 00:17:38,809
remember all key metrics there we

00:17:37,040 --> 00:17:41,540
actually Couture in total number of

00:17:38,809 --> 00:17:44,330
pages in half our acknowledgement rate

00:17:41,540 --> 00:17:47,090
was multiplied by 2 and our actionable

00:17:44,330 --> 00:17:48,620
rate was also multiplied by 2 so not

00:17:47,090 --> 00:17:52,610
only we have less pages but there are

00:17:48,620 --> 00:17:53,330
better quality so what key takeaways can

00:17:52,610 --> 00:17:55,580
we get from this

00:17:53,330 --> 00:17:57,679
so migrating and especially cleaning up

00:17:55,580 --> 00:17:58,269
it's a lot of effort so there is a long

00:17:57,679 --> 00:17:59,589
tail for this

00:17:58,269 --> 00:18:01,539
especially if you have ten years of

00:17:59,589 --> 00:18:03,489
others to get rid of actually we are

00:18:01,539 --> 00:18:05,709
still not hundred percent on or it's in

00:18:03,489 --> 00:18:08,229
guys still alive with the few things in

00:18:05,709 --> 00:18:10,659
there hopefully in a few months we can

00:18:08,229 --> 00:18:12,759
find indicate but yeah you have to be

00:18:10,659 --> 00:18:15,129
prepared for that education is also a

00:18:12,759 --> 00:18:17,950
constant effort so the statistics I just

00:18:15,129 --> 00:18:19,749
showed you before about better pages and

00:18:17,950 --> 00:18:21,700
this was actually a snapshot from three

00:18:19,749 --> 00:18:23,529
months ago because if you look at them

00:18:21,700 --> 00:18:25,330
now actually our hearts in quality stats

00:18:23,529 --> 00:18:27,159
are getting worse because we feel that

00:18:25,330 --> 00:18:29,049
that we didn't follow up on our

00:18:27,159 --> 00:18:31,719
education effort if you don't have this

00:18:29,049 --> 00:18:34,089
constant education effort of pushing for

00:18:31,719 --> 00:18:35,499
best practices of looking at what kind

00:18:34,089 --> 00:18:38,049
of a written configuration people are

00:18:35,499 --> 00:18:40,179
creating well you're always in quality

00:18:38,049 --> 00:18:41,559
will go down so this is a constant of

00:18:40,179 --> 00:18:43,809
what you will always have to maintain

00:18:41,559 --> 00:18:48,009
this tolerating quality author otherwise

00:18:43,809 --> 00:18:49,419
it will get worse single project was an

00:18:48,009 --> 00:18:51,849
important part of it we spent a lot of

00:18:49,419 --> 00:18:54,039
time on this that's why I spent so much

00:18:51,849 --> 00:18:55,419
time explaining how you can do this but

00:18:54,039 --> 00:18:56,529
in the end we feel like it was a great

00:18:55,419 --> 00:18:59,950
success

00:18:56,529 --> 00:19:02,919
everyone is happy in our organization

00:18:59,950 --> 00:19:04,329
about this that was really nice as a

00:19:02,919 --> 00:19:07,419
bonus we could also contribute to open

00:19:04,329 --> 00:19:09,489
source we made contribution to the

00:19:07,419 --> 00:19:12,549
Python client for prometheus

00:19:09,489 --> 00:19:18,849
we also contributed to M Tale one

00:19:12,549 --> 00:19:20,859
character in the readme and also now we

00:19:18,849 --> 00:19:22,809
finally have easier and also safer

00:19:20,859 --> 00:19:24,129
kubernetes migrations and this is

00:19:22,809 --> 00:19:27,429
actually what we are working on right

00:19:24,129 --> 00:19:30,800
now and if you are interested we are

00:19:27,429 --> 00:19:39,280
hiring thank you

00:19:30,800 --> 00:19:39,280
[Applause]

00:20:00,510 --> 00:20:14,470
to say this but who wants a box it's not

00:20:07,000 --> 00:20:17,440
weighted great doc thank you how in

00:20:14,470 --> 00:20:19,120
terms of besides education are you is

00:20:17,440 --> 00:20:22,630
your company thinking of like best

00:20:19,120 --> 00:20:25,930
practices for how do you basically make

00:20:22,630 --> 00:20:28,000
or try to prevent that in 10 years you

00:20:25,930 --> 00:20:32,260
don't end up replacing the one monster

00:20:28,000 --> 00:20:35,100
with another it's not it's a great thing

00:20:32,260 --> 00:20:40,600
tight but it's just the nature of

00:20:35,100 --> 00:20:43,570
ecosystems you know it's like yes so

00:20:40,600 --> 00:20:45,460
actually for that we even on the

00:20:43,570 --> 00:20:47,500
technical side we made some choices for

00:20:45,460 --> 00:20:48,910
example I said we have two months

00:20:47,500 --> 00:20:51,600
retention for example we don't use any

00:20:48,910 --> 00:20:54,220
long-term storage solution because

00:20:51,600 --> 00:20:56,290
actually I feared that we would end up

00:20:54,220 --> 00:20:58,300
in the situation so what if we one year

00:20:56,290 --> 00:21:00,250
ago we said okay danos looks nice we put

00:20:58,300 --> 00:21:01,660
tunnels there actually I felt like no if

00:21:00,250 --> 00:21:03,370
we put tunnels there maybe in ten years

00:21:01,660 --> 00:21:04,690
it's gonna look worse but does it matter

00:21:03,370 --> 00:21:07,870
I mean I'm saying tennis but candy

00:21:04,690 --> 00:21:10,420
cortex can be whatever here so we try to

00:21:07,870 --> 00:21:12,370
keep it simple we said primitives looks

00:21:10,420 --> 00:21:14,410
pretty simple looks like everyone is

00:21:12,370 --> 00:21:16,630
moving towards this same for that matter

00:21:14,410 --> 00:21:18,790
so basically on the technical side we

00:21:16,630 --> 00:21:19,480
keep it as as simple as we can and

00:21:18,790 --> 00:21:21,460
that's it

00:21:19,480 --> 00:21:23,080
and even long-term storage even now we

00:21:21,460 --> 00:21:24,640
are not really even yesterday I saw that

00:21:23,080 --> 00:21:27,190
people are still fighting around what

00:21:24,640 --> 00:21:29,320
was the actual solution to move towards

00:21:27,190 --> 00:21:32,580
and so for the technical side we just

00:21:29,320 --> 00:21:35,940
keep it as simple as possible

00:21:32,580 --> 00:21:35,940
next question

00:21:36,720 --> 00:21:44,129
thank you

00:21:38,889 --> 00:21:48,159
hi talking about this 5% of custom

00:21:44,129 --> 00:21:50,889
script alerts and so on what do you have

00:21:48,159 --> 00:21:55,809
in there because we also add to my great

00:21:50,889 --> 00:21:58,480
lot of custom scripts alerts so that's

00:21:55,809 --> 00:21:59,799
maybe interesting yeah so I would say

00:21:58,480 --> 00:22:02,830
the bigger part of these is actually

00:21:59,799 --> 00:22:05,409
cron jobs so we built I mean we put a

00:22:02,830 --> 00:22:06,490
push gateway there but even pushed it

00:22:05,409 --> 00:22:07,960
where it's not the solution we really

00:22:06,490 --> 00:22:10,210
like because that's also a single point

00:22:07,960 --> 00:22:11,919
of failure and in yeah so these cron

00:22:10,210 --> 00:22:13,269
jobs they one they have to run somewhere

00:22:11,919 --> 00:22:15,490
so you have to find a way to run them

00:22:13,269 --> 00:22:17,919
and then what kind of metric they should

00:22:15,490 --> 00:22:21,159
output or to put a Gertz in there this

00:22:17,919 --> 00:22:23,200
can get quite complex and sometimes for

00:22:21,159 --> 00:22:25,749
example a legacy cron job could be like

00:22:23,200 --> 00:22:27,970
rewrite rewritten now with like an

00:22:25,749 --> 00:22:31,509
exporter if you like rethink about the

00:22:27,970 --> 00:22:32,980
whole way of it working maybe now a cron

00:22:31,509 --> 00:22:34,929
job is not the best idea about having a

00:22:32,980 --> 00:22:37,090
smut exporter would be nice

00:22:34,929 --> 00:22:40,330
and so cron jobs are the biggest one and

00:22:37,090 --> 00:22:42,009
also whatever is third party so I said

00:22:40,330 --> 00:22:43,509
we have heard microservices Python scale

00:22:42,009 --> 00:22:45,369
ago it's always easy because we don't

00:22:43,509 --> 00:22:46,600
draw the code whatever is a third party

00:22:45,369 --> 00:22:48,820
application we don't control the cost

00:22:46,600 --> 00:22:50,860
Kafka is one example we also have other

00:22:48,820 --> 00:22:52,779
applications like this so that's mostly

00:22:50,860 --> 00:23:00,940
around or data items security teams

00:22:52,779 --> 00:23:02,409
which are how you mentioned a very high

00:23:00,940 --> 00:23:04,720
resolution money metrics

00:23:02,409 --> 00:23:08,289
what's this great braid you are going to

00:23:04,720 --> 00:23:10,960
scrape right half plane is waiting every

00:23:08,289 --> 00:23:19,659
five seconds and we have everything on a

00:23:10,960 --> 00:23:21,549
fire single resolution next question you

00:23:19,659 --> 00:23:23,470
said you provided migration tooling to

00:23:21,549 --> 00:23:26,289
the developers right so that's one of

00:23:23,470 --> 00:23:29,619
the things we have is all not all of our

00:23:26,289 --> 00:23:30,909
applications emits metrics into stats D

00:23:29,619 --> 00:23:33,669
so graphite

00:23:30,909 --> 00:23:36,779
how do you do that because that's our

00:23:33,669 --> 00:23:39,369
biggest part is actually getting them to

00:23:36,779 --> 00:23:43,059
provide a metrics endpoint that spits up

00:23:39,369 --> 00:23:44,649
Prometheus metrics so actually when I

00:23:43,059 --> 00:23:45,330
said migration tooling it was actually

00:23:44,649 --> 00:23:48,190
meant for

00:23:45,330 --> 00:23:50,080
because we identified quickly that

00:23:48,190 --> 00:23:51,909
actually if we let people migrate it's

00:23:50,080 --> 00:23:53,559
not going to work so we did our

00:23:51,909 --> 00:23:56,200
migration in a way that we actually did

00:23:53,559 --> 00:23:58,330
it for them so we actually migrated all

00:23:56,200 --> 00:24:00,730
the services by ourselves so yes every

00:23:58,330 --> 00:24:02,140
team actually made the move otherwise it

00:24:00,730 --> 00:24:04,720
would have been impossible if you start

00:24:02,140 --> 00:24:05,500
to rely on others to do this it's just

00:24:04,720 --> 00:24:08,020
gonna take forever

00:24:05,500 --> 00:24:09,390
and so you have to be smarter and make

00:24:08,020 --> 00:24:11,350
it in a way that you can do it yourself

00:24:09,390 --> 00:24:13,929
it can take time you will have to

00:24:11,350 --> 00:24:16,120
collaborate of course with them but I

00:24:13,929 --> 00:24:18,510
think the most efficient way is if you

00:24:16,120 --> 00:24:18,510
do it yourself

00:24:22,710 --> 00:24:29,530
hi when you have different teams with

00:24:27,490 --> 00:24:33,789
different services they have different

00:24:29,530 --> 00:24:36,929
needs how do you treat the uniformity in

00:24:33,789 --> 00:24:40,000
the dodgeball services hollers for

00:24:36,929 --> 00:24:43,030
different application that have

00:24:40,000 --> 00:24:46,390
different kind of necessities in the

00:24:43,030 --> 00:24:48,730
same in this in the river okay so most

00:24:46,390 --> 00:24:51,159
of our services actually just rest DPI's

00:24:48,730 --> 00:24:54,940
but in terms of generic dashboards we

00:24:51,159 --> 00:24:57,700
support so HTTP HTTP ice we also have

00:24:54,940 --> 00:25:00,760
one for walkers so Sarah Walker's with

00:24:57,700 --> 00:25:03,190
cue saw something that executes tasks we

00:25:00,760 --> 00:25:05,049
can have also one for databases but

00:25:03,190 --> 00:25:08,860
actually we are in the ws so database

00:25:05,049 --> 00:25:10,900
monitoring is mostly done through RDS or

00:25:08,860 --> 00:25:13,750
cloud water so we still have a few

00:25:10,900 --> 00:25:18,280
things there but yeah if we just cover

00:25:13,750 --> 00:25:22,150
HTTP API and service workers then we

00:25:18,280 --> 00:25:23,890
already cover 98% of our use cases same

00:25:22,150 --> 00:25:25,630
goes for cron jobs with the push gateway

00:25:23,890 --> 00:25:33,159
and that's about it so I don't know if

00:25:25,630 --> 00:25:35,159
you have a specific API I was talking

00:25:33,159 --> 00:25:37,570
about in different I think I mean

00:25:35,159 --> 00:25:40,419
services with custom metrics that have

00:25:37,570 --> 00:25:42,070
business metrics that they are very

00:25:40,419 --> 00:25:46,950
different in different services because

00:25:42,070 --> 00:25:49,809
one is oriented to request the other to

00:25:46,950 --> 00:25:51,909
transactions or different kind of

00:25:49,809 --> 00:25:56,110
service that have completely different

00:25:51,909 --> 00:25:58,000
business logic okay so we also

00:25:56,110 --> 00:25:59,830
let people write custom metrics and

00:25:58,000 --> 00:26:02,380
customers if they need to and that's

00:25:59,830 --> 00:26:04,240
actually the 5% I was talking about so

00:26:02,380 --> 00:26:05,980
yeah people sometimes define custom

00:26:04,240 --> 00:26:08,650
metrics actually it's a very rare case

00:26:05,980 --> 00:26:09,880
and in our documentation about crystal

00:26:08,650 --> 00:26:11,350
matrix we have like three big

00:26:09,880 --> 00:26:13,630
disclaimers that maybe you don't need

00:26:11,350 --> 00:26:15,280
this be careful most of the time

00:26:13,630 --> 00:26:19,960
everything is actually uniform and you

00:26:15,280 --> 00:26:21,309
don't need custom metrics but yeah so

00:26:19,960 --> 00:26:22,660
it's possible but yeah if you would need

00:26:21,309 --> 00:26:24,490
a custom metrics you need to learn how

00:26:22,660 --> 00:26:26,500
to name it how to use labels how to name

00:26:24,490 --> 00:26:28,510
your labels you need to run a ton of

00:26:26,500 --> 00:26:29,710
things so we try to limit as much as

00:26:28,510 --> 00:26:31,510
possible but yes sometimes it's

00:26:29,710 --> 00:26:37,390
inevitable and that's the 5% I was

00:26:31,510 --> 00:26:41,020
talking what a great talk which team is

00:26:37,390 --> 00:26:45,390
responsible for Prometheus your team or

00:26:41,020 --> 00:26:45,390
the TI which is used yes everything

00:26:48,990 --> 00:26:54,990
you've time for more questions anyone

00:26:53,590 --> 00:27:05,620
your hand up

00:26:54,990 --> 00:27:08,679
it's like primary school no one and I

00:27:05,620 --> 00:27:10,120
great presentation I'm not sure if I if

00:27:08,679 --> 00:27:12,700
I miss some of the information how many

00:27:10,120 --> 00:27:15,880
may matrix or time series are you

00:27:12,700 --> 00:27:17,860
analyzing every five seconds I don't

00:27:15,880 --> 00:27:21,280
know the exact number but if you come to

00:27:17,860 --> 00:27:28,000
me I can show you after it's in the

00:27:21,280 --> 00:27:30,730
hundreds of thousands millions I guess

00:27:28,000 --> 00:27:34,330
you never have problems with generating

00:27:30,730 --> 00:27:35,799
the alarms where there is a delay in the

00:27:34,330 --> 00:27:37,630
sense that you need to analyze one

00:27:35,799 --> 00:27:40,480
million times here is to then generate

00:27:37,630 --> 00:27:42,429
as well as recording was extensively and

00:27:40,480 --> 00:27:46,240
so almost we are rats or based on the

00:27:42,429 --> 00:27:47,590
recorded rules in terms of today we

00:27:46,240 --> 00:27:50,980
don't really have to measure again we

00:27:47,590 --> 00:27:52,720
also split our monitoring in multiple

00:27:50,980 --> 00:27:55,000
stacks so we have at least we have three

00:27:52,720 --> 00:27:56,860
main primitive stacks and so this is

00:27:55,000 --> 00:27:59,890
like divided between services as to not

00:27:56,860 --> 00:28:01,660
overload one oh yeah so if you want

00:27:59,890 --> 00:28:06,820
exact numbers like a country okay I will

00:28:01,660 --> 00:28:13,059
talk to you then afterwards Thanks okay

00:28:06,820 --> 00:28:14,290
any other questions okay thank you very

00:28:13,059 --> 00:28:17,020
much

00:28:14,290 --> 00:28:26,730
[Applause]

00:28:17,020 --> 00:28:26,730

YouTube URL: https://www.youtube.com/watch?v=2vnvmE3-HMM


