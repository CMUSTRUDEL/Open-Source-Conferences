Title: PromCon EU 2019: Remote Write Storage Wars
Publication date: 2019-12-29
Playlist: PromCon EU 2019
Description: 
	Speaker: Alejandro Cespedes

Remote write storage is a hot topic, several systems existed for a few years (Cortex, M3DB, InfluxDB) and some systems have been born in the past few months (Thanos receive, VictoriaMetrics). Each system has it's own architecture and different trade-offs. In this talk, Alejandro will present adidas findings on experiments to benchmark various remote write open source storage systems such as Cortex, M3DB, Thanos, VictoriaMetrics and others. The experiments try to benchmark scalability and elasticity of each storage system.
Captions: 
	00:00:00,650 --> 00:00:08,910
[Music]

00:00:09,710 --> 00:00:16,760
okay so today I'm going to talk about

00:00:13,990 --> 00:00:19,369
what we find at adidas

00:00:16,760 --> 00:00:21,920
when we wanted to use the remote

00:00:19,369 --> 00:00:25,189
volatile storage so let me introduce

00:00:21,920 --> 00:00:29,270
myself I'm Alejandra Vespers

00:00:25,189 --> 00:00:30,250
I work at the performed in anything I do

00:00:29,270 --> 00:00:34,390
anything

00:00:30,250 --> 00:00:38,690
that means everything metrics related

00:00:34,390 --> 00:00:39,290
but before starting I would like to ask

00:00:38,690 --> 00:00:56,719
you a question

00:00:39,290 --> 00:00:58,700
so what do you see here see my

00:00:56,719 --> 00:01:03,070
creativity see my creation we can't do

00:00:58,700 --> 00:01:03,070
what you picked on you see my creativity

00:01:05,319 --> 00:01:08,399
[Music]

00:01:11,890 --> 00:01:20,000
so you just saw a bunch of people doing

00:01:14,960 --> 00:01:22,180
sports right so let me show you what we

00:01:20,000 --> 00:01:22,180
see

00:01:25,420 --> 00:01:28,670
[Music]

00:01:34,590 --> 00:01:52,690
see my creativity see my premium what is

00:01:38,350 --> 00:01:57,280
your pinch for me see my creativity so

00:01:52,690 --> 00:02:01,500
as you can see itÃ­s quite obsessed with

00:01:57,280 --> 00:02:04,990
data and we try to measure everything on

00:02:01,500 --> 00:02:07,210
different layers and not only on the

00:02:04,990 --> 00:02:09,399
technical side but also on our business

00:02:07,210 --> 00:02:12,210
processes and we try to apply all those

00:02:09,399 --> 00:02:16,900
metrics that we that we gather

00:02:12,210 --> 00:02:18,940
everywhere we can okay so first let me

00:02:16,900 --> 00:02:21,940
put you a little bit of in context of

00:02:18,940 --> 00:02:25,050
our landscape we run several

00:02:21,940 --> 00:02:28,300
quadratus clusters around the world and

00:02:25,050 --> 00:02:31,270
serving tens of apps in its cluster and

00:02:28,300 --> 00:02:34,750
that means you're soft I'm serious in

00:02:31,270 --> 00:02:37,630
its cluster and we have to meter the

00:02:34,750 --> 00:02:40,660
cluster itself on top of that and on top

00:02:37,630 --> 00:02:42,489
of that the growing usage of both the

00:02:40,660 --> 00:02:44,590
trainer stack and they could have this

00:02:42,489 --> 00:02:47,680
cluster itself is growing in inside our

00:02:44,590 --> 00:02:51,670
company and the way the infrastructure

00:02:47,680 --> 00:02:55,239
is provision means that we cannot grow

00:02:51,670 --> 00:02:59,730
big promises as much as we can so we

00:02:55,239 --> 00:03:04,540
have a limit and when we hit that limit

00:02:59,730 --> 00:03:07,360
the previous classes out of nori so good

00:03:04,540 --> 00:03:10,989
luck we have a professional football

00:03:07,360 --> 00:03:13,420
player giving us advice and yeah so if

00:03:10,989 --> 00:03:16,780
we run no Center to Matthews and nothing

00:03:13,420 --> 00:03:18,670
can complete because sometimes it's not

00:03:16,780 --> 00:03:22,330
just only the usage but mistakes are

00:03:18,670 --> 00:03:25,230
made and you know cards IDs our Reuters

00:03:22,330 --> 00:03:31,090
labels and cardinality institution means

00:03:25,230 --> 00:03:34,810
commissions explosion so so we decided

00:03:31,090 --> 00:03:38,560
to change ask teams to whom it's on

00:03:34,810 --> 00:03:41,980
Prometheus but there is an issue with

00:03:38,560 --> 00:03:44,020
that and one team's metrics are valuable

00:03:41,980 --> 00:03:45,580
for another team

00:03:44,020 --> 00:03:49,330
for example that they think that's

00:03:45,580 --> 00:03:51,070
managing promise you Kaka offers some

00:03:49,330 --> 00:03:53,290
metrics that are by the world for

00:03:51,070 --> 00:03:54,730
regularity meters that's using Kafka for

00:03:53,290 --> 00:03:58,480
example you want to be alerted if the

00:03:54,730 --> 00:04:03,520
certain topic is is getting drug or say

00:03:58,480 --> 00:04:05,560
pile up on things like that many so we

00:04:03,520 --> 00:04:11,070
found ourselves with lots of promises

00:04:05,560 --> 00:04:16,299
that of the to send matrix somewhere and

00:04:11,070 --> 00:04:19,690
central v1lat so we look for the in the

00:04:16,299 --> 00:04:22,780
open source for solutions to that

00:04:19,690 --> 00:04:30,420
problem that we have we found

00:04:22,780 --> 00:04:34,300
cortex we found in flux also free DB

00:04:30,420 --> 00:04:39,880
fellows and also recently picked area

00:04:34,300 --> 00:04:42,880
matrix but which one to use that was a

00:04:39,880 --> 00:04:45,070
question that nobody could tell us you

00:04:42,880 --> 00:04:48,310
ask the cortex guys obviously used

00:04:45,070 --> 00:04:52,180
cortex and if you ask the tano's guys of

00:04:48,310 --> 00:04:56,770
the retirees east arrows so we created

00:04:52,180 --> 00:04:59,800
the plan and we tried to benchmark these

00:04:56,770 --> 00:05:02,140
solutions but we try to do it in a

00:04:59,800 --> 00:05:05,950
different way we didn't want to see how

00:05:02,140 --> 00:05:07,510
much they were going to transit or how

00:05:05,950 --> 00:05:09,820
many metrics they were going to toss

00:05:07,510 --> 00:05:11,800
head before excluding because that's not

00:05:09,820 --> 00:05:15,730
the point where we want to run the

00:05:11,800 --> 00:05:19,210
solution we just wanted to know how many

00:05:15,730 --> 00:05:23,020
CPU is going to take for our matrix how

00:05:19,210 --> 00:05:28,180
much memory and how much is going to

00:05:23,020 --> 00:05:32,890
cost us to store those samples okay so

00:05:28,180 --> 00:05:35,380
from those five we divided in in single

00:05:32,890 --> 00:05:38,020
tenant because every we can treat

00:05:35,380 --> 00:05:41,410
everything each team as a single tenant

00:05:38,020 --> 00:05:44,800
and we can put on storage on top of that

00:05:41,410 --> 00:05:48,160
only for one team or we can create use

00:05:44,800 --> 00:05:52,240
something like cortex for weed seeds

00:05:48,160 --> 00:05:54,610
with the tenancy capacities have one one

00:05:52,240 --> 00:05:57,290
big cluster four so we infrastructure

00:05:54,610 --> 00:05:59,750
set between the different teams

00:05:57,290 --> 00:06:03,590
so for the single t-nut which was in

00:05:59,750 --> 00:06:07,970
flux sano-sama telemetrics gave them

00:06:03,590 --> 00:06:12,920
some resources and then we set up on a

00:06:07,970 --> 00:06:16,280
novel and then we let it run and see how

00:06:12,920 --> 00:06:21,890
much of the resources that that we gave

00:06:16,280 --> 00:06:25,070
them they would use him so this is what

00:06:21,890 --> 00:06:27,260
we found when we send half a million

00:06:25,070 --> 00:06:30,830
time cities would more or less in our

00:06:27,260 --> 00:06:34,010
environment it's a small team and we

00:06:30,830 --> 00:06:37,100
wanted to test that these are numbers

00:06:34,010 --> 00:06:40,400
the probably if you run the room test

00:06:37,100 --> 00:06:44,690
the the numbers will be something

00:06:40,400 --> 00:06:48,020
different probably they will be similar

00:06:44,690 --> 00:06:52,040
in some aspects especially in the bytes

00:06:48,020 --> 00:06:55,610
per sample this is has we included the

00:06:52,040 --> 00:06:58,400
the index size for that because it's not

00:06:55,610 --> 00:07:01,090
only storing the samples but also the

00:06:58,400 --> 00:07:04,790
index that matches to that we wanted to

00:07:01,090 --> 00:07:09,620
combat will cost that cost us to

00:07:04,790 --> 00:07:12,950
completely store that and then we look

00:07:09,620 --> 00:07:16,700
at that and we saw that the influx DB

00:07:12,950 --> 00:07:18,410
was eating too much memory but we wanted

00:07:16,700 --> 00:07:21,380
to test for much bigger team

00:07:18,410 --> 00:07:25,960
so yeah influx levy was crushing because

00:07:21,380 --> 00:07:29,810
out of memory errors and then we set

00:07:25,960 --> 00:07:33,110
with three much as much as the previous

00:07:29,810 --> 00:07:36,530
test and as we can see here the

00:07:33,110 --> 00:07:38,840
difference with the previous test so was

00:07:36,530 --> 00:07:46,640
that not every software the scales the

00:07:38,840 --> 00:07:51,290
same way and that's a fun so that's

00:07:46,640 --> 00:07:54,820
those are the results that we got in and

00:07:51,290 --> 00:07:59,660
then we decided to do the multi-tenant

00:07:54,820 --> 00:08:01,580
for that we wanted to set it up in a

00:07:59,660 --> 00:08:03,410
different way again we wanted to

00:08:01,580 --> 00:08:05,900
completely over provision and with

00:08:03,410 --> 00:08:08,150
sanity infrastructure we've been running

00:08:05,900 --> 00:08:09,830
sad infrastructure before it's

00:08:08,150 --> 00:08:12,980
Prometheus in its correct

00:08:09,830 --> 00:08:14,780
cluster and you don't want to run

00:08:12,980 --> 00:08:17,120
Saturday first doctor without protection

00:08:14,780 --> 00:08:21,170
because if one single thing can break

00:08:17,120 --> 00:08:23,990
your infrastructure your scooter you are

00:08:21,170 --> 00:08:28,490
in a position that seems like something

00:08:23,990 --> 00:08:33,110
wrong on a weekend the nobody is there

00:08:28,490 --> 00:08:35,540
to help you so we completely over

00:08:33,110 --> 00:08:37,280
publishing these these things we set up

00:08:35,540 --> 00:08:41,840
to this tutorial for injure ourselves

00:08:37,280 --> 00:08:44,240
for court x7 and free DVD notes to

00:08:41,840 --> 00:08:47,360
insert an for storage in Victoria matrix

00:08:44,240 --> 00:08:49,730
and also seems the dramatics in the

00:08:47,360 --> 00:08:52,130
single instance with successfully being

00:08:49,730 --> 00:08:58,430
able to send lots of matrix we set it up

00:08:52,130 --> 00:09:00,980
with two different instances we have two

00:08:58,430 --> 00:09:06,320
teams that were willing to put their

00:09:00,980 --> 00:09:09,650
production data the these teams weren't

00:09:06,320 --> 00:09:10,540
the biggest ones because those were up

00:09:09,650 --> 00:09:16,400
to

00:09:10,540 --> 00:09:21,130
so yeah let's go to the results so these

00:09:16,400 --> 00:09:24,650
are the results with cortex you can

00:09:21,130 --> 00:09:28,070
store the data in DynamoDB or big table

00:09:24,650 --> 00:09:30,410
or also Cassandra so you have the option

00:09:28,070 --> 00:09:34,760
to to store the index the time they know

00:09:30,410 --> 00:09:38,660
to beyond the chunks in inner string and

00:09:34,760 --> 00:09:41,690
one thing with all the cluster so far is

00:09:38,660 --> 00:09:45,500
that they have lots of levers that you

00:09:41,690 --> 00:09:48,440
can pull and and we did we didn't want

00:09:45,500 --> 00:09:52,400
to start painting and wanted to know

00:09:48,440 --> 00:09:54,560
that deeper it's because we were just

00:09:52,400 --> 00:09:56,660
testing the waters if we just wanted to

00:09:54,560 --> 00:10:00,560
know if they were suitable for our use

00:09:56,660 --> 00:10:02,510
case okay and what we found if you look

00:10:00,560 --> 00:10:06,890
at their and fini with the memory usage

00:10:02,510 --> 00:10:08,690
is cute and I don't think it's a fourth

00:10:06,890 --> 00:10:11,300
of them freedom in itself but rather

00:10:08,690 --> 00:10:13,670
their way their solution and if you look

00:10:11,300 --> 00:10:15,410
at the loop that we were putting into a

00:10:13,670 --> 00:10:18,590
system this was completely over

00:10:15,410 --> 00:10:21,279
provision for them probably if we the

00:10:18,590 --> 00:10:23,410
usage will be very similar if we send

00:10:21,279 --> 00:10:28,379
three times as much load us as we said

00:10:23,410 --> 00:10:34,029
so the results with a big pinch of salt

00:10:28,379 --> 00:10:39,100
okay yeah

00:10:34,029 --> 00:10:42,399
also one thing to note is the the cortex

00:10:39,100 --> 00:10:46,059
Dino debate because in the end that that

00:10:42,399 --> 00:10:49,180
means money so it's not only their CPU

00:10:46,059 --> 00:10:55,139
memory that that was being used but also

00:10:49,180 --> 00:10:58,180
the Dino to me in our case that also

00:10:55,139 --> 00:11:04,269
have to be amount for for the total cost

00:10:58,180 --> 00:11:09,100
so these are our results and one of the

00:11:04,269 --> 00:11:12,459
things that I wanted to share is that it

00:11:09,100 --> 00:11:13,209
was quite easy to set all these

00:11:12,459 --> 00:11:16,839
solutions

00:11:13,209 --> 00:11:19,629
I remember 13 cortex one a half year ago

00:11:16,839 --> 00:11:23,139
and the documentation was lacking and

00:11:19,629 --> 00:11:30,550
it's been a cutie it's been a huge

00:11:23,139 --> 00:11:35,259
improvement in since the last time so as

00:11:30,550 --> 00:11:43,300
you can see this not you can say but as

00:11:35,259 --> 00:11:43,959
you can imagine the this devil is moving

00:11:43,300 --> 00:11:46,240
super fast

00:11:43,959 --> 00:11:49,800
the solutions are evolving super fast

00:11:46,240 --> 00:11:52,120
it's one in one direction and I

00:11:49,800 --> 00:11:54,819
encourage if you are interested in

00:11:52,120 --> 00:11:57,189
running one of these systems to run a

00:11:54,819 --> 00:11:59,800
similar test for for your use case

00:11:57,189 --> 00:12:03,670
because it's not that much work to set

00:11:59,800 --> 00:12:05,889
it up and you can learn a lot of about

00:12:03,670 --> 00:12:09,399
this software but also about the the way

00:12:05,889 --> 00:12:12,579
it's you're yourself are your teams in

00:12:09,399 --> 00:12:14,740
the in our case our teams but it could

00:12:12,579 --> 00:12:16,569
be different the usage of the parameters

00:12:14,740 --> 00:12:20,649
that they use because one of the things

00:12:16,569 --> 00:12:23,290
that we that we learn is when one team

00:12:20,649 --> 00:12:25,959
was deplane one application they were a

00:12:23,290 --> 00:12:29,709
second on the bots at once and that

00:12:25,959 --> 00:12:31,449
caused two times the indifferent rate

00:12:29,709 --> 00:12:34,930
was the same but the number of active

00:12:31,449 --> 00:12:37,450
serious was twice the amount of that

00:12:34,930 --> 00:12:40,000
that increase the memory usage add that

00:12:37,450 --> 00:12:46,830
a specific point in time and four five

00:12:40,000 --> 00:13:00,220
ten fifteen of the rollout was okay so

00:12:46,830 --> 00:13:02,200
that's all I wanted to share thank you

00:13:00,220 --> 00:13:06,040
so we have plenty of times for questions

00:13:02,200 --> 00:13:08,100
we've had longer lunch this head was up

00:13:06,040 --> 00:13:12,190
first

00:13:08,100 --> 00:13:15,130
q so writing only one part of the story

00:13:12,190 --> 00:13:16,480
do you test actually reading and all the

00:13:15,130 --> 00:13:26,290
performance was drug acts and all the

00:13:16,480 --> 00:13:29,980
studies avoided testing reading because

00:13:26,290 --> 00:13:32,680
we found that it was quite difficult to

00:13:29,980 --> 00:13:34,360
characterize its teams use it some

00:13:32,680 --> 00:13:38,950
things who are having lots of dashboards

00:13:34,360 --> 00:13:40,209
and some other things were doing quite

00:13:38,950 --> 00:13:43,420
complex queries where they were

00:13:40,209 --> 00:13:45,520
aggregating internal data and we just

00:13:43,420 --> 00:13:47,290
wanted to focus on the interesting part

00:13:45,520 --> 00:13:54,839
without taking into consideration the

00:13:47,290 --> 00:13:58,540
the reading part so dry right because

00:13:54,839 --> 00:14:01,589
the way our team's trip data will be

00:13:58,540 --> 00:14:01,589
very much different

00:14:01,690 --> 00:14:08,110
that's it thank you hello hi I just

00:14:06,400 --> 00:14:09,430
wanted to start by saying thank you like

00:14:08,110 --> 00:14:11,680
that must be really nerve-wracking to

00:14:09,430 --> 00:14:13,510
speak to like the author of cortex the

00:14:11,680 --> 00:14:15,310
author with a nose like Rob from m3 is

00:14:13,510 --> 00:14:19,170
here yeah so I wouldn't start by saying

00:14:15,310 --> 00:14:19,170
thank you very much like thank you and

00:14:21,060 --> 00:14:27,579
now for a real question what was the

00:14:24,279 --> 00:14:33,570
reputation was what was the replication

00:14:27,579 --> 00:14:38,920
factor because you know we wanted to

00:14:33,570 --> 00:14:40,779
thank you Rob hasn't actually made it

00:14:38,920 --> 00:14:43,480
here yet because of you we always here

00:14:40,779 --> 00:14:45,900
now Roger sure okay just so we can

00:14:43,480 --> 00:14:45,900
defend himself

00:14:46,650 --> 00:14:49,650
hi

00:14:50,010 --> 00:14:55,920
so as you deployed the the premises for

00:14:55,020 --> 00:14:59,310
all your teams

00:14:55,920 --> 00:15:02,070
I suppose it was deployed to kubernetes

00:14:59,310 --> 00:15:06,900
then as containers not as virtual

00:15:02,070 --> 00:15:16,620
machines X also we have you know our own

00:15:06,900 --> 00:15:19,050
premises we have some vaccines see to

00:15:16,620 --> 00:15:22,920
instance some applications aren't ready

00:15:19,050 --> 00:15:35,550
to to move to two qualities and we

00:15:22,920 --> 00:15:38,040
provide them yeah hello have you tired

00:15:35,550 --> 00:15:42,480
to compare the solutions in terms of

00:15:38,040 --> 00:15:45,270
operability and like which is simpler

00:15:42,480 --> 00:15:57,320
and which has had to a probability for

00:15:45,270 --> 00:15:57,320
your team yeah yeah I try to avoid those

00:15:57,860 --> 00:16:03,720
statements because what it may be easy

00:16:01,380 --> 00:16:09,540
for me may be hard for you on something

00:16:03,720 --> 00:16:11,520
or for different people it could be if

00:16:09,540 --> 00:16:13,320
you know a lot about Cassandra maybe you

00:16:11,520 --> 00:16:17,540
will have an easier time setting up

00:16:13,320 --> 00:16:17,540
cortex with Cassandra or in freedom in

00:16:17,630 --> 00:16:27,060
regardless of the Pharos or donor matrix

00:16:21,350 --> 00:16:29,490
so it's not everything performance that

00:16:27,060 --> 00:16:32,630
matters it also depends on the context

00:16:29,490 --> 00:16:35,820
of your team because if your team has

00:16:32,630 --> 00:16:40,170
certain s keys in certain software

00:16:35,820 --> 00:16:42,630
why not just bring that so yeah I cannot

00:16:40,170 --> 00:16:45,210
tell you what is forth I can tell you

00:16:42,630 --> 00:16:48,930
what the what was first easier for me or

00:16:45,210 --> 00:16:53,850
Harvard for me as I said a cortex a 100

00:16:48,930 --> 00:16:57,020
year ago was also a year ago was not

00:16:53,850 --> 00:17:03,050
they says part but nowadays it was a

00:16:57,020 --> 00:17:04,910
easier than one yeah so yeah it's myself

00:17:03,050 --> 00:17:08,929
thanks how to it's a question that's

00:17:04,910 --> 00:17:11,260
handled I'm thinking there's another

00:17:08,929 --> 00:17:15,410
hand there somewhere

00:17:11,260 --> 00:17:18,949
ready infer - thanks Ryan

00:17:15,410 --> 00:17:24,500
yeah rub here I work on in three

00:17:18,949 --> 00:17:27,319
so yes no I I wanted like I mean you

00:17:24,500 --> 00:17:31,190
know echoing tom really appreciate going

00:17:27,319 --> 00:17:34,730
through like running a test is I was

00:17:31,190 --> 00:17:36,350
like yeah yeah totally and that's and

00:17:34,730 --> 00:17:39,679
then my kids is impressive actually my

00:17:36,350 --> 00:17:41,990
question was basically what do you think

00:17:39,679 --> 00:17:44,570
would be a fair way for you know like a

00:17:41,990 --> 00:17:48,170
reproducible test that that others can

00:17:44,570 --> 00:17:49,850
run I'm not like a huge fan of the time

00:17:48,170 --> 00:17:52,010
scale on to be honest because it's like

00:17:49,850 --> 00:17:53,900
bulk loading but I think that's very

00:17:52,010 --> 00:17:55,220
representative of like a metrics

00:17:53,900 --> 00:17:57,860
workload I want to hear your thoughts

00:17:55,220 --> 00:18:02,830
what do you think yeah that's one of the

00:17:57,860 --> 00:18:05,440
things that I was asking myself because

00:18:02,830 --> 00:18:08,330
for example the the bytes per sample

00:18:05,440 --> 00:18:11,620
metric that will depend heavily on the

00:18:08,330 --> 00:18:15,800
data that the teams are generated so I

00:18:11,620 --> 00:18:19,130
don't have that ability myself because

00:18:15,800 --> 00:18:20,660
it depended on different thing and it

00:18:19,130 --> 00:18:26,900
was the day production day that they

00:18:20,660 --> 00:18:29,920
cannot fake it or so maybe it will be to

00:18:26,900 --> 00:18:32,510
have some data that's going to be

00:18:29,920 --> 00:18:34,820
representative of the real world but how

00:18:32,510 --> 00:18:37,640
do you create that data set it's going

00:18:34,820 --> 00:18:39,950
to be tricky because I think that that

00:18:37,640 --> 00:18:41,990
will be the first part to be

00:18:39,950 --> 00:18:43,690
reproducible is to have one data set

00:18:41,990 --> 00:18:47,270
that's always the same for everyone

00:18:43,690 --> 00:18:49,850
so the way we set it up is it was this

00:18:47,270 --> 00:18:53,260
Prometheus were writing the same samples

00:18:49,850 --> 00:18:55,880
two to four systems

00:18:53,260 --> 00:18:59,270
we took the disclaimer the motorway

00:18:55,880 --> 00:19:02,090
takes some amount of memory and it's not

00:18:59,270 --> 00:19:05,090
a trivial amount and it depends on the

00:19:02,090 --> 00:19:08,929
number of shots for the drainage of

00:19:05,090 --> 00:19:10,100
water Q is times the number of search

00:19:08,929 --> 00:19:12,260
for about you

00:19:10,100 --> 00:19:15,260
and in our case the memory usage for

00:19:12,260 --> 00:19:32,840
those Prometheus we're close to two

00:19:15,260 --> 00:19:35,990
times the usual so thank you I guess so

00:19:32,840 --> 00:19:38,270
each of these solutions involved running

00:19:35,990 --> 00:19:40,700
and ingesting Prometheus anyways right

00:19:38,270 --> 00:19:43,040
so have you considered not using any of

00:19:40,700 --> 00:19:45,020
these technologies yeah so you mean the

00:19:43,040 --> 00:19:48,410
Sun without the recipient partner or

00:19:45,020 --> 00:19:51,940
just just plain Prometheus and just keep

00:19:48,410 --> 00:19:58,040
and have that large disks basic yeah the

00:19:51,940 --> 00:20:00,410
we consider that especially with but the

00:19:58,040 --> 00:20:04,430
problem was our primary applications

00:20:00,410 --> 00:20:08,440
because you start with the security

00:20:04,430 --> 00:20:12,320
focus setup it's team is running in a

00:20:08,440 --> 00:20:16,940
secure subnet and opening ports and

00:20:12,320 --> 00:20:19,040
everything was nightmare or maybe not

00:20:16,940 --> 00:20:21,290
alignment but something that we didn't

00:20:19,040 --> 00:20:29,870
want to walk that make sense

00:20:21,290 --> 00:20:33,010
thank you yeah I know just how bad my

00:20:29,870 --> 00:20:39,020
throwing arm is so I'm keeping it short

00:20:33,010 --> 00:20:43,040
you considered two classes of systems

00:20:39,020 --> 00:20:45,530
the single tenant at multi tenant why

00:20:43,040 --> 00:20:48,620
you considered it and do you use in

00:20:45,530 --> 00:20:51,500
production systems the siglent

00:20:48,620 --> 00:20:56,830
tenant and finally use it okay so the

00:20:51,500 --> 00:21:00,080
first question we separated because

00:20:56,830 --> 00:21:03,040
there are some method we are at Anita's

00:21:00,080 --> 00:21:05,510
are kind of open by default internally

00:21:03,040 --> 00:21:08,390
but there are certain metrics like

00:21:05,510 --> 00:21:10,130
number of orders or amount dealer or

00:21:08,390 --> 00:21:12,710
something like that that you know what

00:21:10,130 --> 00:21:17,060
everyone to see because that's kind of

00:21:12,710 --> 00:21:21,110
confidential and so for that for that

00:21:17,060 --> 00:21:23,580
reason we have to keep the it's teams

00:21:21,110 --> 00:21:27,600
matrix separated from each other

00:21:23,580 --> 00:21:32,310
and then what we do have is a global

00:21:27,600 --> 00:21:34,830
view based on proxy that you can opt-in

00:21:32,310 --> 00:21:38,040
as a team for being part of the global

00:21:34,830 --> 00:21:39,720
you for example the car cutting it's not

00:21:38,040 --> 00:21:44,850
something super secret that has to be

00:21:39,720 --> 00:21:54,150
keep dark so that those metrics are open

00:21:44,850 --> 00:21:57,030
for everyone to see and consume or I

00:21:54,150 --> 00:22:00,140
think you answer that you use both in

00:21:57,030 --> 00:22:03,570
production I think now actually we are

00:22:00,140 --> 00:22:06,210
going to use because we haven't fully

00:22:03,570 --> 00:22:11,820
migrated yet the Victoria matrix cluster

00:22:06,210 --> 00:22:13,170
oh but that's the thing with remember

00:22:11,820 --> 00:22:15,060
the part where they said you don't want

00:22:13,170 --> 00:22:18,330
to run send infrastructure without

00:22:15,060 --> 00:22:21,990
protection meanwhile in the bread the

00:22:18,330 --> 00:22:24,420
the context change and suddenly we have

00:22:21,990 --> 00:22:26,790
that protection automatically done for

00:22:24,420 --> 00:22:29,940
us we have Casca because in Kafka its

00:22:26,790 --> 00:22:32,520
theme was I mean stone quotas in place

00:22:29,940 --> 00:22:35,490
so they couldn't overload the system

00:22:32,520 --> 00:22:38,280
with lots of support so for that reason

00:22:35,490 --> 00:22:42,600
we decided to move to a set

00:22:38,280 --> 00:22:47,900
infrastructure next question try for

00:22:42,600 --> 00:22:47,900
another few forget Alfred setup as well

00:22:48,350 --> 00:22:51,890
any more questions

00:22:59,150 --> 00:23:03,900
thank you just very briefly I'm curious

00:23:01,980 --> 00:23:06,450
what would you think if somebody

00:23:03,900 --> 00:23:13,560
suggested that you use Kafka's remote

00:23:06,450 --> 00:23:18,420
storage back-end in my book it's no such

00:23:13,560 --> 00:23:22,920
thing as a stupid question so we use it

00:23:18,420 --> 00:23:26,250
for buffering and also for another

00:23:22,920 --> 00:23:28,710
purpose but it's just but you are not

00:23:26,250 --> 00:23:30,510
using mass remote estimates because do

00:23:28,710 --> 00:23:32,670
we have to implement the query layer on

00:23:30,510 --> 00:23:35,990
top of that so it's not only your strain

00:23:32,670 --> 00:23:35,990
data but also making it available

00:23:37,100 --> 00:23:41,500
for those standing around there's plenty

00:23:39,049 --> 00:23:43,460
of seats in the middle just there

00:23:41,500 --> 00:23:47,019
because like we've got a few minutes

00:23:43,460 --> 00:23:49,490
till to the next talk and next question

00:23:47,019 --> 00:23:59,630
sure hand up they're boxed rollers here

00:23:49,490 --> 00:24:02,210
I I want to ask you obviously which one

00:23:59,630 --> 00:24:05,630
you choose I guess you mentioned it did

00:24:02,210 --> 00:24:08,659
you chosen Victoria matrix and whether

00:24:05,630 --> 00:24:12,409
this was the only metric you used like

00:24:08,659 --> 00:24:15,700
pick winner and if you choose the

00:24:12,409 --> 00:24:20,419
victory matrix like do you consider also

00:24:15,700 --> 00:24:22,940
like the user base volume like the

00:24:20,419 --> 00:24:26,899
number of contributors to those projects

00:24:22,940 --> 00:24:29,659
and other criterias so the question I

00:24:26,899 --> 00:24:32,629
guess is we consider of a risk of going

00:24:29,659 --> 00:24:34,460
with one over the other because fellows

00:24:32,629 --> 00:24:38,570
architects are part of the scenes here

00:24:34,460 --> 00:24:42,259
for half a month I guess so that's kind

00:24:38,570 --> 00:24:48,289
of tape western right so we did consider

00:24:42,259 --> 00:24:50,769
but we that doesn't that risk is lower

00:24:48,289 --> 00:24:53,120
but you don't get any one of these that

00:24:50,769 --> 00:24:55,429
graph our ellipse is going to keep

00:24:53,120 --> 00:24:57,370
bursting on that or that where is going

00:24:55,429 --> 00:25:00,200
to to keep investing online free DVD

00:24:57,370 --> 00:25:03,559
they are a business and they put your

00:25:00,200 --> 00:25:06,169
successor will basically and for the

00:25:03,559 --> 00:25:08,659
foreseeable future they are going to

00:25:06,169 --> 00:25:15,110
keep investing but there is no strong

00:25:08,659 --> 00:25:17,990
guarantee on either question if you

00:25:15,110 --> 00:25:20,120
don't mind and so one of the other teams

00:25:17,990 --> 00:25:22,250
to consider when you're looking at any

00:25:20,120 --> 00:25:24,799
road storage beyond just kind of handle

00:25:22,250 --> 00:25:26,720
the load reading and writing is easy it

00:25:24,799 --> 00:25:29,090
actually producing the right answers as

00:25:26,720 --> 00:25:30,379
I know in the past like I remember some

00:25:29,090 --> 00:25:33,320
issues name three were fixed with reg

00:25:30,379 --> 00:25:35,720
X's subtle stuff in fact Alfred and his

00:25:33,320 --> 00:25:37,039
team found a bug in tano's and descent a

00:25:35,720 --> 00:25:39,529
PR which will hopefully be merged soon

00:25:37,039 --> 00:25:41,649
to fix that very subtle issue took me

00:25:39,529 --> 00:25:44,059
quite some time to realize I was there

00:25:41,649 --> 00:25:45,769
like this sort of thing is there I have

00:25:44,059 --> 00:25:47,600
you done anything to check that you know

00:25:45,769 --> 00:25:49,100
these data czar right because like if

00:25:47,600 --> 00:25:50,419
I'm seeing vice for sample that are very

00:25:49,100 --> 00:25:50,810
different between databases that makes

00:25:50,419 --> 00:25:53,000
me one

00:25:50,810 --> 00:25:55,880
are we losing information or you know is

00:25:53,000 --> 00:25:59,660
rather weirdness going on so we didn't

00:25:55,880 --> 00:26:02,710
fully test that the data was guaranteed

00:25:59,660 --> 00:26:05,510
to be there with these songs just

00:26:02,710 --> 00:26:07,610
surfaces creating that something that

00:26:05,510 --> 00:26:14,140
was there and there was the same day

00:26:07,610 --> 00:26:16,550
that we were sending so don't worry this

00:26:14,140 --> 00:26:18,500
okay we might just if it's a quick one

00:26:16,550 --> 00:26:22,490
yeah you've got certain you've got ten

00:26:18,500 --> 00:26:24,110
seconds with this type I mean some of

00:26:22,490 --> 00:26:26,450
these some of the databases actually use

00:26:24,110 --> 00:26:28,280
compression that is lossy yeah so one of

00:26:26,450 --> 00:26:29,750
the ways you save space is you actually

00:26:28,280 --> 00:26:31,160
have lost in compression could you

00:26:29,750 --> 00:26:32,510
actually look to see if you were getting

00:26:31,160 --> 00:26:37,010
the same results that you're getting out

00:26:32,510 --> 00:26:37,610
I know okay so it's something to look at

00:26:37,010 --> 00:26:40,010
cuz it's easier

00:26:37,610 --> 00:26:45,470
same storage if you do loss so we did

00:26:40,010 --> 00:26:48,320
some yes so you can test on that the

00:26:45,470 --> 00:26:53,060
data was there but I cannot tell you

00:26:48,320 --> 00:26:56,450
that X was and using the tower or using

00:26:53,060 --> 00:26:58,960
the solution Thank You alejandro

00:26:56,450 --> 00:27:02,020
here is your spoon

00:26:58,960 --> 00:27:05,150
[Applause]

00:27:02,020 --> 00:27:05,150
[Music]

00:27:05,680 --> 00:27:11,730
you

00:27:06,650 --> 00:27:11,730

YouTube URL: https://www.youtube.com/watch?v=OsH6gPdxR4s


