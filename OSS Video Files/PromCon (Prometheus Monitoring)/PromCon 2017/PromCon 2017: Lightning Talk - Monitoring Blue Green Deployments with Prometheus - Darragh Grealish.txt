Title: PromCon 2017: Lightning Talk - Monitoring Blue Green Deployments with Prometheus - Darragh Grealish
Publication date: 2017-09-04
Playlist: PromCon 2017
Description: 
	* Abstract:

Lightning Talk

* Speaker:

Darragh Grealish

* Slides:

* PromCon website:

https://promcon.io/
Captions: 
	00:00:00,380 --> 00:00:17,039
[Music]

00:00:14,670 --> 00:00:18,779
obviously use Prometheus in a in our

00:00:17,039 --> 00:00:22,130
deployment workflow recently where we

00:00:18,779 --> 00:00:29,939
had a service that was going offline and

00:00:22,130 --> 00:00:33,300
they basically did all of the sounds

00:00:29,939 --> 00:00:35,700
like I actually know I hear myself so we

00:00:33,300 --> 00:00:38,700
used it in our CID you know workflow and

00:00:35,700 --> 00:00:40,860
stuff and we we needed a way to to

00:00:38,700 --> 00:00:42,629
understand the state of our application

00:00:40,860 --> 00:00:44,160
if it's actually being monitored so we

00:00:42,629 --> 00:00:45,660
could get this to hell check of our own

00:00:44,160 --> 00:00:48,120
application but that wasn't good enough

00:00:45,660 --> 00:00:50,730
if we didn't know it was actually in the

00:00:48,120 --> 00:00:52,770
monitoring so I have a quick slide

00:00:50,730 --> 00:00:54,840
giving introduction this so there's some

00:00:52,770 --> 00:00:57,420
constraints it was kind of a classic

00:00:54,840 --> 00:00:58,949
application quite monolithic in a way so

00:00:57,420 --> 00:01:01,379
only one instance could run at a time

00:00:58,949 --> 00:01:03,199
even though we were using it in a TAS in

00:01:01,379 --> 00:01:06,000
the cloud with docker and so forth and

00:01:03,199 --> 00:01:08,430
we also had to ensure that the hosters

00:01:06,000 --> 00:01:11,729
are added to permit us to actually be

00:01:08,430 --> 00:01:13,950
scraped for its note and then we checked

00:01:11,729 --> 00:01:16,740
the application help URL query to see

00:01:13,950 --> 00:01:19,380
API if the target was up and then based

00:01:16,740 --> 00:01:21,090
on - we could you know further run the

00:01:19,380 --> 00:01:24,150
application and bring it live on the eld

00:01:21,090 --> 00:01:25,680
in a dress or the load balancer so what

00:01:24,150 --> 00:01:27,780
we're really interested here is from

00:01:25,680 --> 00:01:29,670
this API is this active targets and

00:01:27,780 --> 00:01:34,140
there's this health check-up so we

00:01:29,670 --> 00:01:36,180
basically scrape this API or this dis

00:01:34,140 --> 00:01:38,369
JSON message and it's in we're using

00:01:36,180 --> 00:01:40,380
ansible so ansible can just read this as

00:01:38,369 --> 00:01:42,930
a dictionary and you can just iterate

00:01:40,380 --> 00:01:44,880
through it in each doctor post and see

00:01:42,930 --> 00:01:47,090
if that is the host of new containers

00:01:44,880 --> 00:01:49,409
deployed on so the way it looks is it

00:01:47,090 --> 00:01:51,570
starts from the top down and it's

00:01:49,409 --> 00:01:53,729
completely automated that we have two

00:01:51,570 --> 00:01:56,189
roles so on the right is the developer's

00:01:53,729 --> 00:01:59,850
role and then the dev ops role and when

00:01:56,189 --> 00:02:02,880
the devs you know tag release or the

00:01:59,850 --> 00:02:05,250
latest or whatever this gets goes down

00:02:02,880 --> 00:02:06,570
Townsville troll host and each of these

00:02:05,250 --> 00:02:09,599
lines in the graph you can see that

00:02:06,570 --> 00:02:11,150
deer-like ansible tasks in in a set our

00:02:09,599 --> 00:02:14,269
play box and

00:02:11,150 --> 00:02:16,730
the blue one is not live yet but the

00:02:14,269 --> 00:02:18,680
application is running and what we want

00:02:16,730 --> 00:02:21,830
to do is we want to make sure before we

00:02:18,680 --> 00:02:24,409
switch the ELB that for live traffic

00:02:21,830 --> 00:02:26,780
that the target has been scraped in

00:02:24,409 --> 00:02:28,069
prometheus and so if the if we're

00:02:26,780 --> 00:02:31,400
looking at the case where we're doing a

00:02:28,069 --> 00:02:32,900
database migration so this or evolution

00:02:31,400 --> 00:02:35,299
or so the application is going to be

00:02:32,900 --> 00:02:37,370
very busy at you know translating the

00:02:35,299 --> 00:02:39,920
model there and everything so we don't

00:02:37,370 --> 00:02:42,890
want to send live traffic yet so we can

00:02:39,920 --> 00:02:44,629
actually use the Prometheus script data

00:02:42,890 --> 00:02:46,879
to actually have some sort of alert

00:02:44,629 --> 00:02:49,730
there if we can receive traffic or not

00:02:46,879 --> 00:02:52,310
and it's really short I mean it's it's

00:02:49,730 --> 00:02:53,959
it's only a few lines in an spot and so

00:02:52,310 --> 00:02:56,720
I go to the next one and this is an

00:02:53,959 --> 00:02:58,129
example where we use the URI module

00:02:56,720 --> 00:03:00,379
another ball and it can actually read

00:02:58,129 --> 00:03:02,989
the JSON and down on the bottom which is

00:03:00,379 --> 00:03:06,170
highlighted there that's basically the

00:03:02,989 --> 00:03:09,560
kind of simplest view of how it reads

00:03:06,170 --> 00:03:11,420
out in the JSON body the health status

00:03:09,560 --> 00:03:13,819
and if it's up and then the playbook

00:03:11,420 --> 00:03:18,139
just continues based on that disturb

00:03:13,819 --> 00:03:22,299
deterministic outcome and I think that's

00:03:18,139 --> 00:03:22,299
it is yeah that's it so simple

00:03:22,700 --> 00:03:35,520
[Music]

00:03:35,340 --> 00:03:38,659
you

00:03:35,520 --> 00:03:38,659

YouTube URL: https://www.youtube.com/watch?v=apra-hGVO1E


