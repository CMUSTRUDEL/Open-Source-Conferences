Title: PromCon 2017: Improving User and Developer Experience of the Alertmanager UI - Max Inden
Publication date: 2017-09-04
Playlist: PromCon 2017
Description: 
	* Abstract:

Alertmanager deduplicates, groups, and routes alerts from Prometheus to all kinds of paging services. With it comes a dated UI which does not live up to the expectations of the users, nor does it attract new contributors.

From this talk, you will learn how we addressed these issues when building the new UI from scratch. We made it friendlier to users by removing unnecessary domain language noise. In addition we added new power features such as filtering and grouping. As a result, it is now much easier to navigate through thousands of alerts.

We chose to build the new UI with Elm â€” a functional programming language for web interfaces. Elm enabled us to develop fast and with confidence by keeping a promise of zero runtime errors. It lowered the entry barrier for non-frontend developers and made the project appealing to newcomers.

* Speaker biography:

Max is a test engineer at CoreOS hacking on Prometheus and its integration with the Kubernetes ecosystem. Previously a frontend engineer working on ReactJS integrations and UI component testing, he decided to stop suppressing his interest for distributed systems at scale and joined CoreOS. Now he implements new testing infrastructures and development automations to support the Prometheus project.

* Slides:

https://promcon.io/2017-munich/slides/improving-user-and-developer-experience-of-the-alertmanager-ui.pdf

* PromCon website:

https://promcon.io/
Captions: 
	00:00:00,380 --> 00:00:16,680
[Music]

00:00:12,980 --> 00:00:18,900
hi I'm Joyce I'm gonna guide you through

00:00:16,680 --> 00:00:20,910
the afternoon sessions and as the first

00:00:18,900 --> 00:00:24,269
talk in the afternoon we have max in

00:00:20,910 --> 00:00:27,090
from core OS and he's going to tell us

00:00:24,269 --> 00:00:29,010
about his work of making the alert

00:00:27,090 --> 00:00:31,650
managers UI better for user experience

00:00:29,010 --> 00:00:40,860
and also developer experience thank you

00:00:31,650 --> 00:00:41,370
very much okay can everybody understand

00:00:40,860 --> 00:00:44,100
me just fine

00:00:41,370 --> 00:00:46,140
oh okay all right I'm gonna do a little

00:00:44,100 --> 00:00:49,230
bit crazy things today may be a little

00:00:46,140 --> 00:00:52,620
bit dangerous stuff today I'm gonna talk

00:00:49,230 --> 00:00:55,350
about the new hip javascript framework

00:00:52,620 --> 00:00:56,370
at an OPS conference so let's let's see

00:00:55,350 --> 00:00:58,550
how this turns out

00:00:56,370 --> 00:01:01,739
please don't kill me or anything but

00:00:58,550 --> 00:01:03,300
let's just go through it and I think a

00:01:01,739 --> 00:01:05,549
lot of stuff is quite interesting for

00:01:03,300 --> 00:01:06,689
you and in the end you gotta pretty UI

00:01:05,549 --> 00:01:09,119
okay

00:01:06,689 --> 00:01:12,000
alright the more former title is improve

00:01:09,119 --> 00:01:15,600
user and developer experience of the

00:01:12,000 --> 00:01:17,880
alert mange UI so let's look at it um a

00:01:15,600 --> 00:01:19,920
maximum test engineer at Korres I've

00:01:17,880 --> 00:01:21,869
been working a lot with the Prometheus

00:01:19,920 --> 00:01:24,720
team and that's how I got involved in

00:01:21,869 --> 00:01:26,759
today to the project itself feel free to

00:01:24,720 --> 00:01:28,890
ask questions during the talk or

00:01:26,759 --> 00:01:33,810
afterwards or feel free to reach out to

00:01:28,890 --> 00:01:35,220
me as well okay so alert manager we want

00:01:33,810 --> 00:01:37,439
to talk about alert manager we heard a

00:01:35,220 --> 00:01:39,420
lot about alert ninja I'll go over it

00:01:37,439 --> 00:01:41,790
really quickly so what is the alert

00:01:39,420 --> 00:01:44,670
mentor the idea is that for meatiest

00:01:41,790 --> 00:01:47,130
scrapes of targets calexis data goes

00:01:44,670 --> 00:01:48,810
over that data something goes wrong it

00:01:47,130 --> 00:01:51,180
sends out alerts but it doesn't send

00:01:48,810 --> 00:01:53,340
that out wide rate but there's alert

00:01:51,180 --> 00:01:55,290
manager in between right here but we've

00:01:53,340 --> 00:01:59,850
seen this graphic I think four times now

00:01:55,290 --> 00:02:01,380
it's very very helpful okay so what does

00:01:59,850 --> 00:02:04,759
the lurk manage to do well first of all

00:02:01,380 --> 00:02:08,759
it deduplicate alerts it groups alerts

00:02:04,759 --> 00:02:11,580
it routes your alerts in the end and the

00:02:08,759 --> 00:02:13,380
one feature is you can silence alerts as

00:02:11,580 --> 00:02:15,270
well

00:02:13,380 --> 00:02:18,000
so these are the the main

00:02:15,270 --> 00:02:20,520
functionalities of alert mender but most

00:02:18,000 --> 00:02:22,560
of it and the primitives echo system is

00:02:20,520 --> 00:02:25,650
configured via config files so there's

00:02:22,560 --> 00:02:27,360
not a lot to do for the UI so what what

00:02:25,650 --> 00:02:29,130
do we actually want from the I well

00:02:27,360 --> 00:02:32,220
first of all I wanted display alerts

00:02:29,130 --> 00:02:36,180
it's the alert manager why not we want

00:02:32,220 --> 00:02:38,070
to do crud operations on silences and we

00:02:36,180 --> 00:02:39,990
want to see the status of the alert

00:02:38,070 --> 00:02:42,960
manager how is it configured and how's

00:02:39,990 --> 00:02:45,270
it doing at the moment so these are the

00:02:42,960 --> 00:02:48,720
basic things and that's that's all the

00:02:45,270 --> 00:02:51,030
UI it pretty much has to serve and here

00:02:48,720 --> 00:02:53,490
you see the old guy and that's exactly

00:02:51,030 --> 00:02:55,770
what the old UI have solved exactly

00:02:53,490 --> 00:02:57,690
these operations but we had a couple of

00:02:55,770 --> 00:02:59,640
problems with it well first of all we're

00:02:57,690 --> 00:03:02,120
missing some features like cool

00:02:59,640 --> 00:03:05,040
filtering and searching and grouping and

00:03:02,120 --> 00:03:09,570
in addition maybe a little bit better

00:03:05,040 --> 00:03:11,820
user experience so have people find

00:03:09,570 --> 00:03:13,410
their ways faster but the problem was

00:03:11,820 --> 00:03:15,750
really that we had little amount of

00:03:13,410 --> 00:03:17,250
contributions to this UI so a little

00:03:15,750 --> 00:03:21,450
amount of people that wanted to

00:03:17,250 --> 00:03:24,300
contribute it so from here on we really

00:03:21,450 --> 00:03:27,000
had two ways to go so either improve it

00:03:24,300 --> 00:03:30,990
or well we're in the open source world

00:03:27,000 --> 00:03:33,030
why don't we rewrite it entirely so we

00:03:30,990 --> 00:03:36,270
have these two options and we looked at

00:03:33,030 --> 00:03:38,880
both of them of course and Stewart one

00:03:36,270 --> 00:03:40,830
engineer formerly back then working at

00:03:38,880 --> 00:03:44,940
SoundCloud he looked at a framework

00:03:40,830 --> 00:03:47,040
called elm and it did a little spike on

00:03:44,940 --> 00:03:49,440
it and then send us all an email hey

00:03:47,040 --> 00:03:52,380
look at this cool new feet framework

00:03:49,440 --> 00:03:55,110
I used to redevelop the entire work

00:03:52,380 --> 00:03:57,450
manager UI pretty much can you just have

00:03:55,110 --> 00:03:59,850
a look at it and now what I wanted to do

00:03:57,450 --> 00:04:02,640
with you is basically guide you to the

00:03:59,850 --> 00:04:06,959
train of thoughts that I had while I

00:04:02,640 --> 00:04:09,690
looked at this framework so elm it's a

00:04:06,959 --> 00:04:11,970
functional language it compiles down to

00:04:09,690 --> 00:04:14,640
JavaScript and it's written by even

00:04:11,970 --> 00:04:16,920
chaplets T and now you might be saying

00:04:14,640 --> 00:04:18,840
oh god first of all these talks about

00:04:16,920 --> 00:04:20,489
JavaScript and knobs conference and now

00:04:18,840 --> 00:04:24,150
he talks about functional programming

00:04:20,489 --> 00:04:24,910
really does this has to happen of go for

00:04:24,150 --> 00:04:30,520
it

00:04:24,910 --> 00:04:32,110
let's look into it a little bit so there

00:04:30,520 --> 00:04:34,540
are plenty of JavaScript frameworks out

00:04:32,110 --> 00:04:37,030
there right and I want to look at it

00:04:34,540 --> 00:04:38,890
from different dimensions and one would

00:04:37,030 --> 00:04:41,530
be usability and one would be

00:04:38,890 --> 00:04:43,750
maintainability and when I'm talking

00:04:41,530 --> 00:04:46,630
about usability I'm talking about how

00:04:43,750 --> 00:04:48,310
fast can one engineer get going with the

00:04:46,630 --> 00:04:51,760
language and when I talk about

00:04:48,310 --> 00:04:54,460
maintainability I'm talking about how

00:04:51,760 --> 00:04:57,850
fast are you at an in the third year

00:04:54,460 --> 00:05:00,610
compared to the very first day so let's

00:04:57,850 --> 00:05:01,090
place JavaScript on here I would place

00:05:00,610 --> 00:05:04,360
it right here

00:05:01,090 --> 00:05:06,100
it's very usable in terms of how fast

00:05:04,360 --> 00:05:09,130
can you get started you open up your

00:05:06,100 --> 00:05:10,750
browser you right-click console and then

00:05:09,130 --> 00:05:12,400
you're ready to go you have the entire

00:05:10,750 --> 00:05:15,910
environment pretty much to write

00:05:12,400 --> 00:05:18,850
JavaScript but well maintainability is a

00:05:15,910 --> 00:05:20,680
little bit difficult I know who here has

00:05:18,850 --> 00:05:22,510
been on a three years old JavaScript

00:05:20,680 --> 00:05:26,260
project and feels comfortable pushing

00:05:22,510 --> 00:05:28,480
changes on Friday I've seen some hands

00:05:26,260 --> 00:05:33,430
going up over there and then when I said

00:05:28,480 --> 00:05:35,080
comfortable all right so we have to

00:05:33,430 --> 00:05:36,340
change something here but let's look at

00:05:35,080 --> 00:05:40,120
the the big brother

00:05:36,340 --> 00:05:42,490
maybe Java Java is definitely like in

00:05:40,120 --> 00:05:44,140
terms of getting up to speed it's really

00:05:42,490 --> 00:05:45,940
difficult for me I don't know they're

00:05:44,140 --> 00:05:49,150
probably a lot of Java experts that can

00:05:45,940 --> 00:05:51,340
get fast we're going really fast but for

00:05:49,150 --> 00:05:53,560
me setting up a Java EE project I don't

00:05:51,340 --> 00:05:55,450
know one day four hours something like

00:05:53,560 --> 00:05:59,190
that but there's a reason for Java right

00:05:55,450 --> 00:06:02,320
if you have a big project with a lot of

00:05:59,190 --> 00:06:05,230
complicated logic in it it is actually

00:06:02,320 --> 00:06:07,030
maintainable with Java so these are the

00:06:05,230 --> 00:06:07,930
two things that we pretty much want to

00:06:07,030 --> 00:06:10,570
accomplish

00:06:07,930 --> 00:06:15,130
just as the site note where would I put

00:06:10,570 --> 00:06:16,980
Haskell maybe up there after four years

00:06:15,130 --> 00:06:19,930
you're definitely very productive and

00:06:16,980 --> 00:06:22,840
maintainable is as well very high so

00:06:19,930 --> 00:06:25,540
anyways so let's just look at these two

00:06:22,840 --> 00:06:28,210
Java and JavaScript and where would I

00:06:25,540 --> 00:06:30,400
place my where would I like to play some

00:06:28,210 --> 00:06:33,520
and that would be right here so I want

00:06:30,400 --> 00:06:35,410
high usability but at the same time have

00:06:33,520 --> 00:06:38,650
high maintainability

00:06:35,410 --> 00:06:41,170
so let's look how

00:06:38,650 --> 00:06:43,930
tries to implement that well first of

00:06:41,170 --> 00:06:45,340
all what might feel strange for a

00:06:43,930 --> 00:06:48,220
JavaScript engineer

00:06:45,340 --> 00:06:50,830
it's a statically typed language but in

00:06:48,220 --> 00:06:53,230
do not miss out on the usability it does

00:06:50,830 --> 00:06:54,610
type interference here the data

00:06:53,230 --> 00:06:57,070
structures underneath are fully

00:06:54,610 --> 00:06:59,230
immutable and we're talking here about

00:06:57,070 --> 00:07:03,160
functional language so pure functions

00:06:59,230 --> 00:07:05,380
with no side effects all the dirty IO is

00:07:03,160 --> 00:07:08,290
taken care of by ohm itself so you don't

00:07:05,380 --> 00:07:10,840
have to worry about that as a good

00:07:08,290 --> 00:07:13,780
JavaScript framework of 2017 of course

00:07:10,840 --> 00:07:17,080
we have a virtual Dom or shadow Dom or

00:07:13,780 --> 00:07:19,210
however you want to call that and to

00:07:17,080 --> 00:07:22,180
take away the fear a little bit there's

00:07:19,210 --> 00:07:24,460
no matter programming and in general no

00:07:22,180 --> 00:07:27,310
magic so you can get started really fast

00:07:24,460 --> 00:07:30,040
what does this bring you well high

00:07:27,310 --> 00:07:34,450
maintainability high usability exactly

00:07:30,040 --> 00:07:36,430
what we want it no runtime exceptions in

00:07:34,450 --> 00:07:39,400
the Java support pool that's kind of

00:07:36,430 --> 00:07:41,020
really really good and then for semantic

00:07:39,400 --> 00:07:42,790
versioning as we're in a very static

00:07:41,020 --> 00:07:46,000
environment here we can have a lot of

00:07:42,790 --> 00:07:47,770
code analysis and we can force semantic

00:07:46,000 --> 00:07:49,510
versioning on all packages so whenever

00:07:47,770 --> 00:07:52,930
you change something in your package you

00:07:49,510 --> 00:07:56,640
have to bump the major version so let's

00:07:52,930 --> 00:07:59,470
look at this from easier perspective

00:07:56,640 --> 00:08:01,270
let's build a little app with the

00:07:59,470 --> 00:08:05,110
counter and you can increase and

00:08:01,270 --> 00:08:06,640
decrease it so we have this and when we

00:08:05,110 --> 00:08:09,100
want to build an L map we need three

00:08:06,640 --> 00:08:11,950
things we need an update a model in a

00:08:09,100 --> 00:08:13,660
view function let's start off with a

00:08:11,950 --> 00:08:16,240
model at the beginning that model is

00:08:13,660 --> 00:08:18,040
probably zero we want to start from from

00:08:16,240 --> 00:08:19,990
the very beginning and we get that model

00:08:18,040 --> 00:08:22,060
on into the view function the view

00:08:19,990 --> 00:08:24,820
function takes a model and spits out

00:08:22,060 --> 00:08:27,070
HTML and that HTML is given to the

00:08:24,820 --> 00:08:30,550
browser and the browser renders it as

00:08:27,070 --> 00:08:33,130
it's good good to go there and whenever

00:08:30,550 --> 00:08:35,860
the user now interacts with that page

00:08:33,130 --> 00:08:38,140
for example he clicks somewhere we pass

00:08:35,860 --> 00:08:40,360
that event into the update function the

00:08:38,140 --> 00:08:43,060
update function takes an event and the

00:08:40,360 --> 00:08:45,610
model the old model and then spits out a

00:08:43,060 --> 00:08:47,620
new model that model is then directed to

00:08:45,610 --> 00:08:50,440
the via funky the view function again

00:08:47,620 --> 00:08:51,180
spits out new HTML and we increase our

00:08:50,440 --> 00:08:54,030
counter

00:08:51,180 --> 00:08:56,250
really easy looks here easy is it in

00:08:54,030 --> 00:08:59,070
code or small and easy as well let's

00:08:56,250 --> 00:09:00,900
look at that as well so the model we

00:08:59,070 --> 00:09:02,730
just have zero for now you can go crazy

00:09:00,900 --> 00:09:04,830
of course on the model you probably have

00:09:02,730 --> 00:09:07,800
more complicated data structures but

00:09:04,830 --> 00:09:09,720
that's it for now then we have the view

00:09:07,800 --> 00:09:10,740
function and what is really nice about

00:09:09,720 --> 00:09:12,630
functional programming

00:09:10,740 --> 00:09:15,330
you always have type signatures on the

00:09:12,630 --> 00:09:18,450
top so it takes a model and this spits

00:09:15,330 --> 00:09:20,940
out HTML and in this terms it's a button

00:09:18,450 --> 00:09:24,090
as if to display it and another button

00:09:20,940 --> 00:09:26,640
and last we have the update function

00:09:24,090 --> 00:09:28,620
again let's look at the signature we

00:09:26,640 --> 00:09:30,300
take a message that would be just an

00:09:28,620 --> 00:09:32,430
event if I was a event

00:09:30,300 --> 00:09:34,290
we take a model and we spit out a model

00:09:32,430 --> 00:09:36,540
in the end again

00:09:34,290 --> 00:09:39,000
I don't know increment decrement but oh

00:09:36,540 --> 00:09:41,730
well we need some glue code to glue that

00:09:39,000 --> 00:09:44,400
all together and we're good to go ready

00:09:41,730 --> 00:09:45,900
you can copy this from my slides run it

00:09:44,400 --> 00:09:49,500
through the compiler and that's it

00:09:45,900 --> 00:09:51,090
that's the entire application ok we

00:09:49,500 --> 00:09:53,250
looked at a little bit more I want to

00:09:51,090 --> 00:09:55,830
I'll add two more spots and then I'll

00:09:53,250 --> 00:09:57,510
actually go into alert manager what

00:09:55,830 --> 00:09:59,340
about the tooling around it it's

00:09:57,510 --> 00:10:03,420
compared to a very popular framework

00:09:59,340 --> 00:10:05,490
like for example react react yes it has

00:10:03,420 --> 00:10:07,710
a huge ecosystem rep yes in a huge

00:10:05,490 --> 00:10:10,560
community and thereby a lot of packages

00:10:07,710 --> 00:10:12,600
but react sadly is just the view library

00:10:10,560 --> 00:10:14,670
so in order to achieve the same that we

00:10:12,600 --> 00:10:16,610
have with Elm for example we need an

00:10:14,670 --> 00:10:20,220
entire data store that would be Redux

00:10:16,610 --> 00:10:23,460
then we might want immutability so we

00:10:20,220 --> 00:10:25,560
need immutable J's then we want flow or

00:10:23,460 --> 00:10:28,860
type system or something so we need to

00:10:25,560 --> 00:10:31,530
integrate flow as well from here on well

00:10:28,860 --> 00:10:33,720
let's actually let our browsers

00:10:31,530 --> 00:10:36,150
understand all of this so we need Babel

00:10:33,720 --> 00:10:41,880
as well otherwise no browser understands

00:10:36,150 --> 00:10:43,770
yes I don't know 15 and from here on we

00:10:41,880 --> 00:10:46,290
need something that actually can manage

00:10:43,770 --> 00:10:48,390
all this so glorified make so that would

00:10:46,290 --> 00:10:50,790
be web pack and to configure this and

00:10:48,390 --> 00:10:54,470
back to the Java from of probably four

00:10:50,790 --> 00:10:55,800
hours what how does it look in Elm well

00:10:54,470 --> 00:10:57,690
that's it

00:10:55,800 --> 00:11:02,370
we just have found that's all there's

00:10:57,690 --> 00:11:03,980
all the packages ok last thing was

00:11:02,370 --> 00:11:06,800
really great about them

00:11:03,980 --> 00:11:09,440
is the compiler let's compare some

00:11:06,800 --> 00:11:11,300
compiler error messages or in JavaScript

00:11:09,440 --> 00:11:13,220
some runtime errors

00:11:11,300 --> 00:11:15,380
first of all in JavaScript on called

00:11:13,220 --> 00:11:20,450
type error undefined is not a function

00:11:15,380 --> 00:11:22,850
he has never seen this okay all right

00:11:20,450 --> 00:11:26,390
cool well first of all which function

00:11:22,850 --> 00:11:27,740
what undefined what type so there's

00:11:26,390 --> 00:11:28,640
really confusing right and it doesn't

00:11:27,740 --> 00:11:32,510
help you a lot

00:11:28,640 --> 00:11:34,340
let's look at Java method X is not

00:11:32,510 --> 00:11:35,180
defined for the type X that's actually

00:11:34,340 --> 00:11:37,880
quite helpful

00:11:35,180 --> 00:11:40,730
I can I can use that I can debug that

00:11:37,880 --> 00:11:43,460
and but we can even do better and that's

00:11:40,730 --> 00:11:45,980
where LM comes into place well shows you

00:11:43,460 --> 00:11:47,570
where totally where exactly in the code

00:11:45,980 --> 00:11:50,390
and it actually gives you suggestions

00:11:47,570 --> 00:11:52,130
for what to do so you might want extra

00:11:50,390 --> 00:11:57,290
mental alerts but you also want

00:11:52,130 --> 00:12:01,100
actionable error messages okay that's

00:11:57,290 --> 00:12:03,320
all from the theoretical point pretty

00:12:01,100 --> 00:12:05,900
much covered all Elm so you're not all

00:12:03,320 --> 00:12:10,100
LM experts which is pretty cool it's

00:12:05,900 --> 00:12:12,980
certified now we started November third

00:12:10,100 --> 00:12:16,640
or Stewart started November third and in

00:12:12,980 --> 00:12:19,520
2016 and we got our merge pork rest

00:12:16,640 --> 00:12:22,960
merged on the 15th of May replacing the

00:12:19,520 --> 00:12:26,540
entire old UI with a new warrior I and

00:12:22,960 --> 00:12:29,300
let's review this process or to go over

00:12:26,540 --> 00:12:31,820
that or let's look at actually what we

00:12:29,300 --> 00:12:34,580
did that is the new I can show you

00:12:31,820 --> 00:12:37,760
around a little bit over have it open

00:12:34,580 --> 00:12:39,770
here that visible all right it of course

00:12:37,760 --> 00:12:43,550
looks a lot better not in such an

00:12:39,770 --> 00:12:46,430
increased way well first of all we

00:12:43,550 --> 00:12:48,650
brought filtering and grouping so by

00:12:46,430 --> 00:12:50,780
default everything is grouped by the

00:12:48,650 --> 00:12:55,070
alert name but for example we can also

00:12:50,780 --> 00:12:56,840
now group by data center for example and

00:12:55,070 --> 00:12:58,970
then I can look at the various private

00:12:56,840 --> 00:13:01,340
data centers and I can group a multiple

00:12:58,970 --> 00:13:03,560
stuff then in addition I can look

00:13:01,340 --> 00:13:07,520
example filter I don't know I know that

00:13:03,560 --> 00:13:10,040
the instance instance 24 for example is

00:13:07,520 --> 00:13:12,020
very buggy so I right now filter by the

00:13:10,040 --> 00:13:13,910
instance 24 and I get a collect these

00:13:12,020 --> 00:13:17,000
alerts there

00:13:13,910 --> 00:13:19,790
now I can look at additional information

00:13:17,000 --> 00:13:21,800
maybe look at the run book and so on and

00:13:19,790 --> 00:13:27,010
I can silence those as well so I can

00:13:21,800 --> 00:13:30,140
click here on silence and create max

00:13:27,010 --> 00:13:31,910
chrome Khan here preview what I'm

00:13:30,140 --> 00:13:34,280
actually doing here so I'm silencing

00:13:31,910 --> 00:13:38,210
that only one and then I can create it

00:13:34,280 --> 00:13:40,880
and you see what exactly you silenced

00:13:38,210 --> 00:13:43,400
and you can look at the sale of sounds

00:13:40,880 --> 00:13:46,700
and you can look at a very very fancy

00:13:43,400 --> 00:13:48,320
status page um that's pretty much all

00:13:46,700 --> 00:13:51,280
the features as I said it's not very

00:13:48,320 --> 00:13:54,860
complicated the alert measure itself and

00:13:51,280 --> 00:13:57,500
that's what we implement it and let's

00:13:54,860 --> 00:14:00,260
review this really quickly so far we had

00:13:57,500 --> 00:14:03,470
zero front end regressions let me know

00:14:00,260 --> 00:14:05,270
if we do give us feedback please we had

00:14:03,470 --> 00:14:07,820
no runtime exceptions reported so far

00:14:05,270 --> 00:14:09,650
ever to us been working on quite a lot

00:14:07,820 --> 00:14:12,890
of JavaScript projects this has never

00:14:09,650 --> 00:14:14,840
happened to me ever before we actually

00:14:12,890 --> 00:14:17,630
have active contributors we don't have

00:14:14,840 --> 00:14:19,520
daily active contributors but maybe once

00:14:17,630 --> 00:14:22,250
a week I think pretty much every week or

00:14:19,520 --> 00:14:25,010
more frequently we have a new feature or

00:14:22,250 --> 00:14:26,840
we are improving this UI and we are 90

00:14:25,010 --> 00:14:29,450
percent feature parity with the old UI

00:14:26,840 --> 00:14:31,490
we're still missing the the routing tree

00:14:29,450 --> 00:14:35,360
which we absolutely want to get back in

00:14:31,490 --> 00:14:38,600
but in terms of what do we have more

00:14:35,360 --> 00:14:40,340
than the ODI we have a lot more that for

00:14:38,600 --> 00:14:44,480
example filtering searching and improved

00:14:40,340 --> 00:14:46,190
user usability okay

00:14:44,480 --> 00:14:49,100
where to go from here well first of all

00:14:46,190 --> 00:14:50,410
it's difficult to get feedback so if

00:14:49,100 --> 00:14:53,210
you're using alert manager right now

00:14:50,410 --> 00:14:54,470
would be lovely if you would update to

00:14:53,210 --> 00:14:55,310
the new version and give us some

00:14:54,470 --> 00:14:58,130
feedback

00:14:55,310 --> 00:15:01,160
open up issues tell us about how you use

00:14:58,130 --> 00:15:03,890
alert manager and how you think we could

00:15:01,160 --> 00:15:07,040
improve this and last as you are now all

00:15:03,890 --> 00:15:10,250
certified elm experts and as this is a

00:15:07,040 --> 00:15:12,320
very very easy language contribute have

00:15:10,250 --> 00:15:13,820
a look at it it's very interesting it

00:15:12,320 --> 00:15:15,950
probably takes you three or four hours

00:15:13,820 --> 00:15:19,970
to get started and implement something

00:15:15,950 --> 00:15:22,160
very very basic we're here to help I'm

00:15:19,970 --> 00:15:24,980
here after the conference but also very

00:15:22,160 --> 00:15:26,450
happy to help in any other communication

00:15:24,980 --> 00:15:28,820
channels

00:15:26,450 --> 00:15:31,070
in addition that as fabien already

00:15:28,820 --> 00:15:34,160
covered we're hiring we're not hiring

00:15:31,070 --> 00:15:36,710
for full-time Elm experts I'm sorry even

00:15:34,160 --> 00:15:39,560
you're now you're all certified can't do

00:15:36,710 --> 00:15:43,130
that but we are hiring for prometheus

00:15:39,560 --> 00:15:44,000
experts and automation engineers okay

00:15:43,130 --> 00:15:46,550
that's it

00:15:44,000 --> 00:15:57,890
I hope you liked it and sorry for the

00:15:46,550 --> 00:16:02,320
JavaScript stuff Thank You max questions

00:15:57,890 --> 00:16:02,320
I saw this hand going up very first I

00:16:11,800 --> 00:16:16,570
can repeat it as well as you want I

00:16:18,670 --> 00:16:25,070
think they are the long-term plans but

00:16:23,000 --> 00:16:26,750
there's no like concrete plans at the

00:16:25,070 --> 00:16:29,780
moment when we want to do that would be

00:16:26,750 --> 00:16:35,710
nice to have like 100 sorry I even

00:16:29,780 --> 00:16:41,840
suggested I'm sorry how do you manage

00:16:35,710 --> 00:16:44,330
space sheets state and HTML so the

00:16:41,840 --> 00:16:46,670
question was actually if we're going to

00:16:44,330 --> 00:16:48,590
do this for Prometheus I don't quite

00:16:46,670 --> 00:16:52,430
know yet and about style sheets and so

00:16:48,590 --> 00:16:54,770
on so far we we pretty much only

00:16:52,430 --> 00:16:57,050
leverage bootstrap I think it looks

00:16:54,770 --> 00:16:59,150
pretty good for that what you do in

00:16:57,050 --> 00:17:01,160
terms of style sheets there's so like a

00:16:59,150 --> 00:17:03,290
whole war around this where should you

00:17:01,160 --> 00:17:05,750
put the other styles and we have done

00:17:03,290 --> 00:17:07,640
pretty much inline styles so far you

00:17:05,750 --> 00:17:09,459
know some people might kill us for that

00:17:07,640 --> 00:17:12,980
but it works pretty well

00:17:09,459 --> 00:17:15,470
coming from go why didn't you think

00:17:12,980 --> 00:17:18,290
about using dart for example feels a lot

00:17:15,470 --> 00:17:23,360
more like coming from golf is a lot more

00:17:18,290 --> 00:17:25,850
familiar we thought about many

00:17:23,360 --> 00:17:27,530
frameworks but I think the number one

00:17:25,850 --> 00:17:29,900
most important thing for an open-source

00:17:27,530 --> 00:17:32,630
project is actually finding contributors

00:17:29,900 --> 00:17:34,430
and we have three people that actually

00:17:32,630 --> 00:17:36,530
wanted to contribute to an elm project

00:17:34,430 --> 00:17:38,350
and that's why we we stick with them in

00:17:36,530 --> 00:17:41,590
the end

00:17:38,350 --> 00:17:48,399
all right more questions with that one

00:17:41,590 --> 00:17:50,230
over there what would you say is some of

00:17:48,399 --> 00:17:55,690
the biggest pains that you've so far

00:17:50,230 --> 00:17:58,210
like experienced with film actually

00:17:55,690 --> 00:18:00,070
integrating it in our current like okay

00:17:58,210 --> 00:18:01,799
that's my pain I think I don't know

00:18:00,070 --> 00:18:04,600
about the other two

00:18:01,799 --> 00:18:07,600
integrating is an hour mic files stack

00:18:04,600 --> 00:18:10,389
so right now we don't want everyone to

00:18:07,600 --> 00:18:12,789
have Elm installed if he runs alert

00:18:10,389 --> 00:18:14,649
manager and wants to work on the alert

00:18:12,789 --> 00:18:16,419
manager so if you just wants to do

00:18:14,649 --> 00:18:18,639
back-end changes we want don't want them

00:18:16,419 --> 00:18:21,039
to have Elm installed right so we have

00:18:18,639 --> 00:18:23,230
to have some kind of binary or compiled

00:18:21,039 --> 00:18:25,000
version of that Elm front-end so people

00:18:23,230 --> 00:18:28,029
can actually compile the code right and

00:18:25,000 --> 00:18:31,299
that's difficult to do in a good way

00:18:28,029 --> 00:18:33,940
that both duis people are not blocked

00:18:31,299 --> 00:18:35,379
and back-end people are not blocked but

00:18:33,940 --> 00:18:37,480
so far it has been a lot of fun

00:18:35,379 --> 00:18:39,190
especially doing like one little change

00:18:37,480 --> 00:18:41,139
in your code and then the compiler tells

00:18:39,190 --> 00:18:44,009
you exactly where to go next like where

00:18:41,139 --> 00:18:47,350
to fix from here on that's amazing

00:18:44,009 --> 00:18:48,789
do you plan to add the option to control

00:18:47,350 --> 00:18:52,360
a letter management configuration

00:18:48,789 --> 00:18:55,690
through UI I think the Prometheus

00:18:52,360 --> 00:18:57,700
project is pretty focused on the fact

00:18:55,690 --> 00:18:59,919
that the convicts are all text files as

00:18:57,700 --> 00:19:03,009
we can thereby script everything very

00:18:59,919 --> 00:19:04,840
nicely and I don't think we can we can

00:19:03,009 --> 00:19:07,000
manage to have that configuration via

00:19:04,840 --> 00:19:08,980
the UI like that's a lot of work and we

00:19:07,000 --> 00:19:15,250
simply don't have the contributors for

00:19:08,980 --> 00:19:18,250
that hi does it have like for logging

00:19:15,250 --> 00:19:22,149
like reloading okay yes and how fast it

00:19:18,250 --> 00:19:24,009
is during development yes okay so we I

00:19:22,149 --> 00:19:26,769
get as I said we invested a lot in our

00:19:24,009 --> 00:19:29,049
tooling around it so there's a def

00:19:26,769 --> 00:19:30,730
server and so you just start up alert

00:19:29,049 --> 00:19:32,799
manager in the def server and then

00:19:30,730 --> 00:19:35,769
whenever you save a file it instantly

00:19:32,799 --> 00:19:37,269
reloads pretty much no so that's really

00:19:35,769 --> 00:19:40,149
fast it's probably not as fancy as

00:19:37,269 --> 00:19:41,529
direct react ecosystem offers you but

00:19:40,149 --> 00:19:47,039
then again there's it's a little bit

00:19:41,529 --> 00:19:47,039
smaller community right

00:19:49,010 --> 00:19:53,940
maybe slightly off-topic and you

00:19:51,600 --> 00:19:56,220
probably haven't seen that much of it in

00:19:53,940 --> 00:19:58,080
the simple UI of our manager about the

00:19:56,220 --> 00:20:00,990
house I mean I don't know if I can even

00:19:58,080 --> 00:20:04,740
ask but what's the state with like UI

00:20:00,990 --> 00:20:06,600
libraries for Elm - no UI libraries what

00:20:04,740 --> 00:20:09,690
let's say I want to do material design

00:20:06,600 --> 00:20:11,790
or whatever I'm screwed right first of

00:20:09,690 --> 00:20:14,100
all it's just in the end HTML and CSS

00:20:11,790 --> 00:20:17,400
right and so material design is just a

00:20:14,100 --> 00:20:19,980
CSS library so you just have your elm

00:20:17,400 --> 00:20:22,500
code spitting out HTML and then adding

00:20:19,980 --> 00:20:24,450
your CSS to it there's some behaviors

00:20:22,500 --> 00:20:27,360
which I wouldn't want to do straight

00:20:24,450 --> 00:20:29,010
away from the start right okay so there

00:20:27,360 --> 00:20:30,660
are a bunch of libraries for example for

00:20:29,010 --> 00:20:32,850
material design there's something from

00:20:30,660 --> 00:20:36,330
somebody ported it over but you can also

00:20:32,850 --> 00:20:38,670
interact with the dirty io JavaScript

00:20:36,330 --> 00:20:40,920
world from elm even though people don't

00:20:38,670 --> 00:20:43,980
like that of course as we don't have any

00:20:40,920 --> 00:20:52,230
runtime error promises anymore yeah

00:20:43,980 --> 00:20:54,930
thanks any more questions all right all

00:20:52,230 --> 00:21:07,630
right thank you thank you

00:20:54,930 --> 00:21:07,800
[Music]

00:21:07,630 --> 00:21:10,940
you

00:21:07,800 --> 00:21:10,940

YouTube URL: https://www.youtube.com/watch?v=TpifnbUGXD8


