Title: PromCon 2017: Lightning Talk - Using Prometheus For Container Resource Consumption Estimates
Publication date: 2017-09-01
Playlist: PromCon 2017
Description: 
	* Abstract:

Lightning Talk

* Speaker:

Michael Hausenblas

* Slides:

https://promcon.io/2017-munich/slides/lightning-talks-day1-07.pdf

* PromCon website:

https://promcon.io/
Captions: 
	00:00:00,380 --> 00:00:16,170
[Music]

00:00:13,009 --> 00:00:18,449
all right my name is Michael I work at

00:00:16,170 --> 00:00:19,410
red her 2004 shift team doing committees

00:00:18,449 --> 00:00:24,539
by the way who has heard about

00:00:19,410 --> 00:00:27,779
communities good I don't have that much

00:00:24,539 --> 00:00:30,060
of a fleshie demo like like previous

00:00:27,779 --> 00:00:35,040
ones but I'm gonna give my best so the

00:00:30,060 --> 00:00:38,129
problem I'm gonna try to solve is it's

00:00:35,040 --> 00:00:39,540
actually this time now oh yeah

00:00:38,129 --> 00:00:45,750
that is the problem all right there we

00:00:39,540 --> 00:00:49,170
go a more technical variation is you got

00:00:45,750 --> 00:00:50,820
containers in your cluster and basically

00:00:49,170 --> 00:00:52,260
made up of you know see groups

00:00:50,820 --> 00:00:52,770
namespaces and a copy-on-write file

00:00:52,260 --> 00:00:55,230
system

00:00:52,770 --> 00:00:57,719
you got resources vector of things like

00:00:55,230 --> 00:00:59,520
CPU memory GPU disk cords and so on and

00:00:57,719 --> 00:01:01,620
so forth and you got a couple of

00:00:59,520 --> 00:01:04,589
questions like how much memory does your

00:01:01,620 --> 00:01:07,650
app actually consume or how much CPU

00:01:04,589 --> 00:01:10,619
time or what about spikes in the traffic

00:01:07,650 --> 00:01:13,070
how can you assess that so I thought

00:01:10,619 --> 00:01:15,119
maybe from if s is the right thing

00:01:13,070 --> 00:01:17,220
because it is a problem like like

00:01:15,119 --> 00:01:19,909
petitioners actually pointed out that we

00:01:17,220 --> 00:01:23,820
don't have this kind of vertical scaling

00:01:19,909 --> 00:01:25,740
automated in release yet can go and read

00:01:23,820 --> 00:01:28,680
the blog post later on that's what I put

00:01:25,740 --> 00:01:30,750
together quickly drew it there so it's

00:01:28,680 --> 00:01:33,030
actually Prometheus taking all these

00:01:30,750 --> 00:01:34,860
metrics from different parts that were

00:01:33,030 --> 00:01:36,210
different containers run and that that

00:01:34,860 --> 00:01:38,549
is all in the user land in this engine

00:01:36,210 --> 00:01:40,590
system land if you wish you have

00:01:38,549 --> 00:01:43,350
freezers and you have resource her which

00:01:40,590 --> 00:01:45,180
is essentially this POC that does all

00:01:43,350 --> 00:01:47,220
the heavy lifting or outsources all the

00:01:45,180 --> 00:01:49,619
heavy lifting to Prometheus and then

00:01:47,220 --> 00:01:52,079
comes up with recommendations and then

00:01:49,619 --> 00:01:54,090
you can actually rescale the pot or the

00:01:52,079 --> 00:01:56,310
container running the pot interested in

00:01:54,090 --> 00:01:59,130
the blog post where describe that and

00:01:56,310 --> 00:02:02,280
and or the code then check out this one

00:01:59,130 --> 00:02:05,850
so let's switch over to the demo if the

00:02:02,280 --> 00:02:08,879
demo gods are with me so I have a

00:02:05,850 --> 00:02:10,379
openshift cluster running here where

00:02:08,879 --> 00:02:12,830
I've deployed everything obviously five

00:02:10,379 --> 00:02:15,980
minutes are not enough kratos resource

00:02:12,830 --> 00:02:19,640
a couple of other things amongst that is

00:02:15,980 --> 00:02:22,790
engine X and now we essentially want to

00:02:19,640 --> 00:02:25,610
get you know a recommendation for that I

00:02:22,790 --> 00:02:31,120
first observe this engine X for a while

00:02:25,610 --> 00:02:31,120
for example 30 minutes and of course

00:02:42,520 --> 00:02:50,320
okay probably something else anyway what

00:02:46,520 --> 00:02:55,550
you should be seeing is recognition

00:02:50,320 --> 00:02:57,110
let's see maybe comes now who knows I'm

00:02:55,550 --> 00:02:59,209
not gonna laugh debug that in two

00:02:57,110 --> 00:03:01,850
minutes I have essentially with the

00:02:59,209 --> 00:03:04,640
observation endpoint you say if observe

00:03:01,850 --> 00:03:07,520
this container engine eggs in the pot

00:03:04,640 --> 00:03:10,310
engine X for 30 minutes and then you get

00:03:07,520 --> 00:03:13,190
a recommendation which also won't work

00:03:10,310 --> 00:03:15,320
obviously and with that you essentially

00:03:13,190 --> 00:03:17,989
have CPU and RAM that it can either

00:03:15,320 --> 00:03:21,800
manually set or there's another endpoint

00:03:17,989 --> 00:03:28,220
that is adjust that you can use to

00:03:21,800 --> 00:03:29,840
adjust the actual limits and the request

00:03:28,220 --> 00:03:31,400
of that container so that would have

00:03:29,840 --> 00:03:33,470
been the demo you would get an

00:03:31,400 --> 00:03:34,400
observation or you would trigger an

00:03:33,470 --> 00:03:35,900
observation you would get a

00:03:34,400 --> 00:03:39,739
recommendation and then you would be

00:03:35,900 --> 00:03:43,130
able to set in this last bit here the

00:03:39,739 --> 00:03:44,870
CPU to 230 mil occurs and the memory to

00:03:43,130 --> 00:03:47,060
I don't know 50 megabytes or whatever

00:03:44,870 --> 00:03:48,790
and the main problem with that currently

00:03:47,060 --> 00:03:51,019
is that you can't do inference updates

00:03:48,790 --> 00:03:53,480
prevention doesn't allow that prior

00:03:51,019 --> 00:03:55,610
might help but the main point the main

00:03:53,480 --> 00:03:58,340
takeaway for you is that you can use

00:03:55,610 --> 00:04:00,500
providers for many things and many more

00:03:58,340 --> 00:04:03,739
that you might not have actually thought

00:04:00,500 --> 00:04:06,010
about yet and with that I'm actually

00:04:03,739 --> 00:04:06,010
done

00:04:10,020 --> 00:04:22,840
[Music]

00:04:22,630 --> 00:04:25,980
you

00:04:22,840 --> 00:04:25,980

YouTube URL: https://www.youtube.com/watch?v=RL7XLk-2-Zg


