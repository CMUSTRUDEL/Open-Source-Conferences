Title: PromCon 2016: Lightning Talks - vulcan: An API-compatible Alternative to Prometheus - Ian Hansen
Publication date: 2016-09-04
Playlist: PromCon 2016
Description: 
	* Abstract:

Ian Hansen from DigitalOcean talks about their API-compatible, scalable alternative to Prometheus.

* PromCon website:

https://promcon.io/
Captions: 
	00:00:03,540 --> 00:00:09,730
alright so yes we open sourced Vulcan

00:00:06,879 --> 00:00:12,730
just a couple days ago and how that

00:00:09,730 --> 00:00:14,950
process went is I was boarding the plane

00:00:12,730 --> 00:00:16,960
to Berlin I pushed the make public

00:00:14,950 --> 00:00:19,360
button and then I got in an airplane

00:00:16,960 --> 00:00:21,190
that had zero internet for 11 hours and

00:00:19,360 --> 00:00:23,200
so I was waiting anxiously when I lent

00:00:21,190 --> 00:00:27,490
it to figure out what the reaction was

00:00:23,200 --> 00:00:31,080
and i found this tweet first thought why

00:00:27,490 --> 00:00:31,080
for God's sake what do you ever do that

00:00:32,940 --> 00:00:39,819
fork so want to go into what it means

00:00:36,999 --> 00:00:42,550
people talking about as a fork and API

00:00:39,819 --> 00:00:44,319
compatible first off API compatible does

00:00:42,550 --> 00:00:45,850
not mean replacement for prometheus we

00:00:44,319 --> 00:00:47,489
want some different attributes and we

00:00:45,850 --> 00:00:49,539
want to be as close to the Prometheus

00:00:47,489 --> 00:00:51,309
operations of what it feels like to

00:00:49,539 --> 00:00:53,170
query and interact with Prometheus as

00:00:51,309 --> 00:00:55,120
possible and that we don't intend to

00:00:53,170 --> 00:00:59,100
solve the same problems in the same way

00:00:55,120 --> 00:01:01,539
but utilize the same ecosystem and so

00:00:59,100 --> 00:01:03,729
one of the weird ways we've leveraged

00:01:01,539 --> 00:01:06,189
that is we use Prometheus as a library

00:01:03,729 --> 00:01:07,810
and the Prometheus itself was not meant

00:01:06,189 --> 00:01:09,369
to be as user library it meant to build

00:01:07,810 --> 00:01:11,110
a binary that you actually run but we're

00:01:09,369 --> 00:01:14,049
using it in our binary that we built to

00:01:11,110 --> 00:01:16,030
run but that helps us keep in sync by

00:01:14,049 --> 00:01:17,140
using that upstream as a natural library

00:01:16,030 --> 00:01:19,090
instead of like forking it making

00:01:17,140 --> 00:01:21,399
significant changes to the core of the

00:01:19,090 --> 00:01:23,530
code and so we want to keep the

00:01:21,399 --> 00:01:25,899
contributions to prom ql and how the

00:01:23,530 --> 00:01:29,200
engine works right in prometheus in one

00:01:25,899 --> 00:01:31,030
place and as another side effect the how

00:01:29,200 --> 00:01:32,859
you configure Vulcan is with this great

00:01:31,030 --> 00:01:34,509
job which is using the exact same code

00:01:32,859 --> 00:01:37,570
that prometheus uses for configuring

00:01:34,509 --> 00:01:39,219
your script jobs so maybe we need a

00:01:37,570 --> 00:01:42,100
better tagline for our project can says

00:01:39,219 --> 00:01:46,810
API compatible alternative that might be

00:01:42,100 --> 00:01:48,100
misleading so what our vision is is we

00:01:46,810 --> 00:01:50,140
want to provide different attributes and

00:01:48,100 --> 00:01:52,240
what I just barely learned this term

00:01:50,140 --> 00:01:53,829
horizontal monitoring today of this a

00:01:52,240 --> 00:01:56,020
concept that you can have multiple

00:01:53,829 --> 00:01:57,909
things grating the same expertise you

00:01:56,020 --> 00:01:59,710
have for different purposes and you can

00:01:57,909 --> 00:02:03,869
have proof Prometheus in parallel in

00:01:59,710 --> 00:02:06,969
line with Vulcan so why build Vulcan

00:02:03,869 --> 00:02:09,760
long-term storage sampled durability and

00:02:06,969 --> 00:02:12,250
high cardinality metrics those were kind

00:02:09,760 --> 00:02:14,520
of the buzzwords around it so okay why

00:02:12,250 --> 00:02:16,350
why build Vulcan for reals

00:02:14,520 --> 00:02:17,880
so we have some use cases we weren't

00:02:16,350 --> 00:02:20,400
trending over months of our power usage

00:02:17,880 --> 00:02:23,010
and our data centers and we want to be

00:02:20,400 --> 00:02:27,300
able to aggregate that by rack by PD you

00:02:23,010 --> 00:02:29,160
type by data center and we want a better

00:02:27,300 --> 00:02:30,780
story about the numbers were summing up

00:02:29,160 --> 00:02:33,270
for SLA numbers of report to ourselves

00:02:30,780 --> 00:02:34,800
and to customers and at a store that if

00:02:33,270 --> 00:02:36,840
we were to lose a Prometheus note it

00:02:34,800 --> 00:02:39,600
would be a difficult job to try to make

00:02:36,840 --> 00:02:41,280
sure we have enough data back filled for

00:02:39,600 --> 00:02:42,690
a 30 day window to ride that moderate so

00:02:41,280 --> 00:02:44,780
we want to be able to lose nodes that

00:02:42,690 --> 00:02:47,130
are storing the data with Cassandra and

00:02:44,780 --> 00:02:48,780
have a replication factor that allows us

00:02:47,130 --> 00:02:55,200
to have a higher durability of those

00:02:48,780 --> 00:02:56,730
metrics and high cardinality one thing

00:02:55,200 --> 00:02:59,280
that we're tried to use right now is

00:02:56,730 --> 00:03:00,780
like SSD performance and being able to

00:02:59,280 --> 00:03:03,360
summon that by the model number but also

00:03:00,780 --> 00:03:06,000
once there's some bad actors be able to

00:03:03,360 --> 00:03:08,030
filter down into like the actual serial

00:03:06,000 --> 00:03:10,650
number that is performing and from our

00:03:08,030 --> 00:03:12,630
prometheus endpoint query like who is

00:03:10,650 --> 00:03:16,100
what hard drives are performing poorly

00:03:12,630 --> 00:03:18,959
and go right to the source all right

00:03:16,100 --> 00:03:21,630
okay but why this time stop lying to me

00:03:18,959 --> 00:03:23,180
I like prompt ql like we could have

00:03:21,630 --> 00:03:26,750
solved those other issues without

00:03:23,180 --> 00:03:29,910
building an entirely weird crazy Fork of

00:03:26,750 --> 00:03:31,470
Prometheus but we really like prom ql

00:03:29,910 --> 00:03:32,940
and what we were doing is we did have

00:03:31,470 --> 00:03:35,280
Prometheus and we're doing etl jobs

00:03:32,940 --> 00:03:36,510
custom jobs out of Prometheus data into

00:03:35,280 --> 00:03:37,620
a sequel database and then we can have

00:03:36,510 --> 00:03:39,840
that reporting have a durability

00:03:37,620 --> 00:03:41,850
guarantees in our backups but now we're

00:03:39,840 --> 00:03:43,680
maintaining ETL jobs and we're also

00:03:41,850 --> 00:03:45,420
training people to query Prometheus and

00:03:43,680 --> 00:03:47,459
we're also training people to query like

00:03:45,420 --> 00:03:48,750
the sequel layer over here for this

00:03:47,459 --> 00:03:51,840
other data but it's really all the same

00:03:48,750 --> 00:03:53,700
source so can we utilize the same source

00:03:51,840 --> 00:03:56,900
data and store it in a different way and

00:03:53,700 --> 00:03:59,760
have the same language to get to it and

00:03:56,900 --> 00:04:01,380
it like tom was saying with their

00:03:59,760 --> 00:04:02,870
product of Frankenstein we we built it

00:04:01,380 --> 00:04:05,310
and it was surprisingly performant

00:04:02,870 --> 00:04:08,130
putting it down to a database and taking

00:04:05,310 --> 00:04:13,290
it away from the Prometheus model of

00:04:08,130 --> 00:04:16,620
being in memory so alternative is not a

00:04:13,290 --> 00:04:18,209
replacement Vulcan is much more complex

00:04:16,620 --> 00:04:19,320
to run all of our workers involved in

00:04:18,209 --> 00:04:21,630
our state lists but you require

00:04:19,320 --> 00:04:23,340
Cassandra you require Kafka good car

00:04:21,630 --> 00:04:25,229
elasticsearch and because you provide

00:04:23,340 --> 00:04:27,150
crop Kafka you require zookeeper so

00:04:25,229 --> 00:04:28,080
there is for operationally expensive

00:04:27,150 --> 00:04:29,699
things to run

00:04:28,080 --> 00:04:32,550
in order to have the data storage layer

00:04:29,699 --> 00:04:33,840
behind Vulcan but you gotta keep your

00:04:32,550 --> 00:04:35,099
query language so you've trained up

00:04:33,840 --> 00:04:38,849
Prometheus and now you know how to you

00:04:35,099 --> 00:04:40,710
talkin and finally on the name Vulcan is

00:04:38,849 --> 00:04:42,360
the Roman got a fire and working into

00:04:40,710 --> 00:04:44,909
the forge raised in the ocean

00:04:42,360 --> 00:04:46,650
digitalocean Vulcan was charged with

00:04:44,909 --> 00:04:49,050
crafting the tools and weaponry to be

00:04:46,650 --> 00:04:50,580
used by the gods of Olympus so thank you

00:04:49,050 --> 00:04:52,849
Prometheus for giving us the fire in the

00:04:50,580 --> 00:04:52,849

YouTube URL: https://www.youtube.com/watch?v=r6N5-1Jyifk


