Title: PromCon 2016: So You Want to Write an Exporter - Brian Brazil
Publication date: 2016-09-04
Playlist: PromCon 2016
Description: 
	* Abstract:

In the glorious future, cancer will be cured, world hunger will solved and all because everything was directly instrumented for Prometheus. Until then however, we need to write exporters. This talk will look at how to go about this and all the tradeoffs involved in writing a good exporter.

* Speaker biography:

Brian Brazil is a core developer of Prometheus and the founder of Robust Perception. He works across the ecosystem, and is involved in areas such as best practices, exporters, PromQL semantics and client libraries. He is the main writer of the Reliable Insights blog, which regularly covers Prometheus topics.

* Slides:

http://www.slideshare.net/brianbrazil/so-you-want-to-write-an-exporter

* PromCon website:

https://promcon.io/
Captions: 
	00:00:00,030 --> 00:00:07,589
all right so the man who needs no

00:00:04,140 --> 00:00:10,740
introduction the master of metrics with

00:00:07,589 --> 00:00:13,940
two PhD in time serious instrumentation

00:00:10,740 --> 00:00:18,090
and a Nobel Prize in improving that

00:00:13,940 --> 00:00:20,910
languages are Turing complete I give you

00:00:18,090 --> 00:00:34,230
a brine brasil telling you how to write

00:00:20,910 --> 00:00:38,239
an exporter so yes I knew now must write

00:00:34,230 --> 00:00:42,750
an exporter so we know all this already

00:00:38,239 --> 00:00:44,430
don't be a test so if you're raising

00:00:42,750 --> 00:00:47,039
four medias all you're meant to do is

00:00:44,430 --> 00:00:48,510
directly instrument your code using the

00:00:47,039 --> 00:00:51,600
client library directly without wrapping

00:00:48,510 --> 00:00:53,370
it and it was then you can get kind of

00:00:51,600 --> 00:00:56,160
intrusive you threw out your stack and

00:00:53,370 --> 00:00:58,559
see everything well in reality you know

00:00:56,160 --> 00:01:00,930
theory and practice interior the same in

00:00:58,559 --> 00:01:02,940
practice they aren't and because we have

00:01:00,930 --> 00:01:05,760
the exporters now there are a small

00:01:02,940 --> 00:01:07,590
number I think it's about ten things out

00:01:05,760 --> 00:01:10,040
there that directly exposed from reduced

00:01:07,590 --> 00:01:13,350
metrics like etc tea kubernetes

00:01:10,040 --> 00:01:16,140
robustirc and but today most things

00:01:13,350 --> 00:01:18,840
don't that's just the fact of life we

00:01:16,140 --> 00:01:20,909
have to deal with and but a lot of

00:01:18,840 --> 00:01:23,280
applications exposed metrics in a myriad

00:01:20,909 --> 00:01:26,970
of formats and the consistencies between

00:01:23,280 --> 00:01:28,950
them don't exist like maybe they're

00:01:26,970 --> 00:01:31,229
using JSON like we asked shave a regular

00:01:28,950 --> 00:01:34,439
question time for Metis except JSON it's

00:01:31,229 --> 00:01:36,799
like yes can you accept this piece of

00:01:34,439 --> 00:01:39,240
text I've written in the Latin alphabet

00:01:36,799 --> 00:01:42,770
it's like well I know the Latin alphabet

00:01:39,240 --> 00:01:45,420
but no idea what language you're using

00:01:42,770 --> 00:01:47,790
so in reality what we need is a custom

00:01:45,420 --> 00:01:49,350
bit of code in all cases to convert this

00:01:47,790 --> 00:01:51,720
into something that makes sense to her

00:01:49,350 --> 00:01:53,130
atheists and makes sense to us as human

00:01:51,720 --> 00:01:57,090
operators using the system I'm using

00:01:53,130 --> 00:01:58,829
from pol because what exporters are is

00:01:57,090 --> 00:02:01,979
in a principle Prometheus will be going

00:01:58,829 --> 00:02:03,060
direct to the code and then exporter

00:02:01,979 --> 00:02:05,840
kind of just sits in the middle as a

00:02:03,060 --> 00:02:08,819
middleman and just takes in their scrape

00:02:05,840 --> 00:02:10,920
sends it on processes it and sends it

00:02:08,819 --> 00:02:13,590
back again that's what it's doing it's

00:02:10,920 --> 00:02:14,819
just a simple idea because

00:02:13,590 --> 00:02:17,190
the no threat the instrument of binary

00:02:14,819 --> 00:02:21,540
doesn't have a stash metrics or if it

00:02:17,190 --> 00:02:23,970
does it's probably in JSON and the thing

00:02:21,540 --> 00:02:25,800
is that because of that we want exporter

00:02:23,970 --> 00:02:28,739
to look as much as possible like a

00:02:25,800 --> 00:02:30,630
directly instrumented app so this means

00:02:28,739 --> 00:02:33,510
that Prometheus is what takes care of

00:02:30,630 --> 00:02:34,739
service discovery and scheduling that

00:02:33,510 --> 00:02:36,769
means that exporter shouldn't have any

00:02:34,739 --> 00:02:39,180
logic to figure out where teams are

00:02:36,769 --> 00:02:40,739
Prometheus figures it out from console

00:02:39,180 --> 00:02:42,780
or ec2 order for your using

00:02:40,739 --> 00:02:45,450
similarly Prometheus decides when the

00:02:42,780 --> 00:02:47,280
scrapes happen because view using

00:02:45,450 --> 00:02:49,410
horizontal monitoring or people on two

00:02:47,280 --> 00:02:52,500
different things that means to all come

00:02:49,410 --> 00:02:54,750
from Prometheus so a radius exporter

00:02:52,500 --> 00:02:56,489
should just act stateless Lee it takes

00:02:54,750 --> 00:02:59,700
in a scrape does something shucks it

00:02:56,489 --> 00:03:00,959
with the other end no station and it's

00:02:59,700 --> 00:03:02,970
also means an exporter only talks to one

00:03:00,959 --> 00:03:05,040
instance of an app except for the weird

00:03:02,970 --> 00:03:07,040
stuff and which is the SNMP and black

00:03:05,040 --> 00:03:10,590
box this border border which I wrote

00:03:07,040 --> 00:03:12,690
because yo you run exporter directly

00:03:10,590 --> 00:03:15,390
what size it's running directly beside

00:03:12,690 --> 00:03:18,359
what is monitoring so well yeah running

00:03:15,390 --> 00:03:21,299
the node exporter on a switch that's

00:03:18,359 --> 00:03:23,160
really going to work edge so that's why

00:03:21,299 --> 00:03:24,359
the SNMP exporter and the black box this

00:03:23,160 --> 00:03:26,840
port yeah I want to wonder if the if

00:03:24,359 --> 00:03:29,459
this VIP is working this virtual IP

00:03:26,840 --> 00:03:31,590
where exactly I run a bit of go code

00:03:29,459 --> 00:03:33,060
there so that's why those are like this

00:03:31,590 --> 00:03:35,609
the other one will probably end up with

00:03:33,060 --> 00:03:37,799
ipmi there's also weird because you guys

00:03:35,609 --> 00:03:39,120
suppose hosts and promotion and the

00:03:37,799 --> 00:03:40,890
everything's well exporters do not use

00:03:39,120 --> 00:03:42,000
the push gateway and they should not

00:03:40,890 --> 00:03:43,380
crash queries and that's a really

00:03:42,000 --> 00:03:45,750
expensive like the push gateway is for

00:03:43,380 --> 00:03:46,739
batch jobs exporters are not batch jobs

00:03:45,750 --> 00:03:47,720
is your modest thing that's running

00:03:46,739 --> 00:03:49,889
right now

00:03:47,720 --> 00:03:53,730
similarly for using the textile

00:03:49,889 --> 00:03:54,959
collector and the thing is that direct

00:03:53,730 --> 00:03:58,200
instrumentation when you're doing it

00:03:54,959 --> 00:04:00,329
there's a set of rules and you know

00:03:58,200 --> 00:04:02,069
their guidelines and the tens things

00:04:00,329 --> 00:04:05,400
tend to be very very black and white as

00:04:02,069 --> 00:04:07,650
to what's correct and what's not naming

00:04:05,400 --> 00:04:09,870
metrics is still a bit more of an arched

00:04:07,650 --> 00:04:11,760
and the science but there are some rules

00:04:09,870 --> 00:04:13,620
you should be following and if you don't

00:04:11,760 --> 00:04:17,430
follow them I can't stop you but I will

00:04:13,620 --> 00:04:19,200
be very disappointed exporters on the

00:04:17,430 --> 00:04:21,389
other hand are trade offs everything's a

00:04:19,200 --> 00:04:23,849
trade-off because it's not this

00:04:21,389 --> 00:04:25,800
greenfield site where I can side yes I

00:04:23,849 --> 00:04:27,080
have decided my metrics naming seem I'm

00:04:25,800 --> 00:04:30,319
going to follow all the rules

00:04:27,080 --> 00:04:33,289
instead of yes some 110 years ago in a

00:04:30,319 --> 00:04:35,479
magic Ray's added some metrics and I

00:04:33,289 --> 00:04:37,849
want to figure out what they mean and

00:04:35,479 --> 00:04:38,539
translate into radius and just ten

00:04:37,849 --> 00:04:42,050
thousand of them

00:04:38,539 --> 00:04:44,419
what am I going to do wash how do I

00:04:42,050 --> 00:04:46,430
interpret all this so you need to decide

00:04:44,419 --> 00:04:49,219
are you going to go for each of those

00:04:46,430 --> 00:04:50,389
ten thousand metrics else the worst ones

00:04:49,219 --> 00:04:52,490
we have we're about a thousand to be

00:04:50,389 --> 00:04:55,310
honest not ten thousand I'm going to do

00:04:52,490 --> 00:04:57,770
each of those individually and handcraft

00:04:55,310 --> 00:05:00,289
the most perfect explore forever you

00:04:57,770 --> 00:05:01,699
know the most fine I score her ever and

00:05:00,289 --> 00:05:03,020
spend all the maintenance effort when

00:05:01,699 --> 00:05:05,840
the next version comes out and

00:05:03,020 --> 00:05:07,599
everything changes and or you just go

00:05:05,840 --> 00:05:09,919
yeah I'm just gonna take all the flash

00:05:07,599 --> 00:05:11,449
sanitize it so the metric names are

00:05:09,919 --> 00:05:13,219
valid and check it at the other side and

00:05:11,449 --> 00:05:14,960
never have to touch that again and

00:05:13,219 --> 00:05:16,699
that's the sort of trade-off you're

00:05:14,960 --> 00:05:18,620
making it's like do I get it perfect and

00:05:16,699 --> 00:05:20,300
follow all the rules perfectly like I

00:05:18,620 --> 00:05:22,190
will try to do for the recommendation or

00:05:20,300 --> 00:05:23,509
do I just go for something simpler

00:05:22,190 --> 00:05:25,039
because it's lower maintenance in the

00:05:23,509 --> 00:05:26,949
long run and you have to make that

00:05:25,039 --> 00:05:28,699
trade-off of your engineering time and

00:05:26,949 --> 00:05:32,569
versus then the people who are going to

00:05:28,699 --> 00:05:33,949
be using this Explorer so we're gonna

00:05:32,569 --> 00:05:34,909
start off then with various parts so

00:05:33,949 --> 00:05:35,840
this this stuff

00:05:34,909 --> 00:05:39,110
they also applies to direct

00:05:35,840 --> 00:05:41,210
instrumentation and because almost all

00:05:39,110 --> 00:05:43,129
the same rules it's just it just leeway

00:05:41,210 --> 00:05:44,810
when it comes to exporters so to start

00:05:43,129 --> 00:05:48,949
off with when you're naming metrics

00:05:44,810 --> 00:05:57,830
requests they can see that's that's it's

00:05:48,949 --> 00:06:00,620
a number it's seven yeah be Piko seconds

00:05:57,830 --> 00:06:03,110
ten two seconds nanoseconds microseconds

00:06:00,620 --> 00:06:05,599
milliseconds seconds hours days or

00:06:03,110 --> 00:06:08,029
months because I have seen requests in

00:06:05,599 --> 00:06:10,900
all those orders of magnitude an RPC

00:06:08,029 --> 00:06:13,310
system the same or PC system to be clear

00:06:10,900 --> 00:06:16,849
so you kinda need to have a unit on

00:06:13,310 --> 00:06:18,349
there so pressure is put in the unit so

00:06:16,849 --> 00:06:20,089
anytime you've appeared he's metric

00:06:18,349 --> 00:06:21,830
putting the unit so everyone knows

00:06:20,089 --> 00:06:25,009
what's going on and the best case is

00:06:21,830 --> 00:06:26,509
that we standardize on seconds on bytes

00:06:25,009 --> 00:06:30,050
on Tim utter teens that don't have

00:06:26,509 --> 00:06:32,900
prefixes because we need to standardize

00:06:30,050 --> 00:06:35,380
on something like I used to the case

00:06:32,900 --> 00:06:37,699
actually the Prometheus was exporting

00:06:35,380 --> 00:06:41,210
nanoseconds microseconds milliseconds

00:06:37,699 --> 00:06:42,530
and seconds these days is just as

00:06:41,210 --> 00:06:44,810
four seconds in seconds and we'll be

00:06:42,530 --> 00:06:46,520
fixing the microseconds but you can

00:06:44,810 --> 00:06:48,919
imagine that situation if multiple

00:06:46,520 --> 00:06:51,430
people are writing libraries and each of

00:06:48,919 --> 00:06:54,860
them uses a different unit good look

00:06:51,430 --> 00:06:56,569
instead let's just use seconds and you

00:06:54,860 --> 00:06:58,639
can just tell refining its seconds and

00:06:56,569 --> 00:07:01,190
it'll scale up or down based upon wha

00:06:58,639 --> 00:07:02,750
your dagger magnitude number is because

00:07:01,190 --> 00:07:05,770
this playing Nash is the display level

00:07:02,750 --> 00:07:08,690
problem so let's leave that to profound

00:07:05,770 --> 00:07:10,759
in any case if it isn't practical in an

00:07:08,690 --> 00:07:14,599
exporter just make sure you put in the

00:07:10,759 --> 00:07:16,240
unit if you can secondly named stasis so

00:07:14,599 --> 00:07:18,830
we have our rehearsal agency seconds

00:07:16,240 --> 00:07:20,509
that's actually a pretty useless metric

00:07:18,830 --> 00:07:22,849
name still it's a request

00:07:20,509 --> 00:07:25,070
what sort of request already asking for

00:07:22,849 --> 00:07:27,590
cake are they asking at a severe request

00:07:25,070 --> 00:07:29,840
you know is a DNS request where they

00:07:27,590 --> 00:07:32,090
arose Malick's you know the Russell

00:07:29,840 --> 00:07:34,580
format so great it's HTTP request

00:07:32,090 --> 00:07:36,680
so what sort of HP request maybe they've

00:07:34,580 --> 00:07:38,840
got a chain of 15 different types of

00:07:36,680 --> 00:07:41,599
middleware and that HT request comes in

00:07:38,840 --> 00:07:44,750
one side goes out the other where is

00:07:41,599 --> 00:07:47,150
that so you kind of want to give more

00:07:44,750 --> 00:07:49,400
information like an HTTP server request

00:07:47,150 --> 00:07:51,770
then I would assume that okay when it

00:07:49,400 --> 00:07:55,159
hits an HTTP server which is after all

00:07:51,770 --> 00:07:57,409
the TCP handling then that's where I'm

00:07:55,159 --> 00:08:00,020
measuring from so what you kind of want

00:07:57,409 --> 00:08:02,330
to do and this is a bit of an art more

00:08:00,020 --> 00:08:05,960
than a science is you want to get it

00:08:02,330 --> 00:08:07,849
that someone who once in a rumor heard

00:08:05,960 --> 00:08:09,199
about your system and that's all they

00:08:07,849 --> 00:08:12,710
know of us like they might know the name

00:08:09,199 --> 00:08:14,750
maybe they can from the metric name have

00:08:12,710 --> 00:08:16,669
a good guess as to what it means

00:08:14,750 --> 00:08:18,770
like that's a standard were setting here

00:08:16,669 --> 00:08:20,360
- you can imagine as someone who's never

00:08:18,770 --> 00:08:22,430
heard of your library but sees this

00:08:20,360 --> 00:08:24,259
metric - seems relevance will they have

00:08:22,430 --> 00:08:26,030
a reasonable chance to guess where the

00:08:24,259 --> 00:08:27,860
kind of does and that's the sort of

00:08:26,030 --> 00:08:30,020
thing to keep in mind because it's sure

00:08:27,860 --> 00:08:31,909
yes you can remember it you'll forget

00:08:30,020 --> 00:08:33,770
about six months you know but you need

00:08:31,909 --> 00:08:36,800
to think about the same way like you're

00:08:33,770 --> 00:08:38,959
right pearl it's like yes you understand

00:08:36,800 --> 00:08:39,409
it today you kind of understand it

00:08:38,959 --> 00:08:44,089
tomorrow

00:08:39,409 --> 00:08:45,380
in six months time yeah so the thing if

00:08:44,089 --> 00:08:46,970
that's where things like will I be able

00:08:45,380 --> 00:08:49,100
to guess what's going on and the other

00:08:46,970 --> 00:08:50,420
thing as well it can be tempting I know

00:08:49,100 --> 00:08:52,190
a few companies have fallen into the

00:08:50,420 --> 00:08:53,870
trap of they put the application name

00:08:52,190 --> 00:08:54,710
for the representation and prefix

00:08:53,870 --> 00:08:56,240
everything

00:08:54,710 --> 00:08:59,060
not served without an application name

00:08:56,240 --> 00:09:01,280
don't do - a metric name comes from a

00:08:59,060 --> 00:09:03,290
library so this might be DNS server

00:09:01,280 --> 00:09:05,780
request latency comes from a DNS library

00:09:03,290 --> 00:09:08,180
or the example in IRC like 40 minutes

00:09:05,780 --> 00:09:10,340
ago finagle server requests magazine

00:09:08,180 --> 00:09:11,360
it's just the name of the library the

00:09:10,340 --> 00:09:12,620
library might happen to be your

00:09:11,360 --> 00:09:14,420
application because you're in the main

00:09:12,620 --> 00:09:16,430
function or its equivalent but that's

00:09:14,420 --> 00:09:17,960
the time the naming comes because the

00:09:16,430 --> 00:09:20,840
job label is how you distinguish your

00:09:17,960 --> 00:09:23,680
different server types and then does the

00:09:20,840 --> 00:09:26,150
other question yeah it's still not right

00:09:23,680 --> 00:09:26,900
this is calculating stings on the client

00:09:26,150 --> 00:09:29,240
now

00:09:26,900 --> 00:09:30,530
we writing exporters in many cases you

00:09:29,240 --> 00:09:33,020
have to put up with this because this is

00:09:30,530 --> 00:09:34,520
all you have so for example if you're

00:09:33,020 --> 00:09:36,320
using drop Wizard metrics this is what

00:09:34,520 --> 00:09:38,450
it gives you if I've seen more

00:09:36,320 --> 00:09:40,970
complicated than that but if possible

00:09:38,450 --> 00:09:43,010
and if the data is exposed get us count

00:09:40,970 --> 00:09:44,660
in a sum so the Prometheus can do the

00:09:43,010 --> 00:09:45,920
calculation because the principal of

00:09:44,660 --> 00:09:47,360
Prometheus is basically the only thing

00:09:45,920 --> 00:09:50,270
we do inside pliant libraries is

00:09:47,360 --> 00:09:51,740
addition and everything else has had in

00:09:50,270 --> 00:09:53,300
Prometheus all the rate calculations

00:09:51,740 --> 00:09:54,760
because this is much more powerful

00:09:53,300 --> 00:09:57,170
that's much better for aggregation

00:09:54,760 --> 00:09:58,850
because you catch averaged out across

00:09:57,170 --> 00:10:00,290
servers because you need to weight it by

00:09:58,850 --> 00:10:03,020
the limit requests you don't have

00:10:00,290 --> 00:10:05,810
information but you can do here so if it

00:10:03,020 --> 00:10:07,430
ever possible you have raw data expose

00:10:05,810 --> 00:10:11,660
it to a Mattias so we can do the proper

00:10:07,430 --> 00:10:14,510
math or ratios and this one I have to

00:10:11,660 --> 00:10:16,340
appoint a so ratio is the base unit as a

00:10:14,510 --> 00:10:18,560
percentage of the percent sent means

00:10:16,340 --> 00:10:20,960
hundred and this I need to point out as

00:10:18,560 --> 00:10:23,210
well somewhere between 30 and 40 percent

00:10:20,960 --> 00:10:27,200
of metrics there explosions with the

00:10:23,210 --> 00:10:29,570
named percentage are actually ratios as

00:10:27,200 --> 00:10:32,120
a reminder ratios typically go from the

00:10:29,570 --> 00:10:34,730
off to one percentages go through not to

00:10:32,120 --> 00:10:36,200
a hundred now not always the obvious

00:10:34,730 --> 00:10:37,730
even have things outside those balance

00:10:36,200 --> 00:10:40,460
in fact was one example and talked

00:10:37,730 --> 00:10:42,950
yesterday of a something called

00:10:40,460 --> 00:10:45,590
percentage that went from nought to 1 so

00:10:42,950 --> 00:10:48,080
this is very common be very careful when

00:10:45,590 --> 00:10:50,660
looking at any exporter which has

00:10:48,080 --> 00:10:52,210
something called a percentage and even

00:10:50,660 --> 00:10:54,560
better if you can get the raw data

00:10:52,210 --> 00:10:57,710
always good to get reward at up so a

00:10:54,560 --> 00:11:00,590
common one you see is disk used in

00:10:57,710 --> 00:11:02,270
memory used because well can we actually

00:11:00,590 --> 00:11:04,520
get the total disk space in the free

00:11:02,270 --> 00:11:06,500
disk space and then divide but all this

00:11:04,520 --> 00:11:08,030
check isn't actually a percentage or

00:11:06,500 --> 00:11:10,970
isn't actually a ratio because

00:11:08,030 --> 00:11:13,850
people commonly get this wrong so that's

00:11:10,970 --> 00:11:15,680
a common gotcha unfortunately and as the

00:11:13,850 --> 00:11:17,840
other team of suffixes so in Prometheus

00:11:15,680 --> 00:11:19,640
we have some conventions some are

00:11:17,840 --> 00:11:22,610
enforced by the client libraries will he

00:11:19,640 --> 00:11:25,160
care them for you some arch so total is

00:11:22,610 --> 00:11:28,570
the convention for counter anything

00:11:25,160 --> 00:11:28,570
would underscore total is a counter

00:11:28,630 --> 00:11:32,930
gauges should not end up with underscore

00:11:30,950 --> 00:11:34,640
total this is actually fairly common for

00:11:32,930 --> 00:11:35,750
some reason same underscore count seems

00:11:34,640 --> 00:11:38,270
to be a commenting because yes it's

00:11:35,750 --> 00:11:39,140
account for something yes all gauges are

00:11:38,270 --> 00:11:42,320
account or something

00:11:39,140 --> 00:11:44,360
this adds no semantic meaning and but

00:11:42,320 --> 00:11:46,000
what it does do is confuse us which as

00:11:44,360 --> 00:11:47,270
some reason histograms Jevon unders

00:11:46,000 --> 00:11:49,160
understand

00:11:47,270 --> 00:11:51,080
suffix also there's an underscore some

00:11:49,160 --> 00:11:53,000
as well in summary and histogram and the

00:11:51,080 --> 00:11:54,440
other one is underscore puckish you're

00:11:53,000 --> 00:11:57,170
unlikely to run into that one because

00:11:54,440 --> 00:11:58,730
that's no one uses that it's just what a

00:11:57,170 --> 00:12:00,890
histogram uses it's unlikely of an

00:11:58,730 --> 00:12:03,140
arranged wish and yet gauges have no

00:12:00,890 --> 00:12:04,250
suffixes use total if the counter if

00:12:03,140 --> 00:12:09,260
you're emulating somewhere your

00:12:04,250 --> 00:12:11,990
histogram counting someone the other one

00:12:09,260 --> 00:12:14,720
is that and this is pretty common to a

00:12:11,990 --> 00:12:16,790
trade off sometimes you know you'll have

00:12:14,720 --> 00:12:18,470
a big longest electrics I'm gonna take

00:12:16,790 --> 00:12:20,270
the example of my sequel and your own

00:12:18,470 --> 00:12:24,230
show global status I'm a sequel has a

00:12:20,270 --> 00:12:27,050
big long list of 497 entries as of the

00:12:24,230 --> 00:12:28,790
latest release and you can see these two

00:12:27,050 --> 00:12:30,220
items here the treads created in the

00:12:28,790 --> 00:12:33,770
threads running is just two of them

00:12:30,220 --> 00:12:37,190
treads created that's the counter treads

00:12:33,770 --> 00:12:38,810
running is the age so you know you could

00:12:37,190 --> 00:12:41,060
go through those by hand and these

00:12:38,810 --> 00:12:42,080
change with every release usually back

00:12:41,060 --> 00:12:44,210
in a back row staccato fashion

00:12:42,080 --> 00:12:45,590
thankfully and classified them by hand

00:12:44,210 --> 00:12:49,040
and get the right type and add in

00:12:45,590 --> 00:12:50,360
underscore total or you could value your

00:12:49,040 --> 00:12:53,210
life and just chuck them at the other

00:12:50,360 --> 00:12:54,830
end maybe lower casement but this is a

00:12:53,210 --> 00:12:56,450
trade off you have to make I think to my

00:12:54,830 --> 00:12:58,430
CV exporter actually started off doing

00:12:56,450 --> 00:13:00,020
everything by hand and at some point is

00:12:58,430 --> 00:13:01,370
switched over to know we're just

00:13:00,020 --> 00:13:02,540
chucking the mesh but it's going to

00:13:01,370 --> 00:13:04,820
sanitize them and shock them at the

00:13:02,540 --> 00:13:06,380
other side and not care so those are

00:13:04,820 --> 00:13:07,970
sort of trade offs you need to make easy

00:13:06,380 --> 00:13:09,680
to work to your time like if there's

00:13:07,970 --> 00:13:11,030
only 10 or 20 of them getting them

00:13:09,680 --> 00:13:12,410
perfect like to say the HD proxy

00:13:11,030 --> 00:13:14,480
exporter that's fine

00:13:12,410 --> 00:13:16,100
didn't don't grow too often there's not

00:13:14,480 --> 00:13:18,500
too many of them you know it's nice and

00:13:16,100 --> 00:13:21,920
stable my sequel that 497 in a year's

00:13:18,500 --> 00:13:23,420
time is probably gonna be 600 it's just

00:13:21,920 --> 00:13:27,889
practical to do that unless you have a

00:13:23,420 --> 00:13:28,339
lot of spare time as I said do not still

00:13:27,889 --> 00:13:30,010
match

00:13:28,339 --> 00:13:32,899
I'm the little and Prometheus sighs

00:13:30,010 --> 00:13:34,399
another anti pattern I see sometimes in

00:13:32,899 --> 00:13:36,050
the labels of a metric you see if you'll

00:13:34,399 --> 00:13:39,560
be putting an underscore by type or

00:13:36,050 --> 00:13:41,720
things like that and that's not a good

00:13:39,560 --> 00:13:44,209
idea because b of the tinkle aggregation

00:13:41,720 --> 00:13:47,360
and if someone aggregates away is hype

00:13:44,209 --> 00:13:48,440
label this is now confusing because you

00:13:47,360 --> 00:13:50,959
have a metric name if you're following

00:13:48,440 --> 00:13:53,180
the schemes that those doesn't have it

00:13:50,959 --> 00:13:56,389
that has the word type in it but isn't

00:13:53,180 --> 00:13:58,550
broken out by type so avoid doing this

00:13:56,389 --> 00:14:00,110
and there is one case for it's okay

00:13:58,550 --> 00:14:02,209
should say if you read the full doc will

00:14:00,110 --> 00:14:05,199
see it a snake case is our standard

00:14:02,209 --> 00:14:08,540
infirmities converging however

00:14:05,199 --> 00:14:12,709
automatically from camel case is not

00:14:08,540 --> 00:14:14,510
safe there are cases like I know we came

00:14:12,709 --> 00:14:17,170
across moment cloud watch because we do

00:14:14,510 --> 00:14:19,250
also good work - and where you get

00:14:17,170 --> 00:14:22,730
initialisms like things are all capitals

00:14:19,250 --> 00:14:25,850
that tends to break anything that does

00:14:22,730 --> 00:14:29,810
that like I think TCP up you might end

00:14:25,850 --> 00:14:32,000
up with TCP you underscore P if you were

00:14:29,810 --> 00:14:34,190
to do that naively so that's the sort of

00:14:32,000 --> 00:14:35,570
thing if you look out for if things are

00:14:34,190 --> 00:14:38,690
sufficiently constrained and you can

00:14:35,570 --> 00:14:41,240
converse you do but don't feel obliged

00:14:38,690 --> 00:14:42,470
to I'm doing an export actually convert

00:14:41,240 --> 00:14:44,540
those so this is all of our trade offs

00:14:42,470 --> 00:14:46,910
and notice the processing script

00:14:44,540 --> 00:14:48,640
prefixes are actually there at least by

00:14:46,910 --> 00:14:51,380
convention reserves and permittees

00:14:48,640 --> 00:14:53,990
scrape is used by Prometheus itself so

00:14:51,380 --> 00:14:56,750
everyone knows but up right which is a

00:14:53,990 --> 00:14:58,449
special variable which everyone uses a

00:14:56,750 --> 00:15:00,140
lost so we gave it a short date

00:14:58,449 --> 00:15:02,390
technically it should be scraped

00:15:00,140 --> 00:15:04,130
underscore up at the moment there's only

00:15:02,390 --> 00:15:06,589
one other such metric which is called

00:15:04,130 --> 00:15:08,690
scrape duration seconds which will tell

00:15:06,589 --> 00:15:11,120
you how long Prometheus took to scrape

00:15:08,690 --> 00:15:12,920
something so if you have server that's

00:15:11,120 --> 00:15:15,260
slow and you don't trust this numbers

00:15:12,920 --> 00:15:18,110
check scrape duration seconds if it's

00:15:15,260 --> 00:15:20,149
just gone up it's run out of CPU because

00:15:18,110 --> 00:15:22,459
sometimes just can't trust the CPU stats

00:15:20,149 --> 00:15:24,410
and this also works for timeouts and so

00:15:22,459 --> 00:15:26,180
inicio it's been getting slower it's

00:15:24,410 --> 00:15:29,149
kind of the second order way to spots

00:15:26,180 --> 00:15:30,920
notice in your servers and process these

00:15:29,149 --> 00:15:32,300
are actually two standard exports so

00:15:30,920 --> 00:15:34,250
these we try to get to consistent across

00:15:32,300 --> 00:15:35,810
all client libraries so that's the

00:15:34,250 --> 00:15:38,060
memory CPU

00:15:35,810 --> 00:15:39,830
follow the scriptures and those are

00:15:38,060 --> 00:15:41,810
standard across client libraries are

00:15:39,830 --> 00:15:43,130
standard as we can get them so if you

00:15:41,810 --> 00:15:44,480
want to add more stuff there we have to

00:15:43,130 --> 00:15:46,700
add it on the list so everyone knows

00:15:44,480 --> 00:15:48,350
exactly the semantics of DOS because the

00:15:46,700 --> 00:15:50,779
principle is if you have a metric name

00:15:48,350 --> 00:15:52,730
like anywhere like these should globally

00:15:50,779 --> 00:15:55,880
be defined as what that metric name

00:15:52,730 --> 00:15:58,070
means so process CPU seconds means the

00:15:55,880 --> 00:16:00,260
total plus the CPU time of the process

00:15:58,070 --> 00:16:02,390
in seconds that's the same it's a new

00:16:00,260 --> 00:16:03,440
system times user time and hopefully we

00:16:02,390 --> 00:16:05,420
can have that all standardized and

00:16:03,440 --> 00:16:07,130
Windows as well and that's the sort of

00:16:05,420 --> 00:16:08,810
standardization we're looking but it

00:16:07,130 --> 00:16:11,210
takes a lot of work for - it actually

00:16:08,810 --> 00:16:12,320
work because memory semantics aren't the

00:16:11,210 --> 00:16:14,750
same across operating systems like

00:16:12,320 --> 00:16:18,800
Windows is handles knocked out rivers

00:16:14,750 --> 00:16:21,529
how do we handle that and then the big

00:16:18,800 --> 00:16:23,120
question it always comes up is labels so

00:16:21,529 --> 00:16:24,980
general rule is if you see something

00:16:23,120 --> 00:16:27,020
that should be in label yeah push it in

00:16:24,980 --> 00:16:29,000
label but you need to be careful there

00:16:27,020 --> 00:16:32,270
is lots of things that look like they

00:16:29,000 --> 00:16:33,740
should be labels but don't arch we

00:16:32,270 --> 00:16:34,910
actually had this a few times actually

00:16:33,740 --> 00:16:37,210
think there's an actual case we cannot

00:16:34,910 --> 00:16:38,450
push does not i'm francielle there's a

00:16:37,210 --> 00:16:41,000
metric called

00:16:38,450 --> 00:16:43,130
already be a buffer pool pages data and

00:16:41,000 --> 00:16:45,530
I think when the pull request first came

00:16:43,130 --> 00:16:48,020
in and this is from memory now it could

00:16:45,530 --> 00:16:51,560
be wrong this here was all made

00:16:48,020 --> 00:16:54,490
into a label the characters another like

00:16:51,560 --> 00:16:57,080
40 different items under energy D buffer

00:16:54,490 --> 00:16:59,360
so those are utterly unrelated it makes

00:16:57,080 --> 00:17:03,110
no sense to me to label but these aren't

00:16:59,360 --> 00:17:06,679
actually safe to make as a as a as

00:17:03,110 --> 00:17:08,569
labels either because the thing is that

00:17:06,679 --> 00:17:10,429
what you want is if you have a label

00:17:08,569 --> 00:17:11,630
breaking something out it should be a

00:17:10,429 --> 00:17:14,240
partition over to space

00:17:11,630 --> 00:17:18,589
they shouldn't overlap and some of these

00:17:14,240 --> 00:17:21,290
in particular data is a total of

00:17:18,589 --> 00:17:23,540
everything so you're double counting if

00:17:21,290 --> 00:17:24,770
you include these as well so that's the

00:17:23,540 --> 00:17:25,970
sort of thing you have to look really

00:17:24,770 --> 00:17:28,520
read really carefully in the

00:17:25,970 --> 00:17:29,990
documentation and see does it make sense

00:17:28,520 --> 00:17:32,720
to real label or do we have to put up

00:17:29,990 --> 00:17:34,610
with it and doing it by hand so like a B

00:17:32,720 --> 00:17:37,580
and C is fine but if you've got a church

00:17:34,610 --> 00:17:38,870
label which works out to be D plus a you

00:17:37,580 --> 00:17:41,690
can't do that because that's not a

00:17:38,870 --> 00:17:44,330
partition they're not exclusive the

00:17:41,690 --> 00:17:46,070
general rule of thumb is a metric it

00:17:44,330 --> 00:17:49,070
should have a meaning if you take a sum

00:17:46,070 --> 00:17:49,610
across all over an average across all it

00:17:49,070 --> 00:17:52,280
doesn't have

00:17:49,610 --> 00:17:53,270
very useful it just has to be meaning so

00:17:52,280 --> 00:17:55,220
other things you've to worry about you

00:17:53,270 --> 00:17:57,230
think to have an actual use cases so you

00:17:55,220 --> 00:17:59,540
see sometimes from other metric systems

00:17:57,230 --> 00:18:01,040
that their way of handling totals is

00:17:59,540 --> 00:18:04,190
that they'll have a label called total

00:18:01,040 --> 00:18:05,900
or however like that which is a problem

00:18:04,190 --> 00:18:08,330
because if someone in aggregates all

00:18:05,900 --> 00:18:10,610
this the rants will be twice as big as

00:18:08,330 --> 00:18:12,320
if multiple labels of the labels that

00:18:10,610 --> 00:18:15,320
could end up being four or eight times

00:18:12,320 --> 00:18:18,470
as big similarly another one you see is

00:18:15,320 --> 00:18:20,840
no label which causes the exact same

00:18:18,470 --> 00:18:22,610
problem just please do not do this one

00:18:20,840 --> 00:18:24,770
rule of instrumentation Prometheus is

00:18:22,610 --> 00:18:27,760
any given metric should always have the

00:18:24,770 --> 00:18:30,740
same label on every single time service

00:18:27,760 --> 00:18:32,690
it's very rare that you where should we

00:18:30,740 --> 00:18:35,270
breaking that rule normally when you're

00:18:32,690 --> 00:18:37,610
doing weird weird data I think we do it

00:18:35,270 --> 00:18:39,370
in the interrupts for analytics for sure

00:18:37,610 --> 00:18:41,600
I mean really need to go fix stuff

00:18:39,370 --> 00:18:43,820
because it's just a weird weird piece of

00:18:41,600 --> 00:18:46,520
data to work with sometimes you just

00:18:43,820 --> 00:18:48,680
have stuff that's so unclear and

00:18:46,520 --> 00:18:52,520
unstructured that you kind of like

00:18:48,680 --> 00:18:55,370
calendar works and that's one example of

00:18:52,520 --> 00:18:56,960
that there is an exception though we're

00:18:55,370 --> 00:19:00,110
in a previous rule about so an average

00:18:56,960 --> 00:19:01,970
across the metric you can break it and I

00:19:00,110 --> 00:19:04,180
call it the table exception because the

00:19:01,970 --> 00:19:06,440
bat is it's just fundamentally tabular

00:19:04,180 --> 00:19:06,830
so consider harder temperature surfaces

00:19:06,440 --> 00:19:08,330
right

00:19:06,830 --> 00:19:11,810
you cannot summer average temperatures

00:19:08,330 --> 00:19:14,810
that makes no sense physically Jules is

00:19:11,810 --> 00:19:18,140
why even some Irish so but there's

00:19:14,810 --> 00:19:20,120
hundreds of types so having that of the

00:19:18,140 --> 00:19:21,560
metric name each wouldn't make sense see

00:19:20,120 --> 00:19:23,570
I just end up one big metric with

00:19:21,560 --> 00:19:24,920
adapter and sensor levers just because

00:19:23,570 --> 00:19:26,570
otherwise how are you ever gonna create

00:19:24,920 --> 00:19:28,520
dashboards on that cuz you don't no idea

00:19:26,570 --> 00:19:31,040
what hardware is sitting in each of your

00:19:28,520 --> 00:19:33,140
machines now you even imagine that

00:19:31,040 --> 00:19:35,210
voltages could end up inside here as

00:19:33,140 --> 00:19:37,760
well depending on how that stuff sex

00:19:35,210 --> 00:19:39,830
moreish it's in a bit volts and Celsius

00:19:37,760 --> 00:19:40,970
and Simon is a metric but if that's what

00:19:39,830 --> 00:19:43,040
the data is like and you can't

00:19:40,970 --> 00:19:45,800
distinguish in every same way what else

00:19:43,040 --> 00:19:47,600
are you under there at least one person

00:19:45,800 --> 00:19:48,800
they you'll probably only have like ten

00:19:47,600 --> 00:19:51,290
twenty types of hardware and in use

00:19:48,800 --> 00:19:53,890
regex is to fix it fix it up but as an

00:19:51,290 --> 00:19:58,790
exporter you have to support everyone

00:19:53,890 --> 00:20:02,120
another one is failures and caches so if

00:19:58,790 --> 00:20:02,909
you have a success and a failure metric

00:20:02,120 --> 00:20:04,080
that's

00:20:02,909 --> 00:20:05,279
see difficult to deal with because you

00:20:04,080 --> 00:20:08,159
need to add them together to get a total

00:20:05,279 --> 00:20:10,529
nor divide much better to do failures in

00:20:08,159 --> 00:20:12,749
total there's two separate metrics Sony

00:20:10,529 --> 00:20:14,580
for caches do hits and total or misses

00:20:12,749 --> 00:20:16,609
or total or even hits and misses and

00:20:14,580 --> 00:20:19,109
total if you want to cover everything

00:20:16,609 --> 00:20:21,239
do not break out latency metrics by

00:20:19,109 --> 00:20:24,690
success or failure with a label so this

00:20:21,239 --> 00:20:27,029
is actually a problem it's not so

00:20:24,690 --> 00:20:29,159
obvious why well what happens when you

00:20:27,029 --> 00:20:31,679
have latency broken up a success and

00:20:29,159 --> 00:20:35,220
failure is people only graphs success

00:20:31,679 --> 00:20:38,009
and we have to realize that we're humans

00:20:35,220 --> 00:20:40,470
we are cognitively limited in what we do

00:20:38,009 --> 00:20:42,059
especially in emergency and every

00:20:40,470 --> 00:20:43,859
special case you have to measure it a

00:20:42,059 --> 00:20:45,440
member and emergency you know you're

00:20:43,859 --> 00:20:48,210
going to forget them off for about five

00:20:45,440 --> 00:20:49,859
so if you have a graph and you think

00:20:48,210 --> 00:20:51,359
it's your entire latency because normal

00:20:49,859 --> 00:20:54,690
that normally failure rates are at zero

00:20:51,359 --> 00:20:57,389
and then you start having timeouts that

00:20:54,690 --> 00:20:58,710
pull up push up your overall latency put

00:20:57,389 --> 00:20:59,639
your six plus your legacy traffic looks

00:20:58,710 --> 00:21:03,330
fine because you're only looking

00:20:59,639 --> 00:21:05,999
successes so to avoid that situation at

00:21:03,330 --> 00:21:08,429
least in a system where failures are bad

00:21:05,999 --> 00:21:09,509
as this thing from normal you should

00:21:08,429 --> 00:21:11,309
always have your latency across

00:21:09,509 --> 00:21:13,320
everything including failures just to

00:21:11,309 --> 00:21:16,710
avoid that little trap when you're in an

00:21:13,320 --> 00:21:18,450
emergency in general a few other things

00:21:16,710 --> 00:21:20,759
to look out for if you ever feel the

00:21:18,450 --> 00:21:22,559
need to have a label on every single

00:21:20,759 --> 00:21:23,940
metric you're exporting or every Leszek

00:21:22,559 --> 00:21:25,739
from a library that's the same across

00:21:23,940 --> 00:21:28,159
everything that's called the target

00:21:25,739 --> 00:21:31,559
label you add those rename or

00:21:28,159 --> 00:21:33,299
alternatively you use the the most

00:21:31,559 --> 00:21:35,249
recent bug was to have how do you expose

00:21:33,299 --> 00:21:37,169
software versions to Prometheus or the

00:21:35,249 --> 00:21:38,700
Machine roles article there's a way to

00:21:37,169 --> 00:21:40,639
do that as well property if there is

00:21:38,700 --> 00:21:42,509
data that shouldn't be a target able

00:21:40,639 --> 00:21:45,179
label names as I said she'll be

00:21:42,509 --> 00:21:46,649
consistent across everything and there

00:21:45,179 --> 00:21:48,389
are a whole pile of label names you

00:21:46,649 --> 00:21:50,519
should generally try to avoid because of

00:21:48,389 --> 00:21:52,559
the good chance they'll clash as I said

00:21:50,519 --> 00:21:54,720
I talked yesterday if there's clashes in

00:21:52,559 --> 00:21:56,489
some systems then people can't reuse

00:21:54,720 --> 00:21:57,899
dashboards can't reuse rules categories

00:21:56,489 --> 00:22:00,090
alerts because everything's gonna be

00:21:57,899 --> 00:22:00,659
exported underscore so Ellie and

00:22:00,090 --> 00:22:02,190
quantile

00:22:00,659 --> 00:22:04,529
instance and job those are special

00:22:02,190 --> 00:22:08,309
meteors pretty obvious to avoid them

00:22:04,529 --> 00:22:10,440
quite please avoid type as a label name

00:22:08,309 --> 00:22:12,989
it is too generic it tells you nothing

00:22:10,440 --> 00:22:14,399
sometimes it's impossible to avoid but

00:22:12,989 --> 00:22:15,899
about ninety nineteen ninety-five

00:22:14,399 --> 00:22:16,740
percent of the time you can choose a

00:22:15,899 --> 00:22:19,169
better name

00:22:16,740 --> 00:22:20,990
similarly ID and the rest of them are

00:22:19,169 --> 00:22:24,210
just things people are likely to use as

00:22:20,990 --> 00:22:27,450
you know as Tiger tables like data

00:22:24,210 --> 00:22:30,559
center AZ zone region sometimes you kind

00:22:27,450 --> 00:22:32,730
of have to but think about - another one

00:22:30,559 --> 00:22:34,499
Prometheus doesn't like time series that

00:22:32,730 --> 00:22:35,759
appear in disappear particularly the

00:22:34,499 --> 00:22:37,679
things that don't exist and do exist

00:22:35,759 --> 00:22:40,350
they are difficult and annoying to deal

00:22:37,679 --> 00:22:41,700
with so try to avoid them and if you're

00:22:40,350 --> 00:22:45,350
ever unsure whether or not to use a

00:22:41,700 --> 00:22:47,730
label don't know was change the data

00:22:45,350 --> 00:22:49,470
there are also metrics that are exposed

00:22:47,730 --> 00:22:51,779
by lots of things that alright

00:22:49,470 --> 00:22:54,749
statistically useless and should be

00:22:51,779 --> 00:22:56,909
dropped standard deviation min and Max

00:22:54,749 --> 00:22:58,950
are treadle you cannot aggregate

00:22:56,909 --> 00:23:00,629
standard deviations if you want to do

00:22:58,950 --> 00:23:01,919
that incidentally while you do is export

00:23:00,629 --> 00:23:03,149
a sum of squares which you can then take

00:23:01,919 --> 00:23:05,009
a rate who can calculate the actual size

00:23:03,149 --> 00:23:06,389
and combine with a sum and count you can

00:23:05,009 --> 00:23:10,529
actually get the right number min and

00:23:06,389 --> 00:23:11,190
max what time period it goes over that's

00:23:10,529 --> 00:23:12,779
the main problem

00:23:11,190 --> 00:23:16,710
I've got no ideas last five minutes ten

00:23:12,779 --> 00:23:19,200
minutes hour a year and anything is

00:23:16,710 --> 00:23:21,149
denoted sporophytic sport just rip it

00:23:19,200 --> 00:23:22,830
out there's no need for you to have

00:23:21,149 --> 00:23:24,539
machine level metrics coming from a

00:23:22,830 --> 00:23:26,190
standard exporter unless you're writing

00:23:24,539 --> 00:23:28,190
to the node exporter or brand new

00:23:26,190 --> 00:23:31,409
Windows Explorer which was created today

00:23:28,190 --> 00:23:32,850
and jmx J McCloy to already take care of

00:23:31,409 --> 00:23:35,460
all the JVM stats you can drop those

00:23:32,850 --> 00:23:37,559
these rules all fly the JVM a they say J

00:23:35,460 --> 00:23:39,809
max Explorer which is kind of your own

00:23:37,559 --> 00:23:42,629
custom one and it's something has high

00:23:39,809 --> 00:23:45,389
cardinality return drop it because

00:23:42,629 --> 00:23:46,769
that's just too expensive quantiles

00:23:45,389 --> 00:23:48,539
make up your mind whether to keep them

00:23:46,769 --> 00:23:49,679
as long as you like drop wizard you have

00:23:48,539 --> 00:23:52,379
no choice because it gives you nothing

00:23:49,679 --> 00:23:55,169
else but you can't aggregate quantiles

00:23:52,379 --> 00:23:56,340
if there's a failure with a scrape how

00:23:55,169 --> 00:23:57,779
should you deal with it there's

00:23:56,340 --> 00:24:01,639
basically two approaches there's a

00:23:57,779 --> 00:24:03,720
simple approach send to 500 then the OP

00:24:01,639 --> 00:24:05,159
metric and comedians and set to zero

00:24:03,720 --> 00:24:07,409
everyone knows have to deal with that

00:24:05,159 --> 00:24:09,210
there are whoever exporters like AJ

00:24:07,409 --> 00:24:12,899
props use an example which can still get

00:24:09,210 --> 00:24:14,730
useful metrics in that case because they

00:24:12,899 --> 00:24:16,740
are also separately grabbing data from

00:24:14,730 --> 00:24:17,879
proc to give you your cpu stats because

00:24:16,740 --> 00:24:19,529
Asia practices in this portion

00:24:17,879 --> 00:24:21,570
themselves so in that case you actually

00:24:19,529 --> 00:24:23,700
behaves a proxy up metrics little cash

00:24:21,570 --> 00:24:25,499
thanks senator blackbox exporter if it

00:24:23,700 --> 00:24:26,820
send a 500 every time it failed that

00:24:25,499 --> 00:24:28,080
would be kind of pointless because it

00:24:26,820 --> 00:24:29,909
doesn't tell you why it failed

00:24:28,080 --> 00:24:30,630
especially if you like reject tests and

00:24:29,909 --> 00:24:34,200
so on

00:24:30,630 --> 00:24:36,150
simulators a puzzle called scrape

00:24:34,200 --> 00:24:37,770
success or something oh I call that and

00:24:36,150 --> 00:24:39,450
it is handy to say how long you

00:24:37,770 --> 00:24:41,070
something took because then you compare

00:24:39,450 --> 00:24:43,200
how long you took how long for media

00:24:41,070 --> 00:24:44,460
stinks you took and if is a massive

00:24:43,200 --> 00:24:46,520
difference there you have a network

00:24:44,460 --> 00:24:49,830
problem or your exporters overloaded

00:24:46,520 --> 00:24:51,750
other tips avoid a config file if you

00:24:49,830 --> 00:24:52,740
can just a flag telling you where to

00:24:51,750 --> 00:24:54,690
find the app is best

00:24:52,740 --> 00:24:56,310
yeah mole is a cent config format of

00:24:54,690 --> 00:25:00,140
Prometheus it's the standard please

00:24:56,310 --> 00:25:02,220
Paulo wish do not ask about timestamps

00:25:00,140 --> 00:25:04,680
we actually have a registry of every

00:25:02,220 --> 00:25:07,050
default course like we said there

00:25:04,680 --> 00:25:08,550
earlier in digitalocean they have a

00:25:07,050 --> 00:25:09,900
registry of all the ports so things on

00:25:08,550 --> 00:25:11,550
clash with the same infirmities just so

00:25:09,900 --> 00:25:13,140
people are playing around things don't

00:25:11,550 --> 00:25:14,580
clash so yeah you can just grab a port

00:25:13,140 --> 00:25:15,990
number there it's not a commitment it's

00:25:14,580 --> 00:25:18,840
just try making the leads to develop and

00:25:15,990 --> 00:25:20,250
you should always use cost metrics or

00:25:18,840 --> 00:25:23,160
their equivalents in other client

00:25:20,250 --> 00:25:25,800
libraries if you're doing an exporter do

00:25:23,160 --> 00:25:27,780
not use direct instrumentation the one

00:25:25,800 --> 00:25:29,340
big exception I think you actually have

00:25:27,780 --> 00:25:31,530
the req instrumentation of the exporter

00:25:29,340 --> 00:25:33,390
itself for example the cloud watch

00:25:31,530 --> 00:25:34,680
exporter talks to Amazon Cloud watch and

00:25:33,390 --> 00:25:36,840
it maintains the counter of how many

00:25:34,680 --> 00:25:38,340
calls made to Amazon because those cost

00:25:36,840 --> 00:25:39,410
money so you can basically use to track

00:25:38,340 --> 00:25:41,280
down see how much money you're spending

00:25:39,410 --> 00:25:44,000
because that turns out to be about the

00:25:41,280 --> 00:25:45,990
$50 and once for moderate-sized set up

00:25:44,000 --> 00:25:47,550
what's okay to direct the instrument

00:25:45,990 --> 00:25:50,310
your exporter itself but that's not the

00:25:47,550 --> 00:25:52,170
way to get exported metric session so

00:25:50,310 --> 00:25:56,520
here's an actual full example of an

00:25:52,170 --> 00:25:58,410
exporter gosh our imports we create a

00:25:56,520 --> 00:26:00,540
class is all Python collector it is a

00:25:58,410 --> 00:26:02,310
method called collect and you just yield

00:26:00,540 --> 00:26:05,190
this so there is your name help text

00:26:02,310 --> 00:26:06,930
value registration HTTP server and sleep

00:26:05,190 --> 00:26:08,610
so one two three four five six seven

00:26:06,930 --> 00:26:10,230
eight nine lines of code and one of

00:26:08,610 --> 00:26:12,600
those is a comment that's what it takes

00:26:10,230 --> 00:26:14,730
to write an export the hard bits

00:26:12,600 --> 00:26:18,000
actually figure me out this the

00:26:14,730 --> 00:26:20,580
boilerplate itself is pretty tiny so in

00:26:18,000 --> 00:26:22,260
general there's guidelines I've just

00:26:20,580 --> 00:26:24,480
gone over them generally they're up on

00:26:22,260 --> 00:26:26,160
the main website and as an examples as

00:26:24,480 --> 00:26:28,530
well more complex exporters and hazard

00:26:26,160 --> 00:26:30,680
labels and so on and the usual stuff as

00:26:28,530 --> 00:26:30,680
well

00:26:38,370 --> 00:26:48,090
thank you questions you said on failure

00:26:44,710 --> 00:26:52,060
you could return a 500 what which is say

00:26:48,090 --> 00:26:52,810
about in contrast to that just don't

00:26:52,060 --> 00:26:54,820
answer that

00:26:52,810 --> 00:26:57,820
so that the exporter runs into a timeout

00:26:54,820 --> 00:27:00,160
and you have the exporter as marked as

00:26:57,820 --> 00:27:01,630
down so that you're in the app metric

00:27:00,160 --> 00:27:08,200
see that the endpoint is obviously

00:27:01,630 --> 00:27:10,000
having problems responding because

00:27:08,200 --> 00:27:12,820
you're using a slight in that more

00:27:10,000 --> 00:27:14,110
resources yeah I think it turned 505 a 2

00:27:12,820 --> 00:27:15,910
export like not all the client libraries

00:27:14,110 --> 00:27:17,740
will do - and actually right now for

00:27:15,910 --> 00:27:19,480
example the Python and Java clients have

00:27:17,740 --> 00:27:21,370
no protection Suzanne exceptions in

00:27:19,480 --> 00:27:22,750
collectors so if you're over 500 can we

00:27:21,370 --> 00:27:24,100
just forget one of those although

00:27:22,750 --> 00:27:26,290
actually was a bug about that important

00:27:24,100 --> 00:27:29,400
yeah let's fix it but yeah it's just

00:27:26,290 --> 00:27:29,400
simple and fast

00:27:33,930 --> 00:27:41,340
why can't you average temperatures

00:27:39,230 --> 00:27:44,039
because then we have a discussion about

00:27:41,340 --> 00:27:45,450
specific heat capacity and then we have

00:27:44,039 --> 00:27:48,120
an explanation of how specific heat

00:27:45,450 --> 00:27:49,380
capacity varies with temperature Jules

00:27:48,120 --> 00:27:52,289
Jules people

00:27:49,380 --> 00:27:55,890
Jules unit you can actually average or

00:27:52,289 --> 00:27:58,500
so what I'm not a physicist I just have

00:27:55,890 --> 00:28:00,419
to a PhDs in monitoring and a Nobel

00:27:58,500 --> 00:28:05,400
Prize in demonstrating wonderful night

00:28:00,419 --> 00:28:08,760
ministering the place some of the client

00:28:05,400 --> 00:28:10,350
lepers also export the unit of the of

00:28:08,760 --> 00:28:13,409
the metric

00:28:10,350 --> 00:28:15,419
how is Prometheus currently I think

00:28:13,409 --> 00:28:16,799
Prometheus is not evaluating those are

00:28:15,419 --> 00:28:18,870
there plans to do that in the future

00:28:16,799 --> 00:28:22,049
there is no support for units in

00:28:18,870 --> 00:28:22,650
Prometheus at all so it is just a piece

00:28:22,049 --> 00:28:25,549
of text

00:28:22,650 --> 00:28:27,570
so next seconds milliseconds and so on

00:28:25,549 --> 00:28:29,610
so it's just a convention

00:28:27,570 --> 00:28:31,890
oh you mean only in the actual metric

00:28:29,610 --> 00:28:34,169
types not the unit yeah so previous

00:28:31,890 --> 00:28:36,210
ignores those totally it's likely that

00:28:34,169 --> 00:28:39,330
we will end up with quit and linter on

00:28:36,210 --> 00:28:40,500
those and features like that and stuff

00:28:39,330 --> 00:28:41,970
on top and on it maybe someone will have

00:28:40,500 --> 00:28:43,679
other generation and tools and

00:28:41,970 --> 00:28:44,909
assistance but anything uttered and

00:28:43,679 --> 00:28:47,669
gnash like especially because exporters

00:28:44,909 --> 00:28:53,789
the data is just dirty Frigga recent

00:28:47,669 --> 00:28:56,610
centrist culture so you you if you if

00:28:53,789 --> 00:28:58,700
you imagine having an interface counter

00:28:56,610 --> 00:29:01,020
yeah on switches you usually have

00:28:58,700 --> 00:29:03,059
aliases and so on interfaces and not

00:29:01,020 --> 00:29:07,020
descriptions or aliases on some other

00:29:03,059 --> 00:29:10,110
you said that the target should match

00:29:07,020 --> 00:29:14,419
for all the metric in yeah metrics that

00:29:10,110 --> 00:29:14,419
you have how would you attack it that

00:29:23,870 --> 00:29:30,630
you would just have an empty label so

00:29:26,640 --> 00:29:32,070
you say alias null string that's one

00:29:30,630 --> 00:29:34,049
option I'd meet the see the actual data

00:29:32,070 --> 00:29:36,030
this is where it gets into the arch area

00:29:34,049 --> 00:29:38,100
rather than science and we actually have

00:29:36,030 --> 00:29:39,929
a massive problem with AI F table which

00:29:38,100 --> 00:29:42,240
is the main SNMP ting you got busy

00:29:39,929 --> 00:29:45,480
interface stats of what should the label

00:29:42,240 --> 00:29:49,649
be shoulda be the index in STP or should

00:29:45,480 --> 00:29:52,610
have beat the gif desk the name and the

00:29:49,649 --> 00:29:57,180
answer is there is no correct answer

00:29:52,610 --> 00:29:58,860
yeah so this is not an uncommon thing to

00:29:57,180 --> 00:30:00,300
happen when exporters we just have to do

00:29:58,860 --> 00:30:02,220
thing that makes the most sense and

00:30:00,300 --> 00:30:03,570
mostly works and ten people have to do

00:30:02,220 --> 00:30:11,430
the other way they've got the hardware

00:30:03,570 --> 00:30:15,920
doing the other take more questions no

00:30:11,430 --> 00:30:15,920
okay so thank you for now

00:30:18,780 --> 00:30:20,840

YouTube URL: https://www.youtube.com/watch?v=KXq5ibSj2qA


