Title: PromCon 2016: Alerting in the Prometheus Universe - Fabian Reinartz
Publication date: 2016-09-04
Playlist: PromCon 2016
Description: 
	* Abstract:

In a Cloud Native infrastructure, failure is normal and expected. The loss of a single node or a dozen hard drives is gracefully handled by the systems running a datacenter and there is no reason to page someone at 4am. This calls for an alerting system that understands service availability at a global scope, yet is still able to give detailed reports if and when there is a service-impacting incident. Prometheus achieves this by defining alerting conditions directly on time series data. The resulting alerts are grouped and aggregated into comprehensive and meaningful notifications.

Fabian will walk through the philosophy of time series based alerting, the Prometheus architecture behind it, and how practical anomaly detection can be implemented.

* Speaker biography:

Prometheus core developer and CoreOS engineer.

* Slides:

https://docs.google.com/presentation/d/16hsV0Pyxxk7ta7gIif7Tfxcr1Oy1LmfUbKXaeXisDvw/edit?usp=sharing

* PromCon website:

https://promcon.io/
Captions: 
	00:00:02,370 --> 00:00:06,610
next up is Fabiana I think actually

00:00:04,510 --> 00:00:08,200
Fabien didn't get enough credit in

00:00:06,610 --> 00:00:12,809
groobie's talk so I want to give it a

00:00:08,200 --> 00:00:15,460
bit more hobby on the coding machine so

00:00:12,809 --> 00:00:18,040
just a couple of weeks after we

00:00:15,460 --> 00:00:19,660
officially published prometheus beyond

00:00:18,040 --> 00:00:22,330
and I gave a talk in this room exactly

00:00:19,660 --> 00:00:23,859
there Fabian was in the audience came up

00:00:22,330 --> 00:00:26,380
to us afterwards and was really

00:00:23,859 --> 00:00:30,670
interested in prometheus and then yeah

00:00:26,380 --> 00:00:32,559
we got the first contributions from him

00:00:30,670 --> 00:00:34,780
and we thought wow he really knows what

00:00:32,559 --> 00:00:36,940
he's doing so we invited him to the

00:00:34,780 --> 00:00:39,100
office and talked through some things he

00:00:36,940 --> 00:00:41,199
said ok your first task could be to

00:00:39,100 --> 00:00:43,600
build generic services career and work

00:00:41,199 --> 00:00:46,180
inside prometheus and we also talked

00:00:43,600 --> 00:00:48,339
about why there is a yak based parser in

00:00:46,180 --> 00:00:50,019
prometheus and I said well because it's

00:00:48,339 --> 00:00:53,229
like a lot of work to change a manual

00:00:50,019 --> 00:00:55,119
pasture all the time because we're still

00:00:53,229 --> 00:00:56,559
devolving the language and then like the

00:00:55,119 --> 00:00:58,629
next day he sent us a complete

00:00:56,559 --> 00:01:01,390
implementation of the prompt ql parser

00:00:58,629 --> 00:01:03,820
built manually just like i think it's

00:01:01,390 --> 00:01:06,820
not so complicated and then you know

00:01:03,820 --> 00:01:08,740
later on he actually evolved that into

00:01:06,820 --> 00:01:11,649
what is now the prompt to our parser and

00:01:08,740 --> 00:01:14,289
he pretty much rewrote most of

00:01:11,649 --> 00:01:15,750
prometheus maybe not so much the storage

00:01:14,289 --> 00:01:19,960
bits like pretty much everything else

00:01:15,750 --> 00:01:23,829
and also is responsible for the new

00:01:19,960 --> 00:01:25,780
alert manager rewrite and he's now he

00:01:23,829 --> 00:01:28,689
was at SoundCloud briefly now at Korres

00:01:25,780 --> 00:01:31,359
and he's going to tell you about how you

00:01:28,689 --> 00:01:34,240
can use prometheus native alerting to

00:01:31,359 --> 00:01:38,920
get a handle on your dynamic cloud

00:01:34,240 --> 00:01:40,450
environments good so yeah my talk is

00:01:38,920 --> 00:01:42,640
loading in the promises universe I work

00:01:40,450 --> 00:01:46,390
at Korres and I have 47 slides and not

00:01:42,640 --> 00:01:48,549
enough time so I will start out with

00:01:46,390 --> 00:01:51,100
basically a few slides I usually use and

00:01:48,549 --> 00:01:53,259
when describing why Prometheus is a good

00:01:51,100 --> 00:01:54,549
monitoring system and the first one is

00:01:53,259 --> 00:01:57,310
basically we have a lot of stuff to

00:01:54,549 --> 00:01:59,850
monitor and we don't want Prometheus to

00:01:57,310 --> 00:02:03,069
basically scale up and up and up as our

00:01:59,850 --> 00:02:04,509
traffic does right so basically if

00:02:03,069 --> 00:02:06,159
someone scraping your for example and

00:02:04,509 --> 00:02:08,020
ddosing you that your monitoring system

00:02:06,159 --> 00:02:09,819
doesn't generate more traffic and you go

00:02:08,020 --> 00:02:13,299
down basically in sort of cascading

00:02:09,819 --> 00:02:14,819
failure then promises is really good at

00:02:13,299 --> 00:02:16,319
monitoring a lot of different stuff

00:02:14,819 --> 00:02:18,950
right you can learn into a South

00:02:16,319 --> 00:02:21,389
sub-targets with a single server and

00:02:18,950 --> 00:02:23,670
also it's really good at adapting to

00:02:21,389 --> 00:02:25,230
change so if you have a dynamic

00:02:23,670 --> 00:02:29,510
infrastructure for example a kubernetes

00:02:25,230 --> 00:02:32,250
mesosphere whatever we are basically

00:02:29,510 --> 00:02:34,530
single scheduled and taken down again

00:02:32,250 --> 00:02:36,689
within like hours or minutes even and

00:02:34,530 --> 00:02:38,069
promises can be detected quickly and

00:02:36,689 --> 00:02:41,280
start and stop monitoring as your

00:02:38,069 --> 00:02:42,989
infrastructure changes and it's really

00:02:41,280 --> 00:02:44,340
good at basically giving you this fleet

00:02:42,989 --> 00:02:46,169
wide overview right if you have more

00:02:44,340 --> 00:02:48,150
things and to track then you can

00:02:46,169 --> 00:02:49,739
basically look at manually it's really

00:02:48,150 --> 00:02:51,239
good at basically by a prompt to edit

00:02:49,739 --> 00:02:53,549
providing you with a really good insight

00:02:51,239 --> 00:02:57,269
into what's going on in overall in your

00:02:53,549 --> 00:02:58,769
entire stack but it also that's a drill

00:02:57,269 --> 00:03:00,209
down for investigations so if there's a

00:02:58,769 --> 00:03:02,790
problem you want to know exactly where

00:03:00,209 --> 00:03:04,980
it comes from and this can happen in so

00:03:02,790 --> 00:03:06,269
many different dimensions and this is

00:03:04,980 --> 00:03:07,439
sort of for the dead emoticons in your

00:03:06,269 --> 00:03:09,540
head and you can basically drill down

00:03:07,439 --> 00:03:11,939
into all the aspects of the system and

00:03:09,540 --> 00:03:15,299
don't give up any detail when basically

00:03:11,939 --> 00:03:16,530
ingesting the data and also you can

00:03:15,299 --> 00:03:18,959
monitor all your levels it's the same

00:03:16,530 --> 00:03:20,519
system so you can monitor your notes and

00:03:18,959 --> 00:03:22,019
you can monitor your own container

00:03:20,519 --> 00:03:23,879
scheduling system and few containers

00:03:22,019 --> 00:03:26,129
themselves and you can even go down to

00:03:23,879 --> 00:03:27,750
like routers and switches and almost the

00:03:26,129 --> 00:03:29,939
same system which is super helpful right

00:03:27,750 --> 00:03:31,439
because you only have to learn one and

00:03:29,939 --> 00:03:33,449
all your engineers just have to learn

00:03:31,439 --> 00:03:35,689
one and it's easier to basically

00:03:33,449 --> 00:03:38,939
correlates things happening in different

00:03:35,689 --> 00:03:41,250
parts of your stack and basically get a

00:03:38,939 --> 00:03:45,359
full view of basically your stack

00:03:41,250 --> 00:03:46,919
horizontally and vertically so the other

00:03:45,359 --> 00:03:48,269
than the monitoring aspects right that's

00:03:46,919 --> 00:03:50,220
where Prometheus is good at monitoring

00:03:48,269 --> 00:03:52,530
and the question is how can we translate

00:03:50,220 --> 00:03:55,919
this kind of stuff to alerting how can

00:03:52,530 --> 00:03:57,629
we get the same value when alerting in a

00:03:55,919 --> 00:03:59,280
huge infrastructure that changes a lot

00:03:57,629 --> 00:04:03,060
and also of course like small

00:03:59,280 --> 00:04:04,620
infrastructures and the answer typically

00:04:03,060 --> 00:04:05,909
is this kind of stuff right we want

00:04:04,620 --> 00:04:08,819
machine I think so we can do anomaly

00:04:05,909 --> 00:04:10,169
detection and do automatic the load

00:04:08,819 --> 00:04:11,340
correlation and then we can make

00:04:10,169 --> 00:04:14,969
everything cell feeding and then our

00:04:11,340 --> 00:04:17,820
problems are solved and this is good to

00:04:14,969 --> 00:04:18,780
sell but it doesn't work right and so

00:04:17,820 --> 00:04:20,310
you just have to believe me

00:04:18,780 --> 00:04:23,729
because I did data science for like one

00:04:20,310 --> 00:04:27,100
year so for the scope of this talk just

00:04:23,729 --> 00:04:29,770
believe me I would just try to show you

00:04:27,100 --> 00:04:32,140
that there's a same approach and because

00:04:29,770 --> 00:04:33,520
if you have a lot of data we're talking

00:04:32,140 --> 00:04:35,760
about tens of millions of time-series

00:04:33,520 --> 00:04:37,690
there's billions of samples per day and

00:04:35,760 --> 00:04:39,670
there's always stuff that correlates

00:04:37,690 --> 00:04:41,350
right if you just throw some machining

00:04:39,670 --> 00:04:43,690
at things there will always be some

00:04:41,350 --> 00:04:46,780
curves that sort of looks the same or do

00:04:43,690 --> 00:04:49,390
correlate negatively etc and to

00:04:46,780 --> 00:04:50,740
eliminate all these false positives so

00:04:49,390 --> 00:04:53,260
you don't get paged constant force of

00:04:50,740 --> 00:04:55,780
the extremes not an issue and you have

00:04:53,260 --> 00:04:58,180
to basically do a huge efforts and I

00:04:55,780 --> 00:05:01,240
talked to someone who had this wrote out

00:04:58,180 --> 00:05:03,910
sort of in their company was like maybe

00:05:01,240 --> 00:05:05,050
50 servers and they basically develop

00:05:03,910 --> 00:05:08,680
their own machine own system to

00:05:05,050 --> 00:05:10,870
basically detect playlists automatically

00:05:08,680 --> 00:05:13,320
and basically causes everything and they

00:05:10,870 --> 00:05:15,670
were getting about 3,000 emails per day

00:05:13,320 --> 00:05:18,520
about stuff that's apparently not quite

00:05:15,670 --> 00:05:20,410
right after two years of optimization

00:05:18,520 --> 00:05:24,190
they brought us down to 1,000 emails per

00:05:20,410 --> 00:05:26,410
day and sort of if you do this kind of

00:05:24,190 --> 00:05:27,940
aggressive optimization and first of all

00:05:26,410 --> 00:05:29,320
you're very like tie it down to your

00:05:27,940 --> 00:05:32,260
specific use case you have to know your

00:05:29,320 --> 00:05:34,720
domain really well and then it's not

00:05:32,260 --> 00:05:35,950
generally applicable anymore and also if

00:05:34,720 --> 00:05:38,110
you basically reduce all these false

00:05:35,950 --> 00:05:40,000
positives you also have a chance that

00:05:38,110 --> 00:05:41,950
you drop some flaws negative some true

00:05:40,000 --> 00:05:44,620
negatives right that you get some post

00:05:41,950 --> 00:05:45,880
negatives and this is of course

00:05:44,620 --> 00:05:47,860
something we can't tolerate and

00:05:45,880 --> 00:05:49,330
reloading right if the data sets on fire

00:05:47,860 --> 00:05:50,650
but my metric system didn't detect it

00:05:49,330 --> 00:05:54,760
because I don't know how much you know

00:05:50,650 --> 00:05:56,230
you went wrong and that's kind of bad so

00:05:54,760 --> 00:05:58,390
I was sort of want to try to show you

00:05:56,230 --> 00:06:01,240
how we can implement the sign alerting

00:05:58,390 --> 00:06:03,310
approach was Prometheus that is easy to

00:06:01,240 --> 00:06:05,980
it basically easy to do and gives you

00:06:03,310 --> 00:06:10,270
the full coverage and basically allows

00:06:05,980 --> 00:06:12,040
you to understand what's wrong and the

00:06:10,270 --> 00:06:12,580
thing is all these benefits of

00:06:12,040 --> 00:06:14,710
monitoring

00:06:12,580 --> 00:06:17,470
I've shown you and you can just take

00:06:14,710 --> 00:06:19,510
them as I'm SAR if we just implement our

00:06:17,470 --> 00:06:21,640
learning based on time series so we just

00:06:19,510 --> 00:06:23,950
take our monitoring data which it's not

00:06:21,640 --> 00:06:25,570
something that all systems do and define

00:06:23,950 --> 00:06:27,280
our learning based on that we don't have

00:06:25,570 --> 00:06:29,830
some distinct checks that run in

00:06:27,280 --> 00:06:31,540
parallel we just put it right on top and

00:06:29,830 --> 00:06:34,000
can take all the power of Prometheus and

00:06:31,540 --> 00:06:37,000
from clear etc and directly leverage

00:06:34,000 --> 00:06:38,890
that in our learning and we have a

00:06:37,000 --> 00:06:40,480
really good representation of the

00:06:38,890 --> 00:06:42,760
current state of the world by looking at

00:06:40,480 --> 00:06:45,160
time seems right of okay when said in

00:06:42,760 --> 00:06:47,800
the past date and you can just compare

00:06:45,160 --> 00:06:49,780
the state by a prompt ul with the

00:06:47,800 --> 00:06:53,460
desired state and the difference

00:06:49,780 --> 00:06:53,460
basically is the stuff you want to learn

00:06:54,540 --> 00:06:59,080
so this is basically how you define

00:06:57,340 --> 00:07:01,060
Android in Prometheus so this is our

00:06:59,080 --> 00:07:03,280
custom syntax and you just stay alert

00:07:01,060 --> 00:07:04,930
and provide the name and then you

00:07:03,280 --> 00:07:06,540
basically defined any prompt your

00:07:04,930 --> 00:07:09,100
expression that gives you results and

00:07:06,540 --> 00:07:12,580
then you can define stuff like for

00:07:09,100 --> 00:07:15,670
duration so if this expression generates

00:07:12,580 --> 00:07:18,130
a result every entry in this result

00:07:15,670 --> 00:07:19,480
vector corresponds to one alert and then

00:07:18,130 --> 00:07:20,770
you can say okay sometimes my

00:07:19,480 --> 00:07:23,110
expressions are spiky right so it might

00:07:20,770 --> 00:07:25,060
have this short latency spike if it goes

00:07:23,110 --> 00:07:27,160
down down again right afterwards there's

00:07:25,060 --> 00:07:30,250
no reason to page someone so I can just

00:07:27,160 --> 00:07:31,840
say okay only page me actually if the

00:07:30,250 --> 00:07:34,990
condition helps rule for I don't know

00:07:31,840 --> 00:07:37,060
three five or ten minutes and then you

00:07:34,990 --> 00:07:38,530
can also assign labels and annotations

00:07:37,060 --> 00:07:40,660
enables others addition labels that

00:07:38,530 --> 00:07:42,160
identify each alert and don't patients

00:07:40,660 --> 00:07:44,770
can really be anything you can put

00:07:42,160 --> 00:07:47,410
ascriptions in there which provide good

00:07:44,770 --> 00:07:49,120
context and in human readable form but

00:07:47,410 --> 00:07:51,610
you can also put in there basically

00:07:49,120 --> 00:07:53,980
templated links to run books or to

00:07:51,610 --> 00:07:56,530
dashboards and everything that basically

00:07:53,980 --> 00:07:59,230
helps the person alcohol to investigate

00:07:56,530 --> 00:08:00,850
the issue and this sort of looks like

00:07:59,230 --> 00:08:03,490
this right so if you want to define a

00:08:00,850 --> 00:08:04,750
lure that alerts us if our LCD cluster

00:08:03,490 --> 00:08:06,430
or an instance in our city cluster

00:08:04,750 --> 00:08:08,200
doesn't have a leader we just named a

00:08:06,430 --> 00:08:10,390
lot in a way and we take a metric in

00:08:08,200 --> 00:08:14,200
this case very simple one sed has leader

00:08:10,390 --> 00:08:16,840
and if this is zero so false basically

00:08:14,200 --> 00:08:18,280
we want this as a resulting alert and in

00:08:16,840 --> 00:08:20,710
the example here we get two results back

00:08:18,280 --> 00:08:23,380
so instance a and instance B of our RTD

00:08:20,710 --> 00:08:27,940
cluster don't have a leader penalty so

00:08:23,380 --> 00:08:29,470
these become alert after one minute and

00:08:27,940 --> 00:08:31,630
the resulting alert is also just the

00:08:29,470 --> 00:08:33,940
label set essentially and basically we

00:08:31,630 --> 00:08:36,479
take all the tables form our result plus

00:08:33,940 --> 00:08:40,830
labels we assigned in the alerting room

00:08:36,479 --> 00:08:40,830
yeah and the alert time of course

00:08:43,580 --> 00:08:48,960
so and this for the syntax um so now how

00:08:47,730 --> 00:08:51,960
can we actually implement this sort of

00:08:48,960 --> 00:08:53,730
meaningful alerting and the answer is

00:08:51,960 --> 00:08:56,430
basically we want to do symptom based

00:08:53,730 --> 00:08:59,460
paving so we only want to wake someone

00:08:56,430 --> 00:09:01,170
up or paid someone and if the detection

00:08:59,460 --> 00:09:04,020
Energon problem affecting the user of

00:09:01,170 --> 00:09:05,820
the system right if the system is doing

00:09:04,020 --> 00:09:07,860
its job well we don't really care about

00:09:05,820 --> 00:09:09,480
what's what might be wrong internally

00:09:07,860 --> 00:09:11,370
because if it's something is wrong and

00:09:09,480 --> 00:09:14,040
currently at some point if the manifest

00:09:11,370 --> 00:09:15,330
as an issue for your user and the user

00:09:14,040 --> 00:09:16,650
can be anything right if you work on the

00:09:15,330 --> 00:09:19,820
front end that user might actually be a

00:09:16,650 --> 00:09:21,960
real-world user but it's not to be just

00:09:19,820 --> 00:09:22,410
dependencies people depending on you

00:09:21,960 --> 00:09:24,420
right

00:09:22,410 --> 00:09:26,130
and you're also depending on other

00:09:24,420 --> 00:09:28,080
things but you are learning for your

00:09:26,130 --> 00:09:29,400
system should we focus on basically

00:09:28,080 --> 00:09:33,120
whether your users get what they want

00:09:29,400 --> 00:09:35,730
and they're basically these four golden

00:09:33,120 --> 00:09:38,070
signals and tomato that which is mostly

00:09:35,730 --> 00:09:40,290
for web service kind of stuff right and

00:09:38,070 --> 00:09:42,360
one is latency so if you use I want

00:09:40,290 --> 00:09:44,120
something does he get it in a reasonable

00:09:42,360 --> 00:09:47,310
amount of time

00:09:44,120 --> 00:09:48,480
place it forward then this traffic of

00:09:47,310 --> 00:09:49,890
course right if I was system that's

00:09:48,480 --> 00:09:52,650
supposed to handle tensile Enriquez per

00:09:49,890 --> 00:09:54,960
second and they drop to like zero and

00:09:52,650 --> 00:09:57,540
that's kind of bad so this probably

00:09:54,960 --> 00:09:59,310
something you on track the third one is

00:09:57,540 --> 00:10:00,780
arrows so if you have traffic you also

00:09:59,310 --> 00:10:03,300
have arrows right and they are almost

00:10:00,780 --> 00:10:05,790
never Bureau and you probably absorbance

00:10:03,300 --> 00:10:07,530
level but you sort of there's also a

00:10:05,790 --> 00:10:09,800
point where just like too many errors

00:10:07,530 --> 00:10:12,270
and that's something you want to load on

00:10:09,800 --> 00:10:14,730
and then they're cost based things right

00:10:12,270 --> 00:10:16,260
and these are usually that's usually

00:10:14,730 --> 00:10:17,730
really helpful stuff right if you can

00:10:16,260 --> 00:10:19,980
basically have an alert defined that

00:10:17,730 --> 00:10:21,090
tells you whether something some

00:10:19,980 --> 00:10:23,550
internal garbage collection of your

00:10:21,090 --> 00:10:25,620
database or compaction it's not working

00:10:23,550 --> 00:10:28,170
properly and if you then have actually

00:10:25,620 --> 00:10:30,690
am a user facing issue it's good to have

00:10:28,170 --> 00:10:31,350
this sort of as a flashing thing on

00:10:30,690 --> 00:10:32,850
dashboards

00:10:31,350 --> 00:10:35,640
basically hinting you where the problem

00:10:32,850 --> 00:10:37,530
may be but you don't want these things

00:10:35,640 --> 00:10:40,380
basically to wake you up as long as they

00:10:37,530 --> 00:10:41,760
don't actually cause an error and it's

00:10:40,380 --> 00:10:42,510
pretty safe forward right every every

00:10:41,760 --> 00:10:44,790
symptom

00:10:42,510 --> 00:10:47,100
affecting a user might have thousands of

00:10:44,790 --> 00:10:49,560
different causes and and also it's

00:10:47,100 --> 00:10:51,480
symptom might have each course might

00:10:49,560 --> 00:10:55,460
have other symptoms but they can LT the

00:10:51,480 --> 00:10:55,460
other way around is usually very higher

00:10:55,730 --> 00:10:59,810
the basic only exception is when you

00:10:57,529 --> 00:11:02,180
want course based alerting mm to

00:10:59,810 --> 00:11:03,860
basically pitch you um a saturation

00:11:02,180 --> 00:11:08,149
capacity which is the force goal in

00:11:03,860 --> 00:11:10,040
signal so um simply because saturation

00:11:08,149 --> 00:11:13,730
capacity usually talking about five

00:11:10,040 --> 00:11:16,070
descriptors memory our disk space right

00:11:13,730 --> 00:11:18,230
and if the disk is full already

00:11:16,070 --> 00:11:20,329
yeah then you have all symptoms flashing

00:11:18,230 --> 00:11:21,380
at once and but it's sort of a problem

00:11:20,329 --> 00:11:23,510
you want to catch this before it

00:11:21,380 --> 00:11:24,949
actually occurs right if you then you

00:11:23,510 --> 00:11:26,630
have a symptom right away but you

00:11:24,949 --> 00:11:31,550
actually want to prevent this uncle in

00:11:26,630 --> 00:11:33,110
this case I'm actually that's like sort

00:11:31,550 --> 00:11:35,209
of fifth on I guess we're just like data

00:11:33,110 --> 00:11:36,320
freshness and so if you are dealing with

00:11:35,209 --> 00:11:38,480
sketches right you want to ensure that

00:11:36,320 --> 00:11:44,720
you user actually sees the correct data

00:11:38,480 --> 00:11:47,899
on the most recent data and so I kind of

00:11:44,720 --> 00:11:49,820
want to works with this as an by example

00:11:47,899 --> 00:11:52,699
and let's just try to build an alert

00:11:49,820 --> 00:11:55,820
that helps us detect whether our

00:11:52,699 --> 00:12:02,000
application basically is a reasonable

00:11:55,820 --> 00:12:03,920
amount of errors so we have two metrics

00:12:02,000 --> 00:12:06,019
here request total and Rico's Aristotle

00:12:03,920 --> 00:12:08,480
and they have some sort of labels right

00:12:06,019 --> 00:12:11,290
the instable which we all know which

00:12:08,480 --> 00:12:14,060
might just be like certain service and

00:12:11,290 --> 00:12:16,399
then you have Rica's pass and favor

00:12:14,060 --> 00:12:18,740
because message so we keep it that but

00:12:16,399 --> 00:12:21,350
can actually be more and now we want to

00:12:18,740 --> 00:12:24,250
define okay when it's that's my serve

00:12:21,350 --> 00:12:27,079
our heavens service have too many errors

00:12:24,250 --> 00:12:29,029
so we can start off with this we have an

00:12:27,079 --> 00:12:31,130
adored we named it high error rate and

00:12:29,029 --> 00:12:33,019
because we're going to basically have

00:12:31,130 --> 00:12:35,120
this aggregated view right we only want

00:12:33,019 --> 00:12:37,670
to alert if actually the entire service

00:12:35,120 --> 00:12:40,459
has an issue not single instance exact

00:12:37,670 --> 00:12:41,899
so this sum comes in really well and we

00:12:40,459 --> 00:12:43,370
just take this error counter and build a

00:12:41,899 --> 00:12:45,769
rate of it which gives us the errors per

00:12:43,370 --> 00:12:47,899
second and yeah we can just sum it up

00:12:45,769 --> 00:12:51,620
right across out of - at service workers

00:12:47,899 --> 00:12:54,350
and if it's too high it's a more than

00:12:51,620 --> 00:12:57,339
500 per second we are kind of think

00:12:54,350 --> 00:13:00,230
that's too much and so this for page um

00:12:57,339 --> 00:13:01,910
in this case we some away all the labels

00:13:00,230 --> 00:13:03,470
and we get this one entry and telling us

00:13:01,910 --> 00:13:07,580
they are four and thirty four errors per

00:13:03,470 --> 00:13:09,110
second and we can add on that

00:13:07,580 --> 00:13:11,209
yes you might have figured it's a bit

00:13:09,110 --> 00:13:14,089
too simple we don't like that because

00:13:11,209 --> 00:13:15,640
absolute threshold right this rule

00:13:14,089 --> 00:13:18,589
basically needs constant tuning as

00:13:15,640 --> 00:13:22,130
anything changes in how much traffic you

00:13:18,589 --> 00:13:24,470
are application receives and their

00:13:22,130 --> 00:13:26,329
different scenarios for that so over day

00:13:24,470 --> 00:13:27,649
you'll have very much change right you

00:13:26,329 --> 00:13:30,019
have certain target audience probably

00:13:27,649 --> 00:13:31,730
globally and at nighttime they're more

00:13:30,019 --> 00:13:33,620
detective and that they tend a more

00:13:31,730 --> 00:13:36,890
active and if you have a constant

00:13:33,620 --> 00:13:39,470
specialty basically means that at every

00:13:36,890 --> 00:13:41,870
point in time the alert might have a

00:13:39,470 --> 00:13:43,130
different semantic meaning because at

00:13:41,870 --> 00:13:45,410
night time apparently

00:13:43,130 --> 00:13:47,480
it's okay so we have a certain

00:13:45,410 --> 00:13:49,310
percentage of errors with respect to my

00:13:47,480 --> 00:13:50,320
total requests and but suddenly it's not

00:13:49,310 --> 00:13:53,120
anymore

00:13:50,320 --> 00:13:55,100
and same thing happens if you are cool

00:13:53,120 --> 00:13:57,740
style app sort of scales and gets to

00:13:55,100 --> 00:13:59,120
turn of users and at some point okay as

00:13:57,740 --> 00:14:02,060
soon as have more users apparently this

00:13:59,120 --> 00:14:04,010
threshold and doesn't apply anymore and

00:14:02,060 --> 00:14:06,230
the same happens if you get on how can

00:14:04,010 --> 00:14:08,149
use something and get out of perfect

00:14:06,230 --> 00:14:10,820
there and all people come to is the site

00:14:08,149 --> 00:14:12,470
right basically everything that um we

00:14:10,820 --> 00:14:15,550
want basically however way to be

00:14:12,470 --> 00:14:18,200
adaptive to the total traffic you get

00:14:15,550 --> 00:14:21,380
let's not go hard of course right we can

00:14:18,200 --> 00:14:23,329
just divide the amount of errors per

00:14:21,380 --> 00:14:25,370
second by the total number of Rica's per

00:14:23,329 --> 00:14:27,529
second to get and we just multiplied by

00:14:25,370 --> 00:14:34,459
100 because it's easier or a nicer to

00:14:27,529 --> 00:14:36,500
see to compare to like 1% so now we

00:14:34,459 --> 00:14:39,380
actually get a percentage so how many

00:14:36,500 --> 00:14:44,120
errors are there in respective might

00:14:39,380 --> 00:14:45,320
will request so now basically return the

00:14:44,120 --> 00:14:47,300
straight line into a line that sort of

00:14:45,320 --> 00:14:49,370
adapt to stop traffic right and now it's

00:14:47,300 --> 00:14:52,390
as you can see it sort of it's always

00:14:49,370 --> 00:14:55,690
true no matter how much traffic I get

00:14:52,390 --> 00:14:58,010
and this is also bad still of course

00:14:55,690 --> 00:15:00,709
because we some away all the

00:14:58,010 --> 00:15:03,260
dimensionality right so if we get this

00:15:00,709 --> 00:15:04,310
alert we just get one number

00:15:03,260 --> 00:15:05,930
telling me okay you have this many

00:15:04,310 --> 00:15:08,449
errors and might be replacing you know

00:15:05,930 --> 00:15:11,480
for the context and on whites actually

00:15:08,449 --> 00:15:14,060
coming from and so we lose detail once

00:15:11,480 --> 00:15:17,660
um but also we have signals cancelling

00:15:14,060 --> 00:15:20,310
it out and register I can see here and

00:15:17,660 --> 00:15:23,430
so if you have for example requests and

00:15:20,310 --> 00:15:25,350
you freak asparagus method and and for

00:15:23,430 --> 00:15:27,060
example your way with your post requests

00:15:25,350 --> 00:15:32,070
and get requests and you have some

00:15:27,060 --> 00:15:33,480
Rica's passes that are way fewer visited

00:15:32,070 --> 00:15:35,820
way less than others

00:15:33,480 --> 00:15:37,800
for example for some user of settings

00:15:35,820 --> 00:15:40,080
right and that's probably I don't know

00:15:37,800 --> 00:15:44,730
five PPS and maybe a timeline

00:15:40,080 --> 00:15:47,279
functionality has like 500 PPS so sort

00:15:44,730 --> 00:15:47,610
of we have a low traffic thing happening

00:15:47,279 --> 00:15:50,430
here

00:15:47,610 --> 00:15:51,960
for example post request but it has a

00:15:50,430 --> 00:15:53,940
really high error rate maybe like every

00:15:51,960 --> 00:15:55,560
post guys always errors so your users

00:15:53,940 --> 00:15:57,690
virtually can't do anything website and

00:15:55,560 --> 00:15:59,010
but all the other passes which are all

00:15:57,690 --> 00:16:01,560
the other things that are basically get

00:15:59,010 --> 00:16:04,050
requests and have way higher traffic and

00:16:01,560 --> 00:16:05,940
low error rate and so they cancel out in

00:16:04,050 --> 00:16:08,910
this aggregation and the errors

00:16:05,940 --> 00:16:10,710
happening in the other dimension so we

00:16:08,910 --> 00:16:12,150
have to keep this dimension to be able

00:16:10,710 --> 00:16:13,680
to detect error server and certain

00:16:12,150 --> 00:16:17,490
basically hidden in a certain dimension

00:16:13,680 --> 00:16:19,080
and yeah we can just add a by close

00:16:17,490 --> 00:16:21,600
right so let's just work in some

00:16:19,080 --> 00:16:24,570
dimensions let's just have the rig

00:16:21,600 --> 00:16:27,330
instance any pass as well and then now

00:16:24,570 --> 00:16:28,589
we get the result nicely per instance

00:16:27,330 --> 00:16:30,480
and passed combination right so well now

00:16:28,589 --> 00:16:32,280
we know for every instance and pass

00:16:30,480 --> 00:16:34,740
combination if the error rate is too

00:16:32,280 --> 00:16:36,570
high this is sort of like Moorhead for

00:16:34,740 --> 00:16:38,760
context right because now I can see on

00:16:36,570 --> 00:16:40,530
my web work I want and the comments API

00:16:38,760 --> 00:16:43,380
is not working but on the other ones it

00:16:40,530 --> 00:16:47,370
is and on the one at the other pasture

00:16:43,380 --> 00:16:50,970
working return but the dimensions are

00:16:47,370 --> 00:16:52,350
wrong right and I want things to page if

00:16:50,970 --> 00:16:53,970
my service as a whole doesn't work I

00:16:52,350 --> 00:16:56,339
want to base if it's still this fleet by

00:16:53,970 --> 00:16:58,110
auto overview and basically it was a

00:16:56,339 --> 00:17:01,470
maximum internet can get but without

00:16:58,110 --> 00:17:05,310
being noisy so instance obviously wrong

00:17:01,470 --> 00:17:06,750
because the instance is that I mentioned

00:17:05,310 --> 00:17:08,400
I'm fader taller one day long right

00:17:06,750 --> 00:17:11,400
because I'm horizontally scaling anyway

00:17:08,400 --> 00:17:13,530
and so in this case here I have one

00:17:11,400 --> 00:17:14,970
instance acting up really badly but all

00:17:13,530 --> 00:17:17,220
the other hand not nine-nine actually

00:17:14,970 --> 00:17:18,709
behaving very well and in grand total

00:17:17,220 --> 00:17:20,640
and my service is actually totally fine

00:17:18,709 --> 00:17:22,319
and if you're talking about 1,000

00:17:20,640 --> 00:17:25,020
instances there's a huge chance one is

00:17:22,319 --> 00:17:26,699
always acting up right and your cluster

00:17:25,020 --> 00:17:27,720
second system for example is supposed to

00:17:26,699 --> 00:17:29,640
handle this kind of thing so I'd

00:17:27,720 --> 00:17:31,320
supposed to kill this instance and start

00:17:29,640 --> 00:17:33,820
anew on so this is stuff shouldn't even

00:17:31,320 --> 00:17:35,630
be writing up about

00:17:33,820 --> 00:17:40,130
so you can fix this right

00:17:35,630 --> 00:17:41,480
and there is out cute thing it's

00:17:40,130 --> 00:17:42,890
actually way more useful for these

00:17:41,480 --> 00:17:45,380
things it's basically the inverse of Pi

00:17:42,890 --> 00:17:46,549
so in by you basically select which

00:17:45,380 --> 00:17:48,350
dimensions you want to preserve in an

00:17:46,549 --> 00:17:49,940
aggregation and it without you to

00:17:48,350 --> 00:17:53,540
specify which one do I want to throw

00:17:49,940 --> 00:17:55,010
away and in this case he okay I don't

00:17:53,540 --> 00:17:57,230
wish I mentioned tolerate failure and

00:17:55,010 --> 00:17:58,820
this is the instance so just aggregate

00:17:57,230 --> 00:18:00,640
the instance away and keep everything

00:17:58,820 --> 00:18:03,200
else and this is always a safe away

00:18:00,640 --> 00:18:05,059
because sort of you never you might not

00:18:03,200 --> 00:18:07,400
exactly know which other labels you have

00:18:05,059 --> 00:18:08,960
um and also you don't want to

00:18:07,400 --> 00:18:10,850
accidentally aggregated way a label that

00:18:08,960 --> 00:18:14,690
actually might then again as before and

00:18:10,850 --> 00:18:16,880
hide a fader and was that we basically

00:18:14,690 --> 00:18:19,070
get a actually well working rural here

00:18:16,880 --> 00:18:22,220
and because this will for assume that

00:18:19,070 --> 00:18:24,980
each Messer part combination page us if

00:18:22,220 --> 00:18:29,929
this combination doesn't work for our

00:18:24,980 --> 00:18:32,000
service basically in this locality so

00:18:29,929 --> 00:18:33,830
basically this was stepwise progress to

00:18:32,000 --> 00:18:35,510
how can we build a sane alert that gives

00:18:33,830 --> 00:18:38,030
us the maximum insight and without being

00:18:35,510 --> 00:18:39,500
too noisy and basically not bothering us

00:18:38,030 --> 00:18:43,910
if there's nothing wrong with the

00:18:39,500 --> 00:18:45,200
service as a whole and the next one I

00:18:43,910 --> 00:18:46,790
think we've seen it like twice at least

00:18:45,200 --> 00:18:49,040
now at this conference and probably on

00:18:46,790 --> 00:18:52,309
these five blog posts and this is

00:18:49,040 --> 00:18:56,000
yellower for basically my fight system

00:18:52,309 --> 00:19:02,630
is full and this is a case of federation

00:18:56,000 --> 00:19:04,040
/ capacity right typically how you would

00:19:02,630 --> 00:19:05,960
have done it in the past I guess is that

00:19:04,040 --> 00:19:08,120
you have system checking going to the

00:19:05,960 --> 00:19:10,130
distant asking like helpful that you and

00:19:08,120 --> 00:19:11,000
you have a threshold right and the

00:19:10,130 --> 00:19:12,799
stress was probably ninety percent

00:19:11,000 --> 00:19:16,580
because you want the ten percent

00:19:12,799 --> 00:19:18,350
Headroom so you don't basically so

00:19:16,580 --> 00:19:21,410
basically have some time left to react

00:19:18,350 --> 00:19:24,049
right the fun part about that kind of

00:19:21,410 --> 00:19:26,419
stuff is a if you're at eighty nine

00:19:24,049 --> 00:19:28,400
point nine percent it's fine and then

00:19:26,419 --> 00:19:31,520
some service logs ten lines of I don't

00:19:28,400 --> 00:19:33,620
know some crap and suddenly it's ninety

00:19:31,520 --> 00:19:35,809
nine ninety point zero zero zero one and

00:19:33,620 --> 00:19:37,190
suddenly the world is falling apart

00:19:35,809 --> 00:19:38,990
at least from the perspective of your

00:19:37,190 --> 00:19:41,960
monitoring system and suddenly you have

00:19:38,990 --> 00:19:44,210
to react and everything is wrong this

00:19:41,960 --> 00:19:45,710
cousin of v1 scenario right and this

00:19:44,210 --> 00:19:47,330
causes you in the end

00:19:45,710 --> 00:19:49,429
keep your entire infrastructure at like

00:19:47,330 --> 00:19:51,200
80 percent disk base and basically just

00:19:49,429 --> 00:19:52,789
wasting the other 20% just so you

00:19:51,200 --> 00:19:56,059
basically don't get all these false

00:19:52,789 --> 00:19:58,399
alerts and on the other hand if you have

00:19:56,059 --> 00:19:59,750
something that actually writing a lot of

00:19:58,399 --> 00:20:03,679
stuff to this in a really really short

00:19:59,750 --> 00:20:06,080
time a classical 90% would just give you

00:20:03,679 --> 00:20:08,059
no time at all to it to react right so

00:20:06,080 --> 00:20:11,179
if your this is a 10% but it's filling

00:20:08,059 --> 00:20:13,250
up at 1% per minute it would only be

00:20:11,179 --> 00:20:14,750
notified at 90% and would have 10 the

00:20:13,250 --> 00:20:16,220
minutes time to react right and by the

00:20:14,750 --> 00:20:17,990
time you know what's up it's like 2

00:20:16,220 --> 00:20:19,429
minutes left and basically everything is

00:20:17,990 --> 00:20:21,320
broken

00:20:19,429 --> 00:20:24,880
what's this we are basically doing

00:20:21,320 --> 00:20:27,620
differently so we use predict linear and

00:20:24,880 --> 00:20:29,059
we take the PI system free metric which

00:20:27,620 --> 00:20:32,179
has how many bytes are the left on my

00:20:29,059 --> 00:20:36,230
disk night and we just predict ok where

00:20:32,179 --> 00:20:38,510
will this metric be in 4 hours with

00:20:36,230 --> 00:20:40,730
respect to the data point from now and 1

00:20:38,510 --> 00:20:42,350
hour ago and basically we said is

00:20:40,730 --> 00:20:44,299
special that's you're all right and in

00:20:42,350 --> 00:20:46,700
this case yeah if you predict this 2

00:20:44,299 --> 00:20:48,289
plus 4 hours and we end up sub-zero and

00:20:46,700 --> 00:20:50,390
apparently okay we won't have any more

00:20:48,289 --> 00:20:52,279
discs in four hours we don't actually

00:20:50,390 --> 00:20:53,720
care like we went exactly just be now in

00:20:52,279 --> 00:20:55,940
four hours there will be none left and

00:20:53,720 --> 00:20:58,250
this sort of adapts right if you change

00:20:55,940 --> 00:20:59,630
this just takes two data points and but

00:20:58,250 --> 00:21:01,250
actually if everything is changed

00:20:59,630 --> 00:21:04,850
exponentially this sort of adapts really

00:21:01,250 --> 00:21:06,169
quickly um and was this basically you

00:21:04,850 --> 00:21:09,500
solve the problem off you can even be at

00:21:06,169 --> 00:21:12,140
95% or 99% as soon as the dis use

00:21:09,500 --> 00:21:13,130
doesn't grow and nothing will happen

00:21:12,140 --> 00:21:14,960
loading - right

00:21:13,130 --> 00:21:16,490
and on the other hand if something's

00:21:14,960 --> 00:21:19,070
filling up like an NP this is filling up

00:21:16,490 --> 00:21:26,840
rapidly it will warn you way way before

00:21:19,070 --> 00:21:28,850
it actually happens okay so these sort

00:21:26,840 --> 00:21:30,500
of alerts and as I've told you each

00:21:28,850 --> 00:21:31,909
learning rule has the expression and

00:21:30,500 --> 00:21:34,309
every result when this expression is one

00:21:31,909 --> 00:21:35,840
and Earth right and so one word doesn't

00:21:34,309 --> 00:21:40,039
mean one alert one over can actually

00:21:35,840 --> 00:21:41,179
mean hundreds of orders and we've all

00:21:40,039 --> 00:21:42,890
these alerting rules and there's

00:21:41,179 --> 00:21:45,890
basically living in our promises service

00:21:42,890 --> 00:21:47,240
and doesn't really matter in which cases

00:21:45,890 --> 00:21:49,070
are respectively we just know they're

00:21:47,240 --> 00:21:52,220
living somewhere and they're falling out

00:21:49,070 --> 00:21:54,040
of there and if you're 50 service and

00:21:52,220 --> 00:21:57,340
they all have people learning words

00:21:54,040 --> 00:22:00,120
waiting probably some always firing

00:21:57,340 --> 00:22:03,010
right and what you get is a stream of

00:22:00,120 --> 00:22:04,240
just hey something is wrong and here's

00:22:03,010 --> 00:22:06,070
some labels and here's an alluring name

00:22:04,240 --> 00:22:08,530
and maybe some descriptions and just

00:22:06,070 --> 00:22:09,970
sort of falls out of it right and you

00:22:08,530 --> 00:22:11,770
have redundancy in your promises service

00:22:09,970 --> 00:22:13,750
so you might have like here in this case

00:22:11,770 --> 00:22:16,930
and you have the same alerts coming out

00:22:13,750 --> 00:22:18,660
again and this is all streaming you an

00:22:16,930 --> 00:22:22,210
upwards for you alerting

00:22:18,660 --> 00:22:23,620
and just sort of a presents and but this

00:22:22,210 --> 00:22:26,770
is where the allotment I supposed to

00:22:23,620 --> 00:22:29,950
basically jump in and the alert manager

00:22:26,770 --> 00:22:32,350
basically catches all your dirt and is

00:22:29,950 --> 00:22:33,760
then responsible for basically building

00:22:32,350 --> 00:22:36,490
something meaningful out of this whole

00:22:33,760 --> 00:22:38,380
stream of stuff that's flowing in so the

00:22:36,490 --> 00:22:39,850
alerting elopement just basically your

00:22:38,380 --> 00:22:43,560
source of true with respect to your

00:22:39,850 --> 00:22:45,730
entire monitoring setup for doing and

00:22:43,560 --> 00:22:47,890
basically here what happens is a lot

00:22:45,730 --> 00:22:49,530
mentor just knows how to group us

00:22:47,890 --> 00:22:53,490
together in a meaningful way you can

00:22:49,530 --> 00:22:55,990
configured of course and basically build

00:22:53,490 --> 00:22:58,630
easy to understand notifications out of

00:22:55,990 --> 00:23:00,640
that so you can turn vertically this

00:22:58,630 --> 00:23:02,110
year into one if occasion telling me

00:23:00,640 --> 00:23:04,630
okay you're fifteen instance for service

00:23:02,110 --> 00:23:06,250
X in this particular zone and three of

00:23:04,630 --> 00:23:07,870
them are high latency ten are higher

00:23:06,250 --> 00:23:09,940
rate and through our case service though

00:23:07,870 --> 00:23:11,650
and then you can have all the energy

00:23:09,940 --> 00:23:13,660
information as well but basically you

00:23:11,650 --> 00:23:15,340
get this really comprehensive thing

00:23:13,660 --> 00:23:18,310
telling you what's wrong and this is

00:23:15,340 --> 00:23:20,290
then router to your page duty your chat

00:23:18,310 --> 00:23:21,520
system all right can't even fight at you

00:23:20,290 --> 00:23:24,940
or take it right whatever you like

00:23:21,520 --> 00:23:28,330
and in the end this gives you one page

00:23:24,940 --> 00:23:29,440
and this essentially means you won't

00:23:28,330 --> 00:23:31,030
spent the first ten minutes of an

00:23:29,440 --> 00:23:32,740
incident just acting acting acting I can

00:23:31,030 --> 00:23:36,490
basically everything that comes in here

00:23:32,740 --> 00:23:38,230
um so this makes a life basically way

00:23:36,490 --> 00:23:39,400
easier right if you as soon as you get a

00:23:38,230 --> 00:23:42,220
page you have a really good insight of

00:23:39,400 --> 00:23:43,990
what's going on and you can even list

00:23:42,220 --> 00:23:46,420
like all the warning level rivers right

00:23:43,990 --> 00:23:50,980
that is a stack sort of providing better

00:23:46,420 --> 00:23:53,700
provide you some hints yeah this is

00:23:50,980 --> 00:23:57,160
basically the object job field of ninja

00:23:53,700 --> 00:23:59,110
and yeah basically as each node is just

00:23:57,160 --> 00:24:01,120
like a set of labels you can also apply

00:23:59,110 --> 00:24:02,950
silences right like some stuff is just

00:24:01,120 --> 00:24:05,290
for example a certain machine machine is

00:24:02,950 --> 00:24:06,340
maintenance you can just have whatever

00:24:05,290 --> 00:24:08,740
system a person put

00:24:06,340 --> 00:24:10,419
into maintenance and fighter silence

00:24:08,740 --> 00:24:13,419
with a lab manager which is basically

00:24:10,419 --> 00:24:16,179
due to all the alerts that have this

00:24:13,419 --> 00:24:17,500
particular note as an instance later so

00:24:16,179 --> 00:24:19,450
you can basically also silence along all

00:24:17,500 --> 00:24:22,210
dimensions right and you can silence

00:24:19,450 --> 00:24:24,610
kannaway deployments you can silence the

00:24:22,210 --> 00:24:25,600
entire development cluster I'm certain

00:24:24,610 --> 00:24:29,890
now what certain wrecks whatever you

00:24:25,600 --> 00:24:31,480
like and then as inhibition and this is

00:24:29,890 --> 00:24:34,240
sort of hard to understand because it's

00:24:31,480 --> 00:24:35,490
really all put a configure but

00:24:34,240 --> 00:24:37,799
inhibition is actually really powerful

00:24:35,490 --> 00:24:40,360
inhibition lets you basically

00:24:37,799 --> 00:24:42,970
cross-correlate alerts and if a certain

00:24:40,360 --> 00:24:45,929
word exists you can define rules on

00:24:42,970 --> 00:24:49,240
which other loads in which one might be

00:24:45,929 --> 00:24:52,000
silenced right so if you've no data set

00:24:49,240 --> 00:24:53,320
on fire that's kind of bad and and it

00:24:52,000 --> 00:24:54,789
guarantees you that there will be a lot

00:24:53,320 --> 00:24:56,049
of stuff paging you for other stuff

00:24:54,789 --> 00:24:59,169
right like basically everything running

00:24:56,049 --> 00:25:00,850
in there and you probably don't want to

00:24:59,169 --> 00:25:02,740
spend time acting these pages right

00:25:00,850 --> 00:25:04,929
because even if alert manager groups

00:25:02,740 --> 00:25:06,039
these things together you have many many

00:25:04,929 --> 00:25:07,960
different services running there right

00:25:06,039 --> 00:25:09,940
so this would still mean doesn't send

00:25:07,960 --> 00:25:12,039
dozens of pages and so you can just

00:25:09,940 --> 00:25:14,110
define this inhibition rules and this

00:25:12,039 --> 00:25:16,059
across like an experiment sample but you

00:25:14,110 --> 00:25:17,770
can just define okay if a certain aspect

00:25:16,059 --> 00:25:20,020
is wrong entirely everything that's

00:25:17,770 --> 00:25:21,460
below that and it's just not of interest

00:25:20,020 --> 00:25:27,190
to me right now because I flex this

00:25:21,460 --> 00:25:29,230
bigger issue after dealers yeah but it's

00:25:27,190 --> 00:25:33,730
still on magic and rainbows right and

00:25:29,230 --> 00:25:38,610
ponies and I wanted to prove to you that

00:25:33,730 --> 00:25:41,860
you can actually that you can actually

00:25:38,610 --> 00:25:45,070
do anomaly detection in a way and was

00:25:41,860 --> 00:25:47,380
our doing magic and here's one example

00:25:45,070 --> 00:25:48,870
and let's say of traffic right and

00:25:47,380 --> 00:25:51,250
you're probably interested in to

00:25:48,870 --> 00:25:53,020
basically it's not traffic normal with

00:25:51,250 --> 00:25:54,850
respect to last week or last month right

00:25:53,020 --> 00:25:56,980
you want some sort of notice if

00:25:54,850 --> 00:25:58,510
something goes really wrong or if

00:25:56,980 --> 00:26:02,980
something goes really right and I can

00:25:58,510 --> 00:26:04,419
use bumped you and refuses and so this

00:26:02,980 --> 00:26:07,600
blue curve here is just our traffic over

00:26:04,419 --> 00:26:09,070
the last few days right and if you want

00:26:07,600 --> 00:26:10,779
to compare our traffic now to that it's

00:26:09,070 --> 00:26:12,190
kind of bad because all these spikes and

00:26:10,779 --> 00:26:13,899
it's some pretty accurate you can't

00:26:12,190 --> 00:26:16,570
really make a meaningful expression

00:26:13,899 --> 00:26:17,980
based on that and but we have the whole

00:26:16,570 --> 00:26:19,540
printers function

00:26:17,980 --> 00:26:21,310
and this actually loves you to do

00:26:19,540 --> 00:26:23,860
exponential smoothing so based on a

00:26:21,310 --> 00:26:25,210
certain window and their values

00:26:23,860 --> 00:26:26,920
previously to one value get

00:26:25,210 --> 00:26:29,320
exponentially as important but basically

00:26:26,920 --> 00:26:31,930
used to turn this blue curve into this

00:26:29,320 --> 00:26:34,000
like smooth nice red curve giving you an

00:26:31,930 --> 00:26:37,900
accurate representation of how way

00:26:34,000 --> 00:26:39,610
traffic behaved over days and then we

00:26:37,900 --> 00:26:40,990
can actually say okay everything in

00:26:39,610 --> 00:26:43,570
between like class minus ninety percent

00:26:40,990 --> 00:26:46,450
of that is something that seems normal

00:26:43,570 --> 00:26:49,120
to me and everything below - when you

00:26:46,450 --> 00:26:50,980
are above past twenty is uploaded and

00:26:49,120 --> 00:26:52,840
then you can basically you can just

00:26:50,980 --> 00:26:54,400
define this year right so we take our

00:26:52,840 --> 00:26:58,120
current recurse rate over the last five

00:26:54,400 --> 00:27:01,450
minutes and substract basically this

00:26:58,120 --> 00:27:02,620
news and value from seven days ago and

00:27:01,450 --> 00:27:05,740
just takes the absolute right and if

00:27:02,620 --> 00:27:08,110
this is more than twenty percent of this

00:27:05,740 --> 00:27:10,030
basically red curve we basically get

00:27:08,110 --> 00:27:11,620
exactly busy and right and if a data

00:27:10,030 --> 00:27:14,530
point is in the red here like the red

00:27:11,620 --> 00:27:15,760
two dots and it's abnormal and as long

00:27:14,530 --> 00:27:18,460
as it's in these two dashed lines

00:27:15,760 --> 00:27:19,840
everything is fine so this is sort of

00:27:18,460 --> 00:27:21,970
like practical anomaly detection right

00:27:19,840 --> 00:27:23,350
you define a very constrained set of

00:27:21,970 --> 00:27:26,740
what you actually want to observe and

00:27:23,350 --> 00:27:29,230
what the abnormal thing is so no magic

00:27:26,740 --> 00:27:31,420
here just like a plane from easiest

00:27:29,230 --> 00:27:32,830
prompt you i'll rule let's define and

00:27:31,420 --> 00:27:38,050
what you want to see and what you

00:27:32,830 --> 00:27:40,860
consider abnormal so this is sort of

00:27:38,050 --> 00:27:45,180
taken from blog post I think Brian um

00:27:40,860 --> 00:27:47,380
and this is kind of shows why automated

00:27:45,180 --> 00:27:50,890
alerting correlation etc doesn't really

00:27:47,380 --> 00:27:52,150
work here we have metric instance lately

00:27:50,890 --> 00:27:54,430
the seconds mean five minutes which

00:27:52,150 --> 00:27:56,650
gives us the mean latency over the last

00:27:54,430 --> 00:27:59,590
five minutes for each instance of our

00:27:56,650 --> 00:28:01,300
service so we basically want to define

00:27:59,590 --> 00:28:05,200
that we want to get an alert in a

00:28:01,300 --> 00:28:07,030
certain instance is out of the range of

00:28:05,200 --> 00:28:09,820
two standard deviations of the instance

00:28:07,030 --> 00:28:11,950
a collaborative across all instances so

00:28:09,820 --> 00:28:14,200
this is current comes this we write it

00:28:11,950 --> 00:28:15,790
like sort of follow it all and but this

00:28:14,200 --> 00:28:19,360
is our rule and it's kind of complex as

00:28:15,790 --> 00:28:21,130
this but it's sort of work and then you

00:28:19,360 --> 00:28:22,900
notice that you have this sort of

00:28:21,130 --> 00:28:25,510
special condition so if all your

00:28:22,900 --> 00:28:26,920
instances are behaving the same and all

00:28:25,510 --> 00:28:28,960
latency of like I don't know hundred

00:28:26,920 --> 00:28:31,640
milliseconds and your sanity VA ssin

00:28:28,960 --> 00:28:33,290
shrinks and suddenly

00:28:31,640 --> 00:28:35,660
even a slight deviation from the mean

00:28:33,290 --> 00:28:37,910
means this what fire even though it's

00:28:35,660 --> 00:28:41,540
like percentage-wise it's it's almost

00:28:37,910 --> 00:28:43,190
exactly yeah being I see others so you

00:28:41,540 --> 00:28:45,230
get a sub condition which you can do in

00:28:43,190 --> 00:28:46,610
promises and you can just chain this by

00:28:45,230 --> 00:28:49,880
another woman by another expression

00:28:46,610 --> 00:28:53,450
which is okay I'm all of the above but

00:28:49,880 --> 00:28:55,670
also I only do this if actually this

00:28:53,450 --> 00:28:57,470
particular instance has a latency more

00:28:55,670 --> 00:29:01,700
than two standard deviations above the

00:28:57,470 --> 00:29:03,320
mean and also 20% above right so we sort

00:29:01,700 --> 00:29:06,100
of chaining this up and yourself

00:29:03,320 --> 00:29:10,220
let me laminated this one special case

00:29:06,100 --> 00:29:11,990
okay then you realize oh yeah if I flow

00:29:10,220 --> 00:29:14,720
traffic my instances are warming up and

00:29:11,990 --> 00:29:17,620
has called caches and then Milady's are

00:29:14,720 --> 00:29:19,640
always slow okay so I only care about

00:29:17,620 --> 00:29:22,040
instances which I fight traffic anyway

00:29:19,640 --> 00:29:24,920
or at least I'm traffic and so only

00:29:22,040 --> 00:29:26,690
apply or Utley both plus and the

00:29:24,920 --> 00:29:32,120
instance should have a request rate of

00:29:26,690 --> 00:29:34,970
at least one QPS yeah I've enjoyed it

00:29:32,120 --> 00:29:37,850
and but basically this is like very

00:29:34,970 --> 00:29:40,220
dense expression right like expressing a

00:29:37,850 --> 00:29:42,470
lot of stuff and heading in a lot of

00:29:40,220 --> 00:29:44,390
different cases and if you imagine that

00:29:42,470 --> 00:29:46,280
you know as opposed to have some magic

00:29:44,390 --> 00:29:48,080
system detecting all of these that we

00:29:46,280 --> 00:29:49,400
domain-specific things for you you can

00:29:48,080 --> 00:29:51,290
kind of imagine that this does not

00:29:49,400 --> 00:29:55,370
really work but this actually does work

00:29:51,290 --> 00:29:57,110
if you want if you want to do it yeah

00:29:55,370 --> 00:29:59,450
and siphoning of us alright you want to

00:29:57,110 --> 00:30:01,160
be safe eating and you want to take

00:29:59,450 --> 00:30:02,180
what's wrong and then do something no

00:30:01,160 --> 00:30:07,070
infrastructure and shift everything

00:30:02,180 --> 00:30:09,200
around that can work sometimes right so

00:30:07,070 --> 00:30:11,990
let's say if this one on earth um which

00:30:09,200 --> 00:30:14,150
can see your NTP is your time so I mean

00:30:11,990 --> 00:30:15,740
just drifting on this one note and you

00:30:14,150 --> 00:30:18,590
know okay I always have to just restart

00:30:15,740 --> 00:30:20,420
the NTP Damon or something okay you can

00:30:18,590 --> 00:30:21,890
you can define basically web book which

00:30:20,420 --> 00:30:24,680
receives notification from the alert

00:30:21,890 --> 00:30:26,420
manager and about certain alerts and

00:30:24,680 --> 00:30:28,580
then you can have this web book

00:30:26,420 --> 00:30:30,820
basically inspect the total set of

00:30:28,580 --> 00:30:34,430
alerts that were sent in stratification

00:30:30,820 --> 00:30:37,070
and then can take an action right so if

00:30:34,430 --> 00:30:38,660
this alert is like NTP adrift you can

00:30:37,070 --> 00:30:40,670
you can expect the instance table and

00:30:38,660 --> 00:30:42,710
just have a small tool that goes out and

00:30:40,670 --> 00:30:44,870
just post the NTP demon it's not right

00:30:42,710 --> 00:30:46,970
so this actually works but

00:30:44,870 --> 00:30:48,830
as before we have a very constrained set

00:30:46,970 --> 00:30:51,289
of problems we want to catch and a very

00:30:48,830 --> 00:30:54,169
constrained solution we're not just

00:30:51,289 --> 00:30:55,700
having basically an infinite space of

00:30:54,169 --> 00:30:57,860
potential problems and infinite space uh

00:30:55,700 --> 00:30:59,960
prevented potential solutions that might

00:30:57,860 --> 00:31:01,490
basically break everything in a really

00:30:59,960 --> 00:31:04,039
really weird way because this kind of

00:31:01,490 --> 00:31:07,720
stuff is really dangerous but yeah

00:31:04,039 --> 00:31:07,720
practically totally possible as well

00:31:07,840 --> 00:31:24,279
okay Thank You favi on any questions

00:31:25,299 --> 00:31:33,140
let's give it a second

00:31:28,659 --> 00:31:40,510
if not this one it always takes a second

00:31:33,140 --> 00:31:44,090
and then there's many so we talked about

00:31:40,510 --> 00:31:46,720
scaling that a parameter itself what are

00:31:44,090 --> 00:31:52,179
the recommendations about that manager

00:31:46,720 --> 00:31:54,529
so one one premises of just one mobile

00:31:52,179 --> 00:31:55,970
so based on the function function

00:31:54,529 --> 00:31:58,070
instead of what allotment it does for

00:31:55,970 --> 00:32:00,260
you it always needs a full view of stuff

00:31:58,070 --> 00:32:02,149
and basically inhibitions for example

00:32:00,260 --> 00:32:03,380
right if you cross-correlate Allred's by

00:32:02,149 --> 00:32:05,059
some certain routes you have to no other

00:32:03,380 --> 00:32:07,130
no that's right there's really no

00:32:05,059 --> 00:32:08,720
sharding or that means you just have to

00:32:07,130 --> 00:32:12,169
make it perform enough and I haven't

00:32:08,720 --> 00:32:14,870
benchmarked it yet but we sort of expect

00:32:12,169 --> 00:32:16,520
the scales were like many thousands of

00:32:14,870 --> 00:32:20,929
nodes at the same time probably hands or

00:32:16,520 --> 00:32:22,370
thousands yeah if at some point that

00:32:20,929 --> 00:32:25,250
just doesn't work at all anymore for

00:32:22,370 --> 00:32:27,200
your org then you might have separate

00:32:25,250 --> 00:32:29,270
alert managers but I think that's yeah

00:32:27,200 --> 00:32:31,789
you can think about charting right so if

00:32:29,270 --> 00:32:33,260
you have like I don't know to some

00:32:31,789 --> 00:32:34,909
organizations in there in the company

00:32:33,260 --> 00:32:36,470
but no you won't want to code at

00:32:34,909 --> 00:32:38,270
anything you can you can sort of shout

00:32:36,470 --> 00:32:41,710
out at some point right but in general I

00:32:38,270 --> 00:32:41,710
wouldn't worry about it for a long time

00:32:47,070 --> 00:32:53,499
I've probably done this question in this

00:32:49,809 --> 00:32:55,599
room and small to everyone it's someone

00:32:53,499 --> 00:32:58,960
develop some kind of syntax highlighting

00:32:55,599 --> 00:33:01,960
for prom files by now I recall there was

00:32:58,960 --> 00:33:09,729
something like ages ago us Emacs if it's

00:33:01,960 --> 00:33:13,029
possible okay well you didn't okay well

00:33:09,729 --> 00:33:15,519
I only know someone did it for them

00:33:13,029 --> 00:33:17,529
partially awhile ago so it's probably

00:33:15,519 --> 00:33:20,259
not up to date anymore it would be

00:33:17,529 --> 00:33:21,669
really cool if someone yeah if that if

00:33:20,259 --> 00:33:24,669
someone would write that for all the

00:33:21,669 --> 00:33:29,019
different editors the highlighting would

00:33:24,669 --> 00:33:30,700
be recall just to comment on that yeah

00:33:29,019 --> 00:33:33,729
so you can open pull request to the

00:33:30,700 --> 00:33:36,789
linguist repo at github so you could add

00:33:33,729 --> 00:33:38,289
prom QL or whatever and I mentioned it

00:33:36,789 --> 00:33:40,389
to someone there and they said pull

00:33:38,289 --> 00:33:48,899
request welcome so I mean anyone that

00:33:40,389 --> 00:33:52,289
wants to do it anyone else all right

00:33:48,899 --> 00:33:52,289

YouTube URL: https://www.youtube.com/watch?v=yrK6z3fpu1E


