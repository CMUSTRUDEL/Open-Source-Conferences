Title: PromCon 2016: Lightning Talks - Synthetic Browser Monitoring with Prometheus - Matt Bostock
Publication date: 2016-09-04
Playlist: PromCon 2016
Description: 
	* Abstract:

Matt Bostock from CloudFlare explains how he implemented synthetic browser monitoring using Prometheus.

* PromCon website:

https://promcon.io/
Captions: 
	00:00:01,760 --> 00:00:06,660
so hi my name is Matt Bostock I work at

00:00:04,859 --> 00:00:09,690
CloudFlare I'm a systems reliability

00:00:06,660 --> 00:00:11,730
engineer there I also run the Prometheus

00:00:09,690 --> 00:00:12,720
meet up in London so we're always

00:00:11,730 --> 00:00:13,980
looking for speakers if you're

00:00:12,720 --> 00:00:16,110
interested in talking you're passing by

00:00:13,980 --> 00:00:17,580
London please get in touch you can

00:00:16,110 --> 00:00:21,090
search for the meetup group or meetup

00:00:17,580 --> 00:00:24,810
com so I work at CloudFlare where web

00:00:21,090 --> 00:00:27,329
security and performance company we have

00:00:24,810 --> 00:00:29,189
locations about eighty six different

00:00:27,329 --> 00:00:32,220
locations and this is increasing all the

00:00:29,189 --> 00:00:33,809
time across the world and we're planning

00:00:32,220 --> 00:00:37,199
on putting in a Prometheus instance in

00:00:33,809 --> 00:00:38,429
each location we're still starting out

00:00:37,199 --> 00:00:39,480
with that and we're also hiring so if

00:00:38,429 --> 00:00:43,460
you're interested in helping out and

00:00:39,480 --> 00:00:45,839
getting involved please let me know so

00:00:43,460 --> 00:00:48,629
I'm going to talk about a personal

00:00:45,839 --> 00:00:51,600
project I tried which was basically a

00:00:48,629 --> 00:00:53,609
toy exporter and basically I was

00:00:51,600 --> 00:00:57,059
interested in you really use a

00:00:53,609 --> 00:00:59,609
monitoring where you collect data about

00:00:57,059 --> 00:01:01,350
page load times for example from real

00:00:59,609 --> 00:01:06,180
user requests and often this is a

00:01:01,350 --> 00:01:08,610
callback that goes to an event store and

00:01:06,180 --> 00:01:10,530
it allows you to see how real user

00:01:08,610 --> 00:01:12,299
requests are performing and you can get

00:01:10,530 --> 00:01:14,009
this kind of service from pingdom New

00:01:12,299 --> 00:01:15,450
Relic that kind of thing and I was

00:01:14,009 --> 00:01:17,549
interested like how could you do

00:01:15,450 --> 00:01:20,490
something similar in prometheus and I

00:01:17,549 --> 00:01:23,070
decided I didn't want to track real user

00:01:20,490 --> 00:01:24,000
real user requests because you need in

00:01:23,070 --> 00:01:26,219
an event store and that's quite

00:01:24,000 --> 00:01:28,710
complicated but I was looking and see

00:01:26,219 --> 00:01:30,799
what could I do with say a synthetic

00:01:28,710 --> 00:01:35,310
probe so I started looking at the

00:01:30,799 --> 00:01:39,710
navigation timings API which is it's a

00:01:35,310 --> 00:01:42,539
w3 spec and it basically allows you to

00:01:39,710 --> 00:01:45,240
get these metrics about our page load

00:01:42,539 --> 00:01:47,250
times how long it took to connect so

00:01:45,240 --> 00:01:49,530
these are from the perspective of a

00:01:47,250 --> 00:01:53,340
browser so how long did it take for the

00:01:49,530 --> 00:01:55,680
Dom to load and these are all stored in

00:01:53,340 --> 00:01:56,880
the using the UNIX epoque so you can

00:01:55,680 --> 00:01:59,130
subtract one from the other and get a

00:01:56,880 --> 00:02:01,920
timeline of how the page looks if you've

00:01:59,130 --> 00:02:04,340
ever use the network view when you use

00:02:01,920 --> 00:02:10,050
chrome devtools you this is basically

00:02:04,340 --> 00:02:12,330
what that uses so okay so I mean I'm not

00:02:10,050 --> 00:02:14,520
a JavaScript expert but I had a look and

00:02:12,330 --> 00:02:15,190
how can I get this information while you

00:02:14,520 --> 00:02:20,020
can

00:02:15,190 --> 00:02:22,150
you can run this query in the console

00:02:20,020 --> 00:02:23,710
and you can kind of get these numbers

00:02:22,150 --> 00:02:26,710
and I thought well how can I get this

00:02:23,710 --> 00:02:29,020
into Prometheus and I remembered well I

00:02:26,710 --> 00:02:33,220
have this little web application I wrote

00:02:29,020 --> 00:02:34,600
and go a couple years back and I wanted

00:02:33,220 --> 00:02:36,010
to write some acceptance test for it I

00:02:34,600 --> 00:02:37,210
never actually completed them but I

00:02:36,010 --> 00:02:39,600
thought one of the things that would be

00:02:37,210 --> 00:02:41,800
fun was to do some acceptance tests from

00:02:39,600 --> 00:02:44,710
from browsers point of view so i use

00:02:41,800 --> 00:02:46,630
this library called agouti which uses

00:02:44,710 --> 00:02:49,000
the webdriver protocol which is another

00:02:46,630 --> 00:02:50,980
w3 spec if you've ever used selenium

00:02:49,000 --> 00:02:54,550
it's it's basically a way of driving a

00:02:50,980 --> 00:02:56,260
browser and there are multiple there are

00:02:54,550 --> 00:02:58,990
multiple browsers that are not supported

00:02:56,260 --> 00:03:01,660
so you can use the chrome driver for

00:02:58,990 --> 00:03:04,090
example which provides you with a

00:03:01,660 --> 00:03:05,800
basically a headless Chrome browser so

00:03:04,090 --> 00:03:08,170
yeah the Gucci library is great it's a

00:03:05,800 --> 00:03:09,580
design to work with ginkgo which is a go

00:03:08,170 --> 00:03:11,290
testing framework but you can also use

00:03:09,580 --> 00:03:14,530
it as a standalone library it's

00:03:11,290 --> 00:03:16,690
fantastic and developers are really

00:03:14,530 --> 00:03:18,550
responsive it's also really really well

00:03:16,690 --> 00:03:19,900
documented so I'd already use this

00:03:18,550 --> 00:03:21,640
previously so I thought well maybe I can

00:03:19,900 --> 00:03:24,570
use this to try and get these these

00:03:21,640 --> 00:03:27,400
timing metrics out of out of the browser

00:03:24,570 --> 00:03:30,160
so what I came up with is the webdriver

00:03:27,400 --> 00:03:32,680
exporter which is a bit like the black

00:03:30,160 --> 00:03:35,350
box exporter but it creates a browser

00:03:32,680 --> 00:03:37,450
session and sends a synthetic probe to

00:03:35,350 --> 00:03:39,160
an end point and then provides the

00:03:37,450 --> 00:03:43,890
timing so if I want to pro prometheus 2

00:03:39,160 --> 00:03:43,890
I are right now I just click this

00:03:44,180 --> 00:03:48,349
and so we get all the metrics that we

00:03:46,459 --> 00:03:50,659
just saw in the console but in an

00:03:48,349 --> 00:03:52,819
exporter and all based on the UNIX epoxy

00:03:50,659 --> 00:03:54,379
again you can subtract one from the

00:03:52,819 --> 00:03:56,120
other and I'm just providing basically

00:03:54,379 --> 00:03:58,810
the raw data sits quite flexible what

00:03:56,120 --> 00:04:00,680
you can do with it it's also counting

00:03:58,810 --> 00:04:01,969
javascript warnings so if you want to

00:04:00,680 --> 00:04:03,950
just check a page and see if there are

00:04:01,969 --> 00:04:08,629
any javascript errors and it provides

00:04:03,950 --> 00:04:09,530
that as well and so I think there's

00:04:08,629 --> 00:04:12,829
maybe an issue because at the moment

00:04:09,530 --> 00:04:14,780
what I'm doing is stopping the browser

00:04:12,829 --> 00:04:16,340
session and starting it on each probe

00:04:14,780 --> 00:04:17,959
and the reason for that is I want to

00:04:16,340 --> 00:04:19,160
make sure like I have a clean cache and

00:04:17,959 --> 00:04:20,329
that kind of thing it's probably a more

00:04:19,160 --> 00:04:23,030
efficient way of doing that so at the

00:04:20,329 --> 00:04:24,830
moment it's quite a lot like spikes and

00:04:23,030 --> 00:04:26,690
I'm not sure if that's an issue of

00:04:24,830 --> 00:04:27,949
whether it's just normal I basically

00:04:26,690 --> 00:04:31,099
this is showing like the the full

00:04:27,949 --> 00:04:34,789
end-to-end page load time and that's

00:04:31,099 --> 00:04:39,889
basically it so the it's on github so

00:04:34,789 --> 00:04:41,870
anyone can see it there's a link here so

00:04:39,889 --> 00:04:43,759
yeah I'm not using it in production or

00:04:41,870 --> 00:04:44,990
anything it's kind of a toy but if you

00:04:43,759 --> 00:04:47,270
find it useful please let me know

00:04:44,990 --> 00:04:50,180
because I'm I be keen to keep improving

00:04:47,270 --> 00:04:58,599
it if people do find it useful thank you

00:04:50,180 --> 00:04:58,599

YouTube URL: https://www.youtube.com/watch?v=T-iHuDd9rCU


