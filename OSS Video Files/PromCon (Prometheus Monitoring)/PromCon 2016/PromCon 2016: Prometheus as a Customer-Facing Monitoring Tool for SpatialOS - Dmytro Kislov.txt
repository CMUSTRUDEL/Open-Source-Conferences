Title: PromCon 2016: Prometheus as a Customer-Facing Monitoring Tool for SpatialOS - Dmytro Kislov
Publication date: 2016-09-04
Playlist: PromCon 2016
Description: 
	* Abstract:

At Improbable we provide a platform for spatially distributed simulations to our customers. We use Prometheus for monitoring our internal microservice stack, but also offer it as a first class customer-facing system on our platform. As far as we know, we are currently running one of the largest Prometheus set ups, with multiple clusters of federated Prometheus stacks. Given the nature of the simulations built by our users, monitoring becomes their go-to tool for debugging and troubleshooting. Since our customer facing Prometheus stack is multitenant, we have also implemented monitoring data isolation based on ACLs.

In this talk we will be discussing our federation set up and monitoring data isolation.

* Speaker biography:

Gopher. Improbable Software Engineer and Site Reliability Engineer.

* Slides:

https://docs.google.com/a/improbable.io/presentation/d/19I5XNAKd8NXQYZi11yax5-8c3FopSYIhQhOlkUQc0TM/edit?usp=sharing

* PromCon website:

https://promcon.io/
Captions: 
	00:00:00,000 --> 00:00:07,080
cool thank you all right so my name is

00:00:03,990 --> 00:00:09,330
dima i work at improbable I'm one of the

00:00:07,080 --> 00:00:10,980
infrastructure engineers there and today

00:00:09,330 --> 00:00:13,320
we'll be talking about how we use

00:00:10,980 --> 00:00:15,690
Prometheus Adam Pro Bowl the talk will

00:00:13,320 --> 00:00:17,520
cover three main parts one of them will

00:00:15,690 --> 00:00:19,260
be our general setup how we do the

00:00:17,520 --> 00:00:21,570
sharding how we do the Federation the

00:00:19,260 --> 00:00:24,180
other part will be using Prometheus as a

00:00:21,570 --> 00:00:26,010
user facing tool in a multi-tenant

00:00:24,180 --> 00:00:27,810
environment so we'll talk a little bit

00:00:26,010 --> 00:00:29,939
about that and the third part is going

00:00:27,810 --> 00:00:32,850
to be bonus part I'll talk about a

00:00:29,939 --> 00:00:36,270
little bit of em for magic that we have

00:00:32,850 --> 00:00:39,239
to do for recording rules okay so before

00:00:36,270 --> 00:00:41,489
I get into that I quickly want to talk

00:00:39,239 --> 00:00:44,160
about what we do it will explain some of

00:00:41,489 --> 00:00:46,620
the design choices that we have made so

00:00:44,160 --> 00:00:49,649
speacial OS is a distributed operating

00:00:46,620 --> 00:00:51,510
system the distributed operating system

00:00:49,649 --> 00:00:54,449
is marketing talk I just lifted it from

00:00:51,510 --> 00:00:56,820
our promo slides but the idea is we

00:00:54,449 --> 00:00:59,550
basically are a platform that allows

00:00:56,820 --> 00:01:03,870
users to run large-scale online

00:00:59,550 --> 00:01:06,780
simulations that's what we do ok so how

00:01:03,870 --> 00:01:09,240
does it look from the above so we have

00:01:06,780 --> 00:01:11,369
put the purpose of this talk two main

00:01:09,240 --> 00:01:13,590
clusters that we are operating there is

00:01:11,369 --> 00:01:17,850
the platform cluster so that's where all

00:01:13,590 --> 00:01:21,630
our front ends and the user facing api's

00:01:17,850 --> 00:01:23,670
are so there we have the API server the

00:01:21,630 --> 00:01:25,680
authentication server the proxy server

00:01:23,670 --> 00:01:28,140
i'll talk about them in detail a little

00:01:25,680 --> 00:01:30,329
bit later and we have the platform on

00:01:28,140 --> 00:01:32,610
the train so this is what monitors this

00:01:30,329 --> 00:01:36,000
particular cluster our internal services

00:01:32,610 --> 00:01:39,000
in there we have about three of them up

00:01:36,000 --> 00:01:41,400
to production ones one stage in one the

00:01:39,000 --> 00:01:43,140
other part is the deployment cluster so

00:01:41,400 --> 00:01:46,500
the deployment cluster is the heart of

00:01:43,140 --> 00:01:49,380
kind of spatial OS this is where users

00:01:46,500 --> 00:01:51,299
simulations are running and normal

00:01:49,380 --> 00:01:53,790
deployment of simulation consists of a

00:01:51,299 --> 00:01:55,470
bunch of things the main ones are the

00:01:53,790 --> 00:01:57,840
wrong time that's what we provide this

00:01:55,470 --> 00:01:59,759
is our code and then the workers that

00:01:57,840 --> 00:02:02,100
users provide so the workers is what

00:01:59,759 --> 00:02:04,290
calculates the next simulation step a

00:02:02,100 --> 00:02:07,890
user worker can be a game engine or

00:02:04,290 --> 00:02:11,270
maybe some crazy simulation engine and

00:02:07,890 --> 00:02:13,190
for that we have two separate instance

00:02:11,270 --> 00:02:15,830
of Prometheus we have infrastructure

00:02:13,190 --> 00:02:17,870
monitoring they in from home and we have

00:02:15,830 --> 00:02:20,570
the simulation launched in the symbol so

00:02:17,870 --> 00:02:22,820
inform on as it says on the tin it's for

00:02:20,570 --> 00:02:25,370
our monitoring infrastructure services

00:02:22,820 --> 00:02:28,220
sim mom is what will later be kind of

00:02:25,370 --> 00:02:32,660
exposed to the user that's what monitors

00:02:28,220 --> 00:02:34,370
their simulations again the other thing

00:02:32,660 --> 00:02:36,800
that's kind of weird and that causes

00:02:34,370 --> 00:02:39,410
some issues for us is that deployments

00:02:36,800 --> 00:02:41,510
are kind of not standard long-running

00:02:39,410 --> 00:02:43,400
job they can be very different they can

00:02:41,510 --> 00:02:45,050
be super short lived in the order of

00:02:43,400 --> 00:02:47,060
minutes like when you're trying to do an

00:02:45,050 --> 00:02:49,610
experiment where you're trying to make

00:02:47,060 --> 00:02:51,800
this go to work at loss or they can be

00:02:49,610 --> 00:02:53,390
something extremely long-lived for

00:02:51,800 --> 00:02:54,890
example a production game this can be

00:02:53,390 --> 00:02:58,130
weeks or month or maybe if you're

00:02:54,890 --> 00:03:01,070
successful years let's hope the other

00:02:58,130 --> 00:03:03,140
option is a big sale I've City

00:03:01,070 --> 00:03:05,870
simulation again really long running

00:03:03,140 --> 00:03:07,640
things the scale of it is also known to

00:03:05,870 --> 00:03:09,530
us at the beginning it's defined by the

00:03:07,640 --> 00:03:11,540
user it can be something really small

00:03:09,530 --> 00:03:13,610
for example one machine again for

00:03:11,540 --> 00:03:15,260
testing or something really big when

00:03:13,610 --> 00:03:17,530
they're running those big simulations

00:03:15,260 --> 00:03:20,630
those big games and the thing that

00:03:17,530 --> 00:03:22,310
connects to the prometheus is that

00:03:20,630 --> 00:03:24,440
they're dynamically named and that's

00:03:22,310 --> 00:03:26,000
what causing quite a few issues for us

00:03:24,440 --> 00:03:28,459
because we don't know the name of it

00:03:26,000 --> 00:03:31,160
this gets to the labels but I will talk

00:03:28,459 --> 00:03:33,560
about that a little bit later okay so

00:03:31,160 --> 00:03:35,660
what does prometheus do for us as the

00:03:33,560 --> 00:03:37,970
engineering organization we use it to

00:03:35,660 --> 00:03:39,830
monitor our production at station

00:03:37,970 --> 00:03:42,040
services we use it to monitor our

00:03:39,830 --> 00:03:45,709
corporate environment for example

00:03:42,040 --> 00:03:47,420
fabricators stash get etc and obviously

00:03:45,709 --> 00:03:50,750
for alerting because everyone loves

00:03:47,420 --> 00:03:53,570
waking up at 2am at night and what does

00:03:50,750 --> 00:03:56,120
it do for the users okay so something we

00:03:53,570 --> 00:03:59,120
actually didn't realize up until later

00:03:56,120 --> 00:04:01,070
like a year ago is that users really

00:03:59,120 --> 00:04:03,290
like metrics and they really want them

00:04:01,070 --> 00:04:05,090
because if you're running something big

00:04:03,290 --> 00:04:07,190
like I don't know couple of hundred

00:04:05,090 --> 00:04:09,500
machine simulation you have a small

00:04:07,190 --> 00:04:11,270
distributed system on our work and

00:04:09,500 --> 00:04:13,700
distributed system and a really good way

00:04:11,270 --> 00:04:15,290
to figure out if it's working if it's

00:04:13,700 --> 00:04:17,359
behaving the way you expected is the

00:04:15,290 --> 00:04:20,330
metrics so we need to provide this to

00:04:17,359 --> 00:04:22,160
the users so that they can debug QA or

00:04:20,330 --> 00:04:23,990
see the performance of their game the

00:04:22,160 --> 00:04:24,500
other thing that we discovered is its

00:04:23,990 --> 00:04:27,350
acts

00:04:24,500 --> 00:04:29,840
quite a useful tool for game design so a

00:04:27,350 --> 00:04:31,820
lot of games that we have they have an

00:04:29,840 --> 00:04:35,180
evolving behavior they can have some

00:04:31,820 --> 00:04:37,640
ecology in the game and to figure out if

00:04:35,180 --> 00:04:39,470
the ecology is kind of doing okay you

00:04:37,640 --> 00:04:41,960
want to see some of those metrics for

00:04:39,470 --> 00:04:44,990
example if you have trees that have been

00:04:41,960 --> 00:04:46,640
spawned due to some rule you want to

00:04:44,990 --> 00:04:48,590
know when the trees overtake the world

00:04:46,640 --> 00:04:50,270
and you have to tweak something in terms

00:04:48,590 --> 00:04:51,850
of your game design or if there is too

00:04:50,270 --> 00:04:55,330
much gold being generated I don't know

00:04:51,850 --> 00:04:58,100
and alerting if the users run in a

00:04:55,330 --> 00:05:01,660
production game they want to be alerted

00:04:58,100 --> 00:05:04,490
when things go wrong okay so all of this

00:05:01,660 --> 00:05:06,590
monitoring pipeline we call them months

00:05:04,490 --> 00:05:11,150
monza everywhere they in from on global

00:05:06,590 --> 00:05:14,180
platform on etc and so next slide this

00:05:11,150 --> 00:05:16,220
is how the monitoring setup generally

00:05:14,180 --> 00:05:19,910
looks so at the very top we have the

00:05:16,220 --> 00:05:22,310
global cluster this cluster has the

00:05:19,910 --> 00:05:23,720
global monitoring the Prometheus this is

00:05:22,310 --> 00:05:27,050
kind of meta monitoring so it's

00:05:23,720 --> 00:05:30,830
monitoring the Prometheus instances on

00:05:27,050 --> 00:05:33,140
other clusters and also some federated

00:05:30,830 --> 00:05:35,750
metrics make it there but it's a very

00:05:33,140 --> 00:05:37,700
limited number then as I mentioned the

00:05:35,750 --> 00:05:39,200
corporate cluster monitoring the

00:05:37,700 --> 00:05:41,690
platform cluster monitoring and now the

00:05:39,200 --> 00:05:44,720
interesting one the deployment cluster

00:05:41,690 --> 00:05:48,229
so there is a split between our stuff so

00:05:44,720 --> 00:05:49,820
that if users suddenly decide to really

00:05:48,229 --> 00:05:52,250
hammer the metrics we at least have

00:05:49,820 --> 00:05:55,490
access to our internal infrastructure

00:05:52,250 --> 00:05:58,460
long train and now the monitoring of the

00:05:55,490 --> 00:06:00,710
deployments so there are this is where

00:05:58,460 --> 00:06:02,840
the Federation hierarchy really comes in

00:06:00,710 --> 00:06:04,550
so we have the symbol that sits at the

00:06:02,840 --> 00:06:07,160
top and then at the bottom we have

00:06:04,550 --> 00:06:08,930
multiple simulation leaves that are the

00:06:07,160 --> 00:06:10,970
ones that actually scrape in the metrics

00:06:08,930 --> 00:06:14,419
from the deployments themselves we would

00:06:10,970 --> 00:06:16,550
love not to run this federated setup but

00:06:14,419 --> 00:06:18,530
at the beginning we realized that given

00:06:16,550 --> 00:06:21,440
a large deployment to multiple large

00:06:18,530 --> 00:06:23,930
deployments we can't fit it on one box

00:06:21,440 --> 00:06:28,970
so we have to go for this federated

00:06:23,930 --> 00:06:30,860
setup okay so how do all this most

00:06:28,970 --> 00:06:33,710
generally work was the general setup for

00:06:30,860 --> 00:06:36,169
it so we decided to store the context in

00:06:33,710 --> 00:06:38,009
remote git repos this is pretty

00:06:36,169 --> 00:06:40,020
convenient because you always

00:06:38,009 --> 00:06:42,270
who change the configuration and it's an

00:06:40,020 --> 00:06:44,639
easy way to iterate on it so this

00:06:42,270 --> 00:06:47,849
conflict contains the launching targets

00:06:44,639 --> 00:06:50,129
the rules and the alerts and by this

00:06:47,849 --> 00:06:52,139
together with the docker that runs the

00:06:50,129 --> 00:06:54,240
parameters we have another process that

00:06:52,139 --> 00:06:56,339
monitors this git repo and whenever

00:06:54,240 --> 00:06:59,129
there are changes it just loads the new

00:06:56,339 --> 00:07:00,659
repo checks whether the configuration is

00:06:59,129 --> 00:07:02,759
correct using there I think pronto or

00:07:00,659 --> 00:07:05,849
something sick hubs the parameters and

00:07:02,759 --> 00:07:07,860
then the new config is loaded the other

00:07:05,849 --> 00:07:10,259
thing that we have we have loads of

00:07:07,860 --> 00:07:14,189
magical and for recording rules there

00:07:10,259 --> 00:07:16,349
but that's the bonus part comes later ok

00:07:14,189 --> 00:07:19,110
and this is basically the description of

00:07:16,349 --> 00:07:22,259
how we load this config into the

00:07:19,110 --> 00:07:26,639
Prometheus makes it to github bowl for

00:07:22,259 --> 00:07:29,610
changes loaded into prometheus okay so

00:07:26,639 --> 00:07:32,689
um quick enter into the recording roles

00:07:29,610 --> 00:07:35,759
why do we need them we have quite a few

00:07:32,689 --> 00:07:38,009
really frequently used metrics so we

00:07:35,759 --> 00:07:39,749
want to pre-compute them we have some

00:07:38,009 --> 00:07:42,689
expert expensive expressions again

00:07:39,749 --> 00:07:46,080
recompute that convenient so this is an

00:07:42,689 --> 00:07:48,029
example of sound recording rule and also

00:07:46,080 --> 00:07:50,330
the main metrics that we scraped you in

00:07:48,029 --> 00:07:54,919
the Federation are the recording rules

00:07:50,330 --> 00:07:57,779
so that's how we use them ok so

00:07:54,919 --> 00:08:00,449
Federation the idea behind the

00:07:57,779 --> 00:08:02,580
Federation is that you just it's a way

00:08:00,449 --> 00:08:04,979
to scrape a subset of metrics from a

00:08:02,580 --> 00:08:06,659
Prometheus instance the way you do it is

00:08:04,979 --> 00:08:08,550
you just make a request to slash

00:08:06,659 --> 00:08:10,919
shredder eight and point you provide the

00:08:08,550 --> 00:08:13,769
query inside the match and it picks the

00:08:10,919 --> 00:08:17,069
labels the metrics that match this query

00:08:13,769 --> 00:08:19,439
so what we decided to do is we decided

00:08:17,069 --> 00:08:22,169
to introduce our own convention there so

00:08:19,439 --> 00:08:24,599
if a metric has double colon in it it is

00:08:22,169 --> 00:08:26,219
considered a federated metric so for us

00:08:24,599 --> 00:08:28,740
it was a simple way to distinguish

00:08:26,219 --> 00:08:31,259
between the metrics that were federated

00:08:28,740 --> 00:08:33,630
or that were not federated and again

00:08:31,259 --> 00:08:35,610
since it's all code generated no one has

00:08:33,630 --> 00:08:38,360
to even know about this convention

00:08:35,610 --> 00:08:42,870
unless you're trying to debug something

00:08:38,360 --> 00:08:45,899
ok so why why did the scale of just one

00:08:42,870 --> 00:08:48,600
box not work for us we have loads loads

00:08:45,899 --> 00:08:50,100
of unique time series mainly because

00:08:48,600 --> 00:08:51,140
there are a lot of things that are

00:08:50,100 --> 00:08:54,020
user-defined so

00:08:51,140 --> 00:08:56,870
this metric like play latency it looks

00:08:54,020 --> 00:08:58,400
fine like there is nothing obviously

00:08:56,870 --> 00:09:01,070
wrong and it may be except from node ID

00:08:58,400 --> 00:09:03,740
but the deployment main project name and

00:09:01,070 --> 00:09:06,560
deployment tag all those things are user

00:09:03,740 --> 00:09:10,550
defined so they start exploding really

00:09:06,560 --> 00:09:13,400
quickly in terms of cardinality okay so

00:09:10,550 --> 00:09:16,040
at the very top we have the symbol this

00:09:13,400 --> 00:09:17,840
is what scrapes the federated matrix

00:09:16,040 --> 00:09:19,790
from the same leaves the way it

00:09:17,840 --> 00:09:23,720
discovers the same leaves you just use

00:09:19,790 --> 00:09:25,550
the DNS discovery you have your naming

00:09:23,720 --> 00:09:27,080
convention to figure out which of the

00:09:25,550 --> 00:09:29,450
metrics should be scraped during the

00:09:27,080 --> 00:09:32,180
Federation and has a bit longer data

00:09:29,450 --> 00:09:34,490
retention around 14 days seems to be

00:09:32,180 --> 00:09:37,070
okay for us now we might end up tweaking

00:09:34,490 --> 00:09:39,710
it don't think you can see it from the

00:09:37,070 --> 00:09:43,730
back but this Simone currently has

00:09:39,710 --> 00:09:45,410
something between like 2.1 and 2.5

00:09:43,730 --> 00:09:47,540
million metrics and I think it's just

00:09:45,410 --> 00:09:49,490
kind of from a normal day so there were

00:09:47,540 --> 00:09:51,110
no big production deployments going on

00:09:49,490 --> 00:09:54,590
and interesting thing you can actually

00:09:51,110 --> 00:09:56,390
see here is you can figure out what time

00:09:54,590 --> 00:09:58,520
we finish work because you can see the

00:09:56,390 --> 00:10:00,350
number of metrics going up until like 6

00:09:58,520 --> 00:10:02,660
630 and then because of the data

00:10:00,350 --> 00:10:04,580
retention it starts going down and then

00:10:02,660 --> 00:10:06,350
we have the nightlies from one to two

00:10:04,580 --> 00:10:09,230
and then starts going down again and

00:10:06,350 --> 00:10:13,220
people make it to work so even this is

00:10:09,230 --> 00:10:15,310
fairly guess confidential metric you

00:10:13,220 --> 00:10:18,770
don't want people to know when you work

00:10:15,310 --> 00:10:21,770
okay and the sig leaves that's what's at

00:10:18,770 --> 00:10:23,810
the bottom so they scrape the metrics

00:10:21,770 --> 00:10:26,300
from the deployment endpoints a

00:10:23,810 --> 00:10:28,340
deployment can have loads of metrics

00:10:26,300 --> 00:10:31,400
endpoints different nodes different

00:10:28,340 --> 00:10:33,590
modules expose their own metrics because

00:10:31,400 --> 00:10:36,320
we have multiple sim leaves we need a

00:10:33,590 --> 00:10:38,570
way to figure out how to recharge the

00:10:36,320 --> 00:10:40,640
data between them so the way we do it we

00:10:38,570 --> 00:10:42,620
use the deployment name and the project

00:10:40,640 --> 00:10:45,350
name to figure out which sim leaf is

00:10:42,620 --> 00:10:46,850
responsible for which deployment and the

00:10:45,350 --> 00:10:48,740
sim leaves have much shorter data

00:10:46,850 --> 00:10:51,560
retention it's I think in the order of

00:10:48,740 --> 00:10:54,050
hours and again this is basically number

00:10:51,560 --> 00:10:58,490
of series the spikes is when big

00:10:54,050 --> 00:11:00,800
deployments are coming up okay and this

00:10:58,490 --> 00:11:03,080
is basically an example of sharding so

00:11:00,800 --> 00:11:04,430
there is nothing magical behind sharding

00:11:03,080 --> 00:11:08,640
you just need to

00:11:04,430 --> 00:11:11,070
filling the number of leaves in our case

00:11:08,640 --> 00:11:12,810
you have to modulus we have four of them

00:11:11,070 --> 00:11:14,580
that's why we have before you figure out

00:11:12,810 --> 00:11:16,980
which labels you're going to be sharding

00:11:14,580 --> 00:11:21,260
on and then you decide which ones to

00:11:16,980 --> 00:11:24,390
keep it's pretty convenient because we

00:11:21,260 --> 00:11:26,220
insert all those values in there

00:11:24,390 --> 00:11:29,250
journaling one of the generation parts

00:11:26,220 --> 00:11:31,470
so some of the clusters from forcing

00:11:29,250 --> 00:11:34,560
leaves they are the ones from too and we

00:11:31,470 --> 00:11:36,690
can theoretically scale it up almost

00:11:34,560 --> 00:11:38,250
live with some of the things but we

00:11:36,690 --> 00:11:42,000
actually haven't tried that so I don't

00:11:38,250 --> 00:11:44,820
know that will work okay an interesting

00:11:42,000 --> 00:11:47,340
thing that we discovered is that similes

00:11:44,820 --> 00:11:48,960
could not rely on DNS for service

00:11:47,340 --> 00:11:51,570
discovery that's what we used at the

00:11:48,960 --> 00:11:55,020
beginning it was super convenient we

00:11:51,570 --> 00:11:57,360
used sky DNS as our kind of DNS back end

00:11:55,020 --> 00:11:59,850
are we used it for service discovery all

00:11:57,360 --> 00:12:01,650
the endpoints that export matrix would

00:11:59,850 --> 00:12:03,690
just register there and sing leaves

00:12:01,650 --> 00:12:05,610
would pick them up the problem is at

00:12:03,690 --> 00:12:07,530
some point the metric started randomly

00:12:05,610 --> 00:12:09,630
disappearing and then reappearing is

00:12:07,530 --> 00:12:11,760
really strange took us a while to figure

00:12:09,630 --> 00:12:13,890
it out and then we realized that we

00:12:11,760 --> 00:12:16,290
actually ran out of the DNS response

00:12:13,890 --> 00:12:19,800
sighs so sky Deanna's i think it was

00:12:16,290 --> 00:12:21,890
around 64 k and we couldn't fit all the

00:12:19,800 --> 00:12:25,170
endpoints that needed to be scraped into

00:12:21,890 --> 00:12:27,330
64k partly because we have really long

00:12:25,170 --> 00:12:31,710
domain names and we all have loads of

00:12:27,330 --> 00:12:33,630
them so we decided to use Prometheus's

00:12:31,710 --> 00:12:35,340
blog post to figure out how to fix this

00:12:33,630 --> 00:12:37,350
so they have a really nice write-up

00:12:35,340 --> 00:12:39,780
about how you can do your custom service

00:12:37,350 --> 00:12:42,330
discovery so what we ended up doing is

00:12:39,780 --> 00:12:44,550
instead of clearing the DNS server we

00:12:42,330 --> 00:12:47,340
just looked up the registrations inside

00:12:44,550 --> 00:12:49,470
the tcd because sky DNS uses egcg as the

00:12:47,340 --> 00:12:52,700
back end it has well-defined structure

00:12:49,470 --> 00:12:56,250
as to kind of where the things go so we

00:12:52,700 --> 00:12:58,710
read data CD ourselves pull the data out

00:12:56,250 --> 00:13:01,140
then we can convert it into a file

00:12:58,710 --> 00:13:04,170
that's understandable by Prometheus and

00:13:01,140 --> 00:13:08,400
that's what it uses as targets so that

00:13:04,170 --> 00:13:11,580
was quite fun again so how does the

00:13:08,400 --> 00:13:14,880
metric make it from a deployment all the

00:13:11,580 --> 00:13:16,230
way to the simulation monitoring so on

00:13:14,880 --> 00:13:16,790
the simulation point you can have

00:13:16,230 --> 00:13:19,220
something

00:13:16,790 --> 00:13:21,410
improbable migrations finished with a

00:13:19,220 --> 00:13:25,550
project and a deployment there will be a

00:13:21,410 --> 00:13:28,130
recording rule for this on the on the

00:13:25,550 --> 00:13:29,540
sim leaf and you can see that what i do

00:13:28,130 --> 00:13:31,820
know if you can see but there is a

00:13:29,540 --> 00:13:34,790
double colon in there and that signifies

00:13:31,820 --> 00:13:36,860
that this is a federated metric and the

00:13:34,790 --> 00:13:39,200
actual metric that will be exposed on

00:13:36,860 --> 00:13:41,570
the same leaf will again look something

00:13:39,200 --> 00:13:44,000
like improbable migrations some with

00:13:41,570 --> 00:13:46,520
some number and then the symbol just has

00:13:44,000 --> 00:13:48,770
a config that says that all the metrics

00:13:46,520 --> 00:13:50,480
that have double colon have to be picked

00:13:48,770 --> 00:13:52,970
up by the same one and that's how it

00:13:50,480 --> 00:13:57,530
makes it all the way from the deployment

00:13:52,970 --> 00:13:59,960
onto the simulation monitoring ok so

00:13:57,530 --> 00:14:04,010
this is the part I really wanted to talk

00:13:59,960 --> 00:14:07,700
about so we said that we use Prometheus

00:14:04,010 --> 00:14:09,410
as a user facing to the issues that we

00:14:07,700 --> 00:14:11,750
are facing here is that we have

00:14:09,410 --> 00:14:14,840
multi-tenant environment and with the

00:14:11,750 --> 00:14:18,320
multi-tenancy you want to protect users

00:14:14,840 --> 00:14:19,760
metrics so we know that metrics can be

00:14:18,320 --> 00:14:21,350
very sensitive data you can get a

00:14:19,760 --> 00:14:23,390
competitive advantage by looking at

00:14:21,350 --> 00:14:26,090
someone else's metrics like players

00:14:23,390 --> 00:14:27,920
online or ours plate you know how well

00:14:26,090 --> 00:14:29,870
the company is doing or if you want to

00:14:27,920 --> 00:14:31,670
figure out who is a really weak player

00:14:29,870 --> 00:14:32,930
you can just look up their flags and

00:14:31,670 --> 00:14:35,330
then you know who you want to hunt in

00:14:32,930 --> 00:14:38,060
that game again really important really

00:14:35,330 --> 00:14:40,490
sensitive so we need two types of data

00:14:38,060 --> 00:14:42,350
isolation we need to isolate the data

00:14:40,490 --> 00:14:44,570
between the customers so they can't see

00:14:42,350 --> 00:14:47,480
each other's data but we also don't want

00:14:44,570 --> 00:14:49,400
customers to see our internal platform

00:14:47,480 --> 00:14:51,290
metrics because again this is our data

00:14:49,400 --> 00:14:55,220
we don't want it to we don't want to

00:14:51,290 --> 00:14:58,160
share it with everyone okay so there are

00:14:55,220 --> 00:15:01,070
three main moving parts to make this

00:14:58,160 --> 00:15:03,260
multi-tenancy not much than see this

00:15:01,070 --> 00:15:05,810
data is elation happen there is the

00:15:03,260 --> 00:15:08,870
authentication server so this is kind of

00:15:05,810 --> 00:15:11,480
homemade homegrown ACL server uses

00:15:08,870 --> 00:15:15,080
Google is identity provider implements

00:15:11,480 --> 00:15:17,180
oath to flow and it uses GWT tokens as a

00:15:15,080 --> 00:15:20,600
way to describe the user's permissions

00:15:17,180 --> 00:15:23,840
so the GWT token will encode something

00:15:20,600 --> 00:15:26,900
like this user can read anything in the

00:15:23,840 --> 00:15:29,000
in the project best game ever this is

00:15:26,900 --> 00:15:29,820
obviously not the actual format of the

00:15:29,000 --> 00:15:31,380
token but

00:15:29,820 --> 00:15:34,170
this describes what the bearer of the

00:15:31,380 --> 00:15:38,490
stokin is allowed to do the other moving

00:15:34,170 --> 00:15:41,130
part is the proxy server so we actually

00:15:38,490 --> 00:15:43,620
wrote a whole bunch of proxies it's one

00:15:41,130 --> 00:15:45,930
of them are this proxy server the main

00:15:43,620 --> 00:15:48,180
purpose of it is it gives you access to

00:15:45,930 --> 00:15:50,310
our internal services it's both the

00:15:48,180 --> 00:15:52,290
customers that use it for example when

00:15:50,310 --> 00:15:54,630
they try to go to graph on ax because we

00:15:52,290 --> 00:15:56,640
don't want anyone to be able to go to

00:15:54,630 --> 00:15:59,340
graph on that we want to say that if you

00:15:56,640 --> 00:16:00,960
have access to any monitoring only then

00:15:59,340 --> 00:16:02,760
you can go to graph on it if you don't

00:16:00,960 --> 00:16:05,850
have monitoring access you shouldn't be

00:16:02,760 --> 00:16:07,590
allowed to go there so they have to go

00:16:05,850 --> 00:16:10,860
through the proxy to hit the graph allah

00:16:07,590 --> 00:16:14,010
graph anna will use that token that the

00:16:10,860 --> 00:16:16,680
user got from the earth server to figure

00:16:14,010 --> 00:16:18,480
out the permissions and the other useful

00:16:16,680 --> 00:16:21,060
thing that we can put there is

00:16:18,480 --> 00:16:23,820
throttling so you don't want user

00:16:21,060 --> 00:16:26,010
ddosing you by going to some endpoint so

00:16:23,820 --> 00:16:28,350
we can limit the number of requests they

00:16:26,010 --> 00:16:30,360
can make because by the time they get to

00:16:28,350 --> 00:16:32,520
the proxy server we should already know

00:16:30,360 --> 00:16:34,230
who they are or if we don't we can send

00:16:32,520 --> 00:16:36,240
them back to the authentication server

00:16:34,230 --> 00:16:39,930
for the oath to flow for them to get

00:16:36,240 --> 00:16:42,300
redirected back okay and the third part

00:16:39,930 --> 00:16:45,000
that is actually tied into prometheus is

00:16:42,300 --> 00:16:48,170
the Prometheus guard the prom guard yet

00:16:45,000 --> 00:16:51,420
another proxy ah this guy actually

00:16:48,170 --> 00:16:53,760
understands the semantics of the request

00:16:51,420 --> 00:16:56,220
that goes to the prometheus it will

00:16:53,760 --> 00:16:59,130
inspect this request and it will check

00:16:56,220 --> 00:17:02,160
the permissions against what the user is

00:16:59,130 --> 00:17:04,140
trying to request so together with the

00:17:02,160 --> 00:17:06,689
request of the primitives we will get

00:17:04,140 --> 00:17:08,699
the access token then we will use prompt

00:17:06,689 --> 00:17:11,010
ql to figure out what the user is

00:17:08,699 --> 00:17:13,020
actually requesting so prom feel will be

00:17:11,010 --> 00:17:14,730
able to parse this request and then

00:17:13,020 --> 00:17:16,620
we'll just compare what do they want

00:17:14,730 --> 00:17:21,030
against what they are actually allowed

00:17:16,620 --> 00:17:24,150
to see ok so this is approximately how

00:17:21,030 --> 00:17:26,100
this looks at the very top the user will

00:17:24,150 --> 00:17:28,410
decides to go to graph honor they go to

00:17:26,100 --> 00:17:30,710
the proxy server if they need they might

00:17:28,410 --> 00:17:33,750
get real through authentication server

00:17:30,710 --> 00:17:36,180
then as the dashboard starts loading up

00:17:33,750 --> 00:17:39,000
graph Anna will make a request in to the

00:17:36,180 --> 00:17:42,150
prom guard and then the prom guard will

00:17:39,000 --> 00:17:43,620
decide Oh users trying to access improve

00:17:42,150 --> 00:17:45,720
matrix and they don't have permissions

00:17:43,620 --> 00:17:48,630
for that deny this request and you will

00:17:45,720 --> 00:17:50,070
get the sad read ! and yoga fauna you

00:17:48,630 --> 00:17:52,860
click on it and you'll see permission

00:17:50,070 --> 00:17:54,690
denied if you're trying to access your

00:17:52,860 --> 00:17:56,970
own metrics it will just let you through

00:17:54,690 --> 00:17:59,990
if you're trying to excel else's matrix

00:17:56,970 --> 00:18:02,910
again access denied you can't do that

00:17:59,990 --> 00:18:05,160
okay so how does the actual rewriting

00:18:02,910 --> 00:18:08,250
happen inside the prom guard so to

00:18:05,160 --> 00:18:11,340
pretend to be a Prometheus server you

00:18:08,250 --> 00:18:12,900
need to expose three main endpoints the

00:18:11,340 --> 00:18:14,640
rom all but like these are the ones that

00:18:12,900 --> 00:18:16,620
take care of the queries there is the

00:18:14,640 --> 00:18:20,400
query the query range and I think the

00:18:16,620 --> 00:18:22,290
series as you get this request you don't

00:18:20,400 --> 00:18:24,090
need to pull out the query the query can

00:18:22,290 --> 00:18:26,340
be part of the I think it's cool the

00:18:24,090 --> 00:18:28,620
query parameter or the match so you just

00:18:26,340 --> 00:18:30,630
pull out the string then given the

00:18:28,620 --> 00:18:32,820
string you can use the prompt you from

00:18:30,630 --> 00:18:36,180
prometheus to figure out all the

00:18:32,820 --> 00:18:38,820
selectors so in our case the reason why

00:18:36,180 --> 00:18:41,130
it's possible is all the users are

00:18:38,820 --> 00:18:43,860
associated with a certain project and

00:18:41,130 --> 00:18:46,080
the permissions will have a project in

00:18:43,860 --> 00:18:48,090
that so you know that this user is

00:18:46,080 --> 00:18:50,700
allowed to see project as a secret

00:18:48,090 --> 00:18:52,950
project and also all the metrics that

00:18:50,700 --> 00:18:56,280
are coming from the simulation will have

00:18:52,950 --> 00:18:58,170
the project as a part of the label so

00:18:56,280 --> 00:19:00,150
looking at the metric we can say that

00:18:58,170 --> 00:19:02,660
this metric belongs to this particular

00:19:00,150 --> 00:19:04,830
project and we can then look at the

00:19:02,660 --> 00:19:07,710
access token to figure out which

00:19:04,830 --> 00:19:11,280
projects the user can see so this is

00:19:07,710 --> 00:19:13,520
what kind of clues this all together so

00:19:11,280 --> 00:19:15,720
let's get a couple of examples so

00:19:13,520 --> 00:19:17,880
request number one you want to figure

00:19:15,720 --> 00:19:21,120
out those splines reticulated for

00:19:17,880 --> 00:19:23,220
project gain your permission that you

00:19:21,120 --> 00:19:25,140
have inside your access token says that

00:19:23,220 --> 00:19:27,090
yes you can read anything in project

00:19:25,140 --> 00:19:30,300
game then we don't need to rewrite

00:19:27,090 --> 00:19:33,360
anything it's all fine now books on

00:19:30,300 --> 00:19:35,820
number two you try to do something a bit

00:19:33,360 --> 00:19:38,520
more interesting you say i want this

00:19:35,820 --> 00:19:42,060
metric for all the projects that start

00:19:38,520 --> 00:19:44,010
with G now this is more interesting you

00:19:42,060 --> 00:19:48,210
also have multiple permissions you can

00:19:44,010 --> 00:19:50,190
see project G a G B and a a so what

00:19:48,210 --> 00:19:52,680
happens you parse the request with

00:19:50,190 --> 00:19:54,440
chrome pol you pull out the matrix and

00:19:52,680 --> 00:19:58,039
vector selectors I think

00:19:54,440 --> 00:20:01,039
you match all of those selectors that

00:19:58,039 --> 00:20:02,720
our project selectors on the things that

00:20:01,039 --> 00:20:05,240
you are allowed to see and because it's

00:20:02,720 --> 00:20:07,340
a regex you just regex the project name

00:20:05,240 --> 00:20:09,620
you're allowed to read against the

00:20:07,340 --> 00:20:13,639
project that's being selected so in this

00:20:09,620 --> 00:20:18,139
case g and g be our match the regex so

00:20:13,639 --> 00:20:20,269
they will be inserted as a selector into

00:20:18,139 --> 00:20:22,669
the query so now the query has been

00:20:20,269 --> 00:20:25,250
rewritten the user doesn't know that

00:20:22,669 --> 00:20:26,690
that actually happened because in there

00:20:25,250 --> 00:20:28,399
they don't need to know that they're in

00:20:26,690 --> 00:20:29,899
a multi-tenant environment it doesn't

00:20:28,399 --> 00:20:31,580
matter for them they just say I want

00:20:29,899 --> 00:20:33,649
everything that starts with G I know I

00:20:31,580 --> 00:20:36,340
have projects that start with G just

00:20:33,649 --> 00:20:39,470
give me those so that's how it does the

00:20:36,340 --> 00:20:41,990
rewriting now the third example where

00:20:39,470 --> 00:20:44,240
the user requests something they

00:20:41,990 --> 00:20:46,940
actually don't have access to so again

00:20:44,240 --> 00:20:50,330
they say anything that starts from G but

00:20:46,940 --> 00:20:52,309
they only have access to a a and a B now

00:20:50,330 --> 00:20:54,440
this is kind of one of the design

00:20:52,309 --> 00:20:56,269
choices we've made theoretically you can

00:20:54,440 --> 00:20:58,250
say that well you just don't have

00:20:56,269 --> 00:21:00,230
projects that match this so we can

00:20:58,250 --> 00:21:02,029
return an empty result and say that

00:21:00,230 --> 00:21:04,070
there are no metrics that match this

00:21:02,029 --> 00:21:07,460
query but we thought that if the user

00:21:04,070 --> 00:21:09,049
explicitly specifies the project that

00:21:07,460 --> 00:21:10,970
they are looking for all the right of

00:21:09,049 --> 00:21:13,070
regex it means they kind of know what

00:21:10,970 --> 00:21:14,750
they're doing so you need to indicate to

00:21:13,070 --> 00:21:16,610
them that they've made an incorrect

00:21:14,750 --> 00:21:20,389
request because they don't have access

00:21:16,610 --> 00:21:22,610
to anything like this the other are a

00:21:20,389 --> 00:21:25,429
part that also happens is user doesn't

00:21:22,610 --> 00:21:27,409
even have to specify the project as part

00:21:25,429 --> 00:21:29,990
of their request because they think that

00:21:27,409 --> 00:21:31,580
they were they assume they only can see

00:21:29,990 --> 00:21:34,759
their own metrics which is a reasonable

00:21:31,580 --> 00:21:37,279
assumption so they just request splines

00:21:34,759 --> 00:21:40,009
reticulated with no selectors there and

00:21:37,279 --> 00:21:41,960
then we will inject all the projects

00:21:40,009 --> 00:21:44,210
that they allowed to see inside that

00:21:41,960 --> 00:21:48,889
query and they will get their answer the

00:21:44,210 --> 00:21:52,190
way they expect it to ok so this is the

00:21:48,889 --> 00:21:56,059
last part the bonus part I've mentioned

00:21:52,190 --> 00:21:58,340
we do recording rules and we have quite

00:21:56,059 --> 00:22:00,710
a few of them so this blue line that's

00:21:58,340 --> 00:22:02,990
not an artifact this I think a

00:22:00,710 --> 00:22:06,590
screenshot of all the recording rules we

00:22:02,990 --> 00:22:08,720
have it's about 2,000 of them no one

00:22:06,590 --> 00:22:11,270
wants to write two thousand recording

00:22:08,720 --> 00:22:14,110
rules by hand it's really boring really

00:22:11,270 --> 00:22:17,900
bad idea you got very upset as you do it

00:22:14,110 --> 00:22:20,510
so and we also wanted to expose this to

00:22:17,900 --> 00:22:22,850
the users in some way and again you

00:22:20,510 --> 00:22:27,200
don't want to make sure that your users

00:22:22,850 --> 00:22:28,669
know what's your standard for writing

00:22:27,200 --> 00:22:30,799
those recording rules what are the

00:22:28,669 --> 00:22:33,620
conventions with the double colon it's

00:22:30,799 --> 00:22:36,320
not great and also the syntax itself is

00:22:33,620 --> 00:22:39,890
not super user friendly for kind of

00:22:36,320 --> 00:22:43,399
people who are new to the monitoring so

00:22:39,890 --> 00:22:45,230
we decided to write some kind of code

00:22:43,399 --> 00:22:47,840
generation the other thing that makes it

00:22:45,230 --> 00:22:50,090
possible is for our particular use case

00:22:47,840 --> 00:22:52,760
there is a pretty small set of patterns

00:22:50,090 --> 00:22:55,190
that we want from every metric we

00:22:52,760 --> 00:22:58,520
usually know what kind of things you

00:22:55,190 --> 00:23:01,279
want to be recording so how do we do

00:22:58,520 --> 00:23:02,750
this some kind of templating system some

00:23:01,279 --> 00:23:05,779
people think it's a good idea others

00:23:02,750 --> 00:23:09,820
really don't like it I I'm kind of in

00:23:05,779 --> 00:23:13,490
between I think so how should it look so

00:23:09,820 --> 00:23:15,470
say you want to record the metric for

00:23:13,490 --> 00:23:17,120
splines reticulated you should be able

00:23:15,470 --> 00:23:19,850
to write something like standard gauge

00:23:17,120 --> 00:23:21,500
and then the things you want most of the

00:23:19,850 --> 00:23:23,659
time and these are the things well that

00:23:21,500 --> 00:23:28,279
will get generated for you is average

00:23:23,659 --> 00:23:30,590
some min max etc for let's say counters

00:23:28,279 --> 00:23:36,169
normal things you often want to other

00:23:30,590 --> 00:23:38,659
rates so we generate those and now the

00:23:36,169 --> 00:23:42,559
issue is we decided to implement it in

00:23:38,659 --> 00:23:48,110
am for this is maybe not the best

00:23:42,559 --> 00:23:50,929
decision ever maybe but the interesting

00:23:48,110 --> 00:23:53,899
thing about is it took about two or

00:23:50,929 --> 00:23:56,210
three hours to write this and it has not

00:23:53,899 --> 00:23:57,799
been changed for about a year there

00:23:56,210 --> 00:23:59,809
might be two reasons why this has not

00:23:57,799 --> 00:24:02,809
been changed one other everyone is

00:23:59,809 --> 00:24:04,669
terrified of it that could be the case

00:24:02,809 --> 00:24:06,830
or it actually covers the use case i

00:24:04,669 --> 00:24:09,110
don't know but also it gave us really

00:24:06,830 --> 00:24:11,960
good data about the fact that users do

00:24:09,110 --> 00:24:13,580
want these metrics they really like it

00:24:11,960 --> 00:24:15,500
they really want it so it was kind of a

00:24:13,580 --> 00:24:17,110
cheap way to iterate tonight and figure

00:24:15,500 --> 00:24:19,360
out do we actually

00:24:17,110 --> 00:24:22,090
and it looks like we do and obviously

00:24:19,360 --> 00:24:24,370
you should change it and a convenient

00:24:22,090 --> 00:24:26,950
way to do it is may be exposed some web

00:24:24,370 --> 00:24:28,830
UI for the user to say actually add this

00:24:26,950 --> 00:24:31,420
particular metric to the cogeneration

00:24:28,830 --> 00:24:35,440
behind the scenes and I just want to see

00:24:31,420 --> 00:24:38,260
it so next part is a little bit scarier

00:24:35,440 --> 00:24:41,290
think yeah there we go so this is the

00:24:38,260 --> 00:24:43,780
actual implant implementation some bits

00:24:41,290 --> 00:24:45,940
have been removed but yeah you can see

00:24:43,780 --> 00:24:47,860
it's pretty obvious you can read through

00:24:45,940 --> 00:24:49,360
it you don't need any knowledge of em

00:24:47,860 --> 00:24:53,350
photo actually understand what's going

00:24:49,360 --> 00:24:55,960
on Frida maintainable as well yeah so

00:24:53,350 --> 00:24:58,419
this is how we do the templating for

00:24:55,960 --> 00:25:01,780
record your rules that's where 2,000

00:24:58,419 --> 00:25:04,559
recording rules actually come in yeah

00:25:01,780 --> 00:25:04,559
questions

00:25:14,070 --> 00:25:20,620
questions when you have all these

00:25:19,210 --> 00:25:23,950
proxies what's the kind of effect on

00:25:20,620 --> 00:25:27,370
light and safer is a request I don't

00:25:23,950 --> 00:25:29,980
have a concrete data but I don't think

00:25:27,370 --> 00:25:32,380
when we added the proxy and none of the

00:25:29,980 --> 00:25:35,920
users have explicitly complaint saying

00:25:32,380 --> 00:25:37,900
that it's getting too slow and also so

00:25:35,920 --> 00:25:39,520
yeah I don't have the particular numbers

00:25:37,900 --> 00:25:43,090
but I don't think it has added much

00:25:39,520 --> 00:25:45,730
because the only two proxies that as you

00:25:43,090 --> 00:25:47,170
get your data there are only two proxies

00:25:45,730 --> 00:25:49,630
that you go through and they are also

00:25:47,170 --> 00:25:51,730
not chained so first time you hit the

00:25:49,630 --> 00:25:53,860
graph on when you go through one you go

00:25:51,730 --> 00:25:55,870
through a proxy and then as you hit the

00:25:53,860 --> 00:25:57,760
prom guard you go through a different

00:25:55,870 --> 00:26:00,310
proxy but the request still originates

00:25:57,760 --> 00:26:03,700
from your browser so it's only one proxy

00:26:00,310 --> 00:26:05,680
per request so it wasn't too bad we

00:26:03,700 --> 00:26:11,200
didn't notice in significant impact

00:26:05,680 --> 00:26:13,420
there the prom guard is that free

00:26:11,200 --> 00:26:16,810
software looks quite interesting so we

00:26:13,420 --> 00:26:18,520
we want to open source it we haven't the

00:26:16,810 --> 00:26:21,790
problem with the open sourcing it is

00:26:18,520 --> 00:26:24,400
there isn't actually that much logics in

00:26:21,790 --> 00:26:26,200
it because we just use the prom ql to

00:26:24,400 --> 00:26:28,660
parse the query and then it really

00:26:26,200 --> 00:26:30,310
depends on how you do the oath what's

00:26:28,660 --> 00:26:32,530
your permission model so our

00:26:30,310 --> 00:26:34,450
implementation is really tied in to our

00:26:32,530 --> 00:26:36,340
permission a model so i guess we can

00:26:34,450 --> 00:26:39,760
open source it so that the users can

00:26:36,340 --> 00:26:42,400
insert their own kind of oath rules into

00:26:39,760 --> 00:26:43,930
that it will be like changing a very

00:26:42,400 --> 00:26:46,450
small project i think the whole prom

00:26:43,930 --> 00:26:48,040
guard the logics that deals with that is

00:26:46,450 --> 00:26:50,350
i don't know like 15 lines of code

00:26:48,040 --> 00:26:51,970
somewhere there like it's really small

00:26:50,350 --> 00:26:54,460
it was really convenient to write it

00:26:51,970 --> 00:26:55,720
using the prom ql but a lot of people

00:26:54,460 --> 00:27:02,830
have asked about it so i think we'll

00:26:55,720 --> 00:27:06,550
work on just open source and us another

00:27:02,830 --> 00:27:08,350
question as you might have things

00:27:06,550 --> 00:27:10,780
running on your systems that take quite

00:27:08,350 --> 00:27:12,790
a lot of resources of the system and you

00:27:10,780 --> 00:27:15,910
have quite a lot of metrics would be

00:27:12,790 --> 00:27:16,990
interesting if the impact of the

00:27:15,910 --> 00:27:19,540
instrumentation under these

00:27:16,990 --> 00:27:21,830
circumstances is measurable do you have

00:27:19,540 --> 00:27:29,120
any numbers about that

00:27:21,830 --> 00:27:29,960
I don't think the instability so it

00:27:29,120 --> 00:27:31,630
depends which parts of the

00:27:29,960 --> 00:27:34,700
instrumentation so I don't think the

00:27:31,630 --> 00:27:36,799
proxies will actually care about the

00:27:34,700 --> 00:27:38,750
load underneath because they just

00:27:36,799 --> 00:27:41,120
they're stateless they just inspect the

00:27:38,750 --> 00:27:43,490
incoming requests so that thing it

00:27:41,120 --> 00:27:45,830
doesn't really matter there we do want

00:27:43,490 --> 00:27:47,840
to we're actually talking to Prometheus

00:27:45,830 --> 00:27:50,330
developers yesterday about this we want

00:27:47,840 --> 00:27:52,340
to add instrumentation for some of the

00:27:50,330 --> 00:27:54,830
user metrics to track the cardinality

00:27:52,340 --> 00:27:56,480
because that's what causes quite a few

00:27:54,830 --> 00:27:59,600
issues for us so we want to track that

00:27:56,480 --> 00:28:00,740
want to alert that on that maybe we

00:27:59,600 --> 00:28:08,110
don't know this is something that's

00:28:00,740 --> 00:28:08,110
still coming up any other questions

00:28:08,289 --> 00:28:12,370

YouTube URL: https://www.youtube.com/watch?v=39xVoFW6eUw


