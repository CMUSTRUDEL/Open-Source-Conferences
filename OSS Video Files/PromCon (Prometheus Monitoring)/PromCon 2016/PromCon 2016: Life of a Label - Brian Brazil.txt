Title: PromCon 2016: Life of a Label - Brian Brazil
Publication date: 2016-09-04
Playlist: PromCon 2016
Description: 
	* Abstract:

Labels are at the core of Prometheus's dimensional data model. The Prometheus server and its surrounding ecosystem components all either attach, modify, or act on labels in various ways. In this talk, Brian explains the entire life cycle of labels, including their generation in the client libraries, their transformation in relabeling, as well as their use in service discovery and alerting.

* Speaker biography:

Brian Brazil is a core developer of Prometheus and the founder of Robust Perception. He works across the ecosystem, and is involved in areas such as best practices, exporters, PromQL semantics and client libraries. He is the main writer of the Reliable Insights blog, which regularly covers Prometheus topics.

* Slides:

http://www.slideshare.net/brianbrazil/life-of-a-label-promcon2016-berlin

* PromCon website:

https://promcon.io/
Captions: 
	00:00:00,110 --> 00:00:11,280
well so Bjorn has already introduced me

00:00:09,719 --> 00:00:13,590
so we can just look at that slide

00:00:11,280 --> 00:00:15,420
briefly but he doesn't tell you the

00:00:13,590 --> 00:00:17,609
utter Tings which I am the key

00:00:15,420 --> 00:00:19,140
contributor to because this is a story

00:00:17,609 --> 00:00:20,609
about life the label and Joe Diaz has

00:00:19,140 --> 00:00:22,410
already touched on the more interesting

00:00:20,609 --> 00:00:25,199
aspects of labels because I have a

00:00:22,410 --> 00:00:27,449
confession to make I am the guy who is

00:00:25,199 --> 00:00:29,310
responsible for relabeling existing and

00:00:27,449 --> 00:00:31,410
I had to fight to make relabeling

00:00:29,310 --> 00:00:34,350
existing now before you get out the

00:00:31,410 --> 00:00:36,390
torches and pitchforks you know let's

00:00:34,350 --> 00:00:39,239
just let me explain please give me a

00:00:36,390 --> 00:00:40,770
chance because the requires talk about

00:00:39,239 --> 00:00:42,719
labels we have to start off with

00:00:40,770 --> 00:00:44,460
instrumentation labels and these are the

00:00:42,719 --> 00:00:45,870
labels you put in your code because

00:00:44,460 --> 00:00:47,489
direct instrumentation is best

00:00:45,870 --> 00:00:49,320
instrumentation because you want the

00:00:47,489 --> 00:00:51,120
distinguish get versus posts you for

00:00:49,320 --> 00:00:52,860
taking a technical level or maybe be

00:00:51,120 --> 00:00:54,120
Zimmer's versus MasterCard if you want

00:00:52,860 --> 00:00:56,190
checking which payment method doesn't

00:00:54,120 --> 00:00:58,020
work these could be from business logic

00:00:56,190 --> 00:00:59,039
like Visa versus MasterCard very

00:00:58,020 --> 00:01:01,230
business object they could be from a

00:00:59,039 --> 00:01:02,609
random library like some authentication

00:01:01,230 --> 00:01:06,000
middleware is saying hey is this

00:01:02,609 --> 00:01:07,740
together a postal authenticating and you

00:01:06,000 --> 00:01:10,260
add them in your code so here's a Python

00:01:07,740 --> 00:01:11,760
example you add these bits and you can

00:01:10,260 --> 00:01:14,130
get your message an endpoint for HTTP

00:01:11,760 --> 00:01:17,880
there's a simple example and it looks

00:01:14,130 --> 00:01:19,830
like this in the text Ornish and great

00:01:17,880 --> 00:01:22,110
so you've got an instrumented your

00:01:19,830 --> 00:01:23,520
system you know very well done

00:01:22,110 --> 00:01:26,130
congratulations that's what you're meant

00:01:23,520 --> 00:01:30,570
to do but how are you going to get this

00:01:26,130 --> 00:01:31,619
data back into prometheus and because

00:01:30,570 --> 00:01:34,140
you've got a bit of a bit of a problem

00:01:31,619 --> 00:01:36,869
now if you had a push system your push

00:01:34,140 --> 00:01:39,360
system you instead tell us where the

00:01:36,869 --> 00:01:41,369
monitoring system is when a pull system

00:01:39,360 --> 00:01:43,460
you need the monitoring systems know

00:01:41,369 --> 00:01:45,630
where tings RS is to reverse problem and

00:01:43,460 --> 00:01:48,450
you need to wait to find your targets

00:01:45,630 --> 00:01:50,939
and as was pointed out by a boat shuttle

00:01:48,450 --> 00:01:53,149
town and digital ocean a manually edited

00:01:50,939 --> 00:01:56,250
file doesn't scale particularly well and

00:01:53,149 --> 00:01:59,520
so we need service discovery to go find

00:01:56,250 --> 00:02:01,530
things automatically and we have many

00:01:59,520 --> 00:02:04,350
many types of service discovery files

00:02:01,530 --> 00:02:08,009
ec2 console communities to DNS is your

00:02:04,350 --> 00:02:10,200
GCE is still in code review and -

00:02:08,009 --> 00:02:13,379
zookeeper ones 5s state

00:02:10,200 --> 00:02:13,920
reads off disk if you don't are using

00:02:13,379 --> 00:02:16,709
something we said

00:02:13,920 --> 00:02:18,239
or you can use that otherwise we get

00:02:16,709 --> 00:02:22,470
stuff over the network and we get a list

00:02:18,239 --> 00:02:24,840
of all your machines but then all I have

00:02:22,470 --> 00:02:27,330
is a list of machines ok let's say all

00:02:24,840 --> 00:02:29,310
instances from an ec2 region and that's

00:02:27,330 --> 00:02:32,130
nice if I just want to put hit porch

00:02:29,310 --> 00:02:35,310
9100 monitor node exporter pull in those

00:02:32,130 --> 00:02:38,610
four five 600 metrics depending on how

00:02:35,310 --> 00:02:39,900
many disks you have and what you really

00:02:38,610 --> 00:02:41,730
you kind of want to if you're talking

00:02:39,900 --> 00:02:43,290
about services on top of that you want

00:02:41,730 --> 00:02:44,970
to say no no I want the mice equals here

00:02:43,290 --> 00:02:47,130
at the apaches here - Cassandra is there

00:02:44,970 --> 00:02:50,640
so you need to select which machines

00:02:47,130 --> 00:02:52,970
straight and here's where we come into

00:02:50,640 --> 00:02:55,140
the problem as the y relabeling exists

00:02:52,970 --> 00:02:57,600
different organizations do it

00:02:55,140 --> 00:02:59,940
differently okay some people might be

00:02:57,600 --> 00:03:03,299
using the name tag on ec2 other PPC IDs

00:02:59,940 --> 00:03:05,370
and others you know they might have some

00:03:03,299 --> 00:03:08,549
naming scheme they have on top of - and

00:03:05,370 --> 00:03:11,310
this sort of saying is rarely consistent

00:03:08,549 --> 00:03:12,989
within a team or an organization right

00:03:11,310 --> 00:03:14,549
everyone does it differently it's

00:03:12,989 --> 00:03:15,870
possible even a single team and I've

00:03:14,549 --> 00:03:17,970
been on teams which had five different

00:03:15,870 --> 00:03:19,440
conventions for how you name things and

00:03:17,970 --> 00:03:21,209
this is normal

00:03:19,440 --> 00:03:23,220
because what we're doing here is we're

00:03:21,209 --> 00:03:25,049
dealing with the complexities of the

00:03:23,220 --> 00:03:27,239
real world and we need to map those back

00:03:25,049 --> 00:03:29,340
intermedius and in fact the other thing

00:03:27,239 --> 00:03:31,980
is that everyone takes the Dare way is

00:03:29,340 --> 00:03:33,810
the only way and this is actually a

00:03:31,980 --> 00:03:35,609
continuous problem for us when we get

00:03:33,810 --> 00:03:38,459
code reviews for new service discovery

00:03:35,609 --> 00:03:42,060
mechanisms because almost every single

00:03:38,459 --> 00:03:43,980
one of them and like I would wrote one

00:03:42,060 --> 00:03:45,120
didn't make this mistake but you know

00:03:43,980 --> 00:03:46,290
there's a few hundreds are okay

00:03:45,120 --> 00:03:48,540
but most of them have hard-coded

00:03:46,290 --> 00:03:50,420
assumptions about how dare system works

00:03:48,540 --> 00:03:52,530
that they wants to put inside Prometheus

00:03:50,420 --> 00:03:54,840
it's like yes that would work for you

00:03:52,530 --> 00:03:57,239
you know we've got other users as well

00:03:54,840 --> 00:03:59,819
so this is an actual perception thing

00:03:57,239 --> 00:04:02,010
people have so as Julius mentioned

00:03:59,819 --> 00:04:03,810
earlier we could have had a config file

00:04:02,010 --> 00:04:06,690
and an option for eight here's the

00:04:03,810 --> 00:04:09,030
Soundcloud wait Santa wavy - south of

00:04:06,690 --> 00:04:10,560
wavy 3.4 for that other team is doing

00:04:09,030 --> 00:04:12,989
something weird and all these

00:04:10,560 --> 00:04:14,489
interaction options and so on but that

00:04:12,989 --> 00:04:16,260
would have been insanity very quickly

00:04:14,489 --> 00:04:17,579
even just probably the pure sound cloud

00:04:16,260 --> 00:04:19,950
options would have quickly become

00:04:17,579 --> 00:04:21,630
incomprehensible you then add the other

00:04:19,950 --> 00:04:23,870
of several hundred companies we have in

00:04:21,630 --> 00:04:27,380
all their variants good luck with that

00:04:23,870 --> 00:04:28,700
instead we have relabeling

00:04:27,380 --> 00:04:30,260
because the thing is what we want to

00:04:28,700 --> 00:04:32,720
allow is the people have different views

00:04:30,260 --> 00:04:34,790
of the world and we want to take their

00:04:32,720 --> 00:04:36,830
view of the world and translate that

00:04:34,790 --> 00:04:38,900
into four medias metrics so the exact

00:04:36,830 --> 00:04:40,670
same node exporter that might be running

00:04:38,900 --> 00:04:41,900
on whoever owned one machine if you

00:04:40,670 --> 00:04:44,540
could have three different permit hisses

00:04:41,900 --> 00:04:47,600
all with different views like if I am

00:04:44,540 --> 00:04:50,270
the operations team I know but II us one

00:04:47,600 --> 00:04:52,250
and AC equals a and that's how I tinker

00:04:50,270 --> 00:04:54,560
the world but as a motor team what the

00:04:52,250 --> 00:04:56,570
hell's an EU West one its Ireland

00:04:54,560 --> 00:04:59,480
because it is and that's our production

00:04:56,570 --> 00:05:01,490
environment and that's their view of the

00:04:59,480 --> 00:05:02,750
world whereas someone else is like

00:05:01,490 --> 00:05:04,790
actually I don't care about any of this

00:05:02,750 --> 00:05:07,280
stuff I'm trying to debug a weird

00:05:04,790 --> 00:05:10,430
Network problem that's one of those 350

00:05:07,280 --> 00:05:11,810
netstat metrics we have and I just want

00:05:10,430 --> 00:05:13,700
everything so I can see where that's

00:05:11,810 --> 00:05:14,750
happening so wouldn't go into boenish so

00:05:13,700 --> 00:05:17,090
they don't care at any the stuff they

00:05:14,750 --> 00:05:20,660
just like give me everything bring it to

00:05:17,090 --> 00:05:22,820
me so he wanted actually all these views

00:05:20,660 --> 00:05:24,740
of the world to exist in fact you can do

00:05:22,820 --> 00:05:28,040
this all inside one per medias generally

00:05:24,740 --> 00:05:29,570
not a good idea for sanitary reasons so

00:05:28,040 --> 00:05:31,550
that comes down to what is relabeling

00:05:29,570 --> 00:05:33,890
relating this way is we can take in

00:05:31,550 --> 00:05:35,990
metadata about a target a target is

00:05:33,890 --> 00:05:39,140
something we scrape and based on that

00:05:35,990 --> 00:05:41,870
select which one's the screen we also

00:05:39,140 --> 00:05:44,300
normally give you some target labels so

00:05:41,870 --> 00:05:46,010
by default it'll just have a name which

00:05:44,300 --> 00:05:50,810
is the address label and the instance

00:05:46,010 --> 00:05:52,520
level so how do we deal with the fact

00:05:50,810 --> 00:05:54,790
that all these systems like a situ in

00:05:52,520 --> 00:05:57,650
kubernetes is a very different metadata

00:05:54,790 --> 00:05:59,090
how we give people a way to work with

00:05:57,650 --> 00:06:01,940
this especially as they might have their

00:05:59,090 --> 00:06:04,370
own structure inside that and the answer

00:06:01,940 --> 00:06:06,320
is we take the standard UNIX fallback we

00:06:04,370 --> 00:06:07,760
have a pile of data that's completely

00:06:06,320 --> 00:06:08,360
unstructured we have no idea what's

00:06:07,760 --> 00:06:11,240
going on with it

00:06:08,360 --> 00:06:16,690
we can't make any assumptions let's have

00:06:11,240 --> 00:06:16,690
two problems sorry s Evan reg X's so

00:06:16,729 --> 00:06:21,389
what we do is that you say hey metal

00:06:19,589 --> 00:06:23,969
console tags like if you've got console

00:06:21,389 --> 00:06:25,829
tags that's how you get them from regex

00:06:23,969 --> 00:06:27,959
production keep testing

00:06:25,829 --> 00:06:29,699
so we're saying here every one of my

00:06:27,959 --> 00:06:32,219
production notes I want to monitor those

00:06:29,699 --> 00:06:33,659
everything else they go and there's

00:06:32,219 --> 00:06:34,889
actually a little detail here because we

00:06:33,659 --> 00:06:37,349
have lots of different metadata if

00:06:34,889 --> 00:06:40,019
something is a dictionary or a map or a

00:06:37,349 --> 00:06:42,329
hash it's pretty obvious we can directly

00:06:40,019 --> 00:06:44,629
map that to a label like medical so my

00:06:42,329 --> 00:06:46,649
label name and then the value if

00:06:44,629 --> 00:06:49,409
something's in the array like console

00:06:46,649 --> 00:06:51,389
tags how do we expose that the answer is

00:06:49,409 --> 00:06:54,749
we chuck it all on the list separated by

00:06:51,389 --> 00:06:57,179
commas it den turns out lots of people

00:06:54,749 --> 00:06:59,279
who aren't extremely experienced of

00:06:57,179 --> 00:07:02,639
regular expressions aren't aware of the

00:06:59,279 --> 00:07:04,860
edge cases of that and it's just joined

00:07:02,639 --> 00:07:06,239
by commas it means the first one doesn't

00:07:04,860 --> 00:07:07,589
have a comment in front of it and the

00:07:06,239 --> 00:07:10,139
last one doesn't have a comma at the end

00:07:07,589 --> 00:07:12,599
of it and people don't know how to

00:07:10,139 --> 00:07:15,089
correctly handle that so what we

00:07:12,599 --> 00:07:19,589
actually do is we put a comma at the

00:07:15,089 --> 00:07:23,099
front in the end as well because that

00:07:19,589 --> 00:07:24,989
means then that you can do this and this

00:07:23,099 --> 00:07:27,059
works in all cases to the death star in

00:07:24,989 --> 00:07:29,429
each range and this is also why Reggie

00:07:27,059 --> 00:07:31,110
every tease reg X's are anchored because

00:07:29,429 --> 00:07:33,659
it also turns out that lots of people

00:07:31,110 --> 00:07:38,159
don't know how reg X's work and don't

00:07:33,659 --> 00:07:40,919
realize that for example if you search

00:07:38,159 --> 00:07:43,679
for production without the commas

00:07:40,919 --> 00:07:46,699
without the Stars the Stars it will

00:07:43,679 --> 00:07:49,499
actually also match not production

00:07:46,699 --> 00:07:51,149
because that matches so we actually do

00:07:49,499 --> 00:07:52,679
this as well to basically because people

00:07:51,149 --> 00:07:54,389
keep on making this mistake at least

00:07:52,679 --> 00:07:56,069
this way the first time around they'll

00:07:54,389 --> 00:07:57,539
get it right because it won't work

00:07:56,069 --> 00:07:59,219
otherwise and they don't make the other

00:07:57,539 --> 00:08:00,659
mistakes so that's why we actually

00:07:59,219 --> 00:08:02,069
switched everything tipping for the

00:08:00,659 --> 00:08:04,889
anchored in Prometheus because people

00:08:02,069 --> 00:08:08,129
were unknowingly making this mistake and

00:08:04,889 --> 00:08:10,649
it works out so there are two reliable

00:08:08,129 --> 00:08:13,709
actions the simple ones start off with

00:08:10,649 --> 00:08:15,839
our keep and drop if the regex matches

00:08:13,709 --> 00:08:17,599
that keep we keep on going if not we

00:08:15,839 --> 00:08:20,309
stop processing

00:08:17,599 --> 00:08:21,599
drop is getaway around is just for

00:08:20,309 --> 00:08:23,249
convenience see how both of them because

00:08:21,599 --> 00:08:25,709
inverting reg X is particularly but or

00:08:23,249 --> 00:08:27,860
e2 is not nice to industry inverse of

00:08:25,709 --> 00:08:29,720
each other

00:08:27,860 --> 00:08:30,889
and but what happens if like there's

00:08:29,720 --> 00:08:33,229
more than one label you want to work on

00:08:30,889 --> 00:08:35,539
maybe there's two ec2 tags - kubernetes

00:08:33,229 --> 00:08:38,810
tags you want to use the service name

00:08:35,539 --> 00:08:40,820
and the console tag so the sources

00:08:38,810 --> 00:08:43,459
labels as you might hint by the s on

00:08:40,820 --> 00:08:45,380
labels is a list so you actually specify

00:08:43,459 --> 00:08:47,510
everything you watch and well that's

00:08:45,380 --> 00:08:49,640
what arrays concatenate them together to

00:08:47,510 --> 00:08:52,940
send me home and then you can show red

00:08:49,640 --> 00:08:55,579
Texas against it yeah you're sensing a

00:08:52,940 --> 00:08:58,370
pattern here and you can't change the

00:08:55,579 --> 00:09:00,950
separator int and general claim of

00:08:58,370 --> 00:09:03,500
primitives empty labels is the same as

00:09:00,950 --> 00:09:04,700
not having a label so you'll get just a

00:09:03,500 --> 00:09:05,540
space - something's missing because

00:09:04,700 --> 00:09:08,240
otherwise you'd have to deal with

00:09:05,540 --> 00:09:10,360
variable number of commas which will be

00:09:08,240 --> 00:09:12,740
messy if two consecutive ones were empty

00:09:10,360 --> 00:09:17,390
and everything is that it is reliable

00:09:12,740 --> 00:09:19,640
config so that's a list as well so every

00:09:17,390 --> 00:09:20,930
single rule is processed every single

00:09:19,640 --> 00:09:23,000
action from top to bottom

00:09:20,930 --> 00:09:25,279
and it processes them all unless it hits

00:09:23,000 --> 00:09:27,140
a key for a drop which makes it stop so

00:09:25,279 --> 00:09:30,019
they are all always at least attempt to

00:09:27,140 --> 00:09:33,430
apply its again as many as you want as

00:09:30,019 --> 00:09:36,829
the julius example shoulders about 10m

00:09:33,430 --> 00:09:38,360
okay so here's what we got so far we've

00:09:36,829 --> 00:09:40,640
got a service discovery it's producing

00:09:38,360 --> 00:09:43,810
metadata we can use regex as we keep and

00:09:40,640 --> 00:09:46,760
drop it suppose to choose what to scrape

00:09:43,810 --> 00:09:48,560
but you know previously labels are one

00:09:46,760 --> 00:09:49,550
of the two key features of Prometheus

00:09:48,560 --> 00:09:51,230
cause you've got the label and you have

00:09:49,550 --> 00:09:53,779
to parry language those are like the

00:09:51,230 --> 00:09:55,370
killer features wouldn't it be nice to

00:09:53,779 --> 00:09:57,890
have some metadata like this is

00:09:55,370 --> 00:09:59,570
production or dev or whatnot in the

00:09:57,890 --> 00:10:01,850
target labels like the labels that we're

00:09:59,570 --> 00:10:04,850
gonna add as we scrape that'll be kind

00:10:01,850 --> 00:10:06,470
of nice and this brings us to munging

00:10:04,850 --> 00:10:08,660
maples and this is where people normally

00:10:06,470 --> 00:10:10,760
start to get confused when we're talking

00:10:08,660 --> 00:10:13,130
about relabeling the quarter of

00:10:10,760 --> 00:10:15,440
relabeling is the replace action or the

00:10:13,130 --> 00:10:17,329
substitution action you can take if we

00:10:15,440 --> 00:10:18,199
take the source tables you know they're

00:10:17,329 --> 00:10:20,800
all patent age together

00:10:18,199 --> 00:10:23,209
shut for regex average if it matches

00:10:20,800 --> 00:10:25,029
then we put the output in the target

00:10:23,209 --> 00:10:28,820
label whatever is the substitution is

00:10:25,029 --> 00:10:30,949
nice simple idea okay it's just doing a

00:10:28,820 --> 00:10:31,670
regex against some labels and putting

00:10:30,949 --> 00:10:34,220
and if it matches

00:10:31,670 --> 00:10:36,890
shockingly I push another lever nice

00:10:34,220 --> 00:10:39,350
simple and the complication is of course

00:10:36,890 --> 00:10:40,920
the real world because you have to think

00:10:39,350 --> 00:10:42,750
out actually how

00:10:40,920 --> 00:10:44,100
my team's work and they need to have to

00:10:42,750 --> 00:10:45,269
actually write that down for the first

00:10:44,100 --> 00:10:46,290
time rather than just keeping even your

00:10:45,269 --> 00:10:48,750
head and working by intuition

00:10:46,290 --> 00:10:49,589
it's where things always get fun so

00:10:48,750 --> 00:10:51,630
let's take an example

00:10:49,589 --> 00:10:53,430
let's say you want to take the easy to

00:10:51,630 --> 00:10:56,279
name tag that's the one that displays

00:10:53,430 --> 00:10:58,649
and dy by default and we're gonna have

00:10:56,279 --> 00:11:01,470
yep source labels better easy to tag

00:10:58,649 --> 00:11:03,029
made the regex is dot star and it's a

00:11:01,470 --> 00:11:06,060
capture group so we're going to capture

00:11:03,029 --> 00:11:07,920
that entire ting the replacement is well

00:11:06,060 --> 00:11:12,180
the entire team the first matching group

00:11:07,920 --> 00:11:13,560
and the target label is job let's say so

00:11:12,180 --> 00:11:15,690
that we'll end up with a job label of

00:11:13,560 --> 00:11:17,970
that so it's just basically just being

00:11:15,690 --> 00:11:22,740
straight copy from DC tag name this is a

00:11:17,970 --> 00:11:25,260
job label seems simple right of course

00:11:22,740 --> 00:11:27,540
this is also kind of verbose and because

00:11:25,260 --> 00:11:29,250
it's so common to launch copy labels

00:11:27,540 --> 00:11:36,510
around these previous settings are all

00:11:29,250 --> 00:11:38,149
defaults so so that star in brackets is

00:11:36,510 --> 00:11:41,339
the default for regex

00:11:38,149 --> 00:11:44,100
action replaces the default replacement

00:11:41,339 --> 00:11:47,160
is that's well so you can also actually

00:11:44,100 --> 00:11:49,260
use this to set a label because you just

00:11:47,160 --> 00:11:50,550
set the replacement to the value you

00:11:49,260 --> 00:11:53,070
want to charge label to what you want

00:11:50,550 --> 00:11:56,279
reg X dot star will match the empty list

00:11:53,070 --> 00:11:59,699
always make news that the set levels and

00:11:56,279 --> 00:12:02,070
Deitrick and and the other thing as well

00:11:59,699 --> 00:12:05,220
draw a blog post on this recently and

00:12:02,070 --> 00:12:07,410
that yes the service discovery was

00:12:05,220 --> 00:12:08,910
always a training instance to an address

00:12:07,410 --> 00:12:10,320
label and as the thing is going to

00:12:08,910 --> 00:12:13,620
attempt to talk to and that's a host

00:12:10,320 --> 00:12:15,240
port if no instance labels present at

00:12:13,620 --> 00:12:16,769
the end because instance is one of the

00:12:15,240 --> 00:12:18,839
specialty labels the other is job which

00:12:16,769 --> 00:12:20,250
we always want to try and assess will

00:12:18,839 --> 00:12:21,810
just default into the value of address

00:12:20,250 --> 00:12:24,839
so this is why your instance label

00:12:21,810 --> 00:12:26,730
normally ends up as a host port but

00:12:24,839 --> 00:12:28,440
because this separation between address

00:12:26,730 --> 00:12:30,269
and instance you can actually have them

00:12:28,440 --> 00:12:32,850
as different things so if you're using a

00:12:30,269 --> 00:12:35,160
server set or the nerve discovery you

00:12:32,850 --> 00:12:37,019
could have the address be you know the

00:12:35,160 --> 00:12:38,970
address we kind of need to talk to it

00:12:37,019 --> 00:12:41,370
and then the instance label be a

00:12:38,970 --> 00:12:44,010
zookeeper crash or anything else to make

00:12:41,370 --> 00:12:45,360
sense to you and and because of this

00:12:44,010 --> 00:12:47,010
just no need to add additional like a

00:12:45,360 --> 00:12:48,720
mr. host labels rock lost you just use

00:12:47,010 --> 00:12:51,630
the instance label for what some unique

00:12:48,720 --> 00:12:53,790
name for instances because every label

00:12:51,630 --> 00:12:54,710
you add to a target is kind of a

00:12:53,790 --> 00:12:56,000
liability

00:12:54,710 --> 00:12:57,740
because it means that when you're

00:12:56,000 --> 00:13:00,050
writing rules later people have to be

00:12:57,740 --> 00:13:03,080
aware of that you have to be limited in

00:13:00,050 --> 00:13:05,060
posh ones you do or as I put it target

00:13:03,080 --> 00:13:08,420
labels are for life not just for

00:13:05,060 --> 00:13:09,800
Christmas and there's lots of other

00:13:08,420 --> 00:13:11,060
settings you can re-enable those

00:13:09,800 --> 00:13:12,800
examples are actually in the kubernetes

00:13:11,060 --> 00:13:14,480
one because a human age one is someone

00:13:12,800 --> 00:13:17,870
who went all out with using relabeling

00:13:14,480 --> 00:13:20,899
usual examples are simpler and there is

00:13:17,870 --> 00:13:23,120
params as well so if how many people

00:13:20,899 --> 00:13:26,330
here have used the black box or SNMP

00:13:23,120 --> 00:13:28,339
exporter okay so we've got maybe twenty

00:13:26,330 --> 00:13:30,709
percent of people how many of you

00:13:28,339 --> 00:13:34,100
understand that block of real abeler

00:13:30,709 --> 00:13:36,920
actions okay about half of that group

00:13:34,100 --> 00:13:38,570
that's actually more than I talk so

00:13:36,920 --> 00:13:40,100
they're actually inversing Tings and the

00:13:38,570 --> 00:13:42,980
discuss it's more of my talk tomorrow

00:13:40,100 --> 00:13:44,750
and we're passing in URL parameters to

00:13:42,980 --> 00:13:46,790
tell us where target is and then

00:13:44,750 --> 00:13:48,350
switching in the address label so you

00:13:46,790 --> 00:13:50,750
start off with in the dress label of

00:13:48,350 --> 00:13:52,190
what you actually want the probe then

00:13:50,750 --> 00:13:54,200
changing that's really the web parameter

00:13:52,190 --> 00:13:55,820
and then putting in the actual the black

00:13:54,200 --> 00:13:58,399
box exporter as that yeah

00:13:55,820 --> 00:13:59,690
if you go and read that now after this

00:13:58,399 --> 00:14:02,510
talk you should understand better while

00:13:59,690 --> 00:14:04,250
it's doing and you understand just how

00:14:02,510 --> 00:14:08,150
crazy a person I am that I came up with

00:14:04,250 --> 00:14:10,640
that but yep and there's also two other

00:14:08,150 --> 00:14:11,990
label actions label map just copies

00:14:10,640 --> 00:14:14,029
things around so you can imagine if you

00:14:11,990 --> 00:14:15,680
decided like what ec2 tags and

00:14:14,029 --> 00:14:17,480
committees label said Kay ending

00:14:15,680 --> 00:14:20,000
prefixed with this will copy it over and

00:14:17,480 --> 00:14:22,640
that's what that does because you like

00:14:20,000 --> 00:14:23,959
to know all of those a priori and hash

00:14:22,640 --> 00:14:26,089
mode is actually used for sharding

00:14:23,959 --> 00:14:27,620
unless you're sharding one of the four

00:14:26,089 --> 00:14:31,580
people in the room doing that don't use

00:14:27,620 --> 00:14:33,050
it and another question is because we

00:14:31,580 --> 00:14:35,510
have these two different types of labels

00:14:33,050 --> 00:14:36,890
we have these labels on the target and

00:14:35,510 --> 00:14:39,350
we have these labels coming from

00:14:36,890 --> 00:14:42,079
instrumentation what happens if someone

00:14:39,350 --> 00:14:45,380
you know the side stack is silly and

00:14:42,079 --> 00:14:47,480
decides to have a label of instance and

00:14:45,380 --> 00:14:49,400
so the answer is a general principle and

00:14:47,480 --> 00:14:51,140
permit us that the person running their

00:14:49,400 --> 00:14:53,120
Prometheus is not necessarily the person

00:14:51,140 --> 00:14:54,649
running the service because we've got

00:14:53,120 --> 00:14:56,510
the whole horizontal monitoring idea and

00:14:54,649 --> 00:14:59,600
you don't want to be in a situation

00:14:56,510 --> 00:15:03,230
where someone is exporting stuff that

00:14:59,600 --> 00:15:05,230
breaks your Prometheus right so what

00:15:03,230 --> 00:15:07,850
wins is the target table always wins

00:15:05,230 --> 00:15:08,300
right because then we always know the

00:15:07,850 --> 00:15:10,040
instance they

00:15:08,300 --> 00:15:11,930
this is the one I selected not the one

00:15:10,040 --> 00:15:13,970
of the users exporting and what we do

00:15:11,930 --> 00:15:16,220
then with the original instance Mabel is

00:15:13,970 --> 00:15:18,310
we call it exported underscore instance

00:15:16,220 --> 00:15:20,720
so it's still there so you can access it

00:15:18,310 --> 00:15:23,000
so but generally if you are exporting

00:15:20,720 --> 00:15:24,410
Mabel's try to avoid ones that you know

00:15:23,000 --> 00:15:26,930
people are likely to have a started

00:15:24,410 --> 00:15:28,730
labels you can turn this off and honor

00:15:26,930 --> 00:15:30,260
labels equals true which would use it to

00:15:28,730 --> 00:15:32,780
push gateway because sometimes you want

00:15:30,260 --> 00:15:34,880
to do that because like your example if

00:15:32,780 --> 00:15:36,200
you are having cluster level stats in to

00:15:34,880 --> 00:15:39,320
push gateway which is what it's meant

00:15:36,200 --> 00:15:41,180
for and you there is no instance labeled

00:15:39,320 --> 00:15:42,650
because there's no instance so you can

00:15:41,180 --> 00:15:44,030
just actually export an empty instance

00:15:42,650 --> 00:15:47,960
label what Honor enables equals true

00:15:44,030 --> 00:15:49,820
it'll have no ISA stable and there's no

00:15:47,960 --> 00:15:51,050
type of real Abel configs because we

00:15:49,820 --> 00:15:54,230
have several of them we're up the tree

00:15:51,050 --> 00:15:56,060
so far for soon hopefully and because

00:15:54,230 --> 00:15:59,240
sometimes you know things get a little

00:15:56,060 --> 00:16:00,980
overloaded II and someone starts you

00:15:59,240 --> 00:16:03,620
know deciding to break out a metric by

00:16:00,980 --> 00:16:08,120
email address and which aside from being

00:16:03,620 --> 00:16:09,260
PII and you know is massive so what we

00:16:08,120 --> 00:16:11,600
need to do is drop that stuff on the

00:16:09,260 --> 00:16:14,000
floor so metric label configs apply

00:16:11,600 --> 00:16:15,650
after the scrape before to that is put

00:16:14,000 --> 00:16:17,780
inside the database and you can just say

00:16:15,650 --> 00:16:21,470
hey anything that match matches my big

00:16:17,780 --> 00:16:23,630
metric by email drop so that's a

00:16:21,470 --> 00:16:25,010
tactical solution until you can go find

00:16:23,630 --> 00:16:29,900
that developer and have a chat about

00:16:25,010 --> 00:16:32,540
cardinality apply chat it also sometimes

00:16:29,900 --> 00:16:34,310
things like see advisor and so on that

00:16:32,540 --> 00:16:36,830
they have they don't know about the

00:16:34,310 --> 00:16:38,210
structure of docker and so it's a way

00:16:36,830 --> 00:16:39,320
you can mess around with those labels

00:16:38,210 --> 00:16:42,170
because it's not technically practical

00:16:39,320 --> 00:16:44,420
but generally metric reliable configs

00:16:42,170 --> 00:16:48,020
are a tactical solution until you can

00:16:44,420 --> 00:16:50,390
fix things properly and something else

00:16:48,020 --> 00:16:52,850
to be aware of is up does not come from

00:16:50,390 --> 00:16:54,620
the scrape it actually always has a

00:16:52,850 --> 00:16:57,260
target tables so metric label configs

00:16:54,620 --> 00:16:59,060
never apply for up and in general if you

00:16:57,260 --> 00:17:00,560
ever wonder why your label config isn't

00:16:59,060 --> 00:17:02,200
working it's because it should be a

00:17:00,560 --> 00:17:04,490
metric label your label config instead

00:17:02,200 --> 00:17:07,010
that's a common misunderstanding people

00:17:04,490 --> 00:17:08,060
have and as on replaced then we've got

00:17:07,010 --> 00:17:09,530
these labels they're coming from

00:17:08,060 --> 00:17:11,090
instrumentation they're going into

00:17:09,530 --> 00:17:13,070
Prometheus and they're going out to

00:17:11,090 --> 00:17:15,920
alerts so we have an alert here example

00:17:13,070 --> 00:17:17,300
using again my request total less than

00:17:15,920 --> 00:17:20,810
10 not the best nerd ever

00:17:17,300 --> 00:17:22,190
and we've adding here a severity label

00:17:20,810 --> 00:17:24,110
in additional to the end

00:17:22,190 --> 00:17:25,820
point and Method labels that are coming

00:17:24,110 --> 00:17:27,910
from the original entrant age example so

00:17:25,820 --> 00:17:30,680
all these labels are coming together

00:17:27,910 --> 00:17:32,660
there's also external labels and alert

00:17:30,680 --> 00:17:34,700
relabeling which will be out in the next

00:17:32,660 --> 00:17:36,290
release and so you can actually adjust

00:17:34,700 --> 00:17:38,240
alerts before we send them to alert

00:17:36,290 --> 00:17:40,550
manager so you can drop alerts you don't

00:17:38,240 --> 00:17:42,710
watch and so like maybe had a severity

00:17:40,550 --> 00:17:43,940
equals info that you were just using for

00:17:42,710 --> 00:17:45,440
dashboarding or something you don't want

00:17:43,940 --> 00:17:47,150
to load that you learn furniture for and

00:17:45,440 --> 00:17:51,470
also just distinguishing different per

00:17:47,150 --> 00:17:54,560
media servers so external labels is when

00:17:51,470 --> 00:17:56,240
we're talking out to Road storage or

00:17:54,560 --> 00:17:58,700
talking as you learn manager these will

00:17:56,240 --> 00:18:00,170
be added if they're not set the idea is

00:17:58,700 --> 00:18:02,140
if you have multiple community of

00:18:00,170 --> 00:18:04,640
servers each of these should be unique

00:18:02,140 --> 00:18:05,810
so you can tell oh right no that's

00:18:04,640 --> 00:18:07,040
production for me to use server

00:18:05,810 --> 00:18:08,780
that's the dev for me to use server

00:18:07,040 --> 00:18:11,180
that's automatically attached and we can

00:18:08,780 --> 00:18:12,860
use it in the alert manager because with

00:18:11,180 --> 00:18:14,990
as with everything else information is

00:18:12,860 --> 00:18:17,240
the alert manager works on labels and

00:18:14,990 --> 00:18:20,870
labels are key so you can have a label

00:18:17,240 --> 00:18:23,660
of like team equals billing and team

00:18:20,870 --> 00:18:26,180
equals API and then route based on those

00:18:23,660 --> 00:18:28,460
and say right this subtree over here is

00:18:26,180 --> 00:18:31,070
the rules for billing T this one is the

00:18:28,460 --> 00:18:32,270
API team and they can have different

00:18:31,070 --> 00:18:34,760
ways of doing things maybe one uses

00:18:32,270 --> 00:18:36,800
slack in theory versus HipChat and they

00:18:34,760 --> 00:18:40,580
can each of them choose themselves how

00:18:36,800 --> 00:18:42,650
they want that routed and the other

00:18:40,580 --> 00:18:44,420
thing we do is grouping which is

00:18:42,650 --> 00:18:46,340
actually really handy because there's

00:18:44,420 --> 00:18:47,840
other monitoring systems that you know

00:18:46,340 --> 00:18:50,870
every time there's an alert you're

00:18:47,840 --> 00:18:53,990
getting an email which means that you

00:18:50,870 --> 00:18:56,600
can get many emails which you will then

00:18:53,990 --> 00:18:59,090
dutifully ignore as an intelligent

00:18:56,600 --> 00:19:01,040
person realizing they're spam we're

00:18:59,090 --> 00:19:04,730
Prometheus were grouping things by label

00:19:01,040 --> 00:19:08,060
so you might be say hey I want the group

00:19:04,730 --> 00:19:11,000
to use by alert men and by data center

00:19:08,060 --> 00:19:12,890
because well if I lose an entire rack I

00:19:11,000 --> 00:19:15,200
can again then we'll alert tell me which

00:19:12,890 --> 00:19:16,670
machines are down or maybe by alert name

00:19:15,200 --> 00:19:19,250
because hey I've got a propagation delay

00:19:16,670 --> 00:19:20,600
alert it tends to happen in all the data

00:19:19,250 --> 00:19:22,970
services at the same time because

00:19:20,600 --> 00:19:26,180
there's a network outage and it's Lucien

00:19:22,970 --> 00:19:27,800
only one nurse rather than 20 and the

00:19:26,180 --> 00:19:29,810
final thing we have for enables alert

00:19:27,800 --> 00:19:31,880
manager is silences so you can pre

00:19:29,810 --> 00:19:34,130
create things saying you know data

00:19:31,880 --> 00:19:35,970
center there's about to be a power

00:19:34,130 --> 00:19:38,490
outage there I went to silence all

00:19:35,970 --> 00:19:40,860
and not get those alerts not they get

00:19:38,490 --> 00:19:43,290
those notifications because it's

00:19:40,860 --> 00:19:45,060
important that you know if you get any

00:19:43,290 --> 00:19:47,790
notification about alerts you actually

00:19:45,060 --> 00:19:48,960
care about it because if you are getting

00:19:47,790 --> 00:19:51,270
lots of notifications that you're

00:19:48,960 --> 00:19:53,550
ignoring you become fatigued and will

00:19:51,270 --> 00:19:55,140
miss the important ones and burn out and

00:19:53,550 --> 00:19:58,130
leave and get another job period the

00:19:55,140 --> 00:20:00,960
same thing happens just kind of sucks

00:19:58,130 --> 00:20:02,640
so to summarize the instrumentation

00:20:00,960 --> 00:20:04,950
labels they come from the application

00:20:02,640 --> 00:20:07,170
the service discovery then creates

00:20:04,950 --> 00:20:08,880
targets weary label those to figure out

00:20:07,170 --> 00:20:11,640
what you're actually scraping pull those

00:20:08,880 --> 00:20:13,770
in and you know add the target labels

00:20:11,640 --> 00:20:15,660
they need to do geometrical able to fix

00:20:13,770 --> 00:20:19,590
the applied those this range time series

00:20:15,660 --> 00:20:21,570
those going to infirmities then you get

00:20:19,590 --> 00:20:22,890
alerts run those against those add

00:20:21,570 --> 00:20:24,480
additional labels and talk about the

00:20:22,890 --> 00:20:26,490
inert expression gave send them out the

00:20:24,480 --> 00:20:28,080
alert manager and then the alert manager

00:20:26,490 --> 00:20:30,870
uses them for basically everything it

00:20:28,080 --> 00:20:33,620
does and that's how labels are threaded

00:20:30,870 --> 00:20:35,820
through to premedia stack as it stands

00:20:33,620 --> 00:20:37,350
and here's some resources so does the

00:20:35,820 --> 00:20:38,670
main Doc's on how to configure and

00:20:37,350 --> 00:20:40,590
here's some resources so does the main

00:20:38,670 --> 00:20:42,390
Doc's on how to configure this stuff

00:20:40,590 --> 00:20:44,040
there's the label flow to some nice

00:20:42,390 --> 00:20:46,680
pictures explaining how it works and

00:20:44,040 --> 00:20:48,380
there's some best practices there from

00:20:46,680 --> 00:20:51,480
few weeks ago as well as the general

00:20:48,380 --> 00:20:54,260
perception blog and an email address so

00:20:51,480 --> 00:20:54,260
questions

00:21:00,700 --> 00:21:11,330
so we're questions oh you're doing that

00:21:06,950 --> 00:21:13,760
on purpose I was really curious about

00:21:11,330 --> 00:21:15,620
the performance implications of labels

00:21:13,760 --> 00:21:17,300
we use them quite a bit but I really

00:21:15,620 --> 00:21:18,830
don't know how that's affecting the

00:21:17,300 --> 00:21:20,930
performance of our server okay

00:21:18,830 --> 00:21:24,470
so performance implications of labels if

00:21:20,930 --> 00:21:28,340
you're talking on the like the ingestion

00:21:24,470 --> 00:21:31,310
path they use some bandwidth if you're

00:21:28,340 --> 00:21:34,400
talking on querying we're working on

00:21:31,310 --> 00:21:36,170
that and so at the moment there's we

00:21:34,400 --> 00:21:37,730
recently our own additive heuristic to

00:21:36,170 --> 00:21:39,170
make it a little more efficient but

00:21:37,730 --> 00:21:40,730
ultimately we need a proper search

00:21:39,170 --> 00:21:43,430
engine to figure out which ones to pull

00:21:40,730 --> 00:21:45,080
in because we should you know basically

00:21:43,430 --> 00:21:46,640
estimating the cardinality and selecting

00:21:45,080 --> 00:21:48,680
things appropriately like we need a

00:21:46,640 --> 00:21:51,920
query planner basically just for labels

00:21:48,680 --> 00:21:54,440
and but generally the labels are kind of

00:21:51,920 --> 00:21:55,760
cheap and the real problem thing what

00:21:54,440 --> 00:21:57,340
labels more is thinking about the

00:21:55,760 --> 00:21:59,510
semantics of them and cardinality

00:21:57,340 --> 00:22:01,730
because the question isn't so much

00:21:59,510 --> 00:22:03,740
labels effect on per matias but how many

00:22:01,730 --> 00:22:05,600
time series is that creating because

00:22:03,740 --> 00:22:06,980
you've imagined if you have a million

00:22:05,600 --> 00:22:09,860
time series because you've broken out by

00:22:06,980 --> 00:22:11,510
email address that's like we figure at

00:22:09,860 --> 00:22:13,220
the moment Prometheus can handle about

00:22:11,510 --> 00:22:16,940
10 million metrics for servers and limit

00:22:13,220 --> 00:22:18,680
somewhere around there so if 10% of your

00:22:16,940 --> 00:22:20,090
resources are gone on just this single

00:22:18,680 --> 00:22:23,030
time series that's another good use of

00:22:20,090 --> 00:22:24,860
resources and use the balance okay how

00:22:23,030 --> 00:22:27,080
much operational cost is being work me

00:22:24,860 --> 00:22:29,660
having to go using shardy now just to

00:22:27,080 --> 00:22:31,010
deal with this massive metric or I could

00:22:29,660 --> 00:22:33,020
stop doing that and use logs for it

00:22:31,010 --> 00:22:34,760
instead and is that sort of trade-off

00:22:33,020 --> 00:22:36,410
you have to make is it worth my time

00:22:34,760 --> 00:22:37,970
you know scaling this up and having to

00:22:36,410 --> 00:22:39,410
nurse and feed this server or I would

00:22:37,970 --> 00:22:40,730
just decide actually that metric isn't

00:22:39,410 --> 00:22:42,560
working let's just scale down the

00:22:40,730 --> 00:22:45,490
cardinality so that's more where the

00:22:42,560 --> 00:22:45,490
question that labels is

00:22:47,150 --> 00:22:53,520
hey a question based on I guess group

00:22:50,760 --> 00:22:55,470
substitution so I'm thinking let's say I

00:22:53,520 --> 00:22:58,020
have a range of IP addresses and I want

00:22:55,470 --> 00:22:59,940
to show instead of the IP address list

00:22:58,020 --> 00:23:03,240
that it's in this country is there a way

00:22:59,940 --> 00:23:07,290
to do that with labels and so you want

00:23:03,240 --> 00:23:09,120
to do like G lookups that is one example

00:23:07,290 --> 00:23:10,770
but let's say that I have a cluster of

00:23:09,120 --> 00:23:12,630
servers that's in some region and I want

00:23:10,770 --> 00:23:15,540
to identify them by the region but the

00:23:12,630 --> 00:23:18,059
list of server IP addresses and regions

00:23:15,540 --> 00:23:21,630
changes over time yeah so if you're

00:23:18,059 --> 00:23:23,270
doing something that custom and that's

00:23:21,630 --> 00:23:25,860
not going to go intermedius itself

00:23:23,270 --> 00:23:27,240
you're going to do is write a little bit

00:23:25,860 --> 00:23:28,770
of code that will generate that from

00:23:27,240 --> 00:23:31,470
whatever database you're getting this

00:23:28,770 --> 00:23:32,790
stuff from and use the file SD so

00:23:31,470 --> 00:23:34,590
basically right out of JSON llamo file

00:23:32,790 --> 00:23:36,030
whatever name because everywhere

00:23:34,590 --> 00:23:38,700
infirmity it's like we know we cannot

00:23:36,030 --> 00:23:41,220
support everything so at every level we

00:23:38,700 --> 00:23:42,809
have a generic interface to let you do

00:23:41,220 --> 00:23:44,730
whatever weird stuff you want to do

00:23:42,809 --> 00:23:47,520
because you know we can't support this

00:23:44,730 --> 00:23:49,890
internally this is why the notice board

00:23:47,520 --> 00:23:53,580
has a text file connector why you know

00:23:49,890 --> 00:23:56,280
we have scraping generally at the

00:23:53,580 --> 00:23:57,990
webhook generic webhook notifier on the

00:23:56,280 --> 00:23:59,640
alert manager and hopefully some stuff

00:23:57,990 --> 00:24:01,890
in future around remote storage is all

00:23:59,640 --> 00:24:03,750
like here's a generic interface have fun

00:24:01,890 --> 00:24:07,500
because we want to keep the media scoped

00:24:03,750 --> 00:24:09,090
very carefully but yeah if you know to

00:24:07,500 --> 00:24:10,830
read exes and all I want to do it by

00:24:09,090 --> 00:24:12,270
registers you can but you're probably

00:24:10,830 --> 00:24:13,890
better stuff just writing something

00:24:12,270 --> 00:24:16,309
pulling this from whatever database this

00:24:13,890 --> 00:24:16,309
is coming from

00:24:17,309 --> 00:24:28,659
okay more questions okay wait a few more

00:24:24,190 --> 00:24:32,460
seconds all right so the lunch is

00:24:28,659 --> 00:24:32,460

YouTube URL: https://www.youtube.com/watch?v=b5-SvvZ7AwI


