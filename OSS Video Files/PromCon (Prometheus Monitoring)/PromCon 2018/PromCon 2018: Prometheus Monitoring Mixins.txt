Title: PromCon 2018: Prometheus Monitoring Mixins
Publication date: 2018-11-10
Playlist: PromCon 2018
Description: 
	Speaker: Tom Wilkie

Prometheus offers powerful open source monitoring and alerting - but that comes with higher degrees of freedom, making pre-configured monitoring "packages" hard to build. Simultaneously, it's becoming accepted wisdom that the developers of a given software package are best placed to operate said software, or at least construct the basic monitoring configuration.

In this talk we present a technique for using Jsonnet (a configuration language from Google) for packaging and deploying "Monitoring Mixins" - extensible and customisable combinations of dashboards, alert definitions and exporters. This technique allows developers of open source projects to publish best-practice monitoring configurations alongside their code, and for users to consume it, customise it and stay up to date. We will present example Mixins for Kubernetes and other services such as Consul, Vault, and Cassandra.
Captions: 
	00:00:10,000 --> 00:00:14,990
okay my name is Tom thank you the

00:00:12,080 --> 00:00:16,670
introduction Brian I work for a company

00:00:14,990 --> 00:00:19,340
called Gryphon elapsed some of you may

00:00:16,670 --> 00:00:20,600
have heard of us if you were paying

00:00:19,340 --> 00:00:21,980
attention last year was a different

00:00:20,600 --> 00:00:24,230
company in the year before it's another

00:00:21,980 --> 00:00:29,060
company so I wonder how I'll be working

00:00:24,230 --> 00:00:30,680
for next year anyway in the past year

00:00:29,060 --> 00:00:32,720
we've been teaching a whole bunch of new

00:00:30,680 --> 00:00:36,050
people how to use Prometheus and fauna

00:00:32,720 --> 00:00:37,760
and the process we've been going through

00:00:36,050 --> 00:00:39,400
is generally copying and pasting our

00:00:37,760 --> 00:00:42,350
alerts and our dashboards and and

00:00:39,400 --> 00:00:44,720
customizing them for the individuals now

00:00:42,350 --> 00:00:47,210
this as you can imagine is pretty

00:00:44,720 --> 00:00:48,680
painful you know it's very hard to

00:00:47,210 --> 00:00:51,079
consume updates when we fix our

00:00:48,680 --> 00:00:53,750
dashboards when we fix our alerts and so

00:00:51,079 --> 00:00:55,370
about six months ago I started this

00:00:53,750 --> 00:00:57,379
project called monitoring mix-ins with

00:00:55,370 --> 00:00:59,270
Frederick in the front here and this is

00:00:57,379 --> 00:01:01,250
an idea for giving us like reusable

00:00:59,270 --> 00:01:05,780
dashboards and alerts that we can share

00:01:01,250 --> 00:01:07,399
and iterate on as a community yeah so I

00:01:05,780 --> 00:01:09,710
gave this talk at coop con who is a coop

00:01:07,399 --> 00:01:11,450
con hands up but you can all leave

00:01:09,710 --> 00:01:13,910
because you've seen this before now

00:01:11,450 --> 00:01:16,039
there's some news there's some new stuff

00:01:13,910 --> 00:01:18,649
at the end so if you compare tension

00:01:16,039 --> 00:01:20,090
till then that we good anyway so there

00:01:18,649 --> 00:01:22,399
already exists a way of sharing

00:01:20,090 --> 00:01:24,560
dashboards and this is Griffin or comm

00:01:22,399 --> 00:01:25,940
has this process for you to share

00:01:24,560 --> 00:01:28,729
dashboards and import them easily into

00:01:25,940 --> 00:01:30,410
your graph on a lot of people do this

00:01:28,729 --> 00:01:32,690
and use these and Brian publishes some

00:01:30,410 --> 00:01:33,740
fantastic dashboards but the problem

00:01:32,690 --> 00:01:35,509
I've got with this is it though they

00:01:33,740 --> 00:01:37,399
don't always work the quality is a bit

00:01:35,509 --> 00:01:38,479
variable of the dashboards that we host

00:01:37,399 --> 00:01:40,550
on graph are not calm

00:01:38,479 --> 00:01:42,349
you know what what normally happens is

00:01:40,550 --> 00:01:44,270
you download one this is I just I just

00:01:42,349 --> 00:01:46,220
put kubernetes in to the graph and calm

00:01:44,270 --> 00:01:48,709
and got the first highest voted

00:01:46,220 --> 00:01:50,720
kubernetes dashboard and none of it

00:01:48,709 --> 00:01:51,979
worked and so then you've got a set

00:01:50,720 --> 00:01:53,869
around and try and figure out what's

00:01:51,979 --> 00:01:57,410
going on and generally you find that the

00:01:53,869 --> 00:01:59,000
queries in that dashboard the queries in

00:01:57,410 --> 00:02:01,369
that dashboard make certain assumptions

00:01:59,000 --> 00:02:03,349
about the labels your time series are

00:02:01,369 --> 00:02:05,030
using all right so this particular

00:02:03,349 --> 00:02:08,509
dashboard was hoping that there would be

00:02:05,030 --> 00:02:10,250
a kubernetes i/o host name label that it

00:02:08,509 --> 00:02:13,340
could specify to filter the queries down

00:02:10,250 --> 00:02:15,770
to a particular host now my Prometheus

00:02:13,340 --> 00:02:17,629
cluster doesn't have that label that's

00:02:15,770 --> 00:02:19,189
actually a counterexample you shouldn't

00:02:17,629 --> 00:02:21,890
have a label for host name on all your

00:02:19,189 --> 00:02:22,750
metrics and so this is why the dashboard

00:02:21,890 --> 00:02:25,960
didn't work

00:02:22,750 --> 00:02:27,670
and so generally like this led me to the

00:02:25,960 --> 00:02:29,890
conclusion that dashboards and alerts

00:02:27,670 --> 00:02:31,090
should not be opinionated about the

00:02:29,890 --> 00:02:32,830
labels right this should be

00:02:31,090 --> 00:02:34,870
configuration that you can feed into the

00:02:32,830 --> 00:02:37,270
dashboards and alerts and that's really

00:02:34,870 --> 00:02:39,400
the basis for this whole talk so the

00:02:37,270 --> 00:02:41,500
second point was you know the good

00:02:39,400 --> 00:02:43,930
citizens in the community like at CD

00:02:41,500 --> 00:02:45,640
like chorus they ship a whole bunch of

00:02:43,930 --> 00:02:49,360
alerts where that CD and because they

00:02:45,640 --> 00:02:50,950
wrote at CD I assume they know what to

00:02:49,360 --> 00:02:52,840
alert on you know they know what

00:02:50,950 --> 00:02:54,250
sensible and what's reasonable and what

00:02:52,840 --> 00:02:56,290
are like really good quality alerts

00:02:54,250 --> 00:02:57,370
however again they've made assumptions

00:02:56,290 --> 00:02:59,410
if you scroll down you'll see there's

00:02:57,370 --> 00:03:02,410
made assumptions about the label schema

00:02:59,410 --> 00:03:04,690
for your Etsy DS and that label schema

00:03:02,410 --> 00:03:05,890
wasn't valid for the Etsy D clusters

00:03:04,690 --> 00:03:07,420
that I was running you know I run

00:03:05,890 --> 00:03:11,230
multiple ones they're not all called job

00:03:07,420 --> 00:03:12,820
equals Etsy D and so on so what I really

00:03:11,230 --> 00:03:14,320
want you know a we need to be able to

00:03:12,820 --> 00:03:15,790
customize these as I said but also what

00:03:14,320 --> 00:03:17,590
I really want to do is you know I'm

00:03:15,790 --> 00:03:19,720
taking this and copying and paste it

00:03:17,590 --> 00:03:22,660
into my cluster I'm changing the labels

00:03:19,720 --> 00:03:24,400
and then comes along some you know smart

00:03:22,660 --> 00:03:27,489
guy and he comes and fixes a bug in

00:03:24,400 --> 00:03:30,130
those alerts and there's no way for me

00:03:27,489 --> 00:03:31,510
to consume that change there's no way

00:03:30,130 --> 00:03:32,980
for me to come and download the latest

00:03:31,510 --> 00:03:35,080
serve alerts and reapply my

00:03:32,980 --> 00:03:37,480
customizations right so we need a

00:03:35,080 --> 00:03:39,190
process where not only can alerts and

00:03:37,480 --> 00:03:40,959
dashboards and not assume the label sets

00:03:39,190 --> 00:03:43,230
that they're using in their queries but

00:03:40,959 --> 00:03:45,549
also we can inject them dynamically and

00:03:43,230 --> 00:03:48,850
we can stay up to date with changes

00:03:45,549 --> 00:03:50,769
upstream so really what I want is you

00:03:48,850 --> 00:03:52,360
know a really configurable and

00:03:50,769 --> 00:03:54,340
extensible language for expressing my

00:03:52,360 --> 00:03:56,320
alerts and dashboards and I want to make

00:03:54,340 --> 00:03:57,730
more reusable so I need some way of

00:03:56,320 --> 00:04:00,459
downloading new ones and managing

00:03:57,730 --> 00:04:02,799
versions and so on so that's the

00:04:00,459 --> 00:04:04,150
structure of the talk configurable and

00:04:02,799 --> 00:04:05,519
extensible so you know you've got a

00:04:04,150 --> 00:04:07,239
whole bunch of choices

00:04:05,519 --> 00:04:10,090
Prometheus alerts are written in the

00:04:07,239 --> 00:04:11,980
amyl but you know jason is basically a

00:04:10,090 --> 00:04:15,430
subset of Yama you could just go with

00:04:11,980 --> 00:04:17,560
this the challenge here is that they're

00:04:15,430 --> 00:04:19,150
not very dynamic great or not dynamic at

00:04:17,560 --> 00:04:20,680
all really like they're pretty static

00:04:19,150 --> 00:04:23,350
those configuration languages you can't

00:04:20,680 --> 00:04:26,919
really inject labels as I want to or

00:04:23,350 --> 00:04:28,120
even inject any kind of configuration so

00:04:26,919 --> 00:04:29,560
then you get down and this is what most

00:04:28,120 --> 00:04:31,510
people seem to do you get down the kind

00:04:29,560 --> 00:04:33,729
of string substitution route right so

00:04:31,510 --> 00:04:36,060
you end up with something like Ginga or

00:04:33,729 --> 00:04:37,260
you end up helm does go template

00:04:36,060 --> 00:04:39,030
and things like this and you end up

00:04:37,260 --> 00:04:41,730
treating your config file your yeah more

00:04:39,030 --> 00:04:44,370
config file as just a text file and then

00:04:41,730 --> 00:04:47,010
using templates to sub stuff in okay and

00:04:44,370 --> 00:04:49,169
that's that's pretty crappy too

00:04:47,010 --> 00:04:50,520
the problem there is that your your not

00:04:49,169 --> 00:04:52,139
your your substitutions don't really

00:04:50,520 --> 00:04:53,880
understand the structure of the data

00:04:52,139 --> 00:04:55,919
you're manipulating or the configuration

00:04:53,880 --> 00:04:57,900
you're manipulating so a really good

00:04:55,919 --> 00:05:00,900
example here is like how would you do

00:04:57,900 --> 00:05:02,790
this in a if you're using ginger or go

00:05:00,900 --> 00:05:05,370
templates how would you go and add a tag

00:05:02,790 --> 00:05:07,620
to all of your alerts you know unless

00:05:05,370 --> 00:05:09,870
that substitution spot has been enabled

00:05:07,620 --> 00:05:12,090
in the config you can't do it you know

00:05:09,870 --> 00:05:14,010
how would you go and add a playbook link

00:05:12,090 --> 00:05:15,330
into all of your alerts you can't really

00:05:14,010 --> 00:05:17,400
you know these techniques make this

00:05:15,330 --> 00:05:19,410
really hard to do that and so you know

00:05:17,400 --> 00:05:22,050
it's growing in popularity now to start

00:05:19,410 --> 00:05:23,430
treating your config just as a program

00:05:22,050 --> 00:05:25,410
you know you have a program that

00:05:23,430 --> 00:05:27,090
generates your config um I think the

00:05:25,410 --> 00:05:28,830
chaps are improbable in London you go to

00:05:27,090 --> 00:05:30,630
do this you know they've literally got a

00:05:28,830 --> 00:05:33,000
go program that when compiled out puts

00:05:30,630 --> 00:05:36,270
all of their configuration their chaps

00:05:33,000 --> 00:05:37,889
over it we've works use use Python to do

00:05:36,270 --> 00:05:38,970
this so they've written a Python library

00:05:37,889 --> 00:05:41,070
that a lot of you would have seen called

00:05:38,970 --> 00:05:42,479
growth on a limb and they use Python to

00:05:41,070 --> 00:05:44,340
generate their dashboards and this is

00:05:42,479 --> 00:05:47,010
great because you can now write Python

00:05:44,340 --> 00:05:48,930
code which goes in and modifies your

00:05:47,010 --> 00:05:51,900
dashboards you know goes in you know

00:05:48,930 --> 00:05:53,100
we've got they had things like well it's

00:05:51,900 --> 00:05:55,890
not on here but you can have like

00:05:53,100 --> 00:05:57,919
default sets of config for latencies and

00:05:55,890 --> 00:05:59,970
fork ups graphs and things like this but

00:05:57,919 --> 00:06:01,770
again I don't really like this approach

00:05:59,970 --> 00:06:03,150
either and if you can probably start to

00:06:01,770 --> 00:06:06,060
tell I'm quite opinionated about this

00:06:03,150 --> 00:06:08,250
kind of thing this feels too much like

00:06:06,060 --> 00:06:09,660
writing programs you know and and when

00:06:08,250 --> 00:06:11,940
you go and look at these you've got all

00:06:09,660 --> 00:06:13,380
the imports at the top and you've got to

00:06:11,940 --> 00:06:16,139
figure out all your class paths or

00:06:13,380 --> 00:06:17,400
whatever it is in in Python to do that

00:06:16,139 --> 00:06:20,760
and it just generally has a bit of a

00:06:17,400 --> 00:06:23,610
pain and yeah this is also not how they

00:06:20,760 --> 00:06:27,270
did at Google and so I let you know as

00:06:23,610 --> 00:06:29,190
is as is the one with with the modern

00:06:27,270 --> 00:06:30,630
cloud native community we tend to like

00:06:29,190 --> 00:06:31,200
to look at Google as a leader and see

00:06:30,630 --> 00:06:33,530
what they did

00:06:31,200 --> 00:06:36,030
so Borg and kubernetes Boardman and and

00:06:33,530 --> 00:06:38,340
Prometheus and I like to think this

00:06:36,030 --> 00:06:39,600
language called JSON it is similar to

00:06:38,340 --> 00:06:41,460
the way they solve the problem

00:06:39,600 --> 00:06:43,620
internally within Google so JSON is a

00:06:41,460 --> 00:06:45,960
data templating language you know it

00:06:43,620 --> 00:06:48,539
feels a lot like JSON but it's easier to

00:06:45,960 --> 00:06:50,009
write it actually came from a chap at

00:06:48,539 --> 00:06:53,550
Google but as far as I know they don't

00:06:50,009 --> 00:06:56,699
user Google and it's effectively JSON

00:06:53,550 --> 00:06:58,559
with a set of extensions so it's a

00:06:56,699 --> 00:07:01,259
superset JSON is a subset of this valid

00:06:58,559 --> 00:07:03,149
JSON is valid JSON it but it adds to

00:07:01,259 --> 00:07:08,639
this it adds variables conditionals well

00:07:03,149 --> 00:07:10,259
everyone can read the slides and it's

00:07:08,639 --> 00:07:11,969
it's it's I'm pretty sure it's true and

00:07:10,259 --> 00:07:13,439
complete as well so you can write full

00:07:11,969 --> 00:07:16,409
programs in if you really want it to but

00:07:13,439 --> 00:07:18,389
but don't do that so the bulk of this

00:07:16,409 --> 00:07:19,800
talk is going to be kind of demystifying

00:07:18,389 --> 00:07:21,509
this JSON it thing because a lot of

00:07:19,800 --> 00:07:24,300
people take one look at it and think

00:07:21,509 --> 00:07:26,729
we're absolutely crazy it's quite terse

00:07:24,300 --> 00:07:28,499
it's you know got a few operators that

00:07:26,729 --> 00:07:35,479
tend to be quite powerful so I'm just

00:07:28,499 --> 00:07:35,479
gonna dive in and give me one second

00:07:41,180 --> 00:08:07,110
everyone see my screen no seriously so

00:08:03,240 --> 00:08:11,580
new new one arrives next week so you can

00:08:07,110 --> 00:08:12,539
see about this and so this is where I'm

00:08:11,580 --> 00:08:15,539
going to edit and this is what the

00:08:12,539 --> 00:08:19,319
compiled output of the JSON it is and so

00:08:15,539 --> 00:08:20,759
the first thing you can do let's do

00:08:19,319 --> 00:08:26,699
something like this

00:08:20,759 --> 00:08:28,649
hello okay we're clear with this so

00:08:26,699 --> 00:08:30,419
first thing you'll notice is you can

00:08:28,649 --> 00:08:32,430
have a trailing comma and suddenly your

00:08:30,419 --> 00:08:36,990
disks will be manageable again yeah it

00:08:32,430 --> 00:08:38,959
makes me so happy I really surprised

00:08:36,990 --> 00:08:40,800
that got me her applause ah

00:08:38,959 --> 00:08:42,719
the other thing you can do is you can

00:08:40,800 --> 00:08:44,399
get rid of the quotes around your around

00:08:42,719 --> 00:08:47,010
your keys which tends to make it quite a

00:08:44,399 --> 00:08:50,490
lot more easy then what you can do is

00:08:47,010 --> 00:08:53,269
you can say oh tom is not a valid

00:08:50,490 --> 00:08:56,339
reference but you can do things like

00:08:53,269 --> 00:08:58,290
name so you can refer to things okay

00:08:56,339 --> 00:09:00,839
really straightforward this allows you

00:08:58,290 --> 00:09:03,180
to this is the basis this is the basis

00:09:00,839 --> 00:09:03,660
on which you build configuration you

00:09:03,180 --> 00:09:05,310
know you can

00:09:03,660 --> 00:09:07,710
have a central config that gets referred

00:09:05,310 --> 00:09:09,660
to in various different places and if

00:09:07,710 --> 00:09:12,600
you wanted to say you know he won't be

00:09:09,660 --> 00:09:15,150
really nice to yourself today you can do

00:09:12,600 --> 00:09:19,410
string substitution uh-uh you could do

00:09:15,150 --> 00:09:21,900
string substitution live demos and it's

00:09:19,410 --> 00:09:28,080
gone well luckily this one does string

00:09:21,900 --> 00:09:33,990
substitution so let's let's do what I

00:09:28,080 --> 00:09:35,730
was hoping to show you down a bit is it

00:09:33,990 --> 00:09:36,750
you reckon it work there no it's gone

00:09:35,730 --> 00:09:39,180
that's the problem

00:09:36,750 --> 00:09:42,870
this website is pretty cool but yeah

00:09:39,180 --> 00:09:45,240
that's not self name okay so you can do

00:09:42,870 --> 00:09:49,500
string substitution as well so this

00:09:45,240 --> 00:09:52,580
example I'm just gonna delete a few

00:09:49,500 --> 00:09:52,580
things because I want to make it simpler

00:09:52,760 --> 00:10:00,150
okay so that's what we had before now

00:09:56,310 --> 00:10:02,250
what we can do is we can do merges now

00:10:00,150 --> 00:10:03,870
this might be slightly strange to some

00:10:02,250 --> 00:10:05,790
of you but this is really the crux of

00:10:03,870 --> 00:10:07,410
JSON it you can take two dictionaries

00:10:05,790 --> 00:10:09,120
and you can merge them together it's got

00:10:07,410 --> 00:10:10,770
really well defined merge semantics

00:10:09,120 --> 00:10:13,260
basically things on the right

00:10:10,770 --> 00:10:19,080
override things on the left so for

00:10:13,260 --> 00:10:21,090
instance I can say name Tom tada and so

00:10:19,080 --> 00:10:23,790
now you can imagine you use this system

00:10:21,090 --> 00:10:25,860
to build it's quite hard to look at you

00:10:23,790 --> 00:10:28,050
and talking to this and type you can use

00:10:25,860 --> 00:10:30,390
the system to like merge in your config

00:10:28,050 --> 00:10:32,190
into the existing set of dashboards and

00:10:30,390 --> 00:10:34,290
this is really the basis on which all

00:10:32,190 --> 00:10:35,790
the mixing stuff is built you would take

00:10:34,290 --> 00:10:38,940
a mix in and you'd merge in some

00:10:35,790 --> 00:10:40,680
specializations from configuration let's

00:10:38,940 --> 00:10:42,750
show you some I've got some notes or

00:10:40,680 --> 00:10:44,160
other stuff I want to show you I've done

00:10:42,750 --> 00:10:46,080
string substitution down references

00:10:44,160 --> 00:10:47,520
right so maybe we don't want the output

00:10:46,080 --> 00:10:50,340
to contain the name because that's a

00:10:47,520 --> 00:10:51,360
configuration so we can do and this is

00:10:50,340 --> 00:10:53,250
where the conflict starts to get the

00:10:51,360 --> 00:10:55,110
language starts get a bit terse but a

00:10:53,250 --> 00:10:57,960
double colon means the output won't be

00:10:55,110 --> 00:10:59,220
included in the the input won't be

00:10:57,960 --> 00:11:02,220
included in the output so you seen our

00:10:59,220 --> 00:11:05,040
name is hidden in the output and then

00:11:02,220 --> 00:11:07,850
there is you can do submerges so say we

00:11:05,040 --> 00:11:14,640
you know had a well let's do a variable

00:11:07,850 --> 00:11:17,120
local thingy equals and then we can do

00:11:14,640 --> 00:11:17,120
thingy

00:11:17,660 --> 00:11:23,029
yes so this and this are equivalent

00:11:20,720 --> 00:11:24,529
basically if you've got a named

00:11:23,029 --> 00:11:26,269
dictionary and you want to merge it with

00:11:24,529 --> 00:11:28,700
a another dictionary you can omit the

00:11:26,269 --> 00:11:30,470
plus and now this starts to look like

00:11:28,700 --> 00:11:33,380
object orientation that starts to look

00:11:30,470 --> 00:11:37,010
like you're instantiating a thingy never

00:11:33,380 --> 00:11:39,170
thought I'd say that mistake and you can

00:11:37,010 --> 00:11:39,820
start to see how like the hidden fields'

00:11:39,170 --> 00:11:42,410
of thingy

00:11:39,820 --> 00:11:43,730
you know approximate variables for this

00:11:42,410 --> 00:11:45,380
class or you know variables for the

00:11:43,730 --> 00:11:50,300
constructor of the class with sensible

00:11:45,380 --> 00:11:54,740
defaults let's have a look so the merge

00:11:50,300 --> 00:11:56,000
is recursive so if we did like foo yep

00:11:54,740 --> 00:12:03,649
bringing out the foo bars I've run out

00:11:56,000 --> 00:12:05,269
of names foo bar another one that so you

00:12:03,649 --> 00:12:08,060
can see the output now contains foo bar

00:12:05,269 --> 00:12:10,700
bat and in here we can do things like we

00:12:08,060 --> 00:12:12,649
can just completely override food okay

00:12:10,700 --> 00:12:13,390
so this isn't recursively merge are you

00:12:12,649 --> 00:12:16,190
filming this

00:12:13,390 --> 00:12:17,480
this isn't recursive it's on the it's on

00:12:16,190 --> 00:12:19,940
the stream you can film it later

00:12:17,480 --> 00:12:21,230
this doesn't recursively merge at this

00:12:19,940 --> 00:12:23,540
stage right you can see foo is just

00:12:21,230 --> 00:12:27,380
overridden a whole sub object but if we

00:12:23,540 --> 00:12:33,050
did + : this is now recursively merging

00:12:27,380 --> 00:12:38,300
and you can add you know bars run out of

00:12:33,050 --> 00:12:40,310
things so again what was that I'm not

00:12:38,300 --> 00:12:42,170
gonna say that anyway so this you can

00:12:40,310 --> 00:12:43,490
see recursive merges you can see hidden

00:12:42,170 --> 00:12:45,680
field you can see string substitution

00:12:43,490 --> 00:12:49,490
this is really this toolkit that we're

00:12:45,680 --> 00:12:52,610
using to build up the mix-ins so

00:12:49,490 --> 00:12:55,220
anything else to show you guys hidden

00:12:52,610 --> 00:12:56,420
fields merging syntactic sugar that's

00:12:55,220 --> 00:13:02,449
bad yeah I think yep

00:12:56,420 --> 00:13:04,399
let's move on so that's probably the

00:13:02,449 --> 00:13:09,980
first time most of you have seen someone

00:13:04,399 --> 00:13:10,970
do some do some JSON it yeah that's

00:13:09,980 --> 00:13:13,070
probably the first time you've seen

00:13:10,970 --> 00:13:14,390
someone do some JSON it it's not that

00:13:13,070 --> 00:13:16,490
intimidating there's only three or four

00:13:14,390 --> 00:13:17,480
operators you need to remember and it's

00:13:16,490 --> 00:13:19,279
just because they're all single

00:13:17,480 --> 00:13:21,010
character operators I think at first

00:13:19,279 --> 00:13:23,269
glance people tend to think it's crazy

00:13:21,010 --> 00:13:26,390
anyway so moving on configuration

00:13:23,269 --> 00:13:28,790
extensibility part two this is how we

00:13:26,390 --> 00:13:30,380
define our our mix-ins you know mixing

00:13:28,790 --> 00:13:30,830
is basically defined as four top-level

00:13:30,380 --> 00:13:32,930
keys

00:13:30,830 --> 00:13:34,130
you've got some config I put an

00:13:32,930 --> 00:13:36,260
underscore in it to make it really

00:13:34,130 --> 00:13:38,510
obvious that this is special and this

00:13:36,260 --> 00:13:40,010
isn't in the output you've got some

00:13:38,510 --> 00:13:42,830
dashboards you've got some alerts and

00:13:40,010 --> 00:13:45,170
you've got some rules and that's about

00:13:42,830 --> 00:13:47,089
it really the dashboards and the alerts

00:13:45,170 --> 00:13:48,470
and the rules are just the same

00:13:47,089 --> 00:13:50,720
structure you'd see in the Prometheus

00:13:48,470 --> 00:13:52,220
animal and depending on how you like

00:13:50,720 --> 00:13:54,260
render these out that will just get

00:13:52,220 --> 00:13:55,880
written out as Prometheus camel and the

00:13:54,260 --> 00:13:57,170
dashboards the dictionary of JSON files

00:13:55,880 --> 00:14:00,260
which just contain your graph on

00:13:57,170 --> 00:14:03,290
adjacent so let's give a concrete

00:14:00,260 --> 00:14:05,329
example in the config typically every

00:14:03,290 --> 00:14:07,880
mix in will expose as a configuration

00:14:05,329 --> 00:14:10,550
the selector it wants to use to select

00:14:07,880 --> 00:14:12,170
the job so here we're looking at a cube

00:14:10,550 --> 00:14:14,480
state metric so this is taken an example

00:14:12,170 --> 00:14:17,269
taken from the cuba Nettie's mixin we

00:14:14,480 --> 00:14:19,910
want to select job equals and now this

00:14:17,269 --> 00:14:23,180
is my opinion that I like to include the

00:14:19,910 --> 00:14:24,860
namespace in the job name ok this stops

00:14:23,180 --> 00:14:27,200
me aggregating across jobs in different

00:14:24,860 --> 00:14:28,490
namespaces so this is how I express my

00:14:27,200 --> 00:14:29,779
opinion but you can do it differently

00:14:28,490 --> 00:14:31,940
because you can override these because

00:14:29,779 --> 00:14:35,060
it's JSON it and then you look in the

00:14:31,940 --> 00:14:36,860
definition for the alert ok this is not

00:14:35,060 --> 00:14:39,200
quite as pretty as yeah more but it's

00:14:36,860 --> 00:14:41,149
better than Jason you build up your

00:14:39,200 --> 00:14:43,130
alert groups you build up your list of

00:14:41,149 --> 00:14:44,720
rules you have podcast looping and then

00:14:43,130 --> 00:14:47,140
in the query you do this big string

00:14:44,720 --> 00:14:50,000
substitution and now I like to do it

00:14:47,140 --> 00:14:51,500
using named substitution so I pass in

00:14:50,000 --> 00:14:54,260
the whole config dictionary to every

00:14:51,500 --> 00:14:56,089
every string and then I name the the

00:14:54,260 --> 00:14:57,800
field in the config dictionary that I'm

00:14:56,089 --> 00:14:59,839
pulling out you know you could just do %

00:14:57,800 --> 00:15:02,570
s and then do config cube state metric

00:14:59,839 --> 00:15:04,310
selector but this helps it if for

00:15:02,570 --> 00:15:05,630
instance and this is quite common you

00:15:04,310 --> 00:15:08,329
might refer to the same selecting

00:15:05,630 --> 00:15:09,440
multiple times within a single query you

00:15:08,329 --> 00:15:11,390
know you might want to refer to multiple

00:15:09,440 --> 00:15:13,970
selectors within a single query you'll

00:15:11,390 --> 00:15:16,790
notice this this is part of case on it

00:15:13,970 --> 00:15:18,709
the % s and this curly brace is part of

00:15:16,790 --> 00:15:21,079
the prompt QL query so that's how we've

00:15:18,709 --> 00:15:22,760
kind of embedded the two languages and

00:15:21,079 --> 00:15:24,860
then when it's rendered it looks like

00:15:22,760 --> 00:15:26,180
this it gets substituted into the thing

00:15:24,860 --> 00:15:29,390
you'd expect and it's rendered out as

00:15:26,180 --> 00:15:30,829
Yamma ok that's it really that's that's

00:15:29,390 --> 00:15:32,690
pretty much it now I said at the

00:15:30,829 --> 00:15:35,120
beginning I wanted these things to be

00:15:32,690 --> 00:15:36,860
reusable 5-minutes things I wanted these

00:15:35,120 --> 00:15:38,720
things to be reusable now this is where

00:15:36,860 --> 00:15:39,949
frederick enters the picture we were

00:15:38,720 --> 00:15:41,510
having a conversation about this we're

00:15:39,949 --> 00:15:42,740
trying to figure out how are we going to

00:15:41,510 --> 00:15:44,750
make it really easy for people to

00:15:42,740 --> 00:15:47,690
download upgrade manage

00:15:44,750 --> 00:15:49,760
these mix-ins you probably saw this a

00:15:47,690 --> 00:15:52,640
few days ago Frederick I think he had a

00:15:49,760 --> 00:15:55,610
fever dream about building another

00:15:52,640 --> 00:15:57,260
package manager for JSON it but it turns

00:15:55,610 --> 00:15:59,600
out he did and it's pretty awesome

00:15:57,260 --> 00:16:01,550
you can you it we Frederick's called it

00:15:59,600 --> 00:16:03,440
JSON it bundler it lives in a sonic

00:16:01,550 --> 00:16:04,940
bundle on github and it is a package

00:16:03,440 --> 00:16:07,130
manager for JSON it it's really

00:16:04,940 --> 00:16:09,170
straightforward you go and get it it's

00:16:07,130 --> 00:16:12,410
written and go you in it which just

00:16:09,170 --> 00:16:14,570
writes out an empty lock file and then

00:16:12,410 --> 00:16:16,580
you can jb install various mix-ins you

00:16:14,570 --> 00:16:18,410
know it's kind of modeled on go get you

00:16:16,580 --> 00:16:20,240
know supposed to be very friendly and

00:16:18,410 --> 00:16:22,610
native to people in this community and

00:16:20,240 --> 00:16:24,320
then you can see and then again very

00:16:22,610 --> 00:16:26,000
much like go get it builds a vendor tree

00:16:24,320 --> 00:16:28,670
full of all your mix ins and it will go

00:16:26,000 --> 00:16:30,710
and recursively fetch other JSON it

00:16:28,670 --> 00:16:32,210
libraries that mix-ins depend on so what

00:16:30,710 --> 00:16:34,460
you'll quite commonly see is graph on it

00:16:32,210 --> 00:16:35,870
is a JSON it library for building refine

00:16:34,460 --> 00:16:37,640
a dashboard so you don't have to manage

00:16:35,870 --> 00:16:39,530
the JSON yourself but you can just do

00:16:37,640 --> 00:16:41,900
like new panel new dashboard and so on

00:16:39,530 --> 00:16:44,630
so most mix-ins will probably go and

00:16:41,900 --> 00:16:46,190
fetch JSON it fetch graph on it ok and

00:16:44,630 --> 00:16:48,440
that's it really now you've got a vendor

00:16:46,190 --> 00:16:50,750
tree full of all your mix-ins you can

00:16:48,440 --> 00:16:51,290
build you know a little JSON it's

00:16:50,750 --> 00:16:53,510
snippet

00:16:51,290 --> 00:16:54,830
oh no I admitted that part because I was

00:16:53,510 --> 00:16:56,300
running out of time you can go and build

00:16:54,830 --> 00:16:58,130
a little JSON it's snippet which renders

00:16:56,300 --> 00:16:59,750
these all out and the kubernetes nixon

00:16:58,130 --> 00:17:01,370
has a really good read me that explains

00:16:59,750 --> 00:17:02,660
how to do this i'm going to skip it over

00:17:01,370 --> 00:17:05,449
this was originally a forty minute talk

00:17:02,660 --> 00:17:07,430
only got five minutes left there's two

00:17:05,449 --> 00:17:10,040
design Docs one for the package manager

00:17:07,430 --> 00:17:11,900
and one for the mixing spec itself

00:17:10,040 --> 00:17:14,870
online go and check them out any

00:17:11,900 --> 00:17:16,430
feedback to be more than welcome so

00:17:14,870 --> 00:17:17,750
that's kind of where i stopped a coop

00:17:16,430 --> 00:17:19,040
comm with a bit more demos of how to

00:17:17,750 --> 00:17:22,400
install it and i wanted to give you guys

00:17:19,040 --> 00:17:24,560
an update cubic on was for three months

00:17:22,400 --> 00:17:27,050
ago and what's happened in the last

00:17:24,560 --> 00:17:29,300
three months well we started off with

00:17:27,050 --> 00:17:31,100
these four mix-ins pretty much wrote all

00:17:29,300 --> 00:17:34,160
of them the kubernetes one I wrote with

00:17:31,100 --> 00:17:36,770
Frederick they've been quite popular

00:17:34,160 --> 00:17:38,120
quite useful but since then well the

00:17:36,770 --> 00:17:38,600
main one has really been the Cuban eTI's

00:17:38,120 --> 00:17:40,340
mix in

00:17:38,600 --> 00:17:41,780
we've had nine contributors now from

00:17:40,340 --> 00:17:43,610
different companies we've had

00:17:41,780 --> 00:17:45,980
contributions from Google from MongoDB

00:17:43,610 --> 00:17:48,320
from the san diego supercomputer center

00:17:45,980 --> 00:17:49,820
thought that was really cool metal mats

00:17:48,320 --> 00:17:52,700
a sitting in front here he's also become

00:17:49,820 --> 00:17:53,900
a committer and frederick told me

00:17:52,700 --> 00:17:55,730
yesterday this is going to be used this

00:17:53,900 --> 00:17:57,500
this set of alerts and dashboards for

00:17:55,730 --> 00:17:58,460
kubernetes is going to be used in every

00:17:57,500 --> 00:18:02,420
single future

00:17:58,460 --> 00:18:04,490
of OpenShift I think but we also have

00:18:02,420 --> 00:18:07,130
now a Prometheus mixin so this defines a

00:18:04,490 --> 00:18:08,600
set of alerts that we think you know our

00:18:07,130 --> 00:18:10,580
opinion is what what you should be

00:18:08,600 --> 00:18:11,900
running if you're running Prometheus we

00:18:10,580 --> 00:18:14,210
have a node exporter mixing this one's

00:18:11,900 --> 00:18:16,760
still quite working progress kinda

00:18:14,210 --> 00:18:20,690
describes standard alerts and dashboards

00:18:16,760 --> 00:18:22,220
for for your nodes and better yet this

00:18:20,690 --> 00:18:25,910
chap who I've never met before is he

00:18:22,220 --> 00:18:27,350
here he's written a mix in for for

00:18:25,910 --> 00:18:28,820
something extraterrestrial

00:18:27,350 --> 00:18:30,860
I haven't actually checked it out yet

00:18:28,820 --> 00:18:33,530
but it's NASA space weather something

00:18:30,860 --> 00:18:35,030
and it's got a JSON it mix in it and so

00:18:33,530 --> 00:18:36,620
finally someone other than me and

00:18:35,030 --> 00:18:41,240
Frederick of Ritter mixing this makes me

00:18:36,620 --> 00:18:50,540
so happy anyway that's it thank you very

00:18:41,240 --> 00:18:53,570
much oh sorry Brian tonight

00:18:50,540 --> 00:18:56,270
I've also as its prom coin prom con I'll

00:18:53,570 --> 00:18:57,860
get it right now I've 3d printed a whole

00:18:56,270 --> 00:18:59,210
bunch of Prometheus coins we're

00:18:57,860 --> 00:19:01,460
launching our own digital currency it's

00:18:59,210 --> 00:19:03,700
just not quite what you think and so if

00:19:01,460 --> 00:19:06,650
you ask a question and it's a good one

00:19:03,700 --> 00:19:08,570
you can have one of these so who's got

00:19:06,650 --> 00:19:09,200
the first question there's one in the

00:19:08,570 --> 00:19:13,220
front okay

00:19:09,200 --> 00:19:15,110
you know I'm first got one so how do you

00:19:13,220 --> 00:19:16,640
do I do have quite understand how did

00:19:15,110 --> 00:19:19,550
you solve the problem when a label

00:19:16,640 --> 00:19:21,200
changes upstream so you've overridden

00:19:19,550 --> 00:19:22,160
the labels for your particular oh you

00:19:21,200 --> 00:19:26,560
know that's one of the things I wanted

00:19:22,160 --> 00:19:29,900
to show you actually yeah so um yeah

00:19:26,560 --> 00:19:30,920
yeah have you got a coin already yeah

00:19:29,900 --> 00:19:34,850
I'm gonna give it to you later I'm gonna

00:19:30,920 --> 00:19:37,340
hit the wrong people come up to the

00:19:34,850 --> 00:19:39,800
front later and get your coins so this

00:19:37,340 --> 00:19:41,840
is the kubernetes mixin these are the

00:19:39,800 --> 00:19:43,160
default selectors it users so you can

00:19:41,840 --> 00:19:45,800
come along and it basically all the jobs

00:19:43,160 --> 00:19:47,960
it describes where what label expects

00:19:45,800 --> 00:19:49,730
them to be used with and then in my

00:19:47,960 --> 00:19:51,410
opinion ated version of how we manage

00:19:49,730 --> 00:19:53,420
and install kubernetes and Prometheus

00:19:51,410 --> 00:19:56,120
and everything I use a different set of

00:19:53,420 --> 00:19:58,940
labels so this is my config that

00:19:56,120 --> 00:20:01,640
overrides the ones okay and you see in

00:19:58,940 --> 00:20:03,620
my config I've said I want you know I

00:20:01,640 --> 00:20:06,080
want everything to be prefixed with the

00:20:03,620 --> 00:20:06,980
name space it lives in and you know I've

00:20:06,080 --> 00:20:08,390
may even made the name space

00:20:06,980 --> 00:20:11,060
configurable in certain cases

00:20:08,390 --> 00:20:12,290
so this lives in our you know in our

00:20:11,060 --> 00:20:14,870
configuration mono repo

00:20:12,290 --> 00:20:16,250
and gets rendered out to the pipe to the

00:20:14,870 --> 00:20:17,750
kubernetes cluster every time you change

00:20:16,250 --> 00:20:18,680
anything and for that I use case on it

00:20:17,750 --> 00:20:21,230
and that's really the whole part the

00:20:18,680 --> 00:20:22,340
talk I kind of dropped but yeah go and

00:20:21,230 --> 00:20:24,080
check out the coupon talk if you want to

00:20:22,340 --> 00:20:26,450
see how that works so there was Brian

00:20:24,080 --> 00:20:27,020
there's one in the front here ok next

00:20:26,450 --> 00:20:30,320
one in front

00:20:27,020 --> 00:20:32,480
um hi um there is this similar project

00:20:30,320 --> 00:20:34,750
called the Prometheus operator by core

00:20:32,480 --> 00:20:36,890
OS so how does this relate to each other

00:20:34,750 --> 00:20:38,240
yeah really good question how does this

00:20:36,890 --> 00:20:39,620
relate to Prometheus operator well

00:20:38,240 --> 00:20:41,510
Fredrik writes the Prometheus operator

00:20:39,620 --> 00:20:45,890
were on his team and the Prometheus

00:20:41,510 --> 00:20:47,350
operator uses these mix-ins testing

00:20:45,890 --> 00:20:49,820
testing

00:20:47,350 --> 00:20:51,680
sorry I'm probably just holding it right

00:20:49,820 --> 00:20:53,240
yes the Prometheus operator uses these

00:20:51,680 --> 00:20:55,880
which is I think how it's getting into

00:20:53,240 --> 00:20:57,260
openshift as well yeah very much con

00:20:55,880 --> 00:20:59,180
Prometheus operator is how you install

00:20:57,260 --> 00:21:02,270
and manage Prometheus and then Q

00:20:59,180 --> 00:21:03,800
Prometheus is a set of yeah Mille and

00:21:02,270 --> 00:21:05,330
configs for managing all the other

00:21:03,800 --> 00:21:07,490
components and there's a similar project

00:21:05,330 --> 00:21:08,930
for profiler as well and they all use

00:21:07,490 --> 00:21:11,420
the mix-ins for kind of the dashboards

00:21:08,930 --> 00:21:15,230
and alerts cool come and get your coin

00:21:11,420 --> 00:21:16,730
later again I'm still very new so with

00:21:15,230 --> 00:21:19,220
the configuration with using the ammo

00:21:16,730 --> 00:21:22,070
and for the mix and for your dashboards

00:21:19,220 --> 00:21:24,730
I'm thinking that maybe I can also use

00:21:22,070 --> 00:21:28,190
ansible that automate all this is that

00:21:24,730 --> 00:21:30,050
ok so there's a command you can run that

00:21:28,190 --> 00:21:32,750
will render out the Jay Sonic

00:21:30,050 --> 00:21:34,000
configuration into Yama files and you

00:21:32,750 --> 00:21:35,840
would just add that to your ansible

00:21:34,000 --> 00:21:39,520
pipeline I don't really know anything of

00:21:35,840 --> 00:21:43,280
ansible but you're an small pipeline and

00:21:39,520 --> 00:21:44,810
yeah come get one later I was I was

00:21:43,280 --> 00:21:47,690
planning on throwing at the audience but

00:21:44,810 --> 00:21:49,640
you know health and safety any more

00:21:47,690 --> 00:21:52,710
questions no that's for just fed up with

00:21:49,640 --> 00:21:56,719
time so very much thanks guys

00:21:52,710 --> 00:21:56,719

YouTube URL: https://www.youtube.com/watch?v=GDdnL5R_l-Y


