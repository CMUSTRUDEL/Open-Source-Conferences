Title: PromCon 2018: Lightning Talks - Day 1
Publication date: 2018-11-10
Playlist: PromCon 2018
Description: 
	#1 - Integrate Alertmanager with OpsGenie for Advanced Alerting
Speaker: Mustafa Akin

#2 - Property and Model Based Testing of Alertmanager
Speaker: Max Inden

#3 - Monitoring Atlassian Applications
Speaker: Andrey Markelov

#4 - Chronomancer: Using Cortex to Control Time between Series
Speaker: Bob Cotton

#5 - BMC and Prometheus
Speaker: Christian Svensson

#6 - End User Dashboards with Prometheus
Speaker: Julien Pivotto

#7 - M3 with Prometheus
Speaker: Nikunj Aggarwal

#8 - Prometheus in Debian
Speaker: MartÃ­n Ferrari

#9 - Growing Up is Hard
Speaker: Michael Hausenblas

#10 - Canary Deployment with Prometheus
Speaker: Andrey Markelov
Captions: 
	00:00:09,820 --> 00:00:15,369
hi everyone I am Stover from opportunity

00:00:13,000 --> 00:00:20,169
I massage reliable changing at all

00:00:15,369 --> 00:00:21,699
shinny I will be going first if you have

00:00:20,169 --> 00:00:23,980
any questions please ask me forward

00:00:21,699 --> 00:00:25,779
after the event so there is a physical

00:00:23,980 --> 00:00:27,730
question if a tree falls in the forest

00:00:25,779 --> 00:00:30,699
and no one's around to hear it does it

00:00:27,730 --> 00:00:33,190
will make a sound so if an attack occurs

00:00:30,699 --> 00:00:39,190
in the system and no one takes an actual

00:00:33,190 --> 00:00:41,379
action is it to than incident you have

00:00:39,190 --> 00:00:43,930
continuous all of you probably from

00:00:41,379 --> 00:00:47,100
containers and they crash everyday and

00:00:43,930 --> 00:00:50,410
you connected permit use and other major

00:00:47,100 --> 00:00:52,420
to forward tellers what if you don't

00:00:50,410 --> 00:00:55,149
forward them anywhere they are lost you

00:00:52,420 --> 00:00:57,519
can use emails but what if the person

00:00:55,149 --> 00:00:59,920
does not get email email is not very

00:00:57,519 --> 00:01:03,010
reliable and there is no proper

00:00:59,920 --> 00:01:05,199
acknowledgments so you can use like

00:01:03,010 --> 00:01:07,420
integration of to alert manager but

00:01:05,199 --> 00:01:11,259
problems the same problems still exist

00:01:07,420 --> 00:01:13,690
for instance what if the person does not

00:01:11,259 --> 00:01:18,009
see the like notifications what if he is

00:01:13,690 --> 00:01:19,360
sleeping or there's no one else so you

00:01:18,009 --> 00:01:23,080
should be handing your instance the

00:01:19,360 --> 00:01:25,390
right way so you should be using systems

00:01:23,080 --> 00:01:27,450
like opportunity to properly handle the

00:01:25,390 --> 00:01:31,509
incidence because you might have

00:01:27,450 --> 00:01:33,099
different requirements so as we are

00:01:31,509 --> 00:01:38,880
writing arrest you are probably writing

00:01:33,099 --> 00:01:42,190
the others to plan before the possible

00:01:38,880 --> 00:01:43,840
incident so you should ensure they are

00:01:42,190 --> 00:01:46,929
not missed and the right people are

00:01:43,840 --> 00:01:48,849
notified on time for and you could also

00:01:46,929 --> 00:01:51,330
provide insight your operational

00:01:48,849 --> 00:01:54,099
efficiency if an alert occurs and you

00:01:51,330 --> 00:01:56,860
response it in one hour it's not very

00:01:54,099 --> 00:01:58,420
good for your operation so regular

00:01:56,860 --> 00:02:01,629
managers has these features grouping

00:01:58,420 --> 00:02:05,259
inhibition and silences but with using

00:02:01,629 --> 00:02:08,020
option you could also routing on-call

00:02:05,259 --> 00:02:10,030
scheduling you could also use multiple

00:02:08,020 --> 00:02:15,129
notifications for no one can sleep

00:02:10,030 --> 00:02:16,480
properly at night and with Audrey

00:02:15,129 --> 00:02:18,609
interrogations you can take the alerts

00:02:16,480 --> 00:02:20,849
to other systems as well and you could

00:02:18,609 --> 00:02:22,719
also do some collaborations so

00:02:20,849 --> 00:02:23,620
integration is pretty straightforward

00:02:22,719 --> 00:02:25,000
you created four

00:02:23,620 --> 00:02:27,670
with his intuition and it gives you an

00:02:25,000 --> 00:02:29,530
API key and when you integrated with the

00:02:27,670 --> 00:02:34,260
alert manager its immediate or Cheney

00:02:29,530 --> 00:02:37,840
and on your phones and whatever you like

00:02:34,260 --> 00:02:40,959
imagine this sample use case in midnight

00:02:37,840 --> 00:02:45,280
to 36 your importance service is dead

00:02:40,959 --> 00:02:50,140
and parameters is not for it but unless

00:02:45,280 --> 00:02:52,690
you're using slick all the time and

00:02:50,140 --> 00:02:56,019
hearing all the notifications you won't

00:02:52,690 --> 00:02:59,769
be able to see it so when the alert is

00:02:56,019 --> 00:03:02,230
forward tops any it has the proper text

00:02:59,769 --> 00:03:05,500
of teams and finds out that the John Doe

00:03:02,230 --> 00:03:07,239
is uncle and as it is late it direct the

00:03:05,500 --> 00:03:10,239
call stream without sending a push

00:03:07,239 --> 00:03:12,519
notification so he can wake up and check

00:03:10,239 --> 00:03:17,890
the alert

00:03:12,519 --> 00:03:22,209
he cost of Jenny web UI and she is the

00:03:17,890 --> 00:03:25,480
playbook and sees that he should do a

00:03:22,209 --> 00:03:28,200
custom action which he additional dogs

00:03:25,480 --> 00:03:32,560
but he cannot solve it so he note was a

00:03:28,200 --> 00:03:35,169
secondary responders and they add some

00:03:32,560 --> 00:03:37,709
note of the alert virus like

00:03:35,169 --> 00:03:40,540
interrogation so another responder can

00:03:37,709 --> 00:03:43,120
not not fight that the previous

00:03:40,540 --> 00:03:45,220
deployment has gone wrong and notified

00:03:43,120 --> 00:03:47,829
that the John to read about the latest

00:03:45,220 --> 00:03:51,879
stable version so John Rose back to

00:03:47,829 --> 00:03:53,500
deployment and it was back to deployment

00:03:51,879 --> 00:03:56,440
and the magic is back to normal so

00:03:53,500 --> 00:03:58,090
parameters causes the alert and when

00:03:56,440 --> 00:04:00,250
it's the morning the team needs sauce

00:03:58,090 --> 00:04:02,799
that you respond time in five minutes

00:04:00,250 --> 00:04:05,530
and he is happy why it's important to

00:04:02,799 --> 00:04:08,109
have this kind of pipeline because if

00:04:05,530 --> 00:04:10,449
you are writing a list you should be you

00:04:08,109 --> 00:04:14,139
are writing because that you want to

00:04:10,449 --> 00:04:17,099
have an always-on system it's important

00:04:14,139 --> 00:04:20,530
that you also take actions very quickly

00:04:17,099 --> 00:04:24,340
and using a tool like option can help

00:04:20,530 --> 00:04:29,979
you with taking proper actions on time

00:04:24,340 --> 00:04:33,650
and not missing in actions if you if it

00:04:29,979 --> 00:04:36,170
is very long for you

00:04:33,650 --> 00:04:39,380
our main just is better with optional

00:04:36,170 --> 00:04:41,390
and each action should be action should

00:04:39,380 --> 00:04:42,830
be taken for an alert as soon as

00:04:41,390 --> 00:04:45,590
possible and right person should be

00:04:42,830 --> 00:04:48,860
notified just writing alerts without

00:04:45,590 --> 00:04:50,570
planning is not enough and the process

00:04:48,860 --> 00:04:52,850
of your other pipeline should be

00:04:50,570 --> 00:04:55,190
efficient and it should be easily

00:04:52,850 --> 00:04:57,920
monitored on what has been done on alert

00:04:55,190 --> 00:04:58,790
so if five person are acting

00:04:57,920 --> 00:05:04,720
simultaneously

00:04:58,790 --> 00:05:09,380
you don't want to ensure a chaos so done

00:05:04,720 --> 00:05:11,540
so to increase your downtime and off

00:05:09,380 --> 00:05:14,800
Seneca is a nice tool that can help you

00:05:11,540 --> 00:05:14,800
for this purpose

00:05:20,990 --> 00:05:25,640
hello I'm max I wanted to be not one

00:05:23,930 --> 00:05:35,750
topic but two topics because I got

00:05:25,640 --> 00:05:49,460
entire five minutes so no I only want to

00:05:35,750 --> 00:05:51,680
do one topic all right max you might

00:05:49,460 --> 00:05:53,900
know me from a couple of projects

00:05:51,680 --> 00:05:59,270
premises operator or load manager

00:05:53,900 --> 00:06:02,600
related yes okay quickly we recently

00:05:59,270 --> 00:06:06,770
switched the clustering library of alert

00:06:02,600 --> 00:06:08,510
manager from 14 0 14 to 0 15 and as you

00:06:06,770 --> 00:06:11,320
might have noticed we hit a couple of

00:06:08,510 --> 00:06:15,670
issues with that all resolved of course

00:06:11,320 --> 00:06:17,840
and to not hit any of those ever again I

00:06:15,670 --> 00:06:19,400
looked a little bit in how we can

00:06:17,840 --> 00:06:22,130
improve our testing on the load measure

00:06:19,400 --> 00:06:24,320
and I want to introduce property in

00:06:22,130 --> 00:06:26,000
model-based testing approach which I've

00:06:24,320 --> 00:06:29,990
been working on which is not fully done

00:06:26,000 --> 00:06:31,850
yet alright so we already had this

00:06:29,990 --> 00:06:33,470
acceptance test framework for load

00:06:31,850 --> 00:06:35,450
manager which only worked for a single

00:06:33,470 --> 00:06:38,620
instance and I extended this a little

00:06:35,450 --> 00:06:41,330
bit to also work against clusters and

00:06:38,620 --> 00:06:42,800
taking this one step further the idea is

00:06:41,330 --> 00:06:45,470
that we first of all do model-based

00:06:42,800 --> 00:06:47,270
testing so instead of like simply

00:06:45,470 --> 00:06:49,250
running our tests we run our tests

00:06:47,270 --> 00:06:51,919
both against a model and the system

00:06:49,250 --> 00:06:54,380
under test so for example for a database

00:06:51,919 --> 00:06:57,080
for at City this would be simply running

00:06:54,380 --> 00:06:59,870
at City on the one hand and key value

00:06:57,080 --> 00:07:02,030
map on the other hand and simply

00:06:59,870 --> 00:07:04,370
comparing the outputs of the two and if

00:07:02,030 --> 00:07:07,759
that works then either your model is

00:07:04,370 --> 00:07:09,620
wrong or your database actually works so

00:07:07,759 --> 00:07:12,110
this is the same approach for alert

00:07:09,620 --> 00:07:13,819
manager so on the one hand we have the

00:07:12,110 --> 00:07:16,910
model which is a single alert manager

00:07:13,819 --> 00:07:20,599
instance as this is perfect and then we

00:07:16,910 --> 00:07:23,120
have the cluster of alert managers as

00:07:20,599 --> 00:07:24,830
the system on the test then in addition

00:07:23,120 --> 00:07:28,370
we can go one step further we can do

00:07:24,830 --> 00:07:30,650
property based testing so a property of

00:07:28,370 --> 00:07:33,710
other manager has a lot of properties

00:07:30,650 --> 00:07:36,949
which we would like to break and to do

00:07:33,710 --> 00:07:38,389
that we find the random inputs and see

00:07:36,949 --> 00:07:40,430
whatever breaks and then hopefully

00:07:38,389 --> 00:07:43,520
reduce those inputs to a smaller set

00:07:40,430 --> 00:07:46,430
which we can easily comprehend and then

00:07:43,520 --> 00:07:47,960
go from there you might you might have

00:07:46,430 --> 00:07:50,090
heard of this from high school from

00:07:47,960 --> 00:07:52,190
quick check I think something similar

00:07:50,090 --> 00:07:55,039
exists in the SCADA world probably in

00:07:52,190 --> 00:07:58,009
every language okay cool how does this

00:07:55,039 --> 00:08:01,070
work for us first of all we generate a

00:07:58,009 --> 00:08:03,050
random pool of alerts I'll go a little

00:08:01,070 --> 00:08:05,210
bit into detail on that then we have our

00:08:03,050 --> 00:08:06,560
system on the test so the alert manager

00:08:05,210 --> 00:08:09,560
cluster and then we have our model

00:08:06,560 --> 00:08:13,750
single alert manager instance we run the

00:08:09,560 --> 00:08:16,130
alerts against both of them collect the

00:08:13,750 --> 00:08:18,580
notifications at the end and hope for

00:08:16,130 --> 00:08:21,620
them to be the same

00:08:18,580 --> 00:08:24,110
what can we randomize here first of all

00:08:21,620 --> 00:08:26,630
we can randomize the amount of alerts we

00:08:24,110 --> 00:08:29,630
can randomize the timing when we want to

00:08:26,630 --> 00:08:31,819
send alerts we can randomize the labels

00:08:29,630 --> 00:08:34,550
the configuration of the cluster is the

00:08:31,819 --> 00:08:36,050
cluster size and so on so where's my

00:08:34,550 --> 00:08:38,089
current status

00:08:36,050 --> 00:08:40,310
I'm randomizing the amount of alerts and

00:08:38,089 --> 00:08:44,360
I'm randomizing the time that I run

00:08:40,310 --> 00:08:45,800
against the system and yeah I only have

00:08:44,360 --> 00:08:47,750
five minutes so I'm not going to show

00:08:45,800 --> 00:08:50,990
this life but this is how my cluster

00:08:47,750 --> 00:08:53,329
looks right now so CN CF was so nice and

00:08:50,990 --> 00:08:55,130
gave me a really beefy machine have

00:08:53,329 --> 00:08:57,470
really very bad that it's not used all

00:08:55,130 --> 00:08:58,639
the way anyways it's running right now

00:08:57,470 --> 00:09:03,549
like

00:08:58,639 --> 00:09:07,009
I know 200 constantly 200 alert manager

00:09:03,549 --> 00:09:09,410
instances those are either a cluster of

00:09:07,009 --> 00:09:12,139
three instances or a single instance and

00:09:09,410 --> 00:09:15,230
run running randomized inputs against

00:09:12,139 --> 00:09:17,299
those yeah let's see and hope to find

00:09:15,230 --> 00:09:22,059
some issues or hope to not find any

00:09:17,299 --> 00:09:25,360
issues yeah all right second topic

00:09:22,059 --> 00:09:28,970
others might have seen the open API

00:09:25,360 --> 00:09:31,309
rewrite of the alert manager API v2 why

00:09:28,970 --> 00:09:33,829
would we do this alert manager has an

00:09:31,309 --> 00:09:36,259
API already the v1 a lot of people have

00:09:33,829 --> 00:09:39,199
been complaining about no documentation

00:09:36,259 --> 00:09:41,170
and you simply have to write a read the

00:09:39,199 --> 00:09:44,779
go code and this not being very

00:09:41,170 --> 00:09:47,569
consistent so I looked a little bit into

00:09:44,779 --> 00:09:49,850
this how can we fix this well the new

00:09:47,569 --> 00:09:52,699
API is fully specified via open API

00:09:49,850 --> 00:09:54,589
which is the old swagger I guess I think

00:09:52,699 --> 00:09:57,049
Google can give better answers on how

00:09:54,589 --> 00:10:00,199
about the to relate anyways it's fully

00:09:57,049 --> 00:10:02,089
specified in that so we generate most of

00:10:00,199 --> 00:10:03,980
the server code we only have to write

00:10:02,089 --> 00:10:06,619
the handlers which is already all done

00:10:03,980 --> 00:10:08,480
and in addition in the long run I also

00:10:06,619 --> 00:10:10,819
want to generate Auto generate the

00:10:08,480 --> 00:10:13,100
client which is right now elm as the

00:10:10,819 --> 00:10:14,869
front end both statically typed so we

00:10:13,100 --> 00:10:18,110
can have a nice contract between the two

00:10:14,869 --> 00:10:20,239
and what this means fall of you well

00:10:18,110 --> 00:10:22,790
first of all contributing must be nicer

00:10:20,239 --> 00:10:25,069
to the API in general and in addition we

00:10:22,790 --> 00:10:29,149
have free talks or free talks pretty

00:10:25,069 --> 00:10:32,209
good talks and you can generate all your

00:10:29,149 --> 00:10:33,259
clients whatever language you have so if

00:10:32,209 --> 00:10:35,839
you want to integrate with a load

00:10:33,259 --> 00:10:39,139
manager and you want to generate a bash

00:10:35,839 --> 00:10:47,869
client there is an open API generated

00:10:39,139 --> 00:10:50,779
for that thank you very much my name is

00:10:47,869 --> 00:10:53,149
sandy McAuliffe I'm a foreman Habib also

00:10:50,779 --> 00:10:57,100
am one of the leaders Russian Atlassian

00:10:53,149 --> 00:11:02,809
user group today I'm going to talk about

00:10:57,100 --> 00:11:06,189
client applications so at lesson is this

00:11:02,809 --> 00:11:09,769
currently this fastest goal in company

00:11:06,189 --> 00:11:11,310
right and this is four main products

00:11:09,769 --> 00:11:15,330
which is a user

00:11:11,310 --> 00:11:17,420
anywhere in the different areas banking

00:11:15,330 --> 00:11:22,440
oil companies

00:11:17,420 --> 00:11:25,890
so if we have downtown on a license

00:11:22,440 --> 00:11:31,550
despite on this is internal to I saw

00:11:25,890 --> 00:11:36,300
that it lost thousands of dollars so

00:11:31,550 --> 00:11:38,730
Atlassian has some J mix me ethics but

00:11:36,300 --> 00:11:44,760
it's not enough to determine the cost of

00:11:38,730 --> 00:11:47,360
the problem and recently I developed

00:11:44,760 --> 00:11:51,630
plug-ins for this all products

00:11:47,360 --> 00:11:55,860
parameters exporter and it helps to

00:11:51,630 --> 00:11:59,340
solve for the spa problems this is some

00:11:55,860 --> 00:12:03,300
advantages also it's not required to

00:11:59,340 --> 00:12:04,110
restart application to just enable just

00:12:03,300 --> 00:12:08,370
install plugin

00:12:04,110 --> 00:12:12,540
it's got got it so let's see the song

00:12:08,370 --> 00:12:15,330
for example geo exporter it provides

00:12:12,540 --> 00:12:20,100
many different metrics geometrics

00:12:15,330 --> 00:12:24,660
behavioral license etc let's see some

00:12:20,100 --> 00:12:26,820
example for example we can monitor after

00:12:24,660 --> 00:12:29,940
a session for example company bought the

00:12:26,820 --> 00:12:32,400
licenses for two thousand users but we

00:12:29,940 --> 00:12:34,800
can see on the monthly perspective only

00:12:32,400 --> 00:12:37,890
three hundred users use it it saw the

00:12:34,800 --> 00:12:43,100
next year company can save the money to

00:12:37,890 --> 00:12:50,160
just bought a less amount of resources

00:12:43,100 --> 00:12:53,100
request aggression actually now we can

00:12:50,160 --> 00:12:56,910
exact now one which time slow down

00:12:53,100 --> 00:12:58,950
system can happen and we correlate it

00:12:56,910 --> 00:13:03,210
with some internal process to determine

00:12:58,950 --> 00:13:06,690
a what would cost there is some

00:13:03,210 --> 00:13:11,070
pre-built dashboard already on graph

00:13:06,690 --> 00:13:13,680
Anna can download and use it so also a

00:13:11,070 --> 00:13:16,830
confluence exporter we can get all

00:13:13,680 --> 00:13:18,750
documents metrics what we want and also

00:13:16,830 --> 00:13:22,350
for example you can see attachment site

00:13:18,750 --> 00:13:24,270
metrics to see how extensively this go

00:13:22,350 --> 00:13:30,160
on and to predict

00:13:24,270 --> 00:13:33,460
we should to buy also there is some -

00:13:30,160 --> 00:13:36,040
both available on the wanna the next one

00:13:33,460 --> 00:13:40,180
it's but bitbucket exporters my favorite

00:13:36,040 --> 00:13:43,900
one some business metric you can see is

00:13:40,180 --> 00:13:45,820
it how many lengths of course or how

00:13:43,900 --> 00:13:50,440
many commits some people doing with the

00:13:45,820 --> 00:13:53,010
daily basis for example this is example

00:13:50,440 --> 00:14:00,400
how many open a pull request we have

00:13:53,010 --> 00:14:06,070
today also go on a dashboard so you can

00:14:00,400 --> 00:14:09,310
find it on plugins bomb box poker or the

00:14:06,070 --> 00:14:12,930
last one its newly develop it there is

00:14:09,310 --> 00:14:16,150
some statistics about active and running

00:14:12,930 --> 00:14:18,730
agents we can see and mostly it's

00:14:16,150 --> 00:14:22,540
helpful to predict how many agents we

00:14:18,730 --> 00:14:32,020
should add on the month by the daily

00:14:22,540 --> 00:14:34,510
basis that's all thank you checked up hi

00:14:32,020 --> 00:14:35,890
my name is Bob appropriate for a

00:14:34,510 --> 00:14:39,790
lightning talk I'm gonna be talking

00:14:35,890 --> 00:14:44,250
about time so first some definitions so

00:14:39,790 --> 00:14:44,250
I think we all know what prometheus is

00:14:44,280 --> 00:14:49,510
cortex a multi-tenant and horizontally

00:14:47,440 --> 00:14:51,790
scalable Prometheus as a service comes

00:14:49,510 --> 00:14:53,830
in portent lighter Corona man seen

00:14:51,790 --> 00:14:55,330
school of magic involving the

00:14:53,830 --> 00:14:58,780
manipulation of time in a supernatural

00:14:55,330 --> 00:15:02,380
way Crona man sir that would be this

00:14:58,780 --> 00:15:06,250
gentleman here a purveyor of that and

00:15:02,380 --> 00:15:09,550
time so the order of time by Carlo

00:15:06,250 --> 00:15:12,010
Rovelli is an excellent book funnily

00:15:09,550 --> 00:15:15,040
enough the the audiobook in English is

00:15:12,010 --> 00:15:18,670
actually written by this gentleman not

00:15:15,040 --> 00:15:20,830
Doctor Strange so did you know based on

00:15:18,670 --> 00:15:22,690
listening to this book that time flows

00:15:20,830 --> 00:15:25,660
faster and slower depending on your

00:15:22,690 --> 00:15:28,450
elevation on the earth and that there is

00:15:25,660 --> 00:15:33,610
no one universal shared notion of right

00:15:28,450 --> 00:15:35,560
now time as we know it is actually a

00:15:33,610 --> 00:15:36,980
wholly constructed construct of the

00:15:35,560 --> 00:15:40,790
evolution of the human brain

00:15:36,980 --> 00:15:45,140
so I I reject your five minute proposal

00:15:40,790 --> 00:15:47,960
here so why should prometheus be any

00:15:45,140 --> 00:15:50,180
different with regards to time so in

00:15:47,960 --> 00:15:52,310
Prometheus the time series begins at the

00:15:50,180 --> 00:15:54,080
time of the scrape so if I have a metric

00:15:52,310 --> 00:15:55,310
and at time zero I'm going to scrape

00:15:54,080 --> 00:15:58,100
that data and I'm going to create a

00:15:55,310 --> 00:16:00,260
series that has time zero at the time of

00:15:58,100 --> 00:16:02,720
the scrape now I might be updating that

00:16:00,260 --> 00:16:05,030
metric inside of my application inside

00:16:02,720 --> 00:16:07,640
of my target multiple times incrementing

00:16:05,030 --> 00:16:09,650
counters throughout time but again when

00:16:07,640 --> 00:16:12,440
I come by to scrape it again at time two

00:16:09,650 --> 00:16:13,790
I missed the intermediate the

00:16:12,440 --> 00:16:18,980
intermediate time stamps and I get a

00:16:13,790 --> 00:16:21,470
time at time two hour time one sorry so

00:16:18,980 --> 00:16:22,970
time stamps because they are persisted

00:16:21,470 --> 00:16:25,370
in the database instead of from atheists

00:16:22,970 --> 00:16:26,900
are preserved in remote right so as I

00:16:25,370 --> 00:16:29,000
send the data to a remote system over a

00:16:26,900 --> 00:16:30,860
remote write I don't get to change time

00:16:29,000 --> 00:16:35,360
time comes along with the time stamp

00:16:30,860 --> 00:16:37,280
with the time series so for the

00:16:35,360 --> 00:16:38,900
processing that we do at fresh tracks we

00:16:37,280 --> 00:16:40,430
have a data processor that runs as a

00:16:38,900 --> 00:16:43,820
side car to Prometheus that does all of

00:16:40,430 --> 00:16:45,800
this data processing logic and that data

00:16:43,820 --> 00:16:48,500
processor comes in queries data out of

00:16:45,800 --> 00:16:50,480
Prometheus gets back a time series that

00:16:48,500 --> 00:16:52,910
has been originated at the time of the

00:16:50,480 --> 00:16:55,400
scrape does some processing on that data

00:16:52,910 --> 00:16:56,900
and generates a new set of series that

00:16:55,400 --> 00:16:58,880
are a derivative based on the time

00:16:56,900 --> 00:17:01,730
series that it just queried but those

00:16:58,880 --> 00:17:04,540
time series are now different and offset

00:17:01,730 --> 00:17:06,620
in time from the original ones because

00:17:04,540 --> 00:17:08,270
Prometheus has to come back and scrape

00:17:06,620 --> 00:17:10,130
those new series out of this data

00:17:08,270 --> 00:17:12,980
processing sidecar so this was an older

00:17:10,130 --> 00:17:17,000
architecture that we were using the end

00:17:12,980 --> 00:17:20,120
goal here is that so now oh yeah so now

00:17:17,000 --> 00:17:22,630
we have time prime zero as opposed to

00:17:20,120 --> 00:17:24,920
time zero on this new derivative series

00:17:22,630 --> 00:17:27,500
the goal here is that we want to be able

00:17:24,920 --> 00:17:29,270
to align the derivative series to the

00:17:27,500 --> 00:17:31,250
time of the original series so that we

00:17:29,270 --> 00:17:32,570
can draw charts and color these things

00:17:31,250 --> 00:17:34,940
appropriately as these things are

00:17:32,570 --> 00:17:38,270
exiting there the anomaly detection that

00:17:34,940 --> 00:17:40,400
we're doing and the the time the the

00:17:38,270 --> 00:17:42,050
interval of time the scrape interval

00:17:40,400 --> 00:17:43,790
plus the processing time gives us an

00:17:42,050 --> 00:17:46,930
offset for these derivative metrics and

00:17:43,790 --> 00:17:49,310
this really kind of messes up our graphs

00:17:46,930 --> 00:17:50,460
so a couple of really interesting things

00:17:49,310 --> 00:17:53,670
about

00:17:50,460 --> 00:17:55,890
protects and prometheus in prometheus

00:17:53,670 --> 00:17:59,010
the only way to get data into the system

00:17:55,890 --> 00:18:01,680
is to allow it to scrape and in cortex

00:17:59,010 --> 00:18:04,820
conversely the only way to get data into

00:18:01,680 --> 00:18:07,140
cortex is to push via remote right

00:18:04,820 --> 00:18:08,940
cortex doesn't scrape and you can't push

00:18:07,140 --> 00:18:11,700
data into Prometheus so we leveraged

00:18:08,940 --> 00:18:15,300
this fact so now I've got a target I'm

00:18:11,700 --> 00:18:18,270
pulling the metrics out I'm gonna scrape

00:18:15,300 --> 00:18:19,860
with Prometheus and grab time zero and

00:18:18,270 --> 00:18:23,400
use remote write to push that data up

00:18:19,860 --> 00:18:26,430
into cortex my processor is going to

00:18:23,400 --> 00:18:27,960
grab the data via query and get back

00:18:26,430 --> 00:18:29,820
time zero data and then I'm going to

00:18:27,960 --> 00:18:33,650
process that data and produce a

00:18:29,820 --> 00:18:36,750
derivative series that is now T prime

00:18:33,650 --> 00:18:39,390
but that original series the the derive

00:18:36,750 --> 00:18:41,910
series now has the same aligned

00:18:39,390 --> 00:18:44,460
timestamp as my original series because

00:18:41,910 --> 00:18:45,780
we control time and then we use the

00:18:44,460 --> 00:18:48,360
promote write to send that back to we've

00:18:45,780 --> 00:18:55,200
cortex and everything lines up perfectly

00:18:48,360 --> 00:18:56,730
thank you so this is my talk BMC I'm

00:18:55,200 --> 00:18:57,480
Prometheus in five minutes my name is

00:18:56,730 --> 00:19:00,000
Chris

00:18:57,480 --> 00:19:02,700
my nickname is blue seemly so let's

00:19:00,000 --> 00:19:05,370
start what is a BMC so BMC stands for

00:19:02,700 --> 00:19:07,980
base board management controller it's

00:19:05,370 --> 00:19:11,550
allows you to do remote administrative

00:19:07,980 --> 00:19:14,490
actions such as power cycle a CPA server

00:19:11,550 --> 00:19:17,610
or you know emulate USB devices flashing

00:19:14,490 --> 00:19:19,230
firm ISO and things like that it's kind

00:19:17,610 --> 00:19:22,380
of standard in servers when you buy them

00:19:19,230 --> 00:19:24,210
today you probably don't have one in

00:19:22,380 --> 00:19:26,540
your laptop but some high-end desktop

00:19:24,210 --> 00:19:28,770
machines actually start to have them now

00:19:26,540 --> 00:19:31,620
vendors call it different things

00:19:28,770 --> 00:19:34,080
HPE for example calls it an ILO dell I

00:19:31,620 --> 00:19:37,290
think it is idrac Super Micro calls an

00:19:34,080 --> 00:19:39,450
IP ni PMI which is a bit of confusing we

00:19:37,290 --> 00:19:41,430
will get to that later essentially it's

00:19:39,450 --> 00:19:43,890
a server inside a server that is always

00:19:41,430 --> 00:19:46,800
on usually it's best suspect that

00:19:43,890 --> 00:19:50,280
something like it has an arm CPU around

00:19:46,800 --> 00:19:53,790
400 maybe 600 megahertz 256 Meg's a ram

00:19:50,280 --> 00:19:56,870
or something around that so what's

00:19:53,790 --> 00:20:01,640
inside the BMC right

00:19:56,870 --> 00:20:03,500
I don't think you're buying this it's so

00:20:01,640 --> 00:20:06,290
of course it's modern software right so

00:20:03,500 --> 00:20:08,150
let's look at more of what that until so

00:20:06,290 --> 00:20:11,330
I have access to a server that was

00:20:08,150 --> 00:20:15,890
designed 2015 so this is what we're

00:20:11,330 --> 00:20:18,650
looking at so we have a 2/6 kernel and

00:20:15,890 --> 00:20:21,530
we have a busy box that was released in

00:20:18,650 --> 00:20:24,710
2008 so and this is again a server that

00:20:21,530 --> 00:20:26,270
was designed 2015 all right so this is

00:20:24,710 --> 00:20:28,150
the the software that is running on the

00:20:26,270 --> 00:20:30,020
CPU that has access to flash your bias

00:20:28,150 --> 00:20:33,740
right

00:20:30,020 --> 00:20:36,830
so if that is good I'll let you decide

00:20:33,740 --> 00:20:39,950
so no no rainbows in this one so and we

00:20:36,830 --> 00:20:42,410
also have a GPL code supposedly the

00:20:39,950 --> 00:20:44,620
kernel modules disclaim license GPL and

00:20:42,410 --> 00:20:47,090
those who have done some kernel

00:20:44,620 --> 00:20:49,400
development knows that that unlocks some

00:20:47,090 --> 00:20:52,940
kind of nifty functions you can call so

00:20:49,400 --> 00:20:54,440
maybe I I mean I did request the source

00:20:52,940 --> 00:20:57,530
code and I'm sure they're gonna get back

00:20:54,440 --> 00:20:57,890
to me any day now but we will see about

00:20:57,530 --> 00:21:01,070
that

00:20:57,890 --> 00:21:03,350
so what what why do what what does this

00:21:01,070 --> 00:21:06,230
have to do with Prometheus right so we

00:21:03,350 --> 00:21:08,540
have a server that is always on and it

00:21:06,230 --> 00:21:10,850
has all this like this is just maybe a

00:21:08,540 --> 00:21:13,760
tenth of the metrics that I can get from

00:21:10,850 --> 00:21:15,320
this thing so this is juicy juicy

00:21:13,760 --> 00:21:19,130
metrics that we want obviously want to

00:21:15,320 --> 00:21:21,230
port and graph and maybe alert on so we

00:21:19,130 --> 00:21:24,620
can use this tool called ipmi tool and

00:21:21,230 --> 00:21:27,290
our out it goes so what is this IPMI

00:21:24,620 --> 00:21:28,400
stuff so it's defined in this document

00:21:27,290 --> 00:21:29,780
called intelligent platform management

00:21:28,400 --> 00:21:32,480
interface specifications

00:21:29,780 --> 00:21:34,580
second-generation version 2 it's 644

00:21:32,480 --> 00:21:36,890
pages and I'm sure it's very fascinating

00:21:34,580 --> 00:21:39,670
I didn't read it so I don't know but

00:21:36,890 --> 00:21:42,920
what it does not specify are these

00:21:39,670 --> 00:21:46,040
read/write commands that are model

00:21:42,920 --> 00:21:48,230
specific that only your vendor or om

00:21:46,040 --> 00:21:50,720
knows what they do for example you have

00:21:48,230 --> 00:21:52,460
this 32 a a double O on my server that

00:21:50,720 --> 00:21:54,590
makes a mysterious cd-rom drive appear

00:21:52,460 --> 00:21:56,300
it does not have an any kind of media

00:21:54,590 --> 00:21:57,740
attached to it but supposedly could use

00:21:56,300 --> 00:22:01,550
it to flash your bio somewhere or

00:21:57,740 --> 00:22:03,410
somehow bonus it does RPC calls over

00:22:01,550 --> 00:22:06,260
something called a keyboard controller

00:22:03,410 --> 00:22:07,820
style it doesn't like I've thought it

00:22:06,260 --> 00:22:09,810
was the subsystem but it's actually

00:22:07,820 --> 00:22:12,830
style I don't know but it is some kind

00:22:09,810 --> 00:22:15,270
interface so yeah let's let's try to

00:22:12,830 --> 00:22:16,680
like this holes on scary right so let's

00:22:15,270 --> 00:22:18,060
use the node exporter so what's the

00:22:16,680 --> 00:22:20,610
problem here

00:22:18,060 --> 00:22:22,590
you just SSH to it run sudo and install

00:22:20,610 --> 00:22:23,970
it right well problem is you don't have

00:22:22,590 --> 00:22:25,950
root access and since this is a

00:22:23,970 --> 00:22:28,830
five-minute talk let's ignore that and

00:22:25,950 --> 00:22:30,630
do something like this and just gain

00:22:28,830 --> 00:22:36,350
root okay done

00:22:30,630 --> 00:22:39,570
so let's just download the node exporter

00:22:36,350 --> 00:22:42,570
apply some patches that are conveniently

00:22:39,570 --> 00:22:44,520
available build it since it's an ARP CPU

00:22:42,570 --> 00:22:47,250
and go is kind of awesome when it comes

00:22:44,520 --> 00:22:50,550
to being portable copied to BMC which is

00:22:47,250 --> 00:22:52,290
you know that step is not easier as well

00:22:50,550 --> 00:22:55,800
because obviously you don't have a CP

00:22:52,290 --> 00:22:57,990
and things like that run it and bum you

00:22:55,800 --> 00:23:00,090
now have power status that you cannot

00:22:57,990 --> 00:23:02,030
graph this is one of the metrics you can

00:23:00,090 --> 00:23:04,170
get right so this is just an example so

00:23:02,030 --> 00:23:06,270
and this is always on so this is

00:23:04,170 --> 00:23:10,140
actually I think the only way you can

00:23:06,270 --> 00:23:14,190
get an authority that your server is off

00:23:10,140 --> 00:23:16,050
right so this is you can ping it an

00:23:14,190 --> 00:23:19,800
alert on ping not replying but this is

00:23:16,050 --> 00:23:21,780
actually it's off so yeah I'm gonna do

00:23:19,800 --> 00:23:24,330
an ad for a product I'm working on it's

00:23:21,780 --> 00:23:26,570
it's called you beam see is the working

00:23:24,330 --> 00:23:29,250
name it's essentially removing all this

00:23:26,570 --> 00:23:31,440
outdated stuff and replacing it with you

00:23:29,250 --> 00:23:33,630
know new software open source deep load

00:23:31,440 --> 00:23:35,700
use Prometheus explain exposition format

00:23:33,630 --> 00:23:37,620
your PC e SSL Certificates all that

00:23:35,700 --> 00:23:39,120
stuff it's very early I don't have a

00:23:37,620 --> 00:23:40,680
fancy website or anything just ping me

00:23:39,120 --> 00:23:43,230
if you're really interested in this and

00:23:40,680 --> 00:23:45,420
I love to hear your thoughts so yeah

00:23:43,230 --> 00:23:48,200
that's that's me if you want a demo you

00:23:45,420 --> 00:23:51,600
can click on that link I don't know how

00:23:48,200 --> 00:23:53,370
but maybe take maybe I can post it on

00:23:51,600 --> 00:23:56,360
Twitter or something and you can check

00:23:53,370 --> 00:23:56,360
it out there Thanks

00:23:58,150 --> 00:24:03,559
so we all know Status pages and why are

00:24:01,640 --> 00:24:05,690
they useful is because when you have

00:24:03,559 --> 00:24:08,390
lots of users and that they cannot reach

00:24:05,690 --> 00:24:10,160
your platform you want to let them know

00:24:08,390 --> 00:24:13,309
that you out on so they don't con you

00:24:10,160 --> 00:24:16,010
with they don't phone you and fluid your

00:24:13,309 --> 00:24:17,900
service desk but or can you make a

00:24:16,010 --> 00:24:20,240
Status page that will actually match

00:24:17,900 --> 00:24:22,730
what your service is so that when you

00:24:20,240 --> 00:24:24,680
are done well the people know it and

00:24:22,730 --> 00:24:26,330
that you don't need to get like 30

00:24:24,680 --> 00:24:29,120
minutes of actual phone calls because

00:24:26,330 --> 00:24:32,090
you before you can actually update the

00:24:29,120 --> 00:24:33,740
status page so for that we use

00:24:32,090 --> 00:24:36,559
primitives because from it is it

00:24:33,740 --> 00:24:38,660
contains a lot of data but not only like

00:24:36,559 --> 00:24:41,450
the technical data like okay my service

00:24:38,660 --> 00:24:43,580
up but also the business data like am I

00:24:41,450 --> 00:24:45,410
actually getting requests now do I have

00:24:43,580 --> 00:24:47,630
users that are using my service that I

00:24:45,410 --> 00:24:51,140
get like a good answer that I can

00:24:47,630 --> 00:24:53,840
actually service so pretty is a nice

00:24:51,140 --> 00:24:57,440
overview of all of that any knows if we

00:24:53,840 --> 00:24:59,900
are a bottom but a so end user you don't

00:24:57,440 --> 00:25:01,760
want them to know like ok we know that

00:24:59,900 --> 00:25:03,620
we have a because in the last minute we

00:25:01,760 --> 00:25:06,590
have like 1,000 transactions that have

00:25:03,620 --> 00:25:09,470
succeeded so we are using their admitted

00:25:06,590 --> 00:25:11,890
for that so but for when user we say ok

00:25:09,470 --> 00:25:14,780
the rate and Yahoo eight we call that

00:25:11,890 --> 00:25:18,679
availability and then the response time

00:25:14,780 --> 00:25:22,370
we say this is like the duration so when

00:25:18,679 --> 00:25:24,110
users I get that information and then we

00:25:22,370 --> 00:25:26,390
define for the end users okay you can

00:25:24,110 --> 00:25:28,760
know that we are completely down or that

00:25:26,390 --> 00:25:32,750
we have degraded or that we don't know

00:25:28,760 --> 00:25:34,370
like when we say it's one it's that we

00:25:32,750 --> 00:25:36,410
don't know when one is also like the

00:25:34,370 --> 00:25:38,510
value for the absent in primitive so

00:25:36,410 --> 00:25:40,940
that's kind of nice and you always went

00:25:38,510 --> 00:25:43,910
okay this is working it's fine you can

00:25:40,940 --> 00:25:45,350
use a platform so in practice we define

00:25:43,910 --> 00:25:47,120
some metrics which we call quick

00:25:45,350 --> 00:25:50,480
dashboard and we say okay this is the

00:25:47,120 --> 00:25:53,870
availability for the service X and then

00:25:50,480 --> 00:25:56,840
X can be like the the front-end or the

00:25:53,870 --> 00:26:00,700
database or anything like that and then

00:25:56,840 --> 00:26:03,470
we aggregate that into like big service

00:26:00,700 --> 00:26:05,960
into a matrix that represents the status

00:26:03,470 --> 00:26:08,630
of the complete service like okay this

00:26:05,960 --> 00:26:11,550
is my shop and statute is like it's

00:26:08,630 --> 00:26:14,200
green but it's slow something like that

00:26:11,550 --> 00:26:16,750
so we use some queries like we take the

00:26:14,200 --> 00:26:19,900
minimum of f time of those zero to four

00:26:16,750 --> 00:26:22,450
matrix and then we say okay we take that

00:26:19,900 --> 00:26:27,280
value and this is what the service looks

00:26:22,450 --> 00:26:29,740
like no impurities then we have

00:26:27,280 --> 00:26:32,290
dedicated primitives for end user that

00:26:29,740 --> 00:26:33,880
only contains those matrix because so

00:26:32,290 --> 00:26:35,650
that we can actually have lots of

00:26:33,880 --> 00:26:37,300
frequented primitives without impacting

00:26:35,650 --> 00:26:39,010
our predictions at the pan we also know

00:26:37,300 --> 00:26:41,260
exactly which matrix are inside at one

00:26:39,010 --> 00:26:42,610
and we also use the point is consoles

00:26:41,260 --> 00:26:45,370
directly so that is primitives that

00:26:42,610 --> 00:26:46,750
handles a dodge ball directly so that we

00:26:45,370 --> 00:26:48,760
don't need to like update the data

00:26:46,750 --> 00:26:50,860
approach the data somewhere else is just

00:26:48,760 --> 00:26:53,140
that twenty several is just directly to

00:26:50,860 --> 00:26:57,130
doing the data of things and with the

00:26:53,140 --> 00:26:58,720
CDN two O's the CSS files we also have

00:26:57,130 --> 00:27:00,340
an exporter that's actually a web

00:26:58,720 --> 00:27:02,290
interface that we can use you can say

00:27:00,340 --> 00:27:04,020
okay I want a message I want to say no

00:27:02,290 --> 00:27:07,809
the service is fine so you can actually

00:27:04,020 --> 00:27:10,030
create some matrix on that web interface

00:27:07,809 --> 00:27:12,370
that say ok now the value is minus one

00:27:10,030 --> 00:27:14,170
so that you can say okay this will be

00:27:12,370 --> 00:27:15,940
more important that what priorities is

00:27:14,170 --> 00:27:19,300
actually thinking that infrastructure is

00:27:15,940 --> 00:27:21,280
and that's that user dashboard is used

00:27:19,300 --> 00:27:23,890
by non tech people so it's just like a

00:27:21,280 --> 00:27:27,130
web page of form that is also export our

00:27:23,890 --> 00:27:29,950
behind the scenes I put the code unagi's

00:27:27,130 --> 00:27:31,750
so you can find out and if you want some

00:27:29,950 --> 00:27:34,240
inspiration about oh we did that you can

00:27:31,750 --> 00:27:36,670
file at and at the end this is just like

00:27:34,240 --> 00:27:38,770
a screenshot of today which is not a

00:27:36,670 --> 00:27:40,300
really good day but this is what it

00:27:38,770 --> 00:27:43,600
looks like at the end and this is

00:27:40,300 --> 00:27:45,940
completely done by primitives and it's

00:27:43,600 --> 00:27:48,340
enough for our needs and I I hope I will

00:27:45,940 --> 00:27:50,380
convince people not remove the console

00:27:48,340 --> 00:27:57,010
feature out of produce

00:27:50,380 --> 00:28:00,880
thank you hello everyone I'm nikunj from

00:27:57,010 --> 00:28:03,250
uber and as some of you requested gonna

00:28:00,880 --> 00:28:06,940
give a quick talk about m3 and how how

00:28:03,250 --> 00:28:08,710
it can work with Prometheus so just a

00:28:06,940 --> 00:28:10,840
very high level overview internet ruber

00:28:08,710 --> 00:28:12,250
we use in 3d to power our dashboard so

00:28:10,840 --> 00:28:14,830
this is kind of how it looks like so

00:28:12,250 --> 00:28:17,470
it's a graph on a dashboard and we also

00:28:14,830 --> 00:28:19,330
have our inbuilt alerting service which

00:28:17,470 --> 00:28:22,390
we called you Mordor and which does

00:28:19,330 --> 00:28:24,850
alerting so I want to talk about why

00:28:22,390 --> 00:28:27,940
serving metrics is so complex

00:28:24,850 --> 00:28:30,640
considering our scale so I was tough

00:28:27,940 --> 00:28:32,950
with some numbers so we do about 400 600

00:28:30,640 --> 00:28:35,380
million we aggregated metrics every

00:28:32,950 --> 00:28:38,260
second which is about 130 gigabits per

00:28:35,380 --> 00:28:40,360
second we are pushing we do about so

00:28:38,260 --> 00:28:42,280
then we aggregate them and we are

00:28:40,360 --> 00:28:44,980
storing about 20 million metrics every

00:28:42,280 --> 00:28:48,250
second which is pretty big still and

00:28:44,980 --> 00:28:51,160
it's 50 gigabytes we have very high

00:28:48,250 --> 00:28:53,650
cardinality and we do about 6 billion

00:28:51,160 --> 00:28:57,250
unique metric IDs right now I mean

00:28:53,650 --> 00:28:59,800
there's a gravity thig recently talking

00:28:57,250 --> 00:29:01,660
about egress we we get about two point

00:28:59,800 --> 00:29:03,790
two thousand queries which comes out of

00:29:01,660 --> 00:29:06,450
our nine thousand graph fauna dashboards

00:29:03,790 --> 00:29:09,970
and about 150 thousand real-time alerts

00:29:06,450 --> 00:29:15,490
these alerts are business level alerts

00:29:09,970 --> 00:29:17,230
and so on our system and the dashboards

00:29:15,490 --> 00:29:19,090
can fetch a lot of data points I mean

00:29:17,230 --> 00:29:21,100
our limits are little higher than

00:29:19,090 --> 00:29:25,720
Prometheus so video about thirty billion

00:29:21,100 --> 00:29:28,180
data points every second for fetches and

00:29:25,720 --> 00:29:31,150
this is not like it's a moving target so

00:29:28,180 --> 00:29:33,490
it has been constantly growing we do

00:29:31,150 --> 00:29:36,850
about we had about 20% uptick in the

00:29:33,490 --> 00:29:39,730
last quarter 50% uptake in just the

00:29:36,850 --> 00:29:41,400
unique IDs in the last year our QPS has

00:29:39,730 --> 00:29:44,290
increased hundred percent in one year

00:29:41,400 --> 00:29:48,010
ingress has increased ninety thousand

00:29:44,290 --> 00:29:51,820
percent in the last three years so just

00:29:48,010 --> 00:29:55,180
a very quick overview on 3b it's a open

00:29:51,820 --> 00:29:56,800
source distributed times database it it

00:29:55,180 --> 00:29:59,470
works really well for metrics I mean

00:29:56,800 --> 00:30:01,330
right we only support floor 64's so I

00:29:59,470 --> 00:30:03,310
wouldn't call it very generic right now

00:30:01,330 --> 00:30:06,180
but still for metrics use cases is

00:30:03,310 --> 00:30:09,730
really good we can support arbitrary

00:30:06,180 --> 00:30:13,420
times same position we support variable

00:30:09,730 --> 00:30:16,750
resolution and retention we don't need

00:30:13,420 --> 00:30:19,710
any compaction I mean because we are

00:30:16,750 --> 00:30:22,810
doing down sampling before storing

00:30:19,710 --> 00:30:25,360
we are replicated we have zone aware

00:30:22,810 --> 00:30:27,930
layouts and the replication factor is

00:30:25,360 --> 00:30:31,480
configurable within Ober we run our f3

00:30:27,930 --> 00:30:34,240
very strongly consistent and we rely

00:30:31,480 --> 00:30:37,210
heavily on HCD so if you lie on it cd4

00:30:34,240 --> 00:30:38,690
application for consistency and that's

00:30:37,210 --> 00:30:43,730
how we can keep MCD bits

00:30:38,690 --> 00:30:48,140
kind of simple and we support of fast no

00:30:43,730 --> 00:30:51,110
dad remove replacement so this is a very

00:30:48,140 --> 00:30:53,570
high level diagram of how and CVB looks

00:30:51,110 --> 00:30:55,430
like you have a database so whenever

00:30:53,570 --> 00:30:57,500
Wright comes in we right to commit lock

00:30:55,430 --> 00:30:59,990
in case the host crashes we don't wanna

00:30:57,500 --> 00:31:02,630
lose it then we have a bunch of

00:30:59,990 --> 00:31:05,660
namespaces so we use namespace for

00:31:02,630 --> 00:31:06,680
variable retention in resolution some I

00:31:05,660 --> 00:31:09,380
think somebody asked that question

00:31:06,680 --> 00:31:11,810
earlier and we have an index at the

00:31:09,380 --> 00:31:13,990
namespace level then we further split

00:31:11,810 --> 00:31:16,490
each namespace into multiple shards

00:31:13,990 --> 00:31:18,770
showering is a technique we develop

00:31:16,490 --> 00:31:21,590
later on so that we can assign a group

00:31:18,770 --> 00:31:24,970
of series to shards and we can only lock

00:31:21,590 --> 00:31:27,980
at the shot level so at that QPS at that

00:31:24,970 --> 00:31:29,450
write throughput we notice that if you

00:31:27,980 --> 00:31:32,120
do a global lock with namespace is

00:31:29,450 --> 00:31:34,460
pretty slow so we kind of divided into

00:31:32,120 --> 00:31:37,490
shards and do locking at that level so

00:31:34,460 --> 00:31:40,190
series is made up of blocks so a block

00:31:37,490 --> 00:31:41,810
is very similar to promethease 2.0 block

00:31:40,190 --> 00:31:44,720
I would say and we have a bunch of

00:31:41,810 --> 00:31:47,600
encoders for blocks so we need encoders

00:31:44,720 --> 00:31:49,520
because you can get data out of order so

00:31:47,600 --> 00:31:51,650
we kind of support that I mean we

00:31:49,520 --> 00:31:53,990
couldn't neglect it because some

00:31:51,650 --> 00:31:56,060
internal clients were sending is there

00:31:53,990 --> 00:31:58,100
out of order so we actually use multiple

00:31:56,060 --> 00:32:01,940
encoders if you get data or water and it

00:31:58,100 --> 00:32:05,390
works fine so coming to our open source

00:32:01,940 --> 00:32:08,660
strategy this is what we did in h1 of

00:32:05,390 --> 00:32:12,470
2018 so we have a bunch of hosts

00:32:08,660 --> 00:32:14,030
but I mean bunch of clients and you have

00:32:12,470 --> 00:32:18,050
a Prometheus instance which is scraping

00:32:14,030 --> 00:32:21,350
metrics so what you do is you deploy a

00:32:18,050 --> 00:32:23,390
empty query sidecar next to it and the

00:32:21,350 --> 00:32:25,640
antiquary sidecar uses the Prometheus

00:32:23,390 --> 00:32:26,150
remote we tried API and writes it to

00:32:25,640 --> 00:32:30,380
mtdb

00:32:26,150 --> 00:32:33,410
m 3 DB internally has its own index it

00:32:30,380 --> 00:32:36,740
has a net CD cluster embedded a CD

00:32:33,410 --> 00:32:38,990
running so it then it can serve both

00:32:36,740 --> 00:32:43,370
your ride and we request using the long

00:32:38,990 --> 00:32:45,110
term remote storage interface I also

00:32:43,370 --> 00:32:46,960
wanted to briefly talk about this new

00:32:45,110 --> 00:32:49,370
antiquary engine we're building so

00:32:46,960 --> 00:32:52,130
internally we noticed that our query

00:32:49,370 --> 00:32:55,340
engine has hit a lot of bollocks

00:32:52,130 --> 00:32:56,630
so the problem is our internal users are

00:32:55,340 --> 00:32:59,090
actually not happy that we have any

00:32:56,630 --> 00:33:06,950
limits at all so they would born no

00:32:59,090 --> 00:33:08,690
limits on a curry so cool so we the

00:33:06,950 --> 00:33:11,450
problem the reason we need limits is

00:33:08,690 --> 00:33:13,130
because we calculated some queries can

00:33:11,450 --> 00:33:15,559
actually get up to ten gigs of data

00:33:13,130 --> 00:33:17,870
points even our record limits and if you

00:33:15,559 --> 00:33:20,809
send for such queries on one box you can

00:33:17,870 --> 00:33:22,120
easily kill that box so the way we are

00:33:20,809 --> 00:33:26,450
planning to solve is is through

00:33:22,120 --> 00:33:28,280
redesigning our data model and that's

00:33:26,450 --> 00:33:30,230
what the new query engine is all about

00:33:28,280 --> 00:33:32,080
and an interesting thing is we're

00:33:30,230 --> 00:33:34,970
developing it completely in open source

00:33:32,080 --> 00:33:36,169
so you guys can go check it out some

00:33:34,970 --> 00:33:38,120
things we are doing there is removing

00:33:36,169 --> 00:33:42,350
time series limit we do that by

00:33:38,120 --> 00:33:45,559
improving memory efficiencies enabling

00:33:42,350 --> 00:33:47,480
streaming back to client so F graph on

00:33:45,559 --> 00:33:50,390
us in future suppose said we can even

00:33:47,480 --> 00:33:52,669
stream it back to grow fauna and we

00:33:50,390 --> 00:33:55,000
trying to keep data compressed as much

00:33:52,669 --> 00:33:59,330
as possible and only apply funk

00:33:55,000 --> 00:34:02,780
functions then we'd really have to so if

00:33:59,330 --> 00:34:05,240
you had let's say a scale and then a

00:34:02,780 --> 00:34:06,650
some view burden we will keep data

00:34:05,240 --> 00:34:09,550
compressed at the scale level but we

00:34:06,650 --> 00:34:12,080
when you do the sum we will decompress

00:34:09,550 --> 00:34:14,119
one column at a time and apply the sum

00:34:12,080 --> 00:34:17,510
and that kind of reduces the memory

00:34:14,119 --> 00:34:18,830
footprint a lot all right yeah that's my

00:34:17,510 --> 00:34:19,460
talk and if you have more questions we

00:34:18,830 --> 00:34:25,909
can talk about later

00:34:19,460 --> 00:34:27,679
thank you much hello there so yes like

00:34:25,909 --> 00:34:29,960
like Brian said I'm insisting on giving

00:34:27,679 --> 00:34:35,060
the same talk every year just you know

00:34:29,960 --> 00:34:37,909
start off date first my presentation

00:34:35,060 --> 00:34:39,230
I've been in Debian for 13 years I used

00:34:37,909 --> 00:34:41,210
to work at Google and that's where I

00:34:39,230 --> 00:34:43,190
learned about Berman and loved it and

00:34:41,210 --> 00:34:45,050
that's how I jumped into Prometheus so

00:34:43,190 --> 00:34:48,200
they came out and I started working in

00:34:45,050 --> 00:34:50,000
packaging I don't work at Google anymore

00:34:48,200 --> 00:34:52,340
so I'm still a piece of valensa I

00:34:50,000 --> 00:34:58,330
recommend everybody Detroit it's great

00:34:52,340 --> 00:35:01,220
to be out of an office so wide a bein

00:34:58,330 --> 00:35:04,460
like I said all the times we are not

00:35:01,220 --> 00:35:05,540
heap we are all fashioned we don't run

00:35:04,460 --> 00:35:09,950
scripts from

00:35:05,540 --> 00:35:12,920
coral we don't unload binaries from the

00:35:09,950 --> 00:35:15,380
web but it has many good things it

00:35:12,920 --> 00:35:18,560
ransoms everything a ransom phones and

00:35:15,380 --> 00:35:21,770
space stations all kinds of weird

00:35:18,560 --> 00:35:24,350
architectures we have we are the source

00:35:21,770 --> 00:35:29,980
the upstream 432 distributions including

00:35:24,350 --> 00:35:33,170
- boom - and many others we offer

00:35:29,980 --> 00:35:35,900
trusted binary mostly reproducible the

00:35:33,170 --> 00:35:37,850
the reducible builds effort is in

00:35:35,900 --> 00:35:39,830
interaction across the the free software

00:35:37,850 --> 00:35:42,530
world and was it started basically by

00:35:39,830 --> 00:35:44,810
the vien people we give you a package

00:35:42,530 --> 00:35:46,070
management so you stole an application

00:35:44,810 --> 00:35:47,480
and then you don't need to remember what

00:35:46,070 --> 00:35:50,110
is it stole and how to remove it and all

00:35:47,480 --> 00:35:51,800
that integration with other services

00:35:50,110 --> 00:35:53,660
automatically starting at boot

00:35:51,800 --> 00:35:54,650
configuration to the right place all

00:35:53,660 --> 00:35:57,680
these kind of things that you have to do

00:35:54,650 --> 00:36:00,230
by hand or put it in /opt or a slash

00:35:57,680 --> 00:36:01,610
home or something like that and security

00:36:00,230 --> 00:36:03,590
support which is also very important as

00:36:01,610 --> 00:36:06,440
something that's usually forgotten in

00:36:03,590 --> 00:36:10,280
the communities that just download from

00:36:06,440 --> 00:36:12,170
head and you still get up-to-date

00:36:10,280 --> 00:36:15,140
package versions at least in the case of

00:36:12,170 --> 00:36:16,790
primitives because I'm doing a lot of

00:36:15,140 --> 00:36:18,920
working but port in all these to stable

00:36:16,790 --> 00:36:22,100
so even if even or releases every two

00:36:18,920 --> 00:36:24,890
years more or less we'll have the latest

00:36:22,100 --> 00:36:30,080
prometheus version right now in the back

00:36:24,890 --> 00:36:31,760
purse first table it's very simple to

00:36:30,080 --> 00:36:33,290
stop Prometheus like it's just from this

00:36:31,760 --> 00:36:34,940
common and you have parameters installed

00:36:33,290 --> 00:36:37,400
and all automatically installs they're

00:36:34,940 --> 00:36:39,590
not exporter to but unless you say not

00:36:37,400 --> 00:36:41,540
to and it will be configured to self

00:36:39,590 --> 00:36:44,480
monitor and monitor didn't know sporter

00:36:41,540 --> 00:36:49,760
so yeah at least you have an instance

00:36:44,480 --> 00:36:52,580
running in two minutes most of the

00:36:49,760 --> 00:36:54,650
packages we prepared are available in 10

00:36:52,580 --> 00:36:58,310
or more architectural exceptions because

00:36:54,650 --> 00:37:01,880
of go support a we try to give the back

00:36:58,310 --> 00:37:04,130
parts really up-to-date and I started be

00:37:01,880 --> 00:37:05,480
even only myself but slowly but surely

00:37:04,130 --> 00:37:09,980
some other people are getting interested

00:37:05,480 --> 00:37:12,350
and because also the the interest of

00:37:09,980 --> 00:37:16,330
people on using parameters in Debian is

00:37:12,350 --> 00:37:19,250
growing this is the current status

00:37:16,330 --> 00:37:21,530
you see first column is what you get

00:37:19,250 --> 00:37:22,910
from stolen stable second column is what

00:37:21,530 --> 00:37:24,860
you get if you stole the back parts and

00:37:22,910 --> 00:37:26,990
the third column is like the bleeding

00:37:24,860 --> 00:37:29,600
edge as you can see for the the core

00:37:26,990 --> 00:37:33,650
packages like it's all pretty much up to

00:37:29,600 --> 00:37:37,040
date managed a few months ago to get the

00:37:33,650 --> 00:37:39,350
11 manager into inter new release

00:37:37,040 --> 00:37:41,540
I was blocked for a long time because of

00:37:39,350 --> 00:37:43,070
the new front-end so I did the

00:37:41,540 --> 00:37:44,840
reasonable thing and remove the

00:37:43,070 --> 00:37:47,510
front-end so much Indian doesn't have

00:37:44,840 --> 00:37:52,280
front-end but it's work is totally

00:37:47,510 --> 00:37:57,140
functional you can use a CLI you have to

00:37:52,280 --> 00:37:59,660
make trade-offs and no actually there is

00:37:57,140 --> 00:38:02,720
some ideas to to have a front-end there

00:37:59,660 --> 00:38:04,400
anyway but we working on that but then

00:38:02,720 --> 00:38:08,060
you have the libraries for different

00:38:04,400 --> 00:38:13,760
languages Gollum Perl Python Ruby and

00:38:08,060 --> 00:38:16,160
for Chango today actually then a lot of

00:38:13,760 --> 00:38:19,460
supporters as you can see all kinds of

00:38:16,160 --> 00:38:21,620
things more growing there once I have

00:38:19,460 --> 00:38:23,690
asterisks because they weren't upload in

00:38:21,620 --> 00:38:31,390
the last couple of weeks and still

00:38:23,690 --> 00:38:33,530
haven't reached the archive and well

00:38:31,390 --> 00:38:35,990
that's something new I didn't say this

00:38:33,530 --> 00:38:39,320
last year but he'll PC welcome this is a

00:38:35,990 --> 00:38:41,600
lot of work and all this I'm I hear from

00:38:39,320 --> 00:38:43,580
people in prom corn and in other places

00:38:41,600 --> 00:38:47,210
thanking me for for the work on this I

00:38:43,580 --> 00:38:49,790
tell you we need help if you work for a

00:38:47,210 --> 00:38:51,560
company that's using this maybe make

00:38:49,790 --> 00:38:53,390
them give you a couple of hours to work

00:38:51,560 --> 00:38:55,520
and Damian they'll be great we need to

00:38:53,390 --> 00:38:58,850
keep all these packages up-to-date but

00:38:55,520 --> 00:39:00,470
free package all the dependencies that

00:38:58,850 --> 00:39:02,360
every time there's a new feature I need

00:39:00,470 --> 00:39:06,560
to package a hundred more packages

00:39:02,360 --> 00:39:08,030
libraries um I would like to do to work

00:39:06,560 --> 00:39:10,490
more integration actually was looking

00:39:08,030 --> 00:39:13,930
today the JSON net talk and I think that

00:39:10,490 --> 00:39:17,960
would be an interesting thing to try and

00:39:13,930 --> 00:39:20,480
this this all this work gets worse with

00:39:17,960 --> 00:39:23,330
all these complications from the go

00:39:20,480 --> 00:39:26,060
ecosystem all the been during and the

00:39:23,330 --> 00:39:27,920
API is breaking all the time so that's

00:39:26,060 --> 00:39:30,000
one of the reasons why sometimes we

00:39:27,920 --> 00:39:32,030
don't keep up to date

00:39:30,000 --> 00:39:35,240
and yeah telescope that's why they're

00:39:32,030 --> 00:39:40,880
they'll smash reverse or lagging behind

00:39:35,240 --> 00:39:44,000
so anybody wants to hire me that's all

00:39:40,880 --> 00:39:44,000
thank you

00:39:45,590 --> 00:39:51,300
all right a fair warning up front this

00:39:49,200 --> 00:39:52,950
is gonna be a non-technical soft talk so

00:39:51,300 --> 00:39:55,970
if you want to check out hectic news

00:39:52,950 --> 00:39:58,440
read it or whatever now it's the time

00:39:55,970 --> 00:39:59,880
I'm still Michael hausenblas still work

00:39:58,440 --> 00:40:02,550
at red head still work at it's

00:39:59,880 --> 00:40:05,000
upstream and you know what I love most

00:40:02,550 --> 00:40:06,990
about open source besides the fact that

00:40:05,000 --> 00:40:09,480
you know you can look at the source and

00:40:06,990 --> 00:40:12,240
fix the there but the thing that I

00:40:09,480 --> 00:40:15,570
love really and care most about open

00:40:12,240 --> 00:40:18,180
source is actually the community and I

00:40:15,570 --> 00:40:22,250
gotta try it with a little analogy maybe

00:40:18,180 --> 00:40:26,160
that works so we have three kids aged 11

00:40:22,250 --> 00:40:30,480
13 15 hi in case you're watching

00:40:26,160 --> 00:40:32,820
Tereus on TV and you know when they are

00:40:30,480 --> 00:40:36,690
born when they are young you can't

00:40:32,820 --> 00:40:39,510
really leave them alone you you cannot

00:40:36,690 --> 00:40:41,810
leased an unattended for even 30 seconds

00:40:39,510 --> 00:40:44,550
right you really have to look after them

00:40:41,810 --> 00:40:48,510
care about them very very closely and

00:40:44,550 --> 00:40:51,030
deeply as they grow older at some point

00:40:48,510 --> 00:40:53,430
in time you know they somehow develop

00:40:51,030 --> 00:40:55,080
their own traits and characteristics the

00:40:53,430 --> 00:40:59,310
one focuses more in sports the other one

00:40:55,080 --> 00:41:01,410
more computers or whatever and it comes

00:40:59,310 --> 00:41:03,420
to time where when you say hey how about

00:41:01,410 --> 00:41:05,190
we doing something together today they

00:41:03,420 --> 00:41:06,780
say like you know that I love you but I

00:41:05,190 --> 00:41:10,589
really want to hang out with my friends

00:41:06,780 --> 00:41:12,990
nothing personal there right and and

00:41:10,589 --> 00:41:15,300
that brings me to the conclusion to the

00:41:12,990 --> 00:41:18,690
end of my lightning talk and that is in

00:41:15,300 --> 00:41:21,080
order for them to grow you have to learn

00:41:18,690 --> 00:41:21,080
to let go

00:41:25,130 --> 00:41:33,390
it's about deployment for some reason it

00:41:28,500 --> 00:41:37,349
is stress or relax it so we find out to

00:41:33,390 --> 00:41:39,409
use parameters to be relaxed it and the

00:41:37,349 --> 00:41:42,779
best in area what we do we

00:41:39,409 --> 00:41:47,429
the mobile messaging company and I

00:41:42,779 --> 00:41:50,609
develop this products which is that red

00:41:47,429 --> 00:41:53,249
rectangle it is the some kind of

00:41:50,609 --> 00:41:56,849
services which contact with operators

00:41:53,249 --> 00:42:00,269
mobile operators and for us we don't

00:41:56,849 --> 00:42:03,659
have for the store knowledge if they

00:42:00,269 --> 00:42:05,729
still online because it's many most 1000

00:42:03,659 --> 00:42:08,640
and when we deploy we actually don't

00:42:05,729 --> 00:42:13,409
know if for something broken it's our

00:42:08,640 --> 00:42:17,369
problem or it is a periodic down and we

00:42:13,409 --> 00:42:20,069
started to use it canary we find this

00:42:17,369 --> 00:42:23,369
works so so what does it mean then we

00:42:20,069 --> 00:42:27,329
deploy every micro service node one by

00:42:23,369 --> 00:42:31,079
one and to just reduce traffic but the

00:42:27,329 --> 00:42:33,149
problem how we prove that it's still of

00:42:31,079 --> 00:42:36,649
this small amount of traffic it still

00:42:33,149 --> 00:42:40,009
works and we decided to try this

00:42:36,649 --> 00:42:43,259
parameters from parameters we extract

00:42:40,009 --> 00:42:45,299
the some kind of data for example in

00:42:43,259 --> 00:42:49,319
Java for walk back here it is easy to

00:42:45,299 --> 00:42:51,809
log that every is what we have and we

00:42:49,319 --> 00:42:55,079
decide what we will compare we can

00:42:51,809 --> 00:42:57,089
compare the same instance visit previous

00:42:55,079 --> 00:43:00,929
version o we can compare with another

00:42:57,089 --> 00:43:06,559
online instance and to take interval

00:43:00,929 --> 00:43:10,049
what we want and to see on this we have

00:43:06,559 --> 00:43:13,139
pretty good difference so that means we

00:43:10,049 --> 00:43:15,989
can proceed deploy all other instances

00:43:13,139 --> 00:43:20,459
of the application service so something

00:43:15,989 --> 00:43:22,889
like that looks if we deploy one another

00:43:20,459 --> 00:43:25,199
where the graphic double it that we have

00:43:22,889 --> 00:43:29,279
problem we don't need to deploy everyone

00:43:25,199 --> 00:43:32,459
and to build some pipeline we check it

00:43:29,279 --> 00:43:34,769
this in one job if we compare one

00:43:32,459 --> 00:43:37,219
instance check it with parameters

00:43:34,769 --> 00:43:39,959
historical data it holds it stress halt

00:43:37,219 --> 00:43:42,119
satisfied we can deploy all another

00:43:39,959 --> 00:43:45,630
eight instances and its works on

00:43:42,119 --> 00:43:50,419
production that's all thank you

00:43:45,630 --> 00:43:50,419

YouTube URL: https://www.youtube.com/watch?v=_L5RjJ7MVv4


