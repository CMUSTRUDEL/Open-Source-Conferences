Title: PromCon 2018: Introducing Our Reliability Toolkit
Publication date: 2018-11-10
Playlist: PromCon 2018
Description: 
	Speaker: Robin van Zijll

Improving Reliability Through Engineering an Easy-to-use Prometheus-Based Monitoring and Alerting Stack: Introducing Our Reliability Toolkit

By definition, SREs are responsible for the reliability of sites, but what if they don't own any sites themselves? Within ING, the largest bank of the Netherlands, BizDevOps teams are autonomous and responsible for building and running their services. In theory, that could make the existence of SRE obsolete, right? How can you improve availability for end customers in an environment of engineers with full service ownership? How to convince without the power of intervention? How to improve without being blameful?

We'll explain how we, a team of 8 SREs among 1700 DevOps engineers, try to improve stability by focussing on software engineering. We created the Reliability Toolkit to help BizDevOps teams with their reliability challenges in the fields of white box monitoring and alerting while minimizing toil.

This talk will explain:

Our SRE team purpose and why we think our approach with heavy focus on software engineering works for our organization
The concept of the Reliability Toolkit and introduction of its components and their setup (Prometheus, Alertmanager, Grafana, NGINX Log Aggregator, SMS and ChatOps functionalities)
How we provision Reliability Toolkit
How we convince, onboard and educate BizDevOps teams to use the Reliability Toolkit
During this talk we will demo:

A Kafka to Prometheus consumer (and why this is not what we want)
Prometheus Model Builder, generate expectation models out of any Prometheus metric
A collection of templated Grafana dashboards to give every team a kickstart
Captions: 
	00:00:11,690 --> 00:00:15,750
so good morning everybody

00:00:13,889 --> 00:00:18,240
I hope you recovered well from yesterday

00:00:15,750 --> 00:00:24,450
I've seen a loads of beer

00:00:18,240 --> 00:00:26,880
keep drinking water hydrate please so so

00:00:24,450 --> 00:00:28,710
this is me don't be scared I'm the

00:00:26,880 --> 00:00:32,340
product owner and inside reliability

00:00:28,710 --> 00:00:34,559
engineer within RNG and the lady exhibit

00:00:32,340 --> 00:00:37,590
is young and she was supposed to be here

00:00:34,559 --> 00:00:40,860
as well but she broke her ankle and

00:00:37,590 --> 00:00:45,210
actually she has having surgery as we

00:00:40,860 --> 00:00:47,190
speak and students in here you're really

00:00:45,210 --> 00:00:51,359
missing out but I will try to do my best

00:00:47,190 --> 00:00:55,249
to entertain you so what do we do um

00:00:51,359 --> 00:00:58,109
well we are we we are a team of seven

00:00:55,249 --> 00:01:00,210
seven night series within a domestic

00:00:58,109 --> 00:01:03,210
Bank of ing the Netherlands so we're

00:01:00,210 --> 00:01:07,650
responsible for all services that are

00:01:03,210 --> 00:01:09,479
being used by our retail customers so

00:01:07,650 --> 00:01:12,770
customers like you and me people are

00:01:09,479 --> 00:01:15,000
doing their daily banking business so

00:01:12,770 --> 00:01:21,570
something's wrong within within our

00:01:15,000 --> 00:01:23,939
services people feel it in a wallet why

00:01:21,570 --> 00:01:25,770
are we doing it well yeah we don't reach

00:01:23,939 --> 00:01:33,270
availability levels as expected by our

00:01:25,770 --> 00:01:36,689
customers and by our regulators it's sad

00:01:33,270 --> 00:01:39,930
right well versus we have regulated so

00:01:36,689 --> 00:01:42,299
our government expects us to be our

00:01:39,930 --> 00:01:44,490
payment systems needs to be like like

00:01:42,299 --> 00:01:51,090
tap water like burning tap water from

00:01:44,490 --> 00:01:52,799
the from like our owner services for

00:01:51,090 --> 00:01:54,479
banking business should be the same so

00:01:52,799 --> 00:01:57,149
we have like this expectation of

00:01:54,479 --> 00:01:58,229
availability and we're not there so this

00:01:57,149 --> 00:02:01,020
is why we started site reliability

00:01:58,229 --> 00:02:03,179
engineering and accessories we started

00:02:01,020 --> 00:02:07,320
out with the foundation of reliability

00:02:03,179 --> 00:02:09,300
which for us is monitoring but yeah

00:02:07,320 --> 00:02:13,500
we're a team of seven and we're doing

00:02:09,300 --> 00:02:17,010
sre for around 300 based devops teams so

00:02:13,500 --> 00:02:19,470
it's like 700 engineers and we do devops

00:02:17,010 --> 00:02:23,040
so they're responsible for their build

00:02:19,470 --> 00:02:23,790
and run so we try to help them with the

00:02:23,040 --> 00:02:27,780
reliability

00:02:23,790 --> 00:02:30,890
by engineering and what do we do well

00:02:27,780 --> 00:02:34,080
first of all we deliver something called

00:02:30,890 --> 00:02:37,049
reliability toolkit we offer chat ups

00:02:34,080 --> 00:02:39,360
platform and we facilitate post mortems

00:02:37,049 --> 00:02:41,670
and we teach people about reliability

00:02:39,360 --> 00:02:42,959
topics that's basically we do and today

00:02:41,670 --> 00:02:48,180
I will talk a little bit about

00:02:42,959 --> 00:02:49,500
reliability toolkit so why did we create

00:02:48,180 --> 00:02:52,110
a reliability toolkit

00:02:49,500 --> 00:02:55,230
first of all our alerting wasn't

00:02:52,110 --> 00:02:58,470
directly to the teams it went to this

00:02:55,230 --> 00:03:00,870
whole process of applications and ended

00:02:58,470 --> 00:03:03,959
up at an master control room which is

00:03:00,870 --> 00:03:06,510
kind of similar to a NOC and in the

00:03:03,959 --> 00:03:09,660
Mastro room there is an operating and he

00:03:06,510 --> 00:03:12,629
receives the alert and he reads kind who

00:03:09,660 --> 00:03:15,390
work instruction and find a phone number

00:03:12,629 --> 00:03:22,590
of the responsive engineer on average it

00:03:15,390 --> 00:03:28,680
took 69 minutes before the alert we saw

00:03:22,590 --> 00:03:30,989
that as a challenge we have black box

00:03:28,680 --> 00:03:34,109
monitoring and it's all aimed at our

00:03:30,989 --> 00:03:35,910
customer functionalities but we do

00:03:34,109 --> 00:03:38,099
therefore so teams are not really

00:03:35,910 --> 00:03:39,630
responsible for the customer

00:03:38,099 --> 00:03:42,510
functionality but ever responsible for

00:03:39,630 --> 00:03:43,950
part of it and because we are def doing

00:03:42,510 --> 00:03:45,569
their folks we feel the team is

00:03:43,950 --> 00:03:47,579
responsible for the service it should be

00:03:45,569 --> 00:03:49,650
able to do monitoring but we don't have

00:03:47,579 --> 00:03:52,160
really good white box monitoring so this

00:03:49,650 --> 00:03:57,660
is one of the reasons we start out with

00:03:52,160 --> 00:04:00,450
reliable took it and then yeah we aren't

00:03:57,660 --> 00:04:03,450
paying so we'll like this in an IP land

00:04:00,450 --> 00:04:05,190
we're like a dinosaur we have all kind

00:04:03,450 --> 00:04:08,519
of technologies we have Java based API

00:04:05,190 --> 00:04:11,790
sui but we also have like mainframes

00:04:08,519 --> 00:04:14,690
HP non-stop message queue systems so we

00:04:11,790 --> 00:04:17,489
have a large diversity of Technology and

00:04:14,690 --> 00:04:19,229
that that's the reason we chose permit

00:04:17,489 --> 00:04:20,849
is because it has all this kind of cool

00:04:19,229 --> 00:04:25,560
exports we could use for all kinds of

00:04:20,849 --> 00:04:27,240
different technologies and the another

00:04:25,560 --> 00:04:31,560
reason that we created a reliability

00:04:27,240 --> 00:04:32,880
toolkit is because if you're working for

00:04:31,560 --> 00:04:36,510
our company and you want to introduce

00:04:32,880 --> 00:04:40,020
new surface it's good

00:04:36,510 --> 00:04:42,000
it's if you had to create a new surface

00:04:40,020 --> 00:04:43,970
you need to fill in a lot of documents

00:04:42,000 --> 00:04:47,160
in the reason why you do this is because

00:04:43,970 --> 00:04:50,010
you have to prove that you're in control

00:04:47,160 --> 00:04:53,190
of the risks the risk that you take by

00:04:50,010 --> 00:04:55,470
creating new surfaces and we're proving

00:04:53,190 --> 00:04:58,350
to be in control of this risk to our

00:04:55,470 --> 00:05:01,140
regulators they demanded from us so

00:04:58,350 --> 00:05:03,600
every time a team needs to implement for

00:05:01,140 --> 00:05:06,330
example a monitoring server they need to

00:05:03,600 --> 00:05:09,000
fill in like 20 or so documents and an

00:05:06,330 --> 00:05:11,400
example of document is like okay

00:05:09,000 --> 00:05:13,470
the architect take a look took a look at

00:05:11,400 --> 00:05:17,460
our service and he thinks it's reliable

00:05:13,470 --> 00:05:21,210
so I'll check stuff like that they have

00:05:17,460 --> 00:05:24,630
tons of those documents and the last but

00:05:21,210 --> 00:05:27,510
not least simplicity it's hard enough

00:05:24,630 --> 00:05:30,480
for engineers to create new services and

00:05:27,510 --> 00:05:32,930
to keep them running so we want to have

00:05:30,480 --> 00:05:35,070
a monitoring stack that's each to use

00:05:32,930 --> 00:05:38,250
there's not a lot of effort for the

00:05:35,070 --> 00:05:39,720
team's so what's in your liability

00:05:38,250 --> 00:05:41,420
toolkit well of course Prometheus

00:05:39,720 --> 00:05:45,210
otherwise I wasn't standing here right

00:05:41,420 --> 00:05:47,100
and there is the alert manager we

00:05:45,210 --> 00:05:49,800
deliver Khurana as well all on the same

00:05:47,100 --> 00:05:52,200
machine and we have something that we

00:05:49,800 --> 00:05:55,070
call model builder and I will tell you

00:05:52,200 --> 00:05:56,670
something about model builder later on

00:05:55,070 --> 00:05:59,400
it stopped working

00:05:56,670 --> 00:06:03,570
no it's still there so are we proficient

00:05:59,400 --> 00:06:08,690
it well a team needs to have his own

00:06:03,570 --> 00:06:12,240
configuration and we combined it using

00:06:08,690 --> 00:06:16,010
India with our own configuration so that

00:06:12,240 --> 00:06:20,880
the team has like this default set of

00:06:16,010 --> 00:06:24,660
the connected endpoints and for example

00:06:20,880 --> 00:06:27,660
we deliver like SMS channel the web

00:06:24,660 --> 00:06:30,210
hooks for for our chat ups integration

00:06:27,660 --> 00:06:31,980
for mail configuration all kind of

00:06:30,210 --> 00:06:33,750
congregation that that needs to be done

00:06:31,980 --> 00:06:35,220
for everyone we combine it the team

00:06:33,750 --> 00:06:38,190
specific configuration and then they're

00:06:35,220 --> 00:06:39,540
able to deploy it and we proficient the

00:06:38,190 --> 00:06:42,990
surface where they deployed with

00:06:39,540 --> 00:06:47,190
Proficient for them so every T gets like

00:06:42,990 --> 00:06:50,430
five machines one test two acceptance a

00:06:47,190 --> 00:06:52,740
to production and the reason we

00:06:50,430 --> 00:06:55,380
we are doing that is because we want

00:06:52,740 --> 00:07:00,270
people to be in control over their own

00:06:55,380 --> 00:07:02,789
monitoring and start using it a lot and

00:07:00,270 --> 00:07:06,870
that's why we give them their own

00:07:02,789 --> 00:07:09,630
service which remain our property and by

00:07:06,870 --> 00:07:11,130
doing so we are responsible for filling

00:07:09,630 --> 00:07:13,650
out all the documents and we're doing it

00:07:11,130 --> 00:07:18,090
all in once and so the teams don't have

00:07:13,650 --> 00:07:20,340
to do that and second of all they don't

00:07:18,090 --> 00:07:23,699
have to pay for a service we do that for

00:07:20,340 --> 00:07:28,289
them so it's kind of the quick vent for

00:07:23,699 --> 00:07:29,610
the teams we maintain the binaries so we

00:07:28,289 --> 00:07:32,010
do all the penetration testing security

00:07:29,610 --> 00:07:35,729
testing stuff like that before they are

00:07:32,010 --> 00:07:39,449
able to deploy them and what we do is we

00:07:35,729 --> 00:07:42,449
make sure that teams are able to scrape

00:07:39,449 --> 00:07:45,360
metrics from the surface so we implement

00:07:42,449 --> 00:07:47,460
client libraries into our most used

00:07:45,360 --> 00:07:49,289
frameworks we make sure that there is

00:07:47,460 --> 00:07:53,210
like this quality right which is plug-in

00:07:49,289 --> 00:07:57,930
running on the machines stuff like that

00:07:53,210 --> 00:08:00,330
so yeah I already mentioned within our

00:07:57,930 --> 00:08:02,010
company we use a lot of frameworks we

00:08:00,330 --> 00:08:06,060
implemented the client libraries into

00:08:02,010 --> 00:08:08,190
the frameworks what we also do because

00:08:06,060 --> 00:08:11,130
we have like 40 teams on board right now

00:08:08,190 --> 00:08:13,740
is we do like these feedback loops with

00:08:11,130 --> 00:08:15,900
them like interviews and our stand for

00:08:13,740 --> 00:08:18,599
ok how are you using Prometheus or you

00:08:15,900 --> 00:08:23,909
like it and by doing so we learn a lot

00:08:18,599 --> 00:08:29,010
about our solution and and are able to

00:08:23,909 --> 00:08:30,449
adjust in favor of them so a current

00:08:29,010 --> 00:08:32,099
solution we're going to change already

00:08:30,449 --> 00:08:34,380
because it was too difficult for teams

00:08:32,099 --> 00:08:35,849
to deploy and was too much of hassle so

00:08:34,380 --> 00:08:37,380
we're already changing that so that they

00:08:35,849 --> 00:08:41,159
only have to maintain like three

00:08:37,380 --> 00:08:44,039
configuration files or so we do

00:08:41,159 --> 00:08:47,190
education because what we see is that if

00:08:44,039 --> 00:08:49,740
we on board new teams they're like ok

00:08:47,190 --> 00:08:51,900
now I have to do all this hard work for

00:08:49,740 --> 00:08:55,170
permits but all we already use the

00:08:51,900 --> 00:08:56,790
lectures that should be enough right so

00:08:55,170 --> 00:08:58,110
there is like this lack of knowledge of

00:08:56,790 --> 00:08:59,579
monitoring so we teach them a little bit

00:08:58,110 --> 00:09:01,410
on monitoring then we teach them a

00:08:59,579 --> 00:09:03,370
little bit about promises and then we

00:09:01,410 --> 00:09:08,680
create workshop for four

00:09:03,370 --> 00:09:12,070
from qo the clearing language and we

00:09:08,680 --> 00:09:13,540
create their sports on our own from each

00:09:12,070 --> 00:09:15,370
instance these are available for all

00:09:13,540 --> 00:09:19,740
engineers which contains a lot of

00:09:15,370 --> 00:09:23,339
information from a lot of applications

00:09:19,740 --> 00:09:27,070
so how do we do that well first of all

00:09:23,339 --> 00:09:29,860
we have nginx running and nginx contains

00:09:27,070 --> 00:09:32,950
have lots of data about applications

00:09:29,860 --> 00:09:36,330
running just behind nginx they push

00:09:32,950 --> 00:09:38,830
offense to Kafka we consumed Ozzy fans

00:09:36,330 --> 00:09:42,850
and swore them into time-sharing Expos

00:09:38,830 --> 00:09:45,400
and for amici's that's basically it and

00:09:42,850 --> 00:09:48,190
what you could see is that by doing so

00:09:45,400 --> 00:09:50,110
we have like this overview of all our

00:09:48,190 --> 00:09:54,220
applications that are running directly

00:09:50,110 --> 00:09:55,779
behind nginx and this is really useful

00:09:54,220 --> 00:09:58,150
when you have like this major incident

00:09:55,779 --> 00:10:00,070
when this generic component may fail

00:09:58,150 --> 00:10:01,930
like network switch or a fire or

00:10:00,070 --> 00:10:05,620
anything you could directly see the

00:10:01,930 --> 00:10:07,510
impact on our other applications you can

00:10:05,620 --> 00:10:09,910
see this application is not doing well

00:10:07,510 --> 00:10:12,310
not feeling really good and we're able

00:10:09,910 --> 00:10:15,520
to send this alert to the teams if they

00:10:12,310 --> 00:10:18,310
want to and then we have like this team

00:10:15,520 --> 00:10:20,620
specific overviews so a team could go to

00:10:18,310 --> 00:10:23,260
our dashboard and select their own team

00:10:20,620 --> 00:10:25,990
and then see all kind of graphs about

00:10:23,260 --> 00:10:29,560
their applications so this is one of the

00:10:25,990 --> 00:10:33,010
response times the load of the only

00:10:29,560 --> 00:10:36,100
applications this is all based in credit

00:10:33,010 --> 00:10:42,279
card applications by the way the errors

00:10:36,100 --> 00:10:45,150
of course and requests per data center

00:10:42,279 --> 00:10:50,620
and we have all kind of their sports so

00:10:45,150 --> 00:10:52,510
how do we educate our engineers so what

00:10:50,620 --> 00:10:55,480
we did is we want to have like a

00:10:52,510 --> 00:10:59,320
scalable solution for teaching people

00:10:55,480 --> 00:11:01,209
premium which is creating language so we

00:10:59,320 --> 00:11:04,540
created this application that's able to

00:11:01,209 --> 00:11:05,920
create like this fake metrics and there

00:11:04,540 --> 00:11:07,900
it is in a graph on our that's what on

00:11:05,920 --> 00:11:10,930
it and people could log in and do all

00:11:07,900 --> 00:11:13,270
kind of exercises like this one so this

00:11:10,930 --> 00:11:16,150
is one about understanding the different

00:11:13,270 --> 00:11:17,080
functions and I will get from will give

00:11:16,150 --> 00:11:20,010
them an

00:11:17,080 --> 00:11:23,890
no sign of an assignment and of course I

00:11:20,010 --> 00:11:27,720
wish I put it in because the and this

00:11:23,890 --> 00:11:31,120
way I could share it with you later on

00:11:27,720 --> 00:11:34,780
and we give the solution of course and

00:11:31,120 --> 00:11:37,020
by doing so we want to be able to teach

00:11:34,780 --> 00:11:40,230
people about which is creating language

00:11:37,020 --> 00:11:45,730
and we're thinking of open sourcing this

00:11:40,230 --> 00:11:51,370
might be available for you as well so um

00:11:45,730 --> 00:11:55,660
I'm rushing a lot right and then this

00:11:51,370 --> 00:11:59,530
one yeah we have like this terrific on

00:11:55,660 --> 00:12:01,150
on our services and sometimes we have

00:11:59,530 --> 00:12:03,730
like a denial of service attacks for

00:12:01,150 --> 00:12:06,100
example or we have like this expected

00:12:03,730 --> 00:12:09,700
load on our applications so what we

00:12:06,100 --> 00:12:12,130
create it is like this model builder and

00:12:09,700 --> 00:12:14,260
what it does it's it looks at the

00:12:12,130 --> 00:12:18,550
current traffic or the current metric

00:12:14,260 --> 00:12:20,230
and it observes it and it creates and

00:12:18,550 --> 00:12:23,440
model out of it so this is the current

00:12:20,230 --> 00:12:26,290
load on the application the mob

00:12:23,440 --> 00:12:29,830
aggregation API this is the current load

00:12:26,290 --> 00:12:32,290
on application and it the model builder

00:12:29,830 --> 00:12:36,100
will take to the metric make a model out

00:12:32,290 --> 00:12:38,740
of it it push it back into Prometheus as

00:12:36,100 --> 00:12:42,340
another time City so you could do like

00:12:38,740 --> 00:12:45,190
this semi anomaly detection because this

00:12:42,340 --> 00:12:46,930
is what the expected load is and then

00:12:45,190 --> 00:12:51,910
you're able to alert when something is

00:12:46,930 --> 00:12:54,340
odd so this wasn't sudden decrease of

00:12:51,910 --> 00:12:55,960
load so it was dropping and it might

00:12:54,340 --> 00:12:58,300
tell you that something's wrong

00:12:55,960 --> 00:13:00,820
so you could learn a little out of it

00:12:58,300 --> 00:13:04,200
and we deliver this model builds teams

00:13:00,820 --> 00:13:09,120
as well so that it could create models

00:13:04,200 --> 00:13:12,970
out of any kind of metric day they use

00:13:09,120 --> 00:13:16,210
so currently we support couches and

00:13:12,970 --> 00:13:18,280
counters as input and the model type

00:13:16,210 --> 00:13:22,270
that comes out of it is an everything

00:13:18,280 --> 00:13:25,180
model and it does it prediction based on

00:13:22,270 --> 00:13:27,280
failure in buckets and it puts in all

00:13:25,180 --> 00:13:30,880
kind of buckets in the time you

00:13:27,280 --> 00:13:32,920
configure and output is just like this

00:13:30,880 --> 00:13:40,930
same as the same label but with model

00:13:32,920 --> 00:13:55,360
and prefix so this assist for me any

00:13:40,930 --> 00:13:56,080
questions thank you questions any hi

00:13:55,360 --> 00:13:58,990
thanks for the talk

00:13:56,080 --> 00:14:00,970
can you say how do you deploy the

00:13:58,990 --> 00:14:04,120
Prometheus for your teams and how do you

00:14:00,970 --> 00:14:05,860
maintain them all right sure

00:14:04,120 --> 00:14:08,620
well right now the teams deployed

00:14:05,860 --> 00:14:12,090
himself and they they're using like our

00:14:08,620 --> 00:14:16,030
she CDC I pipeline that are used to use

00:14:12,090 --> 00:14:17,740
but we're changing that we're about to

00:14:16,030 --> 00:14:20,310
deploying stuff we're ansible

00:14:17,740 --> 00:14:23,110
so what we do is the the teams will

00:14:20,310 --> 00:14:25,660
generate their configuration put it in

00:14:23,110 --> 00:14:29,520
their repository we'll grab it out and

00:14:25,660 --> 00:14:33,730
deploy it secretly on their machines

00:14:29,520 --> 00:14:35,500
does it answer your question y'all know

00:14:33,730 --> 00:14:37,450
I really like the talk Thanks

00:14:35,500 --> 00:14:39,340
the dashboard for alerts with the

00:14:37,450 --> 00:14:42,850
timeline yeah with the red and the green

00:14:39,340 --> 00:14:47,860
how did you build that good question

00:14:42,850 --> 00:14:50,050
could you open source it well yeah well

00:14:47,860 --> 00:14:52,000
to be honest I didn't build it was one

00:14:50,050 --> 00:14:55,840
of our other engineers but it's a great

00:14:52,000 --> 00:14:58,330
one right yeah check on me later and

00:14:55,840 --> 00:14:59,380
then I could we could wrap into the

00:14:58,330 --> 00:15:02,950
dashboard and see it

00:14:59,380 --> 00:15:04,840
yeah I'm not yeah you need a plug-in

00:15:02,950 --> 00:15:08,800
yeah but I could see which plug-in and

00:15:04,840 --> 00:15:15,970
I'm not sure how to share but you will

00:15:08,800 --> 00:15:16,750
come up with something oh yeah we have

00:15:15,970 --> 00:15:24,160
plenty of time

00:15:16,750 --> 00:15:25,810
for questions this a great talk can you

00:15:24,160 --> 00:15:30,220
tell us a little bit more about the

00:15:25,810 --> 00:15:34,240
model builder and how you get the model

00:15:30,220 --> 00:15:40,690
of the graph like the expected value of

00:15:34,240 --> 00:15:44,830
the of the graphs and how you detect the

00:15:40,690 --> 00:15:48,430
differences and on which you alert so

00:15:44,830 --> 00:15:51,370
the question is how do we detect the

00:15:48,430 --> 00:15:53,560
difference yeah I mean for example if

00:15:51,370 --> 00:15:55,240
you stream of events with consistent

00:15:53,560 --> 00:15:58,570
values and all of a sudden something

00:15:55,240 --> 00:16:00,940
changed like load starts to increase or

00:15:58,570 --> 00:16:03,160
you detect those how do you plot the

00:16:00,940 --> 00:16:08,680
model builder how do you detect on those

00:16:03,160 --> 00:16:10,390
changes well if you understand your

00:16:08,680 --> 00:16:13,840
question correctly what we do is we have

00:16:10,390 --> 00:16:16,600
this the current load so the real time

00:16:13,840 --> 00:16:18,550
and the model builder will create an

00:16:16,600 --> 00:16:21,790
other time series so next to it and we

00:16:18,550 --> 00:16:24,220
compare those that's it answer your

00:16:21,790 --> 00:16:27,160
question yeah you want to know how the

00:16:24,220 --> 00:16:30,850
model builder yeah how did you implement

00:16:27,160 --> 00:16:34,089
the body how did you implement the model

00:16:30,850 --> 00:16:37,710
builder in your case as you know we can

00:16:34,089 --> 00:16:44,410
totally as a separate application okay

00:16:37,710 --> 00:16:52,960
yeah yeah okay any more questions Oh

00:16:44,410 --> 00:16:55,270
over there could could you hi thanks um

00:16:52,960 --> 00:16:57,370
where do you see yourselves going now

00:16:55,270 --> 00:16:59,530
like what are the pain points your team

00:16:57,370 --> 00:17:04,449
still have in being able to make better

00:16:59,530 --> 00:17:06,640
use of Prometheus well we know our

00:17:04,449 --> 00:17:09,040
company if you start out with a new tool

00:17:06,640 --> 00:17:12,699
like Prometheus you will end up in like

00:17:09,040 --> 00:17:14,949
this to war and you have to convince

00:17:12,699 --> 00:17:17,650
people to use primitives and how we try

00:17:14,949 --> 00:17:19,870
to do that is by making it simple and

00:17:17,650 --> 00:17:23,410
easy by creating some stuff like

00:17:19,870 --> 00:17:25,120
reliably toolkit right now we have 180

00:17:23,410 --> 00:17:27,490
servers running with Prometheus but

00:17:25,120 --> 00:17:30,160
they're not being used a lot so how do I

00:17:27,490 --> 00:17:33,580
see it what we try to do is

00:17:30,160 --> 00:17:37,860
making the onboarding process easier for

00:17:33,580 --> 00:17:42,160
people so without any effort of us and

00:17:37,860 --> 00:17:44,230
and less servers I guess so we're going

00:17:42,160 --> 00:17:47,289
to merge surface once we know how people

00:17:44,230 --> 00:17:52,559
are using it and what the capacity of

00:17:47,289 --> 00:17:52,559
the surface needs to be yeah

00:18:28,660 --> 00:18:34,310
could you repeat the question because

00:18:30,830 --> 00:18:36,920
the mic was yeah I will try to sum it up

00:18:34,310 --> 00:18:38,750
okay what your question is you have like

00:18:36,920 --> 00:18:40,370
this most control room doing things and

00:18:38,750 --> 00:18:42,370
seeing all things but are you delivering

00:18:40,370 --> 00:18:47,150
different monitoring systems to

00:18:42,370 --> 00:18:49,640
different teams right it's basically

00:18:47,150 --> 00:18:52,340
it's a multi-tenant question you've

00:18:49,640 --> 00:18:56,450
broken up two silos yeah we did but you

00:18:52,340 --> 00:18:57,530
have you have DevOps deployments yeah

00:18:56,450 --> 00:19:01,070
yeah

00:18:57,530 --> 00:19:03,410
so yeah that's what we do so we give

00:19:01,070 --> 00:19:09,530
every team is separate from each a

00:19:03,410 --> 00:19:11,960
server yeah yeah it's accessible to to

00:19:09,530 --> 00:19:14,360
all with what we call Corki so that's

00:19:11,960 --> 00:19:17,330
like the login key you use but everyone

00:19:14,360 --> 00:19:23,270
that has one who's able to see it yeah

00:19:17,330 --> 00:19:24,980
so it's shared hi I was wondering if you

00:19:23,270 --> 00:19:27,320
could talk about how you manage alerts

00:19:24,980 --> 00:19:31,670
who creates that how you deploy that to

00:19:27,320 --> 00:19:35,060
the Prometheus instances now so what we

00:19:31,670 --> 00:19:37,310
do is well first of all the teams

00:19:35,060 --> 00:19:38,720
themself are responsible for the error

00:19:37,310 --> 00:19:40,700
layers of course for the ad application

00:19:38,720 --> 00:19:43,310
because we're not always understanding

00:19:40,700 --> 00:19:47,780
the context of their application but

00:19:43,310 --> 00:19:49,760
alert about the stack itself we we

00:19:47,780 --> 00:19:51,650
deliver that in a in like the global

00:19:49,760 --> 00:19:54,470
configuration and all letters are being

00:19:51,650 --> 00:19:57,350
sent to us so about the stack are sent

00:19:54,470 --> 00:19:59,420
to us and about their application that's

00:19:57,350 --> 00:20:03,410
their responsibility but we try to help

00:19:59,420 --> 00:20:05,330
them of course and they write the the

00:20:03,410 --> 00:20:07,310
alerts in and then the dates deployed

00:20:05,330 --> 00:20:10,250
through CI or whatever to the Prometheus

00:20:07,310 --> 00:20:14,020
instance basically they have like this

00:20:10,250 --> 00:20:21,650
deployment pipeline thank you you have

00:20:14,020 --> 00:20:24,470
any more questions thanks for the talk

00:20:21,650 --> 00:20:28,070
and you mentioned chat tops can you tell

00:20:24,470 --> 00:20:30,980
us yeah we use meta most we did like

00:20:28,070 --> 00:20:34,330
this tool choice we compared like slack

00:20:30,980 --> 00:20:38,380
and hips yet it doesn't exist anymore

00:20:34,330 --> 00:20:41,320
and a meta most and

00:20:38,380 --> 00:20:46,250
yeah the thing is we have like this

00:20:41,320 --> 00:20:48,530
sensitive information about like fraud

00:20:46,250 --> 00:20:50,390
systems and stuff and if you want to do

00:20:48,530 --> 00:20:52,490
your incident solution in an chat

00:20:50,390 --> 00:20:54,410
channel it's okay but yeah we met the

00:20:52,490 --> 00:20:58,210
most capable of running on premise and

00:20:54,410 --> 00:21:01,280
so we even met the most on premise and

00:20:58,210 --> 00:21:04,460
right now we're the only thing we do is

00:21:01,280 --> 00:21:07,010
sending alerts to chat channels we're

00:21:04,460 --> 00:21:08,690
not doing the whole bot integration we

00:21:07,010 --> 00:21:23,630
would like to do but we're not doing

00:21:08,690 --> 00:21:25,850
that yet anymore one over there you

00:21:23,630 --> 00:21:27,710
mentioned yet we had 300 devolve

00:21:25,850 --> 00:21:29,600
specifiy how successful were you in

00:21:27,710 --> 00:21:35,120
educating them with the use of from

00:21:29,600 --> 00:21:38,750
easiest to be honest we only did one

00:21:35,120 --> 00:21:40,430
workshop yet which was to pilot and that

00:21:38,750 --> 00:21:43,880
was very successful people are very

00:21:40,430 --> 00:21:46,040
enthusiastic about it and that's the

00:21:43,880 --> 00:21:50,960
reason why we want to make like scalable

00:21:46,040 --> 00:21:52,970
but yeah it's a bit of a struggle to get

00:21:50,960 --> 00:21:54,350
people aware first of all the basics of

00:21:52,970 --> 00:21:56,690
monitoring and second of all on

00:21:54,350 --> 00:21:59,450
primitive quitting languages so yeah

00:21:56,690 --> 00:22:00,530
we're struggling but yeah we try to get

00:21:59,450 --> 00:22:02,720
there by creating these kind of

00:22:00,530 --> 00:22:08,360
workshops but we put a lot of effort in

00:22:02,720 --> 00:22:10,580
education anymore or should we go to the

00:22:08,360 --> 00:22:15,560
next talk there's one more okay let's do

00:22:10,580 --> 00:22:19,610
one more so when you say that you're

00:22:15,560 --> 00:22:22,370
struggling with like teaching Prometheus

00:22:19,610 --> 00:22:24,500
to to these teams is it because they are

00:22:22,370 --> 00:22:26,930
already used to some different solution

00:22:24,500 --> 00:22:29,090
Oh simple query language just the fact

00:22:26,930 --> 00:22:32,950
that or just the basics of monitoring

00:22:29,090 --> 00:22:36,590
itself and querying for matrix integral

00:22:32,950 --> 00:22:41,710
yeah they're used to well are used to

00:22:36,590 --> 00:22:44,180
profile because most teams use graphite

00:22:41,710 --> 00:22:45,800
but it isn't performing very well so

00:22:44,180 --> 00:22:48,110
this this was one of the reasons why

00:22:45,800 --> 00:22:50,180
start we start of April Michy's and so

00:22:48,110 --> 00:22:51,500
they're used to graphite with a clicking

00:22:50,180 --> 00:22:55,210
of the parts and stuff

00:22:51,500 --> 00:22:55,210
so this is totally new concept for them

00:22:56,020 --> 00:23:05,400
all right thank you

00:23:00,190 --> 00:23:05,400

YouTube URL: https://www.youtube.com/watch?v=m-TOaHfOXoE


