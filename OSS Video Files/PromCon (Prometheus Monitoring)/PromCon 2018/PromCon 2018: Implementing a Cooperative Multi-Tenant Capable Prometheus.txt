Title: PromCon 2018: Implementing a Cooperative Multi-Tenant Capable Prometheus
Publication date: 2018-11-10
Playlist: PromCon 2018
Description: 
	Speaker: Jonas GroÃŸe Sundrup

Prometheus is capable of and used for monitoring large infrastructures, from corporate networks to world-spanning CDNs. But while performing excellent on setups of large scales, it is also extremely well suited for small setups due to its simplicity and modularity both in operation as well in usage.

To further simplify leveraging the power of Prometheus for monitoning, we developed a cooperative, centrally managed multi-tenant-capable Prometheus system that minimizes the entry barrier for participants, introducing Prometheus to small-scale monitoring including out-of-the-box capabilities for blackbox montioring.

The multi-tenancy layer in this case serves two distinct purposes: First, it ensures that every user can only access their own metrics when querying. Second, it ensures that every user can only create alerts or alert silences for their own set of metrics.

In the process of doing so, we will investigate how the Prometheus frontend handles queries and how alerts and silences are submitted and modified accordingly, to implement multi-tenancy in Prometheus.

The entire setup is usable with out-of-the-box standard Prometheus components, no patches necessary.
Captions: 
	00:00:11,020 --> 00:00:18,080
[Applause]

00:00:15,280 --> 00:00:20,390
so welcome to this talk implementing a

00:00:18,080 --> 00:00:22,760
corporate multi-tape about Prometheus or

00:00:20,390 --> 00:00:26,169
as we renamed renamed yesterday easy

00:00:22,760 --> 00:00:28,279
multi-tenancy so first of all

00:00:26,169 --> 00:00:31,220
implementing a cooperative multi-tenant

00:00:28,279 --> 00:00:33,110
capable Prometheus you might be

00:00:31,220 --> 00:00:35,360
wondering what are we doing there so the

00:00:33,110 --> 00:00:37,310
first thing I would like to talk about

00:00:35,360 --> 00:00:40,480
what is our target audience what are our

00:00:37,310 --> 00:00:42,680
target users the system was built with

00:00:40,480 --> 00:00:44,420
users in mind that runs small-scale

00:00:42,680 --> 00:00:47,630
infrastructure most of them run like

00:00:44,420 --> 00:00:49,940
single server setups but you still want

00:00:47,630 --> 00:00:52,610
to have monitoring for them right on the

00:00:49,940 --> 00:00:54,650
other hand like getting a second

00:00:52,610 --> 00:00:55,970
monitoring server just to monitor one

00:00:54,650 --> 00:00:58,850
other server might be a little bit of

00:00:55,970 --> 00:01:01,250
overkill so our intention is to share

00:00:58,850 --> 00:01:04,070
monitoring infrastructure the other

00:01:01,250 --> 00:01:06,500
thing of our users we intend that our

00:01:04,070 --> 00:01:08,299
users must not be monitoring experts but

00:01:06,500 --> 00:01:10,880
the system should be very easy for them

00:01:08,299 --> 00:01:12,979
and very easy very approachable so that

00:01:10,880 --> 00:01:17,299
everyone can can basically use it with

00:01:12,979 --> 00:01:19,700
with a low entry bar so the goal that

00:01:17,299 --> 00:01:21,590
I've formulated here is we want to have

00:01:19,700 --> 00:01:23,479
a drop that simple fire-and-forget low

00:01:21,590 --> 00:01:28,850
resource monitoring or alerting solution

00:01:23,479 --> 00:01:31,460
that just works sounds sounds pretty

00:01:28,850 --> 00:01:34,219
cool right so let's see if we can do

00:01:31,460 --> 00:01:36,170
that so the roadmap for this talk will

00:01:34,219 --> 00:01:37,549
be will we will first speak a little bit

00:01:36,170 --> 00:01:39,829
about how we implement that on

00:01:37,549 --> 00:01:41,990
Prometheus we also as we want to have

00:01:39,829 --> 00:01:44,479
alerting we have an alert manager on the

00:01:41,990 --> 00:01:46,039
system after that we will speak a little

00:01:44,479 --> 00:01:48,439
bit about the system architecture and

00:01:46,039 --> 00:01:51,020
some additional services that we that we

00:01:48,439 --> 00:01:53,209
also provide for the system we of course

00:01:51,020 --> 00:01:54,920
have some requirements or requirements

00:01:53,209 --> 00:01:56,569
we are we want to have one parameters

00:01:54,920 --> 00:01:58,490
per machine we want to have a low memory

00:01:56,569 --> 00:02:00,200
footprint and the machine we want to run

00:01:58,490 --> 00:02:03,469
this on should be as cheap as possible

00:02:00,200 --> 00:02:04,700
and we also do not want to like have the

00:02:03,469 --> 00:02:07,369
operational overhead of managing

00:02:04,700 --> 00:02:08,810
multiple Prometheus instances we also

00:02:07,369 --> 00:02:11,000
obviously want to have multi-tenancy

00:02:08,810 --> 00:02:13,580
because that's a more system used by

00:02:11,000 --> 00:02:14,990
multiple tenants we want to have ansible

00:02:13,580 --> 00:02:17,450
compatibility because a lot of our users

00:02:14,990 --> 00:02:19,460
are running although the setups are

00:02:17,450 --> 00:02:22,250
small they're running it on ansible so

00:02:19,460 --> 00:02:23,970
we want to have ansible be capable of

00:02:22,250 --> 00:02:26,250
dropping monitoring targets in there

00:02:23,970 --> 00:02:29,040
and we want to have patch free operation

00:02:26,250 --> 00:02:30,870
we will not patch around in the in the

00:02:29,040 --> 00:02:32,460
code components of Prometheus because

00:02:30,870 --> 00:02:37,680
that will be a pain to operate and we're

00:02:32,460 --> 00:02:39,990
not gonna go down that road so that's

00:02:37,680 --> 00:02:41,610
what that was the preamble and now we

00:02:39,990 --> 00:02:43,290
need to talk about how to get data into

00:02:41,610 --> 00:02:44,550
Prometheus and usually when we speak

00:02:43,290 --> 00:02:46,320
about getting data into Prometheus

00:02:44,550 --> 00:02:49,200
people think about scraping but in our

00:02:46,320 --> 00:02:51,450
case this is more about how our users

00:02:49,200 --> 00:02:54,780
getting data and prometheus so scrape

00:02:51,450 --> 00:02:58,020
targets and the like what we do what we

00:02:54,780 --> 00:03:01,080
did there is every user gets SSH login

00:02:58,020 --> 00:03:02,760
onto the Machine and they have just have

00:03:01,080 --> 00:03:04,740
a folder in their home directory called

00:03:02,760 --> 00:03:06,630
scrape targets and they can just drop

00:03:04,740 --> 00:03:08,730
their scrape target in here for example

00:03:06,630 --> 00:03:11,940
we have two node exporters a database

00:03:08,730 --> 00:03:13,680
and a mail exporter in there and the

00:03:11,940 --> 00:03:15,930
according snippet in the Prometheus

00:03:13,680 --> 00:03:19,740
configuration is this one so we have a

00:03:15,930 --> 00:03:22,430
job for Alice and there are listed there

00:03:19,740 --> 00:03:24,870
is a file service discovery listed and

00:03:22,430 --> 00:03:27,360
this file service discovery is just

00:03:24,870 --> 00:03:31,920
reading these script targets out of

00:03:27,360 --> 00:03:34,530
Alice home directory so the job label is

00:03:31,920 --> 00:03:36,270
a little bit special here usually the

00:03:34,530 --> 00:03:39,060
job label has this notion of your group

00:03:36,270 --> 00:03:40,830
similar things together for example you

00:03:39,060 --> 00:03:42,900
put all the database exporters or all

00:03:40,830 --> 00:03:46,830
the database metrics into one job you

00:03:42,900 --> 00:03:48,900
put all the web servers into one job for

00:03:46,830 --> 00:03:51,300
our case as our setups are so small we

00:03:48,900 --> 00:03:52,500
just don't have this notion so we just

00:03:51,300 --> 00:03:55,739
hijack the job label for our

00:03:52,500 --> 00:03:58,080
multi-tenancy but you can use any label

00:03:55,739 --> 00:03:59,880
that you want and the approach will

00:03:58,080 --> 00:04:03,390
still work you just have to add the

00:03:59,880 --> 00:04:05,420
label in the jobs in addition to that we

00:04:03,390 --> 00:04:08,700
also as you see down there we also

00:04:05,420 --> 00:04:14,280
provide some basic off if the users want

00:04:08,700 --> 00:04:21,120
to have HTTP basic authentication so

00:04:14,280 --> 00:04:22,919
possible so in addition to deploying the

00:04:21,120 --> 00:04:25,860
spread targets we also have rules rules

00:04:22,919 --> 00:04:27,390
go in a similar way we have some normal

00:04:25,860 --> 00:04:29,250
rules and we have some more serious

00:04:27,390 --> 00:04:30,540
rules in 2fast the users can just drop

00:04:29,250 --> 00:04:32,940
that into another folder in their home

00:04:30,540 --> 00:04:37,830
directory and will also be read from

00:04:32,940 --> 00:04:41,039
that from that folder so that was a

00:04:37,830 --> 00:04:42,780
getting data into prometheus but now we

00:04:41,039 --> 00:04:46,770
have to speak about how we get data out

00:04:42,780 --> 00:04:48,150
of Prometheus and out of getting data

00:04:46,770 --> 00:04:50,970
out of parameters obviously means

00:04:48,150 --> 00:04:53,009
querying so if I if I'm on the instance

00:04:50,970 --> 00:04:54,960
and I just query the app metric we see

00:04:53,009 --> 00:04:56,819
that we have four users on the system we

00:04:54,960 --> 00:04:59,159
have Daniel Jonas Meredith and Valerie

00:04:56,819 --> 00:05:02,159
and I am primarily interested in my own

00:04:59,159 --> 00:05:04,710
metrics so if I only want to see my my

00:05:02,159 --> 00:05:08,370
own metrics what I do is pretty simple I

00:05:04,710 --> 00:05:10,710
just add the job equals yonas selector

00:05:08,370 --> 00:05:14,129
to the query and then I only get my own

00:05:10,710 --> 00:05:16,440
metric and this is perfect so if we are

00:05:14,129 --> 00:05:17,639
wondering well you do that in the front

00:05:16,440 --> 00:05:19,340
end right you have the Prometheus

00:05:17,639 --> 00:05:21,539
front-engined you type your query and

00:05:19,340 --> 00:05:23,550
somehow the Prometheus back and then

00:05:21,539 --> 00:05:26,430
knows what to render and what to send

00:05:23,550 --> 00:05:28,620
back so how does the Prometheus front

00:05:26,430 --> 00:05:31,979
I'd communicate that over if we take a

00:05:28,620 --> 00:05:34,409
look at the URL bar we will see oh we

00:05:31,979 --> 00:05:37,500
have some the expression just embedded

00:05:34,409 --> 00:05:41,669
at an HTTP GET parameter here right in

00:05:37,500 --> 00:05:44,849
the right in the URL so what we could do

00:05:41,669 --> 00:05:48,690
is we could just put an HTTP proxy in

00:05:44,849 --> 00:05:51,930
the middle and we could just dissemble

00:05:48,690 --> 00:05:54,300
the request take the according parameter

00:05:51,930 --> 00:05:57,590
and just rewrite that right pretty

00:05:54,300 --> 00:05:59,969
simple and it works pretty well so

00:05:57,590 --> 00:06:02,460
injecting a label so we want to inject

00:05:59,969 --> 00:06:04,050
our tenancy label which in our case is

00:06:02,460 --> 00:06:05,639
the job label so how do you do that I

00:06:04,050 --> 00:06:07,800
mean it could be pretty simple you just

00:06:05,639 --> 00:06:09,870
hook an HTTP proxy there and you just do

00:06:07,800 --> 00:06:12,690
it like some some string substitution on

00:06:09,870 --> 00:06:14,340
that on that query right it could be

00:06:12,690 --> 00:06:16,529
couldn't be so hard so you have your

00:06:14,340 --> 00:06:18,060
metric you have a job you just do a Rex

00:06:16,529 --> 00:06:19,889
matching and you replace the job with

00:06:18,060 --> 00:06:23,129
you with the according what it should be

00:06:19,889 --> 00:06:24,750
if there is no job present well it's

00:06:23,129 --> 00:06:27,300
still pretty simple you just replace

00:06:24,750 --> 00:06:31,620
open curly braket with open curly braket

00:06:27,300 --> 00:06:34,110
job equals job name comma right yeah it

00:06:31,620 --> 00:06:35,729
still works for my metric but then we

00:06:34,110 --> 00:06:37,259
have your metric and now I have to

00:06:35,729 --> 00:06:39,389
insert the curly brackets as well and I

00:06:37,259 --> 00:06:42,810
have like this I have like the divide

00:06:39,389 --> 00:06:46,139
operator and now I have to insert that

00:06:42,810 --> 00:06:48,659
in both metrics and it start I start to

00:06:46,139 --> 00:06:51,590
like implement prompt UI logic into that

00:06:48,659 --> 00:06:54,320
if I have functions in there thing

00:06:51,590 --> 00:06:55,910
get ugly and I would say the technical

00:06:54,320 --> 00:07:00,200
term for this approach is dumpster fire

00:06:55,910 --> 00:07:02,660
so let's just not do that so the so what

00:07:00,200 --> 00:07:04,940
we also could do is we would implement a

00:07:02,660 --> 00:07:06,950
prompt to a parcel that actually really

00:07:04,940 --> 00:07:10,960
knows the notion of prompt QL and use

00:07:06,950 --> 00:07:13,220
that for for injection of the labels

00:07:10,960 --> 00:07:14,780
fortunately there is a project out where

00:07:13,220 --> 00:07:17,810
there where someone already has done

00:07:14,780 --> 00:07:19,160
that there has been there is a prompt to

00:07:17,810 --> 00:07:21,020
a parser that has been written it's a

00:07:19,160 --> 00:07:24,080
total niche project maybe you have heard

00:07:21,020 --> 00:07:25,970
of it it's called prometheus so we can

00:07:24,080 --> 00:07:28,310
just use that and we do more or less the

00:07:25,970 --> 00:07:30,200
similar thing a thing that was done two

00:07:28,310 --> 00:07:32,300
years ago with Vulcan we just use

00:07:30,200 --> 00:07:34,820
Prometheus or the prompt QL sub

00:07:32,300 --> 00:07:37,250
component of that as a library and just

00:07:34,820 --> 00:07:42,230
use that for force for parsing the

00:07:37,250 --> 00:07:44,300
expression and if we do that we can take

00:07:42,230 --> 00:07:47,420
a look at how we retrieve data and

00:07:44,300 --> 00:07:50,120
prompt QL so there are two you see two

00:07:47,420 --> 00:07:51,830
metrics here and what you have is in the

00:07:50,120 --> 00:07:53,450
utmost metric you have a vector selector

00:07:51,830 --> 00:07:56,480
this is called a vector selector the

00:07:53,450 --> 00:07:58,640
HTTP request total because you get a

00:07:56,480 --> 00:08:00,680
vector of values so basically you get

00:07:58,640 --> 00:08:04,220
the label sets and then a vector of

00:08:00,680 --> 00:08:05,750
values for that the second one is where

00:08:04,220 --> 00:08:07,190
you have a metric over time this is

00:08:05,750 --> 00:08:09,620
called a matrix elector because you

00:08:07,190 --> 00:08:11,330
basically get like vectors over time so

00:08:09,620 --> 00:08:14,230
this is a matrix and those two are the

00:08:11,330 --> 00:08:16,340
only ones that are actually able of

00:08:14,230 --> 00:08:18,230
retrieving data from the Prometheus

00:08:16,340 --> 00:08:20,570
everything else in Pronk really is just

00:08:18,230 --> 00:08:22,760
doing things with these metrics so what

00:08:20,570 --> 00:08:24,500
we can do once we have the prompt your

00:08:22,760 --> 00:08:26,990
parser we can just walk over the

00:08:24,500 --> 00:08:28,880
abstract syntax tree of that and look

00:08:26,990 --> 00:08:31,340
out for all the vector selectors and all

00:08:28,880 --> 00:08:32,950
the matrix selectors and just in inject

00:08:31,340 --> 00:08:35,660
the label there because that's exactly

00:08:32,950 --> 00:08:39,830
the position where we need the labels

00:08:35,660 --> 00:08:43,940
and I can tell you this works pretty

00:08:39,830 --> 00:08:46,160
decent so another thing is the rules we

00:08:43,940 --> 00:08:49,040
have the similar issue with the rules so

00:08:46,160 --> 00:08:50,150
what we do is the users specify as you

00:08:49,040 --> 00:08:52,220
have seen the rules in their home

00:08:50,150 --> 00:08:53,870
directory and then we have a parse rule

00:08:52,220 --> 00:08:57,230
rules command which also tells you if a

00:08:53,870 --> 00:08:58,730
rule is faulty for example and this

00:08:57,230 --> 00:09:02,360
parses the rules into a different

00:08:58,730 --> 00:09:04,250
directory and in between we do some

00:09:02,360 --> 00:09:05,059
modifications to the rule first of all

00:09:04,250 --> 00:09:06,739
we do

00:09:05,059 --> 00:09:08,419
the same modification for the expression

00:09:06,739 --> 00:09:09,799
we have to add the job label at all

00:09:08,419 --> 00:09:12,499
positions where we have vector or matrix

00:09:09,799 --> 00:09:15,589
selectors and in addition to that we

00:09:12,499 --> 00:09:17,179
also add the label here down here

00:09:15,589 --> 00:09:18,859
so we ensure that this alerting rule

00:09:17,179 --> 00:09:21,619
always has the drop label present

00:09:18,859 --> 00:09:23,269
because in principle you could you could

00:09:21,619 --> 00:09:25,009
create a prompt Kuehl expression that

00:09:23,269 --> 00:09:26,899
would get rid of the job label and then

00:09:25,009 --> 00:09:28,699
this alerting rule because in the end we

00:09:26,899 --> 00:09:32,569
are routing based on our multi-tenancy

00:09:28,699 --> 00:09:35,659
label in the end we are not able to

00:09:32,569 --> 00:09:37,729
route the the rule correctly one example

00:09:35,659 --> 00:09:39,589
for that would be if you do a sum sum in

00:09:37,729 --> 00:09:39,979
front of the app then the job label is

00:09:39,589 --> 00:09:43,069
gone

00:09:39,979 --> 00:09:47,299
so we ensure that the label is present

00:09:43,069 --> 00:09:49,399
as well so now we have spoken about the

00:09:47,299 --> 00:09:51,439
Prometheus and how we get data out of

00:09:49,399 --> 00:09:54,259
the Prometheus by querying and by

00:09:51,439 --> 00:09:57,169
Prometheus pushing data out manually for

00:09:54,259 --> 00:09:58,669
alerts speaking of alerts we of course

00:09:57,169 --> 00:10:02,599
want alerting in the system so we have

00:09:58,669 --> 00:10:05,389
an alert manager the alert manager has a

00:10:02,599 --> 00:10:06,739
similar issue when we have the alerts we

00:10:05,389 --> 00:10:08,479
can see like every alerts that are

00:10:06,739 --> 00:10:11,059
present but I'm primarily interested in

00:10:08,479 --> 00:10:12,949
alerts that are actually that are

00:10:11,059 --> 00:10:14,749
actually for my machines so what I could

00:10:12,949 --> 00:10:16,839
do is I could add a custom matcher for

00:10:14,749 --> 00:10:19,009
example the one that sue Prometheus

00:10:16,839 --> 00:10:20,659
thought that the alert manager is

00:10:19,009 --> 00:10:25,129
proposing to me the environment

00:10:20,659 --> 00:10:26,359
production so and for example I could do

00:10:25,129 --> 00:10:29,359
the same thing with a multi-tenancy

00:10:26,359 --> 00:10:32,179
label and I would only see the alerts

00:10:29,359 --> 00:10:35,299
that are actually applicable for our for

00:10:32,179 --> 00:10:38,089
our mode for our tenant so what worked

00:10:35,299 --> 00:10:39,169
once can work a second time so how does

00:10:38,089 --> 00:10:41,329
the alert manage of front-end

00:10:39,169 --> 00:10:43,339
communicate to the backend what act what

00:10:41,329 --> 00:10:45,229
filters are set we take a look in the

00:10:43,339 --> 00:10:47,719
URL bar and we see well we have a filter

00:10:45,229 --> 00:10:49,939
argument where we have exactly this in

00:10:47,719 --> 00:10:52,009
there so we can use actually we can use

00:10:49,939 --> 00:10:55,099
the same code that we used for the

00:10:52,009 --> 00:10:57,409
Prometheus to parse that as well and to

00:10:55,099 --> 00:11:00,889
to put the modified version in ensuring

00:10:57,409 --> 00:11:04,639
that we always have a filter by based on

00:11:00,889 --> 00:11:06,289
the channel model there is one thing

00:11:04,639 --> 00:11:08,479
that in the alert ninja which is crucial

00:11:06,289 --> 00:11:12,399
which we need to do so that things don't

00:11:08,479 --> 00:11:15,289
go wrong any ideas what that might be

00:11:12,399 --> 00:11:17,269
silence restrictions exactly we could

00:11:15,289 --> 00:11:18,620
have this one I could set this over this

00:11:17,269 --> 00:11:21,710
this silence and

00:11:18,620 --> 00:11:23,570
would like silence my alarm clock and by

00:11:21,710 --> 00:11:25,940
accident everyone else's which is

00:11:23,570 --> 00:11:28,250
perfect because we all get to sleep long

00:11:25,940 --> 00:11:29,690
and the next day it gets not so perfect

00:11:28,250 --> 00:11:31,550
like two minutes after we woke up and

00:11:29,690 --> 00:11:34,610
realized that this has happened so we

00:11:31,550 --> 00:11:37,340
need to ensure that that this will not

00:11:34,610 --> 00:11:40,490
happen the idea is again the same we

00:11:37,340 --> 00:11:44,030
have our our label sets here so we again

00:11:40,490 --> 00:11:46,400
inject our job label in our heads or job

00:11:44,030 --> 00:11:50,450
label or our multi-tenancy label into

00:11:46,400 --> 00:11:52,490
into that well because we are hooked in

00:11:50,450 --> 00:11:54,500
between with the HTTP proxy anyways we

00:11:52,490 --> 00:11:56,870
can do that in this case it's not a get

00:11:54,500 --> 00:12:01,190
request but it's a post request but the

00:11:56,870 --> 00:12:03,710
principle is the same so this brings us

00:12:01,190 --> 00:12:06,380
to the architecture overview so the

00:12:03,710 --> 00:12:08,120
system at as we have it is set up the

00:12:06,380 --> 00:12:10,550
following the things I have just told

00:12:08,120 --> 00:12:13,340
you the HTTP proxy is this PAP the

00:12:10,550 --> 00:12:15,140
Prometheus authentication proxy which

00:12:13,340 --> 00:12:16,640
sits in front of a Prometheus instance

00:12:15,140 --> 00:12:19,700
and the front of an alert manager

00:12:16,640 --> 00:12:21,830
instance and does and is doing these

00:12:19,700 --> 00:12:24,260
label injections we see here the folders

00:12:21,830 --> 00:12:27,170
where premiership Prometheus reads the

00:12:24,260 --> 00:12:30,260
configuration and we have Prometheus

00:12:27,170 --> 00:12:32,390
speaking to the alert manager which is

00:12:30,260 --> 00:12:34,370
also behind the premiere authority of

00:12:32,390 --> 00:12:37,220
indication proxy and we have an engine X

00:12:34,370 --> 00:12:38,450
in front of the system so that's the end

00:12:37,220 --> 00:12:42,110
of next takes care of the TLS for

00:12:38,450 --> 00:12:45,230
example and as it's doing routing based

00:12:42,110 --> 00:12:46,850
on if you call like Prometheus dot your

00:12:45,230 --> 00:12:49,040
domain or if you call alert manage

00:12:46,850 --> 00:12:50,930
object dot your domain the Prometheus

00:12:49,040 --> 00:12:53,120
authentication proxy is then then doing

00:12:50,930 --> 00:12:56,510
HTTP basic off to determine your

00:12:53,120 --> 00:12:57,800
username and if you are if that's a

00:12:56,510 --> 00:13:00,080
valid username and you know the password

00:12:57,800 --> 00:13:01,310
for that and then gets you on the

00:13:00,080 --> 00:13:04,820
prometheus where you can use the

00:13:01,310 --> 00:13:07,420
premises as if it would be your own and

00:13:04,820 --> 00:13:10,790
the road manager of course then alerts

00:13:07,420 --> 00:13:12,620
someone if things are broken in addition

00:13:10,790 --> 00:13:14,210
to what I've told you so far you see

00:13:12,620 --> 00:13:16,550
this black box there which is a black

00:13:14,210 --> 00:13:18,020
box exporter we also provide that which

00:13:16,550 --> 00:13:19,670
brings us to the additional services

00:13:18,020 --> 00:13:22,100
that we have which is currently a black

00:13:19,670 --> 00:13:23,540
box exporter the black box is Porter is

00:13:22,100 --> 00:13:25,010
a very nice thing because we can do a

00:13:23,540 --> 00:13:28,460
lot of things with that we can check if

00:13:25,010 --> 00:13:30,980
our of our TLS certificates are valid we

00:13:28,460 --> 00:13:32,420
can check if things are actually up we

00:13:30,980 --> 00:13:35,270
can get some probing light

00:13:32,420 --> 00:13:38,240
if our website is slow we can check if

00:13:35,270 --> 00:13:42,590
we get a proper HTTP status code so it's

00:13:38,240 --> 00:13:44,620
a super awesome thing it's not if you're

00:13:42,590 --> 00:13:47,360
not familiar with Prometheus at all it's

00:13:44,620 --> 00:13:49,100
not the easiest one to configure but

00:13:47,360 --> 00:13:51,200
still pretty powerful so we want to

00:13:49,100 --> 00:13:53,510
provide that in an easy way so we

00:13:51,200 --> 00:13:55,790
decided to like we did with scrape

00:13:53,510 --> 00:13:58,040
targets we provide a black box targets

00:13:55,790 --> 00:14:00,440
folder in the users home directory where

00:13:58,040 --> 00:14:02,240
we have subfolder folders based on black

00:14:00,440 --> 00:14:05,650
box modules so for example we have an

00:14:02,240 --> 00:14:08,570
HTTP 200 status code checker for the

00:14:05,650 --> 00:14:11,330
ipv4 in version IP before we have a TCP

00:14:08,570 --> 00:14:14,360
connect for ipv6 and users can just drop

00:14:11,330 --> 00:14:16,280
in their their targets and everything

00:14:14,360 --> 00:14:19,010
else is taken care of by the Central

00:14:16,280 --> 00:14:21,320
Prometheus configuration that's the

00:14:19,010 --> 00:14:24,200
appropriate configuration for the HTTP

00:14:21,320 --> 00:14:27,260
200 ipv4 module you get a lengthy

00:14:24,200 --> 00:14:29,480
lengthy job name and there you have as a

00:14:27,260 --> 00:14:31,040
parameter this this is the black box

00:14:29,480 --> 00:14:32,480
exporter configuration you hand over

00:14:31,040 --> 00:14:33,920
which module you want to use those

00:14:32,480 --> 00:14:35,410
modules are predefined we provide a

00:14:33,920 --> 00:14:38,960
couple of predefined modules for that

00:14:35,410 --> 00:14:41,660
and as you already have seen from my

00:14:38,960 --> 00:14:44,420
home directory I get all the Jason

00:14:41,660 --> 00:14:47,770
yellow and yellow files that I provided

00:14:44,420 --> 00:14:50,960
as black box targets for this module

00:14:47,770 --> 00:14:54,080
of course as we use the drop in label

00:14:50,960 --> 00:14:55,760
for our multi-tenancy this would not end

00:14:54,080 --> 00:14:57,830
up being accessible for me because

00:14:55,760 --> 00:15:00,680
another job label is injected so what we

00:14:57,830 --> 00:15:04,330
do we just replace the job label with

00:15:00,680 --> 00:15:06,530
what we actually want to have so

00:15:04,330 --> 00:15:09,110
technically everything runs in this job

00:15:06,530 --> 00:15:11,420
but the metrics end up being in my main

00:15:09,110 --> 00:15:13,390
job that that all that collects all my

00:15:11,420 --> 00:15:17,750
metrics which is accessible for me and

00:15:13,390 --> 00:15:19,670
in addition to that we also add a target

00:15:17,750 --> 00:15:22,940
label black box modules so that the user

00:15:19,670 --> 00:15:24,620
if there is if there is a probe failure

00:15:22,940 --> 00:15:26,840
for example can directly see which

00:15:24,620 --> 00:15:30,230
module it is and also which IP version

00:15:26,840 --> 00:15:35,570
that is so that's the system that we

00:15:30,230 --> 00:15:38,000
have and we have as a conclusion we have

00:15:35,570 --> 00:15:40,310
I think chief the features that we

00:15:38,000 --> 00:15:42,290
wanted we have user separation we have a

00:15:40,310 --> 00:15:44,120
low memory profile we have ansible

00:15:42,290 --> 00:15:46,269
compatibility this this is why we needed

00:15:44,120 --> 00:15:49,389
the SSH access because ansible

00:15:46,269 --> 00:15:51,220
requires as Ajax's as it as it seems to

00:15:49,389 --> 00:15:52,660
drop in labels we of course have

00:15:51,220 --> 00:15:55,420
alerting that was important because

00:15:52,660 --> 00:15:57,399
that's the one of the primary uses of

00:15:55,420 --> 00:16:00,689
the system and I would argue that with

00:15:57,399 --> 00:16:05,019
this just drop in your just drop in your

00:16:00,689 --> 00:16:07,660
your targets we also have an easy way of

00:16:05,019 --> 00:16:09,459
using that we of course have certain

00:16:07,660 --> 00:16:11,439
limitations on the system this is a

00:16:09,459 --> 00:16:14,860
cooperative system we have no resource

00:16:11,439 --> 00:16:16,899
isolation so everyone is asked to be

00:16:14,860 --> 00:16:21,790
nice on the system and just not spam it

00:16:16,899 --> 00:16:24,370
with like ten millions of of targets we

00:16:21,790 --> 00:16:26,499
only have one set of credentials for the

00:16:24,370 --> 00:16:28,899
HTTP basic off in this setup possible

00:16:26,499 --> 00:16:32,110
because for security reasons you cannot

00:16:28,899 --> 00:16:34,689
provide HTTP credentials via a service

00:16:32,110 --> 00:16:36,430
discovery so we have to include them in

00:16:34,689 --> 00:16:38,949
the users job which has has to be done

00:16:36,430 --> 00:16:41,050
by the operation team and of course

00:16:38,949 --> 00:16:43,329
because the center of configuration is

00:16:41,050 --> 00:16:45,730
managed by the operation team we have a

00:16:43,329 --> 00:16:48,879
pre-selected feature set that this the

00:16:45,730 --> 00:16:52,110
system provides but I think we are

00:16:48,879 --> 00:16:54,120
already getting pretty far with that

00:16:52,110 --> 00:16:56,350
everything what I've shown you is

00:16:54,120 --> 00:16:58,089
implemented in a software called promos

00:16:56,350 --> 00:17:01,209
proxy it's on github you can take a look

00:16:58,089 --> 00:17:04,240
at it you can use that you can try it

00:17:01,209 --> 00:17:05,770
out you there is a flag that allows you

00:17:04,240 --> 00:17:09,610
to set the label that you want to use

00:17:05,770 --> 00:17:11,079
for for the multi-tenancy it defaults to

00:17:09,610 --> 00:17:14,049
the job label because that one's most

00:17:11,079 --> 00:17:17,980
likely to be present and it also has

00:17:14,049 --> 00:17:19,659
some some it can also do a TLS on its

00:17:17,980 --> 00:17:21,970
own if you want to do that I personally

00:17:19,659 --> 00:17:23,860
would do that in the nginx but if you

00:17:21,970 --> 00:17:27,010
want you can also provide certificates

00:17:23,860 --> 00:17:28,929
for that and this brings me to the end

00:17:27,010 --> 00:17:32,049
of my presentation and it would be open

00:17:28,929 --> 00:17:32,500
to questions if there are any cool thank

00:17:32,049 --> 00:17:35,480
you

00:17:32,500 --> 00:17:38,490
[Applause]

00:17:35,480 --> 00:17:40,650
so first first question would just be

00:17:38,490 --> 00:17:42,600
one for me you mentioned in the

00:17:40,650 --> 00:17:44,370
beginning some properties of your users

00:17:42,600 --> 00:17:46,710
but what is the actual environment where

00:17:44,370 --> 00:17:48,840
you're using this this are private

00:17:46,710 --> 00:17:51,360
servers most most users have their

00:17:48,840 --> 00:17:52,920
private service and we just want to I

00:17:51,360 --> 00:17:54,360
mean if you're hosting your own website

00:17:52,920 --> 00:17:56,040
for example if or if you are hosting

00:17:54,360 --> 00:17:57,780
your own mail server then you want to

00:17:56,040 --> 00:17:59,820
have some some alerting if things go

00:17:57,780 --> 00:18:02,550
down so these most of these servers are

00:17:59,820 --> 00:18:03,750
private servers so it's not another

00:18:02,550 --> 00:18:05,610
corporate environment it's like some

00:18:03,750 --> 00:18:07,680
collective you're running with friends

00:18:05,610 --> 00:18:10,620
yeah exactly yeah this is also why we

00:18:07,680 --> 00:18:12,450
want to have the setup as low memory as

00:18:10,620 --> 00:18:15,090
possible so that we can keep the the

00:18:12,450 --> 00:18:18,210
system cheap because that's an

00:18:15,090 --> 00:18:19,980
additional cost that in ideally you

00:18:18,210 --> 00:18:21,570
would never need but of course at the

00:18:19,980 --> 00:18:24,540
idea world we have monitoring because

00:18:21,570 --> 00:18:26,760
the world is not ideal thanks for

00:18:24,540 --> 00:18:28,260
sharing do you have any isolation for

00:18:26,760 --> 00:18:31,140
alerting templates because those can

00:18:28,260 --> 00:18:33,570
execute arbitrary problems well we

00:18:31,140 --> 00:18:37,890
provide one central alerting template

00:18:33,570 --> 00:18:41,310
that we have written that should not

00:18:37,890 --> 00:18:43,350
leak any information but we have so we

00:18:41,310 --> 00:18:45,120
have one one pre provided a lodging

00:18:43,350 --> 00:18:47,370
template that we use that is not user

00:18:45,120 --> 00:18:49,230
definable alerting templates not alert

00:18:47,370 --> 00:18:50,940
notification template so inside a new

00:18:49,230 --> 00:18:53,060
version rule in those annotations and

00:18:50,940 --> 00:18:55,860
labels you can run arbitrary from QL I

00:18:53,060 --> 00:19:03,330
should check if that actually locked

00:18:55,860 --> 00:19:12,810
down if not it will be very soon anyone

00:19:03,330 --> 00:19:15,030
else hey thanks for the talk so I wanted

00:19:12,810 --> 00:19:19,290
to ask about how do you protect from

00:19:15,030 --> 00:19:22,410
like bad from QL in for example alert

00:19:19,290 --> 00:19:24,630
Andrew because our our for example for

00:19:22,410 --> 00:19:27,000
some like bad target because when like

00:19:24,630 --> 00:19:29,190
Prometheus starts it checks all the if

00:19:27,000 --> 00:19:33,180
correctly if configuration is corrective

00:19:29,190 --> 00:19:34,620
and if it's not it will just yeah so the

00:19:33,180 --> 00:19:36,240
users provide the rules in their home

00:19:34,620 --> 00:19:38,580
directories in the rules folder and we

00:19:36,240 --> 00:19:41,250
parse them into a central central place

00:19:38,580 --> 00:19:44,040
with the within modifications we made we

00:19:41,250 --> 00:19:45,900
only parse the rules file if prompt to

00:19:44,040 --> 00:19:47,820
tells us it's a valid rule file if not

00:19:45,900 --> 00:19:48,710
we ignore it and notify the user that

00:19:47,820 --> 00:19:53,600
something is wrong

00:19:48,710 --> 00:20:00,279
so we should always ever get valid rules

00:19:53,600 --> 00:20:00,279
for the Central Prometheus anyone else

00:20:03,639 --> 00:20:17,119
three - Oh what about dashboards your

00:20:14,419 --> 00:20:19,119
users also asking you to provide some

00:20:17,119 --> 00:20:21,049
kind of way of visualizing their metrics

00:20:19,119 --> 00:20:23,269
currently we only have the Prometheus

00:20:21,049 --> 00:20:24,529
front-end for that we don't have for

00:20:23,269 --> 00:20:26,869
example a graph on oh we have thought

00:20:24,529 --> 00:20:29,419
about adding a gravano to the system but

00:20:26,869 --> 00:20:32,059
the primary primary focus of this system

00:20:29,419 --> 00:20:34,639
right now is alerting is making sure

00:20:32,059 --> 00:20:36,350
that you can sleep safe so we currently

00:20:34,639 --> 00:20:37,190
do not have a dashboarding solution

00:20:36,350 --> 00:20:38,929
available yet

00:20:37,190 --> 00:20:40,279
but that's something that we are

00:20:38,929 --> 00:20:48,639
thinking about if we want to provide

00:20:40,279 --> 00:20:51,050
that as well as part of the system okay

00:20:48,639 --> 00:20:57,339
Thank You Eunice you're welcome

00:20:51,050 --> 00:20:57,339
[Applause]

00:20:58,060 --> 00:21:00,120

YouTube URL: https://www.youtube.com/watch?v=AO_I1oVcqBM


