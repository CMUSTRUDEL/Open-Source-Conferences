Title: PromCon Online 2020 - Lightning Talks Day 3
Publication date: 2020-07-27
Playlist: PromCon Online 2020
Description: 
	
Captions: 
	00:00:01,770 --> 00:00:04,940
[Music]

00:00:14,639 --> 00:00:18,000
hi everyone my name is nathan moore i am

00:00:16,800 --> 00:00:20,160
the director of the performance

00:00:18,000 --> 00:00:21,760
engineering team here at stackpath

00:00:20,160 --> 00:00:23,760
stackpath for those who may or may not

00:00:21,760 --> 00:00:25,359
know is a very large global content

00:00:23,760 --> 00:00:27,039
delivery network so we have a very very

00:00:25,359 --> 00:00:28,080
large presence with just thousands and

00:00:27,039 --> 00:00:30,960
thousands of servers

00:00:28,080 --> 00:00:32,160
all throughout the world today's talk is

00:00:30,960 --> 00:00:34,160
about

00:00:32,160 --> 00:00:35,280
automating and augmenting our capacity

00:00:34,160 --> 00:00:38,800
planning in other words

00:00:35,280 --> 00:00:41,280
where do we need to put servers uh how

00:00:38,800 --> 00:00:42,559
badly are our servers being used how

00:00:41,280 --> 00:00:45,120
hard are they getting run

00:00:42,559 --> 00:00:46,640
where do we need to install new servers

00:00:45,120 --> 00:00:48,960
and in order to do that

00:00:46,640 --> 00:00:51,199
we have a tremendous amount of data that

00:00:48,960 --> 00:00:54,640
we collect about every single server

00:00:51,199 --> 00:00:57,600
and we use that to build out a direct

00:00:54,640 --> 00:00:58,719
predictive model trying to tell us the

00:00:57,600 --> 00:01:00,800
answer to the question of

00:00:58,719 --> 00:01:01,920
where is it that we should put where is

00:01:00,800 --> 00:01:03,520
it that we're running hot where's that

00:01:01,920 --> 00:01:05,360
we're running cold where do we need

00:01:03,520 --> 00:01:13,200
more capacity where can we get away with

00:01:05,360 --> 00:01:15,040
less capacity

00:01:13,200 --> 00:01:16,479
so we are the global presence and this

00:01:15,040 --> 00:01:18,720
means that we have

00:01:16,479 --> 00:01:20,640
about oh i don't know 30 odd points of

00:01:18,720 --> 00:01:21,280
presence a point of presence is called a

00:01:20,640 --> 00:01:22,880
pop

00:01:21,280 --> 00:01:24,720
and as you can see from the map they are

00:01:22,880 --> 00:01:27,200
properly globally distributed now

00:01:24,720 --> 00:01:27,920
in every pop we have a prometheus

00:01:27,200 --> 00:01:29,439
instance

00:01:27,920 --> 00:01:31,439
and that prometheus instance is

00:01:29,439 --> 00:01:33,520
recording all the data that

00:01:31,439 --> 00:01:35,280
comes off of all the servers within that

00:01:33,520 --> 00:01:36,960
pop so it's telling us a tremendous

00:01:35,280 --> 00:01:38,720
amount of hardware and serving

00:01:36,960 --> 00:01:40,479
statistics it tells us the number of

00:01:38,720 --> 00:01:42,640
requests per second that

00:01:40,479 --> 00:01:45,759
the servers are running it tells us all

00:01:42,640 --> 00:01:45,759
manner of information

00:01:48,479 --> 00:01:54,240
so this kind of information includes

00:01:52,159 --> 00:01:56,079
the cpu utilization disk utilization

00:01:54,240 --> 00:01:57,680
active connections and bandwidth served

00:01:56,079 --> 00:01:59,439
in addition to the

00:01:57,680 --> 00:02:00,880
requests per second that that server is

00:01:59,439 --> 00:02:02,479
actually pushing out

00:02:00,880 --> 00:02:04,240
now i want to be a little bit careful to

00:02:02,479 --> 00:02:06,799
comment that

00:02:04,240 --> 00:02:08,640
we have run a custom load balancer and

00:02:06,799 --> 00:02:09,599
our goal of our custom load balancer is

00:02:08,640 --> 00:02:12,080
to do things like

00:02:09,599 --> 00:02:13,920
identify very very popular objects and

00:02:12,080 --> 00:02:15,360
if an object is very popular then it

00:02:13,920 --> 00:02:18,080
must get served by multiple

00:02:15,360 --> 00:02:18,879
servers we don't want it on just one

00:02:18,080 --> 00:02:22,080
whereas

00:02:18,879 --> 00:02:23,680
a very a less popular object we can keep

00:02:22,080 --> 00:02:25,680
it only and make sure it only serves

00:02:23,680 --> 00:02:27,760
from one server as opposed to a bunch

00:02:25,680 --> 00:02:29,280
but this means that our serving patterns

00:02:27,760 --> 00:02:31,440
are very distributed they

00:02:29,280 --> 00:02:32,720
vary not every server is exactly the

00:02:31,440 --> 00:02:33,760
same as the other it will have a

00:02:32,720 --> 00:02:35,840
different

00:02:33,760 --> 00:02:38,160
utilization profile on the server next

00:02:35,840 --> 00:02:38,160
to it

00:02:41,120 --> 00:02:45,599
what we want to do is we want to take

00:02:42,959 --> 00:02:47,519
all this information and we want to use

00:02:45,599 --> 00:02:49,360
use it to make a prediction we it's

00:02:47,519 --> 00:02:51,280
insufficient just to note that oh we

00:02:49,360 --> 00:02:52,319
have so many rps at this given point in

00:02:51,280 --> 00:02:54,400
time we want to know

00:02:52,319 --> 00:02:56,000
well how does that correlate with how

00:02:54,400 --> 00:02:58,000
the machine is doing because we know we

00:02:56,000 --> 00:02:59,920
are in a varied infrastructure

00:02:58,000 --> 00:03:01,680
so prometheus does come with this lovely

00:02:59,920 --> 00:03:03,280
built-in linear estimate function

00:03:01,680 --> 00:03:04,879
and the ideal case is that we would be

00:03:03,280 --> 00:03:07,360
able to use prometheus

00:03:04,879 --> 00:03:08,720
and keep all the logic in-house and

00:03:07,360 --> 00:03:10,480
unfortunately

00:03:08,720 --> 00:03:12,480
the way that the linear estimate

00:03:10,480 --> 00:03:12,959
function works is it predicts strictly

00:03:12,480 --> 00:03:15,680
against

00:03:12,959 --> 00:03:17,040
time it does not allow us to predict

00:03:15,680 --> 00:03:19,200
against multiple

00:03:17,040 --> 00:03:20,080
vectors it only allows us to predict a

00:03:19,200 --> 00:03:23,120
point in time

00:03:20,080 --> 00:03:24,400
given this one range vector so for

00:03:23,120 --> 00:03:27,200
instance

00:03:24,400 --> 00:03:29,120
if i was interested in my the

00:03:27,200 --> 00:03:31,120
transactions per second for my disk i

00:03:29,120 --> 00:03:33,360
can use the predict linear to say

00:03:31,120 --> 00:03:34,159
given the past so many days worth of

00:03:33,360 --> 00:03:36,879
history

00:03:34,159 --> 00:03:38,239
what is my likely disk transaction per

00:03:36,879 --> 00:03:40,239
section going to be

00:03:38,239 --> 00:03:42,319
tomorrow and it will tell me that

00:03:40,239 --> 00:03:44,080
particular value but unfortunately this

00:03:42,319 --> 00:03:45,360
only goes across time and what we want

00:03:44,080 --> 00:03:48,000
to do is correlate

00:03:45,360 --> 00:03:49,680
against cpu utilization disk utilization

00:03:48,000 --> 00:03:50,239
and so on and so the predict linear

00:03:49,680 --> 00:03:53,040
function

00:03:50,239 --> 00:03:53,040
cannot do that

00:03:55,840 --> 00:03:59,599
so instead of using the linear estimate

00:03:57,599 --> 00:04:00,000
function we can take advantage of the

00:03:59,599 --> 00:04:02,480
data

00:04:00,000 --> 00:04:03,920
export capability of prometheus query it

00:04:02,480 --> 00:04:06,080
via api

00:04:03,920 --> 00:04:08,400
and then export that into another

00:04:06,080 --> 00:04:09,760
program for further processing

00:04:08,400 --> 00:04:11,200
so there's a couple things that we want

00:04:09,760 --> 00:04:13,120
to take advantage of here which

00:04:11,200 --> 00:04:14,879
fortunately the api gives us

00:04:13,120 --> 00:04:18,000
so in this particular case i'm using the

00:04:14,879 --> 00:04:20,160
query range api and you'll notice that

00:04:18,000 --> 00:04:21,840
independent of the query i can specify

00:04:20,160 --> 00:04:24,479
my spark my start time

00:04:21,840 --> 00:04:25,600
my end time and my step time now what

00:04:24,479 --> 00:04:27,759
does this mean

00:04:25,600 --> 00:04:29,680
if i make different queries but every

00:04:27,759 --> 00:04:30,720
single time passing in the exact same

00:04:29,680 --> 00:04:33,199
start time the same

00:04:30,720 --> 00:04:34,880
end time and the same step then what

00:04:33,199 --> 00:04:37,199
happens is the returned

00:04:34,880 --> 00:04:38,880
values the return values are always

00:04:37,199 --> 00:04:40,560
taken at the exact same

00:04:38,880 --> 00:04:42,240
time interval so if you look at the

00:04:40,560 --> 00:04:44,720
return json

00:04:42,240 --> 00:04:46,639
that every single time stamp on there is

00:04:44,720 --> 00:04:48,880
going to be the exact same

00:04:46,639 --> 00:04:50,720
independent of my query because i have

00:04:48,880 --> 00:04:52,160
always specified the exact same start

00:04:50,720 --> 00:04:54,800
and in step

00:04:52,160 --> 00:04:56,320
so because of that i can use the time

00:04:54,800 --> 00:04:59,199
timestamp as a key

00:04:56,320 --> 00:05:01,199
and i can line up all of my values using

00:04:59,199 --> 00:05:10,240
the same exact timestamp

00:05:01,199 --> 00:05:13,039
as a key

00:05:10,240 --> 00:05:13,680
what this means is that once i can do

00:05:13,039 --> 00:05:15,440
this

00:05:13,680 --> 00:05:17,360
then all i have to do is write a new

00:05:15,440 --> 00:05:20,639
little script which is going to make

00:05:17,360 --> 00:05:21,919
multiple api queries one per range

00:05:20,639 --> 00:05:23,280
vector that i care about

00:05:21,919 --> 00:05:24,720
remember i have at least four or five of

00:05:23,280 --> 00:05:26,960
them like the disk tps active

00:05:24,720 --> 00:05:28,240
connections bandwidth used in cpus

00:05:26,960 --> 00:05:30,880
every single one of those is an

00:05:28,240 --> 00:05:34,479
individual query so i go ahead and i

00:05:30,880 --> 00:05:36,400
pull that out extract via the json the

00:05:34,479 --> 00:05:38,240
time stamps put them all back together

00:05:36,400 --> 00:05:40,080
by the common timestamp and then export

00:05:38,240 --> 00:05:41,039
that all out by a comma separated value

00:05:40,080 --> 00:05:43,919
file

00:05:41,039 --> 00:05:43,919
not a problem

00:05:47,120 --> 00:05:52,160
what this in effect means is that i can

00:05:49,440 --> 00:05:52,479
now import this csv file into a program

00:05:52,160 --> 00:05:54,880
like

00:05:52,479 --> 00:05:56,560
r for proper multivariate analysis and

00:05:54,880 --> 00:05:59,440
so all that i'm asking are to do

00:05:56,560 --> 00:06:01,199
i wanted to clean the data set calculate

00:05:59,440 --> 00:06:01,919
create the actual linear regression

00:06:01,199 --> 00:06:03,759
model

00:06:01,919 --> 00:06:05,360
but then because i have this varied

00:06:03,759 --> 00:06:07,759
infrastructure i want to look at the

00:06:05,360 --> 00:06:10,080
99th percentile utilization numbers for

00:06:07,759 --> 00:06:11,600
all of my utilization numbers then i

00:06:10,080 --> 00:06:15,440
have to apply that to the linear

00:06:11,600 --> 00:06:15,440
regression and export out the results

00:06:18,000 --> 00:06:21,039
and this gives me a predicted per server

00:06:20,240 --> 00:06:23,360
value

00:06:21,039 --> 00:06:25,039
multiply that by the number of servers

00:06:23,360 --> 00:06:26,880
per pop and all of a sudden i have that

00:06:25,039 --> 00:06:28,960
pops capacity

00:06:26,880 --> 00:06:31,120
and now i have a predictive model

00:06:28,960 --> 00:06:34,160
telling me how well i'm doing

00:06:31,120 --> 00:06:36,080
and what it is that i should expect

00:06:34,160 --> 00:06:37,199
hello everybody i'm matthias louisville

00:06:36,080 --> 00:06:39,840
software developer

00:06:37,199 --> 00:06:41,039
from berlin working for redhead and i'm

00:06:39,840 --> 00:06:44,240
a thanos maintainer

00:06:41,039 --> 00:06:45,759
working on prometheus operator and q

00:06:44,240 --> 00:06:47,600
prometheus for example

00:06:45,759 --> 00:06:49,680
so first of all you might know me from

00:06:47,600 --> 00:06:52,720
github so this is what i do

00:06:49,680 --> 00:06:55,360
this way you can find me so feel free to

00:06:52,720 --> 00:06:55,759
to reach out there um obviously you can

00:06:55,360 --> 00:06:59,919
also

00:06:55,759 --> 00:07:02,319
find me on twitter slash matze

00:06:59,919 --> 00:07:04,319
so that's like where you can find me if

00:07:02,319 --> 00:07:07,440
you have any questions on this talk

00:07:04,319 --> 00:07:10,240
today i wanna as with the last um

00:07:07,440 --> 00:07:11,360
promethea as with the last prom con i

00:07:10,240 --> 00:07:14,560
wanna talk about

00:07:11,360 --> 00:07:16,720
uh multi-burn rate alerts um and these

00:07:14,560 --> 00:07:19,919
are quite interesting because they

00:07:16,720 --> 00:07:23,039
allow us to um alert on

00:07:19,919 --> 00:07:25,599
our slos uh in a very meaningful way

00:07:23,039 --> 00:07:28,160
so that we kind of like take two error

00:07:25,599 --> 00:07:31,680
rate error burn rates and combine them

00:07:28,160 --> 00:07:34,720
um to reduce the noise and really um

00:07:31,680 --> 00:07:36,560
kind of like um make sure that we

00:07:34,720 --> 00:07:38,080
really only alert when there's actually

00:07:36,560 --> 00:07:41,599
something happening which will

00:07:38,080 --> 00:07:43,759
reduce alert fatigue and allow us to um

00:07:41,599 --> 00:07:45,599
really get the attention when necessary

00:07:43,759 --> 00:07:46,639
and if not necessary then we leave the

00:07:45,599 --> 00:07:48,960
people alone

00:07:46,639 --> 00:07:50,639
um because it's like not that big of a

00:07:48,960 --> 00:07:51,599
deal if there are like some errors

00:07:50,639 --> 00:07:54,160
happening

00:07:51,599 --> 00:07:55,599
every now and then right so from this

00:07:54,160 --> 00:07:58,319
website you can see

00:07:55,599 --> 00:07:58,960
um there are quite some things to

00:07:58,319 --> 00:08:00,400
consider

00:07:58,960 --> 00:08:02,319
implementing this it's actually

00:08:00,400 --> 00:08:05,840
prometheus alert

00:08:02,319 --> 00:08:07,199
um and actually uh at the last prom con

00:08:05,840 --> 00:08:09,360
already shown this

00:08:07,199 --> 00:08:10,720
um but i extended it a bit and that's

00:08:09,360 --> 00:08:13,039
why i'm giving this talk

00:08:10,720 --> 00:08:14,400
so at the last prom con i have shown

00:08:13,039 --> 00:08:16,960
this errors

00:08:14,400 --> 00:08:17,919
panel and you can kind of say i want to

00:08:16,960 --> 00:08:21,360
have

00:08:17,919 --> 00:08:24,800
this amount of unavailability or

00:08:21,360 --> 00:08:27,039
availability as a target and you can

00:08:24,800 --> 00:08:30,240
define this here so you can say i want

00:08:27,039 --> 00:08:32,800
to have like 99.5

00:08:30,240 --> 00:08:35,919
availability and that would be 3 hours

00:08:32,800 --> 00:08:38,800
and 36 minutes unavailability in 30 days

00:08:35,919 --> 00:08:41,200
and you want to alert on the metric http

00:08:38,800 --> 00:08:41,839
request total i often put in the engine

00:08:41,200 --> 00:08:45,040
x

00:08:41,839 --> 00:08:46,320
controller requests total so that i kind

00:08:45,040 --> 00:08:48,399
of blurred

00:08:46,320 --> 00:08:50,720
as early in the stack as possible on the

00:08:48,399 --> 00:08:53,120
load balancer kind of

00:08:50,720 --> 00:08:54,000
so close to the user as possible right

00:08:53,120 --> 00:08:58,080
you can put in some

00:08:54,000 --> 00:09:00,800
selectors like ingress

00:08:58,080 --> 00:09:02,640
this app and for the people who want

00:09:00,800 --> 00:09:04,399
some more advanced things they can

00:09:02,640 --> 00:09:06,800
change the alert name the alert message

00:09:04,399 --> 00:09:09,920
and can also if you have status

00:09:06,800 --> 00:09:12,240
equals 500 instead of code equals 500

00:09:09,920 --> 00:09:14,399
you can kind of overrate this here

00:09:12,240 --> 00:09:15,440
but let's keep it simple and we can

00:09:14,399 --> 00:09:17,760
generate this

00:09:15,440 --> 00:09:19,360
and we can see okay we get all of these

00:09:17,760 --> 00:09:22,000
nice alerts

00:09:19,360 --> 00:09:23,279
right at the very top and they kind of

00:09:22,000 --> 00:09:25,120
are based on top of

00:09:23,279 --> 00:09:26,880
these emerging rules which i defined for

00:09:25,120 --> 00:09:30,399
that on here so what you can do

00:09:26,880 --> 00:09:33,600
is you can just copy the entire thing

00:09:30,399 --> 00:09:35,120
into your clipboard and then import them

00:09:33,600 --> 00:09:36,800
in prometheus or put them into a

00:09:35,120 --> 00:09:39,360
prometheus rule

00:09:36,800 --> 00:09:40,880
custom resource um and they will be

00:09:39,360 --> 00:09:43,360
loaded by prometheus

00:09:40,880 --> 00:09:45,360
and then alerted on for your application

00:09:43,360 --> 00:09:47,839
so that's very neat

00:09:45,360 --> 00:09:48,880
the only thing missing or like another

00:09:47,839 --> 00:09:51,200
thing missing

00:09:48,880 --> 00:09:53,040
and that i wanted to add is latency so

00:09:51,200 --> 00:09:54,800
you might want to alert on too many

00:09:53,040 --> 00:09:56,959
errors but you also want to alert if

00:09:54,800 --> 00:09:58,720
something is too slow right so in this

00:09:56,959 --> 00:10:01,680
case we would alert on

00:09:58,720 --> 00:10:03,120
99 of our requests should be faster than

00:10:01,680 --> 00:10:05,279
100 milliseconds

00:10:03,120 --> 00:10:06,480
so let's change it to 500 milliseconds

00:10:05,279 --> 00:10:08,480
for this example

00:10:06,480 --> 00:10:10,000
and then again using the http request

00:10:08,480 --> 00:10:12,160
duration seconds which you know

00:10:10,000 --> 00:10:13,120
for most prometheus instrumented

00:10:12,160 --> 00:10:15,200
applications

00:10:13,120 --> 00:10:16,720
you can change the same selectors i've

00:10:15,200 --> 00:10:18,000
already shown that and let's go ahead

00:10:16,720 --> 00:10:21,120
and generate this

00:10:18,000 --> 00:10:22,640
it will generate a similar thing um but

00:10:21,120 --> 00:10:24,720
this time it will alert

00:10:22,640 --> 00:10:26,160
when the application is actually too

00:10:24,720 --> 00:10:29,360
slow overall

00:10:26,160 --> 00:10:31,279
in 28 days again hopefully this is quite

00:10:29,360 --> 00:10:32,000
helpful to you the entire source is on

00:10:31,279 --> 00:10:34,399
github

00:10:32,000 --> 00:10:35,360
you can find it here on prompt tools dev

00:10:34,399 --> 00:10:39,600
and this is

00:10:35,360 --> 00:10:42,160
a building on top of the so libsonnet

00:10:39,600 --> 00:10:44,320
project which is actually using jsonnet

00:10:42,160 --> 00:10:44,800
to generate these recording rules on the

00:10:44,320 --> 00:10:46,959
fly

00:10:44,800 --> 00:10:48,240
and that's all stay safe and hopefully

00:10:46,959 --> 00:10:51,680
see you soon bye-bye

00:10:48,240 --> 00:10:54,160
nice thank you next up we have julian

00:10:51,680 --> 00:11:00,079
pivotal talking about five better tips

00:10:54,160 --> 00:11:03,519
to use prometheus service discovery

00:11:00,079 --> 00:11:05,440
hello everyone i will tell you five tips

00:11:03,519 --> 00:11:07,440
to better use the promotive service

00:11:05,440 --> 00:11:09,920
discovery mechanism

00:11:07,440 --> 00:11:11,600
so first of all what is a discovery in

00:11:09,920 --> 00:11:13,360
primitives so service coverage in

00:11:11,600 --> 00:11:15,760
parameters is used to discover

00:11:13,360 --> 00:11:17,040
targets which means that when you want

00:11:15,760 --> 00:11:20,240
to scrape your

00:11:17,040 --> 00:11:22,399
pods your containers your vms

00:11:20,240 --> 00:11:24,399
we will directly talk to the source of

00:11:22,399 --> 00:11:27,519
truth to actually discover

00:11:24,399 --> 00:11:28,640
which ones we should monitor so

00:11:27,519 --> 00:11:30,720
there are two kinds of service

00:11:28,640 --> 00:11:32,720
discoveries the ones which will like

00:11:30,720 --> 00:11:34,399
listen to the uh source of throat all

00:11:32,720 --> 00:11:35,839
the time like console and when there is

00:11:34,399 --> 00:11:37,839
an update consolidated

00:11:35,839 --> 00:11:39,440
hey there is an update and the other

00:11:37,839 --> 00:11:42,079
ones which will like

00:11:39,440 --> 00:11:42,800
run like every 30 seconds every one

00:11:42,079 --> 00:11:44,399
minute

00:11:42,800 --> 00:11:46,320
that is a reasonable reason for me if

00:11:44,399 --> 00:11:50,000
you have lots of examples like

00:11:46,320 --> 00:11:54,079
gce ec2 console kubernetes dns

00:11:50,000 --> 00:11:55,680
etc a classic example is like this like

00:11:54,079 --> 00:11:57,839
promoters should connect to a cloud

00:11:55,680 --> 00:11:59,600
provider and then after

00:11:57,839 --> 00:12:02,160
that configuration so this is for the

00:11:59,600 --> 00:12:04,160
node exporter you will actually use what

00:12:02,160 --> 00:12:06,480
is called reliable configuration

00:12:04,160 --> 00:12:08,560
to actually like tell point is a take

00:12:06,480 --> 00:12:08,800
the labels from the service discovery

00:12:08,560 --> 00:12:11,200
and

00:12:08,800 --> 00:12:13,279
i'll tear them so i can like use another

00:12:11,200 --> 00:12:14,959
address than the default one or add

00:12:13,279 --> 00:12:18,320
extra labels in this case

00:12:14,959 --> 00:12:19,920
we are taking the ipv6 instead of the

00:12:18,320 --> 00:12:22,160
ipv4 that we will get by default and

00:12:19,920 --> 00:12:23,839
then we open an extra port to the

00:12:22,160 --> 00:12:26,079
configuration that we get from the cloud

00:12:23,839 --> 00:12:27,519
provider so this is the classic pattern

00:12:26,079 --> 00:12:29,120
service recovery and reliable

00:12:27,519 --> 00:12:31,519
configuration

00:12:29,120 --> 00:12:32,480
the first tip is that the alert manager

00:12:31,519 --> 00:12:35,440
configurations

00:12:32,480 --> 00:12:36,480
they are the rediscoveries which means

00:12:35,440 --> 00:12:38,800
that

00:12:36,480 --> 00:12:40,399
you can automatically discover your

00:12:38,800 --> 00:12:42,480
alert managers

00:12:40,399 --> 00:12:44,320
and you don't need to do the static

00:12:42,480 --> 00:12:46,160
configuration for them which is kind of

00:12:44,320 --> 00:12:47,920
confusing because by default

00:12:46,160 --> 00:12:49,839
the the point is the camera that we ship

00:12:47,920 --> 00:12:52,880
with politics is actually telling only

00:12:49,839 --> 00:12:53,440
the static configuration so you can use

00:12:52,880 --> 00:12:54,880
the same

00:12:53,440 --> 00:12:57,680
service discoveries for your alert

00:12:54,880 --> 00:13:00,720
managers the second theme is that

00:12:57,680 --> 00:13:02,720
all the service discoveries are lists so

00:13:00,720 --> 00:13:04,720
if you have multiple in this case

00:13:02,720 --> 00:13:06,720
digital ocean

00:13:04,720 --> 00:13:09,040
accounts you can use all of them in the

00:13:06,720 --> 00:13:11,760
same job if you wish to

00:13:09,040 --> 00:13:12,800
if you have multiple uh i don't know

00:13:11,760 --> 00:13:15,360
kubernetes

00:13:12,800 --> 00:13:15,839
cluster or namespace you can also use

00:13:15,360 --> 00:13:18,480
all of

00:13:15,839 --> 00:13:20,000
multiple of them in the same service

00:13:18,480 --> 00:13:23,040
cavery configuration

00:13:20,000 --> 00:13:26,320
so you are not buying to one job

00:13:23,040 --> 00:13:29,360
is one service call reconfiguration

00:13:26,320 --> 00:13:29,760
the third tip is the same but it's also

00:13:29,360 --> 00:13:32,480
that

00:13:29,760 --> 00:13:33,279
you can have multiple kinds of service

00:13:32,480 --> 00:13:36,480
coverage for

00:13:33,279 --> 00:13:37,920
one job so you can for example in the

00:13:36,480 --> 00:13:40,160
same script configuration

00:13:37,920 --> 00:13:40,959
have a static configuration and have a

00:13:40,160 --> 00:13:45,120
gc

00:13:40,959 --> 00:13:47,680
configuration and have a digital config

00:13:45,120 --> 00:13:50,160
configuration as well so you can mix

00:13:47,680 --> 00:13:52,800
multiple service coverage into one job

00:13:50,160 --> 00:13:55,440
if you want to

00:13:52,800 --> 00:13:57,040
the fourth tip is that you can reuse the

00:13:55,440 --> 00:13:59,440
service discovery so

00:13:57,040 --> 00:14:01,199
obviously you can do it but if you do it

00:13:59,440 --> 00:14:02,399
like this so in this case i have the

00:14:01,199 --> 00:14:05,519
digital ocean

00:14:02,399 --> 00:14:06,079
sdconfigs which is bigger token and then

00:14:05,519 --> 00:14:08,480
my

00:14:06,079 --> 00:14:10,079
bigger token if it is the same

00:14:08,480 --> 00:14:12,639
configuration exactly

00:14:10,079 --> 00:14:14,000
between multiple script jobs it must be

00:14:12,639 --> 00:14:16,399
exactly the same

00:14:14,000 --> 00:14:17,839
then prometus will actually reuse them

00:14:16,399 --> 00:14:20,079
in the background so

00:14:17,839 --> 00:14:22,079
instead of querying the api twice

00:14:20,079 --> 00:14:24,160
because it is in two different jobs it

00:14:22,079 --> 00:14:27,120
will only query the api once

00:14:24,160 --> 00:14:29,040
which should be very effective and it

00:14:27,120 --> 00:14:31,040
will not overload your source of through

00:14:29,040 --> 00:14:33,199
to this multiple request

00:14:31,040 --> 00:14:34,720
to see that it is actually working you

00:14:33,199 --> 00:14:35,680
need to enable the debug logs and then

00:14:34,720 --> 00:14:38,240
you will get a line

00:14:35,680 --> 00:14:39,760
and at the end of the line you will see

00:14:38,240 --> 00:14:41,440
discovery manager scripts

00:14:39,760 --> 00:14:43,279
starting provider and then you have the

00:14:41,440 --> 00:14:45,519
subs which are the jobs

00:14:43,279 --> 00:14:46,560
for which this service provider will be

00:14:45,519 --> 00:14:48,959
actually used

00:14:46,560 --> 00:14:51,760
so in this case we see subs equal node

00:14:48,959 --> 00:14:53,680
and the advisor

00:14:51,760 --> 00:14:55,360
and the last tip i want to tell you is

00:14:53,680 --> 00:14:57,360
that the file sd so

00:14:55,360 --> 00:14:58,720
which is the generic server discovery in

00:14:57,360 --> 00:15:01,120
prometheus

00:14:58,720 --> 00:15:02,480
it can contain configuration labels so

00:15:01,120 --> 00:15:04,240
this is basically the

00:15:02,480 --> 00:15:06,720
promotions configuration and then you

00:15:04,240 --> 00:15:07,920
can have targets.yaml files for example

00:15:06,720 --> 00:15:10,720
or json files

00:15:07,920 --> 00:15:12,160
but you can then include the special

00:15:10,720 --> 00:15:13,680
labels that you can have

00:15:12,160 --> 00:15:15,600
you can check the promise configuration

00:15:13,680 --> 00:15:17,680
but you can like change the scheme

00:15:15,600 --> 00:15:19,680
change the matrix path and change the

00:15:17,680 --> 00:15:22,720
http parameters for example

00:15:19,680 --> 00:15:24,800
individually for each target or if

00:15:22,720 --> 00:15:26,240
each target grows at you one so with

00:15:24,800 --> 00:15:28,959
this single frame

00:15:26,240 --> 00:15:29,360
i am able to configure an https target

00:15:28,959 --> 00:15:31,279
with

00:15:29,360 --> 00:15:33,279
a slash matrix two instead of slash

00:15:31,279 --> 00:15:34,880
matrix and through equal bar and then

00:15:33,279 --> 00:15:37,360
the second one reaches f

00:15:34,880 --> 00:15:38,720
uh fu equal part two but we still use

00:15:37,360 --> 00:15:42,880
the default http

00:15:38,720 --> 00:15:45,680
and the default slash matrix endpoint

00:15:42,880 --> 00:15:46,880
so those were my five trips for you for

00:15:45,680 --> 00:15:50,800
service queries

00:15:46,880 --> 00:15:50,800
thank you for listening bye

00:15:51,360 --> 00:15:56,720
okay thank you

00:15:54,480 --> 00:15:58,079
the next talk which i kind of hinted at

00:15:56,720 --> 00:15:59,040
in one of the breakout sessions

00:15:58,079 --> 00:16:02,160
yesterday

00:15:59,040 --> 00:16:03,279
is on prometheus in the ore ecosystem by

00:16:02,160 --> 00:16:05,440
aaron jacobs

00:16:03,279 --> 00:16:06,880
which might also be a little useful and

00:16:05,440 --> 00:16:08,800
looking at nathan's talk which the first

00:16:06,880 --> 00:16:11,040
one he gave because he also used

00:16:08,800 --> 00:16:11,040
war

00:16:12,880 --> 00:16:17,759
hi my name is aaron jacobs and i'm going

00:16:15,839 --> 00:16:18,560
to be talking about prometheus in the r

00:16:17,759 --> 00:16:21,440
ecosystem

00:16:18,560 --> 00:16:23,279
which i think would probably be a topic

00:16:21,440 --> 00:16:25,839
not many participants will know that

00:16:23,279 --> 00:16:25,839
much about

00:16:26,480 --> 00:16:30,800
so i should say i'm a data scientist

00:16:28,639 --> 00:16:31,279
based in toronto and i work at crescendo

00:16:30,800 --> 00:16:32,800
which

00:16:31,279 --> 00:16:34,560
is a company that sort of provides

00:16:32,800 --> 00:16:36,079
back-end technology services

00:16:34,560 --> 00:16:37,920
lots of them related to statistical

00:16:36,079 --> 00:16:41,839
modeling to online

00:16:37,920 --> 00:16:43,279
sports books which take wagers on sports

00:16:41,839 --> 00:16:44,560
and i should say relevant to this

00:16:43,279 --> 00:16:46,079
conference most of my experience with

00:16:44,560 --> 00:16:47,759
prometheus is fairly recent

00:16:46,079 --> 00:16:50,240
in the last six months my organization's

00:16:47,759 --> 00:16:52,639
been transit transitioning to kubernetes

00:16:50,240 --> 00:16:54,639
and i've been working a lot on adding

00:16:52,639 --> 00:16:58,480
instrumentation to our applications

00:16:54,639 --> 00:17:00,560
both in r and also actually in c sharp

00:16:58,480 --> 00:17:02,639
in order to sort of leverage this

00:17:00,560 --> 00:17:04,240
platform a lot better

00:17:02,639 --> 00:17:05,760
if you want you can find me on github

00:17:04,240 --> 00:17:09,679
and also on twitter i do

00:17:05,760 --> 00:17:09,679
blog but mostly about r

00:17:10,000 --> 00:17:14,079
so for prometheus users what is this r

00:17:12,480 --> 00:17:14,559
thing so r is actually a programming

00:17:14,079 --> 00:17:16,799
language

00:17:14,559 --> 00:17:18,799
it was originally written by

00:17:16,799 --> 00:17:21,280
statisticians for statisticians

00:17:18,799 --> 00:17:23,039
um but as sort of the data science

00:17:21,280 --> 00:17:24,000
community has exploded in the last 10

00:17:23,039 --> 00:17:26,400
years

00:17:24,000 --> 00:17:28,400
r has become a much loved tool in that

00:17:26,400 --> 00:17:29,919
ecosystem it's not hard to see why

00:17:28,400 --> 00:17:32,480
it's a highly dynamic interactive

00:17:29,919 --> 00:17:34,640
environment with tons of built-in

00:17:32,480 --> 00:17:36,720
and add-on tools for working with data

00:17:34,640 --> 00:17:40,320
doing visualization doing modeling

00:17:36,720 --> 00:17:42,320
and so on a unique thing about r

00:17:40,320 --> 00:17:44,080
is that it's mostly used by

00:17:42,320 --> 00:17:46,880
non-programmers particularly

00:17:44,080 --> 00:17:47,679
it was super popular in academia and

00:17:46,880 --> 00:17:49,840
most people who

00:17:47,679 --> 00:17:51,280
write our code are not primarily our

00:17:49,840 --> 00:17:53,679
programmers um

00:17:51,280 --> 00:17:54,960
it just is the way that they do their

00:17:53,679 --> 00:17:56,640
job

00:17:54,960 --> 00:17:58,559
as a result of this there's like way

00:17:56,640 --> 00:18:00,799
less of an engineering culture in

00:17:58,559 --> 00:18:01,760
the r ecosystem so in most mainstream

00:18:00,799 --> 00:18:04,080
languages

00:18:01,760 --> 00:18:04,880
the reality is most people who write in

00:18:04,080 --> 00:18:08,000
these languages

00:18:04,880 --> 00:18:09,360
are developers or engineers whereas that

00:18:08,000 --> 00:18:12,799
is not

00:18:09,360 --> 00:18:15,120
even remotely the case for our users

00:18:12,799 --> 00:18:16,160
and in addition to this uh until very

00:18:15,120 --> 00:18:17,520
recently

00:18:16,160 --> 00:18:19,600
there were not a lot of stories about

00:18:17,520 --> 00:18:23,280
using r in production that's changed

00:18:19,600 --> 00:18:25,360
um but it does mean that you can

00:18:23,280 --> 00:18:26,799
basically find an r package for every

00:18:25,360 --> 00:18:27,280
statistical method you could possibly

00:18:26,799 --> 00:18:29,840
imagine

00:18:27,280 --> 00:18:30,480
most statistical methods as they are

00:18:29,840 --> 00:18:33,360
published

00:18:30,480 --> 00:18:34,960
come with accompanying our code there's

00:18:33,360 --> 00:18:36,880
also tons of support for doing anything

00:18:34,960 --> 00:18:38,400
you can possibly imagine with latex or

00:18:36,880 --> 00:18:39,679
scientific publications

00:18:38,400 --> 00:18:42,320
but it does mean that the sort of

00:18:39,679 --> 00:18:44,400
production oriented packages

00:18:42,320 --> 00:18:46,720
can be lacking and in particular there

00:18:44,400 --> 00:18:47,520
was no r client for prometheus until i

00:18:46,720 --> 00:18:49,600
wrote one

00:18:47,520 --> 00:18:51,520
so if you're in our user you can get

00:18:49,600 --> 00:18:54,559
this today it's in the official r

00:18:51,520 --> 00:18:54,559
package repository

00:18:55,520 --> 00:18:58,640
now for our users what's actually the

00:18:57,280 --> 00:19:01,679
attraction of prometheus

00:18:58,640 --> 00:19:03,360
so mostly this is because r

00:19:01,679 --> 00:19:05,120
has does not have a long history of

00:19:03,360 --> 00:19:06,640
being used to write applications but

00:19:05,120 --> 00:19:07,679
this is actually changing and pretty

00:19:06,640 --> 00:19:10,799
fast

00:19:07,679 --> 00:19:12,240
so while r was really being picked up as

00:19:10,799 --> 00:19:14,320
a data science application it suddenly

00:19:12,240 --> 00:19:16,000
became popular to write applications

00:19:14,320 --> 00:19:17,600
because of two new frameworks called

00:19:16,000 --> 00:19:19,200
shiny and plumber which are

00:19:17,600 --> 00:19:21,120
for writing web apps and for running

00:19:19,200 --> 00:19:24,640
restful apis

00:19:21,120 --> 00:19:27,760
as a result of this like tons of new

00:19:24,640 --> 00:19:28,880
semi-production internal or kind of

00:19:27,760 --> 00:19:30,960
production or even

00:19:28,880 --> 00:19:34,160
forward-facing client-facing production

00:19:30,960 --> 00:19:36,000
apps are now getting written in r

00:19:34,160 --> 00:19:38,480
often embedded in larger larger

00:19:36,000 --> 00:19:40,240
organizations where r is not the primary

00:19:38,480 --> 00:19:43,440
programming language

00:19:40,240 --> 00:19:44,320
so art has unfortunately a history of

00:19:43,440 --> 00:19:46,320
operating in the

00:19:44,320 --> 00:19:48,320
quote unquote shadow i.t space which

00:19:46,320 --> 00:19:50,799
means it's not an officially supported

00:19:48,320 --> 00:19:52,559
tool but people are using it anyway

00:19:50,799 --> 00:19:54,400
as a result lots of our users are doing

00:19:52,559 --> 00:19:55,760
administrative or devops related work in

00:19:54,400 --> 00:19:57,360
order to actually

00:19:55,760 --> 00:19:59,520
get their job done and use the tool that

00:19:57,360 --> 00:20:01,360
they want to use and it does create this

00:19:59,520 --> 00:20:03,280
awkward dynamic where

00:20:01,360 --> 00:20:05,919
operational folks like many of you here

00:20:03,280 --> 00:20:07,120
who are using tools like prometheus um

00:20:05,919 --> 00:20:10,240
kind of have to get

00:20:07,120 --> 00:20:12,880
our users to opt in in order for them to

00:20:10,240 --> 00:20:14,960
be able to use these tools or platforms

00:20:12,880 --> 00:20:16,080
so for me i really wanted to make it

00:20:14,960 --> 00:20:19,200
easy for our users

00:20:16,080 --> 00:20:20,320
to do this opting in and that primarily

00:20:19,200 --> 00:20:22,320
means

00:20:20,320 --> 00:20:24,400
that you should get good default

00:20:22,320 --> 00:20:26,880
out-of-the-box metrics for these popular

00:20:24,400 --> 00:20:28,000
frameworks in like one line of code

00:20:26,880 --> 00:20:30,159
and actually there's a precedent for

00:20:28,000 --> 00:20:32,480
this i was inspired by

00:20:30,159 --> 00:20:34,400
uh existing prometheus clients in the

00:20:32,480 --> 00:20:37,039
ecosystem particularly the.net

00:20:34,400 --> 00:20:39,840
client which gives you sort of asp.net

00:20:37,039 --> 00:20:41,679
support in one or two lines of code

00:20:39,840 --> 00:20:43,679
so that's all the time i have but i will

00:20:41,679 --> 00:20:44,799
say if you have our users in your

00:20:43,679 --> 00:20:46,559
organization

00:20:44,799 --> 00:20:48,320
and you want them to be able to talk to

00:20:46,559 --> 00:20:50,960
things like prometheus consider

00:20:48,320 --> 00:20:53,039
pointing them towards this project

00:20:50,960 --> 00:20:56,480
thanks

00:20:53,039 --> 00:20:59,919
okay thank you one quick note and

00:20:56,480 --> 00:21:02,159
that the prometheus format and metrics

00:20:59,919 --> 00:21:03,440
are two different things they look

00:21:02,159 --> 00:21:05,600
pretty similar but they are different

00:21:03,440 --> 00:21:08,559
just a common confusion unfortunately

00:21:05,600 --> 00:21:09,440
so our final talk then of the conference

00:21:08,559 --> 00:21:14,400
is by

00:21:09,440 --> 00:21:14,400
jeremy banzaf on lung cancer and

00:21:14,840 --> 00:21:17,280
prometheus

00:21:16,000 --> 00:21:18,799
today i'm going to talk about how to use

00:21:17,280 --> 00:21:20,799
prometheus to lower your risk of lung

00:21:18,799 --> 00:21:22,960
cancer

00:21:20,799 --> 00:21:24,159
so a little bit about me i've been in

00:21:22,960 --> 00:21:27,440
norway since 2010

00:21:24,159 --> 00:21:30,080
i love metrics i bought a house in 2015

00:21:27,440 --> 00:21:31,520
and it was tested to be safe from radon

00:21:30,080 --> 00:21:32,720
but ever since corona started and i've

00:21:31,520 --> 00:21:34,720
been working from home i've been a

00:21:32,720 --> 00:21:37,840
little bit worried about radon levels

00:21:34,720 --> 00:21:39,440
so i decided to do some research radon

00:21:37,840 --> 00:21:41,600
is a naturally occurring gas with a

00:21:39,440 --> 00:21:43,120
half-life of only two to four days

00:21:41,600 --> 00:21:44,799
when it decays it gives off an alpha

00:21:43,120 --> 00:21:45,919
particle which is a type of ionizing

00:21:44,799 --> 00:21:47,280
radiation

00:21:45,919 --> 00:21:49,440
it's not very dangerous it can be

00:21:47,280 --> 00:21:51,280
stopped by a wall or a little bit of air

00:21:49,440 --> 00:21:52,880
or even your skin

00:21:51,280 --> 00:21:54,480
but if it were to decay in your lungs

00:21:52,880 --> 00:21:55,840
and get off a particle there

00:21:54,480 --> 00:21:59,120
then that alpha particle can hit some

00:21:55,840 --> 00:22:01,120
dna and increase your risk of cancer

00:21:59,120 --> 00:22:03,600
in fact after smoking radon is the

00:22:01,120 --> 00:22:05,919
highest cause of cancer among adults

00:22:03,600 --> 00:22:07,120
in the us and eu up to 41 000 deaths per

00:22:05,919 --> 00:22:08,720
year

00:22:07,120 --> 00:22:10,159
because radon is continuously being

00:22:08,720 --> 00:22:11,679
produced you'll find it pretty much

00:22:10,159 --> 00:22:13,760
everywhere you go

00:22:11,679 --> 00:22:16,240
outside it's generally okay but inside

00:22:13,760 --> 00:22:17,919
it can really build up

00:22:16,240 --> 00:22:19,760
i wanted to find a good sensor so i did

00:22:17,919 --> 00:22:21,200
some searching online i found something

00:22:19,760 --> 00:22:22,799
that looked great

00:22:21,200 --> 00:22:25,039
it's about the size of smoke detector

00:22:22,799 --> 00:22:27,200
designed in norway and has sensors for

00:22:25,039 --> 00:22:30,159
radon carbon dioxide

00:22:27,200 --> 00:22:31,919
temperature humidity pressure and

00:22:30,159 --> 00:22:33,840
volatile organic compounds

00:22:31,919 --> 00:22:35,120
it runs over a year and just two double

00:22:33,840 --> 00:22:36,880
a's

00:22:35,120 --> 00:22:38,000
and it's really easy to set up you just

00:22:36,880 --> 00:22:38,960
connect it to your smartphone over

00:22:38,000 --> 00:22:40,240
bluetooth

00:22:38,960 --> 00:22:43,039
and it'll automatically download that

00:22:40,240 --> 00:22:45,039
data and upload it to the cloud

00:22:43,039 --> 00:22:46,480
i didn't want that though it's my data

00:22:45,039 --> 00:22:48,960
why should it be in someone else's cloud

00:22:46,480 --> 00:22:49,679
and besides i wanted to play with it

00:22:48,960 --> 00:22:50,799
fortunately

00:22:49,679 --> 00:22:52,640
a little more searching brought me to

00:22:50,799 --> 00:22:55,280
the wave plus reader which is a free

00:22:52,640 --> 00:22:56,400
script that they are things people made

00:22:55,280 --> 00:22:59,840
it's really easy to set up with a

00:22:56,400 --> 00:23:01,919
raspberry pi and it uses the mit license

00:22:59,840 --> 00:23:02,960
so i decided to make an exporter it was

00:23:01,919 --> 00:23:05,280
really easy

00:23:02,960 --> 00:23:06,400
i just imported the previous client

00:23:05,280 --> 00:23:08,240
added some gauges

00:23:06,400 --> 00:23:09,600
and started the http server in fact all

00:23:08,240 --> 00:23:11,200
of my changes you can see on this slide

00:23:09,600 --> 00:23:12,960
right here

00:23:11,200 --> 00:23:15,280
once i had my exporter running i want to

00:23:12,960 --> 00:23:17,039
get my data into my own cloud

00:23:15,280 --> 00:23:18,720
the diagram looks a little bit complex

00:23:17,039 --> 00:23:21,039
but actually all the config is also

00:23:18,720 --> 00:23:22,960
right here on this slide

00:23:21,039 --> 00:23:24,240
next i wanted to build a graph it's

00:23:22,960 --> 00:23:25,600
really important that graphs should tell

00:23:24,240 --> 00:23:26,960
stories

00:23:25,600 --> 00:23:29,120
starting with the basics you always want

00:23:26,960 --> 00:23:31,840
to label your axes start at zero

00:23:29,120 --> 00:23:33,120
and keep things as simple as possible

00:23:31,840 --> 00:23:33,840
here's the first graph i came up with

00:23:33,120 --> 00:23:36,960
and it's really

00:23:33,840 --> 00:23:39,280
pretty awful there's no labels

00:23:36,960 --> 00:23:42,640
the legend is illegible and i have no

00:23:39,280 --> 00:23:42,640
idea if these numbers are good or bad

00:23:43,279 --> 00:23:46,320
here you can see i've added labels so at

00:23:44,960 --> 00:23:51,840
least we know this is a graph of carbon

00:23:46,320 --> 00:23:51,840
dioxide at parts per million over time

00:23:52,480 --> 00:23:57,039
but it's only when i add thresholds that

00:23:54,000 --> 00:23:58,559
this graph really starts to sing

00:23:57,039 --> 00:24:00,400
we can see now that when i'm in my room

00:23:58,559 --> 00:24:02,400
with the windows closed i'm always in

00:24:00,400 --> 00:24:04,400
the bad zone of carbon dioxide

00:24:02,400 --> 00:24:05,760
and at these levels the carbon dioxide

00:24:04,400 --> 00:24:06,720
affects my ability to think and make

00:24:05,760 --> 00:24:08,000
decisions

00:24:06,720 --> 00:24:09,679
which means that i was not at my best

00:24:08,000 --> 00:24:11,360
during these meetings i needed to open a

00:24:09,679 --> 00:24:13,840
window

00:24:11,360 --> 00:24:14,960
but back to the radon using the graph

00:24:13,840 --> 00:24:17,279
it's easy to see

00:24:14,960 --> 00:24:18,799
that radon levels change a lot over time

00:24:17,279 --> 00:24:20,480
even during the course of a day

00:24:18,799 --> 00:24:22,000
you can go from quite high over 200

00:24:20,480 --> 00:24:25,120
because per cubic meter

00:24:22,000 --> 00:24:26,400
to under 100 which is fairly safe this

00:24:25,120 --> 00:24:27,679
confirmed that i really should do

00:24:26,400 --> 00:24:29,679
something to drop my risk of aiding

00:24:27,679 --> 00:24:31,679
cancer

00:24:29,679 --> 00:24:32,880
i got two old case fans and some ancient

00:24:31,679 --> 00:24:35,360
power supplies

00:24:32,880 --> 00:24:37,440
and attached them to a flexible duct i

00:24:35,360 --> 00:24:38,960
put the intake on the floor of the room

00:24:37,440 --> 00:24:41,279
and the exhaust out in a hole in the

00:24:38,960 --> 00:24:43,120
wall to the world

00:24:41,279 --> 00:24:44,799
my results were great when i turned on

00:24:43,120 --> 00:24:45,520
the fans i saw the radon level gradually

00:24:44,799 --> 00:24:47,120
drop

00:24:45,520 --> 00:24:49,200
this contained over time and i've got it

00:24:47,120 --> 00:24:51,520
running right now

00:24:49,200 --> 00:24:53,360
of course there's always more to do i

00:24:51,520 --> 00:24:54,960
wired up a raspberry pi to control a

00:24:53,360 --> 00:24:56,640
wireless outlet

00:24:54,960 --> 00:24:58,640
and i set up a crown job to query

00:24:56,640 --> 00:25:00,720
prometheus

00:24:58,640 --> 00:25:01,679
see if the levels are too high and based

00:25:00,720 --> 00:25:04,559
on that result

00:25:01,679 --> 00:25:06,000
turn on my fan for an hour in conclusion

00:25:04,559 --> 00:25:08,720
stay safe

00:25:06,000 --> 00:25:10,080
take walks open your windows and i

00:25:08,720 --> 00:25:11,600
strongly recommend getting a radon

00:25:10,080 --> 00:25:13,360
sensor

00:25:11,600 --> 00:25:14,559
please feel free to use my exporter and

00:25:13,360 --> 00:25:15,279
i'll be grateful for any improvements

00:25:14,559 --> 00:25:17,360
you can give

00:25:15,279 --> 00:25:19,200
thanks a lot three more people who

00:25:17,360 --> 00:25:21,760
should be switching on their cameras and

00:25:19,200 --> 00:25:24,640
waving into no then they shouldn't

00:25:21,760 --> 00:25:24,640
oh yes they should

00:25:25,919 --> 00:25:28,080
no

00:25:32,000 --> 00:25:40,240
anywho um so that was the formal part

00:25:36,480 --> 00:25:40,799
of prom con online and we somehow made

00:25:40,240 --> 00:25:44,320
it work

00:25:40,799 --> 00:25:46,960
and it was weird and strange

00:25:44,320 --> 00:25:48,559
and we'll learn from this and we'll post

00:25:46,960 --> 00:25:50,159
more than this and we'll probably also

00:25:48,559 --> 00:25:53,520
make the postmortem public because

00:25:50,159 --> 00:25:54,000
open is always better it was super nice

00:25:53,520 --> 00:25:55,600
to have

00:25:54,000 --> 00:25:57,279
everyone here and there's a lot of

00:25:55,600 --> 00:25:57,760
people who are not currently on the

00:25:57,279 --> 00:26:00,320
screen

00:25:57,760 --> 00:26:02,640
who also did work behind the scene or in

00:26:00,320 --> 00:26:05,360
front of the scenes

00:26:02,640 --> 00:26:06,640
thank you a lot to everyone thank you a

00:26:05,360 --> 00:26:10,320
lot a lot a lot

00:26:06,640 --> 00:26:14,000
and hopefully see you maybe this year

00:26:10,320 --> 00:26:24,760
most certainly next year and stay safe

00:26:14,000 --> 00:26:27,920
and see you in the breakout sessions

00:26:24,760 --> 00:26:27,920

YouTube URL: https://www.youtube.com/watch?v=_Un4-N1NICc


