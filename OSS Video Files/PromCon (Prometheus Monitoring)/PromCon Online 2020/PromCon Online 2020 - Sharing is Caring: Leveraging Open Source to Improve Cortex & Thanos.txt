Title: PromCon Online 2020 - Sharing is Caring: Leveraging Open Source to Improve Cortex & Thanos
Publication date: 2020-07-23
Playlist: PromCon Online 2020
Description: 
	Sharing is Caring: Leveraging Open Source to Improve Cortex & Thanos, Bartłomiej Płotka @ Red Hat & Marco Pracucci @ Grafana Labs

Perhaps some of the success of the original Prometheus project can be attributed to the desire to keep it simple: no dependencies, no trendy distributed systems, a single binary with a simple mission.

This approach left some problems unsolved - how do you scale your Prometheus installation across multiple sites? How do you ensure your metrics are durably stored for long term analysis? And how do you build a monitoring system that can transparently tolerate machine failure?

Once upon a time, two open source projects were created to solve those problems at scale: Cortex and Thanos. Originally designed with a totally different architecture and trade-offs but for the same goals. Because of open source, over time, both projects were observing and started to learn from each other. Both started influencing each other with ideas and improvements. Today Cortex and Thanos are closer than ever, with a tight collaboration which is making their architectures converge and evolve, significantly improving both projects and influencing the Prometheus ecosystem on the way!

In this talk, you will learn why those two potentially competing CNCF projects are working together and where this is heading! Marco (Cortex maintainer)and Bartek (Thanos co-author) will explain how Cortex and Thanos leverage open source to collaborate better, without introducing maintenance burden. We will cover the cutting edge state of both projects and the most recent wins thanks to the joint effort, showing the pillars of the open source: sharing and caring!
Captions: 
	00:00:01,770 --> 00:00:04,940
[Music]

00:00:15,360 --> 00:00:20,080
i would like to share with you

00:00:16,640 --> 00:00:22,640
a personal story uh ten months ago i was

00:00:20,080 --> 00:00:23,519
leaving my previous job to join graphene

00:00:22,640 --> 00:00:26,800
labs

00:00:23,519 --> 00:00:29,199
and focus on cortex development

00:00:26,800 --> 00:00:30,320
before that i've never contributed much

00:00:29,199 --> 00:00:33,520
to open source

00:00:30,320 --> 00:00:36,320
and i feel the i feel i've learned a lot

00:00:33,520 --> 00:00:38,320
over the past few months and the most

00:00:36,320 --> 00:00:38,800
important lesson i learned about open

00:00:38,320 --> 00:00:41,200
source

00:00:38,800 --> 00:00:42,160
is that open source is not about

00:00:41,200 --> 00:00:44,879
technology

00:00:42,160 --> 00:00:46,480
and actually open source is all about

00:00:44,879 --> 00:00:49,600
people

00:00:46,480 --> 00:00:52,079
and to me personally open source is one

00:00:49,600 --> 00:00:55,280
of the most beautiful expressions

00:00:52,079 --> 00:00:56,079
of collaboration um think about it a

00:00:55,280 --> 00:00:58,719
group

00:00:56,079 --> 00:01:00,000
of very diverse people coming from all

00:00:58,719 --> 00:01:03,120
over the world

00:01:00,000 --> 00:01:06,320
working together on a single project

00:01:03,120 --> 00:01:07,760
and giving back this project to a wider

00:01:06,320 --> 00:01:10,400
community

00:01:07,760 --> 00:01:11,520
and in this talk we would like to to

00:01:10,400 --> 00:01:13,680
share with you

00:01:11,520 --> 00:01:16,799
the story behind a stronger

00:01:13,680 --> 00:01:18,960
collaboration between cortex and toms

00:01:16,799 --> 00:01:21,040
hi everyone my name is marker i'm a

00:01:18,960 --> 00:01:24,000
software engineer at grafana labs

00:01:21,040 --> 00:01:24,560
i'm a cortex maintainer and i'm recently

00:01:24,000 --> 00:01:27,520
joined

00:01:24,560 --> 00:01:28,320
the time maintainers as well thanks

00:01:27,520 --> 00:01:30,640
marco

00:01:28,320 --> 00:01:31,759
um so my name is bartlett vodka and i'm

00:01:30,640 --> 00:01:34,720
a software engineer

00:01:31,759 --> 00:01:36,880
at red hat in the monitoring team i'm

00:01:34,720 --> 00:01:37,920
pirate of the prometheus team as well

00:01:36,880 --> 00:01:41,520
and

00:01:37,920 --> 00:01:43,600
co-author of thanos project i also

00:01:41,520 --> 00:01:44,640
you might know me from the newly created

00:01:43,600 --> 00:01:48,479
cncf

00:01:44,640 --> 00:01:51,840
seek observability which you can find

00:01:48,479 --> 00:01:54,880
on our more details on our repo

00:01:51,840 --> 00:01:58,079
please join us so today we will be

00:01:54,880 --> 00:01:59,200
kind of continuing the talk that we made

00:01:58,079 --> 00:02:01,920
with tom

00:01:59,200 --> 00:02:02,799
wilkie who is culture of cortex a year

00:02:01,920 --> 00:02:05,840
ago

00:02:02,799 --> 00:02:09,200
nearly a year ago on the prom con

00:02:05,840 --> 00:02:11,200
in munich last year and we were talking

00:02:09,200 --> 00:02:13,440
about those two projects we introduced

00:02:11,200 --> 00:02:15,040
them and we talked about the differences

00:02:13,440 --> 00:02:18,400
and similarities

00:02:15,040 --> 00:02:21,200
um around those and as you maybe know

00:02:18,400 --> 00:02:22,400
those projects aims for kind of the same

00:02:21,200 --> 00:02:24,560
goal

00:02:22,400 --> 00:02:27,360
which is global view of your metrics of

00:02:24,560 --> 00:02:29,680
your promote use metrics

00:02:27,360 --> 00:02:31,840
maybe durable view so you can also

00:02:29,680 --> 00:02:35,519
handle some kind of aha of

00:02:31,840 --> 00:02:37,519
replicas of from it uses um and

00:02:35,519 --> 00:02:39,120
last but not the least long-term storage

00:02:37,519 --> 00:02:42,319
retention

00:02:39,120 --> 00:02:43,440
so in during this talk we'll continue on

00:02:42,319 --> 00:02:45,680
the on this base

00:02:43,440 --> 00:02:47,920
however let's briefly talk what we

00:02:45,680 --> 00:02:51,200
mentioned during that talk you can watch

00:02:47,920 --> 00:02:53,760
rewatch this talk from the last year

00:02:51,200 --> 00:02:55,360
for more details and essentially the

00:02:53,760 --> 00:02:56,720
tldr is that

00:02:55,360 --> 00:02:59,920
in the beginning especially in the

00:02:56,720 --> 00:03:01,760
beginning those projects were different

00:02:59,920 --> 00:03:04,640
on those kind of free simplified

00:03:01,760 --> 00:03:07,280
dimensions cortex was mainly

00:03:04,640 --> 00:03:09,280
push-based where you were configuring

00:03:07,280 --> 00:03:12,640
promoters to push the data

00:03:09,280 --> 00:03:15,120
um to some centralized clusters

00:03:12,640 --> 00:03:17,280
uh versus versus internals you are

00:03:15,120 --> 00:03:20,560
rather pulling the data and querying

00:03:17,280 --> 00:03:24,080
directly from the prompt users um cortex

00:03:20,560 --> 00:03:26,879
aimed for different databases um so

00:03:24,080 --> 00:03:27,280
nosql for index and object storage for

00:03:26,879 --> 00:03:30,560
um

00:03:27,280 --> 00:03:33,280
for compressed chunks in terms of thanos

00:03:30,560 --> 00:03:34,799
we aimed for kind of simplicity and

00:03:33,280 --> 00:03:36,400
having chip story chip

00:03:34,799 --> 00:03:38,159
very cheap storage so we store

00:03:36,400 --> 00:03:40,799
everything in object storage

00:03:38,159 --> 00:03:42,799
and we store everything in the dsdb

00:03:40,799 --> 00:03:45,519
format versus cortex we're storing

00:03:42,799 --> 00:03:48,159
um in kind of custom index because of

00:03:45,519 --> 00:03:50,720
those separation and databases

00:03:48,159 --> 00:03:52,640
however we have many many similarities

00:03:50,720 --> 00:03:55,120
and i won't be reading all of them you

00:03:52,640 --> 00:03:57,120
can kind of read them on your own

00:03:55,120 --> 00:04:02,640
but the message is clear we definitely

00:03:57,120 --> 00:04:02,640
have more in common than the indifferent

00:04:03,760 --> 00:04:10,560
and over the time cortex proved

00:04:07,200 --> 00:04:13,040
to scale very well and at the same time

00:04:10,560 --> 00:04:14,879
offer very good query perform query

00:04:13,040 --> 00:04:18,000
performances

00:04:14,879 --> 00:04:21,199
but at the same time was perceived

00:04:18,000 --> 00:04:23,040
as a complex system and i remember a

00:04:21,199 --> 00:04:24,320
famous discussion on twitter about this

00:04:23,040 --> 00:04:28,479
specific

00:04:24,320 --> 00:04:29,919
cortex architecture diagram and

00:04:28,479 --> 00:04:32,880
and to be honest the first time i've

00:04:29,919 --> 00:04:36,240
seen this diagram i i was scared

00:04:32,880 --> 00:04:39,199
um as well so while cortex

00:04:36,240 --> 00:04:40,240
was perceived as a complex system at the

00:04:39,199 --> 00:04:43,199
same time

00:04:40,240 --> 00:04:44,400
thanos was emerging and gaining

00:04:43,199 --> 00:04:48,000
popularity as an

00:04:44,400 --> 00:04:51,600
easier way to scale out prometheus

00:04:48,000 --> 00:04:54,560
and in the cortex community we learned

00:04:51,600 --> 00:04:55,759
a lot from this sort of soft competition

00:04:54,560 --> 00:04:58,639
with thanos

00:04:55,759 --> 00:05:01,759
and this was a trigger to improve the

00:04:58,639 --> 00:05:04,400
cortex user experience as well

00:05:01,759 --> 00:05:05,280
we did many things that improved the

00:05:04,400 --> 00:05:07,199
cortex ux

00:05:05,280 --> 00:05:08,639
but to give you a few examples we have

00:05:07,199 --> 00:05:12,000
introduced a

00:05:08,639 --> 00:05:13,759
schedule for the release process we

00:05:12,000 --> 00:05:16,160
worked hard on a user-friendly

00:05:13,759 --> 00:05:19,680
documentation which we also published

00:05:16,160 --> 00:05:22,000
to a website and we worked to reduce the

00:05:19,680 --> 00:05:24,720
dependencies required to run codex

00:05:22,000 --> 00:05:25,919
like for example we introduced a gossip

00:05:24,720 --> 00:05:28,320
to share

00:05:25,919 --> 00:05:30,240
um the state of the ashram which is a

00:05:28,320 --> 00:05:32,160
distributed data structure we use

00:05:30,240 --> 00:05:33,520
for sharding and replication so

00:05:32,160 --> 00:05:36,800
basically gossip

00:05:33,520 --> 00:05:39,520
when you use gossip you don't need

00:05:36,800 --> 00:05:40,960
console as a back-end storage for for

00:05:39,520 --> 00:05:44,240
the ashrin

00:05:40,960 --> 00:05:47,120
um and then we worked to introduce

00:05:44,240 --> 00:05:47,919
the single battery mode so nowadays you

00:05:47,120 --> 00:05:51,919
can

00:05:47,919 --> 00:05:53,759
run cortex either in microservices mode

00:05:51,919 --> 00:05:55,440
or in single binary mode and then when

00:05:53,759 --> 00:05:55,919
you are on cortex in the single binary

00:05:55,440 --> 00:05:58,240
mode

00:05:55,919 --> 00:06:00,000
uh what you actually get is a single

00:05:58,240 --> 00:06:03,039
binary with a single configuration

00:06:00,000 --> 00:06:04,639
um which you deploy um as a single

00:06:03,039 --> 00:06:06,319
deployment group like for example a

00:06:04,639 --> 00:06:10,319
single um

00:06:06,319 --> 00:06:13,840
deployment um set on on kubernetes

00:06:10,319 --> 00:06:15,919
and and then you just scale up or down

00:06:13,840 --> 00:06:17,360
your cortex cluster uh changing the

00:06:15,919 --> 00:06:20,880
number of replicas

00:06:17,360 --> 00:06:23,680
of your cortex nodes um

00:06:20,880 --> 00:06:25,600
and and then we started brainstorming

00:06:23,680 --> 00:06:29,600
about whether we can

00:06:25,600 --> 00:06:32,960
uh completely remove uh the nosql

00:06:29,600 --> 00:06:35,440
index store uh dependency and

00:06:32,960 --> 00:06:37,280
while we were still in the brainstorming

00:06:35,440 --> 00:06:40,240
phase um

00:06:37,280 --> 00:06:41,120
a pr from the community uh popped out

00:06:40,240 --> 00:06:43,759
out of the blue

00:06:41,120 --> 00:06:44,639
um and specifically was a pr from thor

00:06:43,759 --> 00:06:47,360
hansen

00:06:44,639 --> 00:06:48,160
where it was proposing an experiment um

00:06:47,360 --> 00:06:51,680
to

00:06:48,160 --> 00:06:54,319
introduce an alternative storage engine

00:06:51,680 --> 00:06:55,039
um into into cortex which we later

00:06:54,319 --> 00:06:58,400
called

00:06:55,039 --> 00:07:01,120
the cortex block storage which was

00:06:58,400 --> 00:07:02,880
using prometheus tsdblocks to store the

00:07:01,120 --> 00:07:05,440
time series data

00:07:02,880 --> 00:07:07,759
instead of the custom indexes stored on

00:07:05,440 --> 00:07:10,720
the nosql database plus

00:07:07,759 --> 00:07:11,840
chunks stored on the object store and in

00:07:10,720 --> 00:07:16,639
this experiment

00:07:11,840 --> 00:07:19,840
thor was using specific components of

00:07:16,639 --> 00:07:20,720
thanos to build this alternative storage

00:07:19,840 --> 00:07:23,919
engine

00:07:20,720 --> 00:07:25,759
and yeah we found it brilliant um

00:07:23,919 --> 00:07:27,759
and and we actually realized that what

00:07:25,759 --> 00:07:30,960
we wanted to do

00:07:27,759 --> 00:07:34,160
was something thanos already did

00:07:30,960 --> 00:07:37,280
so instead of competing with thanos

00:07:34,160 --> 00:07:40,400
why not teaming up with thanos and

00:07:37,280 --> 00:07:46,080
build something together

00:07:40,400 --> 00:07:46,080
so why not collaborate over compete

00:07:46,560 --> 00:07:49,759
as an alternative solution to to scale

00:07:48,720 --> 00:07:52,800
out prometheus

00:07:49,759 --> 00:07:53,680
and have a long-term storage for your

00:07:52,800 --> 00:07:57,120
time series that

00:07:53,680 --> 00:08:00,160
data meanwhile on

00:07:57,120 --> 00:08:02,879
the tunnel side we we were

00:08:00,160 --> 00:08:04,240
focusing on stabilizing our components

00:08:02,879 --> 00:08:07,199
making sure

00:08:04,240 --> 00:08:08,319
they are reliable and we we were in the

00:08:07,199 --> 00:08:11,280
point and

00:08:08,319 --> 00:08:12,000
that functionally we were um we were

00:08:11,280 --> 00:08:15,039
solid

00:08:12,000 --> 00:08:15,520
we had kind of simple architecture and

00:08:15,039 --> 00:08:18,560
very

00:08:15,520 --> 00:08:20,080
gradual um form of integration with

00:08:18,560 --> 00:08:22,800
promoters with

00:08:20,080 --> 00:08:25,120
kind of multiple optional steps that

00:08:22,800 --> 00:08:28,240
were kind of easy to do

00:08:25,120 --> 00:08:31,680
however with more adoption clearly

00:08:28,240 --> 00:08:34,959
more kind of edge use cases um came in

00:08:31,680 --> 00:08:38,000
and for example you can imagine that

00:08:34,959 --> 00:08:39,599
in this model of querier fetching data

00:08:38,000 --> 00:08:41,839
directly from prometus

00:08:39,599 --> 00:08:43,599
you might hit some problems where the

00:08:41,839 --> 00:08:45,839
cluster and the

00:08:43,599 --> 00:08:48,000
cluster the centralized cluster were the

00:08:45,839 --> 00:08:51,120
queries and where the user is

00:08:48,000 --> 00:08:52,959
um and and the clusters they were

00:08:51,120 --> 00:08:54,240
where you're collecting the metrics from

00:08:52,959 --> 00:08:57,600
metrics from

00:08:54,240 --> 00:09:01,040
are maybe far far away geographically

00:08:57,600 --> 00:09:04,720
via some firewalls and and some overhead

00:09:01,040 --> 00:09:07,120
and what if there is no

00:09:04,720 --> 00:09:08,160
possibility for ingress traffic for

00:09:07,120 --> 00:09:10,240
those clusters

00:09:08,160 --> 00:09:11,600
what if those clusters are totally

00:09:10,240 --> 00:09:14,800
isolated from any

00:09:11,600 --> 00:09:17,839
um modification advanced modifications

00:09:14,800 --> 00:09:20,399
like adding thanos sidecar

00:09:17,839 --> 00:09:21,120
or last but not the least what if you

00:09:20,399 --> 00:09:23,040
have

00:09:21,120 --> 00:09:25,600
kind of a female cluster that you want

00:09:23,040 --> 00:09:30,000
to spin up only for a short time

00:09:25,600 --> 00:09:31,519
and in this case the method of lazily

00:09:30,000 --> 00:09:33,279
upload the blocks into the object

00:09:31,519 --> 00:09:34,800
storage it's not perfect because you

00:09:33,279 --> 00:09:36,880
don't have two hours to wait

00:09:34,800 --> 00:09:38,800
or maybe you don't want to play with

00:09:36,880 --> 00:09:41,360
kind of advanced flashing mechanics

00:09:38,800 --> 00:09:42,320
so this is where we looked on the cortex

00:09:41,360 --> 00:09:44,000
side

00:09:42,320 --> 00:09:46,000
on our kind of initial let's say

00:09:44,000 --> 00:09:48,959
competitor and we

00:09:46,000 --> 00:09:49,760
we saw the kind of push mechanism right

00:09:48,959 --> 00:09:52,640
that's why

00:09:49,760 --> 00:09:54,720
we like this definitely inspired us in

00:09:52,640 --> 00:09:57,279
some way to create a tunnel's

00:09:54,720 --> 00:09:59,120
component called receiver which allows

00:09:57,279 --> 00:09:59,920
exactly that in this kind of similar

00:09:59,120 --> 00:10:02,959
fashion

00:09:59,920 --> 00:10:04,399
uh where you can where where you can

00:10:02,959 --> 00:10:06,320
kind of configure primitives

00:10:04,399 --> 00:10:08,480
with your remote right to push into

00:10:06,320 --> 00:10:11,680
those receiver components

00:10:08,480 --> 00:10:12,240
um however you know while functionally

00:10:11,680 --> 00:10:14,880
we will

00:10:12,240 --> 00:10:17,040
we were solid thanks to that improvement

00:10:14,880 --> 00:10:20,000
that we kind of learned from cortex

00:10:17,040 --> 00:10:21,440
we are definitely looking on other stuff

00:10:20,000 --> 00:10:25,200
and

00:10:21,440 --> 00:10:28,640
particularly cortex is known from

00:10:25,200 --> 00:10:31,839
from their focus on performance and

00:10:28,640 --> 00:10:35,200
literally i mean performance

00:10:31,839 --> 00:10:37,440
in very very good good

00:10:35,200 --> 00:10:39,120
good point of view because literally a

00:10:37,440 --> 00:10:42,720
cortex

00:10:39,120 --> 00:10:45,120
solution has internal kind of

00:10:42,720 --> 00:10:46,560
focus and sla on making latency very

00:10:45,120 --> 00:10:49,839
very very

00:10:46,560 --> 00:10:50,399
kind of low and it means maybe even you

00:10:49,839 --> 00:10:52,880
know

00:10:50,399 --> 00:10:54,640
whatever query you do it should be super

00:10:52,880 --> 00:10:56,399
fast in terms of seconds

00:10:54,640 --> 00:10:57,920
and we are definitely jealous on time of

00:10:56,399 --> 00:11:00,240
sight

00:10:57,920 --> 00:11:01,839
and we are thinking how to embrace those

00:11:00,240 --> 00:11:05,120
improvements cortex state

00:11:01,839 --> 00:11:07,600
and this is where a year ago tom um

00:11:05,120 --> 00:11:09,519
kind of shown on prometheus london uh

00:11:07,600 --> 00:11:13,200
meet up we organized together

00:11:09,519 --> 00:11:16,560
um and like he extended cortex

00:11:13,200 --> 00:11:19,120
query frontend to work on

00:11:16,560 --> 00:11:20,160
on tanos backend as well and this kind

00:11:19,120 --> 00:11:24,320
of changed the

00:11:20,160 --> 00:11:26,800
state of the art and our approach

00:11:24,320 --> 00:11:27,440
towards those two projects together

00:11:26,800 --> 00:11:30,640
because

00:11:27,440 --> 00:11:31,920
we've seen that um cortex team is very

00:11:30,640 --> 00:11:34,320
eager to

00:11:31,920 --> 00:11:36,399
reshape their um their component to allo

00:11:34,320 --> 00:11:37,040
reuse and allow collaboration and that

00:11:36,399 --> 00:11:39,120
this

00:11:37,040 --> 00:11:41,120
immediately improved you know thanos

00:11:39,120 --> 00:11:43,440
world performance wise because we could

00:11:41,120 --> 00:11:45,519
cache responses but it gives also the

00:11:43,440 --> 00:11:47,680
potential for other improvements and

00:11:45,519 --> 00:11:49,680
other collaboration and this is from

00:11:47,680 --> 00:11:51,200
tana's side the point where

00:11:49,680 --> 00:11:52,399
critical point where the kind of

00:11:51,200 --> 00:11:55,120
competition change into the

00:11:52,399 --> 00:11:55,120
collaboration

00:11:55,519 --> 00:11:59,279
but collaboration is a two-way street

00:11:57,519 --> 00:12:02,639
and requires an

00:11:59,279 --> 00:12:04,000
effort on both sides um so

00:12:02,639 --> 00:12:06,000
when building for example the the

00:12:04,000 --> 00:12:09,360
cortex-block storage um

00:12:06,000 --> 00:12:11,519
on one side when cortex contributes some

00:12:09,360 --> 00:12:13,600
with some changes into tunnels we have

00:12:11,519 --> 00:12:15,279
to make sure to not bring

00:12:13,600 --> 00:12:17,200
any negative impact on times like in

00:12:15,279 --> 00:12:18,160
terms of performances or maintenance

00:12:17,200 --> 00:12:20,399
burden

00:12:18,160 --> 00:12:21,680
but at the same time um the thomas

00:12:20,399 --> 00:12:24,320
community uh

00:12:21,680 --> 00:12:24,959
is somewhat required to be hoping to

00:12:24,320 --> 00:12:28,880
discuss

00:12:24,959 --> 00:12:30,880
and eventually accept changes which are

00:12:28,880 --> 00:12:32,639
not strictly beneficial to tunnels like

00:12:30,880 --> 00:12:34,720
for example refactorings

00:12:32,639 --> 00:12:35,680
to ease the integration of their own

00:12:34,720 --> 00:12:38,880
components

00:12:35,680 --> 00:12:42,480
into cortex itself and

00:12:38,880 --> 00:12:45,839
let's be honest uh sometimes it's uh

00:12:42,480 --> 00:12:47,680
it's tough um the collaboration um

00:12:45,839 --> 00:12:49,360
sometimes uh requires reaching a

00:12:47,680 --> 00:12:53,519
consensus among

00:12:49,360 --> 00:12:55,839
a wider group of people um sometimes

00:12:53,519 --> 00:12:56,959
we have to do changes into tennis first

00:12:55,839 --> 00:12:59,040
get them merged

00:12:56,959 --> 00:13:00,240
and then backboard there's changes into

00:12:59,040 --> 00:13:03,360
cortex

00:13:00,240 --> 00:13:06,399
and it's very very tempting um to pick

00:13:03,360 --> 00:13:09,920
uh the shorter past it's very tempting

00:13:06,399 --> 00:13:11,920
to maybe fork a single package

00:13:09,920 --> 00:13:13,040
directly into cortex so that we don't

00:13:11,920 --> 00:13:15,360
have to discuss

00:13:13,040 --> 00:13:16,880
all those changes into thanos or to

00:13:15,360 --> 00:13:19,120
upstream those changes

00:13:16,880 --> 00:13:21,920
or we're not even forking an entire

00:13:19,120 --> 00:13:25,360
project you depend on

00:13:21,920 --> 00:13:27,600
but at the very end

00:13:25,360 --> 00:13:28,800
whenever we collaborate whenever we

00:13:27,600 --> 00:13:32,000
share something

00:13:28,800 --> 00:13:35,600
we also learn a lot we learn a lot

00:13:32,000 --> 00:13:38,320
each other from successes and also from

00:13:35,600 --> 00:13:38,880
fails we learned optimization techniques

00:13:38,320 --> 00:13:42,880
we learned

00:13:38,880 --> 00:13:46,160
best practices and at the end

00:13:42,880 --> 00:13:49,920
all those learnings were invaluable

00:13:46,160 --> 00:13:53,600
and uh we really really

00:13:49,920 --> 00:13:54,720
uh got more um from this collaboration

00:13:53,600 --> 00:13:57,360
than what we gave

00:13:54,720 --> 00:13:58,320
uh back so to give you some practical

00:13:57,360 --> 00:14:00,880
examples as

00:13:58,320 --> 00:14:01,360
we previously mentioned uh we have built

00:14:00,880 --> 00:14:03,279
uh

00:14:01,360 --> 00:14:04,480
we are building the cortex block storage

00:14:03,279 --> 00:14:06,560
on top of thanos

00:14:04,480 --> 00:14:08,240
and specifically we are reusing the

00:14:06,560 --> 00:14:11,600
thanos shipper bucket store

00:14:08,240 --> 00:14:13,839
and compactor respectively in the cortex

00:14:11,600 --> 00:14:15,040
ingester the cortex compactor and the

00:14:13,839 --> 00:14:18,240
cortex

00:14:15,040 --> 00:14:22,480
store gateway and this allowed us um

00:14:18,240 --> 00:14:25,920
to have a working solution

00:14:22,480 --> 00:14:28,839
in a way less time than compared to

00:14:25,920 --> 00:14:30,800
building all these features from scratch

00:14:28,839 --> 00:14:33,040
ourselves

00:14:30,800 --> 00:14:34,639
in the same time as thanos project we

00:14:33,040 --> 00:14:37,199
are seeking into more

00:14:34,639 --> 00:14:39,680
um more ways into ensuring kind of

00:14:37,199 --> 00:14:42,399
quality long-term quality of the project

00:14:39,680 --> 00:14:43,440
and while we have other kind of our own

00:14:42,399 --> 00:14:46,959
framework

00:14:43,440 --> 00:14:48,000
we we seen kind of by accident that

00:14:46,959 --> 00:14:50,720
marco developed

00:14:48,000 --> 00:14:52,720
on cortex side um kind of very simple

00:14:50,720 --> 00:14:53,839
but very powerful end-to-end framework

00:14:52,720 --> 00:14:57,360
based on docker

00:14:53,839 --> 00:15:00,399
which you can run from your go tests and

00:14:57,360 --> 00:15:02,320
it allows to run the whole stack

00:15:00,399 --> 00:15:05,279
including many distributed system

00:15:02,320 --> 00:15:08,399
components object storages and databases

00:15:05,279 --> 00:15:10,560
within single machine within multiple

00:15:08,399 --> 00:15:12,079
dockers without leaking any resources

00:15:10,560 --> 00:15:13,519
any any any

00:15:12,079 --> 00:15:15,680
problems with the networking and

00:15:13,519 --> 00:15:17,519
deployment deploying of those

00:15:15,680 --> 00:15:18,959
and you can do that within the same kind

00:15:17,519 --> 00:15:22,240
of ci run

00:15:18,959 --> 00:15:23,760
and we were totally passionate to kind

00:15:22,240 --> 00:15:26,079
of work together on this

00:15:23,760 --> 00:15:27,680
use it immediately and adjust for kind

00:15:26,079 --> 00:15:30,880
of more library use

00:15:27,680 --> 00:15:31,680
and this definitely helped us together

00:15:30,880 --> 00:15:35,759
to make sure

00:15:31,680 --> 00:15:38,959
we have high quality on both ends and

00:15:35,759 --> 00:15:40,480
this was super super useful another

00:15:38,959 --> 00:15:41,199
point that we i kind of already

00:15:40,480 --> 00:15:42,880
mentioned

00:15:41,199 --> 00:15:44,240
is the query front end which

00:15:42,880 --> 00:15:47,920
parallelized

00:15:44,240 --> 00:15:49,519
um the the queries uh made into the to

00:15:47,920 --> 00:15:52,079
the to the to the back end

00:15:49,519 --> 00:15:54,160
it was done primarily for cortex usage

00:15:52,079 --> 00:15:56,800
however with tom effort

00:15:54,160 --> 00:15:58,320
we are like we are able to use it on

00:15:56,800 --> 00:16:00,399
tunnel site as well and there's

00:15:58,320 --> 00:16:02,240
there are a whole bunch of plans to

00:16:00,399 --> 00:16:04,240
improve that uh collaboration on this

00:16:02,240 --> 00:16:04,639
component for example thanos is creating

00:16:04,240 --> 00:16:07,279
uh

00:16:04,639 --> 00:16:08,720
transplants to create and a new

00:16:07,279 --> 00:16:10,240
component which is tunnels query

00:16:08,720 --> 00:16:13,199
front-end which will essentially

00:16:10,240 --> 00:16:14,959
embed and import directly the query font

00:16:13,199 --> 00:16:16,480
and just maybe with uh with tunnels

00:16:14,959 --> 00:16:19,600
configuration

00:16:16,480 --> 00:16:21,360
on it which makes it easy to reuse so

00:16:19,600 --> 00:16:24,000
um it's looking beautiful on that as

00:16:21,360 --> 00:16:26,160
well one of the most major kind of

00:16:24,000 --> 00:16:28,320
improvements and contributions that that

00:16:26,160 --> 00:16:31,440
kind of cortex did to thanos

00:16:28,320 --> 00:16:32,079
was for example shared caching and you

00:16:31,440 --> 00:16:35,279
can do that

00:16:32,079 --> 00:16:35,759
via mkhd support which was added tested

00:16:35,279 --> 00:16:37,519
to

00:16:35,759 --> 00:16:39,839
to tunnels and it's not only about the

00:16:37,519 --> 00:16:40,560
client kind of shared cache that is

00:16:39,839 --> 00:16:43,120
separated

00:16:40,560 --> 00:16:44,399
into the in memory cache that we were

00:16:43,120 --> 00:16:47,519
previously possible

00:16:44,399 --> 00:16:48,480
it's also about caching finally

00:16:47,519 --> 00:16:51,440
different layers

00:16:48,480 --> 00:16:52,959
of of data that you fetch from from the

00:16:51,440 --> 00:16:55,839
from the object storage

00:16:52,959 --> 00:16:58,000
not only you know kind of index but also

00:16:55,839 --> 00:16:59,120
chunks itself so the compressed values

00:16:58,000 --> 00:17:02,480
that we have

00:16:59,120 --> 00:17:04,480
for each metric and also metadata to to

00:17:02,480 --> 00:17:07,520
limit kind of the s3

00:17:04,480 --> 00:17:08,559
api traffic and that's enormous benefit

00:17:07,520 --> 00:17:11,520
that that

00:17:08,559 --> 00:17:11,919
kind of has to be done for cortex needs

00:17:11,520 --> 00:17:14,400
but

00:17:11,919 --> 00:17:16,160
also enormously help for thanos

00:17:14,400 --> 00:17:18,959
community so we could reuse

00:17:16,160 --> 00:17:20,799
oh we could essentially benefit both

00:17:18,959 --> 00:17:24,240
from that

00:17:20,799 --> 00:17:24,880
and thanos has this very simple but

00:17:24,240 --> 00:17:28,240
effective

00:17:24,880 --> 00:17:31,520
dns based service discovery supporter

00:17:28,240 --> 00:17:34,080
which we found very useful uh when uh

00:17:31,520 --> 00:17:34,880
working with thanos and we wanted to

00:17:34,080 --> 00:17:38,160
backport

00:17:34,880 --> 00:17:39,679
um and reuse uh this service discovery

00:17:38,160 --> 00:17:41,760
mechanism into cortex as well

00:17:39,679 --> 00:17:44,559
and nowadays we are using uh um we are

00:17:41,760 --> 00:17:47,760
using it in the cortex block storage

00:17:44,559 --> 00:17:48,720
as well as for the memcached caching

00:17:47,760 --> 00:17:51,440
client

00:17:48,720 --> 00:17:52,640
and now we currently have a pr open uh

00:17:51,440 --> 00:17:55,520
we are adding

00:17:52,640 --> 00:17:56,960
the support for this dns based service

00:17:55,520 --> 00:18:01,200
discovery to the

00:17:56,960 --> 00:18:04,720
gossip members discovery uh basically

00:18:01,200 --> 00:18:06,080
uh the the way we discover uh the nodes

00:18:04,720 --> 00:18:08,480
uh um within the

00:18:06,080 --> 00:18:09,919
within a cortex cluster running with the

00:18:08,480 --> 00:18:13,039
um the gossip

00:18:09,919 --> 00:18:16,240
peer-to-peer protocol and uh

00:18:13,039 --> 00:18:18,400
over the time we have also shared many

00:18:16,240 --> 00:18:20,720
optimization techniques between the two

00:18:18,400 --> 00:18:23,760
projects in terms of

00:18:20,720 --> 00:18:26,840
cpu reduction or

00:18:23,760 --> 00:18:29,039
reduction of memory television memory

00:18:26,840 --> 00:18:29,679
allocations just to give you an example

00:18:29,039 --> 00:18:32,880
right now we

00:18:29,679 --> 00:18:34,960
we are working to backporting to thanos

00:18:32,880 --> 00:18:36,320
the so-called yolo string which is a

00:18:34,960 --> 00:18:40,559
technique in golang

00:18:36,320 --> 00:18:43,440
used to reduce the memory um allocations

00:18:40,559 --> 00:18:44,720
which we employed a long time ago in

00:18:43,440 --> 00:18:46,880
cortex uh um

00:18:44,720 --> 00:18:49,200
and thanks to which we have seen a large

00:18:46,880 --> 00:18:51,280
benefit and now we are doing uh

00:18:49,200 --> 00:18:52,320
the same improvements uh into tunnels as

00:18:51,280 --> 00:18:56,480
well

00:18:52,320 --> 00:18:57,280
and uh and uh at the end of this

00:18:56,480 --> 00:19:00,160
collaboration

00:18:57,280 --> 00:19:01,120
uh we have also uh seen there some

00:19:00,160 --> 00:19:04,320
optimizations

00:19:01,120 --> 00:19:06,400
uh upstream into prometheus itself and

00:19:04,320 --> 00:19:08,240
and just to give you an example of how

00:19:06,400 --> 00:19:09,520
powerful is collaborating between

00:19:08,240 --> 00:19:12,960
different projects

00:19:09,520 --> 00:19:14,080
um in grafana loki which is a solution

00:19:12,960 --> 00:19:17,520
for

00:19:14,080 --> 00:19:20,320
logging we have learned

00:19:17,520 --> 00:19:20,960
about a technique to optimize the

00:19:20,320 --> 00:19:24,480
specific

00:19:20,960 --> 00:19:27,200
use cases of regex matching

00:19:24,480 --> 00:19:27,679
and we recently upstream into prometheus

00:19:27,200 --> 00:19:30,799
um

00:19:27,679 --> 00:19:33,760
an optimization to to speed up

00:19:30,799 --> 00:19:36,799
labels regulates matching with literal

00:19:33,760 --> 00:19:39,120
prefixes or suffixes

00:19:36,799 --> 00:19:41,120
and now all the projects uh well

00:19:39,120 --> 00:19:43,360
promised itself plus all the projects

00:19:41,120 --> 00:19:46,400
depending on promises like tennis

00:19:43,360 --> 00:19:49,840
and cortex also has

00:19:46,400 --> 00:19:52,240
this optimization yes and

00:19:49,840 --> 00:19:54,559
it's not only about the features and

00:19:52,240 --> 00:19:56,960
optimizations that matters here

00:19:54,559 --> 00:19:57,760
it's also about using the code much much

00:19:56,960 --> 00:20:00,480
often and

00:19:57,760 --> 00:20:01,200
and have more eyes on on the same code

00:20:00,480 --> 00:20:04,799
base

00:20:01,200 --> 00:20:08,159
because with more activity this code

00:20:04,799 --> 00:20:10,720
has more uh more input more feedback

00:20:08,159 --> 00:20:12,000
and more possibilities to evolve because

00:20:10,720 --> 00:20:14,880
code is living and

00:20:12,000 --> 00:20:16,799
if you leave it dead for a long time it

00:20:14,880 --> 00:20:19,440
will go obsolete very quickly

00:20:16,799 --> 00:20:21,440
so just because you know cortex were

00:20:19,440 --> 00:20:22,159
using we have additional users to our

00:20:21,440 --> 00:20:24,640
code base

00:20:22,159 --> 00:20:25,600
we found massive amount of backs and and

00:20:24,640 --> 00:20:28,320
kind of

00:20:25,600 --> 00:20:28,720
fixes that were needed to be done uh and

00:20:28,320 --> 00:20:31,600
even

00:20:28,720 --> 00:20:32,640
gaps in the documentation and and and

00:20:31,600 --> 00:20:34,960
things like that so

00:20:32,640 --> 00:20:36,880
it was extremely helpful to just revisit

00:20:34,960 --> 00:20:39,600
a code even as a reviewer

00:20:36,880 --> 00:20:41,600
thanks to the um contributions from from

00:20:39,600 --> 00:20:43,600
our site maybe contributions that were

00:20:41,600 --> 00:20:44,799
aimed for cortex mainly however still

00:20:43,600 --> 00:20:47,760
were touching our

00:20:44,799 --> 00:20:48,640
tanos code base and it's also not about

00:20:47,760 --> 00:20:50,480
the code itself

00:20:48,640 --> 00:20:52,159
it's not about technical stuff it's also

00:20:50,480 --> 00:20:55,840
about feedback and ideas

00:20:52,159 --> 00:20:57,840
and and and and just more developers

00:20:55,840 --> 00:20:59,919
and we can clearly see that from our

00:20:57,840 --> 00:21:02,400
community meetings where every

00:20:59,919 --> 00:21:03,840
projects like prometheus thanos cortex

00:21:02,400 --> 00:21:06,240
has

00:21:03,840 --> 00:21:07,840
its own kind of community meeting but we

00:21:06,240 --> 00:21:10,559
kind of are

00:21:07,840 --> 00:21:12,159
all together in those three meetings and

00:21:10,559 --> 00:21:14,880
and we just talk about

00:21:12,159 --> 00:21:16,080
common problems and and and ideas and

00:21:14,880 --> 00:21:19,120
help each other and

00:21:16,080 --> 00:21:22,320
um to push boundaries and

00:21:19,120 --> 00:21:25,679
and even learn how to deal with problems

00:21:22,320 --> 00:21:28,480
around community or diversity or or

00:21:25,679 --> 00:21:30,240
anything to be honest so um it's

00:21:28,480 --> 00:21:33,760
extremely good to be transparent

00:21:30,240 --> 00:21:35,919
during um project development and

00:21:33,760 --> 00:21:37,200
and kind of have critical maintainers

00:21:35,919 --> 00:21:38,880
meeting public

00:21:37,200 --> 00:21:41,440
um and allow contributions and

00:21:38,880 --> 00:21:44,400
collaborations like this

00:21:41,440 --> 00:21:45,440
so at the end there are key messages we

00:21:44,400 --> 00:21:48,400
want to share with this

00:21:45,440 --> 00:21:49,120
uh with this talk first of all open

00:21:48,400 --> 00:21:53,120
source

00:21:49,120 --> 00:21:55,679
is about people about um collaboration

00:21:53,120 --> 00:21:56,960
it's it's about sharing and caring and

00:21:55,679 --> 00:22:00,159
giving back

00:21:56,960 --> 00:22:02,960
and it's it's really better

00:22:00,159 --> 00:22:04,320
to team up with people and and solve

00:22:02,960 --> 00:22:06,799
common problems

00:22:04,320 --> 00:22:08,320
instead of trying to uh you know

00:22:06,799 --> 00:22:10,480
reinvent the wheel

00:22:08,320 --> 00:22:12,080
um again again and again and even

00:22:10,480 --> 00:22:14,080
despite initial blockers

00:22:12,080 --> 00:22:15,840
and and things to overcome it's

00:22:14,080 --> 00:22:19,039
extremely valuable

00:22:15,840 --> 00:22:22,559
to uh to essentially

00:22:19,039 --> 00:22:23,280
do things together and because that's

00:22:22,559 --> 00:22:24,960
how

00:22:23,280 --> 00:22:27,280
how things scale up you cannot do

00:22:24,960 --> 00:22:28,799
everything alone within the same pace

00:22:27,280 --> 00:22:32,559
and velocity

00:22:28,799 --> 00:22:32,880
and in what it means in the future for

00:22:32,559 --> 00:22:35,200
us

00:22:32,880 --> 00:22:37,280
especially for promptious ecosystem and

00:22:35,200 --> 00:22:40,720
tunnels and cortex project

00:22:37,280 --> 00:22:43,440
is that we we don't have any reason to

00:22:40,720 --> 00:22:45,360
to stop doing that and stop doing uh

00:22:43,440 --> 00:22:47,280
even stronger collaboration in the near

00:22:45,360 --> 00:22:51,200
future because

00:22:47,280 --> 00:22:54,720
yeah one does not change a winning team

00:22:51,200 --> 00:22:56,320
obviously so that's it from our side

00:22:54,720 --> 00:22:59,440
thank you for listening to us

00:22:56,320 --> 00:23:02,400
um feel free to ask questions um on

00:22:59,440 --> 00:23:05,360
cncfs like either cortex or thanos

00:23:02,400 --> 00:23:06,320
channels and we are seeing you there

00:23:05,360 --> 00:23:09,840
thank you

00:23:06,320 --> 00:23:09,840
thank you very much

00:23:11,520 --> 00:23:16,320
so welcome everyone and i think we are

00:23:13,520 --> 00:23:18,000
happy to take some questions

00:23:16,320 --> 00:23:19,360
there is already something in the qa

00:23:18,000 --> 00:23:22,640
thing which you can click

00:23:19,360 --> 00:23:25,440
down below as a panelist okay i

00:23:22,640 --> 00:23:28,159
will mark the first question being live

00:23:25,440 --> 00:23:30,640
so we have a question from michael

00:23:28,159 --> 00:23:31,760
um can we expect cortex and tunnels to

00:23:30,640 --> 00:23:33,840
eventually merge

00:23:31,760 --> 00:23:34,880
into one project given that both

00:23:33,840 --> 00:23:38,080
projects start

00:23:34,880 --> 00:23:41,120
converging on common code goal

00:23:38,080 --> 00:23:44,480
the same as open telemetry

00:23:41,120 --> 00:23:46,799
what do you think marco uh

00:23:44,480 --> 00:23:48,720
well that's a good question we don't

00:23:46,799 --> 00:23:52,080
have any plan yet

00:23:48,720 --> 00:23:55,120
but as we as we close the the talk

00:23:52,080 --> 00:23:56,000
um this collaboration is working very

00:23:55,120 --> 00:23:59,679
well so far

00:23:56,000 --> 00:24:03,200
uh so we don't have any reason to um

00:23:59,679 --> 00:24:05,039
to not continue uh collaborating um

00:24:03,200 --> 00:24:06,240
a few years ago that the two

00:24:05,039 --> 00:24:07,919
architectures were

00:24:06,240 --> 00:24:10,000
very different uh now they're getting

00:24:07,919 --> 00:24:12,240
closer and with the block storage we're

00:24:10,000 --> 00:24:15,840
building into into cortex

00:24:12,240 --> 00:24:19,600
um we forced ourselves

00:24:15,840 --> 00:24:22,799
to speak the same store api of thomas

00:24:19,600 --> 00:24:26,080
internally so basically

00:24:22,799 --> 00:24:27,520
even today you can run a cortex block

00:24:26,080 --> 00:24:31,600
storage cluster

00:24:27,520 --> 00:24:32,480
and you can have like esoterical setups

00:24:31,600 --> 00:24:34,640
like thanos

00:24:32,480 --> 00:24:36,320
querying from from both from tunnels and

00:24:34,640 --> 00:24:38,720
cortex and stuff like this so basically

00:24:36,320 --> 00:24:39,840
we are speaking the same the same api

00:24:38,720 --> 00:24:43,120
now

00:24:39,840 --> 00:24:46,400
and and this obviously um will open up

00:24:43,120 --> 00:24:50,320
uh to a stronger integration

00:24:46,400 --> 00:24:54,480
uh between the two projects over the

00:24:50,320 --> 00:24:56,480
near future yeah i fully agree with

00:24:54,480 --> 00:24:57,760
all the little things that marco said

00:24:56,480 --> 00:25:00,480
from my side

00:24:57,760 --> 00:25:01,440
um i would also mention that we don't

00:25:00,480 --> 00:25:03,679
want to push

00:25:01,440 --> 00:25:04,960
and force anything just because i don't

00:25:03,679 --> 00:25:06,640
know to merge

00:25:04,960 --> 00:25:08,960
from i don't know marketing side

00:25:06,640 --> 00:25:11,760
whatever uh we want to

00:25:08,960 --> 00:25:14,320
have this collaboration to go forward or

00:25:11,760 --> 00:25:15,600
stay or whatever naturally and

00:25:14,320 --> 00:25:18,720
essentially

00:25:15,600 --> 00:25:19,039
um just go in the direction where we can

00:25:18,720 --> 00:25:21,919
see

00:25:19,039 --> 00:25:24,000
benefit from both projects and uh and

00:25:21,919 --> 00:25:26,240
that's it and let's see how it goes um

00:25:24,000 --> 00:25:27,600
right now it's it's getting closer and

00:25:26,240 --> 00:25:31,440
closer together but

00:25:27,600 --> 00:25:31,440
yeah whatever will work for both teams

00:25:34,080 --> 00:25:38,159
and i think we have another question to

00:25:36,240 --> 00:25:41,360
you marcus specifically

00:25:38,159 --> 00:25:43,600
can you read that yeah uh

00:25:41,360 --> 00:25:44,480
marco you told recently uh joined the

00:25:43,600 --> 00:25:46,400
cortex team

00:25:44,480 --> 00:25:48,000
as far as i know both projects are far

00:25:46,400 --> 00:25:51,120
from be called the simple

00:25:48,000 --> 00:25:52,559
and i agree um from your talk i do

00:25:51,120 --> 00:25:54,960
understand that you have to learn both

00:25:52,559 --> 00:25:56,960
to contribute to one or maybe even three

00:25:54,960 --> 00:25:58,640
i guess you mentioned prometheus do you

00:25:56,960 --> 00:26:00,400
think that this would affect on boarding

00:25:58,640 --> 00:26:01,679
new contributors especially open source

00:26:00,400 --> 00:26:04,320
contributors

00:26:01,679 --> 00:26:05,279
that's a very good question um so the

00:26:04,320 --> 00:26:09,440
short answer

00:26:05,279 --> 00:26:11,520
is you don't need to

00:26:09,440 --> 00:26:13,360
understand every single beat of

00:26:11,520 --> 00:26:14,559
prometheus tunnels and cortex to start

00:26:13,360 --> 00:26:17,279
contributing

00:26:14,559 --> 00:26:17,679
um and i don't understand every single

00:26:17,279 --> 00:26:20,159
bit

00:26:17,679 --> 00:26:22,080
uh even in cortex there are specific

00:26:20,159 --> 00:26:24,480
cortex components

00:26:22,080 --> 00:26:26,080
i have never worked on uh which i'm not

00:26:24,480 --> 00:26:27,840
super familiar with

00:26:26,080 --> 00:26:29,120
um and the same happened with with

00:26:27,840 --> 00:26:33,039
prometheus and uh

00:26:29,120 --> 00:26:35,919
and thanos um and uh

00:26:33,039 --> 00:26:36,960
i think that actually on the contrary um

00:26:35,919 --> 00:26:41,279
reusing

00:26:36,960 --> 00:26:45,200
code simplifies because many times uh

00:26:41,279 --> 00:26:47,679
we without using it we would end up

00:26:45,200 --> 00:26:48,400
rewriting the same things twice or three

00:26:47,679 --> 00:26:50,720
times

00:26:48,400 --> 00:26:52,159
and on the contrary reusing means that

00:26:50,720 --> 00:26:55,520
once you learned

00:26:52,159 --> 00:26:58,240
once um you know how it works in the

00:26:55,520 --> 00:26:59,440
in the three projects if both of them if

00:26:58,240 --> 00:27:03,760
all three of them

00:26:59,440 --> 00:27:03,760
uh rely on the same code base

00:27:04,720 --> 00:27:07,919
yeah exactly and i think the fact that

00:27:06,559 --> 00:27:11,919
um some of the

00:27:07,919 --> 00:27:13,679
bids and components are reused across

00:27:11,919 --> 00:27:15,200
even four places because you are also

00:27:13,679 --> 00:27:17,440
contributor to loki

00:27:15,200 --> 00:27:18,640
and we use some some of things there as

00:27:17,440 --> 00:27:20,640
well um

00:27:18,640 --> 00:27:22,080
across prometheus thanos cortex and loki

00:27:20,640 --> 00:27:24,399
and so on so

00:27:22,080 --> 00:27:25,600
um yeah i think this is also easier

00:27:24,399 --> 00:27:27,440
because it's still kind of the same

00:27:25,600 --> 00:27:30,080
ecosystem the same

00:27:27,440 --> 00:27:32,240
um similar characteristic and the same

00:27:30,080 --> 00:27:33,919
code sometimes so

00:27:32,240 --> 00:27:36,159
i hope it was easier because of that for

00:27:33,919 --> 00:27:36,159
you

00:27:38,000 --> 00:27:45,600
um amazing so we have a question now

00:27:41,919 --> 00:27:48,880
um from slack channel from pericles um

00:27:45,600 --> 00:27:52,240
where do those two projects compete

00:27:48,880 --> 00:27:54,000
in the end right now so

00:27:52,240 --> 00:27:56,000
i guess is there any competition and in

00:27:54,000 --> 00:27:57,520
what level

00:27:56,000 --> 00:27:59,840
right now at the moment that's a good

00:27:57,520 --> 00:27:59,840
question

00:28:00,480 --> 00:28:04,080
um i don't know i can i can i can start

00:28:03,760 --> 00:28:06,559
so

00:28:04,080 --> 00:28:09,120
well definitely there is some kind of

00:28:06,559 --> 00:28:12,320
competition in the forum that people

00:28:09,120 --> 00:28:14,399
don't know what to choose from and um

00:28:12,320 --> 00:28:16,559
especially those projects are evolving

00:28:14,399 --> 00:28:20,720
and having the similar features

00:28:16,559 --> 00:28:23,360
it's hard to um kind of

00:28:20,720 --> 00:28:24,799
choose from the from the end user uh

00:28:23,360 --> 00:28:26,559
which project to start with especially

00:28:24,799 --> 00:28:28,960
if they are new and they want to just

00:28:26,559 --> 00:28:30,240
grab some long-term storage so i can

00:28:28,960 --> 00:28:34,960
imagine this

00:28:30,240 --> 00:28:37,279
can be some kind of competition um

00:28:34,960 --> 00:28:38,720
so yeah there is still some competition

00:28:37,279 --> 00:28:40,159
but like we

00:28:38,720 --> 00:28:41,760
we are believing that you know

00:28:40,159 --> 00:28:44,720
especially from thanos side i

00:28:41,760 --> 00:28:46,559
i kind of speak for cortex side we

00:28:44,720 --> 00:28:50,399
believe that there is so many people

00:28:46,559 --> 00:28:51,919
needing that needs um this kind of help

00:28:50,399 --> 00:28:53,120
in long-term storage and global view

00:28:51,919 --> 00:28:55,360
whatever that

00:28:53,120 --> 00:28:57,520
it's not the end of the world if half of

00:28:55,360 --> 00:28:59,679
the users will go to cortex especially

00:28:57,520 --> 00:29:03,120
that our storage format is actually

00:28:59,679 --> 00:29:03,520
compatible soon so in my opinion that's

00:29:03,120 --> 00:29:05,679
why

00:29:03,520 --> 00:29:06,720
collaboration is is good here there's

00:29:05,679 --> 00:29:13,840
like lots

00:29:06,720 --> 00:29:13,840
huge demand as well

00:29:14,320 --> 00:29:17,760
do you have anything to add mark on that

00:29:16,240 --> 00:29:19,600
uh not really um

00:29:17,760 --> 00:29:21,600
i guess uh to be super honest there's

00:29:19,600 --> 00:29:24,960
still a bit of competition in terms of

00:29:21,600 --> 00:29:27,440
query performances um

00:29:24,960 --> 00:29:28,960
but yeah at the end of the day um once

00:29:27,440 --> 00:29:32,000
we found uh

00:29:28,960 --> 00:29:34,399
like a bottleneck in one of project uh

00:29:32,000 --> 00:29:36,159
we immediately share it with the other

00:29:34,399 --> 00:29:39,520
project

00:29:36,159 --> 00:29:41,440
so we catch up quite quickly

00:29:39,520 --> 00:29:43,279
on both sides as soon as we learn

00:29:41,440 --> 00:29:47,039
something new

00:29:43,279 --> 00:29:47,440
speaking about cortex to be super fair

00:29:47,039 --> 00:29:49,520
the

00:29:47,440 --> 00:29:51,600
block storage which is based on thanos

00:29:49,520 --> 00:29:52,880
is still competing hard with the chunk

00:29:51,600 --> 00:29:54,799
storage i mean

00:29:52,880 --> 00:29:56,480
making the block storage the query

00:29:54,799 --> 00:29:58,000
performances of the block storage as

00:29:56,480 --> 00:30:00,799
fast as the chunk storage

00:29:58,000 --> 00:30:01,120
uh in in cortex is still a challenge for

00:30:00,799 --> 00:30:02,720
me

00:30:01,120 --> 00:30:04,159
and a few other people that's working on

00:30:02,720 --> 00:30:06,799
the block storage

00:30:04,159 --> 00:30:08,000
um because it's pretty fast and it

00:30:06,799 --> 00:30:10,960
scaled very well

00:30:08,000 --> 00:30:12,159
um but again um we see room for

00:30:10,960 --> 00:30:15,200
improvement

00:30:12,159 --> 00:30:19,120
and i i'm i'm pretty comfortable

00:30:15,200 --> 00:30:22,399
saying that uh we are now quite closer

00:30:19,120 --> 00:30:27,039
and we we may reach a

00:30:22,399 --> 00:30:27,039
performance parity very soon

00:30:27,279 --> 00:30:33,600
nice amazing um we have

00:30:31,200 --> 00:30:34,640
three more questions i guess um so q a

00:30:33,600 --> 00:30:37,120
question

00:30:34,640 --> 00:30:38,960
what are the basic basic scenarios where

00:30:37,120 --> 00:30:39,520
one would choose cortex instead of

00:30:38,960 --> 00:30:42,559
thanos

00:30:39,520 --> 00:30:43,520
and tanos instead of cortex is there one

00:30:42,559 --> 00:30:50,559
rule

00:30:43,520 --> 00:30:54,320
fits all deployment oleg project

00:30:50,559 --> 00:30:56,799
um i can start with this as well so

00:30:54,320 --> 00:30:56,799
i think

00:30:58,159 --> 00:31:03,360
both can you know if you really want to

00:31:01,279 --> 00:31:05,279
if you are i don't know really flexible

00:31:03,360 --> 00:31:07,919
like both in some way can

00:31:05,279 --> 00:31:08,640
can rule wonder wolf is all i would say

00:31:07,919 --> 00:31:12,399
but

00:31:08,640 --> 00:31:15,760
um let's say right now the

00:31:12,399 --> 00:31:17,840
the kind of um suggestion we are

00:31:15,760 --> 00:31:19,440
we're making to the users i think is

00:31:17,840 --> 00:31:22,320
that where you have

00:31:19,440 --> 00:31:23,679
kind of simple use cases and you don't

00:31:22,320 --> 00:31:26,080
need that super

00:31:23,679 --> 00:31:26,880
you know high performance queries

00:31:26,080 --> 00:31:30,320
latency

00:31:26,880 --> 00:31:32,320
you you are definitely um worth checking

00:31:30,320 --> 00:31:35,120
tunnels and especially if you want to

00:31:32,320 --> 00:31:37,919
gradually install

00:31:35,120 --> 00:31:40,559
the kind of long-term storage and global

00:31:37,919 --> 00:31:44,159
view and all the features

00:31:40,559 --> 00:31:47,679
however you choose maybe cortex if you

00:31:44,159 --> 00:31:49,360
have already multiple teams working um

00:31:47,679 --> 00:31:51,440
that that has to work on the same

00:31:49,360 --> 00:31:53,919
centralized let's say data

00:31:51,440 --> 00:31:55,120
cortex has already nice multitask uh

00:31:53,919 --> 00:31:57,679
tenancy features

00:31:55,120 --> 00:31:58,240
and thanos is only catching up right now

00:31:57,679 --> 00:32:00,159
um

00:31:58,240 --> 00:32:02,080
and also there like high priority on

00:32:00,159 --> 00:32:04,080
high performance queries so

00:32:02,080 --> 00:32:05,679
um since everything is centralized from

00:32:04,080 --> 00:32:06,320
the very beginning and scratch and

00:32:05,679 --> 00:32:09,120
design

00:32:06,320 --> 00:32:10,320
and there are lots of caches uh caching

00:32:09,120 --> 00:32:13,519
layers more than even

00:32:10,320 --> 00:32:14,080
tunnels um you might want to choose that

00:32:13,519 --> 00:32:15,919
one

00:32:14,080 --> 00:32:17,679
however there is some complexity on the

00:32:15,919 --> 00:32:19,600
way that would be my kind of

00:32:17,679 --> 00:32:22,000
quick glance but again the things are

00:32:19,600 --> 00:32:22,000
changing

00:32:26,799 --> 00:32:33,440
anything else marco if not i

00:32:30,080 --> 00:32:36,880
agree with with what you shared okay

00:32:33,440 --> 00:32:38,960
so josh is asking how do you approach to

00:32:36,880 --> 00:32:40,559
working on a code base which you aren't

00:32:38,960 --> 00:32:42,880
familiar

00:32:40,559 --> 00:32:44,399
more like habits and step which you have

00:32:42,880 --> 00:32:47,919
cultivated for approaching

00:32:44,399 --> 00:32:50,559
new code base maybe marco

00:32:47,919 --> 00:32:52,320
right uh so how do you approach uh

00:32:50,559 --> 00:32:55,600
working on a code base which

00:32:52,320 --> 00:32:59,679
you're not familiar um start simple and

00:32:55,600 --> 00:33:03,600
focus on one single problem to solve um

00:32:59,679 --> 00:33:06,320
if even if you look at uh

00:33:03,600 --> 00:33:06,799
i mean test systems look complicated

00:33:06,320 --> 00:33:09,120
from

00:33:06,799 --> 00:33:10,000
uh or may look complicated at first

00:33:09,120 --> 00:33:12,080
sight from

00:33:10,000 --> 00:33:13,360
an architectural perspective but when

00:33:12,080 --> 00:33:15,840
you go deeper into

00:33:13,360 --> 00:33:17,120
a single component they're actually

00:33:15,840 --> 00:33:20,240
pretty straightforward

00:33:17,120 --> 00:33:23,120
the way it works um so my suggestion

00:33:20,240 --> 00:33:24,880
is to well you usually start approaching

00:33:23,120 --> 00:33:26,480
a code base

00:33:24,880 --> 00:33:28,000
with a reason like you want to to

00:33:26,480 --> 00:33:28,880
improve something or you want to fix a

00:33:28,000 --> 00:33:32,640
bug

00:33:28,880 --> 00:33:32,640
um just keep focus on it

00:33:33,200 --> 00:33:38,480
and and then your knowledge will grow

00:33:36,480 --> 00:33:40,559
as more as you you contribute with the

00:33:38,480 --> 00:33:42,720
projector but don't expect to

00:33:40,559 --> 00:33:44,320
to learn everything immediately uh it

00:33:42,720 --> 00:33:45,120
will not happen it doesn't happen to

00:33:44,320 --> 00:33:48,399
anyone

00:33:45,120 --> 00:33:50,640
but this shouldn't scare you and

00:33:48,399 --> 00:33:51,760
don't be scared uh to submit

00:33:50,640 --> 00:33:54,240
contributions

00:33:51,760 --> 00:33:55,279
even if they are in a draft state like

00:33:54,240 --> 00:33:56,960
you're getting

00:33:55,279 --> 00:33:59,279
close to something but you get test

00:33:56,960 --> 00:34:01,840
failing and you don't understand why

00:33:59,279 --> 00:34:02,320
uh or you are blocked on something open

00:34:01,840 --> 00:34:05,279
apr

00:34:02,320 --> 00:34:05,600
open a draft pr or join um on the cortex

00:34:05,279 --> 00:34:09,040
or

00:34:05,600 --> 00:34:12,320
thanos slack channels ask for help

00:34:09,040 --> 00:34:15,520
uh we are here to help um and we are

00:34:12,320 --> 00:34:18,320
here to um to also guide you

00:34:15,520 --> 00:34:21,839
uh if you need any help with the first

00:34:18,320 --> 00:34:21,839
time contributions

00:34:22,560 --> 00:34:26,480
yeah i i definitely want to highlight

00:34:25,200 --> 00:34:31,599
especially the part of

00:34:26,480 --> 00:34:31,599
of being blocked and not saying anything

00:34:31,760 --> 00:34:38,079
just talk to people and and try to push

00:34:35,040 --> 00:34:40,320
and submit something and uh there are

00:34:38,079 --> 00:34:42,480
very often the case that the reviewers

00:34:40,320 --> 00:34:45,440
will point you in the right direction

00:34:42,480 --> 00:34:46,079
and explain maybe one thing that you you

00:34:45,440 --> 00:34:48,639
cannot

00:34:46,079 --> 00:34:50,800
or you are confused with so um

00:34:48,639 --> 00:34:53,520
definitely collaborate is the answer

00:34:50,800 --> 00:34:55,280
uh but also yeah be patient and and try

00:34:53,520 --> 00:34:57,359
to understand the code base

00:34:55,280 --> 00:35:00,000
fortunately we all program in go

00:34:57,359 --> 00:35:03,119
especially in this ecosystem which is

00:35:00,000 --> 00:35:04,000
using roughly the same consistent style

00:35:03,119 --> 00:35:06,480
guide so

00:35:04,000 --> 00:35:08,480
um we are kind of better than other

00:35:06,480 --> 00:35:12,480
ecosystem i hope for this

00:35:08,480 --> 00:35:12,480
for this particular part

00:35:15,359 --> 00:35:19,200
okay any other question um i think you

00:35:17,839 --> 00:35:21,680
we have kind of lost on

00:35:19,200 --> 00:35:23,280
on on chat that was actually already

00:35:21,680 --> 00:35:25,839
answered

00:35:23,280 --> 00:35:26,960
it was about strong points from each of

00:35:25,839 --> 00:35:28,640
uh project

00:35:26,960 --> 00:35:31,839
we kind of covered that i think with the

00:35:28,640 --> 00:35:31,839
previous answer

00:35:35,920 --> 00:35:41,760
if not then thank you for listening to

00:35:39,599 --> 00:35:41,760
us

00:35:42,240 --> 00:35:46,560
yeah richie are you ignoring the

00:35:44,400 --> 00:35:49,920
question on slack

00:35:46,560 --> 00:35:52,560
yes okay good i i unless you want to

00:35:49,920 --> 00:35:52,560
explain that

00:35:53,280 --> 00:35:58,000
no no okay no

00:35:56,400 --> 00:35:59,520
everyone who's not on slack is wondering

00:35:58,000 --> 00:36:01,040
what we're talking about but that's fine

00:35:59,520 --> 00:36:04,400
you should be on slack and

00:36:01,040 --> 00:36:04,880
exactly and making bad and good comments

00:36:04,400 --> 00:36:08,960
about

00:36:04,880 --> 00:36:13,839
the the content along with us

00:36:08,960 --> 00:36:13,839
thank you very much thank you very much

00:36:19,120 --> 00:36:22,280

YouTube URL: https://www.youtube.com/watch?v=2oTLouUvsac


