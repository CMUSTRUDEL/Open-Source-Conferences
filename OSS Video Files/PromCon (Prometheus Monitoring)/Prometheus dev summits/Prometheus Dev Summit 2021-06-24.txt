Title: Prometheus Dev Summit 2021-06-24
Publication date: 2021-06-28
Playlist: Prometheus dev summits
Description: 
	https://docs.google.com/document/d/11LC3wJcVk00l8w5P3oLQ-m3Y37iom6INAMEu2ZAGIIE/edit?ts=60d93074#
Captions: 
	00:00:03,840 --> 00:00:06,160
so

00:00:04,560 --> 00:00:08,080
uh welcome everyone welcome to the

00:00:06,160 --> 00:00:10,880
youtube audience um

00:00:08,080 --> 00:00:11,440
as per usual um everyone who's not on

00:00:10,880 --> 00:00:13,759
team is

00:00:11,440 --> 00:00:17,199
more than welcome to to pipe up at any

00:00:13,759 --> 00:00:20,240
time make your voices heard that's

00:00:17,199 --> 00:00:22,880
a specific design goal of um of those

00:00:20,240 --> 00:00:24,880
uh calls of those deaf summits the one

00:00:22,880 --> 00:00:25,680
thing if we have a call for consensus

00:00:24,880 --> 00:00:27,680
that's the one

00:00:25,680 --> 00:00:28,880
time when when we ask you if you're not

00:00:27,680 --> 00:00:31,519
a team member

00:00:28,880 --> 00:00:32,480
to uh to not raise your voice either way

00:00:31,519 --> 00:00:35,760
but

00:00:32,480 --> 00:00:38,079
you're actively encouraged to raise your

00:00:35,760 --> 00:00:38,079
voice

00:00:38,239 --> 00:00:43,200
um to get started there is one thing

00:00:40,879 --> 00:00:44,160
which i put in as a priority override

00:00:43,200 --> 00:00:47,920
and i didn't see

00:00:44,160 --> 00:00:51,120
any any minus ones on it

00:00:47,920 --> 00:00:52,879
we need to finalize

00:00:51,120 --> 00:00:56,079
the prometheus conformance program of

00:00:52,879 --> 00:00:57,600
course cncf needs it from us so they can

00:00:56,079 --> 00:00:59,520
do their thing

00:00:57,600 --> 00:01:02,160
presented to governing board for for

00:00:59,520 --> 00:01:05,920
approval blah blah blah blah

00:01:02,160 --> 00:01:08,000
as such everyone is more than welcome to

00:01:05,920 --> 00:01:08,960
to look at the proposal to look at the

00:01:08,000 --> 00:01:11,600
pr which

00:01:08,960 --> 00:01:12,640
is going to result in this proposal if

00:01:11,600 --> 00:01:14,640
merged

00:01:12,640 --> 00:01:16,560
of course if we get consensus on this we

00:01:14,640 --> 00:01:18,080
can just um

00:01:16,560 --> 00:01:20,400
forward it to chris and he can get

00:01:18,080 --> 00:01:20,400
emerged

00:01:21,040 --> 00:01:27,840
do we need to discuss it or should we

00:01:22,799 --> 00:01:27,840
just have a call for consensus

00:01:29,040 --> 00:01:32,880
i have already approved it my only

00:01:30,880 --> 00:01:34,799
concern is that to promote this release

00:01:32,880 --> 00:01:36,640
this is really like not a long time for

00:01:34,799 --> 00:01:38,000
many companies

00:01:36,640 --> 00:01:40,320
and that would require a lot of

00:01:38,000 --> 00:01:42,720
involvement from there to keep staying

00:01:40,320 --> 00:01:44,479
compliant but that's my only concern and

00:01:42,720 --> 00:01:46,880
i'm happy to start like this and see if

00:01:44,479 --> 00:01:52,079
we get complaints about it

00:01:46,880 --> 00:01:52,079
um yes that's one of the things where

00:01:52,399 --> 00:01:55,439
i think it might be possible that we

00:01:53,840 --> 00:01:58,719
change it over time

00:01:55,439 --> 00:02:00,880
um but that's the case of trying to

00:01:58,719 --> 00:02:01,920
if we take something away which we used

00:02:00,880 --> 00:02:04,960
to give

00:02:01,920 --> 00:02:06,640
um people will complain more than if if

00:02:04,960 --> 00:02:08,319
that's the starting condition and then

00:02:06,640 --> 00:02:10,239
we find out that it's

00:02:08,319 --> 00:02:12,400
not workable from scene f's point of

00:02:10,239 --> 00:02:15,520
view the timelines

00:02:12,400 --> 00:02:16,400
appear appear okay and i know they're

00:02:15,520 --> 00:02:19,440
quite aggressive

00:02:16,400 --> 00:02:23,920
by design um but we can also

00:02:19,440 --> 00:02:23,920
we can always give more time

00:02:28,720 --> 00:02:33,519
yeah and i also think that even within

00:02:31,519 --> 00:02:36,400
the team we do not support

00:02:33,519 --> 00:02:37,040
basically more than two the two last

00:02:36,400 --> 00:02:40,400
three days

00:02:37,040 --> 00:02:44,239
so i think it's also unfair to ask for

00:02:40,400 --> 00:02:44,239
well to allow more at the moment

00:02:44,480 --> 00:02:49,760
so i think this is a reasonable start

00:02:47,920 --> 00:02:51,200
so it's good it's good for me i have

00:02:49,760 --> 00:02:55,040
already approved the pr so

00:02:51,200 --> 00:02:55,040
we can do a call for consensus i think

00:02:55,120 --> 00:02:59,920
that's also my god anyone else

00:03:00,159 --> 00:03:05,840
okay so uh consensus

00:03:30,840 --> 00:03:33,840
okay

00:03:33,920 --> 00:03:37,599
consensus we approve the prometheus

00:03:35,760 --> 00:03:42,480
conformance program as per

00:03:37,599 --> 00:03:46,480
commit or yeah as com as per commit

00:03:42,480 --> 00:03:49,680
which is linked

00:03:46,480 --> 00:03:49,680
all agreed anyone disagree

00:03:51,760 --> 00:03:55,680
very good i also note that for the team

00:03:54,400 --> 00:03:57,760
members who are not there the pull

00:03:55,680 --> 00:04:01,920
request is already three days old so

00:03:57,760 --> 00:04:06,480
lazy consensus supplies it's in the cncf

00:04:01,920 --> 00:04:06,480
not in the prometheus repository so

00:04:07,280 --> 00:04:14,799
it's it doesn't have precedent

00:04:10,720 --> 00:04:16,880
but it i suspected it was

00:04:14,799 --> 00:04:17,919
uncontroversial anyway uh but wanted to

00:04:16,880 --> 00:04:21,199
make sure that

00:04:17,919 --> 00:04:26,160
we do have consenting so next one

00:04:21,199 --> 00:04:26,160
is going to be fun

00:04:26,479 --> 00:04:32,720
do we have ben here no we don't um

00:04:30,080 --> 00:04:33,919
next one is openmetrics underscore

00:04:32,720 --> 00:04:36,639
created and how to

00:04:33,919 --> 00:04:38,000
how to handle it with the amount of

00:04:36,639 --> 00:04:41,759
metrics which it creates

00:04:38,000 --> 00:04:43,600
uh julian put it there

00:04:41,759 --> 00:04:44,880
yes so some of the instrumentation

00:04:43,600 --> 00:04:49,520
laboratories for example

00:04:44,880 --> 00:04:51,280
java uh at the creating metrics when you

00:04:49,520 --> 00:04:53,600
have open metrics enabled and they

00:04:51,280 --> 00:04:54,240
cannot you cannot disable open music by

00:04:53,600 --> 00:04:56,240
the way

00:04:54,240 --> 00:04:58,639
and we have seen some user for which

00:04:56,240 --> 00:05:00,240
this is causing a disturbance i didn't

00:04:58,639 --> 00:05:02,639
understand why they have that and why

00:05:00,240 --> 00:05:03,840
this is causing so many metrics that

00:05:02,639 --> 00:05:07,120
they have no usage for

00:05:03,840 --> 00:05:08,960
informatives and along the discussions i

00:05:07,120 --> 00:05:10,560
know that julius was even proposing that

00:05:08,960 --> 00:05:12,720
we just dropped them

00:05:10,560 --> 00:05:14,080
and prometheus of course there are other

00:05:12,720 --> 00:05:15,600
concerns so i wanted to bring the

00:05:14,080 --> 00:05:17,600
discussion here so we can

00:05:15,600 --> 00:05:18,800
put an end to that issue and decide what

00:05:17,600 --> 00:05:21,680
we do with those

00:05:18,800 --> 00:05:21,680
creative metrics

00:05:22,400 --> 00:05:26,639
yeah it's something that one at least

00:05:25,120 --> 00:05:28,160
one of our development teams has

00:05:26,639 --> 00:05:29,759
commented on and

00:05:28,160 --> 00:05:31,520
as a result they haven't switched to the

00:05:29,759 --> 00:05:33,919
latest version of

00:05:31,520 --> 00:05:34,960
the java library because from their

00:05:33,919 --> 00:05:38,080
perspective it's

00:05:34,960 --> 00:05:38,639
adding huge i think it's memory that

00:05:38,080 --> 00:05:40,479
it's

00:05:38,639 --> 00:05:42,080
adding a huge amount to and therefore

00:05:40,479 --> 00:05:43,759
they have huge performance concerns

00:05:42,080 --> 00:05:46,880
about it

00:05:43,759 --> 00:05:49,360
but are you speaking about issues on the

00:05:46,880 --> 00:05:50,960
client side or the promotive side uh

00:05:49,360 --> 00:05:52,960
this is on the client side sorry

00:05:50,960 --> 00:05:54,080
so even the client side of issues with

00:05:52,960 --> 00:05:56,240
that yeah

00:05:54,080 --> 00:05:57,120
because it's from their perspective it's

00:05:56,240 --> 00:05:59,039
adding

00:05:57,120 --> 00:06:00,000
i think there's a number of different

00:05:59,039 --> 00:06:00,720
things that it's adding because it's

00:06:00,000 --> 00:06:04,160
also

00:06:00,720 --> 00:06:05,759
possibly exemplar suffers as well that's

00:06:04,160 --> 00:06:08,560
in a similar sort of version of the

00:06:05,759 --> 00:06:10,479
library and so it suddenly

00:06:08,560 --> 00:06:11,680
they tried it and it and the the

00:06:10,479 --> 00:06:13,600
resource usage

00:06:11,680 --> 00:06:15,039
increased dramatically which they were

00:06:13,600 --> 00:06:17,199
quite surprised about

00:06:15,039 --> 00:06:18,639
and then because there's quite a long

00:06:17,199 --> 00:06:20,000
issue about it

00:06:18,639 --> 00:06:22,720
they were sort of oh we're going to hold

00:06:20,000 --> 00:06:25,840
off and see what's going on rather than

00:06:22,720 --> 00:06:27,840
continue with that i mean i i suppose i

00:06:25,840 --> 00:06:29,840
can understand the concern

00:06:27,840 --> 00:06:31,280
like i don't know what the

00:06:29,840 --> 00:06:34,720
implementation looks like but

00:06:31,280 --> 00:06:39,199
i guess it has the potential to double

00:06:34,720 --> 00:06:39,199
the resource usage right

00:06:39,919 --> 00:06:44,639
worst case yes depending on

00:06:42,000 --> 00:06:47,120
implementation

00:06:44,639 --> 00:06:48,000
we had a similar issue with python which

00:06:47,120 --> 00:06:51,120
had this way

00:06:48,000 --> 00:06:52,960
earlier were one i mean the first user i

00:06:51,120 --> 00:06:55,599
think who reported

00:06:52,960 --> 00:06:57,199
was actually one who was scraping via a

00:06:55,599 --> 00:06:58,400
low bandwidth connection which is of

00:06:57,199 --> 00:07:01,360
course not

00:06:58,400 --> 00:07:03,520
the signature use case of prometheus but

00:07:01,360 --> 00:07:05,759
this user was upset that it essentially

00:07:03,520 --> 00:07:08,160
doubles the throughput for scraping

00:07:05,759 --> 00:07:09,680
which is another one where just dropping

00:07:08,160 --> 00:07:13,440
it on the prometheus side

00:07:09,680 --> 00:07:14,240
wouldn't really help and yeah and then

00:07:13,440 --> 00:07:15,680
it was

00:07:14,240 --> 00:07:18,080
back then and the discussion was said

00:07:15,680 --> 00:07:20,960
you can just put a relabel rule

00:07:18,080 --> 00:07:22,479
in there to to drop uh those metrics to

00:07:20,960 --> 00:07:25,759
not ingest them

00:07:22,479 --> 00:07:26,880
uh which i guess is good enough if it's

00:07:25,759 --> 00:07:28,240
actually only a program on the

00:07:26,880 --> 00:07:30,560
prometheus site

00:07:28,240 --> 00:07:32,160
but some users have problems somewhere

00:07:30,560 --> 00:07:34,880
else

00:07:32,160 --> 00:07:35,919
and i did look at the open metric

00:07:34,880 --> 00:07:38,560
specification

00:07:35,919 --> 00:07:41,599
and the libraries should expose the

00:07:38,560 --> 00:07:43,680
created so it's not a must

00:07:41,599 --> 00:07:46,160
so we could drop them directly on the

00:07:43,680 --> 00:07:49,680
client side

00:07:46,160 --> 00:07:52,960
um it's a must i have seen that as

00:07:49,680 --> 00:07:55,440
i ever had a shoot yeah

00:07:52,960 --> 00:07:57,280
i also read it as a shirt if we go

00:07:55,440 --> 00:07:58,000
double check yeah i also thought it's a

00:07:57,280 --> 00:07:59,599
shoot but

00:07:58,000 --> 00:08:02,000
all right we can check that right we

00:07:59,599 --> 00:08:04,240
have a spec exactly

00:08:02,000 --> 00:08:05,280
i thought it was a i thought it was a

00:08:04,240 --> 00:08:08,800
must so

00:08:05,280 --> 00:08:12,319
um just uh from from my

00:08:08,800 --> 00:08:16,000
side ben is not here but um

00:08:12,319 --> 00:08:20,240
initially the ask came from google um

00:08:16,000 --> 00:08:20,240
to to allow more um

00:08:20,400 --> 00:08:26,240
well not complexes to wrong word but

00:08:22,240 --> 00:08:26,240
basically a lot to allow more resilient

00:08:29,360 --> 00:08:33,519
and make predictions about how that

00:08:32,719 --> 00:08:36,000
thing

00:08:33,519 --> 00:08:39,680
develops in the future and such that's

00:08:36,000 --> 00:08:43,279
where the initial ask was coming from

00:08:39,680 --> 00:08:45,760
so it's not the

00:08:43,279 --> 00:08:47,760
the requirement or the art is not driven

00:08:45,760 --> 00:08:49,440
by anyone who is currently part of the

00:08:47,760 --> 00:08:52,480
openmetrics team

00:08:49,440 --> 00:08:54,000
um with my openmetrics head on we we

00:08:52,480 --> 00:08:57,279
stated that openmetrics

00:08:54,000 --> 00:09:00,640
intends to follow prometheus we do have

00:08:57,279 --> 00:09:04,320
a backward compatibility

00:09:00,640 --> 00:09:07,040
requirement in there but it's not yet

00:09:04,320 --> 00:09:09,440
gotten the stamp of approval by itf so

00:09:07,040 --> 00:09:12,560
it's still more malleable

00:09:09,440 --> 00:09:14,000
than than if if there was an official

00:09:12,560 --> 00:09:17,600
rfc

00:09:14,000 --> 00:09:20,640
so that that as the background from

00:09:17,600 --> 00:09:24,399
from openmetrics right

00:09:20,640 --> 00:09:27,600
my own stance um it makes

00:09:24,399 --> 00:09:28,080
sense but on the other hand if if it

00:09:27,600 --> 00:09:31,040
create

00:09:28,080 --> 00:09:31,680
problems where we didn't have problems

00:09:31,040 --> 00:09:34,959
with

00:09:31,680 --> 00:09:36,800
something we need to um we need to

00:09:34,959 --> 00:09:39,760
address

00:09:36,800 --> 00:09:40,399
uh bartek please say it so it's it's uh

00:09:39,760 --> 00:09:42,720
on the

00:09:40,399 --> 00:09:43,839
call maybe i don't want this on

00:09:42,720 --> 00:09:45,760
recording

00:09:43,839 --> 00:09:47,519
no i'm just kidding uh yeah i would i

00:09:45,760 --> 00:09:48,000
would vote to just have it to keep it

00:09:47,519 --> 00:09:50,560
simple

00:09:48,000 --> 00:09:51,200
and just maintain the same behavior of

00:09:50,560 --> 00:09:53,040
uh

00:09:51,200 --> 00:09:54,240
of the prometheus from the promoters

00:09:53,040 --> 00:09:57,120
perspective so

00:09:54,240 --> 00:09:58,560
um ignore those metrics because they're

00:09:57,120 --> 00:10:01,839
not useful what about that

00:09:58,560 --> 00:10:04,320
what's harm in this i i think

00:10:01,839 --> 00:10:05,760
the keep keeping this uh same behavior

00:10:04,320 --> 00:10:09,440
would actually be that the

00:10:05,760 --> 00:10:09,440
client can turn this off

00:10:09,680 --> 00:10:13,279
and now i think this is that would be my

00:10:12,640 --> 00:10:16,720
suggestion

00:10:13,279 --> 00:10:19,760
and my recommendation you have each

00:10:16,720 --> 00:10:20,959
uh client have a sense of should right

00:10:19,760 --> 00:10:22,959
like maybe

00:10:20,959 --> 00:10:24,959
maybe we can have it on by default but

00:10:22,959 --> 00:10:27,360
allow people to optionally

00:10:24,959 --> 00:10:28,160
um turn it off if this is a problem just

00:10:27,360 --> 00:10:30,079
like in this

00:10:28,160 --> 00:10:32,880
the created timezone is assured i just

00:10:30,079 --> 00:10:35,200
looked it up

00:10:32,880 --> 00:10:36,079
so i think i think it would make most

00:10:35,200 --> 00:10:37,920
sense to

00:10:36,079 --> 00:10:39,600
have an option on the instrumentation

00:10:37,920 --> 00:10:43,120
library because that would

00:10:39,600 --> 00:10:46,480
also address bandwidth problems client

00:10:43,120 --> 00:10:48,079
resource users problem plus it we

00:10:46,480 --> 00:10:49,839
haven't don't have to go down that

00:10:48,079 --> 00:10:52,320
rabbit hole of

00:10:49,839 --> 00:10:54,160
how we like this whole do we only

00:10:52,320 --> 00:10:55,279
present it if open matter is negotiated

00:10:54,160 --> 00:10:57,120
and then you have differences in the

00:10:55,279 --> 00:10:58,720
metrics created on the prometheus server

00:10:57,120 --> 00:11:01,839
depending on what you negotiate

00:10:58,720 --> 00:11:04,079
which is yet another yeah more complex

00:11:01,839 --> 00:11:04,079
issue

00:11:04,480 --> 00:11:07,680
wiretech's point i think it would make

00:11:06,160 --> 00:11:09,680
sense to to have

00:11:07,680 --> 00:11:11,839
a sample configuration maybe even

00:11:09,680 --> 00:11:13,839
commented out in the default com

00:11:11,839 --> 00:11:15,839
configuration to show people how to do

00:11:13,839 --> 00:11:16,320
it with relabeling if they want to do it

00:11:15,839 --> 00:11:19,680
through

00:11:16,320 --> 00:11:20,480
through relabeling but i do agree that

00:11:19,680 --> 00:11:25,040
extends

00:11:20,480 --> 00:11:28,880
or to have it on the client side

00:11:25,040 --> 00:11:29,279
um but is it by default on the client

00:11:28,880 --> 00:11:32,880
side

00:11:29,279 --> 00:11:35,120
uh disabled not specified um

00:11:32,880 --> 00:11:37,200
i i'm i already that's what i just

00:11:35,120 --> 00:11:38,000
wanted to say for the open metrics side

00:11:37,200 --> 00:11:40,399
i think

00:11:38,000 --> 00:11:42,399
uh this should be uh clarified because

00:11:40,399 --> 00:11:45,680
the current wording is if

00:11:42,399 --> 00:11:46,800
present then it must end in underscore

00:11:45,680 --> 00:11:48,720
created

00:11:46,800 --> 00:11:50,720
and that's not the best of wordings

00:11:48,720 --> 00:11:56,000
because even myself

00:11:50,720 --> 00:11:56,000
just doing a quick search got confused

00:11:56,480 --> 00:12:00,800
well the wording further up is that a

00:11:58,720 --> 00:12:02,079
metric with type counter should have a

00:12:00,800 --> 00:12:06,079
timestamp value called

00:12:02,079 --> 00:12:08,880
created um yes but if you search for

00:12:06,079 --> 00:12:11,279
underscore creativity

00:12:08,880 --> 00:12:12,800
you need either must but the must is for

00:12:11,279 --> 00:12:16,000
if present

00:12:12,800 --> 00:12:17,600
which is not the ideal wording um

00:12:16,000 --> 00:12:19,440
on the other hand you should not have

00:12:17,600 --> 00:12:22,079
more than one normative

00:12:19,440 --> 00:12:22,720
sentence regarding one specific because

00:12:22,079 --> 00:12:25,839
if those

00:12:22,720 --> 00:12:25,839
ever drift

00:12:27,040 --> 00:12:30,639
i i also note that in the open metrics

00:12:29,440 --> 00:12:33,360
example

00:12:30,639 --> 00:12:34,800
there should not be metrics with the

00:12:33,360 --> 00:12:36,560
created suffix

00:12:34,800 --> 00:12:39,279
other than those ones but it is not a

00:12:36,560 --> 00:12:41,360
muscle users can still define their own

00:12:39,279 --> 00:12:43,040
metrics that end with underscore created

00:12:41,360 --> 00:12:44,880
so if we drop them by default

00:12:43,040 --> 00:12:47,040
information that would be an issue

00:12:44,880 --> 00:12:48,959
for those users because it's not a must

00:12:47,040 --> 00:12:51,680
in open metrics

00:12:48,959 --> 00:12:52,079
that's a fair point i think there is a

00:12:51,680 --> 00:12:54,720
must

00:12:52,079 --> 00:12:56,800
around you cannot have conflicts like

00:12:54,720 --> 00:13:00,160
you cannot even risk a conflict

00:12:56,800 --> 00:13:02,079
no exposures should avoid names that can

00:13:00,160 --> 00:13:04,839
that could be confused with the suffixes

00:13:02,079 --> 00:13:06,000
that text format central metrics names

00:13:04,839 --> 00:13:07,839
use

00:13:06,000 --> 00:13:09,279
we didn't go with must of course we

00:13:07,839 --> 00:13:11,440
didn't we cannot

00:13:09,279 --> 00:13:11,440
know

00:13:15,279 --> 00:13:19,360
interesting yeah yeah because client

00:13:16,880 --> 00:13:21,600
python actually like it will fail

00:13:19,360 --> 00:13:24,880
it is a hard failure to define things

00:13:21,600 --> 00:13:27,040
that could conflict i believe

00:13:24,880 --> 00:13:29,839
which is fair on the implementation side

00:13:27,040 --> 00:13:32,839
because implementers

00:13:29,839 --> 00:13:34,320
can take a stronger stance than the

00:13:32,839 --> 00:13:36,880
specification

00:13:34,320 --> 00:13:38,160
yeah but it's not invalid open metrics

00:13:36,880 --> 00:13:40,560
if you have

00:13:38,160 --> 00:13:43,360
use the suffix not as a suffix but it

00:13:40,560 --> 00:13:43,360
doesn't conflict

00:13:44,480 --> 00:13:48,320
that's a different thing i think i think

00:13:47,680 --> 00:13:51,120
it's cool

00:13:48,320 --> 00:13:52,720
if we if we have it as an option because

00:13:51,120 --> 00:13:54,720
also like i mean not many

00:13:52,720 --> 00:13:56,480
in relative terms it's not that a lot of

00:13:54,720 --> 00:13:56,959
people complain and if you just can tell

00:13:56,480 --> 00:13:59,199
them

00:13:56,959 --> 00:14:00,560
you can flip that little conflict switch

00:13:59,199 --> 00:14:02,880
i think that would make them already

00:14:00,560 --> 00:14:05,120
quite happy

00:14:02,880 --> 00:14:06,959
while just saying them that's the way it

00:14:05,120 --> 00:14:08,079
is go deal with it it's not very

00:14:06,959 --> 00:14:11,839
friendly

00:14:08,079 --> 00:14:13,600
one comment i make is that

00:14:11,839 --> 00:14:15,040
at the moment because it doesn't do

00:14:13,600 --> 00:14:18,000
anything

00:14:15,040 --> 00:14:20,000
a lot of people will go why why is it

00:14:18,000 --> 00:14:22,079
the default to be on

00:14:20,000 --> 00:14:23,760
why is it there in the first place so i

00:14:22,079 --> 00:14:25,600
guess the question is

00:14:23,760 --> 00:14:27,279
is it going to be useful at some point

00:14:25,600 --> 00:14:30,079
because i can see some benefits

00:14:27,279 --> 00:14:31,600
to it in terms of the idea of resilience

00:14:30,079 --> 00:14:33,600
and knowing a bit more about it

00:14:31,600 --> 00:14:35,120
but obviously at the moment with it not

00:14:33,600 --> 00:14:38,000
actually doing anything

00:14:35,120 --> 00:14:40,720
it is a completely useless metric to a

00:14:38,000 --> 00:14:40,720
certain degree

00:14:41,279 --> 00:14:44,959
i mean my my personal reason is that we

00:14:43,839 --> 00:14:47,360
can finally

00:14:44,959 --> 00:14:49,040
solve this issue with counters that only

00:14:47,360 --> 00:14:50,240
spring into existence one staff

00:14:49,040 --> 00:14:53,279
incremented once

00:14:50,240 --> 00:14:54,240
yeah um brian had a lot of resistance

00:14:53,279 --> 00:14:57,360
against that but

00:14:54,240 --> 00:15:00,240
i still believe there's a way of

00:14:57,360 --> 00:15:00,880
at least making it work in most cases

00:15:00,240 --> 00:15:02,959
but that's

00:15:00,880 --> 00:15:13,839
yeah that's the future it's not what we

00:15:02,959 --> 00:15:13,839
have right now

00:15:15,040 --> 00:15:20,639
as per the default maybe we should ask

00:15:18,399 --> 00:15:22,079
the wider community and and look for

00:15:20,639 --> 00:15:25,040
feedback actively

00:15:22,079 --> 00:15:27,600
i i'm honestly torn on enabling or

00:15:25,040 --> 00:15:30,560
disabling underscore created by default

00:15:27,600 --> 00:15:31,199
i think for the primary libraries we

00:15:30,560 --> 00:15:33,440
should have

00:15:31,199 --> 00:15:35,600
the same default across everything which

00:15:33,440 --> 00:15:37,600
we offer

00:15:35,600 --> 00:15:39,279
but i don't have a strong opinion on

00:15:37,600 --> 00:15:41,839
which way we go with

00:15:39,279 --> 00:15:44,079
with the actual setting as long as it's

00:15:41,839 --> 00:15:47,040
maximally consistent

00:15:44,079 --> 00:15:47,680
if it's something that we were able to

00:15:47,040 --> 00:15:50,800
say

00:15:47,680 --> 00:15:52,480
is going to be used for sorting out

00:15:50,800 --> 00:15:56,000
counters or something

00:15:52,480 --> 00:15:59,839
rates and things in the next reasonably

00:15:56,000 --> 00:16:01,759
short period of time then it sounds like

00:15:59,839 --> 00:16:03,360
a default of yes makes sense because

00:16:01,759 --> 00:16:04,959
then every it makes everyone's life

00:16:03,360 --> 00:16:07,279
easier because it's then

00:16:04,959 --> 00:16:08,480
there for when it is switched on but if

00:16:07,279 --> 00:16:10,079
it's

00:16:08,480 --> 00:16:13,279
we'd like to do this but it could be

00:16:10,079 --> 00:16:15,440
three years time then it feels like

00:16:13,279 --> 00:16:18,320
the opposite of actually we should have

00:16:15,440 --> 00:16:21,040
the default may be false because

00:16:18,320 --> 00:16:22,880
it's generating more traffic and memory

00:16:21,040 --> 00:16:25,920
usage and all that sort of stuff

00:16:22,880 --> 00:16:28,560
for no conceivable benefit

00:16:25,920 --> 00:16:30,399
for a period quite a period of time well

00:16:28,560 --> 00:16:32,560
the thing is that information

00:16:30,399 --> 00:16:34,560
kind of supports that and if we ingest

00:16:32,560 --> 00:16:36,800
that as a second metric then we could

00:16:34,560 --> 00:16:38,560
just use process start seconds

00:16:36,800 --> 00:16:40,639
in most of the time so we don't actually

00:16:38,560 --> 00:16:42,399
need for each contour its own

00:16:40,639 --> 00:16:44,720
timestamp because we already have one

00:16:42,399 --> 00:16:48,000
for each exported process

00:16:44,720 --> 00:16:50,320
yeah but that only works if

00:16:48,000 --> 00:16:52,320
you like we are replaying parts of the

00:16:50,320 --> 00:16:54,320
of the open metrics discussions but

00:16:52,320 --> 00:16:56,399
that only works for counters which are

00:16:54,320 --> 00:16:58,320
existing at the process start

00:16:56,399 --> 00:17:00,800
which in particular if you're dealing

00:16:58,320 --> 00:17:02,480
with uh with for example hardware or

00:17:00,800 --> 00:17:03,440
with things which have lots of different

00:17:02,480 --> 00:17:07,120
connections

00:17:03,440 --> 00:17:09,120
might not be might not be the um

00:17:07,120 --> 00:17:10,880
it's not even the case within prometheus

00:17:09,120 --> 00:17:12,000
like you can hot reload things that

00:17:10,880 --> 00:17:15,199
create new counters

00:17:12,000 --> 00:17:17,360
or get rid of old counters um

00:17:15,199 --> 00:17:18,799
so is my question like i was gonna bring

00:17:17,360 --> 00:17:20,799
up the exact same point as stewart

00:17:18,799 --> 00:17:22,160
like is there appetite for actually

00:17:20,799 --> 00:17:24,319
using the created

00:17:22,160 --> 00:17:26,079
value in prometheus server like is that

00:17:24,319 --> 00:17:27,600
something we want to do

00:17:26,079 --> 00:17:29,280
because that i think that that

00:17:27,600 --> 00:17:32,480
definitely influences whether it should

00:17:29,280 --> 00:17:35,039
be default on or off for me

00:17:32,480 --> 00:17:35,600
the chicken and egg is if it's there it

00:17:35,039 --> 00:17:38,240
will

00:17:35,600 --> 00:17:39,679
naturally entice more people to actually

00:17:38,240 --> 00:17:41,840
play with it

00:17:39,679 --> 00:17:43,840
on the other hand that is not an

00:17:41,840 --> 00:17:47,200
argument in and as of itself

00:17:43,840 --> 00:17:48,880
as such i think we're back at at least

00:17:47,200 --> 00:17:50,400
trying to ask the wider community what

00:17:48,880 --> 00:17:52,559
they would prefer

00:17:50,400 --> 00:17:54,240
and have have a period of i don't know

00:17:52,559 --> 00:17:57,120
maybe a month where we just

00:17:54,240 --> 00:17:59,200
try and find feedback what people would

00:17:57,120 --> 00:18:02,080
like

00:17:59,200 --> 00:18:03,120
and then do our best to to apply that

00:18:02,080 --> 00:18:04,799
thing

00:18:03,120 --> 00:18:06,240
at least across all the things which we

00:18:04,799 --> 00:18:10,960
have as

00:18:06,240 --> 00:18:13,440
in uh client libraries and exporters

00:18:10,960 --> 00:18:16,080
i mean there there is also the inverted

00:18:13,440 --> 00:18:18,320
chicken egg right where

00:18:16,080 --> 00:18:20,400
i mean if we think why is it there it's

00:18:18,320 --> 00:18:23,039
there because certain groups wanted it

00:18:20,400 --> 00:18:23,520
and why do those groups want it they

00:18:23,039 --> 00:18:25,520
they

00:18:23,520 --> 00:18:27,200
they would require it if they adopted

00:18:25,520 --> 00:18:29,200
open metrics and i think

00:18:27,200 --> 00:18:30,400
that was the idea of metrics is supposed

00:18:29,200 --> 00:18:33,360
to be used

00:18:30,400 --> 00:18:35,120
even outside of the like prometheus

00:18:33,360 --> 00:18:36,720
ecosystem directly

00:18:35,120 --> 00:18:38,799
so that would also be a bit

00:18:36,720 --> 00:18:42,320
counterproductive if we

00:18:38,799 --> 00:18:44,160
like removed it now effectively and and

00:18:42,320 --> 00:18:46,480
um then people might shy away from

00:18:44,160 --> 00:18:48,480
adopting it because of that

00:18:46,480 --> 00:18:50,080
so it's kind of a bit of a hard thing i

00:18:48,480 --> 00:18:52,320
could see it definitely

00:18:50,080 --> 00:18:53,120
once we have a richer metadata story in

00:18:52,320 --> 00:18:54,840
prometheus

00:18:53,120 --> 00:18:56,640
which is another not yet written design

00:18:54,840 --> 00:18:58,480
log then

00:18:56,640 --> 00:19:01,760
i would totally love to have this

00:18:58,480 --> 00:19:06,080
created time in there

00:19:01,760 --> 00:19:06,080
but right now that doesn't exist yet

00:19:06,480 --> 00:19:10,000
i mean that doesn't solve the transport

00:19:08,480 --> 00:19:11,600
and the client memory

00:19:10,000 --> 00:19:14,640
problem but it most certainly would

00:19:11,600 --> 00:19:16,799
solve the prometheus

00:19:14,640 --> 00:19:19,200
problem because you would have one

00:19:16,799 --> 00:19:21,600
created until it changes

00:19:19,200 --> 00:19:23,679
but i think that we almost have a

00:19:21,600 --> 00:19:25,919
consensus that we want an option

00:19:23,679 --> 00:19:28,160
but that it's better to leave it on for

00:19:25,919 --> 00:19:29,679
the moment by default

00:19:28,160 --> 00:19:32,400
yeah i mean we just have to decide about

00:19:29,679 --> 00:19:34,720
the default that is what i

00:19:32,400 --> 00:19:36,240
get and the feeling yeah i think so

00:19:34,720 --> 00:19:37,360
maybe let's write two

00:19:36,240 --> 00:19:39,919
like i think we could definitely write

00:19:37,360 --> 00:19:44,160
one consensus that is

00:19:39,919 --> 00:19:47,840
client libraries want should have a

00:19:44,160 --> 00:19:47,840
way to turn off created

00:19:51,440 --> 00:19:56,080
and then and then we can have that

00:19:53,360 --> 00:19:58,799
second one for

00:19:56,080 --> 00:20:00,000
defaults to on or get more community or

00:19:58,799 --> 00:20:07,840
there are a couple options there so i'm

00:20:00,000 --> 00:20:07,840
not sure we have consensus on that

00:20:11,840 --> 00:20:15,039
sorry i was just trying to to fight

00:20:14,159 --> 00:20:18,880
google docs

00:20:15,039 --> 00:20:22,080
um i would the noises i was making

00:20:18,880 --> 00:20:24,400
without blocking julian while typing

00:20:22,080 --> 00:20:24,400
um

00:20:26,400 --> 00:20:31,679
do we just want to say this about client

00:20:28,000 --> 00:20:31,679
libraries or also our exporters

00:20:31,760 --> 00:20:35,760
they use the client sniper oh yeah yeah

00:20:34,720 --> 00:20:37,440
but

00:20:35,760 --> 00:20:39,440
okay i i'm adding the exporters

00:20:37,440 --> 00:20:40,720
explicitly because this is relevant for

00:20:39,440 --> 00:20:42,799
the exporters

00:20:40,720 --> 00:20:44,480
as signal to the library which is being

00:20:42,799 --> 00:20:49,840
used

00:20:44,480 --> 00:20:49,840
yeah it's both

00:20:54,240 --> 00:20:59,760
uh yeah i mean i think in general those

00:20:56,159 --> 00:20:59,760
conflict options need to be

00:21:00,559 --> 00:21:05,280
in a way what's the word propagated from

00:21:04,320 --> 00:21:07,440
the users

00:21:05,280 --> 00:21:09,280
uh through the code that is using the

00:21:07,440 --> 00:21:10,880
library to the library right

00:21:09,280 --> 00:21:12,720
i mean that's what in client goaling i

00:21:10,880 --> 00:21:14,720
was super conservative about those

00:21:12,720 --> 00:21:18,640
things that would like change

00:21:14,720 --> 00:21:21,200
something like that and

00:21:18,640 --> 00:21:23,039
yeah at least i mean of course not all

00:21:21,200 --> 00:21:24,559
users of the library made the config

00:21:23,039 --> 00:21:26,720
option for their users but

00:21:24,559 --> 00:21:28,080
when they the users the users of the

00:21:26,720 --> 00:21:30,080
users complained

00:21:28,080 --> 00:21:31,600
at least they were satisfied by telling

00:21:30,080 --> 00:21:33,200
them yes you can offer this config

00:21:31,600 --> 00:21:34,400
option because the library allows you to

00:21:33,200 --> 00:21:45,840
configure it

00:21:34,400 --> 00:21:45,840
and um that's probably all we have to do

00:21:46,320 --> 00:21:49,760
so let's try this our first particular

00:21:48,559 --> 00:21:51,679
consensus

00:21:49,760 --> 00:21:53,679
our first party client libraries and

00:21:51,679 --> 00:21:55,919
exporters should have a parameter to

00:21:53,679 --> 00:21:59,840
turn off underscore created

00:21:55,919 --> 00:21:59,840
all agreed anyone disagreeing

00:22:00,080 --> 00:22:02,720
very good

00:22:03,520 --> 00:22:06,720
um the next one

00:22:07,360 --> 00:22:11,760
is currently a consensus the default is

00:22:10,159 --> 00:22:14,159
to keep emitting the underscore

00:22:11,760 --> 00:22:15,919
to keep emitting underscore created i

00:22:14,159 --> 00:22:20,159
would tend towards

00:22:15,919 --> 00:22:21,919
um while we get user feedback to to add

00:22:20,159 --> 00:22:23,200
why we get user feedback that we

00:22:21,919 --> 00:22:25,520
actively try and get

00:22:23,200 --> 00:22:27,120
feedback because again this ask

00:22:25,520 --> 00:22:30,320
initially came from google

00:22:27,120 --> 00:22:33,120
um i forgot his name left google

00:22:30,320 --> 00:22:35,679
um and and also stopped contributing to

00:22:33,120 --> 00:22:39,039
uh to open metrics a few months after

00:22:35,679 --> 00:22:39,039
so um yeah

00:22:39,200 --> 00:22:43,200
what if we do handle this at least at a

00:22:41,360 --> 00:22:46,720
protocol level or

00:22:43,200 --> 00:22:49,760
protocol level where prometheus

00:22:46,720 --> 00:22:51,360
has a easy switch to ignore created at

00:22:49,760 --> 00:22:54,720
when coming from open metrics

00:22:51,360 --> 00:22:57,679
yes that's

00:22:54,720 --> 00:22:58,000
yeah we we already discussed this um but

00:22:57,679 --> 00:23:01,200
for

00:22:58,000 --> 00:23:03,360
for client memory usage client-side

00:23:01,200 --> 00:23:05,120
memory usage reasons and and data

00:23:03,360 --> 00:23:05,919
transmission usage if you have a small

00:23:05,120 --> 00:23:07,760
pipe

00:23:05,919 --> 00:23:08,960
um you also need it on the client side

00:23:07,760 --> 00:23:12,159
but uh having

00:23:08,960 --> 00:23:14,159
default configuration which is disabled

00:23:12,159 --> 00:23:14,400
but as part of the default configuration

00:23:14,159 --> 00:23:16,880
is

00:23:14,400 --> 00:23:19,120
is in my head already on on the to-do

00:23:16,880 --> 00:23:19,120
list

00:23:19,280 --> 00:23:22,480
i mean if we require now that the

00:23:21,200 --> 00:23:24,720
default is on

00:23:22,480 --> 00:23:25,679
uh we would essentially force client

00:23:24,720 --> 00:23:28,799
goaling into

00:23:25,679 --> 00:23:32,159
a major release just for that

00:23:28,799 --> 00:23:34,880
um so if we

00:23:32,159 --> 00:23:36,320
this is if we if we also require that

00:23:34,880 --> 00:23:36,720
all the client libraries do the same

00:23:36,320 --> 00:23:39,280
thing

00:23:36,720 --> 00:23:39,919
right and now i mean bartek rather gets

00:23:39,280 --> 00:23:43,919
to speak

00:23:39,919 --> 00:23:46,880
for client goaling by now but okay

00:23:43,919 --> 00:23:47,760
if not under zero yet line goaling is

00:23:46,880 --> 00:23:52,080
1.0

00:23:47,760 --> 00:23:55,919
oh one dot where are we now one not nine

00:23:52,080 --> 00:23:58,799
one not eleven i don't know um

00:23:55,919 --> 00:24:01,360
differently um consensus we will gather

00:23:58,799 --> 00:24:04,640
user feedback on which they would prefer

00:24:01,360 --> 00:24:06,640
as a default yeah

00:24:04,640 --> 00:24:08,159
i mean you could end up with something

00:24:06,640 --> 00:24:09,279
if you want to change the default it

00:24:08,159 --> 00:24:11,440
needs a major

00:24:09,279 --> 00:24:13,600
release or you're still in zero dot

00:24:11,440 --> 00:24:17,039
something but we should be careful

00:24:13,600 --> 00:24:20,240
of mandating the same behavior here

00:24:17,039 --> 00:24:22,720
across all client libraries

00:24:20,240 --> 00:24:24,559
fair that's that's the next uh point of

00:24:22,720 --> 00:24:26,880
consensus but for this one

00:24:24,559 --> 00:24:27,600
consensus we will gather user feedback

00:24:26,880 --> 00:24:30,720
on which

00:24:27,600 --> 00:24:34,320
they would prefer as a default or

00:24:30,720 --> 00:24:34,320
on what default they would prefer

00:24:35,440 --> 00:24:40,080
okay so i rewrote so sorry um consensus

00:24:38,559 --> 00:24:41,840
we will gather user feedback on what

00:24:40,080 --> 00:24:46,240
default they would prefer

00:24:41,840 --> 00:25:01,840
all agreed anyone disagreeing

00:24:46,240 --> 00:25:01,840
there is it

00:25:09,039 --> 00:25:14,240
consensus we will suggest this default

00:25:11,120 --> 00:25:17,840
across our ecosystem

00:25:14,240 --> 00:25:20,159
and i put in suggest so um so

00:25:17,840 --> 00:25:21,679
as to bjorn's point that that no one is

00:25:20,159 --> 00:25:23,679
forced

00:25:21,679 --> 00:25:26,080
does it mean that we have to wait to

00:25:23,679 --> 00:25:28,159
find a proper way to gather the user's

00:25:26,080 --> 00:25:30,000
feedback before we can implement it with

00:25:28,159 --> 00:25:33,279
the default tool

00:25:30,000 --> 00:25:34,880
i would say give it a week or three

00:25:33,279 --> 00:25:36,640
write to the developers and user's

00:25:34,880 --> 00:25:39,120
mailing list ask on discourse

00:25:36,640 --> 00:25:40,000
make a thing on twitter where people can

00:25:39,120 --> 00:25:43,279
click and

00:25:40,000 --> 00:25:44,720
that's our due diligence i think we can

00:25:43,279 --> 00:25:47,600
also ask on irc but

00:25:44,720 --> 00:25:49,440
by and maybe slack but doing this we

00:25:47,600 --> 00:25:51,840
have covered literally all

00:25:49,440 --> 00:25:52,720
main supported uh community feedback

00:25:51,840 --> 00:25:54,480
channels

00:25:52,720 --> 00:25:57,840
and then we just give it a week or three

00:25:54,480 --> 00:25:57,840
and done

00:25:59,440 --> 00:26:03,120
i mean i would be very surprised if that

00:26:02,080 --> 00:26:05,520
feedback results

00:26:03,120 --> 00:26:07,039
in a lot of like any significant number

00:26:05,520 --> 00:26:09,760
of people saying they want it on

00:26:07,039 --> 00:26:10,880
because there are no use cases that we

00:26:09,760 --> 00:26:13,039
are aware of

00:26:10,880 --> 00:26:14,640
which shouldn't mean that we should

00:26:13,039 --> 00:26:16,799
never reconsider that right

00:26:14,640 --> 00:26:19,200
if we if we later in the future have the

00:26:16,799 --> 00:26:21,279
power use case for that

00:26:19,200 --> 00:26:23,200
we might just reconsider it and then

00:26:21,279 --> 00:26:24,960
whatever do something with a major

00:26:23,200 --> 00:26:28,960
release in libraries that already have

00:26:24,960 --> 00:26:31,760
a 1.0 release or something i don't know

00:26:28,960 --> 00:26:32,640
which is not blocked by us deciding and

00:26:31,760 --> 00:26:35,279
asking for

00:26:32,640 --> 00:26:35,760
a a preferred before the default right

00:26:35,279 --> 00:26:38,080
now

00:26:35,760 --> 00:26:39,440
and and suggesting this default across

00:26:38,080 --> 00:26:41,600
the echo system

00:26:39,440 --> 00:26:43,120
if if if something changes we will be

00:26:41,600 --> 00:26:46,159
revisiting this anyway

00:26:43,120 --> 00:26:47,679
yeah so but what i want to say is we

00:26:46,159 --> 00:26:48,480
probably don't need to discuss more

00:26:47,679 --> 00:26:50,400
details

00:26:48,480 --> 00:26:52,159
let's just see what comes out and i

00:26:50,400 --> 00:26:54,559
expect that the result is

00:26:52,159 --> 00:26:56,240
users wanted default off and then we

00:26:54,559 --> 00:26:58,159
default it off for now and

00:26:56,240 --> 00:27:01,279
if we ever want to default it on we will

00:26:58,159 --> 00:27:01,279
continue the discussion

00:27:01,440 --> 00:27:06,080
i think having a consensus on on us

00:27:04,080 --> 00:27:07,679
suggesting this default across the

00:27:06,080 --> 00:27:09,919
ecosystem would be nice because it's

00:27:07,679 --> 00:27:11,840
signaling way beyond just this call and

00:27:09,919 --> 00:27:13,760
and this group of people

00:27:11,840 --> 00:27:20,159
but if we can't find consensus on this

00:27:13,760 --> 00:27:22,880
it's also not super urgent so

00:27:20,159 --> 00:27:22,880
muted burn

00:27:23,679 --> 00:27:28,240
i'm also not talking i am looking up

00:27:26,720 --> 00:27:30,000
what the exact formulation of the

00:27:28,240 --> 00:27:32,240
conscious consensus is uh

00:27:30,000 --> 00:27:35,840
it is consensus we will suggest this

00:27:32,240 --> 00:27:38,159
default across our ecosystem

00:27:35,840 --> 00:27:41,520
and using suggest precisely to your

00:27:38,159 --> 00:27:41,520
point that no one is forced

00:27:41,679 --> 00:27:45,279
yeah i mean i would say that if if the

00:27:44,399 --> 00:27:47,600
outcome is

00:27:45,279 --> 00:27:49,360
default off it's fine because the only

00:27:47,600 --> 00:27:52,880
library that is wondered

00:27:49,360 --> 00:27:54,320
x has it off kind of it doesn't have it

00:27:52,880 --> 00:27:55,120
at all at the moment but it would have

00:27:54,320 --> 00:27:59,120
it off

00:27:55,120 --> 00:28:01,679
um well if the if the outcome

00:27:59,120 --> 00:28:02,640
is unexpectedly that we should default

00:28:01,679 --> 00:28:05,840
on

00:28:02,640 --> 00:28:07,440
then we have the problem that python and

00:28:05,840 --> 00:28:08,799
java already have it and they should

00:28:07,440 --> 00:28:12,000
just keep it then

00:28:08,799 --> 00:28:14,799
but we could probably not put it to on

00:28:12,000 --> 00:28:15,760
without a major release incline going

00:28:14,799 --> 00:28:18,000
that's more

00:28:15,760 --> 00:28:19,200
that's kind of what's what's um of

00:28:18,000 --> 00:28:21,919
course my concern

00:28:19,200 --> 00:28:22,399
well that's obviously it is a suggest so

00:28:21,919 --> 00:28:24,640
client

00:28:22,399 --> 00:28:26,000
golan could go well it's too hard we're

00:28:24,640 --> 00:28:29,440
not going to do that straight away

00:28:26,000 --> 00:28:31,600
so thank you yeah my point is

00:28:29,440 --> 00:28:32,559
let's just not spend more time

00:28:31,600 --> 00:28:35,600
discussing it

00:28:32,559 --> 00:28:37,679
um let's see what the output i mean

00:28:35,600 --> 00:28:39,039
we could say if the output i mean that

00:28:37,679 --> 00:28:42,159
but that's kind of a bit weird

00:28:39,039 --> 00:28:44,240
if you say if the result is that the

00:28:42,159 --> 00:28:46,399
community wants it off then we suggest

00:28:44,240 --> 00:28:46,960
it to default be default of course our

00:28:46,399 --> 00:28:49,360
ecosystem

00:28:46,960 --> 00:28:50,880
if it's yes we have to reconsider what

00:28:49,360 --> 00:28:59,120
we do

00:28:50,880 --> 00:29:00,960
that's bit weird as a consensus

00:28:59,120 --> 00:29:02,720
are you against finding the consensus

00:29:00,960 --> 00:29:04,399
question we can just delete it if you're

00:29:02,720 --> 00:29:07,600
not actively against it

00:29:04,399 --> 00:29:09,039
um we can try to go i i'm fine either

00:29:07,600 --> 00:29:12,080
way i'm just trying to

00:29:09,039 --> 00:29:14,000
to move on my opinion is it depends on

00:29:12,080 --> 00:29:16,399
the output of the user survey

00:29:14,000 --> 00:29:18,399
if we suggest the same default across

00:29:16,399 --> 00:29:21,520
our ecosystem

00:29:18,399 --> 00:29:24,640
i think if if we if the user

00:29:21,520 --> 00:29:26,399
community suggests one thing then we

00:29:24,640 --> 00:29:27,360
should generally listen to them rather

00:29:26,399 --> 00:29:30,240
than saying

00:29:27,360 --> 00:29:31,760
actually we know better we should ignore

00:29:30,240 --> 00:29:35,039
what you everybody's

00:29:31,760 --> 00:29:38,080
thinks because of other reasons

00:29:35,039 --> 00:29:41,039
yeah so in the case of klein goaling and

00:29:38,080 --> 00:29:41,600
this is like the 13th most used go

00:29:41,039 --> 00:29:44,240
package

00:29:41,600 --> 00:29:44,640
so i think every tiny change we do will

00:29:44,240 --> 00:29:46,960
have

00:29:44,640 --> 00:29:49,360
huge repercussions and we cannot just

00:29:46,960 --> 00:29:51,840
vote among a limited set of users

00:29:49,360 --> 00:29:53,039
if we should break the world right um

00:29:51,840 --> 00:29:55,600
that's why i think

00:29:53,039 --> 00:29:56,480
if again we've not said you must we've

00:29:55,600 --> 00:29:58,559
said

00:29:56,480 --> 00:30:00,000
the suggestion but if the prometheus def

00:29:58,559 --> 00:30:01,520
summit suggests

00:30:00,000 --> 00:30:03,679
across the ecosystem and then the

00:30:01,520 --> 00:30:05,440
prometheus team people themselves

00:30:03,679 --> 00:30:06,880
don't follow those suggestions is also a

00:30:05,440 --> 00:30:09,120
weird message right

00:30:06,880 --> 00:30:09,120
but

00:30:11,200 --> 00:30:15,919
if the consensus is that we do it and we

00:30:14,159 --> 00:30:17,600
do it on all the other client libraries

00:30:15,919 --> 00:30:21,279
and then client golang doesn't

00:30:17,600 --> 00:30:23,440
it you can't win either way because

00:30:21,279 --> 00:30:25,440
the thing that works is if everything's

00:30:23,440 --> 00:30:28,000
consistent and and

00:30:25,440 --> 00:30:29,360
going in the same direction but what i

00:30:28,000 --> 00:30:31,679
hear from beyond is that

00:30:29,360 --> 00:30:35,200
you want to get user feedback and only

00:30:31,679 --> 00:30:37,679
act if the feedback is what you expect

00:30:35,200 --> 00:30:38,960
i think we should gather the feedback

00:30:37,679 --> 00:30:42,240
because it's valuable

00:30:38,960 --> 00:30:43,919
to get an idea i expect with 99 chance

00:30:42,240 --> 00:30:46,159
the the feedback will be please

00:30:43,919 --> 00:30:48,720
switch it off by default and then in

00:30:46,159 --> 00:30:51,520
that case i think we should make it

00:30:48,720 --> 00:30:53,840
off by default everywhere but if the

00:30:51,520 --> 00:30:55,279
output is it should be on by default

00:30:53,840 --> 00:30:57,840
i think we should keep it where we

00:30:55,279 --> 00:31:00,240
already have it on and we need to re

00:30:57,840 --> 00:31:01,840
reconsider what we do with client

00:31:00,240 --> 00:31:04,720
goaling

00:31:01,840 --> 00:31:06,640
and i i think for this one percent of

00:31:04,720 --> 00:31:08,640
outcome we don't need to invest time

00:31:06,640 --> 00:31:10,399
right now to to determine what the

00:31:08,640 --> 00:31:14,320
outcome is

00:31:10,399 --> 00:31:18,640
i i have a i have another option

00:31:14,320 --> 00:31:21,200
uh what if bjorn and i write a proposal

00:31:18,640 --> 00:31:22,159
for what bjorn and i want which is off

00:31:21,200 --> 00:31:25,120
by default

00:31:22,159 --> 00:31:26,000
and we gather feedback on this specific

00:31:25,120 --> 00:31:29,840
proposal

00:31:26,000 --> 00:31:31,760
for rough consensus and then we just do

00:31:29,840 --> 00:31:34,399
and if the rough consensus says that

00:31:31,760 --> 00:31:36,799
beyond my proposal for off by default

00:31:34,399 --> 00:31:39,519
is okay then we we make that the

00:31:36,799 --> 00:31:41,679
suggested default

00:31:39,519 --> 00:31:42,720
and this this way we don't this way we

00:31:41,679 --> 00:31:45,360
don't have

00:31:42,720 --> 00:31:46,320
the matrix of all opinions colliding

00:31:45,360 --> 00:31:49,039
yeah because

00:31:46,320 --> 00:31:50,000
you know let's let's let's send an

00:31:49,039 --> 00:31:52,240
opinion

00:31:50,000 --> 00:31:53,120
and see if we get too much objection or

00:31:52,240 --> 00:31:55,440
not

00:31:53,120 --> 00:31:57,519
my suggestion is we just stop at we will

00:31:55,440 --> 00:32:00,080
get the user flipping what default would

00:31:57,519 --> 00:32:02,080
be and once we have the result we can

00:32:00,080 --> 00:32:03,760
continue the discussion

00:32:02,080 --> 00:32:05,840
i mean we have this every month right

00:32:03,760 --> 00:32:07,840
this is not that that we

00:32:05,840 --> 00:32:10,399
it might be even if the output outcome

00:32:07,840 --> 00:32:14,159
is it should be default off we might not

00:32:10,399 --> 00:32:16,640
even need to discuss it here we just act

00:32:14,159 --> 00:32:19,039
on it right

00:32:16,640 --> 00:32:20,480
and we don't have to become we have to

00:32:19,039 --> 00:32:23,039
we don't have to do anything more

00:32:20,480 --> 00:32:24,799
heavyweight than that

00:32:23,039 --> 00:32:26,480
unless the outcome is yeah please

00:32:24,799 --> 00:32:29,600
default on and then we have to

00:32:26,480 --> 00:32:33,440
discuss again but we don't need to

00:32:29,600 --> 00:32:33,440
do this speculatively

00:32:34,000 --> 00:32:37,840
the the thing which i mentally stuck on

00:32:35,919 --> 00:32:39,600
is it feels as if

00:32:37,840 --> 00:32:41,039
we are basically asking for an opinion

00:32:39,600 --> 00:32:44,799
we intend to ignore

00:32:41,039 --> 00:32:47,120
um no no if the opinion is

00:32:44,799 --> 00:32:48,080
default on we just discuss how we

00:32:47,120 --> 00:32:50,320
implement that

00:32:48,080 --> 00:32:51,360
if the opinion is default off we don't

00:32:50,320 --> 00:32:53,840
need the discussion

00:32:51,360 --> 00:32:54,960
and it's like speculative branch

00:32:53,840 --> 00:32:58,559
prediction

00:32:54,960 --> 00:33:00,320
we we just right now we we act as if the

00:32:58,559 --> 00:33:02,000
answer will be default off

00:33:00,320 --> 00:33:04,000
because that's most likely and we don't

00:33:02,000 --> 00:33:05,679
need to spend an hour to discuss what to

00:33:04,000 --> 00:33:10,080
do if the answer is

00:33:05,679 --> 00:33:14,080
uh default on you mean that no client

00:33:10,080 --> 00:33:14,080
golem does not have the created matrix

00:33:14,399 --> 00:33:20,480
sorry what was that this clan golem gave

00:33:16,960 --> 00:33:22,559
the underscore created matrix no

00:33:20,480 --> 00:33:24,080
klein golding doesn't have it yet and if

00:33:22,559 --> 00:33:26,640
we introduced it the plan

00:33:24,080 --> 00:33:28,720
so far was to introduce it with a

00:33:26,640 --> 00:33:31,360
configuration switch right where you say

00:33:28,720 --> 00:33:31,760
i want greater timestamps and if that's

00:33:31,360 --> 00:33:33,679
what's

00:33:31,760 --> 00:33:35,279
the output of the user feedback no

00:33:33,679 --> 00:33:37,200
discussion needed right

00:33:35,279 --> 00:33:39,679
if this the output is a different way we

00:33:37,200 --> 00:33:42,480
have to discuss how to do this

00:33:39,679 --> 00:33:44,000
and if we do it if it's wise to do it

00:33:42,480 --> 00:33:47,120
now knowing that the user

00:33:44,000 --> 00:33:49,440
feedback is that way but i'm only saying

00:33:47,120 --> 00:33:52,159
let's not invest this time for something

00:33:49,440 --> 00:33:54,720
that is an unlikely outcome anyway

00:33:52,159 --> 00:33:55,279
that's the only thing i tried to say i i

00:33:54,720 --> 00:33:56,799
agree with

00:33:55,279 --> 00:33:59,200
that statement i also think getting

00:33:56,799 --> 00:34:01,519
feedback is

00:33:59,200 --> 00:34:03,039
like yes it is completely biased to turn

00:34:01,519 --> 00:34:05,120
them off because prometheus doesn't do

00:34:03,039 --> 00:34:07,200
anything with it right now

00:34:05,120 --> 00:34:08,399
if someone comes and contributes that we

00:34:07,200 --> 00:34:11,200
actually do something with

00:34:08,399 --> 00:34:12,720
with underscore created in the next six

00:34:11,200 --> 00:34:16,399
months that i could imagine that

00:34:12,720 --> 00:34:18,079
feedback being completely different so

00:34:16,399 --> 00:34:20,639
and that's also i don't even know if

00:34:18,079 --> 00:34:23,040
this user survey and getting feedback is

00:34:20,639 --> 00:34:25,440
helpful like it somewhat depends on do

00:34:23,040 --> 00:34:27,839
we do we want to use created or not

00:34:25,440 --> 00:34:29,359
in the server it's a chance to find out

00:34:27,839 --> 00:34:29,679
if there are already people using it

00:34:29,359 --> 00:34:31,839
right

00:34:29,679 --> 00:34:33,040
that would be very valuable outcome of

00:34:31,839 --> 00:34:35,280
the feedback

00:34:33,040 --> 00:34:36,399
it's also not i don't see it as a like a

00:34:35,280 --> 00:34:38,639
strict vote

00:34:36,399 --> 00:34:39,520
it's just find out what the sentiment is

00:34:38,639 --> 00:34:42,000
and if like

00:34:39,520 --> 00:34:43,520
three important players step forward and

00:34:42,000 --> 00:34:44,480
say yes we're using this everywhere

00:34:43,520 --> 00:34:47,359
already

00:34:44,480 --> 00:34:48,960
that's an important piece of information

00:34:47,359 --> 00:34:50,639
okay

00:34:48,960 --> 00:34:54,879
and i would also like that to get your

00:34:50,639 --> 00:34:54,879
feedback on the open matrix mailing list

00:34:55,040 --> 00:35:03,839
not only in parameters

00:35:16,560 --> 00:35:21,040
yeah okay so um just to try and move on

00:35:20,000 --> 00:35:24,960
either way um

00:35:21,040 --> 00:35:26,800
i tried to rewrite again to to uh

00:35:24,960 --> 00:35:28,320
to catch all of this and if not we just

00:35:26,800 --> 00:35:30,960
delete it and move on

00:35:28,320 --> 00:35:32,480
uh consensus we intend to suggest that

00:35:30,960 --> 00:35:34,240
we intend

00:35:32,480 --> 00:35:36,720
to suggest this default across our

00:35:34,240 --> 00:35:37,599
ecosystem potentially based on a design

00:35:36,720 --> 00:35:41,119
document

00:35:37,599 --> 00:35:42,800
that should uh address everything buren

00:35:41,119 --> 00:35:44,720
said i think but if not then we just

00:35:42,800 --> 00:35:47,119
deleted it

00:35:44,720 --> 00:35:48,000
no it doesn't address what i said i'm

00:35:47,119 --> 00:35:51,760
sorry

00:35:48,000 --> 00:35:55,920
no fine it's it's completely fine um i

00:35:51,760 --> 00:35:57,920
did it is there anything else

00:35:55,920 --> 00:36:00,880
uh regarding underscore created of

00:35:57,920 --> 00:36:00,880
course then

00:36:04,720 --> 00:36:09,359
okay i think yeah what we have let's

00:36:08,079 --> 00:36:10,960
let's gather that feedback

00:36:09,359 --> 00:36:12,640
and based on that information let's

00:36:10,960 --> 00:36:14,079
continue the discussion it might be a

00:36:12,640 --> 00:36:17,599
very simple discussion then it might be

00:36:14,079 --> 00:36:17,599
a more complex one but we will see

00:36:17,920 --> 00:36:20,400
totally fine

00:36:24,800 --> 00:36:32,720
so next one there's something

00:36:28,240 --> 00:36:32,720
weird with google docs

00:36:33,280 --> 00:36:38,640
next one is by urine make numbers and

00:36:35,200 --> 00:36:38,640
duration literals the same

00:36:39,440 --> 00:36:48,400
um uh okay now all those come up um

00:36:44,160 --> 00:36:48,400
you're making a problem so

00:36:48,960 --> 00:36:55,280
yeah so i i have this fairly

00:36:52,440 --> 00:36:56,960
brainstorming document that's already

00:36:55,280 --> 00:37:01,599
linked that's also linked

00:36:56,960 --> 00:37:01,599
down there about time

00:37:02,320 --> 00:37:09,040
and one idea was that we can

00:37:05,760 --> 00:37:12,480
unlock a bunch of things by

00:37:09,040 --> 00:37:14,160
making every number also a duration

00:37:12,480 --> 00:37:15,359
literal like a number it's just number

00:37:14,160 --> 00:37:18,640
of seconds

00:37:15,359 --> 00:37:21,680
and vice versa every duration literal

00:37:18,640 --> 00:37:24,720
could be interpreted as a number

00:37:21,680 --> 00:37:27,119
the seconds in that duration and uh

00:37:24,720 --> 00:37:28,400
just in the spirit of we are actually

00:37:27,119 --> 00:37:31,119
not really strictly typed

00:37:28,400 --> 00:37:32,720
in promptgel just do it like you could

00:37:31,119 --> 00:37:34,960
write obfuscated stuff

00:37:32,720 --> 00:37:36,320
like if you want to write the number 100

00:37:34,960 --> 00:37:39,760
you could write

00:37:36,320 --> 00:37:41,680
one minute 40 seconds instead uh just

00:37:39,760 --> 00:37:42,640
enough for to to win an obfuscation

00:37:41,680 --> 00:37:46,160
contest

00:37:42,640 --> 00:37:49,119
but i think this is i mean

00:37:46,160 --> 00:37:50,000
in um in a future version of prom ql we

00:37:49,119 --> 00:37:53,440
could have

00:37:50,000 --> 00:37:54,560
a duration type uh but we don't really

00:37:53,440 --> 00:37:57,760
have i mean we have that

00:37:54,560 --> 00:37:58,560
right now but it it um causes trouble

00:37:57,760 --> 00:38:00,640
right

00:37:58,560 --> 00:38:05,040
and that would be the first step to to

00:38:00,640 --> 00:38:07,040
get away from that that's also

00:38:05,040 --> 00:38:09,359
you can what's written there right you

00:38:07,040 --> 00:38:12,800
could you could create stuff that is

00:38:09,359 --> 00:38:16,000
sub second which you can't right now um

00:38:12,800 --> 00:38:17,839
you can use a duration literal in

00:38:16,000 --> 00:38:19,760
predict linear instead of just spelling

00:38:17,839 --> 00:38:21,920
out the number of seconds

00:38:19,760 --> 00:38:23,680
uh you could use something like process

00:38:21,920 --> 00:38:26,400
start time seconds minus

00:38:23,680 --> 00:38:28,000
whatever time is greater than one w

00:38:26,400 --> 00:38:30,720
instead of spelling out the number of

00:38:28,000 --> 00:38:30,720
seconds in a week

00:38:30,880 --> 00:38:34,560
and it shouldn't break anything um

00:38:33,310 --> 00:38:37,359
[Music]

00:38:34,560 --> 00:38:38,880
and of course there's future ideas that

00:38:37,359 --> 00:38:42,320
at some point you can

00:38:38,880 --> 00:38:45,200
actually use from field expression to

00:38:42,320 --> 00:38:46,400
determine a duration from other

00:38:45,200 --> 00:38:48,720
expressions

00:38:46,400 --> 00:38:50,720
but that's that's not that's just the

00:38:48,720 --> 00:38:52,079
future step that's just about syntax

00:38:50,720 --> 00:38:54,880
here for now

00:38:52,079 --> 00:38:56,079
actually do you mind elaborating on the

00:38:54,880 --> 00:38:58,720
future aspect

00:38:56,079 --> 00:39:00,960
are you expecting that a result could be

00:38:58,720 --> 00:39:03,440
a duration as well

00:39:00,960 --> 00:39:04,880
so that could be i mean the most

00:39:03,440 --> 00:39:07,440
primitive thing

00:39:04,880 --> 00:39:08,480
no there are two very simple things the

00:39:07,440 --> 00:39:12,480
one is

00:39:08,480 --> 00:39:15,839
you uh you just want um arithmetic

00:39:12,480 --> 00:39:19,760
in a duration right so in grafana that's

00:39:15,839 --> 00:39:22,640
a long i mean we have this

00:39:19,760 --> 00:39:24,720
okay one step back we have this uh magic

00:39:22,640 --> 00:39:25,599
rate interval in grafana as a template

00:39:24,720 --> 00:39:28,240
variable now

00:39:25,599 --> 00:39:29,040
which solves 99 of the problems but not

00:39:28,240 --> 00:39:30,800
all of them

00:39:29,040 --> 00:39:32,720
but many people would have liked to say

00:39:30,800 --> 00:39:34,240
okay i have a value and i want to take

00:39:32,720 --> 00:39:36,160
five times that value

00:39:34,240 --> 00:39:37,680
like i want to write three times scrape

00:39:36,160 --> 00:39:40,480
interval or something right

00:39:37,680 --> 00:39:42,079
and then grafana templating said great

00:39:40,480 --> 00:39:43,599
but we cannot do arithmetic in our

00:39:42,079 --> 00:39:45,280
templating engine perhaps we will

00:39:43,599 --> 00:39:46,800
introduce this feature into the grafana

00:39:45,280 --> 00:39:47,760
templating engine at some point in the

00:39:46,800 --> 00:39:50,000
future

00:39:47,760 --> 00:39:50,960
um on the other hand we could as well

00:39:50,000 --> 00:39:53,440
have arithmetic

00:39:50,960 --> 00:39:54,720
impromptu also you could write three

00:39:53,440 --> 00:39:57,119
times

00:39:54,720 --> 00:39:58,400
whatever numbers three times three weeks

00:39:57,119 --> 00:40:01,440
three times one hour

00:39:58,400 --> 00:40:03,520
which is being started prom girl seems

00:40:01,440 --> 00:40:04,720
pretty brain dead because why aren't you

00:40:03,520 --> 00:40:07,040
just writing it down

00:40:04,720 --> 00:40:08,480
but if you go through templating with a

00:40:07,040 --> 00:40:09,359
templating engine that doesn't do

00:40:08,480 --> 00:40:11,200
arithmetic

00:40:09,359 --> 00:40:12,720
it certainly makes a lot of sense right

00:40:11,200 --> 00:40:14,319
so that's the one thing where you would

00:40:12,720 --> 00:40:17,839
have a an expression

00:40:14,319 --> 00:40:18,960
note this proposal here is not yet that

00:40:17,839 --> 00:40:21,920
because

00:40:18,960 --> 00:40:23,839
um we it would be it's it's way more

00:40:21,920 --> 00:40:24,720
complicated to make expressions work

00:40:23,839 --> 00:40:28,240
there

00:40:24,720 --> 00:40:28,640
because so far the proper engine assumes

00:40:28,240 --> 00:40:31,359
that

00:40:28,640 --> 00:40:32,640
just by static analysis essentially of

00:40:31,359 --> 00:40:35,280
the expression

00:40:32,640 --> 00:40:36,000
it can determine which time frame it has

00:40:35,280 --> 00:40:38,800
to access

00:40:36,000 --> 00:40:40,480
in the tsv and in this case it needs to

00:40:38,800 --> 00:40:42,480
do some evaluations

00:40:40,480 --> 00:40:44,160
simple arithmetic but it needs to be

00:40:42,480 --> 00:40:46,480
evaluations to do that

00:40:44,160 --> 00:40:47,760
which leads me to the next step if you

00:40:46,480 --> 00:40:50,319
want to put a

00:40:47,760 --> 00:40:51,520
duration into another time series coming

00:40:50,319 --> 00:40:54,160
from a recording rule

00:40:51,520 --> 00:40:54,800
to just make the duration configurable

00:40:54,160 --> 00:40:57,440
right

00:40:54,800 --> 00:40:59,359
like essentially teams can upload

00:40:57,440 --> 00:41:02,480
recording rules to say

00:40:59,359 --> 00:41:05,839
what duration they want in their alerts

00:41:02,480 --> 00:41:07,760
in that rate expression right and um

00:41:05,839 --> 00:41:09,760
what we do a lot for thresholds

00:41:07,760 --> 00:41:11,920
right you you often put thresholds into

00:41:09,760 --> 00:41:14,319
recording rules because that's possible

00:41:11,920 --> 00:41:15,119
uh you use recording rules as constants

00:41:14,319 --> 00:41:18,079
in a way right

00:41:15,119 --> 00:41:18,720
but you can't do it for durations

00:41:18,079 --> 00:41:22,000
because

00:41:18,720 --> 00:41:24,400
that again needs an evaluation and that

00:41:22,000 --> 00:41:27,520
becomes really complicated internally

00:41:24,400 --> 00:41:29,599
but at least this would build the

00:41:27,520 --> 00:41:32,240
groundworks where we could

00:41:29,599 --> 00:41:34,160
if we want to in future do this but we

00:41:32,240 --> 00:41:34,640
don't have to do it right now it already

00:41:34,160 --> 00:41:38,079
unlocks

00:41:34,640 --> 00:41:39,680
things uh yeah i mean i think you

00:41:38,079 --> 00:41:43,520
already kind of alluded to

00:41:39,680 --> 00:41:46,640
what the i i i like this a lot

00:41:43,520 --> 00:41:50,319
i think for for that use case the like

00:41:46,640 --> 00:41:53,680
um let's call it dynamic um

00:41:50,319 --> 00:41:55,680
uh durations um i think i

00:41:53,680 --> 00:41:57,599
would probably i would probably like to

00:41:55,680 --> 00:41:58,800
see a design dock for that but other

00:41:57,599 --> 00:42:03,839
than that

00:41:58,800 --> 00:42:03,839
um i i love this

00:42:04,560 --> 00:42:11,359
so i love the idea of having

00:42:07,839 --> 00:42:13,280
a comparison to generations and in some

00:42:11,359 --> 00:42:15,760
places it's allowing iteration in

00:42:13,280 --> 00:42:17,599
place of scholars but i have concerns

00:42:15,760 --> 00:42:19,359
the other way around like

00:42:17,599 --> 00:42:20,800
what will happen in someone else for the

00:42:19,359 --> 00:42:23,599
rate of plus if

00:42:20,800 --> 00:42:24,480
or what happens if someone has the rate

00:42:23,599 --> 00:42:26,319
for none

00:42:24,480 --> 00:42:28,240
and also like what happens if someone

00:42:26,319 --> 00:42:28,800
asks for the red below the millisecond

00:42:28,240 --> 00:42:30,319
so now

00:42:28,800 --> 00:42:32,480
you can do duration up to the

00:42:30,319 --> 00:42:33,440
millisecond and that's what the tsb

00:42:32,480 --> 00:42:36,200
supports but

00:42:33,440 --> 00:42:37,680
what will happen when people would put

00:42:36,200 --> 00:42:40,240
0.0001

00:42:37,680 --> 00:42:40,240
in the rate

00:42:41,040 --> 00:42:44,400
we need to define that right in that

00:42:43,359 --> 00:42:46,240
case

00:42:44,400 --> 00:42:48,720
i guess you're around to the next

00:42:46,240 --> 00:42:50,079
millisecond value and if a future tsdb

00:42:48,720 --> 00:42:51,599
does nanoseconds

00:42:50,079 --> 00:42:55,440
because speed traders want to use

00:42:51,599 --> 00:42:55,440
prometheus then it will not run

00:42:56,079 --> 00:43:00,480
i mean we we already have that in open

00:42:58,720 --> 00:43:02,400
metrics right because you can

00:43:00,480 --> 00:43:05,359
create a time step and open metrics that

00:43:02,400 --> 00:43:07,920
is zero zero zero zero zero zero one

00:43:05,359 --> 00:43:09,440
and you would round in the same way i

00:43:07,920 --> 00:43:12,240
mean those are valid concerns

00:43:09,440 --> 00:43:13,680
uh but i don't think they are serious

00:43:12,240 --> 00:43:15,680
concerns

00:43:13,680 --> 00:43:17,359
i think those are the types of concerns

00:43:15,680 --> 00:43:20,240
which would ideally be addressed in a

00:43:17,359 --> 00:43:20,240
design document

00:43:25,119 --> 00:43:28,960
should we just have a call for consensus

00:43:26,800 --> 00:43:29,280
for wanting to have a design document on

00:43:28,960 --> 00:43:31,200
this

00:43:29,280 --> 00:43:32,880
that we generally support and want to

00:43:31,200 --> 00:43:35,760
see a design document

00:43:32,880 --> 00:43:35,760
sure makes sense

00:43:36,240 --> 00:43:41,760
more more to do slots in our design

00:43:39,520 --> 00:43:44,000
should we have a consensus that bjern

00:43:41,760 --> 00:43:47,040
writes it or

00:43:44,000 --> 00:43:48,000
i can't yes right now let's erase it by

00:43:47,040 --> 00:43:51,119
next week

00:43:48,000 --> 00:43:54,319
do you think we can override him

00:43:51,119 --> 00:44:09,839
not next week next week is

00:43:54,319 --> 00:44:09,839
special i expect great things

00:44:25,839 --> 00:44:30,079
consensus we like the idea and they tend

00:44:27,839 --> 00:44:33,359
to explore it in a design document

00:44:30,079 --> 00:44:33,359
or agree to anyone disagreeing

00:44:35,280 --> 00:44:43,440
very good next one is bartek

00:44:40,400 --> 00:44:44,560
one push api push basically api versus

00:44:43,440 --> 00:44:47,280
open metrics

00:44:44,560 --> 00:44:48,640
push versus stream uh prometheus remote

00:44:47,280 --> 00:44:50,960
right

00:44:48,640 --> 00:44:52,880
right so i think this is something what

00:44:50,960 --> 00:44:56,560
i what i wanted to touch on

00:44:52,880 --> 00:44:59,680
for a long time so um

00:44:56,560 --> 00:45:04,560
you know there is there are still uh

00:44:59,680 --> 00:45:06,560
some use cases for pushing

00:45:04,560 --> 00:45:08,160
a metric right to your your application

00:45:06,560 --> 00:45:10,480
push gateway is one thing

00:45:08,160 --> 00:45:11,680
we recently started um discussion around

00:45:10,480 --> 00:45:13,520
serverless

00:45:11,680 --> 00:45:16,079
and uh essentially short living

00:45:13,520 --> 00:45:18,400
containers for some cases the push

00:45:16,079 --> 00:45:19,920
pushing capabilities similar to statsd

00:45:18,400 --> 00:45:22,880
which bjorn mentioned uh

00:45:19,920 --> 00:45:23,280
you know before is is desired we have

00:45:22,880 --> 00:45:26,560
some

00:45:23,280 --> 00:45:28,640
uh you know semi stable uh

00:45:26,560 --> 00:45:30,640
things that that work which is like push

00:45:28,640 --> 00:45:32,640
api it's part of the client goal line so

00:45:30,640 --> 00:45:34,880
it's kind of official

00:45:32,640 --> 00:45:36,160
recently we introduced openmetrics which

00:45:34,880 --> 00:45:39,520
is which has

00:45:36,160 --> 00:45:41,440
um push api which i i was

00:45:39,520 --> 00:45:43,359
i was not even aware of because there is

00:45:41,440 --> 00:45:44,880
no example implementation of it so i

00:45:43,359 --> 00:45:46,800
guess there is some work to be done if

00:45:44,880 --> 00:45:49,599
you want to share this wider

00:45:46,800 --> 00:45:50,000
and i want to mention that remote write

00:45:49,599 --> 00:45:52,960
is

00:45:50,000 --> 00:45:54,640
capable of doing this push 8 pushing api

00:45:52,960 --> 00:45:55,680
kind of capabilities because it has

00:45:54,640 --> 00:45:58,720
metadata

00:45:55,680 --> 00:45:59,760
uh you know fields from recent kind of

00:45:58,720 --> 00:46:02,480
into

00:45:59,760 --> 00:46:04,480
extensions right so there is huge

00:46:02,480 --> 00:46:07,599
overlap between those um

00:46:04,480 --> 00:46:08,000
apis so my question is like do we want

00:46:07,599 --> 00:46:10,800
to

00:46:08,000 --> 00:46:11,359
maybe reduce at least i don't know

00:46:10,800 --> 00:46:14,240
remove

00:46:11,359 --> 00:46:15,359
push gateway api and and get open

00:46:14,240 --> 00:46:17,839
metrics api

00:46:15,359 --> 00:46:20,000
as the official one and deprecate the

00:46:17,839 --> 00:46:22,720
push gateway api because those are

00:46:20,000 --> 00:46:24,400
the ones that to me are definitely

00:46:22,720 --> 00:46:26,640
overlapping because if you see the

00:46:24,400 --> 00:46:29,280
example of of push gateway api

00:46:26,640 --> 00:46:30,079
it's really like promotes exposition

00:46:29,280 --> 00:46:33,359
format

00:46:30,079 --> 00:46:37,119
being pushed right remote right

00:46:33,359 --> 00:46:38,079
is to me ideal you know end goal because

00:46:37,119 --> 00:46:40,480
it can replace

00:46:38,079 --> 00:46:41,599
push gateway api it can replace open

00:46:40,480 --> 00:46:44,880
metric push

00:46:41,599 --> 00:46:47,280
and actually have more capabilities for

00:46:44,880 --> 00:46:48,319
replication because it can group samples

00:46:47,280 --> 00:46:51,760
under single

00:46:48,319 --> 00:46:53,680
metadata under single series so to me

00:46:51,760 --> 00:46:55,599
in ideal world i would have just remote

00:46:53,680 --> 00:46:56,480
right to be honest i don't see any harm

00:46:55,599 --> 00:46:58,800
in that

00:46:56,480 --> 00:47:00,160
so i would love to see uh yeah your

00:46:58,800 --> 00:47:02,800
feedback

00:47:00,160 --> 00:47:04,800
first of all maybe what to reduce what

00:47:02,800 --> 00:47:07,599
to take as an official one

00:47:04,800 --> 00:47:09,520
and how to document it better how to

00:47:07,599 --> 00:47:12,800
show it better right

00:47:09,520 --> 00:47:14,960
so my use case for the pushgate api

00:47:12,800 --> 00:47:17,520
is cron job that just have access to

00:47:14,960 --> 00:47:19,680
curl and if you tell me oh i can do

00:47:17,520 --> 00:47:21,280
remote right with curl i would be happy

00:47:19,680 --> 00:47:23,200
to do that

00:47:21,280 --> 00:47:25,839
and i think that's a lot of the people

00:47:23,200 --> 00:47:28,400
are just using like a chrome job in

00:47:25,839 --> 00:47:30,319
red at linux when they have access to

00:47:28,400 --> 00:47:32,319
curl and text file and they just

00:47:30,319 --> 00:47:33,920
just do a girl and they push the metrics

00:47:32,319 --> 00:47:36,240
and that's not possible with remote

00:47:33,920 --> 00:47:36,240
right

00:47:36,400 --> 00:47:40,319
yep i i also think remote ride is too

00:47:38,880 --> 00:47:43,359
complicated a protocol

00:47:40,319 --> 00:47:45,920
and we just had someone spend an entire

00:47:43,359 --> 00:47:47,520
week to build an arduino library for it

00:47:45,920 --> 00:47:51,200
but if it's a push gateway api that

00:47:47,520 --> 00:47:53,520
would be like five lines or something

00:47:51,200 --> 00:47:54,319
um product you are you're calling it

00:47:53,520 --> 00:47:57,119
push gateway

00:47:54,319 --> 00:47:58,960
api um so you're not talking about the

00:47:57,119 --> 00:48:03,359
push gateway itself

00:47:58,960 --> 00:48:05,200
or are you yeah that's a good point so

00:48:03,359 --> 00:48:08,640
i'm talking about api because

00:48:05,200 --> 00:48:10,960
it's kind of

00:48:08,640 --> 00:48:12,160
we can use this api outside of push

00:48:10,960 --> 00:48:14,160
gateway itself

00:48:12,160 --> 00:48:15,200
rightly just you know push mechanism

00:48:14,160 --> 00:48:17,920
that people

00:48:15,200 --> 00:48:19,520
sometimes like it's i think it's used as

00:48:17,920 --> 00:48:20,079
a good question what is using the weave

00:48:19,520 --> 00:48:21,839
work

00:48:20,079 --> 00:48:23,119
aggregation proxy which apparently is we

00:48:21,839 --> 00:48:24,880
used a lot

00:48:23,119 --> 00:48:26,559
i think it's push gateway api if i'm not

00:48:24,880 --> 00:48:28,559
wrong this is something i guess you need

00:48:26,559 --> 00:48:31,839
to check

00:48:28,559 --> 00:48:31,839
that's why i separate those things

00:48:32,160 --> 00:48:36,160
i mean the the problem here is also that

00:48:34,480 --> 00:48:37,599
the name push gateway we should have

00:48:36,160 --> 00:48:38,160
never named the push gateway right

00:48:37,599 --> 00:48:41,040
that's

00:48:38,160 --> 00:48:42,160
we should have named that export server

00:48:41,040 --> 00:48:44,400
because that's

00:48:42,160 --> 00:48:45,920
what google called it we just didn't

00:48:44,400 --> 00:48:46,720
want to copy all the google names

00:48:45,920 --> 00:48:50,000
because

00:48:46,720 --> 00:48:52,400
we're afraid i don't know um

00:48:50,000 --> 00:48:54,480
or yeah i don't know i think this was

00:48:52,400 --> 00:48:56,000
one somebody who was not an ex-googler

00:48:54,480 --> 00:48:58,000
called the push getter and he said we

00:48:56,000 --> 00:48:59,839
should not just use our internal google

00:48:58,000 --> 00:49:01,359
nomenclature we weren't confused people

00:48:59,839 --> 00:49:03,200
but now we have confused people because

00:49:01,359 --> 00:49:05,839
people think it's to push metrics

00:49:03,200 --> 00:49:06,400
which it's not right it's also like if

00:49:05,839 --> 00:49:09,119
you

00:49:06,400 --> 00:49:10,000
if you i think if you switch push

00:49:09,119 --> 00:49:12,400
gateway to

00:49:10,000 --> 00:49:14,880
be a real remote right receiver you

00:49:12,400 --> 00:49:17,359
would increase that confusion even more

00:49:14,880 --> 00:49:18,559
because it's not really a remote write

00:49:17,359 --> 00:49:21,040
receiver right i mean it wouldn't

00:49:18,559 --> 00:49:23,040
propagate it properly to prometheus

00:49:21,040 --> 00:49:24,960
well on the other hand if you have a job

00:49:23,040 --> 00:49:26,319
who uses remote right to push to

00:49:24,960 --> 00:49:27,920
prometheus server that's a very

00:49:26,319 --> 00:49:30,800
different thing

00:49:27,920 --> 00:49:31,359
from pushing to a push gateway um also

00:49:30,800 --> 00:49:32,960
you have to

00:49:31,359 --> 00:49:34,640
like in the prometa setup you have to

00:49:32,960 --> 00:49:35,920
push to all prometheus servers that are

00:49:34,640 --> 00:49:37,760
on your ajay setup

00:49:35,920 --> 00:49:39,359
well push gateway is like this one

00:49:37,760 --> 00:49:39,680
single thing where you push through and

00:49:39,359 --> 00:49:41,920
then

00:49:39,680 --> 00:49:42,720
all the parameters ever scrape it i

00:49:41,920 --> 00:49:44,880
think it's it's

00:49:42,720 --> 00:49:48,640
it's a very different thing and perhaps

00:49:44,880 --> 00:49:48,640
it's just a clarification issue

00:49:48,720 --> 00:49:56,000
there is so um first i i fully agree

00:49:52,880 --> 00:49:57,680
we we shouldn't have um we need

00:49:56,000 --> 00:50:00,559
something simple which you can just

00:49:57,680 --> 00:50:02,960
write in a in a shell script also

00:50:00,559 --> 00:50:03,920
um and i do think that in theory you can

00:50:02,960 --> 00:50:05,440
rename

00:50:03,920 --> 00:50:08,319
the push gateway to something more

00:50:05,440 --> 00:50:10,400
fitting which brings me directly to next

00:50:08,319 --> 00:50:13,359
point which i already already pre-wrote

00:50:10,400 --> 00:50:14,240
in the thing i do expect that we will

00:50:13,359 --> 00:50:16,480
have

00:50:14,240 --> 00:50:20,400
more use cases for things which are

00:50:16,480 --> 00:50:24,000
inherently pushed and cached by a thing

00:50:20,400 --> 00:50:28,079
as in mqtt and such as

00:50:24,000 --> 00:50:31,040
like in particular zigbee and mqtt are

00:50:28,079 --> 00:50:31,520
the things within the iot space and

00:50:31,040 --> 00:50:34,000
there's

00:50:31,520 --> 00:50:35,839
more and more use cases i mean the use

00:50:34,000 --> 00:50:38,000
cases exist for ages

00:50:35,839 --> 00:50:38,880
but as more and more industry players

00:50:38,000 --> 00:50:41,359
like actually

00:50:38,880 --> 00:50:42,319
production industry or data centers and

00:50:41,359 --> 00:50:45,440
such

00:50:42,319 --> 00:50:47,680
uh start using prometheus

00:50:45,440 --> 00:50:49,680
we will have more and more of an issue

00:50:47,680 --> 00:50:53,040
where we need to have this

00:50:49,680 --> 00:50:56,000
this official landing ground for things

00:50:53,040 --> 00:50:57,680
having a nomenclature in parallel to

00:50:56,000 --> 00:51:00,480
exporter

00:50:57,680 --> 00:51:02,640
like cacher or something might make

00:51:00,480 --> 00:51:06,000
sense where we have the

00:51:02,640 --> 00:51:07,760
openmetrics push caching gateway

00:51:06,000 --> 00:51:10,000
shitty name but you you get my drift

00:51:07,760 --> 00:51:13,200
where we have the mqtt

00:51:10,000 --> 00:51:16,640
uh caching thingy um

00:51:13,200 --> 00:51:18,800
that kind of thing i i think

00:51:16,640 --> 00:51:20,160
that the use case will not go away and i

00:51:18,800 --> 00:51:23,040
think the use case for

00:51:20,160 --> 00:51:23,520
different formats will actually increase

00:51:23,040 --> 00:51:27,119
not

00:51:23,520 --> 00:51:29,280
decrease on the back end it can be

00:51:27,119 --> 00:51:30,559
remote right no worries if you have

00:51:29,280 --> 00:51:32,960
local if you have

00:51:30,559 --> 00:51:34,640
local everything the other thing which

00:51:32,960 --> 00:51:36,000
we need to consider is staleness and

00:51:34,640 --> 00:51:38,960
upness

00:51:36,000 --> 00:51:41,680
that's that's something which eg open

00:51:38,960 --> 00:51:45,200
telemetry is

00:51:41,680 --> 00:51:46,319
is forced to address um for for certain

00:51:45,200 --> 00:51:48,480
scenarios

00:51:46,319 --> 00:51:50,319
of course you have inherent properties

00:51:48,480 --> 00:51:53,440
of pull

00:51:50,319 --> 00:51:54,559
which push simply cannot have in

00:51:53,440 --> 00:51:57,839
precisely

00:51:54,559 --> 00:52:00,000
the same way you can make approximations

00:51:57,839 --> 00:52:02,079
but you cannot make the same guarantees

00:52:00,000 --> 00:52:04,559
about reachability which you can make

00:52:02,079 --> 00:52:06,720
with with pull

00:52:04,559 --> 00:52:08,559
okay so what i gather it looks like we

00:52:06,720 --> 00:52:11,119
have

00:52:08,559 --> 00:52:12,079
this direction of thought that we should

00:52:11,119 --> 00:52:15,359
uh you know

00:52:12,079 --> 00:52:17,200
find an official push api

00:52:15,359 --> 00:52:19,200
but this has to come with some

00:52:17,200 --> 00:52:21,280
implementation of distributed

00:52:19,200 --> 00:52:22,720
counter distributed gouge or anything

00:52:21,280 --> 00:52:26,079
like that right

00:52:22,720 --> 00:52:27,760
um and i wonder i'm here

00:52:26,079 --> 00:52:29,280
in this maintainer team for like i don't

00:52:27,760 --> 00:52:30,960
know three years or something i still

00:52:29,280 --> 00:52:32,319
don't get why we cannot extend push

00:52:30,960 --> 00:52:35,040
gateway to do this

00:52:32,319 --> 00:52:37,520
um so i think we need to have some kind

00:52:35,040 --> 00:52:40,079
of direction on this one should we just

00:52:37,520 --> 00:52:41,599
create something new or or yeah i'm

00:52:40,079 --> 00:52:43,359
sorry i'm ignorant but like

00:52:41,599 --> 00:52:44,839
push gateway to me should be capable of

00:52:43,359 --> 00:52:48,079
doing those things

00:52:44,839 --> 00:52:49,839
um what specifically you mean the push

00:52:48,079 --> 00:52:50,880
gateway should be able to do prometheus

00:52:49,839 --> 00:52:53,920
remote right

00:52:50,880 --> 00:52:56,960
no no no uh to do uh

00:52:53,920 --> 00:52:58,960
this distributed counter

00:52:56,960 --> 00:53:01,599
cache which we describe as an open

00:52:58,960 --> 00:53:03,920
metric pusher right

00:53:01,599 --> 00:53:04,960
in my opinion this is basically an agent

00:53:03,920 --> 00:53:08,240
use case

00:53:04,960 --> 00:53:12,400
um it's

00:53:08,240 --> 00:53:12,400
like the the diff

00:53:12,800 --> 00:53:16,800
going back i think roughly two years uh

00:53:15,280 --> 00:53:20,720
in in our discussions

00:53:16,800 --> 00:53:23,760
um we we had this discussion about a

00:53:20,720 --> 00:53:26,000
a more or less caching prometheus which

00:53:23,760 --> 00:53:27,359
uh sits in a pop like that was the

00:53:26,000 --> 00:53:29,280
example i used back then

00:53:27,359 --> 00:53:32,240
with sits which sits in a pop and it's

00:53:29,280 --> 00:53:34,480
like a super short-lived prometheus

00:53:32,240 --> 00:53:36,720
which which is able to function on its

00:53:34,480 --> 00:53:39,760
own and do everything you need it to do

00:53:36,720 --> 00:53:41,680
but it's designed to to get all its data

00:53:39,760 --> 00:53:42,559
to somewhere else yet if it loses

00:53:41,680 --> 00:53:45,599
connection

00:53:42,559 --> 00:53:46,160
it's able to to retain local state it it

00:53:45,599 --> 00:53:49,040
can

00:53:46,160 --> 00:53:50,000
show it can even create local alerts and

00:53:49,040 --> 00:53:52,240
such

00:53:50,000 --> 00:53:54,720
and to me all of those use cases are

00:53:52,240 --> 00:53:56,000
basically instantiations or sub-use

00:53:54,720 --> 00:53:59,839
cases of this wider

00:53:56,000 --> 00:54:02,079
thing so my thinking is

00:53:59,839 --> 00:54:03,680
that we approach this from an agent

00:54:02,079 --> 00:54:06,240
point of view or from an

00:54:03,680 --> 00:54:08,079
edge point of view or pop or what have

00:54:06,240 --> 00:54:11,040
you point of view

00:54:08,079 --> 00:54:12,400
so but for this generic case and then we

00:54:11,040 --> 00:54:14,720
just break those

00:54:12,400 --> 00:54:16,079
individual components out again into

00:54:14,720 --> 00:54:19,359
things which you can run

00:54:16,079 --> 00:54:22,640
on their own so i see a a

00:54:19,359 --> 00:54:24,319
combined prometheus agent um similar to

00:54:22,640 --> 00:54:26,960
how the grafana agent has

00:54:24,319 --> 00:54:29,440
more than one thing as an absolute

00:54:26,960 --> 00:54:32,720
possibility

00:54:29,440 --> 00:54:36,160
but that design should then match

00:54:32,720 --> 00:54:39,280
for example this new push

00:54:36,160 --> 00:54:40,960
cache thingy um

00:54:39,280 --> 00:54:43,200
i mean just a push gateway shouldn't be

00:54:40,960 --> 00:54:44,960
able to scrape but but an agent is able

00:54:43,200 --> 00:54:46,960
to scrape

00:54:44,960 --> 00:54:48,319
and and if you have a few flags you can

00:54:46,960 --> 00:54:51,040
just make that thing

00:54:48,319 --> 00:54:52,799
act in precisely the way you want it it

00:54:51,040 --> 00:54:54,079
it need to have local storage do you

00:54:52,799 --> 00:54:55,680
want to have a local query

00:54:54,079 --> 00:54:57,119
do you need local recording rules do you

00:54:55,680 --> 00:54:59,040
need local alerting

00:54:57,119 --> 00:55:01,200
do you need it to scrape or do you

00:54:59,040 --> 00:55:04,240
expect it to just be pushed to

00:55:01,200 --> 00:55:06,799
do you need it to receive mqtt or do you

00:55:04,240 --> 00:55:08,480
expect it to to uh to just to open

00:55:06,799 --> 00:55:09,200
metrics or what have you this kind of

00:55:08,480 --> 00:55:10,559
thing

00:55:09,200 --> 00:55:12,319
and then you just break it out again

00:55:10,559 --> 00:55:13,119
into individual components so you can

00:55:12,319 --> 00:55:16,079
run everything

00:55:13,119 --> 00:55:16,960
on its own as per uh recommended

00:55:16,079 --> 00:55:19,599
standard

00:55:16,960 --> 00:55:21,920
but i i want to adjust the sky being the

00:55:19,599 --> 00:55:23,520
open telemetry collector why would we

00:55:21,920 --> 00:55:27,280
need to rewrite the open telemetry

00:55:23,520 --> 00:55:30,480
collector because that's what it's doing

00:55:27,280 --> 00:55:34,240
ish not quite

00:55:30,480 --> 00:55:37,359
the big difference is one has a a

00:55:34,240 --> 00:55:38,160
optimized happy path and it's it's

00:55:37,359 --> 00:55:41,200
optimized

00:55:38,160 --> 00:55:44,480
just for the one use case and also

00:55:41,200 --> 00:55:48,160
completely based or largely based on on

00:55:44,480 --> 00:55:51,440
long-running battle proven code um

00:55:48,160 --> 00:55:52,000
there is the other has has a much wider

00:55:51,440 --> 00:55:54,559
envelope

00:55:52,000 --> 00:55:55,680
and and wants to cover uh even more use

00:55:54,559 --> 00:55:58,240
cases and

00:55:55,680 --> 00:56:00,079
highly complex pipelines which i don't

00:55:58,240 --> 00:56:02,240
think should be in scope for

00:56:00,079 --> 00:56:05,760
a opinionated implementation which is

00:56:02,240 --> 00:56:05,760
specific to voice prometheus

00:56:06,000 --> 00:56:10,240
but the m2b format is compatible

00:56:11,839 --> 00:56:16,000
yes um and i i like from from the test

00:56:15,119 --> 00:56:17,520
results and everything

00:56:16,000 --> 00:56:19,680
they're working towards this and they

00:56:17,520 --> 00:56:22,720
will have it at some point

00:56:19,680 --> 00:56:26,160
uh but i don't think it makes sense to

00:56:22,720 --> 00:56:26,880
to completely give um give this away in

00:56:26,160 --> 00:56:30,079
particular

00:56:26,880 --> 00:56:32,559
due to us already having all the bits

00:56:30,079 --> 00:56:32,559
and pieces

00:56:33,920 --> 00:56:39,359
like we do have we do have a local cache

00:56:36,319 --> 00:56:39,359
that's called psdb

00:56:40,000 --> 00:56:43,359
we do have an interface to the alert

00:56:41,599 --> 00:56:44,880
manager which is already compatible with

00:56:43,359 --> 00:56:46,000
the prometheus alertmanager all those

00:56:44,880 --> 00:56:47,760
bits and pieces

00:56:46,000 --> 00:56:49,839
would make sense i mean we made the

00:56:47,760 --> 00:56:50,880
argument or the proposal to the open

00:56:49,839 --> 00:56:53,440
telemetry uh

00:56:50,880 --> 00:56:55,839
team several times to to work together

00:56:53,440 --> 00:56:56,799
on an agent as the basis for a generic

00:56:55,839 --> 00:56:59,040
collector

00:56:56,799 --> 00:57:01,440
which they can then extend with otlp and

00:56:59,040 --> 00:57:03,280
everything but that never came to be

00:57:01,440 --> 00:57:05,200
yet i don't think we should be pulling

00:57:03,280 --> 00:57:06,480
all the things in which are not

00:57:05,200 --> 00:57:08,319
prometheus specific

00:57:06,480 --> 00:57:09,520
for something which we intend to be used

00:57:08,319 --> 00:57:13,040
in a big mises

00:57:09,520 --> 00:57:14,880
specific manner yeah and i think the

00:57:13,040 --> 00:57:16,400
problem with

00:57:14,880 --> 00:57:17,920
or like missing part in the open

00:57:16,400 --> 00:57:20,640
telemetry right now

00:57:17,920 --> 00:57:21,760
collector is that it doesn't support

00:57:20,640 --> 00:57:24,480
open metric push

00:57:21,760 --> 00:57:26,559
right so uh i think that's another

00:57:24,480 --> 00:57:29,920
missing point but you know

00:57:26,559 --> 00:57:31,520
if we can add that receiver what they

00:57:29,920 --> 00:57:35,119
called right uh

00:57:31,520 --> 00:57:37,680
you know in theory it can it can fit our

00:57:35,119 --> 00:57:38,400
use case so i think that's the fair

00:57:37,680 --> 00:57:40,079
point julian

00:57:38,400 --> 00:57:43,040
covered but they're still missing

00:57:40,079 --> 00:57:43,040
compatibility right

00:57:46,720 --> 00:57:50,000
okay anyway i i'm not sure if we should

00:57:49,040 --> 00:57:53,599
focus or like

00:57:50,000 --> 00:57:56,799
i don't know discuss if such

00:57:53,599 --> 00:57:58,640
caching capability for pushing things

00:57:56,799 --> 00:58:00,319
aggregating things and you know

00:57:58,640 --> 00:58:02,000
constructing literally

00:58:00,319 --> 00:58:04,880
uh metrics from even because that's what

00:58:02,000 --> 00:58:06,559
it is we should

00:58:04,880 --> 00:58:08,880
put it inside prometheus or some

00:58:06,559 --> 00:58:10,079
separateness or some agent or outside

00:58:08,880 --> 00:58:11,839
because

00:58:10,079 --> 00:58:13,680
i don't know why not just keeping it as

00:58:11,839 --> 00:58:15,839
a sidecar as an exporter

00:58:13,680 --> 00:58:16,720
and then you know just later on we can

00:58:15,839 --> 00:58:18,400
discuss if

00:58:16,720 --> 00:58:19,920
this should be one of the one binary or

00:58:18,400 --> 00:58:22,079
not i don't think

00:58:19,920 --> 00:58:24,960
uh it's an important detail we have more

00:58:22,079 --> 00:58:24,960
unknowns right now

00:58:25,839 --> 00:58:29,440
so the question is like what actionable

00:58:27,359 --> 00:58:32,720
we can do from here

00:58:29,440 --> 00:58:35,200
uh looks like we

00:58:32,720 --> 00:58:36,640
have some rough consensus of do we have

00:58:35,200 --> 00:58:39,440
consensus on

00:58:36,640 --> 00:58:40,720
creating some kind of aggregation uh

00:58:39,440 --> 00:58:44,160
exporter for all

00:58:40,720 --> 00:58:47,200
for for those push cases uh

00:58:44,160 --> 00:58:49,200
is that weaver thing has anyone tried

00:58:47,200 --> 00:58:51,680
this in production

00:58:49,200 --> 00:58:52,559
that's the question i mean if that's

00:58:51,680 --> 00:58:55,440
already

00:58:52,559 --> 00:58:56,160
cool we could i mean we already

00:58:55,440 --> 00:58:58,880
recommend

00:58:56,160 --> 00:59:00,079
to try it out if you need this use case

00:58:58,880 --> 00:59:03,599
and

00:59:00,079 --> 00:59:05,359
um if if i mean

00:59:03,599 --> 00:59:07,040
if that's a good start we could ask

00:59:05,359 --> 00:59:08,319
refworks if we can put this into the

00:59:07,040 --> 00:59:10,640
prometheus orc or

00:59:08,319 --> 00:59:12,400
if we just need to refine it a bit it's

00:59:10,640 --> 00:59:15,520
apache license we can just

00:59:12,400 --> 00:59:18,799
put it into the prometheus orc as a fork

00:59:15,520 --> 00:59:20,880
um i i mean the the

00:59:18,799 --> 00:59:22,319
there's a it's a paragraph about this

00:59:20,880 --> 00:59:24,319
aggregation feature

00:59:22,319 --> 00:59:26,000
in push gateway in the push gateway

00:59:24,319 --> 00:59:28,079
which is essentially

00:59:26,000 --> 00:59:30,160
it doesn't say no that can't be pushed

00:59:28,079 --> 00:59:31,040
gateway but it's just a different use

00:59:30,160 --> 00:59:32,720
case and

00:59:31,040 --> 00:59:34,640
if we want the push cable to do those

00:59:32,720 --> 00:59:36,720
two things we can do it

00:59:34,640 --> 00:59:38,240
but we could as well have it in two

00:59:36,720 --> 00:59:40,000
different things it

00:59:38,240 --> 00:59:41,839
that doesn't really make a difference

00:59:40,000 --> 00:59:44,240
the concern so far

00:59:41,839 --> 00:59:46,319
i had is that it's actually it needs to

00:59:44,240 --> 00:59:47,200
be well understood like i'm worried

00:59:46,319 --> 00:59:49,440
about

00:59:47,200 --> 00:59:51,359
how do you prevent double counting and

00:59:49,440 --> 00:59:52,720
loss of counts and all those things like

00:59:51,359 --> 00:59:55,599
if if the

00:59:52,720 --> 00:59:56,880
pushing client gets the network error

00:59:55,599 --> 00:59:58,400
should it retry

00:59:56,880 --> 01:00:00,240
because the retry might be a double

00:59:58,400 --> 01:00:02,400
count or it might not and

01:00:00,240 --> 01:00:04,400
then you need some id in your push or

01:00:02,400 --> 01:00:06,720
something i mean all these mistakes that

01:00:04,400 --> 01:00:07,599
that's the needs to be thought through

01:00:06,720 --> 01:00:11,200
and

01:00:07,599 --> 01:00:12,799
totally open to do this properly but um

01:00:11,200 --> 01:00:14,480
somebody has to do it properly right we

01:00:12,799 --> 01:00:16,319
cannot just say it's easy let's just put

01:00:14,480 --> 01:00:20,000
into push get right i don't think it's

01:00:16,319 --> 01:00:20,000
it's that easy yeah true

01:00:20,880 --> 01:00:24,559
and yeah that's why i'm really honestly

01:00:23,280 --> 01:00:26,720
curious how people

01:00:24,559 --> 01:00:27,760
have fared with the refworks push

01:00:26,720 --> 01:00:29,280
aggregator

01:00:27,760 --> 01:00:32,160
perhaps it's all great right and then we

01:00:29,280 --> 01:00:33,520
could just adopt it

01:00:32,160 --> 01:00:36,559
i think it would be a good starting

01:00:33,520 --> 01:00:36,559
point but definitely

01:00:36,799 --> 01:00:41,119
yeah we can ask the the usual suspect

01:00:39,920 --> 01:00:44,480
who committed the

01:00:41,119 --> 01:00:47,760
of aggregation gateway which is brian

01:00:44,480 --> 01:00:47,760
burham and tom wilkie

01:00:48,960 --> 01:00:53,440
i think we can reach them the other

01:00:51,920 --> 01:00:54,799
person who we can reach is robert who

01:00:53,440 --> 01:00:58,240
joined the call

01:00:54,799 --> 01:00:59,680
some time ago um because like what i'm

01:00:58,240 --> 01:01:02,480
hearing is a little bit prometheus

01:00:59,680 --> 01:01:02,480
collector-ish

01:01:06,319 --> 01:01:12,000
so i i know there's bits and pieces

01:01:09,680 --> 01:01:13,680
planned for grafana agent to also be a

01:01:12,000 --> 01:01:15,920
collector-ish

01:01:13,680 --> 01:01:17,280
maybe that's also something which we can

01:01:15,920 --> 01:01:20,319
reuse for

01:01:17,280 --> 01:01:20,319
for this type of thing

01:01:22,400 --> 01:01:25,440
yeah perks you can hit all birds with

01:01:24,480 --> 01:01:27,359
that stone right

01:01:25,440 --> 01:01:28,880
also this when we talked about

01:01:27,359 --> 01:01:30,400
serverless

01:01:28,880 --> 01:01:32,480
if you have a serverless use case where

01:01:30,400 --> 01:01:33,920
you are willing to push something over

01:01:32,480 --> 01:01:36,319
the network

01:01:33,920 --> 01:01:37,680
you could do it with exactly that thing

01:01:36,319 --> 01:01:39,280
right

01:01:37,680 --> 01:01:41,920
i just want don't want to conflate all

01:01:39,280 --> 01:01:43,040
of this with the normal of a batch job

01:01:41,920 --> 01:01:44,400
and want to report

01:01:43,040 --> 01:01:46,640
finish of the batch up to the push

01:01:44,400 --> 01:01:48,640
gateway i think that's just a different

01:01:46,640 --> 01:01:52,400
and fundamentally very simple use case

01:01:48,640 --> 01:01:54,720
um that we don't have to mix up with the

01:01:52,400 --> 01:01:56,960
very powerful and potentially a bit

01:01:54,720 --> 01:01:59,760
hairy

01:01:56,960 --> 01:02:01,520
aggregation collector thing with that

01:01:59,760 --> 01:02:04,319
aggregation collector thing yes

01:02:01,520 --> 01:02:07,599
it's on tsdp and queries and would it be

01:02:04,319 --> 01:02:09,760
a primitive server

01:02:07,599 --> 01:02:10,880
no i think it's exporter that's what we

01:02:09,760 --> 01:02:13,359
want no it's

01:02:10,880 --> 01:02:14,960
essentially starts the exporter just

01:02:13,359 --> 01:02:16,480
without the problems of the stat c

01:02:14,960 --> 01:02:19,680
protocol

01:02:16,480 --> 01:02:21,680
and and i'm i don't feel qualified to

01:02:19,680 --> 01:02:22,880
solve those problems but i'm fairly sure

01:02:21,680 --> 01:02:24,559
there are people

01:02:22,880 --> 01:02:26,720
in our community or somewhere in the

01:02:24,559 --> 01:02:28,640
universe who are fairly qualified

01:02:26,720 --> 01:02:30,319
thinking about this problem or who might

01:02:28,640 --> 01:02:33,280
have already solved it we just

01:02:30,319 --> 01:02:35,599
unaware i haven't even studied how the

01:02:33,280 --> 01:02:38,799
refworks push aggregators doing it

01:02:35,599 --> 01:02:41,200
if they are doing anything about it

01:02:38,799 --> 01:02:43,039
okay uh just to catch up so to rephrase

01:02:41,200 --> 01:02:46,160
you burn you're saying that

01:02:43,039 --> 01:02:49,440
bad job's case should be actually uh

01:02:46,160 --> 01:02:51,440
solved by the push gateway

01:02:49,440 --> 01:02:53,440
why so different than the serverless

01:02:51,440 --> 01:02:55,440
this very narrow use case the push

01:02:53,440 --> 01:02:57,839
gateway was meant for right and then now

01:02:55,440 --> 01:03:00,079
people shoehorn it into other use cases

01:02:57,839 --> 01:03:02,480
which means they have those use cases

01:03:00,079 --> 01:03:03,680
but i think we should not support the

01:03:02,480 --> 01:03:05,599
shoe holding we should just

01:03:03,680 --> 01:03:07,920
create a proper solution for those use

01:03:05,599 --> 01:03:07,920
cases

01:03:09,280 --> 01:03:13,760
i still don't get why budget is narrow

01:03:12,079 --> 01:03:14,559
think of serverless like what what

01:03:13,760 --> 01:03:18,000
exactly

01:03:14,559 --> 01:03:20,079
you can simplify you know several less

01:03:18,000 --> 01:03:22,160
like long ongoing let's say

01:03:20,079 --> 01:03:24,559
functions that you need to i don't know

01:03:22,160 --> 01:03:26,720
use push for some reason

01:03:24,559 --> 01:03:31,280
and those are just bad jobs so so i

01:03:26,720 --> 01:03:33,599
don't get towards the difference

01:03:31,280 --> 01:03:35,280
is not complete to describe the push

01:03:33,599 --> 01:03:36,160
data use case because bad shops often

01:03:35,280 --> 01:03:37,440
have a similar

01:03:36,160 --> 01:03:39,200
thing where they want an aggregate

01:03:37,440 --> 01:03:42,400
account right uh the

01:03:39,200 --> 01:03:44,720
the uh push gateway is for kind of

01:03:42,400 --> 01:03:47,200
self system i mean the classical example

01:03:44,720 --> 01:03:49,760
is is i run a database backup

01:03:47,200 --> 01:03:51,520
and i want to report when i'm done so

01:03:49,760 --> 01:03:54,720
that on the push gateway i can see

01:03:51,520 --> 01:03:58,720
if the last backup is too long ago right

01:03:54,720 --> 01:04:01,119
but also if i miss that it's that's

01:03:58,720 --> 01:04:03,119
it's it's i don't lose any data i just

01:04:01,119 --> 01:04:05,359
might get the spurious alert right it's

01:04:03,119 --> 01:04:06,799
it's um that's that's what this is

01:04:05,359 --> 01:04:07,760
simple where push category can get a

01:04:06,799 --> 01:04:09,760
wave it's not

01:04:07,760 --> 01:04:11,760
having a proper persistent solution not

01:04:09,760 --> 01:04:14,860
having any h a story

01:04:11,760 --> 01:04:16,079
all those things right well um

01:04:14,860 --> 01:04:18,880
[Music]

01:04:16,079 --> 01:04:19,839
uh it's also a bad job if i just want to

01:04:18,880 --> 01:04:21,440
add up all the

01:04:19,839 --> 01:04:22,799
process records right but that's not

01:04:21,440 --> 01:04:24,319
what the push gateway probably at

01:04:22,799 --> 01:04:26,559
supports right now that would be

01:04:24,319 --> 01:04:29,119
where i want to add up stuff in the

01:04:26,559 --> 01:04:31,839
distributed fashion

01:04:29,119 --> 01:04:33,760
yeah cool okay so this seems like a good

01:04:31,839 --> 01:04:35,119
discussion i wonder if we can navigate

01:04:33,760 --> 01:04:38,559
to the api part

01:04:35,119 --> 01:04:41,359
so let's say we have stats the exporter

01:04:38,559 --> 01:04:43,200
kind of like that and we have

01:04:41,359 --> 01:04:45,280
contributors who are

01:04:43,200 --> 01:04:46,880
very willing to i don't know use maybe

01:04:45,280 --> 01:04:47,599
with aggregation proxy as a starting

01:04:46,880 --> 01:04:49,839
point but

01:04:47,599 --> 01:04:52,319
let's say added to the promote use or

01:04:49,839 --> 01:04:54,799
org or like primitives community

01:04:52,319 --> 01:04:55,440
what should be the front api for that

01:04:54,799 --> 01:04:57,920
should we

01:04:55,440 --> 01:05:00,079
actually switch to openmetric push maybe

01:04:57,920 --> 01:05:01,680
or and deprecate the push gateway api

01:05:00,079 --> 01:05:04,240
should we and we do that for the push

01:05:01,680 --> 01:05:05,920
gateway as well should we rename

01:05:04,240 --> 01:05:08,160
looks like we don't want to keep just

01:05:05,920 --> 01:05:08,640
remote right for the protobuf reasoning

01:05:08,160 --> 01:05:11,359
right

01:05:08,640 --> 01:05:12,799
so that's i think consensus but um still

01:05:11,359 --> 01:05:15,119
we have open metrics and put together

01:05:12,799 --> 01:05:17,680
api being similar thing

01:05:15,119 --> 01:05:18,480
it also depends i mean the oh there's

01:05:17,680 --> 01:05:20,319
the format

01:05:18,480 --> 01:05:22,559
of how to transfer the metrics but

01:05:20,319 --> 01:05:24,319
there's also like technical concerns

01:05:22,559 --> 01:05:26,160
which i mean as i said i don't feel

01:05:24,319 --> 01:05:26,559
qualified but i could imagine you want

01:05:26,160 --> 01:05:29,920
to

01:05:26,559 --> 01:05:31,119
also push a uuid to prevent double

01:05:29,920 --> 01:05:32,960
counts right

01:05:31,119 --> 01:05:34,400
and perhaps you want to transfer a

01:05:32,960 --> 01:05:36,640
sequence number if

01:05:34,400 --> 01:05:38,480
if this is not different jobs but the

01:05:36,640 --> 01:05:40,559
same and they can actually

01:05:38,480 --> 01:05:41,599
give you an idea if they have pushed

01:05:40,559 --> 01:05:44,160
something before

01:05:41,599 --> 01:05:44,799
i don't know like this is all yeah but i

01:05:44,160 --> 01:05:47,520
think there

01:05:44,799 --> 01:05:48,400
could be parts in the protocol that

01:05:47,520 --> 01:05:50,240
avoid

01:05:48,400 --> 01:05:52,480
the problems of statsd with double

01:05:50,240 --> 01:05:55,200
counting and and loss of counts

01:05:52,480 --> 01:05:56,000
um but i'm not sure like this is where i

01:05:55,200 --> 01:05:57,920
would like to

01:05:56,000 --> 01:05:59,599
listen to someone who has already

01:05:57,920 --> 01:06:01,520
experienced

01:05:59,599 --> 01:06:04,240
like how to do push properly essentially

01:06:01,520 --> 01:06:06,880
because that's that's a hard problem

01:06:04,240 --> 01:06:07,599
i mean not only but yeah but aggregation

01:06:06,880 --> 01:06:10,400
like i

01:06:07,599 --> 01:06:12,000
i put i can't push events essentially

01:06:10,400 --> 01:06:15,520
and i don't want to

01:06:12,000 --> 01:06:19,039
over count and under count too much yeah

01:06:15,520 --> 01:06:22,000
there is there is another push api

01:06:19,039 --> 01:06:23,119
involved otlp metrics right i don't know

01:06:22,000 --> 01:06:26,720
what's

01:06:23,119 --> 01:06:33,839
what's the latest is it ga

01:06:26,720 --> 01:06:33,839
or not but yes it is

01:06:34,640 --> 01:06:37,599
i think we're currently having the

01:06:35,839 --> 01:06:39,200
problem that we have way too many uh

01:06:37,599 --> 01:06:41,920
balls in the air so let's

01:06:39,200 --> 01:06:42,640
try and do partial consensus uh to to

01:06:41,920 --> 01:06:45,520
remove

01:06:42,640 --> 01:06:47,119
uh axes from from the whole discussion

01:06:45,520 --> 01:06:49,599
space

01:06:47,119 --> 01:06:51,839
the simplest one is if we want to find a

01:06:49,599 --> 01:06:54,960
new name for the concept of

01:06:51,839 --> 01:06:56,079
something which does caching um so

01:06:54,960 --> 01:06:59,359
either i think

01:06:56,079 --> 01:07:00,079
caching exporter or pressure might be a

01:06:59,359 --> 01:07:03,599
a

01:07:00,079 --> 01:07:06,640
an appropriate name aggregation i like

01:07:03,599 --> 01:07:10,079
i like aggregation part because it's

01:07:06,640 --> 01:07:11,280
but aggregation is detached from uh from

01:07:10,079 --> 01:07:14,319
being a caching

01:07:11,280 --> 01:07:16,160
thing of course an aggregation can also

01:07:14,319 --> 01:07:20,400
happen through scrapes

01:07:16,160 --> 01:07:23,839
whereas caching implies um i retain this

01:07:20,400 --> 01:07:26,559
information uh

01:07:23,839 --> 01:07:29,440
which is not life like that that's one

01:07:26,559 --> 01:07:32,559
of the fundamental differences

01:07:29,440 --> 01:07:34,559
towards a normal exporter that you

01:07:32,559 --> 01:07:36,000
that you don't have live data it might

01:07:34,559 --> 01:07:38,960
be data which is

01:07:36,000 --> 01:07:39,599
half an hour old and i think that is one

01:07:38,960 --> 01:07:42,559
of the

01:07:39,599 --> 01:07:44,000
one of the common misunderstandings with

01:07:42,559 --> 01:07:47,119
push gateway and such

01:07:44,000 --> 01:07:50,400
and with mqtt exporter because it is not

01:07:47,119 --> 01:07:52,960
an exporter it is something which caches

01:07:50,400 --> 01:07:54,400
and offers this but also i don't want to

01:07:52,960 --> 01:07:56,240
derail the whole discussion

01:07:54,400 --> 01:07:58,799
i'm just trying to see if we can find

01:07:56,240 --> 01:08:01,920
consensus on just finding a name

01:07:58,799 --> 01:08:03,839
for that concept so going forward we

01:08:01,920 --> 01:08:05,440
have a name

01:08:03,839 --> 01:08:07,039
i don't think so i don't think we want

01:08:05,440 --> 01:08:08,000
the name before we actually know the

01:08:07,039 --> 01:08:10,160
solution

01:08:08,000 --> 01:08:12,160
yeah maybe let's let's postpone this

01:08:10,160 --> 01:08:14,000
yeah exactly okay but can we find a

01:08:12,160 --> 01:08:15,680
working name so at least we don't get

01:08:14,000 --> 01:08:17,759
confused ourselves because i don't

01:08:15,680 --> 01:08:20,159
feel that okay so can we just call it

01:08:17,759 --> 01:08:20,159
cacher

01:08:20,480 --> 01:08:24,319
is that a good name no it's not okay um

01:08:22,880 --> 01:08:26,799
suggestions i mean

01:08:24,319 --> 01:08:28,159
we all okay so this is for the

01:08:26,799 --> 01:08:30,960
non-aggregating

01:08:28,159 --> 01:08:32,880
thing it might be but that is not the

01:08:30,960 --> 01:08:33,600
defining property the defining property

01:08:32,880 --> 01:08:37,359
it

01:08:33,600 --> 01:08:37,359
is it gets stuffed

01:08:37,679 --> 01:08:41,759
it caches things which are pushed to it

01:08:40,159 --> 01:08:44,560
through whatever mechanism

01:08:41,759 --> 01:08:46,000
and then offers it to prometheus either

01:08:44,560 --> 01:08:49,440
through remote right

01:08:46,000 --> 01:08:50,960
or uh scraping well the the

01:08:49,440 --> 01:08:52,640
probably the better name would be

01:08:50,960 --> 01:08:55,520
working with push gateway

01:08:52,640 --> 01:08:55,520
next generation

01:08:56,000 --> 01:08:59,759
the real push gateway let's call it the

01:08:57,920 --> 01:09:03,040
real burst gate

01:08:59,759 --> 01:09:04,960
yes i mean like

01:09:03,040 --> 01:09:07,120
we have 15 minutes over over the full

01:09:04,960 --> 01:09:09,600
hours and maybe we need a break

01:09:07,120 --> 01:09:11,520
yeah uh just for his yes some people

01:09:09,600 --> 01:09:12,960
also called the push getter a cache

01:09:11,520 --> 01:09:15,199
which we didn't want to

01:09:12,960 --> 01:09:17,359
use as the name back then because we

01:09:15,199 --> 01:09:19,600
didn't want the timeout

01:09:17,359 --> 01:09:21,440
for uh metrics which is all another

01:09:19,600 --> 01:09:22,960
thing where people suggest that cache is

01:09:21,440 --> 01:09:25,520
something where the metric

01:09:22,960 --> 01:09:26,560
can time out right and we always

01:09:25,520 --> 01:09:28,000
rejected that

01:09:26,560 --> 01:09:29,920
and there might also be legitimate use

01:09:28,000 --> 01:09:33,040
cases for that one they are just not

01:09:29,920 --> 01:09:34,640
push gateway use cases so yeah

01:09:33,040 --> 01:09:36,719
purpose there as you say there are too

01:09:34,640 --> 01:09:40,239
many different use cases in the air

01:09:36,719 --> 01:09:41,600
which we um

01:09:40,239 --> 01:09:43,759
need to analyze more carefully what

01:09:41,600 --> 01:09:45,600
about just naming it push api

01:09:43,759 --> 01:09:50,000
convention right like we we work on the

01:09:45,600 --> 01:09:52,159
push api yes isn't that explicit

01:09:50,000 --> 01:09:53,040
i don't think so of course it's it's

01:09:52,159 --> 01:09:56,320
it's not

01:09:53,040 --> 01:09:58,239
talking about the concept

01:09:56,320 --> 01:10:00,560
at least in my mind we we are

01:09:58,239 --> 01:10:03,679
constructing different use cases

01:10:00,560 --> 01:10:07,040
out of a set of relatively few

01:10:03,679 --> 01:10:09,440
atomic use cases

01:10:07,040 --> 01:10:11,520
and my intention here is to to nail down

01:10:09,440 --> 01:10:14,080
the atomic use cases

01:10:11,520 --> 01:10:16,080
so we can discuss them in isolation as

01:10:14,080 --> 01:10:18,000
opposed to always coming back to

01:10:16,080 --> 01:10:20,000
like when we discuss serverless we have

01:10:18,000 --> 01:10:22,159
a whole bunch of different atomic use

01:10:20,000 --> 01:10:23,520
cases which is being combined into a new

01:10:22,159 --> 01:10:25,760
use case

01:10:23,520 --> 01:10:27,520
and that's it is where we get into the

01:10:25,760 --> 01:10:31,840
cycle confusion of discussion at least

01:10:27,520 --> 01:10:31,840
in my opinion

01:10:33,040 --> 01:10:37,280
buffer just as a working title and we we

01:10:36,719 --> 01:10:39,679
don't

01:10:37,280 --> 01:10:40,960
find consensus we just use it as a word

01:10:39,679 --> 01:10:44,000
for the concept

01:10:40,960 --> 01:10:47,679
of something which gets pushed to it

01:10:44,000 --> 01:10:51,679
or pushy pushy make push face

01:10:47,679 --> 01:10:52,320
exporter clashing exporter would also

01:10:51,679 --> 01:10:54,640
work but

01:10:52,320 --> 01:10:55,840
it doesn't matter so anyone make a

01:10:54,640 --> 01:10:57,920
suggestion and

01:10:55,840 --> 01:10:59,440
we take it else it will be called

01:10:57,920 --> 01:11:01,840
pushing with push phase

01:10:59,440 --> 01:11:02,480
but this is for something that also

01:11:01,840 --> 01:11:05,040
should

01:11:02,480 --> 01:11:05,760
do act like distributed counting

01:11:05,040 --> 01:11:08,880
essentially

01:11:05,760 --> 01:11:11,360
no not no this is already a higher level

01:11:08,880 --> 01:11:14,400
use case this is not the atomic use case

01:11:11,360 --> 01:11:14,960
the atomic use case is something pushes

01:11:14,400 --> 01:11:17,760
to a

01:11:14,960 --> 01:11:18,880
thing and that thing can present as

01:11:17,760 --> 01:11:21,440
either

01:11:18,880 --> 01:11:22,400
a thing to be scraped like slash metrics

01:11:21,440 --> 01:11:25,280
or whatever

01:11:22,400 --> 01:11:28,560
or it can use prometheus remote right so

01:11:25,280 --> 01:11:28,560
it's a push exporter

01:11:28,880 --> 01:11:32,000
yeah push exporter that's it okay so we

01:11:31,440 --> 01:11:34,800
would

01:11:32,000 --> 01:11:36,400
for example be calling the push gateway

01:11:34,800 --> 01:11:38,800
we would be calling it for example

01:11:36,400 --> 01:11:41,280
openmetrics push exporter we would

01:11:38,800 --> 01:11:42,719
rename or we would suggest to the mqtt

01:11:41,280 --> 01:11:45,760
people that they rename it

01:11:42,719 --> 01:11:47,840
to mqtt push exporter

01:11:45,760 --> 01:11:49,440
no this is a working name you just ask

01:11:47,840 --> 01:11:55,520
that it is

01:11:49,440 --> 01:11:57,280
okay okay working name push exporter

01:11:55,520 --> 01:11:59,120
so we have that one use case down should

01:11:57,280 --> 01:12:01,280
we have a break or not i'm fine either

01:11:59,120 --> 01:12:01,280
way

01:12:01,360 --> 01:12:05,600
produce the curfa consensus first

01:12:06,840 --> 01:12:09,840
for

01:12:10,080 --> 01:12:13,280
as written that's way too complex i

01:12:11,679 --> 01:12:16,640
think we are not near

01:12:13,280 --> 01:12:16,640
that that thing

01:12:17,600 --> 01:12:23,840
i mean we can have an info thing

01:13:02,840 --> 01:13:05,840
oh

01:13:06,320 --> 01:13:11,360
okay as an info push exporter is the

01:13:09,120 --> 01:13:13,760
working title for the atomic concept of

01:13:11,360 --> 01:13:14,400
something that gets open metrics and gtt

01:13:13,760 --> 01:13:18,400
open

01:13:14,400 --> 01:13:22,239
tlp etc pushed at it and presents it as

01:13:18,400 --> 01:13:25,520
slash metrics and or sends through uh

01:13:22,239 --> 01:13:25,520
prometheus remote right

01:13:27,199 --> 01:13:32,880
deliberately not as a consensus but now

01:13:28,960 --> 01:13:36,880
we have a name for that thing

01:13:32,880 --> 01:13:46,480
for aggregation maybe robert has

01:13:36,880 --> 01:13:49,840
has input

01:13:46,480 --> 01:13:52,080
mr frotto he said no in the chat

01:13:49,840 --> 01:13:52,080
oh

01:13:54,159 --> 01:13:59,040
he should hear his good quotes but okay

01:13:56,400 --> 01:14:02,000
he said he said also sorry

01:13:59,040 --> 01:14:02,000
for having good phones

01:14:05,520 --> 01:14:08,159
okay um

01:14:09,040 --> 01:14:17,760
i think we will uh

01:14:12,800 --> 01:14:17,760
i think at least for oh

01:14:19,120 --> 01:14:22,320
i'm half sneezing sorry uh i think we

01:14:21,920 --> 01:14:25,840
will

01:14:22,320 --> 01:14:27,520
uh end up with a concept of aggregation

01:14:25,840 --> 01:14:29,520
because we already have it in the push

01:14:27,520 --> 01:14:32,000
gateway as of today

01:14:29,520 --> 01:14:32,560
we are already able to aggregate

01:14:32,000 --> 01:14:35,040
different

01:14:32,560 --> 01:14:36,239
things different things pushing at the

01:14:35,040 --> 01:14:40,000
push gateway

01:14:36,239 --> 01:14:43,360
and then presenting onwards do we

01:14:40,000 --> 01:14:45,760
no no we don't

01:14:43,360 --> 01:14:46,719
push gateway refuses to be an

01:14:45,760 --> 01:14:49,600
aggregation

01:14:46,719 --> 01:14:50,000
for even aggregator but i was able to

01:14:49,600 --> 01:14:52,880
push

01:14:50,000 --> 01:14:53,679
into different name spaces yeah but it

01:14:52,880 --> 01:14:57,199
doesn't

01:14:53,679 --> 01:14:58,800
it does okay also like

01:14:57,199 --> 01:15:00,719
i mean what's what's written right now

01:14:58,800 --> 01:15:04,080
in the the info

01:15:00,719 --> 01:15:06,239
is kind of good gateway right just that

01:15:04,080 --> 01:15:09,280
push gateway just receives

01:15:06,239 --> 01:15:11,280
old prometheus format for now

01:15:09,280 --> 01:15:12,880
yes but that's intended that that this

01:15:11,280 --> 01:15:14,719
new name also covers the

01:15:12,880 --> 01:15:16,800
at least underlying the use case of the

01:15:14,719 --> 01:15:17,520
push gateway so we so we have something

01:15:16,800 --> 01:15:20,000
which is

01:15:17,520 --> 01:15:20,560
hopefully maybe less confusing tomorrow

01:15:20,000 --> 01:15:23,440
i just

01:15:20,560 --> 01:15:24,000
think that enumerating the different use

01:15:23,440 --> 01:15:27,280
cases

01:15:24,000 --> 01:15:29,120
would actually help clean up the

01:15:27,280 --> 01:15:30,560
confusion because i think a lot of the

01:15:29,120 --> 01:15:34,080
confusion is that we have

01:15:30,560 --> 01:15:37,520
about two to five different use cases

01:15:34,080 --> 01:15:40,719
conflated and

01:15:37,520 --> 01:15:41,440
i'm not saying that there i mean there

01:15:40,719 --> 01:15:43,920
could be

01:15:41,440 --> 01:15:45,120
a binary that caters for all those use

01:15:43,920 --> 01:15:48,480
cases but

01:15:45,120 --> 01:15:51,360
um i think it's still valuable to

01:15:48,480 --> 01:15:52,560
describe them all cleanly separated and

01:15:51,360 --> 01:15:54,480
then

01:15:52,560 --> 01:15:56,400
have an informed decision if the same

01:15:54,480 --> 01:15:57,440
mechanism should cater for all of them

01:15:56,400 --> 01:16:01,120
or if it should be

01:15:57,440 --> 01:16:02,560
different by noise and like even with

01:16:01,120 --> 01:16:05,520
the push gateway you see

01:16:02,560 --> 01:16:07,520
all those problems with it that um there

01:16:05,520 --> 01:16:09,760
are different semantics even for this

01:16:07,520 --> 01:16:12,480
you push a metric and present it by a

01:16:09,760 --> 01:16:12,480
metrics like

01:16:16,159 --> 01:16:19,840
for example do i want it to time out or

01:16:18,320 --> 01:16:21,600
not that's already difficult

01:16:19,840 --> 01:16:23,199
but but just ignoring those problems and

01:16:21,600 --> 01:16:26,560
not actually

01:16:23,199 --> 01:16:29,920
yeah doing anything is also

01:16:26,560 --> 01:16:32,960
hard so that's why we should have like

01:16:29,920 --> 01:16:36,000
focus projects for that

01:16:32,960 --> 01:16:38,800
yeah but i'm just saying it um we should

01:16:36,000 --> 01:16:40,800
actually not expect the problem to

01:16:38,800 --> 01:16:42,239
become simpler by conflating them all

01:16:40,800 --> 01:16:43,840
into the same

01:16:42,239 --> 01:16:46,239
from the beginning i think we should

01:16:43,840 --> 01:16:48,080
actually define clearly

01:16:46,239 --> 01:16:50,159
what the different use cases are and

01:16:48,080 --> 01:16:50,719
then what the ideal solution for each of

01:16:50,159 --> 01:16:53,040
them is

01:16:50,719 --> 01:16:53,840
and then have an informed decision if we

01:16:53,040 --> 01:16:56,800
create like

01:16:53,840 --> 01:16:58,800
two or three different solutions for it

01:16:56,800 --> 01:17:00,960
or one solution that happens to solve

01:16:58,800 --> 01:17:04,560
them all

01:17:00,960 --> 01:17:06,239
yeah yeah i agree um i

01:17:04,560 --> 01:17:08,480
but that points to a design doc because

01:17:06,239 --> 01:17:12,560
i think that explodes the context

01:17:08,480 --> 01:17:12,560
uh the the scope of this call

01:17:12,640 --> 01:17:16,000
i mean we can try and hammer out the

01:17:14,480 --> 01:17:18,400
first few initial use cases

01:17:16,000 --> 01:17:20,159
but i think that's that's firmly in

01:17:18,400 --> 01:17:22,080
design document territory

01:17:20,159 --> 01:17:24,400
yeah totally but like even the consensus

01:17:22,080 --> 01:17:26,560
all this bush exporter is the working

01:17:24,400 --> 01:17:28,560
title of the

01:17:26,560 --> 01:17:30,880
i have no idea of atomic concept but

01:17:28,560 --> 01:17:32,080
something that gets but it doesn't block

01:17:30,880 --> 01:17:34,159
if it's like one thing

01:17:32,080 --> 01:17:35,520
one binary or ten binaries like i don't

01:17:34,159 --> 01:17:37,679
think this is really

01:17:35,520 --> 01:17:39,040
strict naming here i don't know like

01:17:37,679 --> 01:17:41,520
it's it's really

01:17:39,040 --> 01:17:42,560
the really the incentive that we want to

01:17:41,520 --> 01:17:46,000
kind of

01:17:42,560 --> 01:17:50,159
approach it right and to be honest i

01:17:46,000 --> 01:17:52,080
don't want to uh be

01:17:50,159 --> 01:17:54,080
they will advocate but i'm pretty sure

01:17:52,080 --> 01:17:55,840
we need to have a consensus

01:17:54,080 --> 01:17:58,080
why we cannot leave that to open

01:17:55,840 --> 01:17:59,520
telemetry collector

01:17:58,080 --> 01:18:01,920
we should have like an open message

01:17:59,520 --> 01:18:04,000
statement why not because uh

01:18:01,920 --> 01:18:05,840
you know i have like in red hat as well

01:18:04,000 --> 01:18:07,440
these discussions why

01:18:05,840 --> 01:18:12,239
why we cannot just use open telemetry

01:18:07,440 --> 01:18:14,080
collector right

01:18:12,239 --> 01:18:16,239
and the one one statement is that well

01:18:14,080 --> 01:18:17,199
there is no push api which is compatible

01:18:16,239 --> 01:18:20,800
with

01:18:17,199 --> 01:18:24,080
uh with uh promotes instrumentation

01:18:20,800 --> 01:18:25,440
right and i think uh but you know we we

01:18:24,080 --> 01:18:26,000
might want to add that to the open

01:18:25,440 --> 01:18:28,880
telemetry

01:18:26,000 --> 01:18:32,000
collector if that solves sure it will be

01:18:28,880 --> 01:18:35,440
not optimized it will be

01:18:32,000 --> 01:18:37,280
not easy to i don't know use for users

01:18:35,440 --> 01:18:41,840
and so on so i think this is the message

01:18:37,280 --> 01:18:41,840
we want to show but

01:18:41,920 --> 01:18:45,840
let's make it public frederick is not in

01:18:44,960 --> 01:18:48,960
the call anymore

01:18:45,840 --> 01:18:52,080
um we we had similar discussions uh

01:18:48,960 --> 01:18:54,560
some time ago um in particular in the

01:18:52,080 --> 01:18:57,840
context of kubernetes

01:18:54,560 --> 01:18:58,400
where um with cube state metrics and

01:18:57,840 --> 01:19:00,400
such

01:18:58,400 --> 01:19:01,600
they need to have the highest

01:19:00,400 --> 01:19:05,040
performance path

01:19:01,600 --> 01:19:08,000
which they can possibly get and

01:19:05,040 --> 01:19:09,520
the clear intention from from sick

01:19:08,000 --> 01:19:12,800
instrumentation was to

01:19:09,520 --> 01:19:15,840
to not diverge from this

01:19:12,800 --> 01:19:17,520
from this high performance path of

01:19:15,840 --> 01:19:18,960
course they have something which works

01:19:17,520 --> 01:19:22,560
and they don't intend to

01:19:18,960 --> 01:19:24,560
to make it more complex and or slower

01:19:22,560 --> 01:19:28,159
because they have they have a defined

01:19:24,560 --> 01:19:30,719
interface which which they want to have

01:19:28,159 --> 01:19:31,600
along the same lines i do think that

01:19:30,719 --> 01:19:34,640
having

01:19:31,600 --> 01:19:38,239
this highly optimized path which ignores

01:19:34,640 --> 01:19:40,960
all the extensibility on purpose

01:19:38,239 --> 01:19:42,480
is a good thing in and as of itself in

01:19:40,960 --> 01:19:44,640
particular of course it's it's

01:19:42,480 --> 01:19:45,920
largely based on code which which has

01:19:44,640 --> 01:19:49,280
been

01:19:45,920 --> 01:19:51,840
stable and and proven at scale for years

01:19:49,280 --> 01:19:51,840
now

01:19:53,840 --> 01:19:57,600
if slash when open telemetry is as a

01:19:55,760 --> 01:19:58,480
point where they have the full

01:19:57,600 --> 01:20:00,640
performance

01:19:58,480 --> 01:20:02,080
and reliability and resilience and

01:20:00,640 --> 01:20:05,280
everything and and

01:20:02,080 --> 01:20:08,080
can act as a drop in replacement i

01:20:05,280 --> 01:20:09,120
actually think it would make sense to uh

01:20:08,080 --> 01:20:12,560
to talk about just

01:20:09,120 --> 01:20:14,320
dropping what we have and using it

01:20:12,560 --> 01:20:16,560
and using the open telemetry stuff

01:20:14,320 --> 01:20:19,040
instead um

01:20:16,560 --> 01:20:21,360
it's currently not in in a state where

01:20:19,040 --> 01:20:23,600
we could consider doing this

01:20:21,360 --> 01:20:25,120
um but if that is the case sometime in

01:20:23,600 --> 01:20:27,360
the future it's absolutely something

01:20:25,120 --> 01:20:31,120
which which we should be considering

01:20:27,360 --> 01:20:33,920
um but like it seems

01:20:31,120 --> 01:20:35,040
very premature in particular given that

01:20:33,920 --> 01:20:38,159
kubernetes is

01:20:35,040 --> 01:20:39,600
the thing within cncf and the cloud

01:20:38,159 --> 01:20:42,560
native space

01:20:39,600 --> 01:20:44,960
aligning with the intention of how

01:20:42,560 --> 01:20:48,400
kubernetes intends to be used and

01:20:44,960 --> 01:20:52,159
intends to be observed uh

01:20:48,400 --> 01:21:01,840
seems borderline i agree richie i think

01:20:52,159 --> 01:21:01,840
let's let's let's mention that here

01:21:08,880 --> 01:21:12,239
but that's also detached from the thing

01:21:10,400 --> 01:21:15,440
which we were discussing so

01:21:12,239 --> 01:21:19,199
should we find a consensus on

01:21:15,440 --> 01:21:21,920
creating a design document to

01:21:19,199 --> 01:21:21,920
to basically

01:21:22,800 --> 01:21:26,320
rethink slash improve

01:21:26,560 --> 01:21:34,480
push slash serverless slash mqtt slash

01:21:30,800 --> 01:21:34,480
iot use cases

01:21:35,840 --> 01:21:38,960
yes okay

01:21:39,600 --> 01:21:45,120
okay we will the design dock is titled

01:21:43,840 --> 01:21:48,639
everything you always wanted to know

01:21:45,120 --> 01:21:50,400
about pushing but you were afraid to ask

01:21:48,639 --> 01:21:52,080
if you volunteered to write it you can

01:21:50,400 --> 01:21:54,320
name it as such i would not

01:21:52,080 --> 01:21:56,320
volunteer but i just have way too many

01:21:54,320 --> 01:21:59,600
things that i would like to write

01:21:56,320 --> 01:22:01,520
in my limited life we can we can write a

01:21:59,600 --> 01:22:11,840
book and sell it

01:22:01,520 --> 01:22:11,840
this is so large topic yeah

01:22:17,120 --> 01:22:20,800
consensus we will create a design

01:22:18,719 --> 01:22:23,760
document to improve the pushing

01:22:20,800 --> 01:22:26,639
slash serverless mqtt slash iot use

01:22:23,760 --> 01:22:30,560
cases in the prometheus ecosystem

01:22:26,639 --> 01:22:30,560
or to directly address

01:22:36,840 --> 01:22:41,520
okay uh sorry once more consensus we

01:22:40,080 --> 01:22:43,040
will create a design document to

01:22:41,520 --> 01:22:45,679
directly address serverless

01:22:43,040 --> 01:22:47,840
mqtt slash iot use cases in the promises

01:22:45,679 --> 01:22:50,159
ecosystem

01:22:47,840 --> 01:22:51,600
all agreed anyone disagreeing sure i

01:22:50,159 --> 01:22:54,880
agree

01:22:51,600 --> 01:22:54,880
is that an agreement ben

01:22:55,440 --> 01:22:58,639
yes okay

01:23:00,080 --> 01:23:06,880
okay still around the apis uh looks like

01:23:03,280 --> 01:23:10,159
we're leaving this in the

01:23:06,880 --> 01:23:11,440
kind of so far as i said like push

01:23:10,159 --> 01:23:14,239
gateway api

01:23:11,440 --> 01:23:15,679
is really strict to the simply narrow

01:23:14,239 --> 01:23:19,520
use case of usage

01:23:15,679 --> 01:23:21,920
of the push gateway the open metrics api

01:23:19,520 --> 01:23:24,639
openmetric push we leave it as something

01:23:21,920 --> 01:23:27,679
that kind of exists but only in dreams

01:23:24,639 --> 01:23:31,040
and remote write is

01:23:27,679 --> 01:23:32,880
replication only do you want to block

01:23:31,040 --> 01:23:35,120
the push gateway to also accept the

01:23:32,880 --> 01:23:38,880
point matrix if the content type

01:23:35,120 --> 01:23:41,280
of the push metric is open matrix

01:23:38,880 --> 01:23:42,080
no i don't want to questions do we want

01:23:41,280 --> 01:23:44,159
to

01:23:42,080 --> 01:23:45,120
do i would i will not close the door

01:23:44,159 --> 01:23:47,360
because

01:23:45,120 --> 01:23:48,320
open matrix has some advantages like for

01:23:47,360 --> 01:23:51,280
example the

01:23:48,320 --> 01:23:52,639
eof at the end of the of the matrix is

01:23:51,280 --> 01:23:53,920
something that would be useful for the

01:23:52,639 --> 01:23:55,520
push gateway

01:23:53,920 --> 01:23:59,280
so maybe do you want to have a consensus

01:23:55,520 --> 01:24:00,639
to add this to the push gateway api

01:23:59,280 --> 01:24:03,840
and by the way it's not only push

01:24:00,639 --> 01:24:08,320
gateway api it's also a client go link

01:24:03,840 --> 01:24:09,920
right i mean by client golden you mean

01:24:08,320 --> 01:24:12,400
the push

01:24:09,920 --> 01:24:13,600
feature in it i mean that every client

01:24:12,400 --> 01:24:17,040
library has that right

01:24:13,600 --> 01:24:20,560
or more or less most mostly

01:24:17,040 --> 01:24:22,560
which is i mean the if you if

01:24:20,560 --> 01:24:24,320
strictly speaking the if you push to the

01:24:22,560 --> 01:24:25,760
push gateway there's the assumption that

01:24:24,320 --> 01:24:27,360
everything you ever push to the push

01:24:25,760 --> 01:24:30,159
gateway is consistent with

01:24:27,360 --> 01:24:32,000
each other which is something that

01:24:30,159 --> 01:24:34,000
remote write doesn't need

01:24:32,000 --> 01:24:35,920
as a requirement right because the

01:24:34,000 --> 01:24:38,000
remote write just saves it as

01:24:35,920 --> 01:24:40,880
it comes in well the push gateway all

01:24:38,000 --> 01:24:43,600
has to assemble it into a consistent

01:24:40,880 --> 01:24:44,159
slash matrix exposition which would be

01:24:43,600 --> 01:24:47,600
different

01:24:44,159 --> 01:24:49,280
if a push gateway would expose all those

01:24:47,600 --> 01:24:52,000
things separately like being

01:24:49,280 --> 01:24:53,280
multiple push gateways in one so these

01:24:52,000 --> 01:24:54,400
are all things i mean the current

01:24:53,280 --> 01:24:56,320
so-called push carrier

01:24:54,400 --> 01:24:59,120
is just like super tailored to what the

01:24:56,320 --> 01:25:02,480
push gateway is doing

01:24:59,120 --> 01:25:04,000
yeah that's why i think it's

01:25:02,480 --> 01:25:12,400
probably not a good role model for more

01:25:04,000 --> 01:25:13,920
generic use cases

01:25:12,400 --> 01:25:15,520
yeah and i mean i think there it is a

01:25:13,920 --> 01:25:17,360
different use case right

01:25:15,520 --> 01:25:19,679
here is here is the current value of a

01:25:17,360 --> 01:25:22,320
counter please remember it for me

01:25:19,679 --> 01:25:23,760
it's just a different use case then add

01:25:22,320 --> 01:25:27,040
free to whatever

01:25:23,760 --> 01:25:29,040
we had before

01:25:27,040 --> 01:25:31,040
which is different from here is what i

01:25:29,040 --> 01:25:33,760
would expose via slash metrics but i

01:25:31,040 --> 01:25:36,880
can't so please expose it for me

01:25:33,760 --> 01:25:38,239
exactly yeah which is what many people

01:25:36,880 --> 01:25:42,320
use the push gateway for

01:25:38,239 --> 01:25:42,320
and then they run into issues

01:25:45,679 --> 01:25:49,360
oh yeah looks like this requires design

01:25:48,159 --> 01:25:51,120
dock and

01:25:49,360 --> 01:25:52,639
different use cases requires maybe

01:25:51,120 --> 01:25:56,000
different

01:25:52,639 --> 01:26:09,840
semantics api so okay that's a cool

01:25:56,000 --> 01:26:09,840
statement as well

01:26:09,920 --> 01:26:15,280
and just as a note on the like this is

01:26:12,880 --> 01:26:17,679
distributed counters

01:26:15,280 --> 01:26:19,360
um i honestly believe for many

01:26:17,679 --> 01:26:24,159
monitoring use cases people are

01:26:19,360 --> 01:26:26,239
fine with fuzzy distributed contouriness

01:26:24,159 --> 01:26:27,440
um because they've been using like a lot

01:26:26,239 --> 01:26:28,960
of people have been using the stats the

01:26:27,440 --> 01:26:31,600
exporter for a long time and they seem

01:26:28,960 --> 01:26:33,040
to be okay with that

01:26:31,600 --> 01:26:37,840
and yes sometimes things get double

01:26:33,040 --> 01:26:37,840
counted or under counted but

01:26:40,320 --> 01:26:51,840
yeah cool that's all i wanted to say

01:26:58,800 --> 01:27:04,480
break do we have another topic

01:27:02,000 --> 01:27:05,920
we have plenty i was just waiting if if

01:27:04,480 --> 01:27:08,320
people are continuing

01:27:05,920 --> 01:27:09,920
to discuss i wasn't paying attention for

01:27:08,320 --> 01:27:13,199
the last two or three minutes because i

01:27:09,920 --> 01:27:14,639
was cleaning up the i mean we have 27

01:27:13,199 --> 01:27:16,880
minutes left for the

01:27:14,639 --> 01:27:18,000
rush rush that's the wrong word first

01:27:16,880 --> 01:27:20,400
you just do it without

01:27:18,000 --> 01:27:22,080
a break because if we now take a eight

01:27:20,400 --> 01:27:23,280
minute break we have only 20 minutes

01:27:22,080 --> 01:27:27,199
left

01:27:23,280 --> 01:27:33,440
yes depends on you

01:27:27,199 --> 01:27:36,960
all we can go on for me

01:27:33,440 --> 01:27:40,239
i think i had something with five votes

01:27:36,960 --> 01:27:40,239
but i can't find it

01:27:42,239 --> 01:27:48,800
no that's

01:27:47,199 --> 01:27:50,960
i'm looking for something which can be

01:27:48,800 --> 01:27:54,400
quick uh package directory

01:27:50,960 --> 01:27:56,159
uh might be quick the other thing which

01:27:54,400 --> 01:27:58,159
might also be super quick is to

01:27:56,159 --> 01:27:59,600
move remote right out of the

01:27:58,159 --> 01:28:03,280
experimental area

01:27:59,600 --> 01:28:06,400
as we already have pretty much done and

01:28:03,280 --> 01:28:09,120
dried let's let's just try this for

01:28:06,400 --> 01:28:09,120
something quick

01:28:10,159 --> 01:28:15,840
julian you have the floor

01:28:17,440 --> 01:28:20,719
or maybe i just summarize the proposal

01:28:20,320 --> 01:28:24,719
by

01:28:20,719 --> 01:28:27,360
by julian was to to move prometheus

01:28:24,719 --> 01:28:31,600
remote right out of experimental

01:28:27,360 --> 01:28:33,520
and i think as we already have um

01:28:31,600 --> 01:28:34,719
the spec written we can just have

01:28:33,520 --> 01:28:36,560
consensus that

01:28:34,719 --> 01:28:40,239
i mean maybe we can also just move it to

01:28:36,560 --> 01:28:40,239
stale to be honest it's probably

01:28:41,360 --> 01:28:45,280
i'm super not familiar with remote right

01:28:44,320 --> 01:28:48,400
does it have

01:28:45,280 --> 01:28:50,480
any kind of versioning so that we like

01:28:48,400 --> 01:28:52,480
can do a v2 or is this something like

01:28:50,480 --> 01:28:57,120
that's i think one thing

01:28:52,480 --> 01:28:59,679
that we should leave open is how do we

01:28:57,120 --> 01:29:00,560
radically change it in the future there

01:28:59,679 --> 01:29:04,080
is a

01:29:00,560 --> 01:29:06,880
a specification um and that is

01:29:04,080 --> 01:29:08,800
i i think it hasn't seen the final stamp

01:29:06,880 --> 01:29:10,239
of approval but once that's the case it

01:29:08,800 --> 01:29:13,520
will be 1.0

01:29:10,239 --> 01:29:15,360
and then it has its versioning so it's a

01:29:13,520 --> 01:29:17,120
little bit cyclic but

01:29:15,360 --> 01:29:20,400
whatever whatever it's in the version

01:29:17,120 --> 01:29:22,480
header like we send a version header

01:29:20,400 --> 01:29:24,719
on every request that says i think it's

01:29:22,480 --> 01:29:25,280
like zero zero one or zero one zero

01:29:24,719 --> 01:29:29,280
right now

01:29:25,280 --> 01:29:31,600
whatever it is we we can change that

01:29:29,280 --> 01:29:31,600
awesome

01:29:33,440 --> 01:29:39,040
the question is like how will the

01:29:36,560 --> 01:29:41,520
coming feature effect dislike the

01:29:39,040 --> 01:29:44,159
transactions that kind of things

01:29:41,520 --> 01:29:46,639
are still is still being worked on by

01:29:44,159 --> 01:29:48,239
archicad so i'm wondering like

01:29:46,639 --> 01:29:50,480
if that could still have an impact

01:29:48,239 --> 01:29:52,400
before we go 1.0

01:29:50,480 --> 01:29:53,520
and if that should be part of one on

01:29:52,400 --> 01:29:56,639
zero that that

01:29:53,520 --> 01:29:59,840
that stuff is transactional

01:29:56,639 --> 01:30:00,239
i think that we have had this for so

01:29:59,840 --> 01:30:02,719
long

01:30:00,239 --> 01:30:03,840
that we cannot make substantial changes

01:30:02,719 --> 01:30:05,920
to it

01:30:03,840 --> 01:30:08,880
without bumping the version number as

01:30:05,920 --> 01:30:11,280
such i consider it stable already

01:30:08,880 --> 01:30:13,120
and it's just a case of documenting what

01:30:11,280 --> 01:30:16,000
we do

01:30:13,120 --> 01:30:16,560
yeah i agree with richie here like

01:30:16,000 --> 01:30:18,719
whatever

01:30:16,560 --> 01:30:21,360
work harcushing and i think he was he

01:30:18,719 --> 01:30:22,960
was on this call is he still here

01:30:21,360 --> 01:30:24,719
is very late for him so i guess he

01:30:22,960 --> 01:30:25,360
dropped he might he might have dropped

01:30:24,719 --> 01:30:27,199
um

01:30:25,360 --> 01:30:28,880
yeah like the work he does will have to

01:30:27,199 --> 01:30:31,520
be in the framework of

01:30:28,880 --> 01:30:32,960
it will not break current consumers of

01:30:31,520 --> 01:30:36,320
remote right so i

01:30:32,960 --> 01:30:39,120
i consider it stable as is

01:30:36,320 --> 01:30:40,239
so let's do the quick thing consensus we

01:30:39,120 --> 01:30:42,239
will

01:30:40,239 --> 01:30:43,440
i mean that's the implicit consensus

01:30:42,239 --> 01:30:47,040
already anyway but

01:30:43,440 --> 01:30:48,080
um but we should make it explicit like i

01:30:47,040 --> 01:30:51,040
mean i agree that we

01:30:48,080 --> 01:30:53,040
can't like it's we can't realistically

01:30:51,040 --> 01:30:54,239
change it anymore so we may as well make

01:30:53,040 --> 01:30:57,280
it official

01:30:54,239 --> 01:30:58,719
yeah and we can change it by

01:30:57,280 --> 01:31:01,679
incrementing the version number

01:30:58,719 --> 01:31:02,639
and dealing with all of that when we

01:31:01,679 --> 01:31:04,800
need to

01:31:02,639 --> 01:31:06,480
which we would already have to do now

01:31:04,800 --> 01:31:07,760
because we would be breaking the world

01:31:06,480 --> 01:31:10,239
if we were to change it

01:31:07,760 --> 01:31:12,880
without changing the version number

01:31:10,239 --> 01:31:12,880
there's actually

01:31:14,880 --> 01:31:18,560
there's actually one sub-topic um should

01:31:17,199 --> 01:31:21,600
we officially

01:31:18,560 --> 01:31:22,960
bless the name prw instead of prometheus

01:31:21,600 --> 01:31:26,159
remote right

01:31:22,960 --> 01:31:28,560
because it's a super long name

01:31:26,159 --> 01:31:30,639
but we don't use it it's something which

01:31:28,560 --> 01:31:32,239
open telemetry came up and

01:31:30,639 --> 01:31:35,520
up with and it's a lot easier to write

01:31:32,239 --> 01:31:35,520
than prometheus remote right

01:31:35,679 --> 01:31:39,120
i would suggest we just adopt that

01:31:37,679 --> 01:31:45,840
similar how we write

01:31:39,120 --> 01:31:45,840
om and just use it as open metrics

01:31:50,080 --> 01:31:53,280
lots of thinking faces okay so let's

01:31:52,239 --> 01:31:55,040
just move on

01:31:53,280 --> 01:31:58,320
consensus we will release what we do

01:31:55,040 --> 01:32:01,679
today as 1.0 and build on top on top of

01:31:58,320 --> 01:32:03,840
it once 1.000 is stable

01:32:01,679 --> 01:32:03,840
good

01:32:05,440 --> 01:32:08,719
what's the implication of once 1.0 is

01:32:07,600 --> 01:32:11,760
stable

01:32:08,719 --> 01:32:13,920
like what what does i

01:32:11,760 --> 01:32:15,600
things which are not in today can then

01:32:13,920 --> 01:32:18,239
be added

01:32:15,600 --> 01:32:19,120
or changed because we have a version

01:32:18,239 --> 01:32:22,560
which

01:32:19,120 --> 01:32:25,120
users which rely on the current behavior

01:32:22,560 --> 01:32:26,880
can rely on not going away of course it

01:32:25,120 --> 01:32:30,880
is a standard and at least

01:32:26,880 --> 01:32:32,960
for for prometheus 2.x we will obviously

01:32:30,880 --> 01:32:36,320
commit to to retaining it and not

01:32:32,960 --> 01:32:39,120
breaking it because it is stable

01:32:36,320 --> 01:32:39,600
i have one concern i think that some

01:32:39,120 --> 01:32:41,760
people

01:32:39,600 --> 01:32:44,639
are currently and i think it's levi

01:32:41,760 --> 01:32:47,520
working on reconciliating the exemplars

01:32:44,639 --> 01:32:49,840
and the remote right into one protobuf

01:32:47,520 --> 01:32:52,080
i wonder how that will affect if we say

01:32:49,840 --> 01:32:53,840
it's stable now or it will affect that

01:32:52,080 --> 01:32:54,960
so do we also mark the examples in

01:32:53,840 --> 01:32:58,159
remote right

01:32:54,960 --> 01:33:00,880
stable that is

01:32:58,159 --> 01:33:01,320
well metadata is specifically called out

01:33:00,880 --> 01:33:04,639
as

01:33:01,320 --> 01:33:06,560
experimental within

01:33:04,639 --> 01:33:08,639
like at another level than our remote

01:33:06,560 --> 01:33:12,719
right guarantee being

01:33:08,639 --> 01:33:14,880
being stable so like this would be

01:33:12,719 --> 01:33:16,080
yes it is doubly experimental so this

01:33:14,880 --> 01:33:19,120
would be overall

01:33:16,080 --> 01:33:20,800
stable but i think like metadata and

01:33:19,120 --> 01:33:21,520
when exemplars are in there things like

01:33:20,800 --> 01:33:23,760
that

01:33:21,520 --> 01:33:25,840
those are still explicitly said to be

01:33:23,760 --> 01:33:28,400
experimental

01:33:25,840 --> 01:33:31,199
because i think the remote specification

01:33:28,400 --> 01:33:33,040
was written before we had exemplar so we

01:33:31,199 --> 01:33:35,040
might

01:33:33,040 --> 01:33:36,719
oh no so it's already there but we

01:33:35,040 --> 01:33:37,440
should just check that we don't call

01:33:36,719 --> 01:33:39,520
that

01:33:37,440 --> 01:33:41,679
very stable if you plan to still move

01:33:39,520 --> 01:33:44,560
around

01:33:41,679 --> 01:33:46,719
yeah yeah when we review the changes for

01:33:44,560 --> 01:33:50,239
this let's make sure that

01:33:46,719 --> 01:33:53,520
that metadata and exemplars are

01:33:50,239 --> 01:33:53,520
specifically excluded

01:33:56,480 --> 01:34:00,400
should we add this to the consensus or

01:33:58,159 --> 01:34:05,840
just to the meeting notes

01:34:00,400 --> 01:34:07,600
just meeting notes is fine by me yes

01:34:05,840 --> 01:34:11,120
i hear chris is volunteering for writing

01:34:07,600 --> 01:34:11,120
this while i search for the next topic

01:34:13,280 --> 01:34:17,280
burn scalar static arithmetic for

01:34:15,440 --> 01:34:20,320
timestamps and durations or is this too

01:34:17,280 --> 01:34:20,320
long it's probably too long

01:34:22,560 --> 01:34:26,960
thinking which one was that i'm still

01:34:26,239 --> 01:34:28,560
looking uh

01:34:26,960 --> 01:34:30,719
taylor's static arithmetic for

01:34:28,560 --> 01:34:32,159
timestamps and durations i think that's

01:34:30,719 --> 01:34:34,000
too long

01:34:32,159 --> 01:34:35,360
yeah i mean that is exactly what we

01:34:34,000 --> 01:34:38,239
already alluded to

01:34:35,360 --> 01:34:39,840
in the that's kind of step two off i

01:34:38,239 --> 01:34:40,400
tried to break this into separate things

01:34:39,840 --> 01:34:42,880
right

01:34:40,400 --> 01:34:44,639
the question it it has four votes should

01:34:42,880 --> 01:34:45,280
i bump this or should i choose something

01:34:44,639 --> 01:34:48,960
else

01:34:45,280 --> 01:34:48,960
do something else okay

01:34:49,280 --> 01:34:52,400
this is mark green

01:34:56,560 --> 01:35:01,840
what about discussing proposal process

01:35:03,199 --> 01:35:05,520
yes

01:35:11,760 --> 01:35:16,320
that's not ah there it has two votes i

01:35:15,440 --> 01:35:19,600
mean we

01:35:16,320 --> 01:35:22,800
i don't object i don't care

01:35:19,600 --> 01:35:24,639
it should be quick okay and you're sorry

01:35:22,800 --> 01:35:26,840
we need a proposal process to discuss

01:35:24,639 --> 01:35:28,239
your proposal to install a proposal

01:35:26,840 --> 01:35:31,119
forces

01:35:28,239 --> 01:35:31,119
yes i agree

01:35:31,679 --> 01:35:39,119
uh julian can you add this to your uh

01:35:34,800 --> 01:35:41,119
table no just kidding yeah i mean

01:35:39,119 --> 01:35:42,560
sorry for like doubling this i i

01:35:41,119 --> 01:35:46,000
probably was not aware

01:35:42,560 --> 01:35:51,119
of like previous conversation we had so

01:35:46,000 --> 01:35:53,280
um so the kind of the reason why i i

01:35:51,119 --> 01:35:54,239
added this topic again is the because we

01:35:53,280 --> 01:35:57,280
were as a team

01:35:54,239 --> 01:35:58,239
um trying to streamline the different

01:35:57,280 --> 01:36:02,080
processes

01:35:58,239 --> 01:36:04,639
we even created like open handbook

01:36:02,080 --> 01:36:06,000
similar to gitlab what gitlab was used

01:36:04,639 --> 01:36:07,840
used to having so

01:36:06,000 --> 01:36:09,520
we have like even a small website we'll

01:36:07,840 --> 01:36:11,679
be adding more to kind of team processes

01:36:09,520 --> 01:36:14,400
which are very open

01:36:11,679 --> 01:36:15,119
from red hat monitoring kind of teams

01:36:14,400 --> 01:36:16,880
anyway

01:36:15,119 --> 01:36:18,239
this part of this is like a proposal

01:36:16,880 --> 01:36:20,000
process which you can

01:36:18,239 --> 01:36:21,679
see in the mini and like it's really

01:36:20,000 --> 01:36:23,679
following the same proposal process as

01:36:21,679 --> 01:36:26,480
communities have as tunnels have

01:36:23,679 --> 01:36:27,520
and the the principles of that is that

01:36:26,480 --> 01:36:30,560
you really write

01:36:27,520 --> 01:36:34,080
everything as a code even proposal

01:36:30,560 --> 01:36:35,920
ideas and so you add a mark on file

01:36:34,080 --> 01:36:37,280
which has a consistent template that

01:36:35,920 --> 01:36:39,040
everyone expects

01:36:37,280 --> 01:36:40,800
so even if someone is new to even

01:36:39,040 --> 01:36:43,760
proposal writing they know what

01:36:40,800 --> 01:36:45,440
fields to add we do the pull requests we

01:36:43,760 --> 01:36:46,000
know which things are in progress

01:36:45,440 --> 01:36:48,400
because

01:36:46,000 --> 01:36:50,400
prerequisites was not merged either as a

01:36:48,400 --> 01:36:52,880
rejected or approved

01:36:50,400 --> 01:36:54,480
the reason why we merge rejected things

01:36:52,880 --> 01:36:56,719
instead of just rejecting pr

01:36:54,480 --> 01:36:59,199
is because it's so easy then to follow

01:36:56,719 --> 01:37:00,560
up why such a decision was the rejected

01:36:59,199 --> 01:37:03,040
for the time being

01:37:00,560 --> 01:37:04,159
and then it's easy to maybe modify it

01:37:03,040 --> 01:37:06,480
and accept if

01:37:04,159 --> 01:37:07,520
new idea came or new information came to

01:37:06,480 --> 01:37:09,600
that right

01:37:07,520 --> 01:37:11,440
and why it's important especially

01:37:09,600 --> 01:37:14,320
prometheus is that i believe

01:37:11,440 --> 01:37:14,639
all those google docs lying around they

01:37:14,320 --> 01:37:16,480
are

01:37:14,639 --> 01:37:17,679
super hard to discover and i think the

01:37:16,480 --> 01:37:19,840
initiative that you

01:37:17,679 --> 01:37:22,320
you pointed out with this documentation

01:37:19,840 --> 01:37:25,280
page julian is is very good

01:37:22,320 --> 01:37:25,920
but who will maintain that like things

01:37:25,280 --> 01:37:29,760
in google

01:37:25,920 --> 01:37:32,080
change changes they change links they

01:37:29,760 --> 01:37:34,560
and it's so easy to modify this google

01:37:32,080 --> 01:37:36,719
docs so it's never finished right

01:37:34,560 --> 01:37:37,920
you you can always add stuff someone can

01:37:36,719 --> 01:37:40,560
suggest stuff

01:37:37,920 --> 01:37:41,600
it's not versioned in in such straight

01:37:40,560 --> 01:37:43,520
way as pr

01:37:41,600 --> 01:37:46,639
so that's why i would propose to stick

01:37:43,520 --> 01:37:48,400
to markdown file maybe in the docs

01:37:46,639 --> 01:37:49,920
project because i think vr has a good

01:37:48,400 --> 01:37:52,159
point that um

01:37:49,920 --> 01:37:54,159
it is not strictly to the one prompt use

01:37:52,159 --> 01:37:55,360
repository um it should be maybe

01:37:54,159 --> 01:37:57,280
formulated in a

01:37:55,360 --> 01:37:59,520
in a website so what do you think about

01:37:57,280 --> 01:37:59,520
that

01:38:00,560 --> 01:38:07,520
what is the threshold for

01:38:03,600 --> 01:38:07,520
like requiring a proposal

01:38:09,199 --> 01:38:13,600
uh so requiring proposal that's a good

01:38:12,000 --> 01:38:16,320
question so

01:38:13,600 --> 01:38:17,040
uh let's define that i even in this kind

01:38:16,320 --> 01:38:19,920
of small

01:38:17,040 --> 01:38:21,119
request there is some flow chart that

01:38:19,920 --> 01:38:23,760
talks about this stuff and

01:38:21,119 --> 01:38:25,440
i think even information so what i

01:38:23,760 --> 01:38:27,360
gathered what we gathered with with

01:38:25,440 --> 01:38:28,719
previous like thanos proposal and and

01:38:27,360 --> 01:38:32,080
team proposal

01:38:28,719 --> 01:38:34,000
is this kind of idea of asking yourself

01:38:32,080 --> 01:38:36,639
few questions

01:38:34,000 --> 01:38:38,320
literally is the idea hard to explain in

01:38:36,639 --> 01:38:40,719
10 minutes

01:38:38,320 --> 01:38:42,320
are there many major unknowns would the

01:38:40,719 --> 01:38:43,679
project benefit from documenting the

01:38:42,320 --> 01:38:45,920
rationales

01:38:43,679 --> 01:38:48,080
and does it touch key elements like api

01:38:45,920 --> 01:38:49,040
those for me was but we can negotiate

01:38:48,080 --> 01:38:50,880
what

01:38:49,040 --> 01:38:52,960
you know if those are okay crypto

01:38:50,880 --> 01:38:56,239
criteria or not

01:38:52,960 --> 01:38:57,280
um i have one concern that i would not

01:38:56,239 --> 01:38:59,600
want that to be

01:38:57,280 --> 01:39:01,119
on the documentation website i have the

01:38:59,600 --> 01:39:03,440
case of kafka when

01:39:01,119 --> 01:39:04,719
i look for some information about kafka

01:39:03,440 --> 01:39:06,800
and then i stumble

01:39:04,719 --> 01:39:08,239
upon a proposal directly and i think

01:39:06,800 --> 01:39:10,400
there's a documentation but

01:39:08,239 --> 01:39:12,000
maybe the proposal is rejected it does

01:39:10,400 --> 01:39:14,000
not match the reality so

01:39:12,000 --> 01:39:15,520
this should i think not really belong in

01:39:14,000 --> 01:39:17,440
the documentation

01:39:15,520 --> 01:39:19,520
because it might confuse users if the

01:39:17,440 --> 01:39:21,119
proposal is not yet implemented or if

01:39:19,520 --> 01:39:22,639
it's implemented differently so

01:39:21,119 --> 01:39:24,719
we could even have a dedicated

01:39:22,639 --> 01:39:25,199
repository with just markdown files for

01:39:24,719 --> 01:39:26,560
this

01:39:25,199 --> 01:39:28,239
but i would not mix that with the

01:39:26,560 --> 01:39:30,239
documentation that

01:39:28,239 --> 01:39:32,639
that was my point i think bjorn you had

01:39:30,239 --> 01:39:34,800
different opinion

01:39:32,639 --> 01:39:37,040
the the point of vienna was that it is

01:39:34,800 --> 01:39:38,840
not the primitive server specific thing

01:39:37,040 --> 01:39:40,639
so it should not be in the promoted

01:39:38,840 --> 01:39:42,639
server

01:39:40,639 --> 01:39:44,320
yeah i personally i don't feel strongly

01:39:42,639 --> 01:39:47,040
about markdown versus

01:39:44,320 --> 01:39:47,040
google docs

01:39:47,760 --> 01:39:51,920
often google doc seemed like great

01:39:49,679 --> 01:39:53,520
better for collaboratively editing

01:39:51,920 --> 01:39:54,000
something but in the end once the

01:39:53,520 --> 01:39:56,320
discussion

01:39:54,000 --> 01:39:59,199
gets more complex you have those endless

01:39:56,320 --> 01:40:00,639
threads on the margin of the page

01:39:59,199 --> 01:40:02,480
which i don't know perhaps it would be

01:40:00,639 --> 01:40:05,760
better than a pull request

01:40:02,480 --> 01:40:08,080
so i i am i proposed markdown

01:40:05,760 --> 01:40:09,840
proposals for loki at some point and we

01:40:08,080 --> 01:40:12,239
tried it for a bit

01:40:09,840 --> 01:40:13,840
but we found that discussions on github

01:40:12,239 --> 01:40:14,639
especially for proposals what's much

01:40:13,840 --> 01:40:18,080
harder to have

01:40:14,639 --> 01:40:20,320
than on google docs um i think i agree

01:40:18,080 --> 01:40:20,960
like the discoverability is hard but i

01:40:20,320 --> 01:40:22,480
think

01:40:20,960 --> 01:40:26,000
that could be served by some kind of

01:40:22,480 --> 01:40:26,000
index in markdown instead

01:40:26,320 --> 01:40:31,360
who will maintain this index

01:40:29,600 --> 01:40:33,360
i mean we started maintaining it and

01:40:31,360 --> 01:40:36,000
julian bjorn and myself

01:40:33,360 --> 01:40:38,080
have have created i mean they have

01:40:36,000 --> 01:40:41,040
created it i have merged it but um

01:40:38,080 --> 01:40:41,920
like i i do think that we all agree that

01:40:41,040 --> 01:40:45,199
there is

01:40:41,920 --> 01:40:47,440
is an issue with discoverability i agree

01:40:45,199 --> 01:40:50,880
with what robert said 100

01:40:47,440 --> 01:40:53,040
and and wanted to say the same in like

01:40:50,880 --> 01:40:55,840
in several different contexts i have

01:40:53,040 --> 01:40:59,119
tried several different ways of tracking

01:40:55,840 --> 01:41:00,080
information and discussion and the thing

01:40:59,119 --> 01:41:03,760
which is least

01:41:00,080 --> 01:41:06,800
bad in my experience is google docs

01:41:03,760 --> 01:41:10,159
for better oververse

01:41:06,800 --> 01:41:11,119
once documents get a certain state of

01:41:10,159 --> 01:41:12,880
stableness

01:41:11,119 --> 01:41:14,800
i do think it would make sense for

01:41:12,880 --> 01:41:17,199
example to copy it over and

01:41:14,800 --> 01:41:19,520
deprecate commenting on the thing make

01:41:17,199 --> 01:41:22,320
it read only

01:41:19,520 --> 01:41:23,199
to to actively prevent any changes to

01:41:22,320 --> 01:41:26,480
the thing

01:41:23,199 --> 01:41:28,080
still happening and and put put a marker

01:41:26,480 --> 01:41:29,920
at the top and say hey

01:41:28,080 --> 01:41:31,920
uh please look into this markdown file

01:41:29,920 --> 01:41:33,520
and such i that's something which i

01:41:31,920 --> 01:41:36,159
think is good and for example for

01:41:33,520 --> 01:41:38,800
openmetrics and permit is remote right

01:41:36,159 --> 01:41:39,360
and such once the thing is stable it it

01:41:38,800 --> 01:41:42,960
becomes

01:41:39,360 --> 01:41:45,520
marked down anyway because that is um

01:41:42,960 --> 01:41:47,440
that is a lot easier to to retain long

01:41:45,520 --> 01:41:49,199
term

01:41:47,440 --> 01:41:51,760
that's one of the aspects the other

01:41:49,199 --> 01:41:56,080
aspect is

01:41:51,760 --> 01:42:00,000
processes are super quick to introduce

01:41:56,080 --> 01:42:03,199
and processes are in the moment often

01:42:00,000 --> 01:42:05,679
feel good to introduce

01:42:03,199 --> 01:42:06,480
but the inherent risk of processes is

01:42:05,679 --> 01:42:09,199
you almost

01:42:06,480 --> 01:42:11,119
never undo or change processes unless

01:42:09,199 --> 01:42:12,960
you have substantial momentum and

01:42:11,119 --> 01:42:16,400
substantial pain

01:42:12,960 --> 01:42:19,440
you lose significant agility

01:42:16,400 --> 01:42:22,719
if you have a fixed process

01:42:19,440 --> 01:42:23,760
and i would argue that we follow large

01:42:22,719 --> 01:42:25,920
parts of

01:42:23,760 --> 01:42:27,119
of what is written in in what i read in

01:42:25,920 --> 01:42:29,840
those few minutes

01:42:27,119 --> 01:42:31,360
already and if we have details on how to

01:42:29,840 --> 01:42:34,000
improve it and i mean

01:42:31,360 --> 01:42:35,840
this call is is is proof that we have

01:42:34,000 --> 01:42:39,119
improved lots of things

01:42:35,840 --> 01:42:42,320
uh and like with the index for for

01:42:39,119 --> 01:42:44,239
design documents and such

01:42:42,320 --> 01:42:46,560
but having something which is mandated

01:42:44,239 --> 01:42:47,280
in particular if if i have more than one

01:42:46,560 --> 01:42:50,000
and a

01:42:47,280 --> 01:42:51,040
more than one single a4 page of printed

01:42:50,000 --> 01:42:54,560
out paper

01:42:51,040 --> 01:42:56,320
for the process to even make a proposal

01:42:54,560 --> 01:42:58,080
if i want to propose something to

01:42:56,320 --> 01:43:00,960
prometheus team and i see that thing i'm

01:42:58,080 --> 01:43:03,119
closing the tab and doing something else

01:43:00,960 --> 01:43:05,440
because it's way too complicated and the

01:43:03,119 --> 01:43:08,239
the threshold and barrier to entry is

01:43:05,440 --> 01:43:10,239
way too high for me to follow all of

01:43:08,239 --> 01:43:12,560
that stuff

01:43:10,239 --> 01:43:15,920
or people don't follow it and we we have

01:43:12,560 --> 01:43:15,920
a process in name only

01:43:16,080 --> 01:43:19,520
based on experience i would strongly

01:43:18,639 --> 01:43:22,159
recommend

01:43:19,520 --> 01:43:22,800
against adopting a process just so

01:43:22,159 --> 01:43:26,080
without

01:43:22,800 --> 01:43:28,880
massive consideration and trial period

01:43:26,080 --> 01:43:30,320
because we will in my experience not be

01:43:28,880 --> 01:43:34,080
undoing this process

01:43:30,320 --> 01:43:37,520
if we accept it we will not be

01:43:34,080 --> 01:43:38,480
done that also matches my experience

01:43:37,520 --> 01:43:41,920
with the

01:43:38,480 --> 01:43:44,239
kubernetes process

01:43:41,920 --> 01:43:46,239
basically once that was mandated we

01:43:44,239 --> 01:43:49,360
stopped contributing to kubernetes

01:43:46,239 --> 01:43:51,679
because we don't have the time

01:43:49,360 --> 01:43:53,280
to go through that and the worst thing

01:43:51,679 --> 01:43:56,480
in that was

01:43:53,280 --> 01:43:58,880
we had a like reasonable pr

01:43:56,480 --> 01:44:00,320
open where core kubernetes people had

01:43:58,880 --> 01:44:02,320
already said yeah this is reasonable we

01:44:00,320 --> 01:44:06,080
just need to get it into shape

01:44:02,320 --> 01:44:08,639
it was stuck in an endless review rebase

01:44:06,080 --> 01:44:10,400
review rebase loop and then it was like

01:44:08,639 --> 01:44:12,960
oh no we need a cap for this now

01:44:10,400 --> 01:44:14,239
because process and at that point we

01:44:12,960 --> 01:44:16,639
just closed the pr

01:44:14,239 --> 01:44:17,760
because that's never like as not

01:44:16,639 --> 01:44:19,679
full-time

01:44:17,760 --> 01:44:20,880
kubernetes people working on kubernetes

01:44:19,679 --> 01:44:23,360
full time

01:44:20,880 --> 01:44:25,280
we can't and i would like to avoid that

01:44:23,360 --> 01:44:28,320
for prometheus and i don't think

01:44:25,280 --> 01:44:31,760
prometheus as a project is

01:44:28,320 --> 01:44:35,280
big enough to make that necessary so i

01:44:31,760 --> 01:44:36,320
i'm totally on board with streamlining

01:44:35,280 --> 01:44:39,600
or or

01:44:36,320 --> 01:44:41,520
better organizing the design documents

01:44:39,600 --> 01:44:44,719
that we do

01:44:41,520 --> 01:44:47,360
where we do them now but i would

01:44:44,719 --> 01:44:48,880
one i would like to grant like where we

01:44:47,360 --> 01:44:51,440
already have

01:44:48,880 --> 01:44:52,000
something on the way i would like to not

01:44:51,440 --> 01:44:54,800
go back

01:44:52,000 --> 01:44:55,760
and require a design document after the

01:44:54,800 --> 01:44:58,560
fact

01:44:55,760 --> 01:45:00,000
and i would like to keep it as optional

01:44:58,560 --> 01:45:02,400
as possible

01:45:00,000 --> 01:45:03,199
right so maybe just a few points like i

01:45:02,400 --> 01:45:06,239
strongly

01:45:03,199 --> 01:45:07,840
i'm i'm strong opinion to make sure

01:45:06,239 --> 01:45:10,880
there is a markdown

01:45:07,840 --> 01:45:12,480
uh process at the end of the discussion

01:45:10,880 --> 01:45:13,360
i'm i would be happy to propose for

01:45:12,480 --> 01:45:16,000
example

01:45:13,360 --> 01:45:17,520
hey you can use whatever documentation

01:45:16,000 --> 01:45:19,360
process you want but if you want

01:45:17,520 --> 01:45:20,480
something get approved and have final

01:45:19,360 --> 01:45:22,239
consensus

01:45:20,480 --> 01:45:24,159
well it has to be on the markdown and

01:45:22,239 --> 01:45:25,679
has to be proposed to this pr to

01:45:24,159 --> 01:45:27,840
displace with this pr

01:45:25,679 --> 01:45:28,719
for documentation and tracking

01:45:27,840 --> 01:45:31,360
capabilities

01:45:28,719 --> 01:45:32,960
and i'm i have strong opinion because it

01:45:31,360 --> 01:45:36,239
worked for thomas so well

01:45:32,960 --> 01:45:39,280
it it just like saw so many good uh

01:45:36,239 --> 01:45:40,960
com you know um

01:45:39,280 --> 01:45:42,800
feedback that you know people could

01:45:40,960 --> 01:45:44,400
actually follow past decision could

01:45:42,800 --> 01:45:47,199
implement something which was

01:45:44,400 --> 01:45:49,040
nicely available in in tunnel's website

01:45:47,199 --> 01:45:52,239
we hold those internals website

01:45:49,040 --> 01:45:54,960
it was enormous help right and i think

01:45:52,239 --> 01:45:57,520
it's very orthogonal to the criteria

01:45:54,960 --> 01:45:58,080
of when we expect the this proposal to

01:45:57,520 --> 01:46:00,639
be done

01:45:58,080 --> 01:46:01,440
and hey you created already the pr like

01:46:00,639 --> 01:46:04,239
already team

01:46:01,440 --> 01:46:06,159
understand that there it should be no uh

01:46:04,239 --> 01:46:07,920
no point in creating the the special

01:46:06,159 --> 01:46:09,440
proposal and i think that we could make

01:46:07,920 --> 01:46:12,239
this autonomous thing but

01:46:09,440 --> 01:46:13,360
maybe we can have consensus to at least

01:46:12,239 --> 01:46:17,119
snapshot

01:46:13,360 --> 01:46:19,760
the and have the consensus on the

01:46:17,119 --> 01:46:20,480
on the proposal by merging this pr in

01:46:19,760 --> 01:46:23,119
the markdown

01:46:20,480 --> 01:46:23,119
style right

01:46:23,760 --> 01:46:30,960
that atomic part makes

01:46:26,800 --> 01:46:33,360
sense but what is for example

01:46:30,960 --> 01:46:35,600
if like it makes sense in the general

01:46:33,360 --> 01:46:36,960
case but if you mandate this as a

01:46:35,600 --> 01:46:39,040
process

01:46:36,960 --> 01:46:41,040
what happens if you have an exploratory

01:46:39,040 --> 01:46:44,400
design dock where you deliberately

01:46:41,040 --> 01:46:45,920
implement two different approaches or or

01:46:44,400 --> 01:46:48,880
you have that one thing

01:46:45,920 --> 01:46:50,639
which you're playing around with you're

01:46:48,880 --> 01:46:52,560
losing that feedback loop because

01:46:50,639 --> 01:46:55,600
you you need all of a sudden you need to

01:46:52,560 --> 01:46:58,159
either specify all those things

01:46:55,600 --> 01:46:59,760
or you'd leave it super hand wavy and

01:46:58,159 --> 01:47:01,840
and undefined

01:46:59,760 --> 01:47:03,520
uh because else you're self constricting

01:47:01,840 --> 01:47:05,760
too much that's something which arguably

01:47:03,520 --> 01:47:07,600
we had in in past dev summits that we

01:47:05,760 --> 01:47:11,440
that we had consensus

01:47:07,600 --> 01:47:13,119
which are too restrictive and

01:47:11,440 --> 01:47:14,639
we had to actually follow the complete

01:47:13,119 --> 01:47:15,280
process we had to wait for our next dev

01:47:14,639 --> 01:47:16,960
summit

01:47:15,280 --> 01:47:18,400
we had to discuss it we had to have a

01:47:16,960 --> 01:47:20,320
new call for consensus

01:47:18,400 --> 01:47:22,719
to change the thing where we already had

01:47:20,320 --> 01:47:24,480
more or less informal consensus

01:47:22,719 --> 01:47:26,800
at least that's that's what it often

01:47:24,480 --> 01:47:27,840
felt like but we had to go through the

01:47:26,800 --> 01:47:29,840
complete shebang

01:47:27,840 --> 01:47:32,880
of course there was a process and we had

01:47:29,840 --> 01:47:32,880
to follow that process

01:47:34,719 --> 01:47:40,000
just to finish the point um

01:47:37,760 --> 01:47:41,199
i i think it makes sense to merge if

01:47:40,000 --> 01:47:44,960
it's stable

01:47:41,199 --> 01:47:48,000
or stale i don't think it makes sense to

01:47:44,960 --> 01:47:49,199
to mandate to merge it once you're

01:47:48,000 --> 01:47:51,199
working on it

01:47:49,199 --> 01:47:52,800
because it can still be a living

01:47:51,199 --> 01:47:55,360
document which you're changing

01:47:52,800 --> 01:47:58,400
as you're updating as you're finding new

01:47:55,360 --> 01:48:00,239
new data whatever

01:47:58,400 --> 01:48:02,400
so what i do not understand is that

01:48:00,239 --> 01:48:04,800
bartek is concerned that we

01:48:02,400 --> 01:48:05,760
maintain a list of google docs but then

01:48:04,800 --> 01:48:08,560
he wants

01:48:05,760 --> 01:48:10,159
to maintain moving google docs into

01:48:08,560 --> 01:48:11,520
markdown when they are done

01:48:10,159 --> 01:48:14,719
and that's a lot more work than

01:48:11,520 --> 01:48:16,159
maintaining a list of google docs

01:48:14,719 --> 01:48:18,560
yeah i don't want to maintain any list

01:48:16,159 --> 01:48:20,960
of google docs i what i care

01:48:18,560 --> 01:48:22,560
is the documentation snapshot in

01:48:20,960 --> 01:48:24,560
markdown

01:48:22,560 --> 01:48:27,280
everything else less float the

01:48:24,560 --> 01:48:29,840
discussion like we have discussions over

01:48:27,280 --> 01:48:33,199
prs over issues of our mailing list

01:48:29,840 --> 01:48:34,719
why you want to track that

01:48:33,199 --> 01:48:37,040
when you want to track move it to

01:48:34,719 --> 01:48:38,719
markdown

01:48:37,040 --> 01:48:40,800
so the question is when do you want to

01:48:38,719 --> 01:48:42,480
trick it i think that is

01:48:40,800 --> 01:48:44,560
is maybe the the question we are

01:48:42,480 --> 01:48:46,960
actually discussing my opinion is we

01:48:44,560 --> 01:48:50,000
track it like we permanently track it

01:48:46,960 --> 01:48:53,760
when it is stable or when it is stale

01:48:50,000 --> 01:48:55,600
yeah i agree um small things which we

01:48:53,760 --> 01:48:56,400
can do for example currently we are

01:48:55,600 --> 01:48:59,040
writing

01:48:56,400 --> 01:49:00,000
our meeting notes in in google docs

01:48:59,040 --> 01:49:02,560
format

01:49:00,000 --> 01:49:04,639
and speaking with microphone ahead on

01:49:02,560 --> 01:49:06,400
for blog posts we also use google docs

01:49:04,639 --> 01:49:07,360
because that's just how collaboration is

01:49:06,400 --> 01:49:10,880
quickest

01:49:07,360 --> 01:49:14,400
but we write in markdown syntax

01:49:10,880 --> 01:49:15,280
into google docs at least most of us do

01:49:14,400 --> 01:49:18,400
i think

01:49:15,280 --> 01:49:19,199
um and then we just copy it over into

01:49:18,400 --> 01:49:21,440
into git

01:49:19,199 --> 01:49:22,239
um or into a microphone file make the pr

01:49:21,440 --> 01:49:23,840
blah blah blah blah

01:49:22,239 --> 01:49:25,599
so that's for example one of the things

01:49:23,840 --> 01:49:28,239
which we can which we can play with that

01:49:25,599 --> 01:49:30,719
we try and write

01:49:28,239 --> 01:49:31,520
design documents and such in markdown

01:49:30,719 --> 01:49:35,440
syntax

01:49:31,520 --> 01:49:37,599
in a google doc which makes it easier to

01:49:35,440 --> 01:49:39,840
to to snapshot we can also in this

01:49:37,599 --> 01:49:42,880
overview for example

01:49:39,840 --> 01:49:46,080
have a new section where we say moved to

01:49:42,880 --> 01:49:48,719
to get and then we we just move that

01:49:46,080 --> 01:49:50,800
thing over once we have marked it as not

01:49:48,719 --> 01:49:52,880
to be edited anymore

01:49:50,800 --> 01:49:54,000
these kinds of things we can just play

01:49:52,880 --> 01:49:56,800
with

01:49:54,000 --> 01:50:00,960
without the overhead of a process which

01:49:56,800 --> 01:50:04,400
we would need to undo or formally change

01:50:00,960 --> 01:50:05,599
sure um i would still for example my

01:50:04,400 --> 01:50:07,440
personal proposal

01:50:05,599 --> 01:50:10,000
i would always do the markdown if there

01:50:07,440 --> 01:50:13,280
is such projects so i would not restrict

01:50:10,000 --> 01:50:16,239
any any form of uh proposal

01:50:13,280 --> 01:50:16,560
um i would restrict the approval process

01:50:16,239 --> 01:50:17,920
right

01:50:16,560 --> 01:50:20,159
well because there has to be process

01:50:17,920 --> 01:50:22,159
because how how will tell people how to

01:50:20,159 --> 01:50:24,880
approve something how to

01:50:22,159 --> 01:50:25,199
um you know make consensus on some idea

01:50:24,880 --> 01:50:27,360
and

01:50:25,199 --> 01:50:29,840
i'm talking about specific cases where

01:50:27,360 --> 01:50:31,920
with ganesh we did this post

01:50:29,840 --> 01:50:33,360
processing proposal it was kind of

01:50:31,920 --> 01:50:36,080
approved kind of not

01:50:33,360 --> 01:50:38,000
and at the end it was totally rejected

01:50:36,080 --> 01:50:39,280
because we have some further ideas it

01:50:38,000 --> 01:50:41,040
was evolving

01:50:39,280 --> 01:50:42,880
but it would be nice to evolve it in the

01:50:41,040 --> 01:50:45,280
iterations and in

01:50:42,880 --> 01:50:46,400
marked iterations it was so confusing

01:50:45,280 --> 01:50:49,679
for everyone and

01:50:46,400 --> 01:50:52,320
literally it was failing it was really

01:50:49,679 --> 01:50:54,880
bad mentorship experience as well

01:50:52,320 --> 01:50:54,880
because of that

01:50:54,960 --> 01:50:59,040
i mean what i'm hearing is what we want

01:50:58,080 --> 01:51:02,320
is that in the end

01:50:59,040 --> 01:51:03,360
it's like the the end product is marked

01:51:02,320 --> 01:51:06,880
down

01:51:03,360 --> 01:51:07,440
and the final discussion and approval

01:51:06,880 --> 01:51:10,800
happens

01:51:07,440 --> 01:51:12,960
around a pr that brings in that markdown

01:51:10,800 --> 01:51:14,080
how the text gets to be there in the

01:51:12,960 --> 01:51:15,840
first place

01:51:14,080 --> 01:51:17,199
i think we can leave that token totally

01:51:15,840 --> 01:51:19,360
open and

01:51:17,199 --> 01:51:20,400
it might be that someone comes around

01:51:19,360 --> 01:51:23,199
and says

01:51:20,400 --> 01:51:23,920
i have a fully fledged the fully written

01:51:23,199 --> 01:51:26,719
proposal

01:51:23,920 --> 01:51:28,639
here is my pr and let's discuss this

01:51:26,719 --> 01:51:29,599
that may have come from a google doc or

01:51:28,639 --> 01:51:32,080
not

01:51:29,599 --> 01:51:34,719
um that may have come from like

01:51:32,080 --> 01:51:36,639
beautiful handwriting it may be

01:51:34,719 --> 01:51:38,880
like people can also open work in

01:51:36,639 --> 01:51:39,599
progress prs and say i want to work on

01:51:38,880 --> 01:51:43,119
this now

01:51:39,599 --> 01:51:45,119
and then start pushing into that i don't

01:51:43,119 --> 01:51:46,880
think we need to restrict that at least

01:51:45,119 --> 01:51:48,800
not right now

01:51:46,880 --> 01:51:50,159
my concern is that we will have the same

01:51:48,800 --> 01:51:52,400
discussions twice

01:51:50,159 --> 01:51:54,400
once in the google documents and one in

01:51:52,400 --> 01:51:56,400
the markdown comments

01:51:54,400 --> 01:51:58,159
well i will tell you why because in

01:51:56,400 --> 01:52:00,239
google docs if you add the comment and

01:51:58,159 --> 01:52:01,840
you just approve it you have thousands

01:52:00,239 --> 01:52:04,080
of the same discussions

01:52:01,840 --> 01:52:06,239
because you just approve the comment and

01:52:04,080 --> 01:52:08,400
versus in grouping pr it's much more

01:52:06,239 --> 01:52:12,159
discoverable right

01:52:08,400 --> 01:52:13,040
that's my point more discoverable for

01:52:12,159 --> 01:52:15,360
you

01:52:13,040 --> 01:52:16,320
for your personal use i don't i don't

01:52:15,360 --> 01:52:19,920
think anyone

01:52:16,320 --> 01:52:21,280
go through the past comments on google

01:52:19,920 --> 01:52:23,040
i mean i don't always go through the

01:52:21,280 --> 01:52:25,760
past comments on

01:52:23,040 --> 01:52:27,280
uh github either true but then you can

01:52:25,760 --> 01:52:29,280
link at least to those and stuff like

01:52:27,280 --> 01:52:30,639
that yeah i think maybe it's opinionated

01:52:29,280 --> 01:52:32,320
maybe yeah

01:52:30,639 --> 01:52:33,920
i think i would not restrict discussion

01:52:32,320 --> 01:52:36,400
process i would restrict

01:52:33,920 --> 01:52:38,159
approval process yeah but now you're

01:52:36,400 --> 01:52:40,000
actually making good arguments against

01:52:38,159 --> 01:52:41,840
the process because if we do not have a

01:52:40,000 --> 01:52:44,639
process no one is stopping you from

01:52:41,840 --> 01:52:47,040
having your design document in markdown

01:52:44,639 --> 01:52:48,960
living in a pr or in your own repository

01:52:47,040 --> 01:52:51,199
or somewhere else

01:52:48,960 --> 01:52:52,400
and and writing it and maintaining it in

01:52:51,199 --> 01:52:55,840
whatever form you

01:52:52,400 --> 01:52:58,159
you choose and also it gives us

01:52:55,840 --> 01:53:00,159
the ability to to try yet again because

01:52:58,159 --> 01:53:03,920
as a reminder we used to do this

01:53:00,159 --> 01:53:06,960
um to to trial discussions in in prs

01:53:03,920 --> 01:53:08,800
i also know that we already have uh it's

01:53:06,960 --> 01:53:10,800
not a list of google docs it's a

01:53:08,800 --> 01:53:12,159
list of design doc and there is one in

01:53:10,800 --> 01:53:14,880
markdown environment direct manager

01:53:12,159 --> 01:53:14,880
repository

01:53:16,960 --> 01:53:20,639
but i mean biotech no one is stopping

01:53:18,960 --> 01:53:23,040
you from

01:53:20,639 --> 01:53:24,400
from doing it as such i i honestly think

01:53:23,040 --> 01:53:27,040
you will get less feedback

01:53:24,400 --> 01:53:28,560
and less quickly and and less detailed

01:53:27,040 --> 01:53:32,159
and less specific

01:53:28,560 --> 01:53:33,920
but we can just try it i mean if memory

01:53:32,159 --> 01:53:34,560
serves correctly bjorn correct me if i'm

01:53:33,920 --> 01:53:37,840
wrong

01:53:34,560 --> 01:53:40,480
um we used to do this in

01:53:37,840 --> 01:53:40,960
in the early days in i don't know when

01:53:40,480 --> 01:53:43,199
yeah

01:53:40,960 --> 01:53:44,800
it's distinct the the the one for the

01:53:43,199 --> 01:53:46,480
securing the traffic in that manager

01:53:44,800 --> 01:53:49,920
lives in the traffic

01:53:46,480 --> 01:53:52,159
repository in mardan that's by far not

01:53:49,920 --> 01:53:55,599
the only one we had we had several ones

01:53:52,159 --> 01:53:56,800
i i do remember that we had the 2.0 or

01:53:55,599 --> 01:53:59,599
2.x

01:53:56,800 --> 01:54:00,480
storage discussion and such also all in

01:53:59,599 --> 01:54:03,440
in

01:54:00,480 --> 01:54:04,719
in github and it was super confusing and

01:54:03,440 --> 01:54:07,360
that is what

01:54:04,719 --> 01:54:08,320
what actually led us to adopting the

01:54:07,360 --> 01:54:12,000
google docs

01:54:08,320 --> 01:54:14,080
approach if i remember correctly again

01:54:12,000 --> 01:54:16,320
byron correct me if i'm wrong

01:54:14,080 --> 01:54:18,239
the 2.x storage discussion was in a

01:54:16,320 --> 01:54:20,960
secret design note that fabian only

01:54:18,239 --> 01:54:24,960
shared with brian

01:54:20,960 --> 01:54:26,400
i i mean the one on github but

01:54:24,960 --> 01:54:28,880
or matthias you can also correct me

01:54:26,400 --> 01:54:32,239
sorry for it i have no idea actually

01:54:28,880 --> 01:54:34,000
okay if if memory serves correctly we

01:54:32,239 --> 01:54:36,239
had precisely this problem

01:54:34,000 --> 01:54:37,440
and that's precisely why we changed to

01:54:36,239 --> 01:54:40,560
google docs

01:54:37,440 --> 01:54:42,560
to to have more dynamic discussions um

01:54:40,560 --> 01:54:44,320
just as a point of order we are at time

01:54:42,560 --> 01:54:45,920
um we can also

01:54:44,320 --> 01:54:48,840
like if everyone wants to continue we

01:54:45,920 --> 01:54:52,960
can also continue i'm fine either way

01:54:48,840 --> 01:54:55,920
um yeah i mean i honestly don't remember

01:54:52,960 --> 01:54:56,400
any conscious decision to to do design

01:54:55,920 --> 01:54:59,520
docs

01:54:56,400 --> 01:55:02,840
in google doc because the discussion on

01:54:59,520 --> 01:55:04,560
pull requests in markdown was too

01:55:02,840 --> 01:55:07,440
complicated

01:55:04,560 --> 01:55:10,639
i i would so i would propose that we

01:55:07,440 --> 01:55:13,199
don't introduce a policy at this time

01:55:10,639 --> 01:55:15,440
because we are not sure enough what that

01:55:13,199 --> 01:55:19,599
policy exactly should be

01:55:15,440 --> 01:55:22,000
um i propose that

01:55:19,599 --> 01:55:23,119
especially for discussions that bartek

01:55:22,000 --> 01:55:25,599
leads

01:55:23,119 --> 01:55:26,719
we try having the discussions in

01:55:25,599 --> 01:55:28,960
different places

01:55:26,719 --> 01:55:31,520
we are not limited to using google docs

01:55:28,960 --> 01:55:36,400
by any policy either

01:55:31,520 --> 01:55:38,960
and then with that additional experience

01:55:36,400 --> 01:55:40,800
like we were talking a lot about what we

01:55:38,960 --> 01:55:41,920
used to do and trying to remember what

01:55:40,800 --> 01:55:44,320
it used to be like

01:55:41,920 --> 01:55:45,679
but let's try what it is like now also

01:55:44,320 --> 01:55:48,560
github has evolved

01:55:45,679 --> 01:55:50,880
right github has a lot more help in

01:55:48,560 --> 01:55:54,639
discussing something around a pr

01:55:50,880 --> 01:55:57,119
now um maybe this turns out great

01:55:54,639 --> 01:55:59,199
and everybody loves it and nobody wants

01:55:57,119 --> 01:56:03,599
to make google docs anymore

01:55:59,199 --> 01:56:06,400
um maybe we find some intermediate space

01:56:03,599 --> 01:56:06,400
um yeah

01:56:08,080 --> 01:56:12,880
playing level i took there were more

01:56:10,800 --> 01:56:16,239
changes to github and how to

01:56:12,880 --> 01:56:18,880
how to interface with

01:56:16,239 --> 01:56:19,920
information stored in github then there

01:56:18,880 --> 01:56:24,080
was

01:56:19,920 --> 01:56:26,080
any change to to the urls of google docs

01:56:24,080 --> 01:56:28,560
so now google doc all the google docs

01:56:26,080 --> 01:56:30,080
urls are changing they just sent an

01:56:28,560 --> 01:56:31,199
email today that they're breaking all

01:56:30,080 --> 01:56:34,000
the share links

01:56:31,199 --> 01:56:34,000
uh yes

01:56:35,520 --> 01:56:38,719
they they don't actually tell you what

01:56:37,119 --> 01:56:40,159
they are doing they just send you a

01:56:38,719 --> 01:56:43,440
superficial email that

01:56:40,159 --> 01:56:46,719
you must read this and click here but

01:56:43,440 --> 01:56:48,159
anyway looks like there is this proposal

01:56:46,719 --> 01:56:49,760
of just trying things out

01:56:48,159 --> 01:56:52,080
and not making any policy but doesn't

01:56:49,760 --> 01:56:56,080
mean that we can try to create the

01:56:52,080 --> 01:56:58,880
proposal repo

01:56:56,080 --> 01:57:00,239
for for for experimentation purposes i

01:56:58,880 --> 01:57:03,440
think that's fine yeah

01:57:00,239 --> 01:57:05,119
all right i i think we should

01:57:03,440 --> 01:57:07,440
need the consensus for this because but

01:57:05,119 --> 01:57:10,719
it can just create it and done

01:57:07,440 --> 01:57:12,480
um i think we generally

01:57:10,719 --> 01:57:14,560
want to do consensus if we start new

01:57:12,480 --> 01:57:16,560
things in the prometheus org but

01:57:14,560 --> 01:57:18,080
uh one thing i would ask is that we make

01:57:16,560 --> 01:57:19,440
it clear just in the readme for the

01:57:18,080 --> 01:57:21,920
repository

01:57:19,440 --> 01:57:23,440
that this is not an exhaustive list of

01:57:21,920 --> 01:57:26,639
all proposals

01:57:23,440 --> 01:57:28,000
the exhaustive list is the the

01:57:26,639 --> 01:57:31,280
documentation page

01:57:28,000 --> 01:57:32,639
that we have that leads to all them

01:57:31,280 --> 01:57:34,719
um just so that people don't get

01:57:32,639 --> 01:57:36,320
confused and think oh but why isn't it

01:57:34,719 --> 01:57:39,760
not here

01:57:36,320 --> 01:57:43,040
until we make it or we move the

01:57:39,760 --> 01:57:44,719
list that we have into that repository

01:57:43,040 --> 01:57:47,119
why don't we just make this part of the

01:57:44,719 --> 01:57:49,280
docs repository

01:57:47,119 --> 01:57:51,199
uh because of the confusion between what

01:57:49,280 --> 01:57:53,440
is designed and what is documentation

01:57:51,199 --> 01:57:54,560
and i think that confusion has two parts

01:57:53,440 --> 01:57:57,599
one is

01:57:54,560 --> 01:58:00,960
you find something but it's not actually

01:57:57,599 --> 01:58:02,719
exactly as the implementation is now or

01:58:00,960 --> 01:58:04,800
the other side which i also find

01:58:02,719 --> 01:58:05,520
extremely confu extremely annoying

01:58:04,800 --> 01:58:07,440
sometimes

01:58:05,520 --> 01:58:08,880
where the only documentation for thing

01:58:07,440 --> 01:58:10,239
is the design document

01:58:08,880 --> 01:58:12,080
and then you're left on your own to

01:58:10,239 --> 01:58:13,199
figure out like okay how was this

01:58:12,080 --> 01:58:16,320
actually implemented

01:58:13,199 --> 01:58:19,679
like how do i configure it now um and

01:58:16,320 --> 01:58:21,840
both the the the temptation to keep it

01:58:19,679 --> 01:58:24,880
at that will be too strong if it's

01:58:21,840 --> 01:58:28,000
on the docs website so i would

01:58:24,880 --> 01:58:30,719
prefer to at least not right now

01:58:28,000 --> 01:58:31,280
the counterpoint is that moving stuff

01:58:30,719 --> 01:58:33,920
around

01:58:31,280 --> 01:58:35,840
after you designate something stable so

01:58:33,920 --> 01:58:37,599
it's also super annoying and with

01:58:35,840 --> 01:58:38,960
with tagging of the pr center

01:58:37,599 --> 01:58:41,840
discussions

01:58:38,960 --> 01:58:43,840
we can we can easily discern between

01:58:41,840 --> 01:58:45,760
what is what but this is not a super

01:58:43,840 --> 01:58:48,159
strong opinion

01:58:45,760 --> 01:58:49,040
yeah but this is about in dogs or not in

01:58:48,159 --> 01:58:50,960
dogs

01:58:49,040 --> 01:58:52,080
yes and my point is i think we can

01:58:50,960 --> 01:58:54,080
easily make this

01:58:52,080 --> 01:58:55,599
work as part of docs so we don't have

01:58:54,080 --> 01:58:59,520
profileration of more

01:58:55,599 --> 01:59:03,520
repositories and we just did move stuff

01:58:59,520 --> 01:59:05,280
from slash proposal to slash accept it

01:59:03,520 --> 01:59:07,199
and we retain full git history and

01:59:05,280 --> 01:59:09,840
everything

01:59:07,199 --> 01:59:11,679
i i am on matthias side where i try to

01:59:09,840 --> 01:59:13,679
configure kafka mirroring and the only

01:59:11,679 --> 01:59:14,800
documentation available is a design dock

01:59:13,679 --> 01:59:16,560
which i have

01:59:14,800 --> 01:59:19,679
i needed to reverse engineer the stuff

01:59:16,560 --> 01:59:23,119
to make it work and that's very annoying

01:59:19,679 --> 01:59:26,239
my my view is it's about google ability

01:59:23,119 --> 01:59:28,840
and i would like to not have

01:59:26,239 --> 01:59:30,480
design documents appear on

01:59:28,840 --> 01:59:32,159
prometheus.ioh

01:59:30,480 --> 01:59:34,400
that's the main point for me because

01:59:32,159 --> 01:59:36,239
foreign like for us it's easy oh we know

01:59:34,400 --> 01:59:36,800
what the tags are and what exactly this

01:59:36,239 --> 01:59:38,719
means

01:59:36,800 --> 01:59:40,719
but as um like when i come in from the

01:59:38,719 --> 01:59:42,320
outside and i like how do i join in

01:59:40,719 --> 01:59:44,159
prometheus and i find a

01:59:42,320 --> 01:59:47,199
and i click the thing that says

01:59:44,159 --> 01:59:49,119
implementing like joins in prometheus

01:59:47,199 --> 01:59:51,280
and i click it and i read it and it all

01:59:49,119 --> 01:59:52,880
makes sense and i try to do it and then

01:59:51,280 --> 01:59:55,199
i go back and i realize

01:59:52,880 --> 01:59:57,360
it's under slash rejected right and i

01:59:55,199 --> 01:59:59,520
have to look at the url and chrome

01:59:57,360 --> 02:00:01,199
is in a phase of hiding the url again so

01:59:59,520 --> 02:00:03,760
i don't actually see that

02:00:01,199 --> 02:00:04,320
one point of order we are under quorum

02:00:03,760 --> 02:00:07,679
uh

02:00:04,320 --> 02:00:09,599
like solidly now um what bartek wrote

02:00:07,679 --> 02:00:11,280
would be my suggestion we can just have

02:00:09,599 --> 02:00:14,639
a subdirectory which is

02:00:11,280 --> 02:00:16,239
which is um which is not my part of

02:00:14,639 --> 02:00:18,320
promises i owe and done

02:00:16,239 --> 02:00:19,280
but i also think it's it's it's a little

02:00:18,320 --> 02:00:21,280
bit bike shitty

02:00:19,280 --> 02:00:23,520
i mean bartek wants to do this so bartik

02:00:21,280 --> 02:00:25,119
should just uh

02:00:23,520 --> 02:00:27,040
decide what he wants to do and how he

02:00:25,119 --> 02:00:29,040
wants to try it and if he needs

02:00:27,040 --> 02:00:31,119
approval by team to create a new

02:00:29,040 --> 02:00:33,280
repository just an email and three plus

02:00:31,119 --> 02:00:36,159
one and then done

02:00:33,280 --> 02:00:36,159
okay sounds good

02:00:38,840 --> 02:00:44,639
okay

02:00:41,040 --> 02:00:47,280
good good then thank you very much

02:00:44,639 --> 02:00:47,679
see you at the latest in a month thank

02:00:47,280 --> 02:00:51,280
you

02:00:47,679 --> 02:00:53,040
bye bye bye everyone i can't promise yet

02:00:51,280 --> 02:00:54,400
what i'm gonna like how available i'm

02:00:53,040 --> 02:00:56,159
going to be in the next three months

02:00:54,400 --> 02:00:59,360
because i'm on spectacle

02:00:56,159 --> 02:01:00,880
that's good let's yeah we

02:00:59,360 --> 02:01:04,000
if we have too many people going on

02:01:00,880 --> 02:01:04,000
vacation we can we can

02:01:04,880 --> 02:01:08,960
i'm like just informatively i'm taking a

02:01:07,599 --> 02:01:12,800
sabbatical so

02:01:08,960 --> 02:01:14,960
nice enjoy yeah i'm envious

02:01:12,800 --> 02:01:17,119
that's also part of the recording just

02:01:14,960 --> 02:01:23,840
yeah that's okay

02:01:17,119 --> 02:01:23,840

YouTube URL: https://www.youtube.com/watch?v=cJRECPgM4Qc


