Title: Prometheus Dev Summit 4, on 2021-04-29
Publication date: 2021-04-29
Playlist: Prometheus dev summits
Description: 
	https://docs.google.com/document/d/11LC3wJcVk00l8w5P3oLQ-m3Y37iom6INAMEu2ZAGIIE/edit#heading=h.vbwfs986kjp9
Captions: 
	00:00:00,160 --> 00:00:05,440
uh and i might just be

00:00:03,040 --> 00:00:06,879
now you're recording good welcome

00:00:05,440 --> 00:00:10,240
everyone

00:00:06,879 --> 00:00:13,519
today is the 20th 29th of april

00:00:10,240 --> 00:00:14,799
2021 um prometheus dev summit uh hello

00:00:13,519 --> 00:00:18,800
to the youtube audience

00:00:14,799 --> 00:00:21,760
and let's get started

00:00:18,800 --> 00:00:23,600
the first topic is by frederick raised

00:00:21,760 --> 00:00:24,880
by frederick but he isn't here today so

00:00:23,600 --> 00:00:26,800
maybe we need to skip it

00:00:24,880 --> 00:00:28,160
dynamic scrape intervals and scrape

00:00:26,800 --> 00:00:30,240
priority

00:00:28,160 --> 00:00:32,239
should we talk about this or should we

00:00:30,240 --> 00:00:33,840
should we uh

00:00:32,239 --> 00:00:36,160
not talk about this while frederick is

00:00:33,840 --> 00:00:36,160
not here

00:00:38,800 --> 00:00:42,079
i would not speak about it while fred is

00:00:40,800 --> 00:00:46,480
not here because it

00:00:42,079 --> 00:00:49,600
i don't know what this is about exactly

00:00:46,480 --> 00:00:51,360
for the dynamics it's um

00:00:49,600 --> 00:00:53,120
it's basically about allowing a

00:00:51,360 --> 00:00:54,640
different timing for

00:00:53,120 --> 00:00:56,800
i mean it's kind of obvious but yeah

00:00:54,640 --> 00:00:57,199
let's wait for frederick uh i'll move it

00:00:56,800 --> 00:01:00,399
back

00:00:57,199 --> 00:01:00,879
to the backlog so we go to the uh alert

00:01:00,399 --> 00:01:03,280
manager

00:01:00,879 --> 00:01:04,400
moratorium and potentially removing it

00:01:03,280 --> 00:01:06,320
julian if

00:01:04,400 --> 00:01:07,760
if there's a champion from the topic we

00:01:06,320 --> 00:01:10,840
could do it but

00:01:07,760 --> 00:01:13,840
yeah that doesn't seem what has to speak

00:01:10,840 --> 00:01:13,840
up

00:01:14,960 --> 00:01:19,600
okay i put it back on on the backlog and

00:01:17,600 --> 00:01:23,280
julian over to you

00:01:19,600 --> 00:01:25,360
yes so uh i would like to discuss the

00:01:23,280 --> 00:01:26,640
removal of the moratorium for the major

00:01:25,360 --> 00:01:29,840
notifiers

00:01:26,640 --> 00:01:31,520
because like i do see that the notifiers

00:01:29,840 --> 00:01:32,640
in her manager are not the things that

00:01:31,520 --> 00:01:35,840
are taking

00:01:32,640 --> 00:01:37,759
a lot of maintenance and i would like to

00:01:35,840 --> 00:01:40,000
welcome more users and more direct

00:01:37,759 --> 00:01:43,200
integration with the ads manager

00:01:40,000 --> 00:01:44,720
this should not be like the first class

00:01:43,200 --> 00:01:47,040
integrations because we have a very

00:01:44,720 --> 00:01:49,840
generic web hook notifier but

00:01:47,040 --> 00:01:51,439
i can see some of first class

00:01:49,840 --> 00:01:52,479
integration that would make sense

00:01:51,439 --> 00:01:55,759
potentially like

00:01:52,479 --> 00:01:57,920
maybe microsoft teams

00:01:55,759 --> 00:01:59,520
well like we got a proposal two days ago

00:01:57,920 --> 00:02:02,799
maybe amazon sns so

00:01:59,520 --> 00:02:03,920
i would like that we lift the moratorium

00:02:02,799 --> 00:02:05,840
and then

00:02:03,920 --> 00:02:07,200
under the same conditions as the

00:02:05,840 --> 00:02:09,759
formative

00:02:07,200 --> 00:02:13,440
service carries that we can accept more

00:02:09,759 --> 00:02:13,440
notifiers in the art manager

00:02:15,520 --> 00:02:22,959
i like it i mean i think in general

00:02:19,200 --> 00:02:24,959
it's it's a good time to freeze a lot of

00:02:22,959 --> 00:02:25,599
things that are effectively stuck at

00:02:24,959 --> 00:02:29,440
whatever

00:02:25,599 --> 00:02:29,440
soundcloud needed five years ago

00:02:29,680 --> 00:02:32,640
so yeah

00:02:33,120 --> 00:02:40,319
yeah the alert manager maintainer

00:02:37,040 --> 00:02:43,680
and not being very responsive

00:02:40,319 --> 00:02:46,720
on this project due to many

00:02:43,680 --> 00:02:50,000
other activities but i share

00:02:46,720 --> 00:02:52,080
beyond concern that first we need to

00:02:50,000 --> 00:02:53,040
to make sure that the project is in your

00:02:52,080 --> 00:02:57,440
lc state

00:02:53,040 --> 00:03:00,800
but definitely agree that there is no

00:02:57,440 --> 00:03:03,920
real reason to restrict

00:03:00,800 --> 00:03:05,440
the integrations in alert manager as

00:03:03,920 --> 00:03:07,440
long as we

00:03:05,440 --> 00:03:08,879
you got enough people to take care of

00:03:07,440 --> 00:03:12,560
them

00:03:08,879 --> 00:03:12,560
the project in general yeah

00:03:13,360 --> 00:03:16,800
yes so uh actually like when i say that

00:03:16,159 --> 00:03:18,560
this is

00:03:16,800 --> 00:03:20,159
the same rules as comments it means that

00:03:18,560 --> 00:03:23,280
they would need to find someone from

00:03:20,159 --> 00:03:25,519
team willing to maintain that and to

00:03:23,280 --> 00:03:27,120
keep that up to date like we do for the

00:03:25,519 --> 00:03:29,120
service coverage

00:03:27,120 --> 00:03:31,040
and like the general issue of direct

00:03:29,120 --> 00:03:34,480
manager not being maintained

00:03:31,040 --> 00:03:36,560
we are actually like i plan to

00:03:34,480 --> 00:03:38,480
get a release this week and i plan to be

00:03:36,560 --> 00:03:38,879
maybe more involved in the close future

00:03:38,480 --> 00:03:41,120
but

00:03:38,879 --> 00:03:42,879
i also know that we have the cortex

00:03:41,120 --> 00:03:44,720
project which is now a very active

00:03:42,879 --> 00:03:46,239
dancing project for rolex manager

00:03:44,720 --> 00:03:48,640
and i think that in the coming months we

00:03:46,239 --> 00:03:50,239
might have more participation from them

00:03:48,640 --> 00:03:52,080
directly in the art manager upstream

00:03:50,239 --> 00:03:55,280
that's what i hope at least

00:03:52,080 --> 00:03:57,840
yeah yeah i hope too that we'll

00:03:55,280 --> 00:03:58,560
like we managed to to get more people on

00:03:57,840 --> 00:04:02,480
board from

00:03:58,560 --> 00:04:05,920
our side i try that definitely so

00:04:02,480 --> 00:04:05,920
we'll take some some time but

00:04:06,799 --> 00:04:10,879
we'll get some help pretty soon

00:04:13,680 --> 00:04:18,959
yeah i'm just curious if there's any

00:04:15,439 --> 00:04:21,040
like you know problematic areas from

00:04:18,959 --> 00:04:22,880
you know lack of maintaining resources

00:04:21,040 --> 00:04:25,520
the alert manager just kind of a general

00:04:22,880 --> 00:04:25,520
bandwidth thing

00:04:27,280 --> 00:04:31,120
uh this is very like generic for that

00:04:29,600 --> 00:04:32,160
manager if you look at the other project

00:04:31,120 --> 00:04:34,240
committees

00:04:32,160 --> 00:04:36,080
uh like we have a lot of maintenance

00:04:34,240 --> 00:04:37,199
already and we welcome like regular new

00:04:36,080 --> 00:04:39,199
maintainers

00:04:37,199 --> 00:04:40,400
and the exporters are in pretty good

00:04:39,199 --> 00:04:42,880
shape i would say

00:04:40,400 --> 00:04:44,479
not all of them are very very active but

00:04:42,880 --> 00:04:46,160
they are still cutting resist but

00:04:44,479 --> 00:04:48,639
in the case of the art manager we have a

00:04:46,160 --> 00:04:50,800
big gap since the last release

00:04:48,639 --> 00:04:51,840
that we actually need to close and like

00:04:50,800 --> 00:04:54,240
we have a

00:04:51,840 --> 00:04:55,600
pretty active maintainer for the ui part

00:04:54,240 --> 00:04:58,000
which is andrei

00:04:55,600 --> 00:05:00,479
but like for the gobot currently simon

00:04:58,000 --> 00:05:03,039
is not able to be as responsive

00:05:00,479 --> 00:05:04,720
uh as we are on other projects and there

00:05:03,039 --> 00:05:06,240
is also a backlog of issues that need to

00:05:04,720 --> 00:05:07,919
be tackled but i think this is very

00:05:06,240 --> 00:05:09,440
specific to the art manager

00:05:07,919 --> 00:05:11,199
and it is also partly due to the fact

00:05:09,440 --> 00:05:14,000
that gas measure is

00:05:11,199 --> 00:05:15,840
quite stable actually and the conversion

00:05:14,000 --> 00:05:17,440
is quite stable so it doesn't

00:05:15,840 --> 00:05:19,919
need a new release except for new

00:05:17,440 --> 00:05:21,120
features but there are no big bug fixes

00:05:19,919 --> 00:05:24,000
that need to go out but

00:05:21,120 --> 00:05:25,600
we plan to cut a release and yes we also

00:05:24,000 --> 00:05:28,800
need to tackle the maintenance

00:05:25,600 --> 00:05:28,800
issue on the art manager

00:05:29,840 --> 00:05:35,759
okay thanks for the additional context

00:05:33,759 --> 00:05:39,199
is this just a concern or are you

00:05:35,759 --> 00:05:42,639
willing to step up richard

00:05:39,199 --> 00:05:46,080
uh i don't think i have enough bandwidth

00:05:42,639 --> 00:05:49,520
to actually move the needle much so i

00:05:46,080 --> 00:05:52,160
wouldn't want to offer false hope

00:05:49,520 --> 00:05:52,720
but there might be someone at aws to get

00:05:52,160 --> 00:05:56,160
do so

00:05:52,720 --> 00:05:57,759
like we could yeah i mean just for

00:05:56,160 --> 00:05:59,840
complete transparency complete

00:05:57,759 --> 00:06:03,039
transparency what julian said

00:05:59,840 --> 00:06:03,840
is that there is activity in the alert

00:06:03,039 --> 00:06:07,520
manager for

00:06:03,840 --> 00:06:09,840
cortex and that's how we plan to

00:06:07,520 --> 00:06:10,800
to bringing indeed the activity and

00:06:09,840 --> 00:06:13,039
there is

00:06:10,800 --> 00:06:14,240
time we plan to use the adult manager so

00:06:13,039 --> 00:06:17,039
there is

00:06:14,240 --> 00:06:19,440
going to be opportunity to to maintain

00:06:17,039 --> 00:06:21,280
and contribute there

00:06:19,440 --> 00:06:23,520
what i also notice is that currently

00:06:21,280 --> 00:06:24,720
cortex is actually adding feature on top

00:06:23,520 --> 00:06:27,840
of the art manager

00:06:24,720 --> 00:06:28,639
without of streaming them if i can say

00:06:27,840 --> 00:06:30,639
that

00:06:28,639 --> 00:06:32,080
so they are adding like rate limiting to

00:06:30,639 --> 00:06:34,240
the notifications

00:06:32,080 --> 00:06:36,160
and they are also adding some other

00:06:34,240 --> 00:06:37,600
features and i'm wondering if the trend

00:06:36,160 --> 00:06:39,440
will be that cortex will add more

00:06:37,600 --> 00:06:40,000
features downstream and not upstream

00:06:39,440 --> 00:06:42,240
them

00:06:40,000 --> 00:06:43,360
or if they or if they will try to get

00:06:42,240 --> 00:06:46,080
more upstream and then

00:06:43,360 --> 00:06:47,680
benefit from them downstream yeah so the

00:06:46,080 --> 00:06:48,880
particular features that have been added

00:06:47,680 --> 00:06:51,039
recently

00:06:48,880 --> 00:06:52,400
like i kind of think we saw them as not

00:06:51,039 --> 00:06:54,160
necessarily helpful

00:06:52,400 --> 00:06:56,960
outside cortex as they're related to

00:06:54,160 --> 00:06:58,720
abuse and multi-tenant environments like

00:06:56,960 --> 00:07:00,840
our scalability it was the other one

00:06:58,720 --> 00:07:04,160
right so

00:07:00,840 --> 00:07:06,160
um i don't know maybe we were

00:07:04,160 --> 00:07:08,080
at least i maybe i was making a bad

00:07:06,160 --> 00:07:10,160
assumption

00:07:08,080 --> 00:07:11,680
about the interest in them it also tends

00:07:10,160 --> 00:07:13,199
to just be easier to put stuff into

00:07:11,680 --> 00:07:13,919
cortex and then if it flies we can

00:07:13,199 --> 00:07:15,440
upstream it

00:07:13,919 --> 00:07:17,680
but there's no reason why we wouldn't

00:07:15,440 --> 00:07:19,280
want to upstream it and we've just

00:07:17,680 --> 00:07:22,000
had difficulty getting things upstream

00:07:19,280 --> 00:07:22,000
before right so

00:07:23,360 --> 00:07:27,680
yeah so we are in the situation where i

00:07:26,000 --> 00:07:29,440
also at some point propose that some

00:07:27,680 --> 00:07:30,479
gothic people got the maintenance but

00:07:29,440 --> 00:07:32,560
like it seems this will

00:07:30,479 --> 00:07:35,280
take still take a few weeks or months

00:07:32,560 --> 00:07:38,720
before this can be done

00:07:35,280 --> 00:07:40,240
i think yeah we will um grafana labs

00:07:38,720 --> 00:07:42,560
will be putting a lot more work into

00:07:40,240 --> 00:07:44,400
alert manager as well um we've got quite

00:07:42,560 --> 00:07:46,720
a lot of use of it internally it's josh

00:07:44,400 --> 00:07:50,639
on i don't think josh's honestly

00:07:46,720 --> 00:07:51,840
but yeah right i think uh

00:07:50,639 --> 00:07:53,360
hopefully that will solve the problem

00:07:51,840 --> 00:07:53,840
but you know i can't promise anything

00:07:53,360 --> 00:07:55,840
now

00:07:53,840 --> 00:07:57,360
yeah i mean i think we have loads of

00:07:55,840 --> 00:07:59,039
stakeholders and lots of people are

00:07:57,360 --> 00:08:02,319
interested in doing something but

00:07:59,039 --> 00:08:05,120
of course we need that person that likes

00:08:02,319 --> 00:08:05,440
shepherds everything into a consistent

00:08:05,120 --> 00:08:08,000
you

00:08:05,440 --> 00:08:09,599
and ideally that would be personal with

00:08:08,000 --> 00:08:11,520
a bit of background in the history

00:08:09,599 --> 00:08:14,479
because there are some

00:08:11,520 --> 00:08:16,319
like implications and i know just a few

00:08:14,479 --> 00:08:17,440
of them and danny kruger in fact that

00:08:16,319 --> 00:08:20,400
makes me

00:08:17,440 --> 00:08:23,120
uh be kind of concerned that there might

00:08:20,400 --> 00:08:23,120
be many little

00:08:24,840 --> 00:08:27,840
traps

00:08:36,399 --> 00:08:42,640
just for completeness sake i i saw if if

00:08:39,279 --> 00:08:45,039
josh is able to jump on for 15 minutes

00:08:42,640 --> 00:08:45,039
we'll see

00:08:47,519 --> 00:08:50,560
looking for i mean we can also look into

00:08:49,920 --> 00:08:53,760
into the

00:08:50,560 --> 00:08:56,959
issue which jerome linked

00:08:53,760 --> 00:09:00,240
but i think that basically covers just

00:08:56,959 --> 00:09:00,240
one of those instances

00:09:00,640 --> 00:09:04,800
should we just make a call for consensus

00:09:02,240 --> 00:09:07,440
because the the reading of the rumors

00:09:04,800 --> 00:09:08,240
no one has anything against lifting the

00:09:07,440 --> 00:09:10,240
moratorium

00:09:08,240 --> 00:09:13,040
as long as we know how that work will be

00:09:10,240 --> 00:09:13,040
carried long term

00:09:14,080 --> 00:09:37,839
okay so let's do that

00:09:23,440 --> 00:09:37,839
come on

00:09:39,140 --> 00:09:44,080
[Music]

00:09:41,360 --> 00:09:45,519
so consensus moratorium will be lifted

00:09:44,080 --> 00:09:46,880
new integrations need a long-term

00:09:45,519 --> 00:09:51,279
maintenance plan

00:09:46,880 --> 00:09:53,760
all agreed anyone disagreeing

00:09:51,279 --> 00:09:53,760
good good

00:09:58,640 --> 00:10:04,079
so next topic directly related to urine

00:10:02,320 --> 00:10:06,320
clarifying some intended semantics of

00:10:04,079 --> 00:10:09,600
mutations

00:10:06,320 --> 00:10:12,480
yeah i mean this is perfect segue into

00:10:09,600 --> 00:10:14,800
we kind of in this discussion would be

00:10:12,480 --> 00:10:17,600
great to have people in there

00:10:14,800 --> 00:10:18,000
technically to have um some history

00:10:17,600 --> 00:10:21,040
behind

00:10:18,000 --> 00:10:22,000
this uh so there's this is um i mean we

00:10:21,040 --> 00:10:24,320
stumbled

00:10:22,000 --> 00:10:25,680
upon this stumbled on this whatever

00:10:24,320 --> 00:10:27,839
before the business

00:10:25,680 --> 00:10:29,680
when the time-based new thing was

00:10:27,839 --> 00:10:31,200
introduced which is a great feature so

00:10:29,680 --> 00:10:34,399
you can essentially

00:10:31,200 --> 00:10:35,519
say yeah i mean i'm i'm just monitoring

00:10:34,399 --> 00:10:37,120
a system

00:10:35,519 --> 00:10:39,200
whatever stop trading system during

00:10:37,120 --> 00:10:41,040
stock trading hours i don't want to get

00:10:39,200 --> 00:10:42,640
alerts routed to my page or outside of

00:10:41,040 --> 00:10:44,480
business or something right

00:10:42,640 --> 00:10:45,680
so that's that's a pretty cool feature

00:10:44,480 --> 00:10:49,200
and then we realized

00:10:45,680 --> 00:10:52,399
whenever you leave the mute period

00:10:49,200 --> 00:10:54,240
then it takes like you do you don't get

00:10:52,399 --> 00:10:55,440
immediate notifications for all the

00:10:54,240 --> 00:10:57,360
filing alerts

00:10:55,440 --> 00:10:58,480
it waits until the usual like group

00:10:57,360 --> 00:10:59,920
interval has passed

00:10:58,480 --> 00:11:02,560
if your group interval is like five

00:10:59,920 --> 00:11:03,920
minutes as it's often for critical stuff

00:11:02,560 --> 00:11:06,160
that's not a big deal

00:11:03,920 --> 00:11:07,440
but there are situations especially for

00:11:06,160 --> 00:11:08,880
not so critical

00:11:07,440 --> 00:11:11,040
alerts where you have like a group

00:11:08,880 --> 00:11:13,680
interval of four hours for for example

00:11:11,040 --> 00:11:15,519
it's very common and and like it's very

00:11:13,680 --> 00:11:17,760
anti-intuitive that

00:11:15,519 --> 00:11:19,440
whatever eight in the morning your work

00:11:17,760 --> 00:11:21,760
hours start and only at

00:11:19,440 --> 00:11:22,959
perhaps twelve you get those those

00:11:21,760 --> 00:11:26,160
notifications

00:11:22,959 --> 00:11:28,640
um and that is a similar thing

00:11:26,160 --> 00:11:30,640
i mean this all looped back into i think

00:11:28,640 --> 00:11:33,279
did i link it somewhere

00:11:30,640 --> 00:11:34,720
in the in the voting document otherwise

00:11:33,279 --> 00:11:36,959
i will add the link in the same

00:11:34,720 --> 00:11:38,240
there is an ancient issue where we

00:11:36,959 --> 00:11:41,440
discussed

00:11:38,240 --> 00:11:43,760
how uh alerts should be treated

00:11:41,440 --> 00:11:44,720
like how should we notify if we'll get

00:11:43,760 --> 00:11:47,839
silent

00:11:44,720 --> 00:11:50,720
um yeah exactly thanks um

00:11:47,839 --> 00:11:51,200
and i think this is related because this

00:11:50,720 --> 00:11:53,200
all

00:11:51,200 --> 00:11:54,880
goes into what's actually the semantics

00:11:53,200 --> 00:11:56,320
of muting and i think at the moment this

00:11:54,880 --> 00:11:58,720
is where like my

00:11:56,320 --> 00:12:00,880
uh sense of history of the project and

00:11:58,720 --> 00:12:03,839
and internals is kind of

00:12:00,880 --> 00:12:04,399
uh well and notice how limited it is i

00:12:03,839 --> 00:12:06,480
think there

00:12:04,399 --> 00:12:07,519
it's just like the final step in this

00:12:06,480 --> 00:12:10,560
whole pipeline

00:12:07,519 --> 00:12:12,560
is the muting made be by silences or by

00:12:10,560 --> 00:12:13,760
inhibitions over the new time-based

00:12:12,560 --> 00:12:16,240
thing and

00:12:13,760 --> 00:12:17,120
and this just doesn't touch at all how

00:12:16,240 --> 00:12:20,320
um

00:12:17,120 --> 00:12:22,000
like groups are updated and there is in

00:12:20,320 --> 00:12:23,040
this long-standing issue there was a lot

00:12:22,000 --> 00:12:26,000
of discussion

00:12:23,040 --> 00:12:27,279
if an alert that should get silenced

00:12:26,000 --> 00:12:30,000
should it be

00:12:27,279 --> 00:12:32,399
counted as resolved by like the

00:12:30,000 --> 00:12:34,720
receivers let's say pagerduty

00:12:32,399 --> 00:12:36,399
should be sent a resolve notification so

00:12:34,720 --> 00:12:38,560
we um

00:12:36,399 --> 00:12:40,480
send like now this is newly firing when

00:12:38,560 --> 00:12:43,920
it stops getting silence

00:12:40,480 --> 00:12:45,680
and this is all connected right and um

00:12:43,920 --> 00:12:47,040
my experience is at the moment we don't

00:12:45,680 --> 00:12:49,680
send anything right and

00:12:47,040 --> 00:12:51,279
people are mostly confused especially

00:12:49,680 --> 00:12:53,680
because like pagerduty

00:12:51,279 --> 00:12:54,959
or i guess other receivers do the same

00:12:53,680 --> 00:12:56,560
if like an alert

00:12:54,959 --> 00:12:58,320
isn't updated in a while they auto

00:12:56,560 --> 00:13:00,240
resolve it so

00:12:58,320 --> 00:13:02,560
all of a sudden the silence alert counts

00:13:00,240 --> 00:13:05,360
as resolved but only implicitly

00:13:02,560 --> 00:13:06,000
it's kind of weird and and yeah i would

00:13:05,360 --> 00:13:08,480
really like

00:13:06,000 --> 00:13:10,560
to find a solution here that is

00:13:08,480 --> 00:13:13,200
consistent with all the historical

00:13:10,560 --> 00:13:15,200
implications we already have

00:13:13,200 --> 00:13:16,399
yeah and i was hoping we would have

00:13:15,200 --> 00:13:18,800
collective wisdom here

00:13:16,399 --> 00:13:21,839
to discuss this quickly and and sketch

00:13:18,800 --> 00:13:21,839
out the direction

00:13:24,320 --> 00:13:28,079
yeah i mean i feel like it's pretty

00:13:26,240 --> 00:13:30,000
painful the way it is right now

00:13:28,079 --> 00:13:33,200
um we don't even use muting right we

00:13:30,000 --> 00:13:35,839
don't use any time-based stuff but

00:13:33,200 --> 00:13:36,240
i've like several times a month someone

00:13:35,839 --> 00:13:38,639
here

00:13:36,240 --> 00:13:39,360
is confused why they're not getting

00:13:38,639 --> 00:13:43,760
their result

00:13:39,360 --> 00:13:43,760
notification um

00:13:44,480 --> 00:13:51,040
so it's uh

00:13:47,760 --> 00:14:03,519
sorry confused by by expect messages um

00:13:51,040 --> 00:14:05,839
so like yes i think this could be better

00:14:03,519 --> 00:14:07,440
and i kind of feel like i i agree that

00:14:05,839 --> 00:14:11,199
when when you have

00:14:07,440 --> 00:14:12,800
a like day night kind of um cycle

00:14:11,199 --> 00:14:14,560
getting all the notific everything

00:14:12,800 --> 00:14:15,040
that's outstanding at the beginning of

00:14:14,560 --> 00:14:17,839
the day

00:14:15,040 --> 00:14:17,839
is valuable

00:14:19,519 --> 00:14:23,199
yeah it's also like if you even if you

00:14:21,839 --> 00:14:24,880
don't use the new feature if you just

00:14:23,199 --> 00:14:26,320
have a silence

00:14:24,880 --> 00:14:28,639
while this data center is under

00:14:26,320 --> 00:14:30,480
maintenance and then the silence expires

00:14:28,639 --> 00:14:31,920
and there is an alert has started to

00:14:30,480 --> 00:14:33,360
legitimately fire

00:14:31,920 --> 00:14:35,600
and your group level is four hours you

00:14:33,360 --> 00:14:39,040
might only get it after four hours

00:14:35,600 --> 00:14:41,279
um yeah i am wondering about that

00:14:39,040 --> 00:14:42,800
because in my experience you get them

00:14:41,279 --> 00:14:45,360
pretty quickly and

00:14:42,800 --> 00:14:46,560
uh the only issue is when the group

00:14:45,360 --> 00:14:49,279
interval is

00:14:46,560 --> 00:14:49,839
bigger than the silence or is bigger

00:14:49,279 --> 00:14:53,680
than

00:14:49,839 --> 00:14:55,279
the inhibition so i'm wondering if

00:14:53,680 --> 00:14:57,920
everything you say is

00:14:55,279 --> 00:14:59,519
accurate i guess it is but then this is

00:14:57,920 --> 00:15:01,600
not what i did notice

00:14:59,519 --> 00:15:02,639
usually i get all my alerts at eight in

00:15:01,600 --> 00:15:04,639
the morning

00:15:02,639 --> 00:15:06,160
even with a group interval of two four

00:15:04,639 --> 00:15:08,800
three five hours

00:15:06,160 --> 00:15:10,399
yeah i mean it could also be that i i

00:15:08,800 --> 00:15:12,240
got something wrong but that's exactly

00:15:10,399 --> 00:15:13,360
the reason right i mean ideally we have

00:15:12,240 --> 00:15:15,839
one among us

00:15:13,360 --> 00:15:16,800
who has the deeper insight and can kind

00:15:15,839 --> 00:15:18,560
of

00:15:16,800 --> 00:15:21,120
understand the current situation and can

00:15:18,560 --> 00:15:22,000
sketch up a solution sketch out a

00:15:21,120 --> 00:15:24,560
solution

00:15:22,000 --> 00:15:25,680
but i i guess we don't have that at the

00:15:24,560 --> 00:15:27,839
moment the

00:15:25,680 --> 00:15:28,880
wisdom went away with people leaving the

00:15:27,839 --> 00:15:32,000
project

00:15:28,880 --> 00:15:34,560
um but then

00:15:32,000 --> 00:15:37,120
someone has to sit down find out all of

00:15:34,560 --> 00:15:39,680
this and has to sketch out a solution

00:15:37,120 --> 00:15:42,160
i mean we could try getting back to

00:15:39,680 --> 00:15:43,360
stewart and see if he remembers anything

00:15:42,160 --> 00:15:46,880
about it

00:15:43,360 --> 00:15:48,800
so we wrote much of that when i dig

00:15:46,880 --> 00:15:50,880
into the guitar history the comments i

00:15:48,800 --> 00:15:51,279
did see was that like we should never

00:15:50,880 --> 00:15:54,160
have

00:15:51,279 --> 00:15:55,759
introduced resolve notifications i don't

00:15:54,160 --> 00:15:58,000
think that's an acceptable

00:15:55,759 --> 00:15:59,120
answer but that's what i did read in the

00:15:58,000 --> 00:16:00,800
history

00:15:59,120 --> 00:16:02,880
and i think that's the kind of reasons

00:16:00,800 --> 00:16:04,079
why there was no investment in getting

00:16:02,880 --> 00:16:08,480
this writer

00:16:04,079 --> 00:16:11,600
better for the users

00:16:08,480 --> 00:16:12,320
no i mean fundamentally i think the the

00:16:11,600 --> 00:16:16,800
mismatch

00:16:12,320 --> 00:16:20,880
is between repeated sending of something

00:16:16,800 --> 00:16:23,839
and communicating the state of something

00:16:20,880 --> 00:16:25,040
um and right now we only communicate the

00:16:23,839 --> 00:16:27,360
state

00:16:25,040 --> 00:16:28,560
through repeated sending but we don't

00:16:27,360 --> 00:16:31,360
really

00:16:28,560 --> 00:16:33,199
have a guarantee for like okay so how

00:16:31,360 --> 00:16:35,440
long do you need to wait like how young

00:16:33,199 --> 00:16:37,600
how long does pages do you need to wait

00:16:35,440 --> 00:16:40,160
for us to stop sending

00:16:37,600 --> 00:16:41,519
that it's still bad for to assume that

00:16:40,160 --> 00:16:44,560
it's good again

00:16:41,519 --> 00:16:47,839
and on the other hand if we mute the

00:16:44,560 --> 00:16:48,480
it's good again notification we just

00:16:47,839 --> 00:16:51,839
wait for

00:16:48,480 --> 00:16:54,959
whatever that like however patient that

00:16:51,839 --> 00:16:57,279
um receiver is and that's

00:16:54,959 --> 00:16:58,959
i think that's somewhere there is a

00:16:57,279 --> 00:17:02,079
mismatch there

00:16:58,959 --> 00:17:04,799
i mean my hope kind of is if we

00:17:02,079 --> 00:17:06,160
invert the order and essentially make

00:17:04,799 --> 00:17:08,319
muting something

00:17:06,160 --> 00:17:09,280
that happens as the very first step in

00:17:08,319 --> 00:17:11,600
the pipeline and

00:17:09,280 --> 00:17:12,799
if you mute anything it's it's the same

00:17:11,600 --> 00:17:16,720
thing as

00:17:12,799 --> 00:17:19,039
if it's not firing then i think we would

00:17:16,720 --> 00:17:20,799
circumvent a lot of those problems and

00:17:19,039 --> 00:17:22,400
it's it might be weird that

00:17:20,799 --> 00:17:24,240
muting i mean i think this was the

00:17:22,400 --> 00:17:26,720
original concern that a silence alert

00:17:24,240 --> 00:17:27,679
is is not the same thing as a not firing

00:17:26,720 --> 00:17:29,760
alert but

00:17:27,679 --> 00:17:30,960
if he could say okay if we buy into the

00:17:29,760 --> 00:17:33,200
semantic that

00:17:30,960 --> 00:17:34,640
silence or muted in any case is like

00:17:33,200 --> 00:17:36,559
non-firing then

00:17:34,640 --> 00:17:38,160
a lot of this would go away but i'm not

00:17:36,559 --> 00:17:39,760
sure this has to be

00:17:38,160 --> 00:17:42,400
thought through i mean one thing for

00:17:39,760 --> 00:17:43,280
example is that the the routing we have

00:17:42,400 --> 00:17:45,360
now isn't

00:17:43,280 --> 00:17:46,880
the the time based muting is in the

00:17:45,360 --> 00:17:47,760
rooting tree and you can only root

00:17:46,880 --> 00:17:51,120
something

00:17:47,760 --> 00:17:51,760
once it's firing right and and so this

00:17:51,120 --> 00:17:54,000
might have

00:17:51,760 --> 00:17:54,880
some weird circles in it but this is

00:17:54,000 --> 00:17:56,720
what i would

00:17:54,880 --> 00:17:58,400
like i mean if i had infinite time i

00:17:56,720 --> 00:17:59,200
would just sit down and think this

00:17:58,400 --> 00:18:02,160
through

00:17:59,200 --> 00:18:03,760
i don't have infinite time and ideally

00:18:02,160 --> 00:18:05,760
we could kind of

00:18:03,760 --> 00:18:07,440
put this out as a task and someone could

00:18:05,760 --> 00:18:09,440
pick it up

00:18:07,440 --> 00:18:11,200
um but that would be the idea i would

00:18:09,440 --> 00:18:14,080
like to

00:18:11,200 --> 00:18:15,440
kind of give as an input i mean as an as

00:18:14,080 --> 00:18:18,480
an alternative

00:18:15,440 --> 00:18:20,320
semantic what i could imagine

00:18:18,480 --> 00:18:22,559
might work but also needs to be thought

00:18:20,320 --> 00:18:25,760
through is that basically

00:18:22,559 --> 00:18:28,480
later stages in the pipeline can

00:18:25,760 --> 00:18:30,320
pull through and say send everything

00:18:28,480 --> 00:18:31,760
again right something has changed about

00:18:30,320 --> 00:18:35,039
mutings

00:18:31,760 --> 00:18:35,840
just like public or like reverse

00:18:35,039 --> 00:18:39,280
calculate

00:18:35,840 --> 00:18:39,679
what needs to be resent now i don't know

00:18:39,280 --> 00:18:43,840
how

00:18:39,679 --> 00:18:43,840
practical that is

00:18:44,480 --> 00:18:49,440
but couldn't we also just mark it early

00:18:47,600 --> 00:18:51,200
on as having been muted

00:18:49,440 --> 00:18:53,200
run through everything which we want to

00:18:51,200 --> 00:18:54,240
run through and at the end before it's

00:18:53,200 --> 00:18:56,720
actually being sent

00:18:54,240 --> 00:18:59,039
out then stop it because it has the mute

00:18:56,720 --> 00:18:59,039
flag

00:18:59,760 --> 00:19:02,799
it might be what we're doing it's just

00:19:02,240 --> 00:19:05,840
the thing

00:19:02,799 --> 00:19:08,400
like if we have all those semantics

00:19:05,840 --> 00:19:10,400
for alerts when they fire or not fire

00:19:08,400 --> 00:19:11,760
and how long to wait and when to resent

00:19:10,400 --> 00:19:14,320
the notification

00:19:11,760 --> 00:19:14,880
and my hope is we could just piggyback

00:19:14,320 --> 00:19:17,280
on that

00:19:14,880 --> 00:19:18,160
and don't have like a separate layer of

00:19:17,280 --> 00:19:20,880
semantics

00:19:18,160 --> 00:19:22,480
what to do when it's muted but not

00:19:20,880 --> 00:19:25,840
really stop firing

00:19:22,480 --> 00:19:30,000
but i mean is the the question there is

00:19:25,840 --> 00:19:32,080
right when it goes into the muted state

00:19:30,000 --> 00:19:34,400
do we send do we want to send a resolve

00:19:32,080 --> 00:19:37,200
notification

00:19:34,400 --> 00:19:37,760
yes i mean i would like i think we

00:19:37,200 --> 00:19:40,320
should

00:19:37,760 --> 00:19:42,000
but that might already be a fallacy

00:19:40,320 --> 00:19:45,200
which has to be thought through

00:19:42,000 --> 00:19:45,919
but if we if we do then perhaps we can

00:19:45,200 --> 00:19:48,960
actually make

00:19:45,919 --> 00:19:53,360
this whole muting decision like put let

00:19:48,960 --> 00:19:56,320
it be something quite early

00:19:53,360 --> 00:19:56,880
well my preference would be that we let

00:19:56,320 --> 00:19:59,120
that

00:19:56,880 --> 00:20:00,559
option to the user to decide what they

00:19:59,120 --> 00:20:03,679
want

00:20:00,559 --> 00:20:05,520
or even maybe have like a flag to decide

00:20:03,679 --> 00:20:06,080
which kind of behavior you would like to

00:20:05,520 --> 00:20:07,679
want

00:20:06,080 --> 00:20:09,679
i don't think we can solve that today

00:20:07,679 --> 00:20:10,559
but that we can accept a design document

00:20:09,679 --> 00:20:12,240
which

00:20:10,559 --> 00:20:14,159
thinks about the different options and

00:20:12,240 --> 00:20:16,559
then we can decide how to move on

00:20:14,159 --> 00:20:18,320
the issue there is that i don't think

00:20:16,559 --> 00:20:21,840
anyone gets 100

00:20:18,320 --> 00:20:21,840
the current behavior right

00:20:22,880 --> 00:20:27,679
yeah i mean it's a very confusing topic

00:20:25,039 --> 00:20:29,679
and um

00:20:27,679 --> 00:20:31,360
yeah if various i mean it's if a

00:20:29,679 --> 00:20:33,120
different semantics requires kind of a

00:20:31,360 --> 00:20:34,000
very different basic design then we

00:20:33,120 --> 00:20:37,120
cannot just make

00:20:34,000 --> 00:20:39,280
it switchable by flag right we need some

00:20:37,120 --> 00:20:41,360
understanding of the semantics we want

00:20:39,280 --> 00:20:45,120
so maybe maybe we start

00:20:41,360 --> 00:20:47,520
by asking the community for

00:20:45,120 --> 00:20:49,440
input on like what are the problems

00:20:47,520 --> 00:20:51,840
you're having with this

00:20:49,440 --> 00:20:53,760
and also can someone actually like

00:20:51,840 --> 00:20:55,520
figure out what exactly is happening

00:20:53,760 --> 00:20:57,760
there

00:20:55,520 --> 00:20:58,799
and that is also a good time to remind

00:20:57,760 --> 00:21:00,640
everyone who's on the call not

00:20:58,799 --> 00:21:03,840
prometheus team that

00:21:00,640 --> 00:21:06,960
you're free to speak at any time so um

00:21:03,840 --> 00:21:10,480
yeah i was gonna add that i think

00:21:06,960 --> 00:21:12,400
like the the two kind of like follow-ups

00:21:10,480 --> 00:21:14,080
make sense but the first one might work

00:21:12,400 --> 00:21:15,600
a little better if you ask how they want

00:21:14,080 --> 00:21:16,720
it to work rather than just what their

00:21:15,600 --> 00:21:19,200
problems are

00:21:16,720 --> 00:21:21,919
if the question is how it should work

00:21:19,200 --> 00:21:21,919
semantically

00:21:22,880 --> 00:21:27,679
right my i suspect that we don't even

00:21:25,679 --> 00:21:29,440
know about all the edge cases that the

00:21:27,679 --> 00:21:32,000
current semantics cause

00:21:29,440 --> 00:21:32,480
um but we can phrase that basically as

00:21:32,000 --> 00:21:36,240
like how

00:21:32,480 --> 00:21:39,280
how would you want it to work um

00:21:36,240 --> 00:21:41,440
and what's different than it is now um

00:21:39,280 --> 00:21:43,919
yeah yeah just like the positive you

00:21:41,440 --> 00:21:45,840
might get more more constructive

00:21:43,919 --> 00:21:47,840
or clear answers than complaining about

00:21:45,840 --> 00:21:49,520
whatever edge case someone hit

00:21:47,840 --> 00:21:51,760
yeah perfect yep that's a really good

00:21:49,520 --> 00:21:51,760
idea

00:21:52,240 --> 00:21:56,240
yeah i mean would i guess what we could

00:21:54,880 --> 00:21:58,559
end up with is just kind of

00:21:56,240 --> 00:22:00,000
a statement or feature request and

00:21:58,559 --> 00:22:03,120
problems and then

00:22:00,000 --> 00:22:04,960
someone has to go from there and see if

00:22:03,120 --> 00:22:07,200
there's a solution that can satisfy all

00:22:04,960 --> 00:22:07,200
of that

00:22:07,919 --> 00:22:11,440
yeah but i think at the moment we don't

00:22:09,600 --> 00:22:14,640
have

00:22:11,440 --> 00:22:16,080
enough of a view of what actually is

00:22:14,640 --> 00:22:19,200
going on

00:22:16,080 --> 00:22:20,159
and what are what the needs are to

00:22:19,200 --> 00:22:21,520
really say

00:22:20,159 --> 00:22:23,600
like i don't feel like we have a

00:22:21,520 --> 00:22:26,240
coherent picture of

00:22:23,600 --> 00:22:28,000
this is what it's like right now and

00:22:26,240 --> 00:22:31,360
without that we can't really say

00:22:28,000 --> 00:22:31,360
what it how it should be changed

00:22:31,520 --> 00:22:35,120
but this is something that i think we

00:22:32,960 --> 00:22:36,880
can farm out

00:22:35,120 --> 00:22:38,559
to the community as well we don't have

00:22:36,880 --> 00:22:41,840
to do everything ourselves

00:22:38,559 --> 00:22:41,840
to some extent

00:22:44,480 --> 00:22:54,960
okay so step one use a survey step two

00:22:47,600 --> 00:22:56,880
find out how feasible that is

00:22:54,960 --> 00:22:58,080
yeah i mean i mean we can do the usual

00:22:56,880 --> 00:23:01,280
dance very

00:22:58,080 --> 00:23:05,120
or usual but where we just

00:23:01,280 --> 00:23:08,240
put out a relatively empty design dock

00:23:05,120 --> 00:23:11,840
and just see what

00:23:08,240 --> 00:23:13,440
people actually write in as as whatever

00:23:11,840 --> 00:23:17,120
their concerns are

00:23:13,440 --> 00:23:17,120
or approaches or just anything

00:23:20,640 --> 00:23:37,840
so for the consensus um

00:23:47,919 --> 00:23:55,440
and i would take out uh in in line with

00:23:51,360 --> 00:23:58,880
uh anton's comment i would take out the

00:23:55,440 --> 00:24:01,919
current pain points and just um

00:23:58,880 --> 00:24:03,679
just leave in desired behavior i think

00:24:01,919 --> 00:24:06,240
collecting them

00:24:03,679 --> 00:24:06,880
makes sense it doesn't mean that we need

00:24:06,240 --> 00:24:09,520
to address

00:24:06,880 --> 00:24:11,600
everything it doesn't mean that we need

00:24:09,520 --> 00:24:14,320
to agree with everything

00:24:11,600 --> 00:24:14,960
but i i would much rather collect more

00:24:14,320 --> 00:24:17,600
feedback

00:24:14,960 --> 00:24:19,200
rather than less because we can always

00:24:17,600 --> 00:24:20,000
do the rough consensus thing where we

00:24:19,200 --> 00:24:22,240
say okay

00:24:20,000 --> 00:24:23,360
this has been considered but we we

00:24:22,240 --> 00:24:25,200
disagree

00:24:23,360 --> 00:24:26,480
and we just don't want to deal with this

00:24:25,200 --> 00:24:28,080
or we we don't want to

00:24:26,480 --> 00:24:30,159
take this approach or we don't think it

00:24:28,080 --> 00:24:31,120
is a pain point but i think at least

00:24:30,159 --> 00:24:34,799
collecting it

00:24:31,120 --> 00:24:38,400
without making any promises of fixing it

00:24:34,799 --> 00:24:38,400
would would make sense

00:24:43,039 --> 00:24:49,120
is that fair materials yeah okay

00:24:46,320 --> 00:24:50,080
yeah i think it makes things because uh

00:24:49,120 --> 00:24:51,919
some

00:24:50,080 --> 00:24:53,840
way people want it to work might not be

00:24:51,919 --> 00:24:55,760
something we can do support idea and

00:24:53,840 --> 00:24:57,440
information so i get

00:24:55,760 --> 00:24:59,600
getting more feedback at the first place

00:24:57,440 --> 00:25:00,559
i remember some users who wanted to send

00:24:59,600 --> 00:25:02,480
like

00:25:00,559 --> 00:25:04,240
hours below one second that kind of

00:25:02,480 --> 00:25:07,279
things and don't think that

00:25:04,240 --> 00:25:08,240
um this is something we should for

00:25:07,279 --> 00:25:11,760
example address

00:25:08,240 --> 00:25:13,600
directly but i mean it's also

00:25:11,760 --> 00:25:15,360
interesting to have a survey of

00:25:13,600 --> 00:25:17,840
like what what is it that people want

00:25:15,360 --> 00:25:21,360
right and where is the intersection with

00:25:17,840 --> 00:25:21,360
what's reasonable for us to do

00:25:25,279 --> 00:25:31,200
so um consensus and

00:25:28,720 --> 00:25:32,159
just to um for this that's the only part

00:25:31,200 --> 00:25:33,840
where ideally only

00:25:32,159 --> 00:25:35,760
a prometheus team raised their voices in

00:25:33,840 --> 00:25:39,360
their hands so it's easier for for me to

00:25:35,760 --> 00:25:40,880
to see um consensus we will create a

00:25:39,360 --> 00:25:43,600
document for the community collect

00:25:40,880 --> 00:25:47,039
current pain points and decide behavior

00:25:43,600 --> 00:25:47,039
all agreed anyone disagreeing

00:25:47,919 --> 00:25:53,200
very good tom i don't know if you

00:25:51,440 --> 00:25:56,320
noticed but josh joined so

00:25:53,200 --> 00:25:59,039
if you want to jump back we can or we

00:25:56,320 --> 00:25:59,039
can just move on

00:26:00,880 --> 00:26:05,600
i i just for josh's um

00:26:04,159 --> 00:26:07,840
josh's interest we were just talking

00:26:05,600 --> 00:26:08,480
about whether um whether grafana labs

00:26:07,840 --> 00:26:11,520
would help out

00:26:08,480 --> 00:26:11,840
with maintenance on alert manager and uh

00:26:11,520 --> 00:26:14,000
i

00:26:11,840 --> 00:26:16,480
i you weren't here josh so i wanted you

00:26:14,000 --> 00:26:16,480
to do it all

00:26:18,159 --> 00:26:21,440
right so sorry tom so they'll see the

00:26:20,000 --> 00:26:23,120
last one

00:26:21,440 --> 00:26:25,200
it's probably a joke right yeah it was a

00:26:23,120 --> 00:26:27,120
joke no i just said um

00:26:25,200 --> 00:26:29,120
that you you and your team will be doing

00:26:27,120 --> 00:26:31,039
work on alert manager in the future and

00:26:29,120 --> 00:26:32,640
and hopefully have time to help out

00:26:31,039 --> 00:26:34,320
there and maybe that leads to

00:26:32,640 --> 00:26:36,840
you know maintainership if you if you

00:26:34,320 --> 00:26:39,120
contribute you know maybe it doesn't who

00:26:36,840 --> 00:26:40,320
knows

00:26:39,120 --> 00:26:41,840
yeah i agree i've been trying to

00:26:40,320 --> 00:26:42,480
encourage everyone that makes changes to

00:26:41,840 --> 00:26:44,880
cortex

00:26:42,480 --> 00:26:46,159
um or either and final to just like up

00:26:44,880 --> 00:26:49,360
streaming straight away

00:26:46,159 --> 00:26:50,320
um in hopes that we don't

00:26:49,360 --> 00:26:52,000
leave it for last you know and

00:26:50,320 --> 00:26:53,200
contribute everything back up so

00:26:52,000 --> 00:26:54,240
hopefully i get the bandwidth to work

00:26:53,200 --> 00:26:55,520
more and the other manager in the

00:26:54,240 --> 00:26:57,919
upcoming weeks

00:26:55,520 --> 00:26:58,880
yeah we need one who understands this

00:26:57,919 --> 00:27:02,799
dark art

00:26:58,880 --> 00:27:02,799
of pipelines in the alert manager

00:27:03,279 --> 00:27:07,840
slowly getting there slowly get in there

00:27:08,320 --> 00:27:12,000
um on that topic actually i'm wondering

00:27:10,640 --> 00:27:14,159
if there are ways

00:27:12,000 --> 00:27:15,360
and i think this depends on the

00:27:14,159 --> 00:27:17,679
maintainer of this

00:27:15,360 --> 00:27:18,840
of each project if there are ways that

00:27:17,679 --> 00:27:23,279
we can help

00:27:18,840 --> 00:27:26,080
simon um maintain the alert manager

00:27:23,279 --> 00:27:28,320
um say by helping people work on their

00:27:26,080 --> 00:27:30,080
prs and get them into a good shape

00:27:28,320 --> 00:27:31,440
so that in the end ideally when the

00:27:30,080 --> 00:27:32,559
maintainer comes when the actual

00:27:31,440 --> 00:27:34,000
maintainer comes around

00:27:32,559 --> 00:27:37,679
all they have to do is hit the merge

00:27:34,000 --> 00:27:37,679
button and move on

00:27:38,640 --> 00:27:42,880
but i don't know in what form that would

00:27:40,399 --> 00:27:42,880
be good

00:27:45,679 --> 00:27:49,440
yeah i think i've already got help from

00:27:48,559 --> 00:27:52,000
john

00:27:49,440 --> 00:27:54,399
and julian who are trust to eat the

00:27:52,000 --> 00:27:57,440
medford and if they

00:27:54,399 --> 00:28:00,159
they think the appear pr is

00:27:57,440 --> 00:28:00,159
in a good shape

00:28:00,960 --> 00:28:04,399
although like it feels for me a bit like

00:28:02,960 --> 00:28:07,760
i'm just doing kind of

00:28:04,399 --> 00:28:09,440
when the pain is really i kind of

00:28:07,760 --> 00:28:11,120
i'm a factor always see teammates

00:28:09,440 --> 00:28:11,679
affected and then i try to explorate

00:28:11,120 --> 00:28:14,399
something

00:28:11,679 --> 00:28:16,880
but this is really like so much best

00:28:14,399 --> 00:28:19,200
effort in the worst sense

00:28:16,880 --> 00:28:21,039
and and then i i kind of don't want to

00:28:19,200 --> 00:28:23,440
discourage others by saying oh

00:28:21,039 --> 00:28:24,240
okay someone is already helping i

00:28:23,440 --> 00:28:27,039
actually would

00:28:24,240 --> 00:28:28,880
would like more to to chime in here and

00:28:27,039 --> 00:28:29,200
yeah i mean i think we also need kind of

00:28:28,880 --> 00:28:31,760
the

00:28:29,200 --> 00:28:32,559
the the person in charge eventually even

00:28:31,760 --> 00:28:34,240
if if

00:28:32,559 --> 00:28:35,840
others contribute a lot that would be

00:28:34,240 --> 00:28:38,960
the best thing of course

00:28:35,840 --> 00:28:42,240
but yeah we need more more

00:28:38,960 --> 00:28:42,640
people helping here and and eventually

00:28:42,240 --> 00:28:44,559
we

00:28:42,640 --> 00:28:46,240
need that person who is on top of all of

00:28:44,559 --> 00:28:49,919
things and

00:28:46,240 --> 00:28:52,960
i don't feel i could be that person

00:28:49,919 --> 00:28:52,960
i'm just too confused

00:28:54,000 --> 00:28:58,559
maybe we're mentioning is that gotham is

00:28:56,159 --> 00:29:00,880
here i spoke with gotham this week

00:28:58,559 --> 00:29:02,000
and i believe he also has plan on taking

00:29:00,880 --> 00:29:04,240
a little bit more of care in the alert

00:29:02,000 --> 00:29:08,640
manager

00:29:04,240 --> 00:29:11,120
i mean when i implemented that that

00:29:08,640 --> 00:29:13,039
the the ui would immediately update if

00:29:11,120 --> 00:29:14,799
something gets muted and silenced

00:29:13,039 --> 00:29:16,159
this is when this was the moment when i

00:29:14,799 --> 00:29:18,080
thought i got it right i

00:29:16,159 --> 00:29:19,840
understood how all of this works but

00:29:18,080 --> 00:29:20,159
this is so long ago and i forgot all of

00:29:19,840 --> 00:29:22,080
it

00:29:20,159 --> 00:29:24,000
but i think we need more people who are

00:29:22,080 --> 00:29:26,640
in that state right or they

00:29:24,000 --> 00:29:28,399
or they kind of have a grip on how this

00:29:26,640 --> 00:29:30,559
all works and then they could also give

00:29:28,399 --> 00:29:33,279
good answers for our questions like

00:29:30,559 --> 00:29:36,559
how can we solve those uh muting

00:29:33,279 --> 00:29:39,039
problems and stuff like that

00:29:36,559 --> 00:29:41,120
like you both have the knowledge and the

00:29:39,039 --> 00:29:54,640
capacity to actually act on it

00:29:41,120 --> 00:29:56,799
that would be the the ideal case

00:29:54,640 --> 00:29:58,720
josh you you were supposed to say yes

00:29:56,799 --> 00:30:00,240
you're looking forward to that oh yes

00:29:58,720 --> 00:30:02,159
i i thought i said it before but i

00:30:00,240 --> 00:30:03,760
didn't want to be overredone then yes

00:30:02,159 --> 00:30:05,200
like the problem right now is mostly the

00:30:03,760 --> 00:30:07,039
capacity um

00:30:05,200 --> 00:30:08,320
we're endeavoring big things at grafana

00:30:07,039 --> 00:30:10,399
for the next month

00:30:08,320 --> 00:30:12,720
basically but after that after that

00:30:10,399 --> 00:30:15,200
release we should have some bandwidth to

00:30:12,720 --> 00:30:17,600
contribute a lot more backup a lot more

00:30:15,200 --> 00:30:17,600
backup

00:30:18,559 --> 00:30:22,080
because in this round i believe we have

00:30:20,080 --> 00:30:23,440
acquired a lot of the knowledge and how

00:30:22,080 --> 00:30:23,840
this works in the past two to three

00:30:23,440 --> 00:30:27,200
months

00:30:23,840 --> 00:30:27,200
been exclusively working on that

00:30:28,480 --> 00:30:32,640
ideally we would also find a maintainer

00:30:30,480 --> 00:30:34,000
which is not working on cortex because

00:30:32,640 --> 00:30:37,760
they swapped

00:30:34,000 --> 00:30:40,320
the clustering to implement their own

00:30:37,760 --> 00:30:44,480
so all that part still needs a proper

00:30:40,320 --> 00:30:44,480
maintainer which knows the upstream code

00:30:46,000 --> 00:30:50,480
so we're still reusing some parts of it

00:30:47,919 --> 00:30:52,159
and for the time being the clustering

00:30:50,480 --> 00:30:53,520
the old version of the clustering cortex

00:30:52,159 --> 00:30:56,720
will remain the same

00:30:53,520 --> 00:30:57,600
um we have i don't see everyone moving

00:30:56,720 --> 00:30:59,919
off that

00:30:57,600 --> 00:31:00,799
for the next year at least um because

00:30:59,919 --> 00:31:04,799
it's quite

00:31:00,799 --> 00:31:05,440
a steep change from from one system to

00:31:04,799 --> 00:31:07,360
the other

00:31:05,440 --> 00:31:09,200
so we have some time there and we're

00:31:07,360 --> 00:31:12,000
still using some parts of that

00:31:09,200 --> 00:31:12,000
it's not just all

00:31:12,320 --> 00:31:15,519
because we effectively keep the same

00:31:13,840 --> 00:31:18,320
protocol what we

00:31:15,519 --> 00:31:20,000
replaced is the transfer mechanism so

00:31:18,320 --> 00:31:23,039
the algorithm stays the same it's just

00:31:20,000 --> 00:31:25,519
that we're using grpc instead of

00:31:23,039 --> 00:31:25,519
tcp

00:31:31,760 --> 00:31:35,840
what prevents us from upstreaming that

00:31:37,679 --> 00:31:41,120
like if it's better it's better i mean

00:31:40,080 --> 00:31:43,360
we're using the ring

00:31:41,120 --> 00:31:44,320
um it might be that we want to do that

00:31:43,360 --> 00:31:47,760
in the alert manager

00:31:44,320 --> 00:31:50,159
um for

00:31:47,760 --> 00:31:51,679
given the multi-tenancy nature of cortex

00:31:50,159 --> 00:31:53,279
it's something that we wanted to do

00:31:51,679 --> 00:31:53,840
because every other component uses the

00:31:53,279 --> 00:31:55,360
ring

00:31:53,840 --> 00:31:57,760
but i'm not sure there's like immediate

00:31:55,360 --> 00:32:01,120
benefits for that um

00:31:57,760 --> 00:32:03,519
and it be yeah i'm not sure

00:32:01,120 --> 00:32:05,200
we'll need to investigate on that one to

00:32:03,519 --> 00:32:08,399
see if it's worth upstreaming so

00:32:05,200 --> 00:32:10,720
off the bat i'll say no because most

00:32:08,399 --> 00:32:14,000
people won't care about it

00:32:10,720 --> 00:32:17,440
but there might be benefits in there

00:32:14,000 --> 00:32:19,360
yeah um like we also made

00:32:17,440 --> 00:32:22,080
several trade-offs in the ups like in

00:32:19,360 --> 00:32:25,840
the cortex code that makes

00:32:22,080 --> 00:32:29,120
the api ca rather than ap

00:32:25,840 --> 00:32:30,559
like the alert manager so there's a

00:32:29,120 --> 00:32:31,600
bunch of changes that we made for a

00:32:30,559 --> 00:32:33,279
multi-tenant system

00:32:31,600 --> 00:32:43,840
and a lot of those changes i don't think

00:32:33,279 --> 00:32:43,840
make sense upstream

00:32:50,720 --> 00:32:54,840
okay just check should we move on or

00:32:54,320 --> 00:32:57,840
should we

00:32:54,840 --> 00:33:01,120
keep

00:32:57,840 --> 00:33:01,120
i think we can move on

00:33:01,679 --> 00:33:07,760
so next one is julian prometheus for

00:33:04,880 --> 00:33:07,760
small devices

00:33:07,840 --> 00:33:13,039
yes so um

00:33:10,960 --> 00:33:15,200
we know that there are a lot of users

00:33:13,039 --> 00:33:17,360
which use prometheus and raspberry pi so

00:33:15,200 --> 00:33:21,120
we know that

00:33:17,360 --> 00:33:22,799
and i think that um the

00:33:21,120 --> 00:33:24,720
some of the things that we implemented

00:33:22,799 --> 00:33:26,559
in the last year's go against that

00:33:24,720 --> 00:33:28,399
especially like if you look at the edge

00:33:26,559 --> 00:33:30,720
chunks or the fact that

00:33:28,399 --> 00:33:32,320
we are memory mapping a lot and like

00:33:30,720 --> 00:33:34,640
pre-allocating even

00:33:32,320 --> 00:33:36,480
a lot of things and i think that we

00:33:34,640 --> 00:33:38,240
should

00:33:36,480 --> 00:33:40,399
make some of those behaviors like

00:33:38,240 --> 00:33:42,799
optional so that promoters can continue

00:33:40,399 --> 00:33:44,960
to work on those small devices

00:33:42,799 --> 00:33:46,559
uh especially like not everyone is still

00:33:44,960 --> 00:33:49,679
on arm 64

00:33:46,559 --> 00:33:51,919
on the raspberry pi's the reason why is

00:33:49,679 --> 00:33:54,240
that because i think that

00:33:51,919 --> 00:33:55,279
getting like promises working on those

00:33:54,240 --> 00:33:57,440
devices

00:33:55,279 --> 00:33:58,960
brings us a lot of users that can just

00:33:57,440 --> 00:34:01,120
then bring promoters

00:33:58,960 --> 00:34:02,080
maybe in their companies or in other

00:34:01,120 --> 00:34:04,480
places

00:34:02,080 --> 00:34:06,640
and even like on each devices so i think

00:34:04,480 --> 00:34:09,280
that this is something that we should

00:34:06,640 --> 00:34:10,480
uh work on or at least acceptable

00:34:09,280 --> 00:34:12,800
request to reduce

00:34:10,480 --> 00:34:14,320
like the kind of requirements that you

00:34:12,800 --> 00:34:16,000
need to run promoters

00:34:14,320 --> 00:34:17,760
even if there are traders like

00:34:16,000 --> 00:34:19,839
trade-offs like it will it might be

00:34:17,760 --> 00:34:21,919
slower that kind of things

00:34:19,839 --> 00:34:23,760
which might not matter if you only have

00:34:21,919 --> 00:34:26,079
like 1000 metrics

00:34:23,760 --> 00:34:27,839
so i think that we should like

00:34:26,079 --> 00:34:30,159
officially as a project

00:34:27,839 --> 00:34:32,639
really consider those users and like

00:34:30,159 --> 00:34:34,720
really listen to them when they

00:34:32,639 --> 00:34:37,440
point point after some issues i might

00:34:34,720 --> 00:34:40,720
have with the devices

00:34:37,440 --> 00:34:43,520
could some of these be automatic like

00:34:40,720 --> 00:34:48,000
on 32-bit architectures which is

00:34:43,520 --> 00:34:50,000
compiled in a different implementation

00:34:48,000 --> 00:34:51,679
yes because currently if you if you

00:34:50,000 --> 00:34:54,159
launch promoters

00:34:51,679 --> 00:34:56,399
in 32-bit you get a warning in the

00:34:54,159 --> 00:34:58,000
starting that says hey please switch to

00:34:56,399 --> 00:35:00,079
64-bit

00:34:58,000 --> 00:35:01,599
but it means that we can detect if we

00:35:00,079 --> 00:35:02,160
are in such an architecture and we could

00:35:01,599 --> 00:35:04,400
like

00:35:02,160 --> 00:35:07,760
not preallocate some memory maps that

00:35:04,400 --> 00:35:10,800
kind of things could be done yes

00:35:07,760 --> 00:35:13,599
but before we actually go into

00:35:10,800 --> 00:35:14,720
really some tactical or technical

00:35:13,599 --> 00:35:17,680
implementation

00:35:14,720 --> 00:35:19,119
can you share like how do you think the

00:35:17,680 --> 00:35:22,160
customers are using

00:35:19,119 --> 00:35:22,560
primitives on such devices the reason

00:35:22,160 --> 00:35:25,280
why i'm

00:35:22,560 --> 00:35:27,440
asking that like do they need the whole

00:35:25,280 --> 00:35:29,599
functionality of a primitive server like

00:35:27,440 --> 00:35:32,240
do they run the alert manager on their

00:35:29,599 --> 00:35:33,760
raspberry pi as well or is it more like

00:35:32,240 --> 00:35:35,440
they have a fleet

00:35:33,760 --> 00:35:37,920
of raspberry pi and they need like a

00:35:35,440 --> 00:35:40,640
promote use agent

00:35:37,920 --> 00:35:41,839
this is more like oh why do i need 500

00:35:40,640 --> 00:35:44,320
megabytes on my

00:35:41,839 --> 00:35:45,839
sd card to run promoters because i only

00:35:44,320 --> 00:35:47,200
have 500 metrics

00:35:45,839 --> 00:35:49,760
and the reason is because we've

00:35:47,200 --> 00:35:52,240
reallocated chunks of 250

00:35:49,760 --> 00:35:54,240
i don't know that's what we have seen in

00:35:52,240 --> 00:35:54,960
the issues and that's i think the kind

00:35:54,240 --> 00:35:56,640
of things

00:35:54,960 --> 00:35:58,480
especially the collocation and memory

00:35:56,640 --> 00:36:00,400
mapping our stuff that

00:35:58,480 --> 00:36:02,320
could be optional also maybe like the

00:36:00,400 --> 00:36:03,920
hedgehogs could be optional in

00:36:02,320 --> 00:36:05,520
architecture because we know there are

00:36:03,920 --> 00:36:08,160
limitations uh

00:36:05,520 --> 00:36:09,119
ben proposed that instead we enforce

00:36:08,160 --> 00:36:11,839
like

00:36:09,119 --> 00:36:13,440
a certain retention on those devices so

00:36:11,839 --> 00:36:15,520
that you could not

00:36:13,440 --> 00:36:17,119
make point issued itself in the foot by

00:36:15,520 --> 00:36:18,560
saying hey i want to keep two years of

00:36:17,119 --> 00:36:20,320
data that kind of things

00:36:18,560 --> 00:36:21,760
which might be also an option but i

00:36:20,320 --> 00:36:22,640
think that we should actually consider

00:36:21,760 --> 00:36:24,720
this user

00:36:22,640 --> 00:36:26,079
to answer your question those users are

00:36:24,720 --> 00:36:28,320
really like i think

00:36:26,079 --> 00:36:30,240
just monitoring how the raspberry pi is

00:36:28,320 --> 00:36:32,480
going and yes they need

00:36:30,240 --> 00:36:33,440
krafena they need prometheus i don't

00:36:32,480 --> 00:36:35,520
know if they use

00:36:33,440 --> 00:36:36,720
alex manager but i have even some

00:36:35,520 --> 00:36:38,400
colleagues who just run

00:36:36,720 --> 00:36:40,720
a pi to check their internet

00:36:38,400 --> 00:36:42,640
connectivity that kind of things

00:36:40,720 --> 00:36:44,240
that's what i see so it's not like big

00:36:42,640 --> 00:36:46,400
users but the fact that

00:36:44,240 --> 00:36:47,440
those users are able to run promoters

00:36:46,400 --> 00:36:51,119
seamlessly

00:36:47,440 --> 00:36:53,599
i think is beneficial for the project

00:36:51,119 --> 00:36:55,440
and will then bring us more enterprise

00:36:53,599 --> 00:36:58,320
usage at the end

00:36:55,440 --> 00:36:59,280
um and i mean there's also the effect

00:36:58,320 --> 00:37:02,240
that

00:36:59,280 --> 00:37:03,200
to some extent you can't use prometheus

00:37:02,240 --> 00:37:06,800
in

00:37:03,200 --> 00:37:08,480
small edge devices so people don't right

00:37:06,800 --> 00:37:11,200
so there is i think there is a large

00:37:08,480 --> 00:37:13,200
class of potential applications

00:37:11,200 --> 00:37:15,040
that are just not even being explored

00:37:13,200 --> 00:37:15,920
right now because everybody knows that

00:37:15,040 --> 00:37:18,400
you need

00:37:15,920 --> 00:37:19,520
a lot of memory to run prometheus in a

00:37:18,400 --> 00:37:21,359
lot of this

00:37:19,520 --> 00:37:23,839
and you just don't have that on your

00:37:21,359 --> 00:37:26,000
fridge but there is no reason

00:37:23,839 --> 00:37:28,720
your fridge couldn't implement its

00:37:26,000 --> 00:37:30,400
temperature graph with prometheus

00:37:28,720 --> 00:37:32,800
yeah i think there are a lot of iot huge

00:37:30,400 --> 00:37:34,560
cases use cases of the footprint smaller

00:37:32,800 --> 00:37:37,839
that probably

00:37:34,560 --> 00:37:39,920
people are trying to you know

00:37:37,839 --> 00:37:41,599
shove it hard enough to make it fit with

00:37:39,920 --> 00:37:44,160
what they can tune now or just using

00:37:41,599 --> 00:37:44,160
something else

00:37:44,480 --> 00:37:47,520
yeah i mean i think this prometheus

00:37:46,320 --> 00:37:51,119
starts up and just puts

00:37:47,520 --> 00:37:52,160
a few giant giant finals on your your

00:37:51,119 --> 00:37:54,720
your disc

00:37:52,160 --> 00:37:56,079
that's something we could probably tweak

00:37:54,720 --> 00:37:58,240
pretty easily right

00:37:56,079 --> 00:37:59,920
the the whole mapping thing i think

00:37:58,240 --> 00:38:00,800
that's pretty deeply backed in i

00:37:59,920 --> 00:38:02,480
remember this

00:38:00,800 --> 00:38:04,320
this was one of the few things i

00:38:02,480 --> 00:38:05,119
actually discussed with fabian about the

00:38:04,320 --> 00:38:07,920
storage

00:38:05,119 --> 00:38:08,480
and the his statement was essentially we

00:38:07,920 --> 00:38:11,839
don't care

00:38:08,480 --> 00:38:14,000
about 32-bit uses which is kind of a bit

00:38:11,839 --> 00:38:14,640
sad but i also understand how how weird

00:38:14,000 --> 00:38:17,760
it would

00:38:14,640 --> 00:38:19,359
become if we had done this but

00:38:17,760 --> 00:38:21,200
on the other hand if you have a tiny

00:38:19,359 --> 00:38:22,800
disc and and the disc is actually

00:38:21,200 --> 00:38:24,960
smaller than like two gig then you

00:38:22,800 --> 00:38:27,359
probably also don't need to end that

00:38:24,960 --> 00:38:28,960
uh like it might actually work out but

00:38:27,359 --> 00:38:32,560
then you still don't want to

00:38:28,960 --> 00:38:34,720
like pre-allocate gigantic

00:38:32,560 --> 00:38:37,200
chunks in the in the wall and everything

00:38:34,720 --> 00:38:39,040
which you will never use

00:38:37,200 --> 00:38:40,560
so one part i think it's easy and the

00:38:39,040 --> 00:38:43,920
other part we'll we'll

00:38:40,560 --> 00:38:46,400
have to see how that works out

00:38:43,920 --> 00:38:47,040
i think you need to split this out a

00:38:46,400 --> 00:38:50,720
little bit

00:38:47,040 --> 00:38:52,960
uh 32 bits i don't know how much

00:38:50,720 --> 00:38:54,400
how much impact this would have on on

00:38:52,960 --> 00:38:57,359
the actual core users

00:38:54,400 --> 00:38:59,359
of prometheus but supporting just

00:38:57,359 --> 00:39:03,280
smaller devices

00:38:59,359 --> 00:39:04,160
seems almost obvious that it's it's a

00:39:03,280 --> 00:39:06,000
good thing

00:39:04,160 --> 00:39:07,920
you can also see this from from the

00:39:06,000 --> 00:39:11,119
perspective of an agent with

00:39:07,920 --> 00:39:13,920
with a little bit more uh functionality

00:39:11,119 --> 00:39:15,599
than just the agent thing which is very

00:39:13,920 --> 00:39:19,760
much an iot and edge

00:39:15,599 --> 00:39:22,560
case or use case as richard just said

00:39:19,760 --> 00:39:23,200
i just checked uh everything raspberry

00:39:22,560 --> 00:39:26,640
pi 3

00:39:23,200 --> 00:39:28,320
and 4 they support rm64

00:39:26,640 --> 00:39:30,800
so i think it would be fair to say that

00:39:28,320 --> 00:39:31,280
we just don't support raspberry pi 1 and

00:39:30,800 --> 00:39:34,400
00:39:31,280 --> 00:39:36,160
which are the 32-bit versions but

00:39:34,400 --> 00:39:43,280
to just make it possible to run on

00:39:36,160 --> 00:39:45,480
really tiny machines mean i wonder if

00:39:43,280 --> 00:39:46,720
like that's where i do wonder if the

00:39:45,480 --> 00:39:49,760
32-bit

00:39:46,720 --> 00:39:51,520
restriction is it fundamental right or

00:39:49,760 --> 00:39:54,079
could we build

00:39:51,520 --> 00:39:56,000
um like could we abstract things enough

00:39:54,079 --> 00:39:59,680
that you can do it with a map or

00:39:56,000 --> 00:40:00,640
with file open and see even if seeking

00:39:59,680 --> 00:40:03,760
around is

00:40:00,640 --> 00:40:06,720
a slower interface it's uh

00:40:03,760 --> 00:40:08,240
it's a lot of work like um i've had a

00:40:06,720 --> 00:40:09,119
look at it mainly because of like you

00:40:08,240 --> 00:40:11,280
know

00:40:09,119 --> 00:40:12,400
not just it's quite hard to map files

00:40:11,280 --> 00:40:14,400
from s3 so

00:40:12,400 --> 00:40:16,240
it's not just for the 32-bit use case

00:40:14,400 --> 00:40:17,280
and it's a hell of a lot of work to

00:40:16,240 --> 00:40:19,119
properly

00:40:17,280 --> 00:40:20,480
uh abstract this away that being said

00:40:19,119 --> 00:40:23,200
it's something i'd love to do if i ever

00:40:20,480 --> 00:40:25,280
have time but

00:40:23,200 --> 00:40:26,480
if someone came around and said here is

00:40:25,280 --> 00:40:29,920
my like

00:40:26,480 --> 00:40:33,520
storage rm60 arm32.go

00:40:29,920 --> 00:40:36,480
um can we like would we accept it or

00:40:33,520 --> 00:40:38,960
would we say no we don't do 32-bit

00:40:36,480 --> 00:40:39,839
i mean it kind of works if you use it as

00:40:38,960 --> 00:40:41,440
long as you don't

00:40:39,839 --> 00:40:43,200
like trying to map too much stuff like

00:40:41,440 --> 00:40:46,400
it fails pretty quickly

00:40:43,200 --> 00:40:48,480
um like the the amount of work to make

00:40:46,400 --> 00:40:49,920
it like properly swappable out is is a

00:40:48,480 --> 00:40:50,720
huge amount but if someone was willing

00:40:49,920 --> 00:40:53,040
to do it and

00:40:50,720 --> 00:40:54,880
we thought the code was decent quality i

00:40:53,040 --> 00:40:57,839
think we should encourage that

00:40:54,880 --> 00:40:59,599
there's also though the knock-on impact

00:40:57,839 --> 00:41:02,319
of that of that's a whole

00:40:59,599 --> 00:41:03,760
different set of use cases that need to

00:41:02,319 --> 00:41:04,480
be tested for and stuff because there's

00:41:03,760 --> 00:41:06,560
no point

00:41:04,480 --> 00:41:07,680
adding all that in and then in six

00:41:06,560 --> 00:41:08,960
months time it doesn't work because

00:41:07,680 --> 00:41:12,000
nobody's maintained it because

00:41:08,960 --> 00:41:15,119
nobody uses it from the core team yeah

00:41:12,000 --> 00:41:15,920
i mean another approach that would that

00:41:15,119 --> 00:41:19,520
might work

00:41:15,920 --> 00:41:20,319
is what happened with kubernetes and k3s

00:41:19,520 --> 00:41:22,720
where

00:41:20,319 --> 00:41:23,760
there is essentially a fork that is

00:41:22,720 --> 00:41:26,400
optimized for

00:41:23,760 --> 00:41:28,160
small devices that strips out some of

00:41:26,400 --> 00:41:30,560
the very expensive stuff

00:41:28,160 --> 00:41:32,000
that replaces the storage implementation

00:41:30,560 --> 00:41:34,560
with something that's just

00:41:32,000 --> 00:41:35,839
easier to deal with and and works on

00:41:34,560 --> 00:41:38,720
smaller devices

00:41:35,839 --> 00:41:39,839
but it's a separate like at its root a

00:41:38,720 --> 00:41:41,760
separate code base

00:41:39,839 --> 00:41:43,599
i don't know how feasible that would be

00:41:41,760 --> 00:41:46,079
at the moment but

00:41:43,599 --> 00:41:47,119
we don't need to decide this i i think

00:41:46,079 --> 00:41:49,920
if we just

00:41:47,119 --> 00:41:52,079
say publicly that we would accept this

00:41:49,920 --> 00:41:53,839
and either accept it as a modification

00:41:52,079 --> 00:41:55,359
to a normal prometheus or give it a

00:41:53,839 --> 00:41:57,359
place in prometheus or

00:41:55,359 --> 00:41:59,760
prometheus community get about github

00:41:57,359 --> 00:42:02,880
orgs that should already be enough for

00:41:59,760 --> 00:42:04,960
someone who wants to carry that

00:42:02,880 --> 00:42:07,359
to to have a place to carry it while not

00:42:04,960 --> 00:42:11,520
impacting uh prometheus prometheus

00:42:07,359 --> 00:42:13,760
yeah and i mean i think also in um

00:42:11,520 --> 00:42:16,400
being mindful about how much we

00:42:13,760 --> 00:42:19,599
pre-allocate and how much space

00:42:16,400 --> 00:42:22,480
and memory we gobble up just

00:42:19,599 --> 00:42:24,079
just for starting the server is a good

00:42:22,480 --> 00:42:26,800
thing in general i mean

00:42:24,079 --> 00:42:29,440
soundcloud is on the way to running

00:42:26,800 --> 00:42:32,960
basically one prometheus server per app

00:42:29,440 --> 00:42:34,800
per region per environment and there are

00:42:32,960 --> 00:42:36,319
going to be some that have like 50

00:42:34,800 --> 00:42:39,119
megabytes of data

00:42:36,319 --> 00:42:40,000
right and i mean yes storage is not that

00:42:39,119 --> 00:42:42,319
expensive

00:42:40,000 --> 00:42:43,440
but if we just pre-allocate 10 times as

00:42:42,319 --> 00:42:45,680
much

00:42:43,440 --> 00:42:48,160
just because that's kind of a waste as

00:42:45,680 --> 00:42:49,359
well yeah yeah i like that a lot like i

00:42:48,160 --> 00:42:51,599
was always

00:42:49,359 --> 00:42:53,839
like whenever we started with kubernetes

00:42:51,599 --> 00:42:55,599
long ago i thought we should have micro

00:42:53,839 --> 00:42:57,760
pro meteorites

00:42:55,599 --> 00:42:59,599
that that can just run in very small and

00:42:57,760 --> 00:43:00,880
that is kind of the same thing to

00:42:59,599 --> 00:43:04,079
optimize for i think

00:43:00,880 --> 00:43:06,480
there are a lot of easy gains but like

00:43:04,079 --> 00:43:07,599
just rewriting the storage completely do

00:43:06,480 --> 00:43:09,760
not need to

00:43:07,599 --> 00:43:11,680
unmap the whole storage will be very

00:43:09,760 --> 00:43:14,160
invasive and i'm not sure if we could

00:43:11,680 --> 00:43:14,720
maintain that feasibly in parallel i

00:43:14,160 --> 00:43:17,280
mean it's

00:43:14,720 --> 00:43:19,200
there was in the early stages uh the

00:43:17,280 --> 00:43:22,000
prometheus ii storage had

00:43:19,200 --> 00:43:23,760
uh the idea that you would only map the

00:43:22,000 --> 00:43:26,240
blocks that you're actually using

00:43:23,760 --> 00:43:27,359
but if you because you have one block

00:43:26,240 --> 00:43:30,079
per time right

00:43:27,359 --> 00:43:32,079
for everything if you just access a a

00:43:30,079 --> 00:43:32,319
single time series over 15 days you have

00:43:32,079 --> 00:43:35,359
to

00:43:32,319 --> 00:43:36,720
unmap the whole storage period right and

00:43:35,359 --> 00:43:39,760
that would be pretty deep

00:43:36,720 --> 00:43:42,800
uh it'd be pretty invasive redesigned to

00:43:39,760 --> 00:43:44,960
to to break this up um

00:43:42,800 --> 00:43:46,960
so yeah i'm not sure if there's an easy

00:43:44,960 --> 00:43:48,960
way out of that but

00:43:46,960 --> 00:43:51,599
that doesn't prevent us from from uh

00:43:48,960 --> 00:43:54,160
leveraging easy gains here

00:43:51,599 --> 00:43:57,200
64 bit it would be great to have like a

00:43:54,160 --> 00:43:59,760
whatever 20 megabyte prometheus

00:43:57,200 --> 00:44:00,560
i mean it's even if we as long as we say

00:43:59,760 --> 00:44:03,920
do we want

00:44:00,560 --> 00:44:05,200
like here like we want to support this

00:44:03,920 --> 00:44:06,960
direction

00:44:05,200 --> 00:44:08,960
and here are the things we know about

00:44:06,960 --> 00:44:11,040
are problematic

00:44:08,960 --> 00:44:23,839
other people can say is it worth for

00:44:11,040 --> 00:44:23,839
them to do the work of fixing those

00:44:26,720 --> 00:44:33,920
so as i

00:44:30,880 --> 00:44:36,319
i think there is consensus on two points

00:44:33,920 --> 00:44:39,599
that a we want to support small devices

00:44:36,319 --> 00:44:40,880
as long as they're 64-bit and the other

00:44:39,599 --> 00:44:42,800
that if someone

00:44:40,880 --> 00:44:44,480
is actually willing to do the work to to

00:44:42,800 --> 00:44:47,040
create a p3s

00:44:44,480 --> 00:44:49,280
um that we will find them a place in our

00:44:47,040 --> 00:44:52,000
github org and

00:44:49,280 --> 00:44:54,160
they can they can just do the work uh

00:44:52,000 --> 00:44:58,240
there and and have it blessed officially

00:44:54,160 --> 00:44:58,240
as long as they actually do the work

00:44:58,800 --> 00:45:02,240
what i would also say that if we if we

00:45:01,920 --> 00:45:05,839
can

00:45:02,240 --> 00:45:10,319
implement like non-invasive tweaks

00:45:05,839 --> 00:45:12,240
that ideally automatically uh

00:45:10,319 --> 00:45:14,240
just just don't assume every single

00:45:12,240 --> 00:45:16,480
prometheus is a huge server

00:45:14,240 --> 00:45:18,079
like if we have a reason to realize this

00:45:16,480 --> 00:45:18,800
is a server that hosts a thousand

00:45:18,079 --> 00:45:21,680
metrics

00:45:18,800 --> 00:45:23,440
over a three day retention period then

00:45:21,680 --> 00:45:26,960
it just thinks that they don't need half

00:45:23,440 --> 00:45:30,160
a gig of disk space for that

00:45:26,960 --> 00:45:32,240
but this are you saying that

00:45:30,160 --> 00:45:34,800
this potential use case would have

00:45:32,240 --> 00:45:37,760
64-bit

00:45:34,800 --> 00:45:38,160
this could be like the the case of just

00:45:37,760 --> 00:45:39,920
have

00:45:38,160 --> 00:45:42,160
tons of micropromethias on your

00:45:39,920 --> 00:45:44,400
kubernetes cluster would be a 64-bit use

00:45:42,160 --> 00:45:46,079
case without iot without all of that

00:45:44,400 --> 00:45:47,520
and we would still want to have like

00:45:46,079 --> 00:45:49,599
smaller

00:45:47,520 --> 00:45:50,560
a way to make prometheus smaller like

00:45:49,599 --> 00:45:51,680
scale

00:45:50,560 --> 00:45:54,160
into the other direction right

00:45:51,680 --> 00:45:57,280
prometheus doesn't scale

00:45:54,160 --> 00:46:00,079
it also applies to the other direction

00:45:57,280 --> 00:46:02,000
and and i think this is like synergizes

00:46:00,079 --> 00:46:06,160
to use the word with all the other

00:46:02,000 --> 00:46:08,640
things here okay

00:46:06,160 --> 00:46:09,920
then let me rephrase to 64-bit machines

00:46:08,640 --> 00:46:12,960
because i think that would

00:46:09,920 --> 00:46:12,960
then cover your

00:46:13,599 --> 00:46:19,520
your proposal correct yeah i mean small

00:46:17,920 --> 00:46:21,839
small use cases i don't know if it has

00:46:19,520 --> 00:46:24,480
three machines but

00:46:21,839 --> 00:46:25,359
yeah i mean i mean i i wonder like

00:46:24,480 --> 00:46:28,319
should we

00:46:25,359 --> 00:46:29,040
like yes making 32-bit work well with

00:46:28,319 --> 00:46:31,280
like large

00:46:29,040 --> 00:46:32,800
with large amounts of data would be a

00:46:31,280 --> 00:46:34,880
lot more work

00:46:32,800 --> 00:46:37,359
but does that mean we need to exclude it

00:46:34,880 --> 00:46:37,359
right away

00:46:38,319 --> 00:46:43,200
no no i just i mean i only want to raise

00:46:41,119 --> 00:46:44,480
the concern if it's a super invasive

00:46:43,200 --> 00:46:46,720
storage rewrite

00:46:44,480 --> 00:46:48,240
it might be difficult to maintain in

00:46:46,720 --> 00:46:50,160
parallel or even

00:46:48,240 --> 00:46:51,680
like it might be additional overhead to

00:46:50,160 --> 00:46:55,520
just have this

00:46:51,680 --> 00:46:58,720
pluggability essentially um yeah

00:46:55,520 --> 00:46:59,200
but yeah it's not not a no we can't do

00:46:58,720 --> 00:47:02,640
this

00:46:59,200 --> 00:47:06,160
it's just it there are concerns

00:47:02,640 --> 00:47:07,520
and caveats i mean for right now as we

00:47:06,160 --> 00:47:10,319
don't have anyone who

00:47:07,520 --> 00:47:10,880
who's stepping up to do it the materials

00:47:10,319 --> 00:47:12,160
you can

00:47:10,880 --> 00:47:13,920
your comment seems to be largely

00:47:12,160 --> 00:47:16,480
theoretical so

00:47:13,920 --> 00:47:18,000
uh having a positive consensus about

00:47:16,480 --> 00:47:20,960
what we want to support

00:47:18,000 --> 00:47:21,680
and not shutting down anything else is

00:47:20,960 --> 00:47:24,960
okay

00:47:21,680 --> 00:47:25,920
okay so let's try this consensus we want

00:47:24,960 --> 00:47:29,760
to support small

00:47:25,920 --> 00:47:33,119
64-bit devices machines etc

00:47:29,760 --> 00:47:33,119
all agreed anyone disagreeing

00:47:36,839 --> 00:47:40,720
okay

00:47:38,240 --> 00:47:41,599
and consensus we will give a potential

00:47:40,720 --> 00:47:43,359
p3s

00:47:41,599 --> 00:47:46,480
space in our github orgs if someone

00:47:43,359 --> 00:47:46,480
steps up to do the work

00:47:47,760 --> 00:47:52,400
i i mean i know i said it and i brought

00:47:50,559 --> 00:47:55,760
it up initially i

00:47:52,400 --> 00:47:57,280
honestly wouldn't put it out there just

00:47:55,760 --> 00:47:59,440
yet

00:47:57,280 --> 00:48:01,119
um i would like to like tactically i

00:47:59,440 --> 00:48:03,520
would rather see

00:48:01,119 --> 00:48:05,200
how far we get with prometheus

00:48:03,520 --> 00:48:08,480
prometheus

00:48:05,200 --> 00:48:12,400
um and i mean k-3s

00:48:08,480 --> 00:48:14,319
is also outside of the core kubernetes

00:48:12,400 --> 00:48:17,680
because kubernetes decided that this

00:48:14,319 --> 00:48:19,520
isn't the direction they want to go in

00:48:17,680 --> 00:48:21,200
which is precisely why i said that we

00:48:19,520 --> 00:48:22,000
would give them space in our orc to

00:48:21,200 --> 00:48:25,119
avoid

00:48:22,000 --> 00:48:26,079
this divergence i mean we can we can

00:48:25,119 --> 00:48:28,079
shove in a

00:48:26,079 --> 00:48:30,720
third consensus in between that if we

00:48:28,079 --> 00:48:33,200
find out that supporting 32-bits

00:48:30,720 --> 00:48:34,960
is is is easy we just do it and

00:48:33,200 --> 00:48:37,200
prometheus prometheus

00:48:34,960 --> 00:48:38,079
that sin that didn't sound to me as such

00:48:37,200 --> 00:48:40,480
but we

00:48:38,079 --> 00:48:42,079
like if you want we can also have a call

00:48:40,480 --> 00:48:44,559
for consensus on that one

00:48:42,079 --> 00:48:45,359
but he is the second consensus only

00:48:44,559 --> 00:48:48,480
about

00:48:45,359 --> 00:48:50,960
32-bit so

00:48:48,480 --> 00:48:54,000
the second consensus it's not about 32

00:48:50,960 --> 00:48:54,000
bits either right

00:48:55,200 --> 00:48:59,040
yes i need to write this actually that's

00:48:57,280 --> 00:49:02,319
a good point

00:48:59,040 --> 00:49:05,280
okay now it's clearer for me

00:49:02,319 --> 00:49:07,440
okay my intention here was to was to

00:49:05,280 --> 00:49:10,079
basically split out the decision

00:49:07,440 --> 00:49:16,319
of of small devices from the orthogonal

00:49:10,079 --> 00:49:19,599
consideration of 32-bit devices

00:49:16,319 --> 00:49:22,720
yeah i mean i'm just wondering if um

00:49:19,599 --> 00:49:27,839
if we are doing ourselves a favor

00:49:22,720 --> 00:49:27,839
by basically saying like fork it

00:49:28,480 --> 00:49:32,000
i don't think we need the second

00:49:29,920 --> 00:49:35,520
consensus

00:49:32,000 --> 00:49:37,520
okay now we can also delete it i mean uh

00:49:35,520 --> 00:49:39,760
at least this this formulation didn't

00:49:37,520 --> 00:49:39,760
find

00:49:39,920 --> 00:49:43,440
didn't find any supporters anyway or not

00:49:42,400 --> 00:49:47,440
enough or not

00:49:43,440 --> 00:49:47,440
clear so let's just try

00:49:48,960 --> 00:49:53,280
if this gets accepted and if not we just

00:49:56,839 --> 00:49:59,839
completed

00:50:04,720 --> 00:50:10,960
um i mean we should we should be more um

00:50:08,800 --> 00:50:15,440
this is here from the north no i think

00:50:10,960 --> 00:50:15,440
we should be clear what we mean with p3s

00:50:16,000 --> 00:50:20,240
also fair uh but let's let's get in

00:50:18,720 --> 00:50:21,680
tension first because if we don't find

00:50:20,240 --> 00:50:23,839
consensus on the intention then we don't

00:50:21,680 --> 00:50:25,680
have to document it

00:50:23,839 --> 00:50:28,720
so let's first try this one we want to

00:50:25,680 --> 00:50:31,760
support 32-bit devices machines etc

00:50:28,720 --> 00:50:34,000
if possible or if

00:50:31,760 --> 00:50:36,960
yeah possible is a big word right yeah

00:50:34,000 --> 00:50:36,960
if low effort

00:50:37,839 --> 00:50:44,640
if it

00:50:40,880 --> 00:50:44,640
if it turns

00:50:45,599 --> 00:50:49,680
consensus we want to support 32-bit

00:50:47,599 --> 00:50:50,160
devices machines etc if it turns out to

00:50:49,680 --> 00:50:55,839
be

00:50:50,160 --> 00:50:55,839
low effort and does not impact mainline

00:50:57,920 --> 00:51:01,599
no okay let's just delete everything and

00:51:00,880 --> 00:51:05,280
we

00:51:01,599 --> 00:51:08,319
have one consensus i mean i i like

00:51:05,280 --> 00:51:09,760
that we express that we don't just say

00:51:08,319 --> 00:51:12,160
no to 32-bit

00:51:09,760 --> 00:51:13,839
right we it's not the reason like we

00:51:12,160 --> 00:51:15,359
don't care about 32-bit users

00:51:13,839 --> 00:51:16,720
that's not the message we want to send

00:51:15,359 --> 00:51:17,599
but we also don't want to send the

00:51:16,720 --> 00:51:19,599
message

00:51:17,599 --> 00:51:21,839
yes let's rewrite the story so it works

00:51:19,599 --> 00:51:24,800
well with 32-bit again

00:51:21,839 --> 00:51:25,599
so essentially if somebody comes along

00:51:24,800 --> 00:51:27,680
with apr

00:51:25,599 --> 00:51:30,160
that just adds a flag if you set this

00:51:27,680 --> 00:51:31,520
you only allocate five megabyte note 500

00:51:30,160 --> 00:51:33,680
on startup

00:51:31,520 --> 00:51:35,920
we would not be opposed right if that's

00:51:33,680 --> 00:51:36,480
like not a non-invasive change that's

00:51:35,920 --> 00:51:39,599
kind of

00:51:36,480 --> 00:51:43,359
the message i would like to see but yeah

00:51:39,599 --> 00:51:45,440
to say please focus and create p3s yay

00:51:43,359 --> 00:51:47,440
uh it's probably not the right message

00:51:45,440 --> 00:51:49,200
to send even if

00:51:47,440 --> 00:51:51,839
if it's really needed we might still

00:51:49,200 --> 00:51:51,839
discuss it

00:51:56,000 --> 00:51:59,599
so if we tag on a sentence of this would

00:51:58,079 --> 00:52:00,240
need to be discussed in a design

00:51:59,599 --> 00:52:04,160
document

00:52:00,240 --> 00:52:05,839
and need working code

00:52:04,160 --> 00:52:07,280
is this going where you want to go or do

00:52:05,839 --> 00:52:09,040
you want to propose no

00:52:07,280 --> 00:52:10,640
i mean somebody could re-implement the

00:52:09,040 --> 00:52:12,960
store the storage and say this is

00:52:10,640 --> 00:52:14,960
working code and we might then say

00:52:12,960 --> 00:52:16,400
no that's not what we wanted i mean i'm

00:52:14,960 --> 00:52:18,079
more into

00:52:16,400 --> 00:52:20,720
if if there's something that is

00:52:18,079 --> 00:52:23,119
essentially non-invasive and easy to

00:52:20,720 --> 00:52:25,680
just have in the code base without

00:52:23,119 --> 00:52:29,359
slowing down the the work on on the

00:52:25,680 --> 00:52:32,000
regular use cases that's fine right

00:52:29,359 --> 00:52:34,000
but rewriting the storage mainly driven

00:52:32,000 --> 00:52:36,160
by the desire to support 32-bit will not

00:52:34,000 --> 00:52:39,440
be fine

00:52:36,160 --> 00:52:41,119
for the forking option people have that

00:52:39,440 --> 00:52:43,520
option today anyway

00:52:41,119 --> 00:52:45,119
so is it even worth sort of having a

00:52:43,520 --> 00:52:47,280
consensus at this point

00:52:45,119 --> 00:52:49,920
if in the future somebody does do that

00:52:47,280 --> 00:52:52,000
then there's a discussion about whether

00:52:49,920 --> 00:52:54,000
a they would want it in the prometheus

00:52:52,000 --> 00:52:56,319
or community community

00:52:54,000 --> 00:52:58,400
orgs or whether we would want it at that

00:52:56,319 --> 00:53:00,319
point rather than

00:52:58,400 --> 00:53:02,240
preemptively saying at this point that

00:53:00,319 --> 00:53:03,280
we're it makes it sound like we're

00:53:02,240 --> 00:53:05,440
looking for somebody to

00:53:03,280 --> 00:53:07,119
actively do it at the moment yeah i

00:53:05,440 --> 00:53:09,280
agree

00:53:07,119 --> 00:53:11,280
i mean i would i mean we are all we all

00:53:09,280 --> 00:53:13,040
agree if someone is doing this we won't

00:53:11,280 --> 00:53:15,280
point fingers at them we might even just

00:53:13,040 --> 00:53:16,800
put it into the org of the community or

00:53:15,280 --> 00:53:18,880
but we don't have to phrase that now

00:53:16,800 --> 00:53:22,319
right i mean that's we can discuss it

00:53:18,880 --> 00:53:22,800
when it comes up yeah so for the 32-bit

00:53:22,319 --> 00:53:26,800
thing

00:53:22,800 --> 00:53:28,079
um i i feel like we we all want the same

00:53:26,800 --> 00:53:31,599
thing it's just about how

00:53:28,079 --> 00:53:35,280
how do we phrase it sensibly right

00:53:31,599 --> 00:53:36,400
um let's try this wording and if not

00:53:35,280 --> 00:53:38,000
just write your own

00:53:36,400 --> 00:53:39,599
but i think i have something which

00:53:38,000 --> 00:53:42,079
covers everything

00:53:39,599 --> 00:53:43,280
uh we want to support 32-bit devices

00:53:42,079 --> 00:53:45,040
machines etc

00:53:43,280 --> 00:53:47,040
this would need to keep our main use

00:53:45,040 --> 00:53:48,720
cases intact be discussed in a design

00:53:47,040 --> 00:53:50,400
document and require approval by

00:53:48,720 --> 00:53:52,720
prometheus team

00:53:50,400 --> 00:53:54,880
i i still think that we want to support

00:53:52,720 --> 00:53:57,520
small 32-byte devices it's really big

00:53:54,880 --> 00:54:00,480
words

00:53:57,520 --> 00:54:00,960
i think that it should be more like uh

00:54:00,480 --> 00:54:04,800
we

00:54:00,960 --> 00:54:07,359
we are open to get more tuning options

00:54:04,800 --> 00:54:10,880
just to get communities working

00:54:07,359 --> 00:54:13,760
something like that

00:54:10,880 --> 00:54:14,880
already in um we are open to supporting

00:54:13,760 --> 00:54:17,119
small 32-bit diva

00:54:14,880 --> 00:54:18,960
so we are open to supporting and then

00:54:17,119 --> 00:54:22,240
everything is the same

00:54:18,960 --> 00:54:22,240
will that find consensus

00:54:23,119 --> 00:54:30,880
i mean what i'm struggling with

00:54:26,880 --> 00:54:32,880
is the like we're talking first we're

00:54:30,880 --> 00:54:34,559
talking about 32 like anything that has

00:54:32,880 --> 00:54:37,040
to do with 32-bit

00:54:34,559 --> 00:54:39,680
but what we really mean is we don't want

00:54:37,040 --> 00:54:42,079
people to go rewrite the storage engine

00:54:39,680 --> 00:54:44,640
and there are potentially other things

00:54:42,079 --> 00:54:46,480
that are 32-bit specific

00:54:44,640 --> 00:54:47,680
that don't maybe need a full design

00:54:46,480 --> 00:54:50,720
document

00:54:47,680 --> 00:54:53,920
yeah especially like can we

00:54:50,720 --> 00:54:55,359
can we make it ex can we um could we be

00:54:53,920 --> 00:54:57,119
explicit and say

00:54:55,359 --> 00:54:58,640
changes to the storage engine need a

00:54:57,119 --> 00:55:00,400
design document

00:54:58,640 --> 00:55:02,160
yeah or maybe you could say invasive

00:55:00,400 --> 00:55:04,319
changes would need a design document or

00:55:02,160 --> 00:55:07,280
something like that

00:55:04,319 --> 00:55:08,799
no new thing like every invasive change

00:55:07,280 --> 00:55:10,799
needs a design document whether it's

00:55:08,799 --> 00:55:11,440
storage or 30 wood related or not and

00:55:10,799 --> 00:55:13,520
every

00:55:11,440 --> 00:55:15,440
change needs approval by a prometheus

00:55:13,520 --> 00:55:18,559
team member otherwise you can't merge it

00:55:15,440 --> 00:55:19,520
so this is all nothing new right the

00:55:18,559 --> 00:55:23,680
only thing

00:55:19,520 --> 00:55:26,480
is we are open to tweaks towards 32-bit

00:55:23,680 --> 00:55:30,960
support if they are not too invasive

00:55:26,480 --> 00:55:33,520
but i mean i know foreign

00:55:30,960 --> 00:55:34,480
um and formally it doesn't matter if

00:55:33,520 --> 00:55:37,280
it's in or out

00:55:34,480 --> 00:55:37,280
it's a statement

00:55:38,559 --> 00:55:44,400
so if we if more people feel comfortable

00:55:41,280 --> 00:55:46,960
with it if we make this as a statement

00:55:44,400 --> 00:55:48,400
i i would not object to having the

00:55:46,960 --> 00:55:51,839
sentences in there

00:55:48,400 --> 00:55:53,200
that are that are

00:55:51,839 --> 00:55:55,520
about things that are usually the case

00:55:53,200 --> 00:55:55,520
anyway

00:56:01,280 --> 00:56:05,839
okay let's try this one consensus we are

00:56:03,520 --> 00:56:07,040
open to supporting small 32-bit devices

00:56:05,839 --> 00:56:08,880
machines etc

00:56:07,040 --> 00:56:11,119
if the required changes are not too

00:56:08,880 --> 00:56:13,839
invasive coupled to a second one

00:56:11,119 --> 00:56:15,680
optionally consensus if it makes sense

00:56:13,839 --> 00:56:20,400
we are open to hosting a ke3

00:56:15,680 --> 00:56:20,400
k3s like p3s in our github orgs

00:56:21,200 --> 00:56:26,079
so yes to the first note to the second

00:56:24,240 --> 00:56:28,079
i don't think it makes sense to talk

00:56:26,079 --> 00:56:31,599
about forks at this point

00:56:28,079 --> 00:56:34,559
um like stewart said we when we

00:56:31,599 --> 00:56:36,880
um like when that comes up then we can

00:56:34,559 --> 00:56:40,480
have that discussion

00:56:36,880 --> 00:56:42,480
okay already deleted yeah consensus

00:56:40,480 --> 00:56:44,640
we are open to supporting small 32-bit

00:56:42,480 --> 00:56:47,520
devices machines etc if the required

00:56:44,640 --> 00:56:51,280
changes are not too invasive

00:56:47,520 --> 00:56:51,280
i like it anyone disagreeing

00:56:52,960 --> 00:56:58,880
yay point of order will you write one

00:56:57,119 --> 00:57:01,599
hour yeah

00:56:58,880 --> 00:57:02,400
i'm five minutes eight minutes so we can

00:57:01,599 --> 00:57:05,760
start at five

00:57:02,400 --> 00:57:06,799
ten okay so see you all in ten minutes

00:57:05,760 --> 00:57:13,839
in eight minutes

00:57:06,799 --> 00:57:13,839
or seven and a half minutes

00:57:32,559 --> 00:57:35,280
ben wins

00:57:35,760 --> 00:57:41,839
which i don't know if i don't think i

00:57:38,000 --> 00:57:46,880
replied but i'll be on the call

00:57:41,839 --> 00:57:46,880
on the tuesday yep perfect

00:57:47,680 --> 00:57:51,359
as this is recording and everyone else

00:57:49,200 --> 00:57:52,000
will be will be wondering what we're

00:57:51,359 --> 00:57:56,000
talking about

00:57:52,000 --> 00:58:00,079
this is um documentation

00:57:56,000 --> 00:58:03,119
uh oh ben turned off the cat

00:58:00,079 --> 00:58:09,839
boo bamboo boo yup

00:58:03,119 --> 00:58:09,839
cat friend wanted to be off the camera

01:04:52,880 --> 01:04:55,839
so

01:04:57,839 --> 01:05:03,200
testing one two three testing one two

01:04:59,760 --> 01:05:03,200
three oh hi

01:05:03,280 --> 01:05:10,400
hello person who is not a kid

01:05:06,480 --> 01:05:22,880
all right fine i'll put the cap back on

01:05:10,400 --> 01:05:24,400
way better

01:05:22,880 --> 01:05:26,160
so ideally the people who are back if

01:05:24,400 --> 01:05:37,839
you could switch on your camera

01:05:26,160 --> 01:05:37,839
that gives us good indication

01:05:41,359 --> 01:05:51,839
so in particular particular ganache

01:05:43,119 --> 01:05:51,839
would be useful

01:05:56,799 --> 01:06:00,880
okay i mean we can also do something

01:05:58,799 --> 01:06:02,559
else other than uh

01:06:00,880 --> 01:06:04,160
post modifiers i'm trying to align a

01:06:02,559 --> 01:06:05,839
little bit with who's actually on the

01:06:04,160 --> 01:06:09,119
call

01:06:05,839 --> 01:06:09,119
with who voted and how

01:06:15,839 --> 01:06:20,000
something is also not good i mean we can

01:06:18,000 --> 01:06:20,240
also just get started on post modifiers

01:06:20,000 --> 01:06:21,710
i

01:06:20,240 --> 01:06:23,680
i suspect ganesh can

01:06:21,710 --> 01:06:26,720
[Music]

01:06:23,680 --> 01:06:28,480
jump in i know i see him actually in the

01:06:26,720 --> 01:06:30,559
document so i presume that connections

01:06:28,480 --> 01:06:33,280
are on

01:06:30,559 --> 01:06:34,880
yeah i am here okay perfect so bartek

01:06:33,280 --> 01:06:37,520
ganache the stages here is post

01:06:34,880 --> 01:06:37,520
modifiers

01:06:38,480 --> 01:06:45,920
let me see bartek had some query on

01:06:42,000 --> 01:06:47,920
this yeah the post modifiers there

01:06:45,920 --> 01:06:49,039
we are still not sure how the post

01:06:47,920 --> 01:06:52,240
modifiers should

01:06:49,039 --> 01:06:53,359
look one of the ideas was having pipe

01:06:52,240 --> 01:06:55,359
symbols or

01:06:53,359 --> 01:06:57,200
pipe with some other symbol to define

01:06:55,359 --> 01:06:58,559
the post modifiers but the query is

01:06:57,200 --> 01:07:00,480
something different

01:06:58,559 --> 01:07:02,480
should the implementation for this post

01:07:00,480 --> 01:07:04,400
modifier stay with the prom cool

01:07:02,480 --> 01:07:08,000
engine code or it should be something

01:07:04,400 --> 01:07:10,480
separate that is to be implemented

01:07:08,000 --> 01:07:15,839
that's the main question i guess from

01:07:10,480 --> 01:07:15,839
what participate

01:07:17,039 --> 01:07:22,240
anyone has any strong opinions on this

01:07:19,920 --> 01:07:23,920
the initial idea was we keep

01:07:22,240 --> 01:07:25,839
the implementation of all these post

01:07:23,920 --> 01:07:28,559
modifiers separately

01:07:25,839 --> 01:07:29,680
the prom queue will help split those

01:07:28,559 --> 01:07:32,160
particular parts

01:07:29,680 --> 01:07:32,960
give it to some other engine that kicks

01:07:32,160 --> 01:07:36,480
it takes care of

01:07:32,960 --> 01:07:38,400
identifying these and run on the result

01:07:36,480 --> 01:07:40,880
without needing to add additional

01:07:38,400 --> 01:07:45,359
complexity in prom kill itself

01:07:40,880 --> 01:07:47,280
but if you think it should stain from ql

01:07:45,359 --> 01:07:49,119
to do some kind of optimization if

01:07:47,280 --> 01:07:52,319
required

01:07:49,119 --> 01:07:54,559
that's the question so i think that

01:07:52,319 --> 01:07:58,000
if it's outside of prom qr it should

01:07:54,559 --> 01:08:01,039
also be outside of the expression

01:07:58,000 --> 01:08:02,559
and then be a separated parameter in the

01:08:01,039 --> 01:08:04,079
query or that kind of things i don't

01:08:02,559 --> 01:08:06,240
think we should try to have all of that

01:08:04,079 --> 01:08:09,359
inside principle

01:08:06,240 --> 01:08:12,000
expression i also think that

01:08:09,359 --> 01:08:13,839
originally the idea was to add modifiers

01:08:12,000 --> 01:08:17,040
and remove some function that would be

01:08:13,839 --> 01:08:19,839
like duplicates of the modifiers

01:08:17,040 --> 01:08:21,759
and i think that then we should if we

01:08:19,839 --> 01:08:25,839
put that out of prom ql that we should

01:08:21,759 --> 01:08:25,839
keep those functions

01:08:27,120 --> 01:08:31,199
random thought no matter if we modify

01:08:30,400 --> 01:08:33,759
pronquel

01:08:31,199 --> 01:08:35,199
or if we have this as a separate thing

01:08:33,759 --> 01:08:37,440
um

01:08:35,199 --> 01:08:39,600
technically speaking we would be able to

01:08:37,440 --> 01:08:41,759
just have one input field

01:08:39,600 --> 01:08:43,920
and detect post modifiers and no matter

01:08:41,759 --> 01:08:47,199
how we treat it on the back end

01:08:43,920 --> 01:08:49,199
we could actually allow both uh putting

01:08:47,199 --> 01:08:50,319
everything into one single input field

01:08:49,199 --> 01:08:52,560
or just

01:08:50,319 --> 01:08:55,600
sending it to two different query

01:08:52,560 --> 01:08:55,600
endpoints or what have you

01:08:56,480 --> 01:08:59,679
so what i'm trying to avoid is the user

01:08:58,719 --> 01:09:03,199
which is using

01:08:59,679 --> 01:09:05,279
the modifiers inside promoters ui and

01:09:03,199 --> 01:09:07,839
cannot copy paste that directly inside

01:09:05,279 --> 01:09:07,839
the rule

01:09:09,359 --> 01:09:13,920
yeah there it makes sense to make it

01:09:11,120 --> 01:09:16,960
part of from kill

01:09:13,920 --> 01:09:19,120
but you could also detect

01:09:16,960 --> 01:09:20,080
that someone did this you could even in

01:09:19,120 --> 01:09:23,520
theory just

01:09:20,080 --> 01:09:27,199
drop that part off the rule completely

01:09:23,520 --> 01:09:29,600
and just emit an error or a warning

01:09:27,199 --> 01:09:31,520
but then should we do that recursively

01:09:29,600 --> 01:09:35,839
with the sub queries that kind of things

01:09:31,520 --> 01:09:35,839
comes into my mind

01:09:41,040 --> 01:09:44,799
i'm wondering where we would have

01:09:43,040 --> 01:09:47,440
sub-queries

01:09:44,799 --> 01:09:48,400
which are then post-processed and fed

01:09:47,440 --> 01:09:51,600
back into

01:09:48,400 --> 01:09:52,239
into a layer above so if we take an

01:09:51,600 --> 01:09:55,600
example

01:09:52,239 --> 01:09:56,320
of a post-processing stuff that i would

01:09:55,600 --> 01:09:59,440
find useful

01:09:56,320 --> 01:10:00,239
is the limit that i would use for

01:09:59,440 --> 01:10:02,560
example

01:10:00,239 --> 01:10:05,199
inside the query that i would run in an

01:10:02,560 --> 01:10:07,760
annotation in an alert to say like hey

01:10:05,199 --> 01:10:08,320
i am doing that with top k now but like

01:10:07,760 --> 01:10:11,120
uh

01:10:08,320 --> 01:10:14,800
oh we have like 15 point failing and

01:10:11,120 --> 01:10:14,800
here is an example of 10 of them for

01:10:14,840 --> 01:10:17,840
example

01:10:22,640 --> 01:10:27,920
okay i'm kind of convinced that it

01:10:24,719 --> 01:10:27,920
should be part of chrome ql

01:10:28,640 --> 01:10:32,320
oh yeah i spoke up on this like a month

01:10:31,280 --> 01:10:33,920
or two ago i

01:10:32,320 --> 01:10:36,159
i i think it should all be part of prom

01:10:33,920 --> 01:10:37,760
qr um but i don't want to

01:10:36,159 --> 01:10:39,199
be really strong on that because i also

01:10:37,760 --> 01:10:41,679
don't have the time to make it part of

01:10:39,199 --> 01:10:41,679
prom qr

01:10:43,679 --> 01:10:47,280
and talking about supporting on sub

01:10:46,080 --> 01:10:50,159
queries i think the

01:10:47,280 --> 01:10:52,080
initial idea was this post modifiers

01:10:50,159 --> 01:10:55,679
would be on the entire query

01:10:52,080 --> 01:10:59,280
and cannot be applied on some sub query

01:10:55,679 --> 01:11:02,320
inside a query to keep it simple

01:10:59,280 --> 01:11:04,320
but thinking this through if

01:11:02,320 --> 01:11:06,239
those post modifiers are actually

01:11:04,320 --> 01:11:07,520
required to at least return something

01:11:06,239 --> 01:11:09,520
which looks

01:11:07,520 --> 01:11:10,719
like somewhat which which was produced

01:11:09,520 --> 01:11:13,280
by valid prompt

01:11:10,719 --> 01:11:14,239
without any post modifiers it could

01:11:13,280 --> 01:11:17,920
easily be part

01:11:14,239 --> 01:11:20,159
of of a sub query

01:11:17,920 --> 01:11:21,679
as long as the output properties of the

01:11:20,159 --> 01:11:25,760
whole thing are

01:11:21,679 --> 01:11:25,760
are nice

01:11:26,880 --> 01:11:31,280
so the the examples we've given for

01:11:28,560 --> 01:11:32,400
where this would be useful right are

01:11:31,280 --> 01:11:34,239
one of them's already been solved with

01:11:32,400 --> 01:11:35,440
the app modifier in pumqua and i think

01:11:34,239 --> 01:11:37,520
that's a better solution

01:11:35,440 --> 01:11:38,880
the other one is like sorting by label

01:11:37,520 --> 01:11:40,159
values and everything and i think there

01:11:38,880 --> 01:11:41,679
should be a function that allows you to

01:11:40,159 --> 01:11:45,040
do this

01:11:41,679 --> 01:11:47,679
you know adding adding extra

01:11:45,040 --> 01:11:48,719
parameters to queries means every client

01:11:47,679 --> 01:11:51,120
that wants to take

01:11:48,719 --> 01:11:51,760
take advantage of this needs to change

01:11:51,120 --> 01:11:54,800
like

01:11:51,760 --> 01:11:56,960
it would mean a new new text box in in

01:11:54,800 --> 01:11:59,199
grafana a new dsl

01:11:56,960 --> 01:12:00,719
for describing these modifiers like this

01:11:59,199 --> 01:12:01,600
just all seems like why not just make it

01:12:00,719 --> 01:12:02,640
part of prom qr

01:12:01,600 --> 01:12:05,840
that was the arguments i made a couple

01:12:02,640 --> 01:12:05,840
of months ago though so

01:12:06,800 --> 01:12:10,000
yeah i mean the trade of do we make prom

01:12:08,640 --> 01:12:12,560
qr more complicated

01:12:10,000 --> 01:12:14,239
and perhaps even run into weird corner

01:12:12,560 --> 01:12:17,199
cases we didn't anticipate

01:12:14,239 --> 01:12:17,679
or do we make it more complicated for

01:12:17,199 --> 01:12:20,560
those

01:12:17,679 --> 01:12:20,880
using it right and at least that makes

01:12:20,560 --> 01:12:23,520
it

01:12:20,880 --> 01:12:26,320
separates it quite clearly but as richie

01:12:23,520 --> 01:12:29,920
said right you could just

01:12:26,320 --> 01:12:32,159
process the rich bronchial query into a

01:12:29,920 --> 01:12:33,199
classic program theory plus post

01:12:32,159 --> 01:12:35,679
processor

01:12:33,199 --> 01:12:37,360
and then there might be things that are

01:12:35,679 --> 01:12:39,280
just not possible but we could forbid

01:12:37,360 --> 01:12:41,440
them in the rich popular as well

01:12:39,280 --> 01:12:42,560
so i think the separation could be done

01:12:41,440 --> 01:12:45,199
in either either

01:12:42,560 --> 01:12:47,280
case it's just kind of an enforced

01:12:45,199 --> 01:12:50,480
separation if it's if it's a separate

01:12:47,280 --> 01:12:51,360
thing in the api but i'm also not sure

01:12:50,480 --> 01:12:54,960
if it's worth

01:12:51,360 --> 01:12:57,280
the burden we yeah we put a burden on

01:12:54,960 --> 01:13:00,239
all the the people implementing the api

01:12:57,280 --> 01:13:00,239
and using the api

01:13:00,400 --> 01:13:05,679
yeah because it

01:13:03,520 --> 01:13:08,560
if it works one way or at least seems to

01:13:05,679 --> 01:13:09,920
work one way in the prometheus ui and

01:13:08,560 --> 01:13:12,960
it's different everywhere else then

01:13:09,920 --> 01:13:12,960
everyone gets confused

01:13:13,199 --> 01:13:18,080
and thomas a good uh point that i think

01:13:16,400 --> 01:13:21,040
this can all be solved with

01:13:18,080 --> 01:13:22,080
one or two options one or one or two

01:13:21,040 --> 01:13:24,239
functions

01:13:22,080 --> 01:13:26,719
that we would need to add just like the

01:13:24,239 --> 01:13:28,480
consensus was so far what was applied so

01:13:26,719 --> 01:13:29,520
far is that prom coil does not touch the

01:13:28,480 --> 01:13:32,080
label values or

01:13:29,520 --> 01:13:34,000
it retries not to think about that but

01:13:32,080 --> 01:13:35,920
we can change that and say that hey no

01:13:34,000 --> 01:13:37,440
point query will be able to sort on

01:13:35,920 --> 01:13:40,239
that kind of labels and then it would

01:13:37,440 --> 01:13:40,239
work everywhere

01:13:40,400 --> 01:13:44,840
so you just need a consistent syntax to

01:13:42,560 --> 01:13:47,920
how to say that this is a

01:13:44,840 --> 01:13:49,760
filter the thing

01:13:47,920 --> 01:13:51,040
and whether it works with subqueries and

01:13:49,760 --> 01:13:52,560
so on as well well

01:13:51,040 --> 01:13:54,880
if it is a function it works in

01:13:52,560 --> 01:13:56,400
subqueries if it is a function we check

01:13:54,880 --> 01:13:58,800
all the boxes

01:13:56,400 --> 01:14:01,840
except that it is not like printed as a

01:13:58,800 --> 01:14:01,840
post modifier

01:14:03,840 --> 01:14:07,040
yeah i could i could imagine some people

01:14:05,920 --> 01:14:10,880
think about like

01:14:07,040 --> 01:14:14,000
those pipe like synthetics as in locuel

01:14:10,880 --> 01:14:15,679
but i i don't know i think we came up

01:14:14,000 --> 01:14:16,719
with the post processors because we

01:14:15,679 --> 01:14:19,120
thought a few things

01:14:16,719 --> 01:14:20,800
would be really weird within prom ql but

01:14:19,120 --> 01:14:21,840
now we have the ad modifier which

01:14:20,800 --> 01:14:25,840
already

01:14:21,840 --> 01:14:27,920
kind of proves a relatively elegant way

01:14:25,840 --> 01:14:28,640
of of doing some of the more hairy

01:14:27,920 --> 01:14:32,239
things

01:14:28,640 --> 01:14:33,840
so i think we should we should perhaps

01:14:32,239 --> 01:14:36,239
modify the consensus as

01:14:33,840 --> 01:14:37,440
in if we run through something that is

01:14:36,239 --> 01:14:39,199
really

01:14:37,440 --> 01:14:40,480
totally weird to do in promgale we can

01:14:39,199 --> 01:14:41,600
still pull out this idea of

01:14:40,480 --> 01:14:44,719
post-processing

01:14:41,600 --> 01:14:45,199
but for the time being let's just try to

01:14:44,719 --> 01:14:48,320
do it

01:14:45,199 --> 01:14:48,320
in full prom girl

01:14:48,880 --> 01:14:52,159
having in mind that we don't want to do

01:14:51,040 --> 01:14:54,840
something

01:14:52,159 --> 01:14:56,000
that breaks proper consistency or

01:14:54,840 --> 01:14:58,239
something

01:14:56,000 --> 01:14:59,920
and i also know that using pipe since

01:14:58,239 --> 01:15:01,920
like not an option since

01:14:59,920 --> 01:15:04,480
we it would conflict with loki and it

01:15:01,920 --> 01:15:05,840
would not be nice to them

01:15:04,480 --> 01:15:07,679
yeah but we talked about different

01:15:05,840 --> 01:15:09,600
piping right so we have like a pipe and

01:15:07,679 --> 01:15:11,760
some other characters so we kind of

01:15:09,600 --> 01:15:14,000
consider all these options yeah

01:15:11,760 --> 01:15:15,679
and we kind of spent a lot of time with

01:15:14,000 --> 01:15:18,400
gayatri to kind of mentor her

01:15:15,679 --> 01:15:20,400
in this area but uh yeah we we realized

01:15:18,400 --> 01:15:22,400
that the promql part would be

01:15:20,400 --> 01:15:23,600
would be the best for users and ui and

01:15:22,400 --> 01:15:26,080
everything so

01:15:23,600 --> 01:15:27,120
if we can have like experimental um

01:15:26,080 --> 01:15:28,880
portion and

01:15:27,120 --> 01:15:30,560
that would be amazing yeah that's what i

01:15:28,880 --> 01:15:32,159
was going to suggest is does this want

01:15:30,560 --> 01:15:34,239
to be experimental so we can change our

01:15:32,159 --> 01:15:38,640
minds if it doesn't quite work

01:15:34,239 --> 01:15:40,000
the way we'd hoped the more i think

01:15:38,640 --> 01:15:44,080
about it the more like

01:15:40,000 --> 01:15:46,239
just putting it into into main prom

01:15:44,080 --> 01:15:48,480
what is the inherent reason why we

01:15:46,239 --> 01:15:49,600
should disallow a sort by label

01:15:48,480 --> 01:15:52,560
descending

01:15:49,600 --> 01:15:52,880
and then have another function limit 10

01:15:52,560 --> 01:15:55,280
and

01:15:52,880 --> 01:15:56,000
and basically just allow people to build

01:15:55,280 --> 01:15:59,199
this

01:15:56,000 --> 01:16:01,600
they can make foot guns with this yes

01:15:59,199 --> 01:16:05,440
but there's so many ways to build foot

01:16:01,600 --> 01:16:05,440
guns with a touring complete language

01:16:05,520 --> 01:16:11,360
why not allow it yes but why not

01:16:08,880 --> 01:16:13,199
allowing more functions this is easiest

01:16:11,360 --> 01:16:15,120
this does not change a lot of

01:16:13,199 --> 01:16:17,040
no that's my point to allow it as a

01:16:15,120 --> 01:16:18,080
function and just uh similar to what

01:16:17,040 --> 01:16:20,640
byron just said

01:16:18,080 --> 01:16:22,480
i was basically agreeing with bran uh

01:16:20,640 --> 01:16:24,480
there is no inherent reason

01:16:22,480 --> 01:16:26,000
why we have to put all of this in

01:16:24,480 --> 01:16:29,360
post-processing

01:16:26,000 --> 01:16:31,360
um we can just make that clear in in

01:16:29,360 --> 01:16:32,400
in the documentation such that these are

01:16:31,360 --> 01:16:35,280
functions

01:16:32,400 --> 01:16:36,080
which usually should be used last

01:16:35,280 --> 01:16:39,120
because they

01:16:36,080 --> 01:16:41,280
they they cost time and they maybe they

01:16:39,120 --> 01:16:43,520
they will lead to weird effects if you

01:16:41,280 --> 01:16:46,719
use them in such queries and such

01:16:43,520 --> 01:16:48,800
and beyond this let the user run wild we

01:16:46,719 --> 01:16:50,800
already have that issue anyway

01:16:48,800 --> 01:16:52,400
with people using weight in the wrong

01:16:50,800 --> 01:16:55,040
places and stuff so it's nothing new in

01:16:52,400 --> 01:16:55,040
that regard

01:17:00,880 --> 01:17:04,080
yeah i mean i'm not i'm not super

01:17:02,400 --> 01:17:06,560
passionate about if it's like nested

01:17:04,080 --> 01:17:10,239
syntax or pipe syntax or anything

01:17:06,560 --> 01:17:12,080
i just think um we should do either or

01:17:10,239 --> 01:17:14,080
we should either keep it completely

01:17:12,080 --> 01:17:16,640
separate from the query language

01:17:14,080 --> 01:17:19,360
or if it's in the text field it's part

01:17:16,640 --> 01:17:19,360
of promptql

01:17:19,440 --> 01:17:22,719
yeah i can agree with that for sure yeah

01:17:21,520 --> 01:17:25,280
but like the question now

01:17:22,719 --> 01:17:26,960
looks like is are we doing functions or

01:17:25,280 --> 01:17:29,120
some separate post process

01:17:26,960 --> 01:17:31,120
uh inside promql right that's a good

01:17:29,120 --> 01:17:35,840
question i

01:17:31,120 --> 01:17:35,840
it's more here yeah all right

01:17:36,320 --> 01:17:39,840
i mean let's try it i think we would

01:17:38,239 --> 01:17:41,760
need a vote because i think we have

01:17:39,840 --> 01:17:43,280
something binding from previously but

01:17:41,760 --> 01:17:44,880
let's just try to get an informal

01:17:43,280 --> 01:17:46,880
consensus

01:17:44,880 --> 01:17:49,040
who for me his team would be in favor of

01:17:46,880 --> 01:17:49,679
just tossing all of this into prom ql

01:17:49,040 --> 01:17:51,760
functions

01:17:49,679 --> 01:17:54,480
hidden behind the feature black and then

01:17:51,760 --> 01:17:54,480
calling it a day

01:17:54,560 --> 01:18:01,360
i don't think we need a future flag but

01:17:57,679 --> 01:18:05,120
yeah okay that's um ganesh

01:18:01,360 --> 01:18:05,120
ben matthias

01:18:05,679 --> 01:18:09,440
i don't want to claim that will just

01:18:07,440 --> 01:18:13,040
work but at least we can try

01:18:09,440 --> 01:18:16,640
yeah yeah i'm all for trying okay okay

01:18:13,040 --> 01:18:18,159
so um i mean i can also think about it

01:18:16,640 --> 01:18:21,360
the other way around right

01:18:18,159 --> 01:18:24,719
if everything is a function why not have

01:18:21,360 --> 01:18:26,719
a pipeline form of promql right like why

01:18:24,719 --> 01:18:27,679
can't i type like this is my metric

01:18:26,719 --> 01:18:30,719
selector

01:18:27,679 --> 01:18:33,040
pipe rate pipe some pipe

01:18:30,719 --> 01:18:34,480
device by the way there's a post

01:18:33,040 --> 01:18:36,400
processor that does exactly that and i

01:18:34,480 --> 01:18:38,000
think it's really cool

01:18:36,400 --> 01:18:39,520
i'll get a link and i'll share it it's

01:18:38,000 --> 01:18:42,080
so cool

01:18:39,520 --> 01:18:42,880
i mean it makes sense many ways of doing

01:18:42,080 --> 01:18:44,480
the same thing

01:18:42,880 --> 01:18:46,480
i would a little you know be careful

01:18:44,480 --> 01:18:48,239
then there

01:18:46,480 --> 01:18:50,000
that's just basically a different

01:18:48,239 --> 01:18:51,520
parsing mechanism for the for the

01:18:50,000 --> 01:18:55,520
language isn't it it still

01:18:51,520 --> 01:18:58,159
results in the same internal reputation

01:18:55,520 --> 01:18:58,640
just this is how go templating works

01:18:58,159 --> 01:19:00,719
right

01:18:58,640 --> 01:19:03,679
you can write it in a function way or

01:19:00,719 --> 01:19:05,120
you can write it in the pipe way

01:19:03,679 --> 01:19:06,719
not not saying that we should go down

01:19:05,120 --> 01:19:09,199
that path but it's

01:19:06,719 --> 01:19:10,320
no not at all but i mean i i like

01:19:09,199 --> 01:19:12,480
experimenting with

01:19:10,320 --> 01:19:13,840
with things and it does seem like just

01:19:12,480 --> 01:19:17,120
making it functions

01:19:13,840 --> 01:19:19,199
in the current form i mean

01:19:17,120 --> 01:19:20,960
i i think i originally pushed for

01:19:19,199 --> 01:19:23,120
separating like things that modify

01:19:20,960 --> 01:19:23,920
output from things that do calculations

01:19:23,120 --> 01:19:25,760
but

01:19:23,920 --> 01:19:27,840
if the general consensus is that there

01:19:25,760 --> 01:19:30,480
is no clear line between the two

01:19:27,840 --> 01:19:32,239
then that's not let's um let's make it

01:19:30,480 --> 01:19:34,480
all promptl

01:19:32,239 --> 01:19:35,600
well i think that we could improve the

01:19:34,480 --> 01:19:38,400
documentation

01:19:35,600 --> 01:19:40,880
and like if you look at jsonnet uh

01:19:38,400 --> 01:19:42,800
jsonnet they have mathematical functions

01:19:40,880 --> 01:19:44,159
all they do is they just list them and

01:19:42,800 --> 01:19:45,440
it does not take

01:19:44,159 --> 01:19:47,120
the same place as all the other

01:19:45,440 --> 01:19:49,040
functions you have like hey by the way

01:19:47,120 --> 01:19:50,480
this is the mathematical function we

01:19:49,040 --> 01:19:51,679
have and you just have the list and no

01:19:50,480 --> 01:19:53,520
description and maybe

01:19:51,679 --> 01:19:54,960
this is just documentation issues that

01:19:53,520 --> 01:19:57,280
we should split maybe like

01:19:54,960 --> 01:19:58,800
uh the functions that modify stuff from

01:19:57,280 --> 01:19:59,600
the function that do the calculation i

01:19:58,800 --> 01:20:01,360
don't know but

01:19:59,600 --> 01:20:03,040
this is more like a documentation stuff

01:20:01,360 --> 01:20:06,880
that actually a problem was

01:20:03,040 --> 01:20:09,360
what's a functional and what's not no

01:20:06,880 --> 01:20:10,960
and with promptql2 when we start

01:20:09,360 --> 01:20:12,880
enforcing types and

01:20:10,960 --> 01:20:14,239
proper ordering then we can also make

01:20:12,880 --> 01:20:19,840
people like

01:20:14,239 --> 01:20:19,840
make it impossible to uh rate a sum

01:20:21,360 --> 01:20:27,280
that's just just um just thinking of way

01:20:24,639 --> 01:20:29,120
way too much ahead so yeah let's try it

01:20:27,280 --> 01:20:30,840
can i just um does anyone mind if i just

01:20:29,120 --> 01:20:33,840
share my screen quickly

01:20:30,840 --> 01:20:33,840
yes

01:20:34,800 --> 01:20:40,960
this is the it's called pipers pipe

01:20:37,120 --> 01:20:43,920
expressions in prom ql queries and more

01:20:40,960 --> 01:20:46,000
and uh this is what it looks like and i

01:20:43,920 --> 01:20:47,360
must for one i love this i think this is

01:20:46,000 --> 01:20:50,800
awesome

01:20:47,360 --> 01:20:52,000
um now i can understand it might not be

01:20:50,800 --> 01:20:53,920
everyone's taste

01:20:52,000 --> 01:20:55,840
uh i actually don't think this is prom

01:20:53,920 --> 01:21:00,000
cure specific but the examples they give

01:20:55,840 --> 01:21:02,880
are from ql

01:21:00,000 --> 01:21:04,000
yeah uphill and i just think this is

01:21:02,880 --> 01:21:05,360
fantastic like

01:21:04,000 --> 01:21:07,360
um i think this is wonderfully

01:21:05,360 --> 01:21:09,040
complicated um

01:21:07,360 --> 01:21:12,239
probably a terrible idea for many

01:21:09,040 --> 01:21:14,239
reasons but i love it

01:21:12,239 --> 01:21:16,239
to when we would when we were doing log

01:21:14,239 --> 01:21:19,679
ql v2 with frederick

01:21:16,239 --> 01:21:20,560
um this was was a direction for a while

01:21:19,679 --> 01:21:21,520
we were going in

01:21:20,560 --> 01:21:23,600
where you could basically

01:21:21,520 --> 01:21:26,639
interchangeably do pipes and brackets

01:21:23,600 --> 01:21:27,600
but we ended up settling on brackets for

01:21:26,639 --> 01:21:30,880
metrics and

01:21:27,600 --> 01:21:32,159
pipes for logs um and actually and i'm

01:21:30,880 --> 01:21:33,120
glad we did like i think the language

01:21:32,159 --> 01:21:34,800
looks really nice

01:21:33,120 --> 01:21:38,320
um not having two ways of doing

01:21:34,800 --> 01:21:38,320
everything but yeah anyway

01:21:40,159 --> 01:21:42,159
to be clear i'm not suggesting we

01:21:41,199 --> 01:21:43,840
actually do that i just think it's

01:21:42,159 --> 01:21:45,760
fantastic

01:21:43,840 --> 01:21:47,760
this is out of scope for now but one

01:21:45,760 --> 01:21:49,920
thing which i can easily see happening

01:21:47,760 --> 01:21:51,040
is is having like a live parser into

01:21:49,920 --> 01:21:53,360
this thing

01:21:51,040 --> 01:21:54,960
to go back and forth to to just be able

01:21:53,360 --> 01:22:00,320
to understand

01:21:54,960 --> 01:22:00,320
a few corner cases of of prompt easier

01:22:00,800 --> 01:22:04,560
let's try for consensus because i think

01:22:02,400 --> 01:22:06,159
we already have one

01:22:04,560 --> 01:22:08,159
we want to explore new functions and

01:22:06,159 --> 01:22:12,159
promptgate which cover

01:22:08,159 --> 01:22:15,760
the use case sorry the use cases

01:22:12,159 --> 01:22:16,320
above initial experiment experimentation

01:22:15,760 --> 01:22:20,480
will be

01:22:16,320 --> 01:22:20,480
done behind them behind the feature flag

01:22:20,719 --> 01:22:25,840
i can't type okay all agreed anyone

01:22:23,040 --> 01:22:25,840
disagree

01:22:31,040 --> 01:22:42,719
just need to fix typos

01:22:39,360 --> 01:22:42,719
that's a pretty big one good

01:22:46,800 --> 01:22:53,840
um we don't have frederick here should

01:22:49,440 --> 01:22:53,840
we talk uh downsampling in tsdb

01:22:57,440 --> 01:23:07,040
i think ben can speak about that

01:23:01,600 --> 01:23:09,280
okay then let's do it

01:23:07,040 --> 01:23:09,280
yep

01:23:10,159 --> 01:23:16,639
okay uh

01:23:13,360 --> 01:23:17,280
basically thanos has a pretty nice down

01:23:16,639 --> 01:23:21,199
sampling

01:23:17,280 --> 01:23:24,320
implementation uh we worked out quite a

01:23:21,199 --> 01:23:27,040
few minor bugs and it's

01:23:24,320 --> 01:23:28,480
pretty reliable super works really well

01:23:27,040 --> 01:23:30,719
i think we should do that in prometheus

01:23:28,480 --> 01:23:30,719
too

01:23:32,840 --> 01:23:39,440
yep so one thing i think jacob

01:23:36,560 --> 01:23:40,239
i think uh went into the latest uh

01:23:39,440 --> 01:23:42,800
thanos call

01:23:40,239 --> 01:23:43,920
and he said that cortex want to kind of

01:23:42,800 --> 01:23:48,000
experiment with different

01:23:43,920 --> 01:23:50,320
sampling and maybe trying to

01:23:48,000 --> 01:23:51,520
play with the thanos one so that's kind

01:23:50,320 --> 01:23:55,520
of cool on this side

01:23:51,520 --> 01:23:58,239
and i think there are there is one

01:23:55,520 --> 01:24:00,239
kind of question mark around uh thanos

01:23:58,239 --> 01:24:03,120
down sampling for example we are having

01:24:00,239 --> 01:24:04,000
three different blocks uh we could kind

01:24:03,120 --> 01:24:05,840
of have one

01:24:04,000 --> 01:24:07,600
and store really chunks three different

01:24:05,840 --> 01:24:09,840
chunks for different resolutions

01:24:07,600 --> 01:24:11,760
and share the same index so there are

01:24:09,840 --> 01:24:15,120
kind of opportunities to improve this

01:24:11,760 --> 01:24:18,719
uh but yeah why not

01:24:15,120 --> 01:24:20,719
so are you suggesting that we wait until

01:24:18,719 --> 01:24:21,840
cortex experimentation is done or are

01:24:20,719 --> 01:24:26,320
you saying

01:24:21,840 --> 01:24:28,480
just keep it um as experimental for now

01:24:26,320 --> 01:24:30,560
i would say let's start if someone wants

01:24:28,480 --> 01:24:33,920
to you know experiment with this yeah

01:24:30,560 --> 01:24:36,159
but i'm just giving context

01:24:33,920 --> 01:24:36,159
okay

01:24:38,880 --> 01:24:42,239
i mean initially i had i had some

01:24:40,560 --> 01:24:43,920
questions around doing this

01:24:42,239 --> 01:24:45,600
completely live or doing a batch doing

01:24:43,920 --> 01:24:48,080
it or off

01:24:45,600 --> 01:24:49,040
offline or not editing or having local

01:24:48,080 --> 01:24:50,560
copy and such

01:24:49,040 --> 01:24:52,639
but i think all of those have been

01:24:50,560 --> 01:24:53,120
answered by just doing what thanos does

01:24:52,639 --> 01:24:59,040
so

01:24:53,120 --> 01:25:00,719
we can just delete this

01:24:59,040 --> 01:25:02,800
yeah it would have to be some kind of go

01:25:00,719 --> 01:25:06,080
routine that in prometheus

01:25:02,800 --> 01:25:12,960
versus the sidecar microservice style

01:25:06,080 --> 01:25:14,960
that thanos does

01:25:12,960 --> 01:25:16,719
just like any normal compact the

01:25:14,960 --> 01:25:18,000
compactor compactions happen in

01:25:16,719 --> 01:25:20,400
prometheus

01:25:18,000 --> 01:25:21,040
okay but this means nothing in prom tool

01:25:20,400 --> 01:25:24,239
or anything

01:25:21,040 --> 01:25:27,520
do it in primitives proper

01:25:24,239 --> 01:25:29,679
yeah it should work

01:25:27,520 --> 01:25:32,960
i guess if we are doing it in cortex we

01:25:29,679 --> 01:25:32,960
do it in the compactor

01:25:34,080 --> 01:25:37,600
yeah and the same is happening on panels

01:25:35,920 --> 01:25:41,840
so that would be part

01:25:37,600 --> 01:25:41,840
probably okay

01:25:43,280 --> 01:25:46,320
one thing we should probably also

01:25:45,360 --> 01:25:49,600
support it in

01:25:46,320 --> 01:25:51,600
prom tools so if you have offline copies

01:25:49,600 --> 01:25:52,080
while you migrate data or such you can

01:25:51,600 --> 01:25:55,440
do it

01:25:52,080 --> 01:25:58,719
by hand if you want to

01:25:55,440 --> 01:26:02,560
no the

01:25:58,719 --> 01:26:05,840
the the way the compact works in thanos

01:26:02,560 --> 01:26:08,800
um it just finds anything that's

01:26:05,840 --> 01:26:10,480
down sampleable and applies it from

01:26:08,800 --> 01:26:13,040
oldest to newest

01:26:10,480 --> 01:26:14,800
my point is maybe i have data on disk

01:26:13,040 --> 01:26:16,560
and i want to compress it but i don't

01:26:14,800 --> 01:26:18,400
want to add any new data

01:26:16,560 --> 01:26:19,679
i don't want to currently run a

01:26:18,400 --> 01:26:21,840
prometheus on that

01:26:19,679 --> 01:26:24,480
live data i don't want to append any

01:26:21,840 --> 01:26:27,920
data i just want to do this by hand

01:26:24,480 --> 01:26:32,320
but okay it's an implementation detail

01:26:27,920 --> 01:26:33,840
it's a problem tool or something

01:26:32,320 --> 01:26:35,440
that was my point that once we have that

01:26:33,840 --> 01:26:36,000
functionality that chrome tool should

01:26:35,440 --> 01:26:38,639
maybe also

01:26:36,000 --> 01:26:39,360
support it so you just can do it if you

01:26:38,639 --> 01:26:42,320
want to

01:26:39,360 --> 01:26:42,320
as part of what i have

01:26:43,199 --> 01:26:48,159
just one thing as maintainer formatives

01:26:45,679 --> 01:26:50,480
i would not

01:26:48,159 --> 01:26:52,400
depend on thanos code because then we

01:26:50,480 --> 01:26:54,880
end up in a real spaghetti

01:26:52,400 --> 01:26:55,840
dependency tree but i am really fine

01:26:54,880 --> 01:26:57,520
with taking

01:26:55,840 --> 01:26:59,360
code from thanos and keeping their

01:26:57,520 --> 01:27:02,840
copyright on that on them

01:26:59,360 --> 01:27:05,840
and i think apache 2 allows us to do

01:27:02,840 --> 01:27:05,840
that

01:27:06,239 --> 01:27:13,120
we can ask people to library it out

01:27:09,440 --> 01:27:13,440
no exactly or we can you know vendor it

01:27:13,120 --> 01:27:15,040
in

01:27:13,440 --> 01:27:16,800
in prometheus and actually do it in

01:27:15,040 --> 01:27:17,760
primitives and then thanos is importing

01:27:16,800 --> 01:27:20,960
from views

01:27:17,760 --> 01:27:23,520
all options though possible yeah i think

01:27:20,960 --> 01:27:25,040
upstreaming makes sense

01:27:23,520 --> 01:27:27,280
the only question is should we upstream

01:27:25,040 --> 01:27:33,840
this before

01:27:27,280 --> 01:27:33,840
all other experiments are done or not

01:27:36,719 --> 01:27:41,920
i mean how much do we lock ourselves in

01:27:38,800 --> 01:27:41,920
if we upstream it now

01:27:42,480 --> 01:27:47,840
the only potential thing might be that

01:27:44,719 --> 01:27:51,040
the resulting down sampling is somewhat

01:27:47,840 --> 01:27:54,080
is in some way incompatible with uh

01:27:51,040 --> 01:27:56,320
with the new down sampling and

01:27:54,080 --> 01:27:58,480
certain assumptions about how the

01:27:56,320 --> 01:28:00,480
downsampling worked

01:27:58,480 --> 01:28:01,840
were then broken when you query the data

01:28:00,480 --> 01:28:03,679
or some such but i don't know if that's

01:28:01,840 --> 01:28:05,280
a realistic concern

01:28:03,679 --> 01:28:07,440
but that's the only concern i can think

01:28:05,280 --> 01:28:09,440
of i mean i don't know

01:28:07,440 --> 01:28:11,120
it depends on how we store it but i'm

01:28:09,440 --> 01:28:13,520
guessing if that happens

01:28:11,120 --> 01:28:16,800
we could just discard the old down

01:28:13,520 --> 01:28:18,639
sample stuff and do it again

01:28:16,800 --> 01:28:19,840
well not if you don't have the actual

01:28:18,639 --> 01:28:22,719
data yeah

01:28:19,840 --> 01:28:24,880
okay yeah that's my point if you have

01:28:22,719 --> 01:28:27,600
lossy compression and then you realize

01:28:24,880 --> 01:28:28,800
that you don't need to look at the last

01:28:27,600 --> 01:28:30,320
you need to look at the middle or the

01:28:28,800 --> 01:28:32,000
first or what have you like one of those

01:28:30,320 --> 01:28:34,159
fundamental things which changes the

01:28:32,000 --> 01:28:36,320
mathematical properties of the data

01:28:34,159 --> 01:28:38,080
and you don't have the original anymore

01:28:36,320 --> 01:28:39,520
but that doesn't seem to be a strong

01:28:38,080 --> 01:28:41,520
concern and as long as it's behind a

01:28:39,520 --> 01:28:43,440
feature flag whatever

01:28:41,520 --> 01:28:46,159
and i mean it's something that if if

01:28:43,440 --> 01:28:47,679
that happens

01:28:46,159 --> 01:28:50,000
we would have to solve or like finals

01:28:47,679 --> 01:28:51,840
would have to solve it anyway

01:28:50,000 --> 01:28:54,320
so whatever whatever finance comes up

01:28:51,840 --> 01:28:56,480
with for solving that

01:28:54,320 --> 01:28:58,800
we can apply that to the local storage

01:28:56,480 --> 01:28:58,800
as well

01:28:58,880 --> 01:29:02,159
yeah so one thing important to note is

01:29:01,360 --> 01:29:04,000
that if you

01:29:02,159 --> 01:29:06,239
do don't sampling it is because you want

01:29:04,000 --> 01:29:07,760
to keep data for a long time so if we

01:29:06,239 --> 01:29:11,280
put something out there we will need to

01:29:07,760 --> 01:29:14,320
support it for a long time

01:29:11,280 --> 01:29:16,639
that's a which is why we put it behind

01:29:14,320 --> 01:29:17,600
experiment for until we're confident we

01:29:16,639 --> 01:29:25,840
can do that

01:29:17,600 --> 01:29:25,840
for two years

01:29:26,159 --> 01:29:30,000
yeah i mean yeah i think making it

01:29:28,159 --> 01:29:33,199
experimental is definitely good

01:29:30,000 --> 01:29:34,159
and then once all the experimentation is

01:29:33,199 --> 01:29:36,320
done

01:29:34,159 --> 01:29:37,360
right if it's experimental we can also

01:29:36,320 --> 01:29:39,840
basically say yeah

01:29:37,360 --> 01:29:39,840
sorry

01:29:41,440 --> 01:29:46,239
yeah i i we need to make this extra

01:29:45,120 --> 01:29:49,520
extra x look

01:29:46,239 --> 01:29:51,440
extra clear that there might be a case

01:29:49,520 --> 01:29:52,719
however unlikely that you're actually

01:29:51,440 --> 01:29:55,440
not able to use

01:29:52,719 --> 01:29:55,840
that anymore but i i think julian is

01:29:55,440 --> 01:29:58,560
right

01:29:55,840 --> 01:30:00,159
that this will be a much larger problem

01:29:58,560 --> 01:30:02,320
for thanos than it would be for

01:30:00,159 --> 01:30:05,520
prometheus anyway

01:30:02,320 --> 01:30:10,639
so whatever might come out of this

01:30:05,520 --> 01:30:10,639
would need to be solved by thanos anyway

01:30:12,400 --> 01:30:16,719
just curious uh maybe let's understand

01:30:14,960 --> 01:30:17,600
what exactly we are looking for we don't

01:30:16,719 --> 01:30:20,480
sampling here

01:30:17,600 --> 01:30:22,560
are we looking for ability to do a fast

01:30:20,480 --> 01:30:27,679
queries over a long period of time

01:30:22,560 --> 01:30:30,800
or are we looking to use less storage

01:30:27,679 --> 01:30:30,800
i think less storage

01:30:30,960 --> 01:30:34,159
no i think more of it for me it's more

01:30:33,440 --> 01:30:36,080
about the

01:30:34,159 --> 01:30:38,480
queries over a long time it's something

01:30:36,080 --> 01:30:41,040
that we have big problems with

01:30:38,480 --> 01:30:42,560
yeah for me it's more the side of just

01:30:41,040 --> 01:30:44,159
like dropping a lot of blocks that i

01:30:42,560 --> 01:30:46,800
don't need but still being able to see

01:30:44,159 --> 01:30:50,159
some data from one year ago

01:30:46,800 --> 01:30:53,120
and don't need to install s3

01:30:50,159 --> 01:30:54,719
so it sounds like both then we're

01:30:53,120 --> 01:30:57,920
currently at two volts for each

01:30:54,719 --> 01:30:58,320
for each yeah that's that's why julian i

01:30:57,920 --> 01:31:00,159
think

01:30:58,320 --> 01:31:02,719
you you mentioned that this is connected

01:31:00,159 --> 01:31:04,800
with the uh

01:31:02,719 --> 01:31:06,880
better series retention that we kind of

01:31:04,800 --> 01:31:09,199
want to start with chris right

01:31:06,880 --> 01:31:09,199
yes

01:31:10,000 --> 01:31:14,880
so ability to essentially drop some of

01:31:13,600 --> 01:31:16,960
the data down sample

01:31:14,880 --> 01:31:18,800
other parts of the data and then kind of

01:31:16,960 --> 01:31:23,440
have this

01:31:18,800 --> 01:31:23,440
yeah that makes it more tricky yeah

01:31:26,960 --> 01:31:31,679
but i think it makes it tricky but

01:31:30,159 --> 01:31:34,400
as long as we make it clear that this is

01:31:31,679 --> 01:31:37,120
experimental because it's tricky

01:31:34,400 --> 01:31:38,080
and like it may end up being that you

01:31:37,120 --> 01:31:40,400
need to write your

01:31:38,080 --> 01:31:42,000
the conversion code so that it work it

01:31:40,400 --> 01:31:44,000
still works and we don't throw away your

01:31:42,000 --> 01:31:48,159
data if you care that much

01:31:44,000 --> 01:31:48,159
then people can try and use it right

01:31:49,040 --> 01:31:52,639
we just need to be clear that data loss

01:31:51,760 --> 01:31:55,600
is

01:31:52,639 --> 01:31:56,239
or that we we may just make changes that

01:31:55,600 --> 01:31:59,840
mean you

01:31:56,239 --> 01:31:59,840
have to throw away your old data

01:32:05,520 --> 01:32:10,560
and i mean even even if that's the case

01:32:08,480 --> 01:32:13,920
there is still the migration path

01:32:10,560 --> 01:32:15,120
of run an old prometheus run a new

01:32:13,920 --> 01:32:18,159
prometheus

01:32:15,120 --> 01:32:20,239
use prom migrator to copy the data over

01:32:18,159 --> 01:32:22,000
it maybe it may get misaligned and it

01:32:20,239 --> 01:32:23,040
may be a bit wonky because we were

01:32:22,000 --> 01:32:26,159
looking at

01:32:23,040 --> 01:32:29,280
the last and not the middle but

01:32:26,159 --> 01:32:31,440
at least you can carry your data over so

01:32:29,280 --> 01:32:33,760
there is always there is a way

01:32:31,440 --> 01:32:33,760
um

01:32:35,360 --> 01:32:41,600
thanks for linking bartek tom as this is

01:32:38,960 --> 01:32:42,400
our jar cup lisi uh do do you happen to

01:32:41,600 --> 01:32:44,880
know

01:32:42,400 --> 01:32:46,159
how what time frame his experimentation

01:32:44,880 --> 01:32:50,080
would be on

01:32:46,159 --> 01:32:52,840
or what directions he would be going

01:32:50,080 --> 01:32:55,679
okay no it's faster hardware actually

01:32:52,840 --> 01:32:58,159
okay

01:32:55,679 --> 01:32:58,159
gotham

01:33:03,520 --> 01:33:09,600
okay no no idea i think that could

01:33:06,560 --> 01:33:10,400
do explore first but uh yeah i don't

01:33:09,600 --> 01:33:14,400
know

01:33:10,400 --> 01:33:17,760
we talked about on thanos hours

01:33:14,400 --> 01:33:20,159
okay but for so

01:33:17,760 --> 01:33:20,159
the queen

01:33:20,960 --> 01:33:24,560
i i don't have a strong opinion either

01:33:22,639 --> 01:33:26,560
way i just want to avoid us running into

01:33:24,560 --> 01:33:30,080
a situation where we regret it in

01:33:26,560 --> 01:33:30,080
in two months or six months

01:33:30,159 --> 01:33:34,400
so what's what's the feeling of the room

01:33:32,080 --> 01:33:36,800
should we

01:33:34,400 --> 01:33:38,800
so first of all do we agree that we want

01:33:36,800 --> 01:33:40,480
downsampling in prometheus and i think

01:33:38,800 --> 01:33:42,719
everyone agrees so we can

01:33:40,480 --> 01:33:44,960
nail that down as a consensus and then

01:33:42,719 --> 01:33:51,840
we can do the second one

01:33:44,960 --> 01:33:51,840
okay consensus

01:33:54,000 --> 01:33:58,400
so formally consensus we want to support

01:33:57,120 --> 01:34:01,760
down sampling

01:33:58,400 --> 01:34:01,760
i'll agree to anyone disagreeing

01:34:02,840 --> 01:34:08,639
whoop so time frame do we

01:34:06,320 --> 01:34:10,480
who feels strongly about waiting until

01:34:08,639 --> 01:34:11,600
cortex air experiments are done who

01:34:10,480 --> 01:34:14,400
feels strongly about

01:34:11,600 --> 01:34:14,400
just doing it now

01:34:16,960 --> 01:34:22,960
might be worth waiting to see uh see

01:34:20,000 --> 01:34:22,960
what the experiments show

01:34:26,719 --> 01:34:31,040
is there anyone who just wants to get

01:34:28,639 --> 01:34:33,600
started with this work already

01:34:31,040 --> 01:34:35,440
and and is willing to to to toss away

01:34:33,600 --> 01:34:38,800
part of that work if it turns out that

01:34:35,440 --> 01:34:38,800
the other experiments are better

01:34:40,560 --> 01:34:44,320
i think that we did not have that

01:34:42,560 --> 01:34:47,040
feature and having

01:34:44,320 --> 01:34:48,960
it for two months might not be worth it

01:34:47,040 --> 01:34:51,760
or three months

01:34:48,960 --> 01:34:52,320
yeah i think especially that that uh tom

01:34:51,760 --> 01:34:54,080
or like

01:34:52,320 --> 01:34:56,159
other graphic people are not aware of

01:34:54,080 --> 01:34:57,440
any kind of solid ideas and i think

01:34:56,159 --> 01:35:00,320
cortex has

01:34:57,440 --> 01:35:00,639
a one day block for example size so

01:35:00,320 --> 01:35:02,320
that's

01:35:00,639 --> 01:35:04,000
already kind of blocking some kind of

01:35:02,320 --> 01:35:06,880
down sampling

01:35:04,000 --> 01:35:08,880
we can apply so given that i don't think

01:35:06,880 --> 01:35:11,679
there is any blocker on

01:35:08,880 --> 01:35:13,040
trying it out if anyone wants to try

01:35:11,679 --> 01:35:14,639
right

01:35:13,040 --> 01:35:16,320
yeah i don't think we should be block

01:35:14,639 --> 01:35:18,800
anyone from cortex or van laap should be

01:35:16,320 --> 01:35:18,800
blocking this

01:35:20,960 --> 01:35:25,440
just fyi jakob would be around so we can

01:35:23,440 --> 01:35:28,719
also ask him to join the call to to see

01:35:25,440 --> 01:35:32,000
what his actual plans are

01:35:28,719 --> 01:35:34,320
should we sure

01:35:32,000 --> 01:35:34,320
okay

01:35:39,679 --> 01:35:43,840
let's see

01:35:44,159 --> 01:35:57,840
yep gonna be joining

01:36:05,760 --> 01:36:11,840
hello hello ah frederick is also joining

01:36:08,960 --> 01:36:13,520
so uh jacob for your information we were

01:36:11,840 --> 01:36:15,840
just talking about dawn sampling in

01:36:13,520 --> 01:36:17,520
prometheus we agreed that we do want to

01:36:15,840 --> 01:36:19,119
have down something in prometheus and

01:36:17,520 --> 01:36:20,560
bartek mentioned

01:36:19,119 --> 01:36:22,239
that you want to do some experiments

01:36:20,560 --> 01:36:25,360
within cortex about how to do

01:36:22,239 --> 01:36:27,520
downsampling and now we are wondering if

01:36:25,360 --> 01:36:29,119
those might be like the results if they

01:36:27,520 --> 01:36:31,440
might be incompatible with how

01:36:29,119 --> 01:36:32,639
how how the properties of the actual

01:36:31,440 --> 01:36:35,360
down sample data are

01:36:32,639 --> 01:36:36,960
within cortex as opposed to thanos and

01:36:35,360 --> 01:36:39,199
if it makes sense to

01:36:36,960 --> 01:36:40,080
to wait uh for your experiments to

01:36:39,199 --> 01:36:43,840
finish or not

01:36:40,080 --> 01:36:44,239
um i we haven't really started anything

01:36:43,840 --> 01:36:47,280
on

01:36:44,239 --> 01:36:49,600
our side like so i i would if

01:36:47,280 --> 01:36:50,960
there's uh if there's an opportunity to

01:36:49,600 --> 01:36:53,360
do this in prometheus that's where i

01:36:50,960 --> 01:36:54,960
want to do it that's all i'll say

01:36:53,360 --> 01:36:57,040
so i would much rather converge on a

01:36:54,960 --> 01:37:00,800
solution in prometheus than have to

01:36:57,040 --> 01:37:00,800
have divergent solutions in each project

01:37:00,880 --> 01:37:05,600
we would like to have a converged

01:37:03,760 --> 01:37:06,000
solution for all three projects uh

01:37:05,600 --> 01:37:08,480
anyway

01:37:06,000 --> 01:37:09,760
the question is um do you have a

01:37:08,480 --> 01:37:10,960
timeline for your experiments or

01:37:09,760 --> 01:37:12,719
anything cause we're trying to figure

01:37:10,960 --> 01:37:14,080
out if it makes sense to wait or if we

01:37:12,719 --> 01:37:15,760
should just

01:37:14,080 --> 01:37:17,040
i i don't because i don't even know if

01:37:15,760 --> 01:37:19,360
i'll be able to work on it this quarter

01:37:17,040 --> 01:37:22,480
so there's no timeline right now

01:37:19,360 --> 01:37:22,480
and i would say don't wait

01:37:23,360 --> 01:37:25,679
okay

01:37:27,119 --> 01:37:31,360
so then let's do the call for consensus

01:37:29,679 --> 01:37:33,520
um

01:37:31,360 --> 01:37:34,719
thank you are you also more than welcome

01:37:33,520 --> 01:37:37,520
to j uh to

01:37:34,719 --> 01:37:39,920
to stay i can't english today too much

01:37:37,520 --> 01:37:39,920
talking

01:37:46,840 --> 01:37:49,840
um

01:38:05,840 --> 01:38:09,679
consensus we will use thanos version for

01:38:08,239 --> 01:38:12,320
now we will use

01:38:09,679 --> 01:38:14,000
the thanos version for now and await

01:38:12,320 --> 01:38:16,080
cortex experiments

01:38:14,000 --> 01:38:19,040
all three projects should use the same

01:38:16,080 --> 01:38:19,040
solution in the end

01:38:19,199 --> 01:38:22,560
all agreed anyone disagreeing

01:38:25,199 --> 01:38:33,760
good good

01:38:30,239 --> 01:38:34,639
so we have frederick so i think we can

01:38:33,760 --> 01:38:37,840
pull one

01:38:34,639 --> 01:38:37,840
forward it was this

01:38:38,080 --> 01:38:41,679
it was the dynamic scraping oh yeah yeah

01:38:41,119 --> 01:38:44,159
thank you

01:38:41,679 --> 01:38:45,520
thank you um we we shoved this on the

01:38:44,159 --> 01:38:47,040
back burner frederick

01:38:45,520 --> 01:38:49,119
as you went there and we wanted to have

01:38:47,040 --> 01:38:49,840
you here for this but now we have you

01:38:49,119 --> 01:38:51,600
here

01:38:49,840 --> 01:38:54,159
dynamic scrape intervals and scrape

01:38:51,600 --> 01:38:54,159
priority

01:38:56,000 --> 01:39:00,000
all right i think i i don't i don't

01:38:58,960 --> 01:39:03,920
think i remember

01:39:00,000 --> 01:39:05,600
dynamic scrape intervals but um i think

01:39:03,920 --> 01:39:07,199
i think what i meant was that we could

01:39:05,600 --> 01:39:09,600
you configure it

01:39:07,199 --> 01:39:10,840
uh via relabeling i think that was the

01:39:09,600 --> 01:39:14,239
idea

01:39:10,840 --> 01:39:15,520
um basically i think that there's a

01:39:14,239 --> 01:39:17,600
larger topic of like

01:39:15,520 --> 01:39:19,920
making more or less everything

01:39:17,600 --> 01:39:23,119
configurable vr re-labeling

01:39:19,920 --> 01:39:24,639
because we kind of makes make it

01:39:23,119 --> 01:39:25,440
available for some things and not for

01:39:24,639 --> 01:39:27,040
others i do

01:39:25,440 --> 01:39:29,119
think it makes sense for some things and

01:39:27,040 --> 01:39:31,679
not for others but i feel like

01:39:29,119 --> 01:39:33,199
uh scrape interval should be possible

01:39:31,679 --> 01:39:36,239
through relabeling

01:39:33,199 --> 01:39:38,000
um and then the other thing was um can

01:39:36,239 --> 01:39:39,920
you talk about the use case a little bit

01:39:38,000 --> 01:39:41,360
because i'm a little bit lost about like

01:39:39,920 --> 01:39:44,400
why

01:39:41,360 --> 01:39:47,520
why at all i mean

01:39:44,400 --> 01:39:50,639
there are basically i wanted to be

01:39:47,520 --> 01:39:53,520
easier for kind of um

01:39:50,639 --> 01:39:54,080
let's call them end users to to choose

01:39:53,520 --> 01:39:57,280
the

01:39:54,080 --> 01:39:59,119
um skype interval themselves um so like

01:39:57,280 --> 01:40:00,239
in a kubernetes cluster for example i

01:39:59,119 --> 01:40:04,320
want people

01:40:00,239 --> 01:40:06,560
uh to configure it via an annotation on

01:40:04,320 --> 01:40:08,800
their pods or something like that right

01:40:06,560 --> 01:40:10,400
um and not necessarily have to go that

01:40:08,800 --> 01:40:12,880
um route so

01:40:10,400 --> 01:40:14,239
like for example one of the reasons why

01:40:12,880 --> 01:40:15,360
people love using the prometheus

01:40:14,239 --> 01:40:17,199
operator is because

01:40:15,360 --> 01:40:18,639
it's kind of self-service monitoring

01:40:17,199 --> 01:40:21,119
right and i kind of

01:40:18,639 --> 01:40:22,880
don't want all that necessarily to need

01:40:21,119 --> 01:40:24,960
to be in the prometheus operator

01:40:22,880 --> 01:40:27,679
as much as possible i would want to be

01:40:24,960 --> 01:40:29,600
able to service that through prometheus

01:40:27,679 --> 01:40:32,159
directly and scrape intervals just one

01:40:29,600 --> 01:40:34,960
of those examples

01:40:32,159 --> 01:40:34,960
does that make sense

01:40:35,280 --> 01:40:39,520
what happens if someone samples in an

01:40:37,920 --> 01:40:43,119
invalid time like an

01:40:39,520 --> 01:40:44,639
an invalid duration or relabels in an

01:40:43,119 --> 01:40:48,560
invalid iteration

01:40:44,639 --> 01:40:51,280
so since since we have the

01:40:48,560 --> 01:40:52,239
the target limit we can actually now set

01:40:51,280 --> 01:40:55,280
an error for

01:40:52,239 --> 01:40:57,440
all this for a specific target that will

01:40:55,280 --> 01:40:59,360
like in conjunction that scrape it but

01:40:57,440 --> 01:41:01,119
like in the default script interval you

01:40:59,360 --> 01:41:02,400
would get an error run up equal zero in

01:41:01,119 --> 01:41:04,080
primitives

01:41:02,400 --> 01:41:05,760
and this does not require questions

01:41:04,080 --> 01:41:07,760
because we have made that work to have

01:41:05,760 --> 01:41:11,199
like generic errors already

01:41:07,760 --> 01:41:12,639
in primitives so it would be up equal

01:41:11,199 --> 01:41:16,480
zero and you would have the

01:41:12,639 --> 01:41:18,480
error basically the answer is

01:41:16,480 --> 01:41:19,840
the the same thing as anything else when

01:41:18,480 --> 01:41:24,560
you relabel

01:41:19,840 --> 01:41:24,560
trash into a configuration label

01:41:25,040 --> 01:41:28,960
cool yeah that makes sense and i also

01:41:27,440 --> 01:41:31,360
seen the advantage

01:41:28,960 --> 01:41:33,199
in that a lot of people are using

01:41:31,360 --> 01:41:34,800
multiple screen config where just one

01:41:33,199 --> 01:41:36,239
would be fine and sometimes they use

01:41:34,800 --> 01:41:37,920
different texts and then

01:41:36,239 --> 01:41:39,360
promote it is actually like using

01:41:37,920 --> 01:41:41,520
multiple uh

01:41:39,360 --> 01:41:43,440
connections to kubernetes or to console

01:41:41,520 --> 01:41:44,880
and they could just use one

01:41:43,440 --> 01:41:46,880
they don't know that they can do that

01:41:44,880 --> 01:41:48,800
well nowadays by uh

01:41:46,880 --> 01:41:50,639
using reliable conflicts but if we could

01:41:48,800 --> 01:41:52,080
like add another option for them to do

01:41:50,639 --> 01:41:54,880
that this would be fine

01:41:52,080 --> 01:41:56,800
i also know that we have always reserved

01:41:54,880 --> 01:41:57,360
everything except underscore underscore

01:41:56,800 --> 01:42:00,159
media and

01:41:57,360 --> 01:42:00,560
underscore the score tmp for future use

01:42:00,159 --> 01:42:02,480
so

01:42:00,560 --> 01:42:04,719
we can actually add extra labels there

01:42:02,480 --> 01:42:07,280
without issues

01:42:04,719 --> 01:42:09,199
yeah that's sort of what i was thinking

01:42:07,280 --> 01:42:13,199
like underscore underscores

01:42:09,199 --> 01:42:16,239
grape interval right like

01:42:13,199 --> 01:42:16,239
continue that pattern

01:42:17,040 --> 01:42:21,040
i guess it's kind of two topics uh it

01:42:19,280 --> 01:42:24,800
seems like

01:42:21,040 --> 01:42:24,800
nobody's totally against this one

01:42:26,320 --> 01:42:29,760
should we should we do a vote on that

01:42:28,080 --> 01:42:31,440
one separately and then talk about skype

01:42:29,760 --> 01:42:32,159
priority because i feel like that was

01:42:31,440 --> 01:42:36,080
more

01:42:32,159 --> 01:42:36,080
controversial last time we touched on it

01:42:37,199 --> 01:42:41,199
i you probably know the the scraping

01:42:39,360 --> 01:42:42,400
code better than i do frederick but

01:42:41,199 --> 01:42:44,239
i actually think this might be quite

01:42:42,400 --> 01:42:47,119
tricky to implement

01:42:44,239 --> 01:42:49,920
priority no no the the relabeling for

01:42:47,119 --> 01:42:49,920
the scraping tool

01:42:50,960 --> 01:42:54,800
i was just thinking about the use case i

01:42:53,280 --> 01:42:58,639
did not think about how

01:42:54,800 --> 01:42:58,639
difficult it would be to implement

01:42:59,199 --> 01:43:03,520
i i i don't think it will be tricky to

01:43:02,480 --> 01:43:06,400
implement right

01:43:03,520 --> 01:43:06,880
um you'd have to attach it to the target

01:43:06,400 --> 01:43:10,400
set

01:43:06,880 --> 01:43:13,600
before you pass it to service discovery

01:43:10,400 --> 01:43:15,119
yeah it shouldn't be too bad but you'd

01:43:13,600 --> 01:43:16,639
have to essentially

01:43:15,119 --> 01:43:19,119
look at all the targets from service

01:43:16,639 --> 01:43:22,840
discovery and then split them into

01:43:19,119 --> 01:43:24,080
um scrape pools based on the annotation

01:43:22,840 --> 01:43:26,719
essentially

01:43:24,080 --> 01:43:29,040
um well i don't think there is anything

01:43:26,719 --> 01:43:31,840
preventing us to have multiple intervals

01:43:29,040 --> 01:43:31,840
in one scrap pool

01:43:31,920 --> 01:43:38,560
uh yeah that's true yeah

01:43:35,040 --> 01:43:40,320
i don't think we need more scrap i i

01:43:38,560 --> 01:43:42,719
because like we do the sleep like for

01:43:40,320 --> 01:43:45,199
each target individually

01:43:42,719 --> 01:43:46,480
yeah so while the tick sorry so uh this

01:43:45,199 --> 01:43:49,679
should not be an issue

01:43:46,480 --> 01:43:49,679
and uh so

01:43:50,560 --> 01:43:54,000
yeah but but that that brings up um an

01:43:52,719 --> 01:43:55,119
interesting point though at the very

01:43:54,000 --> 01:43:57,520
least we should add

01:43:55,119 --> 01:43:58,880
to the targets page what the scrape

01:43:57,520 --> 01:44:02,000
interval is for this

01:43:58,880 --> 01:44:04,080
particular target so that um

01:44:02,000 --> 01:44:06,400
you you know at a glance of of the

01:44:04,080 --> 01:44:07,679
targets page right and not have to

01:44:06,400 --> 01:44:10,480
i don't know i guess you would need to

01:44:07,679 --> 01:44:13,600
look at the discovery page right now

01:44:10,480 --> 01:44:14,080
um if we do it via via label that would

01:44:13,600 --> 01:44:15,920
be

01:44:14,080 --> 01:44:17,760
majorly confusing i think so at the very

01:44:15,920 --> 01:44:21,280
least for this it should be on the

01:44:17,760 --> 01:44:23,679
targets page as well

01:44:21,280 --> 01:44:26,560
i think column you want to say something

01:44:23,679 --> 01:44:26,560
i was just going to agree

01:44:27,360 --> 01:44:34,000
i mean we should not um

01:44:31,520 --> 01:44:35,920
we should take care not to overload the

01:44:34,000 --> 01:44:39,199
page itself too much

01:44:35,920 --> 01:44:42,159
so maybe it can be behind like a

01:44:39,199 --> 01:44:43,760
some drop down or like some something

01:44:42,159 --> 01:44:46,000
that makes it

01:44:43,760 --> 01:44:47,920
i mean the thing is especially if we add

01:44:46,000 --> 01:44:49,679
more and more of these parameters right

01:44:47,920 --> 01:44:50,480
eventually the target pages get super

01:44:49,679 --> 01:44:52,719
long

01:44:50,480 --> 01:44:54,639
so my proposal would be just like we

01:44:52,719 --> 01:44:57,440
have a tooltip with the hidden

01:44:54,639 --> 01:44:59,840
um with the hidden labels that we can

01:44:57,440 --> 01:45:01,679
have a tooltip on the last

01:44:59,840 --> 01:45:04,639
interval time when you can see okay this

01:45:01,679 --> 01:45:08,639
is escape interval for that target

01:45:04,639 --> 01:45:11,360
i like it but i mean that's that's kind

01:45:08,639 --> 01:45:13,119
of detailed work that yes

01:45:11,360 --> 01:45:14,880
i agree it seems like we're not totally

01:45:13,119 --> 01:45:17,840
against it if it's reasonably

01:45:14,880 --> 01:45:17,840
possible technically

01:45:20,239 --> 01:45:23,040
shall we call about

01:45:25,440 --> 01:45:30,000
yep consensus we want to be able to

01:45:29,280 --> 01:45:33,600
configure scrape

01:45:30,000 --> 01:45:33,600
intervals while relabeling

01:45:36,560 --> 01:45:40,480
i'll abstain myself because i'm not

01:45:39,119 --> 01:45:44,000
convinced but i also

01:45:40,480 --> 01:45:47,040
will not block so just to note it but it

01:45:44,000 --> 01:45:47,040
doesn't need to be in the record

01:45:47,760 --> 01:45:51,760
well i know that this is one of the

01:45:50,159 --> 01:45:55,119
frequent feature requests we

01:45:51,760 --> 01:45:55,119
have for from users so

01:45:55,520 --> 01:46:01,280
i'm torn on the biorelabing port part

01:45:58,960 --> 01:46:02,880
that's that's where i'm torn maybe we

01:46:01,280 --> 01:46:05,040
can also split it into two but

01:46:02,880 --> 01:46:06,400
i'm also fine just letting it run like i

01:46:05,040 --> 01:46:09,920
don't want to block it

01:46:06,400 --> 01:46:09,920
i'm just not super convinced

01:46:11,119 --> 01:46:16,639
i i don't i yeah do you have an

01:46:14,480 --> 01:46:19,280
alternative proposal

01:46:16,639 --> 01:46:20,239
no which is why i noted it but i'm

01:46:19,280 --> 01:46:22,960
trying not to

01:46:20,239 --> 01:46:23,600
to block it or anything because it just

01:46:22,960 --> 01:46:27,199
smells

01:46:23,600 --> 01:46:30,639
weird but well this is the same as

01:46:27,199 --> 01:46:33,520
configuring the the target the matrix

01:46:30,639 --> 01:46:33,520
we are reliably

01:46:33,920 --> 01:46:37,199
yeah yeah and the address and all of

01:46:36,800 --> 01:46:41,840
that

01:46:37,199 --> 01:46:41,840
so it kind of to me it makes sense

01:46:42,000 --> 01:46:45,600
i guess relabeling would be there to

01:46:43,920 --> 01:46:48,639
stop the operator

01:46:45,600 --> 01:46:50,239
or to enable the operator from having

01:46:48,639 --> 01:46:52,239
you know teams that are deploying pods

01:46:50,239 --> 01:46:53,679
that have ridiculous scrape intervals

01:46:52,239 --> 01:46:55,840
and just being able to set a default

01:46:53,679 --> 01:46:55,840
right

01:46:58,719 --> 01:47:01,920
i think the the the normal use case

01:47:00,639 --> 01:47:04,159
would be that people set a pod

01:47:01,920 --> 01:47:05,679
annotation or something like that

01:47:04,159 --> 01:47:07,840
and then the operator can see oh they're

01:47:05,679 --> 01:47:08,800
setting it something ridiculous like one

01:47:07,840 --> 01:47:10,000
second

01:47:08,800 --> 01:47:11,840
and i'm just gonna say that every

01:47:10,000 --> 01:47:12,480
kubernetes pod is scraped 15 seconds or

01:47:11,840 --> 01:47:16,480
something like that

01:47:12,480 --> 01:47:16,880
like i mean the operator can already do

01:47:16,480 --> 01:47:19,360
that

01:47:16,880 --> 01:47:22,159
by looking at the pod monitors but i

01:47:19,360 --> 01:47:24,400
think the use case is more about

01:47:22,159 --> 01:47:26,480
the classic kubernetes like the classic

01:47:24,400 --> 01:47:28,159
style kubernetes scraping

01:47:26,480 --> 01:47:30,000
where you don't have an operator you

01:47:28,159 --> 01:47:32,480
just have one giant

01:47:30,000 --> 01:47:34,000
scrape everything in kubernetes job and

01:47:32,480 --> 01:47:36,320
then you filter it down and you

01:47:34,000 --> 01:47:39,600
configure it and you do everything

01:47:36,320 --> 01:47:41,040
with annotations or

01:47:39,600 --> 01:47:42,800
something that's not created at all it's

01:47:41,040 --> 01:47:45,440
console or whatever the other side

01:47:42,800 --> 01:47:48,000
yeah easy to like i mean that's the

01:47:45,440 --> 01:47:50,639
thing is that it applies to all

01:47:48,000 --> 01:47:51,280
equally and you don't have to and and it

01:47:50,639 --> 01:47:53,119
makes support

01:47:51,280 --> 01:47:56,159
i think it makes sense just as an

01:47:53,119 --> 01:47:58,960
extension of what's already there

01:47:56,159 --> 01:47:59,679
yeah that's kind of how i see it as well

01:47:58,960 --> 01:48:03,679
yeah it's

01:47:59,679 --> 01:48:05,360
the uh in in the configuration i was

01:48:03,679 --> 01:48:06,639
going to use for console

01:48:05,360 --> 01:48:08,960
we wouldn't be able to we'd have to

01:48:06,639 --> 01:48:11,040
configure two different console

01:48:08,960 --> 01:48:13,760
jobs in order to get different scraper

01:48:11,040 --> 01:48:19,840
intervals for different jobs

01:48:13,760 --> 01:48:19,840
so it makes sense to have this

01:48:23,600 --> 01:48:28,080
it seems like we're kind of violently

01:48:25,679 --> 01:48:28,080
agreeing

01:48:30,000 --> 01:48:33,440
i think we already had call for

01:48:31,280 --> 01:48:35,040
consensus but just to make sure

01:48:33,440 --> 01:48:36,560
consensus we want to be

01:48:35,040 --> 01:48:47,199
we want to be able to configure scrape

01:48:36,560 --> 01:48:50,239
intervals why are we labeling

01:48:47,199 --> 01:48:53,360
so scrap priority

01:48:50,239 --> 01:48:56,400
i i seem to remember that we either

01:48:53,360 --> 01:49:00,480
started discussing this once before or

01:48:56,400 --> 01:49:00,800
kind of ended up at a point where we

01:49:00,480 --> 01:49:04,400
said

01:49:00,800 --> 01:49:08,159
if we can reasonably um

01:49:04,400 --> 01:49:11,600
yes um reasonably determine

01:49:08,159 --> 01:49:12,880
what like overloaded means then we'd be

01:49:11,600 --> 01:49:14,480
open to discussing

01:49:12,880 --> 01:49:16,320
discussing something like this but like

01:49:14,480 --> 01:49:18,239
that's the thing that we

01:49:16,320 --> 01:49:19,920
we would need to have before we can talk

01:49:18,239 --> 01:49:22,800
about priority and i don't think we

01:49:19,920 --> 01:49:25,760
came to a conclusion on overloaded

01:49:22,800 --> 01:49:25,760
prometheus server

01:49:26,840 --> 01:49:29,840
yes

01:49:30,080 --> 01:49:33,520
i mean in my opinion the best signal

01:49:31,760 --> 01:49:34,719
i've overloaded is is whether you

01:49:33,520 --> 01:49:37,360
have are able to keep up with

01:49:34,719 --> 01:49:38,960
compactions um

01:49:37,360 --> 01:49:40,719
but in the in a prometheus world where

01:49:38,960 --> 01:49:42,239
blocks are time-bound like not not

01:49:40,719 --> 01:49:43,840
space-ban that that makes a little bit

01:49:42,239 --> 01:49:46,960
less sense

01:49:43,840 --> 01:49:50,239
i agree i i suppose another one

01:49:46,960 --> 01:49:52,800
could be uh like scrape

01:49:50,239 --> 01:49:56,480
scrapes happening at expected script or

01:49:52,800 --> 01:49:58,960
like insertions happening

01:49:56,480 --> 01:50:00,080
of scrapes happening at the interval

01:49:58,960 --> 01:50:03,360
that you expect but

01:50:00,080 --> 01:50:03,920
that those are like really vague terms

01:50:03,360 --> 01:50:07,440
right

01:50:03,920 --> 01:50:08,560
um it's been years since i ever saw like

01:50:07,440 --> 01:50:11,599
an intestine queue

01:50:08,560 --> 01:50:14,000
in prometheus i like this seems like

01:50:11,599 --> 01:50:16,239
i feel like this is not where it breaks

01:50:14,000 --> 01:50:16,239
down

01:50:16,480 --> 01:50:21,679
i i tend to agree i think it's more of a

01:50:19,840 --> 01:50:24,239
i mean for most people it tends to be a

01:50:21,679 --> 01:50:26,000
memory bottleneck right that they're

01:50:24,239 --> 01:50:27,599
they're doing something silly why they

01:50:26,000 --> 01:50:29,760
remember their

01:50:27,599 --> 01:50:31,440
prometheus has some cardinality

01:50:29,760 --> 01:50:34,400
explosion or something right

01:50:31,440 --> 01:50:36,000
and that's what they want to prevent so

01:50:34,400 --> 01:50:39,360
it seems like

01:50:36,000 --> 01:50:42,880
maybe the target

01:50:39,360 --> 01:50:44,239
and sample limit um and i think we had

01:50:42,880 --> 01:50:47,679
discussed like a

01:50:44,239 --> 01:50:50,960
series limit per target at one point

01:50:47,679 --> 01:50:53,840
um if we had those maybe that's

01:50:50,960 --> 01:50:56,800
enough i don't know and the rest is like

01:50:53,840 --> 01:51:00,080
capacity planning

01:50:56,800 --> 01:51:01,840
uh one other bug i ran into was label

01:51:00,080 --> 01:51:05,520
length limits

01:51:01,840 --> 01:51:08,400
being able to configure that i had

01:51:05,520 --> 01:51:10,080
i had a leaky piece of code that gave me

01:51:08,400 --> 01:51:12,000
megabyte labels

01:51:10,080 --> 01:51:13,679
i'm pretty sure like two deaf summits

01:51:12,000 --> 01:51:16,000
ago or something we already

01:51:13,679 --> 01:51:17,119
agreed on that yeah exactly we have

01:51:16,000 --> 01:51:20,080
someone who is

01:51:17,119 --> 01:51:22,800
going to look into that so yeah

01:51:20,080 --> 01:51:22,800
completely agree

01:51:23,679 --> 01:51:28,400
inherently the problem i have with with

01:51:26,480 --> 01:51:30,719
self-protecting against cardinality

01:51:28,400 --> 01:51:33,119
explosion somewhere else is

01:51:30,719 --> 01:51:34,000
what if that happens in my priority one

01:51:33,119 --> 01:51:35,679
thing

01:51:34,000 --> 01:51:37,040
because then i'm still taking out

01:51:35,679 --> 01:51:38,400
everything and then it becomes a little

01:51:37,040 --> 01:51:40,719
bit of a guessing game

01:51:38,400 --> 01:51:42,480
and not very much of protection whereas

01:51:40,719 --> 01:51:45,760
if you have static limits

01:51:42,480 --> 01:51:49,040
where you say if you go above x series

01:51:45,760 --> 01:51:54,080
per target or what have you

01:51:49,040 --> 01:51:56,080
you can you can put same default values

01:51:54,080 --> 01:51:57,679
and have so and have this protection

01:51:56,080 --> 01:52:00,159
evenly distributed

01:51:57,679 --> 01:52:01,360
without basically triggering endless

01:52:00,159 --> 01:52:03,360
fights within

01:52:01,360 --> 01:52:04,400
teams about what is what is most

01:52:03,360 --> 01:52:07,840
important and

01:52:04,400 --> 01:52:10,239
highest priority and

01:52:07,840 --> 01:52:11,760
when i crash prometheus it is not in the

01:52:10,239 --> 01:52:14,080
ingestion path but it is

01:52:11,760 --> 01:52:17,119
most of the time because i run a stupid

01:52:14,080 --> 01:52:20,000
query over 90 days

01:52:17,119 --> 01:52:20,320
or 100 million serious because yes like

01:52:20,000 --> 01:52:22,639
the

01:52:20,320 --> 01:52:23,920
the yeah kind of even even if you have a

01:52:22,639 --> 01:52:26,320
cardinality

01:52:23,920 --> 01:52:28,800
explosion the ingestion path is not what

01:52:26,320 --> 01:52:28,800
kills you

01:52:29,280 --> 01:52:34,000
um so i i think i i

01:52:32,480 --> 01:52:36,560
kind of heard frederick say the same

01:52:34,000 --> 01:52:38,800
thing that richie said which is

01:52:36,560 --> 01:52:39,599
we should we don't need to maybe we

01:52:38,800 --> 01:52:42,400
don't need

01:52:39,599 --> 01:52:45,840
uh scrape priority at all if we have

01:52:42,400 --> 01:52:45,840
reasonable fixed limits

01:52:46,560 --> 01:52:49,840
limits which are fixed but user

01:52:48,080 --> 01:52:53,040
configurable yes yeah

01:52:49,840 --> 01:52:56,320
okay i feel like the

01:52:53,040 --> 01:52:57,760
the only limit and kind of my

01:52:56,320 --> 01:52:59,360
further thought was i think the only

01:52:57,760 --> 01:53:02,800
limit that we hadn't

01:52:59,360 --> 01:53:05,840
um discussed before was

01:53:02,800 --> 01:53:06,400
the ability to limit this the active

01:53:05,840 --> 01:53:09,440
series

01:53:06,400 --> 01:53:11,199
a target can have now i'm not totally

01:53:09,440 --> 01:53:13,280
sure about the kind of viability of

01:53:11,199 --> 01:53:15,119
implementation of this but

01:53:13,280 --> 01:53:16,560
i feel like that's that may be one that

01:53:15,119 --> 01:53:20,480
we don't

01:53:16,560 --> 01:53:20,480
um don't have today

01:53:21,119 --> 01:53:25,040
we we can limit what is ingest how many

01:53:23,840 --> 01:53:27,840
samples are ingested

01:53:25,040 --> 01:53:29,840
by a scrape we can limit how many

01:53:27,840 --> 01:53:33,840
targets can be discovered

01:53:29,840 --> 01:53:36,880
by a discovery configuration

01:53:33,840 --> 01:53:40,639
and we will have label value and

01:53:36,880 --> 01:53:44,000
length limits so it seems like series

01:53:40,639 --> 01:53:46,320
is right actually the gap would be

01:53:44,000 --> 01:53:48,400
if you have one target that's just

01:53:46,320 --> 01:53:51,199
presenting a different label value every

01:53:48,400 --> 01:53:51,199
time you scrape

01:53:51,840 --> 01:53:58,960
um i think that's a problem we can solve

01:53:55,040 --> 01:54:00,800
once we've solved the easier ones

01:53:58,960 --> 01:54:02,080
yeah i'm not disagreeing i'm just

01:54:00,800 --> 01:54:06,320
thinking out loud

01:54:02,080 --> 01:54:09,199
the kind of attack vectors or

01:54:06,320 --> 01:54:10,400
something that that are left yeah but i

01:54:09,199 --> 01:54:12,159
feel like even their like square

01:54:10,400 --> 01:54:15,040
priority would not really

01:54:12,159 --> 01:54:15,520
help it would make you like it would

01:54:15,040 --> 01:54:17,119
make you

01:54:15,520 --> 01:54:18,560
wonder around the problem in

01:54:17,119 --> 01:54:23,840
unpredictable ways

01:54:18,560 --> 01:54:23,840
probably yeah i agree

01:54:28,560 --> 01:54:31,840
and i mean that's not to say that we

01:54:30,239 --> 01:54:35,119
should never consider

01:54:31,840 --> 01:54:37,280
square priority right i just think um

01:54:35,119 --> 01:54:40,719
getting reasonable getting the whole

01:54:37,280 --> 01:54:43,920
getting the limit thing started

01:54:40,719 --> 01:54:46,400
means then we can see what uh what

01:54:43,920 --> 01:54:46,400
remains

01:54:49,679 --> 01:54:56,880
no i i i think that's a good point

01:54:54,480 --> 01:54:57,840
that we can do this first i strongly

01:54:56,880 --> 01:55:00,239
believe we won't

01:54:57,840 --> 01:55:02,719
meet the second step but but doing it

01:55:00,239 --> 01:55:02,719
first

01:55:03,119 --> 01:55:08,560
yeah we also i think here we are at

01:55:05,280 --> 01:55:10,960
times let's do the call for consensus

01:55:08,560 --> 01:55:12,719
while i write i just want to everyone to

01:55:10,960 --> 01:55:19,840
appreciate how julian said when

01:55:12,719 --> 01:55:19,840
he makes promises explode not if

01:55:20,560 --> 01:55:24,480
i have to i have to bounce i'm afraid

01:55:22,080 --> 01:55:28,080
but um i'm i'm in on more limits

01:55:24,480 --> 01:55:28,080
oh thank you see ya bye

01:55:28,159 --> 01:55:33,520
but like this is the consensus we

01:55:30,080 --> 01:55:36,880
already have

01:55:33,520 --> 01:55:39,119
there we have it we need an outcome for

01:55:36,880 --> 01:55:42,000
the last five minutes of this

01:55:39,119 --> 01:55:44,000
um i mean i think the the outcome is not

01:55:42,000 --> 01:55:47,119
that we want the limits but that we

01:55:44,000 --> 01:55:50,480
want to not make

01:55:47,119 --> 01:55:52,960
not do scrap priority until we have them

01:55:50,480 --> 01:55:54,880
yeah that is but there is also a lot of

01:55:52,960 --> 01:55:55,280
people dropping out now so maybe that's

01:55:54,880 --> 01:55:57,280
just

01:55:55,280 --> 01:55:58,320
um is there anyone from previous team if

01:55:57,280 --> 01:56:01,360
you if you drop

01:55:58,320 --> 01:56:02,880
please make it clear if you agree on the

01:56:01,360 --> 01:56:04,880
general thing or we just don't have a

01:56:02,880 --> 01:56:08,400
call for consensus it's also fine

01:56:04,880 --> 01:56:08,400
only once we have experience with

01:56:08,480 --> 01:56:12,880
yeah it's fine i like the active series

01:56:10,719 --> 01:56:15,760
limit i think i'll be looking for that

01:56:12,880 --> 01:56:18,080
do we need any consensus on this or

01:56:15,760 --> 01:56:19,840
let me read it out once consensus we

01:56:18,080 --> 01:56:21,760
want to include more user configurable

01:56:19,840 --> 01:56:23,679
limits

01:56:21,760 --> 01:56:26,840
only once we have experience with them

01:56:23,679 --> 01:56:30,800
will be considered as great priorities

01:56:26,840 --> 01:56:30,800
sure cool

01:56:31,040 --> 01:56:34,719
thank you very much just bartek if you

01:56:34,080 --> 01:56:37,040
look at that

01:56:34,719 --> 01:56:39,280
we already have a metric for churn and

01:56:37,040 --> 01:56:42,480
like this should be quite easy to do

01:56:39,280 --> 01:56:44,000
it's an estimation though yeah so

01:56:42,480 --> 01:56:45,199
that's that's why i said i'm not sure

01:56:44,000 --> 01:56:46,080
about the viability of the

01:56:45,199 --> 01:56:48,560
implementation

01:56:46,080 --> 01:56:49,760
because i i remember discussing this a

01:56:48,560 --> 01:56:52,159
couple years ago

01:56:49,760 --> 01:56:53,199
and it was definitely a difficult thing

01:56:52,159 --> 01:56:55,440
to determine

01:56:53,199 --> 01:56:56,960
i i'm not saying it's impossible but it

01:56:55,440 --> 01:57:00,239
needs

01:56:56,960 --> 01:57:01,599
a thorough work but we can also even

01:57:00,239 --> 01:57:05,199
consider to do this

01:57:01,599 --> 01:57:07,119
as an estimation and make it super clear

01:57:05,199 --> 01:57:08,960
like if we literally call this an able

01:57:07,119 --> 01:57:12,560
experimental

01:57:08,960 --> 01:57:13,119
estimation limit uh people will know

01:57:12,560 --> 01:57:16,880
what they're

01:57:13,119 --> 01:57:19,760
getting yeah

01:57:16,880 --> 01:57:20,719
yeah i mean like quotas on like services

01:57:19,760 --> 01:57:23,599
tend to be

01:57:20,719 --> 01:57:24,000
fuzzy as well right like you have a 10

01:57:23,599 --> 01:57:26,800
um

01:57:24,000 --> 01:57:28,159
like burst or whatever so like if it's

01:57:26,800 --> 01:57:29,520
like that

01:57:28,159 --> 01:57:32,400
people are probably happy with it

01:57:29,520 --> 01:57:32,800
anyways i i forgot what the discussion

01:57:32,400 --> 01:57:34,800
but

01:57:32,800 --> 01:57:36,880
but basically starting to discern

01:57:34,800 --> 01:57:38,480
between soft and hard quotas would just

01:57:36,880 --> 01:57:42,320
be using industry terms

01:57:38,480 --> 01:57:44,800
um and and and everyone knows what

01:57:42,320 --> 01:57:47,199
they'll be getting

01:57:44,800 --> 01:57:49,520
yeah i'd be happy with that i guess all

01:57:47,199 --> 01:57:53,040
that's needed is kind of a proposal

01:57:49,520 --> 01:57:55,199
and like determine just how um

01:57:53,040 --> 01:57:56,159
precise or imprecise another completion

01:57:55,199 --> 01:57:58,639
would be

01:57:56,159 --> 01:57:59,760
i mean i think it's fair to set limits

01:57:58,639 --> 01:58:02,080
on estimates

01:57:59,760 --> 01:58:03,840
if you say like this is the estimate if

01:58:02,080 --> 01:58:05,119
it if the estimation just doesn't work

01:58:03,840 --> 01:58:07,679
for your use case

01:58:05,119 --> 01:58:08,719
is able to limit or like set it to max

01:58:07,679 --> 01:58:11,440
and

01:58:08,719 --> 01:58:11,440
done right

01:58:11,760 --> 01:58:20,320
sounds good i gotta drop see ya see you

01:58:15,679 --> 01:58:20,320

YouTube URL: https://www.youtube.com/watch?v=trurq2ASeaA


