Title: Prometheus Dev Summit 2021-03-25
Publication date: 2021-03-25
Playlist: Prometheus dev summits
Description: 
	https://docs.google.com/document/d/11LC3wJcVk00l8w5P3oLQ-m3Y37iom6INAMEu2ZAGIIE
Captions: 
	00:00:03,760 --> 00:00:07,120
okay

00:00:04,160 --> 00:00:07,120
it's recording

00:00:07,520 --> 00:00:12,080
where is the 25th of march um we have

00:00:10,960 --> 00:00:15,599
the third death

00:00:12,080 --> 00:00:17,920
star of year uh yes promises i always

00:00:15,599 --> 00:00:21,279
down but it'll get that fixed

00:00:17,920 --> 00:00:23,760
um yeah so let's get started the first

00:00:21,279 --> 00:00:26,560
topic is by julian and bjorn uh go

00:00:23,760 --> 00:00:31,840
modules for reptile etc

00:00:26,560 --> 00:00:31,840
and i'll just hand over

00:00:34,000 --> 00:00:41,040
so there we go hit it

00:00:37,280 --> 00:00:42,000
julian byrne yes uh so basically we have

00:00:41,040 --> 00:00:45,920
a lot of people

00:00:42,000 --> 00:00:47,920
who would like us to go to prometus v2

00:00:45,920 --> 00:00:50,079
for the go modules

00:00:47,920 --> 00:00:51,680
so that they can easily do a go get on

00:00:50,079 --> 00:00:54,000
the premise version

00:00:51,680 --> 00:00:55,760
which we have always refused to do

00:00:54,000 --> 00:00:58,879
because we want to be able to break the

00:00:55,760 --> 00:01:01,680
api and it is against the golden rules

00:00:58,879 --> 00:01:03,760
and there are pro and cons is in both

00:01:01,680 --> 00:01:05,519
directions and we also had an experiment

00:01:03,760 --> 00:01:07,119
with modularize that we wanted to talk

00:01:05,519 --> 00:01:08,799
about but it seems that this stopped

00:01:07,119 --> 00:01:12,000
working a few months ago and

00:01:08,799 --> 00:01:15,200
no one really complained so

00:01:12,000 --> 00:01:17,439
i'm wondering like what people think

00:01:15,200 --> 00:01:20,000
about that subject and

00:01:17,439 --> 00:01:20,479
like should we enable people to actually

00:01:20,000 --> 00:01:23,439
uh

00:01:20,479 --> 00:01:24,000
be able to fetch the committees with the

00:01:23,439 --> 00:01:25,759
v2

00:01:24,000 --> 00:01:30,000
and just accept the fact that we don't

00:01:25,759 --> 00:01:30,000
follow the golan conventions

00:01:31,119 --> 00:01:36,320
what would it take to follow the golan

00:01:34,320 --> 00:01:39,439
conventions

00:01:36,320 --> 00:01:42,000
like what assuming we say okay

00:01:39,439 --> 00:01:43,200
using prometheus stuff as a library is

00:01:42,000 --> 00:01:45,439
actually happening and

00:01:43,200 --> 00:01:47,360
for certain things this is what we

00:01:45,439 --> 00:01:49,200
actually tell people to do

00:01:47,360 --> 00:01:51,439
we tell people if you want to read our

00:01:49,200 --> 00:01:53,680
blogs use our tsdb library

00:01:51,439 --> 00:01:56,240
if you want to parse from ql there is

00:01:53,680 --> 00:01:58,159
one library to do it

00:01:56,240 --> 00:01:59,360
what would it take for us to embrace

00:01:58,159 --> 00:02:01,600
that and say okay

00:01:59,360 --> 00:02:02,719
these are libraries maybe they're

00:02:01,600 --> 00:02:05,280
versioned separately

00:02:02,719 --> 00:02:05,759
from prometheus and we're we just end up

00:02:05,280 --> 00:02:08,959
with

00:02:05,759 --> 00:02:14,640
prompt ql35.0

00:02:08,959 --> 00:02:14,640
um used in prometheus 2.28

00:02:14,720 --> 00:02:19,440
yeah so should i i mean i think we have

00:02:17,920 --> 00:02:23,640
the following options

00:02:19,440 --> 00:02:26,640
first one we could um do the modular

00:02:23,640 --> 00:02:27,920
modularized thing if it works

00:02:26,640 --> 00:02:30,800
right i mean this is we should

00:02:27,920 --> 00:02:32,720
definitely ask around if anyone has any

00:02:30,800 --> 00:02:34,800
idea how well this works

00:02:32,720 --> 00:02:37,120
uh perhaps bartek has a bit of context i

00:02:34,800 --> 00:02:39,519
think you introduced

00:02:37,120 --> 00:02:42,400
was that his name i always think about

00:02:39,519 --> 00:02:42,400
star wars but yeah

00:02:43,760 --> 00:02:47,280
so if that works could be a solution the

00:02:46,319 --> 00:02:50,640
um

00:02:47,280 --> 00:02:53,760
the most like the

00:02:50,640 --> 00:02:57,360
smallest possible change i think

00:02:53,760 --> 00:02:59,920
is to to um

00:02:57,360 --> 00:03:00,959
separate what go modules put together

00:02:59,920 --> 00:03:04,159
namely that

00:03:00,959 --> 00:03:07,360
go modules uses the prometheus

00:03:04,159 --> 00:03:09,840
versioning as a versioning of the api

00:03:07,360 --> 00:03:11,280
that the the code provides right which

00:03:09,840 --> 00:03:13,840
we never intended and which

00:03:11,280 --> 00:03:16,000
like so many projects never intended

00:03:13,840 --> 00:03:18,480
that are suddenly seen as libraries

00:03:16,000 --> 00:03:19,280
so we could essentially i think just

00:03:18,480 --> 00:03:21,360
separate this

00:03:19,280 --> 00:03:23,920
so we we just continue with our normal

00:03:21,360 --> 00:03:26,319
release but we use a different

00:03:23,920 --> 00:03:28,400
schema for the tags and then we use the

00:03:26,319 --> 00:03:31,040
v something something

00:03:28,400 --> 00:03:32,319
tags for go modules versioning and this

00:03:31,040 --> 00:03:35,200
would just go up

00:03:32,319 --> 00:03:36,239
very often because we always have like

00:03:35,200 --> 00:03:38,159
breaking changes

00:03:36,239 --> 00:03:41,599
with every release but we could just do

00:03:38,159 --> 00:03:43,840
like this is go module version 135

00:03:41,599 --> 00:03:45,760
at least nobody can complain that we are

00:03:43,840 --> 00:03:48,640
not following comodial semantics

00:03:45,760 --> 00:03:50,239
so might be a bit weird how does go

00:03:48,640 --> 00:03:53,360
modules support

00:03:50,239 --> 00:03:54,159
multiple libraries in one repository

00:03:53,360 --> 00:03:56,879
that have yeah

00:03:54,159 --> 00:03:57,599
so that's the third thing which we

00:03:56,879 --> 00:04:00,239
always

00:03:57,599 --> 00:04:02,000
kind of pushed back on is a multi-go

00:04:00,239 --> 00:04:05,360
module repository

00:04:02,000 --> 00:04:07,599
which i just heard is pain in the neck

00:04:05,360 --> 00:04:09,040
but perhaps it's not that bad right i

00:04:07,599 --> 00:04:11,200
never personally

00:04:09,040 --> 00:04:13,040
explored this i just heard that it's

00:04:11,200 --> 00:04:14,879
it's kind of cumbersome

00:04:13,040 --> 00:04:16,639
but this would be from a very high level

00:04:14,879 --> 00:04:19,280
perspective not having done this i think

00:04:16,639 --> 00:04:21,280
this would be the most

00:04:19,280 --> 00:04:23,040
reasonable solution especially we could

00:04:21,280 --> 00:04:24,160
we could focus this on certain

00:04:23,040 --> 00:04:27,199
directories that

00:04:24,160 --> 00:04:29,120
are often used as libraries and

00:04:27,199 --> 00:04:30,240
the problem i see with go modules if you

00:04:29,120 --> 00:04:32,960
have many

00:04:30,240 --> 00:04:33,280
independent parts in one github repo you

00:04:32,960 --> 00:04:35,759
you

00:04:33,280 --> 00:04:36,720
you bump the major version all the time

00:04:35,759 --> 00:04:38,400
and then everyone

00:04:36,720 --> 00:04:39,919
who's using it thinks oh my gosh you're

00:04:38,400 --> 00:04:42,080
breaking change but the breaking chains

00:04:39,919 --> 00:04:45,040
more question this rarely used little

00:04:42,080 --> 00:04:46,560
subdirectory well what everyone is using

00:04:45,040 --> 00:04:48,639
has actually not changed and now

00:04:46,560 --> 00:04:50,400
everyone has incompatible types because

00:04:48,639 --> 00:04:53,280
they all get new names

00:04:50,400 --> 00:04:54,000
and so that i think go modules only

00:04:53,280 --> 00:04:56,560
really work

00:04:54,000 --> 00:04:57,759
if you if you have a go module with a

00:04:56,560 --> 00:05:00,240
very limited

00:04:57,759 --> 00:05:00,960
scope in a way right this is already

00:05:00,240 --> 00:05:03,039
where like

00:05:00,960 --> 00:05:04,720
some of the library like repos like

00:05:03,039 --> 00:05:06,000
client goal link suffer from that

00:05:04,720 --> 00:05:08,080
because we have like

00:05:06,000 --> 00:05:09,680
the api client there as well as the

00:05:08,080 --> 00:05:12,080
instrumentation

00:05:09,680 --> 00:05:13,759
and so i mean personally i think if we

00:05:12,080 --> 00:05:16,880
have no other information we should just

00:05:13,759 --> 00:05:20,720
explore a multi multi-module

00:05:16,880 --> 00:05:23,520
repository but if one of us here in the

00:05:20,720 --> 00:05:24,000
group knows this is indeed like has hard

00:05:23,520 --> 00:05:26,240
evidence

00:05:24,000 --> 00:05:27,360
that this is indeed not practical then

00:05:26,240 --> 00:05:29,680
we shouldn't

00:05:27,360 --> 00:05:31,520
so this is indeed not practical because

00:05:29,680 --> 00:05:32,800
when you make a change somewhere you

00:05:31,520 --> 00:05:34,800
need to change all the other

00:05:32,800 --> 00:05:36,320
dependencies in all your dark modes in

00:05:34,800 --> 00:05:38,320
the same repository

00:05:36,320 --> 00:05:40,479
what i was thinking about is that we can

00:05:38,320 --> 00:05:43,840
keep working as we as we're working

00:05:40,479 --> 00:05:45,919
now with a single monorepo but like uh

00:05:43,840 --> 00:05:47,280
in the release branches we have a good

00:05:45,919 --> 00:05:49,840
mod in cmd

00:05:47,280 --> 00:05:52,000
uh prometheus and that's the only use

00:05:49,840 --> 00:05:54,479
case where we would have actually like

00:05:52,000 --> 00:05:56,319
uh go modes in the cmd promise so that

00:05:54,479 --> 00:05:56,880
in the main branch the ci would still

00:05:56,319 --> 00:05:59,280
work

00:05:56,880 --> 00:06:01,360
we would still have a docker image for

00:05:59,280 --> 00:06:03,680
the main branch all the time up to date

00:06:01,360 --> 00:06:04,960
but when the release chaffer would need

00:06:03,680 --> 00:06:08,080
to create a go mode

00:06:04,960 --> 00:06:10,720
in the um in the prometheus

00:06:08,080 --> 00:06:12,639
cmd promoters directory and we would tag

00:06:10,720 --> 00:06:17,360
that as a module

00:06:12,639 --> 00:06:17,360
as a git as a module

00:06:19,120 --> 00:06:22,560
okay like that sounds vaguely as if it

00:06:21,199 --> 00:06:26,000
could work but i haven't

00:06:22,560 --> 00:06:27,919
completely understood it and yeah

00:06:26,000 --> 00:06:30,479
the idea is that during the release we

00:06:27,919 --> 00:06:31,520
create a go dot mode in cmd promote user

00:06:30,479 --> 00:06:34,000
directory

00:06:31,520 --> 00:06:35,919
and that one would be version two dot x

00:06:34,000 --> 00:06:36,560
and that one like would match the user

00:06:35,919 --> 00:06:38,479
release

00:06:36,560 --> 00:06:40,479
and we would do like regular releases of

00:06:38,479 --> 00:06:42,560
the libraries on the main branch

00:06:40,479 --> 00:06:43,840
which would be independent from uh the

00:06:42,560 --> 00:06:45,120
cmd go

00:06:43,840 --> 00:06:47,440
which would actually be the actual

00:06:45,120 --> 00:06:49,680
promoters releases

00:06:47,440 --> 00:06:51,599
so what is does that avoid a

00:06:49,680 --> 00:06:53,680
multi-module repo

00:06:51,599 --> 00:06:55,520
yes that avoids a multi-module repo it

00:06:53,680 --> 00:06:57,520
would only be multi-module in the

00:06:55,520 --> 00:06:58,639
release branches when you would have a

00:06:57,520 --> 00:07:02,639
module for the

00:06:58,639 --> 00:07:04,240
command line tools

00:07:02,639 --> 00:07:05,680
okay but then we have this problem that

00:07:04,240 --> 00:07:08,160
we have one version

00:07:05,680 --> 00:07:10,639
which would just essentially go up yes

00:07:08,160 --> 00:07:12,960
but when we when we break the api

00:07:10,639 --> 00:07:14,840
uh we need them to update all the

00:07:12,960 --> 00:07:18,720
modules as because they are client

00:07:14,840 --> 00:07:18,720
anyway between each other

00:07:20,479 --> 00:07:25,120
do we i'm not so sure but yeah so the

00:07:23,440 --> 00:07:28,840
issue to solve is that

00:07:25,120 --> 00:07:32,400
oh do we have a multi-module git

00:07:28,840 --> 00:07:34,319
repository but still inside it does not

00:07:32,400 --> 00:07:34,720
look like a multi-module that's the main

00:07:34,319 --> 00:07:37,199
point

00:07:34,720 --> 00:07:38,880
how do can we avoid the interdependency

00:07:37,199 --> 00:07:42,400
and say hey for committees

00:07:38,880 --> 00:07:43,360
just use the current branch um i think

00:07:42,400 --> 00:07:45,919
you can do

00:07:43,360 --> 00:07:47,759
that to a large extent with replace

00:07:45,919 --> 00:07:50,080
directives

00:07:47,759 --> 00:07:52,400
like you can basically tell it like yeah

00:07:50,080 --> 00:07:54,479
i want to use like the prom qr package

00:07:52,400 --> 00:07:56,160
but really just go to dot dot slash

00:07:54,479 --> 00:07:58,479
package from ql

00:07:56,160 --> 00:08:00,319
use whatever is there forget about

00:07:58,479 --> 00:08:02,160
versions forget about tags

00:08:00,319 --> 00:08:03,919
this is what you're building now no

00:08:02,160 --> 00:08:05,319
because we still produce the good old

00:08:03,919 --> 00:08:07,599
sum which are needed for

00:08:05,319 --> 00:08:12,560
representability and that good.some

00:08:07,599 --> 00:08:15,199
still needs the currency of the repo

00:08:12,560 --> 00:08:16,720
okay but we could like have kind of a

00:08:15,199 --> 00:08:19,919
view

00:08:16,720 --> 00:08:23,360
on those libraries from branches that

00:08:19,919 --> 00:08:23,360
are sub modules

00:08:23,599 --> 00:08:27,919
yeah we could we could have tooling to

00:08:26,400 --> 00:08:30,000
work around that

00:08:27,919 --> 00:08:31,680
but it would put more weight on the

00:08:30,000 --> 00:08:33,120
contributor because they would need to

00:08:31,680 --> 00:08:35,760
run that tooling and each pull request

00:08:33,120 --> 00:08:35,760
blah blah blah

00:08:35,919 --> 00:08:41,279
and it would have conflicts every time

00:08:38,000 --> 00:08:43,919
we want to merge a pull request as well

00:08:41,279 --> 00:08:46,000
but yeah we can explore that just my

00:08:43,919 --> 00:08:49,360
experiment showed me that it was not as

00:08:46,000 --> 00:08:52,080
easy but i am open to explore that

00:08:49,360 --> 00:08:53,760
i mean i guess the question the

00:08:52,080 --> 00:08:56,959
fundamental question we need to ask

00:08:53,760 --> 00:08:58,959
ourselves is in the past we just said

00:08:56,959 --> 00:09:00,720
like convenience of developing

00:08:58,959 --> 00:09:04,320
prometheus itself

00:09:00,720 --> 00:09:07,040
trumps convenience for library users

00:09:04,320 --> 00:09:08,320
but more recently we've pushed more

00:09:07,040 --> 00:09:11,600
people towards

00:09:08,320 --> 00:09:13,040
being library users so i think we should

00:09:11,600 --> 00:09:16,160
we should just re-evaluate like

00:09:13,040 --> 00:09:17,680
it like how much of a compromise are we

00:09:16,160 --> 00:09:19,760
willing to make here

00:09:17,680 --> 00:09:21,839
and i really can't say because i'm never

00:09:19,760 --> 00:09:22,399
working in prometheus prometheus itself

00:09:21,839 --> 00:09:25,440
right

00:09:22,399 --> 00:09:27,519
so um yeah yeah

00:09:25,440 --> 00:09:29,920
i would also know that the latest big

00:09:27,519 --> 00:09:31,839
api changes were made not by promoting

00:09:29,920 --> 00:09:32,959
developers but by like project like

00:09:31,839 --> 00:09:34,959
cortex antennas

00:09:32,959 --> 00:09:38,880
because they wanted more convenient

00:09:34,959 --> 00:09:38,880
functions or that kind of thing so

00:09:43,839 --> 00:09:47,360
yeah i mean there's the other way to

00:09:45,920 --> 00:09:49,279
just put certain things

00:09:47,360 --> 00:09:51,360
in their own repo which you already did

00:09:49,279 --> 00:09:55,200
with tsdb and reverted it

00:09:51,360 --> 00:09:57,519
but that was all before go modules

00:09:55,200 --> 00:09:58,720
but that kind of also demonstrated i

00:09:57,519 --> 00:10:01,680
think quite nicely

00:09:58,720 --> 00:10:02,880
the overhead you have if parts of your

00:10:01,680 --> 00:10:05,920
source tree are

00:10:02,880 --> 00:10:07,040
like separate maybe maybe a go modular

00:10:05,920 --> 00:10:10,079
just a separate repo

00:10:07,040 --> 00:10:18,560
that you have to to

00:10:10,079 --> 00:10:20,800
import vendor whatever

00:10:18,560 --> 00:10:21,600
yeah so how what to do next should we

00:10:20,800 --> 00:10:25,200
wait for

00:10:21,600 --> 00:10:25,200
for ducous

00:10:25,440 --> 00:10:30,800
uh what what if if he has news

00:10:31,680 --> 00:10:36,160
yeah i asked i asked him uh but i i

00:10:34,720 --> 00:10:38,079
didn't hear anything

00:10:36,160 --> 00:10:39,680
you know major i don't know users of

00:10:38,079 --> 00:10:41,600
this so

00:10:39,680 --> 00:10:43,680
we would need to find a volunteer who'll

00:10:41,600 --> 00:10:47,120
try to set the up

00:10:43,680 --> 00:10:50,000
um i mean he he set this up

00:10:47,120 --> 00:10:51,120
um and offered it right for people to

00:10:50,000 --> 00:10:53,279
use

00:10:51,120 --> 00:10:54,640
and i've seen that for like three months

00:10:53,279 --> 00:10:57,680
or so he didn't

00:10:54,640 --> 00:10:58,160
or whoever maintains this i think it's

00:10:57,680 --> 00:11:01,200
him

00:10:58,160 --> 00:11:03,600
uh stopped updating this

00:11:01,200 --> 00:11:05,440
so i mean it's safe to say it was not a

00:11:03,600 --> 00:11:07,200
blazing success and everyone is using it

00:11:05,440 --> 00:11:09,440
but that might be a marketing issue

00:11:07,200 --> 00:11:09,440
right

00:11:09,519 --> 00:11:16,240
yeah as

00:11:12,640 --> 00:11:19,680
as a heavy user of primitives yeah i

00:11:16,240 --> 00:11:22,079
don't need that and i am

00:11:19,680 --> 00:11:23,279
curious how many users are impacted by

00:11:22,079 --> 00:11:25,600
that if

00:11:23,279 --> 00:11:27,440
if for example we have something

00:11:25,600 --> 00:11:28,079
synchronized that that was kind of

00:11:27,440 --> 00:11:30,240
releasing

00:11:28,079 --> 00:11:32,079
well and no one actually used that but

00:11:30,240 --> 00:11:33,360
you know maybe it was not visible uh

00:11:32,079 --> 00:11:35,839
you're right

00:11:33,360 --> 00:11:37,600
but i'm i want to make sure we are not

00:11:35,839 --> 00:11:39,680
wasting effort on something that people

00:11:37,600 --> 00:11:41,440
don't actually need

00:11:39,680 --> 00:11:43,680
another i mean i've seen this in a

00:11:41,440 --> 00:11:46,320
popular go reaper they just removed

00:11:43,680 --> 00:11:48,320
go modules and said we are we are

00:11:46,320 --> 00:11:49,360
reconsidering this when go modules is

00:11:48,320 --> 00:11:50,720
mature

00:11:49,360 --> 00:11:53,040
like you could have this radical

00:11:50,720 --> 00:11:55,279
approach to just i think this is similar

00:11:53,040 --> 00:11:57,440
to what julian said that we

00:11:55,279 --> 00:11:58,720
essentially just have a go mod in the

00:11:57,440 --> 00:12:00,720
cmd

00:11:58,720 --> 00:12:02,639
for like building prometheus but we

00:12:00,720 --> 00:12:05,360
don't kind of expose

00:12:02,639 --> 00:12:06,720
the prometheus repo as a go module repo

00:12:05,360 --> 00:12:10,000
it would just appear as a

00:12:06,720 --> 00:12:12,000
reaper that has no go modules perhaps

00:12:10,000 --> 00:12:14,880
that's a possibility

00:12:12,000 --> 00:12:16,000
we we could do that but then no one can

00:12:14,880 --> 00:12:18,160
uh

00:12:16,000 --> 00:12:19,040
you know import prompt use code we

00:12:18,160 --> 00:12:22,079
essentially

00:12:19,040 --> 00:12:25,680
block it because from the next go uh go

00:12:22,079 --> 00:12:29,120
7 117 all known module

00:12:25,680 --> 00:12:32,240
modules or or non-module packages are

00:12:29,120 --> 00:12:35,200
not gonna work okay i mean this is not

00:12:32,240 --> 00:12:37,360
good i mean i if we see very popular

00:12:35,200 --> 00:12:39,200
goal reapers who just declined to use go

00:12:37,360 --> 00:12:42,079
repo ergo modules

00:12:39,200 --> 00:12:43,360
i don't think go will just not stop

00:12:42,079 --> 00:12:45,360
doing stop work

00:12:43,360 --> 00:12:53,839
i mean i think we are this is not our

00:12:45,360 --> 00:12:53,839
battle to fight

00:12:54,480 --> 00:12:57,920
we have another solution which is to

00:12:56,560 --> 00:13:01,279
publish your modules

00:12:57,920 --> 00:13:02,880
uh on another kind of

00:13:01,279 --> 00:13:04,639
way so currently you could get

00:13:02,880 --> 00:13:06,880
committees from itis we could publish

00:13:04,639 --> 00:13:10,480
them on promise.io and you would do

00:13:06,880 --> 00:13:12,720
go get promises at ios tsdb and like

00:13:10,480 --> 00:13:14,720
so the github would be forever and we

00:13:12,720 --> 00:13:18,839
would find a way to get

00:13:14,720 --> 00:13:21,839
the tags for the modules in another

00:13:18,839 --> 00:13:21,839
place

00:13:23,440 --> 00:13:28,639
so how does that work like when when i

00:13:26,880 --> 00:13:30,000
when i do like i mean kubernetes does

00:13:28,639 --> 00:13:32,880
this already right when i

00:13:30,000 --> 00:13:35,040
include like kids dot io what does that

00:13:32,880 --> 00:13:38,880
resolve to

00:13:35,040 --> 00:13:39,279
so uh it you have must have a meta tag

00:13:38,880 --> 00:13:41,360
in an

00:13:39,279 --> 00:13:44,320
in your html website and then google

00:13:41,360 --> 00:13:46,560
will cache that and it will redirect to

00:13:44,320 --> 00:13:48,000
anywhere in the web where you have uh

00:13:46,560 --> 00:13:49,920
another repository

00:13:48,000 --> 00:13:51,600
so we could have hidden repositories

00:13:49,920 --> 00:13:52,399
when we would actually do the tags we

00:13:51,600 --> 00:13:54,079
want

00:13:52,399 --> 00:13:56,959
and still have the facing point is that

00:13:54,079 --> 00:14:00,839
io in the group of

00:13:56,959 --> 00:14:02,480
it's like modularized but hidden if you

00:14:00,839 --> 00:14:04,639
want

00:14:02,480 --> 00:14:05,600
would that require a copy of the

00:14:04,639 --> 00:14:09,680
packages

00:14:05,600 --> 00:14:13,120
that have the right tags or can yes

00:14:09,680 --> 00:14:16,000
i'll just overwrite everything uh i i

00:14:13,120 --> 00:14:17,279
we should check that because i mean if

00:14:16,000 --> 00:14:19,760
it can't just overwrite

00:14:17,279 --> 00:14:21,440
everything we could basically do all the

00:14:19,760 --> 00:14:25,360
library versioning

00:14:21,440 --> 00:14:28,720
on prometheus.io and then it's never

00:14:25,360 --> 00:14:32,079
our problem

00:14:28,720 --> 00:14:34,639
wait i'm not sure okay

00:14:32,079 --> 00:14:37,199
we could also extract subdirectories and

00:14:34,639 --> 00:14:41,920
such into specific family

00:14:37,199 --> 00:14:44,959
um repositories which are just

00:14:41,920 --> 00:14:47,040
whatever push mechanism we have

00:14:44,959 --> 00:14:48,000
i mean it probably wouldn't even need to

00:14:47,040 --> 00:14:50,560
force push

00:14:48,000 --> 00:14:52,399
just keep updating the thing with the

00:14:50,560 --> 00:14:52,959
explicit understanding that is only

00:14:52,399 --> 00:14:55,360
something

00:14:52,959 --> 00:14:56,399
to to be consumed but never to be edited

00:14:55,360 --> 00:14:59,440
directly

00:14:56,399 --> 00:15:02,480
but that was much of the rise yeah but

00:14:59,440 --> 00:15:02,880
this sounds much more this sounds like a

00:15:02,480 --> 00:15:06,399
more

00:15:02,880 --> 00:15:10,560
implicit modularize essentially

00:15:06,399 --> 00:15:12,240
yes i mean that sounds great if it works

00:15:10,560 --> 00:15:13,680
and then we can tell people if you want

00:15:12,240 --> 00:15:17,839
to use this as a library

00:15:13,680 --> 00:15:17,839
use this prometheus.io import path

00:15:18,720 --> 00:15:22,639
okay news for from google

00:15:23,519 --> 00:15:26,880
i think we're at a little bit of a

00:15:25,680 --> 00:15:29,120
consensus point on

00:15:26,880 --> 00:15:30,720
on on where we want to go the question

00:15:29,120 --> 00:15:32,880
is do we have a volunteer

00:15:30,720 --> 00:15:34,560
or do we just want to see if we if we

00:15:32,880 --> 00:15:35,440
have consensus that this is the thing

00:15:34,560 --> 00:15:38,480
which

00:15:35,440 --> 00:15:40,639
which we actually want to pursue

00:15:38,480 --> 00:15:43,279
so i think we more research is needed

00:15:40,639 --> 00:15:45,600
but somebody also needs to own this

00:15:43,279 --> 00:15:46,639
otherwise we'll just have this sitting

00:15:45,600 --> 00:15:49,839
around for another

00:15:46,639 --> 00:15:49,839
year and nothing happens

00:15:50,000 --> 00:15:53,279
can this be driven by the people who

00:15:52,240 --> 00:15:56,399
have the most

00:15:53,279 --> 00:15:59,920
interest in these libraries

00:15:56,399 --> 00:16:02,399
and who know like go modules really well

00:15:59,920 --> 00:16:04,079
well i know the modules i am interested

00:16:02,399 --> 00:16:06,320
in this my question is

00:16:04,079 --> 00:16:08,720
open source is the modularized effort

00:16:06,320 --> 00:16:10,399
and like is that is that open source

00:16:08,720 --> 00:16:13,120
actually the moderator is effort and can

00:16:10,399 --> 00:16:13,120
we reuse that

00:16:13,519 --> 00:16:18,480
yeah it is everything and and i can

00:16:16,240 --> 00:16:20,160
essentially dukko seems to be happy to

00:16:18,480 --> 00:16:22,000
like essentially he was maintaining this

00:16:20,160 --> 00:16:25,279
for a couple of time and no one

00:16:22,000 --> 00:16:27,519
actually you know uh maybe uh

00:16:25,279 --> 00:16:28,560
actually you know appreciate that and so

00:16:27,519 --> 00:16:32,160
on so

00:16:28,560 --> 00:16:35,199
maybe like he's happy to essentially um

00:16:32,160 --> 00:16:36,000
you know kind of make sure to onboard us

00:16:35,199 --> 00:16:38,880
again i guess

00:16:36,000 --> 00:16:40,639
and just point to the you know things

00:16:38,880 --> 00:16:42,800
that you have to do as a maintainer

00:16:40,639 --> 00:16:43,759
so we can kind of have another look and

00:16:42,800 --> 00:16:46,240
maybe there's a

00:16:43,759 --> 00:16:47,519
there is a way to transform to that in

00:16:46,240 --> 00:16:50,720
the idea you have

00:16:47,519 --> 00:16:51,199
uh julian because yeah it feels feels

00:16:50,720 --> 00:16:54,639
like less

00:16:51,199 --> 00:16:56,959
effort but similar essential logic yeah

00:16:54,639 --> 00:16:58,320
i mean if we gain consensus that you

00:16:56,959 --> 00:17:01,600
want to pursue this

00:16:58,320 --> 00:17:04,480
uh then duco has a promise that if

00:17:01,600 --> 00:17:07,039
the film works and and smells nicely uh

00:17:04,480 --> 00:17:10,160
it can be used

00:17:07,039 --> 00:17:12,400
i mean i think i mean

00:17:10,160 --> 00:17:13,520
the modularized there was a lot about

00:17:12,400 --> 00:17:16,079
thing that i

00:17:13,520 --> 00:17:18,959
thought we'll never fly like like

00:17:16,079 --> 00:17:21,120
implicitly automatically increase

00:17:18,959 --> 00:17:22,480
version tags and stuff like that that

00:17:21,120 --> 00:17:24,319
all fell to me like

00:17:22,480 --> 00:17:26,400
sure he can try but i mean i'm not

00:17:24,319 --> 00:17:28,400
confident that that this

00:17:26,400 --> 00:17:30,400
is going to work and i don't want to

00:17:28,400 --> 00:17:30,880
give any promise to him that we will use

00:17:30,400 --> 00:17:32,799
this

00:17:30,880 --> 00:17:34,720
once he has set it up in a way that he

00:17:32,799 --> 00:17:38,000
thinks it works right

00:17:34,720 --> 00:17:39,520
and the prometheus io something that

00:17:38,000 --> 00:17:42,799
sounded more like some

00:17:39,520 --> 00:17:44,799
human will create a pointer into

00:17:42,799 --> 00:17:47,760
our our committees here and say this is

00:17:44,799 --> 00:17:49,440
now prom ql version one dot something

00:17:47,760 --> 00:17:51,360
right

00:17:49,440 --> 00:17:53,280
that's more like how it sounds to me and

00:17:51,360 --> 00:17:54,480
that sounds way more manageable and

00:17:53,280 --> 00:17:57,039
whoever wants this

00:17:54,480 --> 00:17:58,320
can like submit the change and say i

00:17:57,039 --> 00:18:00,000
want to have a pointer

00:17:58,320 --> 00:18:01,440
to the next release of the prom qr

00:18:00,000 --> 00:18:03,520
module um

00:18:01,440 --> 00:18:05,120
but yeah i'm i can't also can't promise

00:18:03,520 --> 00:18:05,840
if this is going to work but this whole

00:18:05,120 --> 00:18:07,520
like

00:18:05,840 --> 00:18:09,520
automatically analyze the code and

00:18:07,520 --> 00:18:13,280
extract stuff and and create a

00:18:09,520 --> 00:18:13,679
version number it sounded a bit like uh

00:18:13,280 --> 00:18:15,520
no

00:18:13,679 --> 00:18:16,880
it works great but i don't don't believe

00:18:15,520 --> 00:18:19,919
it

00:18:16,880 --> 00:18:22,000
so jumping materials going um

00:18:19,919 --> 00:18:25,679
what i think would really help make sure

00:18:22,000 --> 00:18:28,960
that this whatever approach we choose

00:18:25,679 --> 00:18:32,240
works is if we have

00:18:28,960 --> 00:18:33,600
someone on board like funnels cortex

00:18:32,240 --> 00:18:36,720
ideally both

00:18:33,600 --> 00:18:38,080
on board and say we want to make this

00:18:36,720 --> 00:18:41,200
work for us

00:18:38,080 --> 00:18:44,240
and we want this to be better for us

00:18:41,200 --> 00:18:46,160
than what we're currently doing

00:18:44,240 --> 00:18:47,280
like that's for me that's the yardstick

00:18:46,160 --> 00:18:49,760
is basically

00:18:47,280 --> 00:18:52,080
because that would also mean if we have

00:18:49,760 --> 00:18:54,400
funnels and cortex on board with

00:18:52,080 --> 00:18:55,600
using whichever mechanism we choose or

00:18:54,400 --> 00:18:57,760
whichever mechanism

00:18:55,600 --> 00:18:59,440
this ends up being then we also make

00:18:57,760 --> 00:19:01,520
sure that it's actually

00:18:59,440 --> 00:19:03,600
useful from the beginning and we make

00:19:01,520 --> 00:19:05,919
sure that it stays useful

00:19:03,600 --> 00:19:08,000
because if it doesn't right then like

00:19:05,919 --> 00:19:10,000
the problem is

00:19:08,000 --> 00:19:12,320
from the prometheus side there isn't so

00:19:10,000 --> 00:19:15,200
much we can actually

00:19:12,320 --> 00:19:18,080
say to luco because we're not the

00:19:15,200 --> 00:19:18,080
consumers of this

00:19:18,320 --> 00:19:21,520
and really the ones whose commitment he

00:19:20,080 --> 00:19:24,559
needs maybe

00:19:21,520 --> 00:19:26,320
maybe to put certain things

00:19:24,559 --> 00:19:28,000
my feeling is we have consensus that we

00:19:26,320 --> 00:19:29,440
want to try this that we don't know how

00:19:28,000 --> 00:19:31,440
we want to try this that

00:19:29,440 --> 00:19:32,799
we have a few people who are potentially

00:19:31,440 --> 00:19:34,960
interested in

00:19:32,799 --> 00:19:36,640
in giving feedback and or doing design

00:19:34,960 --> 00:19:37,600
so i suggest that we have call for

00:19:36,640 --> 00:19:40,160
consensus on

00:19:37,600 --> 00:19:42,000
wanting to explore this uh opening a

00:19:40,160 --> 00:19:43,760
design dock and then inviting everyone

00:19:42,000 --> 00:19:46,640
who who has an interest in just

00:19:43,760 --> 00:19:48,160
putting stuff in i i i think that for

00:19:46,640 --> 00:19:49,520
example open telemetry and such will

00:19:48,160 --> 00:19:52,160
also have an interest

00:19:49,520 --> 00:19:55,520
in trying their hands then maybe they

00:19:52,160 --> 00:19:57,360
also assign some resources on this

00:19:55,520 --> 00:19:58,960
so we have at least three different

00:19:57,360 --> 00:19:59,360
groups of four different groups of

00:19:58,960 --> 00:20:01,919
people

00:19:59,360 --> 00:20:03,600
who might be interested so for the

00:20:01,919 --> 00:20:05,440
intense and purposes of this call

00:20:03,600 --> 00:20:07,840
i would just suggest we go for call for

00:20:05,440 --> 00:20:07,840
consensus

00:20:08,000 --> 00:20:20,080
and and see if we can because i think we

00:20:10,880 --> 00:20:21,760
have consensus

00:20:20,080 --> 00:20:25,840
you are speaking beyond your muted i

00:20:21,760 --> 00:20:29,120
think yes that's just gonna say the same

00:20:25,840 --> 00:20:31,200
sorry um i think can

00:20:29,120 --> 00:20:33,600
we have consensus but i think we should

00:20:31,200 --> 00:20:34,240
also have someone who owns this because

00:20:33,600 --> 00:20:36,000
we have

00:20:34,240 --> 00:20:37,840
we have so many items now where we said

00:20:36,000 --> 00:20:40,159
we'll write a design dog and

00:20:37,840 --> 00:20:40,880
there's an empty dog if at all or no dog

00:20:40,159 --> 00:20:44,000
at all

00:20:40,880 --> 00:20:45,600
and and um yeah everyone thinks yeah we

00:20:44,000 --> 00:20:48,640
should do something about it but

00:20:45,600 --> 00:20:50,400
we have no oh yeah but which is fair of

00:20:48,640 --> 00:20:52,720
course i agree with matthias that

00:20:50,400 --> 00:20:54,320
it's not inherently driven from within

00:20:52,720 --> 00:20:56,720
promises it's driven from without

00:20:54,320 --> 00:20:59,440
promises so i would expect that people

00:20:56,720 --> 00:21:01,120
who have an interest in this are driving

00:20:59,440 --> 00:21:02,000
this from the outside so i think it's

00:21:01,120 --> 00:21:04,480
much more about

00:21:02,000 --> 00:21:05,440
prometheus saying yes we are willing to

00:21:04,480 --> 00:21:09,679
accept this given

00:21:05,440 --> 00:21:12,240
sound design and

00:21:09,679 --> 00:21:16,320
invite others to step up and and do the

00:21:12,240 --> 00:21:17,840
work on designing and implementing this

00:21:16,320 --> 00:21:19,520
i think it would be helpful to have

00:21:17,840 --> 00:21:22,960
someone coordinate this who sits

00:21:19,520 --> 00:21:24,960
on the interface right if we have one

00:21:22,960 --> 00:21:27,360
someone who is on prometheus team

00:21:24,960 --> 00:21:29,039
but also has an interest in using things

00:21:27,360 --> 00:21:31,280
as libraries

00:21:29,039 --> 00:21:33,360
gotham is not here so bardican can

00:21:31,280 --> 00:21:34,320
volunteer or we just wait until the next

00:21:33,360 --> 00:21:36,080
call and see if

00:21:34,320 --> 00:21:37,760
if someone actually stepped up and if

00:21:36,080 --> 00:21:39,600
not then there's clearly not

00:21:37,760 --> 00:21:40,960
interest we thought there would be and

00:21:39,600 --> 00:21:45,840
we can just close it

00:21:40,960 --> 00:21:48,320
like i don't think we are i

00:21:45,840 --> 00:21:50,159
it's not on us to make this completely

00:21:48,320 --> 00:21:52,159
happen it's it's on us to open the

00:21:50,159 --> 00:21:54,880
possibility for others to uh

00:21:52,159 --> 00:21:56,240
to to chuck in and do part of the work

00:21:54,880 --> 00:21:58,320
if they care about it

00:21:56,240 --> 00:22:00,080
if we close this thing in two months of

00:21:58,320 --> 00:22:00,960
course no one put anything in that's

00:22:00,080 --> 00:22:03,919
also completely

00:22:00,960 --> 00:22:05,039
fine as an outcome i would still it

00:22:03,919 --> 00:22:07,200
would be great to have

00:22:05,039 --> 00:22:08,640
to tell thanos and colleagues this is

00:22:07,200 --> 00:22:11,679
the person you should talk to

00:22:08,640 --> 00:22:13,840
yeah they can talk to me i can

00:22:11,679 --> 00:22:16,159
i can i can speak out that i don't think

00:22:13,840 --> 00:22:18,240
we we are interested uh and maybe i'm

00:22:16,159 --> 00:22:18,880
wrong and let's let cortex people speak

00:22:18,240 --> 00:22:22,320
but

00:22:18,880 --> 00:22:24,480
there's literally no improvement and

00:22:22,320 --> 00:22:26,640
and even worse there is more burden on

00:22:24,480 --> 00:22:27,919
us which who are maintaining prometheus

00:22:26,640 --> 00:22:30,720
library and improving

00:22:27,919 --> 00:22:32,080
and kind of we would like to focus on

00:22:30,720 --> 00:22:34,880
what matters and

00:22:32,080 --> 00:22:36,960
and this is not uh what matters for us

00:22:34,880 --> 00:22:37,840
maybe because we are more close users

00:22:36,960 --> 00:22:40,400
right so

00:22:37,840 --> 00:22:40,960
i believe auto might have more important

00:22:40,400 --> 00:22:44,159
kind of

00:22:40,960 --> 00:22:45,679
bet on this um so this is why i would

00:22:44,159 --> 00:22:47,200
like to not volunteer i have more

00:22:45,679 --> 00:22:50,720
important things but

00:22:47,200 --> 00:22:51,600
we can help we can you know find someone

00:22:50,720 --> 00:22:53,760
i don't

00:22:51,600 --> 00:22:54,720
then let's do it that way we nominate

00:22:53,760 --> 00:22:57,760
like julian

00:22:54,720 --> 00:22:58,799
is the the kind of contact person of

00:22:57,760 --> 00:23:01,280
contact

00:22:58,799 --> 00:23:02,080
for like people who use prometheus as a

00:23:01,280 --> 00:23:05,840
library

00:23:02,080 --> 00:23:07,840
to tell him uh if they are fine with

00:23:05,840 --> 00:23:09,919
these status quo or if they want some

00:23:07,840 --> 00:23:10,640
way of doing this proper in a go module

00:23:09,919 --> 00:23:13,360
style

00:23:10,640 --> 00:23:15,520
and if yes what's the idea and then we

00:23:13,360 --> 00:23:17,039
if if the outcome is that like our most

00:23:15,520 --> 00:23:19,280
important

00:23:17,039 --> 00:23:20,320
users who use prometheus library they

00:23:19,280 --> 00:23:22,799
are fine then

00:23:20,320 --> 00:23:24,559
we can close this and say they are fine

00:23:22,799 --> 00:23:27,280
and if some people are not fine

00:23:24,559 --> 00:23:27,919
we cannot make everyone happy right yeah

00:23:27,280 --> 00:23:30,000
and

00:23:27,919 --> 00:23:32,559
then we can just do the v2 stuff and

00:23:30,000 --> 00:23:36,159
just tag and do whatever we want with

00:23:32,559 --> 00:23:38,159
the api so

00:23:36,159 --> 00:23:39,280
uh let's do consensus for everyone who

00:23:38,159 --> 00:23:41,360
joins us um

00:23:39,280 --> 00:23:43,120
a uh you need to speak up more because

00:23:41,360 --> 00:23:45,360
everyone here is equal

00:23:43,120 --> 00:23:47,679
um so you can just speak except what is

00:23:45,360 --> 00:23:50,720
one bit

00:23:47,679 --> 00:23:51,600
um for call for consensus um it's it's

00:23:50,720 --> 00:23:55,200
basically between

00:23:51,600 --> 00:23:56,880
uh between um but uh also as an

00:23:55,200 --> 00:23:58,799
invitation for everyone who is here in

00:23:56,880 --> 00:24:01,200
this call and not on prometheus team

00:23:58,799 --> 00:24:02,960
speak up uh it's it's you're not the

00:24:01,200 --> 00:24:04,720
peanut gallery you're actually invited

00:24:02,960 --> 00:24:08,159
to actively contribute to

00:24:04,720 --> 00:24:10,400
to everything consensus

00:24:08,159 --> 00:24:12,159
we want to explore this but are not sure

00:24:10,400 --> 00:24:13,120
what what are true what the best

00:24:12,159 --> 00:24:14,960
approach is

00:24:13,120 --> 00:24:17,120
julian volunteers to shepherd a design

00:24:14,960 --> 00:24:19,279
document and we expect users will

00:24:17,120 --> 00:24:20,799
users interested in the library use case

00:24:19,279 --> 00:24:23,679
will step up to the design and

00:24:20,799 --> 00:24:27,039
implementation work

00:24:23,679 --> 00:24:27,039
all agreed anyone disagreeing

00:24:28,960 --> 00:24:35,919
very good next one

00:24:32,640 --> 00:24:39,120
f support so

00:24:35,919 --> 00:24:40,400
um for every

00:24:39,120 --> 00:24:42,480
if you feel strongly further you can

00:24:40,400 --> 00:24:44,559
also skip it again i just put it in

00:24:42,480 --> 00:24:46,320
in chronological order i don't really

00:24:44,559 --> 00:24:47,120
truly care about this order all of them

00:24:46,320 --> 00:24:50,559
weren't

00:24:47,120 --> 00:24:50,880
ranked the same so to onboard everyone

00:24:50,559 --> 00:24:53,520
who

00:24:50,880 --> 00:24:55,200
is not on team um we had a discussion

00:24:53,520 --> 00:24:57,600
about

00:24:55,200 --> 00:24:59,200
supporting nth variables very carefully

00:24:57,600 --> 00:25:00,720
or super aggressively or anything in

00:24:59,200 --> 00:25:03,919
between

00:25:00,720 --> 00:25:07,120
we did a straw poll uh internally um

00:25:03,919 --> 00:25:10,000
two-step which came out at first

00:25:07,120 --> 00:25:12,080
we tend to want to support this and then

00:25:10,000 --> 00:25:13,279
we had us draw paul on how to support

00:25:12,080 --> 00:25:16,960
this and that got

00:25:13,279 --> 00:25:19,919
only five responses and the two uh

00:25:16,960 --> 00:25:20,880
most ranked ones were a um no

00:25:19,919 --> 00:25:23,679
substitution

00:25:20,880 --> 00:25:24,880
only extra uh the external labels via n

00:25:23,679 --> 00:25:27,840
variable only

00:25:24,880 --> 00:25:29,520
which basically means that we that we

00:25:27,840 --> 00:25:31,279
have carefully selected environment

00:25:29,520 --> 00:25:34,559
variables which you can put into

00:25:31,279 --> 00:25:37,360
into your into your um external labels

00:25:34,559 --> 00:25:40,799
and nothing else like host and such

00:25:37,360 --> 00:25:42,960
and the second ranked was substitution

00:25:40,799 --> 00:25:45,840
fields as the need arises never for

00:25:42,960 --> 00:25:45,840
sensitive fields

00:25:46,080 --> 00:25:50,240
yeah that's the background one thing

00:25:48,000 --> 00:25:52,000
which i realized too late is a bit of a

00:25:50,240 --> 00:25:54,559
problem with

00:25:52,000 --> 00:25:56,640
with the node substitution option if

00:25:54,559 --> 00:25:58,320
there are clouds which have well-defined

00:25:56,640 --> 00:26:00,080
variable names

00:25:58,320 --> 00:26:01,360
which would be relevant for external

00:26:00,080 --> 00:26:03,360
labels

00:26:01,360 --> 00:26:05,600
it might be the case that we need to

00:26:03,360 --> 00:26:08,240
allow an in-between where we don't allow

00:26:05,600 --> 00:26:09,440
any any major substitution or anything

00:26:08,240 --> 00:26:11,200
but we still allow

00:26:09,440 --> 00:26:12,720
the user to select through a

00:26:11,200 --> 00:26:15,200
configuration

00:26:12,720 --> 00:26:17,039
which of those environment the

00:26:15,200 --> 00:26:18,320
environment variables they want to put

00:26:17,039 --> 00:26:20,320
there

00:26:18,320 --> 00:26:22,080
that's an in between which we honestly

00:26:20,320 --> 00:26:24,159
didn't consider in my opinion

00:26:22,080 --> 00:26:25,120
do we have a have an actual use case for

00:26:24,159 --> 00:26:27,679
that

00:26:25,120 --> 00:26:29,520
um yes uh just put the host name into

00:26:27,679 --> 00:26:30,880
external labels and don't have to deal

00:26:29,520 --> 00:26:33,840
with this through your uh

00:26:30,880 --> 00:26:34,400
config deployment no no i i meant the

00:26:33,840 --> 00:26:36,240
cloud

00:26:34,400 --> 00:26:37,440
well defined cloud provider and and

00:26:36,240 --> 00:26:40,559
variable

00:26:37,440 --> 00:26:43,279
so i stopped doing operational work

00:26:40,559 --> 00:26:46,159
before joining grafana so um as far as

00:26:43,279 --> 00:26:48,480
i'm aware aws has a well-defined

00:26:46,159 --> 00:26:50,320
variable name which is present in all

00:26:48,480 --> 00:26:52,640
the usual containers and such which

00:26:50,320 --> 00:26:56,080
might be useful for this use case

00:26:52,640 --> 00:26:58,159
i do not know if gcp and such have this

00:26:56,080 --> 00:26:59,200
i would suspect they have but someone

00:26:58,159 --> 00:27:01,520
else should

00:26:59,200 --> 00:27:04,240
who who does more operational stuff on

00:27:01,520 --> 00:27:04,240
public clouds

00:27:04,480 --> 00:27:07,840
but what do you mean

00:27:10,480 --> 00:27:15,679
we already support connecting to aws

00:27:12,960 --> 00:27:18,320
using the sdk and then variables of aws

00:27:15,679 --> 00:27:20,720
all that stuff

00:27:18,320 --> 00:27:22,159
okay i've i've never run uh prometheus

00:27:20,720 --> 00:27:24,880
within 80. so

00:27:22,159 --> 00:27:27,600
for aws ec2 we also support the

00:27:24,880 --> 00:27:32,960
credential files of aws so we support

00:27:27,600 --> 00:27:34,880
the complete range for the service

00:27:32,960 --> 00:27:37,440
so yeah discovery are two different use

00:27:34,880 --> 00:27:38,240
cases right um i think what richie was

00:27:37,440 --> 00:27:41,679
talking about

00:27:38,240 --> 00:27:44,320
is i want

00:27:41,679 --> 00:27:45,200
my instance id or my host name or

00:27:44,320 --> 00:27:48,240
whatever to be

00:27:45,200 --> 00:27:51,279
part of my external labels

00:27:48,240 --> 00:27:54,480
um i

00:27:51,279 --> 00:28:00,000
i'm not sure why you would want that

00:27:54,480 --> 00:28:00,000
but age appears

00:28:01,520 --> 00:28:06,159
identical configurations and the the the

00:28:04,640 --> 00:28:07,520
only thing which is different between

00:28:06,159 --> 00:28:09,760
the two is the hostname and i want to

00:28:07,520 --> 00:28:13,840
put this as the external label

00:28:09,760 --> 00:28:15,520
and everything else is um

00:28:13,840 --> 00:28:16,960
is just happening automatically so it

00:28:15,520 --> 00:28:18,240
can deploy literally the same

00:28:16,960 --> 00:28:21,200
configuration on

00:28:18,240 --> 00:28:22,960
two or ten different promises instances

00:28:21,200 --> 00:28:26,399
and everything which receives

00:28:22,960 --> 00:28:30,480
through remote read write will simply uh

00:28:26,399 --> 00:28:32,000
know which where this is coming from

00:28:30,480 --> 00:28:33,760
you can just send an environmental

00:28:32,000 --> 00:28:36,559
variable pointing to another one like

00:28:33,760 --> 00:28:36,559
the hostname

00:28:36,799 --> 00:28:40,880
so you're gonna have to start prometheus

00:28:39,039 --> 00:28:43,360
in some way

00:28:40,880 --> 00:28:45,360
and all those ways allow you to set an

00:28:43,360 --> 00:28:47,520
additional environment variable based on

00:28:45,360 --> 00:28:49,760
another or based on an already existing

00:28:47,520 --> 00:28:49,760
one

00:28:51,840 --> 00:28:58,320
so i think this is not like if we say

00:28:55,279 --> 00:29:00,720
external labels true

00:28:58,320 --> 00:29:01,919
only like for environment variables i

00:29:00,720 --> 00:29:04,640
think that covers

00:29:01,919 --> 00:29:05,120
that case like you can or at least at

00:29:04,640 --> 00:29:08,159
least

00:29:05,120 --> 00:29:11,200
it makes it very easy to do

00:29:08,159 --> 00:29:14,000
um and to have the same configuration um

00:29:11,200 --> 00:29:15,279
you you still have to have the

00:29:14,000 --> 00:29:17,840
configuration that says

00:29:15,279 --> 00:29:18,559
translate this thing into an external

00:29:17,840 --> 00:29:22,080
label right

00:29:18,559 --> 00:29:22,880
we don't have the automatic make the aws

00:29:22,080 --> 00:29:26,960
hostname

00:29:22,880 --> 00:29:29,919
and external label um

00:29:26,960 --> 00:29:30,240
but it would be very easy just to make

00:29:29,919 --> 00:29:33,600
it

00:29:30,240 --> 00:29:35,279
do what you want um yeah i don't know if

00:29:33,600 --> 00:29:37,440
you're running on kubernetes for example

00:29:35,279 --> 00:29:40,480
i mean with the prometheus operator

00:29:37,440 --> 00:29:42,080
it just does that for you as well right

00:29:40,480 --> 00:29:45,440
and it takes the numbering

00:29:42,080 --> 00:29:47,840
in the stateful set and which which of

00:29:45,440 --> 00:29:50,960
your identities you want

00:29:47,840 --> 00:29:55,840
as a as an external label

00:29:50,960 --> 00:29:55,840
is then yeah so that that's yeah

00:29:58,880 --> 00:30:04,000
um yes but if someone's not using the

00:30:02,799 --> 00:30:06,320
operator or something

00:30:04,000 --> 00:30:08,399
which there should still be some some

00:30:06,320 --> 00:30:11,200
way to do this i think

00:30:08,399 --> 00:30:12,080
and just gut feeling i think we are

00:30:11,200 --> 00:30:14,399
actually

00:30:12,080 --> 00:30:16,559
migrating to this in between which i

00:30:14,399 --> 00:30:19,120
mentioned was was missing in the

00:30:16,559 --> 00:30:20,480
in this draw poll where we allow people

00:30:19,120 --> 00:30:22,720
to basically say

00:30:20,480 --> 00:30:25,360
these in that environment variables can

00:30:22,720 --> 00:30:28,320
be put into this and that external label

00:30:25,360 --> 00:30:28,320
but nothing else

00:30:30,960 --> 00:30:35,039
well i mean my my expectation with with

00:30:33,520 --> 00:30:36,799
external labels from environment

00:30:35,039 --> 00:30:38,720
variables was that you don't need to

00:30:36,799 --> 00:30:42,080
tell prometheus anything you just

00:30:38,720 --> 00:30:42,960
set a variable with some well-known

00:30:42,080 --> 00:30:44,320
prefix

00:30:42,960 --> 00:30:47,120
and then that becomes an additional

00:30:44,320 --> 00:30:47,120
external label

00:30:47,279 --> 00:30:50,399
i mean otherwise it's substitution i

00:30:48,880 --> 00:30:53,039
mean that's the what i'm

00:30:50,399 --> 00:30:53,760
what i'm struggling with this in this

00:30:53,039 --> 00:30:56,000
discussion

00:30:53,760 --> 00:30:57,200
is that i think we're not talking about

00:30:56,000 --> 00:30:59,120
the same

00:30:57,200 --> 00:31:00,320
things or we're talking about the same

00:30:59,120 --> 00:31:04,000
things under

00:31:00,320 --> 00:31:05,840
different names

00:31:04,000 --> 00:31:07,679
so i i would actually like to see a

00:31:05,840 --> 00:31:19,840
proposal for how

00:31:07,679 --> 00:31:19,840
the whole thing would actually work

00:31:21,039 --> 00:31:25,279
so my my initial proposal was toting

00:31:23,440 --> 00:31:26,399
first that you can set any environment

00:31:25,279 --> 00:31:29,519
variable

00:31:26,399 --> 00:31:31,760
uh that would with the prefix become an

00:31:29,519 --> 00:31:32,880
external labeling promoters and the

00:31:31,760 --> 00:31:35,919
second thing was that

00:31:32,880 --> 00:31:38,000
we do not kill the disc the service

00:31:35,919 --> 00:31:40,000
discoveries that want to use environment

00:31:38,000 --> 00:31:42,240
variable for configuration

00:31:40,000 --> 00:31:44,159
for example when you use console there

00:31:42,240 --> 00:31:46,240
is the universal consulto

00:31:44,159 --> 00:31:48,480
api token which is another variable

00:31:46,240 --> 00:31:50,640
every console user is

00:31:48,480 --> 00:31:52,640
using but you cannot use that with from

00:31:50,640 --> 00:31:55,519
it is no and i want to revert

00:31:52,640 --> 00:31:57,440
that decision and say okay no we allow

00:31:55,519 --> 00:31:58,640
console users to use the console api

00:31:57,440 --> 00:32:01,760
token because that's why

00:31:58,640 --> 00:32:04,640
everyone is using console

00:32:01,760 --> 00:32:06,240
yes so i i i absolutely agree with the

00:32:04,640 --> 00:32:09,279
second point right we shouldn't

00:32:06,240 --> 00:32:12,399
actively try to prevent magic

00:32:09,279 --> 00:32:14,080
variables for sdks from working

00:32:12,399 --> 00:32:15,760
or rather we should turn them on if

00:32:14,080 --> 00:32:18,640
they're well known

00:32:15,760 --> 00:32:20,480
things in that context they should work

00:32:18,640 --> 00:32:22,080
so that's that's the consensus that we

00:32:20,480 --> 00:32:25,360
can totally

00:32:22,080 --> 00:32:26,320
i would propose we make right if we use

00:32:25,360 --> 00:32:28,240
an sdk

00:32:26,320 --> 00:32:29,600
that accepts environment variables we

00:32:28,240 --> 00:32:30,799
support those

00:32:29,600 --> 00:32:32,880
because that's not even touching the

00:32:30,799 --> 00:32:36,720
prometheus configuration that's

00:32:32,880 --> 00:32:36,720
just not getting in the way

00:32:37,679 --> 00:32:43,840
and it is possible for some of them it's

00:32:40,000 --> 00:32:46,720
weird that it's not possible for others

00:32:43,840 --> 00:32:48,799
and on the other hand it relieves us

00:32:46,720 --> 00:32:52,000
from having to maintain

00:32:48,799 --> 00:32:56,240
every possible and every future way

00:32:52,000 --> 00:32:57,919
of configuring every possible sdk

00:32:56,240 --> 00:33:01,360
right they do this for a reason they do

00:32:57,919 --> 00:33:01,360
this because it's necessary

00:33:04,480 --> 00:33:08,559
so that's that's something i'm totally i

00:33:07,039 --> 00:33:11,600
totally agree with

00:33:08,559 --> 00:33:13,519
and then yeah first the other use so

00:33:11,600 --> 00:33:17,200
but i think it's it's a separate thing

00:33:13,519 --> 00:33:17,200
to say okay external labels

00:33:17,360 --> 00:33:21,679
like what's the concept there what's

00:33:18,960 --> 00:33:21,679
what do we want

00:33:22,640 --> 00:33:26,000
the concept with external label is that

00:33:24,640 --> 00:33:26,880
you can use the same parameters

00:33:26,000 --> 00:33:29,279
configuration

00:33:26,880 --> 00:33:32,720
file in multiple systems and have

00:33:29,279 --> 00:33:32,720
different external labels

00:33:34,960 --> 00:33:40,240
and the id because like when i look now

00:33:38,000 --> 00:33:41,279
at my alert managers we have direct

00:33:40,240 --> 00:33:44,559
manager config

00:33:41,279 --> 00:33:45,919
hash and because all my manager don't

00:33:44,559 --> 00:33:48,240
need that kind of things

00:33:45,919 --> 00:33:50,240
with just the hash i can run convalue

00:33:48,240 --> 00:33:51,360
and know if my configuration is the same

00:33:50,240 --> 00:33:53,279
on my

00:33:51,360 --> 00:33:54,720
alert manager servers and i cannot do

00:33:53,279 --> 00:33:55,840
that with promoters because of that

00:33:54,720 --> 00:33:57,600
external label

00:33:55,840 --> 00:33:59,440
so the hash would be different on every

00:33:57,600 --> 00:34:01,200
primitive server so i cannot check that

00:33:59,440 --> 00:34:07,840
my quantity servers are configured the

00:34:01,200 --> 00:34:07,840
same way

00:34:10,079 --> 00:34:14,159
uh i think what matthias wanted to know

00:34:12,079 --> 00:34:15,280
is how how is this supposed to work like

00:34:14,159 --> 00:34:17,520
he said this

00:34:15,280 --> 00:34:19,040
magic well-known prefix and this

00:34:17,520 --> 00:34:22,320
variable becomes an

00:34:19,040 --> 00:34:25,280
external label right with the suffix

00:34:22,320 --> 00:34:25,839
and the variable value is the label

00:34:25,280 --> 00:34:28,879
value

00:34:25,839 --> 00:34:31,679
is that yes yes

00:34:28,879 --> 00:34:32,800
that would be the most intuitive thing

00:34:31,679 --> 00:34:34,879
honestly

00:34:32,800 --> 00:34:36,720
and i think that's completely orthogonal

00:34:34,879 --> 00:34:37,280
to everything else we could just allow

00:34:36,720 --> 00:34:39,359
that

00:34:37,280 --> 00:34:41,200
i mean i have no problem with with doing

00:34:39,359 --> 00:34:43,760
this

00:34:41,200 --> 00:34:44,480
the problem is is if we now say if we do

00:34:43,760 --> 00:34:46,320
this we do

00:34:44,480 --> 00:34:48,000
nothing else with environment variables

00:34:46,320 --> 00:34:50,720
but i think we don't have to state

00:34:48,000 --> 00:34:52,000
that right i think we could just do this

00:34:50,720 --> 00:34:55,200
kind of

00:34:52,000 --> 00:34:59,599
um creating external labels

00:34:55,200 --> 00:35:02,079
via a well-known prefix suffix plus

00:34:59,599 --> 00:35:04,320
suffix will be the external label is it

00:35:02,079 --> 00:35:06,880
uppercase or lowercase that needs to be

00:35:04,320 --> 00:35:08,800
decided but i think that's that could be

00:35:06,880 --> 00:35:11,599
something that is uncontroversial and

00:35:08,800 --> 00:35:14,880
doesn't block any other of the options

00:35:11,599 --> 00:35:14,880
we have discussed now

00:35:15,280 --> 00:35:20,480
and it doesn't directly support the

00:35:18,720 --> 00:35:22,240
oh there is this other already

00:35:20,480 --> 00:35:25,280
well-known

00:35:22,240 --> 00:35:27,599
environment variable that comes in in

00:35:25,280 --> 00:35:28,880
a specific environment but i think that

00:35:27,599 --> 00:35:31,440
is truth

00:35:28,880 --> 00:35:32,320
like i don't know if we actually need to

00:35:31,440 --> 00:35:36,079
support that

00:35:32,320 --> 00:35:38,480
because if you run your your prometheus

00:35:36,079 --> 00:35:40,480
on digital ocean and if the ocean

00:35:38,480 --> 00:35:42,640
provides such an environment variable

00:35:40,480 --> 00:35:43,520
you're gonna use user data to start

00:35:42,640 --> 00:35:46,160
prometheus

00:35:43,520 --> 00:35:47,440
and you can put in that user data

00:35:46,160 --> 00:35:50,240
exactly the line that

00:35:47,440 --> 00:35:51,680
julian posted that says prometheus

00:35:50,240 --> 00:35:54,320
external labels

00:35:51,680 --> 00:35:56,720
host name equals digital ocean hostname

00:35:54,320 --> 00:35:58,400
or whatever

00:35:56,720 --> 00:36:00,160
right and that's still static it's still

00:35:58,400 --> 00:36:02,800
you don't have to vary this

00:36:00,160 --> 00:36:05,839
but note by note you just need to

00:36:02,800 --> 00:36:09,040
transform one variable into another

00:36:05,839 --> 00:36:10,000
i think that's an okay ask if it turns

00:36:09,040 --> 00:36:12,880
out to be a huge

00:36:10,000 --> 00:36:15,359
problem we can also still add more

00:36:12,880 --> 00:36:17,680
support for this

00:36:15,359 --> 00:36:19,359
we can we can still it's it would still

00:36:17,680 --> 00:36:21,920
be orthogonal to

00:36:19,359 --> 00:36:27,680
this proposal of just these environment

00:36:21,920 --> 00:36:29,599
variables that do just this one thing

00:36:27,680 --> 00:36:31,920
so i would be on board with this i i

00:36:29,599 --> 00:36:31,920
like it

00:36:35,200 --> 00:36:38,240
the one question i have is if we should

00:36:36,960 --> 00:36:42,160
make an allowance for

00:36:38,240 --> 00:36:43,119
a hostname because this will most likely

00:36:42,160 --> 00:36:46,079
cover

00:36:43,119 --> 00:36:48,480
80 percent of the use cases just by

00:36:46,079 --> 00:36:48,480
itself

00:36:49,040 --> 00:36:53,440
and it seems weird to me that we force

00:36:51,680 --> 00:36:55,920
people to recast this

00:36:53,440 --> 00:36:58,240
instead of allowing at least that one

00:36:55,920 --> 00:37:00,640
super well-defined thing

00:36:58,240 --> 00:37:02,720
well what what is weird is that no we

00:37:00,640 --> 00:37:04,960
don't allow anything like that

00:37:02,720 --> 00:37:07,119
and like we have a solution that would

00:37:04,960 --> 00:37:08,000
fit 80 percent of the people or one that

00:37:07,119 --> 00:37:11,520
would fit 100

00:37:08,000 --> 00:37:13,520
percent with like 30 seconds of work

00:37:11,520 --> 00:37:15,760
so instead of adding a flag to promises

00:37:13,520 --> 00:37:18,160
to allow that then you would

00:37:15,760 --> 00:37:20,480
just like put the environment variable i

00:37:18,160 --> 00:37:20,480
don't know

00:37:20,800 --> 00:37:23,920
because you will need to change

00:37:21,920 --> 00:37:25,839
something informative we can not from

00:37:23,920 --> 00:37:27,440
one release to another suddenly at this

00:37:25,839 --> 00:37:30,079
name is an external label so

00:37:27,440 --> 00:37:30,800
the the user needs to take an action and

00:37:30,079 --> 00:37:32,560
i think that

00:37:30,800 --> 00:37:35,359
uh yeah it might make sense that people

00:37:32,560 --> 00:37:36,000
also want uh utah sound labels and just

00:37:35,359 --> 00:37:40,240
the other's name

00:37:36,000 --> 00:37:43,280
i don't know uh so yeah i think that uh

00:37:40,240 --> 00:37:43,760
duding for the generic variable stuff

00:37:43,280 --> 00:37:46,320
would

00:37:43,760 --> 00:37:48,640
i think fix the issue and i don't care

00:37:46,320 --> 00:37:51,839
putting like 10 extra seconds

00:37:48,640 --> 00:37:51,839
in our users to do that

00:38:01,599 --> 00:38:06,720
could that be how you you do it is that

00:38:05,119 --> 00:38:08,560
rather than a well-known environment

00:38:06,720 --> 00:38:09,839
variable you just say there's a command

00:38:08,560 --> 00:38:11,359
line option which you list

00:38:09,839 --> 00:38:14,400
the environment variables that you want

00:38:11,359 --> 00:38:14,400
as external labels

00:38:15,359 --> 00:38:19,119
and then you could add in the well-known

00:38:17,520 --> 00:38:20,400
hostname one if you want the well-known

00:38:19,119 --> 00:38:23,920
hostname one or not

00:38:20,400 --> 00:38:25,119
but by default it doesn't add anything

00:38:23,920 --> 00:38:27,440
and then we don't have to know all the

00:38:25,119 --> 00:38:29,040
well-known ones as well well i mean if

00:38:27,440 --> 00:38:31,200
we do that

00:38:29,040 --> 00:38:32,640
we could just take you know yeah i mean

00:38:31,200 --> 00:38:34,640
that kind of subvert

00:38:32,640 --> 00:38:36,079
no okay i was i was just having the

00:38:34,640 --> 00:38:37,040
thought that well we could just take

00:38:36,079 --> 00:38:39,920
external labels

00:38:37,040 --> 00:38:40,800
as as a command line flag but that just

00:38:39,920 --> 00:38:44,160
circumvents

00:38:40,800 --> 00:38:45,760
the configuration hash problem by just

00:38:44,160 --> 00:38:46,000
moving it into a configuration that's

00:38:45,760 --> 00:38:49,760
not

00:38:46,000 --> 00:38:52,960
part of the hash um so that never mind

00:38:49,760 --> 00:38:56,480
um but wait i mean

00:38:52,960 --> 00:38:57,839
we're kind of doing that either way

00:38:56,480 --> 00:39:00,640
because it's just one of the things is

00:38:57,839 --> 00:39:03,040
that all of these well-known host

00:39:00,640 --> 00:39:05,200
environment variables how well-known do

00:39:03,040 --> 00:39:08,320
they have to be for us to include them

00:39:05,200 --> 00:39:10,079
i'm i'm wondering actually for the host

00:39:08,320 --> 00:39:11,599
name specifically if the host name is

00:39:10,079 --> 00:39:15,280
something that people want to have

00:39:11,599 --> 00:39:16,960
in their external labels

00:39:15,280 --> 00:39:19,079
why do we take that from an environment

00:39:16,960 --> 00:39:22,079
variable at all why not from like

00:39:19,079 --> 00:39:22,079
os.hostname

00:39:23,839 --> 00:39:27,119
it won't always be the right value if

00:39:26,079 --> 00:39:30,079
it's just from

00:39:27,119 --> 00:39:30,079
host name possibly

00:39:30,800 --> 00:39:34,880
right but i mean if it's if that is not

00:39:33,119 --> 00:39:37,520
the like if the one

00:39:34,880 --> 00:39:38,079
that is not like if that is not what you

00:39:37,520 --> 00:39:40,839
want

00:39:38,079 --> 00:39:42,240
you can always set your own environment

00:39:40,839 --> 00:39:46,000
variables and

00:39:42,240 --> 00:39:46,000
set your own external labels that way

00:39:47,760 --> 00:39:51,680
i feel as if you're over complicating

00:39:50,160 --> 00:39:55,280
the questions yeah

00:39:51,680 --> 00:39:56,800
so my thought my thought process is the

00:39:55,280 --> 00:40:00,160
following

00:39:56,800 --> 00:40:02,480
we have um we know that hostname will be

00:40:00,160 --> 00:40:06,880
the the common case

00:40:02,480 --> 00:40:09,280
um so the only concern i would have with

00:40:06,880 --> 00:40:11,520
just getting started with host name

00:40:09,280 --> 00:40:13,200
as the one thing which is allowed is

00:40:11,520 --> 00:40:15,839
that if we switch

00:40:13,200 --> 00:40:17,839
to or also allow a well-defined

00:40:15,839 --> 00:40:19,920
prometheus underscore whatever

00:40:17,839 --> 00:40:21,040
that there is a potential clash if we

00:40:19,920 --> 00:40:23,200
define both

00:40:21,040 --> 00:40:24,800
prometheus underscore hostname and

00:40:23,200 --> 00:40:27,200
hostname something like this

00:40:24,800 --> 00:40:29,680
is the only concern but outside of this

00:40:27,200 --> 00:40:32,560
wouldn't it be the 80 20 to just

00:40:29,680 --> 00:40:34,640
allow hostname for external label only

00:40:32,560 --> 00:40:36,319
that one thing

00:40:34,640 --> 00:40:38,000
potentially behind the feature flag so

00:40:36,319 --> 00:40:39,839
we can break it if we want to and just

00:40:38,000 --> 00:40:41,280
let it run for two or three versions see

00:40:39,839 --> 00:40:44,480
what users think and say

00:40:41,280 --> 00:40:46,720
and then uh discuss it if needed

00:40:44,480 --> 00:40:47,839
because i think we are we are basically

00:40:46,720 --> 00:40:50,319
discussing

00:40:47,839 --> 00:40:52,400
stuff which might not be needed anyway

00:40:50,319 --> 00:40:55,119
well i don't see why no one would have

00:40:52,400 --> 00:40:58,000
the aws region or the availability zone

00:40:55,119 --> 00:41:01,280
or anything like that in external level

00:40:58,000 --> 00:41:04,400
i i personally actually like uh stuart's

00:41:01,280 --> 00:41:05,760
um suggestion of just moving external

00:41:04,400 --> 00:41:09,680
labels into flags

00:41:05,760 --> 00:41:12,000
like to me that makes perfect sense

00:41:09,680 --> 00:41:13,520
i i don't i frankly i don't see why we

00:41:12,000 --> 00:41:16,000
don't have that today

00:41:13,520 --> 00:41:17,839
well if you think about when you deploy

00:41:16,000 --> 00:41:19,920
promoters with systemd

00:41:17,839 --> 00:41:21,680
it is way easier to add a new

00:41:19,920 --> 00:41:24,800
environment variable

00:41:21,680 --> 00:41:28,880
than a new flag right

00:41:24,800 --> 00:41:31,200
okay ben disagrees but it depends

00:41:28,880 --> 00:41:33,040
ish it's well yes you can add an

00:41:31,200 --> 00:41:35,520
environment variable as a drop in

00:41:33,040 --> 00:41:37,119
and you can't like you have to reproduce

00:41:35,520 --> 00:41:39,520
the whole command line

00:41:37,119 --> 00:41:40,880
if you change now you can you can you

00:41:39,520 --> 00:41:43,520
can you can just

00:41:40,880 --> 00:41:44,880
put a command line flag into a variable

00:41:43,520 --> 00:41:47,520
and

00:41:44,880 --> 00:41:48,000
watch it this way so it that is roughly

00:41:47,520 --> 00:41:50,560
equivalent

00:41:48,000 --> 00:41:50,560
i would say

00:41:52,319 --> 00:41:58,800
overloading flags with configuration

00:41:55,440 --> 00:42:02,960
seems to seems to violate the uh

00:41:58,800 --> 00:42:02,960
so maybe so

00:42:05,520 --> 00:42:10,880
one of the biggest problems with using

00:42:08,240 --> 00:42:12,960
and promoting environment variables

00:42:10,880 --> 00:42:15,200
is environment variables can't be

00:42:12,960 --> 00:42:18,880
reloaded

00:42:15,200 --> 00:42:20,319
so by having a lot of environment

00:42:18,880 --> 00:42:22,319
variables and trying to get more people

00:42:20,319 --> 00:42:23,760
to use environment variables

00:42:22,319 --> 00:42:26,000
they're going they're eventually going

00:42:23,760 --> 00:42:27,200
to come back and go what the hell why

00:42:26,000 --> 00:42:29,760
won't why won't

00:42:27,200 --> 00:42:32,160
my config update i'm like well you you

00:42:29,760 --> 00:42:35,200
put your configuration into an nvar

00:42:32,160 --> 00:42:36,960
and you have to restart to get that yeah

00:42:35,200 --> 00:42:39,839
i mean what you can also still do

00:42:36,960 --> 00:42:40,880
is you can put it where it is today in

00:42:39,839 --> 00:42:43,680
the configuration

00:42:40,880 --> 00:42:45,680
and that does reload that means we have

00:42:43,680 --> 00:42:47,440
to solve the conflict problem anyway

00:42:45,680 --> 00:42:49,359
because you can already have an external

00:42:47,440 --> 00:42:51,599
label called hostname

00:42:49,359 --> 00:42:53,119
um we just need a clear we just need a

00:42:51,599 --> 00:42:54,079
clear order of preference i think that's

00:42:53,119 --> 00:42:55,680
kind of

00:42:54,079 --> 00:42:58,079
well we could have both right like we

00:42:55,680 --> 00:43:00,800
could have the ones passed via a flag

00:42:58,079 --> 00:43:02,160
that well by definition cannot be

00:43:00,800 --> 00:43:04,800
changed at runtime

00:43:02,160 --> 00:43:05,839
and have the existing list um as we have

00:43:04,800 --> 00:43:07,680
it today we can we can

00:43:05,839 --> 00:43:09,599
break that anyways right like that's not

00:43:07,680 --> 00:43:11,599
something we can do the flags would be

00:43:09,599 --> 00:43:14,800
additional

00:43:11,599 --> 00:43:15,280
in in terms of order of precedence

00:43:14,800 --> 00:43:18,240
there's

00:43:15,280 --> 00:43:20,240
there is a precedent for this because a

00:43:18,240 --> 00:43:22,160
lot of other applications

00:43:20,240 --> 00:43:25,359
and all that in terms of for example

00:43:22,160 --> 00:43:28,480
having environment variables being

00:43:25,359 --> 00:43:29,920
um above or below config files above or

00:43:28,480 --> 00:43:31,440
below command option so

00:43:29,920 --> 00:43:33,839
we shouldn't make that decision

00:43:31,440 --> 00:43:36,480
ourselves we should just copy whoever

00:43:33,839 --> 00:43:38,960
like ansible or whatever does it and

00:43:36,480 --> 00:43:41,280
that one hopefully is an easy one

00:43:38,960 --> 00:43:42,480
i'm not even particular about the order

00:43:41,280 --> 00:43:43,760
in this case because

00:43:42,480 --> 00:43:45,280
usually you're not you're going to have

00:43:43,760 --> 00:43:46,560
non-intersecting sets if you have

00:43:45,280 --> 00:43:48,400
overlapping sets

00:43:46,560 --> 00:43:51,440
it's your own damn fault anyway and you

00:43:48,400 --> 00:43:51,440
just can no

00:43:52,839 --> 00:43:55,839
no

00:43:56,000 --> 00:43:59,119
probably have overlapping for external

00:43:57,599 --> 00:44:00,640
loads because you want some which you're

00:43:59,119 --> 00:44:02,400
in your config file of the same

00:44:00,640 --> 00:44:05,119
everywhere and then you've got some of

00:44:02,400 --> 00:44:08,000
these more dynamic ones which come from

00:44:05,119 --> 00:44:08,720
mvars right what i mean is you wouldn't

00:44:08,000 --> 00:44:11,280
like

00:44:08,720 --> 00:44:12,319
i don't see way why you would set host

00:44:11,280 --> 00:44:14,000
name

00:44:12,319 --> 00:44:15,359
twice and then expect to override it

00:44:14,000 --> 00:44:17,119
with an end bar

00:44:15,359 --> 00:44:19,359
i don't think that's a fair argument to

00:44:17,119 --> 00:44:21,119
make of course we need more and not less

00:44:19,359 --> 00:44:22,400
self-care functionality within

00:44:21,119 --> 00:44:24,160
prometheus

00:44:22,400 --> 00:44:26,960
which is also why i would be worried of

00:44:24,160 --> 00:44:29,440
offering more than one way to do this

00:44:26,960 --> 00:44:30,319
which has mentally brought me back to to

00:44:29,440 --> 00:44:33,200
substitution

00:44:30,319 --> 00:44:34,000
because the advantage of substitution is

00:44:33,200 --> 00:44:37,200
i have

00:44:34,000 --> 00:44:39,440
one single place where

00:44:37,200 --> 00:44:40,400
what is actually being done i do not

00:44:39,440 --> 00:44:43,440
need to start

00:44:40,400 --> 00:44:44,319
checking places i don't need to check if

00:44:43,440 --> 00:44:47,359
in that system

00:44:44,319 --> 00:44:49,599
unify maybe there's some prometheus

00:44:47,359 --> 00:44:53,839
underscore something being said

00:44:49,599 --> 00:44:55,920
i don't need to do this i can just

00:44:53,839 --> 00:44:57,280
i i see this in one single place what we

00:44:55,920 --> 00:44:59,680
can consider is

00:44:57,280 --> 00:45:01,920
that we only allow the substitution in

00:44:59,680 --> 00:45:03,680
the external label block

00:45:01,920 --> 00:45:06,240
and i think that would actually cover

00:45:03,680 --> 00:45:08,800
all use cases which we have discussed

00:45:06,240 --> 00:45:10,079
and also the security considerations so

00:45:08,800 --> 00:45:11,599
that would cover what i was talking

00:45:10,079 --> 00:45:13,760
about in terms of

00:45:11,599 --> 00:45:15,440
how you decide which environment to use

00:45:13,760 --> 00:45:17,359
because you just explicitly put it in

00:45:15,440 --> 00:45:21,280
the conflict as you say

00:45:17,359 --> 00:45:23,520
yes no precedence no conflict no nothing

00:45:21,280 --> 00:45:25,280
and able to be there with with the

00:45:23,520 --> 00:45:26,400
command line flag just to be on the safe

00:45:25,280 --> 00:45:28,880
side and we are

00:45:26,400 --> 00:45:31,280
able to to kill it if we ever need to

00:45:28,880 --> 00:45:33,280
for whatever reason or change it

00:45:31,280 --> 00:45:34,880
so have it as experimental for five

00:45:33,280 --> 00:45:36,880
versions or such

00:45:34,880 --> 00:45:39,680
and then do everything in in

00:45:36,880 --> 00:45:42,640
configuration but only in external label

00:45:39,680 --> 00:45:43,119
well the the issue which if you do that

00:45:42,640 --> 00:45:45,760
is that

00:45:43,119 --> 00:45:46,560
you committees will still be the jackass

00:45:45,760 --> 00:45:48,400
project which

00:45:46,560 --> 00:45:51,040
means the user that say you can only do

00:45:48,400 --> 00:45:52,960
that on that field in the config file

00:45:51,040 --> 00:45:54,720
and like for no good reason we prevent

00:45:52,960 --> 00:45:56,079
users to do that in other places in the

00:45:54,720 --> 00:45:58,800
config file

00:45:56,079 --> 00:46:00,880
do you have specific use cases or can we

00:45:58,800 --> 00:46:04,720
just wait for users to actually complain

00:46:00,880 --> 00:46:06,240
i would the old i want to pass my

00:46:04,720 --> 00:46:08,000
passwords

00:46:06,240 --> 00:46:09,440
from the environment because environment

00:46:08,000 --> 00:46:12,560
is how my

00:46:09,440 --> 00:46:14,240
like how my platform has the secret i

00:46:12,560 --> 00:46:17,520
know it's not ideal

00:46:14,240 --> 00:46:20,319
but i like my preferred option

00:46:17,520 --> 00:46:23,200
if we do substitution is still or like i

00:46:20,319 --> 00:46:26,240
i'm still against

00:46:23,200 --> 00:46:28,880
being peculiar of like just

00:46:26,240 --> 00:46:29,920
imposing our notion of what is good and

00:46:28,880 --> 00:46:33,200
proper

00:46:29,920 --> 00:46:36,079
on our users just because we like secret

00:46:33,200 --> 00:46:36,480
secrets in environment variables we use

00:46:36,079 --> 00:46:40,079
them

00:46:36,480 --> 00:46:43,520
all the time and it's fine and

00:46:40,079 --> 00:46:48,000
i would be mad if you specifically break

00:46:43,520 --> 00:46:48,000
my use case because you don't like it

00:46:49,040 --> 00:46:52,880
but you wouldn't be losing anything as

00:46:51,119 --> 00:46:54,880
opposed to what we have just discussed

00:46:52,880 --> 00:46:56,720
and we can collect user feedback over

00:46:54,880 --> 00:46:59,920
one two five releases

00:46:56,720 --> 00:47:03,440
to see what the user base thinks

00:46:59,920 --> 00:47:03,760
yeah totally i mean we can start with

00:47:03,440 --> 00:47:07,839
like

00:47:03,760 --> 00:47:10,560
substitution for just external labels

00:47:07,839 --> 00:47:12,240
and see how far that gets us i just

00:47:10,560 --> 00:47:14,560
don't want us to go into that with and

00:47:12,240 --> 00:47:16,480
that is the only one we will ever allow

00:47:14,560 --> 00:47:18,000
i don't hear this here is an arbitrary

00:47:16,480 --> 00:47:24,319
line in the sand

00:47:18,000 --> 00:47:26,240
that we will never cross because we're

00:47:24,319 --> 00:47:28,720
going to have to explain that

00:47:26,240 --> 00:47:32,079
and i rather not explain that we just

00:47:28,720 --> 00:47:32,079
don't like the way you do your

00:47:36,839 --> 00:47:39,839
infrastructure

00:47:42,720 --> 00:47:46,400
like i'm i'm actually mad about this

00:47:44,400 --> 00:47:48,960
point because that's what

00:47:46,400 --> 00:47:50,800
that line in the sand says is the way

00:47:48,960 --> 00:47:52,720
soundcloud does its infrastructure

00:47:50,800 --> 00:47:54,240
is considered wrong and evil and we

00:47:52,720 --> 00:47:57,119
should feel bad

00:47:54,240 --> 00:47:59,010
i don't think that is being said at all

00:47:57,119 --> 00:48:01,520
but why did you design promises that way

00:47:59,010 --> 00:48:04,839
[Laughter]

00:48:01,520 --> 00:48:06,319
well so consider this we design

00:48:04,839 --> 00:48:08,960
prometheus

00:48:06,319 --> 00:48:12,800
now because it was running yeah is it

00:48:08,960 --> 00:48:15,440
relevant for the consensus course if not

00:48:12,800 --> 00:48:18,079
i would like to time box this discussion

00:48:15,440 --> 00:48:18,079
if possible

00:48:19,359 --> 00:48:22,559
so consensus we will allow substitution

00:48:21,920 --> 00:48:24,240
of

00:48:22,559 --> 00:48:26,319
end variables in the external label

00:48:24,240 --> 00:48:28,960
block only behind an experimental

00:48:26,319 --> 00:48:28,960
feature flag

00:48:31,200 --> 00:48:36,000
all agreed anyone disagreeing external

00:48:34,480 --> 00:48:39,520
label

00:48:36,000 --> 00:48:43,359
block in the area in the values right

00:48:39,520 --> 00:48:43,359
yeah configuration block is what i mean

00:48:44,480 --> 00:48:48,800
okay i changed the wording so i need to

00:48:47,280 --> 00:48:51,200
read it again

00:48:48,800 --> 00:48:53,119
consensus we will allow substitution of

00:48:51,200 --> 00:48:54,640
end variables in the external label

00:48:53,119 --> 00:48:58,400
configuration block only

00:48:54,640 --> 00:48:58,400
behind that experimental feature flag

00:48:58,559 --> 00:49:04,480
all agreed anyone disagreeing

00:49:01,599 --> 00:49:05,599
abstain but i won't get in the way

00:49:04,480 --> 00:49:06,880
that's fine

00:49:05,599 --> 00:49:10,319
do you want to be in the record as

00:49:06,880 --> 00:49:12,240
sustaining no no it's fine

00:49:10,319 --> 00:49:13,920
good enough for a consensus i

00:49:12,240 --> 00:49:16,000
deliberately phrase it this way because

00:49:13,920 --> 00:49:19,119
it doesn't close anything it only opens

00:49:16,000 --> 00:49:20,000
up should we also take down the

00:49:19,119 --> 00:49:22,000
consensus

00:49:20,000 --> 00:49:23,520
on the other point that julian brought

00:49:22,000 --> 00:49:26,800
up that we

00:49:23,520 --> 00:49:30,079
let we let environment variables from

00:49:26,800 --> 00:49:33,599
provider sdks through and we don't

00:49:30,079 --> 00:49:33,599
like we don't actively suppress them

00:49:34,720 --> 00:49:39,440
yeah i mean that's a difference right

00:49:37,040 --> 00:49:40,960
it's yeah that's a different consensus

00:49:39,440 --> 00:49:42,559
it's a completely different like it's a

00:49:40,960 --> 00:49:45,119
separate topic on

00:49:42,559 --> 00:49:47,119
environment variables apparently we are

00:49:45,119 --> 00:49:49,040
actively suppressing some of them

00:49:47,119 --> 00:49:50,559
let's get this one first i think what

00:49:49,040 --> 00:49:53,359
julian meant is that

00:49:50,559 --> 00:49:53,920
we only want to allow the substitution

00:49:53,359 --> 00:49:56,480
in the

00:49:53,920 --> 00:49:57,440
value part of the external label you

00:49:56,480 --> 00:50:01,119
couldn't

00:49:57,440 --> 00:50:04,079
control the label name of an external

00:50:01,119 --> 00:50:07,119
label with an environment variable

00:50:04,079 --> 00:50:09,520
yeah right

00:50:07,119 --> 00:50:11,359
this is how it sounds right now now you

00:50:09,520 --> 00:50:12,000
could just substitute anything in that

00:50:11,359 --> 00:50:14,079
law

00:50:12,000 --> 00:50:16,079
yeah i'm rewriting i'll mark as

00:50:14,079 --> 00:50:18,880
non-green and then we can

00:50:16,079 --> 00:50:20,240
this again but also uh i i think

00:50:18,880 --> 00:50:23,280
matthias point is

00:50:20,240 --> 00:50:24,160
is is a second discussion because i i

00:50:23,280 --> 00:50:25,359
didn't have the feeling we have

00:50:24,160 --> 00:50:27,520
conferences there but

00:50:25,359 --> 00:50:28,720
so let's try again i id marked the

00:50:27,520 --> 00:50:33,119
previous conferences

00:50:28,720 --> 00:50:34,720
just for report new attempt consensus

00:50:33,119 --> 00:50:36,559
we will allow substitution of n

00:50:34,720 --> 00:50:38,319
variables into label values

00:50:36,559 --> 00:50:40,160
in the external label configuration

00:50:38,319 --> 00:50:42,800
block only behind an experimental

00:50:40,160 --> 00:50:42,800
feature flag

00:50:44,240 --> 00:50:47,599
all agreed anyone disagreeing

00:50:49,359 --> 00:50:54,400
good should we have the discussion about

00:50:53,200 --> 00:50:55,839
sdks uh

00:50:54,400 --> 00:50:57,599
as well because i think this would be a

00:50:55,839 --> 00:51:00,400
new discussion block yeah

00:50:57,599 --> 00:51:00,800
i think that it will be fast quite fast

00:51:00,400 --> 00:51:04,160
no

00:51:00,800 --> 00:51:07,359
so in the last four weeks

00:51:04,160 --> 00:51:09,359
i did sws to test 6v4

00:51:07,359 --> 00:51:10,800
and they basically said hey you don't

00:51:09,359 --> 00:51:12,960
recognize my

00:51:10,800 --> 00:51:14,480
region directly but i have set it in my

00:51:12,960 --> 00:51:16,319
configuration

00:51:14,480 --> 00:51:17,839
and then we have a new cloud provider

00:51:16,319 --> 00:51:19,599
scale way and i

00:51:17,839 --> 00:51:22,720
asked them oh yeah you know we cannot

00:51:19,599 --> 00:51:24,559
use and variables because like it's not

00:51:22,720 --> 00:51:26,880
the way we do informatives

00:51:24,559 --> 00:51:27,920
and i think i want to like remove that

00:51:26,880 --> 00:51:30,880
limitation

00:51:27,920 --> 00:51:31,839
and allow cloud providers to be

00:51:30,880 --> 00:51:34,000
configured

00:51:31,839 --> 00:51:35,040
their sdk the way that the user

00:51:34,000 --> 00:51:38,400
configure that

00:51:35,040 --> 00:51:39,599
elsewhere i think in the email

00:51:38,400 --> 00:51:43,920
discussion bartek

00:51:39,599 --> 00:51:51,280
was the only vocal

00:51:43,920 --> 00:51:54,000
objection objector whatever

00:51:51,280 --> 00:51:54,559
uh and he left because he had a conflict

00:51:54,000 --> 00:51:57,119
yeah

00:51:54,559 --> 00:51:58,240
okay we actually need to we we cannot

00:51:57,119 --> 00:52:03,040
actually discuss this

00:51:58,240 --> 00:52:03,040
if if he was the one who objected

00:52:03,119 --> 00:52:06,800
oh we shouldn't we can but we shouldn't

00:52:08,720 --> 00:52:13,280
um put in there

00:52:11,839 --> 00:52:16,640
we have this discussion on the mailing

00:52:13,280 --> 00:52:19,200
list until the next one

00:52:16,640 --> 00:52:20,800
yeah but i mean i think i mean we always

00:52:19,200 --> 00:52:22,400
have people not at the deaf summit and

00:52:20,800 --> 00:52:24,319
they always have the right to say okay

00:52:22,400 --> 00:52:25,599
you consented on the death summit but

00:52:24,319 --> 00:52:27,760
it's not what i want

00:52:25,599 --> 00:52:28,720
i mean this is not like this is not the

00:52:27,760 --> 00:52:31,440
law what we

00:52:28,720 --> 00:52:33,760
what we have here right so i would say

00:52:31,440 --> 00:52:37,200
would say we could have this consensus

00:52:33,760 --> 00:52:41,680
and then bartek is free to say

00:52:37,200 --> 00:52:43,520
okay no um and then we can still

00:52:41,680 --> 00:52:45,599
say okay let's discuss it again at the

00:52:43,520 --> 00:52:47,680
dev summit or let's have a vote or

00:52:45,599 --> 00:52:49,359
whatever right i i don't think we have

00:52:47,680 --> 00:52:51,119
to

00:52:49,359 --> 00:52:54,160
we shouldn't even pretend that our

00:52:51,119 --> 00:52:56,770
consents consensy here

00:52:54,160 --> 00:52:58,160
at the death summit are are like um

00:52:56,770 --> 00:53:00,319
[Music]

00:52:58,160 --> 00:53:01,839
carved into stone essentially it's not

00:53:00,319 --> 00:53:04,000
an official vote

00:53:01,839 --> 00:53:05,040
not carved into stone but we have nine

00:53:04,000 --> 00:53:07,520
people uh

00:53:05,040 --> 00:53:09,040
out of prometheus team here so and

00:53:07,520 --> 00:53:10,319
historically the consensus has been

00:53:09,040 --> 00:53:14,160
treated as

00:53:10,319 --> 00:53:16,880
rather strong um

00:53:14,160 --> 00:53:18,480
where is bartek's point where he was

00:53:16,880 --> 00:53:19,920
against environment variables because

00:53:18,480 --> 00:53:22,000
i'm looking for his

00:53:19,920 --> 00:53:24,559
contributions and the only one i find is

00:53:22,000 --> 00:53:27,920
plus one on end bars on everything

00:53:24,559 --> 00:53:29,280
i mean he said we would we would um it

00:53:27,920 --> 00:53:33,200
would

00:53:29,280 --> 00:53:35,280
require us to to reflect on every single

00:53:33,200 --> 00:53:38,160
service discovery

00:53:35,280 --> 00:53:39,440
mechanism how they're using environment

00:53:38,160 --> 00:53:42,240
variables

00:53:39,440 --> 00:53:44,400
i i don't think it's i think we could

00:53:42,240 --> 00:53:46,960
convince him otherwise because

00:53:44,400 --> 00:53:48,319
i think we even have this in when we

00:53:46,960 --> 00:53:49,920
just use a client

00:53:48,319 --> 00:53:51,359
the client code and the client code

00:53:49,920 --> 00:53:54,559
reads the environment variable

00:53:51,359 --> 00:53:55,359
i think we have this we don't like hack

00:53:54,559 --> 00:53:58,480
the client

00:53:55,359 --> 00:54:01,760
code to to not allow this right

00:53:58,480 --> 00:54:03,599
yeah indeed so well in some ways

00:54:01,760 --> 00:54:05,520
some cloud rider we actually like don't

00:54:03,599 --> 00:54:08,319
use the environment variable stuff and

00:54:05,520 --> 00:54:10,960
explicitly disallow that

00:54:08,319 --> 00:54:10,960
but like it

00:54:11,839 --> 00:54:17,040
you could argue we even if we really

00:54:14,800 --> 00:54:20,160
consistently want to disallow it we have

00:54:17,040 --> 00:54:22,839
more work than consistently allowing it

00:54:20,160 --> 00:54:25,119
yeah this argument could be made i think

00:54:22,839 --> 00:54:27,040
yes

00:54:25,119 --> 00:54:29,520
so i think we should if we have the

00:54:27,040 --> 00:54:33,040
consensus here we should we should

00:54:29,520 --> 00:54:33,920
express that consensus but as for every

00:54:33,040 --> 00:54:36,960
consensus

00:54:33,920 --> 00:54:40,160
be be ready that that a

00:54:36,960 --> 00:54:43,760
absent member might might not consent

00:54:40,160 --> 00:54:45,359
i agree again this is not how we have

00:54:43,760 --> 00:54:46,160
treated consensus in this call

00:54:45,359 --> 00:54:49,280
historically

00:54:46,160 --> 00:54:51,359
and i i i would be worried of of just

00:54:49,280 --> 00:54:53,200
dumping this onto bartek if he was the

00:54:51,359 --> 00:54:53,839
one who actually objected i didn't look

00:54:53,200 --> 00:54:57,200
it up

00:54:53,839 --> 00:55:00,480
and i forgot that brandon um

00:54:57,200 --> 00:55:02,960
but okay okay i i then uh

00:55:00,480 --> 00:55:05,040
now that a lot was dumped on me by a

00:55:02,960 --> 00:55:06,319
so-called consensus in the death summit

00:55:05,040 --> 00:55:09,119
where i wasn't there

00:55:06,319 --> 00:55:10,160
and and and specific people that are not

00:55:09,119 --> 00:55:12,960
here anymore

00:55:10,160 --> 00:55:15,040
uh treated this as a law and i always

00:55:12,960 --> 00:55:16,720
objected that that a consensus on the

00:55:15,040 --> 00:55:17,520
death summit should be treated as like

00:55:16,720 --> 00:55:21,839
essentially

00:55:17,520 --> 00:55:24,960
a a sledgehammer being being uh

00:55:21,839 --> 00:55:25,680
kicking against my head so i i would i

00:55:24,960 --> 00:55:28,319
would actually

00:55:25,680 --> 00:55:29,119
not um subscribe to this notion that the

00:55:28,319 --> 00:55:32,559
dev summit

00:55:29,119 --> 00:55:36,319
uh consensus is is in any way

00:55:32,559 --> 00:55:36,319
a like strict rule to follow

00:55:38,480 --> 00:55:42,240
you just said that this is how it was

00:55:40,240 --> 00:55:44,160
treated historically um

00:55:42,240 --> 00:55:47,040
there was a single person who used this

00:55:44,160 --> 00:55:49,119
as a sledgehammer but that person

00:55:47,040 --> 00:55:50,960
so i don't want to follow that tradition

00:55:49,119 --> 00:55:53,760
and i don't want to state that this ever

00:55:50,960 --> 00:55:53,760
was a tradition

00:55:55,359 --> 00:56:00,160
all right so okay i propose that we just

00:55:58,079 --> 00:56:03,200
check back with bartek what exactly his

00:56:00,160 --> 00:56:05,520
concerns were and

00:56:03,200 --> 00:56:06,480
like we we discussed this on the mailing

00:56:05,520 --> 00:56:08,720
list and then we're

00:56:06,480 --> 00:56:10,079
i think it's going to be okay i don't i

00:56:08,720 --> 00:56:12,880
don't actually think we have a strong

00:56:10,079 --> 00:56:12,880
disagreement here

00:56:13,680 --> 00:56:18,640
yeah that's what i would say let's put

00:56:16,000 --> 00:56:20,960
the consent sensors in there so we know

00:56:18,640 --> 00:56:21,839
we have this consensus in the meeting as

00:56:20,960 --> 00:56:25,839
is

00:56:21,839 --> 00:56:27,760
and and as for every consensus every

00:56:25,839 --> 00:56:29,760
team member who doesn't consent can

00:56:27,760 --> 00:56:31,520
express that i don't think we have to

00:56:29,760 --> 00:56:35,119
speculate that an absent

00:56:31,520 --> 00:56:35,119
member might not consent

00:56:36,799 --> 00:56:40,319
yeah i think you are right because then

00:56:38,400 --> 00:56:43,599
we cannot do any consensus

00:56:40,319 --> 00:56:46,480
if someone is not there all right

00:56:43,599 --> 00:56:47,760
so how about how about this we hold we

00:56:46,480 --> 00:56:51,440
we put down

00:56:47,760 --> 00:56:51,839
as a as a point now we that we on this

00:56:51,440 --> 00:56:54,400
call

00:56:51,839 --> 00:56:56,000
have this consensus as a gesture of

00:56:54,400 --> 00:56:57,760
goodwill

00:56:56,000 --> 00:56:59,040
we reach out to bartek afterwards and

00:56:57,760 --> 00:57:01,119
say hey

00:56:59,040 --> 00:57:02,240
this is what we discussed but you

00:57:01,119 --> 00:57:03,839
weren't there

00:57:02,240 --> 00:57:05,920
and we want to make sure it's okay with

00:57:03,839 --> 00:57:07,680
you

00:57:05,920 --> 00:57:09,280
and then if it's not we can reopen the

00:57:07,680 --> 00:57:12,400
discussion right

00:57:09,280 --> 00:57:14,319
as bjorn said

00:57:12,400 --> 00:57:15,920
which is basically anticipating defeat

00:57:14,319 --> 00:57:17,680
of the consensus and also i don't think

00:57:15,920 --> 00:57:18,400
this call is the right avenue to discuss

00:57:17,680 --> 00:57:22,400
any of those

00:57:18,400 --> 00:57:25,359
uh changes in historic behavior um

00:57:22,400 --> 00:57:27,200
no no no no use no historic behavior you

00:57:25,359 --> 00:57:28,559
said we always did it that way and this

00:57:27,200 --> 00:57:30,960
is what i objected

00:57:28,559 --> 00:57:30,960
against

00:57:36,319 --> 00:57:40,400
we we can just state nothing about

00:57:37,920 --> 00:57:42,799
history then i'm also fine

00:57:40,400 --> 00:57:44,640
then nothing has been said but i don't

00:57:42,799 --> 00:57:46,799
think this is the right call to discuss

00:57:44,640 --> 00:57:48,480
any of this um truly and let's not

00:57:46,799 --> 00:57:50,960
discuss it i'm just saying

00:57:48,480 --> 00:57:52,799
let's put a consensus in the if there's

00:57:50,960 --> 00:57:55,839
a consensus about this let's put it into

00:57:52,799 --> 00:57:55,839
the meeting notes

00:57:56,079 --> 00:58:00,240
you're free to say because bartik might

00:57:58,559 --> 00:58:03,680
not consent you don't consent

00:58:00,240 --> 00:58:06,880
in in place that's fine

00:58:03,680 --> 00:58:09,119
but but don't discuss the history

00:58:06,880 --> 00:58:10,319
and to argue what we what we consent or

00:58:09,119 --> 00:58:11,599
not consent now

00:58:10,319 --> 00:58:14,319
because you just said we should not

00:58:11,599 --> 00:58:14,319
discuss it here

00:58:14,880 --> 00:58:20,559
i stopped doing this so

00:58:17,920 --> 00:58:21,280
anyway um yes i do not feel comfortable

00:58:20,559 --> 00:58:23,359
uh

00:58:21,280 --> 00:58:24,640
speaking out in favor of consensus if we

00:58:23,359 --> 00:58:26,400
know that bartik had

00:58:24,640 --> 00:58:28,000
concerns about it and had to drop from

00:58:26,400 --> 00:58:31,040
the call which he attended

00:58:28,000 --> 00:58:33,599
until just prior this discussion

00:58:31,040 --> 00:58:35,119
oh then let's let's take it up again on

00:58:33,599 --> 00:58:38,000
the mailing list and then come to a

00:58:35,119 --> 00:58:38,000
consensus next time

00:58:48,839 --> 00:58:54,880
okay

00:58:51,440 --> 00:58:56,079
next point support compiling exporters

00:58:54,880 --> 00:58:59,520
into combined binaries

00:58:56,079 --> 00:59:00,799
e.g grafana agent iot edge agent data

00:58:59,520 --> 00:59:03,359
pipelines

00:59:00,799 --> 00:59:04,799
grafana agent is doing this where for

00:59:03,359 --> 00:59:07,040
user convenience reasons

00:59:04,799 --> 00:59:08,160
um different exporters are put into the

00:59:07,040 --> 00:59:10,160
agent

00:59:08,160 --> 00:59:11,839
which is within prometheus proper an

00:59:10,160 --> 00:59:13,359
absolute anti-pattern and i myself

00:59:11,839 --> 00:59:16,160
wouldn't be using it as such

00:59:13,359 --> 00:59:18,400
yet there is significant user demand of

00:59:16,160 --> 00:59:20,559
treating this as a single

00:59:18,400 --> 00:59:22,799
as a single binary which has all the

00:59:20,559 --> 00:59:24,559
downsides of of tying various versions

00:59:22,799 --> 00:59:25,520
of different things together yes i fully

00:59:24,559 --> 00:59:27,680
agree

00:59:25,520 --> 00:59:29,280
yet it is something which we are seeing

00:59:27,680 --> 00:59:32,160
that people actually want and

00:59:29,280 --> 00:59:33,200
and prefer on the users on the end user

00:59:32,160 --> 00:59:34,880
side

00:59:33,200 --> 00:59:37,040
the other thing is something which ben

00:59:34,880 --> 00:59:39,839
and i discussed just recently

00:59:37,040 --> 00:59:41,760
which is basically an iot slash edge

00:59:39,839 --> 00:59:43,839
agent of sorts which

00:59:41,760 --> 00:59:45,359
is basically something which has mqtt

00:59:43,839 --> 00:59:48,319
and other things

00:59:45,359 --> 00:59:48,799
and turns a massive amount of of sensor

00:59:48,319 --> 00:59:51,440
data

00:59:48,799 --> 00:59:54,480
into prometheus read write as soon as

00:59:51,440 --> 00:59:57,200
possible or prometheus right

00:59:54,480 --> 00:59:59,040
as soon as possible just pushing to to a

00:59:57,200 --> 01:00:01,760
different storage backend

00:59:59,040 --> 01:00:02,559
my own use case from back from 2015

01:00:01,760 --> 01:00:04,640
merostis

01:00:02,559 --> 01:00:07,599
where i would like to have a little bit

01:00:04,640 --> 01:00:10,000
of short caching period locally

01:00:07,599 --> 01:00:10,960
um in case one of the network pops goes

01:00:10,000 --> 01:00:13,200
down or the

01:00:10,960 --> 01:00:13,200
the

01:00:16,160 --> 01:00:19,440
[Music]

01:00:17,440 --> 01:00:21,680
but i still collect data locally and as

01:00:19,440 --> 01:00:22,480
soon as that thing rejoins my network i

01:00:21,680 --> 01:00:25,359
get all my

01:00:22,480 --> 01:00:26,880
data back of what actually broke while

01:00:25,359 --> 01:00:30,079
that link was down

01:00:26,880 --> 01:00:33,440
which is very isp specific but yet

01:00:30,079 --> 01:00:35,119
edge and such is is the same and also

01:00:33,440 --> 01:00:36,960
there's the argument to be made for data

01:00:35,119 --> 01:00:41,280
pipelines where it becomes easier to

01:00:36,960 --> 01:00:43,599
uh to build single binaries of

01:00:41,280 --> 01:00:45,040
constructing data pipelines with with

01:00:43,599 --> 01:00:48,559
the help of

01:00:45,040 --> 01:00:51,440
prometheus exporters historically

01:00:48,559 --> 01:00:52,000
we made this hard of course it is

01:00:51,440 --> 01:00:55,119
against

01:00:52,000 --> 01:00:58,559
the um pure wisdom

01:00:55,119 --> 01:01:00,160
of of prometheus yet there are valid use

01:00:58,559 --> 01:01:01,119
cases which don't actually hurt

01:01:00,160 --> 01:01:04,000
prometheus

01:01:01,119 --> 01:01:05,760
so it is a case of should we simply stop

01:01:04,000 --> 01:01:08,240
blocking users from doing this

01:01:05,760 --> 01:01:10,240
if they want to do it while making it

01:01:08,240 --> 01:01:12,559
explicitly clear that in the

01:01:10,240 --> 01:01:15,440
reference prometheus use case this

01:01:12,559 --> 01:01:15,440
should not be done

01:01:15,839 --> 01:01:19,440
could you explain how the two strategies

01:01:18,559 --> 01:01:22,240
that you just said

01:01:19,440 --> 01:01:22,480
solve the same problems i feel like they

01:01:22,240 --> 01:01:25,520
are

01:01:22,480 --> 01:01:28,240
slightly different so

01:01:25,520 --> 01:01:29,440
i i think that the simpler bit of this

01:01:28,240 --> 01:01:32,480
is

01:01:29,440 --> 01:01:35,040
some users want to implement the

01:01:32,480 --> 01:01:38,640
collectors so node exporter collector

01:01:35,040 --> 01:01:38,640
snmp exporters collector

01:01:39,520 --> 01:01:43,599
with their own main and basically making

01:01:42,319 --> 01:01:46,799
it possible to imp

01:01:43,599 --> 01:01:47,680
uh to import a package from each of the

01:01:46,799 --> 01:01:49,280
exporters

01:01:47,680 --> 01:01:52,319
that contains the collector

01:01:49,280 --> 01:01:55,920
functionality separate from the main and

01:01:52,319 --> 01:01:59,200
sometimes this is as simple as uh

01:01:55,920 --> 01:02:01,039
a local a local person wants to

01:01:59,200 --> 01:02:03,359
implement their own uh some

01:02:01,039 --> 01:02:05,119
modifications to maine that support

01:02:03,359 --> 01:02:07,359
i don't know kerberos authentication or

01:02:05,119 --> 01:02:09,680
something silly

01:02:07,359 --> 01:02:10,559
and they just want to have their own

01:02:09,680 --> 01:02:14,480
main

01:02:10,559 --> 01:02:15,280
and making making our standard pattern

01:02:14,480 --> 01:02:18,480
for

01:02:15,280 --> 01:02:21,039
exporters to package the collector

01:02:18,480 --> 01:02:22,559
separate from maine is all we're all we

01:02:21,039 --> 01:02:24,720
really want to do

01:02:22,559 --> 01:02:26,400
so i was not aware that we were trying

01:02:24,720 --> 01:02:28,160
actively trying to prevent this

01:02:26,400 --> 01:02:29,680
and i've actually been working in the

01:02:28,160 --> 01:02:31,920
statsd exporter

01:02:29,680 --> 01:02:34,480
to make it possible for people to use

01:02:31,920 --> 01:02:37,520
the bits and pieces of it and people do

01:02:34,480 --> 01:02:40,640
um so i'm all in favor like i

01:02:37,520 --> 01:02:42,720
don't see why not yeah there is just

01:02:40,640 --> 01:02:46,000
some historical objection to this

01:02:42,720 --> 01:02:49,520
uh for no reason other than this isn't

01:02:46,000 --> 01:02:52,319
complex enough to warrant it

01:02:49,520 --> 01:02:53,760
no i what you just said ben um makes

01:02:52,319 --> 01:02:57,039
perfect sense to me is that

01:02:53,760 --> 01:02:59,680
like in some sense that's just like

01:02:57,039 --> 01:03:02,960
it's a vague statement but good code

01:02:59,680 --> 01:03:05,599
organization right so i

01:03:02,960 --> 01:03:07,839
see no reason not to organize code that

01:03:05,599 --> 01:03:07,839
way

01:03:10,000 --> 01:03:14,160
one point of order please help me write

01:03:11,520 --> 01:03:14,160
the meeting notes

01:03:14,480 --> 01:03:20,880
um i i um i do have

01:03:18,000 --> 01:03:23,520
a question to anyone who has maybe the

01:03:20,880 --> 01:03:27,119
experience from from the grafana agent

01:03:23,520 --> 01:03:31,680
um how how do the respective exporters

01:03:27,119 --> 01:03:34,559
like discover the thing to to to monitor

01:03:31,680 --> 01:03:34,559
does anybody know

01:03:36,240 --> 01:03:41,119
it's a big animal no yeah

01:03:39,359 --> 01:03:42,839
it's like you have the prometers and

01:03:41,119 --> 01:03:44,880
everything in the same thing but for the

01:03:42,839 --> 01:03:46,799
specifics uh

01:03:44,880 --> 01:03:48,880
i can look it up and send it into the

01:03:46,799 --> 01:03:50,880
list or make it part of the notes here

01:03:48,880 --> 01:03:52,559
so for the intents and purpose of the of

01:03:50,880 --> 01:03:56,480
this recording i'll put a link

01:03:52,559 --> 01:03:59,200
in here during or after this recording

01:03:56,480 --> 01:04:01,039
um sounds good i'm just i'm genuinely

01:03:59,200 --> 01:04:02,480
curious right like is prometheus

01:04:01,039 --> 01:04:06,880
discovery involved here

01:04:02,480 --> 01:04:09,680
um do you put the ips of each individual

01:04:06,880 --> 01:04:11,359
thing can we can we table this for for

01:04:09,680 --> 01:04:12,240
outside of the dev summit so we can get

01:04:11,359 --> 01:04:14,799
to more

01:04:12,240 --> 01:04:16,079
items yep i would agree but i put

01:04:14,799 --> 01:04:18,799
something in

01:04:16,079 --> 01:04:21,359
um i think it's just services curry but

01:04:18,799 --> 01:04:24,839
i i don't know for certain

01:04:21,359 --> 01:04:26,640
um oh yeah julian is already doing it

01:04:24,839 --> 01:04:28,960
perfect

01:04:26,640 --> 01:04:30,160
and also just to make this clear uh we

01:04:28,960 --> 01:04:33,599
as prometheus project

01:04:30,160 --> 01:04:36,799
should gen should then just say uh yes

01:04:33,599 --> 01:04:37,520
we we want to support this to also

01:04:36,799 --> 01:04:40,400
signal to

01:04:37,520 --> 01:04:42,319
to non-core exporters that yes this is

01:04:40,400 --> 01:04:43,039
something which which we as prometheus

01:04:42,319 --> 01:04:47,200
would like to

01:04:43,039 --> 01:04:55,839
to enable while not recommending it

01:04:47,200 --> 01:04:55,839
so just this messages out in the open

01:04:57,280 --> 01:04:59,680
okay

01:05:01,599 --> 01:05:07,440
just okay

01:05:05,280 --> 01:05:09,359
so consensus we want to make the

01:05:07,440 --> 01:05:12,240
collectors a separate package by default

01:05:09,359 --> 01:05:14,480
in our exporters

01:05:12,240 --> 01:05:16,880
all agreed anyone disagreeing comments

01:05:14,480 --> 01:05:16,880
changes

01:05:19,359 --> 01:05:23,839
very good

01:05:34,839 --> 01:05:38,400
okay next

01:05:36,799 --> 01:05:41,280
julian move our containers into

01:05:38,400 --> 01:05:41,280
industrial space

01:05:44,000 --> 01:05:49,839
yes so the idea is that we would move

01:05:47,359 --> 01:05:50,400
away from the custom busy box package

01:05:49,839 --> 01:05:53,920
that we

01:05:50,400 --> 01:05:55,599
build and we try to build our exporters

01:05:53,920 --> 01:05:56,079
and promote this on the desktop base so

01:05:55,599 --> 01:05:59,680
that

01:05:56,079 --> 01:06:00,720
you only have the golang binary in the

01:05:59,680 --> 01:06:04,000
container

01:06:00,720 --> 01:06:06,240
and optionally the eulepsy for

01:06:04,000 --> 01:06:08,400
containers that lead like like gilepsy

01:06:06,240 --> 01:06:11,440
but we would use these trolleys instead

01:06:08,400 --> 01:06:12,880
of pc box as the base for our containers

01:06:11,440 --> 01:06:14,480
the reason for that is that there are

01:06:12,880 --> 01:06:17,119
security scanners which

01:06:14,480 --> 01:06:18,240
complain that the container is not

01:06:17,119 --> 01:06:21,280
secure and it's kind of

01:06:18,240 --> 01:06:24,559
annoying and also like it just reduces

01:06:21,280 --> 01:06:27,440
the exposition on security potential

01:06:24,559 --> 01:06:27,440
security issues

01:06:29,280 --> 01:06:36,400
and it's one less thing to maintain

01:06:32,720 --> 01:06:38,640
i i used to be against this because i do

01:06:36,400 --> 01:06:39,359
like having a shell to be able to debug

01:06:38,640 --> 01:06:41,760
stuff

01:06:39,359 --> 01:06:44,160
but kubernetes now has debug containers

01:06:41,760 --> 01:06:46,640
so me

01:06:44,160 --> 01:06:48,960
i'm not a fan but i wouldn't stand in

01:06:46,640 --> 01:06:48,960
the way

01:06:49,039 --> 01:06:52,079
i l i like having a i like having a

01:06:50,960 --> 01:06:57,039
proper

01:06:52,079 --> 01:06:57,039
uh like bass image i i also do see the

01:06:58,839 --> 01:07:01,839
pain

01:07:02,079 --> 01:07:06,720
well it is mainly the fact that the w

01:07:04,559 --> 01:07:08,799
get there can not check ssl certificates

01:07:06,720 --> 01:07:11,599
and a lot of users are complaining so

01:07:08,799 --> 01:07:11,599
that's the trigger

01:07:12,640 --> 01:07:16,240
well but wait but if they notice that

01:07:14,559 --> 01:07:18,960
the w get there

01:07:16,240 --> 01:07:20,079
can't check the certificates then

01:07:18,960 --> 01:07:23,200
they're using the w

01:07:20,079 --> 01:07:25,839
get there which means no it's

01:07:23,200 --> 01:07:27,119
it's worse than that they have a

01:07:25,839 --> 01:07:29,200
security scanner that

01:07:27,119 --> 01:07:30,559
has found out that that busybox version

01:07:29,200 --> 01:07:33,200
blah blah blah blah

01:07:30,559 --> 01:07:36,559
okay i see yeah in that case we can just

01:07:33,200 --> 01:07:36,559
like let's remove all that stuff and go

01:07:40,839 --> 01:07:43,839
destroy

01:07:51,359 --> 01:07:54,640
i think we already have a quick

01:07:54,839 --> 01:08:00,480
consensus

01:07:56,480 --> 01:08:04,640
um question in general is

01:08:00,480 --> 01:08:04,640
how breaking of a change is this to you

01:08:04,720 --> 01:08:08,480
so we would need to keep the uid the

01:08:07,599 --> 01:08:11,839
same

01:08:08,480 --> 01:08:11,839
for the data part

01:08:12,160 --> 01:08:20,319
for the rest we never advised anyone to

01:08:16,080 --> 01:08:20,319
use the busy box inside that package

01:08:22,799 --> 01:08:27,120
and i don't know if we maybe ben you

01:08:25,040 --> 01:08:28,719
know that do we put prom tool into the

01:08:27,120 --> 01:08:31,040
binary

01:08:28,719 --> 01:08:32,000
into the container yeah we put prom tool

01:08:31,040 --> 01:08:33,440
in the container

01:08:32,000 --> 01:08:37,279
but you can still call it without a

01:08:33,440 --> 01:08:37,279
shell but maybe some people do

01:08:37,440 --> 01:08:41,120
cool um i i would only ask that we call

01:08:40,239 --> 01:08:44,000
this out

01:08:41,120 --> 01:08:44,480
like prominently in the release notes

01:08:44,000 --> 01:08:47,040
because

01:08:44,480 --> 01:08:48,319
as um like as someone who operates these

01:08:47,040 --> 01:08:49,920
systems

01:08:48,319 --> 01:08:52,400
it's annoying when this comes as a

01:08:49,920 --> 01:08:54,799
surprise yeah i'm

01:08:52,400 --> 01:08:55,839
as the last person to have touched the

01:08:54,799 --> 01:08:58,799
docker

01:08:55,839 --> 01:09:00,319
file i i'm hesitant to do it without

01:08:58,799 --> 01:09:02,400
waiting for 2.0

01:09:00,319 --> 01:09:04,839
but it would be fine to put it on the

01:09:02,400 --> 01:09:06,239
we're going to break our docker file in

01:09:04,839 --> 01:09:08,880
2.0

01:09:06,239 --> 01:09:11,359
kind of change 3.0 i kind of would

01:09:08,880 --> 01:09:11,359
prefer that

01:09:11,520 --> 01:09:15,759
the other thing which we could consider

01:09:13,440 --> 01:09:17,679
is to for release candidates and such

01:09:15,759 --> 01:09:19,120
sometimes put this in or maybe have a

01:09:17,679 --> 01:09:21,520
secondary binary

01:09:19,120 --> 01:09:23,440
which does this and still offer the

01:09:21,520 --> 01:09:26,640
other and at some point after

01:09:23,440 --> 01:09:29,759
one two five releases flip the default

01:09:26,640 --> 01:09:32,000
so yeah i like that

01:09:29,759 --> 01:09:32,960
we could also simultaneously build both

01:09:32,000 --> 01:09:35,199
so we can make the

01:09:32,960 --> 01:09:36,799
we can we can build it we can build and

01:09:35,199 --> 01:09:39,440
tag a busy box

01:09:36,799 --> 01:09:40,400
image if if people want to use that and

01:09:39,440 --> 01:09:43,440
my point is

01:09:40,400 --> 01:09:46,319
we keep the busy box one the default for

01:09:43,440 --> 01:09:47,120
today uh and we we make a release note

01:09:46,319 --> 01:09:50,640
and we

01:09:47,120 --> 01:09:53,520
try and make this public and in

01:09:50,640 --> 01:09:54,400
half a year we flip the default and see

01:09:53,520 --> 01:09:56,960
if anything

01:09:54,400 --> 01:09:58,080
if anyone starts yelling i like that

01:09:56,960 --> 01:10:00,480
because it gives

01:09:58,080 --> 01:10:01,440
like especially if we say like we

01:10:00,480 --> 01:10:03,760
already tagged

01:10:01,440 --> 01:10:04,800
like a dash distrollers and a dash busy

01:10:03,760 --> 01:10:06,640
book

01:10:04,800 --> 01:10:08,080
then people who want who specifically

01:10:06,640 --> 01:10:09,600
want one or the other

01:10:08,080 --> 01:10:11,199
like either the people who have problems

01:10:09,600 --> 01:10:13,760
with their security scanners can just

01:10:11,199 --> 01:10:17,040
start using the distro list right away

01:10:13,760 --> 01:10:18,640
the people who need the busybox have a

01:10:17,040 --> 01:10:22,000
time window

01:10:18,640 --> 01:10:23,360
for changing to the specifically busy

01:10:22,000 --> 01:10:26,880
boxy

01:10:23,360 --> 01:10:28,480
image and then we can and like we can

01:10:26,880 --> 01:10:30,239
give them a time frame that says

01:10:28,480 --> 01:10:32,080
by then you need to have adopted your

01:10:30,239 --> 01:10:37,280
trucker like your

01:10:32,080 --> 01:10:40,400
yammels whatever yellows you're using um

01:10:37,280 --> 01:10:44,719
so we we just soften the blow there i

01:10:40,400 --> 01:10:46,320
i like that

01:10:44,719 --> 01:10:48,480
there's always someone who relies on

01:10:46,320 --> 01:10:48,480
this

01:10:54,159 --> 01:10:58,000
specifically there's going to be someone

01:10:56,400 --> 01:10:59,760
who relies on this because they're

01:10:58,000 --> 01:11:01,199
wrapping prometheus because that's what

01:10:59,760 --> 01:11:03,120
we tell everyone to do

01:11:01,199 --> 01:11:12,000
when they need to customize their

01:11:03,120 --> 01:11:14,960
configuration at startup

01:11:12,000 --> 01:11:15,679
i guess that may actually be a problem

01:11:14,960 --> 01:11:18,159
here

01:11:15,679 --> 01:11:19,280
and that there are use cases that there

01:11:18,159 --> 01:11:22,960
are use cases that just

01:11:19,280 --> 01:11:27,120
are impossible um unless we do

01:11:22,960 --> 01:11:29,199
full conflict and substitution

01:11:27,120 --> 01:11:30,960
yeah but this is also an advantage of

01:11:29,199 --> 01:11:32,719
having this for some time

01:11:30,960 --> 01:11:34,000
yeah yeah and we're probably going to

01:11:32,719 --> 01:11:36,800
surface that

01:11:34,000 --> 01:11:39,360
but i would still prefer to do what ben

01:11:36,800 --> 01:11:42,400
said and just switch when we do 3.x

01:11:39,360 --> 01:11:42,960
which i expect to arrive at some point

01:11:42,400 --> 01:11:46,960
so

01:11:42,960 --> 01:11:48,320
i think we don't

01:11:46,960 --> 01:11:49,920
have a big need to do that and

01:11:48,320 --> 01:11:51,440
especially if you just start complaining

01:11:49,920 --> 01:11:52,560
like hey you do this we can just point

01:11:51,440 --> 01:11:54,320
them oh yeah but

01:11:52,560 --> 01:11:56,640
use the destroyers it does not have that

01:11:54,320 --> 01:11:59,360
big security issue

01:11:56,640 --> 01:12:00,800
but i don't want to lock users in with

01:11:59,360 --> 01:12:02,960
three point x

01:12:00,800 --> 01:12:04,960
if they and just stop providing the

01:12:02,960 --> 01:12:07,760
other things so

01:12:04,960 --> 01:12:09,440
i i would be at least trying to to see

01:12:07,760 --> 01:12:11,120
what users say and do this carefully

01:12:09,440 --> 01:12:13,040
with an rc blah blah blah and we will

01:12:11,120 --> 01:12:14,480
see if things break and they will start

01:12:13,040 --> 01:12:16,080
yelling immediately

01:12:14,480 --> 01:12:18,480
and then we can actually got user

01:12:16,080 --> 01:12:18,480
feedback

01:12:20,239 --> 01:12:24,320
i i don't think i don't think an rc

01:12:23,040 --> 01:12:28,239
would surface that

01:12:24,320 --> 01:12:30,159
yeah not enough people use the arc no

01:12:28,239 --> 01:12:32,080
let me read out the consensus as or the

01:12:30,159 --> 01:12:33,760
consensus proposition as written

01:12:32,080 --> 01:12:36,719
because i think this or this is a

01:12:33,760 --> 01:12:38,159
summary in my opinion consensus we want

01:12:36,719 --> 01:12:39,840
to support this the plan is

01:12:38,159 --> 01:12:42,159
start building both images keep busy

01:12:39,840 --> 01:12:44,159
boxes to default announce the change

01:12:42,159 --> 01:12:46,000
in two to three releases flip the

01:12:44,159 --> 01:12:50,000
default for an rc

01:12:46,000 --> 01:12:53,360
gauge user feedback

01:12:50,000 --> 01:12:53,360
i i think to get like

01:12:55,840 --> 01:12:59,760
let's let's shorten let's make it let's

01:12:57,920 --> 01:13:02,480
make it less

01:12:59,760 --> 01:13:05,040
definite and just say we we built both

01:13:02,480 --> 01:13:07,120
in parallel and we announce that and

01:13:05,040 --> 01:13:08,880
then we see

01:13:07,120 --> 01:13:10,880
and then we can just come back and and

01:13:08,880 --> 01:13:12,480
look at this in a few months when we've

01:13:10,880 --> 01:13:16,159
seen what happens

01:13:12,480 --> 01:13:17,520
okay fair we don't have to give a

01:13:16,159 --> 01:13:20,400
definite timeline

01:13:17,520 --> 01:13:22,400
right now it's good to say like this is

01:13:20,400 --> 01:13:26,239
where we want to go

01:13:22,400 --> 01:13:29,840
please take a look if this works for you

01:13:26,239 --> 01:13:32,800
agreed consensus we want to support this

01:13:29,840 --> 01:13:34,640
the plan is start building both images

01:13:32,800 --> 01:13:37,199
keep busy boxes the default

01:13:34,640 --> 01:13:40,239
announce the change gauge user feedback

01:13:37,199 --> 01:13:40,239
over the next few months

01:13:42,800 --> 01:13:47,840
all agreed anyone disagreeing

01:13:48,719 --> 01:13:50,960
good

01:13:53,920 --> 01:13:59,199
um also

01:13:57,600 --> 01:14:01,280
we keep rushing through everything and

01:13:59,199 --> 01:14:01,600
i'm completely fine with this but i know

01:14:01,280 --> 01:14:03,760
from

01:14:01,600 --> 01:14:06,159
experience that other people would like

01:14:03,760 --> 01:14:09,440
a bio break at some point but also we're

01:14:06,159 --> 01:14:10,239
more or less done with with it anyway so

01:14:09,440 --> 01:14:12,239
if

01:14:10,239 --> 01:14:14,480
what do people think should we have a

01:14:12,239 --> 01:14:18,080
break or should we just

01:14:14,480 --> 01:14:20,880
walk through the rest and we're done

01:14:18,080 --> 01:14:22,880
ben wants five yeah i mean if we only

01:14:20,880 --> 01:14:26,320
have one more point on the agenda

01:14:22,880 --> 01:14:28,880
do we copy today so

01:14:26,320 --> 01:14:28,880
we have voip

01:14:32,480 --> 01:14:37,520
yeah i i am just careful to not to not

01:14:35,280 --> 01:14:39,920
over extend ourselves with

01:14:37,520 --> 01:14:41,440
that after this break we will have more

01:14:39,920 --> 01:14:43,040
points on the agenda

01:14:41,440 --> 01:14:44,880
okay then let's have a break and then

01:14:43,040 --> 01:14:48,000
we'll probably break and

01:14:44,880 --> 01:14:51,120
everyone please try and be here at 17

01:14:48,000 --> 01:14:54,080
25 or 16 25 sharp

01:14:51,120 --> 01:14:56,400
of course we will just uh continue at

01:14:54,080 --> 01:15:00,560
that point

01:14:56,400 --> 01:15:00,560
yeah see you in five yeah

01:15:09,199 --> 01:15:25,840
everyone who's still here you can just

01:15:10,960 --> 01:15:25,840
start singing dancing with me

01:15:28,960 --> 01:15:32,199
[Music]

01:15:36,840 --> 01:15:39,840
um

01:15:57,280 --> 01:16:07,840
that's particular

01:16:32,480 --> 01:16:36,239
so for the people who are here um i'm

01:16:35,120 --> 01:16:38,880
i'm just trying to

01:16:36,239 --> 01:16:41,040
to to like a few of the things which are

01:16:38,880 --> 01:16:42,640
equally ranked uh need prior work or

01:16:41,040 --> 01:16:45,920
don't have people here who uh

01:16:42,640 --> 01:16:48,480
who actually suggested those topics

01:16:45,920 --> 01:16:49,440
gut feeling between analysis analytics

01:16:48,480 --> 01:16:52,480
use case

01:16:49,440 --> 01:16:54,480
uh discussing how to do uh

01:16:52,480 --> 01:16:57,920
if we have if we should switch to google

01:16:54,480 --> 01:17:00,840
forms for vulnerability handling

01:16:57,920 --> 01:17:02,080
uh package management for debian rpm and

01:17:00,840 --> 01:17:05,679
such

01:17:02,080 --> 01:17:08,239
dynamic scrape intervals and

01:17:05,679 --> 01:17:09,120
that it i would tend towards analytics

01:17:08,239 --> 01:17:12,480
use case

01:17:09,120 --> 01:17:15,679
and dynamic scrape intervals

01:17:12,480 --> 01:17:18,239
but if anyone else has any opinions now

01:17:15,679 --> 01:17:18,239
is the time

01:17:23,920 --> 01:17:31,840
okay now here i'm thinking

01:17:27,679 --> 01:17:31,840
i don't have to do this alone

01:17:37,280 --> 01:17:42,080
oh i counted it wrong the next topic

01:17:39,679 --> 01:17:45,840
will be dynamic scrap intervals

01:17:42,080 --> 01:17:45,840
i i counted it wrongly

01:17:46,719 --> 01:17:52,960
other random topic has everybody uh

01:17:49,360 --> 01:17:58,320
logged in and signed up for uh

01:17:52,960 --> 01:18:00,719
the discourse form

01:17:58,320 --> 01:18:00,719
i did

01:18:05,840 --> 01:18:09,280
stuart is here and he's nodding so he

01:18:08,000 --> 01:18:12,239
also did

01:18:09,280 --> 01:18:14,239
there's a reason why number of questions

01:18:12,239 --> 01:18:17,280
being asked on it

01:18:14,239 --> 01:18:21,199
yeah um i don't know uh

01:18:17,280 --> 01:18:24,080
do you want moderator that's up to you

01:18:21,199 --> 01:18:25,199
um i yeah that was the main reason why i

01:18:24,080 --> 01:18:27,040
was asking if you're

01:18:25,199 --> 01:18:29,280
or where i was interested if you're

01:18:27,040 --> 01:18:29,280
there

01:18:30,800 --> 01:18:34,000
i think that makes sense so formally we

01:18:32,719 --> 01:18:36,640
should probably take this on team

01:18:34,000 --> 01:18:38,080
just to to have this but i think

01:18:36,640 --> 01:18:40,080
everyone who's

01:18:38,080 --> 01:18:41,760
involved in community work should be

01:18:40,080 --> 01:18:44,080
having this

01:18:41,760 --> 01:18:47,679
um i don't know if metal mux is also

01:18:44,080 --> 01:18:50,000
here but i think he's also someone who

01:18:47,679 --> 01:18:51,679
who should be having this and ideally we

01:18:50,000 --> 01:18:55,840
build up more and more people

01:18:51,679 --> 01:18:55,840
who are just active

01:19:08,480 --> 01:19:15,360
okay 50 more seconds everyone

01:19:11,600 --> 01:19:15,360
if you're hearing this and not at your

01:19:20,840 --> 01:19:23,840
pc

01:19:26,000 --> 01:19:30,080
okay so we are supposed to start but the

01:19:28,640 --> 01:19:32,159
topic which is

01:19:30,080 --> 01:19:33,120
still as the next topic is by bjern and

01:19:32,159 --> 01:19:36,239
the topic which

01:19:33,120 --> 01:19:39,360
had five uh there's frederick

01:19:36,239 --> 01:19:40,960
uh i i counted wrongly um

01:19:39,360 --> 01:19:42,480
frederic your dynamic scrape and

01:19:40,960 --> 01:19:44,800
developers and square priority

01:19:42,480 --> 01:19:46,640
is is actually ranked highest it's

01:19:44,800 --> 01:19:48,960
ranked higher than buren's correctly

01:19:46,640 --> 01:19:50,640
detecting counter results in some

01:19:48,960 --> 01:19:52,239
i don't have an opinion on which we

01:19:50,640 --> 01:19:53,280
handle first i just wanted to point out

01:19:52,239 --> 01:19:56,640
that i made a mistake

01:19:53,280 --> 01:19:59,440
and the dynamic scrape intervals would

01:19:56,640 --> 01:20:02,800
be ranked higher i'm completely fine

01:19:59,440 --> 01:20:02,800
frederick byrne you decide

01:20:03,760 --> 01:20:10,639
i don't really care beyond do you care

01:20:07,440 --> 01:20:13,040
no because one of everything is

01:20:10,639 --> 01:20:13,040
important

01:20:13,280 --> 01:20:21,920
okay who else cares

01:20:19,360 --> 01:20:23,360
okay then let's just leave the order uh

01:20:21,920 --> 01:20:26,400
and and just do the

01:20:23,360 --> 01:20:26,400
uh counter resets

01:20:27,040 --> 01:20:29,920
bjorn hit it

01:20:30,159 --> 01:20:36,320
yeah so this is um

01:20:33,840 --> 01:20:38,639
another of those misunderstandings where

01:20:36,320 --> 01:20:41,280
by just not being obnoxious

01:20:38,639 --> 01:20:41,920
uh things get forgotten so like for me

01:20:41,280 --> 01:20:46,320
it was

01:20:41,920 --> 01:20:49,440
always a ward and prometheus that we

01:20:46,320 --> 01:20:53,120
we do not correctly detect

01:20:49,440 --> 01:20:53,760
counter resets in sum or in other words

01:20:53,120 --> 01:20:55,840
whenever

01:20:53,760 --> 01:20:56,800
a histogram or summary gets a negative

01:20:55,840 --> 01:21:00,560
observation which

01:20:56,800 --> 01:21:03,199
is completely legal as so far

01:21:00,560 --> 01:21:05,440
we uh the counter reset breaks counter

01:21:03,199 --> 01:21:07,040
reset detection breaks because

01:21:05,440 --> 01:21:09,440
underscore sum it's not actually a

01:21:07,040 --> 01:21:10,639
counter it's the sum of the observations

01:21:09,440 --> 01:21:14,159
and whenever they go down

01:21:10,639 --> 01:21:17,280
it looks like a counter is that and the

01:21:14,159 --> 01:21:17,760
simple solution that i suggested long

01:21:17,280 --> 01:21:21,199
ago

01:21:17,760 --> 01:21:23,920
and had in mind was to just look for the

01:21:21,199 --> 01:21:26,159
associated underscore count

01:21:23,920 --> 01:21:28,159
uh because that has the counter resets

01:21:26,159 --> 01:21:29,840
reliably and whenever a counter resets

01:21:28,159 --> 01:21:32,320
an underscore count happens then we also

01:21:29,840 --> 01:21:35,600
reset the sum

01:21:32,320 --> 01:21:38,000
that would be i think an easy solution

01:21:35,600 --> 01:21:40,400
it's a bit um

01:21:38,000 --> 01:21:41,679
it feels a bit hacky because from the

01:21:40,400 --> 01:21:43,440
internal prometheus perspective

01:21:41,679 --> 01:21:44,880
underscore 7 underscore count are just

01:21:43,440 --> 01:21:47,360
independent time series

01:21:44,880 --> 01:21:48,480
from the data model of the exposition

01:21:47,360 --> 01:21:51,600
they are not right

01:21:48,480 --> 01:21:54,239
and this also links to what i

01:21:51,600 --> 01:21:54,719
always thought about our internal data

01:21:54,239 --> 01:21:58,080
model

01:21:54,719 --> 01:21:59,360
that it is just for the mvp essentially

01:21:58,080 --> 01:22:02,000
and at some point

01:21:59,360 --> 01:22:03,760
not too far in the future we would have

01:22:02,000 --> 01:22:06,560
a prometheus that has a

01:22:03,760 --> 01:22:09,679
notion of complex metric types and some

01:22:06,560 --> 01:22:11,360
encounter just fields in a metric right

01:22:09,679 --> 01:22:13,679
with the new histograms that will

01:22:11,360 --> 01:22:16,800
probably happen anyway

01:22:13,679 --> 01:22:19,199
but that's also more like now i see that

01:22:16,800 --> 01:22:21,199
essentially openmetrics has essentially

01:22:19,199 --> 01:22:24,800
banned negative observations although

01:22:21,199 --> 01:22:28,880
it's not quite as explicit in this back

01:22:24,800 --> 01:22:29,199
and um kind of mandated that that the

01:22:28,880 --> 01:22:32,639
sum

01:22:29,199 --> 01:22:34,239
is also a counter so now if we introduce

01:22:32,639 --> 01:22:36,000
this now we could say we are not open

01:22:34,239 --> 01:22:39,040
matrix compliant anymore

01:22:36,000 --> 01:22:39,679
um so now i see kind of a a vicious

01:22:39,040 --> 01:22:42,800
cycle

01:22:39,679 --> 01:22:46,239
of stabilizing things that

01:22:42,800 --> 01:22:47,600
i always consider to not be the final

01:22:46,239 --> 01:22:49,199
state we want to be in

01:22:47,600 --> 01:22:50,639
and this is where i put it up here so we

01:22:49,199 --> 01:22:55,120
can essentially

01:22:50,639 --> 01:22:58,320
find out what we actually want so

01:22:55,120 --> 01:23:00,560
just one thing first and ben

01:22:58,320 --> 01:23:02,000
is also here from the open metrics

01:23:00,560 --> 01:23:05,760
perspective

01:23:02,000 --> 01:23:07,920
the intention was is and will remain

01:23:05,760 --> 01:23:09,440
to stay as close to prometheus as

01:23:07,920 --> 01:23:12,480
possible

01:23:09,440 --> 01:23:15,360
for obvious reasons so if there

01:23:12,480 --> 01:23:17,280
are if prometheus team decides to do a

01:23:15,360 --> 01:23:20,239
change which needs to be supported in

01:23:17,280 --> 01:23:23,920
openmetrics openmetrics will support it

01:23:20,239 --> 01:23:26,320
easy um

01:23:23,920 --> 01:23:28,239
so there are two things uh something is

01:23:26,320 --> 01:23:30,400
that i don't think we should tie to the

01:23:28,239 --> 01:23:32,639
count but to the created

01:23:30,400 --> 01:23:34,320
in open metrics and that would tell us

01:23:32,639 --> 01:23:36,400
more like when the controller is no

01:23:34,320 --> 01:23:38,639
different

01:23:36,400 --> 01:23:40,159
and the second thing is that i want to

01:23:38,639 --> 01:23:42,719
point out that promoters is not the

01:23:40,159 --> 01:23:44,639
reference implementation of the

01:23:42,719 --> 01:23:46,719
parametric client that's a python

01:23:44,639 --> 01:23:49,440
implementation but in the server we

01:23:46,719 --> 01:23:51,199
have some freedom compared to the planar

01:23:49,440 --> 01:23:52,880
parametric stuff so

01:23:51,199 --> 01:23:54,560
but i think that we should more focus on

01:23:52,880 --> 01:23:55,840
the created time series that on the

01:23:54,560 --> 01:23:58,880
current time series

01:23:55,840 --> 01:24:00,560
if we want to do that the

01:23:58,880 --> 01:24:02,400
i mean this is an interesting point i

01:24:00,560 --> 01:24:04,159
was just never sure if created

01:24:02,400 --> 01:24:07,280
is really strictly creation of the

01:24:04,159 --> 01:24:10,080
counter of it is the last counter reset

01:24:07,280 --> 01:24:12,560
like would you if you just reset the

01:24:10,080 --> 01:24:14,400
counter because you can

01:24:12,560 --> 01:24:15,760
which would be detected with the current

01:24:14,400 --> 01:24:17,600
heuristics

01:24:15,760 --> 01:24:18,880
would the creator timestamp also be

01:24:17,600 --> 01:24:21,920
updated

01:24:18,880 --> 01:24:23,679
from the like that only exists in our

01:24:21,920 --> 01:24:24,000
metrics right it's not an old prometheus

01:24:23,679 --> 01:24:26,400
thing

01:24:24,000 --> 01:24:27,600
and i'm not sure if that's um clear from

01:24:26,400 --> 01:24:30,960
the spec

01:24:27,600 --> 01:24:34,159
i don't think that open yeah i does open

01:24:30,960 --> 01:24:37,199
metrics allow you to reset

01:24:34,159 --> 01:24:39,679
a counter yourself

01:24:37,199 --> 01:24:40,400
i mean the the there's the old thing

01:24:39,679 --> 01:24:43,440
when we had

01:24:40,400 --> 01:24:44,000
32-bit integers and and integer

01:24:43,440 --> 01:24:45,520
overflows

01:24:44,000 --> 01:24:47,679
all the time that the counter result was

01:24:45,520 --> 01:24:48,639
also just an overflow of the counter

01:24:47,679 --> 01:24:50,320
variable right that

01:24:48,639 --> 01:24:52,239
doesn't really apply to modern

01:24:50,320 --> 01:24:52,800
prometheus modern monitoring as in

01:24:52,239 --> 01:24:56,400
prometheus

01:24:52,800 --> 01:24:57,679
and exporters counters from other places

01:24:56,400 --> 01:25:00,239
that may just

01:24:57,679 --> 01:25:00,880
reset because that's which we booted

01:25:00,239 --> 01:25:03,920
yeah so

01:25:00,880 --> 01:25:04,480
in in general i think it's it's meant to

01:25:03,920 --> 01:25:06,719
be that

01:25:04,480 --> 01:25:08,480
whenever counter goes backwards for

01:25:06,719 --> 01:25:10,960
whatever reason perhaps it's backed by a

01:25:08,480 --> 01:25:12,320
32-bit integer on the source device and

01:25:10,960 --> 01:25:14,000
it just had an overflow

01:25:12,320 --> 01:25:16,719
it will be detected as a counter reset

01:25:14,000 --> 01:25:19,920
and i'm not sure if the created

01:25:16,719 --> 01:25:21,440
at is it created at whatever i mean that

01:25:19,920 --> 01:25:22,960
time stem is meant to be

01:25:21,440 --> 01:25:24,719
the time sum of the last counter reset

01:25:22,960 --> 01:25:27,360
or the time step when the counter was

01:25:24,719 --> 01:25:30,800
initially created

01:25:27,360 --> 01:25:32,880
so it's for created and there are valid

01:25:30,800 --> 01:25:33,679
use cases for resetting in particular if

01:25:32,880 --> 01:25:36,960
you go to

01:25:33,679 --> 01:25:40,400
snmp and such there even on what is

01:25:36,960 --> 01:25:43,520
super slow these days a 10 gig interface

01:25:40,400 --> 01:25:47,679
runs up really really quickly

01:25:43,520 --> 01:25:50,800
so um it is absolutely valid to simply

01:25:47,679 --> 01:25:52,639
reset that to zero um and and

01:25:50,800 --> 01:25:54,320
not lose the precision if you care about

01:25:52,639 --> 01:25:55,199
the precision you can also let it run

01:25:54,320 --> 01:25:56,960
longer

01:25:55,199 --> 01:26:00,000
and then you will most likely not run

01:25:56,960 --> 01:26:01,679
out of out of those 64 bits but if you

01:26:00,000 --> 01:26:04,320
care about precision

01:26:01,679 --> 01:26:05,360
just resetting that counter early is

01:26:04,320 --> 01:26:08,719
completely fine

01:26:05,360 --> 01:26:10,520
um um so an

01:26:08,719 --> 01:26:13,360
interesting wrinkle in this that i

01:26:10,520 --> 01:26:17,440
rediscovered today

01:26:13,360 --> 01:26:20,880
i have an exporter that uses histograms

01:26:17,440 --> 01:26:24,320
to not represent observations in time

01:26:20,880 --> 01:26:26,159
but observations in space

01:26:24,320 --> 01:26:27,679
what it does is this is a postfix

01:26:26,159 --> 01:26:30,480
exporter and it does

01:26:27,679 --> 01:26:32,239
a give me all the messages in the queue

01:26:30,480 --> 01:26:35,520
and it spits out a histogram

01:26:32,239 --> 01:26:36,880
of the distribution of sizes and ages of

01:26:35,520 --> 01:26:40,320
these messages

01:26:36,880 --> 01:26:42,719
at this point in time but the

01:26:40,320 --> 01:26:46,320
count of this goes up and down as the

01:26:42,719 --> 01:26:46,320
number of messages goes up and down

01:26:46,639 --> 01:26:50,400
sorry is that a gauge histogram in the

01:26:48,480 --> 01:26:53,440
sense of open openmetrics

01:26:50,400 --> 01:26:53,440
that's my suspicion

01:26:53,679 --> 01:26:56,880
i mean ben and and richie you might know

01:26:56,080 --> 01:26:58,400
better but

01:26:56,880 --> 01:27:00,320
my understanding of the gauge histogram

01:26:58,400 --> 01:27:02,960
is that's exactly that right

01:27:00,320 --> 01:27:04,639
or the histogram is not like really a

01:27:02,960 --> 01:27:09,440
time series it's just

01:27:04,639 --> 01:27:09,440
a data point in in a instagram right

01:27:09,600 --> 01:27:13,440
i'm pretty sure that's the gauge

01:27:11,360 --> 01:27:13,840
instagram yeah you would you would not

01:27:13,440 --> 01:27:16,239
run

01:27:13,840 --> 01:27:18,800
you would not run an an increase or a

01:27:16,239 --> 01:27:21,199
rate function there right no

01:27:18,800 --> 01:27:23,760
you you just goes you just go straight

01:27:21,199 --> 01:27:26,239
up histogram quantile

01:27:23,760 --> 01:27:27,600
spam yeah so i think that's fine and

01:27:26,239 --> 01:27:29,440
open metrics covers that

01:27:27,600 --> 01:27:30,800
i mean prometheus native prometheus

01:27:29,440 --> 01:27:33,840
doesn't have this but

01:27:30,800 --> 01:27:33,840
metrics thought about this

01:27:37,520 --> 01:27:41,880
so yeah kind of different different

01:27:38,880 --> 01:27:44,880
topic okay cool

01:27:41,880 --> 01:27:46,800
[Music]

01:27:44,880 --> 01:27:49,440
okay so what do we do about the

01:27:46,800 --> 01:27:49,440
underscore sum

01:27:50,880 --> 01:27:54,159
it's also like the question is is it

01:27:53,280 --> 01:27:57,199
even a change

01:27:54,159 --> 01:27:59,360
i always my understanding but i'm

01:27:57,199 --> 01:28:01,120
often too silent about those things was

01:27:59,360 --> 01:28:05,270
this is just a bug

01:28:01,120 --> 01:28:06,800
and others assume this is a feature

01:28:05,270 --> 01:28:08,719
[Music]

01:28:06,800 --> 01:28:11,040
so then the question is is it even a

01:28:08,719 --> 01:28:11,040
change

01:28:12,960 --> 01:28:16,880
it is a change because you can still

01:28:15,040 --> 01:28:19,760
have a counter

01:28:16,880 --> 01:28:21,120
and um and some value which are not

01:28:19,760 --> 01:28:23,679
related

01:28:21,120 --> 01:28:29,840
which are buggy or and you might not

01:28:23,679 --> 01:28:31,920
notice that now

01:28:29,840 --> 01:28:33,360
it also depends how you want to detect

01:28:31,920 --> 01:28:36,159
that if you want to

01:28:33,360 --> 01:28:37,679
insert an extra value in the tsdb or if

01:28:36,159 --> 01:28:39,199
you want to do that only at the query

01:28:37,679 --> 01:28:43,280
level that's also different stuff

01:28:39,199 --> 01:28:45,920
different approaches

01:28:43,280 --> 01:28:46,639
um no no no extra value it's just like

01:28:45,920 --> 01:28:49,920
if you

01:28:46,639 --> 01:28:53,040
if you go through if your rate

01:28:49,920 --> 01:28:55,040
if you do counter reset detection

01:28:53,040 --> 01:28:56,159
and the variable happens to end on

01:28:55,040 --> 01:28:58,480
underscore sum

01:28:56,159 --> 01:29:00,400
and there is precisely the same variable

01:28:58,480 --> 01:29:00,960
with the say the same metric with the

01:29:00,400 --> 01:29:02,960
same

01:29:00,960 --> 01:29:04,320
label set and the only difference is

01:29:02,960 --> 01:29:06,080
underscore count

01:29:04,320 --> 01:29:07,520
then you would detect the counter resets

01:29:06,080 --> 01:29:09,760
there and once

01:29:07,520 --> 01:29:10,560
prometheus has a notion of complex

01:29:09,760 --> 01:29:13,679
metric types

01:29:10,560 --> 01:29:16,480
you don't need this uh well like

01:29:13,679 --> 01:29:18,400
resolution by name anymore

01:29:16,480 --> 01:29:19,679
and this you could totally see this as a

01:29:18,400 --> 01:29:21,440
breaking change because

01:29:19,679 --> 01:29:23,199
now the counter set works differently

01:29:21,440 --> 01:29:26,000
but my argument is

01:29:23,199 --> 01:29:27,520
that i mean the the the probability that

01:29:26,000 --> 01:29:32,000
somebody creates this

01:29:27,520 --> 01:29:35,280
on purpose um is is very very low

01:29:32,000 --> 01:29:35,760
i know what happens today when i take a

01:29:35,280 --> 01:29:39,199
rate

01:29:35,760 --> 01:29:41,120
over this sum metric

01:29:39,199 --> 01:29:43,120
it's fine as long as you don't have

01:29:41,120 --> 01:29:43,920
negative observations if you have that

01:29:43,120 --> 01:29:46,400
you get

01:29:43,920 --> 01:29:48,719
erratic counter asset detection so right

01:29:46,400 --> 01:29:50,000
now if it's like the usual case that

01:29:48,719 --> 01:29:50,800
happens now if you have negative

01:29:50,000 --> 01:29:53,440
observation

01:29:50,800 --> 01:29:55,280
your rate over the sum is just broken

01:29:53,440 --> 01:29:56,719
this is my argument why this is not a

01:29:55,280 --> 01:29:59,440
breaking change this is a

01:29:56,719 --> 01:30:01,280
fixing change right where you where you

01:29:59,440 --> 01:30:03,520
just fix things that don't work

01:30:01,280 --> 01:30:05,280
nowadays the only thing where this would

01:30:03,520 --> 01:30:08,400
be a surprise

01:30:05,280 --> 01:30:10,000
if you happen to have a underscore sum

01:30:08,400 --> 01:30:11,679
and then underscore count metrics that

01:30:10,000 --> 01:30:12,719
are not part of a histogram or summary

01:30:11,679 --> 01:30:15,199
that are just

01:30:12,719 --> 01:30:16,800
randomly created and originally they

01:30:15,199 --> 01:30:19,440
were actually

01:30:16,800 --> 01:30:20,000
whatever a counter or gauge or something

01:30:19,440 --> 01:30:23,120
and you

01:30:20,000 --> 01:30:26,400
you now accidentally put them together

01:30:23,120 --> 01:30:27,520
but yesterday you shared a prank well

01:30:26,400 --> 01:30:29,520
query

01:30:27,520 --> 01:30:32,320
which can kind of disable the

01:30:29,520 --> 01:30:34,159
interpolation by running a sub query

01:30:32,320 --> 01:30:35,760
that would not work anymore then that

01:30:34,159 --> 01:30:36,560
kind of use case this would then be

01:30:35,760 --> 01:30:39,920
different

01:30:36,560 --> 01:30:42,639
if you use the the what

01:30:39,920 --> 01:30:45,600
what's inside is a sub query or is an

01:30:42,639 --> 01:30:45,600
actual metric name

01:30:46,320 --> 01:30:50,400
yeah then it um it's a different metric

01:30:48,719 --> 01:30:51,760
and you you cannot do this

01:30:50,400 --> 01:30:53,440
kind of counter is that detection

01:30:51,760 --> 01:30:55,440
anymore yeah so the

01:30:53,440 --> 01:30:56,880
yeah we don't have functions that take

01:30:55,440 --> 01:30:58,639
two vectors now but

01:30:56,880 --> 01:31:01,199
would that be the the solution that you

01:30:58,639 --> 01:31:04,320
can explicitly set a reference

01:31:01,199 --> 01:31:06,880
vector as a user that will use

01:31:04,320 --> 01:31:08,800
be used for the counter reset yeah i

01:31:06,880 --> 01:31:11,920
that was also one of my suggestions

01:31:08,800 --> 01:31:14,560
back then that could be done to tell

01:31:11,920 --> 01:31:16,239
like a specific on an optional argument

01:31:14,560 --> 01:31:17,840
in a rate and increase where you say

01:31:16,239 --> 01:31:18,960
counter resets please detect in this

01:31:17,840 --> 01:31:23,040
other metric

01:31:18,960 --> 01:31:25,760
which is also like kind of cumbersome

01:31:23,040 --> 01:31:26,239
i mean the the proper solution is to

01:31:25,760 --> 01:31:29,360
have

01:31:26,239 --> 01:31:32,400
metrics that are actually complex

01:31:29,360 --> 01:31:34,719
and if you if you then

01:31:32,400 --> 01:31:36,560
do any operation on them they spit out

01:31:34,719 --> 01:31:37,840
the same type of complex metrics again

01:31:36,560 --> 01:31:39,440
right but that's that's a more

01:31:37,840 --> 01:31:43,920
fundamental change

01:31:39,440 --> 01:31:44,480
um in prom ql and the argument so far is

01:31:43,920 --> 01:31:47,600
i mean i

01:31:44,480 --> 01:31:49,920
i saw it as yeah we kind of uh wing it

01:31:47,600 --> 01:31:50,639
by the with the current model and so we

01:31:49,920 --> 01:31:53,840
can

01:31:50,639 --> 01:31:55,040
as well wing this this counters that

01:31:53,840 --> 01:31:58,000
case

01:31:55,040 --> 01:31:59,920
so what we see now is we are seeing pull

01:31:58,000 --> 01:32:01,920
requests from cortex because

01:31:59,920 --> 01:32:03,360
users say very slow query because of

01:32:01,920 --> 01:32:04,880
their cardinality

01:32:03,360 --> 01:32:07,199
and i don't see how we can fix that

01:32:04,880 --> 01:32:09,199
problem without introducing more latency

01:32:07,199 --> 01:32:11,199
in from qr

01:32:09,199 --> 01:32:12,560
and we see that currently like the

01:32:11,199 --> 01:32:14,880
performance of from ql

01:32:12,560 --> 01:32:15,760
is causing issues at scale at the cortex

01:32:14,880 --> 01:32:18,000
scale

01:32:15,760 --> 01:32:19,920
and i would not want to introduce new

01:32:18,000 --> 01:32:21,679
feature that would go in the way of

01:32:19,920 --> 01:32:22,800
getting more performances because it

01:32:21,679 --> 01:32:27,840
seems that's what

01:32:22,800 --> 01:32:27,840
some of the users need

01:32:29,280 --> 01:32:33,520
yeah don't know like i mean if it's

01:32:34,080 --> 01:32:39,199
like the the problem here is that this

01:32:36,560 --> 01:32:42,800
is happening extremely rarely right

01:32:39,199 --> 01:32:46,480
and so if you if you're the do you want

01:32:42,800 --> 01:32:47,840
uh additional performance although in 99

01:32:46,480 --> 01:32:48,880
of the cases you don't you don't have

01:32:47,840 --> 01:32:51,840
this 99

01:32:48,880 --> 01:32:51,840
plus percent

01:32:52,400 --> 01:32:57,199
i don't know but if in your expression

01:32:54,400 --> 01:32:59,280
you have the underscore count anyway

01:32:57,199 --> 01:33:00,719
included then um

01:32:59,280 --> 01:33:01,840
[Music]

01:33:00,719 --> 01:33:04,000
it's probably not an additional

01:33:01,840 --> 01:33:09,840
performance overhead

01:33:04,000 --> 01:33:09,840
or it could be optimized not to

01:33:14,560 --> 01:33:20,639
so i

01:33:17,840 --> 01:33:21,520
i think i got lost along the way at some

01:33:20,639 --> 01:33:24,560
point

01:33:21,520 --> 01:33:27,679
i don't really understand

01:33:24,560 --> 01:33:29,440
what we actually like why we need to do

01:33:27,679 --> 01:33:31,120
anything

01:33:29,440 --> 01:33:34,080
at the moment if i'm if i'm making

01:33:31,120 --> 01:33:36,320
expressions over my sums and counts and

01:33:34,080 --> 01:33:38,560
using them to calculate averages i mean

01:33:36,320 --> 01:33:40,639
i can use rate or i can use derivative

01:33:38,560 --> 01:33:43,840
depending on the shape of my

01:33:40,639 --> 01:33:45,199
data and i just need to know

01:33:43,840 --> 01:33:46,800
and that's generally the approach we

01:33:45,199 --> 01:33:48,719
have with counters right i need to know

01:33:46,800 --> 01:33:51,440
if it's a counter or not

01:33:48,719 --> 01:33:52,960
yeah the problem is that underscore some

01:33:51,440 --> 01:33:54,080
ceases to be a counter

01:33:52,960 --> 01:33:57,520
the moment you have negative

01:33:54,080 --> 01:34:00,159
observations and this is like totally

01:33:57,520 --> 01:34:00,960
you have no way of knowing that unless

01:34:00,159 --> 01:34:04,560
you

01:34:00,960 --> 01:34:06,080
you just trust your your monitor targets

01:34:04,560 --> 01:34:07,600
that they never do this

01:34:06,080 --> 01:34:09,760
but i would phrase it the other way

01:34:07,600 --> 01:34:13,040
around i need to know

01:34:09,760 --> 01:34:14,400
that underscore some is like i need to

01:34:13,040 --> 01:34:16,080
know that it's a counter in the first

01:34:14,400 --> 01:34:21,040
place

01:34:16,080 --> 01:34:23,120
from the name that's not obvious

01:34:21,040 --> 01:34:25,280
right yeah but it's it's this is what

01:34:23,120 --> 01:34:27,920
you do all the time right if you do

01:34:25,280 --> 01:34:29,520
any calculations with the underscore sum

01:34:27,920 --> 01:34:30,400
and underscore account of histograms and

01:34:29,520 --> 01:34:32,400
summaries

01:34:30,400 --> 01:34:33,760
you assume it behaves like a counter and

01:34:32,400 --> 01:34:37,199
that's true

01:34:33,760 --> 01:34:38,560
in 99 plus percent of the cases because

01:34:37,199 --> 01:34:40,159
people just rarely do negative

01:34:38,560 --> 01:34:42,159
observations

01:34:40,159 --> 01:34:43,679
honestly i would leave it at that i i

01:34:42,159 --> 01:34:46,159
would just leave it as it is

01:34:43,679 --> 01:34:47,119
and that let people like if people do

01:34:46,159 --> 01:34:48,719
invalid like

01:34:47,119 --> 01:34:50,639
do rate over things that are not

01:34:48,719 --> 01:34:53,040
counters

01:34:50,639 --> 01:34:54,239
yes bad things happen and i think in

01:34:53,040 --> 01:34:57,679
prom ql2

01:34:54,239 --> 01:35:00,320
we should think about how do we fix that

01:34:57,679 --> 01:35:00,880
how do we know what we are dealing with

01:35:00,320 --> 01:35:03,679
here

01:35:00,880 --> 01:35:05,040
right do we know if like understanding

01:35:03,679 --> 01:35:08,800
the types of metric

01:35:05,040 --> 01:35:12,080
of time series but i think in prongql

01:35:08,800 --> 01:35:15,840
as it is we already put the burden of

01:35:12,080 --> 01:35:15,840
this on the user anyway

01:35:16,080 --> 01:35:19,360
i mean we allow negative observations in

01:35:18,320 --> 01:35:21,360
the instrumentation

01:35:19,360 --> 01:35:22,639
libraries right so right and we allow

01:35:21,360 --> 01:35:25,360
you to use derivative

01:35:22,639 --> 01:35:25,360
on this metric

01:35:26,639 --> 01:35:30,320
the derivative is not like the

01:35:28,320 --> 01:35:32,000
equivalent of like the calculation is

01:35:30,320 --> 01:35:34,239
totally different right

01:35:32,000 --> 01:35:35,440
also you can have you can actually have

01:35:34,239 --> 01:35:38,159
a real counter reset

01:35:35,440 --> 01:35:39,520
in in this right so that's that's

01:35:38,159 --> 01:35:42,000
totally normal

01:35:39,520 --> 01:35:43,679
and uh then the roof would also not help

01:35:42,000 --> 01:35:45,920
you also it's mathematically something

01:35:43,679 --> 01:35:45,920
else

01:35:46,320 --> 01:35:49,600
it's just like we d we detect the

01:35:48,159 --> 01:35:53,199
calories that's at the wrong

01:35:49,600 --> 01:35:56,560
point and um we kind of

01:35:53,199 --> 01:35:58,000
uh if we don't consider this remark it's

01:35:56,560 --> 01:35:59,520
it's fine like i just want to make this

01:35:58,000 --> 01:36:01,760
explicit

01:35:59,520 --> 01:36:03,040
i consider the bark i never like i

01:36:01,760 --> 01:36:05,679
always wanted to fix that

01:36:03,040 --> 01:36:06,880
and of course then other people had

01:36:05,679 --> 01:36:10,080
other opinions and

01:36:06,880 --> 01:36:13,199
i think we we need to clean up this

01:36:10,080 --> 01:36:13,199
this kind of dissonance

01:36:16,480 --> 01:36:20,480
sorry um i i would consider it a bug in

01:36:19,040 --> 01:36:22,080
those queries

01:36:20,480 --> 01:36:24,080
if they're doing raid over something

01:36:22,080 --> 01:36:26,639
that can go down

01:36:24,080 --> 01:36:29,600
that can happen that can happen in many

01:36:26,639 --> 01:36:33,440
places in prom ql as it is

01:36:29,600 --> 01:36:37,600
i would like to consider ways of

01:36:33,440 --> 01:36:39,920
not exposing users to this potential bug

01:36:37,600 --> 01:36:40,960
but i don't think a special case

01:36:39,920 --> 01:36:43,199
solution

01:36:40,960 --> 01:36:44,560
for underscore sum and under underscore

01:36:43,199 --> 01:36:47,199
count

01:36:44,560 --> 01:36:47,920
is the right way to go i would i would

01:36:47,199 --> 01:36:50,080
leave

01:36:47,920 --> 01:36:50,080
like

01:36:51,119 --> 01:36:56,880
like my my my position is that this is

01:36:54,320 --> 01:37:00,639
fundamentally a problem in prom ql

01:36:56,880 --> 01:37:05,840
one um and we should

01:37:00,639 --> 01:37:06,159
look at an elegant solution in from ql2

01:37:05,840 --> 01:37:08,719
and

01:37:06,159 --> 01:37:09,440
also like in the exposure they can most

01:37:08,719 --> 01:37:11,520
of the time

01:37:09,440 --> 01:37:13,199
they can use like absolute degrees or

01:37:11,520 --> 01:37:15,520
they can shift the data

01:37:13,199 --> 01:37:16,719
up by 300 or something like that to not

01:37:15,520 --> 01:37:20,000
have those

01:37:16,719 --> 01:37:21,920
negative values i mean the

01:37:20,000 --> 01:37:23,360
solution then would be to not accept

01:37:21,920 --> 01:37:26,639
negative observations

01:37:23,360 --> 01:37:26,639
in the instrumentation libraries

01:37:27,040 --> 01:37:30,800
yes because then you would force people

01:37:29,360 --> 01:37:33,760
to do this

01:37:30,800 --> 01:37:34,000
but i mean i i would like to act like i

01:37:33,760 --> 01:37:37,440
mean

01:37:34,000 --> 01:37:39,760
i like histograms that are

01:37:37,440 --> 01:37:42,080
over different things right so i i would

01:37:39,760 --> 01:37:44,239
rather not force users into

01:37:42,080 --> 01:37:49,280
having some like that some must behave

01:37:44,239 --> 01:37:52,080
like a counter

01:37:49,280 --> 01:37:52,639
and i would rather i would rather rely

01:37:52,080 --> 01:37:54,800
on

01:37:52,639 --> 01:37:56,239
well you know your data for the common

01:37:54,800 --> 01:37:58,960
case the common

01:37:56,239 --> 01:38:00,880
form of query works when it starts

01:37:58,960 --> 01:38:02,320
erratically misbehaving you look into

01:38:00,880 --> 01:38:04,560
why and you figure out oh

01:38:02,320 --> 01:38:07,040
it's actually going down sure i can't do

01:38:04,560 --> 01:38:07,040
right here

01:38:07,840 --> 01:38:13,199
yeah i think that's that's with

01:38:10,960 --> 01:38:14,719
also it's nowhere documented right you

01:38:13,199 --> 01:38:16,159
have no that's something we can

01:38:14,719 --> 01:38:18,239
we can change right that's something we

01:38:16,159 --> 01:38:19,280
can be more clear about or that we can

01:38:18,239 --> 01:38:22,800
put on the blog

01:38:19,280 --> 01:38:25,760
a um things to consider when you're

01:38:22,800 --> 01:38:28,159
dealing with histograms

01:38:25,760 --> 01:38:30,000
most histograms are counter-like because

01:38:28,159 --> 01:38:31,920
they always go up and then you can do

01:38:30,000 --> 01:38:36,320
and in that case you want to do it this

01:38:31,920 --> 01:38:36,320
way in that case you want to use rate

01:38:37,679 --> 01:38:41,440
but if you have something like my

01:38:39,119 --> 01:38:44,639
postfix histograms

01:38:41,440 --> 01:38:46,560
you for sure don't want to do that

01:38:44,639 --> 01:38:48,480
yeah but that postfig instagram doesn't

01:38:46,560 --> 01:38:51,760
have some account right

01:38:48,480 --> 01:38:52,320
oh no it does it has a sum over all the

01:38:51,760 --> 01:38:53,840
sizes

01:38:52,320 --> 01:38:55,679
and it has a count of how many emails

01:38:53,840 --> 01:38:58,719
there are

01:38:55,679 --> 01:38:59,920
okay yeah oh yeah you're right it's just

01:38:58,719 --> 01:39:03,440
a gauge histogram

01:38:59,920 --> 01:39:05,840
in open metrics lingo so you wouldn't

01:39:03,440 --> 01:39:06,639
and i think the the longer term solution

01:39:05,840 --> 01:39:10,840
for

01:39:06,639 --> 01:39:13,360
having users not have to worry about it

01:39:10,840 --> 01:39:15,280
is like one

01:39:13,360 --> 01:39:17,280
declaring whether this histogram is

01:39:15,280 --> 01:39:19,600
counter-like or not

01:39:17,280 --> 01:39:20,639
and so like separating out gauge

01:39:19,600 --> 01:39:23,119
histograms which

01:39:20,639 --> 01:39:24,719
open metric already does and then being

01:39:23,119 --> 01:39:28,480
aware of

01:39:24,719 --> 01:39:30,560
what the type was of what we scraped

01:39:28,480 --> 01:39:31,520
and then having rate just do the right

01:39:30,560 --> 01:39:35,360
thing

01:39:31,520 --> 01:39:38,239
based on the type of the thing it gets

01:39:35,360 --> 01:39:40,239
yeah and this is the view i have of

01:39:38,239 --> 01:39:43,520
prometheus is that we essentially

01:39:40,239 --> 01:39:45,920
emulate this complex model by using

01:39:43,520 --> 01:39:48,320
magic suffixes on metric names right

01:39:45,920 --> 01:39:49,679
and what i think is we what we always

01:39:48,320 --> 01:39:52,719
should have done

01:39:49,679 --> 01:39:55,600
is to embrace that and say i mean

01:39:52,719 --> 01:39:57,280
we even i think i don't know if it's if

01:39:55,600 --> 01:39:59,040
it's completely forbidden that we just

01:39:57,280 --> 01:40:00,560
disallow

01:39:59,040 --> 01:40:03,280
using underscore summon underscore

01:40:00,560 --> 01:40:06,000
account like arbitrarily on other

01:40:03,280 --> 01:40:07,440
metric types um probably probably just

01:40:06,000 --> 01:40:11,840
checks for collisions

01:40:07,440 --> 01:40:23,840
but yeah kind of make this

01:40:11,840 --> 01:40:23,840
the way we mark a histogram in a summary

01:40:25,199 --> 01:40:31,360
um what matrixql from a victoria matrix

01:40:29,440 --> 01:40:33,679
s is that they have all those fancy

01:40:31,360 --> 01:40:35,280
functions to calculate the ratio so

01:40:33,679 --> 01:40:36,719
you don't need to do the divide and we

01:40:35,280 --> 01:40:38,800
could have something like that for the

01:40:36,719 --> 01:40:40,480
ray that would just take the two vectors

01:40:38,800 --> 01:40:41,760
and do the magic there and we wouldn't

01:40:40,480 --> 01:40:43,840
make any user

01:40:41,760 --> 01:40:44,880
that's the third suggestion that i made

01:40:43,840 --> 01:40:48,800
back then

01:40:44,880 --> 01:40:50,480
in these are the three suggestions right

01:40:48,800 --> 01:40:53,440
to have a specific function

01:40:50,480 --> 01:40:55,040
to take for for like well you want to

01:40:53,440 --> 01:40:58,480
combine some and count

01:40:55,040 --> 01:40:59,679
in if you want to do this what is it

01:40:58,480 --> 01:41:01,600
called

01:40:59,679 --> 01:41:03,199
average if you want to get your average

01:41:01,600 --> 01:41:05,760
latency and you divide some

01:41:03,199 --> 01:41:07,040
rate sum divide by rate count you just

01:41:05,760 --> 01:41:08,800
have a function for that

01:41:07,040 --> 01:41:11,040
right that was my one suggestion the

01:41:08,800 --> 01:41:14,000
other is you have an additional

01:41:11,040 --> 01:41:15,920
parameter to tell rate where it should

01:41:14,000 --> 01:41:17,280
detect the counter resets and the third

01:41:15,920 --> 01:41:20,480
suggestion was

01:41:17,280 --> 01:41:22,480
to um to just do this implicitly right

01:41:20,480 --> 01:41:24,480
because i think it will just work right

01:41:22,480 --> 01:41:26,800
it's just i mean what you said julian

01:41:24,480 --> 01:41:30,320
it's a performance overhead of course

01:41:26,800 --> 01:41:32,000
um so yes uh it is not really a big

01:41:30,320 --> 01:41:33,520
performance over it because you would do

01:41:32,000 --> 01:41:36,560
the division at the same time

01:41:33,520 --> 01:41:37,440
so you would use the data you get yeah

01:41:36,560 --> 01:41:40,639
but should you

01:41:37,440 --> 01:41:43,280
ever just do a rate isolated on the sum

01:41:40,639 --> 01:41:44,560
then then this would implicitly do more

01:41:43,280 --> 01:41:46,960
work because it would

01:41:44,560 --> 01:41:46,960
count and

01:41:55,840 --> 01:41:59,040
that's a valid concern that suddenly

01:41:58,560 --> 01:42:00,639
makes

01:41:59,040 --> 01:42:03,360
a lot of queries that didn't need that

01:42:00,639 --> 01:42:06,560
before um more costly

01:42:03,360 --> 01:42:09,280
um yeah and so but these were the

01:42:06,560 --> 01:42:10,239
three suggestions i made back then and

01:42:09,280 --> 01:42:12,400
the fourth would be

01:42:10,239 --> 01:42:13,520
just leave it as is but then we should

01:42:12,400 --> 01:42:16,880
at least be explicit

01:42:13,520 --> 01:42:19,360
that this is the case um and

01:42:16,880 --> 01:42:21,760
yeah it's essentially i would just like

01:42:19,360 --> 01:42:24,159
to us to pick one of the four

01:42:21,760 --> 01:42:25,520
so that we where we have explicit we are

01:42:24,159 --> 01:42:29,040
explicit about that

01:42:25,520 --> 01:42:29,600
whatever we do my preferred one is to do

01:42:29,040 --> 01:42:33,040
nothing

01:42:29,600 --> 01:42:34,719
and put it on the pile of considerations

01:42:33,040 --> 01:42:37,199
for from ql2

01:42:34,719 --> 01:42:38,159
yeah and i also know that no one outside

01:42:37,199 --> 01:42:42,239
of team

01:42:38,159 --> 01:42:45,760
jumped inside that issue

01:42:42,239 --> 01:42:47,520
so it seems very very theoretical

01:42:45,760 --> 01:42:49,760
it's negative observations are really

01:42:47,520 --> 01:42:51,679
rare i'm just afraid that some people

01:42:49,760 --> 01:42:53,119
i mean i have seen so many people who

01:42:51,679 --> 01:42:55,520
who accidentally

01:42:53,119 --> 01:42:56,880
uh did iterate on something that is

01:42:55,520 --> 01:42:57,840
another counter and it took them very

01:42:56,880 --> 01:43:00,080
very long

01:42:57,840 --> 01:43:02,239
to notice the last one that happened was

01:43:00,080 --> 01:43:03,600
a guy named tom wilkie who

01:43:02,239 --> 01:43:05,280
who doesn't know anything about

01:43:03,600 --> 01:43:08,080
prometheus right but what

01:43:05,280 --> 01:43:09,760
was that about the sir no no this was

01:43:08,080 --> 01:43:11,679
just the case where you created a

01:43:09,760 --> 01:43:13,760
dashboard and you accidentally

01:43:11,679 --> 01:43:14,719
did rate of something that is not a

01:43:13,760 --> 01:43:17,600
counter

01:43:14,719 --> 01:43:19,600
and and uh because it didn't look

01:43:17,600 --> 01:43:22,000
obviously wrong on the dashboard

01:43:19,600 --> 01:43:23,360
it took like a long time until someone

01:43:22,000 --> 01:43:24,560
realized wait a second what are you

01:43:23,360 --> 01:43:27,760
doing here

01:43:24,560 --> 01:43:29,440
i mean another like more like more

01:43:27,760 --> 01:43:32,800
orthogonal solution or

01:43:29,440 --> 01:43:36,159
more of ordinal proposal would be make

01:43:32,800 --> 01:43:38,480
the whole reset detection

01:43:36,159 --> 01:43:39,760
more smart about this this isn't

01:43:38,480 --> 01:43:42,320
actually a reset

01:43:39,760 --> 01:43:44,400
right this keeps going up and down i or

01:43:42,320 --> 01:43:46,239
i have multiple samples where it keeps

01:43:44,400 --> 01:43:48,400
going down one after another

01:43:46,239 --> 01:43:49,280
that can't be like there can't be like

01:43:48,400 --> 01:43:52,639
three resets

01:43:49,280 --> 01:43:54,719
in free sample yeah but i mean that that

01:43:52,639 --> 01:43:55,920
would it's an interesting consideration

01:43:54,719 --> 01:43:58,239
but i think this

01:43:55,920 --> 01:43:59,440
this use case is probably where you

01:43:58,239 --> 01:44:02,560
might have

01:43:59,440 --> 01:44:04,159
let's say you have a histogram of an

01:44:02,560 --> 01:44:05,840
actual latency which should never be

01:44:04,159 --> 01:44:06,800
negative but then you have some weird

01:44:05,840 --> 01:44:08,560
floating point

01:44:06,800 --> 01:44:10,560
blah blah or something and and you

01:44:08,560 --> 01:44:13,760
actually accidentally sometimes

01:44:10,560 --> 01:44:15,520
observe a tiny bit negative uh

01:44:13,760 --> 01:44:17,280
observation and then you you suddenly

01:44:15,520 --> 01:44:19,280
have a huge counter reset

01:44:17,280 --> 01:44:21,440
rarely right so you wouldn't even notice

01:44:19,280 --> 01:44:22,159
this is my suspicion why this has never

01:44:21,440 --> 01:44:24,400
been

01:44:22,159 --> 01:44:25,199
brought up uh either because use cases

01:44:24,400 --> 01:44:26,880
were so easy

01:44:25,199 --> 01:44:29,119
that people didn't even dare to to

01:44:26,880 --> 01:44:29,920
complain about it or it was something

01:44:29,119 --> 01:44:33,119
that just got

01:44:29,920 --> 01:44:33,920
under the radar but in in some specific

01:44:33,119 --> 01:44:35,760
or it

01:44:33,920 --> 01:44:37,600
might have created some confusion but

01:44:35,760 --> 01:44:38,639
nobody ever suspected that this is the

01:44:37,600 --> 01:44:41,440
reason

01:44:38,639 --> 01:44:43,360
okay so this is especially because it's

01:44:41,440 --> 01:44:46,480
so rare i'm a bit worried that that

01:44:43,360 --> 01:44:46,880
um i mean yeah again i'm saying the same

01:44:46,480 --> 01:44:49,360
thing

01:44:46,880 --> 01:44:51,360
if we if we decide to not do anything we

01:44:49,360 --> 01:44:53,440
should make it very explicit

01:44:51,360 --> 01:44:55,679
this is what we have done in open

01:44:53,440 --> 01:44:58,960
metrics then saying that you should not

01:44:55,679 --> 01:45:02,239
have this almost almost because metrics

01:44:58,960 --> 01:45:04,239
says i think it says nothing about

01:45:02,239 --> 01:45:06,320
summaries it's completely silent about

01:45:04,239 --> 01:45:08,719
the problem and in histograms

01:45:06,320 --> 01:45:09,679
it says if there are negative pockets

01:45:08,719 --> 01:45:13,280
defined then

01:45:09,679 --> 01:45:13,760
the sum goes away it's just not exposed

01:45:13,280 --> 01:45:15,920
right

01:45:13,760 --> 01:45:17,679
but you could still have only define

01:45:15,920 --> 01:45:18,560
positive pockets and do negative

01:45:17,679 --> 01:45:20,880
observations

01:45:18,560 --> 01:45:21,679
and the sum behaves in this way and this

01:45:20,880 --> 01:45:24,719
case i think

01:45:21,679 --> 01:45:25,600
isn't really covered like it should

01:45:24,719 --> 01:45:27,440
probably name

01:45:25,600 --> 01:45:28,880
if if you ever have a single negative

01:45:27,440 --> 01:45:30,719
observation

01:45:28,880 --> 01:45:32,639
kick out the sum or something like that

01:45:30,719 --> 01:45:33,920
but i mean not even sure if that would

01:45:32,639 --> 01:45:36,480
be consistent

01:45:33,920 --> 01:45:37,520
you should probably yeah i don't know

01:45:36,480 --> 01:45:40,080
it's it's a messy

01:45:37,520 --> 01:45:40,080
messy thing

01:45:41,040 --> 01:45:44,639
that's not directly related to a

01:45:42,400 --> 01:45:46,480
discussion we're currently having but

01:45:44,639 --> 01:45:48,080
we can easily just put more stuff onto

01:45:46,480 --> 01:45:49,840
the considerations and

01:45:48,080 --> 01:45:52,239
we intend to put a few more things into

01:45:49,840 --> 01:45:54,960
the consideration section anyway

01:45:52,239 --> 01:45:57,360
so any and all input is more than

01:45:54,960 --> 01:45:57,360
welcome

01:45:57,600 --> 01:46:01,440
with the open metrics head on um

01:46:03,199 --> 01:46:07,679
i just wanted to say the comment a

01:46:05,760 --> 01:46:11,040
moment ago about

01:46:07,679 --> 01:46:14,000
um treating

01:46:11,040 --> 01:46:14,800
for resets if if you had several uh

01:46:14,000 --> 01:46:18,000
subsequent

01:46:14,800 --> 01:46:19,199
samples that go down that could happen

01:46:18,000 --> 01:46:22,400
with a counter

01:46:19,199 --> 01:46:24,400
if you have a reasonably long um

01:46:22,400 --> 01:46:26,800
scraping interval and something must

01:46:24,400 --> 01:46:28,880
keep crashing and restarting for example

01:46:26,800 --> 01:46:30,480
uh that could quite literally happen so

01:46:28,880 --> 01:46:33,280
just be cautious of that

01:46:30,480 --> 01:46:33,920
that is true but then we still can't

01:46:33,280 --> 01:46:37,040
actually

01:46:33,920 --> 01:46:37,920
calculate any reasonable rate yeah this

01:46:37,040 --> 01:46:40,400
is so we could

01:46:37,920 --> 01:46:42,080
say like we could just say like we don't

01:46:40,400 --> 01:46:44,480
return any data at that point

01:46:42,080 --> 01:46:46,000
because we don't actually know and then

01:46:44,480 --> 01:46:47,920
someone is sitting there and doesn't

01:46:46,000 --> 01:46:50,239
know why they have this gap there

01:46:47,920 --> 01:46:53,440
because something super magic

01:46:50,239 --> 01:46:56,800
is implicitly happening happening super

01:46:53,440 --> 01:46:57,520
deeply somewhere in their stack i don't

01:46:56,800 --> 01:47:00,480
think

01:46:57,520 --> 01:47:02,880
overly magic like principle of least

01:47:00,480 --> 01:47:04,560
surprise

01:47:02,880 --> 01:47:06,800
yeah i don't i mean i think this is

01:47:04,560 --> 01:47:09,280
completely orthogonal to have some

01:47:06,800 --> 01:47:11,119
some whatever it could be just a warning

01:47:09,280 --> 01:47:12,400
this counter is resetting quite often

01:47:11,119 --> 01:47:13,679
are you sure it's really account right

01:47:12,400 --> 01:47:15,280
but i think this is

01:47:13,679 --> 01:47:18,000
different from what i'm talking about

01:47:15,280 --> 01:47:19,360
because in that case of a rare negative

01:47:18,000 --> 01:47:21,679
observation you would also

01:47:19,360 --> 01:47:23,920
see very rare pseudo counter resets

01:47:21,679 --> 01:47:27,360
right so that doesn't even help you here

01:47:23,920 --> 01:47:31,280
um it's more like yeah

01:47:27,360 --> 01:47:32,719
um this is i'm specifically afraid of

01:47:31,280 --> 01:47:36,000
this because it could

01:47:32,719 --> 01:47:39,280
break in very like not very visible

01:47:36,000 --> 01:47:42,080
ways and yeah i guess it's

01:47:39,280 --> 01:47:43,440
it's saying the same thing at least

01:47:42,080 --> 01:47:44,960
let's be explicit about it if you don't

01:47:43,440 --> 01:47:48,320
want to change anything

01:47:44,960 --> 01:47:50,639
i i just thought we should just do this

01:47:48,320 --> 01:47:52,400
implicit thing because it will in the

01:47:50,639 --> 01:47:52,960
overwhelming majority will do the right

01:47:52,400 --> 01:47:55,280
thing

01:47:52,960 --> 01:47:57,440
only concern is that it might be in

01:47:55,280 --> 01:48:00,800
specific cases a performance aware that

01:47:57,440 --> 01:48:05,119
in very few cases might actually

01:48:00,800 --> 01:48:07,119
like like be so annoying that it it uh

01:48:05,119 --> 01:48:08,480
makes a query that was just under the

01:48:07,119 --> 01:48:12,880
timeout before it's now

01:48:08,480 --> 01:48:14,960
um uh running in a timeout

01:48:12,880 --> 01:48:16,320
so i wouldn't be too concerned about

01:48:14,960 --> 01:48:20,000
that one but

01:48:16,320 --> 01:48:21,440
it's available i think i would not want

01:48:20,000 --> 01:48:23,679
to do anything about it

01:48:21,440 --> 01:48:24,880
because we have a well-defined behavior

01:48:23,679 --> 01:48:28,159
now

01:48:24,880 --> 01:48:30,960
and like uh if your user really has a u

01:48:28,159 --> 01:48:32,880
skill that really cannot be solved by

01:48:30,960 --> 01:48:34,000
any magic that we have in place we can

01:48:32,880 --> 01:48:36,239
revise it but

01:48:34,000 --> 01:48:37,920
as far as it stands i think it's well

01:48:36,239 --> 01:48:38,639
documented the behavior of the rate

01:48:37,920 --> 01:48:40,080
function and

01:48:38,639 --> 01:48:42,639
that kind of thing so i don't think we

01:48:40,080 --> 01:48:44,320
want to change anything

01:48:42,639 --> 01:48:45,920
the rate function is not if the

01:48:44,320 --> 01:48:47,920
documentation is fine the problem is

01:48:45,920 --> 01:48:49,520
that the underscore sum is documented as

01:48:47,920 --> 01:48:52,480
a counter essentially

01:48:49,520 --> 01:48:55,600
so that's an issue yeah that's an issue

01:48:52,480 --> 01:48:55,600
at the open metric side

01:48:56,000 --> 01:49:00,800
it's also yeah it's an issue for users

01:48:58,719 --> 01:49:03,440
they use instrumentation library they

01:49:00,800 --> 01:49:04,719
learn about observations and there is no

01:49:03,440 --> 01:49:06,719
warning sign

01:49:04,719 --> 01:49:10,000
that you should probably not put

01:49:06,719 --> 01:49:10,000
negative observations here

01:49:10,239 --> 01:49:13,599
well i mean my point is my position is

01:49:13,280 --> 01:49:14,960
that

01:49:13,599 --> 01:49:17,040
you should totally put negative

01:49:14,960 --> 01:49:19,920
observations there then you just

01:49:17,040 --> 01:49:20,560
can't do rate things in your queries

01:49:19,920 --> 01:49:23,280
yeah

01:49:20,560 --> 01:49:25,040
that's a connection that is for sure

01:49:23,280 --> 01:49:27,599
hard to make at the moment because you

01:49:25,040 --> 01:49:29,119
need to combine multiple concepts

01:49:27,599 --> 01:49:30,960
across different pages in the

01:49:29,119 --> 01:49:33,280
documentation to work

01:49:30,960 --> 01:49:34,080
out that you cannot that you shouldn't

01:49:33,280 --> 01:49:36,880
do this

01:49:34,080 --> 01:49:38,159
but we can clarify these things we can

01:49:36,880 --> 01:49:41,280
put in the rate

01:49:38,159 --> 01:49:43,280
that like if this goes down for example

01:49:41,280 --> 01:49:44,320
if you have negative observations in

01:49:43,280 --> 01:49:47,360
your

01:49:44,320 --> 01:49:49,599
histogram don't use this there we can

01:49:47,360 --> 01:49:52,159
put in the histogram documentation

01:49:49,599 --> 01:49:54,639
if you have negative observations

01:49:52,159 --> 01:49:56,719
calculate your ratios like so

01:49:54,639 --> 01:49:58,080
or don't calculate ratios yeah you can't

01:49:56,719 --> 01:50:00,560
calculate rates

01:49:58,080 --> 01:50:00,560
it's gone

01:50:01,360 --> 01:50:06,159
so i i would also like to solve this

01:50:03,599 --> 01:50:08,480
with documentation and clarification

01:50:06,159 --> 01:50:10,080
and not change the behavior of the like

01:50:08,480 --> 01:50:13,520
not i wouldn't like to make

01:50:10,080 --> 01:50:13,520
from ql more magic

01:50:15,760 --> 01:50:21,840
yeah and then do this once we have a

01:50:19,040 --> 01:50:22,719
prom ql that has a notion of complex

01:50:21,840 --> 01:50:25,760
types

01:50:22,719 --> 01:50:28,080
yes they can be done yes

01:50:25,760 --> 01:50:31,280
then it can be done not magically but

01:50:28,080 --> 01:50:31,280
like in a well defined way

01:50:33,440 --> 01:50:36,719
so is that what we want to do

01:50:36,800 --> 01:50:40,400
everyone is just confused right

01:50:43,520 --> 01:50:47,599
uh maybe we need to spell it out into an

01:50:46,320 --> 01:50:50,639
actual consensus

01:50:47,599 --> 01:50:53,840
um because i i think we i think

01:50:50,639 --> 01:50:53,840
we have three points

01:50:54,560 --> 01:51:02,239
put it on the list for prom two

01:50:59,199 --> 01:51:02,239
document it better

01:51:02,320 --> 01:51:09,679
now we have two things those are the two

01:51:06,960 --> 01:51:10,800
and not change the behavior that's

01:51:09,679 --> 01:51:12,719
incredible

01:51:10,800 --> 01:51:15,280
okay yeah okay but we can also make it

01:51:12,719 --> 01:51:15,280
explicit

01:51:15,599 --> 01:51:20,080
which closes the door on burn to some

01:51:17,520 --> 01:51:22,239
extent which uh

01:51:20,080 --> 01:51:24,159
i mean not not like all behaviors of

01:51:22,239 --> 01:51:25,440
chrome ql just like this one particular

01:51:24,159 --> 01:51:28,800
one

01:51:25,440 --> 01:51:31,840
i would or

01:51:28,800 --> 01:51:33,920
or would just leave it open i mean

01:51:31,840 --> 01:51:35,599
that's my intention here but we can also

01:51:33,920 --> 01:51:39,360
close it i i don't feel strongly

01:51:35,599 --> 01:51:39,360
whatever way the consensus goes

01:51:39,520 --> 01:51:43,599
i think we should we should decide this

01:51:41,440 --> 01:51:45,760
now if we want i mean

01:51:43,599 --> 01:51:47,360
we if we change it we wouldn't change it

01:51:45,760 --> 01:51:49,040
today right we would just know

01:51:47,360 --> 01:51:50,560
this is an open park and we work on it

01:51:49,040 --> 01:51:52,960
but i think we should decide

01:51:50,560 --> 01:51:55,119
today and i'm fine with whatever way we

01:51:52,960 --> 01:51:58,080
go we should just make it explicit

01:51:55,119 --> 01:51:59,520
this is kind of a known feature if you

01:51:58,080 --> 01:52:02,320
have negative observations

01:51:59,520 --> 01:52:03,679
you cannot rate yourself that just

01:52:02,320 --> 01:52:06,080
should be super clear and

01:52:03,679 --> 01:52:06,719
at the moment that's not explicitly

01:52:06,080 --> 01:52:08,560
clear and

01:52:06,719 --> 01:52:11,440
if we don't want to change the behavior

01:52:08,560 --> 01:52:14,719
then we should just make this clear

01:52:11,440 --> 01:52:18,880
and say any change will be future

01:52:14,719 --> 01:52:21,280
future version of fromql with whatever

01:52:18,880 --> 01:52:22,480
science fiction new metric types that we

01:52:21,280 --> 01:52:24,239
will have in the future

01:52:22,480 --> 01:52:26,320
yeah i think that's a good that's a good

01:52:24,239 --> 01:52:28,400
thing to say exactly that

01:52:26,320 --> 01:52:29,679
that's not what i would prefer i would i

01:52:28,400 --> 01:52:33,199
would go for the

01:52:29,679 --> 01:52:35,520
magic thing but i'm also yeah

01:52:33,199 --> 01:52:36,239
if that's not the consensus we can also

01:52:35,520 --> 01:52:38,639
just

01:52:36,239 --> 01:52:40,800
stay where we are but make it explicit

01:52:38,639 --> 01:52:42,639
yeah i would prefer we stay where we are

01:52:40,800 --> 01:52:44,560
but we can also point out that we have

01:52:42,639 --> 01:52:46,800
functions to detect reset on any metric

01:52:44,560 --> 01:52:48,639
that kind of thing so you could make

01:52:46,800 --> 01:52:51,280
advanced tranquil queries if you really

01:52:48,639 --> 01:52:54,400
need to to detect that kind of things

01:52:51,280 --> 01:52:55,520
sorry what was that well we already have

01:52:54,400 --> 01:52:57,679
a reset function

01:52:55,520 --> 01:52:59,280
so you could actually like do end and

01:52:57,679 --> 01:53:01,360
see if there is a result in another

01:52:59,280 --> 01:53:03,199
metric and then use rate or another

01:53:01,360 --> 01:53:04,800
function so the question is do we need

01:53:03,199 --> 01:53:06,560
another function or that kind of thing

01:53:04,800 --> 01:53:07,840
but i would not do any magic at this

01:53:06,560 --> 01:53:10,000
point

01:53:07,840 --> 01:53:10,960
i would just like better document it and

01:53:10,000 --> 01:53:13,040
maybe like

01:53:10,960 --> 01:53:14,320
help the user would which would actually

01:53:13,040 --> 01:53:16,719
fix that in reality

01:53:14,320 --> 01:53:18,000
because it's still very direct i mean

01:53:16,719 --> 01:53:19,760
the actual workaround

01:53:18,000 --> 01:53:21,679
is that if you really want to have

01:53:19,760 --> 01:53:24,159
negative observations you just have two

01:53:21,679 --> 01:53:26,159
histograms in summaries one for positive

01:53:24,159 --> 01:53:28,239
and one for negative observations

01:53:26,159 --> 01:53:29,280
where for the negative one you invert it

01:53:28,239 --> 01:53:30,960
into positive

01:53:29,280 --> 01:53:32,639
and then you have a more complex query

01:53:30,960 --> 01:53:34,400
that puts it all together in the end

01:53:32,639 --> 01:53:35,760
like this is the workaround that we

01:53:34,400 --> 01:53:38,560
should probably

01:53:35,760 --> 01:53:41,840
advertise if one ever has this case of

01:53:38,560 --> 01:53:41,840
negative observations

01:53:42,000 --> 01:53:46,000
but of course we should have never

01:53:44,159 --> 01:53:47,440
allowed negative observations in the

01:53:46,000 --> 01:53:48,400
first place in any instrumentation

01:53:47,440 --> 01:53:54,239
library

01:53:48,400 --> 01:53:56,159
if if this is the way to go but too late

01:53:54,239 --> 01:53:59,920
can we have can we have that as an

01:53:56,159 --> 01:53:59,920
optional behavior on the plane and going

01:54:00,719 --> 01:54:05,679
what the

01:54:03,840 --> 01:54:09,840
the creation of the second time series

01:54:05,679 --> 01:54:09,840
if you have a negative observation

01:54:11,679 --> 01:54:17,119
you mean automatically create the second

01:54:14,639 --> 01:54:20,239
time series for the negatives

01:54:17,119 --> 01:54:22,080
and then have another magic suffix that

01:54:20,239 --> 01:54:24,080
marks it as the negative histogram and

01:54:22,080 --> 01:54:25,440
then we move the magic to your

01:54:24,080 --> 01:54:27,199
repository

01:54:25,440 --> 01:54:28,719
now i mean this the magic wouldn't work

01:54:27,199 --> 01:54:30,960
because you still need horribly

01:54:28,719 --> 01:54:32,880
complicated queries right i think this

01:54:30,960 --> 01:54:34,800
is a fair work around but it should be

01:54:32,880 --> 01:54:36,880
done explicitly i don't think there's

01:54:34,800 --> 01:54:39,199
any value

01:54:36,880 --> 01:54:40,239
i think we get it like most people are

01:54:39,199 --> 01:54:43,760
like um

01:54:40,239 --> 01:54:45,199
um confused and bored and and the people

01:54:43,760 --> 01:54:47,599
who

01:54:45,199 --> 01:54:49,679
like no one likes to support my case of

01:54:47,599 --> 01:54:50,159
making it more magic so we just go for

01:54:49,679 --> 01:54:51,920
the

01:54:50,159 --> 01:54:54,400
leave the status quo but make it very

01:54:51,920 --> 01:54:54,400
explicit

01:54:54,560 --> 01:55:01,040
okay we also have time so

01:54:58,639 --> 01:55:02,639
let me just try and go for the consensus

01:55:01,040 --> 01:55:04,960
consensus we will not change the

01:55:02,639 --> 01:55:07,920
behavior in chromekl1.x

01:55:04,960 --> 01:55:10,159
we will consider this for promptgl2.x we

01:55:07,920 --> 01:55:14,480
will document this better

01:55:10,159 --> 01:55:14,480
yeah all agreed anyone disagreeing

01:55:17,840 --> 01:55:20,560
very good

01:55:22,480 --> 01:55:28,960
we keep churning through our backlog

01:55:25,760 --> 01:55:31,440
at pace that is nice

01:55:28,960 --> 01:55:32,400
i put the other two back in the bucket

01:55:31,440 --> 01:55:35,760
for next time

01:55:32,400 --> 01:55:36,560
um i mean we just delete the done topics

01:55:35,760 --> 01:55:39,119
from the

01:55:36,560 --> 01:55:41,679
document right yeah i'll juggle this

01:55:39,119 --> 01:55:41,679
right after

01:55:43,360 --> 01:55:47,520
and yeah thank you everyone for

01:55:45,199 --> 01:55:48,800
attending um especially the non-promises

01:55:47,520 --> 01:55:52,480
team members uh

01:55:48,800 --> 01:55:56,800
feel empowered to talk more a lot more

01:55:52,480 --> 01:56:00,000
um and see you next month hopefully

01:55:56,800 --> 01:56:02,000
yeah and next month yeah you

01:56:00,000 --> 01:56:03,760
might have switched to dst that kind of

01:56:02,000 --> 01:56:05,040
thing so be careful about the time of

01:56:03,760 --> 01:56:07,199
the meeting

01:56:05,040 --> 01:56:09,520
yes meeting is the complete calendar is

01:56:07,199 --> 01:56:11,199
in utc in the meeting is also in utc

01:56:09,520 --> 01:56:14,800
so the meeting never changes but you

01:56:11,199 --> 01:56:15,360
might change yes but that's also true

01:56:14,800 --> 01:56:18,400
once

01:56:15,360 --> 01:56:21,440
travel starts again so um the meeting is

01:56:18,400 --> 01:56:21,440
the meeting is eternal

01:56:22,400 --> 01:56:32,000
all right thank you very much

01:56:28,400 --> 01:56:32,000

YouTube URL: https://www.youtube.com/watch?v=F3e8j42BKV4


