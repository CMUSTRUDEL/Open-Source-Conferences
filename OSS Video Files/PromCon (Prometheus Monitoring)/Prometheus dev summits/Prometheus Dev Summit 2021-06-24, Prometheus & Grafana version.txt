Title: Prometheus Dev Summit 2021-06-24, Prometheus & Grafana version
Publication date: 2021-06-28
Playlist: Prometheus dev summits
Description: 
	This is the special line-rendering edition of the Prometheus dev summit.

To render your own videos in Prometheus and Grafana, see https://github.com/MacroPower/prometheus_video_renderer

For the actual results of the dev summit, see https://docs.google.com/document/d/11LC3wJcVk00l8w5P3oLQ-m3Y37iom6INAMEu2ZAGIIE/edit?ts=60d93074#
Captions: 
	00:00:03,919 --> 00:00:06,160
so

00:00:04,640 --> 00:00:08,080
uh welcome everyone welcome to the

00:00:06,160 --> 00:00:10,880
youtube audience um

00:00:08,080 --> 00:00:12,799
as per usual um everyone who's not on

00:00:10,880 --> 00:00:14,880
team is more than welcome to

00:00:12,799 --> 00:00:17,199
to pipe up at any time and make your

00:00:14,880 --> 00:00:20,240
voices heard that's

00:00:17,199 --> 00:00:22,880
a specific design goal of um of those

00:00:20,240 --> 00:00:23,279
uh calls of those dev summits the one

00:00:22,880 --> 00:00:25,119
thing

00:00:23,279 --> 00:00:26,320
if we have a call for consensus that's

00:00:25,119 --> 00:00:28,080
the one time when

00:00:26,320 --> 00:00:29,679
when we ask you if you're not a team

00:00:28,080 --> 00:00:32,480
member to uh

00:00:29,679 --> 00:00:34,000
to not raise your voice either way but

00:00:32,480 --> 00:00:38,079
you're actively encouraged

00:00:34,000 --> 00:00:38,079
to raise your voice

00:00:38,320 --> 00:00:43,280
um to get started there is one thing

00:00:40,960 --> 00:00:46,079
which i put in as a priority override

00:00:43,280 --> 00:00:48,000
and i didn't see any any minus ones on

00:00:46,079 --> 00:00:51,120
it

00:00:48,000 --> 00:00:52,879
we need to finalize

00:00:51,120 --> 00:00:56,079
the prometheus conformance program of

00:00:52,879 --> 00:00:57,600
course cncf needs it from us so they can

00:00:56,079 --> 00:00:59,520
do their thing

00:00:57,600 --> 00:01:02,160
presented to governing board for for

00:00:59,520 --> 00:01:06,000
approval blah blah blah blah

00:01:02,160 --> 00:01:08,080
as such everyone is more than welcome to

00:01:06,000 --> 00:01:09,840
to look at the proposal to look at the

00:01:08,080 --> 00:01:11,600
pr which is

00:01:09,840 --> 00:01:14,080
going to result in this proposal if

00:01:11,600 --> 00:01:14,479
merged of course if we get consensus on

00:01:14,080 --> 00:01:17,439
this

00:01:14,479 --> 00:01:17,840
we can just um forward it to chris and

00:01:17,439 --> 00:01:20,479
he

00:01:17,840 --> 00:01:20,479
can get emerged

00:01:21,119 --> 00:01:27,840
do we need to discuss it or should we

00:01:22,880 --> 00:01:27,840
just have a call for consensus

00:01:29,119 --> 00:01:33,040
i have already approved it my only

00:01:30,960 --> 00:01:35,200
concern is that two prominent releases

00:01:33,040 --> 00:01:36,720
is really like not a long time for many

00:01:35,200 --> 00:01:38,000
companies

00:01:36,720 --> 00:01:40,320
and that would require a lot of

00:01:38,000 --> 00:01:42,799
involvement from there to keep staying

00:01:40,320 --> 00:01:44,479
compliant but that's my only concern and

00:01:42,799 --> 00:01:46,960
i'm happy to start like this and see if

00:01:44,479 --> 00:01:52,079
we get complaints about it

00:01:46,960 --> 00:01:52,079
um yes that's one of the things where

00:01:52,479 --> 00:01:56,159
i think it might be possible that we

00:01:53,840 --> 00:01:59,280
change it over time um but

00:01:56,159 --> 00:02:01,040
that's a case of trying to if we

00:01:59,280 --> 00:02:02,320
take something away which we used to

00:02:01,040 --> 00:02:04,960
give um

00:02:02,320 --> 00:02:06,399
people will complain more than if if

00:02:04,960 --> 00:02:08,560
that's the starting condition

00:02:06,399 --> 00:02:11,039
and then we find out that it's not

00:02:08,560 --> 00:02:14,800
workable from scene f's point of view

00:02:11,039 --> 00:02:16,640
the timelines uh appear appear uh okay

00:02:14,800 --> 00:02:18,319
and i know they are quite aggressive by

00:02:16,640 --> 00:02:21,440
design um

00:02:18,319 --> 00:02:23,920
but we can also we can always give

00:02:21,440 --> 00:02:23,920
more time

00:02:25,480 --> 00:02:28,550
[Music]

00:02:28,800 --> 00:02:33,599
yeah and i also think that even within

00:02:31,519 --> 00:02:36,480
the team we do not support

00:02:33,599 --> 00:02:37,120
basically more than two the two left

00:02:36,480 --> 00:02:40,480
real easy

00:02:37,120 --> 00:02:44,239
so i think it's also unfair to ask for

00:02:40,480 --> 00:02:44,239
well to allow more at the moment

00:02:44,560 --> 00:02:49,760
so i think it's a reasonable start

00:02:47,920 --> 00:02:51,280
so it's good it's good for me i have

00:02:49,760 --> 00:02:55,120
already approved the pr so

00:02:51,280 --> 00:02:55,120
we can do a call for consensus i think

00:02:55,200 --> 00:02:59,920
that's awesome i got any anyone else

00:03:00,159 --> 00:03:05,840
okay so uh consensus

00:03:30,840 --> 00:03:33,840
okay

00:03:33,920 --> 00:03:37,680
consensus we approve the prometheus

00:03:35,760 --> 00:03:42,560
conformance program as per

00:03:37,680 --> 00:03:46,480
commit or yeah as com as per commit

00:03:42,560 --> 00:03:49,760
which is linked

00:03:46,480 --> 00:03:49,760
all agreed anyone disagree

00:03:51,760 --> 00:03:55,680
very good i also note that for the team

00:03:54,480 --> 00:03:57,840
members who are not there the pull

00:03:55,680 --> 00:04:02,000
request is already three days old so

00:03:57,840 --> 00:04:06,560
lazy consensus applies it's in the cncf

00:04:02,000 --> 00:04:06,560
not in the prometheus repository so

00:04:07,280 --> 00:04:11,680
it's it doesn't have precedent

00:04:12,319 --> 00:04:16,000
it i suspected it was uncontroversial

00:04:15,519 --> 00:04:18,320
anyway

00:04:16,000 --> 00:04:19,840
uh but wanted to make sure that we do

00:04:18,320 --> 00:04:23,919
have consenting

00:04:19,840 --> 00:04:28,560
so next one is going to be

00:04:23,919 --> 00:04:31,600
fun uh do we have ben here no we don't

00:04:28,560 --> 00:04:33,520
um next one is

00:04:31,600 --> 00:04:35,280
openmetrics underscore created and how

00:04:33,520 --> 00:04:37,520
to how to handle it

00:04:35,280 --> 00:04:38,320
with the amount of metrics which it

00:04:37,520 --> 00:04:41,840
creates

00:04:38,320 --> 00:04:43,680
julian put it there

00:04:41,840 --> 00:04:45,520
yes so some of the instrumentation

00:04:43,680 --> 00:04:49,600
libraries for example java

00:04:45,520 --> 00:04:51,280
uh at the created metrics when you

00:04:49,600 --> 00:04:53,600
have open metrics enabled and they

00:04:51,280 --> 00:04:54,320
cannot you cannot disable open music by

00:04:53,600 --> 00:04:56,320
the way

00:04:54,320 --> 00:04:58,720
and we have seen some user for which

00:04:56,320 --> 00:05:00,320
this is causing a disturbance i did not

00:04:58,720 --> 00:05:01,440
understand why they have that and why

00:05:00,320 --> 00:05:03,600
this is causing

00:05:01,440 --> 00:05:05,520
so many metrics that they have no usage

00:05:03,600 --> 00:05:07,520
for informatives

00:05:05,520 --> 00:05:09,440
and along the discussions i know that

00:05:07,520 --> 00:05:10,560
julius was even proposing that we just

00:05:09,440 --> 00:05:12,800
dropped them

00:05:10,560 --> 00:05:14,160
and prometheus of course there are

00:05:12,800 --> 00:05:15,680
concerns so i wanted to bring the

00:05:14,160 --> 00:05:17,680
discussion here so we can

00:05:15,680 --> 00:05:18,800
put an end to that issue and decide what

00:05:17,680 --> 00:05:21,759
we do with those

00:05:18,800 --> 00:05:21,759
creative metrics

00:05:22,479 --> 00:05:26,720
yeah it's something that one at least

00:05:25,120 --> 00:05:28,240
one of our development teams has

00:05:26,720 --> 00:05:29,840
commented on and

00:05:28,240 --> 00:05:31,520
as a result they haven't switched to the

00:05:29,840 --> 00:05:34,000
latest version of

00:05:31,520 --> 00:05:35,039
the java library because from their

00:05:34,000 --> 00:05:38,080
perspective it's

00:05:35,039 --> 00:05:38,720
adding huge i think it's memory that

00:05:38,080 --> 00:05:40,560
it's

00:05:38,720 --> 00:05:42,160
adding a huge amount to and therefore

00:05:40,560 --> 00:05:42,560
they have huge performance concerns

00:05:42,160 --> 00:05:45,919
about

00:05:42,560 --> 00:05:46,320
them but are you speaking about issues

00:05:45,919 --> 00:05:49,360
on

00:05:46,320 --> 00:05:51,039
the client side or the primitive side uh

00:05:49,360 --> 00:05:53,039
this is on the client side sorry

00:05:51,039 --> 00:05:54,080
so even the client side of issues with

00:05:53,039 --> 00:05:56,240
that yeah

00:05:54,080 --> 00:05:57,120
because it's from their perspective it's

00:05:56,240 --> 00:05:59,039
adding

00:05:57,120 --> 00:06:00,720
i think there's a number of different

00:05:59,039 --> 00:06:04,240
things it's adding because there's also

00:06:00,720 --> 00:06:05,840
possibly exemplar stuff as well that's

00:06:04,240 --> 00:06:08,560
in a similar sort of version of the

00:06:05,840 --> 00:06:10,560
library um and so it suddenly

00:06:08,560 --> 00:06:11,759
they tried it and it and the the

00:06:10,560 --> 00:06:13,680
resource usage

00:06:11,759 --> 00:06:15,039
increased dramatically which they were

00:06:13,680 --> 00:06:17,199
quite surprised about

00:06:15,039 --> 00:06:18,639
and then because there's quite a long

00:06:17,199 --> 00:06:20,000
issue about it

00:06:18,639 --> 00:06:22,720
they were sort of oh we're going to hold

00:06:20,000 --> 00:06:25,840
off and see what's going on rather than

00:06:22,720 --> 00:06:26,800
continue with that i mean i suppose i

00:06:25,840 --> 00:06:29,919
can understand the

00:06:26,800 --> 00:06:32,160
concern like um i don't know what the

00:06:29,919 --> 00:06:34,720
implementation looks like but i guess it

00:06:32,160 --> 00:06:39,280
has the potential to double

00:06:34,720 --> 00:06:39,280
the resource usage right

00:06:39,919 --> 00:06:44,639
worst case yes depending on

00:06:42,080 --> 00:06:47,199
implementation

00:06:44,639 --> 00:06:48,960
we had a similar issue with python which

00:06:47,199 --> 00:06:51,440
had this way earlier

00:06:48,960 --> 00:06:53,039
were one i mean the first user i think

00:06:51,440 --> 00:06:55,599
who reported

00:06:53,039 --> 00:06:57,280
was actually one who was scraping via a

00:06:55,599 --> 00:06:58,400
low bandwidth connection which is of

00:06:57,280 --> 00:07:01,440
course not

00:06:58,400 --> 00:07:03,520
the signature use case of prometheus but

00:07:01,440 --> 00:07:05,840
this user was upset that it essentially

00:07:03,520 --> 00:07:08,160
doubles the throughput for scraping

00:07:05,840 --> 00:07:09,680
which is another one where just dropping

00:07:08,160 --> 00:07:13,520
it on the prometheus side

00:07:09,680 --> 00:07:15,520
wouldn't really help and yeah and then

00:07:13,520 --> 00:07:16,639
it was back then and the discussion was

00:07:15,520 --> 00:07:19,919
said you can just

00:07:16,639 --> 00:07:23,120
put a relabel rule in there to to drop

00:07:19,919 --> 00:07:25,840
uh those metrics to not ingest them uh

00:07:23,120 --> 00:07:26,960
which i guess is good enough if it's

00:07:25,840 --> 00:07:28,319
actually only a problem on the

00:07:26,960 --> 00:07:30,560
prometheus site

00:07:28,319 --> 00:07:32,160
but some users have problems somewhere

00:07:30,560 --> 00:07:34,880
else

00:07:32,160 --> 00:07:36,000
and i did look at the open metric

00:07:34,880 --> 00:07:38,639
specification

00:07:36,000 --> 00:07:41,680
and the libraries should expose the

00:07:38,639 --> 00:07:43,680
created so it's not a must

00:07:41,680 --> 00:07:46,160
so we could drop them directly on the

00:07:43,680 --> 00:07:49,759
client side

00:07:46,160 --> 00:07:53,039
um it's a must i have seen that as a

00:07:49,759 --> 00:07:56,000
i have had a shoot yeah

00:07:53,039 --> 00:07:58,080
i also read it as a shirt double check

00:07:56,000 --> 00:07:59,680
yeah i also thought it's a shoot but

00:07:58,080 --> 00:08:02,000
all right we can check that right we

00:07:59,680 --> 00:08:04,319
have a stack exactly

00:08:02,000 --> 00:08:05,360
i thought it was a i thought it was a

00:08:04,319 --> 00:08:08,879
must so

00:08:05,360 --> 00:08:12,400
um just uh from from my

00:08:08,879 --> 00:08:16,000
side ben is not here but um

00:08:12,400 --> 00:08:20,240
initially the ask came from google um

00:08:16,000 --> 00:08:20,240
to to allow more um

00:08:20,400 --> 00:08:26,319
well not complexes to wrong word but

00:08:22,240 --> 00:08:26,319
basically a lot to allow more resilient

00:08:29,360 --> 00:08:33,200
and make predictions about how that

00:08:32,800 --> 00:08:35,760
thing

00:08:33,200 --> 00:08:38,839
uh develops in the future and such

00:08:35,760 --> 00:08:40,000
that's where the initial ask was coming

00:08:38,839 --> 00:08:43,360
from

00:08:40,000 --> 00:08:45,760
it's not the

00:08:43,360 --> 00:08:47,839
the requirement or the app is not driven

00:08:45,760 --> 00:08:49,519
by anyone who is currently part of the

00:08:47,839 --> 00:08:52,480
openmetrics team

00:08:49,519 --> 00:08:53,360
um with my openmetrics head on we we

00:08:52,480 --> 00:08:56,480
stated that

00:08:53,360 --> 00:09:00,640
openmetrics intends to follow prometheus

00:08:56,480 --> 00:09:04,399
we do have a backward compatibility

00:09:00,640 --> 00:09:07,040
requirement in there but it's not yet

00:09:04,399 --> 00:09:09,519
gotten the stamp of approval by itf so

00:09:07,040 --> 00:09:12,560
it's still more malleable

00:09:09,519 --> 00:09:14,000
than than if if there was an official

00:09:12,560 --> 00:09:17,839
rfc

00:09:14,000 --> 00:09:18,959
so that that as the background from from

00:09:17,839 --> 00:09:23,360
openmetrics

00:09:18,959 --> 00:09:27,200
right my own stance um

00:09:23,360 --> 00:09:30,080
it makes sense but on the other hand if

00:09:27,200 --> 00:09:30,560
if it create problems where we didn't

00:09:30,080 --> 00:09:34,640
have

00:09:30,560 --> 00:09:38,320
problems with something we need to um

00:09:34,640 --> 00:09:41,600
we need to address bartek please say it

00:09:38,320 --> 00:09:44,080
so it's it's uh on the call

00:09:41,600 --> 00:09:44,720
maybe i don't want this on recording no

00:09:44,080 --> 00:09:46,720
i'm just kidding

00:09:44,720 --> 00:09:48,399
uh yeah i would i would vote to just

00:09:46,720 --> 00:09:50,640
have it to keep it simple and just

00:09:48,399 --> 00:09:53,040
maintain the same behavior of

00:09:50,640 --> 00:09:54,320
uh of the prometheus from the promoters

00:09:53,040 --> 00:09:57,200
perspective so

00:09:54,320 --> 00:09:58,560
um ignore those metrics because they are

00:09:57,200 --> 00:10:02,240
not useful what about that

00:09:58,560 --> 00:10:04,560
what's harm in this i i think the

00:10:02,240 --> 00:10:05,839
keep keeping this up same behavior would

00:10:04,560 --> 00:10:09,279
actually be that the

00:10:05,839 --> 00:10:11,680
client can turn this off

00:10:09,279 --> 00:10:12,399
um and now i i think this is that would

00:10:11,680 --> 00:10:15,200
be

00:10:12,399 --> 00:10:16,160
my suggestion and my recommendation you

00:10:15,200 --> 00:10:19,440
have

00:10:16,160 --> 00:10:22,160
each client have a sense of should

00:10:19,440 --> 00:10:23,440
right like maybe maybe we can have it on

00:10:22,160 --> 00:10:26,079
by default but allow

00:10:23,440 --> 00:10:27,200
people to optionally um turn it off if

00:10:26,079 --> 00:10:29,200
this is a problem

00:10:27,200 --> 00:10:32,880
just like in this the created timezone

00:10:29,200 --> 00:10:35,279
is assured i just looked it up

00:10:32,880 --> 00:10:36,079
so i think i think it would make most

00:10:35,279 --> 00:10:38,000
sense to

00:10:36,079 --> 00:10:39,600
have an option on the instrumentation

00:10:38,000 --> 00:10:43,200
library because that would

00:10:39,600 --> 00:10:46,480
also address bandwidth problems client

00:10:43,200 --> 00:10:48,160
resource users problem plus it we

00:10:46,480 --> 00:10:49,839
haven't don't have to go down that

00:10:48,160 --> 00:10:52,399
rabbit hole of

00:10:49,839 --> 00:10:54,160
how we like this whole do we only

00:10:52,399 --> 00:10:55,360
present it if open metrics negotiated

00:10:54,160 --> 00:10:57,120
and then you have differences in the

00:10:55,360 --> 00:10:58,720
metrics created on the prometheus server

00:10:57,120 --> 00:11:01,839
depending on what you negotiate

00:10:58,720 --> 00:11:04,160
which is yet another yeah more complex

00:11:01,839 --> 00:11:06,160
issue

00:11:04,160 --> 00:11:07,680
people's point i think it would make

00:11:06,160 --> 00:11:09,680
sense to to have

00:11:07,680 --> 00:11:11,839
a sample configuration maybe even

00:11:09,680 --> 00:11:13,839
commented out in the default

00:11:11,839 --> 00:11:15,920
configuration to show people how to do

00:11:13,839 --> 00:11:16,320
it with relabeling if they want to do it

00:11:15,920 --> 00:11:19,760
through

00:11:16,320 --> 00:11:20,480
through relabeling but i do agree that

00:11:19,760 --> 00:11:25,120
extends

00:11:20,480 --> 00:11:28,959
or to have it on the client side

00:11:25,120 --> 00:11:29,839
um but is it by default on the client

00:11:28,959 --> 00:11:32,880
side uh

00:11:29,839 --> 00:11:35,120
disabled not specified um

00:11:32,880 --> 00:11:37,440
i i'm i already that's what i just

00:11:35,120 --> 00:11:38,399
wanted to say for the open metric side i

00:11:37,440 --> 00:11:40,560
think

00:11:38,399 --> 00:11:42,480
this should be clarified because the

00:11:40,560 --> 00:11:45,760
current wording is if

00:11:42,480 --> 00:11:46,800
present then it must end in underscore

00:11:45,760 --> 00:11:48,800
created

00:11:46,800 --> 00:11:50,720
and that's not the best of wordings

00:11:48,800 --> 00:11:56,000
course even myself

00:11:50,720 --> 00:11:56,000
just doing a quick search got confused

00:11:56,480 --> 00:12:00,880
well the wording further up is that a

00:11:58,720 --> 00:12:03,839
metric with type counter should have a

00:12:00,880 --> 00:12:08,480
time stamp value called created

00:12:03,839 --> 00:12:08,480
um yes but if you search for underscore

00:12:09,279 --> 00:12:12,880
either creativity but the must is for if

00:12:11,839 --> 00:12:16,000
present

00:12:12,880 --> 00:12:17,600
which is not the ideal wording um

00:12:16,000 --> 00:12:19,440
on the other hand you should not have

00:12:17,600 --> 00:12:22,160
more than one normative

00:12:19,440 --> 00:12:22,800
sentence regarding one specific because

00:12:22,160 --> 00:12:26,800
if those

00:12:22,800 --> 00:12:26,800
ever drift the problem

00:12:27,040 --> 00:12:30,720
i i also know that in japan matrix

00:12:29,519 --> 00:12:33,440
example

00:12:30,720 --> 00:12:34,800
there should not be metrics with the

00:12:33,440 --> 00:12:36,639
created suffix

00:12:34,800 --> 00:12:38,560
other than those ones but it is not a

00:12:36,639 --> 00:12:40,320
muscle users can see

00:12:38,560 --> 00:12:42,720
define their own metrics that end with

00:12:40,320 --> 00:12:44,240
underscore created so if we drop them by

00:12:42,720 --> 00:12:44,880
default information that would be an

00:12:44,240 --> 00:12:47,120
issue

00:12:44,880 --> 00:12:49,040
for those users because it's not a must

00:12:47,120 --> 00:12:51,680
in open matrix

00:12:49,040 --> 00:12:52,160
that's a fair point i think there is a

00:12:51,680 --> 00:12:54,800
must

00:12:52,160 --> 00:12:56,880
around you cannot have conflicts like

00:12:54,800 --> 00:12:59,839
you cannot even risk a conflict

00:12:56,880 --> 00:13:00,160
well exposers should avoid names that

00:12:59,839 --> 00:13:02,079
can

00:13:00,160 --> 00:13:04,839
that could be confused with the suffixes

00:13:02,079 --> 00:13:06,079
that text form and central metrics names

00:13:04,839 --> 00:13:07,839
use

00:13:06,079 --> 00:13:09,279
we didn't go with must of course we

00:13:07,839 --> 00:13:11,519
didn't we we cannot

00:13:09,279 --> 00:13:11,519
know

00:13:15,279 --> 00:13:19,360
interesting yeah yeah because client

00:13:16,880 --> 00:13:21,600
python actually like it will fail

00:13:19,360 --> 00:13:24,959
it is a hard failure to define things

00:13:21,600 --> 00:13:27,120
that could conflict i believe

00:13:24,959 --> 00:13:29,839
which is fair on the implementation side

00:13:27,120 --> 00:13:32,839
because implementers

00:13:29,839 --> 00:13:34,399
can take a stronger stance than the

00:13:32,839 --> 00:13:36,959
specification

00:13:34,399 --> 00:13:38,160
yeah but it's not invalid open metrics

00:13:36,959 --> 00:13:40,639
if you have

00:13:38,160 --> 00:13:43,440
use the suffix not as a suffix but it

00:13:40,639 --> 00:13:43,440
doesn't conflict

00:13:44,560 --> 00:13:49,920
that's a different thing i think i think

00:13:47,680 --> 00:13:52,000
it's cool if we if we have it

00:13:49,920 --> 00:13:54,320
as an option because also like i mean

00:13:52,000 --> 00:13:56,160
not many in relative terms it's not that

00:13:54,320 --> 00:13:57,040
a lot of people complain and if you just

00:13:56,160 --> 00:13:59,199
can tell them

00:13:57,040 --> 00:14:00,639
you can flip that little conflict switch

00:13:59,199 --> 00:14:02,880
i think that would make them already

00:14:00,639 --> 00:14:05,199
quite happy

00:14:02,880 --> 00:14:06,399
while just saying them that's the way it

00:14:05,199 --> 00:14:09,199
is go deal with it

00:14:06,399 --> 00:14:11,839
it's not very friendly one comment i

00:14:09,199 --> 00:14:13,680
make is that

00:14:11,839 --> 00:14:15,120
at the moment because it doesn't do

00:14:13,680 --> 00:14:18,079
anything

00:14:15,120 --> 00:14:19,760
a lot of people will go why why is it

00:14:18,079 --> 00:14:21,839
the default to be on

00:14:19,760 --> 00:14:23,839
and why is it there in the first place

00:14:21,839 --> 00:14:25,600
so i guess the question is

00:14:23,839 --> 00:14:27,360
is it going to be useful at some point

00:14:25,600 --> 00:14:30,160
because i can see some benefits

00:14:27,360 --> 00:14:31,600
to it in terms of the idea of resilience

00:14:30,160 --> 00:14:33,600
and knowing a bit more about it

00:14:31,600 --> 00:14:35,120
but obviously at the moment with it not

00:14:33,600 --> 00:14:38,079
actually doing anything

00:14:35,120 --> 00:14:40,720
it is a completely useless metric to a

00:14:38,079 --> 00:14:40,720
certain degree

00:14:41,279 --> 00:14:44,959
i mean by my personal reason is that we

00:14:43,839 --> 00:14:47,440
can finally

00:14:44,959 --> 00:14:49,120
solve this issue with counters that only

00:14:47,440 --> 00:14:50,320
spring into existence one staff

00:14:49,120 --> 00:14:53,360
incremented once

00:14:50,320 --> 00:14:54,320
yeah um brian had a lot of resistance

00:14:53,360 --> 00:14:57,440
against that but

00:14:54,320 --> 00:15:00,240
i still believe there's a way of

00:14:57,440 --> 00:15:00,959
at least making it work in most cases

00:15:00,240 --> 00:15:02,959
but that's

00:15:00,959 --> 00:15:13,839
yeah that's the future it's not what we

00:15:02,959 --> 00:15:13,839
have right now

00:15:15,120 --> 00:15:20,639
as per the default maybe we should ask

00:15:18,399 --> 00:15:22,079
the wider community and and look for

00:15:20,639 --> 00:15:25,120
feedback actively

00:15:22,079 --> 00:15:27,600
i i'm honestly torn on enabling or

00:15:25,120 --> 00:15:30,639
disabling underscore created by default

00:15:27,600 --> 00:15:32,800
i think for the primary libraries we

00:15:30,639 --> 00:15:35,600
should have the same default across

00:15:32,800 --> 00:15:37,680
everything which we offer

00:15:35,600 --> 00:15:38,720
but i don't have a strong opinion on

00:15:37,680 --> 00:15:41,120
which way we go

00:15:38,720 --> 00:15:41,839
with with the actual setting as long as

00:15:41,120 --> 00:15:44,959
it's

00:15:41,839 --> 00:15:46,639
maximally consistent if it's something

00:15:44,959 --> 00:15:50,240
that we were

00:15:46,639 --> 00:15:52,880
able to say is going to be used for

00:15:50,240 --> 00:15:53,680
sorting out counters or something rates

00:15:52,880 --> 00:15:56,880
and things

00:15:53,680 --> 00:15:58,000
in the next reasonably short period of

00:15:56,880 --> 00:16:01,040
time

00:15:58,000 --> 00:16:02,800
then it sounds like a default of yes

00:16:01,040 --> 00:16:04,959
makes sense because then every it makes

00:16:02,800 --> 00:16:07,279
everyone's life easier because it's then

00:16:04,959 --> 00:16:08,560
there for when it is switched on but if

00:16:07,279 --> 00:16:10,160
it's

00:16:08,560 --> 00:16:13,360
we'd like to do this but it could be

00:16:10,160 --> 00:16:15,440
three years time then it feels like

00:16:13,360 --> 00:16:18,320
the opposite of actually we should have

00:16:15,440 --> 00:16:21,120
the default may be false because

00:16:18,320 --> 00:16:22,959
it's generating more traffic and memory

00:16:21,120 --> 00:16:26,000
usage and all that sort of stuff

00:16:22,959 --> 00:16:28,560
for no conceivable benefit

00:16:26,000 --> 00:16:30,480
for a period quite a period of time well

00:16:28,560 --> 00:16:32,639
the thing is that if committees

00:16:30,480 --> 00:16:34,560
kind of support that and if we ingest

00:16:32,639 --> 00:16:35,839
that as a second metric then we could

00:16:34,560 --> 00:16:38,079
just use process

00:16:35,839 --> 00:16:40,000
start seconds in most of the time so we

00:16:38,079 --> 00:16:40,720
don't actually need for each contour its

00:16:40,000 --> 00:16:42,480
own

00:16:40,720 --> 00:16:44,800
timestamp because we already have one

00:16:42,480 --> 00:16:48,079
for each exported process

00:16:44,800 --> 00:16:50,399
yeah but that only works if

00:16:48,079 --> 00:16:52,320
you like we are replaying parts of the

00:16:50,399 --> 00:16:54,320
of the open metrics discussions but

00:16:52,320 --> 00:16:56,480
that only works for counters which are

00:16:54,320 --> 00:16:58,320
existing at the process start

00:16:56,480 --> 00:17:00,880
which in particular if you're dealing

00:16:58,320 --> 00:17:02,480
with uh with for example hardware or

00:17:00,880 --> 00:17:03,440
with things which have lots of different

00:17:02,480 --> 00:17:07,199
connections

00:17:03,440 --> 00:17:09,120
might not be might not be the um

00:17:07,199 --> 00:17:10,959
it's not even the case within prometheus

00:17:09,120 --> 00:17:12,880
like you can hot reload things that

00:17:10,959 --> 00:17:14,319
create new counters or get rid of old

00:17:12,880 --> 00:17:17,199
counters

00:17:14,319 --> 00:17:18,799
um so is my question i i was going to

00:17:17,199 --> 00:17:20,880
bring up the exact same point as stuart

00:17:18,799 --> 00:17:22,160
like is there appetite for actually

00:17:20,880 --> 00:17:24,400
using the created

00:17:22,160 --> 00:17:26,160
value in prometheus server like is that

00:17:24,400 --> 00:17:27,600
something we want to do

00:17:26,160 --> 00:17:29,360
because that i think that that

00:17:27,600 --> 00:17:32,559
definitely influences whether it should

00:17:29,360 --> 00:17:35,039
be default on or off for me

00:17:32,559 --> 00:17:35,600
the chicken and egg is if it's there it

00:17:35,039 --> 00:17:38,240
will

00:17:35,600 --> 00:17:39,679
naturally entice more people to actually

00:17:38,240 --> 00:17:41,919
play with it

00:17:39,679 --> 00:17:43,840
on the other hand that is not an

00:17:41,919 --> 00:17:47,200
argument in and as of itself

00:17:43,840 --> 00:17:48,880
as such i think we're back at at least

00:17:47,200 --> 00:17:50,480
trying to ask the wider community what

00:17:48,880 --> 00:17:52,640
they would prefer

00:17:50,480 --> 00:17:54,320
and have have a period of i don't know

00:17:52,640 --> 00:17:57,200
maybe a month where we just

00:17:54,320 --> 00:17:59,280
try and find feedback what people would

00:17:57,200 --> 00:18:02,080
like

00:17:59,280 --> 00:18:03,200
and then do our best to to apply that

00:18:02,080 --> 00:18:04,799
thing

00:18:03,200 --> 00:18:06,640
at least across all the things which we

00:18:04,799 --> 00:18:10,960
have as in

00:18:06,640 --> 00:18:13,520
uh client libraries and exporters

00:18:10,960 --> 00:18:16,160
i mean there there is also the inverted

00:18:13,520 --> 00:18:18,320
chicken egg right where

00:18:16,160 --> 00:18:20,480
i mean if we think why is it there it's

00:18:18,320 --> 00:18:23,120
there because certain groups wanted it

00:18:20,480 --> 00:18:23,600
and why do those groups want it they

00:18:23,120 --> 00:18:25,520
they

00:18:23,600 --> 00:18:27,280
they would require it if they adopted

00:18:25,520 --> 00:18:29,280
open metrics and i think

00:18:27,280 --> 00:18:30,400
that was the idea of metrics is supposed

00:18:29,280 --> 00:18:33,360
to be used

00:18:30,400 --> 00:18:35,120
even outside of the like prometheus

00:18:33,360 --> 00:18:36,720
ecosystem directly

00:18:35,120 --> 00:18:38,799
so that would also be a bit

00:18:36,720 --> 00:18:42,320
counterproductive if we

00:18:38,799 --> 00:18:44,240
like removed it now effectively and and

00:18:42,320 --> 00:18:46,480
um then people might shy away from

00:18:44,240 --> 00:18:48,480
adopting it because of that

00:18:46,480 --> 00:18:50,160
so it's kind of a bit of a hard thing i

00:18:48,480 --> 00:18:52,320
could see it definitely

00:18:50,160 --> 00:18:53,200
once we have a richer metadata story in

00:18:52,320 --> 00:18:54,840
prometheus

00:18:53,200 --> 00:18:56,640
which is another not yet written design

00:18:54,840 --> 00:18:58,480
log then

00:18:56,640 --> 00:19:01,760
i would totally love to have this

00:18:58,480 --> 00:19:06,080
created time in there

00:19:01,760 --> 00:19:06,080
but right now that doesn't exist yet

00:19:06,480 --> 00:19:10,000
i mean that doesn't solve the transport

00:19:08,480 --> 00:19:11,600
and the client memory

00:19:10,000 --> 00:19:14,720
problem but it most certainly would

00:19:11,600 --> 00:19:16,880
solve the prometheus

00:19:14,720 --> 00:19:19,280
problem because you would have one

00:19:16,880 --> 00:19:21,600
created until it changes

00:19:19,280 --> 00:19:23,679
but i think that we almost have a

00:19:21,600 --> 00:19:25,919
consensus that we want an option

00:19:23,679 --> 00:19:28,160
but that it's better to leave it on for

00:19:25,919 --> 00:19:29,760
the moment by default

00:19:28,160 --> 00:19:32,400
yeah i mean we just have to decide about

00:19:29,760 --> 00:19:34,720
the default that is what i

00:19:32,400 --> 00:19:36,320
get from the feeling yeah i think so

00:19:34,720 --> 00:19:37,440
maybe let's write two

00:19:36,320 --> 00:19:40,000
like i think we could definitely write

00:19:37,440 --> 00:19:44,240
one consensus that is

00:19:40,000 --> 00:19:47,840
client libraries want should have a

00:19:44,240 --> 00:19:47,840
way to turn off created

00:19:51,440 --> 00:19:56,080
and then and then we can have that

00:19:53,440 --> 00:19:58,880
second one for

00:19:56,080 --> 00:20:00,000
defaults to on or get more community or

00:19:58,880 --> 00:20:07,840
there are a couple options there so i'm

00:20:00,000 --> 00:20:07,840
not sure we have consensus on that

00:20:11,919 --> 00:20:15,039
sorry i i was just trying to to fight

00:20:14,240 --> 00:20:18,960
google docs

00:20:15,039 --> 00:20:22,080
um i would the noises i was making

00:20:18,960 --> 00:20:24,400
without blocking julian while typing

00:20:22,080 --> 00:20:24,400
um

00:20:26,400 --> 00:20:31,679
do we just want to say this about client

00:20:28,000 --> 00:20:31,679
libraries or also our exporters

00:20:31,760 --> 00:20:35,840
they use the client library oh yeah yeah

00:20:34,799 --> 00:20:38,080
but

00:20:35,840 --> 00:20:39,679
okay i'm adding the exporters explicitly

00:20:38,080 --> 00:20:40,720
because this is relevant for the

00:20:39,679 --> 00:20:42,880
exporters

00:20:40,720 --> 00:20:44,559
as signal to the library which is being

00:20:42,880 --> 00:20:49,840
used

00:20:44,559 --> 00:20:49,840
yeah it's both yeah

00:20:54,240 --> 00:20:57,280
uh yeah i mean i think in general those

00:20:56,240 --> 00:20:59,840
conflict options

00:20:57,280 --> 00:20:59,840
need to be

00:21:00,640 --> 00:21:05,280
in a way what's the word propagated from

00:21:04,320 --> 00:21:07,520
the users

00:21:05,280 --> 00:21:09,280
uh through the code that is using the

00:21:07,520 --> 00:21:10,880
library to the library right

00:21:09,280 --> 00:21:12,799
i mean that's what in client goaling i

00:21:10,880 --> 00:21:13,200
was super conservative about those

00:21:12,799 --> 00:21:15,520
things

00:21:13,200 --> 00:21:16,400
that would like change something like

00:21:15,520 --> 00:21:19,840
that

00:21:16,400 --> 00:21:21,919
and um yeah at least

00:21:19,840 --> 00:21:23,679
i mean of course not all users of the

00:21:21,919 --> 00:21:24,559
library made the config option for their

00:21:23,679 --> 00:21:26,720
users but

00:21:24,559 --> 00:21:28,159
when they the users the users of the

00:21:26,720 --> 00:21:30,080
users complained

00:21:28,159 --> 00:21:31,679
at least they were satisfied by telling

00:21:30,080 --> 00:21:33,280
them yes you can offer this config

00:21:31,679 --> 00:21:34,480
option because the library allows you to

00:21:33,280 --> 00:21:45,840
configure it

00:21:34,480 --> 00:21:45,840
and um that's probably all we have to do

00:21:46,320 --> 00:21:49,840
so let's try this our first particular

00:21:48,640 --> 00:21:51,679
consensus

00:21:49,840 --> 00:21:53,679
our first party client libraries and

00:21:51,679 --> 00:21:56,000
exporters should have a parameter to

00:21:53,679 --> 00:21:59,840
turn off underscore created

00:21:56,000 --> 00:21:59,840
all agreed anyone disagreeing

00:22:00,080 --> 00:22:02,799
very good

00:22:03,520 --> 00:22:06,720
um the next one

00:22:07,360 --> 00:22:11,760
is currently a consensus the default is

00:22:10,159 --> 00:22:14,240
to keep emitting the underscore

00:22:11,760 --> 00:22:16,000
to keep emitting underscore created i

00:22:14,240 --> 00:22:20,159
would tend towards

00:22:16,000 --> 00:22:22,000
um while we get user feedback to to add

00:22:20,159 --> 00:22:24,000
why we get user feedback that we

00:22:22,000 --> 00:22:26,080
actively try and get feedback

00:22:24,000 --> 00:22:27,120
because again this ask initially came

00:22:26,080 --> 00:22:30,400
from google

00:22:27,120 --> 00:22:33,120
um i forgot his name left google

00:22:30,400 --> 00:22:35,760
um and and also stopped contributing to

00:22:33,120 --> 00:22:39,039
uh to open metrics a few months after

00:22:35,760 --> 00:22:39,039
so um yeah

00:22:39,200 --> 00:22:43,280
what if we do handle this at least at a

00:22:41,440 --> 00:22:46,799
protocol level or

00:22:43,280 --> 00:22:49,760
protocol level where prometheus

00:22:46,799 --> 00:22:51,440
has a easy switch to ignore created at

00:22:49,760 --> 00:22:54,799
when coming from open metrics

00:22:51,440 --> 00:22:57,679
yes that's

00:22:54,799 --> 00:22:58,080
yeah we we already discussed this um but

00:22:57,679 --> 00:23:01,200
for

00:22:58,080 --> 00:23:02,799
for client memory usage client-side

00:23:01,200 --> 00:23:04,799
memory usage reasons and

00:23:02,799 --> 00:23:06,000
and data transmission usage if you have

00:23:04,799 --> 00:23:07,760
a small pipe

00:23:06,000 --> 00:23:09,039
um you also need it on the client side

00:23:07,760 --> 00:23:11,520
but uh having

00:23:09,039 --> 00:23:13,520
default configuration which is uh

00:23:11,520 --> 00:23:14,480
disabled but as part of the default

00:23:13,520 --> 00:23:16,880
configuration is

00:23:14,480 --> 00:23:19,120
is in my head already on on the to-do

00:23:16,880 --> 00:23:19,120
list

00:23:19,280 --> 00:23:22,559
i mean if we require now that the

00:23:21,280 --> 00:23:24,720
default is on

00:23:22,559 --> 00:23:25,760
uh we would essentially force client

00:23:24,720 --> 00:23:28,799
goaling into

00:23:25,760 --> 00:23:32,240
a major release just for that

00:23:28,799 --> 00:23:34,880
um so if we

00:23:32,240 --> 00:23:36,400
this is if we if we also require that

00:23:34,880 --> 00:23:36,720
all the client libraries do the same

00:23:36,400 --> 00:23:39,360
thing

00:23:36,720 --> 00:23:39,919
right and now i mean bartek rather gets

00:23:39,360 --> 00:23:43,919
to speak

00:23:39,919 --> 00:23:46,880
for client goaling by now but okay

00:23:43,919 --> 00:23:47,840
it's not under zero yet line goaling is

00:23:46,880 --> 00:23:51,679
1.0

00:23:47,840 --> 00:23:55,919
oh one dot where are we now one not

00:23:51,679 --> 00:23:58,799
nine one not eleven i don't know um

00:23:55,919 --> 00:24:01,360
differently um consensus we will gather

00:23:58,799 --> 00:24:04,640
user feedback on which they would prefer

00:24:01,360 --> 00:24:06,880
as a default yeah

00:24:04,640 --> 00:24:08,400
i mean it could end up with something if

00:24:06,880 --> 00:24:09,360
you want to change the default it needs

00:24:08,400 --> 00:24:11,440
a major

00:24:09,360 --> 00:24:13,840
release or you're still in zero dot

00:24:11,440 --> 00:24:16,240
something but we should be careful of

00:24:13,840 --> 00:24:18,000
mandating the same

00:24:16,240 --> 00:24:20,240
behavior here across all client

00:24:18,000 --> 00:24:22,720
libraries

00:24:20,240 --> 00:24:24,559
fair that's that's the next uh point of

00:24:22,720 --> 00:24:26,880
consensus but for this one

00:24:24,559 --> 00:24:27,679
consensus we will gather user feedback

00:24:26,880 --> 00:24:30,880
on which

00:24:27,679 --> 00:24:34,320
they would prefer as a default or on

00:24:30,880 --> 00:24:34,320
what default they would prefer

00:24:35,520 --> 00:24:40,159
okay so i rewrote so sorry um consensus

00:24:38,559 --> 00:24:41,919
we will gather user feedback on what

00:24:40,159 --> 00:24:46,240
default they would prefer

00:24:41,919 --> 00:25:01,840
all agreed anyone disagreeing

00:24:46,240 --> 00:25:01,840
there is it

00:25:09,039 --> 00:25:14,240
consensus we will suggest this default

00:25:11,120 --> 00:25:17,919
across our ecosystem

00:25:14,240 --> 00:25:20,240
and i put in suggest so um so

00:25:17,919 --> 00:25:21,679
as to bjorn's point that no one is

00:25:20,240 --> 00:25:23,679
forced

00:25:21,679 --> 00:25:26,080
does it mean that we have to wait to

00:25:23,679 --> 00:25:28,159
find a proper way to gather the user's

00:25:26,080 --> 00:25:30,080
feedback before we can implement it with

00:25:28,159 --> 00:25:33,279
the default tool

00:25:30,080 --> 00:25:34,960
i would say give it a week or three

00:25:33,279 --> 00:25:36,640
write to the developers and users

00:25:34,960 --> 00:25:39,120
mailing list ask on discourse

00:25:36,640 --> 00:25:40,080
make a thing on twitter where people can

00:25:39,120 --> 00:25:43,279
click and

00:25:40,080 --> 00:25:44,720
that's our due diligence i think we can

00:25:43,279 --> 00:25:47,600
also ask on irc but

00:25:44,720 --> 00:25:48,880
by and maybe it's like but doing this we

00:25:47,600 --> 00:25:51,919
have covered literally

00:25:48,880 --> 00:25:52,799
all main supported community feedback

00:25:51,919 --> 00:25:54,480
channels

00:25:52,799 --> 00:25:57,840
and then we just give it a week or three

00:25:54,480 --> 00:25:57,840
and done

00:25:59,520 --> 00:26:03,919
i mean i would be very surprised if that

00:26:02,080 --> 00:26:05,919
feedback results in a lot of

00:26:03,919 --> 00:26:07,120
like any significant number of people

00:26:05,919 --> 00:26:09,760
saying they want it on

00:26:07,120 --> 00:26:10,880
because there are no use cases that we

00:26:09,760 --> 00:26:13,039
are aware of

00:26:10,880 --> 00:26:15,279
which shouldn't mean that we should

00:26:13,039 --> 00:26:17,520
never reconsider that right if we

00:26:15,279 --> 00:26:19,279
if we later in the future have the power

00:26:17,520 --> 00:26:21,360
use case for that

00:26:19,279 --> 00:26:23,200
we might just reconsider it and then

00:26:21,360 --> 00:26:25,039
whatever do something with a major

00:26:23,200 --> 00:26:28,960
release in libraries that already have

00:26:25,039 --> 00:26:31,840
a 1.0 release or something i don't know

00:26:28,960 --> 00:26:33,039
which is not blocked by us deciding and

00:26:31,840 --> 00:26:35,840
asking for a

00:26:33,039 --> 00:26:36,240
a preferred before the default right now

00:26:35,840 --> 00:26:38,320
and

00:26:36,240 --> 00:26:39,440
and suggesting this default across the

00:26:38,320 --> 00:26:41,600
ecosystem

00:26:39,440 --> 00:26:43,200
if if if something changes we will be

00:26:41,600 --> 00:26:46,159
revisiting this anyway

00:26:43,200 --> 00:26:47,520
yeah so but what i want to say is we

00:26:46,159 --> 00:26:49,600
probably don't need to discuss

00:26:47,520 --> 00:26:52,159
more details let's just see what comes

00:26:49,600 --> 00:26:54,640
out and i expect that the result is

00:26:52,159 --> 00:26:55,919
users wanted default off and then we

00:26:54,640 --> 00:26:58,000
default it off for now

00:26:55,919 --> 00:27:01,360
and if we ever want to default it on we

00:26:58,000 --> 00:27:01,360
will continue the discussion

00:27:01,440 --> 00:27:06,080
i think having a consensus on on us

00:27:04,159 --> 00:27:07,679
suggesting this default across the

00:27:06,080 --> 00:27:09,760
ecosystem would be nice because it's

00:27:07,679 --> 00:27:12,720
signaling way beyond just this call

00:27:09,760 --> 00:27:14,400
and this group of people but if we can't

00:27:12,720 --> 00:27:22,880
find consensus on this it's also not

00:27:14,400 --> 00:27:22,880
super urgent so you're muted burn

00:27:23,679 --> 00:27:26,720
i'm also not talking i am just looking

00:27:26,080 --> 00:27:28,320
up

00:27:26,720 --> 00:27:30,559
what the exact formulation of the

00:27:28,320 --> 00:27:32,720
conscious consensus is uh it is

00:27:30,559 --> 00:27:35,840
consensus we will suggest this default

00:27:32,720 --> 00:27:38,240
across our ecosystem

00:27:35,840 --> 00:27:41,600
and using suggest precisely to your

00:27:38,240 --> 00:27:41,600
point that no one is forced

00:27:41,679 --> 00:27:45,279
yeah i mean i would say that if if the

00:27:44,399 --> 00:27:47,600
outcome is

00:27:45,279 --> 00:27:49,360
default off it's fine because the only

00:27:47,600 --> 00:27:52,880
library that is wondered

00:27:49,360 --> 00:27:54,399
x has it off kind of it doesn't have it

00:27:52,880 --> 00:27:55,200
at all at the moment but it would have

00:27:54,399 --> 00:27:59,120
it off

00:27:55,200 --> 00:28:01,679
um well if the if the outcome

00:27:59,120 --> 00:28:02,640
is unexpectedly that we should default

00:28:01,679 --> 00:28:05,919
on

00:28:02,640 --> 00:28:07,520
then we have the problem that python and

00:28:05,919 --> 00:28:08,799
java already have it and they should

00:28:07,520 --> 00:28:12,000
just keep it then

00:28:08,799 --> 00:28:14,799
but we could probably not put it to on

00:28:12,000 --> 00:28:15,760
without a major release incline going

00:28:14,799 --> 00:28:18,000
that's more

00:28:15,760 --> 00:28:19,200
that's kind of what's what's um of

00:28:18,000 --> 00:28:21,919
course my consideration

00:28:19,200 --> 00:28:22,399
but that's obviously it is a suggest so

00:28:21,919 --> 00:28:24,559
client

00:28:22,399 --> 00:28:26,080
go lane could go well it's too hard

00:28:24,559 --> 00:28:29,520
we're not going to do that straight away

00:28:26,080 --> 00:28:31,679
so thank you my point is

00:28:29,520 --> 00:28:32,559
let's just not spend more time

00:28:31,679 --> 00:28:35,679
discussing it

00:28:32,559 --> 00:28:37,760
um let's see what the output i mean

00:28:35,679 --> 00:28:39,039
we could say if the output i mean that

00:28:37,760 --> 00:28:42,159
but that's kind of a bit weird

00:28:39,039 --> 00:28:44,240
if you say if the result is that the

00:28:42,159 --> 00:28:46,399
community wants it off then we suggest

00:28:44,240 --> 00:28:47,840
it to default be default off across our

00:28:46,399 --> 00:28:50,960
ecosystem if it's yes

00:28:47,840 --> 00:28:59,120
we have to reconsider what we do

00:28:50,960 --> 00:29:00,960
that's bit weird as a consensus

00:28:59,120 --> 00:29:02,480
are you against finding the consensus

00:29:00,960 --> 00:29:04,399
because then we can just delete it if

00:29:02,480 --> 00:29:07,840
you're not actively against it

00:29:04,399 --> 00:29:09,039
um we can try to go i'm fine either way

00:29:07,840 --> 00:29:12,159
i'm just trying to

00:29:09,039 --> 00:29:14,000
to move on my opinion is it depends on

00:29:12,159 --> 00:29:16,480
the output of the user survey

00:29:14,000 --> 00:29:18,480
if we suggest the same default across

00:29:16,480 --> 00:29:21,520
our ecosystem

00:29:18,480 --> 00:29:24,640
i think if if we if the user

00:29:21,520 --> 00:29:26,480
community suggests one thing then we

00:29:24,640 --> 00:29:27,440
should generally listen to them rather

00:29:26,480 --> 00:29:30,320
than saying

00:29:27,440 --> 00:29:31,760
actually we know better we should ignore

00:29:30,320 --> 00:29:35,039
what you everybody's

00:29:31,760 --> 00:29:38,159
thinks because of other reasons

00:29:35,039 --> 00:29:41,039
yeah so in the case of klein golding and

00:29:38,159 --> 00:29:43,840
this is like the 13th most used go

00:29:41,039 --> 00:29:44,720
package so i think every tiny change we

00:29:43,840 --> 00:29:46,960
do will have

00:29:44,720 --> 00:29:49,360
huge repercussions and we cannot just

00:29:46,960 --> 00:29:51,919
vote among a limited set of users

00:29:49,360 --> 00:29:53,120
if he should break the world right um

00:29:51,919 --> 00:29:55,600
that's why i think

00:29:53,120 --> 00:29:56,480
if again we've not said you must we've

00:29:55,600 --> 00:29:58,640
said

00:29:56,480 --> 00:30:00,080
the suggestion but if the prometheus def

00:29:58,640 --> 00:30:01,520
summit suggests

00:30:00,080 --> 00:30:03,760
across the ecosystem and then the

00:30:01,520 --> 00:30:05,440
prometheus team people themselves

00:30:03,760 --> 00:30:06,880
don't follow those suggestions is also a

00:30:05,440 --> 00:30:09,120
weird message right

00:30:06,880 --> 00:30:09,120
but

00:30:11,279 --> 00:30:15,919
if the consensus is that we do it and we

00:30:14,159 --> 00:30:17,600
do it on all the other client libraries

00:30:15,919 --> 00:30:21,360
and then client golang doesn't

00:30:17,600 --> 00:30:23,520
it you can't win either way because

00:30:21,360 --> 00:30:24,480
the thing that works is if everything's

00:30:23,520 --> 00:30:27,679
consistent and

00:30:24,480 --> 00:30:29,840
and going in the same direction but

00:30:27,679 --> 00:30:32,320
what i hear from beyond is that you want

00:30:29,840 --> 00:30:35,200
to get user feedback and only act if the

00:30:32,320 --> 00:30:37,679
feedback is what you expect

00:30:35,200 --> 00:30:38,960
i think we should gather the feedback

00:30:37,679 --> 00:30:42,320
because it's valuable

00:30:38,960 --> 00:30:43,919
to get an idea i expect with 99 chance

00:30:42,320 --> 00:30:46,240
the the feedback will be please

00:30:43,919 --> 00:30:48,799
switch it off by default and then in

00:30:46,240 --> 00:30:51,600
that case i think we should make it

00:30:48,799 --> 00:30:53,840
off by default everywhere but if the

00:30:51,600 --> 00:30:55,360
output is it should be on by default

00:30:53,840 --> 00:30:57,840
i think we should keep it where we

00:30:55,360 --> 00:31:00,240
already have it on and we need to re

00:30:57,840 --> 00:31:01,840
reconsider what we do with client

00:31:00,240 --> 00:31:04,799
goaling

00:31:01,840 --> 00:31:06,640
and i i think for this one percent of

00:31:04,799 --> 00:31:08,640
outcome we don't need to invest time

00:31:06,640 --> 00:31:10,399
right now to to determine what the

00:31:08,640 --> 00:31:14,320
outcome is

00:31:10,399 --> 00:31:18,720
i i have a i have another option

00:31:14,320 --> 00:31:21,200
uh what if bjorn and i write a proposal

00:31:18,720 --> 00:31:22,240
for what bjorn and i want which is off

00:31:21,200 --> 00:31:25,200
by default

00:31:22,240 --> 00:31:26,000
and we gather feedback on this specific

00:31:25,200 --> 00:31:29,840
proposal

00:31:26,000 --> 00:31:31,760
for rough consensus and then we just do

00:31:29,840 --> 00:31:34,399
and if the rough consensus says that

00:31:31,760 --> 00:31:36,880
beyond my proposal for off by default

00:31:34,399 --> 00:31:39,600
is okay then we we make that the

00:31:36,880 --> 00:31:41,760
suggested default

00:31:39,600 --> 00:31:42,720
and this this way we don't this way we

00:31:41,760 --> 00:31:45,360
don't have

00:31:42,720 --> 00:31:46,320
the matrix of all opinions colliding

00:31:45,360 --> 00:31:49,039
yeah because

00:31:46,320 --> 00:31:50,000
you know let's let's just send an

00:31:49,039 --> 00:31:52,240
opinion

00:31:50,000 --> 00:31:53,200
and see if we get too much objection or

00:31:52,240 --> 00:31:55,519
not

00:31:53,200 --> 00:31:57,600
my suggestion is we just stop at we will

00:31:55,519 --> 00:32:00,080
get the user flipping what default would

00:31:57,600 --> 00:32:02,159
be and once we have the result we can

00:32:00,080 --> 00:32:03,840
continue the discussion

00:32:02,159 --> 00:32:05,840
i mean we have this every month right

00:32:03,840 --> 00:32:07,919
this is not that that we

00:32:05,840 --> 00:32:10,399
it might be even if the output outcome

00:32:07,919 --> 00:32:12,240
is it should be default off we might not

00:32:10,399 --> 00:32:16,640
even need to discuss it here

00:32:12,240 --> 00:32:19,039
we just act on it right

00:32:16,640 --> 00:32:20,480
and we don't have to become we have to

00:32:19,039 --> 00:32:23,120
we don't have to do anything more

00:32:20,480 --> 00:32:24,799
heavyweight than that

00:32:23,120 --> 00:32:26,559
unless the outcome is yeah please

00:32:24,799 --> 00:32:29,600
default on and then we have to

00:32:26,559 --> 00:32:33,519
discuss again but we don't need to

00:32:29,600 --> 00:32:33,519
do this speculatively

00:32:34,080 --> 00:32:37,840
the the thing which i mentally stuck on

00:32:35,919 --> 00:32:39,679
is it feels as if

00:32:37,840 --> 00:32:41,039
we are basically asking for an opinion

00:32:39,679 --> 00:32:44,880
we intend to ignore

00:32:41,039 --> 00:32:47,120
um no no if the opinion is

00:32:44,880 --> 00:32:48,159
default on we just discuss how we

00:32:47,120 --> 00:32:50,399
implement that

00:32:48,159 --> 00:32:51,360
if the opinion is default off we don't

00:32:50,399 --> 00:32:53,919
need the discussion

00:32:51,360 --> 00:32:55,039
and it's like speculative branch

00:32:53,919 --> 00:32:58,640
prediction

00:32:55,039 --> 00:33:00,559
we we just right now we we act as if the

00:32:58,640 --> 00:33:02,399
answer will be default off because

00:33:00,559 --> 00:33:04,399
that's most likely and we don't need to

00:33:02,399 --> 00:33:05,760
spend an hour to discuss what to do if

00:33:04,399 --> 00:33:09,039
the answer is

00:33:05,760 --> 00:33:11,120
uh default on that's one thing you mean

00:33:09,039 --> 00:33:14,080
that no client golden does not have the

00:33:11,120 --> 00:33:14,080
created matrix

00:33:14,480 --> 00:33:20,559
sorry what was that this grand golan

00:33:16,720 --> 00:33:22,559
gave the underscore created matrix no

00:33:20,559 --> 00:33:24,080
klein golling doesn't have it yet and if

00:33:22,559 --> 00:33:26,720
we introduced it the plan

00:33:24,080 --> 00:33:28,720
so far was to introduce it with a

00:33:26,720 --> 00:33:30,640
configuration switch right where you say

00:33:28,720 --> 00:33:32,480
i want greater timestamps

00:33:30,640 --> 00:33:35,279
and if that's what's the output of the

00:33:32,480 --> 00:33:37,200
user feedback no discussion needed right

00:33:35,279 --> 00:33:39,679
if this the output is a different way we

00:33:37,200 --> 00:33:42,559
have to discuss how to do this

00:33:39,679 --> 00:33:44,080
and if we do it if it's wise to do it

00:33:42,559 --> 00:33:47,120
now knowing that the user

00:33:44,080 --> 00:33:49,519
feedback is that way but i'm only saying

00:33:47,120 --> 00:33:50,159
let's not invest this time for something

00:33:49,519 --> 00:33:52,880
that is an

00:33:50,159 --> 00:33:54,320
unlikely outcome anyway that's the only

00:33:52,880 --> 00:33:56,159
thing i try to say

00:33:54,320 --> 00:33:57,519
i i agree with that statement i also

00:33:56,159 --> 00:34:01,360
think getting feedback

00:33:57,519 --> 00:34:02,880
is like yes it is completely biased to

00:34:01,360 --> 00:34:05,120
turn them off because prometheus doesn't

00:34:02,880 --> 00:34:07,200
do anything with it right now

00:34:05,120 --> 00:34:08,399
if someone comes and contributes that we

00:34:07,200 --> 00:34:11,280
actually do something with

00:34:08,399 --> 00:34:12,800
with underscore created in the next six

00:34:11,280 --> 00:34:14,560
months that i could imagine that

00:34:12,800 --> 00:34:18,159
feedback being completely different

00:34:14,560 --> 00:34:19,280
so and that's also i don't even know if

00:34:18,159 --> 00:34:21,760
this user survey

00:34:19,280 --> 00:34:22,960
and getting feedback is helpful like it

00:34:21,760 --> 00:34:25,440
somewhat depends on

00:34:22,960 --> 00:34:26,560
do we do we want to use created or not

00:34:25,440 --> 00:34:28,240
in the server

00:34:26,560 --> 00:34:30,079
it's a chance to find out if there are

00:34:28,240 --> 00:34:31,280
already people using it right that would

00:34:30,079 --> 00:34:33,839
be very valuable

00:34:31,280 --> 00:34:36,480
outcome of the feedback it's also not i

00:34:33,839 --> 00:34:38,639
don't see it as a like a strict vote

00:34:36,480 --> 00:34:40,079
it's just find out what the sentiment is

00:34:38,639 --> 00:34:42,159
and if like three

00:34:40,079 --> 00:34:44,480
important players step forward and say

00:34:42,159 --> 00:34:47,440
yes we're using this everywhere already

00:34:44,480 --> 00:34:48,960
that's an important piece of information

00:34:47,440 --> 00:34:50,720
okay

00:34:48,960 --> 00:34:54,960
and i would also like that to get your

00:34:50,720 --> 00:34:54,960
feedback on the open matrix mailing list

00:34:55,040 --> 00:35:03,839
not only in parameters

00:35:16,640 --> 00:35:21,119
yeah okay so um just to try and move on

00:35:20,000 --> 00:35:24,960
either way um

00:35:21,119 --> 00:35:26,880
i tried to rewrite again to to uh

00:35:24,960 --> 00:35:28,400
to catch all of this and if not we just

00:35:26,880 --> 00:35:31,040
deleted and move on

00:35:28,400 --> 00:35:32,480
uh consensus we intend to suggest that

00:35:31,040 --> 00:35:34,320
we intend

00:35:32,480 --> 00:35:36,720
to suggest this default across our

00:35:34,320 --> 00:35:37,680
ecosystem potentially based on a design

00:35:36,720 --> 00:35:41,200
document

00:35:37,680 --> 00:35:42,880
that should uh address everything buren

00:35:41,200 --> 00:35:44,800
said i think but if not then we just

00:35:42,880 --> 00:35:47,200
deleted it

00:35:44,800 --> 00:35:48,000
no it doesn't trust what i said i'm

00:35:47,200 --> 00:35:51,359
sorry

00:35:48,000 --> 00:35:56,480
now fine it's it's completely fine um

00:35:51,359 --> 00:35:58,640
i did it is there anything else

00:35:56,480 --> 00:36:00,880
regarding underscore created of course

00:35:58,640 --> 00:36:00,880
then

00:36:04,720 --> 00:36:09,680
okay i think yeah what's what we have

00:36:07,760 --> 00:36:11,359
let's let's gather that feedback and

00:36:09,680 --> 00:36:13,119
based on that information let's continue

00:36:11,359 --> 00:36:14,400
the discussion it might be a very simple

00:36:13,119 --> 00:36:17,599
discussion then it might be a more

00:36:14,400 --> 00:36:17,599
complex one but we will see

00:36:17,920 --> 00:36:20,480
totally fine

00:36:24,800 --> 00:36:32,720
so next one there's something

00:36:28,320 --> 00:36:32,720
weird with google docs

00:36:33,280 --> 00:36:38,640
next one is by buren make numbers and

00:36:35,280 --> 00:36:38,640
duration literals the same

00:36:39,440 --> 00:36:48,400
um uh okay now all those come up um

00:36:44,240 --> 00:36:48,400
you're making problems so

00:36:49,040 --> 00:36:55,359
yeah so i i have this fairly

00:36:52,440 --> 00:36:56,960
brainstorming document that's already

00:36:55,359 --> 00:37:01,680
linked that's also linked

00:36:56,960 --> 00:37:01,680
down there about time

00:37:02,320 --> 00:37:09,040
and one idea was that we can

00:37:05,760 --> 00:37:12,560
unlock a bunch of things by

00:37:09,040 --> 00:37:14,160
making every number also a duration

00:37:12,560 --> 00:37:15,359
literal like a number it's just number

00:37:14,160 --> 00:37:18,640
of seconds

00:37:15,359 --> 00:37:21,760
and vice versa every duration literal

00:37:18,640 --> 00:37:25,440
could be interpreted as a number

00:37:21,760 --> 00:37:27,280
the seconds in that duration and uh just

00:37:25,440 --> 00:37:29,760
in the spirit of we are actually not

00:37:27,280 --> 00:37:31,440
really strictly typed in promptgel

00:37:29,760 --> 00:37:33,680
just do it like you could write

00:37:31,440 --> 00:37:36,320
obfuscated stuff like if you want to

00:37:33,680 --> 00:37:39,839
write the number 100 you could write

00:37:36,320 --> 00:37:40,400
one minute 40 seconds instead uh just

00:37:39,839 --> 00:37:43,359
enough

00:37:40,400 --> 00:37:43,760
to to win an obfuscation contest but i

00:37:43,359 --> 00:37:46,800
think

00:37:43,760 --> 00:37:49,200
this is i mean in

00:37:46,800 --> 00:37:50,079
um in a future version of prom ql we

00:37:49,200 --> 00:37:53,520
could have

00:37:50,079 --> 00:37:55,280
a duration type uh but we don't really

00:37:53,520 --> 00:37:55,599
have i mean we have that right now but

00:37:55,280 --> 00:37:59,040
it

00:37:55,599 --> 00:38:00,400
it um causes trouble right and that

00:37:59,040 --> 00:38:05,040
would be the first step to

00:38:00,400 --> 00:38:07,119
to get away from that that's also

00:38:05,040 --> 00:38:08,240
you can what's written there right you

00:38:07,119 --> 00:38:10,880
could you could create

00:38:08,240 --> 00:38:12,079
stuff that is sub second which you can't

00:38:10,880 --> 00:38:16,000
right now

00:38:12,079 --> 00:38:17,359
um you can use a duration literal in

00:38:16,000 --> 00:38:20,079
predict linear instead of

00:38:17,359 --> 00:38:22,160
just spelling out the number of seconds

00:38:20,079 --> 00:38:23,680
you could use something like processed

00:38:22,160 --> 00:38:26,480
out ten seconds minus

00:38:23,680 --> 00:38:28,000
whatever time is greater than one w

00:38:26,480 --> 00:38:30,800
instead of spelling out the number of

00:38:28,000 --> 00:38:30,800
seconds in a week

00:38:30,880 --> 00:38:34,640
and it shouldn't break anything um

00:38:33,310 --> 00:38:37,440
[Music]

00:38:34,640 --> 00:38:38,960
and of course there's future ideas that

00:38:37,440 --> 00:38:42,400
at some point you can

00:38:38,960 --> 00:38:45,200
actually use bronchial expression to

00:38:42,400 --> 00:38:46,400
determine a duration from other

00:38:45,200 --> 00:38:48,720
expressions

00:38:46,400 --> 00:38:50,800
but that's that's not that's just the

00:38:48,720 --> 00:38:52,160
future step that's just about syntax

00:38:50,800 --> 00:38:54,960
here for now

00:38:52,160 --> 00:38:56,079
actually do you mind elaborating on the

00:38:54,960 --> 00:38:58,720
future aspect

00:38:56,079 --> 00:39:01,040
are you expecting that a result could be

00:38:58,720 --> 00:39:03,440
a duration as well

00:39:01,040 --> 00:39:04,880
so that could be i mean the most

00:39:03,440 --> 00:39:07,440
primitive thing

00:39:04,880 --> 00:39:08,480
no there are two very simple things the

00:39:07,440 --> 00:39:12,560
one is

00:39:08,480 --> 00:39:15,839
you uh you just want um arithmetic

00:39:12,560 --> 00:39:19,760
in a duration right so in grafana that's

00:39:15,839 --> 00:39:22,720
a long i mean we have this

00:39:19,760 --> 00:39:23,520
okay one step back we have this uh magic

00:39:22,720 --> 00:39:25,680
rate interval

00:39:23,520 --> 00:39:26,640
in grafana as a template variable now

00:39:25,680 --> 00:39:29,040
which solves

00:39:26,640 --> 00:39:30,800
99 of the problems but not all of them

00:39:29,040 --> 00:39:32,800
but many people would have liked to say

00:39:30,800 --> 00:39:35,119
okay i have a value and i want to take

00:39:32,800 --> 00:39:36,720
five times that value like i want to

00:39:35,119 --> 00:39:37,760
write three times scrape interval or

00:39:36,720 --> 00:39:40,560
something right

00:39:37,760 --> 00:39:42,160
and then grafana templating said great

00:39:40,560 --> 00:39:43,599
but we cannot do arithmetic in our

00:39:42,160 --> 00:39:45,280
templating engine perhaps we will

00:39:43,599 --> 00:39:46,800
introduce this feature into the gerfana

00:39:45,280 --> 00:39:47,839
templating engine at some point in the

00:39:46,800 --> 00:39:50,000
future

00:39:47,839 --> 00:39:50,960
um on the other hand we could as well

00:39:50,000 --> 00:39:53,520
have arithmetic

00:39:50,960 --> 00:39:54,720
impromptu also you could write three

00:39:53,520 --> 00:39:57,119
times

00:39:54,720 --> 00:39:58,480
whatever numbers three times three weeks

00:39:57,119 --> 00:40:01,440
three times one hour

00:39:58,480 --> 00:40:03,599
which is being started prom girl seems

00:40:01,440 --> 00:40:04,720
pretty brain dead because why aren't you

00:40:03,599 --> 00:40:07,119
just writing it down

00:40:04,720 --> 00:40:08,560
but if you go through templating with a

00:40:07,119 --> 00:40:09,440
templating engine that doesn't do

00:40:08,560 --> 00:40:11,280
arithmetic

00:40:09,440 --> 00:40:12,720
it suddenly makes a lot of sense right

00:40:11,280 --> 00:40:13,280
so that's the one thing where you would

00:40:12,720 --> 00:40:17,040
have a

00:40:13,280 --> 00:40:19,040
an expression note this proposal here is

00:40:17,040 --> 00:40:21,920
not yet that because

00:40:19,040 --> 00:40:23,920
um we it would be it's it's way more

00:40:21,920 --> 00:40:24,720
complicated to make expressions work

00:40:23,920 --> 00:40:28,240
there

00:40:24,720 --> 00:40:28,720
because so far the proper engine assumes

00:40:28,240 --> 00:40:31,359
that

00:40:28,720 --> 00:40:32,640
just by static analysis essentially of

00:40:31,359 --> 00:40:35,359
the expression

00:40:32,640 --> 00:40:36,480
it can determine which time frame it has

00:40:35,359 --> 00:40:39,280
to access in the

00:40:36,480 --> 00:40:40,560
tsv and in this case it needs to do some

00:40:39,280 --> 00:40:42,480
evaluations

00:40:40,560 --> 00:40:44,240
simple arithmetic but it needs to be

00:40:42,480 --> 00:40:46,560
evaluations to do that

00:40:44,240 --> 00:40:47,440
which leads me to the next step if you

00:40:46,560 --> 00:40:50,079
want to put

00:40:47,440 --> 00:40:51,599
a duration into another time series

00:40:50,079 --> 00:40:54,240
coming from a recording rule

00:40:51,599 --> 00:40:54,880
to just make the duration configurable

00:40:54,240 --> 00:40:57,440
right

00:40:54,880 --> 00:40:59,359
like essentially teams can upload

00:40:57,440 --> 00:41:02,560
recording rules to say

00:40:59,359 --> 00:41:05,839
what duration they want in their alerts

00:41:02,560 --> 00:41:07,839
in that rate expression right and um

00:41:05,839 --> 00:41:09,760
what we do a lot for thresholds

00:41:07,839 --> 00:41:12,000
right you you often put thresholds into

00:41:09,760 --> 00:41:14,319
recording rules because that's possible

00:41:12,000 --> 00:41:15,200
uh you use recording rules as constants

00:41:14,319 --> 00:41:18,079
in a way right

00:41:15,200 --> 00:41:19,760
but you can't do it for durations

00:41:18,079 --> 00:41:22,400
because that again

00:41:19,760 --> 00:41:24,400
needs an evaluation and that becomes

00:41:22,400 --> 00:41:27,599
really complicated internally

00:41:24,400 --> 00:41:29,680
but at least this would build the

00:41:27,599 --> 00:41:32,240
groundworks where we could

00:41:29,680 --> 00:41:34,160
if we want to in future do this but we

00:41:32,240 --> 00:41:34,720
don't have to do it right now it already

00:41:34,160 --> 00:41:38,079
unlocks

00:41:34,720 --> 00:41:39,760
things uh yeah i mean i think you

00:41:38,079 --> 00:41:43,520
already kind of alluded to

00:41:39,760 --> 00:41:46,640
what the i i i like this a lot

00:41:43,520 --> 00:41:47,440
i think for for that use case the like

00:41:46,640 --> 00:41:50,800
um

00:41:47,440 --> 00:41:54,560
let's call it dynamic um uh

00:41:50,800 --> 00:41:56,640
durations um i think i would probably

00:41:54,560 --> 00:41:58,800
i would probably like to see a design

00:41:56,640 --> 00:42:03,839
dock for that but other than that

00:41:58,800 --> 00:42:03,839
um i i love those

00:42:04,560 --> 00:42:11,440
so i love the idea of having

00:42:08,240 --> 00:42:13,280
comparison to generations and in some

00:42:11,440 --> 00:42:15,839
places a lot of interruptions in

00:42:13,280 --> 00:42:17,680
place of scholars but i have concerns

00:42:15,839 --> 00:42:19,359
the other way around like

00:42:17,680 --> 00:42:20,800
what will happen in someone else for the

00:42:19,359 --> 00:42:23,680
rate of plus inf

00:42:20,800 --> 00:42:24,560
or what happens if someone has the rate

00:42:23,680 --> 00:42:26,319
for none

00:42:24,560 --> 00:42:28,240
and also like what happens if someone

00:42:26,319 --> 00:42:28,880
asks for the red below the millisecond

00:42:28,240 --> 00:42:30,400
so now

00:42:28,880 --> 00:42:32,480
you can do duration up to the

00:42:30,400 --> 00:42:33,440
millisecond and that's what the tsb

00:42:32,480 --> 00:42:36,200
supports but

00:42:33,440 --> 00:42:37,680
what will happen when people would put

00:42:36,200 --> 00:42:40,240
0.0001

00:42:37,680 --> 00:42:40,240
in the rate

00:42:41,040 --> 00:42:44,480
we need to define that right in that

00:42:43,440 --> 00:42:46,319
case

00:42:44,480 --> 00:42:48,720
i guess you're around to the next

00:42:46,319 --> 00:42:50,079
millisecond value and if a future tsv

00:42:48,720 --> 00:42:51,680
does nanoseconds

00:42:50,079 --> 00:42:55,440
because speed traders want to use

00:42:51,680 --> 00:42:55,440
prometheus then it will not run

00:42:56,079 --> 00:43:00,560
i mean we we already have that in open

00:42:58,720 --> 00:43:02,400
metrics right because you can

00:43:00,560 --> 00:43:05,440
create a time step and open metrics that

00:43:02,400 --> 00:43:07,920
is zero zero zero zero zero zero one

00:43:05,440 --> 00:43:09,520
and people drowned in the same way i

00:43:07,920 --> 00:43:12,319
mean those are valid concerns

00:43:09,520 --> 00:43:13,680
uh but i don't think they are serious

00:43:12,319 --> 00:43:15,760
concerns

00:43:13,680 --> 00:43:17,359
i think those are the types of concerns

00:43:15,760 --> 00:43:20,240
which would ideally be addressed in a

00:43:17,359 --> 00:43:20,240
design document

00:43:25,200 --> 00:43:28,960
should we just have a call for consensus

00:43:26,880 --> 00:43:30,960
for wanting to have a design document on

00:43:28,960 --> 00:43:33,520
this that we generally support and

00:43:30,960 --> 00:43:35,839
want to see a design document sure makes

00:43:33,520 --> 00:43:35,839
sense

00:43:36,240 --> 00:43:41,760
more more to do slots in our design

00:43:39,520 --> 00:43:44,000
should we have a consensus that bjorn

00:43:41,760 --> 00:43:47,119
writes it or

00:43:44,000 --> 00:43:48,000
i can't yes right now let's erase it by

00:43:47,119 --> 00:43:51,200
next week

00:43:48,000 --> 00:43:54,319
do you think we can overwrite him

00:43:51,200 --> 00:44:09,839
not next week next week is

00:43:54,319 --> 00:44:09,839
special i expect great things

00:44:25,839 --> 00:44:30,079
consensus we like the idea and they tend

00:44:27,839 --> 00:44:33,440
to explore it in a design document

00:44:30,079 --> 00:44:33,440
or agree to anyone disagreeing

00:44:35,280 --> 00:44:43,440
very good next one is bartek

00:44:40,480 --> 00:44:44,640
one push api push gateway api versus

00:44:43,440 --> 00:44:48,720
open matrix

00:44:44,640 --> 00:44:51,040
push versus prometheus remote right

00:44:48,720 --> 00:44:52,880
right so i think this is something what

00:44:51,040 --> 00:44:56,560
i what i wanted to touch on

00:44:52,880 --> 00:44:59,680
for a long time so um

00:44:56,560 --> 00:45:04,000
you know there is there are still uh

00:44:59,680 --> 00:45:06,160
some use cases for

00:45:04,000 --> 00:45:08,160
pushing a metric right to your your

00:45:06,160 --> 00:45:10,560
application push gateway is one thing

00:45:08,160 --> 00:45:11,760
we recently started um discussion around

00:45:10,560 --> 00:45:13,520
serverless

00:45:11,760 --> 00:45:16,079
and uh essentially short living

00:45:13,520 --> 00:45:18,400
containers for some cases the push

00:45:16,079 --> 00:45:19,520
pushing capabilities similar to statsd

00:45:18,400 --> 00:45:22,880
which bjorn mentioned

00:45:19,520 --> 00:45:23,359
uh you know before is is desired we have

00:45:22,880 --> 00:45:26,640
some

00:45:23,359 --> 00:45:28,640
uh you know semi stable uh

00:45:26,640 --> 00:45:30,640
things that that work which is like push

00:45:28,640 --> 00:45:32,720
api it's part of the client goal line so

00:45:30,640 --> 00:45:34,880
it's kind of official

00:45:32,720 --> 00:45:36,160
recently we introduced openmetrics which

00:45:34,880 --> 00:45:39,520
is which has

00:45:36,160 --> 00:45:41,520
um push api which i i was

00:45:39,520 --> 00:45:43,359
i was not even aware of because there is

00:45:41,520 --> 00:45:44,880
no example implementation of it so i

00:45:43,359 --> 00:45:46,800
guess there is some work to be done if

00:45:44,880 --> 00:45:49,680
you want to share this wider

00:45:46,800 --> 00:45:50,000
and i want to mention that remote right

00:45:49,680 --> 00:45:52,960
is

00:45:50,000 --> 00:45:54,720
capable of doing this push a pushing api

00:45:52,960 --> 00:45:55,760
kind of capabilities because it has

00:45:54,720 --> 00:45:58,800
metadata

00:45:55,760 --> 00:45:59,839
uh you know fields from resin kind of

00:45:58,800 --> 00:46:02,560
into

00:45:59,839 --> 00:46:04,480
extensions right so there is huge

00:46:02,560 --> 00:46:07,599
overlap between those um

00:46:04,480 --> 00:46:08,079
apis so my question is like do we want

00:46:07,599 --> 00:46:10,800
to

00:46:08,079 --> 00:46:11,440
maybe reduce at least i don't know

00:46:10,800 --> 00:46:14,240
remove

00:46:11,440 --> 00:46:15,359
push gateway api and and get open

00:46:14,240 --> 00:46:17,839
metrics api

00:46:15,359 --> 00:46:20,079
as the official one and deprecate the

00:46:17,839 --> 00:46:22,800
push gateway api because those are

00:46:20,079 --> 00:46:24,480
the ones that to me are definitely

00:46:22,800 --> 00:46:26,960
overlapping because if you see the

00:46:24,480 --> 00:46:28,079
example of of push gateway api it's

00:46:26,960 --> 00:46:31,680
really like

00:46:28,079 --> 00:46:34,800
promotes exposition format being pushed

00:46:31,680 --> 00:46:37,520
right remote right is to me

00:46:34,800 --> 00:46:38,160
ideal you know end goal because it can

00:46:37,520 --> 00:46:40,480
replace

00:46:38,160 --> 00:46:41,599
push gateway api it can replace open

00:46:40,480 --> 00:46:44,960
metric push

00:46:41,599 --> 00:46:46,800
and actually have more capabilities for

00:46:44,960 --> 00:46:49,760
replication because it can group

00:46:46,800 --> 00:46:50,960
samples under single metadata under

00:46:49,760 --> 00:46:53,119
single series

00:46:50,960 --> 00:46:54,880
so to me in ideal world i would have

00:46:53,119 --> 00:46:56,480
just remote right to be honest i don't

00:46:54,880 --> 00:46:58,880
see any harm in that

00:46:56,480 --> 00:46:59,599
so i would love to see uh yeah your

00:46:58,880 --> 00:47:02,640
feedback

00:46:59,599 --> 00:47:05,760
um first of all maybe what to reduce

00:47:02,640 --> 00:47:07,359
what to take as an official one and how

00:47:05,760 --> 00:47:10,480
to document it better

00:47:07,359 --> 00:47:13,359
how to show it better right so

00:47:10,480 --> 00:47:15,839
my use case for the pushgate api is cron

00:47:13,359 --> 00:47:18,000
job that just have access to curl

00:47:15,839 --> 00:47:20,079
and if you tell me oh i can do remote

00:47:18,000 --> 00:47:21,359
right with curl i would be happy to do

00:47:20,079 --> 00:47:23,280
that

00:47:21,359 --> 00:47:25,680
and i think that's a lot of the people

00:47:23,280 --> 00:47:28,400
are just using like a chrome job in

00:47:25,680 --> 00:47:28,880
in red at linux when they have access to

00:47:28,400 --> 00:47:30,800
curl

00:47:28,880 --> 00:47:32,400
and text file and that you just do a

00:47:30,800 --> 00:47:34,000
girl and they push the metrics

00:47:32,400 --> 00:47:36,319
and that's not possible with remote

00:47:34,000 --> 00:47:36,319
right

00:47:36,480 --> 00:47:40,400
yep i i also think remote ride is too

00:47:38,960 --> 00:47:43,440
complicated a protocol

00:47:40,400 --> 00:47:46,000
and we just had someone spend an entire

00:47:43,440 --> 00:47:47,599
week to build an arduino library for it

00:47:46,000 --> 00:47:51,280
but if it's a push gateway api that

00:47:47,599 --> 00:47:53,839
would be like five lines or something

00:47:51,280 --> 00:47:55,200
um product you're you're calling it push

00:47:53,839 --> 00:47:57,440
gateway api

00:47:55,200 --> 00:47:58,960
um so you're not talking about the push

00:47:57,440 --> 00:48:02,000
gateway itself

00:47:58,960 --> 00:48:03,839
or are you

00:48:02,000 --> 00:48:05,200
yeah that's a good point so i'm talking

00:48:03,839 --> 00:48:07,839
about api because

00:48:05,200 --> 00:48:07,839
it's

00:48:08,240 --> 00:48:12,240
kind of we can use this api outside of

00:48:10,720 --> 00:48:14,160
push gateway itself

00:48:12,240 --> 00:48:16,319
rightly just you know push mechanism

00:48:14,160 --> 00:48:18,240
that people sometimes

00:48:16,319 --> 00:48:20,079
like it's i think it's used as a good

00:48:18,240 --> 00:48:21,920
question what is using the weave work

00:48:20,079 --> 00:48:23,200
aggregation proxy which apparently is we

00:48:21,920 --> 00:48:24,960
used a lot

00:48:23,200 --> 00:48:26,640
i think it's push gateway api if i'm not

00:48:24,960 --> 00:48:28,559
wrong this is something i guess we need

00:48:26,640 --> 00:48:31,920
to check

00:48:28,559 --> 00:48:31,920
that's why i separate those things

00:48:32,240 --> 00:48:36,160
i mean the the problem here is also that

00:48:34,480 --> 00:48:38,160
the name push gateway we should have

00:48:36,160 --> 00:48:41,119
never named it push gateway right that's

00:48:38,160 --> 00:48:42,240
we should have named that export server

00:48:41,119 --> 00:48:44,400
because that's

00:48:42,240 --> 00:48:45,920
what google called it we just didn't

00:48:44,400 --> 00:48:46,800
want to copy all the google names

00:48:45,920 --> 00:48:50,079
because

00:48:46,800 --> 00:48:52,400
we're afraid i don't know um

00:48:50,079 --> 00:48:54,559
or yeah i don't know i think this was

00:48:52,400 --> 00:48:56,079
one somebody who was not an ex-googler

00:48:54,559 --> 00:48:58,000
called the push gator and he said we

00:48:56,079 --> 00:48:59,599
should not just use our internal google

00:48:58,000 --> 00:49:01,119
moment to drive we were and confuse

00:48:59,599 --> 00:49:02,400
people but now we have confused people

00:49:01,119 --> 00:49:03,280
because people think it's to push

00:49:02,400 --> 00:49:05,839
metrics

00:49:03,280 --> 00:49:06,480
which it's not right it's also like if

00:49:05,839 --> 00:49:09,200
you

00:49:06,480 --> 00:49:10,079
if you i think if you switch push

00:49:09,200 --> 00:49:12,480
gateway to

00:49:10,079 --> 00:49:14,880
be a real remote right receiver you

00:49:12,480 --> 00:49:17,440
would increase that confusion even more

00:49:14,880 --> 00:49:18,640
because it's not really a remote right

00:49:17,440 --> 00:49:21,040
receiver right i mean it wouldn't

00:49:18,640 --> 00:49:23,040
propagate it properly to prometheus

00:49:21,040 --> 00:49:25,040
well on the other hand if you have a job

00:49:23,040 --> 00:49:26,400
who uses remote right to push to

00:49:25,040 --> 00:49:27,920
prometheus server that's a very

00:49:26,400 --> 00:49:30,880
different thing

00:49:27,920 --> 00:49:31,440
from pushing to a push gateway um also

00:49:30,880 --> 00:49:32,960
you have to

00:49:31,440 --> 00:49:34,720
like in the prometheus setup you have to

00:49:32,960 --> 00:49:36,000
push to all prometheus servers that are

00:49:34,720 --> 00:49:37,839
on your age a setup

00:49:36,000 --> 00:49:39,280
well push gateway is like this one

00:49:37,839 --> 00:49:41,119
single thing where you push through

00:49:39,280 --> 00:49:42,800
and then all the prometheus ever scrape

00:49:41,119 --> 00:49:44,880
it i think it's it's

00:49:42,800 --> 00:49:48,720
it's a very different thing and perhaps

00:49:44,880 --> 00:49:53,200
it's just a clarification issue

00:49:48,720 --> 00:49:56,400
there is so um first i i fully agree we

00:49:53,200 --> 00:49:57,760
we shouldn't have um we need something

00:49:56,400 --> 00:50:01,119
simple which you can just

00:49:57,760 --> 00:50:03,040
write in a in a shell script also um

00:50:01,119 --> 00:50:05,280
and i do think that in theory you can

00:50:03,040 --> 00:50:06,960
rename the push gateway to something

00:50:05,280 --> 00:50:08,319
more fitting

00:50:06,960 --> 00:50:10,400
which brings me directly to the next

00:50:08,319 --> 00:50:13,440
point which i already already pre-wrote

00:50:10,400 --> 00:50:14,240
in the thing i do expect that we will

00:50:13,440 --> 00:50:16,559
have

00:50:14,240 --> 00:50:17,760
more use cases for things which are

00:50:16,559 --> 00:50:21,680
inherently pushed

00:50:17,760 --> 00:50:23,040
and cached by a thing as an mqtt and

00:50:21,680 --> 00:50:26,880
such

00:50:23,040 --> 00:50:30,880
as like in particular sigbi and mqtt

00:50:26,880 --> 00:50:33,599
are the things within the iot space

00:50:30,880 --> 00:50:35,920
and there's more and more use cases i

00:50:33,599 --> 00:50:38,000
mean the use cases exist for ages

00:50:35,920 --> 00:50:40,160
but as more and more industry players

00:50:38,000 --> 00:50:44,000
like actually production industry

00:50:40,160 --> 00:50:47,280
or data centers and such start using

00:50:44,000 --> 00:50:49,760
prometheus we will have more and more of

00:50:47,280 --> 00:50:53,119
an issue where we need to have this

00:50:49,760 --> 00:50:56,000
this official landing ground for things

00:50:53,119 --> 00:50:57,680
having a nomenclature in parallel to

00:50:56,000 --> 00:51:00,480
exporter

00:50:57,680 --> 00:51:02,640
like cacher or something might make

00:51:00,480 --> 00:51:06,079
sense where we have the

00:51:02,640 --> 00:51:07,760
openmetrics push caching gateway

00:51:06,079 --> 00:51:10,000
shitty name but you you get my drift

00:51:07,760 --> 00:51:13,200
where we have the mqtt

00:51:10,000 --> 00:51:16,640
uh caching thingy um

00:51:13,200 --> 00:51:18,800
that kind of thing i i think

00:51:16,640 --> 00:51:20,240
that the use case will not go away and i

00:51:18,800 --> 00:51:23,040
think the use case for

00:51:20,240 --> 00:51:23,599
different formats will actually increase

00:51:23,040 --> 00:51:27,119
not

00:51:23,599 --> 00:51:29,280
decrease on the back end it can be

00:51:27,119 --> 00:51:30,640
remote right no worries if you have

00:51:29,280 --> 00:51:32,960
local if you have

00:51:30,640 --> 00:51:34,839
local everything the other thing which

00:51:32,960 --> 00:51:36,000
we need to consider is staleness and

00:51:34,839 --> 00:51:39,040
upness

00:51:36,000 --> 00:51:41,680
that's that's something which eg open

00:51:39,040 --> 00:51:45,200
telemetry is

00:51:41,680 --> 00:51:46,319
is forced to address um for for certain

00:51:45,200 --> 00:51:48,480
scenarios

00:51:46,319 --> 00:51:50,400
of course you have inherent properties

00:51:48,480 --> 00:51:53,440
of pull

00:51:50,400 --> 00:51:54,559
which push simply cannot have in

00:51:53,440 --> 00:51:57,839
precisely

00:51:54,559 --> 00:52:00,079
the same way you can make approximations

00:51:57,839 --> 00:52:01,359
but you cannot make the same guarantees

00:52:00,079 --> 00:52:04,640
about reachability

00:52:01,359 --> 00:52:06,720
which you can make with with pull

00:52:04,640 --> 00:52:08,640
okay so what i gather it looks like we

00:52:06,720 --> 00:52:11,520
have

00:52:08,640 --> 00:52:12,079
this direction of thought that we should

00:52:11,520 --> 00:52:15,440
you know

00:52:12,079 --> 00:52:17,200
find an official push api

00:52:15,440 --> 00:52:19,200
but this has to come with some

00:52:17,200 --> 00:52:21,280
implementation of distributed

00:52:19,200 --> 00:52:22,720
counter distributed gouge or anything

00:52:21,280 --> 00:52:26,400
like that right

00:52:22,720 --> 00:52:28,000
um and i wonder i'm here in this

00:52:26,400 --> 00:52:29,520
maintainer team for like i don't know

00:52:28,000 --> 00:52:31,440
three years or something i still don't

00:52:29,520 --> 00:52:32,400
get why we cannot extend push gateway to

00:52:31,440 --> 00:52:35,040
do this

00:52:32,400 --> 00:52:37,599
um so i think we need to have some kind

00:52:35,040 --> 00:52:40,160
of direction on this one should we just

00:52:37,599 --> 00:52:41,599
create something new or or yeah i'm

00:52:40,160 --> 00:52:43,359
sorry i'm ignorant but like

00:52:41,599 --> 00:52:44,839
push gateway to me should be capable of

00:52:43,359 --> 00:52:48,079
doing those things

00:52:44,839 --> 00:52:49,920
um what specifically you mean the push

00:52:48,079 --> 00:52:50,880
gateway should be able to do prometheus

00:52:49,920 --> 00:52:54,000
remote right

00:52:50,880 --> 00:52:57,040
no no no uh to do uh

00:52:54,000 --> 00:52:59,040
this distributed counter

00:52:57,040 --> 00:53:01,680
cache which we described as an open

00:52:59,040 --> 00:53:03,920
metric pusher right

00:53:01,680 --> 00:53:04,960
in my opinion this is basically an agent

00:53:03,920 --> 00:53:08,319
use case

00:53:04,960 --> 00:53:12,400
um it's

00:53:08,319 --> 00:53:12,400
like the the diff

00:53:12,800 --> 00:53:16,800
going back i think roughly two years uh

00:53:15,280 --> 00:53:20,800
in in our discussions

00:53:16,800 --> 00:53:23,760
um we we had this discussion about a

00:53:20,800 --> 00:53:24,160
a more or less caching prometheus which

00:53:23,760 --> 00:53:26,400
uh

00:53:24,160 --> 00:53:27,359
sits in a pop like that was the example

00:53:26,400 --> 00:53:29,359
i used back then

00:53:27,359 --> 00:53:32,240
with sits which sits in a pop and it's

00:53:29,359 --> 00:53:34,559
like a super short-lived prometheus

00:53:32,240 --> 00:53:36,800
which which is able to function on its

00:53:34,559 --> 00:53:39,760
own and do everything you need it to do

00:53:36,800 --> 00:53:40,800
but it's designed to to get all its data

00:53:39,760 --> 00:53:43,599
to somewhere else

00:53:40,800 --> 00:53:45,359
yet if it loses connection it's able to

00:53:43,599 --> 00:53:48,480
to retain local state it

00:53:45,359 --> 00:53:50,079
it can show it you can even create local

00:53:48,480 --> 00:53:52,240
alerts and such

00:53:50,079 --> 00:53:54,720
and to me all of those use cases are

00:53:52,240 --> 00:53:56,000
basically instantiations or sub-use

00:53:54,720 --> 00:53:59,839
cases of this wider

00:53:56,000 --> 00:54:02,160
thing so my thinking is

00:53:59,839 --> 00:54:03,680
that we approach this from an agent

00:54:02,160 --> 00:54:06,319
point of view or from an

00:54:03,680 --> 00:54:08,079
edge point of view or pop or what have

00:54:06,319 --> 00:54:10,880
you point of view

00:54:08,079 --> 00:54:12,400
solve it for this generic case and then

00:54:10,880 --> 00:54:14,800
we just break those

00:54:12,400 --> 00:54:16,079
individual components out again into

00:54:14,800 --> 00:54:19,359
things which you can run

00:54:16,079 --> 00:54:22,720
on their own so i see a a

00:54:19,359 --> 00:54:25,119
combined prometheus agent um similar to

00:54:22,720 --> 00:54:26,160
how the grafana agent has more than one

00:54:25,119 --> 00:54:29,520
thing

00:54:26,160 --> 00:54:32,720
as an absolute possibility um

00:54:29,520 --> 00:54:36,240
but that design should then match

00:54:32,720 --> 00:54:39,359
for example this new push

00:54:36,240 --> 00:54:40,960
cache thingy um

00:54:39,359 --> 00:54:43,200
i mean just a push gateway shouldn't be

00:54:40,960 --> 00:54:44,960
able to scrape but but an agent is able

00:54:43,200 --> 00:54:47,040
to scrape

00:54:44,960 --> 00:54:49,599
and and if you have a few flags you can

00:54:47,040 --> 00:54:50,640
just make that thing act in precisely

00:54:49,599 --> 00:54:52,799
the way you want it

00:54:50,640 --> 00:54:54,079
it it need to have local storage do you

00:54:52,799 --> 00:54:55,680
want to have a local query

00:54:54,079 --> 00:54:57,200
do you need local recording rules do you

00:54:55,680 --> 00:54:59,040
need local alerting

00:54:57,200 --> 00:55:01,280
do you need it to scrape or do you

00:54:59,040 --> 00:55:04,240
expect it to just be pushed to

00:55:01,280 --> 00:55:05,280
do you need it to receive mqtt or do you

00:55:04,240 --> 00:55:07,520
expect it to

00:55:05,280 --> 00:55:09,280
to uh to just to open metrics or what

00:55:07,520 --> 00:55:10,640
have you this kind of thing

00:55:09,280 --> 00:55:12,319
and then you just break it out again

00:55:10,640 --> 00:55:15,040
into individual components so you can

00:55:12,319 --> 00:55:18,319
run everything on its own as per

00:55:15,040 --> 00:55:19,920
uh recommended standard but i i want to

00:55:18,319 --> 00:55:22,240
adjust the sky describing the open

00:55:19,920 --> 00:55:24,079
telemetry collector why would we need to

00:55:22,240 --> 00:55:27,280
rewrite the open telemetry collector

00:55:24,079 --> 00:55:30,480
because that's what it's doing

00:55:27,280 --> 00:55:34,240
ish not quite

00:55:30,480 --> 00:55:37,440
the big difference is one has a a

00:55:34,240 --> 00:55:38,160
optimized happy path and it's it's

00:55:37,440 --> 00:55:41,200
optimized

00:55:38,160 --> 00:55:44,559
just for the one use case and also

00:55:41,200 --> 00:55:48,160
completely based or largely based on on

00:55:44,559 --> 00:55:51,520
long-running battle proven code um

00:55:48,160 --> 00:55:53,359
there is the other has a much wider

00:55:51,520 --> 00:55:56,079
envelope and and wants to cover

00:55:53,359 --> 00:55:57,520
uh even more use cases and highly

00:55:56,079 --> 00:55:59,680
complex pipelines

00:55:57,520 --> 00:56:02,079
which i don't think should be in scope

00:55:59,680 --> 00:56:05,760
for a opinionated implementation which

00:56:02,079 --> 00:56:05,760
is specific to voice prometheus

00:56:06,079 --> 00:56:10,319
but the m2b format is compatible

00:56:11,839 --> 00:56:16,079
yes um and i i like from from the test

00:56:15,119 --> 00:56:17,520
results and everything

00:56:16,079 --> 00:56:20,079
they're working towards this and they

00:56:17,520 --> 00:56:22,960
will they have it at some point

00:56:20,079 --> 00:56:23,680
but i don't think it makes sense to to

00:56:22,960 --> 00:56:26,880
completely

00:56:23,680 --> 00:56:30,079
give give this away in particular

00:56:26,880 --> 00:56:32,640
due to us already having all the bits

00:56:30,079 --> 00:56:32,640
and pieces

00:56:34,000 --> 00:56:39,359
like we do have we do have a local cache

00:56:36,319 --> 00:56:39,359
that's called psdb

00:56:40,000 --> 00:56:43,440
we do have an interface to the alert

00:56:41,680 --> 00:56:45,200
manager which is already compatible with

00:56:43,440 --> 00:56:46,079
the promises of adventure all those bits

00:56:45,200 --> 00:56:47,760
and pieces

00:56:46,079 --> 00:56:49,920
would make sense i mean we made the

00:56:47,760 --> 00:56:50,880
argument or the proposal to the open

00:56:49,920 --> 00:56:53,520
telemetry

00:56:50,880 --> 00:56:55,920
team several times to to work together

00:56:53,520 --> 00:56:56,880
on an agent as the basis for a generic

00:56:55,920 --> 00:56:59,040
collector

00:56:56,880 --> 00:57:01,440
which they can then extend with otlp and

00:56:59,040 --> 00:57:03,359
everything but that never came to be

00:57:01,440 --> 00:57:04,480
yet i don't think we should be pulling

00:57:03,359 --> 00:57:06,799
all the things in

00:57:04,480 --> 00:57:08,480
which are not prometheus specific for

00:57:06,799 --> 00:57:09,599
something which we intend to be used in

00:57:08,480 --> 00:57:12,640
a big mises

00:57:09,599 --> 00:57:15,760
specific manner yeah and

00:57:12,640 --> 00:57:18,000
i think the problem with or like missing

00:57:15,760 --> 00:57:20,640
part in the open telemetry right now

00:57:18,000 --> 00:57:22,160
collector is that it doesn't support

00:57:20,640 --> 00:57:24,880
open metric push right

00:57:22,160 --> 00:57:26,559
so uh i think that's another missing

00:57:24,880 --> 00:57:30,000
point but you know

00:57:26,559 --> 00:57:31,520
if we can add that receiver what they

00:57:30,000 --> 00:57:35,200
called right uh

00:57:31,520 --> 00:57:37,680
you know in theory it can it can fit our

00:57:35,200 --> 00:57:38,480
use case so i think that's the fair

00:57:37,680 --> 00:57:40,160
point julian

00:57:38,480 --> 00:57:43,119
covered but they're still missing

00:57:40,160 --> 00:57:43,119
compatibility right

00:57:46,720 --> 00:57:50,079
okay anyway i i'm not sure if we should

00:57:49,119 --> 00:57:53,599
focus or like

00:57:50,079 --> 00:57:56,880
i don't know discuss if such

00:57:53,599 --> 00:57:58,640
caching capability for pushing things

00:57:56,880 --> 00:58:00,319
aggregating things and you know

00:57:58,640 --> 00:58:02,000
constructing literally

00:58:00,319 --> 00:58:04,880
uh metrics from even because that's what

00:58:02,000 --> 00:58:06,640
it is we should

00:58:04,880 --> 00:58:08,880
put it inside prometheus or some

00:58:06,640 --> 00:58:10,079
separateness or some agent or outside

00:58:08,880 --> 00:58:11,839
because

00:58:10,079 --> 00:58:13,680
i don't know why not just keeping it as

00:58:11,839 --> 00:58:15,920
a sidecar as an exporter

00:58:13,680 --> 00:58:16,720
and then you know just later on we can

00:58:15,920 --> 00:58:18,480
discuss if

00:58:16,720 --> 00:58:19,920
this should be one of the one binary or

00:58:18,480 --> 00:58:22,079
not i don't think

00:58:19,920 --> 00:58:25,040
uh it's an important detail we have more

00:58:22,079 --> 00:58:25,040
unknowns right now

00:58:25,839 --> 00:58:29,520
so the question is like what actionable

00:58:27,440 --> 00:58:32,720
we can do from here

00:58:29,520 --> 00:58:35,200
uh looks like we

00:58:32,720 --> 00:58:36,640
have some rough consensus do we have

00:58:35,200 --> 00:58:39,520
consensus on

00:58:36,640 --> 00:58:41,040
creating some kind of aggregation uh

00:58:39,520 --> 00:58:44,160
exporter for all for

00:58:41,040 --> 00:58:47,200
for those push cases uh

00:58:44,160 --> 00:58:49,200
is that weaver thing has anyone tried

00:58:47,200 --> 00:58:51,680
this in production

00:58:49,200 --> 00:58:52,640
that's the question i mean if that's

00:58:51,680 --> 00:58:55,440
already

00:58:52,640 --> 00:58:56,240
cool we could i mean we already

00:58:55,440 --> 00:58:58,880
recommend

00:58:56,240 --> 00:59:00,160
to try it out if you need this use case

00:58:58,880 --> 00:59:03,599
and

00:59:00,160 --> 00:59:05,359
um if if i mean

00:59:03,599 --> 00:59:07,119
if that's a good start we could ask

00:59:05,359 --> 00:59:08,400
refworks if we can put this into the

00:59:07,119 --> 00:59:10,720
prometheus orc or

00:59:08,400 --> 00:59:12,960
if we just need to refine it a bit it's

00:59:10,720 --> 00:59:16,070
apache license we can just put it into

00:59:12,960 --> 00:59:17,280
the prometheus orc as a fork

00:59:16,070 --> 00:59:19,760
[Music]

00:59:17,280 --> 00:59:21,839
i i mean the the there's a it's a

00:59:19,760 --> 00:59:23,680
paragraph about this aggregation

00:59:21,839 --> 00:59:26,000
feature in push gateway in the push

00:59:23,680 --> 00:59:28,079
gateway which is essentially

00:59:26,000 --> 00:59:30,160
it doesn't say no that can't be pushed

00:59:28,079 --> 00:59:31,040
gateway but it's just a different use

00:59:30,160 --> 00:59:32,960
case and

00:59:31,040 --> 00:59:34,720
if we want the push capa to do those two

00:59:32,960 --> 00:59:36,799
things we can do it

00:59:34,720 --> 00:59:38,240
but we could as well have it in two

00:59:36,799 --> 00:59:40,000
different things it

00:59:38,240 --> 00:59:43,200
that doesn't really make a difference

00:59:40,000 --> 00:59:43,760
the concern so far i had is that it's

00:59:43,200 --> 00:59:46,000
actually

00:59:43,760 --> 00:59:47,200
it needs to be well understood like i'm

00:59:46,000 --> 00:59:49,440
worried about

00:59:47,200 --> 00:59:51,359
how do you prevent double counting and

00:59:49,440 --> 00:59:52,799
loss of counts and all those things like

00:59:51,359 --> 00:59:55,599
if if the

00:59:52,799 --> 00:59:56,960
pushing client gets the network error

00:59:55,599 --> 00:59:58,480
should it retry

00:59:56,960 --> 01:00:00,240
because the retry might be a double

00:59:58,480 --> 01:00:02,480
count or it might not and

01:00:00,240 --> 01:00:04,400
then you need some id in your push or

01:00:02,480 --> 01:00:05,520
something i mean all these mistakes that

01:00:04,400 --> 01:00:08,160
that's the

01:00:05,520 --> 01:00:10,160
needs to be thought through and totally

01:00:08,160 --> 01:00:12,640
open to do this properly but

01:00:10,160 --> 01:00:14,000
um somebody has to do it properly right

01:00:12,640 --> 01:00:15,440
we cannot just say it's easy

01:00:14,000 --> 01:00:17,520
let's just put into push get right i

01:00:15,440 --> 01:00:20,000
don't think it's it's that easy

01:00:17,520 --> 01:00:20,000
yeah true

01:00:20,880 --> 01:00:24,640
and yeah that's why i'm really honestly

01:00:23,280 --> 01:00:26,839
curious how people

01:00:24,640 --> 01:00:28,880
have fared with the refworks push

01:00:26,839 --> 01:00:30,000
aggregator perhaps it's all great right

01:00:28,880 --> 01:00:33,119
and then we could just

01:00:30,000 --> 01:00:34,079
adopt it i think it would be a good

01:00:33,119 --> 01:00:37,599
starting point but

01:00:34,079 --> 01:00:40,240
definitely yeah

01:00:37,599 --> 01:00:43,440
we can ask the the usual suspect who

01:00:40,240 --> 01:00:47,839
committed the promo aggregation gateway

01:00:43,440 --> 01:00:47,839
which is brian berger and tom wilkie

01:00:49,040 --> 01:00:53,520
i think we can reach them the other

01:00:51,920 --> 01:00:54,880
person who we can reach is robert who

01:00:53,520 --> 01:00:58,319
joined the call

01:00:54,880 --> 01:00:59,680
some time ago because like what i'm

01:00:58,319 --> 01:01:02,480
hearing is a little bit prometheus

01:00:59,680 --> 01:01:02,480
collector-ish

01:01:06,319 --> 01:01:12,000
so i i know there's bits and pieces

01:01:09,680 --> 01:01:13,760
planned for grafana agent to also be a

01:01:12,000 --> 01:01:15,920
collector-ish

01:01:13,760 --> 01:01:17,280
maybe that's also something which we can

01:01:15,920 --> 01:01:20,319
reuse for

01:01:17,280 --> 01:01:20,319
for this type of thing

01:01:22,480 --> 01:01:26,640
yeah perks you can hit all birds with

01:01:24,480 --> 01:01:29,119
that stone right also this

01:01:26,640 --> 01:01:30,799
when we talked about serverless if you

01:01:29,119 --> 01:01:31,680
have a serverless use case where you are

01:01:30,799 --> 01:01:34,079
willing to

01:01:31,680 --> 01:01:35,920
push something over the network you

01:01:34,079 --> 01:01:38,720
could do it with exactly that

01:01:35,920 --> 01:01:40,480
thing right i just want don't want to

01:01:38,720 --> 01:01:43,119
conflate all of this with the

01:01:40,480 --> 01:01:44,480
normal of a batch job and want to report

01:01:43,119 --> 01:01:46,720
finish of the batch up to the push

01:01:44,480 --> 01:01:48,720
gateway i think that's just a different

01:01:46,720 --> 01:01:52,400
and fundamentally very simple use case

01:01:48,720 --> 01:01:54,720
um that we don't have to mix up with the

01:01:52,400 --> 01:01:55,599
very powerful and potentially a bit

01:01:54,720 --> 01:01:59,280
hairy

01:01:55,599 --> 01:02:01,200
um aggregation collector thing

01:01:59,280 --> 01:02:03,920
with that aggregation collector thing

01:02:01,200 --> 01:02:07,680
yes it's on dsdb and queries and

01:02:03,920 --> 01:02:09,760
would it be a primitive server

01:02:07,680 --> 01:02:10,960
no i think it's exporter that's what we

01:02:09,760 --> 01:02:13,440
want no it's

01:02:10,960 --> 01:02:14,960
essentially starts the exporter just

01:02:13,440 --> 01:02:16,480
without the problems of the stat c

01:02:14,960 --> 01:02:19,760
protocol

01:02:16,480 --> 01:02:21,760
and and i'm i don't feel qualified to

01:02:19,760 --> 01:02:22,960
solve those problems but i'm fairly sure

01:02:21,760 --> 01:02:24,640
there are people

01:02:22,960 --> 01:02:26,799
in our community or somewhere in the

01:02:24,640 --> 01:02:28,720
universe who are fairly qualified

01:02:26,799 --> 01:02:30,319
thinking about this problem or who might

01:02:28,720 --> 01:02:33,280
have already solved it we just

01:02:30,319 --> 01:02:34,000
unaware i haven't even studied how the

01:02:33,280 --> 01:02:36,240
refworks

01:02:34,000 --> 01:02:38,880
push aggregators doing it if they are

01:02:36,240 --> 01:02:41,200
doing anything about it

01:02:38,880 --> 01:02:43,039
okay uh just to catch up so to rephrase

01:02:41,200 --> 01:02:46,240
you burn you are saying that

01:02:43,039 --> 01:02:49,440
bad job's case should be actually uh

01:02:46,240 --> 01:02:51,440
solved by the push gateway

01:02:49,440 --> 01:02:53,440
why so different than the serverless

01:02:51,440 --> 01:02:55,200
this very narrow use case the push

01:02:53,440 --> 01:02:57,440
category was meant for right and then

01:02:55,200 --> 01:02:59,359
now people shoehorn it into other use

01:02:57,440 --> 01:03:00,079
cases which means they have those use

01:02:59,359 --> 01:03:02,480
cases

01:03:00,079 --> 01:03:04,319
but i think we should not support the

01:03:02,480 --> 01:03:07,920
shoehorning we should just create a

01:03:04,319 --> 01:03:07,920
proper solution for those use cases

01:03:09,280 --> 01:03:13,760
i still don't get why budget is narrow

01:03:12,079 --> 01:03:14,640
think of serverless like what what

01:03:13,760 --> 01:03:18,000
exactly

01:03:14,640 --> 01:03:20,079
you can simplify you know several less

01:03:18,000 --> 01:03:22,240
like long ongoing let's say

01:03:20,079 --> 01:03:24,559
functions that you need to i don't know

01:03:22,240 --> 01:03:26,720
use push for some reason

01:03:24,559 --> 01:03:30,000
and those are just bad jobs so so i

01:03:26,720 --> 01:03:32,480
don't get towards the difference

01:03:30,000 --> 01:03:33,359
okay batch job just is not complete to

01:03:32,480 --> 01:03:35,039
describe the

01:03:33,359 --> 01:03:36,720
push data use case because bad shots

01:03:35,039 --> 01:03:38,559
often have a similar thing where they

01:03:36,720 --> 01:03:41,920
want an aggregate account right

01:03:38,559 --> 01:03:44,319
uh the the uh push gateway is for

01:03:41,920 --> 01:03:45,039
kind of self system i mean the classical

01:03:44,319 --> 01:03:48,079
example is

01:03:45,039 --> 01:03:48,880
is i run a database backup and i want to

01:03:48,079 --> 01:03:50,400
report

01:03:48,880 --> 01:03:52,400
when i'm done so that on the push

01:03:50,400 --> 01:03:55,520
gateway i can see if the last

01:03:52,400 --> 01:03:56,240
backup is too long ago right but also if

01:03:55,520 --> 01:04:00,400
i miss

01:03:56,240 --> 01:04:02,480
that it's it's it's i don't lose any

01:04:00,400 --> 01:04:02,799
data i just might get the spurious alert

01:04:02,480 --> 01:04:05,359
right

01:04:02,799 --> 01:04:07,039
it's it's um that's that's where this is

01:04:05,359 --> 01:04:07,839
simple where push category can get away

01:04:07,039 --> 01:04:09,760
with not

01:04:07,839 --> 01:04:11,760
having a proper persistent solution not

01:04:09,760 --> 01:04:14,860
having any ha story

01:04:11,760 --> 01:04:16,640
all those things right well um

01:04:14,860 --> 01:04:18,880
[Music]

01:04:16,640 --> 01:04:19,920
it's also a bad job if i just want to

01:04:18,880 --> 01:04:21,520
add up all the

01:04:19,920 --> 01:04:22,880
process records right but that's not

01:04:21,520 --> 01:04:24,400
what the push gateway probably at

01:04:22,880 --> 01:04:26,640
supports right now that would be

01:04:24,400 --> 01:04:29,119
where i want to add up stuff in the

01:04:26,640 --> 01:04:31,920
distributed fashion

01:04:29,119 --> 01:04:33,760
yeah cool okay so this seems like a good

01:04:31,920 --> 01:04:34,240
discussion i wonder if we can navigate

01:04:33,760 --> 01:04:37,680
to the

01:04:34,240 --> 01:04:40,240
api part so let's say we have stats the

01:04:37,680 --> 01:04:43,280
exporter kind of like that

01:04:40,240 --> 01:04:45,280
and we have contributors who are

01:04:43,280 --> 01:04:46,960
very willing to i don't know use maybe

01:04:45,280 --> 01:04:47,680
with aggregation process as a starting

01:04:46,960 --> 01:04:49,920
point but

01:04:47,680 --> 01:04:52,319
let's say added to the promote use or

01:04:49,920 --> 01:04:54,880
org or like premature community

01:04:52,319 --> 01:04:55,520
what should be the front api for that

01:04:54,880 --> 01:04:57,119
should we

01:04:55,520 --> 01:04:59,599
actually switch to open metric push

01:04:57,119 --> 01:05:00,640
maybe or and deprecate the push gateway

01:04:59,599 --> 01:05:02,160
api should we

01:05:00,640 --> 01:05:04,240
and we do that for the push gateway as

01:05:02,160 --> 01:05:05,920
well should we rename

01:05:04,240 --> 01:05:08,160
looks like we don't want to keep just

01:05:05,920 --> 01:05:08,640
remote right for the protobuf reasoning

01:05:08,160 --> 01:05:11,440
right

01:05:08,640 --> 01:05:12,880
so that's i think consensus but um still

01:05:11,440 --> 01:05:15,200
we have open metrics and put together

01:05:12,880 --> 01:05:17,680
api being similar thing

01:05:15,200 --> 01:05:18,559
it also depends i mean the oh there's

01:05:17,680 --> 01:05:20,319
the format

01:05:18,559 --> 01:05:22,640
of how to transfer the metrics but

01:05:20,319 --> 01:05:24,400
there's also like technical concerns

01:05:22,640 --> 01:05:26,160
which i mean as i said i don't feel

01:05:24,400 --> 01:05:26,640
qualified but i could imagine you want

01:05:26,160 --> 01:05:30,000
to

01:05:26,640 --> 01:05:31,119
also push a uuid to prevent double

01:05:30,000 --> 01:05:33,039
counts right

01:05:31,119 --> 01:05:34,400
and perhaps you want to transfer a

01:05:33,039 --> 01:05:36,720
sequence number if

01:05:34,400 --> 01:05:38,480
if this is not different jobs but the

01:05:36,720 --> 01:05:40,640
same and they can actually

01:05:38,480 --> 01:05:41,599
give you an idea if they have pushed

01:05:40,640 --> 01:05:44,240
something before

01:05:41,599 --> 01:05:44,880
i don't know like this is all yeah but i

01:05:44,240 --> 01:05:47,599
think there

01:05:44,880 --> 01:05:48,400
could be parts in the protocol that

01:05:47,599 --> 01:05:50,240
avoid

01:05:48,400 --> 01:05:52,480
the problems of that steve with double

01:05:50,240 --> 01:05:55,200
counting and and loss of counts

01:05:52,480 --> 01:05:56,000
um but i'm not sure like this is where i

01:05:55,200 --> 01:05:58,000
would like to

01:05:56,000 --> 01:05:59,599
listen to someone who has already

01:05:58,000 --> 01:06:01,599
experienced

01:05:59,599 --> 01:06:04,319
like how to do push properly essentially

01:06:01,599 --> 01:06:06,240
because that's that's a whole problem

01:06:04,319 --> 01:06:07,599
i mean not only push but yeah but

01:06:06,240 --> 01:06:10,400
aggregation like i

01:06:07,599 --> 01:06:12,000
i put i can't push events essentially

01:06:10,400 --> 01:06:15,599
and i don't want to

01:06:12,000 --> 01:06:19,119
over count and under count too much

01:06:15,599 --> 01:06:22,079
there is there is another push api

01:06:19,119 --> 01:06:23,200
involved otlp metrics right i don't know

01:06:22,079 --> 01:06:26,720
what's

01:06:23,200 --> 01:06:33,839
what's the latest is it ga

01:06:26,720 --> 01:06:33,839
or not but yes it is

01:06:34,720 --> 01:06:37,680
i think we're currently having the

01:06:35,920 --> 01:06:39,200
problem that we have way too many uh

01:06:37,680 --> 01:06:41,920
balls in the air so let's

01:06:39,200 --> 01:06:42,720
try and do partial consensus uh to to

01:06:41,920 --> 01:06:45,520
remove

01:06:42,720 --> 01:06:47,119
uh axes from from the whole discussion

01:06:45,520 --> 01:06:49,680
space

01:06:47,119 --> 01:06:50,319
the simplest one is if we want to find a

01:06:49,680 --> 01:06:53,039
new name

01:06:50,319 --> 01:06:54,000
for the concept of something which does

01:06:53,039 --> 01:06:57,599
caching

01:06:54,000 --> 01:06:58,720
um so either i think caching exporter or

01:06:57,599 --> 01:07:01,520
pressure

01:06:58,720 --> 01:07:03,760
might be a a an appropriate name

01:07:01,520 --> 01:07:06,960
aggregation

01:07:03,760 --> 01:07:07,920
i like aggregation part because it's but

01:07:06,960 --> 01:07:11,359
aggregation is

01:07:07,920 --> 01:07:14,400
detached from from being a caching

01:07:11,359 --> 01:07:16,240
thing of course an aggregation can also

01:07:14,400 --> 01:07:19,520
happen through scrapes

01:07:16,240 --> 01:07:23,200
whereas caching implies um i retain

01:07:19,520 --> 01:07:26,799
this information

01:07:23,200 --> 01:07:29,520
uh which is not live like that's one of

01:07:26,799 --> 01:07:32,640
the fundamental differences

01:07:29,520 --> 01:07:34,559
towards a normal exporter that you

01:07:32,640 --> 01:07:36,079
that you don't have live data it might

01:07:34,559 --> 01:07:38,960
be data which is

01:07:36,079 --> 01:07:39,599
half an hour old and i think that is one

01:07:38,960 --> 01:07:42,640
of the

01:07:39,599 --> 01:07:45,280
one of the common misunderstandings with

01:07:42,640 --> 01:07:46,799
push gateway and such and with mqtt

01:07:45,280 --> 01:07:49,440
exporter because it is

01:07:46,799 --> 01:07:50,480
not an exporter it is something which

01:07:49,440 --> 01:07:53,039
caches

01:07:50,480 --> 01:07:54,400
and offers this but also i don't want to

01:07:53,039 --> 01:07:56,240
derail the whole discussion

01:07:54,400 --> 01:07:58,079
i'm just trying to see if we can find

01:07:56,240 --> 01:08:01,760
consensus on just finding a

01:07:58,079 --> 01:08:03,839
name for that concept so going forward

01:08:01,760 --> 01:08:05,680
we have a name

01:08:03,839 --> 01:08:07,039
i don't think so i don't think we want a

01:08:05,680 --> 01:08:08,000
name before we actually know the

01:08:07,039 --> 01:08:10,240
solution

01:08:08,000 --> 01:08:12,240
yeah maybe let's let's postpone this

01:08:10,240 --> 01:08:14,079
yeah exactly okay but can we find a

01:08:12,240 --> 01:08:15,920
working name so at least we don't get

01:08:14,079 --> 01:08:16,239
confused ourselves because i don't feel

01:08:15,920 --> 01:08:20,239
that

01:08:16,239 --> 01:08:20,239
okay so can we just call it casher

01:08:20,480 --> 01:08:25,359
is that a good name no it's not okay um

01:08:22,960 --> 01:08:28,159
suggestions i mean we all

01:08:25,359 --> 01:08:29,120
okay so this is for the non-aggregating

01:08:28,159 --> 01:08:31,359
thing

01:08:29,120 --> 01:08:33,600
it might be but that is not the defining

01:08:31,359 --> 01:08:38,000
property the defining property it

01:08:33,600 --> 01:08:40,239
is it gets stuffed it

01:08:38,000 --> 01:08:41,759
caches things which are pushed to it

01:08:40,239 --> 01:08:44,560
through whatever mechanism

01:08:41,759 --> 01:08:46,080
and then offers it to prometheus either

01:08:44,560 --> 01:08:49,440
through remote right

01:08:46,080 --> 01:08:51,040
or uh scraping well the the

01:08:49,440 --> 01:08:52,640
probably the better name would be

01:08:51,040 --> 01:08:55,520
working with push gateway

01:08:52,640 --> 01:08:55,520
next generation

01:08:56,000 --> 01:08:59,759
the real push gateway let's call it the

01:08:58,000 --> 01:09:03,359
real brush gateway

01:08:59,759 --> 01:09:05,759
yes i mean like

01:09:03,359 --> 01:09:07,120
15 minutes over over the full hours and

01:09:05,759 --> 01:09:10,000
maybe we need a break

01:09:07,120 --> 01:09:12,000
yeah just for easy yes some people also

01:09:10,000 --> 01:09:13,040
called the push getter a cache which we

01:09:12,000 --> 01:09:15,279
didn't want to

01:09:13,040 --> 01:09:17,359
use as the name back then because we

01:09:15,279 --> 01:09:19,600
didn't want the timeout

01:09:17,359 --> 01:09:21,440
for uh metrics which is all another

01:09:19,600 --> 01:09:22,960
thing where people suggest that cache is

01:09:21,440 --> 01:09:25,520
something where the metric

01:09:22,960 --> 01:09:26,560
can time out right and we always

01:09:25,520 --> 01:09:28,000
rejected that

01:09:26,560 --> 01:09:29,920
and there might also be legitimate use

01:09:28,000 --> 01:09:33,120
cases for that one they are just not

01:09:29,920 --> 01:09:34,640
push gateway use cases so yeah

01:09:33,120 --> 01:09:36,799
purpose there as you say there are too

01:09:34,640 --> 01:09:39,199
many different use cases in the air

01:09:36,799 --> 01:09:39,199
which we

01:09:40,239 --> 01:09:43,839
need to analyze more carefully about

01:09:41,920 --> 01:09:45,600
just naming it push api

01:09:43,839 --> 01:09:50,000
convention right like we we work on the

01:09:45,600 --> 01:09:52,159
push api yes isn't that explicit

01:09:50,000 --> 01:09:53,040
i don't think so of course it's it's

01:09:52,159 --> 01:09:56,400
it's not

01:09:53,040 --> 01:09:58,239
talking about the concept

01:09:56,400 --> 01:10:01,280
at least in my mind we we are

01:09:58,239 --> 01:10:04,880
constructing different use cases out of

01:10:01,280 --> 01:10:08,719
a set of relatively few atomic

01:10:04,880 --> 01:10:11,840
use cases and my intention here is to

01:10:08,719 --> 01:10:12,320
to nail down the atomic use cases so we

01:10:11,840 --> 01:10:14,640
can

01:10:12,320 --> 01:10:16,159
discuss them in isolation as opposed to

01:10:14,640 --> 01:10:18,080
always coming back to

01:10:16,159 --> 01:10:20,000
like when we discuss serverless we have

01:10:18,080 --> 01:10:22,159
a whole bunch of different atomic use

01:10:20,000 --> 01:10:23,520
cases which is being combined into a new

01:10:22,159 --> 01:10:25,840
use case

01:10:23,520 --> 01:10:27,520
and that's it is where we get into the

01:10:25,840 --> 01:10:31,840
cycle confusion of discussion at least

01:10:27,520 --> 01:10:31,840
in my opinion

01:10:33,120 --> 01:10:37,360
buffer just as a working title and we we

01:10:36,719 --> 01:10:39,760
don't

01:10:37,360 --> 01:10:40,960
find consensus we just use it as a word

01:10:39,760 --> 01:10:44,080
for the concept

01:10:40,960 --> 01:10:47,440
of something which gets pushed to it

01:10:44,080 --> 01:10:50,400
or pushy pushy make push face

01:10:47,440 --> 01:10:50,400
push exporter

01:10:50,560 --> 01:10:53,760
clashing exporter would also work but it

01:10:52,480 --> 01:10:57,040
doesn't matter so

01:10:53,760 --> 01:10:58,719
anyone make a suggestion and we take it

01:10:57,040 --> 01:11:00,080
else it will be called pushing with push

01:10:58,719 --> 01:11:03,199
phase but this

01:11:00,080 --> 01:11:06,400
is for something that also should do act

01:11:03,199 --> 01:11:08,880
like distributed counting essentially no

01:11:06,400 --> 01:11:11,440
not no this is already a higher level

01:11:08,880 --> 01:11:14,480
use case this is not the atomic use case

01:11:11,440 --> 01:11:15,679
the atomic use case is something pushes

01:11:14,480 --> 01:11:18,960
to a thing

01:11:15,679 --> 01:11:21,440
and that thing can present as either

01:11:18,960 --> 01:11:22,400
a thing to be scraped like slash metrics

01:11:21,440 --> 01:11:25,360
or whatever

01:11:22,400 --> 01:11:26,000
or it can use prometheus remote right so

01:11:25,360 --> 01:11:30,800
it's a push

01:11:26,000 --> 01:11:33,920
exporter yeah push exporter that's it

01:11:30,800 --> 01:11:35,760
okay so we would for example be calling

01:11:33,920 --> 01:11:38,159
the push gateway we would be calling it

01:11:35,760 --> 01:11:38,800
for example openmetrics push export we

01:11:38,159 --> 01:11:41,280
would

01:11:38,800 --> 01:11:42,800
rename or we would suggest to the mqtt

01:11:41,280 --> 01:11:45,840
people that they rename it

01:11:42,800 --> 01:11:47,840
to mqtt push exporter

01:11:45,840 --> 01:11:49,520
no this is a working name you just ask

01:11:47,840 --> 01:11:55,520
that it is saying okay

01:11:49,520 --> 01:11:57,280
okay okay working name push exporter

01:11:55,520 --> 01:11:59,120
so we have that one use case down should

01:11:57,280 --> 01:12:01,280
we have a break or not i'm fine either

01:11:59,120 --> 01:12:01,280
way

01:12:01,440 --> 01:12:05,600
produce the kurfa consensus first

01:12:06,840 --> 01:12:09,840
for

01:12:10,159 --> 01:12:13,360
as written that's way too complex i

01:12:11,760 --> 01:12:16,640
think we are not near

01:12:13,360 --> 01:12:16,640
that that thing

01:12:17,600 --> 01:12:23,840
i mean we can have an info thing

01:13:02,840 --> 01:13:05,840
oh

01:13:06,400 --> 01:13:11,440
okay as an info push exporter is the

01:13:09,199 --> 01:13:13,760
working title for the atomic concept of

01:13:11,440 --> 01:13:14,960
something that's gets open metrics mgtt

01:13:13,760 --> 01:13:18,480
over tlp

01:13:14,960 --> 01:13:22,320
etc pushed at it and presents it as

01:13:18,480 --> 01:13:25,600
slash metrics and or sends through

01:13:22,320 --> 01:13:25,600
prometheus remote right

01:13:27,199 --> 01:13:32,880
deliberately not as a consensus but now

01:13:28,960 --> 01:13:35,920
we have the name for that thing

01:13:32,880 --> 01:13:46,480
for aggregation maybe

01:13:35,920 --> 01:13:49,840
robert has has input

01:13:46,480 --> 01:13:52,080
mr frotto he said no in the chat

01:13:49,840 --> 01:13:52,080
oh

01:13:54,159 --> 01:13:59,120
he should he has good quotes but okay he

01:13:56,560 --> 01:14:02,080
said he said also sorry

01:13:59,120 --> 01:14:02,080
for having good phones

01:14:05,600 --> 01:14:08,239
okay um

01:14:09,120 --> 01:14:17,840
i think we will uh

01:14:12,800 --> 01:14:17,840
i think at least for oh

01:14:19,199 --> 01:14:25,840
i'm half sneezing sorry i think we will

01:14:22,400 --> 01:14:27,520
uh end up with a concept of aggregation

01:14:25,840 --> 01:14:28,000
because we already have it in the push

01:14:27,520 --> 01:14:30,960
gateway

01:14:28,000 --> 01:14:32,000
as of today we are already able to

01:14:30,960 --> 01:14:34,480
aggregate

01:14:32,000 --> 01:14:36,239
different things different things

01:14:34,480 --> 01:14:40,080
pushing at the push gateway

01:14:36,239 --> 01:14:43,440
and then presenting onwards do we

01:14:40,080 --> 01:14:45,760
no no we don't

01:14:43,440 --> 01:14:46,800
push gateway refuses to be an

01:14:45,760 --> 01:14:49,600
aggregation

01:14:46,800 --> 01:14:50,080
for even aggregator but i was able to

01:14:49,600 --> 01:14:52,960
push

01:14:50,080 --> 01:14:53,760
into different name spaces yeah but it

01:14:52,960 --> 01:14:57,280
doesn't

01:14:53,760 --> 01:14:58,800
it does not

01:14:57,280 --> 01:15:00,719
i mean what's what's written right now

01:14:58,800 --> 01:15:04,080
in the the info

01:15:00,719 --> 01:15:06,320
is kind of good gateway right just that

01:15:04,080 --> 01:15:09,360
push gateway just receives

01:15:06,320 --> 01:15:11,280
old prometheus format for now

01:15:09,360 --> 01:15:12,960
yes but that is intended that that this

01:15:11,280 --> 01:15:14,960
new name also covers the

01:15:12,960 --> 01:15:17,040
at least underlying the case of the push

01:15:14,960 --> 01:15:17,520
gateway so we so we have something which

01:15:17,040 --> 01:15:20,080
is

01:15:17,520 --> 01:15:20,640
hopefully maybe less confusing tomorrow

01:15:20,080 --> 01:15:23,440
i just

01:15:20,640 --> 01:15:24,080
think that enumerating the different use

01:15:23,440 --> 01:15:27,280
cases

01:15:24,080 --> 01:15:28,000
would actually help clean up the

01:15:27,280 --> 01:15:29,600
confusion

01:15:28,000 --> 01:15:31,520
because i think a lot of the confusion

01:15:29,600 --> 01:15:34,080
is that we have about

01:15:31,520 --> 01:15:35,920
two to five different use cases

01:15:34,080 --> 01:15:40,239
conflated

01:15:35,920 --> 01:15:42,960
and i'm not saying that there

01:15:40,239 --> 01:15:45,199
i mean there could be a binary that

01:15:42,960 --> 01:15:48,560
caters for all those use cases but

01:15:45,199 --> 01:15:51,360
um i think it's still valuable to

01:15:48,560 --> 01:15:52,640
describe them all cleanly separated and

01:15:51,360 --> 01:15:54,560
then

01:15:52,640 --> 01:15:56,480
have an informed decision if the same

01:15:54,560 --> 01:15:57,440
mechanism should cater for all of them

01:15:56,480 --> 01:16:01,199
or if it should be

01:15:57,440 --> 01:16:02,640
different by noise and like even with

01:16:01,199 --> 01:16:05,520
the push gateway you see

01:16:02,640 --> 01:16:06,000
all those problems with it that um there

01:16:05,520 --> 01:16:08,080
are different

01:16:06,000 --> 01:16:09,440
semantics even for this you push a

01:16:08,080 --> 01:16:14,159
metric and present it

01:16:09,440 --> 01:16:14,159
by a matrix like yeah

01:16:16,239 --> 01:16:19,920
for example do i want it to time out or

01:16:18,320 --> 01:16:21,679
not that's already difficult

01:16:19,920 --> 01:16:23,280
but but just ignoring those problems and

01:16:21,679 --> 01:16:26,560
not actually

01:16:23,280 --> 01:16:29,920
yeah no doing anything is also

01:16:26,560 --> 01:16:32,960
hard so that's why we should have like

01:16:29,920 --> 01:16:36,000
focus projects for that

01:16:32,960 --> 01:16:37,679
yeah but i'm just saying it um we should

01:16:36,000 --> 01:16:39,600
actually

01:16:37,679 --> 01:16:42,239
not expect the problem to become simpler

01:16:39,600 --> 01:16:43,840
by conflating them all into the same

01:16:42,239 --> 01:16:46,239
from the beginning i think we should

01:16:43,840 --> 01:16:48,159
actually define clearly

01:16:46,239 --> 01:16:50,159
what the different use cases are and

01:16:48,159 --> 01:16:50,800
then what the ideal solution for each of

01:16:50,159 --> 01:16:53,120
them is

01:16:50,800 --> 01:16:53,840
and then have an informed decision if we

01:16:53,120 --> 01:16:56,880
create like

01:16:53,840 --> 01:16:58,640
two or three different solutions for it

01:16:56,880 --> 01:17:02,239
or one solution that happens to

01:16:58,640 --> 01:17:06,080
solve them all yeah yeah i agree

01:17:02,239 --> 01:17:06,800
um but that points to a design doc

01:17:06,080 --> 01:17:10,000
because i think

01:17:06,800 --> 01:17:12,640
that explodes the context uh the scope

01:17:10,000 --> 01:17:14,560
of this call

01:17:12,640 --> 01:17:16,800
i mean we can try and hammer out the

01:17:14,560 --> 01:17:19,280
first few initial use cases but i think

01:17:16,800 --> 01:17:20,239
that's that's firmly in design document

01:17:19,280 --> 01:17:22,080
territory

01:17:20,239 --> 01:17:24,400
yeah totally but like even the consensus

01:17:22,080 --> 01:17:26,560
all this bush exporter is the working

01:17:24,400 --> 01:17:28,640
title of the

01:17:26,560 --> 01:17:30,000
i have no idea of atomic concept but

01:17:28,640 --> 01:17:31,679
something that gets

01:17:30,000 --> 01:17:34,080
but it doesn't block if it's like one

01:17:31,679 --> 01:17:35,520
thing one binary or 10 binaries like i

01:17:34,080 --> 01:17:37,679
don't think this is really

01:17:35,520 --> 01:17:39,040
strict naming here i don't know like

01:17:37,679 --> 01:17:41,520
it's it's really

01:17:39,040 --> 01:17:42,560
the really the incentive that we want to

01:17:41,520 --> 01:17:46,000
kind of

01:17:42,560 --> 01:17:50,159
approach it right and to be honest i

01:17:46,000 --> 01:17:52,239
don't want to uh be

01:17:50,159 --> 01:17:55,120
david's advocate but i'm pretty sure we

01:17:52,239 --> 01:17:58,080
need to have a consensus why we cannot

01:17:55,120 --> 01:17:59,520
leave that to open telemetry collector

01:17:58,080 --> 01:18:00,960
we should have like an open message

01:17:59,520 --> 01:18:03,360
statement why not

01:18:00,960 --> 01:18:05,840
because uh you know i have like in in

01:18:03,360 --> 01:18:07,520
red hat as well these discussions why

01:18:05,840 --> 01:18:12,239
why we cannot just use open telemetry

01:18:07,520 --> 01:18:14,159
collector right

01:18:12,239 --> 01:18:16,320
and the one one statement is that well

01:18:14,159 --> 01:18:17,199
there is no push api which is compatible

01:18:16,320 --> 01:18:20,800
with

01:18:17,199 --> 01:18:24,159
uh with uh promotes instrumentation

01:18:20,800 --> 01:18:25,520
right and i think uh but you know we we

01:18:24,159 --> 01:18:26,000
might want to add that to the open

01:18:25,520 --> 01:18:28,960
telemetry

01:18:26,000 --> 01:18:32,080
collector if that solves sure it will be

01:18:28,960 --> 01:18:35,440
not optimized it will be

01:18:32,080 --> 01:18:37,280
not easy to i don't know use for users

01:18:35,440 --> 01:18:41,840
and so on so i think this is the message

01:18:37,280 --> 01:18:41,840
we want to show but

01:18:41,920 --> 01:18:46,400
let's make it public frederick is not in

01:18:45,040 --> 01:18:49,280
the call anymore um

01:18:46,400 --> 01:18:50,000
we we had similar discussions uh some

01:18:49,280 --> 01:18:53,040
time ago

01:18:50,000 --> 01:18:54,640
um in particular in the context of

01:18:53,040 --> 01:18:58,400
kubernetes

01:18:54,640 --> 01:19:00,400
where with cube state metrics and such

01:18:58,400 --> 01:19:01,679
they need to have the highest

01:19:00,400 --> 01:19:05,120
performance path

01:19:01,679 --> 01:19:08,080
which they can possibly get and

01:19:05,120 --> 01:19:09,600
the clear intention from from sick

01:19:08,080 --> 01:19:12,800
instrumentation was to

01:19:09,600 --> 01:19:15,840
to not diverge from this

01:19:12,800 --> 01:19:17,600
from this high uh performance path of

01:19:15,840 --> 01:19:18,719
course they have something which works

01:19:17,600 --> 01:19:22,640
and they don't intend

01:19:18,719 --> 01:19:24,560
to to make it more complex and or slower

01:19:22,640 --> 01:19:28,159
because they have they have a defined

01:19:24,560 --> 01:19:30,800
interface which which they want to have

01:19:28,159 --> 01:19:31,679
along the same lines i do think that

01:19:30,800 --> 01:19:34,640
having

01:19:31,679 --> 01:19:36,320
this highly optimized path which ignores

01:19:34,640 --> 01:19:39,920
all the extensibility

01:19:36,320 --> 01:19:40,880
on purpose is a good thing in and as of

01:19:39,920 --> 01:19:42,960
itself

01:19:40,880 --> 01:19:44,159
in particular course it's it's largely

01:19:42,960 --> 01:19:47,280
based on code which

01:19:44,159 --> 01:19:51,840
which has been stable and and

01:19:47,280 --> 01:19:51,840
proven at scale for years now

01:19:53,840 --> 01:19:57,199
if slash when open telemetry is as a

01:19:55,760 --> 01:19:59,920
point where they have

01:19:57,199 --> 01:20:01,280
the full performance and reliability and

01:19:59,920 --> 01:20:05,040
resilience and everything

01:20:01,280 --> 01:20:07,440
and and can act as a drop in replacement

01:20:05,040 --> 01:20:08,159
i actually think it would make sense to

01:20:07,440 --> 01:20:11,040
uh

01:20:08,159 --> 01:20:12,719
to talk about just dropping what we have

01:20:11,040 --> 01:20:14,320
and using it

01:20:12,719 --> 01:20:16,639
and using the open telemetry stuff

01:20:14,320 --> 01:20:19,120
instead um

01:20:16,639 --> 01:20:19,679
it's currently not in in a state where

01:20:19,120 --> 01:20:22,480
we could

01:20:19,679 --> 01:20:23,120
consider doing this um but if that is

01:20:22,480 --> 01:20:24,800
the case

01:20:23,120 --> 01:20:27,360
sometime in the future it's absolutely

01:20:24,800 --> 01:20:31,199
something which we should be considering

01:20:27,360 --> 01:20:34,000
um but like it seems

01:20:31,199 --> 01:20:35,120
very premature in particular given that

01:20:34,000 --> 01:20:38,159
kubernetes is

01:20:35,120 --> 01:20:39,679
the thing within cncf and the cloud

01:20:38,159 --> 01:20:42,560
native space

01:20:39,679 --> 01:20:43,440
aligning with the intention of of how

01:20:42,560 --> 01:20:45,840
kubernetes

01:20:43,440 --> 01:20:47,120
intends to be used and intends to be

01:20:45,840 --> 01:20:50,239
observed

01:20:47,120 --> 01:20:53,280
uh seems borderline

01:20:50,239 --> 01:21:01,840
i agree richie i think let's let's let's

01:20:53,280 --> 01:21:01,840
mention that here

01:21:08,880 --> 01:21:11,920
but that's also detached from the thing

01:21:10,480 --> 01:21:15,440
which we were discussing

01:21:11,920 --> 01:21:19,280
so should we find a consensus on

01:21:15,440 --> 01:21:21,920
creating a design document to um

01:21:19,280 --> 01:21:21,920
to basically

01:21:22,800 --> 01:21:26,400
rethink slash improve

01:21:26,639 --> 01:21:31,840
push slash serverless slash mqtt slash

01:21:30,800 --> 01:21:34,560
iot

01:21:31,840 --> 01:21:34,560
use cases

01:21:35,840 --> 01:21:39,040
yes okay

01:21:39,600 --> 01:21:44,320
okay we will

01:21:42,639 --> 01:21:46,239
the design dock is titled everything you

01:21:44,320 --> 01:21:48,639
always wanted to know about pushing but

01:21:46,239 --> 01:21:50,480
you were afraid to ask

01:21:48,639 --> 01:21:52,080
if you volunteered to write it you can

01:21:50,480 --> 01:21:53,679
name it as such i would love to

01:21:52,080 --> 01:21:55,679
volunteer but i just have

01:21:53,679 --> 01:21:58,480
way too many things that i would like to

01:21:55,679 --> 01:22:01,520
write in my limited life

01:21:58,480 --> 01:22:11,840
we can we can write a book and sell it

01:22:01,520 --> 01:22:11,840
this is so large topic yeah

01:22:17,199 --> 01:22:21,199
consensus we will create a design

01:22:18,800 --> 01:22:24,320
document to improve the pushing

01:22:21,199 --> 01:22:26,719
serverless mqtt iot use cases in the

01:22:24,320 --> 01:22:30,560
prometheus ecosystem

01:22:26,719 --> 01:22:30,560
or to directly address

01:22:36,840 --> 01:22:41,520
okay uh sorry once more consensus we

01:22:40,159 --> 01:22:43,040
will create a design document to

01:22:41,520 --> 01:22:45,679
directly address serverless

01:22:43,040 --> 01:22:47,840
mqtt slash iot use cases in the promises

01:22:45,679 --> 01:22:50,239
ecosystem

01:22:47,840 --> 01:22:51,600
all agreed anyone disagreeing sure i

01:22:50,239 --> 01:22:54,880
agree

01:22:51,600 --> 01:22:54,880
is that an agreement ben

01:22:55,440 --> 01:22:58,639
yes okay

01:23:00,080 --> 01:23:04,560
okay still around the apis uh looks like

01:23:03,360 --> 01:23:08,159
we're leaving this

01:23:04,560 --> 01:23:11,440
in the kind of

01:23:08,159 --> 01:23:14,239
so far as i said like push gateway api

01:23:11,440 --> 01:23:17,679
is really strict to the simply narrow

01:23:14,239 --> 01:23:20,719
use case of usage of of the push gateway

01:23:17,679 --> 01:23:22,719
the open metrics api openmetric push we

01:23:20,719 --> 01:23:24,719
leave it as something that kind of

01:23:22,719 --> 01:23:27,760
exists but only in dreams

01:23:24,719 --> 01:23:31,120
and remote write is

01:23:27,760 --> 01:23:32,880
replication only do you want to block

01:23:31,120 --> 01:23:35,199
the push gateway to also accept the

01:23:32,880 --> 01:23:38,880
point matrix if the content type

01:23:35,199 --> 01:23:41,280
of the push metric is open matrix

01:23:38,880 --> 01:23:42,159
no i don't want to questions do we want

01:23:41,280 --> 01:23:44,239
to

01:23:42,159 --> 01:23:46,960
do i would i will not close the door

01:23:44,239 --> 01:23:48,000
because open metrics has some advantages

01:23:46,960 --> 01:23:51,280
like for example

01:23:48,000 --> 01:23:52,560
the eof at the end of the of the matrix

01:23:51,280 --> 01:23:54,000
is something that would be useful for

01:23:52,560 --> 01:23:55,600
the push gateway

01:23:54,000 --> 01:23:59,360
so maybe do you want to have a consensus

01:23:55,600 --> 01:24:00,639
to add this to the push gateway api

01:23:59,360 --> 01:24:03,920
and by the way it's not only push

01:24:00,639 --> 01:24:07,199
gateway api it's also a client goal link

01:24:03,920 --> 01:24:09,920
right i mean

01:24:07,199 --> 01:24:11,360
by client golden you mean the push

01:24:09,920 --> 01:24:13,120
feature

01:24:11,360 --> 01:24:14,880
i mean that every client library has

01:24:13,120 --> 01:24:18,320
that right or more or less

01:24:14,880 --> 01:24:22,000
postpartum which is i mean the

01:24:18,320 --> 01:24:23,520
if you if strictly speaking the

01:24:22,000 --> 01:24:25,040
if you push to the push gateway there's

01:24:23,520 --> 01:24:26,960
the assumption that everything you ever

01:24:25,040 --> 01:24:28,800
push to the push gateway is consistent

01:24:26,960 --> 01:24:30,960
with each other

01:24:28,800 --> 01:24:32,000
which is something that remote write

01:24:30,960 --> 01:24:34,639
doesn't need

01:24:32,000 --> 01:24:35,040
as a requirement right as remote right

01:24:34,639 --> 01:24:37,199
just

01:24:35,040 --> 01:24:39,679
saves it as it comes in well the push

01:24:37,199 --> 01:24:40,880
gateway all has to assemble it into a

01:24:39,679 --> 01:24:43,679
consistent

01:24:40,880 --> 01:24:44,159
slash matrix exposition which would be

01:24:43,679 --> 01:24:47,600
different

01:24:44,159 --> 01:24:49,360
if a push gateway would expose all those

01:24:47,600 --> 01:24:52,080
things separately like being

01:24:49,360 --> 01:24:53,280
multiple push gateways in one so these

01:24:52,080 --> 01:24:54,400
are all things i mean the current

01:24:53,280 --> 01:24:56,320
so-called push carrier

01:24:54,400 --> 01:24:59,199
is just like super tailored to what the

01:24:56,320 --> 01:25:02,480
push gateway is doing

01:24:59,199 --> 01:25:04,000
yeah that's why i think it's

01:25:02,480 --> 01:25:12,400
probably not a good role model for more

01:25:04,000 --> 01:25:13,920
generic use cases

01:25:12,400 --> 01:25:15,520
yeah and i mean i think there it is a

01:25:13,920 --> 01:25:17,440
different use case right

01:25:15,520 --> 01:25:19,679
here is here is the current value of a

01:25:17,440 --> 01:25:22,400
counter please remember it for me

01:25:19,679 --> 01:25:23,840
it's just a different use case then add

01:25:22,400 --> 01:25:27,040
free to whatever

01:25:23,840 --> 01:25:29,040
we had before

01:25:27,040 --> 01:25:31,120
which is different from here is what i

01:25:29,040 --> 01:25:33,760
would expose via slash metrics but i

01:25:31,120 --> 01:25:36,880
can't so please expose it for me

01:25:33,760 --> 01:25:38,239
exactly yeah which is what many people

01:25:36,880 --> 01:25:42,400
use the push gateway for

01:25:38,239 --> 01:25:42,400
and then they run into issues

01:25:45,679 --> 01:25:49,360
oh yeah looks like this requires design

01:25:48,159 --> 01:25:51,120
dock and

01:25:49,360 --> 01:25:52,639
different use cases requires maybe

01:25:51,120 --> 01:25:56,080
different

01:25:52,639 --> 01:26:09,840
semantics api so okay that's a cool

01:25:56,080 --> 01:26:09,840
statement as well

01:26:09,920 --> 01:26:15,280
and just as a note on the like this is

01:26:12,880 --> 01:26:17,760
distributed counters

01:26:15,280 --> 01:26:19,440
um i honestly believe for many

01:26:17,760 --> 01:26:24,239
monitoring use cases people are

01:26:19,440 --> 01:26:26,239
fine with fuzzy distributed contouriness

01:26:24,239 --> 01:26:27,440
um because they've been using like a lot

01:26:26,239 --> 01:26:29,040
of people have been using the stats the

01:26:27,440 --> 01:26:31,600
exporter for a long time and they seem

01:26:29,040 --> 01:26:33,040
to be okay with that

01:26:31,600 --> 01:26:37,840
and yes sometimes things get double

01:26:33,040 --> 01:26:37,840
counted or under counted but

01:26:40,320 --> 01:26:51,840
yeah cool that's all i wanted to say

01:26:58,880 --> 01:27:04,480
break do we have another topic

01:27:02,080 --> 01:27:05,920
we have plenty i was just waiting if if

01:27:04,480 --> 01:27:08,400
people are continuing

01:27:05,920 --> 01:27:10,000
to discuss i wasn't paying attention for

01:27:08,400 --> 01:27:13,280
the last two or three minutes because i

01:27:10,000 --> 01:27:14,719
was cleaning up the i mean we have 27

01:27:13,280 --> 01:27:17,040
minutes left perfect

01:27:14,719 --> 01:27:19,120
rush rush that's the wrong word first we

01:27:17,040 --> 01:27:20,159
just do it without a break because if we

01:27:19,120 --> 01:27:21,679
now take a

01:27:20,159 --> 01:27:23,280
eight minute break we have only 20

01:27:21,679 --> 01:27:28,719
minutes left

01:27:23,280 --> 01:27:33,520
yes depends on you all

01:27:28,719 --> 01:27:37,040
we can go on for me

01:27:33,520 --> 01:27:40,239
i think i had something with five votes

01:27:37,040 --> 01:27:40,239
but i can't find it

01:27:42,239 --> 01:27:48,880
no that's

01:27:47,199 --> 01:27:51,280
i'm looking for something which can be

01:27:48,880 --> 01:27:54,400
quick uh package directory

01:27:51,280 --> 01:27:56,239
might be quick the other thing which

01:27:54,400 --> 01:27:58,239
might also be super quick is to

01:27:56,239 --> 01:27:59,679
move remote right out of the

01:27:58,239 --> 01:28:03,280
experimental area

01:27:59,679 --> 01:28:06,480
as we already have pretty much done and

01:28:03,280 --> 01:28:09,120
dried let's let's just try this for

01:28:06,480 --> 01:28:09,120
something quick

01:28:10,159 --> 01:28:15,840
julian you have the floor

01:28:17,520 --> 01:28:20,800
or maybe i just summarize the the

01:28:19,920 --> 01:28:24,719
proposal by

01:28:20,800 --> 01:28:27,440
by julian was to to move prometheus

01:28:24,719 --> 01:28:31,600
remote right out of experimental

01:28:27,440 --> 01:28:33,520
and i think as we already have

01:28:31,600 --> 01:28:34,719
the spec written we can just have

01:28:33,520 --> 01:28:36,639
consensus that

01:28:34,719 --> 01:28:40,239
i mean maybe we can also just move it to

01:28:36,639 --> 01:28:40,239
stale to be honest it's probably

01:28:41,360 --> 01:28:47,120
i'm super not familiar with remote right

01:28:44,400 --> 01:28:48,080
does it have any kind of versioning so

01:28:47,120 --> 01:28:50,400
that we

01:28:48,080 --> 01:28:52,560
like can do a v2 or is this something

01:28:50,400 --> 01:28:57,120
like that i think one thing

01:28:52,560 --> 01:28:59,760
that we should leave open is how do we

01:28:57,120 --> 01:29:00,560
radically change it in the future there

01:28:59,760 --> 01:29:04,080
is a

01:29:00,560 --> 01:29:06,960
a specification um and that is

01:29:04,080 --> 01:29:08,800
i i think it hasn't seen the final stamp

01:29:06,960 --> 01:29:10,320
of approval but once that's the case it

01:29:08,800 --> 01:29:13,600
will be 1.0

01:29:10,320 --> 01:29:15,440
and then it has its versioning so it's a

01:29:13,600 --> 01:29:18,159
little bit cyclic but

01:29:15,440 --> 01:29:20,000
whatever whatever this version header

01:29:18,159 --> 01:29:20,400
like we send a version header oh that's

01:29:20,000 --> 01:29:22,560
what's

01:29:20,400 --> 01:29:25,360
on every request that says i think it's

01:29:22,560 --> 01:29:29,280
like zero one or zero one zero right now

01:29:25,360 --> 01:29:31,679
whatever it is we we can change that

01:29:29,280 --> 01:29:31,679
awesome

01:29:33,520 --> 01:29:39,120
the question is like how will the

01:29:36,639 --> 01:29:41,520
coming feature effect dislike the

01:29:39,120 --> 01:29:44,159
transactions that kind of things

01:29:41,520 --> 01:29:46,639
are still is still being worked on by

01:29:44,159 --> 01:29:48,320
archicad so i'm wondering like

01:29:46,639 --> 01:29:50,560
if that could still have an impact

01:29:48,320 --> 01:29:52,480
before we go 1.0

01:29:50,560 --> 01:29:53,600
and if that should be part of one on

01:29:52,480 --> 01:29:56,639
zero that that

01:29:53,600 --> 01:29:59,840
that stuff is transactional

01:29:56,639 --> 01:30:02,239
i think that we have had this for so

01:29:59,840 --> 01:30:03,920
long that we cannot make substantial

01:30:02,239 --> 01:30:06,000
changes to it

01:30:03,920 --> 01:30:08,960
without bumping the version number as

01:30:06,000 --> 01:30:11,360
such i consider it stable already

01:30:08,960 --> 01:30:13,199
and it's just a case of documenting what

01:30:11,360 --> 01:30:16,000
we do

01:30:13,199 --> 01:30:16,560
yeah i agree with richie here like

01:30:16,000 --> 01:30:18,960
whatever

01:30:16,560 --> 01:30:19,760
work harkishan and i think he was he was

01:30:18,960 --> 01:30:22,639
on this call

01:30:19,760 --> 01:30:23,679
is he still here is very late for him so

01:30:22,639 --> 01:30:25,600
i guess he dropped

01:30:23,679 --> 01:30:26,719
he might he might have dropped um yeah

01:30:25,600 --> 01:30:29,120
like the work he does

01:30:26,719 --> 01:30:30,320
will have to be in the framework of it

01:30:29,120 --> 01:30:33,120
will not break

01:30:30,320 --> 01:30:36,320
current consumers of remote right so i i

01:30:33,120 --> 01:30:39,120
consider it stable as is

01:30:36,320 --> 01:30:40,320
so let's do the quick thing consensus we

01:30:39,120 --> 01:30:42,239
will

01:30:40,320 --> 01:30:43,440
i mean that's the implicit consensus

01:30:42,239 --> 01:30:47,040
already anyway but

01:30:43,440 --> 01:30:48,800
um but we should make it explicit like i

01:30:47,040 --> 01:30:51,360
mean i agree that we can't

01:30:48,800 --> 01:30:53,199
like it's we can't realistically change

01:30:51,360 --> 01:30:54,239
it anymore so we may as well make it

01:30:53,199 --> 01:30:57,280
official

01:30:54,239 --> 01:30:58,800
yeah and we can change it by

01:30:57,280 --> 01:31:01,760
incrementing the version number

01:30:58,800 --> 01:31:02,000
and dealing with all of that when we

01:31:01,760 --> 01:31:04,880
need

01:31:02,000 --> 01:31:06,560
to which we would already have to do now

01:31:04,880 --> 01:31:07,840
because we would be breaking the world

01:31:06,560 --> 01:31:10,320
if we were to change it

01:31:07,840 --> 01:31:12,960
without changing the version number

01:31:10,320 --> 01:31:12,960
there's actually

01:31:14,960 --> 01:31:18,560
there's actually one sub-topic um should

01:31:17,280 --> 01:31:21,600
we officially

01:31:18,560 --> 01:31:22,960
bless the name prw instead of prometheus

01:31:21,600 --> 01:31:26,159
remote right

01:31:22,960 --> 01:31:28,560
because it's a super long name

01:31:26,159 --> 01:31:30,639
but we don't use it it's something which

01:31:28,560 --> 01:31:32,239
open telemetry came up and

01:31:30,639 --> 01:31:35,520
up with and it's a lot easier to write

01:31:32,239 --> 01:31:35,520
than prometheus remote right

01:31:35,679 --> 01:31:39,679
i would suggest we just adopted similar

01:31:38,400 --> 01:31:45,840
how we write om

01:31:39,679 --> 01:31:45,840
and just use it as open metrics

01:31:50,080 --> 01:31:53,360
lots of thinky faces okay so let's just

01:31:52,480 --> 01:31:55,120
move on

01:31:53,360 --> 01:31:58,320
consensus we will release what we do

01:31:55,120 --> 01:32:01,679
today as 1.0 and build on top on top of

01:31:58,320 --> 01:32:03,920
it once 1.00 stable

01:32:01,679 --> 01:32:03,920
good

01:32:05,520 --> 01:32:08,800
what's the implication of once 1.0 is

01:32:07,600 --> 01:32:11,840
stable

01:32:08,800 --> 01:32:13,920
like what what does i

01:32:11,840 --> 01:32:15,679
things which are not in today can then

01:32:13,920 --> 01:32:18,320
be added

01:32:15,679 --> 01:32:19,199
or changed because we have a version

01:32:18,320 --> 01:32:22,560
which

01:32:19,199 --> 01:32:25,120
users which rely on the current behavior

01:32:22,560 --> 01:32:25,679
can rely on not going away of course it

01:32:25,120 --> 01:32:28,639
is a

01:32:25,679 --> 01:32:29,679
standard and at least for for prometheus

01:32:28,639 --> 01:32:32,560
2.x

01:32:29,679 --> 01:32:33,840
we will obviously commit to to retaining

01:32:32,560 --> 01:32:38,080
it and not breaking it

01:32:33,840 --> 01:32:40,400
because it is stable i have one concern

01:32:38,080 --> 01:32:42,600
i think that some people are currently

01:32:40,400 --> 01:32:44,960
and i think it's levi working on

01:32:42,600 --> 01:32:47,520
reconciliating the exemplars and the

01:32:44,960 --> 01:32:49,840
remote right into one protobuf

01:32:47,520 --> 01:32:51,199
i wonder how that will affect if we say

01:32:49,840 --> 01:32:53,040
it's stable now or

01:32:51,199 --> 01:32:54,960
it will affect that so do we also mark

01:32:53,040 --> 01:32:58,239
the exemplars in remote right

01:32:54,960 --> 01:33:00,960
stable that is

01:32:58,239 --> 01:33:01,360
well metadata is specifically called out

01:33:00,960 --> 01:33:04,719
as

01:33:01,360 --> 01:33:06,639
experimental within

01:33:04,719 --> 01:33:08,639
like at another level than our remote

01:33:06,639 --> 01:33:12,719
right guarantee being

01:33:08,639 --> 01:33:14,960
being stable so like this would be

01:33:12,719 --> 01:33:16,080
yes it is doubly experimental so this

01:33:14,960 --> 01:33:19,120
would be overall

01:33:16,080 --> 01:33:20,800
stable but i think like metadata and

01:33:19,120 --> 01:33:21,520
when exemplars are in there things like

01:33:20,800 --> 01:33:23,760
that

01:33:21,520 --> 01:33:25,920
those are still explicitly said to be

01:33:23,760 --> 01:33:28,480
experimental

01:33:25,920 --> 01:33:29,199
because i think the remote specification

01:33:28,480 --> 01:33:33,040
was written

01:33:29,199 --> 01:33:35,040
before we had exemplar so we might

01:33:33,040 --> 01:33:36,800
oh no so it's already there but we

01:33:35,040 --> 01:33:37,520
should just check that we don't call

01:33:36,800 --> 01:33:39,520
that

01:33:37,520 --> 01:33:41,679
very stable if you plan to still move

01:33:39,520 --> 01:33:44,560
around

01:33:41,679 --> 01:33:46,800
yeah yeah when we review the changes for

01:33:44,560 --> 01:33:50,000
this let's make sure that

01:33:46,800 --> 01:33:53,520
that metadata and exemplars

01:33:50,000 --> 01:33:53,520
are specifically excluded

01:33:56,480 --> 01:34:00,159
should we add this to the consensus or

01:33:58,239 --> 01:34:05,840
just to the meeting notes

01:34:00,159 --> 01:34:07,679
ah just meeting notes is fine by me yes

01:34:05,840 --> 01:34:09,920
i hear chris is volunteering for writing

01:34:07,679 --> 01:34:13,360
this while i search for the next topic

01:34:09,920 --> 01:34:15,520
yeah um

01:34:13,360 --> 01:34:17,280
yearn scalar static arithmetic for

01:34:15,520 --> 01:34:20,320
timestamps and durations or is this too

01:34:17,280 --> 01:34:20,320
long it's probably too long

01:34:22,560 --> 01:34:26,639
thinking which one was that i'm still

01:34:26,239 --> 01:34:28,639
looking

01:34:26,639 --> 01:34:30,719
uh taylor static arithmetic for

01:34:28,639 --> 01:34:32,239
timestamps and durations i think that's

01:34:30,719 --> 01:34:34,080
too long

01:34:32,239 --> 01:34:35,440
yeah i mean that is exactly what we

01:34:34,080 --> 01:34:38,239
already alluded to

01:34:35,440 --> 01:34:39,840
in the that's kind of step two of i

01:34:38,239 --> 01:34:40,400
tried to break this into separate things

01:34:39,840 --> 01:34:42,880
right

01:34:40,400 --> 01:34:44,639
the question it it has four votes should

01:34:42,880 --> 01:34:45,280
i bump this or should i choose something

01:34:44,639 --> 01:34:49,040
else

01:34:45,280 --> 01:34:49,040
do something else okay

01:34:49,360 --> 01:34:52,480
this is marked green

01:34:56,639 --> 01:35:05,600
what about discussing proposal process

01:35:00,719 --> 01:35:05,600
proposal pro yes

01:35:11,760 --> 01:35:16,400
that's not ah there it has two votes i

01:35:15,520 --> 01:35:19,679
mean we

01:35:16,400 --> 01:35:22,800
i don't object i don't care

01:35:19,679 --> 01:35:24,639
it should be quick okay and you're sorry

01:35:22,800 --> 01:35:26,840
we need a proposal process to discuss

01:35:24,639 --> 01:35:28,320
your proposal to install a proposal

01:35:26,840 --> 01:35:31,199
forces

01:35:28,320 --> 01:35:31,199
yes i agree

01:35:31,760 --> 01:35:39,199
uh julian can you add this to your uh

01:35:34,880 --> 01:35:41,199
table no just kidding yeah i mean

01:35:39,199 --> 01:35:42,639
sorry for like doubling this i i

01:35:41,199 --> 01:35:46,080
probably was not aware

01:35:42,639 --> 01:35:51,119
of like previous conversation we had so

01:35:46,080 --> 01:35:53,360
um so the kind of the reason why i i

01:35:51,119 --> 01:35:55,040
added this topic again is the because we

01:35:53,360 --> 01:35:57,280
were as a team um

01:35:55,040 --> 01:35:58,320
trying to streamline the different

01:35:57,280 --> 01:36:01,600
processes

01:35:58,320 --> 01:36:04,320
we even created like open handbook

01:36:01,600 --> 01:36:05,440
uh similar to gitlab what gitlab was

01:36:04,320 --> 01:36:07,679
used used to having

01:36:05,440 --> 01:36:08,639
so we have like even a small website

01:36:07,679 --> 01:36:10,159
we'll be adding more

01:36:08,639 --> 01:36:11,760
kind of team processes which are very

01:36:10,159 --> 01:36:14,400
open

01:36:11,760 --> 01:36:15,119
from red hat monitoring kind of teams

01:36:14,400 --> 01:36:16,960
anyway

01:36:15,119 --> 01:36:18,320
this part of this is like a proposal

01:36:16,960 --> 01:36:20,000
process which you can

01:36:18,320 --> 01:36:21,679
see in the mini and like it's really

01:36:20,000 --> 01:36:23,760
following the same proposal process as

01:36:21,679 --> 01:36:26,480
communities have as tunnels have

01:36:23,760 --> 01:36:27,600
and the the principles of that is that

01:36:26,480 --> 01:36:31,760
you really write

01:36:27,600 --> 01:36:34,639
everything as a code even proposal ideas

01:36:31,760 --> 01:36:36,320
and so you add a markup file which has a

01:36:34,639 --> 01:36:37,280
consistent template that everyone

01:36:36,320 --> 01:36:39,040
expects

01:36:37,280 --> 01:36:41,199
so even if someone is new to even

01:36:39,040 --> 01:36:42,320
proposal writing they know what fields

01:36:41,199 --> 01:36:44,320
to add

01:36:42,320 --> 01:36:46,000
we do the pull requests we know which

01:36:44,320 --> 01:36:48,400
things are in progress because

01:36:46,000 --> 01:36:50,480
prerequisites was not merged either as a

01:36:48,400 --> 01:36:52,960
rejected or approved

01:36:50,480 --> 01:36:54,480
the reason why we merge rejected things

01:36:52,960 --> 01:36:56,800
instead of just rejecting pr

01:36:54,480 --> 01:36:59,280
is because it's so easy then to follow

01:36:56,800 --> 01:37:00,560
up why such a decision was the rejected

01:36:59,280 --> 01:37:03,040
for the time being

01:37:00,560 --> 01:37:04,159
and then it's easy to maybe modify it

01:37:03,040 --> 01:37:06,560
and accept if

01:37:04,159 --> 01:37:07,520
new idea came or new information came to

01:37:06,560 --> 01:37:09,679
that right

01:37:07,520 --> 01:37:11,440
and why it's important especially

01:37:09,679 --> 01:37:14,320
prometheus is that i believe

01:37:11,440 --> 01:37:14,639
all those google docs lying around they

01:37:14,320 --> 01:37:16,480
are

01:37:14,639 --> 01:37:17,760
super hard to discover and i think the

01:37:16,480 --> 01:37:19,840
initiative that you

01:37:17,760 --> 01:37:22,400
you pointed out with this documentation

01:37:19,840 --> 01:37:25,280
page julian is is very good

01:37:22,400 --> 01:37:25,920
but who will maintain that like things

01:37:25,280 --> 01:37:29,760
in google

01:37:25,920 --> 01:37:32,080
change changes they change links they

01:37:29,760 --> 01:37:33,199
and it's so easy to modify this google

01:37:32,080 --> 01:37:35,679
docs so it's never

01:37:33,199 --> 01:37:36,320
finished right you you can always add

01:37:35,679 --> 01:37:38,480
stuff

01:37:36,320 --> 01:37:39,520
someone can suggest stuff it's not

01:37:38,480 --> 01:37:42,560
versioned in

01:37:39,520 --> 01:37:44,400
in such straight way as pr so that's why

01:37:42,560 --> 01:37:47,040
i would propose to stick to

01:37:44,400 --> 01:37:48,719
markdown file maybe in the docs project

01:37:47,040 --> 01:37:49,520
because i think bjorn has a good point

01:37:48,719 --> 01:37:52,000
that

01:37:49,520 --> 01:37:53,520
um it is not strictly to the one prompt

01:37:52,000 --> 01:37:55,679
use repository um

01:37:53,520 --> 01:37:56,560
it should be maybe formulated in a in a

01:37:55,679 --> 01:37:59,520
website so

01:37:56,560 --> 01:37:59,520
what do you think about that

01:38:00,639 --> 01:38:07,600
what is the threshold for

01:38:03,679 --> 01:38:07,600
like requiring a proposal

01:38:09,199 --> 01:38:13,600
uh so requiring proposal that's a good

01:38:12,080 --> 01:38:16,320
question so

01:38:13,600 --> 01:38:17,040
uh let's define that i even in this kind

01:38:16,320 --> 01:38:20,000
of small

01:38:17,040 --> 01:38:21,199
request there is some flow chart that

01:38:20,000 --> 01:38:23,840
talks about this stuff and

01:38:21,199 --> 01:38:25,520
i think even information so what i

01:38:23,840 --> 01:38:27,040
gathered what we gathered with with

01:38:25,520 --> 01:38:30,480
previous like thanos proposal

01:38:27,040 --> 01:38:33,520
and team proposal is this kind of idea

01:38:30,480 --> 01:38:36,480
of asking yourself few questions

01:38:33,520 --> 01:38:38,400
uh literally is the idea hard to explain

01:38:36,480 --> 01:38:40,719
in 10 minutes

01:38:38,400 --> 01:38:42,840
are there many major unknowns would the

01:38:40,719 --> 01:38:44,800
project benefit from documenting the

01:38:42,840 --> 01:38:46,000
rationales and does it touch key

01:38:44,800 --> 01:38:48,080
elements like api

01:38:46,000 --> 01:38:49,040
those for me was but we can negotiate

01:38:48,080 --> 01:38:50,880
what

01:38:49,040 --> 01:38:52,960
you know if those are okay crit to

01:38:50,880 --> 01:38:56,320
criteria or not

01:38:52,960 --> 01:38:58,400
um i have one concern that i would not

01:38:56,320 --> 01:38:59,119
want that to be on the documentation

01:38:58,400 --> 01:39:01,840
website

01:38:59,119 --> 01:39:04,000
i have the case of kafka when i look for

01:39:01,840 --> 01:39:04,800
some information about kafka and then i

01:39:04,000 --> 01:39:06,800
stumble

01:39:04,800 --> 01:39:08,239
upon a proposal directly and i think

01:39:06,800 --> 01:39:10,480
that's a documentation but

01:39:08,239 --> 01:39:12,000
maybe the proposal is rejected it does

01:39:10,480 --> 01:39:14,080
not match the reality so

01:39:12,000 --> 01:39:15,520
this should i think not really belong in

01:39:14,080 --> 01:39:17,440
the documentation

01:39:15,520 --> 01:39:19,600
because it might confuse users if the

01:39:17,440 --> 01:39:21,199
proposal is not yet implemented or if

01:39:19,600 --> 01:39:22,639
it's implemented differently so

01:39:21,199 --> 01:39:24,800
we could even have a dedicated

01:39:22,639 --> 01:39:25,280
repository with just marked on files for

01:39:24,800 --> 01:39:26,639
this

01:39:25,280 --> 01:39:28,719
but i would not mix that with the

01:39:26,639 --> 01:39:30,239
documentation that's my that was my

01:39:28,719 --> 01:39:33,600
point i think bjorn you had

01:39:30,239 --> 01:39:34,480
different opinion the the point of

01:39:33,600 --> 01:39:36,719
viewing was that

01:39:34,480 --> 01:39:38,840
it is not the primitive server specific

01:39:36,719 --> 01:39:40,639
thing so it should not be the promoted

01:39:38,840 --> 01:39:42,719
server

01:39:40,639 --> 01:39:44,400
yeah i personally i don't feel strongly

01:39:42,719 --> 01:39:47,040
about markdown versus

01:39:44,400 --> 01:39:47,040
google docs

01:39:47,840 --> 01:39:52,400
often google docs seem like great better

01:39:50,159 --> 01:39:52,719
for collaboratively editing something

01:39:52,400 --> 01:39:54,400
but

01:39:52,719 --> 01:39:56,880
in the end once the discussion gets more

01:39:54,400 --> 01:39:59,840
complex you have those endless threads

01:39:56,880 --> 01:40:01,040
on the margin of the page which i don't

01:39:59,840 --> 01:40:02,480
know perhaps it would be better than a

01:40:01,040 --> 01:40:05,840
pull request

01:40:02,480 --> 01:40:08,159
so i i am i proposed markdown

01:40:05,840 --> 01:40:09,920
proposals for loki at some point and we

01:40:08,159 --> 01:40:12,320
tried it for a bit

01:40:09,920 --> 01:40:13,920
but we found that discussions on github

01:40:12,320 --> 01:40:16,639
especially for proposals what's much

01:40:13,920 --> 01:40:18,719
harder to have than on google docs

01:40:16,639 --> 01:40:20,960
um i think i agree like the discover

01:40:18,719 --> 01:40:22,480
abilities is hard but i think

01:40:20,960 --> 01:40:26,000
that could be served by some kind of

01:40:22,480 --> 01:40:26,000
index in markdown instead

01:40:26,320 --> 01:40:31,360
who will maintain this index

01:40:29,600 --> 01:40:33,440
i mean we started maintaining it and

01:40:31,360 --> 01:40:36,080
julian bjorn and myself

01:40:33,440 --> 01:40:37,679
have have created i mean they have

01:40:36,080 --> 01:40:40,800
created it i have merged it but

01:40:37,679 --> 01:40:41,440
um like i i do think that we all agree

01:40:40,800 --> 01:40:44,880
that there

01:40:41,440 --> 01:40:48,159
is is an issue with discoverability i

01:40:44,880 --> 01:40:51,119
agree with what robert said 100 and and

01:40:48,159 --> 01:40:53,520
wanted to say the same in like in

01:40:51,119 --> 01:40:55,040
several different contexts i have tried

01:40:53,520 --> 01:40:58,239
several different ways of

01:40:55,040 --> 01:41:00,719
tracking information and discussion

01:40:58,239 --> 01:41:01,679
and the thing which is least bad in my

01:41:00,719 --> 01:41:06,800
experience

01:41:01,679 --> 01:41:06,800
is google docs for better oververse

01:41:06,880 --> 01:41:11,119
once documents get a certain state of

01:41:10,239 --> 01:41:12,880
stableness

01:41:11,119 --> 01:41:14,880
i do think it would make sense for

01:41:12,880 --> 01:41:17,280
example to copy it over and

01:41:14,880 --> 01:41:19,119
deprecate commenting on the thing make

01:41:17,280 --> 01:41:22,320
it read only

01:41:19,119 --> 01:41:23,199
uh to to actively prevent any changes to

01:41:22,320 --> 01:41:26,480
the thing

01:41:23,199 --> 01:41:27,040
still happening and and put put a marker

01:41:26,480 --> 01:41:29,280
at the top

01:41:27,040 --> 01:41:30,880
and say hey uh please look into this

01:41:29,280 --> 01:41:32,639
markdown file and such i

01:41:30,880 --> 01:41:34,239
that's something which i think is good

01:41:32,639 --> 01:41:36,239
and for example for openmetrics and

01:41:34,239 --> 01:41:38,800
permit is remote right

01:41:36,239 --> 01:41:39,440
and such once the thing is stable it it

01:41:38,800 --> 01:41:42,960
becomes

01:41:39,440 --> 01:41:45,600
marked down anyway because that is um

01:41:42,960 --> 01:41:47,520
that is a lot easier to to retain long

01:41:45,600 --> 01:41:49,280
term

01:41:47,520 --> 01:41:51,840
that's one of the aspects the other

01:41:49,280 --> 01:41:56,080
aspect is

01:41:51,840 --> 01:42:00,000
processes are super quick to introduce

01:41:56,080 --> 01:42:00,639
and processes are in the moment often

01:42:00,000 --> 01:42:04,560
feel

01:42:00,639 --> 01:42:06,480
good to introduce but the inherent risk

01:42:04,560 --> 01:42:09,280
of processes is you almost

01:42:06,480 --> 01:42:11,199
never undo or change processes unless

01:42:09,280 --> 01:42:13,040
you have substantial momentum and

01:42:11,199 --> 01:42:16,400
substantial pain

01:42:13,040 --> 01:42:19,520
you lose significant agility

01:42:16,400 --> 01:42:22,800
if you have a fixed process

01:42:19,520 --> 01:42:23,840
and i would argue that we follow large

01:42:22,800 --> 01:42:25,920
parts of

01:42:23,840 --> 01:42:27,199
of what is written in in what i read in

01:42:25,920 --> 01:42:29,920
those few minutes

01:42:27,199 --> 01:42:31,360
already and if we have details on how to

01:42:29,920 --> 01:42:34,080
improve it and i mean

01:42:31,360 --> 01:42:35,840
this call is is is proof that we have

01:42:34,080 --> 01:42:39,119
improved lots of things

01:42:35,840 --> 01:42:42,320
uh and like with the index for for

01:42:39,119 --> 01:42:44,320
design documents and such

01:42:42,320 --> 01:42:46,639
but having something which is mandated

01:42:44,320 --> 01:42:49,679
in particular if if i have more than one

01:42:46,639 --> 01:42:51,040
and a more than one single a4 page of

01:42:49,679 --> 01:42:54,639
printed out paper

01:42:51,040 --> 01:42:56,320
for the process to even make a proposal

01:42:54,639 --> 01:42:58,159
if i want to propose something to

01:42:56,320 --> 01:43:00,960
prometheus team and i see that thing i'm

01:42:58,159 --> 01:43:03,199
closing the tab and doing something else

01:43:00,960 --> 01:43:05,440
because it's way too complicated and the

01:43:03,199 --> 01:43:08,239
the threshold and barrier to entry is

01:43:05,440 --> 01:43:10,239
way too high for me to follow all of

01:43:08,239 --> 01:43:12,560
that stuff

01:43:10,239 --> 01:43:16,000
or people don't follow it and we we have

01:43:12,560 --> 01:43:16,000
a process in name only

01:43:16,080 --> 01:43:19,600
based on experience i would strongly

01:43:18,639 --> 01:43:22,159
recommend

01:43:19,600 --> 01:43:22,800
against adopting a process just so

01:43:22,159 --> 01:43:26,159
without

01:43:22,800 --> 01:43:28,880
massive consideration and trial period

01:43:26,159 --> 01:43:30,320
because we will in my experience not be

01:43:28,880 --> 01:43:34,080
undoing this process

01:43:30,320 --> 01:43:37,600
if we accept it we will not be

01:43:34,080 --> 01:43:38,560
done that also matches my experience

01:43:37,600 --> 01:43:41,920
with the

01:43:38,560 --> 01:43:44,239
kubernetes process

01:43:41,920 --> 01:43:46,239
basically once that was mandated we

01:43:44,239 --> 01:43:49,360
stopped contributing to kubernetes

01:43:46,239 --> 01:43:51,760
because we don't have the time

01:43:49,360 --> 01:43:53,360
to go through that and the worst thing

01:43:51,760 --> 01:43:56,560
in that was

01:43:53,360 --> 01:43:58,960
we had a like reasonable pr

01:43:56,560 --> 01:44:00,400
open where core kubernetes people had

01:43:58,960 --> 01:44:02,320
already said yeah this is reasonable we

01:44:00,400 --> 01:44:06,080
just need to get it into shape

01:44:02,320 --> 01:44:08,639
it was stuck in an endless review rebase

01:44:06,080 --> 01:44:10,480
review rebase loop and then it was like

01:44:08,639 --> 01:44:12,960
oh no we need a cap for this now

01:44:10,480 --> 01:44:14,239
because process and at that point we

01:44:12,960 --> 01:44:16,639
just closed the pr

01:44:14,239 --> 01:44:17,760
because that's never like as not

01:44:16,639 --> 01:44:19,679
full-time

01:44:17,760 --> 01:44:20,960
kubernetes people working on kubernetes

01:44:19,679 --> 01:44:23,440
full-time

01:44:20,960 --> 01:44:25,280
we can't and i would like to avoid that

01:44:23,440 --> 01:44:28,400
for prometheus and i don't think

01:44:25,280 --> 01:44:31,840
prometheus as a project is

01:44:28,400 --> 01:44:35,360
big enough to make that necessary so i

01:44:31,840 --> 01:44:36,400
i'm totally on board with streamlining

01:44:35,360 --> 01:44:39,600
or or

01:44:36,400 --> 01:44:41,520
better organizing the design documents

01:44:39,600 --> 01:44:44,800
that we do

01:44:41,520 --> 01:44:47,360
where we do them now but i would

01:44:44,800 --> 01:44:48,880
one i would like to grant like where we

01:44:47,360 --> 01:44:51,520
already have

01:44:48,880 --> 01:44:52,480
something on the way i would like to not

01:44:51,520 --> 01:44:55,760
go back and

01:44:52,480 --> 01:44:58,560
require a design document after the fact

01:44:55,760 --> 01:45:00,080
and i would like to keep it as optional

01:44:58,560 --> 01:45:02,480
as possible

01:45:00,080 --> 01:45:03,280
right so maybe just a few points like i

01:45:02,480 --> 01:45:06,239
strongly

01:45:03,280 --> 01:45:07,840
i'm i'm strong opinion to make sure

01:45:06,239 --> 01:45:10,880
there is a markdown

01:45:07,840 --> 01:45:12,480
uh process at the end of the discussion

01:45:10,880 --> 01:45:13,360
i'm i would be happy to propose for

01:45:12,480 --> 01:45:16,000
example

01:45:13,360 --> 01:45:17,600
hey you can use whatever documentation

01:45:16,000 --> 01:45:19,360
process you want but if you want

01:45:17,600 --> 01:45:20,480
something get approved and have final

01:45:19,360 --> 01:45:22,320
consensus

01:45:20,480 --> 01:45:24,320
well it has to be on the markdown and

01:45:22,320 --> 01:45:25,679
has to be proposed to this pr to this

01:45:24,320 --> 01:45:27,920
place with this pr

01:45:25,679 --> 01:45:29,199
for documentation and tracking

01:45:27,920 --> 01:45:31,440
capabilities and

01:45:29,199 --> 01:45:33,600
i'm i have strong opinion because it

01:45:31,440 --> 01:45:36,639
worked for thomas so well it it

01:45:33,600 --> 01:45:40,400
it just like saw so many good uh com

01:45:36,639 --> 01:45:42,000
you know um feedback that you know

01:45:40,400 --> 01:45:43,840
people could actually follow past

01:45:42,000 --> 01:45:44,480
decision could implement something which

01:45:43,840 --> 01:45:46,800
was

01:45:44,480 --> 01:45:49,040
nicely available in uh in in tano's

01:45:46,800 --> 01:45:52,239
website we hold those internals website

01:45:49,040 --> 01:45:54,960
it was enormous help right and i think

01:45:52,239 --> 01:45:57,520
it's very orthogonal to the criteria

01:45:54,960 --> 01:45:58,080
of when we expect the this proposal to

01:45:57,520 --> 01:46:00,639
be done

01:45:58,080 --> 01:46:02,719
and hey you created already the pr like

01:46:00,639 --> 01:46:05,280
already team understand that

01:46:02,719 --> 01:46:07,199
it should be no uh no point in creating

01:46:05,280 --> 01:46:09,040
the the special proposal and i think

01:46:07,199 --> 01:46:09,520
that we could make this autonomous thing

01:46:09,040 --> 01:46:12,320
but

01:46:09,520 --> 01:46:13,360
maybe we can have consensus to at least

01:46:12,320 --> 01:46:17,199
snapshot

01:46:13,360 --> 01:46:19,840
the and have the consensus on the

01:46:17,199 --> 01:46:20,560
on the proposal by merging this pr in

01:46:19,840 --> 01:46:23,199
the markdown

01:46:20,560 --> 01:46:23,199
style right

01:46:23,760 --> 01:46:31,040
that atomic part makes

01:46:26,880 --> 01:46:33,360
sense but what is for example

01:46:31,040 --> 01:46:34,400
if like it makes sense in the general

01:46:33,360 --> 01:46:37,760
case but if you

01:46:34,400 --> 01:46:39,840
mandate this as a process what happens

01:46:37,760 --> 01:46:41,119
if you have an exploratory design dock

01:46:39,840 --> 01:46:44,480
where you deliberately

01:46:41,119 --> 01:46:45,920
implement two different approaches or or

01:46:44,480 --> 01:46:48,719
you have that one thing

01:46:45,920 --> 01:46:50,719
which you're playing around with um

01:46:48,719 --> 01:46:52,560
you're losing that feedback loop because

01:46:50,719 --> 01:46:55,679
you you need all of a sudden you need to

01:46:52,560 --> 01:46:58,239
either specify all those things

01:46:55,679 --> 01:46:59,840
or you'd leave it super hand wavy and

01:46:58,239 --> 01:47:01,920
and undefined

01:46:59,840 --> 01:47:03,600
uh because else you're self constricting

01:47:01,920 --> 01:47:04,320
too much that's something which arguably

01:47:03,600 --> 01:47:06,159
we had in

01:47:04,320 --> 01:47:07,679
in past death summits that we that we

01:47:06,159 --> 01:47:11,520
had consensus

01:47:07,679 --> 01:47:13,119
which are too restrictive and

01:47:11,520 --> 01:47:14,719
we had to actually follow the complete

01:47:13,119 --> 01:47:15,280
process we had to wait for our next dev

01:47:14,719 --> 01:47:17,040
summit

01:47:15,280 --> 01:47:18,400
we had to discuss it we had to have a

01:47:17,040 --> 01:47:20,400
new call for consensus

01:47:18,400 --> 01:47:22,800
to change the thing where we already had

01:47:20,400 --> 01:47:24,480
more or less informal consensus

01:47:22,800 --> 01:47:26,800
at least that's that's what it often

01:47:24,480 --> 01:47:27,920
felt like but we had to go through the

01:47:26,800 --> 01:47:29,840
complete shebang

01:47:27,920 --> 01:47:32,960
of course there was a process and we had

01:47:29,840 --> 01:47:32,960
to follow that process

01:47:34,719 --> 01:47:40,080
just to finish the point um

01:47:37,760 --> 01:47:41,520
i i think it makes sense to merge if

01:47:40,080 --> 01:47:45,040
it's stable or

01:47:41,520 --> 01:47:48,000
stale i don't think it makes sense to

01:47:45,040 --> 01:47:49,199
to mandate to merge it once you're

01:47:48,000 --> 01:47:51,199
working on it

01:47:49,199 --> 01:47:53,360
because it can still be a living

01:47:51,199 --> 01:47:55,440
document which you're changing as you're

01:47:53,360 --> 01:47:58,480
updating as you're finding new

01:47:55,440 --> 01:48:00,320
new data whatever

01:47:58,480 --> 01:48:02,400
so what i do not understand is that

01:48:00,320 --> 01:48:04,880
bartek is concerned that we

01:48:02,400 --> 01:48:05,840
maintain a list of google docs but then

01:48:04,880 --> 01:48:08,560
he wants

01:48:05,840 --> 01:48:10,239
to maintain moving google docs into

01:48:08,560 --> 01:48:11,600
markdown when they are done

01:48:10,239 --> 01:48:14,800
and that's a lot more work than

01:48:11,600 --> 01:48:16,159
maintaining a list of google docs

01:48:14,800 --> 01:48:18,560
yeah i don't want to maintain any list

01:48:16,159 --> 01:48:21,040
of google docs i what i care

01:48:18,560 --> 01:48:22,639
is the documentation snapshot in

01:48:21,040 --> 01:48:24,560
markdown

01:48:22,639 --> 01:48:27,280
everything else less float the

01:48:24,560 --> 01:48:29,920
discussion like we have discussions over

01:48:27,280 --> 01:48:33,280
prs over issues of our mailing list

01:48:29,920 --> 01:48:34,719
why you want to track that

01:48:33,280 --> 01:48:37,119
when you want to track move it to

01:48:34,719 --> 01:48:38,719
markdown

01:48:37,119 --> 01:48:41,600
so the question is when do you want to

01:48:38,719 --> 01:48:43,600
trick it i i think that is is maybe the

01:48:41,600 --> 01:48:45,600
the question we are actually discussing

01:48:43,600 --> 01:48:46,960
my opinion is we track it like we

01:48:45,600 --> 01:48:50,000
permanently track it

01:48:46,960 --> 01:48:53,840
when it is stable or when it is stale

01:48:50,000 --> 01:48:55,679
yeah i agree um small things which we

01:48:53,840 --> 01:48:56,480
can do for example currently we are

01:48:55,679 --> 01:48:59,040
writing

01:48:56,480 --> 01:49:00,080
our meeting notes in in google docs

01:48:59,040 --> 01:49:02,560
format

01:49:00,080 --> 01:49:04,719
and speaking with microphone ahead on

01:49:02,560 --> 01:49:06,400
for blog posts we also use google docs

01:49:04,719 --> 01:49:07,440
because that's just how collaboration is

01:49:06,400 --> 01:49:10,960
quickest

01:49:07,440 --> 01:49:14,400
but we write in markdown syntax

01:49:10,960 --> 01:49:15,280
into google docs at least most of us do

01:49:14,400 --> 01:49:18,480
i think

01:49:15,280 --> 01:49:20,719
um and then we just copy it over into

01:49:18,480 --> 01:49:21,920
into git um or into a microphone file

01:49:20,719 --> 01:49:23,599
make the pr blah blah blah

01:49:21,920 --> 01:49:25,199
blah so that's for example one of the

01:49:23,599 --> 01:49:28,320
things which we can which we can play

01:49:25,199 --> 01:49:30,800
with that we try and write

01:49:28,320 --> 01:49:31,520
design documents and such in markdown

01:49:30,800 --> 01:49:35,440
syntax

01:49:31,520 --> 01:49:37,679
in a google doc which makes it easier to

01:49:35,440 --> 01:49:39,920
to to snapshot we can also in this

01:49:37,679 --> 01:49:42,880
overview for example

01:49:39,920 --> 01:49:44,239
have a new section where we say moved to

01:49:42,880 --> 01:49:47,040
to get

01:49:44,239 --> 01:49:48,800
and then we we just move that thing over

01:49:47,040 --> 01:49:51,599
once we have marked it as not

01:49:48,800 --> 01:49:52,080
to be edited anymore these kinds of

01:49:51,599 --> 01:49:54,800
things

01:49:52,080 --> 01:49:56,639
we can just play with without the

01:49:54,800 --> 01:49:58,800
overhead of a process

01:49:56,639 --> 01:50:00,960
which we would need to undo or formally

01:49:58,800 --> 01:50:04,480
change

01:50:00,960 --> 01:50:06,560
sure um i would still for example my

01:50:04,480 --> 01:50:09,040
personal proposal i would always do the

01:50:06,560 --> 01:50:10,000
markdown if there is such projects so i

01:50:09,040 --> 01:50:13,360
would not restrict

01:50:10,000 --> 01:50:16,239
any any form of uh proposal

01:50:13,360 --> 01:50:16,560
um i would restrict the approval process

01:50:16,239 --> 01:50:18,000
right

01:50:16,560 --> 01:50:20,159
well because there has to be process

01:50:18,000 --> 01:50:22,239
because how how will tell people how to

01:50:20,159 --> 01:50:24,880
approve something how to

01:50:22,239 --> 01:50:25,280
um you know make consensus on some idea

01:50:24,880 --> 01:50:27,360
and

01:50:25,280 --> 01:50:29,040
i'm talking about specific cases where

01:50:27,360 --> 01:50:32,000
with ganesh we did this

01:50:29,040 --> 01:50:33,360
post processing proposal it was kind of

01:50:32,000 --> 01:50:36,080
approved kind of not

01:50:33,360 --> 01:50:38,000
and at the end it was totally rejected

01:50:36,080 --> 01:50:39,360
because we have some further ideas it

01:50:38,000 --> 01:50:41,119
was evolving

01:50:39,360 --> 01:50:42,639
but it would be nice to evolve it in the

01:50:41,119 --> 01:50:45,360
iterations and

01:50:42,639 --> 01:50:46,400
in marked iterations it was so confusing

01:50:45,360 --> 01:50:49,199
for everyone and

01:50:46,400 --> 01:50:49,760
literally it was failing um it was

01:50:49,199 --> 01:50:52,320
really

01:50:49,760 --> 01:50:54,880
bad mentorship experience as well

01:50:52,320 --> 01:50:54,880
because of that

01:50:54,960 --> 01:50:59,040
i mean the what i'm hearing is what we

01:50:57,760 --> 01:51:02,320
want is that in the end

01:50:59,040 --> 01:51:03,440
it's like the the end product is marked

01:51:02,320 --> 01:51:06,880
down

01:51:03,440 --> 01:51:07,520
and the final discussion and approval

01:51:06,880 --> 01:51:10,880
happens

01:51:07,520 --> 01:51:13,040
around a pr that brings in that markdown

01:51:10,880 --> 01:51:14,080
how the text gets to be there in the

01:51:13,040 --> 01:51:15,840
first place

01:51:14,080 --> 01:51:17,199
i think we can leave that token totally

01:51:15,840 --> 01:51:19,360
open and

01:51:17,199 --> 01:51:20,480
it might be that someone comes around

01:51:19,360 --> 01:51:23,199
and says

01:51:20,480 --> 01:51:24,000
i have a fully fledged the fully written

01:51:23,199 --> 01:51:26,800
proposal

01:51:24,000 --> 01:51:28,639
here is my pr and let's discuss this

01:51:26,800 --> 01:51:29,679
that may have come from a google doc or

01:51:28,639 --> 01:51:32,159
not

01:51:29,679 --> 01:51:34,719
um that may have come from like

01:51:32,159 --> 01:51:36,719
beautiful handwriting it may be

01:51:34,719 --> 01:51:38,960
like people can also open work in

01:51:36,719 --> 01:51:40,400
progress prs and say i want to work on

01:51:38,960 --> 01:51:43,599
this now and then

01:51:40,400 --> 01:51:45,679
start pushing into that i don't think we

01:51:43,599 --> 01:51:46,960
need to restrict that at least not right

01:51:45,679 --> 01:51:48,800
now

01:51:46,960 --> 01:51:50,239
my concern is that we will have the same

01:51:48,800 --> 01:51:52,400
discussions twice

01:51:50,239 --> 01:51:54,400
once in the google documents and one in

01:51:52,400 --> 01:51:56,400
the markdown commands

01:51:54,400 --> 01:51:58,239
well i will tell you why because in

01:51:56,400 --> 01:51:58,719
google docs if you add the comment and

01:51:58,239 --> 01:52:00,480
you just

01:51:58,719 --> 01:52:02,960
approve it you have thousands of the

01:52:00,480 --> 01:52:04,800
same discussions because you just

01:52:02,960 --> 01:52:05,679
approve the comment and versus in

01:52:04,800 --> 01:52:08,719
grouping pr

01:52:05,679 --> 01:52:11,119
it's much more discoverable right that's

01:52:08,719 --> 01:52:13,520
my point

01:52:11,119 --> 01:52:14,480
more discoverable for you for you

01:52:13,520 --> 01:52:16,880
personally

01:52:14,480 --> 01:52:18,320
i don't i don't think anyone go through

01:52:16,880 --> 01:52:21,040
the past comments

01:52:18,320 --> 01:52:22,159
on google i mean i don't always go

01:52:21,040 --> 01:52:25,760
through the past comments

01:52:22,159 --> 01:52:26,880
on github either true but then you can

01:52:25,760 --> 01:52:28,480
link at least to those

01:52:26,880 --> 01:52:30,719
and stuff like that yeah i think maybe

01:52:28,480 --> 01:52:32,400
it's opinionated maybe yeah

01:52:30,719 --> 01:52:34,000
i think i would not restrict discussion

01:52:32,400 --> 01:52:36,719
process i would restrict

01:52:34,000 --> 01:52:37,119
approval process but now you're actually

01:52:36,719 --> 01:52:38,880
making

01:52:37,119 --> 01:52:40,560
good arguments against the process

01:52:38,880 --> 01:52:42,480
because if we do not have a process

01:52:40,560 --> 01:52:44,639
no one is stopping you from having your

01:52:42,480 --> 01:52:47,119
design document in markdown

01:52:44,639 --> 01:52:48,960
living in a pr or in your own repository

01:52:47,119 --> 01:52:51,280
or somewhere else

01:52:48,960 --> 01:52:52,400
and and writing it and maintaining it in

01:52:51,280 --> 01:52:55,920
whatever form you

01:52:52,400 --> 01:52:58,239
you choose and also it gives us

01:52:55,920 --> 01:53:00,239
the ability to to try yet again because

01:52:58,239 --> 01:53:03,920
as a reminder we used to do this

01:53:00,239 --> 01:53:06,960
um to to trial discussions in in prs

01:53:03,920 --> 01:53:08,880
i also know that we already have uh it's

01:53:06,960 --> 01:53:10,880
not a list of google docs it's a

01:53:08,880 --> 01:53:14,880
list of design docs and there is one in

01:53:10,880 --> 01:53:14,880
markdown in direct manager repository

01:53:17,040 --> 01:53:20,639
but i mean biotech no one is stopping

01:53:19,040 --> 01:53:23,119
you from

01:53:20,639 --> 01:53:25,199
from doing it as such i i honestly think

01:53:23,119 --> 01:53:27,440
you will get less feedback and less

01:53:25,199 --> 01:53:28,560
quickly and and less detailed and less

01:53:27,440 --> 01:53:32,239
specific

01:53:28,560 --> 01:53:33,760
but we can just try it i mean if memory

01:53:32,239 --> 01:53:34,639
serves correctly beyond correct me if

01:53:33,760 --> 01:53:38,400
i'm wrong

01:53:34,639 --> 01:53:39,599
um we used to do this in in the early

01:53:38,400 --> 01:53:42,000
days in

01:53:39,599 --> 01:53:44,159
i don't know when yeah it still linked

01:53:42,000 --> 01:53:46,480
the the one for the securing the traffic

01:53:44,159 --> 01:53:50,000
in that manager lives in the

01:53:46,480 --> 01:53:50,960
repository in mardan that's by far not

01:53:50,000 --> 01:53:53,679
the only one we had

01:53:50,960 --> 01:53:54,719
we had several ones i i do remember that

01:53:53,679 --> 01:53:58,480
we had the

01:53:54,719 --> 01:54:01,679
2.0 or 2.x storage discussion and such

01:53:58,480 --> 01:54:04,080
also all in in in github

01:54:01,679 --> 01:54:04,800
and it was super confusing and that is

01:54:04,080 --> 01:54:07,440
what

01:54:04,800 --> 01:54:08,400
what actually led us to adopting the

01:54:07,440 --> 01:54:12,080
google docs

01:54:08,400 --> 01:54:14,159
approach if i remember correctly again

01:54:12,080 --> 01:54:16,400
byron correct me if i'm wrong

01:54:14,159 --> 01:54:18,239
the 2.x storage discussion was in a

01:54:16,400 --> 01:54:21,040
secret design note that fabian only

01:54:18,239 --> 01:54:24,960
shared with brian

01:54:21,040 --> 01:54:26,480
i i mean the one on github but

01:54:24,960 --> 01:54:28,880
or matthias you can also correct me

01:54:26,480 --> 01:54:32,239
sorry for it i have no idea actually

01:54:28,880 --> 01:54:33,520
okay if if memory serves correctly we

01:54:32,239 --> 01:54:35,679
had precisely this

01:54:33,520 --> 01:54:37,440
problem and that's precisely why we

01:54:35,679 --> 01:54:40,560
changed to google docs

01:54:37,440 --> 01:54:42,560
to to have more dynamic discussions um

01:54:40,560 --> 01:54:45,360
just as a point of order we are at time

01:54:42,560 --> 01:54:47,199
um we can also like if everyone wants to

01:54:45,360 --> 01:54:48,840
continue we can also continue i'm fine

01:54:47,199 --> 01:54:53,040
either way

01:54:48,840 --> 01:54:55,920
um yeah i mean i honestly don't remember

01:54:53,040 --> 01:54:56,400
any conscious decision to to do design

01:54:55,920 --> 01:54:59,520
docs

01:54:56,400 --> 01:55:02,840
in google doc because the discussion on

01:54:59,520 --> 01:55:04,639
pull requests in markdown was too

01:55:02,840 --> 01:55:07,440
complicated

01:55:04,639 --> 01:55:10,719
i i would so i would propose that we

01:55:07,440 --> 01:55:13,280
don't introduce a policy at this time

01:55:10,719 --> 01:55:15,440
because we are not sure enough what that

01:55:13,280 --> 01:55:19,599
policy exactly should be

01:55:15,440 --> 01:55:22,080
um i propose that

01:55:19,599 --> 01:55:23,199
especially for discussions that bar tech

01:55:22,080 --> 01:55:25,599
leads

01:55:23,199 --> 01:55:26,719
we try having the discussions in

01:55:25,599 --> 01:55:28,960
different places

01:55:26,719 --> 01:55:31,520
we are not limited to using google docs

01:55:28,960 --> 01:55:36,400
by any policy either

01:55:31,520 --> 01:55:38,719
and then with that additional experience

01:55:36,400 --> 01:55:39,679
like we we were talking a lot about what

01:55:38,719 --> 01:55:41,360
we used to do

01:55:39,679 --> 01:55:43,360
and trying to remember what it used to

01:55:41,360 --> 01:55:44,000
be like but let's try what it is like

01:55:43,360 --> 01:55:46,560
now

01:55:44,000 --> 01:55:48,000
also github has evolved right github has

01:55:46,560 --> 01:55:50,960
a lot more

01:55:48,000 --> 01:55:51,920
help in discussing something around a pr

01:55:50,960 --> 01:55:55,040
now

01:55:51,920 --> 01:55:57,280
um maybe this turns out great and

01:55:55,040 --> 01:55:59,280
everybody loves it and nobody wants to

01:55:57,280 --> 01:56:03,599
make google docs anymore

01:55:59,280 --> 01:56:05,920
um maybe we find some intermediate space

01:56:03,599 --> 01:56:05,920
um

01:56:08,159 --> 01:56:12,880
playing level there were more changes to

01:56:11,599 --> 01:56:16,239
github and how to

01:56:12,880 --> 01:56:18,880
how to interface with

01:56:16,239 --> 01:56:19,520
information stored in github then there

01:56:18,880 --> 01:56:22,480
was

01:56:19,520 --> 01:56:24,080
uh any change to to the urls of google

01:56:22,480 --> 01:56:26,560
docs

01:56:24,080 --> 01:56:28,800
so now google all the google docs urls

01:56:26,560 --> 01:56:30,239
are changing they just sent an email

01:56:28,800 --> 01:56:31,280
today that they're breaking all the

01:56:30,239 --> 01:56:34,000
share links

01:56:31,280 --> 01:56:34,000
uh yes

01:56:35,760 --> 01:56:38,800
they don't actually tell you what they

01:56:37,360 --> 01:56:40,239
are doing they just send you a

01:56:38,800 --> 01:56:43,119
superficial email that

01:56:40,239 --> 01:56:43,119
you must read this

01:56:44,560 --> 01:56:48,800
looks like there is this proposal of

01:56:46,960 --> 01:56:51,119
just trying things out and not making

01:56:48,800 --> 01:56:56,080
any policy but doesn't mean that we can

01:56:51,119 --> 01:56:59,119
try to create the proposal repo

01:56:56,080 --> 01:57:00,239
for for experimentation purposes i think

01:56:59,119 --> 01:57:03,520
that's fine yeah

01:57:00,239 --> 01:57:04,960
all right i i think we should

01:57:03,520 --> 01:57:07,440
need the consensus for this because

01:57:04,960 --> 01:57:10,480
particular just created and done

01:57:07,440 --> 01:57:12,560
um i think we generally

01:57:10,480 --> 01:57:14,560
uh want to do consensus if we start new

01:57:12,560 --> 01:57:16,560
things in the prometheus org but

01:57:14,560 --> 01:57:18,159
uh one thing i would ask is that we make

01:57:16,560 --> 01:57:19,440
it clear just in the readme for that

01:57:18,159 --> 01:57:22,000
repository

01:57:19,440 --> 01:57:23,520
that this is not an exhaustive list of

01:57:22,000 --> 01:57:26,639
all proposals

01:57:23,520 --> 01:57:28,000
the exhaustive list is the the

01:57:26,639 --> 01:57:31,280
documentation page

01:57:28,000 --> 01:57:32,639
that we have that links all them

01:57:31,280 --> 01:57:34,800
um just so that people don't get

01:57:32,639 --> 01:57:36,320
confused and think oh but why isn't it

01:57:34,800 --> 01:57:39,760
not here

01:57:36,320 --> 01:57:43,040
until we make it or we move the

01:57:39,760 --> 01:57:44,719
list that we have into that repository

01:57:43,040 --> 01:57:47,199
why don't we just make this part of the

01:57:44,719 --> 01:57:49,360
docs repository

01:57:47,199 --> 01:57:51,280
uh because of the confusion between what

01:57:49,360 --> 01:57:53,440
is designed and what is documentation

01:57:51,280 --> 01:57:54,560
and i think that confusion has two parts

01:57:53,440 --> 01:57:57,599
one is

01:57:54,560 --> 01:58:01,040
you find something but it's not actually

01:57:57,599 --> 01:58:02,719
exactly as the implementation is now or

01:58:01,040 --> 01:58:04,800
the other side which i also find

01:58:02,719 --> 01:58:05,599
extremely confu extremely annoying

01:58:04,800 --> 01:58:07,440
sometimes

01:58:05,599 --> 01:58:08,880
where the only documentation for thing

01:58:07,440 --> 01:58:10,320
is the design document

01:58:08,880 --> 01:58:12,080
and then you're left on your own to

01:58:10,320 --> 01:58:13,280
figure out like okay how was this

01:58:12,080 --> 01:58:16,400
actually implemented

01:58:13,280 --> 01:58:19,679
like how do i configure it now um and

01:58:16,400 --> 01:58:21,840
both the the the temptation to keep it

01:58:19,679 --> 01:58:24,960
at that will be too strong if it's

01:58:21,840 --> 01:58:28,000
on the docs website so i would

01:58:24,960 --> 01:58:30,800
prefer to at least not right now

01:58:28,000 --> 01:58:31,280
the counterpoint is that moving stuff

01:58:30,800 --> 01:58:33,679
around

01:58:31,280 --> 01:58:35,920
after you designate something stable or

01:58:33,679 --> 01:58:37,679
so it's also super annoying and with

01:58:35,920 --> 01:58:38,960
with tagging of the prs and the

01:58:37,679 --> 01:58:41,920
discussions

01:58:38,960 --> 01:58:43,920
we can we can easily discern between

01:58:41,920 --> 01:58:45,840
what is what but this is not a super

01:58:43,920 --> 01:58:48,239
strong opinion

01:58:45,840 --> 01:58:49,040
yeah but this is about in dogs or not in

01:58:48,239 --> 01:58:50,960
dogs

01:58:49,040 --> 01:58:52,080
yes and my point is i think we can

01:58:50,960 --> 01:58:54,080
easily make this

01:58:52,080 --> 01:58:55,599
work as part of docs so we don't have

01:58:54,080 --> 01:58:59,520
profileration of more

01:58:55,599 --> 01:59:03,599
repositories and we just did move stuff

01:58:59,520 --> 01:59:05,360
from slash proposal to slash accept it

01:59:03,599 --> 01:59:07,280
and we retain full git history and

01:59:05,360 --> 01:59:09,920
everything

01:59:07,280 --> 01:59:11,760
i i am on matthias side where i try to

01:59:09,920 --> 01:59:13,760
configure kafka mirroring and the only

01:59:11,760 --> 01:59:14,880
documentation available is a design dock

01:59:13,760 --> 01:59:16,639
which i have

01:59:14,880 --> 01:59:19,760
i needed to reverse engineer the stuff

01:59:16,639 --> 01:59:23,199
to make it work and that's very annoying

01:59:19,760 --> 01:59:26,239
my my view is it's about google ability

01:59:23,199 --> 01:59:28,840
and i would like to not have

01:59:26,239 --> 01:59:30,480
design documents appear on

01:59:28,840 --> 01:59:32,159
prometheus.ioh

01:59:30,480 --> 01:59:34,480
that's the main point for me because

01:59:32,159 --> 01:59:36,239
foreign like for us it's easy oh we know

01:59:34,480 --> 01:59:37,679
what the tags are and what exactly this

01:59:36,239 --> 01:59:39,280
means but as and

01:59:37,679 --> 01:59:41,599
like when i come in from the outside and

01:59:39,280 --> 01:59:42,320
i like how do i join in prometheus and i

01:59:41,599 --> 01:59:44,239
find a

01:59:42,320 --> 01:59:47,199
and i click the thing that says

01:59:44,239 --> 01:59:49,199
implementing like joins in prometheus

01:59:47,199 --> 01:59:51,119
and i click it and i read it and it all

01:59:49,199 --> 01:59:52,880
makes sense and then i try to do it and

01:59:51,119 --> 01:59:55,199
then i go back and i realize

01:59:52,880 --> 01:59:57,360
it's under slash rejected right and i

01:59:55,199 --> 01:59:59,599
have to look at the url and chrome

01:59:57,360 --> 02:00:01,199
is in a phase of hiding the url again so

01:59:59,599 --> 02:00:04,400
i don't actually see that

02:00:01,199 --> 02:00:07,679
one point of order we are under quorum

02:00:04,400 --> 02:00:09,599
like solidly now um what bartek wrote

02:00:07,679 --> 02:00:11,360
would be my suggestion we can just have

02:00:09,599 --> 02:00:14,719
a subdirectory which is

02:00:11,360 --> 02:00:16,320
which is um which is not make part of

02:00:14,719 --> 02:00:18,400
promises i owe and done

02:00:16,320 --> 02:00:20,400
but i also think it's it's it's a little

02:00:18,400 --> 02:00:22,000
bit bike shitty i mean bartek wants to

02:00:20,400 --> 02:00:25,199
do this so bartik should just

02:00:22,000 --> 02:00:27,119
uh decide what he wants to do and how he

02:00:25,199 --> 02:00:29,119
wants to try it and if he needs

02:00:27,119 --> 02:00:30,719
approval by team to create a new

02:00:29,119 --> 02:00:33,760
repository just an email and

02:00:30,719 --> 02:00:36,239
three plus one and then done okay

02:00:33,760 --> 02:00:36,239
sounds good

02:00:38,840 --> 02:00:44,639
okay

02:00:41,040 --> 02:00:47,280
good good then thank you very much

02:00:44,639 --> 02:00:47,679
see you at the latest in a month thank

02:00:47,280 --> 02:00:51,280
you

02:00:47,679 --> 02:00:53,040
bye bye bye everyone i can't promise yet

02:00:51,280 --> 02:00:54,480
what i'm gonna like how available i'm

02:00:53,040 --> 02:00:56,159
going to be in the next three months

02:00:54,480 --> 02:00:59,440
because i'm on spectacle

02:00:56,159 --> 02:01:00,880
that's good let's yeah we

02:00:59,440 --> 02:01:04,000
if we have too many people going on

02:01:00,880 --> 02:01:04,000
vacation we can we can

02:01:04,880 --> 02:01:08,480
i'm like just informatively i'm taking a

02:01:07,599 --> 02:01:11,679
sabbatical

02:01:08,480 --> 02:01:13,760
so nice enjoy yeah i'm

02:01:11,679 --> 02:01:15,040
envious that's also part of the

02:01:13,760 --> 02:01:20,159
recording just

02:01:15,040 --> 02:01:20,159
yeah that's okay i'm envious but

02:01:20,840 --> 02:01:23,840

YouTube URL: https://www.youtube.com/watch?v=i0JXjPiJ_So


