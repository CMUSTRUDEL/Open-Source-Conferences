Title: Cortex Community Call 2021 01 07
Publication date: 2021-01-07
Playlist: Cortex Community Calls
Description: 
	
Captions: 
	00:00:03,280 --> 00:00:06,720
um

00:00:03,840 --> 00:00:09,040
i'm not sure about the process of like

00:00:06,720 --> 00:00:12,400
writing something down to talk about

00:00:09,040 --> 00:00:15,759
i can if there is no time i i don't

00:00:12,400 --> 00:00:18,480
like i can wait for the next meeting

00:00:15,759 --> 00:00:20,480
but do i have to write somewhere like to

00:00:18,480 --> 00:00:23,840
to talk about something

00:00:20,480 --> 00:00:28,240
uh yeah sure we have an agenda

00:00:23,840 --> 00:00:31,039
i paste the link here

00:00:28,240 --> 00:00:31,519
okay so you can find a google document

00:00:31,039 --> 00:00:34,719
link

00:00:31,519 --> 00:00:38,399
uh in the zoom chat

00:00:34,719 --> 00:00:40,320
let me quickly add yeah i saw that but

00:00:38,399 --> 00:00:44,320
there is just for a 2020

00:00:40,320 --> 00:00:46,800
um the the next i'm having a i'm running

00:00:44,320 --> 00:00:48,079
today as well

00:00:46,800 --> 00:00:49,840
generally it gets added at the beginning

00:00:48,079 --> 00:00:50,960
of the meeting or slightly before so

00:00:49,840 --> 00:00:53,760
you have you haven't missed the

00:00:50,960 --> 00:00:53,760
opportunity yet

00:00:56,840 --> 00:00:59,840
cool

00:01:00,640 --> 00:01:04,960
okay feel free to add your your items

00:01:02,719 --> 00:01:04,960
there

00:01:10,840 --> 00:01:13,840
thanks

00:02:02,479 --> 00:02:09,840
so let's wait a couple of minutes and

00:02:04,880 --> 00:02:09,840
there we go

00:03:33,280 --> 00:03:35,920
let's start

00:03:41,920 --> 00:03:46,959
okay let's start first of all

00:03:47,440 --> 00:03:52,239
okay try to speak again because at the

00:03:49,120 --> 00:03:55,280
beginning your volume was very low

00:03:52,239 --> 00:03:58,720
uh is it any better now yeah okay

00:03:55,280 --> 00:04:00,319
sorry um yeah so happy new year anymore

00:03:58,720 --> 00:04:03,880
everyone this is the first meeting

00:04:00,319 --> 00:04:05,360
of 2021 um let's see how this course

00:04:03,880 --> 00:04:07,760
[Music]

00:04:05,360 --> 00:04:09,200
all right so first agenda item we have

00:04:07,760 --> 00:04:13,200
adding sse

00:04:09,200 --> 00:04:13,200
for s3

00:04:13,360 --> 00:04:20,720
so i think lucas is filling this in

00:04:17,519 --> 00:04:23,680
uh yeah i can should i

00:04:20,720 --> 00:04:23,680
talk about it or

00:04:24,560 --> 00:04:29,680
okay so um last time in the last meeting

00:04:28,320 --> 00:04:32,160
my my colleague

00:04:29,680 --> 00:04:33,520
came here uh declan long i don't know if

00:04:32,160 --> 00:04:36,960
you remember him

00:04:33,520 --> 00:04:38,639
but to talk about the aws kms uh server

00:04:36,960 --> 00:04:42,240
side encryption

00:04:38,639 --> 00:04:44,240
um i'm working on that and there are

00:04:42,240 --> 00:04:46,960
like a few things that i'm not sure

00:04:44,240 --> 00:04:50,240
about the the implementation i have a pr

00:04:46,960 --> 00:04:51,440
but i'm not sure um pretty much there

00:04:50,240 --> 00:04:53,600
are two things

00:04:51,440 --> 00:04:54,960
the first thing is how i test

00:04:53,600 --> 00:04:58,800
server-side encryption

00:04:54,960 --> 00:05:01,680
using aws kms i was able to to

00:04:58,800 --> 00:05:03,120
create an integration test using key es

00:05:01,680 --> 00:05:04,920
for menia

00:05:03,120 --> 00:05:06,639
there is like a kms

00:05:04,920 --> 00:05:11,120
[Music]

00:05:06,639 --> 00:05:11,759
server but for aws kms i'm not really

00:05:11,120 --> 00:05:15,120
sure how

00:05:11,759 --> 00:05:17,520
how how can i test this like it's

00:05:15,120 --> 00:05:19,199
really complicated and complex and the

00:05:17,520 --> 00:05:21,520
other thing is like i'm using the

00:05:19,199 --> 00:05:22,400
the thanos interface that was suggested

00:05:21,520 --> 00:05:25,840
in the pr

00:05:22,400 --> 00:05:26,560
in the issue sorry um but i'm not using

00:05:25,840 --> 00:05:28,880
tennis

00:05:26,560 --> 00:05:31,280
so if it is okay just use the interface

00:05:28,880 --> 00:05:31,919
for now and then we can implement later

00:05:31,280 --> 00:05:34,960
on

00:05:31,919 --> 00:05:34,960
the tennis there

00:05:35,520 --> 00:05:39,840
and pretty much just that

00:05:41,280 --> 00:05:44,320
so i'm not super familiar with this

00:05:43,600 --> 00:05:48,320
issue

00:05:44,320 --> 00:05:51,680
um marco do you know

00:05:48,320 --> 00:05:55,440
more details no uh

00:05:51,680 --> 00:05:58,800
i haven't looked uh neither at the

00:05:55,440 --> 00:06:02,240
well i haven't looked at the pr yet um

00:05:58,800 --> 00:06:03,759
i know my my cursory reader yeah i don't

00:06:02,240 --> 00:06:05,360
i don't see how this would work with the

00:06:03,759 --> 00:06:07,680
block storage

00:06:05,360 --> 00:06:09,280
um i think the modifications have been

00:06:07,680 --> 00:06:10,960
to the chunk client

00:06:09,280 --> 00:06:14,000
um which we don't use in the block

00:06:10,960 --> 00:06:14,000
storage in my understanding

00:06:16,160 --> 00:06:21,840
and i thought amazon wanted it for block

00:06:18,080 --> 00:06:21,840
storage didn't they

00:06:22,720 --> 00:06:26,960
this is for chunks as far as i

00:06:24,639 --> 00:06:29,520
understand yeah

00:06:26,960 --> 00:06:31,680
they're not shared we do want it for

00:06:29,520 --> 00:06:33,919
black storage but this this pr

00:06:31,680 --> 00:06:35,280
was you know started by others for their

00:06:33,919 --> 00:06:37,759
reason so i don't know

00:06:35,280 --> 00:06:40,000
i haven't looked over the whole pr yet

00:06:37,759 --> 00:06:44,639
i'm sorry i i just assumed yukas was

00:06:40,000 --> 00:06:44,639
aws um sorry

00:06:44,800 --> 00:06:48,000
um i'm sharing the the issue that caused

00:06:46,960 --> 00:06:51,360
the

00:06:48,000 --> 00:06:53,759
spr2 to be to be raised

00:06:51,360 --> 00:06:54,560
that is pretty much like we we were not

00:06:53,759 --> 00:06:58,160
able to

00:06:54,560 --> 00:07:04,960
to encrypt using aws kms before

00:06:58,160 --> 00:07:08,240
just using the the aes 256.

00:07:04,960 --> 00:07:11,440
um to be honest i don't understand

00:07:08,240 --> 00:07:15,039
a lot about it uh so i

00:07:11,440 --> 00:07:17,520
i don't know if i can explain the whole

00:07:15,039 --> 00:07:19,199
picture one part of it seems quite

00:07:17,520 --> 00:07:21,759
simple if there's no

00:07:19,199 --> 00:07:22,479
uh stand-alone implementation with this

00:07:21,759 --> 00:07:25,520
encryption

00:07:22,479 --> 00:07:27,840
then it can't be tested in in the

00:07:25,520 --> 00:07:31,520
integration tests and

00:07:27,840 --> 00:07:34,319
you know move on um people don't

00:07:31,520 --> 00:07:35,280
want this encryption can test it in real

00:07:34,319 --> 00:07:36,560
s3

00:07:35,280 --> 00:07:38,560
and if it doesn't work they'll file an

00:07:36,560 --> 00:07:40,639
issue

00:07:38,560 --> 00:07:42,560
yep i was going to add the same thing so

00:07:40,639 --> 00:07:43,280
if it's not trivial to implement an

00:07:42,560 --> 00:07:47,280
integration

00:07:43,280 --> 00:07:49,840
test for it that is completely fine um

00:07:47,280 --> 00:07:50,319
if it's if we can use the kes that's

00:07:49,840 --> 00:07:52,319
that's

00:07:50,319 --> 00:07:53,680
great but like we don't want to block on

00:07:52,319 --> 00:07:56,080
the integration test

00:07:53,680 --> 00:07:57,759
having said that cortex has two storage

00:07:56,080 --> 00:07:59,440
engines now the chunk storage engine and

00:07:57,759 --> 00:08:03,039
the block storage engine

00:07:59,440 --> 00:08:06,240
and i think you would require this for

00:08:03,039 --> 00:08:08,560
the ice

00:08:06,240 --> 00:08:10,879
so yeah you you might be requiring this

00:08:08,560 --> 00:08:12,080
for the block search engine it depends

00:08:10,879 --> 00:08:13,759
um

00:08:12,080 --> 00:08:16,479
but if you're using the ruler i think

00:08:13,759 --> 00:08:18,319
the ruler uses the chunk storage engine

00:08:16,479 --> 00:08:20,960
rush had written in the comments on the

00:08:18,319 --> 00:08:20,960
chat as well

00:08:21,039 --> 00:08:24,879
that makes sense that sounds like a tech

00:08:23,280 --> 00:08:26,479
dead item to resolve at some point in

00:08:24,879 --> 00:08:29,440
the future

00:08:26,479 --> 00:08:31,440
yes we we do want to move to uh the

00:08:29,440 --> 00:08:32,159
thanos client for the ruler as well but

00:08:31,440 --> 00:08:35,039
like that's

00:08:32,159 --> 00:08:36,320
that has been something that's been on

00:08:35,039 --> 00:08:40,320
on the roadmap for a while

00:08:36,320 --> 00:08:44,399
um yeah uh lucas to kind of answer

00:08:40,320 --> 00:08:46,320
your question um so what you did

00:08:44,399 --> 00:08:47,680
if you can test it out locally and if

00:08:46,320 --> 00:08:50,560
you can say that it works

00:08:47,680 --> 00:08:52,160
uh that that should be good enough we

00:08:50,560 --> 00:08:55,920
don't want to block on a

00:08:52,160 --> 00:08:57,760
integration test and uh yeah like once

00:08:55,920 --> 00:08:58,320
you say okay i've tested this locally it

00:08:57,760 --> 00:09:00,640
works

00:08:58,320 --> 00:09:02,000
uh we're going to go ahead and review it

00:09:00,640 --> 00:09:04,640
uh

00:09:02,000 --> 00:09:05,200
suggest changes and then we can merge it

00:09:04,640 --> 00:09:08,399
does that mean

00:09:05,200 --> 00:09:10,720
awesome yeah it does uh i

00:09:08,399 --> 00:09:11,920
i put their work in progress because i

00:09:10,720 --> 00:09:14,000
want to test

00:09:11,920 --> 00:09:16,320
uh my company to see if everything is

00:09:14,000 --> 00:09:18,560
working and then i'm gonna remove and

00:09:16,320 --> 00:09:21,760
say that it's working

00:09:18,560 --> 00:09:22,880
does um we don't use s3 for any of our

00:09:21,760 --> 00:09:27,279
production workloads

00:09:22,880 --> 00:09:28,959
um at grafan labs does someone use

00:09:27,279 --> 00:09:30,320
use s3 and want to want to do a double

00:09:28,959 --> 00:09:31,839
check like i just don't want to merge it

00:09:30,320 --> 00:09:32,720
and then break someone who's using s3 in

00:09:31,839 --> 00:09:34,399
production

00:09:32,720 --> 00:09:36,080
yeah we're not using the chunk storage

00:09:34,399 --> 00:09:38,160
and we're not yet really using the ruler

00:09:36,080 --> 00:09:41,279
so we don't have a good

00:09:38,160 --> 00:09:42,959
case to test those i

00:09:41,279 --> 00:09:44,560
don't think this can really break

00:09:42,959 --> 00:09:47,200
anything because

00:09:44,560 --> 00:09:51,600
if you don't enable it then it's it will

00:09:47,200 --> 00:09:54,480
just not work or not i think because

00:09:51,600 --> 00:09:55,600
well i i took a look at it before and

00:09:54,480 --> 00:09:57,680
one one single

00:09:55,600 --> 00:09:58,640
part i don't quite understand do you say

00:09:57,680 --> 00:10:01,200
lucas that

00:09:58,640 --> 00:10:02,880
it's using thanos in some way but i

00:10:01,200 --> 00:10:05,760
don't see that

00:10:02,880 --> 00:10:07,680
what do you mean by uh it's using the

00:10:05,760 --> 00:10:09,839
interface the tenants interface

00:10:07,680 --> 00:10:11,920
so like the way that they create a

00:10:09,839 --> 00:10:14,959
structure sse config

00:10:11,920 --> 00:10:18,880
with type kms

00:10:14,959 --> 00:10:18,880
something id key id

00:10:20,880 --> 00:10:24,640
yeah yeah because then if we want to use

00:10:23,279 --> 00:10:26,560
tennis later on

00:10:24,640 --> 00:10:28,720
we just like we have the same interface

00:10:26,560 --> 00:10:30,839
we don't need to break anything

00:10:28,720 --> 00:10:33,839
okay i think that's perfectly fine

00:10:30,839 --> 00:10:33,839
thanks

00:10:34,800 --> 00:10:38,320
yeah i mean we're not going to merge it

00:10:36,720 --> 00:10:40,720
without a review it's just that

00:10:38,320 --> 00:10:41,600
uh like once someone tells us that it

00:10:40,720 --> 00:10:44,000
works

00:10:41,600 --> 00:10:46,959
uh that they've tested it against s3 we

00:10:44,000 --> 00:10:50,160
can then review it and then merge it

00:10:46,959 --> 00:10:54,480
sure sure that's perfect for me

00:10:50,160 --> 00:11:00,640
thanks guys thank you

00:10:54,480 --> 00:11:04,720
um cool any more questions around that

00:11:00,640 --> 00:11:08,000
moving on um so next we have brian

00:11:04,720 --> 00:11:11,839
uh rate limiting without dropping data

00:11:08,000 --> 00:11:12,560
our favorite issue yeah i thought i'd

00:11:11,839 --> 00:11:13,920
bring it up

00:11:12,560 --> 00:11:15,839
here because there was a little bit of

00:11:13,920 --> 00:11:18,800
debate in

00:11:15,839 --> 00:11:19,600
so the background is um we have a rate

00:11:18,800 --> 00:11:22,640
limit on

00:11:19,600 --> 00:11:25,839
samples per second coming in

00:11:22,640 --> 00:11:28,640
uh if

00:11:25,839 --> 00:11:29,760
as an operator of cortex if your system

00:11:28,640 --> 00:11:31,440
has some issues

00:11:29,760 --> 00:11:33,200
so it kind of goes down let's say it

00:11:31,440 --> 00:11:35,519
goes down for

00:11:33,200 --> 00:11:36,800
two minutes you know not a bad issue

00:11:35,519 --> 00:11:38,880
comes back again

00:11:36,800 --> 00:11:40,959
so now you get two minutes worth of data

00:11:38,880 --> 00:11:44,640
from from all the prometheus

00:11:40,959 --> 00:11:47,040
uh they will try and send it all at once

00:11:44,640 --> 00:11:48,000
they immediately go over the rate limit

00:11:47,040 --> 00:11:52,240
um

00:11:48,000 --> 00:11:56,320
is kind of a spring back effect and

00:11:52,240 --> 00:12:00,320
the current coded behavior of cortex

00:11:56,320 --> 00:12:03,360
is to send back a 429 error

00:12:00,320 --> 00:12:06,800
which prometheus treats as unrecoverable

00:12:03,360 --> 00:12:08,720
and drops the data on the floor uh

00:12:06,800 --> 00:12:10,079
so this is not a very good user

00:12:08,720 --> 00:12:11,839
experience like a

00:12:10,079 --> 00:12:13,120
a two minute outage just turns into a

00:12:11,839 --> 00:12:14,639
two minute gap in the

00:12:13,120 --> 00:12:16,160
data or possibly three or four minutes

00:12:14,639 --> 00:12:19,519
depending on you know

00:12:16,160 --> 00:12:23,279
how exactly the destruction plays out

00:12:19,519 --> 00:12:24,000
um so i've actually been running a

00:12:23,279 --> 00:12:26,720
different version

00:12:24,000 --> 00:12:27,680
of that in in production where i um

00:12:26,720 --> 00:12:30,800
slowed down

00:12:27,680 --> 00:12:33,279
the distributor uh which i believe

00:12:30,800 --> 00:12:34,880
tom told me was a terrible idea and and

00:12:33,279 --> 00:12:36,320
i've recently come to the view that it's

00:12:34,880 --> 00:12:39,519
a terrible idea

00:12:36,320 --> 00:12:40,560
i think it's a terrible yeah oh she told

00:12:39,519 --> 00:12:44,560
me

00:12:40,560 --> 00:12:47,279
i did i know it's not a terrible idea i

00:12:44,560 --> 00:12:50,639
never said that i'd never use such words

00:12:47,279 --> 00:12:53,600
okay okay um

00:12:50,639 --> 00:12:54,079
so uh and we have discussed this before

00:12:53,600 --> 00:12:57,839
and

00:12:54,079 --> 00:13:01,200
and so i've i've um

00:12:57,839 --> 00:13:05,839
i've i've recoded my branch

00:13:01,200 --> 00:13:08,720
to um send a 500

00:13:05,839 --> 00:13:09,600
and that has the effect of ascending

00:13:08,720 --> 00:13:12,240
prometheus

00:13:09,600 --> 00:13:13,839
uh treats that as a as a transient error

00:13:12,240 --> 00:13:17,120
and retries

00:13:13,839 --> 00:13:17,839
and and i think it's also a good idea to

00:13:17,120 --> 00:13:20,399
kind of

00:13:17,839 --> 00:13:22,160
increase the the retry gap the

00:13:20,399 --> 00:13:24,800
prometheus by default

00:13:22,160 --> 00:13:26,160
uh retries very quickly but if you slow

00:13:24,800 --> 00:13:28,959
that down a bit um

00:13:26,160 --> 00:13:31,040
that seems to work pretty well uh and

00:13:28,959 --> 00:13:33,279
then we've also discussed how that if

00:13:31,040 --> 00:13:34,079
if you just kind of if it's not a

00:13:33,279 --> 00:13:35,519
transient problem

00:13:34,079 --> 00:13:39,040
if it's not one of these kind of slow

00:13:35,519 --> 00:13:41,279
downs if if the problem is that your

00:13:39,040 --> 00:13:42,560
end user is just sending too fast too

00:13:41,279 --> 00:13:46,639
much data

00:13:42,560 --> 00:13:46,880
um then this is going to go on forever

00:13:46,639 --> 00:13:48,639
and

00:13:46,880 --> 00:13:50,000
and basically until the user's disk

00:13:48,639 --> 00:13:53,279
fills up

00:13:50,000 --> 00:13:55,920
um and

00:13:53,279 --> 00:13:57,920
so i think ideally well yes ideally we'd

00:13:55,920 --> 00:14:02,079
have a code

00:13:57,920 --> 00:14:04,320
mechanism to not do that but it

00:14:02,079 --> 00:14:05,360
you know basically and pragmatically it

00:14:04,320 --> 00:14:07,279
turns out that

00:14:05,360 --> 00:14:10,000
when you if depending on how you set

00:14:07,279 --> 00:14:12,160
your retention time for that prometheus

00:14:10,000 --> 00:14:13,920
like we we run a prometheus with the

00:14:12,160 --> 00:14:14,560
two-hour retention time just for the

00:14:13,920 --> 00:14:18,480
purpose of

00:14:14,560 --> 00:14:21,199
scraping and sending and uh

00:14:18,480 --> 00:14:22,480
so basically it runs up to two hours and

00:14:21,199 --> 00:14:23,519
then starts dropping the data on the

00:14:22,480 --> 00:14:26,800
floor anyway

00:14:23,519 --> 00:14:29,360
so that's kind of okay um in

00:14:26,800 --> 00:14:30,800
in context but yeah so that's i think

00:14:29,360 --> 00:14:31,440
that's the background and then there was

00:14:30,800 --> 00:14:34,560
some debate

00:14:31,440 --> 00:14:34,880
in the in the issue in the pr so i

00:14:34,560 --> 00:14:36,800
thought

00:14:34,880 --> 00:14:39,199
let's try and do it here on the call

00:14:36,800 --> 00:14:39,199
instead

00:14:40,399 --> 00:14:48,000
so sorry comment so one thing that we do

00:14:44,320 --> 00:14:51,440
is we set a really large burst

00:14:48,000 --> 00:14:53,920
uh period or burst uh value

00:14:51,440 --> 00:14:55,279
so in case this burst value i think

00:14:53,920 --> 00:14:58,560
could be like 10x the

00:14:55,279 --> 00:15:00,560
actual rate limit so in case prometheus

00:14:58,560 --> 00:15:03,600
goes down and then it comes back up and

00:15:00,560 --> 00:15:05,199
like it tries to send a lot of data

00:15:03,600 --> 00:15:07,360
i'll just point out that that's a

00:15:05,199 --> 00:15:08,639
surefire way to have prometheus denial

00:15:07,360 --> 00:15:11,440
of service attack and take out all your

00:15:08,639 --> 00:15:11,440
cortex clusters

00:15:11,600 --> 00:15:15,600
it's also no not not enough right i mean

00:15:14,160 --> 00:15:18,800
if

00:15:15,600 --> 00:15:20,560
if if you if it's 10x um and you're near

00:15:18,800 --> 00:15:21,199
the limit then you've got 10 seconds

00:15:20,560 --> 00:15:24,560
worth of

00:15:21,199 --> 00:15:27,120
of data and after that it's gone yeah

00:15:24,560 --> 00:15:27,680
it's not enough the next um i i agree

00:15:27,120 --> 00:15:30,160
with you

00:15:27,680 --> 00:15:31,519
we said to tenexa but it doesn't cover

00:15:30,160 --> 00:15:33,040
your use case

00:15:31,519 --> 00:15:35,920
i think we think we have this problem as

00:15:33,040 --> 00:15:38,399
well yeah we very much have this problem

00:15:35,920 --> 00:15:39,759
so i don't know the answer but the

00:15:38,399 --> 00:15:42,720
discussion in the pr

00:15:39,759 --> 00:15:44,480
was as far as i could tell the client is

00:15:42,720 --> 00:15:46,480
the only one that has the information

00:15:44,480 --> 00:15:48,560
enough information to make this decision

00:15:46,480 --> 00:15:50,639
so i don't think the solution is to

00:15:48,560 --> 00:15:52,959
change the response code

00:15:50,639 --> 00:15:55,360
to 500. i think the solution is to

00:15:52,959 --> 00:15:58,399
change prometheus's behavior

00:15:55,360 --> 00:16:00,399
so that it retries four two nines in

00:15:58,399 --> 00:16:03,680
some circumstances

00:16:00,399 --> 00:16:04,399
now i don't that's not a solution but

00:16:03,680 --> 00:16:07,279
for instance

00:16:04,399 --> 00:16:08,560
imagine if the 429 had a response header

00:16:07,279 --> 00:16:10,320
that said this is how much you're

00:16:08,560 --> 00:16:12,320
sending and this is how much

00:16:10,320 --> 00:16:13,600
your limit is the client would have

00:16:12,320 --> 00:16:15,360
enough information to

00:16:13,600 --> 00:16:17,600
distinguish between the two cases you've

00:16:15,360 --> 00:16:19,680
described ryan between

00:16:17,600 --> 00:16:20,880
like i'm just sending too much data in

00:16:19,680 --> 00:16:24,079
general i

00:16:20,880 --> 00:16:26,160
this would be you know the client could

00:16:24,079 --> 00:16:27,680
get my thoughts straight prometheus will

00:16:26,160 --> 00:16:29,680
know how far behind it is

00:16:27,680 --> 00:16:31,040
tailing its wow for the remote right and

00:16:29,680 --> 00:16:32,959
therefore you could have a threshold if

00:16:31,040 --> 00:16:35,920
i'm only a minute behind

00:16:32,959 --> 00:16:36,639
and i get a 429 then i drop the data

00:16:35,920 --> 00:16:38,959
because i'm just

00:16:36,639 --> 00:16:40,800
i'm just overwhelming the cortex server

00:16:38,959 --> 00:16:42,399
if i'm more than a minute behind and i

00:16:40,800 --> 00:16:45,440
get a 429

00:16:42,399 --> 00:16:46,320
then i retry i mean there's problems

00:16:45,440 --> 00:16:49,120
with that solution

00:16:46,320 --> 00:16:50,639
but but how about how about that's a

00:16:49,120 --> 00:16:54,560
that's a proposal which might help

00:16:50,639 --> 00:16:56,160
how's that sound my guess was that

00:16:54,560 --> 00:16:58,079
that would go the other way around like

00:16:56,160 --> 00:17:00,399
if i've been retrying for an hour then

00:16:58,079 --> 00:17:04,720
you better start dropping the data

00:17:00,399 --> 00:17:04,720
but anyway that's a detail i mean yeah

00:17:05,199 --> 00:17:08,400
can i modify my suggestion

00:17:08,640 --> 00:17:14,400
instead of um instead of looking at the

00:17:12,559 --> 00:17:16,400
threshold of how far behind i have look

00:17:14,400 --> 00:17:19,679
at the second derivative of that

00:17:16,400 --> 00:17:22,000
if i'm catching up i retry

00:17:19,679 --> 00:17:23,600
if i'm if i'm falling behind i start

00:17:22,000 --> 00:17:25,439
dropping

00:17:23,600 --> 00:17:27,919
i i should make some joke about rocket

00:17:25,439 --> 00:17:28,160
science yeah i have to say that this is

00:17:27,919 --> 00:17:29,760
the

00:17:28,160 --> 00:17:31,679
i'm streaming something it turns out i

00:17:29,760 --> 00:17:32,640
need flow control which is very much a

00:17:31,679 --> 00:17:34,480
repeating

00:17:32,640 --> 00:17:35,679
pattern in the networking right this is

00:17:34,480 --> 00:17:36,880
flow control

00:17:35,679 --> 00:17:39,520
does anyone here know anything about

00:17:36,880 --> 00:17:39,520
flow controllers

00:17:40,320 --> 00:17:43,840
um so so yes i i do think it would be

00:17:42,960 --> 00:17:46,960
better to modify

00:17:43,840 --> 00:17:49,840
prometheus um that

00:17:46,960 --> 00:17:52,320
obviously takes longer to roll out to my

00:17:49,840 --> 00:17:52,320
users

00:17:53,039 --> 00:18:00,080
but if yeah

00:17:56,960 --> 00:18:02,080
i don't know this is nothing specific to

00:18:00,080 --> 00:18:03,840
cortex right it's just remote right and

00:18:02,080 --> 00:18:05,120
attempting to defend yourself on the

00:18:03,840 --> 00:18:08,960
receiving side

00:18:05,120 --> 00:18:10,799
like yeah

00:18:08,960 --> 00:18:12,480
well yeah i suppose i suppose we have

00:18:10,799 --> 00:18:12,960
another kind of string to the bow which

00:18:12,480 --> 00:18:15,360
is the

00:18:12,960 --> 00:18:18,720
the grafana agent possibly another place

00:18:15,360 --> 00:18:18,720
to try out experiments

00:18:18,960 --> 00:18:22,640
yeah there's also the prometheus agent

00:18:20,799 --> 00:18:25,200
design doc being talked about like

00:18:22,640 --> 00:18:27,919
context too right so

00:18:25,200 --> 00:18:29,200
i would just from a uh just from a kind

00:18:27,919 --> 00:18:30,960
of

00:18:29,200 --> 00:18:32,320
making so uh brian i don't know whether

00:18:30,960 --> 00:18:34,000
you saw the notes from the recent

00:18:32,320 --> 00:18:35,760
prometheus dev summit but the prometheus

00:18:34,000 --> 00:18:38,720
team has decided

00:18:35,760 --> 00:18:40,240
to accept remote right requests into

00:18:38,720 --> 00:18:41,760
prometheus servers

00:18:40,240 --> 00:18:43,280
so you're going to be able to push into

00:18:41,760 --> 00:18:46,480
a prometheus

00:18:43,280 --> 00:18:48,080
um which uh that should be done pretty

00:18:46,480 --> 00:18:50,480
soon because there's not a lot to it

00:18:48,080 --> 00:18:51,200
but the begs the obvious question will

00:18:50,480 --> 00:18:52,720
we then need an

00:18:51,200 --> 00:18:55,520
agent so the idea is that we're going to

00:18:52,720 --> 00:18:57,200
take the the the little bit of code that

00:18:55,520 --> 00:18:58,240
makes this possible in the grafina cloud

00:18:57,200 --> 00:18:59,679
agent it's just an

00:18:58,240 --> 00:19:01,600
implementation of the storage interface

00:18:59,679 --> 00:19:03,760
that writes directly to the wow

00:19:01,600 --> 00:19:05,919
um and we're going to donate that to

00:19:03,760 --> 00:19:08,080
prometheus and there's going to be

00:19:05,919 --> 00:19:09,520
the concept of a prometheus agent which

00:19:08,080 --> 00:19:10,080
does basically what the grafina cloud

00:19:09,520 --> 00:19:12,240
agent does

00:19:10,080 --> 00:19:14,160
minus the embedded exporters and prom

00:19:12,240 --> 00:19:15,280
tail and open telemetry and

00:19:14,160 --> 00:19:18,000
all the other stuff we've thrown in

00:19:15,280 --> 00:19:20,160
there um so that's just an fyi

00:19:18,000 --> 00:19:21,200
um we could jump on that design document

00:19:20,160 --> 00:19:24,000
although um

00:19:21,200 --> 00:19:25,280
i would give it some thought as to

00:19:24,000 --> 00:19:27,290
whether that will

00:19:25,280 --> 00:19:28,799
speed things up or slow things down um

00:19:27,290 --> 00:19:32,080
[Music]

00:19:28,799 --> 00:19:34,080
just as a thought exercise

00:19:32,080 --> 00:19:35,919
i don't know you mean there's a design

00:19:34,080 --> 00:19:39,360
document for

00:19:35,919 --> 00:19:41,760
remote right into prometheus uh for the

00:19:39,360 --> 00:19:41,760
agent

00:19:42,400 --> 00:19:46,880
for the prometheus agent i i mean i

00:19:45,280 --> 00:19:49,440
think there could be a design document

00:19:46,880 --> 00:19:52,559
specifically for

00:19:49,440 --> 00:19:55,600
uh rate control flow control

00:19:52,559 --> 00:19:58,960
yeah yeah let's i think do that just i

00:19:55,600 --> 00:19:58,960
don't think i'm gonna write it

00:20:00,080 --> 00:20:06,720
i think have we have we not written it

00:20:02,320 --> 00:20:08,559
in the notes already

00:20:06,720 --> 00:20:10,320
well if someone would like to copy paste

00:20:08,559 --> 00:20:11,760
that'd be great i think you've

00:20:10,320 --> 00:20:15,039
certainly written the problem statement

00:20:11,760 --> 00:20:15,039
by this point if nothing else

00:20:16,240 --> 00:20:20,960
if the derivative of how far behind is

00:20:18,840 --> 00:20:25,039
increasing we drop

00:20:20,960 --> 00:20:26,640
if it's decreasing i.e we catch it we

00:20:25,039 --> 00:20:28,480
are catching up

00:20:26,640 --> 00:20:30,080
simply solve the following differential

00:20:28,480 --> 00:20:31,520
equation right partial differential

00:20:30,080 --> 00:20:35,840
equation that was when i stopped paying

00:20:31,520 --> 00:20:35,840
attention at mass

00:20:36,640 --> 00:20:46,720
i work for several investment banks so

00:20:41,120 --> 00:20:50,480
um the the derivative approach

00:20:46,720 --> 00:20:52,559
i can't think of any problems with this

00:20:50,480 --> 00:20:54,240
now that's not to say i think it works i

00:20:52,559 --> 00:20:56,799
just can't immediately think of any

00:20:54,240 --> 00:20:58,320
problems with it

00:20:56,799 --> 00:21:00,880
all right well this is not the meeting

00:20:58,320 --> 00:21:03,440
to to solve your differential equations

00:21:00,880 --> 00:21:03,919
well i think this is exactly that very a

00:21:03,440 --> 00:21:07,039
very

00:21:03,919 --> 00:21:09,679
valuable proposal there's nothing else

00:21:07,039 --> 00:21:09,679
on the agenda

00:21:10,320 --> 00:21:16,720
okay so if in the situation where you

00:21:13,760 --> 00:21:17,440
um so let's say you default for retrying

00:21:16,720 --> 00:21:20,159
right

00:21:17,440 --> 00:21:20,799
you retry each thing like end times and

00:21:20,159 --> 00:21:22,640
then

00:21:20,799 --> 00:21:25,760
if you notice that you're not catching

00:21:22,640 --> 00:21:27,200
up you switch to dropping

00:21:25,760 --> 00:21:28,799
no because what's that no this is only

00:21:27,200 --> 00:21:31,919
for four two nines right not for 500.

00:21:28,799 --> 00:21:31,919
this is only for 14 nights

00:21:32,880 --> 00:21:36,400
so smoothing is the problem that i have

00:21:35,840 --> 00:21:40,400
in mind

00:21:36,400 --> 00:21:44,480
right the numerical differentiation uh

00:21:40,400 --> 00:21:46,880
suffers from edges

00:21:44,480 --> 00:21:48,960
sharp edges particularly and you know if

00:21:46,880 --> 00:21:52,559
your data if your data is noisy

00:21:48,960 --> 00:21:52,559
if you um

00:21:53,280 --> 00:21:58,159
i mean that's what the resulting before

00:21:56,840 --> 00:21:59,520
derivative

00:21:58,159 --> 00:22:00,960
yeah we'd do a moving average of the

00:21:59,520 --> 00:22:01,440
derivative or something right but that's

00:22:00,960 --> 00:22:02,480
exactly

00:22:01,440 --> 00:22:04,159
you know an exponentially weighted

00:22:02,480 --> 00:22:04,640
moving average or so that's what the

00:22:04,159 --> 00:22:07,200
shuffle

00:22:04,640 --> 00:22:07,840
the sharding in the remote right code

00:22:07,200 --> 00:22:09,679
suffered

00:22:07,840 --> 00:22:11,440
terribly from from what you're

00:22:09,679 --> 00:22:14,400
describing brian

00:22:11,440 --> 00:22:15,919
um from it being it being too jumpy it

00:22:14,400 --> 00:22:17,200
reshared up to a thousand and then down

00:22:15,919 --> 00:22:18,320
to one and then up to a thousand and

00:22:17,200 --> 00:22:20,000
then down to one and then up to a

00:22:18,320 --> 00:22:26,559
thousand and then down to one

00:22:20,000 --> 00:22:29,919
i could gone

00:22:26,559 --> 00:22:30,880
yeah i'm trying to remember the name of

00:22:29,919 --> 00:22:34,000
the

00:22:30,880 --> 00:22:37,520
filter that somebody should

00:22:34,000 --> 00:22:38,720
cite at this point do you mean a common

00:22:37,520 --> 00:22:40,320
filter by any chance

00:22:38,720 --> 00:22:42,240
i don't know what one of those is but

00:22:40,320 --> 00:22:44,240
yeah i probably do actually

00:22:42,240 --> 00:22:47,120
i do know what i'm features i'm sure i'd

00:22:44,240 --> 00:22:50,640
have to read the wikipedia page first

00:22:47,120 --> 00:22:52,559
come on um

00:22:50,640 --> 00:22:55,039
i think this would work although i do

00:22:52,559 --> 00:22:57,440
think this a wants a design doc and b

00:22:55,039 --> 00:23:00,320
wants a bunch of prototypes and and um

00:22:57,440 --> 00:23:04,559
experiments to see what actually

00:23:00,320 --> 00:23:06,400
uh i can i can at least get it on some

00:23:04,559 --> 00:23:09,600
of our internal engineering

00:23:06,400 --> 00:23:11,840
um like backlogs i can't

00:23:09,600 --> 00:23:14,000
say when when we'd have time to do this

00:23:11,840 --> 00:23:14,000
but

00:23:14,320 --> 00:23:19,600
oh marco's put another topic on the

00:23:15,919 --> 00:23:19,600
agenda to move on from this one i see

00:23:24,640 --> 00:23:27,679
richard do you like is there any like um

00:23:26,720 --> 00:23:30,880
internal

00:23:27,679 --> 00:23:32,240
kind of uh uh experts at amazon who

00:23:30,880 --> 00:23:34,000
might know more about flow control and

00:23:32,240 --> 00:23:36,159
things like this than we do

00:23:34,000 --> 00:23:37,840
probably it doesn't mean i know them so

00:23:36,159 --> 00:23:40,000
one of the folks on our team has worked

00:23:37,840 --> 00:23:43,200
on like some raid limiting in front of

00:23:40,000 --> 00:23:45,360
um our service around cortex uh

00:23:43,200 --> 00:23:47,120
a bit he might be interested in helping

00:23:45,360 --> 00:23:48,159
out or at least reviewing so i can bug

00:23:47,120 --> 00:23:52,880
him

00:23:48,159 --> 00:23:54,960
cool yeah i think it should be a great

00:23:52,880 --> 00:23:57,039
can we can we mark kind of this is

00:23:54,960 --> 00:24:00,240
hacktoberfest 2021 and just hope that

00:23:57,039 --> 00:24:00,240
like somebody else fixes it

00:24:01,440 --> 00:24:05,600
um i think we necessarily need someone

00:24:04,000 --> 00:24:08,400
with either good benchmarking

00:24:05,600 --> 00:24:10,559
or real production stuff to carefully

00:24:08,400 --> 00:24:12,080
like validate the design on right so

00:24:10,559 --> 00:24:15,279
yeah this is hard to do without

00:24:12,080 --> 00:24:17,200
something of bang on the

00:24:15,279 --> 00:24:19,840
cortex cluster enough to validate the

00:24:17,200 --> 00:24:19,840
idea

00:24:23,919 --> 00:24:28,000
i the more i think about it the more i

00:24:25,520 --> 00:24:31,760
think the the

00:24:28,000 --> 00:24:34,320
like a common filter on the second

00:24:31,760 --> 00:24:35,600
on the differential of of how far behind

00:24:34,320 --> 00:24:36,720
we're getting i are we catching up or

00:24:35,600 --> 00:24:38,559
falling behind

00:24:36,720 --> 00:24:40,320
you know with some thresholds right

00:24:38,559 --> 00:24:42,400
maybe a like uh

00:24:40,320 --> 00:24:43,600
um some hysteresis or something so it's

00:24:42,400 --> 00:24:47,840
not so it doesn't flip-flop

00:24:43,600 --> 00:24:47,840
like i think that would solve it

00:24:49,679 --> 00:24:54,640
i might just go and hack this off the

00:24:50,799 --> 00:24:54,640
weekend now that there's an idea

00:24:57,679 --> 00:25:01,720
so what is the term you're using which

00:24:59,200 --> 00:25:04,320
filter carmen

00:25:01,720 --> 00:25:04,880
k-a-r-m-a-n as in harman kardon i

00:25:04,320 --> 00:25:07,279
believe

00:25:04,880 --> 00:25:08,880
i think it's an l it's kalman is it

00:25:07,279 --> 00:25:10,240
cowman oh there you go as in susan

00:25:08,880 --> 00:25:13,039
cameron the comedian

00:25:10,240 --> 00:25:14,640
who's also scottish i believe right yeah

00:25:13,039 --> 00:25:16,559
it's common

00:25:14,640 --> 00:25:20,240
this sounds familiar to me but i don't

00:25:16,559 --> 00:25:23,600
remember any of the details

00:25:20,240 --> 00:25:26,840
yeah from rudolph coleman

00:25:23,600 --> 00:25:29,279
so it wasn't invented by a scottish

00:25:26,840 --> 00:25:31,360
comedian

00:25:29,279 --> 00:25:34,080
there's a ton of maths in the in

00:25:31,360 --> 00:25:36,400
the wikipedia page

00:25:34,080 --> 00:25:36,400
close

00:25:37,279 --> 00:25:40,400
i'm just going to add a question mark

00:25:38,799 --> 00:25:42,640
after camera filter

00:25:40,400 --> 00:25:43,600
because we can then we're not committing

00:25:42,640 --> 00:25:47,120
20.

00:25:43,600 --> 00:25:47,120
i think that would work you know

00:25:47,360 --> 00:25:50,159
and at least put it this way it's not

00:25:48,880 --> 00:25:52,320
going to be worse than what we currently

00:25:50,159 --> 00:25:52,320
have

00:25:53,600 --> 00:25:56,799
because currently we just drop it

00:25:54,640 --> 00:25:58,480
willy-nilly right this way at least we

00:25:56,799 --> 00:26:01,200
have an opportunity to

00:25:58,480 --> 00:26:02,320
to to improve it and in either way i

00:26:01,200 --> 00:26:03,360
don't think there's a salute i don't

00:26:02,320 --> 00:26:06,000
think there's a perfect

00:26:03,360 --> 00:26:07,760
solution here because like what happens

00:26:06,000 --> 00:26:08,799
if you're just on the edge

00:26:07,760 --> 00:26:10,000
you know and you're occasionally

00:26:08,799 --> 00:26:12,880
dropping things and then you have to

00:26:10,000 --> 00:26:12,880
catch up i mean

00:26:12,960 --> 00:26:16,400
yes i think one fundamental question is

00:26:15,279 --> 00:26:19,360
should the

00:26:16,400 --> 00:26:21,360
server side be telling the client what

00:26:19,360 --> 00:26:24,640
to do or should the client be deciding

00:26:21,360 --> 00:26:27,919
right like fundamentally which side

00:26:24,640 --> 00:26:29,840
should be attempting to execute the

00:26:27,919 --> 00:26:31,600
right flow control algorithm

00:26:29,840 --> 00:26:33,200
i mean i would have the server side

00:26:31,600 --> 00:26:34,240
doesn't have enough doesn't actually

00:26:33,200 --> 00:26:36,720
have

00:26:34,240 --> 00:26:38,320
um doesn't know the the actual doesn't

00:26:36,720 --> 00:26:39,600
know the backlog length yeah

00:26:38,320 --> 00:26:41,039
well it doesn't it doesn't even know the

00:26:39,600 --> 00:26:42,559
rate right you're hitting you're

00:26:41,039 --> 00:26:44,240
randomly load balancing over a bunch of

00:26:42,559 --> 00:26:45,200
distributors right they only know their

00:26:44,240 --> 00:26:46,480
local rates

00:26:45,200 --> 00:26:48,400
they might know the global limit but

00:26:46,480 --> 00:26:51,679
they only know their local rates so

00:26:48,400 --> 00:26:54,000
whilst we might want to return the um

00:26:51,679 --> 00:26:55,200
the global limit i would worry about as

00:26:54,000 --> 00:26:57,120
returning any kind of

00:26:55,200 --> 00:26:58,480
idea of the actual rate you're sending

00:26:57,120 --> 00:27:00,000
and what's more even that you know you

00:26:58,480 --> 00:27:00,720
normally have multiple prometheuses

00:27:00,000 --> 00:27:02,799
sending to one

00:27:00,720 --> 00:27:04,480
cortex client so even if you get the

00:27:02,799 --> 00:27:06,400
limit sent back to you

00:27:04,480 --> 00:27:07,679
you're not you're not you you can't use

00:27:06,400 --> 00:27:08,080
the whole limit because some guy over

00:27:07,679 --> 00:27:11,440
there is

00:27:08,080 --> 00:27:11,440
using the other half of the limit

00:27:12,080 --> 00:27:16,720
this um relates slightly to another

00:27:14,640 --> 00:27:20,320
conversation i was having in a

00:27:16,720 --> 00:27:22,640
in an issue uh about

00:27:20,320 --> 00:27:25,200
cortex has a few kind of notions of

00:27:22,640 --> 00:27:28,799
freshness and staleness of data

00:27:25,200 --> 00:27:30,799
and um any any time where it does this

00:27:28,799 --> 00:27:34,000
by comparing against now

00:27:30,799 --> 00:27:35,840
is is uh has a problem

00:27:34,000 --> 00:27:37,760
if the if the other guy's clock is

00:27:35,840 --> 00:27:42,000
different

00:27:37,760 --> 00:27:44,640
um which it turns out happens

00:27:42,000 --> 00:27:44,640
in real life

00:27:45,600 --> 00:27:52,799
so uh maybe that notion should go into

00:27:49,919 --> 00:27:54,960
the remote right but well yeah i don't

00:27:52,799 --> 00:27:56,480
know it's interesting thing that

00:27:54,960 --> 00:27:58,080
cause it because like every sample comes

00:27:56,480 --> 00:28:01,760
with the timestamp so we kind of

00:27:58,080 --> 00:28:04,880
know for the most part what the sender

00:28:01,760 --> 00:28:07,279
thinks is now except in

00:28:04,880 --> 00:28:08,799
very special cases where they're maybe

00:28:07,279 --> 00:28:10,080
not very special but you know special

00:28:08,799 --> 00:28:11,840
cases where they're sending a different

00:28:10,080 --> 00:28:12,559
timestamp but generally speaking every

00:28:11,840 --> 00:28:14,960
time stamp

00:28:12,559 --> 00:28:17,039
every sample they send us gives us their

00:28:14,960 --> 00:28:18,880
idea of now

00:28:17,039 --> 00:28:20,240
gotham you were telling me about a

00:28:18,880 --> 00:28:23,279
similar problem

00:28:20,240 --> 00:28:26,960
earlier this week yes

00:28:23,279 --> 00:28:29,120
our h.a pair handling is not so great

00:28:26,960 --> 00:28:30,799
in that if you have two prometheus

00:28:29,120 --> 00:28:33,919
ascending and

00:28:30,799 --> 00:28:36,559
whoever is the leader is

00:28:33,919 --> 00:28:38,720
behind and the leader falls behind by 15

00:28:36,559 --> 00:28:41,600
minutes for whatever issue and restarts

00:28:38,720 --> 00:28:43,600
the follower becomes the leader but you

00:28:41,600 --> 00:28:45,440
would then have a 15 minute gap

00:28:43,600 --> 00:28:48,159
unless the follower also fell behind the

00:28:45,440 --> 00:28:48,159
15 minutes

00:28:50,960 --> 00:28:54,559
so like that's another tricky issue that

00:28:54,000 --> 00:28:59,840
we

00:28:54,559 --> 00:28:59,840
kind of need to solve sometime soon

00:29:10,640 --> 00:29:13,840
hey richard for the flow control design

00:29:13,279 --> 00:29:15,760
i think

00:29:13,840 --> 00:29:17,679
maybe we should run that by the

00:29:15,760 --> 00:29:19,360
principal engineer community and get

00:29:17,679 --> 00:29:22,159
some thoughts i'm sure somebody at

00:29:19,360 --> 00:29:23,840
amazon tried to solve this before

00:29:22,159 --> 00:29:26,480
i'm sure lots of people lots of places

00:29:23,840 --> 00:29:28,399
have yes

00:29:26,480 --> 00:29:30,720
um any any assistance would be really

00:29:28,399 --> 00:29:32,159
appreciated

00:29:30,720 --> 00:29:34,000
especially like it feels bad that we

00:29:32,159 --> 00:29:37,200
just don't know what the

00:29:34,000 --> 00:29:38,960
you know what what the other solutions

00:29:37,200 --> 00:29:42,240
that other people do in this case

00:29:38,960 --> 00:29:45,440
right yeah i mean i can

00:29:42,240 --> 00:29:47,440
just kind of throw a broad net

00:29:45,440 --> 00:29:49,360
and also see if i can look for people

00:29:47,440 --> 00:29:50,640
that should be theoretically expert and

00:29:49,360 --> 00:29:52,480
also marco's like

00:29:50,640 --> 00:29:54,880
you know we have one or two people on

00:29:52,480 --> 00:29:56,799
our team that have worked on

00:29:54,880 --> 00:29:58,320
you know protections for ddos and stuff

00:29:56,799 --> 00:30:00,240
for our service that might be interested

00:29:58,320 --> 00:30:02,399
in looking at this

00:30:00,240 --> 00:30:04,640
yeah cool if we can help here that would

00:30:02,399 --> 00:30:07,039
be great

00:30:04,640 --> 00:30:08,640
i i do have really a related question if

00:30:07,039 --> 00:30:09,840
you don't mind a quick segue

00:30:08,640 --> 00:30:12,240
just because you're talking about

00:30:09,840 --> 00:30:13,360
clients and agents one thing that we're

00:30:12,240 --> 00:30:16,159
struggling with

00:30:13,360 --> 00:30:19,120
is cortex is useless without something

00:30:16,159 --> 00:30:22,240
scraping and sending data to cortex

00:30:19,120 --> 00:30:23,120
but it seems that the problem of scaling

00:30:22,240 --> 00:30:25,600
the

00:30:23,120 --> 00:30:27,200
agents in a kubernetes cluster to send

00:30:25,600 --> 00:30:30,320
to cortex

00:30:27,200 --> 00:30:32,080
is not so or there's no mechanism to

00:30:30,320 --> 00:30:35,360
automatically shard

00:30:32,080 --> 00:30:38,880
and load balance the agents is it

00:30:35,360 --> 00:30:39,840
my ignorance or is that an unsolved

00:30:38,880 --> 00:30:42,960
problem and

00:30:39,840 --> 00:30:47,440
is does cortex have a role in

00:30:42,960 --> 00:30:50,880
allowing the agents to be auto scaled

00:30:47,440 --> 00:30:53,120
within kubernetes

00:30:50,880 --> 00:30:55,840
uh the there's a mode of the grafana

00:30:53,120 --> 00:30:59,039
cloud agent that does that

00:30:55,840 --> 00:31:02,080
um beyond that there's

00:30:59,039 --> 00:31:05,039
there's no auto scaling but there is as

00:31:02,080 --> 00:31:08,399
far as i know the thanos team

00:31:05,039 --> 00:31:10,480
have some like operator magic to

00:31:08,399 --> 00:31:12,000
control the hashmod sharding on the

00:31:10,480 --> 00:31:12,960
remote on the uh scraping with

00:31:12,000 --> 00:31:14,480
prometheus but

00:31:12,960 --> 00:31:15,760
i'm not an expert on that so i think

00:31:14,480 --> 00:31:16,320
there's a couple of solutions but

00:31:15,760 --> 00:31:18,720
they're

00:31:16,320 --> 00:31:20,399
honestly none of them are perfect right

00:31:18,720 --> 00:31:21,919
you know there's there's work to be done

00:31:20,399 --> 00:31:24,000
yeah i didn't know about the thanos one

00:31:21,919 --> 00:31:26,480
so that would be an interesting one

00:31:24,000 --> 00:31:27,840
an interesting pointer to look at yeah

00:31:26,480 --> 00:31:28,480
in general the prometheus side are going

00:31:27,840 --> 00:31:30,080
to say

00:31:28,480 --> 00:31:32,080
this is a solved problem because we put

00:31:30,080 --> 00:31:33,600
hash mod in in service discovery

00:31:32,080 --> 00:31:36,320
um and it's now just a conflict

00:31:33,600 --> 00:31:36,320
management problem

00:31:36,720 --> 00:31:40,240
yeah i mean the problem is it makes us

00:31:38,240 --> 00:31:41,600
ship it to our customers to

00:31:40,240 --> 00:31:43,760
fix it themselves when they're big

00:31:41,600 --> 00:31:44,559
enough to care it's not it's not a

00:31:43,760 --> 00:31:46,880
solved problem i'm

00:31:44,559 --> 00:31:48,159
i'm not uh i don't think that but um

00:31:46,880 --> 00:31:50,159
yeah i mean i think it's it's in the

00:31:48,159 --> 00:31:51,600
state where a customer can solve it but

00:31:50,159 --> 00:31:52,880
we have to make them do it over and over

00:31:51,600 --> 00:31:55,279
again

00:31:52,880 --> 00:31:56,720
instead of us doing it for them gotham

00:31:55,279 --> 00:31:58,960
do you know if the hashmot sharding is

00:31:56,720 --> 00:32:03,120
in the prometheus operator

00:31:58,960 --> 00:32:03,120
i am not i was basically looking that up

00:32:03,600 --> 00:32:06,799
uh but it i wouldn't be surprised if

00:32:05,519 --> 00:32:08,880
it's already there

00:32:06,799 --> 00:32:10,159
you know i think it's already there the

00:32:08,880 --> 00:32:13,200
uh the cloud agent

00:32:10,159 --> 00:32:15,760
stuff uses um an xcd or a console

00:32:13,200 --> 00:32:17,279
to stick the list of targets in there

00:32:15,760 --> 00:32:19,279
and then

00:32:17,279 --> 00:32:21,200
does it from there basically and so we

00:32:19,279 --> 00:32:24,480
we use a backing store to kind of

00:32:21,200 --> 00:32:24,480
do the load balancing

00:32:25,760 --> 00:32:29,279
but wouldn't that create another

00:32:27,799 --> 00:32:31,919
dependency

00:32:29,279 --> 00:32:33,360
or are using the lcds that kubernetes

00:32:31,919 --> 00:32:34,720
already uses

00:32:33,360 --> 00:32:37,760
no it creates another dependency yeah

00:32:34,720 --> 00:32:39,360
it's another service we have some um

00:32:37,760 --> 00:32:40,960
i don't think it works right now but we

00:32:39,360 --> 00:32:42,960
we've given some thought to and there's

00:32:40,960 --> 00:32:44,559
some code to make it use gossip as well

00:32:42,960 --> 00:32:45,760
so that that doesn't have the dependency

00:32:44,559 --> 00:32:47,919
but um

00:32:45,760 --> 00:32:49,200
in general you need to be really careful

00:32:47,919 --> 00:32:50,320
right because you

00:32:49,200 --> 00:32:52,159
you want to make sure everything's being

00:32:50,320 --> 00:32:52,799
scraped but also make sure that like you

00:32:52,159 --> 00:32:54,480
know

00:32:52,799 --> 00:32:57,840
unless you have the hid stuff turned on

00:32:54,480 --> 00:32:57,840
you're not scraping stuff twice

00:32:59,200 --> 00:33:05,600
got you do you see

00:33:02,480 --> 00:33:07,120
do you see a wall for cortex in in like

00:33:05,600 --> 00:33:08,880
let's say that the committee's agent

00:33:07,120 --> 00:33:11,440
moves forward

00:33:08,880 --> 00:33:13,120
like should this remain within an

00:33:11,440 --> 00:33:17,279
operator or should

00:33:13,120 --> 00:33:20,000
that be part of a some kind of

00:33:17,279 --> 00:33:22,799
communication between the agent and the

00:33:20,000 --> 00:33:26,080
cortex server

00:33:22,799 --> 00:33:26,559
i don't think there's a huge amount of

00:33:26,080 --> 00:33:28,480
role

00:33:26,559 --> 00:33:30,640
that the cortex server side should

00:33:28,480 --> 00:33:32,000
necessarily be playing in this i just i

00:33:30,640 --> 00:33:34,559
can't think of anything we could do to

00:33:32,000 --> 00:33:37,919
help um

00:33:34,559 --> 00:33:38,640
but i do think the if if we go the

00:33:37,919 --> 00:33:41,440
hashmod

00:33:38,640 --> 00:33:43,279
subway like i think the current like it

00:33:41,440 --> 00:33:43,760
being an operator thing is a bit janky

00:33:43,279 --> 00:33:45,279
and

00:33:43,760 --> 00:33:48,080
and a much tidier way of doing that

00:33:45,279 --> 00:33:50,000
would be would be nice

00:33:48,080 --> 00:33:52,240
um i know for now we're kind of in the

00:33:50,000 --> 00:33:54,559
prometheus team we're just focused on

00:33:52,240 --> 00:33:56,559
getting the bare bones non-scalable

00:33:54,559 --> 00:33:59,120
version of the agent done first

00:33:56,559 --> 00:34:00,720
right um i don't think there's a huge

00:33:59,120 --> 00:34:02,640
amount of appetite in prometheus team

00:34:00,720 --> 00:34:04,399
richie when we talked about this

00:34:02,640 --> 00:34:05,760
before christmas there wasn't a huge

00:34:04,399 --> 00:34:08,879
appetite for

00:34:05,760 --> 00:34:10,639
the scalable stuff but you know

00:34:08,879 --> 00:34:12,879
that's just now right you know give it

00:34:10,639 --> 00:34:16,320
give it six months and i'm sure

00:34:12,879 --> 00:34:16,320
you know there'll be more of an appetite

00:34:16,399 --> 00:34:21,839
richard you're muted if you're talking

00:34:24,240 --> 00:34:28,159
we're seeing customers with some very

00:34:25,839 --> 00:34:28,639
large ks clusters that are asking us how

00:34:28,159 --> 00:34:31,919
to

00:34:28,639 --> 00:34:32,800
solve the scraping problem in both a

00:34:31,919 --> 00:34:35,839
scalable and

00:34:32,800 --> 00:34:37,200
highly available fashion so yeah yeah

00:34:35,839 --> 00:34:40,000
but i think if you

00:34:37,200 --> 00:34:41,119
if you just use the agent as it stands

00:34:40,000 --> 00:34:43,760
like it requires

00:34:41,119 --> 00:34:45,119
significantly less resources right so

00:34:43,760 --> 00:34:46,639
that it's not scalable that's not what

00:34:45,119 --> 00:34:47,040
i'm claiming but it does at least buy

00:34:46,639 --> 00:34:50,800
you a

00:34:47,040 --> 00:34:52,879
headroom to grow um then beyond that

00:34:50,800 --> 00:34:55,359
manual sharding is the is the current is

00:34:52,879 --> 00:34:58,240
the current state they are

00:34:55,359 --> 00:34:59,680
yeah okay we'll take that off and yet

00:34:58,240 --> 00:35:02,079
another small question

00:34:59,680 --> 00:35:02,880
is there a mechanism today in cortex to

00:35:02,079 --> 00:35:04,960
know

00:35:02,880 --> 00:35:06,160
which clients are sending the data like

00:35:04,960 --> 00:35:08,079
is there

00:35:06,160 --> 00:35:10,960
like the same way that the browser sends

00:35:08,079 --> 00:35:12,560
a user agent is there like a user agent

00:35:10,960 --> 00:35:16,079
to know whether it's cafana agent

00:35:12,560 --> 00:35:17,599
sending the data or probability server

00:35:16,079 --> 00:35:19,599
gotham you're nodding i don't actually

00:35:17,599 --> 00:35:21,520
know the answer to that one so

00:35:19,599 --> 00:35:23,119
the grafana agent sends its own user

00:35:21,520 --> 00:35:26,400
agent prometheus that's its own

00:35:23,119 --> 00:35:27,839
user agent we don't do anything with it

00:35:26,400 --> 00:35:29,760
in cortex

00:35:27,839 --> 00:35:32,480
um i think the best it's done is it goes

00:35:29,760 --> 00:35:32,480
out in the logs

00:35:32,640 --> 00:35:35,839
like we can enable the logs for that uh

00:35:35,040 --> 00:35:38,320
but

00:35:35,839 --> 00:35:39,599
like we don't do anything beyond that i

00:35:38,320 --> 00:35:42,880
think it should be done

00:35:39,599 --> 00:35:46,240
by a gateway or like i like what is the

00:35:42,880 --> 00:35:49,040
use case for acting upon this data

00:35:46,240 --> 00:35:52,720
uh we would like to know which what

00:35:49,040 --> 00:35:52,720
clients are sending us data

00:35:52,960 --> 00:35:56,720
in in that case i would basically

00:35:55,680 --> 00:35:58,720
suggest

00:35:56,720 --> 00:36:00,560
doing it at the gateway level logging

00:35:58,720 --> 00:36:02,480
that out and then building analytics on

00:36:00,560 --> 00:36:04,880
top of that

00:36:02,480 --> 00:36:06,800
you should also be then able to get

00:36:04,880 --> 00:36:09,359
which versions of prometheus are sending

00:36:06,800 --> 00:36:09,359
that as well

00:36:10,240 --> 00:36:14,480
yeah mark we might already have this

00:36:11,839 --> 00:36:18,160
logged if we go check

00:36:14,480 --> 00:36:18,160
excellent thank you thank you very much

00:36:20,880 --> 00:36:24,880
so we have like oh we have 10 minutes

00:36:23,520 --> 00:36:28,560
more um

00:36:24,880 --> 00:36:28,560
should we move on to the next one

00:36:28,960 --> 00:36:33,680
maintain the track sessions at cubecon

00:36:30,960 --> 00:36:33,680
eu marco

00:36:34,960 --> 00:36:40,800
yeah um yeah we should

00:36:38,720 --> 00:36:42,400
well we have one slot um for the

00:36:40,800 --> 00:36:46,400
maintenance track at cucumber

00:36:42,400 --> 00:36:48,720
and we should decide who pickups

00:36:46,400 --> 00:36:49,680
between the the cortex maintainer uh who

00:36:48,720 --> 00:36:51,280
gives

00:36:49,680 --> 00:36:52,800
a talk there um

00:36:51,280 --> 00:36:57,119
[Music]

00:36:52,800 --> 00:37:00,240
i personally me and peter submitted

00:36:57,119 --> 00:37:01,599
one one talk somewhat related to the

00:37:00,240 --> 00:37:04,960
cortex as well

00:37:01,599 --> 00:37:08,800
but um we will

00:37:04,960 --> 00:37:10,800
not know if the talk is accepted before

00:37:08,800 --> 00:37:13,520
february 7 which is a deadline for the

00:37:10,800 --> 00:37:13,520
maintainer track

00:37:14,160 --> 00:37:17,440
and i think you tom submitted the talk

00:37:16,640 --> 00:37:21,839
as well right

00:37:17,440 --> 00:37:24,240
yeah so anyway um

00:37:21,839 --> 00:37:24,960
should uh we should have a couple of

00:37:24,240 --> 00:37:28,480
persons

00:37:24,960 --> 00:37:29,520
um volunteering uh to give a talk about

00:37:28,480 --> 00:37:32,640
cortex

00:37:29,520 --> 00:37:36,160
um and then um

00:37:32,640 --> 00:37:39,280
filling up the the form

00:37:36,160 --> 00:37:39,280
with there with the abstract

00:37:42,320 --> 00:37:46,160
so ken and i gave it gave the talk at

00:37:44,240 --> 00:37:47,599
the last one so uh we'll i'll mean at

00:37:46,160 --> 00:37:50,640
least i'll uh

00:37:47,599 --> 00:37:52,720
count myself out

00:37:50,640 --> 00:37:56,079
me and thor gave her at last uh keep

00:37:52,720 --> 00:37:56,079
calling you anyarga

00:37:58,320 --> 00:38:05,040
i think i gave it somewhere like

00:38:02,240 --> 00:38:07,200
one and a half year ago or something um

00:38:05,040 --> 00:38:09,599
jacob i don't think you've done a talk

00:38:07,200 --> 00:38:09,599
have you

00:38:10,800 --> 00:38:19,839
you are still muted

00:38:19,920 --> 00:38:25,440
yeah your mic doesn't work does jacob

00:38:22,800 --> 00:38:27,040
i'm just going to volunteer you then

00:38:25,440 --> 00:38:29,040
brian when was the last time you uh you

00:38:27,040 --> 00:38:30,960
gave gave uh gave the maintainers one do

00:38:29,040 --> 00:38:34,480
you want to do it this time

00:38:30,960 --> 00:38:36,400
can do yeah i i i don't know i mean i

00:38:34,480 --> 00:38:39,200
can do like

00:38:36,400 --> 00:38:39,680
broad stuff i i don't know if i can do

00:38:39,200 --> 00:38:41,119
anything

00:38:39,680 --> 00:38:43,520
particularly in depth that's happened

00:38:41,119 --> 00:38:45,440
recently but yeah i mean this is the

00:38:43,520 --> 00:38:46,800
this is you know intro and and what

00:38:45,440 --> 00:38:48,240
cortex does and how it does that type of

00:38:46,800 --> 00:38:49,839
thing do you want to do you mind doing

00:38:48,240 --> 00:38:52,880
it with jacob

00:38:49,839 --> 00:38:56,800
can you hear me now yeah yeah

00:38:52,880 --> 00:39:00,000
can you hear me yes yeah okay sorry

00:38:56,800 --> 00:39:02,160
yeah i'd be happy to do a talk

00:39:00,000 --> 00:39:03,040
in georgia and if i would love to if you

00:39:02,160 --> 00:39:05,119
wanted to do it

00:39:03,040 --> 00:39:07,680
it's like an intro with me brian it

00:39:05,119 --> 00:39:07,680
sounds great

00:39:07,920 --> 00:39:15,280
all right chris chris gave christmas

00:39:12,000 --> 00:39:17,119
but he gave the talk 18 months ago i

00:39:15,280 --> 00:39:19,599
think anyway so

00:39:17,119 --> 00:39:22,800
you know i think it's uh definitely your

00:39:19,599 --> 00:39:22,800
time jacob and brian

00:39:23,440 --> 00:39:26,839
yeah so which one of us is going to

00:39:25,040 --> 00:39:29,839
submit the

00:39:26,839 --> 00:39:29,839
form

00:39:31,520 --> 00:39:36,960
have you received an email brian i

00:39:34,800 --> 00:39:39,599
received lots of emails

00:39:36,960 --> 00:39:40,400
no i mean they emailed from cncfa with

00:39:39,599 --> 00:39:43,839
their for

00:39:40,400 --> 00:39:43,839
link received people

00:39:44,240 --> 00:39:47,280
okay after the call i will forward you

00:39:46,320 --> 00:39:50,880
the himalayan way

00:39:47,280 --> 00:39:54,000
um so so i'm sure you have it

00:39:50,880 --> 00:39:56,560
uh register to offer maintainer track

00:39:54,000 --> 00:40:00,480
sessions that one

00:39:56,560 --> 00:40:00,480
yeah okay you you got it

00:40:01,040 --> 00:40:04,160
it's not due for a month

00:40:05,119 --> 00:40:12,800
anyway uh yeah sorry just one of us

00:40:08,240 --> 00:40:12,800
either jacob or i should uh fill that in

00:40:14,400 --> 00:40:18,000
next month is a whole new financial year

00:40:16,079 --> 00:40:20,400
for us so so i counted not due for a

00:40:18,000 --> 00:40:20,400
whole year

00:40:20,720 --> 00:40:24,319
shall i shall i do it because i i've

00:40:22,640 --> 00:40:25,280
done it before i mean just filling in

00:40:24,319 --> 00:40:30,400
the form

00:40:25,280 --> 00:40:30,400
yeah that sounds good to me okay

00:40:31,119 --> 00:40:38,079
nice cool so we have five minutes

00:40:35,200 --> 00:40:40,880
anybody wants to put in some last minute

00:40:38,079 --> 00:40:40,880
agenda items

00:40:42,560 --> 00:40:46,000
did you see the bug where query front

00:40:44,640 --> 00:40:48,720
end makes

00:40:46,000 --> 00:40:48,720
sub queries

00:40:49,040 --> 00:40:52,480
it's supposed to make sub crews isn't it

00:40:51,760 --> 00:40:57,200
yeah but not

00:40:52,480 --> 00:40:57,200
like this i didn't no wha what's the bug

00:40:58,560 --> 00:41:02,160
the i thought the sub query stuff the

00:41:00,880 --> 00:41:03,280
subquery stuff turned off for blocks

00:41:02,160 --> 00:41:05,119
anyway at the moment

00:41:03,280 --> 00:41:07,440
um be honest this is just this is a bug

00:41:05,119 --> 00:41:12,240
in the cache um

00:41:07,440 --> 00:41:12,240
it is three six four eight

00:41:12,560 --> 00:41:14,960
instead

00:41:18,319 --> 00:41:22,240
so if you if you look at the second

00:41:20,319 --> 00:41:22,410
comment where i pasted what came back

00:41:22,240 --> 00:41:24,000
from

00:41:22,410 --> 00:41:26,720
[Music]

00:41:24,000 --> 00:41:27,359
is there literally 50 this is a one-hour

00:41:26,720 --> 00:41:30,880
query

00:41:27,359 --> 00:41:37,280
where what's in the cache is 50

00:41:30,880 --> 00:41:37,280
um segments each of 15 seconds long

00:41:37,599 --> 00:41:40,960
well that's not supposed to happen

00:41:41,200 --> 00:41:44,400
well what's yeah i mean that someone's

00:41:43,040 --> 00:41:45,920
got a dashboard sitting in

00:41:44,400 --> 00:41:47,520
oh no okay someone's got dashboard

00:41:45,920 --> 00:41:48,480
sitting in front requesting data every

00:41:47,520 --> 00:41:50,240
15 seconds

00:41:48,480 --> 00:41:51,520
but for some reason they're not being

00:41:50,240 --> 00:41:52,880
merged

00:41:51,520 --> 00:41:54,800
the right-back should have merged them

00:41:52,880 --> 00:41:56,079
into one big extent these are extents

00:41:54,800 --> 00:41:59,280
not not sub-queries right

00:41:56,079 --> 00:42:01,359
we call them extents well the extents

00:41:59,280 --> 00:42:03,359
are or what comes back from the cache

00:42:01,359 --> 00:42:03,680
and then the the thing that it does next

00:42:03,359 --> 00:42:05,920
is

00:42:03,680 --> 00:42:07,440
is issues queries which i called sub

00:42:05,920 --> 00:42:08,720
queries yeah let's just call them

00:42:07,440 --> 00:42:10,319
queries

00:42:08,720 --> 00:42:11,839
so this is there are there are lots of

00:42:10,319 --> 00:42:14,800
15 second gaps

00:42:11,839 --> 00:42:15,200
interesting good one 45 second gaps

00:42:14,800 --> 00:42:17,520
right

00:42:15,200 --> 00:42:18,800
how interesting well yeah it should fix

00:42:17,520 --> 00:42:20,640
mean

00:42:18,800 --> 00:42:23,920
there's this is like uh you know it's

00:42:20,640 --> 00:42:26,560
technically doing what it should do

00:42:23,920 --> 00:42:27,440
the best kind of thing but but yeah like

00:42:26,560 --> 00:42:31,119
uh

00:42:27,440 --> 00:42:31,119
and it technically took our service

00:42:32,640 --> 00:42:38,400
we turned off the query shorting so

00:42:36,720 --> 00:42:39,760
this is not this is different this is

00:42:38,400 --> 00:42:43,920
not this is

00:42:39,760 --> 00:42:46,079
this is just regular query front end i

00:42:43,920 --> 00:42:48,720
mean you can see i've put up a pr

00:42:46,079 --> 00:42:50,720
the patch i've got in production is is

00:42:48,720 --> 00:42:53,760
just to hit it with a hammer

00:42:50,720 --> 00:42:55,520
um and and just uh

00:42:53,760 --> 00:42:58,240
ignore anything in the cache that's

00:42:55,520 --> 00:43:01,520
under five minutes long

00:42:58,240 --> 00:43:03,680
um which totally cured the problem and

00:43:01,520 --> 00:43:05,119
made me very happy yeah i mean that

00:43:03,680 --> 00:43:06,720
seems reasonable to me to be really

00:43:05,119 --> 00:43:08,240
honest okay so i i

00:43:06,720 --> 00:43:10,079
i see what's happening tom so

00:43:08,240 --> 00:43:12,640
essentially oh we are

00:43:10,079 --> 00:43:13,760
finding all these step length gaps and

00:43:12,640 --> 00:43:15,359
so how did the

00:43:13,760 --> 00:43:19,119
how did these entries get in there to

00:43:15,359 --> 00:43:19,119
begin with is the thing i do not know

00:43:19,440 --> 00:43:22,800
that's kind of how i got to be thinking

00:43:21,119 --> 00:43:25,200
about maybe their clock is behind or

00:43:22,800 --> 00:43:27,359
something like that maybe that

00:43:25,200 --> 00:43:28,400
can can cause and ask them like have you

00:43:27,359 --> 00:43:30,560
got server logs

00:43:28,400 --> 00:43:32,880
can you ask them what they're doing i

00:43:30,560 --> 00:43:37,520
have i have sent them an email

00:43:32,880 --> 00:43:37,520
um and got no response they're in brazil

00:43:38,839 --> 00:43:41,839
uh

00:43:42,319 --> 00:43:45,680
because it it see this strikes me as

00:43:45,280 --> 00:43:47,680
there

00:43:45,680 --> 00:43:48,880
that you know i how would grafana

00:43:47,680 --> 00:43:52,480
generate this pattern

00:43:48,880 --> 00:43:54,160
on on prometheus right i you know

00:43:52,480 --> 00:43:56,800
i struggle to see that i'm pretty sure i

00:43:54,160 --> 00:43:58,240
mean i looked at the only

00:43:56,800 --> 00:44:00,240
the thing that sort of stood out to me

00:43:58,240 --> 00:44:02,480
was that it has this freshness thing

00:44:00,240 --> 00:44:04,240
which i never did understand

00:44:02,480 --> 00:44:05,760
actually maybe we could use the two

00:44:04,240 --> 00:44:07,359
minutes remaining for someone to explain

00:44:05,760 --> 00:44:09,200
that to me

00:44:07,359 --> 00:44:10,400
the it ignores the last 10 minutes but

00:44:09,200 --> 00:44:11,359
it's actually storing them in the cache

00:44:10,400 --> 00:44:12,640
anyway

00:44:11,359 --> 00:44:14,560
is that the thing well you see if i'd

00:44:12,640 --> 00:44:16,480
had that set to 10 minutes i suspect i

00:44:14,560 --> 00:44:18,640
would not have seen this problem

00:44:16,480 --> 00:44:20,720
what have you got it set to the default

00:44:18,640 --> 00:44:24,720
one minute

00:44:20,720 --> 00:44:28,240
what is ours set to gotham 10 minutes

00:44:24,720 --> 00:44:30,240
interesting so that's clock skew isn't

00:44:28,240 --> 00:44:32,880
it yeah

00:44:30,240 --> 00:44:34,160
their clocks are a minute out are they

00:44:32,880 --> 00:44:37,839
requesting

00:44:34,160 --> 00:44:37,839
have you got request logs brian

00:44:38,079 --> 00:44:43,760
only probably not from the point

00:44:42,079 --> 00:44:46,319
where this was going wrong because i

00:44:43,760 --> 00:44:48,319
sort of you know

00:44:46,319 --> 00:44:50,160
well it happened uh excitingly enough

00:44:48,319 --> 00:44:50,960
monday morning it's like hey back to

00:44:50,160 --> 00:44:54,319
work brian

00:44:50,960 --> 00:44:58,160
everything's failing and

00:44:54,319 --> 00:44:59,200
uh it took me a a a day or so to get

00:44:58,160 --> 00:45:00,800
everything up to date

00:44:59,200 --> 00:45:02,240
all the queries logged and everything

00:45:00,800 --> 00:45:03,200
and then i figured out what the problem

00:45:02,240 --> 00:45:07,119
was and

00:45:03,200 --> 00:45:08,960
um i suppose actually i'm still logging

00:45:07,119 --> 00:45:10,560
all these so if they're still sending in

00:45:08,960 --> 00:45:14,079
the same queries

00:45:10,560 --> 00:45:16,000
i would say they are sending queries in

00:45:14,079 --> 00:45:18,319
the future

00:45:16,000 --> 00:45:19,200
we're then ignoring a minute of the

00:45:18,319 --> 00:45:21,359
future

00:45:19,200 --> 00:45:22,640
and there's maybe 15 seconds left or

00:45:21,359 --> 00:45:24,960
something that we're cashing

00:45:22,640 --> 00:45:25,920
that's ending up with these gaps or

00:45:24,960 --> 00:45:28,000
something like that

00:45:25,920 --> 00:45:29,839
like that there's you know i think this

00:45:28,000 --> 00:45:32,480
is bug that could probably be fixed

00:45:29,839 --> 00:45:34,079
um but yes i saw on the chat definitely

00:45:32,480 --> 00:45:35,040
change the default this is a harmless

00:45:34,079 --> 00:45:38,160
change to the default

00:45:35,040 --> 00:45:40,560
change it to 10 minutes yeah

00:45:38,160 --> 00:45:42,160
i wish i understood that i mean i kind

00:45:40,560 --> 00:45:47,839
of get what you're saying that it

00:45:42,160 --> 00:45:47,839
patches over this bug but

00:45:48,560 --> 00:45:55,359
um and i think yeah behavior of

00:45:52,800 --> 00:45:56,880
um i wonder whether i'd have to look at

00:45:55,359 --> 00:45:57,760
the code for the math but i wonder

00:45:56,880 --> 00:46:00,480
whether it's r

00:45:57,760 --> 00:46:01,440
it's ignoring the last minute of real

00:46:00,480 --> 00:46:03,119
time

00:46:01,440 --> 00:46:04,560
looking at the clock or whether it's

00:46:03,119 --> 00:46:05,839
ignoring the last minute of any query

00:46:04,560 --> 00:46:07,440
they send us

00:46:05,839 --> 00:46:11,040
because if it's the last minute of real

00:46:07,440 --> 00:46:11,040
time then

00:46:12,319 --> 00:46:16,800
yeah what weird one eh good one

00:46:15,359 --> 00:46:18,240
if you can get the logs of the of the

00:46:16,800 --> 00:46:20,880
queries that would make all the

00:46:18,240 --> 00:46:20,880
difference i think

00:46:21,440 --> 00:46:25,760
because it literally you just compare

00:46:22,880 --> 00:46:27,520
the query the url they're sending pick

00:46:25,760 --> 00:46:28,560
the end time out of it and compare that

00:46:27,520 --> 00:46:30,400
should be now

00:46:28,560 --> 00:46:31,680
and if that's different to the you know

00:46:30,400 --> 00:46:33,680
substantially different to the long

00:46:31,680 --> 00:46:35,040
time stamp of of the query then they've

00:46:33,680 --> 00:46:36,240
got clock drift and

00:46:35,040 --> 00:46:38,160
and then it'll be relatively easy to

00:46:36,240 --> 00:46:40,000
reproduce ping me on

00:46:38,160 --> 00:46:41,040
on slack if you find it and i'll i'll

00:46:40,000 --> 00:46:41,760
take it i'm not doing anything this

00:46:41,040 --> 00:46:42,880
weekend

00:46:41,760 --> 00:46:45,520
or for the next three months because

00:46:42,880 --> 00:46:45,520
we're in lockdown

00:46:46,400 --> 00:46:51,760
cool so we are actually out of time

00:46:50,160 --> 00:46:53,920
um anything else that people want to

00:46:51,760 --> 00:46:57,440
bring up before we depart

00:46:53,920 --> 00:47:00,960
happy new year yes

00:46:57,440 --> 00:47:02,800
happy new year good to see you

00:47:00,960 --> 00:47:11,839
happy new year great to see everybody

00:47:02,800 --> 00:47:11,839
good new year cheers

00:50:08,079 --> 00:50:10,160

YouTube URL: https://www.youtube.com/watch?v=6rn-R-geRK0


