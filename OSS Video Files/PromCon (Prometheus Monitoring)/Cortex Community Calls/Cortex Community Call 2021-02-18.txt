Title: Cortex Community Call 2021-02-18
Publication date: 2021-02-19
Playlist: Cortex Community Calls
Description: 
	Join us! Details see https://docs.google.com/document/d/1shtXSAqp3t7fiC-9uZcKkq3mgwsItAJlH6YW6x1joZo/edit#heading=h.w3ldgr7wa4qe
Captions: 
	00:00:01,360 --> 00:00:05,200
we also don't have a lot of fun on the

00:00:03,120 --> 00:00:07,440
agenda though

00:00:05,200 --> 00:00:07,440
um

00:00:10,240 --> 00:00:14,920
yeah um so first question is what is the

00:00:12,799 --> 00:00:18,320
status of 1.7 release

00:00:14,920 --> 00:00:19,279
um i don't think ken will be able to

00:00:18,320 --> 00:00:22,320
make it today

00:00:19,279 --> 00:00:23,600
uh but he i think we need to cut another

00:00:22,320 --> 00:00:26,650
rc

00:00:23,600 --> 00:00:28,480
before we cut a release

00:00:26,650 --> 00:00:32,560
[Music]

00:00:28,480 --> 00:00:32,560
the query front-end fix yeah

00:00:36,000 --> 00:00:40,320
with which query font and fix we're

00:00:37,760 --> 00:00:40,320
talking about

00:00:40,559 --> 00:00:44,239
um so there was a case so essentially if

00:00:43,600 --> 00:00:48,239
you have a

00:00:44,239 --> 00:00:49,200
very large step uh and when you split by

00:00:48,239 --> 00:00:51,199
24 hours

00:00:49,200 --> 00:00:52,960
uh assuming you have a step of like 20

00:00:51,199 --> 00:00:55,199
hours there could be only a single point

00:00:52,960 --> 00:00:57,840
in that window

00:00:55,199 --> 00:00:58,800
and when that happens we the start time

00:00:57,840 --> 00:01:01,920
and end time

00:00:58,800 --> 00:01:05,519
will be same will be same and we were

00:01:01,920 --> 00:01:08,080
we were silently ignoring those points

00:01:05,519 --> 00:01:09,040
if they were cached so this was a recent

00:01:08,080 --> 00:01:13,840
regression

00:01:09,040 --> 00:01:13,840
that we that's in master now

00:01:20,240 --> 00:01:23,600
cool um i think we should cut another rc

00:01:22,560 --> 00:01:28,320
uh wait a day

00:01:23,600 --> 00:01:31,680
and then just

00:01:28,320 --> 00:01:34,560
uh just release it at this point i don't

00:01:31,680 --> 00:01:37,520
think we'll find more bugs

00:01:34,560 --> 00:01:38,400
it is this back reported already in the

00:01:37,520 --> 00:01:42,000
in the

00:01:38,400 --> 00:01:46,479
release is once a branch or not yet

00:01:42,000 --> 00:01:46,479
it's there in one seven okay okay

00:01:50,880 --> 00:01:57,360
cool um so moving on

00:01:54,320 --> 00:02:01,200
um i i have a design dock that i

00:01:57,360 --> 00:02:04,640
just shared right before this call um

00:02:01,200 --> 00:02:07,680
so we talked about h appears desyncing

00:02:04,640 --> 00:02:11,039
uh in the last call where the follower

00:02:07,680 --> 00:02:12,800
the leader could fall behind and if you

00:02:11,039 --> 00:02:15,920
restart prometheus at that point

00:02:12,800 --> 00:02:19,040
because if you want to fix that uh

00:02:15,920 --> 00:02:22,160
the follower becomes the leader

00:02:19,040 --> 00:02:25,920
and you lose all the data that the

00:02:22,160 --> 00:02:25,920
leader could not have sent before

00:02:26,400 --> 00:02:31,200
so um yeah so i shared a design dock it

00:02:30,239 --> 00:02:33,599
has three options

00:02:31,200 --> 00:02:35,440
uh the first option is you just if a

00:02:33,599 --> 00:02:36,000
follower is sending data that the leader

00:02:35,440 --> 00:02:39,120
has not yet

00:02:36,000 --> 00:02:40,720
sent uh send 500 errors so that the

00:02:39,120 --> 00:02:43,920
follower will keep on trying

00:02:40,720 --> 00:02:46,239
until the leader also has sent that

00:02:43,920 --> 00:02:47,920
the other option is if a follower is

00:02:46,239 --> 00:02:49,519
sending data in the future like one

00:02:47,920 --> 00:02:50,000
minute into the future compared to the

00:02:49,519 --> 00:02:53,120
leader

00:02:50,000 --> 00:02:53,120
just switch replicas

00:02:53,200 --> 00:02:57,120
the third option is to store everything

00:02:55,120 --> 00:02:59,040
and need you pet query and compaction

00:02:57,120 --> 00:03:02,640
time but that will just drive up the

00:02:59,040 --> 00:03:05,840
cost and everything too much so that's

00:03:02,640 --> 00:03:05,840
kind of not a valid option

00:03:09,120 --> 00:03:12,400
or so i've i've written things similar

00:03:10,959 --> 00:03:14,480
to this like as just

00:03:12,400 --> 00:03:16,000
like remote right deduplicating proxies

00:03:14,480 --> 00:03:18,319
before and i kind of did

00:03:16,000 --> 00:03:20,480
i did a combination of the first two

00:03:18,319 --> 00:03:23,360
where i would 500 for a while

00:03:20,480 --> 00:03:26,080
and then switch if it was just falling

00:03:23,360 --> 00:03:26,080
too far behind

00:03:28,159 --> 00:03:32,400
because otherwise you'll still lose some

00:03:29,680 --> 00:03:36,239
amount of data um

00:03:32,400 --> 00:03:39,760
just as i think from our

00:03:36,239 --> 00:03:43,599
i think the problem of uh triggering uh

00:03:39,760 --> 00:03:45,519
highlights 500 uh

00:03:43,599 --> 00:03:48,959
it's still there right if we mix that's

00:03:45,519 --> 00:03:48,959
the true approaches

00:03:51,519 --> 00:03:55,760
is it just me or are we hearing marco

00:03:53,360 --> 00:03:55,760
twice

00:03:58,239 --> 00:04:01,599
there was something weird for sure and i

00:04:00,159 --> 00:04:03,280
don't know if it's my

00:04:01,599 --> 00:04:05,360
not great internet in the mountains or

00:04:03,280 --> 00:04:06,959
something else

00:04:05,360 --> 00:04:09,200
i think they're hearing marco twice for

00:04:06,959 --> 00:04:11,360
some reason um or it could just be me

00:04:09,200 --> 00:04:11,360
i'm

00:04:12,840 --> 00:04:18,239
confused

00:04:15,040 --> 00:04:19,280
is there a way to not send 500 to 500 to

00:04:18,239 --> 00:04:22,320
force the retry

00:04:19,280 --> 00:04:22,320
i mean 500

00:04:22,400 --> 00:04:30,000
seems a little bit of an excessive

00:04:26,080 --> 00:04:33,040
error code if it's if it's by design

00:04:30,000 --> 00:04:33,040
that we send it it's kind of

00:04:33,759 --> 00:04:36,960
um so there is one thing that we could

00:04:36,560 --> 00:04:39,520
do

00:04:36,960 --> 00:04:41,680
uh which is that my next point how do we

00:04:39,520 --> 00:04:44,400
handle the new four two nine errors

00:04:41,680 --> 00:04:46,240
error handling and prometheus so we

00:04:44,400 --> 00:04:47,440
could send a four to nine with the retry

00:04:46,240 --> 00:04:50,800
after header and

00:04:47,440 --> 00:04:53,360
this means the follower prometheus will

00:04:50,800 --> 00:04:53,360
retry

00:04:53,520 --> 00:04:57,120
and if we are sending too many four two

00:04:55,919 --> 00:05:00,880
nines we just switch

00:04:57,120 --> 00:05:00,880
at that point i think that's better

00:05:02,880 --> 00:05:05,919
interesting i i did not consider a

00:05:04,800 --> 00:05:09,199
combination of one

00:05:05,919 --> 00:05:10,160
and two um yeah i will talk to chris

00:05:09,199 --> 00:05:12,000
after this and see

00:05:10,160 --> 00:05:14,560
what that entails and i'll add a fourth

00:05:12,000 --> 00:05:17,840
point uh into the design top

00:05:14,560 --> 00:05:19,280
yeah um i can look up that code elijah

00:05:17,840 --> 00:05:22,560
would have access to it

00:05:19,280 --> 00:05:22,560
so elijah can uh

00:05:22,880 --> 00:05:27,759
could um

00:05:28,479 --> 00:05:31,520
since yeah that that was stuff i wrote

00:05:30,560 --> 00:05:35,440
at splunk before

00:05:31,520 --> 00:05:39,520
leaving that's the d-dupe in

00:05:35,440 --> 00:05:44,479
um that d-deep proxy that

00:05:39,520 --> 00:05:44,479
we have um so you take a look at that

00:05:44,680 --> 00:05:49,360
[Music]

00:05:47,120 --> 00:05:50,479
cool um yeah i don't consider that let

00:05:49,360 --> 00:05:52,880
me add a fourth point

00:05:50,479 --> 00:05:54,400
and then uh like bring in the cortex

00:05:52,880 --> 00:05:58,160
slack again and then we can

00:05:54,400 --> 00:06:01,840
we can take that up nice idea um

00:05:58,160 --> 00:06:02,960
cool so that's bringing me to the my

00:06:01,840 --> 00:06:05,680
next point

00:06:02,960 --> 00:06:06,000
prometheus added a new functionality

00:06:05,680 --> 00:06:08,560
which

00:06:06,000 --> 00:06:09,840
is off by default but you can configure

00:06:08,560 --> 00:06:14,479
retry after option

00:06:09,840 --> 00:06:14,479
in remote right config and

00:06:14,720 --> 00:06:19,759
correct me if i'm wrong chris if a user

00:06:17,759 --> 00:06:21,600
is hitting four to nine errors and if we

00:06:19,759 --> 00:06:25,039
send a retry after header

00:06:21,600 --> 00:06:26,639
we never drop that sample

00:06:25,039 --> 00:06:28,479
correct right now that's sort of the

00:06:26,639 --> 00:06:30,880
next step is we need to add

00:06:28,479 --> 00:06:32,479
let's drop the samples after some set of

00:06:30,880 --> 00:06:33,199
rules and there's about 10 different

00:06:32,479 --> 00:06:36,639
ideas of how

00:06:33,199 --> 00:06:38,800
that set of rules could be i think

00:06:36,639 --> 00:06:39,840
the person who is working on that pr is

00:06:38,800 --> 00:06:41,919
writing up a

00:06:39,840 --> 00:06:42,960
proposal for trying to collect those

00:06:41,919 --> 00:06:46,319
ideas together

00:06:42,960 --> 00:06:47,600
and how to actually drop it um oh

00:06:46,319 --> 00:06:49,680
i think he said he was hoping to get to

00:06:47,600 --> 00:06:51,840
it this week but if i'll

00:06:49,680 --> 00:06:54,240
ask him sometime in the next week or two

00:06:51,840 --> 00:06:57,440
if i don't see anything

00:06:54,240 --> 00:06:59,520
yeah do we want to like should we even

00:06:57,440 --> 00:07:00,240
tell our users to enable it because it's

00:06:59,520 --> 00:07:04,240
kind of

00:07:00,240 --> 00:07:06,639
common for us to rate limit users

00:07:04,240 --> 00:07:08,560
i would not suggest users of cortex

00:07:06,639 --> 00:07:10,560
enable it there are some systems that

00:07:08,560 --> 00:07:10,960
i've used that i would enable it because

00:07:10,560 --> 00:07:12,639
i've

00:07:10,960 --> 00:07:14,000
literally just have had proxies there

00:07:12,639 --> 00:07:17,599
that does this

00:07:14,000 --> 00:07:19,199
already um but it's mostly for things

00:07:17,599 --> 00:07:21,360
like we're sending to something that

00:07:19,199 --> 00:07:23,520
happens to be backed by kinesis that

00:07:21,360 --> 00:07:30,000
might rate limit you for like a second

00:07:23,520 --> 00:07:32,960
and then the next second it's fine um

00:07:30,000 --> 00:07:35,039
that's fair uh so uses of cortex won't

00:07:32,960 --> 00:07:36,960
enable it and we will see how to handle

00:07:35,039 --> 00:07:40,560
it once we know

00:07:36,960 --> 00:07:44,720
how to like what the drop behavior is

00:07:40,560 --> 00:07:48,639
yeah uh we can in cortex we could decide

00:07:44,720 --> 00:07:51,039
what should be like a 429 versus a 422

00:07:48,639 --> 00:07:53,280
um like should those in chester like

00:07:51,039 --> 00:07:58,800
you've reached your maximum series

00:07:53,280 --> 00:08:00,319
should that be maybe a 422 instead

00:07:58,800 --> 00:08:01,919
that might be better you already changed

00:08:00,319 --> 00:08:04,800
it yeah it's

00:08:01,919 --> 00:08:05,919
400 but you feel 400. i mean you think

00:08:04,800 --> 00:08:09,120
uh different different

00:08:05,919 --> 00:08:09,120
status quo is what is better

00:08:09,360 --> 00:08:15,440
i don't have strong feelings like i

00:08:11,520 --> 00:08:17,840
think 400 can mean this is badly formed

00:08:15,440 --> 00:08:27,840
but i i think people will get the idea

00:08:17,840 --> 00:08:27,840
pretty quick

00:08:30,879 --> 00:08:34,880
so we're basically at the end of the

00:08:32,479 --> 00:08:34,880
agenda

00:08:35,200 --> 00:08:41,440
hey uh it's brian worm here at wave

00:08:38,080 --> 00:08:44,690
works i cannot date that we

00:08:41,440 --> 00:08:46,560
we're now running the box storage um

00:08:44,690 --> 00:08:50,480
[Music]

00:08:46,560 --> 00:08:54,959
well in everywhere in production

00:08:50,480 --> 00:08:58,160
um and running

00:08:54,959 --> 00:09:00,080
batch converting backwards

00:08:58,160 --> 00:09:02,160
oh yeah i put up a pr for that for

00:09:00,080 --> 00:09:06,160
dynamodb

00:09:02,160 --> 00:09:08,480
um peter wrote it's a really nice

00:09:06,160 --> 00:09:10,080
suite of programs the blocks convert

00:09:08,480 --> 00:09:14,000
tools

00:09:10,080 --> 00:09:17,200
um they're kind of written to

00:09:14,000 --> 00:09:18,720
to scale out to to run

00:09:17,200 --> 00:09:21,120
different parts of the process in

00:09:18,720 --> 00:09:22,480
parallel and

00:09:21,120 --> 00:09:25,040
once you get it going it runs really

00:09:22,480 --> 00:09:27,200
nicely um

00:09:25,040 --> 00:09:28,480
but it was written for big table only so

00:09:27,200 --> 00:09:32,720
i

00:09:28,480 --> 00:09:32,720
ported the relevant bits to dynamodb

00:09:35,279 --> 00:09:39,200
um so i'm looking forward to our amazon

00:09:38,800 --> 00:09:42,320
bill

00:09:39,200 --> 00:09:42,320
dropping by about half

00:09:45,279 --> 00:09:48,480
have you have you already shut down

00:09:47,440 --> 00:09:51,040
anyone would it be

00:09:48,480 --> 00:09:51,920
have i what uh have you already shot the

00:09:51,040 --> 00:09:53,680
dynamodb

00:09:51,920 --> 00:09:56,480
but i mean i've already deleted the

00:09:53,680 --> 00:10:00,399
clothes in dynamodb

00:09:56,480 --> 00:10:02,800
uh so we have like

00:10:00,399 --> 00:10:05,040
so i did the conversion at the end of

00:10:02,800 --> 00:10:08,399
last week um

00:10:05,040 --> 00:10:13,200
so so we have effectively six days of

00:10:08,399 --> 00:10:15,510
data in s3 and four years of data in

00:10:13,200 --> 00:10:16,720
dynamodb um

00:10:15,510 --> 00:10:19,839
[Music]

00:10:16,720 --> 00:10:21,120
so we we we're no longer writing to

00:10:19,839 --> 00:10:24,000
dynamodb

00:10:21,120 --> 00:10:26,480
but we we've it'll take a while to batch

00:10:24,000 --> 00:10:26,480
convert

00:10:26,959 --> 00:10:30,000
well the bulk of it is in the last three

00:10:29,519 --> 00:10:32,160
months

00:10:30,000 --> 00:10:34,560
it'll it'll take a couple of weeks

00:10:32,160 --> 00:10:38,079
probably to

00:10:34,560 --> 00:10:41,440
to convert the the three months worth

00:10:38,079 --> 00:10:43,440
and then it what would be slightly nicer

00:10:41,440 --> 00:10:46,160
is if we could go forwards in time

00:10:43,440 --> 00:10:47,200
to do that there's only one date right

00:10:46,160 --> 00:10:48,800
in the code there's

00:10:47,200 --> 00:10:50,800
there's a date like everything after

00:10:48,800 --> 00:10:52,399
this is is one thing and everything

00:10:50,800 --> 00:10:55,200
before this is another thing

00:10:52,399 --> 00:10:56,720
well actually you know we had we had the

00:10:55,200 --> 00:10:59,440
um

00:10:56,720 --> 00:11:01,279
schema file so you can have it there's

00:10:59,440 --> 00:11:02,640
one date and everything after that date

00:11:01,279 --> 00:11:04,160
is one thing and everything before that

00:11:02,640 --> 00:11:06,800
date can be 20 different things

00:11:04,160 --> 00:11:08,160
because we wrote that more flexibly and

00:11:06,800 --> 00:11:09,680
it would probably make more sense to

00:11:08,160 --> 00:11:12,480
merge those two concepts

00:11:09,680 --> 00:11:12,480
but um

00:11:12,880 --> 00:11:20,000
uh yeah i i would actually rather

00:11:16,800 --> 00:11:23,760
convert the old data first because it

00:11:20,000 --> 00:11:25,200
it's less critical but the way it's

00:11:23,760 --> 00:11:26,800
coded i have to con i have to go

00:11:25,200 --> 00:11:29,839
backwards from

00:11:26,800 --> 00:11:29,839
when i started

00:11:32,240 --> 00:11:39,600
these are all tedious details

00:11:35,839 --> 00:11:41,760
um yeah we only had one kind of massive

00:11:39,600 --> 00:11:43,200
blow up

00:11:41,760 --> 00:11:45,920
which i don't really understand well

00:11:43,200 --> 00:11:47,839
yeah i didn't spend a lot of time

00:11:45,920 --> 00:11:50,900
debugging it i rebooted the machine

00:11:47,839 --> 00:11:52,800
and went back to bed and uh

00:11:50,900 --> 00:11:54,320
[Music]

00:11:52,800 --> 00:11:56,160
and it hasn't happened again which is

00:11:54,320 --> 00:11:58,639
not what i was expecting

00:11:56,160 --> 00:12:00,880
you know usually if something blows up

00:11:58,639 --> 00:12:04,720
at once it's going to blow up again

00:12:00,880 --> 00:12:07,279
what was the issue what was the what

00:12:04,720 --> 00:12:09,760
issue i don't i don't know i rebooted

00:12:07,279 --> 00:12:11,920
the machine went back to bed

00:12:09,760 --> 00:12:15,360
i mean the symptom is the querier went

00:12:11,920 --> 00:12:15,360
up to 55 gigabytes

00:12:17,360 --> 00:12:22,720
and yeah that took out the entire

00:12:22,839 --> 00:12:27,360
machine

00:12:24,240 --> 00:12:31,040
you mean sorry

00:12:27,360 --> 00:12:31,040
it took all the memory of the machine

00:12:31,360 --> 00:12:36,560
well it's a 64 gig machine

00:12:36,800 --> 00:12:42,240
the symptoms are the the largest heat

00:12:39,680 --> 00:12:43,920
measurement was 55 gigabytes

00:12:42,240 --> 00:12:46,079
and shortly after that the whole machine

00:12:43,920 --> 00:12:50,959
was broken

00:12:46,079 --> 00:12:54,320
um and you did not identify like a crazy

00:12:50,959 --> 00:12:54,320
query going on at that time

00:12:55,600 --> 00:12:59,760
right uh

00:13:00,399 --> 00:13:03,519
yeah that's uh

00:13:03,920 --> 00:13:07,839
that's not an easy task

00:13:12,959 --> 00:13:16,240
but actually i did i didn't even try i

00:13:14,959 --> 00:13:19,200
mean like like i said when i

00:13:16,240 --> 00:13:20,079
i went back to bed and expected that it

00:13:19,200 --> 00:13:22,240
would happen some more

00:13:20,079 --> 00:13:23,760
and i'd have some more to try and figure

00:13:22,240 --> 00:13:25,839
out the pattern

00:13:23,760 --> 00:13:27,519
but it only ever happened once i think

00:13:25,839 --> 00:13:28,959
it's pretty interesting because we have

00:13:27,519 --> 00:13:30,880
memory issues that we're accepting the

00:13:28,959 --> 00:13:34,480
query so we have memory memories in this

00:13:30,880 --> 00:13:37,600
gateway um the query is much different

00:13:34,480 --> 00:13:38,800
between the blocks storage and the chunk

00:13:37,600 --> 00:13:41,839
switch

00:13:38,800 --> 00:13:43,199
it's i mean it's it's where with this

00:13:41,839 --> 00:13:46,880
amount of change

00:13:43,199 --> 00:13:49,519
um and we are going to see

00:13:46,880 --> 00:13:50,959
how many she is at quick time in the

00:13:49,519 --> 00:13:51,600
store game which is something i'm

00:13:50,959 --> 00:13:55,040
currently

00:13:51,600 --> 00:13:59,360
also going to work on among other things

00:13:55,040 --> 00:14:02,240
and high memory in danger we have a

00:13:59,360 --> 00:14:03,600
large number of tenants on on a single

00:14:02,240 --> 00:14:07,279
tester

00:14:03,600 --> 00:14:10,160
which is something we're bringing on um

00:14:07,279 --> 00:14:12,160
but we are not actually experiencing

00:14:10,160 --> 00:14:16,160
higher initialization

00:14:12,160 --> 00:14:20,000
in the query so would be interesting

00:14:16,160 --> 00:14:22,320
if uh okay can't you hear me well

00:14:20,000 --> 00:14:23,360
uh uh so answer i'm sorry hey i have a

00:14:22,320 --> 00:14:25,440
video about something let me change a

00:14:23,360 --> 00:14:28,839
bit max headroom

00:14:25,440 --> 00:14:30,240
i don't know if that translates

00:14:28,839 --> 00:14:32,079
culturally

00:14:30,240 --> 00:14:33,519
this is a different microphone is it

00:14:32,079 --> 00:14:37,680
better

00:14:33,519 --> 00:14:39,360
yeah so i bought it's a big microphone

00:14:37,680 --> 00:14:43,120
which is broken

00:14:39,360 --> 00:14:43,920
apparently uh yeah i was just mentioning

00:14:43,120 --> 00:14:46,880
that uh

00:14:43,920 --> 00:14:48,000
yeah uh we we didn't notice uh um a

00:14:46,880 --> 00:14:49,279
significant difference in the

00:14:48,000 --> 00:14:52,320
memorialization

00:14:49,279 --> 00:14:54,959
um in the query when we switched

00:14:52,320 --> 00:14:56,399
between the two storages uh we did for

00:14:54,959 --> 00:14:58,160
the injustice and the solution that's

00:14:56,399 --> 00:14:59,920
the

00:14:58,160 --> 00:15:01,519
yeah well it's the symptom is not like

00:14:59,920 --> 00:15:03,440
it used more memory there's some the

00:15:01,519 --> 00:15:04,720
symptom like it sits there using one

00:15:03,440 --> 00:15:08,880
gigabyte

00:15:04,720 --> 00:15:12,160
all day and then suddenly it went to 55.

00:15:08,880 --> 00:15:14,240
you know it's not this is it's not like

00:15:12,160 --> 00:15:16,560
uh using more memory it's a

00:15:14,240 --> 00:15:27,839
horrendous runaway bug that took out the

00:15:16,560 --> 00:15:27,839
entire machine

00:15:31,199 --> 00:15:36,959
brian um in regards to

00:15:34,480 --> 00:15:38,839
your block i'm gonna call it block

00:15:36,959 --> 00:15:42,000
converter

00:15:38,839 --> 00:15:42,639
um is that something you all just built

00:15:42,000 --> 00:15:47,199
in house

00:15:42,639 --> 00:15:50,560
um is that up anywhere it's pure

00:15:47,199 --> 00:15:53,920
okay cool well so so to be clear

00:15:50,560 --> 00:15:56,800
um uh peter i don't know how to

00:15:53,920 --> 00:16:00,320
pronounce his second name

00:15:56,800 --> 00:16:04,079
whatever peter um

00:16:00,320 --> 00:16:05,839
uh at grafana labs wrote a whole suite

00:16:04,079 --> 00:16:06,399
of programs which go under the blocks

00:16:05,839 --> 00:16:10,560
convert

00:16:06,399 --> 00:16:13,279
name um i have written

00:16:10,560 --> 00:16:15,600
a little bit extra in one of them to

00:16:13,279 --> 00:16:17,680
allow it to work on dynamodb

00:16:15,600 --> 00:16:19,040
because peter only had to get it to work

00:16:17,680 --> 00:16:23,040
on

00:16:19,040 --> 00:16:25,199
google okay cool yeah i'd be interested

00:16:23,040 --> 00:16:28,800
in taking a look at that

00:16:25,199 --> 00:16:28,800
yeah well i posted the pr

00:16:29,040 --> 00:16:32,399
monday or something you can probably

00:16:31,279 --> 00:16:35,600
find it

00:16:32,399 --> 00:16:39,519
thank you there's also a guide

00:16:35,600 --> 00:16:41,759
uh in our docs i put that in the

00:16:39,519 --> 00:16:43,360
chat here i'll also put it in oh yeah

00:16:41,759 --> 00:16:45,440
sure yes

00:16:43,360 --> 00:16:46,959
yeah the guide the guide is is very

00:16:45,440 --> 00:16:49,839
helpful

00:16:46,959 --> 00:16:51,199
i've got another pr up just to add a few

00:16:49,839 --> 00:16:54,079
more

00:16:51,199 --> 00:16:55,680
nuggets to that and update it slightly

00:16:54,079 --> 00:16:57,440
but i haven't i haven't posted that one

00:16:55,680 --> 00:17:00,240
yet

00:16:57,440 --> 00:17:01,279
yeah so i think we've done most of the

00:17:00,240 --> 00:17:05,039
work to

00:17:01,279 --> 00:17:10,079
we're running block storage now

00:17:05,039 --> 00:17:15,199
i'd like to get all that old data

00:17:10,079 --> 00:17:15,199
into s3 as well now so this could be

00:17:16,839 --> 00:17:21,919
helpful

00:17:18,400 --> 00:17:25,760
oh yeah i i maybe caveat as well i did

00:17:21,919 --> 00:17:30,480
schema v9 because that's the only

00:17:25,760 --> 00:17:32,720
well until you get back to 2016 that's

00:17:30,480 --> 00:17:38,480
the only data we've got

00:17:32,720 --> 00:17:39,600
um so yeah if you're using v10 or 11 or

00:17:38,480 --> 00:17:46,320
something like that there's a bit more

00:17:39,600 --> 00:17:48,559
work needed

00:17:46,320 --> 00:17:50,240
uh yeah and we need someone to review

00:17:48,559 --> 00:17:52,799
that here um

00:17:50,240 --> 00:17:54,480
unfortunately i'm neither an expert of

00:17:52,799 --> 00:17:58,000
the chunk storage and

00:17:54,480 --> 00:18:00,080
dynamodb so i don't feel to be the right

00:17:58,000 --> 00:18:03,679
person to review that change

00:18:00,080 --> 00:18:04,160
um i think brian if it works i mean

00:18:03,679 --> 00:18:05,600
you're

00:18:04,160 --> 00:18:07,360
you're you're already running it in

00:18:05,600 --> 00:18:10,799
production basically

00:18:07,360 --> 00:18:14,880
so why don't you agree to merge it

00:18:10,799 --> 00:18:15,520
yeah it's more like lack of tests and

00:18:14,880 --> 00:18:19,440
lack of

00:18:15,520 --> 00:18:23,520
error checking uh

00:18:19,440 --> 00:18:25,120
you know i'm i'm happy that someone else

00:18:23,520 --> 00:18:28,160
couldn't take it and try it

00:18:25,120 --> 00:18:29,120
um we might wanna just make sure that

00:18:28,160 --> 00:18:31,440
it's written

00:18:29,120 --> 00:18:32,480
in big letters that this this is you

00:18:31,440 --> 00:18:36,480
know there's a program that's

00:18:32,480 --> 00:18:39,840
effectively been run once by one person

00:18:36,480 --> 00:18:43,840
um it might not work as well as some of

00:18:39,840 --> 00:18:43,840
the other bits of cortex

00:18:59,120 --> 00:19:08,160
so this brings me to the question given

00:19:04,320 --> 00:19:10,960
most people are running blocks

00:19:08,160 --> 00:19:12,320
when should we deprecate chunks we're

00:19:10,960 --> 00:19:13,840
not already deprecated

00:19:12,320 --> 00:19:17,120
i think the the question is when should

00:19:13,840 --> 00:19:19,280
we recommend blocks

00:19:17,120 --> 00:19:22,400
i think now given like none of the

00:19:19,280 --> 00:19:25,039
maintainers are running chunks anymore

00:19:22,400 --> 00:19:26,799
uh every deprecated chunks i mean is

00:19:25,039 --> 00:19:28,080
there any statement in the documentation

00:19:26,799 --> 00:19:31,679
i don't think so

00:19:28,080 --> 00:19:31,679
i don't know not that i've seen

00:19:32,640 --> 00:19:36,880
so let's start recommending blocks uh

00:19:35,200 --> 00:19:38,400
let's remove the getting started guide

00:19:36,880 --> 00:19:40,080
of chunks or like hide it

00:19:38,400 --> 00:19:41,919
because today if people try to get

00:19:40,080 --> 00:19:45,039
started they see like three options

00:19:41,919 --> 00:19:47,039
it's it's even said strength storage

00:19:45,039 --> 00:19:50,880
default

00:19:47,039 --> 00:19:54,160
right now um

00:19:50,880 --> 00:19:56,080
yeah so we need to clean that up um so

00:19:54,160 --> 00:19:58,160
let's recommend let's recommend blocks

00:19:56,080 --> 00:19:59,919
let's change the default to blocks

00:19:58,160 --> 00:20:02,880
without breaking users i'm not sure how

00:19:59,919 --> 00:20:02,880
we can do that um

00:20:03,840 --> 00:20:21,840
one second um yeah this is a big topic

00:20:33,039 --> 00:20:37,919
yeah i don't uh well

00:20:36,159 --> 00:20:39,440
i can't find where we deprecated it if

00:20:37,919 --> 00:20:41,919
we did i thought

00:20:39,440 --> 00:20:41,919
let me see

00:20:42,960 --> 00:20:49,840
we did not deprecate it um

00:20:46,000 --> 00:20:51,440
but we should um yeah

00:20:49,840 --> 00:20:53,600
but i kind of want to get some broad

00:20:51,440 --> 00:20:56,960
consensus so i'll probably send

00:20:53,600 --> 00:20:58,559
a github issue or pr and once i have

00:20:56,960 --> 00:21:00,159
mgdm we can start

00:20:58,559 --> 00:21:03,840
from all the maintainers we can start

00:21:00,159 --> 00:21:03,840
that process

00:21:05,200 --> 00:21:08,960
are you seeing any query performance

00:21:06,720 --> 00:21:11,840
improvements or anything like that once

00:21:08,960 --> 00:21:11,840
you move to blocks

00:21:13,039 --> 00:21:20,320
uh probably um

00:21:18,000 --> 00:21:21,679
i tried squinting at the charts i mean

00:21:20,320 --> 00:21:26,080
sort of

00:21:21,679 --> 00:21:26,080
it's sort of hard to tell because um

00:21:26,880 --> 00:21:30,000
uh you know some somebody trying to see

00:21:29,760 --> 00:21:33,200
how

00:21:30,000 --> 00:21:34,480
hard they can push it will will change

00:21:33,200 --> 00:21:36,640
the average

00:21:34,480 --> 00:21:38,559
or you know change the p99 will move a

00:21:36,640 --> 00:21:41,840
lot if you have someone going hey can i

00:21:38,559 --> 00:21:41,840
look at six months of data now

00:21:42,840 --> 00:21:45,840
um

00:21:46,559 --> 00:21:52,960
so i mean it certainly works

00:21:49,679 --> 00:21:54,720
way better than i first guessed i know

00:21:52,960 --> 00:21:56,240
i mean since i first guessed people have

00:21:54,720 --> 00:21:57,840
reassured me i

00:21:56,240 --> 00:21:59,280
guess i wouldn't have converted all of

00:21:57,840 --> 00:22:03,440
production otherwise but

00:21:59,280 --> 00:22:03,440
uh uh

00:22:05,679 --> 00:22:09,280
yeah i mean kind of conceptually you

00:22:07,919 --> 00:22:12,480
have a bunch of

00:22:09,280 --> 00:22:14,250
gigabyte blocks on

00:22:12,480 --> 00:22:16,159
s3 um

00:22:14,250 --> 00:22:18,320
[Music]

00:22:16,159 --> 00:22:20,240
and i've i've tried killing various

00:22:18,320 --> 00:22:24,559
caches or you know i've tried

00:22:20,240 --> 00:22:27,520
to stress the cold cache aspect of it

00:22:24,559 --> 00:22:29,360
but it's it is very good at just you

00:22:27,520 --> 00:22:31,280
know bringing down enough to go answer

00:22:29,360 --> 00:22:33,360
the question and not bringing down the

00:22:31,280 --> 00:22:36,640
whole

00:22:33,360 --> 00:22:39,760
100 gigabytes or whatever

00:22:36,640 --> 00:22:41,280
um yeah

00:22:39,760 --> 00:22:43,280
i mean i guess there's some empirical

00:22:41,280 --> 00:22:46,640
evidence that somebody found

00:22:43,280 --> 00:22:50,000
a dark corner uh

00:22:46,640 --> 00:22:52,480
in terms of my 55 gigabyte heap

00:22:50,000 --> 00:22:52,480
um

00:22:53,360 --> 00:22:59,280
but they haven't found it again or

00:22:57,280 --> 00:23:00,480
i mean usually when someone's got fine

00:22:59,280 --> 00:23:03,520
something like that they've got it on a

00:23:00,480 --> 00:23:03,520
10 second retry

00:23:03,919 --> 00:23:09,600
it's fun times but uh

00:23:07,360 --> 00:23:10,720
but that one only happened once so yeah

00:23:09,600 --> 00:23:13,520
i think um

00:23:10,720 --> 00:23:14,000
i think the average is lower i'm

00:23:13,520 --> 00:23:17,440
actually

00:23:14,000 --> 00:23:18,400
um i'm actually running very few

00:23:17,440 --> 00:23:19,840
queriers

00:23:18,400 --> 00:23:22,000
yeah sorry that that was a kind of a

00:23:19,840 --> 00:23:23,440
consequence so so one querier took out

00:23:22,000 --> 00:23:24,880
the entire machine that it was running

00:23:23,440 --> 00:23:28,000
on

00:23:24,880 --> 00:23:28,320
so if it wasn't for that i would right

00:23:28,000 --> 00:23:30,480
now

00:23:28,320 --> 00:23:31,840
be running like lots of queries to to

00:23:30,480 --> 00:23:33,600
get a lot of parallelism

00:23:31,840 --> 00:23:35,280
but i'm actually running very few query

00:23:33,600 --> 00:23:38,880
like three

00:23:35,280 --> 00:23:42,799
um to uh kind of

00:23:38,880 --> 00:23:46,400
limit the blast radius um

00:23:42,799 --> 00:23:50,080
so it will actually speed up once i

00:23:46,400 --> 00:23:54,240
sort of lose the fear

00:23:50,080 --> 00:23:54,240
and uh bump that number up again

00:23:54,880 --> 00:24:01,200
is it a mutant cluster right oh yeah

00:23:58,799 --> 00:24:02,000
have you considered the sharper sharding

00:24:01,200 --> 00:24:04,080
huh

00:24:02,000 --> 00:24:05,600
have you considered shuffle shotting

00:24:04,080 --> 00:24:09,840
yeah

00:24:05,600 --> 00:24:12,320
you know one enormous change

00:24:09,840 --> 00:24:12,320
in a month

00:24:14,080 --> 00:24:20,240
uh shuffle shining can be enabled uh

00:24:18,480 --> 00:24:21,919
selectively on different paths so you

00:24:20,240 --> 00:24:22,960
can enable the right path and the read

00:24:21,919 --> 00:24:24,720
paths

00:24:22,960 --> 00:24:27,440
uh in the read pass you can enable in

00:24:24,720 --> 00:24:31,360
the store gateway only or in the query

00:24:27,440 --> 00:24:32,080
um so if you want to limit the number of

00:24:31,360 --> 00:24:35,919
concurrent

00:24:32,080 --> 00:24:37,600
queries a single tenant can run

00:24:35,919 --> 00:24:39,760
you can enable shuffle shouting with the

00:24:37,600 --> 00:24:46,880
query okay

00:24:39,760 --> 00:24:49,600
that's a good point

00:24:46,880 --> 00:24:51,440
but we still have the bug open where

00:24:49,600 --> 00:24:53,600
like if

00:24:51,440 --> 00:24:54,559
you crash a carrier then the shipping

00:24:53,600 --> 00:24:57,039
sharing will

00:24:54,559 --> 00:24:57,919
reassign it to a new carrier so like if

00:24:57,039 --> 00:25:00,559
you have

00:24:57,919 --> 00:25:02,080
a tenant that keeps that is actually the

00:25:00,559 --> 00:25:04,480
the root cause of your uh

00:25:02,080 --> 00:25:08,080
where you're running out of memory and

00:25:04,480 --> 00:25:14,640
keeps running that query over and over

00:25:08,080 --> 00:25:18,240
that's gonna not help

00:25:14,640 --> 00:25:18,240
we've encountered that issue actually

00:25:21,120 --> 00:25:28,080
yeah i mean that that is kind of

00:25:25,039 --> 00:25:31,279
um that you know

00:25:28,080 --> 00:25:32,640
we i've got a we organizationally have

00:25:31,279 --> 00:25:35,600
got four years

00:25:32,640 --> 00:25:37,840
of experience of of one thing blowing up

00:25:35,600 --> 00:25:39,840
in in a hundred different ways

00:25:37,840 --> 00:25:41,840
and now we're running another thing and

00:25:39,840 --> 00:25:43,200
we have very little experience of that

00:25:41,840 --> 00:25:48,400
blowing up

00:25:43,200 --> 00:25:52,480
um so i kind of want to go cautiously

00:25:48,400 --> 00:25:57,840
um experience all the

00:25:52,480 --> 00:25:57,840
all the different things blowing up

00:25:58,640 --> 00:26:02,080
yeah and there's still a lot to to learn

00:26:01,600 --> 00:26:06,000
and

00:26:02,080 --> 00:26:06,000
break in the block storage

00:26:06,400 --> 00:26:12,159
even if i think all people here are now

00:26:10,080 --> 00:26:16,559
running getting in production

00:26:12,159 --> 00:26:19,600
um i think we will still learn a lot uh

00:26:16,559 --> 00:26:22,240
about it and i'm pretty sure

00:26:19,600 --> 00:26:25,279
we will continue to improve it uh for

00:26:22,240 --> 00:26:28,720
for a long time

00:26:25,279 --> 00:26:32,480
we are still on the chunk story oh okay

00:26:28,720 --> 00:26:32,480
sorry sorry i didn't know yeah anyways

00:26:34,080 --> 00:26:37,600
actually i do have a a stupid question

00:26:36,720 --> 00:26:38,960
um

00:26:37,600 --> 00:26:40,799
you know when you look at the charts

00:26:38,960 --> 00:26:42,000
they everything they kind of the

00:26:40,799 --> 00:26:43,840
ingesters grow

00:26:42,000 --> 00:26:45,919
and then they compact and then they grow

00:26:43,840 --> 00:26:46,960
again and they all do that on the same

00:26:45,919 --> 00:26:50,159
cycle

00:26:46,960 --> 00:26:53,279
and it's it's odd hours like

00:26:50,159 --> 00:26:57,440
1 pm 3 p.m 5 p.m

00:26:53,279 --> 00:27:01,120
why because they're

00:26:57,440 --> 00:27:04,840
gone no we do that uh at utc

00:27:01,120 --> 00:27:07,360
like two hours a line to

00:27:04,840 --> 00:27:10,720
unexpected

00:27:07,360 --> 00:27:12,960
so it should be even hours for you yes

00:27:10,720 --> 00:27:14,080
but even i can get that right ah

00:27:12,960 --> 00:27:16,640
actually no so

00:27:14,080 --> 00:27:18,480
we let it go to three hours and then we

00:27:16,640 --> 00:27:19,039
cut the last two hours it should still

00:27:18,480 --> 00:27:22,320
be

00:27:19,039 --> 00:27:25,520
uh order even us but like

00:27:22,320 --> 00:27:27,520
we do that uh in prometheus because

00:27:25,520 --> 00:27:29,200
now you can basically if you if you have

00:27:27,520 --> 00:27:32,320
a block missing you can take it from a

00:27:29,200 --> 00:27:34,880
different prometheus and put it in here

00:27:32,320 --> 00:27:35,520
uh if a block is corrupt and stuff like

00:27:34,880 --> 00:27:38,080
that

00:27:35,520 --> 00:27:38,880
just aligning it to units time stamp

00:27:38,080 --> 00:27:42,399
helps a lot

00:27:38,880 --> 00:27:45,039
uh at least in theory

00:27:42,399 --> 00:27:45,840
uh and changing it could be a breaking

00:27:45,039 --> 00:27:47,600
change so

00:27:45,840 --> 00:27:50,080
we don't want to touch that having said

00:27:47,600 --> 00:27:54,720
that marco and i were talking about like

00:27:50,080 --> 00:27:58,320
adding ejector to this

00:27:54,720 --> 00:28:01,440
so if we if we if blocks

00:27:58,320 --> 00:28:02,240
are not aligned uh they compact the

00:28:01,440 --> 00:28:06,720
compactor

00:28:02,240 --> 00:28:06,720
as we know it today doesn't work um

00:28:07,039 --> 00:28:12,480
uh because otherwise it will end up

00:28:09,600 --> 00:28:15,360
compacting uh

00:28:12,480 --> 00:28:16,480
all blocks into a big giant block and

00:28:15,360 --> 00:28:19,679
not kept the

00:28:16,480 --> 00:28:21,039
compacted blocks all right time range

00:28:19,679 --> 00:28:23,200
bounded

00:28:21,039 --> 00:28:24,320
um obviously this is yet another thing

00:28:23,200 --> 00:28:26,480
we can fix it but

00:28:24,320 --> 00:28:28,000
we'll will require significant changes

00:28:26,480 --> 00:28:30,559
in the tsb compactor

00:28:28,000 --> 00:28:31,440
uh yeah what we're thinking of is to to

00:28:30,559 --> 00:28:34,399
add ejectors

00:28:31,440 --> 00:28:36,960
so basically to not have compactors uh

00:28:34,399 --> 00:28:39,840
compacting

00:28:36,960 --> 00:28:40,880
the the head uh at the same time which

00:28:39,840 --> 00:28:43,840
is starting at

00:28:40,880 --> 00:28:45,520
the minute zero every two hour but

00:28:43,840 --> 00:28:49,039
spreading

00:28:45,520 --> 00:28:52,559
the workload across i don't know

00:28:49,039 --> 00:28:52,559
30 minutes or something like this

00:28:54,399 --> 00:29:00,240
right um

00:28:58,399 --> 00:29:01,840
yeah so i understand the compactions oh

00:29:00,240 --> 00:29:03,120
yeah that reminded me of another thing i

00:29:01,840 --> 00:29:07,679
want the

00:29:03,120 --> 00:29:09,200
bucket uh path name

00:29:07,679 --> 00:29:10,720
like the first thing under the tenant

00:29:09,200 --> 00:29:14,720
name looks like a sha

00:29:10,720 --> 00:29:17,039
but not quite or something

00:29:14,720 --> 00:29:20,000
can we put the date in that or the date

00:29:17,039 --> 00:29:24,799
time or something like that in that path

00:29:20,000 --> 00:29:26,880
you mean in the block id yeah

00:29:24,799 --> 00:29:29,679
the first part of the block idea is the

00:29:26,880 --> 00:29:33,679
time step of when the block was kept

00:29:29,679 --> 00:29:35,840
um which base is it written in

00:29:33,679 --> 00:29:37,440
i don't know which base is it but it's

00:29:35,840 --> 00:29:40,240
the unix timestamp

00:29:37,440 --> 00:29:41,520
in a base i don't remember which one and

00:29:40,240 --> 00:29:45,520
then the second part

00:29:41,520 --> 00:29:49,520
uh in the second 60 16 bytes

00:29:45,520 --> 00:29:53,120
is just a random value yeah

00:29:49,520 --> 00:29:56,480
yeah it's the ul id but i don't remember

00:29:53,120 --> 00:29:58,480
which base is the encoding

00:29:56,480 --> 00:30:00,159
i mean you know it it just seems like

00:29:58,480 --> 00:30:02,720
that

00:30:00,159 --> 00:30:04,000
that optimization is not worth it like

00:30:02,720 --> 00:30:09,840
encoding the date

00:30:04,000 --> 00:30:09,840
as 0 1 e y f j

00:30:19,360 --> 00:30:26,159
it's a crackford base 32

00:30:22,720 --> 00:30:26,159
according to the specifications

00:30:32,880 --> 00:30:37,840
oh well i'll post that as an issue

00:30:38,000 --> 00:30:41,520
when we started working on the block

00:30:39,679 --> 00:30:44,799
storage

00:30:41,520 --> 00:30:46,399
almost an age ago we had this idea the

00:30:44,799 --> 00:30:47,440
problem is that the time stamp right now

00:30:46,399 --> 00:30:50,720
of the block

00:30:47,440 --> 00:30:52,960
is is just the time when the block was

00:30:50,720 --> 00:30:56,640
cut

00:30:52,960 --> 00:31:00,000
even if you decode the ul id

00:30:56,640 --> 00:31:01,600
you don't get the minimum maximum

00:31:00,000 --> 00:31:03,840
timestamp

00:31:01,600 --> 00:31:05,200
of samples within the block so when we

00:31:03,840 --> 00:31:08,799
designed at the very beginning the block

00:31:05,200 --> 00:31:11,440
storage we had this idea that to put

00:31:08,799 --> 00:31:12,399
in the path the minimum and maximum

00:31:11,440 --> 00:31:15,039
timestamp as well

00:31:12,399 --> 00:31:15,760
so that's just listing blocks in the

00:31:15,039 --> 00:31:18,880
bucket

00:31:15,760 --> 00:31:23,120
we know um

00:31:18,880 --> 00:31:26,159
which blocks to query given a specific

00:31:23,120 --> 00:31:29,440
given equipment now i think this

00:31:26,159 --> 00:31:29,440
that is no more

00:31:29,840 --> 00:31:34,799
an issue because we have introduced the

00:31:32,559 --> 00:31:36,960
packet index

00:31:34,799 --> 00:31:38,880
and this piece of information is already

00:31:36,960 --> 00:31:43,360
in the bucket index along with

00:31:38,880 --> 00:31:46,880
other information and start polluting

00:31:43,360 --> 00:31:50,080
the prefix the object graphics

00:31:46,880 --> 00:31:52,720
may not be much scalable while

00:31:50,080 --> 00:31:54,000
uh in the in the bucket index uh we have

00:31:52,720 --> 00:31:58,240
the ability to add more

00:31:54,000 --> 00:31:58,240
more metadata for each block

00:31:59,679 --> 00:32:04,480
it's not exactly polluting it's just

00:32:01,120 --> 00:32:04,480
writing it in a different encoding

00:32:05,120 --> 00:32:11,200
well it will get longer by like six

00:32:08,320 --> 00:32:11,200
bytes or something

00:32:11,279 --> 00:32:16,240
yeah um yeah i i i understand this but

00:32:15,279 --> 00:32:18,720
then uh if

00:32:16,240 --> 00:32:19,679
i mean it really depends uh what what do

00:32:18,720 --> 00:32:22,880
you want to get

00:32:19,679 --> 00:32:26,080
um having the the times

00:32:22,880 --> 00:32:26,480
in a different encoding yeah well like

00:32:26,080 --> 00:32:28,799
when i

00:32:26,480 --> 00:32:30,799
when i fire the thing up like when i'm

00:32:28,799 --> 00:32:31,760
wondering what's going on i can go to

00:32:30,799 --> 00:32:33,919
the console and

00:32:31,760 --> 00:32:36,000
on s3 and go and look at a list of

00:32:33,919 --> 00:32:37,919
buckets and

00:32:36,000 --> 00:32:39,440
so right now i get a bunch of

00:32:37,919 --> 00:32:43,279
meaningless

00:32:39,440 --> 00:32:47,360
text and if we made this change i'd get

00:32:43,279 --> 00:32:47,360
some indication of when it was working

00:32:48,640 --> 00:32:55,519
yeah uh my counter argument is that

00:32:52,159 --> 00:32:58,480
the s3y

00:32:55,519 --> 00:33:00,000
is not the best ui to explore blocks and

00:32:58,480 --> 00:33:01,679
not because of the st ui

00:33:00,000 --> 00:33:04,240
which is great but because it's just a

00:33:01,679 --> 00:33:07,279
generic one like the thanos ui

00:33:04,240 --> 00:33:10,240
um thanos is a

00:33:07,279 --> 00:33:11,760
web-based ui which shows you that the

00:33:10,240 --> 00:33:14,399
blocks over the time range

00:33:11,760 --> 00:33:15,919
in a nice way i think that kind of ui

00:33:14,399 --> 00:33:19,679
would be

00:33:15,919 --> 00:33:22,840
um better uh

00:33:19,679 --> 00:33:25,440
because you may you may display way more

00:33:22,840 --> 00:33:28,960
information than just what the

00:33:25,440 --> 00:33:31,679
s3 listing offers yeah

00:33:28,960 --> 00:33:32,480
uh i'm curious can you share a pointer

00:33:31,679 --> 00:33:36,240
to

00:33:32,480 --> 00:33:40,240
this thanos ui yeah i

00:33:36,240 --> 00:33:40,240
i write a link in the chat thanks

00:33:40,480 --> 00:33:44,000
uh so yeah it looks like we have a

00:33:41,840 --> 00:33:46,000
question in the chat

00:33:44,000 --> 00:33:48,559
uh running issues when storage gateway

00:33:46,000 --> 00:33:52,480
is taking a long time to start

00:33:48,559 --> 00:33:56,399
anyone know about that yeah

00:33:52,480 --> 00:33:57,840
we do so yes um

00:33:56,399 --> 00:33:59,679
there are two reasons why the store

00:33:57,840 --> 00:34:01,519
gateway is very slow to start up the

00:33:59,679 --> 00:34:02,320
first one is because it needs to to scan

00:34:01,519 --> 00:34:06,080
the bucket

00:34:02,320 --> 00:34:08,000
to um to list all the blocks

00:34:06,080 --> 00:34:09,359
in the packet and this has been solved

00:34:08,000 --> 00:34:11,200
with the bucket index but i think

00:34:09,359 --> 00:34:14,480
graphic industry is

00:34:11,200 --> 00:34:16,159
an optional and well still marked

00:34:14,480 --> 00:34:18,159
experimental feature but we are running

00:34:16,159 --> 00:34:21,599
in production since more than a month

00:34:18,159 --> 00:34:23,839
at which basically is a

00:34:21,599 --> 00:34:25,359
pertinent json file stored in the packet

00:34:23,839 --> 00:34:26,480
which is periodically updated by the

00:34:25,359 --> 00:34:29,839
compactor

00:34:26,480 --> 00:34:32,240
containing uh information about the

00:34:29,839 --> 00:34:34,079
entire list of blocks some metadata and

00:34:32,240 --> 00:34:36,079
the deletion marks

00:34:34,079 --> 00:34:37,760
of each of which talent so when the

00:34:36,079 --> 00:34:39,520
store gateway when when the cortex

00:34:37,760 --> 00:34:40,879
cluster is running with the packet index

00:34:39,520 --> 00:34:43,359
enabled the store gate will just

00:34:40,879 --> 00:34:44,000
read this packet index instead of

00:34:43,359 --> 00:34:47,520
issuing

00:34:44,000 --> 00:34:49,839
um list object operation against

00:34:47,520 --> 00:34:52,000
the the object store the second reason

00:34:49,839 --> 00:34:53,679
is that we have to download

00:34:52,000 --> 00:34:56,159
the index item which is a subset of the

00:34:53,679 --> 00:34:59,520
index for for each block

00:34:56,159 --> 00:35:02,960
and this is low operation and

00:34:59,520 --> 00:35:06,160
the the only solution we have

00:35:02,960 --> 00:35:07,599
is enable sharding so you

00:35:06,160 --> 00:35:09,680
when you enable charting uh you

00:35:07,599 --> 00:35:12,240
horizontally spread

00:35:09,680 --> 00:35:13,440
uh the blocks and so the index adder

00:35:12,240 --> 00:35:17,359
loaded by

00:35:13,440 --> 00:35:20,720
um store to to different replicas

00:35:17,359 --> 00:35:24,079
um that's how we we handle it

00:35:20,720 --> 00:35:25,920
um but like uh when you say it's taking

00:35:24,079 --> 00:35:29,200
a lot of time to start running

00:35:25,920 --> 00:35:32,160
how how long is it taking

00:35:29,200 --> 00:35:34,160
yeah this one basically yesterday it's

00:35:32,160 --> 00:35:36,320
almost like 14 hours so we

00:35:34,160 --> 00:35:37,520
i enabled with the bucket index enabled

00:35:36,320 --> 00:35:40,720
and still it's not

00:35:37,520 --> 00:35:44,400
uh come online actually

00:35:40,720 --> 00:35:47,839
do you share this uh this gcs bucket uh

00:35:44,400 --> 00:35:50,480
with with other users or is it just for

00:35:47,839 --> 00:35:51,520
block storage or do you also have chunks

00:35:50,480 --> 00:35:53,280
in them

00:35:51,520 --> 00:35:55,280
no no only block storage but i have

00:35:53,280 --> 00:35:58,800
around three months of data

00:35:55,280 --> 00:36:02,000
is there actually around 220 gb of data

00:35:58,800 --> 00:36:03,359
huh um

00:36:02,000 --> 00:36:05,440
how many blocks do you have there how

00:36:03,359 --> 00:36:07,839
many tenants

00:36:05,440 --> 00:36:10,240
sorry how many how many tenants how many

00:36:07,839 --> 00:36:13,119
different users

00:36:10,240 --> 00:36:15,839
are running your cortex cluster with uh

00:36:13,119 --> 00:36:15,839
you mean uh

00:36:16,320 --> 00:36:19,839
the number of uh tenants you are talking

00:36:19,119 --> 00:36:23,280
about

00:36:19,839 --> 00:36:26,320
yeah it's fairly around 20 years

00:36:23,280 --> 00:36:30,000
not more than 20 at this point of time

00:36:26,320 --> 00:36:34,000
20 uh three months so it's

00:36:30,000 --> 00:36:38,079
the three months data yeah let's say

00:36:34,000 --> 00:36:41,200
150 blocks per tenant 20 tenants is

00:36:38,079 --> 00:36:43,119
3 000 blocks uh it's it's

00:36:41,200 --> 00:36:44,480
not that much how long does it take to

00:36:43,119 --> 00:36:47,520
start the store gates and

00:36:44,480 --> 00:36:50,160
how many replicas do you have

00:36:47,520 --> 00:36:52,720
so i have two replicas uh i'm running

00:36:50,160 --> 00:36:54,400
three storage gateways actually

00:36:52,720 --> 00:36:56,079
so do you think we need more storage

00:36:54,400 --> 00:36:57,599
gateways and more replicas to handle

00:36:56,079 --> 00:36:59,599
this chemical

00:36:57,599 --> 00:37:01,119
uh by replicas you mean the replication

00:36:59,599 --> 00:37:03,280
factor is true

00:37:01,119 --> 00:37:04,800
and you're running three stargates right

00:37:03,280 --> 00:37:08,400
yes

00:37:04,800 --> 00:37:10,000
okay um okay and uh

00:37:08,400 --> 00:37:12,960
could you repeat me how long does it

00:37:10,000 --> 00:37:12,960
take to start up

00:37:14,000 --> 00:37:17,200
it was more than 14 hours actually they

00:37:16,320 --> 00:37:20,240
would still not

00:37:17,200 --> 00:37:24,640
came online no

00:37:20,240 --> 00:37:26,960
that that doesn't look like i think that

00:37:24,640 --> 00:37:28,320
there's some issues somewhere um it's

00:37:26,960 --> 00:37:29,880
not expected to take

00:37:28,320 --> 00:37:32,969
such a long time

00:37:29,880 --> 00:37:32,969
[Music]

00:37:35,119 --> 00:37:38,480
could you could you open an issue

00:37:36,720 --> 00:37:41,599
sharing logs

00:37:38,480 --> 00:37:45,040
or i don't know some metrics uh

00:37:41,599 --> 00:37:45,839
um could you help us to understand what

00:37:45,040 --> 00:37:50,480
the stargate

00:37:45,839 --> 00:37:52,480
is doing uh yes why well starting up

00:37:50,480 --> 00:37:54,480
yeah when i see the logs it's it says

00:37:52,480 --> 00:37:55,520
basically there are connection timeouts

00:37:54,480 --> 00:37:58,560
in the memcache

00:37:55,520 --> 00:38:01,119
but when i see the memcache metrics

00:37:58,560 --> 00:38:02,079
all looks good actually i don't see that

00:38:01,119 --> 00:38:04,800
much load on the

00:38:02,079 --> 00:38:05,440
main cache but for some reason i don't

00:38:04,800 --> 00:38:07,520
know

00:38:05,440 --> 00:38:10,640
but it's it's still if it's starting up

00:38:07,520 --> 00:38:10,640
when cache is not used

00:38:10,960 --> 00:38:14,960
memcache is using actually but i don't

00:38:13,119 --> 00:38:16,880
know some

00:38:14,960 --> 00:38:18,640
some some of the blocks some some of the

00:38:16,880 --> 00:38:19,839
times it's saying specifically time dot

00:38:18,640 --> 00:38:22,160
i don't know

00:38:19,839 --> 00:38:23,280
uh is it because of too much load it is

00:38:22,160 --> 00:38:24,960
uh

00:38:23,280 --> 00:38:26,880
it is it is because of the scan but it's

00:38:24,960 --> 00:38:29,119
scanning it is taking too many

00:38:26,880 --> 00:38:31,599
connection timers i'm not sure

00:38:29,119 --> 00:38:31,599
connections

00:38:31,680 --> 00:38:37,200
um so memcached

00:38:35,200 --> 00:38:38,400
is primarily used at query time to cache

00:38:37,200 --> 00:38:41,520
the index and the chunks

00:38:38,400 --> 00:38:42,560
we have the metadata cache as well but

00:38:41,520 --> 00:38:45,839
if you use

00:38:42,560 --> 00:38:47,440
the bucket index the the usage of the

00:38:45,839 --> 00:38:51,680
method that the cash

00:38:47,440 --> 00:38:54,079
um is is very low

00:38:51,680 --> 00:38:55,599
i yeah i think would be great if you

00:38:54,079 --> 00:39:00,480
could open an issue

00:38:55,599 --> 00:39:02,480
with the more logs possible um

00:39:00,480 --> 00:39:05,119
so i can i can take a look at to better

00:39:02,480 --> 00:39:08,960
understand what's happening there

00:39:05,119 --> 00:39:08,960
okay we'll do that

00:39:09,280 --> 00:39:16,400
cool we have two minutes left um

00:39:12,880 --> 00:39:16,400
does anybody want to talk about anything

00:39:18,960 --> 00:39:23,680
all right see you all in three weeks

00:39:25,040 --> 00:39:29,839

YouTube URL: https://www.youtube.com/watch?v=BFFT6RgfsOE


