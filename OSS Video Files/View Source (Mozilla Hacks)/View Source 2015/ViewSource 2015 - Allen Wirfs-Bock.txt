Title: ViewSource 2015 - Allen Wirfs-Bock
Publication date: 2017-04-12
Playlist: View Source 2015
Description: 
	Allen Wirfs-Bock talks about ECMA6
Captions: 
	00:00:00,000 --> 00:00:04,470
first speaker for this afternoon is

00:00:01,800 --> 00:00:08,040
really awesome he is Alan where's Brock

00:00:04,470 --> 00:00:10,410
he is the editor of the es6 flashiest

00:00:08,040 --> 00:00:13,380
2015 however you prefer to pronounce it

00:00:10,410 --> 00:00:17,210
spec and he didn't come here and talk to

00:00:13,380 --> 00:00:19,410
us about why es6 took until es2015

00:00:17,210 --> 00:00:20,710
please join me in welcoming out at

00:00:19,410 --> 00:00:23,989
where's Brock to the stage

00:00:20,710 --> 00:00:23,989
[Music]

00:00:26,020 --> 00:00:29,350
[Music]

00:00:29,730 --> 00:00:37,989
hi well so I guess you've probably all

00:00:36,070 --> 00:00:39,940
heard by now at least those of you who

00:00:37,989 --> 00:00:43,030
do javascript that there is this new

00:00:39,940 --> 00:00:45,699
thing in sat in town called either xmas

00:00:43,030 --> 00:00:48,460
script 2015 which we call it that

00:00:45,699 --> 00:00:51,520
because it says 2015 up there or

00:00:48,460 --> 00:00:54,370
sometimes it's called es or xmas script

00:00:51,520 --> 00:00:57,220
six which is because there is a number

00:00:54,370 --> 00:01:00,280
six up there that says sixth edition so

00:00:57,220 --> 00:01:05,229
i'm going to tell you about what goes

00:01:00,280 --> 00:01:07,270
into creating basically a major web

00:01:05,229 --> 00:01:12,490
standard like this and why it takes so

00:01:07,270 --> 00:01:15,160
long so so probably the first thing we

00:01:12,490 --> 00:01:17,140
should you know cover here since there

00:01:15,160 --> 00:01:21,729
continues to be confusion about this is

00:01:17,140 --> 00:01:24,070
what is xmas crypt and i hear various

00:01:21,729 --> 00:01:25,960
things from various people they you know

00:01:24,070 --> 00:01:29,410
some people think xmas script is some

00:01:25,960 --> 00:01:31,060
sort of uber language that javascript is

00:01:29,410 --> 00:01:33,580
some sort of subset of but there are

00:01:31,060 --> 00:01:38,970
other languages that are also versions

00:01:33,580 --> 00:01:38,970
of xmas script and that's all just wrong

00:01:39,240 --> 00:01:46,840
equi script is simply the name of the

00:01:41,649 --> 00:01:50,259
standard for javascript and and it has

00:01:46,840 --> 00:01:55,179
that name because of 20 year old

00:01:50,259 --> 00:01:58,060
trademark issues and stuff but when when

00:01:55,179 --> 00:02:01,509
people say expert script or they really

00:01:58,060 --> 00:02:06,580
mean javascript it's the same thing and

00:02:01,509 --> 00:02:08,349
in particular the various browsers and

00:02:06,580 --> 00:02:11,800
other implementations of javascript

00:02:08,349 --> 00:02:14,530
those are all engines that implement the

00:02:11,800 --> 00:02:16,480
same language that's defined as xmas

00:02:14,530 --> 00:02:18,430
crypt so you can think of an Equus crypt

00:02:16,480 --> 00:02:20,260
being the spec that says here is what

00:02:18,430 --> 00:02:25,270
here's what it means to correctly

00:02:20,260 --> 00:02:29,170
implement JavaScript so that's one quick

00:02:25,270 --> 00:02:30,900
equi script standard is created by an

00:02:29,170 --> 00:02:34,780
international standards organization

00:02:30,900 --> 00:02:37,520
called ECMO international that's kind of

00:02:34,780 --> 00:02:43,260
where the Eckman Eckman script comes

00:02:37,520 --> 00:02:45,420
and and in particular there is X magenta

00:02:43,260 --> 00:02:46,980
creates many different standards for

00:02:45,420 --> 00:02:49,230
many different technologies so

00:02:46,980 --> 00:02:50,940
javascript is just one of them but it's

00:02:49,230 --> 00:02:53,370
divided in the technical committees that

00:02:50,940 --> 00:02:57,270
work on in different areas and so

00:02:53,370 --> 00:03:01,620
JavaScript or xmas script is a domain of

00:02:57,270 --> 00:03:04,170
technical committee number 39 or tc39

00:03:01,620 --> 00:03:07,380
standards groups love to assign numbers

00:03:04,170 --> 00:03:10,710
opinions for some reason and stuff and

00:03:07,380 --> 00:03:16,230
the the equus standard itself is

00:03:10,710 --> 00:03:17,760
officially no one says up here oh let's

00:03:16,230 --> 00:03:22,470
see you don't can't see it so well but

00:03:17,760 --> 00:03:25,050
it's officially known as acma 262 that's

00:03:22,470 --> 00:03:27,630
the standards name for the document it's

00:03:25,050 --> 00:03:31,940
a serial number if you will to uniquely

00:03:27,630 --> 00:03:37,290
identify it so one thing that's probably

00:03:31,940 --> 00:03:41,040
you might be surprised at is that akma

00:03:37,290 --> 00:03:45,120
FMA international tc39 this is totally

00:03:41,040 --> 00:03:47,390
unrelated to the w3c and the process of

00:03:45,120 --> 00:03:53,220
creating the xmas script standard is

00:03:47,390 --> 00:03:56,490
totally disjoint from ww3 see if so so

00:03:53,220 --> 00:04:00,060
so it's two major web sticks if you look

00:03:56,490 --> 00:04:02,850
at html5 and equatoria you have two

00:04:00,060 --> 00:04:07,590
major web standards and they're created

00:04:02,850 --> 00:04:09,930
by different organizations which is kind

00:04:07,590 --> 00:04:15,720
of weird but it's it's the way the world

00:04:09,930 --> 00:04:18,360
is so let's I want to kind of go back

00:04:15,720 --> 00:04:19,799
and explain kind of hell that started

00:04:18,360 --> 00:04:24,170
and how we worked up to where we are

00:04:19,799 --> 00:04:27,300
today with the ACMA script standard the

00:04:24,170 --> 00:04:31,350
so the creation myth of JavaScript was

00:04:27,300 --> 00:04:35,190
that it was that JavaScript was created

00:04:31,350 --> 00:04:39,240
in 10 days in may of nineteen ninety

00:04:35,190 --> 00:04:43,470
five by by Brendan Eich so that was 20

00:04:39,240 --> 00:04:46,380
years ago this year and over the course

00:04:43,470 --> 00:04:48,720
of the next year it went through a

00:04:46,380 --> 00:04:50,320
couple names it was first mocha and then

00:04:48,720 --> 00:04:54,610
it was called live script but

00:04:50,320 --> 00:04:58,440
by the end of 1995 it was shipping in in

00:04:54,610 --> 00:05:01,470
netscape and called JavaScript and

00:04:58,440 --> 00:05:05,350
within the next year it had been cloned

00:05:01,470 --> 00:05:10,420
by Microsoft with in Internet Explorer

00:05:05,350 --> 00:05:11,950
where it was called jscript and as is

00:05:10,420 --> 00:05:14,890
generally the case with programming

00:05:11,950 --> 00:05:18,910
languages once you get to two distinct

00:05:14,890 --> 00:05:22,630
implementations that are done kind of

00:05:18,910 --> 00:05:24,340
independently then you get issues of

00:05:22,630 --> 00:05:26,260
interoperability between them and

00:05:24,340 --> 00:05:29,770
somebody stands up and says we need a

00:05:26,260 --> 00:05:32,440
standard okay and so that was how the

00:05:29,770 --> 00:05:38,440
process of standardizing JavaScript got

00:05:32,440 --> 00:05:41,530
started it started in 1996 acma was

00:05:38,440 --> 00:05:47,290
chosen somehow as the venue for doing

00:05:41,530 --> 00:05:49,960
this and tc39 was formed as the

00:05:47,290 --> 00:05:52,450
technical committee to work on it and

00:05:49,960 --> 00:05:54,310
within about a year the standard for the

00:05:52,450 --> 00:05:57,970
first edition of JavaScript was done and

00:05:54,310 --> 00:06:00,790
that was called equity script one so

00:05:57,970 --> 00:06:04,450
over the next two years there is a minor

00:06:00,790 --> 00:06:09,100
update that was called ECMO script too

00:06:04,450 --> 00:06:11,890
and then in 1999 the end of 1999 was

00:06:09,100 --> 00:06:13,480
released what was known as xmas crypt 3

00:06:11,890 --> 00:06:15,400
the third edition of the FM script

00:06:13,480 --> 00:06:18,970
standard and neck from script 3

00:06:15,400 --> 00:06:22,060
basically defined the foundation of the

00:06:18,970 --> 00:06:28,090
JavaScript we have been using for the

00:06:22,060 --> 00:06:30,520
last 15 years so so so that was where we

00:06:28,090 --> 00:06:36,030
were at the beginning of this millennia

00:06:30,520 --> 00:06:40,600
we'd just finished equi script three and

00:06:36,030 --> 00:06:47,110
then equus grip kind of went into its

00:06:40,600 --> 00:06:49,090
troubled adolescents phase you know xmas

00:06:47,110 --> 00:06:51,520
script javascript was originally

00:06:49,090 --> 00:06:54,820
developed to do really simple scripting

00:06:51,520 --> 00:06:57,600
within browsers simple Dom manipulations

00:06:54,820 --> 00:07:00,040
actually Dom was in was kind of invented

00:06:57,600 --> 00:07:03,280
simultaneously was the first first

00:07:00,040 --> 00:07:04,289
version of JavaScript and simple

00:07:03,280 --> 00:07:06,539
validation

00:07:04,289 --> 00:07:08,490
click handling and stuff was what it was

00:07:06,539 --> 00:07:14,210
designed for so it was a very simple

00:07:08,490 --> 00:07:16,469
language but by the time es 3 was done

00:07:14,210 --> 00:07:19,710
people were starting to think how to

00:07:16,469 --> 00:07:22,589
make this a a more general purpose a

00:07:19,710 --> 00:07:25,439
broader a stronger language and work

00:07:22,589 --> 00:07:28,199
started right away on what people

00:07:25,439 --> 00:07:30,210
started to call es for let's say how do

00:07:28,199 --> 00:07:32,999
we take this simple scripting language

00:07:30,210 --> 00:07:35,969
and how do we make it into a powerful

00:07:32,999 --> 00:07:40,919
general-purpose language but the problem

00:07:35,969 --> 00:07:43,949
was that time in 2000-2001 nobody was

00:07:40,919 --> 00:07:46,649
actually doing any of that stuff on the

00:07:43,949 --> 00:07:49,050
web i right they were just using these

00:07:46,649 --> 00:07:51,209
really simple forms of JavaScript and

00:07:49,050 --> 00:07:54,689
stuff so there wasn't a lot of

00:07:51,209 --> 00:07:56,729
enthusiasm to go into that ongoing work

00:07:54,689 --> 00:07:58,529
the kind of the turn javascript into a

00:07:56,729 --> 00:08:03,839
real programming language if you will

00:07:58,529 --> 00:08:06,539
and and plus the at that time the

00:08:03,839 --> 00:08:11,370
industry was that the browser world was

00:08:06,539 --> 00:08:14,550
in kind of turmoil ie was going into

00:08:11,370 --> 00:08:18,300
into prominence Netscape was

00:08:14,550 --> 00:08:21,330
disappearing into AOL and so work

00:08:18,300 --> 00:08:23,719
basically stopped on ES for on that

00:08:21,330 --> 00:08:27,779
first version of vs for that was done

00:08:23,719 --> 00:08:32,069
and instead a couple years later a bunch

00:08:27,779 --> 00:08:34,289
the NTC 39 in the xmas crypt world sort

00:08:32,069 --> 00:08:37,050
of attention turn to xml and so there's

00:08:34,289 --> 00:08:39,529
a lot of work done to create extensions

00:08:37,050 --> 00:08:43,979
the javascript that were known as e 4x

00:08:39,529 --> 00:08:46,829
to embed to enhance javascript to

00:08:43,979 --> 00:08:50,939
support XML and so a lot of work went

00:08:46,829 --> 00:08:53,850
into that was never but it was never

00:08:50,939 --> 00:08:58,800
widely implemented it was never widely

00:08:53,850 --> 00:09:03,029
used and then about by mid-decade about

00:08:58,800 --> 00:09:05,730
2005 again people started thinking about

00:09:03,029 --> 00:09:07,529
we really need to start improving the

00:09:05,730 --> 00:09:11,850
JavaScript standard again we need to

00:09:07,529 --> 00:09:15,689
make it a more powerful language and so

00:09:11,850 --> 00:09:17,560
another attempt was made to define the

00:09:15,689 --> 00:09:23,650
next version of

00:09:17,560 --> 00:09:26,020
script es for and that attempt also

00:09:23,650 --> 00:09:28,900
failed I'll talk some more about why

00:09:26,020 --> 00:09:31,779
that fail but it didn't work out and so

00:09:28,900 --> 00:09:36,160
10 years later in 2009 there was a

00:09:31,779 --> 00:09:40,089
release called es5 it was originally

00:09:36,160 --> 00:09:43,420
called es 3.1 but before it finally

00:09:40,089 --> 00:09:46,000
shipped it was changed es5 but the 3.1

00:09:43,420 --> 00:09:48,790
designation you know you can kind of set

00:09:46,000 --> 00:09:50,470
the scale for what sort of release it

00:09:48,790 --> 00:09:52,060
was how complex it was it was just a

00:09:50,470 --> 00:09:55,570
minor additions to what was already

00:09:52,060 --> 00:09:57,820
there in f1 script three so so the world

00:09:55,570 --> 00:10:00,430
you know this is kind of the timeline of

00:09:57,820 --> 00:10:02,890
the development of ECMO script standards

00:10:00,430 --> 00:10:05,350
is you got the initial you got the

00:10:02,890 --> 00:10:07,120
initial standardization then kind of

00:10:05,350 --> 00:10:11,020
work went off because this black hole

00:10:07,120 --> 00:10:16,210
that really didn't didn't accomplish a

00:10:11,020 --> 00:10:19,420
lot but then about oh six seven eight

00:10:16,210 --> 00:10:22,420
years ago serious work got back on track

00:10:19,420 --> 00:10:25,270
to work for the next major addition of

00:10:22,420 --> 00:10:28,480
ECMO script which became a transcript

00:10:25,270 --> 00:10:30,550
six now there was some good ideas some

00:10:28,480 --> 00:10:33,250
interesting stuff that was developed or

00:10:30,550 --> 00:10:35,920
in this during this black hole period

00:10:33,250 --> 00:10:40,630
and some of that went in and informed

00:10:35,920 --> 00:10:43,480
what in was in es6 but but really the

00:10:40,630 --> 00:10:49,180
majority of work for es6 started and

00:10:43,480 --> 00:10:51,940
about in well really 2009 and has

00:10:49,180 --> 00:10:55,660
happened since then now it's probably

00:10:51,940 --> 00:10:58,740
good that we didn't create that the

00:10:55,660 --> 00:11:01,360
original es for or the second es for

00:10:58,740 --> 00:11:02,830
didn't actually get standardized because

00:11:01,360 --> 00:11:05,050
the world wasn't ready for it and people

00:11:02,830 --> 00:11:07,690
really didn't understand how people use

00:11:05,050 --> 00:11:10,810
javascript in the browser back in those

00:11:07,690 --> 00:11:16,420
times so if you remember back in this

00:11:10,810 --> 00:11:18,580
this this initial period up here this

00:11:16,420 --> 00:11:21,370
period up here well that's the period

00:11:18,580 --> 00:11:24,130
when to the web 2.0 Ajax was being

00:11:21,370 --> 00:11:29,830
developed it's also the same period when

00:11:24,130 --> 00:11:31,100
X XHTML was what was the hot thing and

00:11:29,830 --> 00:11:34,580
so you can kind of see why there

00:11:31,100 --> 00:11:40,790
parallel before between es e 4x and that

00:11:34,580 --> 00:11:42,380
so it's if we've done a standard then it

00:11:40,790 --> 00:11:44,360
probably wouldn't be what we wanted to

00:11:42,380 --> 00:11:46,340
have now the other really important

00:11:44,360 --> 00:11:49,520
thing that happened before we really

00:11:46,340 --> 00:11:51,230
stuff seriously started going for es6 is

00:11:49,520 --> 00:11:54,380
what i call the javascript performance

00:11:51,230 --> 00:11:56,930
revolution right we figured out how to

00:11:54,380 --> 00:11:59,930
make JavaScript fast how to make it run

00:11:56,930 --> 00:12:02,870
fast and and that was what says well now

00:11:59,930 --> 00:12:04,130
that it's fast now now we really need to

00:12:02,870 --> 00:12:07,460
think about how to make it a more

00:12:04,130 --> 00:12:12,410
powerful more comprehensive language so

00:12:07,460 --> 00:12:14,960
so so basically es6 or es2015 is really

00:12:12,410 --> 00:12:18,440
the first comprehensive revision since

00:12:14,960 --> 00:12:21,260
1999 of javascript and you're getting

00:12:18,440 --> 00:12:23,870
two cents over here a kind of the

00:12:21,260 --> 00:12:30,020
relative sizes of these various versions

00:12:23,870 --> 00:12:32,360
of the spec is yeah es2015 spec is over

00:12:30,020 --> 00:12:34,180
twice the size of the es five spec so

00:12:32,360 --> 00:12:38,080
there's a lot a lot of work went into it

00:12:34,180 --> 00:12:42,350
what you see up here on top is the

00:12:38,080 --> 00:12:45,950
es2015 spec underneath is the yes five

00:12:42,350 --> 00:12:47,660
spec so you get a sense of that and so

00:12:45,950 --> 00:12:50,840
today I'm not I'm actually not going to

00:12:47,660 --> 00:12:53,540
talk very much at all and all the new

00:12:50,840 --> 00:12:57,320
features that are that's in Equus crypt

00:12:53,540 --> 00:12:58,790
2015 there is plenty of places on the

00:12:57,320 --> 00:13:01,790
web where you could read about those

00:12:58,790 --> 00:13:04,880
there's lots of good tutorials I

00:13:01,790 --> 00:13:06,950
encourage you to go and read those you

00:13:04,880 --> 00:13:09,560
need to learn about it but I'm not going

00:13:06,950 --> 00:13:12,080
to talk about it about them today in any

00:13:09,560 --> 00:13:14,270
detail but you can get up here there's a

00:13:12,080 --> 00:13:16,550
there's a lot in there you can see

00:13:14,270 --> 00:13:20,720
there's there's hundreds and hundreds of

00:13:16,550 --> 00:13:22,310
pages of material that went into it so I

00:13:20,720 --> 00:13:25,160
wanted but I do want to talk about a bit

00:13:22,310 --> 00:13:28,310
is how its developed okay and so we've

00:13:25,160 --> 00:13:30,710
touched up tc39 and how it works and

00:13:28,310 --> 00:13:32,540
people have various ideas of how

00:13:30,710 --> 00:13:34,520
standards are developed and stuff and

00:13:32,540 --> 00:13:36,970
different standards are developed in

00:13:34,520 --> 00:13:39,560
different ways but I wanna clear that

00:13:36,970 --> 00:13:41,180
one of the misconceptions is it looks

00:13:39,560 --> 00:13:43,880
something like what we have up here on

00:13:41,180 --> 00:13:44,590
the left it's this big formal process

00:13:43,880 --> 00:13:46,900
with

00:13:44,590 --> 00:13:50,760
hundreds of delegates sitting there

00:13:46,900 --> 00:13:53,350
debating issues and it's not that at all

00:13:50,760 --> 00:13:56,340
some people think it's more on the right

00:13:53,350 --> 00:13:59,050
you know a smoke-filled room was people

00:13:56,340 --> 00:14:01,480
playing poker with each other and trying

00:13:59,050 --> 00:14:05,980
to outbid each other to who gets their

00:14:01,480 --> 00:14:11,500
way it's not that either this is really

00:14:05,980 --> 00:14:14,530
what a tc39 meeting looks like there is

00:14:11,500 --> 00:14:18,970
a typical meeting these days is maybe

00:14:14,530 --> 00:14:22,020
about 25 people attend those people the

00:14:18,970 --> 00:14:25,390
members of tc39 are actually

00:14:22,020 --> 00:14:27,610
organizations and the people there are

00:14:25,390 --> 00:14:30,190
representing those organizations and

00:14:27,610 --> 00:14:33,310
these are some of the organizations that

00:14:30,190 --> 00:14:36,070
are members of tc39 it's all the major

00:14:33,310 --> 00:14:44,520
browsers browser manufacturers a number

00:14:36,070 --> 00:14:47,200
of the major major web property vendors

00:14:44,520 --> 00:14:49,960
some smaller companies some people

00:14:47,200 --> 00:14:54,430
representing some frameworks some

00:14:49,960 --> 00:14:56,920
academics and this is really if you can

00:14:54,430 --> 00:14:58,810
think about this this is the design

00:14:56,920 --> 00:15:01,960
committee for javascript this is the set

00:14:58,810 --> 00:15:03,760
of people gets together and besides ok

00:15:01,960 --> 00:15:09,490
here's what javascript is here is what a

00:15:03,760 --> 00:15:12,480
tour to become ok and you know these are

00:15:09,490 --> 00:15:16,120
the sorts of things particularly for

00:15:12,480 --> 00:15:18,760
experts web 2015 that we we wanted to

00:15:16,120 --> 00:15:21,670
focus on right we going it up as a

00:15:18,760 --> 00:15:24,670
language was modularity better

00:15:21,670 --> 00:15:27,580
abstraction capabilities just a more

00:15:24,670 --> 00:15:29,620
powerful modern programming language now

00:15:27,580 --> 00:15:34,240
to specific things we thought about

00:15:29,620 --> 00:15:38,310
that's well two things that come up

00:15:34,240 --> 00:15:42,010
there one of which was in doing es2015

00:15:38,310 --> 00:15:44,560
it was becoming clear that javascript

00:15:42,010 --> 00:15:46,480
was going to be the only language that

00:15:44,560 --> 00:15:48,820
was deeply embedded in the web platform

00:15:46,480 --> 00:15:50,320
which meant if anybody wants to

00:15:48,820 --> 00:15:51,820
implement another language it was

00:15:50,320 --> 00:15:54,520
probably going to be compiling to

00:15:51,820 --> 00:15:56,710
JavaScript so we looked quite a bit at

00:15:54,520 --> 00:15:58,000
what was needed to better support other

00:15:56,710 --> 00:16:01,150
languages that are

00:15:58,000 --> 00:16:03,820
early the JavaScript and overwriting all

00:16:01,150 --> 00:16:07,150
of this we looked at what are things

00:16:03,820 --> 00:16:09,190
that only tc39 could do because there

00:16:07,150 --> 00:16:10,780
are many things in it kind of extending

00:16:09,190 --> 00:16:12,340
the JavaScript environment that somebody

00:16:10,780 --> 00:16:14,710
can just do in a library you build a

00:16:12,340 --> 00:16:16,930
library in texture of it well if it's

00:16:14,710 --> 00:16:19,990
something you can do in a library using

00:16:16,930 --> 00:16:22,270
the languages of exists tc39 doesn't

00:16:19,990 --> 00:16:24,700
necessarily have to do it do anything

00:16:22,270 --> 00:16:27,580
with it but it requires deep extensions

00:16:24,700 --> 00:16:29,380
to the semantics of the statements of

00:16:27,580 --> 00:16:31,210
the JavaScript language then that's

00:16:29,380 --> 00:16:36,370
something we have to do and nobody else

00:16:31,210 --> 00:16:41,410
can do and you know just like just like

00:16:36,370 --> 00:16:44,050
them the world of the web in tc39 we

00:16:41,410 --> 00:16:46,480
argue about questions like what kind of

00:16:44,050 --> 00:16:47,650
language is javascript is it is it a

00:16:46,480 --> 00:16:49,840
functional language is an

00:16:47,650 --> 00:16:51,790
object-oriented language if it's an

00:16:49,840 --> 00:16:56,800
object-oriented is that class-based is a

00:16:51,790 --> 00:16:58,270
prototype a prototype based is it a cure

00:16:56,800 --> 00:17:01,090
to be a permissive language should be

00:16:58,270 --> 00:17:03,370
secure language we got you know these

00:17:01,090 --> 00:17:05,790
are all issues that we look at and we

00:17:03,370 --> 00:17:08,589
try to find excited appropriate

00:17:05,790 --> 00:17:12,850
positions to guide the language forward

00:17:08,589 --> 00:17:15,459
and and in doing that you know you think

00:17:12,850 --> 00:17:17,350
about what we're doing here I mean we

00:17:15,459 --> 00:17:19,540
have this language people know what

00:17:17,350 --> 00:17:22,449
javascript is right and we want to make

00:17:19,540 --> 00:17:24,490
it a better language but we kind of have

00:17:22,449 --> 00:17:27,970
to respect language that's fair you

00:17:24,490 --> 00:17:29,140
can't you know you you can't create you

00:17:27,970 --> 00:17:32,740
don't want to create something like this

00:17:29,140 --> 00:17:36,940
picture and javascript is never going to

00:17:32,740 --> 00:17:39,580
be mal it's never going to be fortran

00:17:36,940 --> 00:17:41,080
it's it's never going to be Python it's

00:17:39,580 --> 00:17:43,630
never going to be small talk it's never

00:17:41,080 --> 00:17:46,450
going to be Lisp it's never going to be

00:17:43,630 --> 00:17:48,100
anybody else's favorite language it is

00:17:46,450 --> 00:17:50,830
what it is and so we kind of have to

00:17:48,100 --> 00:17:53,830
retry to find and respect what is the

00:17:50,830 --> 00:17:55,840
spirit of of JavaScript and as we extend

00:17:53,830 --> 00:17:59,260
it how do we do it in a way that makes

00:17:55,840 --> 00:18:01,240
it feel natural for JavaScript so we

00:17:59,260 --> 00:18:05,410
don't want to create monstrosities like

00:18:01,240 --> 00:18:07,060
this but as we add things what one of

00:18:05,410 --> 00:18:09,670
the things that's unique about language

00:18:07,060 --> 00:18:11,170
design that makes it really hard is that

00:18:09,670 --> 00:18:11,870
everything is interconnected to

00:18:11,170 --> 00:18:14,870
everything out

00:18:11,870 --> 00:18:17,450
so every feature you add potentially

00:18:14,870 --> 00:18:20,059
interacts with every other feature and

00:18:17,450 --> 00:18:22,820
so you know it's pretty easy to sketch

00:18:20,059 --> 00:18:24,440
out an idea for a new statement and says

00:18:22,820 --> 00:18:27,620
well this statement is going to do XY

00:18:24,440 --> 00:18:29,930
and z but then you have to look at what

00:18:27,620 --> 00:18:31,610
happens when you but that statement up

00:18:29,930 --> 00:18:34,160
against every other statement in the

00:18:31,610 --> 00:18:37,430
language and every other feature how do

00:18:34,160 --> 00:18:39,650
they interact and so that's that sort of

00:18:37,430 --> 00:18:42,170
analysis that's where a lot of the time

00:18:39,650 --> 00:18:45,380
goes in working through a language to

00:18:42,170 --> 00:18:49,070
design like this another thing with with

00:18:45,380 --> 00:18:52,040
JavaScript you know we just got a lot of

00:18:49,070 --> 00:18:54,190
baggage you know a lot of and the love

00:18:52,040 --> 00:18:56,450
that goes back to those 10 days in May

00:18:54,190 --> 00:18:58,220
you know there are lots of things that

00:18:56,450 --> 00:19:01,760
were done in a short period of time in

00:18:58,220 --> 00:19:05,390
which made sense in a in the context of

00:19:01,760 --> 00:19:07,550
the time which formed the flavor of the

00:19:05,390 --> 00:19:09,230
language like for example the original

00:19:07,550 --> 00:19:12,020
version of JavaScript didn't have any

00:19:09,230 --> 00:19:13,790
exception handling so lots of things in

00:19:12,020 --> 00:19:16,130
JavaScript where you might expect an

00:19:13,790 --> 00:19:17,990
error instead you get the value of

00:19:16,130 --> 00:19:20,929
undefined or some automatic conversion

00:19:17,990 --> 00:19:22,870
or something happens the reason that was

00:19:20,929 --> 00:19:26,360
was there is no way to report an error

00:19:22,870 --> 00:19:30,320
okay but that's part of the baggage we

00:19:26,360 --> 00:19:33,679
have to live with and we can't we can't

00:19:30,320 --> 00:19:37,370
get rid of that bag each we can't we

00:19:33,679 --> 00:19:39,410
can't fix it because somebody out there

00:19:37,370 --> 00:19:41,870
probably millions of websites out there

00:19:39,410 --> 00:19:44,559
for any little feature in the language

00:19:41,870 --> 00:19:46,760
that you would like to make better

00:19:44,559 --> 00:19:49,280
somebody is probably using it on a

00:19:46,760 --> 00:19:51,470
website and we don't want to break your

00:19:49,280 --> 00:19:53,179
website or your website or your website

00:19:51,470 --> 00:19:55,820
anybody's website that's really probably

00:19:53,179 --> 00:19:59,300
this time the number one mantra of tc39

00:19:55,820 --> 00:20:00,950
is don't don't break the web so we want

00:19:59,300 --> 00:20:03,800
to make it a much better language and we

00:20:00,950 --> 00:20:04,970
don't want to break the web so I want to

00:20:03,800 --> 00:20:07,460
give you here just kind of a quick

00:20:04,970 --> 00:20:09,260
rundown through an example of one of the

00:20:07,460 --> 00:20:12,590
search support one of the problems we

00:20:09,260 --> 00:20:14,720
had and how how we look at doing this so

00:20:12,590 --> 00:20:17,510
here's here's a piece of JavaScript code

00:20:14,720 --> 00:20:19,340
and it's showing an example what some

00:20:17,510 --> 00:20:23,000
people call the closure and loop problem

00:20:19,340 --> 00:20:24,570
and what we have up here is a loop where

00:20:23,000 --> 00:20:27,659
the variable V

00:20:24,570 --> 00:20:29,970
is iterating over the the keys in object

00:20:27,659 --> 00:20:32,009
X and so each time through this will do

00:20:29,970 --> 00:20:34,830
p is going to have a different value and

00:20:32,009 --> 00:20:37,380
there's also this variable V declared

00:20:34,830 --> 00:20:40,159
inside the body of the for loop and all

00:20:37,380 --> 00:20:42,750
it does is collects callback functions

00:20:40,159 --> 00:20:45,809
and within those Kobach functions

00:20:42,750 --> 00:20:47,759
there's a reference to V&P now a lot of

00:20:45,809 --> 00:20:49,559
people code stuff like this and then run

00:20:47,759 --> 00:20:52,789
their program they find it breaks and

00:20:49,559 --> 00:20:56,700
the reason is is they almost surely

00:20:52,789 --> 00:21:00,240
expect for each of these callbacks they

00:20:56,700 --> 00:21:03,600
capture they expect V&P to be the values

00:21:00,240 --> 00:21:05,129
they had in the iteration of the loop

00:21:03,600 --> 00:21:08,610
where they captured the callback

00:21:05,129 --> 00:21:10,649
function but in fact when they run it

00:21:08,610 --> 00:21:14,940
they find down here at the end where

00:21:10,649 --> 00:21:17,129
they run all the callbacks V&P for all

00:21:14,940 --> 00:21:19,379
the callbacks have the same value and

00:21:17,129 --> 00:21:22,440
it's the value of the last value that

00:21:19,379 --> 00:21:27,600
V&P had when the loop was executed and

00:21:22,440 --> 00:21:30,240
the reason for that is is what's called

00:21:27,600 --> 00:21:33,649
variable horse seen in JavaScript when

00:21:30,240 --> 00:21:37,649
we save our P up here in the for and VAR

00:21:33,649 --> 00:21:39,990
VAR v down here in the body that it's

00:21:37,649 --> 00:21:41,879
like that VAR really didn't exist there

00:21:39,990 --> 00:21:44,100
and stood up at the very top of the

00:21:41,879 --> 00:21:46,889
function there were VAR declarations and

00:21:44,100 --> 00:21:49,799
these are simply assignments to that

00:21:46,889 --> 00:21:52,710
outer scope variable right so there's

00:21:49,799 --> 00:21:55,500
only one instance of these variables P

00:21:52,710 --> 00:21:58,919
and V which is referenced by every call

00:21:55,500 --> 00:22:01,440
back and its value is the last value

00:21:58,919 --> 00:22:03,509
they had all right so that's that's a

00:22:01,440 --> 00:22:06,480
bug everybody has tripped over probably

00:22:03,509 --> 00:22:08,730
who's done this sort of created

00:22:06,480 --> 00:22:10,169
callbacks like this and we that was this

00:22:08,730 --> 00:22:12,389
is one of the things we wanted to fix in

00:22:10,169 --> 00:22:16,169
es6 we wanted you know the pet people

00:22:12,389 --> 00:22:19,409
not create so many bugs like this so so

00:22:16,169 --> 00:22:22,860
how do we do that would be nice if we

00:22:19,409 --> 00:22:24,899
could just redefine VAR so that instead

00:22:22,860 --> 00:22:27,990
of our being hoisted up to the top of

00:22:24,899 --> 00:22:29,730
the function it just created a like what

00:22:27,990 --> 00:22:32,610
happened in see that it would create a

00:22:29,730 --> 00:22:34,950
variable that was local to the loop body

00:22:32,610 --> 00:22:37,929
and wasn't visible any but anywhere else

00:22:34,950 --> 00:22:41,470
but we can't do that because

00:22:37,929 --> 00:22:44,379
because code exists out in the web where

00:22:41,470 --> 00:22:47,019
a variable V is declared within the

00:22:44,379 --> 00:22:51,820
block but then after the block somebody

00:22:47,019 --> 00:22:52,990
references it and that's in from the

00:22:51,820 --> 00:22:55,240
beginnings of equus grip that's

00:22:52,990 --> 00:22:57,549
perfectly valid code so we can't break

00:22:55,240 --> 00:22:59,970
we can't we can't change that right that

00:22:57,549 --> 00:23:04,179
would be breaking the web if we did that

00:22:59,970 --> 00:23:07,149
so what we can do what we did do is we

00:23:04,179 --> 00:23:08,830
said okay we should introduce we can't

00:23:07,149 --> 00:23:10,919
change that VAR means but we can

00:23:08,830 --> 00:23:13,570
introduce a new kind of declaration

00:23:10,919 --> 00:23:15,789
right so that's why we introduced the

00:23:13,570 --> 00:23:18,399
let Declaration and the difference

00:23:15,789 --> 00:23:20,999
between bar and let is that let's don't

00:23:18,399 --> 00:23:25,809
waste to the top of the function body

00:23:20,999 --> 00:23:28,119
instead let's let's are local to the

00:23:25,809 --> 00:23:31,119
block in which they're declared and a

00:23:28,119 --> 00:23:34,119
let in the head of a for loop is local

00:23:31,119 --> 00:23:36,610
to the the body of the of the for loop

00:23:34,119 --> 00:23:40,720
so simply by changing these VARs the

00:23:36,610 --> 00:23:45,330
let's in es6 now this code will do what

00:23:40,720 --> 00:23:48,820
the programmer originally wanted ok so

00:23:45,330 --> 00:23:52,090
now so we're now so now we've introduced

00:23:48,820 --> 00:23:55,990
this new type of declaration right black

00:23:52,090 --> 00:23:57,879
so what are the implications of that you

00:23:55,990 --> 00:24:00,639
know if we go back to look at VAR

00:23:57,879 --> 00:24:03,820
there's lots of other strange scoping

00:24:00,639 --> 00:24:06,129
things in traditional javascript like

00:24:03,820 --> 00:24:09,490
you know did you know that you can have

00:24:06,129 --> 00:24:11,860
two parameters with the same name and

00:24:09,490 --> 00:24:14,529
that those names can be the same as the

00:24:11,860 --> 00:24:17,289
name of a bar and you're right you can

00:24:14,529 --> 00:24:18,940
declare a bar multiple times and you can

00:24:17,289 --> 00:24:22,090
even have a function named it was the

00:24:18,940 --> 00:24:23,649
same name here X and you go down here

00:24:22,090 --> 00:24:25,659
you get this call well what are you

00:24:23,649 --> 00:24:28,419
actually going to call here are you

00:24:25,659 --> 00:24:30,340
going to call this function turns out no

00:24:28,419 --> 00:24:35,499
you don't call this function what you're

00:24:30,340 --> 00:24:39,639
going to call is probably is either this

00:24:35,499 --> 00:24:45,100
value of x or that value of x or g maybe

00:24:39,639 --> 00:24:47,259
if actually if if object if it's nowhere

00:24:45,100 --> 00:24:50,139
undefined and this loop will execute at

00:24:47,259 --> 00:24:50,640
all in which case the value of x is

00:24:50,139 --> 00:24:53,160
going to be

00:24:50,640 --> 00:24:55,430
value of the second parameter named XO

00:24:53,160 --> 00:24:57,810
that's what you're gonna call down here

00:24:55,430 --> 00:25:01,830
so these are all I pretty pretty

00:24:57,810 --> 00:25:03,780
legitimate wtf's about JavaScript ok so

00:25:01,830 --> 00:25:06,060
in adding let we want to get rid of

00:25:03,780 --> 00:25:07,590
those right so you go through some of

00:25:06,060 --> 00:25:09,810
the things you can imagine that could

00:25:07,590 --> 00:25:12,060
come up with lack like what if you say

00:25:09,810 --> 00:25:14,430
you know you have to let's for the same

00:25:12,060 --> 00:25:16,730
name what if you have a let Navarre for

00:25:14,430 --> 00:25:20,250
the same name what if you have a

00:25:16,730 --> 00:25:23,190
parameter named X and let named x what

00:25:20,250 --> 00:25:26,910
if you have a function named X and named

00:25:23,190 --> 00:25:29,130
X you know what what if you have a a VAR

00:25:26,910 --> 00:25:31,590
that gets hoisted up to the same level

00:25:29,130 --> 00:25:34,050
of an elder x you know these are all

00:25:31,590 --> 00:25:38,130
things that could have strange and

00:25:34,050 --> 00:25:39,780
bizarre semantics if we if we let it to

00:25:38,130 --> 00:25:42,480
them but they're probably all errors and

00:25:39,780 --> 00:25:45,690
so what we say is there static heresy ok

00:25:42,480 --> 00:25:49,230
so so so in designing that we make make

00:25:45,690 --> 00:25:51,420
it an error so so there's a whole set of

00:25:49,230 --> 00:25:54,180
rules we kind of came up with for

00:25:51,420 --> 00:25:55,710
dealing with these declarations and so

00:25:54,180 --> 00:25:57,390
you know so this is probably just

00:25:55,710 --> 00:26:00,720
working through all this let's stuff is

00:25:57,390 --> 00:26:03,930
about six months work you know just to

00:26:00,720 --> 00:26:05,460
do that part but so what what we've done

00:26:03,930 --> 00:26:07,530
here in fact we've taken part of our

00:26:05,460 --> 00:26:08,970
luggage or we put some legs on it made

00:26:07,530 --> 00:26:14,600
something useful out of it are they so

00:26:08,970 --> 00:26:14,600
well that's how standards advance so

00:26:15,470 --> 00:26:21,080
[Applause]

00:26:18,039 --> 00:26:25,369
so so the kind of wind down here a bit

00:26:21,080 --> 00:26:31,119
here say so what's next so we got a

00:26:25,369 --> 00:26:34,429
transcript 2015 it took about 15 years

00:26:31,119 --> 00:26:36,460
is so does that mean we can expect that

00:26:34,429 --> 00:26:39,739
the next version will be xmas ripped

00:26:36,460 --> 00:26:41,659
2030 and it will be about eleven or

00:26:39,739 --> 00:26:45,139
twelve hundred pages you know it just

00:26:41,659 --> 00:26:47,889
kind of the growth rate no hopefully not

00:26:45,139 --> 00:26:50,960
that's we don't want that to happen

00:26:47,889 --> 00:26:53,960
because while well it was good in some

00:26:50,960 --> 00:26:56,599
ways it was good that the extra script

00:26:53,960 --> 00:26:58,549
had time to bake before we got the 2015

00:26:56,599 --> 00:27:02,210
it also creates lots of problems and

00:26:58,549 --> 00:27:03,919
stuff so watchu what we're doing going

00:27:02,210 --> 00:27:05,779
forward now for xmas script around if

00:27:03,919 --> 00:27:09,559
all have a train release model and

00:27:05,779 --> 00:27:13,399
that's actually why we refer to this as

00:27:09,559 --> 00:27:17,059
the s 2015 as opposed to es6 so every

00:27:13,399 --> 00:27:20,839
June there's going to be a update to the

00:27:17,059 --> 00:27:22,190
expert script spec and these updates we

00:27:20,839 --> 00:27:23,839
are going to be incremental they're

00:27:22,190 --> 00:27:25,279
going to be small for the most part

00:27:23,839 --> 00:27:27,919
occasionally there will be some big

00:27:25,279 --> 00:27:29,719
features roll in but there's going to be

00:27:27,919 --> 00:27:32,059
sort of continual improvement rather

00:27:29,719 --> 00:27:36,259
than just waiting for one huge big bang

00:27:32,059 --> 00:27:39,559
release and if you go to the tc39 github

00:27:36,259 --> 00:27:43,099
site you'll see there's a process we now

00:27:39,559 --> 00:27:44,570
have for a feature development that we

00:27:43,099 --> 00:27:46,509
go through for each feature and those

00:27:44,570 --> 00:27:50,089
features move through stages and

00:27:46,509 --> 00:27:52,549
basically when a feature gets down here

00:27:50,089 --> 00:27:55,339
to stage for it then goes on the next

00:27:52,549 --> 00:27:57,559
train to leave the station okay and some

00:27:55,339 --> 00:27:59,929
features can go through this process in

00:27:57,559 --> 00:28:01,580
a matter of weeks other features will

00:27:59,929 --> 00:28:04,009
take multiple years to go through this

00:28:01,580 --> 00:28:07,399
process but it's really kind of get to

00:28:04,009 --> 00:28:09,320
this continual development cycle for for

00:28:07,399 --> 00:28:16,629
the f / script specification going

00:28:09,320 --> 00:28:21,830
forward so I kind of wrap it up here the

00:28:16,629 --> 00:28:25,909
es2015 it it really is finally done it's

00:28:21,830 --> 00:28:28,879
out there it's many people are already

00:28:25,909 --> 00:28:30,500
using it primarily using transpiler is

00:28:28,879 --> 00:28:32,600
in particular Babel

00:28:30,500 --> 00:28:36,520
so there's nothing stopping you from

00:28:32,600 --> 00:28:38,600
using it today it's really been rapidly

00:28:36,520 --> 00:28:41,810
implemented in browsers all the major

00:28:38,600 --> 00:28:43,490
browsers you can go online and you can

00:28:41,810 --> 00:28:46,550
find a compatibility chart that says

00:28:43,490 --> 00:28:49,250
who's implemented what but that all the

00:28:46,550 --> 00:28:50,960
browsers are I think now over having a

00:28:49,250 --> 00:28:54,290
fifty percent of it implemented and some

00:28:50,960 --> 00:28:55,940
are closer to 80 plus so I think over

00:28:54,290 --> 00:29:00,460
the next couple years you'll see full

00:28:55,940 --> 00:29:00,460
implementation and all the browsers and

00:29:00,490 --> 00:29:04,840
it really is you know I think this is

00:29:03,260 --> 00:29:07,610
going to be the foundation for

00:29:04,840 --> 00:29:09,530
JavaScript for the next 10 or 15 years

00:29:07,610 --> 00:29:12,800
we're going to have these incremental

00:29:09,530 --> 00:29:15,800
releases or building upon what es6 is so

00:29:12,800 --> 00:29:17,450
for your future as as a friend and

00:29:15,800 --> 00:29:19,370
developer doing JavaScript you really

00:29:17,450 --> 00:29:22,550
aren't going to want to learn the s6 and

00:29:19,370 --> 00:29:27,740
in all its features and that's you know

00:29:22,550 --> 00:29:30,650
that's going to be the future so all

00:29:27,740 --> 00:29:33,290
right mood yeah so that's basically yet

00:29:30,650 --> 00:29:35,570
so these slides you can get them off my

00:29:33,290 --> 00:29:37,640
website I'm you know happy to answer

00:29:35,570 --> 00:29:42,140
questions or anything follow me on

00:29:37,640 --> 00:29:45,880
Twitter email me and enjoy ya six it's

00:29:42,140 --> 00:29:45,880

YouTube URL: https://www.youtube.com/watch?v=_oqkhslhNQU


