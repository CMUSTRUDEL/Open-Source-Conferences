Title: Surma - Polyglot WebAssembly - View Source 2019
Publication date: 2019-11-26
Playlist: View Source 2019 - Amsterdam
Description: 
	#wasm #webassembly #surma #viewsourceconf
The number of languages with WebAssembly support is growing. And you don't have to choose just one. You can use each of them for what they are good at. You can sprinkle in some C, C++, Rust, AssemblyScript (and more) as enhancements for your everyday-JS.
Captions: 
	00:00:05,000 --> 00:00:08,429
thank you

00:00:06,509 --> 00:00:10,889
and actually Thank You Ruth as well

00:00:08,429 --> 00:00:13,469
Francine I'd rather do this and see

00:00:10,889 --> 00:00:17,780
because imagine if she didn't then this

00:00:13,469 --> 00:00:17,780
conference would be ruthless

00:00:31,180 --> 00:00:37,790
basically meaning the ability to read

00:00:34,010 --> 00:00:39,140
write or speak languages and what

00:00:37,790 --> 00:00:45,320
suddenly really is a pretty good

00:00:39,140 --> 00:01:02,559
representative of that really since you

00:00:45,320 --> 00:01:02,559
all here you almost like HTML and CSS in

00:01:03,790 --> 00:01:11,270
assembly I tend to mention three

00:01:07,280 --> 00:01:14,119
languages that cover very different use

00:01:11,270 --> 00:01:15,890
cases on the spectrum of assembly and

00:01:14,119 --> 00:01:22,579
those are kept written which the two

00:01:15,890 --> 00:01:24,979
language is placement for your google c

00:01:22,579 --> 00:01:28,460
or c focus on high up so if you use GCC

00:01:24,979 --> 00:01:30,289
or try you will with an introduced MCC

00:01:28,460 --> 00:01:32,719
than just compiled your C code or

00:01:30,289 --> 00:01:34,549
receivers let's go to what exactly is

00:01:32,719 --> 00:01:36,799
the language that has been developing

00:01:34,549 --> 00:01:39,380
and has grown a vibrant ecosystem and

00:01:36,799 --> 00:01:42,350
community around it and actually has

00:01:39,380 --> 00:01:43,969
native support for 170 build into their

00:01:42,350 --> 00:01:46,159
main compiler which is great and works

00:01:43,969 --> 00:01:49,310
really well there's something that I

00:01:46,159 --> 00:01:51,930
personally kind of X item out which is a

00:01:49,310 --> 00:01:57,990
language that uses the exact

00:01:51,930 --> 00:02:01,850
sir tax as attachment is not just but

00:01:57,990 --> 00:02:01,850
you can ride with the skills you already

00:02:07,960 --> 00:02:15,230
[Music]

00:02:19,930 --> 00:02:22,990
[Music]

00:02:28,340 --> 00:03:07,410
have a little bit but most of the things

00:03:05,040 --> 00:03:08,910
can it be mate mate work with what

00:03:07,410 --> 00:03:11,600
assembly and all the weapons just come

00:03:08,910 --> 00:03:14,310
over support wineries attached it is

00:03:11,600 --> 00:03:17,000
because the script is a low-level

00:03:14,310 --> 00:03:19,920
language we just a very thin layer of

00:03:17,000 --> 00:03:21,660
assembly almost for what I suddenly and

00:03:19,920 --> 00:03:25,140
so you have to do it all things yourself

00:03:21,660 --> 00:03:27,739
and that should take a look at it

00:03:25,140 --> 00:03:30,299
because it also gives you enough control

00:03:27,739 --> 00:03:32,489
understanding of what we can and cannot

00:03:30,299 --> 00:03:34,350
do so don't let this deter you from

00:03:32,489 --> 00:03:36,769
looking as sensitive it's very enjoyable

00:03:34,350 --> 00:03:36,769
and

00:03:43,890 --> 00:03:46,930
[Music]

00:03:49,840 --> 00:04:59,350
because you are incredibly in the last

00:04:55,880 --> 00:04:59,350
year or two

00:04:59,920 --> 00:05:05,150
I'm impressed with how many things I can

00:05:02,960 --> 00:05:07,370
find the rusty person just thrown the

00:05:05,150 --> 00:05:10,700
way and of course you compete with this

00:05:07,370 --> 00:05:13,070
easy because isn't around for many days

00:05:10,700 --> 00:05:18,170
is huge and most these things you can

00:05:13,070 --> 00:05:21,590
use with extras that are coming to 70

00:05:18,170 --> 00:05:23,540
this is about but I want to give a

00:05:21,590 --> 00:05:28,240
couple at least honorable mentions

00:05:23,540 --> 00:05:28,240
welcome skill that has

00:05:38,689 --> 00:06:33,659
which meaning is they don't have the

00:06:28,710 --> 00:06:37,740
support in stables easy use compulsively

00:06:33,659 --> 00:06:39,870
just with clang and a switch to this new

00:06:37,740 --> 00:06:42,719
IBM under the hood now if you use

00:06:39,870 --> 00:06:44,000
command yourself but manually you will

00:06:42,719 --> 00:06:47,110
not have

00:06:44,000 --> 00:06:47,110
[Music]

00:06:51,770 --> 00:08:22,970
you don't like this No

00:08:23,780 --> 00:08:31,310
no every instruction that they have so

00:08:28,120 --> 00:08:34,940
don't be afraid to go to Moodle or and

00:08:31,310 --> 00:08:39,289
just click that suspect is actually kind

00:08:34,940 --> 00:08:42,110
of and the virtual machine is actually I

00:08:39,289 --> 00:08:44,030
was a understand just by casually

00:08:42,110 --> 00:08:46,940
reading through this back and just with

00:08:44,030 --> 00:08:49,340
you and not saying that needs to do this

00:08:46,940 --> 00:09:33,320
you don't need to do this if you want to

00:08:49,340 --> 00:09:36,650
make this is just if your image

00:09:33,320 --> 00:09:39,950
compressor PWA so whether that works

00:09:36,650 --> 00:09:48,880
right has all the PWA bits and it makes

00:09:39,950 --> 00:09:48,880
heavy use an image

00:09:49,000 --> 00:11:10,180
like a PNG codec a JPEG image which i

00:11:01,480 --> 00:11:13,110
think is cool only understands 32-bit

00:11:10,180 --> 00:11:15,550
integers 64-bit integers floats and

00:11:13,110 --> 00:11:18,009
things like strings or objects

00:11:15,550 --> 00:11:19,990
dictionaries arrays where somebody

00:11:18,009 --> 00:11:24,519
doesn't know about them and so what most

00:11:19,990 --> 00:11:27,670
compilers do which has the word assembly

00:11:24,519 --> 00:11:29,980
machine code and then record in

00:11:27,670 --> 00:11:34,649
JavaScript is called the JavaScript boot

00:11:29,980 --> 00:11:34,649
code that turns this little village face

00:11:51,550 --> 00:11:56,700
[Music]

00:11:59,749 --> 00:12:56,909
we're going in and so and so what

00:12:54,869 --> 00:12:59,489
question is really doing is emulating

00:12:56,909 --> 00:13:02,879
the entire POSIX kernel system interface

00:12:59,489 --> 00:13:05,369
in JavaScript and making it sensible web

00:13:02,879 --> 00:13:07,709
api is required so for example if you

00:13:05,369 --> 00:13:09,629
open a file it will start imitating a

00:13:07,709 --> 00:13:12,989
file system for use that you see code

00:13:09,629 --> 00:13:15,629
can working just fine now with it useful

00:13:12,989 --> 00:13:17,789
in your C code it will start pulling in

00:13:15,629 --> 00:13:24,619
WebGL and kind of piping those two

00:13:17,789 --> 00:13:24,619
things together and do all the cases

00:13:26,550 --> 00:13:31,770
over time an influence actually actually

00:13:29,370 --> 00:14:01,200
realized that between multiple modules

00:13:31,770 --> 00:14:35,760
the glue code is almost the same in the

00:14:01,200 --> 00:14:38,880
future and it's just a little bit on

00:14:35,760 --> 00:14:42,180
import will be more some module so you

00:14:38,880 --> 00:14:45,870
can actively devices and use be for

00:14:42,180 --> 00:14:47,670
novice core which is mostly motivated by

00:14:45,870 --> 00:14:50,790
the use case of running webassembly

00:14:47,670 --> 00:14:52,140
outside the browser machines because

00:14:50,790 --> 00:14:54,270
what's totally happening is that whether

00:14:52,140 --> 00:14:56,280
somebody was you know cannot conceive

00:14:54,270 --> 00:14:58,530
they use cable running on the web but

00:14:56,280 --> 00:15:02,900
since then there's more use case of

00:14:58,530 --> 00:15:02,900
running is and your animal

00:15:26,360 --> 00:16:01,440
interesting to anything not a single one

00:15:58,800 --> 00:16:03,840
every night you can only pass in

00:16:01,440 --> 00:16:05,820
individual happiness functions or any

00:16:03,840 --> 00:16:08,240
external functions through that

00:16:05,820 --> 00:16:13,890
important subject in the same parameter

00:16:08,240 --> 00:16:16,740
and so by default the modules that my

00:16:13,890 --> 00:16:18,870
compiler generates expect to function

00:16:16,740 --> 00:16:21,270
the in function and the outcomes because

00:16:18,870 --> 00:16:22,680
brain can't do input and output and so

00:16:21,270 --> 00:16:25,290
it needs the function to somehow

00:16:22,680 --> 00:16:27,210
communicate with the external world no

00:16:25,290 --> 00:16:29,580
it was advanced things look a bit

00:16:27,210 --> 00:16:32,160
different because now you're basically

00:16:29,580 --> 00:16:37,530
putting all these individual functions

00:16:32,160 --> 00:16:40,260
into the namespace and in this case only

00:16:37,530 --> 00:16:45,500
turn on the module to read and write

00:16:40,260 --> 00:16:45,500
from Thomas printers because it

00:17:01,200 --> 00:17:04,269
[Music]

00:17:06,680 --> 00:17:09,739
[Music]

00:17:13,780 --> 00:17:16,900
[Music]

00:17:24,460 --> 00:17:27,569
[Music]

00:17:59,890 --> 00:18:02,979
[Music]

00:18:16,530 --> 00:18:19,670
[Music]

00:18:23,030 --> 00:18:29,490
pretty much when you run or deploy

00:18:28,070 --> 00:18:34,319
because

00:18:29,490 --> 00:18:34,319
[Music]

00:18:46,249 --> 00:20:03,350
because actually which is and then these

00:19:59,340 --> 00:20:03,350
rock stars and they just

00:21:17,030 --> 00:21:24,530
is a signify so when a little bit back

00:21:20,850 --> 00:21:34,140
in the context of I think many people

00:21:24,530 --> 00:21:49,470
mr. Anton tool and actually so what does

00:21:34,140 --> 00:21:58,980
it do if you start using this ecosystem

00:21:49,470 --> 00:22:01,250
in memory or can put in storage index TV

00:21:58,980 --> 00:22:01,250
and

00:22:01,560 --> 00:23:13,940
is that means that is so so so you can

00:22:40,430 --> 00:23:13,940
do stuff and yes I did

00:23:21,570 --> 00:23:24,650
[Music]

00:23:43,260 --> 00:25:17,870
[Music]

00:23:45,050 --> 00:25:17,870
we have or

00:25:35,380 --> 00:26:09,700
this way you might be thinking because

00:26:17,450 --> 00:26:20,509
[Music]

00:26:24,160 --> 00:27:01,970
now a small tiny functions that know how

00:26:59,540 --> 00:27:03,950
to translate these types to whatever

00:27:01,970 --> 00:27:06,620
language you were using under the hood

00:27:03,950 --> 00:27:08,810
and turn those into calls on the

00:27:06,620 --> 00:27:10,550
low-level language so this way we now

00:27:08,810 --> 00:27:12,620
have an interface for module with

00:27:10,550 --> 00:27:15,610
high-level types that we can just use as

00:27:12,620 --> 00:27:17,559
opposed to be very comfortable that

00:27:15,610 --> 00:27:19,600
Oh blog will take care of making it work

00:27:17,559 --> 00:27:21,660
with the language but their language

00:27:19,600 --> 00:27:25,390
they expect them to see in the memory

00:27:21,660 --> 00:27:27,970
school for you know us as developers but

00:27:25,390 --> 00:27:30,820
it also means that our multiple modules

00:27:27,970 --> 00:28:11,860
can use these higher-level communicate

00:27:30,820 --> 00:28:26,200
because we'll be coming along or if it

00:28:11,860 --> 00:28:27,540
does your ideas are and with that thank

00:28:26,200 --> 00:28:33,119
you for attention

00:28:27,540 --> 00:28:33,119

YouTube URL: https://www.youtube.com/watch?v=vipTdFiy1uQ


