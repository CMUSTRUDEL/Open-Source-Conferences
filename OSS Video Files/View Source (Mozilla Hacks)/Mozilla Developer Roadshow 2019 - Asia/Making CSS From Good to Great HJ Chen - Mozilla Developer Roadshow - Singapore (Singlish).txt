Title: Making CSS From Good to Great HJ Chen - Mozilla Developer Roadshow - Singapore (Singlish)
Publication date: 2019-12-23
Playlist: Mozilla Developer Roadshow 2019 - Asia
Description: 
	(Presented in Singlish, a Singaporean English creole) Singapore-based developer advocate Hui Jing Chen introduces CSS Subgrid.
Captions: 
	00:00:03,200 --> 00:00:09,380
As a homage to Singapore, tonight's talk will be given in Singlish.

00:00:09,380 --> 00:00:13,140
Now, for those of you who either, like me, grew up around here,

00:00:13,140 --> 00:00:15,700
or chose to make this beautiful country your home,

00:00:15,700 --> 00:00:17,540
ah, don't need to introduce what is Singlish.

00:00:17,540 --> 00:00:20,900
But for those of you who are new to what Singlish is?

00:00:21,440 --> 00:00:22,480
Welcome to Singapore.

00:00:24,620 --> 00:00:28,660
So, for the benefit of the audience who are unfamiliar with English spoken in Singapore,

00:00:28,680 --> 00:00:30,320
there is a range.

00:00:30,660 --> 00:00:33,600
And best explained in a graphical form, because this,

00:00:33,600 --> 00:00:37,480
FYI, is a legitimate HTML input hor, no kidding.

00:00:38,040 --> 00:00:40,400
If you are interested in how to build like that, later come talk to me.

00:00:40,820 --> 00:00:45,000
But today right, I'll try to keep the level somewhere here.

00:00:45,320 --> 00:00:46,460
In the middle.

00:00:48,240 --> 00:00:49,760
In the middle.

00:00:49,860 --> 00:00:53,880
In the middle of Queen's English and extreme Singlish.

00:00:53,880 --> 00:00:57,760
So, in general right, the mic don't like Singlish eh.

00:00:57,920 --> 00:01:03,720
In general, the R sound will sometimes sound like L, so like, ready will become "leddy" 

00:01:03,720 --> 00:01:07,100
and then, also, the "v" sound you can sometimes just omit.

00:01:07,100 --> 00:01:09,860
So like, government you say, "gah-men".

00:01:09,860 --> 00:01:12,800
Or like, nevermind you say, "neh-mind".

00:01:13,340 --> 00:01:14,880
Also, grammar is optional.

00:01:15,060 --> 00:01:17,620
Other than that, it should be mostly comprehensible.

00:01:17,620 --> 00:01:20,840
If you feel a lack of confidence about your standard of Singlish,

00:01:20,840 --> 00:01:23,880
please sit next to a friendly Singlish speaking attendee,

00:01:23,880 --> 00:01:25,880
and I'm very sure they will explain it all to you.

00:01:25,880 --> 00:01:26,640
Ah, okay?

00:01:26,840 --> 00:01:27,780
Kay, let's go.

00:01:30,180 --> 00:01:31,600
So, my name is Hui Jing.

00:01:31,600 --> 00:01:34,920
And I'm simple enough that emojis can more or less sum up my entire life.

00:01:34,920 --> 00:01:38,700
But this page is also a teaser of how "tok gong" CSS grid is.

00:01:38,700 --> 00:01:41,180
Ah, "tok gong" ah, okay, explanation time.

00:01:41,500 --> 00:01:44,180
"Tok gong", means superb or top of the line.

00:01:44,180 --> 00:01:47,340
So this type of annotation will be sprinkled throughout the presentation

00:01:47,340 --> 00:01:49,340
so you can learn a bit of Singlish as well.

00:01:49,340 --> 00:01:51,340
But anyway, here's the teaser.

00:01:51,900 --> 00:01:55,880
If you inspect element, and you open Firefox Devtools,

00:01:56,100 --> 00:02:01,320
and you try to inspect this thing, you will see, 

00:02:01,480 --> 00:02:04,160
Ta-da! This kind of very beautiful overlay,

00:02:04,160 --> 00:02:06,160
ah teaser only, later talk some more.

00:02:07,000 --> 00:02:09,760
So, ah, close first. 

00:02:10,180 --> 00:02:12,780
Okay, so right now Nexmo pays my CPF.

00:02:12,780 --> 00:02:18,720
CPF is something that the government make companies who employ locals or permanent residents like me,

00:02:18,720 --> 00:02:20,500
they will pay into your retirement fund.

00:02:20,500 --> 00:02:21,300
That is CPF. 

00:02:21,300 --> 00:02:23,420
Ah anyway, Nexmo does communications APIs,

00:02:23,420 --> 00:02:25,940
so if like your app need, like SMS, voice or verification, 

00:02:25,940 --> 00:02:28,040
ah can consider try Nexmo.

00:02:28,040 --> 00:02:30,760
But today, no Nexmo, today, all about the layouts.

00:02:31,580 --> 00:02:33,500
So, when the web started right? No layout. 

00:02:33,740 --> 00:02:37,840
At most you can format text, with spaces, line breaks, indents, that kind of thing, 

00:02:37,840 --> 00:02:42,900
but you want to have - you want to have a do until "swee-swee" layout on your webpage? Cannot.

00:02:43,520 --> 00:02:44,200
"Swee".

00:02:44,640 --> 00:02:45,900
Hokkien for pretty.

00:02:46,700 --> 00:02:49,080
You can use to describe something correctly done.

00:02:49,080 --> 00:02:52,300
So, you use, this layout do until very swee sia.

00:02:52,860 --> 00:02:53,920
So, that's how you use "swee".

00:02:53,920 --> 00:02:54,580
Moving on.

00:02:54,800 --> 00:03:00,180
First time we can put things in specific positions on a page was, 1994,

00:03:00,180 --> 00:03:04,800
when table elements started supported, started getting supported in browsers.

00:03:04,800 --> 00:03:06,680
then, you know, table element, right?

00:03:06,680 --> 00:03:08,680
Suppose to for you all make data table, right?

00:03:08,680 --> 00:03:10,920
But like most things in life, wah, kena misuse

00:03:11,080 --> 00:03:14,080
Because, developers discovered - nesting.

00:03:15,240 --> 00:03:17,860
So in those days right, the markup nest until very "jia-lat".

00:03:18,360 --> 00:03:19,880
Next word, "jia-lat".

00:03:20,340 --> 00:03:22,560
In Hokkien, literally means to eat strength.

00:03:22,560 --> 00:03:25,200
So you use to denote being in trouble.

00:03:25,200 --> 00:03:27,440
For example, have you inspected Twitter lately?

00:03:27,440 --> 00:03:30,280
Wah lau, the markup nest until damn jia-lat.

00:03:30,280 --> 00:03:31,840
That's how you use "jia-lat".

00:03:31,840 --> 00:03:35,980
Moving on. So then in 96, right? We got CSS. 

00:03:35,980 --> 00:03:38,180
Then CSS got what? CSS got floats. 

00:03:38,180 --> 00:03:41,240
So everybody, need to learn new technique.

00:03:41,240 --> 00:03:43,900
But hor, floats ah. Wah, very hard.

00:03:44,260 --> 00:03:47,440
Your column height not even la,

00:03:47,440 --> 00:03:49,820
your inline things all "senget" la.

00:03:49,820 --> 00:03:51,120
Ah, wait ah. Senget.

00:03:51,120 --> 00:03:53,460
Senget. Malay for slanted or crooked.

00:03:53,460 --> 00:03:56,700
So like, eh, how come the last item in the row senget wan?

00:03:56,700 --> 00:03:58,500
Ah, that's how you use. Okay, moving on.

00:03:58,660 --> 00:04:00,140
So because so hard right?

00:04:00,760 --> 00:04:03,180
People, very very kind people right?

00:04:03,180 --> 00:04:05,360
They invented this thing called frameworks.

00:04:05,360 --> 00:04:07,620
So frameworks like Bootstrap la, Foundation,

00:04:07,620 --> 00:04:11,200
so everybody else will use their CSS classes to build their layout.

00:04:11,420 --> 00:04:12,920
So this approach very popular.

00:04:12,920 --> 00:04:17,860
Then we move into the age where all websites start to look very similar. Okay.

00:04:18,440 --> 00:04:20,540
So this tweet, very over-used.

00:04:20,840 --> 00:04:22,780
But very true, sia.

00:04:22,780 --> 00:04:26,220
Like, 6.8 thousand people also agree with me.

00:04:26,420 --> 00:04:30,360
But the point is CSS over the past twenty years, has evolved.

00:04:30,540 --> 00:04:33,080
So now, we got a lot of options for doing layout liao.

00:04:34,720 --> 00:04:37,060
So in CSS2 we got 4 layout modes.

00:04:37,060 --> 00:04:39,840
Got block layout to layout boxes.

00:04:40,040 --> 00:04:42,140
Got inline layout, to layout text.

00:04:42,560 --> 00:04:46,560
Then got table layout, supposed to be used for data,

00:04:46,560 --> 00:04:49,360
but of course, people misuse and use it for other things.

00:04:49,860 --> 00:04:51,660
And finally we got positioned layout.

00:04:51,960 --> 00:04:53,680
So it's like a escape hatch. 

00:04:53,800 --> 00:04:57,340
So your element can don't care about other element on the page.

00:04:58,540 --> 00:05:03,460
But then, in 2009, there's this very "tok gong" layout model called flexbox.

00:05:04,000 --> 00:05:08,080
Is the very first "tok gong" layout model because it was built for the web.

00:05:08,380 --> 00:05:12,640
Because on the web right, you cannot control how your user view your website.

00:05:12,780 --> 00:05:15,360
They can view on 70-inch TV, 

00:05:15,360 --> 00:05:17,000
they can view on their smart watch.

00:05:17,000 --> 00:05:20,220
You cannot control, so we need, flexibility.

00:05:20,220 --> 00:05:22,720
And flexbox, very flexible.

00:05:23,020 --> 00:05:26,660
And it also let us control spacing, control alignment on your items,

00:05:26,660 --> 00:05:28,660
like never before, so it's very "tok gong".

00:05:29,420 --> 00:05:30,900
And then after that, we got Grid.

00:05:31,080 --> 00:05:36,360
And grid is the only layout model that recognises the relationship between rows and columns.

00:05:36,360 --> 00:05:37,300
Also very "tok gong".

00:05:38,200 --> 00:05:40,260
So, you might be asking, so what? 

00:05:40,260 --> 00:05:42,260
2-dimension very "tok gong" meh?

00:05:42,260 --> 00:05:45,280
Is very "tok gong", because it change the way we think about layout,

00:05:45,280 --> 00:05:47,620
and how we write the code to do the layout.

00:05:47,960 --> 00:05:53,300
So, Rachel Andrew, who is one of the major contributors to CSS grid specification, 

00:05:53,300 --> 00:05:54,340
she describe grid liddat (like that).

00:05:55,020 --> 00:05:58,020
She say, grid works from the container in, 

00:05:58,240 --> 00:06:01,780
and other layout models work from item first. 

00:06:01,900 --> 00:06:03,100
Okay, example time.

00:06:03,180 --> 00:06:06,900
Say you want to lay your content out into 3 column. How you do?

00:06:08,000 --> 00:06:09,560
Can use inline-block.

00:06:10,180 --> 00:06:11,900
So to make 3 column, right?

00:06:12,760 --> 00:06:15,800
You set display to inline-block, and then,

00:06:15,800 --> 00:06:21,440
everybody, everybody the width must set to one-third of your container.

00:06:21,440 --> 00:06:22,400
Ah, can use calc.

00:06:22,400 --> 00:06:24,720
Because, CSS also can do maths, yo.

00:06:26,800 --> 00:06:28,320
So now I got 3 column. Okay. 

00:06:28,740 --> 00:06:29,900
Maybe you don't like inline block. 

00:06:30,040 --> 00:06:32,280
Neh-mind (never mind), can use floats.

00:06:32,820 --> 00:06:34,700
Floats very similar to inline-block,

00:06:34,700 --> 00:06:37,100
because your item also need width.

00:06:37,100 --> 00:06:39,100
Ah, also use calc, can do maths.

00:06:39,920 --> 00:06:42,300
Then, maybe you ah, you very modern.

00:06:42,300 --> 00:06:44,860
Or like, must embrace new technology. 

00:06:44,860 --> 00:06:46,440
Can, use flexbox lor.

00:06:46,440 --> 00:06:47,800
Ah, flexbox also can.

00:06:47,800 --> 00:06:52,680
You just make the item not flexible, ah, then you set the flex-basis to one-third.

00:06:53,460 --> 00:06:57,780
But if you see, you are also setting property on the item.

00:06:57,960 --> 00:07:00,140
So for all the 3 techniques I just described right?

00:07:00,460 --> 00:07:03,420
Don't have grid. Grid, fake wan.

00:07:04,120 --> 00:07:08,380
It just looks that way because you force all your items to align with each other.

00:07:09,180 --> 00:07:14,560
But when you use Grid hor, the dimensions for the rows and columns they are defined on the parent. 

00:07:14,560 --> 00:07:18,020
So this means that this grid is real. 

00:07:18,020 --> 00:07:20,020
And you can place items inside your grid. 

00:07:20,300 --> 00:07:23,800
And that, is, AH-MAZ-ING.

00:07:25,060 --> 00:07:26,940
Eh, you all very dead leh, this audience.

00:07:26,940 --> 00:07:29,700
Wah lau, you all very ah, Singapore max eh.

00:07:30,400 --> 00:07:33,560
Anyway, the basic usage of grid only need 2 steps.

00:07:33,760 --> 00:07:36,580
You define grid and then you place items inside.

00:07:36,720 --> 00:07:40,100
So you can either ownself place, or you let the browser place items for you.

00:07:40,100 --> 00:07:41,740
Okay, quite straight-forward.

00:07:41,740 --> 00:07:44,700
Can. So then got, later got a bit of jargon.

00:07:44,700 --> 00:07:46,320
So we clarify here first.

00:07:46,860 --> 00:07:52,760
Grid lines are horizontal and vertical lines that form the basis of your grid structure.

00:07:52,760 --> 00:07:55,660
So you use a numerical index to reference the line.

00:07:55,660 --> 00:08:01,080
And, okay a bit small, but notice, the index start from 1, not 0. 

00:08:01,080 --> 00:08:04,220
Because it's a programming language like Lua, not C.

00:08:04,840 --> 00:08:08,360
Each space between the grid line they are called grid tracks.

00:08:08,360 --> 00:08:11,280
And then, so these are the rows and columns of your grid, and then

00:08:11,280 --> 00:08:13,280
and then you can put items inside this space.

00:08:13,520 --> 00:08:16,940
Then the grid cell leh, it means it's a single unit of the grid.

00:08:17,060 --> 00:08:20,480
So it's made up of 2 adjacent row and column line then that's one grid cell.

00:08:20,480 --> 00:08:23,900
So by default, each grid item will go into one grid cell. 

00:08:23,900 --> 00:08:26,300
Many grid cell, become grid area.

00:08:26,300 --> 00:08:29,760
But the best part about grid right, is can have gaps.

00:08:29,860 --> 00:08:33,520
Okay, for those of you who don't do frontend or you don't build a lot of layouts,

00:08:33,520 --> 00:08:40,160
You all don't understand, how magical it is to automatically have gaps between your columns.

00:08:40,160 --> 00:08:44,040
Because, again ah, those of you never do frontend you all don't understand the pain,

00:08:44,040 --> 00:08:48,220
need to put negative margin, then you need to padding, then you minus here minus there,

00:08:48,220 --> 00:08:51,860
and then when you change your viewport size, then everything broken.

00:08:52,360 --> 00:08:56,000
No! Now, now got property specially for you to define.

00:08:56,000 --> 00:09:02,720
Say, eh, I want gap 1em. You just put gap: 1em, whoa, ah-maz-ing.

00:09:02,720 --> 00:09:05,340
So this feature has been expanded to flexbox

00:09:05,340 --> 00:09:10,000
so if you're using Firefox 63 and beyond, also can use gap in flexbox now.

00:09:11,280 --> 00:09:16,080
So, in 2017, grid had a sibei successful roll-out.

00:09:16,340 --> 00:09:21,560
"Sibei", originate from Teochew, can be used to describe extremely or very, 

00:09:21,560 --> 00:09:25,940
so like, CSS grid roll-out in 2017 sibei successful.

00:09:25,940 --> 00:09:26,880
That's how you use it.

00:09:27,380 --> 00:09:31,580
By the end of March right, all the major browsers have already shipped a stable implementation.

00:09:31,780 --> 00:09:37,280
And then even October hor, Samsung Internet and Edge also can support grid.

00:09:38,400 --> 00:09:41,620
So, right now, I know the text very small, cannot see, 

00:09:41,620 --> 00:09:47,420
but trust me, more than 93% of internet users are already using a browser that support grid.

00:09:47,420 --> 00:09:50,680
So if your excuse for not using grid is browser support,

00:09:50,860 --> 00:09:51,340
Cannot.

00:09:51,800 --> 00:09:53,220
Update your excuse. 

00:09:55,300 --> 00:09:57,600
So, okay. Ever since I start using Grid, right?

00:09:57,600 --> 00:09:59,600
I always use Firefox Devtools. Why?

00:09:59,600 --> 00:10:05,080
Because the feature set for debugging Grid with Devtools is the most "tok gong" feature set.

00:10:05,260 --> 00:10:08,880
But other than debugging right, Devtools can also help us learn CSS.

00:10:09,400 --> 00:10:11,400
Okay, don't talk so much. Example first.

00:10:12,320 --> 00:10:14,680
So this is a bunch of examples. 

00:10:14,680 --> 00:10:21,660
This is a Firefox, so when you activate your Devtools,

00:10:21,660 --> 00:10:23,660
see if I can zoom, I think cannot liao.

00:10:24,920 --> 00:10:25,800
Okay, this is the max.

00:10:25,800 --> 00:10:29,760
So when you first activate Devtools, you will see in the inspector,

00:10:30,080 --> 00:10:33,640
if you're using grid, Firefox will tell you you are using grid.

00:10:33,640 --> 00:10:35,760
Which is great. You know, like eh I already know I'm using grid. 

00:10:35,760 --> 00:10:37,760
But anyway, they will show you this tag,

00:10:37,760 --> 00:10:39,120
then this tag right, you can see ah,

00:10:39,120 --> 00:10:41,480
the cursor will change ah, change to means this -

00:10:41,480 --> 00:10:42,280
What does this mean?

00:10:42,280 --> 00:10:44,280
This mean can click, so you click on it.

00:10:44,280 --> 00:10:45,820
You click then you activate the overlay.

00:10:45,820 --> 00:10:49,180
So the overlay will show you how your grid looks like.

00:10:49,480 --> 00:10:51,340
And okay, so some of you are thinking,

00:10:51,340 --> 00:10:52,560
okay, I don't like purple.

00:10:52,560 --> 00:10:54,700
Can. You go to the layout panel.

00:10:55,080 --> 00:10:58,340
So, Firefox will also tell you all the grids,

00:10:58,340 --> 00:10:59,880
can detect all the grids on your page.

00:10:59,880 --> 00:11:03,000
And it will tell you, let you toggle on or off. 

00:11:03,180 --> 00:11:04,500
And then, okay, you don't like purple.

00:11:04,500 --> 00:11:06,500
I also don't know why you don't like purple, purple is a nice colour, right?

00:11:06,660 --> 00:11:07,940
Okay, say you don't like purple, 

00:11:07,940 --> 00:11:08,860
change colour lor.

00:11:08,860 --> 00:11:10,860
You can change to any colour you want.

00:11:11,320 --> 00:11:16,740
This is helpful if you have multiple, like if you got multiple nested grids, so you can differentiate.

00:11:16,740 --> 00:11:18,740
But anyway, let's just stick to purple. Purple quite nice.

00:11:20,520 --> 00:11:23,120
So the basic structure of grid we go back look at the code right,

00:11:23,700 --> 00:11:25,960
the grid syntax I personally quite like,

00:11:25,960 --> 00:11:28,740
because it's a very visual syntax.

00:11:28,740 --> 00:11:31,040
So after you apply display grid, right?

00:11:31,040 --> 00:11:35,460
You look, you define your grid using grid-template-columns and grid-template-rows.

00:11:35,460 --> 00:11:39,540
But you see ah, grid-template-column three value, then you see how? Three column.

00:11:39,780 --> 00:11:44,580
grid-template-row got 2 value, you see leh, 2 rows, Eh, very intuitive, very good.

00:11:45,000 --> 00:11:49,860
Then, if you look at the markup, is a grid container inside got 6 items.

00:11:50,240 --> 00:11:54,640
And I have defined a 6 cell grid, 3-by-2,

00:11:54,640 --> 00:11:57,900
so what the browser do? The browser just lay out in order la.

00:11:58,060 --> 00:12:01,140
So I'm like, okay la, not very impressive, because, you know, 

00:12:01,140 --> 00:12:04,120
every, last time, from 20 years ago until now, 

00:12:04,120 --> 00:12:06,520
browsers also lay things out in, in sequence ma.

00:12:06,520 --> 00:12:07,240
Nothing exciting.

00:12:07,240 --> 00:12:09,360
Okay, so this not, this not exciting enough.

00:12:09,360 --> 00:12:11,920
Let's look at the second example. So what is this? 

00:12:11,920 --> 00:12:16,240
This, for those of you who are not Asian, or maybe you just don't play board games,

00:12:16,240 --> 00:12:18,240
this is a board game called Go.

00:12:19,000 --> 00:12:20,740
This is the beginner version.

00:12:20,740 --> 00:12:24,360
So it's a 9 by 9 board instead of a 19 by 19.

00:12:24,360 --> 00:12:28,300
Honestly, it's because, 19-by-19 I very tired ah, cannot.

00:12:29,360 --> 00:12:31,860
So let's just do, I also don't know how to play Go,

00:12:31,860 --> 00:12:33,140
so we do the beginner version.

00:12:33,140 --> 00:12:35,440
So it's 9 by, 9 column, 9-by-9. 

00:12:35,440 --> 00:12:37,360
So 9 column mean 10 lines.

00:12:37,360 --> 00:12:40,920
So this is the time where having the line numbers very important.

00:12:40,920 --> 00:12:43,820
Because if you look at the markup again right,

00:12:43,820 --> 00:12:45,600
is one board inside got 4 pieces.

00:12:45,600 --> 00:12:48,000
And then I want to explicitly place my pieces.

00:12:48,780 --> 00:12:52,840
So if, if you go back to the layout, you can see, got settings. 

00:12:52,840 --> 00:12:55,000
Your settings can display line numbers or not. 

00:12:55,340 --> 00:12:57,740
Can display area name, or not. And can do other things.

00:12:57,740 --> 00:12:59,560
But let's say, don't have line numbers.

00:12:59,560 --> 00:13:00,860
You see ah, no line numbers.

00:13:00,860 --> 00:13:05,620
Do you want me to sit here and count line numbers to place the Go piece ah?

00:13:05,620 --> 00:13:08,120
Oh my god. My youth is slipping away, man. Cannot.

00:13:08,120 --> 00:13:08,640
Cannot.

00:13:08,640 --> 00:13:13,020
So let's talk about the syntax for placing items.

00:13:13,020 --> 00:13:14,920
Is a lot like secondary school maths.

00:13:14,920 --> 00:13:16,520
You know got x and y coordinate. 

00:13:16,520 --> 00:13:20,500
So you got grid-row, so grid-row: 4, grid-column: 5.

00:13:20,800 --> 00:13:22,760
No numbers, very hard!

00:13:22,760 --> 00:13:23,540
Cannot! 

00:13:23,540 --> 00:13:26,320
That's why this feature, whoa, very tok gong.

00:13:26,320 --> 00:13:27,920
So let's turn on this feature.

00:13:27,920 --> 00:13:29,920
And you see, ta-da, got line numbers.

00:13:29,920 --> 00:13:31,560
So I don't have to sit here and count lines eh,

00:13:31,560 --> 00:13:35,180
I can say 5, I want it here, so it's 5 and 4.

00:13:35,180 --> 00:13:36,080
Excellent.

00:13:36,080 --> 00:13:37,360
This is a excellent feature.

00:13:37,360 --> 00:13:41,880
One more thing about Firefox Devtools is that, UX feature.

00:13:41,880 --> 00:13:45,440
So if you look hor, my this grid very close to the edge.

00:13:45,440 --> 00:13:47,440
So under normal circumstances right, 

00:13:47,600 --> 00:13:50,140
this line, this label will be outside your window.

00:13:50,140 --> 00:13:54,000
But no, the Firefox Devtools team they thought about this problem.

00:13:54,120 --> 00:13:56,720
Actually is got people complain la, then they also - they go and update.

00:13:56,720 --> 00:13:59,060
But anyway, they have updated and now as you can see,

00:13:59,060 --> 00:14:03,540
at the edge right, the label shift in, so you'll always be able to see your label.

00:14:03,660 --> 00:14:06,320
UX improvement, everybody. UX improvement.

00:14:07,240 --> 00:14:10,420
So, another good feature, if you can see here, is display area names.

00:14:10,420 --> 00:14:12,600
Then you might be thinking, display area name do what?

00:14:12,600 --> 00:14:15,580
Ah, lai, now I explain to you, display area name do what.

00:14:15,580 --> 00:14:17,580
So let's look at this third grid. Highlight.

00:14:18,440 --> 00:14:21,360
So at first, you like, orh okay lor, liddat (like that) lor.

00:14:21,960 --> 00:14:24,160
Nothing special right? Ah wait. You turn on.

00:14:24,160 --> 00:14:25,100
Whoa, very special.

00:14:25,460 --> 00:14:28,580
Nah, you can see, the area, got name. 

00:14:28,580 --> 00:14:32,240
And hence it said, hence the naming grid areas.

00:14:32,240 --> 00:14:33,680
Why, English very straight forward, right?

00:14:33,680 --> 00:14:38,060
No, anyway, when you use grid-template-areas,

00:14:38,060 --> 00:14:44,500
is a - is another property that you can add on to the template columns and template rows,

00:14:44,500 --> 00:14:47,100
'cos when you define template columns and template rows,

00:14:47,100 --> 00:14:49,100
all you have is like numerical reference.

00:14:49,100 --> 00:14:53,060
And sometimes, numerical reference is a bit unwieldy,

00:14:53,060 --> 00:14:55,680
especially if you are building like, more full page layouts,

00:14:55,680 --> 00:14:58,000
let's say you got like 20 elements on the page right, 

00:14:58,000 --> 00:15:02,500
yeah, I mean you can, you can define each of your 20 grid items by counting num-

00:15:02,500 --> 00:15:04,080
counting line numbers.

00:15:04,080 --> 00:15:05,740
But, if you are like me, I'm like, 

00:15:05,740 --> 00:15:07,740
oh counting line numbers is a waste of my youth, 

00:15:07,740 --> 00:15:10,340
then erm, maybe you want to consider using named areas.

00:15:10,340 --> 00:15:13,740
So what you do, is, the syntax looks a bit not nice,

00:15:13,740 --> 00:15:16,000
but on your own code right, you can kind of format it.

00:15:16,000 --> 00:15:18,940
If you use a monospace font right, you can sort of format it,

00:15:18,940 --> 00:15:22,820
so it might be blur for people at the back, but there are quotes.

00:15:22,820 --> 00:15:27,640
So each quote represent one row, and all the values inside the quote represent column.

00:15:27,760 --> 00:15:30,700
So if for this example is a 6-by-6, 

00:15:30,700 --> 00:15:35,280
so I should have 6 ah, 6 quoted lines, 

00:15:35,460 --> 00:15:38,640
and each side, inside each quote there should be 6 values.

00:15:38,640 --> 00:15:39,480
It should match up.

00:15:39,480 --> 00:15:42,100
If it doesn't match up then browser say no, your code no good.

00:15:43,540 --> 00:15:47,160
So, how you do is, you can assign areas,

00:15:47,160 --> 00:15:49,160
your items area names. 

00:15:49,160 --> 00:15:52,320
So inside this grid, there are 3 items.

00:15:52,320 --> 00:15:55,240
And if I highlight the quote you can see,

00:15:55,900 --> 00:15:58,280
after I give the area a name,

00:15:58,280 --> 00:16:01,220
I will assign the name to my item.

00:16:01,220 --> 00:16:03,960
So first one is assign - I not very creative,

00:16:03,960 --> 00:16:05,480
so I just name it what I see.

00:16:05,480 --> 00:16:07,480
This is a Japanese doll emoji, 

00:16:07,480 --> 00:16:08,740
is a sushi emoji,

00:16:08,740 --> 00:16:10,220
and a Tokyo tower emoji.

00:16:10,220 --> 00:16:13,260
So you just call it doll, call sushi, call tower.

00:16:13,260 --> 00:16:16,000
'Cos creativity is in short supply here.

00:16:17,220 --> 00:16:21,480
So what's the interesting thing about this and the useful thing about this is that,

00:16:21,600 --> 00:16:25,260
again, like I mentioned, if you're doing responsive design, for like,

00:16:25,260 --> 00:16:27,720
full, full page layout, with lots of elements,

00:16:28,020 --> 00:16:32,480
usually what you want is that at different viewports, you're gonna change your layout.

00:16:32,480 --> 00:16:33,780
Your layout you need to move around, 

00:16:33,780 --> 00:16:36,200
so, the space is more better utilised, right?

00:16:36,540 --> 00:16:39,860
So, instead of going to each of your grid items,

00:16:39,960 --> 00:16:42,500
and adjusting their position per breakpoint,

00:16:42,740 --> 00:16:46,680
you isolate all your adjustments just to the grid template areas.

00:16:46,680 --> 00:16:48,680
So for example, okay, 

00:16:49,140 --> 00:16:52,340
sushi, don't need 4, don't need 4 cells la,

00:16:52,340 --> 00:16:53,220
2 cells can liao.

00:16:53,220 --> 00:16:55,220
So what you do is, 

00:16:55,760 --> 00:17:00,180
you just make the change on the grid template areas property.

00:17:00,700 --> 00:17:04,940
And you don't have to touch, you don't have to go to the sushi grid item and change anything.

00:17:04,940 --> 00:17:08,020
Because once you assign the name to it, just leave it.

00:17:08,020 --> 00:17:13,440
And then you just adjust the size and the position of the item from the grid parent itself.

00:17:13,440 --> 00:17:15,320
So it makes your code more clean also.

00:17:15,600 --> 00:17:19,940
Yeah. That's the useful thing about template areas.

00:17:19,940 --> 00:17:25,420
And the fact that Firefox supports the display of area names is,

00:17:25,420 --> 00:17:27,420
it makes it so much easier to work with.

00:17:28,300 --> 00:17:31,420
Last example for grid right, is

00:17:31,500 --> 00:17:33,620
animating grid rows and columns.

00:17:33,620 --> 00:17:37,040
So a lot of people actually don't know can animate grid rows and columns.

00:17:37,040 --> 00:17:40,320
Actually, this feature was written into the spec from day 1.

00:17:40,320 --> 00:17:42,560
It's just that when something written into the spec,

00:17:42,560 --> 00:17:44,920
versus when something implement in browser, 

00:17:44,920 --> 00:17:46,720
they're like, they're not the same story.

00:17:46,760 --> 00:17:47,780
It's like, ehhh.

00:17:47,780 --> 00:17:50,040
So anyway, 66, 

00:17:50,040 --> 00:17:54,160
Firefox 66 onwards start to support animating rows and grids.

00:17:54,160 --> 00:17:56,880
So I don't highlight ah, I just show you this thing.

00:17:57,060 --> 00:18:01,000
The first thing you - cos the first time I saw this style of implementation right, 

00:18:01,000 --> 00:18:03,940
I was like, whoa, grid item can jump grid track wan ah.

00:18:04,040 --> 00:18:05,040
Actually cannot.

00:18:05,220 --> 00:18:07,820
'Cos if you - if you think about how animation works right,

00:18:07,820 --> 00:18:09,820
animation must interpolate a value.

00:18:10,780 --> 00:18:14,920
Items jumping grid track is not interpolating a value. Is magic.

00:18:14,920 --> 00:18:16,920
And ah, and ah, cannot do magic. 

00:18:16,920 --> 00:18:21,020
So, what's good about, again, Devtools is that

00:18:21,020 --> 00:18:24,020
when you highlight right, ah, then you see, the truth.

00:18:24,020 --> 00:18:27,500
And the truth is, the background is a lie.

00:18:27,500 --> 00:18:30,260
Okay, let's look at how fake this background is. 

00:18:30,260 --> 00:18:32,260
The background is linear gradient yo.

00:18:32,260 --> 00:18:33,260
Yeah, the background is a lie.

00:18:33,260 --> 00:18:37,120
Is not a 3-by-3 grid at all. It's only 2 by - it's only 2-by-2.

00:18:37,500 --> 00:18:38,760
And what the animation does,

00:18:38,760 --> 00:18:43,020
is it's interpolating the size of your first grid cell. 

00:18:43,580 --> 00:18:48,100
So is becoming wider, then becoming longer, then shrinking back.

00:18:48,740 --> 00:18:53,760
So the good thing about Firefox Devtools grid overlay is that, 

00:18:54,080 --> 00:18:58,260
when they ship the ability for you to animate the grid right,

00:18:58,480 --> 00:19:03,640
they - they match the overlay to support the animation as well.

00:19:03,640 --> 00:19:08,820
So I think this is the part where we can use Firefox to, sorry, we can use Devtools

00:19:08,820 --> 00:19:12,540
to sort of learn and understand CSS better.

00:19:12,700 --> 00:19:17,420
As long as the browser is able to ship the new feature with supporting Devtools right,

00:19:17,420 --> 00:19:21,720
we can actually use the Devtools to visualise a lot of these newer CSS properties.

00:19:21,720 --> 00:19:25,260
And that's one of my favourite things about Firefox Devtools.

00:19:25,420 --> 00:19:31,060
But okay, so I feel that I have convinced you that grid very "tok gong".

00:19:31,060 --> 00:19:32,580
If you still don't think it's very "tok gong",

00:19:32,580 --> 00:19:34,280
I also don't know what more I can say la. Ah hah.

00:19:34,280 --> 00:19:36,620
So I'm just gonna assume that you're on the boat. 

00:19:36,840 --> 00:19:39,780
Ah so, what can make grid even more "tok gong"?

00:19:39,780 --> 00:19:40,600
Level 2.

00:19:40,600 --> 00:19:44,600
So, okay. This level thing right, CSS got specs,

00:19:44,600 --> 00:19:47,820
CSS specs got level wan.

00:19:47,820 --> 00:19:49,820
So let's explain the level a bit.

00:19:49,820 --> 00:19:53,160
Long story short, the CSS spec used to be like very long.

00:19:53,160 --> 00:19:55,840
Is very long document for the first 2 version.

00:19:56,020 --> 00:19:59,460
But then in 2000, it got split up into modules, so like, 

00:19:59,680 --> 00:20:03,740
the editors is, it's easier for them to test ah, maintain this whole,

00:20:03,740 --> 00:20:04,900
this specification.

00:20:04,900 --> 00:20:09,340
And this split up version right, is the one where everybody call CSS3,

00:20:09,340 --> 00:20:11,700
is the one where all of you put in your resume,

00:20:11,700 --> 00:20:15,780
I know CSS3 and HTML5, please hire me.

00:20:15,780 --> 00:20:17,020
Yeah, that's the version you all are using,

00:20:17,020 --> 00:20:20,580
but there will never be a CSS4 or 5 or so on, 

00:20:20,580 --> 00:20:23,520
so don't put that in your resume, it's a dead give-away that you don't know what you're talking about

00:20:23,520 --> 00:20:24,800
Don't do it. Ah.

00:20:25,240 --> 00:20:28,440
Because now each CSS feature is a separate document. 

00:20:28,620 --> 00:20:32,040
So when a feature grows too big or something inside needs more discussion right,

00:20:32,040 --> 00:20:33,520
it will get deferred to the next level.

00:20:33,520 --> 00:20:36,740
For example, like media queries right, now like up to level 5 already. 

00:20:37,360 --> 00:20:41,220
Then, things like, the newer things like, say, let me think.

00:20:41,220 --> 00:20:42,320
Containment. 

00:20:42,320 --> 00:20:44,680
Containment only level 1 because it's very new.

00:20:45,200 --> 00:20:48,140
So that's how the modules and the level system works.

00:20:48,140 --> 00:20:51,020
So subgrid right, subgrid has always been very important,

00:20:51,020 --> 00:20:56,240
but ah, because it, there are a lot of edge cases that people need to take care of,

00:20:56,240 --> 00:20:59,860
it needed more time to make sure that you implement it very "swee-swee" right?

00:20:59,860 --> 00:21:01,860
So it got deferred to level 2. 

00:21:01,860 --> 00:21:06,220
So level 2 of the spec right, got subgrid, which is nested grid, I explain later.

00:21:06,220 --> 00:21:09,900
And another thing called aspect ratio controlled gutters, ah,

00:21:09,900 --> 00:21:10,600
not going to talk about that. 

00:21:10,600 --> 00:21:11,340
Today, only subgrid.

00:21:12,260 --> 00:21:15,380
So ah, eh, like why need subgrid?

00:21:15,420 --> 00:21:16,140
Grid already very good. 

00:21:16,420 --> 00:21:18,720
Correct. Grid already very good, but subgrid makes it better.

00:21:18,900 --> 00:21:21,120
So subgrid got quite a few use cases.

00:21:21,120 --> 00:21:22,780
Because what subgrid actually does is

00:21:22,780 --> 00:21:26,540
it let the nested grid line up with the outermost grid.

00:21:26,860 --> 00:21:29,600
So for example, ah, because

00:21:29,600 --> 00:21:32,840
everybody and their cat want like this kind of card-style layout,

00:21:32,840 --> 00:21:37,180
and then, many times, your designer just assumes that 

00:21:37,180 --> 00:21:39,720
everyone speaks the same amount of lorum ipsum

00:21:39,720 --> 00:21:43,040
and give you a, give you the, the, Photoshop is like,

00:21:43,040 --> 00:21:46,240
wah, everything, the card, the header and footer must same size hor.

00:21:46,240 --> 00:21:48,240
Then you're like, erm okay, sure.

00:21:48,240 --> 00:21:49,860
And then when you implement, right?

00:21:49,860 --> 00:21:53,920
You realise that the header content and the footer content all different.

00:21:54,040 --> 00:21:55,420
And then everything senget.

00:21:55,540 --> 00:21:57,760
So you implement all the content different length wah,

00:21:57,760 --> 00:21:58,800
then jia lat right?

00:21:58,800 --> 00:22:03,380
Or if you wanted to align inline forms where your labels,

00:22:03,620 --> 00:22:04,940
your label and your form input,

00:22:04,940 --> 00:22:07,820
you want your label to all line up together vertically, right?

00:22:07,820 --> 00:22:09,620
Ah, also very hard. Also cannot.

00:22:09,620 --> 00:22:12,600
So what we use to do it that, you don't even implement this,

00:22:12,600 --> 00:22:14,920
you just put the label on top of the input la, right?

00:22:15,060 --> 00:22:18,460
But now. But now, with subgrid, can.

00:22:18,460 --> 00:22:23,700
Because with subgrid, your grandchild elements actually know about the parent grid.

00:22:24,020 --> 00:22:26,440
So we will look a bit more at the example.

00:22:26,440 --> 00:22:28,080
Okay, before that right? Got syntax.

00:22:28,080 --> 00:22:29,480
Okay, this syntax look a bit "cheem".

00:22:29,480 --> 00:22:31,480
But later got example then easier to see.

00:22:31,480 --> 00:22:36,720
The most important thing here to know, is that the subgrid keyword is a sizing keyword.

00:22:36,720 --> 00:22:39,800
So you don't put display: subgrid, cannot. Salah.

00:22:40,060 --> 00:22:45,320
If you use, if you want to use subgrid, the browser - when you do that, 

00:22:45,320 --> 00:22:52,000
the browser will know that your nested grid should follow the size of the outermost grid.

00:22:52,260 --> 00:22:56,640
And is also possible to keep nesting subgrid, but like, 

00:22:56,640 --> 00:22:58,640
don't do this "jialat" nesting, okay?

00:22:58,960 --> 00:23:02,180
So, again, a reminder, when you use subgrid, 

00:23:02,180 --> 00:23:05,860
you use it inside grid template columns or grid template rows. 

00:23:05,860 --> 00:23:07,860
Your display still must use grid.

00:23:08,360 --> 00:23:11,680
Just. If you don't remember anything else of the nonsense I say today,

00:23:11,680 --> 00:23:12,740
just remember this part.

00:23:14,680 --> 00:23:17,060
So, okay, example time.

00:23:17,480 --> 00:23:23,500
So, grid, subgrid can use in a single dimension.

00:23:23,500 --> 00:23:25,500
What, what does this mean? Okay, highlight.

00:23:25,620 --> 00:23:26,860
Highlight then you can see.

00:23:27,560 --> 00:23:33,180
So, this is where the multiple colours thing really come, like very very useful. 

00:23:33,340 --> 00:23:37,140
So when you highlight your nested and your, your parent grid right,

00:23:37,140 --> 00:23:38,460
you can see the difference.

00:23:38,460 --> 00:23:40,540
So okay again numbers a bit small,

00:23:40,820 --> 00:23:44,460
but for numbering, what you can see is that, 

00:23:44,800 --> 00:23:48,000
even though your subgrid follow the size of the parent right,

00:23:48,000 --> 00:23:50,000
the subgrid index start from 1.

00:23:50,000 --> 00:23:53,660
So, on the parent is, is line number is 3,

00:23:53,860 --> 00:23:56,120
but when you start a subgrid it will start from 1 again.

00:23:56,120 --> 00:23:58,660
Okay that's one of the basic things.

00:23:58,660 --> 00:24:01,520
But okay, so you can define it along a single dimension.

00:24:01,520 --> 00:24:04,300
So for this particular example right, if you look at the rules, 

00:24:04,400 --> 00:24:06,400
I make the columns,

00:24:09,540 --> 00:24:12,540
highlight the subgrid... okay, here

00:24:14,440 --> 00:24:18,600
I make the columns subgrid, but the rows ownself anyhowly.

00:24:19,600 --> 00:24:21,560
Excuse me. Hello. Yeah.

00:24:21,560 --> 00:24:26,000
So when you set subgrid on the columns, it will follow your parent grid.

00:24:26,080 --> 00:24:27,660
But because the rows never set right?

00:24:27,660 --> 00:24:30,840
The row can own size. Is anyhowly size also can.

00:24:30,840 --> 00:24:33,080
So similarly if you do it for rows,

00:24:33,080 --> 00:24:34,400
the rows dimension right?

00:24:34,660 --> 00:24:37,260
This is actually the same example, different dimension.

00:24:37,600 --> 00:24:40,380
So ah, okay let me highlight this.

00:24:43,460 --> 00:24:45,760
So you can see, the code is that now, 

00:24:45,760 --> 00:24:49,060
subgrid put on rows right, it will follow the parent rows,

00:24:49,060 --> 00:24:51,740
but again column can ownself anyhowly, right?

00:24:51,900 --> 00:24:55,340
So this is what I mean by single dimension.

00:24:55,580 --> 00:24:59,660
Another feature of subgrid is that the way gaps are handled,

00:24:59,660 --> 00:25:02,900
is also slightly different from a normal nested grid.

00:25:03,500 --> 00:25:06,620
So when you have a grid, 

00:25:06,620 --> 00:25:11,280
you can apply gaps, which we've all agreed that gap is an amazing property.

00:25:11,280 --> 00:25:18,680
So by default right, the child grid will adopt the same value of gap as the parent.

00:25:18,680 --> 00:25:19,580
But you can override.

00:25:19,960 --> 00:25:21,860
So for this example, I override already.

00:25:22,620 --> 00:25:27,700
So when I do - when I highlight subgrid, you can see that on the parent the grid is 1em,

00:25:28,060 --> 00:25:30,640
then on the subgrid I override to 2em.

00:25:30,640 --> 00:25:33,780
So if you look at the lighter, the lighter number 2, 

00:25:33,780 --> 00:25:35,620
this is a grandchild element.

00:25:35,820 --> 00:25:38,000
And number 4 is a child element, 

00:25:38,000 --> 00:25:40,500
they are in the same column, they should be sized the same,

00:25:40,720 --> 00:25:44,340
but because the gap for the subgrid is bigger right,

00:25:44,340 --> 00:25:46,800
number 2 is actually a little bit than number 4.

00:25:46,940 --> 00:25:54,720
So this erm. So grid, the gaps on your subgrid is gonna affect the sizing of your grandchildren elements. 

00:25:54,720 --> 00:25:59,740
So it's something to keep in mind if you need to adjust the gap for your subgrids

00:25:59,740 --> 00:26:01,160
or your nested subgrid subgrid.

00:26:01,400 --> 00:26:05,620
Ah, it might affect the sizing, if you need things to line up exactly, 

00:26:05,620 --> 00:26:07,840
maybe sometimes this might be an issue.

00:26:08,640 --> 00:26:11,980
And, so other than gaps right,

00:26:11,980 --> 00:26:16,140
even paddings and margin and borders, they will accumulate.

00:26:16,420 --> 00:26:20,760
So this is a, this is a case of "jia lat" nesting.

00:26:20,760 --> 00:26:24,540
So I mean, can do la, but maybe don't do la.

00:26:24,720 --> 00:26:27,140
When you do right, if you want to nest 

00:26:27,560 --> 00:26:29,520
you have a grid, you have a subgrid, 

00:26:29,640 --> 00:26:30,840
and then you got sub-subgrid,

00:26:32,240 --> 00:26:33,940
What's going to happen is

00:26:35,600 --> 00:26:36,620
at the edge -

00:26:37,020 --> 00:26:40,120
So if you look at number 2, number 2 is at the edge of the grid. 

00:26:40,940 --> 00:26:45,180
Any padding, margin and borders accumulate.

00:26:45,680 --> 00:26:49,340
So even though the grand, the great-grandchild element -

00:26:49,340 --> 00:26:52,760
is aligned with the second column of the parent grid right,

00:26:52,760 --> 00:26:53,860
the size very small.

00:26:53,860 --> 00:26:59,840
Why? Because the margin, padding and borders already eat into the sizing for number 2. 

00:27:00,320 --> 00:27:03,720
But if you look at number 3, which is also a great grandchild element,

00:27:03,720 --> 00:27:06,260
the size, not affected 'cos it's not at the edge.

00:27:06,260 --> 00:27:08,260
So this, this ah, 

00:27:09,560 --> 00:27:10,200
what do you call this,

00:27:10,200 --> 00:27:13,280
this situation only happens at the edge.

00:27:13,340 --> 00:27:14,320
The edge of your grid. 

00:27:14,520 --> 00:27:17,960
So when your nested grids have their own padding and margin, 

00:27:17,960 --> 00:27:19,660
this is something to keep in mind.

00:27:19,660 --> 00:27:22,560
And it will affect the sizing of your elements.

00:27:22,560 --> 00:27:25,060
Especially if you want all your elements to be the same size.

00:27:25,060 --> 00:27:27,160
This, this is something that might happen at the edge.

00:27:27,720 --> 00:27:30,520
Ah, one more thing is that there's no implicit grid tracks. 

00:27:30,520 --> 00:27:32,620
Okay, so the way grid works right, is -

00:27:32,620 --> 00:27:37,560
that if you have items that fall beyond your defined grid right, 

00:27:37,560 --> 00:27:41,440
the browser will automatically generate more tracks for the items to fit in.

00:27:41,440 --> 00:27:44,720
But when you're using subgrid, ah, you cannot. 

00:27:44,720 --> 00:27:48,480
You cannot define more cells than your subgrid covers.

00:27:48,860 --> 00:27:52,300
So, we highlight here, and then you can see,

00:27:53,020 --> 00:27:56,200
this is a grid, this is a subgrid.

00:27:56,680 --> 00:27:59,400
So the subgrid here that I defined right,

00:27:59,400 --> 00:28:02,500
is a 2, 2-row 2-column area.

00:28:03,280 --> 00:28:05,280
Inside your, inside my subgrid,

00:28:05,600 --> 00:28:09,360
even if I choose to size it to the width of three columns,

00:28:09,360 --> 00:28:10,720
the browser will clamp it.

00:28:10,720 --> 00:28:13,440
The browser will like, no, your subgrid only go up to this size, 

00:28:13,440 --> 00:28:15,440
so I not gonna expand this any further.

00:28:15,600 --> 00:28:18,420
So even if I, like span 4, 5, 6, 7 right, 

00:28:18,420 --> 00:28:20,420
it will forever be 2, right? 

00:28:20,720 --> 00:28:23,020
So that, that's what we mean by no implicit grid.

00:28:23,020 --> 00:28:27,800
The browser is not going to generate more columns inside the subgrid to hold your item,

00:28:27,800 --> 00:28:28,820
it doesn't work that way.

00:28:29,100 --> 00:28:32,940
So similarly, if you look at this second example right, 

00:28:35,060 --> 00:28:37,300
unhighlight everything...

00:28:38,040 --> 00:28:39,700
Ah, okay, the,

00:28:39,700 --> 00:28:44,900
the multi-overlay only support up to 3, ah because, you know,

00:28:45,240 --> 00:28:48,480
life is not perfect, so let's just all accept this.

00:28:48,480 --> 00:28:49,580
Ah, and then, 

00:28:51,460 --> 00:28:52,740
so this is also a grid. 

00:28:53,100 --> 00:28:57,840
The subgrid is a 6 by 6 cells. So 3 by 2 right. 

00:28:58,000 --> 00:29:01,600
So inside here I actually I just nice I got 6, I got 6 items.

00:29:01,600 --> 00:29:03,600
So let's say -

00:29:04,140 --> 00:29:05,820
I change the size of the subgrid.

00:29:06,040 --> 00:29:08,920
So instead of a 6 cell right, I change to 2 cell.

00:29:09,660 --> 00:29:14,180
So what's going to happen is that it was A, B, C, D, E - A, B, C, D, E, F.

00:29:14,180 --> 00:29:19,200
A, B, C, D, E, F. So E and F right end up all get stacked up onto the last track.

00:29:19,720 --> 00:29:21,020
Because there's no space already. 

00:29:21,020 --> 00:29:22,360
So it's not going to spill over.

00:29:22,360 --> 00:29:24,780
It's just, oh, everybody just overlap on top of each other never mind.

00:29:24,980 --> 00:29:28,440
Ya, so, this is how subgrid works.

00:29:28,440 --> 00:29:32,180
And especially when you're doing, if you're using subgrid to size,

00:29:32,440 --> 00:29:35,960
you may need to match, match the number of items inside.

00:29:36,500 --> 00:29:38,420
Okay, so I, I very very over time,

00:29:38,540 --> 00:29:40,680
so just now all the use cases that I talked about right,

00:29:40,680 --> 00:29:43,960
the code is also here, and this will be shared with everybody later.

00:29:44,080 --> 00:29:45,540
So you can just use, again, 

00:29:45,540 --> 00:29:47,840
use Firefox Devtools, ah, 

00:29:48,280 --> 00:29:51,340
use latest edition to inspect and then you can see how it's done.

00:29:51,700 --> 00:29:54,360
So I go back to slides. 

00:29:54,460 --> 00:29:57,960
And just, show you ah, browser support. 

00:29:57,960 --> 00:29:59,960
Ah, this, there's a moral to this, 

00:29:59,960 --> 00:30:01,960
the moral is life is not perfect. 

00:30:02,440 --> 00:30:05,500
But so, so browser support for subgrid a bit sad ah, 

00:30:05,660 --> 00:30:06,560
here ah, 

00:30:06,860 --> 00:30:09,440
But, so this is - no no no no, this is a reason, 

00:30:09,440 --> 00:30:14,100
why more of us need to try to build things with subgrid,

00:30:14,100 --> 00:30:16,860
we need to talk about it, complain about it if you must.

00:30:16,860 --> 00:30:19,960
Because, any publicity is good publicity.

00:30:19,960 --> 00:30:21,860
So, when there is publicity right, 

00:30:21,860 --> 00:30:25,920
then other browser makers also prioritise subgrid and ship it sooner.

00:30:25,920 --> 00:30:27,580
So, ya please, please, don't,

00:30:27,580 --> 00:30:29,980
don't say don't use, ah, must use.

00:30:29,980 --> 00:30:31,260
Good things must share. 

00:30:31,880 --> 00:30:35,560
So anyway, if you're interested to learn more about grid and subgrid, 

00:30:35,560 --> 00:30:37,560
all these links are very helpful, 

00:30:37,560 --> 00:30:40,560
and definitely download a copy of Firefox.

00:30:40,560 --> 00:30:43,140
Plus points if you use nightly version. 

00:30:43,140 --> 00:30:45,580
Because life is short. Take some risks.

00:30:46,820 --> 00:30:47,560

YouTube URL: https://www.youtube.com/watch?v=Ym0SWyIsdEc


