Title: Let's Talk About Web Compat - Karl Dubost and Daisuke Akatsuka - Mozilla Developer Roadshow - Seoul
Publication date: 2019-12-21
Playlist: Mozilla Developer Roadshow 2019 - Asia
Description: 
	Karl Dubost introduces webcompat.com and speaks about the challenges of browser compatibility. His Mozilla colleague  Daisuke Akatsuka speaks about Firefox DevTools and a  browser compatibility-checker tool that's under development.
Captions: 
	00:00:04,800 --> 00:00:05,980
Hi, I'm Karl. 

00:00:06,520 --> 00:00:09,240
I'm working in the WebCompat team. 

00:00:09,660 --> 00:00:15,120
And I will be co-presenting with Daisuke who is working in the Firefox DevTools team. 

00:00:15,120 --> 00:00:19,560
And we'll be talking a bit about web compatibility and DevTools. 

00:00:20,360 --> 00:00:24,140
The fun part will be with Daisuke, the boring part will be with me.

00:00:26,320 --> 00:00:30,420
Okay, so usually when - 

00:00:30,420 --> 00:00:32,420
who's a web developer here?

00:00:32,420 --> 00:00:34,420
who's developing website for business?

00:00:34,420 --> 00:00:35,820
Cool, almost everyone. 

00:00:39,800 --> 00:00:40,620
I will be nasty. 

00:00:41,720 --> 00:00:46,600
So usually when we are selling websites to clients, this is what we sell. 

00:00:46,600 --> 00:00:54,980
Like we sell a beautiful image of something which is super sleek, clean, all the interactions are good. 

00:00:54,980 --> 00:00:57,980
It's working everywhere. No worries. 

00:00:59,080 --> 00:01:02,900
Hm. A website is not necessarily like that. 

00:01:03,220 --> 00:01:05,740
A website looks a lot more like this. 

00:01:05,740 --> 00:01:11,840
Like, underneath the UI. You have all the real stuff. 

00:01:12,540 --> 00:01:15,760
So you're using a React JS, 

00:01:15,760 --> 00:01:20,420
you're using multiple version of jQuery because of the libraries you're using, 

00:01:20,500 --> 00:01:25,040
sometimes very, very outdated jQuery libraries, 

00:01:25,380 --> 00:01:30,540
which means like some of them have bugs, which are conflicting with the new one you're using. 

00:01:32,320 --> 00:01:37,480
Declarative CSS with CSS-in-JS now is kind of in the trash down there. 

00:01:37,800 --> 00:01:43,140
And and oh, shoot - we have forgotten like, 

00:01:43,140 --> 00:01:49,240
we need to put a bit of accessibility inside or accessibility on the top shelf there. 

00:01:49,440 --> 00:01:51,940
Like, let's not care too much about it. 

00:01:51,940 --> 00:01:57,800
So that's the sad reality of websites and the consequences. 

00:01:58,320 --> 00:02:05,900
But that is what you have - users who are using a very shiny or dominant market share browser, 

00:02:06,260 --> 00:02:10,500
and who's happy using his browser and have a wonderful experience. 

00:02:11,020 --> 00:02:16,980
And you have the normal user who is commuting every day in the train with a browser, 

00:02:16,980 --> 00:02:20,960
which is not the new one or the shiny one but just the browser that 

00:02:22,040 --> 00:02:23,760
either they didn't have the choice, 

00:02:23,760 --> 00:02:28,740
because they are working in a company where there's a limitation on the browser, 

00:02:28,740 --> 00:02:31,840
or just because they want to have the browser of their choice. 

00:02:32,140 --> 00:02:37,280
And they have a broken experience, like websites are broken for them. 

00:02:37,620 --> 00:02:39,700
And that's, that's a sad story. 

00:02:39,700 --> 00:02:46,480
Like, if you are working in a big company, it means like some users can't use the website you developed, 

00:02:46,940 --> 00:02:49,020
and for the company, you lose customers. 

00:02:49,520 --> 00:02:51,800
So you have to think about that. 

00:02:52,320 --> 00:02:57,500
So where does my job at Mozilla come in? 

00:03:01,080 --> 00:03:04,480
I am part of a team which is the web compatibility team 

00:03:04,480 --> 00:03:08,760
and which tries to address basically the mess of the web, 

00:03:08,940 --> 00:03:11,640
all the dirty things you are producing, 

00:03:12,840 --> 00:03:15,180
we try to get through it. 

00:03:15,420 --> 00:03:20,360
Basically I'm like, let's say I'm a garbage scavenger, 

00:03:20,360 --> 00:03:24,380
or like a web plumber, like how you - 

00:03:24,380 --> 00:03:27,060
like I'm dealing with dirty stuff on the web. 

00:03:28,540 --> 00:03:30,560
So we have this website, 

00:03:30,560 --> 00:03:33,540
if you see something which is broken, like a website, 

00:03:33,540 --> 00:03:38,160
as a user, you're using the web in your browser, it's broken. 

00:03:38,640 --> 00:03:42,800
You can go to this website, be it on Firefox, on Chrome, on Safari, 

00:03:42,800 --> 00:03:44,960
whichever browser you're using, 

00:03:44,960 --> 00:03:47,700
and you can report the bug there, okay. 

00:03:48,400 --> 00:03:52,360
And there're people looking at these bugs. 

00:03:52,920 --> 00:03:55,900
And what we do is we do diagnosis. 

00:03:56,200 --> 00:03:57,280
What does that mean? 

00:03:57,280 --> 00:04:02,240
It's like we go with our hands inside the minified dirty, messy code 

00:04:02,240 --> 00:04:08,300
with your two version of jQuery and minify the React code 

00:04:08,680 --> 00:04:14,300
and we go through it like we try to define and understand the issues, 

00:04:14,660 --> 00:04:18,100
and we try to extract what are the problems. 

00:04:18,580 --> 00:04:21,700
And sometimes it's a bit hard. 

00:04:21,700 --> 00:04:24,680
Sometimes it's very painful to go through your code. 

00:04:26,520 --> 00:04:32,560
But we are a dedicated team of four persons doing that - the diagnosis. 

00:04:32,560 --> 00:04:43,440
And we handle something like 400 issues a week, trying to understand what's happening. 

00:04:44,120 --> 00:04:50,660
And issues can be multiple, like you have user agent sniffing, which is one of the minor issues. 

00:04:51,200 --> 00:04:57,480
B, like for delivering an experience, either you have the website which is, for example, you're on mobile 

00:04:57,480 --> 00:05:00,540
and you receive the desktop site on mobile, 

00:05:00,880 --> 00:05:05,940
this is usually a user agent sniffing issue be it on the server side on the client side.

00:05:06,400 --> 00:05:11,100
You have things which are nastier in the sense of 

00:05:11,840 --> 00:05:17,780
the user agent sniffing will create a specific code path in your js, 

00:05:18,140 --> 00:05:25,020
and you will end up in a code path which is not working for Firefox, for example. 

00:05:26,220 --> 00:05:30,000
By the way, if you're doing like your selections and whichever, 

00:05:30,340 --> 00:05:32,000
like even for feature detection, 

00:05:33,200 --> 00:05:35,140
have a fallback in your code.

00:05:35,440 --> 00:05:37,860
If you do JS, have a fallback. 

00:05:38,380 --> 00:05:42,200
Like basically the fallback should not be broken. 

00:05:43,920 --> 00:05:48,240
Like the fallback should be something which is working for any user, okay? 

00:05:49,280 --> 00:05:54,040
So try to be creative in having a fallback which is working. 

00:05:54,900 --> 00:05:56,580
So what's happening? 

00:05:57,440 --> 00:06:05,480
We diagnose the website, and we need to do something about it. Like we have different options. 

00:06:06,200 --> 00:06:11,260
The first option is the hard option, which is the outreach. 

00:06:11,800 --> 00:06:13,760
So what is outreach? 

00:06:13,760 --> 00:06:19,620
Outreach is basically me trying to find you, to track you down in your company, 

00:06:19,780 --> 00:06:22,040
like who did this dirty code? 

00:06:22,040 --> 00:06:25,220
I want the name, I want the address, 

00:06:25,480 --> 00:06:29,260
I want the phone number of this person, so I can harass the person. 

00:06:30,720 --> 00:06:33,920
And for some countries, it's easy. 

00:06:33,920 --> 00:06:39,140
Like, for example, in North America and Europe, it's quite easy to track down people. 

00:06:39,560 --> 00:06:43,360
In some, for example, in Japan it's super hard. 

00:06:43,360 --> 00:06:48,540
Plus, if you find the developer, it doesn't mean the developer has the power to change anything 

00:06:48,540 --> 00:06:51,780
because there's the bus and does the bus above the bus and 

00:06:51,780 --> 00:06:54,620
there's the marketing people, the other type. 

00:06:55,880 --> 00:06:58,740
And the marketing people are just like, telling you like 

00:06:58,740 --> 00:07:01,000
"No, no, it's not in our business priorities." 

00:07:02,720 --> 00:07:04,560
So outreach is super hard. 

00:07:04,560 --> 00:07:12,820
It's really not, like encouraging and you spend a lot of time.

00:07:13,120 --> 00:07:17,460
So the other solution is browser patches. 

00:07:17,460 --> 00:07:19,440
So what do you do when you do a browser patch? 

00:07:19,440 --> 00:07:24,780
Basically, you have a broken website. So you try to do outreach. 

00:07:24,780 --> 00:07:28,360
At the same time, you can try to fix it in the browser, 

00:07:28,660 --> 00:07:33,160
like by doing either hacks, or live coding.

00:07:33,640 --> 00:07:39,420
So for example, we have pieces of JavaScript for which sometimes we modify the behavior of the code - 

00:07:39,640 --> 00:07:42,840
of the JavaScript code of the website on the fly. 

00:07:44,680 --> 00:07:47,540
The problem with that is that it's a dirty solution. 

00:07:47,540 --> 00:07:51,260
So you have to add solution on the top - the outreach. 

00:07:51,440 --> 00:07:54,180
And at the bottom, you have the dirty solution. Why is it dirty? 

00:07:54,180 --> 00:08:01,080
Because imagine your code base of the browser with a lot of patches, little by little, on top of each other, 

00:08:01,320 --> 00:08:03,720
at some point it's very difficult to manage. 

00:08:04,140 --> 00:08:08,320
Plus, it doesn't improve the web platform because after, you have to live with that. 

00:08:08,560 --> 00:08:16,820
The things which were dirty at the point - if they are continuing to be on the web, will become part of the web platform. 

00:08:17,100 --> 00:08:20,580
Latest example of that - dash WebKit. Okay. 

00:08:20,960 --> 00:08:30,640
Many websites, in Asia specifically, have been using dash WebKit for CSS, or for JavaScript, 

00:08:30,920 --> 00:08:33,780
which means it's now part of the web platform. 

00:08:33,980 --> 00:08:38,700
Like in the spec, dash WebKit is not anymore a vendor property,

00:08:38,880 --> 00:08:41,220
it's something which is part of the web platform.

00:08:41,220 --> 00:08:48,740
If you want to implement a browser, you're forced to implement WebKit, like WebKit properties. 

00:08:48,840 --> 00:08:53,120
You don't have to insert the WebKit engine but WebKit properties. 

00:08:53,600 --> 00:08:55,820
If you don't do that, the website will be broken.

00:08:57,380 --> 00:09:04,860
So it's kind of a nightmare. Please improve. 

00:09:10,480 --> 00:09:12,040
Give the user a better experience. 

00:09:13,280 --> 00:09:19,360
All that said, I'm saying like it's dirty and you do messy code. 

00:09:19,600 --> 00:09:23,220
But still, you're doing amazing thing with the web, as web developers. 

00:09:23,220 --> 00:09:28,260
And like, we do all, collectively, things which are wonderful on the web. 

00:09:28,860 --> 00:09:32,300
So it's not that bad, but please think about it. 

00:09:32,300 --> 00:09:36,160
Like when you're creating a website, think about testing in different browsers. 

00:09:36,560 --> 00:09:41,960
Think about having - specifically there are tools now to do that, 

00:09:41,960 --> 00:09:46,220
like websites and services to help you test in different browsers automatically. 

00:09:46,760 --> 00:09:50,740
And inside Firefox, we have the DevTools, 

00:09:50,740 --> 00:09:57,300
and the DevTools are an amazing way to try to understand and detect issues with websites.

00:09:57,300 --> 00:09:59,300
And Daisuke will talk about that.

00:10:04,480 --> 00:10:06,900
Hello, my name is Daisuke Akatsuka.

00:10:07,440 --> 00:10:10,100
I'm a developer for DevTools.

00:10:11,660 --> 00:10:19,720
Today, I'd like to introduce a new web compatibility tool we are developing as one of the DevTools. 

00:10:20,980 --> 00:10:28,700
As Karl said, it seems that web compatibility is very important for us. 

00:10:31,420 --> 00:10:40,660
However, what we check - all of the CSS properties, HTML tags, APIs for JavaScript... 

00:10:40,920 --> 00:10:42,180
it's super hard.

00:10:43,580 --> 00:10:47,860
So I hope the tool will solve such problems. 

00:10:50,460 --> 00:10:55,280
But before that, let me talk about DevTools a bit. 

00:10:55,880 --> 00:11:03,920
As you may know, Firefox has tools for the web developer called DevTools. 

00:11:04,400 --> 00:11:14,100
We can inspect web pages, structures, styling, networking and performance, etc, etc. 

00:11:14,600 --> 00:11:22,520
So let's see this page's structure using DevTools.

00:11:30,620 --> 00:11:36,880
So have you ever used the DevTools in Firefox? 

00:11:37,640 --> 00:11:40,520
Ah, good.

00:11:50,280 --> 00:11:57,440
According to DevTools, this website has a main element,

00:12:03,540 --> 00:12:19,300
and uh, the content is separated by the section tags and each detail is in the element. 

00:12:21,160 --> 00:12:28,480
And we can also know how the style is set in the element. 

00:12:28,480 --> 00:12:35,960
Now I am selecting the body element and we can see the rules in the body. 

00:12:36,640 --> 00:12:46,340
So the text color is gray and DevTools can not only inspect but also modify the page. 

00:12:46,940 --> 00:12:51,000
So, maybe change the color of text, 

00:12:51,960 --> 00:12:53,500
maybe pink...

00:12:56,760 --> 00:13:06,340
and also we can change, for example, maybe the font, spacing or the weight. 

00:13:09,080 --> 00:13:16,600
So this means that DevTools can help us inspect and modify, 

00:13:16,960 --> 00:13:21,260
then we can apply the changes to the actual code. 

00:13:23,360 --> 00:13:26,880
So, the tools have so many features. 

00:13:26,880 --> 00:13:34,500
So I'd like to introduce one of the new features called inactive CSS. 

00:13:35,340 --> 00:13:37,360
For example,

00:13:40,960 --> 00:13:48,080
if we want to center this image, how should we do it?

00:13:48,800 --> 00:13:51,540
So let's inspect this one. 

00:13:52,840 --> 00:14:01,660
It's an image element which was wrapped by the figure and the figure wrapped by the div.

00:14:05,980 --> 00:14:09,740
So this div has the right height. 

00:14:09,940 --> 00:14:13,660
So maybe we can change the style in the div. 

00:14:14,680 --> 00:14:20,780
So there are some ways to center the element,

00:14:21,560 --> 00:14:25,720
but let me use align-items here.

00:14:26,820 --> 00:14:32,240
Center... but the layout was not changed at all. 

00:14:32,720 --> 00:14:41,740
So the inactive CSS shows why and how to fix the issue. 

00:14:45,500 --> 00:14:51,320
And this icon is a sign of the inactive CSS 

00:14:52,200 --> 00:14:59,960
According to the tool, align-items has no effect on this element since it's neither a flex container or a grid container. 

00:14:59,960 --> 00:15:02,460
Try adding display:grid or display:flex.

00:15:02,460 --> 00:15:06,500
So, maybe display:flex...

00:15:08,920 --> 00:15:12,360
And we could center the element.

00:15:13,900 --> 00:15:28,880
So, the inactive CSS shows hints such as the reason and how to fix, just in case the CSS properties does not affect the layout. 

00:15:30,400 --> 00:15:35,720
And now, let me introduce the web compatibility tool. 

00:15:37,220 --> 00:15:45,420
For example, maybe let me inspect this element and inspect the tool's compatibility. 

00:15:48,720 --> 00:15:56,460
I'm using the padding-inline property which is a logical property but according to this tool, 

00:15:56,700 --> 00:16:07,780
the padding-inline is marked as experimental, also some browsers do not support this property. 

00:16:08,780 --> 00:16:18,740
Let me see... Firefox version, Android version, Safari current and so on, 

00:16:19,000 --> 00:16:22,280
do not support the padding-inline.

00:16:22,280 --> 00:16:27,720
So let's see Safari, using Safari...

00:16:31,720 --> 00:16:38,520
Yep, like this, the padding property does not affect the layout at all.

00:16:44,240 --> 00:16:46,700
So, how to fix that? 

00:16:47,300 --> 00:17:00,240
Unfortunately, for now, we may need to use a different property, maybe the shorthand padding.

00:17:04,440 --> 00:17:06,980
After that, the issue is gone. 

00:17:07,720 --> 00:17:15,740
And then maybe we can provide the same content to the old browsers.

00:17:17,500 --> 00:17:19,620
Let me demo - one more demo.

00:17:21,200 --> 00:17:24,160
Inspect this image.

00:17:26,520 --> 00:17:37,080
I'm using the clip to clip this photo, since the photo is too big. 

00:17:38,460 --> 00:17:43,040
However the clip is marked as deprecated. 

00:17:43,840 --> 00:17:52,600
So let's see the documentation and let's see how to fix that.

00:17:56,540 --> 00:18:08,120
We can jump to the documentation for the developer network and we can check the solution. 

00:18:08,380 --> 00:18:17,160
So according to this document, authors are encouraged to use the newer clip-path property instead. 

00:18:17,640 --> 00:18:19,860
So maybe check clip-path, 

00:18:21,940 --> 00:18:24,480
and use the clip-path.

00:18:26,960 --> 00:18:34,180
Yeah, actually the deprecated issue is gone. However, the layout is broken. 

00:18:35,260 --> 00:18:37,840
So check the reason - 

00:18:38,720 --> 00:18:45,360
So the rect function is invalid for the clip-path.

00:18:45,360 --> 00:18:45,380
So let me copy and paste. So the rect function is invalid for the clip-path.

00:18:45,380 --> 00:18:52,820
So let me copy and paste.

00:18:54,600 --> 00:18:55,040
Oh.

00:18:57,180 --> 00:19:01,400
Actually, this is not the expected result. 

00:19:03,980 --> 00:19:08,540
However it seems that we can solve the issue. 

00:19:09,580 --> 00:19:17,060
Also, let me introduce one more feature with DevTools that is called the CSS Shape Editor. 

00:19:19,680 --> 00:19:26,200
So we can edit the shape, CSS shape, in DevTools like -

00:19:33,620 --> 00:19:34,600
Maybe triangle...

00:19:43,020 --> 00:19:47,080
Yeah. Text alignment became a bit weird. 

00:19:47,360 --> 00:19:51,240
So let's use shape-outside

00:19:56,300 --> 00:19:57,900
shape-outside...

00:20:01,660 --> 00:20:10,800
Yeah, if we use the shape-outside, the shape-outside can make the text aligned 

00:20:12,900 --> 00:20:14,920
aligned to the shape.

00:20:20,000 --> 00:20:26,540
Anyway, I could fix the deprecated issue.

00:20:31,260 --> 00:20:38,780
As you can see, we can know the web compatibility issues using this tool. 

00:20:39,140 --> 00:20:42,000
And so as Kyle said,

00:20:42,920 --> 00:20:55,100
let's keep making the web an amazing and beautiful place with this tool.

00:21:02,720 --> 00:21:07,100
We are developing so many features for DevTools. 

00:21:07,560 --> 00:21:13,780
So if you want to know more information, please follow this Twitter account. 

00:21:14,740 --> 00:21:15,740
Yes, that's it.

00:21:15,740 --> 00:21:16,860

YouTube URL: https://www.youtube.com/watch?v=oeDiLb1SVl0


