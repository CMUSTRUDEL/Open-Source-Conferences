Title: 10 things I hate about animation - by Brian Birtles - Mozilla Developer Roadshow - Seoul
Publication date: 2019-12-21
Playlist: Mozilla Developer Roadshow 2019 - Asia
Description: 
	Brian Birtles shares his pet peeves about web animation, and offers some technological solutions.
Captions: 
	00:00:02,520 --> 00:00:03,800
Good evening, everyone.

00:00:05,400 --> 00:00:10,840
My name is Brian and unfortunately, unlike Hui Jing, I don't speak Korean. 

00:00:12,500 --> 00:00:16,080
I think the only Korean I remember is "fighting".

00:00:17,400 --> 00:00:21,740
So this is the last presentation for this evening. 

00:00:21,820 --> 00:00:25,140
So please, just "fighting" for a little bit more. 

00:00:27,100 --> 00:00:29,740
I'm going to be speaking about animation, 

00:00:30,100 --> 00:00:35,540
and especially 10 things I really don't like about animation.

00:00:36,020 --> 00:00:39,380
10 things that are really frustrating about animation. 

00:00:40,600 --> 00:00:46,400
But I'm also going to talk about the things that Mozilla has been doing to fix those problems. 

00:00:46,400 --> 00:00:49,800
The new technologies Mozilla has been developing for animation. 

00:00:50,800 --> 00:00:54,960
But first, I should explain why I hate animation so much. 

00:00:55,520 --> 00:00:58,740
I'll do that by introducing myself a little bit. 

00:00:59,540 --> 00:01:04,900
I'm originally from Australia, but I currently live in Tokyo. 

00:01:05,460 --> 00:01:09,580
And I've worked on Firefox for about 15 years, 

00:01:09,780 --> 00:01:15,480
and mostly on animations - on CSS animations and web animations. 

00:01:15,640 --> 00:01:21,400
And also on the standards for animations at the CSS Working Group. 

00:01:22,540 --> 00:01:28,760
Recently, I switched and started a new company that works on web browsers and web apps. 

00:01:28,760 --> 00:01:35,160
But I'm still working on animations in Firefox and animation specifications as well. 

00:01:35,500 --> 00:01:40,700
So for about 15 years, I have been working with animations. 

00:01:41,120 --> 00:01:46,780
So maybe more than most people, I have experienced how frustrating they can be 

00:01:46,780 --> 00:01:48,580
and how hard they can be. 

00:01:49,580 --> 00:01:53,700
Because I think animations actually are very hard. 

00:01:54,900 --> 00:01:57,600
You have to always think about performance. 

00:01:57,820 --> 00:01:59,920
If you don't, then things get slow. 

00:02:00,340 --> 00:02:02,880
And there's all sorts of bugs that come up. 

00:02:03,220 --> 00:02:06,560
And if you get it wrong, it's frustrating for you,

00:02:07,040 --> 00:02:09,320
but it's also frustrating for your users. 

00:02:10,040 --> 00:02:13,860
So maybe some people know this goose game. 

00:02:14,400 --> 00:02:17,060
Animations for me are a bit like this goose - 

00:02:17,200 --> 00:02:20,320
it's always kind of teasing you, trying to trip you up, 

00:02:20,480 --> 00:02:23,620
and it's always something that's gonna go wrong. 

00:02:24,300 --> 00:02:29,600
So today, I want to talk about 10 different things that are frustrating with animations, 

00:02:29,600 --> 00:02:33,920
and how to fix them - some of the new technologies for fixing them. 

00:02:34,640 --> 00:02:38,220
So I'll start with the simplest possible kind of animation, 

00:02:38,700 --> 00:02:45,860
not a complicated one, just one where there are several frames that you show in a row.

00:02:46,240 --> 00:02:48,900
So maybe an animation like this one.

00:02:49,840 --> 00:02:56,020
We could make this with perhaps seven frames, and then just show them one by one. 

00:02:56,580 --> 00:02:59,980
Maybe we would think we can set it up like this. 

00:02:59,980 --> 00:03:06,800
So a long strip of frames, and then a CSS animation and the steps timing functions.

00:03:06,800 --> 00:03:06,820
So it jumps seven times. So a long strip of frames, and then a CSS animation and the steps timing functions.

00:03:06,820 --> 00:03:08,960
So it jumps seven times. 

00:03:09,500 --> 00:03:11,720
Surely this is going to work, right? 

00:03:12,740 --> 00:03:14,860
Well, if you try it, it doesn't. 

00:03:15,980 --> 00:03:17,760
It's all unaligned.

00:03:19,340 --> 00:03:20,460
Why, what's wrong?

00:03:20,820 --> 00:03:26,320
Well, it turns out this '7' in the steps function is not the number of frames

00:03:26,320 --> 00:03:28,560
it's the number of times it changes - 

00:03:28,560 --> 00:03:32,120
it's the number of jumps, including the jump at the very end. 

00:03:33,060 --> 00:03:35,760
So maybe we need to make it six instead. 

00:03:36,620 --> 00:03:39,380
If we do that, then it's aligned. 

00:03:39,640 --> 00:03:42,700
But we're missing the last frame - it only goes up to six. 

00:03:43,580 --> 00:03:50,140
Because this function has a jump at the very end but you don't see the frame. 

00:03:50,780 --> 00:03:54,620
We can change where that jump happens, we can use the start keyword. 

00:03:55,640 --> 00:03:58,080
But now, we're missing the first frame.

00:04:00,460 --> 00:04:04,460
So even the simplest animation can be so frustrating. 

00:04:04,740 --> 00:04:10,540
And so for this particular problem, Mozilla proposed this new keyword 'jump-none'. 

00:04:10,860 --> 00:04:14,740
And that will actually finally give you the animation you want. 

00:04:16,060 --> 00:04:20,360
There's a few other keywords as well for completeness.

00:04:21,020 --> 00:04:25,020
And these have been implemented in Firefox and in Chrome,

00:04:25,420 --> 00:04:28,360
just waiting on Safari to add support for that.

00:04:30,340 --> 00:04:36,120
The second problem, which you might encounter with animations is - I certainly have - is 

00:04:36,480 --> 00:04:41,580
when you use transitions in an application, you often have bugs. 

00:04:42,180 --> 00:04:44,800
When we were working on Firefox OS, 

00:04:44,960 --> 00:04:50,560
we had so many bugs in the Firefox OS applications because of transitions. 

00:04:51,280 --> 00:04:55,880
And if you analyze them, there's basically two common problems. 

00:04:56,540 --> 00:05:00,880
One is that the transitions never get created in the first place, 

00:05:01,320 --> 00:05:04,600
and one is that they get created, but they never finish. 

00:05:05,700 --> 00:05:08,900
So if your application is waiting for the end of the transition, 

00:05:09,200 --> 00:05:10,900
it's going to wait a very long time. 

00:05:11,600 --> 00:05:16,600
So to fix this, at Mozilla we proposed some new events, 

00:05:16,600 --> 00:05:21,640
one is a transition run, and that will tell you that the transition got created. 

00:05:21,640 --> 00:05:26,500
So if you don't get that, you shouldn't bother waiting for the transition end. 

00:05:27,240 --> 00:05:33,280
And the other one is if the element disappeared somehow while the transition was running, 

00:05:33,280 --> 00:05:38,020
then a cancel event will fire so you know not to wait anymore for the transition end.

00:05:39,320 --> 00:05:43,280
There are a couple of other events, but they are mostly just for completeness. 

00:05:44,560 --> 00:05:48,020
And this is implemented in all the major browser engines 

00:05:48,020 --> 00:05:52,040
but it's not yet in the release version of Safari. 

00:05:52,040 --> 00:05:54,500
It should be in the next version of Safari. 

00:05:56,380 --> 00:06:06,620
Another problem which you might face is everyone says CSS animation, CSS transitions are so great because they're really performant. 

00:06:07,120 --> 00:06:10,040
The browser can optimize them so they run smoothly. 

00:06:10,040 --> 00:06:13,120
They can run on another thread or another process. 

00:06:13,460 --> 00:06:17,360
But sometimes it's not convenient to write all your animation to CSS. 

00:06:17,800 --> 00:06:24,440
If you wanted to do some sort of random animation like this, it's much more convenient to write it with JavaScript. 

00:06:25,120 --> 00:06:30,060
But you still want the same performance as CSS animations and transitions. 

00:06:30,320 --> 00:06:34,500
So you can try to make CSS animations with JavaScript.

00:06:34,920 --> 00:06:36,140
But it's really hard. 

00:06:36,800 --> 00:06:41,100
If you tried to do this animation with CSS animations, 

00:06:41,320 --> 00:06:45,840
well first you have to think of a unique name for each keyframe's rule. 

00:06:46,220 --> 00:06:48,520
You need to find a style sheet object, 

00:06:48,520 --> 00:06:50,780
you need to write a really, really long string, 

00:06:51,000 --> 00:06:52,580
and then it might work. 

00:06:53,320 --> 00:06:58,200
But you have to remember to remove it as well later when the element disappears. 

00:06:58,620 --> 00:07:02,660
So it's very, very clumsy to do this from JavaScript. 

00:07:03,380 --> 00:07:08,220
Maybe CSS transitions are easier, because they're simpler.

00:07:08,400 --> 00:07:10,840
Actually turns out transitions are even harder. 

00:07:11,420 --> 00:07:15,400
Firstly, there's the transition and event problem we talked about. 

00:07:16,060 --> 00:07:20,100
Even just generating the transition is very difficult. 

00:07:20,700 --> 00:07:26,220
In March, I had a chance to speak at a CSS conference about animations. 

00:07:26,220 --> 00:07:32,240
And I spent half the talk, just explaining how to reliably generate transitions from JavaScript. 

00:07:33,040 --> 00:07:35,080
It's actually very, very hard.

00:07:35,780 --> 00:07:41,280
So what should you do if you want to generate performant animations from JavaScript? 

00:07:42,300 --> 00:07:46,720
A few years ago, Mozilla proposed this new API "Element.animate", 

00:07:46,720 --> 00:07:49,420
which will generate an animation from JavaScript, 

00:07:49,620 --> 00:07:54,680
which will be optimized in the same way as CSS animations or CSS transitions. 

00:07:54,680 --> 00:07:56,260
It's exactly the same code. 

00:07:57,520 --> 00:08:01,780
And it's also convenient because it returns a animation object, 

00:08:01,780 --> 00:08:06,400
which you can then use to, for example, pause the animation or speed it up. 

00:08:06,540 --> 00:08:12,980
And there's also a promise you can use to wait for it to finish so you don't need to worry about transitions and events. 

00:08:14,020 --> 00:08:18,160
This has been implemented in the major browser engines. 

00:08:18,160 --> 00:08:22,440
And again, this is in Safari, but hasn't shipped in our latest version yet. 

00:08:22,680 --> 00:08:24,960
But hopefully early next year, it will. 

00:08:27,060 --> 00:08:31,700
Another problem and this might seem like a very minor one, 

00:08:31,700 --> 00:08:35,960
but it's a very common problem, is with CSS animations, 

00:08:35,980 --> 00:08:38,760
sometimes you want to ease the whole animation. 

00:08:39,580 --> 00:08:42,520
So for example, with this animation here, 

00:08:42,820 --> 00:08:48,960
maybe I want to have that steps timing function so that it goes in, say, four steps. 

00:08:49,860 --> 00:08:52,580
You could write this here it says steps "4". 

00:08:53,220 --> 00:08:56,380
But if you count, there's more than four steps. 

00:08:58,000 --> 00:08:58,620
What's going on? 

00:08:58,620 --> 00:09:03,640
If we look at this in the Firefox developer tools for animations, 

00:09:03,880 --> 00:09:06,260
you can see there's more than four steps. 

00:09:06,480 --> 00:09:08,720
In fact, it looks like there's about eight steps. 

00:09:09,660 --> 00:09:15,980
And the reason for that is that this easing, this timing function, in CSS animations, 

00:09:15,980 --> 00:09:18,880
doesn't apply over the whole animation. 

00:09:19,240 --> 00:09:22,140
It actually gets applied to each keyframe. 

00:09:22,600 --> 00:09:26,600
And so you can't actually ease the whole animation.

00:09:28,160 --> 00:09:31,780
So what should you do if you want to ease the whole animation? 

00:09:31,780 --> 00:09:35,480
Well, firstly, this might seem like a very small problem,

00:09:35,480 --> 00:09:36,940
but it's a very common one. 

00:09:37,180 --> 00:09:41,080
When we were doing Firefox OS, I got this bug report. 

00:09:41,420 --> 00:09:43,480
And the reporter said, 

00:09:43,760 --> 00:09:46,880
This animation seems to slow down in the middle. 

00:09:47,280 --> 00:09:48,400
What's going on? 

00:09:48,860 --> 00:09:51,220
If you watch the slow motion version,

00:09:51,720 --> 00:09:54,560
you can see it seems to almost stop in the middle.

00:09:55,360 --> 00:09:59,320
And if you inspect it in the developer tools, you can see why. 

00:09:59,660 --> 00:10:05,060
It's because this easing gets applied twice between the key frames. 

00:10:05,540 --> 00:10:06,900
So how do we fix it? 

00:10:07,540 --> 00:10:15,700
Well, there's no easy way to fix it in CSS animations, but with the API introduced, the Element.Animate API, 

00:10:15,940 --> 00:10:20,040
you can actually set easing on the whole animation. 

00:10:22,280 --> 00:10:24,180
I realize that's a little bit hard to see. 

00:10:24,640 --> 00:10:28,920
But you can also set it on keyframes, but you can set it across the whole animation too, 

00:10:28,920 --> 00:10:32,140
and now you can see there are clearly four steps.

00:10:34,780 --> 00:10:36,060
The next problem -

00:10:39,020 --> 00:10:40,140
Speed, okay.

00:10:42,020 --> 00:10:49,340
Often when we write animations, whether they're in CSS animations, or transitions, or this Element.Animate, 

00:10:49,580 --> 00:10:52,620
you always have to say how long the animation goes for. 

00:10:52,900 --> 00:10:55,520
And sometimes that's not very convenient. 

00:10:56,580 --> 00:11:01,460
So for example, this duck - goose animation here. 

00:11:03,720 --> 00:11:08,640
It doesn't matter how far the goose travels, it always takes the same time. 

00:11:09,080 --> 00:11:13,360
So when it goes a long distance it's really fast, 

00:11:13,720 --> 00:11:17,100
but when it goes a short distance, it's very slow. 

00:11:17,320 --> 00:11:22,100
So it's a bit unnatural, but the way animation technologies work, 

00:11:22,100 --> 00:11:24,760
it's all about, you have to say how long it's going to take. 

00:11:25,820 --> 00:11:28,540
But sometimes I want to say how fast it goes instead. 

00:11:29,300 --> 00:11:30,740
So how do we fix this? 

00:11:31,120 --> 00:11:35,920
Well, one idea is we could go to the CSS Working Group. 

00:11:36,900 --> 00:11:39,860
I think one of the members might be here in the audience today. 

00:11:41,020 --> 00:11:46,460
And we could say to the CSS Working Group, "please give us this feature, give us speed-based animation." 

00:11:48,360 --> 00:11:50,780
But that can take a very, very long time. 

00:11:51,360 --> 00:11:54,360
Maybe it will be several years, maybe it will never happen. 

00:11:55,100 --> 00:11:56,880
So we'd like to find another way. 

00:11:58,400 --> 00:12:01,580
And there is another way which I would like to introduce.

00:12:02,660 --> 00:12:08,720
I introduced the Element.animate method and that returns an animation object. 

00:12:09,100 --> 00:12:16,180
There's another API, which will give you an animation object for a CSS transition or a CSS animation. 

00:12:16,180 --> 00:12:18,800
And it's called getAnimations. 

00:12:19,040 --> 00:12:22,140
So we could write some code like this, 

00:12:22,400 --> 00:12:26,900
where we wait for a transition, check that it's a transform transition. 

00:12:27,600 --> 00:12:32,420
And then we call getAnimations to get the actual animation objects 

00:12:32,780 --> 00:12:34,800
and check that we got the right one. 

00:12:35,520 --> 00:12:38,820
And then we can look at the key frames for the transition 

00:12:39,160 --> 00:12:42,020
and decide how far is the transition going, 

00:12:42,480 --> 00:12:46,560
and then adjust the time for it - the length of time or the speed. 

00:12:47,680 --> 00:12:52,040
And if we do that, then hopefully we get something that's a little bit more natural. 

00:12:52,220 --> 00:12:59,220
So a short distance should be fast and a long distance should take longer. 

00:13:00,940 --> 00:13:04,840
It's not perfect, but it's a little bit closer to what we would hope for. 

00:13:05,860 --> 00:13:10,360
Unfortunately, this API is pretty new. 

00:13:11,040 --> 00:13:15,200
It's implemented in all three major browser engines. 

00:13:15,460 --> 00:13:19,200
It's just not shipped yet, because we still need to fix a couple of things. 

00:13:19,200 --> 00:13:26,440
But right now, Google, and Apple and Mozilla are all working together hard to ship this,

00:13:26,440 --> 00:13:28,140
hopefully early next year. 

00:13:29,840 --> 00:13:34,080
Another problem, which is a little bit similar, is with transitions, 

00:13:34,260 --> 00:13:37,160
they just go in a straight line from one point to another, 

00:13:37,160 --> 00:13:43,080
it's just a to b, and you can't change how it gets between the two points. 

00:13:43,420 --> 00:13:46,460
So if you want to animate between green and red, 

00:13:47,060 --> 00:13:52,100
it's just going to animate in a straight line, changing each of the RGB values. 

00:13:52,300 --> 00:13:54,100
So you end up with brown in the middle. 

00:13:54,920 --> 00:13:58,960
And that's maybe not the effect you want in all cases. 

00:13:58,960 --> 00:14:06,560
So if you had an app like this, then maybe you decide I don't really like the brown color in the middle. 

00:14:06,980 --> 00:14:10,520
Maybe instead you want to use yellow, for example.

00:14:12,280 --> 00:14:14,600
Yeah, that's maybe better.

00:14:15,340 --> 00:14:19,900
You could try HSL or something, maybe, not sure. 

00:14:20,960 --> 00:14:22,240
But there's no way you can do that. 

00:14:22,240 --> 00:14:24,880
Transitions don't give you that control. 

00:14:25,520 --> 00:14:26,640
So what can we do? 

00:14:27,260 --> 00:14:32,620
Well, we can ask the CSS Working Group, but that could take a little while. 

00:14:32,620 --> 00:14:37,700
So instead, we can just write some code using that same API. 

00:14:38,420 --> 00:14:42,080
So again, just wait for a transition, check it's on the field property, 

00:14:42,700 --> 00:14:48,520
get the key frames, and then make up our own new key frames which have the midpoints you want 

00:14:48,860 --> 00:14:50,920
and replace them on the transition. 

00:14:52,080 --> 00:14:54,760
And if we do that, we should get a different effect. 

00:14:55,100 --> 00:15:01,400
So now this is using HSL, which is I think, a lot worse actually. 

00:15:02,560 --> 00:15:05,380
Anyway, it's different and we can change it ourselves. 

00:15:05,380 --> 00:15:08,320
We don't have to wait for new specification. 

00:15:08,700 --> 00:15:14,140
Problem with HSL is all the brightnesses are different, so probably needs a bit more work. 

00:15:14,860 --> 00:15:19,640
But this as well is not really ready for production, unfortunately, 

00:15:19,640 --> 00:15:21,640
but hopefully early next year. 

00:15:23,860 --> 00:15:27,460
Even so, there's still some animations which are hard to express, 

00:15:27,880 --> 00:15:33,060
because there's just something which we don't have features for on the web. 

00:15:33,760 --> 00:15:38,100
For example, it's easy to make the goose move in a straight line. 

00:15:38,420 --> 00:15:41,420
But geese don't often go in straight lines. 

00:15:42,600 --> 00:15:45,180
Instead, we probably want to do something more like this. 

00:15:46,280 --> 00:15:50,420
This is a lot more goose-like, a lot more fun anyway. 

00:15:51,500 --> 00:15:54,320
And this has been very, very hard to do. 

00:15:54,320 --> 00:16:00,100
But now it's actually become very easy because we have this new offset path property. 

00:16:00,600 --> 00:16:03,740
And that will let you describe the path of the object. 

00:16:04,180 --> 00:16:07,580
And then you just animate its position along that path. 

00:16:09,300 --> 00:16:13,380
So you can use it for geese, but also for things like an onboarding flow, 

00:16:13,380 --> 00:16:16,600
where you describe the movement of the mouse. 

00:16:17,740 --> 00:16:21,740
And this has just recently been implemented in Firefox. 

00:16:22,880 --> 00:16:26,320
And it should be released in version 72.

00:16:27,960 --> 00:16:30,960
So, just waiting for Safari, I guess.

00:16:32,460 --> 00:16:36,440
Another problem, this is - for me, the hardest thing about animation is performance. 

00:16:36,740 --> 00:16:42,380
It just seems like you always have to think about performance, and there are so many things to think about, 

00:16:42,380 --> 00:16:44,080
so many things that could go wrong. 

00:16:44,680 --> 00:16:49,160
So the simple rule is just to always animate transform and opacity. 

00:16:49,580 --> 00:16:53,080
If you do that, you're normally going to be okay. 

00:16:53,740 --> 00:16:57,440
And there's a lot of things you can do with transform and opacity. 

00:16:58,460 --> 00:17:01,380
All sorts of spin effects and fade effects. 

00:17:01,740 --> 00:17:07,640
And if you really get creative, you can do things like even a color change, 

00:17:07,640 --> 00:17:11,940
by putting two elements on top of each other and fading one, 

00:17:12,680 --> 00:17:14,580
or a shadow effect of some sort. 

00:17:15,360 --> 00:17:19,940
And even the flying animations I showed you before, 

00:17:20,400 --> 00:17:24,000
that's actually - that's actually a transform animation. 

00:17:24,000 --> 00:17:26,000
It can be optimized in the same way. 

00:17:26,380 --> 00:17:29,060
So you can actually do quite a lot. 

00:17:29,060 --> 00:17:37,740
In fact, a few years ago, Daisuke and I worked on this animation of a Japanese fairy tale. 

00:17:38,320 --> 00:17:40,800
And except for the animation on the letters, 

00:17:41,040 --> 00:17:46,000
everything else is just CSS, it's just opacity and transform. 

00:17:46,400 --> 00:17:47,880
So you can get a long way. 

00:17:48,580 --> 00:17:50,860
But still, you might want to check, 

00:17:50,860 --> 00:17:55,560
Am I doing it right? Is this actually being optimized properly? 

00:17:57,380 --> 00:18:01,680
And for that, the Firefox Animation DevTools can be very helpful. 

00:18:01,940 --> 00:18:08,900
They tell you all about the state of the animation, but also they tell you performance information. 

00:18:09,380 --> 00:18:15,840
This little purple lightning bolt next to opacity, 

00:18:16,080 --> 00:18:20,980
that tells you that animation is fully optimized, so you're okay. 

00:18:21,320 --> 00:18:26,080
But sometimes there's a animation which could have been optimized but which isn't for some reason, 

00:18:26,080 --> 00:18:28,340
and then it will give you a hint and tell you why. 

00:18:29,240 --> 00:18:34,880
So if you're not sure about performance, please have a look at Firefox Animation DevTools. 

00:18:36,100 --> 00:18:41,180
An even bigger problem though, is sometimes animations can make people feel unwell. 

00:18:42,040 --> 00:18:48,960
This year in January, I went to this amazing light show in Tokyo with my sister. 

00:18:49,440 --> 00:18:55,800
And it was fantastic, but after about one hour, my sister and I just felt terribly ill.

00:18:56,380 --> 00:18:59,780
And some people have that reaction to animations. 

00:19:00,260 --> 00:19:06,720
So recently in different operating systems, there's a setting to turn down animations, 

00:19:06,720 --> 00:19:11,080
and you can now inspect that from CSS as well, using a media query. 

00:19:11,360 --> 00:19:16,420
You can either turn animations off altogether, or just make them more subtle. 

00:19:16,960 --> 00:19:19,900
And of course, you can check it from JavaScript as well. 

00:19:21,860 --> 00:19:25,480
This one, fortunately, is implemented pretty much everywhere. 

00:19:26,780 --> 00:19:32,680
So today, I've introduced a number of things about animations that I find really frustrating. 

00:19:32,940 --> 00:19:37,980
But I've also introduced some things that Mozilla has been working on to hopefully fix those problems. 

00:19:39,700 --> 00:19:43,280
You might have noticed that I've only actually given you nine.

00:19:43,500 --> 00:19:46,340
And that's because I don't actually hate animations. 

00:19:47,680 --> 00:19:51,120
I actually think they can be really great and they can be really fun. 

00:19:51,460 --> 00:19:55,900
And they can make your app or your homepage more engaging and more enjoyable too. 

00:19:56,300 --> 00:19:59,700
But please give them a try, and if you have troubles,

00:19:59,700 --> 00:20:05,740
then maybe one of the 10 or nine things tonight will help you to fix some of those troubles. 

00:20:06,380 --> 00:20:12,260
If you want to review the material from tonight then the slides are at this address, 

00:20:12,380 --> 00:20:15,420
or if you have questions, feel free to ask me. 

00:20:15,920 --> 00:20:17,680

YouTube URL: https://www.youtube.com/watch?v=QybMNLFoK5s


