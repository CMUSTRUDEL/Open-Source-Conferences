Title: Making CSS From Good to Great - by HJ Chen - Mozilla Developer Roadshow - Taipei (Chinese)
Publication date: 2020-01-21
Playlist: Mozilla Developer Roadshow 2019 - Asia
Description: 
	(Presented in Chinese; includes English subtitles) Singapore-based developer advocate Hui Jing Chen presents her CSS Subgrid talk.
Captions: 
	00:00:04,300 --> 00:00:07,500
Hi, I’m Hui Jing Chen from Malaysia

00:00:07,680 --> 00:00:09,520
I usually don’t use Mandarin to deliver my talks

00:00:10,100 --> 00:00:13,460
but l’ve chosen to give myself a little challenge today,

00:00:13,620 --> 00:00:15,340
so if there’s any words or phrases that I’ve used wrongly

00:00:15,440 --> 00:00:17,620
please bear with me.

00:00:17,740 --> 00:00:19,240
I extremely love emojis

00:00:19,340 --> 00:00:21,580
and therefore I’d like to use emojis to introduce myself

00:00:21,580 --> 00:00:24,240
I used to be a basketball player

00:00:24,240 --> 00:00:27,140
and that unexpectedly kickstarted my career as a web developer.

00:00:27,220 --> 00:00:29,300
If you are curious about it, 

00:00:29,300 --> 00:00:31,300
we can talk about it later.

00:00:32,300 --> 00:00:35,340
I’m currently a developer advocate for Nexmo

00:00:35,380 --> 00:00:40,040
and also a member of one of the developer teams.

00:00:40,040 --> 00:00:42,920
Nexmo is Vonage’s API platform

00:00:42,980 --> 00:00:44,680
Although this is pretty interesting,

00:00:44,680 --> 00:00:46,680
we won’t talk about Vonage today.

00:00:46,680 --> 00:00:48,680
Instead, we’ll talk about web layouts.

00:00:51,080 --> 00:00:53,080
Introducing web layouts,

00:00:53,080 --> 00:00:57,480
At first, there was no concept of web layouts in the earlier stages

00:00:57,480 --> 00:01:02,520
at that time, webpages consisted only of plain text

00:01:02,520 --> 00:01:06,620
text can be adjusted by spacing, line breaks

00:01:06,620 --> 00:01:09,480
or indents.

00:01:09,480 --> 00:01:11,380
If you wanted to design

00:01:11,380 --> 00:01:13,700
layouts similar to those of the printing design industry,

00:01:13,720 --> 00:01:15,940
it was quite impossible at that time.

00:01:15,940 --> 00:01:18,160
So, when did we

00:01:18,160 --> 00:01:20,140
start being able to design on webpages?

00:01:21,000 --> 00:01:23,000
The ability to determine the position of elements

00:01:23,000 --> 00:01:25,480
came about around 1994

00:01:25,480 --> 00:01:28,840
because at that time, browsers started to support the table element

00:01:28,840 --> 00:01:30,960
The function of tables were

00:01:30,980 --> 00:01:34,400
to allow us to properly present tabular data.

00:01:34,400 --> 00:01:39,480
Very soon after, tables then became one of the main tools in designing layouts

00:01:39,500 --> 00:01:41,760
Developers were very creative too

00:01:41,760 --> 00:01:43,740
they nested tables infinitely

00:01:43,740 --> 00:01:48,100
And that’s what we call, stopping at nothing to achieve the desired layouts.

00:01:48,100 --> 00:01:50,860
Then in 1996, CSS came along

00:01:50,860 --> 00:01:54,080
it brought about the float attribute

00:01:54,080 --> 00:01:56,280
Using float to design layouts

00:01:56,280 --> 00:01:58,340
isn’t an easy task.

00:01:58,360 --> 00:02:03,060
Using float will result in long, uneven columns

00:02:03,220 --> 00:02:07,140
and then you have to align the elements in the rows

00:02:07,140 --> 00:02:09,140
which is pretty annoying

00:02:09,140 --> 00:02:11,140
From time to time you have to clear floats

00:02:11,140 --> 00:02:12,360
but however you clear it, 

00:02:12,360 --> 00:02:14,360
sometimes you just won’t know what you’re exactly clearing, right?

00:02:14,380 --> 00:02:16,560
Because of the level of difficulty,

00:02:16,560 --> 00:02:20,160
people started creating CSS frameworks

00:02:20,920 --> 00:02:24,320
And you don’t really need to manually write for CSS,

00:02:24,400 --> 00:02:25,000
like that,

00:02:25,000 --> 00:02:27,000
we just have to set the CSS class

00:02:27,000 --> 00:02:29,420
on attributes, that’s all.

00:02:30,740 --> 00:02:33,500
Responsive design

00:02:33,580 --> 00:02:34,780
will help you solve that

00:02:34,780 --> 00:02:36,980
therefore this method was very popular

00:02:36,980 --> 00:02:39,620
and attracted us to web designing

00:02:39,620 --> 00:02:41,420
more or less the same.

00:02:42,520 --> 00:02:46,000
With each having their own strengths

00:02:46,000 --> 00:02:48,660
I feel that it accurately describes

00:02:48,660 --> 00:02:50,940
the modern web designing phenomenon

00:02:51,660 --> 00:02:54,520
and 6,800 users agree

00:02:54,520 --> 00:02:56,580
In fact, the web page that we design looks more

00:02:56,580 --> 00:02:57,920
like the layout on the left,

00:02:57,920 --> 00:02:59,920
or the layout on the right

00:03:00,580 --> 00:03:01,960
In these 12 years,

00:03:01,960 --> 00:03:04,600
CSS has been continuously evolving

00:03:05,000 --> 00:03:07,140
and attributes for layouts have been increasing

00:03:07,140 --> 00:03:10,000
at the same time, our tools have improved for the better

00:03:10,000 --> 00:03:12,000
and have more functions.

00:03:12,880 --> 00:03:17,000
Initially, CSS introduced four basic layout modules

00:03:17,000 --> 00:03:18,800
with each having their own strengths

00:03:18,800 --> 00:03:21,740
Block layout is used on web

00:03:21,740 --> 00:03:23,740
to lay out boxes

00:03:23,740 --> 00:03:25,360
We also have

00:03:25,360 --> 00:03:28,020
Inline layout, designed for laying out text,

00:03:28,020 --> 00:03:32,360
previously we talked about table layouts

00:03:32,640 --> 00:03:36,520
and to handle tabular data,

00:03:37,040 --> 00:03:38,420
in the end, we also have

00:03:38,420 --> 00:03:40,420
positioned layout.

00:03:40,780 --> 00:03:44,680
This is a rather domineering layout style,

00:03:44,680 --> 00:03:47,000
because it won’t bother

00:03:47,000 --> 00:03:49,000
about the elements on the page at all,

00:03:49,000 --> 00:03:51,000
you decide where you want to leave it.

00:03:52,740 --> 00:03:55,720
Flexible box layouts were

00:03:55,820 --> 00:03:57,300
introduced in 2009,

00:03:57,300 --> 00:03:59,300
and it’s considered as

00:03:59,300 --> 00:04:03,720
the first CSS module written based on the nature of web

00:04:03,720 --> 00:04:09,320
optimised for user interface design and have high levels of control

00:04:10,260 --> 00:04:11,980
Fast forward to a year after,

00:04:11,980 --> 00:04:13,420
software engineers from Microsoft

00:04:13,440 --> 00:04:16,160
in order to support metro UI, developed,

00:04:16,160 --> 00:04:18,160
or suggested — grids,

00:04:18,160 --> 00:04:19,360
such a module.

00:04:19,360 --> 00:04:21,360
The earliest browser that used grids

00:04:21,360 --> 00:04:23,360
was actually IE (Internet Explorer).

00:04:23,960 --> 00:04:26,820
Grids are best suited for

00:04:26,820 --> 00:04:28,820
two-dimensional layouts.

00:04:32,100 --> 00:04:34,100
Why two-dimensional layouts?

00:04:34,780 --> 00:04:35,320
Well

00:04:36,040 --> 00:04:38,040
What’s the big deal about

00:04:38,040 --> 00:04:39,500
being able to make two-dimensional layouts, right?

00:04:39,500 --> 00:04:41,500
Well here’s the point, it has completely changed

00:04:41,500 --> 00:04:45,000
the way we think about web layout designs

00:04:45,000 --> 00:04:47,060
and has changed the habits of coding.

00:04:48,220 --> 00:04:52,740
Rachel Andrew, one of the major contributors of the grid module

00:04:52,740 --> 00:04:54,740
while she described grids this way;

00:04:54,740 --> 00:04:57,580
“Grid works from the container in,

00:04:57,580 --> 00:05:01,040
other layout methods start with the item”.

00:05:01,040 --> 00:05:04,620
We’ll use real examples to present this concept,

00:05:04,620 --> 00:05:06,180
it’ll be easier to understand.

00:05:06,180 --> 00:05:09,420
Let’s assume you’d like to lay out your content

00:05:09,420 --> 00:05:11,840
into three columns,

00:05:12,220 --> 00:05:14,220
how would you go about it?

00:05:14,220 --> 00:05:17,260
Firstly, we can try using inline block,

00:05:17,880 --> 00:05:21,040
set the inline block on the item,

00:05:21,040 --> 00:05:23,980
and then set the width to one-thirds of the container,

00:05:23,980 --> 00:05:26,740
and you’ll get a layout of three columns.

00:05:26,740 --> 00:05:29,400
If you don’t like using inline block,

00:05:29,540 --> 00:05:31,720
you can choose to use float.

00:05:32,400 --> 00:05:34,940
Codes are very similar to inline block,

00:05:35,060 --> 00:05:38,400
but the crux is, you have to set the width of the item

00:05:38,400 --> 00:05:40,400
as one-third of the container’s

00:05:41,580 --> 00:05:43,360
Friends who are more modern

00:05:43,360 --> 00:05:45,360
can also choose to use flex box.

00:05:45,360 --> 00:05:47,200
Just have to make sure that three columns are even 

00:05:47,200 --> 00:05:49,620
and you have to lock the sizing

00:05:49,620 --> 00:05:53,680
then set flex basis to one-third of the container’s 

00:05:54,360 --> 00:05:56,940
The three methods I described,

00:05:56,940 --> 00:05:59,620
there’s no grid at all

00:05:59,620 --> 00:06:02,460
we just force the cells to align with each other

00:06:03,180 --> 00:06:05,180
and so this grid

00:06:05,400 --> 00:06:07,200
this is all an illusion

00:06:08,120 --> 00:06:10,040
However, grid lines made with grids

00:06:10,040 --> 00:06:12,040
does have rows and columns

00:06:12,040 --> 00:06:15,480
The dimensions of the rows and columns are defined by the container

00:06:16,020 --> 00:06:19,280
after that, we just need to arrange the items in the grid

00:06:19,880 --> 00:06:22,940
But it’s an unprecedented feature

00:06:23,320 --> 00:06:25,240
Basically, for grid layout,

00:06:25,240 --> 00:06:26,840
there’s only two steps.

00:06:26,840 --> 00:06:30,260
First, you need to create a grid container

00:06:30,260 --> 00:06:32,260
then you put

00:06:32,260 --> 00:06:34,260
the items inside

00:06:34,420 --> 00:06:36,420
the grid.

00:06:37,460 --> 00:06:38,700
Today we talked

00:06:38,700 --> 00:06:41,140
about some terminologies related to grid

00:06:41,140 --> 00:06:43,140
Let’s talk about it

00:06:43,520 --> 00:06:44,840
gridline

00:06:44,840 --> 00:06:46,840
they are the basis of grid

00:06:46,840 --> 00:06:50,760
to make up basic horizontal and vertical lines

00:06:50,760 --> 00:06:53,680
and these grid lines

00:06:53,680 --> 00:06:54,840
have their numerical index

00:06:55,540 --> 00:06:57,540
for us to determine

00:06:57,860 --> 00:06:59,560
these numberings allow us to determine

00:06:59,580 --> 00:07:01,680
the position of every item

00:07:01,980 --> 00:07:03,280
but we need to take note that

00:07:03,280 --> 00:07:05,900
the numbering always starts from 1 and not 0

00:07:05,980 --> 00:07:08,520
and the space between grid lines

00:07:08,520 --> 00:07:11,160
are called

00:07:11,160 --> 00:07:12,440
grid track.

00:07:12,440 --> 00:07:14,860
Grid items are laid out

00:07:14,980 --> 00:07:16,560
inside these tracks.

00:07:17,000 --> 00:07:19,000
Lastly we have grid cell

00:07:19,740 --> 00:07:21,740
which is that orange part there

00:07:21,740 --> 00:07:24,120
actually, the child element in the container

00:07:24,120 --> 00:07:28,000
by default, would be the dimensions of a cell

00:07:28,000 --> 00:07:29,360
But we can take

00:07:29,360 --> 00:07:31,860
the dimensions of the element, and span it across

00:07:31,860 --> 00:07:33,300
multiple cells.

00:07:33,300 --> 00:07:35,300
And that would form a grid area.

00:07:35,300 --> 00:07:37,160
Actually I think that grid

00:07:37,160 --> 00:07:38,500
The best part

00:07:38,500 --> 00:07:41,920
the grid gap function,

00:07:42,080 --> 00:07:44,080
in the past when we wanted to set

00:07:44,080 --> 00:07:46,680
columns and rows in grids,

00:07:46,680 --> 00:07:50,900
setting gaps is an extremely annoying task

00:07:50,900 --> 00:07:52,900
and these attributes

00:07:52,900 --> 00:07:55,500
also extended to flex box.

00:07:55,700 --> 00:07:59,080
If you use Firefox v.63 and above,

00:07:59,080 --> 00:08:02,220
you can use a ‘gap’ attribute in flex box

00:08:03,940 --> 00:08:08,140
Grids were introduced in 2017

00:08:08,140 --> 00:08:09,340
and it was fairly successful

00:08:09,340 --> 00:08:10,940
because if you look at this calendar here,

00:08:10,940 --> 00:08:12,660
by the end of March,

00:08:12,660 --> 00:08:14,960
main browsers were already supporting use of grids.

00:08:14,960 --> 00:08:16,960
By the time we reached October,

00:08:16,960 --> 00:08:19,560
even Edge and Samsung internet

00:08:19,560 --> 00:08:21,860
started supporting grids.

00:08:23,400 --> 00:08:26,760
Till today, the browsers that 93% of internet users

00:08:26,760 --> 00:08:29,120
use, have already started supporting grids.

00:08:29,120 --> 00:08:31,120
In the past, people used to say,

00:08:31,120 --> 00:08:33,120
“My browser doesn’t even support it, I won’t use it”

00:08:33,120 --> 00:08:34,760
but this excuse is way outdated,

00:08:34,760 --> 00:08:35,660
you have to change it!

00:08:38,020 --> 00:08:40,020
As far as I can remember,

00:08:40,020 --> 00:08:41,040
Firefox DevTools and grids

00:08:41,040 --> 00:08:42,420
are complementary to each other.

00:08:42,420 --> 00:08:44,140
because we want to adjust

00:08:45,920 --> 00:08:47,920
If grids were to be used in layouts,

00:08:47,920 --> 00:08:50,700
you can’t do without devtools.

00:08:50,700 --> 00:08:51,820
However, other than

00:08:53,520 --> 00:08:55,380
tools to make adjustments,

00:08:55,380 --> 00:08:56,840
devtools can also allow us

00:08:56,840 --> 00:09:00,980
to understand better the tools delivering manuals of the new CSS attributes.

00:09:01,260 --> 00:09:04,120
Following this, we will look at some real examples

00:09:04,200 --> 00:09:06,200
to learn more about grid

00:09:09,940 --> 00:09:11,940
Over here, we have

00:09:12,600 --> 00:09:14,600
some examples,

00:09:14,600 --> 00:09:16,600
and the browser that I’m using is

00:09:16,600 --> 00:09:18,600
Firefox Nightly

00:09:19,240 --> 00:09:19,740
right

00:09:20,700 --> 00:09:22,700
And then if you

00:09:22,700 --> 00:09:25,700
use devtools to open it, the first thing you’ll see

00:09:25,720 --> 00:09:27,720
is this screen

00:09:27,720 --> 00:09:29,720
and if your

00:09:29,720 --> 00:09:31,720
your element uses grids

00:09:31,720 --> 00:09:33,380
to display values,

00:09:33,380 --> 00:09:36,520
you will see a grid indicator here

00:09:36,520 --> 00:09:38,520
click it,

00:09:38,520 --> 00:09:40,520
you’ll take this overlay and

00:09:41,320 --> 00:09:42,620
open it

00:09:42,620 --> 00:09:43,740
and then this overlay,

00:09:43,760 --> 00:09:46,340
we can set the colour

00:09:46,340 --> 00:09:48,620
if you don’t like purple, we can change it to another colour

00:09:48,620 --> 00:09:49,360
like that

00:09:49,360 --> 00:09:51,360
but now we’ll still use purple.

00:09:52,120 --> 00:09:54,120
You can see above this overlay

00:09:54,120 --> 00:09:56,480
this number

00:09:56,480 --> 00:09:58,480
this is very basic,

00:09:58,480 --> 00:10:01,500
three columns and two rows

00:10:01,500 --> 00:10:03,720
a grid like this

00:10:03,840 --> 00:10:06,240
In this container of mine,

00:10:06,240 --> 00:10:07,620
there are six items

00:10:07,620 --> 00:10:10,360
and the browser will help me take these six items,

00:10:10,360 --> 00:10:12,760
and line it up according to its sequence 

00:10:12,760 --> 00:10:14,280
and this is very common,

00:10:14,280 --> 00:10:16,280
nothing special.

00:10:16,420 --> 00:10:19,440
But let’s take a look at another grid attribute 

00:10:19,480 --> 00:10:22,980
If I want to set three rows and three columns,

00:10:23,020 --> 00:10:25,020
I’ll use grid template columns.

00:10:25,780 --> 00:10:27,300
put in three values

00:10:27,300 --> 00:10:29,620
and put two values in grid template rows too

00:10:29,620 --> 00:10:31,760
I quite like this terminology.

00:10:31,760 --> 00:10:34,140
because it’s very... How do i put it?

00:10:34,140 --> 00:10:35,700
visually

00:10:35,700 --> 00:10:39,120
These three values here represent three columns,

00:10:39,160 --> 00:10:41,160
and these two values represent two rows.

00:10:41,160 --> 00:10:42,200
yes

00:10:42,200 --> 00:10:44,200
Grid is special

00:10:44,200 --> 00:10:45,980
because it lets us

00:10:45,980 --> 00:10:47,980
and simply

00:10:49,920 --> 00:10:51,920
the position of the child element is set,

00:10:51,920 --> 00:10:54,760
in this Go board,

00:10:54,760 --> 00:10:58,780
purely made using CSS,

00:10:58,780 --> 00:11:01,200
and the background is actually an illusion

00:11:01,480 --> 00:11:04,480
If you take a look at its element,

00:11:04,480 --> 00:11:09,500
the background is made of pseudo-elements

00:11:09,540 --> 00:11:11,540
But its real grid

00:11:12,140 --> 00:11:15,980
is one with nine rows and nine columns.

00:11:15,980 --> 00:11:18,960
This is a beginner’s Go board,

00:11:19,940 --> 00:11:23,040
and on this Go board I have four Go pieces

00:11:23,040 --> 00:11:26,040
I set the position of the Go piece, 

00:11:26,040 --> 00:11:29,980
I will use these two attributes; grid row and grid column

00:11:29,980 --> 00:11:32,860
and it’s just like what we learnt in secondary school

00:11:33,500 --> 00:11:35,500
What do I call it

00:11:36,440 --> 00:11:38,340
Actually I can’t remember

00:11:38,340 --> 00:11:41,780
that — when we have to set values of x and y,

00:11:41,780 --> 00:11:43,080
and then you can

00:11:43,080 --> 00:11:44,240
help set its position.

00:11:44,240 --> 00:11:46,240
So,

00:11:46,240 --> 00:11:48,240
in this kind of layout,

00:11:48,240 --> 00:11:51,920
being able to see the markings is extremely useful.

00:11:51,920 --> 00:11:53,160
Because if,

00:11:53,160 --> 00:11:56,040
if this was a larger scale grid

00:11:56,040 --> 00:11:58,040
and I were to sit there to count

00:11:58,040 --> 00:12:00,540
the grid lines, it’d be a waste of my youth.

00:12:00,840 --> 00:12:04,700
I feel like Firefox DevTools is super useful with this function

00:12:04,700 --> 00:12:06,700
immediately you’ll see

00:12:06,700 --> 00:12:08,060
the

00:12:08,060 --> 00:12:10,060
what is the number

00:12:10,060 --> 00:12:12,060
that you have to set the position for

00:12:14,080 --> 00:12:16,520
The next example

00:12:16,520 --> 00:12:20,020
is quite an interesting attribute,

00:12:20,020 --> 00:12:22,020
known as grid template areas.

00:12:22,020 --> 00:12:24,280
Grid template areas

00:12:24,280 --> 00:12:28,600
let us name our grid area

00:12:28,600 --> 00:12:30,600
and naming grid areas

00:12:30,800 --> 00:12:33,700
when you’re done with the page,

00:12:33,700 --> 00:12:35,700
and if there’s a fair bit of

00:12:35,700 --> 00:12:38,160
different child elements,

00:12:38,160 --> 00:12:41,280
When you wish to have a responsive design,

00:12:41,280 --> 00:12:44,860
when you need to adjust the positions of these child elements

00:12:44,860 --> 00:12:46,860
you surely won’t wish

00:12:47,300 --> 00:12:50,700
to make adjustments on every child element

00:12:51,040 --> 00:12:53,040
Through grid template areas,

00:12:53,040 --> 00:12:55,040
you just need to

00:12:55,040 --> 00:12:59,540
make adjustment on this negative grid, this row here.

00:12:59,540 --> 00:13:00,720
How do I put it

00:13:00,780 --> 00:13:02,780
Let’s talk about the terminologies.

00:13:04,420 --> 00:13:06,120
So you see in the hidden sign,

00:13:06,120 --> 00:13:08,120
every hidden sign,

00:13:08,520 --> 00:13:11,980
represents a row

00:13:11,980 --> 00:13:14,940
and every value represents a column.

00:13:15,780 --> 00:13:20,460
This is a six by six grid,

00:13:20,840 --> 00:13:24,300
and inside we have three emojis.

00:13:24,640 --> 00:13:27,740
You have to look at the elements.

00:13:28,720 --> 00:13:30,640
So, if I want this sushi

00:13:31,880 --> 00:13:33,260
to

00:13:33,260 --> 00:13:34,560
shrink

00:13:34,620 --> 00:13:37,340
we just need to make a minor adjustment here

00:13:51,580 --> 00:13:52,540
In this case,

00:13:52,540 --> 00:13:55,320
your grid area can

00:13:59,200 --> 00:14:01,960
your grid area can be adjusted this way

00:14:01,960 --> 00:14:04,220
If your

00:14:04,220 --> 00:14:07,800
entire page has around 20, 30 child elements

00:14:07,860 --> 00:14:10,840
you don’t have to adjust them one by one

00:14:10,840 --> 00:14:13,380
You just have to, at each of the

00:14:13,520 --> 00:14:14,800
width of

00:14:14,800 --> 00:14:17,840
your negative grids,

00:14:17,840 --> 00:14:20,300
make adjustments to the grid template areas.

00:14:20,300 --> 00:14:23,220
This is a very convenient function

00:14:23,220 --> 00:14:27,200
and using Firefox devtools will allow you

00:14:27,200 --> 00:14:29,720
to see the name of your grid,

00:14:30,200 --> 00:14:33,600
and its areas.

00:14:35,820 --> 00:14:37,820
Next,

00:14:37,820 --> 00:14:39,820
a newer function,

00:14:39,820 --> 00:14:41,820
also related to grids,

00:14:43,400 --> 00:14:45,220
let’t just say.

00:14:45,220 --> 00:14:46,880
Which is to animate,

00:14:46,880 --> 00:14:48,880
you can animate your grid tracks.

00:14:49,280 --> 00:14:52,800
When I first saw this method,

00:14:53,200 --> 00:14:55,140
I thought that

00:14:55,460 --> 00:14:58,680
child elements would cross over every grid track

00:14:59,060 --> 00:15:00,140
but in true fact,

00:15:00,560 --> 00:15:03,780
it really isn’t like that.

00:15:03,780 --> 00:15:04,880
How do I put it?

00:15:04,900 --> 00:15:08,940
If we use grid inspector to check

00:15:08,940 --> 00:15:12,180
you can see at the right corner of the Go board

00:15:12,180 --> 00:15:15,480
as this Go board was made of CSS background properties

00:15:15,480 --> 00:15:17,480
and in reality,

00:15:18,080 --> 00:15:20,680
although it looks like there’s three rows and three columns

00:15:21,020 --> 00:15:22,460
but actually there’s only two rows and two columns

00:15:22,460 --> 00:15:24,460
and that unit

00:15:24,660 --> 00:15:26,660
actually takes the first

00:15:28,560 --> 00:15:30,560
child element, which is this Go piece,

00:15:30,900 --> 00:15:33,340
and put it into the first element.

00:15:33,520 --> 00:15:36,640
Yes, set it into the first unit

00:15:36,900 --> 00:15:40,300
and then take the dimension of the unit to be the official one

00:15:41,100 --> 00:15:44,920
Actually, if we didn’t have devtools for overlays

00:15:44,920 --> 00:15:47,480
to see this method to materialise

00:15:47,480 --> 00:15:49,480
it would be hard to imagine

00:15:49,480 --> 00:15:52,260
how to animate grid tracks.

00:15:52,260 --> 00:15:55,120
So, this is also one of devtools strengths

00:15:56,320 --> 00:15:58,320
Then, as we have

00:15:58,320 --> 00:16:01,100
briefly introduced the basics of grids,

00:16:01,340 --> 00:16:04,020
next,

00:16:04,460 --> 00:16:07,920
I’d like to talk about the levels of CSS specifications 

00:16:07,920 --> 00:16:09,920
I’m not sure if everyone is familiar with the levels,

00:16:10,940 --> 00:16:12,940
but long story short,

00:16:12,940 --> 00:16:17,060
CSS specifications was originally a very long-winded document

00:16:17,060 --> 00:16:19,420
until 2000

00:16:19,420 --> 00:16:22,300
the working group decided to change

00:16:22,640 --> 00:16:24,640
change, or split the entire specifications into modules.

00:16:25,260 --> 00:16:29,560
so that these edits would be easier to test,

00:16:29,560 --> 00:16:32,460
to determine which modules would be specified and maintained.

00:16:32,460 --> 00:16:36,440
The specifications, upon splitting, was then known as CSS 3

00:16:36,920 --> 00:16:41,260
however, there are no concepts of CSS 4 or CSS 5

00:16:41,260 --> 00:16:43,260
because every CSS function there is

00:16:43,260 --> 00:16:45,260
has their own specifications

00:16:45,260 --> 00:16:47,640
At the point where there’s any complications at details

00:16:47,640 --> 00:16:50,040
or requiring detailed discussion,

00:16:50,040 --> 00:16:54,560
the working group will repulse the module to a lower level

00:16:54,560 --> 00:16:59,740
For example, writing mode now uses CSS plain text attributes

00:16:59,740 --> 00:17:01,740
has reached 4

00:17:01,740 --> 00:17:03,140
already has 4 levels

00:17:03,140 --> 00:17:06,440
and that different specifications has different levels

00:17:06,820 --> 00:17:08,820
And subgrids,

00:17:08,820 --> 00:17:12,540
from the beginning, has already been viewed as a very important function

00:17:12,540 --> 00:17:16,680
however, in reality, the details were pretty complicated

00:17:16,680 --> 00:17:20,260
so the working group moved and differed it to level 2

00:17:20,260 --> 00:17:21,520
and only,

00:17:21,520 --> 00:17:23,880
only at Firefox v.70,

00:17:24,040 --> 00:17:26,300
which means up to version 70,

00:17:26,300 --> 00:17:27,740
started to support subgrids.

00:17:27,740 --> 00:17:31,400
The level 2 grade module specification contains

00:17:31,500 --> 00:17:34,540
subgrids. We’re going to talk about subgrids

00:17:34,540 --> 00:17:36,720
also

00:17:36,720 --> 00:17:41,140
the ratio of length and width of grid gaps,

00:17:41,140 --> 00:17:42,920
we won’t talk about it, yeah

00:17:42,920 --> 00:17:44,600
We’ll just talk about subgrids today

00:17:45,240 --> 00:17:46,980
and for subgrids, there are a lot of

00:17:46,980 --> 00:17:48,420
actual, real life usages.

00:17:48,420 --> 00:17:54,700
Let’s say, if you’d like to create cards in your layout, like this

00:17:54,700 --> 00:17:55,200
right

00:17:55,940 --> 00:17:57,940
and the content in the cards,

00:17:58,160 --> 00:18:00,160
its doesn’t have equal length

00:18:00,500 --> 00:18:03,920
Then the media and corners in the card

00:18:03,920 --> 00:18:05,920
it’s hard to align them.

00:18:06,480 --> 00:18:08,480
Before there were subgrids,

00:18:08,680 --> 00:18:10,680
its height is not even

00:18:10,940 --> 00:18:12,940
But after having subgrid,

00:18:12,940 --> 00:18:15,560
nested grid will use

00:18:15,560 --> 00:18:19,360
the tracks in negative grid elements to define

00:18:19,360 --> 00:18:20,900
its arrangement

00:18:21,240 --> 00:18:22,260
among them,

00:18:22,260 --> 00:18:26,900
so now, we can easily make

00:18:26,900 --> 00:18:29,040
media and corners align.

00:18:30,880 --> 00:18:33,980
Then the contents of this card will follow

00:18:34,640 --> 00:18:37,140
the tracks of negative grids to align.

00:18:37,140 --> 00:18:41,140
The same, if you are designing

00:18:41,280 --> 00:18:43,280
a grid table,

00:18:43,280 --> 00:18:46,880
then the grid table will have inputs and labels.

00:18:46,880 --> 00:18:49,820
If you want to use this inline layout,

00:18:49,820 --> 00:18:54,360
its labels need to be aligned across lines.

00:18:54,360 --> 00:18:57,020
It’s quite a challenging layout,

00:18:57,020 --> 00:19:01,580
but with subgrid, it is easier to solve this problem.

00:19:03,500 --> 00:19:05,940
Subgrid basically

00:19:06,080 --> 00:19:09,600
will align itself with the nested grid lines,

00:19:09,600 --> 00:19:11,600
tracks of negative grid lines.

00:19:11,600 --> 00:19:13,440
That’s the terminology,

00:19:13,440 --> 00:19:14,940
it may seem complicated

00:19:15,900 --> 00:19:17,900
but we will use

00:19:17,900 --> 00:19:20,060
some real life examples to explain

00:19:20,480 --> 00:19:22,540
its usage.

00:19:25,380 --> 00:19:26,860
This is the same as before,

00:19:26,860 --> 00:19:28,860
also a real life example.

00:19:28,860 --> 00:19:30,860
We can use devtools

00:19:30,860 --> 00:19:32,420
to check it,

00:19:32,420 --> 00:19:35,560
as you can see, when I’m using subgrid, the inspector indicates

00:19:35,780 --> 00:19:38,280
this tag for subgrid.

00:19:41,060 --> 00:19:43,160
The best part about Firefox DevTools

00:19:43,680 --> 00:19:45,680
is that it allows you to

00:19:45,680 --> 00:19:47,680
display multiple items (overlays)

00:19:47,980 --> 00:19:49,980
at the same time,

00:19:50,900 --> 00:19:53,440
to display different overlays.

00:19:53,440 --> 00:19:55,820
So now the colors of the two overlays are just as ugly

00:19:55,820 --> 00:19:57,460
so let’s change that to

00:19:57,460 --> 00:19:59,940
one orange, one purple easier to see

00:19:59,940 --> 00:20:01,940
as you can see

00:20:02,440 --> 00:20:04,100
let’s first see,

00:20:04,920 --> 00:20:07,980
actually, these two examples are related

00:20:08,480 --> 00:20:12,100
so if you see its attribute value,

00:20:12,680 --> 00:20:13,900
subgrid

00:20:13,900 --> 00:20:15,900
this attribute value,

00:20:15,900 --> 00:20:18,120
used on a grid template column,

00:20:18,120 --> 00:20:21,140
because it is a property value that affects size

00:20:22,340 --> 00:20:24,000
If you want to use subgrid,

00:20:24,000 --> 00:20:25,560
remember that

00:20:25,560 --> 00:20:27,560
the display attribute values are always grid

00:20:28,240 --> 00:20:32,720
subgrid values will only be used in template columns or template rows

00:20:32,720 --> 00:20:34,180
I’d like to emphasise,

00:20:34,180 --> 00:20:36,340
it is used to control size

00:20:36,840 --> 00:20:38,840
Then if you are in the unit,

00:20:39,220 --> 00:20:41,220
It ’s just like this example,

00:20:41,220 --> 00:20:43,220
I set the subgrid on the column

00:20:43,220 --> 00:20:45,220
you can see that

00:20:45,780 --> 00:20:48,060
value grid, let’s call it that

00:20:48,060 --> 00:20:50,440
the value grid will follow it

00:20:50,440 --> 00:20:54,620
size of rows of negative grid

00:20:54,620 --> 00:20:57,500
but for the size it gives, you can set it by yourself.

00:20:57,500 --> 00:20:59,500
and not follow the

00:20:59,500 --> 00:21:01,500
negative grid’s column.

00:21:01,500 --> 00:21:03,500
And if,

00:21:04,060 --> 00:21:07,400
I take this subgrid and put it on rows,

00:21:11,820 --> 00:21:13,520
right above rows,

00:21:13,520 --> 00:21:16,520
it will then follow its negative grid’s.

00:21:17,780 --> 00:21:20,340
here, the dimension of rows

00:21:20,340 --> 00:21:22,860
won’t follow the default dimensions

00:21:22,860 --> 00:21:24,860
Subgrid can also be used

00:21:25,120 --> 00:21:27,120
individually,

00:21:27,760 --> 00:21:30,460
or two-dimensional

00:21:31,800 --> 00:21:33,800
Then,

00:21:34,100 --> 00:21:38,220
the gap between grid and subgrid

00:21:38,700 --> 00:21:41,260
is a little special

00:21:41,960 --> 00:21:43,960
more special

00:21:46,740 --> 00:21:49,420
If we line it up, you will see that

00:21:49,860 --> 00:21:53,620
The subgrid will continue to the gap of the negative grid

00:21:54,000 --> 00:21:56,380
but we can

00:21:56,680 --> 00:21:58,060
Cover it up

00:21:58,060 --> 00:21:58,960
how do I put it...

00:21:58,960 --> 00:22:00,960
So you see,

00:22:00,960 --> 00:22:04,420
The distance between negative grid is 1m,

00:22:05,240 --> 00:22:09,400
but I can set 2m gap value on the subgrid.

00:22:09,400 --> 00:22:11,060
Take a look,

00:22:11,060 --> 00:22:13,760
this dark green child element,

00:22:14,800 --> 00:22:17,420
and the lighter green is considered the grandchild element.

00:22:17,420 --> 00:22:21,140
The size of the grandchild element is smaller than that of the child element.

00:22:21,140 --> 00:22:26,020
because the size of this gap affects the width of this grandchild element

00:22:26,420 --> 00:22:28,420
When

00:22:28,420 --> 00:22:33,700
Although the grandchild element is aligned with the outermost grid

00:22:33,700 --> 00:22:36,460
but its size is still a bit off

00:22:36,460 --> 00:22:41,120
because it’s affected by the width of the gap.

00:22:42,040 --> 00:22:47,240
When your web layout has margin, padding or border,

00:22:47,240 --> 00:22:49,240
you need to take note of

00:22:49,760 --> 00:22:53,180
the elements at the border.

00:22:53,180 --> 00:22:55,180
the measurements of the border elements

00:22:55,180 --> 00:22:56,360
will be affected

00:22:56,360 --> 00:22:58,360
I will close this first

00:23:03,520 --> 00:23:06,680
Therefore subgrid is

00:23:06,960 --> 00:23:08,700
nested deeper,

00:23:08,700 --> 00:23:10,260
by three layers

00:23:10,260 --> 00:23:13,200
and so I have grid, subgrid and another layer inside

00:23:13,500 --> 00:23:18,200
So you can’t see it when I cover this up

00:23:18,200 --> 00:23:21,280
this number 2 at the border

00:23:21,280 --> 00:23:22,900
its dimensions areivery small

00:23:22,900 --> 00:23:24,460
because

00:23:24,460 --> 00:23:28,860
Its negative grid and its

00:23:28,860 --> 00:23:31,760
margin of the negative grid on the outer layer

00:23:31,760 --> 00:23:34,500
both padding and border have been accumulated,

00:23:34,500 --> 00:23:36,500
So even if

00:23:37,260 --> 00:23:39,760
its tracks are matched,

00:23:39,760 --> 00:23:41,980
its dimensions are still extremely small.

00:23:41,980 --> 00:23:43,180
However, take note that

00:23:43,180 --> 00:23:45,980
the third child element doesn’t have a problem at all

00:23:46,100 --> 00:23:48,100
as this problem will appear at the borders,

00:23:48,100 --> 00:23:52,640
only borders will face such a problem.

00:23:52,640 --> 00:23:56,180
so when you have a grid with many layers,

00:23:56,180 --> 00:23:58,180
this is something to take note of.

00:23:59,620 --> 00:24:02,960
And the last feature of subgrid,

00:24:03,580 --> 00:24:05,580
which is,

00:24:05,580 --> 00:24:09,260
its measurements

00:24:09,880 --> 00:24:14,600
must follow the negative grid’s measurements.

00:24:14,600 --> 00:24:15,600
How do I put it?

00:24:15,600 --> 00:24:17,600
If a subgrid,

00:24:17,600 --> 00:24:19,600
as I open it,

00:24:20,120 --> 00:24:22,120
and if this subgrid is

00:24:22,420 --> 00:24:27,520
its measurements are two rows and two columns

00:24:28,180 --> 00:24:28,680
right

00:24:31,640 --> 00:24:35,220
so its measurement here, two rows and two columns.

00:24:35,700 --> 00:24:37,700
So

00:24:38,020 --> 00:24:40,020
the child elements in it

00:24:41,220 --> 00:24:43,740
its dimensions cannot exceed two columns

00:24:43,740 --> 00:24:46,260
So here I set it to three columns,

00:24:46,260 --> 00:24:48,260
the browser will automatically give it

00:24:51,300 --> 00:24:56,760
give it at most, two columns’ width.

00:24:57,020 --> 00:24:59,020
So if you change it to three or four,

00:24:59,460 --> 00:25:01,460
or even more than five,

00:25:03,940 --> 00:25:05,940
and if

00:25:06,200 --> 00:25:08,200
your subgrid

00:25:09,940 --> 00:25:11,940
is your grid’s...

00:25:19,780 --> 00:25:22,520
Oh well, we’ll see it in this next example,

00:25:22,520 --> 00:25:27,280
and the dimension of subgrid is three columns and two rows

00:25:28,200 --> 00:25:30,200
then it

00:25:30,200 --> 00:25:32,200
can just right

00:25:32,200 --> 00:25:34,200
to hold six child elements

00:25:34,720 --> 00:25:37,700
if I want to change the dimension of subgrid

00:25:37,700 --> 00:25:39,700
I changed it to two rows and two columns

00:25:43,880 --> 00:25:45,880
but what about the extra elements?

00:25:45,880 --> 00:25:47,880
It will be stacked on the last track

00:25:48,160 --> 00:25:53,020
so C, E, and F all overlap

00:25:53,020 --> 00:25:54,560
in the same cell.

00:25:54,840 --> 00:25:56,840
So this is something you have to take note

00:25:56,840 --> 00:25:59,000
 if you want to use subgrid

00:26:00,340 --> 00:26:03,700
So let’s talk about actually using it

00:26:05,180 --> 00:26:06,620
we already talked about

00:26:06,620 --> 00:26:09,720
if the grid labels are to be aligned

00:26:09,720 --> 00:26:11,720
can be done with subgrid

00:26:15,680 --> 00:26:17,680
first cover this

00:26:19,440 --> 00:26:20,780
a grid,

00:26:20,780 --> 00:26:22,980
the inputs and labels in the grid

00:26:22,980 --> 00:26:24,980
will be placed in the table.

00:26:24,980 --> 00:26:28,540
So they are considered grandchild elements,

00:26:28,980 --> 00:26:31,660
so you first put the whole

00:26:31,660 --> 00:26:35,660
grid’s

00:26:35,660 --> 00:26:36,780
grid’s

00:26:36,780 --> 00:26:38,780
what do you call it...

00:26:41,720 --> 00:26:42,640
grid’s

00:26:42,640 --> 00:26:45,580
to make a list

00:26:46,680 --> 00:26:48,680
and then put tags and input in the list.

00:26:48,680 --> 00:26:51,140
You can put labels

00:26:51,720 --> 00:26:52,220
use subgrid to align them

00:26:54,140 --> 00:26:56,840
yes

00:26:56,840 --> 00:26:58,840
Another usage is

00:27:01,180 --> 00:27:05,560
is

00:27:06,120 --> 00:27:07,300
you want to have something like a sidebar

00:27:12,620 --> 00:27:15,780
a layout like that,

00:27:15,780 --> 00:27:17,780
if you want the dimension of your sidebar

00:27:19,300 --> 00:27:21,300
is from your grid.

00:27:21,760 --> 00:27:23,760
top to bottom,

00:27:32,660 --> 00:27:33,880
you can

00:27:34,460 --> 00:27:37,980
you can use subgrid

00:27:37,980 --> 00:27:39,980
to form a grid with sub-elements

00:27:40,320 --> 00:27:41,780
and it

00:27:41,780 --> 00:27:44,580
this grid

00:27:44,780 --> 00:27:46,780
it’s just a single row.

00:27:46,900 --> 00:27:48,380
So

00:27:48,380 --> 00:27:50,560
no matter

00:27:50,600 --> 00:27:53,920
how many elements you add here,

00:27:54,480 --> 00:27:55,760
Your sidebar will always start from

00:27:55,760 --> 00:27:59,380
the...

00:28:00,100 --> 00:28:02,100
Its height will always be your entire grid

00:28:02,100 --> 00:28:04,160
the height of your grid

00:28:04,280 --> 00:28:06,380
then the last one is

00:28:06,580 --> 00:28:08,920
if you have cards in your layout

00:28:09,760 --> 00:28:11,760
and you take the contents inside the card

00:28:11,760 --> 00:28:13,760
and jump

00:28:14,040 --> 00:28:16,040
jump over sub-elements to even out,

00:28:16,040 --> 00:28:18,040
can be done by subgrids

00:28:19,780 --> 00:28:21,800
in other words if you look at its line,

00:28:22,140 --> 00:28:24,280
On this page,

00:28:24,280 --> 00:28:27,960
Twitter and GitHub

00:28:28,140 --> 00:28:30,600
these three elements

00:28:30,600 --> 00:28:33,000
can be evenly placed

00:28:33,420 --> 00:28:36,740
and this is made possible with subgrids

00:28:38,680 --> 00:28:43,520
Subgrids are very useful,

00:28:44,340 --> 00:28:46,780
however, browser support for subgrids

00:28:47,080 --> 00:28:47,780
still isn’t good enough,

00:28:47,780 --> 00:28:49,100
there’s only

00:28:49,680 --> 00:28:51,560
0.02% of browsers supporting them

00:28:51,560 --> 00:28:53,560
And that’s why we need

00:28:53,560 --> 00:28:55,080
to try

00:28:55,080 --> 00:28:56,380
to try using it

00:28:56,660 --> 00:29:00,960
and discuss more about it

00:29:00,960 --> 00:29:02,960
This way, we can get the attention of browsers and providers

00:29:02,960 --> 00:29:04,960
to make subgrids

00:29:06,900 --> 00:29:10,060
their priority.

00:29:10,060 --> 00:29:11,960
All the slides that we have seen today

00:29:12,120 --> 00:29:16,000
will be shared with everyone,

00:29:16,000 --> 00:29:18,000
if there’s anyone who’s interested in getting acquainted with grids and subgrids,

00:29:18,000 --> 00:29:21,180
check out these links!

00:29:21,180 --> 00:29:23,440
I hope that you all will download Firefox,

00:29:23,440 --> 00:29:26,660
especially Nightly,

00:29:26,660 --> 00:29:28,660
to try out the coolest new functions.

00:29:28,660 --> 00:29:30,440
In addition, Firefox Nightly

00:29:30,440 --> 00:29:35,220
used to only have an English version

00:29:35,220 --> 00:29:37,500
but now it has started to support multiple other languages

00:29:37,500 --> 00:29:41,180
So let’s say you want to use Nightly,

00:29:41,180 --> 00:29:42,260
for instance, the Traditional Chinese version,

00:29:42,260 --> 00:29:44,260
there’s that too.

00:29:46,120 --> 00:29:48,120
And that was only recently released,

00:29:48,120 --> 00:29:50,120
guess it’s a new feature

00:29:50,120 --> 00:29:52,120
I really

00:29:52,120 --> 00:29:54,120
strongly urge everyone here to download

00:29:54,900 --> 00:29:58,280
and give Firefox Nightly a try.

00:29:58,900 --> 00:30:00,160
Well, I guess that’s it,

00:30:00,160 --> 00:30:01,100
my talk ends here.

00:30:02,920 --> 00:30:07,280

YouTube URL: https://www.youtube.com/watch?v=fgbVhh6a1pY


