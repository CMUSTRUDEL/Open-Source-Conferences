Title: Percentage Rollout Single Page Web Apps - Sri Subramanian - Mozilla Developer Roadshow - Singapore
Publication date: 2019-12-21
Playlist: Mozilla Developer Roadshow 2019 - Asia
Description: 
	A presentation by Singapore-based Grab engineer Sriraghavan Subramanian describes optimization of single page apps using techniques from the backend.
Captions: 
	00:00:04,600 --> 00:00:05,300
Hi! everyone.

00:00:06,200 --> 00:00:07,300
My name is Sri.

00:00:07,300 --> 00:00:12,000
So, I'm an employee at Grab as you can see by the badge.

00:00:12,400 --> 00:00:15,800
So, I have been with Grab for nearly two and a half years now

00:00:15,800 --> 00:00:22,480
and most of what I used to do was build web stuff at Grab.

00:00:22,480 --> 00:00:22,780
Right.

00:00:23,980 --> 00:00:27,880
So, this talk is primarily going to be about

00:00:28,700 --> 00:00:33,880
how we do stage rollout or percentage rollout for SPAs at Grab.

00:00:35,580 --> 00:00:35,880
Cool.

00:00:36,000 --> 00:00:38,920
So, if any of you have shipped any code at all

00:00:38,920 --> 00:00:42,680
I think this is something that you're quite familiar with.

00:00:43,700 --> 00:00:50,040
So, deployment without catastrophic failure is almost impossible.

00:00:50,040 --> 00:00:50,340
Right?

00:00:50,340 --> 00:00:53,480
So, whenever there's new code that goes

00:00:54,480 --> 00:00:55,580
stuff does go wrong

00:00:57,580 --> 00:00:59,580
and what's worse than stuff going wrong

00:01:00,780 --> 00:01:05,240
is stuff goes wrong and it affects everyone that's using your product.

00:01:05,240 --> 00:01:06,000
Right?

00:01:08,150 --> 00:01:11,400
So, what's wrong with affecting everyone?

00:01:13,350 --> 00:01:19,050
You have this amazingly architect backend which runs on cues,

00:01:19,050 --> 00:01:22,680
you have SQL vs NoSQL debates that you have had for years.

00:01:22,880 --> 00:01:24,000
You have your Redis,

00:01:24,000 --> 00:01:27,200
you have your machine learning models, etc., etc.,

00:01:27,500 --> 00:01:30,200
and then you have your JavaScript fail

00:01:30,200 --> 00:01:31,800
and this button doesn't click

00:01:31,800 --> 00:01:34,480
and then everything that's in the backend doesn't matter anymore.

00:01:35,000 --> 00:01:35,480
Right?

00:01:35,480 --> 00:01:38,480
So, if your UI is broken

00:01:38,480 --> 00:01:42,760
then the user is not going to care about what your product is.

00:01:45,560 --> 00:01:47,560
So, how do we solve this?

00:01:48,000 --> 00:01:48,360
Right?

00:01:48,360 --> 00:01:56,360
So, the solution for this has existed for decades in the backend community

00:01:56,760 --> 00:02:00,800
but it's not so commonly used in frontend.

00:02:01,400 --> 00:02:06,200
So, when we tried to bring this to the frontend

00:02:06,200 --> 00:02:08,880
or statically hosted web apps

00:02:09,150 --> 00:02:11,760
the problem statement becomes something like

00:02:12,000 --> 00:02:15,640
you want to be able to deploy two or more bundles

00:02:15,840 --> 00:02:17,940
or statically hosted assets

00:02:18,900 --> 00:02:20,760
and you want to specify a percentage

00:02:20,760 --> 00:02:23,800
which kind of affects or controls

00:02:23,800 --> 00:02:28,000
what distribution of each asset goes to the end users.

00:02:28,000 --> 00:02:28,500
Right?

00:02:29,200 --> 00:02:31,100
And of course, you have a feedback loop,

00:02:31,100 --> 00:02:34,200
so you have monitoring and alerting.

00:02:34,200 --> 00:02:35,400
So, if something goes wrong,

00:02:35,650 --> 00:02:37,450
you know right at the beginning

00:02:37,450 --> 00:02:41,000
and you can control your blast radius.

00:02:43,500 --> 00:02:44,000
Cool.

00:02:44,000 --> 00:02:46,960
So, let's start with what we know.

00:02:47,050 --> 00:02:49,760
So, how do we do this for backend and why is it so easy?

00:02:50,300 --> 00:02:53,680
So, typically backend or services,

00:02:53,680 --> 00:02:55,680
microservices run on multiple instances

00:02:55,880 --> 00:02:57,680
which have the same code.

00:02:58,200 --> 00:02:59,880
So, when you want to deploy new code

00:02:59,880 --> 00:03:03,080
you pick one or a percentage of your fleet

00:03:03,200 --> 00:03:04,680
and you push a new code to that

00:03:05,450 --> 00:03:06,380
and if it works fine

00:03:06,380 --> 00:03:08,180
you gradually increase the percentage

00:03:08,580 --> 00:03:12,440
based on the feedback that you get from your metrics and alerting.

00:03:13,640 --> 00:03:14,140
Cool.

00:03:14,340 --> 00:03:15,440
So, that works.

00:03:15,640 --> 00:03:17,640
Why can't we do this for web apps?

00:03:19,340 --> 00:03:22,240
So, the thing about web apps is that

00:03:22,440 --> 00:03:25,000
you have this tree-like dependency structure

00:03:25,000 --> 00:03:27,000
that happens when you load a website.

00:03:27,400 --> 00:03:30,150
So, typically the first request to your website

00:03:30,150 --> 00:03:33,000
would load maybe your HTML,

00:03:33,200 --> 00:03:35,000
let's say your index.html

00:03:35,150 --> 00:03:37,920
and then that triggers off multiple requests,

00:03:38,200 --> 00:03:39,100
so it would,

00:03:39,700 --> 00:03:41,300
you know, you load JavaScript,

00:03:41,300 --> 00:03:43,100
you load CSS, you load images,

00:03:43,400 --> 00:03:44,100
other assets

00:03:44,100 --> 00:03:48,000
and then now with, you know, your dynamic requires

00:03:48,000 --> 00:03:51,000
your JavaScript can further load more content.

00:03:51,900 --> 00:03:53,900
So, what's the problem with that?

00:03:54,500 --> 00:03:59,000
So, with how web apps are bundled

00:03:59,000 --> 00:04:03,750
typically to make use of long term caching

00:04:03,750 --> 00:04:05,950
you have these hash prefixes, right?

00:04:06,350 --> 00:04:08,900
So, you have certain assets which are cache,

00:04:08,900 --> 00:04:10,550
certain assets which you don't want cache,

00:04:10,550 --> 00:04:14,240
so stuff like your index.html you don't want cache,

00:04:14,540 --> 00:04:17,000
but things like JavaScript,

00:04:17,000 --> 00:04:19,200
you may want to cache for a while

00:04:19,200 --> 00:04:20,800
as long as the content doesn't change.

00:04:21,200 --> 00:04:24,680
So, let's say you have two bundles, right?

00:04:25,600 --> 00:04:27,840
Both of them have index.html

00:04:27,840 --> 00:04:33,300
but then your main bundle requires, let's say, app.1a.js

00:04:33,300 --> 00:04:36,640
but your experiment bundle requires app.2b.js, right?

00:04:37,100 --> 00:04:43,000
So, if your index.html was loaded from the main bundle

00:04:43,250 --> 00:04:45,000
then all subsequent requests

00:04:45,000 --> 00:04:47,900
have to go to the same bundle or the same place

00:04:47,900 --> 00:04:49,900
that this bundle is hosted.

00:04:50,500 --> 00:04:50,900
Right?

00:04:50,900 --> 00:04:56,200
So, this requires a certain level of stickiness of all subsequent requests.

00:04:56,850 --> 00:05:00,360
Apart from that, we want to also give a good user experience,

00:05:00,500 --> 00:05:05,360
so we don't want, let's say, the user get the experiment version

00:05:05,360 --> 00:05:07,360
or the new version of your website

00:05:07,660 --> 00:05:10,000
and then he closes the browser or he refreshes the page

00:05:10,000 --> 00:05:12,500
and he gets pushed back to the old version.

00:05:12,500 --> 00:05:15,920
That's not a really good UX, right?

00:05:16,950 --> 00:05:17,920
And apart from that

00:05:18,100 --> 00:05:21,760
we want to also make use of the good stuff for the web

00:05:21,900 --> 00:05:26,840
which is not too much of a concern for backend services.

00:05:27,240 --> 00:05:32,000
Stuff like you have your browser level caching of assets,

00:05:32,000 --> 00:05:34,150
you have like service worker caching,

00:05:34,150 --> 00:05:35,450
you have CDN caching,

00:05:35,650 --> 00:05:38,360
so things like this you still want to make use of,

00:05:38,700 --> 00:05:40,860
you want your website to load quickly,

00:05:40,860 --> 00:05:44,920
you don't want requests taking forever to figure out

00:05:44,920 --> 00:05:48,600
if this user should be served the main bundle

00:05:48,600 --> 00:05:49,800
or the experiment bundle

00:05:51,200 --> 00:05:55,320
which means you need to use stuff like CDN

00:05:56,250 --> 00:06:03,850
and typically your websites themselves might be hosted on not instances

00:06:03,850 --> 00:06:08,040
but rather server less environments like S3 or object storage.

00:06:08,840 --> 00:06:13,540
So, the landscape of the hosting of websites

00:06:13,540 --> 00:06:16,250
is significantly different from backend services.

00:06:16,250 --> 00:06:19,150
So, how do we make gradual rollout

00:06:19,150 --> 00:06:21,150
or percentage rollout work in this case?

00:06:22,550 --> 00:06:23,000
Cool.

00:06:23,000 --> 00:06:25,680
So, what do we need to make this work?

00:06:25,880 --> 00:06:28,960
So, first of all we need a permanent identifier

00:06:28,960 --> 00:06:32,920
that is sent with every request that comes to the server

00:06:34,500 --> 00:06:38,000
and browsers give a very elegant way to do this using cookies. Right?

00:06:38,350 --> 00:06:40,750
So, every request that comes from the browser

00:06:41,000 --> 00:06:43,900
has cookies if they were set prior to this.

00:06:44,300 --> 00:06:46,250
So, maybe we can make use of this

00:06:46,250 --> 00:06:47,550
to somehow hint to the server

00:06:47,550 --> 00:06:52,500
whether we should return the main bundle

00:06:52,500 --> 00:06:53,600
or the experiment bundle.

00:06:54,900 --> 00:06:57,200
And if it's the first request from the user

00:06:57,200 --> 00:06:58,200
then there's no cookie.

00:06:58,400 --> 00:07:03,200
We just flip a coin and decide whether to give him the main bundle

00:07:03,200 --> 00:07:04,200
or the experiment bundle

00:07:04,200 --> 00:07:05,600
and let's set the cookie.

00:07:07,350 --> 00:07:07,600
Cool.

00:07:07,800 --> 00:07:10,440
So, let's tackle a smaller problem first.

00:07:11,400 --> 00:07:13,720
Instead of a dynamic percentage rollout

00:07:13,720 --> 00:07:18,000
let's assume that I want to solve a static problem first.

00:07:18,000 --> 00:07:21,840
Let's assume that I want to rollout factor of 40%

00:07:21,840 --> 00:07:23,540
and that will never change in the future.

00:07:23,840 --> 00:07:27,740
So, I want 40% of my users to always be on the experiment bundle

00:07:27,740 --> 00:07:30,480
and 60% of my users to be on the main bundle.

00:07:31,200 --> 00:07:32,880
So, how can we solve this?

00:07:34,680 --> 00:07:35,100
Right.

00:07:35,100 --> 00:07:37,760
So, let's assume that

00:07:37,760 --> 00:07:40,840
we have a user that's visiting our website for the very first time.

00:07:41,000 --> 00:07:42,840
So, his initial requests,

00:07:43,100 --> 00:07:47,800
let's say, it is to index.html will come without a cookie.

00:07:48,010 --> 00:07:50,400
So, the web server, web app server

00:07:50,400 --> 00:07:53,200
will flip a coin and decide

00:07:53,200 --> 00:07:56,500
whether to return to him the main bundle or the experiment bundle.

00:07:56,500 --> 00:07:59,840
So, let's assume that it's decided to return the experiment bundle.

00:08:00,300 --> 00:08:03,700
So, what it does is it returns the asset itself

00:08:03,700 --> 00:08:05,200
which is the index.html

00:08:05,600 --> 00:08:07,900
but the experiment version of it

00:08:08,150 --> 00:08:09,500
and it also sets a cookie.

00:08:09,750 --> 00:08:12,300
Let's assume, the name is just bundle

00:08:12,500 --> 00:08:14,600
and the value of the cookie is experiment.

00:08:15,600 --> 00:08:17,500
So, from that index.html

00:08:17,800 --> 00:08:21,440
all triggered subsequent requests will come with this cookie.

00:08:21,640 --> 00:08:22,000
Right?

00:08:22,350 --> 00:08:26,200
So, then the web server just looks for the cookie,

00:08:26,900 --> 00:08:28,400
so it sees the bundle is experiment

00:08:28,400 --> 00:08:34,680
and it knows which location to look for to return these assets.

00:08:36,680 --> 00:08:39,480
All subsequent requests from the user,

00:08:39,480 --> 00:08:42,480
so let's say, he closes the browser or he refreshes the browser,

00:08:43,280 --> 00:08:44,480
the cookie still persists.

00:08:44,880 --> 00:08:47,700
So, all subsequent requests will come with the same cookie,

00:08:47,700 --> 00:08:49,600
so the user does not toggle back and forth

00:08:49,600 --> 00:08:53,200
between the experiment version of your website

00:08:53,200 --> 00:08:54,500
and the main version of your website.

00:08:57,000 --> 00:08:57,700
Cool.

00:09:02,000 --> 00:09:03,300
So, a small demo here.

00:09:03,300 --> 00:09:09,480
So, this is just a basic Create React App website.

00:09:10,680 --> 00:09:14,600
So, I have set a cookie on the request,

00:09:14,600 --> 00:09:15,300
first request.

00:09:15,700 --> 00:09:18,560
So when I clear the cookie and reload

00:09:19,660 --> 00:09:23,700
I could get a different result based on what the web server did,

00:09:23,900 --> 00:09:26,500
what the result of the random number generation was

00:09:27,400 --> 00:09:29,760
and if you see the network requests,

00:09:30,400 --> 00:09:32,760
so the first request was for the main bundle

00:09:32,760 --> 00:09:35,600
and the subsequent request was for the experiment bundle.

00:09:35,900 --> 00:09:37,300
And you see the content,

00:09:37,300 --> 00:09:40,700
even though the first response is the index.html,

00:09:40,900 --> 00:09:44,040
all the subsequent assets that are loaded are totally different

00:09:44,040 --> 00:09:49,080
based on which bundle was returned for the index.html.

00:09:51,150 --> 00:09:55,560
And all subsequent requests that go,

00:09:55,560 --> 00:09:57,560
that have the experiment cookie

00:09:58,660 --> 00:10:00,640
all subsequent requests will carry this cookie

00:10:00,740 --> 00:10:05,640
and therefore the same version of the website is returned to me.

00:10:10,640 --> 00:10:10,940
Cool.

00:10:11,200 --> 00:10:15,560
So, this works very well for a static percentage factor,

00:10:15,860 --> 00:10:17,700
but that's not what we want to do,

00:10:17,700 --> 00:10:20,250
we want to ideally increase this rollout factor

00:10:20,250 --> 00:10:25,840
and try to push our experiment bundle to 100% of our end users.

00:10:26,240 --> 00:10:27,240
How do we do this, right?

00:10:27,600 --> 00:10:30,880
The problem with setting a static string

00:10:31,000 --> 00:10:35,720
like Main and Experiment onto the browser of your end user

00:10:35,720 --> 00:10:38,300
is that you lose control of that.

00:10:38,550 --> 00:10:41,000
It's not easy to change that anymore.

00:10:41,900 --> 00:10:45,440
Let's say I want to increase my percentage factor to 60%,

00:10:45,600 --> 00:10:48,680
then I need to invalidate all the previous cookies that I've set

00:10:48,980 --> 00:10:54,300
and I need to rebalance essentially the percentage of the main cookie

00:10:54,300 --> 00:10:56,000
and the experiment cookie that goes, right?

00:10:56,100 --> 00:10:59,000
So, this is not really elegant or easy to do.

00:10:59,000 --> 00:11:03,700
So, let's try to solve this in a slightly different way.

00:11:03,900 --> 00:11:06,700
So, the larger problem statement is very similar to the previous one.

00:11:06,700 --> 00:11:07,700
We still have two bundles.

00:11:07,700 --> 00:11:09,200
The main bundle and experiment bundle.

00:11:09,600 --> 00:11:13,000
And we want to serve these two clients randomly

00:11:13,000 --> 00:11:14,900
based on our percentage rate,

00:11:15,200 --> 00:11:20,160
but we want the ability to be able to increase and decrease

00:11:20,160 --> 00:11:22,160
this rollout factor dynamically

00:11:22,500 --> 00:11:24,160
and affect the percentage of users

00:11:25,260 --> 00:11:27,560
who are being served the respective bundle.

00:11:29,560 --> 00:11:29,860
Cool.

00:11:29,860 --> 00:11:31,000
So, how do we do this?

00:11:31,150 --> 00:11:35,480
So instead of setting cookie with a string

00:11:35,480 --> 00:11:37,480
which represents which bundle,

00:11:37,780 --> 00:11:41,040
we instead set a cookie with a number.

00:11:41,340 --> 00:11:44,520
So, this number ranges, let's say, from 1 to 100

00:11:45,120 --> 00:11:49,000
and it represents which bucket the user is in. Right?

00:11:49,150 --> 00:11:53,640
So, you can think of it as splitting your user base into 100 buckets

00:11:53,940 --> 00:11:56,440
and you assign a bucket to each one of your users,

00:11:57,740 --> 00:12:00,200
assign a user to one of these buckets. Right?

00:12:00,500 --> 00:12:04,400
So, the first request that comes in from the user.

00:12:04,600 --> 00:12:06,400
So, let's say, he has never visited your website before,

00:12:06,400 --> 00:12:09,120
the first request to index.html.

00:12:09,420 --> 00:12:11,520
So, what your web server does is

00:12:11,520 --> 00:12:14,100
it generates a random number between 1 to 100

00:12:14,450 --> 00:12:16,300
and assigns this number to the user

00:12:16,550 --> 00:12:18,300
which is set as a cookie.

00:12:18,500 --> 00:12:21,440
And let's assume that your current rollout factor is 5%.

00:12:21,440 --> 00:12:25,750
So, it compares this bucket number with the 5%

00:12:25,750 --> 00:12:26,900
which is the rollout factor,

00:12:26,900 --> 00:12:29,150
if it's less than the rollout factor

00:12:29,150 --> 00:12:31,150
then it will return the experiment bundle,

00:12:31,150 --> 00:12:33,500
if it's greater than the rollout factor

00:12:33,500 --> 00:12:34,800
it will return the main bundle.

00:12:35,100 --> 00:12:39,040
So, in this case the random number generator was 10

00:12:39,140 --> 00:12:40,300
which is greater than 5.

00:12:40,600 --> 00:12:42,000
So, it returns your main bundle

00:12:42,750 --> 00:12:44,000
and all subsequent requests

00:12:44,350 --> 00:12:48,200
come with exactly the same number from your client's browser

00:12:48,400 --> 00:12:51,080
which is compared to the current rollout factor

00:12:51,380 --> 00:12:56,500
and returns the assets as decided by that.

00:12:56,850 --> 00:13:00,400
Let's assume you increase your rollout factor to 20% now

00:13:00,400 --> 00:13:01,840
and this is something you do in the backend.

00:13:01,840 --> 00:13:05,920
Your client is not affected in any way.

00:13:06,200 --> 00:13:08,520
Your subsequent request from the same user

00:13:08,770 --> 00:13:12,400
still has the rollout bucket as 10

00:13:12,600 --> 00:13:16,000
but now when your web server compares this 10 against 20,

00:13:16,000 --> 00:13:17,200
10 is less than 20,

00:13:17,350 --> 00:13:21,160
so it chooses to return the experiment bundle to the user.

00:13:23,360 --> 00:13:23,760
Cool.

00:13:24,150 --> 00:13:26,500
So, let's see how this works.

00:13:30,300 --> 00:13:32,450
So – Yeah.

00:13:32,450 --> 00:13:34,450
So, this is the first time the user visits the website,

00:13:34,650 --> 00:13:37,200
he has been assigned into a bucket of 83.

00:13:38,800 --> 00:13:42,300
All subsequent requests that go get the same number

00:13:42,300 --> 00:13:45,400
but if you clear the cookie and request,

00:13:45,600 --> 00:13:48,840
a different number is given to him each time

00:13:49,000 --> 00:13:52,840
and for this demo I set the factor as 40%.

00:13:53,000 --> 00:13:56,000
So, when a number was generated that's less than 40,

00:13:56,000 --> 00:13:57,600
he gets the experiment bundle

00:13:57,800 --> 00:14:00,600
and as seen previously is the same thing.

00:14:00,600 --> 00:14:05,300
So, you have different assets that are returned,

00:14:05,300 --> 00:14:06,500
different bundles that return

00:14:07,000 --> 00:14:09,960
and every subsequent request for the same website

00:14:10,200 --> 00:14:11,460
goes with the same cookie

00:14:11,700 --> 00:14:13,900
and if you don't change your rollout factor

00:14:13,900 --> 00:14:16,200
it will return the same bundle.

00:14:22,900 --> 00:14:23,300
Cool.

00:14:24,200 --> 00:14:28,840
So, this is a bit more – Yeah.

00:14:28,840 --> 00:14:31,800
So, let's assume that you have three users over here.

00:14:32,400 --> 00:14:35,240
So, this user falls into a bucket of 11,

00:14:35,240 --> 00:14:37,800
the other user falls into a bucket of 50

00:14:37,800 --> 00:14:38,900
and the other user 100.

00:14:39,200 --> 00:14:47,200
So, I've used a Lambda@Edge with CloudFront to simulate,

00:14:49,300 --> 00:14:54,800
to configure how the CDN kind of figures out the logic

00:14:54,800 --> 00:14:57,200
of what's the rollout percentage.

00:14:57,400 --> 00:14:59,600
So, basically. I'm increasing the rollout percentage

00:14:59,600 --> 00:15:03,600
to I believe 20 or something over here.

00:15:04,450 --> 00:15:07,600
So, once that's deployed, I go back,

00:15:07,900 --> 00:15:10,480
I think I increase it to 50 if I'm not mistaken.

00:15:10,580 --> 00:15:13,280
So, this user will still get the experiment bundle.

00:15:13,600 --> 00:15:17,480
I think it takes some time for the Lambda@Edge change to reflect

00:15:17,780 --> 00:15:21,360
but typically the second user

00:15:21,360 --> 00:15:25,500
since his bucket now falls less than the rollout factor

00:15:25,500 --> 00:15:28,360
is also returned the experiment bundle

00:15:31,560 --> 00:15:37,840
but the third user whose bucket is greater than the rollout factor

00:15:38,000 --> 00:15:39,100
is not affected at all.

00:15:39,100 --> 00:15:40,500
So, he still gets the main bundle.

00:15:41,850 --> 00:15:44,760
I think finally if you do a full rollout

00:15:44,960 --> 00:15:47,920
which is essentially setting a rollout factor to 100.

00:15:51,920 --> 00:15:54,420
Oh, sorry. 

00:16:06,760 --> 00:16:08,860
So, once you've changed your backend

00:16:09,160 --> 00:16:10,960
and set the rollout factor to 100,

00:16:11,560 --> 00:16:14,500
typically refreshing the final,

00:16:14,500 --> 00:16:17,880
the third user who sits in the bucket of 100

00:16:18,200 --> 00:16:20,960
would also return the experiment bundle.

00:16:20,960 --> 00:16:22,160
It takes a few refreshes

00:16:22,160 --> 00:16:25,240
because the lambda deploy takes a bit of time.

00:16:25,540 --> 00:16:28,280
So, once you have increased the rollout factor,

00:16:29,900 --> 00:16:33,520
as long as you don't change what's the cookie value that's set in the user,

00:16:33,720 --> 00:16:40,640
he'll always get the same version of your website that's – yeah.

00:16:42,640 --> 00:16:43,040
Cool.

00:16:43,040 --> 00:16:51,240
So, yeah, so deploying this in a serverless

00:16:51,700 --> 00:16:57,300
plus CDN kind of environment was a bit challenging.

00:16:59,600 --> 00:17:05,200
So, what we used is CloudFront with a bunch of Lambda@Edge,

00:17:05,200 --> 00:17:08,650
so basically what Lambda@Edge does is

00:17:08,650 --> 00:17:10,750
it gives some intelligence to your CloudFront,

00:17:11,200 --> 00:17:14,100
so you can have small snippets of code

00:17:14,100 --> 00:17:16,600
that does things like compare the cookie value

00:17:16,600 --> 00:17:18,000
with the rollout percentage

00:17:18,200 --> 00:17:20,300
to figure out whether you want to return the main bundle

00:17:20,300 --> 00:17:21,500
or the experiment bundle.

00:17:21,750 --> 00:17:25,400
And then we decided to separate out the main bundle and experiment bundle

00:17:25,400 --> 00:17:27,000
into two different S3 buckets

00:17:27,000 --> 00:17:28,750
just for ease of deploy

00:17:28,750 --> 00:17:31,200
and you don't trip over file names and things like that.

00:17:32,000 --> 00:17:34,500
So, then we needed a separate lambda

00:17:34,500 --> 00:17:38,280
to figure out which S3 to fetch the bundle from

00:17:38,580 --> 00:17:41,840
and then we have a viewer response lambda.

00:17:42,000 --> 00:17:45,700
So, basically you can configure these lambdas

00:17:45,700 --> 00:17:48,840
at different life cycles of the request.

00:17:48,840 --> 00:17:50,240
So, yeah.

00:17:50,640 --> 00:17:54,200
So, basically, we've configured the viewer response lambda

00:17:54,200 --> 00:18:00,440
to set the cookie when the request goes back to the client or the browser.

00:18:00,440 --> 00:18:02,000
So, yeah.

00:18:02,000 --> 00:18:04,800
If any of you have any questions on how exactly this

00:18:04,800 --> 00:18:08,500
because I know that it's not very easy looking at this diagram

00:18:08,500 --> 00:18:09,800
and figure out what's going on here,

00:18:10,000 --> 00:18:15,240
so feel free to come back to me I can explain this further

00:18:15,540 --> 00:18:19,940
and I can share what is the code that actually sits in this lambdas

00:18:19,940 --> 00:18:20,940
that makes this work.

00:18:21,400 --> 00:18:21,940
Yeah.

00:18:21,940 --> 00:18:23,040
That's about it.

00:18:24,440 --> 00:18:25,040
Yeah.

00:18:25,040 --> 00:18:26,750
Thanks for listening to me.

00:18:26,750 --> 00:18:28,750
Any questions feel free to reach out.

00:18:28,750 --> 00:18:29,560
Thank you.

00:18:29,560 --> 00:18:31,560

YouTube URL: https://www.youtube.com/watch?v=wWr_mNaumUs


