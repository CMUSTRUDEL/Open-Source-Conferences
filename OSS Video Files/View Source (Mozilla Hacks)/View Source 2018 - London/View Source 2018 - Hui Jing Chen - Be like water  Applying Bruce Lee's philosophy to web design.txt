Title: View Source 2018 - Hui Jing Chen - Be like water  Applying Bruce Lee's philosophy to web design
Publication date: 2018-10-31
Playlist: View Source 2018 - London
Description: 
	The web is a medium unlike anything we've seen before. It is interactive and dynamic, and we need to embrace its nature instead of fighting it. Modern CSS allows the same code-base to result in designs that morph and adapt based on the context in which they are viewed. Since browsers are being updated and changing all the time, adaptability becomes key. To change with change is the changeless state, a mindset that is well suited to designing for the web.
Captions: 
	00:00:00,000 --> 00:00:03,510
[Applause]

00:00:03,859 --> 00:00:12,300
Beyonce okay hello everyone I mean

00:00:08,340 --> 00:00:14,309
hasn't this been an amazing conference I

00:00:12,300 --> 00:00:17,010
feel so privileged to be able to share

00:00:14,309 --> 00:00:20,279
this stage with so many amazing speakers

00:00:17,010 --> 00:00:22,830
now I've recently been in London

00:00:20,279 --> 00:00:25,590
properly for the first time about a

00:00:22,830 --> 00:00:27,449
month ago because honestly I thought I'd

00:00:25,590 --> 00:00:29,340
been to London before I mean I've gone

00:00:27,449 --> 00:00:30,420
through Heathrow so many times I could

00:00:29,340 --> 00:00:31,830
tell you is I think where the toilets

00:00:30,420 --> 00:00:34,320
were this is where you charge your stuff

00:00:31,830 --> 00:00:36,420
until somebody pointed out you know

00:00:34,320 --> 00:00:40,559
that's not exactly having been to London

00:00:36,420 --> 00:00:41,879
you know but anyway as I was introduced

00:00:40,559 --> 00:00:43,800
my name is Wei Jing I'm actually from

00:00:41,879 --> 00:00:46,010
Malaysia used to play basketball full

00:00:43,800 --> 00:00:50,190
time kick-started my work career I

00:00:46,010 --> 00:00:52,649
absolutely adore CSS and I will write

00:00:50,190 --> 00:00:54,629
blog posts about CSS amongst other

00:00:52,649 --> 00:00:56,399
things and I'm also a Mozilla tech

00:00:54,629 --> 00:00:59,399
speaker and which is an initiative by

00:00:56,399 --> 00:01:01,649
Mozilla to support technical evangelists

00:00:59,399 --> 00:01:05,489
in regional communities around the world

00:01:01,649 --> 00:01:07,409
by providing resources and funding so

00:01:05,489 --> 00:01:09,270
you hope from some of my fellow tech

00:01:07,409 --> 00:01:10,680
speakers earlier today and if you're

00:01:09,270 --> 00:01:14,939
interested applications will do inter

00:01:10,680 --> 00:01:16,890
cohort are now open so sorry I said this

00:01:14,939 --> 00:01:18,540
the reason that I visited London

00:01:16,890 --> 00:01:20,970
properly for the first time was that I

00:01:18,540 --> 00:01:24,240
got a new job now a developer advocate

00:01:20,970 --> 00:01:24,659
next MOU this word has been mentioned a

00:01:24,240 --> 00:01:26,310
bit

00:01:24,659 --> 00:01:30,090
I don't curiosity has anybody even heard

00:01:26,310 --> 00:01:31,409
of next small yes yes I've had to

00:01:30,090 --> 00:01:32,759
explain this to some of my friends back

00:01:31,409 --> 00:01:34,470
home like yeah next MOU

00:01:32,759 --> 00:01:36,060
okay so on what next mount does it's a

00:01:34,470 --> 00:01:38,280
platform makes it easier for developers

00:01:36,060 --> 00:01:40,409
to integrate communications into their

00:01:38,280 --> 00:01:42,150
applications because we provide api's

00:01:40,409 --> 00:01:43,770
for messaging voice and authentication

00:01:42,150 --> 00:01:45,270
if this is something that might be

00:01:43,770 --> 00:01:47,430
useful to you could come up and chat

00:01:45,270 --> 00:01:50,009
with me or Alex who host up the amazing

00:01:47,430 --> 00:01:53,360
lightning talk section earlier but

00:01:50,009 --> 00:01:57,240
that's too much about me now

00:01:53,360 --> 00:01:59,490
we're going to talk about Bruce Lee now

00:01:57,240 --> 00:02:01,170
I see some skeptical faces though like

00:01:59,490 --> 00:02:03,180
some of you might be thinking wait what

00:02:01,170 --> 00:02:05,850
is Bruce Lee have to do with where

00:02:03,180 --> 00:02:09,660
design may be some of you don't even

00:02:05,850 --> 00:02:12,900
know who Bruce Lee is hmm well Bruce Lee

00:02:09,660 --> 00:02:15,480
in my opinion was the most impact

00:02:12,900 --> 00:02:17,340
martial artists of this generation and

00:02:15,480 --> 00:02:19,349
his legendary fighting prowess

00:02:17,340 --> 00:02:21,420
translated really well on the silver

00:02:19,349 --> 00:02:24,209
screen he became an iconic kung-fu

00:02:21,420 --> 00:02:26,690
superstar but he was also a deeply

00:02:24,209 --> 00:02:29,370
self-reflective man who developed proof

00:02:26,690 --> 00:02:31,829
profound philosophical insights about

00:02:29,370 --> 00:02:34,680
the world around him and life itself

00:02:31,829 --> 00:02:37,319
now Bruce Lee was a student of both

00:02:34,680 --> 00:02:39,900
Western and Eastern philosophy and drew

00:02:37,319 --> 00:02:40,590
inspiration from the Taos principles by

00:02:39,900 --> 00:02:42,360
Lao Tzu

00:02:40,590 --> 00:02:44,940
recorded in the Chinese classic

00:02:42,360 --> 00:02:47,040
Thorazine which is a remarkably timeless

00:02:44,940 --> 00:02:51,989
publication given that it was authored

00:02:47,040 --> 00:02:54,150
in the fourth century BC now water is a

00:02:51,989 --> 00:02:57,980
key metaphor in Taoists philosophy and

00:02:54,150 --> 00:03:00,810
it can also be applied to the web

00:02:57,980 --> 00:03:02,940
content on the web behaves just like

00:03:00,810 --> 00:03:05,280
water now rather than trying to wrangle

00:03:02,940 --> 00:03:07,590
every pixel into place we need to

00:03:05,280 --> 00:03:10,739
embrace the fact that content is meant

00:03:07,590 --> 00:03:12,810
to flow when you phrase water into eyes

00:03:10,739 --> 00:03:16,170
it can no longer flow into containers or

00:03:12,810 --> 00:03:18,810
different shapes and sizes content that

00:03:16,170 --> 00:03:23,849
is fixed can only look good on specific

00:03:18,810 --> 00:03:28,109
devices also if I throw a bowl of ice at

00:03:23,849 --> 00:03:29,879
you it's gonna hurt now designing for

00:03:28,109 --> 00:03:31,799
the web requires an intimate knowledge

00:03:29,879 --> 00:03:32,879
of the browser that will be rendering

00:03:31,799 --> 00:03:34,680
our final output

00:03:32,879 --> 00:03:37,440
we can't just stick our hands in there

00:03:34,680 --> 00:03:39,239
and change things directly instead we

00:03:37,440 --> 00:03:41,310
have to modify the instructions that we

00:03:39,239 --> 00:03:44,370
give to the browser explaining how we

00:03:41,310 --> 00:03:46,169
would like things to be rendered if you

00:03:44,370 --> 00:03:47,730
paid attention during my coaster earlier

00:03:46,169 --> 00:03:50,069
today you'd have realized that the web

00:03:47,730 --> 00:03:54,930
has changed and evolved over the past

00:03:50,069 --> 00:03:57,449
three decades as have I now I wasn't

00:03:54,930 --> 00:04:00,269
very useful in my early days I can walk

00:03:57,449 --> 00:04:02,819
I couldn't understand most instructions

00:04:00,269 --> 00:04:05,280
I did whatever I felt like doing sort of

00:04:02,819 --> 00:04:07,980
how browsers were back in the day I

00:04:05,280 --> 00:04:11,370
think but as the years passed browser

00:04:07,980 --> 00:04:14,010
capabilities advanced and mine did too

00:04:11,370 --> 00:04:16,859
now I can now I developed the ability to

00:04:14,010 --> 00:04:19,769
run I can throw a ball can even drive a

00:04:16,859 --> 00:04:21,359
car very proud of myself I could also

00:04:19,769 --> 00:04:24,000
not understand much more complicated

00:04:21,359 --> 00:04:26,760
instructions than before and what modern

00:04:24,000 --> 00:04:28,950
CSS gives us is a wider vocab

00:04:26,760 --> 00:04:33,210
with which to communicate with the

00:04:28,950 --> 00:04:34,730
browser bootstrap it's arguably the most

00:04:33,210 --> 00:04:37,260
popular front-end framework around

00:04:34,730 --> 00:04:39,870
originally started as a framework to

00:04:37,260 --> 00:04:41,850
encourage consistency across internal

00:04:39,870 --> 00:04:43,740
tools within Twitter when its creators

00:04:41,850 --> 00:04:46,860
did released it as an open source

00:04:43,740 --> 00:04:48,660
project in 2011 it really took off it

00:04:46,860 --> 00:04:50,730
wasn't long before other frameworks

00:04:48,660 --> 00:04:52,620
started to pop up as well and what

00:04:50,730 --> 00:04:54,870
frameworks offer are a set of

00:04:52,620 --> 00:04:56,820
pre-written styles that developers can

00:04:54,870 --> 00:04:59,550
use to put our apps or sites by applying

00:04:56,820 --> 00:05:01,980
the relevant CSS classes and these

00:04:59,550 --> 00:05:04,740
frameworks provide consistent options

00:05:01,980 --> 00:05:09,480
for things like layouts UI elements

00:05:04,740 --> 00:05:11,370
interactions etc consistent but limited

00:05:09,480 --> 00:05:14,100
now frame wants themselves are not a

00:05:11,370 --> 00:05:15,990
problem it's a great concept but only if

00:05:14,100 --> 00:05:17,910
the framework is built and developed to

00:05:15,990 --> 00:05:20,670
cater to the requirements of the project

00:05:17,910 --> 00:05:22,410
in question there may be a number of use

00:05:20,670 --> 00:05:25,290
cases for adopting an off-the-shelf

00:05:22,410 --> 00:05:27,990
framework but if we choose to learn a

00:05:25,290 --> 00:05:31,350
framework and learn it well then all we

00:05:27,990 --> 00:05:34,260
get is the ability to maneuver within

00:05:31,350 --> 00:05:36,960
the bounds of the framework and in this

00:05:34,260 --> 00:05:39,480
day and age browsers are constantly

00:05:36,960 --> 00:05:44,100
being updated with new features and bug

00:05:39,480 --> 00:05:47,700
fixes the web is ever-changing at odds

00:05:44,100 --> 00:05:50,640
with the fixed patterns of frameworks so

00:05:47,700 --> 00:05:53,730
I think we need a new normal for the web

00:05:50,640 --> 00:05:55,410
a normal where people don't expect

00:05:53,730 --> 00:05:58,830
websites to look exactly the same in

00:05:55,410 --> 00:06:01,530
different browsers and devices a normal

00:05:58,830 --> 00:06:03,180
way we embrace the fluidity which Mandy

00:06:01,530 --> 00:06:05,940
already said I'm going to reiterate this

00:06:03,180 --> 00:06:07,800
throughout the talk where we embrace the

00:06:05,940 --> 00:06:09,570
fluidity of content and work with it

00:06:07,800 --> 00:06:12,990
instead of against it

00:06:09,570 --> 00:06:16,550
a normal way we seek control of our

00:06:12,990 --> 00:06:18,240
designs to the browsers that render them

00:06:16,550 --> 00:06:21,300
now people access information

00:06:18,240 --> 00:06:24,180
predominantly through browsers and boy

00:06:21,300 --> 00:06:26,160
do we have a lot of them and all these

00:06:24,180 --> 00:06:28,500
browsers are powered largely by four

00:06:26,160 --> 00:06:31,440
major layout engines we have WebKit by

00:06:28,500 --> 00:06:32,340
Apple blink by Google which is a fork of

00:06:31,440 --> 00:06:36,630
WebKit

00:06:32,340 --> 00:06:39,630
gecko by Mozilla H HTML by Microsoft and

00:06:36,630 --> 00:06:41,180
with a met relation of web standards

00:06:39,630 --> 00:06:44,120
browser behavior

00:06:41,180 --> 00:06:46,340
is less unpredictable than people I mean

00:06:44,120 --> 00:06:48,320
things aren't perfect features aren't

00:06:46,340 --> 00:06:50,960
all supported at the same time sometimes

00:06:48,320 --> 00:06:54,080
the browser specific bugs but you know

00:06:50,960 --> 00:06:55,910
what that's that's perfectly fine if we

00:06:54,080 --> 00:06:58,759
accept this as a feature of the web

00:06:55,910 --> 00:07:01,720
instead of a bug we've opened ourselves

00:06:58,759 --> 00:07:05,750
up to a lot more web design

00:07:01,720 --> 00:07:08,810
possibilities now future queries are key

00:07:05,750 --> 00:07:11,410
to making such an approach feasible what

00:07:08,810 --> 00:07:15,410
they do is provide CSS feature detection

00:07:11,410 --> 00:07:17,300
using native CSS support for feature

00:07:15,410 --> 00:07:19,759
queries is really good with coverage and

00:07:17,300 --> 00:07:22,490
over 90% of browsers even Opera Mini the

00:07:19,759 --> 00:07:24,620
only browsers that don't support it are

00:07:22,490 --> 00:07:26,630
Internet Explorer and BlackBerry mobile

00:07:24,620 --> 00:07:29,539
and that actually isn't too big of an

00:07:26,630 --> 00:07:31,720
issue I'll explain a bit later so this

00:07:29,539 --> 00:07:34,250
is how a feature query would look like

00:07:31,720 --> 00:07:35,660
because it's a conditional that checks

00:07:34,250 --> 00:07:39,139
if the browser supports a particular

00:07:35,660 --> 00:07:41,060
property or not if it doesn't the entire

00:07:39,139 --> 00:07:43,039
block within the app supports rule is

00:07:41,060 --> 00:07:45,320
ignored so this means we start off with

00:07:43,039 --> 00:07:47,990
a basic layout works everywhere it could

00:07:45,320 --> 00:07:51,260
be blocked based layout single column

00:07:47,990 --> 00:07:52,970
largely browser default your UI styles

00:07:51,260 --> 00:07:55,849
and that sort of thing and then we layer

00:07:52,970 --> 00:07:58,250
on styles based on the features that we

00:07:55,849 --> 00:07:59,840
want to use so by organizing our code in

00:07:58,250 --> 00:08:02,510
this manner in both browsers that do not

00:07:59,840 --> 00:08:05,449
support feature queries or the specified

00:08:02,510 --> 00:08:08,449
properties will still get styled obviate

00:08:05,449 --> 00:08:10,039
a bit more basic of a style right but

00:08:08,449 --> 00:08:12,199
the newer browsers they will get

00:08:10,039 --> 00:08:14,840
enhanced layouts if they support some or

00:08:12,199 --> 00:08:17,750
all of the newer features within each

00:08:14,840 --> 00:08:20,419
feature query so this is a website that

00:08:17,750 --> 00:08:22,550
utilizes such an approach we have a

00:08:20,419 --> 00:08:24,620
basic single column layout that serves

00:08:22,550 --> 00:08:26,150
as the baseline experience and for

00:08:24,620 --> 00:08:28,220
browsers that support newer features

00:08:26,150 --> 00:08:30,590
certain components will have an enhanced

00:08:28,220 --> 00:08:32,750
layout the browser in the middle has

00:08:30,590 --> 00:08:35,029
great support we're not chips while the

00:08:32,750 --> 00:08:37,760
one on the right supports both but all

00:08:35,029 --> 00:08:40,070
three layouts work off the same codebase

00:08:37,760 --> 00:08:42,110
so if any browser starts supporting a

00:08:40,070 --> 00:08:45,320
newer feature you don't have to go back

00:08:42,110 --> 00:08:48,740
and update your code your design updates

00:08:45,320 --> 00:08:51,740
itself now such an approach does require

00:08:48,740 --> 00:08:54,380
a level of familiarity with CSS it's not

00:08:51,740 --> 00:08:54,950
but it's not rocket science it boils

00:08:54,380 --> 00:08:57,320
down

00:08:54,950 --> 00:09:01,490
really to experience and the willingness

00:08:57,320 --> 00:09:02,560
to understand and embrace CSS for what

00:09:01,490 --> 00:09:05,000
it is

00:09:02,560 --> 00:09:07,310
now even though layout is a pretty big

00:09:05,000 --> 00:09:10,130
part of web design it is interesting to

00:09:07,310 --> 00:09:14,840
note that when CSS was first introduced

00:09:10,130 --> 00:09:17,510
it wasn't meant for doing late but fast

00:09:14,840 --> 00:09:20,300
forward to today we are at a point we

00:09:17,510 --> 00:09:23,570
can almost match what is possible in

00:09:20,300 --> 00:09:26,240
print however we do need to keep in mind

00:09:23,570 --> 00:09:29,150
that the web is a different medium from

00:09:26,240 --> 00:09:30,800
print exactly like Mandy said just like

00:09:29,150 --> 00:09:32,960
there are things that print can do that

00:09:30,800 --> 00:09:36,310
web can't there are numerous things that

00:09:32,960 --> 00:09:38,900
the web can do that print cannot and

00:09:36,310 --> 00:09:40,280
often with CSS there are multiple ways

00:09:38,900 --> 00:09:42,620
to achieve the same effect

00:09:40,280 --> 00:09:44,990
however the amount of effort required

00:09:42,620 --> 00:09:48,920
depends on whether we choose the right

00:09:44,990 --> 00:09:50,930
tool for the job so CSS transforms is

00:09:48,920 --> 00:09:52,880
one such tool although we tend to

00:09:50,930 --> 00:09:54,320
associate transforms with animations

00:09:52,880 --> 00:09:56,060
there's also a case to be made for

00:09:54,320 --> 00:09:59,360
static transforms especially when it

00:09:56,060 --> 00:10:01,730
comes to layout design now diagonals are

00:09:59,360 --> 00:10:03,890
very dynamic visual direction and when

00:10:01,730 --> 00:10:06,110
used in layer design create an active

00:10:03,890 --> 00:10:08,630
composition that implies movement or

00:10:06,110 --> 00:10:11,900
death in such art direction is totally

00:10:08,630 --> 00:10:13,490
possible on the web if you're familiar

00:10:11,900 --> 00:10:15,560
with image editing software like

00:10:13,490 --> 00:10:17,360
Photoshop you'll see that a lot of image

00:10:15,560 --> 00:10:20,300
manipulation technique can now be done

00:10:17,360 --> 00:10:22,400
in CSS as well so these are four basic

00:10:20,300 --> 00:10:24,530
transformations for the 2d space and

00:10:22,400 --> 00:10:28,760
that can be used for 3d transforms as

00:10:24,530 --> 00:10:31,070
well so this here was based off the

00:10:28,760 --> 00:10:33,290
header graphic on the CSS tricks article

00:10:31,070 --> 00:10:34,820
called the critical request now I

00:10:33,290 --> 00:10:36,890
thought it was beautifully designed and

00:10:34,820 --> 00:10:40,040
upon further inspection I realized it

00:10:36,890 --> 00:10:43,370
was an image but this image can totally

00:10:40,040 --> 00:10:45,680
be recreated in CSS allowing it to morph

00:10:43,370 --> 00:10:48,260
depending on the context in which it is

00:10:45,680 --> 00:10:50,420
viewed so on a narrow screen it's

00:10:48,260 --> 00:10:52,220
probably not feasible to use diagonals

00:10:50,420 --> 00:10:53,540
given the limited space but on a wider

00:10:52,220 --> 00:10:55,520
layout turns out pretty well

00:10:53,540 --> 00:10:58,040
for browsers that do not support

00:10:55,520 --> 00:11:00,050
transforms we can still present a layout

00:10:58,040 --> 00:11:03,800
that doesn't use these properties with a

00:11:00,050 --> 00:11:06,770
help of feature quotes things get a lot

00:11:03,800 --> 00:11:08,820
more interesting when we not fixated but

00:11:06,770 --> 00:11:13,110
on making things look exact

00:11:08,820 --> 00:11:14,730
the same all the time 3d transforms also

00:11:13,110 --> 00:11:17,040
make for great visual impact and the

00:11:14,730 --> 00:11:19,260
benefit of doing it with text / CSS is

00:11:17,040 --> 00:11:22,740
it priced much better accessibility than

00:11:19,260 --> 00:11:25,200
sticking the text in an image with 3d

00:11:22,740 --> 00:11:26,970
transforms we are operating on more than

00:11:25,200 --> 00:11:29,220
one axis which is the z axis for depth

00:11:26,970 --> 00:11:31,560
so there additional properties like that

00:11:29,220 --> 00:11:33,570
face visibility and perspective for

00:11:31,560 --> 00:11:35,640
example and the perspective property

00:11:33,570 --> 00:11:37,800
controls how far an element appears to

00:11:35,640 --> 00:11:40,320
recede into the horizon so the smaller

00:11:37,800 --> 00:11:42,600
the value the more dramatic the 3d

00:11:40,320 --> 00:11:45,600
effect is so if I modify the value here

00:11:42,600 --> 00:11:49,310
you'll see that it changes and it just

00:11:45,600 --> 00:11:51,209
sort of receipts much further away

00:11:49,310 --> 00:11:53,580
support for transforms is really good

00:11:51,209 --> 00:11:56,190
for 2d and 3d transforms but you don't

00:11:53,580 --> 00:11:57,959
have to use them if they don't fit your

00:11:56,190 --> 00:12:01,350
project it's just good to know that this

00:11:57,959 --> 00:12:02,130
option exists when you do need it now

00:12:01,350 --> 00:12:04,589
magazine layouts

00:12:02,130 --> 00:12:06,870
these are chock full of interesting text

00:12:04,589 --> 00:12:09,390
flow shapes and maybe we see this a bit

00:12:06,870 --> 00:12:11,010
more in fashion magazines but shaped

00:12:09,390 --> 00:12:13,680
text is not exclusive to such

00:12:11,010 --> 00:12:15,870
publications this one is from Bloomberg

00:12:13,680 --> 00:12:18,779
Businessweek we have one newspaper

00:12:15,870 --> 00:12:20,640
sometimes to do it generally the idea is

00:12:18,779 --> 00:12:22,830
to let text flow around something so

00:12:20,640 --> 00:12:24,200
it's not laid out in a rectangular shape

00:12:22,830 --> 00:12:26,670
all the time

00:12:24,200 --> 00:12:28,980
CSS module that allows us to do this is

00:12:26,670 --> 00:12:30,959
called CSS shapes now for now we can

00:12:28,980 --> 00:12:33,750
only let text flow around shapes and

00:12:30,959 --> 00:12:35,670
images with the shape outside property

00:12:33,750 --> 00:12:38,220
and when you apply this property to a

00:12:35,670 --> 00:12:40,220
floated element a text will flow on the

00:12:38,220 --> 00:12:42,600
opposite side of the shape and question

00:12:40,220 --> 00:12:44,370
now there are four basic shape functions

00:12:42,600 --> 00:12:46,290
we can use to decide and define the

00:12:44,370 --> 00:12:48,630
outline around which we want the text to

00:12:46,290 --> 00:12:50,940
flow we've got what circle we've got

00:12:48,630 --> 00:12:54,000
lips we've got inset and we've got

00:12:50,940 --> 00:12:56,550
polygons and these same functions are

00:12:54,000 --> 00:12:58,050
also used in the clip path profit

00:12:56,550 --> 00:12:59,850
property so if you can see in this

00:12:58,050 --> 00:13:03,930
polygon example both properties actually

00:12:59,850 --> 00:13:06,570
share the same value 5 rock strips

00:13:03,930 --> 00:13:08,790
support for shapes n62 and it comes with

00:13:06,570 --> 00:13:11,100
a really nifty shapes editor that allows

00:13:08,790 --> 00:13:13,260
us to see and edit shapes created by

00:13:11,100 --> 00:13:15,510
shape paths as well as basic shapes from

00:13:13,260 --> 00:13:17,700
the shape outside property so if you

00:13:15,510 --> 00:13:18,390
inspect an element that uses clip paths

00:13:17,700 --> 00:13:19,590
or shapes

00:13:18,390 --> 00:13:21,570
you should be able to

00:13:19,590 --> 00:13:23,970
see an icon next to the shape function

00:13:21,570 --> 00:13:26,430
and you can toggle the editor which you

00:13:23,970 --> 00:13:30,870
can then manipulate in the browser to

00:13:26,430 --> 00:13:33,630
see the values update now my personal

00:13:30,870 --> 00:13:36,420
favorite is shapes from images because

00:13:33,630 --> 00:13:39,690
somehow same text flow around an image

00:13:36,420 --> 00:13:41,640
makes me happy now the image has to have

00:13:39,690 --> 00:13:43,680
transparency because the Alpha channel

00:13:41,640 --> 00:13:45,810
is used to compute the shape and pixels

00:13:43,680 --> 00:13:48,540
which fall below this property called

00:13:45,810 --> 00:13:53,120
shape image threshold they are ignored

00:13:48,540 --> 00:13:53,120
so text can flow into that area instead

00:13:54,860 --> 00:14:00,390
the only browser holder at the moment is

00:13:57,750 --> 00:14:02,550
H but the property is under

00:14:00,390 --> 00:14:05,010
consideration so I encourage all of you

00:14:02,550 --> 00:14:07,230
to help out by voting for this feature I

00:14:05,010 --> 00:14:09,570
myself has already tossed in three votes

00:14:07,230 --> 00:14:13,080
for this feature so the more the merrier

00:14:09,570 --> 00:14:14,610
please thank you and another aspect of

00:14:13,080 --> 00:14:16,080
layout that we are close to matching in

00:14:14,610 --> 00:14:18,480
the digital world is the ability to

00:14:16,080 --> 00:14:20,820
typeset writing systems other than that

00:14:18,480 --> 00:14:23,070
that other than those which flow

00:14:20,820 --> 00:14:24,960
horizontally from top to bottom so like

00:14:23,070 --> 00:14:26,460
Arabic and Hebrew scripts

00:14:24,960 --> 00:14:28,320
these are read from right to left we

00:14:26,460 --> 00:14:30,480
also have East Asian scripts like

00:14:28,320 --> 00:14:33,030
Chinese and Japanese that can be written

00:14:30,480 --> 00:14:34,710
both horizontally and vertically and the

00:14:33,030 --> 00:14:37,080
writing mode property allows us to cater

00:14:34,710 --> 00:14:40,140
for vertical writing on the web by our

00:14:37,080 --> 00:14:42,180
CSS like I mentioned vertical writing is

00:14:40,140 --> 00:14:44,400
traditionally East Asian for Han

00:14:42,180 --> 00:14:46,500
characters like Chinese Japanese in

00:14:44,400 --> 00:14:48,750
Korean where the inline Direction is

00:14:46,500 --> 00:14:51,780
from top to bottom and the text is read

00:14:48,750 --> 00:14:53,100
from right to left but you don't have to

00:14:51,780 --> 00:14:54,980
miss out on the fun just because you

00:14:53,100 --> 00:14:57,060
don't design for these languages

00:14:54,980 --> 00:14:59,820
vertical text has been part of print

00:14:57,060 --> 00:15:02,070
design for the longest time and it's

00:14:59,820 --> 00:15:04,770
about time that the web got in on it as

00:15:02,070 --> 00:15:06,420
well this example demonstrates the

00:15:04,770 --> 00:15:10,140
writing mode properties different values

00:15:06,420 --> 00:15:12,150
so we have vertical R L and L R and keep

00:15:10,140 --> 00:15:14,820
in combine writing mode with other

00:15:12,150 --> 00:15:18,090
properties like transforms it is also

00:15:14,820 --> 00:15:20,010
possible to control the orientation of

00:15:18,090 --> 00:15:21,870
individual characters with the text

00:15:20,010 --> 00:15:24,750
orientation properties so like for

00:15:21,870 --> 00:15:26,880
example if I set these two up right you

00:15:24,750 --> 00:15:29,580
can see that the characters change their

00:15:26,880 --> 00:15:31,580
orientation so how can we use something

00:15:29,580 --> 00:15:33,449
like this in the context of a horizontal

00:15:31,580 --> 00:15:36,029
writing system like most

00:15:33,449 --> 00:15:38,309
of us are used to today when one ideas

00:15:36,029 --> 00:15:40,559
for headers I mean it might not be the

00:15:38,309 --> 00:15:42,569
best idea to lay out long chunks of text

00:15:40,559 --> 00:15:45,329
vertically because it just makes things

00:15:42,569 --> 00:15:47,399
hard to read but using vertical text for

00:15:45,329 --> 00:15:49,139
short titles and headers can break up

00:15:47,399 --> 00:15:51,869
the monotony especially on a long

00:15:49,139 --> 00:15:53,819
scrolling page and there are number

00:15:51,869 --> 00:15:55,679
small components which we can subtly

00:15:53,819 --> 00:15:58,079
sneak in some vertical text without

00:15:55,679 --> 00:16:00,629
affecting the users reading experience

00:15:58,079 --> 00:16:02,549
things like tags on blog posts where

00:16:00,629 --> 00:16:05,459
information is not critical to the main

00:16:02,549 --> 00:16:07,619
content stripes online publication

00:16:05,459 --> 00:16:10,709
increment chose to use vertical text on

00:16:07,619 --> 00:16:12,749
its menu links on a landscape view but

00:16:10,709 --> 00:16:14,850
once the viewport grows narrow they move

00:16:12,749 --> 00:16:17,480
back to a horizontal layout which is why

00:16:14,850 --> 00:16:20,309
we have media queries right also

00:16:17,480 --> 00:16:21,149
depending on the number of links on your

00:16:20,309 --> 00:16:23,519
navigation menu

00:16:21,149 --> 00:16:25,439
perhaps a vertical layer on narrow

00:16:23,519 --> 00:16:28,799
screen could be a design choice worth

00:16:25,439 --> 00:16:31,049
considering today's CSS really gives us

00:16:28,799 --> 00:16:33,359
a lot more creative choices as compared

00:16:31,049 --> 00:16:38,369
to when responsive design first became a

00:16:33,359 --> 00:16:41,069
thing in 2010 but a major evolution in

00:16:38,369 --> 00:16:43,829
web layout is the ability to position an

00:16:41,069 --> 00:16:46,799
align content in both the inline and

00:16:43,829 --> 00:16:49,679
block directions alignment along the

00:16:46,799 --> 00:16:51,359
inline axis was generally well supported

00:16:49,679 --> 00:16:53,069
from the start especially for languages

00:16:51,359 --> 00:16:55,679
that were read horizontally from top to

00:16:53,069 --> 00:16:57,720
bottom moving text or blocks of content

00:16:55,679 --> 00:17:00,029
horizontally wasn't you complicated you

00:16:57,720 --> 00:17:03,179
know we had text aligned we could use

00:17:00,029 --> 00:17:06,179
auto margins to move blocks Center them

00:17:03,179 --> 00:17:08,459
but vertical alignment required a lot of

00:17:06,179 --> 00:17:09,439
workarounds a lot of hacks a lot of

00:17:08,459 --> 00:17:13,579
frustration

00:17:09,439 --> 00:17:16,289
luckily CSS is not a fixed technology

00:17:13,579 --> 00:17:18,569
changes were introduced improvements

00:17:16,289 --> 00:17:20,839
were made and now we have a suite of

00:17:18,569 --> 00:17:23,699
tools for two-dimensional layout and

00:17:20,839 --> 00:17:26,939
alignment flexbox

00:17:23,699 --> 00:17:29,429
short for flexible box it was conceived

00:17:26,939 --> 00:17:31,289
as a powerful tool for distributing

00:17:29,429 --> 00:17:33,899
space and aligning content in ways that

00:17:31,289 --> 00:17:35,929
web apps and complex websites often need

00:17:33,899 --> 00:17:38,370
this is coated from the specification

00:17:35,929 --> 00:17:40,860
now when people complain that flex box

00:17:38,370 --> 00:17:43,019
doesn't make sense that their items are

00:17:40,860 --> 00:17:45,510
not sized the way they want they are

00:17:43,019 --> 00:17:46,630
fighting against the flexible nature of

00:17:45,510 --> 00:17:49,600
items in a flick

00:17:46,630 --> 00:17:51,610
formatting context because flex

00:17:49,600 --> 00:17:54,250
formatting contexts can operate in both

00:17:51,610 --> 00:17:56,290
dimensions now the auto margin technique

00:17:54,250 --> 00:17:59,350
makes centering components a lot less

00:17:56,290 --> 00:18:01,450
painful any positive free space will be

00:17:59,350 --> 00:18:04,570
distributed to Auto margins in their

00:18:01,450 --> 00:18:08,170
respective dimensions so if for example

00:18:04,570 --> 00:18:13,360
I set margin left to auto in this

00:18:08,170 --> 00:18:15,970
example boxy here gets ends up on the

00:18:13,360 --> 00:18:18,520
other end of the container or if I do

00:18:15,970 --> 00:18:20,110
something like margin top I just send it

00:18:18,520 --> 00:18:26,500
all the way to the bottom and if I don't

00:18:20,110 --> 00:18:27,580
specify a dimension boom centering and I

00:18:26,500 --> 00:18:29,950
love showing this example two people

00:18:27,580 --> 00:18:31,390
have just started out with CSS and ran

00:18:29,950 --> 00:18:37,990
into a wall when they tried to center

00:18:31,390 --> 00:18:40,120
stuff among a one line a common issue I

00:18:37,990 --> 00:18:41,830
hear is that it's difficult to create a

00:18:40,120 --> 00:18:43,390
great system with Flex box now the thing

00:18:41,830 --> 00:18:46,420
about flex box is that even though you

00:18:43,390 --> 00:18:48,700
can make a great system with it it's not

00:18:46,420 --> 00:18:51,250
really the best tool for building a

00:18:48,700 --> 00:18:54,310
great system items in a Flex formatting

00:18:51,250 --> 00:18:56,080
context are aware of each other in a

00:18:54,310 --> 00:18:58,990
single dimension either vertically or

00:18:56,080 --> 00:19:01,300
horizontally but when flex items of

00:18:58,990 --> 00:19:03,760
equal width wrap to the next line it may

00:19:01,300 --> 00:19:06,280
seem like we have rows and columns but

00:19:03,760 --> 00:19:09,760
there is no relationship between Flex

00:19:06,280 --> 00:19:12,250
items stacked on top of one another does

00:19:09,760 --> 00:19:14,620
that mean you cannot use flexbox to

00:19:12,250 --> 00:19:18,940
layout large number large numbers of

00:19:14,620 --> 00:19:22,150
items not at all so here I have a list

00:19:18,940 --> 00:19:24,820
of images and once I apply display flex

00:19:22,150 --> 00:19:27,070
to it all the items are shrunk and laid

00:19:24,820 --> 00:19:30,070
out in a single row I'm gonna turn on

00:19:27,070 --> 00:19:31,930
rep so they all revert to their original

00:19:30,070 --> 00:19:34,060
size and wrap down to the following row

00:19:31,930 --> 00:19:36,370
this insufficient space and the current

00:19:34,060 --> 00:19:37,960
flex line I'm going to turn on a border

00:19:36,370 --> 00:19:41,590
so we can see what's going on with the

00:19:37,960 --> 00:19:44,040
Flex items go so now let's instead of

00:19:41,590 --> 00:19:46,510
the initial behavior of flex items of

00:19:44,040 --> 00:19:51,220
shrink but not grow I'm gonna flip that

00:19:46,510 --> 00:19:53,860
around turn that on so let's make the

00:19:51,220 --> 00:19:57,340
images take up the width of its own

00:19:53,860 --> 00:19:59,120
container okay so we've got a starting

00:19:57,340 --> 00:20:01,640
point to play with alignment

00:19:59,120 --> 00:20:05,630
can do something like an align items

00:20:01,640 --> 00:20:08,480
center create this sort of a jagat look

00:20:05,630 --> 00:20:10,309
that maybe you know it's a bit messy you

00:20:08,480 --> 00:20:12,050
want to in bit neater we can do that we

00:20:10,309 --> 00:20:14,120
can do that by standardizing the height

00:20:12,050 --> 00:20:16,160
of the children so I'll do that but oh

00:20:14,120 --> 00:20:18,380
that kind of screws up the aspect ratio

00:20:16,160 --> 00:20:20,990
for some of the images right so we can

00:20:18,380 --> 00:20:22,790
compromise we can use object fit to crop

00:20:20,990 --> 00:20:24,430
off the tops of the taller images and

00:20:22,790 --> 00:20:28,280
you end up with something like this

00:20:24,430 --> 00:20:30,800
right I can also change the direction of

00:20:28,280 --> 00:20:32,390
the layout by setting a flex direction

00:20:30,800 --> 00:20:34,520
I'll set it to column we've got

00:20:32,390 --> 00:20:36,800
something like this give the container

00:20:34,520 --> 00:20:38,750
height and what we have now is this

00:20:36,800 --> 00:20:40,340
horizontal scrolling thing which was

00:20:38,750 --> 00:20:42,770
somehow we don't see very often on the

00:20:40,340 --> 00:20:45,500
web and again that we can play with

00:20:42,770 --> 00:20:48,440
alignment and because I've changed the

00:20:45,500 --> 00:20:51,140
Flex directions the block and inline

00:20:48,440 --> 00:20:53,870
axis have also solved so now justify

00:20:51,140 --> 00:20:57,410
content moves things along the vertical

00:20:53,870 --> 00:21:00,440
axis and a line items moves things along

00:20:57,410 --> 00:21:03,559
the horizontal axis okay so again we get

00:21:00,440 --> 00:21:05,870
this jagged thing but maybe this is too

00:21:03,559 --> 00:21:08,990
many gaps for some people's liking

00:21:05,870 --> 00:21:12,100
that's fine no Matt no problem we can

00:21:08,990 --> 00:21:15,920
just remove all this alignment code and

00:21:12,100 --> 00:21:19,730
let's make all the Flex children totally

00:21:15,920 --> 00:21:22,700
flexible and I could make the images

00:21:19,730 --> 00:21:25,040
Philip there are containers Heights here

00:21:22,700 --> 00:21:26,780
 is really useful because it allows

00:21:25,040 --> 00:21:28,670
me to account for the margins of each

00:21:26,780 --> 00:21:31,550
image with respect to their container

00:21:28,670 --> 00:21:35,809
Heights so let's standardize the width

00:21:31,550 --> 00:21:38,800
of all the items and there we get

00:21:35,809 --> 00:21:41,630
something like this remove the border

00:21:38,800 --> 00:21:44,390
so such layouts are nearly a

00:21:41,630 --> 00:21:46,550
demonstration of what flexbox can do up

00:21:44,390 --> 00:21:48,860
the box these are not hacks these are

00:21:46,550 --> 00:21:51,140
not workarounds these are native options

00:21:48,860 --> 00:21:54,770
that we have when it comes to designing

00:21:51,140 --> 00:21:56,750
layouts support for the auxilary options

00:21:54,770 --> 00:21:59,330
of calc and object fit pretty good

00:21:56,750 --> 00:22:01,550
lots of green and they only continue to

00:21:59,330 --> 00:22:03,920
get better in the near future so do feel

00:22:01,550 --> 00:22:07,429
free to experiment with them and see

00:22:03,920 --> 00:22:09,980
where they can fit in your project but

00:22:07,429 --> 00:22:12,140
back to the topic of grids when you want

00:22:09,980 --> 00:22:12,650
to build proper grids with rows and

00:22:12,140 --> 00:22:15,080
color

00:22:12,650 --> 00:22:18,320
then grid is the tool that we want to

00:22:15,080 --> 00:22:20,420
reach for grit like flexbox is also

00:22:18,320 --> 00:22:22,400
really good at dealing with free space

00:22:20,420 --> 00:22:25,490
without us having to explicitly account

00:22:22,400 --> 00:22:27,590
for that free space so grid introduced

00:22:25,490 --> 00:22:29,480
or something known as the fr unit which

00:22:27,590 --> 00:22:32,630
represents a fraction of free space in

00:22:29,480 --> 00:22:35,000
the grid container tract size using fr

00:22:32,630 --> 00:22:37,190
will adjust according to how much free

00:22:35,000 --> 00:22:40,070
space is left over and fill up available

00:22:37,190 --> 00:22:41,780
space accordingly now a common use case

00:22:40,070 --> 00:22:44,000
that fr units can solve for our

00:22:41,780 --> 00:22:46,360
responsive uniform grids that need to

00:22:44,000 --> 00:22:49,190
adjust to the width of the viewport for

00:22:46,360 --> 00:22:51,830
layout methods that revolve around the

00:22:49,190 --> 00:22:54,320
width of a great item like floats or

00:22:51,830 --> 00:22:56,150
inline block multiple media queries are

00:22:54,320 --> 00:22:58,370
often necessary because the width of

00:22:56,150 --> 00:23:01,220
each item has to be explicitly stated at

00:22:58,370 --> 00:23:03,980
each breakpoint but with the fr unit we

00:23:01,220 --> 00:23:06,350
cede control of the sizing of each grid

00:23:03,980 --> 00:23:08,840
item to the browser and we allow the

00:23:06,350 --> 00:23:10,880
browser to figure out how large each

00:23:08,840 --> 00:23:13,040
grid item should be based on the

00:23:10,880 --> 00:23:17,720
parameters we provide through some new

00:23:13,040 --> 00:23:20,630
CSS functions that CSS grid provides for

00:23:17,720 --> 00:23:22,760
example we have min max this function

00:23:20,630 --> 00:23:23,390
allows us to do something we never could

00:23:22,760 --> 00:23:26,630
before

00:23:23,390 --> 00:23:29,900
and that is to define a range of values

00:23:26,630 --> 00:23:32,120
now I now I can tell my browser that mm

00:23:29,900 --> 00:23:35,150
I want grid columns or rows to be

00:23:32,120 --> 00:23:36,710
between a value of x and y and then I

00:23:35,150 --> 00:23:39,920
let the browser figure out what that

00:23:36,710 --> 00:23:41,810
value should be also if your design

00:23:39,920 --> 00:23:44,150
calls for a rather complex and large

00:23:41,810 --> 00:23:46,280
grid you probably don't want to type out

00:23:44,150 --> 00:23:48,140
the tracks with by hand and repeat it

00:23:46,280 --> 00:23:50,840
again and again you can use the repeat

00:23:48,140 --> 00:23:52,910
function which lets us repeat patterns

00:23:50,840 --> 00:23:55,910
of track sizes so we don't end up with

00:23:52,910 --> 00:23:59,840
ridiculously long lines of column or row

00:23:55,910 --> 00:24:02,860
sizes the repeat function also takes in

00:23:59,840 --> 00:24:05,750
keywords keywords of autofit and autofit

00:24:02,860 --> 00:24:07,910
now both are very similar in that they

00:24:05,750 --> 00:24:09,800
tell the browser to generate the number

00:24:07,910 --> 00:24:12,020
of tracks required based on the

00:24:09,800 --> 00:24:14,120
tracklist specified as the second

00:24:12,020 --> 00:24:16,850
argument now the minor difference is

00:24:14,120 --> 00:24:18,890
that for auto fit any empty tracks are

00:24:16,850 --> 00:24:21,560
collapsed and this becomes more evident

00:24:18,890 --> 00:24:24,290
if you're using a flexible range for

00:24:21,560 --> 00:24:25,790
track sizing so in this example I've

00:24:24,290 --> 00:24:26,360
asked the browser to make me columns

00:24:25,790 --> 00:24:29,690
that are at

00:24:26,360 --> 00:24:32,090
least 150 pixels wide but you can grow

00:24:29,690 --> 00:24:34,490
if free space permits currently the

00:24:32,090 --> 00:24:36,320
keyword is set to autofill so the

00:24:34,490 --> 00:24:38,450
available space can actually contain

00:24:36,320 --> 00:24:40,520
around 8 columns and even though I don't

00:24:38,450 --> 00:24:42,890
have enough great items to fill up the

00:24:40,520 --> 00:24:44,870
last two columns that space is still

00:24:42,890 --> 00:24:50,050
respected and still there takes up space

00:24:44,870 --> 00:24:53,030
but if I change the value to autofit the

00:24:50,050 --> 00:24:55,580
columns that do contain great items grow

00:24:53,030 --> 00:24:58,720
and fill up the empty space because the

00:24:55,580 --> 00:25:01,910
last two columns have now been collapsed

00:24:58,720 --> 00:25:03,560
so let's put it all together in this

00:25:01,910 --> 00:25:06,500
example I'm telling the browser that

00:25:03,560 --> 00:25:09,290
when the viewport shrinks cap the shrink

00:25:06,500 --> 00:25:11,900
of each column to 10 amps if there's

00:25:09,290 --> 00:25:14,570
extra space grow all the columns equally

00:25:11,900 --> 00:25:16,910
but using auto fill or maybe auto fit

00:25:14,570 --> 00:25:19,760
the browser will calculate how many

00:25:16,910 --> 00:25:22,040
columns fulfill these requirements when

00:25:19,760 --> 00:25:24,080
the viewport size changes the number of

00:25:22,040 --> 00:25:26,510
columns will increase or decrease until

00:25:24,080 --> 00:25:29,540
everything fits and because the maximum

00:25:26,510 --> 00:25:32,480
size value is a flexible unit if there

00:25:29,540 --> 00:25:34,850
is an excess of space all the columns

00:25:32,480 --> 00:25:37,490
will grow equally to fill up that extra

00:25:34,850 --> 00:25:40,790
space so there will never be any awkward

00:25:37,490 --> 00:25:43,160
white space on either side of the layout

00:25:40,790 --> 00:25:48,920
and you don't have to write a single

00:25:43,160 --> 00:25:50,150
media query to achieve this one more

00:25:48,920 --> 00:25:52,400
thing I want to mention is the concept

00:25:50,150 --> 00:25:54,770
of an implicit grid now the explicit

00:25:52,400 --> 00:25:56,570
grid is one we define using grid columns

00:25:54,770 --> 00:25:58,310
algorithms that columns in grid template

00:25:56,570 --> 00:26:01,010
rows but there is nothing stopping us

00:25:58,310 --> 00:26:03,110
from placing an item outside the bounds

00:26:01,010 --> 00:26:06,020
of this grid that we defined so what

00:26:03,110 --> 00:26:08,780
happens then so we shall see here I

00:26:06,020 --> 00:26:10,760
define a three by two grid but there's

00:26:08,780 --> 00:26:12,860
more than six great items so the browser

00:26:10,760 --> 00:26:16,670
generates implicit rows and columns to

00:26:12,860 --> 00:26:19,640
hold these extra items the explicit grid

00:26:16,670 --> 00:26:21,650
column lines only go up to 4 because

00:26:19,640 --> 00:26:24,500
there are 3 columns so if I play

00:26:21,650 --> 00:26:26,450
something at line 6 the browser

00:26:24,500 --> 00:26:28,490
generates 3 more implicit columns so

00:26:26,450 --> 00:26:30,890
that my item can be placed accordingly

00:26:28,490 --> 00:26:32,750
so now these implicit columns will take

00:26:30,890 --> 00:26:35,390
up enough space to hold the items

00:26:32,750 --> 00:26:38,930
content but we can adjust the size of

00:26:35,390 --> 00:26:40,290
these using the grid auto properties so

00:26:38,930 --> 00:26:42,870
if I do something like this

00:26:40,290 --> 00:26:46,110
I can make implicit I can actually

00:26:42,870 --> 00:26:50,790
control the size of these implicit grid

00:26:46,110 --> 00:26:53,100
columns or rows we also have a great

00:26:50,790 --> 00:26:55,530
Auto flow property which lets us adjust

00:26:53,100 --> 00:26:57,510
the direction and density of great items

00:26:55,530 --> 00:27:00,450
because when your layout consists of

00:26:57,510 --> 00:27:02,580
items of varying sizes we end up with

00:27:00,450 --> 00:27:05,490
gaps in between them and some of these

00:27:02,580 --> 00:27:07,380
are actually rather large gaps right so

00:27:05,490 --> 00:27:10,470
what we can do in this situation is that

00:27:07,380 --> 00:27:13,320
we can add a keyword called dents which

00:27:10,470 --> 00:27:15,660
sort of packs into all these gaps any

00:27:13,320 --> 00:27:18,450
items that will fit yes this sort of

00:27:15,660 --> 00:27:21,630
messes up the order but you know you get

00:27:18,450 --> 00:27:24,120
a much neater layout and when it comes

00:27:21,630 --> 00:27:26,370
to direction you can check we can change

00:27:24,120 --> 00:27:30,540
this to not only row but column as well

00:27:26,370 --> 00:27:35,370
so this will take some adjusting values

00:27:30,540 --> 00:27:38,730
will change let's do this let's do rose

00:27:35,370 --> 00:27:41,940
and now we have this horizontal

00:27:38,730 --> 00:27:45,060
scrolling thing going on like I'm pretty

00:27:41,940 --> 00:27:48,150
big on horizontal scrolling and if we do

00:27:45,060 --> 00:27:53,400
the dense keyword again we can pack

00:27:48,150 --> 00:27:55,920
things together and again these are new

00:27:53,400 --> 00:27:59,850
features we never could do this before

00:27:55,920 --> 00:28:02,250
but now we have this in native CSS you

00:27:59,850 --> 00:28:06,030
don't need extra libraries this is

00:28:02,250 --> 00:28:08,100
something that the browser comes with if

00:28:06,030 --> 00:28:10,320
you plan to start exploring grid or

00:28:08,100 --> 00:28:12,510
already are using it I highly suggest

00:28:10,320 --> 00:28:15,120
using Firefox for its excellent grid

00:28:12,510 --> 00:28:17,550
inspector to toggle it you click on the

00:28:15,120 --> 00:28:19,620
waffle like icon next to display grid in

00:28:17,550 --> 00:28:21,960
your grid container element and it will

00:28:19,620 --> 00:28:23,490
then show you all the grid lines you can

00:28:21,960 --> 00:28:25,530
see where your grid items have been

00:28:23,490 --> 00:28:28,080
placed on the grid really helps with

00:28:25,530 --> 00:28:29,400
troubleshooting we also get a layout

00:28:28,080 --> 00:28:31,470
panel which provide additional

00:28:29,400 --> 00:28:34,140
customization options like displaying

00:28:31,470 --> 00:28:35,820
grid line numbers grid areas as well as

00:28:34,140 --> 00:28:39,540
setting different colors if there are

00:28:35,820 --> 00:28:42,300
multiple grids on the same page so we've

00:28:39,540 --> 00:28:45,780
got quite a bit by now but I hope I've

00:28:42,300 --> 00:28:48,540
shown how much CSS has evolved and how

00:28:45,780 --> 00:28:50,820
it calls first to revisit some of the

00:28:48,540 --> 00:28:53,850
practices and mindsets that we've built

00:28:50,820 --> 00:28:56,769
up and solidified over the years

00:28:53,850 --> 00:28:59,070
Bruce Lee had put forth a criticism of

00:28:56,769 --> 00:29:02,620
martial arts masters who build up an

00:28:59,070 --> 00:29:04,779
illusion of fixed forms who attempt to

00:29:02,620 --> 00:29:07,149
solidify the ever-flowing

00:29:04,779 --> 00:29:10,090
he called such practitioners in

00:29:07,149 --> 00:29:12,340
sensitized pattern eyes robots who

00:29:10,090 --> 00:29:15,159
merely perform methodical routines as

00:29:12,340 --> 00:29:17,769
responses rather than responding to what

00:29:15,159 --> 00:29:18,600
is it's a bit harsh but it does make

00:29:17,769 --> 00:29:21,519
sense

00:29:18,600 --> 00:29:25,059
perhaps we too should allow our web

00:29:21,519 --> 00:29:27,159
designs to respond to what is perhaps we

00:29:25,059 --> 00:29:29,559
should be coming up with designs that

00:29:27,159 --> 00:29:32,500
listen to the circumstances of the

00:29:29,559 --> 00:29:35,049
different browsers that render them back

00:29:32,500 --> 00:29:36,789
in 1996 they were less than 100

00:29:35,049 --> 00:29:41,379
properties in the first version of CSS

00:29:36,789 --> 00:29:43,570
today 511 distinct CSS properties in the

00:29:41,379 --> 00:29:45,669
index each serving a distinct purpose

00:29:43,570 --> 00:29:48,159
their properties for color sizing

00:29:45,669 --> 00:29:51,759
typography layout animation visual

00:29:48,159 --> 00:29:54,340
effects even sound when we explore the

00:29:51,759 --> 00:29:56,559
myriad of potential combinations the

00:29:54,340 --> 00:29:59,019
possibilities for the web are pretty

00:29:56,559 --> 00:30:00,370
endless so here's a list of resources

00:29:59,019 --> 00:30:01,629
related to the things that are covered

00:30:00,370 --> 00:30:03,370
in today's talk I'll share these slides

00:30:01,629 --> 00:30:05,799
for anybody who's interested and I want

00:30:03,370 --> 00:30:08,500
to leave you all with one final Bruce

00:30:05,799 --> 00:30:11,289
Lee code that true observation begins

00:30:08,500 --> 00:30:14,110
when one is devoid of set patterns and

00:30:11,289 --> 00:30:18,129
freedom of expression occurs when one is

00:30:14,110 --> 00:30:20,559
beyond systems and I hope that this will

00:30:18,129 --> 00:30:24,070
inspire you to create designs that truly

00:30:20,559 --> 00:30:28,849
embrace the nature of the web thank you

00:30:24,070 --> 00:30:28,849

YouTube URL: https://www.youtube.com/watch?v=QoZOJ_5ZIwc


