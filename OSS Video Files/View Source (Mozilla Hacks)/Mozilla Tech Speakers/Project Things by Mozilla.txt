Title: Project Things by Mozilla
Publication date: 2018-05-15
Playlist: Mozilla Tech Speakers
Description: 
	Ben Francis describes Mozilla's implementation of the Web of 
Things, introducing the Web Thing API, Mozilla's proposed spec; and the open source Things Gateway and Things Framework that make up Project Things.
Captions: 
	00:00:00,000 --> 00:00:04,470
hello hello greetings Tec speakers today

00:00:03,120 --> 00:00:07,319
we are joined for our next installment

00:00:04,470 --> 00:00:09,690
of the Mozilla tech briefings today we

00:00:07,319 --> 00:00:11,400
have a special guest bin Francis bin

00:00:09,690 --> 00:00:13,889
Francis is one of our Mozilla staff

00:00:11,400 --> 00:00:16,800
application engineers he's been working

00:00:13,889 --> 00:00:20,070
with Mozilla for six almost seven years

00:00:16,800 --> 00:00:21,869
now if I believe bin Francis is here to

00:00:20,070 --> 00:00:24,570
join us today to give us an update on

00:00:21,869 --> 00:00:26,670
the Mozilla project things it's gone by

00:00:24,570 --> 00:00:28,890
many names over the past couple years as

00:00:26,670 --> 00:00:31,320
its developed Internet of Things web of

00:00:28,890 --> 00:00:33,420
things here at Mozilla we're cleaning at

00:00:31,320 --> 00:00:34,440
the project things and Ben will be here

00:00:33,420 --> 00:00:36,719
to tell us all about it

00:00:34,440 --> 00:00:39,420
the latest and greatest and how you can

00:00:36,719 --> 00:00:40,890
get involved in the project so without

00:00:39,420 --> 00:00:43,260
further ado I'd like to yield the floor

00:00:40,890 --> 00:00:44,550
to bin who will be giving us our tech

00:00:43,260 --> 00:00:47,789
briefing an update today thank you so

00:00:44,550 --> 00:00:50,370
much for joining then everyone thank you

00:00:47,789 --> 00:00:52,050
very much for having me so I work in the

00:00:50,370 --> 00:00:54,780
emerging technologies department at

00:00:52,050 --> 00:00:58,079
Mozilla and I'm working on the web of

00:00:54,780 --> 00:01:00,260
things and Mozilla's implementation of

00:00:58,079 --> 00:01:03,960
the web of things called project things

00:01:00,260 --> 00:01:05,909
so let me give you a quick overview what

00:01:03,960 --> 00:01:07,890
I'm going to talk about today so first

00:01:05,909 --> 00:01:09,780
of all a bit of history about the

00:01:07,890 --> 00:01:12,530
weather things how it came about and how

00:01:09,780 --> 00:01:15,930
it relates to the Internet of Things I'm

00:01:12,530 --> 00:01:18,000
gonna talk about the web thing API which

00:01:15,930 --> 00:01:20,430
is Mozilla's proposal for a web of

00:01:18,000 --> 00:01:22,470
things standard and I'm going to talk

00:01:20,430 --> 00:01:24,270
about project things which is Mozilla's

00:01:22,470 --> 00:01:26,640
open source whether things

00:01:24,270 --> 00:01:29,159
implementation which includes the things

00:01:26,640 --> 00:01:31,350
Gateway which is an open source whether

00:01:29,159 --> 00:01:33,780
things gateway implementation that you

00:01:31,350 --> 00:01:35,939
can build yourself the things framework

00:01:33,780 --> 00:01:38,100
which is a device framework for building

00:01:35,939 --> 00:01:41,939
the web things themselves

00:01:38,100 --> 00:01:44,509
and ways that you can get involved and

00:01:41,939 --> 00:01:48,240
encourage other people to get involved

00:01:44,509 --> 00:01:51,750
so let's start by talking about the web

00:01:48,240 --> 00:01:53,310
of things in general and to do that we

00:01:51,750 --> 00:01:55,439
have to start by talking about the

00:01:53,310 --> 00:01:57,030
Internet of Things so there are lots of

00:01:55,439 --> 00:01:59,100
definitions of the Internet of Things

00:01:57,030 --> 00:02:01,530
here is one of them the Internet of

00:01:59,100 --> 00:02:03,780
Things is a system of physical objects

00:02:01,530 --> 00:02:06,320
connected to the Internet that can be

00:02:03,780 --> 00:02:08,580
discovered monitored controlled or

00:02:06,320 --> 00:02:10,470
interrupted with so it's about

00:02:08,580 --> 00:02:12,240
monitoring and controlling things over

00:02:10,470 --> 00:02:14,310
the Internet

00:02:12,240 --> 00:02:16,830
so the internet-of-things today is

00:02:14,310 --> 00:02:19,350
mainly built on vertical proprietary

00:02:16,830 --> 00:02:21,090
technology stacks which don't talk to

00:02:19,350 --> 00:02:21,420
each other and when they do talk to each

00:02:21,090 --> 00:02:23,850
other

00:02:21,420 --> 00:02:24,720
it requires per vendor integrations to

00:02:23,850 --> 00:02:27,300
make that happen

00:02:24,720 --> 00:02:29,460
there are standardization efforts but

00:02:27,300 --> 00:02:32,610
there's still no dominant model or

00:02:29,460 --> 00:02:35,130
standard so the Internet of Things today

00:02:32,610 --> 00:02:36,420
is a lot like the internet before we had

00:02:35,130 --> 00:02:38,310
the World Wide Web

00:02:36,420 --> 00:02:39,960
when they were competing hypertext

00:02:38,310 --> 00:02:42,090
systems that didn't talk to each other

00:02:39,960 --> 00:02:44,670
and the web eventually came along and

00:02:42,090 --> 00:02:48,800
provide a unified application layer

00:02:44,670 --> 00:02:48,800
protocol for sharing linking information

00:02:49,130 --> 00:02:55,140
so the web of things is about applying

00:02:52,590 --> 00:02:55,680
the lessons learnt from the web the

00:02:55,140 --> 00:02:58,170
World Wide Web

00:02:55,680 --> 00:03:00,210
to the Internet of Things to create a

00:02:58,170 --> 00:03:03,450
decentralized Internet of Things by

00:03:00,210 --> 00:03:05,610
giving those things URLs on the web to

00:03:03,450 --> 00:03:08,760
make them linkable and discoverable and

00:03:05,610 --> 00:03:12,840
defining a standard data model and api's

00:03:08,760 --> 00:03:14,850
to make them interoperable so the web of

00:03:12,840 --> 00:03:18,240
things is not intended as another

00:03:14,850 --> 00:03:20,520
vertical iot technology stack to compete

00:03:18,240 --> 00:03:23,370
with existing platforms it's meant to be

00:03:20,520 --> 00:03:26,270
a unifying horizontal layer to bridge

00:03:23,370 --> 00:03:28,770
together those underlying IOT protocols

00:03:26,270 --> 00:03:30,530
rather than start from scratch the

00:03:28,770 --> 00:03:34,910
weather things is built on existing

00:03:30,530 --> 00:03:38,670
proven web standards like HTTP Jason

00:03:34,910 --> 00:03:41,850
WebSockets and all the best practice web

00:03:38,670 --> 00:03:45,330
standards for security like TLS and a

00:03:41,850 --> 00:03:48,270
wharf but it's also going to require

00:03:45,330 --> 00:03:50,730
defining new web standards in particular

00:03:48,270 --> 00:03:52,860
a machine readable description format

00:03:50,730 --> 00:03:55,880
for describing things in the real world

00:03:52,860 --> 00:03:57,990
and their capabilities an API for

00:03:55,880 --> 00:04:00,660
communicating with those things over the

00:03:57,990 --> 00:04:03,570
web and possibly even a new version of

00:04:00,660 --> 00:04:08,340
HTTP that's better suited to resource

00:04:03,570 --> 00:04:09,780
constrained devices and IOT use cases so

00:04:08,340 --> 00:04:11,430
I'm going to give you a quick history

00:04:09,780 --> 00:04:14,700
because the web of Things is not

00:04:11,430 --> 00:04:17,040
something which Mozilla invented I dates

00:04:14,700 --> 00:04:19,290
back to at least the year 2000 when

00:04:17,040 --> 00:04:23,220
people started talking about connected

00:04:19,290 --> 00:04:26,500
objects and the web in 2002 there was a

00:04:23,220 --> 00:04:30,460
cool town project which use URLs nature

00:04:26,500 --> 00:04:34,360
to interact with physical objects 2007

00:04:30,460 --> 00:04:36,310
Dominic Ginyard and vodka and started

00:04:34,360 --> 00:04:39,159
the Weber things community I would Oh

00:04:36,310 --> 00:04:43,050
Baba things org and Dave Raggett started

00:04:39,159 --> 00:04:44,680
giving talks at the w3c and IOT events

00:04:43,050 --> 00:04:47,470
there have been peer-reviewed

00:04:44,680 --> 00:04:48,610
publications an international workshop

00:04:47,470 --> 00:04:51,750
on the Weber things which has been

00:04:48,610 --> 00:04:55,030
running every year since 2010 PhD theses

00:04:51,750 --> 00:04:59,259
and the company everything which was

00:04:55,030 --> 00:05:01,509
founded by Dominique and Vlad which is a

00:04:59,259 --> 00:05:04,150
company built on ideas from the web of

00:05:01,509 --> 00:05:06,639
things in 2014 there was the first web

00:05:04,150 --> 00:05:08,229
of things to be 3 C workshop which led

00:05:06,639 --> 00:05:10,270
to the creation of the bug of things

00:05:08,229 --> 00:05:14,639
interest group and a Siemens research

00:05:10,270 --> 00:05:17,860
group and in 2016 the web of things

00:05:14,639 --> 00:05:21,819
interest group at the w3c proposed a

00:05:17,860 --> 00:05:25,659
charter for Weber things working group

00:05:21,819 --> 00:05:27,370
to work on some standards the w3c is not

00:05:25,659 --> 00:05:30,849
the only standards body looking at

00:05:27,370 --> 00:05:34,479
standards in this area so the open

00:05:30,849 --> 00:05:36,009
connectivity foundation have a system

00:05:34,479 --> 00:05:39,400
built on coop

00:05:36,009 --> 00:05:42,610
which is like mini HTTP for resource

00:05:39,400 --> 00:05:45,400
constrained devices the open Geospatial

00:05:42,610 --> 00:05:47,440
consortium have the sensor things api

00:05:45,400 --> 00:05:51,520
which is quite similar and is dedicated

00:05:47,440 --> 00:05:53,080
to geospatial applications the IETF has

00:05:51,520 --> 00:05:57,279
even published some thoughts on using

00:05:53,080 --> 00:05:59,650
the rest pattern in IOT but the area

00:05:57,279 --> 00:06:02,380
where most focused on is the w3c Weber

00:05:59,650 --> 00:06:04,750
things work and the w3c has a community

00:06:02,380 --> 00:06:08,199
group an interest group and a working

00:06:04,750 --> 00:06:10,889
group so Mozilla is a member of the

00:06:08,199 --> 00:06:12,849
Weber things interest group at the w3c

00:06:10,889 --> 00:06:14,860
where we're working with device

00:06:12,849 --> 00:06:17,229
manufacturers software developers and

00:06:14,860 --> 00:06:23,259
service providers to help define those

00:06:17,229 --> 00:06:25,000
standards there's also a w3c working

00:06:23,259 --> 00:06:27,039
group around the web of things which

00:06:25,000 --> 00:06:29,020
Mozilla is not currently a member of but

00:06:27,039 --> 00:06:33,099
they have been working on these four

00:06:29,020 --> 00:06:36,159
documents a a view of the general

00:06:33,099 --> 00:06:38,409
architecture of the web of things the

00:06:36,159 --> 00:06:40,000
thing description spec defines a kind of

00:06:38,409 --> 00:06:42,660
abstract data model that

00:06:40,000 --> 00:06:44,560
scribing things and has a json-ld

00:06:42,660 --> 00:06:46,990
serialization using Semantic Web

00:06:44,560 --> 00:06:48,970
technologies they are working on a

00:06:46,990 --> 00:06:51,940
programming language agnostic scripting

00:06:48,970 --> 00:06:54,130
API and they have the templating system

00:06:51,940 --> 00:06:59,110
for binding the web of things to all

00:06:54,130 --> 00:07:01,810
sorts of different protocols so our

00:06:59,110 --> 00:07:07,930
feedback on this work so far is it's

00:07:01,810 --> 00:07:10,330
maybe a little bit over complicated bit

00:07:07,930 --> 00:07:13,090
of a simpler model it's largely based on

00:07:10,330 --> 00:07:16,450
a previous w3c member submission from

00:07:13,090 --> 00:07:18,000
the EU funded composed project as we've

00:07:16,450 --> 00:07:21,100
written what's basically a single

00:07:18,000 --> 00:07:22,990
specification that covers web thing

00:07:21,100 --> 00:07:25,630
description format and a web thing API

00:07:22,990 --> 00:07:27,820
so that's a plain JSON description

00:07:25,630 --> 00:07:30,010
format for describing things in the real

00:07:27,820 --> 00:07:33,070
world and their capabilities and a

00:07:30,010 --> 00:07:35,050
concrete rest and web socket API for

00:07:33,070 --> 00:07:39,310
communicating with those things over the

00:07:35,050 --> 00:07:45,070
web so I'm going to tell you a bit about

00:07:39,310 --> 00:07:47,169
the web thing API now so and some of

00:07:45,070 --> 00:07:50,440
these slides might not show up very well

00:07:47,169 --> 00:07:51,940
on the video stream but we'll make sure

00:07:50,440 --> 00:07:55,000
that the slides are sent out afterwards

00:07:51,940 --> 00:07:58,419
so you can see the fine detail but this

00:07:55,000 --> 00:08:01,180
is an example of a thing description so

00:07:58,419 --> 00:08:03,310
a thing can have a name you can have a

00:08:01,180 --> 00:08:05,680
type it can have a description human

00:08:03,310 --> 00:08:07,570
readable description and you can define

00:08:05,680 --> 00:08:10,450
properties of that thing which can be

00:08:07,570 --> 00:08:12,940
modified you can define actions that can

00:08:10,450 --> 00:08:16,180
be requested and you can define events

00:08:12,940 --> 00:08:17,710
which can be subscribed to you as the

00:08:16,180 --> 00:08:21,490
thing description can also include links

00:08:17,710 --> 00:08:23,950
to other resources about that thing so

00:08:21,490 --> 00:08:26,080
here there's a link to a web socket

00:08:23,950 --> 00:08:30,550
endpoint to talk to that thing which I

00:08:26,080 --> 00:08:32,770
explained a bit more later so just

00:08:30,550 --> 00:08:35,469
jumping into those details so this is an

00:08:32,770 --> 00:08:37,450
example of a property definition so this

00:08:35,469 --> 00:08:40,360
is describing a property of a thing in

00:08:37,450 --> 00:08:44,970
the real world it's a level property of

00:08:40,360 --> 00:08:48,670
a lamp which is a number from 0 to 100

00:08:44,970 --> 00:08:50,680
and there's a link here to a web

00:08:48,670 --> 00:08:53,569
resource which represents that property

00:08:50,680 --> 00:08:57,359
so the property has its own your

00:08:53,569 --> 00:09:00,959
this is an example of an action so a

00:08:57,359 --> 00:09:03,569
thing can have an action this is an

00:09:00,959 --> 00:09:07,649
example of an action for a lamp which

00:09:03,569 --> 00:09:10,199
says I want to fade the light from one

00:09:07,649 --> 00:09:12,629
to a particular level so in this case I

00:09:10,199 --> 00:09:13,889
want so I want to fade the light to a

00:09:12,629 --> 00:09:20,189
particular level with a particular

00:09:13,889 --> 00:09:22,379
duration so the action has an input that

00:09:20,189 --> 00:09:26,009
action also has a link that you can post

00:09:22,379 --> 00:09:29,819
you to request the action and then this

00:09:26,009 --> 00:09:32,459
is an event so this is defining an

00:09:29,819 --> 00:09:34,079
overheated event which can be fired by

00:09:32,459 --> 00:09:35,609
the thing which is saying that the lamp

00:09:34,079 --> 00:09:38,129
has exceeded its safe operating

00:09:35,609 --> 00:09:45,089
temperature and the event also has a

00:09:38,129 --> 00:09:47,519
link you can also define a list of links

00:09:45,089 --> 00:09:49,919
about the thing so there's a link here

00:09:47,519 --> 00:09:53,489
to a list of properties an action queue

00:09:49,919 --> 00:09:56,399
and an event log there is a link to a

00:09:53,489 --> 00:09:59,790
web socket endpoint so that you can

00:09:56,399 --> 00:10:02,699
control the thing and there is also a

00:09:59,790 --> 00:10:04,559
link here to an HTML representation of

00:10:02,699 --> 00:10:09,419
the thing so it can provide its own

00:10:04,559 --> 00:10:11,129
custom web interface if it wants to okay

00:10:09,419 --> 00:10:12,959
so that's the thing description which

00:10:11,129 --> 00:10:16,169
basically describes a real thing in a

00:10:12,959 --> 00:10:17,759
machine readable format using JSON

00:10:16,169 --> 00:10:21,569
next I'm going to talk about the REST

00:10:17,759 --> 00:10:23,189
API which rest meaning representational

00:10:21,569 --> 00:10:27,600
state transfer which is a common way of

00:10:23,189 --> 00:10:29,699
building api's on the web and here's an

00:10:27,600 --> 00:10:32,970
example so I mentioned before that a

00:10:29,699 --> 00:10:36,269
property has its own URL so you can send

00:10:32,970 --> 00:10:38,789
an HTTP GET requests to the property URL

00:10:36,269 --> 00:10:41,519
to get the current status of that

00:10:38,789 --> 00:10:43,589
property and so in this case I am asking

00:10:41,519 --> 00:10:45,419
for the status of an on/off property of

00:10:43,589 --> 00:10:48,869
a lamp and I'm getting a response that

00:10:45,419 --> 00:10:53,939
says it's not currently turned on on is

00:10:48,869 --> 00:10:57,389
false I can also set that property using

00:10:53,939 --> 00:10:59,220
an HTTP put request so this is an

00:10:57,389 --> 00:11:01,739
example of a put request where I'm

00:10:59,220 --> 00:11:04,019
saying I want to change on to true and

00:11:01,739 --> 00:11:06,330
I'm getting a response that echoes back

00:11:04,019 --> 00:11:10,220
my request and says okay I've turned

00:11:06,330 --> 00:11:13,530
- true now because this is just standard

00:11:10,220 --> 00:11:16,230
HTTP requests we don't need any kind of

00:11:13,530 --> 00:11:18,180
new special JavaScript API in the

00:11:16,230 --> 00:11:22,290
browser for web applications they can

00:11:18,180 --> 00:11:25,080
use the existing fetch API send those

00:11:22,290 --> 00:11:27,660
HTTP requests all the old XML HTTP

00:11:25,080 --> 00:11:30,660
requests API this is an example of a

00:11:27,660 --> 00:11:34,020
fetch request to the on property of a

00:11:30,660 --> 00:11:35,940
lamp it's using the put method to set

00:11:34,020 --> 00:11:37,350
that property and there's also some

00:11:35,940 --> 00:11:40,950
headers here so this is basically saying

00:11:37,350 --> 00:11:43,470
I'm sending you a content type of Jason

00:11:40,950 --> 00:11:45,570
I'd like you to respond with a content

00:11:43,470 --> 00:11:47,370
type of Jason and there's also an

00:11:45,570 --> 00:11:50,580
authorization header which has got this

00:11:47,370 --> 00:11:53,640
key which identifies me and says I'm

00:11:50,580 --> 00:11:56,040
authorized to control this light so

00:11:53,640 --> 00:11:58,020
that's the security mechanism and then

00:11:56,040 --> 00:12:01,440
there's a body of that HTTP request

00:11:58,020 --> 00:12:07,620
which is just a bit of JSON that says

00:12:01,440 --> 00:12:09,330
turn on to true so there are other

00:12:07,620 --> 00:12:12,060
things you can do with the REST API you

00:12:09,330 --> 00:12:15,420
can request an action so this is an

00:12:12,060 --> 00:12:18,180
example of posting and action request to

00:12:15,420 --> 00:12:20,550
an action queue so the actions resource

00:12:18,180 --> 00:12:23,550
is like a queue and you send a post

00:12:20,550 --> 00:12:25,320
request to add a new action request to

00:12:23,550 --> 00:12:29,190
that queue so in this case it's

00:12:25,320 --> 00:12:33,270
requesting a fade action to set the

00:12:29,190 --> 00:12:35,850
level of a lamp to 50% over a period of

00:12:33,270 --> 00:12:40,290
two seconds and I get a response back

00:12:35,850 --> 00:12:44,040
from the server saying your response

00:12:40,290 --> 00:12:47,340
request has been created and here is a

00:12:44,040 --> 00:12:50,340
URL that identifies that action request

00:12:47,340 --> 00:12:51,900
and it's currently got the status of

00:12:50,340 --> 00:12:55,190
pending so the action hasn't been

00:12:51,900 --> 00:12:55,190
executed yeah

00:12:57,770 --> 00:13:13,770
so you can also request or Elizabeth has

00:13:10,890 --> 00:13:23,700
overheated and now this is obviously not

00:13:13,770 --> 00:13:26,190
very efficient if you have to keep the

00:13:23,700 --> 00:13:35,070
HT best pattern aren't that well suited

00:13:26,190 --> 00:13:37,260
I Oh t use cases so there's also a Web

00:13:35,070 --> 00:13:40,080
API which has been I and a web standard

00:13:37,260 --> 00:13:42,270
way of opening up a basically a TCP

00:13:40,080 --> 00:13:44,130
socket with a web server so you can send

00:13:42,270 --> 00:13:51,500
plaintext messages backwards and

00:13:44,130 --> 00:13:55,260
forwards this is an example of a match

00:13:51,500 --> 00:13:58,830
to set a property just bear with me for

00:13:55,260 --> 00:14:00,540
a second catching it so this is a

00:13:58,830 --> 00:14:02,820
message to set a property over a

00:14:00,540 --> 00:14:05,700
WebSocket it's a message type set

00:14:02,820 --> 00:14:07,770
property and it's saying left motor 100

00:14:05,700 --> 00:14:09,300
so this is actually a message to send to

00:14:07,770 --> 00:14:15,960
a robot to tell it to turn its left

00:14:09,300 --> 00:14:18,810
motor to 100% and this isn't it so in

00:14:15,960 --> 00:14:21,540
JavaScript if you want to send this

00:14:18,810 --> 00:14:24,330
message you need to open a web socket so

00:14:21,540 --> 00:14:26,580
this could be a JavaScript running on a

00:14:24,330 --> 00:14:29,730
web page you open a web socket with the

00:14:26,580 --> 00:14:32,490
thing by its URL you specify the web

00:14:29,730 --> 00:14:35,460
thing sub protocol and then you can send

00:14:32,490 --> 00:14:41,390
a message a set property message to that

00:14:35,460 --> 00:14:43,410
thing in this case again left motor 100%

00:14:41,390 --> 00:14:45,090
so there are other things you can do

00:14:43,410 --> 00:14:47,790
with this web socket API like the REST

00:14:45,090 --> 00:14:50,490
API you can request an action so this is

00:14:47,790 --> 00:14:54,840
an example of an action request saying I

00:14:50,490 --> 00:14:56,880
want you to go forward you can subscribe

00:14:54,840 --> 00:14:59,040
to an event so you can say I want

00:14:56,880 --> 00:15:02,870
subscribe to motion events so whenever

00:14:59,040 --> 00:15:02,870
motion is detected I want to be notified

00:15:04,170 --> 00:15:08,910
then you can receive messages back from

00:15:06,899 --> 00:15:10,560
the server so with a WebSocket API you

00:15:08,910 --> 00:15:12,329
don't have to have that request response

00:15:10,560 --> 00:15:15,750
mechanism messages can be pushed

00:15:12,329 --> 00:15:17,490
directly to you as the client so this is

00:15:15,750 --> 00:15:20,250
an example of a property status message

00:15:17,490 --> 00:15:24,660
which is telling me that an LED has

00:15:20,250 --> 00:15:26,550
turned on LED true you can also be

00:15:24,660 --> 00:15:28,500
notified of change in status so you

00:15:26,550 --> 00:15:31,440
remember earlier I requested an action

00:15:28,500 --> 00:15:33,389
but it was pending this is a message a

00:15:31,440 --> 00:15:37,250
WebSocket message to tell me that my

00:15:33,389 --> 00:15:40,010
action request is being completed and

00:15:37,250 --> 00:15:43,680
this is an example of an event so I

00:15:40,010 --> 00:15:45,510
earlier I subscribed to the motion event

00:15:43,680 --> 00:15:47,430
and this is an example of an event

00:15:45,510 --> 00:15:49,589
message which has been pushed to me from

00:15:47,430 --> 00:15:51,570
the server to tell me that motion has

00:15:49,589 --> 00:15:55,380
been detected and it has a timestamp to

00:15:51,570 --> 00:15:57,000
say when that was detected okay so

00:15:55,380 --> 00:16:00,060
that's the thing description the REST

00:15:57,000 --> 00:16:02,699
API and the web socket API and what we

00:16:00,060 --> 00:16:04,829
found from our research so far is that

00:16:02,699 --> 00:16:06,630
there are kind of three main ways for

00:16:04,829 --> 00:16:09,149
connecting things like this to the web

00:16:06,630 --> 00:16:11,850
and we call them the rubber things

00:16:09,149 --> 00:16:13,920
integration patterns so the direct

00:16:11,850 --> 00:16:17,130
integration pattern is where a device

00:16:13,920 --> 00:16:19,860
itself hosts a web server it has its own

00:16:17,130 --> 00:16:23,010
URLs and it runs the webserver on the

00:16:19,860 --> 00:16:25,829
device itself so a an example might be a

00:16:23,010 --> 00:16:29,190
Wi-Fi camera which you can talk to over

00:16:25,829 --> 00:16:31,709
HTTP the Gateway integration pattern is

00:16:29,190 --> 00:16:34,320
for resource-constrained devices which

00:16:31,709 --> 00:16:36,269
can't host a web server themselves so

00:16:34,320 --> 00:16:38,180
they need a gateway to bridge them to

00:16:36,269 --> 00:16:40,649
the web so an example might be

00:16:38,180 --> 00:16:44,040
battery-powered door sensors using a

00:16:40,649 --> 00:16:46,620
low-power wireless protocol and finally

00:16:44,040 --> 00:16:48,360
the cloud integration pattern can be

00:16:46,620 --> 00:16:50,490
used for when you have a large number of

00:16:48,360 --> 00:16:52,800
devices over a wide geographic area

00:16:50,490 --> 00:16:54,930
which means centrally coordinating so an

00:16:52,800 --> 00:16:59,010
example might be air pollution sensors

00:16:54,930 --> 00:17:02,250
and in this case the web thing API is

00:16:59,010 --> 00:17:04,589
exposed by from a cloud service and the

00:17:02,250 --> 00:17:06,299
devices use some other mechanism to

00:17:04,589 --> 00:17:08,339
communicate with that cloud service on

00:17:06,299 --> 00:17:14,069
the backend so it might be an MQTT

00:17:08,339 --> 00:17:17,130
messaging service for example so that's

00:17:14,069 --> 00:17:19,280
the API that mozilla is proposed

00:17:17,130 --> 00:17:21,539
project things is Mozilla's

00:17:19,280 --> 00:17:24,480
implementation of the web of things and

00:17:21,539 --> 00:17:26,189
it has three main components which

00:17:24,480 --> 00:17:28,380
correspond to those three different

00:17:26,189 --> 00:17:29,910
integration patterns I mentioned so

00:17:28,380 --> 00:17:32,760
there's the things cloud which is a

00:17:29,910 --> 00:17:35,220
collection of Mozilla hosted IOT cloud

00:17:32,760 --> 00:17:36,840
services there's the things Gateway

00:17:35,220 --> 00:17:38,789
which is an open-source web of things

00:17:36,840 --> 00:17:41,370
gateway implementation which bridges

00:17:38,789 --> 00:17:44,160
existing smart home devices to the web

00:17:41,370 --> 00:17:45,600
and the things framework which is a

00:17:44,160 --> 00:17:47,970
collection of reusable software

00:17:45,600 --> 00:17:49,830
components for building the things

00:17:47,970 --> 00:17:51,929
themselves what we call native web

00:17:49,830 --> 00:17:56,460
things which expose the focusing API

00:17:51,929 --> 00:17:57,900
directly so I'm going to tell you about

00:17:56,460 --> 00:18:00,390
project things I'm going to talk about

00:17:57,900 --> 00:18:02,460
things the things Gateway the things

00:18:00,390 --> 00:18:03,630
framework and also how you can get

00:18:02,460 --> 00:18:07,980
involved and how you can encourage

00:18:03,630 --> 00:18:11,250
others to get involved so first of all

00:18:07,980 --> 00:18:14,640
the things Gateway the things Gateway is

00:18:11,250 --> 00:18:16,530
designed to allow you to directly

00:18:14,640 --> 00:18:20,220
monitor and control your home over the

00:18:16,530 --> 00:18:22,559
web without a middleman so here's some

00:18:20,220 --> 00:18:24,840
example use cases of what you might use

00:18:22,559 --> 00:18:27,419
that for so turning appliances on and

00:18:24,840 --> 00:18:29,340
off remotely over the Internet having a

00:18:27,419 --> 00:18:31,289
light turn on or an alarm sound with if

00:18:29,340 --> 00:18:33,750
motion is detected be left on your

00:18:31,289 --> 00:18:36,150
smartphone if smoke is detected or check

00:18:33,750 --> 00:18:38,159
what times the kids got home and by

00:18:36,150 --> 00:18:43,830
looking up a date stamp on a on a door

00:18:38,159 --> 00:18:45,750
sensor so this is the basic architecture

00:18:43,830 --> 00:18:48,510
of our things gateway implementation

00:18:45,750 --> 00:18:51,270
it's a web server and nodejs web server

00:18:48,510 --> 00:18:55,020
on the backend which exposes that web

00:18:51,270 --> 00:18:57,030
thing API there's a web application as a

00:18:55,020 --> 00:18:59,010
front-end there's a progressive web app

00:18:57,030 --> 00:19:01,350
that you can access on any device and

00:18:59,010 --> 00:19:04,200
add it to your home screen and then

00:19:01,350 --> 00:19:07,740
there are adapters which bridge various

00:19:04,200 --> 00:19:09,539
IOT protocols to that web thing API and

00:19:07,740 --> 00:19:11,580
those adapters can be written in

00:19:09,539 --> 00:19:14,220
different languages like Russ or nodejs

00:19:11,580 --> 00:19:15,750
or Python and then they communicate

00:19:14,220 --> 00:19:17,100
they're running their own process they

00:19:15,750 --> 00:19:21,090
communicate with the main gateway

00:19:17,100 --> 00:19:22,650
process over an IPC mechanism so if one

00:19:21,090 --> 00:19:24,390
of those adapters crashes it doesn't

00:19:22,650 --> 00:19:29,940
bring down the whole Gateway and the

00:19:24,390 --> 00:19:31,000
Gateway is also connected to this TLS

00:19:29,940 --> 00:19:32,650
tunneling service which

00:19:31,000 --> 00:19:35,350
we set up in the clouds which makes it

00:19:32,650 --> 00:19:37,750
really easy to set up your gateway and

00:19:35,350 --> 00:19:43,840
connect it to the Internet in a secure

00:19:37,750 --> 00:19:46,870
way so just a word about security the

00:19:43,840 --> 00:19:48,850
gateway is accessed over HTTPS via this

00:19:46,870 --> 00:19:51,580
mozilla iot tunneling service which i

00:19:48,850 --> 00:19:54,610
mentioned it uses a software called

00:19:51,580 --> 00:19:57,250
pagekite which sets up a tunnel from the

00:19:54,610 --> 00:19:59,050
clouds to your gateway is completely

00:19:57,250 --> 00:20:02,800
end-to-end encrypted so from the user's

00:19:59,050 --> 00:20:05,140
browser to the Gateway is using HTTPS so

00:20:02,800 --> 00:20:08,800
we can sniff all the data that's going

00:20:05,140 --> 00:20:10,600
through that service every gateway gets

00:20:08,800 --> 00:20:13,090
its own unique subdomain with a

00:20:10,600 --> 00:20:15,040
certificate signed by let's encrypt or

00:20:13,090 --> 00:20:16,930
if you want to you don't have to use

00:20:15,040 --> 00:20:19,180
that service you can configure your own

00:20:16,930 --> 00:20:21,190
DNS have your own domain and configure

00:20:19,180 --> 00:20:24,610
your firewall and TLS and everything

00:20:21,190 --> 00:20:26,620
yourself it also uses JSON web tokens to

00:20:24,610 --> 00:20:29,080
authenticate so this is pretty standard

00:20:26,620 --> 00:20:32,470
way for authenticating with web services

00:20:29,080 --> 00:20:35,710
so that not just anyone can control your

00:20:32,470 --> 00:20:37,600
gateway and it also supports OAuth as a

00:20:35,710 --> 00:20:39,400
way to authorize third party apps and

00:20:37,600 --> 00:20:43,390
services that may want to talk to your

00:20:39,400 --> 00:20:45,550
Gateway so we released this gateway

00:20:43,390 --> 00:20:48,790
software as a oh s image you can

00:20:45,550 --> 00:20:51,790
download for the Raspberry Pi and flash

00:20:48,790 --> 00:20:54,340
onto an SD card this is initially aimed

00:20:51,790 --> 00:20:57,340
at hackers and makers who are willing to

00:20:54,340 --> 00:20:59,410
source their own hardware components put

00:20:57,340 --> 00:21:03,630
them together and flash that software

00:20:59,410 --> 00:21:05,740
image onto an SD card so you basically

00:21:03,630 --> 00:21:07,930
you need to get hold of a Raspberry Pi

00:21:05,740 --> 00:21:09,250
computer single ball computer you don't

00:21:07,930 --> 00:21:10,570
have to use Raspberry Pi but that's the

00:21:09,250 --> 00:21:12,610
easiest way to do it at the moment

00:21:10,570 --> 00:21:15,610
because we have a prebuilt software

00:21:12,610 --> 00:21:18,070
image to that the Raspberry Pi has Wi-Fi

00:21:15,610 --> 00:21:20,220
Bluetooth and GPRO and other things

00:21:18,070 --> 00:21:22,840
built in but if you want to use other

00:21:20,220 --> 00:21:25,960
smartphone protocols like ZigBee and

00:21:22,840 --> 00:21:29,020
z-wave you need USB dongles to provide

00:21:25,960 --> 00:21:32,170
that feature so you put it all together

00:21:29,020 --> 00:21:35,170
and then you download pre-built OS image

00:21:32,170 --> 00:21:38,260
from our website flash it on twisty card

00:21:35,170 --> 00:21:40,420
stick it in your gateway and you boot it

00:21:38,260 --> 00:21:43,760
up and then the Raspberry Pi acts as a

00:21:40,420 --> 00:21:47,120
Wi-Fi hotspot that you can connect to

00:21:43,760 --> 00:21:48,500
then go through the setup process so

00:21:47,120 --> 00:21:50,600
when you first set up the gateway this

00:21:48,500 --> 00:21:53,570
is the web interface of the Gateway and

00:21:50,600 --> 00:21:55,160
you create your own unique subdomain for

00:21:53,570 --> 00:21:56,570
your home so you choose your subdomain

00:21:55,160 --> 00:21:58,910
you associate it with an email address

00:21:56,570 --> 00:22:01,970
you can recover it later if you need to

00:21:58,910 --> 00:22:04,310
and as I said this subdomain gets its

00:22:01,970 --> 00:22:08,660
own certificate automatically generated

00:22:04,310 --> 00:22:10,730
signed by let's encrypt so then you can

00:22:08,660 --> 00:22:13,160
add devices to your gateway so you can

00:22:10,730 --> 00:22:15,830
scan for devices using ZigBee z-wave

00:22:13,160 --> 00:22:19,160
bluetooth even proprietary protocols

00:22:15,830 --> 00:22:23,150
like apple homekit and nest we've using

00:22:19,160 --> 00:22:25,670
adapters and there's an add-on system so

00:22:23,150 --> 00:22:28,330
that you can add extra adapters to your

00:22:25,670 --> 00:22:30,770
gateway to support different types of

00:22:28,330 --> 00:22:33,110
devices or protocols so there's an

00:22:30,770 --> 00:22:37,010
example here Philips hue and tp-link for

00:22:33,110 --> 00:22:39,170
talking to those particular devices this

00:22:37,010 --> 00:22:41,240
is the the things you I so you can

00:22:39,170 --> 00:22:43,640
monitor and control your home over the

00:22:41,240 --> 00:22:45,850
web and it provides this unified web

00:22:43,640 --> 00:22:47,780
interface to all these different devices

00:22:45,850 --> 00:22:49,160
existing off-the-shelf smart home

00:22:47,780 --> 00:22:51,020
products using lots of different

00:22:49,160 --> 00:22:52,490
protocols and you can control them all

00:22:51,020 --> 00:22:54,440
through this web interface rather than

00:22:52,490 --> 00:22:58,160
having a separate mobile app for each

00:22:54,440 --> 00:23:01,130
device you can lay those devices out on

00:22:58,160 --> 00:23:04,310
a floor plan of your home and kind of a

00:23:01,130 --> 00:23:06,650
spatial way and there's also a rules

00:23:04,310 --> 00:23:10,430
engine for setting if this then that

00:23:06,650 --> 00:23:12,950
style rules to automate your devices so

00:23:10,430 --> 00:23:14,960
for example if one thing turns on and

00:23:12,950 --> 00:23:18,640
another thing on or if a sensor is

00:23:14,960 --> 00:23:21,770
activated then do carry out some action

00:23:18,640 --> 00:23:24,200
we also have experimental voice controls

00:23:21,770 --> 00:23:29,180
so the Gateway can act as a kind of

00:23:24,200 --> 00:23:31,460
smarter system for your home so these

00:23:29,180 --> 00:23:32,990
are some of the DIY gateways that people

00:23:31,460 --> 00:23:35,360
have built themselves using a Raspberry

00:23:32,990 --> 00:23:38,450
Pi so people have attached screens to

00:23:35,360 --> 00:23:39,880
the speakers microphones and I use them

00:23:38,450 --> 00:23:42,530
for all kind of things but their own

00:23:39,880 --> 00:23:44,690
custom cases and decorated them with

00:23:42,530 --> 00:23:46,550
stickers so you can build your own

00:23:44,690 --> 00:23:50,780
gateway and decorate it however you like

00:23:46,550 --> 00:23:52,850
and here are some examples of the kinds

00:23:50,780 --> 00:23:54,710
of devices which we've already made

00:23:52,850 --> 00:23:56,809
compatible with the gateways so ZigBee

00:23:54,710 --> 00:24:00,590
z-wave Philips UTP

00:23:56,809 --> 00:24:03,019
IKEA's smart bulbs and these photos by

00:24:00,590 --> 00:24:05,090
Lars who does some great blog posts

00:24:03,019 --> 00:24:08,360
about his experiences getting all this

00:24:05,090 --> 00:24:10,070
stuff to work together and there's a

00:24:08,360 --> 00:24:14,450
there's a list of what devices are

00:24:10,070 --> 00:24:17,509
compatible on on al-baqi so finally the

00:24:14,450 --> 00:24:20,289
things framework this is quite new so

00:24:17,509 --> 00:24:23,179
it's just announced a week or two ago

00:24:20,289 --> 00:24:26,029
the things framework is a collection of

00:24:23,179 --> 00:24:27,860
reusable software libraries for building

00:24:26,029 --> 00:24:30,379
things themselves what we call native

00:24:27,860 --> 00:24:32,240
web things which expose the web thing

00:24:30,379 --> 00:24:34,999
API directly so they don't need a

00:24:32,240 --> 00:24:38,899
special gateway adapter in order to make

00:24:34,999 --> 00:24:40,159
them work so the things framework there

00:24:38,899 --> 00:24:42,379
are libraries in various different

00:24:40,159 --> 00:24:46,179
languages there's a Java library so you

00:24:42,379 --> 00:24:50,049
can turn Android things into web things

00:24:46,179 --> 00:24:52,779
C++ examples for Arduino type hardware

00:24:50,049 --> 00:24:53,960
there are also implementations in Python

00:24:52,779 --> 00:24:56,960
nodejs

00:24:53,960 --> 00:24:59,539
and coming soon is also a rust library

00:24:56,960 --> 00:25:01,249
as well and there's a blog post on

00:24:59,539 --> 00:25:04,279
Mozilla hacks where you can learn more

00:25:01,249 --> 00:25:06,110
about that and you can also go to RT

00:25:04,279 --> 00:25:09,529
don't mozilla.org slash things on the

00:25:06,110 --> 00:25:10,999
website to see some examples I think

00:25:09,529 --> 00:25:12,379
there's going to be another blog post

00:25:10,999 --> 00:25:14,740
going out tomorrow with some more

00:25:12,379 --> 00:25:17,210
examples by my colleague Mike

00:25:14,740 --> 00:25:19,190
so once you've built a native web thing

00:25:17,210 --> 00:25:22,309
you don't need a special adapter you can

00:25:19,190 --> 00:25:25,039
just add it to the gateway by its URL or

00:25:22,309 --> 00:25:27,889
you can scan for native web things which

00:25:25,039 --> 00:25:31,220
can broadcast their own URL by using

00:25:27,889 --> 00:25:33,799
mdns on the local network or they can

00:25:31,220 --> 00:25:36,769
even use a Bluetooth beacon to broadcast

00:25:33,799 --> 00:25:38,389
their URL so you can discover the

00:25:36,769 --> 00:25:40,009
devices that way or you can manually

00:25:38,389 --> 00:25:43,610
copy and paste that URL into this

00:25:40,009 --> 00:25:45,830
interface so just show you some examples

00:25:43,610 --> 00:25:48,080
of things that people have built so far

00:25:45,830 --> 00:25:51,590
with the framework and this is an

00:25:48,080 --> 00:25:52,610
example by my colleague James this is

00:25:51,590 --> 00:25:57,889
using the very popular

00:25:52,610 --> 00:25:59,840
SP h 266 microcontroller and annexing an

00:25:57,889 --> 00:26:02,269
example of creating a dimmable light

00:25:59,840 --> 00:26:05,000
using the onboard led and you can see

00:26:02,269 --> 00:26:07,879
how that then displays itself in the

00:26:05,000 --> 00:26:09,870
gateway because it's exposing that it

00:26:07,879 --> 00:26:16,080
web thing description

00:26:09,870 --> 00:26:18,150
API this is an example that's going to

00:26:16,080 --> 00:26:22,620
be in the blog post tomorrow of a music

00:26:18,150 --> 00:26:24,720
player which mike has created exposes a

00:26:22,620 --> 00:26:26,250
web thing description and with things

00:26:24,720 --> 00:26:28,410
API and there are going to be examples

00:26:26,250 --> 00:26:32,880
of this in different languages so Java

00:26:28,410 --> 00:26:36,120
Python and nodejs and this is a

00:26:32,880 --> 00:26:38,970
particularly fun example by Lars and

00:26:36,120 --> 00:26:40,830
this is a weather station which uses the

00:26:38,970 --> 00:26:43,050
rules engine to control different light

00:26:40,830 --> 00:26:44,640
bulbs so there's a kind of virtual

00:26:43,050 --> 00:26:46,950
weather station which measures the wind

00:26:44,640 --> 00:26:48,990
speed outside and it's there's a rule

00:26:46,950 --> 00:26:52,500
set here that says if the wind speed is

00:26:48,990 --> 00:26:55,500
greater than 5 then turn the green light

00:26:52,500 --> 00:27:01,260
on so it says kite time because there's

00:26:55,500 --> 00:27:04,410
enough wind to fly my kite ok so how can

00:27:01,260 --> 00:27:05,760
you get involved well there are three

00:27:04,410 --> 00:27:08,100
main ways that we're trying to encourage

00:27:05,760 --> 00:27:11,730
people to get involved the first way is

00:27:08,100 --> 00:27:15,990
to build your own web things using the

00:27:11,730 --> 00:27:18,420
things framework so you can go to IOT

00:27:15,990 --> 00:27:21,300
Damas org slash things to see examples

00:27:18,420 --> 00:27:22,920
the second way is to create an adapter

00:27:21,300 --> 00:27:25,920
for the things gateway to bridge an

00:27:22,920 --> 00:27:30,030
existing IOT device or protocol to the

00:27:25,920 --> 00:27:32,880
web and lastly just hacking on project

00:27:30,030 --> 00:27:35,490
things so working on at Mozilla's

00:27:32,880 --> 00:27:37,380
implementation of the web of things all

00:27:35,490 --> 00:27:39,450
the source code is on github we already

00:27:37,380 --> 00:27:42,750
have some great regular community

00:27:39,450 --> 00:27:45,450
contributors and so I'd love to see you

00:27:42,750 --> 00:27:50,790
filing issues of any bugs you find and

00:27:45,450 --> 00:27:52,920
selling pull requests so that's about

00:27:50,790 --> 00:27:54,870
everything I have today I hope that's

00:27:52,920 --> 00:27:57,240
given you an overview so that you can go

00:27:54,870 --> 00:27:59,670
out and tell other people about project

00:27:57,240 --> 00:28:03,500
things about the idea of the web of

00:27:59,670 --> 00:28:06,420
things and creating decentralized IOT

00:28:03,500 --> 00:28:11,370
you can find out more on our website at

00:28:06,420 --> 00:28:14,429
iot mozilla.org you can join us in the

00:28:11,370 --> 00:28:16,650
IOT channel on IRC you can also follow

00:28:14,429 --> 00:28:18,780
us on Twitter and a really good place to

00:28:16,650 --> 00:28:21,420
ask questions if you have any problems

00:28:18,780 --> 00:28:23,370
or you want to ask about devices are

00:28:21,420 --> 00:28:26,010
compatible and that kind of thing

00:28:23,370 --> 00:28:28,830
on the forum on discourse as the Mozilla

00:28:26,010 --> 00:28:31,380
discourse instance so yeah that's

00:28:28,830 --> 00:28:33,330
everything from me and I think time for

00:28:31,380 --> 00:28:34,740
questions awesome

00:28:33,330 --> 00:28:36,390
well thank you so much Ben we really

00:28:34,740 --> 00:28:38,640
appreciated that thorough overview I

00:28:36,390 --> 00:28:40,440
believe we do have some questions in the

00:28:38,640 --> 00:28:45,480
etherpad that have come in during your

00:28:40,440 --> 00:28:46,500
presentation so I'll start here on row

00:28:45,480 --> 00:28:50,300
00:28:46,500 --> 00:28:53,010
how many sub-domain can the dot Mozilla

00:28:50,300 --> 00:28:54,870
IOT org be used

00:28:53,010 --> 00:28:58,620
would this be free or will it be a

00:28:54,870 --> 00:29:00,480
freemium model going forward so at the

00:28:58,620 --> 00:29:03,030
moment this is completely free we have

00:29:00,480 --> 00:29:04,710
no plans of charging for it what we're

00:29:03,030 --> 00:29:09,059
really doing is setting up a tunnel from

00:29:04,710 --> 00:29:10,860
the cloud to your gateway this is an

00:29:09,059 --> 00:29:12,929
experiment this whole project is an

00:29:10,860 --> 00:29:15,600
experiment so I can't guarantee that's

00:29:12,929 --> 00:29:17,130
going to be around forever the great

00:29:15,600 --> 00:29:19,020
thing is that that tunneling services

00:29:17,130 --> 00:29:20,640
may be their convenience so you can

00:29:19,020 --> 00:29:21,780
always use your own domain in future

00:29:20,640 --> 00:29:24,090
it's not just going to stop working

00:29:21,780 --> 00:29:26,250
because it's not dependent on the cloud

00:29:24,090 --> 00:29:28,590
service to function but the domain the

00:29:26,250 --> 00:29:31,020
subdomains are free and you can have as

00:29:28,590 --> 00:29:34,130
many as you like and you get a free

00:29:31,020 --> 00:29:36,450
certificate from let's encrypt as well

00:29:34,130 --> 00:29:37,770
I'm sure there's some excitement hearing

00:29:36,450 --> 00:29:39,929
either they can have as many subdomains

00:29:37,770 --> 00:29:43,380
as they like and that question came in

00:29:39,929 --> 00:29:45,630
from Kalyan our next question is on row

00:29:43,380 --> 00:29:47,340
31 and it reads what in your opinion

00:29:45,630 --> 00:29:49,470
would be the best outcome of the

00:29:47,340 --> 00:29:53,820
standardization process for web of

00:29:49,470 --> 00:29:55,890
things that's a great question and it's

00:29:53,820 --> 00:29:57,390
a really complicated landscape out over

00:29:55,890 --> 00:29:58,980
the moment I mentioned a few of the

00:29:57,390 --> 00:30:03,600
standards bodies who are trying to

00:29:58,980 --> 00:30:06,450
define standards and ideally some of

00:30:03,600 --> 00:30:08,820
those would converge so in particularly

00:30:06,450 --> 00:30:11,730
the ocf effort which is quite far along

00:30:08,820 --> 00:30:13,230
and the w3c effort and they are already

00:30:11,730 --> 00:30:15,059
talking to each other they have regular

00:30:13,230 --> 00:30:17,630
syncs and they're also talking to the

00:30:15,059 --> 00:30:20,820
IOT schema so IOT Doc's schema.org

00:30:17,630 --> 00:30:23,010
effort as well so I'd really like to see

00:30:20,820 --> 00:30:25,530
some of those converge so that we're

00:30:23,010 --> 00:30:28,650
working towards a common protocol or at

00:30:25,530 --> 00:30:30,300
least a common data model so that those

00:30:28,650 --> 00:30:33,120
things can talk to each other so either

00:30:30,300 --> 00:30:34,890
using the same protocol or having a

00:30:33,120 --> 00:30:37,080
shared data model so that it's easy to

00:30:34,890 --> 00:30:38,400
adapt from one to the other

00:30:37,080 --> 00:30:41,610
and then hopefully we'll see some

00:30:38,400 --> 00:30:44,160
mainstream IOT platforms like kind of

00:30:41,610 --> 00:30:47,340
the ones from nest and Apple and Samsung

00:30:44,160 --> 00:30:49,050
and those adopt those standards I mean

00:30:47,340 --> 00:30:51,570
some some smart things is already a

00:30:49,050 --> 00:30:53,520
participant in that standardization

00:30:51,570 --> 00:30:56,700
process so the idea would be that we

00:30:53,520 --> 00:30:58,830
have this web standard where anyone can

00:30:56,700 --> 00:31:02,520
host their own web things they can give

00:30:58,830 --> 00:31:04,020
them URL and any web thing can talk to

00:31:02,520 --> 00:31:11,250
any other web thing that's what we would

00:31:04,020 --> 00:31:14,040
like to see absolutely action come in

00:31:11,250 --> 00:31:17,280
from hop course our next question is on

00:31:14,040 --> 00:31:22,740
row 33 how is it possible to generate

00:31:17,280 --> 00:31:27,870
the off key for making various API

00:31:22,740 --> 00:31:32,580
requests to be specific yes so and that

00:31:27,870 --> 00:31:34,350
said the JSON web token so is when it's

00:31:32,580 --> 00:31:37,230
the web interface itself that's talking

00:31:34,350 --> 00:31:39,480
to the API like it has a it uses your

00:31:37,230 --> 00:31:42,450
login you have using password the login

00:31:39,480 --> 00:31:44,730
if you want to have a third party app or

00:31:42,450 --> 00:31:48,030
service which talks to the Gateway you

00:31:44,730 --> 00:31:50,430
do that using OAuth and there's in the

00:31:48,030 --> 00:31:52,830
latest dot for release there's a kind of

00:31:50,430 --> 00:31:55,740
easy onboarding system where you can

00:31:52,830 --> 00:31:57,180
create a local I will instance first to

00:31:55,740 --> 00:31:59,340
experiment with that and you can set it

00:31:57,180 --> 00:32:02,340
up such that you it can it can hand you

00:31:59,340 --> 00:32:05,670
a token using OAuth if you want to know

00:32:02,340 --> 00:32:07,770
more about that come and ask us in IRC

00:32:05,670 --> 00:32:10,290
because my colleague James is the expert

00:32:07,770 --> 00:32:13,050
on the OAuth system and the tokens so he

00:32:10,290 --> 00:32:15,390
can tell you exactly how to use the API

00:32:13,050 --> 00:32:19,020
in that way great and what's the name of

00:32:15,390 --> 00:32:23,790
that IRC channel is IOT on IRC top

00:32:19,020 --> 00:32:26,940
mozilla.org so much all right next

00:32:23,790 --> 00:32:28,650
question is on row 35 I'm sorry about

00:32:26,940 --> 00:32:31,170
that my previous question came in from

00:32:28,650 --> 00:32:33,390
Vicki thank you so much Vicki our next

00:32:31,170 --> 00:32:36,780
question is on row 35 how do we monitor

00:32:33,390 --> 00:32:39,300
the action endpoint for example I post a

00:32:36,780 --> 00:32:41,340
request to the turn to turn on the light

00:32:39,300 --> 00:32:44,490
but how do I monitor it continuously to

00:32:41,340 --> 00:32:46,980
check if it's working or not right so

00:32:44,490 --> 00:32:50,429
there are two ways to do that so the

00:32:46,980 --> 00:32:52,619
first way is using the REST API so you

00:32:50,429 --> 00:32:55,379
question action using a post request and

00:32:52,619 --> 00:32:58,619
the response that post request gives you

00:32:55,379 --> 00:33:01,019
a URL for your action request and then

00:32:58,619 --> 00:33:03,450
you can you can poll that you can get it

00:33:01,019 --> 00:33:04,950
to get its status now that's obviously

00:33:03,450 --> 00:33:07,529
not the most efficient way of doing it

00:33:04,950 --> 00:33:10,019
so the websocket api offers a push

00:33:07,529 --> 00:33:12,600
mechanism so with the websocket api you

00:33:10,019 --> 00:33:15,179
send an action request as a message of

00:33:12,600 --> 00:33:17,279
the WebSocket and then you get action

00:33:15,179 --> 00:33:20,249
status messages pushed back to you

00:33:17,279 --> 00:33:21,869
whenever that status changes so if it's

00:33:20,249 --> 00:33:24,840
completed you get a message if it's

00:33:21,869 --> 00:33:28,470
failed you get a message and you don't

00:33:24,840 --> 00:33:29,070
have to keep pulling the server thank

00:33:28,470 --> 00:33:31,200
you so much

00:33:29,070 --> 00:33:35,659
and take your vignette water for asking

00:33:31,200 --> 00:33:38,850
that question one more word I think what

00:33:35,659 --> 00:33:46,320
monitored a board for whether things

00:33:38,850 --> 00:33:48,059
api's people are certainly working on

00:33:46,320 --> 00:33:50,340
them so one of the features we're

00:33:48,059 --> 00:33:52,529
working on an experiment for the dot

00:33:50,340 --> 00:33:55,049
five release is a time series database

00:33:52,529 --> 00:33:57,990
and having a user interface for that

00:33:55,049 --> 00:34:00,690
which provides graphs so you can graph

00:33:57,990 --> 00:34:02,309
data over time and I believe my

00:34:00,690 --> 00:34:04,230
colleague James is looking at lots of

00:34:02,309 --> 00:34:06,299
different existing time series databases

00:34:04,230 --> 00:34:09,210
you could plug into the Gateway using

00:34:06,299 --> 00:34:11,190
its API and and create all kinds of

00:34:09,210 --> 00:34:14,879
dashboards and graphs and things like

00:34:11,190 --> 00:34:17,669
that thanks so much

00:34:14,879 --> 00:34:22,619
is it possible to efficiently stream

00:34:17,669 --> 00:34:24,270
video through whether things API is we

00:34:22,619 --> 00:34:25,589
think is possible so there's a few

00:34:24,270 --> 00:34:26,819
community members who have been

00:34:25,589 --> 00:34:29,429
experimenting with that and I've

00:34:26,819 --> 00:34:34,020
actually created web things camera web

00:34:29,429 --> 00:34:36,899
things so web cam and so far I think the

00:34:34,020 --> 00:34:38,819
way that works is by providing a URL to

00:34:36,899 --> 00:34:40,589
the video stream in the thing

00:34:38,819 --> 00:34:43,980
description and then the web client

00:34:40,589 --> 00:34:46,950
directly fetches that that video stream

00:34:43,980 --> 00:34:49,379
it can be tricky because cameras use

00:34:46,950 --> 00:34:51,359
lots of different video format streaming

00:34:49,379 --> 00:34:53,730
formats container formats encoding

00:34:51,359 --> 00:34:56,520
formats and not all of them are directly

00:34:53,730 --> 00:34:58,319
compatible with the web so in a previous

00:34:56,520 --> 00:35:01,920
experiment we had a system which

00:34:58,319 --> 00:35:03,260
transcoders video but that can be pretty

00:35:01,920 --> 00:35:05,400
tough

00:35:03,260 --> 00:35:08,340
gateway hardware which isn't always that

00:35:05,400 --> 00:35:10,290
powerful so you can provide a video

00:35:08,340 --> 00:35:12,180
stream URL directly in a thing

00:35:10,290 --> 00:35:14,670
description or you can have a gateway

00:35:12,180 --> 00:35:17,070
which converts that video stream from

00:35:14,670 --> 00:35:21,930
one format into another format which is

00:35:17,070 --> 00:35:24,030
more compatible with the web thanks so

00:35:21,930 --> 00:35:26,010
much our next question is on road 39 and

00:35:24,030 --> 00:35:28,260
came in and honestly anonymously via

00:35:26,010 --> 00:35:29,910
telegram do we have any materials

00:35:28,260 --> 00:35:34,320
available to assist if we want to host

00:35:29,910 --> 00:35:36,900
our own IOT workshop sure I mean let us

00:35:34,320 --> 00:35:38,340
know what you need so there's the slides

00:35:36,900 --> 00:35:40,890
I showed you today which you're welcome

00:35:38,340 --> 00:35:44,160
to steal and mangle and do whatever you

00:35:40,890 --> 00:35:46,140
like with and my colleague Kathy does a

00:35:44,160 --> 00:35:48,090
lot of workshops all over the place she

00:35:46,140 --> 00:35:49,860
gets talks at conferences she's got a

00:35:48,090 --> 00:35:51,780
bunch of material example things that

00:35:49,860 --> 00:35:55,500
she's built another good source of

00:35:51,780 --> 00:35:57,540
examples is the hacks blog where we have

00:35:55,500 --> 00:35:59,430
fairly regular blog posts giving

00:35:57,540 --> 00:36:01,890
examples of how to build web things how

00:35:59,430 --> 00:36:03,720
to build adapters but if there's

00:36:01,890 --> 00:36:06,930
something you think is missing and that

00:36:03,720 --> 00:36:08,400
you need to run a workshop then let us

00:36:06,930 --> 00:36:13,140
know you can email as I ot at

00:36:08,400 --> 00:36:15,870
mozilla.com and we'll do a bus to help

00:36:13,140 --> 00:36:18,630
you out thank you and we'll be following

00:36:15,870 --> 00:36:20,280
up with Ben to hopefully get a link to

00:36:18,630 --> 00:36:22,530
the slides that way we can add them to

00:36:20,280 --> 00:36:23,880
our slide deck repository that we have

00:36:22,530 --> 00:36:27,570
protect speakers that's all right with

00:36:23,880 --> 00:36:30,240
you Ben and I believe there's one more

00:36:27,570 --> 00:36:32,130
question on row 43 is unsupported

00:36:30,240 --> 00:36:34,010
software a major concern for the

00:36:32,130 --> 00:36:37,470
lifespan of smart and connected devices

00:36:34,010 --> 00:36:42,330
in terms of products oh see we actually

00:36:37,470 --> 00:36:43,830
have a little bit of an answer here yeah

00:36:42,330 --> 00:36:48,630
I would you mind speaking on that for a

00:36:43,830 --> 00:36:50,670
quick moment yeah sure so um it is a

00:36:48,630 --> 00:36:53,400
huge problem I mean if you think about

00:36:50,670 --> 00:36:55,110
the lifespan of things in your home like

00:36:53,400 --> 00:36:56,960
light switches I mean how long have you

00:36:55,110 --> 00:36:59,670
had the light switch in your home and

00:36:56,960 --> 00:37:02,010
probably a much longer time span than

00:36:59,670 --> 00:37:04,560
the average software app you know is

00:37:02,010 --> 00:37:08,220
supported for so this is a big problem

00:37:04,560 --> 00:37:10,650
for IOT in general our hope by defining

00:37:08,220 --> 00:37:12,030
standards like the web of Things is that

00:37:10,650 --> 00:37:14,040
these things are going to stick around

00:37:12,030 --> 00:37:16,050
for a lot longer and even if one

00:37:14,040 --> 00:37:16,859
particular company or cloud service

00:37:16,050 --> 00:37:18,390
disappear

00:37:16,859 --> 00:37:20,640
the things aren't just gonna stop

00:37:18,390 --> 00:37:22,829
working and you should still be able to

00:37:20,640 --> 00:37:24,630
do those things you should if they can

00:37:22,829 --> 00:37:26,309
be controlled locally if they expose a

00:37:24,630 --> 00:37:28,020
standard web thing API that someone else

00:37:26,309 --> 00:37:30,779
can write an interface to it makes it

00:37:28,020 --> 00:37:33,029
much easier for those things to be

00:37:30,779 --> 00:37:34,730
useful over over a long longer period of

00:37:33,029 --> 00:37:37,559
time

00:37:34,730 --> 00:37:38,880
absolutely well I believe that's all the

00:37:37,559 --> 00:37:40,890
questions we have in the etherpad

00:37:38,880 --> 00:37:43,760
hobby unless you have any questions come

00:37:40,890 --> 00:37:46,770
in over telegram to you personally I

00:37:43,760 --> 00:37:50,220
have not seen any additional questions

00:37:46,770 --> 00:37:52,829
so I think we're good I did I added some

00:37:50,220 --> 00:37:56,819
of the links that Ben was talking about

00:37:52,829 --> 00:38:02,720
out into the ether pad and tune in

00:37:56,819 --> 00:38:08,039
tomorrow roughly 8 a.m. Pacific or 5

00:38:02,720 --> 00:38:09,630
notes or PM 4 or 5 UTC in your evening

00:38:08,039 --> 00:38:14,099
at dinner tomorrow night you can read

00:38:09,630 --> 00:38:17,039
the next episode in the things framework

00:38:14,099 --> 00:38:19,079
collection so yeah very good thanks

00:38:17,039 --> 00:38:20,579
absolutely well thank you so much Ben

00:38:19,079 --> 00:38:22,440
for joining us today and providing us

00:38:20,579 --> 00:38:24,240
with the thoroughly thorough explanation

00:38:22,440 --> 00:38:25,980
of web of things we would really very

00:38:24,240 --> 00:38:28,799
much look forward to it and thank you so

00:38:25,980 --> 00:38:31,260
much thanks very much for having me I'm

00:38:28,799 --> 00:38:36,049
pleased you join us on IRC if you have

00:38:31,260 --> 00:38:39,150
any more questions and I will be getting

00:38:36,049 --> 00:38:42,660
getting us some captions for this

00:38:39,150 --> 00:38:45,750
recording and at that time I usually

00:38:42,660 --> 00:38:49,230
post the recording the briefings up to

00:38:45,750 --> 00:38:51,630
YouTube so for folks who have an easier

00:38:49,230 --> 00:38:53,880
time accessing YouTube and for you to

00:38:51,630 --> 00:39:04,190
share more widely Ben I'll be sharing

00:38:53,880 --> 00:39:04,190

YouTube URL: https://www.youtube.com/watch?v=ZXEZkqnT-6o


