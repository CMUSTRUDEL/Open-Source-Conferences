Title: Introducing AV1 and Open Video Codecs
Publication date: 2018-04-16
Playlist: Mozilla Tech Speakers
Description: 
	AOMedia Video 1 (AV1), is an open, royalty-free video encoding format designed for video transmissions over the Internet - now officially released! 

Nathan Egge and Michael Bebenita explain.
Slides: http://goo.gl/7TMxUX

This is a major milestone marking Mozilla's three years of effort as a founding member of the Alliance for Open Media, and a win for open source coalitions for non-proprietary codecs.
Captions: 
	00:00:07,189 --> 00:00:14,270
hello everyone will come to our tech

00:00:10,290 --> 00:00:17,970
briefing today so we have got me and

00:00:14,270 --> 00:00:22,860
javi and we have two guests today from

00:00:17,970 --> 00:00:26,730
Mozilla research team Nathan egg eggy

00:00:22,860 --> 00:00:28,980
and and Michael Bay Bonita so they have

00:00:26,730 --> 00:00:32,730
been with Xion for a long time ago and

00:00:28,980 --> 00:00:35,789
they are here today to share or to

00:00:32,730 --> 00:00:41,940
introduce the AV a 1 and the opens the

00:00:35,789 --> 00:00:44,069
open video codecs project so they will

00:00:41,940 --> 00:00:47,789
start the presentation and after that we

00:00:44,069 --> 00:00:50,159
will get a lot of some questions from

00:00:47,789 --> 00:00:53,550
the tech speaker channel and from the

00:00:50,159 --> 00:00:57,870
etherpad and maybe we will have the

00:00:53,550 --> 00:00:59,519
little discussion after so Nathan

00:00:57,870 --> 00:01:02,850
whenever you are ready you can just

00:00:59,519 --> 00:01:04,440
start okay great yeah thank you

00:01:02,850 --> 00:01:07,890
so yeah I'll be talking to you about the

00:01:04,440 --> 00:01:09,240
AV 1 video codec so Mozilla you know

00:01:07,890 --> 00:01:11,399
we've shipped the Firefox web browser

00:01:09,240 --> 00:01:12,329
but we also do a bunch of work in open

00:01:11,399 --> 00:01:14,189
standards where we go to different

00:01:12,329 --> 00:01:16,710
standards bodies and advocate for

00:01:14,189 --> 00:01:20,159
royalty-free open standards are

00:01:16,710 --> 00:01:21,270
accessible to all and that includes some

00:01:20,159 --> 00:01:23,039
of the work that we're doing on on

00:01:21,270 --> 00:01:25,340
codecs which falls under this mozilla

00:01:23,039 --> 00:01:27,780
researcher emerging technologies group

00:01:25,340 --> 00:01:30,899
so to kind of frame the the problem

00:01:27,780 --> 00:01:33,509
currently in North America about 70% of

00:01:30,899 --> 00:01:37,259
all Internet traffic is video or audio

00:01:33,509 --> 00:01:39,810
streams that was done that was taken

00:01:37,259 --> 00:01:41,310
from a study in around 2015 there's been

00:01:39,810 --> 00:01:43,500
a more recent study that came out last

00:01:41,310 --> 00:01:45,240
year from Cisco that estimates that that

00:01:43,500 --> 00:01:49,560
amount will probably go up to 82 percent

00:01:45,240 --> 00:01:51,179
or higher by 2021 interestingly they

00:01:49,560 --> 00:01:53,249
actually projected all Internet traffic

00:01:51,179 --> 00:01:55,170
will go up on average about 25 or 30

00:01:53,249 --> 00:01:57,299
percent in that time period so we're not

00:01:55,170 --> 00:01:58,439
not talking about a small gain of a few

00:01:57,299 --> 00:02:00,469
percent here we're talking about a

00:01:58,439 --> 00:02:02,819
massive amount of additional content in

00:02:00,469 --> 00:02:04,829
video and that's mostly due to the fact

00:02:02,819 --> 00:02:07,469
that we're expecting to see people pick

00:02:04,829 --> 00:02:10,860
up for k8k streams 10-bit video or

00:02:07,469 --> 00:02:12,360
high-definition video so it give you

00:02:10,860 --> 00:02:14,820
kind of a history of Mozilla and

00:02:12,360 --> 00:02:16,560
royalty-free codecs there's a long long

00:02:14,820 --> 00:02:17,940
history there and in fact many of the

00:02:16,560 --> 00:02:19,230
people working at Mozilla

00:02:17,940 --> 00:02:21,120
in this space were part of this if that

00:02:19,230 --> 00:02:22,590
org Foundation and I've been doing this

00:02:21,120 --> 00:02:23,130
work since the early or since the late

00:02:22,590 --> 00:02:25,410
90s

00:02:23,130 --> 00:02:28,620
so in terms of our work with with

00:02:25,410 --> 00:02:31,220
royalty-free codex there was the opus

00:02:28,620 --> 00:02:34,740
audio codec which worked began in 2007

00:02:31,220 --> 00:02:37,020
based on a high definition the original

00:02:34,740 --> 00:02:40,800
idea was to have this high quality low

00:02:37,020 --> 00:02:42,720
latency music codec originally these

00:02:40,800 --> 00:02:44,190
though like the the use case we were

00:02:42,720 --> 00:02:45,330
looking at was doing distributed

00:02:44,190 --> 00:02:47,070
performance we had people in different

00:02:45,330 --> 00:02:49,770
geographic locations who want to play

00:02:47,070 --> 00:02:52,860
music musical instruments live and have

00:02:49,770 --> 00:02:54,450
a like a distributed concert so this

00:02:52,860 --> 00:02:55,950
video codec was developed there we took

00:02:54,450 --> 00:02:57,720
it to the IETF with the idea of

00:02:55,950 --> 00:03:00,960
standardizing it and at the same time

00:02:57,720 --> 00:03:02,700
sort of Skype came to the IETF with this

00:03:00,960 --> 00:03:05,850
high quality speech codec they had and

00:03:02,700 --> 00:03:08,790
it was sort of a you know low low

00:03:05,850 --> 00:03:09,990
bandwidth speech only codec and the IETF

00:03:08,790 --> 00:03:11,250
asked us you know couldn't you guys

00:03:09,990 --> 00:03:13,320
figure out how to how to join these

00:03:11,250 --> 00:03:14,640
together and make one one standard and

00:03:13,320 --> 00:03:16,530
so that's how hopeless was born through

00:03:14,640 --> 00:03:19,890
this collaboration it was published at

00:03:16,530 --> 00:03:21,780
the ITF and if you you know if you look

00:03:19,890 --> 00:03:25,140
at the like the Barossa of use cases it

00:03:21,780 --> 00:03:26,959
can go from very low low bandwidth low

00:03:25,140 --> 00:03:29,820
quality voice all the way up to like

00:03:26,959 --> 00:03:32,370
stereo high quality music and in fact

00:03:29,820 --> 00:03:33,510
for all use cases out there today if you

00:03:32,370 --> 00:03:34,770
were starting a new project you want to

00:03:33,510 --> 00:03:36,239
begin with opus just because it's so

00:03:34,770 --> 00:03:38,220
broad and covers everything so this is a

00:03:36,239 --> 00:03:40,350
great success story I'm at the end of

00:03:38,220 --> 00:03:41,190
that process someone from the ITF said

00:03:40,350 --> 00:03:42,750
well you know that's nice you did this

00:03:41,190 --> 00:03:45,030
for audio but it's impossible to do the

00:03:42,750 --> 00:03:47,760
same thing for video the IP landscape is

00:03:45,030 --> 00:03:49,080
is too complicated and so we decided you

00:03:47,760 --> 00:03:51,150
know okay great well let's take a look

00:03:49,080 --> 00:03:53,459
at the video space and I was only

00:03:51,150 --> 00:03:55,160
created the doll project to look at

00:03:53,459 --> 00:03:58,500
doing sort of tough something similar

00:03:55,160 --> 00:04:01,260
that we did with opus for video and and

00:03:58,500 --> 00:04:03,239
here the idea was to sort of be

00:04:01,260 --> 00:04:05,040
royalty-free by design so we took all

00:04:03,239 --> 00:04:06,720
the kind of common areas that are done

00:04:05,040 --> 00:04:08,550
for video compression and if I do

00:04:06,720 --> 00:04:10,680
something radically different so we had

00:04:08,550 --> 00:04:12,870
a bunch of interesting experimental

00:04:10,680 --> 00:04:14,459
ideas that the knowing had ever tried

00:04:12,870 --> 00:04:17,070
before and part of the research

00:04:14,459 --> 00:04:18,419
challenge there was making them work we

00:04:17,070 --> 00:04:20,400
brought this to the IETF and we're able

00:04:18,419 --> 00:04:22,770
to form this net BC working group and at

00:04:20,400 --> 00:04:25,560
the same time that kind of similar story

00:04:22,770 --> 00:04:28,950
Cisco had this for video codec which was

00:04:25,560 --> 00:04:31,200
great for for video conferencing whereas

00:04:28,950 --> 00:04:32,170
dala was sort of targeting for video on

00:04:31,200 --> 00:04:34,210
demand and three

00:04:32,170 --> 00:04:35,530
and so we're gonna kind of make the best

00:04:34,210 --> 00:04:37,780
so you take the best of these two these

00:04:35,530 --> 00:04:42,040
two products a little bit later in the

00:04:37,780 --> 00:04:43,990
year the licensing terms were coming out

00:04:42,040 --> 00:04:45,580
for HTV see and a lot of people were

00:04:43,990 --> 00:04:48,070
recognizing that this royalty-free video

00:04:45,580 --> 00:04:49,360
was a big problem and so the the

00:04:48,070 --> 00:04:51,970
Alliance were open media was formed in

00:04:49,360 --> 00:04:54,580
the fall 2015 and our idea was to

00:04:51,970 --> 00:04:55,960
contribute a dollar to that so let's

00:04:54,580 --> 00:04:58,240
talk about the Alliance for open media I

00:04:55,960 --> 00:05:00,400
had a couple there's a couple goals for

00:04:58,240 --> 00:05:02,770
the Alliance the first is to produce

00:05:00,400 --> 00:05:05,830
this video for a broad set of use cases

00:05:02,770 --> 00:05:08,200
so the idea is to handle both video on

00:05:05,830 --> 00:05:13,150
demand and streaming as well as video

00:05:08,200 --> 00:05:14,560
conferencing screen sharing video game

00:05:13,150 --> 00:05:16,480
streaming which is different from screen

00:05:14,560 --> 00:05:18,280
sharing and broadcast which has a

00:05:16,480 --> 00:05:20,140
different set of constraints the idea

00:05:18,280 --> 00:05:23,680
was to be open source and royalty free

00:05:20,140 --> 00:05:25,960
and with wide adoption and broadly

00:05:23,680 --> 00:05:27,670
supported but most important we were

00:05:25,960 --> 00:05:29,170
targeting 30% better compression than

00:05:27,670 --> 00:05:31,630
the current generation of video codecs

00:05:29,170 --> 00:05:34,900
and by this we mean at the time bp9 and

00:05:31,630 --> 00:05:37,510
HTV see alright so who's in the Alliance

00:05:34,900 --> 00:05:39,670
so when we first formed the Alliance in

00:05:37,510 --> 00:05:42,250
the fall of 2015 we had eight founding

00:05:39,670 --> 00:05:44,730
members now they're a lot more these

00:05:42,250 --> 00:05:50,160
members include hardware companies

00:05:44,730 --> 00:05:53,560
software companies content producers

00:05:50,160 --> 00:05:55,930
companies extreme content companies do

00:05:53,560 --> 00:05:57,970
real-time conferencing and browser

00:05:55,930 --> 00:06:01,180
vendors and what's really important here

00:05:57,970 --> 00:06:03,820
is that Apple joined the Alliance in

00:06:01,180 --> 00:06:05,970
late December early January and that

00:06:03,820 --> 00:06:08,320
meant that now all four browser vendors

00:06:05,970 --> 00:06:10,810
our party alliance and are committed to

00:06:08,320 --> 00:06:13,000
shipping 81 in some form shortly after

00:06:10,810 --> 00:06:14,800
the the bitstream is finalized this is

00:06:13,000 --> 00:06:15,340
great for for open open web and open

00:06:14,800 --> 00:06:17,650
standards

00:06:15,340 --> 00:06:19,060
it will certainly if you've been any

00:06:17,650 --> 00:06:21,160
been part of any of the standardization

00:06:19,060 --> 00:06:22,330
process for other sort of video related

00:06:21,160 --> 00:06:24,040
things on the internet you'll know that

00:06:22,330 --> 00:06:26,560
there's been a lot of issue around

00:06:24,040 --> 00:06:27,970
getting consensus for you know what's

00:06:26,560 --> 00:06:30,160
the what's the mandatory implement codec

00:06:27,970 --> 00:06:32,230
for say WebRTC like we don't have one we

00:06:30,160 --> 00:06:33,520
have to because people couldn't come to

00:06:32,230 --> 00:06:35,380
an agreement so now that we have all the

00:06:33,520 --> 00:06:37,480
browser vendors on board here we think

00:06:35,380 --> 00:06:39,760
that'll help drive the use of this high

00:06:37,480 --> 00:06:42,970
quality video compression technology and

00:06:39,760 --> 00:06:45,400
create new products so let me give you a

00:06:42,970 --> 00:06:45,790
sort of a high-level overview of what

00:06:45,400 --> 00:06:48,880
codecs

00:06:45,790 --> 00:06:50,230
look like so most I can see some

00:06:48,880 --> 00:06:51,310
comments in most video codecs if you

00:06:50,230 --> 00:06:52,630
were to look at them they've got these

00:06:51,310 --> 00:06:55,360
sort of broad categories right you'll

00:06:52,630 --> 00:06:56,530
have this prediction stage you'll take

00:06:55,360 --> 00:06:58,420
the output of prediction you'll go

00:06:56,530 --> 00:06:59,770
through this transform stage and you'll

00:06:58,420 --> 00:07:01,600
take the out for the transforms and

00:06:59,770 --> 00:07:03,850
you'll do some quantization and then

00:07:01,600 --> 00:07:04,780
you'll take take the data from causation

00:07:03,850 --> 00:07:06,340
and you'll do some kind of entropy

00:07:04,780 --> 00:07:09,430
coding and they all kind of have this

00:07:06,340 --> 00:07:11,500
this flow when you talk about like where

00:07:09,430 --> 00:07:14,410
compression comes from in video codecs

00:07:11,500 --> 00:07:16,270
it comes from mainly two places what the

00:07:14,410 --> 00:07:19,990
first place is prediction so if you were

00:07:16,270 --> 00:07:21,460
to compare like two adjacent frames the

00:07:19,990 --> 00:07:23,200
second frame you know if you're in this

00:07:21,460 --> 00:07:24,670
video stream like that the next frame is

00:07:23,200 --> 00:07:26,080
like gonna look very similar to the

00:07:24,670 --> 00:07:27,700
previous frame and so the idea is if we

00:07:26,080 --> 00:07:29,740
use that as a predictor we can remove a

00:07:27,700 --> 00:07:31,120
lot of redundant information in the

00:07:29,740 --> 00:07:33,130
other place we get sort of high

00:07:31,120 --> 00:07:35,230
compression gainers to quantization when

00:07:33,130 --> 00:07:36,430
we do this transform step we kind of

00:07:35,230 --> 00:07:37,840
compact all the energy into these

00:07:36,430 --> 00:07:39,940
smaller coefficients or these lower

00:07:37,840 --> 00:07:41,380
frequency coefficients and all the high

00:07:39,940 --> 00:07:43,420
frequency ones who can just set to zero

00:07:41,380 --> 00:07:45,670
and you maybe you'll miss some some like

00:07:43,420 --> 00:07:46,960
nice detail in the image but you'll

00:07:45,670 --> 00:07:49,120
generally see the whole image and you

00:07:46,960 --> 00:07:51,130
know this is really clear on say video

00:07:49,120 --> 00:07:52,960
streams where they suddenly like cuts to

00:07:51,130 --> 00:07:54,150
a very blocky image that's that's where

00:07:52,960 --> 00:07:56,620
all the high frequencies have been lost

00:07:54,150 --> 00:07:59,590
so one of the things you can do to to

00:07:56,620 --> 00:08:01,780
compensate for the artifacts are

00:07:59,590 --> 00:08:04,690
introduced through this quantization

00:08:01,780 --> 00:08:06,690
step is to add a loop filter and the

00:08:04,690 --> 00:08:08,860
idea here is that after the decoder has

00:08:06,690 --> 00:08:10,540
reconstructed this frame and it has all

00:08:08,860 --> 00:08:11,920
these artifacts in it it can run this

00:08:10,540 --> 00:08:14,560
post-processing filter that kind of

00:08:11,920 --> 00:08:17,110
smoothes out those artifacts when that

00:08:14,560 --> 00:08:18,820
filters done when that field was applied

00:08:17,110 --> 00:08:20,440
to the frame before it's used again for

00:08:18,820 --> 00:08:22,510
prediction we call that an in loop

00:08:20,440 --> 00:08:24,520
filter and that becomes like a normative

00:08:22,510 --> 00:08:26,410
part of the stack this back if it were

00:08:24,520 --> 00:08:27,820
done if we're done afterward just for

00:08:26,410 --> 00:08:30,280
displaying it wouldn't be part of the

00:08:27,820 --> 00:08:31,510
the normative part of the spec and you

00:08:30,280 --> 00:08:32,650
wouldn't get as good compression games

00:08:31,510 --> 00:08:33,970
right like having it as part of this in

00:08:32,650 --> 00:08:35,140
loop filter it's more expensive but it

00:08:33,970 --> 00:08:38,020
means you get you get better gains

00:08:35,140 --> 00:08:41,530
that's generally what all kind of video

00:08:38,020 --> 00:08:43,419
compression codecs look like these are

00:08:41,530 --> 00:08:45,310
the coding tools that are in 81 to kind

00:08:43,419 --> 00:08:47,290
of give you more details so I won't go

00:08:45,310 --> 00:08:49,810
into all of these um if you were to

00:08:47,290 --> 00:08:53,290
compare if you wanted to say

00:08:49,810 --> 00:08:54,960
vp9 or htpc you would look and say that

00:08:53,290 --> 00:08:56,920
okay well you've taken sort of the

00:08:54,960 --> 00:08:58,090
standard tools that we have and you've

00:08:56,920 --> 00:08:59,649
made them better right so instead of

00:08:58,090 --> 00:09:01,269
having you

00:08:59,649 --> 00:09:03,249
eight by eight or sixteen by sixteen

00:09:01,269 --> 00:09:04,509
blocks we have on there twenty-five

00:09:03,249 --> 00:09:06,069
hundred twenty blocks so we have a

00:09:04,509 --> 00:09:08,019
bigger area with which we can predict

00:09:06,069 --> 00:09:10,509
over that that's gonna be great for 4k

00:09:08,019 --> 00:09:12,249
and 8k content we've got rectangular

00:09:10,509 --> 00:09:15,040
blocks and so if you think of you know

00:09:12,249 --> 00:09:17,050
an image or a scene that has sort of

00:09:15,040 --> 00:09:19,990
detail that's a long sort of vertical

00:09:17,050 --> 00:09:20,829
and you know short edges like having

00:09:19,990 --> 00:09:21,670
these rectangle blocks means it

00:09:20,829 --> 00:09:25,029
compresses better

00:09:21,670 --> 00:09:26,529
we've got more transforms so we now have

00:09:25,029 --> 00:09:27,910
up to 16 different transform types and

00:09:26,529 --> 00:09:30,689
again that helps us to just match

00:09:27,910 --> 00:09:32,829
content better and infer for the sort of

00:09:30,689 --> 00:09:35,290
sort of newer innovative things like

00:09:32,829 --> 00:09:37,360
we've got a larger set of intra

00:09:35,290 --> 00:09:39,339
prediction modes we've got something

00:09:37,360 --> 00:09:40,990
called you know chroma from luma which

00:09:39,339 --> 00:09:42,429
is a technology that came from Saleh

00:09:40,990 --> 00:09:44,769
we've got interblock copy a bunch of

00:09:42,429 --> 00:09:47,160
things are kind of innovative and we've

00:09:44,769 --> 00:09:49,779
got a bunch of new loop filtering

00:09:47,160 --> 00:09:51,639
techniques like I mentioned earlier that

00:09:49,779 --> 00:09:54,879
are they're somewhat innovative so if

00:09:51,639 --> 00:09:56,829
you take this um this list here the ones

00:09:54,879 --> 00:09:58,209
that are in black are the ones that were

00:09:56,829 --> 00:09:58,629
part of the crazy things we tried for

00:09:58,209 --> 00:10:01,779
Dola

00:09:58,629 --> 00:10:02,619
and were able to port over to 281 i'm

00:10:01,779 --> 00:10:05,170
going to talk about them a little bit

00:10:02,619 --> 00:10:09,160
more later but first let's look at how

00:10:05,170 --> 00:10:13,480
these fit into the diagram I showed

00:10:09,160 --> 00:10:15,160
before so of these five blocks that kind

00:10:13,480 --> 00:10:16,569
of make a video coding we were actually

00:10:15,160 --> 00:10:19,779
had technology from Donald and we tried

00:10:16,569 --> 00:10:21,730
to contribute to 81 in all of them so we

00:10:19,779 --> 00:10:24,220
had a chroma from luma inch predictor

00:10:21,730 --> 00:10:26,170
for prediction which is a special entry

00:10:24,220 --> 00:10:28,059
mode we had this doll transforms which

00:10:26,170 --> 00:10:31,389
were sort of um a high-efficiency

00:10:28,059 --> 00:10:32,980
transform we had this PDQ conversation

00:10:31,389 --> 00:10:34,329
and if you've been following me the doll

00:10:32,980 --> 00:10:36,160
development that's one of the things

00:10:34,329 --> 00:10:37,420
that sort of unique to dalla and got a

00:10:36,160 --> 00:10:39,279
lot of accolades when we published a

00:10:37,420 --> 00:10:41,620
bunch of limited conferences and got

00:10:39,279 --> 00:10:43,629
some academic review on it we have a

00:10:41,620 --> 00:10:45,429
multi symbol entropy coding coder which

00:10:43,629 --> 00:10:47,199
is different from other video codecs

00:10:45,429 --> 00:10:49,809
what's actually very similar to the one

00:10:47,199 --> 00:10:51,490
that we used in opus 2 big success so

00:10:49,809 --> 00:10:52,899
that's actually I'll talk about that

00:10:51,490 --> 00:10:54,670
more give you more details here but

00:10:52,899 --> 00:10:58,029
that's that's a something that we

00:10:54,670 --> 00:10:59,350
thought would be a big win for video and

00:10:58,029 --> 00:11:00,910
then we have this constrain directional

00:10:59,350 --> 00:11:03,959
enhancement filter which is which is a

00:11:00,910 --> 00:11:06,189
port of the filter that was used in dala

00:11:03,959 --> 00:11:08,170
so I'll give a little more detail about

00:11:06,189 --> 00:11:10,149
these different techniques Oh stupid as

00:11:08,170 --> 00:11:13,000
a point so the the Dallas TX and the pbq

00:11:10,149 --> 00:11:14,950
even though we put those into 81 and

00:11:13,000 --> 00:11:16,780
showed great promise ultimately this was

00:11:14,950 --> 00:11:18,220
a you know decision by consensus right

00:11:16,780 --> 00:11:20,110
we had 33 different member companies

00:11:18,220 --> 00:11:21,730
coming into agreement and so those those

00:11:20,110 --> 00:11:23,620
didn't make it into the final eighty-one

00:11:21,730 --> 00:11:24,610
spec but they did show promising that

00:11:23,620 --> 00:11:27,910
you will show up again at some other

00:11:24,610 --> 00:11:29,620
future codec alright so I'm just gonna

00:11:27,910 --> 00:11:31,690
go through some of these things to give

00:11:29,620 --> 00:11:32,770
you a flavor for why we contributed

00:11:31,690 --> 00:11:34,060
these technologists and why you should

00:11:32,770 --> 00:11:36,280
be excited there in 81 and how they're

00:11:34,060 --> 00:11:38,890
gonna improve it so this multi symbol HP

00:11:36,280 --> 00:11:42,430
coder is a way to take an alphabet of

00:11:38,890 --> 00:11:43,540
symbols like typically you and you do

00:11:42,430 --> 00:11:44,800
your HP coding you break things and a

00:11:43,540 --> 00:11:45,880
bunch of binary symbols and you code

00:11:44,800 --> 00:11:47,530
these ones and zeros with some

00:11:45,880 --> 00:11:49,660
probability what we've done is we've

00:11:47,530 --> 00:11:52,060
kind of grouped them together to form

00:11:49,660 --> 00:11:53,590
alphabets instead of alphabets of two

00:11:52,060 --> 00:11:56,110
symbols or alphabets of up to sixteen

00:11:53,590 --> 00:11:59,440
symbols the reason this is an

00:11:56,110 --> 00:12:01,390
improvement in 81 is that we can more

00:11:59,440 --> 00:12:04,240
accurately predict those symbols and we

00:12:01,390 --> 00:12:05,920
also get a benefit from being able to

00:12:04,240 --> 00:12:08,590
clock more information through our

00:12:05,920 --> 00:12:11,230
entropy coder at at lower frequencies so

00:12:08,590 --> 00:12:13,930
if you're decoding some decoding ab1 in

00:12:11,230 --> 00:12:15,010
hardware and you have to clock symbols

00:12:13,930 --> 00:12:16,150
through if each symbol has more

00:12:15,010 --> 00:12:19,089
information in that you can actually

00:12:16,150 --> 00:12:21,670
handle higher bit rates with the same

00:12:19,089 --> 00:12:24,390
same frequency hardware so that was

00:12:21,670 --> 00:12:26,680
really important for the hardware story

00:12:24,390 --> 00:12:28,270
we also have this chroma from intro a

00:12:26,680 --> 00:12:30,670
chroma from luma inch predictor which is

00:12:28,270 --> 00:12:33,730
another thing that came from dolla this

00:12:30,670 --> 00:12:36,040
is a really fascinating technique the

00:12:33,730 --> 00:12:38,380
idea with most inch predictors is you'll

00:12:36,040 --> 00:12:40,089
take your block and you'll see you're

00:12:38,380 --> 00:12:41,800
currently looking at and you look around

00:12:40,089 --> 00:12:44,800
it and you'll sort of pick a direction

00:12:41,800 --> 00:12:46,060
to report every content across it was

00:12:44,800 --> 00:12:47,950
you know on the left or top of that

00:12:46,060 --> 00:12:49,150
block across the block and use that as

00:12:47,950 --> 00:12:51,670
your predictor and so this does really

00:12:49,150 --> 00:12:54,430
well for straight edges you know like

00:12:51,670 --> 00:12:55,750
the branch here in this picture or the

00:12:54,430 --> 00:12:57,670
border of your of your window when

00:12:55,750 --> 00:12:59,560
you're doing screen to screen content it

00:12:57,670 --> 00:13:01,810
doesn't do really well for for curved

00:12:59,560 --> 00:13:04,330
images or like the Chrome on the on the

00:13:01,810 --> 00:13:05,770
window border and so what this intro is

00:13:04,330 --> 00:13:07,980
coming from luma each predictor does is

00:13:05,770 --> 00:13:10,930
it basically just takes the the luma

00:13:07,980 --> 00:13:13,210
content that you decoded which is the

00:13:10,930 --> 00:13:15,100
grayscale version of the block and just

00:13:13,210 --> 00:13:17,589
multiplies it by a number and that

00:13:15,100 --> 00:13:19,180
becomes the chroma component and so this

00:13:17,589 --> 00:13:21,490
does a really great job for doing

00:13:19,180 --> 00:13:23,140
prediction of curved regions and other

00:13:21,490 --> 00:13:25,510
areas where you can't predict very well

00:13:23,140 --> 00:13:26,470
oh it's like in particular fast motion

00:13:25,510 --> 00:13:26,710
right so you're already going to decode

00:13:26,470 --> 00:13:28,330
the

00:13:26,710 --> 00:13:30,580
the luma and now you can get the chroma

00:13:28,330 --> 00:13:34,180
you know get a chroma like an accurate

00:13:30,580 --> 00:13:36,520
chroma predictor just from the luma and

00:13:34,180 --> 00:13:38,890
then the final one is this constrained

00:13:36,520 --> 00:13:41,080
directional enhancement filter and so

00:13:38,890 --> 00:13:43,510
this is a combination of two experiments

00:13:41,080 --> 00:13:45,640
in a v1 the first being the stolid II

00:13:43,510 --> 00:13:49,330
ringing filter which was a directional

00:13:45,640 --> 00:13:50,589
filter we created in dolla to take care

00:13:49,330 --> 00:13:53,860
of the ringing artifacts I talked about

00:13:50,589 --> 00:13:56,110
earlier dalla had a lap transform which

00:13:53,860 --> 00:13:57,459
was a sort of novel transform that was

00:13:56,110 --> 00:13:58,930
they would have had a much larger

00:13:57,459 --> 00:14:01,540
spatial extent and that meant that when

00:13:58,930 --> 00:14:02,920
you did heavy quantization you ended up

00:14:01,540 --> 00:14:04,540
producing these ringing artifacts that

00:14:02,920 --> 00:14:06,250
kind of like extended much farther than

00:14:04,540 --> 00:14:09,209
other codecs and so we created this

00:14:06,250 --> 00:14:11,890
directional D ringing filter as a way to

00:14:09,209 --> 00:14:14,080
you know minimize the the visual

00:14:11,890 --> 00:14:16,330
artifacts it showed up turns out it

00:14:14,080 --> 00:14:20,110
worked really well for other codecs so

00:14:16,330 --> 00:14:21,850
we we presented that to the codec

00:14:20,110 --> 00:14:23,950
working group but at the same time Thor

00:14:21,850 --> 00:14:27,910
had this constrained low-pass filter

00:14:23,950 --> 00:14:28,870
which was a low complexity in loop

00:14:27,910 --> 00:14:30,850
filter that did sort of something

00:14:28,870 --> 00:14:32,770
similar to to what the de-rating filter

00:14:30,850 --> 00:14:34,930
did tried to find you know pixels that

00:14:32,770 --> 00:14:36,430
were not matching the local environment

00:14:34,930 --> 00:14:38,470
and then just clamped them so that they

00:14:36,430 --> 00:14:39,910
match the local environment and we found

00:14:38,470 --> 00:14:41,230
a way just like with opus where we

00:14:39,910 --> 00:14:42,490
collaborated we found a way to merge

00:14:41,230 --> 00:14:44,230
these two and create something that

00:14:42,490 --> 00:14:45,880
actually performed better than either

00:14:44,230 --> 00:14:50,160
one individually so we would run a test

00:14:45,880 --> 00:14:53,410
with the d-ring filter a test with the C

00:14:50,160 --> 00:14:54,970
CLP F and then if you ran you know

00:14:53,410 --> 00:14:56,800
Ramsey def it would be better than each

00:14:54,970 --> 00:14:58,450
one of them individually and each one of

00:14:56,800 --> 00:15:02,339
them in sequence so it actually was a

00:14:58,450 --> 00:15:04,360
great win all right

00:15:02,339 --> 00:15:06,730
the next thing I want to talk about is

00:15:04,360 --> 00:15:08,140
the results so you know how well are we

00:15:06,730 --> 00:15:11,230
doing I told you at the beginning that

00:15:08,140 --> 00:15:14,440
our goal was to hit 30% bitrate target

00:15:11,230 --> 00:15:15,490
and our numbers showed that we were

00:15:14,440 --> 00:15:16,930
getting there but it's always better to

00:15:15,490 --> 00:15:18,430
look at what a third-party says so

00:15:16,930 --> 00:15:19,860
here's a study from Moscow State

00:15:18,430 --> 00:15:22,180
University that was published in January

00:15:19,860 --> 00:15:24,070
they took a version of the codec from

00:15:22,180 --> 00:15:26,740
from June of last year and then they

00:15:24,070 --> 00:15:30,910
compared it to two different codecs they

00:15:26,740 --> 00:15:35,740
compared it to actually 44 codecs they

00:15:30,910 --> 00:15:37,990
clear it's a it's a x264 to the 265 to

00:15:35,740 --> 00:15:39,339
vp9 and then an 81 and they found that

00:15:37,990 --> 00:15:40,240
if you look on the right side of this

00:15:39,339 --> 00:15:42,490
graph

00:15:40,240 --> 00:15:45,339
the 264 class of codex that's what the

00:15:42,490 --> 00:15:46,540
100 cent is they all have they all show

00:15:45,339 --> 00:15:47,529
you know some compression games and

00:15:46,540 --> 00:15:50,620
there's this sort of significant

00:15:47,529 --> 00:15:52,390
drop-off as you move from 264 to 265 and

00:15:50,620 --> 00:15:54,970
then again if you were to if you were to

00:15:52,390 --> 00:15:58,080
follow that down you know vp9 actually

00:15:54,970 --> 00:16:01,420
it's better than 265 at all different

00:15:58,080 --> 00:16:03,430
encoding options with the exception of

00:16:01,420 --> 00:16:05,110
these placebo modes which are these sort

00:16:03,430 --> 00:16:07,959
of you know modes you never use that try

00:16:05,110 --> 00:16:09,790
driven exhaustive search so vp9 actually

00:16:07,959 --> 00:16:11,140
is a little bit better than 265 for most

00:16:09,790 --> 00:16:13,209
cases except for this sort of video

00:16:11,140 --> 00:16:15,220
on-demand case and then again you see

00:16:13,209 --> 00:16:17,410
this sort of drop-off as you go and look

00:16:15,220 --> 00:16:19,209
at 81 which is nice because it sort of

00:16:17,410 --> 00:16:22,000
proves that this approach we're taking

00:16:19,209 --> 00:16:24,550
of sort of bringing all this technology

00:16:22,000 --> 00:16:25,959
is in fact kind of a generational

00:16:24,550 --> 00:16:28,240
improvement over the current state of

00:16:25,959 --> 00:16:33,550
the art and and you know the results

00:16:28,240 --> 00:16:35,950
show about about thirty percent just to

00:16:33,550 --> 00:16:37,029
kind of give you an idea for what the

00:16:35,950 --> 00:16:38,080
history of development looked like

00:16:37,029 --> 00:16:41,350
because this is something you don't

00:16:38,080 --> 00:16:42,730
typically get a picture for you sort of

00:16:41,350 --> 00:16:44,740
see at the end like how well did we do

00:16:42,730 --> 00:16:46,690
as a codec well over time this this sort

00:16:44,740 --> 00:16:48,760
of this graph here shows over time you

00:16:46,690 --> 00:16:51,130
know how our compression performance

00:16:48,760 --> 00:16:54,130
improved given a baseline at a v1 back

00:16:51,130 --> 00:16:55,779
in July of 2016 and so you can sort of

00:16:54,130 --> 00:16:56,740
see you know as we're adding more and

00:16:55,779 --> 00:16:58,589
more things we're getting better and

00:16:56,740 --> 00:17:00,730
better compression and when we get down

00:16:58,589 --> 00:17:02,260
you know towards the end of last year we

00:17:00,730 --> 00:17:03,459
were getting close to 30% we thought you

00:17:02,260 --> 00:17:04,870
know we're getting we're getting nearer

00:17:03,459 --> 00:17:06,819
a place where we can we can finalize

00:17:04,870 --> 00:17:08,140
this the big spike you're seeing there

00:17:06,819 --> 00:17:12,520
is because we had a regression so this

00:17:08,140 --> 00:17:14,530
happens what we ended up fixing that if

00:17:12,520 --> 00:17:17,470
you look at this graph this shows over

00:17:14,530 --> 00:17:19,720
the exact same time period what the

00:17:17,470 --> 00:17:22,770
complexity is meaning the cost of

00:17:19,720 --> 00:17:25,480
encoding video over time and so here

00:17:22,770 --> 00:17:27,610
we're actually measuring the the whereas

00:17:25,480 --> 00:17:29,140
in the previous graph like lower was was

00:17:27,610 --> 00:17:30,970
better here lower is worse this is a

00:17:29,140 --> 00:17:32,890
graph where the y axis is frames per

00:17:30,970 --> 00:17:34,900
minute and so you can see we started out

00:17:32,890 --> 00:17:37,480
at some kind of almost real-time frames

00:17:34,900 --> 00:17:41,140
per minute I've seen like in real time

00:17:37,480 --> 00:17:42,370
so we had I think that should be frames

00:17:41,140 --> 00:17:43,870
per second we had we had a real time

00:17:42,370 --> 00:17:45,309
somewhat real-time encoder and as we

00:17:43,870 --> 00:17:45,850
went forward it ended up becoming much

00:17:45,309 --> 00:17:48,880
much slower

00:17:45,850 --> 00:17:50,770
that's a logarithmic scale so those

00:17:48,880 --> 00:17:53,200
compression gains came from basically

00:17:50,770 --> 00:17:53,980
adding additional coding tools that had

00:17:53,200 --> 00:17:56,440
additional modes

00:17:53,980 --> 00:17:57,910
operation and our reference encoder is

00:17:56,440 --> 00:18:00,340
doing sort of this exhaustive search

00:17:57,910 --> 00:18:02,140
over those modes and we expect that you

00:18:00,340 --> 00:18:03,490
know now that we've gotten closer to

00:18:02,140 --> 00:18:05,679
finalizing the bitstream will now go

00:18:03,490 --> 00:18:08,320
back and revisit those decisions come up

00:18:05,679 --> 00:18:09,820
with some heuristics or other ways to

00:18:08,320 --> 00:18:11,830
kind of call that space down and that

00:18:09,820 --> 00:18:17,799
search base down and get back some of

00:18:11,830 --> 00:18:19,360
the complexity cost weight other thing

00:18:17,799 --> 00:18:21,220
I'll talk about is the sort of what

00:18:19,360 --> 00:18:24,160
things look like for this the current

00:18:21,220 --> 00:18:28,150
licensing environment so a lot of the a

00:18:24,160 --> 00:18:31,390
lot of the interest in a v1 is currently

00:18:28,150 --> 00:18:34,660
coming because the licensing environment

00:18:31,390 --> 00:18:39,100
around HEV C is somewhat difficult to

00:18:34,660 --> 00:18:41,080
put it kindly in July or something in

00:18:39,100 --> 00:18:43,780
June Leonardo

00:18:41,080 --> 00:18:46,090
chair Lyon the chair of the co founder

00:18:43,780 --> 00:18:47,440
and chair of of MPEG wrote this blog

00:18:46,090 --> 00:18:50,470
post this is where this image came from

00:18:47,440 --> 00:18:51,640
this sort of lamented the the current

00:18:50,470 --> 00:18:53,860
state of the art and said well you know

00:18:51,640 --> 00:18:56,860
hey this this MPEG business model is

00:18:53,860 --> 00:18:59,070
totally broken and the idea the business

00:18:56,860 --> 00:19:03,220
I was talking about is this idea where

00:18:59,070 --> 00:19:06,309
you would take the best technology from

00:19:03,220 --> 00:19:09,100
participating companies regardless of

00:19:06,309 --> 00:19:13,720
the intellectual property rights and use

00:19:09,100 --> 00:19:15,669
that to form a standard that you know is

00:19:13,720 --> 00:19:18,730
maybe best-in-class for for all the use

00:19:15,669 --> 00:19:20,590
cases you care about and then later

00:19:18,730 --> 00:19:23,049
after you publish that standard go back

00:19:20,590 --> 00:19:25,419
and figure out you know how you can

00:19:23,049 --> 00:19:27,309
possibly create a licensing model around

00:19:25,419 --> 00:19:28,750
it and so what ends up happening is that

00:19:27,309 --> 00:19:30,070
you're kind of guaranteed to create

00:19:28,750 --> 00:19:32,230
something that has this patent

00:19:30,070 --> 00:19:34,870
encumbered nature to it just because

00:19:32,230 --> 00:19:36,100
people have learned a pilla been taking

00:19:34,870 --> 00:19:37,990
part in this process for 30 years

00:19:36,100 --> 00:19:40,480
they've learned how to gain it they've

00:19:37,990 --> 00:19:43,419
learned how to you know craft their

00:19:40,480 --> 00:19:45,429
their patents so that you know they read

00:19:43,419 --> 00:19:48,520
on very specific parts of very specific

00:19:45,429 --> 00:19:49,390
pieces in the codec and the number at

00:19:48,520 --> 00:19:51,520
the same time we've got these

00:19:49,390 --> 00:19:53,500
non-practicing entities that have become

00:19:51,520 --> 00:19:55,270
more aggressive right so you know in the

00:19:53,500 --> 00:19:57,250
past you know maybe it was okay if you

00:19:55,270 --> 00:19:58,660
if everybody included their their

00:19:57,250 --> 00:19:59,620
intellectual property because at the end

00:19:58,660 --> 00:20:00,700
of the day they're all gonna want to

00:19:59,620 --> 00:20:02,200
figure out how to license it so they're

00:20:00,700 --> 00:20:05,049
gonna come up with some fair and

00:20:02,200 --> 00:20:06,460
reasonable licensing terms now you've

00:20:05,049 --> 00:20:07,810
got companies that have no plan to ship

00:20:06,460 --> 00:20:10,120
a codec right so they're little

00:20:07,810 --> 00:20:11,470
showing up trying to sneak there all

00:20:10,120 --> 00:20:12,850
these words need trying trying to get

00:20:11,470 --> 00:20:15,700
their technology in because they know

00:20:12,850 --> 00:20:19,450
that once it becomes a standard you'll

00:20:15,700 --> 00:20:20,950
be forced to license it and so that that

00:20:19,450 --> 00:20:22,210
basically means that your code your

00:20:20,950 --> 00:20:24,670
standard now is kind of vulnerable to

00:20:22,210 --> 00:20:26,320
patent hold up right and this is where

00:20:24,670 --> 00:20:29,260
you've got companies that have

00:20:26,320 --> 00:20:31,750
technology in the in the standard and it

00:20:29,260 --> 00:20:33,700
may be a very minor technology which on

00:20:31,750 --> 00:20:35,470
its own if you were to value the

00:20:33,700 --> 00:20:37,000
intellectual property may not be worth a

00:20:35,470 --> 00:20:39,180
whole lot but because you're required to

00:20:37,000 --> 00:20:41,880
license it and now has a lot more value

00:20:39,180 --> 00:20:44,170
and the result is that companies that

00:20:41,880 --> 00:20:45,460
contributed to making HEV see you know

00:20:44,170 --> 00:20:47,980
some of them can't even afford to

00:20:45,460 --> 00:20:49,450
license it and use it so this ends up

00:20:47,980 --> 00:20:51,790
being kind of a big problem and it's

00:20:49,450 --> 00:20:54,220
been part of the reason why it why

00:20:51,790 --> 00:20:56,410
there's such interesting ad one to kind

00:20:54,220 --> 00:20:57,940
of get more specific and I won't go into

00:20:56,410 --> 00:21:00,340
all the details here you interested you

00:20:57,940 --> 00:21:01,600
can go to the Wikipedia page and read

00:21:00,340 --> 00:21:02,560
all about the license in terms I want to

00:21:01,600 --> 00:21:07,420
bring your attention to a couple things

00:21:02,560 --> 00:21:11,830
so the first is that the licensing caps

00:21:07,420 --> 00:21:16,510
for HEV C are much higher than they were

00:21:11,830 --> 00:21:18,940
for ABC so currently I think for ABC the

00:21:16,510 --> 00:21:22,540
cap is around nine million or ten

00:21:18,940 --> 00:21:24,610
million a year for for the the annual

00:21:22,540 --> 00:21:27,640
royalty cap if you look at it if you

00:21:24,610 --> 00:21:29,410
look at the same category for ac/dc it's

00:21:27,640 --> 00:21:31,510
closer to 260 million it used to be

00:21:29,410 --> 00:21:33,910
higher close to a hundred million that's

00:21:31,510 --> 00:21:35,440
just that's just for the royalty Caprica

00:21:33,910 --> 00:21:37,240
if you're shipping units like hardware

00:21:35,440 --> 00:21:39,490
units that have you know an

00:21:37,240 --> 00:21:40,690
implementation in the hardware there's a

00:21:39,490 --> 00:21:42,040
different set of licensing schemes if

00:21:40,690 --> 00:21:44,610
you're super shipping content like if

00:21:42,040 --> 00:21:46,960
you're a Content producer and you've got

00:21:44,610 --> 00:21:48,880
titles that you're encoding there's a

00:21:46,960 --> 00:21:51,280
per per title

00:21:48,880 --> 00:21:53,320
licensing that you have to keep track of

00:21:51,280 --> 00:21:55,230
so the first thing that kind of point is

00:21:53,320 --> 00:21:57,430
that this is much higher this generation

00:21:55,230 --> 00:21:59,320
and the other thing to note is that

00:21:57,430 --> 00:22:00,340
there are stuck even though we have

00:21:59,320 --> 00:22:02,500
these numbers and you can kind of

00:22:00,340 --> 00:22:05,980
estimate what it costs a license HTV see

00:22:02,500 --> 00:22:06,970
they're still they're still members if

00:22:05,980 --> 00:22:08,950
you look at this picture still members

00:22:06,970 --> 00:22:11,730
who aren't in any patent pool right who

00:22:08,950 --> 00:22:14,320
have technology that we know is in HEV C

00:22:11,730 --> 00:22:15,820
but they haven't given out any licensing

00:22:14,320 --> 00:22:17,590
terms and so if you were to try to ship

00:22:15,820 --> 00:22:19,180
HTV C today

00:22:17,590 --> 00:22:20,590
you maybe could license it from some

00:22:19,180 --> 00:22:21,670
numbers but you have no guarantee that

00:22:20,590 --> 00:22:23,230
you could license it from all

00:22:21,670 --> 00:22:24,940
so if you were to you know you go deploy

00:22:23,230 --> 00:22:26,260
and then maybe those members later show

00:22:24,940 --> 00:22:28,840
up and say you know we need this much

00:22:26,260 --> 00:22:30,880
money and you have some uncertainty so

00:22:28,840 --> 00:22:35,110
the market market has been slow to adopt

00:22:30,880 --> 00:22:36,820
HEV C due to these concerns so what's

00:22:35,110 --> 00:22:38,800
what's next ray V one we're working on a

00:22:36,820 --> 00:22:41,290
bit string freeze that's sort of eminent

00:22:38,800 --> 00:22:43,570
we announced the release of 81 and we

00:22:41,290 --> 00:22:45,580
have a draft spec up or doing an

00:22:43,570 --> 00:22:48,010
engineering review and we expect that

00:22:45,580 --> 00:22:50,500
process to be done shortly what this

00:22:48,010 --> 00:22:53,350
means is that the streams that are

00:22:50,500 --> 00:22:54,490
encoded will always be decodable it

00:22:53,350 --> 00:22:56,230
doesn't mean that we're done getting

00:22:54,490 --> 00:22:58,030
compression gains because now I've you

00:22:56,230 --> 00:22:59,980
know now we have a finalized history and

00:22:58,030 --> 00:23:01,990
we can go through and develop different

00:22:59,980 --> 00:23:03,730
algorithms and heuristics at the encoder

00:23:01,990 --> 00:23:05,230
level that take advantage of all these

00:23:03,730 --> 00:23:07,270
new techniques and we kind of expect to

00:23:05,230 --> 00:23:08,650
see additional gains coming from maybe

00:23:07,270 --> 00:23:10,750
one even beyond the ones that we

00:23:08,650 --> 00:23:13,960
published as people find new ways to

00:23:10,750 --> 00:23:16,410
encode video with it we're looking for

00:23:13,960 --> 00:23:21,070
adoption from content creators and

00:23:16,410 --> 00:23:23,080
desktop browsers we're trying to build I

00:23:21,070 --> 00:23:25,150
think there's a project Mozilla to build

00:23:23,080 --> 00:23:27,640
a production quality encoder that

00:23:25,150 --> 00:23:28,780
handles both the video on demand and the

00:23:27,640 --> 00:23:30,580
real-time streaming case we're talking

00:23:28,780 --> 00:23:34,300
about maybe going back to the IETF and

00:23:30,580 --> 00:23:38,890
looking at to see if we can get a v1

00:23:34,300 --> 00:23:41,260
into the RTP pack RTP streams and add it

00:23:38,890 --> 00:23:42,340
to maybe WebRTC and then there's a bunch

00:23:41,260 --> 00:23:43,360
of vendors who are working on hardware

00:23:42,340 --> 00:23:53,500
support which you'll see in the next

00:23:43,360 --> 00:23:55,950
year or so let's write a Michael now all

00:23:53,500 --> 00:23:58,750
right thanks Nathan

00:23:55,950 --> 00:24:01,030
so so I wanted to give you sort of a

00:23:58,750 --> 00:24:04,180
brief introduction to how we do

00:24:01,030 --> 00:24:05,530
development on a v1 this is like these

00:24:04,180 --> 00:24:09,160
are tools that we've built within

00:24:05,530 --> 00:24:11,830
Mozilla to help us but every step of the

00:24:09,160 --> 00:24:14,860
way figure out exactly how a change to

00:24:11,830 --> 00:24:16,600
the codec affect its performance or

00:24:14,860 --> 00:24:20,760
actually wait I've give me one second I

00:24:16,600 --> 00:24:20,760
have to Nathan can you share your screen

00:24:34,730 --> 00:24:40,680
okay all right so so this is a tool that

00:24:39,120 --> 00:24:42,120
we so this is called all we compress the

00:24:40,680 --> 00:24:44,010
other two website you can go to and you

00:24:42,120 --> 00:24:46,680
can keep track of and look at the

00:24:44,010 --> 00:24:48,030
progress we've made over time and what

00:24:46,680 --> 00:24:50,010
you'll see here is on the left hand side

00:24:48,030 --> 00:24:53,520
we have a list of runs this is these are

00:24:50,010 --> 00:24:55,200
commits to our repository with changes

00:24:53,520 --> 00:24:57,450
so anytime a change is being made to the

00:24:55,200 --> 00:24:59,190
codec you are able to go in and

00:24:57,450 --> 00:25:00,600
investigate its performance compared to

00:24:59,190 --> 00:25:03,540
other changes you've made to narcotic

00:25:00,600 --> 00:25:05,670
this is critically important because you

00:25:03,540 --> 00:25:08,250
know when you when you develop codecs

00:25:05,670 --> 00:25:09,930
you were making small changes but these

00:25:08,250 --> 00:25:12,180
changes you know different kinds of

00:25:09,930 --> 00:25:13,650
video content behaves differently based

00:25:12,180 --> 00:25:15,690
off the changes made so it's really

00:25:13,650 --> 00:25:19,050
important to really investigate and

00:25:15,690 --> 00:25:22,020
understand exactly what's going on so

00:25:19,050 --> 00:25:23,340
maybe give you a brief demo of this tool

00:25:22,020 --> 00:25:26,490
so here what I've done is I've selected

00:25:23,340 --> 00:25:28,170
two runs on left hand side you'll notice

00:25:26,490 --> 00:25:31,050
that tooth one runs the selected user to

00:25:28,170 --> 00:25:32,970
get different get commits and the first

00:25:31,050 --> 00:25:35,190
thing we have here is a plot of its

00:25:32,970 --> 00:25:38,340
performance so on the x-axis you have

00:25:35,190 --> 00:25:39,600
you know the bid rate on the y-axis you

00:25:38,340 --> 00:25:42,510
have the quality so what this is saying

00:25:39,600 --> 00:25:44,100
is that a different bit rates the

00:25:42,510 --> 00:25:46,530
comparing you know the red line versus

00:25:44,100 --> 00:25:48,360
the blue line at different bit rates you

00:25:46,530 --> 00:25:50,970
have different qualities so when we talk

00:25:48,360 --> 00:25:53,370
about how well the codec is doing we're

00:25:50,970 --> 00:25:55,290
really talking about that a certain bit

00:25:53,370 --> 00:25:57,390
rate how much better in quality is it

00:25:55,290 --> 00:25:59,280
compared to another version of the codec

00:25:57,390 --> 00:26:00,810
so at any point of the way you can look

00:25:59,280 --> 00:26:03,360
at the height difference between these

00:26:00,810 --> 00:26:06,480
two curves that sort of identify how

00:26:03,360 --> 00:26:07,710
much better and this is this is one

00:26:06,480 --> 00:26:11,790
version that cut it because as opposed

00:26:07,710 --> 00:26:13,560
to another now there are one of

00:26:11,790 --> 00:26:14,940
difficulties when dealing with codecs is

00:26:13,560 --> 00:26:16,890
it's hard to determine which one

00:26:14,940 --> 00:26:18,540
actually looks better so to do that we

00:26:16,890 --> 00:26:21,060
have a variety of metrics that we have

00:26:18,540 --> 00:26:23,340
about about eight or nine metrics that

00:26:21,060 --> 00:26:25,320
we measure monitor at all times to see

00:26:23,340 --> 00:26:28,220
if the changes we were making actually

00:26:25,320 --> 00:26:30,060
result in an improvement

00:26:28,220 --> 00:26:31,980
we're also aggregating these on

00:26:30,060 --> 00:26:34,380
different kinds of content so be like

00:26:31,980 --> 00:26:37,560
1080p content NADP screen content

00:26:34,380 --> 00:26:40,050
smaller content like 360p 720 so forth

00:26:37,560 --> 00:26:42,150
and then for a large variety of

00:26:40,050 --> 00:26:47,850
cases we look at and we see how well

00:26:42,150 --> 00:26:49,590
we're doing so this is complex's in fact

00:26:47,850 --> 00:26:52,280
like 33% better

00:26:49,590 --> 00:26:55,620
negative here actually means is better

00:26:52,280 --> 00:26:57,120
the in for some content we're actually

00:26:55,620 --> 00:26:59,400
regressing right so this is sort of

00:26:57,120 --> 00:27:02,790
unavoidable in general because building

00:26:59,400 --> 00:27:06,240
a codec that is works better across the

00:27:02,790 --> 00:27:08,190
board is pretty difficult but one of the

00:27:06,240 --> 00:27:13,020
interesting things that we've built is

00:27:08,190 --> 00:27:16,470
the ability to compare side by side how

00:27:13,020 --> 00:27:18,720
to codex interacted behave so if you go

00:27:16,470 --> 00:27:19,950
to the site and you select two jobs one

00:27:18,720 --> 00:27:23,100
of the neat things you can do is you can

00:27:19,950 --> 00:27:26,580
go down here so let's become starcraft

00:27:23,100 --> 00:27:27,960
is one that I usually like to look at so

00:27:26,580 --> 00:27:30,000
what we're doing here is we want to look

00:27:27,960 --> 00:27:31,410
at what the video quality looks like

00:27:30,000 --> 00:27:34,500
between two different versions of the

00:27:31,410 --> 00:27:37,650
codec at a certain quality setting so if

00:27:34,500 --> 00:27:39,720
we click on 63 here we're loading up

00:27:37,650 --> 00:27:42,030
this tool called the AOM bitstream

00:27:39,720 --> 00:27:45,950
analyzer and what this allows you to do

00:27:42,030 --> 00:27:49,230
is is actually look at two different

00:27:45,950 --> 00:27:51,090
builds of the codec and you can inspect

00:27:49,230 --> 00:27:52,710
exactly what is happening a step of the

00:27:51,090 --> 00:27:54,810
way now the really interesting thing

00:27:52,710 --> 00:27:58,110
about this is it's actually running the

00:27:54,810 --> 00:28:01,950
codec inside the browser using web

00:27:58,110 --> 00:28:05,430
assembly so anytime you submit a commit

00:28:01,950 --> 00:28:07,710
to the github repository we take that we

00:28:05,430 --> 00:28:09,420
build it we build it to web assembly and

00:28:07,710 --> 00:28:11,040
we stored on the server somewhere and

00:28:09,420 --> 00:28:14,130
when you use this tool you pick that

00:28:11,040 --> 00:28:15,810
particular build of the codec and then

00:28:14,130 --> 00:28:17,820
we're able to decode live in the browser

00:28:15,810 --> 00:28:19,440
and let's let you explore and understand

00:28:17,820 --> 00:28:21,180
what's going on we've also added some

00:28:19,440 --> 00:28:22,860
instrumentation to pull some data out of

00:28:21,180 --> 00:28:26,270
the codec so this is the tool that lets

00:28:22,860 --> 00:28:28,740
you visualize that and explore it so

00:28:26,270 --> 00:28:30,570
here's here's a particular frame of the

00:28:28,740 --> 00:28:33,600
codec and you can actually toggle

00:28:30,570 --> 00:28:35,130
between by clicking 1 & 2 you can

00:28:33,600 --> 00:28:36,840
actually look at two different variants

00:28:35,130 --> 00:28:38,490
now you'll probably notice well it might

00:28:36,840 --> 00:28:40,350
be difficult because this is streaming

00:28:38,490 --> 00:28:42,600
live so there's another codec involved

00:28:40,350 --> 00:28:44,130
here but uh but you may notice that

00:28:42,600 --> 00:28:47,160
there's a quality difference between

00:28:44,130 --> 00:28:49,020
these two things so we'd like to

00:28:47,160 --> 00:28:51,180
understand why that is the case so as a

00:28:49,020 --> 00:28:52,620
developer as developers of this codec we

00:28:51,180 --> 00:28:52,920
want to dig in deeper understand what's

00:28:52,620 --> 00:28:55,320
gone

00:28:52,920 --> 00:28:56,940
so you can sort of highlight and focus

00:28:55,320 --> 00:28:59,010
on any one area and you can toggle

00:28:56,940 --> 00:29:00,000
between the two different codecs and you

00:28:59,010 --> 00:29:02,280
notice there's a quality difference

00:29:00,000 --> 00:29:04,890
there and we want to understand why to

00:29:02,280 --> 00:29:07,290
do this we have a ability to toggle a

00:29:04,890 --> 00:29:08,910
variety of visualization options so for

00:29:07,290 --> 00:29:12,120
instance one that's really popular is

00:29:08,910 --> 00:29:15,090
the split grid what a codec typically

00:29:12,120 --> 00:29:19,710
does is it tries to partition a video

00:29:15,090 --> 00:29:21,840
frame into a lot of little tiny boxes in

00:29:19,710 --> 00:29:23,250
fact effectively of different widths and

00:29:21,840 --> 00:29:24,990
height so what it actually with the

00:29:23,250 --> 00:29:27,480
encoder does is it tries all sorts of

00:29:24,990 --> 00:29:29,430
partitioning possibilities and to

00:29:27,480 --> 00:29:32,460
determine which one effectively will end

00:29:29,430 --> 00:29:33,990
up working best so by the visualizing

00:29:32,460 --> 00:29:35,640
this you can kind of see what the codec

00:29:33,990 --> 00:29:37,170
is doing so you can out toggle between

00:29:35,640 --> 00:29:39,840
the two different codecs this is codec

00:29:37,170 --> 00:29:42,750
one version one of the codec version two

00:29:39,840 --> 00:29:44,550
of the codec you can also step through

00:29:42,750 --> 00:29:46,230
multiple frames so this is the first

00:29:44,550 --> 00:29:48,030
frame of the codec for first room in

00:29:46,230 --> 00:29:49,680
this video but and we can toggle and go

00:29:48,030 --> 00:29:51,360
to the next frame they notice that

00:29:49,680 --> 00:29:52,980
things are significantly different well

00:29:51,360 --> 00:29:55,500
the reason for this is that the first

00:29:52,980 --> 00:29:57,930
frame of the videos in it was a you know

00:29:55,500 --> 00:29:59,160
the the first frame that it was cannot

00:29:57,930 --> 00:30:00,480
be predicted from the previous frame

00:29:59,160 --> 00:30:02,370
because obviously the first frame but

00:30:00,480 --> 00:30:04,380
the second frame can be predicted from

00:30:02,370 --> 00:30:06,960
the first frame so a lot less

00:30:04,380 --> 00:30:09,150
information needs to be transmitted to

00:30:06,960 --> 00:30:10,500
encode the second frame of the video you

00:30:09,150 --> 00:30:12,950
can actually take a look at it by

00:30:10,500 --> 00:30:17,250
clicking on a histogram view here and

00:30:12,950 --> 00:30:19,380
this this plots you know what what kinds

00:30:17,250 --> 00:30:22,070
of information is encoded inside of the

00:30:19,380 --> 00:30:24,300
frame any step of the way now

00:30:22,070 --> 00:30:26,610
here well let's see you can actually

00:30:24,300 --> 00:30:29,250
let's decode multiple frames so we have

00:30:26,610 --> 00:30:33,270
more things to look at here but what

00:30:29,250 --> 00:30:34,950
you'll notice is that very very like the

00:30:33,270 --> 00:30:36,510
first frame is a lot there's a lot more

00:30:34,950 --> 00:30:38,130
information transmitted in the frame the

00:30:36,510 --> 00:30:41,040
first frame as opposed to subsequent

00:30:38,130 --> 00:30:42,330
frames quite significantly it's a little

00:30:41,040 --> 00:30:44,340
hard to see but at the bottom here you

00:30:42,330 --> 00:30:45,660
can you can tell how much data is being

00:30:44,340 --> 00:30:49,140
so many bits are being sent for

00:30:45,660 --> 00:30:50,760
subsequent frames you can also take a

00:30:49,140 --> 00:30:52,740
look at you know what kinds of

00:30:50,760 --> 00:30:54,660
information is is encoding each

00:30:52,740 --> 00:30:58,080
individual frame this is a histogram of

00:30:54,660 --> 00:30:59,910
the kinds of symbols and components that

00:30:58,080 --> 00:31:01,740
we we transmit with every single frame

00:30:59,910 --> 00:31:03,120
so you can kind of step through but you

00:31:01,740 --> 00:31:05,890
can also look and compare to the

00:31:03,120 --> 00:31:08,440
different version of the same

00:31:05,890 --> 00:31:09,880
Kotick different revision and you'd look

00:31:08,440 --> 00:31:15,460
you can try and understand how they

00:31:09,880 --> 00:31:18,880
differ another interesting visualization

00:31:15,460 --> 00:31:21,460
is looking at you and you can kind of go

00:31:18,880 --> 00:31:24,070
through this at your own pace it's quite

00:31:21,460 --> 00:31:26,590
fascinating so let me have another one

00:31:24,070 --> 00:31:28,210
loaded here this is another video so

00:31:26,590 --> 00:31:31,510
again you can look at the histogram the

00:31:28,210 --> 00:31:33,910
view of it this one uses quite a few

00:31:31,510 --> 00:31:35,740
more bits but still a lot fewer than the

00:31:33,910 --> 00:31:39,850
first frame one of the interesting

00:31:35,740 --> 00:31:45,280
things look at is one of the layers is

00:31:39,850 --> 00:31:46,660
called motion motion vectors so the

00:31:45,280 --> 00:31:49,720
first frame the video there's no motion

00:31:46,660 --> 00:31:52,330
compensation no motion prediction but in

00:31:49,720 --> 00:31:53,560
looking at subsequent frames you will

00:31:52,330 --> 00:31:55,090
notice that there are these things

00:31:53,560 --> 00:31:58,150
called motion vectors and what motion

00:31:55,090 --> 00:32:04,690
vectors effectively do is you know say

00:31:58,150 --> 00:32:06,220
this let's take a look at this you can

00:32:04,690 --> 00:32:08,560
highlight a particular block so what

00:32:06,220 --> 00:32:10,600
this is saying is that the contents of

00:32:08,560 --> 00:32:12,700
this block in this particular frame

00:32:10,600 --> 00:32:16,390
second frame of the video can be

00:32:12,700 --> 00:32:18,610
predicted based off the contents of the

00:32:16,390 --> 00:32:21,450
previous the same same sort of area but

00:32:18,610 --> 00:32:24,040
in the previous frame so when when this

00:32:21,450 --> 00:32:25,270
frame is encoded we're able to predict

00:32:24,040 --> 00:32:27,360
it from the previous frame and the

00:32:25,270 --> 00:32:30,820
length of these vectors here which are

00:32:27,360 --> 00:32:33,100
drawn in red and blue indicate how the

00:32:30,820 --> 00:32:35,830
data can be pulled in from from nearby

00:32:33,100 --> 00:32:37,710
frames to create this frame you'll

00:32:35,830 --> 00:32:42,130
notice you can actually turn off the

00:32:37,710 --> 00:32:43,720
image and you'll notice that you can

00:32:42,130 --> 00:32:47,710
play it back it may be a little

00:32:43,720 --> 00:32:49,600
difficult to see video but the air is

00:32:47,710 --> 00:32:51,610
the areas of the frame that have a lot

00:32:49,600 --> 00:32:56,260
of motion ends up having larger motion

00:32:51,610 --> 00:32:58,300
vectors you can also go in and every

00:32:56,260 --> 00:33:00,010
step of the way understand exactly what

00:32:58,300 --> 00:33:01,420
is being encoded in each frame of video

00:33:00,010 --> 00:33:03,820
so you can go here and you can

00:33:01,420 --> 00:33:05,260
understand me you have to have deep

00:33:03,820 --> 00:33:06,820
expertise and I understand what the

00:33:05,260 --> 00:33:09,760
codec is doing but you can get a sense

00:33:06,820 --> 00:33:11,740
of of how many bits are spent to encode

00:33:09,760 --> 00:33:13,290
this particular block right so when we

00:33:11,740 --> 00:33:15,780
compare two different videos to

00:33:13,290 --> 00:33:18,610
different versions of the codec

00:33:15,780 --> 00:33:19,720
particular video frame we can we can see

00:33:18,610 --> 00:33:25,539
if we regressed or

00:33:19,720 --> 00:33:29,110
improve things you know aggregate

00:33:25,539 --> 00:33:33,210
information on the overall frame and

00:33:29,110 --> 00:33:33,210
lastly there's also a debilitating

00:33:37,900 --> 00:33:43,059
I think it's not integrate in this case

00:33:40,240 --> 00:33:46,480
but you know oftentimes when we're

00:33:43,059 --> 00:33:48,010
looking at video codecs you know we can

00:33:46,480 --> 00:33:49,510
look at the numbers and the objective

00:33:48,010 --> 00:33:51,730
metrics right but sometimes we need

00:33:49,510 --> 00:33:54,340
subjective results so we have an ability

00:33:51,730 --> 00:33:57,000
to create a voting or people do a survey

00:33:54,340 --> 00:33:59,110
so it will take you know one video well

00:33:57,000 --> 00:34:00,730
one video encoded with two different

00:33:59,110 --> 00:34:03,100
versions of the codec and we'll create a

00:34:00,730 --> 00:34:04,840
voting or survey type of functionality

00:34:03,100 --> 00:34:07,210
we can send that link out to people and

00:34:04,840 --> 00:34:09,129
people can go through and vote on which

00:34:07,210 --> 00:34:11,859
they prefer more then we can use that

00:34:09,129 --> 00:34:13,359
data to then you know sometimes break

00:34:11,859 --> 00:34:19,810
ties between two different features that

00:34:13,359 --> 00:34:21,220
we'd like to add to the codec okay going

00:34:19,810 --> 00:34:29,020
back to the slides see if there's

00:34:21,220 --> 00:34:32,169
anything else dad although this tool is

00:34:29,020 --> 00:34:34,960
a this is just a web page effective

00:34:32,169 --> 00:34:36,550
thing if you'd like to run it locally

00:34:34,960 --> 00:34:38,020
you can also do that so we've packages

00:34:36,550 --> 00:34:39,550
it packaged it as an electron

00:34:38,020 --> 00:34:40,690
application that you can run locally so

00:34:39,550 --> 00:34:43,510
you don't have to be connected to the

00:34:40,690 --> 00:34:44,560
Internet to be able to use it but I

00:34:43,510 --> 00:34:46,619
think that's all I think that's all I

00:34:44,560 --> 00:34:48,010
need to say I can open it up to

00:34:46,619 --> 00:34:50,349
questions

00:34:48,010 --> 00:35:01,119
so Nathan you want to pop back on video

00:34:50,349 --> 00:35:06,670
okay Wow I know and AH there I am here

00:35:01,119 --> 00:35:09,520
we go we're all back in room fluckey

00:35:06,670 --> 00:35:12,599
and Gabriel had many questions on the

00:35:09,520 --> 00:35:15,820
ether pad if either of you would like to

00:35:12,599 --> 00:35:19,150
show your pop into the room show your

00:35:15,820 --> 00:35:23,250
faces ask the questions yourself welcome

00:35:19,150 --> 00:35:24,960
to do that I think we have W here ah

00:35:23,250 --> 00:35:28,210
okay

00:35:24,960 --> 00:35:33,640
but um ah there he is

00:35:28,210 --> 00:35:37,450
yeah hi can you see yeah yeah cool yeah

00:35:33,640 --> 00:35:41,200
I had a couple of questions the first

00:35:37,450 --> 00:35:44,740
one is that is this code a cable one is

00:35:41,200 --> 00:35:50,470
going to be available as a source of my

00:35:44,740 --> 00:35:57,910
video tag so can I put it as a source or

00:35:50,470 --> 00:35:59,170
only to media extension I mean I mean

00:35:57,910 --> 00:36:01,359
that's generally sort of integration

00:35:59,170 --> 00:36:03,520
working on the web stack so we're not

00:36:01,359 --> 00:36:06,730
like intimately familiar with with how

00:36:03,520 --> 00:36:08,589
it's plugged in but yeah I mean

00:36:06,730 --> 00:36:10,119
eventually you will be able to just be

00:36:08,589 --> 00:36:14,770
and get another codec that's supported

00:36:10,119 --> 00:36:18,819
by the video tag yeah okay okay the next

00:36:14,770 --> 00:36:22,540
question how is it going to change the

00:36:18,819 --> 00:36:26,079
current web RTC implementation and what

00:36:22,540 --> 00:36:31,480
it will bring to the table if you have

00:36:26,079 --> 00:36:34,480
any opinion and that's so in terms of

00:36:31,480 --> 00:36:37,599
you know once it once the encoder you

00:36:34,480 --> 00:36:38,920
know encoder and the decoder fast enough

00:36:37,599 --> 00:36:41,140
right effectively what this'll may need

00:36:38,920 --> 00:36:43,270
to have higher quality I mean when it

00:36:41,140 --> 00:36:46,000
comes to codecs you have you know like

00:36:43,270 --> 00:36:47,500
you can look at for the same amount of

00:36:46,000 --> 00:36:52,270
bandwidth you can get higher quality

00:36:47,500 --> 00:36:53,920
video all right or for the same quality

00:36:52,270 --> 00:36:55,450
video you spend fewer bits right so

00:36:53,920 --> 00:36:57,099
fewer interruptions in your and your

00:36:55,450 --> 00:36:57,520
streaming conversations and things like

00:36:57,099 --> 00:37:00,549
that

00:36:57,520 --> 00:37:02,589
i think i think the other thing to

00:37:00,549 --> 00:37:04,480
consider is just the impact of having

00:37:02,589 --> 00:37:06,160
sort of a high performance royalty-free

00:37:04,480 --> 00:37:08,920
codec great so that we've already had

00:37:06,160 --> 00:37:10,059
better codecs for video compression but

00:37:08,920 --> 00:37:12,040
we haven't seen a lot of adoption just

00:37:10,059 --> 00:37:14,710
because of the licensing space right so

00:37:12,040 --> 00:37:17,319
the fact that 81 you know is

00:37:14,710 --> 00:37:19,030
royalty-free because we've got people

00:37:17,319 --> 00:37:20,770
actively trying to make it royalty-free

00:37:19,030 --> 00:37:23,140
and we've got the IP from these 33

00:37:20,770 --> 00:37:24,309
companies and those 33 companies are

00:37:23,140 --> 00:37:25,750
gonna be shipping it means there's a

00:37:24,309 --> 00:37:32,740
strong likelihood that people will

00:37:25,750 --> 00:37:36,579
actually pick this up so I know maybe

00:37:32,740 --> 00:37:39,790
it's like a early question but what if

00:37:36,579 --> 00:37:42,160
you had to build an app where you want

00:37:39,790 --> 00:37:45,430
to stream aged we wish we won

00:37:42,160 --> 00:37:48,789
how would you do that would you do it

00:37:45,430 --> 00:37:52,690
through WebSockets or would you use

00:37:48,789 --> 00:37:56,920
WebRTC how would you make a stream to

00:37:52,690 --> 00:37:58,119
the browser yeah I think I think

00:37:56,920 --> 00:38:00,280
Michaels point early about us not being

00:37:58,119 --> 00:38:01,480
involved in the integrations is a good

00:38:00,280 --> 00:38:03,880
point but I will tell you that there is

00:38:01,480 --> 00:38:07,480
work to add it to WebRTC right like I

00:38:03,880 --> 00:38:09,880
think once the standards finalized we're

00:38:07,480 --> 00:38:12,130
brewing we're gonna bring this to the

00:38:09,880 --> 00:38:15,359
ITF and get it included in the RTP

00:38:12,130 --> 00:38:18,069
payload right as a as a as a formal

00:38:15,359 --> 00:38:20,140
codec so you'll see a variety of

00:38:18,069 --> 00:38:21,760
different ways of playing it but maybe

00:38:20,140 --> 00:38:24,099
some of that is that if you look at it

00:38:21,760 --> 00:38:26,020
codec right you know generally what

00:38:24,099 --> 00:38:28,089
people consider codecs are oftentimes

00:38:26,020 --> 00:38:31,420
they talk about container formats right

00:38:28,089 --> 00:38:32,890
and like mp4 for instance right that's

00:38:31,420 --> 00:38:37,240
not a codecs more of a container format

00:38:32,890 --> 00:38:40,270
so so the AV one code base a lot of it

00:38:37,240 --> 00:38:42,460
is a derivative of the vp9 code base so

00:38:40,270 --> 00:38:43,809
anytime you look at vp9 on how it's

00:38:42,460 --> 00:38:47,950
being used in the wild whether to watch

00:38:43,809 --> 00:38:49,900
youtube videos or stream it if you want

00:38:47,950 --> 00:38:52,630
more or less will follow the same sort

00:38:49,900 --> 00:38:55,569
of path so there will be some work done

00:38:52,630 --> 00:38:59,460
a 32 package a v1 bit streams into

00:38:55,569 --> 00:38:59,460
existing container formats and channels

00:38:59,730 --> 00:39:03,119
yeah thank you

00:39:04,109 --> 00:39:12,220
let's see am i audible I'm not sure I'm

00:39:09,789 --> 00:39:14,079
use yeah you you can hear me can you

00:39:12,220 --> 00:39:15,760
hear me yeah we can oh yeah okay I was

00:39:14,079 --> 00:39:18,910
just gonna make a comment I think this

00:39:15,760 --> 00:39:22,660
is really interesting cuz Michael and

00:39:18,910 --> 00:39:25,690
Nathan are from Mozilla research they're

00:39:22,660 --> 00:39:29,289
really there they're working at a much

00:39:25,690 --> 00:39:31,750
different layer of the stack then we web

00:39:29,289 --> 00:39:34,720
developers are usually thinking about

00:39:31,750 --> 00:39:36,670
and so it's just interesting to see like

00:39:34,720 --> 00:39:39,130
there's a little bit of a gap in the

00:39:36,670 --> 00:39:41,859
stack there between the questions that

00:39:39,130 --> 00:39:44,559
you're asking is as a front-end guy and

00:39:41,859 --> 00:39:49,000
the work that they're doing but I'm

00:39:44,559 --> 00:39:51,460
learning from all this too if you guys

00:39:49,000 --> 00:39:54,609
could unshare the screen then we'll have

00:39:51,460 --> 00:39:58,599
more face time

00:39:54,609 --> 00:40:02,769
and the actually did that happen okay

00:39:58,599 --> 00:40:06,339
I'm not sure why it's still okay all

00:40:02,769 --> 00:40:07,809
right no worries that request of it yeah

00:40:06,339 --> 00:40:10,720
go ahead let's carry on

00:40:07,809 --> 00:40:14,559
thank you yeah we still have some couple

00:40:10,720 --> 00:40:17,710
of questions so I will take I'm gonna

00:40:14,559 --> 00:40:19,779
share the first one from fluckey so he's

00:40:17,710 --> 00:40:20,769
he's asking what will happen to the

00:40:19,779 --> 00:40:23,769
bitstream

00:40:20,769 --> 00:40:25,749
analyzer as we know that it's the base

00:40:23,769 --> 00:40:30,599
dream freeze it's happening now

00:40:25,749 --> 00:40:34,029
so is there still use to the tool or not

00:40:30,599 --> 00:40:36,339
so development work

00:40:34,029 --> 00:40:38,650
so once the bitstream is finalized right

00:40:36,339 --> 00:40:40,480
that's like saying that HTML spec is

00:40:38,650 --> 00:40:42,299
finalized right but it doesn't you know

00:40:40,480 --> 00:40:44,680
it can be used in many different ways so

00:40:42,299 --> 00:40:48,579
work will still continue on improving

00:40:44,680 --> 00:40:50,140
the performance of the codec and to do

00:40:48,579 --> 00:40:51,970
that you need to be able to inspect what

00:40:50,140 --> 00:40:53,319
the bit stream looks like so the choices

00:40:51,970 --> 00:40:55,029
that encoder makes you'd like to be able

00:40:53,319 --> 00:40:57,759
to visualize it so it's still useful as

00:40:55,029 --> 00:41:01,089
a tool to help codec engineers improve

00:40:57,759 --> 00:41:03,970
the performance of the encoder secondly

00:41:01,089 --> 00:41:06,130
it's also useful for content authors

00:41:03,970 --> 00:41:08,859
that you know oftentimes when you use a

00:41:06,130 --> 00:41:10,809
codec you're prompted with you know 30

00:41:08,859 --> 00:41:13,509
different knobs you can you can tweak

00:41:10,809 --> 00:41:15,640
right and you'd like to understand how

00:41:13,509 --> 00:41:17,950
those knobs ultimately affect the video

00:41:15,640 --> 00:41:19,720
that I think code it so it may also also

00:41:17,950 --> 00:41:22,660
be useful for content creators to

00:41:19,720 --> 00:41:24,160
understand and see how the changes or

00:41:22,660 --> 00:41:28,809
the options they've set in the encoder

00:41:24,160 --> 00:41:30,670
affect the video one of the nice things

00:41:28,809 --> 00:41:33,309
is once the codec is freeze then we can

00:41:30,670 --> 00:41:36,009
actually you know like the bitstream

00:41:33,309 --> 00:41:38,140
analyzer will work on all videos all if

00:41:36,009 --> 00:41:42,450
you want videos as opposed to being tied

00:41:38,140 --> 00:41:42,450
to any one particular revision of 81

00:41:42,989 --> 00:41:54,150
okay I hope that answered the question

00:41:46,329 --> 00:41:57,700
to flaky so yeah I I got another one so

00:41:54,150 --> 00:42:00,970
he's saying in encoding everyone is

00:41:57,700 --> 00:42:03,489
still very costly but can you expect

00:42:00,970 --> 00:42:08,290
decoding speed to improve to a point

00:42:03,489 --> 00:42:11,680
where profiling an AV a1 decoder

00:42:08,290 --> 00:42:14,770
could be come via ball-like via wasn't

00:42:11,680 --> 00:42:18,700
for example or do we expect browsers

00:42:14,770 --> 00:42:25,690
will implement fast enough but it would

00:42:18,700 --> 00:42:27,550
not be a pressing need so currently

00:42:25,690 --> 00:42:30,340
actually in nightly we already have live

00:42:27,550 --> 00:42:34,120
ALM integrated so you can actually

00:42:30,340 --> 00:42:36,010
decode a certain commit of maybe one

00:42:34,120 --> 00:42:40,660
right now done natively you know using

00:42:36,010 --> 00:42:42,880
you know not using a shimmer any kind of

00:42:40,660 --> 00:42:44,290
polyfill and in fact we've done demos

00:42:42,880 --> 00:42:46,480
with with bit moving where they've done

00:42:44,290 --> 00:42:48,820
real-time decoding of 1080p in the

00:42:46,480 --> 00:42:50,140
browser so decoding actually degrading

00:42:48,820 --> 00:42:52,480
performance is not the same as encoding

00:42:50,140 --> 00:42:55,120
performance by by any means the decoder

00:42:52,480 --> 00:42:56,980
actually has tracked very well we

00:42:55,120 --> 00:42:58,270
haven't had too many regressions and

00:42:56,980 --> 00:43:00,220
again that's due to the fact that the

00:42:58,270 --> 00:43:01,750
encoder a sort of like expanded the

00:43:00,220 --> 00:43:03,460
search space and the decoder just has to

00:43:01,750 --> 00:43:05,950
decode the one thing that you signaled

00:43:03,460 --> 00:43:08,650
so we still believe the decoding

00:43:05,950 --> 00:43:10,120
actually should be mostly fine right now

00:43:08,650 --> 00:43:12,550
we've got some work going on going to

00:43:10,120 --> 00:43:14,530
improve it but I think sort of starting

00:43:12,550 --> 00:43:17,760
starting from the bit string for you

00:43:14,530 --> 00:43:17,760
should be able to decode in the browser

00:43:18,360 --> 00:43:26,800
thank you there's another question from

00:43:23,380 --> 00:43:29,080
flaky also so he said can you tell us a

00:43:26,800 --> 00:43:31,810
bit more about the challenges and

00:43:29,080 --> 00:43:36,210
interesting aspects of working with just

00:43:31,810 --> 00:43:41,290
with such a diverse cross company team

00:43:36,210 --> 00:43:42,640
on the same code base yeah it's it's

00:43:41,290 --> 00:43:44,320
some of the other standards work where

00:43:42,640 --> 00:43:45,580
you're kind of presenting things and

00:43:44,320 --> 00:43:47,500
you've got to convince a large

00:43:45,580 --> 00:43:48,910
consortium of people without very

00:43:47,500 --> 00:43:50,830
competing very very different and

00:43:48,910 --> 00:43:55,480
competing interests that your approach

00:43:50,830 --> 00:43:57,640
is better so I think it's been maybe not

00:43:55,480 --> 00:43:59,560
as bad as some of the the very bad bad

00:43:57,640 --> 00:44:03,430
standards work I've done but it's

00:43:59,560 --> 00:44:04,720
definitely been challenging right so as

00:44:03,430 --> 00:44:05,770
you as I presented like we've had a lot

00:44:04,720 --> 00:44:07,690
of collaborations there's a lot

00:44:05,770 --> 00:44:09,580
compromised we've made so the the CDF

00:44:07,690 --> 00:44:11,500
filter had gone through many iterations

00:44:09,580 --> 00:44:12,760
where we took feedback from Nvidia we

00:44:11,500 --> 00:44:14,500
took feedback from other hardware

00:44:12,760 --> 00:44:17,110
vendors and incorporated that and

00:44:14,500 --> 00:44:19,750
eventually came up with some design that

00:44:17,110 --> 00:44:21,070
was suitable for our needs plus the

00:44:19,750 --> 00:44:21,730
hardware vendors needs and things like

00:44:21,070 --> 00:44:24,820
that

00:44:21,730 --> 00:44:26,880
I can say that compared to previous

00:44:24,820 --> 00:44:30,600
efforts to make a royalty-free video

00:44:26,880 --> 00:44:33,040
standard having all these companies

00:44:30,600 --> 00:44:34,720
buy-in and look at the work while we're

00:44:33,040 --> 00:44:36,310
developing it even though it may be more

00:44:34,720 --> 00:44:37,300
tedious and maybe we have to jump

00:44:36,310 --> 00:44:39,400
through hoops we didn't want to jump

00:44:37,300 --> 00:44:40,900
through and care about use case we did

00:44:39,400 --> 00:44:42,280
want to care about we actually now have

00:44:40,900 --> 00:44:45,190
a better product because we know that

00:44:42,280 --> 00:44:49,330
people will ship it and so it's worth

00:44:45,190 --> 00:44:51,160
the effort to do that one of the

00:44:49,330 --> 00:44:54,400
interesting things working with hardware

00:44:51,160 --> 00:44:56,440
companies is that no unlike other

00:44:54,400 --> 00:44:58,480
software products and projects we really

00:44:56,440 --> 00:45:00,010
have to be careful about you know you're

00:44:58,480 --> 00:45:02,290
designed to make sure that it's feasible

00:45:00,010 --> 00:45:03,609
and hardware right like some piece of

00:45:02,290 --> 00:45:06,880
code that you're right ultimately has to

00:45:03,609 --> 00:45:08,619
be implemented in silicon Wow and it

00:45:06,880 --> 00:45:09,880
needs to be possible to do that so so

00:45:08,619 --> 00:45:11,500
getting the feedback from the hardware

00:45:09,880 --> 00:45:12,940
companies while we're designing the

00:45:11,500 --> 00:45:15,520
software is also really important

00:45:12,940 --> 00:45:18,160
now because hardware is likely to appear

00:45:15,520 --> 00:45:19,780
some you know sometime in the future to

00:45:18,160 --> 00:45:20,710
get adoption of the codec we also need

00:45:19,780 --> 00:45:22,450
to make sure that the software

00:45:20,710 --> 00:45:25,060
performance is good enough right to sort

00:45:22,450 --> 00:45:27,220
of tie us over until we have you know

00:45:25,060 --> 00:45:29,350
devices out there and televisions that

00:45:27,220 --> 00:45:30,970
can decode so it's a it's an interesting

00:45:29,350 --> 00:45:40,800
compromise it's certainly a challenge

00:45:30,970 --> 00:45:46,359
but it's fun yeah it sounds like fun so

00:45:40,800 --> 00:45:49,720
we have another question from Vicki so

00:45:46,359 --> 00:45:52,720
she's saying she's asking has a v1 being

00:45:49,720 --> 00:45:57,930
deployed to any chipsets for Hardware

00:45:52,720 --> 00:45:57,930
encoding if no was the adoption process

00:45:58,830 --> 00:46:03,400
right so I mean we only made the

00:46:02,290 --> 00:46:05,560
announcement about the release of

00:46:03,400 --> 00:46:07,420
everyone on March 28th and there's still

00:46:05,560 --> 00:46:08,920
some normative changes to the bitstream

00:46:07,420 --> 00:46:12,190
so obviously like there's no hardware

00:46:08,920 --> 00:46:13,240
that is shipping with a v1 today we do

00:46:12,190 --> 00:46:16,300
know that there are vendors who are

00:46:13,240 --> 00:46:18,880
working to get products out probably

00:46:16,300 --> 00:46:22,510
you'll see them in 2019 to see a lot

00:46:18,880 --> 00:46:24,490
more a little later than that and in

00:46:22,510 --> 00:46:25,750
terms of adoption you know the the

00:46:24,490 --> 00:46:26,920
software story is really where it's at

00:46:25,750 --> 00:46:28,450
like Michael said we've been working

00:46:26,920 --> 00:46:31,000
hard to make sure that the techniques

00:46:28,450 --> 00:46:32,560
that we add for 81 you know even though

00:46:31,000 --> 00:46:35,050
they will implement well on hardware

00:46:32,560 --> 00:46:35,410
like the also implement and software and

00:46:35,050 --> 00:46:39,309
so

00:46:35,410 --> 00:46:40,869
several people have looked at ways to do

00:46:39,309 --> 00:46:42,819
parallel encoding where you chunk a

00:46:40,869 --> 00:46:44,769
video up into small sections we've got

00:46:42,819 --> 00:46:46,869
tiles so you can actually have sort of

00:46:44,769 --> 00:46:49,319
spatial and temporal parallelism in

00:46:46,869 --> 00:46:51,490
terms of encoding and you know for

00:46:49,319 --> 00:46:53,259
companies like Netflix to have a smaller

00:46:51,490 --> 00:46:55,720
category of content than say YouTube

00:46:53,259 --> 00:46:58,150
they can actually invest in the cloud

00:46:55,720 --> 00:46:59,259
resources to do that type of encoding so

00:46:58,150 --> 00:47:02,079
there's still possibly that you could

00:46:59,259 --> 00:47:04,089
see early adoption from companies like

00:47:02,079 --> 00:47:06,190
Netflix and use cases similar to that

00:47:04,089 --> 00:47:07,690
like like videoconferencing right where

00:47:06,190 --> 00:47:09,849
it's a totally ephemeral you do it once

00:47:07,690 --> 00:47:12,250
and there's no you know it's not not

00:47:09,849 --> 00:47:16,650
super high quality that you can see

00:47:12,250 --> 00:47:28,750
places where that might be adopted early

00:47:16,650 --> 00:47:33,369
using software solutions okay we have

00:47:28,750 --> 00:47:36,730
got another question also from Myers so

00:47:33,369 --> 00:47:40,680
he's asking he's saying that he he had

00:47:36,730 --> 00:47:44,380
he heard that compressing text in images

00:47:40,680 --> 00:47:47,710
greatly reduce the quality reduce reduce

00:47:44,380 --> 00:47:50,769
the images qualities is there the same

00:47:47,710 --> 00:47:52,509
problem with video how does a VA one

00:47:50,769 --> 00:47:55,960
approach this problem if it's like this

00:47:52,509 --> 00:47:58,269
already yeah so I mentioned it a little

00:47:55,960 --> 00:48:00,369
earlier like there are specific tools

00:47:58,269 --> 00:48:03,160
we've added say v1 to handle coding

00:48:00,369 --> 00:48:05,019
screen content particularly I mean this

00:48:03,160 --> 00:48:07,240
is the text this is the text issue and

00:48:05,019 --> 00:48:08,890
this is really important for screen

00:48:07,240 --> 00:48:11,740
sharing for video conferencing for those

00:48:08,890 --> 00:48:13,720
use cases one of the ones that that's

00:48:11,740 --> 00:48:15,250
been really effective is this this idea

00:48:13,720 --> 00:48:17,259
of palette mode so it's you know you

00:48:15,250 --> 00:48:18,880
create an index of colors and then you

00:48:17,259 --> 00:48:21,849
code the index and now when you do your

00:48:18,880 --> 00:48:24,250
compression you know what you what you

00:48:21,849 --> 00:48:25,900
come back with no longer has he's like

00:48:24,250 --> 00:48:27,490
crazy ringings on them because it was

00:48:25,900 --> 00:48:28,660
included using this sort of transform

00:48:27,490 --> 00:48:31,930
mode it's included with this sort of

00:48:28,660 --> 00:48:34,750
palette and that ends up doing a good

00:48:31,930 --> 00:48:36,339
job of mashing the the original screen

00:48:34,750 --> 00:48:39,400
image and then like I said earlier

00:48:36,339 --> 00:48:41,500
there's the these extra filters we have

00:48:39,400 --> 00:48:45,339
and in particular that da the the

00:48:41,500 --> 00:48:47,410
directional the constraint the CD CD

00:48:45,339 --> 00:48:49,280
after a rush little enhancement filter

00:48:47,410 --> 00:48:50,900
does a really good job of

00:48:49,280 --> 00:48:53,060
smoothing out these edges on the screen

00:48:50,900 --> 00:48:55,130
content where you have you know sort of

00:48:53,060 --> 00:48:58,130
garbage added by your text ringing

00:48:55,130 --> 00:49:00,110
layout and this is similar to how other

00:48:58,130 --> 00:49:04,970
other modern two you could try to try to

00:49:00,110 --> 00:49:06,950
approach the problem as well cool can

00:49:04,970 --> 00:49:09,560
you hear me I'm sorry I'm not bad with

00:49:06,950 --> 00:49:11,500
mute button so so there's one more

00:49:09,560 --> 00:49:15,290
question that came on to the ether pad

00:49:11,500 --> 00:49:18,050
from Andy he would like to know how long

00:49:15,290 --> 00:49:22,190
do you think before CD ends like Akamai

00:49:18,050 --> 00:49:29,210
are offering delivery of a v1 bitstreams

00:49:22,190 --> 00:49:30,530
or those conversations yeah so I guess

00:49:29,210 --> 00:49:32,960
we'll learn more about that we're gonna

00:49:30,530 --> 00:49:34,250
be at nav next week talking about the

00:49:32,960 --> 00:49:37,190
launch of a t1 and there's a bunch of

00:49:34,250 --> 00:49:39,260
content providers there I think a lot of

00:49:37,190 --> 00:49:40,850
that's predicated on seeing a deployment

00:49:39,260 --> 00:49:43,280
of software decoders right so if all the

00:49:40,850 --> 00:49:44,990
browser's ship this thing right away and

00:49:43,280 --> 00:49:46,760
there's a performance improvement by

00:49:44,990 --> 00:49:48,740
doing this transcoding to a v1 I

00:49:46,760 --> 00:49:50,150
guarantee that CD ends will do this

00:49:48,740 --> 00:49:51,860
because it will save them money right

00:49:50,150 --> 00:49:53,030
that's the name of the game and the fact

00:49:51,860 --> 00:49:56,210
that this royalty-free means it's easy

00:49:53,030 --> 00:49:57,920
to do I think you might see varying

00:49:56,210 --> 00:49:59,270
levels of adoption based on the contents

00:49:57,920 --> 00:50:01,910
of things that that you could encode

00:49:59,270 --> 00:50:04,490
once and you know share over and over

00:50:01,910 --> 00:50:05,690
again I expect to see you encoded maybe

00:50:04,490 --> 00:50:07,820
first just because you can do the

00:50:05,690 --> 00:50:11,800
investment upfront then maybe that will

00:50:07,820 --> 00:50:15,590
change over time to sort of live things

00:50:11,800 --> 00:50:18,230
cool right so NAB for folks on the call

00:50:15,590 --> 00:50:21,340
is the National Association of

00:50:18,230 --> 00:50:26,680
Broadcasters I think it's a great big

00:50:21,340 --> 00:50:30,200
like like the CES of TV production and

00:50:26,680 --> 00:50:33,860
entertainment production so that's

00:50:30,200 --> 00:50:35,840
happening soon I'm gonna do a last call

00:50:33,860 --> 00:50:38,300
for questions in the room Gabriel

00:50:35,840 --> 00:50:44,720
anything else on your mind or anyone

00:50:38,300 --> 00:50:47,330
else thanks everyone for for joining I

00:50:44,720 --> 00:50:52,250
left some links to the like to the are

00:50:47,330 --> 00:50:54,200
we compressed tool in the ether pad I'm

00:50:52,250 --> 00:50:56,330
afraid we didn't do a great job taking

00:50:54,200 --> 00:50:59,540
notes but there will be the recording it

00:50:56,330 --> 00:51:01,040
will be it will be captioned and we'll

00:50:59,540 --> 00:51:02,119
be sharing that and I just wanted to

00:51:01,040 --> 00:51:04,829
thank

00:51:02,119 --> 00:51:09,920
Michael and Nathan for taking the time

00:51:04,829 --> 00:51:14,280
and talking about this really exciting

00:51:09,920 --> 00:51:16,770
project which will also save I think

00:51:14,280 --> 00:51:19,050
it's fair I think hundreds of thousands

00:51:16,770 --> 00:51:21,150
maybe more will save tons of money from

00:51:19,050 --> 00:51:24,329
Mozilla which means we will be able to

00:51:21,150 --> 00:51:28,670
do other things that that we all care

00:51:24,329 --> 00:51:32,280
about and that Mozilla ins care about so

00:51:28,670 --> 00:51:38,220
last call for comments announcements

00:51:32,280 --> 00:51:40,500
questions if not expect yeah okay this

00:51:38,220 --> 00:51:42,180
video will be transcoded I'll drop the

00:51:40,500 --> 00:51:44,910
link into the channels a little later

00:51:42,180 --> 00:51:48,030
today tomorrow depending on your

00:51:44,910 --> 00:51:51,450
timezone and thank you again good luck

00:51:48,030 --> 00:51:54,869
guys in in Vegas and see you next time

00:51:51,450 --> 00:51:59,420
alright everybody thank you keep on

00:51:54,869 --> 00:51:59,420

YouTube URL: https://www.youtube.com/watch?v=lEdqN22vaWs


