Title: Web transport, today and tomorrow
Publication date: 2018-03-09
Playlist: Mozilla Tech Speakers
Description: 
	Daniel Stenberg, Mozilla engineer and creator/maintainer of the cURL project, shares a look at what's ahead for HTTP and describes modern transport protocols.
Captions: 
	00:00:04,899 --> 00:00:09,710
hello everyone welcome to our tech

00:00:07,640 --> 00:00:12,110
briefing today with Daniel Steinberg

00:00:09,710 --> 00:00:14,270
Daniel based in Stockholm and he will

00:00:12,110 --> 00:00:17,539
deliver a presentation about web

00:00:14,270 --> 00:00:19,880
transfer today and tomorrow I hope it

00:00:17,539 --> 00:00:21,679
will be informative for most of you and

00:00:19,880 --> 00:00:27,140
most of the people who are watching us

00:00:21,679 --> 00:00:30,289
on Mozilla and also I would thank Daniel

00:00:27,140 --> 00:00:33,530
to accept our our invitation for this

00:00:30,289 --> 00:00:36,980
tech briefing we will be looking forward

00:00:33,530 --> 00:00:39,080
for your questions that you can write in

00:00:36,980 --> 00:00:42,410
the etherpad charge in the invitation

00:00:39,080 --> 00:00:43,280
and we can deliver them to Daniel after

00:00:42,410 --> 00:00:45,980
his presentation

00:00:43,280 --> 00:00:47,300
so Daniel feel free to to start whenever

00:00:45,980 --> 00:00:51,500
you are ready

00:00:47,300 --> 00:00:59,810
hi I'm going to share my screen here

00:00:51,500 --> 00:01:07,100
then if I can just figure out how to do

00:00:59,810 --> 00:01:13,549
it one second so is this my screen can

00:01:07,100 --> 00:01:15,859
you see it yeah I can see it perfect

00:01:13,549 --> 00:01:18,679
then and then I'm going to start I'm

00:01:15,859 --> 00:01:20,929
going to talk about web transport today

00:01:18,679 --> 00:01:25,280
and tomorrow and the web transport in

00:01:20,929 --> 00:01:28,280
this context is of course HTTP but first

00:01:25,280 --> 00:01:30,350
some words about myself then I'm Daniel

00:01:28,280 --> 00:01:30,740
Steinberg I live here in Stockholm

00:01:30,350 --> 00:01:36,439
Sweden

00:01:30,740 --> 00:01:39,579
well it's pitch dark by now I'm known

00:01:36,439 --> 00:01:42,380
for having started and I lead the curl

00:01:39,579 --> 00:01:45,039
project which is a command like to the

00:01:42,380 --> 00:01:49,340
library for doing Internet transfers I

00:01:45,039 --> 00:01:49,759
started writing my HTTP code back 20

00:01:49,340 --> 00:01:52,159
years ago

00:01:49,759 --> 00:01:56,659
Kurt actually turns 20 years in two

00:01:52,159 --> 00:01:58,819
weeks so after and about 10 years ago I

00:01:56,659 --> 00:02:01,039
started to participate within the IETF

00:01:58,819 --> 00:02:04,939
with the protocol standardization and

00:02:01,039 --> 00:02:07,549
how to do it should be protocol work

00:02:04,939 --> 00:02:10,220
within the IETF and I joined Mozilla

00:02:07,549 --> 00:02:11,330
four years ago and I work in the neck Oh

00:02:10,220 --> 00:02:15,770
team in

00:02:11,330 --> 00:02:18,590
during the days that's me I wanted to

00:02:15,770 --> 00:02:22,040
talk about web transport today and web

00:02:18,590 --> 00:02:25,010
transport is HTTP primarily HTTP one

00:02:22,040 --> 00:02:31,490
came already back in the 90s started to

00:02:25,010 --> 00:02:34,610
get specified 1996 I believe and we made

00:02:31,490 --> 00:02:36,650
HP to a few years ago and there's a next

00:02:34,610 --> 00:02:40,420
thing coming called quick and I'll

00:02:36,650 --> 00:02:44,420
mention a little bit about that

00:02:40,420 --> 00:02:47,120
so since I'm doing this live like this

00:02:44,420 --> 00:02:49,700
and I can't hear or see anyone I hope

00:02:47,120 --> 00:02:53,510
you enter your questions and we can take

00:02:49,700 --> 00:02:55,910
them after my presentation there's also

00:02:53,510 --> 00:02:58,820
a link in the ether pad to these slides

00:02:55,910 --> 00:03:04,370
if you want to keep up on in your end or

00:02:58,820 --> 00:03:06,230
whatever okay so the MD web of today is

00:03:04,370 --> 00:03:08,840
a GP and we're adding more and more

00:03:06,230 --> 00:03:13,370
stuff on our web pages this is a graph

00:03:08,840 --> 00:03:14,959
showing how the number in the red graph

00:03:13,370 --> 00:03:18,920
here the red line is the number of

00:03:14,959 --> 00:03:21,590
objects per site on average loading the

00:03:18,920 --> 00:03:23,600
front page of the primary of the biggest

00:03:21,590 --> 00:03:25,790
sites on the internet today where we can

00:03:23,600 --> 00:03:28,010
see that the number of objects on an

00:03:25,790 --> 00:03:30,769
average site has increased from 80 to

00:03:28,010 --> 00:03:34,760
110 over the last six years and the size

00:03:30,769 --> 00:03:37,850
of the site's engine in average has also

00:03:34,760 --> 00:03:39,170
well boomed really it's increasing all

00:03:37,850 --> 00:03:41,810
the time so it's getting larger and

00:03:39,170 --> 00:03:44,150
larger and more and more objects at this

00:03:41,810 --> 00:03:45,830
and at the same time we see that well

00:03:44,150 --> 00:03:47,510
roughly half of the reach of the

00:03:45,830 --> 00:03:49,910
resources or all the requestor are

00:03:47,510 --> 00:03:52,280
asking for all these objects on the

00:03:49,910 --> 00:03:55,310
sites are asking for objects on the same

00:03:52,280 --> 00:03:59,239
domain which I'll explain why that

00:03:55,310 --> 00:04:01,489
matters but so that's this is sort of

00:03:59,239 --> 00:04:04,340
the trend and there's no there's no and

00:04:01,489 --> 00:04:06,200
you know of this trend inside there's

00:04:04,340 --> 00:04:10,580
going to be more data and more objects

00:04:06,200 --> 00:04:13,100
and more requests per site and at the

00:04:10,580 --> 00:04:16,419
same time HTTP 1 is what I call a

00:04:13,100 --> 00:04:19,190
round-trip Bonanza which means that if

00:04:16,419 --> 00:04:21,320
if we're looking at this little graph

00:04:19,190 --> 00:04:23,390
I'm showing myself on the left side here

00:04:21,320 --> 00:04:25,560
as the lego man and the cloud is on the

00:04:23,390 --> 00:04:28,530
right side we can see that when we

00:04:25,560 --> 00:04:30,990
four things we have 110 objects to get

00:04:28,530 --> 00:04:33,090
we ask for it we wait for the response

00:04:30,990 --> 00:04:36,330
and the response comes back this is HP

00:04:33,090 --> 00:04:38,010
one so it's a ping and pong and the

00:04:36,330 --> 00:04:39,660
further away the further way to the

00:04:38,010 --> 00:04:41,850
cloud the longer time we will have to

00:04:39,660 --> 00:04:44,730
wait for the response of course there's

00:04:41,850 --> 00:04:47,190
a bandwidth issue here too but it's it's

00:04:44,730 --> 00:04:50,430
primarily a ping and pong thing here and

00:04:47,190 --> 00:04:52,680
if we want to ask for more objects we

00:04:50,430 --> 00:04:55,680
ask again and we ask again and they have

00:04:52,680 --> 00:04:59,580
the itch wait for the next request one

00:04:55,680 --> 00:05:01,979
at the time ping pong ping pong and to

00:04:59,580 --> 00:05:03,540
circumvent sort of or to smooth out the

00:05:01,979 --> 00:05:06,000
problems with this all this waiting in

00:05:03,540 --> 00:05:09,810
both sides you can do many of these at

00:05:06,000 --> 00:05:12,330
the same time standard browser today

00:05:09,810 --> 00:05:14,610
uses six connections when they're

00:05:12,330 --> 00:05:16,729
talking HTTP one so you have six of

00:05:14,610 --> 00:05:21,300
these at the same time to the same site

00:05:16,729 --> 00:05:21,840
or same hostname but it's still a lot of

00:05:21,300 --> 00:05:25,560
ping pong

00:05:21,840 --> 00:05:28,050
the cloud is far away sometimes and at

00:05:25,560 --> 00:05:30,660
the same time we have a what we call

00:05:28,050 --> 00:05:33,180
head of line blocking problem which

00:05:30,660 --> 00:05:35,460
basically it means that it's like in the

00:05:33,180 --> 00:05:37,530
supermarket there are several lines and

00:05:35,460 --> 00:05:40,620
you you want to put yourself in one of

00:05:37,530 --> 00:05:42,770
the lines to pay your groceries or

00:05:40,620 --> 00:05:45,750
whatever and which line is the fastest

00:05:42,770 --> 00:05:48,630
this is roughly the same problem that

00:05:45,750 --> 00:05:51,419
the browser has the browser then uses

00:05:48,630 --> 00:05:53,460
these potentially six connections to the

00:05:51,419 --> 00:05:55,740
same site but it has two delivery quests

00:05:53,460 --> 00:05:57,090
over each of these connections and it's

00:05:55,740 --> 00:05:59,750
really hard to know which of these

00:05:57,090 --> 00:06:02,130
connections to put the request in and

00:05:59,750 --> 00:06:03,870
there's always there's a risk that the

00:06:02,130 --> 00:06:06,810
person in front of you is going to be

00:06:03,870 --> 00:06:09,479
very slow or very in the HP context and

00:06:06,810 --> 00:06:11,160
very big or at least take a lot of time

00:06:09,479 --> 00:06:14,010
so you don't want to be waiting behind

00:06:11,160 --> 00:06:16,200
that you don't want that head of line to

00:06:14,010 --> 00:06:20,639
the person in the head of line to block

00:06:16,200 --> 00:06:22,200
you which is it's a tricky problem you

00:06:20,639 --> 00:06:24,240
can of course in the HP case you can

00:06:22,200 --> 00:06:25,770
also add start a new line which is

00:06:24,240 --> 00:06:27,780
basically that starting in new TCP

00:06:25,770 --> 00:06:30,510
connection but you can only do that so

00:06:27,780 --> 00:06:32,370
far because you're wasting resources and

00:06:30,510 --> 00:06:35,150
it's hard for everyone and it's also a

00:06:32,370 --> 00:06:36,330
slow process to start a new connection

00:06:35,150 --> 00:06:39,180
so

00:06:36,330 --> 00:06:42,900
those are sort of two of the primary

00:06:39,180 --> 00:06:45,659
problems with HTTP 1 and but of course

00:06:42,900 --> 00:06:47,879
facing problems with HCP 1 people

00:06:45,659 --> 00:06:50,069
invented workarounds and some of the

00:06:47,879 --> 00:06:52,650
workarounds that people came up with for

00:06:50,069 --> 00:06:56,819
HP one or one that one which is the

00:06:52,650 --> 00:06:58,620
latest one HP one version was people

00:06:56,819 --> 00:07:01,860
came up with a spriting technique which

00:06:58,620 --> 00:07:03,599
is basically that instead of letting the

00:07:01,860 --> 00:07:05,940
browser ask for a lot of different

00:07:03,599 --> 00:07:09,330
images you put a lot of images into one

00:07:05,940 --> 00:07:11,819
single blob so in this case then if you

00:07:09,330 --> 00:07:15,270
have an site that you want to that you

00:07:11,819 --> 00:07:18,690
want to display flags on some page or

00:07:15,270 --> 00:07:20,699
maybe several pages but so you put all

00:07:18,690 --> 00:07:22,650
the flags of the entire in from the

00:07:20,699 --> 00:07:25,169
entire world into one image and the

00:07:22,650 --> 00:07:27,389
browser only has to ask for one image

00:07:25,169 --> 00:07:29,520
and he'll get everything at once without

00:07:27,389 --> 00:07:32,699
those ping-pong ping-pong ping-pong well

00:07:29,520 --> 00:07:35,150
you'll just get a single ping and a huge

00:07:32,699 --> 00:07:38,879
pong back with all the images at once

00:07:35,150 --> 00:07:40,650
which then makes it helps you avoid a

00:07:38,879 --> 00:07:43,289
lot of round trips back and forth so it

00:07:40,650 --> 00:07:45,750
goes faster but you probably get more

00:07:43,289 --> 00:07:48,050
data than you want it it's going to

00:07:45,750 --> 00:07:51,779
waste more data in your cache and it's

00:07:48,050 --> 00:07:53,520
complicated for I mean to produce this

00:07:51,779 --> 00:07:55,919
image and you have to use Java scripts

00:07:53,520 --> 00:07:58,139
or CSS and stuff to carve out the little

00:07:55,919 --> 00:08:01,860
images you particularly want to show on

00:07:58,139 --> 00:08:05,099
your specific pages and of course

00:08:01,860 --> 00:08:07,440
updating one of these flags know that

00:08:05,099 --> 00:08:10,050
Flags are updated that often but if you

00:08:07,440 --> 00:08:12,479
would and you would have to get an

00:08:10,050 --> 00:08:14,599
entirely new image of course which then

00:08:12,479 --> 00:08:16,889
also would be sort of a waste of

00:08:14,599 --> 00:08:19,500
bandwidth instead of just getting this

00:08:16,889 --> 00:08:22,229
little single flag that is updated and

00:08:19,500 --> 00:08:24,779
and the other version of this is that

00:08:22,229 --> 00:08:26,969
you could also do what they're called

00:08:24,779 --> 00:08:29,909
inlining which basically means that you

00:08:26,969 --> 00:08:33,630
put the image into your style sheet

00:08:29,909 --> 00:08:35,849
instead of putting it a separate object

00:08:33,630 --> 00:08:38,669
so you cram the image into your style

00:08:35,849 --> 00:08:41,279
sheet so if you ask for your CSS you get

00:08:38,669 --> 00:08:44,370
a lot of images embedded into that style

00:08:41,279 --> 00:08:47,880
sheet and him as shown them in my slide

00:08:44,370 --> 00:08:48,700
hair it's it's it becomes a fairly big

00:08:47,880 --> 00:08:52,600
chunk of

00:08:48,700 --> 00:08:55,180
64 encoded stuff not very readable mass

00:08:52,600 --> 00:08:57,070
and that's again here you need probably

00:08:55,180 --> 00:08:59,110
need tools to do this in a convenient

00:08:57,070 --> 00:09:01,120
way and updating one of these images of

00:08:59,110 --> 00:09:06,630
course and requires you to download a

00:09:01,120 --> 00:09:09,820
new CSS and so on and then the same

00:09:06,630 --> 00:09:13,750
version of that sort of putting a lot of

00:09:09,820 --> 00:09:15,460
objects into a big object is done with

00:09:13,750 --> 00:09:17,920
JavaScript you as well and then you just

00:09:15,460 --> 00:09:20,500
put all the Java scripts into a single

00:09:17,920 --> 00:09:23,830
monster so that you just request one

00:09:20,500 --> 00:09:27,550
huge file instead of many small ones

00:09:23,830 --> 00:09:30,520
that is all of these are of course to

00:09:27,550 --> 00:09:31,930
make sure that you mitigate the you

00:09:30,520 --> 00:09:33,670
reduce the number of requests that you

00:09:31,930 --> 00:09:37,300
have to do to get contents you instead

00:09:33,670 --> 00:09:43,320
of many small ones you get fewer large

00:09:37,300 --> 00:09:46,120
ones and another way to enhance your

00:09:43,320 --> 00:09:48,280
experience with hp1 is to make sure that

00:09:46,120 --> 00:09:50,790
your browser is using more connections

00:09:48,280 --> 00:09:53,650
to your site which people are doing with

00:09:50,790 --> 00:09:56,530
sharding which basically is that you

00:09:53,650 --> 00:10:01,300
invent more host times for your site and

00:09:56,530 --> 00:10:02,980
you count on the browsers to use say six

00:10:01,300 --> 00:10:04,840
connections for each host name so you

00:10:02,980 --> 00:10:06,790
invent a lot of those times and you get

00:10:04,840 --> 00:10:09,550
six connections for each of these host

00:10:06,790 --> 00:10:11,470
names like in this case I believe it's

00:10:09,550 --> 00:10:14,890
eight new host names for this is a

00:10:11,470 --> 00:10:16,690
Swedish tabloids website so instead of

00:10:14,890 --> 00:10:19,180
getting six connections to the site you

00:10:16,690 --> 00:10:20,880
get forty nine or so which of course

00:10:19,180 --> 00:10:25,180
that helps if you want to get a lot of

00:10:20,880 --> 00:10:27,280
images for example in parallel but of

00:10:25,180 --> 00:10:31,410
course again there is a limit to when

00:10:27,280 --> 00:10:35,080
this is useful and when it's harmful so

00:10:31,410 --> 00:10:38,200
all of these funny workarounds or were

00:10:35,080 --> 00:10:41,560
used as input when people came up and

00:10:38,200 --> 00:10:45,090
gather round and made the next iteration

00:10:41,560 --> 00:10:50,170
of the protocol called HTTP two that was

00:10:45,090 --> 00:10:53,770
shipped in 2015 now yeah it's

00:10:50,170 --> 00:10:57,220
approaching three years ago so it's not

00:10:53,770 --> 00:10:59,680
that new anymore but anyway the point

00:10:57,220 --> 00:11:01,570
with HTTP two is to maintain the same

00:10:59,680 --> 00:11:04,990
HTTP semantics

00:11:01,570 --> 00:11:07,839
from hiv-1 but change how it is

00:11:04,990 --> 00:11:10,029
transported so the same semantics means

00:11:07,839 --> 00:11:12,190
that it's still a client's client-server

00:11:10,029 --> 00:11:14,889
there are still requests and response

00:11:12,190 --> 00:11:18,190
sisters headers and there's body so

00:11:14,889 --> 00:11:21,339
basically the same things from a GP one

00:11:18,190 --> 00:11:24,519
are still in HTTP 2 but everything but

00:11:21,339 --> 00:11:26,860
the specifics on how we transport those

00:11:24,519 --> 00:11:28,569
little bits over the wire is modified

00:11:26,860 --> 00:11:31,500
and changed and it's not at all the same

00:11:28,569 --> 00:11:36,040
thing anymore and I'll show you how that

00:11:31,500 --> 00:11:38,709
affects the transport for one of the

00:11:36,040 --> 00:11:42,459
primary things that is introduced in a

00:11:38,709 --> 00:11:44,589
GP 2 is multiplex multiplexing which is

00:11:42,459 --> 00:11:47,230
that you're doing you can do many

00:11:44,589 --> 00:11:50,230
logical streams over is the same

00:11:47,230 --> 00:11:53,440
physical TCP connection so as I

00:11:50,230 --> 00:11:56,860
mentioned before previously you you did

00:11:53,440 --> 00:11:58,660
request and response ping pong on the

00:11:56,860 --> 00:12:00,040
same connection and you had to wait for

00:11:58,660 --> 00:12:01,509
the other one to complete before you

00:12:00,040 --> 00:12:04,089
could do the next one because you could

00:12:01,509 --> 00:12:05,800
only do one at the time and wait for the

00:12:04,089 --> 00:12:07,990
response until you couldn't do the next

00:12:05,800 --> 00:12:10,240
one but we they should be - you don't

00:12:07,990 --> 00:12:13,029
need to do that anymore you can do a lot

00:12:10,240 --> 00:12:16,089
of parallel one over the same connection

00:12:13,029 --> 00:12:17,910
so in this case my illustration here

00:12:16,089 --> 00:12:20,649
shows if you want to get two images

00:12:17,910 --> 00:12:23,260
which happens to be two trains the just

00:12:20,649 --> 00:12:26,199
in train and the IKEA train you don't

00:12:23,260 --> 00:12:27,639
have to and either use two connections

00:12:26,199 --> 00:12:29,800
for them when you don't worry you don't

00:12:27,639 --> 00:12:32,649
have to first get the one train and then

00:12:29,800 --> 00:12:34,870
get another train but in HTTP 2 you can

00:12:32,649 --> 00:12:37,569
actually ask for them both at once and

00:12:34,870 --> 00:12:39,810
they can come back to you multiplexed

00:12:37,569 --> 00:12:42,399
over the same connection sort of just

00:12:39,810 --> 00:12:45,519
intermixed like this and they're sort of

00:12:42,399 --> 00:12:50,860
of course then separated in the other

00:12:45,519 --> 00:12:52,689
end this then helps that it makes much

00:12:50,860 --> 00:12:54,459
better utilization of bandwidth so in

00:12:52,689 --> 00:12:56,470
this ping pong case I showed you before

00:12:54,459 --> 00:12:58,810
with me as the Lego man and the cloud

00:12:56,470 --> 00:13:00,279
when you ask something and you wait for

00:12:58,810 --> 00:13:02,470
response you still have to wait because

00:13:00,279 --> 00:13:05,259
the distance to the cloud is still the

00:13:02,470 --> 00:13:07,420
same and the cloud might be far away the

00:13:05,259 --> 00:13:10,449
earth is still still big in the globe is

00:13:07,420 --> 00:13:11,829
big so in in the in the extreme cases

00:13:10,449 --> 00:13:13,660
you have to wait a long time until you

00:13:11,829 --> 00:13:15,190
get a response but since you're now

00:13:13,660 --> 00:13:17,440
using this multiplayer

00:13:15,190 --> 00:13:18,970
Rochelle when you can do more things at

00:13:17,440 --> 00:13:20,950
once over the same connection you don't

00:13:18,970 --> 00:13:23,590
have to wait for the response to come

00:13:20,950 --> 00:13:25,030
back until you send the next request so

00:13:23,590 --> 00:13:27,760
in this case you can actually send the

00:13:25,030 --> 00:13:29,320
next request immediately after you sent

00:13:27,760 --> 00:13:30,880
the first one so you don't have to wait

00:13:29,320 --> 00:13:33,700
for the first response and he listened

00:13:30,880 --> 00:13:37,300
that request number two and the response

00:13:33,700 --> 00:13:39,670
number to be like this second blue arrow

00:13:37,300 --> 00:13:41,290
here it might be slow but it doesn't

00:13:39,670 --> 00:13:43,450
really affect you because you can still

00:13:41,290 --> 00:13:45,220
send this third request and the third

00:13:43,450 --> 00:13:50,140
request might actually get the response

00:13:45,220 --> 00:13:51,880
back faster then the second request all

00:13:50,140 --> 00:13:55,060
over the second response here because

00:13:51,880 --> 00:13:59,500
they're all a multiplexer they can come

00:13:55,060 --> 00:14:01,180
back in in a different pace so this

00:13:59,500 --> 00:14:02,920
means that you can utilize the bandwidth

00:14:01,180 --> 00:14:05,290
much better you can saturate the

00:14:02,920 --> 00:14:07,120
bandwidth pretty much in both directions

00:14:05,290 --> 00:14:09,010
here you don't have to wait until you

00:14:07,120 --> 00:14:10,870
send your next request or you don't have

00:14:09,010 --> 00:14:15,460
to wait until you send the response from

00:14:10,870 --> 00:14:18,730
the server side there are more details

00:14:15,460 --> 00:14:23,500
to HP to then multiplexing but that's

00:14:18,730 --> 00:14:29,290
sort of the primary thing I think anyway

00:14:23,500 --> 00:14:30,480
that was HT p2 then came as an RFC in in

00:14:29,290 --> 00:14:34,900
May 2015

00:14:30,480 --> 00:14:36,610
RFC 7540 and it's been it was already

00:14:34,900 --> 00:14:40,780
adopted by then and it was has been

00:14:36,610 --> 00:14:42,700
supported by a lot of software's already

00:14:40,780 --> 00:14:46,770
before and since none and server-side

00:14:42,700 --> 00:14:46,770
basically everything that is server

00:14:46,860 --> 00:14:52,180
servers that you are using or seeing

00:14:49,210 --> 00:14:55,060
online today they're all supporting HTTP

00:14:52,180 --> 00:14:58,570
to so everything server wise that you

00:14:55,060 --> 00:15:00,670
want to use that is reasonably updated

00:14:58,570 --> 00:15:04,690
supports A to B - and of course all

00:15:00,670 --> 00:15:06,970
browsers and I would say most clients

00:15:04,690 --> 00:15:09,070
these clients these days support you to

00:15:06,970 --> 00:15:14,410
be - if they if they want to if there

00:15:09,070 --> 00:15:18,550
are sort of aspiring to be interact with

00:15:14,410 --> 00:15:21,339
web development so software wise it's

00:15:18,550 --> 00:15:24,280
good and if you're looking at stats if

00:15:21,339 --> 00:15:27,490
you check the telemetry or Firefox we

00:15:24,280 --> 00:15:28,510
can see that we're getting a fair amount

00:15:27,490 --> 00:15:32,140
or a ship it to you

00:15:28,510 --> 00:15:35,290
responses back so in this is Firefox

00:15:32,140 --> 00:15:39,780
release in March 2018 right now then

00:15:35,290 --> 00:15:44,550
that 42% of all HTTP responses that we

00:15:39,780 --> 00:15:46,450
get that we get with Firefox is HTTP to

00:15:44,550 --> 00:15:50,260
42% here is done

00:15:46,450 --> 00:15:56,080
out of all HTTP responses HTTP as in

00:15:50,260 --> 00:15:58,960
both HTTP in HPS and for reasons that

00:15:56,080 --> 00:16:05,140
I'm not going to address right now if

00:15:58,960 --> 00:16:07,150
the p2 is only enabled for HTTP by all

00:16:05,140 --> 00:16:10,810
browsers and basically all servers so

00:16:07,150 --> 00:16:13,480
for old stylish repeat without tell us

00:16:10,810 --> 00:16:16,000
I'm in the insecure way of doing a tepee

00:16:13,480 --> 00:16:19,240
there won't be an HTTP 2 so basically

00:16:16,000 --> 00:16:24,160
only GPS sites can offer a shippi to and

00:16:19,240 --> 00:16:31,260
out of HTTPS sites Firefox gets roughly

00:16:24,160 --> 00:16:34,810
70% it should be 2 and I you could

00:16:31,260 --> 00:16:38,670
question why there aren't more than 70%

00:16:34,810 --> 00:16:43,510
but I don't know that's not my

00:16:38,670 --> 00:16:47,110
speciality and if we look at it from the

00:16:43,510 --> 00:16:51,100
other side we can just check statistics

00:16:47,110 --> 00:16:53,560
for how the websites are doing and right

00:16:51,100 --> 00:16:57,100
now out of the top 10 million websites

00:16:53,560 --> 00:17:01,630
24 percents seems to have them HP to

00:16:57,100 --> 00:17:03,640
enabled not terribly much but it has at

00:17:01,630 --> 00:17:06,100
least double the last 12 months it has

00:17:03,640 --> 00:17:09,640
actually doubled the last 12 months for

00:17:06,100 --> 00:17:13,380
a while so the trend is is definitely

00:17:09,640 --> 00:17:17,050
going upwards and out of the top 1,000

00:17:13,380 --> 00:17:20,730
websites more than a third has it

00:17:17,050 --> 00:17:24,280
enabled least so it is fairly well used

00:17:20,730 --> 00:17:29,020
and it does make most sites faster when

00:17:24,280 --> 00:17:30,850
when you enable it it's as a as as

00:17:29,020 --> 00:17:33,390
someone who makes a website is fairly

00:17:30,850 --> 00:17:36,570
easy to just enable the HP to at least

00:17:33,390 --> 00:17:39,850
the basic just make sure that it works

00:17:36,570 --> 00:17:42,330
make the best out of it might be a

00:17:39,850 --> 00:17:42,330
little bit more

00:17:43,330 --> 00:17:50,270
so that is HTTP 1 some of the problems

00:17:47,330 --> 00:17:53,540
and some of the quirks and how some of

00:17:50,270 --> 00:17:54,910
those issues were fixed with HTTP 2

00:17:53,540 --> 00:17:57,410
since you could then do everything

00:17:54,910 --> 00:17:58,910
multiplexed and you didn't have to you

00:17:57,410 --> 00:18:01,520
could then avoid a lot of the

00:17:58,910 --> 00:18:03,800
workarounds that you did with HTTP 1 to

00:18:01,520 --> 00:18:11,540
make it faster and avoid a lot of ground

00:18:03,800 --> 00:18:14,270
trips so we have them shipped HP to the

00:18:11,540 --> 00:18:17,360
world is using ATP to to some extent at

00:18:14,270 --> 00:18:19,400
least we're approaching well over a

00:18:17,360 --> 00:18:21,770
third of the web sites and all the

00:18:19,400 --> 00:18:24,560
browsers and everything so how has it

00:18:21,770 --> 00:18:27,400
played out in the real world then if we

00:18:24,560 --> 00:18:32,180
look at sort of some real-world numbers

00:18:27,400 --> 00:18:35,720
did HP team meets its promises or does

00:18:32,180 --> 00:18:38,150
it whatever if we look at the most

00:18:35,720 --> 00:18:41,330
remote corners of the internet and we go

00:18:38,150 --> 00:18:45,160
back here to Firefox telemetry numbers

00:18:41,330 --> 00:18:48,170
we can see this is the round-trip

00:18:45,160 --> 00:18:53,510
round-trip time numbers to web sites and

00:18:48,170 --> 00:18:56,480
that Firefox is interacting with and if

00:18:53,510 --> 00:18:59,060
we then look in particular the last 95th

00:18:56,480 --> 00:19:00,800
percentile the really remote corners of

00:18:59,060 --> 00:19:03,500
the Internet as I say here in this slide

00:19:00,800 --> 00:19:05,810
we can see that on the desktop and

00:19:03,500 --> 00:19:08,510
mobile browsers the distance to the site

00:19:05,810 --> 00:19:11,210
I mean you go back to this slide if you

00:19:08,510 --> 00:19:13,340
remember the lego man and the cloud the

00:19:11,210 --> 00:19:15,740
distance here is the round-trip time is

00:19:13,340 --> 00:19:17,810
a ton in the desktop case 800

00:19:15,740 --> 00:19:21,050
milliseconds and in the mobile case over

00:19:17,810 --> 00:19:24,560
900 milliseconds and approaching one

00:19:21,050 --> 00:19:27,320
second to this server that's a very long

00:19:24,560 --> 00:19:29,870
time so if if you have to wait for each

00:19:27,320 --> 00:19:33,380
request you know the ping-pong if that

00:19:29,870 --> 00:19:36,560
takes one second it'll make sites with

00:19:33,380 --> 00:19:39,080
110 objects really really slow even if

00:19:36,560 --> 00:19:42,440
you use many connections if each request

00:19:39,080 --> 00:19:44,390
is going to take one second ping-pong it

00:19:42,440 --> 00:19:46,310
is going to be horribly slow so of

00:19:44,390 --> 00:19:47,810
course in this case instead of waiting

00:19:46,310 --> 00:19:51,890
for the ping-pong when you can go to

00:19:47,810 --> 00:19:54,710
HTTP to you will gain enormous amounts

00:19:51,890 --> 00:19:58,250
so we're at least

00:19:54,710 --> 00:20:00,680
improving for these the worst cases but

00:19:58,250 --> 00:20:04,430
a lot and I'll show you some numbers on

00:20:00,680 --> 00:20:07,190
this if you then look at these waiting

00:20:04,430 --> 00:20:10,090
times internally in Firefox you know we

00:20:07,190 --> 00:20:13,070
had these lines I shall be legal cues

00:20:10,090 --> 00:20:15,380
there's basically outgoing lines when

00:20:13,070 --> 00:20:18,170
the browser wants to send away requests

00:20:15,380 --> 00:20:20,930
to decide to ask for a resource or

00:20:18,170 --> 00:20:23,420
whatever and it puts the request in

00:20:20,930 --> 00:20:26,150
little Q and it when it when it's time

00:20:23,420 --> 00:20:29,090
it sends out the request over the

00:20:26,150 --> 00:20:31,700
connection and if you look looking at

00:20:29,090 --> 00:20:34,460
queuing lines internally then how long

00:20:31,700 --> 00:20:37,670
time does Firefox way have to wait until

00:20:34,460 --> 00:20:40,640
it can send their requests we can see

00:20:37,670 --> 00:20:45,470
they're here in the table that again in

00:20:40,640 --> 00:20:49,460
the worst percentiles that yeah there

00:20:45,470 --> 00:20:53,120
are magnitudes of difference

00:20:49,460 --> 00:20:55,550
the it will HP - it's just so much

00:20:53,120 --> 00:20:59,240
faster so here in the worst cases we can

00:20:55,550 --> 00:21:02,450
see that like in 95 percentile here then

00:20:59,240 --> 00:21:05,480
the five worst percent that it's the

00:21:02,450 --> 00:21:07,100
well the users that the five percent of

00:21:05,480 --> 00:21:09,310
the users that have it really the worst

00:21:07,100 --> 00:21:12,050
here they've have increased from waiting

00:21:09,310 --> 00:21:15,080
2,000 milliseconds on average and down

00:21:12,050 --> 00:21:18,170
to nine 16 milliseconds which of course

00:21:15,080 --> 00:21:21,890
then makes sure that you get a lot of

00:21:18,170 --> 00:21:25,340
contents much faster I mean you get a

00:21:21,890 --> 00:21:27,680
lot of concepts back much faster so it

00:21:25,340 --> 00:21:31,700
should be - clearly has a benefit phul

00:21:27,680 --> 00:21:35,810
for those far away those users that had

00:21:31,700 --> 00:21:38,030
it the worst with HP one and we can also

00:21:35,810 --> 00:21:41,540
see that as the number show below the

00:21:38,030 --> 00:21:44,600
table here is the amount of requests

00:21:41,540 --> 00:21:48,760
that take more than 100 milliseconds in

00:21:44,600 --> 00:21:51,710
the queue and that also sort of

00:21:48,760 --> 00:21:55,450
significantly it has decreased

00:21:51,710 --> 00:21:59,060
technically significantly with HP -

00:21:55,450 --> 00:22:02,150
these numbers are a pillow they're more

00:21:59,060 --> 00:22:04,070
like two years old so that could be

00:22:02,150 --> 00:22:05,690
slightly different these days but the

00:22:04,070 --> 00:22:07,880
the trend is clear

00:22:05,690 --> 00:22:11,809
going from Asia p1 to p2

00:22:07,880 --> 00:22:13,820
the ones that the worst had the worst

00:22:11,809 --> 00:22:16,010
internet and have the worst sort of

00:22:13,820 --> 00:22:18,380
connections and distances to their sites

00:22:16,010 --> 00:22:26,539
and servers they have the most to gain

00:22:18,380 --> 00:22:29,240
from this but then um let me just

00:22:26,539 --> 00:22:31,490
preface that's weird grandma let's look

00:22:29,240 --> 00:22:38,030
at this graph this is a graph showing

00:22:31,490 --> 00:22:39,380
how HTTP one fares against HP - you

00:22:38,030 --> 00:22:40,760
don't really have to understand a lot of

00:22:39,380 --> 00:22:42,470
these graphs and there's a lot of

00:22:40,760 --> 00:22:44,320
numbers here and you don't have to sort

00:22:42,470 --> 00:22:47,630
of investigate the details you can see

00:22:44,320 --> 00:22:50,620
that the blue line to the left here and

00:22:47,630 --> 00:22:54,049
the the build orange those are to

00:22:50,620 --> 00:22:56,260
Firefox lines and the other the red and

00:22:54,049 --> 00:22:59,150
green ones are actually chrome lines

00:22:56,260 --> 00:23:02,000
this is from representation by by human

00:22:59,150 --> 00:23:06,740
at fastly and in this case we can

00:23:02,000 --> 00:23:09,010
receive how HTP one compares yes there

00:23:06,740 --> 00:23:12,049
should be two with those two browsers so

00:23:09,010 --> 00:23:12,320
by using both browsers both Firefox and

00:23:12,049 --> 00:23:15,440
Chrome

00:23:12,320 --> 00:23:18,500
it should supposedly or presumably or

00:23:15,440 --> 00:23:19,940
hopefully be a bit sort of browsers are

00:23:18,500 --> 00:23:23,390
independent but show how the

00:23:19,940 --> 00:23:25,429
technologies compared against each other

00:23:23,390 --> 00:23:28,220
and in the case here we can see that in

00:23:25,429 --> 00:23:29,780
the blue case it's it's faster because

00:23:28,220 --> 00:23:33,140
it's left of the orange case so in

00:23:29,780 --> 00:23:35,840
Firefox this case here in this synthetic

00:23:33,140 --> 00:23:38,240
case when you have 40 millisecond 40

00:23:35,840 --> 00:23:41,419
milliseconds latency to site no packet

00:23:38,240 --> 00:23:45,230
loss HTTP 2 is generally faster than

00:23:41,419 --> 00:23:48,230
HTTP 1 by some margin and the same is

00:23:45,230 --> 00:23:53,210
true for Chrome HTTP to is faster than

00:23:48,230 --> 00:23:55,669
HP 1 and what's sort of within

00:23:53,210 --> 00:23:59,240
parentheses Firefox is faster than

00:23:55,669 --> 00:24:00,830
Chrome but okay still this just shows

00:23:59,240 --> 00:24:02,240
that yeah in the normal case when you

00:24:00,830 --> 00:24:06,490
don't have packet loss and you have a

00:24:02,240 --> 00:24:09,559
season latency to the site CP 2 is

00:24:06,490 --> 00:24:12,110
better and you can also say this if you

00:24:09,559 --> 00:24:12,860
add latencies HTTP 2 is only going to be

00:24:12,110 --> 00:24:17,909
even better

00:24:12,860 --> 00:24:20,710
in comparison but in this synthetic case

00:24:17,909 --> 00:24:23,259
that human did he added a sort of

00:24:20,710 --> 00:24:25,240
artificial packet loss to compare this

00:24:23,259 --> 00:24:28,840
and in this the case we can then see

00:24:25,240 --> 00:24:30,429
that the blue and the red lines here are

00:24:28,840 --> 00:24:33,070
they should be one there should be two

00:24:30,429 --> 00:24:37,509
ones and the orange and the green are

00:24:33,070 --> 00:24:41,139
the HCP will one lines so and when we

00:24:37,509 --> 00:24:44,230
add packet loss we can see that both it

00:24:41,139 --> 00:24:47,639
should be two lines now took a huge step

00:24:44,230 --> 00:24:50,080
to the right and became the worst

00:24:47,639 --> 00:24:53,379
situation compared to the better

00:24:50,080 --> 00:24:54,730
situation it appeals and we don't have

00:24:53,379 --> 00:24:57,690
to look at the numbers you don't have to

00:24:54,730 --> 00:25:01,750
see anything this is just a show of how

00:24:57,690 --> 00:25:03,399
adding packet loss to the scenario two

00:25:01,750 --> 00:25:06,129
percent perfect packet loss which is a

00:25:03,399 --> 00:25:08,649
quite significant amount of Peck loss

00:25:06,129 --> 00:25:10,570
but it still shows that adding a lot of

00:25:08,649 --> 00:25:13,169
packet loss to the scenario makes it

00:25:10,570 --> 00:25:16,899
repeat too much

00:25:13,169 --> 00:25:20,639
not as nice it makes it much less nice

00:25:16,899 --> 00:25:26,490
as it was when things were better so a

00:25:20,639 --> 00:25:30,070
big sad face on that and of course this

00:25:26,490 --> 00:25:32,019
packet the packet loss here is explained

00:25:30,070 --> 00:25:33,639
I mean the severity of the packet loss

00:25:32,019 --> 00:25:36,039
is of course because now we they should

00:25:33,639 --> 00:25:38,649
be - we have one connection and hp1

00:25:36,039 --> 00:25:43,179
we had six connections so losing a

00:25:38,649 --> 00:25:45,669
little packet now it's much more severe

00:25:43,179 --> 00:25:47,019
compared to you losing one packet when

00:25:45,669 --> 00:25:49,120
you have six connections per the code

00:25:47,019 --> 00:25:51,700
because then you could probably continue

00:25:49,120 --> 00:25:53,169
your traffic on the other five or if you

00:25:51,700 --> 00:25:55,240
lost it on two connections you could

00:25:53,169 --> 00:25:58,179
continue on the other four but here if

00:25:55,240 --> 00:26:01,629
you lose one packet all connections

00:25:58,179 --> 00:26:04,269
stole where they should be - this is a

00:26:01,629 --> 00:26:06,309
new sort of head of line blocking based

00:26:04,269 --> 00:26:09,399
on sort of tcp-based head of line

00:26:06,309 --> 00:26:11,590
blocking so as soon as the TCP stalls

00:26:09,399 --> 00:26:14,889
everything stalls that is going on over

00:26:11,590 --> 00:26:16,929
the same TCP connection which I mean

00:26:14,889 --> 00:26:21,740
that's no surprise but it's still very

00:26:16,929 --> 00:26:25,330
visible in this Piccolo's case

00:26:21,740 --> 00:26:31,340
a single drop packet blocks all streams

00:26:25,330 --> 00:26:36,649
yeah so this is done yeah just me trying

00:26:31,340 --> 00:26:40,159
to visualize why this is so HDPE - of

00:26:36,649 --> 00:26:45,140
course is IP where TCP where TLS this is

00:26:40,159 --> 00:26:46,820
just internet working 101 class and we

00:26:45,140 --> 00:26:50,149
have it should be two frames sent of

00:26:46,820 --> 00:26:51,860
this and if you yeah right and we send

00:26:50,149 --> 00:26:54,830
the Train so that's the just in training

00:26:51,860 --> 00:26:56,870
and archaea train frames so and if we

00:26:54,830 --> 00:26:59,029
drop one of these packets we dropped one

00:26:56,870 --> 00:27:02,179
IP packet perhaps because we have a

00:26:59,029 --> 00:27:03,679
crappy connection nothing else can

00:27:02,179 --> 00:27:06,950
continue because it's completely online

00:27:03,679 --> 00:27:08,600
you remember so when one IP packet is

00:27:06,950 --> 00:27:11,750
dropped to one TCP segment it's dropped

00:27:08,600 --> 00:27:13,940
we need to make sure that this TCP stack

00:27:11,750 --> 00:27:18,640
resent that and put it into the stream

00:27:13,940 --> 00:27:19,940
again so everything can continue um

00:27:18,640 --> 00:27:26,360
right

00:27:19,940 --> 00:27:29,330
TCP head of line blocking so not very

00:27:26,360 --> 00:27:34,130
good but this should be possible to fix

00:27:29,330 --> 00:27:36,789
right so why not how do we fix TCP head

00:27:34,130 --> 00:27:44,210
of line blocking fixing this

00:27:36,789 --> 00:27:46,549
perhaps biggest issue with HTTP - we

00:27:44,210 --> 00:27:53,059
would need a way to do a non blocking

00:27:46,549 --> 00:27:55,490
TCP TLS HP - right basically the same

00:27:53,059 --> 00:27:57,320
thing but it wouldn't need to block just

00:27:55,490 --> 00:27:59,990
because you drop a packet you would babe

00:27:57,320 --> 00:28:03,230
you want to be able to drop a packet and

00:27:59,990 --> 00:28:05,720
everything else should continue so the

00:28:03,230 --> 00:28:10,039
packets or the streams need to be

00:28:05,720 --> 00:28:12,200
independent somehow yeah and they need

00:28:10,039 --> 00:28:14,570
to be so the packets that you drop need

00:28:12,200 --> 00:28:16,399
to be you need to know - which dream

00:28:14,570 --> 00:28:18,770
they belong so that the other streams

00:28:16,399 --> 00:28:20,990
can continue and only this dream whose

00:28:18,770 --> 00:28:24,580
packets are lost they need to wait for

00:28:20,990 --> 00:28:27,190
the lost packet to get resent again

00:28:24,580 --> 00:28:29,500
right so you basically need a new

00:28:27,190 --> 00:28:31,600
protocol can do this because and you

00:28:29,500 --> 00:28:33,400
also of course need retransmission xanax

00:28:31,600 --> 00:28:35,140
because you know you wanna have TCP

00:28:33,400 --> 00:28:40,450
style so you wanna have what I have a

00:28:35,140 --> 00:28:43,750
TCP protocol that supports all this so

00:28:40,450 --> 00:28:47,830
you could then potentially use a new

00:28:43,750 --> 00:28:49,930
protocol like SCTP is a stream based

00:28:47,830 --> 00:28:54,870
protocol that was invented many years

00:28:49,930 --> 00:29:01,180
ago that is sort of next to UDP and TCP

00:28:54,870 --> 00:29:02,740
in the protocol stack but no it has

00:29:01,180 --> 00:29:06,010
turned out that introducing a new

00:29:02,740 --> 00:29:09,580
transfer protocol on this level business

00:29:06,010 --> 00:29:11,290
on the next 2 tspn UDP it has turned out

00:29:09,580 --> 00:29:12,820
to be really really problematic on the

00:29:11,290 --> 00:29:16,980
Internet today there are just so many

00:29:12,820 --> 00:29:19,990
devices middleboxes routers if I walls

00:29:16,980 --> 00:29:22,720
whatever you name it that they only

00:29:19,990 --> 00:29:24,670
already know about TCP and UDP and

00:29:22,720 --> 00:29:26,560
basically blocks everything else so

00:29:24,670 --> 00:29:29,170
introducing another protocol on the

00:29:26,560 --> 00:29:31,360
Internet today is really complicated and

00:29:29,170 --> 00:29:35,290
it's really hard so it has more or less

00:29:31,360 --> 00:29:41,740
been deemed impossible so people avoid

00:29:35,290 --> 00:29:45,700
that so and even you could also sort of

00:29:41,740 --> 00:29:48,600
think that you could fix TCP to do this

00:29:45,700 --> 00:29:52,350
by itself just oh sure we couldn't

00:29:48,600 --> 00:29:55,150
somehow change TCP to be able to do this

00:29:52,350 --> 00:29:57,460
but that's another thing then that has

00:29:55,150 --> 00:30:00,160
sort of fixing TCP changing his

00:29:57,460 --> 00:30:02,110
appearance mating kernels and it's it

00:30:00,160 --> 00:30:05,200
takes a very very long time to make

00:30:02,110 --> 00:30:07,630
changes to first I don't it make it

00:30:05,200 --> 00:30:09,040
happen be in the standards standard

00:30:07,630 --> 00:30:10,570
bodies but then also make it the

00:30:09,040 --> 00:30:13,330
implementations go into all the kernels

00:30:10,570 --> 00:30:19,170
everywhere so it takes a very long time

00:30:13,330 --> 00:30:19,170
if it's even doable so what do you do

00:30:21,560 --> 00:30:30,380
Google facing this challenge they

00:30:26,520 --> 00:30:33,600
invented the protocol they called quick

00:30:30,380 --> 00:30:36,420
it is done basically to fix this problem

00:30:33,600 --> 00:30:40,050
they implemented their own protocol over

00:30:36,420 --> 00:30:43,050
UDP with an end-to-end cryptos so

00:30:40,050 --> 00:30:46,470
there's no plain text version of this

00:30:43,050 --> 00:30:50,570
there's no clear text you always only do

00:30:46,470 --> 00:30:53,100
crypto here and this protocol

00:30:50,570 --> 00:30:56,850
implemented over UDP so basically it has

00:30:53,100 --> 00:30:59,250
it's basically as a new TCP like

00:30:56,850 --> 00:31:01,950
implementation but over UDP and it has

00:30:59,250 --> 00:31:03,750
no TCP header line blocking problem it

00:31:01,950 --> 00:31:05,430
has these independent streams I

00:31:03,750 --> 00:31:07,410
mentioned that you needed to so if you

00:31:05,430 --> 00:31:11,460
drop a packet somewhere the other

00:31:07,410 --> 00:31:14,670
streams can continue and then when you

00:31:11,460 --> 00:31:18,350
resend that missing packet the stream

00:31:14,670 --> 00:31:22,380
can take continue to and while fixing

00:31:18,350 --> 00:31:26,940
these things they also took a stab at

00:31:22,380 --> 00:31:32,130
fixing or introducing better or I should

00:31:26,940 --> 00:31:35,460
say proper zero or Katti and properties

00:31:32,130 --> 00:31:37,680
which basically means more ways to send

00:31:35,460 --> 00:31:40,860
data earlier reducing the number of

00:31:37,680 --> 00:31:44,070
round trips necessary to send data so if

00:31:40,860 --> 00:31:46,410
you already have a connection or

00:31:44,070 --> 00:31:48,450
communication with another party like if

00:31:46,410 --> 00:31:51,600
you are a client you talk to this server

00:31:48,450 --> 00:31:54,360
before you can send data already in your

00:31:51,600 --> 00:31:56,660
next handshake without doing a lot of

00:31:54,360 --> 00:31:59,550
handshake first and done some data and

00:31:56,660 --> 00:32:01,830
by doing this you of course gain a lot

00:31:59,550 --> 00:32:06,180
of time and you get more data earlier so

00:32:01,830 --> 00:32:08,820
things appear faster to you by doing

00:32:06,180 --> 00:32:11,550
this over UDP basically means that you

00:32:08,820 --> 00:32:13,680
can implement it yourself in your client

00:32:11,550 --> 00:32:16,590
code and in Google's case of course they

00:32:13,680 --> 00:32:20,460
have a fairly substantial server side so

00:32:16,590 --> 00:32:21,720
they could implement both but they could

00:32:20,460 --> 00:32:23,400
do it in both sides and so they

00:32:21,720 --> 00:32:24,660
implemented a server version and they

00:32:23,400 --> 00:32:26,960
had the client version and they could

00:32:24,660 --> 00:32:29,820
integrate of this and make sure that

00:32:26,960 --> 00:32:34,140
things work out worked out the way they

00:32:29,820 --> 00:32:34,580
wanted you so no no penalty for doing

00:32:34,140 --> 00:32:36,860
things

00:32:34,580 --> 00:32:39,440
like you know changing TCP and waiting

00:32:36,860 --> 00:32:42,080
forever for for standards or kernels to

00:32:39,440 --> 00:32:44,149
implement it they could just do it

00:32:42,080 --> 00:32:52,010
basically day by day and change their

00:32:44,149 --> 00:32:56,659
own code so right now Google quick is

00:32:52,010 --> 00:32:59,600
roughly 77% of Internet traffic which is

00:32:56,659 --> 00:33:03,559
I think is pretty amazing in itself

00:32:59,600 --> 00:33:05,690
because Google has done deployed quick

00:33:03,559 --> 00:33:09,529
both in their server ins and in their

00:33:05,690 --> 00:33:12,710
browser so if you're using the Google

00:33:09,529 --> 00:33:15,559
browser against Google services it'll

00:33:12,710 --> 00:33:24,710
negotiate and use quick instead of HP

00:33:15,559 --> 00:33:26,750
too but Google then came today they took

00:33:24,710 --> 00:33:31,269
their protocol to the IETF and said

00:33:26,750 --> 00:33:35,240
let's make it a standard oh sorry I

00:33:31,269 --> 00:33:37,159
skipped it quick is done I just wanted

00:33:35,240 --> 00:33:40,850
to sort of emphasize it the same thing

00:33:37,159 --> 00:33:42,230
how HTTP 2 changed how we transported

00:33:40,850 --> 00:33:47,149
HTTP over the network

00:33:42,230 --> 00:33:49,700
quic is again a way it is again changing

00:33:47,149 --> 00:33:53,330
how where's transporting HTTP over the

00:33:49,700 --> 00:33:55,820
internet we maintain all the semantics

00:33:53,330 --> 00:33:57,889
we're still doing you know the get and

00:33:55,820 --> 00:33:59,570
the response we do we have headers and

00:33:57,889 --> 00:34:00,710
body and everything that all the headers

00:33:59,570 --> 00:34:03,950
are there the cookies are there

00:34:00,710 --> 00:34:05,659
everything you know about HTTP or all

00:34:03,950 --> 00:34:08,330
you can see in the dev tools and you

00:34:05,659 --> 00:34:11,089
know everything everything that is still

00:34:08,330 --> 00:34:13,369
there we're quick is again just changing

00:34:11,089 --> 00:34:15,470
how the bits are sent over the wire how

00:34:13,369 --> 00:34:21,109
it's sort of being deconstructed and

00:34:15,470 --> 00:34:22,760
reconstructed on the other side so the

00:34:21,109 --> 00:34:25,960
idea here being that if you're going

00:34:22,760 --> 00:34:27,980
back I go back to this train again the

00:34:25,960 --> 00:34:29,359
just in train and they're clear train

00:34:27,980 --> 00:34:32,419
you know the different frames here and

00:34:29,359 --> 00:34:34,580
if you drop one of these packets it is

00:34:32,419 --> 00:34:37,429
basically aligned here so if you drop

00:34:34,580 --> 00:34:41,210
one of these packets you just drop that

00:34:37,429 --> 00:34:43,790
little just in train car the other the

00:34:41,210 --> 00:34:46,879
IKEA train here which hasn't dropped any

00:34:43,790 --> 00:34:47,929
cars it can continue running while we're

00:34:46,879 --> 00:34:51,099
waiting for the

00:34:47,929 --> 00:34:53,990
just in train car to get resent so

00:34:51,099 --> 00:34:56,149
instead of blocking all trains because

00:34:53,990 --> 00:35:02,180
we we lose one packet all the other

00:34:56,149 --> 00:35:03,859
trains can continue here's what I wanted

00:35:02,180 --> 00:35:06,619
to say then about Google take took this

00:35:03,859 --> 00:35:09,170
their protocol to the IETF and there's

00:35:06,619 --> 00:35:10,880
started coming communication and and

00:35:09,170 --> 00:35:16,130
work within the ITF to make this

00:35:10,880 --> 00:35:21,230
standard they started this in the autumn

00:35:16,130 --> 00:35:23,720
2016 so it's a it's soon eighteen months

00:35:21,230 --> 00:35:26,720
ago and there's been a massive interest

00:35:23,720 --> 00:35:28,460
in this and when they took you to the

00:35:26,720 --> 00:35:30,800
IETF there were there was a lot of

00:35:28,460 --> 00:35:32,960
discussion on how to do it and they

00:35:30,800 --> 00:35:41,410
ended up with the discussion that it

00:35:32,960 --> 00:35:41,410
should be more than HTTP or HTTPS the

00:35:41,470 --> 00:35:48,980
protocol is becoming a transport quick

00:35:44,900 --> 00:35:52,790
and an HTTP quick basically split layers

00:35:48,980 --> 00:35:54,290
there so it the idea here is that you

00:35:52,790 --> 00:35:57,140
should be able to do other protocols

00:35:54,290 --> 00:35:59,869
over quick the transport quick in the

00:35:57,140 --> 00:36:01,880
future even if you within the ITF they

00:35:59,869 --> 00:36:04,099
didn't quickly also decided that the

00:36:01,880 --> 00:36:07,849
focus should be the HTTP over quick

00:36:04,099 --> 00:36:11,750
portions it's sometimes called HQ like

00:36:07,849 --> 00:36:17,510
h2 was for HP to where HQ is I should be

00:36:11,750 --> 00:36:19,280
over quick right there's a interim mean

00:36:17,510 --> 00:36:21,950
there are a lot of interim meetings for

00:36:19,280 --> 00:36:25,190
this there's a fairly big push in

00:36:21,950 --> 00:36:26,809
getting something done here there's as I

00:36:25,190 --> 00:36:28,490
said there's been a massive interested a

00:36:26,809 --> 00:36:31,240
lot of interested parties there are I

00:36:28,490 --> 00:36:33,799
believe there are around 10 12 different

00:36:31,240 --> 00:36:36,890
implementations of the ITF quick

00:36:33,799 --> 00:36:39,650
protocol so far the ITF quick protocol

00:36:36,890 --> 00:36:43,579
is not identical to the Google quick

00:36:39,650 --> 00:36:45,589
it's actually it's the same sort of the

00:36:43,579 --> 00:36:49,190
standard or the idea is the concepts are

00:36:45,589 --> 00:36:52,700
the same but they're it is being changed

00:36:49,190 --> 00:36:54,680
in a lot of different ways so there's a

00:36:52,700 --> 00:36:57,140
lot of the IETF quake it's not that all

00:36:54,680 --> 00:36:59,450
has to go well quick so if you would

00:36:57,140 --> 00:37:00,070
implement them you would probably go one

00:36:59,450 --> 00:37:01,870
or the other

00:37:00,070 --> 00:37:04,870
I know that the Google quick

00:37:01,870 --> 00:37:07,480
implementation is slowly sort of getting

00:37:04,870 --> 00:37:11,380
converted to the IDF version and the IDF

00:37:07,480 --> 00:37:14,290
version is being worked on right now it

00:37:11,380 --> 00:37:17,230
is supposed to be finished and done by

00:37:14,290 --> 00:37:23,920
the end of 2018 the protocol spec the

00:37:17,230 --> 00:37:29,020
standard the IETF quick stack which is

00:37:23,920 --> 00:37:32,290
done no seem not identical to the Google

00:37:29,020 --> 00:37:34,000
quick stack but I just wanted to show

00:37:32,290 --> 00:37:36,760
with this little comparison because in

00:37:34,000 --> 00:37:39,400
the HTTP 2 case you would have it would

00:37:36,760 --> 00:37:41,890
do TCP TLS and you have HTTP over that

00:37:39,400 --> 00:37:46,990
as shown here on the left side on the

00:37:41,890 --> 00:37:49,870
slide while in the quick case or HTTP or

00:37:46,990 --> 00:37:52,210
a quick case you do a you do you do it

00:37:49,870 --> 00:37:56,350
on top of UDP as I mentioned and there's

00:37:52,210 --> 00:37:59,440
a quick transport stack on top of UDP

00:37:56,350 --> 00:38:01,350
which is using TLS 1 2 3 4 the

00:37:59,440 --> 00:38:06,430
encryption part or the security part

00:38:01,350 --> 00:38:08,590
which am and also within ITF as well as

00:38:06,430 --> 00:38:10,990
Google did it there's no clear text

00:38:08,590 --> 00:38:13,710
version there is only the secure version

00:38:10,990 --> 00:38:16,810
so you can never do clear text quick and

00:38:13,710 --> 00:38:23,560
over this transport quick you do HTTP

00:38:16,810 --> 00:38:25,390
over quick a lot of things but the idea

00:38:23,560 --> 00:38:29,380
then being of course that you can still

00:38:25,390 --> 00:38:31,540
send that sort of familiar HTTP over

00:38:29,380 --> 00:38:36,060
this and it will look a cheapy in the

00:38:31,540 --> 00:38:36,060
other end for you for for most users of

00:38:36,360 --> 00:38:41,230
course it is in this case since this is

00:38:39,130 --> 00:38:46,150
UDP and not dissipate there is going to

00:38:41,230 --> 00:38:48,280
be a slightly different negotiation has

00:38:46,150 --> 00:38:51,360
sort of that step how do you figure out

00:38:48,280 --> 00:38:55,360
that the server you're talking to speaks

00:38:51,360 --> 00:38:59,200
quick so you can upgrade for your HTTP 2

00:38:55,360 --> 00:39:02,400
to your quick connection and I'll say

00:38:59,200 --> 00:39:02,400
that for another presentation

00:39:03,390 --> 00:39:13,230
so this is not a cp3 but it is basically

00:39:09,029 --> 00:39:16,140
that in spirit but not in name it's also

00:39:13,230 --> 00:39:18,539
almost like TCP - but it was again

00:39:16,140 --> 00:39:20,640
mostly in spirit absolutely not in name

00:39:18,539 --> 00:39:22,799
it is simply quick

00:39:20,640 --> 00:39:25,859
even if quick here is a lot of different

00:39:22,799 --> 00:39:28,230
things it's there's quick the transport

00:39:25,859 --> 00:39:30,480
there's it should be over quick there's

00:39:28,230 --> 00:39:32,779
the Google quick and the IETF quick so a

00:39:30,480 --> 00:39:39,029
lot of different quicks I would say but

00:39:32,779 --> 00:39:42,510
it is quick this is the official quick

00:39:39,029 --> 00:39:49,200
logo from the ITF working group working

00:39:42,510 --> 00:39:53,309
hard to make this a reality so to sum

00:39:49,200 --> 00:39:56,369
things up HTTP one was certainly not

00:39:53,309 --> 00:39:58,650
optimal for transporting the web as we

00:39:56,369 --> 00:40:00,599
have it today so it should be - was

00:39:58,650 --> 00:40:04,920
introduced it's binary it's multiplexed

00:40:00,599 --> 00:40:10,140
and it's widely used and it really makes

00:40:04,920 --> 00:40:12,720
sites faster but it has there are still

00:40:10,140 --> 00:40:15,180
some things we can improve with a CPU

00:40:12,720 --> 00:40:17,309
and a GPU also made it a lot easier for

00:40:15,180 --> 00:40:19,619
us and sort of it built the foundation

00:40:17,309 --> 00:40:22,349
on how to do the next version of the

00:40:19,619 --> 00:40:24,269
protocol so we're already then seeing

00:40:22,349 --> 00:40:27,269
the next version on the protocol which

00:40:24,269 --> 00:40:29,670
is quick and it's coming and it's going

00:40:27,269 --> 00:40:33,720
to be done by the end of this year and

00:40:29,670 --> 00:40:35,970
it's for all practical purposes right

00:40:33,720 --> 00:40:38,819
now quick is going to be like it should

00:40:35,970 --> 00:40:43,950
be - like frames over UDP at least you

00:40:38,819 --> 00:40:48,210
can sort of think of it that way so

00:40:43,950 --> 00:40:51,240
that's what I wanted to say and I think

00:40:48,210 --> 00:40:53,240
there might be some questions Thank You

00:40:51,240 --> 00:40:59,519
Daniel

00:40:53,240 --> 00:41:02,059
good yeah so yeah I will deliver the

00:40:59,519 --> 00:41:09,049
questions that you have

00:41:02,059 --> 00:41:12,569
so I would start with okay the first one

00:41:09,049 --> 00:41:15,150
so can you tell us something about curl

00:41:12,569 --> 00:41:17,010
like some famous software that we can

00:41:15,150 --> 00:41:22,380
use or some cool stuff that you

00:41:17,010 --> 00:41:27,960
and play with sorry again do please take

00:41:22,380 --> 00:41:31,530
it again I just messed up on - I said

00:41:27,960 --> 00:41:33,810
can you tell us something about curl

00:41:31,530 --> 00:41:36,960
like if there is any famous software

00:41:33,810 --> 00:41:45,060
that we can use or like some cool stuff

00:41:36,960 --> 00:41:49,790
to use yes I know about car I basically

00:41:45,060 --> 00:41:54,690
everything uses curl simple but simply

00:41:49,790 --> 00:41:57,090
these days I stopped counting users

00:41:54,690 --> 00:41:59,310
because users seems like a real thing

00:41:57,090 --> 00:42:03,540
for curl to count since nowadays I try

00:41:59,310 --> 00:42:05,820
to assess the impact of humans and in

00:42:03,540 --> 00:42:08,580
every day that curl makes and I would

00:42:05,820 --> 00:42:10,970
say this curl nowadays is used basically

00:42:08,580 --> 00:42:14,550
in every cell phone in every computer

00:42:10,970 --> 00:42:18,720
running or at least every smartphone and

00:42:14,550 --> 00:42:22,770
every small TV every smart car so it's

00:42:18,720 --> 00:42:26,280
ads sort of mostly everything that is

00:42:22,770 --> 00:42:30,060
connected in the world runs curls

00:42:26,280 --> 00:42:32,250
somewhere so it's mind boggling just to

00:42:30,060 --> 00:42:37,260
think of where it is and where it isn't

00:42:32,250 --> 00:42:40,110
so everything uses it like if I open my

00:42:37,260 --> 00:42:42,060
phone is there's YouTube there's Spotify

00:42:40,110 --> 00:42:47,730
there's Instagram there's Facebook

00:42:42,060 --> 00:42:49,770
there's everything every major app is

00:42:47,730 --> 00:42:52,560
using it and and they're also using it

00:42:49,770 --> 00:42:54,870
pretty big in the server and so which is

00:42:52,560 --> 00:42:58,170
kind of interesting so it seemed they're

00:42:54,870 --> 00:43:01,080
all using it in both in the handheld

00:42:58,170 --> 00:43:05,310
devices and computers and in the server

00:43:01,080 --> 00:43:08,420
infrastructure can I pile on to that

00:43:05,310 --> 00:43:13,740
question so I'm not a network engineer

00:43:08,420 --> 00:43:16,980
but um curl curls been on the internet

00:43:13,740 --> 00:43:21,450
almost as long as I've been so I'm

00:43:16,980 --> 00:43:24,630
wondering with quick and HTTP - is there

00:43:21,450 --> 00:43:27,680
a need for like a curl - or have you

00:43:24,630 --> 00:43:31,079
been evolving all along

00:43:27,680 --> 00:43:35,579
well yes I think that's a good question

00:43:31,079 --> 00:43:38,369
I I want I want you and I try to make

00:43:35,579 --> 00:43:40,800
Carl keep up with how we do networking

00:43:38,369 --> 00:43:42,660
and and the web stuff in general so of

00:43:40,800 --> 00:43:44,700
course I want to I want to make sure

00:43:42,660 --> 00:43:46,440
that curl can do everything that we do

00:43:44,700 --> 00:43:49,109
with modern internet so that means

00:43:46,440 --> 00:43:51,540
keeping up with all day so yes I was

00:43:49,109 --> 00:43:53,400
pretty early on with HP to support in

00:43:51,540 --> 00:43:56,369
curls so that you could pretty early on

00:43:53,400 --> 00:43:59,310
sort of try out your servers with HP to

00:43:56,369 --> 00:44:02,790
with curl as well and we're hopefully

00:43:59,310 --> 00:44:04,890
going to be able to do the same sort of

00:44:02,790 --> 00:44:08,550
journey with quick so yes curl will

00:44:04,890 --> 00:44:11,730
support quick to eventually doesn't now

00:44:08,550 --> 00:44:14,250
but hopefully it will do that soon yeah

00:44:11,730 --> 00:44:16,230
it's that's a lot of our work with curl

00:44:14,250 --> 00:44:17,700
these days it's just keeping up with

00:44:16,230 --> 00:44:20,670
everything that is changing and as all

00:44:17,700 --> 00:44:23,730
so that's a big explanation as to why

00:44:20,670 --> 00:44:26,010
we'll never get done and why isn't ever

00:44:23,730 --> 00:44:29,900
finished because everything is changing

00:44:26,010 --> 00:44:29,900
all the time and so of course is curl

00:44:33,619 --> 00:44:39,960
okay so I'm gonna jump to the next

00:44:36,660 --> 00:44:44,339
question so do you think the web of

00:44:39,960 --> 00:44:48,150
thinking protocol will affect will

00:44:44,339 --> 00:44:50,220
affect the idea of this web transport if

00:44:48,150 --> 00:44:53,430
it's implemented or you think that we

00:44:50,220 --> 00:44:56,460
need to to implement and or you think

00:44:53,430 --> 00:45:00,569
that we can use an existing protocol for

00:44:56,460 --> 00:45:02,520
that I'm pretty sure we can use the same

00:45:00,569 --> 00:45:05,569
protocols for that I think most of what

00:45:02,520 --> 00:45:08,130
we're seeing sort of in innovations of

00:45:05,569 --> 00:45:09,780
things and devices on the Internet today

00:45:08,130 --> 00:45:12,660
they're all using the same protocols

00:45:09,780 --> 00:45:14,849
already so I don't think it's a question

00:45:12,660 --> 00:45:17,130
about the protocols I think we can do

00:45:14,849 --> 00:45:19,500
I think the protocols are well suited

00:45:17,130 --> 00:45:23,160
for that and especially in these days

00:45:19,500 --> 00:45:25,410
when when all the small devices are

00:45:23,160 --> 00:45:28,500
getting bigger so it's easier and easier

00:45:25,410 --> 00:45:30,690
to actually support the same full-size

00:45:28,500 --> 00:45:34,859
protocols that the bigger computers are

00:45:30,690 --> 00:45:36,750
doing so I I don't think we're I don't

00:45:34,859 --> 00:45:38,339
think there is going to be any different

00:45:36,750 --> 00:45:40,040
protocols for different devices it's

00:45:38,339 --> 00:45:43,340
going to be the internet and its go

00:45:40,040 --> 00:45:52,460
to be these protocols for for the

00:45:43,340 --> 00:45:55,880
foreseeable future think okay we do have

00:45:52,460 --> 00:46:00,290
we do have a question from Robin BA it's

00:45:55,880 --> 00:46:03,320
about quick and he said is it quick only

00:46:00,290 --> 00:46:07,640
used for every certain places or for

00:46:03,320 --> 00:46:10,520
example is used for YouTube and like

00:46:07,640 --> 00:46:12,530
most some other places I think you

00:46:10,520 --> 00:46:14,510
already imagined that the presentation

00:46:12,530 --> 00:46:18,380
if you don't have anymore

00:46:14,510 --> 00:46:21,050
I suppose that refers to what Google is

00:46:18,380 --> 00:46:23,090
offering right now or but Google is

00:46:21,050 --> 00:46:26,000
offering it for everything they host on

00:46:23,090 --> 00:46:27,620
their primary web front end server wise

00:46:26,000 --> 00:46:31,610
so I think whatever you if you're using

00:46:27,620 --> 00:46:34,100
Chrome and you're using Google services

00:46:31,610 --> 00:46:36,830
on the web you're you have a really big

00:46:34,100 --> 00:46:38,300
chance of using quick so and of course

00:46:36,830 --> 00:46:42,260
that that is the same thing is going to

00:46:38,300 --> 00:46:44,510
be the same for for everyone in a year

00:46:42,260 --> 00:46:46,550
then when Firefox has it and all the

00:46:44,510 --> 00:46:48,920
major server providers that are also

00:46:46,550 --> 00:46:52,220
going to speak quick so everywhere that

00:46:48,920 --> 00:46:53,900
you're talking HTTP today is potentially

00:46:52,220 --> 00:46:58,190
going to use quick tomorrow there's not

00:46:53,900 --> 00:47:00,020
going to be there's there's no I mean

00:46:58,190 --> 00:47:04,160
there's no particular use case where

00:47:00,020 --> 00:47:06,410
quick is bad and nh-2 is better that I'm

00:47:04,160 --> 00:47:09,380
aware of course we might figure that out

00:47:06,410 --> 00:47:12,260
along the way but right now I think it's

00:47:09,380 --> 00:47:15,080
it's the natural next protocol that all

00:47:12,260 --> 00:47:20,270
the ones that are providing HP to today

00:47:15,080 --> 00:47:23,030
are going to offer quick tomorrow you

00:47:20,270 --> 00:47:25,030
already mentioned the server one and so

00:47:23,030 --> 00:47:28,670
there is another question following that

00:47:25,030 --> 00:47:31,910
saying what server should we use if we

00:47:28,670 --> 00:47:33,560
have to support quick and I think

00:47:31,910 --> 00:47:38,020
wrapping but I'd like a quick research

00:47:33,560 --> 00:47:44,320
and he only find Kaji

00:47:38,020 --> 00:47:47,480
yes well that that goes back to the this

00:47:44,320 --> 00:47:49,820
dual situation of other protocols if you

00:47:47,480 --> 00:47:51,440
want to support if you want to if you

00:47:49,820 --> 00:47:52,880
want to use Chrome and you want to talk

00:47:51,440 --> 00:47:54,800
to a server and you

00:47:52,880 --> 00:47:56,990
to speak the Google version of quake and

00:47:54,800 --> 00:47:59,210
the Google version of quake is of course

00:47:56,990 --> 00:48:01,040
not the standardized ITF version so then

00:47:59,210 --> 00:48:03,230
you have to implement the server-side of

00:48:01,040 --> 00:48:06,050
the Google protocol and the carrier

00:48:03,230 --> 00:48:08,690
server has that so you can run caddy and

00:48:06,050 --> 00:48:11,660
and offer the Google version of quake

00:48:08,690 --> 00:48:13,490
server-side but if you're looking at

00:48:11,660 --> 00:48:15,320
what most implementers do at least my

00:48:13,490 --> 00:48:17,900
impression of what most implementers are

00:48:15,320 --> 00:48:20,780
quick do they implement the new ITF

00:48:17,900 --> 00:48:23,870
version so at least there's a wiki page

00:48:20,780 --> 00:48:25,640
for that and I think there is like 12 or

00:48:23,870 --> 00:48:28,910
15 different implementation and they're

00:48:25,640 --> 00:48:31,370
focusing on the IETF version of quake

00:48:28,910 --> 00:48:34,340
and the IETF version of quake is not

00:48:31,370 --> 00:48:36,680
done yet so they're all then you won't

00:48:34,340 --> 00:48:38,990
as easily run a server with that

00:48:36,680 --> 00:48:41,720
protocol yet because we're not really

00:48:38,990 --> 00:48:43,910
there yet so there's right now we're

00:48:41,720 --> 00:48:46,190
working hard on interoperate with

00:48:43,910 --> 00:48:48,020
between new clients and new servers so

00:48:46,190 --> 00:48:51,860
we're we're getting there

00:48:48,020 --> 00:48:55,430
but there's no this really no point or

00:48:51,860 --> 00:49:02,990
or place right now to run IETF quick

00:48:55,430 --> 00:49:05,540
servers we'll be there soon but let me

00:49:02,990 --> 00:49:10,670
back up and ask another one from the

00:49:05,540 --> 00:49:13,760
etherpad so somebody wrote in can HTTP

00:49:10,670 --> 00:49:16,780
to be used to set different priorities

00:49:13,760 --> 00:49:16,780
on different files

00:49:17,440 --> 00:49:21,100
tasks of the browser

00:49:21,610 --> 00:49:30,620
yeah I think the question is is rather -

00:49:27,470 --> 00:49:33,500
yes I mean the protocol in itself it's

00:49:30,620 --> 00:49:35,690
certainly it doesn't have files at all

00:49:33,500 --> 00:49:37,490
since it sends streams but each stream

00:49:35,690 --> 00:49:40,070
has a different priorities you can send

00:49:37,490 --> 00:49:42,230
streams with different priorities so the

00:49:40,070 --> 00:49:44,300
question is yes you or rather the answer

00:49:42,230 --> 00:49:45,830
is yes you can send different you can

00:49:44,300 --> 00:49:48,140
set different priorities on different

00:49:45,830 --> 00:49:51,820
files or streams but then the question

00:49:48,140 --> 00:49:55,460
is can you control your server or

00:49:51,820 --> 00:49:58,610
can you actually make use of that on the

00:49:55,460 --> 00:50:00,500
web or live on your site and that's a

00:49:58,610 --> 00:50:03,680
completely different question and I'm

00:50:00,500 --> 00:50:05,990
not actually sure how you control

00:50:03,680 --> 00:50:09,410
priorities and stuff like that on your

00:50:05,990 --> 00:50:12,020
contents when you build a site so I'm

00:50:09,410 --> 00:50:14,900
afraid I'm more of a protocol person

00:50:12,020 --> 00:50:17,270
than an actual content person so I I

00:50:14,900 --> 00:50:30,650
have to defer the answer there to be a

00:50:17,270 --> 00:50:36,350
bit fuzzy maybe I couldn't get by

00:50:30,650 --> 00:50:41,360
without it there was I'll ask my

00:50:36,350 --> 00:50:44,090
question I'm not sure I'm not exactly

00:50:41,360 --> 00:50:45,440
sure if I framed it correctly but when

00:50:44,090 --> 00:50:49,250
you were talking about the different

00:50:45,440 --> 00:50:52,160
queueing times between HTTP 1 and HTTP 2

00:50:49,250 --> 00:50:54,980
I couldn't help but think of that video

00:50:52,160 --> 00:50:59,840
that that Burger King did recently about

00:50:54,980 --> 00:51:01,610
net neutrality and how you know we're

00:50:59,840 --> 00:51:03,920
gonna keep getting pushed to the back of

00:51:01,610 --> 00:51:06,410
the line if we're not a big content

00:51:03,920 --> 00:51:08,570
service when when net neutrality goes

00:51:06,410 --> 00:51:12,800
away and if net neutrality goes away in

00:51:08,570 --> 00:51:15,440
the US and it's there it's there any

00:51:12,800 --> 00:51:19,460
connection between how we're developing

00:51:15,440 --> 00:51:26,450
these protocols and ways we can use

00:51:19,460 --> 00:51:28,340
technology to route around issues of to

00:51:26,450 --> 00:51:30,380
counter the forces that want to destroy

00:51:28,340 --> 00:51:36,010
net neutrality I'm not really sure about

00:51:30,380 --> 00:51:40,190
it I'll interpret the question like this

00:51:36,010 --> 00:51:43,970
there's I think like this protocol

00:51:40,190 --> 00:51:46,910
development in general has has developed

00:51:43,970 --> 00:51:50,090
how we do new protocols so these days

00:51:46,910 --> 00:51:51,980
the we're very aware of that when

00:51:50,090 --> 00:51:53,840
whenever we introduce a new protocol

00:51:51,980 --> 00:51:57,950
whenever we do something new on the net

00:51:53,840 --> 00:52:00,590
there is going to be a lot of actors

00:51:57,950 --> 00:52:02,270
devices players whoever who is

00:52:00,590 --> 00:52:04,190
monitoring what you're doing and not

00:52:02,270 --> 00:52:05,780
only for sort of spying purposes or

00:52:04,190 --> 00:52:08,180
privacy and invasive purposes but

00:52:05,780 --> 00:52:10,430
solving sort of figuring out what you do

00:52:08,180 --> 00:52:12,470
and help you make it faster or slower or

00:52:10,430 --> 00:52:15,859
better or whatever they think whatever

00:52:12,470 --> 00:52:17,600
the reasons are so so whenever you

00:52:15,859 --> 00:52:19,520
introduce something you can be sure that

00:52:17,600 --> 00:52:22,280
not very

00:52:19,520 --> 00:52:23,210
not a long time afterwards you can't

00:52:22,280 --> 00:52:25,010
change it anymore

00:52:23,210 --> 00:52:29,570
because people are making assumptions

00:52:25,010 --> 00:52:32,060
that if you did it like this 22 times of

00:52:29,570 --> 00:52:35,390
course you do it the same way the 23rd

00:52:32,060 --> 00:52:38,300
time so once you have sort of delivered

00:52:35,390 --> 00:52:41,180
a protocol that makes certain things in

00:52:38,300 --> 00:52:44,840
a certain way it becomes impossible to

00:52:41,180 --> 00:52:48,500
change it after a certain time what they

00:52:44,840 --> 00:52:50,690
call within the protocol ossification

00:52:48,500 --> 00:52:52,280
which basically means that we can't

00:52:50,690 --> 00:52:54,980
change anything that that is why we

00:52:52,280 --> 00:52:59,150
don't do it to be to over clear text TCP

00:52:54,980 --> 00:53:02,420
because if you talk TCP on port 80 that

00:52:59,150 --> 00:53:04,130
means it should be one for a huge part

00:53:02,420 --> 00:53:08,120
of the world so you can't just suddenly

00:53:04,130 --> 00:53:10,910
speak HP to over that port because there

00:53:08,120 --> 00:53:13,550
are too many middle boxes that will not

00:53:10,910 --> 00:53:18,050
recognize their to p2 and it'll either

00:53:13,550 --> 00:53:21,050
destroy your traffic or I will make

00:53:18,050 --> 00:53:23,900
everything sad and boring so that's why

00:53:21,050 --> 00:53:25,730
we do only do it to p2 over encrypted

00:53:23,900 --> 00:53:28,070
communications because then they can't

00:53:25,730 --> 00:53:29,870
figure that out so we're sort of hiding

00:53:28,070 --> 00:53:32,990
what we're doing and the same goes with

00:53:29,870 --> 00:53:35,090
quick and stuff like that so by hiding

00:53:32,990 --> 00:53:37,120
what we're doing why by in by making

00:53:35,090 --> 00:53:40,540
sure that we do everything encrypted and

00:53:37,120 --> 00:53:42,650
secure from the start there will be less

00:53:40,540 --> 00:53:44,810
seeing what we're doing and there will

00:53:42,650 --> 00:53:47,630
be less guest second-guessing what we

00:53:44,810 --> 00:53:51,530
actually want to do so in that aspect

00:53:47,630 --> 00:53:53,780
we're making it harder for operators or

00:53:51,530 --> 00:53:55,310
middlemen to actually know what's going

00:53:53,780 --> 00:53:59,300
on so that they will have a harder time

00:53:55,310 --> 00:54:01,340
to you sort of you know punish that

00:53:59,300 --> 00:54:03,670
stream compared to that stream because

00:54:01,340 --> 00:54:05,870
it'll be everything will be encrypted

00:54:03,670 --> 00:54:08,900
connections and encrypted data so it's

00:54:05,870 --> 00:54:13,640
going to be we're certainly not making

00:54:08,900 --> 00:54:16,970
it easier for anyone to to make use of I

00:54:13,640 --> 00:54:20,650
mean oppress certain content compared to

00:54:16,970 --> 00:54:20,650
others on the wire

00:54:21,590 --> 00:54:28,490
cool it's there anything else coming in

00:54:26,160 --> 00:54:32,610
from the channel manila or any other Oh

00:54:28,490 --> 00:54:35,310
No all right I go I've got one more that

00:54:32,610 --> 00:54:38,070
that I'd love to ask you and that has to

00:54:35,310 --> 00:54:40,110
do with the fact that curls curls an

00:54:38,070 --> 00:54:42,030
open-source project it's on github I

00:54:40,110 --> 00:54:44,850
just went and looked it up I see you

00:54:42,030 --> 00:54:46,530
have many contributors you've been doing

00:54:44,850 --> 00:54:48,960
this as an open source project I think

00:54:46,530 --> 00:54:52,350
for a long time is there is there

00:54:48,960 --> 00:54:54,720
anything like any words of wisdom about

00:54:52,350 --> 00:54:56,670
like or or insights about your

00:54:54,720 --> 00:54:59,340
contributors and the community of people

00:54:56,670 --> 00:55:03,210
who contribute to curl and how that's

00:54:59,340 --> 00:55:05,310
changed or any you know I'm just really

00:55:03,210 --> 00:55:07,050
interested in your observations about

00:55:05,310 --> 00:55:09,390
the open source community you've built

00:55:07,050 --> 00:55:13,620
around this project anything you want to

00:55:09,390 --> 00:55:15,690
share where any calls like if there's

00:55:13,620 --> 00:55:18,320
calls for contribution any help you need

00:55:15,690 --> 00:55:22,530
that may be people in this group can

00:55:18,320 --> 00:55:24,240
disseminate we all have a seed help of

00:55:22,530 --> 00:55:29,280
course it's an open source project right

00:55:24,240 --> 00:55:33,090
I started curl I did the first release

00:55:29,280 --> 00:55:37,760
in exactly 14 days it's 20 years old so

00:55:33,090 --> 00:55:37,760
it's getting really close to and it's

00:55:38,210 --> 00:55:48,960
exactly skirl three weeks after mozilla

00:55:41,850 --> 00:55:51,270
was founded so it's basically but I

00:55:48,960 --> 00:55:52,440
would say I mean open source I wanted to

00:55:51,270 --> 00:55:54,860
be open source from the beginning I

00:55:52,440 --> 00:55:57,480
started it that way and it's been a

00:55:54,860 --> 00:56:01,140
community and everything but and of

00:55:57,480 --> 00:56:03,630
course it has changed a lot over time

00:56:01,140 --> 00:56:05,700
possibly because it became more popular

00:56:03,630 --> 00:56:07,560
and more users but also because the

00:56:05,700 --> 00:56:12,240
nature of open source and people's

00:56:07,560 --> 00:56:13,890
awareness has changed so I think open

00:56:12,240 --> 00:56:15,570
source is getting better we are getting

00:56:13,890 --> 00:56:19,020
better at open source and we get better

00:56:15,570 --> 00:56:21,120
tools and we get we get better it would

00:56:19,020 --> 00:56:23,070
get better at doing it so I think

00:56:21,120 --> 00:56:25,790
everything is better in open source in

00:56:23,070 --> 00:56:29,010
the open source world year by year thing

00:56:25,790 --> 00:56:32,250
so even if it's I mean there are ups and

00:56:29,010 --> 00:56:34,559
downs but I think we're all in a pretty

00:56:32,250 --> 00:56:36,190
good shape

00:56:34,559 --> 00:56:41,440
awesome thank you

00:56:36,190 --> 00:56:42,819
wow thanks a lot that's that's really

00:56:41,440 --> 00:56:44,829
interested that's really interesting

00:56:42,819 --> 00:56:46,690
I've been thinking about time on the

00:56:44,829 --> 00:56:48,849
internet because I've been working on

00:56:46,690 --> 00:56:51,250
the web for 20 years and changed myself

00:56:48,849 --> 00:56:53,289
so from a very different perspective but

00:56:51,250 --> 00:56:59,559
anyway thank you so much for your time

00:56:53,289 --> 00:57:03,609
today we'll let you know or the air mode

00:56:59,559 --> 00:57:08,140
recording should be transcoded by end of

00:57:03,609 --> 00:57:10,359
day here I will get some captions on it

00:57:08,140 --> 00:57:13,180
as well most of our text speaker

00:57:10,359 --> 00:57:15,339
audience is not speaking English as

00:57:13,180 --> 00:57:18,099
their first language so captions are

00:57:15,339 --> 00:57:21,940
really nice to have I'll let you know

00:57:18,099 --> 00:57:23,829
when all that's together so and and

00:57:21,940 --> 00:57:26,349
we'll share it with the world and thanks

00:57:23,829 --> 00:57:29,710
again for your time and your work and

00:57:26,349 --> 00:57:31,480
thank you my now for hosting yes thank

00:57:29,710 --> 00:57:35,829
you having for joining and thank you

00:57:31,480 --> 00:57:38,470
Danielle and all speakers around the

00:57:35,829 --> 00:57:40,839
world be well be safe thanks for your

00:57:38,470 --> 00:57:45,520
contributions and everybody keep on

00:57:40,839 --> 00:57:51,119
rockin the free rip free web all right

00:57:45,520 --> 00:57:51,119

YouTube URL: https://www.youtube.com/watch?v=onF35HWLVh0


