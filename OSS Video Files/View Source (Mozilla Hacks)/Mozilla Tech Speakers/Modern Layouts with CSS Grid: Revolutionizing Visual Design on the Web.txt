Title: Modern Layouts with CSS Grid: Revolutionizing Visual Design on the Web
Publication date: 2018-04-27
Playlist: Mozilla Tech Speakers
Description: 
	A look at new CSS tools and new possibilities in web design, with Singapore-based Hui Jing Chen, who brings a bilingual perspective to building beautiful useful web sites. (A Mozilla Tech Briefing.)
Captions: 
	00:00:00,000 --> 00:00:06,299
Lockey could you face me okay and then

00:00:03,810 --> 00:00:09,510
let me just do a very quick intro and

00:00:06,299 --> 00:00:13,950
then we go over are we live yeah yep go

00:00:09,510 --> 00:00:18,750
for it good afternoon good evening good

00:00:13,950 --> 00:00:21,769
morning tech speakers it's Wednesday

00:00:18,750 --> 00:00:25,019
February 14th in California and it's

00:00:21,769 --> 00:00:28,349
Thursday February 15th in the morning in

00:00:25,019 --> 00:00:34,010
Singapore where I'm really delighted to

00:00:28,349 --> 00:00:37,170
introduce we Jing Chen or Chen Li Jing

00:00:34,010 --> 00:00:41,879
who will talk to us today about modern

00:00:37,170 --> 00:00:44,129
layouts with CSS grid Jing let me turn

00:00:41,879 --> 00:00:46,710
the floor over to you and I will face

00:00:44,129 --> 00:00:48,750
Mia we'll be back in about a half an

00:00:46,710 --> 00:00:49,649
hour plus or minus to take your

00:00:48,750 --> 00:00:52,440
questions

00:00:49,649 --> 00:00:55,219
the link to the ether pad can be found

00:00:52,440 --> 00:00:58,410
in your invite and in the telegram

00:00:55,219 --> 00:01:00,239
Channel and look forward to hearing from

00:00:58,410 --> 00:01:06,810
you with questions at the end of Jing

00:01:00,239 --> 00:01:10,020
stock thank you thank you javi so hello

00:01:06,810 --> 00:01:13,290
everyone this is my first time doing a

00:01:10,020 --> 00:01:15,900
talk by a videoconference so it it will

00:01:13,290 --> 00:01:17,400
be interesting so like as javi said my

00:01:15,900 --> 00:01:19,200
name is Wei Jing and I'm a front-end

00:01:17,400 --> 00:01:21,590
developer based in Singapore at the

00:01:19,200 --> 00:01:25,020
moment and today I'll be talking about

00:01:21,590 --> 00:01:31,890
CSS grid and why it's a milestone for

00:01:25,020 --> 00:01:33,860
web design so these CSS related memes

00:01:31,890 --> 00:01:37,049
have been going around for some time

00:01:33,860 --> 00:01:40,229
usually accompanied by some joke about

00:01:37,049 --> 00:01:44,280
the deficiencies of CSS or the cascade

00:01:40,229 --> 00:01:47,490
or how impossible it is to manage well I

00:01:44,280 --> 00:01:48,630
disagree with that notion you see I love

00:01:47,490 --> 00:01:51,420
CSS

00:01:48,630 --> 00:01:54,240
I love CSS for what it is and what it

00:01:51,420 --> 00:01:56,549
can do so today I'll be putting for some

00:01:54,240 --> 00:01:59,060
ideas that you may not entirely agree

00:01:56,549 --> 00:02:01,770
with but I do hope you were here yeah

00:01:59,060 --> 00:02:05,790
let me start off with a short story

00:02:01,770 --> 00:02:08,580
about the web the world wide web was

00:02:05,790 --> 00:02:10,440
invented by Sir Tim berners-lee in 1989

00:02:08,580 --> 00:02:13,069
as a means for researchers to share

00:02:10,440 --> 00:02:15,079
information now back then

00:02:13,069 --> 00:02:17,180
I had a problem with information access

00:02:15,079 --> 00:02:19,459
and his paper introduced the concept of

00:02:17,180 --> 00:02:21,349
linked information so it would be

00:02:19,459 --> 00:02:23,629
possible to cross-reference information

00:02:21,349 --> 00:02:26,420
help electronically on machines across

00:02:23,629 --> 00:02:30,139
the world creating a web of information

00:02:26,420 --> 00:02:32,000
via some form of hypertext and when the

00:02:30,139 --> 00:02:34,280
web started there was no way to do

00:02:32,000 --> 00:02:36,920
layout at all because all browsers could

00:02:34,280 --> 00:02:38,900
do was display text or maybe some images

00:02:36,920 --> 00:02:41,389
of you are lucky but as more users

00:02:38,900 --> 00:02:43,400
started going online people started to

00:02:41,389 --> 00:02:45,500
find new ways to utilize the web and

00:02:43,400 --> 00:02:47,599
design for it so properties that were

00:02:45,500 --> 00:02:50,540
never meant to be used for layout like

00:02:47,599 --> 00:02:53,359
HTML tables or floats with the next-best

00:02:50,540 --> 00:02:55,459
hat we can think of eventually there's

00:02:53,359 --> 00:02:57,260
not really painful and people started

00:02:55,459 --> 00:02:59,510
relying on frameworks to do the heavy

00:02:57,260 --> 00:03:00,680
lifting especially when it comes to the

00:02:59,510 --> 00:03:03,169
layout side of things

00:03:00,680 --> 00:03:04,909
in fact I've inherited a lot of legacy

00:03:03,169 --> 00:03:07,790
projects that include the entire

00:03:04,909 --> 00:03:11,419
bootstrap library but only use its grid

00:03:07,790 --> 00:03:13,280
system so this is a general overview of

00:03:11,419 --> 00:03:16,549
how web layouts have evolved over the

00:03:13,280 --> 00:03:18,470
years now CSS grid gives us a level of

00:03:16,549 --> 00:03:20,180
control over how elements are rendered

00:03:18,470 --> 00:03:22,759
on a page that we've never had before

00:03:20,180 --> 00:03:26,959
and that's the biggest reason why it's

00:03:22,759 --> 00:03:28,009
revolutionary now CSS grid I feel had

00:03:26,959 --> 00:03:30,379
one of the best

00:03:28,009 --> 00:03:32,209
rollouts of a new major CSS feature ever

00:03:30,379 --> 00:03:35,030
with almost all the major browsers

00:03:32,209 --> 00:03:37,609
shipping it in March last year by now

00:03:35,030 --> 00:03:40,579
more than 70% of the market is using a

00:03:37,609 --> 00:03:43,069
browser that supports fit all the other

00:03:40,579 --> 00:03:45,919
techniques we've used in the past HTML

00:03:43,069 --> 00:03:48,349
tables floats even flexbox was never

00:03:45,919 --> 00:03:50,269
meant for doing full page layouts they

00:03:48,349 --> 00:03:52,669
were creative hats we came up with to

00:03:50,269 --> 00:03:54,709
build the layouts that we wanted so now

00:03:52,669 --> 00:03:57,229
we actually have proper layout

00:03:54,709 --> 00:03:58,609
properties like flexbox angry and when

00:03:57,229 --> 00:04:01,849
we use them in combination with other

00:03:58,609 --> 00:04:04,340
properties like CSS shapes transforms

00:04:01,849 --> 00:04:08,449
viewport units and so on the design

00:04:04,340 --> 00:04:11,180
possibilities become endless now my love

00:04:08,449 --> 00:04:14,269
for CSS is inordinate enough for me to

00:04:11,180 --> 00:04:17,690
read specifications honestly they're not

00:04:14,269 --> 00:04:20,870
that bad to read now CSS first became a

00:04:17,690 --> 00:04:24,889
w3c recommendation in 96 and it used to

00:04:20,870 --> 00:04:26,660
be a huge monolithic document in 2000 an

00:04:24,889 --> 00:04:28,430
assertion was made to Mario

00:04:26,660 --> 00:04:30,950
is the specification which made it

00:04:28,430 --> 00:04:33,830
easier to update and support as of the

00:04:30,950 --> 00:04:36,200
2017 snapshot there are 88 modules in

00:04:33,830 --> 00:04:38,480
various states of development browser

00:04:36,200 --> 00:04:40,100
vendors refer to these specifications to

00:04:38,480 --> 00:04:43,040
implement features into the browsers we

00:04:40,100 --> 00:04:45,680
use now despite modularization CSS is

00:04:43,040 --> 00:04:48,110
ultimately a holistic technology and

00:04:45,680 --> 00:04:50,690
that even though you can use properties

00:04:48,110 --> 00:04:53,380
in isolation the full power of CSS

00:04:50,690 --> 00:04:58,160
shines through when used in combination

00:04:53,380 --> 00:04:59,810
CSS is a team sport for example doing

00:04:58,160 --> 00:05:02,210
layout on the web usually starts off

00:04:59,810 --> 00:05:03,620
with using the displayed property but we

00:05:02,210 --> 00:05:05,540
definitely use a whole suite of

00:05:03,620 --> 00:05:09,380
properties that number more than players

00:05:05,540 --> 00:05:12,200
on a basketball team and some people

00:05:09,380 --> 00:05:15,350
have asked why do we need it when we

00:05:12,200 --> 00:05:19,100
already have flex box or is RIT supposed

00:05:15,350 --> 00:05:20,840
to replace flex box my response is these

00:05:19,100 --> 00:05:23,210
two layout techniques are not competing

00:05:20,840 --> 00:05:27,230
against each other they're meant to be

00:05:23,210 --> 00:05:30,950
complementary grit and flex box our best

00:05:27,230 --> 00:05:35,060
friends like bacon and eggs like nuts

00:05:30,950 --> 00:05:38,450
and bolts like jay-z and Beyonce either

00:05:35,060 --> 00:05:42,350
are good on their own but together they

00:05:38,450 --> 00:05:44,270
can reach another level of awesome and a

00:05:42,350 --> 00:05:46,910
flex box is suited for laying out items

00:05:44,270 --> 00:05:48,650
in a single dimension where they isn't a

00:05:46,910 --> 00:05:50,930
relationship between the rows and the

00:05:48,650 --> 00:05:54,560
columns think of it more like a long

00:05:50,930 --> 00:05:59,660
daisy chain of flex children now let's

00:05:54,560 --> 00:06:00,980
examine CSS grid what exactly is it this

00:05:59,660 --> 00:06:03,640
is how it's described in the

00:06:00,980 --> 00:06:06,230
specification and the key word here is

00:06:03,640 --> 00:06:09,020
two-dimensional so keep this in mind for

00:06:06,230 --> 00:06:10,940
the rest of the talk so there are a

00:06:09,020 --> 00:06:12,500
number of terms I will constantly refer

00:06:10,940 --> 00:06:14,270
to throughout this talk so let's make

00:06:12,500 --> 00:06:15,950
sure everyone is on the same page I'm

00:06:14,270 --> 00:06:18,770
sorry that the slide is a little bit cut

00:06:15,950 --> 00:06:20,480
off but you can see everything gridlines

00:06:18,770 --> 00:06:22,400
are the horizontal and vertical lines

00:06:20,480 --> 00:06:24,770
that form the basis of a grid structure

00:06:22,400 --> 00:06:27,380
and can be referred to by the numerical

00:06:24,770 --> 00:06:29,960
index which starts from one now each

00:06:27,380 --> 00:06:31,850
space between the gridlines are known as

00:06:29,960 --> 00:06:33,770
grid tracks which make up the rows and

00:06:31,850 --> 00:06:36,289
columns of the grid and represent spaces

00:06:33,770 --> 00:06:38,270
that your items will appear in the grid

00:06:36,289 --> 00:06:40,100
cell is a single unit of the grid and

00:06:38,270 --> 00:06:42,680
may is made up of two

00:06:40,100 --> 00:06:45,170
Jason row lines and two adjacent column

00:06:42,680 --> 00:06:47,270
lines by default each grid item will

00:06:45,170 --> 00:06:49,850
take up one grid cell and a great area

00:06:47,270 --> 00:06:52,670
is simply made up of multiple grid cells

00:06:49,850 --> 00:06:55,340
now the best part about grid is the

00:06:52,670 --> 00:06:57,140
ability to define grid gaps which are

00:06:55,340 --> 00:07:00,920
the gutters between grid tracks

00:06:57,140 --> 00:07:03,050
fun fact written gap wasn't in the

00:07:00,920 --> 00:07:04,940
original specification under Rachel

00:07:03,050 --> 00:07:06,470
Andrew championed it during one of her

00:07:04,940 --> 00:07:09,050
conference talks and one of the

00:07:06,470 --> 00:07:10,700
specification writers ellika Azamat was

00:07:09,050 --> 00:07:12,680
in the audience and they worked together

00:07:10,700 --> 00:07:15,440
to get this feature into the

00:07:12,680 --> 00:07:17,900
specification so the next time you see

00:07:15,440 --> 00:07:19,670
it use grid gap remember you have Rachel

00:07:17,900 --> 00:07:22,760
and Ella cut to thank for this excellent

00:07:19,670 --> 00:07:24,370
feature now the first concept to wrap

00:07:22,760 --> 00:07:27,830
our heads around is the fact that grid

00:07:24,370 --> 00:07:30,050
like flexbox operates on a parent-child

00:07:27,830 --> 00:07:32,060
relationship whereby the display poverty

00:07:30,050 --> 00:07:34,490
is set on the parent element and this

00:07:32,060 --> 00:07:38,150
then affects the layer of all immediate

00:07:34,490 --> 00:07:40,100
children of that element now my favorite

00:07:38,150 --> 00:07:42,200
way of explaining the CSS grid mental

00:07:40,100 --> 00:07:45,380
model comes from Rachel Andrew he

00:07:42,200 --> 00:07:47,870
describes it as such it works from the

00:07:45,380 --> 00:07:49,760
container in while all the other layout

00:07:47,870 --> 00:07:51,800
techniques start from the items first

00:07:49,760 --> 00:07:53,750
so let's illustrate this with some

00:07:51,800 --> 00:07:55,850
simple examples which will also serve as

00:07:53,750 --> 00:07:59,510
the introduction to the most basic setup

00:07:55,850 --> 00:08:02,030
for using CSS squared so the setup here

00:07:59,510 --> 00:08:04,670
is six items we want to place in a three

00:08:02,030 --> 00:08:06,860
column grid one approach for creating

00:08:04,670 --> 00:08:08,540
such a layout is by using the inline

00:08:06,860 --> 00:08:10,880
block technique as you can see in the

00:08:08,540 --> 00:08:13,460
code for a three column grid we set this

00:08:10,880 --> 00:08:15,950
display of the items to inline block and

00:08:13,460 --> 00:08:18,410
give them all a width of a third of the

00:08:15,950 --> 00:08:21,020
container it's almost exactly the same

00:08:18,410 --> 00:08:24,740
views float because you also need to set

00:08:21,020 --> 00:08:26,690
it with on each item for flexbox

00:08:24,740 --> 00:08:28,400
to ensure our items line up in three

00:08:26,690 --> 00:08:31,160
columns we have to make sure that the

00:08:28,400 --> 00:08:33,110
Flex basis is again a third of the

00:08:31,160 --> 00:08:36,620
container the properties were applying

00:08:33,110 --> 00:08:38,539
still go on to the item and for all the

00:08:36,620 --> 00:08:40,669
three techniques I just described there

00:08:38,539 --> 00:08:42,860
isn't actually a bit it just looks that

00:08:40,669 --> 00:08:46,220
way because we forced the items to line

00:08:42,860 --> 00:08:47,960
up with each other but for grid the

00:08:46,220 --> 00:08:49,700
dimensions for rows and columns are

00:08:47,960 --> 00:08:53,630
defined on the parent container instead

00:08:49,700 --> 00:08:56,209
so the grid is real now before see

00:08:53,630 --> 00:08:57,740
we've always tried to size our elements

00:08:56,209 --> 00:08:59,509
as best we could then crossed our

00:08:57,740 --> 00:09:01,579
fingers and hope the browser would

00:08:59,509 --> 00:09:03,740
render them in the right place but now

00:09:01,579 --> 00:09:07,459
with wit we can control exactly where

00:09:03,740 --> 00:09:09,680
our elements should go the basic premise

00:09:07,459 --> 00:09:12,440
of how great books involves two steps

00:09:09,680 --> 00:09:14,899
you define the grid and then you place

00:09:12,440 --> 00:09:16,720
items in it either by yourself or you

00:09:14,899 --> 00:09:18,920
let the browser do it for you

00:09:16,720 --> 00:09:20,389
so let's look at the properties that are

00:09:18,920 --> 00:09:22,370
applied to the grid container first

00:09:20,389 --> 00:09:24,579
which will determine the size and

00:09:22,370 --> 00:09:27,709
structure of the bit we want to create

00:09:24,579 --> 00:09:29,959
now the numerous values we can use to

00:09:27,709 --> 00:09:32,180
define the size of our grids and they're

00:09:29,959 --> 00:09:35,149
those which are familiar like fixed

00:09:32,180 --> 00:09:37,190
units of pixels or m/s there are also

00:09:35,149 --> 00:09:39,949
relative units like percentages or

00:09:37,190 --> 00:09:42,199
viewport units and we now also have a

00:09:39,949 --> 00:09:43,940
new flexible unit known as fr or

00:09:42,199 --> 00:09:45,019
fractional unit which I will cover in

00:09:43,940 --> 00:09:48,949
more detail later

00:09:45,019 --> 00:09:54,829
so the key properties to define of it

00:09:48,949 --> 00:09:58,699
are with template columns so for this

00:09:54,829 --> 00:10:03,889
example we'll just use a simple 153

00:09:58,699 --> 00:10:09,380
column layout and the next property is

00:10:03,889 --> 00:10:11,509
grid template roads so it's really

00:10:09,380 --> 00:10:13,459
straightforward and the code itself is

00:10:11,509 --> 00:10:15,470
very visual because you can see that

00:10:13,459 --> 00:10:19,100
there are three columns and that there

00:10:15,470 --> 00:10:21,050
are two rows and to define gutters

00:10:19,100 --> 00:10:24,620
between the items to be used as

00:10:21,050 --> 00:10:27,050
mentioned previously GAAP and these

00:10:24,620 --> 00:10:28,839
three properties are essentially enough

00:10:27,050 --> 00:10:33,920
for you to get started with creating

00:10:28,839 --> 00:10:36,529
using CSS P now one thing I'd like to

00:10:33,920 --> 00:10:39,290
remind everybody is that the web is not

00:10:36,529 --> 00:10:41,689
a static medium it is dynamic and

00:10:39,290 --> 00:10:43,430
interactive and we manipulate this

00:10:41,689 --> 00:10:45,920
medium by writing code to tell the

00:10:43,430 --> 00:10:46,430
browser what we want it to do so here's

00:10:45,920 --> 00:10:48,949
an idea

00:10:46,430 --> 00:10:51,620
instead of micromanaging the pixels on

00:10:48,949 --> 00:10:54,139
our designs why not let the browser do

00:10:51,620 --> 00:10:55,639
its own thing this means being okay with

00:10:54,139 --> 00:10:58,399
your designs looking different across

00:10:55,639 --> 00:10:59,439
browsers and devices but it's not really

00:10:58,399 --> 00:11:01,699
such a bad thing

00:10:59,439 --> 00:11:03,649
we now have an increasing number of

00:11:01,699 --> 00:11:06,260
properties and values that pass on the

00:11:03,649 --> 00:11:07,310
responsibility of figuring out sizing to

00:11:06,260 --> 00:11:10,100
the browser

00:11:07,310 --> 00:11:12,050
one of them is the fr unit which

00:11:10,100 --> 00:11:14,329
represents a fraction of free space

00:11:12,050 --> 00:11:16,310
available so a common use case that if

00:11:14,329 --> 00:11:18,470
our units can solve for is for

00:11:16,310 --> 00:11:20,870
Responsive uniform bits that need to

00:11:18,470 --> 00:11:22,550
adjust to the width of the viewport so

00:11:20,870 --> 00:11:24,439
for layout methods that revolve around

00:11:22,550 --> 00:11:26,389
the width of the grid item

00:11:24,439 --> 00:11:28,490
multiple media queries are necessary

00:11:26,389 --> 00:11:30,319
because the width of each item has to be

00:11:28,490 --> 00:11:32,660
explicitly stated depending on the width

00:11:30,319 --> 00:11:34,309
of the viewport but with this new at our

00:11:32,660 --> 00:11:37,129
unit we are essentially ceding control

00:11:34,309 --> 00:11:38,870
of the sizing of each bit item to the

00:11:37,129 --> 00:11:40,490
browser allowing the browser to figure

00:11:38,870 --> 00:11:42,680
out how large each grid item should be

00:11:40,490 --> 00:11:45,319
based on the parameters we provide

00:11:42,680 --> 00:11:48,980
through some new functions that CSS grid

00:11:45,319 --> 00:11:51,019
introduced us so in this example and

00:11:48,980 --> 00:11:53,120
telling the browser that I want three

00:11:51,019 --> 00:11:55,730
sets of two columns in the ratio of 3 to

00:11:53,120 --> 00:11:57,649
2 now by using the fr unit all the

00:11:55,730 --> 00:11:59,540
available space is divided up

00:11:57,649 --> 00:12:01,339
accordingly the grid that grows and

00:11:59,540 --> 00:12:02,720
shrinks together with a viewport because

00:12:01,339 --> 00:12:05,660
it will occupy all the free space

00:12:02,720 --> 00:12:09,050
available in the container so you'll

00:12:05,660 --> 00:12:10,759
notice that I use a function in the grid

00:12:09,050 --> 00:12:14,689
template calls property which I will

00:12:10,759 --> 00:12:17,000
cover later one of the new functions

00:12:14,689 --> 00:12:20,089
that CSS grid gives us is the min/max

00:12:17,000 --> 00:12:22,759
function this function allows us to do

00:12:20,089 --> 00:12:26,300
something that we never could before we

00:12:22,759 --> 00:12:28,639
just to define a range of values so now

00:12:26,300 --> 00:12:30,800
I can actually tell the browser that I

00:12:28,639 --> 00:12:33,529
want my grid columns and rows to be

00:12:30,800 --> 00:12:35,629
between a value of x and y and the

00:12:33,529 --> 00:12:39,470
browser can figure out exactly what that

00:12:35,629 --> 00:12:41,540
value should be also if your design

00:12:39,470 --> 00:12:44,029
calls for a rather complex and large

00:12:41,540 --> 00:12:46,819
grid you probably don't want to type out

00:12:44,029 --> 00:12:49,550
each tracks with by hand the repeat

00:12:46,819 --> 00:12:51,559
function allows us to repeat patterns of

00:12:49,550 --> 00:12:54,559
track sizes so we won't end up with

00:12:51,559 --> 00:12:58,759
ridiculously long lines of column or row

00:12:54,559 --> 00:13:01,009
sizes now the repeat function also takes

00:12:58,759 --> 00:13:04,519
in the keywords of autofit and autofit

00:13:01,009 --> 00:13:06,259
which are very similar both these

00:13:04,519 --> 00:13:08,149
keywords tell the browser to generate

00:13:06,259 --> 00:13:10,249
the number of tracks required based on

00:13:08,149 --> 00:13:12,589
the track list specified as the second

00:13:10,249 --> 00:13:15,259
argument now a minor difference is that

00:13:12,589 --> 00:13:16,519
for auto fit the empty tracks are

00:13:15,259 --> 00:13:18,500
collapsed and this will become more

00:13:16,519 --> 00:13:20,660
evident if you're using a flexible range

00:13:18,500 --> 00:13:23,630
for track sizing

00:13:20,660 --> 00:13:25,910
in this example I've asked the browser

00:13:23,630 --> 00:13:28,850
to make me columns there are at least a

00:13:25,910 --> 00:13:32,660
hundred pixels wide but can grow with

00:13:28,850 --> 00:13:37,250
free space permits so even though right

00:13:32,660 --> 00:13:39,170
now I only have six bit items the

00:13:37,250 --> 00:13:41,420
columns are actually still there if I

00:13:39,170 --> 00:13:43,610
use autofill so there's this white space

00:13:41,420 --> 00:13:46,250
because there are two columns they are

00:13:43,610 --> 00:13:50,180
not filled by grid items if I change

00:13:46,250 --> 00:13:52,069
this value to autofit the last two

00:13:50,180 --> 00:13:54,470
columns are collapsed and the columns

00:13:52,069 --> 00:13:56,899
that do contain grid items will grow to

00:13:54,470 --> 00:13:58,819
fill up the empty space so this is

00:13:56,899 --> 00:14:02,089
something to keep in mind when you need

00:13:58,819 --> 00:14:04,279
to design a layout now for this example

00:14:02,089 --> 00:14:06,560
I'm telling the browser that when the

00:14:04,279 --> 00:14:08,839
viewport size shrinks I want to cap the

00:14:06,560 --> 00:14:11,540
shrink of each column at 10 m/s but if

00:14:08,839 --> 00:14:14,180
there's extra space grow all my columns

00:14:11,540 --> 00:14:16,610
equally so by using Auto fill or auto

00:14:14,180 --> 00:14:19,399
fit the browser will calculate how many

00:14:16,610 --> 00:14:21,410
columns fulfill my requirement and when

00:14:19,399 --> 00:14:23,540
the viewport size changes the number of

00:14:21,410 --> 00:14:26,029
columns will decrease or increase until

00:14:23,540 --> 00:14:28,519
everything fits because the maximum

00:14:26,029 --> 00:14:30,560
value is a flexible unit if there's an

00:14:28,519 --> 00:14:33,380
excess of space like maybe there's six

00:14:30,560 --> 00:14:35,389
ends of space left over all the columns

00:14:33,380 --> 00:14:38,149
will grow equally to fill up this extra

00:14:35,389 --> 00:14:40,399
six ends so and not a single media query

00:14:38,149 --> 00:14:42,560
was needed to get this sort of

00:14:40,399 --> 00:14:44,360
presentation and you might have noticed

00:14:42,560 --> 00:14:46,790
that although I explained each feature

00:14:44,360 --> 00:14:49,880
individually there's so much more useful

00:14:46,790 --> 00:14:53,060
when used in combination teams point

00:14:49,880 --> 00:14:55,310
remember one more thing I want to

00:14:53,060 --> 00:14:58,579
mention is the concept of an implicit

00:14:55,310 --> 00:15:00,649
grip the explicit grid is one where we

00:14:58,579 --> 00:15:02,899
define using the grid template columns

00:15:00,649 --> 00:15:04,759
and victims are those properties but

00:15:02,899 --> 00:15:06,680
there's nothing stopping us from placing

00:15:04,759 --> 00:15:09,800
an item outside the bounds of describe

00:15:06,680 --> 00:15:12,290
what happens then in this simple three

00:15:09,800 --> 00:15:14,360
by two grid the grid con lines only go

00:15:12,290 --> 00:15:16,850
up to four but if we place an item

00:15:14,360 --> 00:15:19,279
starting on bit line number five the

00:15:16,850 --> 00:15:21,079
browser will add two implicit columns as

00:15:19,279 --> 00:15:23,269
shown by the purple dashed lines on the

00:15:21,079 --> 00:15:28,569
grid to accommodate this item it's

00:15:23,269 --> 00:15:32,089
really a very smart algorithm next up is

00:15:28,569 --> 00:15:33,680
alignment because aligning stuff on a

00:15:32,089 --> 00:15:35,660
page is practically the

00:15:33,680 --> 00:15:38,480
most important part of building web

00:15:35,660 --> 00:15:40,850
layouts and box alignment is a topic

00:15:38,480 --> 00:15:42,589
that can sometimes trip people up I know

00:15:40,850 --> 00:15:47,290
it can be hard to remember exactly which

00:15:42,589 --> 00:15:50,120
property does what so for me I associate

00:15:47,290 --> 00:15:53,420
justify with the direction that takes

00:15:50,120 --> 00:15:55,850
flows because I've been justifying text

00:15:53,420 --> 00:15:59,180
in Microsoft Word since version 97 and

00:15:55,850 --> 00:16:01,670
if justify is with the inline direction

00:15:59,180 --> 00:16:03,680
then it makes sense that a line must be

00:16:01,670 --> 00:16:06,080
for the other direction

00:16:03,680 --> 00:16:07,640
so directions to me are not the most

00:16:06,080 --> 00:16:10,070
tricky part it seems that it's the

00:16:07,640 --> 00:16:13,399
second word in these properties content

00:16:10,070 --> 00:16:16,190
item self that seemed to confuse people

00:16:13,399 --> 00:16:17,750
so this table summarizes the six box

00:16:16,190 --> 00:16:21,370
alignment properties that are regularly

00:16:17,750 --> 00:16:24,200
used when building with flexbox in big

00:16:21,370 --> 00:16:25,820
the justify content and the line content

00:16:24,200 --> 00:16:27,680
properties are known as content

00:16:25,820 --> 00:16:29,330
distribution properties these properties

00:16:27,680 --> 00:16:31,850
are relevant when the container is

00:16:29,330 --> 00:16:33,800
larger than the total width or height of

00:16:31,850 --> 00:16:35,510
the grid rows and columns so as we can

00:16:33,800 --> 00:16:37,730
see from this particular example there

00:16:35,510 --> 00:16:39,770
is some space to the right and to the

00:16:37,730 --> 00:16:41,390
bottom of the grid items and it is

00:16:39,770 --> 00:16:43,550
possible to set the alignment of the

00:16:41,390 --> 00:16:46,490
rows and columns with respect to the

00:16:43,550 --> 00:16:49,459
entire grid container so there are three

00:16:46,490 --> 00:16:53,930
values we can use start which is the

00:16:49,459 --> 00:16:57,140
default Center and end so this will

00:16:53,930 --> 00:16:59,570
shift the rows and columns along the

00:16:57,140 --> 00:17:02,600
respective axis but we can also adjust

00:16:59,570 --> 00:17:07,640
the space between rows and columns using

00:17:02,600 --> 00:17:12,949
space around space between and space

00:17:07,640 --> 00:17:16,100
even so it's probably easier to refer to

00:17:12,949 --> 00:17:18,079
this table and as you can see space

00:17:16,100 --> 00:17:20,720
around puts an equal amount of space on

00:17:18,079 --> 00:17:22,670
both sides of the row or column so the

00:17:20,720 --> 00:17:24,980
space is at the edge of the container or

00:17:22,670 --> 00:17:27,620
be half of the spaces between the inner

00:17:24,980 --> 00:17:29,660
rows or columns now space between

00:17:27,620 --> 00:17:31,670
distributes all the tracks evenly within

00:17:29,660 --> 00:17:33,950
the bit container with the first and

00:17:31,670 --> 00:17:36,830
last call rows or columns flush with the

00:17:33,950 --> 00:17:39,559
edges of the container and space evenly

00:17:36,830 --> 00:17:42,290
is currently only supported in chrome 60

00:17:39,559 --> 00:17:45,080
onwards and Firefox 52 onwards and it

00:17:42,290 --> 00:17:47,180
distributes the via tracks evenly within

00:17:45,080 --> 00:17:49,160
the good container such that the

00:17:47,180 --> 00:17:52,460
face between any two adjacent grit

00:17:49,160 --> 00:17:55,190
tracks are exactly the same if everybody

00:17:52,460 --> 00:17:58,070
is completely lost now please trust me

00:17:55,190 --> 00:18:00,310
when I say it gets easier with

00:17:58,070 --> 00:18:02,960
experience

00:18:00,310 --> 00:18:05,450
now the justify self and aligned self

00:18:02,960 --> 00:18:08,330
properties are known as self alignment

00:18:05,450 --> 00:18:10,790
properties so justify is for the main or

00:18:08,330 --> 00:18:13,010
inline axis which is the direction of

00:18:10,790 --> 00:18:14,990
text flow while a line is for the cross

00:18:13,010 --> 00:18:17,570
or block axis which is the direction

00:18:14,990 --> 00:18:19,520
that block boxes are stacked so these

00:18:17,570 --> 00:18:22,190
properties allow us to control how the

00:18:19,520 --> 00:18:24,170
content of each grid item is aligned

00:18:22,190 --> 00:18:26,510
within the great area it's been

00:18:24,170 --> 00:18:29,180
allocated to the default state is

00:18:26,510 --> 00:18:31,160
stretch as you can see in item a here

00:18:29,180 --> 00:18:33,500
where the content structures to fill the

00:18:31,160 --> 00:18:35,360
entire grid area and we can adjust the

00:18:33,500 --> 00:18:37,640
alignment of content within the grid

00:18:35,360 --> 00:18:41,570
item with start center or end the moment

00:18:37,640 --> 00:18:44,540
you apply a start center or end value to

00:18:41,570 --> 00:18:48,260
the align or justify self property the

00:18:44,540 --> 00:18:54,710
entire bit cell the target item will

00:18:48,260 --> 00:18:57,320
shrink to fit the contents we have

00:18:54,710 --> 00:18:59,930
aligned items and justify items and

00:18:57,320 --> 00:19:02,840
these properties set the default align

00:18:59,930 --> 00:19:05,570
self and justify self behavior of all

00:19:02,840 --> 00:19:09,410
the items within the grid so it's

00:19:05,570 --> 00:19:12,620
essentially just a mess setting of the

00:19:09,410 --> 00:19:16,090
justify or aligning itself properties so

00:19:12,620 --> 00:19:21,710
let's do this and you can see as

00:19:16,090 --> 00:19:23,930
everything shrinks to fit the content so

00:19:21,710 --> 00:19:26,180
earlier on i mentioned that flexbox and

00:19:23,930 --> 00:19:28,400
good.what really well together and I

00:19:26,180 --> 00:19:30,890
want to share an example of that so the

00:19:28,400 --> 00:19:33,740
image on the left is a page from the

00:19:30,890 --> 00:19:36,170
publication Mallory photography film by

00:19:33,740 --> 00:19:38,510
Laszlo Molly Nash who was a professor at

00:19:36,170 --> 00:19:40,640
the Bauhaus school now the layout is

00:19:38,510 --> 00:19:43,490
made up of several striking thick black

00:19:40,640 --> 00:19:44,990
borders around each grid cell each cell

00:19:43,490 --> 00:19:47,510
also contains a different type of

00:19:44,990 --> 00:19:50,420
content and their alignment varies from

00:19:47,510 --> 00:19:52,730
cell to cell so how would we recreative

00:19:50,420 --> 00:19:56,870
and align things according to the

00:19:52,730 --> 00:19:58,880
original design when I first started

00:19:56,870 --> 00:20:00,980
building this out my first instinct was

00:19:58,880 --> 00:20:02,750
to use the justify self and

00:20:00,980 --> 00:20:06,590
lines of properties to adjust the

00:20:02,750 --> 00:20:08,900
content positions nice try but it wasn't

00:20:06,590 --> 00:20:12,110
no go because the border property

00:20:08,900 --> 00:20:13,820
applies on to the grid item any bit

00:20:12,110 --> 00:20:15,980
alignment property other than stretch

00:20:13,820 --> 00:20:18,559
makes the size of the grid item fit to

00:20:15,980 --> 00:20:20,419
its contents so any borders apply to the

00:20:18,559 --> 00:20:22,640
great items naturally fit the grid items

00:20:20,419 --> 00:20:27,080
content so it sort of messed up my

00:20:22,640 --> 00:20:29,929
design but if we instead apply display

00:20:27,080 --> 00:20:32,299
flex on to the grid item we cannot use

00:20:29,929 --> 00:20:34,880
flex alignment properties applied on to

00:20:32,299 --> 00:20:38,480
the Flex container to position the great

00:20:34,880 --> 00:20:42,650
items content accordingly remember

00:20:38,480 --> 00:20:44,150
awesome together now the next thing

00:20:42,650 --> 00:20:46,190
we're going to cover is the manual

00:20:44,150 --> 00:20:47,690
placement of great items and when it

00:20:46,190 --> 00:20:49,460
comes to great placement my mind

00:20:47,690 --> 00:20:52,700
instinctively draws a parallel with

00:20:49,460 --> 00:20:54,950
placing pieces on a chess board other

00:20:52,700 --> 00:20:57,260
than using a numerical index to refer to

00:20:54,950 --> 00:20:59,870
specific gridlines we can give them

00:20:57,260 --> 00:21:02,030
names as well now lie names can be any

00:20:59,870 --> 00:21:04,309
string except span which is a keyword

00:21:02,030 --> 00:21:05,840
and there's no limit to how many names

00:21:04,309 --> 00:21:08,419
you can assign to a particular line

00:21:05,840 --> 00:21:12,049
either another handy feature with

00:21:08,419 --> 00:21:13,940
gridlines is a negative index so this

00:21:12,049 --> 00:21:15,919
means that if you need to refer to the

00:21:13,940 --> 00:21:17,780
last grid line and you don't know how

00:21:15,919 --> 00:21:20,870
many good lines they're going to be you

00:21:17,780 --> 00:21:23,150
can always use negative 1 to get at the

00:21:20,870 --> 00:21:25,940
last grid line so say I want something

00:21:23,150 --> 00:21:28,460
to go into the big main area in this

00:21:25,940 --> 00:21:31,090
example I would set in both the grid

00:21:28,460 --> 00:21:34,309
vote and get column properties to either

00:21:31,090 --> 00:21:40,669
2/3 or use their line names of content

00:21:34,309 --> 00:21:42,980
start / content end so we can see how

00:21:40,669 --> 00:21:44,510
this works the row and bit column are

00:21:42,980 --> 00:21:46,940
actually shorthand for their respective

00:21:44,510 --> 00:21:50,210
start and end properties so by default

00:21:46,940 --> 00:21:52,190
each grid item takes up one bit cell so

00:21:50,210 --> 00:21:54,890
in this example I've only put in one

00:21:52,190 --> 00:21:56,870
value for each of the grid column and

00:21:54,890 --> 00:21:59,240
grit roast remedy so the start position

00:21:56,870 --> 00:22:02,120
for everybody is just one good cell and

00:21:59,240 --> 00:22:04,700
of course I can make a good item spend

00:22:02,120 --> 00:22:06,650
multiple rows or columns by specifying

00:22:04,700 --> 00:22:08,720
an end value so let's just take the

00:22:06,650 --> 00:22:11,179
third child which is probably the

00:22:08,720 --> 00:22:14,980
coconut I can make it

00:22:11,179 --> 00:22:16,370
span multiple it says

00:22:14,980 --> 00:22:19,980
[Music]

00:22:16,370 --> 00:22:22,650
so the code is pretty intuitive and if

00:22:19,980 --> 00:22:24,539
you notice it's actually possible for

00:22:22,650 --> 00:22:26,760
great items to overlap each other as

00:22:24,539 --> 00:22:29,700
well and this will be covered in the

00:22:26,760 --> 00:22:31,440
later example so while we're at the

00:22:29,700 --> 00:22:33,270
topic of naming things

00:22:31,440 --> 00:22:36,900
I want to point out that we can also

00:22:33,270 --> 00:22:39,690
name the grid areas so the syntax of the

00:22:36,900 --> 00:22:41,730
grid template areas property provides a

00:22:39,690 --> 00:22:43,350
visualization of the structure of the

00:22:41,730 --> 00:22:45,450
grid making the overall layout of the

00:22:43,350 --> 00:22:48,210
grid container much easier to understand

00:22:45,450 --> 00:22:50,730
from a code perspective and we then

00:22:48,210 --> 00:22:52,890
place items in their respective areas by

00:22:50,730 --> 00:22:55,919
assigning the grid area property onto

00:22:52,890 --> 00:22:57,659
the item so again you can see although

00:22:55,919 --> 00:23:01,080
it's a little bit cut off in this

00:22:57,659 --> 00:23:03,480
diagram the logo stats score and the

00:23:01,080 --> 00:23:09,470
board they all correspond to how it

00:23:03,480 --> 00:23:12,929
looks like in the code so this is how

00:23:09,470 --> 00:23:15,919
this example of how great areas can be

00:23:12,929 --> 00:23:18,750
used when you are even planning a layout

00:23:15,919 --> 00:23:21,179
so the dot notation in my code just

00:23:18,750 --> 00:23:24,570
indicates that you know it's empty space

00:23:21,179 --> 00:23:27,750
but let's say I want atom a to take up

00:23:24,570 --> 00:23:29,580
you know to be a bit bigger I can just

00:23:27,750 --> 00:23:31,830
manipulate the grid template areas

00:23:29,580 --> 00:23:36,120
property without touching the great

00:23:31,830 --> 00:23:39,539
items themselves so this makes adjusting

00:23:36,120 --> 00:23:45,510
the layout at different contexts a lot

00:23:39,539 --> 00:23:47,610
easier so there are a few graphic design

00:23:45,510 --> 00:23:50,700
concepts that we can now do on the web

00:23:47,610 --> 00:23:53,159
because of CSS grid and one of them is

00:23:50,700 --> 00:23:54,929
vertical whitespace now vertical

00:23:53,159 --> 00:23:56,490
whitespace is an important concept in

00:23:54,929 --> 00:23:58,470
layout design because it serves to

00:23:56,490 --> 00:24:01,679
balance the layout and bring focus to

00:23:58,470 --> 00:24:04,020
important content so before CSS big

00:24:01,679 --> 00:24:07,200
trying to do this on the web involved

00:24:04,020 --> 00:24:10,049
hacks like spacer gates empty dibs

00:24:07,200 --> 00:24:12,000
JavaScript you name it that's because

00:24:10,049 --> 00:24:13,080
there was never a proper way to lay up

00:24:12,000 --> 00:24:16,950
things on the web

00:24:13,080 --> 00:24:20,010
other than one after another I mean you

00:24:16,950 --> 00:24:21,900
could use absolute positioning but that

00:24:20,010 --> 00:24:23,340
sort of opens up another kind of worms

00:24:21,900 --> 00:24:26,429
because now you're messing with the

00:24:23,340 --> 00:24:29,430
document flow but life's different now

00:24:26,429 --> 00:24:32,380
it's better this

00:24:29,430 --> 00:24:34,390
so with victims of areas creating

00:24:32,380 --> 00:24:36,850
responsive layouts becomes a little more

00:24:34,390 --> 00:24:39,700
convenient as well so right here I have

00:24:36,850 --> 00:24:41,350
a recreation of a Bron hi-5 print poster

00:24:39,700 --> 00:24:44,110
which was originally made out in

00:24:41,350 --> 00:24:46,510
landscape but on the web this same

00:24:44,110 --> 00:24:48,490
layout would break if the victim part

00:24:46,510 --> 00:24:50,770
starts to narrow so we'll need to adjust

00:24:48,490 --> 00:24:53,040
the layout when that happens now by

00:24:50,770 --> 00:24:55,450
using the bit template areas property

00:24:53,040 --> 00:25:00,060
handler responsiveness becomes much

00:24:55,450 --> 00:25:02,710
easier than traditional techniques so

00:25:00,060 --> 00:25:05,290
this is how we modify the layout by

00:25:02,710 --> 00:25:07,630
changing the grid itself so I'm not

00:25:05,290 --> 00:25:10,810
tripping and seabed clearly but because

00:25:07,630 --> 00:25:12,940
I'm using Firefox and Firefox dev tools

00:25:10,810 --> 00:25:15,100
actually allows you to display the great

00:25:12,940 --> 00:25:17,710
area names you can see that I've

00:25:15,100 --> 00:25:19,750
assigned each section its own named bit

00:25:17,710 --> 00:25:22,630
area and when the layout is too narrow

00:25:19,750 --> 00:25:25,270
for the original wide design I don't

00:25:22,630 --> 00:25:27,610
change the sizing of the items instead I

00:25:25,270 --> 00:25:29,860
actually change the grid itself so when

00:25:27,610 --> 00:25:32,950
it hits yet another breakpoint the grid

00:25:29,860 --> 00:25:34,480
gets more 1 once again so I find this

00:25:32,950 --> 00:25:36,640
approach should be around a convenient

00:25:34,480 --> 00:25:41,830
solution for a relatively common use

00:25:36,640 --> 00:25:43,210
case okay so this is the final end

00:25:41,830 --> 00:25:46,210
result and you can see how the layout

00:25:43,210 --> 00:25:48,310
changes with a viewport now I'm gonna

00:25:46,210 --> 00:25:50,440
make an assumption here that most people

00:25:48,310 --> 00:25:53,590
have used media queries in some capacity

00:25:50,440 --> 00:25:56,430
before or at least seen one and the most

00:25:53,590 --> 00:25:58,870
common media queries are width based and

00:25:56,430 --> 00:26:01,720
occasionally you may see a height based

00:25:58,870 --> 00:26:03,640
media query or two but there are a lot

00:26:01,720 --> 00:26:06,280
more media queries out there that I

00:26:03,640 --> 00:26:08,140
don't often see people using so in the

00:26:06,280 --> 00:26:10,240
current specification there are thirteen

00:26:08,140 --> 00:26:11,620
media features that can be used as

00:26:10,240 --> 00:26:14,290
conditionals including things like

00:26:11,620 --> 00:26:16,480
orientation color resolution and so long

00:26:14,290 --> 00:26:18,730
now this particular design I'm showing

00:26:16,480 --> 00:26:22,090
in this demo is a very good use case for

00:26:18,730 --> 00:26:23,560
the aspect ratio media query so aspect

00:26:22,090 --> 00:26:25,570
makes your media queries come in really

00:26:23,560 --> 00:26:27,850
handy when relative proportions are

00:26:25,570 --> 00:26:30,670
important for your layout and we can

00:26:27,850 --> 00:26:34,180
always combine multiple media queries to

00:26:30,670 --> 00:26:35,770
cater for different environments so

00:26:34,180 --> 00:26:38,110
another technique that makes layout

00:26:35,770 --> 00:26:40,420
interesting is the use of overlap

00:26:38,110 --> 00:26:42,190
because in breaks our expectation of

00:26:40,420 --> 00:26:45,350
regularity

00:26:42,190 --> 00:26:47,210
but we don't usually see overlap on the

00:26:45,350 --> 00:26:49,280
web because it used to involve a lot of

00:26:47,210 --> 00:26:49,940
clicking positioning moves and negative

00:26:49,280 --> 00:26:52,580
margins

00:26:49,940 --> 00:26:55,480
some people just cheat it by processing

00:26:52,580 --> 00:26:58,730
everything into one single image

00:26:55,480 --> 00:27:00,830
I've also seen solutions that use

00:26:58,730 --> 00:27:04,100
JavaScript to calculate the exact

00:27:00,830 --> 00:27:07,039
positioning but we don't have to do all

00:27:04,100 --> 00:27:10,220
that anymore so here's a simple example

00:27:07,039 --> 00:27:11,780
of overlap just two circles behind the

00:27:10,220 --> 00:27:13,909
hitter so the code here is already

00:27:11,780 --> 00:27:14,710
simplified to show only the placement

00:27:13,909 --> 00:27:17,330
properties

00:27:14,710 --> 00:27:19,970
pseudo elements are treated as children

00:27:17,330 --> 00:27:21,650
of a parent container so these two

00:27:19,970 --> 00:27:23,659
circles the variant green circles are

00:27:21,650 --> 00:27:26,330
pseudo elements of the grid container

00:27:23,659 --> 00:27:28,850
that had been explicitly placed to

00:27:26,330 --> 00:27:31,789
overlap and the header simply overlaps

00:27:28,850 --> 00:27:33,650
the book so this placement poke is a lot

00:27:31,789 --> 00:27:35,330
more intuitive than using absolute

00:27:33,650 --> 00:27:37,309
positioning and you don't need to do a

00:27:35,330 --> 00:27:39,200
lot of complicated math just to get the

00:27:37,309 --> 00:27:44,030
alignment right regardless of how the

00:27:39,200 --> 00:27:45,559
browser is resized so I'm going to go

00:27:44,030 --> 00:27:48,049
through a really high-level walkthrough

00:27:45,559 --> 00:27:51,110
of how I would build a great layout with

00:27:48,049 --> 00:27:55,480
overlaps huge garbage so I saw this this

00:27:51,110 --> 00:27:59,690
is a artist concept on dribble for the

00:27:55,480 --> 00:28:01,190
musical band typo and the way it's been

00:27:59,690 --> 00:28:05,330
designed I feel makes it a perfect

00:28:01,190 --> 00:28:07,370
candidate for CSS big so one thing I

00:28:05,330 --> 00:28:09,650
noticed after I started building the CSS

00:28:07,370 --> 00:28:11,929
grid is that I would sketch my designs

00:28:09,650 --> 00:28:14,330
on pencil and paper a lot more because

00:28:11,929 --> 00:28:16,730
from great you have to plan the entirety

00:28:14,330 --> 00:28:18,500
of the layout beforehand so definitely

00:28:16,730 --> 00:28:21,289
helps to have the big picture view in

00:28:18,500 --> 00:28:23,210
your mind of fun and by sketching it out

00:28:21,289 --> 00:28:25,490
it also helps me think about how the

00:28:23,210 --> 00:28:27,470
track sizing should be done which tracks

00:28:25,490 --> 00:28:30,020
should be flexible which should have a

00:28:27,470 --> 00:28:32,600
defined width or perhaps some tracks

00:28:30,020 --> 00:28:34,669
need to have a range of widths and yes

00:28:32,600 --> 00:28:37,820
it is a bit more thinking and planning

00:28:34,669 --> 00:28:41,539
up front than before but the end result

00:28:37,820 --> 00:28:44,090
is also much medicine so to me markup

00:28:41,539 --> 00:28:45,799
always comes first I'll start off with

00:28:44,090 --> 00:28:48,320
every element that needs to be displayed

00:28:45,799 --> 00:28:51,020
you know title bits of text and image so

00:28:48,320 --> 00:28:52,820
on and then based on the design we'll

00:28:51,020 --> 00:28:55,620
add in some base styles nothing amazing

00:28:52,820 --> 00:28:58,200
just bombs no colors

00:28:55,620 --> 00:28:59,940
formatting some browsers do apply their

00:28:58,200 --> 00:29:01,860
own styles so usually I'll just be

00:28:59,940 --> 00:29:04,200
setting the margins and padding's and

00:29:01,860 --> 00:29:07,880
set box sizing for all elements to

00:29:04,200 --> 00:29:09,990
border box just very very basic research

00:29:07,880 --> 00:29:12,780
so I've been going on for quite a bit

00:29:09,990 --> 00:29:14,340
now and even if you think whatever I've

00:29:12,780 --> 00:29:16,440
been saying up to this point it's

00:29:14,340 --> 00:29:19,410
totally boring and doesn't benefit your

00:29:16,440 --> 00:29:22,830
life in any way at all I really want you

00:29:19,410 --> 00:29:25,220
to remember this point websites do not

00:29:22,830 --> 00:29:28,380
have to look the same in every browser

00:29:25,220 --> 00:29:30,330
because the web is not static it is up

00:29:28,380 --> 00:29:33,170
to the people like us who create things

00:29:30,330 --> 00:29:36,150
on the web to change people's mindsets

00:29:33,170 --> 00:29:39,450
okay and interested people can go back

00:29:36,150 --> 00:29:41,010
to being bored now as I continue now I

00:29:39,450 --> 00:29:43,020
did not put in that slide as a time

00:29:41,010 --> 00:29:45,210
marker the point I was trying to make is

00:29:43,020 --> 00:29:48,030
that rather than spending extra effort

00:29:45,210 --> 00:29:51,270
wrangling every pixel into place why not

00:29:48,030 --> 00:29:53,490
embrace the dynamism of the web the best

00:29:51,270 --> 00:29:56,220
part about the wet medium is its ability

00:29:53,490 --> 00:29:58,320
to layer on additional functionality

00:29:56,220 --> 00:29:59,220
depending on the browser on which your

00:29:58,320 --> 00:30:01,860
page is being rendered

00:29:59,220 --> 00:30:03,630
now I genuinely believe that web pages

00:30:01,860 --> 00:30:05,730
don't need to look exactly the same

00:30:03,630 --> 00:30:08,670
across every browser or device but I do

00:30:05,730 --> 00:30:10,800
believe that no layout should be broken

00:30:08,670 --> 00:30:12,960
so the base layer should utilize

00:30:10,800 --> 00:30:15,540
properties that almost have full support

00:30:12,960 --> 00:30:17,250
so in this particular example I'm really

00:30:15,540 --> 00:30:19,620
just letting everything stack on top of

00:30:17,250 --> 00:30:21,660
each other with some minor positioning

00:30:19,620 --> 00:30:23,670
at the bottom so browsers that do not

00:30:21,660 --> 00:30:27,120
support it or feature queries will get

00:30:23,670 --> 00:30:29,580
this layout now comes the actual great

00:30:27,120 --> 00:30:32,460
code so I chose to go with flexible

00:30:29,580 --> 00:30:34,380
units like fr and Newport unit because I

00:30:32,460 --> 00:30:36,360
wanted the layout to fully occupy the

00:30:34,380 --> 00:30:38,160
window without overflowing when space

00:30:36,360 --> 00:30:40,830
allowed so if you look at my good

00:30:38,160 --> 00:30:42,990
template columns property it does look a

00:30:40,830 --> 00:30:45,870
little bit nuts if you have never used

00:30:42,990 --> 00:30:47,280
grit before but once you start

00:30:45,870 --> 00:30:50,580
experimenting with the different

00:30:47,280 --> 00:30:53,460
functions and values I promise this will

00:30:50,580 --> 00:30:55,980
make sense to you so I'm a friend who

00:30:53,460 --> 00:30:57,809
does web BR and he once said that until

00:30:55,980 --> 00:31:00,620
you put on the headset you don't really

00:30:57,809 --> 00:31:04,440
know the art this is somewhat similar

00:31:00,620 --> 00:31:06,620
you need to feel the grit to understand

00:31:04,440 --> 00:31:06,620
it

00:31:08,080 --> 00:31:15,440
so this is how the whole thing looks

00:31:12,550 --> 00:31:17,390
once we do that when we do the developer

00:31:15,440 --> 00:31:21,130
thing or resizing the browser window all

00:31:17,390 --> 00:31:25,100
over the place my videos not playing

00:31:21,130 --> 00:31:28,790
here we go so you can see how the design

00:31:25,100 --> 00:31:30,680
works as the viewport size changes and I

00:31:28,790 --> 00:31:32,960
have been informed by none the web

00:31:30,680 --> 00:31:34,640
developer friends that this resizing is

00:31:32,960 --> 00:31:35,870
not normal behavior I'll just look at

00:31:34,640 --> 00:31:37,550
them like what do you mean you don't

00:31:35,870 --> 00:31:41,900
resize your browser a thousand times a

00:31:37,550 --> 00:31:43,460
day anyway moving on so some of you

00:31:41,900 --> 00:31:46,340
might have noticed that my grit coat was

00:31:43,460 --> 00:31:48,650
wrapped within an additional query with

00:31:46,340 --> 00:31:50,360
the syntax at supports this is otherwise

00:31:48,650 --> 00:31:52,610
known as feature queries and they're

00:31:50,360 --> 00:31:54,860
defined as such conditionals that test

00:31:52,610 --> 00:31:57,860
if the browser supports a particular CSS

00:31:54,860 --> 00:32:00,170
feature so this is how feature query

00:31:57,860 --> 00:32:01,790
looks like the conditional checks if the

00:32:00,170 --> 00:32:03,770
browser supports a particular property

00:32:01,790 --> 00:32:05,180
or not now if it doesn't the entire

00:32:03,770 --> 00:32:07,280
block within the app supports rows

00:32:05,180 --> 00:32:08,660
ignored so this means we start off with

00:32:07,280 --> 00:32:11,960
a basic layout that works everywhere

00:32:08,660 --> 00:32:14,390
could be Fox Fox pays even single column

00:32:11,960 --> 00:32:16,160
with largely browser default UI elements

00:32:14,390 --> 00:32:18,080
that sort of thing and then we layer on

00:32:16,160 --> 00:32:19,580
styles based on the features that we

00:32:18,080 --> 00:32:21,680
want to use like what we saw in the

00:32:19,580 --> 00:32:23,960
previous example so by organizing our

00:32:21,680 --> 00:32:25,970
code in this manner the browsers that do

00:32:23,960 --> 00:32:28,610
not support feature queries or the

00:32:25,970 --> 00:32:30,440
specified property will still get styled

00:32:28,610 --> 00:32:34,070
but those that do get a different look

00:32:30,440 --> 00:32:36,440
so we're making use of the C in CSS so

00:32:34,070 --> 00:32:38,930
you can call it test skating web design

00:32:36,440 --> 00:32:41,810
if this concept ever takes off remember

00:32:38,930 --> 00:32:43,850
you heard it here first a support for

00:32:41,810 --> 00:32:45,860
feature queries is really good with

00:32:43,850 --> 00:32:48,920
coverage in over 90% of browsers

00:32:45,860 --> 00:32:51,350
including Opera Mini but you might have

00:32:48,920 --> 00:32:55,010
noticed that Internet Explorer does not

00:32:51,350 --> 00:32:56,900
and in fact will not ever get it so

00:32:55,010 --> 00:32:58,970
here's where a decision has to be made

00:32:56,900 --> 00:33:01,550
and it will differ from project to

00:32:58,970 --> 00:33:03,380
project on whether it is acceptable to

00:33:01,550 --> 00:33:05,810
forego some of the features that I 11

00:33:03,380 --> 00:33:08,450
does offer and serve a more basic

00:33:05,810 --> 00:33:10,580
fallback instead again there is no

00:33:08,450 --> 00:33:12,170
definitive answer to this until a proper

00:33:10,580 --> 00:33:16,190
discussion with development stakeholders

00:33:12,170 --> 00:33:18,860
arrive at an acceptable conclusion so

00:33:16,190 --> 00:33:21,170
this next example is a header design and

00:33:18,860 --> 00:33:24,170
I got it from a CSS tricks article

00:33:21,170 --> 00:33:25,820
and Syd was originally an image anyway

00:33:24,170 --> 00:33:28,580
you can think of this as an enhancement

00:33:25,820 --> 00:33:30,260
so the fallback coat here serves up an

00:33:28,580 --> 00:33:34,840
image which is actually the original

00:33:30,260 --> 00:33:37,490
image used on the site so the message

00:33:34,840 --> 00:33:40,010
bit is just there to show that this

00:33:37,490 --> 00:33:42,920
particular browser which is ie8 does not

00:33:40,010 --> 00:33:45,470
support CSS quit or flexbox

00:33:42,920 --> 00:33:47,480
so essentially this is the fallback that

00:33:45,470 --> 00:33:50,470
all browsers will get regardless of

00:33:47,480 --> 00:33:54,050
whatever it supports which is the image

00:33:50,470 --> 00:33:58,010
but let's say I have a browser that

00:33:54,050 --> 00:34:00,650
supports text box so this feature query

00:33:58,010 --> 00:34:04,280
is for browsers that support both text

00:34:00,650 --> 00:34:05,930
box and future queries but not yet so

00:34:04,280 --> 00:34:07,970
they'll just end up with basic styles

00:34:05,930 --> 00:34:10,160
that look like this with all the

00:34:07,970 --> 00:34:12,730
benefits of searchable and indexable

00:34:10,160 --> 00:34:17,470
text because everything in this

00:34:12,730 --> 00:34:20,030
particular header is written in HTML CSS

00:34:17,470 --> 00:34:24,169
so there will be some resetting needed

00:34:20,030 --> 00:34:27,320
as we layer on different features based

00:34:24,169 --> 00:34:29,179
on feature queries and fully

00:34:27,320 --> 00:34:31,520
understanding the Cascade is a

00:34:29,179 --> 00:34:34,490
prerequisite for embracing this sort of

00:34:31,520 --> 00:34:37,160
a design approach so the second feature

00:34:34,490 --> 00:34:39,380
query is for the latest browsers that

00:34:37,160 --> 00:34:41,360
support all the things so this

00:34:39,380 --> 00:34:43,700
particular layout use of vertical white

00:34:41,360 --> 00:34:46,070
space the need to maintain alignment of

00:34:43,700 --> 00:34:48,110
its individual elements as the input

00:34:46,070 --> 00:34:51,679
changes makes it a perfect candidate for

00:34:48,110 --> 00:34:55,790
CSS script so this is the second block

00:34:51,679 --> 00:34:57,560
that will appear in my code so this

00:34:55,790 --> 00:35:00,020
example just shows us that we can now

00:34:57,560 --> 00:35:03,170
write code that is not browser specific

00:35:00,020 --> 00:35:05,090
but feature specific which means that we

00:35:03,170 --> 00:35:08,000
don't have to keep revisiting our code

00:35:05,090 --> 00:35:10,850
every time the browser updates the

00:35:08,000 --> 00:35:18,650
design updates itself together with the

00:35:10,850 --> 00:35:22,310
browser I mean how cool is that clearly

00:35:18,650 --> 00:35:24,800
said it best CSS has its own unique

00:35:22,310 --> 00:35:28,400
landscape and structures and our mental

00:35:24,800 --> 00:35:30,620
Maps around it need to reflect that so

00:35:28,400 --> 00:35:32,780
Jen Simmons and Rachel Andrew have done

00:35:30,620 --> 00:35:34,420
a lot both for developing layout on the

00:35:32,780 --> 00:35:36,609
web as well as any

00:35:34,420 --> 00:35:38,559
the web development community about it

00:35:36,609 --> 00:35:40,599
so Rachel Andrews has a CSS layout

00:35:38,559 --> 00:35:42,309
course which is completely online while

00:35:40,599 --> 00:35:44,799
Jen Simmons has a wonderful collection

00:35:42,309 --> 00:35:46,809
of demos which you can check out and I

00:35:44,799 --> 00:35:48,609
think everyone should build up their own

00:35:46,809 --> 00:35:50,559
collection of demos because that's the

00:35:48,609 --> 00:35:53,950
best way to learn and familiarize

00:35:50,559 --> 00:35:55,660
ourselves with CSS in general so this is

00:35:53,950 --> 00:35:57,309
the list of stand-alone demos and sites

00:35:55,660 --> 00:35:58,720
I've referenced throughout this talk and

00:35:57,309 --> 00:36:01,059
if you're interested in the source code

00:35:58,720 --> 00:36:02,829
my demos are all hosted on github which

00:36:01,059 --> 00:36:05,680
is the last name on the list

00:36:02,829 --> 00:36:07,420
and this is a list of relevant articles

00:36:05,680 --> 00:36:11,619
and resources that I found really useful

00:36:07,420 --> 00:36:12,760
for better understanding CSS great thank

00:36:11,619 --> 00:36:18,910
you all for your time and attention

00:36:12,760 --> 00:36:19,630
recently back to you javi that was

00:36:18,910 --> 00:36:22,390
awesome

00:36:19,630 --> 00:36:26,440
that was a really really top-notch talk

00:36:22,390 --> 00:36:30,519
and full of useful information I don't

00:36:26,440 --> 00:36:34,660
think we've put the slide deck link into

00:36:30,519 --> 00:36:39,690
the ether pad yet but oh I'll do that if

00:36:34,660 --> 00:36:42,730
that's okay with you okay cool I see it

00:36:39,690 --> 00:36:48,009
yeah if you wanted to pop it over on on

00:36:42,730 --> 00:36:51,430
slack at it to the ether pad we do have

00:36:48,009 --> 00:36:53,380
some questions that are arrived in the

00:36:51,430 --> 00:36:57,160
ether pad during your talk so there's

00:36:53,380 --> 00:36:59,019
live viewers I know I was I was I was

00:36:57,160 --> 00:37:01,210
feeling like I wanted to let you know

00:36:59,019 --> 00:37:02,740
that there were people engaged while you

00:37:01,210 --> 00:37:05,079
were speaking because I feel like it

00:37:02,740 --> 00:37:08,680
might be lonely talking to the to your

00:37:05,079 --> 00:37:12,339
camera but so I'll start with some of

00:37:08,680 --> 00:37:14,079
the questions on the ether pad I'll

00:37:12,339 --> 00:37:16,589
start at the bottom and work my way up

00:37:14,079 --> 00:37:19,539
so I question came in from the channel

00:37:16,589 --> 00:37:21,670
does the complexity of the grid have a

00:37:19,539 --> 00:37:26,529
significant impact on website

00:37:21,670 --> 00:37:29,589
performance I don't believe so simply

00:37:26,529 --> 00:37:33,069
because the browsers that do support bit

00:37:29,589 --> 00:37:37,869
are the more modern browsers and for

00:37:33,069 --> 00:37:39,700
example if we take Firefox Firefox has

00:37:37,869 --> 00:37:43,329
already rewritten its engine to use

00:37:39,700 --> 00:37:46,630
quantum so even I think browsers modern

00:37:43,329 --> 00:37:48,210
browsers that do support grid at this

00:37:46,630 --> 00:37:52,829
point are already

00:37:48,210 --> 00:37:55,140
demise to a point where a complex grid

00:37:52,829 --> 00:37:57,839
will not is not going to be the

00:37:55,140 --> 00:38:03,839
bottleneck that impacts your website

00:37:57,839 --> 00:38:08,220
performance yeah so yeah and I bet

00:38:03,839 --> 00:38:09,510
there's yeah I bet a performance

00:38:08,220 --> 00:38:13,319
engineer would have a different

00:38:09,510 --> 00:38:16,220
perspective on that as well but but

00:38:13,319 --> 00:38:21,089
that's a topic for another talk so

00:38:16,220 --> 00:38:23,099
moving right along there was a question

00:38:21,089 --> 00:38:26,059
from Daniele

00:38:23,099 --> 00:38:31,710
who's a web developer in Italy and

00:38:26,059 --> 00:38:34,890
actually a pair of questions so he asks

00:38:31,710 --> 00:38:37,319
is there a problem of CSS compatibility

00:38:34,890 --> 00:38:39,720
between browsers like there was a few

00:38:37,319 --> 00:38:41,069
years ago I I think you kind of covered

00:38:39,720 --> 00:38:42,510
that so I'm gonna pair these two

00:38:41,069 --> 00:38:45,630
questions and maybe you could speak to

00:38:42,510 --> 00:38:48,720
both of them the next one is what is the

00:38:45,630 --> 00:38:52,050
most missing feature or what's the thing

00:38:48,720 --> 00:38:53,940
that you find missing still in CSS I

00:38:52,050 --> 00:38:58,260
think that that you would most like to

00:38:53,940 --> 00:39:02,640
see implemented so kind of how the

00:38:58,260 --> 00:39:04,740
different browsers handle and what's the

00:39:02,640 --> 00:39:12,660
missing thing that's top of mind for you

00:39:04,740 --> 00:39:14,970
now well for me I'm thinking well off

00:39:12,660 --> 00:39:18,480
the top of my head because I do a lot of

00:39:14,970 --> 00:39:20,490
things with relevant to vertical writing

00:39:18,480 --> 00:39:23,040
so there's this one particular feature

00:39:20,490 --> 00:39:25,980
it's not it's not exactly a CSS thing

00:39:23,040 --> 00:39:27,240
more of a probably an HTML thing but I

00:39:25,980 --> 00:39:31,230
was thinking it would be nice to have a

00:39:27,240 --> 00:39:33,780
media query for for writing mode but

00:39:31,230 --> 00:39:37,859
back to his original question of the

00:39:33,780 --> 00:39:41,460
problem of CSS compatibility I feel that

00:39:37,859 --> 00:39:45,500
that that is solved not completely but

00:39:41,460 --> 00:39:50,460
reasonably with feature queries because

00:39:45,500 --> 00:39:52,440
you sort of are able to target specific

00:39:50,460 --> 00:39:53,660
features as opposed to in the past the

00:39:52,440 --> 00:39:55,890
problem sees is some family

00:39:53,660 --> 00:39:57,720
compatibility came about when people

00:39:55,890 --> 00:40:00,390
kept writing code that targeted specific

00:39:57,720 --> 00:40:02,020
browsers so your code wouldn't work

00:40:00,390 --> 00:40:05,140
across different browsers

00:40:02,020 --> 00:40:07,750
but now with feature queries it doesn't

00:40:05,140 --> 00:40:09,610
really matter if whichever browser is

00:40:07,750 --> 00:40:11,470
reading your code because if it doesn't

00:40:09,610 --> 00:40:12,850
support a particular feature then it's

00:40:11,470 --> 00:40:17,200
fine it won't break it will just ignore

00:40:12,850 --> 00:40:20,830
the block so so I think future queries

00:40:17,200 --> 00:40:23,470
is one of the I would say groundbreaking

00:40:20,830 --> 00:40:27,640
changes that we have in terms of trying

00:40:23,470 --> 00:40:29,380
to have CSS compatibility and that that

00:40:27,640 --> 00:40:31,420
also ties back into the point I was so

00:40:29,380 --> 00:40:34,090
trying trying so hard to push that

00:40:31,420 --> 00:40:38,920
websites don't have to look the same in

00:40:34,090 --> 00:40:40,869
every browser because this is the only

00:40:38,920 --> 00:40:44,110
medium that we have in the world right

00:40:40,869 --> 00:40:49,770
now that allows you to actually show a

00:40:44,110 --> 00:40:52,000
different a different display based on a

00:40:49,770 --> 00:40:53,380
different browser without actually

00:40:52,000 --> 00:40:55,660
having to touch the code so the same

00:40:53,380 --> 00:40:57,430
codebase can actually look different

00:40:55,660 --> 00:40:59,380
depending on the browser that you use

00:40:57,430 --> 00:41:01,510
and some people might see that as a bug

00:40:59,380 --> 00:41:02,530
but I see that as a feature and I think

00:41:01,510 --> 00:41:05,560
it's really great and we shouldn't be

00:41:02,530 --> 00:41:08,320
able to leverage this and turn it from

00:41:05,560 --> 00:41:10,420
the bunk into a feature so it makes web

00:41:08,320 --> 00:41:13,810
design so much more dynamic than any

00:41:10,420 --> 00:41:17,230
other medium that we have yeah awesome

00:41:13,810 --> 00:41:18,880
awesome I like an opinionated answer

00:41:17,230 --> 00:41:21,970
that's great

00:41:18,880 --> 00:41:24,580
so Michael wants to know who is in

00:41:21,970 --> 00:41:28,960
charge of the spec for CSS how does that

00:41:24,580 --> 00:41:32,200
work can you say is a CSS working group

00:41:28,960 --> 00:41:36,609
they are part of the w3c and there are a

00:41:32,200 --> 00:41:40,210
number of editors who who are in charge

00:41:36,609 --> 00:41:43,990
of of sort of maintaining and updating

00:41:40,210 --> 00:41:46,810
the spec and so ellika at the Met is one

00:41:43,990 --> 00:41:48,730
of them most people people probably know

00:41:46,810 --> 00:41:51,100
how to spend a sigh and they're a number

00:41:48,730 --> 00:41:54,130
of other people and all of them work

00:41:51,100 --> 00:41:57,670
together as a team under the CSS working

00:41:54,130 --> 00:42:01,210
group and they do they do publish

00:41:57,670 --> 00:42:02,980
updates very often on the w3c CSS

00:42:01,210 --> 00:42:05,170
working group blog they also have a

00:42:02,980 --> 00:42:07,630
Twitter account whereby they will post

00:42:05,170 --> 00:42:10,150
if they have updated any specifications

00:42:07,630 --> 00:42:14,860
and specifications do follow a standard

00:42:10,150 --> 00:42:16,630
process of going from being a note to

00:42:14,860 --> 00:42:17,980
a working draft to a candidate

00:42:16,630 --> 00:42:19,870
recommendation and so on

00:42:17,980 --> 00:42:24,460
it's all pretty interesting how things

00:42:19,870 --> 00:42:26,980
work on the web and so each each pillar

00:42:24,460 --> 00:42:30,220
of the web which is HTML CSS and

00:42:26,980 --> 00:42:34,750
JavaScript they have their own specs so

00:42:30,220 --> 00:42:36,430
to speak like JavaScript has T tc39

00:42:34,750 --> 00:42:38,920
those are the guys in charge of the

00:42:36,430 --> 00:42:42,280
JavaScript spec so CSS has the CSS

00:42:38,920 --> 00:42:44,650
working group and yeah I don't think

00:42:42,280 --> 00:42:46,540
there's a one particular person in

00:42:44,650 --> 00:42:48,520
charge so when you say who is I'm gonna

00:42:46,540 --> 00:42:51,420
assume that you're asking like is there

00:42:48,520 --> 00:42:55,720
a group and the answer is yes

00:42:51,420 --> 00:42:58,720
cool thank you yeah and Jen Simmons who

00:42:55,720 --> 00:43:01,810
is on the developer outreach team and a

00:42:58,720 --> 00:43:04,360
design advocate at Mozilla and some of

00:43:01,810 --> 00:43:07,240
you have met and many of you have worked

00:43:04,360 --> 00:43:09,190
with at different points um she is also

00:43:07,240 --> 00:43:14,440
a participant in that working group so

00:43:09,190 --> 00:43:17,350
she advocates for designers and the

00:43:14,440 --> 00:43:20,140
implementations that they are most

00:43:17,350 --> 00:43:21,720
passionate about there's one more

00:43:20,140 --> 00:43:26,080
question on the etherpad

00:43:21,720 --> 00:43:29,050
and that's from Kalyan who wants to know

00:43:26,080 --> 00:43:31,270
from the developer's point of view CSS

00:43:29,050 --> 00:43:34,810
always being a problem to work with how

00:43:31,270 --> 00:43:38,230
does modern see SLS help with that since

00:43:34,810 --> 00:43:41,680
we have many libraries for the UI parts

00:43:38,230 --> 00:43:43,810
of the development work we do and I have

00:43:41,680 --> 00:43:45,760
a feeling that Kalyan may be joined a

00:43:43,810 --> 00:43:47,620
little bit after you started I know I

00:43:45,760 --> 00:43:51,310
heard you say something about a whole

00:43:47,620 --> 00:43:55,840
bootstrap library maybe you can pick it

00:43:51,310 --> 00:43:59,440
up from there sure so the reason why we

00:43:55,840 --> 00:44:02,050
have so many libraries for for you I was

00:43:59,440 --> 00:44:05,800
precisely because it was kind of

00:44:02,050 --> 00:44:08,530
difficult to do especially layout on the

00:44:05,800 --> 00:44:12,070
web in the past because there was never

00:44:08,530 --> 00:44:15,910
a good like a specific property for

00:44:12,070 --> 00:44:19,900
layout before CSS break so I think most

00:44:15,910 --> 00:44:22,000
of the most people are just tired of

00:44:19,900 --> 00:44:23,560
trying to clear floats or like trying to

00:44:22,000 --> 00:44:26,830
get their columns to show up in the

00:44:23,560 --> 00:44:28,540
right places and a lot of the UI

00:44:26,830 --> 00:44:31,060
libraries

00:44:28,540 --> 00:44:33,040
do that for you but if you look under

00:44:31,060 --> 00:44:35,320
the hood of those UI libraries it's

00:44:33,040 --> 00:44:37,150
still CSS anyway it's just that they've

00:44:35,320 --> 00:44:38,920
written their pre-written the CSS for

00:44:37,150 --> 00:44:41,260
you so you just slap on classes into

00:44:38,920 --> 00:44:43,690
your markup and call it a day but with

00:44:41,260 --> 00:44:46,950
the thing about such UI libraries is

00:44:43,690 --> 00:44:50,440
that they are very prescriptive so

00:44:46,950 --> 00:44:55,150
unless your particular design looks

00:44:50,440 --> 00:44:58,150
exactly the same as the UI library the

00:44:55,150 --> 00:45:00,220
UI library is it's formatted odds are

00:44:58,150 --> 00:45:02,260
you want to sort of you have to spend a

00:45:00,220 --> 00:45:04,750
lot of time trying to override the

00:45:02,260 --> 00:45:08,110
styles that came with and this just ends

00:45:04,750 --> 00:45:11,260
up being you know a specificity war I

00:45:08,110 --> 00:45:13,090
guess this is more apparent if you have

00:45:11,260 --> 00:45:14,800
your own product and you want your own

00:45:13,090 --> 00:45:17,470
you know your own branding and your own

00:45:14,800 --> 00:45:20,230
look and feel it makes more sense to

00:45:17,470 --> 00:45:22,300
actually come up with a UI library of

00:45:20,230 --> 00:45:24,760
your own for your own partner your own

00:45:22,300 --> 00:45:28,570
design so more in CSS can help with that

00:45:24,760 --> 00:45:30,880
because with CSS grid it's building a

00:45:28,570 --> 00:45:33,370
layout it becomes a lot less painful

00:45:30,880 --> 00:45:35,590
than before so the cost of actually

00:45:33,370 --> 00:45:37,420
having to sit down and write your layout

00:45:35,590 --> 00:45:40,690
code from scratch is much lower than the

00:45:37,420 --> 00:45:43,210
past because in the past I I agree it

00:45:40,690 --> 00:45:45,310
was a pain it was a chore to just try to

00:45:43,210 --> 00:45:48,190
get the layout look exactly how you want

00:45:45,310 --> 00:45:50,380
it but you know morning CSS will help if

00:45:48,190 --> 00:45:56,620
we consider grid and flexbox more than

00:45:50,380 --> 00:45:59,290
CSS then it definitely helps awesome so

00:45:56,620 --> 00:46:02,580
that kind of brings us down to the end

00:45:59,290 --> 00:46:05,080
of the etherpad questions I'm going to

00:46:02,580 --> 00:46:10,240
check one more time we have a telegram

00:46:05,080 --> 00:46:12,880
channel where folks hang out and I think

00:46:10,240 --> 00:46:16,200
Michaels listening in to gather up any

00:46:12,880 --> 00:46:16,200
remaining questions

00:46:16,290 --> 00:46:23,070
Michael do anything else coming in from

00:46:20,260 --> 00:46:26,650
the channels or anyone else on the call

00:46:23,070 --> 00:46:28,510
live I think we were able to hit on all

00:46:26,650 --> 00:46:30,610
the questions in the ether patent and

00:46:28,510 --> 00:46:32,950
telegram great performance I know it's

00:46:30,610 --> 00:46:34,720
pretty late in a lot of regions right

00:46:32,950 --> 00:46:36,190
now so we might have add a few

00:46:34,720 --> 00:46:40,780
additional questions come in via email

00:46:36,190 --> 00:46:42,280
and telegram in the morning and thank

00:46:40,780 --> 00:46:46,030
you for doing this before

00:46:42,280 --> 00:46:50,290
Pistor with breakfast or first thing in

00:46:46,030 --> 00:46:52,810
the morning your time and this was like

00:46:50,290 --> 00:46:54,400
a Valentine's Day gift from you to the

00:46:52,810 --> 00:46:58,690
text speakers program even though I know

00:46:54,400 --> 00:47:00,850
it's like so happy Valentine's Day to

00:46:58,690 --> 00:47:04,360
anyone who still cell it's still awaken

00:47:00,850 --> 00:47:08,340
celebrating thank you so much for

00:47:04,360 --> 00:47:08,340

YouTube URL: https://www.youtube.com/watch?v=ahPRvVyw9Eo


