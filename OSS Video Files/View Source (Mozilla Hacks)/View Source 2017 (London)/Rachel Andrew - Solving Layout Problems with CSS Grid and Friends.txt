Title: Rachel Andrew - Solving Layout Problems with CSS Grid and Friends
Publication date: 2017-11-20
Playlist: View Source 2017 (London)
Description: 
	View Source 2017.

View Source is a conference for front-end web developers. The goal of this event is to provide an in-depth, practical look at current and on-the-horizon technologies, with plenty of opportunities for conversation.
Captions: 
	00:00:07,210 --> 00:00:11,270
and you can turn work out which of those

00:00:09,860 --> 00:00:14,629
facts wasn't true

00:00:11,270 --> 00:00:16,369
in the break okay so I'm here to talk

00:00:14,629 --> 00:00:17,930
about layouts because that's what I

00:00:16,369 --> 00:00:19,359
talked about and ribald you've been

00:00:17,930 --> 00:00:21,410
through some of the things that I do

00:00:19,359 --> 00:00:23,359
that's where you can find me you can

00:00:21,410 --> 00:00:24,949
find me on Twitter and on my own website

00:00:23,359 --> 00:00:27,140
at Rachel's okay okay

00:00:24,949 --> 00:00:28,909
and I guess really the important thing

00:00:27,140 --> 00:00:31,400
in the context of this talk is that I'm

00:00:28,909 --> 00:00:33,079
an invited expert to the CSS working

00:00:31,400 --> 00:00:35,030
group and which means that I helped to

00:00:33,079 --> 00:00:38,090
make CSS although you can't actually

00:00:35,030 --> 00:00:39,950
blame me for all of it so I'm hoping

00:00:38,090 --> 00:00:41,990
that some of you here have heard a bit

00:00:39,950 --> 00:00:44,210
about this new specification CSS grid

00:00:41,990 --> 00:00:45,680
layout that's a new layout method for

00:00:44,210 --> 00:00:47,360
the web and it shipped into browsers

00:00:45,680 --> 00:00:50,090
earlier this year and it's just gone

00:00:47,360 --> 00:00:51,650
into edge which is great because I've

00:00:50,090 --> 00:00:53,690
been talking about it about five years

00:00:51,650 --> 00:00:55,340
and I'm pretty sure that some people

00:00:53,690 --> 00:00:57,830
were thinking that this was some kind of

00:00:55,340 --> 00:00:59,570
CSS vaporware that I was enjoying going

00:00:57,830 --> 00:01:00,770
around the world talking about so I was

00:00:59,570 --> 00:01:03,710
very happy personally when it got out

00:01:00,770 --> 00:01:05,840
into browsers and if you do front-end

00:01:03,710 --> 00:01:07,549
stuff and maybe you've looked a bit of

00:01:05,840 --> 00:01:10,270
grid and you're sort of thinking well

00:01:07,549 --> 00:01:12,439
you know what we've already got flex box

00:01:10,270 --> 00:01:14,539
he'll Rachel why don't you just use

00:01:12,439 --> 00:01:17,270
flexbox why we got this new layout

00:01:14,539 --> 00:01:21,340
method for the web and defined in the

00:01:17,270 --> 00:01:24,170
specification is the most obvious reason

00:01:21,340 --> 00:01:25,969
flexbox is designed as a one dimensional

00:01:24,170 --> 00:01:29,299
layout method that's laying things out

00:01:25,969 --> 00:01:32,539
as a row or as a column what does that

00:01:29,299 --> 00:01:34,399
mean so that's a flex layout so that

00:01:32,539 --> 00:01:36,469
would grow and shrink according to the

00:01:34,399 --> 00:01:39,439
available space in the browser windows

00:01:36,469 --> 00:01:41,450
view whatever your containers got and if

00:01:39,439 --> 00:01:43,670
we've got fewer items as on the last row

00:01:41,450 --> 00:01:45,079
there then space distribution happens

00:01:43,670 --> 00:01:46,429
across the row when they're kind of

00:01:45,079 --> 00:01:49,369
splitting the difference and spreading

00:01:46,429 --> 00:01:52,130
out across the row and we can make them

00:01:49,369 --> 00:01:53,869
line up as as a column by adding widths

00:01:52,130 --> 00:01:55,009
and things but there's a basic nature of

00:01:53,869 --> 00:01:56,450
it is that we're working in one

00:01:55,009 --> 00:01:59,709
dimension and so we're working in a row

00:01:56,450 --> 00:02:02,959
so space distribution happens row by row

00:01:59,709 --> 00:02:06,259
and this is the same kind of layout but

00:02:02,959 --> 00:02:08,720
using grid but here the items are lining

00:02:06,259 --> 00:02:09,979
up both along their row but also in

00:02:08,720 --> 00:02:12,230
their columns and so they're sitting

00:02:09,979 --> 00:02:14,689
underneath the column above and that's

00:02:12,230 --> 00:02:15,470
two dimensional layout we're doing a row

00:02:14,689 --> 00:02:20,360
and a call

00:02:15,470 --> 00:02:22,040
at the same time and this is a key thing

00:02:20,360 --> 00:02:23,240
to remember with gridlayout and while

00:02:22,040 --> 00:02:24,860
we've got kind of all these new

00:02:23,240 --> 00:02:28,070
properties and things we haven't seen

00:02:24,860 --> 00:02:30,710
before in CSS grid works from the

00:02:28,070 --> 00:02:34,700
container in we create a grid and then

00:02:30,710 --> 00:02:36,920
we put stuff into it and every other

00:02:34,700 --> 00:02:39,920
method that we've had before everything

00:02:36,920 --> 00:02:42,560
in the past requires that you give the

00:02:39,920 --> 00:02:44,360
items in your layout a size and then

00:02:42,560 --> 00:02:48,560
kind of line them up to make it look

00:02:44,360 --> 00:02:50,780
like we've got a grid so this is a

00:02:48,560 --> 00:02:52,400
simplified float example if you've ever

00:02:50,780 --> 00:02:53,810
used a framework if you've built a

00:02:52,400 --> 00:02:56,390
floated grid or you've used a framework

00:02:53,810 --> 00:02:58,430
that uses a floated grid it's doing

00:02:56,390 --> 00:03:00,920
something a bit like this probably a

00:02:58,430 --> 00:03:02,750
slightly more complex version so we've

00:03:00,920 --> 00:03:04,250
got a row wrapper that boss is clearing

00:03:02,750 --> 00:03:06,620
so things don't kind of pop up in the

00:03:04,250 --> 00:03:08,510
way that floats do and then we use

00:03:06,620 --> 00:03:09,950
percentages for the columns and we have

00:03:08,510 --> 00:03:12,350
to use percentages for the gutters we're

00:03:09,950 --> 00:03:14,450
using a margin for the gutter and then

00:03:12,350 --> 00:03:17,060
we might either work out the the maps

00:03:14,450 --> 00:03:19,580
manually might do it with sass or use

00:03:17,060 --> 00:03:22,520
calc as I am here so we have to get the

00:03:19,580 --> 00:03:26,780
totals and a block to 100% and then we

00:03:22,520 --> 00:03:28,610
get a grid but we don't get a grid what

00:03:26,780 --> 00:03:30,410
we actually get is the appearance of a

00:03:28,610 --> 00:03:32,630
grid because we've lined things up very

00:03:30,410 --> 00:03:35,209
carefully doing all the maths ourselves

00:03:32,630 --> 00:03:39,080
to make sure that things line up and

00:03:35,209 --> 00:03:43,090
look like we've got a grid and those

00:03:39,080 --> 00:03:46,130
flexbox based grid systems they exist

00:03:43,090 --> 00:03:48,020
but flexbox works on the container but

00:03:46,130 --> 00:03:49,040
when you do things on the container it

00:03:48,020 --> 00:03:50,450
does it want to mention the answer

00:03:49,040 --> 00:03:51,770
things spread out all over the place and

00:03:50,450 --> 00:03:55,400
that's not what you want if you want a

00:03:51,770 --> 00:03:57,680
grid and so we fix that by adding

00:03:55,400 --> 00:04:00,050
percentages to the grid items by going

00:03:57,680 --> 00:04:02,630
back to kind of removing the flexibility

00:04:00,050 --> 00:04:05,680
of flexbox and lining things up so that

00:04:02,630 --> 00:04:08,390
we get something that looks like a grid

00:04:05,680 --> 00:04:10,280
and again we end up with row wrappers

00:04:08,390 --> 00:04:12,770
usually this time the wrapper ends up as

00:04:10,280 --> 00:04:15,200
a Flex container and then we have the

00:04:12,770 --> 00:04:17,350
width on the item or as a Flex basis and

00:04:15,200 --> 00:04:19,730
then we should have lined them all up

00:04:17,350 --> 00:04:21,350
it's a bit better than the float based

00:04:19,730 --> 00:04:23,390
grid system obviously we don't have to

00:04:21,350 --> 00:04:24,919
do all that clearing and we can do use

00:04:23,390 --> 00:04:26,479
all the nice alignment things that are

00:04:24,919 --> 00:04:28,040
in Flex box so it's a bit of an

00:04:26,479 --> 00:04:30,770
improvement over you

00:04:28,040 --> 00:04:32,480
and floats but we're not really using

00:04:30,770 --> 00:04:34,160
flexbox what it's good at here and

00:04:32,480 --> 00:04:36,620
that's all that space distribution and

00:04:34,160 --> 00:04:41,210
we're still having to take control of

00:04:36,620 --> 00:04:43,460
the maths so here we are doing the same

00:04:41,210 --> 00:04:45,710
sort of thing with grid layout we don't

00:04:43,460 --> 00:04:48,740
have to do any maths and so what happens

00:04:45,710 --> 00:04:51,410
on the item is basically a simple

00:04:48,740 --> 00:04:54,560
instruction as to how many tracks we

00:04:51,410 --> 00:04:56,210
need to span we've created the grid who

00:04:54,560 --> 00:04:58,940
said how big we want the tracks to be

00:04:56,210 --> 00:05:03,380
and then we just ask the items to span

00:04:58,940 --> 00:05:06,380
as many tracks as we want so it's a very

00:05:03,380 --> 00:05:08,540
different concept we're defining the

00:05:06,380 --> 00:05:11,420
size of columns on the container when we

00:05:08,540 --> 00:05:12,560
set up the tracks and there's various

00:05:11,420 --> 00:05:15,530
ways we can actually then start

00:05:12,560 --> 00:05:17,390
positioning things on the grid but the

00:05:15,530 --> 00:05:19,310
sizing comes from the container and we

00:05:17,390 --> 00:05:21,290
don't touch have anything else in CSS

00:05:19,310 --> 00:05:23,270
really that behaves like this other than

00:05:21,290 --> 00:05:24,980
multiple column layout which also does a

00:05:23,270 --> 00:05:26,750
kind of thing where you say number of

00:05:24,980 --> 00:05:28,460
columns that you want or the column size

00:05:26,750 --> 00:05:30,380
and that's worked out on the container

00:05:28,460 --> 00:05:32,930
then things inside fit into those

00:05:30,380 --> 00:05:35,150
columns so all of our other grid

00:05:32,930 --> 00:05:37,280
frameworks they create something that

00:05:35,150 --> 00:05:41,030
looks like a grid by controlling item

00:05:37,280 --> 00:05:44,180
size and CSS grid layout it creates an

00:05:41,030 --> 00:05:47,330
actual grid and you put items into it

00:05:44,180 --> 00:05:49,610
and so when we say that CSS grid layout

00:05:47,330 --> 00:05:51,170
is a native CSS framework built into the

00:05:49,610 --> 00:05:55,370
browser that's what we mean we've

00:05:51,170 --> 00:05:56,600
actually got a real grid system and I

00:05:55,370 --> 00:05:58,940
think it's no wonder that people are a

00:05:56,600 --> 00:06:01,420
bit confused and they keep sending me

00:05:58,940 --> 00:06:03,770
grid based grid frameworks that

00:06:01,420 --> 00:06:05,690
essentially use row wrappers and a

00:06:03,770 --> 00:06:08,120
making grid one-dimensional again and

00:06:05,690 --> 00:06:10,820
the reason that we created all of those

00:06:08,120 --> 00:06:12,830
frameworks and so on is because doing

00:06:10,820 --> 00:06:13,490
the maths of calculating sizing is

00:06:12,830 --> 00:06:15,230
really hard

00:06:13,490 --> 00:06:16,730
it's error-prone and it's really boring

00:06:15,230 --> 00:06:18,650
and no one wants to be doing that stuff

00:06:16,730 --> 00:06:21,440
and so we create all these frameworks

00:06:18,650 --> 00:06:23,090
that abstracted all that away and let us

00:06:21,440 --> 00:06:26,150
just pop the class on an item and say

00:06:23,090 --> 00:06:28,160
you know please be this size and we

00:06:26,150 --> 00:06:30,020
don't need a lot of that with grid the

00:06:28,160 --> 00:06:33,200
browser is doing that maths for you in

00:06:30,020 --> 00:06:35,450
dealing with the complexity so every

00:06:33,200 --> 00:06:37,640
single abstraction that I've seen so far

00:06:35,450 --> 00:06:39,500
has actually taken away from grid layer

00:06:37,640 --> 00:06:41,009
it's taken away from the specification

00:06:39,500 --> 00:06:43,289
and try to force it back

00:06:41,009 --> 00:06:44,460
into this old way of doing things so

00:06:43,289 --> 00:06:45,809
don't do that if you starting to think

00:06:44,460 --> 00:06:47,669
of well you know I could make some kind

00:06:45,809 --> 00:06:49,319
of framework on top of grid great

00:06:47,669 --> 00:06:54,719
make sure it's adding something and not

00:06:49,319 --> 00:06:56,729
taking away and so it turns out that

00:06:54,719 --> 00:06:59,389
once we're dealing with creating size

00:06:56,729 --> 00:07:02,159
from the container sizing becomes really

00:06:59,389 --> 00:07:04,439
important and we've got a bunch of new

00:07:02,159 --> 00:07:05,789
size and concepts to learn and you've

00:07:04,439 --> 00:07:09,389
sort of seen some of that already in

00:07:05,789 --> 00:07:11,909
action so to have as many columns as

00:07:09,389 --> 00:07:13,110
will fit into a container that uses a

00:07:11,909 --> 00:07:17,699
couple of methods which have been

00:07:13,110 --> 00:07:19,620
designed for grid layout we've got this

00:07:17,699 --> 00:07:21,870
repeat statement so we can say grid

00:07:19,620 --> 00:07:24,569
template columns and then we say repeat

00:07:21,870 --> 00:07:25,770
and then we the thing inside the

00:07:24,569 --> 00:07:27,659
brackets is going to be how many times

00:07:25,770 --> 00:07:28,860
repeat it and then we have a statement

00:07:27,659 --> 00:07:30,870
that we're going to repeat so we can use

00:07:28,860 --> 00:07:32,909
this repeat syntax to save us having to

00:07:30,870 --> 00:07:36,839
write out lots and lots of tracks that

00:07:32,909 --> 00:07:38,520
were going to be the same but here

00:07:36,839 --> 00:07:40,949
rather than an integer rather than a

00:07:38,520 --> 00:07:43,589
number of tracks I'm using autofill

00:07:40,949 --> 00:07:45,809
because what I want is for the browser

00:07:43,589 --> 00:07:48,539
to fill as many tracks as it can get

00:07:45,809 --> 00:07:53,339
into that container fill as many in as

00:07:48,539 --> 00:07:56,370
it can have so we're using autofill and

00:07:53,339 --> 00:07:58,349
then I'm using this min Max min Max is

00:07:56,370 --> 00:08:00,779
really really useful because it lets us

00:07:58,349 --> 00:08:03,149
say make something be a minimum size and

00:08:00,779 --> 00:08:05,430
then a maximum size so it can be between

00:08:03,149 --> 00:08:07,860
those two things which turns out to be

00:08:05,430 --> 00:08:10,169
very handy in this case I'm saying

00:08:07,860 --> 00:08:12,389
create a track that is at least 200

00:08:10,169 --> 00:08:16,949
pixels wide never gets smaller than 200

00:08:12,389 --> 00:08:18,719
pixels but make the maximum 1fr and that

00:08:16,949 --> 00:08:20,339
means that any available space the

00:08:18,719 --> 00:08:21,809
browser goes well I've got 200 pixels

00:08:20,339 --> 00:08:23,580
Toula pixels Toula pixels then there's

00:08:21,809 --> 00:08:25,080
this little bit left over and a little

00:08:23,580 --> 00:08:26,669
bit left over gets spread out amongst

00:08:25,080 --> 00:08:29,189
the rest of the tracks and so we end up

00:08:26,669 --> 00:08:30,539
with as many flexible sized tracks as

00:08:29,189 --> 00:08:34,050
well put in the container but they'll

00:08:30,539 --> 00:08:38,159
never get smaller than 200 pixels so

00:08:34,050 --> 00:08:40,469
we've also got this fr unit and this is

00:08:38,159 --> 00:08:43,050
new for grid layout and it's incredibly

00:08:40,469 --> 00:08:47,970
useful it deals with distributing

00:08:43,050 --> 00:08:51,089
available space so we can specify

00:08:47,970 --> 00:08:53,399
different if our values for tracks so

00:08:51,089 --> 00:08:54,570
here I've got a to fr track and then a 1

00:08:53,399 --> 00:08:56,520
if our truck and a 1 affair

00:08:54,570 --> 00:08:58,890
tract so the available space in the grid

00:08:56,520 --> 00:09:02,010
container is split into four and shared

00:08:58,890 --> 00:09:04,920
out in proportion so we end up with

00:09:02,010 --> 00:09:06,960
something like this and as the amount of

00:09:04,920 --> 00:09:11,370
space if it grows and shrinks then it

00:09:06,960 --> 00:09:13,290
just shares out in proportion the nice

00:09:11,370 --> 00:09:14,550
thing about this if our unit because

00:09:13,290 --> 00:09:16,980
we're dealing with distributing

00:09:14,550 --> 00:09:19,980
available space in the container we can

00:09:16,980 --> 00:09:22,680
mix these flexible lengths with fixed

00:09:19,980 --> 00:09:24,780
size tracks so here i've said well i my

00:09:22,680 --> 00:09:26,460
last track is going to be 400 pixels

00:09:24,780 --> 00:09:29,640
it's always going to be 400 pixels

00:09:26,460 --> 00:09:31,950
that's an absolute unit and so we get

00:09:29,640 --> 00:09:34,350
this that final track will always be 400

00:09:31,950 --> 00:09:39,560
pixels and then whatever space is left

00:09:34,350 --> 00:09:42,180
over is split between the two 1fr tracks

00:09:39,560 --> 00:09:44,760
and so then we can create the twelve

00:09:42,180 --> 00:09:45,960
column example with here the fr unit we

00:09:44,760 --> 00:09:47,700
don't need to worry about the fact we've

00:09:45,960 --> 00:09:50,340
got fixed to its gutters here because

00:09:47,700 --> 00:09:52,320
before we distribute all that space we

00:09:50,340 --> 00:09:53,580
take away the fit the amount we need for

00:09:52,320 --> 00:09:55,020
the fixed width gutters we don't need to

00:09:53,580 --> 00:09:56,670
use this or a weird percentage in there

00:09:55,020 --> 00:09:58,770
we can just take that away and then

00:09:56,670 --> 00:10:01,650
whatever is left over we share out

00:09:58,770 --> 00:10:03,900
between our twelve tracks which is what

00:10:01,650 --> 00:10:08,930
gives us this the column tracks detailed

00:10:03,900 --> 00:10:11,520
on the container and this fr unit a

00:10:08,930 --> 00:10:12,960
really common issue I see with people

00:10:11,520 --> 00:10:16,590
and they're sending me things are trying

00:10:12,960 --> 00:10:19,050
to work out with grid and the fr unit in

00:10:16,590 --> 00:10:21,300
most cases will replace your need for

00:10:19,050 --> 00:10:23,550
using percentages in your designs you

00:10:21,300 --> 00:10:25,230
can let the browser do the calculations

00:10:23,550 --> 00:10:26,670
for you so you can use the fr unit

00:10:25,230 --> 00:10:30,440
pretty much like you would use

00:10:26,670 --> 00:10:32,580
percentages the only reason I am using

00:10:30,440 --> 00:10:34,350
percentages in grid layouts at this

00:10:32,580 --> 00:10:37,260
point is where I'm adding a grid layout

00:10:34,350 --> 00:10:38,730
component to a layout that uses some

00:10:37,260 --> 00:10:40,800
other layout methods as well where I've

00:10:38,730 --> 00:10:43,410
had to use percentages to get the look

00:10:40,800 --> 00:10:45,630
of a grid and say I want to add a a grid

00:10:43,410 --> 00:10:47,610
panel inside an existing layout that's

00:10:45,630 --> 00:10:49,170
using percentages I'll use percentages

00:10:47,610 --> 00:10:50,910
on my grid layout so that all of the

00:10:49,170 --> 00:10:52,830
track sizes line up you know with the

00:10:50,910 --> 00:10:54,060
old style the new style layout so you

00:10:52,830 --> 00:10:55,830
can still use percentages you've still

00:10:54,060 --> 00:10:57,420
got them but if you're doing something

00:10:55,830 --> 00:10:59,730
new you probably don't need to use

00:10:57,420 --> 00:11:03,530
percentages the fr unit will make things

00:10:59,730 --> 00:11:03,530
nor for a lot simpler for you

00:11:04,480 --> 00:11:08,440
after that min/max thing I want to go

00:11:06,730 --> 00:11:10,660
back to that because min/max is useful

00:11:08,440 --> 00:11:14,170
in all kinds of ways as well as creating

00:11:10,660 --> 00:11:15,400
these flexible sized tracks now here

00:11:14,170 --> 00:11:16,990
we're making sure that our tracks don't

00:11:15,400 --> 00:11:18,610
get too small we don't want them to get

00:11:16,990 --> 00:11:20,560
smaller than two and a pixel to don't

00:11:18,610 --> 00:11:22,650
them to vanish to nothing so we're

00:11:20,560 --> 00:11:26,170
setting them as a minimum of 200 pixels

00:11:22,650 --> 00:11:27,910
the other place this min max is really

00:11:26,170 --> 00:11:30,550
handy is to be able to create very

00:11:27,910 --> 00:11:32,320
precise looking layouts that look like

00:11:30,550 --> 00:11:35,170
they've got kind of fixed height tracks

00:11:32,320 --> 00:11:37,360
in them but then if extra content gets

00:11:35,170 --> 00:11:40,210
in they can cope with that and they can

00:11:37,360 --> 00:11:42,820
expand to take it so here's a look at

00:11:40,210 --> 00:11:44,560
that I wanted to create a panel as a bit

00:11:42,820 --> 00:11:46,090
like this is a panel of photos you get

00:11:44,560 --> 00:11:48,700
on Facebook's you get this sort of neat

00:11:46,090 --> 00:11:51,190
set of photos but I also wanted to pop

00:11:48,700 --> 00:11:53,140
some text in there and so I have this

00:11:51,190 --> 00:11:57,010
neat looking grid and then have some

00:11:53,140 --> 00:11:59,560
text in the grid as well so that's my

00:11:57,010 --> 00:12:00,790
grid definition there for the panel so

00:11:59,560 --> 00:12:02,500
I've got some column tracks they're

00:12:00,790 --> 00:12:04,870
fairly standard just using the fi unit

00:12:02,500 --> 00:12:06,700
then I'm saying grid Auto rows so the

00:12:04,870 --> 00:12:08,950
rows that are created automatically in

00:12:06,700 --> 00:12:11,320
the grid will have those as a minimum

00:12:08,950 --> 00:12:15,640
height returner pixels and a maximum of

00:12:11,320 --> 00:12:17,800
auto so I'm highlighting the row lines

00:12:15,640 --> 00:12:19,840
there and you can see they all grow to

00:12:17,800 --> 00:12:21,280
200 pixels tall which means I've got

00:12:19,840 --> 00:12:23,790
some images in there which then sort of

00:12:21,280 --> 00:12:26,170
stretch over and and fill up the tracks

00:12:23,790 --> 00:12:28,480
now of course what happens when you

00:12:26,170 --> 00:12:31,060
design a very neat fixed Heights

00:12:28,480 --> 00:12:32,920
sort of track box is that it gets to the

00:12:31,060 --> 00:12:34,480
content management system and someone's

00:12:32,920 --> 00:12:36,190
like no this is a very important very

00:12:34,480 --> 00:12:38,620
long news item that we need to have in

00:12:36,190 --> 00:12:40,120
here and so that goes in and you need to

00:12:38,620 --> 00:12:41,470
be able to cope with that the layout

00:12:40,120 --> 00:12:43,510
needs to cope with the fact you might

00:12:41,470 --> 00:12:46,210
have more text we never know how tall

00:12:43,510 --> 00:12:49,420
things are on the web typically but if

00:12:46,210 --> 00:12:52,870
we add some content here the box will

00:12:49,420 --> 00:12:54,790
grow because the maximum of that min/max

00:12:52,870 --> 00:12:56,410
is auto and auto will look at the

00:12:54,790 --> 00:12:58,120
content size and it will just grow and

00:12:56,410 --> 00:13:01,420
allow as much content to go in there as

00:12:58,120 --> 00:13:03,400
you want the thing to note is that it's

00:13:01,420 --> 00:13:05,380
the whole row that's growing because

00:13:03,400 --> 00:13:07,690
we're working in two dimensions so if

00:13:05,380 --> 00:13:09,130
one cell gets bigger then everything

00:13:07,690 --> 00:13:11,350
across the row is going to have to get

00:13:09,130 --> 00:13:14,380
taller as well so the image on the other

00:13:11,350 --> 00:13:16,090
side needs to cope and I'm using object

00:13:14,380 --> 00:13:16,640
fit on the image there so it will it

00:13:16,090 --> 00:13:18,110
will grow

00:13:16,640 --> 00:13:19,250
it will just fill up the space but

00:13:18,110 --> 00:13:21,230
that's going to consider with your

00:13:19,250 --> 00:13:22,610
layouts you're creating these layouts

00:13:21,230 --> 00:13:24,530
that are very tolerant of different

00:13:22,610 --> 00:13:26,180
amounts of content you need to make sure

00:13:24,530 --> 00:13:27,890
that right across the row will write

00:13:26,180 --> 00:13:29,540
down the column everything is going to

00:13:27,890 --> 00:13:34,790
cope with that there's sort of part of

00:13:29,540 --> 00:13:36,620
designing with grid and I can then nest

00:13:34,790 --> 00:13:38,570
another grid because a grid item can

00:13:36,620 --> 00:13:40,040
become a grid container itself just like

00:13:38,570 --> 00:13:42,830
a flex item from the core the Flex

00:13:40,040 --> 00:13:44,330
container so I've gonna use exactly the

00:13:42,830 --> 00:13:46,970
same technique but I'm going to add a

00:13:44,330 --> 00:13:50,000
caption so I've made the figure actually

00:13:46,970 --> 00:13:52,130
a two row track grid and causing the

00:13:50,000 --> 00:13:54,260
image to span over two rows then I place

00:13:52,130 --> 00:13:55,790
the caption in row two so it overlays

00:13:54,260 --> 00:13:57,260
the image it's another thing with grid

00:13:55,790 --> 00:13:59,690
layout we can layer things up you can

00:13:57,260 --> 00:14:01,820
have more than one thing occupying a

00:13:59,690 --> 00:14:04,790
cell and you just use that index to

00:14:01,820 --> 00:14:06,740
control that stack so that has got a

00:14:04,790 --> 00:14:11,570
minimum height of 100 pixels and a max

00:14:06,740 --> 00:14:14,320
of auto which gives us this and I wanted

00:14:11,570 --> 00:14:17,330
to point something out here that the

00:14:14,320 --> 00:14:19,250
caption on this image here is taller

00:14:17,330 --> 00:14:20,690
it's got two lines and that's fine it's

00:14:19,250 --> 00:14:22,970
kind of coping because I've got that max

00:14:20,690 --> 00:14:24,950
of auto but what it's not doing is

00:14:22,970 --> 00:14:26,690
lining up with the one next to it and it

00:14:24,950 --> 00:14:28,670
can't because it doesn't know about the

00:14:26,690 --> 00:14:31,790
one next to it because the nested grid

00:14:28,670 --> 00:14:35,000
is an entirely new grid it's not got

00:14:31,790 --> 00:14:37,090
relationship to the overall layout and I

00:14:35,000 --> 00:14:41,860
will talk a little bit about that later

00:14:37,090 --> 00:14:44,840
but first I want to stay with sizing

00:14:41,860 --> 00:14:47,570
because we've got some new sizing

00:14:44,840 --> 00:14:50,150
keywords and they're from the CSS size

00:14:47,570 --> 00:14:51,740
and specification and we can use them on

00:14:50,150 --> 00:14:54,350
our grid tracks to actually start to

00:14:51,740 --> 00:14:58,070
allow content a little bit to affect the

00:14:54,350 --> 00:15:01,340
size of tracks so we've got these

00:14:58,070 --> 00:15:06,530
keywords min content max content and fit

00:15:01,340 --> 00:15:08,480
content so if you size a track as min

00:15:06,530 --> 00:15:11,120
content my first track here is sized

00:15:08,480 --> 00:15:12,710
with the keyword min content and what

00:15:11,120 --> 00:15:15,680
happens when you use min content of

00:15:12,710 --> 00:15:17,630
track sizing is that the track it will

00:15:15,680 --> 00:15:19,610
use as many wrapping soft wrapping

00:15:17,630 --> 00:15:21,290
opportunities as it can to try and get

00:15:19,610 --> 00:15:24,460
the content as small as it can possibly

00:15:21,290 --> 00:15:27,440
be without causing any sort of overflow

00:15:24,460 --> 00:15:28,830
and so we get a track like this and you

00:15:27,440 --> 00:15:30,660
can see that that track side

00:15:28,830 --> 00:15:32,070
being held out by the word contents

00:15:30,660 --> 00:15:34,110
because that's the longest word in that

00:15:32,070 --> 00:15:35,640
track at the moment so it's gone as

00:15:34,110 --> 00:15:41,100
small as it possibly can and that's

00:15:35,640 --> 00:15:43,590
happened all the way down the track so

00:15:41,100 --> 00:15:45,750
max content will do the opposite to use

00:15:43,590 --> 00:15:46,740
the max content keyword and essentially

00:15:45,750 --> 00:15:48,960
it will all spread out

00:15:46,740 --> 00:15:49,860
it won't rap at all so it will keep on

00:15:48,960 --> 00:15:51,390
going if you've got a great long

00:15:49,860 --> 00:15:53,130
sentence in there it's going to keep on

00:15:51,390 --> 00:15:55,290
going and spread out to be as long as it

00:15:53,130 --> 00:15:56,460
can possibly be and that's going to be

00:15:55,290 --> 00:15:58,920
the size of that track which of course

00:15:56,460 --> 00:16:00,180
may well cause overflows if you haven't

00:15:58,920 --> 00:16:02,400
got enough space in the container that's

00:16:00,180 --> 00:16:04,860
going to break out of the box so that's

00:16:02,400 --> 00:16:07,350
max content and so you can see that line

00:16:04,860 --> 00:16:11,270
is now spread out and taking up as much

00:16:07,350 --> 00:16:11,270
space got as big as it can possibly be

00:16:11,750 --> 00:16:16,650
but then we have fit content and fit

00:16:14,610 --> 00:16:20,100
content is really useful because we can

00:16:16,650 --> 00:16:22,530
pass in a value so fit content will act

00:16:20,100 --> 00:16:24,690
like max content it'll spread out as

00:16:22,530 --> 00:16:26,610
much as it can until it gets to the

00:16:24,690 --> 00:16:28,830
value that you've passed in and then it

00:16:26,610 --> 00:16:31,470
will stop so it means you can have a

00:16:28,830 --> 00:16:33,210
track size and you say well I'd like you

00:16:31,470 --> 00:16:35,400
to be max content I'd like you to be as

00:16:33,210 --> 00:16:36,750
big as you can be unless you get to this

00:16:35,400 --> 00:16:38,010
point and that's going to be too big so

00:16:36,750 --> 00:16:40,770
I'd like you to stop there and just

00:16:38,010 --> 00:16:42,900
start wrapping as normal so we've got

00:16:40,770 --> 00:16:46,020
two tracks the first two tracks in this

00:16:42,900 --> 00:16:49,110
definition using fit content and this is

00:16:46,020 --> 00:16:50,850
what happens so the first track if that

00:16:49,110 --> 00:16:53,160
went to max content be much bigger than

00:16:50,850 --> 00:16:55,680
to Ana pixels so it stops at the 200

00:16:53,160 --> 00:16:57,420
pixels the second one has only got a

00:16:55,680 --> 00:16:59,940
single number in it and so it just

00:16:57,420 --> 00:17:01,710
displays at that side it doesn't go to

00:16:59,940 --> 00:17:05,699
200 pixels because it doesn't need to

00:17:01,710 --> 00:17:07,530
it's just max content they're really

00:17:05,699 --> 00:17:09,900
useful and I think that there are really

00:17:07,530 --> 00:17:12,720
interesting possibilities in terms of

00:17:09,900 --> 00:17:14,430
design by looking at playing around with

00:17:12,720 --> 00:17:16,830
the size of things using these kind of

00:17:14,430 --> 00:17:18,209
content keywords using min max you do

00:17:16,830 --> 00:17:20,699
some quite interesting things with your

00:17:18,209 --> 00:17:22,709
grids you don't just have to make a 12

00:17:20,699 --> 00:17:24,870
column grid you don't just have to make

00:17:22,709 --> 00:17:26,610
a set of little boxes you can use this

00:17:24,870 --> 00:17:28,440
to create a framework that you put your

00:17:26,610 --> 00:17:30,630
design into they can really be quite

00:17:28,440 --> 00:17:32,700
creative and look at the sort of content

00:17:30,630 --> 00:17:36,420
you've got we're making those sizing

00:17:32,700 --> 00:17:40,260
decisions so that's all really neat

00:17:36,420 --> 00:17:41,970
however we do still have old browsers

00:17:40,260 --> 00:17:42,330
and if I don't talk about them to you

00:17:41,970 --> 00:17:43,679
then you

00:17:42,330 --> 00:17:47,070
we'll come and talk about them to me

00:17:43,679 --> 00:17:50,760
later so let's deal with that now so old

00:17:47,070 --> 00:17:53,039
browsers the nice thing about new CSS

00:17:50,760 --> 00:17:55,710
specs is that the CSS working group know

00:17:53,039 --> 00:17:59,789
that old browsers exist and to find in

00:17:55,710 --> 00:18:01,590
the spec is how things deal with yet a

00:17:59,789 --> 00:18:03,240
new layout method being applied to

00:18:01,590 --> 00:18:06,659
saying it's also using an old layout

00:18:03,240 --> 00:18:08,880
method so if you use floats or clear so

00:18:06,659 --> 00:18:11,880
if you create a grid by floating things

00:18:08,880 --> 00:18:14,100
and then you turn those floated items

00:18:11,880 --> 00:18:16,139
into grid items the float and clear

00:18:14,100 --> 00:18:17,610
properties just get thrown away you

00:18:16,139 --> 00:18:19,350
don't need to do anything to overwrite

00:18:17,610 --> 00:18:21,840
it it'll just naturally be overwritten

00:18:19,350 --> 00:18:23,340
by CSS so here you know I've got a

00:18:21,840 --> 00:18:27,570
floated item then it's become a grid

00:18:23,340 --> 00:18:29,519
item it's no longer floated same is true

00:18:27,570 --> 00:18:31,470
with inline block if you use inline

00:18:29,519 --> 00:18:33,840
block to line things up in a kind of

00:18:31,470 --> 00:18:36,929
grid format and you might know that you

00:18:33,840 --> 00:18:38,490
get the whitespace issue where things

00:18:36,929 --> 00:18:41,130
have a bit of space between them if you

00:18:38,490 --> 00:18:42,630
use inline block if it becomes a grid

00:18:41,130 --> 00:18:44,610
item that all just goes away it stops

00:18:42,630 --> 00:18:46,860
being an inline block item you can just

00:18:44,610 --> 00:18:50,700
do that do one then do the other it'll

00:18:46,860 --> 00:18:53,159
just work using things that

00:18:50,700 --> 00:18:55,529
display:table-cell come if you need to

00:18:53,159 --> 00:18:57,659
support very very old browsers I do my

00:18:55,529 --> 00:18:59,880
own product we support back to ie 9 so

00:18:57,659 --> 00:19:03,029
we use table-cell quite a lot along with

00:18:59,880 --> 00:19:03,659
flexbox to try and create older browser

00:19:03,029 --> 00:19:06,690
support

00:19:03,659 --> 00:19:08,250
if you turn something into a table cell

00:19:06,690 --> 00:19:10,110
and you get the anonymous wrappers you

00:19:08,250 --> 00:19:12,899
get like a table row anonymous wrapper

00:19:10,110 --> 00:19:14,220
if it becomes a grid item that stuff

00:19:12,899 --> 00:19:16,860
doesn't happen you don't end up with

00:19:14,220 --> 00:19:18,269
anything strange lying around sort of

00:19:16,860 --> 00:19:20,159
virtually there's going to cause you a

00:19:18,269 --> 00:19:22,710
problem so you can quite safely use

00:19:20,159 --> 00:19:26,669
display:table-cell as a fallback for

00:19:22,710 --> 00:19:28,980
grid layout and the reason we use things

00:19:26,669 --> 00:19:30,360
at table cell inline block is that gives

00:19:28,980 --> 00:19:32,309
us vertical alignment with

00:19:30,360 --> 00:19:34,409
vertical-align:top and so on

00:19:32,309 --> 00:19:37,679
if you've used vertical align property

00:19:34,409 --> 00:19:39,840
for your older browser layout and then

00:19:37,679 --> 00:19:41,549
it becomes a grid item that's also gets

00:19:39,840 --> 00:19:43,049
thrown away it has no effect and so you

00:19:41,549 --> 00:19:47,850
can use the box alignment stuff which is

00:19:43,049 --> 00:19:50,309
in grid layout quite safely and don't

00:19:47,850 --> 00:19:52,289
forget multi-column if you've got for

00:19:50,309 --> 00:19:54,149
instance a layout which is like a set of

00:19:52,289 --> 00:19:56,220
boxes or a set of images or whatever

00:19:54,149 --> 00:19:58,409
multi-car can be quite a useful

00:19:56,220 --> 00:19:59,850
fall back for grid it's gonna usually

00:19:58,409 --> 00:20:00,960
lay things out caller it's gonna lay

00:19:59,850 --> 00:20:02,070
things like column wise rather than

00:20:00,960 --> 00:20:04,350
across the row which is what you'll

00:20:02,070 --> 00:20:06,750
probably normally be doing with grid but

00:20:04,350 --> 00:20:08,909
it's a reasonable fallback and so if you

00:20:06,750 --> 00:20:11,460
set column count or column width on a

00:20:08,909 --> 00:20:13,289
container and then afterwards say

00:20:11,460 --> 00:20:15,120
display grid those column properties

00:20:13,289 --> 00:20:18,299
just get thrown away it'll just

00:20:15,120 --> 00:20:20,159
overwrite it quite naturally and of

00:20:18,299 --> 00:20:22,500
course flex layout flex layout is

00:20:20,159 --> 00:20:24,179
supported further back than grid is so

00:20:22,500 --> 00:20:26,850
you can potentially use flexbox as a

00:20:24,179 --> 00:20:28,919
fallback and then again if the Flex item

00:20:26,850 --> 00:20:31,140
becomes a grid item the Flex properties

00:20:28,919 --> 00:20:32,880
or flex basis let's grow and so on that

00:20:31,140 --> 00:20:34,559
are applied to the item they just get

00:20:32,880 --> 00:20:38,220
thrown away there won't be a problem

00:20:34,559 --> 00:20:40,080
in your layout what this means is you

00:20:38,220 --> 00:20:42,360
need to use the Cascade you need to

00:20:40,080 --> 00:20:43,679
understand how CSS actually works and

00:20:42,360 --> 00:20:45,750
how things you know how things actually

00:20:43,679 --> 00:20:47,610
work in CSS that you can write your own

00:20:45,750 --> 00:20:50,340
stuff write your new stuff and kind of

00:20:47,610 --> 00:20:52,770
understand how that is working and that

00:20:50,340 --> 00:20:57,780
you're doing something that will work in

00:20:52,770 --> 00:21:00,120
browsers however there is a problem with

00:20:57,780 --> 00:21:02,850
this approach because sometimes there's

00:21:00,120 --> 00:21:04,650
something in your old layout that will

00:21:02,850 --> 00:21:07,950
be interpreted by browsers that also

00:21:04,650 --> 00:21:10,740
support grid layout you can't just rely

00:21:07,950 --> 00:21:12,990
on overwriting and it's a typical thing

00:21:10,740 --> 00:21:17,610
is if you've set a width so here I've

00:21:12,990 --> 00:21:18,809
got a floated item I have closed it had

00:21:17,610 --> 00:21:20,130
given it a width which is what you have

00:21:18,809 --> 00:21:21,450
to do we've already seen you have to

00:21:20,130 --> 00:21:24,120
line things up by giving them a width

00:21:21,450 --> 00:21:26,400
and then I go and turn it into a grid

00:21:24,120 --> 00:21:29,220
item and what's going to happen is that

00:21:26,400 --> 00:21:31,650
floated item is now going to become 33%

00:21:29,220 --> 00:21:34,110
of the grid track as opposed to 33% of

00:21:31,650 --> 00:21:35,510
the available width which is obviously

00:21:34,110 --> 00:21:38,970
not what we want

00:21:35,510 --> 00:21:41,370
but CSS has also fixed this problem for

00:21:38,970 --> 00:21:42,840
you with feature queries feature queries

00:21:41,370 --> 00:21:44,789
are wonderful they are going to become

00:21:42,840 --> 00:21:46,650
your new best friend they have got

00:21:44,789 --> 00:21:48,179
really good browser support and you

00:21:46,650 --> 00:21:49,710
don't need to worry about I 11 not

00:21:48,179 --> 00:21:51,330
supporting them because what you do with

00:21:49,710 --> 00:21:53,700
feature queries is you write your old

00:21:51,330 --> 00:21:56,460
CSS and then you have your feature query

00:21:53,700 --> 00:21:59,539
and you write your new CSS inside that

00:21:56,460 --> 00:22:01,830
that over writes the old stuff like this

00:21:59,539 --> 00:22:04,890
so here I've said you know I've got my

00:22:01,830 --> 00:22:07,740
floated item it's 33% then inside my

00:22:04,890 --> 00:22:09,810
future query I just say set that width

00:22:07,740 --> 00:22:11,700
back to auto

00:22:09,810 --> 00:22:14,010
the future query is you know at supports

00:22:11,700 --> 00:22:15,780
a bit like a media query I'm saying

00:22:14,010 --> 00:22:18,120
do you support display grids the browser

00:22:15,780 --> 00:22:20,340
says I do indeed say right set that

00:22:18,120 --> 00:22:23,190
width back to auto and that's all you

00:22:20,340 --> 00:22:25,350
need to do feature queries fantastic and

00:22:23,190 --> 00:22:27,360
anything new in CSS that happens from

00:22:25,350 --> 00:22:31,140
now on in you can use a feature query to

00:22:27,360 --> 00:22:34,080
detect so what this means is you do need

00:22:31,140 --> 00:22:35,490
to understand CSS I hear at all foggy

00:22:34,080 --> 00:22:37,410
about how the Cascade works how the

00:22:35,490 --> 00:22:39,510
fundamentals of CSS works this is a

00:22:37,410 --> 00:22:41,100
really good time to just sort of relearn

00:22:39,510 --> 00:22:44,130
that and make sure you understand

00:22:41,100 --> 00:22:45,840
because the actual fundamentals of CSS

00:22:44,130 --> 00:22:47,970
aren't fast moving this stuff hasn't

00:22:45,840 --> 00:22:49,530
changed a lot I've been doing this for a

00:22:47,970 --> 00:22:51,150
very long time you know you don't have

00:22:49,530 --> 00:22:53,490
you don't have to learn everything about

00:22:51,150 --> 00:22:56,250
every specification but those will core

00:22:53,490 --> 00:22:57,720
fundamentals are worth understanding so

00:22:56,250 --> 00:22:59,580
that they're all this new shiny you can

00:22:57,720 --> 00:23:01,590
really take advantage of it

00:22:59,580 --> 00:23:04,470
now very quickly I wanted to go through

00:23:01,590 --> 00:23:08,430
some things that we might have next in

00:23:04,470 --> 00:23:10,680
grid now we saw that problem of the

00:23:08,430 --> 00:23:13,290
items in a nested grid not lining up

00:23:10,680 --> 00:23:14,850
with the rest of the the sort of items

00:23:13,290 --> 00:23:18,180
in other grid cells because they were

00:23:14,850 --> 00:23:19,740
separate sort of grids nested inside and

00:23:18,180 --> 00:23:22,140
this is a really good example of why we

00:23:19,740 --> 00:23:24,390
might want a specification called sub

00:23:22,140 --> 00:23:26,100
grid which was actually removed from the

00:23:24,390 --> 00:23:28,260
level 1 specs it turned out it was very

00:23:26,100 --> 00:23:30,410
complicated to work out what to do with

00:23:28,260 --> 00:23:33,600
grids that were nested all the way down

00:23:30,410 --> 00:23:35,730
so this is sort of an idea around that

00:23:33,600 --> 00:23:37,890
that we're thinking about so this is a

00:23:35,730 --> 00:23:39,300
layout and this is a sort of layout that

00:23:37,890 --> 00:23:41,400
you get from a designer who believes

00:23:39,300 --> 00:23:43,770
that content emerges from the CMS or

00:23:41,400 --> 00:23:46,800
perfect line lengths so everything lines

00:23:43,770 --> 00:23:47,970
up really neatly doesn't it and we can

00:23:46,800 --> 00:23:50,250
use grid what do you see look at that

00:23:47,970 --> 00:23:52,680
say that's really easy with CSS grid

00:23:50,250 --> 00:23:55,410
there you go there is your grid layout

00:23:52,680 --> 00:23:57,510
that will do this and then of course the

00:23:55,410 --> 00:23:59,820
real world of real data happens and this

00:23:57,510 --> 00:24:03,930
happens and the designer says that's not

00:23:59,820 --> 00:24:05,100
what I wanted any like I know and so

00:24:03,930 --> 00:24:07,410
with it when I'd like to line those

00:24:05,100 --> 00:24:09,420
boxes up across each row and we can't

00:24:07,410 --> 00:24:11,430
because the internals of the box aren't

00:24:09,420 --> 00:24:13,230
participating in the grid layout and

00:24:11,430 --> 00:24:15,120
about the best we can do is something

00:24:13,230 --> 00:24:17,280
like this we'd make the internals a

00:24:15,120 --> 00:24:19,110
nested grid we've made them a Flex

00:24:17,280 --> 00:24:21,810
container and then we could push the

00:24:19,110 --> 00:24:22,580
footer down to the bottom which is a bit

00:24:21,810 --> 00:24:24,769
better

00:24:22,580 --> 00:24:28,340
your design is still gonna say ah that's

00:24:24,769 --> 00:24:30,230
not what I wanted so we've got this sub

00:24:28,340 --> 00:24:33,230
grid spec that was pushed into level 2

00:24:30,230 --> 00:24:35,090
and it could solve this problem we'd

00:24:33,230 --> 00:24:37,190
basically to look at what our internals

00:24:35,090 --> 00:24:39,350
were and what we've actually got is a

00:24:37,190 --> 00:24:41,000
full track which if that was the

00:24:39,350 --> 00:24:45,140
internals of the box with all of the

00:24:41,000 --> 00:24:48,470
items in there and so what we need to do

00:24:45,140 --> 00:24:50,960
is on the card we'd say well you need to

00:24:48,470 --> 00:24:53,480
span four tracks to make room for the

00:24:50,960 --> 00:24:54,799
internals and then say display sub grid

00:24:53,480 --> 00:24:57,230
and the idea being that then the

00:24:54,799 --> 00:25:00,320
internal things would use the grid

00:24:57,230 --> 00:25:03,230
defined on the parent which would give

00:25:00,320 --> 00:25:05,990
us this sort of thing you know as in

00:25:03,230 --> 00:25:07,549
this mock-up and in reality we'd also

00:25:05,990 --> 00:25:09,139
need to deal with the gap and because

00:25:07,549 --> 00:25:10,850
the the spec that we did have didn't

00:25:09,139 --> 00:25:12,590
really have any concept of the gap and

00:25:10,850 --> 00:25:15,559
so on now this is all completely

00:25:12,590 --> 00:25:16,940
theoretical at the moment and the spec

00:25:15,559 --> 00:25:18,080
that was that was sort of cool it was

00:25:16,940 --> 00:25:20,690
quite limited and that was one of the

00:25:18,080 --> 00:25:21,740
reasons it was pushed into level 2 but

00:25:20,690 --> 00:25:23,630
there's a fair bit of discussion

00:25:21,740 --> 00:25:25,760
happening about how we do this how we

00:25:23,630 --> 00:25:27,500
can define a grid on the parent and let

00:25:25,760 --> 00:25:29,029
not just dialect children but the

00:25:27,500 --> 00:25:32,360
children of children and even their

00:25:29,029 --> 00:25:33,919
children also use that grid there's a

00:25:32,360 --> 00:25:35,299
bunch of stuff I'm showing these slides

00:25:33,919 --> 00:25:36,649
they should be able to have a look with

00:25:35,299 --> 00:25:38,269
a bunch of stuff is also an issue on a

00:25:36,649 --> 00:25:40,519
CSS working group draft repository we're

00:25:38,269 --> 00:25:44,480
talking about this if you have use cases

00:25:40,519 --> 00:25:46,490
come and share them another thing that

00:25:44,480 --> 00:25:48,409
people want to do they start using grid

00:25:46,490 --> 00:25:53,210
layout they say this is just like

00:25:48,409 --> 00:25:54,649
masonry and it turns out it's not so it

00:25:53,210 --> 00:25:55,880
looks we do this sort of thing and

00:25:54,649 --> 00:25:58,250
people think yeah that that looks a bit

00:25:55,880 --> 00:25:59,990
like masonry yeah that kind of works a

00:25:58,250 --> 00:26:02,360
bit like it and then we have auto

00:25:59,990 --> 00:26:04,010
placement and we can take a bunch of

00:26:02,360 --> 00:26:06,139
things throw them in a grid layout and

00:26:04,010 --> 00:26:08,389
grid will just lay them out for you

00:26:06,139 --> 00:26:10,880
which is lovely and you can even cause

00:26:08,389 --> 00:26:13,610
sue those items to span multiple tracks

00:26:10,880 --> 00:26:16,070
which is pretty cool so we end up with

00:26:13,610 --> 00:26:19,700
this kind of thing but we've got these

00:26:16,070 --> 00:26:23,389
gaps in the track and then we can use

00:26:19,700 --> 00:26:25,700
grid Auto flow dense and grid will back

00:26:23,389 --> 00:26:27,620
fill the gaps and like yeah this this is

00:26:25,700 --> 00:26:29,899
masonry surely this is just like Mesa

00:26:27,620 --> 00:26:32,149
new but it's not it's still a strict

00:26:29,899 --> 00:26:34,190
grid with rows and columns and things

00:26:32,149 --> 00:26:36,260
are also ending up out of source order

00:26:34,190 --> 00:26:38,630
if you use auto flow dense which

00:26:36,260 --> 00:26:40,040
obviously cause accessibility issues if

00:26:38,630 --> 00:26:41,510
someone was tabbing around that they

00:26:40,040 --> 00:26:44,750
could be jumping all over the place so

00:26:41,510 --> 00:26:47,900
that's not ideal so masonry layouts look

00:26:44,750 --> 00:26:49,880
a bit more like this items stay in

00:26:47,900 --> 00:26:51,770
document orders then I'll go across the

00:26:49,880 --> 00:26:52,370
row and kind of what happens with

00:26:51,770 --> 00:26:53,990
masonry

00:26:52,370 --> 00:26:55,850
is you get a layout and then you have a

00:26:53,990 --> 00:26:57,830
gap and so you sort of push items up

00:26:55,850 --> 00:26:59,720
into the gap it's almost a mixture

00:26:57,830 --> 00:27:03,110
between grid and flexbox sort of a

00:26:59,720 --> 00:27:05,360
2-dimensional weird flexbox thing it's a

00:27:03,110 --> 00:27:07,250
little bit different so currently you're

00:27:05,360 --> 00:27:09,170
closer to masonry with multiple column

00:27:07,250 --> 00:27:12,050
layout except that you're going column

00:27:09,170 --> 00:27:13,970
wise now this is something we'd quite

00:27:12,050 --> 00:27:15,680
like to solve because it comes up again

00:27:13,970 --> 00:27:18,590
and again and again

00:27:15,680 --> 00:27:20,510
and there is a giant thread on the CSS

00:27:18,590 --> 00:27:22,910
working group draft repository about

00:27:20,510 --> 00:27:24,650
masonry layouts because it is the thing

00:27:22,910 --> 00:27:27,530
that everyone seems to want to be able

00:27:24,650 --> 00:27:29,330
to do so that's something that we'd like

00:27:27,530 --> 00:27:32,150
to discuss and we'd like to figure out

00:27:29,330 --> 00:27:33,590
the best way to achieve that so if

00:27:32,150 --> 00:27:35,300
you've got thoughts you know come and

00:27:33,590 --> 00:27:36,890
join in with the giant thread it does

00:27:35,300 --> 00:27:38,870
show that there is interest and that

00:27:36,890 --> 00:27:41,570
people want to do this sort of stuff

00:27:38,870 --> 00:27:44,180
and so those are really just two things

00:27:41,570 --> 00:27:46,280
that were thinking about as we start to

00:27:44,180 --> 00:27:47,930
use grids because I was talking about

00:27:46,280 --> 00:27:49,970
this for five years but just like

00:27:47,930 --> 00:27:52,730
everybody else I've not used it in

00:27:49,970 --> 00:27:55,130
production until March and it's when you

00:27:52,730 --> 00:27:56,780
start to use things in production you

00:27:55,130 --> 00:27:59,150
see problems and challenges and stuff

00:27:56,780 --> 00:28:02,990
that oh it doesn't quite do this as I

00:27:59,150 --> 00:28:05,420
thought it would so this is new to all

00:28:02,990 --> 00:28:07,250
of us and so we're finding the edge

00:28:05,420 --> 00:28:09,830
cases were finding the problems and

00:28:07,250 --> 00:28:12,830
we're still figuring this stuff out and

00:28:09,830 --> 00:28:14,660
we're all learning this together and so

00:28:12,830 --> 00:28:17,330
if you do start using grid layout or any

00:28:14,660 --> 00:28:19,520
new CSS and you hit problems you find

00:28:17,330 --> 00:28:22,340
soon you think oh why doesn't it do this

00:28:19,520 --> 00:28:24,920
why doesn't that work well share what

00:28:22,340 --> 00:28:26,360
you found out write about it

00:28:24,920 --> 00:28:28,160
you know come and tell the CSS working

00:28:26,360 --> 00:28:30,470
group what's missing as I say everything

00:28:28,160 --> 00:28:32,330
is there on on github the there are

00:28:30,470 --> 00:28:34,340
issues raised against the specifications

00:28:32,330 --> 00:28:36,080
just like any open source project and

00:28:34,340 --> 00:28:38,960
we're bowed by half of people to come

00:28:36,080 --> 00:28:40,790
and comment or raise issues and it'll

00:28:38,960 --> 00:28:42,230
get discussed and you may well come up

00:28:40,790 --> 00:28:44,870
with something that will get added to a

00:28:42,230 --> 00:28:46,520
CSS spec in future and that's exactly

00:28:44,870 --> 00:28:47,600
what's happening people who bring their

00:28:46,520 --> 00:28:49,410
feedback and they're actually getting

00:28:47,600 --> 00:28:51,570
added to specifications

00:28:49,410 --> 00:28:53,640
this is your platform to create on and

00:28:51,570 --> 00:28:56,090
we want to make more things possible

00:28:53,640 --> 00:28:59,070
that's a really cool thing about this

00:28:56,090 --> 00:29:00,960
and if grid was pretty new to you I've

00:28:59,070 --> 00:29:03,540
got a bunch of worked examples on grid

00:29:00,960 --> 00:29:06,030
by example.com I also created the guides

00:29:03,540 --> 00:29:08,070
for mdn which is lots and lots of words

00:29:06,030 --> 00:29:10,350
about grid layout there were videos on

00:29:08,070 --> 00:29:11,880
my site and grid by example and lots of

00:29:10,350 --> 00:29:14,460
other thoughts on a challenge at codit

00:29:11,880 --> 00:29:16,050
ok if you do run into problems using

00:29:14,460 --> 00:29:18,540
grid layout that you think this is a bug

00:29:16,050 --> 00:29:20,460
I've got a set of grid bugs that I am

00:29:18,540 --> 00:29:22,560
collecting and also trying to get them

00:29:20,460 --> 00:29:24,180
fixed so we find the bugs and then we go

00:29:22,560 --> 00:29:26,610
and log them with browsers and say hey

00:29:24,180 --> 00:29:28,350
let's get this fixed it's surprisingly

00:29:26,610 --> 00:29:30,180
interoperable grid layout considering a

00:29:28,350 --> 00:29:31,710
house just landed in browsers there are

00:29:30,180 --> 00:29:34,170
very very few bugs but obviously there

00:29:31,710 --> 00:29:36,810
are some and let's try and get those

00:29:34,170 --> 00:29:38,340
sorted out and as mentioned if you like

00:29:36,810 --> 00:29:39,900
this sort of stuff I've got a book out

00:29:38,340 --> 00:29:42,660
with a book apart which is all about

00:29:39,900 --> 00:29:44,460
layout and really puts grid into context

00:29:42,660 --> 00:29:46,890
so that you know you can see how it fits

00:29:44,460 --> 00:29:49,290
with other layout methods and all of my

00:29:46,890 --> 00:29:51,320
slides and resources are at that URL

00:29:49,290 --> 00:29:56,170
thank you very much for listening

00:29:51,320 --> 00:29:56,170

YouTube URL: https://www.youtube.com/watch?v=2XkzpgWoYEI


