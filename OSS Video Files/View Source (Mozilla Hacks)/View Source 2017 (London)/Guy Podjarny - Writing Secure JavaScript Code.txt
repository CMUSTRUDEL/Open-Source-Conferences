Title: Guy Podjarny - Writing Secure JavaScript Code
Publication date: 2017-11-20
Playlist: View Source 2017 (London)
Description: 
	View Source 2017.

View Source is a conference for front-end web developers. The goal of this event is to provide an in-depth, practical look at current and on-the-horizon technologies, with plenty of opportunities for conversation.
Captions: 
	00:00:04,720 --> 00:00:10,190
Thanks so thanks for persevering here so

00:00:08,149 --> 00:00:12,769
I'm a guy bjarni and I will talk to you

00:00:10,190 --> 00:00:14,269
today about secure JavaScript code and

00:00:12,769 --> 00:00:16,129
we'll do some live hacking and it will

00:00:14,269 --> 00:00:17,480
be fun and hopefully that would be that

00:00:16,129 --> 00:00:18,890
was the last of the technical hiccup

00:00:17,480 --> 00:00:22,970
going on because there's live demos so

00:00:18,890 --> 00:00:25,070
there's high propensity for for flaws so

00:00:22,970 --> 00:00:26,809
a little bit about me is is I indeed

00:00:25,070 --> 00:00:27,950
sort of spent a good chunk of my time in

00:00:26,809 --> 00:00:30,919
the world of security sort of through

00:00:27,950 --> 00:00:32,870
the Israeli army and through the sort of

00:00:30,919 --> 00:00:34,280
first segways into the world of

00:00:32,870 --> 00:00:35,899
application security when we had to

00:00:34,280 --> 00:00:37,820
teach people why SQL injection matters

00:00:35,899 --> 00:00:39,410
and across the scripting matters and

00:00:37,820 --> 00:00:41,780
then took that detour into performance

00:00:39,410 --> 00:00:44,420
for about six years most recently CTO at

00:00:41,780 --> 00:00:45,679
Akamai and then back into the world of

00:00:44,420 --> 00:00:47,390
security dealing with open-source

00:00:45,679 --> 00:00:52,429
security now which I'll talk about a bit

00:00:47,390 --> 00:00:54,289
more so digging into it you know into uh

00:00:52,429 --> 00:00:56,839
into the depth of the talk you know we

00:00:54,289 --> 00:00:59,210
all I think agree javascript is awesome

00:00:56,839 --> 00:01:01,519
it's a it's also terrible but it's it's

00:00:59,210 --> 00:01:03,109
also awesome and we oftentimes like to

00:01:01,519 --> 00:01:04,370
talk about how javascript has one you

00:01:03,109 --> 00:01:06,020
know like it all these sort of adoption

00:01:04,370 --> 00:01:08,330
metrics and all of that and there's a

00:01:06,020 --> 00:01:10,730
lot of reasons to it and there are these

00:01:08,330 --> 00:01:12,560
like notable JavaScript rates going from

00:01:10,730 --> 00:01:14,270
just some of the scripting capabilities

00:01:12,560 --> 00:01:15,710
like the dynamic typing and built-in

00:01:14,270 --> 00:01:17,510
memory management just sort of less

00:01:15,710 --> 00:01:20,360
effort to get going some good API

00:01:17,510 --> 00:01:21,620
related capabilities like the JSON

00:01:20,360 --> 00:01:24,290
friendliness where you can just pull

00:01:21,620 --> 00:01:25,940
that in there are a lot of templates and

00:01:24,290 --> 00:01:28,310
you know so it scaffolding for us so we

00:01:25,940 --> 00:01:29,900
don't need to reinvent stuff it's either

00:01:28,310 --> 00:01:32,030
morphic you know that's probably one of

00:01:29,900 --> 00:01:33,710
the key success reasons for nodejs so

00:01:32,030 --> 00:01:35,450
you can run it on the server or on the

00:01:33,710 --> 00:01:36,770
client it's both sort of skillset

00:01:35,450 --> 00:01:38,990
relevant but also sometimes you can run

00:01:36,770 --> 00:01:40,460
the same piece of code in both and of

00:01:38,990 --> 00:01:42,080
course it has the flourishing NPM

00:01:40,460 --> 00:01:45,110
package ecosystem which is also growing

00:01:42,080 --> 00:01:47,120
by leaps and bounds but when you put the

00:01:45,110 --> 00:01:49,280
paranoid hat on sometimes what makes

00:01:47,120 --> 00:01:52,160
JavaScript awesome is also what makes it

00:01:49,280 --> 00:01:54,020
vulnerable so as a security person I

00:01:52,160 --> 00:01:56,660
look at it and I see all these like

00:01:54,020 --> 00:01:58,820
notable traits and each of them feels

00:01:56,660 --> 00:02:00,530
like a potential flaw right it feels

00:01:58,820 --> 00:02:02,720
like an area where there might be a

00:02:00,530 --> 00:02:04,100
problem you long to talk about built-in

00:02:02,720 --> 00:02:05,510
memory management but whenever that

00:02:04,100 --> 00:02:07,460
deviates for instance to the nodejs

00:02:05,510 --> 00:02:09,349
buffer object you might get remote

00:02:07,460 --> 00:02:11,060
memory exposure you look at native

00:02:09,349 --> 00:02:12,140
serialization with JSON so you could

00:02:11,060 --> 00:02:13,549
just take an object serialize and

00:02:12,140 --> 00:02:14,910
deserialize it and I think about type

00:02:13,549 --> 00:02:16,530
manipulation can you

00:02:14,910 --> 00:02:18,480
turn a string into an integer or an

00:02:16,530 --> 00:02:21,480
array and play around with the app and

00:02:18,480 --> 00:02:23,130
so on and so forth so there's a whole

00:02:21,480 --> 00:02:24,780
set of these flaws and we need to make

00:02:23,130 --> 00:02:26,130
sure that we understand them we're going

00:02:24,780 --> 00:02:29,400
to talk a lot about them so I'm going to

00:02:26,130 --> 00:02:30,600
be talking a lot about them now the

00:02:29,400 --> 00:02:32,130
second thing to keep in mind is that

00:02:30,600 --> 00:02:33,720
while we're going to talk about these

00:02:32,130 --> 00:02:36,930
vulnerabilities it's not always your

00:02:33,720 --> 00:02:37,410
code that is the problem NPM is also

00:02:36,930 --> 00:02:40,140
awesome

00:02:37,410 --> 00:02:42,180
I mean power is dead but NPM is awesome

00:02:40,140 --> 00:02:43,980
and it is growing by leaps and bounds

00:02:42,180 --> 00:02:45,390
and I've kind of gotten fed up with

00:02:43,980 --> 00:02:48,630
updating the slide so it's about a month

00:02:45,390 --> 00:02:51,720
old it has four 540,000 packages and

00:02:48,630 --> 00:02:55,110
gazillion billion downloads a month and

00:02:51,720 --> 00:02:57,720
just growing by a ridiculous pace so it

00:02:55,110 --> 00:02:59,850
sort of gets through the the situation

00:02:57,720 --> 00:03:00,900
where a typical node.js app has hundreds

00:02:59,850 --> 00:03:02,700
if not thousands of different

00:03:00,900 --> 00:03:05,880
application of different dependencies

00:03:02,700 --> 00:03:07,920
that power it and similarly on the front

00:03:05,880 --> 00:03:09,270
end we see NPM powering react and

00:03:07,920 --> 00:03:11,940
angular and web pack and a lot of them

00:03:09,270 --> 00:03:14,160
water in front end javascript stacks so

00:03:11,940 --> 00:03:18,510
you get to to a point where this is your

00:03:14,160 --> 00:03:20,340
app and this is your code and I like to

00:03:18,510 --> 00:03:21,780
say that like this this seems like a

00:03:20,340 --> 00:03:24,180
negative slide but I say this a positive

00:03:21,780 --> 00:03:26,220
one it means all you had to do is write

00:03:24,180 --> 00:03:28,110
that purplish little amount of code and

00:03:26,220 --> 00:03:29,490
you've got that orangish value right

00:03:28,110 --> 00:03:30,780
just now even like when hacking coffee

00:03:29,490 --> 00:03:32,940
machines there's libraries that you can

00:03:30,780 --> 00:03:35,610
use and they help you they help you do

00:03:32,940 --> 00:03:37,140
more but it's also a concern right

00:03:35,610 --> 00:03:39,810
sometimes it makes you go from thinking

00:03:37,140 --> 00:03:44,250
javascript has one too that's gonna zoom

00:03:39,810 --> 00:03:45,930
in a slightly more exasperated tone so

00:03:44,250 --> 00:03:47,550
when we think about security we should

00:03:45,930 --> 00:03:50,520
remember that since most of your code

00:03:47,550 --> 00:03:51,450
comes from these NPM libraries to a

00:03:50,520 --> 00:03:52,740
large extent most of your

00:03:51,450 --> 00:03:55,100
vulnerabilities most of the security

00:03:52,740 --> 00:03:57,480
flaws also are embedded in those codes

00:03:55,100 --> 00:03:59,880
this is a real-world problem in the

00:03:57,480 --> 00:04:01,620
world of NPM roughly every seventh

00:03:59,880 --> 00:04:02,850
library carries of vulnerabilities so

00:04:01,620 --> 00:04:04,950
either in its own code or in the

00:04:02,850 --> 00:04:06,600
dependency that it's pulling in and the

00:04:04,950 --> 00:04:08,220
vast majority of apps would be using

00:04:06,600 --> 00:04:10,830
such a vulnerable library until you

00:04:08,220 --> 00:04:12,840
actually start testing for it and this

00:04:10,830 --> 00:04:14,310
risk expands sort of spans the world of

00:04:12,840 --> 00:04:15,690
JavaScript it actually technically spans

00:04:14,310 --> 00:04:18,120
beyond the world of JavaScript I'm just

00:04:15,690 --> 00:04:21,209
going to focus on here and it risks node

00:04:18,120 --> 00:04:23,640
apps front-end apps is a morphic apps

00:04:21,209 --> 00:04:26,310
sometimes the same security mistake that

00:04:23,640 --> 00:04:28,230
happens on the server would be more

00:04:26,310 --> 00:04:30,450
maybe concerning on the client or vice

00:04:28,230 --> 00:04:31,790
versa and of course IOT apps right I

00:04:30,450 --> 00:04:33,900
could hack me with that coffee machine

00:04:31,790 --> 00:04:35,790
I'm sort of thinking to go to Johnny

00:04:33,900 --> 00:04:37,200
five and you know write a little quick

00:04:35,790 --> 00:04:39,960
test to see which dependencies it's

00:04:37,200 --> 00:04:41,850
using so this is kind of the concern

00:04:39,960 --> 00:04:43,530
what we're going to do today is we'll

00:04:41,850 --> 00:04:45,360
take advantage of the fact that these

00:04:43,530 --> 00:04:47,040
libraries may be vulnerable and also try

00:04:45,360 --> 00:04:48,720
to use them as examples because these

00:04:47,040 --> 00:04:50,820
are public vulnerabilities in open

00:04:48,720 --> 00:04:52,560
source code that we can see we can learn

00:04:50,820 --> 00:04:54,810
from and we can try to avoid these types

00:04:52,560 --> 00:04:56,340
of mistakes in our system so what we're

00:04:54,810 --> 00:04:58,950
going to do for the rest of this talk is

00:04:56,340 --> 00:05:01,470
we will show a demo application and

00:04:58,950 --> 00:05:03,330
we'll find some vulnerable libraries on

00:05:01,470 --> 00:05:05,460
it will exploit a handful of those

00:05:03,330 --> 00:05:07,200
vulnerabilities so you can see how that

00:05:05,460 --> 00:05:09,300
happens and what's the implication of it

00:05:07,200 --> 00:05:10,980
and of course talk about what was the

00:05:09,300 --> 00:05:12,420
mistake and how can we avoid it and then

00:05:10,980 --> 00:05:14,160
we'll talk also about vulnerabilities in

00:05:12,420 --> 00:05:18,380
the dependencies talk about securing

00:05:14,160 --> 00:05:24,060
those so with that let me switch off

00:05:18,380 --> 00:05:26,460
this keynote here and I think I'm gonna

00:05:24,060 --> 00:05:28,919
take another risky move here with the

00:05:26,460 --> 00:05:30,780
display and try to mirror otherwise I'm

00:05:28,919 --> 00:05:33,320
going to be doing a lot of this let's

00:05:30,780 --> 00:05:33,320
see if that happens

00:05:34,740 --> 00:05:41,669
arrangement mirror move okay I think

00:05:40,380 --> 00:05:46,290
it's working I hope I didn't mess up any

00:05:41,669 --> 00:05:49,260
resolutions there in the back and we're

00:05:46,290 --> 00:05:50,850
going to move to the browser so we've

00:05:49,260 --> 00:05:52,680
got a little to-do application here

00:05:50,850 --> 00:05:54,960
because you know it's the demo apps of

00:05:52,680 --> 00:05:56,700
course let's do MVC you can add things

00:05:54,960 --> 00:05:59,940
like you know call mom sort of a to-do

00:05:56,700 --> 00:06:01,470
application to pull it on Heroku and

00:05:59,940 --> 00:06:04,080
relying on internet I think it's just my

00:06:01,470 --> 00:06:07,860
hero app waking up you can emphasize

00:06:04,080 --> 00:06:10,470
important things you can you know use a

00:06:07,860 --> 00:06:11,850
bunch of capabilities with markdown and

00:06:10,470 --> 00:06:15,060
you know this is just sort of a simple

00:06:11,850 --> 00:06:16,770
application it is on github I can sort

00:06:15,060 --> 00:06:19,110
of tweet the link after that and it's

00:06:16,770 --> 00:06:20,640
just a simple vulnerable application so

00:06:19,110 --> 00:06:23,040
this application just shortcutting a

00:06:20,640 --> 00:06:25,770
little bit on for the sake of time it

00:06:23,040 --> 00:06:27,450
uses a bunch of dependencies this is the

00:06:25,770 --> 00:06:28,710
view from sneak and a full disclosure

00:06:27,450 --> 00:06:30,360
I'm going to use sneak for it for

00:06:28,710 --> 00:06:32,370
demonstrating the concept this is the

00:06:30,360 --> 00:06:33,870
kind of company that i work at right now

00:06:32,370 --> 00:06:36,390
and what I deal with

00:06:33,870 --> 00:06:39,030
but it has a whole tree of dependence is

00:06:36,390 --> 00:06:40,640
not an unusually big one and some of

00:06:39,030 --> 00:06:42,600
those dependencies have vulnerabilities

00:06:40,640 --> 00:06:46,350
we're gonna pick on a bunch of those

00:06:42,600 --> 00:06:49,470
vulnerabilities so we're going to start

00:06:46,350 --> 00:06:52,380
with marked marked is anybody here heard

00:06:49,470 --> 00:06:54,870
of marked a few hands so it's a fairly

00:06:52,380 --> 00:06:56,130
popular markdown parsing library and we

00:06:54,870 --> 00:06:58,830
use it to do that sort of emphasize

00:06:56,130 --> 00:07:00,090
alcoholic beverages we like you know

00:06:58,830 --> 00:07:02,190
system and it has a vulnerability that

00:07:00,090 --> 00:07:04,620
typically you would read about here but

00:07:02,190 --> 00:07:06,870
you have me so you don't need to I can

00:07:04,620 --> 00:07:09,450
demo it so it has a cross-site scripting

00:07:06,870 --> 00:07:11,130
vulnerability on it if you think about a

00:07:09,450 --> 00:07:12,300
component you know it has cross-site

00:07:11,130 --> 00:07:15,750
scripting vulnerability what are you

00:07:12,300 --> 00:07:17,700
going to try and do what sort of first

00:07:15,750 --> 00:07:20,460
probe for security for cross-site

00:07:17,700 --> 00:07:22,770
scripting an alert so you're gonna try

00:07:20,460 --> 00:07:28,440
it something like this alert one

00:07:22,770 --> 00:07:29,970
script and if I do this nothing happens

00:07:28,440 --> 00:07:31,110
across the scripting is not as simple as

00:07:29,970 --> 00:07:32,940
you might think there are a lot of

00:07:31,110 --> 00:07:34,320
variants a gazillion variants and all

00:07:32,940 --> 00:07:36,270
sorts of permutations I can go in here

00:07:34,320 --> 00:07:38,520
and put an image tag with an onload I

00:07:36,270 --> 00:07:39,840
can do a lot of those components I can

00:07:38,520 --> 00:07:43,080
spare you that time and tell you that

00:07:39,840 --> 00:07:44,940
none of them would work because marked

00:07:43,080 --> 00:07:46,530
has a really good sanitize function that

00:07:44,940 --> 00:07:48,690
catches almost all of those cases

00:07:46,530 --> 00:07:50,190
unknowingly it is not on by default so

00:07:48,690 --> 00:07:53,400
you would need to turn it on but I did

00:07:50,190 --> 00:07:57,750
turn it on in this case but it misses

00:07:53,400 --> 00:07:59,790
something so as a part of the HTML tags

00:07:57,750 --> 00:08:02,310
it catches all of those but markdown

00:07:59,790 --> 00:08:04,980
also allows for links built in so I can

00:08:02,310 --> 00:08:08,910
do something like you know sneak that

00:08:04,980 --> 00:08:11,040
eye out here and like this and it would

00:08:08,910 --> 00:08:12,600
open up a link here so that's fine

00:08:11,040 --> 00:08:15,450
that's not a problem per se that's a

00:08:12,600 --> 00:08:17,250
link but if I have this and I know

00:08:15,450 --> 00:08:18,870
there's a struct cross-site scripting

00:08:17,250 --> 00:08:23,460
vulnerability here what would I try to

00:08:18,870 --> 00:08:25,830
do JavaScript I will do JavaScript call

00:08:23,460 --> 00:08:27,629
an alert one and then I would do this

00:08:25,830 --> 00:08:33,630
and

00:08:27,629 --> 00:08:39,639
whoo hold on hold on live coding here

00:08:33,630 --> 00:08:41,469
javascript calling alert one and I think

00:08:39,639 --> 00:08:44,050
will happen because sanitize would catch

00:08:41,469 --> 00:08:47,110
that as well so I can take you down a

00:08:44,050 --> 00:08:49,959
long and artist journey here where I

00:08:47,110 --> 00:08:52,509
would go to an encoded version of it

00:08:49,959 --> 00:08:59,399
anybody remember by heart to the HTML

00:08:52,509 --> 00:09:01,990
entity for Colin 58 shame on you and

00:08:59,399 --> 00:09:03,699
then I will put like 41 here because I

00:09:01,990 --> 00:09:05,230
know that I need to as well for encoding

00:09:03,699 --> 00:09:08,680
that brackets and I will do this and

00:09:05,230 --> 00:09:11,170
this is getting fancy and nothing will

00:09:08,680 --> 00:09:16,870
happen so I think what's interesting

00:09:11,170 --> 00:09:20,620
here is so actually marked is perfect

00:09:16,870 --> 00:09:23,500
down to the spec browsers however not so

00:09:20,620 --> 00:09:27,130
much much more permissive and what

00:09:23,500 --> 00:09:28,689
happens if I do this literally this so I

00:09:27,130 --> 00:09:30,759
added some text here the browser comes

00:09:28,689 --> 00:09:32,380
along and says well you told me you have

00:09:30,759 --> 00:09:35,170
an ampersand you have hash mark

00:09:32,380 --> 00:09:37,959
you have 58 yeah you forgot to call in

00:09:35,170 --> 00:09:39,430
but I got you you know and I know what

00:09:37,959 --> 00:09:41,680
you man you meant to call in it's okay

00:09:39,430 --> 00:09:43,209
no next time remember but at this time I

00:09:41,680 --> 00:09:44,920
will put a call in here so when I do

00:09:43,209 --> 00:09:50,230
this everything else is just JavaScript

00:09:44,920 --> 00:09:51,339
and indeed I would get that alert so the

00:09:50,230 --> 00:09:54,699
reason I take you down so that this

00:09:51,339 --> 00:09:56,410
journey is just to say vulnerabilities

00:09:54,699 --> 00:09:57,850
are complicated and coding is

00:09:56,410 --> 00:10:00,630
complicated different inputs are

00:09:57,850 --> 00:10:03,699
complicated and it's not you know a

00:10:00,630 --> 00:10:05,800
folder or shameful behavior for somebody

00:10:03,699 --> 00:10:07,300
to to not consider all of those

00:10:05,800 --> 00:10:10,389
permutations there are a lot of changes

00:10:07,300 --> 00:10:12,310
and they change all the time so lesson

00:10:10,389 --> 00:10:14,319
number one is be wary marked by the way

00:10:12,310 --> 00:10:15,730
it has a different vulnerability in data

00:10:14,319 --> 00:10:17,680
you all rise so you can also provide a

00:10:15,730 --> 00:10:20,290
data URI in here that would also allow

00:10:17,680 --> 00:10:22,060
you to inject the script but also just

00:10:20,290 --> 00:10:24,430
in general one lesson we can take from

00:10:22,060 --> 00:10:26,079
this is that encoding is a problem this

00:10:24,430 --> 00:10:28,329
app also has a vulnerability in a

00:10:26,079 --> 00:10:31,030
package called st which serves static

00:10:28,329 --> 00:10:32,650
resources that has a URL encoding one or

00:10:31,030 --> 00:10:33,970
where you can force browse your way out

00:10:32,650 --> 00:10:35,520
of it I'm not gonna show all the experts

00:10:33,970 --> 00:10:37,690
on this hack because I don't have time

00:10:35,520 --> 00:10:38,470
but but you can play with that

00:10:37,690 --> 00:10:41,430
afterwards

00:10:38,470 --> 00:10:44,320
so maybe lesson number one encoding

00:10:41,430 --> 00:10:46,000
beware encoding try to sanitize your

00:10:44,320 --> 00:10:49,210
input and kind of do your verification

00:10:46,000 --> 00:10:53,080
on the decoded string always or just

00:10:49,210 --> 00:10:54,820
disallow encoding part two let's talk

00:10:53,080 --> 00:10:56,440
about another vulnerability so in here

00:10:54,820 --> 00:10:59,860
if I look at this there's another

00:10:56,440 --> 00:11:02,830
popular package here called MS who here

00:10:59,860 --> 00:11:05,530
has heard of MS know who here has heard

00:11:02,830 --> 00:11:06,610
of moments yeah so I miss a moment or

00:11:05,530 --> 00:11:08,170
kind of the same Emma's gets downloaded

00:11:06,610 --> 00:11:10,210
about you know just a small number of

00:11:08,170 --> 00:11:11,770
about 40 million times a month you use a

00:11:10,210 --> 00:11:14,200
mess you just don't know it it's a child

00:11:11,770 --> 00:11:16,150
dependency of many dependencies this is

00:11:14,200 --> 00:11:18,160
a common occurrence very very popular

00:11:16,150 --> 00:11:20,590
packages the most popular packages on

00:11:18,160 --> 00:11:23,290
NPM are actually not used directly as

00:11:20,590 --> 00:11:25,090
much they are just dependencies of your

00:11:23,290 --> 00:11:26,290
dependencies or maybe dependencies of

00:11:25,090 --> 00:11:28,210
your dependencies of your dependencies

00:11:26,290 --> 00:11:30,700
of your dependencies and these trees get

00:11:28,210 --> 00:11:34,450
big but they might still introduce a

00:11:30,700 --> 00:11:37,780
risk to your own application so ms has a

00:11:34,450 --> 00:11:40,600
reduced vulnerability redose is an

00:11:37,780 --> 00:11:42,550
interesting one let me show you and then

00:11:40,600 --> 00:11:45,130
explain it a bit more first of all we

00:11:42,550 --> 00:11:47,920
use MS for a little memory here what it

00:11:45,130 --> 00:11:49,120
does is it allows you to convert time

00:11:47,920 --> 00:11:50,920
durations into the number of

00:11:49,120 --> 00:11:54,940
milliseconds so I can say call mom in

00:11:50,920 --> 00:11:56,530
two days that's frequently enough and it

00:11:54,940 --> 00:11:57,970
would remember that two days and it

00:11:56,530 --> 00:12:01,150
would remember it did milliseconds and I

00:11:57,970 --> 00:12:02,710
can play with that now in my app so now

00:12:01,150 --> 00:12:04,180
that I have this milliseconds to do that

00:12:02,710 --> 00:12:06,010
type of parsing it uses a regular

00:12:04,180 --> 00:12:07,540
expression now you don't think about

00:12:06,010 --> 00:12:08,890
regular expressions that way but regular

00:12:07,540 --> 00:12:10,900
expressions are algorithms and

00:12:08,890 --> 00:12:13,150
algorithms may take a while to run

00:12:10,900 --> 00:12:14,620
depending on how they run so let's see

00:12:13,150 --> 00:12:16,120
this happening we're going to move off

00:12:14,620 --> 00:12:18,910
the browser which is not a great hacking

00:12:16,120 --> 00:12:21,580
tool here and we will use and I have

00:12:18,910 --> 00:12:22,930
some shortcuts here just the command

00:12:21,580 --> 00:12:25,300
line to run these tools so first of all

00:12:22,930 --> 00:12:26,770
we're gonna run the same thing this is a

00:12:25,300 --> 00:12:29,770
little bit more optimistic called mom in

00:12:26,770 --> 00:12:32,590
20 minutes and if we go back to our

00:12:29,770 --> 00:12:33,880
application we had added a little call

00:12:32,590 --> 00:12:37,330
here nothing really happened we just

00:12:33,880 --> 00:12:39,250
used curl or rather HTTP pi which HD PI

00:12:37,330 --> 00:12:41,760
which is just a curl with syntax

00:12:39,250 --> 00:12:44,470
highlighting to to run this test

00:12:41,760 --> 00:12:45,880
and we're gonna move this up a little

00:12:44,470 --> 00:12:49,600
bit here so you can see it a bit better

00:12:45,880 --> 00:12:53,220
so but what happens if we make that 20 B

00:12:49,600 --> 00:12:57,730
a very very long number so I happen to

00:12:53,220 --> 00:13:01,870
prepare one of those so maybe I will do

00:12:57,730 --> 00:13:04,600
this so I will run 60,000 fives

00:13:01,870 --> 00:13:06,610
on sort of my request add milk and we'll

00:13:04,600 --> 00:13:08,800
see what happens and this would now

00:13:06,610 --> 00:13:10,740
trigger a very very long string that is

00:13:08,800 --> 00:13:12,880
coming into a regular expression and

00:13:10,740 --> 00:13:14,440
regular expressions are state machines

00:13:12,880 --> 00:13:16,390
they maintain these states around you

00:13:14,440 --> 00:13:19,030
know the possible matches that you might

00:13:16,390 --> 00:13:20,920
have to a string and as a result they

00:13:19,030 --> 00:13:22,420
typically will take a nonlinear amount

00:13:20,920 --> 00:13:23,710
of time for the length of the string if

00:13:22,420 --> 00:13:25,420
your string is ten times longer it's

00:13:23,710 --> 00:13:27,790
quite likely it'll take more than ten

00:13:25,420 --> 00:13:31,600
times longer to process that string for

00:13:27,790 --> 00:13:33,970
the regular expression so if I send a

00:13:31,600 --> 00:13:36,640
very very long string it may take a very

00:13:33,970 --> 00:13:40,780
very long time to process so if I do

00:13:36,640 --> 00:13:42,460
this it actually completes fairly

00:13:40,780 --> 00:13:43,810
quickly if I go in here I don't see that

00:13:42,460 --> 00:13:46,060
it's at infinity because it messed

00:13:43,810 --> 00:13:50,200
something up you know I will never buy

00:13:46,060 --> 00:13:52,330
milk but but what it but it completed

00:13:50,200 --> 00:13:53,740
fairly quickly the catch is that regular

00:13:52,330 --> 00:13:56,770
expressions takes the longest amount of

00:13:53,740 --> 00:13:59,590
time when they do not match so if I take

00:13:56,770 --> 00:14:02,020
this string here and I take this s and I

00:13:59,590 --> 00:14:03,430
swap it with an A so it doesn't match it

00:14:02,020 --> 00:14:05,860
gets all the way to the end and then

00:14:03,430 --> 00:14:10,060
it's it's missing that last character to

00:14:05,860 --> 00:14:13,620
be a time stamp now it'll take a while

00:14:10,060 --> 00:14:15,370
if I go in here and I try to invoke or

00:14:13,620 --> 00:14:17,230
run anything here

00:14:15,370 --> 00:14:18,670
nothing will happens so a few things

00:14:17,230 --> 00:14:20,590
first of all the regular expression is

00:14:18,670 --> 00:14:22,090
taking a long time to run and because

00:14:20,590 --> 00:14:24,580
this is JavaScript because this is node

00:14:22,090 --> 00:14:26,080
it is running on the event loop so the

00:14:24,580 --> 00:14:27,340
event loop is a great capability in

00:14:26,080 --> 00:14:29,080
JavaScript and it's again one of its

00:14:27,340 --> 00:14:31,960
claims to fame it's naturally scalable

00:14:29,080 --> 00:14:33,430
because a single thread can just serve

00:14:31,960 --> 00:14:35,140
many many clients and just go

00:14:33,430 --> 00:14:37,150
asynchronous on everything right as soon

00:14:35,140 --> 00:14:38,590
as there's i/o it's asynchronous and

00:14:37,150 --> 00:14:40,570
therefore a single thread can support

00:14:38,590 --> 00:14:42,340
many many many different clients however

00:14:40,570 --> 00:14:44,350
that single thread is a single point of

00:14:42,340 --> 00:14:45,880
failure so if I can run an algorithm for

00:14:44,350 --> 00:14:48,010
a long period of time

00:14:45,880 --> 00:14:50,350
it means I take down that thread and

00:14:48,010 --> 00:14:52,930
with it many clients that it might serve

00:14:50,350 --> 00:14:54,290
maybe unlike another environment where I

00:14:52,930 --> 00:14:57,079
would also care about losing thread

00:14:54,290 --> 00:14:58,310
but every thread would lose a client so

00:14:57,079 --> 00:14:58,730
I would need to repeat that many many

00:14:58,310 --> 00:15:01,009
times

00:14:58,730 --> 00:15:02,690
eventually this kicked in if I added a

00:15:01,009 --> 00:15:04,959
zero here we would you know just be

00:15:02,690 --> 00:15:07,220
sitting here waiting for this to happen

00:15:04,959 --> 00:15:09,740
but remember that the event loop is a

00:15:07,220 --> 00:15:11,660
fragile entity for us you need to be

00:15:09,740 --> 00:15:12,920
where long-running algorithms and the

00:15:11,660 --> 00:15:14,810
algorithm that you don't think of that

00:15:12,920 --> 00:15:17,060
way but is an algorithm that you run

00:15:14,810 --> 00:15:19,970
most often is a regular expression so

00:15:17,060 --> 00:15:21,769
you need to especially beware that let's

00:15:19,970 --> 00:15:24,410
go back to the deck a second and look at

00:15:21,769 --> 00:15:26,600
this in a bit more detail so this is

00:15:24,410 --> 00:15:28,819
another more simple regular expressions

00:15:26,600 --> 00:15:30,350
as a and then B or C one or more

00:15:28,819 --> 00:15:33,350
occurrences of C and then that whole

00:15:30,350 --> 00:15:35,060
group of B or C may happen 0 to infinite

00:15:33,350 --> 00:15:36,649
times it's a fairly simple regular

00:15:35,060 --> 00:15:38,630
expression and you know sort of an a

00:15:36,649 --> 00:15:41,300
view of it would say it shouldn't be

00:15:38,630 --> 00:15:43,730
hard to process but what happens here is

00:15:41,300 --> 00:15:46,100
the C is tricky if I take the first

00:15:43,730 --> 00:15:49,040
chunk of characters there the engine

00:15:46,100 --> 00:15:50,660
would see a and then C ok so this is in

00:15:49,040 --> 00:15:53,389
that group and then this is another C

00:15:50,660 --> 00:15:56,300
does that C relate to the plus or does

00:15:53,389 --> 00:15:58,639
it relate to the star I don't know it'll

00:15:56,300 --> 00:16:00,800
pick one and it'll go down that path

00:15:58,639 --> 00:16:02,389
it'll go all the way to the end just to

00:16:00,800 --> 00:16:04,519
find out there is no D at the end of

00:16:02,389 --> 00:16:06,970
that tunnel so it would backtrack it

00:16:04,519 --> 00:16:09,500
would backtrack one step and try again

00:16:06,970 --> 00:16:11,120
when you have these types of nested

00:16:09,500 --> 00:16:12,889
options when there's multiple options

00:16:11,120 --> 00:16:14,480
that could allow you know sort of an

00:16:12,889 --> 00:16:15,800
exponential amount of these states

00:16:14,480 --> 00:16:18,079
that's referred to as catastrophic

00:16:15,800 --> 00:16:19,940
backtracking if we need to go all the

00:16:18,079 --> 00:16:22,310
way back to the end and then just every

00:16:19,940 --> 00:16:25,130
permutation of two sees can now fit into

00:16:22,310 --> 00:16:26,690
another type of these paths so

00:16:25,130 --> 00:16:28,100
catastrophic backtracking is not good

00:16:26,690 --> 00:16:32,360
it's in the name you know it's a

00:16:28,100 --> 00:16:34,430
catastrophe and and it is not the only

00:16:32,360 --> 00:16:35,660
case in which readers could happen but

00:16:34,430 --> 00:16:37,910
it's one of those cases were a very very

00:16:35,660 --> 00:16:39,350
small number of characters might cause

00:16:37,910 --> 00:16:41,000
this moment has a different

00:16:39,350 --> 00:16:42,680
vulnerability that has been fixed in a

00:16:41,000 --> 00:16:43,939
newer version that indeed can be

00:16:42,680 --> 00:16:46,040
triggered with about 40 characters

00:16:43,939 --> 00:16:47,959
because of this type of catastrophic

00:16:46,040 --> 00:16:51,949
backtracking maybe I should switch my

00:16:47,959 --> 00:16:53,990
examples to beyond the moment cool so

00:16:51,949 --> 00:16:55,670
far so good so lesson to beware long

00:16:53,990 --> 00:16:58,649
running algorithms on the event loop and

00:16:55,670 --> 00:17:01,839
specifically beware redose

00:16:58,649 --> 00:17:03,579
the third class of vulnerabilities I'll

00:17:01,839 --> 00:17:06,639
talk about today is type manipulation

00:17:03,579 --> 00:17:07,779
I'm gonna start in slides and then you

00:17:06,639 --> 00:17:11,799
know what I might have time to actually

00:17:07,779 --> 00:17:13,720
show this this life so oh actually oh

00:17:11,799 --> 00:17:16,089
sorry one more stupid thing a slight how

00:17:13,720 --> 00:17:18,730
one thing to remember about about redose

00:17:16,089 --> 00:17:20,139
so if you if you have if you do this

00:17:18,730 --> 00:17:21,699
type of long-running script on the

00:17:20,139 --> 00:17:23,319
browser on client-side JavaScript you're

00:17:21,699 --> 00:17:24,819
gonna get that fun screen that says the

00:17:23,319 --> 00:17:26,679
script is long responding and you're

00:17:24,819 --> 00:17:29,860
gonna daus a single clients which is not

00:17:26,679 --> 00:17:32,139
a big deal however javascript is either

00:17:29,860 --> 00:17:34,480
morphic so if you allowed for that

00:17:32,139 --> 00:17:35,950
script in certain context to run on the

00:17:34,480 --> 00:17:39,070
server for instance maybe you render

00:17:35,950 --> 00:17:40,480
HTML in your angular app to search

00:17:39,070 --> 00:17:42,460
engines you want to render it on the

00:17:40,480 --> 00:17:45,490
server and run it and you might have you

00:17:42,460 --> 00:17:47,200
know a redose like this because you get

00:17:45,490 --> 00:17:48,940
some parameter in the query then it

00:17:47,200 --> 00:17:51,639
means an attacker can fake a request

00:17:48,940 --> 00:17:53,830
with the Googlebot user agent and would

00:17:51,639 --> 00:17:55,539
now take down your server so in the

00:17:53,830 --> 00:17:57,750
world of JavaScript is amorphic makes

00:17:55,539 --> 00:18:00,190
every client-side vulnerability

00:17:57,750 --> 00:18:01,929
potentially a server-side vulnerability

00:18:00,190 --> 00:18:05,009
as well and you have to think about that

00:18:01,929 --> 00:18:06,580
you have to consider it and from what I

00:18:05,009 --> 00:18:08,620
experience and sort of further

00:18:06,580 --> 00:18:10,059
organizations I work with I can see that

00:18:08,620 --> 00:18:11,889
either morphic is a very very common

00:18:10,059 --> 00:18:13,210
example you think of is amorphic is

00:18:11,889 --> 00:18:14,500
something hey I got fancy with my

00:18:13,210 --> 00:18:15,940
performance and I'm running some piece

00:18:14,500 --> 00:18:18,659
of JavaScript on the server and all that

00:18:15,940 --> 00:18:21,250
that's not common but what is common is

00:18:18,659 --> 00:18:23,500
just for these search engines that I

00:18:21,250 --> 00:18:25,299
don't think no JavaScript I would run or

00:18:23,500 --> 00:18:26,740
render my page on the server especially

00:18:25,299 --> 00:18:29,740
if it's a JavaScript framework based

00:18:26,740 --> 00:18:32,350
page and that is common and therefore

00:18:29,740 --> 00:18:34,090
you would run that JavaScript that sort

00:18:32,350 --> 00:18:36,220
of cross that scripting or that redoes

00:18:34,090 --> 00:18:38,289
on the server-side and it might turn

00:18:36,220 --> 00:18:42,429
into a remote command execution or into

00:18:38,289 --> 00:18:45,190
a denial of service so now actually

00:18:42,429 --> 00:18:48,309
switching to attack manipulation so this

00:18:45,190 --> 00:18:52,679
is a simple piece of code that is used

00:18:48,309 --> 00:18:54,669
for a no sequel account verifcation

00:18:52,679 --> 00:18:56,409
input right somebody comes along and

00:18:54,669 --> 00:18:57,820
they want to log in you take their

00:18:56,409 --> 00:18:59,679
username you take their password and you

00:18:57,820 --> 00:19:02,620
look up that username and password

00:18:59,679 --> 00:19:05,559
hopefully a hash of this password in the

00:19:02,620 --> 00:19:07,590
database and you know it returns a

00:19:05,559 --> 00:19:11,730
result if this was

00:19:07,590 --> 00:19:12,900
an SQL database then you would say you

00:19:11,730 --> 00:19:15,540
know this would be some query right

00:19:12,900 --> 00:19:18,060
select star from users where username

00:19:15,540 --> 00:19:19,740
equals something and and password equals

00:19:18,060 --> 00:19:21,630
something and you would worry about SQL

00:19:19,740 --> 00:19:24,630
injection who here has heard of SQL

00:19:21,630 --> 00:19:27,810
injection okay who here has heard of no

00:19:24,630 --> 00:19:32,190
sequel injection not as common

00:19:27,810 --> 00:19:35,340
so no sequel injection is no sequel but

00:19:32,190 --> 00:19:37,320
still an injection so let's say I have

00:19:35,340 --> 00:19:38,880
this scenario I have an admin and a

00:19:37,320 --> 00:19:40,530
super secret passwords that I'm using

00:19:38,880 --> 00:19:41,850
this is on this app but I don't have

00:19:40,530 --> 00:19:44,370
time to sort of show the exploit again

00:19:41,850 --> 00:19:48,060
you can go to that sneak slash goof demo

00:19:44,370 --> 00:19:51,270
app and run these exploits yourself so

00:19:48,060 --> 00:19:56,610
when I do this that's cool you know it

00:19:51,270 --> 00:19:58,740
goes it logs in but because I I but what

00:19:56,610 --> 00:20:00,120
you might not know is that well know

00:19:58,740 --> 00:20:01,950
sequel database is typically would get

00:20:00,120 --> 00:20:04,230
values almost all of them allow

00:20:01,950 --> 00:20:07,140
operators as well so what it could also

00:20:04,230 --> 00:20:09,420
do is pass this so to the password

00:20:07,140 --> 00:20:12,900
instead of passing a value I would pass

00:20:09,420 --> 00:20:14,760
an object that says greater than zero

00:20:12,900 --> 00:20:16,410
and this is a lookup capability and all

00:20:14,760 --> 00:20:18,960
databases work this specifically works

00:20:16,410 --> 00:20:20,820
on but all no sequel databases

00:20:18,960 --> 00:20:23,400
support some form of slicing like that

00:20:20,820 --> 00:20:24,780
some lookup of categories and you know

00:20:23,400 --> 00:20:27,360
let's sort of see this very very quickly

00:20:24,780 --> 00:20:30,450
after all you might be stretching time a

00:20:27,360 --> 00:20:32,880
bit for it so on our awesome app we also

00:20:30,450 --> 00:20:35,970
have an admin section which allows us to

00:20:32,880 --> 00:20:39,830
put these types of controls and again

00:20:35,970 --> 00:20:45,960
we're gonna go here to the client and

00:20:39,830 --> 00:20:47,370
we're going to curl and if we go back a

00:20:45,960 --> 00:20:49,860
little bit we see that we got admin

00:20:47,370 --> 00:20:51,930
access granted because we used our super

00:20:49,860 --> 00:20:57,300
secret password right let's make one

00:20:51,930 --> 00:20:58,980
tweak to this and say use JSON as input

00:20:57,300 --> 00:21:00,480
now this is very very common it's common

00:20:58,980 --> 00:21:03,990
in many apps today but it's especially

00:21:00,480 --> 00:21:06,540
common in in JavaScript where you use

00:21:03,990 --> 00:21:08,550
JSON and you say echo just a different

00:21:06,540 --> 00:21:10,590
form instead of a form field I am

00:21:08,550 --> 00:21:12,150
passing a JSON object in here and I'm

00:21:10,590 --> 00:21:14,040
providing a name and a password in that

00:21:12,150 --> 00:21:15,930
fashion and most kind of modern apps

00:21:14,040 --> 00:21:17,070
would support some form of API and many

00:21:15,930 --> 00:21:19,470
of them would just take this object and

00:21:17,070 --> 00:21:21,149
deserialize it as is now if you happens

00:21:19,470 --> 00:21:22,859
to deserialize it like this

00:21:21,149 --> 00:21:24,719
first of all maybe just to show you I'm

00:21:22,859 --> 00:21:27,839
not cheating here this is an example

00:21:24,719 --> 00:21:30,269
with the wrong password I run this then

00:21:27,839 --> 00:21:31,739
I will just get back to the about to the

00:21:30,269 --> 00:21:37,259
admin access page I'm not gonna get the

00:21:31,739 --> 00:21:39,239
granted but if I do this I can provide

00:21:37,259 --> 00:21:41,609
this JSON and provide a different type

00:21:39,239 --> 00:21:44,309
of object instead of a string I make

00:21:41,609 --> 00:21:46,349
that Jason now send an object that

00:21:44,309 --> 00:21:49,139
you'll get naturally deserialized in my

00:21:46,349 --> 00:21:53,070
application passed on to monk to to the

00:21:49,139 --> 00:21:56,549
Mongoose client and voila or not able

00:21:53,070 --> 00:22:00,210
not yet here we go ebola admin access

00:21:56,549 --> 00:22:01,559
granted so it's a big deal it's as big a

00:22:00,210 --> 00:22:03,989
deal as SQL injection is just not quite

00:22:01,559 --> 00:22:05,669
as flexible as it but it's something to

00:22:03,989 --> 00:22:07,649
be aware of and it comes down to the

00:22:05,669 --> 00:22:09,629
fact that I've allowed i've not checked

00:22:07,649 --> 00:22:11,669
that the type of the object that i

00:22:09,629 --> 00:22:13,919
passed along is indeed of a string as i

00:22:11,669 --> 00:22:16,080
expected if I had vetted that this would

00:22:13,919 --> 00:22:17,879
not make it through but while we're

00:22:16,080 --> 00:22:19,649
fairly familiar with comparing it for

00:22:17,879 --> 00:22:22,589
Strings if you just did a compared to

00:22:19,649 --> 00:22:24,029
that object you checked if it had some

00:22:22,589 --> 00:22:25,799
characters in it JavaScript would

00:22:24,029 --> 00:22:28,649
conveniently convert it to a string and

00:22:25,799 --> 00:22:30,239
allow you to check and see that it

00:22:28,649 --> 00:22:32,940
doesn't have whatever you know as an

00:22:30,239 --> 00:22:34,320
escaped quote in it but if you just

00:22:32,940 --> 00:22:36,239
allow it through if you don't explicitly

00:22:34,320 --> 00:22:41,099
check for it you wouldn't find out that

00:22:36,239 --> 00:22:42,960
it's not of type string just for a type

00:22:41,099 --> 00:22:44,940
of thing you can actually even enumerate

00:22:42,960 --> 00:22:47,429
the user name right I can just do this

00:22:44,940 --> 00:22:52,320
and say give me the first user the first

00:22:47,429 --> 00:22:54,989
passport and again I'll get in so not

00:22:52,320 --> 00:22:59,429
good beware type manipulations let me

00:22:54,989 --> 00:23:01,229
show one more example of type so jason

00:22:59,429 --> 00:23:02,669
is one way in which i can manipulate a

00:23:01,229 --> 00:23:04,409
type there are a bunch of others one

00:23:02,669 --> 00:23:06,450
other very very common way in the world

00:23:04,409 --> 00:23:09,029
of JavaScript is qsr you're familiar

00:23:06,450 --> 00:23:12,119
with qsr we here is familiar with it now

00:23:09,029 --> 00:23:13,469
we are familiar with Express so like

00:23:12,119 --> 00:23:16,289
anybody familiar with Express is using

00:23:13,469 --> 00:23:18,029
qsq s is the query string parser that is

00:23:16,289 --> 00:23:19,769
used by request that is used by Express

00:23:18,029 --> 00:23:21,899
it's basically the tool that is being

00:23:19,769 --> 00:23:24,029
used for parsing career strings and it's

00:23:21,899 --> 00:23:25,589
very convenient it takes if you parse

00:23:24,029 --> 00:23:27,330
this type of string you would get an

00:23:25,589 --> 00:23:29,969
array that says we're sort of an object

00:23:27,330 --> 00:23:31,380
that has an a field and a B field but if

00:23:29,969 --> 00:23:33,960
you do this you

00:23:31,380 --> 00:23:36,539
have a twice then it needs to somehow

00:23:33,960 --> 00:23:39,360
model that and what it would do is give

00:23:36,539 --> 00:23:41,760
you an array similarly if you did a

00:23:39,360 --> 00:23:44,039
square brackets something it would give

00:23:41,760 --> 00:23:46,559
you an array so convenience not a

00:23:44,039 --> 00:23:48,720
problem per se but what I've just shown

00:23:46,559 --> 00:23:52,710
here is a manipulation of type that

00:23:48,720 --> 00:23:55,080
might not be obvious if I go back to my

00:23:52,710 --> 00:23:57,179
vulnerabilities over here at the very

00:23:55,080 --> 00:24:00,200
top is probably the worst vulnerability

00:23:57,179 --> 00:24:03,450
of this application so dust j s is

00:24:00,200 --> 00:24:05,549
reasonably popular templating library

00:24:03,450 --> 00:24:07,020
created by linkedin used by paypal and

00:24:05,549 --> 00:24:08,940
many others i think it was one of the

00:24:07,020 --> 00:24:10,230
first to really do server-side rendering

00:24:08,940 --> 00:24:13,470
well i think they sort of made a lot of

00:24:10,230 --> 00:24:16,460
noise around that then and it has some

00:24:13,470 --> 00:24:21,059
conditions that it can run that emitted

00:24:16,460 --> 00:24:22,530
the need to check for for type there

00:24:21,059 --> 00:24:23,640
basically they did proper sanitization

00:24:22,530 --> 00:24:24,840
of all the different characters if you

00:24:23,640 --> 00:24:28,169
pass the string you couldn't really

00:24:24,840 --> 00:24:30,539
break out but if you passed a non string

00:24:28,169 --> 00:24:33,780
object it would skip the sanitization

00:24:30,539 --> 00:24:37,860
and some were down that stream was an

00:24:33,780 --> 00:24:40,100
evil lurking so what happened was that

00:24:37,860 --> 00:24:42,150
you know throughout this path if you

00:24:40,100 --> 00:24:43,710
provided the right string you could

00:24:42,150 --> 00:24:46,220
actually get the server to execute code

00:24:43,710 --> 00:24:49,080
and this was found on the PayPal website

00:24:46,220 --> 00:24:51,090
so to demonstrate this I'm going to show

00:24:49,080 --> 00:24:52,980
this on our new about page so we have a

00:24:51,090 --> 00:24:54,450
really good about page for the site

00:24:52,980 --> 00:24:56,610
today but we have an even better one

00:24:54,450 --> 00:25:00,780
coming you might not notice this but

00:24:56,610 --> 00:25:02,789
this is a mobile first design you can

00:25:00,780 --> 00:25:06,480
add device equals desktop to get the

00:25:02,789 --> 00:25:10,260
desktop version of it this is this is

00:25:06,480 --> 00:25:11,789
the extent of my CSS skills so so you

00:25:10,260 --> 00:25:12,870
know it's a very it's a very fancy one

00:25:11,789 --> 00:25:15,360
so there's a condition there in that

00:25:12,870 --> 00:25:18,750
dust yes template that says you know if

00:25:15,360 --> 00:25:20,669
desktop equals so let's play with this a

00:25:18,750 --> 00:25:22,559
little bit right so we have once again

00:25:20,669 --> 00:25:24,750
we'll go to our browser we'll do a

00:25:22,559 --> 00:25:27,480
little curl here to just you know

00:25:24,750 --> 00:25:29,100
request device equals desktop so we're

00:25:27,480 --> 00:25:31,919
asking for this for this string and

00:25:29,100 --> 00:25:35,340
we'll get our our little new awesome

00:25:31,919 --> 00:25:37,440
about page let's start playing with it a

00:25:35,340 --> 00:25:39,179
little bit so we can do you know it does

00:25:37,440 --> 00:25:41,570
two we can start first of all we can

00:25:39,179 --> 00:25:44,430
change the device string to be an array

00:25:41,570 --> 00:25:46,559
and that would in return

00:25:44,430 --> 00:25:48,870
it's gonna be a little bit hard to show

00:25:46,559 --> 00:25:51,720
it here oh sorry what did I do I'm just

00:25:48,870 --> 00:25:53,700
gonna run just to you might not see it

00:25:51,720 --> 00:25:55,110
but it'll basically return the mobile

00:25:53,700 --> 00:25:57,540
version of it because now it's no longer

00:25:55,110 --> 00:26:01,800
something that just equals desktop I can

00:25:57,540 --> 00:26:03,750
go on and try to play with that's three

00:26:01,800 --> 00:26:06,570
and what i'm doing here is i'm adding a

00:26:03,750 --> 00:26:08,550
quote a single quote so i'm breaking

00:26:06,570 --> 00:26:11,160
something here and if i do this

00:26:08,550 --> 00:26:13,080
OOP i get an error so this is a really

00:26:11,160 --> 00:26:14,309
good this is the type of flow that an

00:26:13,080 --> 00:26:15,540
attacker would go through they're trying

00:26:14,309 --> 00:26:17,370
to get something that is different

00:26:15,540 --> 00:26:18,780
something that might break and then you

00:26:17,370 --> 00:26:20,250
know there's there's a difference you

00:26:18,780 --> 00:26:23,700
know this this input was interpreted

00:26:20,250 --> 00:26:27,300
differently than the previous input you

00:26:23,700 --> 00:26:30,059
can go on to say maybe you know run some

00:26:27,300 --> 00:26:31,559
curl that takes that single quote and

00:26:30,059 --> 00:26:33,870
then add some javascript action -

00:26:31,559 --> 00:26:37,110
console dot log snake was here

00:26:33,870 --> 00:26:39,240
buh-buh-bah right I can run this this is

00:26:37,110 --> 00:26:41,100
really fancy and I got JavaScript to run

00:26:39,240 --> 00:26:42,480
on the server or I didn't you know I

00:26:41,100 --> 00:26:43,920
don't really have access to the console

00:26:42,480 --> 00:26:45,300
log of the server side and all I've done

00:26:43,920 --> 00:26:47,610
is leave a footprint you know that's

00:26:45,300 --> 00:26:48,690
really that's not very good as an

00:26:47,610 --> 00:26:50,970
attacker what I would do is something

00:26:48,690 --> 00:26:55,100
like this I would stand up another

00:26:50,970 --> 00:26:58,350
server somewhere and put a little

00:26:55,100 --> 00:27:00,390
listening port over here and then I

00:26:58,350 --> 00:27:02,970
would do a slightly fancier command here

00:27:00,390 --> 00:27:04,679
which is I will require child process

00:27:02,970 --> 00:27:07,020
and then it would execute a command that

00:27:04,679 --> 00:27:09,990
maybe would curl the et Cie fast w d and

00:27:07,020 --> 00:27:14,190
send that over to my server so if I do

00:27:09,990 --> 00:27:15,610
this and over here we got theta C

00:27:14,190 --> 00:27:19,840
possibility

00:27:15,610 --> 00:27:23,710
not very good so so this is another

00:27:19,840 --> 00:27:27,820
variant of type manipulation and yeah

00:27:23,710 --> 00:27:30,580
not awesome so let's kind of wrap up

00:27:27,820 --> 00:27:32,289
right first of all don't go starting

00:27:30,580 --> 00:27:33,580
hacking website you know it's illegal in

00:27:32,289 --> 00:27:37,210
most countries it is definitely not

00:27:33,580 --> 00:27:38,409
polite in any but what you can do is you

00:27:37,210 --> 00:27:40,239
can go off and fork

00:27:38,409 --> 00:27:43,720
snake slash goof and play with that on

00:27:40,239 --> 00:27:46,330
your on your applications that's sort of

00:27:43,720 --> 00:27:48,009
there for you did it to play with

00:27:46,330 --> 00:27:49,720
we have JavaScript takeaways and then we

00:27:48,009 --> 00:27:51,039
have a dependency takeaways so from a

00:27:49,720 --> 00:27:52,450
JavaScript takeaways we talked about

00:27:51,039 --> 00:27:54,009
just a set of these problems you know

00:27:52,450 --> 00:27:56,190
I've got a 50 minute version of this

00:27:54,009 --> 00:27:58,809
story that sort of a exploits a few more

00:27:56,190 --> 00:28:00,669
but you should be wearing coding so we

00:27:58,809 --> 00:28:03,639
talked about those be wary of long

00:28:00,669 --> 00:28:05,230
running algorithms and then think about

00:28:03,639 --> 00:28:06,609
type manipulation type manipulation is a

00:28:05,230 --> 00:28:08,230
whole play go into its own it's an

00:28:06,609 --> 00:28:09,850
attack vector there are different types

00:28:08,230 --> 00:28:13,330
of vulnerabilities that would be

00:28:09,850 --> 00:28:15,279
manipulated by a type manipulation the

00:28:13,330 --> 00:28:16,929
second thing is that keep in mind that

00:28:15,279 --> 00:28:19,179
all of these vulnerabilities existed in

00:28:16,929 --> 00:28:21,940
my system without me writing any of them

00:28:19,179 --> 00:28:25,090
I just used libraries well-known popular

00:28:21,940 --> 00:28:27,700
libraries that had a bug libraries have

00:28:25,090 --> 00:28:28,869
bugs it happens everybody has bugs and

00:28:27,700 --> 00:28:30,639
those bugs were actually fixed all of

00:28:28,869 --> 00:28:33,879
these libraries may be marked as one

00:28:30,639 --> 00:28:35,919
that's not yet fixed has had fixes to

00:28:33,879 --> 00:28:37,739
these vulnerabilities but how would you

00:28:35,919 --> 00:28:40,330
know about it you need to know

00:28:37,739 --> 00:28:41,529
explicitly look to see if those

00:28:40,330 --> 00:28:43,450
libraries have vulnerabilities the

00:28:41,529 --> 00:28:45,159
default action is you don't you just use

00:28:43,450 --> 00:28:46,210
this library and it just works and you

00:28:45,159 --> 00:28:47,710
forget all about it

00:28:46,210 --> 00:28:50,289
so the first thing you want to do is you

00:28:47,710 --> 00:28:51,460
want to find to these vulnerabilities so

00:28:50,289 --> 00:28:52,899
we've shown how you can do this with

00:28:51,460 --> 00:28:54,669
snake or at least we've shown a rapport

00:28:52,899 --> 00:28:57,489
with snake I'm biased but I think it's

00:28:54,669 --> 00:28:58,299
awesome and you should use it just this

00:28:57,489 --> 00:29:00,580
last week

00:28:58,299 --> 00:29:02,139
Microsoft sonar for just just for

00:29:00,580 --> 00:29:03,309
front-end JavaScript libraries the

00:29:02,139 --> 00:29:05,259
jquery's of the world and all of that

00:29:03,309 --> 00:29:06,940
has introduced toner it's like a linking

00:29:05,259 --> 00:29:08,409
tool that they just launched that has a

00:29:06,940 --> 00:29:10,090
bunch of capabilities including the

00:29:08,409 --> 00:29:11,830
ability to test for vulnerable libraries

00:29:10,090 --> 00:29:13,179
actually uses the sneak database in the

00:29:11,830 --> 00:29:14,889
background it's just for the front-end

00:29:13,179 --> 00:29:16,450
libraries so it wouldn't find marked and

00:29:14,889 --> 00:29:19,330
the likes but it would find cross-site

00:29:16,450 --> 00:29:21,309
scripting in in jQuery some flaws in

00:29:19,330 --> 00:29:23,590
angular in wrong versions etc so you

00:29:21,309 --> 00:29:26,499
should use it and then also actually

00:29:23,590 --> 00:29:28,309
last week lighthouse in chrome dev tool

00:29:26,499 --> 00:29:30,710
that was mentioned this morning

00:29:28,309 --> 00:29:33,110
so lighthouses Google's auditing tool

00:29:30,710 --> 00:29:35,720
and it's now integrated into chrome dev

00:29:33,110 --> 00:29:37,460
tools and in Chrome Canary this type of

00:29:35,720 --> 00:29:38,840
test is already embedded into it so

00:29:37,460 --> 00:29:40,789
lighthouse independently and in Chrome

00:29:38,840 --> 00:29:42,950
Canary and soon in chrome itself it

00:29:40,789 --> 00:29:45,740
would also test for vulnerable libraries

00:29:42,950 --> 00:29:47,900
this is only for the front-end libraries

00:29:45,740 --> 00:29:49,010
so I'm really really happy this is

00:29:47,900 --> 00:29:50,120
happening we're working with them to

00:29:49,010 --> 00:29:52,669
make it happen they're so using our

00:29:50,120 --> 00:29:55,039
database for it but you know don't stop

00:29:52,669 --> 00:29:56,809
here once you've found them you want to

00:29:55,039 --> 00:29:59,780
fix these vulnerabilities the easiest

00:29:56,809 --> 00:30:01,220
way to fix them is to upgrade so many of

00:29:59,780 --> 00:30:05,240
them would have an upgrade so try to do

00:30:01,220 --> 00:30:06,890
that a little bit over here if you

00:30:05,240 --> 00:30:09,049
cannot for a snake specifically we have

00:30:06,890 --> 00:30:10,700
patches you can consider done' pitch too

00:30:09,049 --> 00:30:12,289
much here you can explore those after

00:30:10,700 --> 00:30:14,330
that could patch the vulnerabilities or

00:30:12,289 --> 00:30:16,070
sort of help you open these fix for

00:30:14,330 --> 00:30:17,570
requests automatics that just sort of

00:30:16,070 --> 00:30:21,500
give you the minimum upgrade necessary

00:30:17,570 --> 00:30:22,820
kind of plug aside the once you've found

00:30:21,500 --> 00:30:24,289
and you fix the issues that you want you

00:30:22,820 --> 00:30:26,690
want you stayed that way you want to

00:30:24,289 --> 00:30:27,830
stable mobility free so the next thing

00:30:26,690 --> 00:30:29,480
you want to do is you want to prevent

00:30:27,830 --> 00:30:32,000
the addition of new vulnerable libraries

00:30:29,480 --> 00:30:33,799
you can do this via breaking the build

00:30:32,000 --> 00:30:35,030
when there's a new vulnerable library

00:30:33,799 --> 00:30:36,890
with the tool of choice that you want

00:30:35,030 --> 00:30:39,559
for doing that finds around that same

00:30:36,890 --> 00:30:41,210
find action but in your build or you can

00:30:39,559 --> 00:30:43,010
do it through a pull request test which

00:30:41,210 --> 00:30:44,419
is a little bit more refined it's just

00:30:43,010 --> 00:30:46,280
tests whether this for requests

00:30:44,419 --> 00:30:49,130
specifically has introduced a new

00:30:46,280 --> 00:30:50,809
vulnerable library and then lastly this

00:30:49,130 --> 00:30:53,570
is where quality analogy maybe breaks

00:30:50,809 --> 00:30:55,039
you have to be alert to newly disclosed

00:30:53,570 --> 00:30:57,110
owner abilities Equifax was just

00:30:55,039 --> 00:30:59,510
breached because a new vulnerability in

00:30:57,110 --> 00:31:01,970
a library that we're using struts to in

00:30:59,510 --> 00:31:03,770
Java had a remote command execution and

00:31:01,970 --> 00:31:05,419
they did not know about it quickly

00:31:03,770 --> 00:31:07,580
enough they do not fix it quickly enough

00:31:05,419 --> 00:31:09,110
so think about how would you find out

00:31:07,580 --> 00:31:10,730
about these vulnerabilities and how

00:31:09,110 --> 00:31:13,340
would you be equipped to fix them and

00:31:10,730 --> 00:31:15,230
address them quickly before the attacker

00:31:13,340 --> 00:31:18,409
has come along and exploit that

00:31:15,230 --> 00:31:20,870
vulnerability so that's it for me in jsn

00:31:18,409 --> 00:31:23,750
npm are awesome but please enjoy them

00:31:20,870 --> 00:31:25,810
responsibly thank you

00:31:23,750 --> 00:31:25,810

YouTube URL: https://www.youtube.com/watch?v=7bPo2_-FMm8


