Title: Understanding modern CSS layouts with Firefox DevTools - by HJ Chen | Mozilla Developer Roadshow EU
Publication date: 2019-10-14
Playlist: Mozilla Developer Roadshow 2019 - Europe
Description: 
	We often think of DevTools for debugging purposes, but in recent years, Firefox DevTools have become more than that. The newer layout properties like Flexbox and Grid introduce behaviours that might seem confusing at first, but Firefox DevTools provides features that can help us better understand how the browser interprets the CSS values we assign.

Hui Jing Chen is a self-taught designer and developer living in Singapore, with an inordinate love for CSS, as evidenced by her blog, that is mostly about CSS, and her tweets, which are largely about typography and the web.
Captions: 
	00:00:04,850 --> 00:00:10,639
hi um sorry for the technical

00:00:07,760 --> 00:00:12,590
difficulties thank you all for coming

00:00:10,639 --> 00:00:14,299
out in this evening and because we're

00:00:12,590 --> 00:00:16,340
gonna have a packed lineup I'm gonna get

00:00:14,299 --> 00:00:18,250
straight into things so today I'm gonna

00:00:16,340 --> 00:00:20,990
be sharing with all of you some of my

00:00:18,250 --> 00:00:23,000
favorite things about the Firefox dev

00:00:20,990 --> 00:00:25,130
tools and how they've helped me better

00:00:23,000 --> 00:00:28,640
understand some of the more powerful new

00:00:25,130 --> 00:00:29,779
CSS features and layout techniques so

00:00:28,640 --> 00:00:31,820
today we're going to be covering like

00:00:29,779 --> 00:00:34,520
what I consider to be the three

00:00:31,820 --> 00:00:37,039
cornerstones of modern CSS layouts which

00:00:34,520 --> 00:00:39,350
is flexbox grid and the box alignment

00:00:37,039 --> 00:00:42,680
properties so I want to start with the

00:00:39,350 --> 00:00:45,410
first thing flexbox the layout model

00:00:42,680 --> 00:00:47,510
which I say I feel that it's the layout

00:00:45,410 --> 00:00:51,469
model where nobody knows the size of

00:00:47,510 --> 00:00:53,899
anything and so right now Firefox is the

00:00:51,469 --> 00:00:56,180
only browser with a flex box inspector

00:00:53,899 --> 00:01:00,649
like Ali mentioned earlier and we can

00:00:56,180 --> 00:01:01,820
locate this in this layouts tab and you

00:01:00,649 --> 00:01:04,550
can toggle it with this nice little

00:01:01,820 --> 00:01:07,280
toggle here or you can choose to click

00:01:04,550 --> 00:01:09,290
on this tag thing in the inspector so

00:01:07,280 --> 00:01:11,390
what this does is that it shows you the

00:01:09,290 --> 00:01:13,820
outline of each of your Flex items and

00:01:11,390 --> 00:01:15,590
if there's any free space available it's

00:01:13,820 --> 00:01:18,229
gonna be this texture thing here

00:01:15,590 --> 00:01:20,210
it also tells you other things so I hope

00:01:18,229 --> 00:01:23,150
this is big enough it tells you your

00:01:20,210 --> 00:01:26,840
Flex direction for right now it's row

00:01:23,150 --> 00:01:29,119
and the wrap status which is nowrap but

00:01:26,840 --> 00:01:31,159
the most important thing about flexbox

00:01:29,119 --> 00:01:33,470
inspector is it actually tells you what

00:01:31,159 --> 00:01:35,930
the browser does when it grows or

00:01:33,470 --> 00:01:41,659
shrinks your items I'm gonna go into

00:01:35,930 --> 00:01:45,220
detail a bit later so the specification

00:01:41,659 --> 00:01:51,049
sort of recommends that we use the

00:01:45,220 --> 00:01:54,590
keyword properties of on your Flex items

00:01:51,049 --> 00:01:58,490
because they correctly reset the other

00:01:54,590 --> 00:02:00,920
three properties which the shorthand

00:01:58,490 --> 00:02:04,520
actually covers which is flex go Flex

00:02:00,920 --> 00:02:06,680
shrink and a Flex basis the sizing of

00:02:04,520 --> 00:02:08,990
Flex items does depend on a number of

00:02:06,680 --> 00:02:11,990
factors so we've got things like the

00:02:08,990 --> 00:02:13,880
amount of free space available we've got

00:02:11,990 --> 00:02:16,310
the amount of content within your Flex

00:02:13,880 --> 00:02:18,650
item and we've also got the starting

00:02:16,310 --> 00:02:20,390
with of your Flex item

00:02:18,650 --> 00:02:24,140
and the exact algorithm that calculates

00:02:20,390 --> 00:02:26,120
the Flex item size is kind of

00:02:24,140 --> 00:02:27,769
complicated but it is outlined in the

00:02:26,120 --> 00:02:30,110
specification if you're really curious

00:02:27,769 --> 00:02:31,790
to find out how that goes it's kind of a

00:02:30,110 --> 00:02:35,510
long section so I'm not gonna talk about

00:02:31,790 --> 00:02:38,450
it but I feel that the key to figuring

00:02:35,510 --> 00:02:42,860
out flexbox is understanding what the

00:02:38,450 --> 00:02:45,049
Flex basis property actually does so for

00:02:42,860 --> 00:02:46,700
example if I put a fixed value of 100

00:02:45,049 --> 00:02:49,190
pixels as a Flex basis I think

00:02:46,700 --> 00:02:51,019
intuitively a lot of developers would

00:02:49,190 --> 00:02:53,390
think okay I wanna I'm probably going to

00:02:51,019 --> 00:02:56,060
get a box that is of a size of 100

00:02:53,390 --> 00:02:58,579
pixels because we are very used to

00:02:56,060 --> 00:03:01,640
having absolute control over our sizing

00:02:58,579 --> 00:03:02,870
instructions but flex basis behaves a

00:03:01,640 --> 00:03:06,349
bit differently in that it's the

00:03:02,870 --> 00:03:08,540
starting point of which the size of your

00:03:06,349 --> 00:03:10,849
box is calculated so the key here is

00:03:08,540 --> 00:03:12,769
it's the starting point because if your

00:03:10,849 --> 00:03:16,129
Flex items are allowed to grow or shrink

00:03:12,769 --> 00:03:18,019
odds are the final size is not going to

00:03:16,129 --> 00:03:20,299
be a hundred pixels so there's just

00:03:18,019 --> 00:03:24,169
something to keep in mind so I'm using a

00:03:20,299 --> 00:03:28,069
very simplified example to illustrate

00:03:24,169 --> 00:03:30,470
this point so here under flexbox basics

00:03:28,069 --> 00:03:35,120
we have 2 flex containers I'm gonna

00:03:30,470 --> 00:03:37,730
highlight them so two flex containers

00:03:35,120 --> 00:03:41,389
they have the same properties on them in

00:03:37,730 --> 00:03:44,030
that only the parent has display flex on

00:03:41,389 --> 00:03:47,120
it each of the children have nothing set

00:03:44,030 --> 00:03:49,129
on it so it's a very simple example

00:03:47,120 --> 00:03:52,160
you just put display flex on a container

00:03:49,129 --> 00:03:55,010
all its children become flex items so

00:03:52,160 --> 00:03:58,340
these flex children have a default value

00:03:55,010 --> 00:04:01,760
which is it has a flex grow factor of 0

00:03:58,340 --> 00:04:04,790
shrink factor of 1 and a basis of auto

00:04:01,760 --> 00:04:06,949
so what this means is that items are not

00:04:04,790 --> 00:04:09,019
gonna grow beyond their starting with so

00:04:06,949 --> 00:04:11,180
even if I have a lot of space it's not

00:04:09,019 --> 00:04:13,849
going to grow because the flex grow

00:04:11,180 --> 00:04:16,220
factor is zero so no growth but the

00:04:13,849 --> 00:04:19,130
moment there is an end of space it's

00:04:16,220 --> 00:04:21,349
gonna all three items if they can

00:04:19,130 --> 00:04:25,000
they're gonna start shrinking at the

00:04:21,349 --> 00:04:27,169
same rate so the reason why if you see

00:04:25,000 --> 00:04:27,919
when I started out with something like

00:04:27,169 --> 00:04:31,190
this

00:04:27,919 --> 00:04:32,510
the reason why even though the amount of

00:04:31,190 --> 00:04:34,460
count the content

00:04:32,510 --> 00:04:37,490
then the second columns are exactly the

00:04:34,460 --> 00:04:39,770
same just as this is a sentence but they

00:04:37,490 --> 00:04:42,230
behave differently because for the

00:04:39,770 --> 00:04:44,810
second container the size of this is a

00:04:42,230 --> 00:04:47,810
sentence is impacted by its it's sibling

00:04:44,810 --> 00:04:50,780
who has a lot of space this sibling is

00:04:47,810 --> 00:04:53,770
causing the shrink to kick in much

00:04:50,780 --> 00:04:57,110
earlier because at about this point

00:04:53,770 --> 00:04:58,670
there's no more room so everybody is

00:04:57,110 --> 00:05:00,170
supposed to start to shrink at this

00:04:58,670 --> 00:05:02,270
point but your first container still

00:05:00,170 --> 00:05:05,090
Scott still has lots of room so like no

00:05:02,270 --> 00:05:07,670
I'm not gonna shrink and the browser

00:05:05,090 --> 00:05:09,590
doesn't break words so word is stuck

00:05:07,670 --> 00:05:13,520
word can't go anywhere it's just going

00:05:09,590 --> 00:05:15,470
yeah so so that's the reason why even

00:05:13,520 --> 00:05:17,930
though you have exactly the same content

00:05:15,470 --> 00:05:20,780
and if you have two separate flex items

00:05:17,930 --> 00:05:23,240
they may or may not be the same size and

00:05:20,780 --> 00:05:26,210
this is the reason for that another

00:05:23,240 --> 00:05:27,920
thing that I want to highlight that I

00:05:26,210 --> 00:05:30,770
think is very important to understand is

00:05:27,920 --> 00:05:34,310
the difference between a flex basis

00:05:30,770 --> 00:05:37,790
value of auto and a Flex basis value of

00:05:34,310 --> 00:05:41,270
zero so I'm gonna bring your attention

00:05:37,790 --> 00:05:43,700
to the next example where they both of

00:05:41,270 --> 00:05:45,170
these Flex containers have exactly the

00:05:43,700 --> 00:05:50,240
same content so none of this funny

00:05:45,170 --> 00:05:55,580
things happening above and again there

00:05:50,240 --> 00:05:58,490
so these these items are now set to be

00:05:55,580 --> 00:06:03,140
able to both grow and shrink so I'm

00:05:58,490 --> 00:06:06,380
gonna highlight this if you look I've

00:06:03,140 --> 00:06:11,750
now set the Flex grow factor of the

00:06:06,380 --> 00:06:14,300
first item to one the second has a grow

00:06:11,750 --> 00:06:20,330
factor of two and the last one has a

00:06:14,300 --> 00:06:23,540
growth factor of zero and what's gonna

00:06:20,330 --> 00:06:26,090
happen here is that the first set has

00:06:23,540 --> 00:06:29,720
Flex basis set to auto but the second

00:06:26,090 --> 00:06:31,370
set has Flex basis set to zero and the

00:06:29,720 --> 00:06:33,470
difference between the two is more

00:06:31,370 --> 00:06:35,000
evident is this is when the Flex bucket

00:06:33,470 --> 00:06:37,280
inspector comes in really handy because

00:06:35,000 --> 00:06:39,200
it tells you what's happening for the

00:06:37,280 --> 00:06:41,270
sizing so I'm gonna pull this a bit

00:06:39,200 --> 00:06:43,970
larger so there's more growth and you

00:06:41,270 --> 00:06:46,249
can see the inspector responds in

00:06:43,970 --> 00:06:48,309
real-time which is great so

00:06:46,249 --> 00:06:51,289
when you set the Flex basis to auto

00:06:48,309 --> 00:06:53,269
content size is taken into account in

00:06:51,289 --> 00:06:54,769
the starting with and the browser tells

00:06:53,269 --> 00:06:58,339
you that it tells you that okay this is

00:06:54,769 --> 00:07:00,379
the starting content size of give me one

00:06:58,339 --> 00:07:03,739
unit of free space full stop

00:07:00,379 --> 00:07:06,349
so that's about like 246 then then it

00:07:03,739 --> 00:07:09,799
has grown it has grown because your I

00:07:06,349 --> 00:07:12,169
set a flex growth factor and there's a

00:07:09,799 --> 00:07:14,149
lot of space so all the extra space has

00:07:12,169 --> 00:07:17,599
been allocated and if you look at the

00:07:14,149 --> 00:07:18,739
space here it says it's about 68 for the

00:07:17,599 --> 00:07:22,159
second item

00:07:18,739 --> 00:07:24,919
it's about 136 so the amount of free

00:07:22,159 --> 00:07:27,919
space that has been distributed is in

00:07:24,919 --> 00:07:29,839
accordance to the Flex grow factor but

00:07:27,919 --> 00:07:31,369
it's not the absolute size so if you

00:07:29,839 --> 00:07:33,199
look at the final size which the browser

00:07:31,369 --> 00:07:35,679
just tell you what the final size is I'm

00:07:33,199 --> 00:07:39,769
going back to the first one it's about

00:07:35,679 --> 00:07:42,409
314 and the second one is about 394 so

00:07:39,769 --> 00:07:45,349
the size of the second item is not

00:07:42,409 --> 00:07:47,269
double of the first one it is that the

00:07:45,349 --> 00:07:49,909
free space that is given to it it's

00:07:47,269 --> 00:07:53,329
double of the first one that's when you

00:07:49,909 --> 00:07:55,939
set the Flex basis to auto now in the

00:07:53,329 --> 00:07:57,889
event that you do want your Flex item

00:07:55,939 --> 00:08:00,110
you want one of them to be double

00:07:57,889 --> 00:08:02,539
exactly double of the other one that's

00:08:00,110 --> 00:08:05,539
when you use a Flex basis of zero and

00:08:02,539 --> 00:08:07,489
the difference here is that when you set

00:08:05,539 --> 00:08:10,429
the Flex basis to zero the browser

00:08:07,489 --> 00:08:11,929
ignores the content size and again the

00:08:10,429 --> 00:08:14,949
Flex box inspector is going to show you

00:08:11,929 --> 00:08:18,169
this so with a Flex basis of zero

00:08:14,949 --> 00:08:21,799
content size is zero so any available

00:08:18,169 --> 00:08:24,439
free space is immediately put to is used

00:08:21,799 --> 00:08:26,449
for distribution so the total amount of

00:08:24,439 --> 00:08:28,429
free space available in the second

00:08:26,449 --> 00:08:30,979
container is actually the total width of

00:08:28,429 --> 00:08:35,240
the container you have to mine us off

00:08:30,979 --> 00:08:37,430
this bit which kind of behaves like in

00:08:35,240 --> 00:08:39,259
the first example above the word that's

00:08:37,430 --> 00:08:41,360
the minimum content the browser can't

00:08:39,259 --> 00:08:44,509
take away any more space from from the

00:08:41,360 --> 00:08:46,730
last column because again browsers by

00:08:44,509 --> 00:08:49,370
default are not gonna break words so so

00:08:46,730 --> 00:08:51,829
it's gonna whatever minimum content

00:08:49,370 --> 00:08:54,800
width is here it's gonna - off that and

00:08:51,829 --> 00:08:57,410
that is considered free space so that

00:08:54,800 --> 00:09:00,140
free space is going to be allocated to

00:08:57,410 --> 00:09:02,450
the two previous items

00:09:00,140 --> 00:09:05,000
the ratio of one to two because I set

00:09:02,450 --> 00:09:06,050
the grow factor as one and two

00:09:05,000 --> 00:09:09,980
respectively

00:09:06,050 --> 00:09:13,750
so if we inspect the size it has grown

00:09:09,980 --> 00:09:16,760
about 311 pixels and the final size is

00:09:13,750 --> 00:09:19,010
311 pixels and if you look at the second

00:09:16,760 --> 00:09:21,260
one it's about 622 so it's exactly

00:09:19,010 --> 00:09:22,940
double so if that's the effect that

00:09:21,260 --> 00:09:24,950
you're looking for then you'd want to

00:09:22,940 --> 00:09:27,440
set your Flex basis to zero and that's

00:09:24,950 --> 00:09:29,960
the key difference I think when a lot of

00:09:27,440 --> 00:09:32,990
times because Flex basis of auto is the

00:09:29,960 --> 00:09:35,540
initial value that the browser's set on

00:09:32,990 --> 00:09:37,640
your Flex items if you don't do anything

00:09:35,540 --> 00:09:42,440
to it so if you just set a flex Gro

00:09:37,640 --> 00:09:43,580
factor of like units and then you a lot

00:09:42,440 --> 00:09:47,420
of people get confused because they're

00:09:43,580 --> 00:09:51,110
like hey I set Flex girl factor of 1 on

00:09:47,420 --> 00:09:54,230
item a and the Flex Go factor of 3 on

00:09:51,110 --> 00:09:57,490
item B but it's not three times of that

00:09:54,230 --> 00:10:00,380
size that's pretty much the reason why

00:09:57,490 --> 00:10:03,110
another another useful feature of

00:10:00,380 --> 00:10:05,690
flexbox I think a lot of people utilize

00:10:03,110 --> 00:10:09,830
is the ability to use box alignment

00:10:05,690 --> 00:10:11,810
properties because it used to be that it

00:10:09,830 --> 00:10:14,180
was really hard to align things in a

00:10:11,810 --> 00:10:18,200
vertical axis with box alignment it's a

00:10:14,180 --> 00:10:20,090
lot easier and so what the flex box

00:10:18,200 --> 00:10:22,130
inspector can show you is it shows you

00:10:20,090 --> 00:10:24,350
what happens with the available space

00:10:22,130 --> 00:10:26,570
when you when you trigger it because

00:10:24,350 --> 00:10:30,890
there's this different texture and

00:10:26,570 --> 00:10:32,630
everything so box alignment properties

00:10:30,890 --> 00:10:35,960
were actually meant to be used across

00:10:32,630 --> 00:10:39,800
all the layout models for now it's only

00:10:35,960 --> 00:10:42,590
supported for flex and grid but I think

00:10:39,800 --> 00:10:43,790
in the I'm not gonna be I'm not gonna be

00:10:42,590 --> 00:10:46,940
ambitious here I'm going to say in the

00:10:43,790 --> 00:10:49,070
far future you could potentially be able

00:10:46,940 --> 00:10:51,260
to use these box alignment properties on

00:10:49,070 --> 00:10:53,780
the older layout models like in like

00:10:51,260 --> 00:10:57,260
display block as well so fingers crossed

00:10:53,780 --> 00:10:59,840
that that gets that happens I don't know

00:10:57,260 --> 00:11:03,440
before my grandchildren are born or

00:10:59,840 --> 00:11:06,140
something never mind moving on so when

00:11:03,440 --> 00:11:09,050
we use the different box alignment

00:11:06,140 --> 00:11:10,370
properties we have options so the first

00:11:09,050 --> 00:11:12,470
option I'm going to talk about is called

00:11:10,370 --> 00:11:13,970
justify content so there are a lot of

00:11:12,470 --> 00:11:16,099
values as you can see

00:11:13,970 --> 00:11:20,089
the good thing about dev tools is that

00:11:16,099 --> 00:11:22,069
if you can't remember the any keywords

00:11:20,089 --> 00:11:25,099
there's autocomplete and can show you

00:11:22,069 --> 00:11:27,409
everything that's available so they are

00:11:25,099 --> 00:11:29,209
like categories of these alignment

00:11:27,409 --> 00:11:31,579
properties so the first one I'm gonna

00:11:29,209 --> 00:11:34,249
cover are the so called positional ones

00:11:31,579 --> 00:11:36,769
of like start center and end so these

00:11:34,249 --> 00:11:39,739
are fairly straightforward in that they

00:11:36,769 --> 00:11:42,259
kind of shift all your Flex items along

00:11:39,739 --> 00:11:44,299
the main axis so the main axis is the

00:11:42,259 --> 00:11:46,549
direction which the Flex items are laid

00:11:44,299 --> 00:11:50,089
out and we also have distribution

00:11:46,549 --> 00:11:52,819
keywords so of space around between an

00:11:50,089 --> 00:11:54,409
evenly so what these do is that they

00:11:52,819 --> 00:11:56,749
allow you to disperse the space between

00:11:54,409 --> 00:11:58,819
your Flex items like different width

00:11:56,749 --> 00:12:03,619
depending on the result that you're

00:11:58,819 --> 00:12:05,929
looking for and for flex box though you

00:12:03,619 --> 00:12:07,639
can also change the direction of the

00:12:05,929 --> 00:12:10,279
main axis so right now the default is

00:12:07,639 --> 00:12:18,189
row but I can also change it to column

00:12:10,279 --> 00:12:23,589
and what this does is that exciting

00:12:18,189 --> 00:12:23,589
can't spell height always it so hard

00:12:24,669 --> 00:12:31,699
so what this does is that it sort of

00:12:27,289 --> 00:12:33,439
just flips the main axis to instead of

00:12:31,699 --> 00:12:37,729
being horizontal left to right it

00:12:33,439 --> 00:12:40,970
becomes vertical top to bottom so your

00:12:37,729 --> 00:12:44,449
but your alignment properties still

00:12:40,970 --> 00:12:46,789
function similarly in that it still goes

00:12:44,449 --> 00:12:48,229
according to the main axis direction but

00:12:46,789 --> 00:12:50,119
you've changed the main axis direction

00:12:48,229 --> 00:12:53,689
that's why it's kind of different so

00:12:50,119 --> 00:12:55,729
that's one way to something to remember

00:12:53,689 --> 00:12:57,349
if your if your ever changing flex

00:12:55,729 --> 00:13:02,929
directions and you still want to align

00:12:57,349 --> 00:13:04,789
along certain axis with a together with

00:13:02,929 --> 00:13:07,429
the main axis the other term we use for

00:13:04,789 --> 00:13:09,919
flex is cross axis which is the axis

00:13:07,429 --> 00:13:11,989
that is perpendicular to the main axis I

00:13:09,919 --> 00:13:16,129
did not make this up it's in the spec so

00:13:11,989 --> 00:13:20,479
English so by default I'm gonna turn

00:13:16,129 --> 00:13:24,799
these back by default all items are

00:13:20,479 --> 00:13:27,670
stretched along the cross access to the

00:13:24,799 --> 00:13:30,010
full height of the Flex line so

00:13:27,670 --> 00:13:31,870
my items here actually these are not

00:13:30,010 --> 00:13:34,870
their original heights it's that when I

00:13:31,870 --> 00:13:36,850
put a display flex on the parent the

00:13:34,870 --> 00:13:39,220
default value for flex items is

00:13:36,850 --> 00:13:42,460
stretched along the cross axis but the

00:13:39,220 --> 00:13:45,520
moment I put an align items or an align

00:13:42,460 --> 00:13:47,200
self property to say maybe end they

00:13:45,520 --> 00:13:49,240
revert back to their original height so

00:13:47,200 --> 00:13:51,310
so this is actually I have a lot of flex

00:13:49,240 --> 00:13:54,460
items of different sizes different font

00:13:51,310 --> 00:13:58,720
sizes as well and one of the interesting

00:13:54,460 --> 00:14:00,760
values for align items is actually

00:13:58,720 --> 00:14:02,950
something called baseline because if you

00:14:00,760 --> 00:14:05,050
notice I have different font sizes and

00:14:02,950 --> 00:14:08,530
then I have different alignments within

00:14:05,050 --> 00:14:10,180
each item so if you happen to have a

00:14:08,530 --> 00:14:12,490
design and I'm probably this probably

00:14:10,180 --> 00:14:14,290
more directed sort of design if you have

00:14:12,490 --> 00:14:16,180
like different flex items and you

00:14:14,290 --> 00:14:18,100
actually want the text to relate to each

00:14:16,180 --> 00:14:19,690
other maybe it's a sentence or something

00:14:18,100 --> 00:14:22,180
right if you have this sort of a

00:14:19,690 --> 00:14:26,080
mountainous layout people are gonna like

00:14:22,180 --> 00:14:27,610
I can't read this very well so if you do

00:14:26,080 --> 00:14:30,010
want that sort of an effect you can put

00:14:27,610 --> 00:14:31,480
baseline to let all the the the baseline

00:14:30,010 --> 00:14:33,220
of all the all the text just line up

00:14:31,480 --> 00:14:35,280
with each other and makes it easier to

00:14:33,220 --> 00:14:37,000
read so that's that's a potential

00:14:35,280 --> 00:14:40,030
suggestion if you have an use case

00:14:37,000 --> 00:14:45,070
that's something like that the last one

00:14:40,030 --> 00:14:48,670
that applies in flex is a line content

00:14:45,070 --> 00:14:50,770
so sometimes you have a height of let's

00:14:48,670 --> 00:14:52,750
make it big so sometimes you have a

00:14:50,770 --> 00:14:54,670
container that's like way taller than

00:14:52,750 --> 00:14:56,680
the height of your Flex items so you

00:14:54,670 --> 00:14:59,860
have this like weird whitespace thing

00:14:56,680 --> 00:15:01,210
that you may not want the property that

00:14:59,860 --> 00:15:04,360
you use to kind of pack everything

00:15:01,210 --> 00:15:07,000
together and maybe a lot move them along

00:15:04,360 --> 00:15:09,310
the container is aligned content so like

00:15:07,000 --> 00:15:11,050
if I do the center it packs all of it

00:15:09,310 --> 00:15:12,550
together and then you can kind of shift

00:15:11,050 --> 00:15:14,680
it all the way to the top or all the way

00:15:12,550 --> 00:15:16,390
to the bottom so these are the alignment

00:15:14,680 --> 00:15:18,910
properties that make it much easier to

00:15:16,390 --> 00:15:22,690
sort of arrange items within the

00:15:18,910 --> 00:15:24,490
container so that's it for flex I've the

00:15:22,690 --> 00:15:27,490
rest of the time I'm gonna have to cover

00:15:24,490 --> 00:15:30,420
is great because I can't talk about more

00:15:27,490 --> 00:15:33,040
than CSS without talking about grid so

00:15:30,420 --> 00:15:35,920
curious just find out how many people

00:15:33,040 --> 00:15:37,600
actually have used grid like you don't

00:15:35,920 --> 00:15:41,080
have to like great this is a much better

00:15:37,600 --> 00:15:41,560
room than no no no off the record

00:15:41,080 --> 00:15:44,800
cancel

00:15:41,560 --> 00:15:47,170
anyways but whether you're starting out

00:15:44,800 --> 00:15:50,259
with grid or you're already using it in

00:15:47,170 --> 00:15:52,360
production Firefox's grid inspector is

00:15:50,259 --> 00:15:54,759
still the best tool available at the

00:15:52,360 --> 00:15:57,189
moment and in fact I think they were the

00:15:54,759 --> 00:15:59,949
only browser that sort of shipped a very

00:15:57,189 --> 00:16:04,300
strong suite of great dev tools the

00:15:59,949 --> 00:16:06,399
moment grid came out right so the

00:16:04,300 --> 00:16:08,110
overlay can be toggled same thing you

00:16:06,399 --> 00:16:11,319
click on the tag or you go to the layout

00:16:08,110 --> 00:16:13,870
panel and I think what's nice about I

00:16:11,319 --> 00:16:16,740
can remember when this was supported but

00:16:13,870 --> 00:16:18,819
you can now sort of have multiple grid

00:16:16,740 --> 00:16:21,490
overlays on the page which is really

00:16:18,819 --> 00:16:23,680
useful if you have multiple grids on

00:16:21,490 --> 00:16:26,439
your page or if you're using nested

00:16:23,680 --> 00:16:28,120
grids and you want to see how it looks

00:16:26,439 --> 00:16:30,550
like how it aligns with the parent grid

00:16:28,120 --> 00:16:32,949
this is really useful and you can also

00:16:30,550 --> 00:16:34,209
change colors if Purple's not there this

00:16:32,949 --> 00:16:35,829
is a set of default color so if you

00:16:34,209 --> 00:16:37,600
don't like any of them you can change

00:16:35,829 --> 00:16:40,089
them so I think that's that's pretty

00:16:37,600 --> 00:16:42,040
nice what other things do we have we

00:16:40,089 --> 00:16:45,370
have the option to extend lines

00:16:42,040 --> 00:16:47,379
indefinitely which is nice when again

00:16:45,370 --> 00:16:50,500
you have like multiple grids and you

00:16:47,379 --> 00:16:52,990
especially if they're spread like top

00:16:50,500 --> 00:16:54,430
and bottom so extending the blinds

00:16:52,990 --> 00:16:56,079
infinitely is also a pretty useful

00:16:54,430 --> 00:16:58,990
feature I'm very glad that put that in

00:16:56,079 --> 00:17:01,930
and other options include displaying

00:16:58,990 --> 00:17:04,689
line numbers and every names which we

00:17:01,930 --> 00:17:07,620
will also cover later so the most basic

00:17:04,689 --> 00:17:12,520
usage of laying out things with grid is

00:17:07,620 --> 00:17:14,829
simply to set the parent to display grid

00:17:12,520 --> 00:17:17,110
and then you define like okay I'm on in

00:17:14,829 --> 00:17:21,299
this very simple example I have three

00:17:17,110 --> 00:17:24,100
columns of five MS two rows of five MS I

00:17:21,299 --> 00:17:26,169
sort of appreciate the syntax of grit

00:17:24,100 --> 00:17:29,140
because it's kind of visual because I

00:17:26,169 --> 00:17:31,390
can see three values means three columns

00:17:29,140 --> 00:17:36,730
and then two values means two rows and

00:17:31,390 --> 00:17:39,549
this is what we have and so the browser

00:17:36,730 --> 00:17:41,530
by default if we look at the markup here

00:17:39,549 --> 00:17:44,169
it's a great container and then I've got

00:17:41,530 --> 00:17:45,610
like six grid items in it so when I set

00:17:44,169 --> 00:17:47,470
and display grid the browser

00:17:45,610 --> 00:17:49,809
automatically is gonna place all these

00:17:47,470 --> 00:17:51,520
items in the grid using a very well

00:17:49,809 --> 00:17:54,520
thought-out algorithm and again it's

00:17:51,520 --> 00:17:54,960
defined in the spec long chunk of text

00:17:54,520 --> 00:17:57,060
if you

00:17:54,960 --> 00:17:59,700
interested in reading it but I mean

00:17:57,060 --> 00:18:01,290
things being placed one after another is

00:17:59,700 --> 00:18:04,050
behavior we're all very familiar with

00:18:01,290 --> 00:18:07,160
already what's special about great is

00:18:04,050 --> 00:18:09,570
how simple it is to manually place items

00:18:07,160 --> 00:18:11,520
anywhere on your grid in either

00:18:09,570 --> 00:18:16,700
dimension so I'm gonna take a look at

00:18:11,520 --> 00:18:20,100
the second grid turn the first one off

00:18:16,700 --> 00:18:22,290
so my favorite analogy to talk about

00:18:20,100 --> 00:18:24,120
manual placement in grid is placing

00:18:22,290 --> 00:18:27,240
pieces on a chess board so that's why

00:18:24,120 --> 00:18:29,550
this example looks like this so if you

00:18:27,240 --> 00:18:31,860
look at the mark I have a grid with

00:18:29,550 --> 00:18:36,210
three items in it so the three pawns are

00:18:31,860 --> 00:18:38,880
my three items and the property's used

00:18:36,210 --> 00:18:42,990
to place them our grid row and grid

00:18:38,880 --> 00:18:45,540
column so because this is a simple 3x3

00:18:42,990 --> 00:18:47,220
you could probably do without line

00:18:45,540 --> 00:18:49,920
numbers but if you happen to have a

00:18:47,220 --> 00:18:53,100
design which is more complex than this

00:18:49,920 --> 00:18:54,780
more you could have like maybe 15 20

00:18:53,100 --> 00:18:58,590
columns you're not gonna sit there and

00:18:54,780 --> 00:19:00,570
like 1 2 3 no you're not gonna do that

00:18:58,590 --> 00:19:03,180
so you wanna you want to have a a tool

00:19:00,570 --> 00:19:05,610
where you overlay and say okay I want my

00:19:03,180 --> 00:19:08,460
thing to be on column 13 and you see it

00:19:05,610 --> 00:19:10,620
in like yeah here 13 so that's where

00:19:08,460 --> 00:19:12,870
useful and Firefox is the only browser

00:19:10,620 --> 00:19:14,490
that has line numbers you think that

00:19:12,870 --> 00:19:16,020
it's a it's a feature that will come in

00:19:14,490 --> 00:19:19,410
like by default but turns out it's not

00:19:16,020 --> 00:19:23,160
and so that's that's pretty helpful to

00:19:19,410 --> 00:19:25,260
have line numbers what's I see less

00:19:23,160 --> 00:19:26,580
people using at the moment I think this

00:19:25,260 --> 00:19:30,930
is gonna pick up once more and more

00:19:26,580 --> 00:19:34,350
people realize it's grid area names so

00:19:30,930 --> 00:19:37,560
that example turn it on so same thing

00:19:34,350 --> 00:19:40,170
you can define columns and rows but then

00:19:37,560 --> 00:19:43,170
you can also name them like alpha

00:19:40,170 --> 00:19:45,120
numerically and I'm not very creative

00:19:43,170 --> 00:19:47,880
but I like to eat fruits so we've got

00:19:45,120 --> 00:19:50,160
apple banana and cherry so the syntax of

00:19:47,880 --> 00:19:53,520
how grid template areas works is that

00:19:50,160 --> 00:19:55,590
each lines supported each line

00:19:53,520 --> 00:19:58,200
surrounded with a code represents a grid

00:19:55,590 --> 00:20:00,870
row and then every value within the line

00:19:58,200 --> 00:20:03,740
is gonna make up a column so every line

00:20:00,870 --> 00:20:06,420
must have the same number of columns

00:20:03,740 --> 00:20:08,670
otherwise the whole thing is moot but

00:20:06,420 --> 00:20:11,250
when you've so

00:20:08,670 --> 00:20:13,440
in the grid in the dev tools it's sort

00:20:11,250 --> 00:20:15,060
of like flattens it out but in the cold

00:20:13,440 --> 00:20:18,120
what I would do is I wouldn't really

00:20:15,060 --> 00:20:19,920
align it as if the grid as how the grid

00:20:18,120 --> 00:20:23,220
looks like so in my code it kind of

00:20:19,920 --> 00:20:25,200
looks like how it does on the Patriot I

00:20:23,220 --> 00:20:29,580
personally find that visual comparison

00:20:25,200 --> 00:20:33,390
very useful and what I find useful for

00:20:29,580 --> 00:20:36,570
having using great area names is if you

00:20:33,390 --> 00:20:37,770
have a design that has maybe different

00:20:36,570 --> 00:20:39,600
lots of different components that you

00:20:37,770 --> 00:20:42,600
need to tweak at different breakpoints

00:20:39,600 --> 00:20:45,180
what it what what helps here is that you

00:20:42,600 --> 00:20:47,070
instead of having to tweak the positions

00:20:45,180 --> 00:20:49,830
of each of your individual grid items

00:20:47,070 --> 00:20:53,160
you do all your adjustments on the

00:20:49,830 --> 00:20:55,830
parent container itself by changing the

00:20:53,160 --> 00:20:57,720
by tweaking the positions on this grid

00:20:55,830 --> 00:20:59,790
template area so I've got an example

00:20:57,720 --> 00:21:04,410
here that's much better than apple

00:20:59,790 --> 00:21:08,310
banana and cherry is this poster this

00:21:04,410 --> 00:21:09,990
vintage Bron hi-5 poster which this is

00:21:08,310 --> 00:21:13,110
how it looks like like on print it's

00:21:09,990 --> 00:21:16,080
really nice on a landscape view but it's

00:21:13,110 --> 00:21:18,570
the kind of design that if you if you

00:21:16,080 --> 00:21:20,490
kind of squish it you can't keep this

00:21:18,570 --> 00:21:22,950
one anymore you kind of have to reject

00:21:20,490 --> 00:21:26,040
the elements on the page so what I did

00:21:22,950 --> 00:21:30,200
is I reject it at about this point so

00:21:26,040 --> 00:21:33,150
you can see that if you name the areas

00:21:30,200 --> 00:21:35,850
Firefox grid inspector actually shows

00:21:33,150 --> 00:21:37,590
you what you named it so at the widest

00:21:35,850 --> 00:21:39,600
point I have like my titles all the way

00:21:37,590 --> 00:21:43,530
there then I have some text I have a key

00:21:39,600 --> 00:21:47,250
image that takes up like two two rows

00:21:43,530 --> 00:21:49,500
and so on and so forth but when I switch

00:21:47,250 --> 00:21:52,350
when I hit a next breakpoint

00:21:49,500 --> 00:21:55,230
I didn't have to change the code on each

00:21:52,350 --> 00:21:57,720
of my individual good items so if I'm

00:21:55,230 --> 00:22:00,810
just gonna show an example what what I

00:21:57,720 --> 00:22:03,480
do is that I just say grid area title or

00:22:00,810 --> 00:22:05,940
grid area text so each of these

00:22:03,480 --> 00:22:08,670
components have has been assigned an

00:22:05,940 --> 00:22:11,970
area and all my changes at each

00:22:08,670 --> 00:22:15,150
breakpoint happen on the CSS for the

00:22:11,970 --> 00:22:17,760
parent container only so what I did is I

00:22:15,150 --> 00:22:19,200
I know the son this looks so this is

00:22:17,760 --> 00:22:20,850
this is an example of a fairly

00:22:19,200 --> 00:22:22,160
complicated grid so that's why the code

00:22:20,850 --> 00:22:24,110
looks like this

00:22:22,160 --> 00:22:28,820
but so what happens is that per break

00:22:24,110 --> 00:22:31,340
point the template rows and columns and

00:22:28,820 --> 00:22:34,100
areas are tweaked so I changed these

00:22:31,340 --> 00:22:35,720
three properties hit and I can change it

00:22:34,100 --> 00:22:38,390
once again when I hit a much narrower

00:22:35,720 --> 00:22:42,280
breakpoint so I find this really useful

00:22:38,390 --> 00:22:46,910
for this particular use case right so

00:22:42,280 --> 00:22:49,070
coming back to this more simplified

00:22:46,910 --> 00:22:52,880
example you can see that if I want to

00:22:49,070 --> 00:22:53,630
make say banana take up less space I can

00:22:52,880 --> 00:22:55,940
change it

00:22:53,630 --> 00:23:00,530
so again if the the number of columns

00:22:55,940 --> 00:23:05,960
don't match up it's moot so that's good

00:23:00,530 --> 00:23:08,690
rate of this one I think so that's how

00:23:05,960 --> 00:23:10,580
it works so the reason why when I was

00:23:08,690 --> 00:23:12,440
halfway through this code switching is

00:23:10,580 --> 00:23:14,900
the whole thing when off is because

00:23:12,440 --> 00:23:16,820
currently non rectangular or

00:23:14,900 --> 00:23:19,580
disconnected regions are not supported

00:23:16,820 --> 00:23:22,340
so if you do that the the browser throws

00:23:19,580 --> 00:23:24,560
it off because it's like invalid but

00:23:22,340 --> 00:23:27,620
again it's one of those in the far

00:23:24,560 --> 00:23:29,780
future kind of situations there is

00:23:27,620 --> 00:23:31,850
discussion around wanting to support

00:23:29,780 --> 00:23:33,380
tetris shapes but i think it's a bit

00:23:31,850 --> 00:23:35,110
more complicated so I think the spec

00:23:33,380 --> 00:23:37,340
authors need some time to work that out

00:23:35,110 --> 00:23:41,750
but something that we can look forward

00:23:37,340 --> 00:23:43,670
to right so similar to flex bucks you

00:23:41,750 --> 00:23:46,100
can also align items with grid I've

00:23:43,670 --> 00:23:47,360
covered most of the properties when I

00:23:46,100 --> 00:23:51,020
talked about flex bucks

00:23:47,360 --> 00:23:53,570
one of the things that I think less

00:23:51,020 --> 00:23:55,730
people know of is a particular category

00:23:53,570 --> 00:23:57,980
of alignment properties called the

00:23:55,730 --> 00:24:00,590
overflow alignment keywords because

00:23:57,980 --> 00:24:01,940
sometimes especially great words like a

00:24:00,590 --> 00:24:04,790
two-dimensional thing there will be

00:24:01,940 --> 00:24:07,550
situations where the total size of the

00:24:04,790 --> 00:24:10,820
grid items is larger than the grid

00:24:07,550 --> 00:24:13,790
container so let's for example like this

00:24:10,820 --> 00:24:16,460
particular example there is overflow but

00:24:13,790 --> 00:24:18,560
when we set particular alignment

00:24:16,460 --> 00:24:21,620
properties so let me highlight this

00:24:18,560 --> 00:24:26,030
first and one nice thing to note

00:24:21,620 --> 00:24:28,100
recently the Firefox dev tools also

00:24:26,030 --> 00:24:30,590
tells you if your container is a

00:24:28,100 --> 00:24:33,590
scrollable container or not here so

00:24:30,590 --> 00:24:36,169
that's kind of nice and so in this

00:24:33,590 --> 00:24:40,100
particular case if I want to

00:24:36,169 --> 00:24:43,369
of induce data loss and I say data loss

00:24:40,100 --> 00:24:46,419
is because sometimes like for example if

00:24:43,369 --> 00:24:50,119
I set the align content value to end

00:24:46,419 --> 00:24:54,259
can't spell and either what happens is

00:24:50,119 --> 00:24:57,739
that the items are aligned to the end

00:24:54,259 --> 00:25:02,059
but I can't scroll to the top so the

00:24:57,739 --> 00:25:04,909
text in the in the first two grid items

00:25:02,059 --> 00:25:07,879
it's gone I can't read it so I this is

00:25:04,909 --> 00:25:10,700
considered data loss so what you can do

00:25:07,879 --> 00:25:14,570
so there are two key words fairly some

00:25:10,700 --> 00:25:17,450
simple unsafe and safe so unsafe tells

00:25:14,570 --> 00:25:17,929
the browser that you can live with data

00:25:17,450 --> 00:25:20,720
loss

00:25:17,929 --> 00:25:23,269
so the browser is gonna okay if you want

00:25:20,720 --> 00:25:26,570
it if you want it that way sure I'll set

00:25:23,269 --> 00:25:28,519
it to end and leave it that way but if

00:25:26,570 --> 00:25:30,289
you were especially if you have

00:25:28,519 --> 00:25:32,419
dynamically loaded content you're not

00:25:30,289 --> 00:25:35,090
sure if this situation is gonna happen

00:25:32,419 --> 00:25:39,350
you can always put a keyword called safe

00:25:35,090 --> 00:25:41,539
and if if there's any instance of

00:25:39,350 --> 00:25:44,570
overflow the browser is gonna switch

00:25:41,539 --> 00:25:48,169
it's not gonna set it to align content

00:25:44,570 --> 00:25:50,239
and per se and it's gonna gonna assign

00:25:48,169 --> 00:25:52,609
an alignment property where data loss

00:25:50,239 --> 00:25:54,499
does not happen so this actually

00:25:52,609 --> 00:25:57,350
essentially ends up being a line content

00:25:54,499 --> 00:25:59,659
start but because because you've you've

00:25:57,350 --> 00:26:02,149
indicated that you want the browser to

00:25:59,659 --> 00:26:07,639
prevent data loss that's what this

00:26:02,149 --> 00:26:10,369
keyword does so that's that's that's a

00:26:07,639 --> 00:26:12,619
category of alignment properties that I

00:26:10,369 --> 00:26:16,970
think not a lot of people know about it

00:26:12,619 --> 00:26:20,480
yet and one more thing that good

00:26:16,970 --> 00:26:24,649
inspector is really useful for is auto

00:26:20,480 --> 00:26:27,259
sizing so I think in some some of the

00:26:24,649 --> 00:26:30,739
previous examples I used this function

00:26:27,259 --> 00:26:33,649
called VP so what we Pete does is that

00:26:30,739 --> 00:26:35,570
it saves you the trouble of repeating a

00:26:33,649 --> 00:26:37,489
pattern especially again if you have a

00:26:35,570 --> 00:26:40,070
very complicated grid or even if just

00:26:37,489 --> 00:26:43,190
you have a 20 column grid you don't want

00:26:40,070 --> 00:26:44,989
to sit there and type like 5 & 5 & 5 and

00:26:43,190 --> 00:26:48,320
20 times you can use the repeat function

00:26:44,989 --> 00:26:49,820
to do that for you and with the repeat

00:26:48,320 --> 00:26:52,100
function you can

00:26:49,820 --> 00:26:54,950
they explicitly say how many columns you

00:26:52,100 --> 00:26:56,420
want or you can let the browser decide

00:26:54,950 --> 00:26:58,580
you can just tell the browser that okay

00:26:56,420 --> 00:27:00,350
I want columns of this size you generate

00:26:58,580 --> 00:27:02,630
how many depending on how much space

00:27:00,350 --> 00:27:04,400
there is so these keywords that allow

00:27:02,630 --> 00:27:07,130
you to do that there are two of them

00:27:04,400 --> 00:27:12,250
they're called Auto fill or Auto fit and

00:27:07,130 --> 00:27:16,490
they behave very similarly when there is

00:27:12,250 --> 00:27:18,920
limited space so if I go here now it's

00:27:16,490 --> 00:27:21,740
set to auto fill I change it to auto fit

00:27:18,920 --> 00:27:23,960
nothing changes but the moment there is

00:27:21,740 --> 00:27:26,540
extra space that's when the distinction

00:27:23,960 --> 00:27:28,640
happens so if I pull it out and there's

00:27:26,540 --> 00:27:33,230
a lot of extra space let's go back to

00:27:28,640 --> 00:27:38,510
fill so what auto fill does is that it

00:27:33,230 --> 00:27:40,430
this it keeps any empty space when you

00:27:38,510 --> 00:27:42,380
don't have enough grit items that fill

00:27:40,430 --> 00:27:43,790
up all that space so in this particular

00:27:42,380 --> 00:27:47,690
great example

00:27:43,790 --> 00:27:50,570
I only know wrong one sorry go down yeah

00:27:47,690 --> 00:27:52,310
I have five grid items and I'm just

00:27:50,570 --> 00:27:54,800
gonna explain what the code does in

00:27:52,310 --> 00:27:57,500
English I have five bit items that's

00:27:54,800 --> 00:27:59,720
fine what I want the browser to to do

00:27:57,500 --> 00:28:02,150
with the grid is that I wanted to

00:27:59,720 --> 00:28:06,920
generate as many columns as possible

00:28:02,150 --> 00:28:09,440
with a minimum width of 6 m/s so clearly

00:28:06,920 --> 00:28:12,530
there's enough space for more than five

00:28:09,440 --> 00:28:18,140
items so when you set a value of auto

00:28:12,530 --> 00:28:20,000
fill these empty spaces are kept but if

00:28:18,140 --> 00:28:20,810
you say you're like okay I only have

00:28:20,000 --> 00:28:23,270
five items

00:28:20,810 --> 00:28:25,640
this space is waste that let's not do

00:28:23,270 --> 00:28:28,640
that let's let the all the items just

00:28:25,640 --> 00:28:31,190
you know fill them up that's when you

00:28:28,640 --> 00:28:33,740
want it use auto fit so the empty

00:28:31,190 --> 00:28:37,670
columns get collapsed and then the space

00:28:33,740 --> 00:28:40,820
gets filled up and it took me looking at

00:28:37,670 --> 00:28:42,560
this in in the context of dev tools with

00:28:40,820 --> 00:28:44,690
the overlay activated before I really

00:28:42,560 --> 00:28:47,510
understood it so so I find this

00:28:44,690 --> 00:28:49,910
particularly helpful and the last thing

00:28:47,510 --> 00:28:51,860
I want to cover for for grid is this

00:28:49,910 --> 00:28:54,320
relatively new feature that Firefox

00:28:51,860 --> 00:28:56,930
started supporting since 66 is the

00:28:54,320 --> 00:28:59,450
ability to animate grid columns and rows

00:28:56,930 --> 00:29:01,550
so in the previously you could only do

00:28:59,450 --> 00:29:03,800
it with grid the thing is that this

00:29:01,550 --> 00:29:05,240
animation has always been written in

00:29:03,800 --> 00:29:08,150
it's just that browser vendors you know

00:29:05,240 --> 00:29:10,640
take a bit of time to implement it but

00:29:08,150 --> 00:29:12,830
this is this is supposed to happen in

00:29:10,640 --> 00:29:15,290
every browser you just don't know when

00:29:12,830 --> 00:29:17,150
and when you see something like this

00:29:15,290 --> 00:29:20,270
right you see my pond moving across the

00:29:17,150 --> 00:29:22,400
board the first time I saw an example of

00:29:20,270 --> 00:29:26,270
this I thought okay migrate item must be

00:29:22,400 --> 00:29:29,450
moving across the board and but it turns

00:29:26,270 --> 00:29:31,100
out that's not how it's done so with the

00:29:29,450 --> 00:29:34,340
grid inspector you can actually see

00:29:31,100 --> 00:29:41,120
what's happening there's one great item

00:29:34,340 --> 00:29:44,540
in my grid and my grid is actually made

00:29:41,120 --> 00:29:46,550
up of two columns and two rows so the

00:29:44,540 --> 00:29:48,500
the background is a lie it's just the

00:29:46,550 --> 00:29:53,750
gradient so don't be fooled but the

00:29:48,500 --> 00:29:57,320
actual animation happens on the grid

00:29:53,750 --> 00:29:58,850
cell which my pawn resides in so what's

00:29:57,320 --> 00:30:01,370
happening is that it's not that the

00:29:58,850 --> 00:30:04,310
great item is moving across different

00:30:01,370 --> 00:30:08,810
columns and rows rather the row itself

00:30:04,310 --> 00:30:13,310
is expanding and shrinking moving the

00:30:08,810 --> 00:30:16,970
the grid item across the container and I

00:30:13,310 --> 00:30:19,460
think dev tools makes it really easy to

00:30:16,970 --> 00:30:21,890
visualize this as a post because

00:30:19,460 --> 00:30:23,960
intuitively you wouldn't think that the

00:30:21,890 --> 00:30:26,210
grid item behaves like this but if you

00:30:23,960 --> 00:30:27,980
had wanted to do animation of things

00:30:26,210 --> 00:30:29,780
across your grid unfortunately you're

00:30:27,980 --> 00:30:32,840
gonna have to do it this way because you

00:30:29,780 --> 00:30:35,540
can't move you can't move your grid item

00:30:32,840 --> 00:30:38,000
across rows and columns because

00:30:35,540 --> 00:30:40,730
interpolation can't happen that way so

00:30:38,000 --> 00:30:43,160
so if you're looking to play around with

00:30:40,730 --> 00:30:44,870
this new feature of animating rows and

00:30:43,160 --> 00:30:48,230
columns this is definitely something to

00:30:44,870 --> 00:30:50,120
keep in mind and and use the dev tools

00:30:48,230 --> 00:30:52,820
to kind of help you visualize what

00:30:50,120 --> 00:30:54,350
exactly is happening so because of time

00:30:52,820 --> 00:30:56,000
constraints I didn't really get a chance

00:30:54,350 --> 00:30:58,190
to cover things like you know sub grid

00:30:56,000 --> 00:31:00,500
or the fact that the newer sizing units

00:30:58,190 --> 00:31:01,640
allow for elements to grow and shrink at

00:31:00,500 --> 00:31:03,460
different rates because there's a lot of

00:31:01,640 --> 00:31:06,110
new things we can do with CSS these days

00:31:03,460 --> 00:31:08,660
but these new layout techniques do allow

00:31:06,110 --> 00:31:11,330
designers and developers to spend less

00:31:08,660 --> 00:31:13,100
time wrangling code and more time to

00:31:11,330 --> 00:31:15,290
focus your efforts on actually designing

00:31:13,100 --> 00:31:18,320
more innovative

00:31:15,290 --> 00:31:20,510
and adaptive layouts that really worked

00:31:18,320 --> 00:31:23,210
well across many different browsers and

00:31:20,510 --> 00:31:25,190
devices so I want to end off by saying

00:31:23,210 --> 00:31:26,900
if you've been on the fence trying out

00:31:25,190 --> 00:31:31,610
these new features because they seem

00:31:26,900 --> 00:31:35,090
complicated and hard just go for it be

00:31:31,610 --> 00:31:37,580
the cat it's yeah you'd be surprised

00:31:35,090 --> 00:31:39,240
you'll surprise yourself yeah so my time

00:31:37,580 --> 00:31:47,710
is up thank you very much

00:31:39,240 --> 00:31:47,710

YouTube URL: https://www.youtube.com/watch?v=so6LqPZG80M


