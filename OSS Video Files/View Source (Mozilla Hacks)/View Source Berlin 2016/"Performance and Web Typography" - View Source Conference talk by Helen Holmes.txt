Title: "Performance and Web Typography" - View Source Conference talk by Helen Holmes
Publication date: 2016-10-03
Playlist: View Source Berlin 2016
Description: 
	As front end developers, we own performance. As designers, we own typography. So how do you handle the tricky intersection of beautiful web typography and performant web pages? I'll be showing the audience OpenType features, explaining why they're important to typefaces, and explaining the tradeoffs they have on performance. We'll go over how to enable OpenType features and how you can optimize your font files for the web whether you own them and serve them up through @font-face or through Typekit so you can feel confident serving up gorgeous typography on your sites. 

View Source Berlin 12-14 September, 2016

Helen is a designer trying to work in the little space where good story, art, and technology all meet. A big proponent of making tech a healthy community for all, she helped found Women Who Code DC’s chapter and has mentored at student hackathons all over the U.S. She’s currently at Mozilla helping make developer tools the best she can. If she's not on the web, she's probably baking up a storm while listening to a good podcast.
Captions: 
	00:00:05,740 --> 00:00:13,299
oh right hi everyone my name is Helen

00:00:10,240 --> 00:00:14,889
and I just really like typography which

00:00:13,299 --> 00:00:18,730
is why I spent like hours making this

00:00:14,889 --> 00:00:19,930
animation so content is the most

00:00:18,730 --> 00:00:21,970
important thing on your site I think we

00:00:19,930 --> 00:00:24,099
can all agree about that but typography

00:00:21,970 --> 00:00:26,170
is how you dress it up so the clothes

00:00:24,099 --> 00:00:28,210
that you put on every day express my

00:00:26,170 --> 00:00:30,580
purpose for your day and that's what

00:00:28,210 --> 00:00:32,339
typography is doing for your website so

00:00:30,580 --> 00:00:35,769
assuming that you're not just like using

00:00:32,339 --> 00:00:37,269
emojis to like I don't know Express

00:00:35,769 --> 00:00:38,799
semantic meaning on your site you're

00:00:37,269 --> 00:00:41,080
using typography and that same

00:00:38,799 --> 00:00:43,180
typography is in the equation of what's

00:00:41,080 --> 00:00:45,129
making your users feel like using your

00:00:43,180 --> 00:00:47,440
site in the very first place so you want

00:00:45,129 --> 00:00:48,879
if you're like me you want people to be

00:00:47,440 --> 00:00:52,180
happy when they're using their site like

00:00:48,879 --> 00:00:54,729
this little dude and you want your type

00:00:52,180 --> 00:00:57,970
to be really beautiful so it would be

00:00:54,729 --> 00:00:59,739
really valid to ask like so what does it

00:00:57,970 --> 00:01:02,650
mean to have beautiful wipped web

00:00:59,739 --> 00:01:04,239
typography and like what are the steps

00:01:02,650 --> 00:01:05,710
from knowing what relatively little

00:01:04,239 --> 00:01:07,990
about typography to making typefaces

00:01:05,710 --> 00:01:10,149
beautiful and then of course it would

00:01:07,990 --> 00:01:11,950
also be really relevant to ask like well

00:01:10,149 --> 00:01:13,780
how do I make it all performant

00:01:11,950 --> 00:01:15,789
like it means HTTP requests and

00:01:13,780 --> 00:01:17,829
additional load time and potentially a

00:01:15,789 --> 00:01:20,100
poor user experience like obscuring the

00:01:17,829 --> 00:01:22,390
content that I care so much about so

00:01:20,100 --> 00:01:25,780
gonna answer this first question first

00:01:22,390 --> 00:01:27,640
what is beautiful web typography and to

00:01:25,780 --> 00:01:29,530
do that you have to know that typography

00:01:27,640 --> 00:01:31,210
doesn't just exist on the web so if you

00:01:29,530 --> 00:01:33,850
want beautiful web typography you need

00:01:31,210 --> 00:01:34,960
beautiful typography first and so as

00:01:33,850 --> 00:01:37,560
with most things in life a little

00:01:34,960 --> 00:01:40,689
history doesn't hurt so this guy is

00:01:37,560 --> 00:01:42,009
Johannes Gutenberg and he and his

00:01:40,689 --> 00:01:43,960
printing press marked the birth of

00:01:42,009 --> 00:01:46,240
modern typography but written language

00:01:43,960 --> 00:01:47,490
stretches way farther back from the 15th

00:01:46,240 --> 00:01:51,219
century

00:01:47,490 --> 00:01:52,569
so before Gutenberg religious men and

00:01:51,219 --> 00:01:54,759
scholars all over the world we're trying

00:01:52,569 --> 00:01:56,950
to pen history by hand so calligraphy

00:01:54,759 --> 00:01:59,740
the art that typography is based on is

00:01:56,950 --> 00:02:04,930
really really old it's like hello old

00:01:59,740 --> 00:02:09,910
alright so do I have any UX designers

00:02:04,930 --> 00:02:10,560
audience yeah I'm a UX designer cool hey

00:02:09,910 --> 00:02:13,000
girls

00:02:10,560 --> 00:02:15,070
so when you're trying to create a new

00:02:13,000 --> 00:02:16,300
website or app you draw from patterns

00:02:15,070 --> 00:02:18,190
that you've already seen in other places

00:02:16,300 --> 00:02:20,200
that work well this is because choosing

00:02:18,190 --> 00:02:22,360
patterns users are familiar with helps

00:02:20,200 --> 00:02:24,490
them acclimate to your product faster so

00:02:22,360 --> 00:02:27,850
here this page is like really busy but

00:02:24,490 --> 00:02:30,610
this is just like apps that all have the

00:02:27,850 --> 00:02:34,510
same kind of navigation which is that

00:02:30,610 --> 00:02:36,370
bottom bar on iOS so typography over the

00:02:34,510 --> 00:02:38,230
years of that exact same thing it copied

00:02:36,370 --> 00:02:39,940
from its predecessors those religious

00:02:38,230 --> 00:02:42,010
men penning history created letters and

00:02:39,940 --> 00:02:44,320
alphabets and words and the way that

00:02:42,010 --> 00:02:45,970
those things looked on the page so when

00:02:44,320 --> 00:02:50,709
this technical revolution hits with

00:02:45,970 --> 00:02:52,510
Johan and his printing press it it

00:02:50,709 --> 00:02:54,550
copies what these men had been doing and

00:02:52,510 --> 00:02:56,620
even now typography draws inspiration

00:02:54,550 --> 00:02:58,180
from the way that we write on paper so

00:02:56,620 --> 00:03:00,030
the technical resolution that's good and

00:02:58,180 --> 00:03:02,770
Burgh and that's where typography begins

00:03:00,030 --> 00:03:04,300
so typography copying the way that we

00:03:02,770 --> 00:03:07,239
write and technical revolution means

00:03:04,300 --> 00:03:09,280
three patterns emerge so the first is

00:03:07,239 --> 00:03:11,290
that typography and what we as readers

00:03:09,280 --> 00:03:14,019
find legible change and morph together

00:03:11,290 --> 00:03:15,940
and are influenced by how like by how

00:03:14,019 --> 00:03:19,299
we're reading be it my book be it by

00:03:15,940 --> 00:03:22,299
newspaper or be it by website the second

00:03:19,299 --> 00:03:24,340
is that typography is also influenced by

00:03:22,299 --> 00:03:25,959
the way people write by hand and it

00:03:24,340 --> 00:03:27,820
borrows solutions people find when

00:03:25,959 --> 00:03:31,299
writing by hand when it needs them and

00:03:27,820 --> 00:03:32,799
then the third it's that typography

00:03:31,299 --> 00:03:34,510
becomes fundamentally different from

00:03:32,799 --> 00:03:36,070
traditional calligraphy because of the

00:03:34,510 --> 00:03:38,920
ways that printing presses works so

00:03:36,070 --> 00:03:41,230
instead of letters being coupled really

00:03:38,920 --> 00:03:43,750
closely together printing presses force

00:03:41,230 --> 00:03:47,650
like every single individual letter into

00:03:43,750 --> 00:03:49,989
a little metal box called a slug so I

00:03:47,650 --> 00:03:52,570
found this really great tweet and it

00:03:49,989 --> 00:03:54,370
says the difference between what you see

00:03:52,570 --> 00:03:56,739
on a keyboard and what is available in a

00:03:54,370 --> 00:03:58,540
font is often staggering and then you

00:03:56,739 --> 00:04:00,610
see like you know just kind of what

00:03:58,540 --> 00:04:02,920
you're used to seeing and then like all

00:04:00,610 --> 00:04:05,680
of the various glyphs that might be in a

00:04:02,920 --> 00:04:07,360
typeface so if we think of this

00:04:05,680 --> 00:04:09,220
phenomenon as something that happens

00:04:07,360 --> 00:04:11,200
because typography was copying a

00:04:09,220 --> 00:04:13,329
previously established rich art like

00:04:11,200 --> 00:04:15,000
calligraphy this makes sense all of

00:04:13,329 --> 00:04:16,590
those extra things that you don't see in

00:04:15,000 --> 00:04:17,970
font our problems that people when

00:04:16,590 --> 00:04:19,769
they're writing by hand just like solve

00:04:17,970 --> 00:04:22,350
with a pen like this person this

00:04:19,769 --> 00:04:23,610
person's talented but when you need to

00:04:22,350 --> 00:04:26,100
fit everything into a keyboard it

00:04:23,610 --> 00:04:28,050
becomes a little bit more complicated so

00:04:26,100 --> 00:04:30,630
when we look at all the glyphs and

00:04:28,050 --> 00:04:31,980
characters that a font has when we look

00:04:30,630 --> 00:04:33,870
at all of those features a font might

00:04:31,980 --> 00:04:35,460
have you can understand their relevance

00:04:33,870 --> 00:04:38,730
and the functions they serve a reader by

00:04:35,460 --> 00:04:40,560
keeping those three facts in mind so

00:04:38,730 --> 00:04:42,030
typography needed to create glyphs or

00:04:40,560 --> 00:04:43,470
characters for all of these permutations

00:04:42,030 --> 00:04:44,670
when we write and it was really

00:04:43,470 --> 00:04:46,260
challenging because printing presses

00:04:44,670 --> 00:04:49,230
meant you need to have every single

00:04:46,260 --> 00:04:51,300
character in a little middle box so

00:04:49,230 --> 00:04:53,010
before we get to what all of those

00:04:51,300 --> 00:04:55,140
individual little metal boxes are let's

00:04:53,010 --> 00:04:57,620
brush up on our 15th century European

00:04:55,140 --> 00:04:59,940
history talk a little bit about this guy

00:04:57,620 --> 00:05:02,400
so the question is why did printing

00:04:59,940 --> 00:05:03,270
presses change written word so much so

00:05:02,400 --> 00:05:04,919
to understand how we got from

00:05:03,270 --> 00:05:06,900
calligraphy to typography it's really

00:05:04,919 --> 00:05:10,890
useful to understand how a printing

00:05:06,900 --> 00:05:13,650
press works so to print books with a

00:05:10,890 --> 00:05:15,900
printing press you set all these metal

00:05:13,650 --> 00:05:17,430
bars called slugs each with a letter or

00:05:15,900 --> 00:05:19,770
combination of letters and rows so these

00:05:17,430 --> 00:05:23,190
are all of like the things set up on

00:05:19,770 --> 00:05:24,690
giant like wooden bookcases sort of and

00:05:23,190 --> 00:05:26,669
this is sort of what they look like

00:05:24,690 --> 00:05:29,070
you set them all like next to each other

00:05:26,669 --> 00:05:31,590
one by one it's very exhausting I'm sure

00:05:29,070 --> 00:05:32,729
and they need to be set up this way so

00:05:31,590 --> 00:05:34,860
that they can be moveable and they can

00:05:32,729 --> 00:05:38,100
be interchangeable so that each page can

00:05:34,860 --> 00:05:40,650
be different so written word before the

00:05:38,100 --> 00:05:42,930
printing press it was really easy to fix

00:05:40,650 --> 00:05:45,479
like awkward spacing between letters and

00:05:42,930 --> 00:05:46,919
acronyms and body of text flowed and if

00:05:45,479 --> 00:05:49,290
you were talented adding flourishes was

00:05:46,919 --> 00:05:50,040
really simple printing presses needs

00:05:49,290 --> 00:05:51,780
were different

00:05:50,040 --> 00:05:54,180
typography needed to solve awkward

00:05:51,780 --> 00:05:55,979
spacing build flourishes and have number

00:05:54,180 --> 00:05:57,840
fractions like all of these things that

00:05:55,979 --> 00:06:01,310
had been solved and were easy to like

00:05:57,840 --> 00:06:03,540
write but we're not easy to typeset so

00:06:01,310 --> 00:06:04,979
Ellen Lupton in her book thinking with

00:06:03,540 --> 00:06:07,140
type puts us really elegantly she says

00:06:04,979 --> 00:06:08,940
the first typefaces were directly

00:06:07,140 --> 00:06:10,979
modelled on forms of calligraphy

00:06:08,940 --> 00:06:12,900
typefaces however are not bodily

00:06:10,979 --> 00:06:16,530
gestures they are manufactured images

00:06:12,900 --> 00:06:18,270
designed for infinite repetition all

00:06:16,530 --> 00:06:19,500
right so to solve these issues type

00:06:18,270 --> 00:06:22,020
designers had to create all these glyphs

00:06:19,500 --> 00:06:26,160
that you find in fonts today back to

00:06:22,020 --> 00:06:29,080
this guy all of those

00:06:26,160 --> 00:06:30,640
so slugs meant that as a type designer

00:06:29,080 --> 00:06:32,740
you had to choose and find important

00:06:30,640 --> 00:06:34,600
combinations of letters you had to give

00:06:32,740 --> 00:06:36,940
decorative glyphs for people printing

00:06:34,600 --> 00:06:38,350
books you need to create small caps and

00:06:36,940 --> 00:06:41,560
you need to use like often used

00:06:38,350 --> 00:06:44,980
fractions like 1 over 2 1 over 3 1 over

00:06:41,560 --> 00:06:46,180
4 so if it wasn't obvious this is like

00:06:44,980 --> 00:06:48,070
the direction we're heading with these

00:06:46,180 --> 00:06:50,260
top these little things make your

00:06:48,070 --> 00:06:51,820
content shine and using these beautiful

00:06:50,260 --> 00:06:53,500
little characters that were specifically

00:06:51,820 --> 00:06:54,940
created to solve specific kinds of

00:06:53,500 --> 00:06:56,590
problems to make your text more legible

00:06:54,940 --> 00:07:00,130
and it makes the details just a little

00:06:56,590 --> 00:07:01,660
bit more beautiful so the need for these

00:07:00,130 --> 00:07:03,640
characters didn't go away when we

00:07:01,660 --> 00:07:05,560
switched to digital typography which is

00:07:03,640 --> 00:07:08,650
why the ability to turn these things on

00:07:05,560 --> 00:07:10,480
it off is in CSS so when we use

00:07:08,650 --> 00:07:12,130
typography on the web we have a myriad

00:07:10,480 --> 00:07:13,330
of characters and lifts at our disposal

00:07:12,130 --> 00:07:16,150
all of which can be turned on and off

00:07:13,330 --> 00:07:18,280
with naked open CSS open type CSS flags

00:07:16,150 --> 00:07:20,530
and there are a bunch of them there like

00:07:18,280 --> 00:07:21,760
over a hundred there are so many so I'm

00:07:20,530 --> 00:07:23,140
not going to go over every single one

00:07:21,760 --> 00:07:26,020
but we can learn some of the most common

00:07:23,140 --> 00:07:28,180
ones so the first one I want to go over

00:07:26,020 --> 00:07:30,130
is kerning this one is the adjustment

00:07:28,180 --> 00:07:32,470
between letters so that spacing looks

00:07:30,130 --> 00:07:34,210
good so type designers put a lot of work

00:07:32,470 --> 00:07:35,890
into figuring out spacing between your

00:07:34,210 --> 00:07:37,960
letters so it makes sense to actually

00:07:35,890 --> 00:07:39,669
turn this on to Auto which ensures the

00:07:37,960 --> 00:07:43,060
browser will choose the most performant

00:07:39,669 --> 00:07:46,060
kerning auction on by default there are

00:07:43,060 --> 00:07:48,250
also ligatures which fix awkward spacing

00:07:46,060 --> 00:07:50,650
combinations so this one if you look at

00:07:48,250 --> 00:07:53,050
the F and I and finally you'll see that

00:07:50,650 --> 00:07:55,180
like one looks a little less awkward and

00:07:53,050 --> 00:07:58,690
it's because it uses the little like

00:07:55,180 --> 00:08:01,120
hook on the F to become the part of the

00:07:58,690 --> 00:08:03,190
eye so these are normally split into

00:08:01,120 --> 00:08:05,200
normal and discretionary ligatures which

00:08:03,190 --> 00:08:07,000
is basically like normal ligatures use

00:08:05,200 --> 00:08:11,229
all the time and the fancy ones for

00:08:07,000 --> 00:08:14,590
later so there are also small caps so if

00:08:11,229 --> 00:08:16,870
we watch CSS in here these make

00:08:14,590 --> 00:08:18,160
abbreviations look good in sentences so

00:08:16,870 --> 00:08:22,000
this is because they don't interrupt the

00:08:18,160 --> 00:08:24,700
flow so here we see like the CSS like

00:08:22,000 --> 00:08:26,440
pokes up above all the other letters and

00:08:24,700 --> 00:08:27,880
the other version just is like the

00:08:26,440 --> 00:08:30,910
designed version for them to be a little

00:08:27,880 --> 00:08:33,130
flatter old-style numerals give you

00:08:30,910 --> 00:08:34,330
numbers that go below the baseline which

00:08:33,130 --> 00:08:36,820
look more similar to the way that you

00:08:34,330 --> 00:08:38,140
might write numbers out by hand and it

00:08:36,820 --> 00:08:39,820
has the added benefit of making them a

00:08:38,140 --> 00:08:43,099
little more

00:08:39,820 --> 00:08:44,750
and then they're also squashes which I

00:08:43,099 --> 00:08:47,000
you to be super fancy if you look at the

00:08:44,750 --> 00:08:49,190
a one is like super fancy for like a

00:08:47,000 --> 00:08:53,150
header title and then there's kind of

00:08:49,190 --> 00:08:55,310
like the boring one so any one of these

00:08:53,150 --> 00:08:56,930
changes in the grand scheme of like all

00:08:55,310 --> 00:08:58,820
of the work that goes into building an

00:08:56,930 --> 00:09:00,920
entire website is relatively small but

00:08:58,820 --> 00:09:03,020
together they have this net gain that is

00:09:00,920 --> 00:09:05,000
bigger than their individual parts they

00:09:03,020 --> 00:09:06,830
make type more legible and thus your

00:09:05,000 --> 00:09:10,310
site we're pleasant to be on and to be

00:09:06,830 --> 00:09:12,230
reading so these things are pretty easy

00:09:10,310 --> 00:09:12,950
to turn on they're ultimately just CSS

00:09:12,230 --> 00:09:15,530
properties

00:09:12,950 --> 00:09:19,910
I left them all unprefixed for brevity

00:09:15,530 --> 00:09:22,160
so we have kerning ligatures so the most

00:09:19,910 --> 00:09:23,570
challenging part of this process

00:09:22,160 --> 00:09:25,730
actually is figuring out what your

00:09:23,570 --> 00:09:27,170
typeface supports and there are like a

00:09:25,730 --> 00:09:29,780
variety of methods you can use to figure

00:09:27,170 --> 00:09:31,400
that out so first one is type kit I

00:09:29,780 --> 00:09:34,700
think most of us probably you're using

00:09:31,400 --> 00:09:36,590
type kit to get fonts or google fonts so

00:09:34,700 --> 00:09:37,910
if you're serving it up from type kit it

00:09:36,590 --> 00:09:40,160
will list the features that a typeface

00:09:37,910 --> 00:09:42,490
supports once you've created a kit on

00:09:40,160 --> 00:09:44,720
type kit you can see the open type

00:09:42,490 --> 00:09:46,280
feature is the typeface supports by

00:09:44,720 --> 00:09:48,830
clicking on the question mark next to

00:09:46,280 --> 00:09:49,970
open type features and then you kind of

00:09:48,830 --> 00:09:53,390
just need to already know what that

00:09:49,970 --> 00:09:55,640
means which is a little inconvenient for

00:09:53,390 --> 00:09:56,750
google fonts you need to or like fonts

00:09:55,640 --> 00:09:58,400
you have locally on your machine you

00:09:56,750 --> 00:10:02,420
kind of need to do a little more digging

00:09:58,400 --> 00:10:04,550
so in these instances there are open

00:10:02,420 --> 00:10:07,280
types and boxes so the sandbox I'm using

00:10:04,550 --> 00:10:10,060
here is hosted at that URL which is

00:10:07,280 --> 00:10:13,490
cognate to calm slash sandbox slash css3

00:10:10,060 --> 00:10:16,250
and I really like this one because you

00:10:13,490 --> 00:10:18,380
kind of just like click like things to

00:10:16,250 --> 00:10:21,470
see if it exists in the typeface or not

00:10:18,380 --> 00:10:22,850
like a few of these things are on like I

00:10:21,470 --> 00:10:26,450
think there were discretionary ligatures

00:10:22,850 --> 00:10:28,820
between the s and the T so the last

00:10:26,450 --> 00:10:31,490
challenge is discovering all of those

00:10:28,820 --> 00:10:33,770
extra glyphs that font face might

00:10:31,490 --> 00:10:36,380
contain since we already know from from

00:10:33,770 --> 00:10:37,850
this tweet that sometimes there are

00:10:36,380 --> 00:10:40,190
additional characters and glyphs that

00:10:37,850 --> 00:10:41,960
you can't access without key commands or

00:10:40,190 --> 00:10:43,910
help from some sort of like visual

00:10:41,960 --> 00:10:45,110
editing software so to find these your

00:10:43,910 --> 00:10:48,500
two options

00:10:45,110 --> 00:10:50,839
so you can look at all of the glyphs in

00:10:48,500 --> 00:10:51,930
either font book or character map if

00:10:50,839 --> 00:10:55,050
you're on Windows

00:10:51,930 --> 00:10:56,879
or if you have like a spare 600 or so

00:10:55,050 --> 00:10:58,139
dollars just like sitting around burn

00:10:56,879 --> 00:11:04,019
and hold your pocket

00:10:58,139 --> 00:11:06,209
there's Adobe InDesign so I'm gonna go

00:11:04,019 --> 00:11:07,980
over this version first because I assume

00:11:06,209 --> 00:11:09,750
this is the one that's probably more

00:11:07,980 --> 00:11:11,250
likely for everyone in the room so you

00:11:09,750 --> 00:11:12,750
can use font book if you're on a Mac or

00:11:11,250 --> 00:11:15,029
character map if you're on Windows in

00:11:12,750 --> 00:11:17,100
font book you can toggle the option to

00:11:15,029 --> 00:11:19,529
see like all of the glyphs that exist in

00:11:17,100 --> 00:11:21,290
a typeface by clicking that one with

00:11:19,529 --> 00:11:24,269
like if you look up in the upper left

00:11:21,290 --> 00:11:26,100
this kind of looks like a grid and here

00:11:24,269 --> 00:11:28,110
we're just going through a typeface

00:11:26,100 --> 00:11:31,199
calling calendars we're looking at all

00:11:28,110 --> 00:11:34,920
this stuff it has yeah has all these

00:11:31,199 --> 00:11:37,680
fancy characters it's nice so if you do

00:11:34,920 --> 00:11:40,860
have InDesign if you have a license for

00:11:37,680 --> 00:11:42,689
Adobe cloud services there's actually a

00:11:40,860 --> 00:11:47,730
glyphs panel where you can just see

00:11:42,689 --> 00:11:49,980
everything kind of the same deal so the

00:11:47,730 --> 00:11:52,139
workflow that I have for playing with a

00:11:49,980 --> 00:11:54,420
new typeface that I'd like to use is

00:11:52,139 --> 00:11:56,009
typically to use an OpenType sandbox to

00:11:54,420 --> 00:11:58,259
discover the CSS features that a

00:11:56,009 --> 00:11:59,970
typeface supports and then I go into

00:11:58,259 --> 00:12:02,009
font book to discover the glyphs that

00:11:59,970 --> 00:12:03,290
might actually be cool in my designs and

00:12:02,009 --> 00:12:05,490
I just don't know that they're there so

00:12:03,290 --> 00:12:08,939
for example if you're on a Mac the

00:12:05,490 --> 00:12:10,290
system font is called San Francisco and

00:12:08,939 --> 00:12:11,939
it has like all of these cool little

00:12:10,290 --> 00:12:14,660
wingdings like it has like a little

00:12:11,939 --> 00:12:19,579
Apple logo and it has the location icon

00:12:14,660 --> 00:12:23,309
it also has like super fancy quotes whoa

00:12:19,579 --> 00:12:24,870
so it's also a way using the information

00:12:23,309 --> 00:12:26,759
panel to see what languages a typeface

00:12:24,870 --> 00:12:28,170
supports which is really good

00:12:26,759 --> 00:12:30,180
information if you're building a site

00:12:28,170 --> 00:12:33,629
that needs different character sets or

00:12:30,180 --> 00:12:36,720
languages with lots of accents alright

00:12:33,629 --> 00:12:39,449
so the next part we should talk about

00:12:36,720 --> 00:12:41,930
performance I don't know why performance

00:12:39,449 --> 00:12:43,920
as a text editor I guess it starts there

00:12:41,930 --> 00:12:45,449
alright so at this point you've already

00:12:43,920 --> 00:12:46,709
learned about type features you know

00:12:45,449 --> 00:12:49,129
where to find them you know how to turn

00:12:46,709 --> 00:12:51,750
them on you might already have some

00:12:49,129 --> 00:12:53,839
opinions on what like you think looks

00:12:51,750 --> 00:12:55,740
good and what you want in a typeface

00:12:53,839 --> 00:12:57,300
either because of this talk are things

00:12:55,740 --> 00:12:58,350
that you've read on your own and so at

00:12:57,300 --> 00:13:00,209
this point we're going to pretend that

00:12:58,350 --> 00:13:01,679
you've chosen the typeface and now you

00:13:00,209 --> 00:13:04,700
just want to load it and use it on your

00:13:01,679 --> 00:13:07,340
site which is why we need to talk about

00:13:04,700 --> 00:13:11,180
performance so I'm sure we've all seen

00:13:07,340 --> 00:13:12,650
this kind of happen for like sometimes

00:13:11,180 --> 00:13:14,510
like it takes a little bit for like

00:13:12,650 --> 00:13:17,090
you'd actually see the content other

00:13:14,510 --> 00:13:18,770
things load first so often is so

00:13:17,090 --> 00:13:20,750
obviously as web developers we care

00:13:18,770 --> 00:13:23,150
about performance and we don't want

00:13:20,750 --> 00:13:25,130
large web fonts slowing down the load

00:13:23,150 --> 00:13:27,410
time of our sites so at the very

00:13:25,130 --> 00:13:28,940
beginning of this site of this talk you

00:13:27,410 --> 00:13:31,610
probably remember me saying something

00:13:28,940 --> 00:13:33,860
like content is king likely content is

00:13:31,610 --> 00:13:35,570
the most important so I want you to keep

00:13:33,860 --> 00:13:37,190
this in mind because as we go through

00:13:35,570 --> 00:13:39,860
these performance tips it's the driving

00:13:37,190 --> 00:13:41,090
philosophy behind what we're doing so I

00:13:39,860 --> 00:13:42,830
think that Chris Manning put it best in

00:13:41,090 --> 00:13:45,110
his article on font loading techniques

00:13:42,830 --> 00:13:48,500
he says that readable content Trump's

00:13:45,110 --> 00:13:51,080
custom fonts he's true so if you've ever

00:13:48,500 --> 00:13:52,880
loaded a web font from google fonts you

00:13:51,080 --> 00:13:54,290
probably copy and pasted their suggested

00:13:52,880 --> 00:13:54,950
import code which looks something like

00:13:54,290 --> 00:13:57,290
this

00:13:54,950 --> 00:13:59,330
it's just that import statement or it

00:13:57,290 --> 00:14:01,760
looks something like this where it was

00:13:59,330 --> 00:14:03,800
like the link rel and these are both

00:14:01,760 --> 00:14:05,510
like these both get the job done but we

00:14:03,800 --> 00:14:07,520
can definitely improve on them from a

00:14:05,510 --> 00:14:09,530
performance standpoint for one they

00:14:07,520 --> 00:14:12,290
cause something that is called fout

00:14:09,530 --> 00:14:14,350
which stands for flash of unstyled text

00:14:12,290 --> 00:14:16,460
which I'm sure we're all familiar with

00:14:14,350 --> 00:14:20,270
even worse they can actually cause

00:14:16,460 --> 00:14:24,350
another syndrome which is called weight

00:14:20,270 --> 00:14:26,420
which is a flash of invisible tax so not

00:14:24,350 --> 00:14:29,960
even being able to read anything before

00:14:26,420 --> 00:14:31,670
that entire web font loads which is

00:14:29,960 --> 00:14:35,030
awful on mobile or if you're on poor

00:14:31,670 --> 00:14:36,470
Wi-Fi and so it's safe to say that if

00:14:35,030 --> 00:14:37,850
you're just trying to read something you

00:14:36,470 --> 00:14:40,910
just want your users to be able to read

00:14:37,850 --> 00:14:44,060
like a flash of unstyled text is better

00:14:40,910 --> 00:14:45,440
than a flash of invisible text so when

00:14:44,060 --> 00:14:47,330
we're working with web type we want to

00:14:45,440 --> 00:14:48,800
allow for flashes of unstyled text to

00:14:47,330 --> 00:14:51,530
happen and then we want to mitigate and

00:14:48,800 --> 00:14:53,390
minimize their effects so first we're

00:14:51,530 --> 00:14:55,550
going to go over how to prevent the

00:14:53,390 --> 00:14:58,370
flash of a visible text and the way that

00:14:55,550 --> 00:15:00,860
you do this is with all the fonts you

00:14:58,370 --> 00:15:03,770
don't love just like regular old web

00:15:00,860 --> 00:15:05,690
fonts so like web safe fonts tax these

00:15:03,770 --> 00:15:07,130
are all just going to load really easy

00:15:05,690 --> 00:15:10,640
so what we're gonna do is we're going to

00:15:07,130 --> 00:15:11,660
declare a web safe fonts in our sack and

00:15:10,640 --> 00:15:12,860
then we're gonna use JavaScript to

00:15:11,660 --> 00:15:15,050
loaded in the web font once it's ready

00:15:12,860 --> 00:15:18,230
to leaves so for these I'm gonna be

00:15:15,050 --> 00:15:20,900
using a typeface called calendar

00:15:18,230 --> 00:15:22,010
so in here this is probably all stuff

00:15:20,900 --> 00:15:25,940
you're familiar with if you've ever used

00:15:22,010 --> 00:15:28,070
a custom font we first were just loading

00:15:25,940 --> 00:15:30,680
it in the at font face this won't

00:15:28,070 --> 00:15:33,620
download until it's actually applied to

00:15:30,680 --> 00:15:35,810
anything so here we're declaring our web

00:15:33,620 --> 00:15:37,820
safe fonts stack first on the body and

00:15:35,810 --> 00:15:41,960
then our desired font stack in a class

00:15:37,820 --> 00:15:43,790
called just dot fonts loaded then we're

00:15:41,960 --> 00:15:47,390
gonna use for the JavaScript we're using

00:15:43,790 --> 00:15:49,190
a library that's produced by brand Stein

00:15:47,390 --> 00:15:52,640
who works at Typekit and it's called

00:15:49,190 --> 00:15:55,100
font face observer so once we have that

00:15:52,640 --> 00:15:56,810
library loaded we're gonna start an

00:15:55,100 --> 00:15:58,550
object with different font families we

00:15:56,810 --> 00:16:00,080
want to load so here we just have one

00:15:58,550 --> 00:16:02,150
typeface with two different weights and

00:16:00,080 --> 00:16:04,070
we can keep appending different families

00:16:02,150 --> 00:16:07,460
it all kind of works the same way so

00:16:04,070 --> 00:16:09,500
first we create a new font face observer

00:16:07,460 --> 00:16:10,880
for each family and the object and these

00:16:09,500 --> 00:16:12,590
will each return a promise that is

00:16:10,880 --> 00:16:14,930
resolved when the font has loaded or

00:16:12,590 --> 00:16:17,030
rejected if the font fails in the

00:16:14,930 --> 00:16:18,470
promise may handle two use cases so in

00:16:17,030 --> 00:16:20,450
the event of the promise being fulfilled

00:16:18,470 --> 00:16:22,220
we add that fonts loaded class to the

00:16:20,450 --> 00:16:24,950
body that will trigger the typeface from

00:16:22,220 --> 00:16:27,230
our CSS and then apply the calendars

00:16:24,950 --> 00:16:28,370
plus typeface which looks so nice and so

00:16:27,230 --> 00:16:31,160
it ends up kind of looking something

00:16:28,370 --> 00:16:33,350
like this where like if she didn't catch

00:16:31,160 --> 00:16:36,410
it it just loaded in the new font whoo

00:16:33,350 --> 00:16:38,120
there we go nice alright so the next

00:16:36,410 --> 00:16:40,670
part that we want to do is we kind of

00:16:38,120 --> 00:16:43,190
want to minimize that like shift between

00:16:40,670 --> 00:16:46,610
one typeface and the other so we want to

00:16:43,190 --> 00:16:48,890
minimize that flash of unstyled text so

00:16:46,610 --> 00:16:50,540
to do this next part we're going to

00:16:48,890 --> 00:16:52,340
compare the font we have with the font

00:16:50,540 --> 00:16:54,020
we want when we're choosing our stack so

00:16:52,340 --> 00:16:55,700
this trick comes from Tim Brown who

00:16:54,020 --> 00:16:58,370
explains the philosophy by pulling a

00:16:55,700 --> 00:17:01,430
quote from Jason Santa Maria's book on

00:16:58,370 --> 00:17:03,050
web typography and he says the thing I

00:17:01,430 --> 00:17:04,850
try to avoid most of my designs is not

00:17:03,050 --> 00:17:07,250
fout but a jarring shift in the layout

00:17:04,850 --> 00:17:09,830
when a web font finishes loading the

00:17:07,250 --> 00:17:11,180
shift is usually usually due to sizing

00:17:09,830 --> 00:17:13,339
discrepancies between your layout and

00:17:11,180 --> 00:17:17,420
your system fonts and your web font so

00:17:13,339 --> 00:17:19,580
he's trying to say is is that it's

00:17:17,420 --> 00:17:22,400
comparing the difference between like

00:17:19,580 --> 00:17:25,390
the size of the typeface vertically and

00:17:22,400 --> 00:17:28,760
then the size of the typeface like

00:17:25,390 --> 00:17:30,840
horizontally so the way that Tim Brown

00:17:28,760 --> 00:17:32,640
handles this discrepancy is by matching

00:17:30,840 --> 00:17:34,799
his fallback font with his intended web

00:17:32,640 --> 00:17:38,580
fonts x-height which is what you see

00:17:34,799 --> 00:17:39,870
here and the typefaces with which is

00:17:38,580 --> 00:17:44,039
like the literal width of them just all

00:17:39,870 --> 00:17:45,750
laid out in the line so here I'm if you

00:17:44,039 --> 00:17:49,440
remember we're using calendars the

00:17:45,750 --> 00:17:51,360
closest web safe fonts I was Georgia and

00:17:49,440 --> 00:17:54,570
right now they're both set in just like

00:17:51,360 --> 00:17:56,010
36 points so this trick is fairly simple

00:17:54,570 --> 00:17:59,400
you just literally put them right on top

00:17:56,010 --> 00:18:03,029
of each other so when we do this we see

00:17:59,400 --> 00:18:04,830
that Georgia is actually both taller and

00:18:03,029 --> 00:18:06,570
wider than calendars is so it's gonna

00:18:04,830 --> 00:18:10,380
move the content when we load in the new

00:18:06,570 --> 00:18:14,789
font so to fix this problem we just bump

00:18:10,380 --> 00:18:17,130
down Georgia one point so we're gonna

00:18:14,789 --> 00:18:19,110
get a closer match between these two so

00:18:17,130 --> 00:18:20,549
here when we overlay them we now see

00:18:19,110 --> 00:18:22,169
that they have like similar X Heights

00:18:20,549 --> 00:18:26,010
they seem about the same height like

00:18:22,169 --> 00:18:28,020
vertically Georgia is still a little bit

00:18:26,010 --> 00:18:30,600
longer but it's a lot closer than that

00:18:28,020 --> 00:18:32,580
other version that we had as Tim Brown

00:18:30,600 --> 00:18:33,990
puts it he says the style doesn't matter

00:18:32,580 --> 00:18:36,570
so much it's just that it has to flow

00:18:33,990 --> 00:18:38,490
the same way you don't want entire words

00:18:36,570 --> 00:18:41,309
like moving around once the new font

00:18:38,490 --> 00:18:43,860
loads in alright so and you now need to

00:18:41,309 --> 00:18:45,990
change our CSS a little bit so instead

00:18:43,860 --> 00:18:48,860
of just applying serif which was what we

00:18:45,990 --> 00:18:51,840
did before we're applying Georgia first

00:18:48,860 --> 00:18:54,090
and then we're specifying a font size

00:18:51,840 --> 00:18:56,130
which is what we found we found that 35

00:18:54,090 --> 00:18:59,010
worked pretty well so we set the font

00:18:56,130 --> 00:19:02,279
size and then on calendars we 70 new

00:18:59,010 --> 00:19:04,649
font size so we go from 35 to 36 and it

00:19:02,279 --> 00:19:07,700
won't work because I spelled size wrong

00:19:04,649 --> 00:19:10,409
but it's fine all right

00:19:07,700 --> 00:19:12,870
okay so wait there's more we can do more

00:19:10,409 --> 00:19:14,970
all right so if you're loading in a

00:19:12,870 --> 00:19:17,279
typeface from Typekit or google fonts

00:19:14,970 --> 00:19:18,899
this is gonna get you pretty far already

00:19:17,279 --> 00:19:20,700
you know that you're gonna circumvent

00:19:18,899 --> 00:19:23,370
like that flash of visible text which is

00:19:20,700 --> 00:19:24,960
the worst and then you have a lazy load

00:19:23,370 --> 00:19:27,059
so that your users can read their text

00:19:24,960 --> 00:19:31,350
and get a nice web font which is awesome

00:19:27,059 --> 00:19:35,190
but we can still improve on this so for

00:19:31,350 --> 00:19:37,440
this next part okay so for this next

00:19:35,190 --> 00:19:40,559
part Zack leather men from filament

00:19:37,440 --> 00:19:43,169
group has this even more granular way

00:19:40,559 --> 00:19:43,710
that he handles lazy loading so he does

00:19:43,169 --> 00:19:46,350
is he

00:19:43,710 --> 00:19:49,500
what's up he splits up like the normal

00:19:46,350 --> 00:19:51,659
or Roman version of a web font from its

00:19:49,500 --> 00:19:53,159
italic bold bold italic all the

00:19:51,659 --> 00:19:56,880
different weights that you wanna load in

00:19:53,159 --> 00:19:59,549
and he only like he first just loads in

00:19:56,880 --> 00:20:02,010
the he splits them up into stages so

00:19:59,549 --> 00:20:04,649
he'll just load like the Roman and then

00:20:02,010 --> 00:20:08,039
he'll lazy load the italic bold bold

00:20:04,649 --> 00:20:13,950
italic like all afterward so he calls

00:20:08,039 --> 00:20:15,960
this flash of bow text so this is like

00:20:13,950 --> 00:20:18,210
the third one there are so many you're

00:20:15,960 --> 00:20:21,149
just gonna have to remember them moving

00:20:18,210 --> 00:20:24,240
on alright so he handles this using a

00:20:21,149 --> 00:20:26,399
polyfill called font face onload and it

00:20:24,240 --> 00:20:28,620
executes a callback when I'm font web

00:20:26,399 --> 00:20:30,570
font loads so to use it we load in his

00:20:28,620 --> 00:20:33,059
library and then we set up our loads to

00:20:30,570 --> 00:20:35,130
happen in stages so stage 1 we're

00:20:33,059 --> 00:20:36,899
loading in that like normal version of

00:20:35,130 --> 00:20:39,270
the typeface and then in stage 2 we're

00:20:36,899 --> 00:20:42,330
loading in you know like the italic and

00:20:39,270 --> 00:20:44,340
the bold so forth ease we're gonna use a

00:20:42,330 --> 00:20:46,529
typeface called Proxima Nova because

00:20:44,340 --> 00:20:50,399
it's popular and it has lots of

00:20:46,529 --> 00:20:52,440
different weights so here we're loading

00:20:50,399 --> 00:20:55,500
in just that Roman version of our

00:20:52,440 --> 00:20:57,450
typeface first so on completion for that

00:20:55,500 --> 00:20:58,679
variant we then have two more checks for

00:20:57,450 --> 00:20:59,220
the bold and light versions of your

00:20:58,679 --> 00:21:01,740
typeface

00:20:59,220 --> 00:21:04,020
if they succeed then we add a second

00:21:01,740 --> 00:21:05,940
success class to the top element of our

00:21:04,020 --> 00:21:09,360
page that our CSS knows when to apply

00:21:05,940 --> 00:21:12,690
like the correct font file so our CSS is

00:21:09,360 --> 00:21:14,100
a little crazier now so first we load in

00:21:12,690 --> 00:21:16,590
our web font using an @ font based

00:21:14,100 --> 00:21:19,200
declaration like we said before it

00:21:16,590 --> 00:21:21,570
doesn't do anything until like we apply

00:21:19,200 --> 00:21:24,120
it to something so because we're

00:21:21,570 --> 00:21:25,679
grouping them together so we actually

00:21:24,120 --> 00:21:28,260
are splitting them up so you'll see that

00:21:25,679 --> 00:21:30,000
I have like an @ font face for próximo

00:21:28,260 --> 00:21:31,049
Nova bold and then I have another one

00:21:30,000 --> 00:21:32,610
for light and then I have another one

00:21:31,049 --> 00:21:33,690
for regular if you group them all

00:21:32,610 --> 00:21:35,279
together then you're gonna get that

00:21:33,690 --> 00:21:42,179
flash of invisible text which is like

00:21:35,279 --> 00:21:44,429
numero uno want to avoid so first we're

00:21:42,179 --> 00:21:46,080
declaring our web safe fonts that

00:21:44,429 --> 00:21:47,820
closely match our desired font just like

00:21:46,080 --> 00:21:50,130
we did before you're familiar with this

00:21:47,820 --> 00:21:52,010
so the closest I could find a Proxima

00:21:50,130 --> 00:21:55,100
Nova on the Mac system was

00:21:52,010 --> 00:21:57,080
system font San Francisco but the system

00:21:55,100 --> 00:21:58,550
fallbacks for Windows and Linux didn't

00:21:57,080 --> 00:22:01,190
matches closely so instead of having the

00:21:58,550 --> 00:22:01,760
traditional fallbacks for Segoe UI and

00:22:01,190 --> 00:22:03,590
Tahoma

00:22:01,760 --> 00:22:07,490
for Windows and Linux I'm just setting

00:22:03,590 --> 00:22:09,080
it to Helvetica and then San serif next

00:22:07,490 --> 00:22:10,580
we set a loaded class called proximity

00:22:09,080 --> 00:22:12,050
overloaded where we set our desired web

00:22:10,580 --> 00:22:16,870
font and this is all stuff that you've

00:22:12,050 --> 00:22:19,520
seen before so the new stuff stage two

00:22:16,870 --> 00:22:22,100
here we start seeing some new code so we

00:22:19,520 --> 00:22:23,480
see a Proxima Nova be loaded class this

00:22:22,100 --> 00:22:25,760
is the class that our JavaScript sets

00:22:23,480 --> 00:22:27,500
when the italic and bold versions of our

00:22:25,760 --> 00:22:30,500
typeface have loaded on the HTML element

00:22:27,500 --> 00:22:32,600
we have to redefine in what instances we

00:22:30,500 --> 00:22:34,430
one italics and bold to load since we

00:22:32,600 --> 00:22:36,800
completely stripped them out earlier in

00:22:34,430 --> 00:22:39,560
favor of like the browser's algorithms

00:22:36,800 --> 00:22:42,110
for bolding and italicizing which is why

00:22:39,560 --> 00:22:44,030
we're resetting like a proper slot like

00:22:42,110 --> 00:22:46,370
the proper web font version of the

00:22:44,030 --> 00:22:49,550
italic on the M elements and resetting

00:22:46,370 --> 00:22:51,680
bolts on Strong's and headers to use the

00:22:49,550 --> 00:22:54,200
web fonts true bold and italics instead

00:22:51,680 --> 00:22:56,000
of the browser's all right so all of

00:22:54,200 --> 00:22:58,880
these have the potential to just like

00:22:56,000 --> 00:23:00,320
timeout and that's okay because your

00:22:58,880 --> 00:23:04,220
content still loads people can still

00:23:00,320 --> 00:23:05,870
read it so there's this talk by Kenneth

00:23:04,220 --> 00:23:07,880
or Mandi that's really wonderful on web

00:23:05,870 --> 00:23:09,770
typography and he tells the story about

00:23:07,880 --> 00:23:10,910
this printing press but he tells it a

00:23:09,770 --> 00:23:13,150
hundred years after Gutenberg in the

00:23:10,910 --> 00:23:15,170
story that we just covered earlier so a

00:23:13,150 --> 00:23:17,780
hundred years after the printing press

00:23:15,170 --> 00:23:20,120
was created a man named Pierre Alton was

00:23:17,780 --> 00:23:21,860
trying to recreate Gutenberg's greatest

00:23:20,120 --> 00:23:24,140
accomplishment which was printing the

00:23:21,860 --> 00:23:25,160
Bible but Oldtown wants to do it for

00:23:24,140 --> 00:23:26,630
completely different reasons for

00:23:25,160 --> 00:23:28,880
Gutenberg Gutenberg just wants to be

00:23:26,630 --> 00:23:30,560
able to do it say that he could but

00:23:28,880 --> 00:23:32,930
whole town wants to print like a mini

00:23:30,560 --> 00:23:35,750
Bible and that's because holton is a

00:23:32,930 --> 00:23:37,910
Protestant living in very Catholic

00:23:35,750 --> 00:23:41,900
France where he's unable to lug around

00:23:37,910 --> 00:23:43,340
like a giant Catholic Bible or sorry a

00:23:41,900 --> 00:23:45,710
giant Protestant Bible that he could get

00:23:43,340 --> 00:23:48,230
caught with and prosecuted for

00:23:45,710 --> 00:23:52,220
practicing this religion so you want to

00:23:48,230 --> 00:23:54,980
know what his solution was yeah okay it

00:23:52,220 --> 00:23:56,660
was to make a better printing press okay

00:23:54,980 --> 00:23:58,610
so that seems obvious like once we say

00:23:56,660 --> 00:24:00,290
it like okay duh I created a better

00:23:58,610 --> 00:24:01,730
printing press but I think it

00:24:00,290 --> 00:24:05,580
extrapolates to our problems with web

00:24:01,730 --> 00:24:08,850
fonts so as of last week HTTP archive

00:24:05,580 --> 00:24:12,000
chart saying that 63% of websites on on

00:24:08,850 --> 00:24:14,490
the like have some sort of custom font

00:24:12,000 --> 00:24:16,320
of some sort and that to me shows that

00:24:14,490 --> 00:24:17,430
we want to be able to use custom fonts

00:24:16,320 --> 00:24:20,280
we just haven't figured out the

00:24:17,430 --> 00:24:23,340
efficiency part yet we're still lugging

00:24:20,280 --> 00:24:24,570
around big oversized Catholic Bibles and

00:24:23,340 --> 00:24:26,580
we need to figure out how to downsize

00:24:24,570 --> 00:24:28,620
them and that's not saying that things

00:24:26,580 --> 00:24:30,510
won't change its and that we can't build

00:24:28,620 --> 00:24:32,130
better printing presses Monday it's sort

00:24:30,510 --> 00:24:34,230
of up to us to do it

00:24:32,130 --> 00:24:36,740
so I think that as developers we

00:24:34,230 --> 00:24:39,000
sometimes can over execute on

00:24:36,740 --> 00:24:40,620
performance we optimize everything

00:24:39,000 --> 00:24:41,970
without thinking about trade-offs and

00:24:40,620 --> 00:24:43,920
the things we lose by optimizing

00:24:41,970 --> 00:24:46,080
everything so instead of letting

00:24:43,920 --> 00:24:47,580
performance dictate design are there

00:24:46,080 --> 00:24:49,860
ways that we can build great designs

00:24:47,580 --> 00:24:51,570
that are performant and how can we make

00:24:49,860 --> 00:24:54,570
technology that supports the kinds of

00:24:51,570 --> 00:24:57,060
designs that benefit our users I don't

00:24:54,570 --> 00:24:58,680
have answers for these things they're

00:24:57,060 --> 00:24:59,910
open-ended I don't even think they're

00:24:58,680 --> 00:25:01,470
just questions for us in the room but

00:24:59,910 --> 00:25:03,300
they're like questions for everyone who

00:25:01,470 --> 00:25:05,730
builds websites and who cares about

00:25:03,300 --> 00:25:07,470
their users so we've decided that as an

00:25:05,730 --> 00:25:10,200
industry based on those HTTP archive

00:25:07,470 --> 00:25:11,700
numbers that we want web fonts so how

00:25:10,200 --> 00:25:13,680
can we make better printing presses

00:25:11,700 --> 00:25:17,160
all right so stock for you to follow up

00:25:13,680 --> 00:25:18,330
with this if you really like type Ellen

00:25:17,160 --> 00:25:20,970
Lupton has a book called thinking with

00:25:18,330 --> 00:25:22,740
type and it's completely designed it's

00:25:20,970 --> 00:25:25,020
very interesting if you want to work

00:25:22,740 --> 00:25:27,000
with open type on the web they're really

00:25:25,020 --> 00:25:28,680
great helper libraries Kenneth Normandy

00:25:27,000 --> 00:25:30,240
has one called utility open type and

00:25:28,680 --> 00:25:32,010
another one called normalized open type

00:25:30,240 --> 00:25:33,360
they make working with open type a lot

00:25:32,010 --> 00:25:36,540
easier

00:25:33,360 --> 00:25:38,640
Zac Leatherman whose performance loading

00:25:36,540 --> 00:25:40,530
techniques I went over he has like a

00:25:38,640 --> 00:25:42,210
bunch of research and he did gets even

00:25:40,530 --> 00:25:44,010
more crazy with all these data array

00:25:42,210 --> 00:25:46,890
techniques that I didn't even cover so

00:25:44,010 --> 00:25:49,410
that's also worth looking at if you want

00:25:46,890 --> 00:25:53,010
to read like a blog version of this talk

00:25:49,410 --> 00:25:55,550
I have it hosted here I literally switch

00:25:53,010 --> 00:25:58,740
the DNS at 3:00 a.m. this morning so

00:25:55,550 --> 00:26:02,640
hopefully it works if it doesn't it will

00:25:58,740 --> 00:26:04,410
later and if you want to follow me on

00:26:02,640 --> 00:26:06,870
Twitter I'm writing a follow-up to this

00:26:04,410 --> 00:26:09,510
talk called all typefaces have histories

00:26:06,870 --> 00:26:13,020
which is about like how typefaces you

00:26:09,510 --> 00:26:16,659
choose invoke feelings based on sort of

00:26:13,020 --> 00:26:18,279
their own histories then

00:26:16,659 --> 00:26:20,109
but not least I'm over at the developer

00:26:18,279 --> 00:26:22,119
tools corner in the other room sharing

00:26:20,109 --> 00:26:23,979
tips for working with Firefox dev tools

00:26:22,119 --> 00:26:24,580
with my lovely colleagues so please stop

00:26:23,979 --> 00:26:27,999
by and say hello

00:26:24,580 --> 00:26:29,169
and then lastly thank you so much to

00:26:27,999 --> 00:26:32,129
view source for having me and thank you

00:26:29,169 --> 00:26:32,129

YouTube URL: https://www.youtube.com/watch?v=emLfXChvVPQ


