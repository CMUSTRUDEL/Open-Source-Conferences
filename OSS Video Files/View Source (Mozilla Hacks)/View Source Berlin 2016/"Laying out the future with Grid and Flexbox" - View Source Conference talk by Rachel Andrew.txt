Title: "Laying out the future with Grid and Flexbox" - View Source Conference talk by Rachel Andrew
Publication date: 2016-10-03
Playlist: View Source Berlin 2016
Description: 
	It is 2016. CSS is now 20 years old, and it has taken this long for us to get a true layout system designed for web pages and applications. A layout system, not based on hacking properties designed for something else entirely, but one that considers the reality of design for the web today.

In this talk I’ll introduce this new layout system, a system encompassing Flexbox, CSS Grid Layout and the Box Alignment Module. We’ll take a look at the mindset shift needed to really take advantage of these modules, and also consider what they mean in terms of accessibility and performance. 

View Source Berlin 12-14 September, 2016

 Rachel Andrew lives in Bristol, England. She is one half of web development company edgeofmyseat.com, the company behind Perch CMS (grabaperch.com).

Rachel has been working on the web since 1996 and writing about the web for almost as long. Her books include the recent Get Ready for CSS Grid Layout and HTML5 for Web Designers second edition. She is a regular columnist for A List Apart as well as other publications online and print. You can find her on Twitter as @rachelandrew and writing about technology and business on her blog at rachelandrew.co.uk.
Captions: 
	00:00:06,540 --> 00:00:13,090
so I'm Rachel Andrew and I've been

00:00:09,700 --> 00:00:14,700
working with CSS since it first appeared

00:00:13,090 --> 00:00:16,770
in

00:00:14,700 --> 00:00:18,890
to me quite old but I'm still here and

00:00:16,770 --> 00:00:23,400
I'm still enjoying it that's good and

00:00:18,890 --> 00:00:25,710
CSS today is absolutely amazing I'm

00:00:23,400 --> 00:00:28,140
still as excited about the stuff that's

00:00:25,710 --> 00:00:30,779
coming into CSS I wasn't at first saw

00:00:28,140 --> 00:00:33,270
CSS for the first time but there's one

00:00:30,779 --> 00:00:38,399
part of CSS that seemed to get itself

00:00:33,270 --> 00:00:41,340
kind of stuck in 2006 and that's layout

00:00:38,399 --> 00:00:43,680
we're using CSS for layouts that was

00:00:41,340 --> 00:00:46,460
never designed for doing full page

00:00:43,680 --> 00:00:48,660
layout of complex applications

00:00:46,460 --> 00:00:50,310
techniques such as floats and

00:00:48,660 --> 00:00:51,780
positioning they weren't designed for

00:00:50,310 --> 00:00:53,790
layout as we know it now they were

00:00:51,780 --> 00:00:55,200
designed for the layout that goes back

00:00:53,790 --> 00:00:56,910
to the sort of stuff that Jamie was

00:00:55,200 --> 00:00:59,370
talking about yesterday

00:00:56,910 --> 00:01:01,890
simple academic documents with a few

00:00:59,370 --> 00:01:03,720
images that needed to be laid out they

00:01:01,890 --> 00:01:05,369
certainly weren't for responsive web

00:01:03,720 --> 00:01:07,560
applications and that's the sort of

00:01:05,369 --> 00:01:10,950
thing we're trying to build now and so

00:01:07,560 --> 00:01:13,409
when you view source on the web you can

00:01:10,950 --> 00:01:14,009
often see things like this just from

00:01:13,409 --> 00:01:16,770
bootstrap

00:01:14,009 --> 00:01:20,310
you see all these class names and extra

00:01:16,770 --> 00:01:22,439
redundant bits of markup and what we're

00:01:20,310 --> 00:01:24,810
doing here is we're describing our

00:01:22,439 --> 00:01:28,079
layout in markup which is a pretty

00:01:24,810 --> 00:01:29,909
heavy-handed way of styling our pages it

00:01:28,079 --> 00:01:31,139
makes it harder to add new breakpoints

00:01:29,909 --> 00:01:34,079
for different devices and it's

00:01:31,139 --> 00:01:37,109
conceptually very very heavy but we're

00:01:34,079 --> 00:01:39,030
doing that because layout is hard it's

00:01:37,109 --> 00:01:40,380
fragile and we have business goals to

00:01:39,030 --> 00:01:43,289
meet we're actually building things that

00:01:40,380 --> 00:01:47,939
are important you know I use these tools

00:01:43,289 --> 00:01:50,219
too but there is hope and that hopeful

00:01:47,939 --> 00:01:52,170
layout comes with a group of CSS modules

00:01:50,219 --> 00:01:54,539
that are going to redefine how we do

00:01:52,170 --> 00:01:57,329
layout on the web and that's flexbox

00:01:54,539 --> 00:02:00,090
grid layout and box alignment level 3

00:01:57,329 --> 00:02:02,459
and they work together as a new layout

00:02:00,090 --> 00:02:06,450
system really the first layout system

00:02:02,459 --> 00:02:09,270
we've had for the web but first the bad

00:02:06,450 --> 00:02:13,080
news browser support for the biggest of

00:02:09,270 --> 00:02:14,040
these three specs grid layout looks like

00:02:13,080 --> 00:02:17,730
this

00:02:14,040 --> 00:02:20,099
ie only and that's because this

00:02:17,730 --> 00:02:22,440
specification actually originated with

00:02:20,099 --> 00:02:24,900
Internet Explorer the first draft was

00:02:22,440 --> 00:02:26,770
implemented in IE 10 so you can say

00:02:24,900 --> 00:02:28,690
thank you to Microsoft in the I eat

00:02:26,770 --> 00:02:31,210
for the fact that we have grids at all

00:02:28,690 --> 00:02:33,100
and you can see all the little flags on

00:02:31,210 --> 00:02:35,170
the other browsers there and those

00:02:33,100 --> 00:02:38,080
indicate the grid is behind a feature

00:02:35,170 --> 00:02:41,140
flag in those browsers so unless you're

00:02:38,080 --> 00:02:42,640
using a Firefox or WebKit nightly or spy

00:02:41,140 --> 00:02:44,680
technology preview you're going to it

00:02:42,640 --> 00:02:47,290
have to enable a flag to see grid

00:02:44,680 --> 00:02:49,240
working and because supports a moving

00:02:47,290 --> 00:02:51,850
target I've got a list of where we are

00:02:49,240 --> 00:02:53,680
with browsers how to enable grid links

00:02:51,850 --> 00:02:58,570
the meta bugs and more at that year

00:02:53,680 --> 00:03:00,370
around flexbox at this point is looking

00:02:58,570 --> 00:03:02,920
a lot more healthy I'm sure a lot of you

00:03:00,370 --> 00:03:04,810
are already using it and hopefully this

00:03:02,920 --> 00:03:06,880
talk will show you how your flexbox

00:03:04,810 --> 00:03:09,580
knowledge can be transferred into the

00:03:06,880 --> 00:03:11,380
rest of this new layout system and will

00:03:09,580 --> 00:03:16,750
help you understand grid as it starts to

00:03:11,380 --> 00:03:19,150
ship into browsers so these new layout

00:03:16,750 --> 00:03:21,520
methods we like to talk about them in

00:03:19,150 --> 00:03:23,770
terms of the problems that they solve

00:03:21,520 --> 00:03:26,020
for us and the reason they can solve

00:03:23,770 --> 00:03:28,150
these problems is because they have some

00:03:26,020 --> 00:03:31,330
characteristics that we don't see in our

00:03:28,150 --> 00:03:33,160
existing methods things like float so

00:03:31,330 --> 00:03:36,670
they properly separate our document

00:03:33,160 --> 00:03:38,920
source order and visual display they

00:03:36,670 --> 00:03:40,630
give us true alignment control giving us

00:03:38,920 --> 00:03:43,630
the ability to Center things both

00:03:40,630 --> 00:03:46,120
horizontally and vertically and they're

00:03:43,630 --> 00:03:47,980
responsive by default they remove the

00:03:46,120 --> 00:03:50,880
need to calculate percentages to make

00:03:47,980 --> 00:03:53,110
columns fit at different breakpoints and

00:03:50,880 --> 00:03:55,510
importantly they give elements

00:03:53,110 --> 00:03:58,060
relationship in terms of the layout to

00:03:55,510 --> 00:03:59,620
each other and that's not the case for

00:03:58,060 --> 00:04:01,330
layout methods such as float and

00:03:59,620 --> 00:04:03,490
positioning where each item is

00:04:01,330 --> 00:04:08,410
positioned kind of alone in a layout it

00:04:03,490 --> 00:04:10,120
knows nothing about a lot of the

00:04:08,410 --> 00:04:12,130
problems in these existing systems

00:04:10,120 --> 00:04:14,830
happen because we can't tell one element

00:04:12,130 --> 00:04:16,720
than it needs to respond to another if I

00:04:14,830 --> 00:04:18,730
float two blocks left and right and one

00:04:16,720 --> 00:04:20,950
is shorter than the other I've got no

00:04:18,730 --> 00:04:22,690
way to tell the shorter block hey could

00:04:20,950 --> 00:04:24,430
you just be as tall as that one next to

00:04:22,690 --> 00:04:26,380
you it just doesn't know it's there and

00:04:24,430 --> 00:04:29,560
we've been trying to create these full

00:04:26,380 --> 00:04:31,030
height columns for years if you're old

00:04:29,560 --> 00:04:33,430
like me you might remember the faux

00:04:31,030 --> 00:04:35,830
columns technique using a vertically

00:04:33,430 --> 00:04:37,360
tiled background image to create the

00:04:35,830 --> 00:04:41,349
visual impression of

00:04:37,360 --> 00:04:43,659
full-height column it's why people

00:04:41,349 --> 00:04:46,180
jumped on the idea of using display

00:04:43,659 --> 00:04:48,400
table I wrote half a book on it by

00:04:46,180 --> 00:04:50,560
turning elements into a CSS table we

00:04:48,400 --> 00:04:53,699
gave them an understanding of how they

00:04:50,560 --> 00:04:54,909
sat in a wider layout context and

00:04:53,699 --> 00:04:57,310
flexbox

00:04:54,909 --> 00:04:58,689
and grid take this idea and really run

00:04:57,310 --> 00:04:59,909
with it and that's where a lot of that

00:04:58,689 --> 00:05:02,439
power comes from

00:04:59,909 --> 00:05:04,240
so those full height columns that's

00:05:02,439 --> 00:05:07,030
pretty much the basic behavior of

00:05:04,240 --> 00:05:09,430
flexbox and grid so this is a simple

00:05:07,030 --> 00:05:11,229
flex box example taking advantage of the

00:05:09,430 --> 00:05:13,990
initial default values of the Flex

00:05:11,229 --> 00:05:16,539
properties our sidebar on our content or

00:05:13,990 --> 00:05:18,340
inside a Flex container so the sidebar

00:05:16,539 --> 00:05:20,529
runs to the height of the content area

00:05:18,340 --> 00:05:23,319
the background color extends all the way

00:05:20,529 --> 00:05:26,830
to the bottom and here's how we do that

00:05:23,319 --> 00:05:28,599
with grid so I've created a grid on my

00:05:26,830 --> 00:05:31,419
wrapper element and positioned my

00:05:28,599 --> 00:05:34,509
sidebar and my content using line based

00:05:31,419 --> 00:05:36,849
positioning in all of the examples in

00:05:34,509 --> 00:05:38,650
this presentation this concept of

00:05:36,849 --> 00:05:40,629
elements understanding their place

00:05:38,650 --> 00:05:46,479
alongside the rest of the layout is

00:05:40,629 --> 00:05:48,009
really important so for almost as long

00:05:46,479 --> 00:05:50,139
as I've been developing web sites

00:05:48,009 --> 00:05:52,479
certainly since CSS layout came along

00:05:50,139 --> 00:05:55,479
we've talked about this separation of

00:05:52,479 --> 00:05:57,699
content and markup from display that was

00:05:55,479 --> 00:05:59,710
really the rallying cry of the CSS for

00:05:57,699 --> 00:06:02,110
layout movement we tried to explain to

00:05:59,710 --> 00:06:04,060
our nested table loving friends why they

00:06:02,110 --> 00:06:06,129
should move and use CSS for layout at

00:06:04,060 --> 00:06:08,469
all but it was something of a failed

00:06:06,129 --> 00:06:11,110
promise and especially once responsive

00:06:08,469 --> 00:06:13,719
design came along it's very very hard to

00:06:11,110 --> 00:06:15,849
get the ideal document structure as well

00:06:13,719 --> 00:06:17,800
as the ideal layout at different

00:06:15,849 --> 00:06:23,110
breakpoints without compromising one of

00:06:17,800 --> 00:06:25,779
them so here's flex box were laying out

00:06:23,110 --> 00:06:27,879
some navigation with Flex box was very

00:06:25,779 --> 00:06:28,750
very simply the Flex Direction property

00:06:27,879 --> 00:06:31,060
is set to row

00:06:28,750 --> 00:06:32,500
Yanis the initial value of flex box we

00:06:31,060 --> 00:06:34,210
don't specify anything and you could

00:06:32,500 --> 00:06:37,330
also use column we should display the

00:06:34,210 --> 00:06:39,639
items in a column we can switch the

00:06:37,330 --> 00:06:40,900
visual order of flex items by setting

00:06:39,639 --> 00:06:45,250
the Flex Direction property to row

00:06:40,900 --> 00:06:47,949
reverse or column reverse we can also

00:06:45,250 --> 00:06:49,630
explicitly set the order using the order

00:06:47,949 --> 00:06:50,330
property so I've got a bunch of items

00:06:49,630 --> 00:06:51,680
here

00:06:50,330 --> 00:06:53,270
and they're inside a Flex container

00:06:51,680 --> 00:06:54,409
they're in sauce order so I've given

00:06:53,270 --> 00:06:57,889
them a number so we can see their

00:06:54,409 --> 00:06:59,750
natural order and I can just change the

00:06:57,889 --> 00:07:01,669
order with the order property so the

00:06:59,750 --> 00:07:06,919
sauce orders number one is now three

00:07:01,669 --> 00:07:09,319
visually CSS grid gives us the power to

00:07:06,919 --> 00:07:11,900
change where things are in not one but

00:07:09,319 --> 00:07:14,599
in two dimensions so here I've got a

00:07:11,900 --> 00:07:17,680
parent element sets display grid and I'm

00:07:14,599 --> 00:07:20,210
creating a grid with three columns and

00:07:17,680 --> 00:07:22,310
positioning items around that grid again

00:07:20,210 --> 00:07:29,270
using the grid column and grid road

00:07:22,310 --> 00:07:31,639
properties and so we can do this and we

00:07:29,270 --> 00:07:33,349
can leave whitespace and that's fine the

00:07:31,639 --> 00:07:35,539
constraint here is that grid items like

00:07:33,349 --> 00:07:37,250
flex items need to be a direct child of

00:07:35,539 --> 00:07:38,750
the element that's become a grid

00:07:37,250 --> 00:07:42,969
container but then we can position

00:07:38,750 --> 00:07:45,949
things in two dimensions around a grid

00:07:42,969 --> 00:07:47,810
in addition to this placing of items

00:07:45,949 --> 00:07:50,509
deciding where we want things to certain

00:07:47,810 --> 00:07:52,849
our grid grid layout also includes a set

00:07:50,509 --> 00:07:55,340
of auto placement rules and they allow

00:07:52,849 --> 00:07:57,110
us to take a chunk of content hand it to

00:07:55,340 --> 00:08:01,250
a grid that we've created and grid we'll

00:07:57,110 --> 00:08:03,050
just lay it out for us so if I removed

00:08:01,250 --> 00:08:05,629
all the positioning information from the

00:08:03,050 --> 00:08:07,639
previous example I'd get this these are

00:08:05,629 --> 00:08:13,009
my child items just laying themselves

00:08:07,639 --> 00:08:14,659
out one in each grid cell if I add some

00:08:13,009 --> 00:08:16,580
more images to that gallery and some of

00:08:14,659 --> 00:08:18,680
those images are landscape and what I'd

00:08:16,580 --> 00:08:21,319
like is landscape images to display

00:08:18,680 --> 00:08:23,960
across two tracts of the grid so I'm

00:08:21,319 --> 00:08:26,419
adding a class to my li elements that

00:08:23,960 --> 00:08:28,339
contain a landscape image and then

00:08:26,419 --> 00:08:30,770
setting the grid column end property to

00:08:28,339 --> 00:08:32,990
span two lines so that's going to have

00:08:30,770 --> 00:08:35,180
this effect of making landscape images

00:08:32,990 --> 00:08:38,870
to span two tracks while portrait one's

00:08:35,180 --> 00:08:41,180
stay with the default one track and we

00:08:38,870 --> 00:08:43,130
get this so the grid auto placement

00:08:41,180 --> 00:08:45,829
algorithm comes along it lays out our

00:08:43,130 --> 00:08:48,500
items and sometimes so between our

00:08:45,829 --> 00:08:49,399
images here two and three the items were

00:08:48,500 --> 00:08:51,440
fit on one line

00:08:49,399 --> 00:08:53,720
so grid just leaves a gap and carries on

00:08:51,440 --> 00:08:57,980
on the next line it keeps the elements

00:08:53,720 --> 00:09:02,350
in source order but if we add a property

00:08:57,980 --> 00:09:04,160
of grid autoflow with a value of dense

00:09:02,350 --> 00:09:06,920
grid we'll now

00:09:04,160 --> 00:09:09,350
backfill the gaps it moves through the

00:09:06,920 --> 00:09:11,720
content it finds an image that will fill

00:09:09,350 --> 00:09:13,759
a gap already left and so it picks that

00:09:11,720 --> 00:09:16,370
up and it places it into the space

00:09:13,759 --> 00:09:19,040
taking it out of dom order you can see

00:09:16,370 --> 00:09:21,079
the item for now becomes before item 3

00:09:19,040 --> 00:09:23,149
in the visual display which is

00:09:21,079 --> 00:09:29,180
absolutely fantastic for your image

00:09:23,149 --> 00:09:31,490
gallery not so great for your form so

00:09:29,180 --> 00:09:34,459
there is a huge implication here in

00:09:31,490 --> 00:09:36,740
terms of accessibility what happens if

00:09:34,459 --> 00:09:39,379
the visual display ends up totally out

00:09:36,740 --> 00:09:40,879
of sync with the source order what

00:09:39,379 --> 00:09:45,500
happens for people tabbing around the

00:09:40,879 --> 00:09:47,180
document for example ideally these new

00:09:45,500 --> 00:09:49,939
methods should enable us to create the

00:09:47,180 --> 00:09:51,589
most accessible source documents then

00:09:49,939 --> 00:09:53,240
use the power of reordering to display

00:09:51,589 --> 00:09:55,370
things in the most optimal way for each

00:09:53,240 --> 00:09:56,930
break point considering how someone

00:09:55,370 --> 00:09:59,350
tabbing around with the keyboard for

00:09:56,930 --> 00:10:02,120
example might be using the document I

00:09:59,350 --> 00:10:04,069
think there's a real danger however that

00:10:02,120 --> 00:10:06,170
the reordering capability will encourage

00:10:04,069 --> 00:10:10,459
people to simply forget about source

00:10:06,170 --> 00:10:12,980
order or even worse because elements

00:10:10,459 --> 00:10:15,079
only become flex or grid items if they

00:10:12,980 --> 00:10:17,870
are a direct child to the Flex or grid

00:10:15,079 --> 00:10:19,779
container will there be a temptation for

00:10:17,870 --> 00:10:22,819
authoring tools or developers themselves

00:10:19,779 --> 00:10:24,709
to start to strip semantic markup

00:10:22,819 --> 00:10:29,540
flattening out the source to make

00:10:24,709 --> 00:10:31,819
everything a child of the grid the

00:10:29,540 --> 00:10:34,699
editors draft said for flex but son

00:10:31,819 --> 00:10:36,410
grids warned against this order

00:10:34,699 --> 00:10:38,209
shouldn't change how a document is read

00:10:36,410 --> 00:10:40,399
out in text-to-speech or change anything

00:10:38,209 --> 00:10:42,259
about the logical order so when we're

00:10:40,399 --> 00:10:44,689
doing this reordering with Flex box and

00:10:42,259 --> 00:10:46,790
grid it should be for visual reasons not

00:10:44,689 --> 00:10:50,240
changing the logical document structure

00:10:46,790 --> 00:10:52,040
and I'd really encourage anyone who is

00:10:50,240 --> 00:10:54,199
looking at this new layout stuff to

00:10:52,040 --> 00:10:56,269
watch this video and formerly only

00:10:54,199 --> 00:10:58,730
Watson and because she demonstrates with

00:10:56,269 --> 00:11:00,500
a screen reader how the problems you

00:10:58,730 --> 00:11:02,509
know actually manifest themselves and

00:11:00,500 --> 00:11:04,220
it's really really worth having a look

00:11:02,509 --> 00:11:06,559
at that as you starting to use these new

00:11:04,220 --> 00:11:08,360
techniques and just to understand the

00:11:06,559 --> 00:11:10,220
potential accessibility problems I think

00:11:08,360 --> 00:11:15,559
we've got as a community lots of

00:11:10,220 --> 00:11:17,510
discussions to have around this stuff so

00:11:15,559 --> 00:11:19,190
moving away from reordering

00:11:17,510 --> 00:11:20,720
it does appear that the hardest

00:11:19,190 --> 00:11:23,330
challenge and web design has been

00:11:20,720 --> 00:11:27,680
vertical alignment and that is something

00:11:23,330 --> 00:11:29,600
that our new layout method solve and

00:11:27,680 --> 00:11:31,370
this is why I bring a new player into

00:11:29,600 --> 00:11:33,530
the picture this is the CSS box

00:11:31,370 --> 00:11:35,950
alignment module it contains the

00:11:33,530 --> 00:11:38,690
features of CSS that relate to alignment

00:11:35,950 --> 00:11:40,460
and what it does is it brings all the

00:11:38,690 --> 00:11:41,360
really cool alignment things from

00:11:40,460 --> 00:11:43,490
flexbox

00:11:41,360 --> 00:11:46,190
into a separate module so that it can be

00:11:43,490 --> 00:11:47,870
used by other CSS modules at the moment

00:11:46,190 --> 00:11:49,340
we're seeing that implemented in grid

00:11:47,870 --> 00:11:51,590
layout but there's no reason why it

00:11:49,340 --> 00:11:55,040
couldn't become a part of other kinds of

00:11:51,590 --> 00:11:56,810
layout in the future so this basically

00:11:55,040 --> 00:11:58,700
is the vertical centering module

00:11:56,810 --> 00:11:59,870
although it's more than just vertical

00:11:58,700 --> 00:12:01,880
centering it covers things like

00:11:59,870 --> 00:12:05,930
distribution of space overflows and

00:12:01,880 --> 00:12:08,780
logical positioning so we get a set of

00:12:05,930 --> 00:12:10,130
alignment properties I could easily use

00:12:08,780 --> 00:12:13,370
half an hour just talking about

00:12:10,130 --> 00:12:15,680
alignment but very quickly we've already

00:12:13,370 --> 00:12:17,780
seen one value of box alignment in this

00:12:15,680 --> 00:12:20,030
very simple flex box example justify

00:12:17,780 --> 00:12:24,530
content space between spaces are items

00:12:20,030 --> 00:12:27,230
out evenly we can do exactly the same on

00:12:24,530 --> 00:12:29,420
a grid container assuming the total

00:12:27,230 --> 00:12:30,770
width or height of that of the tracks is

00:12:29,420 --> 00:12:32,810
smaller than the size of the grid

00:12:30,770 --> 00:12:37,420
container we can use space around or

00:12:32,810 --> 00:12:40,160
space between to space things out and

00:12:37,420 --> 00:12:43,300
alignment here I've got four items in a

00:12:40,160 --> 00:12:45,890
list were laying those out with Flex box

00:12:43,300 --> 00:12:47,840
now the first item is a portrait image

00:12:45,890 --> 00:12:49,670
and it's at the default stretch that's

00:12:47,840 --> 00:12:51,740
the tallest item so it's dictating the

00:12:49,670 --> 00:12:55,100
height of our Flex container so our

00:12:51,740 --> 00:12:56,780
second item is then centered the third

00:12:55,100 --> 00:12:58,700
item is aligned to the start and the

00:12:56,780 --> 00:13:01,040
fourth is aligned to the end

00:12:58,700 --> 00:13:03,650
and we can do exactly the same with grid

00:13:01,040 --> 00:13:07,220
layout so I'm creating that same layout

00:13:03,650 --> 00:13:09,290
with grid and then for grid we have

00:13:07,220 --> 00:13:12,350
aligned self Center aligned self start

00:13:09,290 --> 00:13:14,030
and aligned self end in this case we're

00:13:12,350 --> 00:13:18,430
aligning the item inside the grid area

00:13:14,030 --> 00:13:18,430
which may be one or more grid cells

00:13:20,500 --> 00:13:26,240
being able to align items and groups of

00:13:23,960 --> 00:13:28,790
items is really important for responsive

00:13:26,240 --> 00:13:30,260
design it makes an awful lot easier to

00:13:28,790 --> 00:13:31,760
do that sort of stuff

00:13:30,260 --> 00:13:34,790
and that's the great thing about these

00:13:31,760 --> 00:13:36,860
new methods these methods have come

00:13:34,790 --> 00:13:38,960
about in a world where responsive design

00:13:36,860 --> 00:13:40,610
is already a thing and so they

00:13:38,960 --> 00:13:44,750
understand that that's the kind of

00:13:40,610 --> 00:13:47,570
layouts they're going to be part of it

00:13:44,750 --> 00:13:49,280
was actually 2009 when Ethan Marcotte

00:13:47,570 --> 00:13:51,170
wrote his ELISA part article and

00:13:49,280 --> 00:13:54,320
discussed his technique for creating

00:13:51,170 --> 00:13:56,150
fluid grids and this is the technique

00:13:54,320 --> 00:13:58,580
that left us all adding these unlikely

00:13:56,150 --> 00:14:00,650
looking percentage values to our designs

00:13:58,580 --> 00:14:02,360
and one of the reasons why many of us

00:14:00,650 --> 00:14:04,490
fall back on using frameworks or

00:14:02,360 --> 00:14:06,170
pre-processors to generate our grids

00:14:04,490 --> 00:14:08,090
because we don't want to be sat there

00:14:06,170 --> 00:14:12,560
with a calculator writing out strange

00:14:08,090 --> 00:14:15,050
percentages but these new layout methods

00:14:12,560 --> 00:14:17,030
they mean it really is time to retire a

00:14:15,050 --> 00:14:19,640
lot of those calculations because they

00:14:17,030 --> 00:14:23,000
do this stuff for us CSS works it all

00:14:19,640 --> 00:14:24,890
out for us the space between and space

00:14:23,000 --> 00:14:26,780
around values we've seen a very simple

00:14:24,890 --> 00:14:29,120
example of this they grow and shrink

00:14:26,780 --> 00:14:33,800
according to the available space in the

00:14:29,120 --> 00:14:36,770
container flexbox goes further than this

00:14:33,800 --> 00:14:40,190
however it allows us a distribute space

00:14:36,770 --> 00:14:41,630
in proportion between our items the Flex

00:14:40,190 --> 00:14:44,180
property is a shorthand for three

00:14:41,630 --> 00:14:49,820
properties flex grow black shrink and

00:14:44,180 --> 00:14:52,250
flex basis so here I'm setting Flex grow

00:14:49,820 --> 00:14:54,710
and flex rink to one which means that

00:14:52,250 --> 00:14:56,960
every box can grow and shrink to fit

00:14:54,710 --> 00:15:01,280
into the space but the ideal box width

00:14:56,960 --> 00:15:03,050
is 300 pixels which would give us three

00:15:01,280 --> 00:15:06,880
boxes of equal width because they can

00:15:03,050 --> 00:15:09,500
all grow and shrink the same amount if

00:15:06,880 --> 00:15:11,210
we allow the items to wrap and we add

00:15:09,500 --> 00:15:13,280
some extra items we can drag the window

00:15:11,210 --> 00:15:15,800
smaller and when the box gets smaller

00:15:13,280 --> 00:15:18,110
than 300 pixels a box will wrap onto

00:15:15,800 --> 00:15:21,620
line two to try and maintain that kind

00:15:18,110 --> 00:15:24,080
of width and as the boxes can grow from

00:15:21,620 --> 00:15:26,000
their Flex basis the boxes on row two

00:15:24,080 --> 00:15:27,530
where I've only got two boxes split the

00:15:26,000 --> 00:15:31,010
space between them they don't line up

00:15:27,530 --> 00:15:36,470
with the items above each row is treated

00:15:31,010 --> 00:15:38,450
as a Flex container of its own we can

00:15:36,470 --> 00:15:40,610
target individual items so I've added

00:15:38,450 --> 00:15:42,540
some rules here for box three all the

00:15:40,610 --> 00:15:46,620
boxes can grow and shrink from

00:15:42,540 --> 00:15:48,750
two pixels but box three can't grow too

00:15:46,620 --> 00:15:51,720
the boxes are stretching wider but it

00:15:48,750 --> 00:15:53,460
stays at 300 pixels so that's useful if

00:15:51,720 --> 00:15:55,020
you want to have some fixed elements

00:15:53,460 --> 00:15:56,700
inside your design you don't want them

00:15:55,020 --> 00:15:59,460
to grow and other things to take up the

00:15:56,700 --> 00:16:03,630
available space but there's more because

00:15:59,460 --> 00:16:05,610
we can use proportions as well so if we

00:16:03,630 --> 00:16:08,310
assign different values to the Flex grow

00:16:05,610 --> 00:16:10,740
of like shrink properties we can say how

00:16:08,310 --> 00:16:14,010
much we want the things to grow so I'd

00:16:10,740 --> 00:16:18,000
like box 3 2 flex grow to the other two

00:16:14,010 --> 00:16:19,650
boxes remain at the default of 1 in this

00:16:18,000 --> 00:16:21,870
case it doesn't mean that box 3 becomes

00:16:19,650 --> 00:16:24,120
twice the size of the other boxes it

00:16:21,870 --> 00:16:25,230
means that after the 300 pixel basis has

00:16:24,120 --> 00:16:27,540
been taken away from the available

00:16:25,230 --> 00:16:29,490
within the container the rest of the

00:16:27,540 --> 00:16:32,220
space is assigned to each item according

00:16:29,490 --> 00:16:35,310
to the Flex grow value and note this has

00:16:32,220 --> 00:16:39,360
no effect on the row below that's a

00:16:35,310 --> 00:16:40,680
different flex container as a tip you

00:16:39,360 --> 00:16:42,570
want to work at how different flex

00:16:40,680 --> 00:16:44,130
factors will add up here is a handy

00:16:42,570 --> 00:16:45,660
calculator you can stick in different

00:16:44,130 --> 00:16:47,400
values it'll tell you what you'll

00:16:45,660 --> 00:16:48,840
actually end up with it's quite useful

00:16:47,400 --> 00:16:54,690
for just getting your head around how it

00:16:48,840 --> 00:16:57,390
works so flex box lets you assign space

00:16:54,690 --> 00:16:59,670
line by line so row by row or column by

00:16:57,390 --> 00:17:01,980
column if you're working in columns grid

00:16:59,670 --> 00:17:04,770
takes the other approach we define a

00:17:01,980 --> 00:17:07,470
grid and then we fit items into it and

00:17:04,770 --> 00:17:10,830
to do this grid introduces a new unit

00:17:07,470 --> 00:17:12,480
the fr unit it's a fraction unit and if

00:17:10,830 --> 00:17:14,460
you understand how flex grow works

00:17:12,480 --> 00:17:17,130
you've got a head start in understanding

00:17:14,460 --> 00:17:19,380
the unit because like flex grow it

00:17:17,130 --> 00:17:21,720
allows you to assign a fraction of the

00:17:19,380 --> 00:17:24,840
available space in a grid container so

00:17:21,720 --> 00:17:27,300
let's take a quick look at that this is

00:17:24,840 --> 00:17:29,370
a very simple grid it's defining three

00:17:27,300 --> 00:17:31,980
columns all with one fraction unit as

00:17:29,370 --> 00:17:34,020
the width so that creates three equal

00:17:31,980 --> 00:17:35,820
width columns we don't need to add

00:17:34,020 --> 00:17:37,320
anything to the items we just create a

00:17:35,820 --> 00:17:41,310
grid and they get placed in it by the

00:17:37,320 --> 00:17:43,470
auto placement rules if I change my

00:17:41,310 --> 00:17:45,480
definition and create one 600 pixel

00:17:43,470 --> 00:17:48,090
column and to one fraction unit columns

00:17:45,480 --> 00:17:50,880
grid gives that fixed width element it's

00:17:48,090 --> 00:17:53,130
600 pixels 2 remaining space it divides

00:17:50,880 --> 00:17:55,360
up between the two one fraction unit

00:17:53,130 --> 00:17:57,040
columns

00:17:55,360 --> 00:17:58,960
if we change that last column 2/3

00:17:57,040 --> 00:18:01,420
fraction units the remaining space is

00:17:58,960 --> 00:18:04,500
divided into four and shared between the

00:18:01,420 --> 00:18:04,500
boxes in proportion

00:18:04,799 --> 00:18:10,660
unlike flexbox however we're setting the

00:18:07,809 --> 00:18:12,970
size of the complete column track if I

00:18:10,660 --> 00:18:15,130
add another row the proportions

00:18:12,970 --> 00:18:17,559
stay the same and this is the key

00:18:15,130 --> 00:18:21,070
difference between grid and flexbox for

00:18:17,559 --> 00:18:23,980
layout at a very basic level the two

00:18:21,070 --> 00:18:25,840
specs differ flexbox is designed for one

00:18:23,980 --> 00:18:29,440
dimensional layout that's laying things

00:18:25,840 --> 00:18:31,270
out in a row or as a column grid has

00:18:29,440 --> 00:18:36,660
been designed for two dimensional layout

00:18:31,270 --> 00:18:39,340
that's rows and columns at the same time

00:18:36,660 --> 00:18:41,620
so something nice about flexbox is the

00:18:39,340 --> 00:18:44,080
ability to get as many items as will fit

00:18:41,620 --> 00:18:47,080
in a row so as the window here gets

00:18:44,080 --> 00:18:49,780
smaller flexbox fits in as many items as

00:18:47,080 --> 00:18:52,210
possible using 300 pixels as the basis

00:18:49,780 --> 00:18:56,919
additional space distributed against

00:18:52,210 --> 00:18:59,200
each row equally and we can do this with

00:18:56,919 --> 00:19:01,419
grid in this case though we're creating

00:18:59,200 --> 00:19:03,940
flexible tracks and then placing the

00:19:01,419 --> 00:19:06,400
content into them so here I'm Auto

00:19:03,940 --> 00:19:08,320
filling as many columns of 300 pixels as

00:19:06,400 --> 00:19:10,720
will fit into my container as the

00:19:08,320 --> 00:19:12,520
maximum value is 1 fraction unit that

00:19:10,720 --> 00:19:14,590
means that any available space left over

00:19:12,520 --> 00:19:16,960
after I've done as many 300 pixels as I

00:19:14,590 --> 00:19:21,309
can gets distributed amongst the columns

00:19:16,960 --> 00:19:23,590
equally which gives us this so as you

00:19:21,309 --> 00:19:25,780
can see unlike flexbox items that go

00:19:23,590 --> 00:19:31,570
into the next row stay lined up in their

00:19:25,780 --> 00:19:33,490
column that's 2-dimensional soon

00:19:31,570 --> 00:19:35,380
practice we're going to be using grid

00:19:33,490 --> 00:19:37,179
and flexbox together

00:19:35,380 --> 00:19:40,419
choosing the right layout method each

00:19:37,179 --> 00:19:42,160
task we want to achieve so as a final

00:19:40,419 --> 00:19:44,650
demo I wanted to recreate a pattern I've

00:19:42,160 --> 00:19:46,780
seen on a number of websites a hero

00:19:44,650 --> 00:19:48,280
block with lots of different panels and

00:19:46,780 --> 00:19:52,510
sometimes they're used for navigation

00:19:48,280 --> 00:19:54,520
and I spotted this one on a tutorial

00:19:52,510 --> 00:19:57,070
site now the problem with these things

00:19:54,520 --> 00:19:59,169
as you'll see is that to get this neat

00:19:57,070 --> 00:20:01,240
lining up of items what tends to happen

00:19:59,169 --> 00:20:04,030
is people fix the height of their blocks

00:20:01,240 --> 00:20:05,770
so if additional content gets added that

00:20:04,030 --> 00:20:08,039
the contents bigger or something happens

00:20:05,770 --> 00:20:09,899
then what we end up with is overflows

00:20:08,039 --> 00:20:12,809
content getting cut off which isn't

00:20:09,899 --> 00:20:14,850
great now with grid layout and flexbox

00:20:12,809 --> 00:20:18,389
will create this kind of thing in a much

00:20:14,850 --> 00:20:21,419
more flexible manner so this is the

00:20:18,389 --> 00:20:22,859
thing i created i'm redefining the grid

00:20:21,419 --> 00:20:24,899
at two broke points after my initial

00:20:22,859 --> 00:20:26,850
mobile with essentially matching the

00:20:24,899 --> 00:20:30,529
example that i was playing with and so

00:20:26,850 --> 00:20:30,529
moving to a two of three column layout

00:20:31,759 --> 00:20:36,899
so the heights of the rows appear fixed

00:20:34,679 --> 00:20:39,239
at 150 pixels which is just like the

00:20:36,899 --> 00:20:41,669
design i was copying but as soon as i

00:20:39,239 --> 00:20:44,340
add extra content as you can see in the

00:20:41,669 --> 00:20:46,769
top right box there the row expands to

00:20:44,340 --> 00:20:48,779
contain the content and because that box

00:20:46,769 --> 00:20:51,090
needs to expand it expands right across

00:20:48,779 --> 00:20:53,399
the row so the two items to the left of

00:20:51,090 --> 00:20:56,369
it also get taller in order to take up

00:20:53,399 --> 00:20:58,259
that space so you've got more paragraphs

00:20:56,369 --> 00:21:00,179
in one and that's pushing out all of

00:20:58,259 --> 00:21:04,710
them but the thing all still lines up at

00:21:00,179 --> 00:21:05,970
the bottom nicely and this works by

00:21:04,710 --> 00:21:08,249
using the min/max

00:21:05,970 --> 00:21:09,450
function in my track sizing so min max

00:21:08,249 --> 00:21:12,389
something else that you'll see in the

00:21:09,450 --> 00:21:14,190
grid layout spec the grid auto rows

00:21:12,389 --> 00:21:17,549
property gives a height to the rows that

00:21:14,190 --> 00:21:19,679
grid creates as content is added I'm

00:21:17,549 --> 00:21:22,349
using min max here to get a track that

00:21:19,679 --> 00:21:24,029
is at least 150 pixels tall which then

00:21:22,349 --> 00:21:27,269
works according to my design that's my

00:21:24,029 --> 00:21:28,799
ideal look for this design but if more

00:21:27,269 --> 00:21:30,869
content gets into the box than I

00:21:28,799 --> 00:21:33,419
expected the layout doesn't have things

00:21:30,869 --> 00:21:36,710
overlapping it copes it just grows to

00:21:33,419 --> 00:21:39,509
auto so it grows bigger than 150 pixels

00:21:36,710 --> 00:21:42,749
so this means we can create these very

00:21:39,509 --> 00:21:44,099
precise layouts but that if they hit the

00:21:42,749 --> 00:21:46,529
real world of a content management

00:21:44,099 --> 00:21:47,869
system and someone who decides to add a

00:21:46,529 --> 00:21:50,519
lot more content than we ever thought

00:21:47,869 --> 00:21:54,029
they'll still work they'll cope with the

00:21:50,519 --> 00:21:56,159
extra content and I'm using flexbox as

00:21:54,029 --> 00:21:57,450
well inside the cells I want to push the

00:21:56,159 --> 00:22:00,389
content to the bottom of some of my

00:21:57,450 --> 00:22:05,879
cells and so I'm using flexbox there to

00:22:00,389 --> 00:22:07,649
get that kind of behavior I mentioned a

00:22:05,879 --> 00:22:09,869
CMS a lot of content these days comes

00:22:07,649 --> 00:22:12,419
out of a CMS we don't care if we create

00:22:09,869 --> 00:22:14,159
all of our content to fit the items and

00:22:12,419 --> 00:22:16,049
in the real world not all CMS's are

00:22:14,159 --> 00:22:18,509
great at preventing people adding more

00:22:16,049 --> 00:22:20,429
content as expected so in this case

00:22:18,509 --> 00:22:22,470
perhaps someone's come along and they've

00:22:20,429 --> 00:22:25,619
another box they've added one more box

00:22:22,470 --> 00:22:27,179
of content to the design and grid layout

00:22:25,619 --> 00:22:29,249
just copes with that it just adds a new

00:22:27,179 --> 00:22:30,600
box okay that box isn't as pretty as the

00:22:29,249 --> 00:22:32,669
others and it means that we've got a box

00:22:30,600 --> 00:22:34,259
at the bottom that we didn't expect but

00:22:32,669 --> 00:22:36,600
we're not getting overlapping content

00:22:34,259 --> 00:22:39,450
it's not broken people can come to the

00:22:36,600 --> 00:22:41,669
website and read the stuff this is where

00:22:39,450 --> 00:22:44,340
we're heading we're heading to a future

00:22:41,669 --> 00:22:46,499
where we can create far more responsive

00:22:44,340 --> 00:22:48,330
designs and designs that accept a whole

00:22:46,499 --> 00:22:50,279
lot of different content being put into

00:22:48,330 --> 00:22:52,289
them being able to create rules around

00:22:50,279 --> 00:22:54,600
that rather than having to kind of

00:22:52,289 --> 00:22:56,369
really fix things in order to get really

00:22:54,600 --> 00:22:58,200
good design and you're going to see some

00:22:56,369 --> 00:23:00,179
fantastic examples later in djenne

00:22:58,200 --> 00:23:01,830
Simmons talk where she shows some of the

00:23:00,179 --> 00:23:05,490
creative things that you can start doing

00:23:01,830 --> 00:23:08,730
with these new specifications so please

00:23:05,490 --> 00:23:10,679
do start having a look at what is coming

00:23:08,730 --> 00:23:12,210
with grid layouts and the sort of things

00:23:10,679 --> 00:23:15,210
that you're going to be able to do with

00:23:12,210 --> 00:23:17,070
it all the demos I've shown you today

00:23:15,210 --> 00:23:19,259
are in this code pen collection so you

00:23:17,070 --> 00:23:21,450
can go and fork those and have a play

00:23:19,259 --> 00:23:23,730
around with them and for grid

00:23:21,450 --> 00:23:27,600
specifically I've got a lot of examples

00:23:23,730 --> 00:23:30,210
over at grid by example.com and also

00:23:27,600 --> 00:23:32,429
some resources and I know this can't be

00:23:30,210 --> 00:23:36,799
used in production today but grid is

00:23:32,429 --> 00:23:36,799
going to land cross-browser pretty soon

00:23:36,919 --> 00:23:42,059
and this is why we should be looking at

00:23:39,330 --> 00:23:44,639
this stuff now once a specification like

00:23:42,059 --> 00:23:46,230
grid is out there and live making

00:23:44,639 --> 00:23:48,059
changes to it is almost impossible

00:23:46,230 --> 00:23:50,730
because it will break production

00:23:48,059 --> 00:23:52,980
websites grid it's been developed behind

00:23:50,730 --> 00:23:55,019
browser flags in order that changes can

00:23:52,980 --> 00:23:57,600
be made before it gets out there onto

00:23:55,019 --> 00:24:00,240
the web and this is going to be the way

00:23:57,600 --> 00:24:01,980
of things in the future vendor prefixes

00:24:00,240 --> 00:24:03,960
are essentially going away because what

00:24:01,980 --> 00:24:06,600
happens with prefixes is people used

00:24:03,960 --> 00:24:08,549
code that wasn't intended for production

00:24:06,600 --> 00:24:11,009
they used it on real websites and then

00:24:08,549 --> 00:24:13,110
get upset when stuff broke because

00:24:11,009 --> 00:24:15,990
things changed in browsers they changed

00:24:13,110 --> 00:24:18,539
in the spec most the cross browser

00:24:15,990 --> 00:24:19,980
issues in Flex books aren't because some

00:24:18,539 --> 00:24:21,990
terrible browsers are just did their own

00:24:19,980 --> 00:24:23,850
thing and implemented something that

00:24:21,990 --> 00:24:25,559
wasn't wasn't in the spec the spec

00:24:23,850 --> 00:24:27,690
actually changed underneath the browser

00:24:25,559 --> 00:24:30,419
implementations and so we ended up with

00:24:27,690 --> 00:24:32,249
different things in browsers developing

00:24:30,419 --> 00:24:34,380
behind flags means that issues can be

00:24:32,249 --> 00:24:36,600
worked out before they're getting to the

00:24:34,380 --> 00:24:39,060
because once they're out there it's hard

00:24:36,600 --> 00:24:40,560
to go back this is the list of things

00:24:39,060 --> 00:24:43,880
that the city's working group are going

00:24:40,560 --> 00:24:46,830
to change once time travel is invented

00:24:43,880 --> 00:24:48,720
so we can't take this stuff back and I

00:24:46,830 --> 00:24:52,560
think you're hearing about this later on

00:24:48,720 --> 00:24:54,240
as well so please do look at things that

00:24:52,560 --> 00:24:55,620
are behind flags enable flags in the

00:24:54,240 --> 00:24:57,450
browser look at the new stuff that's

00:24:55,620 --> 00:25:01,080
coming into CSS and the technologies

00:24:57,450 --> 00:25:03,060
that you use for CSS it's getting a lot

00:25:01,080 --> 00:25:05,310
easier because now the spec issues are

00:25:03,060 --> 00:25:07,020
all on github so raising an issue or

00:25:05,310 --> 00:25:09,180
commenting on an issue in the spec is as

00:25:07,020 --> 00:25:11,160
simple as going to get up and doing that

00:25:09,180 --> 00:25:14,970
just the same as with any other project

00:25:11,160 --> 00:25:17,190
please do that think of it as a good

00:25:14,970 --> 00:25:19,860
deed for your future developing self

00:25:17,190 --> 00:25:21,360
look at emerging specifications while

00:25:19,860 --> 00:25:22,920
you've got the chance to because

00:25:21,360 --> 00:25:24,570
otherwise you're essentially leaving

00:25:22,920 --> 00:25:28,020
your future as a designer or developer

00:25:24,570 --> 00:25:30,720
in the hands of the very few people who

00:25:28,020 --> 00:25:32,490
do thank you very much for listening and

00:25:30,720 --> 00:25:35,060
do ask me some questions later I'll be

00:25:32,490 --> 00:25:35,060

YouTube URL: https://www.youtube.com/watch?v=ibeF6rbzD70


