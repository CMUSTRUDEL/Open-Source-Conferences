Title: Making a browser fast: The story of Firefox Quantum
Publication date: 2018-02-20
Playlist: Mozilla at FOSDEM 2018
Description: 
	By Jean-Yves Perrier, Mozilla. 
First presented at FOSDEM, Feb 3, 2018. 
(https://fosdem.org/2018/schedule/event/mozilla_story_firefox_quantum/)

This presentation will explain how a browser works, then go into more detail about: Quantum Compositor - Quantum Style (Stylo) - Quantum Flow - and will explain in details some of the major changes that happens under the hood of Firefox during 2017.

These talks have been recorded at FOSDEM (https://fosdem.org/) This work is licensed under the Creative Commons Attribution 2.0 Belgium Licence. To view a copy of this licence, visit:
https://creativecommons.org/licenses/by/2.0/be/deed.en
Captions: 
	00:00:07,840 --> 00:00:10,939
[Applause]

00:00:21,119 --> 00:00:37,059
this calling as the new manager thank

00:00:36,730 --> 00:00:41,979
you

00:00:37,059 --> 00:00:44,080
do you hear me yes okay so uh today I'm

00:00:41,979 --> 00:00:46,479
here to speak about something I'm really

00:00:44,080 --> 00:00:48,760
excited about that was a big achievement

00:00:46,479 --> 00:00:51,190
that we did last year at MOSI and we are

00:00:48,760 --> 00:00:54,610
quite proud of it

00:00:51,190 --> 00:00:56,680
it's about Firefox quanta so as Alexei

00:00:54,610 --> 00:00:59,559
the I'm joy very imperative developer

00:00:56,680 --> 00:01:03,820
outreach I have a Twitter account

00:00:59,559 --> 00:01:07,240
- the story begins by looking at

00:01:03,820 --> 00:01:07,840
processors so processors for about 40

00:01:07,240 --> 00:01:10,990
years

00:01:07,840 --> 00:01:15,039
we're just doubling their speed every 2

00:01:10,990 --> 00:01:17,200
or 3 years it was a more low lately high

00:01:15,039 --> 00:01:20,259
end processor still seems to continue

00:01:17,200 --> 00:01:22,799
more or less at this very same speed but

00:01:20,259 --> 00:01:26,070
more and more processors that you have

00:01:22,799 --> 00:01:28,990
doesn't double their performance every

00:01:26,070 --> 00:01:31,479
every three years anymore because you

00:01:28,990 --> 00:01:34,810
want cheaper processor or sometimes also

00:01:31,479 --> 00:01:36,490
your processors are on your phone and

00:01:34,810 --> 00:01:38,140
you don't want to have a high end

00:01:36,490 --> 00:01:40,859
processors that will just drain your

00:01:38,140 --> 00:01:45,609
battery in five minutes

00:01:40,859 --> 00:01:47,759
so performance on computers is no more

00:01:45,609 --> 00:01:51,369
driven only by having more performant

00:01:47,759 --> 00:01:55,240
CPU but by having more cores and by

00:01:51,369 --> 00:01:57,310
having more conference at the system

00:01:55,240 --> 00:02:01,179
what we are doing with browser has

00:01:57,310 --> 00:02:05,619
changed if we go back in the early 2000

00:02:01,179 --> 00:02:07,869
what we wanted for a website was okay we

00:02:05,619 --> 00:02:10,709
want a few images we want tags with a

00:02:07,869 --> 00:02:13,690
nice color maybe a flame logo somewhere

00:02:10,709 --> 00:02:16,720
but that's more or less all what we want

00:02:13,690 --> 00:02:19,930
today it's not the case what we want

00:02:16,720 --> 00:02:24,460
today is to have 60 frames per second

00:02:19,930 --> 00:02:26,380
videos in high resolution and we want

00:02:24,460 --> 00:02:29,260
these to run in a virtual reality

00:02:26,380 --> 00:02:32,200
environment that means on both or your

00:02:29,260 --> 00:02:34,510
eyes with your phone used in the car box

00:02:32,200 --> 00:02:37,330
so that's not exactly the same things

00:02:34,510 --> 00:02:40,720
that we want from a browser and at the

00:02:37,330 --> 00:02:44,730
same time the CPU has not just given us

00:02:40,720 --> 00:02:50,200
the power in one go to increase what the

00:02:44,730 --> 00:02:54,330
browser is doing browser are very old

00:02:50,200 --> 00:02:57,970
beast or piece of programs Firefox

00:02:54,330 --> 00:03:00,640
derived from Netscape and the mosaic

00:02:57,970 --> 00:03:03,370
code base has been open 20 years ago and

00:03:00,640 --> 00:03:07,510
if we look here at the robots that we

00:03:03,370 --> 00:03:11,350
use for the launch and Firefox 3 it's a

00:03:07,510 --> 00:03:13,360
friendly robot but I'm not sure and we

00:03:11,350 --> 00:03:16,480
were not sure that this robot is

00:03:13,360 --> 00:03:19,240
suitable for the 21st century and for

00:03:16,480 --> 00:03:22,260
virtual reality it's a nice friendly one

00:03:19,240 --> 00:03:26,890
but is it capable to do all what we want

00:03:22,260 --> 00:03:29,190
so we decided a few years ago to think

00:03:26,890 --> 00:03:35,350
again about it and to design something

00:03:29,190 --> 00:03:39,100
eventually new first our like a little

00:03:35,350 --> 00:03:43,150
bit to come back to some how fire

00:03:39,100 --> 00:03:44,650
browser is working so we have the

00:03:43,150 --> 00:03:46,540
rendering engine and the rendering

00:03:44,650 --> 00:03:49,570
engine is a very complex piece of

00:03:46,540 --> 00:03:51,100
software the browser looks simple from

00:03:49,570 --> 00:03:53,560
the outside but in fact inside is

00:03:51,100 --> 00:03:56,050
something very complex we start by

00:03:53,560 --> 00:03:59,470
having to download everything from the

00:03:56,050 --> 00:04:01,180
network's HTML CSS JavaScript with all

00:03:59,470 --> 00:04:02,560
the problems that the network can have

00:04:01,180 --> 00:04:04,870
latency and so on

00:04:02,560 --> 00:04:07,540
so that means caching dealing with stuff

00:04:04,870 --> 00:04:10,630
like this once we have the files in

00:04:07,540 --> 00:04:13,480
totality or impartiality we have in fact

00:04:10,630 --> 00:04:15,670
to read and understand this this file so

00:04:13,480 --> 00:04:18,609
we have a parser that in fact will

00:04:15,670 --> 00:04:20,980
create an internal tree that we have all

00:04:18,609 --> 00:04:23,770
the nodes and how they should be

00:04:20,980 --> 00:04:26,770
displayed so this is a Dom tree from

00:04:23,770 --> 00:04:29,470
this we have to apply the CSS and for

00:04:26,770 --> 00:04:31,960
the CSS we have to know the structure of

00:04:29,470 --> 00:04:35,080
the Dom but also the Cascade and to know

00:04:31,960 --> 00:04:37,060
to define what properties will be

00:04:35,080 --> 00:04:39,570
applied to each of the node of the tree

00:04:37,060 --> 00:04:44,110
which is what the style engine is do

00:04:39,570 --> 00:04:48,190
then we don't know also images and other

00:04:44,110 --> 00:04:50,020
live content and when these please

00:04:48,190 --> 00:04:55,120
what's come out from the style engine we

00:04:50,020 --> 00:04:57,340
can in fact put the boxes on the on the

00:04:55,120 --> 00:04:59,320
screen or define where they should go on

00:04:57,340 --> 00:05:03,160
the screen because then we have also

00:04:59,320 --> 00:05:05,620
hate weight with an and so on of the

00:05:03,160 --> 00:05:09,550
different element but it's not all from

00:05:05,620 --> 00:05:12,340
this then we have to paint apply the

00:05:09,550 --> 00:05:14,770
right filters are right the right colors

00:05:12,340 --> 00:05:17,020
on the different elements and finally we

00:05:14,770 --> 00:05:18,910
have to take all these elements that we

00:05:17,020 --> 00:05:21,550
have all over the place and hide what is

00:05:18,910 --> 00:05:24,340
behind and only display what is in the

00:05:21,550 --> 00:05:27,550
front and then we go and display on the

00:05:24,340 --> 00:05:30,880
page and this loop here we have to do it

00:05:27,550 --> 00:05:33,670
60 times per second because each time

00:05:30,880 --> 00:05:36,310
you use JavaScript it can modify the Dom

00:05:33,670 --> 00:05:38,140
and we have to recalculate all the

00:05:36,310 --> 00:05:39,490
things so that's a key part that the

00:05:38,140 --> 00:05:42,940
browser and the rendering engine is

00:05:39,490 --> 00:05:49,000
doing and doing this 60 times per second

00:05:42,940 --> 00:05:51,790
in such an evident is a hard problem so

00:05:49,000 --> 00:05:53,410
several years ago masya decided that to

00:05:51,790 --> 00:05:55,570
tackle this problem and especially to

00:05:53,410 --> 00:05:59,470
tackle this problem with a large set of

00:05:55,570 --> 00:06:01,300
engineer we need two things we need to

00:05:59,470 --> 00:06:05,410
have a test browser where we can

00:06:01,300 --> 00:06:08,200
experiment new algorithm we created

00:06:05,410 --> 00:06:11,050
several that is an experimental

00:06:08,200 --> 00:06:13,570
browser so several things here first

00:06:11,050 --> 00:06:16,690
it's written in rust rust is a new

00:06:13,570 --> 00:06:19,440
language that has been designed to have

00:06:16,690 --> 00:06:22,480
less problems and C++ especially when

00:06:19,440 --> 00:06:24,490
you have a large set of developers

00:06:22,480 --> 00:06:26,290
working on it and volunteers not

00:06:24,490 --> 00:06:29,830
volunteers and so on so that's means

00:06:26,290 --> 00:06:31,220
that we need something robust it's also

00:06:29,830 --> 00:06:33,140
designed to test

00:06:31,220 --> 00:06:35,150
everything around that has massive

00:06:33,140 --> 00:06:40,070
parallelism we see we have more cores

00:06:35,150 --> 00:06:42,980
but we don't have more CPU power so

00:06:40,070 --> 00:06:46,430
parallelism is a key in our opinion for

00:06:42,980 --> 00:06:51,370
the future of the web and also it's a

00:06:46,430 --> 00:06:53,210
rendering engine so we didn't put a

00:06:51,370 --> 00:06:57,170
significant you are it's not a

00:06:53,210 --> 00:06:59,210
replacement for Firefox and the last and

00:06:57,170 --> 00:07:02,930
most important thing it's a test engine

00:06:59,210 --> 00:07:06,080
so we can break the web and this is

00:07:02,930 --> 00:07:09,080
important because we cannot test thing

00:07:06,080 --> 00:07:10,940
with all the details will be too long to

00:07:09,080 --> 00:07:13,190
test an algorithm if it we have to work

00:07:10,940 --> 00:07:15,230
in all cases but by breaking the web we

00:07:13,190 --> 00:07:19,100
can validate if this algorithm is

00:07:15,230 --> 00:07:21,200
valuable to go further or not at the

00:07:19,100 --> 00:07:24,260
beginning of last year we decided it's

00:07:21,200 --> 00:07:26,030
time now to bring a lot of things that

00:07:24,260 --> 00:07:29,570
we had learned over the last five or six

00:07:26,030 --> 00:07:32,450
years with these projects and to put it

00:07:29,570 --> 00:07:34,970
into Firefox and this was project

00:07:32,450 --> 00:07:37,880
contour we wanted to solve stability

00:07:34,970 --> 00:07:41,390
problem Firefox was crashing too much we

00:07:37,880 --> 00:07:46,340
wanted a new shiny theme and we wanted

00:07:41,390 --> 00:07:51,050
it to be extremely responsive project

00:07:46,340 --> 00:07:53,180
quantum was following several were

00:07:51,050 --> 00:07:56,390
divided in several project and the first

00:07:53,180 --> 00:07:58,430
of them was the compositor so the

00:07:56,390 --> 00:08:02,090
compositor is the last bit of element

00:07:58,430 --> 00:08:03,860
where we put all the layers together and

00:08:02,090 --> 00:08:07,520
this is something that other program

00:08:03,860 --> 00:08:11,000
also do especially operating systems and

00:08:07,520 --> 00:08:13,190
games and in fact GPU are optimized to

00:08:11,000 --> 00:08:17,990
do this kind of operation so we decided

00:08:13,190 --> 00:08:20,390
to offload to GPU the task of compositor

00:08:17,990 --> 00:08:23,630
to the GPU to the task of compositing so

00:08:20,390 --> 00:08:27,110
page and we did this in 2016 already and

00:08:23,630 --> 00:08:30,380
in fact we noticed that a good deal of

00:08:27,110 --> 00:08:33,349
crashes that we have on windows were

00:08:30,380 --> 00:08:34,940
closed isaacs because darks in traffic

00:08:33,349 --> 00:08:37,580
drivers and that was making the browser

00:08:34,940 --> 00:08:40,849
crash was especially important on

00:08:37,580 --> 00:08:42,520
Windows and Linux and not on Mac because

00:08:40,849 --> 00:08:45,520
Mac has only a few graphic

00:08:42,520 --> 00:08:48,130
and better drivers so the idea here was

00:08:45,520 --> 00:08:50,110
to easily the compositor in its own

00:08:48,130 --> 00:08:52,420
process so the process of the compositor

00:08:50,110 --> 00:08:54,399
may crash but not so cool browser it's

00:08:52,420 --> 00:08:59,170
not perfect but it's better and then of

00:08:54,399 --> 00:09:01,600
course to blacklist bad drivers second

00:08:59,170 --> 00:09:07,899
thing that we were doing is to import

00:09:01,600 --> 00:09:13,000
from style from several the new CSS

00:09:07,899 --> 00:09:18,300
style engine that is called style so

00:09:13,000 --> 00:09:18,300
Stalin gene is basically soft sorry

00:09:19,830 --> 00:09:26,560
taking a file and for each of the

00:09:24,790 --> 00:09:29,560
declaration and the files of them by

00:09:26,560 --> 00:09:32,020
specificity and calculate which one goes

00:09:29,560 --> 00:09:33,640
to which box this is something that you

00:09:32,020 --> 00:09:36,870
have to do for every node so

00:09:33,640 --> 00:09:41,220
theoretically it's something that is

00:09:36,870 --> 00:09:44,860
probably not easy but prone to be easily

00:09:41,220 --> 00:09:48,430
paralyzed one processor for node will be

00:09:44,860 --> 00:09:53,440
the perfect case and we can do this so

00:09:48,430 --> 00:09:56,140
several tests exist which title and it's

00:09:53,440 --> 00:09:58,570
not that easy because you have to be

00:09:56,140 --> 00:10:00,640
sure that each of the threads that you

00:09:58,570 --> 00:10:03,940
will you are using in fact has the same

00:10:00,640 --> 00:10:05,670
load so thread has to steal tasks from

00:10:03,940 --> 00:10:07,870
the other when they are empty and so on

00:10:05,670 --> 00:10:11,740
because of course you have maybe three

00:10:07,870 --> 00:10:14,890
four five course and not as many as you

00:10:11,740 --> 00:10:18,520
have of node on a page that can be in

00:10:14,890 --> 00:10:21,160
the thousands I went to thank my

00:10:18,520 --> 00:10:24,010
colleague Lynn Clark here who just made

00:10:21,160 --> 00:10:29,459
this amazing drawing and really sucks at

00:10:24,010 --> 00:10:32,470
drawing so and she also brought several

00:10:29,459 --> 00:10:34,930
blog post on the hottest at mogea talked

00:10:32,470 --> 00:10:37,000
explaining all this and these are really

00:10:34,930 --> 00:10:40,209
really good posts if you want to learn

00:10:37,000 --> 00:10:41,980
more about this and other things that we

00:10:40,209 --> 00:10:46,380
added with title is a start sharing

00:10:41,980 --> 00:10:50,050
cache that we took from chromium and

00:10:46,380 --> 00:10:53,250
WebKit and we change it a little bit

00:10:50,050 --> 00:10:53,250
because it was a bit

00:10:53,660 --> 00:11:01,610
in the fact that it wasn't taking enough

00:10:57,080 --> 00:11:04,550
enough care about pseudo-classes so it

00:11:01,610 --> 00:11:06,470
wasn't as efficient as more anymore so

00:11:04,550 --> 00:11:08,720
we change it and make it more efficient

00:11:06,470 --> 00:11:11,390
and we were able to continue to use it

00:11:08,720 --> 00:11:14,450
we keep some pipe someplace something

00:11:11,390 --> 00:11:18,140
from Firefox like the rule tree and we

00:11:14,450 --> 00:11:21,920
put all this together and we had a brand

00:11:18,140 --> 00:11:25,370
new style engine much more efficient the

00:11:21,920 --> 00:11:29,840
second set of problem our set of set of

00:11:25,370 --> 00:11:33,530
problems that come around not having the

00:11:29,840 --> 00:11:37,360
browser blocking doing nothing having

00:11:33,530 --> 00:11:39,880
the unmarked it's a beach ball of death

00:11:37,360 --> 00:11:43,580
you don't want the browser to freeze and

00:11:39,880 --> 00:11:45,500
most of the freeze on a browser come by

00:11:43,580 --> 00:11:51,530
having too many things on the main

00:11:45,500 --> 00:11:54,560
thread so the main thread is what has to

00:11:51,530 --> 00:11:59,210
run 60 times per second but of course

00:11:54,560 --> 00:12:01,400
when you run this loop with JavaScript

00:11:59,210 --> 00:12:03,530
you are not sure that the JavaScript

00:12:01,400 --> 00:12:09,560
will be short enough so that it stopped

00:12:03,530 --> 00:12:11,690
in 60 60 10 per second it's a few

00:12:09,560 --> 00:12:13,760
millisecond so you're not sure that this

00:12:11,690 --> 00:12:15,830
will work so we have to take everything

00:12:13,760 --> 00:12:18,200
out of the main strands that we can take

00:12:15,830 --> 00:12:20,030
out the first things that we already

00:12:18,200 --> 00:12:22,970
spoke about is a compositor as a

00:12:20,030 --> 00:12:24,980
compositor can be taken outside the

00:12:22,970 --> 00:12:27,500
video decoding is no more done on the

00:12:24,980 --> 00:12:30,020
main thread plugins okay plugins are

00:12:27,500 --> 00:12:32,480
gone but it was the same we have other

00:12:30,020 --> 00:12:35,570
worker and so the idea here is how to

00:12:32,480 --> 00:12:39,830
optimize this to run in a few

00:12:35,570 --> 00:12:41,690
millisecond maximum the projects that to

00:12:39,830 --> 00:12:45,170
care about this was called quantum flow

00:12:41,690 --> 00:12:46,940
and the key point here is we decided to

00:12:45,170 --> 00:12:50,660
approach performance in Firefox as a

00:12:46,940 --> 00:12:53,480
system instead of optimizing style the

00:12:50,660 --> 00:12:55,490
stile engine during a different part we

00:12:53,480 --> 00:12:58,340
have to consider the whole system so

00:12:55,490 --> 00:13:01,040
there is no button that we measure

00:12:58,340 --> 00:13:03,020
measure measure a lot of things and

00:13:01,040 --> 00:13:05,690
after we did a change we measure again

00:13:03,020 --> 00:13:11,690
to be sure that it has impact we wanted

00:13:05,690 --> 00:13:13,880
and Asian blog post really really went

00:13:11,690 --> 00:13:17,000
through all the details around 28 of

00:13:13,880 --> 00:13:18,830
them which means 40 weeks mourners that

00:13:17,000 --> 00:13:23,030
explain all the details that has been

00:13:18,830 --> 00:13:25,910
done and she called the expression death

00:13:23,030 --> 00:13:28,790
by a million cuts we had birds where we

00:13:25,910 --> 00:13:32,330
had to fix five ten other birds so that

00:13:28,790 --> 00:13:34,370
we win as a times we wanted and in fact

00:13:32,330 --> 00:13:36,650
each of them individual are not really

00:13:34,370 --> 00:13:40,880
noticeable but all together because it's

00:13:36,650 --> 00:13:42,980
a system had a big impact a few example

00:13:40,880 --> 00:13:45,260
here of what we fix we we wanted to have

00:13:42,980 --> 00:13:47,780
better scrolling so when you scroll you

00:13:45,260 --> 00:13:50,030
don't want especially on a fall you

00:13:47,780 --> 00:13:51,980
don't want suddenly the scrolling to

00:13:50,030 --> 00:13:53,870
stop for two second while we load the

00:13:51,980 --> 00:13:55,880
rest of the page and then continue

00:13:53,870 --> 00:13:58,310
because oh it stopped you remove this

00:13:55,880 --> 00:14:00,800
it's a bad expect so what Apple did

00:13:58,310 --> 00:14:02,300
several years ago is when there is

00:14:00,800 --> 00:14:05,300
nothing to display anymore

00:14:02,300 --> 00:14:07,460
it was displaying a checkerboard that in

00:14:05,300 --> 00:14:09,710
fact you slow down when the seeker would

00:14:07,460 --> 00:14:12,230
appear instead of completely stopping it

00:14:09,710 --> 00:14:15,170
so much better user interface and we

00:14:12,230 --> 00:14:18,590
applied this on Android but also on the

00:14:15,170 --> 00:14:20,630
desktop and on all kind of sporty so it

00:14:18,590 --> 00:14:23,300
was all works was a touch interface but

00:14:20,630 --> 00:14:25,790
it's work also when you scroll with a

00:14:23,300 --> 00:14:28,090
keyboard or the mouse there is a

00:14:25,790 --> 00:14:30,350
limitation it doesn't work for

00:14:28,090 --> 00:14:35,150
horizontal scrolling but this is pretty

00:14:30,350 --> 00:14:39,110
rare still now sonic another big thing

00:14:35,150 --> 00:14:42,220
is okay synchronous IPC so we have

00:14:39,110 --> 00:14:45,770
several thread several processes and

00:14:42,220 --> 00:14:47,870
communication between the processes are

00:14:45,770 --> 00:14:49,310
sometimes synchronous and sometime as

00:14:47,870 --> 00:14:53,120
synchronous and when there are

00:14:49,310 --> 00:14:55,370
synchronous in fact the main thread is

00:14:53,120 --> 00:14:57,260
just waiting for the answer not doing

00:14:55,370 --> 00:14:58,880
anything so we have to fight this it's

00:14:57,260 --> 00:15:01,790
obvious that we had the same problem

00:14:58,880 --> 00:15:04,400
here when accessing the hard drive also

00:15:01,790 --> 00:15:07,220
has a disk it's very slow so we have no

00:15:04,400 --> 00:15:09,110
more access to the disk from there for a

00:15:07,220 --> 00:15:10,590
long time but we we had to do the same

00:15:09,110 --> 00:15:14,250
with

00:15:10,590 --> 00:15:18,240
communication with process and for weeks

00:15:14,250 --> 00:15:21,680
and weeks we have every week looking at

00:15:18,240 --> 00:15:26,340
what was the most offender in this

00:15:21,680 --> 00:15:29,550
synchronous communication and little by

00:15:26,340 --> 00:15:33,450
little they went down and one of the big

00:15:29,550 --> 00:15:35,550
offender was cookie writers so we

00:15:33,450 --> 00:15:37,560
completely rewrote the way we write

00:15:35,550 --> 00:15:40,320
cookie to the disk so that it's a

00:15:37,560 --> 00:15:42,570
cyclist first to engineers for several

00:15:40,320 --> 00:15:46,500
months I see five or six months until it

00:15:42,570 --> 00:15:49,290
was rewritten and in fact it removed a

00:15:46,500 --> 00:15:52,440
good chunk of the problem so suddenly

00:15:49,290 --> 00:15:54,630
especially in big big sites that make a

00:15:52,440 --> 00:15:59,130
big use of cookies like Facebook's that

00:15:54,630 --> 00:16:02,070
writes cookies I think as tens of times

00:15:59,130 --> 00:16:04,410
each circle so they log a lot of things

00:16:02,070 --> 00:16:07,800
with cookies just that was making a big

00:16:04,410 --> 00:16:11,280
difference we change also some algorithm

00:16:07,800 --> 00:16:13,500
not necessary is the complexity of the

00:16:11,280 --> 00:16:16,290
algorithmic complexity of the algorithm

00:16:13,500 --> 00:16:18,840
but also the locality the same algorithm

00:16:16,290 --> 00:16:22,890
written differently hits the cache more

00:16:18,840 --> 00:16:26,340
often and is more efficient in today's

00:16:22,890 --> 00:16:28,050
with with webpages and we work also a

00:16:26,340 --> 00:16:29,400
lot on the garbage collection garbage

00:16:28,050 --> 00:16:31,890
collection was hot in the browser

00:16:29,400 --> 00:16:35,460
especially during videos so we make

00:16:31,890 --> 00:16:37,470
general generational and also more

00:16:35,460 --> 00:16:39,450
incremental that means that only the

00:16:37,470 --> 00:16:41,790
latest things are checked and we can

00:16:39,450 --> 00:16:43,680
stop it and start it later so there is

00:16:41,790 --> 00:16:46,470
always a budget system it's also are

00:16:43,680 --> 00:16:49,170
going a lot of video reading much

00:16:46,470 --> 00:16:51,780
smoother we will remove most of the

00:16:49,170 --> 00:16:55,230
titles because they fired at bad moments

00:16:51,780 --> 00:16:59,730
we replace them with a call for call

00:16:55,230 --> 00:17:02,370
back when the browser is little we

00:16:59,730 --> 00:17:04,770
redesign you in the UI I will not go

00:17:02,370 --> 00:17:05,790
into detail here because we have a talk

00:17:04,770 --> 00:17:10,199
about this later

00:17:05,790 --> 00:17:12,839
and finally we got a new brother still a

00:17:10,199 --> 00:17:15,280
robot we like robots but it looks a

00:17:12,839 --> 00:17:17,530
little bit different nowadays

00:17:15,280 --> 00:17:21,459
but we didn't stop this we launched this

00:17:17,530 --> 00:17:24,069
new quantum in November and last week

00:17:21,459 --> 00:17:25,630
which on when we launched 58 the next

00:17:24,069 --> 00:17:27,100
and the next version and we have done

00:17:25,630 --> 00:17:29,560
already more things we have done off

00:17:27,100 --> 00:17:32,110
main thread 20 so we have a big project

00:17:29,560 --> 00:17:34,390
to make painting a extremely efficient

00:17:32,110 --> 00:17:37,510
in the future but this project will not

00:17:34,390 --> 00:17:41,440
work all the time so we remove some part

00:17:37,510 --> 00:17:46,120
of the main thread activity about

00:17:41,440 --> 00:17:49,180
painting already now so that if you

00:17:46,120 --> 00:17:51,820
cannot use the GPU for it in the future

00:17:49,180 --> 00:17:54,070
it will be already better we also know

00:17:51,820 --> 00:17:57,760
throttle background tabs it's a

00:17:54,070 --> 00:17:59,710
difficult activity because you cannot

00:17:57,760 --> 00:18:01,450
throttle or pose every background tabs

00:17:59,710 --> 00:18:03,190
because if you are listening music in

00:18:01,450 --> 00:18:06,100
the background tabs you want to continue

00:18:03,190 --> 00:18:10,090
to listen to music so here we are mostly

00:18:06,100 --> 00:18:12,880
defensive we experiment and we try there

00:18:10,090 --> 00:18:15,220
is a page on MV ends that explain what

00:18:12,880 --> 00:18:19,660
we have it what we are throttling in

00:18:15,220 --> 00:18:21,760
fact and there are more to come so we we

00:18:19,660 --> 00:18:23,890
have a long tail of improvement here to

00:18:21,760 --> 00:18:26,320
do so the quantum flow project is not

00:18:23,890 --> 00:18:30,010
finished synchronizing inter-process

00:18:26,320 --> 00:18:31,930
communication will continue we have an

00:18:30,010 --> 00:18:34,300
exciting project coming out hopefully

00:18:31,930 --> 00:18:36,880
later this year which is quantum realm

00:18:34,300 --> 00:18:39,610
render web render where in fact the

00:18:36,880 --> 00:18:43,510
painting will be done by the GPU which

00:18:39,610 --> 00:18:45,370
is in fact rewriting the holes a big set

00:18:43,510 --> 00:18:47,860
of Firefox in Russia to gain and

00:18:45,370 --> 00:18:51,280
changing this as as we did with title

00:18:47,860 --> 00:18:54,130
and this has a big impact prototype are

00:18:51,280 --> 00:18:56,080
really promising I want also as sauce

00:18:54,130 --> 00:18:59,350
people speaking about specific process

00:18:56,080 --> 00:19:02,890
for web extensions so web extension will

00:18:59,350 --> 00:19:05,380
not have a bad impact on the browser or

00:19:02,890 --> 00:19:09,070
stricter JavaScript budget so that tabs

00:19:05,380 --> 00:19:12,400
have 2 millisecond of recent millisecond

00:19:09,070 --> 00:19:16,200
for JavaScript ins and stop it and go to

00:19:12,400 --> 00:19:16,200
the next so Firefox quantum

00:19:16,400 --> 00:19:21,770
is not the end it's not the end of a

00:19:18,800 --> 00:19:23,809
project it's in fact the beginning of a

00:19:21,770 --> 00:19:25,960
new era where we can build again on the

00:19:23,809 --> 00:19:28,660
browser to have more feature and more

00:19:25,960 --> 00:19:31,940
performance and performance is part now

00:19:28,660 --> 00:19:33,940
of our daily life to measure it and so

00:19:31,940 --> 00:19:38,660
on

00:19:33,940 --> 00:19:43,340
thank you you can help us install

00:19:38,660 --> 00:19:46,160
Firefox nightly and report bugs spread

00:19:43,340 --> 00:19:48,250
the word about using Firefox testing

00:19:46,160 --> 00:19:51,370
Firefox if you are doing website please

00:19:48,250 --> 00:19:53,929
that's where we can get keep our users

00:19:51,370 --> 00:19:57,170
and also stay informed

00:19:53,929 --> 00:20:01,640
follow Firefox nightly for example on

00:19:57,170 --> 00:20:07,260
Twitter it waits every big landing that

00:20:01,640 --> 00:20:10,400
comes a few weeks ahead thank you

00:20:07,260 --> 00:20:10,400

YouTube URL: https://www.youtube.com/watch?v=8WgAWgXRN5M


