Title: Tomorrow's JavaScript Debugger: How to shape your own JS debugger in 2018
Publication date: 2018-02-20
Playlist: Mozilla at FOSDEM 2018
Description: 
	By Amit Zur. 

First presented at FOSDEM, on February 3, 2018. 
(https://fosdem.org/2018/schedule/event/mozilla_tomorrows_js_debugger/)

These talks have been recorded at FOSDEM (https://fosdem.org/) This work is licensed under the Creative Commons Attribution 2.0 Belgium Licence. To view a copy of this licence, visit:
https://creativecommons.org/licenses/by/2.0/be/deed.en
Captions: 
	00:00:04,990 --> 00:00:09,940
okay so first of all thank you all for

00:00:07,540 --> 00:00:12,820
coming this is my first post them I am

00:00:09,940 --> 00:00:15,639
very excited to be here

00:00:12,820 --> 00:00:18,039
I am a bit overwhelmed with the size of

00:00:15,639 --> 00:00:20,710
this event and by the fact that all of

00:00:18,039 --> 00:00:23,470
you people are so engaged with what

00:00:20,710 --> 00:00:26,019
people have to say and that there are no

00:00:23,470 --> 00:00:29,410
lunch breaks and you are still here in

00:00:26,019 --> 00:00:32,850
this room so thanks okay so without

00:00:29,410 --> 00:00:35,080
further ado let's talk about debugging

00:00:32,850 --> 00:00:37,269
this is what we're going to talk about

00:00:35,080 --> 00:00:38,890
today and I'm going to talk about

00:00:37,269 --> 00:00:41,680
something that's really going to change

00:00:38,890 --> 00:00:43,360
our community now let's start with you

00:00:41,680 --> 00:00:45,580
question with a raise of hand how many

00:00:43,360 --> 00:00:48,119
people here use how many people here

00:00:45,580 --> 00:00:51,369
develop front-end applications

00:00:48,119 --> 00:00:53,409
okay very good how many people still use

00:00:51,369 --> 00:00:57,210
alert is the main way to debug their

00:00:53,409 --> 00:01:00,400
application okay okay I like you I like

00:00:57,210 --> 00:01:04,540
how many people use console.log as the

00:01:00,400 --> 00:01:08,229
main way okay and how many use a a some

00:01:04,540 --> 00:01:11,710
process debugger and the last one how

00:01:08,229 --> 00:01:15,250
many use Mozilla debugger Firefox okay

00:01:11,710 --> 00:01:20,259
so I feel like is there anyone who has

00:01:15,250 --> 00:01:27,270
not raised their hand at all okay do you

00:01:20,259 --> 00:01:30,880
develop apps sir okay so yeah debugging

00:01:27,270 --> 00:01:32,880
so debugging is indeed it's hard there

00:01:30,880 --> 00:01:36,789
are a few ways to do it

00:01:32,880 --> 00:01:39,819
and I think a lot of developers as seen

00:01:36,789 --> 00:01:41,829
by the race of your hands today don't

00:01:39,819 --> 00:01:44,979
resort to the debugger is the first way

00:01:41,829 --> 00:01:48,249
to debug your application and I put this

00:01:44,979 --> 00:01:50,259
responsibility more on the debuggers

00:01:48,249 --> 00:01:53,770
than the developers because we are users

00:01:50,259 --> 00:01:57,280
we will use whatever tool makes us most

00:01:53,770 --> 00:01:59,710
productive so like how many times did

00:01:57,280 --> 00:02:02,350
this happen to you that you are

00:01:59,710 --> 00:02:04,240
debugging and your code is somewhere

00:02:02,350 --> 00:02:06,179
between the start and the end of the

00:02:04,240 --> 00:02:11,920
call stack and all the rest is just

00:02:06,179 --> 00:02:13,570
other people's code is frameworks or you

00:02:11,920 --> 00:02:15,550
have your code you're trying to debug

00:02:13,570 --> 00:02:16,380
your application production you have

00:02:15,550 --> 00:02:20,400
this very

00:02:16,380 --> 00:02:23,400
user you're trying to debug it and

00:02:20,400 --> 00:02:24,780
evaluate what the value is but it's

00:02:23,400 --> 00:02:28,530
impossible because the kawaii is

00:02:24,780 --> 00:02:34,920
obfuscated it's actually e so did this

00:02:28,530 --> 00:02:37,620
happen to you no well sometimes okay so

00:02:34,920 --> 00:02:40,250
how would you like to have the power to

00:02:37,620 --> 00:02:43,890
change this behavior in the debugger

00:02:40,250 --> 00:02:45,330
well in Firefox dev tools team that you

00:02:43,890 --> 00:02:49,620
would like you to have this power and

00:02:45,330 --> 00:02:52,590
it's like the ideal scenario today

00:02:49,620 --> 00:02:54,780
because you've just had one hour how

00:02:52,590 --> 00:02:58,020
many people here attended last two

00:02:54,780 --> 00:03:01,380
sessions about by Julian and Nicola

00:02:58,020 --> 00:03:03,570
Nicola okay so so for you it's it's

00:03:01,380 --> 00:03:05,820
great I already have the context of

00:03:03,570 --> 00:03:07,380
what's going on in the debugger but

00:03:05,820 --> 00:03:10,530
today I'm going to give you the context

00:03:07,380 --> 00:03:12,120
about how Firefox is giving you the

00:03:10,530 --> 00:03:15,240
power to shape your own JavaScript

00:03:12,120 --> 00:03:17,400
debugger so about me my name is Amith

00:03:15,240 --> 00:03:20,160
I'm a front-end consultant from Israel

00:03:17,400 --> 00:03:24,000
I'm also a Mozilla tech speaker you can

00:03:20,160 --> 00:03:27,150
find me on github I sometimes write on

00:03:24,000 --> 00:03:30,030
medium and I tweet with all with the

00:03:27,150 --> 00:03:34,050
same handle what I do in my day-to-day

00:03:30,030 --> 00:03:36,540
job is I help organizations scale

00:03:34,050 --> 00:03:40,740
consistently with their UI and up their

00:03:36,540 --> 00:03:43,830
UI games by bringing building out design

00:03:40,740 --> 00:03:45,240
systems and atomic design so enough

00:03:43,830 --> 00:03:49,050
about me let's talk about your

00:03:45,240 --> 00:03:51,440
JavaScript in 2017 or sorry in 2018 oh

00:03:49,050 --> 00:03:55,710
my god this light is totally out of

00:03:51,440 --> 00:03:57,180
other thing so the first thing is it's

00:03:55,710 --> 00:03:59,280
probably frame wouldve and you're

00:03:57,180 --> 00:04:01,560
probably using a lot of third-party code

00:03:59,280 --> 00:04:05,040
in your application in your code is a

00:04:01,560 --> 00:04:09,510
portion of this application now if you

00:04:05,040 --> 00:04:12,270
write some some es6 code you're probably

00:04:09,510 --> 00:04:13,950
transpiling that to es5 just because

00:04:12,270 --> 00:04:15,960
you're running it and all the browser's

00:04:13,950 --> 00:04:17,820
or you're writing type scripts are you

00:04:15,960 --> 00:04:21,600
Church let's say you're aspiring your

00:04:17,820 --> 00:04:23,220
code also you're probably bundling your

00:04:21,600 --> 00:04:25,830
code if you like to be on the edge

00:04:23,220 --> 00:04:28,550
because you're writing dozens of source

00:04:25,830 --> 00:04:30,740
files and you want to save bandwidth and

00:04:28,550 --> 00:04:34,850
send out so many requests are you

00:04:30,740 --> 00:04:38,150
bundling your code and also you're a

00:04:34,850 --> 00:04:41,330
super super developer who knows that

00:04:38,150 --> 00:04:42,860
they don't want older code to be exposed

00:04:41,330 --> 00:04:45,200
on the client-side even though it's not

00:04:42,860 --> 00:04:47,720
real security but you like to minify an

00:04:45,200 --> 00:04:49,370
obfuscated and ugly fire code and that's

00:04:47,720 --> 00:04:51,440
the best practices for today so I'm

00:04:49,370 --> 00:04:53,870
going to cover these points but also if

00:04:51,440 --> 00:04:56,360
you're doing other things than just

00:04:53,870 --> 00:04:57,800
mapping arrays then you probably have

00:04:56,360 --> 00:04:59,890
some extinct Rinna's code you're

00:04:57,800 --> 00:05:03,200
fetching data from a server or you're

00:04:59,890 --> 00:05:05,930
handling user interactions and finally

00:05:03,200 --> 00:05:09,140
you might be running your JavaScript in

00:05:05,930 --> 00:05:10,970
other things than a browser a laptops

00:05:09,140 --> 00:05:14,630
browser you might be running it them on

00:05:10,970 --> 00:05:16,730
a on a controller you might be running

00:05:14,630 --> 00:05:17,450
them on your refrigerator or a security

00:05:16,730 --> 00:05:21,260
camera

00:05:17,450 --> 00:05:23,540
so to debug JavaScript applications

00:05:21,260 --> 00:05:27,980
means you have also to address these

00:05:23,540 --> 00:05:31,640
points comes in debugger dot HTML

00:05:27,980 --> 00:05:33,530
project which is a new and shiny project

00:05:31,640 --> 00:05:34,880
out of the Mozilla Firefox dev tools

00:05:33,530 --> 00:05:37,310
team now

00:05:34,880 --> 00:05:41,450
they set out to address all the points

00:05:37,310 --> 00:05:43,550
that I depicted earlier and they are now

00:05:41,450 --> 00:05:47,240
built rebuilding the entire dev tool

00:05:43,550 --> 00:05:50,210
suite from scratch using modern web

00:05:47,240 --> 00:05:53,270
technologies so the debugger project has

00:05:50,210 --> 00:05:56,600
been going on for about two years now

00:05:53,270 --> 00:05:59,600
and it's using react Redux webpack and

00:05:56,600 --> 00:06:03,580
babel and more community power tools to

00:05:59,600 --> 00:06:06,680
build to move forward the debugger and

00:06:03,580 --> 00:06:09,680
this project was named debugger dot HTML

00:06:06,680 --> 00:06:12,560
because it's just a simple plain HTML

00:06:09,680 --> 00:06:14,419
Javascript CSS implementation of a

00:06:12,560 --> 00:06:17,270
debuggers front-end so there's no more

00:06:14,419 --> 00:06:20,510
Zul for whoever knows and have

00:06:17,270 --> 00:06:23,330
experienced the pains and it's it's a

00:06:20,510 --> 00:06:26,300
simple web application so let's see how

00:06:23,330 --> 00:06:29,270
the debugger in 2018 solve the problems

00:06:26,300 --> 00:06:32,000
that we have that I or the the behavior

00:06:29,270 --> 00:06:35,210
of your modern JavaScript so if you have

00:06:32,000 --> 00:06:37,910
this spring driven and remember this

00:06:35,210 --> 00:06:40,590
scenario so let's see how we can address

00:06:37,910 --> 00:06:42,570
this so first of all

00:06:40,590 --> 00:06:45,270
I just want to show how you install the

00:06:42,570 --> 00:06:48,510
debugger the scenario is pretty simple

00:06:45,270 --> 00:06:52,200
you start by so I'm going to debug it to

00:06:48,510 --> 00:06:57,630
do up it's totally cool on the on the

00:06:52,200 --> 00:07:00,870
edge so at the beginning you start by

00:06:57,630 --> 00:07:06,840
get cloning the repository then you're

00:07:00,870 --> 00:07:09,990
on yarn to get all the sources and yarn

00:07:06,840 --> 00:07:13,470
starts opens up and fires a WebP active

00:07:09,990 --> 00:07:16,290
server on port 8000 so you can go now to

00:07:13,470 --> 00:07:19,250
your browser and start localhost port

00:07:16,290 --> 00:07:22,860
8000 to see the web app of the debugger

00:07:19,250 --> 00:07:27,210
now what do you actually see when you

00:07:22,860 --> 00:07:28,940
open up another tab local localhost

00:07:27,210 --> 00:07:31,980
8,000

00:07:28,940 --> 00:07:33,900
not the debugger it's something that we

00:07:31,980 --> 00:07:36,570
call the launch pads and the launch pad

00:07:33,900 --> 00:07:39,450
is what you see when you launch the

00:07:36,570 --> 00:07:41,610
debugger but outside of Firefox as a web

00:07:39,450 --> 00:07:44,490
application so if it's inside the dev

00:07:41,610 --> 00:07:46,740
tools like bundle in your browser you

00:07:44,490 --> 00:07:49,560
won't see this but in order to be able

00:07:46,740 --> 00:07:51,990
to debug different tabs you see this

00:07:49,560 --> 00:07:55,110
launch pad which allows you to select

00:07:51,990 --> 00:07:57,900
the tab that you want to debug so I have

00:07:55,110 --> 00:08:01,320
this backbone to do app and I'm going to

00:07:57,900 --> 00:08:02,700
select it and start debugging it so I

00:08:01,320 --> 00:08:07,050
choose this tab and then I see the

00:08:02,700 --> 00:08:09,330
debugger I have a neat to-do list make

00:08:07,050 --> 00:08:11,640
vanilla pudding put in the Mayo jar and

00:08:09,330 --> 00:08:14,970
eat in public and I'm gonna set a

00:08:11,640 --> 00:08:18,660
breakpoint and I'm going to break on

00:08:14,970 --> 00:08:21,750
this on this line and I see that enough

00:08:18,660 --> 00:08:25,770
in the call stack there is a place where

00:08:21,750 --> 00:08:27,870
the backbone library is shown with its

00:08:25,770 --> 00:08:31,500
logo and it's also collapsing in is

00:08:27,870 --> 00:08:33,690
expanding the the stack frame so it's

00:08:31,500 --> 00:08:36,180
really nice that the whole stack frame

00:08:33,690 --> 00:08:38,730
is visualized in a collapsed way so I

00:08:36,180 --> 00:08:41,340
can identify where my sources are and

00:08:38,730 --> 00:08:44,730
what third-parties I'm using there are a

00:08:41,340 --> 00:08:47,640
lot of a lot of libraries and their

00:08:44,730 --> 00:08:51,360
party tools that are addressed and have

00:08:47,640 --> 00:08:52,520
these logos so I saw this and I thought

00:08:51,360 --> 00:08:58,670
that

00:08:52,520 --> 00:09:00,680
it could use some some love and so when

00:08:58,670 --> 00:09:02,720
you expand collapse these these frames

00:09:00,680 --> 00:09:06,080
you don't really know how many frames

00:09:02,720 --> 00:09:08,120
are are collapsed so I just figured out

00:09:06,080 --> 00:09:11,090
you know it's really nice to have this

00:09:08,120 --> 00:09:15,890
this number next to the collapsed stack

00:09:11,090 --> 00:09:18,260
frame so I added this and my PR was

00:09:15,890 --> 00:09:21,530
accepted and I just want to show you how

00:09:18,260 --> 00:09:23,300
easy it is because all it means is yeah

00:09:21,530 --> 00:09:25,670
it's a bit hard to see with this

00:09:23,300 --> 00:09:27,980
lighting but the whole thing is a react

00:09:25,670 --> 00:09:29,930
component I wrote like a badge component

00:09:27,980 --> 00:09:31,730
that is a circle with a number and I

00:09:29,930 --> 00:09:34,910
already have this number it's the length

00:09:31,730 --> 00:09:37,400
of the of the of the group of stack

00:09:34,910 --> 00:09:40,510
frames so so it was really easy for me

00:09:37,400 --> 00:09:45,380
to add this feature and was accepted so

00:09:40,510 --> 00:09:47,360
the next thing is translation and here I

00:09:45,380 --> 00:09:50,150
just want to show you so this was

00:09:47,360 --> 00:09:52,730
appearing in previous talks here but we

00:09:50,150 --> 00:09:58,940
do as an example syntax highlighting for

00:09:52,730 --> 00:10:00,820
example JSX and the way it's done is the

00:09:58,940 --> 00:10:03,650
debugger is using code near four it's

00:10:00,820 --> 00:10:05,990
four four it settings so you just say

00:10:03,650 --> 00:10:08,210
you know set the mode to j6 if you

00:10:05,990 --> 00:10:12,440
recognize that this is a j6 file or it's

00:10:08,210 --> 00:10:16,910
a react component alas it's not perfect

00:10:12,440 --> 00:10:19,450
so Julian who's right here in the crowd

00:10:16,910 --> 00:10:23,000
and spoke before me open up a ticket

00:10:19,450 --> 00:10:23,780
some time ago about this not working as

00:10:23,000 --> 00:10:29,060
planned

00:10:23,780 --> 00:10:32,560
and one of the contributors and you can

00:10:29,060 --> 00:10:35,390
see that this didn't work properly and

00:10:32,560 --> 00:10:37,940
one computer claimed this issue so I won

00:10:35,390 --> 00:10:40,850
demonstrate here is how nice it is that

00:10:37,940 --> 00:10:43,250
you can go to github and draw just

00:10:40,850 --> 00:10:47,540
comment with slash claim and there's a

00:10:43,250 --> 00:10:49,250
little github bot that is answering with

00:10:47,540 --> 00:10:51,950
thank you for claiming this issue and

00:10:49,250 --> 00:10:55,400
here are some setup getting set up

00:10:51,950 --> 00:10:57,560
contributing developing manuals that you

00:10:55,400 --> 00:11:00,410
and will will be happy to answer your

00:10:57,560 --> 00:11:01,910
questions in slack and you can always

00:11:00,410 --> 00:11:03,430
feel free to unclaimed it if you don't

00:11:01,910 --> 00:11:08,710
get time or give business

00:11:03,430 --> 00:11:11,260
so the debugger team so the next thing

00:11:08,710 --> 00:11:13,300
is your bundle code also not much to

00:11:11,260 --> 00:11:15,850
show here but I just wanted to to show

00:11:13,300 --> 00:11:18,640
like there's it's the little things a

00:11:15,850 --> 00:11:21,160
lot of people bundle their code via web

00:11:18,640 --> 00:11:23,680
pack so if it's bundled via web pack

00:11:21,160 --> 00:11:26,350
you've got the nice little web pack logo

00:11:23,680 --> 00:11:28,540
right there so just to reduce the

00:11:26,350 --> 00:11:30,190
cognitive load if you spot that icon you

00:11:28,540 --> 00:11:34,050
know where's the where the way we're

00:11:30,190 --> 00:11:36,940
back folder is okay and lastly

00:11:34,050 --> 00:11:41,290
obfuscated code that's that's a bit of a

00:11:36,940 --> 00:11:45,760
problem to debug obfuscated code so like

00:11:41,290 --> 00:11:47,800
on the left on your left is is

00:11:45,760 --> 00:11:50,830
obfuscated code but when you debug it

00:11:47,800 --> 00:11:53,980
you would really like to debug the code

00:11:50,830 --> 00:11:56,680
that you originally wrote not that

00:11:53,980 --> 00:11:59,200
generate is one so I want to tell you a

00:11:56,680 --> 00:12:00,520
story about mapped expressions which is

00:11:59,200 --> 00:12:05,050
a personal story with that I was

00:12:00,520 --> 00:12:08,320
involved in so some time ago

00:12:05,050 --> 00:12:11,290
Jason Laster who's one of the developers

00:12:08,320 --> 00:12:13,270
of the debugger rode this tweed debugger

00:12:11,290 --> 00:12:16,690
aficionados will love this pyaare by

00:12:13,270 --> 00:12:19,360
yuri Delanie how the debugger can now

00:12:16,690 --> 00:12:21,550
map minified variable names onto

00:12:19,360 --> 00:12:23,770
original variables

00:12:21,550 --> 00:12:29,590
this means scopes and preview look great

00:12:23,770 --> 00:12:32,710
and next up is what oops next up is the

00:12:29,590 --> 00:12:34,690
watch expressions this feature touches a

00:12:32,710 --> 00:12:37,410
SD source maps and J's scopes what's not

00:12:34,690 --> 00:12:41,950
love stop by if you're intrigued and

00:12:37,410 --> 00:12:44,050
needless to say I was intrigued so let's

00:12:41,950 --> 00:12:46,540
just see of a visualization of the

00:12:44,050 --> 00:12:49,300
problem so you have this to-do app again

00:12:46,540 --> 00:12:50,830
and you buy a parrot you teach the

00:12:49,300 --> 00:12:55,980
parrot to say help I've been turned into

00:12:50,830 --> 00:12:55,980
a parrot I'm going to debug this and

00:12:58,780 --> 00:13:03,580
I'm so I'm ending it to do I'm adding a

00:13:01,390 --> 00:13:07,480
break points where I'm adding it to do

00:13:03,580 --> 00:13:09,520
and let's enlarge this for a second and

00:13:07,480 --> 00:13:11,350
now I'm pausing the break point and I

00:13:09,520 --> 00:13:14,770
can see that action is properly

00:13:11,350 --> 00:13:16,000
evaluated when I hover over it but and

00:13:14,770 --> 00:13:18,010
in the scopes

00:13:16,000 --> 00:13:19,780
it's also properly evaluated they can

00:13:18,010 --> 00:13:22,870
see the values of an action dot text

00:13:19,780 --> 00:13:25,120
action dot type however when I evaluate

00:13:22,870 --> 00:13:28,150
a distress expression in the wash

00:13:25,120 --> 00:13:30,430
expressions action is unavailable and if

00:13:28,150 --> 00:13:32,950
I write T there then it does get

00:13:30,430 --> 00:13:35,230
evaluate properly so what happens here

00:13:32,950 --> 00:13:37,660
is the actual front end of the debugger

00:13:35,230 --> 00:13:40,510
is going over to the back end which is

00:13:37,660 --> 00:13:42,250
the which is a Firefox web application

00:13:40,510 --> 00:13:45,520
it says you know hey can you evaluate

00:13:42,250 --> 00:13:47,290
action for me and Firefox receive this

00:13:45,520 --> 00:13:48,970
message and says you know hey sir

00:13:47,290 --> 00:13:52,200
there's someone here trying to evaluate

00:13:48,970 --> 00:13:54,670
action I can find anywhere and and then

00:13:52,200 --> 00:13:56,740
tell me we don't have it and then the

00:13:54,670 --> 00:13:59,410
front and says you know oh I'm

00:13:56,740 --> 00:14:02,880
sorry you're right it's t my bad and

00:13:59,410 --> 00:14:06,370
then Firefox says okay T is cool and

00:14:02,880 --> 00:14:09,880
everyone's happy and the code that is

00:14:06,370 --> 00:14:11,680
responsible for this mishap is in a

00:14:09,880 --> 00:14:15,160
function called evaluate expression

00:14:11,680 --> 00:14:17,080
which received an expression and just

00:14:15,160 --> 00:14:19,780
take the input that the user wrote and

00:14:17,080 --> 00:14:21,820
sends that out to the to Firefox and

00:14:19,780 --> 00:14:23,620
that is of course not good because we're

00:14:21,820 --> 00:14:29,500
sending action which is bad we want to

00:14:23,620 --> 00:14:32,050
send T so so yeah this is a problem and

00:14:29,500 --> 00:14:35,080
the way to solve it is just to add a

00:14:32,050 --> 00:14:37,660
snippet between that you know I get the

00:14:35,080 --> 00:14:40,780
input and before I send it out I just do

00:14:37,660 --> 00:14:49,210
a little thing that changes action to T

00:14:40,780 --> 00:14:51,790
and then I send it over so so cool stuff

00:14:49,210 --> 00:14:54,550
in the middle and let's just see this in

00:14:51,790 --> 00:14:56,470
action so that you believe me and we're

00:14:54,550 --> 00:14:57,970
all in the same page and I have your

00:14:56,470 --> 00:15:01,630
credibility

00:14:57,970 --> 00:15:04,480
so another to do you sneezing from Pope

00:15:01,630 --> 00:15:06,910
get blessed now I won't really want to

00:15:04,480 --> 00:15:08,890
add to do that says stop telling jokes

00:15:06,910 --> 00:15:11,759
and I'm paused on this breakpoint and

00:15:08,890 --> 00:15:15,689
now I'm evaluating action

00:15:11,759 --> 00:15:19,839
gets evaluated properly yeah it worked

00:15:15,689 --> 00:15:22,539
unexpectedly I can also though evaluate

00:15:19,839 --> 00:15:26,529
our things I can write action dot text I

00:15:22,539 --> 00:15:28,659
can write action dot type I can

00:15:26,529 --> 00:15:33,459
concatenate strings so I can say you

00:15:28,659 --> 00:15:35,859
know don't plus action dot X let's just

00:15:33,459 --> 00:15:39,609
wait for the guy or the girl to type

00:15:35,859 --> 00:15:41,799
this and I can also do sort of crazy

00:15:39,609 --> 00:15:43,629
things I can evaluate everything and you

00:15:41,799 --> 00:15:45,699
must remember this is the original

00:15:43,629 --> 00:15:47,379
source it's not the generated one it's

00:15:45,699 --> 00:15:51,699
not the bundled obfuscated a go fight

00:15:47,379 --> 00:15:53,259
one so I pasted this in a very very

00:15:51,699 --> 00:15:57,639
complicated expression gets in gets

00:15:53,259 --> 00:16:00,639
evaluated properly so the task at hand

00:15:57,639 --> 00:16:04,539
is to replace action with T in all these

00:16:00,639 --> 00:16:07,269
types of expressions now if it was only

00:16:04,539 --> 00:16:11,470
I want to evaluate action that would be

00:16:07,269 --> 00:16:13,869
easy I replaced action with T but as it

00:16:11,470 --> 00:16:17,109
comes to action text I need to transform

00:16:13,869 --> 00:16:19,779
it to T dot text a little bit trickier I

00:16:17,109 --> 00:16:23,409
might think of a solution maybe a

00:16:19,779 --> 00:16:26,649
regular expression to exchange but what

00:16:23,409 --> 00:16:27,220
happens with like this drinking

00:16:26,649 --> 00:16:31,709
catenation

00:16:27,220 --> 00:16:36,579
or what happens with this very complex

00:16:31,709 --> 00:16:41,319
expression so here the solution for us

00:16:36,579 --> 00:16:44,499
is using the mighty Babel and the Babel

00:16:41,319 --> 00:16:46,089
gives us the ability to build out an AST

00:16:44,499 --> 00:16:51,489
so with the raise of hand who here knows

00:16:46,089 --> 00:16:54,100
what a is T stands for okay great so it

00:16:51,489 --> 00:16:56,889
stands for abstract syntax tree which

00:16:54,100 --> 00:16:59,379
means a representation of a data

00:16:56,889 --> 00:17:02,379
structure of our code so let's just very

00:16:59,379 --> 00:17:04,539
briefly look at the SD for this type for

00:17:02,379 --> 00:17:09,370
this expression this is Christian is an

00:17:04,539 --> 00:17:13,929
expression statement it has 22 character

00:17:09,370 --> 00:17:16,600
starts at 0 and at 21 the expression

00:17:13,929 --> 00:17:19,480
property is a binary expression starts

00:17:16,600 --> 00:17:21,710
at 0 and 21 there's an operator plus has

00:17:19,480 --> 00:17:24,560
two children the left one is a literal

00:17:21,710 --> 00:17:25,310
it's the don't has starts at zero ends

00:17:24,560 --> 00:17:27,380
at seven

00:17:25,310 --> 00:17:30,380
the right one is a member expression

00:17:27,380 --> 00:17:33,350
action dot text start at zero into

00:17:30,380 --> 00:17:37,100
twenty one the member expression is also

00:17:33,350 --> 00:17:39,710
divided into two two properties the

00:17:37,100 --> 00:17:42,620
object which is the identifier action

00:17:39,710 --> 00:17:46,640
and the property which is the identifier

00:17:42,620 --> 00:17:50,360
text okay so this is the ast for this

00:17:46,640 --> 00:17:52,880
expression now once I have the ast for

00:17:50,360 --> 00:17:57,680
this expression I can run this code

00:17:52,880 --> 00:18:02,030
which will help me do the switch so I

00:17:57,680 --> 00:18:04,730
take this expression and I use Babel to

00:18:02,030 --> 00:18:08,870
parse it I parse it into the ast that

00:18:04,730 --> 00:18:12,080
I've just shown you now I traverse the

00:18:08,870 --> 00:18:14,450
CS ast with all these binary expression

00:18:12,080 --> 00:18:17,240
members fresh and object literals and

00:18:14,450 --> 00:18:20,270
blah blah blah and when I find out find

00:18:17,240 --> 00:18:23,750
an identifier that it's name is action

00:18:20,270 --> 00:18:25,820
then I take that one I go to my bindings

00:18:23,750 --> 00:18:27,590
and this related to the tweets that I

00:18:25,820 --> 00:18:30,260
showed you earlier about all the

00:18:27,590 --> 00:18:33,080
infrastructure work already done which

00:18:30,260 --> 00:18:36,520
the infrastructure work means we note

00:18:33,080 --> 00:18:40,010
how to map action to T so I find this

00:18:36,520 --> 00:18:43,300
this identifier action I replace it with

00:18:40,010 --> 00:18:46,850
T and what I just need to do now is

00:18:43,300 --> 00:18:51,290
generate a new absurd syntax generate a

00:18:46,850 --> 00:18:56,020
new expression out of my modified syntax

00:18:51,290 --> 00:18:57,730
tree so then we have don't plus T dot X

00:18:56,020 --> 00:19:01,990
how nice is that

00:18:57,730 --> 00:19:05,840
come on Thanks

00:19:01,990 --> 00:19:08,120
okay so we're all good geeks here we

00:19:05,840 --> 00:19:10,940
enjoy our little mind game so let me

00:19:08,120 --> 00:19:13,100
just very briefly do a small thing if

00:19:10,940 --> 00:19:14,900
you can run a debugger as a web

00:19:13,100 --> 00:19:17,090
application then you can debug your

00:19:14,900 --> 00:19:18,980
debugger as a web application and you

00:19:17,090 --> 00:19:20,570
can debug that debugger as a web

00:19:18,980 --> 00:19:23,120
application as well so what I'm gonna do

00:19:20,570 --> 00:19:24,919
now is I have this to-do app how do you

00:19:23,120 --> 00:19:27,710
confer this JavaScript bug

00:19:24,919 --> 00:19:30,470
I opened a debugger called d1 and then I

00:19:27,710 --> 00:19:32,179
opened the debugger called d2 which is

00:19:30,470 --> 00:19:35,919
showing me the sources for the button

00:19:32,179 --> 00:19:38,960
for d1 now I have d3 I like to call d3

00:19:35,919 --> 00:19:42,080
which is showing me the sources for d2

00:19:38,960 --> 00:19:45,320
and I'm just due to the lack of space

00:19:42,080 --> 00:19:47,809
I'm just gonna open before and that's it

00:19:45,320 --> 00:19:50,960
that's showing the sources and ability

00:19:47,809 --> 00:19:53,419
to debug d3 and we're what we're gonna

00:19:50,960 --> 00:19:56,690
have now is a little is a little pause

00:19:53,419 --> 00:19:58,520
party the nicest place to pause on a

00:19:56,690 --> 00:20:00,620
breakpoint when you're debugging a

00:19:58,520 --> 00:20:02,510
debugger is the when it's pausing

00:20:00,620 --> 00:20:05,720
because then all the information comes

00:20:02,510 --> 00:20:07,880
to life you see both the sources and the

00:20:05,720 --> 00:20:09,559
and the stack frames and everything so

00:20:07,880 --> 00:20:13,220
let's start how do you confer to the

00:20:09,559 --> 00:20:15,980
JavaScript bug you can soul it now

00:20:13,220 --> 00:20:17,840
where's your pot on d4 and I can see all

00:20:15,980 --> 00:20:21,110
the stack frames and these frames relate

00:20:17,840 --> 00:20:24,710
to the frames that d3 is paused on so

00:20:21,110 --> 00:20:28,360
I'm going to play that and d3 suddenly

00:20:24,710 --> 00:20:29,750
comes to life and I place just the same

00:20:28,360 --> 00:20:31,460
place

00:20:29,750 --> 00:20:35,299
break1 in the same place and I'm

00:20:31,460 --> 00:20:39,140
starting to ICD to become coming to life

00:20:35,299 --> 00:20:44,240
and then I step over and I can see that

00:20:39,140 --> 00:20:46,549
the expression is not well evaluated but

00:20:44,240 --> 00:20:48,169
when I that's because I didn't run the

00:20:46,549 --> 00:20:53,480
code to evaluate the expression but when

00:20:48,169 --> 00:20:57,850
I I'll do it now I will see the

00:20:53,480 --> 00:21:02,419
evaluation get evaluated here on the one

00:20:57,850 --> 00:21:04,310
and now I'm going to play d1 and the

00:21:02,419 --> 00:21:09,560
application resumes

00:21:04,310 --> 00:21:13,580
so it's really neat to be able to write

00:21:09,560 --> 00:21:15,920
code in a debugger so my message here is

00:21:13,580 --> 00:21:19,610
just don't be afraid to dip your toe I

00:21:15,920 --> 00:21:21,980
started with just pool requests that

00:21:19,610 --> 00:21:23,300
have CSS changes and little by little I

00:21:21,980 --> 00:21:25,820
start to understand more and more the

00:21:23,300 --> 00:21:30,620
code which really brings me to you the

00:21:25,820 --> 00:21:32,810
community so if the community is does

00:21:30,620 --> 00:21:36,680
the work community gets to decide what

00:21:32,810 --> 00:21:38,840
features go in and this is 100% true for

00:21:36,680 --> 00:21:41,750
Firefox and specifically for the

00:21:38,840 --> 00:21:45,050
debugger and anyone can help whether it

00:21:41,750 --> 00:21:47,450
be styling or code contribution or

00:21:45,050 --> 00:21:50,810
performance optimizations that profiling

00:21:47,450 --> 00:21:53,060
or writing tests in documentation or

00:21:50,810 --> 00:21:55,790
doing design work and anything is

00:21:53,060 --> 00:21:58,820
possible anything is needed and this is

00:21:55,790 --> 00:22:01,310
a first-class open source project and

00:21:58,820 --> 00:22:04,760
they're they're pushing very hard for

00:22:01,310 --> 00:22:07,340
community engagement and I think it's

00:22:04,760 --> 00:22:11,840
very it's monumental because it means

00:22:07,340 --> 00:22:14,270
that individual contributors have now

00:22:11,840 --> 00:22:17,300
can like the contribute but you're

00:22:14,270 --> 00:22:20,810
reusing the knowledge that they get at

00:22:17,300 --> 00:22:24,410
their workplace or at home and apply it

00:22:20,810 --> 00:22:27,980
in the debugger so but more importantly

00:22:24,410 --> 00:22:30,530
it works both ways because if your react

00:22:27,980 --> 00:22:32,540
developer at work and you contribute to

00:22:30,530 --> 00:22:34,250
the debugger you also get value from

00:22:32,540 --> 00:22:36,590
contributing because you're getting

00:22:34,250 --> 00:22:38,420
knowledge and experience from the from

00:22:36,590 --> 00:22:41,900
working with the team of experts that's

00:22:38,420 --> 00:22:44,000
working on the debugger so you get you

00:22:41,900 --> 00:22:46,220
get your contribution from giving your

00:22:44,000 --> 00:22:48,410
contribution which is great and I think

00:22:46,220 --> 00:22:52,040
it's also monumental because this is the

00:22:48,410 --> 00:22:54,890
first time I that I know about that a

00:22:52,040 --> 00:22:59,060
browser a platform is using community

00:22:54,890 --> 00:23:02,600
power tools to develop its own so this

00:22:59,060 --> 00:23:05,270
is really this really nice and there are

00:23:02,600 --> 00:23:07,310
many ways that you can engage in this

00:23:05,270 --> 00:23:11,390
project so the first one is by using

00:23:07,310 --> 00:23:15,210
slack there's a slack channel a second

00:23:11,390 --> 00:23:17,370
one is on github it's no more books

00:23:15,210 --> 00:23:19,770
no more mayor Mercurial it's all

00:23:17,370 --> 00:23:22,440
developed in the modern workflow that we

00:23:19,770 --> 00:23:24,029
know today there are weekly updates

00:23:22,440 --> 00:23:26,429
because the nature of open-source

00:23:24,029 --> 00:23:28,350
projects is you open up your laptop to

00:23:26,429 --> 00:23:30,510
work on it and then you finished your

00:23:28,350 --> 00:23:33,240
work you forget about it for maybe a

00:23:30,510 --> 00:23:35,309
week or two or three and you want to

00:23:33,240 --> 00:23:37,049
come back to the project understand what

00:23:35,309 --> 00:23:38,850
has happened so we get these weekly

00:23:37,049 --> 00:23:41,490
updates you can read out what people

00:23:38,850 --> 00:23:46,080
have done there's a lot of documentation

00:23:41,490 --> 00:23:49,140
and there are weekly calls where it's on

00:23:46,080 --> 00:23:51,450
video and you can see the team and see

00:23:49,140 --> 00:23:54,270
other contributors and sort of read that

00:23:51,450 --> 00:23:56,850
because during the intense work of

00:23:54,270 --> 00:24:00,120
coding and code reviews online you can

00:23:56,850 --> 00:24:03,330
like just hop in on a call no judgment

00:24:00,120 --> 00:24:05,340
no criticism and just hang out and chat

00:24:03,330 --> 00:24:07,380
a little bit with the team and get get

00:24:05,340 --> 00:24:10,620
to understand what's going on so make it

00:24:07,380 --> 00:24:12,480
makes it a lot more personal now I want

00:24:10,620 --> 00:24:15,539
to share with you a way that I got

00:24:12,480 --> 00:24:17,940
people hooked in Israel about about this

00:24:15,539 --> 00:24:20,850
project amongst others and we call it

00:24:17,940 --> 00:24:23,460
the goodness Squad so this this is

00:24:20,850 --> 00:24:25,710
something that I organize in Israel for

00:24:23,460 --> 00:24:27,779
a little over a year now and it's a

00:24:25,710 --> 00:24:31,169
monthly hacking event and the nice thing

00:24:27,779 --> 00:24:34,860
about it is the format's we organize for

00:24:31,169 --> 00:24:37,320
each event we prepare a few projects so

00:24:34,860 --> 00:24:39,480
I Britt in addition to organizing the

00:24:37,320 --> 00:24:41,760
event I bring the debugger and other

00:24:39,480 --> 00:24:44,429
people bring in their own their projects

00:24:41,760 --> 00:24:48,179
or you know other big company projects

00:24:44,429 --> 00:24:51,539
or individual projects and they are the

00:24:48,179 --> 00:24:54,720
mentors of this projects so if ten

00:24:51,539 --> 00:24:58,440
between 10 and 50 people come to the to

00:24:54,720 --> 00:25:01,260
the event they choose the project that

00:24:58,440 --> 00:25:06,470
they want to work on and the mentor is

00:25:01,260 --> 00:25:06,470

YouTube URL: https://www.youtube.com/watch?v=2wzNmEurZWI


