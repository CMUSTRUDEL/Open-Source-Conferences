Title: Panel: Extending Spinnaker
Publication date: 2017-09-22
Playlist: Spinnaker Summit 2017
Description: 
	Panelists include engineers from Google, Armory, Netflix, and Oracle. Moderated by Dave Stenglein from Kenzan. 

From Spinnaker Summit 2017
Captions: 
	00:00:00,979 --> 00:00:08,220
got our met dollar standin though my

00:00:05,730 --> 00:00:10,830
name is dave pegg wine comes on and

00:00:08,220 --> 00:00:14,700
we're here to talk about extending

00:00:10,830 --> 00:00:17,900
spinnaker so we'll go down the line here

00:00:14,700 --> 00:00:20,699
and ask everyone to introduce themselves

00:00:17,900 --> 00:00:22,800
we will introduce themselves first and

00:00:20,699 --> 00:00:28,980
then come back again from the end of

00:00:22,800 --> 00:00:32,160
line and talk about what how you my name

00:00:28,980 --> 00:00:53,670
is Tomas I work in the spinnaker team I

00:00:32,160 --> 00:00:56,039
have the original for t-shirt I'm John I

00:00:53,670 --> 00:00:58,280
work at Target I have an official target

00:00:56,039 --> 00:00:58,280
shirt

00:00:59,809 --> 00:01:06,030
I'm Adam been on the spinnaker need for

00:01:03,420 --> 00:01:11,970
the almost three years I probably have

00:01:06,030 --> 00:01:14,430
as many teachers as Tomas I'm Robert far

00:01:11,970 --> 00:01:16,560
I worked at cerner and we've been

00:01:14,430 --> 00:01:18,229
working with furniture for about nine

00:01:16,560 --> 00:01:21,420
months now

00:01:18,229 --> 00:01:23,310
hi I'm Owen I'm from Oracle and I guess

00:01:21,420 --> 00:01:25,200
we were involved in contributing a cloud

00:01:23,310 --> 00:01:27,330
provider to spinnaker so we're

00:01:25,200 --> 00:01:36,570
interested in how we can integrate

00:01:27,330 --> 00:01:38,520
various other services into spinnaker so

00:01:36,570 --> 00:01:41,130
you mentioned that you've done a cloud

00:01:38,520 --> 00:01:43,890
provider and you want to talk a little

00:01:41,130 --> 00:01:47,130
bit more about that or yeah sure and so

00:01:43,890 --> 00:01:49,439
we started last year and the goal there

00:01:47,130 --> 00:01:51,530
was to integrate a new cloud provider

00:01:49,439 --> 00:01:54,270
for a totally new cloud that we'd built

00:01:51,530 --> 00:01:56,060
we had a couple of issues I guess we

00:01:54,270 --> 00:01:59,880
were a fairly small team and obviously

00:01:56,060 --> 00:02:00,329
Spinnaker's a huge project so we learned

00:01:59,880 --> 00:02:03,030
quite a lot

00:02:00,329 --> 00:02:04,640
pretty quick the initial experience

00:02:03,030 --> 00:02:06,899
contributing a cloud provider was

00:02:04,640 --> 00:02:09,080
reasonably difficult I guess we could

00:02:06,899 --> 00:02:10,420
have done with more documentation and

00:02:09,080 --> 00:02:14,310
but

00:02:10,420 --> 00:02:17,650
but in the end I think we got that yeah

00:02:14,310 --> 00:02:19,209
what'd you send the well this everyone

00:02:17,650 --> 00:02:21,790
go back down the line and say what

00:02:19,209 --> 00:02:23,830
they've done for extending all right so

00:02:21,790 --> 00:02:26,500
it's Cerner are we about nine months ago

00:02:23,830 --> 00:02:29,790
we used DCs so we actually contributed a

00:02:26,500 --> 00:02:31,959
cloud provider for DCs and then we've

00:02:29,790 --> 00:02:34,360
kind of started on our journey of doing

00:02:31,959 --> 00:02:36,550
additional extensions echo to spunk

00:02:34,360 --> 00:02:38,620
integration and it's been deferred

00:02:36,550 --> 00:02:43,390
monitoring to stats T is a couple ways

00:02:38,620 --> 00:02:46,180
I'm not open sourcing I probably worked

00:02:43,390 --> 00:02:48,400
on most aspects of the backend services

00:02:46,180 --> 00:02:50,800
so lots of cloud doctor work lots of

00:02:48,400 --> 00:02:53,290
contributions to the AWS implementation

00:02:50,800 --> 00:02:55,480
not so much to our tightest of notation

00:02:53,290 --> 00:02:57,670
but I was probably responsible for the

00:02:55,480 --> 00:02:59,890
first extension point I think it was

00:02:57,670 --> 00:03:01,600
front 50 back in the day I kind of set

00:02:59,890 --> 00:03:04,300
us on the path of being able to build

00:03:01,600 --> 00:03:05,620
our own Netflix specific extensions code

00:03:04,300 --> 00:03:08,470
extensions that live in our own

00:03:05,620 --> 00:03:10,390
repositories so I'm quite familiar with

00:03:08,470 --> 00:03:16,000
that and happy to hear ideas for other

00:03:10,390 --> 00:03:18,940
extension points so I was hired at

00:03:16,000 --> 00:03:23,019
Target about a year and a half ago on my

00:03:18,940 --> 00:03:27,670
first first project was we use OpenStack

00:03:23,019 --> 00:03:31,570
we use spinnaker so create the provider

00:03:27,670 --> 00:03:35,140
for it we worked with Veritas Emily

00:03:31,570 --> 00:03:37,060
who's in now works at Netflix was

00:03:35,140 --> 00:03:39,360
working on this as well from the Veritas

00:03:37,060 --> 00:03:39,360
site

00:03:42,840 --> 00:03:50,400
I worked on the original granny's

00:03:48,480 --> 00:03:51,930
provider and working on the next

00:03:50,400 --> 00:03:57,599
iteration of it too

00:03:51,930 --> 00:03:59,760
I did a lot of work on halyard some most

00:03:57,599 --> 00:04:01,200
of the work carried itself through all

00:03:59,760 --> 00:04:03,480
the various makers of components but I

00:04:01,200 --> 00:04:06,170
always contributed to the spinnaker

00:04:03,480 --> 00:04:10,860
proper repos I have never done the

00:04:06,170 --> 00:04:12,510
modular spinnaker builds I don't forget

00:04:10,860 --> 00:04:15,480
to mention that he did all the tagging

00:04:12,510 --> 00:04:17,040
support into elasticsearch doing really

00:04:15,480 --> 00:04:18,630
hard questions around that he's the

00:04:17,040 --> 00:04:23,850
person to ask

00:04:18,630 --> 00:04:27,950
I wrote echo and Igor and guard work

00:04:23,850 --> 00:04:27,950
with us adding travesty I integration

00:04:28,580 --> 00:04:34,860
Chris I think added the integration to

00:04:32,250 --> 00:04:38,840
slack but a lot of that was built on

00:04:34,860 --> 00:04:41,250
kind of all these site frameworks and

00:04:38,840 --> 00:04:43,110
then currently I'm working on the

00:04:41,250 --> 00:04:45,479
tightest cloud provider and a lot of

00:04:43,110 --> 00:04:46,740
that work was really done around the

00:04:45,479 --> 00:04:48,870
stuff that and a large stayed around

00:04:46,740 --> 00:04:50,010
kind of indexing docker registries and

00:04:48,870 --> 00:04:53,160
triggering things out of the talker

00:04:50,010 --> 00:05:01,080
registries so so quite a lot of

00:04:53,160 --> 00:05:02,700
outpatient points in swagger so probably

00:05:01,080 --> 00:05:03,990
the first question for the panel is what

00:05:02,700 --> 00:05:08,580
recommendations do you have for

00:05:03,990 --> 00:05:10,260
first-time extenders I would join the

00:05:08,580 --> 00:05:11,300
DEF channel in this vinegar slack I

00:05:10,260 --> 00:05:13,830
think there's a lot of people they're

00:05:11,300 --> 00:05:17,370
happy to see new contributors and are

00:05:13,830 --> 00:05:18,930
happy to help you along it's not easy to

00:05:17,370 --> 00:05:21,150
get spinnaker up and running in a deaf

00:05:18,930 --> 00:05:23,970
environment everyone has a different

00:05:21,150 --> 00:05:26,520
best practice maybe we can all talk

00:05:23,970 --> 00:05:28,770
about how we do that but definitely

00:05:26,520 --> 00:05:30,360
reach out that channel see if someone's

00:05:28,770 --> 00:05:31,710
doing what you're trying to do or if

00:05:30,360 --> 00:05:35,160
it's something that you should maybe

00:05:31,710 --> 00:05:36,419
write a proposal for but I think the

00:05:35,160 --> 00:05:42,630
community's generally pretty welcoming

00:05:36,419 --> 00:05:46,169
changes along with that I'd say

00:05:42,630 --> 00:05:49,320
definitely reach out and say what you

00:05:46,169 --> 00:05:50,969
want to work on first you know because

00:05:49,320 --> 00:05:52,390
the the core contributors will

00:05:50,969 --> 00:05:54,580
definitely give guidance

00:05:52,390 --> 00:05:56,230
you know the right path to go down and

00:05:54,580 --> 00:05:58,470
where to actually find the hooks where

00:05:56,230 --> 00:06:00,370
they in all the different pieces are

00:05:58,470 --> 00:06:02,350
because if you don't know the layout of

00:06:00,370 --> 00:06:07,090
the projects you might not find what you

00:06:02,350 --> 00:06:11,170
need at least easily and also small

00:06:07,090 --> 00:06:13,210
concise commits I'd like to add that

00:06:11,170 --> 00:06:15,130
it's worth kind of figuring out what

00:06:13,210 --> 00:06:18,040
your deploy story is how are you if

00:06:15,130 --> 00:06:19,720
you're gonna do a private org extension

00:06:18,040 --> 00:06:21,400
figure out how you're gonna actually

00:06:19,720 --> 00:06:23,500
deploy that whether you're gonna do your

00:06:21,400 --> 00:06:25,060
own packages like we do or whether

00:06:23,500 --> 00:06:27,280
you're gonna do halyard with a custom

00:06:25,060 --> 00:06:29,200
Bom kind of figure that out and probably

00:06:27,280 --> 00:06:30,970
do some test runs just to see is that

00:06:29,200 --> 00:06:33,060
gonna work for you it's gonna create

00:06:30,970 --> 00:06:35,890
it's gonna allow for a much more rapid

00:06:33,060 --> 00:06:37,270
iteration cycle rather than leaving that

00:06:35,890 --> 00:06:39,220
to the very end and trying to figure out

00:06:37,270 --> 00:06:41,890
how am I going to deploy this to one of

00:06:39,220 --> 00:06:43,720
my one of my test environments we kind

00:06:41,890 --> 00:06:46,210
of figured that out very early on so

00:06:43,720 --> 00:06:48,130
when we do an extension maybe the idea

00:06:46,210 --> 00:06:49,990
is well where in the code is there an

00:06:48,130 --> 00:06:52,870
open extension point there right now if

00:06:49,990 --> 00:06:54,820
not okay let's let's see what the actual

00:06:52,870 --> 00:06:56,560
codified interface looks like and then

00:06:54,820 --> 00:06:58,750
from that point on we're gonna do it

00:06:56,560 --> 00:07:00,610
private and if it works out all right

00:06:58,750 --> 00:07:02,980
we'll probably consider moving it moving

00:07:00,610 --> 00:07:04,360
it forward and I think you tried to do

00:07:02,980 --> 00:07:10,600
that in a different direction you might

00:07:04,360 --> 00:07:13,330
get hung up you know I think for us a

00:07:10,600 --> 00:07:16,420
big part of it was you know first reach

00:07:13,330 --> 00:07:18,640
out but also just take some time to look

00:07:16,420 --> 00:07:20,380
at the code it's one of the great

00:07:18,640 --> 00:07:22,360
advantages of open sources the code is

00:07:20,380 --> 00:07:24,910
there for you to look at read and

00:07:22,360 --> 00:07:28,380
attempt to understand how various

00:07:24,910 --> 00:07:30,940
service is working what the parts are so

00:07:28,380 --> 00:07:32,770
we spent a lot of time doing that just

00:07:30,940 --> 00:07:34,510
to get our head wrapped around some of

00:07:32,770 --> 00:07:36,850
the services and how they work before we

00:07:34,510 --> 00:07:40,750
really started thinking about extension

00:07:36,850 --> 00:07:42,040
so yeah and from our point of view one

00:07:40,750 --> 00:07:43,510
of the nice things about spinnaker is

00:07:42,040 --> 00:07:45,310
actually the consistency of the other

00:07:43,510 --> 00:07:47,500
cloud providers so you can pretty much

00:07:45,310 --> 00:07:49,090
dive into the codebase and you can kind

00:07:47,500 --> 00:07:51,040
of go back in the get history you can

00:07:49,090 --> 00:07:52,030
see how people have contributed a cloud

00:07:51,040 --> 00:07:53,980
provider so that's something we

00:07:52,030 --> 00:07:55,480
definitely did we went back and reviewed

00:07:53,980 --> 00:07:56,860
some of the other cloud providers and

00:07:55,480 --> 00:07:58,720
see how they contributed to the project

00:07:56,860 --> 00:08:00,160
and that was really useful for us and I

00:07:58,720 --> 00:08:02,980
think now a lot of the cloud providers a

00:08:00,160 --> 00:08:05,350
pretty consistent you can pretty much

00:08:02,980 --> 00:08:05,889
almost verbatim follow the patterns that

00:08:05,350 --> 00:08:10,539
the car provide

00:08:05,889 --> 00:08:13,030
have implemented my advice would be

00:08:10,539 --> 00:08:15,490
figure out where you're building so if

00:08:13,030 --> 00:08:19,659
it's a custom notification then that

00:08:15,490 --> 00:08:21,580
goes into you know echo so if you're

00:08:19,659 --> 00:08:25,719
integrating with a continuous delivery

00:08:21,580 --> 00:08:26,830
tool you know that goes into Igor so you

00:08:25,719 --> 00:08:30,999
know figure out what you're building and

00:08:26,830 --> 00:08:33,159
figure out where it sits and then start

00:08:30,999 --> 00:08:35,829
from there so there's a pretty precise

00:08:33,159 --> 00:08:36,909
map of where things fit and you a good

00:08:35,829 --> 00:08:38,709
idea like if you're writing your own

00:08:36,909 --> 00:08:39,310
custom expression you go with

00:08:38,709 --> 00:08:41,709
that's--it's

00:08:39,310 --> 00:08:43,240
and if you don't know where it sits and

00:08:41,709 --> 00:08:44,709
ask the question and then we'll point

00:08:43,240 --> 00:08:46,839
you to her it sits and I'll make your

00:08:44,709 --> 00:08:49,920
life a lot easier than trying to shove

00:08:46,839 --> 00:08:49,920
something where it doesn't get along

00:08:50,519 --> 00:08:56,110
what kind of building on that spinnaker

00:08:53,440 --> 00:09:00,190
is a pretty flexible system it can do a

00:08:56,110 --> 00:09:02,380
lot sort of out of the box when other

00:09:00,190 --> 00:09:05,890
than say a new cloud driver or something

00:09:02,380 --> 00:09:07,209
like that one of the times when you when

00:09:05,890 --> 00:09:14,440
you actually need to extend how do you

00:09:07,209 --> 00:09:16,120
make that decision I think one big

00:09:14,440 --> 00:09:19,570
ascension point potentially it would be

00:09:16,120 --> 00:09:22,540
custom Orca stages people want new

00:09:19,570 --> 00:09:23,649
pipeline stages that maybe they can open

00:09:22,540 --> 00:09:25,720
source or something that's finish it

00:09:23,649 --> 00:09:28,420
doesn't do well enough in a first-class

00:09:25,720 --> 00:09:30,430
fashion looking into Orca and there's

00:09:28,420 --> 00:09:31,990
actually a really good write-up written

00:09:30,430 --> 00:09:33,370
by I think one of the Chaos engineering

00:09:31,990 --> 00:09:35,829
guys on the spinnaker IO dock site

00:09:33,370 --> 00:09:39,160
that's exactly what you have to do an

00:09:35,829 --> 00:09:40,329
orca it's pretty self-contained had a

00:09:39,160 --> 00:09:42,610
stage and then how to make the

00:09:40,329 --> 00:09:44,260
corresponding changes I think in deck to

00:09:42,610 --> 00:09:46,209
make sure that you can actually add this

00:09:44,260 --> 00:09:47,260
new kind of stage doing pretty much

00:09:46,209 --> 00:09:50,290
anything you can imagine

00:09:47,260 --> 00:09:52,209
directly in spinnaker it seems it is

00:09:50,290 --> 00:09:54,310
quite a few examples from Netflix that

00:09:52,209 --> 00:09:58,000
we've seen over the last two days you

00:09:54,310 --> 00:10:00,850
guys have your own modules you have your

00:09:58,000 --> 00:10:03,010
own deck deck modules deck views etc so

00:10:00,850 --> 00:10:04,570
if we could kind of open those up to the

00:10:03,010 --> 00:10:07,089
community and see some examples that

00:10:04,570 --> 00:10:08,320
would be really helpful but yeah there's

00:10:07,089 --> 00:10:09,339
definitely some examples I've seen in

00:10:08,320 --> 00:10:10,930
the last two days where you build your

00:10:09,339 --> 00:10:12,160
own modules I think that's a pattern

00:10:10,930 --> 00:10:16,120
that we'd be very interested in

00:10:12,160 --> 00:10:17,860
understanding more about yeah I think

00:10:16,120 --> 00:10:19,150
that's the pattern that's worked quite

00:10:17,860 --> 00:10:21,250
well for us I

00:10:19,150 --> 00:10:22,690
No a lot of the reasons why those things

00:10:21,250 --> 00:10:24,310
are internal is because their

00:10:22,690 --> 00:10:26,800
integrations with other services that

00:10:24,310 --> 00:10:29,050
aren't yet open-source but we're more

00:10:26,800 --> 00:10:31,900
than happy to talk about and provide

00:10:29,050 --> 00:10:35,140
feedback on a lot of those we've got

00:10:31,900 --> 00:10:36,430
some cloud driver experiences that are

00:10:35,140 --> 00:10:38,740
that are kind of driven by our cloud

00:10:36,430 --> 00:10:41,200
security so they're asking us for to do

00:10:38,740 --> 00:10:44,560
stuff around deploys which is a logical

00:10:41,200 --> 00:10:48,370
point to have an extension in place on

00:10:44,560 --> 00:10:50,710
the stage generation front and we've

00:10:48,370 --> 00:10:55,630
actually got plans to kind of allow you

00:10:50,710 --> 00:10:57,790
to codify in configuration basically

00:10:55,630 --> 00:11:00,190
webhook stages so to treat them as as

00:10:57,790 --> 00:11:02,380
more first-class stages but backed by

00:11:00,190 --> 00:11:03,730
configuration because we've seen a lot

00:11:02,380 --> 00:11:05,920
of examples where people are adding

00:11:03,730 --> 00:11:08,200
stages that just kind of talk to

00:11:05,920 --> 00:11:11,140
external services that maybe their team

00:11:08,200 --> 00:11:13,300
has written and to kind of lower the

00:11:11,140 --> 00:11:16,150
barrier to actually having to add a

00:11:13,300 --> 00:11:17,790
functionality of spinnaker perhaps to

00:11:16,150 --> 00:11:20,500
the point where you just need to modify

00:11:17,790 --> 00:11:23,710
configuration rather than actually

00:11:20,500 --> 00:11:25,360
commit code to Orca that would probably

00:11:23,710 --> 00:11:28,030
make some of the other teams that

00:11:25,360 --> 00:11:30,460
Netflix's experience adding stages much

00:11:28,030 --> 00:11:32,860
simpler we want it to do that

00:11:30,460 --> 00:11:34,330
this quarter not going to happen but

00:11:32,860 --> 00:11:38,560
that's something on our on our more

00:11:34,330 --> 00:11:40,540
immediate radar do you mean that

00:11:38,560 --> 00:11:43,030
eventually people need to write less and

00:11:40,540 --> 00:11:44,950
less code effectively to extend

00:11:43,030 --> 00:11:48,130
spinnaker depending on the type of

00:11:44,950 --> 00:11:50,110
extension yes we don't really want

00:11:48,130 --> 00:11:51,370
certainly other teams at Netflix we

00:11:50,110 --> 00:11:53,860
don't want them to have to become

00:11:51,370 --> 00:11:55,780
experts in spinnaker we want them to

00:11:53,860 --> 00:11:58,090
just be able to provide the minimal

00:11:55,780 --> 00:12:00,880
amount of glue code that builds upon the

00:11:58,090 --> 00:12:02,710
existing spinner constructs to make

00:12:00,880 --> 00:12:05,080
their stuff work and a lot of times

00:12:02,710 --> 00:12:06,340
these guys that are doing guys or gals

00:12:05,080 --> 00:12:08,380
that are doing integrations with

00:12:06,340 --> 00:12:10,210
spinnaker might not be JVM developers

00:12:08,380 --> 00:12:12,550
there's a lot of teams at Netflix that

00:12:10,210 --> 00:12:15,100
are JavaScript developers for example

00:12:12,550 --> 00:12:17,830
and there's a big impedance mismatch

00:12:15,100 --> 00:12:19,360
between having these people come and try

00:12:17,830 --> 00:12:22,170
and build something in spinnaker it's

00:12:19,360 --> 00:12:22,170
not a good fit

00:12:23,579 --> 00:12:30,609
yeah I would say you know we spent a lot

00:12:26,980 --> 00:12:32,319
of time early on trying to avoid it

00:12:30,609 --> 00:12:34,540
so you know we looked first can we

00:12:32,319 --> 00:12:37,209
configure it second can we use something

00:12:34,540 --> 00:12:42,519
like an extension point like Jenkins job

00:12:37,209 --> 00:12:44,350
or the web hooks but you know we get to

00:12:42,519 --> 00:12:46,179
the point where we start feeling like

00:12:44,350 --> 00:12:48,339
it's starting to look like duct tape and

00:12:46,179 --> 00:12:51,249
baling wire to put something together

00:12:48,339 --> 00:12:53,470
that's kind of a litmus test for us to

00:12:51,249 --> 00:12:56,829
start talking about doing the work to do

00:12:53,470 --> 00:12:58,480
the extension again we're kind of early

00:12:56,829 --> 00:13:01,600
on in that process so I think as we do

00:12:58,480 --> 00:13:03,999
more of it if we may go quicker to that

00:13:01,600 --> 00:13:05,139
just to keep things clean but that's

00:13:03,999 --> 00:13:09,129
kind of the approach we've taken so far

00:13:05,139 --> 00:13:12,069
I think it's worth noting maybe like the

00:13:09,129 --> 00:13:13,839
usability aspect of this right so a lot

00:13:12,069 --> 00:13:16,149
of times it's more convenient for you to

00:13:13,839 --> 00:13:18,209
just write the UI for a custom stage

00:13:16,149 --> 00:13:22,299
even though it backs up to the same

00:13:18,209 --> 00:13:24,730
underlying construct and spinner so for

00:13:22,299 --> 00:13:27,220
the base stage that we have Netflix for

00:13:24,730 --> 00:13:31,209
example we have a tighter space based

00:13:27,220 --> 00:13:32,379
big stage and AWS big stage but the only

00:13:31,209 --> 00:13:35,439
thing that is different between the two

00:13:32,379 --> 00:13:37,480
of them is the UI so sometimes is worthy

00:13:35,439 --> 00:13:39,759
in just taking you know like I can run

00:13:37,480 --> 00:13:42,429
this as a webhook stage but then

00:13:39,759 --> 00:13:44,319
building like a very light interface and

00:13:42,429 --> 00:13:46,269
maps more towards your own purpose and

00:13:44,319 --> 00:13:47,679
see how far you can take that you know

00:13:46,269 --> 00:13:49,629
whether it's even just running as a

00:13:47,679 --> 00:13:51,639
Jenkins job under the hood so if you

00:13:49,629 --> 00:13:54,369
look at the run script stage that we

00:13:51,639 --> 00:13:55,809
have in spinnaker like that's really the

00:13:54,369 --> 00:13:58,779
same thing as running a Jenkins stage

00:13:55,809 --> 00:14:01,360
but there's business context to that

00:13:58,779 --> 00:14:04,749
stage like it is because it makes that

00:14:01,360 --> 00:14:08,860
stage easier for some people to use and

00:14:04,749 --> 00:14:11,350
just start with how do I plug this in

00:14:08,860 --> 00:14:14,910
into my pipeline pad the UI level and

00:14:11,350 --> 00:14:20,319
see how far you can push that any code

00:14:14,910 --> 00:14:23,319
customizing at the org and one of her

00:14:20,319 --> 00:14:24,819
original visions for extensions that

00:14:23,319 --> 00:14:26,919
kind of two years ago when we were

00:14:24,819 --> 00:14:29,199
talking to different groups was that if

00:14:26,919 --> 00:14:31,809
you wanted to extend spinnaker you need

00:14:29,199 --> 00:14:33,699
to make changes at the UI and at the

00:14:31,809 --> 00:14:35,289
bottom of the stack in cloud driver and

00:14:33,699 --> 00:14:36,650
everything should just kind of pass

00:14:35,289 --> 00:14:38,630
through the middle

00:14:36,650 --> 00:14:41,360
we're not quite there right now a lot of

00:14:38,630 --> 00:14:43,070
extensions kind of do touch on Orkut but

00:14:41,360 --> 00:14:45,770
longer term it'd be great if we could

00:14:43,070 --> 00:14:48,560
just remove a lot of changes from Orca

00:14:45,770 --> 00:14:51,140
that are probably unnecessary most of

00:14:48,560 --> 00:14:54,260
orca operates in the function of fire

00:14:51,140 --> 00:14:56,120
off a request asynchronously a process

00:14:54,260 --> 00:14:58,190
monitors that for completion or failure

00:14:56,120 --> 00:15:00,410
and then moves on to the next pretty

00:14:58,190 --> 00:15:02,600
much every single operation works like

00:15:00,410 --> 00:15:06,590
that so we should be able to terrify it

00:15:02,600 --> 00:15:08,150
such that people can configure their way

00:15:06,590 --> 00:15:12,380
into that rather than code their way

00:15:08,150 --> 00:15:15,580
into that might be nice to think about

00:15:12,380 --> 00:15:17,630
the extensions also the perspective of

00:15:15,580 --> 00:15:21,290
third-party systems integrating with

00:15:17,630 --> 00:15:22,760
spinnaker so for example if we someone

00:15:21,290 --> 00:15:24,170
has a suite of Jenkins tools for example

00:15:22,760 --> 00:15:26,690
that interface really well with

00:15:24,170 --> 00:15:28,160
spinnaker or Travis tools that make it

00:15:26,690 --> 00:15:31,060
easier to pass artifacts in this vinegar

00:15:28,160 --> 00:15:32,810
and adding that to the open source

00:15:31,060 --> 00:15:36,070
ecosystem of spinnaker and start

00:15:32,810 --> 00:15:40,040
starting to build like a third-party

00:15:36,070 --> 00:15:41,600
plugin system in a sense part of this

00:15:40,040 --> 00:15:43,700
after doing with the artifact handling

00:15:41,600 --> 00:15:46,100
should ideally make it easier to have

00:15:43,700 --> 00:15:47,480
the well-defined API saying this is how

00:15:46,100 --> 00:15:49,790
you trigger pipelines is how you

00:15:47,480 --> 00:15:52,160
retrieve information from pipelines all

00:15:49,790 --> 00:15:54,200
this fall is well-defined model should

00:15:52,160 --> 00:15:55,520
ideally foster contributions it

00:15:54,200 --> 00:16:01,280
spinnaker they don't necessarily have to

00:15:55,520 --> 00:16:03,800
touch the spinnaker code base itself so

00:16:01,280 --> 00:16:05,750
um you mentioned the sort of the ways

00:16:03,800 --> 00:16:06,950
you sometimes come across places that

00:16:05,750 --> 00:16:08,900
need extension point so there are any

00:16:06,950 --> 00:16:11,510
other places that people find their

00:16:08,900 --> 00:16:16,700
missing good extension points like

00:16:11,510 --> 00:16:19,040
pretty good you had the naming

00:16:16,700 --> 00:16:21,440
convention we've heard that for years I

00:16:19,040 --> 00:16:23,060
think Lars can probably best comment on

00:16:21,440 --> 00:16:25,130
kind of some of the thoughts and

00:16:23,060 --> 00:16:27,680
directions that they're talking about

00:16:25,130 --> 00:16:29,990
but yeah - for naming conventions like

00:16:27,680 --> 00:16:32,110
being able to make that pluggable off of

00:16:29,990 --> 00:16:34,910
Frigga especially for organizations that

00:16:32,110 --> 00:16:36,470
come to spinnaker with already

00:16:34,910 --> 00:16:39,580
established footprints that don't really

00:16:36,470 --> 00:16:41,900
fit the application stack detailed model

00:16:39,580 --> 00:16:43,250
yeah I talked about this briefly

00:16:41,900 --> 00:16:45,350
yesterday in the context of the

00:16:43,250 --> 00:16:46,940
kubernetes provider but in order to make

00:16:45,350 --> 00:16:49,620
it work we need another way to derive

00:16:46,940 --> 00:16:51,750
the information that forgives us from

00:16:49,620 --> 00:16:53,640
that might not necessarily be a name or

00:16:51,750 --> 00:16:55,230
maybe it's a name that it relies on some

00:16:53,640 --> 00:16:58,830
different convention for relaying those

00:16:55,230 --> 00:17:02,880
kinds of relationships and for takings

00:16:58,830 --> 00:17:05,209
were soon open sourcing this spinnaker

00:17:02,880 --> 00:17:07,439
sub component called moniker which

00:17:05,209 --> 00:17:09,480
allows you to pass in like a server

00:17:07,439 --> 00:17:11,760
group or like a load balancer for a

00:17:09,480 --> 00:17:13,380
certain provider and from that based on

00:17:11,760 --> 00:17:14,939
your custom code which you can provide

00:17:13,380 --> 00:17:16,860
externally or contribute back to

00:17:14,939 --> 00:17:18,329
spinnaker and have that say like hey

00:17:16,860 --> 00:17:20,880
this is the application this belongs to

00:17:18,329 --> 00:17:23,459
and this is the stack and the detail of

00:17:20,880 --> 00:17:26,069
it which all could come from things like

00:17:23,459 --> 00:17:29,480
annotations inside the object or again a

00:17:26,069 --> 00:17:29,480
different kind of naming convention

00:17:30,860 --> 00:17:36,020
another source that I've seen recently

00:17:33,570 --> 00:17:38,610
is the ability to come in and plug in

00:17:36,020 --> 00:17:41,100
your an external health provider so if

00:17:38,610 --> 00:17:42,900
you're contributing to let's say console

00:17:41,100 --> 00:17:47,190
it feels like right now in spinnaker

00:17:42,900 --> 00:17:49,050
there's a lot of reliance on and console

00:17:47,190 --> 00:17:51,270
but it's kind of all done differently

00:17:49,050 --> 00:17:53,160
and in the ideal world there will be a

00:17:51,270 --> 00:17:54,510
unified way of providing health for

00:17:53,160 --> 00:17:57,510
there's a different cloud provider so it

00:17:54,510 --> 00:17:59,130
can be reusable like there's a gap there

00:17:57,510 --> 00:18:00,870
that would make a lot of the

00:17:59,130 --> 00:18:03,330
construction spinnaker such as red black

00:18:00,870 --> 00:18:05,880
pushes rolling red blacks a lot more

00:18:03,330 --> 00:18:08,400
usable if it was a lot easier to plug in

00:18:05,880 --> 00:18:14,070
let's see whatever metrics store I have

00:18:08,400 --> 00:18:19,620
I mean the places that we've run into

00:18:14,070 --> 00:18:21,500
problems is authentication I like

00:18:19,620 --> 00:18:24,530
especially like I know

00:18:21,500 --> 00:18:28,320
Edwin's team right now is working on

00:18:24,530 --> 00:18:32,700
trying to parse out the the roles from

00:18:28,320 --> 00:18:35,630
x.509 certificates and he should be

00:18:32,700 --> 00:18:41,370
close to getting that pushed upstream

00:18:35,630 --> 00:18:44,010
finishing that and you know one on top

00:18:41,370 --> 00:18:46,740
of that also I know that I mean that is

00:18:44,010 --> 00:18:50,370
sort of extendable be nice feels a

00:18:46,740 --> 00:18:52,080
little more less code to extend it and

00:18:50,370 --> 00:18:55,160
say like I want this part of the

00:18:52,080 --> 00:18:58,290
certificate you know more configuration

00:18:55,160 --> 00:19:02,900
on top of that we've also run into a

00:18:58,290 --> 00:19:08,840
problem with how spinnaker parses

00:19:02,900 --> 00:19:12,320
our p.m. names and deb filenames we ran

00:19:08,840 --> 00:19:14,480
into a major bug which isn't easily

00:19:12,320 --> 00:19:16,580
fixed because we don't follow normal

00:19:14,480 --> 00:19:22,640
naming conventions on those within

00:19:16,580 --> 00:19:25,400
target and although after was it cameron

00:19:22,640 --> 00:19:27,950
who gave that talk earlier on extending

00:19:25,400 --> 00:19:32,270
i got some ideas from that on hoping a

00:19:27,950 --> 00:19:34,610
new so we can actually do that on her

00:19:32,270 --> 00:19:39,309
own and not try and push our conventions

00:19:34,610 --> 00:19:39,309
on to the community or bad conventions

00:19:41,650 --> 00:19:50,870
there's more oh extending them like how

00:19:46,130 --> 00:19:54,290
to run packer to is it's a little clunky

00:19:50,870 --> 00:20:08,030
like mr. Hindle bars isn't here to speak

00:19:54,290 --> 00:20:11,540
for himself so with with the RPM parson

00:20:08,030 --> 00:20:14,240
orkut i think this is the point of

00:20:11,540 --> 00:20:17,570
artifact declaration that this logic is

00:20:14,240 --> 00:20:20,900
moved to the producers of the artifacts

00:20:17,570 --> 00:20:23,330
and i think this should be solved at

00:20:20,900 --> 00:20:26,990
that level because work i shouldn't need

00:20:23,330 --> 00:20:30,050
to know the details about rpms or Debian

00:20:26,990 --> 00:20:34,030
packages yeah so at least be able to

00:20:30,050 --> 00:20:34,030
override it with decorated artifacts

00:20:35,470 --> 00:20:46,130
it's actually not on that it's on Packer

00:20:41,390 --> 00:20:48,770
in Roscoe when you bake an image we we

00:20:46,130 --> 00:20:50,900
put on we generate a unique key so that

00:20:48,770 --> 00:20:52,340
if another baked request comes in at the

00:20:50,900 --> 00:20:54,260
same time for the same version of the

00:20:52,340 --> 00:20:55,580
thing it like just kind of silently

00:20:54,260 --> 00:20:57,740
ignores that other one because there's a

00:20:55,580 --> 00:20:59,690
current Baker what's going on but if you

00:20:57,740 --> 00:21:01,730
messed that up all of a sudden every

00:20:59,690 --> 00:21:02,570
package that comes in that they're all

00:21:01,730 --> 00:21:06,020
different

00:21:02,570 --> 00:21:08,809
rpms like not even the same an app and

00:21:06,020 --> 00:21:10,880
they resolved in the same key and now

00:21:08,809 --> 00:21:12,980
you've just released you know two

00:21:10,880 --> 00:21:16,519
different apps think they're the same

00:21:12,980 --> 00:21:18,440
and which luckily we didn't hit

00:21:16,519 --> 00:21:24,559
problem but there was a possibility of

00:21:18,440 --> 00:21:26,659
it I'm not sure everyone here is aware

00:21:24,559 --> 00:21:27,979
of the effort that largest is talking

00:21:26,659 --> 00:21:31,190
about but it's really around this

00:21:27,979 --> 00:21:33,739
standardization of here is a source that

00:21:31,190 --> 00:21:36,259
talks to spinnaker and here's the series

00:21:33,739 --> 00:21:37,669
of artifacts that then are kind of

00:21:36,259 --> 00:21:39,349
provided by this source and then have

00:21:37,669 --> 00:21:41,570
the ability to flow this artifacts

00:21:39,349 --> 00:21:44,029
through or across the entire pipeline

00:21:41,570 --> 00:21:47,450
I think this effort is quite interesting

00:21:44,029 --> 00:21:51,169
because one of the things that happens

00:21:47,450 --> 00:21:52,309
for example I sat through the target

00:21:51,169 --> 00:21:56,479
talk yesterday and they said they had a

00:21:52,309 --> 00:21:58,579
plugin for drone i/o for example we run

00:21:56,479 --> 00:22:00,079
into issues right now we're hauling our

00:21:58,579 --> 00:22:01,700
docker registry pulling our Jenkins

00:22:00,079 --> 00:22:03,889
registry just you know creates a lot of

00:22:01,700 --> 00:22:06,440
noise that might not be the best pattern

00:22:03,889 --> 00:22:08,629
and I think one of the points of

00:22:06,440 --> 00:22:11,479
extending that with either existing CI

00:22:08,629 --> 00:22:14,299
systems or even things like our Factory

00:22:11,479 --> 00:22:17,570
is to allow the ability for them to do a

00:22:14,299 --> 00:22:19,940
push and say you know an event happen in

00:22:17,570 --> 00:22:22,489
wherever but here's the artifact that

00:22:19,940 --> 00:22:24,440
was resulted so then once we standardize

00:22:22,489 --> 00:22:29,119
that format you'll be a lot simpler to

00:22:24,440 --> 00:22:32,989
then integrate Tim CD you're a different

00:22:29,119 --> 00:22:36,219
source of CI it's true so it is a pain

00:22:32,989 --> 00:22:40,070
point that hopefully will get better but

00:22:36,219 --> 00:22:41,419
just wanted to point out that effort one

00:22:40,070 --> 00:22:43,219
of the things we were particularly

00:22:41,419 --> 00:22:45,379
interested in is extending spinnaker for

00:22:43,219 --> 00:22:46,639
our own internal use cases and I think

00:22:45,379 --> 00:22:47,779
when writing the cloud provider we were

00:22:46,639 --> 00:22:49,309
really aware that we were kind of

00:22:47,779 --> 00:22:51,169
muddying the codebase I guess that's

00:22:49,309 --> 00:22:53,359
something we've discussed before whether

00:22:51,169 --> 00:22:55,190
we can pull some of the integrations out

00:22:53,359 --> 00:22:56,450
in two separate modules I guess that's

00:22:55,190 --> 00:22:59,690
something that maybe we need to think

00:22:56,450 --> 00:23:01,039
about yeah I think we contributed some

00:22:59,690 --> 00:23:02,629
libraries which may have conflicted with

00:23:01,039 --> 00:23:05,570
your libraries and we're very aware that

00:23:02,629 --> 00:23:06,589
any contributions we make going ahead if

00:23:05,570 --> 00:23:08,509
you want to do some really tight

00:23:06,589 --> 00:23:09,769
integrations we don't want to muddy up

00:23:08,509 --> 00:23:11,119
the spinnaker codebase we don't know

00:23:09,769 --> 00:23:12,049
affect Netflix in any way so that's

00:23:11,119 --> 00:23:14,089
definitely something that we're very

00:23:12,049 --> 00:23:15,259
aware of and I guess it would be

00:23:14,089 --> 00:23:17,450
something we should think about over the

00:23:15,259 --> 00:23:18,649
next year as we grow and there's more

00:23:17,450 --> 00:23:20,539
and more care providers it becomes

00:23:18,649 --> 00:23:26,210
harder and harder to to maintain that

00:23:20,539 --> 00:23:28,579
code I would suspect at some point we'll

00:23:26,210 --> 00:23:30,060
need to undergo an effort to come split

00:23:28,579 --> 00:23:31,800
up our cloud driver we

00:23:30,060 --> 00:23:33,930
to put it off because it's a it's a it's

00:23:31,800 --> 00:23:35,610
a large amount of effort and it kind of

00:23:33,930 --> 00:23:39,000
makes it more difficult to do certain

00:23:35,610 --> 00:23:41,400
things but we're skirting a fine line of

00:23:39,000 --> 00:23:43,320
six or seven different cloud providers

00:23:41,400 --> 00:23:44,730
with their own dependencies at some

00:23:43,320 --> 00:23:46,770
point they're gonna step on each other

00:23:44,730 --> 00:23:49,710
we dodged the bullet with some retrofit

00:23:46,770 --> 00:23:52,190
dependencies but we're gonna hit that

00:23:49,710 --> 00:23:55,470
sometime it's just a ticking time bomb

00:23:52,190 --> 00:23:57,570
but I don't know what the final solution

00:23:55,470 --> 00:24:00,230
would be but it might lead us down a

00:23:57,570 --> 00:24:03,210
path of being able to put some tighter

00:24:00,230 --> 00:24:05,310
controls and interfaces around how a

00:24:03,210 --> 00:24:07,650
cloud provider should interact with the

00:24:05,310 --> 00:24:09,510
rest of the system and maybe have a TCK

00:24:07,650 --> 00:24:10,920
in there so that cloud providers can

00:24:09,510 --> 00:24:13,500
kind of validate them against the

00:24:10,920 --> 00:24:15,270
assumptions of spinnaker so there's it's

00:24:13,500 --> 00:24:17,250
not all doom and gloom if we do this

00:24:15,270 --> 00:24:19,410
effort you might come out better on the

00:24:17,250 --> 00:24:21,510
other side but it's a large amount of

00:24:19,410 --> 00:24:23,610
effort and not something we've been

00:24:21,510 --> 00:24:26,070
chomping in the bit on the Netflix side

00:24:23,610 --> 00:24:28,380
but we might get forced into it over the

00:24:26,070 --> 00:24:30,030
next couple of quarters one of the best

00:24:28,380 --> 00:24:32,400
ways we found to integrate is kind of

00:24:30,030 --> 00:24:33,630
the API level so extending things that

00:24:32,400 --> 00:24:36,060
kubernetes is very easy because it's

00:24:33,630 --> 00:24:38,460
really based so if there's a way that we

00:24:36,060 --> 00:24:39,020
could hook in by the API it makes life a

00:24:38,460 --> 00:24:44,280
lot easier

00:24:39,020 --> 00:24:46,200
certainly I would I would add to that

00:24:44,280 --> 00:24:48,750
you know in general if you're extending

00:24:46,200 --> 00:24:51,240
any of their projects in so much as you

00:24:48,750 --> 00:24:53,250
can avoid bringing in external libraries

00:24:51,240 --> 00:24:56,550
it's it's to your advantage because

00:24:53,250 --> 00:24:58,380
you're sharing a single class path and

00:24:56,550 --> 00:25:00,360
so that's you know one of the things we

00:24:58,380 --> 00:25:02,400
do look at is we when we do do that

00:25:00,360 --> 00:25:04,530
extension we're looking at API level

00:25:02,400 --> 00:25:06,410
calls and reusing the existing libraries

00:25:04,530 --> 00:25:08,880
that we already have at our fingertips

00:25:06,410 --> 00:25:11,280
the one thing to keep in mind though is

00:25:08,880 --> 00:25:14,280
as part of the separation effort in

00:25:11,280 --> 00:25:16,230
cloud driver we now have I think two

00:25:14,280 --> 00:25:17,940
cloud providers that depend on the AWS

00:25:16,230 --> 00:25:20,040
cloud provider the tightest one for sure

00:25:17,940 --> 00:25:22,400
and I think the easy as one as well so

00:25:20,040 --> 00:25:24,990
there's a little bit more kind of

00:25:22,400 --> 00:25:27,140
juggling there needs to happen to figure

00:25:24,990 --> 00:25:31,940
out and I'm not quite sure how oh the

00:25:27,140 --> 00:25:31,940
good old engine and Google and

00:25:37,750 --> 00:25:41,220
[Music]

00:25:39,090 --> 00:25:43,710
I think App Engine and Google don't

00:25:41,220 --> 00:25:48,570
share much code but they might I'm not

00:25:43,710 --> 00:25:50,960
the right person the the thing that I I

00:25:48,570 --> 00:25:53,039
guess with tearing apart cloud driver

00:25:50,960 --> 00:25:57,049
makes me worried is that it's a lot more

00:25:53,039 --> 00:26:00,090
overhead and complexity right now the

00:25:57,049 --> 00:26:01,890
any of you have released a subcomponent

00:26:00,090 --> 00:26:03,149
of spinnaker and then try to use it in

00:26:01,890 --> 00:26:04,230
another sub component you've gone

00:26:03,149 --> 00:26:09,389
through that spinnaker dependencies

00:26:04,230 --> 00:26:11,429
library one of the problems there is

00:26:09,389 --> 00:26:12,960
that you sometimes something goes wrong

00:26:11,429 --> 00:26:14,909
you have to track down and say like okay

00:26:12,960 --> 00:26:16,380
so I really spent this version that

00:26:14,909 --> 00:26:18,179
means this sub component was at that

00:26:16,380 --> 00:26:19,590
version which means that one that was

00:26:18,179 --> 00:26:20,669
released is that another version which

00:26:19,590 --> 00:26:22,139
actually pulled in a different version

00:26:20,669 --> 00:26:23,460
of spending our dependencies and you

00:26:22,139 --> 00:26:26,870
start to walk down this path and then

00:26:23,460 --> 00:26:29,760
you at the end are left in a fairly

00:26:26,870 --> 00:26:31,139
convoluted state with respect to what's

00:26:29,760 --> 00:26:33,899
actually running and what Larry's

00:26:31,139 --> 00:26:35,970
imported so I guess there's there's a

00:26:33,899 --> 00:26:39,139
reason to pull up our cloud driver but

00:26:35,970 --> 00:26:42,360
I'm I guess my fear is that it adds more

00:26:39,139 --> 00:26:43,799
more trouble than it's worth I think one

00:26:42,360 --> 00:26:45,510
idea for pulling it apart would be to

00:26:43,799 --> 00:26:49,380
not rely on shared libraries and

00:26:45,510 --> 00:26:51,409
actually introduce some kind of a more

00:26:49,380 --> 00:26:55,139
network boundary before that and let the

00:26:51,409 --> 00:26:57,120
individual blast apart bits do all their

00:26:55,139 --> 00:26:59,039
business maybe they don't use Redis to

00:26:57,120 --> 00:27:01,769
cache maybe they don't need to cache but

00:26:59,039 --> 00:27:03,360
it opens up some flexibility there but

00:27:01,769 --> 00:27:05,309
yeah I do echo the concerns with

00:27:03,360 --> 00:27:06,029
certainly shared libraries and the pains

00:27:05,309 --> 00:27:08,309
we have right now

00:27:06,029 --> 00:27:09,870
with pushing updates across all the

00:27:08,309 --> 00:27:27,870
seven or eight services that we have

00:27:09,870 --> 00:27:30,029
right now going back to custom pipeline

00:27:27,870 --> 00:27:32,519
stages so what are your thoughts and

00:27:30,029 --> 00:27:35,070
experiences with the web book driver

00:27:32,519 --> 00:27:37,590
took a little bit of look at that and

00:27:35,070 --> 00:27:40,169
it's missing a few key features one is

00:27:37,590 --> 00:27:42,360
the ability to get some kind of logs out

00:27:40,169 --> 00:27:44,850
of it as well as parameters out of it

00:27:42,360 --> 00:27:47,690
any thoughts on that and and how what is

00:27:44,850 --> 00:27:47,690
this thing actually used

00:27:50,570 --> 00:27:55,440
you can you can add parameters by

00:27:53,340 --> 00:28:00,120
expressions you can add anything by

00:27:55,440 --> 00:28:03,059
experts and now you have two problems so

00:28:00,120 --> 00:28:06,029
I meant the other way pulling stuff out

00:28:03,059 --> 00:28:07,260
I know you can feed parameters in but it

00:28:06,029 --> 00:28:10,350
doesn't seem to have any way of getting

00:28:07,260 --> 00:28:12,360
parameter results out or some kind of

00:28:10,350 --> 00:28:18,960
logging you know build logs or you know

00:28:12,360 --> 00:28:23,059
operators out of it it's like it's what

00:28:18,960 --> 00:28:23,059
one bit output is yeah pacify all the

00:28:27,649 --> 00:28:32,429
ships the team create to the public

00:28:29,880 --> 00:28:34,769
stage and I was not deeply involved but

00:28:32,429 --> 00:28:36,210
one of the requirements was that payload

00:28:34,769 --> 00:28:38,610
you got back from the Webley stage

00:28:36,210 --> 00:28:40,919
should be able to give your links and

00:28:38,610 --> 00:28:48,620
stuff like that so I'm pretty sure it's

00:28:40,919 --> 00:28:57,120
in there just not discoverable yeah it's

00:28:48,620 --> 00:28:59,549
by I am reading the source I guess okay

00:28:57,120 --> 00:29:02,460
that does bring up one important thing

00:28:59,549 --> 00:29:04,289
with contributing upstream to this you

00:29:02,460 --> 00:29:07,049
should be contributing good

00:29:04,289 --> 00:29:08,220
documentation with that as well reading

00:29:07,049 --> 00:29:10,679
the sources I know he's the best

00:29:08,220 --> 00:29:11,250
solution I think we all can get better

00:29:10,679 --> 00:29:14,909
at that

00:29:11,250 --> 00:29:23,549
or add I agree there was a question in

00:29:14,909 --> 00:29:27,120
the middle towards at the back very nice

00:29:23,549 --> 00:29:29,519
a little there my question relates to

00:29:27,120 --> 00:29:32,850
the library our shared library

00:29:29,519 --> 00:29:35,399
dependency issues that you run into and

00:29:32,850 --> 00:29:38,730
the question is basically why not do a

00:29:35,399 --> 00:29:41,010
mono Reaper approach to this and since

00:29:38,730 --> 00:29:44,039
we're doing sort of clean cut releases

00:29:41,010 --> 00:29:46,139
for all the services at chartboost we

00:29:44,039 --> 00:29:48,029
have a suite of scala micro services

00:29:46,139 --> 00:29:49,230
that use a mono repo they share a bunch

00:29:48,029 --> 00:29:50,370
of code but they build a bunch of

00:29:49,230 --> 00:29:52,679
separate services that are run

00:29:50,370 --> 00:29:54,960
separately and it works very well for us

00:29:52,679 --> 00:29:58,730
to avoid these dependency issues has

00:29:54,960 --> 00:29:58,730
there been any thought given to that

00:29:59,940 --> 00:30:04,679
interesting idea I don't think any I

00:30:03,269 --> 00:30:05,819
don't think we're necessarily against it

00:30:04,679 --> 00:30:08,519
but I don't think we've given it a

00:30:05,819 --> 00:30:09,989
tremendous amount of thought some people

00:30:08,519 --> 00:30:12,029
on this on this panel come from

00:30:09,989 --> 00:30:15,209
organizations that are very Pro mono

00:30:12,029 --> 00:30:18,889
repo and have a lot of tooling available

00:30:15,209 --> 00:30:20,879
to support that and some companies are

00:30:18,889 --> 00:30:23,639
don't have a lot of tooling set up for

00:30:20,879 --> 00:30:26,749
mono repos Netflix and Google are at

00:30:23,639 --> 00:30:28,949
kind of opposite ends of that spectrum

00:30:26,749 --> 00:30:30,239
yes if push comes to shove and we feel

00:30:28,949 --> 00:30:31,769
all up and we feel a lot of pain and

00:30:30,239 --> 00:30:33,839
that's something that would almost

00:30:31,769 --> 00:30:38,329
instantly leave that pain without a lot

00:30:33,839 --> 00:30:48,299
of other problems we could consider it

00:30:38,329 --> 00:30:54,690
in the back there need to work on my

00:30:48,299 --> 00:30:57,869
hand skill I've learned of a road map

00:30:54,690 --> 00:31:01,769
item regarding a native CI capability

00:30:57,869 --> 00:31:03,749
offer thin spinnaker is there any kind

00:31:01,769 --> 00:31:05,549
of documentation Zoar or at least some

00:31:03,749 --> 00:31:10,589
level wariness of where that journey is

00:31:05,549 --> 00:31:12,749
going I mean that's something we've been

00:31:10,589 --> 00:31:15,869
kind of toying around with here at

00:31:12,749 --> 00:31:18,899
Netflix I'm not quite sure where it

00:31:15,869 --> 00:31:21,239
where it sits on the roadmap or or most

00:31:18,899 --> 00:31:23,459
likely it's changed internally we've

00:31:21,239 --> 00:31:25,769
we've kind of shifted focus a little bit

00:31:23,459 --> 00:31:28,949
we realize here at Netflix we've got a

00:31:25,769 --> 00:31:31,589
tremendous amount of Jenkins usage some

00:31:28,949 --> 00:31:33,089
of the SLA is around Jenkins are a

00:31:31,589 --> 00:31:35,249
little bit different than spinnaker

00:31:33,089 --> 00:31:37,469
we've got support for running containers

00:31:35,249 --> 00:31:39,119
and part of the thought is is there an

00:31:37,469 --> 00:31:40,949
opportunity to replace some of that

00:31:39,119 --> 00:31:43,889
Jenkins load with stuff running in

00:31:40,949 --> 00:31:45,479
containers and do a better job of kind

00:31:43,889 --> 00:31:47,909
of orchestrating and managing and

00:31:45,479 --> 00:31:50,039
exposing that in spinnaker so I think

00:31:47,909 --> 00:31:53,209
there's been a bit of movement on the

00:31:50,039 --> 00:31:55,649
Netflix side around kind of kind of CI

00:31:53,209 --> 00:31:58,979
but very immature right now and I

00:31:55,649 --> 00:32:01,589
wouldn't expect it or the next couple of

00:31:58,979 --> 00:32:03,929
quarters at least yeah we do want to

00:32:01,589 --> 00:32:05,940
improve the run job stage which Adam

00:32:03,929 --> 00:32:07,150
alluded to where at the very least you

00:32:05,940 --> 00:32:09,850
should be able to

00:32:07,150 --> 00:32:11,290
in kubernetes access the logs their

00:32:09,850 --> 00:32:13,720
container produced and have some better

00:32:11,290 --> 00:32:15,790
ability to troubleshoot and see what

00:32:13,720 --> 00:32:18,730
went right or wrong inside of your CI

00:32:15,790 --> 00:32:20,890
job but like like Adam said that's a few

00:32:18,730 --> 00:32:23,400
quarters down the road probably okay so

00:32:20,890 --> 00:32:26,500
if I can add further to that question

00:32:23,400 --> 00:32:28,840
that improvement to the CI integration

00:32:26,500 --> 00:32:31,030
right now if you want to look at the

00:32:28,840 --> 00:32:33,070
details of what the job has executed you

00:32:31,030 --> 00:32:35,320
have to click on the link and it takes

00:32:33,070 --> 00:32:37,870
you to the Jenkins server and you long

00:32:35,320 --> 00:32:41,590
possibly log in and you have to dig into

00:32:37,870 --> 00:32:44,110
the bill log I've actually done in some

00:32:41,590 --> 00:32:46,990
customization I would like to contribute

00:32:44,110 --> 00:32:49,540
but the idea is to be able to fetch the

00:32:46,990 --> 00:32:51,990
build log and make that so like within

00:32:49,540 --> 00:32:55,900
the view of the pipeline itself without

00:32:51,990 --> 00:32:58,990
externalizing the call is that something

00:32:55,900 --> 00:33:02,890
that you guys already you said you have

00:32:58,990 --> 00:33:05,020
pull requests coming in I think that's

00:33:02,890 --> 00:33:07,150
something that we would totally be open

00:33:05,020 --> 00:33:09,370
to because yeah you're right right now

00:33:07,150 --> 00:33:12,190
you click on that link and you get sent

00:33:09,370 --> 00:33:14,260
to probably an ugly Jenkins UI and you

00:33:12,190 --> 00:33:16,000
have to view that nice build blog it

00:33:14,260 --> 00:33:20,920
would be great if that was a little bit

00:33:16,000 --> 00:33:22,480
more embedded in the UI kind of the

00:33:20,920 --> 00:33:24,130
thing that actually ran it you could

00:33:22,480 --> 00:33:26,620
more easily see the parameters that went

00:33:24,130 --> 00:33:27,070
in and all the bits and pieces should be

00:33:26,620 --> 00:33:30,040
there

00:33:27,070 --> 00:33:32,530
egor already has access to the Jenkins

00:33:30,040 --> 00:33:35,530
that ran it so you could probably just

00:33:32,530 --> 00:33:37,480
stream that right back out to the UI so

00:33:35,530 --> 00:33:40,390
we'd love that is there any further

00:33:37,480 --> 00:33:42,400
thought process as far as since jenkin

00:33:40,390 --> 00:33:45,390
is your big enabler for the back end in

00:33:42,400 --> 00:33:48,660
terms of CI the thought process of

00:33:45,390 --> 00:33:50,800
making it more of a first-class citizen

00:33:48,660 --> 00:33:53,890
especially if it's a Jenkins to

00:33:50,800 --> 00:33:56,950
implementation whereby a Jenkins 2 has

00:33:53,890 --> 00:33:59,890
is offering as a pipeline concept be

00:33:56,950 --> 00:34:08,140
able to supposedly bring the

00:33:59,890 --> 00:34:10,990
visualization rather than just that

00:34:08,140 --> 00:34:14,980
single doc I think it's something that

00:34:10,990 --> 00:34:16,630
um perhaps like at the Netflix level

00:34:14,980 --> 00:34:18,880
we'd only engage with that much because

00:34:16,630 --> 00:34:21,660
just because Jenkins pipelines are not

00:34:18,880 --> 00:34:23,700
use is extensively

00:34:21,660 --> 00:34:25,860
for that integration but you know like

00:34:23,700 --> 00:34:27,270
if you have a way of kind of pulling in

00:34:25,860 --> 00:34:29,660
the information from a Jenkins to

00:34:27,270 --> 00:34:32,550
pipeline and be able to visualize that

00:34:29,660 --> 00:34:35,850
within the spinnaker pipeline we'll be

00:34:32,550 --> 00:34:39,630
happy to help you like figure that out

00:34:35,850 --> 00:34:41,490
and put that together on this discussion

00:34:39,630 --> 00:34:43,530
as well um one of the things that we

00:34:41,490 --> 00:34:46,470
talk about is also surface test results

00:34:43,530 --> 00:34:48,390
so being able to not have to go in and

00:34:46,470 --> 00:34:50,490
look at the wrong job stage or look at

00:34:48,390 --> 00:34:52,110
the Jenkins stage to see you know which

00:34:50,490 --> 00:34:55,980
tests fail when they fail and that kind

00:34:52,110 --> 00:35:00,120
of stuff so I mean it's definitely areas

00:34:55,980 --> 00:35:01,830
that can be improving spinnaker and you

00:35:00,120 --> 00:35:03,840
know if you guys have an interest in

00:35:01,830 --> 00:35:07,950
contributing this I'd be more than happy

00:35:03,840 --> 00:35:09,750
to point you to the there are a few like

00:35:07,950 --> 00:35:11,790
very low hanging fruits in that

00:35:09,750 --> 00:35:13,530
integration as well like for the longest

00:35:11,790 --> 00:35:15,270
time you have to turn off I think it's

00:35:13,530 --> 00:35:18,060
like cross-site scripting authentication

00:35:15,270 --> 00:35:20,430
and that really is just somebody coming

00:35:18,060 --> 00:35:23,040
in and adding an interceptor just say

00:35:20,430 --> 00:35:25,740
get this token and send it along and we

00:35:23,040 --> 00:35:27,210
haven't done it because you know like

00:35:25,740 --> 00:35:28,440
from the Jenkins perspective you just

00:35:27,210 --> 00:35:30,510
flip that switch and never touch it

00:35:28,440 --> 00:35:31,860
again but everybody that wants to get

00:35:30,510 --> 00:35:34,410
started with spinnaker runs into this

00:35:31,860 --> 00:35:36,960
issue of I can't talk to Jenkins why and

00:35:34,410 --> 00:35:39,780
you have to disable that so there's

00:35:36,960 --> 00:35:41,340
definitely kind of a bunch of errors in

00:35:39,780 --> 00:35:42,630
the Jenkins integration that we just

00:35:41,340 --> 00:35:45,240
haven't done because we don't have time

00:35:42,630 --> 00:35:48,750
but if anybody is willing to help out

00:35:45,240 --> 00:35:51,750
there I mean a lot of things that can

00:35:48,750 --> 00:35:53,790
make that better I think doing a like

00:35:51,750 --> 00:35:55,740
Jenkins to kind of blue ocean

00:35:53,790 --> 00:35:58,200
integration muddies the water a little

00:35:55,740 --> 00:35:59,880
bit it's kind of like running pipelines

00:35:58,200 --> 00:36:01,680
within pipelines and you've got to kind

00:35:59,880 --> 00:36:03,810
of jump between those two systems we've

00:36:01,680 --> 00:36:06,090
already got a mechanism to call a

00:36:03,810 --> 00:36:08,340
Jenkins job regardless of where it's run

00:36:06,090 --> 00:36:09,810
take they take the results from I take

00:36:08,340 --> 00:36:13,460
the parameters and then call another

00:36:09,810 --> 00:36:17,100
Jenkins job we had teams migrate off of

00:36:13,460 --> 00:36:18,600
the predecessor to blue ocean but

00:36:17,100 --> 00:36:21,270
Jenkins pipeline's very kind of deeply

00:36:18,600 --> 00:36:24,570
nested pipelines and pulled that up very

00:36:21,270 --> 00:36:26,760
successfully up into spinnaker and that

00:36:24,570 --> 00:36:28,920
worked pretty well so I would I would at

00:36:26,760 --> 00:36:32,250
least have a conversation like to have a

00:36:28,920 --> 00:36:33,390
conversation around

00:36:32,250 --> 00:36:37,730
something like that happening before

00:36:33,390 --> 00:36:37,730
really committing a lot of effort to it

00:36:42,200 --> 00:36:47,970
yeah before yes / as this question and

00:36:46,920 --> 00:36:51,510
aren't you know on our space we use

00:36:47,970 --> 00:36:53,790
Jenkins both from a CI build and then we

00:36:51,510 --> 00:36:57,599
also use Jenkins for you know extensions

00:36:53,790 --> 00:37:01,560
and deployment and I'm kind of the same

00:36:57,599 --> 00:37:03,270
way so we're trying to get everybody to

00:37:01,560 --> 00:37:04,980
kind of surface the data that matters as

00:37:03,270 --> 00:37:07,230
an artifact out of their their build

00:37:04,980 --> 00:37:10,320
jobs that do the release that ultimately

00:37:07,230 --> 00:37:13,680
trigger spinnaker to start deploying and

00:37:10,320 --> 00:37:15,900
do those things so the the UI parts of

00:37:13,680 --> 00:37:18,359
Jenkins for the builds are kind of

00:37:15,900 --> 00:37:21,810
boring because they they have succeeded

00:37:18,359 --> 00:37:24,450
to get to that point when it comes to

00:37:21,810 --> 00:37:26,099
the you know the deployment side we

00:37:24,450 --> 00:37:29,460
really encourage people just to focus on

00:37:26,099 --> 00:37:32,700
small cohesive jobs right don't build

00:37:29,460 --> 00:37:34,710
big pipelines in Jenkins build a job it

00:37:32,700 --> 00:37:37,680
has an input has a direct output and

00:37:34,710 --> 00:37:41,660
it's a task at that point and that's how

00:37:37,680 --> 00:37:41,660
you extend with the Jenkins stage a

00:37:43,250 --> 00:37:48,720
little bit I wanted to ask about

00:37:45,950 --> 00:37:52,200
extending spinnaker from the plugins

00:37:48,720 --> 00:37:52,670
perspective because it seems that right

00:37:52,200 --> 00:37:56,099
now you

00:37:52,670 --> 00:37:58,080
y'all are recommending that we from

00:37:56,099 --> 00:38:00,390
Kennesaw yesterday write our own

00:37:58,080 --> 00:38:02,190
libraries and take advantage of the

00:38:00,390 --> 00:38:03,869
dependency injections part of spring

00:38:02,190 --> 00:38:07,200
boot and then compile our own build of

00:38:03,869 --> 00:38:08,940
the spinnaker services that doesn't lend

00:38:07,200 --> 00:38:12,150
itself to collaboration with the

00:38:08,940 --> 00:38:13,680
community and it makes a little

00:38:12,150 --> 00:38:16,380
difficult if we have something that we

00:38:13,680 --> 00:38:18,180
think would be useful for you know 10%

00:38:16,380 --> 00:38:20,220
of people who use spinnaker how do we

00:38:18,180 --> 00:38:22,920
get it out there to that 10% without

00:38:20,220 --> 00:38:24,060
having to you know support the 90% of

00:38:22,920 --> 00:38:28,859
people who are gonna look at it and be

00:38:24,060 --> 00:38:31,980
like why is that even in the code yeah I

00:38:28,859 --> 00:38:33,720
don't have a good answer for that but I

00:38:31,980 --> 00:38:36,839
think it's something certainly to

00:38:33,720 --> 00:38:38,849
consider and to certainly hear proposals

00:38:36,839 --> 00:38:42,950
on what that might look like like how

00:38:38,849 --> 00:38:45,300
can I make him more easily distributable

00:38:42,950 --> 00:38:46,830
extension to spinnaker that doesn't

00:38:45,300 --> 00:38:49,860
require me to

00:38:46,830 --> 00:38:52,290
monkey with the main code base and kind

00:38:49,860 --> 00:38:55,590
of kind of get it committed in there but

00:38:52,290 --> 00:38:58,140
also ensure discoverable make sure it's

00:38:55,590 --> 00:39:01,380
like people can package it in and enable

00:38:58,140 --> 00:39:03,690
it were appropriate and I don't have a

00:39:01,380 --> 00:39:09,300
good answer for that right now but I can

00:39:03,690 --> 00:39:12,240
see its benefit the artifacts you have

00:39:09,300 --> 00:39:13,860
to ask yourself what you want extend

00:39:12,240 --> 00:39:16,020
spinnaker for and in most cases what we

00:39:13,860 --> 00:39:17,790
see is people want to have another way

00:39:16,020 --> 00:39:19,860
to talk with a system and pass data back

00:39:17,790 --> 00:39:21,510
and forth and if it's not something

00:39:19,860 --> 00:39:22,950
simple like a pipeline parameter like

00:39:21,510 --> 00:39:25,850
some string value or something you

00:39:22,950 --> 00:39:28,170
canyou capsulate in a spring expression

00:39:25,850 --> 00:39:29,850
it might be something like like you want

00:39:28,170 --> 00:39:31,050
to get a file or a folder from github

00:39:29,850 --> 00:39:32,580
and just vinegar and have to do

00:39:31,050 --> 00:39:34,500
something smart with that where you want

00:39:32,580 --> 00:39:36,630
to produce artifacts staged them in an

00:39:34,500 --> 00:39:39,840
s3 bucket and then have those pulled out

00:39:36,630 --> 00:39:42,180
of s3 and used in some way and spinnaker

00:39:39,840 --> 00:39:45,300
as pipeline parameters or as a manifest

00:39:42,180 --> 00:39:47,010
in kubernetes and as you start to think

00:39:45,300 --> 00:39:48,930
about these things you realize there's

00:39:47,010 --> 00:39:51,420
really a lot of ways that you can make

00:39:48,930 --> 00:39:53,150
use these artifacts and use them in

00:39:51,420 --> 00:39:56,910
interesting ways inside of spinnaker and

00:39:53,150 --> 00:39:58,530
ideally with providing a proper API for

00:39:56,910 --> 00:39:59,790
supplying this a spinnaker and also

00:39:58,530 --> 00:40:01,710
extracting them from spinnaker after

00:39:59,790 --> 00:40:03,750
finishes like for example you could say

00:40:01,710 --> 00:40:05,040
that some spinnaker pipeline could

00:40:03,750 --> 00:40:06,990
export the things that deployed as

00:40:05,040 --> 00:40:08,820
artifacts and then some further

00:40:06,990 --> 00:40:10,290
integration tests we could run based on

00:40:08,820 --> 00:40:12,090
the things that were deployed because

00:40:10,290 --> 00:40:15,840
the names might not be statically

00:40:12,090 --> 00:40:17,910
resolvable and it's not the full picture

00:40:15,840 --> 00:40:19,880
solution to how do we get the spinnaker

00:40:17,910 --> 00:40:22,170
to be fully pluggable but it gets us

00:40:19,880 --> 00:40:24,090
quite a bit further when when you talk

00:40:22,170 --> 00:40:26,340
about how does it interact with any

00:40:24,090 --> 00:40:28,200
arbitrary CI system or how do you have

00:40:26,340 --> 00:40:31,490
it talk to get out of events and stuff

00:40:28,200 --> 00:40:35,220
like that it's your question about

00:40:31,490 --> 00:40:37,200
plug-in is it the style of code that you

00:40:35,220 --> 00:40:40,560
have to write or the mechanics of

00:40:37,200 --> 00:40:43,470
distribution primarily about the

00:40:40,560 --> 00:40:45,410
mechanics of distribution is I think

00:40:43,470 --> 00:40:47,850
that that's more of a solvable problem

00:40:45,410 --> 00:40:50,670
now that you have like halyard is the

00:40:47,850 --> 00:40:52,740
standard entry point for assembling the

00:40:50,670 --> 00:40:54,030
distribution that's like you can we can

00:40:52,740 --> 00:40:56,000
start to at least think about that this

00:40:54,030 --> 00:40:58,680
is something you know and I'm

00:40:56,000 --> 00:41:00,250
interacting as part of the panel here we

00:40:58,680 --> 00:41:02,050
I thought of this

00:41:00,250 --> 00:41:03,550
when we first did the very first release

00:41:02,050 --> 00:41:05,109
of Spinnaker's like how are we going to

00:41:03,550 --> 00:41:07,960
get this to people in ways that would

00:41:05,109 --> 00:41:10,750
allow them to extend it but not have to

00:41:07,960 --> 00:41:14,230
compile it and it's still an open

00:41:10,750 --> 00:41:16,930
problem but now that we have a tool that

00:41:14,230 --> 00:41:18,400
will build a effectively a distribution

00:41:16,930 --> 00:41:20,859
of it for you

00:41:18,400 --> 00:41:23,290
that's not compiled you know there could

00:41:20,859 --> 00:41:25,720
be is all you need to do is put things

00:41:23,290 --> 00:41:27,790
on the classpath and spring or summer so

00:41:25,720 --> 00:41:29,530
it doesn't you don't necessarily have to

00:41:27,790 --> 00:41:32,500
have things compiled so the why

00:41:29,530 --> 00:41:36,010
everything is there to build custom

00:41:32,500 --> 00:41:37,810
things from other pieces that doesn't

00:41:36,010 --> 00:41:40,690
involve running a build like a java

00:41:37,810 --> 00:41:42,490
build so it's you know it's all possible

00:41:40,690 --> 00:41:45,160
it's just a matter of like figuring out

00:41:42,490 --> 00:41:47,560
how would people you know distribute

00:41:45,160 --> 00:41:51,760
these things you know it's like there's

00:41:47,560 --> 00:41:53,170
all of the ecosystem requirements around

00:41:51,760 --> 00:41:54,970
like suddenly you want to stick

00:41:53,170 --> 00:41:57,760
something and that didn't come from the

00:41:54,970 --> 00:41:59,260
spinnaker core distribution I think

00:41:57,760 --> 00:42:00,820
that's the one concern as well you know

00:41:59,260 --> 00:42:02,920
like what's the quality of the code out

00:42:00,820 --> 00:42:04,660
there you know like if you have some

00:42:02,920 --> 00:42:07,630
sort of plug-in repository or anybody

00:42:04,660 --> 00:42:11,410
can just say oh yeah here's my you know

00:42:07,630 --> 00:42:12,670
integration with X Y and C and then all

00:42:11,410 --> 00:42:15,599
of the sudden that person gets run over

00:42:12,670 --> 00:42:19,089
by a bus and nobody knows how it works

00:42:15,599 --> 00:42:21,910
run into this kind of quality issues as

00:42:19,089 --> 00:42:24,970
well so you know like perhaps having

00:42:21,910 --> 00:42:27,040
this notion of like more validated

00:42:24,970 --> 00:42:31,740
things that are committed into core so

00:42:27,040 --> 00:42:34,630
that at least there's a certain level of

00:42:31,740 --> 00:42:36,310
you know checking and integration

00:42:34,630 --> 00:42:38,470
failure and all this stuff is there at

00:42:36,310 --> 00:42:42,760
this point makes more sense but I don't

00:42:38,470 --> 00:42:44,200
know the devil's advocate approach that

00:42:42,760 --> 00:42:47,920
would be we have stuff in core right now

00:42:44,200 --> 00:42:50,560
that's not terribly well maintained so I

00:42:47,920 --> 00:42:52,890
think that problem is a or you have you

00:42:50,560 --> 00:42:55,270
could run into the same problem even way

00:42:52,890 --> 00:42:57,730
one of the issues with stuff going into

00:42:55,270 --> 00:42:59,230
core is then you run into a bit of a

00:42:57,730 --> 00:43:00,550
configuration nightmare where you need

00:42:59,230 --> 00:43:02,830
to understand and remember all these

00:43:00,550 --> 00:43:05,560
configuration flags of when you want

00:43:02,830 --> 00:43:08,160
stuff enabled and disabled we see a bit

00:43:05,560 --> 00:43:11,109
of that here at Netflix because we run

00:43:08,160 --> 00:43:13,420
three different stacks volatile stacks

00:43:11,109 --> 00:43:15,220
have it has a different profile

00:43:13,420 --> 00:43:16,840
ya'mo files and there's lots of

00:43:15,220 --> 00:43:19,060
inheritance going on there so we need to

00:43:16,840 --> 00:43:20,620
kind of be worried about what's being

00:43:19,060 --> 00:43:22,000
inherited and oh we don't want to

00:43:20,620 --> 00:43:23,260
inherit the wrong thing that turns

00:43:22,000 --> 00:43:25,870
something on in a pre-staging

00:43:23,260 --> 00:43:28,690
environment so as much as you could

00:43:25,870 --> 00:43:31,840
maybe avoid that by something physically

00:43:28,690 --> 00:43:37,930
not being on the class path is an

00:43:31,840 --> 00:43:41,410
interesting idea also wanted to follow

00:43:37,930 --> 00:43:43,420
with that is do you all maintain a list

00:43:41,410 --> 00:43:46,090
of feature requests I've noticed the

00:43:43,420 --> 00:43:49,780
road map is pretty broad these days and

00:43:46,090 --> 00:43:52,270
as the team I guess is expanding but do

00:43:49,780 --> 00:43:54,040
you have any asks that we should feature

00:43:52,270 --> 00:43:55,840
that we should be working on that would

00:43:54,040 --> 00:44:03,460
get into core that you want the

00:43:55,840 --> 00:44:04,810
community to be contributing the gate of

00:44:03,460 --> 00:44:06,010
issue tracker is pretty great too I

00:44:04,810 --> 00:44:07,660
think if there's an issue there that you

00:44:06,010 --> 00:44:09,550
see that you want implemented and you

00:44:07,660 --> 00:44:11,320
ping I think it's like spinnaker slash

00:44:09,550 --> 00:44:12,250
reviewers or you just ping the dev

00:44:11,320 --> 00:44:14,230
Channel and say like what do people

00:44:12,250 --> 00:44:15,970
think about this yeah we want that but

00:44:14,230 --> 00:44:19,420
don't have time that's a great place to

00:44:15,970 --> 00:44:21,160
jump in you can just pink spinnaker

00:44:19,420 --> 00:44:28,480
reviewers so first get a job at Google

00:44:21,160 --> 00:44:30,190
or Netflix jerem the dev chat to answer

00:44:28,480 --> 00:44:31,680
the specific question around roadmap and

00:44:30,190 --> 00:44:35,410
what the open source community can

00:44:31,680 --> 00:44:36,970
contribute that survey that I talked

00:44:35,410 --> 00:44:38,590
about yesterday morning that I would

00:44:36,970 --> 00:44:41,140
definitely encourage everyone to fill

00:44:38,590 --> 00:44:42,940
out was eye-opening for me and I suspect

00:44:41,140 --> 00:44:45,460
other people that have seen the results

00:44:42,940 --> 00:44:47,110
in that a lot of the core features that

00:44:45,460 --> 00:44:49,140
you all want are the same core features

00:44:47,110 --> 00:44:51,670
that for example users at Netflix want

00:44:49,140 --> 00:44:52,900
and so it was an opportunity for me to

00:44:51,670 --> 00:44:55,150
realize that we should do a better job

00:44:52,900 --> 00:44:56,890
about talking about our long term

00:44:55,150 --> 00:44:59,080
roadmap and some of the big things were

00:44:56,890 --> 00:45:00,340
thinking about because we used to look

00:44:59,080 --> 00:45:02,020
at and say well this is just a Netflix

00:45:00,340 --> 00:45:03,370
problem so it's not really worth kind of

00:45:02,020 --> 00:45:05,020
muddying the open source world with all

00:45:03,370 --> 00:45:07,240
these problems but it turns out you all

00:45:05,020 --> 00:45:09,310
want the same thing so the long answer

00:45:07,240 --> 00:45:10,210
is I will do a better job along with

00:45:09,310 --> 00:45:11,680
Stephen and other people in the

00:45:10,210 --> 00:45:12,820
community of articulating these are some

00:45:11,680 --> 00:45:14,140
things we're really thinking about

00:45:12,820 --> 00:45:15,400
working on over the next few quarters

00:45:14,140 --> 00:45:19,240
and we'd love some

00:45:15,400 --> 00:45:21,040
I may be interpreting your question a

00:45:19,240 --> 00:45:23,560
little bit wrong but it sounded like

00:45:21,040 --> 00:45:25,180
you're asking like if you want to start

00:45:23,560 --> 00:45:27,200
contributing you know you're asking like

00:45:25,180 --> 00:45:30,680
where would be a good place

00:45:27,200 --> 00:45:34,359
and I would say that it'd be better for

00:45:30,680 --> 00:45:36,440
you if you find your pain points and

00:45:34,359 --> 00:45:38,319
contribute to fix that because you're

00:45:36,440 --> 00:45:44,089
going to be more engaged with fixing

00:45:38,319 --> 00:45:47,510
what you already your pain point your

00:45:44,089 --> 00:45:50,660
passion you know not oh here is you know

00:45:47,510 --> 00:45:52,490
there's a bug you know that netflix has

00:45:50,660 --> 00:45:56,720
or Google has with something that I

00:45:52,490 --> 00:45:58,970
never you isn't like I I can submit

00:45:56,720 --> 00:46:00,619
something for it but I'm not gonna use

00:45:58,970 --> 00:46:02,240
it I'm not gonna see it like it's you

00:46:00,619 --> 00:46:06,859
know after that you know I'm just gonna

00:46:02,240 --> 00:46:08,510
dump it on corn forget about it so we'll

00:46:06,859 --> 00:46:15,559
do one more question and I think I have

00:46:08,510 --> 00:46:18,170
to hand about that I believe there is a

00:46:15,559 --> 00:46:21,140
support for a country in answer and claw

00:46:18,170 --> 00:46:22,700
driver but I haven't heard much about

00:46:21,140 --> 00:46:25,220
those lately

00:46:22,700 --> 00:46:34,490
do you guys have any insight are they

00:46:25,220 --> 00:46:36,710
still being let's throw it to Andy so

00:46:34,490 --> 00:46:40,430
yeah there there is a cloud foundry and

00:46:36,710 --> 00:46:43,490
as as your support those two efforts

00:46:40,430 --> 00:46:44,809
were led by pivotal and Microsoft the

00:46:43,490 --> 00:46:46,700
pivotal team has moved on some other

00:46:44,809 --> 00:46:48,020
stuff and the Microsoft team is trying

00:46:46,700 --> 00:46:49,700
to figure out who can kind of take it

00:46:48,020 --> 00:46:51,380
over I think this is a great opportunity

00:46:49,700 --> 00:46:53,809
for the open-source community to kind of

00:46:51,380 --> 00:46:55,640
step up and and add the particular

00:46:53,809 --> 00:46:58,099
features they want but I think this is

00:46:55,640 --> 00:47:01,280
also an indication of reality for

00:46:58,099 --> 00:47:03,460
open-source in that you know for example

00:47:01,280 --> 00:47:07,069
the pivotal folks they're a business

00:47:03,460 --> 00:47:08,960
they ultimately have to you know account

00:47:07,069 --> 00:47:10,160
for let's say you know bodies working on

00:47:08,960 --> 00:47:11,750
open source they have to find some sort

00:47:10,160 --> 00:47:13,190
of source of revenue and they saw a

00:47:11,750 --> 00:47:15,920
better source let's say somewhere else

00:47:13,190 --> 00:47:17,150
and they solve within spinnaker that

00:47:15,920 --> 00:47:18,559
doesn't mean the efforts dead I think

00:47:17,150 --> 00:47:21,680
anyone can pick it up and actually run

00:47:18,559 --> 00:47:24,230
with it but it's it's reality of open

00:47:21,680 --> 00:47:26,270
source you can see obviously the Netflix

00:47:24,230 --> 00:47:29,299
committed AWS you know obviously Google

00:47:26,270 --> 00:47:31,940
is committed to TCP targets doing a lot

00:47:29,299 --> 00:47:33,230
of OpenStack stuff and hopefully we can

00:47:31,940 --> 00:47:36,760
get Microsoft kind of squared away and

00:47:33,230 --> 00:47:36,760
figure out where their priorities lie

00:47:38,240 --> 00:47:56,660
that they can do it so three Microsoft

00:47:55,340 --> 00:47:58,190
people registered but I don't know if

00:47:56,660 --> 00:48:01,520
they're here is anybody from Microsoft

00:47:58,190 --> 00:48:04,760
here so we have a customer on Azure

00:48:01,520 --> 00:48:06,500
that's asking for spinnaker support and

00:48:04,760 --> 00:48:08,960
saying it's a blocker if they don't get

00:48:06,500 --> 00:48:11,150
it the Microsoft team working with them

00:48:08,960 --> 00:48:14,000
is very motivated to make them happy

00:48:11,150 --> 00:48:16,070
they have asked us to find them other

00:48:14,000 --> 00:48:20,360
companies that want spinnaker to work

00:48:16,070 --> 00:48:21,710
well on Azure if you if your company or

00:48:20,360 --> 00:48:23,900
if you know of companies that want that

00:48:21,710 --> 00:48:25,190
please let me know because we have some

00:48:23,900 --> 00:48:27,020
very motivated Microsoft people that

00:48:25,190 --> 00:48:49,760
want to hear about it so they'll be

00:48:27,020 --> 00:48:52,820
great is the core community willing to

00:48:49,760 --> 00:48:55,580
just pull the plug on things if no one

00:48:52,820 --> 00:48:58,220
does step up because obviously if it's

00:48:55,580 --> 00:49:02,710
there but not working which will

00:48:58,220 --> 00:49:05,330
eventually happen I see you're nodding

00:49:02,710 --> 00:49:08,060
or like in the case of in the case of

00:49:05,330 --> 00:49:10,280
azure there's been a bunch of kind of

00:49:08,060 --> 00:49:12,410
questions asked in the open and the open

00:49:10,280 --> 00:49:14,410
source lock there's been github agent

00:49:12,410 --> 00:49:18,109
there are stuff that that is not working

00:49:14,410 --> 00:49:20,630
my personal opinion is I lean towards

00:49:18,109 --> 00:49:22,070
pulling the plug it's clearly separating

00:49:20,630 --> 00:49:24,970
again getting you out of the codebase

00:49:22,070 --> 00:49:26,900
because it does money the water and

00:49:24,970 --> 00:49:28,670
leaving it somewhere else so that if

00:49:26,900 --> 00:49:30,500
somebody wants to step up and kind of

00:49:28,670 --> 00:49:31,880
support that there's not there's a

00:49:30,500 --> 00:49:34,280
starting point you obviously don't need

00:49:31,880 --> 00:49:37,670
to start from scratch but I don't think

00:49:34,280 --> 00:49:40,400
anybody certainly on this panel and kind

00:49:37,670 --> 00:49:41,450
of has the capacity to take up a cloud

00:49:40,400 --> 00:49:43,280
provider that they're not really

00:49:41,450 --> 00:49:45,609
bringing in production and that's kind

00:49:43,280 --> 00:49:47,660
of the best the best way of keeping

00:49:45,609 --> 00:49:48,920
certainly cloud provider integrations up

00:49:47,660 --> 00:49:50,910
to date is if you're running it in

00:49:48,920 --> 00:49:53,579
production and you really care about

00:49:50,910 --> 00:49:56,700
that's why I would say the the AWS one

00:49:53,579 --> 00:49:59,430
is quite good its battle-tested here

00:49:56,700 --> 00:50:01,160
similarly with Titus Google and

00:49:59,430 --> 00:50:03,450
kubernetes as well

00:50:01,160 --> 00:50:05,280
OpenStack kind of the stuff that there's

00:50:03,450 --> 00:50:07,530
people here that built it because they

00:50:05,280 --> 00:50:10,890
want to run it that's a pattern that

00:50:07,530 --> 00:50:14,040
you've seen work really well I think

00:50:10,890 --> 00:50:16,320
it's worth pointing out when is that

00:50:14,040 --> 00:50:27,180
this is that whole conversation about

00:50:16,320 --> 00:50:29,460
moving this feeds into the conversation

00:50:27,180 --> 00:50:31,440
about breaking up cloud rail into

00:50:29,460 --> 00:50:33,150
separate repos and this is something

00:50:31,440 --> 00:50:35,460
that yeah so we could take let's say the

00:50:33,150 --> 00:50:36,839
is your one or the cloud foundry one put

00:50:35,460 --> 00:50:38,520
it in its own repo and say hey if you're

00:50:36,839 --> 00:50:40,050
really interested in continuing on with

00:50:38,520 --> 00:50:43,920
cloud foundry there's your repo have at

00:50:40,050 --> 00:50:45,300
it so pulling the plug that's that's how

00:50:43,920 --> 00:50:46,800
I see pulling the plug not so much just

00:50:45,300 --> 00:50:56,130
completely removing the code and saying

00:50:46,800 --> 00:50:57,869
goodbye goodbye so you know Cerner we

00:50:56,130 --> 00:51:00,089
kind of a unique position because we're

00:50:57,869 --> 00:51:02,730
a producer or supporter of one of those

00:51:00,089 --> 00:51:05,130
right now although I think you know well

00:51:02,730 --> 00:51:06,810
was pretty clear in his discussion the

00:51:05,130 --> 00:51:08,490
other day it's like we're motivated to

00:51:06,810 --> 00:51:10,609
do the things that we're using as it

00:51:08,490 --> 00:51:13,619
relates to features that were not using

00:51:10,609 --> 00:51:15,359
and if the community is looking to run

00:51:13,619 --> 00:51:18,599
DCOs and wants those features you know

00:51:15,359 --> 00:51:20,359
we're gonna look today to the community

00:51:18,599 --> 00:51:23,640
to help you know build those features

00:51:20,359 --> 00:51:25,440
but then we're also a consumer of some

00:51:23,640 --> 00:51:27,510
of the other providers right and I I

00:51:25,440 --> 00:51:29,280
think it would be good to if nothing

00:51:27,510 --> 00:51:31,950
else at least indicate kind of a

00:51:29,280 --> 00:51:34,920
maturity level for a given cloud

00:51:31,950 --> 00:51:36,359
provider implementation because as a

00:51:34,920 --> 00:51:38,300
consumer you want to kind of know going

00:51:36,359 --> 00:51:41,040
in hey if I want to do a sure oh it's

00:51:38,300 --> 00:51:43,829
you know it's you know not fully

00:51:41,040 --> 00:51:48,089
supported and not fully up-to-date

00:51:43,829 --> 00:51:51,599
that's good to know going in I know one

00:51:48,089 --> 00:51:56,310
challenge we had with OpenStack is when

00:51:51,599 --> 00:51:57,930
we developed it we were on so I don't

00:51:56,310 --> 00:52:00,390
know how many are familiar with the

00:51:57,930 --> 00:52:02,730
OpenStack release model but it is fast

00:52:00,390 --> 00:52:05,839
every six months they have a conference

00:52:02,730 --> 00:52:05,839
and they do a major

00:52:06,089 --> 00:52:14,500
and they're not good about api

00:52:08,980 --> 00:52:17,609
compatibility ah so like at Target we

00:52:14,500 --> 00:52:20,680
were two versions behind the current I

00:52:17,609 --> 00:52:22,720
believe Veritas was one version behind

00:52:20,680 --> 00:52:25,630
current at the time and through the

00:52:22,720 --> 00:52:28,539
through the process you got to a point

00:52:25,630 --> 00:52:30,339
where like we just could not control or

00:52:28,539 --> 00:52:32,470
we could not manage load balancers and

00:52:30,339 --> 00:52:34,180
attach their groups to them correctly

00:52:32,470 --> 00:52:36,010
through the API and so we had to

00:52:34,180 --> 00:52:37,869
actually say all right we're gonna

00:52:36,010 --> 00:52:41,349
target latest but we didn't actually

00:52:37,869 --> 00:52:45,849
have on OpenStack cluster on latest and

00:52:41,349 --> 00:52:47,950
so we got done and then we just sat on

00:52:45,849 --> 00:52:50,440
it for a year until our OpenStack team

00:52:47,950 --> 00:52:52,960
can now finally have a cluster for us to

00:52:50,440 --> 00:52:55,510
use spinnaker with and so now we're

00:52:52,960 --> 00:52:57,970
getting back into oh hey here's all the

00:52:55,510 --> 00:53:00,069
rough edges that we thought worked and

00:52:57,970 --> 00:53:04,140
turns out when you actually try using it

00:53:00,069 --> 00:53:08,410
like not really but you know now that's

00:53:04,140 --> 00:53:11,009
again to release is behind I think and

00:53:08,410 --> 00:53:16,869
that is going to be an ongoing challenge

00:53:11,009 --> 00:53:18,430
for us oh do you guys feel like this is

00:53:16,869 --> 00:53:21,069
really more of a documentation issue

00:53:18,430 --> 00:53:23,769
when you can have like a page in the

00:53:21,069 --> 00:53:25,869
spinnaker i/o site that says here the

00:53:23,769 --> 00:53:28,900
versions that we have you know like core

00:53:25,869 --> 00:53:30,640
Nettie's to sit work with latest version

00:53:28,900 --> 00:53:33,279
on scene you know that kind of stuff

00:53:30,640 --> 00:53:37,299
like do you feel like that's that would

00:53:33,279 --> 00:53:38,799
be helpful ask the question I can point

00:53:37,299 --> 00:53:40,630
out that we originally as part of the

00:53:38,799 --> 00:53:42,250
release process wanted to publish all

00:53:40,630 --> 00:53:43,690
the test results across various

00:53:42,250 --> 00:53:45,750
platforms where spinnaker is installed

00:53:43,690 --> 00:53:48,880
and what platforms Baker was managing

00:53:45,750 --> 00:53:50,859
but the first try wasn't very consumable

00:53:48,880 --> 00:53:53,259
we're gonna take another look at making

00:53:50,859 --> 00:53:55,150
that may be easier to grok and look at

00:53:53,259 --> 00:53:56,829
and see that well hey this cloud

00:53:55,150 --> 00:54:00,880
provider has some issue and Lia's

00:53:56,829 --> 00:54:02,829
release yeah I think that's that's kind

00:54:00,880 --> 00:54:05,710
of the ideal way of doing it in my

00:54:02,829 --> 00:54:08,259
opinion is to have some sanity tests

00:54:05,710 --> 00:54:10,299
that run as part of a proper release

00:54:08,259 --> 00:54:13,000
that ideally runs against each of the

00:54:10,299 --> 00:54:15,099
target environments assuming we were

00:54:13,000 --> 00:54:17,230
able to split apart cloud provider you

00:54:15,099 --> 00:54:18,430
could also have a bit of a TCK that runs

00:54:17,230 --> 00:54:20,109
between all the cloud

00:54:18,430 --> 00:54:22,569
provider implementations and maybe just

00:54:20,109 --> 00:54:24,790
publish the results of that and you'd

00:54:22,569 --> 00:54:26,950
catch things that maybe fell out of fell

00:54:24,790 --> 00:54:28,599
out of date I suspect it would

00:54:26,950 --> 00:54:31,450
definitely have caught the most recent

00:54:28,599 --> 00:54:32,079
issues with Azure but yeah that's easier

00:54:31,450 --> 00:54:39,670
said than done

00:54:32,079 --> 00:54:41,290
I know Eric at Google had a project that

00:54:39,670 --> 00:54:45,369
I think is now under the spinnaker org

00:54:41,290 --> 00:54:50,980
isn't it for doing sort of like live

00:54:45,369 --> 00:54:53,260
testing against uh we caught these or

00:54:50,980 --> 00:54:55,809
problem when at the moment it was

00:54:53,260 --> 00:54:58,809
introduced and we notified Microsoft

00:54:55,809 --> 00:55:01,720
back and they just the resources to fix

00:54:58,809 --> 00:55:05,160
it so ultimately we agreed with them

00:55:01,720 --> 00:55:10,180
that we would take it out of you know

00:55:05,160 --> 00:55:14,440
regular testing but because we need to

00:55:10,180 --> 00:55:16,630
publish the as large saying summary

00:55:14,440 --> 00:55:19,210
about what platforms are supported

00:55:16,630 --> 00:55:20,950
normally we test everything you know we

00:55:19,210 --> 00:55:23,349
don't release things unless everything's

00:55:20,950 --> 00:55:27,099
working to the tests provided by the

00:55:23,349 --> 00:55:34,329
different providers yeah that's

00:55:27,099 --> 00:55:37,420
something that we need to address the

00:55:34,329 --> 00:55:39,549
the introduction of OpenStack and

00:55:37,420 --> 00:55:41,740
kubernetes providers which you build

00:55:39,549 --> 00:55:44,380
internally and managed internally and

00:55:41,740 --> 00:55:47,079
have different versions and we are doing

00:55:44,380 --> 00:55:50,349
that with cabinets in ships as well and

00:55:47,079 --> 00:55:52,809
currently we're running 1.6 I know the

00:55:50,349 --> 00:55:55,809
real common new cluster with 1.7 and

00:55:52,809 --> 00:55:58,480
this scares me a lot we will probably at

00:55:55,809 --> 00:56:01,990
some point have version 2 and also a

00:55:58,480 --> 00:56:04,869
version 1.6 cluster and I'm kind of

00:56:01,990 --> 00:56:09,970
scared of how we should manage vinegar

00:56:04,869 --> 00:56:12,579
with regards to these cloud providers

00:56:09,970 --> 00:56:17,319
which are not like updated centrally by

00:56:12,579 --> 00:56:19,299
the like ABS is updated by ABS and you

00:56:17,319 --> 00:56:25,359
can have a consistent API to play with

00:56:19,299 --> 00:56:27,150
and yeah yeah I'd be scared too the the

00:56:25,359 --> 00:56:29,130
one that we've been using

00:56:27,150 --> 00:56:31,830
the way it was built it was partially

00:56:29,130 --> 00:56:34,980
auto-generated and partially handwritten

00:56:31,830 --> 00:56:37,170
and as a result the various sub

00:56:34,980 --> 00:56:39,150
resources I'll run at different versions

00:56:37,170 --> 00:56:41,370
with respect to the kubernetes they

00:56:39,150 --> 00:56:45,030
targets so I think like the autoscaler

00:56:41,370 --> 00:56:47,040
is target kubernetes 1.7 and some of the

00:56:45,030 --> 00:56:49,080
resources target kubernetes 1.6 in

00:56:47,040 --> 00:56:51,330
theory everything is backwards

00:56:49,080 --> 00:56:54,570
compatible but we can't make any

00:56:51,330 --> 00:56:55,890
promises were as a result of like the

00:56:54,570 --> 00:56:59,280
pain that's introduced for switching

00:56:55,890 --> 00:57:02,460
over to a client library that beam auto

00:56:59,280 --> 00:57:05,700
generated by the kubernetes client team

00:57:02,460 --> 00:57:07,260
proper they use the open API spec

00:57:05,700 --> 00:57:09,330
everything's version there's a version

00:57:07,260 --> 00:57:10,770
release matrix a part of it that's

00:57:09,330 --> 00:57:12,810
something that we can publish alongside

00:57:10,770 --> 00:57:15,140
spinnaker and say that hey we have full

00:57:12,810 --> 00:57:17,190
support for everything and 1.7

00:57:15,140 --> 00:57:18,590
everything and 1.6 should still work

00:57:17,190 --> 00:57:21,510
it's been tested against these versions

00:57:18,590 --> 00:57:23,220
and that should improve but as of right

00:57:21,510 --> 00:57:25,260
now but the result of how the client

00:57:23,220 --> 00:57:29,550
library works there's we can't do much

00:57:25,260 --> 00:57:32,250
better I know when we started doing the

00:57:29,550 --> 00:57:34,350
OpenStack you know we dealt with as well

00:57:32,250 --> 00:57:37,140
because like I said Veritas was on a

00:57:34,350 --> 00:57:39,780
different version the target was and you

00:57:37,140 --> 00:57:43,470
know obviously neither of our dev teams

00:57:39,780 --> 00:57:46,040
could force the operations teams in

00:57:43,470 --> 00:57:48,960
charge of vocal stack to change versions

00:57:46,040 --> 00:57:51,960
and so we actually had to have like

00:57:48,960 --> 00:57:57,510
config options of we're on v3 or we're

00:57:51,960 --> 00:58:00,030
on v2 and I mean luckily with OpenStack

00:57:57,510 --> 00:58:03,120
like I said they have a very very

00:58:00,030 --> 00:58:06,690
aggressive release schedule which i

00:58:03,120 --> 00:58:10,800
think is crazy for the scale of a

00:58:06,690 --> 00:58:12,960
private cloud but that also means that

00:58:10,800 --> 00:58:17,640
they're dedicating fast you know so you

00:58:12,960 --> 00:58:20,370
could you could have you know just

00:58:17,640 --> 00:58:21,900
decide like okay this has been

00:58:20,370 --> 00:58:23,430
end-of-life to where we're not gonna

00:58:21,900 --> 00:58:26,820
support it within spitting here anymore

00:58:23,430 --> 00:58:30,240
mamie because also enterprises aren't

00:58:26,820 --> 00:58:34,680
upgrading OpenStack is fast so that is a

00:58:30,240 --> 00:58:38,240
very big concern we just haven't had to

00:58:34,680 --> 00:58:38,240
deal with it yet yeah

00:58:41,210 --> 00:58:52,770
but thank you and thanks for all the

00:58:51,330 --> 00:58:55,140
questions if anybody wants to talk

00:58:52,770 --> 00:59:00,240
further there's still a few more hours I

00:58:55,140 --> 00:59:09,930
think so come grab any of us yeah let's

00:59:00,240 --> 00:59:12,000
talk breakout sessions so so the way the

00:59:09,930 --> 00:59:13,830
breakout sessions gonna work we and I've

00:59:12,000 --> 00:59:15,030
talked about this a few times thanks

00:59:13,830 --> 00:59:17,370
again for all the panelists that was an

00:59:15,030 --> 00:59:19,050
awesome discussion thank you very much I

00:59:17,370 --> 00:59:20,280
suspect that some of you will be needed

00:59:19,050 --> 00:59:22,140
for some of these breakout sessions I

00:59:20,280 --> 00:59:24,810
bet so we have this room we have the

00:59:22,140 --> 00:59:26,100
other two rooms we've been in all the

00:59:24,810 --> 00:59:30,450
last two days Ferris Bueller's Day Off

00:59:26,100 --> 00:59:32,280
and birdcage thank you and we can go

00:59:30,450 --> 00:59:33,720
outside and whatnot so there we're not

00:59:32,280 --> 00:59:36,840
limited to three breakout sessions but

00:59:33,720 --> 00:59:38,940
the things I have heard either people

00:59:36,840 --> 00:59:41,370
have come to me or I've seen notepads up

00:59:38,940 --> 00:59:43,530
but there was an idea to do a breakout

00:59:41,370 --> 00:59:45,090
session on compliance security all

00:59:43,530 --> 00:59:50,760
things socks

00:59:45,090 --> 00:59:52,650
how many people want to do that okay I

00:59:50,760 --> 00:59:55,820
see Isaac raise his hand

00:59:52,650 --> 00:59:59,480
Isaac where do you want to do it Ferris

00:59:55,820 --> 01:00:02,310
I think that's track 1 track 2

00:59:59,480 --> 01:00:03,660
track 1 so track 1 we can know we'll

01:00:02,310 --> 01:00:06,420
have a breakout session about security

01:00:03,660 --> 01:00:10,340
and whatnot compliance there was another

01:00:06,420 --> 01:00:10,340
request for managed pipeline templates

01:00:11,060 --> 01:00:15,450
do you folks okay I see enough hands

01:00:13,590 --> 01:00:16,530
actually how about this let me read out

01:00:15,450 --> 01:00:18,870
the list and then we'll come back

01:00:16,530 --> 01:00:22,080
managed pipeline templates halyard

01:00:18,870 --> 01:00:23,940
kubernetes run job just future roadmap

01:00:22,080 --> 01:00:26,640
and then operating spinnaker all right

01:00:23,940 --> 01:00:28,020
that being said do we want to do how

01:00:26,640 --> 01:00:31,110
many people want to talk about managed

01:00:28,020 --> 01:00:35,100
pipeline templates all right still got

01:00:31,110 --> 01:00:41,510
hands out I'm looking at Rob you want to

01:00:35,100 --> 01:00:44,510
go to track two okay that's birdcage

01:00:41,510 --> 01:00:44,510
halyard

01:00:46,410 --> 01:01:11,160
okay so f and and Lars Coburn Eddie's

01:01:09,030 --> 01:01:12,150
who wants to talk to what Eddie's all

01:01:11,160 --> 01:01:15,660
right we've got some folks in won't talk

01:01:12,150 --> 01:01:17,070
kubernetes I'm looking at you Lars so

01:01:15,660 --> 01:01:19,560
you have two conversations you have two

01:01:17,070 --> 01:01:21,910
or if you can hand off this

01:01:19,560 --> 01:01:26,140
where is Duff learning he just leaves

01:01:21,910 --> 01:01:26,140
[Laughter]

01:01:30,870 --> 01:01:35,700
[Laughter]

01:01:32,600 --> 01:01:37,980
run job this one actually had some talk

01:01:35,700 --> 01:01:44,720
on the channel run job kind of the

01:01:37,980 --> 01:01:49,170
future run job okay okay

01:01:44,720 --> 01:01:52,500
roadmap okay I'll leave the roadmap

01:01:49,170 --> 01:01:54,390
point we can we can I didn't mean to

01:01:52,500 --> 01:01:57,300
take this room how about this roadmap

01:01:54,390 --> 01:02:01,680
we'll go outside and then the last one

01:01:57,300 --> 01:02:04,800
was operating spinnaker one person okay

01:02:01,680 --> 01:02:06,890
we can do the roadmap foot in here any

01:02:04,800 --> 01:02:09,450
anything else people want to discuss

01:02:06,890 --> 01:02:11,400
yeah at this point I think you just get

01:02:09,450 --> 01:02:18,860
like whoever wants to have one that

01:02:11,400 --> 01:02:18,860
wasn't listed just yeah speak up ninjas

01:02:20,720 --> 01:02:23,730
all right so people want to see the

01:02:22,590 --> 01:02:26,300
Netflix spinnaker

01:02:23,730 --> 01:02:28,620
Tomas from Netflix will happily show off

01:02:26,300 --> 01:02:32,190
all the good work that the team here has

01:02:28,620 --> 01:02:34,770
done let me also just remind people at

01:02:32,190 --> 01:02:37,470
five there is a happy hour sponsored by

01:02:34,770 --> 01:02:39,660
Google so I know it's been a long two

01:02:37,470 --> 01:02:41,130
days the amount of information that has

01:02:39,660 --> 01:02:44,130
been coming out from all of you has just

01:02:41,130 --> 01:02:47,160
been incredible like a fire hose we did

01:02:44,130 --> 01:02:51,040
a video taped our excuse me record just

01:02:47,160 --> 01:02:53,200
dated myself recorded

01:02:51,040 --> 01:02:54,550
I think every session so it'll take us a

01:02:53,200 --> 01:02:57,730
few days to figure out how to you know

01:02:54,550 --> 01:03:00,520
get those all up on on the interwebs but

01:02:57,730 --> 01:03:03,490
we will this has been amazing and so

01:03:00,520 --> 01:03:04,720
hold on for like two more hours or

01:03:03,490 --> 01:03:06,580
whatever good let's get through the the

01:03:04,720 --> 01:03:08,230
breakout sessions Network and then we

01:03:06,580 --> 01:03:10,960
can have a good time thanks to Google

01:03:08,230 --> 01:03:12,610
and and I will be sending out another

01:03:10,960 --> 01:03:14,140
survey to find out how this you know

01:03:12,610 --> 01:03:16,080
what you guys thought of this and what

01:03:14,140 --> 01:03:18,490
we could do better next year but I

01:03:16,080 --> 01:03:20,950
really appreciate each and every one of

01:03:18,490 --> 01:03:23,680
you coming here for you know two whole

01:03:20,950 --> 01:03:26,470
days and just this has been incredible

01:03:23,680 --> 01:03:28,180
it's been overwhelming in fact so let's

01:03:26,470 --> 01:03:31,150
break out for those breakout sessions

01:03:28,180 --> 01:03:33,820
operating spinnaker here excuse me the

01:03:31,150 --> 01:03:37,380
roadmap here is Steven here other you

01:03:33,820 --> 01:03:37,380
know up stakeholders please stay here

01:03:37,620 --> 01:03:43,990
Isaac's leading the kind of Sox security

01:03:40,840 --> 01:03:45,730
all things compliance auditing in track

01:03:43,990 --> 01:03:48,370
one and then track two we said was

01:03:45,730 --> 01:03:50,260
managed pipeline templates and why don't

01:03:48,370 --> 01:03:58,540
we just throw in declarative delivery as

01:03:50,260 --> 01:04:00,860
well and all things Millennials bring

01:03:58,540 --> 01:04:09,160
your tight jeans and your facial hair

01:04:00,860 --> 01:04:09,160
[Laughter]

01:04:09,630 --> 01:04:22,750
alright and we'll we'll see everyone

01:04:12,670 --> 01:04:25,480
four and then we I'm sorry great idea

01:04:22,750 --> 01:04:27,730
so Netflix demo we'll do in the theater

01:04:25,480 --> 01:04:29,680
roadmap let's go outside where we had

01:04:27,730 --> 01:04:31,000
breakfast we can talk more about that

01:04:29,680 --> 01:04:32,980
and then there was a kubernetes

01:04:31,000 --> 01:04:38,320
conversation and we're going to do that

01:04:32,980 --> 01:04:40,120
outside as well Andy this has been

01:04:38,320 --> 01:04:43,500
incredible thank you so much this was

01:04:40,120 --> 01:04:43,500

YouTube URL: https://www.youtube.com/watch?v=ldCN_df-yNM


