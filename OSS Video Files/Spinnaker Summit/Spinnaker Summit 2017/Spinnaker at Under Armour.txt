Title: Spinnaker at Under Armour
Publication date: 2017-09-22
Playlist: Spinnaker Summit 2017
Description: 
	KEVIN CHUNG, STEPHEN SCHMIDT, UNDER ARMOUR

One of the key benefits of Spinnaker is how it fit in with allowing us to automate the creation of development environments that mirror our staging/production environments for our teams (we combine terraform, kops and Spinnaker to have a self-service approach for our dev teams where they can spin up a new k8s cluster and see our stack deployed out in about an hour as well as reset/refresh an environment automatically by way of Spinnaker). 

From Spinnaker Summit 2017
Captions: 
	00:00:03,000 --> 00:00:07,109
we're honored to be given the

00:00:05,370 --> 00:00:09,960
opportunity to go ahead and present here

00:00:07,109 --> 00:00:11,730
today my name is Kevin Cheung manager of

00:00:09,960 --> 00:00:13,710
the DevOps site reliability engineering

00:00:11,730 --> 00:00:17,789
group for e-commerce at Under Armour I'm

00:00:13,710 --> 00:00:20,400
joined by students with a lead site over

00:00:17,789 --> 00:00:22,680
the site reliability engineer at

00:00:20,400 --> 00:00:24,090
e-commerce and one else would just take

00:00:22,680 --> 00:00:27,840
the opportunity just for a real quick

00:00:24,090 --> 00:00:29,760
special thanks to Andy within the first

00:00:27,840 --> 00:00:31,590
hour of us actually landing here in San

00:00:29,760 --> 00:00:34,110
Francisco we had our laptop stolen out

00:00:31,590 --> 00:00:37,950
of a rental car so it's been a little

00:00:34,110 --> 00:00:39,930
bit of a rough salad but Andy has

00:00:37,950 --> 00:00:43,050
finally left his laptop for us to be

00:00:39,930 --> 00:00:54,510
over your presentation so we'll do our

00:00:43,050 --> 00:00:56,430
best but under armour our mission is to

00:00:54,510 --> 00:00:59,550
make all athletes better give you

00:00:56,430 --> 00:01:02,539
endless through passion design and the

00:00:59,550 --> 00:01:05,220
relentless pursuit of innovation and

00:01:02,539 --> 00:01:07,200
especially these days we strongly

00:01:05,220 --> 00:01:08,990
believe that sports really has the power

00:01:07,200 --> 00:01:12,960
to change the world

00:01:08,990 --> 00:01:14,640
sports can inspire unites and even

00:01:12,960 --> 00:01:17,400
change the world that's our latest

00:01:14,640 --> 00:01:21,540
message brand message don't feel very

00:01:17,400 --> 00:01:23,009
passionate and very strong about so

00:01:21,540 --> 00:01:24,600
specifically with e-commerce someone

00:01:23,009 --> 00:01:26,939
take a moment talk about how we fit into

00:01:24,600 --> 00:01:29,759
a little bit of our larger connected

00:01:26,939 --> 00:01:33,060
fitness organization and so in 2013 we

00:01:29,759 --> 00:01:35,549
acquired MyFitnessPal later in 2015 we

00:01:33,060 --> 00:01:37,820
also acquired Matt my Fit Matt my

00:01:35,549 --> 00:01:41,460
fitness and endomondo and so as a result

00:01:37,820 --> 00:01:46,140
we now sit with the world's largest

00:01:41,460 --> 00:01:47,909
digital health and fitness community of

00:01:46,140 --> 00:01:51,390
about 200 million users of across this

00:01:47,909 --> 00:01:55,950
portfolio of apps with nearly a hundred

00:01:51,390 --> 00:01:59,969
thousand or more new daily downloads or

00:01:55,950 --> 00:02:02,280
apps we see about 7 million workouts

00:01:59,969 --> 00:02:05,640
that get logged every day on our

00:02:02,280 --> 00:02:08,580
platform and 31 million foods logged by

00:02:05,640 --> 00:02:13,500
our users daily across our platform of

00:02:08,580 --> 00:02:15,530
apps special note for our Californians

00:02:13,500 --> 00:02:18,600
at least with our US population

00:02:15,530 --> 00:02:23,100
represent about 10% of our overall

00:02:18,600 --> 00:02:26,210
number of workouts as well as a food to

00:02:23,100 --> 00:02:28,740
go Californians nice job

00:02:26,210 --> 00:02:31,080
how does that tie into e-commerce and

00:02:28,740 --> 00:02:32,070
specifically with spinnaker well let me

00:02:31,080 --> 00:02:35,520
talk a little bit about the our

00:02:32,070 --> 00:02:38,280
e-commerce business first of all so it's

00:02:35,520 --> 00:02:40,050
not only just Under Armour comm itself I

00:02:38,280 --> 00:02:41,790
mean that's a large portion of our site

00:02:40,050 --> 00:02:45,420
which is what we consider our direct

00:02:41,790 --> 00:02:48,420
consumer side we also then have our team

00:02:45,420 --> 00:02:51,360
business or wholesale what we call b2b

00:02:48,420 --> 00:02:54,150
internally this includes everything from

00:02:51,360 --> 00:02:55,530
your recreational league teams - you

00:02:54,150 --> 00:02:56,160
know soccer moms that are ordering for

00:02:55,530 --> 00:02:57,650
their teams

00:02:56,160 --> 00:03:01,920
although gets trucks collegiate

00:02:57,650 --> 00:03:05,070
platforms so if you've got say Cal

00:03:01,920 --> 00:03:07,770
Berkeley Notre Dame University Wisconsin

00:03:05,070 --> 00:03:09,959
and in 2019 we're also going to be

00:03:07,770 --> 00:03:11,220
extending that out to supporting the

00:03:09,959 --> 00:03:13,260
equipment managers for Major League

00:03:11,220 --> 00:03:16,560
Baseball we have that contract for the

00:03:13,260 --> 00:03:22,800
on-field uniforms you also now have a

00:03:16,560 --> 00:03:24,150
shop mobile what do a shop endless aisle

00:03:22,800 --> 00:03:25,470
which is an omni-channel

00:03:24,150 --> 00:03:29,459
in-store retail app that we have to

00:03:25,470 --> 00:03:31,410
support listen called our box which is a

00:03:29,459 --> 00:03:33,680
scription box service like it's kind of

00:03:31,410 --> 00:03:38,280
like a stitch fix but with sports gear

00:03:33,680 --> 00:03:40,410
and UI icon which is our latest

00:03:38,280 --> 00:03:41,970
innovation with all these different

00:03:40,410 --> 00:03:44,310
properties it was important that we had

00:03:41,970 --> 00:03:47,010
to iterate very fast very very quickly

00:03:44,310 --> 00:03:49,709
so we needed a system to be able to

00:03:47,010 --> 00:03:53,820
manage Micra services but also

00:03:49,709 --> 00:03:58,160
kubernetes so brief note about UI icon

00:03:53,820 --> 00:04:00,840
it's the world's first digitally printed

00:03:58,160 --> 00:04:02,640
customization platform so literally you

00:04:00,840 --> 00:04:04,680
can go ahead fractally upload any sort

00:04:02,640 --> 00:04:06,720
of artwork you want and in about six

00:04:04,680 --> 00:04:11,370
weeks you can wind up with your own

00:04:06,720 --> 00:04:12,900
custom made but we're so actually while

00:04:11,370 --> 00:04:15,450
I was here at the conference I was

00:04:12,900 --> 00:04:17,430
playing around on the phone you could if

00:04:15,450 --> 00:04:19,380
you wanted to order your own custom

00:04:17,430 --> 00:04:21,180
spinnaker so I don't know if I like

00:04:19,380 --> 00:04:22,530
Netflix internally or at your

00:04:21,180 --> 00:04:23,550
organization have you got like a sports

00:04:22,530 --> 00:04:25,380
league or something like that

00:04:23,550 --> 00:04:25,820
you guys can totally go ahead and upload

00:04:25,380 --> 00:04:29,180
your

00:04:25,820 --> 00:04:33,380
own your own logos and really dominate

00:04:29,180 --> 00:04:34,790
out on the field so again to recap some

00:04:33,380 --> 00:04:38,180
of our project goals going into

00:04:34,790 --> 00:04:41,570
spinnaker we talked about things like

00:04:38,180 --> 00:04:44,540
infrastructure as code mutable

00:04:41,570 --> 00:04:46,280
infrastructures and artifacts being

00:04:44,540 --> 00:04:48,700
provider agnostic is very important for

00:04:46,280 --> 00:04:51,140
us because we have different properties

00:04:48,700 --> 00:04:53,330
for service level agreements we try to

00:04:51,140 --> 00:04:55,220
go ahead and select different providers

00:04:53,330 --> 00:04:56,900
as necessary so we wanted a platform

00:04:55,220 --> 00:04:58,250
that had a lot of flexibility you didn't

00:04:56,900 --> 00:05:01,040
want to be tied in to a particular

00:04:58,250 --> 00:05:05,120
provider so we use a combination right

00:05:01,040 --> 00:05:08,060
now of both AWS gke we still have some

00:05:05,120 --> 00:05:09,470
legacy bare-metal on Prem so we wanted a

00:05:08,060 --> 00:05:11,420
system that could actually tie all all

00:05:09,470 --> 00:05:14,960
these things together and consistently

00:05:11,420 --> 00:05:17,810
deploy out to them the consistency

00:05:14,960 --> 00:05:19,850
between environments so at Under Armor I

00:05:17,810 --> 00:05:21,950
think in the panel I was in earlier this

00:05:19,850 --> 00:05:23,600
morning question came up about like

00:05:21,950 --> 00:05:26,960
doing different like service or like

00:05:23,600 --> 00:05:28,670
memory limits on on containers we want

00:05:26,960 --> 00:05:30,890
everything to be as consistent as

00:05:28,670 --> 00:05:32,900
possible a developer environment largely

00:05:30,890 --> 00:05:34,910
should be the same as our staging or

00:05:32,900 --> 00:05:36,800
production environments you only change

00:05:34,910 --> 00:05:38,780
there's maybe the scaling of those pods

00:05:36,800 --> 00:05:41,300
so while in production we may have

00:05:38,780 --> 00:05:43,700
hundreds of pods serving traffic we only

00:05:41,300 --> 00:05:46,220
need a single pod but the underlying

00:05:43,700 --> 00:05:49,370
infrastructure itself should be the same

00:05:46,220 --> 00:05:50,510
same instance types and we need to be

00:05:49,370 --> 00:05:52,490
able to manage and create those

00:05:50,510 --> 00:05:56,150
environments and that's what we're we

00:05:52,490 --> 00:05:58,300
leverage spinnaker and finally we wanted

00:05:56,150 --> 00:06:02,120
things to be developer self-service

00:05:58,300 --> 00:06:03,620
simplify our code release our developers

00:06:02,120 --> 00:06:05,780
are largely responsible for deploying

00:06:03,620 --> 00:06:07,400
their own code they're the ones that are

00:06:05,780 --> 00:06:09,250
on-call we don't really have an

00:06:07,400 --> 00:06:12,860
Operations team in the traditional sense

00:06:09,250 --> 00:06:14,930
so these were all the design patterns

00:06:12,860 --> 00:06:16,520
that we went into and that's how we

00:06:14,930 --> 00:06:20,210
landed at spinnaker but if we take a

00:06:16,520 --> 00:06:23,660
step back we actually developed this

00:06:20,210 --> 00:06:25,520
tool called UI deploy it was a player

00:06:23,660 --> 00:06:29,180
utility for kubernetes that we wrote and

00:06:25,520 --> 00:06:32,300
go and the reason is that we needed to

00:06:29,180 --> 00:06:35,810
do some sort of build towards actually

00:06:32,300 --> 00:06:37,900
having stages in our deployments so one

00:06:35,810 --> 00:06:39,320
of the weird things that we actually did

00:06:37,900 --> 00:06:40,790
about crate

00:06:39,320 --> 00:06:42,110
you thought that came up is that what if

00:06:40,790 --> 00:06:44,150
we actually took our manifest themselves

00:06:42,110 --> 00:06:46,760
and embedded them right into the

00:06:44,150 --> 00:06:48,650
artifact and that way we could also take

00:06:46,760 --> 00:06:51,110
things like so we use liquid base for

00:06:48,650 --> 00:06:53,810
doing schema changes we actually embed

00:06:51,110 --> 00:06:55,430
liquid base out of the commit the time

00:06:53,810 --> 00:06:58,910
it's getting built we had that

00:06:55,430 --> 00:07:01,610
dependency to know that those changes to

00:06:58,910 --> 00:07:04,280
say the deployment or to any schema

00:07:01,610 --> 00:07:05,990
changers are tightly coupled directly in

00:07:04,280 --> 00:07:08,840
the artifact we're not having to go to a

00:07:05,990 --> 00:07:10,970
to another repository and pull that down

00:07:08,840 --> 00:07:12,920
we actually build it and then we have a

00:07:10,970 --> 00:07:14,660
consistent manner that on every

00:07:12,920 --> 00:07:17,600
deployment pretty much all of our

00:07:14,660 --> 00:07:19,160
pipelines are pretty simplistic we

00:07:17,600 --> 00:07:20,980
always are running liquid base as a

00:07:19,160 --> 00:07:23,540
stage with our deployments and

00:07:20,980 --> 00:07:25,420
realistically we only have even though

00:07:23,540 --> 00:07:31,250
we have somewhere around 100 artifacts

00:07:25,420 --> 00:07:33,620
we have the same base sort of set of set

00:07:31,250 --> 00:07:35,690
of deployable objects luckily our

00:07:33,620 --> 00:07:38,480
platform team works very closely with us

00:07:35,690 --> 00:07:42,260
and they define out a clear spec for an

00:07:38,480 --> 00:07:45,250
API for a service so we really don't

00:07:42,260 --> 00:07:47,150
have a lot of different types of

00:07:45,250 --> 00:07:50,000
deployment deployments we have a lot of

00:07:47,150 --> 00:07:54,050
pipelines certainly one type line per

00:07:50,000 --> 00:07:57,940
artifact but all of our actual source

00:07:54,050 --> 00:07:57,940
styles of artifacts is pretty consistent

00:07:58,030 --> 00:08:02,630
so I want to talk a little bit also

00:08:00,080 --> 00:08:07,460
about our software development workflow

00:08:02,630 --> 00:08:09,470
so one of the keys for us in in rolling

00:08:07,460 --> 00:08:11,990
out spinnaker I thought was really

00:08:09,470 --> 00:08:15,170
thinking about the process and how do

00:08:11,990 --> 00:08:17,690
you ensure that you whatever you built

00:08:15,170 --> 00:08:19,160
is what you're actually deploying out to

00:08:17,690 --> 00:08:21,440
each of your environments it's the build

00:08:19,160 --> 00:08:25,730
wants deploy everywhere model we don't

00:08:21,440 --> 00:08:28,400
want to introduce any changes so it's

00:08:25,730 --> 00:08:35,090
based off of github flow or get yeah

00:08:28,400 --> 00:08:36,650
github flow largely and so basically

00:08:35,090 --> 00:08:39,919
what we do is we dynamically actually

00:08:36,650 --> 00:08:40,490
build out a pipeline off of every pull

00:08:39,919 --> 00:08:42,919
request

00:08:40,490 --> 00:08:44,840
so whenever a developer opens a pull

00:08:42,919 --> 00:08:46,520
request we dynamically actually generate

00:08:44,840 --> 00:08:49,160
a new pipeline to deploy out that

00:08:46,520 --> 00:08:50,360
artifact that's what immediately gets

00:08:49,160 --> 00:08:52,810
deployed out into our staging

00:08:50,360 --> 00:08:52,810
environment

00:08:52,970 --> 00:08:58,130
after its passed through validation

00:08:54,980 --> 00:09:01,370
whether it's automated validation or

00:08:58,130 --> 00:09:03,080
manual validation at that point then a

00:09:01,370 --> 00:09:06,200
developer can actually merge their

00:09:03,080 --> 00:09:09,200
change in it's a master and when they

00:09:06,200 --> 00:09:12,890
merge it we then take that artifact and

00:09:09,200 --> 00:09:15,770
weari tag it with a unique tag so where

00:09:12,890 --> 00:09:17,690
the tag might read PR - and the git

00:09:15,770 --> 00:09:19,460
commit and now it just becomes master

00:09:17,690 --> 00:09:21,680
with that associative gif commit and

00:09:19,460 --> 00:09:26,270
that's what we actually go ahead and

00:09:21,680 --> 00:09:28,790
push out to production so that way we're

00:09:26,270 --> 00:09:30,950
ensuring that the actual PR that was

00:09:28,790 --> 00:09:35,450
built is what we are promoting out to

00:09:30,950 --> 00:09:37,940
production that's one dimension dynamic

00:09:35,450 --> 00:09:40,580
environments we have a separate

00:09:37,940 --> 00:09:43,400
spinnaker cluster for our for our

00:09:40,580 --> 00:09:44,480
development environments as well as one

00:09:43,400 --> 00:09:48,680
that handles all of our saving

00:09:44,480 --> 00:09:50,570
production pipelines and again as I

00:09:48,680 --> 00:09:52,910
mentioned earlier Thank You Lars for

00:09:50,570 --> 00:09:54,410
halyard it's really simplified the

00:09:52,910 --> 00:09:56,450
ability to go ahead and add in these

00:09:54,410 --> 00:09:58,250
dynamic environments on the flaws so

00:09:56,450 --> 00:10:00,590
with that we'll do a deeper dive into

00:09:58,250 --> 00:10:02,630
some of our tools and I bring Steven up

00:10:00,590 --> 00:10:03,710
to talk our way through some of the

00:10:02,630 --> 00:10:12,410
tooling that we've built to support

00:10:03,710 --> 00:10:14,600
spinnaker Steven so one of the key

00:10:12,410 --> 00:10:17,150
things for us to get to a point where we

00:10:14,600 --> 00:10:19,580
felt comfortable with hanging over some

00:10:17,150 --> 00:10:22,640
things to developers is we needed a

00:10:19,580 --> 00:10:24,800
capability throughout our appointments

00:10:22,640 --> 00:10:28,370
to run automated tests after we deployed

00:10:24,800 --> 00:10:30,470
something to a given environment so we

00:10:28,370 --> 00:10:32,810
have a we've been working closely with a

00:10:30,470 --> 00:10:36,200
QE engineering team that we have

00:10:32,810 --> 00:10:39,950
internally at Under Armour to kind of

00:10:36,200 --> 00:10:43,460
develop a suite of tests that we can run

00:10:39,950 --> 00:10:45,350
so essentially Kevin mentioned before we

00:10:43,460 --> 00:10:51,080
had this other tool called you a deploy

00:10:45,350 --> 00:10:53,120
but it all it really did was run schema

00:10:51,080 --> 00:10:55,700
changes if we had them and then just

00:10:53,120 --> 00:10:57,589
deploy at kubernetes manifest so I think

00:10:55,700 --> 00:10:59,300
one of the cool things about spinnaker

00:10:57,589 --> 00:11:01,310
and it's been brought up multiple times

00:10:59,300 --> 00:11:03,650
throughout this conference is it gives

00:11:01,310 --> 00:11:06,080
you a lot of capabilities to orchestrate

00:11:03,650 --> 00:11:09,020
around your deployments so

00:11:06,080 --> 00:11:11,120
things that need to happen ordering so

00:11:09,020 --> 00:11:16,280
on and so forth so one of the things we

00:11:11,120 --> 00:11:18,110
do is we run the system tests when we go

00:11:16,280 --> 00:11:20,360
ahead and deploy an artifact and then

00:11:18,110 --> 00:11:24,980
this will happen in staging and if it

00:11:20,360 --> 00:11:27,500
goes ok what we can do is then have that

00:11:24,980 --> 00:11:30,440
artifact get promoted into production

00:11:27,500 --> 00:11:34,550
after it gets merged based on the

00:11:30,440 --> 00:11:38,780
workflow Kevin went over earlier so we

00:11:34,550 --> 00:11:42,080
have where we are running pretty much no

00:11:38,780 --> 00:11:46,040
js' everywhere for our application stack

00:11:42,080 --> 00:11:49,340
so we're using the ah the framework to

00:11:46,040 --> 00:11:55,280
kind of hit all those API endpoints for

00:11:49,340 --> 00:11:59,680
the test run running so we have a b2c

00:11:55,280 --> 00:12:02,720
platform API that we hit it basically is

00:11:59,680 --> 00:12:06,500
the end-all be-all for a lot of our

00:12:02,720 --> 00:12:08,030
other micro services build a lot of

00:12:06,500 --> 00:12:11,390
different calls coming through that so

00:12:08,030 --> 00:12:15,440
it's important that we flush that out in

00:12:11,390 --> 00:12:18,530
order to properly validate our b2c

00:12:15,440 --> 00:12:21,200
application and our b2c application it's

00:12:18,530 --> 00:12:23,500
kind of a monolith so we're working on

00:12:21,200 --> 00:12:25,760
we will be working on breaking it up but

00:12:23,500 --> 00:12:28,460
Kevin mentioned earlier we have a

00:12:25,760 --> 00:12:31,520
pipeline for every artifact we have so

00:12:28,460 --> 00:12:34,010
we probably have about I want to say 90

00:12:31,520 --> 00:12:37,220
to 100 different micro services at this

00:12:34,010 --> 00:12:38,750
point and then we also generate other

00:12:37,220 --> 00:12:40,790
pipelines depending on the different

00:12:38,750 --> 00:12:43,400
workloads that are going on I'll go over

00:12:40,790 --> 00:12:47,060
something later but we have some

00:12:43,400 --> 00:12:50,300
internal tooling that allows developers

00:12:47,060 --> 00:12:54,140
or us on the team to go ahead and

00:12:50,300 --> 00:12:56,090
generate pipelines and test out changes

00:12:54,140 --> 00:12:58,600
and things like that in our integration

00:12:56,090 --> 00:12:58,600
environments

00:13:02,970 --> 00:13:06,300
though these are just the other various

00:13:04,259 --> 00:13:12,269
api's that are kind of getting tested

00:13:06,300 --> 00:13:14,339
when the system tests run yeah I just

00:13:12,269 --> 00:13:15,629
want to make a quick note that one of

00:13:14,339 --> 00:13:17,399
the things about using the Ava framework

00:13:15,629 --> 00:13:20,100
is when we actually set this up we're

00:13:17,399 --> 00:13:22,769
able to execute roughly 60 tests in

00:13:20,100 --> 00:13:23,850
parallel and on any deployment it takes

00:13:22,769 --> 00:13:25,379
only about 30 seconds to run those

00:13:23,850 --> 00:13:29,759
automated tests so when we talked about

00:13:25,379 --> 00:13:32,069
doing fast deployments of pipeline also

00:13:29,759 --> 00:13:34,439
so those tests are actually it executes

00:13:32,069 --> 00:13:36,509
a job a stage in Jenkins that actually

00:13:34,439 --> 00:13:38,339
runs the tests and out of Jenkins we use

00:13:36,509 --> 00:13:40,529
a plug-in then to feed all the results

00:13:38,339 --> 00:13:43,649
from our system test into Splunk so we

00:13:40,529 --> 00:13:45,449
only have to expose Blanc out to our qet

00:13:43,649 --> 00:13:46,980
more developers to be able to review the

00:13:45,449 --> 00:13:48,720
results and then we can do a judgement

00:13:46,980 --> 00:13:50,189
based off their system test to say with

00:13:48,720 --> 00:13:51,870
confidence whether or not we want to go

00:13:50,189 --> 00:13:59,160
ahead and deploy this out and push it to

00:13:51,870 --> 00:14:01,730
production we also have an internal tool

00:13:59,160 --> 00:14:05,550
week we kind of use right now it's

00:14:01,730 --> 00:14:06,269
pretty rudimentary honestly worthless

00:14:05,550 --> 00:14:10,050
awhile ago

00:14:06,269 --> 00:14:13,199
like what I want to say 2016 because we

00:14:10,050 --> 00:14:18,649
needed a way to quickly update our

00:14:13,199 --> 00:14:20,519
pipelines and this kind of ties into

00:14:18,649 --> 00:14:23,699
some of the other things we're doing

00:14:20,519 --> 00:14:26,550
with we'll go over that tool in a second

00:14:23,699 --> 00:14:29,579
but we have another tool that won't be

00:14:26,550 --> 00:14:30,600
lasting much longer given the v2 changes

00:14:29,579 --> 00:14:33,680
that are coming to the kubernetes

00:14:30,600 --> 00:14:35,610
provider but we needed a stopgap because

00:14:33,680 --> 00:14:37,920
we had already made a decision

00:14:35,610 --> 00:14:39,449
internally as a organization that we

00:14:37,920 --> 00:14:42,750
were using kubernetes deployments for

00:14:39,449 --> 00:14:44,670
better or worse and we were not in a

00:14:42,750 --> 00:14:48,059
position where we could easily go back

00:14:44,670 --> 00:14:52,350
in time so we had to kind of work around

00:14:48,059 --> 00:14:54,720
those constructs so this is just a tool

00:14:52,350 --> 00:14:57,629
for interacting with gate at a pipeline

00:14:54,720 --> 00:15:00,600
level and we have some other rudimentary

00:14:57,629 --> 00:15:04,410
like cleanup happens for some of those

00:15:00,600 --> 00:15:08,009
staging pipelines that get created this

00:15:04,410 --> 00:15:10,529
is the other tool that I kind of went

00:15:08,009 --> 00:15:14,550
over a little bit so what happens is we

00:15:10,529 --> 00:15:17,450
can pretty easily create development

00:15:14,550 --> 00:15:21,390
pipelines so if you're a developer

00:15:17,450 --> 00:15:24,930
your artifact goes through so we have

00:15:21,390 --> 00:15:26,820
Jenkins for CI and what would happen is

00:15:24,930 --> 00:15:30,480
you'd get an artifact from Jenkins and

00:15:26,820 --> 00:15:32,430
then you could pass it into this CLI and

00:15:30,480 --> 00:15:35,160
it would generate a pipeline for you and

00:15:32,430 --> 00:15:37,650
then you could either grab the JSON or

00:15:35,160 --> 00:15:40,950
use the CLI tool that we have and upload

00:15:37,650 --> 00:15:42,270
it into spinnaker and then you can go

00:15:40,950 --> 00:15:45,870
through and test that pipeline and

00:15:42,270 --> 00:15:47,580
validate that it actually works so I

00:15:45,870 --> 00:15:49,740
should probably take a step back a lot

00:15:47,580 --> 00:15:52,500
of our developers they're not going to

00:15:49,740 --> 00:15:54,480
be making spinnaker pipeline changes per

00:15:52,500 --> 00:15:56,850
se they're going to be making kubernetes

00:15:54,480 --> 00:15:58,650
manifest changes that's what they're

00:15:56,850 --> 00:16:00,990
familiar with that's what they know

00:15:58,650 --> 00:16:03,210
maybe we'll get to a point where they're

00:16:00,990 --> 00:16:06,150
weak we have time to train them and

00:16:03,210 --> 00:16:08,210
they'll be doing more actual spinnaker

00:16:06,150 --> 00:16:10,440
pipeline changes but for the time being

00:16:08,210 --> 00:16:13,500
it's mostly just around kubernetes

00:16:10,440 --> 00:16:17,850
manifest so we needed a way to allow

00:16:13,500 --> 00:16:20,190
them to still do what they do with the

00:16:17,850 --> 00:16:22,050
kubernetes manifest but kind of convert

00:16:20,190 --> 00:16:24,420
it for them and give them an easy way to

00:16:22,050 --> 00:16:26,190
validate things in their integration

00:16:24,420 --> 00:16:28,800
environment so this is basically just

00:16:26,190 --> 00:16:30,630
generating an integration pipeline that

00:16:28,800 --> 00:16:34,040
they would run in the one of those team

00:16:30,630 --> 00:16:34,040
environments that Kevin had mentioned

00:16:41,120 --> 00:16:46,590
yeah so this tool is very specific and

00:16:44,880 --> 00:16:47,340
like I said it's probably not going to

00:16:46,590 --> 00:16:51,240
last much longer

00:16:47,340 --> 00:16:54,270
this was also written in like 2016 so

00:16:51,240 --> 00:16:57,600
what it's doing purely is for our deploy

00:16:54,270 --> 00:17:01,250
stage it's taking kubernetes deployment

00:16:57,600 --> 00:17:05,480
manifest and mapping it to the spinnaker

00:17:01,250 --> 00:17:05,480
JSON that we need in order to deploy it

00:17:14,540 --> 00:17:21,480
currently we so they could if they're

00:17:18,420 --> 00:17:23,190
grabbing the actual pipeline there our

00:17:21,480 --> 00:17:25,770
pipeline can point that we have out

00:17:23,190 --> 00:17:27,550
there it would run through this same

00:17:25,770 --> 00:17:29,470
system tests and

00:17:27,550 --> 00:17:31,770
some of the other things that we do in

00:17:29,470 --> 00:17:37,060
our staging and production pipelines

00:17:31,770 --> 00:17:40,330
also we've are our users are fairly

00:17:37,060 --> 00:17:44,680
savvy with kubernetes so if something

00:17:40,330 --> 00:17:46,270
fails within the actual pipeline they

00:17:44,680 --> 00:17:49,300
have access to their kubernetes cluster

00:17:46,270 --> 00:17:53,830
so they can do some debugging at that

00:17:49,300 --> 00:18:15,010
level or we have we have some things

00:17:53,830 --> 00:18:18,250
going into the validation is mostly

00:18:15,010 --> 00:18:19,840
around so we would the the feedback we

00:18:18,250 --> 00:18:21,730
would get from spinnaker if the deploy

00:18:19,840 --> 00:18:23,740
failed because most of the times what

00:18:21,730 --> 00:18:26,590
they're doing is just purely kubernetes

00:18:23,740 --> 00:18:28,690
manifests related so we'd expect the pod

00:18:26,590 --> 00:18:30,850
to probably not start up if they had a

00:18:28,690 --> 00:18:32,440
bad manifest change and then they could

00:18:30,850 --> 00:18:42,610
go and look at it and tweak it based on

00:18:32,440 --> 00:18:45,010
the output from kubernetes so what we

00:18:42,610 --> 00:18:49,360
use artifactory internally for artifact

00:18:45,010 --> 00:18:53,980
management and what happens at CI time

00:18:49,360 --> 00:18:56,650
is an artifact will get generated and we

00:18:53,980 --> 00:19:01,630
have a kind of a tool that goes out and

00:18:56,650 --> 00:19:05,440
pulls - grabs so the tricky thing for us

00:19:01,630 --> 00:19:09,070
was it's difficult to kind of manage

00:19:05,440 --> 00:19:11,830
through artifactory setting up a polling

00:19:09,070 --> 00:19:13,300
cycle for every single artifact we have

00:19:11,830 --> 00:19:15,640
given how we do some of the docker

00:19:13,300 --> 00:19:18,430
tagging so we had to kind of come up

00:19:15,640 --> 00:19:21,160
with a different strategy around it and

00:19:18,430 --> 00:19:22,990
this basically takes some of our

00:19:21,160 --> 00:19:26,740
constructs that we use for tagging and

00:19:22,990 --> 00:19:29,050
goes out and discovers artifacts based

00:19:26,740 --> 00:19:33,730
on the different areas that they're

00:19:29,050 --> 00:19:37,390
going into so for this specific one it's

00:19:33,730 --> 00:19:39,040
mostly this is a innovation this is the

00:19:37,390 --> 00:19:40,970
integration spinnaker that we have so

00:19:39,040 --> 00:19:43,520
it's running fairly often so it's

00:19:40,970 --> 00:19:45,860
having any upstream changes and it's

00:19:43,520 --> 00:19:49,820
actually updating the pipelines and

00:19:45,860 --> 00:19:53,240
source control what also happens for the

00:19:49,820 --> 00:19:55,700
I should step back as well the the

00:19:53,240 --> 00:19:57,110
Kate's pipeline converter it actually

00:19:55,700 --> 00:20:00,650
does a md5sum

00:19:57,110 --> 00:20:02,630
on all the pipelines it's trying to

00:20:00,650 --> 00:20:08,630
potentially update so it's not going to

00:20:02,630 --> 00:20:16,960
update it if nothing's changed one of

00:20:08,630 --> 00:20:22,070
the other things we do is we have sorry

00:20:16,960 --> 00:20:26,980
we have Jenkins running in kubernetes as

00:20:22,070 --> 00:20:31,809
a pod so it's actually a public set but

00:20:26,980 --> 00:20:36,110
so we we deploy it with helm and

00:20:31,809 --> 00:20:38,150
basically we're leveraging that to kind

00:20:36,110 --> 00:20:39,679
of consolidate the Jenkins

00:20:38,150 --> 00:20:42,440
infrastructure and just run it with

00:20:39,679 --> 00:20:45,890
inside kubernetes rather than have a

00:20:42,440 --> 00:20:50,659
whole bunch of ec2 instances for our

00:20:45,890 --> 00:20:52,220
actual CI environment we are using we're

00:20:50,659 --> 00:20:55,460
using more of a traditional Jenkins

00:20:52,220 --> 00:20:58,309
where we have the we're using the ec2

00:20:55,460 --> 00:21:01,659
spot spot excuse me spot fleet plug-in

00:20:58,309 --> 00:21:05,450
to go out and spin up the workers and

00:21:01,659 --> 00:21:08,000
carry out the builds but for spinnaker

00:21:05,450 --> 00:21:11,270
we have a kind of like a special worker

00:21:08,000 --> 00:21:13,730
that we created in order to run docker

00:21:11,270 --> 00:21:15,380
within docker actually so some of the

00:21:13,730 --> 00:21:18,230
tools that we were showing earlier

00:21:15,380 --> 00:21:20,600
they're all built within docker so we

00:21:18,230 --> 00:21:22,730
can't leverage just running them within

00:21:20,600 --> 00:21:25,039
those Jenkins workers that we're running

00:21:22,730 --> 00:21:26,179
within kubernetes to execute the

00:21:25,039 --> 00:21:28,850
different things that we need to have

00:21:26,179 --> 00:21:32,960
done one of them would be so we use

00:21:28,850 --> 00:21:35,299
Akamai as well so purging the cache

00:21:32,960 --> 00:21:42,830
after we do a deployment would be a

00:21:35,299 --> 00:21:43,450
potential stage in the pipeline so so

00:21:42,830 --> 00:21:47,500
Kevin

00:21:43,450 --> 00:21:50,380
touched on this we're using we've kind

00:21:47,500 --> 00:21:55,300
of moved towards using cops for managing

00:21:50,380 --> 00:21:59,320
our cities clusters so one of the things

00:21:55,300 --> 00:22:00,940
we we were trying to accomplish with the

00:21:59,320 --> 00:22:02,620
team of iron with it with the

00:22:00,940 --> 00:22:04,750
integration environments was to give

00:22:02,620 --> 00:22:09,070
teams the capability to have a more

00:22:04,750 --> 00:22:11,020
self-service kind of philosophy we're

00:22:09,070 --> 00:22:14,410
getting there but the end goal with this

00:22:11,020 --> 00:22:16,780
is we'd like to see teams to be able to

00:22:14,410 --> 00:22:18,490
come into spinnaker and spin up a

00:22:16,780 --> 00:22:21,880
kubernetes environment with a pipeline

00:22:18,490 --> 00:22:25,230
essentially we have a lot of the so

00:22:21,880 --> 00:22:27,850
we're gonna basically to do the actual

00:22:25,230 --> 00:22:29,650
main orchestration we have a lot of

00:22:27,850 --> 00:22:32,470
other pipelines that do a lot of the

00:22:29,650 --> 00:22:36,520
different pieces that allow us to spin

00:22:32,470 --> 00:22:37,960
up the cluster one of them is the piece

00:22:36,520 --> 00:22:40,450
Kevin mentioned earlier around how

00:22:37,960 --> 00:22:42,940
you're actually adding the account to

00:22:40,450 --> 00:22:45,910
the cloud driver and then going ahead

00:22:42,940 --> 00:22:47,410
and refreshing how excuse-me cloud

00:22:45,910 --> 00:22:51,640
driver in order to incorporate the

00:22:47,410 --> 00:22:55,090
account we also do some secret

00:22:51,640 --> 00:22:58,110
management within s3 so all that's

00:22:55,090 --> 00:23:00,190
encrypted in a bucket up in s3 so

00:22:58,110 --> 00:23:01,900
pulling all that down getting all that

00:23:00,190 --> 00:23:04,090
provision for the teams ahead of time

00:23:01,900 --> 00:23:05,800
and then having spinnaker actually go

00:23:04,090 --> 00:23:08,380
ahead and just deploy all the artifacts

00:23:05,800 --> 00:23:11,170
into their team element is something we

00:23:08,380 --> 00:23:12,610
heavily use vinegar for right now we

00:23:11,170 --> 00:23:15,520
also have a little terraform in there

00:23:12,610 --> 00:23:18,360
not not too much it's basically just the

00:23:15,520 --> 00:23:20,860
terraform is really just used for

00:23:18,360 --> 00:23:26,790
spinning up the static AWS resources

00:23:20,860 --> 00:23:28,660
that we have mostly just B's al B's and

00:23:26,790 --> 00:23:35,860
security-related

00:23:28,660 --> 00:23:40,570
resources as well and to Kevin's point

00:23:35,860 --> 00:23:43,930
we have a very we try to keep our all of

00:23:40,570 --> 00:23:45,820
our environments very similar so from

00:23:43,930 --> 00:23:48,070
going from integration to staging it

00:23:45,820 --> 00:23:50,920
should look and feel very much the same

00:23:48,070 --> 00:23:54,340
way and perform just at a different

00:23:50,920 --> 00:23:56,110
scale but the underlying way we do it

00:23:54,340 --> 00:24:00,250
and the underlying infrastructure

00:23:56,110 --> 00:24:02,730
is mostly the same and as well as the

00:24:00,250 --> 00:24:05,860
data sources so that's pretty important

00:24:02,730 --> 00:24:10,120
each team environment kind of has its

00:24:05,860 --> 00:24:11,850
own data back and there's a slight

00:24:10,120 --> 00:24:14,500
difference with how we're doing that but

00:24:11,850 --> 00:24:15,940
it's at the end of the day it's the same

00:24:14,500 --> 00:24:17,880
data the implementation slightly

00:24:15,940 --> 00:24:20,770
different we're using PET sets within

00:24:17,880 --> 00:24:23,559
excuse me staple sets within kubernetes

00:24:20,770 --> 00:24:25,390
the kind of manage those but that's just

00:24:23,559 --> 00:24:36,190
to make management a little bit easier

00:24:25,390 --> 00:24:38,080
but it's the same data sources so what's

00:24:36,190 --> 00:24:41,160
next for us as far as looking at the

00:24:38,080 --> 00:24:44,559
future as I mentioned we have multiple

00:24:41,160 --> 00:24:46,630
multiple properties so gke is just

00:24:44,559 --> 00:24:49,390
something that we started to spin up for

00:24:46,630 --> 00:24:51,250
our team environments so naturally

00:24:49,390 --> 00:24:54,070
getting them to work with spinnaker and

00:24:51,250 --> 00:24:56,500
a DK environment the reason for that is

00:24:54,070 --> 00:24:57,400
that our b2b team and is much smaller

00:24:56,500 --> 00:24:58,990
they don't really have a dedicated

00:24:57,400 --> 00:25:01,919
DevOps resource and they just simply

00:24:58,990 --> 00:25:06,220
want to leave the management over onto

00:25:01,919 --> 00:25:07,000
on to Google for their cluster but some

00:25:06,220 --> 00:25:09,250
of the other things are we playing

00:25:07,000 --> 00:25:11,740
around with lately we actually just got

00:25:09,250 --> 00:25:13,750
back earlier in the year from Google i/o

00:25:11,740 --> 00:25:17,140
and so we played around quite a bit with

00:25:13,750 --> 00:25:19,570
API so we actually have launched a chat

00:25:17,140 --> 00:25:21,790
off spot that works with API

00:25:19,570 --> 00:25:24,610
with natural language and seeing about

00:25:21,790 --> 00:25:26,980
plugging that into spinnaker in order to

00:25:24,610 --> 00:25:27,760
do some some operations so so far we

00:25:26,980 --> 00:25:29,650
have it doing quite a bit with

00:25:27,760 --> 00:25:32,230
discriminatees in general all around our

00:25:29,650 --> 00:25:33,880
cluster health but seeing if we can

00:25:32,230 --> 00:25:37,450
actually get some more intelligence

00:25:33,880 --> 00:25:39,490
there into our pipelines that's pretty

00:25:37,450 --> 00:25:41,169
much kind of at least within our

00:25:39,490 --> 00:25:43,809
e-commerce business what we're looking

00:25:41,169 --> 00:25:46,090
at with loving spinnaker but and I

00:25:43,809 --> 00:25:47,919
alluded to earlier on we also have our

00:25:46,090 --> 00:25:50,380
connected fitness group and so how do we

00:25:47,919 --> 00:25:52,660
get spinnaker adopted in other parts of

00:25:50,380 --> 00:25:55,570
underarmour that's a big part that we're

00:25:52,660 --> 00:25:57,730
very interested in you know how can we

00:25:55,570 --> 00:25:59,799
actually take this and then get our

00:25:57,730 --> 00:26:02,380
connected fitness partners and other

00:25:59,799 --> 00:26:05,230
parts of underarmour leveraging this

00:26:02,380 --> 00:26:06,790
technology that we've built we're all in

00:26:05,230 --> 00:26:08,220
on the e-commerce side weight line

00:26:06,790 --> 00:26:09,960
kubernetes

00:26:08,220 --> 00:26:11,129
looks like some there's some interest

00:26:09,960 --> 00:26:15,840
from some of our other parts of the

00:26:11,129 --> 00:26:17,070
business and if it wasn't made clear the

00:26:15,840 --> 00:26:20,700
thing that Under Armor that kind of

00:26:17,070 --> 00:26:24,360
makes us unique when we're talking about

00:26:20,700 --> 00:26:26,250
it certainly apparel companies we

00:26:24,360 --> 00:26:29,419
actually write all of our e-commerce

00:26:26,250 --> 00:26:31,980
platform all our components in-house

00:26:29,419 --> 00:26:34,559
we're not leveraging some commercial

00:26:31,980 --> 00:26:36,419
off-the-shelf platform for e-commerce it

00:26:34,559 --> 00:26:38,190
gives us a lot of flexibility there's no

00:26:36,419 --> 00:26:42,120
way we could launch some of those

00:26:38,190 --> 00:26:43,740
properties like icon to go forward and

00:26:42,120 --> 00:26:46,500
we're also you know we borrowed quite a

00:26:43,740 --> 00:26:47,730
bit from sort of the Netflix models so I

00:26:46,500 --> 00:26:51,269
think it was in one of the other talks

00:26:47,730 --> 00:26:53,460
might've been Adams talk about immutable

00:26:51,269 --> 00:26:57,090
infrastructure and chaos engineering and

00:26:53,460 --> 00:27:00,289
so these are all concepts that you know

00:26:57,090 --> 00:27:02,690
spinnaker handles beautifully and

00:27:00,289 --> 00:27:05,789
especially now that we're looking at a

00:27:02,690 --> 00:27:08,070
lot of the shift that's happening from

00:27:05,789 --> 00:27:09,720
retail traditional retail into

00:27:08,070 --> 00:27:11,759
e-commerce and other channels and as

00:27:09,720 --> 00:27:15,000
we're going to expand out certainly in

00:27:11,759 --> 00:27:16,740
other markets Latin America the sites

00:27:15,000 --> 00:27:19,139
that we launched just recently like

00:27:16,740 --> 00:27:21,120
Turkey South Korea some of these other

00:27:19,139 --> 00:27:24,840
sites we have to look at how can we also

00:27:21,120 --> 00:27:28,889
manage that infrastructure ideally again

00:27:24,840 --> 00:27:32,279
through multiple cloud providers or even

00:27:28,889 --> 00:27:34,440
separating out for resiliency the design

00:27:32,279 --> 00:27:37,049
of our structure so it almost felt like

00:27:34,440 --> 00:27:39,960
a natural fit for us in a kind of odd

00:27:37,049 --> 00:27:41,669
way that spinnaker came along we just

00:27:39,960 --> 00:27:45,330
happened when we were writing our new

00:27:41,669 --> 00:27:46,889
platform the name it harbor with au but

00:27:45,330 --> 00:27:49,649
then with kubernetes having this

00:27:46,889 --> 00:27:53,250
nautical theme as well with helmsman it

00:27:49,649 --> 00:27:56,070
was almost preordained that spinnaker

00:27:53,250 --> 00:27:59,059
was going to somehow fit in so that was

00:27:56,070 --> 00:28:02,639
kind of well serendipitous on that part

00:27:59,059 --> 00:28:05,269
so with that I'll open it up if anyone

00:28:02,639 --> 00:28:05,269
has any questions

00:28:27,600 --> 00:28:32,860
yeah that's an interesting question so

00:28:30,220 --> 00:28:36,130
it's you know I kind of mentioned during

00:28:32,860 --> 00:28:37,990
the panel discussion at first when we

00:28:36,130 --> 00:28:40,630
kind of approach things and we worked

00:28:37,990 --> 00:28:42,910
with Ken's on we tried doing things to

00:28:40,630 --> 00:28:48,760
the spinnaker way sort of adopting it

00:28:42,910 --> 00:28:51,130
but at the time as Steven had alluded to

00:28:48,760 --> 00:28:53,110
we are already pretty pretty set in

00:28:51,130 --> 00:28:54,850
working with deployments and actually

00:28:53,110 --> 00:28:56,710
through the spinnaker slack Channel we

00:28:54,850 --> 00:28:58,720
did a lot of questions back and forth

00:28:56,710 --> 00:29:00,610
with with Lars and some of the others

00:28:58,720 --> 00:29:02,200
and the group to figure out how can we

00:29:00,610 --> 00:29:07,030
actually make this work in our existing

00:29:02,200 --> 00:29:09,160
I wouldn't say it's been a challenge if

00:29:07,030 --> 00:29:13,290
anything it speaks to the flexibility

00:29:09,160 --> 00:29:16,450
offered by by spinnaker itself but

00:29:13,290 --> 00:29:18,160
further than that again I think if you

00:29:16,450 --> 00:29:19,900
look at our pipelines and it's a shame I

00:29:18,160 --> 00:29:22,780
can't show you one of our pipelines that

00:29:19,900 --> 00:29:23,920
we have but it's very simple literally

00:29:22,780 --> 00:29:26,860
our pipeline starts off with a github

00:29:23,920 --> 00:29:28,780
check we make sure whether or not the PR

00:29:26,860 --> 00:29:30,760
that's being presented actually has

00:29:28,780 --> 00:29:32,170
rebased off the master and it has

00:29:30,760 --> 00:29:34,090
incorporated later the master changes so

00:29:32,170 --> 00:29:36,160
we leverage to github webhook to do that

00:29:34,090 --> 00:29:38,350
we always want to liquid-based stage

00:29:36,160 --> 00:29:40,840
then our deployment is just simply

00:29:38,350 --> 00:29:42,310
applying the kubernetes manifests we

00:29:40,840 --> 00:29:44,680
launch from there into the automated

00:29:42,310 --> 00:29:46,750
system test because they only take so on

00:29:44,680 --> 00:29:48,010
a deployment we have different levels

00:29:46,750 --> 00:29:49,990
that we can active do our system tasks

00:29:48,010 --> 00:29:51,640
so typically for our staging we might do

00:29:49,990 --> 00:29:53,770
a little bit more extensive suite of

00:29:51,640 --> 00:29:57,520
tests i think in all we've now stubbed

00:29:53,770 --> 00:30:00,040
out about 400 different interactions as

00:29:57,520 --> 00:30:02,020
far as our api tests that can run even

00:30:00,040 --> 00:30:04,120
so that takes maybe three to four

00:30:02,020 --> 00:30:06,040
minutes top rate and our staging

00:30:04,120 --> 00:30:07,930
environment but when when we're talking

00:30:06,040 --> 00:30:10,990
about production or that validation that

00:30:07,930 --> 00:30:15,100
happens that's where the 60 tests take

00:30:10,990 --> 00:30:17,410
at worst 30 seconds for us to mark the

00:30:15,100 --> 00:30:20,280
deployment we knew the limitations going

00:30:17,410 --> 00:30:22,240
in for example about the rolling

00:30:20,280 --> 00:30:25,180
deployments that go with the deployment

00:30:22,240 --> 00:30:27,480
model so it wasn't a it wasn't a problem

00:30:25,180 --> 00:30:27,480
for us

00:30:27,679 --> 00:30:36,330
Dave yeah yeah I've been hearing in a

00:30:34,080 --> 00:30:37,559
couple of both from other people we've

00:30:36,330 --> 00:30:39,750
worked with it and hearing at the

00:30:37,559 --> 00:30:40,500
conference sometimes spinnaker gets

00:30:39,750 --> 00:30:42,450
blamed

00:30:40,500 --> 00:30:43,830
you know deployment fails and I'm

00:30:42,450 --> 00:30:49,860
wondering if you guys have run into

00:30:43,830 --> 00:30:54,090
issues where debugging that fail that is

00:30:49,860 --> 00:30:56,070
is a problem and if if that leads to

00:30:54,090 --> 00:30:58,980
perception gap with spinnaker itself as

00:30:56,070 --> 00:31:00,690
a tool or are your developers trained to

00:30:58,980 --> 00:31:03,480
understand how to follow through with it

00:31:00,690 --> 00:31:04,919
and was that state a matter of local

00:31:03,480 --> 00:31:09,630
culture and you guys having a really

00:31:04,919 --> 00:31:11,179
strong documentation or build-up of

00:31:09,630 --> 00:31:14,100
documentation around how to deal with

00:31:11,179 --> 00:31:15,029
failed startups and pipeline to the fail

00:31:14,100 --> 00:31:17,880
that sort of thing

00:31:15,029 --> 00:31:20,490
yeah actually if anything there hasn't

00:31:17,880 --> 00:31:23,279
been any sort of major problems from our

00:31:20,490 --> 00:31:27,299
developers and working with it it part

00:31:23,279 --> 00:31:29,610
of it is because if anything I went to

00:31:27,299 --> 00:31:31,500
that self-service model for the teams so

00:31:29,610 --> 00:31:33,929
the rollout of spinnaker itself as far

00:31:31,500 --> 00:31:35,460
as getting teams to do deploy first

00:31:33,929 --> 00:31:37,110
start off with just piloting with one of

00:31:35,460 --> 00:31:39,200
our more experienced teams and getting

00:31:37,110 --> 00:31:43,980
them to use it for their own environment

00:31:39,200 --> 00:31:44,940
if anything it was pre spinnaker we were

00:31:43,980 --> 00:31:46,019
trying to do all of our team

00:31:44,940 --> 00:31:49,169
environments just strictly through

00:31:46,019 --> 00:31:52,549
terraform and one of the challenges

00:31:49,169 --> 00:31:54,630
there was that was prone to a lot of

00:31:52,549 --> 00:31:56,820
issues with the spin-up of the clusters

00:31:54,630 --> 00:31:58,620
where we were manually engine injecting

00:31:56,820 --> 00:32:00,659
things like some weight like sleeps in

00:31:58,620 --> 00:32:04,980
order just to make sure that kubernetes

00:32:00,659 --> 00:32:08,279
came up cleanly it actually worked to

00:32:04,980 --> 00:32:09,870
our advantage because we even giving our

00:32:08,279 --> 00:32:12,360
development teams integration

00:32:09,870 --> 00:32:14,370
environments the tendency is that they

00:32:12,360 --> 00:32:16,350
would hold on to their data sources oh

00:32:14,370 --> 00:32:19,049
we're trying to get this feature out and

00:32:16,350 --> 00:32:22,740
we need to testing I just set up like my

00:32:19,049 --> 00:32:24,659
test data just perfectly so from a

00:32:22,740 --> 00:32:26,789
security standpoint we started off with

00:32:24,659 --> 00:32:27,960
how we looked at our secure our staging

00:32:26,789 --> 00:32:29,399
and production environment since

00:32:27,960 --> 00:32:31,320
traditionally with our production

00:32:29,399 --> 00:32:36,210
environment so using cops we're using

00:32:31,320 --> 00:32:38,039
poor OS we want those clusters to live

00:32:36,210 --> 00:32:39,539
no more than two weeks at a given time

00:32:38,039 --> 00:32:41,279
so we

00:32:39,539 --> 00:32:43,080
are constantly refreshing them so we

00:32:41,279 --> 00:32:45,179
literally will have our production a

00:32:43,080 --> 00:32:48,929
cluster and we'll have a sort of hot

00:32:45,179 --> 00:32:51,720
spare beat and we use a failover and AWS

00:32:48,929 --> 00:32:53,279
this through the DNS route 53 group to

00:32:51,720 --> 00:32:54,690
literally be able to failover between

00:32:53,279 --> 00:32:56,129
the two if something goes wrong

00:32:54,690 --> 00:32:58,109
since we're leveraging things like HCV

00:32:56,129 --> 00:33:01,080
and cops we don't even want to just

00:32:58,109 --> 00:33:02,429
troubleshoot it just kill it send

00:33:01,080 --> 00:33:04,470
traffic to the other of the cluster

00:33:02,429 --> 00:33:05,940
taking that model and applying it then

00:33:04,470 --> 00:33:07,799
down to our development environments

00:33:05,940 --> 00:33:09,720
telling developers you know what it's

00:33:07,799 --> 00:33:11,220
just easier if you're running into some

00:33:09,720 --> 00:33:11,489
sort of issue with your environment kill

00:33:11,220 --> 00:33:14,340
it

00:33:11,489 --> 00:33:16,139
refresh it and through spinnaker refresh

00:33:14,340 --> 00:33:18,440
takes 30 minutes to an hour to

00:33:16,139 --> 00:33:21,869
completely redeploy all the artifacts

00:33:18,440 --> 00:33:23,700
that actually had got them then where we

00:33:21,869 --> 00:33:25,379
also tell them we will no longer support

00:33:23,700 --> 00:33:27,659
your environment if it's older than two

00:33:25,379 --> 00:33:29,220
weeks we gave you like a two-week sort

00:33:27,659 --> 00:33:31,950
of leeway like okay if I'm working on a

00:33:29,220 --> 00:33:33,960
more complicated sprint what's gonna you

00:33:31,950 --> 00:33:35,879
know go get a couple other things yeah

00:33:33,960 --> 00:33:38,999
we'll give you a one-time pass that you

00:33:35,879 --> 00:33:40,739
can opt into but then we have a process

00:33:38,999 --> 00:33:43,259
to just go ahead and kill all the

00:33:40,739 --> 00:33:45,570
environments refreshments trash so if

00:33:43,259 --> 00:33:48,179
anything the developers have become more

00:33:45,570 --> 00:33:49,889
trusting knowing that they have such an

00:33:48,179 --> 00:33:51,989
ease to go ahead and redeploy their

00:33:49,889 --> 00:33:54,470
environments and refresh so it's never

00:33:51,989 --> 00:33:57,659
blaming around the the problems and

00:33:54,470 --> 00:33:59,759
honestly if we do encounter some sort of

00:33:57,659 --> 00:34:01,789
issue with with the deployment usually

00:33:59,759 --> 00:34:04,759
something that's caused our our end

00:34:01,789 --> 00:34:12,270
outside of spinnaker Spinnaker's been

00:34:04,759 --> 00:34:20,460
knock on wood pretty rock stable if we

00:34:12,270 --> 00:34:23,790
do see a systemic problem across and

00:34:20,460 --> 00:34:26,790
then the other thing too is I think most

00:34:23,790 --> 00:34:29,359
of the problems we find which is kind of

00:34:26,790 --> 00:34:33,200
nice because we catch it before the

00:34:29,359 --> 00:34:36,599
artifact even hits staging typically is

00:34:33,200 --> 00:34:38,429
sometimes developers haven't actually

00:34:36,599 --> 00:34:40,980
thoroughly tested the pipeline so

00:34:38,429 --> 00:34:42,299
they've made a manifest you didn't

00:34:40,980 --> 00:34:43,500
really deploy at the integration

00:34:42,299 --> 00:34:45,780
environment and go through that process

00:34:43,500 --> 00:34:48,510
and we'll catch that because the

00:34:45,780 --> 00:34:51,779
pipeline can't be converted properly so

00:34:48,510 --> 00:34:52,860
the the evaluation of these things into

00:34:51,779 --> 00:34:54,960
spinnaker from

00:34:52,860 --> 00:34:56,580
kubernetes manifests actually through

00:34:54,960 --> 00:34:59,940
like an error and we can go and looking

00:34:56,580 --> 00:35:01,500
at and kind of say hey your urbanizing

00:34:59,940 --> 00:35:04,050
manifest isn't valid

00:35:01,500 --> 00:35:06,780
we've had that come up multiple times so

00:35:04,050 --> 00:35:09,240
not typically spinnaker typically other

00:35:06,780 --> 00:35:13,890
other things that come up unrelated to

00:35:09,240 --> 00:35:15,300
it hi I was curious if you have open

00:35:13,890 --> 00:35:18,560
sourced onion the tooling that you

00:35:15,300 --> 00:35:21,150
showed today especially with regard to

00:35:18,560 --> 00:35:23,970
some of the gaps that exist today for

00:35:21,150 --> 00:35:25,110
the cloud driver to spinnaker

00:35:23,970 --> 00:35:27,870
integration that you were able to work

00:35:25,110 --> 00:35:30,750
around and if so could you please hear

00:35:27,870 --> 00:35:32,850
those yeah sure absolutely I think as

00:35:30,750 --> 00:35:34,320
Steven mentioned the one tool that we

00:35:32,850 --> 00:35:37,860
have which was the automated pipeline

00:35:34,320 --> 00:35:39,240
generation we certainly make that we can

00:35:37,860 --> 00:35:40,940
talk about making that available it was

00:35:39,240 --> 00:35:43,770
more of a stopgap especially with the v2

00:35:40,940 --> 00:35:46,080
integration that's that's underway but I

00:35:43,770 --> 00:35:47,340
think it also echos kind of we had no

00:35:46,080 --> 00:35:49,110
problems with sharing how we've

00:35:47,340 --> 00:35:51,720
implemented it off to go through our

00:35:49,110 --> 00:35:53,340
legal to actually open source those

00:35:51,720 --> 00:35:55,200
particular components I don't think we

00:35:53,340 --> 00:35:57,240
have any proprietary but we'll have to

00:35:55,200 --> 00:36:00,210
review it but we can certainly share our

00:35:57,240 --> 00:36:02,340
how we approached implementing it as

00:36:00,210 --> 00:36:04,200
much as possible in the interim before

00:36:02,340 --> 00:36:06,530
that so just hit us up on the slack

00:36:04,200 --> 00:36:23,550
channel we'll more than happy to share

00:36:06,530 --> 00:36:26,220
but I think the kubernetes so I didn't

00:36:23,550 --> 00:36:28,890
want to release something and have

00:36:26,220 --> 00:36:30,810
people start using it and then pretty

00:36:28,890 --> 00:36:33,180
kind of like a mess for them when they

00:36:30,810 --> 00:36:36,480
try to move to them probably the proper

00:36:33,180 --> 00:36:40,110
way to do it in the future and I think

00:36:36,480 --> 00:36:42,120
the b2 provider looks like very it's

00:36:40,110 --> 00:36:46,440
going to be the way to go in the people

00:36:42,120 --> 00:36:48,390
so I would say if you have like an

00:36:46,440 --> 00:36:49,920
absolute immediate need come talk to me

00:36:48,390 --> 00:36:53,520
and I can kind of tell you what we did

00:36:49,920 --> 00:36:55,830
but I think the effort would probably be

00:36:53,520 --> 00:36:59,700
better spent maybe helping get the v2

00:36:55,830 --> 00:37:01,410
stuff going quicker so that's something

00:36:59,700 --> 00:37:03,510
we're gonna be looking to do I think

00:37:01,410 --> 00:37:06,120
internally is dedicating more cycles

00:37:03,510 --> 00:37:07,910
they're kind of helping the open source

00:37:06,120 --> 00:37:09,779
eCos

00:37:07,910 --> 00:37:11,339
anything that we do open-source we'll

00:37:09,779 --> 00:37:13,049
just be on our open source page or just

00:37:11,339 --> 00:37:14,220
get hugged icon slash Under Armor we

00:37:13,049 --> 00:37:16,140
have a hundred goals that we have open

00:37:14,220 --> 00:37:21,450
sores but bladed it specifically the

00:37:16,140 --> 00:37:23,400
spinnaker we haven't yet but we're in

00:37:21,450 --> 00:37:27,450
terms I think you mentioned you guys run

00:37:23,400 --> 00:37:29,490
kubernetes in G key yes was a decision

00:37:27,450 --> 00:37:32,099
just go straight GK or was ever like a

00:37:29,490 --> 00:37:33,240
debate so the issues for a lot of new

00:37:32,099 --> 00:37:35,490
organizations kind of getting started

00:37:33,240 --> 00:37:36,990
it's easy to say well do I use Google

00:37:35,490 --> 00:37:40,819
Cloud even though I may be in Amazon

00:37:36,990 --> 00:37:43,799
infrastructure or do I run it myself

00:37:40,819 --> 00:37:45,480
yeah absolutely so again that's mainly

00:37:43,799 --> 00:37:48,119
for our team our b2b business they

00:37:45,480 --> 00:37:51,029
actually tried adopting our or they were

00:37:48,119 --> 00:37:53,099
doing terraform in AWS at first to do

00:37:51,029 --> 00:37:55,710
their sort of team environments and as

00:37:53,099 --> 00:37:58,740
they were preparing their stack move to

00:37:55,710 --> 00:37:59,849
micro services and kubernetes once they

00:37:58,740 --> 00:38:01,140
did that in the few environments they

00:37:59,849 --> 00:38:03,480
were like you know there's so much

00:38:01,140 --> 00:38:05,279
overhead in running kubernetes we just

00:38:03,480 --> 00:38:07,529
want to deal with it so they they made

00:38:05,279 --> 00:38:09,299
the decision to go to gke I think all

00:38:07,529 --> 00:38:11,369
from the time of actually going with the

00:38:09,299 --> 00:38:16,160
decision to go to decade going live in

00:38:11,369 --> 00:38:16,160
production was about one month for them

00:38:17,779 --> 00:38:24,029
any other questions well we want to

00:38:22,859 --> 00:38:26,039
definitely thank you that's our contact

00:38:24,029 --> 00:38:26,940
information up here as well as our way

00:38:26,039 --> 00:38:28,529
to say thank you to the community

00:38:26,940 --> 00:38:31,319
because you know we couldn't have done

00:38:28,529 --> 00:38:35,369
this adopt spinnaker and kubernetes so

00:38:31,319 --> 00:38:37,079
quickly I do have a thank you for all

00:38:35,369 --> 00:38:40,259
the attendees and I'll probably also put

00:38:37,079 --> 00:38:42,289
it out in the in the slack for the

00:38:40,259 --> 00:38:45,059
spinnaker summit but I have 30% off

00:38:42,289 --> 00:38:47,099
discount codes for up to 500 ollars

00:38:45,059 --> 00:38:50,430
one-time use at Under Armour comm

00:38:47,099 --> 00:38:53,309
unfortunately it is only us in Canada

00:38:50,430 --> 00:38:55,410
for those sites so our European friends

00:38:53,309 --> 00:38:57,509
just pay me individually and we'll work

00:38:55,410 --> 00:38:59,910
something out but definitely say thank

00:38:57,509 --> 00:39:02,450
you so thank you for being an awesome

00:38:59,910 --> 00:39:08,929
community thanks

00:39:02,450 --> 00:39:08,929

YouTube URL: https://www.youtube.com/watch?v=0xbMcveHaJw


