Title: Plugging into Spinnaker
Publication date: 2017-09-24
Playlist: Spinnaker Summit 2017
Description: 
	CHRIS THIELEN, JEREMY TATELMAN, NETFLIX

In this talk, Chris Thielen, UI Engineer, and Jeremy Tatelman, UX Designer, will share their experiences integrating disparate tools into a low-friction, optimized user experience within Spinnaker. Topics include “knowing when to integrate,” “development best-practices” and “UX do’s and don’ts.”

From Spinnaker Summit 2017
Captions: 
	00:00:01,909 --> 00:00:08,189
okay guys I think we're gonna I think

00:00:05,100 --> 00:00:11,370
we're gonna start thank you for coming

00:00:08,189 --> 00:00:13,889
to the spinnaker summit my name is my

00:00:11,370 --> 00:00:17,369
name is Jeremy teittleman I'm the UX

00:00:13,889 --> 00:00:19,109
designer on spinnaker and with me Chris

00:00:17,369 --> 00:00:23,939
Nilan and I'm a senior software engineer

00:00:19,109 --> 00:00:27,740
and her team focus mostly on the UI and

00:00:23,939 --> 00:00:31,470
the focus of this this session today is

00:00:27,740 --> 00:00:33,059
going to be essentially how to maybe

00:00:31,470 --> 00:00:35,820
address how to look at front-end

00:00:33,059 --> 00:00:37,950
integration points for when developing

00:00:35,820 --> 00:00:39,899
with spinnaker we're not going to get so

00:00:37,950 --> 00:00:41,309
much into the back end of this but sort

00:00:39,899 --> 00:00:43,559
of along the lines of what Andy talked

00:00:41,309 --> 00:00:45,539
about in the keynote this morning was

00:00:43,559 --> 00:00:48,059
this idea of Spinnaker's just sort of

00:00:45,539 --> 00:00:51,030
the base on which we have the potential

00:00:48,059 --> 00:00:53,100
to really build a huge delivery platform

00:00:51,030 --> 00:00:55,170
with a lot of customized integration

00:00:53,100 --> 00:00:56,340
points and so this meetings going to

00:00:55,170 --> 00:00:59,100
sort of address we're gonna start off

00:00:56,340 --> 00:01:01,800
talking a little bit about one how it

00:00:59,100 --> 00:01:04,320
Netflix we sort of address these

00:01:01,800 --> 00:01:06,689
integration points and then that will

00:01:04,320 --> 00:01:09,479
grow we'll get into sort of the nuts and

00:01:06,689 --> 00:01:12,090
bolts of how we implemented those and

00:01:09,479 --> 00:01:15,320
with some examples towards the end and

00:01:12,090 --> 00:01:19,830
then questions questions at the end I

00:01:15,320 --> 00:01:22,080
think to just start and we keep sort of

00:01:19,830 --> 00:01:23,640
keep this loose so while there will be

00:01:22,080 --> 00:01:25,619
questions at the end I think if there

00:01:23,640 --> 00:01:28,650
any sticking points or if we're going

00:01:25,619 --> 00:01:30,060
too fast or we're going you know getting

00:01:28,650 --> 00:01:31,619
a little too detailed by all means feel

00:01:30,060 --> 00:01:35,400
free to raise your hand and tell us to

00:01:31,619 --> 00:01:39,990
slow down or speed up so digging into

00:01:35,400 --> 00:01:41,939
things a little bit getting started why

00:01:39,990 --> 00:01:43,560
plug into spinnaker and I think that

00:01:41,939 --> 00:01:45,600
again Andy covered this really well this

00:01:43,560 --> 00:01:48,540
morning but spinnaker and its base

00:01:45,600 --> 00:01:51,780
functionality pipeline orchestration and

00:01:48,540 --> 00:01:53,909
infrastructure management it's just a

00:01:51,780 --> 00:01:56,939
place to start with this here at Netflix

00:01:53,909 --> 00:01:58,799
we've expanded that into a very robust

00:01:56,939 --> 00:02:01,409
search mechanism

00:01:58,799 --> 00:02:03,180
we've supplemented that with things like

00:02:01,409 --> 00:02:05,850
library management and other things that

00:02:03,180 --> 00:02:08,399
we that we'll get into later but it's

00:02:05,850 --> 00:02:10,560
just the beginning and I think that that

00:02:08,399 --> 00:02:11,700
sort of that metaphor of us being at the

00:02:10,560 --> 00:02:18,180
starting line is really good

00:02:11,700 --> 00:02:22,890
put this plugins are an opportunity to

00:02:18,180 --> 00:02:27,060
create a seamless in context tool for

00:02:22,890 --> 00:02:29,040
your users what I mean by this is the

00:02:27,060 --> 00:02:31,170
it's not necessarily it's not meant to

00:02:29,040 --> 00:02:32,519
be the kitchen sink it's not necessarily

00:02:31,170 --> 00:02:34,410
meant to be the home of all the

00:02:32,519 --> 00:02:36,599
functionality that you have and your in

00:02:34,410 --> 00:02:38,580
your workflow but rather where it makes

00:02:36,599 --> 00:02:40,260
sense and I think that this is really

00:02:38,580 --> 00:02:43,620
important to remember especially in

00:02:40,260 --> 00:02:44,610
large organizations this is and

00:02:43,620 --> 00:02:46,410
something we've struggled with

00:02:44,610 --> 00:02:48,569
internally I think that keeping the

00:02:46,410 --> 00:02:50,310
balance between well let's just cram it

00:02:48,569 --> 00:02:53,069
in spinnaker and really being thoughtful

00:02:50,310 --> 00:02:55,950
about what's integrate and what not to

00:02:53,069 --> 00:02:57,780
integrate so I think as we've as we've

00:02:55,950 --> 00:02:59,160
looked at things that are potentials for

00:02:57,780 --> 00:03:01,920
plugging in the spinnaker as we've

00:02:59,160 --> 00:03:03,599
talked with some teams in some cases we

00:03:01,920 --> 00:03:06,840
say hey this just doesn't really make

00:03:03,599 --> 00:03:08,280
sense in this context and maybe we'll

00:03:06,840 --> 00:03:08,730
create a link to it or something to that

00:03:08,280 --> 00:03:11,190
effect

00:03:08,730 --> 00:03:16,410
oh yeah that's opposed to embedding it

00:03:11,190 --> 00:03:19,139
directly in this Packer so really that

00:03:16,410 --> 00:03:20,579
process starting to address what what

00:03:19,139 --> 00:03:22,590
maybe should be plugged in what not

00:03:20,579 --> 00:03:24,420
really starts with us meeting our

00:03:22,590 --> 00:03:26,730
customers or I'm going to be talking

00:03:24,420 --> 00:03:28,739
about here we refer to our customers is

00:03:26,730 --> 00:03:32,250
basically other engineers and Netflix

00:03:28,739 --> 00:03:33,660
other users here at the company who may

00:03:32,250 --> 00:03:35,480
be interacting with our tools but your

00:03:33,660 --> 00:03:38,310
customers may be your own team members

00:03:35,480 --> 00:03:39,989
or if your product is actually offered

00:03:38,310 --> 00:03:41,850
to people outside your company then

00:03:39,989 --> 00:03:46,139
they'd be very you know a traditional

00:03:41,850 --> 00:03:47,910
traditional customer base I think one of

00:03:46,139 --> 00:03:49,560
the most important pieces of this and

00:03:47,910 --> 00:03:51,239
where I wanted to start is it's an

00:03:49,560 --> 00:03:52,799
opportunity to build partnerships with

00:03:51,239 --> 00:03:55,019
these people I think especially for us

00:03:52,799 --> 00:03:58,380
when you get into an organization of

00:03:55,019 --> 00:04:00,420
hundreds and hundreds of Engineers we

00:03:58,380 --> 00:04:03,030
can't necessarily interact with all of

00:04:00,420 --> 00:04:05,609
these people all the time and we don't

00:04:03,030 --> 00:04:07,709
necessarily know exactly what their

00:04:05,609 --> 00:04:09,480
needs are and so when this process

00:04:07,709 --> 00:04:11,790
begins it's an opportunity for us to

00:04:09,480 --> 00:04:13,169
really make whether or not we end up

00:04:11,790 --> 00:04:15,810
working together on this integration

00:04:13,169 --> 00:04:18,989
it's an opportunity for us to really

00:04:15,810 --> 00:04:20,459
make these that team part of part of

00:04:18,989 --> 00:04:22,820
delivery engineering part of the

00:04:20,459 --> 00:04:25,170
spinnaker group and I think that

00:04:22,820 --> 00:04:26,820
understanding their use case truly

00:04:25,170 --> 00:04:29,810
ourselves in their shoes is a really

00:04:26,820 --> 00:04:29,810
important part of this process

00:04:31,250 --> 00:04:35,940
understanding their challenges again

00:04:33,900 --> 00:04:37,230
really understanding what that use case

00:04:35,940 --> 00:04:39,540
is and looking at things from their

00:04:37,230 --> 00:04:41,940
perspective is really key for this it's

00:04:39,540 --> 00:04:43,650
very difficult to build in integration

00:04:41,940 --> 00:04:45,420
when you essentially just have a big

00:04:43,650 --> 00:04:46,890
list of jurors and it's like okay we'll

00:04:45,420 --> 00:04:48,900
plug in a we'll plug in B we'll plug in

00:04:46,890 --> 00:04:51,150
C it's about really understanding what

00:04:48,900 --> 00:04:53,130
problems they're facing and starting a

00:04:51,150 --> 00:04:55,230
conversation around how we can sort of

00:04:53,130 --> 00:04:59,010
resolve those challenges for them and I

00:04:55,230 --> 00:05:01,320
think with the partnership aspect we can

00:04:59,010 --> 00:05:03,840
get a list of requirements and build

00:05:01,320 --> 00:05:05,760
something for somebody but a lot of

00:05:03,840 --> 00:05:07,980
times if you don't have a continued

00:05:05,760 --> 00:05:10,080
partnership you might end up going off

00:05:07,980 --> 00:05:12,420
on a tangent that is is not appropriate

00:05:10,080 --> 00:05:14,820
for that team that that doesn't actually

00:05:12,420 --> 00:05:17,880
address the issues that they are trying

00:05:14,820 --> 00:05:21,060
to solve so having partnerships with our

00:05:17,880 --> 00:05:23,070
teams allows us to make sure that we are

00:05:21,060 --> 00:05:27,840
on the right track as we develop these

00:05:23,070 --> 00:05:28,860
integrations and this is really the

00:05:27,840 --> 00:05:30,270
opportunity where you're going to go

00:05:28,860 --> 00:05:31,950
through and build out those feature

00:05:30,270 --> 00:05:33,450
requirements and and figure out what

00:05:31,950 --> 00:05:34,890
their problems are and one of the

00:05:33,450 --> 00:05:37,110
interesting parts of this process is

00:05:34,890 --> 00:05:39,000
that you will reach a compromise it's

00:05:37,110 --> 00:05:40,680
not going to be them telling you exactly

00:05:39,000 --> 00:05:43,020
what they want it's going to be a matter

00:05:40,680 --> 00:05:44,970
of well in order to be most efficient

00:05:43,020 --> 00:05:46,590
about this how do we integrate this into

00:05:44,970 --> 00:05:48,210
the product that is spinnaker how do we

00:05:46,590 --> 00:05:51,810
create a product like experience for

00:05:48,210 --> 00:05:53,070
them not necessarily just essentially

00:05:51,810 --> 00:05:54,510
plug in and out that they already

00:05:53,070 --> 00:05:58,020
created in their in their own

00:05:54,510 --> 00:05:59,370
environment and then really the last

00:05:58,020 --> 00:06:01,610
piece of this is once you've collected

00:05:59,370 --> 00:06:04,290
all of these this information is

00:06:01,610 --> 00:06:09,750
determining the depth of the integration

00:06:04,290 --> 00:06:11,550
point so to sort of go through that sort

00:06:09,750 --> 00:06:13,410
of I've broken this into four areas but

00:06:11,550 --> 00:06:16,410
I think that in practice this would be

00:06:13,410 --> 00:06:21,240
much more granular these categories are

00:06:16,410 --> 00:06:24,810
not official but mr. turtle the mr.

00:06:21,240 --> 00:06:26,940
turtle pool is I think my favorite level

00:06:24,810 --> 00:06:31,530
of integration didn't mix of efficiency

00:06:26,940 --> 00:06:34,170
and complexity so the first one the

00:06:31,530 --> 00:06:36,060
puddle is this is going to be something

00:06:34,170 --> 00:06:37,699
contextual probably read-only

00:06:36,060 --> 00:06:40,699
information

00:06:37,699 --> 00:06:43,490
probably links into either external

00:06:40,699 --> 00:06:46,909
tools or even other internally facing

00:06:43,490 --> 00:06:49,729
tools within within your team within

00:06:46,909 --> 00:06:52,129
within Dec we currently the open-source

00:06:49,729 --> 00:06:54,979
version in fact has a spot to add links

00:06:52,129 --> 00:06:58,909
so for instance adding context around

00:06:54,979 --> 00:07:02,530
deployed server groups or instances you

00:06:58,909 --> 00:07:05,900
can directly link to information that is

00:07:02,530 --> 00:07:07,219
instance exposes and we just add some

00:07:05,900 --> 00:07:10,639
configuration to your app and they

00:07:07,219 --> 00:07:12,620
magically show up in the UI and we use

00:07:10,639 --> 00:07:14,360
this internally we'll use this with

00:07:12,620 --> 00:07:16,610
they're not integrated into spinnaker

00:07:14,360 --> 00:07:18,439
proper but the entire suite of insight

00:07:16,610 --> 00:07:22,460
products managed by our insight

00:07:18,439 --> 00:07:25,310
engineering team Atlas Chronos and some

00:07:22,460 --> 00:07:28,279
of those tools log sort of log parsing

00:07:25,310 --> 00:07:29,810
tools that that kind of thing we will

00:07:28,279 --> 00:07:31,310
link into those tools it doesn't make

00:07:29,810 --> 00:07:32,629
sense for those integrate into the

00:07:31,310 --> 00:07:36,740
spinnaker and sort of a first-class

00:07:32,629 --> 00:07:38,060
citizen sort of moving to the next sort

00:07:36,740 --> 00:07:40,699
of splashing around in the backyard here

00:07:38,060 --> 00:07:43,610
so this would be something that maybe

00:07:40,699 --> 00:07:48,169
you'd represent via iframes or other

00:07:43,610 --> 00:07:51,050
sort of windowed or embedded content

00:07:48,169 --> 00:07:53,330
within of these external views in

00:07:51,050 --> 00:07:56,240
spinnaker internally we've done this

00:07:53,330 --> 00:07:57,680
with analytics so we maintain a lot of

00:07:56,240 --> 00:08:00,440
usage analytics around spinnaker

00:07:57,680 --> 00:08:03,469
maintained by our sort of our data

00:08:00,440 --> 00:08:05,180
engineering groups and and this is an

00:08:03,469 --> 00:08:07,189
opportunity without rebuilding those

00:08:05,180 --> 00:08:09,169
dashboards rebuilding the visualizations

00:08:07,189 --> 00:08:11,389
we're actually embedding in tableau

00:08:09,169 --> 00:08:12,919
views so that's a way for us to service

00:08:11,389 --> 00:08:14,750
this information to use most of the

00:08:12,919 --> 00:08:17,900
screen real estate for this you're still

00:08:14,750 --> 00:08:19,610
in spinnaker proper but it's external

00:08:17,900 --> 00:08:25,900
content directly just sort of embedded

00:08:19,610 --> 00:08:29,539
in diving pool so this is going to be

00:08:25,900 --> 00:08:31,250
where you start getting into and most of

00:08:29,539 --> 00:08:33,050
the examples we have to show today I

00:08:31,250 --> 00:08:34,810
think are more in this neck of the woods

00:08:33,050 --> 00:08:38,300
which is essentially where you have a

00:08:34,810 --> 00:08:42,680
external back-end product or external

00:08:38,300 --> 00:08:44,180
even UI that you're going to that you

00:08:42,680 --> 00:08:45,980
want to plug you want to develop a UI

00:08:44,180 --> 00:08:50,149
for and plug into spinnaker and in this

00:08:45,980 --> 00:08:51,440
case one of the things that will this

00:08:50,149 --> 00:08:52,670
goes through our sort of librarian

00:08:51,440 --> 00:08:54,650
management how we address that but

00:08:52,670 --> 00:08:56,390
essentially it's a library outside of

00:08:54,650 --> 00:08:59,540
spinnaker proper that we're actually

00:08:56,390 --> 00:09:02,090
ingesting and bringing in thinking

00:08:59,540 --> 00:09:05,540
through the UX that the UX is seamless

00:09:02,090 --> 00:09:07,400
within spinnaker it looks like spinnaker

00:09:05,540 --> 00:09:10,160
but it's actually sort of an external

00:09:07,400 --> 00:09:12,110
external product perspective and in some

00:09:10,160 --> 00:09:14,300
cases these certain integrations are

00:09:12,110 --> 00:09:16,430
with products that already exists within

00:09:14,300 --> 00:09:20,090
well in our case within Netflix

00:09:16,430 --> 00:09:21,530
integrating existing maybe applications

00:09:20,090 --> 00:09:24,320
that used to be standalone and then we

00:09:21,530 --> 00:09:29,150
integrate them into the app as a as a

00:09:24,320 --> 00:09:32,000
library as a third-party plugin other

00:09:29,150 --> 00:09:34,040
ones are things that we may have

00:09:32,000 --> 00:09:38,030
completely developed in-house an example

00:09:34,040 --> 00:09:39,860
of that is our fast properties that that

00:09:38,030 --> 00:09:42,590
Andy mentioned in the keynote this

00:09:39,860 --> 00:09:45,680
morning that was a full integration in a

00:09:42,590 --> 00:09:48,230
spinnaker that is that the spinnaker

00:09:45,680 --> 00:09:52,130
team built independently with with a

00:09:48,230 --> 00:09:56,660
collaboration with the stakeholders but

00:09:52,130 --> 00:09:58,700
not necessarily as code contributors and

00:09:56,660 --> 00:10:00,080
I I think that actually ties really

00:09:58,700 --> 00:10:03,260
nicely into the last of these categories

00:10:00,080 --> 00:10:06,650
which essentially at this point it's not

00:10:03,260 --> 00:10:09,590
necessarily even a separate integration

00:10:06,650 --> 00:10:12,320
this is elements that are brought into

00:10:09,590 --> 00:10:14,270
the base functionality of spinnaker this

00:10:12,320 --> 00:10:17,300
is where essentially it lives in the

00:10:14,270 --> 00:10:20,240
spinnaker codebase or very very close to

00:10:17,300 --> 00:10:22,250
it this is this is basically probably

00:10:20,240 --> 00:10:23,780
multiple screens and spinnaker there'd

00:10:22,250 --> 00:10:26,090
be no distinction at all that you're

00:10:23,780 --> 00:10:31,910
working with something that has any ties

00:10:26,090 --> 00:10:35,120
to an external external tool so moving

00:10:31,910 --> 00:10:37,250
on I'm going to sort of nod to Chris

00:10:35,120 --> 00:10:38,890
here but we're gonna get into certain

00:10:37,250 --> 00:10:43,010
nuts and bolts of how we've integrated

00:10:38,890 --> 00:10:44,990
so as we as we as we start thinking

00:10:43,010 --> 00:10:46,430
about an integration there's there's a

00:10:44,990 --> 00:10:50,839
lot of different things to consider each

00:10:46,430 --> 00:10:52,250
one is completely different so some

00:10:50,839 --> 00:10:54,200
things to consider as we start

00:10:52,250 --> 00:10:55,580
integrating is is this a Greenfield

00:10:54,200 --> 00:10:59,120
thing where are we integrating an

00:10:55,580 --> 00:11:01,640
existing product that already exists if

00:10:59,120 --> 00:11:03,260
it's a Greenfield basically a feature

00:11:01,640 --> 00:11:04,010
request from somebody we can start to

00:11:03,260 --> 00:11:06,830
think about it in

00:11:04,010 --> 00:11:11,480
context of spinnaker primitives within

00:11:06,830 --> 00:11:13,730
deck vui and how can we integrate this

00:11:11,480 --> 00:11:16,970
new feature request probably we're

00:11:13,730 --> 00:11:18,290
building it ourselves on the other end

00:11:16,970 --> 00:11:21,740
of that spectrum is when there's an

00:11:18,290 --> 00:11:23,510
existing application and if there's an

00:11:21,740 --> 00:11:24,650
application that already exists we have

00:11:23,510 --> 00:11:27,290
to really consider what are the

00:11:24,650 --> 00:11:31,160
technologies that that has been built

00:11:27,290 --> 00:11:32,960
using and how do those integrate into

00:11:31,160 --> 00:11:38,120
the technologies that we've chosen for

00:11:32,960 --> 00:11:39,550
Spinnaker's UI deck we also have to

00:11:38,120 --> 00:11:42,530
consider how much effort is there

00:11:39,550 --> 00:11:44,540
involved and how much collaboration will

00:11:42,530 --> 00:11:47,630
there be with those with those other

00:11:44,540 --> 00:11:50,330
stakeholders I think you know it's it's

00:11:47,630 --> 00:11:52,460
a four the spinnaker team we continue to

00:11:50,330 --> 00:11:54,980
grow for delivery engineering we

00:11:52,460 --> 00:11:57,500
continue to grow but we're not obviously

00:11:54,980 --> 00:11:59,720
growing as fast as the rest of Netflix's

00:11:57,500 --> 00:12:02,270
engineering organization and so a lot of

00:11:59,720 --> 00:12:03,080
these points are meeting with groups and

00:12:02,270 --> 00:12:06,290
when you're having these conversations

00:12:03,080 --> 00:12:07,670
it's been very important for us to

00:12:06,290 --> 00:12:09,740
determine how much work and really

00:12:07,670 --> 00:12:11,060
meeting in the middle middle ground to

00:12:09,740 --> 00:12:12,740
determine how much work I think we're

00:12:11,060 --> 00:12:15,020
going to have to do and how much work

00:12:12,740 --> 00:12:16,340
they're going to have to do and really

00:12:15,020 --> 00:12:17,870
to get this the scale effect of it I

00:12:16,340 --> 00:12:21,560
think it really talks back to that

00:12:17,870 --> 00:12:23,780
partnership absolutely so some of the

00:12:21,560 --> 00:12:27,170
existing integration points that we have

00:12:23,780 --> 00:12:30,560
in spinnaker today that that anybody

00:12:27,170 --> 00:12:33,590
here can actually plug into one of those

00:12:30,560 --> 00:12:35,120
is and when I say again I'm limiting

00:12:33,590 --> 00:12:37,910
this to the UI there's a whole nother

00:12:35,120 --> 00:12:41,360
talk coming I think tomorrow that's

00:12:37,910 --> 00:12:43,700
about more back-end spinnaker

00:12:41,360 --> 00:12:46,460
customizations but this is limiting

00:12:43,700 --> 00:12:48,650
ourselves to the UI so one one spot that

00:12:46,460 --> 00:12:52,970
we can currently customize spinnaker UI

00:12:48,650 --> 00:12:55,550
is the header and in the header we add

00:12:52,970 --> 00:12:58,610
we've added some additional items in the

00:12:55,550 --> 00:13:00,770
Netflix's build another spot would be

00:12:58,610 --> 00:13:02,810
the main features and these are

00:13:00,770 --> 00:13:05,000
essentially pipe lines clusters load

00:13:02,810 --> 00:13:06,620
balancers security groups the things

00:13:05,000 --> 00:13:10,010
that you're already familiar with those

00:13:06,620 --> 00:13:13,460
are built in a pluggable way so we can

00:13:10,010 --> 00:13:16,370
add additional main level features that

00:13:13,460 --> 00:13:18,700
are that are linked to some sort of an

00:13:16,370 --> 00:13:20,360
applicator

00:13:18,700 --> 00:13:24,680
incidentally those are called data

00:13:20,360 --> 00:13:27,170
sources another integration point is

00:13:24,680 --> 00:13:29,090
cloud provider overrides now you might

00:13:27,170 --> 00:13:31,400
say well I'm not going to build myself a

00:13:29,090 --> 00:13:34,540
cloud provider but you can still use

00:13:31,400 --> 00:13:38,990
these overrides to customize your own

00:13:34,540 --> 00:13:40,340
version of 'deck and you don't have to

00:13:38,990 --> 00:13:42,110
build an entire cloud provider to do

00:13:40,340 --> 00:13:44,030
that you can just override certain

00:13:42,110 --> 00:13:50,660
pieces of the cloud provider that you

00:13:44,030 --> 00:13:52,310
are already leveraging one other point

00:13:50,660 --> 00:13:55,460
would be the the application

00:13:52,310 --> 00:13:58,640
configuration section now we we allow

00:13:55,460 --> 00:14:01,430
you to customize this to add additional

00:13:58,640 --> 00:14:05,990
data metadata to your application that

00:14:01,430 --> 00:14:07,850
you can then use with your other in when

00:14:05,990 --> 00:14:11,000
you build the full integration you can

00:14:07,850 --> 00:14:14,150
use the application made of data to to

00:14:11,000 --> 00:14:15,470
drive that integration and if the the

00:14:14,150 --> 00:14:17,990
configuration instead of being an of

00:14:15,470 --> 00:14:22,610
some file somewhere it's right here in

00:14:17,990 --> 00:14:25,250
the UI so let's talk a little bit about

00:14:22,610 --> 00:14:29,960
how we at Netflix actually build our

00:14:25,250 --> 00:14:34,870
custom version of the UI as you probably

00:14:29,960 --> 00:14:37,160
know Netflix is open source and we have

00:14:34,870 --> 00:14:40,070
Netflix as open source Spinnaker's open

00:14:37,160 --> 00:14:45,230
source and we have split the codebase

00:14:40,070 --> 00:14:47,120
into a number of different modules now

00:14:45,230 --> 00:14:49,940
in the Netflix private side of this

00:14:47,120 --> 00:14:53,270
screen we see the the modules that are

00:14:49,940 --> 00:14:55,280
specific to two Netflix is billed and

00:14:53,270 --> 00:14:59,330
those are the customizations that we've

00:14:55,280 --> 00:15:01,670
layer layered on top of the OSS code so

00:14:59,330 --> 00:15:06,620
when it comes time to build the Netflix

00:15:01,670 --> 00:15:10,820
build we take the public modules we

00:15:06,620 --> 00:15:15,140
build those and we publish those to a to

00:15:10,820 --> 00:15:19,360
NPM so they're freely available via NPM

00:15:15,140 --> 00:15:19,360
package manager and in the NPM registry

00:15:19,390 --> 00:15:25,940
now currently we're only publishing a

00:15:22,820 --> 00:15:28,160
few of the modules in spinnaker as NPM

00:15:25,940 --> 00:15:30,360
packages and that's strictly based on

00:15:28,160 --> 00:15:33,810
the need that we've had so far

00:15:30,360 --> 00:15:37,290
Netflix pulls in a few specific NPM

00:15:33,810 --> 00:15:39,450
packages from these from the modules in

00:15:37,290 --> 00:15:43,230
deck to build our custom code but we

00:15:39,450 --> 00:15:47,220
don't use all of them however it would

00:15:43,230 --> 00:15:50,280
not be difficult to package the other

00:15:47,220 --> 00:15:53,910
modules into the NPM registry if that's

00:15:50,280 --> 00:15:56,370
something that your company needs so at

00:15:53,910 --> 00:15:58,230
the time where it comes to actually take

00:15:56,370 --> 00:16:03,000
these packages that we've built and

00:15:58,230 --> 00:16:05,700
published and create a overall package

00:16:03,000 --> 00:16:09,870
that Netflix actually deploys and uses

00:16:05,700 --> 00:16:13,230
our custom package we take these the the

00:16:09,870 --> 00:16:15,930
spinnaker packages that we've published

00:16:13,230 --> 00:16:18,060
we take our source code that has our

00:16:15,930 --> 00:16:20,030
customizations we build our source code

00:16:18,060 --> 00:16:23,570
and then finally we take these

00:16:20,030 --> 00:16:26,250
additional Netflix plugins which are

00:16:23,570 --> 00:16:27,630
those integrations that we talked about

00:16:26,250 --> 00:16:30,770
previously that may have come from

00:16:27,630 --> 00:16:33,150
another group with the Netflix and

00:16:30,770 --> 00:16:35,700
finally we combine them all into our

00:16:33,150 --> 00:16:46,410
Netflix custom bill and this is what we

00:16:35,700 --> 00:16:48,990
actually deploy out to AWS so let's see

00:16:46,410 --> 00:16:53,010
let's see what we have done here at

00:16:48,990 --> 00:16:57,350
Netflix in terms of customizing the UI

00:16:53,010 --> 00:16:57,350
and integrating other applications

00:16:58,430 --> 00:17:04,830
here's a screenshot of the Netflix

00:17:01,190 --> 00:17:06,120
spinnaker UI and you'll see there's a

00:17:04,830 --> 00:17:10,410
couple things that you might not be

00:17:06,120 --> 00:17:13,890
familiar with you can see the up in the

00:17:10,410 --> 00:17:16,500
header we've got a few extra tabs Help

00:17:13,890 --> 00:17:18,300
section availability etc we've got

00:17:16,500 --> 00:17:25,650
various other UI elements that are

00:17:18,300 --> 00:17:28,080
custom to Netflix actually can we go

00:17:25,650 --> 00:17:29,820
back to that let's go back in so this is

00:17:28,080 --> 00:17:31,830
a so this is an example this is actually

00:17:29,820 --> 00:17:34,470
relatively new spinnaker functionality

00:17:31,830 --> 00:17:36,560
if we wanted to we have a lot of

00:17:34,470 --> 00:17:38,850
requests from around the organization

00:17:36,560 --> 00:17:41,430
not just our organization but those

00:17:38,850 --> 00:17:42,330
elsewhere at Netflix to surface high

00:17:41,430 --> 00:17:46,110
level

00:17:42,330 --> 00:17:49,890
either cautionary notifications or sort

00:17:46,110 --> 00:17:52,320
of what we call notices in the UI and

00:17:49,890 --> 00:17:54,510
this is essentially people wanting to

00:17:52,320 --> 00:17:56,279
live leverage spinnaker leverage the

00:17:54,510 --> 00:18:00,720
eyes that are already being focused on

00:17:56,279 --> 00:18:03,419
these screens to sort of shout out or

00:18:00,720 --> 00:18:05,760
alert users to specific criteria that

00:18:03,419 --> 00:18:07,980
are going on with our applications so in

00:18:05,760 --> 00:18:11,070
this case actually if we go back one

00:18:07,980 --> 00:18:13,230
more you can see that up at the top next

00:18:11,070 --> 00:18:15,690
to load balancers that we have a this

00:18:13,230 --> 00:18:17,549
caution icon in this case what we've

00:18:15,690 --> 00:18:21,230
done here is this is an entry point into

00:18:17,549 --> 00:18:23,940
this alerts dialogue we have categorized

00:18:21,230 --> 00:18:25,500
categorized alerts based on and then

00:18:23,940 --> 00:18:27,149
they're sorted by criticality in this

00:18:25,500 --> 00:18:29,940
case we just have sort of our base level

00:18:27,149 --> 00:18:32,100
alert for a janitor on janitor monkey

00:18:29,940 --> 00:18:34,529
which is how we clean up old

00:18:32,100 --> 00:18:36,899
infrastructure objects but in this case

00:18:34,529 --> 00:18:39,570
this is a this is a back-end service

00:18:36,899 --> 00:18:42,659
that we are essentially elevating in the

00:18:39,570 --> 00:18:44,700
ill evading to the UI in the form of

00:18:42,659 --> 00:18:46,649
this alert in this case janitor monkey

00:18:44,700 --> 00:18:48,659
does and has the potential to remove

00:18:46,649 --> 00:18:51,299
things that aren't being used but it

00:18:48,659 --> 00:18:52,860
also it's designed to not remove a

00:18:51,299 --> 00:18:54,840
rather to remove things in our opinions

00:18:52,860 --> 00:18:57,510
but it does have the potential to remove

00:18:54,840 --> 00:18:59,760
may be disabled or things that people

00:18:57,510 --> 00:19:01,830
have in a holding pattern and so in this

00:18:59,760 --> 00:19:04,110
case we want to show that to the user in

00:19:01,830 --> 00:19:06,870
in which case they can opt out or

00:19:04,110 --> 00:19:09,899
prevent that that particular SG from

00:19:06,870 --> 00:19:11,940
being removed we also are looking at

00:19:09,899 --> 00:19:15,870
using this to sort of highlight security

00:19:11,940 --> 00:19:18,510
vulnerabilities dependency issues old

00:19:15,870 --> 00:19:20,909
builds I think there's a lot of

00:19:18,510 --> 00:19:27,690
potential uses for this or really

00:19:20,909 --> 00:19:31,519
excited about it so this this would be a

00:19:27,690 --> 00:19:34,350
mr. turtle pool integration here this

00:19:31,519 --> 00:19:36,510
one thing that we've added for our

00:19:34,350 --> 00:19:38,159
customers of spinnaker is this little

00:19:36,510 --> 00:19:39,840
help drop down here and this help drop

00:19:38,159 --> 00:19:42,480
down as a custom made customization to

00:19:39,840 --> 00:19:43,950
the header that provides easy access to

00:19:42,480 --> 00:19:47,309
some of the Netflix specific information

00:19:43,950 --> 00:19:50,250
or even not necess if ik just spinnaker

00:19:47,309 --> 00:19:53,130
documentation it also provides contact

00:19:50,250 --> 00:19:54,179
information this integration has a nice

00:19:53,130 --> 00:19:55,910
little feature where it will actually

00:19:54,179 --> 00:19:58,660
pop up a dialog

00:19:55,910 --> 00:20:02,570
the dialogue allows somebody to create a

00:19:58,660 --> 00:20:04,310
JIRA an issue and it gives us the

00:20:02,570 --> 00:20:06,080
context of the page that they that they

00:20:04,310 --> 00:20:08,800
created the issue from and it's very

00:20:06,080 --> 00:20:12,470
helpful nice easy way for somebody to

00:20:08,800 --> 00:20:15,710
enter issues that in the spinnaker team

00:20:12,470 --> 00:20:18,890
as has visibility into so we can fix it

00:20:15,710 --> 00:20:21,380
for them I think I think one of the cool

00:20:18,890 --> 00:20:22,580
things sorry Chris I mean one of the

00:20:21,380 --> 00:20:24,650
cool things about this is that

00:20:22,580 --> 00:20:26,270
especially when spinnaker was new this

00:20:24,650 --> 00:20:27,770
was one of the first sessions that we

00:20:26,270 --> 00:20:29,870
actually implemented I think that when

00:20:27,770 --> 00:20:31,250
we first rolled out spinnaker in order

00:20:29,870 --> 00:20:33,620
to sort of manage the change of

00:20:31,250 --> 00:20:36,590
expectations when we moved from Asgard

00:20:33,620 --> 00:20:38,240
to spinnaker really help people tweeze

00:20:36,590 --> 00:20:40,040
this for bugs weed this for a general

00:20:38,240 --> 00:20:42,350
feedback we use this for all sorts of

00:20:40,040 --> 00:20:44,150
things to really open up communication

00:20:42,350 --> 00:20:45,590
with our user base even if we couldn't

00:20:44,150 --> 00:20:47,840
necessarily be in the room with them and

00:20:45,590 --> 00:20:50,270
give them an outlet for a lot of the

00:20:47,840 --> 00:20:52,040
unexpected new features that they

00:20:50,270 --> 00:20:54,140
weren't quite used to at the time so

00:20:52,040 --> 00:20:56,450
really simple basically just two fields

00:20:54,140 --> 00:20:59,510
and the supporting supporting back-end

00:20:56,450 --> 00:21:01,760
for it but very very powerful and on

00:20:59,510 --> 00:21:04,820
that same line the link to talk to us on

00:21:01,760 --> 00:21:05,780
slack I think is helpful because it it

00:21:04,820 --> 00:21:14,630
gives us a direct line of communication

00:21:05,780 --> 00:21:17,960
with our users so Jeremy talked a bit

00:21:14,630 --> 00:21:22,730
about janitor monkey I would say janitor

00:21:17,960 --> 00:21:25,910
monkey is a was the first was the first

00:21:22,730 --> 00:21:29,030
level of a pool call it's very most

00:21:25,910 --> 00:21:31,190
basic integration the puddle the puddle

00:21:29,030 --> 00:21:32,630
this is a puddle integration and the

00:21:31,190 --> 00:21:34,100
thing that I really like about janitor

00:21:32,630 --> 00:21:37,460
monkey integration is that it is

00:21:34,100 --> 00:21:39,290
extremely useful it's it's very helpful

00:21:37,460 --> 00:21:40,700
to our users to get this information in

00:21:39,290 --> 00:21:43,520
front of them that hey you've got some

00:21:40,700 --> 00:21:46,430
you've got some resources in AWS that

00:21:43,520 --> 00:21:48,410
are scheduled to be deleted or cleaned

00:21:46,430 --> 00:21:50,780
up and you should probably know about

00:21:48,410 --> 00:21:54,920
that and or do something about it this

00:21:50,780 --> 00:21:57,080
integration is a is a puddle integration

00:21:54,920 --> 00:22:00,460
because it uses the public API is that

00:21:57,080 --> 00:22:03,170
are already available via spinnaker

00:22:00,460 --> 00:22:05,050
there's a end to this these are called

00:22:03,170 --> 00:22:07,730
entity tags and there's an entity tag

00:22:05,050 --> 00:22:09,650
endpoint that you can post information

00:22:07,730 --> 00:22:12,020
to and that information is then

00:22:09,650 --> 00:22:14,710
in front 50 and it's surfaced as these

00:22:12,020 --> 00:22:14,710
alerts and notifications

00:22:19,000 --> 00:22:25,280
here's another integration that's quite

00:22:21,560 --> 00:22:27,950
interesting this integration comes from

00:22:25,280 --> 00:22:30,710
a in what level would this be this would

00:22:27,950 --> 00:22:32,930
not be the abyss this would be a deeper

00:22:30,710 --> 00:22:36,740
image of the diving pool the diving pool

00:22:32,930 --> 00:22:39,820
thank you so kind of categorization and

00:22:36,740 --> 00:22:44,420
nomenclature is very important to design

00:22:39,820 --> 00:22:46,310
in a as as Andy mentioned not all of our

00:22:44,420 --> 00:22:50,780
all of our users of spinnaker are

00:22:46,310 --> 00:22:54,710
deploying to the cloud and he showed us

00:22:50,780 --> 00:22:58,610
the very large pipeline that was used by

00:22:54,710 --> 00:23:02,120
our our TV UI people to deploy the

00:22:58,610 --> 00:23:04,880
JavaScript app to the CDN this is

00:23:02,120 --> 00:23:06,620
another example of other people that

00:23:04,880 --> 00:23:10,490
were trying to serve using spinnaker who

00:23:06,620 --> 00:23:14,680
don't necessarily deploy anything to AWS

00:23:10,490 --> 00:23:18,950
or any cloud provider so this is this is

00:23:14,680 --> 00:23:20,900
an integration that allows library

00:23:18,950 --> 00:23:23,780
authors people who are maintaining

00:23:20,900 --> 00:23:26,180
libraries here at Netflix to use

00:23:23,780 --> 00:23:30,410
spinnaker for their orchestration and

00:23:26,180 --> 00:23:35,650
for any sort of any sort of behind the

00:23:30,410 --> 00:23:37,670
scenes the the gears and wheels of

00:23:35,650 --> 00:23:38,900
publishing a library they can use

00:23:37,670 --> 00:23:41,090
spinnaker for that but they don't

00:23:38,900 --> 00:23:42,980
actually have any clusters so the

00:23:41,090 --> 00:23:47,330
clusters tab doesn't mean anything to

00:23:42,980 --> 00:23:49,670
them however they do have requirements

00:23:47,330 --> 00:23:53,210
to understand how is my library being

00:23:49,670 --> 00:23:55,760
used how is my library lifecycle what is

00:23:53,210 --> 00:23:59,380
what is the last time that I've released

00:23:55,760 --> 00:24:01,970
and have I have I hated this library

00:23:59,380 --> 00:24:03,560
what I like to deprecate this library so

00:24:01,970 --> 00:24:05,420
this integration takes that

00:24:03,560 --> 00:24:08,150
functionality that comes from a team

00:24:05,420 --> 00:24:10,990
called Astrid and it plugs it into

00:24:08,150 --> 00:24:14,930
spinnaker maps and it plugs it in as a

00:24:10,990 --> 00:24:17,270
data source so it shows up as a as a

00:24:14,930 --> 00:24:18,650
top-level tab for their for their

00:24:17,270 --> 00:24:21,460
application which is actually a library

00:24:18,650 --> 00:24:24,380
it's not a real even application

00:24:21,460 --> 00:24:27,350
one of the this was an interesting

00:24:24,380 --> 00:24:29,510
example and then this process which we

00:24:27,350 --> 00:24:33,320
began working on with Archana here

00:24:29,510 --> 00:24:36,740
sitting in the front row basically was a

00:24:33,320 --> 00:24:39,470
very close partnership essentially we

00:24:36,740 --> 00:24:41,240
went back and forth and had numerous

00:24:39,470 --> 00:24:43,180
meetings saying okay this is great

00:24:41,240 --> 00:24:45,740
functionality but where should this live

00:24:43,180 --> 00:24:48,110
this is sort of an example of that you

00:24:45,740 --> 00:24:49,520
know one of the first talking point that

00:24:48,110 --> 00:24:51,290
we had about what's appropriate to put

00:24:49,520 --> 00:24:52,640
in spinnaker and what's not and we had

00:24:51,290 --> 00:24:54,440
some really good and really challenging

00:24:52,640 --> 00:24:56,660
conversations around does this make

00:24:54,440 --> 00:24:58,100
sense to be in a separate tool do people

00:24:56,660 --> 00:24:59,990
think of spinnaker for library

00:24:58,100 --> 00:25:01,130
management and eventually as we work

00:24:59,990 --> 00:25:03,320
through this concept and we talked

00:25:01,130 --> 00:25:04,850
through it we got to a place where we

00:25:03,320 --> 00:25:06,590
felt like it was an integrated integral

00:25:04,850 --> 00:25:08,420
part of the process and I think in line

00:25:06,590 --> 00:25:09,920
again with what Andy was saying this

00:25:08,420 --> 00:25:12,080
morning I think that really ties back to

00:25:09,920 --> 00:25:14,990
the idea of delivery not necessarily

00:25:12,080 --> 00:25:16,610
deployment so on this screen this screen

00:25:14,990 --> 00:25:18,320
was actually developed you can see that

00:25:16,610 --> 00:25:21,650
based on the new look and feel of

00:25:18,320 --> 00:25:23,480
spinnaker this screen matches and feels

00:25:21,650 --> 00:25:26,690
like spinnaker proper even though it's a

00:25:23,480 --> 00:25:30,740
new view with new functionality that's

00:25:26,690 --> 00:25:32,660
being displayed in a new way and but

00:25:30,740 --> 00:25:34,610
really feels like spinnaker native even

00:25:32,660 --> 00:25:38,420
though it was developed as a initially

00:25:34,610 --> 00:25:40,340
as a external external package and so I

00:25:38,420 --> 00:25:42,950
think that this is really becoming our

00:25:40,340 --> 00:25:45,500
case study on how effective it can be to

00:25:42,950 --> 00:25:48,560
create these sort of really tight

00:25:45,500 --> 00:25:51,800
integration points in Spanish and to

00:25:48,560 --> 00:25:54,470
talk about the partnership the way that

00:25:51,800 --> 00:25:57,530
the way that this integration was built

00:25:54,470 --> 00:26:00,350
was most of the work was done by the

00:25:57,530 --> 00:26:02,780
Astor team by Archana and by the people

00:26:00,350 --> 00:26:05,240
that work on the backend that that

00:26:02,780 --> 00:26:07,970
create the data that gets plugged into

00:26:05,240 --> 00:26:10,340
this UI and the spinnaker team we helped

00:26:07,970 --> 00:26:12,010
with just the integration points and I

00:26:10,340 --> 00:26:14,720
think that worked really well an

00:26:12,010 --> 00:26:17,390
interesting thing about this sort of a

00:26:14,720 --> 00:26:19,310
integration is that the data that this

00:26:17,390 --> 00:26:21,980
application fetches doesn't come through

00:26:19,310 --> 00:26:24,700
gate it doesn't come through the normal

00:26:21,980 --> 00:26:27,140
spinnaker back-end this actually goes

00:26:24,700 --> 00:26:30,050
out-of-band to fetch data directly from

00:26:27,140 --> 00:26:31,550
the backend that understands this

00:26:30,050 --> 00:26:33,880
information because spinnaker doesn't

00:26:31,550 --> 00:26:36,910
know about pepper

00:26:33,880 --> 00:26:39,070
for instance question yes can you have

00:26:36,910 --> 00:26:41,200
other pipeline pushing gaben to be a

00:26:39,070 --> 00:26:42,760
library for a different pipeline like

00:26:41,200 --> 00:26:44,320
you have that relationship is that what

00:26:42,760 --> 00:26:46,480
maybe this on this library management is

00:26:44,320 --> 00:26:48,670
be publishing certain pipelines there's

00:26:46,480 --> 00:26:51,550
all of the library management something

00:26:48,670 --> 00:26:53,200
that's coming outside you said the the

00:26:51,550 --> 00:26:55,120
library management is something that's

00:26:53,200 --> 00:26:57,730
mostly coming from outside we have a we

00:26:55,120 --> 00:26:59,820
have an entire system that's set up to

00:26:57,730 --> 00:27:01,030
track dependencies and to track

00:26:59,820 --> 00:27:03,670
deprecations

00:27:01,030 --> 00:27:06,400
but that's all outside of sight of

00:27:03,670 --> 00:27:07,050
Spinnaker's understanding does that

00:27:06,400 --> 00:27:11,500
answer your question

00:27:07,050 --> 00:27:15,100
thanks okay we can use pipelines to do

00:27:11,500 --> 00:27:16,330
things like publish versions but and

00:27:15,100 --> 00:27:18,970
that information will eventually make

00:27:16,330 --> 00:27:21,130
its way here to the library yes I think

00:27:18,970 --> 00:27:23,020
another piece of that was looking at to

00:27:21,130 --> 00:27:24,340
take that one step further what does it

00:27:23,020 --> 00:27:25,900
look like not only to publish the

00:27:24,340 --> 00:27:28,060
library but then in a lot of cases while

00:27:25,900 --> 00:27:30,280
the library owners want to essentially

00:27:28,060 --> 00:27:32,140
spin that up actually on a VM to test it

00:27:30,280 --> 00:27:34,240
make sure it's working with a with a

00:27:32,140 --> 00:27:35,260
sample app and so that's another place I

00:27:34,240 --> 00:27:37,150
think where the pipeline's can be

00:27:35,260 --> 00:27:41,580
extended this template the library

00:27:37,150 --> 00:27:45,360
deployment process delivery process

00:27:41,580 --> 00:27:45,360
let's take a look at another example

00:27:46,020 --> 00:27:52,570
this example is a new view called

00:27:49,480 --> 00:27:56,710
timelines view and timelines view

00:27:52,570 --> 00:28:01,450
essentially tracks the changing value of

00:27:56,710 --> 00:28:05,100
some value Jake it tracks value changing

00:28:01,450 --> 00:28:07,330
over time and displays it in a timeline

00:28:05,100 --> 00:28:09,580
so the interesting thing about this

00:28:07,330 --> 00:28:14,260
integration is this started from a

00:28:09,580 --> 00:28:17,710
desire from the same team that called

00:28:14,260 --> 00:28:20,800
cadmium that does our tvu is they wanted

00:28:17,710 --> 00:28:24,190
to be able to see how their deploys the

00:28:20,800 --> 00:28:25,840
s3 their deploys to the CDN have changed

00:28:24,190 --> 00:28:28,630
over time they want to be able to see

00:28:25,840 --> 00:28:31,120
things like roll backs and they want to

00:28:28,630 --> 00:28:33,160
see that visually and so another team at

00:28:31,120 --> 00:28:35,980
netflix came up with this product that's

00:28:33,160 --> 00:28:38,410
called 10-foot UI dashboard and the

00:28:35,980 --> 00:28:40,750
10-foot UI dashboard essentially shows

00:28:38,410 --> 00:28:43,200
them that information shows the deploys

00:28:40,750 --> 00:28:46,480
over time in a nice graphical format

00:28:43,200 --> 00:28:47,730
that is easy to understand and then

00:28:46,480 --> 00:28:52,440
there was some talk about

00:28:47,730 --> 00:28:54,539
well cadmium doesn't have clusters is

00:28:52,440 --> 00:28:57,240
there something that makes sense in

00:28:54,539 --> 00:28:59,519
place of clusters for some some teams

00:28:57,240 --> 00:29:01,470
that deploy to see ends and this is

00:28:59,519 --> 00:29:03,289
that's where the birth of this

00:29:01,470 --> 00:29:05,730
integration came from

00:29:03,289 --> 00:29:08,130
yeah they what you're actually looking

00:29:05,730 --> 00:29:09,929
at here so this is sort of this is an

00:29:08,130 --> 00:29:12,929
example of what it would look like with

00:29:09,929 --> 00:29:14,010
aSG's and Street employments but for

00:29:12,929 --> 00:29:15,960
their use case what they're actually

00:29:14,010 --> 00:29:18,299
doing is they're deploying JavaScript

00:29:15,960 --> 00:29:20,630
packages and as part of that they

00:29:18,299 --> 00:29:23,029
sometimes have multiple packages live

00:29:20,630 --> 00:29:25,830
simultaneously for different ad groups

00:29:23,029 --> 00:29:27,809
they will roll forward and roll back

00:29:25,830 --> 00:29:29,100
quite a bit and so for them and you can

00:29:27,809 --> 00:29:33,090
actually see this I think this this

00:29:29,100 --> 00:29:34,950
mock-up has uses a lot of some

00:29:33,090 --> 00:29:37,049
placeholder data information but it's

00:29:34,950 --> 00:29:38,730
not unusual for them to roll to a build

00:29:37,049 --> 00:29:40,470
and then roll to another build and then

00:29:38,730 --> 00:29:42,240
roll back and then we'll do a new build

00:29:40,470 --> 00:29:44,429
a completely different build all within

00:29:42,240 --> 00:29:46,559
a couple of days and so they really for

00:29:44,429 --> 00:29:49,260
them the initial sort of driver for this

00:29:46,559 --> 00:29:50,610
view was how can we see that very very

00:29:49,260 --> 00:29:51,809
quickly and then be able to dive into

00:29:50,610 --> 00:29:53,880
that information but you could

00:29:51,809 --> 00:29:55,500
potentially see this as as Chris said

00:29:53,880 --> 00:29:57,510
you could see this information being

00:29:55,500 --> 00:30:01,919
used for this visualization being used

00:29:57,510 --> 00:30:03,690
for builds actual you know actual VM

00:30:01,919 --> 00:30:06,659
deployments I think it would be really

00:30:03,690 --> 00:30:08,370
interesting and I think that we do see

00:30:06,659 --> 00:30:19,380
it may be going that way in the in the

00:30:08,370 --> 00:30:21,240
future yes exactly for the first or the

00:30:19,380 --> 00:30:22,409
top line and that you can see that they

00:30:21,240 --> 00:30:28,470
maybe tried that out and they're like

00:30:22,409 --> 00:30:29,730
whoa whoa whoa we got a and so this I

00:30:28,470 --> 00:30:32,279
think this is a really interesting

00:30:29,730 --> 00:30:34,440
example of an integration and how it how

00:30:32,279 --> 00:30:36,809
it changed over the life of that

00:30:34,440 --> 00:30:40,679
partnership because originally this was

00:30:36,809 --> 00:30:43,710
intended only to show deployed versions

00:30:40,679 --> 00:30:45,690
and roll backs for our TV UI team and

00:30:43,710 --> 00:30:48,389
then as we started getting into it we

00:30:45,690 --> 00:30:50,669
realized that there's a lot of

00:30:48,389 --> 00:30:52,590
opportunity to take this view that

00:30:50,669 --> 00:30:54,809
they've created and to use it for other

00:30:52,590 --> 00:30:57,539
things so we actually hooked it up to

00:30:54,809 --> 00:31:00,419
our eventing system at Netflix which is

00:30:57,539 --> 00:31:01,200
called Chronos so we can pretty much

00:31:00,419 --> 00:31:03,090
anything that

00:31:01,200 --> 00:31:04,919
captured as an event in our inventing

00:31:03,090 --> 00:31:20,760
system we can display as a timeline I

00:31:04,919 --> 00:31:23,750
think that's really really cool there's

00:31:20,760 --> 00:31:28,639
a common schema and we actually created

00:31:23,750 --> 00:31:28,639
but you don't have to follow the schema

00:31:32,570 --> 00:31:46,019
so this is this is a prototype of the

00:31:37,230 --> 00:32:02,490
configuration for that timeline it

00:31:46,019 --> 00:32:25,799
doesn't have to in order to really

00:32:02,490 --> 00:32:27,929
interesting my question is the question

00:32:25,799 --> 00:32:30,899
the question for the recording by

00:32:27,929 --> 00:32:32,669
recording the question was if I want to

00:32:30,899 --> 00:32:35,880
start integrating things that what's a

00:32:32,669 --> 00:32:39,380
good place to start I think the first

00:32:35,880 --> 00:32:41,250
good place to start would be to look at

00:32:39,380 --> 00:32:43,049
you're gonna have to create a custom

00:32:41,250 --> 00:32:46,559
build one way or another in order to do

00:32:43,049 --> 00:32:48,960
this customizations to the UI so I would

00:32:46,559 --> 00:32:53,010
start with trying to create a custom

00:32:48,960 --> 00:32:54,659
build of deck that uses the that you

00:32:53,010 --> 00:32:58,649
pulls in the pieces of the open source

00:32:54,659 --> 00:33:00,809
version that that you require and then

00:32:58,649 --> 00:33:05,250
from there I would start going with

00:33:00,809 --> 00:33:06,400
these integration points I would start

00:33:05,250 --> 00:33:11,250
here

00:33:06,400 --> 00:33:14,140
on the header' and having a custom

00:33:11,250 --> 00:33:17,500
header is as simple as adding this

00:33:14,140 --> 00:33:20,740
happens to be implemented in angular Jas

00:33:17,500 --> 00:33:24,100
so customizing this headers as simple as

00:33:20,740 --> 00:33:26,620
using your own template for the header

00:33:24,100 --> 00:33:29,950
there's a there's a bunch of key value

00:33:26,620 --> 00:33:32,080
pairs in a JavaScript file called

00:33:29,950 --> 00:33:35,290
overrides I forget exactly what it's

00:33:32,080 --> 00:33:37,270
called but customizing this template I

00:33:35,290 --> 00:33:40,000
think would be a good starting point and

00:33:37,270 --> 00:33:42,010
I think it offers some pretty

00:33:40,000 --> 00:33:44,050
significant wins for things that you

00:33:42,010 --> 00:33:45,910
know your company might find useful like

00:33:44,050 --> 00:33:47,320
we did with the Help section another

00:33:45,910 --> 00:33:49,600
another thing that you can actually see

00:33:47,320 --> 00:33:50,860
here is and we don't we don't have a

00:33:49,600 --> 00:33:51,940
demo of it but you can actually see in

00:33:50,860 --> 00:33:53,950
the upper right hand corner we have this

00:33:51,940 --> 00:33:57,100
availability block and that was

00:33:53,950 --> 00:33:59,830
essentially us surfacing metrics coming

00:33:57,100 --> 00:34:01,690
out of I remember the data source but

00:33:59,830 --> 00:34:03,700
essentially one of our data data

00:34:01,690 --> 00:34:06,520
analytics tools around service

00:34:03,700 --> 00:34:08,470
availability and we were able to see

00:34:06,520 --> 00:34:10,120
over time like what incidents happened

00:34:08,470 --> 00:34:12,040
and how that affected availability and

00:34:10,120 --> 00:34:13,360
that kind of thing but the visualization

00:34:12,040 --> 00:34:14,649
is very simple it's basically just a

00:34:13,360 --> 00:34:16,929
graph with some supplementary

00:34:14,649 --> 00:34:18,760
information as long as you know we just

00:34:16,929 --> 00:34:20,020
happen to have the data sources all

00:34:18,760 --> 00:34:21,370
ready to go so it was just a matter of

00:34:20,020 --> 00:34:32,980
figuring out a good way to parse it and

00:34:21,370 --> 00:34:35,530
then we elevated it in the UI the API as

00:34:32,980 --> 00:34:38,620
far as the these plugin APs

00:34:35,530 --> 00:34:41,370
I think that's a really good question

00:34:38,620 --> 00:34:43,659
it's been fairly stable up until now

00:34:41,370 --> 00:34:46,080
right now we're in a transitionary

00:34:43,659 --> 00:34:48,550
period with dec where we're moving from

00:34:46,080 --> 00:34:50,730
angularjs code base to a react code base

00:34:48,550 --> 00:34:54,790
and so that's gonna be the primary

00:34:50,730 --> 00:34:57,220
challenge however we do we we very

00:34:54,790 --> 00:34:58,960
highly valued backwards compatibility so

00:34:57,220 --> 00:35:02,200
I think that we'll be creating an

00:34:58,960 --> 00:35:05,200
adapter layer that allows either

00:35:02,200 --> 00:35:07,390
technology to be used as for

00:35:05,200 --> 00:35:13,000
customization at least that's my goal

00:35:07,390 --> 00:35:15,040
right now the customization it's uh it's

00:35:13,000 --> 00:35:18,940
basically angularjs templates for the

00:35:15,040 --> 00:35:21,460
most part so that I don't see that going

00:35:18,940 --> 00:35:23,900
away

00:35:21,460 --> 00:35:26,839
yeah what's the timeline on the switch

00:35:23,900 --> 00:35:29,690
to react what's the what's the timeline

00:35:26,839 --> 00:35:33,859
on the switch to react we are we're well

00:35:29,690 --> 00:35:37,520
on our way we have been living coding

00:35:33,859 --> 00:35:39,650
react components for about four or five

00:35:37,520 --> 00:35:42,920
months now and I think we've we've bit

00:35:39,650 --> 00:35:44,960
off the sizable chunk most of the UI

00:35:42,920 --> 00:35:47,240
that we work with on a day to day basis

00:35:44,960 --> 00:35:52,220
is now built using rax and that includes

00:35:47,240 --> 00:35:55,369
the clusters view pipelines view tasks I

00:35:52,220 --> 00:35:57,800
believe is still angularjs but most of

00:35:55,369 --> 00:36:02,030
the things that I visually see on my

00:35:57,800 --> 00:36:03,079
spinnaker UI is now react I think I

00:36:02,030 --> 00:36:05,900
think there's gonna be a long tail

00:36:03,079 --> 00:36:08,300
however I don't I don't think cutting

00:36:05,900 --> 00:36:10,510
the like I don't think that we'll be

00:36:08,300 --> 00:36:13,040
able to completely switch to react

00:36:10,510 --> 00:36:15,200
because of all the different cloud

00:36:13,040 --> 00:36:18,260
providers out there those will still

00:36:15,200 --> 00:36:29,930
need to be migrated as well and or will

00:36:18,260 --> 00:36:31,190
create an adapter layer perhaps the

00:36:29,930 --> 00:36:33,260
integrations that we've made what's

00:36:31,190 --> 00:36:35,599
gotten the most traction um the the

00:36:33,260 --> 00:36:45,890
small ones I think are really really

00:36:35,599 --> 00:36:47,960
useful um as an example so on on this

00:36:45,890 --> 00:36:57,170
screen we can see one of my favorite

00:36:47,960 --> 00:36:59,569
integrations and that would be when you

00:36:57,170 --> 00:37:03,280
click that it copies to your clipboard a

00:36:59,569 --> 00:37:07,960
command that will SSH into that instance

00:37:03,280 --> 00:37:10,400
through our SS we have like of this SSH

00:37:07,960 --> 00:37:13,069
bouncing thing that we do called the

00:37:10,400 --> 00:37:14,270
bastion and that will that will get you

00:37:13,069 --> 00:37:15,710
right to that instance I think that's

00:37:14,270 --> 00:37:18,290
really cool I think a lot of people like

00:37:15,710 --> 00:37:21,920
that I think people like the the help

00:37:18,290 --> 00:37:24,200
icon I think across our organization I

00:37:21,920 --> 00:37:25,579
think fast property integration is

00:37:24,200 --> 00:37:28,040
probably going to be one of the most

00:37:25,579 --> 00:37:30,200
highly used things because a lot of

00:37:28,040 --> 00:37:32,960
teams do use fast properties and now

00:37:30,200 --> 00:37:33,609
it's directly in spinnaker I think the

00:37:32,960 --> 00:37:36,150
and

00:37:33,609 --> 00:37:38,499
and also with some of these initiatives

00:37:36,150 --> 00:37:40,769
properties is a good example of this the

00:37:38,499 --> 00:37:44,499
ten-foot UI timeline that we looked at

00:37:40,769 --> 00:37:45,670
library management the library

00:37:44,499 --> 00:37:47,109
management to a certain extent I think

00:37:45,670 --> 00:37:49,239
webs and stuff to figure out there but

00:37:47,109 --> 00:37:50,829
for the most part the expectation is is

00:37:49,239 --> 00:37:54,579
that by integrating these into spinnaker

00:37:50,829 --> 00:37:58,239
as sort of first-class citizens the idea

00:37:54,579 --> 00:38:00,549
is that people will deprecated the

00:37:58,239 --> 00:38:03,880
majority of where that came from and so

00:38:00,549 --> 00:38:05,589
with the ten-foot UI the adoption of

00:38:03,880 --> 00:38:08,829
that I'm hoping will be everybody who

00:38:05,589 --> 00:38:10,839
used the old ten-foot UI because if we

00:38:08,829 --> 00:38:13,869
have to maintain two tools then that's

00:38:10,839 --> 00:38:15,369
not really an effective solution I think

00:38:13,869 --> 00:38:17,380
the best properties is another example

00:38:15,369 --> 00:38:19,720
of that we have another service in other

00:38:17,380 --> 00:38:22,720
UI in which people currently maintain

00:38:19,720 --> 00:38:27,400
and manage their best properties it's

00:38:22,720 --> 00:38:29,799
not very good so we would definitely

00:38:27,400 --> 00:38:34,140
like to migrate a hundred percent of the

00:38:29,799 --> 00:38:34,140
users of that console to to spanker

00:38:44,099 --> 00:38:51,549
partners that contribute to the UI yeah

00:38:48,059 --> 00:39:07,869
yeah we get a lot of help from Google

00:38:51,549 --> 00:39:09,640
primarily and open source if you

00:39:07,869 --> 00:39:12,099
recommend module that we should look at

00:39:09,640 --> 00:39:15,249
one thing started developing into these

00:39:12,099 --> 00:39:19,089
cooks the primary module would be core

00:39:15,249 --> 00:39:21,930
and it's deployed to NPM as at spinnaker

00:39:19,089 --> 00:39:21,930
slash core

00:39:27,080 --> 00:39:35,340
so at Netflix we we care most about like

00:39:31,740 --> 00:39:36,930
say Corran Amazon that's what we use and

00:39:35,340 --> 00:39:38,580
so that's what we're pulling in and then

00:39:36,930 --> 00:39:40,680
our other cloud provider titus we're

00:39:38,580 --> 00:39:48,540
pulling in from source code but

00:39:40,680 --> 00:39:50,250
definitely you need Spectre core we're

00:39:48,540 --> 00:39:52,170
gonna try anything maybe like the next

00:39:50,250 --> 00:39:55,020
couple of days just to get kind of like

00:39:52,170 --> 00:39:58,260
a starter template available for folks

00:39:55,020 --> 00:40:00,420
yes yeah you've got the same thing yeah

00:39:58,260 --> 00:40:06,600
so hopefully yeah within the next few

00:40:00,420 --> 00:40:07,680
days stay tuned and I think that because

00:40:06,600 --> 00:40:09,660
of the nature of a lot of these

00:40:07,680 --> 00:40:12,150
integrations and especially you there's

00:40:09,660 --> 00:40:14,460
a risk of having like really disparate

00:40:12,150 --> 00:40:17,430
UX especially when you're pulling an

00:40:14,460 --> 00:40:18,710
existing existing code I think that if

00:40:17,430 --> 00:40:21,330
you have questions going forward

00:40:18,710 --> 00:40:23,070
reaching out to Chris or myself we're

00:40:21,330 --> 00:40:25,050
pretty much out of time but reaching out

00:40:23,070 --> 00:40:27,210
to Chris on myself to maybe talk through

00:40:25,050 --> 00:40:29,010
maybe your use case I'm happy to

00:40:27,210 --> 00:40:30,210
definitely field any questions about hey

00:40:29,010 --> 00:40:32,790
you know I'm trying to build a view to

00:40:30,210 --> 00:40:34,230
do this thing but not so much from an

00:40:32,790 --> 00:40:36,000
implementation standpoint but from

00:40:34,230 --> 00:40:37,770
really creating I mean the benefit is

00:40:36,000 --> 00:40:39,210
this the benefit of it these

00:40:37,770 --> 00:40:42,780
integrations is creating a seamless

00:40:39,210 --> 00:40:44,520
experience and if if I can help with

00:40:42,780 --> 00:40:46,680
that sort of talk for anything with you

00:40:44,520 --> 00:40:48,540
I'm happy to do so so feel free to reach

00:40:46,680 --> 00:40:51,470
out to me I'm on the spanker slack

00:40:48,540 --> 00:40:56,640
Channel Swiper

00:40:51,470 --> 00:40:59,910
I believe I'm just Jeremy I was I was in

00:40:56,640 --> 00:41:01,920
I was in Jay Todd I could be tabletop

00:40:59,910 --> 00:41:03,090
I'll have to check on that it's one it's

00:41:01,920 --> 00:41:06,020
one of the two my last name is

00:41:03,090 --> 00:41:09,770
teittleman I should be easy easy to find

00:41:06,020 --> 00:41:12,510
any other questions before we finish up

00:41:09,770 --> 00:41:15,170
great thank you all so much and feel

00:41:12,510 --> 00:41:15,170

YouTube URL: https://www.youtube.com/watch?v=uqpbSugT9RA


