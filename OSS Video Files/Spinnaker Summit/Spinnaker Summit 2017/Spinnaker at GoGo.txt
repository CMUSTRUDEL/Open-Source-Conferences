Title: Spinnaker at GoGo
Publication date: 2017-09-24
Playlist: Spinnaker Summit 2017
Description: 
	ALEX KING, DOUG CAMPBELL, JOEL VASALLO, AND STEVE BASGALL, GOGO AIR

Gogo has embraced use of Spinnaker for deployments across its infrastructure over the past 18 months or so, sometimes in innovative ways. This session will be an overview of how we utilize Spinnaker, and dive into foremast, static content deployments, and lambda.

From Spinnaker Summit 2017
Captions: 
	00:00:00,770 --> 00:00:05,790
okay so I guess we should get started hi

00:00:03,510 --> 00:00:08,670
everyone I'm Alex king and a couple guys

00:00:05,790 --> 00:00:10,019
from their ops team at gogo pretty

00:00:08,670 --> 00:00:11,730
excited to be here and started talking

00:00:10,019 --> 00:00:15,509
about some of the things that we've been

00:00:11,730 --> 00:00:16,590
doing before we get into that we should

00:00:15,509 --> 00:00:18,420
break up with some of the things that

00:00:16,590 --> 00:00:20,490
are not covered in this presentation so

00:00:18,420 --> 00:00:22,529
we're not going to talk about how we got

00:00:20,490 --> 00:00:25,109
started you probably heard that story

00:00:22,529 --> 00:00:26,939
from other places but if you are looking

00:00:25,109 --> 00:00:29,510
at doing this stuff and you haven't yet

00:00:26,939 --> 00:00:32,070
then can't can't and we're enormous

00:00:29,510 --> 00:00:33,690
resource for us we're not gonna give a

00:00:32,070 --> 00:00:35,420
complete overview of all things that are

00:00:33,690 --> 00:00:37,770
infrastructure you can figure that now

00:00:35,420 --> 00:00:41,520
and we're not going to talk about how we

00:00:37,770 --> 00:00:42,930
deploy spinnaker but use bigger the

00:00:41,520 --> 00:00:47,550
things we are going to talk about is

00:00:42,930 --> 00:00:50,340
that primarily around the tooling that

00:00:47,550 --> 00:00:53,059
we've used to extend spinnaker called

00:00:50,340 --> 00:00:55,559
foremast and how we do deployments for

00:00:53,059 --> 00:00:57,390
interesting initiative ways but before

00:00:55,559 --> 00:01:01,469
we get into that I just do a quick

00:00:57,390 --> 00:01:04,379
overview so as far as spinnaker Go Go

00:01:01,469 --> 00:01:06,420
goes this is Pro y'all seen this slide

00:01:04,379 --> 00:01:09,869
but this is really where we were two

00:01:06,420 --> 00:01:12,140
years ago and to some lesser extent we

00:01:09,869 --> 00:01:15,360
still are in this base a little bit

00:01:12,140 --> 00:01:17,280
without legacy data center but we're

00:01:15,360 --> 00:01:20,400
getting a lot better so just to talk

00:01:17,280 --> 00:01:24,720
some more details about this hope you

00:01:20,400 --> 00:01:26,909
guys could read that yeah so we had just

00:01:24,720 --> 00:01:30,450
long lifting applications in the data

00:01:26,909 --> 00:01:32,189
center days to weeks to deploy we we

00:01:30,450 --> 00:01:34,860
didn't really have any good consistent

00:01:32,189 --> 00:01:39,000
testing methodology everything was just

00:01:34,860 --> 00:01:41,100
so slow and unreliable prove one of the

00:01:39,000 --> 00:01:44,130
gating factors in amongst all the other

00:01:41,100 --> 00:01:47,250
silos that we had was the change Control

00:01:44,130 --> 00:01:50,579
Board met twice a week so developers

00:01:47,250 --> 00:01:52,680
would realize they would take a lot of

00:01:50,579 --> 00:01:54,119
effort to get things changed you so

00:01:52,680 --> 00:01:57,090
they'd stack up a bunch of different

00:01:54,119 --> 00:02:00,210
changes to go into one big deployment

00:01:57,090 --> 00:02:03,500
push and then would have consequences in

00:02:00,210 --> 00:02:06,530
terms of how affected we could deploy

00:02:03,500 --> 00:02:09,569
reliable way so compare that with now

00:02:06,530 --> 00:02:10,929
lots of small spring through spring

00:02:09,569 --> 00:02:13,060
clamp micro services

00:02:10,929 --> 00:02:15,310
although within their Boppity we tend to

00:02:13,060 --> 00:02:18,219
use Python for most of our stuff

00:02:15,310 --> 00:02:19,000
the this just it's super fast like we

00:02:18,219 --> 00:02:20,950
can get

00:02:19,000 --> 00:02:25,269
typically we measure deployments in

00:02:20,950 --> 00:02:27,219
minutes we we do that because we pretty

00:02:25,269 --> 00:02:28,989
much force developers to use vinegar

00:02:27,219 --> 00:02:32,379
they not allowed to play any other way

00:02:28,989 --> 00:02:35,889
and of course there aren't any manual

00:02:32,379 --> 00:02:38,019
scripts or handwritten notes that the

00:02:35,889 --> 00:02:41,079
deployment processes go through it's all

00:02:38,019 --> 00:02:44,019
handled through the repo and of course

00:02:41,079 --> 00:02:47,439
we had a second data center where we did

00:02:44,019 --> 00:02:50,620
fell over every month or so but it's not

00:02:47,439 --> 00:02:53,590
the same as having multi ABC and multi

00:02:50,620 --> 00:02:58,629
regions like we get with AWS so within

00:02:53,590 --> 00:03:01,139
us call this is kind of an overview of

00:02:58,629 --> 00:03:05,139
where we where we were when we started

00:03:01,139 --> 00:03:09,129
specifically with regard to spinnaker so

00:03:05,139 --> 00:03:11,530
we made in the summer of 2015 where we

00:03:09,129 --> 00:03:13,569
sure what we're gonna do but we thought

00:03:11,530 --> 00:03:15,669
Asgard would be great so we got has got

00:03:13,569 --> 00:03:18,250
up and running and then within a couple

00:03:15,669 --> 00:03:19,720
months of that we actually got some

00:03:18,250 --> 00:03:21,430
developers onboard and they were pretty

00:03:19,720 --> 00:03:23,889
enthusiastic because they they don't

00:03:21,430 --> 00:03:26,400
like the idea is taking days to weeks ye

00:03:23,889 --> 00:03:32,229
but for some reason which is weird right

00:03:26,400 --> 00:03:35,709
but yeah then came out and we just cut

00:03:32,229 --> 00:03:38,430
out as fast as we could and one of the

00:03:35,709 --> 00:03:41,139
things that's this part of our scars was

00:03:38,430 --> 00:03:44,169
something called pious guard which is an

00:03:41,139 --> 00:03:47,229
API that we put together to make

00:03:44,169 --> 00:03:49,389
actually accessing a start and deploying

00:03:47,229 --> 00:03:53,409
through has got a lot easier which took

00:03:49,389 --> 00:03:55,870
a lot of reverse engineering then when

00:03:53,409 --> 00:03:58,479
we brought spinnaker out we had to do an

00:03:55,870 --> 00:04:01,169
equivalent for that and Circe where four

00:03:58,479 --> 00:04:03,639
masts came along we're sort of almost

00:04:01,169 --> 00:04:06,129
everything that we do is in the

00:04:03,639 --> 00:04:07,569
open-source version and you should go

00:04:06,129 --> 00:04:09,939
and try it out as we think it's really

00:04:07,569 --> 00:04:12,189
cool and then we saw build on our

00:04:09,939 --> 00:04:15,939
momentum so we put lander support in

00:04:12,189 --> 00:04:18,789
there we data pipeline s3 and so forth

00:04:15,939 --> 00:04:19,950
then probably in theory by then this

00:04:18,789 --> 00:04:22,200
year we should have everything

00:04:19,950 --> 00:04:25,560
the data center we can start talking

00:04:22,200 --> 00:04:27,960
about containers in style so this is

00:04:25,560 --> 00:04:29,610
just an idea of where we are and this is

00:04:27,960 --> 00:04:32,100
this is just an amazing site and it

00:04:29,610 --> 00:04:34,380
seems to just get better every month but

00:04:32,100 --> 00:04:36,030
the orange line is how many spinnaker

00:04:34,380 --> 00:04:38,850
deployments that we're doing to

00:04:36,030 --> 00:04:40,530
production and the blue line is how many

00:04:38,850 --> 00:04:45,210
deployments we're doing to the data

00:04:40,530 --> 00:04:47,880
center so we saw a slight increase as we

00:04:45,210 --> 00:04:51,900
were slicing those monolithic services

00:04:47,880 --> 00:04:53,940
up into pieces and and allowing us to

00:04:51,900 --> 00:04:56,010
pull bits out datacenter but that's I

00:04:53,940 --> 00:04:57,600
think on its total to find now the other

00:04:56,010 --> 00:04:59,160
things very interesting about this is

00:04:57,600 --> 00:05:03,000
those two load nightline's that you

00:04:59,160 --> 00:05:04,980
can't see very well how many outages we

00:05:03,000 --> 00:05:08,040
have due to deployments I think for

00:05:04,980 --> 00:05:10,980
spinnaker we've had maybe four in the

00:05:08,040 --> 00:05:13,080
history of forever over the last more

00:05:10,980 --> 00:05:15,360
than a year whereas typically for

00:05:13,080 --> 00:05:20,030
datacenter we were seeing two or three

00:05:15,360 --> 00:05:22,380
on average a month along this time I

00:05:20,030 --> 00:05:25,380
talked about production deployments this

00:05:22,380 --> 00:05:27,900
is for the month of July I think it was

00:05:25,380 --> 00:05:29,630
this is our total deployments so we're

00:05:27,900 --> 00:05:33,120
getting pretty close to peaking about

00:05:29,630 --> 00:05:35,910
250 a day and Jenkins seems to handle

00:05:33,120 --> 00:05:39,510
that pretty well and for most of the

00:05:35,910 --> 00:05:41,430
times the Spree reliable here's some

00:05:39,510 --> 00:05:44,190
other bigger numbers so about six

00:05:41,430 --> 00:05:46,080
hundred and thirty-four developers 270

00:05:44,190 --> 00:05:48,720
pipelines about three and a half

00:05:46,080 --> 00:05:51,060
thousand deploys a month which i think

00:05:48,720 --> 00:05:52,650
is works out to be about 120 is that

00:05:51,060 --> 00:05:54,870
what Netflix has maybe slightly less

00:05:52,650 --> 00:05:58,800
that and given how small we are we're

00:05:54,870 --> 00:06:02,300
pretty proud of that and the last couple

00:05:58,800 --> 00:06:06,540
are free funds so we've got about 950

00:06:02,300 --> 00:06:08,040
ec2 instances but also for which had not

00:06:06,540 --> 00:06:09,780
managed through spinnaker and probably

00:06:08,040 --> 00:06:11,460
the next couple months we've been out to

00:06:09,780 --> 00:06:13,530
get the total number of manually

00:06:11,460 --> 00:06:18,300
deployed ec2 instances down to zero

00:06:13,530 --> 00:06:20,700
which is real so just to wrap up this

00:06:18,300 --> 00:06:23,160
section our philosophy is driving

00:06:20,700 --> 00:06:25,920
towards DevOps so that means for us that

00:06:23,160 --> 00:06:27,960
developers run all their own stuff that

00:06:25,920 --> 00:06:30,090
they do their own deployments they look

00:06:27,960 --> 00:06:31,890
off there are metrics they do all the

00:06:30,090 --> 00:06:34,500
operations that they

00:06:31,890 --> 00:06:36,570
and so as we driving towards DevOps

00:06:34,500 --> 00:06:38,280
we're driving also towards NOx which

00:06:36,570 --> 00:06:41,700
means that we don't have an Operations

00:06:38,280 --> 00:06:47,570
team the in order to be successful at

00:06:41,700 --> 00:06:49,830
that we we've been very aware that

00:06:47,570 --> 00:06:53,610
operations has to be easy for developers

00:06:49,830 --> 00:06:55,740
so we want to make sure that we minimize

00:06:53,610 --> 00:06:57,390
the cognitive load on developers when

00:06:55,740 --> 00:06:59,610
they do their operational stuff so have

00:06:57,390 --> 00:07:02,010
to make it super super easy for them so

00:06:59,610 --> 00:07:05,070
we to do that we've brought on totaling

00:07:02,010 --> 00:07:08,130
initially like pious guards and then

00:07:05,070 --> 00:07:11,130
later foremast sliver configuration as

00:07:08,130 --> 00:07:14,880
code the idea behind that is one repo

00:07:11,130 --> 00:07:16,200
that has your application in it's got

00:07:14,880 --> 00:07:18,300
all the code for how to build the

00:07:16,200 --> 00:07:20,970
application and also how its deploying

00:07:18,300 --> 00:07:23,160
through different environments so with

00:07:20,970 --> 00:07:30,300
that I'll hand over to Doug to start

00:07:23,160 --> 00:07:31,860
cooking for must absentee on the team so

00:07:30,300 --> 00:07:35,370
for most ancient forests during the

00:07:31,860 --> 00:07:37,290
panel if you're there foremost is the

00:07:35,370 --> 00:07:39,180
backbone of our tooling for Spinnaker's

00:07:37,290 --> 00:07:41,460
it's how we use vinegar everything we do

00:07:39,180 --> 00:07:43,440
do spinnaker kind of goes do for mast I

00:07:41,460 --> 00:07:44,670
know going to like how force works and

00:07:43,440 --> 00:07:47,640
how we use it

00:07:44,670 --> 00:07:49,530
so forest is basically it's a few

00:07:47,640 --> 00:07:52,650
different things first it's pipelines is

00:07:49,530 --> 00:07:54,210
code it's similar to the declarative

00:07:52,650 --> 00:07:56,250
pipelines you know you get consistent

00:07:54,210 --> 00:07:59,280
repeatable source controlled pipelines

00:07:56,250 --> 00:08:00,240
we did formats when we first started

00:07:59,280 --> 00:08:03,750
spinnaker because this was a really hard

00:08:00,240 --> 00:08:05,420
requirement for us and declared a PI

00:08:03,750 --> 00:08:07,920
bonds or a while

00:08:05,420 --> 00:08:08,940
but for most was a bit more than that as

00:08:07,920 --> 00:08:10,560
well

00:08:08,940 --> 00:08:13,530
for most handles all of our AWS

00:08:10,560 --> 00:08:15,090
infrastructure for us so if they can

00:08:13,530 --> 00:08:16,140
create things to spec our uses measures

00:08:15,090 --> 00:08:16,860
so things like load balance from

00:08:16,140 --> 00:08:18,120
security groups

00:08:16,860 --> 00:08:20,430
it just makes calls off the spinnaker

00:08:18,120 --> 00:08:21,690
and creates those but it also gives a

00:08:20,430 --> 00:08:25,500
lot of resources for us the spinnaker

00:08:21,690 --> 00:08:28,980
doesn't handle like I am policies s3

00:08:25,500 --> 00:08:31,110
buckets plus a bunch of other bigger

00:08:28,980 --> 00:08:33,240
things like lambda and AWS data

00:08:31,110 --> 00:08:35,910
pipelines and it enables us to use these

00:08:33,240 --> 00:08:37,890
consistent for people pipelines that

00:08:35,910 --> 00:08:39,390
we've established for the company while

00:08:37,890 --> 00:08:42,340
applying it to other resources outside

00:08:39,390 --> 00:08:45,280
is like which is

00:08:42,340 --> 00:08:47,770
for developers it also helps us enforce

00:08:45,280 --> 00:08:50,040
naming conventions Navy commands are

00:08:47,770 --> 00:08:53,800
really important for the organization

00:08:50,040 --> 00:08:55,270
for things like auditing and cost

00:08:53,800 --> 00:08:57,640
management and budgeting and stuff like

00:08:55,270 --> 00:09:00,430
that so through spinach or a few formats

00:08:57,640 --> 00:09:01,810
we have a really customizable format

00:09:00,430 --> 00:09:03,430
section of our config that allows you to

00:09:01,810 --> 00:09:05,650
define naming conventions for any

00:09:03,430 --> 00:09:07,330
possible resource they gets managed that

00:09:05,650 --> 00:09:10,840
we can enforce this consistency across a

00:09:07,330 --> 00:09:11,920
horrible I'm it's open source we open

00:09:10,840 --> 00:09:17,200
sourced in maybe a year and a half ago

00:09:11,920 --> 00:09:18,430
and that's been super fun so why we

00:09:17,200 --> 00:09:21,160
created foremast

00:09:18,430 --> 00:09:23,140
we have turned in 70 some unique

00:09:21,160 --> 00:09:24,490
applications it's growing all the time

00:09:23,140 --> 00:09:25,720
and we thought it'd be unreasonable to

00:09:24,490 --> 00:09:26,620
expect her to the laboratory all these

00:09:25,720 --> 00:09:28,000
pipelines by hand

00:09:26,620 --> 00:09:31,450
especially with the level of consistency

00:09:28,000 --> 00:09:33,010
we wanted a typo in your security

00:09:31,450 --> 00:09:35,650
group's name and suddenly it's not gonna

00:09:33,010 --> 00:09:37,900
be applied properly and we also had some

00:09:35,650 --> 00:09:43,000
auditing requirements that had to have

00:09:37,900 --> 00:09:45,670
been included and each pipeline you know

00:09:43,000 --> 00:09:48,100
90 percent wraps are 90 percent the same

00:09:45,670 --> 00:09:49,540
you know they're all Java Spring boo up

00:09:48,100 --> 00:09:51,520
front behind Tomcat but there's all

00:09:49,540 --> 00:09:52,690
these unique little needs of things so

00:09:51,520 --> 00:09:55,390
we want to provide a very consistent

00:09:52,690 --> 00:09:57,270
pipeline while allowing for the

00:09:55,390 --> 00:09:59,290
uniqueness of each of these applications

00:09:57,270 --> 00:10:01,210
we also needed to be able to generate

00:09:59,290 --> 00:10:05,260
AWS infrastructure prior to the

00:10:01,210 --> 00:10:07,360
deployments this was important to us

00:10:05,260 --> 00:10:09,190
because we wanted the infrastructure to

00:10:07,360 --> 00:10:11,290
be almost as dynamic as the deployments

00:10:09,190 --> 00:10:13,210
we don't want just clean EOB and say now

00:10:11,290 --> 00:10:15,010
you're using this we wanted the

00:10:13,210 --> 00:10:16,510
developers to have control over their

00:10:15,010 --> 00:10:17,650
health checks and their ports and all

00:10:16,510 --> 00:10:19,480
these things on the OB and make sure

00:10:17,650 --> 00:10:21,580
that's generated before every deployment

00:10:19,480 --> 00:10:23,950
that you get your defined settings

00:10:21,580 --> 00:10:27,220
without meaning to come to us or coming

00:10:23,950 --> 00:10:29,170
to an ops team to do anything and then

00:10:27,220 --> 00:10:30,910
our audit and compliance we had things

00:10:29,170 --> 00:10:33,370
like all pipeline changes go through

00:10:30,910 --> 00:10:34,780
formats for us no developer has the

00:10:33,370 --> 00:10:36,820
ability to change a pipeline new and

00:10:34,780 --> 00:10:39,670
this way we can guarantee to our

00:10:36,820 --> 00:10:41,080
auditors that all our checks are still

00:10:39,670 --> 00:10:42,700
in there and no one can delete the audit

00:10:41,080 --> 00:10:46,320
tracks because they simply have to go

00:10:42,700 --> 00:10:49,930
through our tool so how farmers works

00:10:46,320 --> 00:10:51,640
foremast looks for a few Jason conveys

00:10:49,930 --> 00:10:53,440
we bundle these configs directly with

00:10:51,640 --> 00:10:54,819
the application so the develop the

00:10:53,440 --> 00:10:57,489
application developers have control

00:10:54,819 --> 00:10:59,229
these context the first ones up pipeline

00:10:57,489 --> 00:11:01,979
up json this configures pipeline wide

00:10:59,229 --> 00:11:04,479
settings like is chaos monkey enabled

00:11:01,979 --> 00:11:08,289
what accounts are you gonna deploy to

00:11:04,479 --> 00:11:09,699
what who owns notification stuff like

00:11:08,289 --> 00:11:11,979
that and then there's this application

00:11:09,699 --> 00:11:13,689
master environment json and you have one

00:11:11,979 --> 00:11:15,519
of these for every account or

00:11:13,689 --> 00:11:18,489
environment that you deploy to and it's

00:11:15,519 --> 00:11:21,609
account things like incidence counts and

00:11:18,489 --> 00:11:24,100
sizing load bounds are born security

00:11:21,609 --> 00:11:25,779
grooves a whole bunch of things so the

00:11:24,100 --> 00:11:27,189
developers have really full control over

00:11:25,779 --> 00:11:29,439
their infrastructure at this point we

00:11:27,189 --> 00:11:31,509
set a lot of sane defaults so they can

00:11:29,439 --> 00:11:33,459
be pretty small configs but they also

00:11:31,509 --> 00:11:39,669
have the ability to really do what they

00:11:33,459 --> 00:11:41,079
need for their apps without four so for

00:11:39,669 --> 00:11:42,789
us takes these configs and it renders

00:11:41,079 --> 00:11:44,919
mantra ginger to jealous the ginger to

00:11:42,789 --> 00:11:46,899
ten boats are highly customized old for

00:11:44,919 --> 00:11:48,489
my ships with some base templates by the

00:11:46,899 --> 00:11:50,319
gogo we use our own like internal

00:11:48,489 --> 00:11:55,389
template so that we can go go specific

00:11:50,319 --> 00:11:58,059
logic so renders these templates post up

00:11:55,389 --> 00:11:59,799
to spec and you get your paper i go go

00:11:58,059 --> 00:12:02,799
we trigger this all off a career so you

00:11:59,799 --> 00:12:05,739
get hook so every application to get has

00:12:02,799 --> 00:12:08,350
this huck and when they make any change

00:12:05,739 --> 00:12:10,089
to these json configs when we push

00:12:08,350 --> 00:12:11,289
before accepting the push we're gonna

00:12:10,089 --> 00:12:13,419
run format so we're gonna generate the

00:12:11,289 --> 00:12:15,459
pipeline if that generation fails for

00:12:13,419 --> 00:12:18,279
any reason we can reject the push and

00:12:15,459 --> 00:12:21,159
like you know what's ever in gingka or i

00:12:18,279 --> 00:12:23,619
get at this point is the source part of

00:12:21,159 --> 00:12:26,019
the pipeline should look like and it

00:12:23,619 --> 00:12:27,759
supports x.509 for a gate authentication

00:12:26,019 --> 00:12:30,159
and we use sam on our front end but

00:12:27,759 --> 00:12:35,649
spenger and for well for masters really

00:12:30,159 --> 00:12:36,239
care about that so some examples of our

00:12:35,649 --> 00:12:38,499
configs

00:12:36,239 --> 00:12:40,359
this is the pipe I know JSON it's the

00:12:38,499 --> 00:12:41,889
smaller of the configs it can definitely

00:12:40,359 --> 00:12:43,959
cook spawn that's like we said we send a

00:12:41,889 --> 00:12:45,479
lot of sane defaults and if like they

00:12:43,959 --> 00:12:47,409
don't provide some of these things

00:12:45,479 --> 00:12:48,789
that's okay we'll you don't need false

00:12:47,409 --> 00:12:51,129
so this is where they set things like

00:12:48,789 --> 00:12:53,439
what beasts image to use your room

00:12:51,129 --> 00:12:55,239
volume size should be his chaos monkey

00:12:53,439 --> 00:12:58,449
enabled and what environment you have

00:12:55,239 --> 00:13:02,489
exceptions notifications stuff like that

00:12:58,449 --> 00:13:02,489
pipeline why application wide

00:13:07,110 --> 00:13:12,370
so this is the application master

00:13:10,329 --> 00:13:14,800
environment a sign one for each biome

00:13:12,370 --> 00:13:17,079
you deploy to and this sucks

00:13:14,800 --> 00:13:18,759
this is bigger again we set out the same

00:13:17,079 --> 00:13:21,279
defaults but there's way more settings

00:13:18,759 --> 00:13:22,870
women are even on this slide you can see

00:13:21,279 --> 00:13:25,060
things in this one where they consent

00:13:22,870 --> 00:13:27,100
health check types grace periods

00:13:25,060 --> 00:13:29,439
instance sizing instance counts on

00:13:27,100 --> 00:13:32,500
scaling policies open for its health

00:13:29,439 --> 00:13:34,209
checks a whole bunch of things this is

00:13:32,500 --> 00:13:35,670
also are things like lambda sure

00:13:34,209 --> 00:13:38,589
settings ago which we'll go over later

00:13:35,670 --> 00:13:42,600
this really gives the developers as much

00:13:38,589 --> 00:13:44,740
control as as they want over their apps

00:13:42,600 --> 00:13:45,910
yeah well allowing us to set same

00:13:44,740 --> 00:13:47,620
defaults which is the important part

00:13:45,910 --> 00:13:48,850
like I don't feel like the developers

00:13:47,620 --> 00:13:50,889
need to think about their health check

00:13:48,850 --> 00:13:53,500
grace periods like a new develop are

00:13:50,889 --> 00:13:54,819
like we can set up staying default they

00:13:53,500 --> 00:13:57,939
only have to concern themselves with it

00:13:54,819 --> 00:13:58,839
and ultimately they do and our

00:13:57,939 --> 00:14:02,560
developers need to find out pretty

00:13:58,839 --> 00:14:04,209
powerful like so then those are the

00:14:02,560 --> 00:14:05,829
configs at the developers control but

00:14:04,209 --> 00:14:07,389
then there's our templates our templates

00:14:05,829 --> 00:14:09,490
define how the pipeline is actually

00:14:07,389 --> 00:14:12,250
structured and we use Jinja - it's

00:14:09,490 --> 00:14:13,449
already Python and four months Lilly

00:14:12,250 --> 00:14:15,370
only cares about a couple of these

00:14:13,449 --> 00:14:17,740
templates it cares it like on the left

00:14:15,370 --> 00:14:19,540
is the wrapper template this is what

00:14:17,740 --> 00:14:20,949
form ice cares about and it just is a

00:14:19,540 --> 00:14:23,439
bunch of include statements a bit of

00:14:20,949 --> 00:14:25,269
logic to what other templates to include

00:14:23,439 --> 00:14:27,130
to build out your pipeline so this

00:14:25,269 --> 00:14:28,779
example you can see some like Goku this

00:14:27,130 --> 00:14:29,829
is where we inject gogo specific logic

00:14:28,779 --> 00:14:31,480
so we can keep out of the other source

00:14:29,829 --> 00:14:34,540
stuff so things like at the bottom

00:14:31,480 --> 00:14:36,610
there's an if data dashboard which would

00:14:34,540 --> 00:14:40,290
come out of I'm your application about

00:14:36,610 --> 00:14:43,569
JSON config that master environment

00:14:40,290 --> 00:14:45,759
include this stage and those stages that

00:14:43,569 --> 00:14:47,769
are broken up into smaller digestible

00:14:45,759 --> 00:14:51,040
chunks there on the right like that's

00:14:47,769 --> 00:14:53,860
just a king at stage that's used for

00:14:51,040 --> 00:14:56,939
auditing stuff and we fill that in with

00:14:53,860 --> 00:14:58,959
the settings from your pipelines but

00:14:56,939 --> 00:15:00,130
breaking them down like this with these

00:14:58,959 --> 00:15:02,829
includes allow us to have a lot of

00:15:00,130 --> 00:15:04,209
reusable stage chunks so we have a bunch

00:15:02,829 --> 00:15:05,980
of different pipeline types we support

00:15:04,209 --> 00:15:08,230
within the organization but things like

00:15:05,980 --> 00:15:09,670
all that approve all have to always be

00:15:08,230 --> 00:15:12,250
the same so we can just include this

00:15:09,670 --> 00:15:13,480
this stage into any of them with this

00:15:12,250 --> 00:15:16,199
wrapper and so we know we get

00:15:13,480 --> 00:15:16,199
consistency across

00:15:16,329 --> 00:15:22,489
you also can just use the raw Python

00:15:19,489 --> 00:15:25,040
JSON like that sage is just me going

00:15:22,489 --> 00:15:27,079
into the UI saying viewers JSON and

00:15:25,040 --> 00:15:28,129
copying out that stage chunk and filling

00:15:27,079 --> 00:15:29,959
it with some ginger stuff but if you

00:15:28,129 --> 00:15:31,999
don't even want to use the template you

00:15:29,959 --> 00:15:37,639
just put the raw Python JSON and now you

00:15:31,999 --> 00:15:38,929
at least have a reproducible pipeline so

00:15:37,639 --> 00:15:41,480
that's far as with some lessons we

00:15:38,929 --> 00:15:43,549
learned along the way especially around

00:15:41,480 --> 00:15:45,350
open source saying was we would have

00:15:43,549 --> 00:15:46,970
started developing it with open source

00:15:45,350 --> 00:15:48,049
of mine I first started we're under a

00:15:46,970 --> 00:15:49,669
time crunch we just wanted to get

00:15:48,049 --> 00:15:50,720
something that we could use but we

00:15:49,669 --> 00:15:52,160
realized a lot of people were facing

00:15:50,720 --> 00:15:54,859
some of our issues and we decided later

00:15:52,160 --> 00:15:56,179
on we wanted open source it scrubbing

00:15:54,859 --> 00:15:57,619
the commits of all of our sensitive data

00:15:56,179 --> 00:15:59,449
and stuff we had one exposed to the

00:15:57,619 --> 00:16:01,669
public that was a pain that took us days

00:15:59,449 --> 00:16:03,230
and to go through all of our commits you

00:16:01,669 --> 00:16:07,249
know extracting a company logic like the

00:16:03,230 --> 00:16:09,199
templates that was just like started

00:16:07,249 --> 00:16:10,339
saying this is awesome we were gonna

00:16:09,199 --> 00:16:11,629
want open source this and we sure with

00:16:10,339 --> 00:16:13,549
that in mind I think we would have say

00:16:11,629 --> 00:16:16,129
this quite a bit of time and maybe ended

00:16:13,549 --> 00:16:17,600
up with even a better product try to

00:16:16,129 --> 00:16:19,339
build it in the course vinegar first I

00:16:17,600 --> 00:16:20,899
think we all wish we would have like

00:16:19,339 --> 00:16:22,429
engaged with the spectrum the community

00:16:20,899 --> 00:16:24,049
earlier on with us so maybe it could be

00:16:22,429 --> 00:16:26,619
part of the course backer or at least

00:16:24,049 --> 00:16:28,970
get their feedback on what we're doing

00:16:26,619 --> 00:16:30,589
we initially gonna do this for one-time

00:16:28,970 --> 00:16:31,970
exchanges none of us knew grew in spring

00:16:30,589 --> 00:16:34,009
and we're all new to it and we just

00:16:31,970 --> 00:16:35,720
needed something but we haven't need to

00:16:34,009 --> 00:16:38,929
maybe try to build it into course panic

00:16:35,720 --> 00:16:40,220
rabbit better no internal forks we've

00:16:38,929 --> 00:16:43,100
been really hard about this and it's

00:16:40,220 --> 00:16:45,949
been really great we run the latest tag

00:16:43,100 --> 00:16:47,329
formats we downloaded from PI API we

00:16:45,949 --> 00:16:49,040
have absolutely no internal Fork of it

00:16:47,329 --> 00:16:50,929
and I think that helps keep the open

00:16:49,040 --> 00:16:53,149
source code really clean it it makes it

00:16:50,929 --> 00:16:55,129
it makes it so everything we have to

00:16:53,149 --> 00:16:56,179
really think about and don't know like a

00:16:55,129 --> 00:16:58,040
key features get in because we don't

00:16:56,179 --> 00:17:00,919
want to admit to the public we do have

00:16:58,040 --> 00:17:02,629
features and even without a large user

00:17:00,919 --> 00:17:03,919
based open source has been awesome I

00:17:02,629 --> 00:17:06,620
think there's a couple organizations

00:17:03,919 --> 00:17:08,419
that use formats outside of us but even

00:17:06,620 --> 00:17:10,240
if no one did it's of an awesome

00:17:08,419 --> 00:17:12,350
practice that's made our code better

00:17:10,240 --> 00:17:13,639
everything we now do is public and I

00:17:12,350 --> 00:17:15,980
think all the developers keep them in

00:17:13,639 --> 00:17:19,220
mind and wind up having more thorough

00:17:15,980 --> 00:17:21,270
code reviews better commence we think

00:17:19,220 --> 00:17:22,680
about the changes we're gonna put in

00:17:21,270 --> 00:17:26,130
as though they're gonna affect the large

00:17:22,680 --> 00:17:29,460
set of people and that makes it all so

00:17:26,130 --> 00:17:30,720
that's form yeah that's for mast Nevin

00:17:29,460 --> 00:17:32,790
pass off to Steve talked about how we

00:17:30,720 --> 00:17:40,260
utilize formats and other things too

00:17:32,790 --> 00:17:42,660
Landon applies so my name is Steve Vasco

00:17:40,260 --> 00:17:45,480
I'm a DevOps engineer at gogo

00:17:42,660 --> 00:17:48,680
I had a big part the whole team worked

00:17:45,480 --> 00:17:54,360
on lambda but I had a big part of it

00:17:48,680 --> 00:17:57,900
myself when we adopted AWS a go-go we

00:17:54,360 --> 00:17:59,430
had never really used it manually or we

00:17:57,900 --> 00:18:01,920
never used the delivery model other than

00:17:59,430 --> 00:18:04,410
kind of the Netflix cloud-based micro

00:18:01,920 --> 00:18:07,830
services delivery model so we didn't

00:18:04,410 --> 00:18:11,310
have set of developers who were already

00:18:07,830 --> 00:18:15,150
used to deploying lambda functions

00:18:11,310 --> 00:18:17,310
manually and configuring that through

00:18:15,150 --> 00:18:20,400
the UI and everything like that when we

00:18:17,310 --> 00:18:23,070
introduced AWS to our organization it

00:18:20,400 --> 00:18:24,720
was through a scar through spinnaker

00:18:23,070 --> 00:18:26,880
through some of the tooling or

00:18:24,720 --> 00:18:31,440
everything they do is based on bigot

00:18:26,880 --> 00:18:34,800
commit and we wanted to provide the same

00:18:31,440 --> 00:18:38,760
experience for those developers with

00:18:34,800 --> 00:18:40,260
with lambda functions the first lambda

00:18:38,760 --> 00:18:41,810
functions that we supported in the

00:18:40,260 --> 00:18:43,950
organization organization the

00:18:41,810 --> 00:18:47,340
configuration was done by hand by the

00:18:43,950 --> 00:18:48,780
DevOps team in the UI and we had some

00:18:47,340 --> 00:18:51,630
scripts and Jenkins that would upload

00:18:48,780 --> 00:18:54,360
the artifacts so developers could do

00:18:51,630 --> 00:18:56,460
their own promotion it became obvious

00:18:54,360 --> 00:18:58,020
that wasn't gonna scale very well as

00:18:56,460 --> 00:19:00,570
more and more people got excited about

00:18:58,020 --> 00:19:04,200
deploying land the functions so we we

00:19:00,570 --> 00:19:07,380
had to come up with another solution so

00:19:04,200 --> 00:19:10,620
at that time Lambda support was on the

00:19:07,380 --> 00:19:12,540
road map for spinnaker and we had to

00:19:10,620 --> 00:19:16,650
decide as an organization if we wanted

00:19:12,540 --> 00:19:18,840
to wait for spinnaker to incorporate it

00:19:16,650 --> 00:19:22,140
or if we wanted to take a stab at

00:19:18,840 --> 00:19:24,960
ourselves so initially we decided as a

00:19:22,140 --> 00:19:27,600
team to at least do some basic support

00:19:24,960 --> 00:19:30,360
and maybe not invest completely in it

00:19:27,600 --> 00:19:33,780
but see see where things lie after a

00:19:30,360 --> 00:19:34,070
little bit in hindsight for once I feel

00:19:33,780 --> 00:19:37,310
like

00:19:34,070 --> 00:19:39,620
decisions I don't know what the status

00:19:37,310 --> 00:19:41,360
is of lambda with spinnaker but you know

00:19:39,620 --> 00:19:43,040
I don't see it on the roadmap too much

00:19:41,360 --> 00:19:44,150
anymore and some of the things we've

00:19:43,040 --> 00:19:47,240
learned along the way are probably

00:19:44,150 --> 00:19:50,660
reasons reasons why you know I think

00:19:47,240 --> 00:19:52,580
that Titus probably meets that fixes

00:19:50,660 --> 00:19:56,390
requirement for kind of serverless

00:19:52,580 --> 00:19:58,120
applications that are triggered in some

00:19:56,390 --> 00:20:03,280
ways and seeing how they're the main

00:19:58,120 --> 00:20:05,710
developer of spinnaker support for AWS

00:20:03,280 --> 00:20:13,190
you know I don't see any other companies

00:20:05,710 --> 00:20:16,340
necessarily adding that so so we had a

00:20:13,190 --> 00:20:18,440
few goals starting out it was to present

00:20:16,340 --> 00:20:20,660
our developers with a consistent

00:20:18,440 --> 00:20:22,550
interface not just for viewing where

00:20:20,660 --> 00:20:24,890
they're landed deployments are at as far

00:20:22,550 --> 00:20:27,620
as like versions and environments and

00:20:24,890 --> 00:20:30,560
things like that but also consistent

00:20:27,620 --> 00:20:33,560
configuration interface as far as the

00:20:30,560 --> 00:20:35,930
JSON files that we used to configure our

00:20:33,560 --> 00:20:37,550
deployments for ec2 so we wanted to make

00:20:35,930 --> 00:20:40,520
it seamless we wanted to build on the

00:20:37,550 --> 00:20:43,310
knowledge that had already gained as far

00:20:40,520 --> 00:20:46,700
as deploying through ec2 in in foremast

00:20:43,310 --> 00:20:52,460
and make it a really simple process for

00:20:46,700 --> 00:20:54,380
them so so our team at this point we had

00:20:52,460 --> 00:20:56,030
created a few lambda functions ourselves

00:20:54,380 --> 00:20:59,690
a DevOps team obviously has some lambda

00:20:56,030 --> 00:21:01,820
infrastructure for for just to support

00:20:59,690 --> 00:21:03,440
our work so we knew a little bit about

00:21:01,820 --> 00:21:05,870
lambda but we were probably only about a

00:21:03,440 --> 00:21:09,710
month ahead of the developers at this

00:21:05,870 --> 00:21:11,990
point so it led us to thinking that

00:21:09,710 --> 00:21:16,580
lambda configuration must be simple

00:21:11,990 --> 00:21:18,590
right it's just a dip or a jar file

00:21:16,580 --> 00:21:20,840
which is a zip file and some basic

00:21:18,590 --> 00:21:25,250
settings like the function entry point

00:21:20,840 --> 00:21:29,210
for your lambda the runtime whether it's

00:21:25,250 --> 00:21:30,980
Java or Python etc and I am roll and

00:21:29,210 --> 00:21:33,980
then memory timeout settings and that's

00:21:30,980 --> 00:21:35,720
all there is right we realize this we

00:21:33,980 --> 00:21:38,540
went on there's a few more options to

00:21:35,720 --> 00:21:40,850
support they can be VPC aware which

00:21:38,540 --> 00:21:44,200
means the lambda runs internally in your

00:21:40,850 --> 00:21:47,200
BBC is that it was a public execution

00:21:44,200 --> 00:21:49,149
luckily and through no fault of our own

00:21:47,200 --> 00:21:51,580
we were able to reuse most of this

00:21:49,149 --> 00:21:54,100
networking stuff from the ec2 part of

00:21:51,580 --> 00:21:55,840
formats so it wasn't a huge deal we were

00:21:54,100 --> 00:21:59,139
just kind of applying it to two

00:21:55,840 --> 00:22:01,120
different resources I don't remember

00:21:59,139 --> 00:22:03,220
what the first trigger type we started

00:22:01,120 --> 00:22:04,690
off with was but you're like you know

00:22:03,220 --> 00:22:07,240
these triggers seem to follow the same

00:22:04,690 --> 00:22:10,630
pattern there's there's a triggers you

00:22:07,240 --> 00:22:12,340
know what's what's the big deal this is

00:22:10,630 --> 00:22:16,149
probably where we ran into the most

00:22:12,340 --> 00:22:18,279
trouble the policies for the land of

00:22:16,149 --> 00:22:20,860
policies are kind of separate from I am

00:22:18,279 --> 00:22:22,269
and they define like what you can what

00:22:20,860 --> 00:22:25,590
you can trigger what your lambda

00:22:22,269 --> 00:22:28,679
function has access to be triggered from

00:22:25,590 --> 00:22:31,299
there kind of internal in this one

00:22:28,679 --> 00:22:32,710
string that's hard to manipulate and

00:22:31,299 --> 00:22:34,899
they have their own statement IDs in

00:22:32,710 --> 00:22:36,639
there and you can't work with you can't

00:22:34,899 --> 00:22:38,350
work with policies individually you need

00:22:36,639 --> 00:22:41,769
to work with the whole set of policies

00:22:38,350 --> 00:22:44,110
at once so we definitely had some

00:22:41,769 --> 00:22:46,330
learning to do there at least on the

00:22:44,110 --> 00:22:48,429
lambda side it's pretty consistent as

00:22:46,330 --> 00:22:52,419
far as how you need to manipulate those

00:22:48,429 --> 00:22:54,370
and how you need to configure the lambda

00:22:52,419 --> 00:22:56,679
functions to be triggered by these

00:22:54,370 --> 00:22:58,990
external resources but then on the

00:22:56,679 --> 00:23:01,029
external resource side it's completely

00:22:58,990 --> 00:23:03,100
different every single trigger has a

00:23:01,029 --> 00:23:07,990
completely different configuration on

00:23:03,100 --> 00:23:10,450
the s3 side or on the SNS side and we

00:23:07,990 --> 00:23:12,519
were surprised to find that to say the

00:23:10,450 --> 00:23:15,960
least so we don't support every trigger

00:23:12,519 --> 00:23:18,880
type I'll get to the list in a minute

00:23:15,960 --> 00:23:21,490
but you know so that was a big stumbling

00:23:18,880 --> 00:23:22,899
block to it made us reduce the scope of

00:23:21,490 --> 00:23:24,220
the triggers we were gonna support to

00:23:22,899 --> 00:23:26,260
just what the business needed at the

00:23:24,220 --> 00:23:30,220
moment and then we add them as needed

00:23:26,260 --> 00:23:33,610
going forward the last part is it's it's

00:23:30,220 --> 00:23:35,710
a moving target it's constantly evolving

00:23:33,610 --> 00:23:39,340
AWS service with new triggers being

00:23:35,710 --> 00:23:41,950
added new runtimes being added in new

00:23:39,340 --> 00:23:45,720
features being added an example of that

00:23:41,950 --> 00:23:48,340
is when they had Python 3.5 support

00:23:45,720 --> 00:23:49,990
luckily on the land of configuration

00:23:48,340 --> 00:23:52,330
side there's just a string he just send

00:23:49,990 --> 00:23:55,179
a different string so there wasn't too

00:23:52,330 --> 00:23:57,279
much work needed to support that in

00:23:55,179 --> 00:23:58,659
formats but then on the build side we

00:23:57,279 --> 00:24:01,300
had to do some things to prepare

00:23:58,659 --> 00:24:02,980
artifacts for those new

00:24:01,300 --> 00:24:05,500
other examples of new features that came

00:24:02,980 --> 00:24:08,920
out were since we created this tooling

00:24:05,500 --> 00:24:10,660
for foremast environment variables were

00:24:08,920 --> 00:24:15,250
supported by lambda which is a great and

00:24:10,660 --> 00:24:17,320
powerful feature luckily that wasn't too

00:24:15,250 --> 00:24:18,580
hard to add we added it right away and

00:24:17,320 --> 00:24:22,240
we got a lot of a lot of benefit from

00:24:18,580 --> 00:24:23,950
that as new triggers come out too we

00:24:22,240 --> 00:24:26,050
evaluate them as an organization if we

00:24:23,950 --> 00:24:28,980
want to add those if there's going to be

00:24:26,050 --> 00:24:28,980
a use case for cosa

00:24:29,620 --> 00:24:33,630
so this is an example Doug talked

00:24:31,420 --> 00:24:36,280
earlier about the pipeline JSON this is

00:24:33,630 --> 00:24:37,990
the things that are consistent for your

00:24:36,280 --> 00:24:40,690
lambda function across all the

00:24:37,990 --> 00:24:43,179
environments you deploy to so you have

00:24:40,690 --> 00:24:44,860
some things in here like the handler the

00:24:43,179 --> 00:24:47,860
function entry point is always going to

00:24:44,860 --> 00:24:50,230
be the same the runtime is always going

00:24:47,860 --> 00:24:51,910
to be the same whether it's VPC aware or

00:24:50,230 --> 00:24:55,990
not these are kind of global settings

00:24:51,910 --> 00:24:59,530
for your lambda function the IM role did

00:24:55,990 --> 00:25:01,480
things like that so this is going to be

00:24:59,530 --> 00:25:05,770
across all environments things that are

00:25:01,480 --> 00:25:08,230
the same the application master you know

00:25:05,770 --> 00:25:10,480
there's dev stage prod this is going to

00:25:08,230 --> 00:25:13,840
have here things that vary between

00:25:10,480 --> 00:25:15,460
environments so endeavour stage you may

00:25:13,840 --> 00:25:18,420
want a different timeout or different

00:25:15,460 --> 00:25:21,040
memory size for your function and

00:25:18,420 --> 00:25:22,420
triggers you may think that yes you're

00:25:21,040 --> 00:25:24,390
going to have the same trigger type

00:25:22,420 --> 00:25:27,309
across all environments most likely

00:25:24,390 --> 00:25:29,350
whether it's an s3 like put object

00:25:27,309 --> 00:25:32,110
trigger and your function triggers off

00:25:29,350 --> 00:25:33,610
that however the the bucket is probably

00:25:32,110 --> 00:25:35,920
going to be different if you're in dev

00:25:33,610 --> 00:25:38,800
or stage of product so that's why the

00:25:35,920 --> 00:25:40,870
the trigger type is in the environment

00:25:38,800 --> 00:25:44,530
specific configuration and not the

00:25:40,870 --> 00:25:46,809
global configuration we also support you

00:25:44,530 --> 00:25:50,380
see that triggers is a list there so we

00:25:46,809 --> 00:25:51,970
support different types of triggers some

00:25:50,380 --> 00:25:54,700
functions for example with cloud watch

00:25:51,970 --> 00:25:57,040
event you can pass in JSON to the lambda

00:25:54,700 --> 00:25:58,870
function so you could have two triggers

00:25:57,040 --> 00:26:00,490
on two different timers passing and

00:25:58,870 --> 00:26:04,990
things to do two different things but

00:26:00,490 --> 00:26:08,560
with one function the trigger types we

00:26:04,990 --> 00:26:11,650
support our s3 cloud watch events which

00:26:08,560 --> 00:26:13,720
is a cron like trigger cloud watch logs

00:26:11,650 --> 00:26:16,330
which is based on

00:26:13,720 --> 00:26:20,610
a log group being written to been doing

00:26:16,330 --> 00:26:25,900
something with that SNS and API gateway

00:26:20,610 --> 00:26:28,480
for for all of these for S 3 and SNS and

00:26:25,900 --> 00:26:31,000
cloud watch logs we assume that resource

00:26:28,480 --> 00:26:32,950
already exists someone's made an s3

00:26:31,000 --> 00:26:35,290
bucket from some other application and

00:26:32,950 --> 00:26:37,180
then or some other purpose and your

00:26:35,290 --> 00:26:39,820
lambda function is just triggering off

00:26:37,180 --> 00:26:43,000
that same thing for SNS so your

00:26:39,820 --> 00:26:46,150
application has a overall application is

00:26:43,000 --> 00:26:47,590
a topic somewhere and in this lambda

00:26:46,150 --> 00:26:50,200
function is part of that instead of just

00:26:47,590 --> 00:26:52,390
points to an existing SNS for cloud

00:26:50,200 --> 00:26:54,160
watch events an API gateway we actually

00:26:52,390 --> 00:26:56,980
create and manage that triggering

00:26:54,160 --> 00:26:59,860
resource through formats as well so it

00:26:56,980 --> 00:27:01,900
allows you to configure for cloud watch

00:26:59,860 --> 00:27:04,270
events it's things like your your con

00:27:01,900 --> 00:27:06,430
definition how often it repeats break i

00:27:04,270 --> 00:27:08,170
Gateway we had to make it's such a big

00:27:06,430 --> 00:27:09,430
target it's such a big trigger and

00:27:08,170 --> 00:27:11,040
there's so many different ways to use it

00:27:09,430 --> 00:27:14,670
we had to make some assumptions about

00:27:11,040 --> 00:27:17,700
how people are going to use API gateway

00:27:14,670 --> 00:27:20,920
because that's a whole that's a whole

00:27:17,700 --> 00:27:25,300
huge configuration item itself API

00:27:20,920 --> 00:27:26,950
gateways is massive so here you can see

00:27:25,300 --> 00:27:29,230
what the basic pipeline looks like

00:27:26,950 --> 00:27:30,910
there's there's two stages there's an

00:27:29,230 --> 00:27:34,510
infrastructure set up stage and then

00:27:30,910 --> 00:27:35,590
deploy stage this pipeline deploys

00:27:34,510 --> 00:27:37,720
obviously the bill we count

00:27:35,590 --> 00:27:40,000
it's the spinnaker health check and

00:27:37,720 --> 00:27:42,480
something the dev ops team uses we're

00:27:40,000 --> 00:27:44,920
also one of the biggest customers of

00:27:42,480 --> 00:27:46,360
lambda support in formats so it's made

00:27:44,920 --> 00:27:48,400
our life a lot easier and you have to

00:27:46,360 --> 00:27:50,890
deploy a function to eight different

00:27:48,400 --> 00:27:52,390
accounts to different regions you can

00:27:50,890 --> 00:27:54,700
just kind of do it through spinnaker and

00:27:52,390 --> 00:27:57,220
click and click good and you don't have

00:27:54,700 --> 00:28:01,030
to manually run some job or copy/paste

00:27:57,220 --> 00:28:03,580
or anything like that it's worth noting

00:28:01,030 --> 00:28:06,340
the cluster view does not work there's

00:28:03,580 --> 00:28:07,990
no there's no clusters but if you look

00:28:06,340 --> 00:28:11,100
at the pipeline execution history you

00:28:07,990 --> 00:28:14,560
can see what version is in one account

00:28:11,100 --> 00:28:17,440
the the first step here it creates or

00:28:14,560 --> 00:28:19,840
updates any I Emeril needed creates or

00:28:17,440 --> 00:28:21,640
updates security groups if it's vbc

00:28:19,840 --> 00:28:24,280
aware associate them with the function

00:28:21,640 --> 00:28:27,010
it creates the lambda function itself on

00:28:24,280 --> 00:28:27,670
the first deployment and then it creates

00:28:27,010 --> 00:28:30,160
or updates

00:28:27,670 --> 00:28:32,320
triggers defined so you could change

00:28:30,160 --> 00:28:34,540
triggers and formats would wipe out all

00:28:32,320 --> 00:28:38,410
the old ones and put the new ones in is

00:28:34,540 --> 00:28:40,720
there changes the second here actually

00:28:38,410 --> 00:28:43,450
uploads the application artifact in this

00:28:40,720 --> 00:28:45,190
case it's always is in file lambda

00:28:43,450 --> 00:28:46,510
supports tar files too but they're just

00:28:45,190 --> 00:28:49,690
zip files there's not much difference

00:28:46,510 --> 00:28:53,140
there sets the function configuration

00:28:49,690 --> 00:28:55,840
like memory timeout entry point runtime

00:28:53,140 --> 00:29:00,520
role whether it's vcp aware environment

00:28:55,840 --> 00:29:02,710
variables things like that it's a little

00:29:00,520 --> 00:29:06,820
different than it's not an atomic

00:29:02,710 --> 00:29:09,820
deployment so the way we do it is in

00:29:06,820 --> 00:29:12,730
these two steps something could go wrong

00:29:09,820 --> 00:29:15,100
and it's not quite like ec2 or there's a

00:29:12,730 --> 00:29:16,960
nice health check and nothing happens

00:29:15,100 --> 00:29:19,270
until that health check is complete and

00:29:16,960 --> 00:29:21,970
you know the new the new cluster goes

00:29:19,270 --> 00:29:24,000
into service with lambda it's a little

00:29:21,970 --> 00:29:26,680
more you're just kind of shooting a gun

00:29:24,000 --> 00:29:30,040
that's the way it's implemented now you

00:29:26,680 --> 00:29:33,490
could use lambda qualifiers to actually

00:29:30,040 --> 00:29:34,990
kind of prepare deployment and verify

00:29:33,490 --> 00:29:37,000
that in a number of different ways

00:29:34,990 --> 00:29:39,010
before you flip the switch and that

00:29:37,000 --> 00:29:41,080
would ensure there's never like a half

00:29:39,010 --> 00:29:44,650
way half deployed or something goes

00:29:41,080 --> 00:29:47,470
wrong halfway through if that is enable

00:29:44,650 --> 00:29:50,200
it's something I'd like to do it'll make

00:29:47,470 --> 00:29:51,850
it work a lot better and you have more

00:29:50,200 --> 00:29:55,180
confidence in it

00:29:51,850 --> 00:29:57,820
so that's all I've got for lambda I'll

00:29:55,180 --> 00:29:59,790
be happy to take your questions and Joel

00:29:57,820 --> 00:30:06,670
here is going to talk about how we use

00:29:59,790 --> 00:30:10,090
formats to deploy static content s3 yeah

00:30:06,670 --> 00:30:11,710
hey guys thanks Steve so we had an

00:30:10,090 --> 00:30:13,510
interesting use case for static

00:30:11,710 --> 00:30:15,280
deployments of us three so this is

00:30:13,510 --> 00:30:16,840
static content but we've actually

00:30:15,280 --> 00:30:19,510
realized it's really powerful that you

00:30:16,840 --> 00:30:22,600
get you use it to deploy just generic

00:30:19,510 --> 00:30:24,490
files so touching on that why did we add

00:30:22,600 --> 00:30:28,180
this support so the first thing we

00:30:24,490 --> 00:30:30,760
wanted to solve is that there was a huge

00:30:28,180 --> 00:30:34,570
problem of inconsistent and unreliable

00:30:30,760 --> 00:30:36,850
us the uploads such that some team used

00:30:34,570 --> 00:30:39,010
their local laptop and some team use

00:30:36,850 --> 00:30:41,080
Jenkins and some team uses Raspberry Pi

00:30:39,010 --> 00:30:42,940
and it's just all over the place

00:30:41,080 --> 00:30:44,440
so we wanted to solve that because at

00:30:42,940 --> 00:30:46,600
the end of the day we saw a fundamental

00:30:44,440 --> 00:30:47,799
problem that there was this s3 guru on

00:30:46,600 --> 00:30:51,070
every team right trying to figure out

00:30:47,799 --> 00:30:52,929
how to do the pipeline the place we

00:30:51,070 --> 00:30:56,470
wanted to solve the issue of repeatable

00:30:52,929 --> 00:30:58,570
pipelines of s3 deployments so instead

00:30:56,470 --> 00:31:00,639
of solving the issue of how you get to

00:30:58,570 --> 00:31:00,999
that the package architect that gets the

00:31:00,639 --> 00:31:02,470
point

00:31:00,999 --> 00:31:06,580
we wanted to solve the problem of

00:31:02,470 --> 00:31:09,639
getting that package project out to the

00:31:06,580 --> 00:31:11,440
world the next thing is ultimately it

00:31:09,639 --> 00:31:14,409
was really visualizing these deployment

00:31:11,440 --> 00:31:16,059
flows again earlier on I mentioned that

00:31:14,409 --> 00:31:18,190
you know people were using their laptops

00:31:16,059 --> 00:31:19,929
it causes a fundamental problem of not

00:31:18,190 --> 00:31:21,519
knowing what just got released unless

00:31:19,929 --> 00:31:23,679
you're that engineer who push that code

00:31:21,519 --> 00:31:25,929
and somehow blast your team on slack or

00:31:23,679 --> 00:31:27,759
email whatever you did so we wanted a

00:31:25,929 --> 00:31:31,539
spinnaker does a really nice job of

00:31:27,759 --> 00:31:33,700
visualizing deployment flows the next

00:31:31,539 --> 00:31:35,139
thing is is a little bit into we wanted

00:31:33,700 --> 00:31:36,669
to prepare the future we're leveraging

00:31:35,139 --> 00:31:39,730
we're gonna be eventually leveraging a

00:31:36,669 --> 00:31:41,289
CDN for our content distribution so it's

00:31:39,730 --> 00:31:43,179
much easier when you deploy in a

00:31:41,289 --> 00:31:47,289
consistent fashion especially in

00:31:43,179 --> 00:31:49,450
patterns of of your UI or your static

00:31:47,289 --> 00:31:50,889
assets that makes reading a lot of the

00:31:49,450 --> 00:31:54,070
rewrite rules and everything needs to do

00:31:50,889 --> 00:31:55,690
to serve up that cache much easier every

00:31:54,070 --> 00:32:00,220
team you kind of pivot it a little bit

00:31:55,690 --> 00:32:02,950
better we wanted to add basic canary

00:32:00,220 --> 00:32:05,369
support and well touch on to that to

00:32:02,950 --> 00:32:09,070
show how we kind of leverage it at gogo

00:32:05,369 --> 00:32:10,960
I think the best thing is version

00:32:09,070 --> 00:32:15,369
controlling the s3 infrastructure and

00:32:10,960 --> 00:32:17,679
policy changes as we all know s3 has

00:32:15,369 --> 00:32:20,580
caused some issues in the past and in

00:32:17,679 --> 00:32:24,129
terms of being public or having more

00:32:20,580 --> 00:32:26,759
more lockdown or more open policies so

00:32:24,129 --> 00:32:29,559
this by doing this you can actually

00:32:26,759 --> 00:32:33,489
define your entire infrastructure for s3

00:32:29,559 --> 00:32:36,399
in a pipeline step and also all the

00:32:33,489 --> 00:32:38,559
policy associated to it and then finally

00:32:36,399 --> 00:32:41,559
uh batteries included from spinnaker

00:32:38,559 --> 00:32:43,989
formats we to add support to it wasn't

00:32:41,559 --> 00:32:45,460
much work why are we gonna help me write

00:32:43,989 --> 00:32:46,840
a whole UI around this why are we gonna

00:32:45,460 --> 00:32:50,249
we already have a deployment

00:32:46,840 --> 00:32:50,249
infrastructure let's just leverage it

00:32:51,900 --> 00:32:54,810
so just kind of run through real fast

00:32:53,670 --> 00:32:56,880
I didn't want touched on this too much

00:32:54,810 --> 00:32:58,140
but in terms of production packaging in

00:32:56,880 --> 00:33:00,210
terms of getting that deployable

00:32:58,140 --> 00:33:02,700
artifact for our UI teams specifically

00:33:00,210 --> 00:33:04,530
here is that we have UI developers they

00:33:02,700 --> 00:33:06,060
focus on just writing note packages they

00:33:04,530 --> 00:33:07,890
write them up to a public or private

00:33:06,060 --> 00:33:10,770
whatever needs to go to their NPM

00:33:07,890 --> 00:33:11,850
registry at the end of it those various

00:33:10,770 --> 00:33:13,350
packages that they write those

00:33:11,850 --> 00:33:14,730
components web components get pulled

00:33:13,350 --> 00:33:17,280
together and ultimately create this

00:33:14,730 --> 00:33:18,690
release package the the whole kitten

00:33:17,280 --> 00:33:21,150
caboodle everything that you want to see

00:33:18,690 --> 00:33:23,430
that the world wants to see at gogo we

00:33:21,150 --> 00:33:26,640
look for tar.gz I mean we change that to

00:33:23,430 --> 00:33:28,920
whatever you need to be so formats looks

00:33:26,640 --> 00:33:30,990
for these compressed artifacts or these

00:33:28,920 --> 00:33:32,610
artifacts in general at a specific path

00:33:30,990 --> 00:33:34,560
which is configurable you can say go to

00:33:32,610 --> 00:33:37,440
the disk folder go to the disk app web

00:33:34,560 --> 00:33:39,630
folder whatever you need to do and then

00:33:37,440 --> 00:33:41,160
the release packages are then taken from

00:33:39,630 --> 00:33:43,230
that folder that you just configured and

00:33:41,160 --> 00:33:46,080
place into the s3 bucket path at a

00:33:43,230 --> 00:33:47,550
static path again we do tar.gz so we

00:33:46,080 --> 00:33:48,810
have to uncompress it to actually

00:33:47,550 --> 00:33:53,700
service the world so people can actually

00:33:48,810 --> 00:33:55,260
see those wonderful javascript files so

00:33:53,700 --> 00:33:57,510
just kind of go and show the deployment

00:33:55,260 --> 00:34:00,090
pipeline here's how it kind of looks

00:33:57,510 --> 00:34:01,530
just a basic pipeline we have a

00:34:00,090 --> 00:34:02,760
checkpoint step at the beginning which

00:34:01,530 --> 00:34:06,510
does audit approval which we'll talk

00:34:02,760 --> 00:34:08,340
about later assume that all is good we

00:34:06,510 --> 00:34:10,110
go into the infrastructure step where

00:34:08,340 --> 00:34:11,130
your s3 buck is provision let's say this

00:34:10,110 --> 00:34:13,410
is the first time you run through it

00:34:11,130 --> 00:34:15,150
it'll create a new s3 bucket

00:34:13,410 --> 00:34:17,310
the next thing it'll do is it'll apply

00:34:15,150 --> 00:34:20,610
the s3 policy whatever you put in your

00:34:17,310 --> 00:34:22,770
repository it'll create a DNS record if

00:34:20,610 --> 00:34:23,940
it's website enabled it's not necessary

00:34:22,770 --> 00:34:25,320
what may be out there but it'll be

00:34:23,940 --> 00:34:27,810
something that's similar to the rest of

00:34:25,320 --> 00:34:31,830
the pipeline DNS records that we create

00:34:27,810 --> 00:34:33,780
and it'll create it at a specific path

00:34:31,830 --> 00:34:35,370
so for example this is build one it'll

00:34:33,780 --> 00:34:36,810
put build one it'll put all your static

00:34:35,370 --> 00:34:41,490
assets you have an index file some

00:34:36,810 --> 00:34:43,470
bundle file right the next step is is

00:34:41,490 --> 00:34:45,720
actually the point to canary so we take

00:34:43,470 --> 00:34:48,210
that code and put it into a canary label

00:34:45,720 --> 00:34:50,130
and we'll touch on that is that we

00:34:48,210 --> 00:34:52,400
didn't want to really have an

00:34:50,130 --> 00:34:56,100
opinionated way of doing UI deployments

00:34:52,400 --> 00:34:57,080
but our UIs and our canary releases are

00:34:56,100 --> 00:34:59,550
a little bit weird

00:34:57,080 --> 00:35:03,000
most people can canary and just say hey

00:34:59,550 --> 00:35:03,390
send 25% the problem is we our space we

00:35:03,000 --> 00:35:05,400
do

00:35:03,390 --> 00:35:07,079
aircraft so aircraft isn't always

00:35:05,400 --> 00:35:08,309
constant some aircraft may be pulled out

00:35:07,079 --> 00:35:11,069
of rotation for two weeks all right

00:35:08,309 --> 00:35:13,559
Canaries to be very inconsistent so by

00:35:11,069 --> 00:35:15,529
doing this we can have a pretty static

00:35:13,559 --> 00:35:17,760
way of then configuring some back-end

00:35:15,529 --> 00:35:19,920
load balancer or whether you use like a

00:35:17,760 --> 00:35:22,470
chat proxy engine access ELB and they'll

00:35:19,920 --> 00:35:24,150
be whatever and you just route it so

00:35:22,470 --> 00:35:25,410
basically you are basically in control

00:35:24,150 --> 00:35:29,730
of how you want to route this canary

00:35:25,410 --> 00:35:31,829
folder so at this point we're basically

00:35:29,730 --> 00:35:34,019
monitoring it saying hey this things are

00:35:31,829 --> 00:35:36,960
good yeah okay we're seeing that our

00:35:34,019 --> 00:35:38,880
traffic looks good and you finally get

00:35:36,960 --> 00:35:40,769
to the next canary the next step in the

00:35:38,880 --> 00:35:42,180
next check point where you say let's get

00:35:40,769 --> 00:35:44,579
this out to the world I want people to

00:35:42,180 --> 00:35:46,140
see this and then that's all it is is

00:35:44,579 --> 00:35:49,170
copying that canary folder over to

00:35:46,140 --> 00:35:51,599
latest and then finally the last thing

00:35:49,170 --> 00:35:54,299
we do is we test we alert and we tag all

00:35:51,599 --> 00:35:55,799
the things so we have a pretty heavy tag

00:35:54,299 --> 00:35:59,760
strategy such that we tag everything

00:35:55,799 --> 00:36:01,559
back to a git commit we test this is an

00:35:59,760 --> 00:36:02,880
integration test after the facts but you

00:36:01,559 --> 00:36:05,849
can interject it anywhere the pipeline

00:36:02,880 --> 00:36:07,859
and then ultimately uh we alert to audit

00:36:05,849 --> 00:36:09,029
stuff and whatever slack or whatever

00:36:07,859 --> 00:36:12,000
saying hey your pipeline is done it's

00:36:09,029 --> 00:36:14,039
out in the world I'm not gonna touch it

00:36:12,000 --> 00:36:15,720
to too much of this because Steve and

00:36:14,039 --> 00:36:17,130
Doug already kind of covered it but if

00:36:15,720 --> 00:36:18,690
you look at this is almost exactly the

00:36:17,130 --> 00:36:21,750
same pipeline all you did is just change

00:36:18,690 --> 00:36:25,890
the s3 the type to s3 and you pretty

00:36:21,750 --> 00:36:26,970
much have s3 access now this is where

00:36:25,890 --> 00:36:29,730
things get a little bit interesting

00:36:26,970 --> 00:36:31,049
because in per Reaper environment you

00:36:29,730 --> 00:36:32,700
may have different configurations for

00:36:31,049 --> 00:36:34,500
yesterday bucket maybe your dev bucket

00:36:32,700 --> 00:36:38,279
isn't wide open to the world what your

00:36:34,500 --> 00:36:41,549
production bucket is so things like the

00:36:38,279 --> 00:36:44,220
path that you're serving from the bucket

00:36:41,549 --> 00:36:46,319
ACL the bucket policy the nice thing

00:36:44,220 --> 00:36:48,269
about the bucket policy is that this is

00:36:46,319 --> 00:36:51,349
just literally the JSON that spit out

00:36:48,269 --> 00:36:54,000
from the policy generator from Amazon

00:36:51,349 --> 00:36:56,579
you can do the website enable flags say

00:36:54,000 --> 00:36:57,869
hey make this website enabled the one

00:36:56,579 --> 00:36:59,519
thing I wanted to touch down that it's

00:36:57,869 --> 00:37:01,440
not very explicit is that the shared

00:36:59,519 --> 00:37:04,230
bucket master true and what that means

00:37:01,440 --> 00:37:07,109
is that it's not uncommon for teams to

00:37:04,230 --> 00:37:09,630
have a bare repository that's just their

00:37:07,109 --> 00:37:10,529
spinach your their s3 infrastructure and

00:37:09,630 --> 00:37:14,009
by doing this

00:37:10,529 --> 00:37:16,680
teams can have a shared bucket master so

00:37:14,009 --> 00:37:19,470
you can deploy multiple UI assets to

00:37:16,680 --> 00:37:20,849
a single bucket at first this was nice

00:37:19,470 --> 00:37:23,390
because teens didn't have to maintain

00:37:20,849 --> 00:37:25,800
multiple buckets our service limits were

00:37:23,390 --> 00:37:27,960
really good because we had before we had

00:37:25,800 --> 00:37:30,540
one bucket per every little micro cert

00:37:27,960 --> 00:37:31,859
and little app but by this um it kind of

00:37:30,540 --> 00:37:33,180
a little bit of a side thing is that you

00:37:31,859 --> 00:37:34,380
can actually hand this off to a security

00:37:33,180 --> 00:37:37,170
team and I've seen I heard that a lot of

00:37:34,380 --> 00:37:38,670
people put the security team in charge

00:37:37,170 --> 00:37:40,800
of the s3 buckets so here they can

00:37:38,670 --> 00:37:42,510
maintain that we don't the developers

00:37:40,800 --> 00:37:44,430
own it I go go but that was an

00:37:42,510 --> 00:37:48,059
unintended side effects that we do

00:37:44,430 --> 00:37:50,099
realize until we got here so how does it

00:37:48,059 --> 00:37:52,859
look for the other apps that aren't

00:37:50,099 --> 00:37:54,119
Manton the s3 bucket it's just this stay

00:37:52,859 --> 00:37:55,710
where you wanted to play to you're done

00:37:54,119 --> 00:37:57,809
it'll put it in there I'll put it at the

00:37:55,710 --> 00:38:00,780
path and it'll start to sit up much easy

00:37:57,809 --> 00:38:04,619
it's like twelve lines so you could be

00:38:00,780 --> 00:38:06,630
shorter and with that being said I'm

00:38:04,619 --> 00:38:07,800
gonna talk to pass it over back to Doug

00:38:06,630 --> 00:38:12,059
so you could talk about those oddity

00:38:07,800 --> 00:38:13,559
steps yeah this is the last last thing

00:38:12,059 --> 00:38:23,849
we'll talk about that's how we handle

00:38:13,559 --> 00:38:25,980
our clients I so here are some of the

00:38:23,849 --> 00:38:28,020
requirements we had I go girl wear socks

00:38:25,980 --> 00:38:30,359
and PCI compliance I'm sure most of you

00:38:28,020 --> 00:38:35,030
follows other ones even much stricter

00:38:30,359 --> 00:38:36,200
one okay I don't have to go with the

00:38:35,030 --> 00:38:38,910
Asians

00:38:36,200 --> 00:38:40,589
yeah so for Sox some of the major things

00:38:38,910 --> 00:38:43,200
we call cost is one we needed searchable

00:38:40,589 --> 00:38:45,119
records in each deployment we needed to

00:38:43,200 --> 00:38:46,980
validate that a single developer cannot

00:38:45,119 --> 00:38:49,230
make a change and deploy that change to

00:38:46,980 --> 00:38:52,140
a prod or one of our compliance

00:38:49,230 --> 00:38:54,180
environments the members outside the

00:38:52,140 --> 00:38:57,540
application group you know Bob and HR

00:38:54,180 --> 00:39:01,710
cannot deploy an app to a compliance

00:38:57,540 --> 00:39:02,970
account no manual changes so this was a

00:39:01,710 --> 00:39:05,750
big one we went back and forth with our

00:39:02,970 --> 00:39:07,920
owners on is that they were concerned

00:39:05,750 --> 00:39:09,630
developers could go in and just remove

00:39:07,920 --> 00:39:12,049
the compliance stuff from the pipeline

00:39:09,630 --> 00:39:14,730
so that's things that we have formats

00:39:12,049 --> 00:39:17,089
all pipelines are locked in the UI all

00:39:14,730 --> 00:39:20,970
by been changed have to go through

00:39:17,089 --> 00:39:22,470
formats and from the team one of our

00:39:20,970 --> 00:39:23,970
cards is we just wanted to maintain our

00:39:22,470 --> 00:39:26,040
speed we don't want to no change board

00:39:23,970 --> 00:39:29,099
which orders kept asking for we didn't

00:39:26,040 --> 00:39:31,220
want to make any compromises really to

00:39:29,099 --> 00:39:33,690
get the

00:39:31,220 --> 00:39:34,920
so here's a couple ways we've salts on

00:39:33,690 --> 00:39:36,750
these problems so recording all

00:39:34,920 --> 00:39:39,090
deployments Mike you know there's two

00:39:36,750 --> 00:39:41,280
ways the first way we implemented was

00:39:39,090 --> 00:39:42,780
service now it's a ticketing system it

00:39:41,280 --> 00:39:46,440
matches our old legacy change board

00:39:42,780 --> 00:39:48,060
process except at the end of any

00:39:46,440 --> 00:39:50,340
production pipeline we created ticket

00:39:48,060 --> 00:39:51,840
automatically you know this matches

00:39:50,340 --> 00:39:54,840
legacy process it doesn't slow anything

00:39:51,840 --> 00:39:56,400
down is transparent to developers no one

00:39:54,840 --> 00:39:57,960
really cares we just create a ticket and

00:39:56,400 --> 00:40:01,440
some people look at them and somewhere

00:39:57,960 --> 00:40:03,770
are happy the other way we record them

00:40:01,440 --> 00:40:06,810
which i think is a much better way is

00:40:03,770 --> 00:40:07,890
what we call audit dB but essentially we

00:40:06,810 --> 00:40:09,330
use echo webhooks

00:40:07,890 --> 00:40:11,550
which if you've even seen that feature

00:40:09,330 --> 00:40:13,620
echo you can point to an endpoint and

00:40:11,550 --> 00:40:15,090
it'll send a whole bunch of pipeline

00:40:13,620 --> 00:40:18,120
information to that employee like every

00:40:15,090 --> 00:40:19,890
executing stage status of it pipeline a

00:40:18,120 --> 00:40:23,010
context stuff like that it'll send this

00:40:19,890 --> 00:40:24,360
endpoint so we send it to this app we

00:40:23,010 --> 00:40:26,070
wrote the app courses out important

00:40:24,360 --> 00:40:27,870
information from a deployment

00:40:26,070 --> 00:40:30,330
perspective and writes injured database

00:40:27,870 --> 00:40:32,490
it also stores the entire pipeline and

00:40:30,330 --> 00:40:33,960
execution so that way if owners come

00:40:32,490 --> 00:40:37,110
back and say I see this app was deployed

00:40:33,960 --> 00:40:38,760
to prod the state what happened here's

00:40:37,110 --> 00:40:41,970
the entire pipeline everything that

00:40:38,760 --> 00:40:45,030
happened and so this works really well

00:40:41,970 --> 00:40:46,500
so we can look up all deployments and we

00:40:45,030 --> 00:40:48,120
can use it to generate metrics we can

00:40:46,500 --> 00:40:48,960
use it to generate reports rotters and

00:40:48,120 --> 00:40:51,240
we just have a full history of

00:40:48,960 --> 00:40:53,370
everything that's happened there's a

00:40:51,240 --> 00:40:55,020
little snippet of our code or though

00:40:53,370 --> 00:40:56,310
some of the database this shows like

00:40:55,020 --> 00:40:58,470
this app was deployed to this

00:40:56,310 --> 00:41:02,630
environment but this approver what this

00:40:58,470 --> 00:41:05,190
gate commit and gives us good reports

00:41:02,630 --> 00:41:09,210
and the other big one was to developers

00:41:05,190 --> 00:41:11,460
/ change the socks always required that

00:41:09,210 --> 00:41:12,570
the person that made a change could not

00:41:11,460 --> 00:41:15,870
be the same person that deployed the

00:41:12,570 --> 00:41:18,990
change deprived and so we handle this

00:41:15,870 --> 00:41:20,790
through a a combination of the manual

00:41:18,990 --> 00:41:22,640
judgment stage and an auditing stage

00:41:20,790 --> 00:41:26,160
that stage is really just a Jenkins job

00:41:22,640 --> 00:41:27,600
so the person who clicks the continue

00:41:26,160 --> 00:41:29,670
button in our manual judgment stage

00:41:27,600 --> 00:41:32,040
cannot be the same person that made the

00:41:29,670 --> 00:41:33,840
commit that is being deployed if it is

00:41:32,040 --> 00:41:35,880
audit approval will fail and it will

00:41:33,840 --> 00:41:38,070
never do infrastructure set up or deploy

00:41:35,880 --> 00:41:40,020
production it'll just fail out it'll

00:41:38,070 --> 00:41:41,380
also send the slack message to the

00:41:40,020 --> 00:41:44,799
offender saying hey

00:41:41,380 --> 00:41:47,079
availabilities also the non approval you

00:41:44,799 --> 00:41:49,720
can enforce that like the person that

00:41:47,079 --> 00:41:51,009
clicked approve must be a master on the

00:41:49,720 --> 00:41:53,079
repository or must have certain

00:41:51,009 --> 00:41:54,279
permission levels within get get lab

00:41:53,079 --> 00:41:58,329
with what we must have certain

00:41:54,279 --> 00:42:00,970
permission levels to deploy and that way

00:41:58,329 --> 00:42:03,130
like maybe only the manager of each team

00:42:00,970 --> 00:42:05,109
has control over this but there's been

00:42:03,130 --> 00:42:06,759
cases where manager or team leaders said

00:42:05,109 --> 00:42:08,589
I want to be the one that says you be

00:42:06,759 --> 00:42:09,910
deployed Sox and you can have that

00:42:08,589 --> 00:42:11,650
ability give me the owner of the

00:42:09,910 --> 00:42:14,079
repository immune lockdown zone the

00:42:11,650 --> 00:42:15,999
owners can deploy to certify rights we

00:42:14,079 --> 00:42:17,619
don't put this restriction on stage or

00:42:15,999 --> 00:42:18,729
dev it all that's all the developer

00:42:17,619 --> 00:42:20,650
driba this is only for like our

00:42:18,729 --> 00:42:23,619
compliance environments which we have a

00:42:20,650 --> 00:42:25,599
couple of others are happy with this it

00:42:23,619 --> 00:42:27,519
proves tubular involved with the change

00:42:25,599 --> 00:42:30,519
the biggest thing was we had to prove

00:42:27,519 --> 00:42:32,410
that pipeline was locked down so no one

00:42:30,519 --> 00:42:33,940
can remove audit approval they can't

00:42:32,410 --> 00:42:37,119
bring it up like a lover can just click

00:42:33,940 --> 00:42:40,400
delete and bypass the whole thing for us

00:42:37,119 --> 00:42:43,499
consent we lock all pipelines in the UI

00:42:40,400 --> 00:42:43,499
[Music]

00:42:43,890 --> 00:42:52,960
this those are talk so on my first slide

00:42:50,259 --> 00:42:55,180
I say thanks to Canton and Dave's

00:42:52,960 --> 00:42:57,579
actually in the back there so state's

00:42:55,180 --> 00:42:59,710
awesome thank you all very much

00:42:57,579 --> 00:43:03,160
listening this is this is been more fun

00:42:59,710 --> 00:43:05,319
to do we have to take questions now also

00:43:03,160 --> 00:43:08,529
lunch is coming up so we're happy to

00:43:05,319 --> 00:43:10,509
meet with you guys later Joe also has a

00:43:08,529 --> 00:43:31,660
big pack of four masters just in case

00:43:10,509 --> 00:43:34,390
you're interested was terraformed to

00:43:31,660 --> 00:43:36,279
brought up and what was the deciding

00:43:34,390 --> 00:43:38,489
factor build them you're all and they're

00:43:36,279 --> 00:43:44,400
like plugging it into something terrible

00:43:38,489 --> 00:43:47,170
so we we rely that pretty pretty heavily

00:43:44,400 --> 00:43:49,059
thought about that at some point you can

00:43:47,170 --> 00:43:50,979
use like a tariff or module and have it

00:43:49,059 --> 00:43:54,470
ought to apply whether it's in a Jenkins

00:43:50,979 --> 00:43:56,840
job earning in a container somewhere

00:43:54,470 --> 00:44:00,859
but instead we want to do one with boat

00:43:56,840 --> 00:44:04,900
of three most of the format' stages are

00:44:00,859 --> 00:44:08,000
run from a go-go or run from a Jenkins

00:44:04,900 --> 00:44:10,280
job but they could be run from anywhere

00:44:08,000 --> 00:44:12,349
really it's kind of location agnostic

00:44:10,280 --> 00:44:14,000
it's also because spinnaker supports

00:44:12,349 --> 00:44:15,800
creating oddities burger can create

00:44:14,000 --> 00:44:18,230
secured and load balancers and we wanted

00:44:15,800 --> 00:44:20,180
to use the specter ABI for as much as

00:44:18,230 --> 00:44:21,200
possible that point we've already got

00:44:20,180 --> 00:44:22,580
there tooling around everything else

00:44:21,200 --> 00:44:24,109
that it was easy enough to make motor

00:44:22,580 --> 00:44:26,030
three calls for the things that's that's

00:44:24,109 --> 00:44:27,619
one I just wanted to touch on one last

00:44:26,030 --> 00:44:29,330
thing is that through the pipeline we

00:44:27,619 --> 00:44:30,770
created an application security group so

00:44:29,330 --> 00:44:32,780
the developers are in control of their

00:44:30,770 --> 00:44:33,710
applications in terms of what comes and

00:44:32,780 --> 00:44:36,890
what can go out of it

00:44:33,710 --> 00:44:41,030
we do do some generic terraform for like

00:44:36,890 --> 00:44:42,440
about VPN users all office users but if

00:44:41,030 --> 00:44:44,000
the developer does not want anyone the

00:44:42,440 --> 00:44:45,800
office to hit it they aren't control

00:44:44,000 --> 00:44:47,869
what apps could talk to it we allow

00:44:45,800 --> 00:44:49,460
cross account access as well love the

00:44:47,869 --> 00:44:51,170
feature that was recent release so you

00:44:49,460 --> 00:44:53,660
can say hey I want this app to talk to

00:44:51,170 --> 00:44:55,190
me a party and every developer has that

00:44:53,660 --> 00:44:56,210
it's just a matter of figuring out that

00:44:55,190 --> 00:44:57,980
names at that point you let them know

00:44:56,210 --> 00:45:00,880
network topology don't have no cider

00:44:57,980 --> 00:45:03,710
blocks is that the note I have things

00:45:00,880 --> 00:45:06,140
more comfortable manipulating the API

00:45:03,710 --> 00:45:07,599
directly through vote of three and two

00:45:06,140 --> 00:45:10,070
trying to figure out how to fit

00:45:07,599 --> 00:45:12,440
terraform in but you'd be like editing

00:45:10,070 --> 00:45:14,359
terraform files and saving those and

00:45:12,440 --> 00:45:15,380
applying it or using tariffs or modules

00:45:14,359 --> 00:45:17,630
or something like that

00:45:15,380 --> 00:45:20,990
this was more straightforward to us at

00:45:17,630 --> 00:45:23,990
the time yes so is it fair to say that

00:45:20,990 --> 00:45:26,690
you guys are creating some

00:45:23,990 --> 00:45:28,790
infrastructure this longer lives outside

00:45:26,690 --> 00:45:33,500
of formats and then the infrastructure

00:45:28,790 --> 00:45:35,800
that whose life cycle more closely ties

00:45:33,500 --> 00:45:38,420
with the app itself use for that so

00:45:35,800 --> 00:45:42,260
security groups or maybe things like I

00:45:38,420 --> 00:45:44,240
am use I roll yeah you know this because

00:45:42,260 --> 00:45:46,430
they live with the app the rest

00:45:44,240 --> 00:45:48,080
infrastructure he did another yeah we're

00:45:46,430 --> 00:45:49,490
doing like be pcs and stuff like that

00:45:48,080 --> 00:45:52,430
and terraform things are definitely like

00:45:49,490 --> 00:45:53,810
the context of an application and no we

00:45:52,430 --> 00:45:56,570
don't want our developers have control

00:45:53,810 --> 00:45:58,430
you know Diane but again we also created

00:45:56,570 --> 00:46:00,410
9 + profile per half of fall so

00:45:58,430 --> 00:46:02,060
developers have X - what that needs

00:46:00,410 --> 00:46:05,060
access to so they say things like a

00:46:02,060 --> 00:46:07,240
Texas does s3 bucket a Texas - that's an

00:46:05,060 --> 00:46:09,010
S so there's the

00:46:07,240 --> 00:46:10,000
in terms of what IMO's we do without

00:46:09,010 --> 00:46:11,530
sign doesn't say something like

00:46:10,000 --> 00:46:13,090
terraform and something that's more

00:46:11,530 --> 00:46:14,950
related so something that can change

00:46:13,090 --> 00:46:23,770
okay I'm mad about the feature to talk

00:46:14,950 --> 00:46:25,900
that's nice it's limited they can give

00:46:23,770 --> 00:46:28,540
them they can request access to a number

00:46:25,900 --> 00:46:30,820
of things to get like s3 right access

00:46:28,540 --> 00:46:34,090
the bucket has to be named in a way that

00:46:30,820 --> 00:46:35,800
matches their application so so things

00:46:34,090 --> 00:46:38,350
like that is kind of how we enforced it

00:46:35,800 --> 00:46:41,080
they can't write everyone when we first

00:46:38,350 --> 00:46:43,270
started a lot of our own infrastructure

00:46:41,080 --> 00:46:46,090
like Bastion hosts and things like that

00:46:43,270 --> 00:46:48,250
or deployed through terraform - but we

00:46:46,090 --> 00:46:51,970
were jealous like the dev teams got to

00:46:48,250 --> 00:46:54,280
just and we're like trying to do all

00:46:51,970 --> 00:46:56,260
this manual stuff so these days almost

00:46:54,280 --> 00:46:58,750
every week pipelined almost all of the

00:46:56,260 --> 00:47:00,130
DevOps services as well there's a few

00:46:58,750 --> 00:47:02,320
chicken and egg things where it's like

00:47:00,130 --> 00:47:04,450
more reluctant to deploy it with

00:47:02,320 --> 00:47:05,920
spinnaker but other than that everything

00:47:04,450 --> 00:47:08,700
goes through there so we can just click

00:47:05,920 --> 00:47:11,110
and go and drink and come back you know

00:47:08,700 --> 00:47:12,910
this is important like gum go back to

00:47:11,110 --> 00:47:14,950
the I am on policy serves like a black

00:47:12,910 --> 00:47:16,270
clothes like this perhaps respond let's

00:47:14,950 --> 00:47:18,850
divert or something else are you lost

00:47:16,270 --> 00:47:21,160
like no developer can you know grant

00:47:18,850 --> 00:47:25,390
some access to the blabbers link have

00:47:21,160 --> 00:47:28,450
access to all the account within a

00:47:25,390 --> 00:47:29,280
limited scope it can grant similarly

00:47:28,450 --> 00:47:31,540
named

00:47:29,280 --> 00:47:35,700
congrat access to similarly named

00:47:31,540 --> 00:47:38,470
resources for things like passing us s3

00:47:35,700 --> 00:47:39,580
what else is in that services block that

00:47:38,470 --> 00:47:42,490
will be long gone there's through my

00:47:39,580 --> 00:47:45,670
group yeah I'm ODB - yeah dynamo so it

00:47:42,490 --> 00:47:48,160
has to match the naming and give it you

00:47:45,670 --> 00:47:50,730
know if someone controls their get group

00:47:48,160 --> 00:47:53,350
and doesn't let other people create

00:47:50,730 --> 00:47:54,640
projects that aren't actually members of

00:47:53,350 --> 00:47:57,160
that group there's no way they can

00:47:54,640 --> 00:48:00,250
create an application with that naming

00:47:57,160 --> 00:48:05,770
pattern then so their buckets are staged

00:48:00,250 --> 00:48:08,830
okay so on the lambdas it is are those

00:48:05,770 --> 00:48:11,530
custom Orca stages unfortunately they're

00:48:08,830 --> 00:48:14,290
not there they're Jenkins Jenkins stages

00:48:11,530 --> 00:48:17,859
so we use bo2 three to construct and

00:48:14,290 --> 00:48:19,300
manipulate the lambda function in

00:48:17,859 --> 00:48:21,490
configuration

00:48:19,300 --> 00:48:23,950
webhooks the goal was in a stage yet

00:48:21,490 --> 00:48:25,630
when we started this effort otherwise

00:48:23,950 --> 00:48:28,600
I'd probably use that but looking at

00:48:25,630 --> 00:48:32,770
that now but yeah we were a little

00:48:28,600 --> 00:48:34,930
intimidated by the spinnaker codebase in

00:48:32,770 --> 00:48:38,350
general I would say just contributing to

00:48:34,930 --> 00:48:40,840
such a high profile project so there

00:48:38,350 --> 00:48:43,570
it's through its through we use it to a

00:48:40,840 --> 00:48:46,390
Jenkins stage it could be anywhere that

00:48:43,570 --> 00:48:50,020
that Python script can run right is is

00:48:46,390 --> 00:48:52,810
really where that can be run from so

00:48:50,020 --> 00:48:56,050
yeah it's kind of like a backdoor to the

00:48:52,810 --> 00:49:03,280
land the support in its bit occur Thank

00:48:56,050 --> 00:49:05,350
You supports the finish line so yeah

00:49:03,280 --> 00:49:06,580
we're gonna have to see we haven't been

00:49:05,350 --> 00:49:08,740
following that work too closely but

00:49:06,580 --> 00:49:10,990
we've been to the presentations about it

00:49:08,740 --> 00:49:13,030
here I think that there's probably some

00:49:10,990 --> 00:49:15,640
smart ways we can integrate our work

00:49:13,030 --> 00:49:18,340
with that and create something bigger

00:49:15,640 --> 00:49:20,350
than that either one you know using an

00:49:18,340 --> 00:49:26,410
amplifier for managed pipelines or

00:49:20,350 --> 00:49:28,480
something something like that TBD

00:49:26,410 --> 00:49:30,670
doesn't mean figure out exactly what

00:49:28,480 --> 00:49:33,130
we're gonna do there but it's cooled it

00:49:30,670 --> 00:49:35,619
obviously a bunch of the talks I've been

00:49:33,130 --> 00:49:37,720
to every company kind of maybe not to

00:49:35,619 --> 00:49:40,030
this extent but to some extent major on

00:49:37,720 --> 00:49:43,510
tooling to manage pipelines whether it's

00:49:40,030 --> 00:49:46,920
from you know front to convert

00:49:43,510 --> 00:49:50,619
kubernetes Manifesta pipelines or

00:49:46,920 --> 00:49:51,670
whatever so we'll have to see how those

00:49:50,619 --> 00:49:55,990
integrate though we're definitely

00:49:51,670 --> 00:50:03,160
immediately liked it like to do that yes

00:49:55,990 --> 00:50:07,560
sir we use Jenkins shared library I'm

00:50:03,160 --> 00:50:10,390
sorry I can't I can hear you Jenkins

00:50:07,560 --> 00:50:13,600
might heavily so I'm a bit interested in

00:50:10,390 --> 00:50:16,960
your experience but I wanted to know is

00:50:13,600 --> 00:50:21,100
how does parallelism and checkpoint down

00:50:16,960 --> 00:50:24,100
work because they've had some limiting

00:50:21,100 --> 00:50:26,200
cases in terms of what these are

00:50:24,100 --> 00:50:29,530
they be itself supports in those is

00:50:26,200 --> 00:50:31,750
especially around is you nobility we are

00:50:29,530 --> 00:50:34,020
doing any imaging inside labs this case

00:50:31,750 --> 00:50:34,020
actually

00:50:34,350 --> 00:50:43,690
in terms of like two steps kind of

00:50:36,640 --> 00:50:44,950
running it in parallel or something like

00:50:43,690 --> 00:50:46,810
there may be some concurrency issues

00:50:44,950 --> 00:50:48,040
like where you have a step that happens

00:50:46,810 --> 00:50:51,490
and then they're both happening at the

00:50:48,040 --> 00:50:53,860
same time yeah we tend to lock that a

00:50:51,490 --> 00:50:55,870
lot of those two just like a lot not

00:50:53,860 --> 00:50:57,610
execute concurrently especially on some

00:50:55,870 --> 00:50:59,740
of those jobs yeah I like got auditor

00:50:57,610 --> 00:51:01,780
approvals another one of them but yeah I

00:50:59,740 --> 00:51:10,720
think we love to talk about that more at

00:51:01,780 --> 00:51:15,180
lunch it sounds like everyone wants

00:51:10,720 --> 00:51:17,380
lunch yeah all right thank you everybody

00:51:15,180 --> 00:51:18,850
find us at lunch or maybe we'll do a

00:51:17,380 --> 00:51:22,380
breakout session later and he wants to

00:51:18,850 --> 00:51:22,380

YouTube URL: https://www.youtube.com/watch?v=dB5Xk7PUvUk


