Title: Managed Pipeline Templates
Publication date: 2017-09-24
Playlist: Spinnaker Summit 2017
Description: 
	KATRIEL TRAUM, WAZE

In this talk we'll discuss how the brand new pipeline templates were put to use in production at Waze. We'll discuss the benefits of pipeline templates and patterns we found useful, both in code reuse for pipelines, and using pipeline templates to implement multi-cloud/provider infrastructure as code.

From Spinnaker Summit 2017
Captions: 
	00:00:00,030 --> 00:00:07,080
okay guys so we're ready to start so

00:00:04,859 --> 00:00:09,059
we're using Rob's computer he's on call

00:00:07,080 --> 00:00:14,219
so we might have to stop in the middle

00:00:09,059 --> 00:00:17,100
there's any problems with Netflix so hi

00:00:14,219 --> 00:00:19,949
my name is Katherine I work for the ways

00:00:17,100 --> 00:00:25,019
infrastructure team were based in Tel

00:00:19,949 --> 00:00:27,480
Aviv so this presentation I'm presenting

00:00:25,019 --> 00:00:29,160
in just because I could be here the

00:00:27,480 --> 00:00:31,619
other two guys I work with me Ron and

00:00:29,160 --> 00:00:36,300
Tom I also worked on this presentation

00:00:31,619 --> 00:00:38,160
so credits do or credit to do so about

00:00:36,300 --> 00:00:40,770
ways just a little bit if you're not

00:00:38,160 --> 00:00:44,370
familiar with ways what we do is turn by

00:00:40,770 --> 00:00:46,399
turn navigation which means taking it

00:00:44,370 --> 00:00:49,590
from point A to point B we're mainly

00:00:46,399 --> 00:00:51,719
focused towards compete compete

00:00:49,590 --> 00:00:56,309
commuting daily commuting getting from

00:00:51,719 --> 00:00:59,579
work to home knowledge to work some

00:00:56,309 --> 00:01:01,829
stats we have about 80 million monthly

00:00:59,579 --> 00:01:06,140
active users which for us is people who

00:01:01,829 --> 00:01:10,110
drive more than five days a week we have

00:01:06,140 --> 00:01:13,290
we have more than well more than 100

00:01:10,110 --> 00:01:16,200
micro-services 500 pipelines and growing

00:01:13,290 --> 00:01:18,180
I think I care the number is right now

00:01:16,200 --> 00:01:23,220
probably even more well and when we

00:01:18,180 --> 00:01:26,400
speak and we use to to cloud providers

00:01:23,220 --> 00:01:28,350
both Amazon and DCP and I know if you're

00:01:26,400 --> 00:01:31,710
aware of it the way was was acquired by

00:01:28,350 --> 00:01:34,680
Google some four years ago so kind of

00:01:31,710 --> 00:01:36,659
makes sense for us other big things that

00:01:34,680 --> 00:01:40,939
we do or the carpool project if you're

00:01:36,659 --> 00:01:45,149
familiar with it which helps the pair

00:01:40,939 --> 00:01:47,310
drivers and just people want to get the

00:01:45,149 --> 00:01:49,200
work so we match someone who's going

00:01:47,310 --> 00:01:52,290
from the same say neighborhood

00:01:49,200 --> 00:01:54,390
neighborhood to the same workplace or

00:01:52,290 --> 00:01:56,399
work area or something like that which

00:01:54,390 --> 00:01:59,610
is something which has actually been

00:01:56,399 --> 00:02:02,700
opened here in the Bay Area another big

00:01:59,610 --> 00:02:05,159
thing we have is the CCP the connected

00:02:02,700 --> 00:02:09,619
citizen project which is a project where

00:02:05,159 --> 00:02:11,910
we team up with Mississippi's city's

00:02:09,619 --> 00:02:14,010
Department state of transportation stuff

00:02:11,910 --> 00:02:18,049
like that we share

00:02:14,010 --> 00:02:20,640
speed information with them accidents

00:02:18,049 --> 00:02:23,129
and other reports and they share with us

00:02:20,640 --> 00:02:25,530
road closures the the local police

00:02:23,129 --> 00:02:28,110
usually knows best when there's plan

00:02:25,530 --> 00:02:32,010
events and stuff like that we are so

00:02:28,110 --> 00:02:36,690
used for stuff like that's going on now

00:02:32,010 --> 00:02:38,610
with the Hurricanes so we use that local

00:02:36,690 --> 00:02:41,220
municipality can give us information

00:02:38,610 --> 00:02:44,010
about shelters and where to find gas and

00:02:41,220 --> 00:02:49,549
stuff like that we can relay that using

00:02:44,010 --> 00:02:49,549
Waze to our users so that's what we do

00:02:50,390 --> 00:02:59,220
so where we are where we were two years

00:02:56,700 --> 00:03:00,989
ago know where we are today this kind of

00:02:59,220 --> 00:03:04,140
sort of will help us affirm the problem

00:03:00,989 --> 00:03:05,760
that we were having two years ago maybe

00:03:04,140 --> 00:03:14,579
even three years ago we were mainly

00:03:05,760 --> 00:03:16,650
using big-ish services okay so a single

00:03:14,579 --> 00:03:20,099
processor will handle a lot of kinds of

00:03:16,650 --> 00:03:22,260
requests stuff like that and in terms of

00:03:20,099 --> 00:03:24,299
deployment velocity or upgrade the last

00:03:22,260 --> 00:03:27,569
ad or new feature the LA City it was

00:03:24,299 --> 00:03:29,549
kind of low because we were we the

00:03:27,569 --> 00:03:33,150
infrastructure team were only always

00:03:29,549 --> 00:03:35,669
man-in-the-middle the development team

00:03:33,150 --> 00:03:39,150
never had or didn't have the right tools

00:03:35,669 --> 00:03:41,069
for pushing out updates at production so

00:03:39,150 --> 00:03:43,970
we always had they won't open a bag for

00:03:41,069 --> 00:03:46,769
us and we'll take care of it sometimes

00:03:43,970 --> 00:03:48,810
sometimes the future for busier than

00:03:46,769 --> 00:03:50,970
tomorrow in a week whatever so as you

00:03:48,810 --> 00:03:53,700
can see we were kind of Amanda Mill we

00:03:50,970 --> 00:03:55,260
were slowing stuff down but we could

00:03:53,700 --> 00:03:58,519
live with it

00:03:55,260 --> 00:04:02,000
so and what happened about a year ago

00:03:58,519 --> 00:04:05,160
I'm intrapreneur developer decided that

00:04:02,000 --> 00:04:08,120
who he had to write all of new features

00:04:05,160 --> 00:04:09,329
so we decided instead of adding them to

00:04:08,120 --> 00:04:12,079
servers

00:04:09,329 --> 00:04:14,849
he'll just write them a new service you

00:04:12,079 --> 00:04:17,940
micro services so what he did was he

00:04:14,849 --> 00:04:20,070
took our entire default stack okay that

00:04:17,940 --> 00:04:22,950
did a persistency our IPC layer

00:04:20,070 --> 00:04:25,560
configuration everything and stack and

00:04:22,950 --> 00:04:27,110
put it all inside a single jar okay a

00:04:25,560 --> 00:04:31,000
single jar that meant that

00:04:27,110 --> 00:04:34,340
all you had to do is using use Gradle

00:04:31,000 --> 00:04:35,629
add that jars dependency and raise write

00:04:34,340 --> 00:04:37,580
your business logic and you're done

00:04:35,629 --> 00:04:39,080
everything else a few lines of

00:04:37,580 --> 00:04:41,620
configuration everything else was taking

00:04:39,080 --> 00:04:45,469
care for you so what happened there a

00:04:41,620 --> 00:04:47,479
matter of weeks or so we had 20 or 30

00:04:45,469 --> 00:04:52,460
micro services waiting for us the

00:04:47,479 --> 00:04:54,560
infrastructure team to be deployed so

00:04:52,460 --> 00:04:58,669
when we ended up with all kinds of new

00:04:54,560 --> 00:05:03,500
micro services made a few for example

00:04:58,669 --> 00:05:06,979
cars engagement pickup which is not much

00:05:03,500 --> 00:05:08,840
what you might be thinking so yeah we

00:05:06,979 --> 00:05:11,539
were kind of a bottleneck and this is

00:05:08,840 --> 00:05:16,659
just a recent example of how our system

00:05:11,539 --> 00:05:19,699
looks today okay so the the upper layer

00:05:16,659 --> 00:05:22,669
services okay all the services in our

00:05:19,699 --> 00:05:24,759
system each one could be thought of as a

00:05:22,669 --> 00:05:29,960
single server group okay

00:05:24,759 --> 00:05:31,370
the middle layer is the services they

00:05:29,960 --> 00:05:35,389
provide what we call we call them

00:05:31,370 --> 00:05:38,150
subjects okay in the lower layer our

00:05:35,389 --> 00:05:41,690
client so you can see how such a big

00:05:38,150 --> 00:05:46,270
system can get very hard to manage over

00:05:41,690 --> 00:05:46,270
time and very complex

00:05:46,900 --> 00:05:54,950
so the problem that we had we were

00:05:51,830 --> 00:06:00,080
having we had hundreds of spinnaker

00:05:54,950 --> 00:06:02,450
clusters like I said we were responsible

00:06:00,080 --> 00:06:04,580
for doing all the upgrades we usually

00:06:02,450 --> 00:06:06,440
did them in the ad hoc manner so

00:06:04,580 --> 00:06:08,930
developer would ask us upgrade we'll go

00:06:06,440 --> 00:06:11,780
to our upgrade utility we'll set the new

00:06:08,930 --> 00:06:13,100
version we'll go do an ad hoc loan away

00:06:11,780 --> 00:06:16,250
we'll monitor will see everything is

00:06:13,100 --> 00:06:21,470
okay and then move on to the next the

00:06:16,250 --> 00:06:23,900
next upgrade so obviously when when we

00:06:21,470 --> 00:06:25,360
started using spinnaker of one of the

00:06:23,900 --> 00:06:27,980
first things we started to implement

00:06:25,360 --> 00:06:30,500
those pipelines because I meant we can

00:06:27,980 --> 00:06:32,900
automate much of these things what I

00:06:30,500 --> 00:06:37,970
just specified the waiting the cloning

00:06:32,900 --> 00:06:41,060
everything so pretty fast we we built

00:06:37,970 --> 00:06:43,520
our perfect pipeline okay the one that

00:06:41,060 --> 00:06:47,510
did exactly what what we want and fit

00:06:43,520 --> 00:06:49,640
most of our applications so in that pipe

00:06:47,510 --> 00:06:51,710
on started to be copying oh we started

00:06:49,640 --> 00:06:54,410
to be copied over from application to

00:06:51,710 --> 00:06:56,270
application someone would deploy new

00:06:54,410 --> 00:06:58,820
application so he'd take that pipeline

00:06:56,270 --> 00:07:03,250
do some copy pasting renaming and in the

00:06:58,820 --> 00:07:05,510
JSON Python JSON and start working so

00:07:03,250 --> 00:07:07,580
but that poses a problem right there we

00:07:05,510 --> 00:07:10,310
if there's no code we use every change

00:07:07,580 --> 00:07:10,850
you want to make across all your

00:07:10,310 --> 00:07:17,120
pipelines

00:07:10,850 --> 00:07:19,160
is a lot of work and what happened that

00:07:17,120 --> 00:07:21,170
happening is that we didn't use pipeline

00:07:19,160 --> 00:07:23,300
as much as we wanted

00:07:21,170 --> 00:07:26,600
we'd have a few here a few there and

00:07:23,300 --> 00:07:28,370
then we'd wait for it because we still

00:07:26,600 --> 00:07:30,950
wanted to perfect that one because we

00:07:28,370 --> 00:07:32,510
still didn't want to copy it over

00:07:30,950 --> 00:07:37,370
because the application was already so

00:07:32,510 --> 00:07:39,260
you can see it ended up with us now

00:07:37,370 --> 00:07:41,360
using pipelines as much as we'd like so

00:07:39,260 --> 00:07:41,720
we've had a few but not as much as we'd

00:07:41,360 --> 00:07:45,940
like them

00:07:41,720 --> 00:07:49,100
automating the process was actually

00:07:45,940 --> 00:07:51,380
writing pipe and templates right it was

00:07:49,100 --> 00:07:54,200
something we weren't prepared to take on

00:07:51,380 --> 00:07:55,880
ourselves you have some external source

00:07:54,200 --> 00:07:57,680
of truth to configure the pipelines

00:07:55,880 --> 00:07:59,700
there was something that we weren't able

00:07:57,680 --> 00:08:04,320
to do

00:07:59,700 --> 00:08:10,570
so the solution just presented itself

00:08:04,320 --> 00:08:13,470
pipeline templates so we've been asking

00:08:10,570 --> 00:08:17,350
for this feature for a while now Google

00:08:13,470 --> 00:08:19,990
test and actually the lizard in the you

00:08:17,350 --> 00:08:21,580
are there's a copy staged a feature

00:08:19,990 --> 00:08:23,350
where you external pipeline we can copy

00:08:21,580 --> 00:08:25,930
stages from other places that's actually

00:08:23,350 --> 00:08:29,380
future requests that we made Thank You

00:08:25,930 --> 00:08:30,520
Daniel you're here but that wasn't

00:08:29,380 --> 00:08:33,760
really enough

00:08:30,520 --> 00:08:36,640
we still had to manually assemble a

00:08:33,760 --> 00:08:39,070
pipeline we still had to either manual

00:08:36,640 --> 00:08:43,210
assemble or copy paste rename which was

00:08:39,070 --> 00:08:45,550
never a good way to work so enter PI

00:08:43,210 --> 00:08:47,200
manage pipeline templates which is was

00:08:45,550 --> 00:08:52,780
which is where exactly what we were

00:08:47,200 --> 00:08:54,700
looking for will that gives us so

00:08:52,780 --> 00:08:58,000
whether that gives us is a few things

00:08:54,700 --> 00:09:00,250
first of all pipelines are checked and

00:08:58,000 --> 00:09:02,770
code and get okay so there's an audit

00:09:00,250 --> 00:09:03,810
trail there's a review process for any

00:09:02,770 --> 00:09:07,630
change you want to make any

00:09:03,810 --> 00:09:10,780
infrastructure it's easily easily shared

00:09:07,630 --> 00:09:12,940
between other team members developers

00:09:10,780 --> 00:09:15,940
it's something that's relatively easy to

00:09:12,940 --> 00:09:20,490
easy to grok okay to understand it's not

00:09:15,940 --> 00:09:24,580
our tool to know how to use already and

00:09:20,490 --> 00:09:26,830
for for actually what it implements is

00:09:24,580 --> 00:09:28,890
infrastructure is a call right so I'll

00:09:26,830 --> 00:09:32,080
have a server group that has min/max

00:09:28,890 --> 00:09:34,570
three instances in our instances and now

00:09:32,080 --> 00:09:36,850
I have for some reason I need up the max

00:09:34,570 --> 00:09:39,460
to 12 instances I have an audit I have a

00:09:36,850 --> 00:09:41,740
review I can ask a team member to check

00:09:39,460 --> 00:09:44,320
it out before I do any changes and just

00:09:41,740 --> 00:09:47,550
deploy them run the pipeline whatever

00:09:44,320 --> 00:09:49,600
changes I made are there so kind of

00:09:47,550 --> 00:09:51,010
infrastructure is our code what it

00:09:49,600 --> 00:09:52,660
really gave us which is what we're

00:09:51,010 --> 00:09:54,790
looking for is a pave work for

00:09:52,660 --> 00:09:57,420
developers so we daya fess the

00:09:54,790 --> 00:10:00,190
infrastructure team you can work on that

00:09:57,420 --> 00:10:02,520
golden pipeline and have it the way we

00:10:00,190 --> 00:10:07,780
want and then give it to the developers

00:10:02,520 --> 00:10:10,660
to reuse so most of our micro services

00:10:07,780 --> 00:10:12,190
I'd say 90 95 percent are all the same

00:10:10,660 --> 00:10:13,690
right

00:10:12,190 --> 00:10:16,209
the same application and uses the same

00:10:13,690 --> 00:10:18,220
kind of images use the same kinds of

00:10:16,209 --> 00:10:21,250
load balancers whatever so just reusing

00:10:18,220 --> 00:10:23,860
it man you 90 percent of the time it's

00:10:21,250 --> 00:10:26,529
fine for the five percent that remains

00:10:23,860 --> 00:10:29,920
so we do some manual alterations where

00:10:26,529 --> 00:10:36,819
we write one offs and we're good so

00:10:29,920 --> 00:10:40,269
that's where we are as we are today yeah

00:10:36,819 --> 00:10:43,779
so what are I find templates so pi PI

00:10:40,269 --> 00:10:45,879
templates are depleted pipelines are

00:10:43,779 --> 00:10:49,089
actually composed of two main parts the

00:10:45,879 --> 00:10:51,009
first one is the pipeline template okay

00:10:49,089 --> 00:10:53,139
which they can defines thing define

00:10:51,009 --> 00:10:56,430
things like stages variables

00:10:53,139 --> 00:10:58,959
configurations and stuff like that and

00:10:56,430 --> 00:11:01,480
has an inheritance model where I can

00:10:58,959 --> 00:11:04,240
define currently only a one-off

00:11:01,480 --> 00:11:06,250
inheritance I can't have multiple a

00:11:04,240 --> 00:11:15,100
template inherit multiple templates it

00:11:06,250 --> 00:11:18,490
has to be like single inheritance right

00:11:15,100 --> 00:11:20,589
so and and so you can define different

00:11:18,490 --> 00:11:22,480
stages and just stack them all together

00:11:20,589 --> 00:11:24,819
and you have a pipeline so that's the

00:11:22,480 --> 00:11:27,670
template templates can be configured

00:11:24,819 --> 00:11:30,459
with reusable things like modules and

00:11:27,670 --> 00:11:32,889
partials and there's a whole model of

00:11:30,459 --> 00:11:36,490
where you can inject and replace parts

00:11:32,889 --> 00:11:39,430
of objects with by specifying the

00:11:36,490 --> 00:11:41,259
adjacent paths stuff like that the

00:11:39,430 --> 00:11:46,779
templates themself and the pipe a

00:11:41,259 --> 00:11:48,130
configuration use ginger familiar and

00:11:46,779 --> 00:11:50,110
the other part is the pipeline

00:11:48,130 --> 00:11:52,439
configuration which is actually the pour

00:11:50,110 --> 00:11:55,779
that mutates the template into a

00:11:52,439 --> 00:11:57,759
runnable pipeline so I can have a single

00:11:55,779 --> 00:12:01,660
template have three different

00:11:57,759 --> 00:12:04,839
configurations right each one using the

00:12:01,660 --> 00:12:07,420
pipeline in a way that is a bit

00:12:04,839 --> 00:12:09,189
different different parameters okay

00:12:07,420 --> 00:12:12,189
different regions different providers

00:12:09,189 --> 00:12:14,430
whatever and the result is a runnable

00:12:12,189 --> 00:12:18,490
pipeline which we get which I can run

00:12:14,430 --> 00:12:20,050
run rerun as much as I like by the way

00:12:18,490 --> 00:12:23,139
if free to stop me if you have any

00:12:20,050 --> 00:12:25,870
questions there will be time at the end

00:12:23,139 --> 00:12:27,790
to ask questions too so

00:12:25,870 --> 00:12:30,160
what I wanted to do now is just go over

00:12:27,790 --> 00:12:35,350
a simple template a very simple template

00:12:30,160 --> 00:12:37,839
just two stages with a weight and a

00:12:35,350 --> 00:12:40,029
weight stage in a manual judgment I'm

00:12:37,839 --> 00:12:41,500
gonna have a little you can move you

00:12:40,029 --> 00:12:43,690
which a colleague of mine made which

00:12:41,500 --> 00:12:46,210
will show you some more advanced uses

00:12:43,690 --> 00:12:49,650
which you can later see for yourself

00:12:46,210 --> 00:12:52,120
so like I said that the template itself

00:12:49,650 --> 00:12:54,430
is composed of a few parts the first of

00:12:52,120 --> 00:12:57,070
all it's made of data so you can see the

00:12:54,430 --> 00:12:58,570
important part is the the ID which is

00:12:57,070 --> 00:13:00,550
the part which I reference in the

00:12:58,570 --> 00:13:03,430
configuration when I create my my

00:13:00,550 --> 00:13:05,700
runnable pipeline and there's submitted

00:13:03,430 --> 00:13:07,779
data like the name the virtual and

00:13:05,700 --> 00:13:12,550
description owner stuff like that some

00:13:07,779 --> 00:13:16,330
boilerplate stuff and second part is

00:13:12,550 --> 00:13:21,070
configuration so this is as you can see

00:13:16,330 --> 00:13:22,720
this this is all translates to the UI if

00:13:21,070 --> 00:13:24,490
you familiar with the pipeline UI so

00:13:22,720 --> 00:13:26,260
these are want to want parameters

00:13:24,490 --> 00:13:28,060
triggers and stuff like that then the

00:13:26,260 --> 00:13:30,540
important part is variables so in a

00:13:28,060 --> 00:13:34,150
template I can use defined variables

00:13:30,540 --> 00:13:39,060
which are later on used inside stages to

00:13:34,150 --> 00:13:41,080
mutate this stage configure it the so

00:13:39,060 --> 00:13:44,020
conditional stages where I can run a

00:13:41,080 --> 00:13:45,400
stage only if certain variable is set to

00:13:44,020 --> 00:13:48,160
true or something like that which helps

00:13:45,400 --> 00:13:50,170
you where you can control the flow for

00:13:48,160 --> 00:13:52,209
instance if you want a destroy a group

00:13:50,170 --> 00:13:54,459
or disable a group so you can have both

00:13:52,209 --> 00:13:56,620
stages in your PI in your template and

00:13:54,459 --> 00:13:58,720
then use a variable to decide for this

00:13:56,620 --> 00:14:00,730
pipeline it's runnable pipeline I wanta

00:13:58,720 --> 00:14:04,240
destroy the group and for that runnable

00:14:00,730 --> 00:14:06,910
pipeline around to disable them okay so

00:14:04,240 --> 00:14:10,750
I'm just highlighted here a variable

00:14:06,910 --> 00:14:12,670
named wait time so in the next part of

00:14:10,750 --> 00:14:15,130
stages okay so we have two stages the

00:14:12,670 --> 00:14:18,190
first one is called wait and the wait

00:14:15,130 --> 00:14:20,410
time is later I'll be replaced with

00:14:18,190 --> 00:14:23,020
whatever you configured and that

00:14:20,410 --> 00:14:25,390
variable and then there's the manual

00:14:23,020 --> 00:14:28,260
judgment which depends on wait okay

00:14:25,390 --> 00:14:31,990
that's how we define our dependency tree

00:14:28,260 --> 00:14:33,610
and few good figuration for that

00:14:31,990 --> 00:14:36,520
specific stage as you can see again this

00:14:33,610 --> 00:14:39,230
maps to whatever you see in the UI so

00:14:36,520 --> 00:14:42,130
there's nothing surprising here right

00:14:39,230 --> 00:14:47,390
no the UI templates will look pretty

00:14:42,130 --> 00:14:49,670
pretty clear to you I think then the

00:14:47,390 --> 00:14:51,860
pipeline configuration itself which is

00:14:49,670 --> 00:14:54,710
what like I said mutates the template to

00:14:51,860 --> 00:14:56,990
create the runabout pipeline so you can

00:14:54,710 --> 00:14:58,250
see the application which is the

00:14:56,990 --> 00:15:00,860
spinnaker application it's going to be

00:14:58,250 --> 00:15:03,260
when I appear in the pipeline's name the

00:15:00,860 --> 00:15:04,850
source which is spinnaker sample

00:15:03,260 --> 00:15:07,520
template so there are three sources

00:15:04,850 --> 00:15:09,850
there's file which looks for files on

00:15:07,520 --> 00:15:12,800
disk wherever or cars running I think

00:15:09,850 --> 00:15:14,510
there is HTTP so you can have template

00:15:12,800 --> 00:15:17,140
source from an HTTP source and there's

00:15:14,510 --> 00:15:19,370
spinnaker which actually means use

00:15:17,140 --> 00:15:22,040
templates from all or whatever front 50

00:15:19,370 --> 00:15:25,460
wherever front 50 stores them can be SV

00:15:22,040 --> 00:15:28,100
could be GCS whatever and I've

00:15:25,460 --> 00:15:30,710
configured specific configure that wait

00:15:28,100 --> 00:15:33,770
time to be 120 seconds okay so when this

00:15:30,710 --> 00:15:35,210
pipeline is run and we'll wait for 120

00:15:33,770 --> 00:15:42,730
seconds and then show me the manual

00:15:35,210 --> 00:15:47,870
judgment stage okay the questions so

00:15:42,730 --> 00:15:50,570
there's ever okay so to publish that

00:15:47,870 --> 00:15:54,260
pipeline currently there's no other way

00:15:50,570 --> 00:15:57,560
but to use a tool called roar I have no

00:15:54,260 --> 00:16:00,890
idea who named it but roar is a simple

00:15:57,560 --> 00:16:04,430
spinnaker API client so the first thing

00:16:00,890 --> 00:16:07,900
I'll do is I publish the template there

00:16:04,430 --> 00:16:10,130
isn't that a talks with spinnaker and

00:16:07,900 --> 00:16:14,900
through gate through friends through

00:16:10,130 --> 00:16:17,750
front 50 stores it and our cases GCS and

00:16:14,900 --> 00:16:20,720
then I'll publish that the pipeline

00:16:17,750 --> 00:16:22,820
itself which refers to the template

00:16:20,720 --> 00:16:27,680
there are some checks done that are done

00:16:22,820 --> 00:16:29,960
during publishing and during runtime to

00:16:27,680 --> 00:16:35,000
make sure that everything is ok although

00:16:29,960 --> 00:16:38,210
we would like some more so I have a

00:16:35,000 --> 00:16:40,040
short video here which shows some more

00:16:38,210 --> 00:16:45,310
advanced features that a colleague of

00:16:40,040 --> 00:16:47,330
mine made sometimes runs a bit fast but

00:16:45,310 --> 00:16:50,390
there's limps on the end of the

00:16:47,330 --> 00:16:52,430
presentation which we will share and

00:16:50,390 --> 00:16:53,480
will share with the presentation as a

00:16:52,430 --> 00:16:57,399
few later and

00:16:53,480 --> 00:16:57,399
you can watch the movie

00:17:01,040 --> 00:17:49,669
[Music]

00:17:55,820 --> 00:18:10,529
[Music]

00:18:07,500 --> 00:18:10,529
[Applause]

00:18:11,960 --> 00:18:17,509
[Music]

00:18:30,560 --> 00:18:35,810
so we checked it a stage you can see

00:18:33,050 --> 00:18:38,990
before the sable clusters so without

00:18:35,810 --> 00:18:40,490
really having to be familiar with the

00:18:38,990 --> 00:18:44,030
whole dependence entry you can just

00:18:40,490 --> 00:18:47,750
inject it and spinnaker will take care

00:18:44,030 --> 00:18:50,350
of reordering all the stages so this

00:18:47,750 --> 00:18:54,080
fits in whatever you specify

00:18:50,350 --> 00:18:54,080
[Music]

00:18:56,770 --> 00:19:11,210
[Music]

00:19:20,520 --> 00:19:23,589
[Music]

00:19:33,480 --> 00:19:36,640
[Music]

00:19:40,980 --> 00:19:45,400
[Music]

00:19:48,289 --> 00:19:53,669
as a conditional when that will which

00:19:52,230 --> 00:20:05,730
means that all your one would destroy

00:19:53,669 --> 00:20:09,139
previous group is set to true okay so

00:20:05,730 --> 00:20:09,139
that way I can alter

00:20:10,650 --> 00:20:15,940
[Music]

00:20:20,620 --> 00:20:25,259
[Music]

00:20:31,270 --> 00:20:39,539
[Music]

00:20:44,940 --> 00:20:53,600
[Music]

00:20:49,780 --> 00:20:57,350
this gives you a sense of versatile

00:20:53,600 --> 00:21:15,830
versatile is that it actually is we've

00:20:57,350 --> 00:21:21,580
actually been we've been actually been

00:21:15,830 --> 00:21:24,080
using it for a while now and during our

00:21:21,580 --> 00:21:28,130
explorations of this new feature we come

00:21:24,080 --> 00:21:34,370
up with a few we call patterns but use

00:21:28,130 --> 00:21:37,850
cases no rule of thumbs whatever you

00:21:34,370 --> 00:21:41,500
want to call it one other so I just want

00:21:37,850 --> 00:21:45,470
to go over them so one of them is

00:21:41,500 --> 00:21:51,290
version pipelines so one of the things

00:21:45,470 --> 00:21:53,210
that template pipelines give us is a lot

00:21:51,290 --> 00:21:55,040
of uniformity right you changed

00:21:53,210 --> 00:21:57,110
something in one place and all your

00:21:55,040 --> 00:21:59,630
pipelines and heard that so with that is

00:21:57,110 --> 00:22:01,190
also big risk so if you make a small

00:21:59,630 --> 00:22:03,530
change in one of your templates that

00:22:01,190 --> 00:22:04,850
might affect your entire set of

00:22:03,530 --> 00:22:07,130
pipelines right if you're running about

00:22:04,850 --> 00:22:09,830
PI files and can actually cause a big

00:22:07,130 --> 00:22:13,310
problem so what we thought of and what

00:22:09,830 --> 00:22:15,200
we're doing now is so you can use v1

00:22:13,310 --> 00:22:19,520
template right have your master template

00:22:15,200 --> 00:22:21,470
record of u1 and when you do want to

00:22:19,520 --> 00:22:23,840
make a change since it's all version and

00:22:21,470 --> 00:22:25,940
I'll get and all in source control so

00:22:23,840 --> 00:22:29,870
what you can do is create a v2 of that

00:22:25,940 --> 00:22:31,730
template right and point one of your

00:22:29,870 --> 00:22:32,420
pipeline to ten whatever amount of

00:22:31,730 --> 00:22:34,310
pipelines you

00:22:32,420 --> 00:22:36,140
to that new template and when you see

00:22:34,310 --> 00:22:37,580
that it's okay then you can point the

00:22:36,140 --> 00:22:41,300
rest of your pipeline so that helps you

00:22:37,580 --> 00:22:44,870
kind of cannery which is a popular here

00:22:41,300 --> 00:22:46,640
I knew a new pipeline template okay and

00:22:44,870 --> 00:22:49,400
another thing you can do here is have a

00:22:46,640 --> 00:22:53,090
Shem temp Shem template which everyone

00:22:49,400 --> 00:22:56,090
inherits and that can be used use either

00:22:53,090 --> 00:22:58,330
v1 or v2 for your entire fleet okay so

00:22:56,090 --> 00:23:00,830
that's something that we kind of

00:22:58,330 --> 00:23:02,960
experienced having one of our base

00:23:00,830 --> 00:23:05,030
templates screwing up everything for

00:23:02,960 --> 00:23:08,080
everyone so what we decided to do is

00:23:05,030 --> 00:23:10,850
that if you want to make after we've

00:23:08,080 --> 00:23:12,590
decided on a template if we want to make

00:23:10,850 --> 00:23:15,980
changes it will be to a new copy of it

00:23:12,590 --> 00:23:20,030
and test it out roll it out and then do

00:23:15,980 --> 00:23:23,480
the change for everyone else so another

00:23:20,030 --> 00:23:25,760
thing we found iPlant

00:23:23,480 --> 00:23:29,810
pipeline the templates very useful for

00:23:25,760 --> 00:23:33,200
is actually for creating new services so

00:23:29,810 --> 00:23:35,860
since well let me go back so before we

00:23:33,200 --> 00:23:38,630
had spinnaker pipeline templates or

00:23:35,860 --> 00:23:39,890
pipelines at all what we would do is

00:23:38,630 --> 00:23:43,610
we'd have a team member

00:23:39,890 --> 00:23:45,680
we'd have scripts written for for AWS

00:23:43,610 --> 00:23:48,800
and a script written for DCP that uses

00:23:45,680 --> 00:23:52,310
that platform's API tools to create the

00:23:48,800 --> 00:23:53,990
full set of resources that micro-service

00:23:52,310 --> 00:23:55,910
need ok the load balancer security

00:23:53,990 --> 00:24:00,250
groups if it needs memcache if it means

00:23:55,910 --> 00:24:02,630
Redis whatever just created our own book

00:24:00,250 --> 00:24:06,110
but now with pipeline templates and

00:24:02,630 --> 00:24:08,840
since like I said 95% of our micro

00:24:06,110 --> 00:24:12,080
services look the same I don't have to

00:24:08,840 --> 00:24:15,980
use those scripts at or I can just copy

00:24:12,080 --> 00:24:19,700
paste a new configuration for that micro

00:24:15,980 --> 00:24:22,370
service create the pipeline templates

00:24:19,700 --> 00:24:26,210
create the run of a pipe I'm sorry and

00:24:22,370 --> 00:24:31,160
then run them ok and that creates a full

00:24:26,210 --> 00:24:33,800
set of services that it needs so that

00:24:31,160 --> 00:24:37,130
simplifies the deployment a lot ok I

00:24:33,800 --> 00:24:40,540
don't need to use any more API specific

00:24:37,130 --> 00:24:42,610
tools I can just create the pipeline

00:24:40,540 --> 00:24:45,460
a runabout pipeline and run it with a

00:24:42,610 --> 00:24:50,470
deploy stage and everything is already

00:24:45,460 --> 00:24:55,740
there okay so that's simplified our

00:24:50,470 --> 00:24:58,720
rollout of new micro-services a lot and

00:24:55,740 --> 00:25:00,520
it's also something that developers will

00:24:58,720 --> 00:25:01,870
be able to do in the future we hope so

00:25:00,520 --> 00:25:03,970
they can write the code they'll be I

00:25:01,870 --> 00:25:05,590
have access to the the code didn't

00:25:03,970 --> 00:25:07,480
configure the application configuration

00:25:05,590 --> 00:25:10,180
utility and then they'll be able to

00:25:07,480 --> 00:25:11,290
create a new runabout pipeline limit and

00:25:10,180 --> 00:25:13,470
their application will be deployed to

00:25:11,290 --> 00:25:13,470
production

00:25:14,340 --> 00:25:24,010
another one that we we found is that

00:25:21,180 --> 00:25:26,500
we've been able to create like I said a

00:25:24,010 --> 00:25:32,350
pretty good paved road for about 90 95

00:25:26,500 --> 00:25:34,510
percent of our micro services but like I

00:25:32,350 --> 00:25:38,590
said for that five percent that

00:25:34,510 --> 00:25:41,380
remaining remains by applying templates

00:25:38,590 --> 00:25:42,700
offers us a lot of flexibility and the

00:25:41,380 --> 00:25:45,160
terms like agenda and the movie

00:25:42,700 --> 00:25:48,850
injecting stages adding stages running

00:25:45,160 --> 00:25:50,860
while writing one-off pipelines for

00:25:48,850 --> 00:25:55,750
specific services which are more complex

00:25:50,860 --> 00:25:58,980
than our just regular micro service we

00:25:55,750 --> 00:26:02,980
have some groups applications that have

00:25:58,980 --> 00:26:05,620
dozens of server groups in there and

00:26:02,980 --> 00:26:09,720
them so just using that boilerplate

00:26:05,620 --> 00:26:09,720
micro service code doesn't always help

00:26:11,340 --> 00:26:16,660
another thing that we've found very

00:26:13,660 --> 00:26:18,760
handy you saw before how we have to use

00:26:16,660 --> 00:26:21,250
roar to push the templates and push the

00:26:18,760 --> 00:26:23,470
configuration so since it's all source

00:26:21,250 --> 00:26:27,520
controlled and silly being it was very

00:26:23,470 --> 00:26:29,710
easy to just have a Jenkins job pulled

00:26:27,520 --> 00:26:32,380
that configuration repository once it

00:26:29,710 --> 00:26:36,340
sees a change in a pipeline to a

00:26:32,380 --> 00:26:39,070
pipeline configuration and we'll run war

00:26:36,340 --> 00:26:42,400
itself push that pipeline into spinnaker

00:26:39,070 --> 00:26:46,660
and then run the pipeline itself so we

00:26:42,400 --> 00:26:48,930
can have full control or automation the

00:26:46,660 --> 00:26:50,800
moment you do a change in the pipeline

00:26:48,930 --> 00:26:52,720
configuration it's been called reviewed

00:26:50,800 --> 00:26:54,190
by one of your peers you commit it and

00:26:52,720 --> 00:26:55,889
that change

00:26:54,190 --> 00:26:59,679
propagates all the way to production

00:26:55,889 --> 00:27:06,429
which makes life much more easier both

00:26:59,679 --> 00:27:09,129
for us and both of the developers yeah

00:27:06,429 --> 00:27:10,929
another thing that we do is or that we

00:27:09,129 --> 00:27:13,809
needed that pipeline templates helped us

00:27:10,929 --> 00:27:16,210
a lot is sweeping changes so one of our

00:27:13,809 --> 00:27:19,779
biggest problems or one of the biggest

00:27:16,210 --> 00:27:21,990
problems when you have so many server

00:27:19,779 --> 00:27:24,340
groups and so many instances running as

00:27:21,990 --> 00:27:26,259
making sure they're all up to date in

00:27:24,340 --> 00:27:30,970
terms of security updates and OS

00:27:26,259 --> 00:27:34,029
upgrades so right now we have a big

00:27:30,970 --> 00:27:36,250
pipeline that runs weekly and it takes a

00:27:34,029 --> 00:27:38,980
chunk of the system it does a bake

00:27:36,250 --> 00:27:40,720
without changing anything on without

00:27:38,980 --> 00:27:43,389
changing application or configuration

00:27:40,720 --> 00:27:46,360
and then just deploying it plus we get a

00:27:43,389 --> 00:27:49,750
new always or Navigator upgraded or

00:27:46,360 --> 00:27:51,340
waste for each server group weekly so

00:27:49,750 --> 00:27:53,320
this is now related directly to pipeline

00:27:51,340 --> 00:27:55,240
templates by bold family with pipeline

00:27:53,320 --> 00:27:58,179
templates we could just scrape a

00:27:55,240 --> 00:28:00,970
repository and we won't have to manually

00:27:58,179 --> 00:28:03,580
add we can create a runnable

00:28:00,970 --> 00:28:06,429
configuration by scraping a repository

00:28:03,580 --> 00:28:09,220
in and adding new microservices

00:28:06,429 --> 00:28:11,320
automatically for it to this so instead

00:28:09,220 --> 00:28:13,539
of being toil instead of the manual

00:28:11,320 --> 00:28:18,250
labor and having to add this every new

00:28:13,539 --> 00:28:21,879
micro service to this big pipeline it's

00:28:18,250 --> 00:28:24,250
done for us automatically which is not

00:28:21,879 --> 00:28:29,110
something you consider right away but

00:28:24,250 --> 00:28:32,019
helps us a lot that's it that's all I

00:28:29,110 --> 00:28:34,570
have prepared for today if you have any

00:28:32,019 --> 00:28:35,950
questions I'm here this is Rob here and

00:28:34,570 --> 00:28:39,730
I'm gonna have Daniels here from Google

00:28:35,950 --> 00:28:52,649
which also roll out the code so fire

00:28:39,730 --> 00:28:52,649
away okay firstly what version of work

00:28:52,799 --> 00:28:59,970
so we're still following head or

00:28:57,190 --> 00:29:02,409
whatever we're not using the 1.0 version

00:28:59,970 --> 00:29:04,240
for this feature it's still not I don't

00:29:02,409 --> 00:29:07,259
think it's good it doesn't come out with

00:29:04,240 --> 00:29:07,259
work at one point all right

00:29:07,279 --> 00:29:14,570
it was pretty alpha pretty alpha in 1.0

00:29:12,860 --> 00:29:24,100
so we're still falling with it just

00:29:14,570 --> 00:29:24,100
because of this feature is that run on

00:29:25,240 --> 00:29:32,240
it's a binary the binary or didn't go I

00:29:29,000 --> 00:29:39,710
think we execute it on a server that has

00:29:32,240 --> 00:29:55,519
access to gate date stocks with orca and

00:29:39,710 --> 00:29:57,350
front 50 and whatever so it means that

00:29:55,519 --> 00:29:58,760
you have to publish it to your spinnaker

00:29:57,350 --> 00:30:00,470
instance before you use it in a

00:29:58,760 --> 00:30:10,159
configuration otherwise that

00:30:00,470 --> 00:30:11,960
configuration will fail yeah so it does

00:30:10,159 --> 00:30:14,539
some transforming to the file I think it

00:30:11,960 --> 00:30:17,240
turns it into JSON if I'm not mistaken

00:30:14,539 --> 00:30:22,490
and then just pushes it like an API call

00:30:17,240 --> 00:30:25,789
it the spinnaker the gate yeah so it's

00:30:22,490 --> 00:30:29,539
not actually saving a file on to the

00:30:25,789 --> 00:30:31,760
filesystem of the server it's converting

00:30:29,539 --> 00:30:35,269
it to JSON publishing it into the API

00:30:31,760 --> 00:30:40,370
and then into s3 GCS or something like

00:30:35,269 --> 00:30:43,130
that with all your micro services I'm

00:30:40,370 --> 00:30:44,299
curious you store those templates along

00:30:43,130 --> 00:30:46,809
with the services or do you have a

00:30:44,299 --> 00:30:50,510
central repository for those templates

00:30:46,809 --> 00:30:55,370
we store them in whatever fun 50

00:30:50,510 --> 00:30:56,929
provides which is and pipelines are

00:30:55,370 --> 00:31:00,370
grouped by application so each

00:30:56,929 --> 00:31:03,649
application has its own pipelines I

00:31:00,370 --> 00:31:05,419
think the question was in github or get

00:31:03,649 --> 00:31:06,769
in your gits store are the pipeline

00:31:05,419 --> 00:31:08,659
templates checked into a central

00:31:06,769 --> 00:31:09,950
repository yeah I find templates they

00:31:08,659 --> 00:31:14,809
don't live next to the application code

00:31:09,950 --> 00:31:19,250
no repository for templates and

00:31:14,809 --> 00:31:21,380
configuration so sorry this

00:31:19,250 --> 00:31:26,780
even the configuration lives outside the

00:31:21,380 --> 00:31:29,030
application in your case has no set the

00:31:26,780 --> 00:31:30,620
application itself the code itself is

00:31:29,030 --> 00:31:33,710
something that's developed by our

00:31:30,620 --> 00:31:34,730
developers we for us we're the

00:31:33,710 --> 00:31:36,710
infrastructure team they're the

00:31:34,730 --> 00:31:38,600
development so there's no sense for us

00:31:36,710 --> 00:31:47,890
to store with the application much

00:31:38,600 --> 00:31:47,890
rather average somewhere essential and

00:32:16,390 --> 00:32:23,289
template the pipeline's that the share

00:32:18,620 --> 00:32:29,020
code is a template right if you remember

00:32:23,289 --> 00:32:32,720
this slide this is the share code right

00:32:29,020 --> 00:32:39,980
that can be mutated how many ever times

00:32:32,720 --> 00:32:41,900
you want by configuration yeah that's

00:32:39,980 --> 00:32:46,460
where versioning so you can have all

00:32:41,900 --> 00:32:48,650
your templates inherit one template that

00:32:46,460 --> 00:32:52,940
template you can then use to switch

00:32:48,650 --> 00:32:54,950
between versions of your right you hope

00:32:52,940 --> 00:33:02,659
pipelines your golden template or

00:32:54,950 --> 00:33:04,820
whatever you want to call it you can

00:33:02,659 --> 00:33:09,950
always have an empty template like

00:33:04,820 --> 00:33:11,419
there's not much use for it can you talk

00:33:09,950 --> 00:33:15,409
a little bit more about how you'd be

00:33:11,419 --> 00:33:17,299
rolling out its so you kind of talked a

00:33:15,409 --> 00:33:19,880
little bit about creating like a v2

00:33:17,299 --> 00:33:22,400
version of it so when you've tested that

00:33:19,880 --> 00:33:24,650
v2 on just like a dummy pipeline how

00:33:22,400 --> 00:33:28,520
would you then update your entire fleet

00:33:24,650 --> 00:33:30,980
would you just flip v1 to point or to

00:33:28,520 --> 00:33:32,990
basically happy to or would you roll it

00:33:30,980 --> 00:33:37,160
out slowly how exactly would you kind of

00:33:32,990 --> 00:33:39,770
I will roll that slowly that's exactly

00:33:37,160 --> 00:33:44,510
what I was talking on a Shem so I can

00:33:39,770 --> 00:33:46,670
have all my my configurations source one

00:33:44,510 --> 00:33:49,910
single template and that template can

00:33:46,670 --> 00:33:52,640
source or inherit or my my golden

00:33:49,910 --> 00:33:59,450
template right then I can use that gem

00:33:52,640 --> 00:34:02,270
to just switch my golden templates yeah

00:33:59,450 --> 00:34:04,130
so I kissed a few then that's the power

00:34:02,270 --> 00:34:06,170
I don't have to just change it in one

00:34:04,130 --> 00:34:08,000
place and I push that pipe on that

00:34:06,170 --> 00:34:13,070
template you know all my pipelines are

00:34:08,000 --> 00:34:16,700
now using that new you base template so

00:34:13,070 --> 00:34:22,610
I'm getting the feeling that the

00:34:16,700 --> 00:34:25,340
application developers aren't they do

00:34:22,610 --> 00:34:29,720
okay you know they wouldn't do the ad

00:34:25,340 --> 00:34:32,750
hoc work where but we did but now that

00:34:29,720 --> 00:34:36,170
we have this and we have integration

00:34:32,750 --> 00:34:38,330
back into our application system upgrade

00:34:36,170 --> 00:34:41,060
system so I can have a pileup pipeline

00:34:38,330 --> 00:34:44,060
that will be set latest version baked

00:34:41,060 --> 00:34:47,330
right that's and then run some sort of

00:34:44,060 --> 00:34:50,660
cannery of the homegrown cannery deploy

00:34:47,330 --> 00:34:52,910
another cannery whatever right but once

00:34:50,660 --> 00:34:54,340
we have that weak and confident to tell

00:34:52,910 --> 00:34:56,210
the developer okay you have a pipeline

00:34:54,340 --> 00:34:57,560
you can run it by yourself you don't

00:34:56,210 --> 00:34:59,840
have to ask for our permission you don't

00:34:57,560 --> 00:35:01,820
have to talk to us here are your

00:34:59,840 --> 00:35:03,530
dashboards go up here by yourself but

00:35:01,820 --> 00:35:07,210
they're not managing the pipeline

00:35:03,530 --> 00:35:10,100
they're not changing engines this is all

00:35:07,210 --> 00:35:13,820
kind of new for us as well we're not

00:35:10,100 --> 00:35:16,730
comfortable yet asking a developer okay

00:35:13,820 --> 00:35:18,020
so here is a sample configuration go

00:35:16,730 --> 00:35:19,130
create a configuration for your

00:35:18,020 --> 00:35:21,440
application because they had stuff like

00:35:19,130 --> 00:35:23,870
regions and security groups and load

00:35:21,440 --> 00:35:27,770
balancers just stuff that developers

00:35:23,870 --> 00:35:30,950
usually are not aware of so are they

00:35:27,770 --> 00:35:33,980
able to like when you have that removal

00:35:30,950 --> 00:35:35,660
pipeline at the end are they actually

00:35:33,980 --> 00:35:38,210
able to go change anything in there in

00:35:35,660 --> 00:35:42,020
there or since it's from a managed

00:35:38,210 --> 00:35:46,350
pipeline template is that our developers

00:35:42,020 --> 00:35:48,270
don't want to change anything okay

00:35:46,350 --> 00:35:51,000
I'm not gonna so they're happy just to

00:35:48,270 --> 00:35:54,390
go in click one and wait for the email

00:35:51,000 --> 00:35:57,720
telling them with everything finished no

00:35:54,390 --> 00:35:59,310
once you have a template pipeline that's

00:35:57,720 --> 00:36:01,020
built out of a template you can't change

00:35:59,310 --> 00:36:03,540
the template itself you can configure it

00:36:01,020 --> 00:36:05,970
like you saw it Flags which one they

00:36:03,540 --> 00:36:07,560
will affect maybe it's flow maybe other

00:36:05,970 --> 00:36:09,950
parameters like security groups regions

00:36:07,560 --> 00:36:15,780
whatever but you can actually edit it

00:36:09,950 --> 00:36:18,420
okay hold on that so you have you can

00:36:15,780 --> 00:36:19,890
you can change parameter variables so

00:36:18,420 --> 00:36:23,910
whenever you need to you can configure

00:36:19,890 --> 00:36:26,550
variables or Conte right do you have use

00:36:23,910 --> 00:36:28,530
cases or where pipelines need to be

00:36:26,550 --> 00:36:30,890
parameterized do you want to execute

00:36:28,530 --> 00:36:32,850
that pipeline with different parameters

00:36:30,890 --> 00:36:36,150
where are you mostly using just

00:36:32,850 --> 00:36:39,030
variables so we do have those but that's

00:36:36,150 --> 00:36:40,830
in the configuration right that's in the

00:36:39,030 --> 00:36:42,840
pipeline configuration you don't have

00:36:40,830 --> 00:36:45,390
been in the and that's like another

00:36:42,840 --> 00:36:47,490
layer on top on a runnable pipeline you

00:36:45,390 --> 00:36:49,590
have configuration which can affect the

00:36:47,490 --> 00:36:52,830
flow so we can have conditional stages

00:36:49,590 --> 00:36:54,330
stuff like that but that's separate from

00:36:52,830 --> 00:36:56,340
having a conditional stage on the

00:36:54,330 --> 00:36:59,820
pipeline template and template level

00:36:56,340 --> 00:37:02,280
which is a template very very confusing

00:36:59,820 --> 00:37:03,900
terms so this is a pipeline

00:37:02,280 --> 00:37:06,570
configuration which one can tell you

00:37:03,900 --> 00:37:09,030
like you know for this pipeline don't

00:37:06,570 --> 00:37:11,130
set the latest version or this pipeline

00:37:09,030 --> 00:37:13,440
run don't set the latest version or

00:37:11,130 --> 00:37:15,090
don't bake don't deploy or whatever and

00:37:13,440 --> 00:37:16,970
that's for regular size line that's what

00:37:15,090 --> 00:37:19,970
you see in the first part of that

00:37:16,970 --> 00:37:22,770
pipeline that stays that doesn't change

00:37:19,970 --> 00:37:24,420
so you don't have used phase where your

00:37:22,770 --> 00:37:26,640
your template that points a bunch of

00:37:24,420 --> 00:37:29,100
parameters that we'll be using when yeah

00:37:26,640 --> 00:37:31,380
all our templates are addressed so each

00:37:29,100 --> 00:37:32,820
time each pipeline they're all the same

00:37:31,380 --> 00:37:35,490
but then there's the small things that

00:37:32,820 --> 00:37:38,520
define maybe the application right the

00:37:35,490 --> 00:37:41,040
OS some I have to run on on 1604 boot

00:37:38,520 --> 00:37:42,930
264 have still some still have to run of

00:37:41,040 --> 00:37:44,460
1404 because they have some agent

00:37:42,930 --> 00:37:47,220
dependency or whatever so there are

00:37:44,460 --> 00:37:48,990
stuff like that or maybe we don't want

00:37:47,220 --> 00:37:50,880
any so that there's all kinds of stuff

00:37:48,990 --> 00:37:52,830
that you can put in the configuration

00:37:50,880 --> 00:37:54,330
that will affect the runnable pipeline

00:37:52,830 --> 00:37:57,350
but that's not part of the template

00:37:54,330 --> 00:37:57,350
that's part of the pipeline

00:37:59,650 --> 00:38:04,520
their current tooling to basically

00:38:01,970 --> 00:38:09,770
produce Rommel pipelines lovely without

00:38:04,520 --> 00:38:12,050
like a spinnaker running actually we

00:38:09,770 --> 00:38:16,040
wrote a script that will take a server

00:38:12,050 --> 00:38:18,710
group look at it and change it into a

00:38:16,040 --> 00:38:20,839
pipeline configuration that's for us so

00:38:18,710 --> 00:38:22,190
we can base it on template and then just

00:38:20,839 --> 00:38:24,410
do like I won't sleep over all

00:38:22,190 --> 00:38:28,280
application all server groups and then

00:38:24,410 --> 00:38:30,710
we're ready push it all out but I'm not

00:38:28,280 --> 00:38:32,510
familiar with anything that maybe there

00:38:30,710 --> 00:38:34,339
will be something in the UI I don't know

00:38:32,510 --> 00:38:36,079
later on there'll be some kind of I know

00:38:34,339 --> 00:38:37,630
template editor or something like that

00:38:36,079 --> 00:38:45,040
but right now

00:38:37,630 --> 00:38:48,650
Emacs for beam choose your weapon um so

00:38:45,040 --> 00:38:52,550
you showed a simple template which is

00:38:48,650 --> 00:38:54,530
was a minimal template yeah for more

00:38:52,550 --> 00:38:57,950
complicated templates I mean you just

00:38:54,530 --> 00:39:00,530
have to write out the the yeah Mille or

00:38:57,950 --> 00:39:01,940
is there something that helps build that

00:39:00,530 --> 00:39:05,540
out so that's one the same there's a

00:39:01,940 --> 00:39:11,089
warning there's no editor or some UI

00:39:05,540 --> 00:39:17,150
which and you can use it generates this

00:39:11,089 --> 00:39:19,369
so there's bulletin board right okay

00:39:17,150 --> 00:39:22,010
there is a good array you can read the

00:39:19,369 --> 00:39:23,990
spec right and like I said it all kind

00:39:22,010 --> 00:39:25,760
of maps one to one to whatever you see

00:39:23,990 --> 00:39:28,040
in the UI so it's pretty intuitive I

00:39:25,760 --> 00:39:29,839
think once and once you start writing it

00:39:28,040 --> 00:39:32,300
and you have your first template you'll

00:39:29,839 --> 00:39:35,780
see that it's usually it fits most of

00:39:32,300 --> 00:39:40,510
use cases and you know we're going for

00:39:35,780 --> 00:39:43,250
there will be probably pretty easy yeah

00:39:40,510 --> 00:39:45,109
in the yamo configuration is there a

00:39:43,250 --> 00:39:47,300
one-to-one correspondence to every

00:39:45,109 --> 00:39:49,400
feature that you can do in the UI or is

00:39:47,300 --> 00:39:50,569
there like 90% coverage and some things

00:39:49,400 --> 00:39:53,470
that you can do from the UI but you

00:39:50,569 --> 00:39:55,670
can't currently do in the template and

00:39:53,470 --> 00:39:58,119
follow-on to that what happens when

00:39:55,670 --> 00:40:00,980
spinnaker in the UI releases new

00:39:58,119 --> 00:40:02,990
functionality do we have to then wait

00:40:00,980 --> 00:40:04,730
for an update to this to be able to

00:40:02,990 --> 00:40:06,680
migrate that over or is there some kind

00:40:04,730 --> 00:40:08,690
of scheme where it just knows how to

00:40:06,680 --> 00:40:10,460
convert from JSON I mean from the amyl

00:40:08,690 --> 00:40:14,089
to the JSON based on

00:40:10,460 --> 00:40:18,140
Rob's head nods okay you have 100%

00:40:14,089 --> 00:40:20,420
coverage right I mean in the UI because

00:40:18,140 --> 00:40:23,000
right now a pipeline if you look at it a

00:40:20,420 --> 00:40:26,060
pipeline you can always edit the JSON so

00:40:23,000 --> 00:40:28,190
what it does is create a JSON right that

00:40:26,060 --> 00:40:30,440
you can change and in terms of new

00:40:28,190 --> 00:40:32,720
features so I'm guessing it's the same

00:40:30,440 --> 00:40:38,690
right once the feature is there in the

00:40:32,720 --> 00:40:40,099
UI you can add a cue template okay so

00:40:38,690 --> 00:40:42,260
you mentioned the in addition to

00:40:40,099 --> 00:40:46,910
publishing things just pinnacle with

00:40:42,260 --> 00:40:50,300
roar like an HTTP endpoint for the

00:40:46,910 --> 00:40:52,099
templates the spinnaker hold that to see

00:40:50,300 --> 00:40:53,420
if a changes happened or when does the

00:40:52,099 --> 00:40:55,280
pipeline actually get generated and

00:40:53,420 --> 00:40:57,980
created is that when the pipeline is

00:40:55,280 --> 00:41:00,470
executed or is that you know if you

00:40:57,980 --> 00:41:04,750
don't publish it to spinnaker but you

00:41:00,470 --> 00:41:07,730
update the file yeah templates are

00:41:04,750 --> 00:41:10,460
resolved right at execution time so if

00:41:07,730 --> 00:41:11,690
you have HTTP before the pipeline

00:41:10,460 --> 00:41:13,700
actually starts and I'll grab that

00:41:11,690 --> 00:41:15,800
template and then generate it right

00:41:13,700 --> 00:41:18,670
before it actually executes there is

00:41:15,800 --> 00:41:24,740
there any caching so in the event my

00:41:18,670 --> 00:41:26,869
it's HTTP is kind of there for getting

00:41:24,740 --> 00:41:28,730
started very quickly it's not really

00:41:26,869 --> 00:41:31,690
meant to be like it probably wouldn't

00:41:28,730 --> 00:41:34,250
work that way but I were just curious

00:41:31,690 --> 00:41:36,410
what makes sense right so every time you

00:41:34,250 --> 00:41:38,420
want a change of template you want it

00:41:36,410 --> 00:41:40,960
immediately reflected in your run up in

00:41:38,420 --> 00:41:40,960
your available time

00:41:47,040 --> 00:41:52,530
the I just want to comment there

00:41:49,320 --> 00:41:55,710
converter we're using the converter for

00:41:52,530 --> 00:41:58,380
all our work and and you can just define

00:41:55,710 --> 00:42:00,570
a pipeline in the UI if you want HPA or

00:41:58,380 --> 00:42:02,760
something on this you just find a

00:42:00,570 --> 00:42:04,970
pipeline which has HPA and use the

00:42:02,760 --> 00:42:08,190
converter and you get the ammo for free

00:42:04,970 --> 00:42:13,520
right so so to get started the converter

00:42:08,190 --> 00:42:15,750
is super awesome thank God one of the

00:42:13,520 --> 00:42:20,369
which opposed already is it some

00:42:15,750 --> 00:42:24,420
spinnaker spinnaker so there's like two

00:42:20,369 --> 00:42:27,119
different ones there is a converter that

00:42:24,420 --> 00:42:30,080
will take a pipeline right and generate

00:42:27,119 --> 00:42:32,880
a template out of it yeah so there's

00:42:30,080 --> 00:42:35,390
there's the original converter which is

00:42:32,880 --> 00:42:38,430
Python and it's just a personal

00:42:35,390 --> 00:42:40,560
repository on my account and then

00:42:38,430 --> 00:42:44,780
there's a converter that's built into

00:42:40,560 --> 00:42:48,530
our that does basically the same thing

00:42:44,780 --> 00:42:51,090
but I kind of like the Python one more

00:42:48,530 --> 00:42:52,580
so that can help you get started out so

00:42:51,090 --> 00:42:55,440
if you build your pipeline in the UI

00:42:52,580 --> 00:43:00,500
then you can dump it into a Lambo and

00:42:55,440 --> 00:43:03,109
start taking it from there actually yes

00:43:00,500 --> 00:43:06,240
rawrr doesn't actually do any validation

00:43:03,109 --> 00:43:08,910
it's all done through Orca

00:43:06,240 --> 00:43:12,840
but if you do like a pipeline template

00:43:08,910 --> 00:43:15,900
plan through roar it will basically do a

00:43:12,840 --> 00:43:17,970
dry run of lit with your variable

00:43:15,900 --> 00:43:22,470
bindings and then if there's any issues

00:43:17,970 --> 00:43:34,980
it will print out the errors that's many

00:43:22,470 --> 00:43:36,300
times new templates was basically we

00:43:34,980 --> 00:43:39,060
were concerned about the prospect of

00:43:36,300 --> 00:43:40,320
having logic in Yama

00:43:39,060 --> 00:43:43,440
and we ended up staying with her

00:43:40,320 --> 00:43:46,530
homegrown for now have you run into any

00:43:43,440 --> 00:43:49,410
of the limitations expressing your ideas

00:43:46,530 --> 00:43:52,920
through the control structures available

00:43:49,410 --> 00:43:58,940
to you in the template system so we have

00:43:52,920 --> 00:44:02,510
run into a few but these are really

00:43:58,940 --> 00:44:04,560
feature that we are missing now really

00:44:02,510 --> 00:44:07,470
limitations I mean it's stuff that Rob

00:44:04,560 --> 00:44:09,240
said you'll write for us so we're kind

00:44:07,470 --> 00:44:11,880
of okay but in terms of ideas now we

00:44:09,240 --> 00:44:14,760
been able to because it's no it's a

00:44:11,880 --> 00:44:17,460
representation via models which and

00:44:14,760 --> 00:44:19,680
which help you buy core views and

00:44:17,460 --> 00:44:22,680
there's partials which help you reuse a

00:44:19,680 --> 00:44:28,350
whole bunch of stages so we haven't run

00:44:22,680 --> 00:44:30,720
into if you wind up having some feature

00:44:28,350 --> 00:44:33,570
gaps for pipeline templates you just

00:44:30,720 --> 00:44:36,619
hang me on slack and wool and we'll go

00:44:33,570 --> 00:44:39,300
through some design Docs I've done that

00:44:36,619 --> 00:44:43,410
multiple times with ways and internal

00:44:39,300 --> 00:44:50,760
teams at Netflix and we'll try to make

00:44:43,410 --> 00:44:52,320
something work assume that for example

00:44:50,760 --> 00:44:54,060
you want to version walk pretty much

00:44:52,320 --> 00:44:55,470
everything in other words latest tags

00:44:54,060 --> 00:44:57,990
and so forth don't fly

00:44:55,470 --> 00:44:59,940
everything is very repeatable throughout

00:44:57,990 --> 00:45:03,390
the process and I'd also have for

00:44:59,940 --> 00:45:05,220
example version locked pipelines and so

00:45:03,390 --> 00:45:07,260
forth version lock configurations I'm

00:45:05,220 --> 00:45:09,150
just trying understand I see you're kind

00:45:07,260 --> 00:45:11,640
of sitting on the fence between being

00:45:09,150 --> 00:45:15,570
handle both because culturally but we do

00:45:11,640 --> 00:45:17,730
both how does this this big sense in

00:45:15,570 --> 00:45:19,609
your world you're actually version lock

00:45:17,730 --> 00:45:22,170
kind of everything so we know

00:45:19,609 --> 00:45:24,540
essentially have either a manifest of

00:45:22,170 --> 00:45:26,850
versions that went into each thing

00:45:24,540 --> 00:45:30,170
that's the point for even a version

00:45:26,850 --> 00:45:30,170
number saying this is my release

00:45:31,579 --> 00:45:36,210
yeah because we liked we like to know

00:45:34,049 --> 00:45:38,640
where we push the production I mean the

00:45:36,210 --> 00:45:40,380
kind of maybe over the top over the top

00:45:38,640 --> 00:45:42,690
of that kind of stuff what we want to

00:45:40,380 --> 00:45:44,369
know what we push the production we want

00:45:42,690 --> 00:45:47,400
to be short that's been tested out

00:45:44,369 --> 00:45:50,880
properly so much rather have everything

00:45:47,400 --> 00:45:52,740
locked to one version and then migrate

00:45:50,880 --> 00:45:54,480
to a new one and have a mishmash of

00:45:52,740 --> 00:46:03,390
versions and stuff that I don't know and

00:45:54,480 --> 00:46:05,250
then I can control yeah talk about hey I

00:46:03,390 --> 00:46:07,109
changed something and almost magically

00:46:05,250 --> 00:46:09,930
get applied to lots of things that magic

00:46:07,109 --> 00:46:11,460
implies that either their versions don't

00:46:09,930 --> 00:46:14,099
change because they automatically suck

00:46:11,460 --> 00:46:15,990
up and it happens with recipes all the

00:46:14,099 --> 00:46:18,329
rest of them unless you go through the

00:46:15,990 --> 00:46:21,990
effort of saying no I only think this

00:46:18,329 --> 00:46:24,270
recipe unless I actually upgrade again

00:46:21,990 --> 00:46:27,720
so I'll be honest we haven't reached

00:46:24,270 --> 00:46:30,210
version 1 for us yet so but I guess when

00:46:27,720 --> 00:46:32,130
we do again and again I'm speaking for

00:46:30,210 --> 00:46:35,180
an use case we have a lot of similar

00:46:32,130 --> 00:46:37,559
stuff so we will lock that thing up

00:46:35,180 --> 00:46:39,960
there's a new feature there's something

00:46:37,559 --> 00:47:01,589
we have to want to test out we will we

00:46:39,960 --> 00:47:03,319
will do it an hour so we don't have to

00:47:01,589 --> 00:47:06,690
convert them roar does it for us

00:47:03,319 --> 00:47:12,780
y-yeah moe there's a whole paragraph on

00:47:06,690 --> 00:47:16,430
that and our spec page and Rob can maybe

00:47:12,780 --> 00:47:20,369
say comment to why mo not Jason

00:47:16,430 --> 00:47:23,390
basically chose the animal because it's

00:47:20,369 --> 00:47:26,160
less code to write so if you're actually

00:47:23,390 --> 00:47:27,569
writing the template man you don't have

00:47:26,160 --> 00:47:30,750
to deal with like curly braces and that

00:47:27,569 --> 00:47:33,480
sort of thing it's more of just like a

00:47:30,750 --> 00:47:35,190
end user convenience thing if you want

00:47:33,480 --> 00:47:38,010
to write your templates in JSON it's

00:47:35,190 --> 00:47:42,470
fine there's nothing preventing me from

00:47:38,010 --> 00:47:42,470
doing that let's say you want to

00:47:43,320 --> 00:47:59,280
blind from look to this system you have

00:47:55,530 --> 00:48:04,680
to convert then go the other way as well

00:47:59,280 --> 00:48:06,960
CSUN is Valley mo so so you could just

00:48:04,680 --> 00:48:09,120
copy the JSON if you want or if you

00:48:06,960 --> 00:48:12,360
don't want to do that there's the

00:48:09,120 --> 00:48:14,100
convert functionality and eventually

00:48:12,360 --> 00:48:16,680
that's going to be something inside the

00:48:14,100 --> 00:48:19,050
UI so you just like go into pipeline

00:48:16,680 --> 00:48:20,700
configure and then like convert the

00:48:19,050 --> 00:48:22,500
template and you would do all that

00:48:20,700 --> 00:48:31,910
within within the UI and then you just

00:48:22,500 --> 00:48:31,910

YouTube URL: https://www.youtube.com/watch?v=JU5yFLzGWAE


