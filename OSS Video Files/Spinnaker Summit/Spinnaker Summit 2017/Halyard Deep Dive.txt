Title: Halyard Deep Dive
Publication date: 2017-09-22
Playlist: Spinnaker Summit 2017
Description: 
	CHUKA OKOYE, CLOUDERA

Spinnaker is a difficult system to run and operate; it takes many organizations weeks to get a PoC running, and whole teams to keep Spinnaker operational. We wanted to reduce this operational complexity both in onboarding and maintenance, and came up with “Halyard” to do so. Lars led the Halyard implementation, and will go into the weeds of what it does and how it works.

From Spinnaker Summit 2017
Captions: 
	00:00:00,170 --> 00:00:06,919
all right my name's Lars I work for the

00:00:04,520 --> 00:00:09,360
spanker team at Google thing there for

00:00:06,919 --> 00:00:13,860
about two years now since a little

00:00:09,360 --> 00:00:16,710
before it was open sourced through this

00:00:13,860 --> 00:00:18,810
toilet and working on my quick show of

00:00:16,710 --> 00:00:22,740
hands who's tried using Halligan

00:00:18,810 --> 00:00:24,420
I mean who hasn't tried using hired but

00:00:22,740 --> 00:00:27,240
who hasn't tried using halyard as

00:00:24,420 --> 00:00:29,820
running a spinnaker installation all

00:00:27,240 --> 00:00:41,579
right I'll talk to you later or if

00:00:29,820 --> 00:00:43,410
you're not convinced to use it started

00:00:41,579 --> 00:00:46,739
to realize that it's been difficult tool

00:00:43,410 --> 00:00:48,149
to administer for a number of reasons so

00:00:46,739 --> 00:00:50,840
there's a couple of problems and you can

00:00:48,149 --> 00:00:54,690
really break them up into two categories

00:00:50,840 --> 00:00:56,550
first one is so sounds like a tautology

00:00:54,690 --> 00:00:58,320
but spinnaker does require a lot of

00:00:56,550 --> 00:00:59,870
spinnaker specific knowledge you can

00:00:58,320 --> 00:01:02,190
spend a lot of time learning how to

00:00:59,870 --> 00:01:04,530
configure all the various micro services

00:01:02,190 --> 00:01:06,030
there are hundreds of configuration

00:01:04,530 --> 00:01:08,369
parameters that actually makes sense for

00:01:06,030 --> 00:01:09,299
a user to touch and change as they

00:01:08,369 --> 00:01:12,689
figure out how they want to run

00:01:09,299 --> 00:01:16,290
spinnaker and keeping all that document

00:01:12,689 --> 00:01:18,360
up to date no easy task and the next one

00:01:16,290 --> 00:01:20,640
we can all agree micro services are

00:01:18,360 --> 00:01:22,320
generally hard to manage spinnaker is

00:01:20,640 --> 00:01:27,000
made up of nine or ten of them depending

00:01:22,320 --> 00:01:28,470
on how you deploy it if you never

00:01:27,000 --> 00:01:30,360
require your ops team to also manage

00:01:28,470 --> 00:01:32,400
whatever they're already running and

00:01:30,360 --> 00:01:33,479
then spinnaker on top of that it's quite

00:01:32,400 --> 00:01:35,479
a bit to ask them especially when

00:01:33,479 --> 00:01:38,490
there's no good page path for how to

00:01:35,479 --> 00:01:42,930
manage the deployment of spinnaker so

00:01:38,490 --> 00:01:44,040
just solve these problems we said a lot

00:01:42,930 --> 00:01:45,210
of the spinnaker should acknowledge is

00:01:44,040 --> 00:01:47,579
something that we can codify it's

00:01:45,210 --> 00:01:51,060
something that we can write contracts

00:01:47,579 --> 00:01:52,799
for we can say what good spinnaker

00:01:51,060 --> 00:01:54,030
configuration looks like what bad

00:01:52,799 --> 00:01:57,030
spinning your configuration looks like

00:01:54,030 --> 00:01:59,189
and as much as possible try to guide

00:01:57,030 --> 00:02:02,610
users the process of configuring your

00:01:59,189 --> 00:02:04,020
spinnaker installation and - spinnaker

00:02:02,610 --> 00:02:05,130
is actually a tool that's made for

00:02:04,020 --> 00:02:06,899
managing the deployment of micro

00:02:05,130 --> 00:02:08,010
services so in the case where you're

00:02:06,899 --> 00:02:09,840
running a distributed spending

00:02:08,010 --> 00:02:12,000
why not try and leverage spinnaker

00:02:09,840 --> 00:02:16,440
itself to help me deploy and keep it up

00:02:12,000 --> 00:02:18,480
to date so for those of you who haven't

00:02:16,440 --> 00:02:19,620
seen spinnaker before I have a little

00:02:18,480 --> 00:02:21,630
recording here I'm going to walk you

00:02:19,620 --> 00:02:23,040
through showing you so that's been a

00:02:21,630 --> 00:02:24,380
pallet for those you haven't seen how

00:02:23,040 --> 00:02:27,870
here before it makes a lot more sense

00:02:24,380 --> 00:02:29,040
you can see so basically it's a sea life

00:02:27,870 --> 00:02:30,360
for the most part or when you interact

00:02:29,040 --> 00:02:31,530
with it here what I'm doing is I'm

00:02:30,360 --> 00:02:33,450
saying I want to enable the Google

00:02:31,530 --> 00:02:36,210
provider I want to interact with Google

00:02:33,450 --> 00:02:38,190
resources next thing I try to do is I

00:02:36,210 --> 00:02:41,790
say all right the Google provider I want

00:02:38,190 --> 00:02:45,710
to add an account and doing so I call it

00:02:41,790 --> 00:02:48,930
my GCE account and I'm gonna use this

00:02:45,710 --> 00:02:50,340
project of mine right here first thing

00:02:48,930 --> 00:02:51,660
he does is it tries to check like okay

00:02:50,340 --> 00:02:52,980
are your credentials that you supplied

00:02:51,660 --> 00:02:54,570
me with you're implicitly okay

00:02:52,980 --> 00:02:56,370
in this case they're not the ones that

00:02:54,570 --> 00:02:57,360
are in my environment wouldn't work and

00:02:56,370 --> 00:02:59,220
this is something that typically you

00:02:57,360 --> 00:03:01,620
wouldn't see until bankers come up and

00:02:59,220 --> 00:03:03,660
some weird statement log says something

00:03:01,620 --> 00:03:05,820
failed so here it says try to expose a

00:03:03,660 --> 00:03:07,320
flight more explicit credentials that's

00:03:05,820 --> 00:03:09,090
what I do I use this Jason path

00:03:07,320 --> 00:03:10,560
parameter I supply it with a credential

00:03:09,090 --> 00:03:14,250
file it checks to make sure the scopes

00:03:10,560 --> 00:03:15,420
are okay and the accounts been added so

00:03:14,250 --> 00:03:21,120
here it is verify that I list the

00:03:15,420 --> 00:03:24,600
accounts and looks like my DC account

00:03:21,120 --> 00:03:26,400
was added so what it's doing here it's

00:03:24,600 --> 00:03:27,870
the first thing it does is from each

00:03:26,400 --> 00:03:30,690
service that tries to instantiate

00:03:27,870 --> 00:03:32,850
credentials for spanker it actually

00:03:30,690 --> 00:03:35,100
takes that part of the code in the jar

00:03:32,850 --> 00:03:36,120
and ports into halyard actually uses

00:03:35,100 --> 00:03:37,440
that to try and instantiate your

00:03:36,120 --> 00:03:39,870
credentials so if that succeeds you're

00:03:37,440 --> 00:03:41,310
already on the right track then tries to

00:03:39,870 --> 00:03:42,900
use these to do some simple things like

00:03:41,310 --> 00:03:45,239
maybe like listing some regions it check

00:03:42,900 --> 00:03:46,590
some I am scopes it makes sure that when

00:03:45,239 --> 00:03:47,880
this thing actually runs you're not

00:03:46,590 --> 00:03:49,860
going to take out some part of the

00:03:47,880 --> 00:03:51,300
production spinnaker on accident and

00:03:49,860 --> 00:03:52,830
then finally because we see a lot of

00:03:51,300 --> 00:03:55,410
things go wrong when you configure

00:03:52,830 --> 00:03:58,050
spinnaker of all these things that we've

00:03:55,410 --> 00:04:00,930
seen we try to codify and we put Reda

00:03:58,050 --> 00:04:01,950
shion's and I don't have a recording of

00:04:00,930 --> 00:04:04,440
this it's a little hard to follow but

00:04:01,950 --> 00:04:05,880
for example when you configure

00:04:04,440 --> 00:04:07,140
kubernetes if you import your

00:04:05,880 --> 00:04:09,120
credentials in the rock

00:04:07,140 --> 00:04:11,730
ones that expect gpiod to be present

00:04:09,120 --> 00:04:13,290
inside your kubernetes cluster spinnaker

00:04:11,730 --> 00:04:15,300
one startup and we know what that looks

00:04:13,290 --> 00:04:17,790
like so when we see credentials in that

00:04:15,300 --> 00:04:19,200
format right away says hey here's a

00:04:17,790 --> 00:04:21,360
command to redownload your credentials

00:04:19,200 --> 00:04:27,090
from this thing and then everything

00:04:21,360 --> 00:04:28,920
should work for hub just fine so the

00:04:27,090 --> 00:04:31,080
biggest benefit is that you now have

00:04:28,920 --> 00:04:32,610
just one file that you're managing that

00:04:31,080 --> 00:04:35,400
describes exactly have spinnaker should

00:04:32,610 --> 00:04:38,670
run and this pilot typically lives in

00:04:35,400 --> 00:04:40,110
slash slash config it's fully

00:04:38,670 --> 00:04:41,730
declarative so once you've defined it

00:04:40,110 --> 00:04:43,740
once you can use it to spin up a

00:04:41,730 --> 00:04:46,170
spinnaker and every time you do every

00:04:43,740 --> 00:04:48,660
time you reapply your deployment it'll

00:04:46,170 --> 00:04:51,870
look identical so you can very easily

00:04:48,660 --> 00:04:54,540
have spanker managed across environments

00:04:51,870 --> 00:04:55,710
you can have no concern that if

00:04:54,540 --> 00:04:58,980
spinnaker goes down that you can bring

00:04:55,710 --> 00:05:01,950
it up exactly the way it was before and

00:04:58,980 --> 00:05:04,080
like I mentioned earlier all the

00:05:01,950 --> 00:05:05,280
validation that halyards doing happens

00:05:04,080 --> 00:05:07,740
for the most part all the things we can

00:05:05,280 --> 00:05:10,710
catch before you accidentally do break

00:05:07,740 --> 00:05:12,450
something and this is probably the most

00:05:10,710 --> 00:05:14,370
one of the more gallivant part the

00:05:12,450 --> 00:05:16,200
spanker because a lot of the services

00:05:14,370 --> 00:05:17,490
really have no way of catching if the

00:05:16,200 --> 00:05:19,530
credentials or the configuration you

00:05:17,490 --> 00:05:20,970
supply and there's a lot of different

00:05:19,530 --> 00:05:25,050
ways you integrate with various services

00:05:20,970 --> 00:05:26,550
like slack or Google and all these

00:05:25,050 --> 00:05:27,810
things the service might start up

00:05:26,550 --> 00:05:29,040
looking at first and then suddenly it

00:05:27,810 --> 00:05:31,169
starts getting health checks or it never

00:05:29,040 --> 00:05:32,580
starts up and there's no good no good

00:05:31,169 --> 00:05:35,370
way to understand what you did wrong or

00:05:32,580 --> 00:05:37,410
fix it and finally depending on what

00:05:35,370 --> 00:05:40,110
cloud provider how your deploy spinnaker

00:05:37,410 --> 00:05:41,960
to the credentials and the secrets are

00:05:40,110 --> 00:05:44,880
distributed by the best practice

00:05:41,960 --> 00:05:49,710
security tools available for that

00:05:44,880 --> 00:05:53,610
platform so another big thing to mention

00:05:49,710 --> 00:05:55,290
is all the documentation that we have on

00:05:53,610 --> 00:05:56,640
the dock site especially around how to

00:05:55,290 --> 00:05:58,620
configure spanker and there's like

00:05:56,640 --> 00:06:00,000
thousands of parameters all these are

00:05:58,620 --> 00:06:01,890
scraped from the halyard CLI and

00:06:00,000 --> 00:06:04,229
automatically generated every time we

00:06:01,890 --> 00:06:06,090
release spinnaker and halyard so there's

00:06:04,229 --> 00:06:07,590
always an up-to-date description of how

00:06:06,090 --> 00:06:09,840
to configure every little bit of spanker

00:06:07,590 --> 00:06:11,790
sitting on the spinnaker dockside and

00:06:09,840 --> 00:06:13,979
these apply to halyard but I think that

00:06:11,790 --> 00:06:15,390
pretty much directly to the spinnaker

00:06:13,979 --> 00:06:15,720
sub service config so if you want to use

00:06:15,390 --> 00:06:18,650
that

00:06:15,720 --> 00:06:21,780
that you can configure it like that too

00:06:18,650 --> 00:06:26,510
so we can start to peel back the curtain

00:06:21,780 --> 00:06:28,650
and look what it's doing so all the

00:06:26,510 --> 00:06:30,180
validation and configuration generation

00:06:28,650 --> 00:06:33,120
and the deployment of spanker actually

00:06:30,180 --> 00:06:34,530
happens inside this how you're Damon the

00:06:33,120 --> 00:06:36,780
reason why we did it this way and not

00:06:34,530 --> 00:06:39,990
just squish it all into one see alive is

00:06:36,780 --> 00:06:41,580
one it's convenient in many cases to

00:06:39,990 --> 00:06:43,080
spin up the demon on a remote host and

00:06:41,580 --> 00:06:44,880
have it configured spanker there and

00:06:43,080 --> 00:06:46,890
then speak to it from a seal or on a

00:06:44,880 --> 00:06:48,510
different machine and - we also want to

00:06:46,890 --> 00:06:49,980
have all that same validation and

00:06:48,510 --> 00:06:52,950
configuration generation and everything

00:06:49,980 --> 00:06:56,250
be fronted by a UI that doesn't exist

00:06:52,950 --> 00:06:57,360
yet might exist at some time seems like

00:06:56,250 --> 00:07:01,170
some people aren't rested in it if you

00:06:57,360 --> 00:07:02,730
guys are love to hear about it and the

00:07:01,170 --> 00:07:04,530
idea is that all this knowledge

00:07:02,730 --> 00:07:06,690
shouldn't be living just inside a tool

00:07:04,530 --> 00:07:09,990
that you can only interact with BSE Ally

00:07:06,690 --> 00:07:11,340
but pretty much everything of like

00:07:09,990 --> 00:07:15,680
everything noteworthy happens inside

00:07:11,340 --> 00:07:19,440
this demon and this how config file so

00:07:15,680 --> 00:07:20,430
talk a little bit about it there's a lot

00:07:19,440 --> 00:07:22,290
of the operations like deploying

00:07:20,430 --> 00:07:24,300
spinnaker validating some of the more

00:07:22,290 --> 00:07:26,340
complicated credulous objects they take

00:07:24,300 --> 00:07:29,370
a while so most of the communication

00:07:26,340 --> 00:07:33,090
between the daemon and the the COI is

00:07:29,370 --> 00:07:35,250
asynchronous so you do some thing starts

00:07:33,090 --> 00:07:38,370
running and eventually it succeeds or

00:07:35,250 --> 00:07:39,720
fails and inside the CLI again it's a

00:07:38,370 --> 00:07:42,150
very thin wrapper all it really does is

00:07:39,720 --> 00:07:45,090
it has these little operation handlers

00:07:42,150 --> 00:07:46,950
it says like I want to do something I

00:07:45,090 --> 00:07:49,260
want to say if it succeeds do this if it

00:07:46,950 --> 00:07:51,450
fails do that and then it just executes

00:07:49,260 --> 00:07:54,650
these on your behalf so easy enough to

00:07:51,450 --> 00:07:57,120
replicate with your own tool and kini -

00:07:54,650 --> 00:07:59,190
and then so from the from Dana's

00:07:57,120 --> 00:08:02,010
perspective keep in mind that everything

00:07:59,190 --> 00:08:04,080
in here lives inside that one Hal config

00:08:02,010 --> 00:08:07,729
file as a centralized declarative

00:08:04,080 --> 00:08:10,380
description of your spinnaker deployment

00:08:07,729 --> 00:08:14,090
everything in there falls into a bunch

00:08:10,380 --> 00:08:16,080
of classes each of these supplies some

00:08:14,090 --> 00:08:18,260
hooks into making it really easy to

00:08:16,080 --> 00:08:20,220
search and validate across these nodes

00:08:18,260 --> 00:08:21,430
might sound like a lot of detail going

00:08:20,220 --> 00:08:22,570
to describe a minute how

00:08:21,430 --> 00:08:24,250
how it actually does a lot of the

00:08:22,570 --> 00:08:25,480
validation so you basically you can

00:08:24,250 --> 00:08:26,950
struck these filters and then they're

00:08:25,480 --> 00:08:28,510
it's really easy to go across all your

00:08:26,950 --> 00:08:32,230
spending your configuration make sure

00:08:28,510 --> 00:08:34,000
that configuration in the service will

00:08:32,230 --> 00:08:35,710
work correctly if you can figure out

00:08:34,000 --> 00:08:41,980
driver like this and all of these things

00:08:35,710 --> 00:08:43,630
are validated holistic way so they get

00:08:41,980 --> 00:08:45,700
basically there's like two key parts of

00:08:43,630 --> 00:08:47,050
the validation every time you change one

00:08:45,700 --> 00:08:49,000
of these nodes inside your how config

00:08:47,050 --> 00:08:52,780
you want to make sure that this is

00:08:49,000 --> 00:08:53,920
validated and also validated if an edit

00:08:52,780 --> 00:08:56,830
is made to have childhood and that

00:08:53,920 --> 00:08:59,260
happened recently and then to every kind

00:08:56,830 --> 00:09:01,420
of validation you would do it happens to

00:08:59,260 --> 00:09:03,250
one specific type of node or could be a

00:09:01,420 --> 00:09:06,670
super type of a node so to make that

00:09:03,250 --> 00:09:08,880
clear up see you have like a config you

00:09:06,670 --> 00:09:11,020
have a Google provider enabled you have

00:09:08,880 --> 00:09:13,120
some accounts it looks very similar to

00:09:11,020 --> 00:09:16,390
your ever configured that's not

00:09:13,120 --> 00:09:19,450
intentionally and you say you have my GC

00:09:16,390 --> 00:09:23,380
account and in there you have this

00:09:19,450 --> 00:09:25,090
account that Jason so see me in edit

00:09:23,380 --> 00:09:29,320
changes new account may be rotating

00:09:25,090 --> 00:09:31,300
credentials or do you need to change

00:09:29,320 --> 00:09:33,400
your scopes me download a new key and

00:09:31,300 --> 00:09:36,310
you do so and the very first thing you

00:09:33,400 --> 00:09:37,960
do is probably does for you is it checks

00:09:36,310 --> 00:09:39,460
to make sure that well these credentials

00:09:37,960 --> 00:09:42,640
actually have the right scope so it says

00:09:39,460 --> 00:09:44,170
okay this Jason key file works and in

00:09:42,640 --> 00:09:46,210
that case goes up the class hierarchy

00:09:44,170 --> 00:09:47,860
and says hey new top-level account

00:09:46,210 --> 00:09:50,080
properties that are required for

00:09:47,860 --> 00:09:51,730
everything I call a driver in Roscoe do

00:09:50,080 --> 00:09:55,300
these work so does the name match a

00:09:51,730 --> 00:09:56,590
certain pattern do scopes for Fiat are

00:09:55,300 --> 00:09:59,410
they applied properly to this account

00:09:56,590 --> 00:10:00,850
and then you step up and you say with

00:09:59,410 --> 00:10:03,010
this visionary note validator you make

00:10:00,850 --> 00:10:05,080
sure that fields that are version

00:10:03,010 --> 00:10:06,820
specific inside spankers so if you try

00:10:05,080 --> 00:10:08,590
to enable a property in spinnaker that

00:10:06,820 --> 00:10:10,690
wasn't available yet in a certain

00:10:08,590 --> 00:10:12,130
version or something that doesn't work

00:10:10,690 --> 00:10:14,020
correctly or you can't enable for a

00:10:12,130 --> 00:10:16,480
certain version of spanker are actually

00:10:14,020 --> 00:10:18,340
being used correctly I mean you're up

00:10:16,480 --> 00:10:20,710
and you validate the provider you

00:10:18,340 --> 00:10:22,330
validate any sort of bakery edits you

00:10:20,710 --> 00:10:24,880
may make a move made by editing this

00:10:22,330 --> 00:10:27,220
account and began you passed another

00:10:24,880 --> 00:10:28,420
validator and this basically keeps on

00:10:27,220 --> 00:10:30,010
going until you've walked all the way up

00:10:28,420 --> 00:10:31,750
to the top of here how can say can make

00:10:30,010 --> 00:10:31,930
sure that anything possibly affected by

00:10:31,750 --> 00:10:32,660
this

00:10:31,930 --> 00:10:34,220
edit

00:10:32,660 --> 00:10:38,870
we'll still work after you redeploy

00:10:34,220 --> 00:10:40,190
spinnaker so now that how it's done all

00:10:38,870 --> 00:10:41,960
the heavy lifting of making sure that

00:10:40,190 --> 00:10:44,900
everything that you configured it will

00:10:41,960 --> 00:10:46,280
look okay it's time to generate all of

00:10:44,900 --> 00:10:48,140
that configuration inside of spinnaker

00:10:46,280 --> 00:10:49,550
this is just a small subset of the files

00:10:48,140 --> 00:10:52,490
and a typical deployment how you'll

00:10:49,550 --> 00:10:54,260
generate in 50 to 100 files and that's

00:10:52,490 --> 00:10:56,150
Dean to manage yourself which is why

00:10:54,260 --> 00:11:02,090
it's really nice to have a tool that

00:10:56,150 --> 00:11:03,980
does all this in one spot for you so to

00:11:02,090 --> 00:11:06,050
break down the process a little bit a

00:11:03,980 --> 00:11:08,870
big part of what we did for spinnaker

00:11:06,050 --> 00:11:09,830
with the help of the community is try to

00:11:08,870 --> 00:11:11,870
come up with these like version

00:11:09,830 --> 00:11:13,850
top-level releases of spinnaker so

00:11:11,870 --> 00:11:16,100
previously you were installing various

00:11:13,850 --> 00:11:17,540
sub services at hawk there's no

00:11:16,100 --> 00:11:19,970
guarantee they were validated at those

00:11:17,540 --> 00:11:21,560
respective versions we now store all

00:11:19,970 --> 00:11:23,860
those versions at which we validate and

00:11:21,560 --> 00:11:25,970
assign a bucket and then when you go to

00:11:23,860 --> 00:11:27,500
actually deploy one of these the first

00:11:25,970 --> 00:11:28,970
thing however does is check like okay so

00:11:27,500 --> 00:11:31,730
for this version of spinnaker how do i

00:11:28,970 --> 00:11:34,370
generate its configuration so once you

00:11:31,730 --> 00:11:35,960
grab that you grab a sort of like a base

00:11:34,370 --> 00:11:37,240
configuration file for every single one

00:11:35,960 --> 00:11:39,650
of the sub services and these are

00:11:37,240 --> 00:11:41,390
determined when you build that sub

00:11:39,650 --> 00:11:42,950
service at that version you take

00:11:41,390 --> 00:11:44,660
whatever is checked in for that versions

00:11:42,950 --> 00:11:49,250
config and then uploaded it to this

00:11:44,660 --> 00:11:50,810
top-level mouth config bucket so there's

00:11:49,250 --> 00:11:54,080
some handy things in here that happens

00:11:50,810 --> 00:11:56,600
to it for example recently in a spring

00:11:54,080 --> 00:11:59,600
boot upgrade for 8 I think's happened

00:11:56,600 --> 00:12:02,480
earlier this week the way you configure

00:11:59,600 --> 00:12:04,610
Cajuns changed and you either read the

00:12:02,480 --> 00:12:06,410
change log very meticulously or and

00:12:04,610 --> 00:12:08,210
because of the commit stream and see how

00:12:06,410 --> 00:12:10,160
do you correctly configured 8 now or you

00:12:08,210 --> 00:12:13,280
can have halyard automatically generate

00:12:10,160 --> 00:12:16,460
the authentication profile for you if

00:12:13,280 --> 00:12:21,440
you don't do that then a wok breaks for

00:12:16,460 --> 00:12:23,470
example and then finally there how it

00:12:21,440 --> 00:12:25,580
needs to take into account some

00:12:23,470 --> 00:12:27,680
environment specific details so things

00:12:25,580 --> 00:12:31,130
like if you're running on kubernetes

00:12:27,680 --> 00:12:33,350
your endpoints look one way if you make

00:12:31,130 --> 00:12:35,480
sense but if you configure TLS on

00:12:33,350 --> 00:12:37,070
localhost they look different or if

00:12:35,480 --> 00:12:38,660
you're running spinnaker and distribute

00:12:37,070 --> 00:12:40,160
environment where you run a console the

00:12:38,660 --> 00:12:42,140
endpoints look different it clogs all it

00:12:40,160 --> 00:12:44,110
in for you there's a couple of oddities

00:12:42,140 --> 00:12:48,730
for how configurations bounce it across

00:12:44,110 --> 00:12:51,519
platforms do you deploy on deck on

00:12:48,730 --> 00:12:55,360
kubernetes container there's one way to

00:12:51,519 --> 00:12:56,649
put config in vs view it and on a local

00:12:55,360 --> 00:12:58,180
machine and there's a bunch of different

00:12:56,649 --> 00:13:00,610
ways you supply environment variables

00:12:58,180 --> 00:13:02,829
and this list goes on and on but at the

00:13:00,610 --> 00:13:05,560
end it's a kind unfortunate side effect

00:13:02,829 --> 00:13:07,029
is that you need to tell spinnaker where

00:13:05,560 --> 00:13:10,990
it's gonna run defer to be configured

00:13:07,029 --> 00:13:13,089
correctly and then finally no fancy

00:13:10,990 --> 00:13:14,620
diagram here something interesting going

00:13:13,089 --> 00:13:16,779
on but if any of the configuration that

00:13:14,620 --> 00:13:18,670
you have maybe for a prior installation

00:13:16,779 --> 00:13:20,019
of spinnaker or something that you can't

00:13:18,670 --> 00:13:21,730
craft it or isn't supported inside

00:13:20,019 --> 00:13:23,440
Callear you can just apply that directly

00:13:21,730 --> 00:13:27,790
to halyard and it uses that in place of

00:13:23,440 --> 00:13:29,800
what it generates for that service so

00:13:27,790 --> 00:13:32,410
this is the maybe the more interesting

00:13:29,800 --> 00:13:33,670
part so the next thing you generated all

00:13:32,410 --> 00:13:35,110
this configuration and if you're

00:13:33,670 --> 00:13:37,269
deploying to a distributed environment

00:13:35,110 --> 00:13:40,390
how you make sure to leverage spinnaker

00:13:37,269 --> 00:13:42,420
do that for you so the first thing that

00:13:40,390 --> 00:13:44,950
does is it deploys like a bootstrapping

00:13:42,420 --> 00:13:46,959
instance of spinnaker if you can carry

00:13:44,950 --> 00:13:48,839
it correctly this is like the smallest

00:13:46,959 --> 00:13:51,160
bit of spinnaker you need and able to

00:13:48,839 --> 00:13:52,899
actually run pipelines so you have like

00:13:51,160 --> 00:13:55,300
car driver with a provider integration

00:13:52,899 --> 00:13:57,730
point work up the orchestration engine

00:13:55,300 --> 00:14:00,300
and then red is tagged as a storage

00:13:57,730 --> 00:14:02,260
source for both work on cloud driver and

00:14:00,300 --> 00:14:03,970
once that's up and running in that host

00:14:02,260 --> 00:14:06,279
environment how they can start issuing

00:14:03,970 --> 00:14:09,339
commands to that the same way a user

00:14:06,279 --> 00:14:11,920
would through the deck UI so once that's

00:14:09,339 --> 00:14:14,320
running creates custom pipelines for

00:14:11,920 --> 00:14:16,120
each of these and again it's important

00:14:14,320 --> 00:14:18,579
to note that the versions of each the

00:14:16,120 --> 00:14:20,680
sub components that are installed match

00:14:18,579 --> 00:14:22,540
those validated versions that with other

00:14:20,680 --> 00:14:23,769
integration tests we've said like the

00:14:22,540 --> 00:14:25,930
spa driver and the skate work together

00:14:23,769 --> 00:14:27,699
so it's okay to deployed at this version

00:14:25,930 --> 00:14:32,110
of spinnaker these versions of V sub

00:14:27,699 --> 00:14:33,279
services so it's important to note if

00:14:32,110 --> 00:14:36,130
you can really with spanker there's like

00:14:33,279 --> 00:14:38,170
this clone operation where if you supply

00:14:36,130 --> 00:14:40,720
if you make a change to like server

00:14:38,170 --> 00:14:43,230
group for example and you then issue a

00:14:40,720 --> 00:14:44,709
clone that change is carried over so in

00:14:43,230 --> 00:14:46,540
in halyard

00:14:44,709 --> 00:14:48,370
when you make a change to the way your

00:14:46,540 --> 00:14:50,589
spinnaker this configured maybe you want

00:14:48,370 --> 00:14:52,449
to change the support that something

00:14:50,589 --> 00:14:54,819
runs on or you make a change to a

00:14:52,449 --> 00:14:57,280
service that's backed by or you change a

00:14:54,819 --> 00:14:59,080
network policy to change some security

00:14:57,280 --> 00:15:00,760
whatnot and you actually go to deploy

00:14:59,080 --> 00:15:02,200
again with how your everything's left

00:15:00,760 --> 00:15:04,660
intact that you've changed except for

00:15:02,200 --> 00:15:08,260
things like which container image you're

00:15:04,660 --> 00:15:09,850
running so the idea is that you deploy

00:15:08,260 --> 00:15:11,290
spinnaker if you make any edits in each

00:15:09,850 --> 00:15:13,290
of your environment and those are kept

00:15:11,290 --> 00:15:16,330
in place forever

00:15:13,290 --> 00:15:17,530
so in this special cases if you're not

00:15:16,330 --> 00:15:19,150
using how you don't want to use how

00:15:17,530 --> 00:15:21,820
these slides will be online this is

00:15:19,150 --> 00:15:24,040
probably important so for one if you're

00:15:21,820 --> 00:15:25,750
running or code with v3 pipelines you

00:15:24,040 --> 00:15:28,780
have to explicitly tell it when to drain

00:15:25,750 --> 00:15:30,370
work it's important to note because if

00:15:28,780 --> 00:15:31,510
you just shut it down there's a good

00:15:30,370 --> 00:15:34,360
chance that some of the work that's

00:15:31,510 --> 00:15:35,500
ongoing some of the stages will be

00:15:34,360 --> 00:15:37,270
drained properly this happens pretty

00:15:35,500 --> 00:15:39,190
quickly it takes maybe a couple seconds

00:15:37,270 --> 00:15:40,690
each time you do it but it's important

00:15:39,190 --> 00:15:43,030
to note that when you are running a

00:15:40,690 --> 00:15:46,060
workout you do have to tell the shutdown

00:15:43,030 --> 00:15:47,710
if you aren't running v3 pipeline's yet

00:15:46,060 --> 00:15:50,070
or if you have a mix of the two you also

00:15:47,710 --> 00:15:52,780
have to explicitly disable it and then

00:15:50,070 --> 00:15:54,910
wait for all the executions on it every

00:15:52,780 --> 00:15:58,120
particular instance stopped running and

00:15:54,910 --> 00:16:02,350
then it can safely be killed off and

00:15:58,120 --> 00:16:04,750
then finally Brosco also has some

00:16:02,350 --> 00:16:07,930
special update semantics for various

00:16:04,750 --> 00:16:10,810
reasons it's really difficult for nodes

00:16:07,930 --> 00:16:14,470
in Roscoe to exchange actor workloads so

00:16:10,810 --> 00:16:15,910
once you basically kick off a Packer

00:16:14,470 --> 00:16:17,410
build it's really difficult to take that

00:16:15,910 --> 00:16:18,520
and move it to another instance so

00:16:17,410 --> 00:16:20,830
Roscoe is very stable

00:16:18,520 --> 00:16:23,020
you can't safely shut down Roscoe I

00:16:20,830 --> 00:16:24,850
forgot to mention you don't want to

00:16:23,020 --> 00:16:28,420
restart right now you won't do that and

00:16:24,850 --> 00:16:30,250
that stays up and running for you so

00:16:28,420 --> 00:16:33,010
it's something wrong like you you roll

00:16:30,250 --> 00:16:34,780
out a new version of spanker maybe

00:16:33,010 --> 00:16:36,970
misconfigured something that wasn't by

00:16:34,780 --> 00:16:38,260
halyard or you realize something in that

00:16:36,970 --> 00:16:38,970
version of spinnaker isn't right and you

00:16:38,260 --> 00:16:41,740
want to rollback

00:16:38,970 --> 00:16:44,620
you makes it really easy for you as well

00:16:41,740 --> 00:16:46,390
when it deploys with a red-black all

00:16:44,620 --> 00:16:46,870
those versions of those sub services of

00:16:46,390 --> 00:16:49,110
spanker

00:16:46,870 --> 00:16:53,470
it leaves around an old copy with a

00:16:49,110 --> 00:16:54,580
scale down to size zero so basically you

00:16:53,470 --> 00:16:56,920
can very quickly like within minutes

00:16:54,580 --> 00:17:04,390
have your prior version of spinnaker up

00:16:56,920 --> 00:17:06,810
and running again we have to shred this

00:17:04,390 --> 00:17:06,810
too

00:17:07,540 --> 00:17:13,339
it's a good point something halyard

00:17:09,730 --> 00:17:13,819
should do but doesn't do that's a good

00:17:13,339 --> 00:17:16,670
point

00:17:13,819 --> 00:17:19,040
halyard a good point there are flags you

00:17:16,670 --> 00:17:20,689
can configure for it too doesn't do it

00:17:19,040 --> 00:17:22,339
automatically because I didn't note you

00:17:20,689 --> 00:17:24,110
this time but you can say like I want to

00:17:22,339 --> 00:17:25,670
flush all my infrastructure caches why

00:17:24,110 --> 00:17:27,500
update route driver because maybe some

00:17:25,670 --> 00:17:28,700
schema change happens or maybe you've

00:17:27,500 --> 00:17:30,920
deleted accounts that for whatever

00:17:28,700 --> 00:17:32,809
reason are persisting Redis how you can

00:17:30,920 --> 00:17:34,730
safely go on and just delete those t's

00:17:32,809 --> 00:17:35,870
relevant to that change to make sure

00:17:34,730 --> 00:17:37,550
that you don't like sometimes you'll

00:17:35,870 --> 00:17:39,260
make a change in car driver redeploy it

00:17:37,550 --> 00:17:40,400
and you'll see for whatever reason you

00:17:39,260 --> 00:17:42,500
still have accounts sitting in the UI

00:17:40,400 --> 00:17:43,700
that really don't exist anymore just

00:17:42,500 --> 00:17:45,460
because cloud driver can't pick up on

00:17:43,700 --> 00:17:48,790
the fact that you deleted the accountant

00:17:45,460 --> 00:17:52,130
Howard makes that easy for you to delete

00:17:48,790 --> 00:17:53,990
so again rollback pipelines are

00:17:52,130 --> 00:17:55,850
generated and specific to you sub

00:17:53,990 --> 00:18:00,350
service with whatever weird intricacies

00:17:55,850 --> 00:18:02,270
they have another benefit here is how

00:18:00,350 --> 00:18:04,400
your tries to make easier to debug so

00:18:02,270 --> 00:18:05,660
for example I can either connect one of

00:18:04,400 --> 00:18:07,790
the low bouncers or to one of the

00:18:05,660 --> 00:18:11,240
specific instances here I connect to a

00:18:07,790 --> 00:18:12,860
gate load balancer and I say alright

00:18:11,240 --> 00:18:17,120
once the connection is open I'm gonna

00:18:12,860 --> 00:18:20,000
try and grab some now what's it called

00:18:17,120 --> 00:18:22,040
some some end point information and I

00:18:20,000 --> 00:18:23,480
know the connections open with one

00:18:22,040 --> 00:18:26,960
command this works across all platforms

00:18:23,480 --> 00:18:32,090
you can say for example show me what's

00:18:26,960 --> 00:18:33,380
going on inside it Redis and it

00:18:32,090 --> 00:18:35,270
basically spits everything out for you

00:18:33,380 --> 00:18:36,740
and tell you it sets up like this to

00:18:35,270 --> 00:18:38,210
make it easy to figure out if you are

00:18:36,740 --> 00:18:39,980
doing something can see where you spend

00:18:38,210 --> 00:18:42,350
your configuration to see what's going

00:18:39,980 --> 00:18:44,450
on also across all the various platforms

00:18:42,350 --> 00:18:46,960
it make sure that you can very easily

00:18:44,450 --> 00:18:49,160
collect logs from what's been deployed

00:18:46,960 --> 00:18:50,660
inside your car so you say like I want

00:18:49,160 --> 00:18:53,710
to get logs for every single instance of

00:18:50,660 --> 00:18:53,710
crowd nerve that's running right now

00:18:53,950 --> 00:19:04,940
drivers and fetch my logs and put them

00:18:56,179 --> 00:19:06,080
in a known place and not very

00:19:04,940 --> 00:19:08,470
interesting but we can look at the

00:19:06,080 --> 00:19:08,470
contents

00:19:14,110 --> 00:19:19,039
there you have it

00:19:16,250 --> 00:19:21,110
other things configuring monitoring

00:19:19,039 --> 00:19:23,240
inside of spinnaker can sometimes be

00:19:21,110 --> 00:19:25,330
painful you have to attach a sidecar to

00:19:23,240 --> 00:19:30,019
every single service that you're running

00:19:25,330 --> 00:19:32,120
this could be a we have a pre-built

00:19:30,019 --> 00:19:34,610
sidecar called spinnaker monitoring

00:19:32,120 --> 00:19:36,169
configuring it's uneasy each each

00:19:34,610 --> 00:19:37,399
sidecar you need special configuration

00:19:36,169 --> 00:19:39,529
depending on what service is talking to

00:19:37,399 --> 00:19:41,149
it's all documented but again it's just

00:19:39,529 --> 00:19:42,470
much easier to say like I want to enable

00:19:41,149 --> 00:19:43,909
stack driver monitoring

00:19:42,470 --> 00:19:46,549
I've how you'd set up everything that

00:19:43,909 --> 00:19:47,840
needs to be set up and then run apply

00:19:46,549 --> 00:19:49,070
this appointment and to make sure that

00:19:47,840 --> 00:19:50,629
everything comes up again but now if

00:19:49,070 --> 00:19:52,700
this you're attached and spitting out

00:19:50,629 --> 00:19:55,700
logs to dashboards in the relevant

00:19:52,700 --> 00:19:56,899
system that you care about and then last

00:19:55,700 --> 00:19:59,240
thing this isn't implemented but it

00:19:56,899 --> 00:20:00,919
should be soon there's easier scaling of

00:19:59,240 --> 00:20:03,740
spinnaker to like there's creative ways

00:20:00,919 --> 00:20:06,710
to split out the sub services by their

00:20:03,740 --> 00:20:08,299
their what they need to do like for

00:20:06,710 --> 00:20:10,190
example you can have one incidence of

00:20:08,299 --> 00:20:12,350
cloud driver that only serves cached

00:20:10,190 --> 00:20:13,909
information that's service by gate so

00:20:12,350 --> 00:20:16,490
anytime you have a request to the URI or

00:20:13,909 --> 00:20:18,980
from worker it comes through and gate

00:20:16,490 --> 00:20:20,899
comes back and says I'm willing to talk

00:20:18,980 --> 00:20:22,759
to the pilot driver that has cached info

00:20:20,899 --> 00:20:24,350
and you can have one cloud driver which

00:20:22,759 --> 00:20:28,429
maybe was doing a time heavy lifting

00:20:24,350 --> 00:20:30,200
that does hold the caching of all the

00:20:28,429 --> 00:20:31,399
resources which can be quite slow you

00:20:30,200 --> 00:20:32,750
can scale that however you want to and

00:20:31,399 --> 00:20:34,759
it doesn't have to worry about taking

00:20:32,750 --> 00:20:36,309
requests from work or a gate and now you

00:20:34,759 --> 00:20:41,059
can pretty much set this up for you

00:20:36,309 --> 00:20:43,190
automatically so key takeaways here

00:20:41,059 --> 00:20:45,379
really are that the how config presents

00:20:43,190 --> 00:20:46,639
itself as like a centralized place where

00:20:45,379 --> 00:20:48,080
all your configuration for spend your

00:20:46,639 --> 00:20:49,940
lives every time you make a change to

00:20:48,080 --> 00:20:51,529
that and you reapply it that change will

00:20:49,940 --> 00:20:54,289
look the same every time you run it

00:20:51,529 --> 00:20:55,580
again and this comes with like

00:20:54,289 --> 00:20:58,190
documentation about how to write this

00:20:55,580 --> 00:20:59,090
yourself it comes with two willing to

00:20:58,190 --> 00:21:01,159
make sure that if you make you know

00:20:59,090 --> 00:21:03,500
it'll try to make it easy for you to

00:21:01,159 --> 00:21:05,419
figure out how to fix that and then the

00:21:03,500 --> 00:21:07,850
hard parts of deploying spanker like

00:21:05,419 --> 00:21:09,799
managing various life cycles making sure

00:21:07,850 --> 00:21:11,539
that it's set up with monitoring you can

00:21:09,799 --> 00:21:17,860
get the logs out easily these are all

00:21:11,539 --> 00:21:17,860
configured on your behalf any questions

00:21:18,279 --> 00:21:22,789
what does it look like to migrate from

00:21:20,960 --> 00:21:23,580
an existing spinnaker installation like

00:21:22,789 --> 00:21:26,250
we have an alternate

00:21:23,580 --> 00:21:30,150
long before halyard came out yeah that's

00:21:26,250 --> 00:21:32,220
a very good question so it's as you if

00:21:30,150 --> 00:21:33,420
you've configured spinnaker by hand

00:21:32,220 --> 00:21:35,370
you'll see there's a like a million ways

00:21:33,420 --> 00:21:38,670
you can it is unfortunately no

00:21:35,370 --> 00:21:39,990
one-size-fits-all migration pattern but

00:21:38,670 --> 00:21:41,730
odds are you probably have a couple

00:21:39,990 --> 00:21:43,380
accounts you probably may have may be

00:21:41,730 --> 00:21:44,970
monitoring maybe have some web hooks and

00:21:43,380 --> 00:21:46,800
figured all this has a corresponding

00:21:44,970 --> 00:21:49,140
command in the documentation

00:21:46,800 --> 00:21:51,570
you've probably within 10 20 commands

00:21:49,140 --> 00:21:52,860
and with a little bit of help text it to

00:21:51,570 --> 00:21:55,680
the point where you were before but now

00:21:52,860 --> 00:21:58,140
managed by how had a version release

00:21:55,680 --> 00:21:59,670
number so just do a fresh fresh run

00:21:58,140 --> 00:22:03,390
that's higher make sure you point at the

00:21:59,670 --> 00:22:05,430
same G css3 whatever bucket and if you

00:22:03,390 --> 00:22:06,600
have the same car driver accounts all

00:22:05,430 --> 00:22:07,590
that information carries over so

00:22:06,600 --> 00:22:09,360
everything's already deployed in that

00:22:07,590 --> 00:22:10,890
environment you already have all your

00:22:09,360 --> 00:22:12,630
pipelines and applications living in a

00:22:10,890 --> 00:22:13,770
bucket if you redeploy spinnaker

00:22:12,630 --> 00:22:15,900
pointing at the same things you get

00:22:13,770 --> 00:22:24,030
pretty much the same exact of spinnaker

00:22:15,900 --> 00:22:26,700
running but Derby risks of running as

00:22:24,030 --> 00:22:28,380
long as they're not trying to write to

00:22:26,700 --> 00:22:30,930
the bucket at the same time it should be

00:22:28,380 --> 00:22:32,580
okay and there shouldn't be as far as I

00:22:30,930 --> 00:22:34,980
can think any risk of trying to deploy

00:22:32,580 --> 00:22:37,710
the same resources same environments at

00:22:34,980 --> 00:22:38,940
the same time but as long as one of them

00:22:37,710 --> 00:22:46,080
is reading at one of those writing uses

00:22:38,940 --> 00:22:47,270
a problem thank you there's a bunch of

00:22:46,080 --> 00:22:50,160
ways you can do this if you want we can

00:22:47,270 --> 00:22:53,100
talk through how to automate the process

00:22:50,160 --> 00:22:56,910
of like a CI system that uses how you

00:22:53,100 --> 00:22:58,860
deploy spinnaker so easiest thing to do

00:22:56,910 --> 00:23:01,260
as far as what the docs will guide you

00:22:58,860 --> 00:23:03,810
through in one way or another spin up of

00:23:01,260 --> 00:23:05,580
the M and then run how you can side of

00:23:03,810 --> 00:23:07,380
that and then keep that around it's like

00:23:05,580 --> 00:23:08,970
a faster most that's kind of clunky you

00:23:07,380 --> 00:23:10,770
don't necessarily have to do that so

00:23:08,970 --> 00:23:13,550
power NASA's command it's called

00:23:10,770 --> 00:23:16,410
pal backup create it'll take everything

00:23:13,550 --> 00:23:17,730
all the profiles that you supply however

00:23:16,410 --> 00:23:20,400
that you override you can take with all

00:23:17,730 --> 00:23:22,320
the grant will you supply and towards

00:23:20,400 --> 00:23:25,740
the house config file and it turns it up

00:23:22,320 --> 00:23:26,910
removes any sort of leading paths

00:23:25,740 --> 00:23:31,560
relative to where it's been installed

00:23:26,910 --> 00:23:32,460
and puts it in a turbo and you can do

00:23:31,560 --> 00:23:34,290
whatever you want with that if you

00:23:32,460 --> 00:23:35,200
unpack it with like the universe

00:23:34,290 --> 00:23:37,750
commands

00:23:35,200 --> 00:23:42,429
that Powerball expands back into a fold

00:23:37,750 --> 00:23:44,559
how your configuration so if you have a

00:23:42,429 --> 00:23:47,409
CI system where maybe you automate a

00:23:44,559 --> 00:23:50,409
change to tubes your how config you can

00:23:47,409 --> 00:23:52,809
after that package it up put it in s3 or

00:23:50,409 --> 00:23:54,880
whatever and then we need to pull it

00:23:52,809 --> 00:23:56,919
back down and then maybe in an ephemeral

00:23:54,880 --> 00:23:58,510
container take that deploy spinnaker

00:23:56,919 --> 00:24:01,000
have that ephemeral container shut down

00:23:58,510 --> 00:24:03,010
and then exactly what's thordan s3

00:24:01,000 --> 00:24:09,070
corresponds to that spinnaker that's

00:24:03,010 --> 00:24:11,830
running no all right at the docks it's

00:24:09,070 --> 00:24:18,700
not a it's not super straightforward but

00:24:11,830 --> 00:24:25,480
it's not another thing to do which

00:24:18,700 --> 00:24:26,830
process the like the like what would you

00:24:25,480 --> 00:24:38,049
want an automated like inside like a

00:24:26,830 --> 00:24:42,039
Jenkins or drone like like I'm worried

00:24:38,049 --> 00:24:45,220
about critical storage systems it could

00:24:42,039 --> 00:24:47,710
be done if you correctly set up kms like

00:24:45,220 --> 00:24:49,029
your kms and then tire it has the keys

00:24:47,710 --> 00:24:52,360
to correctly encrypt and decrypt your

00:24:49,029 --> 00:24:55,090
secrets that's an open work item

00:24:52,360 --> 00:24:56,679
actually open for that it's a little bit

00:24:55,090 --> 00:24:57,940
of work but it would be nice because

00:24:56,679 --> 00:24:59,590
then basically everything lives in the

00:24:57,940 --> 00:25:12,010
cloud and then how it makes changes to

00:24:59,590 --> 00:25:13,720
something in a version bucket how yeah

00:25:12,010 --> 00:25:16,809
they will need to be stored

00:25:13,720 --> 00:25:19,870
if you most password fields had a

00:25:16,809 --> 00:25:21,399
corresponding password file type of way

00:25:19,870 --> 00:25:22,840
to supply it which is probably the

00:25:21,399 --> 00:25:24,190
better way to store it in some place

00:25:22,840 --> 00:25:26,440
it's gonna have to be stored in plain

00:25:24,190 --> 00:25:27,789
text unless you use canvas to basically

00:25:26,440 --> 00:25:31,539
you can group that file or encrypt your

00:25:27,789 --> 00:25:34,360
house and cake and then store that or

00:25:31,539 --> 00:25:38,019
the secrets yeah funny ways to do get a

00:25:34,360 --> 00:25:40,450
question yeah so I know for us we want

00:25:38,019 --> 00:25:42,789
to start to develop our own specific

00:25:40,450 --> 00:25:44,620
code that's only relevant our own

00:25:42,789 --> 00:25:45,390
company just halyard have support for

00:25:44,620 --> 00:25:48,179
that now

00:25:45,390 --> 00:25:50,490
not so like you want to extend spinnaker

00:25:48,179 --> 00:25:52,260
and then use your custom spinnaker I

00:25:50,490 --> 00:25:54,179
deployed that yeah like an apse wouldn't

00:25:52,260 --> 00:25:57,120
extend something and basically be able

00:25:54,179 --> 00:26:02,100
to pull in the promises and then pull in

00:25:57,120 --> 00:26:05,250
our yeah absolutely huh so if you have a

00:26:02,100 --> 00:26:07,799
way to build that those versions of

00:26:05,250 --> 00:26:09,990
spinnaker and give a way to capture that

00:26:07,799 --> 00:26:11,700
they're stored in some repository all

00:26:09,990 --> 00:26:13,650
you have to do so everything inhale your

00:26:11,700 --> 00:26:15,480
way deploy it revolves around this bill

00:26:13,650 --> 00:26:17,190
of materials if you create your own bill

00:26:15,480 --> 00:26:18,390
of materials and then put it either in a

00:26:17,190 --> 00:26:20,400
bucket on your file system or whatever

00:26:18,390 --> 00:26:24,960
and then point to that it'll deploy that

00:26:20,400 --> 00:26:27,030
instead so we've done this for someone

00:26:24,960 --> 00:26:29,309
wanted to use the containers in Quay

00:26:27,030 --> 00:26:31,919
instead of the ones in GCR and version

00:26:29,309 --> 00:26:33,570
that weren't actually released but these

00:26:31,919 --> 00:26:35,400
create a bill of materials that pointed

00:26:33,570 --> 00:26:37,049
that way had the various versions that

00:26:35,400 --> 00:26:39,090
were sitting in quite the time so most

00:26:37,049 --> 00:26:40,799
of them were master at least and then

00:26:39,090 --> 00:26:42,150
just deployed that instead so as long as

00:26:40,799 --> 00:26:44,610
you can upload your artifacts whether

00:26:42,150 --> 00:26:45,660
they're like Debian packages or docker

00:26:44,610 --> 00:26:49,140
images maybe young

00:26:45,660 --> 00:26:50,760
yeah and you have the versions for that

00:26:49,140 --> 00:26:52,770
you can very easily tell how your just

00:26:50,760 --> 00:26:54,960
use that instead so like in that case

00:26:52,770 --> 00:26:58,669
would you like have your own version of

00:26:54,960 --> 00:27:01,380
that package that's just basically baby

00:26:58,669 --> 00:27:09,150
open source kind of plus your own and

00:27:01,380 --> 00:27:10,950
together Lance right so you have to

00:27:09,150 --> 00:27:12,840
build it and then you're building a

00:27:10,950 --> 00:27:15,090
custom component it'll need some way to

00:27:12,840 --> 00:27:17,820
build it into like a Debian or a docker

00:27:15,090 --> 00:27:20,040
image or something no really no

00:27:17,820 --> 00:27:21,690
assumptions made about like a scripts

00:27:20,040 --> 00:27:23,070
living in that or anything beyond what

00:27:21,690 --> 00:27:25,530
exists in the open source if you can

00:27:23,070 --> 00:27:27,690
build like that for example and you look

00:27:25,530 --> 00:27:29,549
really or some custom code on there or

00:27:27,690 --> 00:27:31,830
you have some modular builds and you

00:27:29,549 --> 00:27:33,299
have some custom jars that you import if

00:27:31,830 --> 00:27:36,320
you can produce that and then upload it

00:27:33,299 --> 00:27:38,730
to your like a big trailer or whatever

00:27:36,320 --> 00:27:51,210
now you can just fetch those packages

00:27:38,730 --> 00:27:53,190
instead of the ones that we publish is

00:27:51,210 --> 00:27:55,070
this yellow that you change dynamically

00:27:53,190 --> 00:27:57,630
at runtime or stuff that you

00:27:55,070 --> 00:27:58,710
it's appointment time so what's an

00:27:57,630 --> 00:28:00,530
example of a yellow file if it's

00:27:58,710 --> 00:28:04,320
something that halyard supports already

00:28:00,530 --> 00:28:05,640
or any sort of custom file most custom

00:28:04,320 --> 00:28:07,110
files you basically put there's a

00:28:05,640 --> 00:28:10,650
special folder and your pal can take

00:28:07,110 --> 00:28:13,440
folder in your local machine it takes

00:28:10,650 --> 00:28:15,990
that per component uploads it to a given

00:28:13,440 --> 00:28:23,550
directory and then deploys it like that

00:28:15,990 --> 00:28:25,980
means exactly so it's like red didn't

00:28:23,550 --> 00:28:28,500
have any pictures it's no point pulling

00:28:25,980 --> 00:28:30,720
up isn't pictures but the idea is you

00:28:28,500 --> 00:28:34,050
you put like how the driver local in

00:28:30,720 --> 00:28:35,670
this Powell profiles directory when it

00:28:34,050 --> 00:28:37,290
comes time to deploy how your checks to

00:28:35,670 --> 00:28:39,270
see if you have any like overrides for

00:28:37,290 --> 00:28:42,900
spring sitting in there and it says like

00:28:39,270 --> 00:28:44,130
ok well odds are you want to configure

00:28:42,900 --> 00:28:45,480
something that's not it's important ally

00:28:44,130 --> 00:28:48,510
or you have some sort of changes that

00:28:45,480 --> 00:28:50,640
are relevant exactly only to your custom

00:28:48,510 --> 00:28:55,320
build and those are then put in the

00:28:50,640 --> 00:28:59,370
right spot in car drivers and we have

00:28:55,320 --> 00:29:00,929
people migrating from non halyard

00:28:59,370 --> 00:29:02,190
managed Spinnaker's to halyard

00:29:00,929 --> 00:29:04,320
management occurs by just taking their

00:29:02,190 --> 00:29:05,490
driver file and literally taking that

00:29:04,320 --> 00:29:13,050
and not having how your generate

00:29:05,490 --> 00:29:15,540
anything at all that works so if you are

00:29:13,050 --> 00:29:17,190
running and a bunch of 1404 beyond this

00:29:15,540 --> 00:29:18,809
is the constraint is because the various

00:29:17,190 --> 00:29:20,700
spinnaker sub components expect that

00:29:18,809 --> 00:29:22,980
they're running on App Engine 1404 I

00:29:20,700 --> 00:29:27,120
think they support 1604 now to so if you

00:29:22,980 --> 00:29:28,320
have either of those spinnaker can be

00:29:27,120 --> 00:29:29,730
deployed now there can be deployed on

00:29:28,320 --> 00:29:35,520
that then you can pull down the packages

00:29:29,730 --> 00:29:37,710
and then run spinnaker on top of that or

00:29:35,520 --> 00:29:39,570
if you're running your granddaddy's it

00:29:37,710 --> 00:29:44,400
can be deployed to a crannies cluster or

00:29:39,570 --> 00:29:47,790
if you have a Google compute engine

00:29:44,400 --> 00:29:49,410
project there's an alpha release or an

00:29:47,790 --> 00:29:51,179
outlet path where you can actually have

00:29:49,410 --> 00:29:53,700
spinnaker set up a fully distributed

00:29:51,179 --> 00:29:58,559
little CBM console vaults everything

00:29:53,700 --> 00:30:00,330
bells and whistles anchor2 Edel your

00:29:58,559 --> 00:30:01,830
support doesn't exist if someone wants

00:30:00,330 --> 00:30:04,160
to write it they're welcome so I'm not

00:30:01,830 --> 00:30:04,160
going to

00:30:05,159 --> 00:30:18,099
mly so it's a four feature quest the

00:30:14,769 --> 00:30:20,249
store secrets involved as opposed to I

00:30:18,099 --> 00:30:23,139
assume the kms you were mentioning as a

00:30:20,249 --> 00:30:28,479
Google management key management thingy

00:30:23,139 --> 00:30:30,309
or the Amazon equivalent aside from

00:30:28,479 --> 00:30:32,649
those two targets fall to some other

00:30:30,309 --> 00:30:35,249
pretty commonly deployed so you could

00:30:32,649 --> 00:30:37,449
store so I was wondering whether yeah my

00:30:35,249 --> 00:30:40,149
my thinking was that I would implement

00:30:37,449 --> 00:30:42,459
it for Google have an API inside of

00:30:40,149 --> 00:30:44,440
halyard that basically says here's a way

00:30:42,459 --> 00:30:45,909
to encrypt something and upload it you

00:30:44,440 --> 00:30:47,469
can do that involved both I think has a

00:30:45,909 --> 00:30:49,149
canvas solution and a way to store

00:30:47,469 --> 00:30:52,119
secrets so you can do pretty much do

00:30:49,149 --> 00:30:55,359
both and if you implement the yeah I

00:30:52,119 --> 00:30:57,639
might even do that myself you'll be able

00:30:55,359 --> 00:30:59,169
to store all your not configured rentals

00:30:57,639 --> 00:31:01,059
and everything inside the ball instead

00:30:59,169 --> 00:31:04,809
of keeping them in a bucket or on your

00:31:01,059 --> 00:31:14,049
local machine awesome thanks so I

00:31:04,809 --> 00:31:15,399
completely get the whole go how here

00:31:14,049 --> 00:31:17,799
that's how all the docs are written is

00:31:15,399 --> 00:31:19,359
there a road map or other codes are

00:31:17,799 --> 00:31:21,159
usually provide for other cloud

00:31:19,359 --> 00:31:22,629
providers or is this something that

00:31:21,159 --> 00:31:26,529
here's wait for someone to volunteer for

00:31:22,629 --> 00:31:28,929
because that's a good question so the

00:31:26,529 --> 00:31:31,449
it's interesting right so the the thing

00:31:28,929 --> 00:31:32,589
is there's very few people running

00:31:31,449 --> 00:31:34,239
spinnaker at a scale where it's

00:31:32,589 --> 00:31:35,859
absolutely necessary that you actually

00:31:34,239 --> 00:31:37,479
run in to distribute installations if

00:31:35,859 --> 00:31:39,339
you want to run on ECS and support

00:31:37,479 --> 00:31:41,229
really hefty workloads you can do that

00:31:39,339 --> 00:31:42,639
I'm just a big VM and have halyard

00:31:41,229 --> 00:31:44,469
pulled on the packages and run it there

00:31:42,639 --> 00:31:45,819
and you'll get really far with that

00:31:44,469 --> 00:31:47,169
alone but if you're like now Netflix

00:31:45,819 --> 00:31:48,699
scaling you have tens of thousands of

00:31:47,169 --> 00:31:50,649
VMs you're gonna need more than that and

00:31:48,699 --> 00:31:53,829
I think when a customer comes along with

00:31:50,649 --> 00:31:55,059
that kind of constraint it's a different

00:31:53,829 --> 00:31:59,109
problem but so far there's like a

00:31:55,059 --> 00:32:00,819
building out the support for VCS ec2 to

00:31:59,109 --> 00:32:02,440
deploy spinnaker to those environments

00:32:00,819 --> 00:32:05,309
it doesn't really make sense until it's

00:32:02,440 --> 00:32:08,099
like if there's a dire need to do so

00:32:05,309 --> 00:32:10,299
could you use how you're purely for

00:32:08,099 --> 00:32:12,159
configuration like if we already like

00:32:10,299 --> 00:32:13,599
our distributed set up for smacker but

00:32:12,159 --> 00:32:15,570
we wanted to manage config so that

00:32:13,599 --> 00:32:17,399
updates don't break us as bad

00:32:15,570 --> 00:32:19,379
can you do that yeah absolutely this

00:32:17,399 --> 00:32:20,759
it's a not a pain fruit path but all

00:32:19,379 --> 00:32:23,009
they're gonna take that how your

00:32:20,759 --> 00:32:25,350
generates lives inside it's a hell it

00:32:23,009 --> 00:32:27,869
sits on the docks but it's how for a

00:32:25,350 --> 00:32:29,879
deployment name and then staging and

00:32:27,869 --> 00:32:31,109
everything staged in there the way the

00:32:29,879 --> 00:32:31,769
files map into spanner is pretty

00:32:31,109 --> 00:32:34,049
straightforward

00:32:31,769 --> 00:32:36,710
this is documented as well but you can

00:32:34,049 --> 00:32:39,509
pretty much create a how config run

00:32:36,710 --> 00:32:41,399
Howell deploy fly or how there's another

00:32:39,509 --> 00:32:42,779
one it creates all the big four units

00:32:41,399 --> 00:32:51,779
it's in that folder and you can use that

00:32:42,779 --> 00:32:54,869
they're about to and then the docker

00:32:51,779 --> 00:32:57,659
image I noticed in get repo that there's

00:32:54,869 --> 00:32:58,950
a Mac OS you really up-to-date that was

00:32:57,659 --> 00:33:01,769
like last Friday that's really

00:32:58,950 --> 00:33:05,549
impressive I also couldn't work because

00:33:01,769 --> 00:33:07,320
I am you know I can't be can change

00:33:05,549 --> 00:33:18,320
something and want to try it is my first

00:33:07,320 --> 00:33:18,320
Mac ever so it just works I know

00:33:21,019 --> 00:33:27,109
so don't depend on that yeah there's

00:33:23,509 --> 00:33:31,309
something I have out did for Debian 8 9

00:33:27,109 --> 00:33:31,309
butdo 1404 and 1604

00:33:31,519 --> 00:34:06,210
uses instead of yeah there's a commands

00:34:04,379 --> 00:34:08,369
if he's apply only the services you want

00:34:06,210 --> 00:34:09,869
to read important you just say like how

00:34:08,369 --> 00:34:11,790
the point pipe service names cloud

00:34:09,869 --> 00:34:13,889
driver it'll do that for you our palyer

00:34:11,790 --> 00:34:15,869
it's not smart enough yet or rather will

00:34:13,889 --> 00:34:18,030
be to determine which services to bounce

00:34:15,869 --> 00:34:20,490
sometimes there's like weird hidden

00:34:18,030 --> 00:34:22,169
dependent changes that aren't clear I

00:34:20,490 --> 00:34:23,579
didn't want to introduce weird scenarios

00:34:22,169 --> 00:34:26,549
or stuff breaks for no good reason so

00:34:23,579 --> 00:34:27,160
the default is redeploys all spanger it

00:34:26,549 --> 00:34:29,170
doesn't impair

00:34:27,160 --> 00:34:31,330
using orcas execution engine so it

00:34:29,170 --> 00:34:33,220
should always be equally fast but and

00:34:31,330 --> 00:34:36,190
it's all bred black so you can very

00:34:33,220 --> 00:34:38,590
safely keep running spinnaker while you

00:34:36,190 --> 00:34:40,990
redeploy it and it transfers work from

00:34:38,590 --> 00:34:42,220
one note to the other but yeah I

00:34:40,990 --> 00:34:43,450
completely get it if you only want to

00:34:42,220 --> 00:34:48,400
read a plow driver you can do that very

00:34:43,450 --> 00:34:50,800
easily and that's a dead horse on the

00:34:48,400 --> 00:34:52,300
different Club interesting but you're

00:34:50,800 --> 00:34:54,220
talking about Lena when the time might

00:34:52,300 --> 00:34:56,680
be I would suggest that this might be

00:34:54,220 --> 00:34:58,330
the time because I know that my

00:34:56,680 --> 00:35:00,100
organization won't start using halyard

00:34:58,330 --> 00:35:02,500
until we can use it you know in our

00:35:00,100 --> 00:35:04,630
environment and we also have a mandate

00:35:02,500 --> 00:35:07,210
that everything we do this point going

00:35:04,630 --> 00:35:08,770
forward is about agnostic so any tool

00:35:07,210 --> 00:35:10,060
that is gonna support your spinnaker

00:35:08,770 --> 00:35:12,340
which is also cloud agnostic probably

00:35:10,060 --> 00:35:14,970
should be well the stubs are all there

00:35:12,340 --> 00:35:14,970
if anyone's interested

00:35:34,080 --> 00:35:41,070

YouTube URL: https://www.youtube.com/watch?v=6oHRe3-zflo


