Title: Spinnaker Security Deep Dive
Publication date: 2017-09-22
Playlist: Spinnaker Summit 2017
Description: 
	TRAVIS TOMSU, GOOGLE

Security is a cross-cutting concern across the entire Spinnaker application architecture. Using the Spring Security framework, this talk details how a user can plug-and-play various authentication and authorizations mechanisms, and how a developer can easily hook new features into the security model.

From Spinnaker Summit 2017
Captions: 
	00:00:00,000 --> 00:00:12,750
that that our key into the

00:00:03,389 --> 00:00:14,790
authentication piece as anybody who's

00:00:12,750 --> 00:00:18,420
worked with OAuth and specifically OAuth

00:00:14,790 --> 00:00:22,380
within spinnaker this will ring ring

00:00:18,420 --> 00:00:24,720
true what we're gonna do here is we are

00:00:22,380 --> 00:00:27,240
going to walk through a series I'm gonna

00:00:24,720 --> 00:00:29,609
turn this off briefly can you guys still

00:00:27,240 --> 00:00:32,550
hear me from this mic okay

00:00:29,609 --> 00:00:34,260
so what I'm going to do here is I'm

00:00:32,550 --> 00:00:36,120
going to go through and walk through I

00:00:34,260 --> 00:00:38,340
would also recommend if you guys are

00:00:36,120 --> 00:00:41,250
doing any kind of development or

00:00:38,340 --> 00:00:43,469
actually trying to get your spinnaker

00:00:41,250 --> 00:00:46,379
deployment running do everything in an

00:00:43,469 --> 00:00:48,690
incognito window it will save you lots

00:00:46,379 --> 00:00:51,390
and lots of hassle especially when

00:00:48,690 --> 00:00:53,640
dealing with sessions so what we're

00:00:51,390 --> 00:00:56,430
gonna do here is turn on a specific

00:00:53,640 --> 00:00:58,739
feature in Chrome that is to preserve

00:00:56,430 --> 00:01:02,010
the log this preserves the network

00:00:58,739 --> 00:01:05,820
traffic as all of the as we're going

00:01:02,010 --> 00:01:09,450
through this log in workflow so we're

00:01:05,820 --> 00:01:11,930
going to go to stage and because I have

00:01:09,450 --> 00:01:14,340
a self-signed certificate guarding this

00:01:11,930 --> 00:01:31,409
we are going through the authentication

00:01:14,340 --> 00:01:33,600
process I've been noticing all morning

00:01:31,409 --> 00:01:35,040
my kubernetes cluster has been kind of

00:01:33,600 --> 00:01:38,780
slow so this takes a little bit longer

00:01:35,040 --> 00:01:38,780
than I'd normally it would

00:01:48,240 --> 00:01:53,590
all right and so you notice the page

00:01:50,590 --> 00:01:56,700
reloads and then you see up here in the

00:01:53,590 --> 00:02:00,310
top corner our identity is in there and

00:01:56,700 --> 00:02:03,990
you know that we have authenticated to

00:02:00,310 --> 00:02:11,049
the system what I want to show you is

00:02:03,990 --> 00:02:14,040
and we all right so let's let's go

00:02:11,049 --> 00:02:15,700
through like what just happened there

00:02:14,040 --> 00:02:17,799
all right this is a little bit better

00:02:15,700 --> 00:02:22,150
okay so I told you a little bit before

00:02:17,799 --> 00:02:24,250
that deck is a set of static HTML and

00:02:22,150 --> 00:02:26,170
JavaScript and CSS and all that living

00:02:24,250 --> 00:02:28,360
on an Apache server so what you'll see

00:02:26,170 --> 00:02:30,310
here is the first few requests are those

00:02:28,360 --> 00:02:32,500
requests going to the app going to that

00:02:30,310 --> 00:02:34,060
Apache server that is specifically

00:02:32,500 --> 00:02:36,430
loading the app I told you app dot JSON

00:02:34,060 --> 00:02:39,069
is the one that has you know 1.2

00:02:36,430 --> 00:02:41,200
megabytes of JavaScript that's coming in

00:02:39,069 --> 00:02:43,720
but we're going to look at first is the

00:02:41,200 --> 00:02:45,430
settings j/s and I'm not gonna look at

00:02:43,720 --> 00:02:47,049
that one specifically yet because I

00:02:45,430 --> 00:02:50,290
actually want to show you the contents

00:02:47,049 --> 00:02:51,910
of it if we look here at this settings

00:02:50,290 --> 00:02:53,950
page is this like I said this is a

00:02:51,910 --> 00:02:55,239
static file it's the same thing wherever

00:02:53,950 --> 00:02:56,920
you go and what we're looking at

00:02:55,239 --> 00:03:00,040
specifically is this often abled flag

00:02:56,920 --> 00:03:02,319
this off enabled is telling the

00:03:00,040 --> 00:03:04,569
application that you need to you need to

00:03:02,319 --> 00:03:07,420
go through the authentication workflow

00:03:04,569 --> 00:03:08,799
that the deck knows about and that is

00:03:07,420 --> 00:03:11,650
kind of that is everything that we're

00:03:08,799 --> 00:03:14,440
going to dig into here so what is

00:03:11,650 --> 00:03:16,989
happening behind the scenes is you'll

00:03:14,440 --> 00:03:20,410
see in the traffic here the one of the

00:03:16,989 --> 00:03:23,250
first calls to gate is to this user

00:03:20,410 --> 00:03:26,440
slash auth that's are all slash user

00:03:23,250 --> 00:03:31,680
endpoint if you're not familiar 80-84 is

00:03:26,440 --> 00:03:35,799
gates a standard port so the this call

00:03:31,680 --> 00:03:38,530
goes out comes back and it has nothing

00:03:35,799 --> 00:03:41,560
in it you can see here content length 0

00:03:38,530 --> 00:03:44,169
this is how Dec knows that it needs to

00:03:41,560 --> 00:03:47,970
go through the authentication flow okay

00:03:44,169 --> 00:03:53,139
what it does is it makes a request to

00:03:47,970 --> 00:03:56,769
this slash off slash redirect with a

00:03:53,139 --> 00:03:59,140
argument that is to the current page now

00:03:56,769 --> 00:04:00,819
what this endpoint is is all

00:03:59,140 --> 00:04:03,520
redirect endpoint is a protected

00:04:00,819 --> 00:04:07,480
endpoint that invokes the spring

00:04:03,520 --> 00:04:09,100
security logging mechanism okay when you

00:04:07,480 --> 00:04:12,610
can look here and you see the status

00:04:09,100 --> 00:04:17,590
code 302 redirects you to this location

00:04:12,610 --> 00:04:20,530
which is you know back to the others

00:04:17,590 --> 00:04:23,350
redirects you to a point on gate that

00:04:20,530 --> 00:04:25,450
says login and then we can follow that

00:04:23,350 --> 00:04:27,669
within the network tool here that says

00:04:25,450 --> 00:04:31,080
ok make that request to slash logon and

00:04:27,669 --> 00:04:33,580
that itself returns you a 302 which

00:04:31,080 --> 00:04:37,330
returns you to in this case we have

00:04:33,580 --> 00:04:39,730
Google OAuth established and this sent

00:04:37,330 --> 00:04:41,950
me to the accounts.google.com page which

00:04:39,730 --> 00:04:44,080
was the login y'all saw saw me you know

00:04:41,950 --> 00:04:48,700
logging user name and password

00:04:44,080 --> 00:04:51,190
and so as this goes through you know

00:04:48,700 --> 00:04:53,260
some of these requests are all the the

00:04:51,190 --> 00:04:55,750
interaction of the browser going to to

00:04:53,260 --> 00:04:59,650
Google back and forth establishing my

00:04:55,750 --> 00:05:01,750
username and password and then what ends

00:04:59,650 --> 00:05:15,310
up happening is actually one of the

00:05:01,750 --> 00:05:27,250
things directly when I when I make this

00:05:15,310 --> 00:05:28,510
this request to accounts.google.com so

00:05:27,250 --> 00:05:30,160
let's look at the the query string

00:05:28,510 --> 00:05:32,740
parameters that we have here so this

00:05:30,160 --> 00:05:34,540
request to Google included the OAuth

00:05:32,740 --> 00:05:37,660
client ID which is just some long

00:05:34,540 --> 00:05:41,500
auto-generated string a redirect URI

00:05:37,660 --> 00:05:43,270
that Google will send us to once the

00:05:41,500 --> 00:05:44,470
user has actually logged in so that

00:05:43,270 --> 00:05:46,780
you'll notice that it just sends us

00:05:44,470 --> 00:05:49,000
right back to the login page

00:05:46,780 --> 00:05:53,110
and in this case we're also asking for

00:05:49,000 --> 00:05:55,419
the Scopes profile and email if you're

00:05:53,110 --> 00:05:56,620
familiar with an OAuth the whole the

00:05:55,419 --> 00:05:58,930
whole point of this kind of

00:05:56,620 --> 00:06:00,550
authorization mechanism we're kind of

00:05:58,930 --> 00:06:03,850
piggybacking on that authorization

00:06:00,550 --> 00:06:06,010
mechanism to validate your identity and

00:06:03,850 --> 00:06:08,470
that's really what the authentication

00:06:06,010 --> 00:06:10,900
pieces is trying to prove that you are

00:06:08,470 --> 00:06:12,850
who you say you are so we're kind of we

00:06:10,900 --> 00:06:16,770
are getting Google

00:06:12,850 --> 00:06:19,900
in this case to allow us access to your

00:06:16,770 --> 00:06:22,450
profile to confirm that you have

00:06:19,900 --> 00:06:24,400
ownership of that email address that's

00:06:22,450 --> 00:06:27,610
the only reason why we're asking for the

00:06:24,400 --> 00:06:29,320
email and profile scopes and you also

00:06:27,610 --> 00:06:32,020
notice that the this has a state

00:06:29,320 --> 00:06:34,020
variable which is you know six digit

00:06:32,020 --> 00:06:38,380
this thing is to help prevent some

00:06:34,020 --> 00:06:40,780
cross-site request forgery or a replay

00:06:38,380 --> 00:06:42,820
I'm not sure which one but anyway so

00:06:40,780 --> 00:06:44,680
you'll notice here though so once we've

00:06:42,820 --> 00:06:46,330
all gone through the login and then we

00:06:44,680 --> 00:06:48,790
have to go back and search through all

00:06:46,330 --> 00:06:51,460
the stuff again so remember that

00:06:48,790 --> 00:06:53,440
redirect URI said once the user is

00:06:51,460 --> 00:06:56,800
logged in I want you to forward the user

00:06:53,440 --> 00:06:58,870
back to my slash login page and in this

00:06:56,800 --> 00:07:01,810
case this is how what that request looks

00:06:58,870 --> 00:07:04,240
like here's the slash login it includes

00:07:01,810 --> 00:07:08,380
that same state variable which is that

00:07:04,240 --> 00:07:12,760
cross-site request forgery code and then

00:07:08,380 --> 00:07:16,090
also this this code in this case this is

00:07:12,760 --> 00:07:18,910
an authorization code so what is

00:07:16,090 --> 00:07:24,430
happening behind the scenes is that in

00:07:18,910 --> 00:07:27,520
the processing of this request gate is

00:07:24,430 --> 00:07:29,650
using this code along with its client ID

00:07:27,520 --> 00:07:33,910
and client secret and it's going to

00:07:29,650 --> 00:07:36,670
Google saying give me an access token so

00:07:33,910 --> 00:07:38,920
that I can make a second request to

00:07:36,670 --> 00:07:42,850
validate that this user is who they say

00:07:38,920 --> 00:07:45,640
they are so that is the third that third

00:07:42,850 --> 00:07:50,740
leg that we showed in the in the slides

00:07:45,640 --> 00:07:53,020
about you know how gate and the identity

00:07:50,740 --> 00:07:54,910
provider these guys are talking these

00:07:53,020 --> 00:07:58,540
guys specifically for OAuth are talking

00:07:54,910 --> 00:08:05,230
to each other outside of the the users

00:07:58,540 --> 00:08:08,950
workflow okay so what that means is all

00:08:05,230 --> 00:08:11,830
right we've logged in the user we've

00:08:08,950 --> 00:08:14,740
logged in the user this is great but the

00:08:11,830 --> 00:08:17,860
hard part is because spinnaker is a

00:08:14,740 --> 00:08:19,630
single page application we have to get

00:08:17,860 --> 00:08:24,160
spinnaker we have to get the user's

00:08:19,630 --> 00:08:25,990
browser back to a state in Dec so that

00:08:24,160 --> 00:08:26,420
they can resume whatever it is that they

00:08:25,990 --> 00:08:28,490
were doing

00:08:26,420 --> 00:08:32,150
and this is kind of why we have this

00:08:28,490 --> 00:08:34,390
slash auth redirect page and why it's a

00:08:32,150 --> 00:08:39,590
it's considered a protected resource

00:08:34,390 --> 00:08:41,960
when you hit this endpoint at first when

00:08:39,590 --> 00:08:45,860
you're unauthenticated it saves that URL

00:08:41,960 --> 00:08:47,660
into your session once you are logged in

00:08:45,860 --> 00:08:49,970
it pulls that URL back out of your

00:08:47,660 --> 00:08:52,250
session and sends you there okay but

00:08:49,970 --> 00:08:54,320
what is the purpose of this endpoint it

00:08:52,250 --> 00:08:56,660
is literally to redirect you back to the

00:08:54,320 --> 00:08:59,000
starting point of gate so that we can

00:08:56,660 --> 00:09:01,340
give control back to your browser and

00:08:59,000 --> 00:09:03,710
the JavaScript within it all of this is

00:09:01,340 --> 00:09:05,330
happening behind the scenes without you

00:09:03,710 --> 00:09:08,600
having to continue to interact with it

00:09:05,330 --> 00:09:10,580
which is why you saw the the page

00:09:08,600 --> 00:09:12,530
refresh and you saw the you know the

00:09:10,580 --> 00:09:14,360
spinnaker logo and the I am the walrus

00:09:12,530 --> 00:09:16,460
or you know whatever funny sayings that

00:09:14,360 --> 00:09:18,760
they have down at the bottom and that's

00:09:16,460 --> 00:09:22,370
when you see the whole page reload and

00:09:18,760 --> 00:09:24,200
you'll see here in ajs which is the same

00:09:22,370 --> 00:09:26,390
thing we saw at the very top and it

00:09:24,200 --> 00:09:29,120
going and reloading all of the same same

00:09:26,390 --> 00:09:31,940
things settings Nijs app badge is and

00:09:29,120 --> 00:09:33,890
then specifically because remember when

00:09:31,940 --> 00:09:37,190
we started off with this we went to the

00:09:33,890 --> 00:09:40,100
slash off slash user endpoint in this

00:09:37,190 --> 00:09:44,510
case we actually have a response coming

00:09:40,100 --> 00:09:47,090
back in this case we we now know our

00:09:44,510 --> 00:09:50,150
gate now knows that this is a valid

00:09:47,090 --> 00:09:53,540
session and that this user t-top to a

00:09:50,150 --> 00:09:55,730
spinnaker test is is for real and you

00:09:53,540 --> 00:09:59,630
could let them through so that's kind of

00:09:55,730 --> 00:10:02,840
how deck and gate have this like this

00:09:59,630 --> 00:10:06,020
dance back and forth passing control

00:10:02,840 --> 00:10:08,270
between deck gate and the identity

00:10:06,020 --> 00:10:16,840
provider to make sure to actually go

00:10:08,270 --> 00:10:20,540
through your whole login flow and so

00:10:16,840 --> 00:10:22,430
this means so much more now that we've

00:10:20,540 --> 00:10:26,030
walked through that because it is a

00:10:22,430 --> 00:10:27,590
complex process and if you want to see

00:10:26,030 --> 00:10:29,900
it's everything that I just went through

00:10:27,590 --> 00:10:32,360
back in sequence diagrams you can go to

00:10:29,900 --> 00:10:33,089
our spinnaker io documentation page and

00:10:32,360 --> 00:10:36,209
kind of

00:10:33,089 --> 00:10:39,469
through that and and use the you know

00:10:36,209 --> 00:10:41,849
incognito window and you know you can

00:10:39,469 --> 00:10:45,319
watch the traffic go back and forth and

00:10:41,849 --> 00:10:45,319
it kind of makes a little bit more sense

00:10:45,439 --> 00:10:52,079
alright so let's talk a little bit about

00:10:49,259 --> 00:10:54,089
the implementation here if you've been

00:10:52,079 --> 00:10:55,559
to any of the other developer sessions

00:10:54,089 --> 00:10:59,549
and everything you might have heard that

00:10:55,559 --> 00:11:01,619
we use spring basically everywhere so

00:10:59,549 --> 00:11:03,839
it's probably no shock to you that the

00:11:01,619 --> 00:11:07,409
security is implemented with the spring

00:11:03,839 --> 00:11:09,929
security library and framework this buys

00:11:07,409 --> 00:11:13,679
us a lot of a lot of good things in that

00:11:09,929 --> 00:11:16,259
we can with configuration plugin

00:11:13,679 --> 00:11:21,059
specific implementations of however your

00:11:16,259 --> 00:11:22,979
enterprise deals with users we just walk

00:11:21,059 --> 00:11:27,239
through the OAuth flow it's the most

00:11:22,979 --> 00:11:28,999
complex one but it also once you have it

00:11:27,239 --> 00:11:31,589
set up it's probably the most secure

00:11:28,999 --> 00:11:34,049
that's not anything to say that sam'l

00:11:31,589 --> 00:11:36,149
and LDAP are insecure but Samuel and

00:11:34,049 --> 00:11:39,149
LDAP generally require you to work with

00:11:36,149 --> 00:11:40,139
your account administrators in order to

00:11:39,149 --> 00:11:42,899
get everything set up

00:11:40,139 --> 00:11:43,979
whereas ooofff to you might depending on

00:11:42,899 --> 00:11:46,349
how your enterprise is structured you

00:11:43,979 --> 00:11:47,809
might be able to set this up without

00:11:46,349 --> 00:11:50,849
their involvement

00:11:47,809 --> 00:11:52,859
lastly x.509 is also an authentication

00:11:50,849 --> 00:11:56,759
option if you were here watching

00:11:52,859 --> 00:11:58,439
Camryn's extending spinnaker talk with

00:11:56,759 --> 00:12:00,149
this last session in here you might have

00:11:58,439 --> 00:12:03,659
seen some of the stuff that that netflix

00:12:00,149 --> 00:12:07,529
does with x.509 and how they enable

00:12:03,659 --> 00:12:12,589
script access and programmatic access to

00:12:07,529 --> 00:12:12,589
gate using x.509 a client certificates

00:12:13,009 --> 00:12:20,399
all right so who here is actually worth

00:12:18,539 --> 00:12:24,029
of spring security before raise your

00:12:20,399 --> 00:12:27,149
hand okay it's a small bit of you

00:12:24,029 --> 00:12:29,509
the authentication interface in spring

00:12:27,149 --> 00:12:32,129
security is like kind of the core piece

00:12:29,509 --> 00:12:34,459
all of the the different authentication

00:12:32,129 --> 00:12:37,139
authorization mechanisms that we use

00:12:34,459 --> 00:12:39,929
have the specific implementation of this

00:12:37,139 --> 00:12:43,529
interface and it's pretty simple here as

00:12:39,929 --> 00:12:46,620
you see these are all kind of details

00:12:43,529 --> 00:12:48,990
that if you were developing a new

00:12:46,620 --> 00:12:51,720
a new interface here a new thing to plug

00:12:48,990 --> 00:12:56,130
in that you would be intimately familiar

00:12:51,720 --> 00:12:59,010
with the second key piece is this notion

00:12:56,130 --> 00:13:03,750
of the security context holder this is

00:12:59,010 --> 00:13:06,600
how your user and their browser is

00:13:03,750 --> 00:13:09,330
making dozens upon dozens of requests to

00:13:06,600 --> 00:13:11,640
gate and each one of them are being

00:13:09,330 --> 00:13:14,460
locked into your user and your user is

00:13:11,640 --> 00:13:15,630
only able to see what is when it's

00:13:14,460 --> 00:13:17,880
coming back basically so that no two

00:13:15,630 --> 00:13:20,340
sessions are crossing crossing the

00:13:17,880 --> 00:13:22,110
streams and it uses some some

00:13:20,340 --> 00:13:24,930
thread-local magic to make sure that

00:13:22,110 --> 00:13:29,160
like within a single instance of gate

00:13:24,930 --> 00:13:32,580
that no two authentication objects are

00:13:29,160 --> 00:13:36,120
being crossed and it kind of does it

00:13:32,580 --> 00:13:38,610
does this with a complex set of security

00:13:36,120 --> 00:13:42,180
filters so that's what we're gonna look

00:13:38,610 --> 00:13:43,380
at here so within the application the

00:13:42,180 --> 00:13:46,290
request and the response are both

00:13:43,380 --> 00:13:48,300
generated at the very beginning and it

00:13:46,290 --> 00:13:51,870
goes through a series of filters both on

00:13:48,300 --> 00:13:54,810
the request in to the application like

00:13:51,870 --> 00:13:56,880
the application itself and then each of

00:13:54,810 --> 00:14:00,180
the filters has the option to do

00:13:56,880 --> 00:14:03,390
something different with the response

00:14:00,180 --> 00:14:05,540
all the way back out does that make it

00:14:03,390 --> 00:14:09,090
does that make sense like that this is a

00:14:05,540 --> 00:14:11,790
filter chain as a common it's a common

00:14:09,090 --> 00:14:13,680
pattern with web request frameworks so

00:14:11,790 --> 00:14:15,300
the filters can each do something on the

00:14:13,680 --> 00:14:19,110
way in and they can each do something on

00:14:15,300 --> 00:14:22,740
the way out the big image on the on the

00:14:19,110 --> 00:14:25,050
right there this is actually a all of

00:14:22,740 --> 00:14:27,150
these session filters that are all of

00:14:25,050 --> 00:14:28,680
the filters that a basic request is

00:14:27,150 --> 00:14:29,990
going through every request is going

00:14:28,680 --> 00:14:33,180
through

00:14:29,990 --> 00:14:35,970
whenever did whenever deck is making a

00:14:33,180 --> 00:14:38,040
request indicate the two that I

00:14:35,970 --> 00:14:39,570
highlighted here the external off token

00:14:38,040 --> 00:14:42,450
filter and the Fiats session filter

00:14:39,570 --> 00:14:45,810
these are these are filters that we've

00:14:42,450 --> 00:14:48,840
written and had any in in specific spots

00:14:45,810 --> 00:14:51,210
in order to extend functionality for

00:14:48,840 --> 00:14:53,220
example the external off token filter if

00:14:51,210 --> 00:14:55,230
you have a github if you're using github

00:14:53,220 --> 00:14:57,830
to authenticate and you go out and

00:14:55,230 --> 00:15:00,040
generate a personal access token you can

00:14:57,830 --> 00:15:03,220
build a scripting client

00:15:00,040 --> 00:15:06,730
giving it that external external token

00:15:03,220 --> 00:15:08,710
and a specific header and everything

00:15:06,730 --> 00:15:11,110
will work everything will work as

00:15:08,710 --> 00:15:13,060
expected because of this token filter it

00:15:11,110 --> 00:15:15,130
basically fishes out the value in that

00:15:13,060 --> 00:15:17,560
header goes through all of the same

00:15:15,130 --> 00:15:20,650
ooofff flow that we kind of just walked

00:15:17,560 --> 00:15:23,490
through but without without the browser

00:15:20,650 --> 00:15:23,490
being involved

00:15:24,100 --> 00:15:29,020
I guess one other thing to talk about

00:15:26,140 --> 00:15:32,050
here is the security context persistence

00:15:29,020 --> 00:15:33,760
filter it's at index one up there that

00:15:32,050 --> 00:15:36,310
is the first filter that's like filter a

00:15:33,760 --> 00:15:38,680
here it's the first piece of code that

00:15:36,310 --> 00:15:41,530
actually gets run whenever a request

00:15:38,680 --> 00:15:44,320
comes in and then it's the last thing

00:15:41,530 --> 00:15:46,000
that can touch the response or I guess

00:15:44,320 --> 00:15:47,650
the second to last thing that can touch

00:15:46,000 --> 00:15:53,230
the response before heads on the way out

00:15:47,650 --> 00:15:55,570
and that is what leads us to this so as

00:15:53,230 --> 00:15:57,100
you've made a as your spinnaker

00:15:55,570 --> 00:15:58,420
deployment is getting bigger and bigger

00:15:57,100 --> 00:15:59,800
and bigger depending on how big your

00:15:58,420 --> 00:16:02,230
enterprises are you might actually need

00:15:59,800 --> 00:16:09,340
a large spinnaker footprint right out of

00:16:02,230 --> 00:16:12,880
the gate but you might end up needing to

00:16:09,340 --> 00:16:15,100
start to scale out gate from the

00:16:12,880 --> 00:16:17,500
beginning and each one of the services

00:16:15,100 --> 00:16:19,420
each one of the micro services can scale

00:16:17,500 --> 00:16:21,370
independently and horizontally and

00:16:19,420 --> 00:16:23,980
you'll see this is a very common pattern

00:16:21,370 --> 00:16:26,230
where you have some client is just is

00:16:23,980 --> 00:16:29,050
talking to a load balancer fronting one

00:16:26,230 --> 00:16:31,140
of the services that scales out and then

00:16:29,050 --> 00:16:33,730
each one of those services is

00:16:31,140 --> 00:16:36,550
maintaining state in a separate Redis

00:16:33,730 --> 00:16:37,420
instance so that each one of these can

00:16:36,550 --> 00:16:38,830
be versioned

00:16:37,420 --> 00:16:42,100
and it can be rolled out to newer

00:16:38,830 --> 00:16:44,830
versions and then also like I said it

00:16:42,100 --> 00:16:46,930
can in scale out and accept more more

00:16:44,830 --> 00:16:49,900
requests in this case what we're doing

00:16:46,930 --> 00:16:51,940
is we're serialized the session I guess

00:16:49,900 --> 00:16:55,480
the library the library is serializing

00:16:51,940 --> 00:16:58,330
the session for us storing it in gate in

00:16:55,480 --> 00:17:00,400
Redis and then when the next request

00:16:58,330 --> 00:17:03,070
comes through it goes back to Redis

00:17:00,400 --> 00:17:05,260
grabs that and uses that that session

00:17:03,070 --> 00:17:11,020
all of that's done with session cookies

00:17:05,260 --> 00:17:13,260
and it coordinates all that for you and

00:17:11,020 --> 00:17:16,350
then as

00:17:13,260 --> 00:17:18,630
said that session persistence filter is

00:17:16,350 --> 00:17:20,820
the last thing second the last thing

00:17:18,630 --> 00:17:23,190
that can touch the response or in this

00:17:20,820 --> 00:17:25,199
case it's actually going to save the

00:17:23,190 --> 00:17:27,900
session back to Redis so that the next

00:17:25,199 --> 00:17:36,120
request that comes in can have the most

00:17:27,900 --> 00:17:41,070
up-to-date version all right

00:17:36,120 --> 00:17:43,500
so spinnaker is a set of micro services

00:17:41,070 --> 00:17:45,750
and so engage is the only one that's

00:17:43,500 --> 00:17:49,140
actually making you go through this

00:17:45,750 --> 00:17:51,000
authentication dance back and forth so

00:17:49,140 --> 00:17:54,240
how is it that the authentication

00:17:51,000 --> 00:17:55,650
propagates from the very beginning of it

00:17:54,240 --> 00:17:57,540
all all the way through to the back end

00:17:55,650 --> 00:18:00,180
down to cloud diver where cloud diver

00:17:57,540 --> 00:18:03,270
does all of the mutating operations in

00:18:00,180 --> 00:18:04,920
this case using some of the cork and

00:18:03,270 --> 00:18:09,450
retrofit helpers that are built in each

00:18:04,920 --> 00:18:12,060
one of the services have these shared

00:18:09,450 --> 00:18:14,040
libraries built into them and they do it

00:18:12,060 --> 00:18:18,030
specifically using an HTTP header called

00:18:14,040 --> 00:18:19,050
Expenditure user this is part of the

00:18:18,030 --> 00:18:22,260
reason if you look at our documentation

00:18:19,050 --> 00:18:26,340
that we highly recommend that you either

00:18:22,260 --> 00:18:27,720
use the mutual TLS that Cameron once

00:18:26,340 --> 00:18:30,150
again mentioned in the last session

00:18:27,720 --> 00:18:32,100
using mutual TLS between all the

00:18:30,150 --> 00:18:35,310
different spinnaker micro services or

00:18:32,100 --> 00:18:36,990
putting spinnaker on its own subnet so

00:18:35,310 --> 00:18:39,660
that no other part of your application

00:18:36,990 --> 00:18:42,570
can talk to each other because all it

00:18:39,660 --> 00:18:45,120
takes is a header that's a that is just

00:18:42,570 --> 00:18:47,580
identifying the user to to grant

00:18:45,120 --> 00:18:55,340
whatever whatever access that that user

00:18:47,580 --> 00:18:55,340
has all right

00:19:02,860 --> 00:19:07,310
have you've ever been on the wrong side

00:19:05,150 --> 00:19:12,140
of a fiat air this is probably how how

00:19:07,310 --> 00:19:15,920
do you feel so let's talk about Fiat

00:19:12,140 --> 00:19:17,650
Fiat is the authorization server this is

00:19:15,920 --> 00:19:20,170
the one this is the piece that

00:19:17,650 --> 00:19:23,000
determines whether or not you have

00:19:20,170 --> 00:19:25,340
you've approved or denied access to

00:19:23,000 --> 00:19:27,710
these resources specifically what we're

00:19:25,340 --> 00:19:31,820
talking about it's applications and

00:19:27,710 --> 00:19:34,310
accounts we're gonna go through the

00:19:31,820 --> 00:19:38,540
security model here Spinnaker's security

00:19:34,310 --> 00:19:39,770
model is unrestricted by default so that

00:19:38,540 --> 00:19:41,230
means whenever you're standing

00:19:39,770 --> 00:19:44,120
everything up and you actually do have

00:19:41,230 --> 00:19:46,850
authorization enabled if you have not

00:19:44,120 --> 00:19:49,220
specifically locked down an application

00:19:46,850 --> 00:19:50,690
or an account it's wide open anybody

00:19:49,220 --> 00:19:52,960
within your enterprise that has access

00:19:50,690 --> 00:19:56,930
to login can go in and modify that

00:19:52,960 --> 00:19:59,330
application or that account but once you

00:19:56,930 --> 00:20:02,470
start adding restrictions they're only

00:19:59,330 --> 00:20:05,570
the people who have been granted

00:20:02,470 --> 00:20:07,610
authorizations can actually get in

00:20:05,570 --> 00:20:08,630
you specify restrictions using this

00:20:07,610 --> 00:20:10,790
permissions

00:20:08,630 --> 00:20:13,970
yamo this one's this one would be an

00:20:10,790 --> 00:20:17,510
example of in cloud driver restricting

00:20:13,970 --> 00:20:19,850
some account with groups that are either

00:20:17,510 --> 00:20:23,810
like all sre that team ends and then the

00:20:19,850 --> 00:20:28,430
team sre might have access to production

00:20:23,810 --> 00:20:32,300
environments let's say one thing to note

00:20:28,430 --> 00:20:34,040
is that all of these roles the user must

00:20:32,300 --> 00:20:35,690
be one of them all of the rules are kind

00:20:34,040 --> 00:20:42,580
of ordered to get it logically Ord

00:20:35,690 --> 00:20:45,470
together so Fiat has the ability to

00:20:42,580 --> 00:20:48,320
periodically reach out to an external

00:20:45,470 --> 00:20:51,230
role provider in order to resolve that

00:20:48,320 --> 00:20:54,650
hey we've got a hundred users in our

00:20:51,230 --> 00:20:57,200
enterprise and some and those roles get

00:20:54,650 --> 00:20:58,730
updated over time sometimes we need

00:20:57,200 --> 00:21:00,620
those updates to be reflected

00:20:58,730 --> 00:21:03,230
immediately sometimes we can tell the

00:21:00,620 --> 00:21:06,500
user to wait an hour or so but by

00:21:03,230 --> 00:21:08,000
default theologies re resolving the

00:21:06,500 --> 00:21:10,580
users every 10 minutes

00:21:08,000 --> 00:21:12,890
and the external service that we reach

00:21:10,580 --> 00:21:15,440
out to can be Google Groups if you have

00:21:12,890 --> 00:21:18,100
a Google Apps for work or a G suite

00:21:15,440 --> 00:21:21,290
account we can reach out to github teams

00:21:18,100 --> 00:21:23,870
LDAP and then also there is a there's a

00:21:21,290 --> 00:21:26,240
new feature that if anybody's interested

00:21:23,870 --> 00:21:28,340
I'd love to get some alpha users on this

00:21:26,240 --> 00:21:30,560
then is just a straight file based

00:21:28,340 --> 00:21:33,320
implementation spit out all your users

00:21:30,560 --> 00:21:36,920
in like maybe an ETL process once every

00:21:33,320 --> 00:21:38,770
24 hours and then we can you know we'll

00:21:36,920 --> 00:21:43,070
just pull in that file and apply those

00:21:38,770 --> 00:21:45,980
permissions similarly there's only

00:21:43,070 --> 00:21:49,460
there's also another one using sam'l

00:21:45,980 --> 00:21:51,590
because sam'l can the sample assertion

00:21:49,460 --> 00:21:54,020
that comes over not only validates that

00:21:51,590 --> 00:21:55,820
you are who you say you are but some

00:21:54,020 --> 00:22:00,320
sam'l implementations will also send

00:21:55,820 --> 00:22:01,940
your groups over and this is a great

00:22:00,320 --> 00:22:05,240
thing this is actually about Netflix it

00:22:01,940 --> 00:22:06,500
doesn't currently but anybody who in a

00:22:05,240 --> 00:22:07,790
large organization I'll tell you this

00:22:06,500 --> 00:22:11,870
this is a double-edged sword because

00:22:07,790 --> 00:22:14,510
sometimes your users are members of so

00:22:11,870 --> 00:22:16,880
many groups that it will actually blow

00:22:14,510 --> 00:22:20,180
up the sam'l response as edwin will tell

00:22:16,880 --> 00:22:22,700
you it'll get I think it's 65 K or

00:22:20,180 --> 00:22:24,620
something but how many how many groups

00:22:22,700 --> 00:22:26,120
was that approximately like three

00:22:24,620 --> 00:22:27,530
hundred and twenty three hundred and

00:22:26,120 --> 00:22:29,120
twenty seven groups so if your users are

00:22:27,530 --> 00:22:31,580
roughly you know three hundred and

00:22:29,120 --> 00:22:33,950
groups groups yours are so large or

00:22:31,580 --> 00:22:37,640
they're in three hundred groups sam'l

00:22:33,950 --> 00:22:45,590
might not be your your your preferred

00:22:37,640 --> 00:22:48,670
choice alright don't let you look at

00:22:45,590 --> 00:22:51,230
that for a sec well I also read it

00:22:48,670 --> 00:22:53,440
there's there's a lot of stuff going on

00:22:51,230 --> 00:22:53,440
in here

00:22:57,400 --> 00:23:04,570
so this is this is how the permission

00:23:02,080 --> 00:23:06,880
resolution is happening in Fiat this is

00:23:04,570 --> 00:23:09,910
the process that happens roughly every

00:23:06,880 --> 00:23:11,770
ten minutes by default but if you have a

00:23:09,910 --> 00:23:14,020
large number a large number of users you

00:23:11,770 --> 00:23:16,780
might need to extend this out to maybe

00:23:14,020 --> 00:23:19,180
an hour maybe once every two hours so

00:23:16,780 --> 00:23:20,260
you have some user that has logged in

00:23:19,180 --> 00:23:23,770
before okay

00:23:20,260 --> 00:23:25,990
they have roles from your external

00:23:23,770 --> 00:23:28,240
provider will use crimefighter here to

00:23:25,990 --> 00:23:29,980
highlight what you have but they also

00:23:28,240 --> 00:23:32,890
might have additional roles that that

00:23:29,980 --> 00:23:34,390
don't apply to anything here and then

00:23:32,890 --> 00:23:36,880
you've got your application and your

00:23:34,390 --> 00:23:38,800
account config okay your account

00:23:36,880 --> 00:23:41,320
configuration lives within cloud driver

00:23:38,800 --> 00:23:45,910
cloud driver is the is the source of

00:23:41,320 --> 00:23:49,540
truth for accounts okay whereas front

00:23:45,910 --> 00:23:52,210
fifty as being the config service is the

00:23:49,540 --> 00:23:55,000
owner of the application config and

00:23:52,210 --> 00:23:57,250
within that application config you have

00:23:55,000 --> 00:24:00,850
the ability to specify permissions on a

00:23:57,250 --> 00:24:03,450
per application basis or just leave them

00:24:00,850 --> 00:24:08,440
open Wade mentioned that everything if

00:24:03,450 --> 00:24:10,270
left unspecified is unrestricted so in

00:24:08,440 --> 00:24:13,600
this case what we're doing is we're

00:24:10,270 --> 00:24:15,130
taking all of the users roles and then

00:24:13,600 --> 00:24:17,679
all of the accounts in the applications

00:24:15,130 --> 00:24:19,870
and we're merging them into what a

00:24:17,679 --> 00:24:21,630
resolved user permission looks like and

00:24:19,870 --> 00:24:25,630
in this case

00:24:21,630 --> 00:24:27,910
user Batman has the role crimefighter so

00:24:25,630 --> 00:24:31,059
they have read permissions on the Gotham

00:24:27,910 --> 00:24:33,610
Bank account and then they also have

00:24:31,059 --> 00:24:35,080
applications for the mortgage account

00:24:33,610 --> 00:24:38,520
both the read and the write permission

00:24:35,080 --> 00:24:41,440
because of that and also to the ATM

00:24:38,520 --> 00:24:45,840
application because the ATM application

00:24:41,440 --> 00:24:47,920
is unrestricted does that make sense

00:24:45,840 --> 00:24:53,110
so this is the thing that's happening

00:24:47,920 --> 00:24:55,300
every ten minutes behind the scenes the

00:24:53,110 --> 00:24:57,340
kind of I told you this was all a deep

00:24:55,300 --> 00:25:00,340
dive so we're diving into the

00:24:57,340 --> 00:25:02,380
implementation details so as we showed

00:25:00,340 --> 00:25:05,080
before when you have two or three

00:25:02,380 --> 00:25:07,570
instances of fiat running they are

00:25:05,080 --> 00:25:08,460
backed by a shared state of Redis and

00:25:07,570 --> 00:25:10,050
this is

00:25:08,460 --> 00:25:13,800
where this is the kind of the layout

00:25:10,050 --> 00:25:15,510
that red is the Fiat puts into Redis and

00:25:13,800 --> 00:25:18,000
it separates everything out by

00:25:15,510 --> 00:25:20,220
application by what roles they have by

00:25:18,000 --> 00:25:21,630
accounts and service accounts which are

00:25:20,220 --> 00:25:24,870
going to get to here in a second and

00:25:21,630 --> 00:25:27,810
then digging into any one of them we

00:25:24,870 --> 00:25:31,370
actually have the serialized permission

00:25:27,810 --> 00:25:33,990
that says for this for this application

00:25:31,370 --> 00:25:36,600
application for this application this

00:25:33,990 --> 00:25:38,850
user has these permissions reads and

00:25:36,600 --> 00:25:41,790
writes and then what what happens in

00:25:38,850 --> 00:25:46,010
here is this is just listing out what

00:25:41,790 --> 00:25:46,010
role is actually giving you that write

00:25:47,480 --> 00:25:52,440
part of why we do this every ten minutes

00:25:50,130 --> 00:25:55,860
is so that we have a resolved

00:25:52,440 --> 00:25:58,980
application ready to go whenever a

00:25:55,860 --> 00:26:01,560
user's request comes in this is ID this

00:25:58,980 --> 00:26:04,680
is intended to be a high read service

00:26:01,560 --> 00:26:07,410
and an infrequent write service which is

00:26:04,680 --> 00:26:14,430
why we want everything resolved and be

00:26:07,410 --> 00:26:18,270
very quickly accessible all right

00:26:14,430 --> 00:26:20,570
so let's talk about service accounts if

00:26:18,270 --> 00:26:23,700
you've been running spinnaker for

00:26:20,570 --> 00:26:27,390
greater than a year or so you might

00:26:23,700 --> 00:26:29,640
remember you might remember when we had

00:26:27,390 --> 00:26:31,800
a legacy authentication slash

00:26:29,640 --> 00:26:33,780
authorization system where gate was kind

00:26:31,800 --> 00:26:35,940
of responsible for doing these calls to

00:26:33,780 --> 00:26:37,770
the role providers and so when you

00:26:35,940 --> 00:26:40,230
locked your when you launched your

00:26:37,770 --> 00:26:42,600
system down that meant that you could no

00:26:40,230 --> 00:26:44,010
longer use a trigger to trigger

00:26:42,600 --> 00:26:47,610
automated pipelines

00:26:44,010 --> 00:26:50,850
so we had we had to come up with a way

00:26:47,610 --> 00:26:53,160
around this and one of them was certain

00:26:50,850 --> 00:26:57,900
and this is service accounts so this is

00:26:53,160 --> 00:26:59,790
a static file that just says I want to

00:26:57,900 --> 00:27:03,480
have a service account name Batmobile

00:26:59,790 --> 00:27:05,790
its it needs users to be a member of

00:27:03,480 --> 00:27:08,280
crimefighter in order for me to act in

00:27:05,790 --> 00:27:10,470
order to gain access to this service

00:27:08,280 --> 00:27:13,050
account and these permissions are

00:27:10,470 --> 00:27:17,370
resolved just like just like any other

00:27:13,050 --> 00:27:20,340
user spinnaker admins create this right

00:27:17,370 --> 00:27:21,740
now if you are interested in writing a

00:27:20,340 --> 00:27:25,279
UI for me you know

00:27:21,740 --> 00:27:27,710
see me after this but what's different

00:27:25,279 --> 00:27:29,419
from what's different with service

00:27:27,710 --> 00:27:31,909
accounts different than the application

00:27:29,419 --> 00:27:33,679
in the account configuration where when

00:27:31,909 --> 00:27:36,230
you listed when you list all of the

00:27:33,679 --> 00:27:38,809
roles that were required a user just had

00:27:36,230 --> 00:27:41,380
to have one of them in this case the

00:27:38,809 --> 00:27:44,330
user has to have all of the roles

00:27:41,380 --> 00:27:46,789
specified in the member of in order to

00:27:44,330 --> 00:27:49,750
have access to this account this is to

00:27:46,789 --> 00:27:53,330
prevent a privilege escalation exploit

00:27:49,750 --> 00:27:58,130
and it greatly simplifies like the

00:27:53,330 --> 00:27:59,899
Ackles around robot accounts because

00:27:58,130 --> 00:28:02,179
there was an initial alpha

00:27:59,899 --> 00:28:04,010
implementation of this where it was just

00:28:02,179 --> 00:28:06,799
all kinds of confusing and you know I

00:28:04,010 --> 00:28:08,149
was responding to questions and slack

00:28:06,799 --> 00:28:12,260
all the time about getting service

00:28:08,149 --> 00:28:14,779
counts working all right so let's go

00:28:12,260 --> 00:28:16,669
through an example here user robin has

00:28:14,779 --> 00:28:18,470
the roles crimefighter in superhero and

00:28:16,669 --> 00:28:19,850
now we've got two service accounts here

00:28:18,470 --> 00:28:22,880
one called Batmobile and one called

00:28:19,850 --> 00:28:25,190
Lamborghini Robin has access to

00:28:22,880 --> 00:28:27,890
Batmobile because he has all of the

00:28:25,190 --> 00:28:30,230
roles a crime fighter that the Batmobile

00:28:27,890 --> 00:28:32,419
has specified whereas he doesn't have

00:28:30,230 --> 00:28:36,830
access to Lamborghini because he also

00:28:32,419 --> 00:28:38,899
requires the Wayne family you know role

00:28:36,830 --> 00:28:41,840
in order to access that one so that's

00:28:38,899 --> 00:28:45,289
just a simple simplified way to think

00:28:41,840 --> 00:28:47,929
about how how to access service accounts

00:28:45,289 --> 00:28:49,850
so anybody has ever gotten into to

00:28:47,929 --> 00:28:54,320
configuring your pipeline triggers and

00:28:49,850 --> 00:28:56,360
you have a blank run as user field this

00:28:54,320 --> 00:29:03,080
is this is the root of it is a root of

00:28:56,360 --> 00:29:04,880
lying if you're interested there is an

00:29:03,080 --> 00:29:06,350
alternative to setting up all those

00:29:04,880 --> 00:29:09,080
service accounts and this is actually

00:29:06,350 --> 00:29:11,570
what Netflix ran with things is still

00:29:09,080 --> 00:29:13,340
running with the first stage in your

00:29:11,570 --> 00:29:16,520
pipeline you can just make it a manual

00:29:13,340 --> 00:29:20,179
judgment stage and then check the

00:29:16,520 --> 00:29:22,250
propagate authentication it's not the

00:29:20,179 --> 00:29:24,590
most ideal solution because obviously

00:29:22,250 --> 00:29:26,659
your pipelines are triggering and not

00:29:24,590 --> 00:29:29,450
actually running until somebody comes in

00:29:26,659 --> 00:29:33,710
and clicks the manual yes button but

00:29:29,450 --> 00:29:34,400
this is a way to enable this is a way to

00:29:33,710 --> 00:29:36,680
enable

00:29:34,400 --> 00:29:39,710
access to triggered pipelines on

00:29:36,680 --> 00:29:42,410
protected resources so I think this is

00:29:39,710 --> 00:29:43,940
not something that is commonly known at

00:29:42,410 --> 00:29:46,670
least I haven't seen anybody in the chat

00:29:43,940 --> 00:29:49,760
room asked about this but this is a a

00:29:46,670 --> 00:29:57,640
way to do it if the service account

00:29:49,760 --> 00:30:00,260
stuff is you know is much alright

00:29:57,640 --> 00:30:03,530
that was the authorization server that's

00:30:00,260 --> 00:30:07,580
Fiat obviously it contains all of the

00:30:03,530 --> 00:30:09,740
resolved permissions and whenever so so

00:30:07,580 --> 00:30:12,920
whenever a user is trying to gain access

00:30:09,740 --> 00:30:15,440
to a system or to do something if it's

00:30:12,920 --> 00:30:18,020
either to read the state of your

00:30:15,440 --> 00:30:22,070
application or to actually make mutating

00:30:18,020 --> 00:30:24,530
calls the each of the other different

00:30:22,070 --> 00:30:28,240
services need to be able to talk to Fiat

00:30:24,530 --> 00:30:28,240
and that's where the this code comes in

00:30:28,490 --> 00:30:35,110
so the Fiat applet API client library is

00:30:31,640 --> 00:30:37,550
baked in to all of these other services

00:30:35,110 --> 00:30:39,470
specifically gate or Co cloud driver in

00:30:37,550 --> 00:30:42,470
front 50 because these are the kind of

00:30:39,470 --> 00:30:47,990
the keep key points of where accounts or

00:30:42,470 --> 00:30:49,850
applications are accessed so Fiat will

00:30:47,990 --> 00:30:51,500
actually you know we're gonna step

00:30:49,850 --> 00:30:53,600
through kind of what this looks like

00:30:51,500 --> 00:30:56,600
since these are all micro services

00:30:53,600 --> 00:30:58,970
they're all just accepting HTTP calls

00:30:56,600 --> 00:31:00,380
but before they actually get to the

00:30:58,970 --> 00:31:02,929
controller today I should get to the

00:31:00,380 --> 00:31:06,110
application code they run into a Fiat

00:31:02,929 --> 00:31:08,870
intercept and if you're looking at the

00:31:06,110 --> 00:31:11,990
code this is what a Fiat intercept looks

00:31:08,870 --> 00:31:13,850
like so you got your application

00:31:11,990 --> 00:31:16,490
controller whatever whatever whatever

00:31:13,850 --> 00:31:18,130
controller it happens to be you'll see

00:31:16,490 --> 00:31:20,870
littered throughout the throughout

00:31:18,130 --> 00:31:24,860
pre-authorized and post filter calls

00:31:20,870 --> 00:31:28,010
where this is talking to the Fiat

00:31:24,860 --> 00:31:32,660
permission evaluator this is a piece

00:31:28,010 --> 00:31:35,300
this is a being that is part of the

00:31:32,660 --> 00:31:37,760
spring security framework that we've

00:31:35,300 --> 00:31:40,460
hooked into in order to provide the

00:31:37,760 --> 00:31:44,690
least intrusive way for the application

00:31:40,460 --> 00:31:46,550
developer to secure the code so whenever

00:31:44,690 --> 00:31:48,230
so if there are developers out there are

00:31:46,550 --> 00:31:51,020
people who are interested in

00:31:48,230 --> 00:31:52,880
you know extending spinnaker and writing

00:31:51,020 --> 00:31:55,580
your own modules and whatnot

00:31:52,880 --> 00:31:56,929
this is a good thing to know about it's

00:31:55,580 --> 00:32:01,010
a pre-authorized of the post filter

00:31:56,929 --> 00:32:04,120
there are all kinds of examples in those

00:32:01,010 --> 00:32:06,470
four modules cloud diver Orca gate

00:32:04,120 --> 00:32:07,730
they're kind of littered about the

00:32:06,470 --> 00:32:11,750
littered about the code if you want to

00:32:07,730 --> 00:32:14,450
go see how to use these specifically the

00:32:11,750 --> 00:32:17,179
has permission application and read so

00:32:14,450 --> 00:32:20,660
it's a pretty simple interface to say I

00:32:17,179 --> 00:32:23,150
only want people who have this

00:32:20,660 --> 00:32:30,290
permission to be able to access this

00:32:23,150 --> 00:32:31,910
call alright and so this is the just the

00:32:30,290 --> 00:32:34,880
interface for that permission evaluator

00:32:31,910 --> 00:32:36,890
we have a custom implementation of this

00:32:34,880 --> 00:32:51,049
that everything's open source you can go

00:32:36,890 --> 00:32:53,330
go look through it so what is that

00:32:51,049 --> 00:32:55,669
implementation actually doing so in this

00:32:53,330 --> 00:32:58,250
case the implementation is making an

00:32:55,669 --> 00:33:02,410
HTTP call to the authorization server

00:32:58,250 --> 00:33:05,150
Fiat and Fiat is giving back your entire

00:33:02,410 --> 00:33:07,730
resolved permission and so in that case

00:33:05,150 --> 00:33:10,190
the permission evaluator is using that

00:33:07,730 --> 00:33:12,110
data to make a yea or nay decision on

00:33:10,190 --> 00:33:21,620
whether or not you have access to this

00:33:12,110 --> 00:33:22,010
resource so with all of that all of that

00:33:21,620 --> 00:33:24,980
knowledge

00:33:22,010 --> 00:33:28,010
I wish highly recommend you secure your

00:33:24,980 --> 00:33:29,780
spinnaker installation so that you don't

00:33:28,010 --> 00:33:34,760
end up with a cloud infrastructure that

00:33:29,780 --> 00:33:42,220
looks like this and with that we're

00:33:34,760 --> 00:33:42,220
going to use this fancy for questions

00:33:45,470 --> 00:34:21,060
the ones at first seen three three

00:33:50,220 --> 00:34:24,410
stalks here a real question okay so you

00:34:21,060 --> 00:34:27,960
said with the expenditure user header

00:34:24,410 --> 00:34:34,020
the is that mean if I present the header

00:34:27,960 --> 00:34:36,480
route and I'm not it no it doesn't

00:34:34,020 --> 00:34:39,360
actually like go to the applications

00:34:36,480 --> 00:34:41,040
like to the underlying system it's just

00:34:39,360 --> 00:34:42,900
a custom header that says you are who

00:34:41,040 --> 00:34:45,860
you are and then that hooks a Fiat

00:34:42,900 --> 00:34:50,040
system so there's no user root in Fiat

00:34:45,860 --> 00:34:53,310
it's gonna return 403 forbidden okay but

00:34:50,040 --> 00:34:55,770
assuming there is a user right and this

00:34:53,310 --> 00:34:58,230
this goes back to the recommendation to

00:34:55,770 --> 00:35:00,980
put spinnaker on its own subnet so that

00:34:58,230 --> 00:35:04,740
end users can't do that

00:35:00,980 --> 00:35:07,170
where is guard so guard was saying that

00:35:04,740 --> 00:35:09,900
he's a guy from ships dead they talked

00:35:07,170 --> 00:35:12,180
this morning he was saying that this has

00:35:09,900 --> 00:35:15,090
actually been a very good help for them

00:35:12,180 --> 00:35:16,560
because their team only is the only team

00:35:15,090 --> 00:35:18,360
that has access to spinnaker and if they

00:35:16,560 --> 00:35:20,250
need to do some administrative

00:35:18,360 --> 00:35:22,530
maintenance on it for example they can

00:35:20,250 --> 00:35:25,140
write scripts to say I want to

00:35:22,530 --> 00:35:26,550
impersonate this user but because their

00:35:25,140 --> 00:35:28,770
team is the only one who has access to

00:35:26,550 --> 00:35:34,880
the spinnaker installation they're able

00:35:28,770 --> 00:35:37,830
to do that it's it's it relies on

00:35:34,880 --> 00:35:41,790
external security of the spinnaker

00:35:37,830 --> 00:35:49,650
deployment itself to actually protect it

00:35:41,790 --> 00:35:57,120
all right all right so this is kind of

00:35:49,650 --> 00:35:58,620
more around like

00:35:57,120 --> 00:36:00,930
say I wanted developers to be able to

00:35:58,620 --> 00:36:04,590
deploy but not necessarily change a

00:36:00,930 --> 00:36:08,790
pipeline sure so we started out this I

00:36:04,590 --> 00:36:10,380
started out this knowing that I could I

00:36:08,790 --> 00:36:12,720
could spend you know six months

00:36:10,380 --> 00:36:14,790
designing the most elaborate Akal system

00:36:12,720 --> 00:36:16,590
and it would be amazing and everybody

00:36:14,790 --> 00:36:19,950
would just you know fall over themselves

00:36:16,590 --> 00:36:21,720
to say how awesome my system is but I

00:36:19,950 --> 00:36:25,080
didn't want to do that because I knew

00:36:21,720 --> 00:36:27,300
that there was never gonna be able to

00:36:25,080 --> 00:36:29,610
design an Akal system up front that was

00:36:27,300 --> 00:36:31,190
gonna meet everybody's needs so I took

00:36:29,610 --> 00:36:33,960
the approach of the Pareto principle

00:36:31,190 --> 00:36:35,960
implementing the minimum amount that we

00:36:33,960 --> 00:36:38,430
were we were hearing from customers

00:36:35,960 --> 00:36:40,800
which was at the time I want to be able

00:36:38,430 --> 00:36:44,340
to secure applications and then I was

00:36:40,800 --> 00:36:46,050
gonna wait and waiting for feedback from

00:36:44,340 --> 00:36:49,860
the community to say what is the next

00:36:46,050 --> 00:36:51,690
big piece of the security system are

00:36:49,860 --> 00:36:54,690
there the authorization system that we

00:36:51,690 --> 00:36:58,020
need to implement things that I've heard

00:36:54,690 --> 00:36:58,770
of are like per pipeline per pipeline

00:36:58,020 --> 00:37:02,250
Ackles

00:36:58,770 --> 00:37:03,870
or some is like down to per stage Ackles

00:37:02,250 --> 00:37:06,620
and like those are the kind of things

00:37:03,870 --> 00:37:09,930
that add a whole lot of extra overhead

00:37:06,620 --> 00:37:11,280
that may or may not be generally

00:37:09,930 --> 00:37:12,930
applicable to the each of the broader

00:37:11,280 --> 00:37:16,800
community and actually add a whole lot

00:37:12,930 --> 00:37:18,570
more heck so and so what I'm saying is

00:37:16,800 --> 00:37:20,460
like I don't have any future plans at

00:37:18,570 --> 00:37:23,850
this point of go beyond application and

00:37:20,460 --> 00:37:26,280
account until we hear like a march from

00:37:23,850 --> 00:37:29,280
the from the community saying like we

00:37:26,280 --> 00:37:36,510
need this we want this we're like we

00:37:29,280 --> 00:37:40,740
can't adopt spinnaker without it this is

00:37:36,510 --> 00:37:43,800
cool what are the restrictions on like

00:37:40,740 --> 00:37:45,300
account ACL like when the account allows

00:37:43,800 --> 00:37:49,530
right what does that actually mean

00:37:45,300 --> 00:37:52,860
everything I mean like so you've got the

00:37:49,530 --> 00:37:54,540
ability to to read and see that server

00:37:52,860 --> 00:37:56,700
groups load balancers security groups

00:37:54,540 --> 00:37:58,410
all of these things exist with the read

00:37:56,700 --> 00:38:01,980
permission and then the ability to

00:37:58,410 --> 00:38:04,620
mutate them to clone to resize to

00:38:01,980 --> 00:38:06,600
destroy disabled like actual mutating

00:38:04,620 --> 00:38:08,170
operations that's everything covered

00:38:06,600 --> 00:38:10,600
with the right

00:38:08,170 --> 00:38:12,370
I could go on a little further so let's

00:38:10,600 --> 00:38:14,610
say I've got application a that a user

00:38:12,370 --> 00:38:17,500
is authorized for and it calls the

00:38:14,610 --> 00:38:19,150
pipeline runs the pipeline trigger

00:38:17,500 --> 00:38:21,130
against application B which these are is

00:38:19,150 --> 00:38:25,330
not authorized for does that pipeline

00:38:21,130 --> 00:38:29,260
succeed so the the pipe depends on how

00:38:25,330 --> 00:38:31,150
your your pipeline is set up there are

00:38:29,260 --> 00:38:32,680
two two kinds of ways for a pipeline to

00:38:31,150 --> 00:38:34,780
kick to trigger another pipeline there's

00:38:32,680 --> 00:38:38,200
an explicit way which is the run

00:38:34,780 --> 00:38:42,120
pipeline stage the implicit way which is

00:38:38,200 --> 00:38:44,350
to say that the trigger on pipeline B is

00:38:42,120 --> 00:38:46,420
triggered on the success or failure of

00:38:44,350 --> 00:38:52,390
pipeline a right it's it's a trigger in

00:38:46,420 --> 00:38:55,000
and of itself so if if you're explicit

00:38:52,390 --> 00:38:57,340
about it if you're explicit with in your

00:38:55,000 --> 00:39:00,220
pipeline you have a stage that says run

00:38:57,340 --> 00:39:02,050
the child by blind your authentication

00:39:00,220 --> 00:39:04,720
mechanism is gonna go with your author

00:39:02,050 --> 00:39:06,910
your identity is gonna go with it and if

00:39:04,720 --> 00:39:09,550
you don't have access to access to

00:39:06,910 --> 00:39:12,610
application B you're gonna the first

00:39:09,550 --> 00:39:14,890
mutating call it might even be the first

00:39:12,610 --> 00:39:18,370
read call it's going to get a 403 and

00:39:14,890 --> 00:39:20,530
your pipeline was gonna fail depending

00:39:18,370 --> 00:39:24,370
on how you have and so that's the

00:39:20,530 --> 00:39:26,440
explicit case in the implicit case you

00:39:24,370 --> 00:39:31,990
can I think you can still do this you

00:39:26,440 --> 00:39:36,340
can set up a run as user to trigger as a

00:39:31,990 --> 00:39:39,310
separate user to run as a separate user

00:39:36,340 --> 00:39:40,450
when that pipeline gets triggered I have

00:39:39,310 --> 00:39:46,000
to confirm that it's been a while since

00:39:40,450 --> 00:39:59,230
I've looked at that would you recommend

00:39:46,000 --> 00:40:01,120
using oauth2 or Cemil well part of it

00:39:59,230 --> 00:40:03,360
being that like you don't need you don't

00:40:01,120 --> 00:40:07,090
necessarily need your administrators

00:40:03,360 --> 00:40:07,510
your system admins to get everything set

00:40:07,090 --> 00:40:10,660
up

00:40:07,510 --> 00:40:14,050
I found that I found that it's much

00:40:10,660 --> 00:40:16,540
easier to to debug from the client side

00:40:14,050 --> 00:40:19,720
like actually running through the chrome

00:40:16,540 --> 00:40:21,490
dev terrence and seeing what's going

00:40:19,720 --> 00:40:23,470
what's going by

00:40:21,490 --> 00:40:25,330
that being said you could still do that

00:40:23,470 --> 00:40:27,900
with the sam'l assertions

00:40:25,330 --> 00:40:31,150
you just need extra tools to kind of

00:40:27,900 --> 00:40:34,270
code the XML that's going across the

00:40:31,150 --> 00:40:36,280
wire at least here you can if you know

00:40:34,270 --> 00:40:39,300
the the three-legged OAuth flow you can

00:40:36,280 --> 00:40:42,580
see each of the requests being made and

00:40:39,300 --> 00:40:52,900
in which which code is going where the

00:40:42,580 --> 00:40:57,910
control flow with the discussion around

00:40:52,900 --> 00:41:01,450
the subnet and how easy is it if you

00:40:57,910 --> 00:41:05,940
wanted to configure mutual TLS between

00:41:01,450 --> 00:41:08,470
these entities to protect the port I

00:41:05,940 --> 00:41:09,760
just did something like a IBT or

00:41:08,470 --> 00:41:11,619
something like that would be more

00:41:09,760 --> 00:41:13,090
difficult probably to put in that of

00:41:11,619 --> 00:41:17,590
course more development but at least the

00:41:13,090 --> 00:41:19,780
TLS piece cannot be easily done so I

00:41:17,590 --> 00:41:23,010
would refer you to some of the Netflix

00:41:19,780 --> 00:41:26,580
guys who have that set up the mutual TLS

00:41:23,010 --> 00:41:29,109
thing they have the open sourced a tool

00:41:26,580 --> 00:41:31,180
to kind of help with server management I

00:41:29,109 --> 00:41:31,840
think it was called lemur do any Netflix

00:41:31,180 --> 00:41:42,880
people here

00:41:31,840 --> 00:41:44,560
Jerris news that Uemura does yeah so

00:41:42,880 --> 00:41:46,800
yeah I think there's there's Netflix

00:41:44,560 --> 00:41:49,630
develop has developed and open-source

00:41:46,800 --> 00:41:51,160
tools for managing client-side

00:41:49,630 --> 00:41:53,500
certificates so I would suggest looking

00:41:51,160 --> 00:41:55,300
into that short of having your own

00:41:53,500 --> 00:42:02,109
Metatron service that Cameron talked

00:41:55,300 --> 00:42:04,510
about that other than that Cottrell you

00:42:02,109 --> 00:42:12,369
guys did you have you guys didn't tell

00:42:04,510 --> 00:42:14,500
us to it's a handful of configuration

00:42:12,369 --> 00:42:18,070
settings within each of the different

00:42:14,500 --> 00:42:27,910
services to say I client based

00:42:18,070 --> 00:42:30,520
authentication given that so the

00:42:27,910 --> 00:42:33,640
question be like it's it ever going to

00:42:30,520 --> 00:42:34,760
be in halyard I doubt it because there's

00:42:33,640 --> 00:42:36,200
so many

00:42:34,760 --> 00:42:38,870
variables in there in terms of like

00:42:36,200 --> 00:42:43,240
self-signed certificates or like using

00:42:38,870 --> 00:42:43,240
your enterprises certificate signing

00:42:44,170 --> 00:42:49,820
this for mutual TLS actually should be

00:42:47,750 --> 00:42:52,040
in hired I'm thinking that odds are you

00:42:49,820 --> 00:42:53,930
supply your certs to halyard that you

00:42:52,040 --> 00:42:55,760
want to it's gonna be a lot of certs you

00:42:53,930 --> 00:42:57,800
have to generate and sign yourself or

00:42:55,760 --> 00:42:59,540
have someone signed for you but then it

00:42:57,800 --> 00:43:00,680
would configure mutual TLS for you the

00:42:59,540 --> 00:43:02,390
approach right now is that it is

00:43:00,680 --> 00:43:04,250
deployed into environment that's

00:43:02,390 --> 00:43:07,910
isolated like Travis said but the subnet

00:43:04,250 --> 00:43:08,990
or with some firewall rules but TLS

00:43:07,910 --> 00:43:10,580
should end up and how you're deciding

00:43:08,990 --> 00:43:15,260
there yet but hopefully next quarter

00:43:10,580 --> 00:43:18,320
there you go hey so I heard some

00:43:15,260 --> 00:43:20,330
question about securing the pipeline and

00:43:18,320 --> 00:43:22,850
authorizing who makes changes to the

00:43:20,330 --> 00:43:24,920
pipeline so I'm from Kappler one we have

00:43:22,850 --> 00:43:26,840
our internal compliance policies that

00:43:24,920 --> 00:43:29,420
one is certified pipeline is in

00:43:26,840 --> 00:43:30,890
production nobody took change and if

00:43:29,420 --> 00:43:33,380
exchange it goes through a review

00:43:30,890 --> 00:43:35,030
process so one of the options that we

00:43:33,380 --> 00:43:37,310
have implemented is we have you'd like

00:43:35,030 --> 00:43:39,650
to github authentication and approval

00:43:37,310 --> 00:43:41,660
and review process so any pipeline

00:43:39,650 --> 00:43:43,970
changes that happen and users apply the

00:43:41,660 --> 00:43:46,730
changes it goes to get a process of

00:43:43,970 --> 00:43:49,100
preview and once the pipeline is

00:43:46,730 --> 00:43:52,160
certified then the pipeline is enabled

00:43:49,100 --> 00:43:54,470
back into spinnaker itself so I just

00:43:52,160 --> 00:43:55,970
want to you shared that how Capital One

00:43:54,470 --> 00:43:58,490
has address some of those compliance

00:43:55,970 --> 00:44:23,360
things in our organization

00:43:58,490 --> 00:44:25,640
thank you support around everyone just

00:44:23,360 --> 00:44:29,390
implemented that I think yeah as a PR

00:44:25,640 --> 00:44:32,660
was it merged no we're still are at work

00:44:29,390 --> 00:44:36,500
we have to hold off for like I get

00:44:32,660 --> 00:44:38,720
specific events so it will be peered in

00:44:36,500 --> 00:44:41,570
a couple days probably so to answer your

00:44:38,720 --> 00:44:43,940
question the role extractor for x.509 of

00:44:41,570 --> 00:44:45,830
which there is an interface already in

00:44:43,940 --> 00:44:47,480
gate but no implementation that

00:44:45,830 --> 00:44:49,130
implementation is becoming open-source

00:44:47,480 --> 00:44:52,470
soon

00:44:49,130 --> 00:44:55,290
and we're also going so I just found out

00:44:52,470 --> 00:44:57,569
about lemur lemur does something like

00:44:55,290 --> 00:44:59,010
what we're gonna open source but or

00:44:57,569 --> 00:45:01,109
foreign sourcing something that's called

00:44:59,010 --> 00:45:03,900
Harbormaster which could create

00:45:01,109 --> 00:45:06,569
certificates for the x.509 integration

00:45:03,900 --> 00:45:11,970
now we're writing so that way you can

00:45:06,569 --> 00:45:14,490
use those two tools to do expert I have

00:45:11,970 --> 00:45:17,369
a question about Roscoe and the Roscoe

00:45:14,490 --> 00:45:19,770
logs which in this world it seems are

00:45:17,369 --> 00:45:21,569
not touched at all but you'd also still

00:45:19,770 --> 00:45:24,990
want to keep Roscoe protected either via

00:45:21,569 --> 00:45:27,089
M TLS or a private subnet is there any

00:45:24,990 --> 00:45:30,780
plans to make the Roscoe log securely

00:45:27,089 --> 00:45:34,430
accessible I didn't have any plans for

00:45:30,780 --> 00:45:38,490
it that is a good question though

00:45:34,430 --> 00:45:41,309
the thing about Roscoe is that when you

00:45:38,490 --> 00:45:42,420
invoke a Roscoe Baek Roscoe doesn't know

00:45:41,309 --> 00:45:44,130
anything about the application that's

00:45:42,420 --> 00:45:46,079
being faked it just has its Packer

00:45:44,130 --> 00:45:48,150
template it just has it's a handful set

00:45:46,079 --> 00:45:50,550
of configurations why not it doesn't

00:45:48,150 --> 00:45:54,180
know there's no there's no way for me to

00:45:50,550 --> 00:45:59,010
tell at the API level that this applies

00:45:54,180 --> 00:46:00,960
to this particular deployment account or

00:45:59,010 --> 00:46:03,750
this is a request from this particular

00:46:00,960 --> 00:46:05,520
application so that's the reason why I

00:46:03,750 --> 00:46:08,099
like Roscoe doesn't have that's why

00:46:05,520 --> 00:46:10,200
Roscoe doesn't have any like those those

00:46:08,099 --> 00:46:11,369
pre pre authorized and post filter

00:46:10,200 --> 00:46:13,890
accounts in there you won't I don't

00:46:11,369 --> 00:46:15,450
think you'll find any in there but that

00:46:13,890 --> 00:46:19,650
is a good question about reading the

00:46:15,450 --> 00:46:21,839
logs I'll have to look into that and

00:46:19,650 --> 00:46:23,900
we'll talk with Matt I'm at duffel about

00:46:21,839 --> 00:46:26,900
that he's the guy that wrote Roscoe

00:46:23,900 --> 00:46:26,900
thanks

00:46:30,039 --> 00:46:34,849
thanks by the way great work with the

00:46:32,809 --> 00:46:37,999
Fiat we use it and think I'm super happy

00:46:34,849 --> 00:46:40,400
with it do you have the plans or

00:46:37,999 --> 00:46:43,729
requests to add some sort of admin

00:46:40,400 --> 00:46:48,380
functionality like admin read everything

00:46:43,729 --> 00:46:50,929
or admin read write everything there is

00:46:48,380 --> 00:46:55,640
an is admin call that always returns

00:46:50,929 --> 00:47:00,079
true guaranteed to be random and chosen

00:46:55,640 --> 00:47:01,849
by a fair dice roll I put that as a

00:47:00,079 --> 00:47:05,509
placeholder expecting that somebody

00:47:01,849 --> 00:47:11,019
would ask this question eventually so

00:47:05,509 --> 00:47:16,189
the hook is there there are a handful of

00:47:11,019 --> 00:47:20,329
spots in front 50 where that admin call

00:47:16,189 --> 00:47:21,979
is checked and that is because there's a

00:47:20,329 --> 00:47:23,239
handful of endpoints and very busy they

00:47:21,979 --> 00:47:24,259
were considered like administrative

00:47:23,239 --> 00:47:26,329
batch updates

00:47:24,259 --> 00:47:28,189
I think Netflix built this in whenever

00:47:26,329 --> 00:47:30,349
they were having to do pipeline

00:47:28,189 --> 00:47:31,910
migrations from one format to another

00:47:30,349 --> 00:47:34,880
they would actually download all of the

00:47:31,910 --> 00:47:36,920
pipelines you know do a handful of grep

00:47:34,880 --> 00:47:39,469
commands to change a particular format

00:47:36,920 --> 00:47:41,029
or to change the execution engine or

00:47:39,469 --> 00:47:43,609
something like that and then they would

00:47:41,029 --> 00:47:45,769
re upload repack re upload those into

00:47:43,609 --> 00:47:47,809
front 50 which would then turn around

00:47:45,769 --> 00:47:50,779
and store them into s3 right so that was

00:47:47,809 --> 00:47:54,109
the point of that and that did not seem

00:47:50,779 --> 00:47:56,630
like a end-user function so I put them

00:47:54,109 --> 00:47:59,779
behind like is admin call but like I

00:47:56,630 --> 00:48:01,339
said everybody's considered is admin so

00:47:59,779 --> 00:48:04,999
if you if you want to help me uh you

00:48:01,339 --> 00:48:07,969
know write an implementation of like as

00:48:04,999 --> 00:48:09,529
we have here the the permissions perhaps

00:48:07,969 --> 00:48:12,920
there's a way that we can say here is

00:48:09,529 --> 00:48:15,319
the list of roles that spinnaker

00:48:12,920 --> 00:48:17,599
administrators have and when you are a

00:48:15,319 --> 00:48:19,849
spinnaker administrator you have access

00:48:17,599 --> 00:48:21,439
to both read and write every pipeline or

00:48:19,849 --> 00:48:25,729
read or write every application or

00:48:21,439 --> 00:48:28,009
account and would anybody like how many

00:48:25,729 --> 00:48:33,049
people here are administering your

00:48:28,009 --> 00:48:35,359
spinnaker deployment ok so like do your

00:48:33,049 --> 00:48:36,079
add your admins like require super user

00:48:35,359 --> 00:48:41,689
access

00:48:36,079 --> 00:48:42,750
I imagine they would so yeah let's let's

00:48:41,689 --> 00:48:46,320
talk about like with that

00:48:42,750 --> 00:48:48,660
she might look like I I may have missed

00:48:46,320 --> 00:48:51,540
the point earlier but I'm wondering what

00:48:48,660 --> 00:48:53,280
is the case when a user changes roles or

00:48:51,540 --> 00:48:56,610
you couldn't move across different

00:48:53,280 --> 00:48:59,010
applications how do you manage that so

00:48:56,610 --> 00:49:03,450
that when the roles change for a

00:48:59,010 --> 00:49:05,670
particular user that that generally will

00:49:03,450 --> 00:49:07,110
get picked up so that's this most of the

00:49:05,670 --> 00:49:09,600
time happening in some other external

00:49:07,110 --> 00:49:11,370
system user a gets added to a Google

00:49:09,600 --> 00:49:14,310
Group B right whatever that ends up

00:49:11,370 --> 00:49:17,190
being it can take by default up to ten

00:49:14,310 --> 00:49:20,090
minutes for that change to be picked up

00:49:17,190 --> 00:49:23,040
within Fiat because Fiat is periodically

00:49:20,090 --> 00:49:25,170
syncing to the Google Groups API that

00:49:23,040 --> 00:49:27,030
says all of the users that I know about

00:49:25,170 --> 00:49:30,930
go give me go get me all of their roles

00:49:27,030 --> 00:49:32,670
this big batch this big batch update and

00:49:30,930 --> 00:49:34,350
then we're gonna do resolve all of the

00:49:32,670 --> 00:49:36,600
permissions we're gonna store all of the

00:49:34,350 --> 00:49:38,940
permissions at Redis and then whenever

00:49:36,600 --> 00:49:41,180
that user comes back those new

00:49:38,940 --> 00:49:45,710
permissions will be reflected does that

00:49:41,180 --> 00:49:45,710
sound answer your question yes thank you

00:49:48,140 --> 00:49:54,750
so you mentioned for the API earlier

00:49:51,990 --> 00:49:56,790
x.509 was the option that Netflix has

00:49:54,750 --> 00:49:58,980
kind of been going with is especially

00:49:56,790 --> 00:50:00,360
the tools like rower and other CL eyes

00:49:58,980 --> 00:50:02,520
and things is there ever gonna be

00:50:00,360 --> 00:50:04,200
there's our plan that allow you to

00:50:02,520 --> 00:50:06,600
authenticate with a username and

00:50:04,200 --> 00:50:07,920
password to the API at some point in the

00:50:06,600 --> 00:50:13,470
future I know right now that doesn't

00:50:07,920 --> 00:50:17,100
seem to be an option so like for

00:50:13,470 --> 00:50:19,860
spinnaker to manage its own like its own

00:50:17,100 --> 00:50:21,810
set of users well I wasn't sure there

00:50:19,860 --> 00:50:25,170
would be a way that we could you

00:50:21,810 --> 00:50:28,260
leverage whatever the the identity

00:50:25,170 --> 00:50:31,320
provider is but I give it access to the

00:50:28,260 --> 00:50:33,450
API level not just the UI like right now

00:50:31,320 --> 00:50:35,790
when I log in it redirects me to my

00:50:33,450 --> 00:50:38,040
sam'l provider and then gives me access

00:50:35,790 --> 00:50:38,790
to gey in deck but it would be nice if

00:50:38,040 --> 00:50:40,790
there's some way to do that

00:50:38,790 --> 00:50:43,350
programmatically so that if I have a CLI

00:50:40,790 --> 00:50:44,670
for spinnaker I could it prompts me for

00:50:43,350 --> 00:50:46,410
my username and prompt me for my

00:50:44,670 --> 00:50:48,300
password it still talks to the identity

00:50:46,410 --> 00:50:49,800
provider but right now it has to be done

00:50:48,300 --> 00:50:52,740
via x.509 as far as I know is the only

00:50:49,800 --> 00:50:54,370
option so one of those filters that we

00:50:52,740 --> 00:50:56,860
talked that we looked at that X

00:50:54,370 --> 00:51:00,550
colonel auth token filtered that was

00:50:56,860 --> 00:51:02,920
actually built partially for this that

00:51:00,550 --> 00:51:07,470
might be a restriction on the sam'l

00:51:02,920 --> 00:51:09,370
implementation depending on how

00:51:07,470 --> 00:51:13,090
depending on how you like your script

00:51:09,370 --> 00:51:16,270
like how it's going to assert that it is

00:51:13,090 --> 00:51:19,420
it is who it says it is if that script

00:51:16,270 --> 00:51:22,930
was able to acquire a sam'l assertion

00:51:19,420 --> 00:51:25,960
and it can post that sam'l assertion to

00:51:22,930 --> 00:51:28,510
to gate that will that flow will work

00:51:25,960 --> 00:51:33,130
just like any other just like any other

00:51:28,510 --> 00:51:35,890
user has because that's that's how maybe

00:51:33,130 --> 00:51:37,150
I think that that should work with Sam

00:51:35,890 --> 00:51:38,620
but I think you still have to work with

00:51:37,150 --> 00:51:41,650
the identity provider or the identity

00:51:38,620 --> 00:51:45,360
provider is the one that is is actually

00:51:41,650 --> 00:51:48,580
posting the assertion to gates endpoint

00:51:45,360 --> 00:51:50,740
and saying that this user with this

00:51:48,580 --> 00:51:54,340
session is established to be

00:51:50,740 --> 00:51:56,320
authenticated and that you know then

00:51:54,340 --> 00:51:59,350
when your script user with that session

00:51:56,320 --> 00:52:03,250
cookie makes calls to gate then

00:51:59,350 --> 00:52:04,450
everything will be good though though

00:52:03,250 --> 00:52:07,810
auth flow kind of makes this a little

00:52:04,450 --> 00:52:09,580
bit easier there is so like I said with

00:52:07,810 --> 00:52:11,170
a github personal access token that's

00:52:09,580 --> 00:52:14,160
how that's how this flow works and works

00:52:11,170 --> 00:52:17,260
really nicely with the github auth flow

00:52:14,160 --> 00:52:19,210
for the Google Google OAuth there is a

00:52:17,260 --> 00:52:23,800
tool that I haven't played with but I've

00:52:19,210 --> 00:52:27,690
read about is called OAuth tool o2l that

00:52:23,800 --> 00:52:30,790
I believe the intent is to help make

00:52:27,690 --> 00:52:33,340
acquiring a bearer token easier for

00:52:30,790 --> 00:52:34,630
programmatic script access like I said I

00:52:33,340 --> 00:52:36,220
haven't actually played around with that

00:52:34,630 --> 00:52:38,640
but I do know that that tool exists and

00:52:36,220 --> 00:52:41,830
is its purpose

00:52:38,640 --> 00:52:45,100
not much more for Sam like that's I

00:52:41,830 --> 00:52:49,290
think Sam will you know designed for a

00:52:45,100 --> 00:52:49,290
much older web stack

00:52:54,790 --> 00:52:57,820
[Music]

00:53:02,710 --> 00:53:13,150
at the like provider level for

00:53:05,319 --> 00:53:16,089
authorization it is explicitly read and

00:53:13,150 --> 00:53:18,730
write if you look at deck though we've

00:53:16,089 --> 00:53:20,619
implemented this as you have read access

00:53:18,730 --> 00:53:23,020
and you have read/write access but that

00:53:20,619 --> 00:53:25,599
is just kind of a stylistic thing that

00:53:23,020 --> 00:53:27,250
we expect most users are gonna if they

00:53:25,599 --> 00:53:28,990
want write access they're gonna want

00:53:27,250 --> 00:53:30,970
both read and write we didn't want to

00:53:28,990 --> 00:53:32,859
like to catch somebody up that's like

00:53:30,970 --> 00:53:40,030
hey we couldn't see this because you

00:53:32,859 --> 00:53:42,099
didn't explicitly say if people want to

00:53:40,030 --> 00:53:44,589
talk about x.509 and how we're gonna be

00:53:42,099 --> 00:53:47,440
using it for scripting and specifically

00:53:44,589 --> 00:53:49,150
the PR that we're working on let me know

00:53:47,440 --> 00:53:51,640
and I couldn't demo it to you if we

00:53:49,150 --> 00:53:55,270
could go into the breakout room cool

00:53:51,640 --> 00:54:00,420
thank you guys thank you guys for coming

00:53:55,270 --> 00:54:00,420

YouTube URL: https://www.youtube.com/watch?v=ZXU9OCXl9aY


