Title: Spinnaker Release Process
Publication date: 2017-09-22
Playlist: Spinnaker Summit 2017
Description: 
	JAKE KIEFER, STEVEN KIM, GOOGLE

Spinnaker microservices used to be released on their own cadences without cross-service compatibility validation for any set of service versions. Jake led the design and implementation of the new release process used to drive the Spinnaker OSS versioned releases, which are distinct sets of service versions validated through integration tests (citest), and installed via Halyard. Steven will  talk about motivations for the release process, and Jake will go into the technical details of the release process design and how it solved problems existing previously.

From Spinnaker Summit 2017
Captions: 
	00:00:00,000 --> 00:00:05,069
it's started here so I'm Jake I work on

00:00:02,909 --> 00:00:06,569
spinnaker at Google and I'm gonna tell

00:00:05,069 --> 00:00:10,559
you about the spinnaker SS release

00:00:06,569 --> 00:00:12,019
process so this talk is broken up into

00:00:10,559 --> 00:00:13,590
two different parts it's the

00:00:12,019 --> 00:00:18,660
implementations of the release process

00:00:13,590 --> 00:00:21,480
before and after our 1.00 SS release and

00:00:18,660 --> 00:00:22,920
so for each of the each of the before

00:00:21,480 --> 00:00:25,080
and after I'm gonna go through sort of

00:00:22,920 --> 00:00:27,269
like the technical details show you how

00:00:25,080 --> 00:00:30,300
like how the sausage is made and then

00:00:27,269 --> 00:00:32,250
we'll talk about how health like what

00:00:30,300 --> 00:00:33,989
that means for the end-user and and I

00:00:32,250 --> 00:00:40,710
like how usable is it and what does that

00:00:33,989 --> 00:00:42,660
buy you alright so so before we get too

00:00:40,710 --> 00:00:44,100
far into the details about like how we

00:00:42,660 --> 00:00:45,870
do any of the releasing we need to

00:00:44,100 --> 00:00:47,789
understand exactly what we're dealing

00:00:45,870 --> 00:00:51,059
with when we're doing swagger so just as

00:00:47,789 --> 00:00:52,590
a quick architecture summary so

00:00:51,059 --> 00:00:54,270
Spinnaker's cannon independently

00:00:52,590 --> 00:00:56,309
scalable microservices so they're

00:00:54,270 --> 00:01:00,390
separately configurable and deployable

00:00:56,309 --> 00:01:02,850
and and obviously are deployed together

00:01:00,390 --> 00:01:04,559
to make one spinnaker instance so

00:01:02,850 --> 00:01:08,490
another caveat that we need to be aware

00:01:04,559 --> 00:01:10,619
of is every every micro service has

00:01:08,490 --> 00:01:12,210
independent source repository on github

00:01:10,619 --> 00:01:16,860
so there's ten micro services there's

00:01:12,210 --> 00:01:21,119
ten depositories alright so here is sort

00:01:16,860 --> 00:01:25,140
of like the old old flow I guess of how

00:01:21,119 --> 00:01:28,200
everything was built in published so the

00:01:25,140 --> 00:01:29,579
rough sort of outline of how we how we

00:01:28,200 --> 00:01:32,009
went through development and sort of

00:01:29,579 --> 00:01:34,439
release before 1.0 was the following -

00:01:32,009 --> 00:01:36,150
every all development was done against

00:01:34,439 --> 00:01:39,869
the master branches of all the

00:01:36,150 --> 00:01:42,720
components at some point in time as a

00:01:39,869 --> 00:01:44,549
developer or whoever the maintainer you

00:01:42,720 --> 00:01:47,009
decide you're ready you know feature

00:01:44,549 --> 00:01:49,259
ready or fix some fixes in and you're

00:01:47,009 --> 00:01:51,570
ready for for release first so what that

00:01:49,259 --> 00:01:53,670
means in the old context is you decide

00:01:51,570 --> 00:01:55,649
that basically you want to go ahead and

00:01:53,670 --> 00:01:58,259
cut a release of some subset of the

00:01:55,649 --> 00:02:02,790
micro services and essentially what you

00:01:58,259 --> 00:02:04,439
do is you'd buy one of these - one of

00:02:02,790 --> 00:02:07,229
these two sort of paths you'd go ahead

00:02:04,439 --> 00:02:10,920
and kick off your build and you're sort

00:02:07,229 --> 00:02:12,150
of done so there's a two or three K I

00:02:10,920 --> 00:02:13,560
think there's three caveats I want to

00:02:12,150 --> 00:02:16,709
talk about

00:02:13,560 --> 00:02:18,239
and specifically here so as soon as that

00:02:16,709 --> 00:02:20,910
build with that building published

00:02:18,239 --> 00:02:22,770
process was done all of those artifacts

00:02:20,910 --> 00:02:25,110
were publicly available so you can go

00:02:22,770 --> 00:02:28,730
ahead and do a sudo apt-get update repol

00:02:25,110 --> 00:02:32,000
everything and everything is live so

00:02:28,730 --> 00:02:34,800
second thing is notice that there's no

00:02:32,000 --> 00:02:37,140
validation built into that process

00:02:34,800 --> 00:02:39,750
so everything was publicly available and

00:02:37,140 --> 00:02:42,540
like no no we're through that process

00:02:39,750 --> 00:02:44,819
was there other than sort of like the

00:02:42,540 --> 00:02:47,160
unit tests that everybody spock tests

00:02:44,819 --> 00:02:50,549
there's no sort of integration tests or

00:02:47,160 --> 00:02:52,019
deployments of that do that so as you

00:02:50,549 --> 00:02:55,440
and the third thing is so as you can see

00:02:52,019 --> 00:02:57,690
here every of the components are were

00:02:55,440 --> 00:03:00,060
the paths the sort of build paths are

00:02:57,690 --> 00:03:02,730
all parallel so if you for instance if

00:03:00,060 --> 00:03:04,230
you changed you know three services and

00:03:02,730 --> 00:03:05,459
you want to release all that you know

00:03:04,230 --> 00:03:06,630
you want to make a release that contains

00:03:05,459 --> 00:03:10,140
all that you have to actually do three

00:03:06,630 --> 00:03:12,959
different separate build in publish of

00:03:10,140 --> 00:03:14,670
the artifacts so there's so there's no

00:03:12,959 --> 00:03:16,500
there was no orchestration across

00:03:14,670 --> 00:03:21,390
services everything was sort of siloed

00:03:16,500 --> 00:03:24,420
in between services right so that's sort

00:03:21,390 --> 00:03:26,430
of like the physical paths to you know

00:03:24,420 --> 00:03:28,049
how you would build and and publish

00:03:26,430 --> 00:03:29,519
artifacts so let's talk more about sort

00:03:28,049 --> 00:03:32,280
of like organizational behavior that

00:03:29,519 --> 00:03:34,470
that we would do so like as I said

00:03:32,280 --> 00:03:37,049
component releases so that microservice

00:03:34,470 --> 00:03:39,090
releases are all ad-hoc on features and

00:03:37,049 --> 00:03:40,470
fixes so you'd pretty much developers

00:03:39,090 --> 00:03:43,350
would pretty much decide when it was

00:03:40,470 --> 00:03:45,329
time they felt ready they would just go

00:03:43,350 --> 00:03:48,900
ahead and make cuts and everything was

00:03:45,329 --> 00:03:51,480
public we generally had a roll forward

00:03:48,900 --> 00:03:53,370
development philosophy so if if you

00:03:51,480 --> 00:03:57,200
identified a fix or sorry identified a

00:03:53,370 --> 00:03:59,609
bug or an issue generally we didn't

00:03:57,200 --> 00:04:01,019
suggest to do sort of full spinnaker

00:03:59,609 --> 00:04:03,870
roll backs that's a pretty work

00:04:01,019 --> 00:04:06,120
intensive so what we do is we basically

00:04:03,870 --> 00:04:08,579
go ahead push another fix cut another

00:04:06,120 --> 00:04:10,230
release and say okay just roll forward

00:04:08,579 --> 00:04:13,049
the head that's that's sort of our that

00:04:10,230 --> 00:04:15,150
was what our operational model as I

00:04:13,049 --> 00:04:17,880
alluded to so circling back around the

00:04:15,150 --> 00:04:20,760
validation the artifacts themselves

00:04:17,880 --> 00:04:22,349
already public prior to us doing

00:04:20,760 --> 00:04:25,080
validations we would take essentially

00:04:22,349 --> 00:04:26,729
everything that was latest go ahead and

00:04:25,080 --> 00:04:27,270
deploy that in runs run some of our

00:04:26,729 --> 00:04:32,160
integrations

00:04:27,270 --> 00:04:33,750
against it and the other caveat there is

00:04:32,160 --> 00:04:36,539
that was basically only sort of

00:04:33,750 --> 00:04:38,220
internally visible so the validation

00:04:36,539 --> 00:04:40,440
results if we if we identified a bug

00:04:38,220 --> 00:04:42,060
what we would do is essentially

00:04:40,440 --> 00:04:43,979
communicate that to other devs on slack

00:04:42,060 --> 00:04:45,150
horse if somebody saw the same bug and

00:04:43,979 --> 00:04:47,520
reported that we wouldn't we sort of

00:04:45,150 --> 00:04:49,440
have that communication channel with

00:04:47,520 --> 00:04:54,150
them so that's quite it was quite an

00:04:49,440 --> 00:04:57,150
informal sort of you know cycle to get

00:04:54,150 --> 00:05:01,770
bugs addressed and sort of communicate

00:04:57,150 --> 00:05:03,090
that back out well given that here's

00:05:01,770 --> 00:05:04,830
some of like here's some of the user

00:05:03,090 --> 00:05:07,800
experiences that that we sort of

00:05:04,830 --> 00:05:10,409
identified so so obviously since the

00:05:07,800 --> 00:05:14,940
releases are ad-hoc updates are sort of

00:05:10,409 --> 00:05:17,130
ad-hoc as well so depending on your

00:05:14,940 --> 00:05:19,919
cadence of when you updated you could

00:05:17,130 --> 00:05:22,080
pull in unwanted changes so everything

00:05:19,919 --> 00:05:24,599
fixes features breaking changes whatever

00:05:22,080 --> 00:05:27,770
was all merged into master that that's

00:05:24,599 --> 00:05:30,599
how the unit's out so we did the

00:05:27,770 --> 00:05:32,190
development process so it you know at a

00:05:30,599 --> 00:05:33,569
given time where you go and update a

00:05:32,190 --> 00:05:37,169
spinnaker wholesale you might be pulling

00:05:33,569 --> 00:05:40,319
and you know tens of or in some weird

00:05:37,169 --> 00:05:42,030
cases you know hundreds of new commits

00:05:40,319 --> 00:05:45,380
that maybe don't touch providers you

00:05:42,030 --> 00:05:45,380
care about or what have you

00:05:45,409 --> 00:05:50,279
so in between updates or sort of

00:05:48,870 --> 00:05:52,620
deployments of spinnaker there's no

00:05:50,279 --> 00:05:54,389
there was no real way to keep track of

00:05:52,620 --> 00:05:56,669
what's what your version profiles were

00:05:54,389 --> 00:05:58,169
for all the services on so you have such

00:05:56,669 --> 00:05:59,969
and such an orca running such as such a

00:05:58,169 --> 00:06:02,490
cloud driver and there is no like

00:05:59,969 --> 00:06:05,310
there's no sort of container to to say

00:06:02,490 --> 00:06:08,099
all right this is spinnaker X it was

00:06:05,310 --> 00:06:09,229
sort of just a random assortment so

00:06:08,099 --> 00:06:13,650
importantly

00:06:09,229 --> 00:06:14,940
essentially no two customers had the

00:06:13,650 --> 00:06:17,069
same spinnaker running either

00:06:14,940 --> 00:06:20,240
so because the updates are all ad-hoc

00:06:17,069 --> 00:06:22,229
and basically pushed on the consumers

00:06:20,240 --> 00:06:24,270
everything everybody had their own tempo

00:06:22,229 --> 00:06:27,750
so whenever people were reporting bugs

00:06:24,270 --> 00:06:32,819
there was basically no consistent look

00:06:27,750 --> 00:06:36,210
at spinnaker so a long the same one same

00:06:32,819 --> 00:06:37,770
thread bug reports so you know if you

00:06:36,210 --> 00:06:39,389
found an issue wanted to report it to us

00:06:37,770 --> 00:06:40,850
it wasn't as simple as okay I'm running

00:06:39,389 --> 00:06:42,500
on spinnaker one point

00:06:40,850 --> 00:06:44,360
I have you know you'd have to report

00:06:42,500 --> 00:06:46,730
first of all you'd have to know all the

00:06:44,360 --> 00:06:48,740
services that that you know sort of

00:06:46,730 --> 00:06:50,710
surrounding that or have the devs ask

00:06:48,740 --> 00:06:52,850
you for you know I need to know or

00:06:50,710 --> 00:06:54,470
conversion you have to report several

00:06:52,850 --> 00:07:05,540
versions back to us to get anything

00:06:54,470 --> 00:07:07,970
fixed or addressed so when the these the

00:07:05,540 --> 00:07:10,070
the micro services were cut as release

00:07:07,970 --> 00:07:14,840
is also there's no real broadcast or

00:07:10,070 --> 00:07:16,640
sort of notification channels to alert

00:07:14,840 --> 00:07:19,490
end-users that new features are

00:07:16,640 --> 00:07:21,470
available we'd sort with similarly to

00:07:19,490 --> 00:07:22,880
how bugs are reported we'd essentially

00:07:21,470 --> 00:07:26,240
communicate that through slack to

00:07:22,880 --> 00:07:28,700
parties that we knew were interested in

00:07:26,240 --> 00:07:32,810
knowing about and knowing about whatever

00:07:28,700 --> 00:07:35,570
features are getting up cut obviously

00:07:32,810 --> 00:07:37,040
robux required tons of manual

00:07:35,570 --> 00:07:39,350
intervention and same thing with

00:07:37,040 --> 00:07:40,850
upgrades really you know there was no

00:07:39,350 --> 00:07:43,040
nice and clean way to do a wholesale

00:07:40,850 --> 00:07:44,980
updates without running you know

00:07:43,040 --> 00:07:49,160
shelling anew your machines and running

00:07:44,980 --> 00:07:52,700
whatever and essentially you had no

00:07:49,160 --> 00:07:54,470
insurance that your spinnaker you know

00:07:52,700 --> 00:07:56,300
your your version profiled spinnaker

00:07:54,470 --> 00:07:58,400
that the micro services worked together

00:07:56,300 --> 00:08:00,560
so we would every night you know take

00:07:58,400 --> 00:08:03,410
the latest but there were several there

00:08:00,560 --> 00:08:05,210
is often several releases of a micro

00:08:03,410 --> 00:08:06,470
service during the day so you could be

00:08:05,210 --> 00:08:07,640
two three versions you know if you dope

00:08:06,470 --> 00:08:10,340
dated during that day it could be two

00:08:07,640 --> 00:08:13,580
three versions behind what actually was

00:08:10,340 --> 00:08:17,150
deployed and tested that night is that

00:08:13,580 --> 00:08:18,950
quite a fascinating project all right so

00:08:17,150 --> 00:08:21,650
let's tell a little bit of a war story

00:08:18,950 --> 00:08:23,300
here so the user experience we just

00:08:21,650 --> 00:08:24,530
subscribe leads to situations that

00:08:23,300 --> 00:08:26,450
happen like this so suppose you're

00:08:24,530 --> 00:08:29,090
running on spinnaker in the first dress

00:08:26,450 --> 00:08:30,590
or your old deployment and you want to

00:08:29,090 --> 00:08:33,200
pick up some sweet new feature in cloud

00:08:30,590 --> 00:08:34,970
driver that's the green version there so

00:08:33,200 --> 00:08:36,290
you say all right you know I haven't I

00:08:34,970 --> 00:08:37,810
haven't updated everything recently so

00:08:36,290 --> 00:08:40,370
I'm gonna go ahead and and sort of

00:08:37,810 --> 00:08:43,700
runnin and shelling and apt-get update

00:08:40,370 --> 00:08:45,140
and so say this happens so you know you

00:08:43,700 --> 00:08:47,780
upgrade you upgrade your cloud driver it

00:08:45,140 --> 00:08:49,640
turns out there's a bug in marca that it

00:08:47,780 --> 00:08:53,380
has to do with not interacting well with

00:08:49,640 --> 00:08:55,990
that specific version of cloud driver so

00:08:53,380 --> 00:08:58,810
go ahead and report the bug you know

00:08:55,990 --> 00:09:00,520
there's another quick fix and a version

00:08:58,810 --> 00:09:02,260
bumpin you say all right I'm just gonna

00:09:00,520 --> 00:09:04,720
we'll see we'll see what happens here

00:09:02,260 --> 00:09:10,660
I'm gonna go ahead and bump up my my

00:09:04,720 --> 00:09:12,940
version of Orca so it turns out as it as

00:09:10,660 --> 00:09:15,070
it happens that that version of worker

00:09:12,940 --> 00:09:16,750
that you just bumped into I bumped up

00:09:15,070 --> 00:09:21,220
into doesn't work with the front 50 you

00:09:16,750 --> 00:09:22,480
had in the first place so now okay so

00:09:21,220 --> 00:09:27,880
okay we have you know we have another

00:09:22,480 --> 00:09:28,930
cycle of reporting a bug issue so you

00:09:27,880 --> 00:09:33,400
have another you know you have another

00:09:28,930 --> 00:09:35,080
bump of front 50 go through that cycle

00:09:33,400 --> 00:09:36,640
you update to that and you we're gonna

00:09:35,080 --> 00:09:38,410
complete the last leg of the triangle so

00:09:36,640 --> 00:09:39,970
now front 50 doesn't work something you

00:09:38,410 --> 00:09:43,030
know some have some some configuration

00:09:39,970 --> 00:09:45,820
property changed in front 50 that

00:09:43,030 --> 00:09:48,880
doesn't jive with that cloud driver

00:09:45,820 --> 00:09:51,160
so finally you know so you've done three

00:09:48,880 --> 00:09:53,440
updates now right

00:09:51,160 --> 00:09:55,300
so you finally ask to dev okay like what

00:09:53,440 --> 00:09:56,980
I just want it to work now like I want

00:09:55,300 --> 00:09:59,170
that I want that new feature but I know

00:09:56,980 --> 00:10:01,030
I need I need stuff to work also so you

00:09:59,170 --> 00:10:02,590
ask and say are what what what have you

00:10:01,030 --> 00:10:04,360
guys tested recently like what actually

00:10:02,590 --> 00:10:07,960
works it turns out that the next version

00:10:04,360 --> 00:10:10,660
there so you finally cannot pay for

00:10:07,960 --> 00:10:14,890
something that actually works but okay

00:10:10,660 --> 00:10:16,690
so let's sort of reflect on that so you

00:10:14,890 --> 00:10:20,050
did you know three or four different

00:10:16,690 --> 00:10:21,730
upgrades you know there's like things

00:10:20,050 --> 00:10:23,350
like this this incompatibility but in

00:10:21,730 --> 00:10:26,890
between certain microservice versions it

00:10:23,350 --> 00:10:28,840
happens all the time so all this is

00:10:26,890 --> 00:10:33,820
manual work so you had to go in shell

00:10:28,840 --> 00:10:36,790
and update everything and so you know

00:10:33,820 --> 00:10:38,110
look how many version so suppose even if

00:10:36,790 --> 00:10:40,750
there's just one change like how many

00:10:38,110 --> 00:10:42,310
changes did you just pull in from trying

00:10:40,750 --> 00:10:45,760
to get trying to get just move one

00:10:42,310 --> 00:10:48,730
little version of cloud driver so ton of

00:10:45,760 --> 00:10:50,380
wasted work and who remembers at any

00:10:48,730 --> 00:10:52,000
given time like so looking at this yeah

00:10:50,380 --> 00:10:53,980
Kay you have a nice little picture who

00:10:52,000 --> 00:10:55,120
remembers to you know the first the

00:10:53,980 --> 00:10:57,400
first update like what did that look

00:10:55,120 --> 00:10:58,930
like so try this is just three of the

00:10:57,400 --> 00:11:01,990
services mind you so I tried doing that

00:10:58,930 --> 00:11:03,550
ever not for time it gets hairy it gets

00:11:01,990 --> 00:11:05,820
it gets pretty nasty to go ahead and

00:11:03,550 --> 00:11:05,820
make them

00:11:06,140 --> 00:11:13,080
all right so the actual list is over

00:11:09,570 --> 00:11:16,050
there of the issues with the the old

00:11:13,080 --> 00:11:17,850
release process but we're gonna go ahead

00:11:16,050 --> 00:11:21,270
and sort of I'll call it that down

00:11:17,850 --> 00:11:23,010
all right so major issue is there's no

00:11:21,270 --> 00:11:25,320
way to identify component versions that

00:11:23,010 --> 00:11:27,540
work together so you know like I said we

00:11:25,320 --> 00:11:31,170
would we would do sort of nightly just

00:11:27,540 --> 00:11:33,510
ad-hoc some profile version or sorry for

00:11:31,170 --> 00:11:36,180
profile ups of spinnaker service

00:11:33,510 --> 00:11:37,500
versions and test those out those are

00:11:36,180 --> 00:11:39,959
never published anywhere no you know

00:11:37,500 --> 00:11:44,550
there's no real insight into which which

00:11:39,959 --> 00:11:46,020
versions work with which as I said

00:11:44,550 --> 00:11:47,730
earlier no to know you know two

00:11:46,020 --> 00:11:50,450
employments look alike so customer a

00:11:47,730 --> 00:11:54,510
looks totally different customer B

00:11:50,450 --> 00:11:56,310
upgrades even if you just want a tiny

00:11:54,510 --> 00:11:57,930
little fix you wind up since everything

00:11:56,310 --> 00:12:00,510
is pushed on the master or emerged in

00:11:57,930 --> 00:12:02,250
the master you pull in everybody's

00:12:00,510 --> 00:12:04,589
changes that happened and in between the

00:12:02,250 --> 00:12:07,920
type of updated and you want to you know

00:12:04,589 --> 00:12:13,050
you last updated and you wanna update so

00:12:07,920 --> 00:12:15,660
that's a little there's yep there's no

00:12:13,050 --> 00:12:17,730
easy rollback or upgrade really so you

00:12:15,660 --> 00:12:19,980
know it's all manual work and

00:12:17,730 --> 00:12:22,380
essentially no release documentation

00:12:19,980 --> 00:12:24,300
your best guess in the old world was

00:12:22,380 --> 00:12:25,890
basically to go ahead and read them the

00:12:24,300 --> 00:12:30,779
commit stream so go on and github and

00:12:25,890 --> 00:12:33,209
check out what happen and finally will

00:12:30,779 --> 00:12:35,760
semi final validation after by artifact

00:12:33,209 --> 00:12:38,010
publications so you know they're it's

00:12:35,760 --> 00:12:41,040
highly likely or you know definitely

00:12:38,010 --> 00:12:43,110
likely that you could update at any

00:12:41,040 --> 00:12:45,450
given time and you're you know even the

00:12:43,110 --> 00:12:48,029
latest built versions are totally broken

00:12:45,450 --> 00:12:51,709
together happen many times just

00:12:48,029 --> 00:12:51,709
generally just hard to maintain and run

00:12:52,430 --> 00:12:58,140
so that was the old one we we sort of

00:12:54,810 --> 00:13:00,329
did some reflection so our last you know

00:12:58,140 --> 00:13:01,589
December into January when we were

00:13:00,329 --> 00:13:03,570
deciding on how do we you know how do we

00:13:01,589 --> 00:13:05,730
make this better like what do we want

00:13:03,570 --> 00:13:08,220
and in released and the spinnaker

00:13:05,730 --> 00:13:10,200
release is a good spinnaker release so

00:13:08,220 --> 00:13:12,839
we came up with these these six these

00:13:10,200 --> 00:13:16,050
six sort of aspects we want to distract

00:13:12,839 --> 00:13:17,510
for so we wanted to identify version

00:13:16,050 --> 00:13:20,030
components to work together in action

00:13:17,510 --> 00:13:22,340
make sure that they do obviously

00:13:20,030 --> 00:13:26,090
validation prior to artifact publish or

00:13:22,340 --> 00:13:28,880
at least prior to to us you know sort of

00:13:26,090 --> 00:13:30,710
blessing a version version profile and

00:13:28,880 --> 00:13:32,000
saying this is you can use this and we

00:13:30,710 --> 00:13:33,650
are pretty sure that's gonna work

00:13:32,000 --> 00:13:36,680
together where you didn't have any

00:13:33,650 --> 00:13:38,930
insurance like that prior obviously

00:13:36,680 --> 00:13:42,440
release documentation so even if you do

00:13:38,930 --> 00:13:43,760
have to you know pick up everybody's

00:13:42,440 --> 00:13:45,470
changes you actually know you're getting

00:13:43,760 --> 00:13:49,070
so at least you can have some insight

00:13:45,470 --> 00:13:50,060
into you know what sort of new things

00:13:49,070 --> 00:13:52,250
spinnaker might be doing you're not

00:13:50,060 --> 00:13:55,370
expecting it to do oh you weren't

00:13:52,250 --> 00:13:57,560
expecting it to do before encapsulated

00:13:55,370 --> 00:13:59,360
fixes so what this means is we wanted a

00:13:57,560 --> 00:14:01,190
way to sort of insulate that you know so

00:13:59,360 --> 00:14:03,770
spinnaker is a really fascinating

00:14:01,190 --> 00:14:06,890
project it's one of its you know the

00:14:03,770 --> 00:14:09,530
development pace is one of its sort of

00:14:06,890 --> 00:14:11,390
benefits I think but but it sort of gets

00:14:09,530 --> 00:14:13,250
you into trouble in cases where you you

00:14:11,390 --> 00:14:14,630
really just want a small fix and it's

00:14:13,250 --> 00:14:18,890
you know you have something that's

00:14:14,630 --> 00:14:20,540
really close to working but you you know

00:14:18,890 --> 00:14:22,220
you just need a little tweak here and

00:14:20,540 --> 00:14:27,380
there or something you know some some

00:14:22,220 --> 00:14:29,540
some like I said a little tweak and then

00:14:27,380 --> 00:14:31,700
maybe it'll be perfect for you but you

00:14:29,540 --> 00:14:32,810
couldn't there's no real method to get

00:14:31,700 --> 00:14:34,970
that out without pulling in a whole

00:14:32,810 --> 00:14:37,400
bunch of unnecessary changes so that's

00:14:34,970 --> 00:14:39,680
what I mean by encapsulated fixes easy

00:14:37,400 --> 00:14:42,650
upgrade rollback that's obvious that can

00:14:39,680 --> 00:14:44,750
you know that always get better and easy

00:14:42,650 --> 00:14:48,050
configuration and sort of management of

00:14:44,750 --> 00:14:51,470
spinnaker that's already running all

00:14:48,050 --> 00:14:54,530
right so you know after that reflection

00:14:51,470 --> 00:14:58,090
we sort of sat down and and and rode out

00:14:54,530 --> 00:15:00,290
a big design for a new release process

00:14:58,090 --> 00:15:03,020
so there's two parts to the new release

00:15:00,290 --> 00:15:06,290
process there's this sort of a tautology

00:15:03,020 --> 00:15:07,640
but a new OSS release process and that's

00:15:06,290 --> 00:15:10,820
the first part and the second part is

00:15:07,640 --> 00:15:12,740
hired so something that that given given

00:15:10,820 --> 00:15:14,540
you know the artifacts and some maybe

00:15:12,740 --> 00:15:17,450
some accounting and accounting data and

00:15:14,540 --> 00:15:19,430
metadata can go ahead and and consume

00:15:17,450 --> 00:15:21,730
that and use that to make you know

00:15:19,430 --> 00:15:25,430
running managing configuring spinnaker

00:15:21,730 --> 00:15:29,240
you do guess are easier to manage so

00:15:25,430 --> 00:15:30,590
Lars gave a talk yesterday on halyard so

00:15:29,240 --> 00:15:32,240
I'm gonna go ahead and

00:15:30,590 --> 00:15:34,210
and dive into the details of the OSS

00:15:32,240 --> 00:15:37,480
release / new OSS release process

00:15:34,210 --> 00:15:40,430
alright so here is here's the sort of

00:15:37,480 --> 00:15:42,470
overview of the flow so what I'm gonna

00:15:40,430 --> 00:15:45,770
do here is I'm going to describe a sort

00:15:42,470 --> 00:15:46,970
of new artifact so you see obviously

00:15:45,770 --> 00:15:48,620
there's a lot more going on here than

00:15:46,970 --> 00:15:52,100
there wasn't the previous one so what

00:15:48,620 --> 00:15:54,080
I'm going to do is say sort of what we

00:15:52,100 --> 00:15:56,390
what we introduced go into each detail

00:15:54,080 --> 00:15:57,950
each in sort of detail and then wrap

00:15:56,390 --> 00:16:00,770
back around and say alright here's what

00:15:57,950 --> 00:16:02,390
all this means for this new flow and

00:16:00,770 --> 00:16:04,850
then what this buys you as a as an end

00:16:02,390 --> 00:16:07,490
user so the three new things are the

00:16:04,850 --> 00:16:08,990
Bill of Materials down on the bottom

00:16:07,490 --> 00:16:14,029
right there so I'm gonna refer those

00:16:08,990 --> 00:16:16,490
bombs the release branches in the actual

00:16:14,029 --> 00:16:19,910
upstream source repos and then change

00:16:16,490 --> 00:16:21,680
logs so those are the three things so

00:16:19,910 --> 00:16:23,720
lecture we're gonna dive in detail we'll

00:16:21,680 --> 00:16:25,550
circle back around alright so first

00:16:23,720 --> 00:16:29,750
thing and arguably the most interesting

00:16:25,550 --> 00:16:32,990
is the build materials so this contains

00:16:29,750 --> 00:16:35,330
metadata per each service that that will

00:16:32,990 --> 00:16:37,839
sort of wraps and contains a set of

00:16:35,330 --> 00:16:40,970
service versions as a spinnaker release

00:16:37,839 --> 00:16:43,250
so there's a subsection that's you know

00:16:40,970 --> 00:16:45,350
like a sort of services part where for

00:16:43,250 --> 00:16:47,990
each micro service we pin a version that

00:16:45,350 --> 00:16:50,710
you know obviously rolls forward and an

00:16:47,990 --> 00:16:53,120
artifact location so where you can find

00:16:50,710 --> 00:16:56,089
containers and you know container images

00:16:53,120 --> 00:16:57,890
and Debian's of that service the commit

00:16:56,089 --> 00:17:04,720
that we we built that version that and

00:16:57,890 --> 00:17:07,220
that creation date and so alongside that

00:17:04,720 --> 00:17:10,040
the set you know sort of metadata set of

00:17:07,220 --> 00:17:11,660
versions we go ahead and give that that

00:17:10,040 --> 00:17:13,790
BOM the Bill of material an overarching

00:17:11,660 --> 00:17:16,010
version that is exactly equal to a

00:17:13,790 --> 00:17:18,439
spinnaker version so it's just basically

00:17:16,010 --> 00:17:20,860
a container bunch of metadata and that

00:17:18,439 --> 00:17:24,709
will define its many conversions for you

00:17:20,860 --> 00:17:26,179
so because we supply the artifact

00:17:24,709 --> 00:17:28,970
location in the commits and everything

00:17:26,179 --> 00:17:30,650
we can do that that sort of buys us two

00:17:28,970 --> 00:17:33,230
things so one is that provides all the

00:17:30,650 --> 00:17:37,220
contacts necessary for how you're to go

00:17:33,230 --> 00:17:38,710
ahead and deploy you know pull down the

00:17:37,220 --> 00:17:43,460
artifacts that were produced and

00:17:38,710 --> 00:17:44,419
configure a spinnaker version and

00:17:43,460 --> 00:17:48,139
secondly we connect

00:17:44,419 --> 00:17:50,269
go from a bomb to the source that we

00:17:48,139 --> 00:17:51,859
that you know exists in github that we

00:17:50,269 --> 00:17:56,330
built this from so you can if you wanted

00:17:51,859 --> 00:17:57,350
to go ahead and recreate our builds if

00:17:56,330 --> 00:17:59,239
you have you know if you wanted to do

00:17:57,350 --> 00:18:00,590
sort of like vulnerability analysis or

00:17:59,239 --> 00:18:02,600
anything like that you know repeatable

00:18:00,590 --> 00:18:05,119
builds so we can get the exact source

00:18:02,600 --> 00:18:08,720
that we built this miniature version

00:18:05,119 --> 00:18:12,080
from from from the build materials and

00:18:08,720 --> 00:18:14,049
here is a little snippet you see we have

00:18:12,080 --> 00:18:16,669
services section there is an overarching

00:18:14,049 --> 00:18:18,320
like today add an actual version for

00:18:16,669 --> 00:18:20,239
this but there's there be a at the level

00:18:18,320 --> 00:18:21,769
of the services entry there'd be a

00:18:20,239 --> 00:18:23,809
version field and that would be the

00:18:21,769 --> 00:18:26,119
version that is the spinnaker version

00:18:23,809 --> 00:18:33,440
it's defined by this set of micro

00:18:26,119 --> 00:18:36,440
services all right the second new

00:18:33,440 --> 00:18:40,119
artifact here is the upstream release

00:18:36,440 --> 00:18:45,409
branch so what we would do is so nightly

00:18:40,119 --> 00:18:47,960
we produce sort of I guess you know date

00:18:45,409 --> 00:18:49,580
State stamped versions of like a that's

00:18:47,960 --> 00:18:51,590
the referring to the top-level spinnaker

00:18:49,580 --> 00:18:55,239
version of the services go ahead and

00:18:51,590 --> 00:18:58,549
deploy them and then test them and

00:18:55,239 --> 00:19:00,320
subsequently what we do is take so once

00:18:58,549 --> 00:19:01,879
once we decided that a build like a

00:19:00,320 --> 00:19:04,730
spinnaker version defined by Villa

00:19:01,879 --> 00:19:05,989
materials was you know validated and we

00:19:04,730 --> 00:19:07,460
felt good about it we go ahead and

00:19:05,989 --> 00:19:10,039
rename that and then publish that to

00:19:07,460 --> 00:19:13,309
halyard make it visible to halyard as as

00:19:10,039 --> 00:19:16,340
a viable deployable supported spanker

00:19:13,309 --> 00:19:19,460
version um so part of that process we'd

00:19:16,340 --> 00:19:22,629
go ahead and push an upstream branch up

00:19:19,460 --> 00:19:25,249
to the upstream repos that is total is

00:19:22,629 --> 00:19:29,710
obviously cut off at the commit that the

00:19:25,249 --> 00:19:32,029
we released in the Bill of Materials and

00:19:29,710 --> 00:19:33,649
for the purpose of insulating that

00:19:32,029 --> 00:19:37,669
against the changes in masters what we

00:19:33,649 --> 00:19:39,080
do we would use with this is so you know

00:19:37,669 --> 00:19:40,039
we're not perfect so we'll cut a release

00:19:39,080 --> 00:19:41,779
and maybe there'll be something wrong

00:19:40,039 --> 00:19:42,889
with your release and we want to fix you

00:19:41,779 --> 00:19:44,929
know we want to go ahead and and

00:19:42,889 --> 00:19:47,119
somebody cooks up a fix for an issue

00:19:44,929 --> 00:19:49,129
they see but we want to we want to put

00:19:47,119 --> 00:19:50,989
that in the release without going ahead

00:19:49,129 --> 00:19:52,879
and including every single change in

00:19:50,989 --> 00:19:54,649
master that's happened since that so

00:19:52,879 --> 00:19:56,029
these branches while you do that do you

00:19:54,649 --> 00:19:58,130
all you have to do is cherry-pick it in

00:19:56,029 --> 00:20:00,500
and go ahead and cut

00:19:58,130 --> 00:20:04,580
their subsequent patch release so like

00:20:00,500 --> 00:20:06,260
patch version and cember using the

00:20:04,580 --> 00:20:07,730
release branches the base branch instead

00:20:06,260 --> 00:20:12,740
of instead of master as you'd in the

00:20:07,730 --> 00:20:15,710
usual case and this has the obviously

00:20:12,740 --> 00:20:18,230
obviously isolates fixes to to the

00:20:15,710 --> 00:20:21,470
releases from the developments happening

00:20:18,230 --> 00:20:23,170
on master and so you get the the sort of

00:20:21,470 --> 00:20:25,490
guarantee that okay if you bump

00:20:23,170 --> 00:20:26,540
spinnaker version of only a patch worse

00:20:25,490 --> 00:20:30,890
and you understand you're only getting

00:20:26,540 --> 00:20:32,720
patched you can have that guarantee I so

00:20:30,890 --> 00:20:34,190
here's just an example of if you've seen

00:20:32,720 --> 00:20:39,860
these on github here's what some of the

00:20:34,190 --> 00:20:44,270
real experiences look like okay the

00:20:39,860 --> 00:20:46,070
third and sort of final new artifact

00:20:44,270 --> 00:20:48,830
type that we have and the new release

00:20:46,070 --> 00:20:50,780
process is change log so if you guys

00:20:48,830 --> 00:20:52,460
have been looking at the commit message

00:20:50,780 --> 00:20:56,660
commit stream recently you see these are

00:20:52,460 --> 00:20:58,370
specially formatted commit messages and

00:20:56,660 --> 00:20:59,990
that's for the purpose of so we have an

00:20:58,370 --> 00:21:02,750
automated tool that you can essentially

00:20:59,990 --> 00:21:03,980
give a to or sre from and to commit

00:21:02,750 --> 00:21:05,840
range to and we'll go ahead and scrape

00:21:03,980 --> 00:21:07,850
out all the changes that happened in

00:21:05,840 --> 00:21:11,840
that commitment it's what we do is we

00:21:07,850 --> 00:21:16,430
build that into a nice-looking yamo file

00:21:11,840 --> 00:21:19,010
so and and that that's that'll summarize

00:21:16,430 --> 00:21:21,890
the changes that have been included in

00:21:19,010 --> 00:21:24,140
that spinnaker release and we go ahead

00:21:21,890 --> 00:21:26,060
and actually publish these up to a

00:21:24,140 --> 00:21:28,100
spinnaker io every time we actually cut

00:21:26,060 --> 00:21:33,380
it so this is public there's you know

00:21:28,100 --> 00:21:36,440
there's several sort of channels of

00:21:33,380 --> 00:21:39,770
notifications all right so let's circle

00:21:36,440 --> 00:21:41,990
back around so now that we understand

00:21:39,770 --> 00:21:44,450
each of this sort of new artifacts let's

00:21:41,990 --> 00:21:47,660
let's see how we can sort of tie it tie

00:21:44,450 --> 00:21:50,720
it all together so in the new OSS

00:21:47,660 --> 00:21:53,570
release process flow we have sort of

00:21:50,720 --> 00:21:55,840
three phases and this is this is the

00:21:53,570 --> 00:21:58,040
three phases of build validate publish

00:21:55,840 --> 00:22:00,530
so obviously build we're building the

00:21:58,040 --> 00:22:02,930
deployables artifacts we go ahead and

00:22:00,530 --> 00:22:05,150
label the micro server search so we use

00:22:02,930 --> 00:22:08,630
tags in the upstream reposted track what

00:22:05,150 --> 00:22:11,060
what micro service version is as I said

00:22:08,630 --> 00:22:11,970
as you as the as you saw in the bomb so

00:22:11,060 --> 00:22:14,580
we keep track

00:22:11,970 --> 00:22:16,049
- to gain you know to gain insight and

00:22:14,580 --> 00:22:17,250
whether like what kind of fixes are

00:22:16,049 --> 00:22:19,860
happening to the micro-services

00:22:17,250 --> 00:22:21,389
themselves but you know use the

00:22:19,860 --> 00:22:22,470
overarching version to sort of shield

00:22:21,389 --> 00:22:26,220
you if you don't if you don't

00:22:22,470 --> 00:22:30,299
necessarily care about the development

00:22:26,220 --> 00:22:32,009
pace at any age of the services so as I

00:22:30,299 --> 00:22:33,509
said build step records to herds of

00:22:32,009 --> 00:22:35,669
versions and commits in the Bill of

00:22:33,509 --> 00:22:37,889
Materials so I you know we build the

00:22:35,669 --> 00:22:39,299
artifacts essentially generate the Bill

00:22:37,889 --> 00:22:41,159
of Materials and then go ahead and

00:22:39,299 --> 00:22:44,309
generate the changelog from that so

00:22:41,159 --> 00:22:48,509
since we have this source there validate

00:22:44,309 --> 00:22:50,279
so in that step we go ahead and use the

00:22:48,509 --> 00:22:53,250
bomb yay so using the bomb feed that the

00:22:50,279 --> 00:22:54,980
halyard and use halyard to deploy it's

00:22:53,250 --> 00:22:58,769
been a crown of several environments and

00:22:54,980 --> 00:23:00,600
run our site test so integration tests

00:22:58,769 --> 00:23:03,360
against minik against those running

00:23:00,600 --> 00:23:05,370
Spinnaker's so obviously if this is

00:23:03,360 --> 00:23:07,200
green we can we consider that bomb to be

00:23:05,370 --> 00:23:08,460
you know sex successful bomb and if we

00:23:07,200 --> 00:23:11,669
wanted to we can go ahead and sort of

00:23:08,460 --> 00:23:14,580
rename that and publish that as a you

00:23:11,669 --> 00:23:16,769
know real-life spinnaker version if it's

00:23:14,580 --> 00:23:18,840
red obviously we have to sort of go into

00:23:16,769 --> 00:23:20,820
our feedback loop and figure out what

00:23:18,840 --> 00:23:23,700
happened you know and and sort of get

00:23:20,820 --> 00:23:27,029
those those things addressed so provided

00:23:23,700 --> 00:23:30,360
that we have a green build the the

00:23:27,029 --> 00:23:35,730
published step in this is so we have a

00:23:30,360 --> 00:23:38,190
sort of nightly like I said date stamp

00:23:35,730 --> 00:23:39,750
version of the bill materials that we

00:23:38,190 --> 00:23:40,860
try out every night and so if we have a

00:23:39,750 --> 00:23:44,279
green one we have a green build

00:23:40,860 --> 00:23:46,440
validation step we can subsequently go

00:23:44,279 --> 00:23:48,899
ahead and and give that a proper

00:23:46,440 --> 00:23:50,840
semantic version name and we sort of go

00:23:48,899 --> 00:23:53,129
case by case and decide what the next

00:23:50,840 --> 00:23:56,970
version is so so far we've just been

00:23:53,129 --> 00:23:59,070
every every release that has not been a

00:23:56,970 --> 00:24:00,629
patch release has been minor and that's

00:23:59,070 --> 00:24:05,279
sort of you know at our discretion but

00:24:00,629 --> 00:24:07,769
so we give it a legitimate Mantic

00:24:05,279 --> 00:24:09,120
version and go ahead and go ahead and do

00:24:07,769 --> 00:24:10,919
a couple other things so we publish the

00:24:09,120 --> 00:24:13,559
release branches up to the github

00:24:10,919 --> 00:24:15,870
repositories we publish to change along

00:24:13,559 --> 00:24:18,120
with spinnaker io as I said we send and

00:24:15,870 --> 00:24:20,610
then send notifications out so we have

00:24:18,120 --> 00:24:22,799
an we have a spinnaker Google Group that

00:24:20,610 --> 00:24:24,330
we do we email we have a slack

00:24:22,799 --> 00:24:25,860
notification obviously there's a release

00:24:24,330 --> 00:24:28,410
process channel

00:24:25,860 --> 00:24:29,820
and simply buy and then also you know

00:24:28,410 --> 00:24:31,530
they're having the page show up on its

00:24:29,820 --> 00:24:36,600
vinaigrette is another sort of set of

00:24:31,530 --> 00:24:40,320
notifications okay

00:24:36,600 --> 00:24:43,110
so given that sort of physical flow this

00:24:40,320 --> 00:24:44,640
is what the sort of we've seen as the

00:24:43,110 --> 00:24:47,400
sort of new user experience

00:24:44,640 --> 00:24:48,840
so obviously the but the Bill of

00:24:47,400 --> 00:24:52,200
Materials give you a lot of insight into

00:24:48,840 --> 00:24:53,429
exactly which spinnaker versions you

00:24:52,200 --> 00:24:55,950
have running and deployed in a given

00:24:53,429 --> 00:24:57,270
time bug reports really only require

00:24:55,950 --> 00:24:58,740
want you know you need to know one

00:24:57,270 --> 00:25:02,220
number that's the spinnaker version

00:24:58,740 --> 00:25:05,040
you're on it's great there's we try to

00:25:02,220 --> 00:25:06,390
make you know uses as many notification

00:25:05,040 --> 00:25:09,960
methods as possible to communicate a

00:25:06,390 --> 00:25:13,710
release it's all summarized and sort of

00:25:09,960 --> 00:25:15,809
traceable and changelogs we've been

00:25:13,710 --> 00:25:18,770
cutting patch releases using you know

00:25:15,809 --> 00:25:21,210
using cherry picks and isolated fixes so

00:25:18,770 --> 00:25:23,790
you know we can we can fix small issues

00:25:21,210 --> 00:25:26,700
without having to go ahead and include

00:25:23,790 --> 00:25:29,370
everybody else those changes upgrades

00:25:26,700 --> 00:25:30,990
and roll backs now of spinnaker versions

00:25:29,370 --> 00:25:32,549
of top-level spinnaker versions require

00:25:30,990 --> 00:25:33,059
now two halyard commands which is

00:25:32,549 --> 00:25:35,549
awesome

00:25:33,059 --> 00:25:39,000
compared to what it was before and all

00:25:35,549 --> 00:25:41,880
the releases are validated prior to

00:25:39,000 --> 00:25:43,500
publishing becomes important alright so

00:25:41,880 --> 00:25:47,130
all those things that we sort of are

00:25:43,500 --> 00:25:49,260
complaining about we're happy all right

00:25:47,130 --> 00:25:51,840
and back to so let's go back to that war

00:25:49,260 --> 00:25:53,669
story so instead so instead of having

00:25:51,840 --> 00:25:56,700
your three or four updates that you had

00:25:53,669 --> 00:25:58,169
to do you can you can simply you know

00:25:56,700 --> 00:25:59,370
you you can even use how your till say

00:25:58,169 --> 00:26:01,140
alright what's the you know is there

00:25:59,370 --> 00:26:04,230
anything new what's the newest latest

00:26:01,140 --> 00:26:06,360
hottest thing and say okay I'm gonna use

00:26:04,230 --> 00:26:08,160
my two halyard commands and now BAM I'm

00:26:06,360 --> 00:26:10,620
on the the next validated version you

00:26:08,160 --> 00:26:12,360
have pretty reasonable confidence that

00:26:10,620 --> 00:26:16,500
that you you know you're good to go

00:26:12,360 --> 00:26:18,270
after that all right so that's all I had

00:26:16,500 --> 00:26:21,000
I hope thanks for coming I hope that

00:26:18,270 --> 00:26:22,020
sort of shed some light and you know

00:26:21,000 --> 00:26:24,870
describe sort of what we're doing

00:26:22,020 --> 00:26:28,169
internally to you know to make your

00:26:24,870 --> 00:26:32,309
experience as sort of like flawless as

00:26:28,169 --> 00:26:39,030
possible all right any questions yeah

00:26:32,309 --> 00:26:43,020
what's the how many point releases do

00:26:39,030 --> 00:26:44,370
integration testing depends on them it

00:26:43,020 --> 00:26:46,950
really depends on the week like we do

00:26:44,370 --> 00:26:49,920
this every night so you know we we still

00:26:46,950 --> 00:26:51,960
are ad-hoc making releases based on you

00:26:49,920 --> 00:26:54,570
know whatever the state of the master

00:26:51,960 --> 00:26:57,060
there are sorry master head is but it's

00:26:54,570 --> 00:27:01,800
I hard to say I feel like I said it the

00:26:57,060 --> 00:27:04,800
times we do week it of the seven days

00:27:01,800 --> 00:27:07,320
last week maybe how many nights I think

00:27:04,800 --> 00:27:09,510
probably three before it's like less

00:27:07,320 --> 00:27:11,310
than you know hope but it's still you

00:27:09,510 --> 00:27:23,630
know it's actually good because it means

00:27:11,310 --> 00:27:23,630
you didn't some of them are our bugs

00:27:28,490 --> 00:27:35,580
intestine we test all the platforms have

00:27:32,940 --> 00:27:39,380
integration tests we run all that

00:27:35,580 --> 00:27:46,380
available so the reasons for failure

00:27:39,380 --> 00:27:48,270
less than we it's a higher rate right

00:27:46,380 --> 00:27:50,520
but the important part is like there's

00:27:48,270 --> 00:27:52,910
we fail on any it's not like we we we

00:27:50,520 --> 00:27:54,690
haven't we haven't done any you know

00:27:52,910 --> 00:27:56,580
rollouts where we say okay

00:27:54,690 --> 00:27:58,380
most things work but this doesn't it's

00:27:56,580 --> 00:27:59,910
we we only release it everything is

00:27:58,380 --> 00:28:02,910
green so that's that's a that's an

00:27:59,910 --> 00:28:06,120
important point to that yeah what do you

00:28:02,910 --> 00:28:09,090
integration like what is what's that

00:28:06,120 --> 00:28:12,120
process of like deploying it like how

00:28:09,090 --> 00:28:13,980
many environments you deploy Eric and

00:28:12,120 --> 00:28:16,320
air can correct me if I'm wrong here

00:28:13,980 --> 00:28:18,780
I believe we're deploying to each of

00:28:16,320 --> 00:28:20,100
also on a single VM not at not

00:28:18,780 --> 00:28:24,410
necessarily distributed VM environment

00:28:20,100 --> 00:28:29,010
but we deploy to GCP ec2 and I believe

00:28:24,410 --> 00:28:30,270
we had we had a sure until recently and

00:28:29,010 --> 00:28:31,830
I think we do we also deploy to

00:28:30,270 --> 00:28:33,690
kubernetes as well so this is where

00:28:31,830 --> 00:28:36,750
we're deployment for maker to you have

00:28:33,690 --> 00:28:39,030
kubernetes yeah yeah so to kubernetes as

00:28:36,750 --> 00:28:40,440
well all using how your and all using

00:28:39,030 --> 00:28:43,280
just the you know the regular

00:28:40,440 --> 00:28:46,710
configuration steps tree Howard

00:28:43,280 --> 00:28:48,540
and then we from that we also run you

00:28:46,710 --> 00:28:50,700
integration tests and they're all open

00:28:48,540 --> 00:28:54,830
source

00:28:50,700 --> 00:28:57,899
story right and then on each of those we

00:28:54,830 --> 00:29:02,450
configure all the provider accounts so

00:28:57,899 --> 00:29:04,619
that includes other platforms DCOs and

00:29:02,450 --> 00:29:06,929
some other things where we don't

00:29:04,619 --> 00:29:09,889
actually deploy spinnaker too and we run

00:29:06,929 --> 00:29:11,970
whatever tests they provide and again

00:29:09,889 --> 00:29:17,749
you know currently on each of those

00:29:11,970 --> 00:29:17,749
deployments and when everything is green

00:29:22,489 --> 00:29:27,899
yeah oh yeah I've obviously gone through

00:29:25,919 --> 00:29:31,429
a bunch of different iterations on how

00:29:27,899 --> 00:29:34,889
we deploy spanker but going back say

00:29:31,429 --> 00:29:36,690
seven or eight months ago we were pretty

00:29:34,889 --> 00:29:38,190
focused on trying to expand to work on

00:29:36,690 --> 00:29:40,109
our internal operating system which

00:29:38,190 --> 00:29:44,239
happened to be Red Hat Enterprise Linux

00:29:40,109 --> 00:29:47,909
based ok so at the time I committed a

00:29:44,239 --> 00:29:50,129
few PRS to make the builds out of the

00:29:47,909 --> 00:29:58,019
jobs actually work successfully for a

00:29:50,129 --> 00:30:00,149
building to issue tickets one to try to

00:29:58,019 --> 00:30:02,100
get the open source community to make

00:30:00,149 --> 00:30:04,919
rpms as part of the official build and

00:30:02,100 --> 00:30:06,480
then second one to make the at that time

00:30:04,919 --> 00:30:08,999
I was using like the install spinnaker

00:30:06,480 --> 00:30:10,859
shell script yep as my mechanism for

00:30:08,999 --> 00:30:15,450
doing kind of installs right to make

00:30:10,859 --> 00:30:17,879
that work right now it's basically an

00:30:15,450 --> 00:30:19,559
Ubuntu only kind of shell script but

00:30:17,879 --> 00:30:21,419
there's kind of like some stubs in there

00:30:19,559 --> 00:30:24,119
to make it work for rpms so I feel like

00:30:21,419 --> 00:30:25,350
the amount of work left to do to make

00:30:24,119 --> 00:30:38,039
this actually come to completion is

00:30:25,350 --> 00:30:46,080
pretty small ok ok yes yes and then got

00:30:38,039 --> 00:30:50,789
pulled off to do other things I wanted

00:30:46,080 --> 00:30:52,320
to let I was gonna jump on so it seems

00:30:50,789 --> 00:30:55,409
like and this is this is something that

00:30:52,320 --> 00:30:56,970
like you know we we just haven't I think

00:30:55,409 --> 00:30:58,350
extending this far enough but you know

00:30:56,970 --> 00:31:00,119
there's definitely pathways in this

00:30:58,350 --> 00:31:01,649
release process to like Annie we can

00:31:00,119 --> 00:31:02,550
build any number of artifact types

00:31:01,649 --> 00:31:04,230
that's not

00:31:02,550 --> 00:31:05,460
if you can do it I don't know if this is

00:31:04,230 --> 00:31:07,470
viable or not but if you can do it

00:31:05,460 --> 00:31:10,050
halyard instead of installed spinnaker

00:31:07,470 --> 00:31:11,880
no it would be a lot better I agree

00:31:10,050 --> 00:31:12,990
that's why I started out my comment by

00:31:11,880 --> 00:31:15,480
saying like this was going back like

00:31:12,990 --> 00:31:17,640
nine months ago like that was the state

00:31:15,480 --> 00:31:19,500
of the art at the time but I just feel

00:31:17,640 --> 00:31:21,809
like the point that I wanted to make is

00:31:19,500 --> 00:31:24,540
that until someone who is responsible

00:31:21,809 --> 00:31:26,910
for the open source build commits to

00:31:24,540 --> 00:31:28,620
taking the changes that I made and

00:31:26,910 --> 00:31:30,179
actually like right between those builds

00:31:28,620 --> 00:31:31,530
and publishing them somewhere it's

00:31:30,179 --> 00:31:33,360
pretty typical for anybody else in the

00:31:31,530 --> 00:31:35,460
open-source community to really try this

00:31:33,360 --> 00:31:37,380
akan completion because like I could

00:31:35,460 --> 00:31:39,360
make the script work if the RPMs were

00:31:37,380 --> 00:31:42,470
there but I can't make you with the RPMs

00:31:39,360 --> 00:31:44,370
where I think they need to go okay right

00:31:42,470 --> 00:31:46,440
yeah I think this is something we can

00:31:44,370 --> 00:31:49,440
follow up online with but like I said so

00:31:46,440 --> 00:31:51,059
I am I was in contact with Gary whenever

00:31:49,440 --> 00:31:52,860
he was he was sort of pushing through

00:31:51,059 --> 00:31:54,720
this this rpm stuff there's you know

00:31:52,860 --> 00:31:56,340
there's there's there's several pieces

00:31:54,720 --> 00:31:59,280
to it so it's a bit more complicated

00:31:56,340 --> 00:32:00,510
than yes sir but but yeah you know we

00:31:59,280 --> 00:32:01,830
could we get an act that off as a real

00:32:00,510 --> 00:32:12,210
work I didn't just start you know

00:32:01,830 --> 00:32:13,860
whatever honestly got pulled off and he

00:32:12,210 --> 00:32:15,900
was kind of my radio silent I was a bit

00:32:13,860 --> 00:32:17,160
he's like very like personable and

00:32:15,900 --> 00:32:25,340
talkative and there's all I thought I

00:32:17,160 --> 00:32:31,320
thought I made him mad anymore all right

00:32:25,340 --> 00:32:33,510
this is absolutely I know yeah hey can

00:32:31,320 --> 00:32:36,690
you share some thoughts on the

00:32:33,510 --> 00:32:38,760
validation aspect kind of testing you

00:32:36,690 --> 00:32:40,950
guys do yeah before you move things into

00:32:38,760 --> 00:32:43,380
production not just the core services

00:32:40,950 --> 00:32:47,820
but you know the pipelines and the

00:32:43,380 --> 00:32:49,590
integrated systems right so we have

00:32:47,820 --> 00:32:51,630
several different types of integration

00:32:49,590 --> 00:32:53,850
tests there's a bunch of just sort of

00:32:51,630 --> 00:32:55,080
generic smoke tests so will you know

00:32:53,850 --> 00:32:57,540
we'll create a load balancer create a

00:32:55,080 --> 00:32:58,620
server group just to make sure that

00:32:57,540 --> 00:33:01,890
everything's sort of functioning

00:32:58,620 --> 00:33:03,809
properly we also have tests that that

00:33:01,890 --> 00:33:05,850
create the post the pipeline to Orca

00:33:03,809 --> 00:33:07,980
goes ahead and Triggs a sort of Jenkins

00:33:05,850 --> 00:33:09,540
job to finish and that that's as the

00:33:07,980 --> 00:33:11,220
trigger to the pipeline's that is the

00:33:09,540 --> 00:33:15,059
trigger to the pipeline so we we sort of

00:33:11,220 --> 00:33:16,550
test that that stuff flows but you know

00:33:15,059 --> 00:33:18,710
this can always get better like we

00:33:16,550 --> 00:33:22,490
always run run more types of tests like

00:33:18,710 --> 00:33:24,290
more types of load balancing more you

00:33:22,490 --> 00:33:25,190
know testing different platforms cetera

00:33:24,290 --> 00:33:28,070
et cetera

00:33:25,190 --> 00:33:30,560
you know we have we have a you know we

00:33:28,070 --> 00:33:32,330
don't have excellent integration test

00:33:30,560 --> 00:33:34,160
coverage but we test that you know the

00:33:32,330 --> 00:33:35,920
main the main primitives are gonna are

00:33:34,160 --> 00:33:39,250
going to work with with sort of high

00:33:35,920 --> 00:33:58,940
confidence they answer your question

00:33:39,250 --> 00:34:01,940
start off okay yeah testing okay looks

00:33:58,940 --> 00:34:07,430
like this is integration but more API

00:34:01,940 --> 00:34:11,630
driven right and I guess it's not yes so

00:34:07,430 --> 00:34:13,220
your your is your question so are we

00:34:11,630 --> 00:34:15,350
going to at some point go ahead and

00:34:13,220 --> 00:34:17,540
include more UI testing or or drive that

00:34:15,350 --> 00:34:19,700
from the UI or what it's like how

00:34:17,540 --> 00:34:22,640
satisfied are you with sort of the

00:34:19,700 --> 00:34:24,980
status of integration testing now do you

00:34:22,640 --> 00:34:28,669
think it's covering the right stuff the

00:34:24,980 --> 00:34:32,240
right way I think Eric can give a pretty

00:34:28,669 --> 00:34:35,630
good no so we do not test Dec at all as

00:34:32,240 --> 00:34:38,810
part of the integration testing the

00:34:35,630 --> 00:34:49,360
expectation was somebody else we've had

00:34:38,810 --> 00:34:52,820
conversations that's opportunity for our

00:34:49,360 --> 00:34:55,790
so spinnaker code base in spinnaker has

00:34:52,820 --> 00:34:58,040
extensive unit tests and mocking and

00:34:55,790 --> 00:34:59,960
stuff but the mocks don't tell you

00:34:58,040 --> 00:35:03,020
they'll actually work on a provider so

00:34:59,960 --> 00:35:05,960
our tests were more geared to ensuring

00:35:03,020 --> 00:35:09,980
that the provider integration parts work

00:35:05,960 --> 00:35:11,630
and then given Netflix scale usage and

00:35:09,980 --> 00:35:14,210
everything we kind of assumed that some

00:35:11,630 --> 00:35:17,170
of that experience would carry forward

00:35:14,210 --> 00:35:22,220
into the general integrity of spinnaker

00:35:17,170 --> 00:35:23,360
itself for for the fundamentals up but

00:35:22,220 --> 00:35:28,790
if other people within the community

00:35:23,360 --> 00:35:30,200
when write tests we're actually

00:35:28,790 --> 00:35:32,480
encouraging you know

00:35:30,200 --> 00:35:35,740
folks that are writing new providers to

00:35:32,480 --> 00:35:37,940
go ahead and supply and a set of

00:35:35,740 --> 00:35:39,140
integration tests we can run I think

00:35:37,940 --> 00:35:45,560
everything is everything is open-source

00:35:39,140 --> 00:35:49,340
it's as the people managing the releases

00:35:45,560 --> 00:35:51,710
on this do you think that are you

00:35:49,340 --> 00:35:55,990
satisfied with how much it slips through

00:35:51,710 --> 00:36:03,290
or not are you

00:35:55,990 --> 00:36:05,540
you are like why didn't I see so Thanks

00:36:03,290 --> 00:36:07,010
do you feel like do we not cover all not

00:36:05,540 --> 00:36:08,420
cover I mean it's certainly not it's not

00:36:07,010 --> 00:36:10,100
every edge case like if that's that's

00:36:08,420 --> 00:36:11,600
you know that's it's not it's not there

00:36:10,100 --> 00:36:13,430
yeah but I think we do due diligence on

00:36:11,600 --> 00:36:17,720
I guess ID on the on the core workflows

00:36:13,430 --> 00:36:19,250
people are using and leveraging I think

00:36:17,720 --> 00:36:22,940
similar to this line of questioning is

00:36:19,250 --> 00:36:24,950
it easy for end-users to check out test

00:36:22,940 --> 00:36:26,390
Suites and sort of run them extend them

00:36:24,950 --> 00:36:30,170
by themselves for all that other

00:36:26,390 --> 00:36:33,100
extensions or maybe deck VM prober

00:36:30,170 --> 00:36:36,140
testing with Firefox and bosses sure

00:36:33,100 --> 00:36:37,760
extent like it's a bit it's a bit

00:36:36,140 --> 00:36:39,890
challenging to extend at this point but

00:36:37,760 --> 00:36:42,320
in terms of I sorry that's not exactly

00:36:39,890 --> 00:36:43,760
sure like writing the test is fine it's

00:36:42,320 --> 00:36:47,120
it's more like there's an underlying

00:36:43,760 --> 00:36:48,890
sort of set interface instead of

00:36:47,120 --> 00:36:50,240
primitives it's sort of hard to you know

00:36:48,890 --> 00:36:51,500
it's hard to get into but once you

00:36:50,240 --> 00:36:52,820
understand it it's sort of it sort of

00:36:51,500 --> 00:36:55,730
makes sense it easy to write tests you

00:36:52,820 --> 00:36:57,110
can a lot of the tests are sort of they

00:36:55,730 --> 00:37:02,410
they're they're shaped the same way

00:36:57,110 --> 00:37:05,420
meaning like you said end users

00:37:02,410 --> 00:37:08,300
developers yeah oh no I did actually

00:37:05,420 --> 00:37:11,000
mean developers like say I extended Orca

00:37:08,300 --> 00:37:14,000
and I want to and it's right way the

00:37:11,000 --> 00:37:15,770
tests were designed was actually and we

00:37:14,000 --> 00:37:20,390
don't do this but the original intent

00:37:15,770 --> 00:37:24,760
it was allow people to run the tests to

00:37:20,390 --> 00:37:27,740
validate their deployments so they were

00:37:24,760 --> 00:37:31,670
meant they were designed and built for

00:37:27,740 --> 00:37:34,010
end users actually be able to run them

00:37:31,670 --> 00:37:35,900
from a technical standpoint so the tests

00:37:34,010 --> 00:37:40,520
adapt to the environment rather than

00:37:35,900 --> 00:37:43,660
assuming the but then the other part was

00:37:40,520 --> 00:37:43,660
that easy and

00:37:44,799 --> 00:37:52,270
it's easy to do from source but it's not

00:37:49,250 --> 00:37:57,349
you know if you need to download git

00:37:52,270 --> 00:38:01,720
repositories and stuff like that but

00:37:57,349 --> 00:38:01,720
that is long term that that's the intent

00:38:05,380 --> 00:38:11,839
that doesn't happen we run the tests

00:38:09,400 --> 00:38:21,680
test environment is a deployment so

00:38:11,839 --> 00:38:25,279
we're doing regarding be comment while

00:38:21,680 --> 00:38:28,630
extending look in general when we extend

00:38:25,279 --> 00:38:32,020
and we have some internal proprietary

00:38:28,630 --> 00:38:35,630
algorithm that we aren't privy to

00:38:32,020 --> 00:38:38,270
upstream right how do we manage the

00:38:35,630 --> 00:38:40,369
merging process especially now that we

00:38:38,270 --> 00:38:44,569
have this release branching strategy and

00:38:40,369 --> 00:38:47,750
perhaps cherry-picking me in general

00:38:44,569 --> 00:38:50,470
what's the general pattern that folks

00:38:47,750 --> 00:38:56,180
have been applying regard to like

00:38:50,470 --> 00:38:58,760
extension and how to I saying ok so this

00:38:56,180 --> 00:39:00,230
is something actually that we that Eric

00:38:58,760 --> 00:39:01,609
and I talked about recently so if I

00:39:00,230 --> 00:39:06,349
understand you correctly you you would

00:39:01,609 --> 00:39:08,869
like to use this sort of tested and and

00:39:06,349 --> 00:39:10,490
and and like validated releases but go

00:39:08,869 --> 00:39:13,130
ahead and then use those internally as

00:39:10,490 --> 00:39:17,420
and as like the base jar to your

00:39:13,130 --> 00:39:18,859
extension code right right so currently

00:39:17,420 --> 00:39:20,900
we don't we don't have any support for

00:39:18,859 --> 00:39:25,700
you know sort of resolving those

00:39:20,900 --> 00:39:27,349
versions but what you can do so as you

00:39:25,700 --> 00:39:30,260
saw the bomb so what you can do is

00:39:27,349 --> 00:39:32,630
essentially point to point to the

00:39:30,260 --> 00:39:35,119
correct bin tray repository and set the

00:39:32,630 --> 00:39:38,299
version to the version of the whatever

00:39:35,119 --> 00:39:39,890
service you you care about to the bomb

00:39:38,299 --> 00:39:42,349
version so you this is all like you know

00:39:39,890 --> 00:39:44,450
you can just basically by inspection go

00:39:42,349 --> 00:39:45,859
ahead and pull the correct like version

00:39:44,450 --> 00:39:48,380
of the jar and understand here on

00:39:45,859 --> 00:39:54,380
such-and-such a spinnaker version that

00:39:48,380 --> 00:39:57,170
makes sense yes there so right the the

00:39:54,380 --> 00:39:58,910
micro service the micro service versions

00:39:57,170 --> 00:40:00,319
push stop stream his tags but all of

00:39:58,910 --> 00:40:01,849
that metadata is collected in the bill

00:40:00,319 --> 00:40:04,460
of materials that's really only the only

00:40:01,849 --> 00:40:07,220
file you need to to sort of grok and

00:40:04,460 --> 00:40:08,839
understand where where the so let me

00:40:07,220 --> 00:40:14,020
name it even tells you in there where to

00:40:08,839 --> 00:40:16,400
the URL to fetch the Debian files from

00:40:14,020 --> 00:41:03,309
so that should be all of this sort of

00:40:16,400 --> 00:41:30,049
metadata you need to take that as a

00:41:03,309 --> 00:41:31,880
licensing issue and it's just I guess on

00:41:30,049 --> 00:41:36,740
us as committers to make sure that we

00:41:31,880 --> 00:41:40,339
don't and it sees and I mean it's we

00:41:36,740 --> 00:41:42,980
would probably pay fairly close

00:41:40,339 --> 00:41:45,200
attention to somebody submitting a pull

00:41:42,980 --> 00:41:48,559
request that adds new dependencies to

00:41:45,200 --> 00:42:04,460
any of the services in general but one

00:41:48,559 --> 00:42:06,829
of the things I would really not know we

00:42:04,460 --> 00:42:08,569
don't so I guess my best guess is what

00:42:06,829 --> 00:42:10,350
we would do in that case is so if we had

00:42:08,569 --> 00:42:11,340
if we had to published a version where

00:42:10,350 --> 00:42:12,450
there's some there's some sort of

00:42:11,340 --> 00:42:14,190
licensing issue we would have to

00:42:12,450 --> 00:42:16,590
basically deprecated that and pull that

00:42:14,190 --> 00:42:19,140
back from being you know sort of a

00:42:16,590 --> 00:42:21,750
public released spinnaker version that's

00:42:19,140 --> 00:42:24,330
that's essentially I guess that the

00:42:21,750 --> 00:42:25,680
process we'd have now but there is no

00:42:24,330 --> 00:42:36,570
there's no like precondition check to

00:42:25,680 --> 00:42:39,180
that now yep performance testing your

00:42:36,570 --> 00:42:55,590
benchmarks no as you mean compared to

00:42:39,180 --> 00:42:57,300
like one from one variety or another we

00:42:55,590 --> 00:43:00,360
don't have any form of like performance

00:42:57,300 --> 00:43:01,650
measurement like that now now we do want

00:43:00,360 --> 00:43:03,150
to start running squeeze testings that's

00:43:01,650 --> 00:43:04,320
something that we do want to put in our

00:43:03,150 --> 00:43:09,140
suite of integration tests it's a good

00:43:04,320 --> 00:43:12,680
point hey God as a contributor should

00:43:09,140 --> 00:43:15,150
tests and adding to them certainly yeah

00:43:12,680 --> 00:43:17,100
definitely you know would be a big help

00:43:15,150 --> 00:43:18,480
especially you know particularly if

00:43:17,100 --> 00:43:19,980
you're adding adding sort of new

00:43:18,480 --> 00:43:21,540
functionality or a whole new module or

00:43:19,980 --> 00:43:23,040
something that doesn't have any any

00:43:21,540 --> 00:43:25,140
integration test cover that's definitely

00:43:23,040 --> 00:43:27,540
do they've run on pr's in some way or

00:43:25,140 --> 00:43:32,400
how can we pallid eight the integration

00:43:27,540 --> 00:43:35,790
tests I guess for writing them that's

00:43:32,400 --> 00:43:38,340
kind of how to write so if they validate

00:43:35,790 --> 00:43:40,950
on pull requests you know they're too

00:43:38,340 --> 00:43:43,200
expensive so oh I see what you're saying

00:43:40,950 --> 00:43:44,580
when do we run them yet so we they don't

00:43:43,200 --> 00:43:47,490
they don't that we only run the unit

00:43:44,580 --> 00:43:50,250
tests on for on poor requests this this

00:43:47,490 --> 00:43:52,710
process of outlined is nightly and then

00:43:50,250 --> 00:43:54,960
and and oftentimes you know more than

00:43:52,710 --> 00:43:56,400
once a day if we want to go ahead and

00:43:54,960 --> 00:43:58,140
cut it release we'll go ahead and run

00:43:56,400 --> 00:44:00,180
run this process several times but if

00:43:58,140 --> 00:44:01,680
they writing how do I know that I'm

00:44:00,180 --> 00:44:04,740
writing a good integration test I guess

00:44:01,680 --> 00:44:05,760
my question my question - I want to

00:44:04,740 --> 00:44:07,530
download this stuff and run your own

00:44:05,760 --> 00:44:10,740
right and yeah and add one and maybe

00:44:07,530 --> 00:44:12,540
upstream it or maybe not and you're sick

00:44:10,740 --> 00:44:14,730
you're asking how do we how do we check

00:44:12,540 --> 00:44:16,560
that how do you run the integration test

00:44:14,730 --> 00:44:19,110
said you're sped up a spanker and then

00:44:16,560 --> 00:44:20,580
yes I just built my workstation I have

00:44:19,110 --> 00:44:21,960
to start it and I want to run the full

00:44:20,580 --> 00:44:23,450
suite of integration tests by myself

00:44:21,960 --> 00:44:25,430
okay and add one and

00:44:23,450 --> 00:44:26,809
it's simple yeah it's sort of short okay

00:44:25,430 --> 00:44:28,250
so if you have a spinnaker running it's

00:44:26,809 --> 00:44:29,960
as simple as cloning the spinnaker

00:44:28,250 --> 00:44:31,520
spinnaker repo and then running like a

00:44:29,960 --> 00:44:34,099
Python command basically with all the

00:44:31,520 --> 00:44:35,540
corrects like that's that like the

00:44:34,099 --> 00:44:37,280
actual pulling and running and checking

00:44:35,540 --> 00:44:38,540
that your build didn't didn't screw

00:44:37,280 --> 00:44:40,430
anything up or you yeah your your

00:44:38,540 --> 00:44:41,569
spinnaker change didn't screw anything

00:44:40,430 --> 00:44:43,040
up yeah that's that's pretty

00:44:41,569 --> 00:44:44,990
straightforward I think we could

00:44:43,040 --> 00:44:46,640
probably even you know make that a

00:44:44,990 --> 00:44:49,339
little easier to say if you want to run

00:44:46,640 --> 00:44:51,700
I wonder in the whole suite or some some

00:44:49,339 --> 00:44:56,380
you know subsection of it but there's

00:44:51,700 --> 00:44:56,380
it's it's it's fairly straightforward

00:44:59,770 --> 00:45:07,369
like a lighter-weight

00:45:01,930 --> 00:45:09,530
sort of just you know to kind of reduce

00:45:07,369 --> 00:45:11,960
the number of failures that are coming

00:45:09,530 --> 00:45:13,609
in because I'm having a PR system where

00:45:11,960 --> 00:45:18,650
other people are looking at things good

00:45:13,609 --> 00:45:21,230
but I always think that yeah absolutely

00:45:18,650 --> 00:45:23,780
it's the the the tricky thing is like I

00:45:21,230 --> 00:45:25,280
don't think messes it's it's the

00:45:23,780 --> 00:45:27,520
deploying spinnaker is sort of a heavy

00:45:25,280 --> 00:45:29,299
lifting here I mean the traffic

00:45:27,520 --> 00:45:31,880
afterwards when you're running the test

00:45:29,299 --> 00:45:34,369
is sort of small but it's you're asking

00:45:31,880 --> 00:45:37,010
for you're asking for us to deploy nine

00:45:34,369 --> 00:45:39,380
things on a PR that's like well that's

00:45:37,010 --> 00:45:42,500
sort of like doesn't have to be an

00:45:39,380 --> 00:45:45,470
automated like bringing up stacks right

00:45:42,500 --> 00:45:49,670
maybe part of like the like acceptance

00:45:45,470 --> 00:45:54,890
criteria like you do this you like did

00:45:49,670 --> 00:45:57,650
you have a is this covered by or did you

00:45:54,890 --> 00:46:00,109
run an integration test prior to this I

00:45:57,650 --> 00:46:02,000
was like a prior it's sort of hard to

00:46:00,109 --> 00:46:09,440
verify I mean it's like your word right

00:46:02,000 --> 00:46:12,770
so it's yeah to my knowledge I don't see

00:46:09,440 --> 00:46:14,599
us changing that but that is something

00:46:12,770 --> 00:46:16,460
that we have thought about and initially

00:46:14,599 --> 00:46:18,049
whenever we were you know hashing out

00:46:16,460 --> 00:46:21,619
what we're gonna do for validation now

00:46:18,049 --> 00:46:23,480
that came up is how do we when do we run

00:46:21,619 --> 00:46:24,829
these integration tests and like what's

00:46:23,480 --> 00:46:27,410
the process behind that and that

00:46:24,829 --> 00:46:30,170
definitely came up as one of the things

00:46:27,410 --> 00:46:33,470
that we talked to her yeah

00:46:30,170 --> 00:46:36,140
are there any plans you've kind of make

00:46:33,470 --> 00:46:37,140
that I believe it was a Jenkins process

00:46:36,140 --> 00:46:39,930
that shows

00:46:37,140 --> 00:46:45,059
bill verifying the publish like

00:46:39,930 --> 00:46:47,099
available to the public not at the the

00:46:45,059 --> 00:46:48,240
current time but we like I said this is

00:46:47,099 --> 00:46:51,119
this is another thing where we came

00:46:48,240 --> 00:46:52,440
across and said all right we have these

00:46:51,119 --> 00:46:54,089
things we should we should report them

00:46:52,440 --> 00:46:56,819
that was initially the first sort of

00:46:54,089 --> 00:47:00,510
opinion but the the sort of formatting

00:46:56,819 --> 00:47:04,230
is is not the format it's it's sort it's

00:47:00,510 --> 00:47:07,260
sort of hard to like take as a user and

00:47:04,230 --> 00:47:09,269
understand that means so just that you

00:47:07,260 --> 00:47:11,579
know the just the format of that that

00:47:09,269 --> 00:47:13,079
test output is a bit like opaque

00:47:11,579 --> 00:47:15,650
especially to like a newsman accuser

00:47:13,079 --> 00:47:17,970
you're like I don't this means there's

00:47:15,650 --> 00:47:19,619
also worried about leaking credentials

00:47:17,970 --> 00:47:21,150
yeah that was another big issue of it

00:47:19,619 --> 00:47:25,470
it's like how do we scrub those and like

00:47:21,150 --> 00:47:26,640
what is what is acceptable so we we went

00:47:25,470 --> 00:47:27,750
through varying levels of alright let's

00:47:26,640 --> 00:47:29,789
just give the high report

00:47:27,750 --> 00:47:31,470
I love report but then like those names

00:47:29,789 --> 00:47:33,809
aren't super clear on what exactly is

00:47:31,470 --> 00:47:40,140
testing and it's it's sort of a tricky

00:47:33,809 --> 00:47:42,269
problem to do that yeah and one of your

00:47:40,140 --> 00:47:46,529
previous slides you described a new

00:47:42,269 --> 00:47:56,900
release process so I think one point 3.0

00:47:46,529 --> 00:47:59,519
was deprecated so this was a bit of a

00:47:56,900 --> 00:48:03,079
tricky one so we I think we published

00:47:59,519 --> 00:48:06,240
that one we published one three oh I

00:48:03,079 --> 00:48:08,160
think prior to that well I think that

00:48:06,240 --> 00:48:10,349
one had a dependency on how you're being

00:48:08,160 --> 00:48:11,940
updated as well but there needed to be a

00:48:10,349 --> 00:48:13,950
change that went in halyard so we I

00:48:11,940 --> 00:48:16,859
think we release we pushed one 302 quick

00:48:13,950 --> 00:48:19,950
before we put pushed the subsequent or

00:48:16,859 --> 00:48:22,769
you know necessary halyard fix or you

00:48:19,950 --> 00:48:23,789
know new feature to to deal with that so

00:48:22,769 --> 00:48:25,529
that's what that's what happened there

00:48:23,789 --> 00:48:27,690
so we released it sort of rolled it back

00:48:25,529 --> 00:48:29,549
you know made sure everything was was

00:48:27,690 --> 00:48:31,250
was fine and then and then sort of

00:48:29,549 --> 00:48:34,650
rerelease its that was a bit of like a

00:48:31,250 --> 00:48:37,920
you know like we released it a bit too

00:48:34,650 --> 00:48:41,849
soon and the and the older version of

00:48:37,920 --> 00:48:44,940
halyard only one point 3.0 would break

00:48:41,849 --> 00:48:46,460
the deployment I I

00:48:44,940 --> 00:48:48,690
yeah I think that was what let's that's

00:48:46,460 --> 00:48:50,190
yeah that's what what's what would have

00:48:48,690 --> 00:48:51,109
happened so like it wouldn't yet even if

00:48:50,190 --> 00:48:55,579
you tried it with the older

00:48:51,109 --> 00:48:57,950
it wasn't would not have worked we were

00:48:55,579 --> 00:48:59,599
a bit optimistic and assuming that all

00:48:57,950 --> 00:49:01,220
versions of halyard with the ploy over

00:48:59,599 --> 00:49:03,710
spinnaker but we realized that's not

00:49:01,220 --> 00:49:05,630
possible so now in the future if you do

00:49:03,710 --> 00:49:06,650
if we this happens again allard will

00:49:05,630 --> 00:49:08,299
actually prevent you from deploying

00:49:06,650 --> 00:49:09,859
spanker until you've updated halyard to

00:49:08,299 --> 00:49:11,839
the correct route now there's sort of

00:49:09,859 --> 00:49:16,220
there's a window of both that it is like

00:49:11,839 --> 00:49:18,200
sort of a tolerant it's reported in the

00:49:16,220 --> 00:49:19,369
changelog and you can see it online but

00:49:18,200 --> 00:49:22,700
I've just noticed other people but

00:49:19,369 --> 00:49:24,140
there's a change in gates security

00:49:22,700 --> 00:49:26,720
configuration because of a spring boot

00:49:24,140 --> 00:49:29,480
update so the way a lot was configured

00:49:26,720 --> 00:49:30,680
changed yeah so your prior like how

00:49:29,480 --> 00:49:32,420
config would have would have not

00:49:30,680 --> 00:49:37,039
functioned properly with the news of new

00:49:32,420 --> 00:49:37,930
new gate version all right any other

00:49:37,039 --> 00:49:40,220
questions

00:49:37,930 --> 00:49:41,869
all right cool thanks for coming guys

00:49:40,220 --> 00:49:44,259
hopefully that was informative and

00:49:41,869 --> 00:49:44,259

YouTube URL: https://www.youtube.com/watch?v=aQ1lhi1l18s


