Title: Spinnaker at Scopely
Publication date: 2017-09-22
Playlist: Spinnaker Summit 2017
Description: 
	AVRAM LYON, SCOPELY

Scopely is using Spinnaker to help diverse game studios implement clean and reliable deployment patterns. In the past 9 months, we’ve moved three game backends and dozens of our platform services to deploy with Spinnaker in production. The move has helped us simplify the stage-QA-canary-scale-switch deployments of game teams and radically reduce human error and complexity. We will share how we built pipelines to canonicalize our standard practices for teams, as well as the deploy strategies for multi-tier game servers and for streaming data applications, and the pitfalls and benefits we’ve encountered.

From Spinnaker Summit 2017
Captions: 
	00:00:00,599 --> 00:00:03,629
since we've gone 10 seconds with no one

00:00:02,190 --> 00:00:07,500
walking into the room we can go ahead

00:00:03,629 --> 00:00:10,170
and start this is one of these how

00:00:07,500 --> 00:00:13,920
people use spinnaker why customer

00:00:10,170 --> 00:00:17,640
journey talks and so my name's album I

00:00:13,920 --> 00:00:20,189
met skully which is a a mobile games

00:00:17,640 --> 00:00:22,920
publisher and developer we make a number

00:00:20,189 --> 00:00:25,769
of games there's six things live now six

00:00:22,920 --> 00:00:27,210
seven maybe some of them are more or

00:00:25,769 --> 00:00:29,699
less up to the developed couple million

00:00:27,210 --> 00:00:32,850
daily users with a lot of things

00:00:29,699 --> 00:00:34,620
actively in development as well and so

00:00:32,850 --> 00:00:35,670
all told is eight different development

00:00:34,620 --> 00:00:37,890
studios around the world

00:00:35,670 --> 00:00:39,840
I actually didn't count it's probably

00:00:37,890 --> 00:00:42,629
like around 8:00 and around six

00:00:39,840 --> 00:00:45,390
countries that is the sort of a

00:00:42,629 --> 00:00:47,969
testament to I think the model as a

00:00:45,390 --> 00:00:52,260
publisher is that we have a a lot riding

00:00:47,969 --> 00:00:54,510
on how games work but well there are

00:00:52,260 --> 00:00:56,430
some central technical services and some

00:00:54,510 --> 00:00:59,280
technologies that run centrally it's

00:00:56,430 --> 00:01:01,230
Cokely a lot of what happens and a lot

00:00:59,280 --> 00:01:03,539
of the things that make a game succeed

00:01:01,230 --> 00:01:06,890
or not what a knowledge standpoint are

00:01:03,539 --> 00:01:09,630
done independently by different Studios

00:01:06,890 --> 00:01:11,700
relevant for today's discussion we are

00:01:09,630 --> 00:01:13,020
all in a diverse and have been since the

00:01:11,700 --> 00:01:16,110
beginning I've been there for about five

00:01:13,020 --> 00:01:18,960
and a half years and scope Lee's been on

00:01:16,110 --> 00:01:21,180
a device that whole time we started we

00:01:18,960 --> 00:01:24,900
switched over that little workload that

00:01:21,180 --> 00:01:27,560
was on for a couple weeks on to a device

00:01:24,900 --> 00:01:29,520
and early 2012 around what I joined

00:01:27,560 --> 00:01:31,380
we're gonna talk really about two

00:01:29,520 --> 00:01:35,850
different stories of adopting spinnaker

00:01:31,380 --> 00:01:38,189
and they're very different one of them

00:01:35,850 --> 00:01:40,320
they correspond really to the two areas

00:01:38,189 --> 00:01:42,540
of engineering and technical investment

00:01:40,320 --> 00:01:44,399
at the company um on the one hand is the

00:01:42,540 --> 00:01:45,360
publishing platform group I'm personally

00:01:44,399 --> 00:01:48,060
a head of engineering publishing

00:01:45,360 --> 00:01:52,110
platform at Scone place so that's where

00:01:48,060 --> 00:01:53,310
I work directly and we add up the

00:01:52,110 --> 00:01:55,829
spinnaker first and we'll talk about

00:01:53,310 --> 00:01:57,509
that the other story is actually

00:01:55,829 --> 00:01:59,640
spinnaker as part of the game

00:01:57,509 --> 00:02:03,810
development process and the rollout that

00:01:59,640 --> 00:02:06,750
we've gone through of spinnaker for game

00:02:03,810 --> 00:02:10,160
backends on the publishing side this is

00:02:06,750 --> 00:02:13,440
a team number of teams that is

00:02:10,160 --> 00:02:14,760
responsible for on

00:02:13,440 --> 00:02:16,320
basically anything that's cobbler

00:02:14,760 --> 00:02:19,290
designs as a company we want to have

00:02:16,320 --> 00:02:22,260
done centrally all in one place so dated

00:02:19,290 --> 00:02:24,450
systems first among those things for add

00:02:22,260 --> 00:02:27,420
mediation user acquisition marketing

00:02:24,450 --> 00:02:30,060
optimization it's not an engineer its

00:02:27,420 --> 00:02:32,400
engineers who are involved in this in

00:02:30,060 --> 00:02:35,280
more of uh it's more than eight is like

00:02:32,400 --> 00:02:38,160
fifteen I don't know I rotate in

00:02:35,280 --> 00:02:42,390
retrospect with around twenty live

00:02:38,160 --> 00:02:44,340
services and these are fairly standard

00:02:42,390 --> 00:02:46,800
job in hand with straw eight services

00:02:44,340 --> 00:02:49,110
running on Linux for a long time we'll

00:02:46,800 --> 00:02:51,840
talk about their details their history I

00:02:49,110 --> 00:02:53,310
mean they made the job a logo note the

00:02:51,840 --> 00:02:54,630
game studios are very different one

00:02:53,310 --> 00:02:57,180
another well anything I talk about the

00:02:54,630 --> 00:02:59,840
story of one games video that is on

00:02:57,180 --> 00:03:04,280
spinnaker today or do on spinnaker today

00:02:59,840 --> 00:03:07,950
importantly though as a publisher we

00:03:04,280 --> 00:03:10,680
really value that game teams get to

00:03:07,950 --> 00:03:12,630
focus on making a great game and we are

00:03:10,680 --> 00:03:14,100
need to find the right amount of

00:03:12,630 --> 00:03:16,620
structure and the right amount of

00:03:14,100 --> 00:03:19,620
centralization that means that they're

00:03:16,620 --> 00:03:21,150
not that doesn't make the small central

00:03:19,620 --> 00:03:22,230
team let's go play a bottleneck for

00:03:21,150 --> 00:03:24,870
teams that are just trying to figure out

00:03:22,230 --> 00:03:27,300
how to make a game good and so what that

00:03:24,870 --> 00:03:29,850
means is that the games tend to have

00:03:27,300 --> 00:03:33,360
very different backends there and a very

00:03:29,850 --> 00:03:35,130
different sort of philosophy for how

00:03:33,360 --> 00:03:36,810
they're building things and end up with

00:03:35,130 --> 00:03:38,010
so we have a number of different

00:03:36,810 --> 00:03:41,880
languages your deployment patterns

00:03:38,010 --> 00:03:45,510
across the studios for a long time

00:03:41,880 --> 00:03:48,750
Scully has been has said that we have

00:03:45,510 --> 00:03:51,330
certain opinions about how software

00:03:48,750 --> 00:03:53,459
should be delivered are the time our

00:03:51,330 --> 00:03:56,850
director of cloud operations but you're

00:03:53,459 --> 00:04:00,209
not um gave a talk three years ago

00:03:56,850 --> 00:04:02,700
already at reinvent about our continuous

00:04:00,209 --> 00:04:04,020
deployment pipeline and how we were

00:04:02,700 --> 00:04:08,250
doing blue green deploys for game

00:04:04,020 --> 00:04:10,560
servers and we've had certain

00:04:08,250 --> 00:04:15,330
expectations around what we think is a

00:04:10,560 --> 00:04:17,549
requirement to safely make games but and

00:04:15,330 --> 00:04:20,160
so that meant that we've had something

00:04:17,549 --> 00:04:22,169
for canary Manuel Canarian for a long

00:04:20,160 --> 00:04:24,060
time and we've had the expectation that

00:04:22,169 --> 00:04:26,420
game teams will go into production with

00:04:24,060 --> 00:04:28,790
a strong blue grain deploy

00:04:26,420 --> 00:04:32,780
calling a Bluegreen agents we did in his

00:04:28,790 --> 00:04:36,440
house card and but that was a problem

00:04:32,780 --> 00:04:38,180
because on eight events there actually

00:04:36,440 --> 00:04:40,730
aren't you know everyone would agree

00:04:38,180 --> 00:04:42,770
that a week with any speak with your

00:04:40,730 --> 00:04:45,740
towns and I did this everyone would

00:04:42,770 --> 00:04:48,080
agree that's the right way to deploy is

00:04:45,740 --> 00:04:50,510
a high-volume service is a Bluegreen

00:04:48,080 --> 00:04:53,330
deploy the right way to do it is to do

00:04:50,510 --> 00:04:54,500
it by adding instance to existing mobile

00:04:53,330 --> 00:04:57,620
source you don't have cold load

00:04:54,500 --> 00:05:01,160
balancers and because DNS is it's

00:04:57,620 --> 00:05:03,410
finicky therefore but there were no

00:05:01,160 --> 00:05:05,630
tools to do so and so you could do it

00:05:03,410 --> 00:05:10,070
but there know that it built some tools

00:05:05,630 --> 00:05:12,320
are do it so there's a pretty history

00:05:10,070 --> 00:05:15,430
where we've for a long time but I guess

00:05:12,320 --> 00:05:18,980
aligned philosophy philosophically with

00:05:15,430 --> 00:05:23,000
with spinnaker as being the sort of way

00:05:18,980 --> 00:05:26,420
to do things and so we looked at NASCAR

00:05:23,000 --> 00:05:27,530
2014 and did it use it and ended up

00:05:26,420 --> 00:05:29,240
building on a tool called fleet

00:05:27,530 --> 00:05:32,330
commander which I'm not going to go any

00:05:29,240 --> 00:05:39,080
detail on but it was some Python using

00:05:32,330 --> 00:05:40,910
boto to use combined confirmation and AC

00:05:39,080 --> 00:05:43,670
programmatic using cloud formation in a

00:05:40,910 --> 00:05:44,000
way that led us to do the the muffled

00:05:43,670 --> 00:05:46,670
awk

00:05:44,000 --> 00:05:47,030
see some pictures of it but the new low

00:05:46,670 --> 00:05:48,740
bound

00:05:47,030 --> 00:05:51,370
no auto scaling group on sustainable

00:05:48,740 --> 00:05:54,500
bounce or model of blue-green deployment

00:05:51,370 --> 00:05:57,170
but what happened is that as we looked

00:05:54,500 --> 00:05:58,880
at other studios as other Studios

00:05:57,170 --> 00:06:02,300
started and mature other games start to

00:05:58,880 --> 00:06:06,080
be made by studios that were not just

00:06:02,300 --> 00:06:07,580
part of scope the central team we would

00:06:06,080 --> 00:06:08,840
have this conversation or say well you

00:06:07,580 --> 00:06:11,150
should have a blue-green deploy and it's

00:06:08,840 --> 00:06:14,450
a great help and we say well build

00:06:11,150 --> 00:06:18,920
something and well we don't build

00:06:14,450 --> 00:06:23,000
deployment tools we build games and you

00:06:18,920 --> 00:06:28,190
know and so what we end what happened in

00:06:23,000 --> 00:06:31,490
2016 spinnaker already existed is we

00:06:28,190 --> 00:06:33,140
looked at it and decided no no no that

00:06:31,490 --> 00:06:34,430
this team we do not want them to now

00:06:33,140 --> 00:06:37,430
have Cassandra in their infrastructure

00:06:34,430 --> 00:06:38,810
to run spinnaker this thing that we've

00:06:37,430 --> 00:06:40,130
never tried

00:06:38,810 --> 00:06:41,420
and we just went ahead how to use an

00:06:40,130 --> 00:06:44,720
internal tool we didn't like this

00:06:41,420 --> 00:06:47,240
because the problem is that we we don't

00:06:44,720 --> 00:06:50,150
have a central Operations Group for all

00:06:47,240 --> 00:06:52,880
shared across all game videos like one

00:06:50,150 --> 00:06:55,070
person in the CTO and that one person

00:06:52,880 --> 00:06:56,270
mainly focus on cost optimization so we

00:06:55,070 --> 00:06:58,490
really we didn't want to have a

00:06:56,270 --> 00:07:02,660
centrally supported suite of tools that

00:06:58,490 --> 00:07:04,730
we were going to that we would be on the

00:07:02,660 --> 00:07:06,260
hook for making work that said this one

00:07:04,730 --> 00:07:10,669
case we did go ahead and they moved on

00:07:06,260 --> 00:07:12,800
to the commander or internal tool 2017

00:07:10,669 --> 00:07:15,880
we actually started working with armory

00:07:12,800 --> 00:07:17,960
actually on really using spinnaker

00:07:15,880 --> 00:07:19,580
motive I buy a couple of things we'll

00:07:17,960 --> 00:07:23,030
talk about ovations for individual

00:07:19,580 --> 00:07:25,460
directions but we went the publishing

00:07:23,030 --> 00:07:28,310
group was in full production at some day

00:07:25,460 --> 00:07:31,520
in March I don't remember what day and

00:07:28,310 --> 00:07:35,390
the one of the game studios moved on

00:07:31,520 --> 00:07:37,130
shortly thereafter so we'll talk about

00:07:35,390 --> 00:07:39,560
Game Studios a little bit more that's in

00:07:37,130 --> 00:07:41,840
the end or to go into more detail on how

00:07:39,560 --> 00:07:46,160
we're using spinnaker on the publishing

00:07:41,840 --> 00:07:49,370
platform side the reason that we wanted

00:07:46,160 --> 00:07:51,740
to use it was that we had been we have

00:07:49,370 --> 00:07:56,360
an approach for deployment previously

00:07:51,740 --> 00:07:58,940
which was that we would use it would use

00:07:56,360 --> 00:08:00,740
Packer to make Konami and then we would

00:07:58,940 --> 00:08:03,700
just specify that in the launch

00:08:00,740 --> 00:08:06,380
configuration in and it you know would

00:08:03,700 --> 00:08:07,010
every service was fully defined at

00:08:06,380 --> 00:08:09,350
CloudFormation

00:08:07,010 --> 00:08:10,760
you would point to the new Omni and the

00:08:09,350 --> 00:08:13,940
new version and CloudFormation

00:08:10,760 --> 00:08:15,650
formation we managed the rollout which

00:08:13,940 --> 00:08:19,160
worked if you don't have care at all

00:08:15,650 --> 00:08:22,400
about the strategy with what you're

00:08:19,160 --> 00:08:24,350
rolling out your code confirmation maybe

00:08:22,400 --> 00:08:26,660
it's changed the time it basically

00:08:24,350 --> 00:08:30,350
supported a couple of small parameters

00:08:26,660 --> 00:08:32,750
around a rolling deploy without a very

00:08:30,350 --> 00:08:34,729
clean rollback and so rollback with

00:08:32,750 --> 00:08:36,589
confirmation is always kind of scary

00:08:34,729 --> 00:08:38,930
because some information also has this

00:08:36,589 --> 00:08:40,880
you know this dating get into where you

00:08:38,930 --> 00:08:43,490
have to call support and to get it back

00:08:40,880 --> 00:08:45,770
out of the state and we didn't have a

00:08:43,490 --> 00:08:49,130
lot of fine-grained control over how we

00:08:45,770 --> 00:08:51,290
would deploy which we were okay with all

00:08:49,130 --> 00:08:52,160
of this except for tooth two real

00:08:51,290 --> 00:08:54,019
critical things

00:08:52,160 --> 00:08:56,060
that we cared about and publishing at

00:08:54,019 --> 00:08:57,470
that time one we wanted to have two

00:08:56,060 --> 00:08:59,509
communities one - it's summer of

00:08:57,470 --> 00:09:02,959
services to cover Nettie's for speed of

00:08:59,509 --> 00:09:04,910
employment and better bin packing and we

00:09:02,959 --> 00:09:06,920
didn't want to have two different

00:09:04,910 --> 00:09:11,360
systems and so we want a unifying

00:09:06,920 --> 00:09:13,579
abstraction vinegar and we also were

00:09:11,360 --> 00:09:16,129
just spinning up our Barcelona office

00:09:13,579 --> 00:09:18,110
ocean platform this year we opened

00:09:16,129 --> 00:09:22,819
office in Barcelona we now two teams

00:09:18,110 --> 00:09:24,920
working out there and we were okay with

00:09:22,819 --> 00:09:27,019
the things we had thrown together for

00:09:24,920 --> 00:09:29,240
templated confirmation and it was very

00:09:27,019 --> 00:09:32,750
easy our new service we didn't terribly

00:09:29,240 --> 00:09:34,129
like it though and we would we want to

00:09:32,750 --> 00:09:35,540
take the opportunity since they're gonna

00:09:34,129 --> 00:09:38,810
be more applications written by more

00:09:35,540 --> 00:09:40,339
teams without the benefit of three years

00:09:38,810 --> 00:09:42,769
of prior experience with our half

00:09:40,339 --> 00:09:44,089
together on confirmation that we wanted

00:09:42,769 --> 00:09:50,060
to give them a better experience than we

00:09:44,089 --> 00:09:51,769
attempt and so we we wanted we look at

00:09:50,060 --> 00:09:53,540
spinnaker there's some other goals I put

00:09:51,769 --> 00:09:55,550
up on the slide here that we still

00:09:53,540 --> 00:09:58,660
haven't realized but we know are

00:09:55,550 --> 00:10:00,470
valuable like multi-account multi-region

00:09:58,660 --> 00:10:04,250
those for us

00:10:00,470 --> 00:10:05,029
those were we know those bonuses were

00:10:04,250 --> 00:10:07,899
more attainable

00:10:05,029 --> 00:10:09,800
we haven't still haven't done them

00:10:07,899 --> 00:10:13,660
shouldn't really call them out to

00:10:09,800 --> 00:10:15,949
brought too much but are deployed now

00:10:13,660 --> 00:10:18,319
and actually it's not so different we

00:10:15,949 --> 00:10:20,449
have before and we'll go into more

00:10:18,319 --> 00:10:23,089
detail on this is that like I think most

00:10:20,449 --> 00:10:25,490
people who tried to roll out spinnaker

00:10:23,089 --> 00:10:30,380
across you know more than 10 20

00:10:25,490 --> 00:10:32,029
applications we made our own DSL for for

00:10:30,380 --> 00:10:33,800
pipelines because who's gonna create

00:10:32,029 --> 00:10:35,209
pipelines by hand particularly if you

00:10:33,800 --> 00:10:40,040
have 20 services and they all look the

00:10:35,209 --> 00:10:42,350
same and so it's it's written in

00:10:40,040 --> 00:10:45,380
CoffeeScript DSL you define everything

00:10:42,350 --> 00:10:49,189
in yamo and so I guess it's not a

00:10:45,380 --> 00:10:51,559
conscript this DSL it's whatever

00:10:49,189 --> 00:10:54,139
being conscript is the thing that

00:10:51,559 --> 00:10:57,529
transforms it into real pipelines and

00:10:54,139 --> 00:10:59,149
for every application you get you'll get

00:10:57,529 --> 00:11:01,670
two pipelines won't repeat your

00:10:59,149 --> 00:11:03,439
production and a third one for client

00:11:01,670 --> 00:11:04,699
CloudFormation changes these who kept

00:11:03,439 --> 00:11:05,430
all of our infrastructure definitions to

00:11:04,699 --> 00:11:07,980
cover

00:11:05,430 --> 00:11:13,440
point being is that we were able to then

00:11:07,980 --> 00:11:17,230
we were then able to both filled out

00:11:13,440 --> 00:11:19,300
define all applications in in spinnaker

00:11:17,230 --> 00:11:22,510
and all of their pipelines without any

00:11:19,300 --> 00:11:24,280
per application work as well as when the

00:11:22,510 --> 00:11:27,430
time came we're able to make just

00:11:24,280 --> 00:11:30,430
changes to the the script that would

00:11:27,430 --> 00:11:33,340
transform the yemalog configurations to

00:11:30,430 --> 00:11:34,690
give it a career daily support and so

00:11:33,340 --> 00:11:36,630
this actually extracted from an

00:11:34,690 --> 00:11:38,860
onboarding document for the new teams

00:11:36,630 --> 00:11:40,840
basis this is the thing the things you

00:11:38,860 --> 00:11:45,400
must do to have a new service let's go

00:11:40,840 --> 00:11:47,050
click get our project you have be able

00:11:45,400 --> 00:11:49,090
to call skilling package either using

00:11:47,050 --> 00:11:50,980
our Gradle plugin that we wrote or

00:11:49,090 --> 00:11:52,870
having to find that chance to do

00:11:50,980 --> 00:11:54,100
something that also pushes it even

00:11:52,870 --> 00:11:55,870
package the for advice

00:11:54,100 --> 00:11:57,820
you have to have a confirmation file

00:11:55,870 --> 00:11:59,410
coffee information we still use it's our

00:11:57,820 --> 00:12:01,360
coffee is our CoffeeScript DSL for

00:11:59,410 --> 00:12:03,400
confirmation that is up and starts and

00:12:01,360 --> 00:12:09,550
it's linked to met in the dock and you

00:12:03,400 --> 00:12:10,840
can find it online it's and then you

00:12:09,550 --> 00:12:12,580
need to define that so playbook for

00:12:10,840 --> 00:12:14,410
making your service your hands will play

00:12:12,580 --> 00:12:17,980
books for most of these say install the

00:12:14,410 --> 00:12:21,730
deviant package and you're the planet

00:12:17,980 --> 00:12:23,470
specification which is the EMA and when

00:12:21,730 --> 00:12:25,630
all this is done a service deployed

00:12:23,470 --> 00:12:26,620
basically like this very boring this is

00:12:25,630 --> 00:12:29,020
what this is a different diagram

00:12:26,620 --> 00:12:32,860
spinnaker it's most people are service

00:12:29,020 --> 00:12:35,320
exposed to bark but basically the

00:12:32,860 --> 00:12:38,790
artifact back an image deployed with red

00:12:35,320 --> 00:12:43,870
black or actually frequently Highlander

00:12:38,790 --> 00:12:45,760
deployed with a strategy well the

00:12:43,870 --> 00:12:48,220
strategy of trauma second this will all

00:12:45,760 --> 00:12:52,120
be you can the deck will be online

00:12:48,220 --> 00:12:53,320
shortly so the pipelines are this is my

00:12:52,120 --> 00:12:55,240
favorite part of it because I think

00:12:53,320 --> 00:12:56,830
looking at pipelines this one hopefully

00:12:55,240 --> 00:12:58,480
you enjoy it as well and so what this

00:12:56,830 --> 00:13:00,820
means is that every service basically

00:12:58,480 --> 00:13:05,250
looks like this it has some previa

00:13:00,820 --> 00:13:07,750
brushin deploys and here you know are

00:13:05,250 --> 00:13:12,370
the pipeline saying applied confirmation

00:13:07,750 --> 00:13:15,250
changes these are basically using

00:13:12,370 --> 00:13:19,059
confirmation with its new sort of plan

00:13:15,250 --> 00:13:20,470
apply a feature where you can say

00:13:19,059 --> 00:13:23,109
I want you to generate the change set

00:13:20,470 --> 00:13:25,419
for these this for this if it's an on if

00:13:23,109 --> 00:13:28,419
you change set it will actually use the

00:13:25,419 --> 00:13:31,419
wait for human input feature of

00:13:28,419 --> 00:13:33,309
spinnaker and if you say yes we hook

00:13:31,419 --> 00:13:36,279
this up so that it's just doing all the

00:13:33,309 --> 00:13:37,449
work on diamonds um it look this up so

00:13:36,279 --> 00:13:39,699
it actually goes it applies the change

00:13:37,449 --> 00:13:41,739
such and so it you know that is the way

00:13:39,699 --> 00:13:44,379
you if there are cloud formation changes

00:13:41,739 --> 00:13:47,319
which are now rare in our application

00:13:44,379 --> 00:13:48,639
deployments because our Club information

00:13:47,319 --> 00:13:51,839
for service will pretty frequently

00:13:48,639 --> 00:13:54,939
include SNS topics SQS qim roles maybe

00:13:51,839 --> 00:13:57,639
that's been done usually buckets any

00:13:54,939 --> 00:13:59,410
external infrastructure and so you can

00:13:57,639 --> 00:14:03,189
go you know hundreds of deploys without

00:13:59,410 --> 00:14:04,660
any changes to this stuff but it's we

00:14:03,189 --> 00:14:07,989
kept it because that allowed us to

00:14:04,660 --> 00:14:11,169
actually keep in the things you need for

00:14:07,989 --> 00:14:13,869
an application you still get to specify

00:14:11,169 --> 00:14:18,129
some infrastructure you need you made

00:14:13,869 --> 00:14:20,799
something good in there so that works

00:14:18,129 --> 00:14:23,859
pretty well I want to show you the the

00:14:20,799 --> 00:14:25,179
mo uh state later that we are not

00:14:23,859 --> 00:14:26,739
actually planning on open source and

00:14:25,179 --> 00:14:29,229
thing that converts this in pipelines I

00:14:26,739 --> 00:14:31,389
think largely because we think we should

00:14:29,229 --> 00:14:33,009
probably move off of it because we

00:14:31,389 --> 00:14:35,169
should probably try the declarative

00:14:33,009 --> 00:14:36,489
thing that's now official and hopefully

00:14:35,169 --> 00:14:40,509
works better although we haven't tried

00:14:36,489 --> 00:14:41,679
it yet maybe if we won't but I guess if

00:14:40,509 --> 00:14:43,809
we started decided to stick with this

00:14:41,679 --> 00:14:45,309
maybe we'll open source that's an

00:14:43,809 --> 00:14:47,289
alternative in the world just what we

00:14:45,309 --> 00:14:51,759
need but basically I want to call out

00:14:47,289 --> 00:14:54,189
that this is a description of how your

00:14:51,759 --> 00:14:55,689
server should deploy our services

00:14:54,189 --> 00:14:57,609
frequently have a couple of components a

00:14:55,689 --> 00:14:59,109
web layer worker layer maybe a few

00:14:57,609 --> 00:15:00,879
different smaller components of itself

00:14:59,109 --> 00:15:03,220
that tend to get played all together

00:15:00,879 --> 00:15:05,979
that's a pattern we frequently use as

00:15:03,220 --> 00:15:07,119
you'll see in further pipelines and

00:15:05,979 --> 00:15:09,189
they're actually two different

00:15:07,119 --> 00:15:13,329
applications but the one on the left is

00:15:09,189 --> 00:15:15,309
deploying to ec2 actually it no it's the

00:15:13,329 --> 00:15:18,100
same application two different this is

00:15:15,309 --> 00:15:20,619
what it looks like was deploying dc2 and

00:15:18,100 --> 00:15:24,549
then we moved to deploy to kubernetes

00:15:20,619 --> 00:15:26,259
all we really had to do was change we

00:15:24,549 --> 00:15:30,669
introduced the concept of deploy target

00:15:26,259 --> 00:15:31,720
and basically that's the whole thing one

00:15:30,669 --> 00:15:34,660
small note

00:15:31,720 --> 00:15:36,010
I guess it's sort of is that we we ended

00:15:34,660 --> 00:15:37,870
up since we're deployment using

00:15:36,010 --> 00:15:40,630
committees on top of a table s some of

00:15:37,870 --> 00:15:43,900
the things are maintained we use qim to

00:15:40,630 --> 00:15:47,020
maintain our ability to have service

00:15:43,900 --> 00:15:51,700
scoped my Emeril's and so they pick up

00:15:47,020 --> 00:15:55,000
that you know it doesn't say it on the

00:15:51,700 --> 00:15:57,130
right incidental yeah instance role at

00:15:55,000 --> 00:15:59,830
the top gap grappling service cracking

00:15:57,130 --> 00:16:02,710
service and so that this particular

00:15:59,830 --> 00:16:04,480
service you might imagine it has a

00:16:02,710 --> 00:16:08,410
dedicated I am role and it's gonna

00:16:04,480 --> 00:16:12,340
receiver Bonetti is via QQ I am which if

00:16:08,410 --> 00:16:14,920
you look at this this is the exact same

00:16:12,340 --> 00:16:17,110
thing except that some things were able

00:16:14,920 --> 00:16:20,290
to limit all together on today's target

00:16:17,110 --> 00:16:22,390
like Uncle Billy's we're generating

00:16:20,290 --> 00:16:25,180
about three entries generating load

00:16:22,390 --> 00:16:27,010
balancers we don't have to have them if

00:16:25,180 --> 00:16:28,240
there were these ones on the left the

00:16:27,010 --> 00:16:29,800
some of things like low balance of

00:16:28,240 --> 00:16:33,310
security groups as you know they're not

00:16:29,800 --> 00:16:34,320
created by directly by spinnaker and so

00:16:33,310 --> 00:16:36,190
they would be created by the

00:16:34,320 --> 00:16:38,740
confirmation that's paired with

00:16:36,190 --> 00:16:41,980
application and then specified in the

00:16:38,740 --> 00:16:43,990
application deployment detail that's a

00:16:41,980 --> 00:16:45,640
we were able to get rid of that together

00:16:43,990 --> 00:16:47,530
want to move through at ease because

00:16:45,640 --> 00:16:51,910
communities can create them for the

00:16:47,530 --> 00:16:54,790
application with appropriate work this

00:16:51,910 --> 00:16:55,000
is a just you know you don't really we

00:16:54,790 --> 00:16:57,040
don't

00:16:55,000 --> 00:16:58,120
I said we're not planning on it but so

00:16:57,040 --> 00:16:59,710
it's missed the moment because I don't

00:16:58,120 --> 00:17:02,920
think it's good for the between bit even

00:16:59,710 --> 00:17:04,630
though it does a great job you know

00:17:02,920 --> 00:17:06,339
basically there's a whole bunch of

00:17:04,630 --> 00:17:07,959
JavaScript that builds out all the

00:17:06,339 --> 00:17:10,329
pipeline's necessary all the application

00:17:07,959 --> 00:17:12,010
definitions all of the information on

00:17:10,329 --> 00:17:14,880
what Quick Links you should have for

00:17:12,010 --> 00:17:19,750
instance for a nickname an application

00:17:14,880 --> 00:17:21,579
based on that fairly turfs ml which is

00:17:19,750 --> 00:17:23,709
not intended to be fully expressive the

00:17:21,579 --> 00:17:25,150
Emel is intended to be a really light

00:17:23,709 --> 00:17:28,240
definition of what a service looks like

00:17:25,150 --> 00:17:30,430
a scope like it probably would be a bad

00:17:28,240 --> 00:17:34,270
match for general purpose but didn't

00:17:30,430 --> 00:17:37,150
need to be and so this is the way we

00:17:34,270 --> 00:17:40,410
were able to if a forklift all of our

00:17:37,150 --> 00:17:42,580
applications over from their

00:17:40,410 --> 00:17:44,800
confirmation only deploys where

00:17:42,580 --> 00:17:45,380
similarly the steps for making a new

00:17:44,800 --> 00:17:47,360
service for

00:17:45,380 --> 00:17:50,990
this space is hated in a service called

00:17:47,360 --> 00:17:53,480
Bob and here's the repo and everything

00:17:50,990 --> 00:17:54,860
was sufficiently convention driven that

00:17:53,480 --> 00:17:57,560
everything would work that we were able

00:17:54,860 --> 00:17:59,330
to keep that and actually on a service

00:17:57,560 --> 00:18:01,460
service basis make almost no changes in

00:17:59,330 --> 00:18:04,640
first movement easy to and then further

00:18:01,460 --> 00:18:07,640
forklifting to secure brunette ease and

00:18:04,640 --> 00:18:09,410
so that is quite nice and in fact if we

00:18:07,640 --> 00:18:11,270
were to move to the declarative

00:18:09,410 --> 00:18:12,770
configuration I think we'd we would

00:18:11,270 --> 00:18:14,900
obviously have to look at how do we

00:18:12,770 --> 00:18:19,250
maintain the forklift ability um

00:18:14,900 --> 00:18:22,880
hopefully we can headlights so one of

00:18:19,250 --> 00:18:26,750
the reasons we were one of the things we

00:18:22,880 --> 00:18:30,170
really wanted to do with in with moving

00:18:26,750 --> 00:18:32,750
to spinnaker is make it so that was

00:18:30,170 --> 00:18:34,760
easier to deploy things right this is a

00:18:32,750 --> 00:18:37,880
real blow just a couple days ago at

00:18:34,760 --> 00:18:41,300
seven days ago of a part of our public

00:18:37,880 --> 00:18:43,280
system and one of the things we do we

00:18:41,300 --> 00:18:46,160
since we have a relatively small number

00:18:43,280 --> 00:18:51,110
of customers which is the games that

00:18:46,160 --> 00:18:53,330
work with us and we intentionally so we

00:18:51,110 --> 00:18:55,670
do some degree of quality service

00:18:53,330 --> 00:18:58,670
guarantees for different games at

00:18:55,670 --> 00:19:00,890
different sets of games so that you know

00:18:58,670 --> 00:19:02,960
a huge spike in usage of one has zero

00:19:00,890 --> 00:19:04,400
cannot impact other games since we

00:19:02,960 --> 00:19:07,180
actually deploy what we call Kennedy's

00:19:04,400 --> 00:19:12,770
which are basically semi dedicated

00:19:07,180 --> 00:19:16,460
complete stacks of four four different

00:19:12,770 --> 00:19:17,960
sets of games and so that meant that

00:19:16,460 --> 00:19:20,360
means that when you do deploy you

00:19:17,960 --> 00:19:22,190
actually rather than applying to all of

00:19:20,360 --> 00:19:23,540
our customers deploying to all of our

00:19:22,190 --> 00:19:26,090
about pipelines at once we actually

00:19:23,540 --> 00:19:30,620
rolled out to one another one another

00:19:26,090 --> 00:19:31,730
one another one which possibly because

00:19:30,620 --> 00:19:34,630
we didn't invest enough in Jenkins

00:19:31,730 --> 00:19:37,910
tolling was kind of painful in Jenkins

00:19:34,630 --> 00:19:39,350
its you see this business I mean is you

00:19:37,910 --> 00:19:42,050
can't see the dag lines on this very

00:19:39,350 --> 00:19:45,260
much but I we're very we're very happy

00:19:42,050 --> 00:19:47,990
to be able to finally wire it into the

00:19:45,260 --> 00:19:49,970
one master pipeline and so if you look

00:19:47,990 --> 00:19:52,640
at it I mean this is it's very simple

00:19:49,970 --> 00:19:54,230
nothing special about it except that it

00:19:52,640 --> 00:19:57,820
does all of the work that proves it was

00:19:54,230 --> 00:19:59,149
four steps all-in-one with appropriate

00:19:57,820 --> 00:20:01,849
appropriately lodge

00:19:59,149 --> 00:20:04,879
pauses and so it has actually a human a

00:20:01,849 --> 00:20:07,669
human check after the first affinity is

00:20:04,879 --> 00:20:09,159
employed after complete default which is

00:20:07,669 --> 00:20:11,809
basically all the knobs adoption games

00:20:09,159 --> 00:20:13,549
but then as we roll out further it just

00:20:11,809 --> 00:20:16,369
sort of pushed them out weights the

00:20:13,549 --> 00:20:18,219
subtle and goes and moves on well this

00:20:16,369 --> 00:20:20,690
actual deploying to communities but

00:20:18,219 --> 00:20:23,029
because of the way that this is set up

00:20:20,690 --> 00:20:24,499
we were able to form this as well intact

00:20:23,029 --> 00:20:28,249
for me to de cobre ideas just think

00:20:24,499 --> 00:20:35,839
about two weeks ago three weeks ago and

00:20:28,249 --> 00:20:37,549
so one of our core goals were was to cut

00:20:35,839 --> 00:20:40,219
costs by bin packing all of these

00:20:37,549 --> 00:20:44,029
diverse sort of games specific

00:20:40,219 --> 00:20:46,519
infrastructure gains specific deployed

00:20:44,029 --> 00:20:50,239
copies of services impacting them better

00:20:46,519 --> 00:20:53,389
into shared nodes and communities but

00:20:50,239 --> 00:20:56,419
also to let ourselves have complex

00:20:53,389 --> 00:20:59,570
deploy strategies without going crazy

00:20:56,419 --> 00:21:01,749
which we thought was important other

00:20:59,570 --> 00:21:06,440
notes in the platform side we use a

00:21:01,749 --> 00:21:09,169
existing off broker for we're not using

00:21:06,440 --> 00:21:12,559
fiat probably go which basically keeps

00:21:09,169 --> 00:21:14,029
the degree of isolation of capabilities

00:21:12,559 --> 00:21:18,529
about to where it wants the Jenkins

00:21:14,029 --> 00:21:21,440
which has been fine so far we you know

00:21:18,529 --> 00:21:23,149
we have a login sidecar thing that I'm

00:21:21,440 --> 00:21:26,139
trying to convince the armory people to

00:21:23,149 --> 00:21:28,820
do the work of open sourcing for us that

00:21:26,139 --> 00:21:31,849
flexible logs from spinnaker as well as

00:21:28,820 --> 00:21:36,649
power applications be a logging sidecar

00:21:31,849 --> 00:21:40,429
he says I'm book search come on

00:21:36,649 --> 00:21:42,889
that hopes it'll be open sourcing but um

00:21:40,429 --> 00:21:45,080
it's pretty forward I'm pretty happy

00:21:42,889 --> 00:21:46,700
with it this is the original transition

00:21:45,080 --> 00:21:48,999
took three months

00:21:46,700 --> 00:21:51,080
that was not three months of you know

00:21:48,999 --> 00:21:55,070
people working at twenty hours a day it

00:21:51,080 --> 00:21:57,799
was one person occasionally and we

00:21:55,070 --> 00:21:59,539
really succeeded in making you know it

00:21:57,799 --> 00:22:03,379
easy to deploy and understand

00:21:59,539 --> 00:22:05,479
applications and as well as we succeeded

00:22:03,379 --> 00:22:07,460
in moving cleanliness vinegar and

00:22:05,479 --> 00:22:11,269
actually moving on our own schedule

00:22:07,460 --> 00:22:12,770
because because we were able to with

00:22:11,269 --> 00:22:14,929
just a small change in our

00:22:12,770 --> 00:22:17,750
we'll ponytail application at one other

00:22:14,929 --> 00:22:19,790
we're able to run something and think

00:22:17,750 --> 00:22:22,610
abilities move it off if we determined

00:22:19,790 --> 00:22:25,610
we had made a mistake and so on and so

00:22:22,610 --> 00:22:29,050
on and so we didn't have to it wasn't

00:22:25,610 --> 00:22:31,370
painful to move at our own pace without

00:22:29,050 --> 00:22:32,660
their the only issues that we still

00:22:31,370 --> 00:22:35,120
encounter are primarily around

00:22:32,660 --> 00:22:38,840
kubernetes and spinnaker community

00:22:35,120 --> 00:22:41,780
support were conscious optimistic about

00:22:38,840 --> 00:22:46,400
the changes that are planned for the

00:22:41,780 --> 00:22:48,050
nutrients provider and I think one of

00:22:46,400 --> 00:22:50,929
the things that a lot of people in their

00:22:48,050 --> 00:22:52,400
slides is these is showing how many

00:22:50,929 --> 00:22:55,220
deploys they've had our number of

00:22:52,400 --> 00:22:57,020
deploys is probably not going up I I

00:22:55,220 --> 00:22:59,270
never thought I've never seen that as a

00:22:57,020 --> 00:23:00,410
goal to have more deploys I think people

00:22:59,270 --> 00:23:02,450
are already deploying as much as they

00:23:00,410 --> 00:23:04,910
wanted to at least in our situation they

00:23:02,450 --> 00:23:06,380
were I do want it to be easier to do

00:23:04,910 --> 00:23:08,270
things right and a few requests ability

00:23:06,380 --> 00:23:11,150
for human error and have complex

00:23:08,270 --> 00:23:14,630
strategies where you want them but like

00:23:11,150 --> 00:23:16,429
they're simpler they already were done

00:23:14,630 --> 00:23:18,650
probably as much less appropriate for

00:23:16,429 --> 00:23:20,150
our services some of the services still

00:23:18,650 --> 00:23:23,600
deploy once a year or less because

00:23:20,150 --> 00:23:27,080
they're not being developed soon yes you

00:23:23,600 --> 00:23:32,860
don't define as much but that's the

00:23:27,080 --> 00:23:36,020
platform side games so plenty of time

00:23:32,860 --> 00:23:38,360
and so I already said that what some of

00:23:36,020 --> 00:23:42,470
the motivations were for using spinnaker

00:23:38,360 --> 00:23:46,580
in a game servers we believe that we

00:23:42,470 --> 00:23:48,440
needed a good tool flew green and so but

00:23:46,580 --> 00:23:50,000
here's the gist and expectations these

00:23:48,440 --> 00:23:51,920
slides and the brighter option is

00:23:50,000 --> 00:23:53,360
extracted from the talk Korean about

00:23:51,920 --> 00:23:55,309
three years ago about why we do blue

00:23:53,360 --> 00:23:58,760
green for game development that's a blue

00:23:55,309 --> 00:24:00,710
green looks like but there were a lot of

00:23:58,760 --> 00:24:02,630
things that were different um puzzle

00:24:00,710 --> 00:24:03,890
platformer was the easy one because we

00:24:02,630 --> 00:24:05,510
had 20 services that they all look the

00:24:03,890 --> 00:24:08,420
same and all already had a completely

00:24:05,510 --> 00:24:11,210
standard deploy among them and had a

00:24:08,420 --> 00:24:12,559
very ops hungry and familiar team

00:24:11,210 --> 00:24:14,660
working on it

00:24:12,559 --> 00:24:16,010
and games are very different a lot of

00:24:14,660 --> 00:24:19,130
them are more monolithic

00:24:16,010 --> 00:24:21,740
a lot of them have some of the studios

00:24:19,130 --> 00:24:24,380
have very little experience with AWS or

00:24:21,740 --> 00:24:26,570
not you know not enough much as other

00:24:24,380 --> 00:24:29,690
teams did I'm also

00:24:26,570 --> 00:24:32,210
there have been no game development it's

00:24:29,690 --> 00:24:34,279
very you know there is automatic the

00:24:32,210 --> 00:24:35,720
doing testing there there are automatic

00:24:34,279 --> 00:24:39,139
tests with a lot of manual regression

00:24:35,720 --> 00:24:41,210
testing that that game came to do and

00:24:39,139 --> 00:24:43,909
that's a part of the deployment process

00:24:41,210 --> 00:24:46,250
is understanding the impact on deployed

00:24:43,909 --> 00:24:49,820
games games are very stateful a lot of

00:24:46,250 --> 00:24:51,080
state is on it's hard to is easy to piss

00:24:49,820 --> 00:24:56,059
people off and easy to break things

00:24:51,080 --> 00:24:58,909
apart effects and so this is also the

00:24:56,059 --> 00:25:00,889
area where you know we'd probably you

00:24:58,909 --> 00:25:02,659
know in terms of like where we end we

00:25:00,889 --> 00:25:06,110
end up working with with armory on this

00:25:02,659 --> 00:25:09,169
and it was the area where we we knew

00:25:06,110 --> 00:25:11,480
that we weren't like my team certainly

00:25:09,169 --> 00:25:13,879
was not going to providing spinnaker

00:25:11,480 --> 00:25:16,100
guidance on a day-in day-out basis to

00:25:13,879 --> 00:25:16,759
game teams like the game studios we

00:25:16,100 --> 00:25:18,710
couldn't do that

00:25:16,759 --> 00:25:21,559
we do have ourselves but not for a

00:25:18,710 --> 00:25:24,889
four-game tears we have just not

00:25:21,559 --> 00:25:29,000
thinking about the capacity for that but

00:25:24,889 --> 00:25:30,980
as I said you know we did uh we did have

00:25:29,000 --> 00:25:33,500
standards and some games we're using

00:25:30,980 --> 00:25:35,470
them this new Packer the the commander

00:25:33,500 --> 00:25:38,629
approach I described already using

00:25:35,470 --> 00:25:41,269
Packer to make Ami's or our own thing we

00:25:38,629 --> 00:25:44,899
built wrote my Conway's before that and

00:25:41,269 --> 00:25:49,340
I plug formation and some I thought

00:25:44,899 --> 00:25:53,299
around that to give ourselves the stage

00:25:49,340 --> 00:25:54,710
scale switch robot patterns that said

00:25:53,299 --> 00:25:55,220
well we will to wrap that in Jenkins

00:25:54,710 --> 00:25:57,590
steps

00:25:55,220 --> 00:25:58,639
I mean basically this is in every and

00:25:57,590 --> 00:26:00,470
all the teams that we're using these

00:25:58,639 --> 00:26:02,809
tools this is what slack would look like

00:26:00,470 --> 00:26:05,120
but like okay finally got a baked okay

00:26:02,809 --> 00:26:08,360
now I'm gonna stage it now I'm gonna

00:26:05,120 --> 00:26:09,710
switch now oh I just looked and someone

00:26:08,360 --> 00:26:13,370
forgot to scale down the green group

00:26:09,710 --> 00:26:14,629
last time and like the steps we probably

00:26:13,370 --> 00:26:16,190
could have done a better job there

00:26:14,629 --> 00:26:18,860
Jenkins trolling do music I check its

00:26:16,190 --> 00:26:21,679
pipeline around them what we didn't one

00:26:18,860 --> 00:26:23,240
of our studios actually had the great

00:26:21,679 --> 00:26:24,710
idea of numbering steps and Jenkins

00:26:23,240 --> 00:26:27,409
because through so they weren't numbered

00:26:24,710 --> 00:26:30,139
and people do I do the stage first scale

00:26:27,409 --> 00:26:32,690
first I switch and it's you know the

00:26:30,139 --> 00:26:34,279
steps were theoretically simple but you

00:26:32,690 --> 00:26:36,139
know they were steps that had no fault

00:26:34,279 --> 00:26:39,260
behind them therefore you shouldn't make

00:26:36,139 --> 00:26:40,160
no think about them and other studios

00:26:39,260 --> 00:26:43,130
also have other

00:26:40,160 --> 00:26:48,440
solutions are before our internal studio

00:26:43,130 --> 00:26:51,560
moved to move to the commander we were

00:26:48,440 --> 00:26:55,220
using rake and robocopy it's a Windows

00:26:51,560 --> 00:26:58,880
service to deploy on how was running

00:26:55,220 --> 00:27:00,410
instance it's that was fun but others

00:26:58,880 --> 00:27:05,240
you know we have teams using a variety

00:27:00,410 --> 00:27:07,940
of tools we ended up going with four

00:27:05,240 --> 00:27:12,230
game servers it's basically this this is

00:27:07,940 --> 00:27:16,580
in preview preview looks like and we're

00:27:12,230 --> 00:27:18,710
there there's a set of additional tests

00:27:16,580 --> 00:27:20,660
running that they run on a live on sort

00:27:18,710 --> 00:27:23,390
of a running cluster I'm in addition to

00:27:20,660 --> 00:27:25,070
the ones that run as part of a set of

00:27:23,390 --> 00:27:27,050
integration tests that run prior to

00:27:25,070 --> 00:27:29,690
moving to the preview environment so

00:27:27,050 --> 00:27:33,830
there's a pattern like this which has

00:27:29,690 --> 00:27:36,920
worked pretty well for the team in for

00:27:33,830 --> 00:27:39,020
the several of the games and I wanted to

00:27:36,920 --> 00:27:42,800
show you production a production deploy

00:27:39,020 --> 00:27:44,570
and we're using right now and so we're

00:27:42,800 --> 00:27:48,590
not using automated carry analysis in

00:27:44,570 --> 00:27:50,420
production yet but we've been doing

00:27:48,590 --> 00:27:53,120
canaries for a long time a couple years

00:27:50,420 --> 00:27:54,800
now in term in game development and it

00:27:53,120 --> 00:27:58,120
really just usually my spinning up a

00:27:54,800 --> 00:28:00,530
server in the fleet or maybe a couple of

00:27:58,120 --> 00:28:03,200
hundred serve you spin up a couple and

00:28:00,530 --> 00:28:06,190
we give ourselves dedicated dashboard or

00:28:03,200 --> 00:28:08,930
log aggregation for those any other one

00:28:06,190 --> 00:28:10,670
you want to run and frequently be

00:28:08,930 --> 00:28:13,610
overnight and so this is canary and we

00:28:10,670 --> 00:28:17,090
cut that pattern and that's that's a

00:28:13,610 --> 00:28:22,640
it's a manual canary and it's

00:28:17,090 --> 00:28:25,430
particularly well because of a number of

00:28:22,640 --> 00:28:28,580
things one of them is the is that some

00:28:25,430 --> 00:28:31,250
of the ways that the game servers are

00:28:28,580 --> 00:28:34,880
used can have can be very time dependent

00:28:31,250 --> 00:28:36,470
we have low 24/7 but there might be it

00:28:34,880 --> 00:28:37,850
seems like live events like tournament

00:28:36,470 --> 00:28:40,160
starting and ending at different times

00:28:37,850 --> 00:28:42,590
and it you you need you want to have

00:28:40,160 --> 00:28:44,450
touched most of you want your

00:28:42,590 --> 00:28:48,320
application of really run as discussed

00:28:44,450 --> 00:28:50,380
in the tunnel seriously but also there's

00:28:48,320 --> 00:28:52,419
a

00:28:50,380 --> 00:28:53,890
the other part that we care about is

00:28:52,419 --> 00:28:57,130
understanding whether it was any impact

00:28:53,890 --> 00:28:58,840
on clients and what we don't have a way

00:28:57,130 --> 00:29:01,720
of identifying which clients had request

00:28:58,840 --> 00:29:03,010
served by the canary you know we look

00:29:01,720 --> 00:29:04,360
very closely at any potential

00:29:03,010 --> 00:29:06,039
regressions and the clients though can't

00:29:04,360 --> 00:29:07,360
even find that time period and it

00:29:06,039 --> 00:29:10,120
closely the logs emitted by the

00:29:07,360 --> 00:29:12,520
instances that are being canary the

00:29:10,120 --> 00:29:15,280
pattern beyond the potentially nineteen

00:29:12,520 --> 00:29:18,429
our canary is basically a fairly

00:29:15,280 --> 00:29:20,350
standard Bluegreen rollout pipeline but

00:29:18,429 --> 00:29:22,210
you know it's fully stated here for

00:29:20,350 --> 00:29:28,870
those of you who aren't actively using

00:29:22,210 --> 00:29:34,059
the green roll out some but you know for

00:29:28,870 --> 00:29:36,850
us there are still challenges in terms

00:29:34,059 --> 00:29:40,809
of how rolling up to games videos the

00:29:36,850 --> 00:29:42,520
biggest ones are that there are so many

00:29:40,809 --> 00:29:44,530
assumptions like some of the things you

00:29:42,520 --> 00:29:46,630
must have already done to be able to

00:29:44,530 --> 00:29:49,390
even look at spinnaker out of luck as a

00:29:46,630 --> 00:29:51,850
system for delivery I mean you you have

00:29:49,390 --> 00:29:54,159
to be you have to have something that

00:29:51,850 --> 00:29:58,750
can be delivered and with these

00:29:54,159 --> 00:30:00,820
immutable images you have to you have to

00:29:58,750 --> 00:30:04,210
value that um you have to see the value

00:30:00,820 --> 00:30:08,169
in that text to be value in that and the

00:30:04,210 --> 00:30:11,230
development volume of volume I think I

00:30:08,169 --> 00:30:14,049
think I mean velocity velocity is the

00:30:11,230 --> 00:30:15,520
word development velocity is we all are

00:30:14,049 --> 00:30:17,559
sensitive to particularly in these dev

00:30:15,520 --> 00:30:20,730
environments we rolled up pipeline like

00:30:17,559 --> 00:30:22,690
this that hurts that hurts because you

00:30:20,730 --> 00:30:24,640
frequently it's a lot of client server

00:30:22,690 --> 00:30:27,159
development and so I want to get my

00:30:24,640 --> 00:30:29,080
change out like because the people

00:30:27,159 --> 00:30:30,280
working on the game client we realized I

00:30:29,080 --> 00:30:35,380
just have a quick rush I need a quick

00:30:30,280 --> 00:30:37,240
fix and so we still need to find better

00:30:35,380 --> 00:30:39,640
ways to maintain develop their own

00:30:37,240 --> 00:30:41,890
velocity so that people can get fixes

00:30:39,640 --> 00:30:47,940
out so they're not blocking client

00:30:41,890 --> 00:30:51,190
developers and again though it's not

00:30:47,940 --> 00:30:53,020
what we were hoping to get through this

00:30:51,190 --> 00:30:55,809
vinegar vlog is actually a largely

00:30:53,020 --> 00:30:58,240
deployed quality and so we're canary

00:30:55,809 --> 00:30:59,799
which potential automation or on canary

00:30:58,240 --> 00:31:03,220
is probably the most exciting thing that

00:30:59,799 --> 00:31:03,710
we hope to be the motivation for a

00:31:03,220 --> 00:31:05,750
broader

00:31:03,710 --> 00:31:07,520
option a spinnaker cross thrust estudios

00:31:05,750 --> 00:31:09,350
despite the cost of adopting spinnaker

00:31:07,520 --> 00:31:12,850
which is very high if you haven't done

00:31:09,350 --> 00:31:15,140
your if you're currently using opsworks

00:31:12,850 --> 00:31:20,750
there's a lot you got to do before you

00:31:15,140 --> 00:31:22,669
use these photographs and and so having

00:31:20,750 --> 00:31:23,990
there be a real value through an actual

00:31:22,669 --> 00:31:28,840
canary that can work for the game James

00:31:23,990 --> 00:31:32,840
is something that we are bullish about

00:31:28,840 --> 00:31:34,399
because the velocity again it's not like

00:31:32,840 --> 00:31:36,500
we don't have a way of getting code on

00:31:34,399 --> 00:31:38,270
Cervarix without spinnaker it's a

00:31:36,500 --> 00:31:41,289
question of like oh do we are we getting

00:31:38,270 --> 00:31:44,390
a better way of getting Kevin serviced

00:31:41,289 --> 00:31:48,620
as we move to having more studios using

00:31:44,390 --> 00:31:50,210
this one of the questions we so far

00:31:48,620 --> 00:31:51,649
we're not using spinnaker in a

00:31:50,210 --> 00:31:52,850
multi-tenant fashion we're using

00:31:51,649 --> 00:31:55,580
different spinnaker deployments for

00:31:52,850 --> 00:31:57,350
different studios part of that is

00:31:55,580 --> 00:31:59,270
because if we had a potential I was on

00:31:57,350 --> 00:32:00,649
their property that the centralized team

00:31:59,270 --> 00:32:05,210
responsible for making sure it's good

00:32:00,649 --> 00:32:07,220
and healthy that said you know we're

00:32:05,210 --> 00:32:09,679
very there's something very tempting

00:32:07,220 --> 00:32:12,380
around saying hey all of the games do

00:32:09,679 --> 00:32:14,000
you like here's the way you deploy you

00:32:12,380 --> 00:32:15,679
fill in you do exactly what spinnaker

00:32:14,000 --> 00:32:17,809
needs for you and it'll be all deployed

00:32:15,679 --> 00:32:19,669
to the centralized spinnaker that will

00:32:17,809 --> 00:32:22,279
give it would give us better visibility

00:32:19,669 --> 00:32:27,049
into the approaches each studio takes

00:32:22,279 --> 00:32:31,970
and the easier way to to do that it's

00:32:27,049 --> 00:32:33,260
difficult though because sometimes it's

00:32:31,970 --> 00:32:35,870
difficult because it's not central teams

00:32:33,260 --> 00:32:40,070
take that on in our company and we're

00:32:35,870 --> 00:32:42,500
not sure we want one and it's not I mean

00:32:40,070 --> 00:32:44,299
spinnaker can be multi-tenant but I

00:32:42,500 --> 00:32:46,159
don't know if anyone's using it in ways

00:32:44,299 --> 00:32:49,370
where they don't want the tenants to

00:32:46,159 --> 00:32:53,270
know about each other at all maybe some

00:32:49,370 --> 00:32:55,789
people are so let me tell me we're also

00:32:53,270 --> 00:32:57,950
conscious of the fact that you know a

00:32:55,789 --> 00:32:59,299
lot of the most interesting deployment

00:32:57,950 --> 00:33:04,010
questions actually around deploying

00:32:59,299 --> 00:33:06,860
client code and so there we already take

00:33:04,010 --> 00:33:08,809
a very deliberate approach to using cool

00:33:06,860 --> 00:33:12,139
play has a concept of a staged rollout

00:33:08,809 --> 00:33:13,680
for for apks and so our mobile client

00:33:12,139 --> 00:33:16,020
actually

00:33:13,680 --> 00:33:18,600
we make very explicit decisions around

00:33:16,020 --> 00:33:20,910
when and how to roll it out to greater

00:33:18,600 --> 00:33:24,600
fractions of the user base that is

00:33:20,910 --> 00:33:26,520
something that we that's philosophically

00:33:24,600 --> 00:33:30,020
aligned with spinnaker but we haven't

00:33:26,520 --> 00:33:32,070
actually crossed those in any way yeah

00:33:30,020 --> 00:33:34,290
that's our story I don't have a

00:33:32,070 --> 00:33:37,380
questions or thank you slide but you can

00:33:34,290 --> 00:33:58,530
pretend there is one and if there's any

00:33:37,380 --> 00:34:05,870
questions I'd love to answer them we

00:33:58,530 --> 00:34:09,210
could you know I think that the value

00:34:05,870 --> 00:34:11,540
would probably the problem for you lady

00:34:09,210 --> 00:34:15,570
is you don't have good visibility into

00:34:11,540 --> 00:34:18,480
almost canoe it might make sense it

00:34:15,570 --> 00:34:21,590
might make sense it would probably only

00:34:18,480 --> 00:34:24,810
really make sense if we were

00:34:21,590 --> 00:34:29,730
sufficiently integrating client Health

00:34:24,810 --> 00:34:32,130
metrics into tools that also work at the

00:34:29,730 --> 00:34:34,260
integrated spinnaker because right now I

00:34:32,130 --> 00:34:38,130
mean Google's actively trying to make

00:34:34,260 --> 00:34:39,960
that client rollout system better and I

00:34:38,130 --> 00:34:43,080
think has put a lot into it in the past

00:34:39,960 --> 00:34:44,790
year or so and we don't necessarily want

00:34:43,080 --> 00:34:46,140
to reinvent the wheel that is made may

00:34:44,790 --> 00:34:48,030
be the Google team working at spinnaker

00:34:46,140 --> 00:34:51,590
can you know connect those dots so it

00:34:48,030 --> 00:34:53,850
seems unlikely although you know it's

00:34:51,590 --> 00:34:57,180
there might be something there like

00:34:53,850 --> 00:35:00,420
there was something there we don't know

00:34:57,180 --> 00:35:02,750
yet there are other things get deployed

00:35:00,420 --> 00:35:05,280
as well client assets is another thing

00:35:02,750 --> 00:35:07,920
so there's a lot of downloadable assets

00:35:05,280 --> 00:35:10,410
that we do have direct control over that

00:35:07,920 --> 00:35:12,720
right now they don't particularly don't

00:35:10,410 --> 00:35:15,420
have much of a flow strategy they just

00:35:12,720 --> 00:35:18,510
get pushed up front

00:35:15,420 --> 00:35:18,510
[Music]

00:35:24,180 --> 00:35:32,819
I know that been mentioned on the

00:35:27,329 --> 00:35:36,029
seizures reason stuff my a since you

00:35:32,819 --> 00:35:38,460
right now the way we do ask asset

00:35:36,029 --> 00:35:41,039
deploys is that the important parts

00:35:38,460 --> 00:35:42,720
actually configuration change not FAFSA

00:35:41,039 --> 00:35:45,480
to play itself classes are user content

00:35:42,720 --> 00:35:48,480
to dress trucks and so they would never

00:35:45,480 --> 00:35:49,529
there never overridden and so the

00:35:48,480 --> 00:35:51,000
important thing is actually pointing

00:35:49,529 --> 00:35:53,460
users to the asset not actually

00:35:51,000 --> 00:35:54,809
deploying the asset CDN itself and so

00:35:53,460 --> 00:35:57,569
it's really the configuration rollout

00:35:54,809 --> 00:36:01,200
that's a more interest um we are

00:35:57,569 --> 00:36:03,630
interested in um how spinnaker would

00:36:01,200 --> 00:36:05,970
make it easier to have better auditing

00:36:03,630 --> 00:36:09,109
and canary and understand about your

00:36:05,970 --> 00:36:11,130
configuration changes but we haven't

00:36:09,109 --> 00:36:13,049
we're trying to work on the code

00:36:11,130 --> 00:36:34,230
deployment first but not everything

00:36:13,049 --> 00:36:36,329
first keep - I am it's pretty widely

00:36:34,230 --> 00:36:41,450
used I think among people use increment

00:36:36,329 --> 00:36:44,180
remains on a device um I think we have

00:36:41,450 --> 00:36:47,010
the problem only issue with it is that

00:36:44,180 --> 00:36:49,770
it is somewhat less stable in our

00:36:47,010 --> 00:36:53,640
experience than the ECG mandated service

00:36:49,770 --> 00:36:56,250
that you get an AWS and so and losing I

00:36:53,640 --> 00:37:01,520
am in the middle of service running does

00:36:56,250 --> 00:37:01,520
not make services happy not surprisingly

00:37:01,730 --> 00:37:15,869
it is payments that I got my noun

00:37:13,890 --> 00:37:19,680
I think I remember all the grantees

00:37:15,869 --> 00:37:27,180
nouns is really hard okay but yeah Damon

00:37:19,680 --> 00:37:29,670
said it runs on all the nodes okay in

00:37:27,180 --> 00:37:31,529
some ways like the there are like two

00:37:29,670 --> 00:37:33,420
stories the transformation here the big

00:37:31,529 --> 00:37:35,760
one for publishing team where the

00:37:33,420 --> 00:37:37,450
spinnaker was sort of a nice like icing

00:37:35,760 --> 00:37:40,450
on the cake

00:37:37,450 --> 00:37:42,880
communities that was enabled via Buda

00:37:40,450 --> 00:37:44,200
spinnaker um would been a harder switch

00:37:42,880 --> 00:37:46,359
without spinnaker in the mix because it

00:37:44,200 --> 00:37:49,980
would have been meant to very different

00:37:46,359 --> 00:37:54,249
worlds we got Street as one that's one

00:37:49,980 --> 00:37:55,210
that was a very different transformation

00:37:54,249 --> 00:38:06,549
than what we're doing with the game

00:37:55,210 --> 00:38:10,359
James we I mean not not deeply stateful

00:38:06,549 --> 00:38:12,190
and so the about collection pipeline

00:38:10,359 --> 00:38:14,259
it's a collection pipeline it does have

00:38:12,190 --> 00:38:17,079
its it's all straight across largely

00:38:14,259 --> 00:38:18,700
stream processors reading from Kinesis

00:38:17,079 --> 00:38:24,329
streams are indignation string by that's

00:38:18,700 --> 00:38:27,160
three I'm in memory work but they

00:38:24,329 --> 00:38:29,190
nothing that we can't handle with with a

00:38:27,160 --> 00:38:35,259
staple shut down with a clean shot guns

00:38:29,190 --> 00:38:38,140
and they're not and so we we do use you

00:38:35,259 --> 00:38:40,900
know that same shutdowns first one ec2

00:38:38,140 --> 00:38:44,529
and then turbine Eddie's to make it

00:38:40,900 --> 00:38:46,749
easier rollout so the things I point out

00:38:44,529 --> 00:38:48,670
their work and flush there and memory

00:38:46,749 --> 00:38:53,200
things have memory and then shut down on

00:38:48,670 --> 00:38:55,420
their own timeline but nothing very

00:38:53,200 --> 00:38:57,779
stateful spinnaker itself it's kind of

00:38:55,420 --> 00:38:57,779
stateful

00:38:57,849 --> 00:39:04,119
yeah although we take an aggressive how

00:39:01,720 --> 00:39:05,910
other people do it strategy without a

00:39:04,119 --> 00:39:11,099
dedicated infrastructure operations Jim

00:39:05,910 --> 00:39:14,890
at all our reticence I'll read slabs our

00:39:11,099 --> 00:39:17,170
state is all dynamodb or RTS or

00:39:14,890 --> 00:39:21,249
something depending on the depending on

00:39:17,170 --> 00:39:24,099
what it is except for that clutter

00:39:21,249 --> 00:39:28,359
Buster Oh big notes but we don't deploy

00:39:24,099 --> 00:39:31,480
down with Senate kind of moment we

00:39:28,359 --> 00:39:35,410
probably won't we but I I don't think we

00:39:31,480 --> 00:39:37,989
saw one person from Optimizely was

00:39:35,410 --> 00:39:39,789
talking about there they don't with

00:39:37,989 --> 00:39:41,249
spinnaker but they are doing some more

00:39:39,789 --> 00:39:43,960
aggressive things around

00:39:41,249 --> 00:39:46,749
Cloudera clustered deployment strategies

00:39:43,960 --> 00:39:48,270
then I expected to hear mutable

00:39:46,749 --> 00:39:50,790
instances not vote

00:39:48,270 --> 00:39:53,160
come see but data holla but using

00:39:50,790 --> 00:40:00,500
basically I'll be baking and not sort of

00:39:53,160 --> 00:40:02,580
the foot not yeah it sounded pretty good

00:40:00,500 --> 00:40:04,170
there's a person here from Optimizely

00:40:02,580 --> 00:40:06,080
who talked about that but obviously down

00:40:04,170 --> 00:40:08,670
in this room uh-huh

00:40:06,080 --> 00:40:12,180
not another wasn't talk he talked about

00:40:08,670 --> 00:40:19,160
it sitting next to me we talked about it

00:40:12,180 --> 00:40:19,160
I have shared our private conversation

00:40:21,890 --> 00:40:28,700
great well it looks like no more

00:40:24,810 --> 00:40:28,700

YouTube URL: https://www.youtube.com/watch?v=hvoSMnkvReU


