Title: Panel: Operating Spinnaker
Publication date: 2017-09-22
Playlist: Spinnaker Summit 2017
Description: 
	Panelists include engineers from Netflix, Capital One, Under Armour, Armory, Target, and Schibsted. Moderated by Andy from Netflix and Steven from Google.

From Spinnaker Summit 2017
Captions: 
	00:00:00,000 --> 00:00:04,140
of the spinnaker summit glad you all

00:00:02,010 --> 00:00:07,649
could make it back I thought yesterday

00:00:04,140 --> 00:00:13,200
was a phenomenal day I'm looking forward

00:00:07,649 --> 00:00:16,020
to another phenomenal day real quick I

00:00:13,200 --> 00:00:18,570
heard some some feedback through kind of

00:00:16,020 --> 00:00:19,859
the grapevine grapevine I should say and

00:00:18,570 --> 00:00:21,210
so before we start the panel I just want

00:00:19,859 --> 00:00:23,490
to address one thing that kind of came

00:00:21,210 --> 00:00:25,680
up and your discussion is why the heck

00:00:23,490 --> 00:00:27,960
does Netflix open source spinnaker and

00:00:25,680 --> 00:00:29,429
it's probably the same reasons why every

00:00:27,960 --> 00:00:33,930
other company here open sources things

00:00:29,429 --> 00:00:35,910
it's ultimately to to effect recruiting

00:00:33,930 --> 00:00:37,590
so our number one goal with with

00:00:35,910 --> 00:00:38,879
spinnaker is we want to be able to hire

00:00:37,590 --> 00:00:41,010
people that want to work on spinnaker

00:00:38,879 --> 00:00:43,020
and our familiar with spinnaker our

00:00:41,010 --> 00:00:44,969
second goal is for industry validation

00:00:43,020 --> 00:00:46,500
if we had open source spinnaker and

00:00:44,969 --> 00:00:48,000
everyone said that's the stupidest idea

00:00:46,500 --> 00:00:50,070
I've seen then we'd know we were

00:00:48,000 --> 00:00:51,539
definitely doing something wrong a third

00:00:50,070 --> 00:00:53,850
one and this is why we're having the

00:00:51,539 --> 00:00:55,949
conference is innovation we have seen

00:00:53,850 --> 00:00:57,840
now that people when they innovate on

00:00:55,949 --> 00:01:01,079
the spinner platform Netflix gets to

00:00:57,840 --> 00:01:04,439
take advantage of it so that's why we're

00:01:01,079 --> 00:01:05,700
interested in you all contributing to

00:01:04,439 --> 00:01:07,650
spinnaker even if we don't end up using

00:01:05,700 --> 00:01:09,060
that feature someone else in the

00:01:07,650 --> 00:01:10,530
community will use it it's a win-win for

00:01:09,060 --> 00:01:12,720
everyone in the community whether it's

00:01:10,530 --> 00:01:14,159
you file a bug you could you know you

00:01:12,720 --> 00:01:16,590
file some or you create some

00:01:14,159 --> 00:01:17,790
documentation or you ask us you know how

00:01:16,590 --> 00:01:19,530
come you did this is there a better way

00:01:17,790 --> 00:01:21,450
to do it all that is a win for the

00:01:19,530 --> 00:01:25,350
community so if you've had any doubts of

00:01:21,450 --> 00:01:27,420
Wiese why netflix is kind of behind

00:01:25,350 --> 00:01:29,159
other companies using spinnaker it's

00:01:27,420 --> 00:01:31,740
because selfishly we'll get something

00:01:29,159 --> 00:01:33,900
out of it whether it be again

00:01:31,740 --> 00:01:35,970
innovations or just better documentation

00:01:33,900 --> 00:01:37,170
or whatever what have you and vice versa

00:01:35,970 --> 00:01:38,700
when we innovate on spinnaker we're

00:01:37,170 --> 00:01:40,860
hopefully you know hoping that you can

00:01:38,700 --> 00:01:42,810
take advantage of that as well so happy

00:01:40,860 --> 00:01:44,970
to answer any more questions or concerns

00:01:42,810 --> 00:01:48,210
you have about kind of open source but

00:01:44,970 --> 00:01:51,000
Netflix suffice to say has no plans to

00:01:48,210 --> 00:01:52,619
ever license spinnaker or try to make

00:01:51,000 --> 00:01:55,740
money off spinnaker if you don't know

00:01:52,619 --> 00:01:57,240
this Netflix is a Content company we are

00:01:55,740 --> 00:01:59,159
very interested in making sure you watch

00:01:57,240 --> 00:02:02,250
our content and have zero interest in

00:01:59,159 --> 00:02:03,750
licensing software so with that without

00:02:02,250 --> 00:02:05,850
further ado let's get started with the

00:02:03,750 --> 00:02:07,710
operating spinnaker panel and I will

00:02:05,850 --> 00:02:09,000
pass out some microphones and why don't

00:02:07,710 --> 00:02:13,670
we go down the line and introduce

00:02:09,000 --> 00:02:13,670
ourselves and the

00:02:14,140 --> 00:02:17,870
that's a big one I'll get some more but

00:02:16,880 --> 00:02:22,610
let's go down the line introduce

00:02:17,870 --> 00:02:34,550
ourselves and maybe mention something

00:02:22,610 --> 00:02:37,220
about operating spinnaker let's start hi

00:02:34,550 --> 00:02:39,860
I'm Rob Fletcher I work on the delivery

00:02:37,220 --> 00:02:41,600
engineering team here at Netflix I've

00:02:39,860 --> 00:02:43,460
been working on spinnaker for coming on

00:02:41,600 --> 00:02:47,660
for three years now actually over three

00:02:43,460 --> 00:02:49,190
years principally I was involved in

00:02:47,660 --> 00:02:52,280
writing the orchestration engine Orca

00:02:49,190 --> 00:02:55,250
and recently rewriting it to be a whole

00:02:52,280 --> 00:02:59,410
lot more easy to operate so that's

00:02:55,250 --> 00:03:01,190
pretty relevant to today's topic I think

00:02:59,410 --> 00:03:04,970
good morning everyone

00:03:01,190 --> 00:03:08,390
a mystery I'm a technology director in

00:03:04,970 --> 00:03:11,540
digital space in Capital One we started

00:03:08,390 --> 00:03:14,180
using spinnaker on two years back we

00:03:11,540 --> 00:03:16,700
started our journey with spinnaker no

00:03:14,180 --> 00:03:21,620
obviously now they're baack space to

00:03:16,700 --> 00:03:23,900
make sure our delivery pipeline hi I'm

00:03:21,620 --> 00:03:25,970
Andrew with armory and our company helps

00:03:23,900 --> 00:03:29,000
many many other companies operate

00:03:25,970 --> 00:03:34,160
spinnaker and be successful on their CD

00:03:29,000 --> 00:03:36,520
journey I'm Rob Zener I work on the

00:03:34,160 --> 00:03:39,860
delivery engineering team at Netflix

00:03:36,520 --> 00:03:42,620
I've been working out for about a year

00:03:39,860 --> 00:03:45,140
now and I'm pretty passionate about

00:03:42,620 --> 00:03:48,560
automation and so I've kind of got my

00:03:45,140 --> 00:03:51,740
hands and all sorts of operations stuff

00:03:48,560 --> 00:03:53,660
on the team here

00:03:51,740 --> 00:03:56,720
I'm Doug Campbell I'm an engineer at

00:03:53,660 --> 00:03:59,930
gogo and we've been using spinnaker

00:03:56,720 --> 00:04:01,430
since early 2016 and I handle a lot of

00:03:59,930 --> 00:04:05,320
the deployment and updating and

00:04:01,430 --> 00:04:05,320
configuration around our spinnaker

00:04:06,100 --> 00:04:10,100
morning

00:04:07,520 --> 00:04:12,260
I'm Kevin Cheung I manage the DevOps and

00:04:10,100 --> 00:04:14,930
reliability engineering teams for Under

00:04:12,260 --> 00:04:16,880
Armour at ecommerce I've been using

00:04:14,930 --> 00:04:20,840
spinnaker now for about a year with

00:04:16,880 --> 00:04:22,280
kubernetes oh I'm good from shipstead

00:04:20,840 --> 00:04:26,389
we've been running spinnaker in

00:04:22,280 --> 00:04:29,120
production I made one on the hop year

00:04:26,389 --> 00:04:32,479
I'm entering a target we've been running

00:04:29,120 --> 00:04:34,009
spinnaker production since May of 2016 I

00:04:32,479 --> 00:04:34,610
think we started looking at it in the

00:04:34,009 --> 00:04:37,279
March

00:04:34,610 --> 00:04:42,080
I think we've now used four different

00:04:37,279 --> 00:04:44,120
cloud providers with it so why don't we

00:04:42,080 --> 00:04:45,680
start with what is you know what what's

00:04:44,120 --> 00:04:47,270
the single most important thing about

00:04:45,680 --> 00:04:48,650
running spinnaker in production for the

00:04:47,270 --> 00:04:51,020
people out here that are let's say just

00:04:48,650 --> 00:04:52,759
getting started or are running it in

00:04:51,020 --> 00:04:55,009
production or wondering kind of what

00:04:52,759 --> 00:04:57,219
what's what's your biggest lesson

00:04:55,009 --> 00:04:57,219
learned

00:04:59,389 --> 00:05:13,699
don't lose pipeline history it actually

00:05:01,550 --> 00:05:15,139
matters a lot of people complain I don't

00:05:13,699 --> 00:05:17,330
know every once in a while we get lots

00:05:15,139 --> 00:05:21,229
of white label errors and they're pretty

00:05:17,330 --> 00:05:22,669
cryptic and I don't know it's figuring

00:05:21,229 --> 00:05:25,550
those things out and making sure that

00:05:22,669 --> 00:05:27,560
the users never fail line those errors

00:05:25,550 --> 00:05:35,599
is pretty cool but you've just got to do

00:05:27,560 --> 00:05:38,120
a lot of testing I would say actually

00:05:35,599 --> 00:05:41,659
having monitoring set up for the with

00:05:38,120 --> 00:05:45,819
the metrics that spinnaker emits as well

00:05:41,659 --> 00:05:45,819
as aggregation for all your services

00:05:45,849 --> 00:05:54,770
those have great indicators of status of

00:05:50,659 --> 00:06:02,750
your system and you can jump ahead of

00:05:54,770 --> 00:06:06,919
any problems that might be coming up one

00:06:02,750 --> 00:06:10,789
area is resiliency that's where we are

00:06:06,919 --> 00:06:12,439
we learned our lesson especially when

00:06:10,789 --> 00:06:18,580
you're dehydrating we have a policy of

00:06:12,439 --> 00:06:22,219
rehydrate so our country is where we are

00:06:18,580 --> 00:06:25,430
thinking we are upgrading it now the

00:06:22,219 --> 00:06:29,940
other thing is I concur with what was

00:06:25,430 --> 00:06:34,410
mentioned definitely monitoring space

00:06:29,940 --> 00:06:37,200
I think that the biggest problem we see

00:06:34,410 --> 00:06:40,920
mentioned in a lot but uh on AWS

00:06:37,200 --> 00:06:44,580
rate-limiting luckily there's a solution

00:06:40,920 --> 00:06:46,290
for now it works pretty well but uh the

00:06:44,580 --> 00:06:48,480
side effect what is that so anything

00:06:46,290 --> 00:06:51,540
that is a service limits so you can have

00:06:48,480 --> 00:06:54,180
spinnaker rate itself before it

00:06:51,540 --> 00:06:56,760
interacts with AWS API but the side

00:06:54,180 --> 00:06:59,850
effect is if you have a lot of

00:06:56,760 --> 00:07:03,290
infrastructure a delay in your pipelines

00:06:59,850 --> 00:07:06,510
so if you you know say you have fifteen

00:07:03,290 --> 00:07:09,150
fifteen hundred aSG's and you have a

00:07:06,510 --> 00:07:10,920
rate limit to per second or something

00:07:09,150 --> 00:07:13,590
that's gonna take a very long time for

00:07:10,920 --> 00:07:19,470
refresh and that's gonna happen you know

00:07:13,590 --> 00:07:21,090
every 30 seconds takes a long time so

00:07:19,470 --> 00:07:23,550
sometimes a pipeline that you think

00:07:21,090 --> 00:07:25,290
should take two or three minutes to

00:07:23,550 --> 00:07:29,640
deploy you're looking at 15 minutes or

00:07:25,290 --> 00:07:33,330
so so managing that has been the biggest

00:07:29,640 --> 00:07:34,140
challenge I think I think for us one of

00:07:33,330 --> 00:07:35,910
the most important things was

00:07:34,140 --> 00:07:37,410
understanding what each component is

00:07:35,910 --> 00:07:39,870
doing what's writing what to write us

00:07:37,410 --> 00:07:42,000
who talks to who what each config

00:07:39,870 --> 00:07:43,740
setting is doing once we started

00:07:42,000 --> 00:07:45,330
understanding things like like Orca

00:07:43,740 --> 00:07:47,250
which were black boxes for a while for

00:07:45,330 --> 00:07:51,900
us we could provide a much more stable

00:07:47,250 --> 00:07:54,270
platform for our developers I think for

00:07:51,900 --> 00:07:56,790
us we actually benefited in the sense

00:07:54,270 --> 00:07:58,890
that the implication of spinnaker was

00:07:56,790 --> 00:08:00,690
really kind of greenfield so we were

00:07:58,890 --> 00:08:03,750
moving towards microservices in general

00:08:00,690 --> 00:08:05,340
and we were able just adapt rather than

00:08:03,750 --> 00:08:07,890
trying to migrate in existing

00:08:05,340 --> 00:08:10,020
applications and to spinnaker and to

00:08:07,890 --> 00:08:11,960
that point I think the most important

00:08:10,020 --> 00:08:14,550
lesson that I learned was more around

00:08:11,960 --> 00:08:17,520
process engineering spinnaker simply a

00:08:14,550 --> 00:08:19,230
tool but it was working with our

00:08:17,520 --> 00:08:21,810
development teams to understand our

00:08:19,230 --> 00:08:25,110
overall software development cycle and

00:08:21,810 --> 00:08:27,720
where we could make efficient use and

00:08:25,110 --> 00:08:32,370
how flexible spinnaker was that made it

00:08:27,720 --> 00:08:34,260
really useful for us um for us I think

00:08:32,370 --> 00:08:38,729
the most useful kind of monitoring we

00:08:34,260 --> 00:08:40,080
have is spinnaker always triggers floats

00:08:38,729 --> 00:08:41,910
through our rpm and I've been

00:08:40,080 --> 00:08:43,620
repositories to check that indexing is

00:08:41,910 --> 00:08:46,589
up and running because if

00:08:43,620 --> 00:08:50,460
indexing is broken and the bakery stops

00:08:46,589 --> 00:08:54,210
and all pipeline stops so we do that and

00:08:50,460 --> 00:08:56,490
also we have like pipelines that deploy

00:08:54,210 --> 00:08:58,260
every tenth or 15-minute through

00:08:56,490 --> 00:09:02,460
production to just see that the system

00:08:58,260 --> 00:09:04,950
is alive those those two things is what

00:09:02,460 --> 00:09:06,900
we rely on to keep spinnaker basically

00:09:04,950 --> 00:09:10,490
we have monitors on other things but

00:09:06,900 --> 00:09:10,490
this shows that the system is working

00:09:18,080 --> 00:09:24,779
what about securing spinnaker so we we

00:09:21,000 --> 00:09:26,820
did a OSS survey and asked how people

00:09:24,779 --> 00:09:29,730
were securing spinnaker and we got as

00:09:26,820 --> 00:09:32,490
many answers to that question as people

00:09:29,730 --> 00:09:33,900
you know responded so tell us how and

00:09:32,490 --> 00:09:35,850
obviously everyone here is at a large

00:09:33,900 --> 00:09:37,230
enterprise where I suspect you just

00:09:35,850 --> 00:09:39,480
can't have it wide open for people to do

00:09:37,230 --> 00:09:40,890
it you know willy-nilly so what what are

00:09:39,480 --> 00:09:44,430
the what are these strategies you all

00:09:40,890 --> 00:09:46,320
are employing to ensure that some random

00:09:44,430 --> 00:09:49,380
employee doesn't you know kill

00:09:46,320 --> 00:09:56,970
production or do you care about that

00:09:49,380 --> 00:09:59,490
yeah we use as the Logan service in

00:09:56,970 --> 00:10:02,220
ships tell and spinnaker supports Samuel

00:09:59,490 --> 00:10:06,360
Logan so we use that in combination with

00:10:02,220 --> 00:10:08,670
the VPN and also we use halyard to

00:10:06,360 --> 00:10:12,330
control the access to the various

00:10:08,670 --> 00:10:14,940
accounts and applications so spinnaker

00:10:12,330 --> 00:10:17,490
is running in GA in ships debt which

00:10:14,940 --> 00:10:19,500
means that all developers get access

00:10:17,490 --> 00:10:21,390
when they join and we're not afraid of

00:10:19,500 --> 00:10:23,520
it because it's up to the vacation

00:10:21,390 --> 00:10:26,850
owners and account owners to secure

00:10:23,520 --> 00:10:30,680
their accounts but this is also a

00:10:26,850 --> 00:10:34,260
challenge because we lose insight on

00:10:30,680 --> 00:10:36,209
what people are doing because we are not

00:10:34,260 --> 00:10:44,040
allowed to access that counts so it's

00:10:36,209 --> 00:10:45,990
hard to support yeah and yeah it's a

00:10:44,040 --> 00:10:49,709
closed down system for many teams and

00:10:45,990 --> 00:10:53,810
then we don't get the people can't just

00:10:49,709 --> 00:10:53,810
browse it and see how people are working

00:10:57,130 --> 00:11:04,780
yeah so we currently employ either sam'l

00:11:00,790 --> 00:11:06,430
for authentic and then do sam'l frothing

00:11:04,780 --> 00:11:09,310
and another spinnaker cluster with

00:11:06,430 --> 00:11:11,350
Google Groups that's the offices II we

00:11:09,310 --> 00:11:13,150
examined and held up for a little while

00:11:11,350 --> 00:11:18,160
found that that was way too hard to

00:11:13,150 --> 00:11:19,110
configure at Target and another one I

00:11:18,160 --> 00:11:22,300
haven't tried yet

00:11:19,110 --> 00:11:25,300
up to so there's two different versions

00:11:22,300 --> 00:11:29,140
oauth2 which lit a headache that I had

00:11:25,300 --> 00:11:31,390
for a couple of weeks and yeah basically

00:11:29,140 --> 00:11:33,520
we ended up deciding on sam'l because

00:11:31,390 --> 00:11:36,520
ping ID just does it pretty well for us

00:11:33,520 --> 00:11:38,530
we do run into a bug occasionally where

00:11:36,520 --> 00:11:42,370
if you log in to another ping IT service

00:11:38,530 --> 00:11:45,070
it screws up the cookie somehow but we

00:11:42,370 --> 00:11:48,940
found that the groups returned via ad

00:11:45,070 --> 00:11:52,120
end up working perfectly fine for Aussie

00:11:48,940 --> 00:11:54,940
within Fiat so our goal in the long run

00:11:52,120 --> 00:11:58,330
is that all applications are created by

00:11:54,940 --> 00:12:01,630
our tap API they'll be locked down to a

00:11:58,330 --> 00:12:05,080
ad group provided by our application

00:12:01,630 --> 00:12:10,660
teams at app creation time and then as

00:12:05,080 --> 00:12:13,180
well as the API will include the super

00:12:10,660 --> 00:12:16,750
admin group which is our cloud platform

00:12:13,180 --> 00:12:18,520
engineering team as well as a group for

00:12:16,750 --> 00:12:21,700
service accounts which are at the robots

00:12:18,520 --> 00:12:24,220
no that way we ensure that we can still

00:12:21,700 --> 00:12:26,650
have read/write access to them so that

00:12:24,220 --> 00:12:29,770
we can help debug with teams but as well

00:12:26,650 --> 00:12:31,660
as locking it down to a smaller set so

00:12:29,770 --> 00:12:33,520
for the longest time we had every

00:12:31,660 --> 00:12:36,130
application was viewable by everybody

00:12:33,520 --> 00:12:38,500
who could log into spinnaker and so we

00:12:36,130 --> 00:12:40,450
trusted engineers for a pretty long time

00:12:38,500 --> 00:12:42,520
but now that we're going to be moving

00:12:40,450 --> 00:12:43,690
spinnaker to PCI compliance the Sox

00:12:42,520 --> 00:12:50,260
compliance we have to start thinking

00:12:43,690 --> 00:12:52,570
about how you do a Capital One because

00:12:50,260 --> 00:12:56,490
of all the governance and controls that

00:12:52,570 --> 00:12:59,110
we have to make sure we are wrong to

00:12:56,490 --> 00:13:01,000
compliant with all that stuff we were

00:12:59,110 --> 00:13:03,100
using sam'l and then the authoring

00:13:01,000 --> 00:13:06,130
authentication authorization integrated

00:13:03,100 --> 00:13:07,600
with our the profile based access but

00:13:06,130 --> 00:13:08,980
it's also combined with every

00:13:07,600 --> 00:13:10,570
application when there

00:13:08,980 --> 00:13:13,029
on boarding they're checking whether it

00:13:10,570 --> 00:13:15,490
is the right engineering team has the

00:13:13,029 --> 00:13:18,130
right access and they other all the

00:13:15,490 --> 00:13:21,550
other applications will have only view

00:13:18,130 --> 00:13:23,680
the owning team for that application is

00:13:21,550 --> 00:13:26,560
the only thing only one that have access

00:13:23,680 --> 00:13:29,070
to their application execution also even

00:13:26,560 --> 00:13:32,079
that execution for production is

00:13:29,070 --> 00:13:34,269
combined with lot of internal API based

00:13:32,079 --> 00:13:38,889
calls before it gets to production

00:13:34,269 --> 00:13:40,779
access so we made sure all those things

00:13:38,889 --> 00:13:42,579
are covered combined with some internal

00:13:40,779 --> 00:13:50,079
applies to before going to production

00:13:42,579 --> 00:13:51,550
stage yeah we do some other things to

00:13:50,079 --> 00:13:54,070
all them you know lock down the the

00:13:51,550 --> 00:13:57,550
front-end with Sam all but we also have

00:13:54,070 --> 00:13:59,320
x509 auth for all API access I mean that

00:13:57,550 --> 00:14:01,060
certificates only shared amongst us

00:13:59,320 --> 00:14:04,060
internally as a team and gets rotated

00:14:01,060 --> 00:14:07,000
pretty often and with that to manage

00:14:04,060 --> 00:14:09,579
compliance we lock down all pipeline

00:14:07,000 --> 00:14:11,410
edits from UI and so any edits have to

00:14:09,579 --> 00:14:13,510
go through our tooling so the we have

00:14:11,410 --> 00:14:14,170
full history of what's going in what is

00:14:13,510 --> 00:14:16,750
that toy

00:14:14,170 --> 00:14:18,940
what is that toy oh it's called foremast

00:14:16,750 --> 00:14:19,930
it's similar to decatur pipelines it

00:14:18,940 --> 00:14:22,269
does some more around infrastructure

00:14:19,930 --> 00:14:24,670
creation stuff like that but we force

00:14:22,269 --> 00:14:26,350
all UI or pipeline changes to go through

00:14:24,670 --> 00:14:30,040
our tooling just so we have record of

00:14:26,350 --> 00:14:32,769
that for our auditors similar to

00:14:30,040 --> 00:14:35,800
everyone else we use sam'l for

00:14:32,769 --> 00:14:38,680
authentication and then lock down

00:14:35,800 --> 00:14:40,300
certain AWS accounts with required group

00:14:38,680 --> 00:14:43,240
membership so you have to be a part of

00:14:40,300 --> 00:14:45,910
particular Google groups to get access

00:14:43,240 --> 00:14:48,250
to say the management account which is

00:14:45,910 --> 00:14:51,610
where spinnaker actually runs and then

00:14:48,250 --> 00:14:55,540
we have x.509 certificates provided

00:14:51,610 --> 00:14:57,699
through either lemur or Metatron so

00:14:55,540 --> 00:15:00,190
individual developers get their own

00:14:57,699 --> 00:15:04,180
certificates that are short-term legal

00:15:00,190 --> 00:15:06,699
and we can rate limit or give them

00:15:04,180 --> 00:15:09,250
specific access to individual accounts

00:15:06,699 --> 00:15:11,529
if they need to but avens if you have a

00:15:09,250 --> 00:15:13,180
certificate you're gonna get basically

00:15:11,529 --> 00:15:16,149
right access to any of the accounts that

00:15:13,180 --> 00:15:18,750
we have that are not requiring a

00:15:16,149 --> 00:15:18,750
specific group

00:15:20,990 --> 00:15:27,540
so internally we use a github OAuth but

00:15:24,720 --> 00:15:30,330
some of a lot of the other users we see

00:15:27,540 --> 00:15:33,030
to have a wide range of security

00:15:30,330 --> 00:15:35,160
lockdown measures some of them I've been

00:15:33,030 --> 00:15:38,190
surprised it's it's been fine for them

00:15:35,160 --> 00:15:40,350
to not have you know anything more than

00:15:38,190 --> 00:15:43,560
you know having their users log in and

00:15:40,350 --> 00:15:46,320
ooofff and that means that all of the

00:15:43,560 --> 00:15:49,080
users can see all of the other app teams

00:15:46,320 --> 00:15:51,300
applications and possibly deploy them so

00:15:49,080 --> 00:15:54,510
I've been surprised a lot more companies

00:15:51,300 --> 00:15:57,840
than I thought we're okay with that on

00:15:54,510 --> 00:16:00,470
the other end that isn't good enough for

00:15:57,840 --> 00:16:03,420
a lot of companies and sometimes we see

00:16:00,470 --> 00:16:06,060
they'll install spinnaker into its its

00:16:03,420 --> 00:16:08,820
own AWS account just for spinnaker and

00:16:06,060 --> 00:16:10,680
then you know control it kind of that

00:16:08,820 --> 00:16:14,300
way and control what what accounts it's

00:16:10,680 --> 00:16:16,770
allowed to deploy to sometimes we see

00:16:14,300 --> 00:16:21,030
multiple instances of spinnaker that

00:16:16,770 --> 00:16:24,080
each one has different rights I think

00:16:21,030 --> 00:16:26,460
that's that's pretty much the spectrum

00:16:24,080 --> 00:16:28,170
and what would you say the overall cost

00:16:26,460 --> 00:16:30,000
is to operate Center here this was an

00:16:28,170 --> 00:16:32,160
interesting discussion at the the one o

00:16:30,000 --> 00:16:35,010
launch I believe it was we had in San

00:16:32,160 --> 00:16:36,390
Francisco the the the meetup and someone

00:16:35,010 --> 00:16:38,130
in the in the audience asked how many

00:16:36,390 --> 00:16:40,200
people are maintaining and operating

00:16:38,130 --> 00:16:43,560
spinnaker at your particular company and

00:16:40,200 --> 00:16:45,690
we asked the same question on the survey

00:16:43,560 --> 00:16:47,220
and we got as many results as people

00:16:45,690 --> 00:16:48,720
answered so I'm curious down the line

00:16:47,220 --> 00:16:49,980
you know there's different companies

00:16:48,720 --> 00:16:50,820
being represented here how many people

00:16:49,980 --> 00:16:53,460
are actually quote unquote

00:16:50,820 --> 00:16:56,970
operating from here what do you think

00:16:53,460 --> 00:16:58,500
the cost is yeah we have a team of e and

00:16:56,970 --> 00:16:59,880
I think we all can support it's been

00:16:58,500 --> 00:17:01,620
apparently we had problems this morning

00:16:59,880 --> 00:17:03,810
and for everyone that knows it well is

00:17:01,620 --> 00:17:07,410
here but the team was able to figure it

00:17:03,810 --> 00:17:09,450
out just fine probably about two or

00:17:07,410 --> 00:17:10,740
three of us or maybe fifty percent of

00:17:09,450 --> 00:17:11,880
time dedicated towards actually

00:17:10,740 --> 00:17:14,640
supporting spinnaker once it's up and

00:17:11,880 --> 00:17:16,080
running you know getting it set up was a

00:17:14,640 --> 00:17:17,100
lot of effort and it took the whole team

00:17:16,080 --> 00:17:18,900
but once it's up and running it's not

00:17:17,100 --> 00:17:21,270
been too much maintenance except for

00:17:18,900 --> 00:17:24,510
occasional like like gate this morning

00:17:21,270 --> 00:17:26,040
was had 100% CPU usage and I think

00:17:24,510 --> 00:17:27,660
that's some JVM tuning we have to do on

00:17:26,040 --> 00:17:29,430
the on our end so there's things that

00:17:27,660 --> 00:17:31,590
pop up like that there's very little now

00:17:29,430 --> 00:17:32,820
and you know updates happen everyone

00:17:31,590 --> 00:17:34,940
smile once you have the process down it

00:17:32,820 --> 00:17:34,940
goes

00:17:35,490 --> 00:17:39,430
we actually run spinnaker within

00:17:37,600 --> 00:17:41,290
kubernetes itself along with a lot a lot

00:17:39,430 --> 00:17:43,030
of our other sort of related build tools

00:17:41,290 --> 00:17:44,770
so it's just another foundation that

00:17:43,030 --> 00:17:48,010
we're deploying out to a dedicated

00:17:44,770 --> 00:17:49,240
trimmer Nettie's cluster simply for for

00:17:48,010 --> 00:17:50,980
running spinnaker but also somewhere

00:17:49,240 --> 00:17:56,430
tolling like jenkins and so for some

00:17:50,980 --> 00:17:56,430
reason absorb cost there for our process

00:17:57,240 --> 00:18:03,490
we are we're spending quite some time

00:18:00,400 --> 00:18:07,000
operating spinnaker with like the last

00:18:03,490 --> 00:18:09,360
couple of months it's been sent a lot of

00:18:07,000 --> 00:18:12,610
time upgrading spinnaker and also

00:18:09,360 --> 00:18:16,030
changing how are you crowd accounts to

00:18:12,610 --> 00:18:19,120
support new certificate list requirement

00:18:16,030 --> 00:18:22,210
in 100 abs accounts we also have

00:18:19,120 --> 00:18:25,990
occasional way that people are deleting

00:18:22,210 --> 00:18:28,300
the roles in there or access to roles in

00:18:25,990 --> 00:18:32,530
their accounts away we have to debug

00:18:28,300 --> 00:18:37,150
that and and also with we've had quite

00:18:32,530 --> 00:18:40,090
some readies slowness because we are

00:18:37,150 --> 00:18:41,620
hitting 100 abs accounts and 40q

00:18:40,090 --> 00:18:44,050
Burnett's accounts I guess so

00:18:41,620 --> 00:18:47,710
it's by design but we are hitting limits

00:18:44,050 --> 00:18:51,910
in Redis as well now it's fine but it

00:18:47,710 --> 00:18:54,280
will surface in some weeks I guess you

00:18:51,910 --> 00:18:56,080
can you please indicate the scale of or

00:18:54,280 --> 00:18:58,960
the scope of what you're supporting when

00:18:56,080 --> 00:19:00,850
you talk about that and also also share

00:18:58,960 --> 00:19:02,410
what you're doing for user support are

00:19:00,850 --> 00:19:09,550
they for example go to the slat forum or

00:19:02,410 --> 00:19:11,440
are they coming to you so at target I

00:19:09,550 --> 00:19:14,080
think we had close to a thousand users

00:19:11,440 --> 00:19:17,140
last time we counted for spinnaker and

00:19:14,080 --> 00:19:18,910
that's a - 15 users on our first

00:19:17,140 --> 00:19:21,490
spinnaker installation had about 300 at

00:19:18,910 --> 00:19:24,610
teams I think our current spinnaker

00:19:21,490 --> 00:19:25,960
application actually downsized the

00:19:24,610 --> 00:19:27,610
number of atoms we needed or

00:19:25,960 --> 00:19:31,720
applications within there so it's about

00:19:27,610 --> 00:19:33,190
120 right now just apps and then they

00:19:31,720 --> 00:19:36,640
might have a number of components in

00:19:33,190 --> 00:19:38,230
there as far as how many people are

00:19:36,640 --> 00:19:42,490
actually looking at it from day to day

00:19:38,230 --> 00:19:44,960
doing ops work not that many so our

00:19:42,490 --> 00:19:46,610
first spinnaker installation did

00:19:44,960 --> 00:19:49,090
get touched for about eight months and

00:19:46,610 --> 00:19:54,500
they just kept going and going and going

00:19:49,090 --> 00:19:56,419
our current GCP deployments of gcpd has

00:19:54,500 --> 00:19:57,890
been looked at two or three times in the

00:19:56,419 --> 00:20:00,980
last four months

00:19:57,890 --> 00:20:02,929
it just gets virgin bumps whenever they

00:20:00,980 --> 00:20:05,600
find a bug and usually already been

00:20:02,929 --> 00:20:08,990
patched so we just bump all our stuff up

00:20:05,600 --> 00:20:11,090
that's maybe an hour to of just doing

00:20:08,990 --> 00:20:12,669
validation testing reassuring making

00:20:11,090 --> 00:20:15,860
sure everything's still working

00:20:12,669 --> 00:20:20,000
currently we have six engineers

00:20:15,860 --> 00:20:23,059
dedicated to looking at fixing up string

00:20:20,000 --> 00:20:25,940
bugs with the OpenStack driver looking

00:20:23,059 --> 00:20:29,779
at adding new features for example x.509

00:20:25,940 --> 00:20:31,340
certificate parsing but that's all work

00:20:29,779 --> 00:20:33,409
that were finally freed up from doing

00:20:31,340 --> 00:20:37,070
the operational spinnaker work we've

00:20:33,409 --> 00:20:39,049
probably spent a good six to eight

00:20:37,070 --> 00:20:40,820
months just learning how to configure

00:20:39,049 --> 00:20:44,799
spinnaker how to run it well how to do a

00:20:40,820 --> 00:20:48,380
che deployments we migrated from doing

00:20:44,799 --> 00:20:50,450
great jobs that created rpms out of the

00:20:48,380 --> 00:20:53,450
installed dist Gradle command for

00:20:50,450 --> 00:20:56,210
example we use that to deploy RPMs on to

00:20:53,450 --> 00:20:58,429
VMs that ran spin around to different

00:20:56,210 --> 00:21:01,070
VMs one for cloud driver and one for

00:20:58,429 --> 00:21:04,789
everything else basically then we

00:21:01,070 --> 00:21:07,190
switched over to gke that actually

00:21:04,789 --> 00:21:09,279
dropped down our operational load or how

00:21:07,190 --> 00:21:11,299
much time we spent operating it

00:21:09,279 --> 00:21:13,730
significantly now we switched over to

00:21:11,299 --> 00:21:18,529
halyard our initial how your discovery

00:21:13,730 --> 00:21:19,970
took us about three weeks now we have

00:21:18,529 --> 00:21:23,450
handed off the ability to deploy

00:21:19,970 --> 00:21:25,669
spinnaker to other teams so they're able

00:21:23,450 --> 00:21:28,399
to run local Spinnaker's on their mini

00:21:25,669 --> 00:21:31,010
cubes on their laptops if they need to

00:21:28,399 --> 00:21:32,659
do development they able to launch our

00:21:31,010 --> 00:21:34,490
lab environment if they want and they're

00:21:32,659 --> 00:21:35,720
able to redeploy our pradhan fire meant

00:21:34,490 --> 00:21:37,159
for us so we're actually not even

00:21:35,720 --> 00:21:42,830
deploying our broad environment right

00:21:37,159 --> 00:21:50,990
now it within Netflix I guess we have a

00:21:42,830 --> 00:21:52,850
team of 12 now sandy and in any given

00:21:50,990 --> 00:21:55,250
time one of those people is on call to

00:21:52,850 --> 00:21:56,830
support the entirety of Netflix using

00:21:55,250 --> 00:21:59,600
using spinnaker

00:21:56,830 --> 00:22:04,250
we monitor slack channel we can get

00:21:59,600 --> 00:22:07,150
paged most of the time it's not

00:22:04,250 --> 00:22:10,640
something that we dread as a task on

00:22:07,150 --> 00:22:11,750
call it's usually certainly recently

00:22:10,640 --> 00:22:14,090
it's been pretty good we've had our ups

00:22:11,750 --> 00:22:18,020
and downs for sure and I guess the big

00:22:14,090 --> 00:22:19,700
difference between Netflix and most of

00:22:18,020 --> 00:22:20,870
the other people who are installed in

00:22:19,700 --> 00:22:22,549
occur is that we're not pin to the

00:22:20,870 --> 00:22:23,600
open-source version so we tend to be

00:22:22,549 --> 00:22:25,910
round the bleeding edge and we're

00:22:23,600 --> 00:22:27,410
probably deploying various different

00:22:25,910 --> 00:22:30,169
services within spinnaker maybe ten

00:22:27,410 --> 00:22:33,010
times a day so I guess we have a lot

00:22:30,169 --> 00:22:36,830
more churn in terms of finding bugs and

00:22:33,010 --> 00:22:39,500
having to be reactive to that but I'd

00:22:36,830 --> 00:22:41,330
say you know even at the worst times

00:22:39,500 --> 00:22:45,290
maybe three or four people are working

00:22:41,330 --> 00:22:48,830
on arms issues keeping time and that's

00:22:45,290 --> 00:22:49,940
that's pretty unusual would you agree

00:22:48,830 --> 00:22:51,980
with that robot

00:22:49,940 --> 00:23:00,380
well basically were the canary for the

00:22:51,980 --> 00:23:10,790
rest of the world twenty five hundred

00:23:00,380 --> 00:23:14,150
applications so most on call is just

00:23:10,790 --> 00:23:16,280
kind of fielding questions like how do I

00:23:14,150 --> 00:23:19,970
set up my pipeline to do this why isn't

00:23:16,280 --> 00:23:22,820
my expression working help me understand

00:23:19,970 --> 00:23:25,929
why my applications not going into the

00:23:22,820 --> 00:23:25,929
service that kind of thing

00:23:26,140 --> 00:23:31,370
that usually takes up like 90% of your

00:23:29,450 --> 00:23:32,480
on-call rotation and then about 10% of

00:23:31,370 --> 00:23:34,100
the time is actually like doing

00:23:32,480 --> 00:23:37,490
operations things which would be like

00:23:34,100 --> 00:23:39,710
yeah and to expand on how many users and

00:23:37,490 --> 00:23:43,190
also we have a thousand users but it's

00:23:39,710 --> 00:23:44,929
like the five percent or the bottom five

00:23:43,190 --> 00:23:47,150
percent in the top five percent that are

00:23:44,929 --> 00:23:49,160
asking a lot of questions about just

00:23:47,150 --> 00:23:52,850
been able to do this how does this work

00:23:49,160 --> 00:23:54,559
in spinnaker and we have we have 24

00:23:52,850 --> 00:23:57,080
people on our team we have two people on

00:23:54,559 --> 00:23:59,390
call for a length of one day at the

00:23:57,080 --> 00:24:00,500
current time and they're they're the

00:23:59,390 --> 00:24:03,110
people that are fielding those questions

00:24:00,500 --> 00:24:04,730
but they're not really specific to

00:24:03,110 --> 00:24:08,840
spinnaker a lot of the time it's like

00:24:04,730 --> 00:24:10,080
how does GCP work and so I would say

00:24:08,840 --> 00:24:11,370
maybe

00:24:10,080 --> 00:24:17,220
the person's the questions there's

00:24:11,370 --> 00:24:18,929
vinegar specific and yeah I think we

00:24:17,220 --> 00:24:20,760
also have one person that's completely

00:24:18,929 --> 00:24:22,260
dedicated to support on our team and

00:24:20,760 --> 00:24:25,049
they helped with the migration efforts

00:24:22,260 --> 00:24:27,480
that we have I think there's another

00:24:25,049 --> 00:24:29,669
part that I wanted to comment on oh yeah

00:24:27,480 --> 00:24:31,110
our teams don't go up into the upstream

00:24:29,669 --> 00:24:37,669
swipe channel they all keep their

00:24:31,110 --> 00:24:42,149
questions internal about 15 teams about

00:24:37,669 --> 00:24:44,250
50-60 developers are actually users as

00:24:42,149 --> 00:24:47,120
far as operating it it's mainly my team

00:24:44,250 --> 00:24:49,049
so I have a team of four myself kind of

00:24:47,120 --> 00:24:51,000
responsible for keeping spinnaker

00:24:49,049 --> 00:24:55,019
nothing goes the upstream slack it all

00:24:51,000 --> 00:24:56,850
handled internally but to that point our

00:24:55,019 --> 00:24:59,370
pipelines are pretty simple and we have

00:24:56,850 --> 00:25:02,700
closely with our platform engineering

00:24:59,370 --> 00:25:03,679
team to really define the types of

00:25:02,700 --> 00:25:06,690
applications that are being deployed

00:25:03,679 --> 00:25:07,740
whether it's an API or service since

00:25:06,690 --> 00:25:09,059
we're doing things just awfully

00:25:07,740 --> 00:25:11,010
kubernetes manifests where teams are

00:25:09,059 --> 00:25:12,720
very comfortable right now manifests

00:25:11,010 --> 00:25:16,409
there and we translate those into

00:25:12,720 --> 00:25:17,850
pipelines so onboarding a new

00:25:16,409 --> 00:25:20,279
application is relatively

00:25:17,850 --> 00:25:22,830
straightforward as long as conforms to

00:25:20,279 --> 00:25:24,059
our spec for this is a service and how

00:25:22,830 --> 00:25:25,710
its setup Interbrew Nettie's we

00:25:24,059 --> 00:25:28,880
translate that into a pipeline through

00:25:25,710 --> 00:25:31,169
an automated job so there's very little

00:25:28,880 --> 00:25:44,070
operational support that has to be done

00:25:31,169 --> 00:25:47,039
on a day to day basis with our support

00:25:44,070 --> 00:25:49,289
and the delivery team owns the CI system

00:25:47,039 --> 00:25:53,510
the artifact management and also the

00:25:49,289 --> 00:25:57,750
pass so so when we get this it's quite

00:25:53,510 --> 00:26:00,179
divided into different topics but we

00:25:57,750 --> 00:26:01,679
have to help people with spinnaker we

00:26:00,179 --> 00:26:04,019
have to have the same challenge as you

00:26:01,679 --> 00:26:06,240
like telling people that the deployment

00:26:04,019 --> 00:26:08,419
doesn't work because the instance does

00:26:06,240 --> 00:26:10,830
not get healthy and the EOB it's not

00:26:08,419 --> 00:26:14,130
specific to spinnaker that it doesn't

00:26:10,830 --> 00:26:16,669
start but it's sometimes challenging to

00:26:14,130 --> 00:26:16,669
explain this

00:26:19,220 --> 00:26:25,290
yeah I could ask for clarification on

00:26:21,630 --> 00:26:27,300
are these team sizes dedicated just a

00:26:25,290 --> 00:26:30,720
spinnaker are they your ops departments

00:26:27,300 --> 00:26:33,230
also working on other random requests it

00:26:30,720 --> 00:26:35,910
means I'm it just to repeat the question

00:26:33,230 --> 00:26:37,559
yeah yeah so the question was are these

00:26:35,910 --> 00:26:39,390
team sizes dedicated entirely towards

00:26:37,559 --> 00:26:42,240
spinnaker or they just opted teens that

00:26:39,390 --> 00:26:45,059
are also doing spec requests for us it's

00:26:42,240 --> 00:26:46,280
up well DevOps team's does tooling teams

00:26:45,059 --> 00:26:47,760
whatever you want to call it that is

00:26:46,280 --> 00:26:49,110
feeling requests

00:26:47,760 --> 00:26:54,420
no one's dedicated or it's been a

00:26:49,110 --> 00:26:56,730
chronic Aires it's just

00:26:54,420 --> 00:26:58,559
Marisa it's a DevOps team we just happen

00:26:56,730 --> 00:27:04,830
to be responsible for anything as far as

00:26:58,559 --> 00:27:06,290
delivery and so I bet some people want

00:27:04,830 --> 00:27:11,460
some clarification on edwin's

00:27:06,290 --> 00:27:13,530
twenty-four people number so I'm gonna

00:27:11,460 --> 00:27:16,020
plug what target does on our team which

00:27:13,530 --> 00:27:19,020
is really cool so every quarter we

00:27:16,020 --> 00:27:21,750
decide to scramble teams and so we have

00:27:19,020 --> 00:27:23,490
four team leads at the moment we pick

00:27:21,750 --> 00:27:25,740
which topics we're gonna work on for the

00:27:23,490 --> 00:27:27,210
quarter and the rest of the twenty

00:27:25,740 --> 00:27:30,660
people on our team go and pick where

00:27:27,210 --> 00:27:32,190
they want to go work so from quarter to

00:27:30,660 --> 00:27:33,600
quarter have a completely new set of

00:27:32,190 --> 00:27:35,700
people working on spinnaker most of the

00:27:33,600 --> 00:27:36,990
time and so we do a little bit of ramp

00:27:35,700 --> 00:27:38,730
up trying to get people familiar with

00:27:36,990 --> 00:27:43,140
the mode base how the micro services

00:27:38,730 --> 00:27:44,970
work but maybe towards the last the tail

00:27:43,140 --> 00:27:48,260
on the two months of the quarter we're

00:27:44,970 --> 00:27:50,250
actually looking at fixing ops bugs or

00:27:48,260 --> 00:27:54,690
looking at adding new features to

00:27:50,250 --> 00:27:57,000
spinnaker and so overall we have a

00:27:54,690 --> 00:27:59,910
pretty wide breadth of knowledge within

00:27:57,000 --> 00:28:01,770
spinnaker operating it but also using

00:27:59,910 --> 00:28:04,050
spinnaker on the Aventine perspective as

00:28:01,770 --> 00:28:09,030
lots of our team members then go on to

00:28:04,050 --> 00:28:13,650
help people supporting spinnaker it gets

00:28:09,030 --> 00:28:15,450
yeah I guess we have probably six people

00:28:13,650 --> 00:28:17,400
that are not familiar super well with

00:28:15,450 --> 00:28:19,590
spinnaker now I guess on the team but

00:28:17,400 --> 00:28:24,179
like eventually they'll come into my

00:28:19,590 --> 00:28:25,830
rotation I'm sure I'm working with the

00:28:24,179 --> 00:28:30,660
same tried to get they even into

00:28:25,830 --> 00:28:31,770
spinnaker really hard we we have the

00:28:30,660 --> 00:28:36,780
same pattern with

00:28:31,770 --> 00:28:40,470
uncle person is in charge of support we

00:28:36,780 --> 00:28:42,780
spend at least one resource on own

00:28:40,470 --> 00:28:47,070
support and operational stuff I think

00:28:42,780 --> 00:28:55,800
it's like 1.5 person converging each

00:28:47,070 --> 00:28:58,820
week on this pinnacle space we have our

00:28:55,800 --> 00:29:02,700
own tool that is built on top of

00:28:58,820 --> 00:29:05,730
spinnaker it's a cloud one view so the

00:29:02,700 --> 00:29:07,770
spinnaker we are using it not only for

00:29:05,730 --> 00:29:14,700
just continuous delivery but as well

00:29:07,770 --> 00:29:18,900
some of you may have a lot of changes

00:29:14,700 --> 00:29:21,390
are being made many extensions are being

00:29:18,900 --> 00:29:24,000
added to that platform so we have code

00:29:21,390 --> 00:29:27,360
team of six working day-in day-out on

00:29:24,000 --> 00:29:30,240
that platform while working with all our

00:29:27,360 --> 00:29:32,340
digital line of business and also six

00:29:30,240 --> 00:29:36,270
other lines of business onboarding onto

00:29:32,340 --> 00:29:39,420
the platform so we have other team of

00:29:36,270 --> 00:29:42,000
four people doing maybe 50% of their

00:29:39,420 --> 00:29:45,300
time all those enhancements as well as

00:29:42,000 --> 00:29:47,490
support to some extent we do a slack

00:29:45,300 --> 00:29:49,880
internal slack channel support and we

00:29:47,490 --> 00:29:54,300
have our daily office hours one hour and

00:29:49,880 --> 00:29:57,660
a dedicated point of contact person for

00:29:54,300 --> 00:30:00,030
lob that works with either that group of

00:29:57,660 --> 00:30:02,580
applications to onboard or deal with any

00:30:00,030 --> 00:30:04,770
of the questions or help them questions

00:30:02,580 --> 00:30:08,100
are not on the spinnaker how it works

00:30:04,770 --> 00:30:11,370
but it is more on how they can add a

00:30:08,100 --> 00:30:14,340
reusable pipeline template for their

00:30:11,370 --> 00:30:16,050
group of applications for reuse those

00:30:14,340 --> 00:30:18,150
kind of things because not all an

00:30:16,050 --> 00:30:20,760
infrastructure is API based we have

00:30:18,150 --> 00:30:22,170
several other types of infrastructure so

00:30:20,760 --> 00:30:23,880
some teams are interested in

00:30:22,170 --> 00:30:27,750
contributing back to that internal

00:30:23,880 --> 00:30:29,910
community those templates so lot of time

00:30:27,750 --> 00:30:33,120
has spent the collaboration

00:30:29,910 --> 00:30:36,810
getting them onto the platform as well

00:30:33,120 --> 00:30:38,960
as making the contributions the other

00:30:36,810 --> 00:30:43,200
thing I would like to call out is

00:30:38,960 --> 00:30:45,180
there's several extensions and also

00:30:43,200 --> 00:30:47,730
possible contribution back that we

00:30:45,180 --> 00:30:50,940
into the community and I have a core

00:30:47,730 --> 00:30:55,530
team that's joining me today here I want

00:30:50,940 --> 00:30:59,850
to have this community put a name to the

00:30:55,530 --> 00:31:04,320
face if we can stand the cocoa team that

00:30:59,850 --> 00:31:06,930
is Rajee Andrew Roger rotation cam dang

00:31:04,320 --> 00:31:10,830
that is our core team supporting entire

00:31:06,930 --> 00:31:13,250
Capital One spinnaker platform real

00:31:10,830 --> 00:31:15,780
opposition is day in day out that's

00:31:13,250 --> 00:31:18,150
extending the platform supporting the

00:31:15,780 --> 00:31:24,540
platform for certified continuous

00:31:18,150 --> 00:31:27,720
delivery for us so we assume we we help

00:31:24,540 --> 00:31:30,420
the company is the existing ops or

00:31:27,720 --> 00:31:31,980
DevOps team takes over spinnaker and

00:31:30,420 --> 00:31:35,040
it's it's always enough they don't have

00:31:31,980 --> 00:31:37,230
to add more resources and a lot of the

00:31:35,040 --> 00:31:40,170
work that they do like I mentioned is

00:31:37,230 --> 00:31:43,320
things along training the company on how

00:31:40,170 --> 00:31:45,510
to use the new system how to integrate

00:31:43,320 --> 00:31:46,830
with their you know they do work to

00:31:45,510 --> 00:31:50,760
integrate has been occurring to their

00:31:46,830 --> 00:31:52,440
current systems do training programs to

00:31:50,760 --> 00:31:55,620
help educate the rest of the company

00:31:52,440 --> 00:31:58,290
things like that but after a while less

00:31:55,620 --> 00:32:02,750
resources are needed to maintain the

00:31:58,290 --> 00:32:05,550
platform then before they had spinnaker

00:32:02,750 --> 00:32:08,250
so about three months ago I think we

00:32:05,550 --> 00:32:10,800
hired a technical writer the technical

00:32:08,250 --> 00:32:12,600
writers big job was to clean up our

00:32:10,800 --> 00:32:14,790
existing documentation that was centered

00:32:12,600 --> 00:32:16,470
around how to start a huge spinnaker as

00:32:14,790 --> 00:32:18,750
well as how does target use our current

00:32:16,470 --> 00:32:21,000
cloud platform and all the other tooling

00:32:18,750 --> 00:32:24,840
though it built around and so I would

00:32:21,000 --> 00:32:27,060
say probably a good 30 to 40 30 to 50

00:32:24,840 --> 00:32:29,100
percent of the time it's just learning

00:32:27,060 --> 00:32:31,830
how the teams are using spinnaker and

00:32:29,100 --> 00:32:34,650
writing in sector documentation that is

00:32:31,830 --> 00:32:37,290
I guess I've never actually looked at

00:32:34,650 --> 00:32:41,730
the docs on the website for how to use

00:32:37,290 --> 00:32:43,710
spinnaker but I imagine like it's gonna

00:32:41,730 --> 00:32:46,160
be different from company to company how

00:32:43,710 --> 00:32:48,480
you're actually deploying applications

00:32:46,160 --> 00:32:49,320
and I guess to kind of reiterate some of

00:32:48,480 --> 00:32:51,510
their points

00:32:49,320 --> 00:32:53,010
the matter of where we spend on

00:32:51,510 --> 00:32:54,540
supporting spinnaker ice much less than

00:32:53,010 --> 00:32:56,700
the amount of gold on educating our

00:32:54,540 --> 00:32:57,929
developers to use spinnaker and that

00:32:56,700 --> 00:33:00,779
becomes a lot of

00:32:57,929 --> 00:33:02,730
what the team ends up doing and we use

00:33:00,779 --> 00:33:05,490
slack for internal chat and I feel like

00:33:02,730 --> 00:33:07,259
90% of the things we get is spinnaker

00:33:05,490 --> 00:33:10,110
slow which is something our enemy - me

00:33:07,259 --> 00:33:11,399
too - or my app is failing

00:33:10,110 --> 00:33:23,940
why spinners are broken and we're like

00:33:11,399 --> 00:33:25,649
no your health checks failing so if you

00:33:23,940 --> 00:33:26,610
have questions just raise your hand in

00:33:25,649 --> 00:33:42,119
the audience definite want to include

00:33:26,610 --> 00:33:45,960
everyone and I will I'd like to

00:33:42,119 --> 00:33:47,820
understand what for sizing what are you

00:33:45,960 --> 00:33:50,100
guys using currently and if once again

00:33:47,820 --> 00:33:52,980
if you could give background of what

00:33:50,100 --> 00:33:55,049
scale of deployments that supporting and

00:33:52,980 --> 00:33:56,999
also any ain't even sure about how you

00:33:55,049 --> 00:33:59,009
got there you probably had a baseline of

00:33:56,999 --> 00:34:09,990
a mission profile you started with you

00:33:59,009 --> 00:34:13,859
had a memory or it wasn't enough CPU so

00:34:09,990 --> 00:34:15,690
our spinnaker is well we have four

00:34:13,859 --> 00:34:20,690
different installations of spinnaker we

00:34:15,690 --> 00:34:24,119
have a dedicated little server for our

00:34:20,690 --> 00:34:27,299
PCI compliant account and then we have

00:34:24,119 --> 00:34:30,629
three different staging ones and then

00:34:27,299 --> 00:34:33,960
our production is probably somewhere

00:34:30,629 --> 00:34:37,109
around 75 servers when we do a red-black

00:34:33,960 --> 00:34:44,429
of cloud driver we wind up running 96

00:34:37,109 --> 00:34:48,149
servers so those are mostly like c3 4x

00:34:44,429 --> 00:34:50,929
larges in AWS we have quite a few

00:34:48,149 --> 00:34:54,599
reticent senses that we run ourselves

00:34:50,929 --> 00:34:58,710
and I think we could probably tune that

00:34:54,599 --> 00:35:00,869
down if we sort of effort into JVM

00:34:58,710 --> 00:35:04,799
tuning which is starting to become a

00:35:00,869 --> 00:35:06,510
thing but that's that's kind of where

00:35:04,799 --> 00:35:09,390
we're at but that's also serving

00:35:06,510 --> 00:35:11,160
hundreds of thousands of AWS and

00:35:09,390 --> 00:35:12,779
census tightest jobs and that sort of

00:35:11,160 --> 00:35:17,869
thing so there's there's quite a lot of

00:35:12,779 --> 00:35:26,480
stuff that we're indexing on a power

00:35:17,869 --> 00:35:29,190
yeah our scale is smaller cluster

00:35:26,480 --> 00:35:32,970
service is split off each probably has

00:35:29,190 --> 00:35:36,480
two to three how much I trust it

00:35:32,970 --> 00:35:39,180
and most those are like teaching medians

00:35:36,480 --> 00:35:41,730
or c4 larges the biggest bottleneck we

00:35:39,180 --> 00:35:43,349
had would be cloud driver

00:35:41,730 --> 00:35:46,380
we were just start with like the package

00:35:43,349 --> 00:35:47,819
dami that netflix provides we try to

00:35:46,380 --> 00:35:49,289
split it off and failed and then we've

00:35:47,819 --> 00:35:50,579
just like let's get spinnaker stable and

00:35:49,289 --> 00:35:52,680
once it's stable we start splitting off

00:35:50,579 --> 00:35:56,220
all these micro services but cloud

00:35:52,680 --> 00:35:57,720
driver we have to run we run read-only

00:35:56,220 --> 00:35:59,220
instances behind a load balancer that

00:35:57,720 --> 00:36:03,180
like every other service hits and then

00:35:59,220 --> 00:36:04,529
four drivers that are two accounts per

00:36:03,180 --> 00:36:07,619
cloud driver that are doing the rights

00:36:04,529 --> 00:36:09,329
in to run it I was like if we tried to

00:36:07,619 --> 00:36:12,809
put all of our accounts on one it would

00:36:09,329 --> 00:36:14,849
explode ideally I think we need a car

00:36:12,809 --> 00:36:16,170
driver for each account there may be

00:36:14,849 --> 00:36:18,000
better ways to handle it but cloud

00:36:16,170 --> 00:36:19,680
driver is definitely the first thing we

00:36:18,000 --> 00:36:26,549
had to split off and start worrying

00:36:19,680 --> 00:36:27,990
about scale with I don't know if you had

00:36:26,549 --> 00:36:29,789
a bigger installation would I be able to

00:36:27,990 --> 00:36:40,619
watch Netflix over go go when I'm

00:36:29,789 --> 00:36:45,269
playing on a smaller scale raspberry

00:36:40,619 --> 00:36:53,880
PI's I run it on the restroom I actually

00:36:45,269 --> 00:36:55,829
need to we run in kubernetes with a lot

00:36:53,880 --> 00:37:02,250
of things but it's essentially like

00:36:55,829 --> 00:37:05,279
teaching mediums and just of nodes where

00:37:02,250 --> 00:37:07,740
we're running with separate Redis for

00:37:05,279 --> 00:37:12,200
all the services and most of them are

00:37:07,740 --> 00:37:14,750
easy fiat has bone right cluster and

00:37:12,200 --> 00:37:18,779
well-read cluster

00:37:14,750 --> 00:37:20,620
cloud driver has bong bong cluster which

00:37:18,779 --> 00:37:23,070
is doing the indexing

00:37:20,620 --> 00:37:25,480
and that cease fairly large instances

00:37:23,070 --> 00:37:27,340
last week I deployed it with no memory

00:37:25,480 --> 00:37:30,580
settings that didn't go too well now it

00:37:27,340 --> 00:37:33,370
has memory settings again but we don't

00:37:30,580 --> 00:37:35,320
have insanely large I don't remember how

00:37:33,370 --> 00:37:38,680
large the instances are but six

00:37:35,320 --> 00:37:42,490
instances there and three instances or

00:37:38,680 --> 00:37:45,310
four in the readwrite cluster so or gate

00:37:42,490 --> 00:37:49,360
hits the same cluster for doing reads

00:37:45,310 --> 00:37:53,500
and worker rights there's nobody else

00:37:49,360 --> 00:37:55,090
running it on kubernetes geez okay you

00:37:53,500 --> 00:37:57,810
should all run spinnaker and kubernetes

00:37:55,090 --> 00:38:00,760
like I actually mean it as far as

00:37:57,810 --> 00:38:03,310
instant sizes I don't know what they're

00:38:00,760 --> 00:38:05,260
like at most we give cloud driver two

00:38:03,310 --> 00:38:06,760
gigs of RAM we scale it up to three

00:38:05,260 --> 00:38:08,800
replicas sets and then every other

00:38:06,760 --> 00:38:12,340
component rescale it so three replicas

00:38:08,800 --> 00:38:15,070
that's just for a Jayden's they use

00:38:12,340 --> 00:38:18,850
about half a gig of ram each on their

00:38:15,070 --> 00:38:21,490
limits and then I think every other

00:38:18,850 --> 00:38:24,100
services has about 500 millibars and

00:38:21,490 --> 00:38:27,640
then one core is dead

00:38:24,100 --> 00:38:29,400
no it's 1.75 actual cores and kubernetes

00:38:27,640 --> 00:38:32,290
is dedicated to cloud driver

00:38:29,400 --> 00:38:34,180
so cloud drivers the only thing that I

00:38:32,290 --> 00:38:38,560
have started to see performance issues

00:38:34,180 --> 00:38:40,690
on our scale it usually is solved quite

00:38:38,560 --> 00:38:42,580
just giving it more resources we started

00:38:40,690 --> 00:38:44,560
to see that it was having a hard time

00:38:42,580 --> 00:38:47,770
looking up information from Redis for a

00:38:44,560 --> 00:38:57,310
little bit so we have the Rena sighs do

00:38:47,770 --> 00:39:07,450
you remember it wasn't too much 1000

00:38:57,310 --> 00:39:09,820
gigs I think I think I yeah our gke

00:39:07,450 --> 00:39:12,160
clusters that run our infrastructure

00:39:09,820 --> 00:39:17,920
components are pretty tiny and they're

00:39:12,160 --> 00:39:21,760
just pretty efficient in fit three m4

00:39:17,920 --> 00:39:25,720
excels with about 300 pipelines running

00:39:21,760 --> 00:39:27,790
today sits at 15% CPU utilization most

00:39:25,720 --> 00:39:31,080
of the time so that's more than enough

00:39:27,790 --> 00:39:31,080
to keep you happy

00:39:32,150 --> 00:39:38,010
we have different installations as

00:39:35,720 --> 00:39:45,570
someone was saying earlier we have

00:39:38,010 --> 00:39:48,360
different regions production region it's

00:39:45,570 --> 00:39:49,920
a three node cluster in production it

00:39:48,360 --> 00:39:53,960
looks like we're the only ones running

00:39:49,920 --> 00:39:57,660
our family we are using three large and

00:39:53,960 --> 00:39:59,670
three instances with one fry truck right

00:39:57,660 --> 00:40:03,270
and then to read replicas of Redis we

00:39:59,670 --> 00:40:06,600
use elastic cache in Redis we have this

00:40:03,270 --> 00:40:09,590
dart in production stack and we have we

00:40:06,600 --> 00:40:12,150
run this in node cluster three AZ's

00:40:09,590 --> 00:40:14,640
active passive so we have the passive

00:40:12,150 --> 00:40:19,170
stack in our vast region but as I said

00:40:14,640 --> 00:40:23,030
it's actor passive we have a sandbox and

00:40:19,170 --> 00:40:25,260
Iran meant and where teams can try their

00:40:23,030 --> 00:40:26,700
code out before taking it to the

00:40:25,260 --> 00:40:28,610
production if they want to create new

00:40:26,700 --> 00:40:31,020
pipelines and stuff and we have a

00:40:28,610 --> 00:40:34,710
devenir on-demand I've been there for

00:40:31,020 --> 00:40:38,370
our internal core team and initially we

00:40:34,710 --> 00:40:41,910
had few other stacks but because of the

00:40:38,370 --> 00:40:46,220
optimization initiative that we also

00:40:41,910 --> 00:40:51,480
running parallel to just cut down on our

00:40:46,220 --> 00:40:53,130
unnecessary spend we have optimized our

00:40:51,480 --> 00:40:54,780
stack in lower enrollments but

00:40:53,130 --> 00:40:58,560
production is the only one running with

00:40:54,780 --> 00:41:00,330
our family our cost operation operations

00:40:58,560 --> 00:41:03,870
that already talked about members are

00:41:00,330 --> 00:41:08,100
members and other teams as of last month

00:41:03,870 --> 00:41:10,130
on this pinnacle were 6,000 per month or

00:41:08,100 --> 00:41:15,020
that we are spending on the spinnaker

00:41:10,130 --> 00:41:19,350
stack across all the region's guests and

00:41:15,020 --> 00:41:21,900
production with result instances that we

00:41:19,350 --> 00:41:26,700
acquired recently I'm expecting that it

00:41:21,900 --> 00:41:28,140
would go down but low next month it's

00:41:26,700 --> 00:41:29,810
clear there's a relationship between the

00:41:28,140 --> 00:41:31,860
size of your particular let's say

00:41:29,810 --> 00:41:33,300
infrastructure in the cloud and your

00:41:31,860 --> 00:41:35,640
spinnaker installations so something to

00:41:33,300 --> 00:41:38,820
plan on as your footprint grows so does

00:41:35,640 --> 00:41:41,220
your spinnaker click print I thought was

00:41:38,820 --> 00:41:42,870
also interesting a question that comes

00:41:41,220 --> 00:41:44,850
up frequently is like installing

00:41:42,870 --> 00:41:46,980
spinnaker how do I install it right

00:41:44,850 --> 00:41:48,390
Netflix already said hey look we run off

00:41:46,980 --> 00:41:50,250
head and then there's different ways to

00:41:48,390 --> 00:41:51,330
install it and but it's been clear based

00:41:50,250 --> 00:41:52,980
on some of the things you all are saying

00:41:51,330 --> 00:41:53,550
that once it's up and running it's no

00:41:52,980 --> 00:41:55,470
big deal

00:41:53,550 --> 00:41:57,930
but how do you deal like how did you

00:41:55,470 --> 00:41:59,340
install it how do you get patch you know

00:41:57,930 --> 00:42:00,660
how do you patch it are you also just

00:41:59,340 --> 00:42:02,070
pulling it from you know head and

00:42:00,660 --> 00:42:04,850
whatnot what are your strategies for

00:42:02,070 --> 00:42:08,280
keeping up-to-date with the community I

00:42:04,850 --> 00:42:11,400
recently changed my strategy I am I

00:42:08,280 --> 00:42:13,230
started asking Cameron when when I have

00:42:11,400 --> 00:42:16,940
things now because he knows all the

00:42:13,230 --> 00:42:20,130
properties of spinnaker but yeah we just

00:42:16,940 --> 00:42:21,480
worked on it and figured out how how the

00:42:20,130 --> 00:42:24,690
properties were set and we were

00:42:21,480 --> 00:42:27,180
basically just leveraging that forever

00:42:24,690 --> 00:42:29,220
we have spinnaker config packages for

00:42:27,180 --> 00:42:32,550
like one package for spinnaker config

00:42:29,220 --> 00:42:34,740
one for Eiger config one for gate config

00:42:32,550 --> 00:42:39,330
and all our all rights are like like

00:42:34,740 --> 00:42:41,070
that yeah so configuring spinnaker is by

00:42:39,330 --> 00:42:43,770
far the hardest part of spinnaker my

00:42:41,070 --> 00:42:45,990
Indian and Mike we ended up many

00:42:43,770 --> 00:42:48,330
iterations so we would have like TGT

00:42:45,990 --> 00:42:49,680
spinnaker and then the component that we

00:42:48,330 --> 00:42:52,230
were modifying and we would just have

00:42:49,680 --> 00:42:53,880
like Rosco - local thank you - local and

00:42:52,230 --> 00:42:57,960
we would override all the defaults that

00:42:53,880 --> 00:42:59,760
were provided by upstream and then that

00:42:57,960 --> 00:43:02,400
worked pretty well like we were doing

00:42:59,760 --> 00:43:04,410
our kubernetes deployments with manifest

00:43:02,400 --> 00:43:08,850
files for that way for the longest time

00:43:04,410 --> 00:43:12,120
we were building a copies of upstream we

00:43:08,850 --> 00:43:15,540
were using the upstream install disk

00:43:12,120 --> 00:43:19,500
commands to create basically the

00:43:15,540 --> 00:43:21,690
containers and then we were uploading

00:43:19,500 --> 00:43:25,200
then we're using those in our kubernetes

00:43:21,690 --> 00:43:27,720
cluster we switched to halyard in the

00:43:25,200 --> 00:43:29,760
last month and a half and have found our

00:43:27,720 --> 00:43:31,950
lives to become significantly easier

00:43:29,760 --> 00:43:34,710
because it's a little annoying when I

00:43:31,950 --> 00:43:35,970
have to like when I push a feature and

00:43:34,710 --> 00:43:38,280
then I have to wait for it to come -

00:43:35,970 --> 00:43:40,980
they're really persistent enough and

00:43:38,280 --> 00:43:44,700
asking but like you could run on nightly

00:43:40,980 --> 00:43:48,360
if you really want them otherwise our

00:43:44,700 --> 00:43:51,060
GCP spinnaker runs pretty close to Ed

00:43:48,360 --> 00:43:54,150
whenever whenever there's a component

00:43:51,060 --> 00:43:54,589
like deck that gets updated me more or

00:43:54,150 --> 00:43:56,029
less

00:43:54,589 --> 00:44:00,130
upgrade everything else is what I had

00:43:56,029 --> 00:44:02,690
found or when a geek gets updated or

00:44:00,130 --> 00:44:05,839
yeah a few other components require a

00:44:02,690 --> 00:44:07,519
bunch of bumps and so to guarantee that

00:44:05,839 --> 00:44:10,249
that doesn't break we usually run

00:44:07,519 --> 00:44:12,529
through example pipelines I'm making

00:44:10,249 --> 00:44:14,269
sure that like you can still edit the

00:44:12,529 --> 00:44:24,289
pipeline this one that I have found that

00:44:14,269 --> 00:44:25,910
happens often we just stick like

00:44:24,289 --> 00:44:27,440
spinnaker won't point out in these

00:44:25,910 --> 00:44:30,380
packaged versions we just stick with

00:44:27,440 --> 00:44:31,969
whatever is in the latest version and we

00:44:30,380 --> 00:44:35,200
found that to be a lot better and we

00:44:31,969 --> 00:44:37,549
were just kind of like cats worked and

00:44:35,200 --> 00:44:43,279
occasionally we'd like update ego

00:44:37,549 --> 00:44:44,960
alright now we've had a lot of luck just

00:44:43,279 --> 00:44:47,029
go with the version that's packaged

00:44:44,960 --> 00:44:48,289
together you know we're not how you were

00:44:47,029 --> 00:44:50,869
deploying through our own tooling and

00:44:48,289 --> 00:44:52,460
through spinnaker but sticking to the

00:44:50,869 --> 00:44:58,489
versions that are defined but then that

00:44:52,460 --> 00:45:03,619
release has been really we are add to

00:44:58,489 --> 00:45:10,219
explore but we are deploying using our

00:45:03,619 --> 00:45:12,349
own ansible based scripting how often we

00:45:10,219 --> 00:45:15,710
do that our cadence currently to get all

00:45:12,349 --> 00:45:17,299
the latest has been alternate p ice so

00:45:15,710 --> 00:45:19,940
it's like every three months we look at

00:45:17,299 --> 00:45:23,630
it we would want to get into much more

00:45:19,940 --> 00:45:28,910
frequent cadence but it's where we are

00:45:23,630 --> 00:45:32,029
currently on our journey though or

00:45:28,910 --> 00:45:36,729
cursing Orca version 3 we realize that

00:45:32,029 --> 00:45:36,729
we have two remained up doing bit more

00:45:37,599 --> 00:45:43,099
do it across all the spinnaker services

00:45:41,420 --> 00:45:47,960
that we are using more frequently but

00:45:43,099 --> 00:45:52,489
it's all alternate v ice currently our

00:45:47,960 --> 00:45:54,469
resolve some thank you loris before that

00:45:52,489 --> 00:45:55,640
we actually had worked with Ken's on to

00:45:54,469 --> 00:45:58,549
initially onboard us with our

00:45:55,640 --> 00:46:00,079
installation of spinnaker large because

00:45:58,549 --> 00:46:02,869
they were working on some things with

00:46:00,079 --> 00:46:05,599
tariffs alarm and and bootstrapping

00:46:02,869 --> 00:46:07,579
spinnaker so essentially they kind of

00:46:05,599 --> 00:46:07,940
wrote to have a good upgrade process for

00:46:07,579 --> 00:46:09,170
us

00:46:07,940 --> 00:46:12,890
or how you actually got released so

00:46:09,170 --> 00:46:16,610
thank you ken salon but then since going

00:46:12,890 --> 00:46:18,590
to hire into versioned dependencies and

00:46:16,610 --> 00:46:21,050
actually version releases of spinnaker

00:46:18,590 --> 00:46:27,680
with kubernetes is probably relatively

00:46:21,050 --> 00:46:30,620
easy for us to roll out we have a handy

00:46:27,680 --> 00:46:33,890
mix of local forts and upstream packages

00:46:30,620 --> 00:46:36,230
which is hard to maintain and we are

00:46:33,890 --> 00:46:38,420
working hard on or the direction is to

00:46:36,230 --> 00:46:42,620
use upstream packages for all components

00:46:38,420 --> 00:46:45,260
and then we will start investing in

00:46:42,620 --> 00:46:47,360
using halyard because it seems really

00:46:45,260 --> 00:46:50,510
convenient now that is so many commits

00:46:47,360 --> 00:46:53,110
into spinning for it to actually no

00:46:50,510 --> 00:46:57,770
three the mall just convenient so yeah

00:46:53,110 --> 00:47:00,560
looking forward to that day it's to

00:46:57,770 --> 00:47:02,300
install we use terraform or we've been

00:47:00,560 --> 00:47:04,160
using terraform for a long time and then

00:47:02,300 --> 00:47:07,670
to upgrade we use spinnaker to deploy

00:47:04,160 --> 00:47:10,630
spinnaker about every two weeks we roll

00:47:07,670 --> 00:47:14,390
forward to to the last known working

00:47:10,630 --> 00:47:17,840
nightly build a yes and then stress test

00:47:14,390 --> 00:47:19,310
and internally dog food and you know

00:47:17,840 --> 00:47:20,750
just keep that cycle going every two

00:47:19,310 --> 00:47:23,450
weeks but we use spinnaker to the police

00:47:20,750 --> 00:47:26,960
vinegar any questions from the audience

00:47:23,450 --> 00:47:30,050
I still have the conscious on their ask

00:47:26,960 --> 00:47:34,040
us a question even we should have

00:47:30,050 --> 00:47:37,840
switched so we put a sort of effort with

00:47:34,040 --> 00:47:40,640
1.0 release toward documentation halyard

00:47:37,840 --> 00:47:43,700
the formal release process which patches

00:47:40,640 --> 00:47:46,070
them together monitoring support out of

00:47:43,700 --> 00:47:47,540
there obviously security authentication

00:47:46,070 --> 00:47:50,270
authorization and we felt like that was

00:47:47,540 --> 00:47:53,120
a good line in the sand for us to get us

00:47:50,270 --> 00:47:56,090
a finish to the start line right so as

00:47:53,120 --> 00:47:58,910
far as operating spinnaker goes no

00:47:56,090 --> 00:48:04,280
security manageability etc what else is

00:47:58,910 --> 00:48:10,150
what's missing you couldn't stop from

00:48:04,280 --> 00:48:10,150
yes without years I've been very happy

00:48:13,130 --> 00:48:18,190
well that's it

00:48:14,570 --> 00:48:18,190
[Laughter]

00:48:32,500 --> 00:48:37,790
spinnaker monitoring there is a package

00:48:35,240 --> 00:48:40,280
okay over there but there is a package

00:48:37,790 --> 00:48:42,830
to install prometheus and Prometheus

00:48:40,280 --> 00:48:46,010
support but it's not a Enterprise

00:48:42,830 --> 00:48:47,840
installation of the server if you want

00:48:46,010 --> 00:48:54,440
to find more about that Eric's giving a

00:48:47,840 --> 00:48:58,840
presentation at 10:00 on monitoring it's

00:48:54,440 --> 00:49:01,040
at 11:00 because actually it is I

00:48:58,840 --> 00:49:15,830
there's a question down here some wants

00:49:01,040 --> 00:49:17,690
to toss it down oh nice it's been a

00:49:15,830 --> 00:49:20,050
great internals with the 1.0 release

00:49:17,690 --> 00:49:25,100
we've lost some documentation about like

00:49:20,050 --> 00:49:29,150
the subnet naming convention isn't there

00:49:25,100 --> 00:49:32,300
anymore and there's also everything is

00:49:29,150 --> 00:49:34,700
how your how your halyard now but how do

00:49:32,300 --> 00:49:36,350
you successfully use halyard in a

00:49:34,700 --> 00:49:39,050
distributed Operations environment when

00:49:36,350 --> 00:49:41,900
you've got this like dot Hal directory

00:49:39,050 --> 00:49:43,490
that contains secrets and how do you

00:49:41,900 --> 00:49:46,430
secure that and how do you share that

00:49:43,490 --> 00:49:49,040
and you collaborate with that hasn't

00:49:46,430 --> 00:49:50,510
really been described so that's great

00:49:49,040 --> 00:49:51,980
feedback that's exactly what we're

00:49:50,510 --> 00:49:54,440
asking for so there's two ways you can

00:49:51,980 --> 00:49:58,670
submit that is one is there's on each

00:49:54,440 --> 00:50:00,560
page there's a there's a button on on

00:49:58,670 --> 00:50:01,610
each page there's a button for something

00:50:00,560 --> 00:50:01,850
like send feedback or something like

00:50:01,610 --> 00:50:03,800
that

00:50:01,850 --> 00:50:05,600
so please aggressively we look at those

00:50:03,800 --> 00:50:09,350
press the buttons say here's what is

00:50:05,600 --> 00:50:11,450
missing at worst we'll have a tracking

00:50:09,350 --> 00:50:14,060
issue for things that are missing we

00:50:11,450 --> 00:50:16,930
want to go to fulfill these things and

00:50:14,060 --> 00:50:20,010
also we accept people request

00:50:16,930 --> 00:50:23,740
documentation on your own as well

00:50:20,010 --> 00:50:26,170
yeah so specifically for how do you use

00:50:23,740 --> 00:50:29,200
halyard in such a way that it's pretty

00:50:26,170 --> 00:50:30,640
repeatable we should do a breakout

00:50:29,200 --> 00:50:35,710
session for that because I have lots of

00:50:30,640 --> 00:50:37,180
thoughts my family grade won't be aware

00:50:35,710 --> 00:50:38,440
of time because we are actually running

00:50:37,180 --> 00:50:42,970
over and we have to go

00:50:38,440 --> 00:50:53,079
it's 953 so you have 30 seconds any

00:50:42,970 --> 00:51:05,440
parting top dots you tell you provide

00:50:53,079 --> 00:51:12,039
AWS support for how your targets not

00:51:05,440 --> 00:51:13,750
going to do it I'd rather say you

00:51:12,039 --> 00:51:16,869
spinnaker so if you're not currently

00:51:13,750 --> 00:51:19,539
using spinnaker try it out it's great

00:51:16,869 --> 00:51:21,240
software it'll speed up your business

00:51:19,539 --> 00:51:23,559
it's amazing

00:51:21,240 --> 00:51:27,549
can we have a halyard stay for spinnaker

00:51:23,559 --> 00:51:29,710
because place with spinnaker halyard I

00:51:27,549 --> 00:51:31,180
just want to say thanks for organizing

00:51:29,710 --> 00:51:31,770
this the community here is pretty

00:51:31,180 --> 00:51:34,299
awesome

00:51:31,770 --> 00:51:36,069
it's probably as far as the pace of

00:51:34,299 --> 00:51:38,440
development is only second to kubernetes

00:51:36,069 --> 00:51:40,210
so terminators it says crazy pace and I

00:51:38,440 --> 00:51:41,890
think spinnaker is right behind there as

00:51:40,210 --> 00:51:44,799
far as the updates and the feedback from

00:51:41,890 --> 00:51:50,650
community so thanks it's one thing you

00:51:44,799 --> 00:51:52,240
wanted to ask and Ian's team you have so

00:51:50,650 --> 00:51:54,849
parts of outlets are open source but the

00:51:52,240 --> 00:51:56,589
rest of it I doubt we'll be open source

00:51:54,849 --> 00:51:59,680
anytime soon because we're switching

00:51:56,589 --> 00:52:01,690
from Splunk and now to out to push all

00:51:59,680 --> 00:52:03,400
the aggregators and combination of

00:52:01,690 --> 00:52:07,299
things that we are using to monitor the

00:52:03,400 --> 00:52:10,270
stack wanted to see if Atlas it was

00:52:07,299 --> 00:52:15,309
yesterday someone sure it is awesome

00:52:10,270 --> 00:52:18,010
thing thank you for bringing this one

00:52:15,309 --> 00:52:23,500
forum to exchange all these great ideas

00:52:18,010 --> 00:52:24,970
and I want to encourage everyone to open

00:52:23,500 --> 00:52:26,529
source your tools I feel like talking

00:52:24,970 --> 00:52:28,000
ever in here everyone has these internal

00:52:26,529 --> 00:52:30,069
tools they're using for spinnaker and a

00:52:28,000 --> 00:52:31,779
lot of doing some of our things even if

00:52:30,069 --> 00:52:33,320
you think your tool is niche or no no

00:52:31,779 --> 00:52:35,660
use it it's still awesome to opens

00:52:33,320 --> 00:52:37,070
and I think evarin gleans ideas from

00:52:35,660 --> 00:52:39,680
these open source projects that maybe

00:52:37,070 --> 00:52:44,690
have a star on github so open source

00:52:39,680 --> 00:52:48,290
your tools and share you know extend

00:52:44,690 --> 00:52:52,040
that and say if you have ideas for

00:52:48,290 --> 00:52:53,360
things to improve and ideas like new

00:52:52,040 --> 00:52:55,580
features that you want to build you

00:52:53,360 --> 00:52:59,420
should jump into slack and start pinging

00:52:55,580 --> 00:53:01,790
people there's no there's no shame in

00:52:59,420 --> 00:53:03,590
like throwing out ideas because that's

00:53:01,790 --> 00:53:05,870
that's kind of what we're all here for

00:53:03,590 --> 00:53:12,290
is innovating and making the product

00:53:05,870 --> 00:53:14,000
better that is probably the right place

00:53:12,290 --> 00:53:16,160
if you're gonna be actually doing like

00:53:14,000 --> 00:53:18,500
development work if they kick around an

00:53:16,160 --> 00:53:21,790
idea to see if it's a worthwhile

00:53:18,500 --> 00:53:24,830
endeavor then that's probably general

00:53:21,790 --> 00:53:26,570
alright great so let's let's get moving

00:53:24,830 --> 00:53:28,430
to the the next session I appreciate

00:53:26,570 --> 00:53:35,090
everyone on the panel let's give them

00:53:28,430 --> 00:53:36,620
all they can and I think you know this

00:53:35,090 --> 00:53:39,350
this conference is a great way of

00:53:36,620 --> 00:53:41,390
turning you know virtual strangers into

00:53:39,350 --> 00:53:43,540
colleagues so you know this is this is

00:53:41,390 --> 00:53:43,540

YouTube URL: https://www.youtube.com/watch?v=aK0FfDyH4gQ


