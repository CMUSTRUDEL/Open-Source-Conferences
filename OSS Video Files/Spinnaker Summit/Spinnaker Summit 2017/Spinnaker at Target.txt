Title: Spinnaker at Target
Publication date: 2017-09-24
Playlist: Spinnaker Summit 2017
Description: 
	EDWIN AVALOS, TARGET

Spinnaker is one of the foundations for our “Target Application Platform”, TAP for short. Why Spinnaker was the choice a year ago, why we continue to invest in it, why we are building the rest of the TAP. And how Target’s model is something that larger companies might want to emulate to provide the ubiquitous experience across multiple compute providers. 

From Spinnaker Summit 2017
Captions: 
	00:00:12,590 --> 00:00:18,960
and I need the specificity you go by

00:00:17,070 --> 00:00:21,990
team tacos but we deploy is going to be

00:00:18,960 --> 00:00:25,320
in many different forms to manage all of

00:00:21,990 --> 00:00:28,080
our different forms I'll be telling the

00:00:25,320 --> 00:00:29,310
story of our path from chef to a

00:00:28,080 --> 00:00:31,500
beautiful infrastructure and then

00:00:29,310 --> 00:00:36,450
finally to spoon crane target for last

00:00:31,500 --> 00:00:38,010
year and a half so the background

00:00:36,450 --> 00:00:41,370
information if you're not familiar with

00:00:38,010 --> 00:00:43,680
target which not everybody is from the

00:00:41,370 --> 00:00:46,079
United States here so it is a company

00:00:43,680 --> 00:00:48,210
founded fifty five years ago so you

00:00:46,079 --> 00:00:50,430
probably recognize like the large

00:00:48,210 --> 00:00:52,739
targets far fronts but we also have

00:00:50,430 --> 00:00:54,690
these smaller formats so this is

00:00:52,739 --> 00:00:57,660
actually my mobile phones in downtown

00:00:54,690 --> 00:00:59,730
Minneapolis yeah newly renovated like

00:00:57,660 --> 00:01:02,820
for kids which i think is really cool to

00:00:59,730 --> 00:01:04,409
see this was like the main picture I

00:01:02,820 --> 00:01:07,770
like what I see that every single day

00:01:04,409 --> 00:01:09,630
and we have 1800 these stores all across

00:01:07,770 --> 00:01:12,689
the United States we have three hundred

00:01:09,630 --> 00:01:15,060
twenty three thousand nationwide I think

00:01:12,689 --> 00:01:17,159
they come about ten to fifteen thousand

00:01:15,060 --> 00:01:19,890
employees in terms of target technology

00:01:17,159 --> 00:01:25,619
services and then we have 39

00:01:19,890 --> 00:01:27,630
distribution centers so to give us a

00:01:25,619 --> 00:01:29,549
little bit back on where we were two

00:01:27,630 --> 00:01:31,860
years ago when I started that target I

00:01:29,549 --> 00:01:34,290
actually my first week at Target was

00:01:31,860 --> 00:01:37,200
doing chef training and luckily I did

00:01:34,290 --> 00:01:40,619
not have to use so much of that not we

00:01:37,200 --> 00:01:42,899
ended up target chose chef as the

00:01:40,619 --> 00:01:44,700
standard configuration language for all

00:01:42,899 --> 00:01:47,610
application teams as well as the

00:01:44,700 --> 00:01:49,759
instructions so we were creating a base

00:01:47,610 --> 00:01:51,630
image product using the chef process

00:01:49,759 --> 00:01:54,240
application teams were then layering

00:01:51,630 --> 00:01:56,939
their chef cook bugs on top of our base

00:01:54,240 --> 00:02:01,560
image and creating what ended up being

00:01:56,939 --> 00:02:03,060
when I consider a mess and we play

00:02:01,560 --> 00:02:05,490
except is great when you need it to be

00:02:03,060 --> 00:02:07,770
like one little thing few thousand times

00:02:05,490 --> 00:02:09,550
maybe but what do you really get down to

00:02:07,770 --> 00:02:11,410
it we were creating a business

00:02:09,550 --> 00:02:13,600
we're updating it too often for

00:02:11,410 --> 00:02:15,550
depending on a young update run by a

00:02:13,600 --> 00:02:18,070
chef cookbook to update that based

00:02:15,550 --> 00:02:20,920
images on every single converge if you

00:02:18,070 --> 00:02:23,200
really think about that the horror story

00:02:20,920 --> 00:02:25,780
and that I tell people that it takes it

00:02:23,200 --> 00:02:28,120
took us 45 minutes to converge our

00:02:25,780 --> 00:02:29,800
Jenkins server this was a factor of

00:02:28,120 --> 00:02:31,450
downloading all the chickens plugins

00:02:29,800 --> 00:02:33,580
restarting their Jenkins servers

00:02:31,450 --> 00:02:36,850
multiple times inner strength of process

00:02:33,580 --> 00:02:39,070
we had about 1800 web hooks that we had

00:02:36,850 --> 00:02:42,220
to register on every single startup and

00:02:39,070 --> 00:02:44,140
so it was a ugly star and that is one of

00:02:42,220 --> 00:02:47,050
the motivations for wanting to kill

00:02:44,140 --> 00:02:50,860
drinkin's that target specifically so I

00:02:47,050 --> 00:02:53,290
can talk about that later but yeah so as

00:02:50,860 --> 00:02:55,090
cookbooks aged we found that they built

00:02:53,290 --> 00:02:57,850
up a lot of cruft they would increase

00:02:55,090 --> 00:03:00,610
the converging times a lot of the App

00:02:57,850 --> 00:03:03,940
teams were not very confidence in their

00:03:00,610 --> 00:03:07,120
cookbooks converging it on the later

00:03:03,940 --> 00:03:09,250
date after like maybe a month or two and

00:03:07,120 --> 00:03:11,740
so this was really a problem that the

00:03:09,250 --> 00:03:13,540
chef has tried to sell ability as chefs

00:03:11,740 --> 00:03:16,930
Darrow where you have all your

00:03:13,540 --> 00:03:18,550
dependencies locally but even then that

00:03:16,930 --> 00:03:21,190
would require in a complete change in

00:03:18,550 --> 00:03:24,190
life our release process and what

00:03:21,190 --> 00:03:27,340
deployments were you see what I'm

00:03:24,190 --> 00:03:30,220
leading up to here yeah so teams got

00:03:27,340 --> 00:03:34,300
into the habit of also many many things

00:03:30,220 --> 00:03:37,030
because they're just want so the example

00:03:34,300 --> 00:03:40,030
is that you know when our website is no

00:03:37,030 --> 00:03:42,610
sound an end-around black friday so

00:03:40,030 --> 00:03:44,380
teams would then scale up the server

00:03:42,610 --> 00:03:48,360
groups and then scale back down manually

00:03:44,380 --> 00:03:51,130
instead of letting scaling just do this

00:03:48,360 --> 00:03:53,290
so it's just creating habits that are

00:03:51,130 --> 00:03:55,000
considered free and then you know has

00:03:53,290 --> 00:03:59,650
had the chance to people forgotten to

00:03:55,000 --> 00:04:01,570
scale down their servers later so why

00:03:59,650 --> 00:04:04,030
didn't target choose vinegar or why

00:04:01,570 --> 00:04:05,830
chosen I always get confused which one

00:04:04,030 --> 00:04:08,140
I'm supposed to put there English is my

00:04:05,830 --> 00:04:11,110
second language I use that as an excuse

00:04:08,140 --> 00:04:14,020
but we were looking at a bunch of new

00:04:11,110 --> 00:04:15,760
placement tools and so the replacement

00:04:14,020 --> 00:04:18,580
tools that we were looking at the time

00:04:15,760 --> 00:04:21,049
were these down there's a lot of things

00:04:18,580 --> 00:04:24,800
one arms codify Cloud Foundry

00:04:21,049 --> 00:04:26,930
shift and so you're looking at all these

00:04:24,800 --> 00:04:30,680
tools and trying to find like one that

00:04:26,930 --> 00:04:32,539
was the Silver Bullet we think spinnaker

00:04:30,680 --> 00:04:36,110
checked off as many of the boxes he

00:04:32,539 --> 00:04:37,729
possibly could and what it really was

00:04:36,110 --> 00:04:40,190
giving us was a story of immutable

00:04:37,729 --> 00:04:41,960
interest he had it groups that were

00:04:40,190 --> 00:04:45,139
realizing that their converters were

00:04:41,960 --> 00:04:47,479
very Lake tibbitt fun it was easy to

00:04:45,139 --> 00:04:49,490
bring it if upstream change their URL

00:04:47,479 --> 00:04:50,960
for a dependency within their should I

00:04:49,490 --> 00:04:53,780
cook book didn't conversions and they

00:04:50,960 --> 00:04:55,069
had to go in and modify code so the

00:04:53,780 --> 00:04:57,440
teams that were high-performing were

00:04:55,069 --> 00:04:59,330
already using Chef zero or a process

00:04:57,440 --> 00:05:03,470
similar to zero or they would take a

00:04:59,330 --> 00:05:05,210
snapshot volume and employ that so this

00:05:03,470 --> 00:05:06,620
really gave us the pattern of in you

00:05:05,210 --> 00:05:08,449
know infrastructure you can scale in

00:05:06,620 --> 00:05:09,949
seconds you can scale in minutes versus

00:05:08,449 --> 00:05:13,430
the thirty minutes that it takes for you

00:05:09,949 --> 00:05:14,870
those all of our dependencies were baked

00:05:13,430 --> 00:05:16,550
in so we no longer had runtime

00:05:14,870 --> 00:05:17,090
dependencies apart from council and

00:05:16,550 --> 00:05:20,080
vault

00:05:17,090 --> 00:05:25,759
we have no dependencies baked into a

00:05:20,080 --> 00:05:27,469
machine image the other big reason that

00:05:25,759 --> 00:05:29,719
affected of course is because it's

00:05:27,469 --> 00:05:31,130
multiple cloud providers support the big

00:05:29,719 --> 00:05:34,340
thing that target is known be having

00:05:31,130 --> 00:05:36,110
multi cloud strategy and so we're really

00:05:34,340 --> 00:05:38,900
really trying to avoid vendor lock-in

00:05:36,110 --> 00:05:40,880
and the way that we do that is by

00:05:38,900 --> 00:05:42,849
employing the use of a lot of open

00:05:40,880 --> 00:05:44,930
source software off you'd rather

00:05:42,849 --> 00:05:48,919
contribute and use open source software

00:05:44,930 --> 00:05:51,229
than to a vendor whatever fees they

00:05:48,919 --> 00:05:55,069
would have to run something for us and

00:05:51,229 --> 00:05:56,659
so like for example if you're in GCP you

00:05:55,069 --> 00:06:00,110
don't necessarily want to use the

00:05:56,659 --> 00:06:02,150
services that won't stick you in DCP

00:06:00,110 --> 00:06:05,440
from water and I'll talk about a

00:06:02,150 --> 00:06:08,479
migration that we did in last year

00:06:05,440 --> 00:06:10,550
extensibility at its core so I think

00:06:08,479 --> 00:06:12,259
since I started using spinnaker cahit's

00:06:10,550 --> 00:06:15,740
DCOs and a few other cloud providers

00:06:12,259 --> 00:06:17,090
have been added like I keep joking with

00:06:15,740 --> 00:06:19,159
every single time there's a new cloud

00:06:17,090 --> 00:06:20,599
provider had always switch that platform

00:06:19,159 --> 00:06:24,800
because I can already probably configure

00:06:20,599 --> 00:06:26,599
it and so I put TCOs announcing that

00:06:24,800 --> 00:06:29,640
they had kubernetes available as it's

00:06:26,599 --> 00:06:31,130
like well we can probably search them

00:06:29,640 --> 00:06:32,810
[Music]

00:06:31,130 --> 00:06:34,699
the other reason that we really really

00:06:32,810 --> 00:06:36,500
like Spectre and I think a lot of people

00:06:34,699 --> 00:06:38,570
are slowly realizing this is that the

00:06:36,500 --> 00:06:40,250
pipeline engine is very powerful you

00:06:38,570 --> 00:06:42,380
know everything that you really need and

00:06:40,250 --> 00:06:44,840
I think guards presentation already

00:06:42,380 --> 00:06:47,330
mentions that they have the post pre

00:06:44,840 --> 00:06:49,220
post staging and post product or

00:06:47,330 --> 00:06:50,870
something like that like I want to

00:06:49,220 --> 00:06:52,250
emulate that and like people are doing

00:06:50,870 --> 00:06:55,400
really really cool things with the

00:06:52,250 --> 00:06:56,900
pipeline engine and you should get out

00:06:55,400 --> 00:06:59,990
into the greater community but also

00:06:56,900 --> 00:07:04,010
because app teams more power over what

00:06:59,990 --> 00:07:06,100
they do and I guess I didn't previously

00:07:04,010 --> 00:07:08,510
talk about what our O'Toole was we

00:07:06,100 --> 00:07:11,180
developed an internal tool is known as

00:07:08,510 --> 00:07:12,770
Houston the idea was that and eventually

00:07:11,180 --> 00:07:16,669
it would have pipelines so Houston

00:07:12,770 --> 00:07:18,440
country and we actually finally got to

00:07:16,669 --> 00:07:20,000
the stage where Houston was returned up

00:07:18,440 --> 00:07:22,580
then we started implementing pipelines

00:07:20,000 --> 00:07:24,410
but we found that using we're having a

00:07:22,580 --> 00:07:28,789
really hard time writing out complex

00:07:24,410 --> 00:07:31,880
JSON files that just we're very finicky

00:07:28,789 --> 00:07:33,410
and so spinnaker gives you that GUI for

00:07:31,880 --> 00:07:35,360
a lot of people like we're trying to

00:07:33,410 --> 00:07:38,000
build the tool that 90% people can use

00:07:35,360 --> 00:07:41,750
but maybe the 10% of power users or the

00:07:38,000 --> 00:07:43,610
tenn 35% on either side that need a

00:07:41,750 --> 00:07:45,800
little bit more help for people who are

00:07:43,610 --> 00:07:47,570
power users we have a group at Target

00:07:45,800 --> 00:07:50,000
they use a spinnaker to deploy there's

00:07:47,570 --> 00:07:55,340
no spirit and then runs their charge

00:07:50,000 --> 00:07:59,120
within this was fear brief note about

00:07:55,340 --> 00:08:02,150
the OpenStack driver so a year and a

00:07:59,120 --> 00:08:03,800
half ago our managers from Veritas and

00:08:02,150 --> 00:08:06,470
target realized that we both want me to

00:08:03,800 --> 00:08:08,750
OpenStack drivers and so they reached

00:08:06,470 --> 00:08:10,520
out to each other they had a few

00:08:08,750 --> 00:08:12,020
conference calls and then I think it

00:08:10,520 --> 00:08:14,080
took about six months to get the

00:08:12,020 --> 00:08:18,260
OpenStack driver completed within there

00:08:14,080 --> 00:08:20,510
our little spiel about is that we built

00:08:18,260 --> 00:08:23,570
up the POC for an OpenStack environment

00:08:20,510 --> 00:08:26,780
last year during our peak seasons and as

00:08:23,570 --> 00:08:29,840
in 2016 we took production traffic with

00:08:26,780 --> 00:08:31,789
a patterns that emulated our previous

00:08:29,840 --> 00:08:34,099
cloud infrastructure we were able to

00:08:31,789 --> 00:08:37,919
deploy our council our fault three

00:08:34,099 --> 00:08:40,479
servers into this POC

00:08:37,919 --> 00:08:42,270
more or less gave people the exact same

00:08:40,479 --> 00:08:44,410
experience for that single application

00:08:42,270 --> 00:08:46,240
application to get was able to take

00:08:44,410 --> 00:08:48,550
production traffic on a platform you

00:08:46,240 --> 00:08:53,710
brought up fairly quickly and less than

00:08:48,550 --> 00:08:56,020
three months this is where I think we

00:08:53,710 --> 00:08:58,900
need to spend a little bit more time

00:08:56,020 --> 00:09:01,750
talking about is that establishing a

00:08:58,900 --> 00:09:03,580
pattern is very important for spinnaker

00:09:01,750 --> 00:09:08,680
adoption especially at large company

00:09:03,580 --> 00:09:11,470
like Target we like talking to people

00:09:08,680 --> 00:09:12,580
here we've I've started to realize a

00:09:11,470 --> 00:09:14,860
lots of people are doing really

00:09:12,580 --> 00:09:16,870
complicated things with the API but

00:09:14,860 --> 00:09:18,880
they're also not doing it at the scale

00:09:16,870 --> 00:09:20,680
it has to be doing it and so we've

00:09:18,880 --> 00:09:22,870
actually spent the last mostly

00:09:20,680 --> 00:09:24,970
year-and-a-half teaching users about

00:09:22,870 --> 00:09:27,130
immutable infrastructure about how do

00:09:24,970 --> 00:09:29,080
you use this pipeline to make and then

00:09:27,130 --> 00:09:32,470
deploy and then to Flickr and connect to

00:09:29,080 --> 00:09:35,680
the EOP and so it's been a lot of user

00:09:32,470 --> 00:09:38,520
education and like shared managed

00:09:35,680 --> 00:09:43,180
pipelines and declarative pipelines are

00:09:38,520 --> 00:09:45,130
a great like tool for super users but a

00:09:43,180 --> 00:09:46,570
lot of the users don't necessarily need

00:09:45,130 --> 00:09:48,580
them so somebody brought up on glass

00:09:46,570 --> 00:09:50,830
talk it's like how often are you

00:09:48,580 --> 00:09:53,380
actually fiddling with a pipeline like

00:09:50,830 --> 00:09:54,730
once you've figured out your patent

00:09:53,380 --> 00:09:57,790
you're maybe gonna change your loan

00:09:54,730 --> 00:10:00,010
balance at once or twice a year but it's

00:09:57,790 --> 00:10:01,660
been something that we've wanted to work

00:10:00,010 --> 00:10:03,730
on for so long but it's always moved

00:10:01,660 --> 00:10:11,590
down our priority list or something you

00:10:03,730 --> 00:10:14,400
know the other thing that we realized

00:10:11,590 --> 00:10:17,170
actually pushes a lot of our adoption is

00:10:14,400 --> 00:10:19,360
creating a face image product and so

00:10:17,170 --> 00:10:23,980
building all of our services into a base

00:10:19,360 --> 00:10:26,980
image and then having council vaults our

00:10:23,980 --> 00:10:29,320
logging stack our metric stack all built

00:10:26,980 --> 00:10:31,360
into the space M&E means that teams are

00:10:29,320 --> 00:10:35,140
actually enticed to come to spinnaker

00:10:31,360 --> 00:10:37,000
and stop using our own Houston one thing

00:10:35,140 --> 00:10:40,720
that we never really got my sign-off on

00:10:37,000 --> 00:10:43,270
was turn off Houston we let teams use

00:10:40,720 --> 00:10:47,140
Houston up until about two weeks ago

00:10:43,270 --> 00:10:50,740
turned it off and now all target either

00:10:47,140 --> 00:10:54,430
uses vinegar or uses kubernetes and so

00:10:50,740 --> 00:10:57,250
target comm is 50% if I could burn a

00:10:54,430 --> 00:10:59,320
tease out the woman I think that's just

00:10:57,250 --> 00:11:01,089
like you create these patterns that like

00:10:59,320 --> 00:11:04,899
really really gets people and enticed

00:11:01,089 --> 00:11:07,060
into what I think kubernetes really does

00:11:04,899 --> 00:11:10,180
is like its distracted a lot of your

00:11:07,060 --> 00:11:11,860
problems away and I think the one that

00:11:10,180 --> 00:11:14,080
people really love from application to

00:11:11,860 --> 00:11:17,250
perspective is Prometheus and so like

00:11:14,080 --> 00:11:19,510
that's not like a first-class thing in

00:11:17,250 --> 00:11:21,700
uber Nettie's but lots of you learn

00:11:19,510 --> 00:11:24,970
Prometheus for the metric stack and so

00:11:21,700 --> 00:11:26,470
being able to use that has gotten a lot

00:11:24,970 --> 00:11:31,000
of teams to switch over because they're

00:11:26,470 --> 00:11:33,790
like oh well you can get back to 3d one

00:11:31,000 --> 00:11:36,279
thing that we also realized is that our

00:11:33,790 --> 00:11:39,520
cookbooks were also bad citizens as a

00:11:36,279 --> 00:11:41,260
militating average conversion so we had

00:11:39,520 --> 00:11:43,510
to establish a pattern of how do you

00:11:41,260 --> 00:11:47,980
take your book book and create an RPM

00:11:43,510 --> 00:11:51,010
out of it we chose rpms and we ended up

00:11:47,980 --> 00:11:55,180
facing a target rpm plug-in based on

00:11:51,010 --> 00:11:57,160
nebula that had a little bit more target

00:11:55,180 --> 00:11:59,260
opinions about how rpm should be created

00:11:57,160 --> 00:12:01,390
and thankfully then we only have to

00:11:59,260 --> 00:12:03,760
support one OS which i found called

00:12:01,390 --> 00:12:06,880
summon instead a couple of different

00:12:03,760 --> 00:12:09,880
offices so that really helped in just

00:12:06,880 --> 00:12:12,160
making sure that users were able to come

00:12:09,880 --> 00:12:17,560
over to our platform as easy as possible

00:12:12,160 --> 00:12:20,529
and that we made it so good that my

00:12:17,560 --> 00:12:23,050
favorite example is a team really didn't

00:12:20,529 --> 00:12:25,660
like being within our own accounts and

00:12:23,050 --> 00:12:27,279
so they asked oh can be a set of our own

00:12:25,660 --> 00:12:28,350
accounts will stand up everything

00:12:27,279 --> 00:12:30,700
ourselves

00:12:28,350 --> 00:12:34,120
and I said bout a week and they came

00:12:30,700 --> 00:12:35,740
back they they came back and realized oh

00:12:34,120 --> 00:12:38,170
wait the base image is actually

00:12:35,740 --> 00:12:40,810
something that we need oh and you have

00:12:38,170 --> 00:12:42,760
spinnaker they're like we use

00:12:40,810 --> 00:12:48,370
spinnaker deploy missiles fear so it's

00:12:42,760 --> 00:12:49,530
just like it was very nice to feel

00:12:48,370 --> 00:12:52,559
native

00:12:49,530 --> 00:12:52,559
[Music]

00:12:57,300 --> 00:13:03,760
our CSP migration so over the course of

00:13:01,570 --> 00:13:06,880
the last eight months so up until two

00:13:03,760 --> 00:13:11,680
weeks ago we actually from a previous

00:13:06,880 --> 00:13:14,290
cloud provider to GCP and so it really

00:13:11,680 --> 00:13:17,340
was only about a month's worth work of

00:13:14,290 --> 00:13:20,290
moving our components of console phones

00:13:17,340 --> 00:13:23,080
we have a service called cost me that

00:13:20,290 --> 00:13:25,690
does not any management and a few other

00:13:23,080 --> 00:13:28,180
tools that we had written for the old

00:13:25,690 --> 00:13:30,310
cloud provider we modified slightly for

00:13:28,180 --> 00:13:33,370
our proof of concept of OpenStack and

00:13:30,310 --> 00:13:36,250
then tweak ever so slightly to getting

00:13:33,370 --> 00:13:38,320
into TCP so we were able to provide our

00:13:36,250 --> 00:13:41,410
platform anyway and we actually broke

00:13:38,320 --> 00:13:44,680
down I think at least 80 application

00:13:41,410 --> 00:13:47,410
teams until waves each of those waves is

00:13:44,680 --> 00:13:50,140
able to lose their move their stacks

00:13:47,410 --> 00:13:52,030
over to DCP then once they were there

00:13:50,140 --> 00:13:53,950
any service that had them as a

00:13:52,030 --> 00:13:56,410
dependency can move on to kiss you see

00:13:53,950 --> 00:14:00,820
so they just built up a handsome there

00:13:56,410 --> 00:14:03,700
that snowball the GCP to also run some

00:14:00,820 --> 00:14:08,350
things in the store yeah I'll talk about

00:14:03,700 --> 00:14:09,730
that with tap slides in Selma be the

00:14:08,350 --> 00:14:11,170
teaser for that is that what are gonna

00:14:09,730 --> 00:14:11,800
be running kubernetes and all the

00:14:11,170 --> 00:14:13,630
starseeds

00:14:11,800 --> 00:14:15,370
was there anything else in terms of that

00:14:13,630 --> 00:14:17,170
migration that you used for majorettes

00:14:15,370 --> 00:14:21,160
who in turn select databases or anything

00:14:17,170 --> 00:14:23,830
that you needed on google we do not

00:14:21,160 --> 00:14:27,520
comment on which contra matter we care

00:14:23,830 --> 00:14:29,950
from and so there was so the whole

00:14:27,520 --> 00:14:32,350
purpose of being in the cloud is that we

00:14:29,950 --> 00:14:34,870
basically want to use it as a scaling

00:14:32,350 --> 00:14:38,250
harbin not necessarily as a solutions

00:14:34,870 --> 00:14:40,570
platform and so anything that would be

00:14:38,250 --> 00:14:42,760
platform specific like a database as a

00:14:40,570 --> 00:14:45,550
service our whole policy was if you

00:14:42,760 --> 00:14:47,800
can't migrate it from within four weeks

00:14:45,550 --> 00:14:50,410
don't use it so none of our teams are

00:14:47,800 --> 00:14:53,800
actually integrated into Claude léonard

00:14:50,410 --> 00:14:57,000
service heavily enough to need to react

00:14:53,800 --> 00:14:59,889
to technology and so we actually have

00:14:57,000 --> 00:15:02,649
service teams that offered confidence or

00:14:59,889 --> 00:15:06,339
Cassandra service metrics and telemetry

00:15:02,649 --> 00:15:07,779
and logging as separate services and

00:15:06,339 --> 00:15:11,079
those are all built into our base image

00:15:07,779 --> 00:15:17,799
and Wednesday converted into gcpd really

00:15:11,079 --> 00:15:19,389
just pretty much and what we really

00:15:17,799 --> 00:15:21,790
really like to spin up report was that

00:15:19,389 --> 00:15:23,859
like when you really break it down the

00:15:21,790 --> 00:15:25,540
specter broke up our deployments into

00:15:23,859 --> 00:15:29,139
the idea of server groups and load

00:15:25,540 --> 00:15:30,999
balancers and security groups that

00:15:29,139 --> 00:15:32,949
translates though most every single

00:15:30,999 --> 00:15:36,069
cloud provider within spinnaker and not

00:15:32,949 --> 00:15:38,169
all and it's very pretty and teams

00:15:36,069 --> 00:15:44,559
didn't have to relearn everything that

00:15:38,169 --> 00:15:47,350
was specific to GC we're actually more

00:15:44,559 --> 00:15:50,889
we're moving from another vendor into

00:15:47,350 --> 00:15:54,309
our internal cloud provider which is

00:15:50,889 --> 00:15:56,350
OpenStack stuff and we're actually not

00:15:54,309 --> 00:15:59,079
seeing as many hard difficulties as we

00:15:56,350 --> 00:16:01,540
did with like at the size and and UCP

00:15:59,079 --> 00:16:05,169
migrations our OpenStack migration from

00:16:01,540 --> 00:16:06,939
the previous vendor is now it's going

00:16:05,169 --> 00:16:08,739
pretty well like we were able to get our

00:16:06,939 --> 00:16:10,660
platform set up in a month and a half in

00:16:08,739 --> 00:16:14,189
OpenStack this time and teams are gonna

00:16:10,660 --> 00:16:14,189
be starting to use that platform

00:16:15,660 --> 00:16:20,199
so this brings us to the target

00:16:18,459 --> 00:16:23,259
application platform so this is our

00:16:20,199 --> 00:16:25,929
little messed up for the target API or

00:16:23,259 --> 00:16:28,540
the tap API so it's a recursive acronym

00:16:25,929 --> 00:16:31,899
so it's the target application platform

00:16:28,540 --> 00:16:35,739
API and so we call it tap II for short

00:16:31,899 --> 00:16:37,509
and so he is my favorite little guy

00:16:35,739 --> 00:16:40,269
because this is where we're extending

00:16:37,509 --> 00:16:45,399
spinnaker specifically in such a way

00:16:40,269 --> 00:16:47,410
that it is very targeted and so there

00:16:45,399 --> 00:16:49,449
are portions of it that I would love to

00:16:47,410 --> 00:16:52,059
see open sourced and I'm fairly certain

00:16:49,449 --> 00:16:54,459
if we twist enough arms that we can

00:16:52,059 --> 00:16:56,949
source the frameworks for it but it

00:16:54,459 --> 00:16:59,199
really added score is a set of

00:16:56,949 --> 00:17:03,519
kubernetes controllers that you can

00:16:59,199 --> 00:17:06,180
collide kubernetes manifest to describe

00:17:03,519 --> 00:17:08,670
any resource than spinnaker right now

00:17:06,180 --> 00:17:12,240
I'm and so a great example of this is

00:17:08,670 --> 00:17:16,110
DNS and buckets and I know there's some

00:17:12,240 --> 00:17:18,420
DNS code was in the US my provider but

00:17:16,110 --> 00:17:19,620
like there isn't that for the GCP

00:17:18,420 --> 00:17:21,330
provider and there's that for the

00:17:19,620 --> 00:17:23,640
OpenStack provider and so what we end up

00:17:21,330 --> 00:17:25,560
wanting to do is create these kubernetes

00:17:23,640 --> 00:17:31,200
controllers that was the desired state

00:17:25,560 --> 00:17:32,550
of our structure one pattern that grew

00:17:31,200 --> 00:17:34,140
out of moving to immutable

00:17:32,550 --> 00:17:37,710
infrastructure is that we started using

00:17:34,140 --> 00:17:40,020
a lot of terraform and we ended up

00:17:37,710 --> 00:17:42,840
making a lot of repositories that were

00:17:40,020 --> 00:17:45,180
on this pole request model and a lot of

00:17:42,840 --> 00:17:47,160
application teams were closed on our

00:17:45,180 --> 00:17:49,260
repos that created infrastructure for

00:17:47,160 --> 00:17:51,360
them and then they would have to ping us

00:17:49,260 --> 00:17:54,090
and then you have to compute the PR and

00:17:51,360 --> 00:17:57,660
then merge the PR wait for the care for

00:17:54,090 --> 00:17:59,700
them to run and we just need a huge drag

00:17:57,660 --> 00:18:02,100
and the application teams became

00:17:59,700 --> 00:18:05,550
slightly resentful about that and so

00:18:02,100 --> 00:18:07,560
really we're building out in the tap is

00:18:05,550 --> 00:18:10,770
the idea that you can have an API and

00:18:07,560 --> 00:18:13,050
that the users is and that we build in

00:18:10,770 --> 00:18:14,760
all of our best practices and and you

00:18:13,050 --> 00:18:17,400
don't have to be approving for cost

00:18:14,760 --> 00:18:18,720
constantly we're also building it in

00:18:17,400 --> 00:18:21,770
such a way with that it's a framework

00:18:18,720 --> 00:18:24,690
where if our security team requires

00:18:21,770 --> 00:18:26,820
adding more security features to for

00:18:24,690 --> 00:18:30,030
example a bucket in GCPD they can add

00:18:26,820 --> 00:18:32,220
code that then adds a COS to the bucket

00:18:30,030 --> 00:18:34,590
and so teams next time that they're

00:18:32,220 --> 00:18:43,530
their API call runs we have that buckets

00:18:34,590 --> 00:18:45,150
migrated for men and this with the

00:18:43,530 --> 00:18:47,310
target application platform there's

00:18:45,150 --> 00:18:49,530
always been a large discussion of how

00:18:47,310 --> 00:18:52,440
much to you abstract away from your

00:18:49,530 --> 00:18:54,150
applications and how much do you want

00:18:52,440 --> 00:18:57,240
them to actually know what hardware

00:18:54,150 --> 00:18:59,070
they're running on and because in my

00:18:57,240 --> 00:19:01,200
mind like if you're a full stack

00:18:59,070 --> 00:19:02,880
developer like you know about your OS

00:19:01,200 --> 00:19:05,460
and you also know about your friends and

00:19:02,880 --> 00:19:08,820
unlike the truly full stack developer

00:19:05,460 --> 00:19:10,950
and in my mind lake I've started to be

00:19:08,820 --> 00:19:14,130
talked down about this and then my mind

00:19:10,950 --> 00:19:16,140
it's a the application teams really just

00:19:14,130 --> 00:19:19,260
need to be able to deliver their feet

00:19:16,140 --> 00:19:21,030
so that target we're really about trying

00:19:19,260 --> 00:19:24,330
to get to production as quickly as

00:19:21,030 --> 00:19:27,470
possible and this is we're giving the

00:19:24,330 --> 00:19:32,540
users control over their infrastructure

00:19:27,470 --> 00:19:36,090
why is the best approach for us which

00:19:32,540 --> 00:19:37,950
dependence plate for target is not like

00:19:36,090 --> 00:19:41,400
other big companies but it also is very

00:19:37,950 --> 00:19:43,380
similar so on big companies you find a

00:19:41,400 --> 00:19:45,180
lot of commonality especially the

00:19:43,380 --> 00:19:46,860
spinnaker survey if you will see the

00:19:45,180 --> 00:19:48,600
results at some point you'll see that

00:19:46,860 --> 00:19:52,440
everybody has the same problems over and

00:19:48,600 --> 00:19:55,470
over again so we're just going to go to

00:19:52,440 --> 00:19:57,050
fit into this is basically this is the

00:19:55,470 --> 00:20:00,620
diagram of how pretty works digitally

00:19:57,050 --> 00:20:03,090
and so these are in very generic terms

00:20:00,620 --> 00:20:05,180
we're gonna have an API sitting at the

00:20:03,090 --> 00:20:07,620
top here we already have the API

00:20:05,180 --> 00:20:09,900
integrated with parts of spinnaker we

00:20:07,620 --> 00:20:11,750
have the API built integrated with parts

00:20:09,900 --> 00:20:14,520
of drone which is our chicken's

00:20:11,750 --> 00:20:17,190
replacement drone is a it's open-source

00:20:14,520 --> 00:20:18,930
tool it basically uses docker containers

00:20:17,190 --> 00:20:22,860
to run your pipeline steps that's pretty

00:20:18,930 --> 00:20:25,620
cool I highly recommend you use this we

00:20:22,860 --> 00:20:31,110
have a we have a little drone plug-in

00:20:25,620 --> 00:20:32,970
that watches here these are all these

00:20:31,110 --> 00:20:36,390
services that we build into our base

00:20:32,970 --> 00:20:38,220
image that other teams can just plug

00:20:36,390 --> 00:20:41,010
into right away and so the idea is that

00:20:38,220 --> 00:20:44,190
we will provision these resources for

00:20:41,010 --> 00:20:45,570
teams via the API so they'll get access

00:20:44,190 --> 00:20:47,340
to our API gateway and they'll get

00:20:45,570 --> 00:20:48,960
access to our logs metrics and

00:20:47,340 --> 00:20:53,070
everything that makes up our telomer

00:20:48,960 --> 00:20:55,320
teachers telemetry stack as well as our

00:20:53,070 --> 00:20:57,720
database as a service of responder or my

00:20:55,320 --> 00:21:01,140
sequel if you need it and then also our

00:20:57,720 --> 00:21:03,450
data systems and all of these are

00:21:01,140 --> 00:21:05,640
actually now they're all deployed by

00:21:03,450 --> 00:21:08,130
spinnaker which is really cool and I

00:21:05,640 --> 00:21:09,870
know some people have problems doing

00:21:08,130 --> 00:21:10,500
things with persistent storage within

00:21:09,870 --> 00:21:12,560
spinnaker

00:21:10,500 --> 00:21:14,970
somehow our teams figured it out and

00:21:12,560 --> 00:21:16,950
preview too much of the details but they

00:21:14,970 --> 00:21:18,820
deployed haka and Aniplex I'm you're

00:21:16,950 --> 00:21:21,010
using spec

00:21:18,820 --> 00:21:22,630
and so in our external clouds we

00:21:21,010 --> 00:21:24,400
currently offer the two runtime

00:21:22,630 --> 00:21:27,220
environments of Cades and virtual

00:21:24,400 --> 00:21:28,659
machines we do that we're planning on

00:21:27,220 --> 00:21:30,610
doing that was in our data centers but

00:21:28,659 --> 00:21:32,289
what we're going to be trying to do of

00:21:30,610 --> 00:21:34,659
course the next three years as

00:21:32,289 --> 00:21:36,460
hardware's upgraded within our stores

00:21:34,659 --> 00:21:37,990
and our distribution centers that are

00:21:36,460 --> 00:21:40,539
going to be running and dependent on

00:21:37,990 --> 00:21:42,700
Cooper minis with some data centers and

00:21:40,539 --> 00:21:44,980
so what target does there is that you

00:21:42,700 --> 00:21:47,950
have a custom clock driver that can

00:21:44,980 --> 00:21:51,940
deploy into the stores as the unit

00:21:47,950 --> 00:21:53,799
basically and then everything down here

00:21:51,940 --> 00:21:56,830
I don't really care about in my opinion

00:21:53,799 --> 00:22:00,220
but somebody else's but like this is my

00:21:56,830 --> 00:22:01,600
group's problem and so we get to figure

00:22:00,220 --> 00:22:02,830
out how to do this over the course in

00:22:01,600 --> 00:22:04,480
the next year and so we've made some

00:22:02,830 --> 00:22:07,179
really good progress with getting a

00:22:04,480 --> 00:22:10,150
native API access the spinnaker instead

00:22:07,179 --> 00:22:12,970
of doing sam'l authentication being able

00:22:10,150 --> 00:22:14,679
to launch pipelines within a drone and

00:22:12,970 --> 00:22:17,470
then setting it up so that we can launch

00:22:14,679 --> 00:22:20,230
pipelines using any build tool is one of

00:22:17,470 --> 00:22:23,289
our goals ultimately and also working

00:22:20,230 --> 00:22:25,090
with Google and consulting a lot was in

00:22:23,289 --> 00:22:27,460
that place to figure out like what are

00:22:25,090 --> 00:22:29,409
the common problems how to link or a

00:22:27,460 --> 00:22:33,039
large companies hundred can we solve

00:22:29,409 --> 00:22:34,539
this for everybody and so that's why I'm

00:22:33,039 --> 00:22:36,669
here and I'm hoping to share a lot of

00:22:34,539 --> 00:22:39,039
ideas about what question or do you

00:22:36,669 --> 00:22:41,950
forget you're a good good maybe I gave

00:22:39,039 --> 00:22:44,440
it its all home from home oh yeah I

00:22:41,950 --> 00:22:47,169
think it recently got rewritten to go

00:22:44,440 --> 00:22:50,260
and it's like that's really cool the way

00:22:47,169 --> 00:22:53,080
I did do it and we actually our API

00:22:50,260 --> 00:22:54,900
actually plugs into the API gateway and

00:22:53,080 --> 00:23:15,690
so there's something weird

00:22:54,900 --> 00:23:19,299
interdependencies but it's okay yeah so

00:23:15,690 --> 00:23:21,940
Jenkins when I jokingly call it Jenkins

00:23:19,299 --> 00:23:25,450
because this was so janky we lost some

00:23:21,940 --> 00:23:28,750
all of our subject matter experts with

00:23:25,450 --> 00:23:32,049
it was bigger it got dropped into my lap

00:23:28,750 --> 00:23:34,240
and so I didn't really want to learn the

00:23:32,049 --> 00:23:35,350
Jenkins to yourself and there was people

00:23:34,240 --> 00:23:38,110
had target they were starting the

00:23:35,350 --> 00:23:40,450
experiment your own and we noticed that

00:23:38,110 --> 00:23:42,940
developers really loved her own

00:23:40,450 --> 00:23:45,669
specifically they were able to define

00:23:42,940 --> 00:23:48,399
their pipelines right in their boat and

00:23:45,669 --> 00:23:50,200
have a running job within two minutes in

00:23:48,399 --> 00:23:53,320
cloud times do you know in this Jenkins

00:23:50,200 --> 00:23:55,240
DSL modify a few different settings and

00:23:53,320 --> 00:23:58,450
they were able to move over very quickly

00:23:55,240 --> 00:24:05,070
and so like one little example that I

00:23:58,450 --> 00:24:07,570
really like is that I have this job that

00:24:05,070 --> 00:24:10,210
created all of my internal help

00:24:07,570 --> 00:24:14,620
containers our halyard containers with

00:24:10,210 --> 00:24:16,450
pretty simple code like this is all if

00:24:14,620 --> 00:24:18,220
that's the whole process it's basically

00:24:16,450 --> 00:24:21,549
just taking these versions of all these

00:24:18,220 --> 00:24:23,440
containers and don't know and like that

00:24:21,549 --> 00:24:25,960
seems a lot more readable than Jenkins

00:24:23,440 --> 00:24:29,470
DSL for example and like at teams love

00:24:25,960 --> 00:24:32,650
that they're able to just launch into it

00:24:29,470 --> 00:24:32,650
[Music]

00:24:42,450 --> 00:24:47,010
ignore the red the red is the one

00:24:44,679 --> 00:24:51,190
container that doesn't actually exist

00:24:47,010 --> 00:24:52,870
sweetie need to figure out why but for

00:24:51,190 --> 00:24:55,960
example like this doesn't all these

00:24:52,870 --> 00:24:57,730
containers in parallel and them all

00:24:55,960 --> 00:24:59,620
within like three minutes and pushes a

00:24:57,730 --> 00:25:11,440
month it's pretty cool it doesn't work

00:24:59,620 --> 00:25:15,159
so so it we there's a certain service

00:25:11,440 --> 00:25:18,789
that we have like a pager Duty clump and

00:25:15,159 --> 00:25:21,269
that's it does end end testing of all of

00:25:18,789 --> 00:25:23,470
its alerting and so it does it through

00:25:21,269 --> 00:25:25,539
drones it's basically it's just running

00:25:23,470 --> 00:25:26,950
docker containers and so if you can

00:25:25,539 --> 00:25:30,760
write your job in the docker container

00:25:26,950 --> 00:25:32,470
you can own it as a drone job and that

00:25:30,760 --> 00:25:35,039
really gets you away from a lot of the

00:25:32,470 --> 00:25:35,039
dependencies

00:25:42,460 --> 00:26:00,049
yeah yeah so we have a simple go program

00:25:56,659 --> 00:26:03,469
so the main way that it's supported

00:26:00,049 --> 00:26:06,169
within drone itself is now you just call

00:26:03,469 --> 00:26:08,479
go binary and this looks a lot like

00:26:06,169 --> 00:26:10,879
doctor composed templating it is doctor

00:26:08,479 --> 00:26:13,009
composed basically under the hood and

00:26:10,879 --> 00:26:16,489
you just speed the program your flags

00:26:13,009 --> 00:26:18,139
and we're able to point to harbour

00:26:16,489 --> 00:26:21,169
master which is our certificate service

00:26:18,139 --> 00:26:23,269
for x.509 and then which gate server

00:26:21,169 --> 00:26:24,859
that we want to be talking to and then

00:26:23,269 --> 00:26:26,599
for example which type like you want to

00:26:24,859 --> 00:26:30,289
trigger and so it's providing that much

00:26:26,599 --> 00:26:33,879
information ideally we're gonna define

00:26:30,289 --> 00:26:43,669
arbitrary amounts of information is that

00:26:33,879 --> 00:26:46,070
arguments Harbormaster will be well so

00:26:43,669 --> 00:26:49,039
this one is not I think we're probably

00:26:46,070 --> 00:26:50,629
going to be this I will try and get

00:26:49,039 --> 00:26:53,359
open-source there's nothing proprietary

00:26:50,629 --> 00:26:55,639
and then Harbormaster will be Logan

00:26:53,359 --> 00:26:58,700
sourced hopefully by the end of this

00:26:55,639 --> 00:27:00,889
month is my goal and then we are going

00:26:58,700 --> 00:27:04,489
to be contributing how we do Eric's 509

00:27:00,889 --> 00:27:13,989
certificates on target now this week we

00:27:04,489 --> 00:27:13,989
didn't have any questions about those

00:27:14,529 --> 00:27:19,909
there's one weird thing is that I think

00:27:16,940 --> 00:27:23,149
all the other build tools do a full

00:27:19,909 --> 00:27:25,729
model of curves for triggering spherical

00:27:23,149 --> 00:27:27,679
pipelines drone does not really support

00:27:25,729 --> 00:27:30,859
that and so what we end up doing is a

00:27:27,679 --> 00:27:33,919
push up to will gain to trigger

00:27:30,859 --> 00:27:36,429
pipelines instead of just watching the

00:27:33,919 --> 00:27:36,429
integers

00:27:43,120 --> 00:27:53,029
yeah so future wise I feel like they had

00:27:46,639 --> 00:27:54,710
a list we'd like this idea of the simian

00:27:53,029 --> 00:27:56,389
army and we're kind of sad that most of

00:27:54,710 --> 00:27:59,659
the simian army is like not so

00:27:56,389 --> 00:28:02,360
compatible on spare so we're thinking

00:27:59,659 --> 00:28:04,509
that like maybe janitor monkey can make

00:28:02,360 --> 00:28:06,529
occurence again in half spinnaker

00:28:04,509 --> 00:28:08,539
integrations but that means also

00:28:06,529 --> 00:28:11,659
extending spin up here to clean up a

00:28:08,539 --> 00:28:13,940
demise for example or like what are they

00:28:11,659 --> 00:28:16,100
calling lupus languages and and

00:28:13,940 --> 00:28:19,340
OpenStack they're also just images and

00:28:16,100 --> 00:28:21,950
stuff like that so building that into

00:28:19,340 --> 00:28:25,490
used all the cloud drivers you probably

00:28:21,950 --> 00:28:27,740
be nice I also think that yeah just

00:28:25,490 --> 00:28:30,559
generally sharing your ideas and like

00:28:27,740 --> 00:28:33,320
maybe doing an idea board or issues like

00:28:30,559 --> 00:28:34,909
whatever I have a thing that I want

00:28:33,320 --> 00:28:37,460
since vinegar I usually will try and

00:28:34,909 --> 00:28:39,950
open issue and see if other people

00:28:37,460 --> 00:28:41,929
comments on anything what we've been

00:28:39,950 --> 00:28:43,700
doing with Google is that Google has

00:28:41,929 --> 00:28:46,700
been opening up their Google Docs with

00:28:43,700 --> 00:28:49,519
their steps for new versions of certain

00:28:46,700 --> 00:28:52,490
features and so I think getting more

00:28:49,519 --> 00:28:55,369
open about that process and soliciting

00:28:52,490 --> 00:28:57,470
feedback from Oracle is even smaller

00:28:55,369 --> 00:29:00,919
companies because like we all do have

00:28:57,470 --> 00:29:02,389
the same problems and so getting a lot

00:29:00,919 --> 00:29:04,610
more community involvement with that

00:29:02,389 --> 00:29:08,509
then my mind I kind of want to see like

00:29:04,610 --> 00:29:11,149
a central like example template with GCD

00:29:08,509 --> 00:29:14,659
defined pipelines and so you can say oh

00:29:11,149 --> 00:29:17,059
yeah this is how we deploy Cassandra at

00:29:14,659 --> 00:29:18,619
targets and like give examples of like

00:29:17,059 --> 00:29:20,480
this is how the pipeline wants this

00:29:18,619 --> 00:29:27,860
might do it safely a little trying to do

00:29:20,480 --> 00:29:29,330
whatever you need to do and then this is

00:29:27,860 --> 00:29:32,990
my contact information if you want to

00:29:29,330 --> 00:29:36,410
reach out to me tech mom on slacks and

00:29:32,990 --> 00:29:38,690
try to happen around everything else so

00:29:36,410 --> 00:29:39,710
if you search for me I'm usually not the

00:29:38,690 --> 00:29:41,120
soccer player

00:29:39,710 --> 00:29:45,160
[Music]

00:29:41,120 --> 00:29:45,160
[Laughter]

00:29:56,600 --> 00:30:00,860
yeah so kubernetes is gonna basically

00:29:59,000 --> 00:30:03,500
running on some hardware with such doors

00:30:00,860 --> 00:30:05,270
so the whole idea there is that stores

00:30:03,500 --> 00:30:07,940
it's a great example of hurricanes

00:30:05,270 --> 00:30:11,510
fighting starts is that you want to

00:30:07,940 --> 00:30:14,480
still be able to like keep track of

00:30:11,510 --> 00:30:16,610
merchandise within fasteners and itself

00:30:14,480 --> 00:30:18,470
we've brought in a lot of hardware

00:30:16,610 --> 00:30:21,620
locally within sparse to be able to do

00:30:18,470 --> 00:30:24,470
day-to-day business and so kubernetes

00:30:21,620 --> 00:30:26,540
seems to me the way that we're going

00:30:24,470 --> 00:30:28,820
forward is done so getting a pattern

00:30:26,540 --> 00:30:30,740
that we can do an employable unit and

00:30:28,820 --> 00:30:33,140
spinnaker as a store or a group of

00:30:30,740 --> 00:30:34,910
stores and then giving it a manifest

00:30:33,140 --> 00:30:39,170
that the application versions I'm gonna

00:30:34,910 --> 00:30:41,210
run and then getting that he is

00:30:39,170 --> 00:30:43,790
spinnaker for kubernetes as well as

00:30:41,210 --> 00:30:45,170
everything else so right now we aren't

00:30:43,790 --> 00:30:48,170
waiting until the next version of

00:30:45,170 --> 00:30:50,120
veteran Eddie's cloud driver this is

00:30:48,170 --> 00:30:52,730
like another topic of discussion that I

00:30:50,120 --> 00:30:55,430
have enjoyed with other people here is

00:30:52,730 --> 00:30:58,790
that it's very hard to take access back

00:30:55,430 --> 00:31:00,890
away from users and so when we started

00:30:58,790 --> 00:31:03,410
off with a kubernetes clusters it wasn't

00:31:00,890 --> 00:31:06,380
under on my team at the time but teens

00:31:03,410 --> 00:31:07,880
were given namespace tokens and they can

00:31:06,380 --> 00:31:10,220
do anything they wanted in that

00:31:07,880 --> 00:31:12,560
namespace token and so what that leads

00:31:10,220 --> 00:31:15,470
us to a lot of people using drones to do

00:31:12,560 --> 00:31:17,750
CTL apply on their deployment animals

00:31:15,470 --> 00:31:19,460
for example and so in that pattern is

00:31:17,750 --> 00:31:21,980
really really great when you have direct

00:31:19,460 --> 00:31:24,230
access and spinnaker necessary didn't

00:31:21,980 --> 00:31:27,020
doesn't do that for you right now and so

00:31:24,230 --> 00:31:29,150
we've showed the current state of the

00:31:27,020 --> 00:31:31,760
communities collaborative teams they're

00:31:29,150 --> 00:31:34,430
not interested I think for a legitimate

00:31:31,760 --> 00:31:36,580
reason and so the next version where you

00:31:34,430 --> 00:31:38,809
can actually import manifests is like

00:31:36,580 --> 00:31:41,240
pretty compelling

00:31:38,809 --> 00:31:45,679
foolish you that you have a custom

00:31:41,240 --> 00:31:47,269
however these doors you talk about with

00:31:45,679 --> 00:31:52,730
the different features it's our dad

00:31:47,269 --> 00:31:55,070
versus yeah so I don't know too many of

00:31:52,730 --> 00:31:57,049
the specifics we didn't write it then

00:31:55,070 --> 00:31:58,970
somebody who is our former Netflix of

00:31:57,049 --> 00:32:04,330
play that was how to you just penetrate

00:31:58,970 --> 00:32:04,330
very well and so they were up to

00:32:06,020 --> 00:32:09,079
[Music]

00:32:26,590 --> 00:32:32,090
yeah so I think all these stores and

00:32:29,749 --> 00:32:34,999
api's that are located within our stars

00:32:32,090 --> 00:32:38,929
and so they'll be driven by these page

00:32:34,999 --> 00:32:41,059
deployments that's like the my device

00:32:38,929 --> 00:32:43,460
that they happens toward us and so when

00:32:41,059 --> 00:32:44,840
team members like get a question asked

00:32:43,460 --> 00:32:48,619
about what's the surprise certain price

00:32:44,840 --> 00:32:50,990
matching and all that kind of stuff and

00:32:48,619 --> 00:32:55,669
Android device nowadays and that just is

00:32:50,990 --> 00:32:57,379
a little gateway into our API another

00:32:55,669 --> 00:32:59,330
database that's the service are you

00:32:57,379 --> 00:33:02,090
mentioned that with spinnaker as well if

00:32:59,330 --> 00:33:04,220
our some teams are using spinnaker for

00:33:02,090 --> 00:33:06,049
their database or the service we have a

00:33:04,220 --> 00:33:09,139
one team that's us on your database as a

00:33:06,049 --> 00:33:11,720
service and their reasons that I think

00:33:09,139 --> 00:33:14,360
that are deploying like because I'm

00:33:11,720 --> 00:33:16,940
hyper teams so they're managing and that

00:33:14,360 --> 00:33:19,519
waste of trying on I'm trying mustard

00:33:16,940 --> 00:33:23,179
everybody so do you build like separate

00:33:19,519 --> 00:33:25,220
build steps just for that or no so the

00:33:23,179 --> 00:33:27,289
Cassandra team will go and then the

00:33:25,220 --> 00:33:32,749
commando server for the teams teams just

00:33:27,289 --> 00:33:35,299
plug in their house sorry if I missed as

00:33:32,749 --> 00:33:40,279
to the building the images is that part

00:33:35,299 --> 00:33:42,110
of the drone or so for kubernetes we do

00:33:40,279 --> 00:33:44,570
all of our container builds within the

00:33:42,110 --> 00:33:45,499
drone we don't use the bakery options

00:33:44,570 --> 00:33:49,009
within spanker

00:33:45,499 --> 00:33:49,820
but for GCP for example we do all of our

00:33:49,009 --> 00:33:54,340
base

00:33:49,820 --> 00:33:58,070
see and raising just until generosity

00:33:54,340 --> 00:34:00,320
did you say Prometheus for that logs and

00:33:58,070 --> 00:34:05,660
stuff we use very theists for the

00:34:00,320 --> 00:34:07,820
metrics and telemetry things and so if

00:34:05,660 --> 00:34:09,770
you all are familiar me this is

00:34:07,820 --> 00:34:13,610
basically like a centralized metrics

00:34:09,770 --> 00:34:15,620
gather you right Prometheus metrics and

00:34:13,610 --> 00:34:17,300
point into your application we've

00:34:15,620 --> 00:34:19,880
advertised that in your kubernetes

00:34:17,300 --> 00:34:22,340
manifest and then the Prometheus server

00:34:19,880 --> 00:34:24,290
will struggle scraping that periodically

00:34:22,340 --> 00:34:27,700
and then send the data off and some

00:34:24,290 --> 00:34:30,530
really cool innovation for you and so

00:34:27,700 --> 00:34:41,960
that's what we're using it for and lots

00:34:30,530 --> 00:34:43,760
of teams are saying yeah so there's a

00:34:41,960 --> 00:34:45,970
lot of different libraries to create

00:34:43,760 --> 00:34:52,010
Prometheus metrics endpoints belief

00:34:45,970 --> 00:34:53,860
pretty simple wonderful oh yeah so like

00:34:52,010 --> 00:34:56,570
this is what a Prometheus and point

00:34:53,860 --> 00:34:59,450
looks like it just displays us a bleach

00:34:56,570 --> 00:35:01,070
was like if you wanted to define

00:34:59,450 --> 00:35:02,600
something called processed resident

00:35:01,070 --> 00:35:04,700
memory or something and then these are

00:35:02,600 --> 00:35:06,530
the values for that looks like straight

00:35:04,700 --> 00:35:08,030
up that's all you need to write and your

00:35:06,530 --> 00:35:18,020
application just keeps up hitting those

00:35:08,030 --> 00:35:21,230
counters are you deploying spinning so

00:35:18,020 --> 00:35:24,170
we had six Spinnaker's as of two weeks

00:35:21,230 --> 00:35:25,910
ago we now have four Spinnaker's and

00:35:24,170 --> 00:35:29,990
then however many Spinnaker's we need to

00:35:25,910 --> 00:35:32,630
run on our laptops and so we are

00:35:29,990 --> 00:35:34,910
currently doing to the Spinnaker's by

00:35:32,630 --> 00:35:36,770
halyard all of the spin occurs on our

00:35:34,910 --> 00:35:38,770
lot tones are deployed by halyard

00:35:36,770 --> 00:35:41,570
I'm sure you probably start right now

00:35:38,770 --> 00:35:45,320
but it's pretty cool like being able to

00:35:41,570 --> 00:35:48,620
run spinnaker can make you smile here

00:35:45,320 --> 00:35:53,350
just like let's our tapi team just on

00:35:48,620 --> 00:35:53,350
all of their tests and be given all the

00:35:53,590 --> 00:36:01,340
thank you yeah I took us a while and

00:35:59,630 --> 00:36:03,470
finally like saying yes we'll start

00:36:01,340 --> 00:36:17,900
using hell you're not there end up being

00:36:03,470 --> 00:36:19,840
a lot less painful so for example if you

00:36:17,900 --> 00:36:22,520
go

00:36:19,840 --> 00:36:24,440
so we used the same script to deploy all

00:36:22,520 --> 00:36:29,050
them friends which in the end ends up

00:36:24,440 --> 00:36:29,050
being 144 lions and it's pretty powerful

00:36:29,410 --> 00:36:35,090
so anybody on our team is able to just

00:36:32,869 --> 00:36:38,359
go in here run a few scripts that is

00:36:35,090 --> 00:36:42,640
able to set up a spinnaker provider with

00:36:38,359 --> 00:36:42,640
api's enabled if they really want to

00:36:52,060 --> 00:36:56,990
have a question about a configuration

00:36:54,470 --> 00:37:00,109
met now you mentioned that you fake all

00:36:56,990 --> 00:37:02,420
those comforts like console BOTS those

00:37:00,109 --> 00:37:04,840
effects you the base am i yep well if

00:37:02,420 --> 00:37:09,980
they're like some life changes on a

00:37:04,840 --> 00:37:13,850
console KP yeah so all of our council

00:37:09,980 --> 00:37:16,250
checks so when we bake at the image it

00:37:13,850 --> 00:37:17,930
has a console client built into it and

00:37:16,250 --> 00:37:19,670
so the console client has a console

00:37:17,930 --> 00:37:22,220
token assignment it it's using that

00:37:19,670 --> 00:37:24,710
console token base in just watch Council

00:37:22,220 --> 00:37:27,770
for changes and so once a change occurs

00:37:24,710 --> 00:37:29,240
it does demand like if your service

00:37:27,770 --> 00:37:31,310
needs to restart over eastern your

00:37:29,240 --> 00:37:33,020
service for you of a lot of the

00:37:31,310 --> 00:37:39,350
applications of this read the hidden

00:37:33,020 --> 00:37:41,750
visa a lot of the time if they do have

00:37:39,350 --> 00:37:43,250
console key changes its you're really

00:37:41,750 --> 00:37:49,430
going to be a big deployment and the

00:37:43,250 --> 00:37:52,550
green namespace yeah just go back from

00:37:49,430 --> 00:37:53,930
the communities discussion and so what

00:37:52,550 --> 00:37:56,000
kind of stack are using on top of the

00:37:53,930 --> 00:37:58,070
TV's a time series data base and

00:37:56,000 --> 00:38:00,440
something for graphical there's no

00:37:58,070 --> 00:38:03,040
longer my team in my area of expertise

00:38:00,440 --> 00:38:04,930
so like to give me a contact

00:38:03,040 --> 00:38:08,680
I can point you to the guy that knows

00:38:04,930 --> 00:38:11,680
all that here that's what we find you

00:38:08,680 --> 00:38:14,080
use bits and distribute everything when

00:38:11,680 --> 00:38:17,560
you rebuild those based images are you

00:38:14,080 --> 00:38:20,680
automatically rebuilding any image it

00:38:17,560 --> 00:38:22,510
uses those base images as well so this

00:38:20,680 --> 00:38:24,940
is where I kind of wished that there was

00:38:22,510 --> 00:38:27,280
like a universal stage in the universe

00:38:24,940 --> 00:38:28,900
so like a pre-staged in the universal

00:38:27,280 --> 00:38:31,630
end stage and spinnaker that less

00:38:28,900 --> 00:38:33,340
transparent and what I would do with

00:38:31,630 --> 00:38:35,530
that feature is basically if there is a

00:38:33,340 --> 00:38:38,290
new base image earliest relaunch every

00:38:35,530 --> 00:38:39,880
single application and like that would

00:38:38,290 --> 00:38:41,620
take a lot of trust in the users

00:38:39,880 --> 00:38:43,900
trusting that they wouldn't let us

00:38:41,620 --> 00:38:46,030
launch a redeployment into the

00:38:43,900 --> 00:38:48,010
application with this but basically

00:38:46,030 --> 00:38:50,320
right now if it's something critical

00:38:48,010 --> 00:38:52,690
don't sit on a list and teams will go

00:38:50,320 --> 00:38:55,000
and read big images and that application

00:38:52,690 --> 00:38:56,710
a lot of the time there isn't something

00:38:55,000 --> 00:38:58,180
that's your credit go on so next time

00:38:56,710 --> 00:39:00,640
they deploy they'll get any of these

00:38:58,180 --> 00:39:02,020
updates but let me take care and making

00:39:00,640 --> 00:39:03,790
sure that if there is a breaking change

00:39:02,020 --> 00:39:04,990
we tell people we give them a date in

00:39:03,790 --> 00:39:14,770
the future that things are going to be

00:39:04,990 --> 00:39:16,960
broken any other questions I could talk

00:39:14,770 --> 00:39:19,620
about this for very long there's a lot

00:39:16,960 --> 00:39:19,620
of opinion

00:39:40,260 --> 00:39:43,289

YouTube URL: https://www.youtube.com/watch?v=iHDBxXrgyqs


