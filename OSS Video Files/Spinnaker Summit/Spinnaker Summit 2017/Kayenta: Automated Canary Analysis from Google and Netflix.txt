Title: Kayenta: Automated Canary Analysis from Google and Netflix
Publication date: 2017-09-22
Playlist: Spinnaker Summit 2017
Description: 
	MICHAEL GRAFF, NETFLIX; MATT DUFTLER, GOOGLE

Netflix and Google teams have been working together to build Spinnaker's new general purpose canary capability. We will shortly be releasing a new Spinnaker microservice, Kayenta, that will be capable of integrating with a host of metric stores (e.g. Atlas, Stackdriver, Prometheus, OpsMx) and allow for pluggable canary judges. Netflix's internal Automated Canary Analysis (ACA) service served as the inspiration for this new service, and the ACA canary judge is configured by default. In this talk we will cover the overall architecture of Kayenta, and explore some use cases end-to-end.

From Spinnaker Summit 2017
Captions: 
	00:00:01,100 --> 00:00:08,610
good morning everybody I'm going to be

00:00:06,750 --> 00:00:10,290
talking about Kansa automated canary

00:00:08,610 --> 00:00:13,230
analysis if you're on the line flight

00:00:10,290 --> 00:00:14,759
please check the Fisher's my name is

00:00:13,230 --> 00:00:17,460
Michael Graf and I'm a software engineer

00:00:14,759 --> 00:00:19,590
here at Netflix this is Matt dumpler who

00:00:17,460 --> 00:00:20,670
is a software engineer at Google and

00:00:19,590 --> 00:00:25,019
we've been working on this project

00:00:20,670 --> 00:00:26,220
called anta which is a rewrite of stuff

00:00:25,019 --> 00:00:29,310
that we've been doing at Netflix for

00:00:26,220 --> 00:00:31,260
quite some time but it's in a we intend

00:00:29,310 --> 00:00:33,719
to open source this one it's written in

00:00:31,260 --> 00:00:37,290
a modular way and it's tightly

00:00:33,719 --> 00:00:38,430
integrated spinnaker we're gonna be

00:00:37,290 --> 00:00:39,840
talking a little bit about Canaries in

00:00:38,430 --> 00:00:41,550
general we're gonna be talking about the

00:00:39,840 --> 00:00:43,020
internals of content and then we're

00:00:41,550 --> 00:00:49,530
gonna give a demo of where we are right

00:00:43,020 --> 00:00:51,480
now with the UI within spinnaker there's

00:00:49,530 --> 00:00:53,910
a talk yesterday with Chris and Greg

00:00:51,480 --> 00:00:55,079
about what Canaries were but I want to

00:00:53,910 --> 00:00:56,460
cover the key points here just in case

00:00:55,079 --> 00:00:58,829
anybody missed that since this is a

00:00:56,460 --> 00:01:02,309
three-drug conference you know Canaries

00:00:58,829 --> 00:01:03,989
operate on live traffic they only get a

00:01:02,309 --> 00:01:06,420
part of that live traffic typically so

00:01:03,989 --> 00:01:08,159
that the impact is minimal eyes the main

00:01:06,420 --> 00:01:10,320
purpose for canary is to make certain

00:01:08,159 --> 00:01:12,720
that you can roll stuff out into

00:01:10,320 --> 00:01:15,630
production in a gradual way to make

00:01:12,720 --> 00:01:17,520
certain that your code is good or your

00:01:15,630 --> 00:01:19,259
operational changes good typically it's

00:01:17,520 --> 00:01:21,479
gonna be talking about code deployment

00:01:19,259 --> 00:01:23,280
because that's what spinnaker focuses on

00:01:21,479 --> 00:01:24,900
right now but it could be any

00:01:23,280 --> 00:01:28,110
operational change it could be a network

00:01:24,900 --> 00:01:29,640
change or anything like canary and it's

00:01:28,110 --> 00:01:32,159
not a replacement for standard testing

00:01:29,640 --> 00:01:34,740
so that's something about it keep

00:01:32,159 --> 00:01:39,479
emphasizing this is production-ready

00:01:34,740 --> 00:01:41,100
code that you're wanting this is the

00:01:39,479 --> 00:01:42,509
typical pattern that we use in Netflix

00:01:41,100 --> 00:01:44,399
although sometimes the baseline is

00:01:42,509 --> 00:01:47,340
emitted and the production's use this

00:01:44,399 --> 00:01:48,840
baseline the green parts here that the

00:01:47,340 --> 00:01:50,250
baseline of the carry green parts are

00:01:48,840 --> 00:01:52,290
handled by spinnaker itself where it

00:01:50,250 --> 00:01:53,340
spins those clusters up but the part

00:01:52,290 --> 00:01:55,140
we're gonna be talking about is on the

00:01:53,340 --> 00:01:58,520
right hand side the canary analysis

00:01:55,140 --> 00:01:58,520
there's just a tiny stat Monterey Park

00:01:59,240 --> 00:02:05,729
this is the flow of what kinda actually

00:02:02,070 --> 00:02:07,229
will do it starts out in basically two

00:02:05,729 --> 00:02:07,920
parts to kind of to two main parts to

00:02:07,229 --> 00:02:10,020
kamsa

00:02:07,920 --> 00:02:11,459
one is the gathering of the metrics and

00:02:10,020 --> 00:02:12,030
then grouping them in such a way that a

00:02:11,459 --> 00:02:15,060
judge

00:02:12,030 --> 00:02:17,790
use that very very easily for example

00:02:15,060 --> 00:02:19,680
when you query for CPU on the baseline

00:02:17,790 --> 00:02:21,930
the canary we present those to the judge

00:02:19,680 --> 00:02:23,580
internally as one unit so that the judge

00:02:21,930 --> 00:02:24,510
can very easily determine what that is

00:02:23,580 --> 00:02:25,950
and it doesn't have to be a lot of

00:02:24,510 --> 00:02:28,590
intelligence on the judge to order the

00:02:25,950 --> 00:02:30,300
data it just uses what's there the

00:02:28,590 --> 00:02:32,910
judges itself is responsible for doing

00:02:30,300 --> 00:02:35,550
data cleaning method comparison and then

00:02:32,910 --> 00:02:36,840
finally computing a final score and how

00:02:35,550 --> 00:02:38,040
that's actually done am I could I'll go

00:02:36,840 --> 00:02:40,560
into a little bit of detail but not very

00:02:38,040 --> 00:02:42,180
much because it's kind of beyond the

00:02:40,560 --> 00:02:47,130
scope of this chat is it more of an

00:02:42,180 --> 00:02:50,790
overview the Netflix judge which is the

00:02:47,130 --> 00:02:53,190
one we've implemented right now as far

00:02:50,790 --> 00:02:56,700
as each metric is either a high-low pass

00:02:53,190 --> 00:02:59,370
or no data and in some cases high and

00:02:56,700 --> 00:03:01,680
low or okay if your Canaries performing

00:02:59,370 --> 00:03:03,360
better in terms of CPU usage or better

00:03:01,680 --> 00:03:05,160
in terms of requests per second that's

00:03:03,360 --> 00:03:07,350
probably okay so there are ways to

00:03:05,160 --> 00:03:10,410
control which direction we tweet in

00:03:07,350 --> 00:03:11,370
there we then assign that where those

00:03:10,410 --> 00:03:12,989
are assigned to groups by the

00:03:11,370 --> 00:03:14,790
configuration by the person who is doing

00:03:12,989 --> 00:03:16,680
the configuration those groups are

00:03:14,790 --> 00:03:19,470
scored independently and is one method

00:03:16,680 --> 00:03:20,850
could be in multiple groups but weight

00:03:19,470 --> 00:03:22,410
is applied so you can say that this

00:03:20,850 --> 00:03:23,700
group has more importance than that and

00:03:22,410 --> 00:03:25,110
then at the end that final score is

00:03:23,700 --> 00:03:27,329
calculated and then that's compared

00:03:25,110 --> 00:03:28,739
against the threshold and that's really

00:03:27,329 --> 00:03:30,690
what spinnaker is going to look at in

00:03:28,739 --> 00:03:36,540
the main dashboard is that this past is

00:03:30,690 --> 00:03:38,459
fail it's a single number so the goals

00:03:36,540 --> 00:03:40,470
of this project were to take a system

00:03:38,459 --> 00:03:43,019
that we already have a Netflix and bring

00:03:40,470 --> 00:03:45,750
it out into the public and to make it

00:03:43,019 --> 00:03:48,900
more modular make it so that it would be

00:03:45,750 --> 00:03:51,660
extensible our old system was written

00:03:48,900 --> 00:03:54,030
and grew organically and because that

00:03:51,660 --> 00:03:56,130
organic growth we never really had easy

00:03:54,030 --> 00:03:57,329
ways to insert new data sources it was a

00:03:56,130 --> 00:03:59,940
very tightly integrative the judge

00:03:57,329 --> 00:04:02,220
components that the data marshal

00:03:59,940 --> 00:04:03,660
internally was not very clean it worked

00:04:02,220 --> 00:04:05,790
but it was very difficult to add new

00:04:03,660 --> 00:04:07,739
data sources and very difficult any

00:04:05,790 --> 00:04:09,209
judge the new model actually allows us

00:04:07,739 --> 00:04:11,130
to do plug plug and play pretty much

00:04:09,209 --> 00:04:12,810
across the board and we do that with

00:04:11,130 --> 00:04:16,950
some internal API use that Matt will go

00:04:12,810 --> 00:04:18,479
over but really we found that most of

00:04:16,950 --> 00:04:19,859
our users when we started with canary

00:04:18,479 --> 00:04:21,180
analysis and in flix most of our users

00:04:19,859 --> 00:04:23,400
do not use vinegar because vinegar

00:04:21,180 --> 00:04:26,130
didn't really was really popular

00:04:23,400 --> 00:04:27,870
is now now almost all of our users that

00:04:26,130 --> 00:04:29,850
use canary not all but almost all

00:04:27,870 --> 00:04:31,080
actually use vinegar so it made more

00:04:29,850 --> 00:04:32,610
sense to tightly integrate with

00:04:31,080 --> 00:04:34,949
spinnaker and workflow that people use

00:04:32,610 --> 00:04:36,570
commonly they can still be used outside

00:04:34,949 --> 00:04:39,570
a spinnaker there's still an API that

00:04:36,570 --> 00:04:40,710
you can call so it's not like this the

00:04:39,570 --> 00:04:42,300
system is completely degree within

00:04:40,710 --> 00:04:44,699
spinnaker boots so module off the side

00:04:42,300 --> 00:04:47,250
but it looks really nice and chilling

00:04:44,699 --> 00:04:49,979
and we want open source this because we

00:04:47,250 --> 00:04:54,720
think that expand for community as well

00:04:49,979 --> 00:04:56,729
as us if you sell the technical goals

00:04:54,720 --> 00:05:00,289
are pretty straightforward we want to

00:04:56,729 --> 00:05:02,160
make it faster better mirek stronger and

00:05:00,289 --> 00:05:05,850
one of the important things we're doing

00:05:02,160 --> 00:05:08,400
here is along the way each step that we

00:05:05,850 --> 00:05:09,870
do is written to stable store so when we

00:05:08,400 --> 00:05:12,030
gather metrics those are written out to

00:05:09,870 --> 00:05:13,590
an s3 bucket or something similar when

00:05:12,030 --> 00:05:15,270
we actually combine those into the next

00:05:13,590 --> 00:05:17,880
stage for the for the judge those are

00:05:15,270 --> 00:05:19,680
written out to s3 again and the results

00:05:17,880 --> 00:05:21,060
of that judge that will be written as

00:05:19,680 --> 00:05:23,910
three currently it's not but it will be

00:05:21,060 --> 00:05:25,080
and the purpose in doing that is it

00:05:23,910 --> 00:05:27,150
means we can inject data at any

00:05:25,080 --> 00:05:29,370
particular point in the system so if you

00:05:27,150 --> 00:05:30,810
have data that isn't really in a

00:05:29,370 --> 00:05:32,010
database you just want to run it against

00:05:30,810 --> 00:05:34,380
the system you can write it out in the

00:05:32,010 --> 00:05:35,699
stand in this format and we still from

00:05:34,380 --> 00:05:38,550
the judge on it we don't actually have

00:05:35,699 --> 00:05:43,229
to fetch it from various data source

00:05:38,550 --> 00:05:49,320
like an atlas or whatever and with that

00:05:43,229 --> 00:06:01,460
I'm going to hand it on camera thanks

00:05:49,320 --> 00:06:04,800
Michael do any second here - all right

00:06:01,460 --> 00:06:07,099
so the the purpose of this portion is to

00:06:04,800 --> 00:06:09,060
show you the thing working will be

00:06:07,099 --> 00:06:10,800
transparent as we can about the state of

00:06:09,060 --> 00:06:12,539
things what's to come next how long we

00:06:10,800 --> 00:06:14,400
think it'll take what we're missing what

00:06:12,539 --> 00:06:17,310
we did a good job of all of that if you

00:06:14,400 --> 00:06:18,630
have questions shout them out what they

00:06:17,310 --> 00:06:20,400
were realized in preparing for this is

00:06:18,630 --> 00:06:22,199
that it's hard to kind of show the thing

00:06:20,400 --> 00:06:24,000
working all the way through it keep

00:06:22,199 --> 00:06:25,440
referencing various formats and tools

00:06:24,000 --> 00:06:27,740
and components without actually

00:06:25,440 --> 00:06:29,820
explaining those things so we're gonna

00:06:27,740 --> 00:06:31,830
uncharacteristically start kind of down

00:06:29,820 --> 00:06:33,630
in the weeds and quickly just touch on

00:06:31,830 --> 00:06:34,800
each format and each component just so

00:06:33,630 --> 00:06:36,539
it looks familiar when we show

00:06:34,800 --> 00:06:36,810
everything working kind of all the way

00:06:36,539 --> 00:06:42,300
through

00:06:36,810 --> 00:06:44,010
the plumbing connection it's a new micro

00:06:42,300 --> 00:06:45,690
service so as far as vinegar concerned

00:06:44,010 --> 00:06:48,510
it's a top level thing like Orca like

00:06:45,690 --> 00:06:50,580
150 like cloud driver what this means

00:06:48,510 --> 00:06:52,590
concretely is that halyard will have

00:06:50,580 --> 00:06:53,760
full support for configuring it they

00:06:52,590 --> 00:06:55,139
don't have health checks we'll have all

00:06:53,760 --> 00:06:56,580
the things that make it a part of the

00:06:55,139 --> 00:07:00,000
Hispanic routing system when it's

00:06:56,580 --> 00:07:01,680
deployed as part of the spinnaker if you

00:07:00,000 --> 00:07:04,830
folks want to rob Fletcher's excellent

00:07:01,680 --> 00:07:08,100
talk on Orca v3 were heavily leveraging

00:07:04,830 --> 00:07:10,290
that here so Kayenta is using orca to do

00:07:08,100 --> 00:07:12,060
its work so it links in orca as a

00:07:10,290 --> 00:07:13,830
library it doesn't call out to it they

00:07:12,060 --> 00:07:16,200
use the cue based messaging system

00:07:13,830 --> 00:07:17,700
within Orca to schedule work so it's

00:07:16,200 --> 00:07:20,040
stateless it's resilient it can be

00:07:17,700 --> 00:07:21,479
horizontally scaled all of those great

00:07:20,040 --> 00:07:24,600
things that you get from the new version

00:07:21,479 --> 00:07:28,830
of Orca no basically leverage is that

00:07:24,600 --> 00:07:30,419
direct it's entirely pluggable so it

00:07:28,830 --> 00:07:33,600
works in multiple clunker systems

00:07:30,419 --> 00:07:35,910
multiple storage systems so s3 GCS we

00:07:33,600 --> 00:07:38,190
have in memory implementations of a

00:07:35,910 --> 00:07:40,169
storage service for development and the

00:07:38,190 --> 00:07:42,120
judges our pluggable as well the paved

00:07:40,169 --> 00:07:44,430
road out of the box experience is that

00:07:42,120 --> 00:07:45,690
you know the netflix ACA judge with all

00:07:44,430 --> 00:07:47,430
the years of experience that went into

00:07:45,690 --> 00:07:50,039
that that Chris and Greg presented on

00:07:47,430 --> 00:07:53,400
yesterday so all that sort of goodness

00:07:50,039 --> 00:07:54,900
is in here out of the box and one nice

00:07:53,400 --> 00:07:57,539
thing about the way we built the system

00:07:54,900 --> 00:07:58,979
is we got to kind of take all the

00:07:57,539 --> 00:08:01,140
existing stuff that's been learned by

00:07:58,979 --> 00:08:02,280
Netflix combine it with some stuff that

00:08:01,140 --> 00:08:03,900
we know about building systems

00:08:02,280 --> 00:08:05,520
especially out in the open source

00:08:03,900 --> 00:08:07,260
community and come up with something

00:08:05,520 --> 00:08:09,479
that's very composable and dynamic and

00:08:07,260 --> 00:08:10,770
it supports doing both real time meaning

00:08:09,479 --> 00:08:12,389
you're waiting for the Canaries to

00:08:10,770 --> 00:08:13,979
gather data and complete as well as

00:08:12,389 --> 00:08:15,900
retrospective analysis and they feel

00:08:13,979 --> 00:08:17,970
basically the same you can do quite a

00:08:15,900 --> 00:08:21,060
bit of kind of looking back and what-if

00:08:17,970 --> 00:08:23,490
scenarios without too much hard work so

00:08:21,060 --> 00:08:25,050
and we're gonna show all that now so

00:08:23,490 --> 00:08:27,750
we'll start with the most boring part

00:08:25,050 --> 00:08:29,940
the canary config we'll go through it

00:08:27,750 --> 00:08:31,350
quickly the the main thing to take away

00:08:29,940 --> 00:08:33,060
from this is that this is metric

00:08:31,350 --> 00:08:37,229
store-specific so if you're working with

00:08:33,060 --> 00:08:38,459
stackdriver at least Prometheus there

00:08:37,229 --> 00:08:40,560
are a bunch of systems like that we

00:08:38,459 --> 00:08:40,950
intend to support this is the bit that

00:08:40,560 --> 00:08:43,080
looks

00:08:40,950 --> 00:08:47,010
specific to that that system the rest of

00:08:43,080 --> 00:08:48,660
us punching action so defines a query

00:08:47,010 --> 00:08:50,220
and in with some systems it looks like a

00:08:48,660 --> 00:08:50,620
query other systems it looks like just

00:08:50,220 --> 00:08:52,270
the name

00:08:50,620 --> 00:08:54,460
a metric that's going to be queried for

00:08:52,270 --> 00:08:57,310
but you're essentially defining a

00:08:54,460 --> 00:08:58,810
parameterised query to actually execute

00:08:57,310 --> 00:09:00,490
that thing it has to be hydrated with

00:08:58,810 --> 00:09:03,490
various scopes and parameters that come

00:09:00,490 --> 00:09:04,089
in at runtime which will show but that's

00:09:03,490 --> 00:09:06,279
the idea

00:09:04,089 --> 00:09:08,380
electric store specific query is defined

00:09:06,279 --> 00:09:10,600
within the canary kinship as Michael

00:09:08,380 --> 00:09:11,770
explained works with a bunch of

00:09:10,600 --> 00:09:13,360
different metrics and all those metrics

00:09:11,770 --> 00:09:15,760
that are yielded by that metric store

00:09:13,360 --> 00:09:17,380
specific query gets grouped and this is

00:09:15,760 --> 00:09:18,970
done by the application or service owner

00:09:17,380 --> 00:09:20,680
and then each of those groups can be

00:09:18,970 --> 00:09:22,630
weighted and scores are rolled up and

00:09:20,680 --> 00:09:24,520
all the stuff that Chris described

00:09:22,630 --> 00:09:27,190
yesterday which will show an action but

00:09:24,520 --> 00:09:28,480
not get into the low-level details so

00:09:27,190 --> 00:09:29,860
these are the high-level attributes of a

00:09:28,480 --> 00:09:31,210
canary config there really isn't

00:09:29,860 --> 00:09:34,180
anything that's surprising in there it

00:09:31,210 --> 00:09:35,170
has a name it's it has time stamps when

00:09:34,180 --> 00:09:36,970
it was created when it was touched

00:09:35,170 --> 00:09:38,920
there's some versioning stuff there's

00:09:36,970 --> 00:09:40,180
the human readable description there are

00:09:38,920 --> 00:09:41,710
some metrics which are collapsed which

00:09:40,180 --> 00:09:44,230
will show in the next slides and then

00:09:41,710 --> 00:09:45,339
there's the weights we talked about the

00:09:44,230 --> 00:09:47,260
goal of all the stuff there's some

00:09:45,339 --> 00:09:48,790
automated gating function right it does

00:09:47,260 --> 00:09:50,529
all the analysis it comes up with some

00:09:48,790 --> 00:09:52,270
score and then you want to compare that

00:09:50,529 --> 00:09:54,100
to some thresholds you've defined and

00:09:52,270 --> 00:09:55,930
say is it marginal did it pass should I

00:09:54,100 --> 00:09:57,880
fail right away so you have to specify

00:09:55,930 --> 00:10:00,070
those thresholds as well and that's

00:09:57,880 --> 00:10:01,270
where you see on this slide here so here

00:10:00,070 --> 00:10:03,220
we're just giving equal weight to the

00:10:01,270 --> 00:10:04,540
two different system and discs the

00:10:03,220 --> 00:10:06,670
metrics defined within there are hidden

00:10:04,540 --> 00:10:08,680
at the moment and then we define the the

00:10:06,670 --> 00:10:12,010
threshold once won't hold on to more

00:10:08,680 --> 00:10:13,420
detail so this is an example of a one

00:10:12,010 --> 00:10:14,170
particular metric this is again

00:10:13,420 --> 00:10:15,910
stackdriver

00:10:14,170 --> 00:10:17,320
in this case if you look at metric type

00:10:15,910 --> 00:10:20,290
it's just the name of a particular

00:10:17,320 --> 00:10:21,640
metric exported by stackdriver we put it

00:10:20,290 --> 00:10:23,620
in a system group which is just a

00:10:21,640 --> 00:10:25,060
psychological grouping that name doesn't

00:10:23,620 --> 00:10:27,880
at the moment have any inheritance

00:10:25,060 --> 00:10:30,010
significance and then we say what judge

00:10:27,880 --> 00:10:31,540
to use and all this configuration is

00:10:30,010 --> 00:10:34,990
passed throughout the various stages of

00:10:31,540 --> 00:10:37,270
the care so I'll flip back and forth a

00:10:34,990 --> 00:10:39,430
little bit so as I go through back and

00:10:37,270 --> 00:10:41,140
forth between these two slides they look

00:10:39,430 --> 00:10:42,220
basically the same it's just referring

00:10:41,140 --> 00:10:45,310
to two different metrics both

00:10:42,220 --> 00:10:46,930
stackdriver defined 1/2 CPU one is disk

00:10:45,310 --> 00:10:49,330
right opps I put them into separate

00:10:46,930 --> 00:10:50,440
groups no other difference there but

00:10:49,330 --> 00:10:53,830
here's where it gets kind of interesting

00:10:50,440 --> 00:10:56,080
this is an atlas metric so remember this

00:10:53,830 --> 00:10:57,520
is in the canary config so obviously

00:10:56,080 --> 00:10:59,650
we're specifying a different system

00:10:57,520 --> 00:11:01,540
forget about what group we went back to

00:10:59,650 --> 00:11:03,040
saying system but in this case instead

00:11:01,540 --> 00:11:03,699
of referring to a metric type by name

00:11:03,040 --> 00:11:08,499
it's an

00:11:03,699 --> 00:11:09,999
actual query um that's it I mean that's

00:11:08,499 --> 00:11:11,589
what's in the canary config obviously

00:11:09,999 --> 00:11:13,359
you're typically dealing with with many

00:11:11,589 --> 00:11:15,489
metrics in this case we kept it as small

00:11:13,359 --> 00:11:17,559
and simple as possible so that it's it's

00:11:15,489 --> 00:11:18,879
legible on the slide and here's another

00:11:17,559 --> 00:11:21,220
Alice one same thing two different

00:11:18,879 --> 00:11:24,429
queries different group same back

00:11:21,220 --> 00:11:26,290
existing alright um in terms of how we

00:11:24,429 --> 00:11:28,689
support these configs there's full

00:11:26,290 --> 00:11:30,540
support Hispanic or programmatically for

00:11:28,689 --> 00:11:33,339
publishing that I'm wearing them

00:11:30,540 --> 00:11:37,749
everything you'd expect there is UI

00:11:33,339 --> 00:11:40,569
support embedded within deck itself the

00:11:37,749 --> 00:11:41,919
intent is that users won't have to

00:11:40,569 --> 00:11:43,540
switch from this tool to that from this

00:11:41,919 --> 00:11:45,399
environment to that to edit their canary

00:11:43,540 --> 00:11:47,739
configs to configure their pipelines to

00:11:45,399 --> 00:11:49,269
interact with the executed Canaries and

00:11:47,739 --> 00:11:50,980
dig down to the results the idea is that

00:11:49,269 --> 00:11:53,199
all of that would be contained within

00:11:50,980 --> 00:11:55,119
the UI and we'll call out throughout

00:11:53,199 --> 00:11:57,699
this the state of these things so the

00:11:55,119 --> 00:12:01,149
state of the GUI editor for the canary

00:11:57,699 --> 00:12:07,720
configs is it's almost there it's mostly

00:12:01,149 --> 00:12:11,289
usable but not quite there so these are

00:12:07,720 --> 00:12:13,389
the renderings Jeremy here entitlement

00:12:11,289 --> 00:12:14,589
so it looks a little better than the

00:12:13,389 --> 00:12:16,569
idler which were going to show a second

00:12:14,589 --> 00:12:18,369
sorry Dan and Scott but it's it's a

00:12:16,569 --> 00:12:20,379
little bit further along we're gonna

00:12:18,369 --> 00:12:22,149
show you in a moment but it looks very

00:12:20,379 --> 00:12:23,980
slick this is the goal is to get to this

00:12:22,149 --> 00:12:25,419
end state to have like a very polished

00:12:23,980 --> 00:12:28,089
experience that feels like the rest of

00:12:25,419 --> 00:12:33,579
spinnaker but brings in all of the clear

00:12:28,089 --> 00:12:35,980
stuff alright so that's yet allure and

00:12:33,579 --> 00:12:38,019
then the idea is that you know somebody

00:12:35,980 --> 00:12:39,459
manages or curate so scary can fix maybe

00:12:38,019 --> 00:12:41,199
it's the application or service owners

00:12:39,459 --> 00:12:42,850
maybe it's some group within your

00:12:41,199 --> 00:12:44,529
organization that has the expertise to

00:12:42,850 --> 00:12:46,359
say this is kind of the paved road at

00:12:44,529 --> 00:12:47,859
least start from this and then customize

00:12:46,359 --> 00:12:49,149
it for your needs but the idea is that

00:12:47,859 --> 00:12:51,129
you build up a library of those canary

00:12:49,149 --> 00:12:52,959
configs and then in your pipeline when

00:12:51,129 --> 00:12:54,970
they said I want a canary stage here you

00:12:52,959 --> 00:12:56,199
just pull from one of those you pull one

00:12:54,970 --> 00:12:58,419
of the choices from that librarians

00:12:56,199 --> 00:13:03,669
canary can fix via a call down and all

00:12:58,419 --> 00:13:05,289
of that work social all right um we

00:13:03,669 --> 00:13:06,850
defined a canary config we're gonna

00:13:05,289 --> 00:13:08,259
execute this thing at runtime by

00:13:06,850 --> 00:13:10,600
hydrating it with some information and

00:13:08,259 --> 00:13:12,309
then it's gonna reach out and call some

00:13:10,600 --> 00:13:13,899
backing metric service and get back some

00:13:12,309 --> 00:13:16,630
results and those results are going to

00:13:13,899 --> 00:13:18,280
be in a format specific to that service

00:13:16,630 --> 00:13:19,390
results look different from Atlas look

00:13:18,280 --> 00:13:21,130
different from stackdriver look

00:13:19,390 --> 00:13:23,190
different from oxemberg these are all in

00:13:21,130 --> 00:13:25,330
turn slightly different results you

00:13:23,190 --> 00:13:27,010
integrate with a backing telemetry

00:13:25,330 --> 00:13:28,600
system we have to implement this small

00:13:27,010 --> 00:13:30,460
component which is a metric service and

00:13:28,600 --> 00:13:32,710
that metric service is responsible for

00:13:30,460 --> 00:13:34,570
yielding this common format so it makes

00:13:32,710 --> 00:13:36,160
its calls those are the validation

00:13:34,570 --> 00:13:38,680
that's going to do and then it

00:13:36,160 --> 00:13:40,210
transforms it into this common format so

00:13:38,680 --> 00:13:42,070
the end result of any of those metrics

00:13:40,210 --> 00:13:43,660
service implementations is going to be

00:13:42,070 --> 00:13:45,460
data that looks like this so once

00:13:43,660 --> 00:13:47,260
there's a name for that metric there are

00:13:45,460 --> 00:13:49,750
some tags key value pairs that uniquely

00:13:47,260 --> 00:13:51,790
identify it some timing information step

00:13:49,750 --> 00:13:54,520
size and then the time series data

00:13:51,790 --> 00:13:57,010
itself and if you have questions just

00:13:54,520 --> 00:13:59,950
just shout them out so far this should

00:13:57,010 --> 00:14:02,410
be fairly straightforward one thing we

00:13:59,950 --> 00:14:03,670
want to make clear is we want to build a

00:14:02,410 --> 00:14:05,380
community around this we want people to

00:14:03,670 --> 00:14:07,840
add support for additional systems and

00:14:05,380 --> 00:14:09,160
we also want our lives to not be hard so

00:14:07,840 --> 00:14:11,320
we booked and we put quite a bit of

00:14:09,160 --> 00:14:13,420
effort into making this thing easy to

00:14:11,320 --> 00:14:15,970
work with so all of the underlying bits

00:14:13,420 --> 00:14:18,340
are exposed via entry points it's all

00:14:15,970 --> 00:14:20,110
swaggered we spend a lot of time when

00:14:18,340 --> 00:14:22,870
working with it working with the swagger

00:14:20,110 --> 00:14:25,360
UI it's very easy to capture data post

00:14:22,870 --> 00:14:27,250
it rerun analysis and try to reproduce

00:14:25,360 --> 00:14:30,100
just the steps you need not have to run

00:14:27,250 --> 00:14:31,630
full tears so there's much but

00:14:30,100 --> 00:14:34,060
everything from the the crud operations

00:14:31,630 --> 00:14:35,730
for the carry can fix themselves stuff

00:14:34,060 --> 00:14:38,770
to say what judges are configured

00:14:35,730 --> 00:14:40,450
kick-off actual carry pipelines what you

00:14:38,770 --> 00:14:42,220
know what buckets can reach what

00:14:40,450 --> 00:14:47,770
electric services have accounts

00:14:42,220 --> 00:14:49,600
configured everything's there so um we

00:14:47,770 --> 00:14:50,920
mentioned panta you realize I don't go

00:14:49,600 --> 00:14:52,630
to do its work so what

00:14:50,920 --> 00:14:54,040
kento which is the Canary Service is

00:14:52,630 --> 00:14:56,230
doing under the covers is running a

00:14:54,040 --> 00:14:57,520
pipeline it's not the top-level

00:14:56,230 --> 00:14:59,470
spinnaker pipeline it's not your

00:14:57,520 --> 00:15:01,270
application pipeline it's a pipeline

00:14:59,470 --> 00:15:03,700
that's doing the work of a particular

00:15:01,270 --> 00:15:05,980
canary run and it looks roughly like

00:15:03,700 --> 00:15:08,640
this so you have two stages that happen

00:15:05,980 --> 00:15:10,660
in parallel one is fetching data and

00:15:08,640 --> 00:15:12,700
converting it to that common format for

00:15:10,660 --> 00:15:14,560
the baseline one is doing the same for

00:15:12,700 --> 00:15:16,420
the canary so these happen in parallel

00:15:14,560 --> 00:15:18,400
they join together in a step that

00:15:16,420 --> 00:15:20,320
essentially pairs them up so make sure

00:15:18,400 --> 00:15:21,790
the start times align make sure you have

00:15:20,320 --> 00:15:25,750
the same number similar number of data

00:15:21,790 --> 00:15:28,150
points it tries to pair up the tags the

00:15:25,750 --> 00:15:30,190
key value sets after match and then it

00:15:28,150 --> 00:15:30,850
produces one common format with all that

00:15:30,190 --> 00:15:33,020
data

00:15:30,850 --> 00:15:35,149
and then the last step is to perform the

00:15:33,020 --> 00:15:37,820
analysis and report the results so all

00:15:35,149 --> 00:15:39,850
that work is scheduled by Canada via

00:15:37,820 --> 00:15:41,899
Orca so it can happen on multiple

00:15:39,850 --> 00:15:43,070
instances you don't need any sort of

00:15:41,899 --> 00:15:45,290
affinity to get back to the same

00:15:43,070 --> 00:15:48,589
instance if it goes off and happily does

00:15:45,290 --> 00:15:50,810
its work there's an entry point that

00:15:48,589 --> 00:15:52,250
says do this canary run form you given

00:15:50,810 --> 00:15:54,140
the parameters that are required which

00:15:52,250 --> 00:15:55,670
we'll look at in a second you can kind

00:15:54,140 --> 00:15:56,839
of mix and match these stages and do

00:15:55,670 --> 00:15:59,420
whatever makes sense because they are

00:15:56,839 --> 00:16:01,910
proper Orca stages under the covers you

00:15:59,420 --> 00:16:03,709
can send a custom pipeline to Clanton so

00:16:01,910 --> 00:16:05,420
you do this and it'll do do that so we

00:16:03,709 --> 00:16:07,910
do quite a bit of development in

00:16:05,420 --> 00:16:09,860
troubleshooting so what this looks like

00:16:07,910 --> 00:16:12,020
in practice you want to kick off a

00:16:09,860 --> 00:16:14,240
canary pipeline so I'm just going to do

00:16:12,020 --> 00:16:17,000
a particular canary run for your parents

00:16:14,240 --> 00:16:18,790
spin up your application but see if the

00:16:17,000 --> 00:16:21,020
reference that config so one of the

00:16:18,790 --> 00:16:22,660
Jason format files we looked at at the

00:16:21,020 --> 00:16:25,220
beginning you have to give it a scope so

00:16:22,660 --> 00:16:27,470
this server group or this cluster or

00:16:25,220 --> 00:16:30,080
this host the most common path is it's a

00:16:27,470 --> 00:16:31,130
server some group of records and then

00:16:30,080 --> 00:16:33,500
you give it time boundaries

00:16:31,130 --> 00:16:35,209
so you're saying consult this canary

00:16:33,500 --> 00:16:38,089
config that exists in the canary config

00:16:35,209 --> 00:16:39,950
library apply to this particular server

00:16:38,089 --> 00:16:41,570
group meaning hydrate it with this this

00:16:39,950 --> 00:16:43,579
parameter required by the custom query

00:16:41,570 --> 00:16:45,589
and do it within these time boundaries

00:16:43,579 --> 00:16:47,959
this step size all those kinds of

00:16:45,589 --> 00:16:49,790
details and you do this for the baseline

00:16:47,959 --> 00:16:52,670
you do it for the canary it goes off and

00:16:49,790 --> 00:16:54,440
does its work so it makes a call to the

00:16:52,670 --> 00:16:56,209
backing metric service whether it's that

00:16:54,440 --> 00:16:57,680
drive around lists previous whichever

00:16:56,209 --> 00:16:59,329
service it happens to be calling and

00:16:57,680 --> 00:17:00,980
then it has to transform it to that

00:16:59,329 --> 00:17:03,560
common format we looked at and that

00:17:00,980 --> 00:17:05,449
format ends up whether you have uh you

00:17:03,560 --> 00:17:07,010
know GCS or s3 configured you can do

00:17:05,449 --> 00:17:10,250
development local you'll just end up in

00:17:07,010 --> 00:17:11,540
memory and so the nice thing about this

00:17:10,250 --> 00:17:12,920
approach of persisting things that each

00:17:11,540 --> 00:17:14,839
step is all this stuff can go away and

00:17:12,920 --> 00:17:16,819
you haven't lost anything besides that

00:17:14,839 --> 00:17:18,679
the Garrett pipeline itself can carry on

00:17:16,819 --> 00:17:20,120
you can just refer to those things later

00:17:18,679 --> 00:17:26,059
just grab the ID out of the pipeline

00:17:20,120 --> 00:17:26,630
status you can pick up yes it's not do

00:17:26,059 --> 00:17:28,459
front 50

00:17:26,630 --> 00:17:31,510
although the code looks suspiciously

00:17:28,459 --> 00:17:31,510
similar whoopsie fun

00:17:32,710 --> 00:17:37,429
not a technical reason I mean you know

00:17:35,240 --> 00:17:40,010
it's like one of the goals with all

00:17:37,429 --> 00:17:43,940
these this work was that we tried to not

00:17:40,010 --> 00:17:45,830
like impede any sort of work for the

00:17:43,940 --> 00:17:47,480
internal canary system or impede work

00:17:45,830 --> 00:17:49,340
for front fifty and the other spinnaker

00:17:47,480 --> 00:17:50,960
projects we tried to kind of move fast

00:17:49,340 --> 00:17:53,929
by doing it in isolation with the goal

00:17:50,960 --> 00:17:55,400
to eventually converge back on a common

00:17:53,929 --> 00:17:58,400
library and that work is kind of

00:17:55,400 --> 00:18:00,350
underway now to pull out up front fifty

00:17:58,400 --> 00:18:02,150
the work that does that all the storage

00:18:00,350 --> 00:18:04,669
work and then make it a library

00:18:02,150 --> 00:18:06,289
dependency of each so right now we would

00:18:04,669 --> 00:18:09,440
have either had to make remote calls to

00:18:06,289 --> 00:18:12,230
front fifteen or try to link in modules

00:18:09,440 --> 00:18:13,610
up front fifty so we essentially copied

00:18:12,230 --> 00:18:17,150
over and cleaned up a bit

00:18:13,610 --> 00:18:18,669
couple hundred lines in front 50 so it's

00:18:17,150 --> 00:18:23,419
not very satisfying answer but that's

00:18:18,669 --> 00:18:25,190
exercise okay so merge metrics you know

00:18:23,419 --> 00:18:27,230
match up the different sets that have

00:18:25,190 --> 00:18:29,419
matching key value pairs and the tags

00:18:27,230 --> 00:18:30,860
maps make sure all the you know the

00:18:29,419 --> 00:18:31,900
start times the same step size is the

00:18:30,860 --> 00:18:34,700
same correct number of data points

00:18:31,900 --> 00:18:36,590
produced one thing that common format

00:18:34,700 --> 00:18:38,600
looks just like the original common

00:18:36,590 --> 00:18:44,570
format only now there are two things so

00:18:38,600 --> 00:18:47,090
instead of so imagine this thing but

00:18:44,570 --> 00:18:48,740
instead of just values it has baseline

00:18:47,090 --> 00:18:49,669
and then a set of values and then canary

00:18:48,740 --> 00:18:51,559
in a set of hours

00:18:49,669 --> 00:18:54,770
it looks very person learners it just

00:18:51,559 --> 00:18:56,659
pairs up so that's done by another

00:18:54,770 --> 00:18:58,400
worker stage within panda again that

00:18:56,659 --> 00:19:00,200
gets persisted and then the last step is

00:18:58,400 --> 00:19:01,820
to perform the analysis and kind of

00:19:00,200 --> 00:19:02,840
funny Michael touched on this but as we

00:19:01,820 --> 00:19:04,820
were putting this together

00:19:02,840 --> 00:19:07,970
Michael point out that I forgot to put

00:19:04,820 --> 00:19:10,159
the fancy file folder thing at the end

00:19:07,970 --> 00:19:11,539
of canary analysis here and then it

00:19:10,159 --> 00:19:13,340
turns out I didn't forget to put on the

00:19:11,539 --> 00:19:15,549
slide I forgot to put it in the code

00:19:13,340 --> 00:19:15,549
base

00:19:16,180 --> 00:19:22,910
so does return the results but it turns

00:19:20,420 --> 00:19:25,670
out they only live at the moment later

00:19:22,910 --> 00:19:27,920
today in pipeline context alter the

00:19:25,670 --> 00:19:30,500
current shop so this is sort of like a

00:19:27,920 --> 00:19:34,850
former unit testing and we verified that

00:19:30,500 --> 00:19:36,200
we forgot to do that right so it turns

00:19:34,850 --> 00:19:37,550
out how this works is spinnaker and

00:19:36,200 --> 00:19:40,280
we're getting to the fun part in a

00:19:37,550 --> 00:19:41,510
second there's a new canary stage we

00:19:40,280 --> 00:19:42,890
touched on this a little bit but the

00:19:41,510 --> 00:19:44,960
idea was to leverage as much as possible

00:19:42,890 --> 00:19:46,640
the existing canary naca stages that

00:19:44,960 --> 00:19:48,830
live internal to Netflix and I know the

00:19:46,640 --> 00:19:50,360
option X folks have have sort of Rhian

00:19:48,830 --> 00:19:52,490
abled those against their system as well

00:19:50,360 --> 00:19:54,680
but they're not heavily used they live

00:19:52,490 --> 00:19:56,270
mostly inside of Netflix we wanted to

00:19:54,680 --> 00:19:58,460
leverage it as much as we can but not

00:19:56,270 --> 00:20:00,440
directly reuse it because that system

00:19:58,460 --> 00:20:02,900
has to continue to live on while this

00:20:00,440 --> 00:20:05,000
issue is developed and we'll get to this

00:20:02,900 --> 00:20:06,290
you get a little bit but the goal of

00:20:05,000 --> 00:20:08,120
this thing is to get it to a point of

00:20:06,290 --> 00:20:10,730
maturity such that Netflix and Google

00:20:08,120 --> 00:20:11,990
feel comfortable sort of hoisting it on

00:20:10,730 --> 00:20:13,820
the public and saying here's how we

00:20:11,990 --> 00:20:15,980
think you should do things so to do that

00:20:13,820 --> 00:20:17,840
we kind of have to like canary the

00:20:15,980 --> 00:20:19,190
canary system and run it internally here

00:20:17,840 --> 00:20:21,380
and with some other customers to make

00:20:19,190 --> 00:20:23,510
sure it it does what we want especially

00:20:21,380 --> 00:20:26,120
with respect to the behavior of existing

00:20:23,510 --> 00:20:30,020
systems that it'll eventually splash out

00:20:26,120 --> 00:20:31,430
of existence right it's gonna be like

00:20:30,020 --> 00:20:33,260
every other spinnaker server so there's

00:20:31,430 --> 00:20:35,060
full api and going support for

00:20:33,260 --> 00:20:36,800
everything we're going to see in

00:20:35,060 --> 00:20:38,900
figuring the canary can fix themselves

00:20:36,800 --> 00:20:41,510
so specifying them editing them useful

00:20:38,900 --> 00:20:43,850
you wanna support an API support canary

00:20:41,510 --> 00:20:45,200
stage within the pipeline editor so your

00:20:43,850 --> 00:20:47,810
application you want a canary stage

00:20:45,200 --> 00:20:49,340
there's a full UI for that and

00:20:47,810 --> 00:20:51,950
eventually to drill down to the canary

00:20:49,340 --> 00:20:53,390
reports there are renderings for that

00:20:51,950 --> 00:20:55,520
kind of thing but there's there's no

00:20:53,390 --> 00:20:57,470
work at all on that yet the score is

00:20:55,520 --> 00:21:00,140
surfaced but there's no drilling down

00:20:57,470 --> 00:21:03,250
yet so that's that's hopefully soon but

00:21:00,140 --> 00:21:06,400
definitely in the future work custody

00:21:03,250 --> 00:21:06,400
all right

00:21:08,200 --> 00:21:11,560
since we don't want to wait hours for

00:21:10,150 --> 00:21:12,850
things to complete I ran a bunch of

00:21:11,560 --> 00:21:14,740
things in advance and will poke around

00:21:12,850 --> 00:21:16,720
and now we can change these things for

00:21:14,740 --> 00:21:19,300
all time as well but it should look

00:21:16,720 --> 00:21:22,180
moderately familiar mr. spinnaker um

00:21:19,300 --> 00:21:25,210
there's a new tab this canary tab up

00:21:22,180 --> 00:21:27,940
there now I should say where this work

00:21:25,210 --> 00:21:31,210
is taking place there's a still private

00:21:27,940 --> 00:21:34,780
github repo for canta itself and they

00:21:31,210 --> 00:21:36,790
still private like a code layer on top

00:21:34,780 --> 00:21:40,330
of dem codec create a repo where we have

00:21:36,790 --> 00:21:42,850
this edition or that's basically it so I

00:21:40,330 --> 00:21:44,620
think I'm running this deck instance

00:21:42,850 --> 00:21:46,150
locally on my laptop and current is

00:21:44,620 --> 00:21:50,410
running out of um that has all the rest

00:21:46,150 --> 00:21:52,150
of the spinners but this the updated UI

00:21:50,410 --> 00:21:54,490
has a canary tab so you click on this

00:21:52,150 --> 00:21:58,750
tab and you'll notice it looks exactly

00:21:54,490 --> 00:22:00,130
like the renderings well it's getting

00:21:58,750 --> 00:22:01,960
there it's pretty cool sewed in from

00:22:00,130 --> 00:22:03,160
Google and Scott from from Netflix and

00:22:01,960 --> 00:22:04,930
we're building this out and they're

00:22:03,160 --> 00:22:07,270
using Jeremy's rendering so it's pretty

00:22:04,930 --> 00:22:08,680
cool to see it come together it is you

00:22:07,270 --> 00:22:10,870
define it configure this way so there's

00:22:08,680 --> 00:22:12,670
a full editor the format that's behind

00:22:10,870 --> 00:22:14,200
this is the first format we showed so

00:22:12,670 --> 00:22:16,150
the name description and all that but

00:22:14,200 --> 00:22:18,340
this is where you define what metrics

00:22:16,150 --> 00:22:19,810
you care about you say what system to

00:22:18,340 --> 00:22:21,550
make those don't execute those calls

00:22:19,810 --> 00:22:23,140
against how to group them and eventually

00:22:21,550 --> 00:22:26,920
how to weight them and all those things

00:22:23,140 --> 00:22:28,300
will be defined in this UI sites

00:22:26,920 --> 00:22:30,370
depending on the system it's gonna have

00:22:28,300 --> 00:22:31,780
some specific bits so if it's that

00:22:30,370 --> 00:22:33,670
driver and the metrics are configured

00:22:31,780 --> 00:22:37,540
differently then atlas those you eyes

00:22:33,670 --> 00:22:39,340
look slightly different but keeping with

00:22:37,540 --> 00:22:41,080
most things spinnaker expect by Jason

00:22:39,340 --> 00:22:42,880
there's an editor you can bring it up at

00:22:41,080 --> 00:22:45,610
it the Jason directly those changes are

00:22:42,880 --> 00:22:47,140
persisted so even the things that aren't

00:22:45,610 --> 00:22:50,560
supported in the audience you can still

00:22:47,140 --> 00:22:58,570
to get to a little bit sorry Steve I

00:22:50,560 --> 00:22:59,950
knew you were here so but this should

00:22:58,570 --> 00:23:02,200
look a lot like what you saw on the

00:22:59,950 --> 00:23:03,850
first slide so um you know the

00:23:02,200 --> 00:23:06,130
classifiers or the weights of the groups

00:23:03,850 --> 00:23:07,690
and all that timestamps description and

00:23:06,130 --> 00:23:10,990
then all the different metrics so they

00:23:07,690 --> 00:23:14,160
think there are four metrics can I go

00:23:10,990 --> 00:23:14,160
back to the size

00:23:14,299 --> 00:23:19,309
so that's a config now when we get to a

00:23:16,940 --> 00:23:21,559
pipeline so this is a very simple

00:23:19,309 --> 00:23:23,389
pipeline we configured but put pretty

00:23:21,559 --> 00:23:25,039
pretty true life so there's a big stage

00:23:23,389 --> 00:23:27,349
there's a deploy stage there's a canary

00:23:25,039 --> 00:23:27,919
stage so the big stage is what it is

00:23:27,349 --> 00:23:29,989
anywhere

00:23:27,919 --> 00:23:32,690
deploy we're just deploying a new server

00:23:29,989 --> 00:23:34,999
group there's one cluster it's running

00:23:32,690 --> 00:23:36,950
in this this application there are a few

00:23:34,999 --> 00:23:38,659
server groups within it we're going to

00:23:36,950 --> 00:23:40,070
take this sort of second path Michael

00:23:38,659 --> 00:23:41,209
described we're not going to provision a

00:23:40,070 --> 00:23:42,950
baseline and a canary

00:23:41,209 --> 00:23:43,999
we're just provisioning at a canary and

00:23:42,950 --> 00:23:47,570
we're using the existing production

00:23:43,999 --> 00:23:49,219
server group as the baseline it we did

00:23:47,570 --> 00:23:51,440
this in advance but also the people

00:23:49,219 --> 00:23:52,969
so there's several groups five six and

00:23:51,440 --> 00:23:55,399
seven don't look for those in the

00:23:52,969 --> 00:23:58,190
execution details but looking at this

00:23:55,399 --> 00:24:00,859
pipeline you have baked you have deploy

00:23:58,190 --> 00:24:02,869
you have canary um nothing too exciting

00:24:00,859 --> 00:24:05,929
here no surprises it goes into that

00:24:02,869 --> 00:24:07,519
cluster I think I added into the startup

00:24:05,929 --> 00:24:09,259
script collect generate some artificial

00:24:07,519 --> 00:24:11,029
CPU load and I was able to turn it on

00:24:09,259 --> 00:24:12,950
and off deposit to fail it yes but other

00:24:11,029 --> 00:24:14,440
than that there's there's no match but

00:24:12,950 --> 00:24:17,089
here's the new canary stage

00:24:14,440 --> 00:24:18,979
configuration so the top is the typical

00:24:17,089 --> 00:24:25,369
control flow editor and then you have

00:24:18,979 --> 00:24:27,950
the configured self good Steven so we

00:24:25,369 --> 00:24:30,019
have the analysis type so real-time or

00:24:27,950 --> 00:24:32,389
retrospective I think the real time is I

00:24:30,019 --> 00:24:33,649
kick this thing off that says wait 20

00:24:32,389 --> 00:24:35,509
minutes for things to warm up and then

00:24:33,649 --> 00:24:37,279
run a two hour canary and 30 minute

00:24:35,509 --> 00:24:39,079
interval that's the kind of information

00:24:37,279 --> 00:24:40,579
you would give to a a real-time

00:24:39,079 --> 00:24:42,049
configuration and you see that

00:24:40,579 --> 00:24:44,089
information here so there's lifetime and

00:24:42,049 --> 00:24:45,859
hours there's a result strategy which

00:24:44,089 --> 00:24:47,029
we'll explain in a second this is the

00:24:45,859 --> 00:24:48,109
pulldown that lets you choose from the

00:24:47,029 --> 00:24:49,729
library figs

00:24:48,109 --> 00:24:52,669
I only have one in there so that's

00:24:49,729 --> 00:24:54,499
that's what you end up with five minute

00:24:52,669 --> 00:24:55,820
warm-up period 15-minute intervals so

00:24:54,499 --> 00:24:58,279
you can end up with four canary runs

00:24:55,820 --> 00:25:02,869
starting it's sort of T plus five

00:24:58,279 --> 00:25:04,279
minutes and running 2t plus 60 and then

00:25:02,869 --> 00:25:07,039
the analysis that growing or sliding

00:25:04,279 --> 00:25:08,149
look back so growing is always start at

00:25:07,039 --> 00:25:10,190
the beginning of when you started

00:25:08,149 --> 00:25:12,259
collecting the data and run up until a

00:25:10,190 --> 00:25:13,849
point around the canary run and sliding

00:25:12,259 --> 00:25:16,629
off that is just from now go back

00:25:13,849 --> 00:25:18,649
however many eight minutes the interval

00:25:16,629 --> 00:25:20,690
actually I think you can say how far

00:25:18,649 --> 00:25:23,809
back that's not right yeah you can say

00:25:20,690 --> 00:25:25,190
how far up all right so this gets a

00:25:23,809 --> 00:25:26,780
little interesting so these are

00:25:25,190 --> 00:25:29,120
expressions there

00:25:26,780 --> 00:25:31,730
nobody can get them right I had to ask

00:25:29,120 --> 00:25:33,530
the trio from ways to send me the

00:25:31,730 --> 00:25:35,060
expressions that work for them with

00:25:33,530 --> 00:25:36,620
their internal system because I know we

00:25:35,060 --> 00:25:39,260
worked on them and they do what we want

00:25:36,620 --> 00:25:41,810
to find baseline and canary cues so it's

00:25:39,260 --> 00:25:43,190
funny but the real story here is that we

00:25:41,810 --> 00:25:44,360
need to come up with helper functions

00:25:43,190 --> 00:25:45,680
and provide them there where you could

00:25:44,360 --> 00:25:46,580
say like get me the latest they're

00:25:45,680 --> 00:25:48,200
getting me the newest they're the

00:25:46,580 --> 00:25:50,150
largest or whatever from this cluster

00:25:48,200 --> 00:25:52,130
and give some like we do targeted

00:25:50,150 --> 00:25:53,420
coordinates and all the other stages we

00:25:52,130 --> 00:25:54,680
need to have helper functions for that

00:25:53,420 --> 00:25:57,050
because this thing where you sort of

00:25:54,680 --> 00:25:59,870
like run a pipeline capture an execution

00:25:57,050 --> 00:26:01,760
trace and then just like Edie one leaf

00:25:59,870 --> 00:26:03,620
at a time and hopefully try to land on

00:26:01,760 --> 00:26:07,250
the right value and your expression is

00:26:03,620 --> 00:26:09,410
kind of painful so that's why you end up

00:26:07,250 --> 00:26:12,020
with giant expressions like this so

00:26:09,410 --> 00:26:13,820
we'll make that easier in the meantime

00:26:12,020 --> 00:26:16,310
what these two expressions do is resolve

00:26:13,820 --> 00:26:17,990
the last server group running in that

00:26:16,310 --> 00:26:19,160
cluster before we ran the pipeline and

00:26:17,990 --> 00:26:21,350
then the new one that was provisioned by

00:26:19,160 --> 00:26:23,680
the upstream deploy so we end up with

00:26:21,350 --> 00:26:25,880
those two server groups those values

00:26:23,680 --> 00:26:27,800
will leave the default step size which i

00:26:25,880 --> 00:26:29,480
think is a minute the threshold is kind

00:26:27,800 --> 00:26:31,580
of interesting so we specify those in

00:26:29,480 --> 00:26:33,260
the Canary config so it just uses those

00:26:31,580 --> 00:26:34,880
values as the defaults for the UI and

00:26:33,260 --> 00:26:36,890
you can configure whatever you want and

00:26:34,880 --> 00:26:38,450
override it which makes it easier to do

00:26:36,890 --> 00:26:40,190
like retrospective analysis where you

00:26:38,450 --> 00:26:43,340
start moving knowledge and sliders

00:26:40,190 --> 00:26:45,830
around to land on there's a long lasting

00:26:43,340 --> 00:26:47,390
it's a standard spinnaker stage so you

00:26:45,830 --> 00:26:51,220
can send notifications and do all the

00:26:47,390 --> 00:26:51,220
things you can do with other stages yes

00:27:00,070 --> 00:27:05,210
a great question so this question was

00:27:03,470 --> 00:27:06,890
some folks might not have heard would

00:27:05,210 --> 00:27:08,600
there be a separate configuration else

00:27:06,890 --> 00:27:10,040
to be able to clean up the baseline and

00:27:08,600 --> 00:27:14,000
married like the infrastructure that's

00:27:10,040 --> 00:27:15,350
provisioned part of this so the current

00:27:14,000 --> 00:27:16,700
story spinnaker there are two stages

00:27:15,350 --> 00:27:19,160
that relate to canary there's a canary

00:27:16,700 --> 00:27:21,410
stage and an ACH stage so canary stage

00:27:19,160 --> 00:27:23,150
provisions of baseline and Canarian is

00:27:21,410 --> 00:27:25,310
to remember from Kristen Greg's talk on

00:27:23,150 --> 00:27:26,420
canary systems yesterday the idea is

00:27:25,310 --> 00:27:28,340
that they start at the same point in

00:27:26,420 --> 00:27:29,990
time one hasn't you know had a longer

00:27:28,340 --> 00:27:31,520
life span and start taking on different

00:27:29,990 --> 00:27:33,200
behaviors you want them to come into

00:27:31,520 --> 00:27:34,940
existence the same point in time so

00:27:33,200 --> 00:27:36,080
you're comparing apples apples and not

00:27:34,940 --> 00:27:38,530
disturbing your production

00:27:36,080 --> 00:27:39,940
infrastructure as well so

00:27:38,530 --> 00:27:42,430
that's the canary stage and then over

00:27:39,940 --> 00:27:44,050
time eventually an ACA stage was created

00:27:42,430 --> 00:27:45,910
which just does the canary bit so it

00:27:44,050 --> 00:27:48,580
assumes that the infrastructure exists

00:27:45,910 --> 00:27:50,140
and you just refer to those two server

00:27:48,580 --> 00:27:53,470
groups or clusters or whatever to do the

00:27:50,140 --> 00:27:55,690
comparison what we've done so far is

00:27:53,470 --> 00:27:57,580
more more closely approximates the ACA

00:27:55,690 --> 00:27:58,870
stage so that's why we have these

00:27:57,580 --> 00:28:00,910
expressions we assume that

00:27:58,870 --> 00:28:02,380
infrastructure exists whether because of

00:28:00,910 --> 00:28:04,180
something upstream in this pipeline or

00:28:02,380 --> 00:28:06,340
because of something else we neither

00:28:04,180 --> 00:28:08,380
provision or clean up infrastructure it

00:28:06,340 --> 00:28:10,660
has become clear that we're going to

00:28:08,380 --> 00:28:11,640
have to do that as well we just haven't

00:28:10,660 --> 00:28:14,140
done it yet

00:28:11,640 --> 00:28:15,820
in a moment we'll show how this thing

00:28:14,140 --> 00:28:17,320
actually does its work and we think

00:28:15,820 --> 00:28:19,030
it'll be in like an almost trivial

00:28:17,320 --> 00:28:20,980
amount of work to also synthesize those

00:28:19,030 --> 00:28:36,610
stages but we haven't done it yet but

00:28:20,980 --> 00:28:38,050
the answer is yeah yes there's just a

00:28:36,610 --> 00:28:39,010
list of Canary configures and it gives

00:28:38,050 --> 00:28:40,570
you everything we don't need and I don't

00:28:39,010 --> 00:28:41,800
think we have a circuit API on there yet

00:28:40,570 --> 00:28:44,200
either so it's pretty much giving you

00:28:41,800 --> 00:28:52,660
anything that's returned by the backing

00:28:44,200 --> 00:28:54,040
p.m. - yes these matches from third

00:28:52,660 --> 00:28:55,930
parties like let's say most aircraft

00:28:54,040 --> 00:28:59,710
fighters another thing and then how does

00:28:55,930 --> 00:29:03,910
that provide the hook right - right so

00:28:59,710 --> 00:29:06,130
then commentary's sure so yeah because I

00:29:03,910 --> 00:29:07,920
think how are we collecting logs from

00:29:06,130 --> 00:29:15,040
the backing systems and then how are we

00:29:07,920 --> 00:29:16,870
purchased analysis - where's the hook

00:29:15,040 --> 00:29:19,690
send and make sure that those metrics

00:29:16,870 --> 00:29:23,050
from third parties that are not okay yep

00:29:19,690 --> 00:29:24,370
so they enter your spinnaker is is

00:29:23,050 --> 00:29:25,990
responsible for making sure that the

00:29:24,370 --> 00:29:28,000
applications can publish metrics to

00:29:25,990 --> 00:29:29,890
those systems so before you can use a

00:29:28,000 --> 00:29:31,810
system like this your application has to

00:29:29,890 --> 00:29:33,400
be capable of publishing the metrics and

00:29:31,810 --> 00:29:35,890
you have to have some way to consume

00:29:33,400 --> 00:29:37,840
them and the creative service that backs

00:29:35,890 --> 00:29:40,150
this gets configured with credentials to

00:29:37,840 --> 00:29:42,250
consume those services so in the case of

00:29:40,150 --> 00:29:43,810
Atlas it's not really credential space

00:29:42,250 --> 00:29:45,400
do you protect access to it but we don't

00:29:43,810 --> 00:29:46,570
have to give any kind of key to access

00:29:45,400 --> 00:29:48,910
so you have to be able to reach it in

00:29:46,570 --> 00:29:51,360
the case of stackdriver you have to give

00:29:48,910 --> 00:29:53,549
adjacent key associated with a service

00:29:51,360 --> 00:29:55,920
account to the particular Penta instance

00:29:53,549 --> 00:29:58,170
to be able to consume those metrics but

00:29:55,920 --> 00:29:59,400
it's not Panther that's closing that

00:29:58,170 --> 00:30:00,990
loop you have to be able to publish the

00:29:59,400 --> 00:30:03,270
metrics and you have to be able to

00:30:00,990 --> 00:30:06,090
provide a key somehow to consume them

00:30:03,270 --> 00:30:08,280
and there are you know custom

00:30:06,090 --> 00:30:10,920
integrations with those backing systems

00:30:08,280 --> 00:30:12,750
in Kayenta so cotta has a module for

00:30:10,920 --> 00:30:15,420
Atlas a module for stackdriver and a

00:30:12,750 --> 00:30:20,400
module for Prometheus so far does that

00:30:15,420 --> 00:30:22,920
make sense so this is a fairly simple

00:30:20,400 --> 00:30:26,549
let's call it a real-time analysis and

00:30:22,920 --> 00:30:29,309
we ran this ahead of time so looking at

00:30:26,549 --> 00:30:30,630
the executions we ran one that that

00:30:29,309 --> 00:30:33,330
succeeded and then one that we caused to

00:30:30,630 --> 00:30:35,460
fail so there's a baked nothing too

00:30:33,330 --> 00:30:37,770
exciting there and then we had a deploy

00:30:35,460 --> 00:30:41,490
stage and it provisioned group vo o 6

00:30:37,770 --> 00:30:42,929
and then the canary executed and here's

00:30:41,490 --> 00:30:45,390
work that's kind of interesting so we

00:30:42,929 --> 00:30:47,730
said I think one hour 15 minute

00:30:45,390 --> 00:30:52,590
intervals and give it five minutes to

00:30:47,730 --> 00:30:54,120
warm up I think yeah so here's the

00:30:52,590 --> 00:30:55,590
configuration so there's the config that

00:30:54,120 --> 00:30:56,970
was reference to the type of analysis

00:30:55,590 --> 00:30:58,590
and the other parameters we just

00:30:56,970 --> 00:31:00,750
mentioned and you can see what those

00:30:58,590 --> 00:31:03,510
expressions evaluated to it resolves

00:31:00,750 --> 00:31:06,330
group O 5 and o 6 so the baseline is 5

00:31:03,510 --> 00:31:08,640
canario says well here's here's where it

00:31:06,330 --> 00:31:09,990
gets kind of neat so what the new canary

00:31:08,640 --> 00:31:12,650
stage work is doing is synthesizing

00:31:09,990 --> 00:31:14,400
stages to do this work so does it bitter

00:31:12,650 --> 00:31:16,320
arithmetic based on the timing

00:31:14,400 --> 00:31:17,910
information and it says well you want to

00:31:16,320 --> 00:31:19,980
wait five minutes organ knows how to

00:31:17,910 --> 00:31:22,290
wait why should I wait it just hit the

00:31:19,980 --> 00:31:24,600
sizes or wait stage and it says ok then

00:31:22,290 --> 00:31:26,640
we have 15 minute intervals so 15-minute

00:31:24,600 --> 00:31:28,980
wait stage and then we have a run canary

00:31:26,640 --> 00:31:30,540
task and that run canary test you can

00:31:28,980 --> 00:31:33,330
see run canary one two three and four

00:31:30,540 --> 00:31:34,559
those are the calls out to contest the

00:31:33,330 --> 00:31:38,190
rest of this stuff is happening within

00:31:34,559 --> 00:31:40,290
sort of Orca proper Lou's burger so if

00:31:38,190 --> 00:31:42,000
we take a look at the actual results so

00:31:40,290 --> 00:31:43,980
in this case things are grand everything

00:31:42,000 --> 00:31:46,559
came up 100 and if you take a look at

00:31:43,980 --> 00:31:49,590
the durations you see 15 30 45 in one

00:31:46,559 --> 00:31:51,900
hour and this might be a little hard to

00:31:49,590 --> 00:31:53,309
read but you can see the updates you can

00:31:51,900 --> 00:31:59,190
see the durations you can see the

00:31:53,309 --> 00:32:02,640
results so if we take this living on it

00:31:59,190 --> 00:32:04,470
why does it take over a minute return

00:32:02,640 --> 00:32:06,210
this is an awesome question actually so

00:32:04,470 --> 00:32:07,830
it's not kind of in my home I sell Rob

00:32:06,210 --> 00:32:10,110
Fletcher walk it I've seen leaning

00:32:07,830 --> 00:32:13,399
forward do you want me to start and then

00:32:10,110 --> 00:32:18,690
you correct me alright so if we look at

00:32:13,399 --> 00:32:21,960
this I could not ask him to ask that

00:32:18,690 --> 00:32:23,159
question so these two things are stages

00:32:21,960 --> 00:32:24,929
that happen in parallel and then there's

00:32:23,159 --> 00:32:27,600
a joint and the way that cubase stuff

00:32:24,929 --> 00:32:29,340
works when that let's that's one stage

00:32:27,600 --> 00:32:31,590
really this sort of fetch and transform

00:32:29,340 --> 00:32:33,450
when that stage completes it says I know

00:32:31,590 --> 00:32:35,490
I have downstream stages let me omit a

00:32:33,450 --> 00:32:37,860
start stage messenger an event so I'll

00:32:35,490 --> 00:32:40,440
push a start stage message for merge

00:32:37,860 --> 00:32:41,789
metrics and then merge metrics basically

00:32:40,440 --> 00:32:44,190
get send says I still have upstream

00:32:41,789 --> 00:32:46,100
dependencies let me wait a minute see if

00:32:44,190 --> 00:32:48,600
they're satisfied and then this one here

00:32:46,100 --> 00:32:50,820
pushes this message at almost the same

00:32:48,600 --> 00:32:52,470
time but not the same time and then it

00:32:50,820 --> 00:32:54,149
says that's an identical message and it

00:32:52,470 --> 00:32:56,130
ignores that one and then just have to

00:32:54,149 --> 00:32:59,909
wait for that interval is that is that a

00:32:56,130 --> 00:33:01,260
working so that's basically so we can

00:32:59,909 --> 00:33:07,740
make that configurable we could make a

00:33:01,260 --> 00:33:10,620
different looks like a message is coming

00:33:07,740 --> 00:33:13,700
into the queue just ignores what it

00:33:10,620 --> 00:33:13,700
should do is like preempt

00:33:14,179 --> 00:33:29,010
prioritized that one so the downside is

00:33:27,659 --> 00:33:30,450
we wait a minute on the canary and it's

00:33:29,010 --> 00:33:32,130
like three or four seconds of work which

00:33:30,450 --> 00:33:33,809
you'll see in a second the upside is we

00:33:32,130 --> 00:33:37,019
saved like three years in work by just

00:33:33,809 --> 00:33:38,760
leaning directly on orkut so we just we

00:33:37,019 --> 00:33:42,630
shard it out that time to everybody in

00:33:38,760 --> 00:33:45,720
the future that's the idea

00:33:42,630 --> 00:33:47,250
but it's good spot and yeah so that was

00:33:45,720 --> 00:33:49,139
the one that succeeded which was the

00:33:47,250 --> 00:33:51,029
earlier one and then here's one that

00:33:49,139 --> 00:33:53,070
failed so if we look at the

00:33:51,029 --> 00:33:54,299
configuration we see the tasks are

00:33:53,070 --> 00:33:56,039
basically the same weights it's five

00:33:54,299 --> 00:33:58,769
minutes wait that initial interval

00:33:56,039 --> 00:34:00,690
kickoff that that child canary run and

00:33:58,769 --> 00:34:02,850
it failed and then you look here and you

00:34:00,690 --> 00:34:04,470
see okay here's a result it's a failure

00:34:02,850 --> 00:34:06,450
it gives you a reason and all that's

00:34:04,470 --> 00:34:07,940
rolled up from the underlying judge and

00:34:06,450 --> 00:34:12,510
then you can see the timing information

00:34:07,940 --> 00:34:14,349
we did some in we I just lost gesture

00:34:12,510 --> 00:34:16,359
didn't do any others but

00:34:14,349 --> 00:34:18,700
um we have clipboard things so you can

00:34:16,359 --> 00:34:20,799
copy and paste the iso timestamps that

00:34:18,700 --> 00:34:22,239
underlie that canary run the idea being

00:34:20,799 --> 00:34:23,979
that it would be very nice to be able to

00:34:22,239 --> 00:34:26,139
quickly say well it didn't quite do what

00:34:23,979 --> 00:34:27,399
I wanted but I feel like I'm close let

00:34:26,139 --> 00:34:28,809
me create another pipeline with that

00:34:27,399 --> 00:34:31,419
canary stage and start to play around

00:34:28,809 --> 00:34:33,789
and then we did a bit of that earlier in

00:34:31,419 --> 00:34:35,950
preparation first so that was a

00:34:33,789 --> 00:34:38,139
real-time canary run fifteen minute

00:34:35,950 --> 00:34:40,210
intervals over an hour so here's a

00:34:38,139 --> 00:34:42,129
retrospective retrospective canary run

00:34:40,210 --> 00:34:45,190
over the same server groups with the

00:34:42,129 --> 00:34:48,669
same intervals but no waiting except for

00:34:45,190 --> 00:34:49,929
the minute so retrospective instead of

00:34:48,669 --> 00:34:51,759
real-time of the parameters are slightly

00:34:49,929 --> 00:34:53,109
different so instead of warm up and that

00:34:51,759 --> 00:34:55,059
kind of thing you just give the interval

00:34:53,109 --> 00:34:56,589
and the rest is basically saving it

00:34:55,059 --> 00:34:58,599
based on canary but then just below that

00:34:56,589 --> 00:35:00,670
you have start time and end time and we

00:34:58,599 --> 00:35:02,920
copy pasted those values into here so

00:35:00,670 --> 00:35:05,019
it's the same infrastructure same

00:35:02,920 --> 00:35:06,009
parameters same canary config although

00:35:05,019 --> 00:35:08,259
we don't have to wait for anything to

00:35:06,009 --> 00:35:10,479
happen what you run it different

00:35:08,259 --> 00:35:15,819
thresholds all of that you can change

00:35:10,479 --> 00:35:17,950
when you're on this thing take a look

00:35:15,819 --> 00:35:19,299
the execution so if you look at the

00:35:17,950 --> 00:35:20,739
tasks that were synthesized there's no

00:35:19,299 --> 00:35:23,950
wait stages because we don't need them

00:35:20,739 --> 00:35:25,539
the timing values would all line up see

00:35:23,950 --> 00:35:26,859
the parameters here and then you give

00:35:25,539 --> 00:35:29,579
the end result so this matches the

00:35:26,859 --> 00:35:32,259
initial success one same exact results

00:35:29,579 --> 00:35:33,249
one thing you'll notice here so we're

00:35:32,259 --> 00:35:34,630
not waiting a minute we're waiting

00:35:33,249 --> 00:35:36,160
waiting four minutes and there's

00:35:34,630 --> 00:35:37,869
actually no reason to do this sequential

00:35:36,160 --> 00:35:40,180
e we can certainly do the runs in

00:35:37,869 --> 00:35:41,799
parallel we probably should it seemed

00:35:40,180 --> 00:35:43,119
easier to consume this way but we can

00:35:41,799 --> 00:35:47,319
just render them that way we don't

00:35:43,119 --> 00:35:48,849
really have to to power to do so but

00:35:47,319 --> 00:35:50,950
those are essentially the same runs the

00:35:48,849 --> 00:36:19,390
different data spur system each step it

00:35:50,950 --> 00:36:21,940
doesn't squash but you just the results

00:36:19,390 --> 00:36:23,979
of that hydrated queries our system it's

00:36:21,940 --> 00:36:26,060
not full enough systems it makes the

00:36:23,979 --> 00:36:29,930
call when it needs to incur sisters

00:36:26,060 --> 00:36:34,940
in the common formats so you actually

00:36:29,930 --> 00:36:45,380
just started in having never run married

00:36:34,940 --> 00:36:51,080
that's why I can relate that there's no

00:36:45,380 --> 00:36:52,220
reasoning later - yeah we do that

00:36:51,080 --> 00:36:54,470
constant it doesn't even have to be

00:36:52,220 --> 00:36:56,030
stuff that we've had any interaction

00:36:54,470 --> 00:36:57,680
with with spinnaker before we're just

00:36:56,030 --> 00:37:00,520
clearing the vacuum systems collecting

00:36:57,680 --> 00:37:02,960
some data and then you can run sort of

00:37:00,520 --> 00:37:04,730
smaller versions of that canned canary

00:37:02,960 --> 00:37:06,530
pipeline and say I don't even want you

00:37:04,730 --> 00:37:12,880
to do the queries you can easily post it

00:37:06,530 --> 00:37:51,080
to one of the development entries we do

00:37:12,880 --> 00:38:02,540
and then Lois don't wondering is whether

00:37:51,080 --> 00:38:03,770
you could use yeah this goes something

00:38:02,540 --> 00:38:05,390
we haven't really dealt with yet that

00:38:03,770 --> 00:38:07,160
Chris talked about in detail yesterday

00:38:05,390 --> 00:38:08,930
that is something that we're just

00:38:07,160 --> 00:38:12,050
getting to now which is this idea of

00:38:08,930 --> 00:38:13,880
having different types of metrics where

00:38:12,050 --> 00:38:15,830
you can say this is an error metric so

00:38:13,880 --> 00:38:18,440
we can sort of implicitly know that well

00:38:15,830 --> 00:38:19,910
less is is okay - so instead of having

00:38:18,440 --> 00:38:21,440
to specify those kinds of rules or

00:38:19,910 --> 00:38:23,090
qualifiers for each metric you and they

00:38:21,440 --> 00:38:24,800
would have some identifying

00:38:23,090 --> 00:38:26,750
characteristic or attitude be where we

00:38:24,800 --> 00:38:28,340
would know certain things so in this

00:38:26,750 --> 00:38:30,230
particular result strategy action has to

00:38:28,340 --> 00:38:31,460
do with if you're running if you're

00:38:30,230 --> 00:38:33,830
collecting data from a bunch of

00:38:31,460 --> 00:38:35,090
different regions and then running local

00:38:33,830 --> 00:38:37,910
analysis in those regions how to

00:38:35,090 --> 00:38:38,920
aggregate those so it may be it's the

00:38:37,910 --> 00:38:46,890
wrong place to surface

00:38:38,920 --> 00:38:50,470
or maybe a little high specific

00:38:46,890 --> 00:38:53,319
multiples so if you're running free

00:38:50,470 --> 00:38:55,240
Canaries one in three different AWS

00:38:53,319 --> 00:39:00,010
regions which you want your pipeline

00:38:55,240 --> 00:39:04,240
that to consume those results from one

00:39:00,010 --> 00:39:05,829
run though right one yeah you could take

00:39:04,240 --> 00:39:06,940
the lowest score and failure pipeline

00:39:05,829 --> 00:39:14,680
gets to the lowest score take the

00:39:06,940 --> 00:39:18,760
average of all when you pipeline page do

00:39:14,680 --> 00:39:20,440
you have like what's the results that

00:39:18,760 --> 00:39:25,599
are parameters that are returned but

00:39:20,440 --> 00:39:27,790
going to the next stage or yeah so what

00:39:25,599 --> 00:39:31,359
is propagated into the calling pipeline

00:39:27,790 --> 00:39:33,819
is like the result so score a reason and

00:39:31,359 --> 00:39:35,290
some more classification information so

00:39:33,819 --> 00:39:37,569
it'll say things like it failed because

00:39:35,290 --> 00:39:39,040
this particular parameter was high and I

00:39:37,569 --> 00:39:40,569
think there's more detail that can be

00:39:39,040 --> 00:39:42,910
surfaced that we haven't surfaced yet

00:39:40,569 --> 00:39:44,500
but most of it is more like besides a

00:39:42,910 --> 00:39:46,839
score human readable information and

00:39:44,500 --> 00:39:49,780
then the pass/fail low high that kind of

00:39:46,839 --> 00:39:51,849
information the idea is that I think in

00:39:49,780 --> 00:39:53,770
most cases at some point it becomes a

00:39:51,849 --> 00:39:55,720
human it makes a judgment based on that

00:39:53,770 --> 00:39:57,670
information I doubt you would want to

00:39:55,720 --> 00:39:59,680
take the resulting score and do

00:39:57,670 --> 00:40:01,960
something based on that value

00:39:59,680 --> 00:40:03,250
automatically because the thresholds are

00:40:01,960 --> 00:40:05,799
where you decide you did it passed or

00:40:03,250 --> 00:40:08,609
did it fail if it fails I think that a

00:40:05,799 --> 00:40:08,609
human has to do something

00:40:11,069 --> 00:40:17,109
it's surfaced into the butt so this kind

00:40:15,309 --> 00:40:19,420
of information including the score is in

00:40:17,109 --> 00:40:21,250
that result that's propagated into the

00:40:19,420 --> 00:40:22,839
pipeline and can be used in the

00:40:21,250 --> 00:40:36,220
notification messages for a simple

00:40:22,839 --> 00:40:38,349
expression it probably wants like more

00:40:36,220 --> 00:40:40,119
custom notifications than just building

00:40:38,349 --> 00:40:42,550
expression so you say send a report as

00:40:40,119 --> 00:40:45,520
part of this notification we haven't

00:40:42,550 --> 00:40:48,700
so last bit here and this is um also

00:40:45,520 --> 00:40:50,860
like a retrospective canary in this case

00:40:48,700 --> 00:40:52,690
30-minute intervals but we configured it

00:40:50,860 --> 00:40:55,440
with a sliding window so it just looks

00:40:52,690 --> 00:40:59,260
back 30 minutes and if you look at the

00:40:55,440 --> 00:41:02,080
times here so they're each 30 minute

00:40:59,260 --> 00:41:03,070
directions instead of 30 or 16 but it is

00:41:02,080 --> 00:41:04,390
you can sort of mix and match of

00:41:03,070 --> 00:41:05,650
different parameters based on daily

00:41:04,390 --> 00:41:07,180
party collected or data you have been

00:41:05,650 --> 00:41:11,140
collect again and you don't have to wait

00:41:07,180 --> 00:41:12,310
for all of that to me any questions

00:41:11,140 --> 00:41:13,690
about staging I'll go back and then

00:41:12,310 --> 00:41:23,680
we'll sort of finish up the slides who

00:41:13,690 --> 00:41:25,420
weren't kind of we're uh the primary

00:41:23,680 --> 00:41:27,190
like there's there's some odds and ends

00:41:25,420 --> 00:41:29,080
we have to finish but that's not what's

00:41:27,190 --> 00:41:31,960
really blocking us from open source yeah

00:41:29,080 --> 00:41:33,610
now it really is running it internally

00:41:31,960 --> 00:42:00,400
primarily at Netflix to gain the

00:41:33,610 --> 00:42:02,080
confidence that we expect so we have one

00:42:00,400 --> 00:42:04,270
of our like internal bugs who as its do

00:42:02,080 --> 00:42:06,190
is to write a guide for adding support

00:42:04,270 --> 00:42:08,170
for additional library services or

00:42:06,190 --> 00:42:09,880
metric snores and eric wise like who's

00:42:08,170 --> 00:42:12,730
giving a talk on monitoring metrics

00:42:09,880 --> 00:42:15,970
right after this and its support for

00:42:12,730 --> 00:42:17,470
prometheus in like two days and he

00:42:15,970 --> 00:42:20,110
wasn't working that whole time cuz I saw

00:42:17,470 --> 00:42:21,580
him at lunch and stuff so it's not it's

00:42:20,110 --> 00:42:23,230
not terribly hard and my plan was to

00:42:21,580 --> 00:42:25,600
kind of quickly write up some notes and

00:42:23,230 --> 00:42:28,330
I shared maybe a paragraph of pointers

00:42:25,600 --> 00:42:29,830
and we sit next to each but it's pretty

00:42:28,330 --> 00:42:31,210
straightforward we do need a guide so

00:42:29,830 --> 00:42:33,970
the answer is when we open source it

00:42:31,210 --> 00:42:35,200
there will absolutely be a guide the

00:42:33,970 --> 00:42:42,700
idea is that it can't be that you just

00:42:35,200 --> 00:42:43,210
have to know who to ask or yes it's in

00:42:42,700 --> 00:42:46,570
there already

00:42:43,210 --> 00:42:48,460
so we've - yeah

00:42:46,570 --> 00:42:49,690
without learn more about it come up with

00:42:48,460 --> 00:42:53,280
examples all that but it's in there

00:42:49,690 --> 00:42:53,280
there's a sample carry config there's

00:42:54,390 --> 00:43:07,810
what it's all in there so yeah I mean if

00:42:57,550 --> 00:43:09,520
you uh so there's a Prometheus it's not

00:43:07,810 --> 00:43:11,470
huge to add support for another services

00:43:09,520 --> 00:43:13,480
I'd be surprised if it was a thousand or

00:43:11,470 --> 00:43:14,680
1,200 lines and it's not it's not a

00:43:13,480 --> 00:43:17,230
hundred percent but the plumbing works

00:43:14,680 --> 00:43:19,540
all the way through no it's it's pretty

00:43:17,230 --> 00:43:21,640
solid um swagger UI everything's there

00:43:19,540 --> 00:43:22,990
we use all the time we put a lot of

00:43:21,640 --> 00:43:24,790
effort in and making sure we can run it

00:43:22,990 --> 00:43:26,560
locally develop against it and not have

00:43:24,790 --> 00:43:31,350
to stand up a bunch of stuff or need a a

00:43:26,560 --> 00:43:31,350
monster of a machine to run it alright

00:43:32,340 --> 00:43:38,860
thank so um we noticed a lot of

00:43:36,790 --> 00:43:40,900
especially preparing for this like copy

00:43:38,860 --> 00:43:42,880
and pasting from completed real-time

00:43:40,900 --> 00:43:44,200
canary runs so it seems like it would be

00:43:42,880 --> 00:43:45,820
cool to be able to just have a button

00:43:44,200 --> 00:43:47,770
that says just capture this is a

00:43:45,820 --> 00:43:49,300
retrospective canary like copy

00:43:47,770 --> 00:43:51,190
everything over so I don't have to just

00:43:49,300 --> 00:43:52,870
copy and paste things over it seems like

00:43:51,190 --> 00:43:54,130
it would save time and then Michael

00:43:52,870 --> 00:43:55,540
pointed out like why do I need a

00:43:54,130 --> 00:43:57,670
pipeline to do that and you don't really

00:43:55,540 --> 00:43:59,560
- maybe even a more of an ad-hoc

00:43:57,670 --> 00:44:00,790
canary that sort of runs and you can

00:43:59,560 --> 00:44:02,620
check on the status and then if you're

00:44:00,790 --> 00:44:05,590
happy persisted there's a pipeline

00:44:02,620 --> 00:44:07,300
config and then things like I noticed

00:44:05,590 --> 00:44:08,770
would we do a bunch of like adjusting

00:44:07,300 --> 00:44:10,540
the boundaries and the parameters to try

00:44:08,770 --> 00:44:13,180
to get it to sort of fail as quick as

00:44:10,540 --> 00:44:14,440
possible or you know how soon can we

00:44:13,180 --> 00:44:17,530
gain confidence that we know which

00:44:14,440 --> 00:44:19,090
direction to go so it feels like we can

00:44:17,530 --> 00:44:20,760
do more advanced things like that

00:44:19,090 --> 00:44:23,950
because we have this system that could

00:44:20,760 --> 00:44:25,450
be sort of dynamically interacted with

00:44:23,950 --> 00:44:27,670
when we can change just the parameters

00:44:25,450 --> 00:44:30,460
without having to call the backing

00:44:27,670 --> 00:44:33,840
systems again feels like we can do to

00:44:30,460 --> 00:44:33,840
some of us more sort of advancement

00:44:35,850 --> 00:44:41,080
thanks that's us um we're on the slack

00:44:38,890 --> 00:44:45,910
channel a lot any questions we didn't

00:44:41,080 --> 00:45:01,460
get to or no plates

00:44:45,910 --> 00:45:02,450
Chris so a long time ago a bunch of a

00:45:01,460 --> 00:45:03,560
sentient room and try to come up with

00:45:02,450 --> 00:45:05,720
something that had various

00:45:03,560 --> 00:45:07,880
characteristics and one of the things I

00:45:05,720 --> 00:45:09,260
don't like her things are named so

00:45:07,880 --> 00:45:10,910
similar something else you search for

00:45:09,260 --> 00:45:13,580
them you're gonna find 20 things that

00:45:10,910 --> 00:45:15,350
are unrelated and there is a coal mine

00:45:13,580 --> 00:45:17,320
in Arizona called Chi anthem

00:45:15,350 --> 00:45:20,330
greater canary in a coal mine it fits

00:45:17,320 --> 00:45:22,970
but there's also town named Panza in

00:45:20,330 --> 00:45:25,640
Arizona and apparently when Utah is also

00:45:22,970 --> 00:45:27,859
a geological formation that is called

00:45:25,640 --> 00:45:31,480
Kayenta and most importantly it's the

00:45:27,859 --> 00:45:31,480
one that wasn't in the urban dictionary

00:45:32,230 --> 00:45:37,700
so before I forget um this is a big

00:45:35,600 --> 00:45:40,280
joint effort obviously sewed in from

00:45:37,700 --> 00:45:42,320
from Google Scott from Netflix no see

00:45:40,280 --> 00:45:45,080
we're working with Chris Netflix so it's

00:45:42,320 --> 00:45:47,780
a big big joint effort but uh but it's

00:45:45,080 --> 00:45:50,090
been fun it's been cool um this is our

00:45:47,780 --> 00:45:51,440
plan for the open source Canary strategy

00:45:50,090 --> 00:45:53,600
for Spencer as far as we're concerned

00:45:51,440 --> 00:45:55,130
this is going to be the thing several of

00:45:53,600 --> 00:45:57,619
us are working full time to get this

00:45:55,130 --> 00:45:59,630
thing ready so it's it's not a matter of

00:45:57,619 --> 00:46:05,060
us just not being sure we're just not

00:45:59,630 --> 00:46:06,770
there yet this is something that we're

00:46:05,060 --> 00:46:12,380
going to open source news part of we've

00:46:06,770 --> 00:46:14,180
been other projects the only thing is

00:46:12,380 --> 00:46:15,920
gonna be custom Netflix are things

00:46:14,180 --> 00:46:21,020
clearing that are internal things that

00:46:15,920 --> 00:46:23,869
we just have it open John so in the talk

00:46:21,020 --> 00:46:34,820
yesterday about the Netflix internal

00:46:23,869 --> 00:46:36,590
sharing stuff there are some technical

00:46:34,820 --> 00:46:38,090
challenges there but one of the things

00:46:36,590 --> 00:46:40,400
we do right now in the old census

00:46:38,090 --> 00:46:42,410
because we have filtering systems you

00:46:40,400 --> 00:46:44,480
know the passive flow pacify

00:46:42,410 --> 00:46:45,770
in the new system we're going to be

00:46:44,480 --> 00:46:47,630
developing something that says this is

00:46:45,770 --> 00:46:50,150
an error metric so it's have certain

00:46:47,630 --> 00:46:51,800
characteristics so comparing direct

00:46:50,150 --> 00:46:53,030
apples to apples is can be a little

00:46:51,800 --> 00:46:56,180
challenging

00:46:53,030 --> 00:46:58,010
so I believe the plan currently is going

00:46:56,180 --> 00:46:59,810
to be very much perception like we can

00:46:58,010 --> 00:47:02,150
read mrs. cui who can't mine but will be

00:46:59,810 --> 00:47:03,830
simultaneously people can choose which

00:47:02,150 --> 00:47:05,570
one the early adopters can choose which

00:47:03,830 --> 00:47:09,950
one is actually the threshold or both

00:47:05,570 --> 00:47:11,930
and results are at least as from there

00:47:09,950 --> 00:47:14,480
before which ones that to go to the end

00:47:11,930 --> 00:47:16,220
goal is are we providing good service so

00:47:14,480 --> 00:47:17,780
you're gonna run canary on two Canaries

00:47:16,220 --> 00:47:19,040
you're gonna be carrying a our a/b

00:47:17,780 --> 00:47:21,430
testing baby I think would be I don't

00:47:19,040 --> 00:47:23,510
know the same rate be tested here

00:47:21,430 --> 00:47:25,940
ironically enough we can canary connect

00:47:23,510 --> 00:47:28,880
hands up you could very bill system so

00:47:25,940 --> 00:47:30,830
that's another easy but that's the

00:47:28,880 --> 00:47:33,230
general plan to start out with but

00:47:30,830 --> 00:47:37,490
eventually we will try to guess what the

00:47:33,230 --> 00:47:39,110
was ones the other things and try to

00:47:37,490 --> 00:47:40,490
come up with the idea a lot your wrist

00:47:39,110 --> 00:47:44,570
except it has to work error in it it's

00:47:40,490 --> 00:47:46,070
probably their latency people name

00:47:44,570 --> 00:47:49,250
things pretty well but if they don't we

00:47:46,070 --> 00:47:51,830
can just contact them or hopefully when

00:47:49,250 --> 00:47:53,270
you rolled over hopefully if we do break

00:47:51,830 --> 00:47:55,430
something we break on the side of not

00:47:53,270 --> 00:47:56,660
letting so they all goes down I didn't

00:47:55,430 --> 00:47:58,340
have to get sponsors question I just

00:47:56,660 --> 00:48:00,050
realized so the same way we're

00:47:58,340 --> 00:48:02,600
synthesizing weight and run canary

00:48:00,050 --> 00:48:05,410
stages we get status nice deploy destroy

00:48:02,600 --> 00:48:06,740
your scaled-down stages as well as like

00:48:05,410 --> 00:48:08,390
sort of

00:48:06,740 --> 00:48:09,860
commingled resize stages so if you

00:48:08,390 --> 00:48:11,960
wanted to have a configuration that said

00:48:09,860 --> 00:48:13,910
well run this canary and also used it to

00:48:11,960 --> 00:48:15,920
control traffic distribution it over

00:48:13,910 --> 00:48:18,020
time you can you can drop and resize

00:48:15,920 --> 00:48:19,820
stages at the point each interval

00:48:18,020 --> 00:48:30,850
completes to adjust the baseline of

00:48:19,820 --> 00:48:32,870
character completes or something yeah

00:48:30,850 --> 00:48:39,760
yeah it should be straightforward to

00:48:32,870 --> 00:48:39,760
synthesize what we need fun thanks

00:48:44,520 --> 00:48:46,610

YouTube URL: https://www.youtube.com/watch?v=LqquUa-IT28


