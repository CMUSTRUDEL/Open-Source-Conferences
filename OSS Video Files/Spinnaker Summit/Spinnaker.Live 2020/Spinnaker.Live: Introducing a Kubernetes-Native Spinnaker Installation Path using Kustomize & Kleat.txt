Title: Spinnaker.Live: Introducing a Kubernetes-Native Spinnaker Installation Path using Kustomize & Kleat
Publication date: 2020-06-18
Playlist: Spinnaker.Live 2020
Description: 
	Maggie Neterval and Eric Zimanyi are excited to introduce a new Kubernetes-native Spinnaker configuration and installation experience using Kustomize and Kleat. We discuss our motivation for redesigning this workflow, including the history and drawbacks of the existing Halyard-based experience. We then demo a complete configuration and deployment workflow using Kleat-generated service config files and the new Spinnaker Kustomization base.
Captions: 
	00:00:06,790 --> 00:00:11,349
everyone thank you so much for joining

00:00:08,530 --> 00:00:13,690
spinnaker live today we hope you enjoyed

00:00:11,349 --> 00:00:15,969
all the presentations on the main stage

00:00:13,690 --> 00:00:19,119
and really appreciate you joining this

00:00:15,969 --> 00:00:21,130
breakout session so today we are excited

00:00:19,119 --> 00:00:23,260
to introduce a kubernetes native

00:00:21,130 --> 00:00:27,390
spinnaker installation that using

00:00:23,260 --> 00:00:30,220
customized and a new tool called cleat

00:00:27,390 --> 00:00:33,370
first let us introduce ourselves my name

00:00:30,220 --> 00:00:36,250
is Maggie nutter Vall and I'm Eric

00:00:33,370 --> 00:00:39,159
Zamagni we are both software engineers

00:00:36,250 --> 00:00:41,890
on Google's spinnaker OSS team here in

00:00:39,159 --> 00:00:44,019
New York and we are among the primary

00:00:41,890 --> 00:00:47,710
maintainer zuv Spinnaker's kubernetes

00:00:44,019 --> 00:00:50,109
provider as well as halyard so brief

00:00:47,710 --> 00:00:52,719
housekeeping note before we dive in

00:00:50,109 --> 00:00:54,399
Maggie and Eric of the future are more

00:00:52,719 --> 00:00:56,049
than happy to answer any questions that

00:00:54,399 --> 00:00:58,179
come up during this presentation so

00:00:56,049 --> 00:01:02,949
please feel free to enter those in the

00:00:58,179 --> 00:01:05,440
chat function so the agenda for this

00:01:02,949 --> 00:01:08,770
breakout session is first we'll go over

00:01:05,440 --> 00:01:11,050
a brief history of halyard the current

00:01:08,770 --> 00:01:13,630
most common installation pathway for

00:01:11,050 --> 00:01:15,790
spinnaker and some of the drawbacks then

00:01:13,630 --> 00:01:17,680
we'll introduce Clete a tool we wrote to

00:01:15,790 --> 00:01:21,450
replace part of the halyard workflow

00:01:17,680 --> 00:01:22,780
Eric will give a demo of the full new

00:01:21,450 --> 00:01:25,570
configuration and installation

00:01:22,780 --> 00:01:27,400
experience of spinnaker and then finally

00:01:25,570 --> 00:01:29,440
we'll just review a comparison of the

00:01:27,400 --> 00:01:31,270
halyard based workflow versus this new

00:01:29,440 --> 00:01:33,250
clean customized based workflow for

00:01:31,270 --> 00:01:37,000
managing spinnaker big and deploying

00:01:33,250 --> 00:01:40,420
Center so now I'll pass it off to Eric

00:01:37,000 --> 00:01:43,440
to give a brief history of halyard all

00:01:40,420 --> 00:01:46,090
right thanks buddy um so I guess around

00:01:43,440 --> 00:01:47,860
2016 the state of installation of

00:01:46,090 --> 00:01:49,930
spinnaker it was pretty difficult to get

00:01:47,860 --> 00:01:51,700
spinnaker installed on some of the

00:01:49,930 --> 00:01:53,980
problems that people trying to get

00:01:51,700 --> 00:01:57,700
started using spinnaker right into word

00:01:53,980 --> 00:02:00,190
that there was no documentation of any

00:01:57,700 --> 00:02:02,650
of the config parameters so there's

00:02:00,190 --> 00:02:04,659
really no way other than asking and

00:02:02,650 --> 00:02:07,920
slack or reading the code to understand

00:02:04,659 --> 00:02:12,670
even what was configurable in spinnaker

00:02:07,920 --> 00:02:14,680
we had very little to no documentation

00:02:12,670 --> 00:02:17,620
on how to actually deploy spinnaker

00:02:14,680 --> 00:02:20,350
which involved if you're deploying two

00:02:17,620 --> 00:02:22,330
VMs downloading the right debian package

00:02:20,350 --> 00:02:25,390
is putting the config in the right place

00:02:22,330 --> 00:02:27,370
starting up all of those micro services

00:02:25,390 --> 00:02:29,680
and then hoping that everything worked

00:02:27,370 --> 00:02:31,450
together and in the case of deploying to

00:02:29,680 --> 00:02:33,070
kubernetes was actually even more

00:02:31,450 --> 00:02:35,650
difficult than that it's you had to

00:02:33,070 --> 00:02:39,730
start writing service and deployment mo

00:02:35,650 --> 00:02:41,890
for each micro service um and then on

00:02:39,730 --> 00:02:43,840
top of that you guys actually write the

00:02:41,890 --> 00:02:46,330
config files for each micro service um

00:02:43,840 --> 00:02:48,760
and so what how you did was halyard

00:02:46,330 --> 00:02:51,670
actually solves a lot of those problems

00:02:48,760 --> 00:02:53,500
for users um it created a new

00:02:51,670 --> 00:02:55,960
command-line tool called halyard that

00:02:53,500 --> 00:02:57,700
gave that had pretty good documentation

00:02:55,960 --> 00:03:00,070
on all of the various things that you

00:02:57,700 --> 00:03:02,830
could configure um and halyard actually

00:03:00,070 --> 00:03:05,080
deployed spinnaker for use either to

00:03:02,830 --> 00:03:06,550
virtual machines or to a peruvian andes

00:03:05,080 --> 00:03:10,330
cluster which solved a lot of these

00:03:06,550 --> 00:03:13,630
problems um so I think now four years

00:03:10,330 --> 00:03:15,130
later take a step back and kind of look

00:03:13,630 --> 00:03:17,080
at the problems that how you're

00:03:15,130 --> 00:03:19,930
dissolving kind of where we are today um

00:03:17,080 --> 00:03:21,880
and I think one of the biggest pain

00:03:19,930 --> 00:03:24,010
points that we see with users of halyard

00:03:21,880 --> 00:03:26,650
is that it's very difficult to

00:03:24,010 --> 00:03:30,220
impossible to adopt a git ops workflow

00:03:26,650 --> 00:03:32,440
um because how you're both generates all

00:03:30,220 --> 00:03:34,480
of the service and deployment yeah

00:03:32,440 --> 00:03:36,670
Mulford appointed kubernetes and also

00:03:34,480 --> 00:03:38,350
applies it there's no intermediate step

00:03:36,670 --> 00:03:40,930
for people to actually see what's

00:03:38,350 --> 00:03:42,640
getting deployed entik um let's actually

00:03:40,930 --> 00:03:44,140
be able to either check that into source

00:03:42,640 --> 00:03:47,560
control if they want or to have some

00:03:44,140 --> 00:03:49,090
audit process to look at that um and an

00:03:47,560 --> 00:03:50,830
extension of that is that there's

00:03:49,090 --> 00:03:53,410
essentially no way to customize that

00:03:50,830 --> 00:03:55,150
yamo either so as a really common use

00:03:53,410 --> 00:03:57,160
case some people want different liveness

00:03:55,150 --> 00:04:01,060
probes for their spinnaker micro

00:03:57,160 --> 00:04:04,000
services some people want certain micro

00:04:01,060 --> 00:04:05,770
services to have certain affinities and

00:04:04,000 --> 00:04:08,830
toleration x' attached to them so they

00:04:05,770 --> 00:04:11,110
can deploy on certain nodes all of these

00:04:08,830 --> 00:04:13,780
customizations need to be done via

00:04:11,110 --> 00:04:15,460
upstream contributions and then pass

00:04:13,780 --> 00:04:17,440
through multiple config parameters

00:04:15,460 --> 00:04:18,700
almonds so these are some of the kind of

00:04:17,440 --> 00:04:20,470
workflows that people are trying to

00:04:18,700 --> 00:04:23,740
adopt today that halyard isn't really

00:04:20,470 --> 00:04:25,240
solved and so with that I'll pass it

00:04:23,740 --> 00:04:29,110
over to Maggie to start talking about

00:04:25,240 --> 00:04:31,980
tweet awesome thanks Eric um so quickly

00:04:29,110 --> 00:04:35,130
before we move into cleat I like

00:04:31,980 --> 00:04:37,740
share and actual design document for

00:04:35,130 --> 00:04:40,980
halyard no just kidding but this is an

00:04:37,740 --> 00:04:45,000
apt metaphor for the various things that

00:04:40,980 --> 00:04:48,390
halyard is doing so as we mentioned you

00:04:45,000 --> 00:04:50,550
know it is both documenting from its COI

00:04:48,390 --> 00:04:52,320
documentation what's available to put in

00:04:50,550 --> 00:04:55,350
your top-level spinnaker config it

00:04:52,320 --> 00:04:57,000
exposes a CLI to edit that for you it

00:04:55,350 --> 00:05:00,300
translates those into the individual

00:04:57,000 --> 00:05:01,950
service profiles configures the micro

00:05:00,300 --> 00:05:05,070
service resource animal and then finally

00:05:01,950 --> 00:05:07,350
applies those for you all in one and so

00:05:05,070 --> 00:05:09,840
as Eric mentioned you know fast forward

00:05:07,350 --> 00:05:11,940
four years later we now have other tools

00:05:09,840 --> 00:05:14,250
that folks who are already using

00:05:11,940 --> 00:05:17,010
kubernetes are more used to to do many

00:05:14,250 --> 00:05:20,910
of these steps and so we would like the

00:05:17,010 --> 00:05:23,220
world to look more like this and so for

00:05:20,910 --> 00:05:26,820
example you know we maybe no longer need

00:05:23,220 --> 00:05:27,930
a CLI to edit a mo file most folks who

00:05:26,820 --> 00:05:31,320
are operating spinnaker are now

00:05:27,930 --> 00:05:34,020
comfortable doing that directly um and

00:05:31,320 --> 00:05:35,880
then as well deploying spinnaker people

00:05:34,020 --> 00:05:37,440
are now comfortable using if you cuddle

00:05:35,880 --> 00:05:41,040
directly so we don't really need to have

00:05:37,440 --> 00:05:44,460
that hood either and then similarly with

00:05:41,040 --> 00:05:46,950
kind of configuring the the profiles and

00:05:44,460 --> 00:05:49,140
then mounting those into each micro

00:05:46,950 --> 00:05:51,120
service and you know maybe customizing

00:05:49,140 --> 00:05:52,860
the resource animal along the way these

00:05:51,120 --> 00:05:54,390
are all things that customize is great

00:05:52,860 --> 00:05:56,940
so we don't really need to reinvent the

00:05:54,390 --> 00:05:59,160
wheel with halyard anymore but the one

00:05:56,940 --> 00:06:01,470
piece that really is spinnaker specific

00:05:59,160 --> 00:06:03,450
that can at this point be replaced by an

00:06:01,470 --> 00:06:06,270
existing tool is transforming a

00:06:03,450 --> 00:06:08,490
top-level spinnaker config file how can

00:06:06,270 --> 00:06:10,590
big into each individual micro service

00:06:08,490 --> 00:06:14,930
profile and so we decided to write a

00:06:10,590 --> 00:06:17,550
lighter-weight siela that does only that

00:06:14,930 --> 00:06:20,580
so this is just a summary of the

00:06:17,550 --> 00:06:23,040
workflow that Eric is about to demo and

00:06:20,580 --> 00:06:25,650
so we've kind of decomposed the halyard

00:06:23,040 --> 00:06:27,690
workflow into tools that just do what

00:06:25,650 --> 00:06:28,920
they're best at and so cleat the new

00:06:27,690 --> 00:06:31,200
tool that we wrote that you'll see

00:06:28,920 --> 00:06:33,090
shortly is just in terms of translate

00:06:31,200 --> 00:06:36,060
and not how config into the individual

00:06:33,090 --> 00:06:37,710
service conveys and then will actually

00:06:36,060 --> 00:06:40,020
compose the resource yeah Moe we've

00:06:37,710 --> 00:06:42,510
customized and finally apply it with cue

00:06:40,020 --> 00:06:45,540
cuddle so I will pass it over to Eric

00:06:42,510 --> 00:06:49,110
for the demo all right thanks

00:06:45,540 --> 00:06:51,270
so I will now present a terminal window

00:06:49,110 --> 00:06:54,710
just give me one second to get that set

00:06:51,270 --> 00:06:58,350
up here all right

00:06:54,710 --> 00:07:00,270
um so for this demo I will start by

00:06:58,350 --> 00:07:02,040
showing you a really simple how config

00:07:00,270 --> 00:07:07,320
that I'm going to use to deploy

00:07:02,040 --> 00:07:09,600
spinnaker this is my that's how config

00:07:07,320 --> 00:07:12,360
um a couple of things that you'll notice

00:07:09,600 --> 00:07:14,220
about this um the first and perhaps most

00:07:12,360 --> 00:07:17,310
striking thing about it is how small is

00:07:14,220 --> 00:07:21,030
how config is and that's because cleat

00:07:17,310 --> 00:07:23,640
is actually going to only require you to

00:07:21,030 --> 00:07:26,340
specify fields that you actually want to

00:07:23,640 --> 00:07:28,860
change from the default so where is

00:07:26,340 --> 00:07:31,350
halyard had this habit of every time you

00:07:28,860 --> 00:07:33,270
ran a hell commend writing out default

00:07:31,350 --> 00:07:36,030
values for every parameter in the Hal

00:07:33,270 --> 00:07:37,920
config cleat does not do that it allows

00:07:36,030 --> 00:07:40,020
you to just specify the fields that you

00:07:37,920 --> 00:07:42,900
actually care about anything that is not

00:07:40,020 --> 00:07:46,200
in this configure faulted to its default

00:07:42,900 --> 00:07:48,390
value um the other thing you'll notice

00:07:46,200 --> 00:07:50,490
is this does look - all of this extra

00:07:48,390 --> 00:07:52,350
fields very much like the Hal config and

00:07:50,490 --> 00:07:54,330
that's because we have as much as

00:07:52,350 --> 00:07:56,310
possible try to keep compatibility with

00:07:54,330 --> 00:07:59,250
the helping fake so there are a few

00:07:56,310 --> 00:08:00,990
specific fields on who's where there

00:07:59,250 --> 00:08:03,990
have been some changes that will be

00:08:00,990 --> 00:08:05,700
documented in a migration guide but by

00:08:03,990 --> 00:08:06,930
and large this is exactly the same

00:08:05,700 --> 00:08:09,570
structure that you would see in your

00:08:06,930 --> 00:08:11,430
fake so if you have a Hal config today

00:08:09,570 --> 00:08:14,280
you can just use that with cleat with a

00:08:11,430 --> 00:08:16,620
few minor changes um and also will have

00:08:14,280 --> 00:08:17,850
the option of deleting all of the config

00:08:16,620 --> 00:08:24,110
blocks that you don't actually care

00:08:17,850 --> 00:08:26,760
about um and so what I'm gonna do now is

00:08:24,110 --> 00:08:28,890
let's just delete everything in that

00:08:26,760 --> 00:08:31,140
service can face folder so I'm gonna use

00:08:28,890 --> 00:08:33,360
cleat to take this how can fake and

00:08:31,140 --> 00:08:40,050
generate the configs for all of the

00:08:33,360 --> 00:08:41,849
micro services so the way to invoke cui

00:08:40,050 --> 00:08:43,890
is you give it a Hal config file and

00:08:41,849 --> 00:08:45,570
then you give it a folder where it

00:08:43,890 --> 00:08:51,090
should put all the micro service code

00:08:45,570 --> 00:08:56,790
base and so now if I go to these servers

00:08:51,090 --> 00:08:58,740
configs you'll see that I have a config

00:08:56,790 --> 00:08:59,500
for all of the micro services and just

00:08:58,740 --> 00:09:01,150
as one example

00:08:59,500 --> 00:09:04,630
oh if I look at the cloud driver config

00:09:01,150 --> 00:09:07,150
um I see that my kubernetes account that

00:09:04,630 --> 00:09:08,620
was in the how config is there and just

00:09:07,150 --> 00:09:11,020
as one other example let's look at the

00:09:08,620 --> 00:09:12,700
Orca config and it has configured

00:09:11,020 --> 00:09:14,230
pipeline templates to true which is

00:09:12,700 --> 00:09:16,150
something I had in my house config and

00:09:14,230 --> 00:09:23,710
has set the timezone at the right place

00:09:16,150 --> 00:09:25,600
expected you know having seen how kweep

00:09:23,710 --> 00:09:27,730
can take that Hal config and translate

00:09:25,600 --> 00:09:29,470
it into service configs let's move on to

00:09:27,730 --> 00:09:31,030
the step of how would I actually deploy

00:09:29,470 --> 00:09:32,950
spinnaker so that solved the first

00:09:31,030 --> 00:09:34,570
problem the second problem is okay now I

00:09:32,950 --> 00:09:36,130
have these servers configs by the way

00:09:34,570 --> 00:09:38,680
deploy spinnaker to my kubernetes

00:09:36,130 --> 00:09:41,380
cluster and so as Maggie mentioned

00:09:38,680 --> 00:09:43,360
earlier the way we have decided to solve

00:09:41,380 --> 00:09:45,070
that problem is by using customized um

00:09:43,360 --> 00:09:48,070
so for those of you who are familiar

00:09:45,070 --> 00:09:49,870
customized allows you to define a base

00:09:48,070 --> 00:09:52,240
customization which is kind of a bundle

00:09:49,870 --> 00:09:55,060
of kubernetes resources that you can

00:09:52,240 --> 00:09:57,400
refer to and then add various overlays

00:09:55,060 --> 00:09:59,980
and customizations on top of and so we

00:09:57,400 --> 00:10:02,710
have built a base customization for

00:09:59,980 --> 00:10:05,680
deploying spinnaker um which then makes

00:10:02,710 --> 00:10:07,810
it easy for people to mount their config

00:10:05,680 --> 00:10:10,540
files the specific ones generated by

00:10:07,810 --> 00:10:14,350
cleat into those containers and make

00:10:10,540 --> 00:10:18,490
whatever customizations they want so

00:10:14,350 --> 00:10:26,610
let's go to this spinnaker config where

00:10:18,490 --> 00:10:29,050
you go and so here is my customization

00:10:26,610 --> 00:10:31,720
until I'm referring to this base

00:10:29,050 --> 00:10:33,280
customization I'm refering to the one on

00:10:31,720 --> 00:10:36,000
my local disk but you can also refer to

00:10:33,280 --> 00:10:41,200
the one directly on github if you want

00:10:36,000 --> 00:10:44,920
and you'll see that I am mounting the

00:10:41,200 --> 00:10:47,380
config for each of these config files

00:10:44,920 --> 00:10:53,710
into the appropriate config map for each

00:10:47,380 --> 00:10:59,050
of the micro services um and to what I

00:10:53,710 --> 00:11:02,020
can do here is I can run that's the my

00:10:59,050 --> 00:11:04,500
build well if you spell customize

00:11:02,020 --> 00:11:04,500
properly

00:11:05,980 --> 00:11:12,330
and it has now generated for me all of

00:11:09,910 --> 00:11:15,070
the yama required to deploy spinnaker

00:11:12,330 --> 00:11:25,060
and then as one extra step I can

00:11:15,070 --> 00:11:28,540
actually then just apply that directly

00:11:25,060 --> 00:11:30,700
to my cluster and then after a couple of

00:11:28,540 --> 00:11:34,000
minutes I will have a spinnaker

00:11:30,700 --> 00:11:35,980
installation I think I won't do the demo

00:11:34,000 --> 00:11:38,440
race right now but one exciting thing

00:11:35,980 --> 00:11:43,060
about this as well is that if you change

00:11:38,440 --> 00:11:45,360
the Hal config and it only affects the

00:11:43,060 --> 00:11:47,350
config for one particular microservice

00:11:45,360 --> 00:11:49,690
customize is smart enough that it will

00:11:47,350 --> 00:11:52,000
only regenerate the config map and only

00:11:49,690 --> 00:11:53,800
to redeploy the actual micro service

00:11:52,000 --> 00:11:55,240
that you changed so if you want to tweak

00:11:53,800 --> 00:11:57,280
a config parameter you no longer have to

00:11:55,240 --> 00:11:58,660
take down all of your micro services and

00:11:57,280 --> 00:12:02,320
restart them they will figure out which

00:11:58,660 --> 00:12:04,450
ones need to be restarted um and so with

00:12:02,320 --> 00:12:07,000
that I will stop presenting and then let

00:12:04,450 --> 00:12:08,980
Maggie bring up the slides again and I

00:12:07,000 --> 00:12:18,060
think I have a couple of comments on the

00:12:08,980 --> 00:12:21,640
next slide great um thank you for the

00:12:18,060 --> 00:12:30,700
awesome demo let's bring these slides

00:12:21,640 --> 00:12:32,860
back up great yeah do you wanna just

00:12:30,700 --> 00:12:34,650
quickly summarize the role of each of

00:12:32,860 --> 00:12:37,540
the tools in the work Foley diamonds

00:12:34,650 --> 00:12:39,790
yeah definitely um so the first thing

00:12:37,540 --> 00:12:42,370
that we saw was that I had a how config

00:12:39,790 --> 00:12:44,950
and then I used cleat to take that Hal

00:12:42,370 --> 00:12:47,470
config and generate the config for each

00:12:44,950 --> 00:12:50,170
micro service the second thing that we

00:12:47,470 --> 00:12:51,970
saw was that and of course we didn't go

00:12:50,170 --> 00:12:54,120
into a huge amount of detail here but

00:12:51,970 --> 00:12:56,230
that's all documented in the

00:12:54,120 --> 00:12:59,440
customization based repo that you'll see

00:12:56,230 --> 00:13:02,590
a link for later but we used customize

00:12:59,440 --> 00:13:05,260
to generate all of the kubernetes yamo

00:13:02,590 --> 00:13:07,090
required to deploy that spinnaker um and

00:13:05,260 --> 00:13:09,340
then the third step was that I actually

00:13:07,090 --> 00:13:13,230
just typed that yamo directly to cue

00:13:09,340 --> 00:13:18,850
puddle and deployed it to my cluster

00:13:13,230 --> 00:13:19,420
awesome so moving on to just a quick

00:13:18,850 --> 00:13:21,250
comparison

00:13:19,420 --> 00:13:23,080
in between the different steps of

00:13:21,250 --> 00:13:25,900
deploying spinnaker that you just saw

00:13:23,080 --> 00:13:27,820
Eric demo using Klayton customized with

00:13:25,900 --> 00:13:29,440
the existing workflow just to help you

00:13:27,820 --> 00:13:33,100
better understand kind of the value this

00:13:29,440 --> 00:13:35,680
might provide so as you may know halyard

00:13:33,100 --> 00:13:38,140
completes most of the steps behind the

00:13:35,680 --> 00:13:40,300
scenes when you run how deploy apply so

00:13:38,140 --> 00:13:42,550
the surface profiles are generated from

00:13:40,300 --> 00:13:44,710
that how can a big halyard handles

00:13:42,550 --> 00:13:47,500
writing the micro service resource yeah

00:13:44,710 --> 00:13:49,240
Mille um and then deploying it in any

00:13:47,500 --> 00:13:51,400
sort of customizations on top of that

00:13:49,240 --> 00:13:53,770
with halyard would require an upstream

00:13:51,400 --> 00:13:56,740
contribution of Java to kind of

00:13:53,770 --> 00:14:00,100
conditionally modify the resource animal

00:13:56,740 --> 00:14:01,810
that halyard is generating for you so on

00:14:00,100 --> 00:14:05,080
the flip side what you just saw if you

00:14:01,810 --> 00:14:06,970
for example wanted to for example as we

00:14:05,080 --> 00:14:09,010
mentioned before add a custom liveness

00:14:06,970 --> 00:14:12,160
probe you could simply add your own

00:14:09,010 --> 00:14:14,800
custom overlay to your customization as

00:14:12,160 --> 00:14:18,160
a patch in your own fork and it wouldn't

00:14:14,800 --> 00:14:22,300
require an upstream contribution at all

00:14:18,160 --> 00:14:24,670
um similarly as we discussed the cleat

00:14:22,300 --> 00:14:26,380
CLI replaces the first step of running

00:14:24,670 --> 00:14:28,300
how to apply which is just translating

00:14:26,380 --> 00:14:33,000
that help and baked into the individual

00:14:28,300 --> 00:14:35,830
micro service configs so moving on to

00:14:33,000 --> 00:14:38,650
the other side of this which is managing

00:14:35,830 --> 00:14:39,850
the spinnaker config it sounds in

00:14:38,650 --> 00:14:41,260
different aspects of that that are

00:14:39,850 --> 00:14:45,100
different and be the old of the new

00:14:41,260 --> 00:14:46,900
worlds so I guess one thing that's super

00:14:45,100 --> 00:14:48,280
common but is currently pretty difficult

00:14:46,900 --> 00:14:49,900
is just understanding what is even

00:14:48,280 --> 00:14:51,850
available to put in that top level

00:14:49,900 --> 00:14:53,740
spinnaker config and so currently you do

00:14:51,850 --> 00:14:57,040
need to kind of make an inference based

00:14:53,740 --> 00:14:59,080
on that CLI documentation um

00:14:57,040 --> 00:15:00,670
which documents the commands but you

00:14:59,080 --> 00:15:04,090
know not the actual structure of the

00:15:00,670 --> 00:15:05,890
config itself and so luckily a cleat in

00:15:04,090 --> 00:15:09,190
which we you know strongly typed that

00:15:05,890 --> 00:15:10,960
how config in each microservices config

00:15:09,190 --> 00:15:13,480
in protobuf will output an

00:15:10,960 --> 00:15:16,210
auto-generated version config reference

00:15:13,480 --> 00:15:18,130
that is currently available in the docs

00:15:16,210 --> 00:15:19,510
directly in the cleat repo and then

00:15:18,130 --> 00:15:23,440
eventually will be available on

00:15:19,510 --> 00:15:26,380
spinnaker dot IO um if you need to

00:15:23,440 --> 00:15:29,060
create or edit your howl config with

00:15:26,380 --> 00:15:31,370
halyard you'd use the halyard CLI um you

00:15:29,060 --> 00:15:32,990
with a bunch of empty values and blocks

00:15:31,370 --> 00:15:35,930
for things that you know aren't even

00:15:32,990 --> 00:15:37,400
relevant to your installation whereas

00:15:35,930 --> 00:15:39,320
that's not the case with Klee you are

00:15:37,400 --> 00:15:41,270
manually writing that UML based on the

00:15:39,320 --> 00:15:42,980
documentation only specifying the fields

00:15:41,270 --> 00:15:44,690
that you care about so you're how things

00:15:42,980 --> 00:15:47,660
should be about like 20% of the size it

00:15:44,690 --> 00:15:49,600
probably is now and then finally if you

00:15:47,660 --> 00:15:51,500
wanted to add a new top-level

00:15:49,600 --> 00:15:53,360
configuration parameter and this now

00:15:51,500 --> 00:15:55,430
will probably look more like writing a

00:15:53,360 --> 00:16:00,800
few lines of protobufs rather than

00:15:55,430 --> 00:16:03,680
needing to write and test Java this is

00:16:00,800 --> 00:16:06,260
an example of some of the auto-generated

00:16:03,680 --> 00:16:08,330
markdown that it creates from the

00:16:06,260 --> 00:16:11,480
protobufs definitions so this is just an

00:16:08,330 --> 00:16:13,220
example of a kubernetes account um and

00:16:11,480 --> 00:16:16,610
if you do currently have the entire i'll

00:16:13,220 --> 00:16:19,340
config typed in the clean repo which we

00:16:16,610 --> 00:16:22,010
would love if you could check out which

00:16:19,340 --> 00:16:23,240
is a great transition too if you're

00:16:22,010 --> 00:16:25,040
interested in becoming a user or

00:16:23,240 --> 00:16:29,420
contributor so i'll pass it back to eric

00:16:25,040 --> 00:16:32,090
see over this sure um so if you would

00:16:29,420 --> 00:16:33,980
like to either be an early alpha doctor

00:16:32,090 --> 00:16:36,740
of this or contribute to it please reach

00:16:33,980 --> 00:16:39,500
out to us um we have a fairly new

00:16:36,740 --> 00:16:42,590
channel in slack called Clete we'd love

00:16:39,500 --> 00:16:44,660
to hear from you there again you know

00:16:42,590 --> 00:16:46,790
this is still very early so we're

00:16:44,660 --> 00:16:48,440
looking for people who are willing to

00:16:46,790 --> 00:16:50,060
try this out against their dev clusters

00:16:48,440 --> 00:16:51,710
let us know kind of what parts of the

00:16:50,060 --> 00:16:55,070
workflow are working for you what things

00:16:51,710 --> 00:16:56,780
aren't friction points features that you

00:16:55,070 --> 00:16:58,250
would need to see added in order to be

00:16:56,780 --> 00:17:01,340
able to actually adopt this as part of

00:16:58,250 --> 00:17:04,010
your workflow and please also check out

00:17:01,340 --> 00:17:06,770
all of the code for this on github so

00:17:04,010 --> 00:17:08,780
there's three main repos um cleat is the

00:17:06,770 --> 00:17:11,690
repo for that CLI tool that actually

00:17:08,780 --> 00:17:14,030
translates your how config customization

00:17:11,690 --> 00:17:16,460
base is that base customization that has

00:17:14,030 --> 00:17:18,770
all of the kubernetes objects for

00:17:16,460 --> 00:17:20,870
deploying your deployment and then

00:17:18,770 --> 00:17:24,050
spinnaker config is a really small repo

00:17:20,870 --> 00:17:26,900
that is intended for you to clone to get

00:17:24,050 --> 00:17:32,990
started and actually deploy spinnaker

00:17:26,900 --> 00:17:35,300
using this workflow great thank you Eric

00:17:32,990 --> 00:17:36,830
and thank you all for tuning in it

00:17:35,300 --> 00:17:40,250
looking forward to continuing the

00:17:36,830 --> 00:17:42,580
conversation and slacking out yeah thank

00:17:40,250 --> 00:17:42,580
you everyone

00:17:48,410 --> 00:17:50,470

YouTube URL: https://www.youtube.com/watch?v=ZgNzh7KLHLY


