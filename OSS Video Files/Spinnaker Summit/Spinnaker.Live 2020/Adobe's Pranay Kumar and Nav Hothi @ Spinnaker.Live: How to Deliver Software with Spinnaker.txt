Title: Adobe's Pranay Kumar and Nav Hothi @ Spinnaker.Live: How to Deliver Software with Spinnaker
Publication date: 2020-06-20
Playlist: Spinnaker.Live 2020
Description: 
	The Adobe Experience Platform team uses Spinnaker for deploying micro services to a multi cloud kubernetes environment at scale. In this talk, we go over how our Spinnaker pipelines are designed and structured, how to take advantage of the built in integrations Spinnaker offers, and our general experiences as well as what we have learnt over the past year and a half.

Our team's journey with Spinnaker began with the Spinnaker conference in 2018. With the knowledge we obtained at the conference, we introduced Spinnaker to our stack and evolved our CI/CD strategy over time to get to what it is today. During the year we were faced with many decisions on different paths to take and weâ€™ll go over where that has led us, and where we are heading. We also talk about a few of the built in integrations Spinnaker offers, such as Jenkins, Github, and Helm, that can enhance the developer experience and enable enhanced workflows."
Captions: 
	00:00:09,280 --> 00:00:13,549
hi everyone thanks for joining our

00:00:11,809 --> 00:00:15,650
presentation at spinnaker live today

00:00:13,549 --> 00:00:18,170
well let the spinnaker community is able

00:00:15,650 --> 00:00:19,670
to get together virtually this year we

00:00:18,170 --> 00:00:21,410
hope you have enjoyed the mainstage

00:00:19,670 --> 00:00:23,600
presentations and we hope you enjoy our

00:00:21,410 --> 00:00:25,670
talks as well some quick notes before we

00:00:23,600 --> 00:00:27,260
begin if you have any questions please

00:00:25,670 --> 00:00:28,250
type them into the chat function and we

00:00:27,260 --> 00:00:30,439
will answer them throughout the

00:00:28,250 --> 00:00:32,269
presentation and if you want to engage

00:00:30,439 --> 00:00:34,489
with other attendees you can do so

00:00:32,269 --> 00:00:36,140
through the portal after the breakout

00:00:34,489 --> 00:00:39,260
session concludes head over to the main

00:00:36,140 --> 00:00:41,300
channel for games and prizes onto our

00:00:39,260 --> 00:00:43,790
presentation now designing deployment

00:00:41,300 --> 00:00:45,949
workflows with spinnaker my name is Nam

00:00:43,790 --> 00:00:48,080
and I'm a sre for the Adobe experience

00:00:45,949 --> 00:00:49,760
platform here co-presenting with me

00:00:48,080 --> 00:00:52,010
today is Pranay a software engineer also

00:00:49,760 --> 00:00:53,239
with the Adobe experience platform today

00:00:52,010 --> 00:00:55,190
we'll be talking about how you can use

00:00:53,239 --> 00:00:56,870
spinnaker to support advanced workflows

00:00:55,190 --> 00:00:58,610
I'm gonna kick things off with some

00:00:56,870 --> 00:01:00,440
background for everybody and how we got

00:00:58,610 --> 00:01:01,760
to using spinnaker and kubernetes and

00:01:00,440 --> 00:01:03,409
then pranay is going to take a deeper

00:01:01,760 --> 00:01:05,930
dive into our spinnaker pipeline and

00:01:03,409 --> 00:01:08,360
where we are today you might be

00:01:05,930 --> 00:01:11,000
wondering what adobe experience platform

00:01:08,360 --> 00:01:12,799
even is well adobe experience platform

00:01:11,000 --> 00:01:14,509
is a purpose-built customer experience

00:01:12,799 --> 00:01:16,820
management platform that is able to take

00:01:14,509 --> 00:01:18,289
data from any source and use that data

00:01:16,820 --> 00:01:20,149
to deliver a more personalized

00:01:18,289 --> 00:01:24,369
experience when engaging with customers

00:01:20,149 --> 00:01:24,369
here's a quick video to give you an idea

00:01:40,090 --> 00:01:44,770
target's been utilized I'm heading to

00:01:42,650 --> 00:01:44,770
the hotel

00:01:49,060 --> 00:01:52,190
Check Into the penthouse the name's

00:01:51,530 --> 00:01:53,930
hunter

00:01:52,190 --> 00:01:57,710
certainly mr. an I have your reservation

00:01:53,930 --> 00:02:02,330
right here wait did you say hunter mm-hm

00:01:57,710 --> 00:02:03,770
no I don't have a hunter but you email

00:02:02,330 --> 00:02:05,810
the confirmation to my watch well

00:02:03,770 --> 00:02:10,369
Marketing handles emails oh I have a

00:02:05,810 --> 00:02:13,360
Hanson no it's hunter I picked my room

00:02:10,369 --> 00:02:20,380
on your app we have so many apps segment

00:02:13,360 --> 00:02:23,600
I'm a platinum member I have a promotion

00:02:20,380 --> 00:02:26,750
your website promotions are on a

00:02:23,600 --> 00:02:30,140
different system but I do have a single

00:02:26,750 --> 00:02:34,970
on the ground floor miss Hanson it's

00:02:30,140 --> 00:02:39,479
hunter my name is hunter

00:02:34,970 --> 00:02:39,479
[Music]

00:02:40,180 --> 00:02:46,069
so Adobe experience platform is composed

00:02:43,730 --> 00:02:48,680
of many teams and about 350

00:02:46,069 --> 00:02:51,139
microservices Pranay and I work for the

00:02:48,680 --> 00:02:53,780
pipeline team pipeline is video

00:02:51,139 --> 00:02:55,879
dissipated real-time streaming platform

00:02:53,780 --> 00:02:58,730
developed globally and a mix of Azure

00:02:55,879 --> 00:03:00,739
AWS and Adobe datacenters you can think

00:02:58,730 --> 00:03:03,230
of pipeline as a API first design that

00:03:00,739 --> 00:03:05,090
utilizes kafka under the hood we're

00:03:03,230 --> 00:03:07,310
currently deployed to 15 data centers

00:03:05,090 --> 00:03:10,219
which are all interconnected and there's

00:03:07,310 --> 00:03:11,629
about 115 applications or services which

00:03:10,219 --> 00:03:13,719
utilize pipeline and that number is

00:03:11,629 --> 00:03:17,510
growing every day we're processing

00:03:13,719 --> 00:03:19,760
approximately 110 billion messages a day

00:03:17,510 --> 00:03:22,609
with 30 percent year-over-year growth

00:03:19,760 --> 00:03:25,489
most of the real-time data on AEP is

00:03:22,609 --> 00:03:27,739
processed in pipeline over time it's

00:03:25,489 --> 00:03:29,359
come to be the data foundation not just

00:03:27,739 --> 00:03:31,040
for AEP but also for the Adobe

00:03:29,359 --> 00:03:32,810
experience cloud which consists of

00:03:31,040 --> 00:03:35,000
Adobe's other digital marketing products

00:03:32,810 --> 00:03:36,469
today we'll be talking about our team's

00:03:35,000 --> 00:03:38,810
experience with spinnaker and how our

00:03:36,469 --> 00:03:41,150
spinnaker pipelines work for the

00:03:38,810 --> 00:03:42,500
pipeline team we began using spinnaker

00:03:41,150 --> 00:03:44,750
about a year and a half ago and since

00:03:42,500 --> 00:03:48,949
then we feel like we've got a great deal

00:03:44,750 --> 00:03:50,470
of value by using spinnaker so let's

00:03:48,949 --> 00:03:52,639
talk about where we were before

00:03:50,470 --> 00:03:58,489
spinnaker and kubernetes came into our

00:03:52,639 --> 00:04:00,500
lives prior to adopting them we were we

00:03:58,489 --> 00:04:02,419
had a geo distributed catholic clusters

00:04:00,500 --> 00:04:05,329
that consists of cloud beams and bare

00:04:02,419 --> 00:04:07,669
metal hosts on top of Kafka we had a

00:04:05,329 --> 00:04:09,949
suite of micro services that provided

00:04:07,669 --> 00:04:11,509
produce api's consume api's we're makers

00:04:09,949 --> 00:04:13,009
and other enhancements we built to

00:04:11,509 --> 00:04:14,959
provide a better experience for our

00:04:13,009 --> 00:04:16,669
internal clients which were for the most

00:04:14,959 --> 00:04:18,130
part other teams at Adobe though we do

00:04:16,669 --> 00:04:20,060
have some external clients as well

00:04:18,130 --> 00:04:21,799
because some of the micro services

00:04:20,060 --> 00:04:23,960
require super low latency connected

00:04:21,799 --> 00:04:26,090
connectivity to the traffic clusters we

00:04:23,960 --> 00:04:28,219
had to run those micro services on these

00:04:26,090 --> 00:04:30,650
VMs and bare-metal hosts which required

00:04:28,219 --> 00:04:32,210
building and shipping our rpms of the

00:04:30,650 --> 00:04:34,370
micro services to these environments

00:04:32,210 --> 00:04:36,110
then we would update on our salt code

00:04:34,370 --> 00:04:39,289
which would deliver these new bills to

00:04:36,110 --> 00:04:41,509
the VMs and bare-metal hosts over time

00:04:39,289 --> 00:04:44,300
we migrated our API s and Marco services

00:04:41,509 --> 00:04:46,340
to mesosphere as a DCOs data center

00:04:44,300 --> 00:04:48,289
operating system which is managed by

00:04:46,340 --> 00:04:50,120
another team at Adobe well there remain

00:04:48,289 --> 00:04:52,070
great things about this offering such as

00:04:50,120 --> 00:04:54,350
handling DNS load balancing security

00:04:52,070 --> 00:04:56,449
compliance logging infrastructure and

00:04:54,350 --> 00:04:58,280
many other things it did have some

00:04:56,449 --> 00:05:00,860
limitations namely with the CI CD

00:04:58,280 --> 00:05:02,960
tooling we came with the internal C a CD

00:05:00,860 --> 00:05:04,940
tool which required a searching approach

00:05:02,960 --> 00:05:07,310
and we felt that approach was not the

00:05:04,940 --> 00:05:10,400
right one for what we wanted to do with

00:05:07,310 --> 00:05:14,090
a CI CD pipeline another issue we had

00:05:10,400 --> 00:05:15,860
was this D cos wasn't available in all

00:05:14,090 --> 00:05:18,110
the locations where our Koffler clusters

00:05:15,860 --> 00:05:20,330
were so we were kind of stuck in the

00:05:18,110 --> 00:05:22,580
middle running our services on D cos in

00:05:20,330 --> 00:05:27,919
some locations and directly on VMs and

00:05:22,580 --> 00:05:29,389
other locations with that in mind we

00:05:27,919 --> 00:05:31,220
wanted to brainstorm and research a

00:05:29,389 --> 00:05:32,870
solution that we could use globally and

00:05:31,220 --> 00:05:36,410
all our data centers that were mix of

00:05:32,870 --> 00:05:39,199
you know as your AWS and Adobe the dis

00:05:36,410 --> 00:05:44,360
deployment mechanism mechanism across

00:05:39,199 --> 00:05:48,949
had to be consistent reliable automated

00:05:44,360 --> 00:05:51,889
as much as possible auditable flexible

00:05:48,949 --> 00:05:55,130
and easy to pick up for any new team

00:05:51,889 --> 00:05:56,780
members or new users the solution had to

00:05:55,130 --> 00:05:59,360
support all the services we currently

00:05:56,780 --> 00:06:00,979
build and run in addition to reducing

00:05:59,360 --> 00:06:03,229
our maintenance and deployment overhead

00:06:00,979 --> 00:06:05,630
of the way we have been doing things

00:06:03,229 --> 00:06:11,450
well at the same time you know providing

00:06:05,630 --> 00:06:13,310
as as few new overhead as possible the

00:06:11,450 --> 00:06:16,900
solution also needed to have our ability

00:06:13,310 --> 00:06:19,070
on the audit a ability of configurations

00:06:16,900 --> 00:06:24,620
thoroughly by having them checked into

00:06:19,070 --> 00:06:26,449
and poking it when we began this project

00:06:24,620 --> 00:06:28,550
back from 2018 we were aware that

00:06:26,449 --> 00:06:30,110
kubernetes was getting a lot of traction

00:06:28,550 --> 00:06:30,860
in the industry so we began to examine

00:06:30,110 --> 00:06:32,810
kubernetes

00:06:30,860 --> 00:06:34,910
as the platform to run our services on

00:06:32,810 --> 00:06:36,470
top of our team was really excited about

00:06:34,910 --> 00:06:38,720
the features and flexibility kubernetes

00:06:36,470 --> 00:06:41,449
offered and with so many cloud providers

00:06:38,720 --> 00:06:43,729
offering managed kubernetes offerings we

00:06:41,449 --> 00:06:45,349
knew we could take advantage of that to

00:06:43,729 --> 00:06:46,880
reduce the overhead of maintaining and

00:06:45,349 --> 00:06:48,710
supporting a kubernetes clusters

00:06:46,880 --> 00:06:50,690
ourselves some additional benefits

00:06:48,710 --> 00:06:53,060
offered by kubernetes that it's open

00:06:50,690 --> 00:06:55,720
source with a huge community it works

00:06:53,060 --> 00:06:58,159
across clouds and bare metal and

00:06:55,720 --> 00:06:59,930
adoption is high which lead to a high of

00:06:58,159 --> 00:07:02,370
a availability of tools in our

00:06:59,930 --> 00:07:04,990
integrations

00:07:02,370 --> 00:07:07,300
with Kublai he's decided as a platform

00:07:04,990 --> 00:07:11,040
for our microservices the next thing we

00:07:07,300 --> 00:07:13,450
want to do was tackle cin Siddhi we

00:07:11,040 --> 00:07:14,890
evaluated both code fresh and spinnaker

00:07:13,450 --> 00:07:16,690
and we decided to go with spinnaker for

00:07:14,890 --> 00:07:18,370
a few reasons first spinnaker is open

00:07:16,690 --> 00:07:20,830
source and while the community isn't as

00:07:18,370 --> 00:07:23,050
large as kubernetes since we started

00:07:20,830 --> 00:07:24,760
using spinnaker in 2018 we seen quite a

00:07:23,050 --> 00:07:26,500
bit of growth in the number of blogs and

00:07:24,760 --> 00:07:29,020
websites mentioning spinnaker in

00:07:26,500 --> 00:07:31,240
addition to overall activity growing on

00:07:29,020 --> 00:07:33,310
the spinnaker slack leads me to believe

00:07:31,240 --> 00:07:35,050
you know in the last couple years the

00:07:33,310 --> 00:07:38,080
spinnaker community is also growing at a

00:07:35,050 --> 00:07:40,570
high rate so why did we go with

00:07:38,080 --> 00:07:43,810
spinnaker well a couple reasons first

00:07:40,570 --> 00:07:45,550
it's designed for and provides native

00:07:43,810 --> 00:07:47,230
support for grouper Nettie's it's

00:07:45,550 --> 00:07:49,419
battle-tested in high school production

00:07:47,230 --> 00:07:51,160
systems it was already being used by

00:07:49,419 --> 00:07:52,900
other teams at Adobe who we could reach

00:07:51,160 --> 00:07:54,760
out to for their knowledge and expertise

00:07:52,900 --> 00:08:00,760
on it and it has a lot of useful

00:07:54,760 --> 00:08:04,600
integrations so while spinner can can do

00:08:00,760 --> 00:08:06,669
a lot on its own the integrations it

00:08:04,600 --> 00:08:08,350
provides can help achieve even more

00:08:06,669 --> 00:08:10,390
advanced workflows here are the

00:08:08,350 --> 00:08:12,150
integrations that our team uses that are

00:08:10,390 --> 00:08:15,130
critical to our success with spinnaker

00:08:12,150 --> 00:08:16,750
get the integration with git allows for

00:08:15,130 --> 00:08:18,760
files as artifacts and spinnaker

00:08:16,750 --> 00:08:21,790
pipelines and it can also be used to

00:08:18,760 --> 00:08:23,200
trigger pipelines elm we have moved a

00:08:21,790 --> 00:08:25,120
using helm for all our kubernetes

00:08:23,200 --> 00:08:27,340
deployments spinnaker you can take that

00:08:25,120 --> 00:08:29,560
 up helm chart bake the manifest

00:08:27,340 --> 00:08:31,450
inject in your environment specific

00:08:29,560 --> 00:08:36,580
value files didn't employ that generated

00:08:31,450 --> 00:08:38,680
manifest HTTP based interfaces this

00:08:36,580 --> 00:08:41,380
particular spinnaker integration is very

00:08:38,680 --> 00:08:43,270
flexible and our team at Adobe uses it

00:08:41,380 --> 00:08:45,430
to fetch artifacts primarily stored on

00:08:43,270 --> 00:08:48,100
artifactory that said you don't have to

00:08:45,430 --> 00:08:50,020
use artifactory either any HTTP based

00:08:48,100 --> 00:08:53,350
artifact can be fetched using this

00:08:50,020 --> 00:08:55,120
integration jenkins we use jenkins

00:08:53,350 --> 00:08:57,070
heavily in conjunction with Spinnaker's

00:08:55,120 --> 00:08:59,560
spinnaker can be triggered by jenkins as

00:08:57,070 --> 00:09:01,300
well as trigger jenkins jobs so what

00:08:59,560 --> 00:09:03,160
just opens up a whole lot of options for

00:09:01,300 --> 00:09:04,660
your deployment pipelines Pranay will

00:09:03,160 --> 00:09:07,360
touch more on how we use Jenkins with

00:09:04,660 --> 00:09:10,450
spinnaker later when he gets to his part

00:09:07,360 --> 00:09:12,190
in the talk and the kubernetes v2

00:09:10,450 --> 00:09:13,649
provider which is only provider we use

00:09:12,190 --> 00:09:14,610
what spinnaker and

00:09:13,649 --> 00:09:18,809
one of the main reasons we chose

00:09:14,610 --> 00:09:21,300
spinnaker in addition spanner comes in

00:09:18,809 --> 00:09:23,850
comes in with some built-in notification

00:09:21,300 --> 00:09:25,800
integrations out-of-the-box email slack

00:09:23,850 --> 00:09:30,569
and Twilio are all available with

00:09:25,800 --> 00:09:32,279
minimal setup so when we first started

00:09:30,569 --> 00:09:34,290
using spinnaker this is what our first

00:09:32,279 --> 00:09:36,480
pipeline look like we took the hello

00:09:34,290 --> 00:09:38,670
kubernetes yellow Yamma file and set

00:09:36,480 --> 00:09:40,559
this up within minutes of our spinnaker

00:09:38,670 --> 00:09:42,449
becoming available to use something

00:09:40,559 --> 00:09:44,069
fancy going on here just want to show

00:09:42,449 --> 00:09:47,879
how quickly you can get set up and

00:09:44,069 --> 00:09:50,009
running with swagger here's our current

00:09:47,879 --> 00:09:51,809
workflow at a high level the dev will

00:09:50,009 --> 00:09:53,910
check in code to get Jenkins will see

00:09:51,809 --> 00:09:55,259
the commits towards banking spinnaker

00:09:53,910 --> 00:09:57,269
pipeline with the configuration

00:09:55,259 --> 00:09:59,490
parameters the spinnaker pipeline will

00:09:57,269 --> 00:10:01,559
begin then it will trigger Jenkins back

00:09:59,490 --> 00:10:03,749
to start the helm and docker image build

00:10:01,559 --> 00:10:05,939
and push too hard a factory after the

00:10:03,749 --> 00:10:07,679
Jenkins jobs complete banker will use

00:10:05,939 --> 00:10:09,509
the recently built home chart along with

00:10:07,679 --> 00:10:11,850
the environment specific value files we

00:10:09,509 --> 00:10:13,769
have stored on get to generate the final

00:10:11,850 --> 00:10:16,199
manifest that it needs to deploy to the

00:10:13,769 --> 00:10:19,170
account or kubernetes cluster listed on

00:10:16,199 --> 00:10:21,749
the pipeline here I'm I handed over

00:10:19,170 --> 00:10:24,240
Pranay to continue the talk as we go

00:10:21,749 --> 00:10:26,040
divert deeper into the pipelines that

00:10:24,240 --> 00:10:29,100
was an overview of our updated stack

00:10:26,040 --> 00:10:31,019
workflow and why we needed that we'll go

00:10:29,100 --> 00:10:34,589
a little deeper into how spinnaker

00:10:31,019 --> 00:10:36,120
enables our advanced workflows spinnaker

00:10:34,589 --> 00:10:38,040
is the brains behind our deployment

00:10:36,120 --> 00:10:40,470
workflows and orchestrates everything

00:10:38,040 --> 00:10:42,689
after the initial trigger using various

00:10:40,470 --> 00:10:45,389
different pipelines our difficult type

00:10:42,689 --> 00:10:47,639
line follows a simple strategy we

00:10:45,389 --> 00:10:50,639
started release by publishing artifacts

00:10:47,639 --> 00:10:52,800
these are then used during deployment to

00:10:50,639 --> 00:10:55,129
the actual cluster we then run

00:10:52,800 --> 00:10:57,509
validations against the new deployment

00:10:55,129 --> 00:10:59,249
based on the deployment validation

00:10:57,509 --> 00:11:01,620
status the pipeline determines whether

00:10:59,249 --> 00:11:04,439
to rollback or proceed with a successful

00:11:01,620 --> 00:11:07,049
release completion all controls that are

00:11:04,439 --> 00:11:09,720
passed to the pipeline are done during

00:11:07,049 --> 00:11:12,540
the execution start or via values files

00:11:09,720 --> 00:11:15,119
to the home chart we prefer creating

00:11:12,540 --> 00:11:17,009
somewhat generic pipelines that can be

00:11:15,119 --> 00:11:18,679
reused by other pipelines and also

00:11:17,009 --> 00:11:21,480
template eyes for other applications

00:11:18,679 --> 00:11:24,959
this helps keep things modular and

00:11:21,480 --> 00:11:27,510
reusable among other things as part of

00:11:24,959 --> 00:11:29,250
CI CD the ability to easily roll

00:11:27,510 --> 00:11:31,170
back during and deploy was a key

00:11:29,250 --> 00:11:33,120
requirement of ours and something that

00:11:31,170 --> 00:11:35,030
wasn't trivalent in our legacy model

00:11:33,120 --> 00:11:37,050
this has become trivial with

00:11:35,030 --> 00:11:40,230
containerization the right versioning

00:11:37,050 --> 00:11:43,350
and an easy-to-use tool to avoid having

00:11:40,230 --> 00:11:45,120
unused resources on the cluster we

00:11:43,350 --> 00:11:48,300
created a downstream pipeline that could

00:11:45,120 --> 00:11:49,980
then clean them up once a deploy or

00:11:48,300 --> 00:11:53,550
rollback was completed as part of the

00:11:49,980 --> 00:11:57,420
release let's take a look at a demo of

00:11:53,550 --> 00:12:00,180
our pipelines let's look at a sample app

00:11:57,420 --> 00:12:02,670
running in multiple environments in our

00:12:00,180 --> 00:12:04,650
case these are Deb and state I'll

00:12:02,670 --> 00:12:06,780
attempt to depict the design and

00:12:04,650 --> 00:12:09,240
strategies that we follow with this

00:12:06,780 --> 00:12:12,240
walkthrough you can see it's a simple

00:12:09,240 --> 00:12:15,270
hello world app for kubernetes pay

00:12:12,240 --> 00:12:17,820
attention to the text message hello

00:12:15,270 --> 00:12:22,080
kubernetes is an open source app that we

00:12:17,820 --> 00:12:24,300
are using within our own github we store

00:12:22,080 --> 00:12:28,380
our helm based deployment artifacts

00:12:24,300 --> 00:12:30,510
within gate I'm going to make a quick

00:12:28,380 --> 00:12:33,090
commit to update the message that we

00:12:30,510 --> 00:12:35,340
just saw note that during the remaining

00:12:33,090 --> 00:12:37,500
walkthrough I will not interact with any

00:12:35,340 --> 00:12:42,150
other system other than mooing and

00:12:37,500 --> 00:12:44,280
displaying it within spinnaker I will

00:12:42,150 --> 00:12:46,590
update the message in gate and commit

00:12:44,280 --> 00:12:49,650
directly to the branch to trigger a

00:12:46,590 --> 00:12:51,960
downstream Jenkins self that eventually

00:12:49,650 --> 00:12:55,830
triggers a spinnaker pipeline with

00:12:51,960 --> 00:12:58,860
parameters for this demo our auto deploy

00:12:55,830 --> 00:13:00,930
pipeline has a single stage that

00:12:58,860 --> 00:13:03,390
triggers a nested spinnaker pipeline

00:13:00,930 --> 00:13:07,410
however it is easy to add more

00:13:03,390 --> 00:13:09,930
downstream workflows as per our strategy

00:13:07,410 --> 00:13:13,560
the release pipeline releases artifacts

00:13:09,930 --> 00:13:16,350
first a docker image and a helmet art in

00:13:13,560 --> 00:13:19,740
this case and then proceeds to deploy

00:13:16,350 --> 00:13:22,200
those to environments with our actual

00:13:19,740 --> 00:13:24,330
production apps the release pipeline can

00:13:22,200 --> 00:13:27,030
get slightly more involved and includes

00:13:24,330 --> 00:13:29,880
stages to wait between environments or

00:13:27,030 --> 00:13:31,350
deploy it in parallel if there are

00:13:29,880 --> 00:13:35,460
multiple regions for the same

00:13:31,350 --> 00:13:38,670
environment our deploy pipeline for a

00:13:35,460 --> 00:13:39,699
stateless up like this one deploys two

00:13:38,670 --> 00:13:42,279
manifests

00:13:39,699 --> 00:13:45,239
first is for the app setup and readiness

00:13:42,279 --> 00:13:49,239
and the second is to switch over traffic

00:13:45,239 --> 00:13:51,699
using a kubernetes service resource the

00:13:49,239 --> 00:13:54,100
user then validates the deployment if

00:13:51,699 --> 00:13:56,259
required and the pipeline determines

00:13:54,100 --> 00:13:58,809
whether to roll back and clean up the

00:13:56,259 --> 00:14:01,239
current portion resources or to proceed

00:13:58,809 --> 00:14:03,609
by marking deploy is successful and

00:14:01,239 --> 00:14:06,579
cleaning up the previous version

00:14:03,609 --> 00:14:10,299
resources let's take a look at how our

00:14:06,579 --> 00:14:11,499
deploy is doing looks like it is just

00:14:10,299 --> 00:14:13,720
about to do the switchover

00:14:11,499 --> 00:14:16,089
so we should be able to go to our dev

00:14:13,720 --> 00:14:19,179
environment and see if the message

00:14:16,089 --> 00:14:23,079
actually changed and wallah looks like

00:14:19,179 --> 00:14:25,329
it did deploy successfully if you notice

00:14:23,079 --> 00:14:28,029
there are stages that didn't need to run

00:14:25,329 --> 00:14:30,489
for a pipeline to succeed this allows

00:14:28,029 --> 00:14:33,519
flexibility in terms of branching or

00:14:30,489 --> 00:14:35,949
skipping stages when required for

00:14:33,519 --> 00:14:39,480
instance the dev release didn't wait for

00:14:35,949 --> 00:14:42,399
me to validate unli before succeeding

00:14:39,480 --> 00:14:44,980
you'll notice that the deploy pipeline

00:14:42,399 --> 00:14:48,009
has restarted after the deployment is

00:14:44,980 --> 00:14:49,779
complete however the parameters are

00:14:48,009 --> 00:14:52,470
different this time since it is

00:14:49,779 --> 00:14:55,299
executing for the stage environment

00:14:52,470 --> 00:14:58,600
looks like the deployment and switchover

00:14:55,299 --> 00:15:00,399
is complete but the pipeline prompts

00:14:58,600 --> 00:15:03,089
user judgment before proceeding further

00:15:00,399 --> 00:15:05,759
this check is useful for a higher-order

00:15:03,089 --> 00:15:08,919
environments and can be automated so

00:15:05,759 --> 00:15:11,829
let's go to the web site and see if the

00:15:08,919 --> 00:15:14,529
message updating our deployment was

00:15:11,829 --> 00:15:18,669
successful I will mark it as such in the

00:15:14,529 --> 00:15:20,799
spinnaker pipeline similar to death the

00:15:18,669 --> 00:15:23,199
pipeline will now proceed with some

00:15:20,799 --> 00:15:27,809
evaluations to confirm success and then

00:15:23,199 --> 00:15:27,809
clean up previous version deployments

00:15:30,990 --> 00:15:34,980
the template symbol next to release

00:15:33,420 --> 00:15:37,500
artifacts and clean up resources

00:15:34,980 --> 00:15:40,760
pipelines as well as the pipeline

00:15:37,500 --> 00:15:43,080
templates tab in the top navbar

00:15:40,760 --> 00:15:45,000
templates allow reusing the same

00:15:43,080 --> 00:15:47,610
pipelines with the unique variables

00:15:45,000 --> 00:15:50,160
across applications and the ones you see

00:15:47,610 --> 00:15:52,970
here are actually used in our other

00:15:50,160 --> 00:15:52,970
applications

00:15:55,330 --> 00:16:02,000
so that was a quick demo of how our

00:15:58,010 --> 00:16:04,100
pipelines are pretty as we just saw we

00:16:02,000 --> 00:16:06,200
have a limited number of pipelines we'll

00:16:04,100 --> 00:16:08,270
use some of these such as release

00:16:06,200 --> 00:16:10,280
artifacts deploying and clean up via

00:16:08,270 --> 00:16:12,920
templates reducing the maintenance

00:16:10,280 --> 00:16:14,930
overhead consolidation nesting and

00:16:12,920 --> 00:16:17,690
template izing are important from a

00:16:14,930 --> 00:16:19,520
maintainability perspective through this

00:16:17,690 --> 00:16:21,110
process we implemented different

00:16:19,520 --> 00:16:22,970
deployment strategies for different

00:16:21,110 --> 00:16:24,470
types of applications such as stateless

00:16:22,970 --> 00:16:26,480
staple and jobs

00:16:24,470 --> 00:16:29,000
we implemented red black which is the

00:16:26,480 --> 00:16:32,060
same as blue green or a B for those not

00:16:29,000 --> 00:16:34,850
familiar with that terminology for

00:16:32,060 --> 00:16:37,190
stainless applications to limit user

00:16:34,850 --> 00:16:38,960
impact to a minimum for stateful

00:16:37,190 --> 00:16:40,850
applications we implemented a canary

00:16:38,960 --> 00:16:43,670
based deployment strategy to preserve

00:16:40,850 --> 00:16:45,220
app state and didn't require any sort of

00:16:43,670 --> 00:16:48,440
application cleanup

00:16:45,220 --> 00:16:50,240
we started with ad-hoc pipelines instead

00:16:48,440 --> 00:16:52,130
of structured pipelines encompassing all

00:16:50,240 --> 00:16:53,570
regions and environments but quickly

00:16:52,130 --> 00:16:55,640
disabled them to reduce the

00:16:53,570 --> 00:16:58,430
possibilities of bad consequences in

00:16:55,640 --> 00:17:00,500
higher order environments however over

00:16:58,430 --> 00:17:02,780
time we've seen a need for ad hoc deploy

00:17:00,500 --> 00:17:05,180
pipelines for Amit and such as targeted

00:17:02,780 --> 00:17:07,550
hot fixes and restarts in a single

00:17:05,180 --> 00:17:09,530
location in production without having to

00:17:07,550 --> 00:17:13,400
go through every other environment

00:17:09,530 --> 00:17:15,140
preserving valuable time of course these

00:17:13,400 --> 00:17:18,890
pipelines should have proper safeguards

00:17:15,140 --> 00:17:21,290
and processes around them as soon as we

00:17:18,890 --> 00:17:22,760
had reliable pipelines and structure we

00:17:21,290 --> 00:17:25,699
noticed that they've enabled us to

00:17:22,760 --> 00:17:28,010
easily socialize quick tools within our

00:17:25,699 --> 00:17:30,440
team instead of pointing someone to a

00:17:28,010 --> 00:17:32,480
code repository where the basic or

00:17:30,440 --> 00:17:34,910
inadequate readme you can point them to

00:17:32,480 --> 00:17:40,310
a spinnaker pipeline where they can run

00:17:34,910 --> 00:17:41,960
it with a few clicks so let's look at

00:17:40,310 --> 00:17:44,750
what we've accomplished so far and

00:17:41,960 --> 00:17:47,180
compared to our goals we've simplified

00:17:44,750 --> 00:17:49,670
the management of complex workflows

00:17:47,180 --> 00:17:52,910
significantly compared to our legacy

00:17:49,670 --> 00:17:55,340
setup with little automation we now have

00:17:52,910 --> 00:17:57,470
a consistent process that is more

00:17:55,340 --> 00:18:00,320
reliable in large part due to the

00:17:57,470 --> 00:18:02,930
significant increase in automation we've

00:18:00,320 --> 00:18:07,010
been able to do this for multi cloud and

00:18:02,930 --> 00:18:08,450
multi geographical deploys we've made

00:18:07,010 --> 00:18:10,670
good on our goal to you

00:18:08,450 --> 00:18:13,010
configuration let's code by storing both

00:18:10,670 --> 00:18:16,010
application and deployment configuration

00:18:13,010 --> 00:18:17,750
is ended this has already resulted in

00:18:16,010 --> 00:18:19,850
increased audit ability and increased

00:18:17,750 --> 00:18:21,770
reliability of configuration updates

00:18:19,850 --> 00:18:26,450
since they go through our standard

00:18:21,770 --> 00:18:29,180
review process so let's look at some

00:18:26,450 --> 00:18:31,190
numbers there are some numbers in terms

00:18:29,180 --> 00:18:34,190
of what we have accomplished reduce

00:18:31,190 --> 00:18:36,800
deployment time significantly for in

00:18:34,190 --> 00:18:38,690
legacy systems it took two resources a

00:18:36,800 --> 00:18:40,940
day to release one of our key

00:18:38,690 --> 00:18:43,280
applications in production with the new

00:18:40,940 --> 00:18:47,030
CI CD it would take a single resource

00:18:43,280 --> 00:18:49,210
about 30 minutes with parallelization to

00:18:47,030 --> 00:18:51,620
deploy to a few different geographies

00:18:49,210 --> 00:18:54,530
comparing just the deployment time for

00:18:51,620 --> 00:18:57,230
container rice services for DCOs

00:18:54,530 --> 00:18:59,480
it took about two and a half hours for a

00:18:57,230 --> 00:19:02,030
service with multiple instances deployed

00:18:59,480 --> 00:19:05,510
sequentially in production comparing it

00:19:02,030 --> 00:19:06,890
with deployments in kubernetes using

00:19:05,510 --> 00:19:09,260
spinnaker it takes five minutes

00:19:06,890 --> 00:19:12,440
sequentially and even less when we

00:19:09,260 --> 00:19:14,210
parallelize it we've also significantly

00:19:12,440 --> 00:19:16,820
increased the number and frequency of

00:19:14,210 --> 00:19:19,880
our deploys our dev environments are

00:19:16,820 --> 00:19:22,520
updated on every comment compared to

00:19:19,880 --> 00:19:24,160
about once or twice a month as part of

00:19:22,520 --> 00:19:26,540
the release process previously

00:19:24,160 --> 00:19:28,400
production releases have increased from

00:19:26,540 --> 00:19:31,040
once a month to once a week for many

00:19:28,400 --> 00:19:33,890
services which amounts to about a 3 to 5

00:19:31,040 --> 00:19:36,590
X increase in production deployments we

00:19:33,890 --> 00:19:38,960
also have non-critical services that we

00:19:36,590 --> 00:19:44,240
release to all environments constantly

00:19:38,960 --> 00:19:46,700
as there are updates increments so

00:19:44,240 --> 00:19:49,340
that's what we've accomplished let's

00:19:46,700 --> 00:19:51,650
take a look at what's next we've already

00:19:49,340 --> 00:19:54,800
covered a couple of different clouds and

00:19:51,650 --> 00:19:57,440
a few geographical regions in our system

00:19:54,800 --> 00:19:59,480
however we're in the process of

00:19:57,440 --> 00:20:01,400
increasing our kubernetes and spinnaker

00:19:59,480 --> 00:20:04,280
manage footprint to encompass all

00:20:01,400 --> 00:20:06,050
regions and services we started using

00:20:04,280 --> 00:20:07,880
pipeline templates but we need to

00:20:06,050 --> 00:20:09,980
embrace them throughout our applications

00:20:07,880 --> 00:20:11,660
to avoid the maintenance overhead in

00:20:09,980 --> 00:20:14,780
managing similar pipelines across

00:20:11,660 --> 00:20:16,670
various services storing our templates

00:20:14,780 --> 00:20:18,440
and gate would also help socialize them

00:20:16,670 --> 00:20:21,830
and provide better audit ability in

00:20:18,440 --> 00:20:23,899
addition to spinnaker history we want to

00:20:21,830 --> 00:20:26,120
make releases a non-event by including

00:20:23,899 --> 00:20:28,039
better testing and validation of a live

00:20:26,120 --> 00:20:30,019
environment and proceed all the way

00:20:28,039 --> 00:20:35,120
through to production with minimal user

00:20:30,019 --> 00:20:37,309
input for our service we want to add

00:20:35,120 --> 00:20:39,590
cuddling for deployment scenarios by

00:20:37,309 --> 00:20:42,470
baking them in within the pipeline such

00:20:39,590 --> 00:20:44,600
as down timing relevant alerts this will

00:20:42,470 --> 00:20:46,940
help us increase the deploy frequency

00:20:44,600 --> 00:20:52,909
and improve reliability and confidence

00:20:46,940 --> 00:20:55,880
in deploys so that was our presentation

00:20:52,909 --> 00:20:59,179
on how you can use spinnaker to design

00:20:55,880 --> 00:21:02,690
complex workflows to find out more about

00:20:59,179 --> 00:21:04,789
Adobe experience platform pipeline and

00:21:02,690 --> 00:21:07,250
our CI CD practices please read through

00:21:04,789 --> 00:21:10,190
our medium block series the first link

00:21:07,250 --> 00:21:12,200
you see is related to this talk and the

00:21:10,190 --> 00:21:15,529
rest go in detail about what pipeline

00:21:12,200 --> 00:21:18,500
does you can reach out to us via email

00:21:15,529 --> 00:21:21,399
or on LinkedIn please enjoy the rest of

00:21:18,500 --> 00:21:21,399
spinnaker live

00:21:27,290 --> 00:21:29,350

YouTube URL: https://www.youtube.com/watch?v=pYa6SYl0wSM


