Title: Dan Hernandez and Praneet Loke @ Spinnaker.Live: New Friends - Spinnaker & Pulumi
Publication date: 2020-06-20
Playlist: Spinnaker.Live 2020
Description: 
	Learn about the initial journey Pulumi has taken joining the Spinnaker eco-system, what we’ve put together so far and what’s to come in the future.
Captions: 
	00:00:06,240 --> 00:00:11,049
thank you for joining spinnaker live

00:00:08,500 --> 00:00:12,789
today we hope you enjoyed the main stage

00:00:11,049 --> 00:00:14,440
presentations and this is a great

00:00:12,789 --> 00:00:17,259
virtual event to keep the global

00:00:14,440 --> 00:00:19,029
community connected some housekeeping

00:00:17,259 --> 00:00:21,939
notes to remember during our

00:00:19,029 --> 00:00:23,529
presentation type in questions to the

00:00:21,939 --> 00:00:26,140
chat function and we'll answer

00:00:23,529 --> 00:00:27,630
throughout the presentation and engage

00:00:26,140 --> 00:00:30,730
with other attendees through the portal

00:00:27,630 --> 00:00:32,710
after the breakout concludes head over

00:00:30,730 --> 00:00:37,629
to the main channel for games and prizes

00:00:32,710 --> 00:00:40,570
during breaks and / Nate and I are here

00:00:37,629 --> 00:00:43,300
to talk about some interesting new

00:00:40,570 --> 00:00:49,600
developments integrating Pulu me with

00:00:43,300 --> 00:00:51,969
the spinnaker ecosystem my name is Dan

00:00:49,600 --> 00:00:54,460
Hernandez I'm a customer engineer with

00:00:51,969 --> 00:00:56,500
paluma I've spent most of my career

00:00:54,460 --> 00:00:58,840
working with organizations on their

00:00:56,500 --> 00:01:01,270
infrastructures code and cloud

00:00:58,840 --> 00:01:02,920
modernization projects with that

00:01:01,270 --> 00:01:05,950
experience I've seen a lot of common

00:01:02,920 --> 00:01:08,320
patterns and pain points and that's what

00:01:05,950 --> 00:01:10,539
really brought me to believe me and it

00:01:08,320 --> 00:01:13,479
also happens that many of our users are

00:01:10,539 --> 00:01:16,619
really curious about what the story has

00:01:13,479 --> 00:01:19,899
been between plumie and spinnaker and

00:01:16,619 --> 00:01:24,849
that's why I'm excited to show what

00:01:19,899 --> 00:01:27,039
we're showing today pretty and and I'm

00:01:24,849 --> 00:01:31,270
pretty low-key I'm a software engineer

00:01:27,039 --> 00:01:32,800
at Pulu me and I work on our service and

00:01:31,270 --> 00:01:35,590
CLI tools

00:01:32,800 --> 00:01:37,899
I am absolutely excited to be showing

00:01:35,590 --> 00:01:40,300
off our balloony plugin for spinnaker

00:01:37,899 --> 00:01:44,890
today so I can't really wait for for us

00:01:40,300 --> 00:01:48,700
to get to the demo slide and today we're

00:01:44,890 --> 00:01:50,679
gonna talk about balloony for a couple

00:01:48,700 --> 00:01:54,970
of minutes for those of you who are

00:01:50,679 --> 00:01:58,539
unfamiliar and we'll talk about how we

00:01:54,970 --> 00:01:59,979
got where we are today and why and we'll

00:01:58,539 --> 00:02:05,770
spend most of the time walking through a

00:01:59,979 --> 00:02:08,080
demo so a little about Pulu me Pulu me

00:02:05,770 --> 00:02:10,929
is really the next evolution of

00:02:08,080 --> 00:02:12,730
infrastructure as code and I like to say

00:02:10,929 --> 00:02:16,270
that it puts the code back in

00:02:12,730 --> 00:02:18,040
infrastructure as code meaning you can

00:02:16,270 --> 00:02:19,450
define your infrastructure declaratively

00:02:18,040 --> 00:02:21,730
using real

00:02:19,450 --> 00:02:25,560
programming languages so no yeah Mille

00:02:21,730 --> 00:02:29,560
JSON or proprietary DSL that you need to

00:02:25,560 --> 00:02:31,360
learn or swipe your toe on you can use

00:02:29,560 --> 00:02:33,879
any language that you prefer

00:02:31,360 --> 00:02:38,950
as long as it's JavaScript type scripts

00:02:33,879 --> 00:02:40,630
Python dotnet or go and pollute me is a

00:02:38,950 --> 00:02:44,590
full engine

00:02:40,630 --> 00:02:45,670
it's a CLI tool it's a SAS product and

00:02:44,590 --> 00:02:48,069
it really makes it easy for

00:02:45,670 --> 00:02:50,590
organizations to adopt modern cloud

00:02:48,069 --> 00:02:53,769
technology and infrastructure is code

00:02:50,590 --> 00:02:57,760
best practices and I won't dive into

00:02:53,769 --> 00:03:00,250
each one of these and that said you know

00:02:57,760 --> 00:03:02,920
I really want to get into what we're

00:03:00,250 --> 00:03:05,380
here to talk about today and you know

00:03:02,920 --> 00:03:06,880
we've seen a lot of interest in this

00:03:05,380 --> 00:03:09,760
story between pulling me and spinnaker

00:03:06,880 --> 00:03:14,079
from our users and from our customers

00:03:09,760 --> 00:03:16,630
and so we joined the spinnaker gardening

00:03:14,079 --> 00:03:18,160
days back in April as a way to kick off

00:03:16,630 --> 00:03:24,370
our involvement in the spinnaker

00:03:18,160 --> 00:03:26,049
ecosystem so the spinnaker hackathon was

00:03:24,370 --> 00:03:28,600
a really great event and experienced

00:03:26,049 --> 00:03:31,389
just one colleague and I joined thinking

00:03:28,600 --> 00:03:33,459
we would be working alone but we

00:03:31,389 --> 00:03:34,989
actually ended up recruiting sixteen

00:03:33,459 --> 00:03:37,870
different community members into the

00:03:34,989 --> 00:03:40,989
channel and throughout the hackathon

00:03:37,870 --> 00:03:45,670
there were anywhere between five to ten

00:03:40,989 --> 00:03:47,859
people active on a long-running zoom and

00:03:45,670 --> 00:03:49,420
we won the hackathon so you know shout

00:03:47,859 --> 00:03:51,760
out to the community and those that

00:03:49,420 --> 00:03:52,329
participated again it was a great

00:03:51,760 --> 00:03:54,340
experience

00:03:52,329 --> 00:03:56,410
keeping definitely keep an eye out for

00:03:54,340 --> 00:03:58,780
the next one you know I promise it'll be

00:03:56,410 --> 00:03:59,470
a really cool experience the the team

00:03:58,780 --> 00:04:02,109
over there

00:03:59,470 --> 00:04:04,840
aka Rosalind from armory just you know

00:04:02,109 --> 00:04:05,980
did a really superb job and it was you

00:04:04,840 --> 00:04:11,950
know one of the best run events I've

00:04:05,980 --> 00:04:14,410
personally participated and to talk more

00:04:11,950 --> 00:04:17,320
in depth about how we see Paula me and

00:04:14,410 --> 00:04:21,669
spinnaker working in concert there are

00:04:17,320 --> 00:04:25,450
multiple ways that can kind of piggyback

00:04:21,669 --> 00:04:27,430
or turtle on one another first you can

00:04:25,450 --> 00:04:30,280
bring up a spinnaker cluster using

00:04:27,430 --> 00:04:32,330
plumie that is a core Nettie's cluster

00:04:30,280 --> 00:04:34,819
and the right side containers and

00:04:32,330 --> 00:04:38,479
and all define they deployed using Pulu

00:04:34,819 --> 00:04:40,009
me we haven't done this yet but we've

00:04:38,479 --> 00:04:42,009
been playing around with it and it would

00:04:40,009 --> 00:04:44,150
be really awesome to see some

00:04:42,009 --> 00:04:47,870
open-source examples around this from

00:04:44,150 --> 00:04:50,030
the community you can also actually

00:04:47,870 --> 00:04:53,000
manage the resources inside of the

00:04:50,030 --> 00:04:55,129
spinnaker cluster like a pipeline and

00:04:53,000 --> 00:04:59,030
using plumie you know plumie has a

00:04:55,129 --> 00:05:02,539
concept of providers just that just

00:04:59,030 --> 00:05:04,849
require an API a while back we took a

00:05:02,539 --> 00:05:08,300
stab at this for an internal hackathon

00:05:04,849 --> 00:05:10,250
so it's not officially supported but you

00:05:08,300 --> 00:05:12,469
know completely possible and another

00:05:10,250 --> 00:05:15,409
great open source project opportunity to

00:05:12,469 --> 00:05:17,389
consider and finally and more

00:05:15,409 --> 00:05:19,759
specifically where we started in

00:05:17,389 --> 00:05:22,430
hackathon is deploying cloud resources

00:05:19,759 --> 00:05:25,129
in spinnaker pipeline using polluting

00:05:22,430 --> 00:05:27,889
so think base infrastructure like for

00:05:25,129 --> 00:05:30,590
burn Eddie's clusters to kubernetes apps

00:05:27,889 --> 00:05:32,750
to your s3 buckets and you know really

00:05:30,590 --> 00:05:34,340
any other cloud resources that are

00:05:32,750 --> 00:05:39,110
needed to build a modern cloud

00:05:34,340 --> 00:05:41,060
application in the hackathon we you know

00:05:39,110 --> 00:05:42,740
we made some really good progress but

00:05:41,060 --> 00:05:45,199
you know it was certainly a hackathon

00:05:42,740 --> 00:05:47,659
and the result wasn't quite ready to be

00:05:45,199 --> 00:05:49,879
consumed more broadly so since then

00:05:47,659 --> 00:05:54,310
we've put in some additional work to

00:05:49,879 --> 00:05:57,680
really bring that solution into preview

00:05:54,310 --> 00:05:59,690
absolutely ready to use open source and

00:05:57,680 --> 00:06:01,699
we're really excited about getting folks

00:05:59,690 --> 00:06:06,409
using it giving us feedback and

00:06:01,699 --> 00:06:08,960
collaborating on improvements and with

00:06:06,409 --> 00:06:14,509
that said I'll hand it over to Bernie to

00:06:08,960 --> 00:06:15,050
show us what he's been working on all

00:06:14,509 --> 00:06:18,889
right

00:06:15,050 --> 00:06:21,919
thanks Dan so as I said as I mentioned

00:06:18,889 --> 00:06:26,719
before I've been working on the plugin

00:06:21,919 --> 00:06:30,110
with dan and the folks at armory and

00:06:26,719 --> 00:06:32,449
it's been really amazing to to to

00:06:30,110 --> 00:06:35,029
basically understand the whole concept

00:06:32,449 --> 00:06:41,180
of the spinnaker ecosystem and the

00:06:35,029 --> 00:06:44,149
spinnaker service itself and so I wanted

00:06:41,180 --> 00:06:45,620
to first start with a with an overview

00:06:44,149 --> 00:06:49,250
of the plugin

00:06:45,620 --> 00:06:52,580
we've built as well as show the Pulu me

00:06:49,250 --> 00:06:55,610
app that we will deploy using a an

00:06:52,580 --> 00:06:57,770
example pipeline in spinnaker and we'll

00:06:55,610 --> 00:07:00,680
also look at making changes to the

00:06:57,770 --> 00:07:04,750
plumie app and deploying that using the

00:07:00,680 --> 00:07:07,880
same pipeline so throughout this

00:07:04,750 --> 00:07:10,669
basically I will be shifting between my

00:07:07,880 --> 00:07:15,050
vs code and my local spinnaker instance

00:07:10,669 --> 00:07:19,699
which has been enabled by armories

00:07:15,050 --> 00:07:29,360
menaker so without further ado let's go

00:07:19,699 --> 00:07:31,280
look at our pipeline so when we worked

00:07:29,360 --> 00:07:35,090
on the plug-in we want to keep in mind

00:07:31,280 --> 00:07:38,810
that users should be able to work with

00:07:35,090 --> 00:07:42,289
any VCS where their source code is

00:07:38,810 --> 00:07:45,530
located and this could be a public or a

00:07:42,289 --> 00:07:48,740
private repository and given that paluma

00:07:45,530 --> 00:07:52,010
allows you to write plumie apps or

00:07:48,740 --> 00:07:53,690
author your infrastructure in any of

00:07:52,010 --> 00:07:56,900
these supportive programming languages

00:07:53,690 --> 00:07:59,720
you also need a way to you know restore

00:07:56,900 --> 00:08:03,289
any dependencies that your columbia app

00:07:59,720 --> 00:08:06,169
can be depending on and also because we

00:08:03,289 --> 00:08:10,849
roll out CLI releases you should also be

00:08:06,169 --> 00:08:14,060
able to pick a specific version of alumi

00:08:10,849 --> 00:08:20,090
that you would like to run your run the

00:08:14,060 --> 00:08:23,510
plumie CLI against and and also because

00:08:20,090 --> 00:08:26,960
the CLI supports a lot of commands we

00:08:23,510 --> 00:08:28,810
also wanted to allow you to specify the

00:08:26,960 --> 00:08:32,779
command that you would like to run and

00:08:28,810 --> 00:08:35,930
pass the arguments that you want for the

00:08:32,779 --> 00:08:40,520
command and Paloma also has this concept

00:08:35,930 --> 00:08:45,320
called a back-end which which is

00:08:40,520 --> 00:08:47,890
basically like you pull me whenever you

00:08:45,320 --> 00:08:51,580
run pulling me preview or pulling me up

00:08:47,890 --> 00:08:56,390
pull me tracks the infrastructure state

00:08:51,580 --> 00:08:59,270
with a specific service back-end and so

00:08:56,390 --> 00:09:01,400
this back-end out of the box is the

00:08:59,270 --> 00:09:04,610
managed service back in identified by

00:09:01,400 --> 00:09:07,340
API to me calm and of course you can

00:09:04,610 --> 00:09:12,260
change this to be a self-hosted back-end

00:09:07,340 --> 00:09:15,320
or it could be even an AWS s3 or or GCS

00:09:12,260 --> 00:09:17,600
or any of the supported backends and you

00:09:15,320 --> 00:09:20,810
can look at the documentation for using

00:09:17,600 --> 00:09:25,960
a using a back-end on Columbia comm

00:09:20,810 --> 00:09:30,710
slash Doc's and lastly we also wanted to

00:09:25,960 --> 00:09:33,740
give a way to specify secrets that you

00:09:30,710 --> 00:09:35,300
would run with the plumie app so for

00:09:33,740 --> 00:09:38,300
example if you're running and pulling

00:09:35,300 --> 00:09:41,810
the app that deploys resources to AWS or

00:09:38,300 --> 00:09:43,700
GCP or or any of the other supported

00:09:41,810 --> 00:09:47,420
providers you need to be able to pass

00:09:43,700 --> 00:09:49,460
those secrets to to the execution

00:09:47,420 --> 00:09:52,970
environment in which the plumie CLI is

00:09:49,460 --> 00:09:55,790
running so for this basically you will

00:09:52,970 --> 00:09:58,280
define a kubernetes secret resource and

00:09:55,790 --> 00:10:00,800
then the root secret resource will

00:09:58,280 --> 00:10:02,780
contain can contain any of those

00:10:00,800 --> 00:10:06,170
environment variables that Polly expects

00:10:02,780 --> 00:10:09,410
for each of those providers so so

00:10:06,170 --> 00:10:11,690
basically that's that's that's those are

00:10:09,410 --> 00:10:14,870
all of the inputs that the plug-in

00:10:11,690 --> 00:10:17,390
itself provides and for the example

00:10:14,870 --> 00:10:20,630
pipeline I thought it would be really

00:10:17,390 --> 00:10:22,880
good to demonstrate deploying a

00:10:20,630 --> 00:10:24,440
kubernetes resource into the same

00:10:22,880 --> 00:10:28,010
cluster that the spinnaker instance

00:10:24,440 --> 00:10:34,360
itself is running as well as trying to

00:10:28,010 --> 00:10:38,300
deploy some AWS s3 resources and so our

00:10:34,360 --> 00:10:42,080
sample app for s3 will will basically

00:10:38,300 --> 00:10:44,020
deploy a static website which involves

00:10:42,080 --> 00:10:46,400
creating an s3 bucket and then

00:10:44,020 --> 00:10:50,510
configuring bucket policies on that and

00:10:46,400 --> 00:10:52,490
then also uploading some bucket objects

00:10:50,510 --> 00:10:56,500
which which will then be marked with

00:10:52,490 --> 00:10:58,850
that bucket policy and for the nginx

00:10:56,500 --> 00:11:03,230
resource which is going to be a

00:10:58,850 --> 00:11:06,080
kubernetes deployment resource the nginx

00:11:03,230 --> 00:11:09,410
container will be deployed with default

00:11:06,080 --> 00:11:11,570
configuration and and so we're not going

00:11:09,410 --> 00:11:14,090
to be exposing the container

00:11:11,570 --> 00:11:15,680
side of this vinegar cluster itself but

00:11:14,090 --> 00:11:17,480
because we're deploying it within the

00:11:15,680 --> 00:11:19,610
cluster and and this is a local

00:11:17,480 --> 00:11:22,670
installation we can ping that default

00:11:19,610 --> 00:11:27,970
installation and see see the response

00:11:22,670 --> 00:11:31,850
from nginx itself so let's look at the

00:11:27,970 --> 00:11:35,870
the plumbing app itself and as you can

00:11:31,850 --> 00:11:38,810
see the we're making use of the

00:11:35,870 --> 00:11:42,140
kubernetes package to define the various

00:11:38,810 --> 00:11:45,500
resources I have a config map with some

00:11:42,140 --> 00:11:48,860
key value pairs that that my deployment

00:11:45,500 --> 00:11:52,790
cares about and you can see it's pretty

00:11:48,860 --> 00:11:55,100
easy and idiomatic to type script in

00:11:52,790 --> 00:11:58,580
this case you know how you would create

00:11:55,100 --> 00:12:01,150
new resources and basically reference

00:11:58,580 --> 00:12:04,490
those resources as as simple as just

00:12:01,150 --> 00:12:08,660
local variables throughout your

00:12:04,490 --> 00:12:11,990
infrastructure resource and so my config

00:12:08,660 --> 00:12:14,210
config map resource and is used by my

00:12:11,990 --> 00:12:16,820
deployment resource which was chalice

00:12:14,210 --> 00:12:19,970
blue me that the deployment resource

00:12:16,820 --> 00:12:22,880
cannot finish cannot be created until

00:12:19,970 --> 00:12:26,420
the config map resource itself is is

00:12:22,880 --> 00:12:28,550
created and ready to be used and and and

00:12:26,420 --> 00:12:31,970
of course we map the name of the config

00:12:28,550 --> 00:12:35,030
map resource as a ref for pulling all

00:12:31,970 --> 00:12:36,500
the key value pairs out of config map

00:12:35,030 --> 00:12:40,880
and mapping them as environment

00:12:36,500 --> 00:12:46,130
variables for for nginx container and so

00:12:40,880 --> 00:12:50,000
when we when we run this when we run

00:12:46,130 --> 00:12:54,320
this pipeline we can see that Pulu me

00:12:50,000 --> 00:12:56,720
basically creates the config map and

00:12:54,320 --> 00:12:59,380
then starts to create the nginx

00:12:56,720 --> 00:13:02,360
deployment resource you can see that

00:12:59,380 --> 00:13:05,210
plumie orchestrates the creation of this

00:13:02,360 --> 00:13:07,220
nginx or this deployment resource and

00:13:05,210 --> 00:13:09,020
then waits for the pod to be ready

00:13:07,220 --> 00:13:11,690
before it marks the deployment as

00:13:09,020 --> 00:13:16,040
complete and so once the pot is ready

00:13:11,690 --> 00:13:19,940
and initialized it basically basically

00:13:16,040 --> 00:13:22,790
ends the deployment execution and and

00:13:19,940 --> 00:13:25,070
then gives you the results which you can

00:13:22,790 --> 00:13:28,010
then view on the plumie console

00:13:25,070 --> 00:13:31,240
using this permalink for this update and

00:13:28,010 --> 00:13:35,180
if we look at the s3 update itself

00:13:31,240 --> 00:13:39,050
pretty simple and you know we create the

00:13:35,180 --> 00:13:42,350
bucket policy the bucket upload a couple

00:13:39,050 --> 00:13:45,440
couple of bucket objects and with the

00:13:42,350 --> 00:13:49,340
same bucket policy that we defined which

00:13:45,440 --> 00:13:53,480
if we look at that it's basically a

00:13:49,340 --> 00:13:55,910
regular bucket policy that allows public

00:13:53,480 --> 00:13:58,430
access on any objects uploaded to that

00:13:55,910 --> 00:14:01,910
specific bucket and we want to do this

00:13:58,430 --> 00:14:04,910
because this is specifically for a

00:14:01,910 --> 00:14:08,090
static website which it's okay to have

00:14:04,910 --> 00:14:10,160
anonymous access and specifically public

00:14:08,090 --> 00:14:13,190
access because normally you don't want

00:14:10,160 --> 00:14:17,990
to have private X or public access on on

00:14:13,190 --> 00:14:21,520
sensitive buckets so let's take a look

00:14:17,990 --> 00:14:24,560
at creating or making an update to this

00:14:21,520 --> 00:14:27,320
now now creating these resources is

00:14:24,560 --> 00:14:29,630
great and creating this in my spinnaker

00:14:27,320 --> 00:14:32,600
instance or spinnaker cluster is is

00:14:29,630 --> 00:14:34,520
great but the thing about these two

00:14:32,600 --> 00:14:36,740
resources is I've not specified the

00:14:34,520 --> 00:14:38,600
namespace here which means these two

00:14:36,740 --> 00:14:41,300
resources are created in the default

00:14:38,600 --> 00:14:44,570
namespace and that's not really great

00:14:41,300 --> 00:14:48,140
because typically teens want to have

00:14:44,570 --> 00:14:51,020
their their resources namespace

00:14:48,140 --> 00:14:53,210
accordingly and so in this case I want

00:14:51,020 --> 00:14:56,230
to have these two resources in an app

00:14:53,210 --> 00:15:00,290
namespace because this is something that

00:14:56,230 --> 00:15:01,910
the all of my app resources I want to

00:15:00,290 --> 00:15:06,890
put all of them into a specific

00:15:01,910 --> 00:15:09,560
namespace and so I've already saved the

00:15:06,890 --> 00:15:15,050
code for doing this but let's take a

00:15:09,560 --> 00:15:16,940
really quick walk through this so the

00:15:15,050 --> 00:15:19,130
changes that you'll notice is that

00:15:16,940 --> 00:15:22,220
there's a new resource now which is

00:15:19,130 --> 00:15:24,260
basically create a new namespace and

00:15:22,220 --> 00:15:28,100
then using that namespace with

00:15:24,260 --> 00:15:30,410
throughout the rest of the app itself so

00:15:28,100 --> 00:15:32,540
basically that's our config map and our

00:15:30,410 --> 00:15:35,180
deployment resource we're gonna use the

00:15:32,540 --> 00:15:38,329
namespace itself which involves

00:15:35,180 --> 00:15:40,309
specifying the namespace property

00:15:38,329 --> 00:15:43,279
inside the metadata for the config map

00:15:40,309 --> 00:15:45,439
and deployment resources so so this is

00:15:43,279 --> 00:15:49,610
really great let's go ahead and commit

00:15:45,439 --> 00:15:51,350
this and push this up normally you would

00:15:49,610 --> 00:15:53,809
go through the get opps workflow and

00:15:51,350 --> 00:15:56,779
make sure that your code changes are

00:15:53,809 --> 00:16:00,110
reviewed and you have a PR workflow

00:15:56,779 --> 00:16:02,299
which you can even use spinnaker to to

00:16:00,110 --> 00:16:04,189
get a web hook trigger for your pull

00:16:02,299 --> 00:16:07,069
request such that you can run a pipeline

00:16:04,189 --> 00:16:09,769
that runs a preview for the changes that

00:16:07,069 --> 00:16:12,079
you're proposing but because we're we're

00:16:09,769 --> 00:16:13,869
doing a demo here I'm gonna skip past

00:16:12,079 --> 00:16:16,610
some of those things and I'll show you

00:16:13,869 --> 00:16:19,220
the pipeline view of what happens when

00:16:16,610 --> 00:16:21,949
we apply these changes as well as also

00:16:19,220 --> 00:16:32,029
look at the preview itself to see what

00:16:21,949 --> 00:16:43,129
that looks like so oops let's go ahead

00:16:32,029 --> 00:16:50,480
and save that resource and push it up to

00:16:43,129 --> 00:16:56,179
master great so I've already gone ahead

00:16:50,480 --> 00:16:58,850
and made and run an execution of that

00:16:56,179 --> 00:17:03,619
pipeline which which has those changes

00:16:58,850 --> 00:17:06,409
with the namespace edition so let's take

00:17:03,619 --> 00:17:07,880
a quick look at the preview itself so as

00:17:06,409 --> 00:17:11,689
you can see the preview basically says

00:17:07,880 --> 00:17:13,579
that there is now a difference in the

00:17:11,689 --> 00:17:15,980
metadata from what was previously

00:17:13,579 --> 00:17:19,339
deployed and so gloomy detects that it

00:17:15,980 --> 00:17:22,189
needs to replace the config map and the

00:17:19,339 --> 00:17:23,659
deployment resources and before that it

00:17:22,189 --> 00:17:26,799
needs to first create the namespace

00:17:23,659 --> 00:17:28,730
resource and so Paula me automatically

00:17:26,799 --> 00:17:30,590
orchestrates the creation and

00:17:28,730 --> 00:17:34,130
replacement of these resources and so

00:17:30,590 --> 00:17:36,889
first proposes creating the namespace

00:17:34,130 --> 00:17:39,320
resource and then followed by creating

00:17:36,889 --> 00:17:42,230
the new config map resource and then

00:17:39,320 --> 00:17:44,480
finally removing the old config map

00:17:42,230 --> 00:17:46,340
resource and then the same thing happens

00:17:44,480 --> 00:17:49,279
with a deployment resource for the nginx

00:17:46,340 --> 00:17:51,600
container which gets created in the new

00:17:49,279 --> 00:17:55,770
app namespace and then

00:17:51,600 --> 00:17:57,690
the old nginx container which was

00:17:55,770 --> 00:18:00,630
running in a default namespace then gets

00:17:57,690 --> 00:18:02,490
removed or deleted and so once that's

00:18:00,630 --> 00:18:05,039
done then pulling me basically says the

00:18:02,490 --> 00:18:10,350
deployment is over sounds pretty simple

00:18:05,039 --> 00:18:12,390
and if we look at the s3 changes we

00:18:10,350 --> 00:18:16,549
actually did not change anything which

00:18:12,390 --> 00:18:19,200
means the five unchanged output is

00:18:16,549 --> 00:18:19,559
totally valid because we did not touch a

00:18:19,200 --> 00:18:21,450
thing

00:18:19,559 --> 00:18:24,200
which means nothing should be updated

00:18:21,450 --> 00:18:26,669
this is exactly what I would expect and

00:18:24,200 --> 00:18:28,530
as you can imagine if you're doing a

00:18:26,669 --> 00:18:31,289
pull request this is exactly what you

00:18:28,530 --> 00:18:33,890
would be looking for when you have you

00:18:31,289 --> 00:18:36,090
know a triggered build for pull requests

00:18:33,890 --> 00:18:39,210
basically evaluating if your

00:18:36,090 --> 00:18:42,390
infrastructure is being changed you know

00:18:39,210 --> 00:18:48,179
unnecessarily or or accidentally because

00:18:42,390 --> 00:18:50,400
you change something else and finally if

00:18:48,179 --> 00:18:54,299
we look at the actual update stage

00:18:50,400 --> 00:18:57,570
itself for our changes where we add at

00:18:54,299 --> 00:19:00,419
the name space we can see that the name

00:18:57,570 --> 00:19:02,700
space gets created and then the new

00:19:00,419 --> 00:19:05,580
config map gets created in the new name

00:19:02,700 --> 00:19:09,720
space and then the old one gets removed

00:19:05,580 --> 00:19:11,789
and then the same thing happens for for

00:19:09,720 --> 00:19:14,340
our nginx container itself you know

00:19:11,789 --> 00:19:16,919
creation followed by a replacement and

00:19:14,340 --> 00:19:20,370
then eventually also waiting for the

00:19:16,919 --> 00:19:22,440
container to to fully initialize and

00:19:20,370 --> 00:19:24,570
then pulling the basically completes the

00:19:22,440 --> 00:19:27,750
deployment and once again we get a

00:19:24,570 --> 00:19:31,289
permalink for for this update to see

00:19:27,750 --> 00:19:33,510
what you know what were the resources

00:19:31,289 --> 00:19:36,900
that were changed and what was a

00:19:33,510 --> 00:19:40,559
detailed diff between the previous state

00:19:36,900 --> 00:19:43,049
and the current state so that's great so

00:19:40,559 --> 00:19:45,090
because the deployment is complete we

00:19:43,049 --> 00:19:47,940
can go out and query our app's name

00:19:45,090 --> 00:19:51,809
space in our kubernetes cluster and see

00:19:47,940 --> 00:19:55,890
that we do have an engine X pod here

00:19:51,809 --> 00:19:59,390
with an internal IP address of 10.40 2-0

00:19:55,890 --> 00:20:01,559
to 40 so let's go ahead and query that

00:19:59,390 --> 00:20:03,990
and you can see that I get a default

00:20:01,559 --> 00:20:05,400
nginx response which is totally valid

00:20:03,990 --> 00:20:07,560
because I've not

00:20:05,400 --> 00:20:12,690
done anything other than just deploy the

00:20:07,560 --> 00:20:16,410
default nginx image as a container in my

00:20:12,690 --> 00:20:20,340
existing cluster and you know and it's

00:20:16,410 --> 00:20:22,650
accessible within the cluster and I get

00:20:20,340 --> 00:20:25,950
the valid response so looking great so

00:20:22,650 --> 00:20:28,890
when I'm all done I can go ahead and run

00:20:25,950 --> 00:20:31,050
a destroy job which a destroy job uses

00:20:28,890 --> 00:20:34,560
our plugin again but instead of running

00:20:31,050 --> 00:20:36,780
the pull the preview or the up command

00:20:34,560 --> 00:20:39,540
like I showed before it runs the destroy

00:20:36,780 --> 00:20:41,310
command which goes ahead and tears down

00:20:39,540 --> 00:20:44,490
the infrastructure so you can imagine

00:20:41,310 --> 00:20:46,290
how putting these two commands together

00:20:44,490 --> 00:20:48,330
you could quickly come up with the

00:20:46,290 --> 00:20:51,000
pipeline that simulates sort of an

00:20:48,330 --> 00:20:53,730
ephemeral testing environment so you

00:20:51,000 --> 00:20:57,660
could think of scenarios where you have

00:20:53,730 --> 00:20:59,790
a you have an application that you want

00:20:57,660 --> 00:21:02,720
to test in the real world scenario so

00:20:59,790 --> 00:21:05,400
you want to set up some infrastructure

00:21:02,720 --> 00:21:06,810
run some smoke tests against it and then

00:21:05,400 --> 00:21:09,930
quickly teardown their infrastructure

00:21:06,810 --> 00:21:13,890
this is really possible with paluma

00:21:09,930 --> 00:21:16,620
because it doesn't take a whole lot to

00:21:13,890 --> 00:21:19,710
actually achieve that scenario so so

00:21:16,620 --> 00:21:22,910
I'll go ahead and kick that and let the

00:21:19,710 --> 00:21:27,630
destroy run and and delete my resources

00:21:22,910 --> 00:21:30,660
for me but that's pretty much all that I

00:21:27,630 --> 00:21:33,270
have to demonstrate for you all today

00:21:30,660 --> 00:21:36,330
but I hope that you will check out the

00:21:33,270 --> 00:21:39,810
plumie plugin for a spinnaker it is open

00:21:36,330 --> 00:21:43,770
source we hope to get some feedback from

00:21:39,810 --> 00:21:45,720
the community and hopefully we can work

00:21:43,770 --> 00:21:50,750
with you to add more features to it so

00:21:45,720 --> 00:21:50,750
with that I will give it to them

00:21:53,159 --> 00:21:58,779
thanks for neat that was an awesome demo

00:21:56,230 --> 00:22:05,100
yeah I'm also really excited about

00:21:58,779 --> 00:22:07,899
bringing this to the community and I

00:22:05,100 --> 00:22:10,989
want to give a special thanks to armory

00:22:07,899 --> 00:22:14,049
I think they've they spend a you know a

00:22:10,989 --> 00:22:17,470
lot of time with us on building the

00:22:14,049 --> 00:22:19,419
plug-in and showing us how how to you

00:22:17,470 --> 00:22:21,970
know work with various nuances of

00:22:19,419 --> 00:22:24,519
spinnaker they've been working a lot on

00:22:21,970 --> 00:22:27,519
the open source aspects of the plug-in

00:22:24,519 --> 00:22:29,830
framework so you know very thankful for

00:22:27,519 --> 00:22:32,169
that work and look forward to continuing

00:22:29,830 --> 00:22:36,369
to work with them and seeing the the

00:22:32,169 --> 00:22:41,320
work that that they're doing in next

00:22:36,369 --> 00:22:43,509
steps for the for the viewers so get

00:22:41,320 --> 00:22:45,940
started with plumie it's really easy you

00:22:43,509 --> 00:22:48,399
know it takes about 15 minutes through

00:22:45,940 --> 00:22:50,559
our getting started guide join our

00:22:48,399 --> 00:22:53,739
community slack that's a great place to

00:22:50,559 --> 00:22:56,590
ask questions and understand everything

00:22:53,739 --> 00:22:58,769
that's going on surrounding pluming and

00:22:56,590 --> 00:23:02,230
in being able to interact with other

00:22:58,769 --> 00:23:04,629
folks in the community and definitely

00:23:02,230 --> 00:23:06,609
try the plug-in out for yourself we'll

00:23:04,629 --> 00:23:10,690
share some details around about how you

00:23:06,609 --> 00:23:14,429
can get access to this and it would be

00:23:10,690 --> 00:23:16,809
great if if you in the community would

00:23:14,429 --> 00:23:17,470
create and can contribute open source

00:23:16,809 --> 00:23:20,830
projects

00:23:17,470 --> 00:23:22,629
Cluny is an open source tool and you

00:23:20,830 --> 00:23:25,989
know we're really excited about the

00:23:22,629 --> 00:23:27,519
opportunities to expand the ecosystem

00:23:25,989 --> 00:23:31,419
and work with a lot of different

00:23:27,519 --> 00:23:35,580
organizations and teams and people on on

00:23:31,419 --> 00:23:37,980
various different projects but for this

00:23:35,580 --> 00:23:44,109
specifically spinnaker there's a lot of

00:23:37,980 --> 00:23:47,529
different opportunities here so last

00:23:44,109 --> 00:23:50,619
thing here we have a trivia question for

00:23:47,529 --> 00:23:53,230
our final slide please put your answer

00:23:50,619 --> 00:23:54,970
in the chat function and we'll select a

00:23:53,230 --> 00:23:59,590
winner at random that answers correctly

00:23:54,970 --> 00:24:02,649
and connect with us via slack or Twitter

00:23:59,590 --> 00:24:05,669
and enjoy the rest of spinnaker live

00:24:02,649 --> 00:24:05,669
thank you

00:24:11,810 --> 00:24:13,870

YouTube URL: https://www.youtube.com/watch?v=bIy6QiwIj3A


