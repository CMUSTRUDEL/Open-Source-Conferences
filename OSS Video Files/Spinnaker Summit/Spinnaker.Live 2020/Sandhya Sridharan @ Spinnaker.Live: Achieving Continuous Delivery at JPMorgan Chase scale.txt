Title: Sandhya Sridharan @ Spinnaker.Live: Achieving Continuous Delivery at JPMorgan Chase scale
Publication date: 2020-06-22
Playlist: Spinnaker.Live 2020
Description: 
	How do you scale for continuous delivery success? Sandhya Sridharan, head of the JPMorgan Chase Enterprise Toolchain (JET), talks about the scale at which her firm operates and how it is leveraging continuous delivery with Spinnaker to enable cloud agnostic deployments while accelerating time to market, enhancing overall software quality and reducing risk.
Captions: 
	00:00:02,570 --> 00:00:09,740
hello everyone really excited to be here

00:00:07,279 --> 00:00:13,190
my name is Sam - we Darin I'm the head

00:00:09,740 --> 00:00:16,430
of JP MC Enterprise toolchain what we

00:00:13,190 --> 00:00:18,770
refer to as jet it's a platform that

00:00:16,430 --> 00:00:22,360
provides full sdlc capabilities

00:00:18,770 --> 00:00:26,180
self-service automation full end-to-end

00:00:22,360 --> 00:00:29,960
capabilities I've been with JP MC for

00:00:26,180 --> 00:00:31,969
about ten months and prior to that led

00:00:29,960 --> 00:00:36,380
large-scale engineering teams both at

00:00:31,969 --> 00:00:40,100
VMware and at Oracle including asari and

00:00:36,380 --> 00:00:42,850
our CIC D functions so engineering

00:00:40,100 --> 00:00:45,920
acceleration is top of mind for me and

00:00:42,850 --> 00:00:50,200
optimizing for speed speed of delivery

00:00:45,920 --> 00:00:52,670
without compromising on security quality

00:00:50,200 --> 00:00:56,329
compliance and customer centricity is

00:00:52,670 --> 00:00:59,270
absolutely key for our success so today

00:00:56,329 --> 00:01:02,260
I'm gonna spend a bit of time taking you

00:00:59,270 --> 00:01:04,939
through what we at JP MC are doing for

00:01:02,260 --> 00:01:07,850
engineering acceleration especially with

00:01:04,939 --> 00:01:08,659
regards to providing faster value to our

00:01:07,850 --> 00:01:11,540
customers

00:01:08,659 --> 00:01:14,090
but before I get started you know let me

00:01:11,540 --> 00:01:16,790
set some context as you can tell from

00:01:14,090 --> 00:01:19,010
these numbers we operate at a very large

00:01:16,790 --> 00:01:22,490
scale right these are eye popping

00:01:19,010 --> 00:01:24,680
numbers 27 trillion dollars and assets

00:01:22,490 --> 00:01:27,799
you know six trillion dollars of

00:01:24,680 --> 00:01:31,040
payments processed daily we have a huge

00:01:27,799 --> 00:01:34,930
responsibility on our shoulders so

00:01:31,040 --> 00:01:39,020
security resiliency performance are

00:01:34,930 --> 00:01:41,810
absolutely key for our success so but

00:01:39,020 --> 00:01:45,830
for this presentation will primarily

00:01:41,810 --> 00:01:49,210
focus on the technology scale right so

00:01:45,830 --> 00:01:52,850
as you can tell we have 50,000 plus

00:01:49,210 --> 00:01:57,460
technologists are north of 440 thousand

00:01:52,850 --> 00:02:01,430
of them are developers and we deploy

00:01:57,460 --> 00:02:05,060
about 70 thousand bills to cloud per

00:02:01,430 --> 00:02:08,269
week and we have north of 6,000

00:02:05,060 --> 00:02:10,909
applications right and and there is

00:02:08,269 --> 00:02:14,120
extreme complexity and variations in

00:02:10,909 --> 00:02:16,150
these applications variety in terms of

00:02:14,120 --> 00:02:19,269
languages the Platt

00:02:16,150 --> 00:02:21,400
horns and OSS that we support and being

00:02:19,269 --> 00:02:24,819
a bank the governance and compliance

00:02:21,400 --> 00:02:27,370
check through our SDLC cycle but

00:02:24,819 --> 00:02:29,849
security scanning threat modeling etc

00:02:27,370 --> 00:02:33,849
becomes extremely important

00:02:29,849 --> 00:02:35,950
so our sdlc platform like i you know as

00:02:33,849 --> 00:02:39,370
during my introduction that I mentioned

00:02:35,950 --> 00:02:43,030
is called jet night J PMC Enterprise

00:02:39,370 --> 00:02:46,180
tucci and it's a composite of you know

00:02:43,030 --> 00:02:48,909
15-plus products and solutions that are

00:02:46,180 --> 00:02:51,430
both Holger or actually homegrown vendor

00:02:48,909 --> 00:02:55,299
as well as open source solutions as well

00:02:51,430 --> 00:02:57,549
and given the size and complexity of our

00:02:55,299 --> 00:03:00,489
developer community and the volume of

00:02:57,549 --> 00:03:02,639
bills and deployments the jet platform

00:03:00,489 --> 00:03:05,739
needs to you know have large-scale

00:03:02,639 --> 00:03:08,220
enterprise grade characteristics which

00:03:05,739 --> 00:03:12,340
we refer to our tenant as roses

00:03:08,220 --> 00:03:16,750
resilient observable secure extensible

00:03:12,340 --> 00:03:18,579
and scalable so you know it's so very so

00:03:16,750 --> 00:03:20,970
it's basically for our developers the

00:03:18,579 --> 00:03:23,829
goal is they just need to be focused on

00:03:20,970 --> 00:03:25,810
writing and committing code and getting

00:03:23,829 --> 00:03:29,949
the value in the hands of our customers

00:03:25,810 --> 00:03:33,609
right the platform should just be

00:03:29,949 --> 00:03:36,250
invisible it should just work and chip

00:03:33,609 --> 00:03:38,560
is also very cloud agnostic because we

00:03:36,250 --> 00:03:40,480
are in order for us to expand and grow

00:03:38,560 --> 00:03:42,819
we want to be able to make sure we take

00:03:40,480 --> 00:03:45,099
our workloads anywhere where we wanted

00:03:42,819 --> 00:03:47,229
to be and that's why it's very important

00:03:45,099 --> 00:03:49,090
for us it's very continuous delivery and

00:03:47,229 --> 00:03:54,040
deployment becomes that much more

00:03:49,090 --> 00:03:56,379
critical for us so in the you know in

00:03:54,040 --> 00:03:58,599
the software development landscape you

00:03:56,379 --> 00:04:02,650
know continuous delivery has become

00:03:58,599 --> 00:04:05,889
paramount for success yet you know many

00:04:02,650 --> 00:04:07,889
are not realizing the benefits of you

00:04:05,889 --> 00:04:12,699
know continuous delivery and deployment

00:04:07,889 --> 00:04:15,040
the ability to deploy at any time on any

00:04:12,699 --> 00:04:16,840
supported platform is essential for

00:04:15,040 --> 00:04:20,829
developer productivity and customer

00:04:16,840 --> 00:04:23,279
centricity see although you know many of

00:04:20,829 --> 00:04:27,240
us practice some form of agile

00:04:23,279 --> 00:04:29,980
methodology you know iterative progress

00:04:27,240 --> 00:04:32,770
but often we fail up you know

00:04:29,980 --> 00:04:34,720
all prey to kind of bundling a release

00:04:32,770 --> 00:04:38,220
containing large bundle like feature

00:04:34,720 --> 00:04:41,680
changes and bug fixes into a deployment

00:04:38,220 --> 00:04:43,960
also we often believe that you know

00:04:41,680 --> 00:04:46,510
releasing small increments of value is

00:04:43,960 --> 00:04:50,470
straightforward and the use side of big

00:04:46,510 --> 00:04:53,580
roadblocks and you know and misconceived

00:04:50,470 --> 00:04:56,890
expectations right so for many companies

00:04:53,580 --> 00:05:02,620
continuous delivery means deploying 3050

00:04:56,890 --> 00:05:04,570
times a day and and for many that's not

00:05:02,620 --> 00:05:07,090
realistic or their customers especially

00:05:04,570 --> 00:05:09,780
at enterprise level customers are not

00:05:07,090 --> 00:05:13,630
willing or ready to consume new features

00:05:09,780 --> 00:05:17,680
on a daily basis but continuous delivery

00:05:13,630 --> 00:05:21,190
is what helps here because you can

00:05:17,680 --> 00:05:24,730
deploy any time and then ever you're

00:05:21,190 --> 00:05:27,370
ready for that customer value right so

00:05:24,730 --> 00:05:29,560
and I think it's in order to make sure

00:05:27,370 --> 00:05:30,460
we have a mature continuous delivery

00:05:29,560 --> 00:05:33,310
model

00:05:30,460 --> 00:05:35,470
you must have automated code and the

00:05:33,310 --> 00:05:38,470
full end-to-end automation for testing

00:05:35,470 --> 00:05:40,120
and so on which will increase your

00:05:38,470 --> 00:05:43,840
confidence of the quality of the code

00:05:40,120 --> 00:05:47,440
that's being released right so so having

00:05:43,840 --> 00:05:49,330
the continuous delivery model you know

00:05:47,440 --> 00:05:50,680
that solid leads to faster

00:05:49,330 --> 00:05:53,650
time-to-market

00:05:50,680 --> 00:05:56,320
the value that you're delivering even if

00:05:53,650 --> 00:05:59,560
it's other its daily or it's once a week

00:05:56,320 --> 00:06:01,540
or you know few times a month that value

00:05:59,560 --> 00:06:04,260
in the hands of a customer with high

00:06:01,540 --> 00:06:07,630
amount of quality high degree of quality

00:06:04,260 --> 00:06:09,520
is extremely critical for generating

00:06:07,630 --> 00:06:11,620
that customer value and then keeping

00:06:09,520 --> 00:06:14,680
that revenue base alright and also

00:06:11,620 --> 00:06:18,130
through the testing process gives you

00:06:14,680 --> 00:06:20,230
high level of confidence of what and

00:06:18,130 --> 00:06:22,540
high level of predictability of what you

00:06:20,230 --> 00:06:25,750
are delivering to customers and you get

00:06:22,540 --> 00:06:28,510
that feedback a lot sooner right and

00:06:25,750 --> 00:06:31,980
then also when you are when you are

00:06:28,510 --> 00:06:35,110
delivering value in smaller chunks and

00:06:31,980 --> 00:06:37,240
when something goes wrong which in all

00:06:35,110 --> 00:06:39,120
software deliveries you know it's you

00:06:37,240 --> 00:06:43,650
know your deployments are never perfect

00:06:39,120 --> 00:06:47,009
then it becomes easier to isolate those

00:06:43,650 --> 00:06:49,290
shoes and provide fixes a lot and

00:06:47,009 --> 00:06:52,740
provide fixes a lot sooner and extreme

00:06:49,290 --> 00:06:56,060
cases even roll back your change set

00:06:52,740 --> 00:06:59,669
right so you know earlier I mentioned

00:06:56,060 --> 00:07:03,030
that you know about the complexity and

00:06:59,669 --> 00:07:05,070
variety in our applications right the

00:07:03,030 --> 00:07:07,949
volume the large volume of applications

00:07:05,070 --> 00:07:10,860
as well as you know the complexity of

00:07:07,949 --> 00:07:12,990
the landscape of those applications so

00:07:10,860 --> 00:07:15,360
gpmc has been around for a while like

00:07:12,990 --> 00:07:18,840
for a long time and company has been

00:07:15,360 --> 00:07:21,330
pioneer in terms of providing you know

00:07:18,840 --> 00:07:23,760
applications automation for over a

00:07:21,330 --> 00:07:25,979
couple of decades in the process we have

00:07:23,760 --> 00:07:29,130
our own share of legacy monolith

00:07:25,979 --> 00:07:30,720
applications and these applications have

00:07:29,130 --> 00:07:32,220
got is got they're going through and

00:07:30,720 --> 00:07:35,340
I've gone through a modernization

00:07:32,220 --> 00:07:38,070
journey you know and we've seen a huge

00:07:35,340 --> 00:07:40,770
uptick in our adoption of continuous

00:07:38,070 --> 00:07:44,729
integration and deployment numbers right

00:07:40,770 --> 00:07:47,400
so we do a north of 80,000 bills per day

00:07:44,729 --> 00:07:50,250
and on some days we've peaked at you

00:07:47,400 --> 00:07:52,800
know 93 94 thousand bills right and our

00:07:50,250 --> 00:07:56,010
number of deployments are continuously

00:07:52,800 --> 00:08:00,240
increasing as well and what adds to the

00:07:56,010 --> 00:08:02,520
complexity of scale and which is a good

00:08:00,240 --> 00:08:04,199
thing actually in this case is as we are

00:08:02,520 --> 00:08:06,570
going through our modernization journey

00:08:04,199 --> 00:08:08,820
with our applications the monoliths are

00:08:06,570 --> 00:08:12,150
being decomposed and broken down into

00:08:08,820 --> 00:08:14,159
smaller modules or micro services which

00:08:12,150 --> 00:08:17,190
then increases a number of components in

00:08:14,159 --> 00:08:18,720
our system right and on our deployments

00:08:17,190 --> 00:08:22,560
number of deployments have more than

00:08:18,720 --> 00:08:25,740
doubled in the past couple of years so

00:08:22,560 --> 00:08:28,590
our choice of tooling is extremely

00:08:25,740 --> 00:08:30,750
critical for our success right for our

00:08:28,590 --> 00:08:31,169
scale and complexity are only going to

00:08:30,750 --> 00:08:34,709
grow

00:08:31,169 --> 00:08:38,339
and so just has standardized on

00:08:34,709 --> 00:08:41,459
spinnaker for our continuous delivery

00:08:38,339 --> 00:08:44,190
deployment right and as you can see

00:08:41,459 --> 00:08:48,029
we've actually also our cloud provider

00:08:44,190 --> 00:08:51,029
the endpoints is you know we've picked

00:08:48,029 --> 00:08:53,070
the Best of Breed cloud providers right

00:08:51,029 --> 00:08:57,660
for cloud strategy we're very early on

00:08:53,070 --> 00:09:00,270
we in the investor in our private cloud

00:08:57,660 --> 00:09:03,260
and really we are moving more towards a

00:09:00,270 --> 00:09:05,640
very policy based cloud agnostic

00:09:03,260 --> 00:09:07,560
deployment and our hands it's becomes

00:09:05,640 --> 00:09:10,530
very important for us to select a

00:09:07,560 --> 00:09:12,900
delivery or a deployment tool that's

00:09:10,530 --> 00:09:16,590
cloud agnostic as well and supports

00:09:12,900 --> 00:09:20,070
multiple clouds as well so now look

00:09:16,590 --> 00:09:23,370
let's look at why why spinnaker and how

00:09:20,070 --> 00:09:28,800
it aligns with the SDLC best practices

00:09:23,370 --> 00:09:31,530
at a PMC so I talked about the need for

00:09:28,800 --> 00:09:33,750
a cloud agnostic platform right because

00:09:31,530 --> 00:09:36,870
we want to deploy to a cloud of our

00:09:33,750 --> 00:09:39,390
choice and now in order for faster

00:09:36,870 --> 00:09:42,230
adoption of jet among you know those 50

00:09:39,390 --> 00:09:45,080
plus thousand technologists and maintain

00:09:42,230 --> 00:09:47,520
security and quality standards we

00:09:45,080 --> 00:09:50,250
recommend a set of patterns to our

00:09:47,520 --> 00:09:54,240
developers so we have what we call it a

00:09:50,250 --> 00:09:56,370
build pattern or a deployment pattern so

00:09:54,240 --> 00:09:58,590
it's critical for us to be able to

00:09:56,370 --> 00:10:01,140
manage these patterns as code because

00:09:58,590 --> 00:10:05,280
what these patterns of why now provides

00:10:01,140 --> 00:10:08,100
is and a quick easy adoption for our

00:10:05,280 --> 00:10:10,110
developers and then if need be you know

00:10:08,100 --> 00:10:12,600
then they can customize or scale beyond

00:10:10,110 --> 00:10:15,390
that all right and then so it's very

00:10:12,600 --> 00:10:18,240
critical for us to to manage these

00:10:15,390 --> 00:10:21,900
patterns as code whether it's by Yammer

00:10:18,240 --> 00:10:24,540
construct or something similar so having

00:10:21,900 --> 00:10:26,340
the capability of pipeline as code is

00:10:24,540 --> 00:10:28,740
extremely important to accelerate

00:10:26,340 --> 00:10:30,630
adoption and maintain the set of

00:10:28,740 --> 00:10:32,730
patterns and the necessary overrides

00:10:30,630 --> 00:10:34,410
because we have you know eight lines of

00:10:32,730 --> 00:10:36,600
businesses that we support that

00:10:34,410 --> 00:10:39,510
comprises of these you know 50,000

00:10:36,600 --> 00:10:42,570
technologists each one of them have a

00:10:39,510 --> 00:10:45,270
varying degree of platform support as

00:10:42,570 --> 00:10:47,820
DLC cycles we want them to keep their

00:10:45,270 --> 00:10:49,800
independence right we don't want to

00:10:47,820 --> 00:10:52,500
provide a lot of guardrails kind of that

00:10:49,800 --> 00:10:54,810
restricts their acceleration but at the

00:10:52,500 --> 00:10:57,110
same time the tool needs to make sure

00:10:54,810 --> 00:10:59,940
especially given that we are a bank

00:10:57,110 --> 00:11:03,150
provides a set of governance especially

00:10:59,940 --> 00:11:06,300
around security and compliance so that

00:11:03,150 --> 00:11:08,040
and hence the criticality of a build

00:11:06,300 --> 00:11:11,390
pattern or a deployment pattern

00:11:08,040 --> 00:11:14,050
increases now

00:11:11,390 --> 00:11:16,550
we also have a centralized policy engine

00:11:14,050 --> 00:11:19,040
there we have rules and policies for

00:11:16,550 --> 00:11:20,900
automation deployment so again at the

00:11:19,040 --> 00:11:25,100
wrong time we want to be able to make a

00:11:20,900 --> 00:11:27,620
decision on what cloud to go to based on

00:11:25,100 --> 00:11:30,620
a set of policies for example let's take

00:11:27,620 --> 00:11:33,140
a policy around capacity so so I'm an

00:11:30,620 --> 00:11:36,410
application which I'm allowed as a as a

00:11:33,140 --> 00:11:40,100
policy to deploy to a cloud provider of

00:11:36,410 --> 00:11:44,300
my choice and so today I go to a private

00:11:40,100 --> 00:11:46,580
cloud instance and now as I'm getting my

00:11:44,300 --> 00:11:50,930
performance and scale environments ready

00:11:46,580 --> 00:11:53,600
to go I am now realizing that as I don't

00:11:50,930 --> 00:11:56,300
have capacity on that to do my large

00:11:53,600 --> 00:11:58,100
scale and performance testing so based

00:11:56,300 --> 00:12:00,260
on the policy which would say okay if

00:11:58,100 --> 00:12:03,830
you hit a certain threshold on my public

00:12:00,260 --> 00:12:06,890
cloud now just take that burst to

00:12:03,830 --> 00:12:08,860
another cloud provider AWS Google order

00:12:06,890 --> 00:12:11,960
and any other cloud provider of choice

00:12:08,860 --> 00:12:14,600
right so that's one set of policies we

00:12:11,960 --> 00:12:16,190
have other policies that says ok on an

00:12:14,600 --> 00:12:19,760
application that I'm never allowed to

00:12:16,190 --> 00:12:22,520
leave my private cloud because of you

00:12:19,760 --> 00:12:25,280
know governance GDP Arkans regulatory

00:12:22,520 --> 00:12:27,980
concerns or variety of other govern

00:12:25,280 --> 00:12:30,920
governance factors and so those are all

00:12:27,980 --> 00:12:33,260
the policies that I can actually make

00:12:30,920 --> 00:12:34,700
decisions to deploy at runtime I don't

00:12:33,260 --> 00:12:36,770
need to worry about that during my

00:12:34,700 --> 00:12:38,950
blueprint I don't need to worry about

00:12:36,770 --> 00:12:42,440
that during when I'm running my test

00:12:38,950 --> 00:12:44,150
work clothes or my end-to-end test scale

00:12:42,440 --> 00:12:46,610
performance tests or any of that but at

00:12:44,150 --> 00:12:48,740
the time and I'm ready to deploy is when

00:12:46,610 --> 00:12:51,800
I make those deployment decisions so

00:12:48,740 --> 00:12:55,070
having that policy engine associated

00:12:51,800 --> 00:12:58,330
with your deployment tool and and and

00:12:55,070 --> 00:13:01,670
with with the richness of policy as code

00:12:58,330 --> 00:13:03,680
gives gives makes spinnaker an extremely

00:13:01,670 --> 00:13:06,350
attractive tool of choice all right and

00:13:03,680 --> 00:13:08,420
of course the multi cloud support as

00:13:06,350 --> 00:13:12,230
well and because of that multi cloud

00:13:08,420 --> 00:13:14,330
support it avoids JPM C from having a

00:13:12,230 --> 00:13:17,240
single vendor locket you know it's what

00:13:14,330 --> 00:13:20,060
gives us the upper hand in it and of

00:13:17,240 --> 00:13:22,700
course you know and more and more offers

00:13:20,060 --> 00:13:24,890
you know available high availability has

00:13:22,700 --> 00:13:25,340
become extremely critical even with

00:13:24,890 --> 00:13:28,400
entropy

00:13:25,340 --> 00:13:30,770
great solutions availability and uptime

00:13:28,400 --> 00:13:32,330
is measured - you know some of the

00:13:30,770 --> 00:13:34,190
consumer solutions out there like you

00:13:32,330 --> 00:13:37,130
know the linkedin's in the facebook and

00:13:34,190 --> 00:13:39,770
you know google's of the world right so

00:13:37,130 --> 00:13:44,480
and so it's very important for

00:13:39,770 --> 00:13:46,310
enterprise solutions to also have when

00:13:44,480 --> 00:13:49,550
you're doing upgrades or deployments

00:13:46,310 --> 00:13:53,030
have zero downtime on deployments so

00:13:49,550 --> 00:13:54,770
having blue green deployments is it is

00:13:53,030 --> 00:13:56,660
great that you can have your existing

00:13:54,770 --> 00:13:58,940
deployment as well as your new

00:13:56,660 --> 00:14:02,510
deployment until you're good to go to

00:13:58,940 --> 00:14:05,410
turn it on gives us reduces our downtime

00:14:02,510 --> 00:14:09,230
significantly right and also having

00:14:05,410 --> 00:14:11,060
canary support you know with with the

00:14:09,230 --> 00:14:13,550
combination of feature toggles and

00:14:11,060 --> 00:14:16,280
having that cannery analysis and that

00:14:13,550 --> 00:14:18,230
full automation to say okay when your

00:14:16,280 --> 00:14:20,750
analysis says you know everything is

00:14:18,230 --> 00:14:23,840
good to go either now you know deploy

00:14:20,750 --> 00:14:26,330
your code to additional nodes or if the

00:14:23,840 --> 00:14:27,530
analysis and your metrics says things

00:14:26,330 --> 00:14:30,860
are not going well come either

00:14:27,530 --> 00:14:33,680
completely rollback or keep your or keep

00:14:30,860 --> 00:14:36,950
keep those changes to those smaller set

00:14:33,680 --> 00:14:40,130
of specified nodes and then we've been

00:14:36,950 --> 00:14:43,130
looking at cayenne tab as well and it's

00:14:40,130 --> 00:14:46,280
mean it looks quite promising for us to

00:14:43,130 --> 00:14:47,870
start using those as well right and

00:14:46,280 --> 00:14:50,510
single pane of glass and I'm sure many

00:14:47,870 --> 00:14:52,730
developers will will say the single pane

00:14:50,510 --> 00:14:54,080
of glass context switching is one of the

00:14:52,730 --> 00:14:57,680
things that kills developer productivity

00:14:54,080 --> 00:15:00,350
and it's true you know with 40,000

00:14:57,680 --> 00:15:06,020
developers it is true right so one of my

00:15:00,350 --> 00:15:08,690
big ok ours is how can I eliminate that

00:15:06,020 --> 00:15:10,610
you know reduce that amount of context

00:15:08,690 --> 00:15:12,530
switching that happens and with a rich

00:15:10,610 --> 00:15:14,870
API support and a single pane of glass

00:15:12,530 --> 00:15:17,330
that spinnaker provides helps us

00:15:14,870 --> 00:15:20,000
actually use that into what we call it

00:15:17,330 --> 00:15:21,740
the jet console and all the richness of

00:15:20,000 --> 00:15:24,830
that you know single view of all your

00:15:21,740 --> 00:15:26,570
pipeline of your canary analysis where

00:15:24,830 --> 00:15:28,550
you are with your deployment what got

00:15:26,570 --> 00:15:30,350
deployed what got rolled back all of

00:15:28,550 --> 00:15:33,560
that goodness into that single pane of

00:15:30,350 --> 00:15:36,080
glass the jet console is extremely rich

00:15:33,560 --> 00:15:39,230
and of course the last is you know how

00:15:36,080 --> 00:15:39,490
in those very industry aligned you know

00:15:39,230 --> 00:15:41,560
it's

00:15:39,490 --> 00:15:44,770
a huge open source footprint but large

00:15:41,560 --> 00:15:48,399
contributions from the community right

00:15:44,770 --> 00:15:52,300
and also about spinnaker and JP MC are

00:15:48,399 --> 00:15:54,520
both part of the you know the continuous

00:15:52,300 --> 00:15:55,990
delivery foundation so that's our

00:15:54,520 --> 00:15:58,870
journey on continuous delivery and

00:15:55,990 --> 00:16:10,450
deployment with that I'll open it up for

00:15:58,870 --> 00:16:11,529
any questions yeah I can help you with

00:16:10,450 --> 00:16:14,680
the questions

00:16:11,529 --> 00:16:17,230
I'm sorry son Jeb I'm off my okay here's

00:16:14,680 --> 00:16:19,300
one so do you have any examples which we

00:16:17,230 --> 00:16:21,970
can see on how you have set up the

00:16:19,300 --> 00:16:24,010
spinnaker pipelines I'm not sure that

00:16:21,970 --> 00:16:27,610
that you'll be able to share that in

00:16:24,010 --> 00:16:31,990
this call but I'll let you answer yeah

00:16:27,610 --> 00:16:35,110
so no I don't have any examples for that

00:16:31,990 --> 00:16:38,080
for the in this call and this is

00:16:35,110 --> 00:16:40,390
something that we may release it as a as

00:16:38,080 --> 00:16:43,959
a white paper or probably in in a

00:16:40,390 --> 00:16:46,930
different in a different talk gotcha so

00:16:43,959 --> 00:16:49,149
yeah we look forward to seeing some of

00:16:46,930 --> 00:16:51,760
that download down the road in the

00:16:49,149 --> 00:16:54,820
community can you share a bit more about

00:16:51,760 --> 00:16:57,910
J PMC's strategy to be cloud vendor

00:16:54,820 --> 00:16:59,529
neutral it says in the past I T always

00:16:57,910 --> 00:17:02,529
pushed for singer single vendor

00:16:59,529 --> 00:17:05,559
solutions so what's driving this cloud

00:17:02,529 --> 00:17:09,100
neutrality initiative that's a great

00:17:05,559 --> 00:17:11,290
question definitely number one is you

00:17:09,100 --> 00:17:14,140
know you know to avoid vendor locking

00:17:11,290 --> 00:17:18,040
alright that's one and then second is

00:17:14,140 --> 00:17:21,130
each of the cloud providers in certain

00:17:18,040 --> 00:17:23,260
very in certain niche areas are superior

00:17:21,130 --> 00:17:26,170
than others right so we want to be able

00:17:23,260 --> 00:17:30,040
to make use of the Best of Breed for say

00:17:26,170 --> 00:17:31,630
analytics if you know and then there you

00:17:30,040 --> 00:17:34,450
know there are few other examples that I

00:17:31,630 --> 00:17:36,370
can think of in terms of scale and very

00:17:34,450 --> 00:17:38,230
niche areas that you know each

00:17:36,370 --> 00:17:40,809
individual cloud provider so we want to

00:17:38,230 --> 00:17:42,940
be able to tap into the best of lead for

00:17:40,809 --> 00:17:46,090
those so that's why it's also critical

00:17:42,940 --> 00:17:48,250
that all our solutions including our IT

00:17:46,090 --> 00:17:50,470
has been as we know gonna be very one of

00:17:48,250 --> 00:17:53,260
the early adopters of private cloud and

00:17:50,470 --> 00:17:56,170
now the accelerating our journey

00:17:53,260 --> 00:17:58,810
to public hog this year include you know

00:17:56,170 --> 00:18:01,710
you know great acceleration this year

00:17:58,810 --> 00:18:04,990
and we want to be able to make sure we

00:18:01,710 --> 00:18:07,990
pick and choose the provider that gives

00:18:04,990 --> 00:18:12,610
us that best outcome in the niche areas

00:18:07,990 --> 00:18:14,170
that we venture into make sense the

00:18:12,610 --> 00:18:16,090
other question which I think you sort of

00:18:14,170 --> 00:18:17,980
touched on was any plans to contribute

00:18:16,090 --> 00:18:21,220
the knowledge contribute knowledge to

00:18:17,980 --> 00:18:22,510
the spinnaker io community so open

00:18:21,220 --> 00:18:28,330
source contributions are those on the

00:18:22,510 --> 00:18:30,460
table at JP NC a proponent of open

00:18:28,330 --> 00:18:32,980
source so you will see lot more

00:18:30,460 --> 00:18:35,080
contributions from us we have open

00:18:32,980 --> 00:18:38,110
source projects around you know we have

00:18:35,080 --> 00:18:40,120
sent thorny and on change sets or just

00:18:38,110 --> 00:18:42,550
even outside of just vinegar but

00:18:40,120 --> 00:18:44,470
definitely would they complete the large

00:18:42,550 --> 00:18:46,990
customer base in the volume that we will

00:18:44,470 --> 00:18:49,170
have and we have our own homegrown

00:18:46,990 --> 00:18:51,400
development that's happening on top of

00:18:49,170 --> 00:18:56,650
spinnaker which we plan to contribute

00:18:51,400 --> 00:18:58,150
back to the community awesome that that

00:18:56,650 --> 00:18:59,950
makes it hard for me not to do a

00:18:58,150 --> 00:19:01,450
shameless plug if there are JP MC

00:18:59,950 --> 00:19:03,250
engineers on the call we'd love to see

00:19:01,450 --> 00:19:06,280
you join us for spinnaker gardening days

00:19:03,250 --> 00:19:09,010
which is our spinnaker hackathon 2.0 is

00:19:06,280 --> 00:19:10,960
coming up on July 16th and we'd love to

00:19:09,010 --> 00:19:12,730
see you as part of the community thank

00:19:10,960 --> 00:19:15,790
you so much Sandia for sharing that with

00:19:12,730 --> 00:19:17,350
us such a great great and polished

00:19:15,790 --> 00:19:19,270
presentation about what what you're

00:19:17,350 --> 00:19:21,750
doing with spinnaker at scale it's

00:19:19,270 --> 00:19:21,750
awesome

00:19:30,400 --> 00:19:32,460

YouTube URL: https://www.youtube.com/watch?v=64rhl9sxhSQ


