Title: Brandon Leach & Paul Roberts @ Spinnaker.Live: Autodesk's Cloud Automation with Spinnaker and AWS
Publication date: 2020-06-18
Playlist: Spinnaker.Live 2020
Description: 
	At Autodesk we are in the process of upgrading our internal cloud automation platform with Armory Spinnaker.  We talk though how we came to this decision, introduce the declarative interface we have implemented for Spinnaker and announce our new collaboration with AWS to add new capabilities to Spinnaker.
Captions: 
	00:00:06,190 --> 00:00:10,090
hello everyone thanks for joining my

00:00:08,710 --> 00:00:11,980
name is Brandon Leach and I'm a software

00:00:10,090 --> 00:00:13,570
uh protected on desk and I'm joined by

00:00:11,980 --> 00:00:16,599
Paul Roberts who's a solution architect

00:00:13,570 --> 00:00:18,160
at AWS today I'm going to be talking

00:00:16,599 --> 00:00:20,590
about how we're using spinnaker at

00:00:18,160 --> 00:00:22,539
Autodesk a bit about how we decided to

00:00:20,590 --> 00:00:23,949
use spinnaker and I'm also going to talk

00:00:22,539 --> 00:00:25,720
about a new declarative get-ups

00:00:23,949 --> 00:00:27,849
interface Autodesk is building for

00:00:25,720 --> 00:00:29,800
spinnaker and then Paul is going to

00:00:27,849 --> 00:00:33,570
share some new spinnaker projects AWS

00:00:29,800 --> 00:00:34,890
and out of that start collaborating on

00:00:33,570 --> 00:00:37,440
so first

00:00:34,890 --> 00:00:39,629
a little bit about Autodesk we make

00:00:37,440 --> 00:00:41,760
software for people who make things you

00:00:39,629 --> 00:00:43,650
know we're the global a global leader in

00:00:41,760 --> 00:00:45,540
design and make software for the

00:00:43,650 --> 00:00:47,160
architecture engineering construction

00:00:45,540 --> 00:00:49,829
entertainment in manufacturing

00:00:47,160 --> 00:00:52,320
industries if you've ever really driven

00:00:49,829 --> 00:00:53,970
a high-performance car Myer disguise or

00:00:52,320 --> 00:00:54,570
used a smartphone or watched a great

00:00:53,970 --> 00:00:57,019
film

00:00:54,570 --> 00:01:01,860
chances are you millions on earnest

00:00:57,019 --> 00:01:04,229
building with our software and here's a

00:01:01,860 --> 00:01:06,210
small example like a bottom edit product

00:01:04,229 --> 00:01:08,250
you may have heard of there many more

00:01:06,210 --> 00:01:09,810
this is just a small sample but uh you

00:01:08,250 --> 00:01:12,420
know AutoCAD I'm sure most of you have

00:01:09,810 --> 00:01:13,979
heard of this one I this is the first

00:01:12,420 --> 00:01:17,729
auto best product that I ever used back

00:01:13,979 --> 00:01:20,039
in 2000 it's a used by architects

00:01:17,729 --> 00:01:22,440
engineers construction professionals to

00:01:20,039 --> 00:01:24,750
create you know 2d and 3d drawings

00:01:22,440 --> 00:01:26,910
there's fusion 360 which is a

00:01:24,750 --> 00:01:29,070
cloud-based like CAD cam tool for

00:01:26,910 --> 00:01:30,840
collaboration or on for collaborative

00:01:29,070 --> 00:01:33,750
product development the combines

00:01:30,840 --> 00:01:35,820
industry industrial design mechanical

00:01:33,750 --> 00:01:37,580
engineering simulation and machine tool

00:01:35,820 --> 00:01:39,350
programming

00:01:37,580 --> 00:01:41,150
and then like then 360 and Revit are

00:01:39,350 --> 00:01:44,150
used for designing collaborating and

00:01:41,150 --> 00:01:47,640
like around making constructed things

00:01:44,150 --> 00:01:50,190
like buildings bridges roads etc

00:01:47,640 --> 00:01:52,350
and then there's like 3d at 3ds Max and

00:01:50,190 --> 00:01:54,630
Maya which are used for like 3d computer

00:01:52,350 --> 00:01:58,619
animation modeling simulation and

00:01:54,630 --> 00:02:01,260
rendering theory that I work in is

00:01:58,619 --> 00:02:04,920
called Forge forges Autodesk cloud

00:02:01,260 --> 00:02:06,720
development platform you know the forge

00:02:04,920 --> 00:02:08,940
platform is a set of work web service

00:02:06,720 --> 00:02:10,380
API is that allows our users to tap it

00:02:08,940 --> 00:02:12,209
to their design and engineering data

00:02:10,380 --> 00:02:14,430
that they use to automate processes

00:02:12,209 --> 00:02:16,819
connect teams and workflows and

00:02:14,430 --> 00:02:18,920
visualize data

00:02:16,819 --> 00:02:21,290
there's like an internal unless external

00:02:18,920 --> 00:02:23,659
aspect of forge like mini aspect many

00:02:21,290 --> 00:02:26,000
Autodesk products are built using forges

00:02:23,659 --> 00:02:27,650
internal api's and services and then

00:02:26,000 --> 00:02:30,519
there are api's that we exposed to our

00:02:27,650 --> 00:02:30,519
external customers

00:02:31,819 --> 00:02:35,540
customers use Forge to integrate the

00:02:33,409 --> 00:02:37,549
product there are integrate their

00:02:35,540 --> 00:02:40,340
products into our own German environment

00:02:37,549 --> 00:02:42,170
by typical gated by grabbing translating

00:02:40,340 --> 00:02:45,019
presenting data from art from our

00:02:42,170 --> 00:02:47,150
applications some examples of this are

00:02:45,019 --> 00:02:48,980
like data management right accessing and

00:02:47,150 --> 00:02:52,549
managing files and data and Autodesk

00:02:48,980 --> 00:02:54,650
cloud storage or design automation right

00:02:52,549 --> 00:02:56,450
the design on the main API allows you to

00:02:54,650 --> 00:02:58,430
access automation capabilities of

00:02:56,450 --> 00:03:00,680
Autodesk core products as cloud services

00:02:58,430 --> 00:03:02,239
so any tasks that you can automate on

00:03:00,680 --> 00:03:04,400
your desktop application can now be

00:03:02,239 --> 00:03:07,879
automated at scale using the design

00:03:04,400 --> 00:03:10,250
automation API model dilute model

00:03:07,879 --> 00:03:12,199
derivatives and viewer these allow you

00:03:10,250 --> 00:03:15,019
to like extract data and convert between

00:03:12,199 --> 00:03:16,760
two and 2d and 3d models you know

00:03:15,019 --> 00:03:19,069
there's there's a lot of different file

00:03:16,760 --> 00:03:21,980
formats across our industry and our

00:03:19,069 --> 00:03:25,180
products and forge provides a service to

00:03:21,980 --> 00:03:28,720
convert and view all these file formats

00:03:25,180 --> 00:03:30,970
across platforms

00:03:28,720 --> 00:03:33,490
reality capture right there you can

00:03:30,970 --> 00:03:35,950
create 3d models textured message meshes

00:03:33,490 --> 00:03:38,920
point clouds ortho photos from your

00:03:35,950 --> 00:03:41,500
drone laser scans or handheld camera

00:03:38,920 --> 00:03:42,850
photos here's a link to some of the

00:03:41,500 --> 00:03:46,170
amazing things our customers have built

00:03:42,850 --> 00:03:46,170
with forge it's really impressive

00:03:47,030 --> 00:03:54,360
so this platform is is powered by a very

00:03:50,340 --> 00:03:55,920
large cloud presence in AWS and then the

00:03:54,360 --> 00:03:56,690
deployment management of these cloud

00:03:55,920 --> 00:03:59,100
services

00:03:56,690 --> 00:04:02,460
that power for Janata desk is very

00:03:59,100 --> 00:04:04,080
important for our operations the team

00:04:02,460 --> 00:04:06,180
that I work with builds the internal

00:04:04,080 --> 00:04:09,360
tools and automation engineers and Forge

00:04:06,180 --> 00:04:11,610
and Autodesk as a whole used to create

00:04:09,360 --> 00:04:16,079
service manage deployments and operate

00:04:11,610 --> 00:04:17,970
their cloud services inter spinnaker

00:04:16,079 --> 00:04:19,919
you know recently we made the decision

00:04:17,970 --> 00:04:21,629
in Forge to replace multiple sets in

00:04:19,919 --> 00:04:24,079
in-house deployment tooling with

00:04:21,629 --> 00:04:24,079
spinnaker

00:04:24,380 --> 00:04:28,110
one of the main reasons we decided to

00:04:26,700 --> 00:04:29,490
make this move was the size and the

00:04:28,110 --> 00:04:31,980
strength of the spinnaker community

00:04:29,490 --> 00:04:33,660
itself you know the spinnaker community

00:04:31,980 --> 00:04:35,790
has become really strong in recent years

00:04:33,660 --> 00:04:38,640
and it's quickly becoming an industry

00:04:35,790 --> 00:04:40,200
standard open-source CD platform you

00:04:38,640 --> 00:04:42,180
know it also really caught our eye the

00:04:40,200 --> 00:04:44,190
the major cloud providers or

00:04:42,180 --> 00:04:45,660
contributing to spinnaker you know this

00:04:44,190 --> 00:04:48,860
provides a certain amount of safety and

00:04:45,660 --> 00:04:48,860
longevity to this decision

00:04:49,900 --> 00:04:53,470
another main reason we decided to use

00:04:52,100 --> 00:04:56,210
spinnaker is like the elegant

00:04:53,470 --> 00:04:57,710
abstraction it provides between your

00:04:56,210 --> 00:05:01,430
deployment logic and the underlining

00:04:57,710 --> 00:05:03,350
reference runtime there are many levels

00:05:01,430 --> 00:05:05,090
of abstraction engine you can implement

00:05:03,350 --> 00:05:07,760
between an engineer writing code and

00:05:05,090 --> 00:05:09,230
underlining cloud primitives and like

00:05:07,760 --> 00:05:10,820
where and how you implement these

00:05:09,230 --> 00:05:12,920
abstractions is key to operating

00:05:10,820 --> 00:05:15,950
efficiency efficiency also having

00:05:12,920 --> 00:05:17,330
flexibility you know this is a powerful

00:05:15,950 --> 00:05:19,490
abstraction because it allows you the

00:05:17,330 --> 00:05:20,810
flexibility to adopt and experiment with

00:05:19,490 --> 00:05:23,720
different reference runtimes

00:05:20,810 --> 00:05:25,700
without having to read platform you know

00:05:23,720 --> 00:05:27,740
decisions around these runtimes are

00:05:25,700 --> 00:05:30,440
highly strategic like for instance the

00:05:27,740 --> 00:05:32,930
decision to use kubernetes AWS as your

00:05:30,440 --> 00:05:34,430
DCP order they're just decision to use

00:05:32,930 --> 00:05:35,849
multiple different providers at the same

00:05:34,430 --> 00:05:37,169
time

00:05:35,849 --> 00:05:38,939
this abstraction allows you the

00:05:37,169 --> 00:05:40,649
flexibility to make these decisions and

00:05:38,939 --> 00:05:42,899
pivot without the burden that had to

00:05:40,649 --> 00:05:45,740
change your deployment platforms or your

00:05:42,899 --> 00:05:45,740
user experience

00:05:46,460 --> 00:05:53,750
in forge we we utilize ec2 we utilize

00:05:50,750 --> 00:05:55,759
ec2 provider for being workloads ECS for

00:05:53,750 --> 00:05:59,800
containerized services and land

00:05:55,759 --> 00:05:59,800
reference services service applications

00:06:01,290 --> 00:06:06,100
so the application definition files you

00:06:04,960 --> 00:06:07,810
know one of the patterns that we took

00:06:06,100 --> 00:06:09,640
for one of our existing tooling our

00:06:07,810 --> 00:06:11,140
existing sets of tooling was a

00:06:09,640 --> 00:06:13,420
declarative interface called an

00:06:11,140 --> 00:06:16,630
application definition file or ADF for

00:06:13,420 --> 00:06:19,720
short which allows our users our

00:06:16,630 --> 00:06:22,660
customers get-ups workflow for managing

00:06:19,720 --> 00:06:24,700
all aspects of their services you know

00:06:22,660 --> 00:06:26,350
when we began implementing spinnaker we

00:06:24,700 --> 00:06:28,030
decided it is important that we allow

00:06:26,350 --> 00:06:30,220
for the management of all service

00:06:28,030 --> 00:06:31,540
components in the idea this includes

00:06:30,220 --> 00:06:33,810
everything like observability

00:06:31,540 --> 00:06:36,430
infrastructure deployment pipelines etc

00:06:33,810 --> 00:06:38,500
you know we sought to eliminate the toil

00:06:36,430 --> 00:06:40,780
of our internal customers having to

00:06:38,500 --> 00:06:43,240
design their own release processes

00:06:40,780 --> 00:06:45,490
processes and pipelines you know I've

00:06:43,240 --> 00:06:47,500
seen this before with spinnaker in my

00:06:45,490 --> 00:06:49,240
previous company where we had many

00:06:47,500 --> 00:06:52,150
different pipelines to designs which

00:06:49,240 --> 00:06:54,220
effectively did the same thing this

00:06:52,150 --> 00:06:56,230
makes it really difficult to release new

00:06:54,220 --> 00:06:57,880
spinnaker capabilities and have been

00:06:56,230 --> 00:07:00,070
easily adopted by your customers because

00:06:57,880 --> 00:07:01,780
each customer has to figure out how to

00:07:00,070 --> 00:07:05,020
fit the new features into their own

00:07:01,780 --> 00:07:07,000
implementation right so instead we

00:07:05,020 --> 00:07:09,280
decided to build like upon like

00:07:07,000 --> 00:07:12,190
predefined best practice pipelines and

00:07:09,280 --> 00:07:15,400
infrastructure configurations and also

00:07:12,190 --> 00:07:17,050
offer like some limited extensibility to

00:07:15,400 --> 00:07:20,590
allow our customers or customers to

00:07:17,050 --> 00:07:22,240
customize as they see fit another

00:07:20,590 --> 00:07:24,250
problem that we sought to tackle with

00:07:22,240 --> 00:07:25,720
the ADF was allowing our customers to

00:07:24,250 --> 00:07:27,280
manage their data stores and other

00:07:25,720 --> 00:07:28,630
supporting infrastructure within the

00:07:27,280 --> 00:07:31,510
context of their service deployment

00:07:28,630 --> 00:07:33,520
spinnaker right this this gives our

00:07:31,510 --> 00:07:36,010
users the same interface to manage

00:07:33,520 --> 00:07:38,650
databases load balancers security groups

00:07:36,010 --> 00:07:40,190
I and etc along with their application

00:07:38,650 --> 00:07:42,250
to play

00:07:40,190 --> 00:07:42,250
you

00:07:43,100 --> 00:07:48,320
so let's look at a very simple example

00:07:44,900 --> 00:07:50,120
ATF right it has three main sections and

00:07:48,320 --> 00:07:51,860
generally it's worth noting that the ATF

00:07:50,120 --> 00:07:55,030
generally resides within the service

00:07:51,860 --> 00:07:55,030
code repository itself

00:07:57,550 --> 00:08:01,540
so the first part service configuration

00:07:59,310 --> 00:08:03,010
right this is where you declare your

00:08:01,540 --> 00:08:05,170
environment specific service

00:08:03,010 --> 00:08:06,940
configuration you know these are values

00:08:05,170 --> 00:08:08,710
that are used to hydrate a template that

00:08:06,940 --> 00:08:10,920
are then unloaded by your application at

00:08:08,710 --> 00:08:10,920
runtime

00:08:11,729 --> 00:08:16,559
and prep our infrastructure this

00:08:14,969 --> 00:08:17,969
contains the environment and region

00:08:16,559 --> 00:08:19,559
infrastructure definitions for the

00:08:17,969 --> 00:08:21,659
application right it can contain things

00:08:19,559 --> 00:08:24,270
like AM security groups load balancers

00:08:21,659 --> 00:08:26,849
databases basically anything that can be

00:08:24,270 --> 00:08:28,139
managed with terraform it's worth noting

00:08:26,849 --> 00:08:30,059
that these values and we'll get into

00:08:28,139 --> 00:08:32,579
this a little bit more later but these

00:08:30,059 --> 00:08:34,800
values are essentially ter terraform TF

00:08:32,579 --> 00:08:36,539
bars with references to the module

00:08:34,800 --> 00:08:39,139
modules for which they're used supposed

00:08:36,539 --> 00:08:39,139
to be used with

00:08:40,510 --> 00:08:46,240
so yeah all the examples I'm using here

00:08:43,610 --> 00:08:50,390
in the ATF or for VM or ec2 pipelines so

00:08:46,240 --> 00:08:52,400
this section the ec2 part contains all

00:08:50,390 --> 00:08:55,150
of the stuff needed by Packer and the

00:08:52,400 --> 00:08:58,970
big step your pipeline

00:08:55,150 --> 00:09:01,040
and then pipeline cycle right this

00:08:58,970 --> 00:09:02,900
contains the release requirements for

00:09:01,040 --> 00:09:04,640
your services that are fed into a

00:09:02,900 --> 00:09:06,339
pipeline template and use to create your

00:09:04,640 --> 00:09:08,060
spinnaker pipeline

00:09:06,339 --> 00:09:09,680
you

00:09:08,060 --> 00:09:11,660
so it's a little deeper into pipeline

00:09:09,680 --> 00:09:14,330
channel and some of the extensibility it

00:09:11,660 --> 00:09:15,920
offers right you know the file this file

00:09:14,330 --> 00:09:18,940
contains all the requirements for the

00:09:15,920 --> 00:09:18,940
service release process

00:09:19,779 --> 00:09:23,410
so triggers here's where you can

00:09:21,699 --> 00:09:25,600
configure specifically how your

00:09:23,410 --> 00:09:27,970
spinnaker pipeline is triggered in this

00:09:25,600 --> 00:09:29,800
example the services is configured to be

00:09:27,970 --> 00:09:32,910
triggered from a specific Jenkins job on

00:09:29,800 --> 00:09:32,910
a specific Jenkins server

00:09:33,100 --> 00:09:37,450
you know notifications you can configure

00:09:35,590 --> 00:09:39,040
we're spinnaker we'll send all the

00:09:37,450 --> 00:09:40,690
messages related to your deployment

00:09:39,040 --> 00:09:46,240
status right now you know we support

00:09:40,690 --> 00:09:47,890
slack and email notifications time so

00:09:46,240 --> 00:09:50,650
this is important we have a pipeline

00:09:47,890 --> 00:09:53,530
template a reference pipeline template

00:09:50,650 --> 00:09:55,180
for each runtime so there's an ADF

00:09:53,530 --> 00:09:57,640
interface and a pipeline template for

00:09:55,180 --> 00:10:00,190
front-end applications ec2 applications

00:09:57,640 --> 00:10:04,960
ECS container applications and lando

00:10:00,190 --> 00:10:06,610
service service applications so you

00:10:04,960 --> 00:10:09,190
specify the environment to which you

00:10:06,610 --> 00:10:10,720
want your service deployed and right so

00:10:09,190 --> 00:10:11,830
this is the environments that you put

00:10:10,720 --> 00:10:13,150
here this is where your service is

00:10:11,830 --> 00:10:14,800
actually deployed in this case it's

00:10:13,150 --> 00:10:17,080
deployed dev stage in production

00:10:14,800 --> 00:10:19,090
environments and the stages are rendered

00:10:17,080 --> 00:10:24,730
in the pipeline and the sequential order

00:10:19,090 --> 00:10:26,470
that they appear in the file so regions

00:10:24,730 --> 00:10:28,060
for each environment you can specify the

00:10:26,470 --> 00:10:29,680
region your service needs to be deployed

00:10:28,060 --> 00:10:32,050
so as you can see here in development

00:10:29,680 --> 00:10:33,760
it's only deployed in one region but

00:10:32,050 --> 00:10:38,070
then staging and production environments

00:10:33,760 --> 00:10:38,070
are actually deployed in two regions

00:10:38,580 --> 00:10:43,540
region sequencing is a feature we just

00:10:41,800 --> 00:10:45,190
added that allows you to decide on a

00:10:43,540 --> 00:10:47,440
multi of region deployment strategy you

00:10:45,190 --> 00:10:50,830
want to use so currently we support two

00:10:47,440 --> 00:10:52,450
options like serial is where each region

00:10:50,830 --> 00:10:55,270
is deployed in the order that appears in

00:10:52,450 --> 00:10:57,920
the mo and then parallel where all

00:10:55,270 --> 00:10:59,980
regions are deployed at the same time

00:10:57,920 --> 00:10:59,980
you

00:11:00,910 --> 00:11:04,510
so you can also decide on two other

00:11:03,040 --> 00:11:07,890
things that you want to activate in your

00:11:04,510 --> 00:11:07,890
pipeline right so like here

00:11:08,620 --> 00:11:12,550
it specifies that they want manual

00:11:10,870 --> 00:11:14,770
approvals rendered into the pipe into

00:11:12,550 --> 00:11:16,630
the each stage in the pipeline you know

00:11:14,770 --> 00:11:18,130
this is a simple simple example that

00:11:16,630 --> 00:11:19,660
uses manual approvals but there's other

00:11:18,130 --> 00:11:22,180
optional stages that can be activated

00:11:19,660 --> 00:11:23,740
like testing stages to run like Jenkins

00:11:22,180 --> 00:11:27,600
jobs or a testing container or

00:11:23,740 --> 00:11:27,600
deployment strategies like Canaries

00:11:29,760 --> 00:11:33,430
you know into order and in order to

00:11:31,960 --> 00:11:35,830
automate this process we've built a

00:11:33,430 --> 00:11:37,870
Python application which consumes an ADF

00:11:35,830 --> 00:11:39,730
right and then renders they needed

00:11:37,870 --> 00:11:40,890
terraform files and spinnaker pipeline

00:11:39,730 --> 00:11:44,500
needed to deploy the application

00:11:40,890 --> 00:11:45,970
infrastructure the yam all that comes

00:11:44,500 --> 00:11:48,940
out of the infrastructure section of the

00:11:45,970 --> 00:11:51,100
ADF is turned into TF bars which are

00:11:48,940 --> 00:11:53,110
then base64 encoded and rendered into

00:11:51,100 --> 00:11:55,000
the spinnaker pipelines this artefacts

00:11:53,110 --> 00:11:58,589
along with the reference to the tariffs

00:11:55,000 --> 00:11:58,589
or modules for which consumes them

00:11:58,740 --> 00:12:03,250
here's an example of an ec2 service

00:12:01,150 --> 00:12:04,000
which has been rendered by skipper from

00:12:03,250 --> 00:12:06,730
an ADF

00:12:04,000 --> 00:12:09,190
you know in the artifact section you can

00:12:06,730 --> 00:12:10,960
see the base64 encoded TF bars which

00:12:09,190 --> 00:12:12,790
came from the ADF along with a reference

00:12:10,960 --> 00:12:15,520
to the terraformed bottom a module will

00:12:12,790 --> 00:12:17,860
be used with as you can see there's an

00:12:15,520 --> 00:12:20,380
applied infrastructure stage before the

00:12:17,860 --> 00:12:24,010
deployment stage this is a special stage

00:12:20,380 --> 00:12:25,779
type called terraformer terraformer was

00:12:24,010 --> 00:12:27,850
provided by our spinnaker vendor armory

00:12:25,779 --> 00:12:29,589
which allows you to automate the

00:12:27,850 --> 00:12:32,620
planning approval and execution of

00:12:29,589 --> 00:12:34,120
terraform in spinnaker pipelines and it

00:12:32,620 --> 00:12:37,570
has a really nice integration with the

00:12:34,120 --> 00:12:39,370
UI so like here you can see the

00:12:37,570 --> 00:12:41,680
terraform stages downloading the modules

00:12:39,370 --> 00:12:44,980
needed hydrating them with TF farms and

00:12:41,680 --> 00:12:46,360
then the pipe and TF bars from the

00:12:44,980 --> 00:12:49,420
pipeline and then creating all the

00:12:46,360 --> 00:12:50,860
infrastructure the AO be the s3 bucket

00:12:49,420 --> 00:12:51,720
the security groups needed for the

00:12:50,860 --> 00:12:53,980
application

00:12:51,720 --> 00:12:55,450
you know terraformers some really neat

00:12:53,980 --> 00:12:56,890
features like it'll do a terraform plan

00:12:55,450 --> 00:12:59,589
and there's no changes that were just

00:12:56,890 --> 00:13:02,290
passed the stage or there are changes in

00:12:59,589 --> 00:13:04,390
the TF plan it you can configure it to

00:13:02,290 --> 00:13:07,440
wait for approval before configure it

00:13:04,390 --> 00:13:07,440
before executing

00:13:08,040 --> 00:13:13,030
so skipper uses a data templating

00:13:11,410 --> 00:13:14,800
language called a sonnet to render the

00:13:13,030 --> 00:13:16,510
pipeline and load the rendered pipeline

00:13:14,800 --> 00:13:18,700
into spinnaker and then triggers the

00:13:16,510 --> 00:13:21,730
pipeline you know J Sonic came out of

00:13:18,700 --> 00:13:23,200
Google it's like a simple extension of

00:13:21,730 --> 00:13:24,760
JSON that allows for things like

00:13:23,200 --> 00:13:28,450
variables functions conditionals

00:13:24,760 --> 00:13:30,970
arithmetic etc so yeah we've just

00:13:28,450 --> 00:13:32,920
completed our first iteration of the ATS

00:13:30,970 --> 00:13:35,350
with skipper and we're in the process of

00:13:32,920 --> 00:13:37,420
bombarding customers at Autodesk I'm

00:13:35,350 --> 00:13:39,280
super excited about this project the

00:13:37,420 --> 00:13:42,480
team who has done a really amazing job

00:13:39,280 --> 00:13:42,480
who has implemented this

00:13:42,970 --> 00:13:46,930
so now I'm gonna change gears a little

00:13:44,680 --> 00:13:48,399
bit you know we realized that there were

00:13:46,930 --> 00:13:49,810
some features that we needed that we're

00:13:48,399 --> 00:13:51,639
missing inspector when we started

00:13:49,810 --> 00:13:53,620
looking into implementing it and started

00:13:51,639 --> 00:13:56,470
having discussions with Paul Roberts at

00:13:53,620 --> 00:13:57,879
AWS about these gaps I just want to say

00:13:56,470 --> 00:13:59,439
they've done an amazing job coming

00:13:57,879 --> 00:14:02,199
alongside us and helping us with these

00:13:59,439 --> 00:14:03,610
problems and now I'm so Hydra doc now to

00:14:02,199 --> 00:14:05,170
Paul to talk about some of the spinnaker

00:14:03,610 --> 00:14:07,360
related projects that we're working on

00:14:05,170 --> 00:14:09,430
together yeah

00:14:07,360 --> 00:14:11,110
thanks Brian you know first I just have

00:14:09,430 --> 00:14:13,750
to say you know the work that Autodesk

00:14:11,110 --> 00:14:15,370
is doing with EDF and skipper I'm

00:14:13,750 --> 00:14:17,829
completely blown away I think this is

00:14:15,370 --> 00:14:19,420
something that is really going to help

00:14:17,829 --> 00:14:22,180
move them forward and it's just a really

00:14:19,420 --> 00:14:24,670
cool attraction that they've built you

00:14:22,180 --> 00:14:26,230
know with that said I'm thrilled that

00:14:24,670 --> 00:14:28,750
we're collaborating you know with

00:14:26,230 --> 00:14:29,949
Autodesk that came to us they had some

00:14:28,750 --> 00:14:31,680
really interesting things so they would

00:14:29,949 --> 00:14:33,699
they would like to see with spinnaker

00:14:31,680 --> 00:14:36,819
and brynn if you want to go the next

00:14:33,699 --> 00:14:38,589
slide I'll dive into that but you know

00:14:36,819 --> 00:14:40,540
some of that you revolve around the work

00:14:38,589 --> 00:14:43,180
that we initially did about 24 months

00:14:40,540 --> 00:14:46,120
ago with lambda so for those of you for

00:14:43,180 --> 00:14:47,829
those of you in the community that that

00:14:46,120 --> 00:14:49,209
may or may not be aware of the land

00:14:47,829 --> 00:14:51,670
integration this is something that we

00:14:49,209 --> 00:14:53,740
again dropped about two years ago and

00:14:51,670 --> 00:14:55,660
first what we did was we created an all

00:14:53,740 --> 00:14:58,360
new cloud driver and so there really was

00:14:55,660 --> 00:15:00,069
no functions compute primitive within

00:14:58,360 --> 00:15:02,470
spinnaker as we spent a long time

00:15:00,069 --> 00:15:03,899
working with the community and actually

00:15:02,470 --> 00:15:08,470
rolling this out and that was in

00:15:03,899 --> 00:15:10,870
December of 2018 when the college driver

00:15:08,470 --> 00:15:12,519
actually was merged so when we rolled

00:15:10,870 --> 00:15:14,439
that out we actually saw some some

00:15:12,519 --> 00:15:18,660
decent adoption from several customers

00:15:14,439 --> 00:15:21,370
but it really didn't get going until

00:15:18,660 --> 00:15:23,050
later later that year where we started

00:15:21,370 --> 00:15:25,600
looking at you know integrating deck

00:15:23,050 --> 00:15:27,069
which is the UI component and once we

00:15:25,600 --> 00:15:29,170
had the deck integration in there and

00:15:27,069 --> 00:15:30,670
now now users could do full you know

00:15:29,170 --> 00:15:33,879
create read update delete type

00:15:30,670 --> 00:15:37,120
functionality with lambda the missing

00:15:33,879 --> 00:15:40,540
piece here was adding a lambda pipeline

00:15:37,120 --> 00:15:41,740
stage so Brandon and his team they came

00:15:40,540 --> 00:15:43,180
to us and say look you know we're really

00:15:41,740 --> 00:15:45,699
interested in using lambda you know

00:15:43,180 --> 00:15:48,189
we're heavy using spinnaker how can we

00:15:45,699 --> 00:15:50,230
collaborate and you know update the UI

00:15:48,189 --> 00:15:52,000
so it becomes more functional for us

00:15:50,230 --> 00:15:54,189
when we're using these ABF's et cetera

00:15:52,000 --> 00:15:55,509
so the first thing that we're going to

00:15:54,189 --> 00:15:56,240
be doing is we're going to be updating

00:15:55,509 --> 00:15:57,470
the deck UI

00:15:56,240 --> 00:16:00,200
we're going to be building out a new

00:15:57,470 --> 00:16:02,839
pipeline stage for lambda which is going

00:16:00,200 --> 00:16:04,520
to be super cool because one of the main

00:16:02,839 --> 00:16:06,800
use cases we see with lambda today is

00:16:04,520 --> 00:16:09,020
that people frequently use it as glue

00:16:06,800 --> 00:16:10,940
code so and what I mean by glue code

00:16:09,020 --> 00:16:13,670
this is a way that you can kind of pass

00:16:10,940 --> 00:16:15,770
different operations between services or

00:16:13,670 --> 00:16:17,750
between you know your internal code

00:16:15,770 --> 00:16:19,940
pipelines if you will and laminate to

00:16:17,750 --> 00:16:21,680
kind of stick everything together and

00:16:19,940 --> 00:16:24,770
then then the other really important

00:16:21,680 --> 00:16:29,450
pieces is that in lambda itself there's

00:16:24,770 --> 00:16:31,959
a way to do your your there's way to do

00:16:29,450 --> 00:16:34,670
deployment strategies and this is like

00:16:31,959 --> 00:16:37,339
your blue green type deployments the way

00:16:34,670 --> 00:16:41,029
you can do this today is using aliases

00:16:37,339 --> 00:16:42,560
so as an example within lambda you could

00:16:41,029 --> 00:16:45,200
deploy different versions so as a

00:16:42,560 --> 00:16:47,350
developer I can have my version one two

00:16:45,200 --> 00:16:49,550
three four five whatever you have and

00:16:47,350 --> 00:16:52,700
before you go into production you can

00:16:49,550 --> 00:16:54,860
actually wait how much traffic is going

00:16:52,700 --> 00:16:56,450
to be pushed towards how much lambda

00:16:54,860 --> 00:16:58,880
invoke traffic is going to be pushed

00:16:56,450 --> 00:17:01,399
towards a specific function so the nice

00:16:58,880 --> 00:17:03,649
thing here is again using a standard

00:17:01,399 --> 00:17:05,510
Bluegreen approach and you can direct

00:17:03,649 --> 00:17:07,130
traffic to your existing deployment and

00:17:05,510 --> 00:17:08,569
then you can roll forward to your new

00:17:07,130 --> 00:17:10,699
production deployment when you're ready

00:17:08,569 --> 00:17:12,470
and that's in there today we just need

00:17:10,699 --> 00:17:14,510
to get the the UI updated so that's

00:17:12,470 --> 00:17:19,819
that's really important

00:17:14,510 --> 00:17:21,829
next slide please printed so the second

00:17:19,819 --> 00:17:24,949
your requesting and working with brain

00:17:21,829 --> 00:17:27,110
and his team which was a great call-out

00:17:24,949 --> 00:17:29,950
is that any of you any customers that

00:17:27,110 --> 00:17:32,990
are using spinnaker at scale and

00:17:29,950 --> 00:17:36,290
specifically and with that with autodesk

00:17:32,990 --> 00:17:37,970
you know they have their atf usage but

00:17:36,290 --> 00:17:39,790
what I'm seeing from other customers is

00:17:37,970 --> 00:17:42,830
there's this whole concept of

00:17:39,790 --> 00:17:44,420
environment as a service and when I say

00:17:42,830 --> 00:17:47,150
environment as a service this means that

00:17:44,420 --> 00:17:48,950
customers want to add a lot of accounts

00:17:47,150 --> 00:17:51,470
for their for their respective use cases

00:17:48,950 --> 00:17:54,350
and when they do this they need to also

00:17:51,470 --> 00:17:57,200
add those accounts into an to spinnaker

00:17:54,350 --> 00:18:00,020
so the cloud driver can pick up the new

00:17:57,200 --> 00:18:02,090
AWS accounts in order to do that you'd

00:18:00,020 --> 00:18:04,280
have to restart the account the the

00:18:02,090 --> 00:18:06,919
cloud driver component every single time

00:18:04,280 --> 00:18:09,290
you add a new AWS account so what we're

00:18:06,919 --> 00:18:09,760
looking to do is can we build some

00:18:09,290 --> 00:18:11,800
additional

00:18:09,760 --> 00:18:14,080
tooling inside a spinnaker and can we

00:18:11,800 --> 00:18:15,820
create some workflows that a customer

00:18:14,080 --> 00:18:17,020
can say here's a list of the accounts

00:18:15,820 --> 00:18:18,580
that I want to onboard

00:18:17,020 --> 00:18:21,370
well spinnaker pick those up and

00:18:18,580 --> 00:18:23,980
automatically begin consuming those

00:18:21,370 --> 00:18:25,690
accounts and I think the end result of

00:18:23,980 --> 00:18:26,980
building out this functionality is is

00:18:25,690 --> 00:18:30,160
that for customers they're trying to

00:18:26,980 --> 00:18:31,900
onboard 100 200 300 plus accounts it

00:18:30,160 --> 00:18:33,250
doesn't have to be hundreds but if you

00:18:31,900 --> 00:18:35,230
have a large amount of accounts you

00:18:33,250 --> 00:18:36,520
don't be restarting cloud driver you

00:18:35,230 --> 00:18:39,790
know every few minutes or every few

00:18:36,520 --> 00:18:41,200
hours it just picks up the new accounts

00:18:39,790 --> 00:18:42,610
it's gonna be a huge benefit and

00:18:41,200 --> 00:18:45,580
ultimately you'll be able to deliver

00:18:42,610 --> 00:18:47,800
applications at a much faster pace so

00:18:45,580 --> 00:18:50,080
with that said there's a lot of work

00:18:47,800 --> 00:18:53,950
that we're doing here with both on the

00:18:50,080 --> 00:18:59,770
lambda side and on the ECS side for this

00:18:53,950 --> 00:19:01,240
account automation piece but at AWS

00:18:59,770 --> 00:19:02,710
we're not stopping here there's

00:19:01,240 --> 00:19:03,970
additional work going on with spinnaker

00:19:02,710 --> 00:19:06,820
as I mentioned we've been doing this now

00:19:03,970 --> 00:19:09,130
for about two years there's a lot more

00:19:06,820 --> 00:19:10,870
work going on my colleague Claire

00:19:09,130 --> 00:19:13,000
Liguori she's gonna be presenting that

00:19:10,870 --> 00:19:14,710
spinnaker live as well there's a lot of

00:19:13,000 --> 00:19:17,800
work coming out of the ECS team which is

00:19:14,710 --> 00:19:20,500
fantastic the land lambda team is you're

00:19:17,800 --> 00:19:21,610
actively contributing as well so there's

00:19:20,500 --> 00:19:24,370
a lot of work and a lot of collaboration

00:19:21,610 --> 00:19:26,320
coming from AWS so please stay tuned and

00:19:24,370 --> 00:19:28,720
I'm super excited to be working with

00:19:26,320 --> 00:19:31,770
bran and his team to make big spinnaker

00:19:28,720 --> 00:19:31,770
better throughout the entire community

00:19:33,450 --> 00:19:36,840
Brandon back to you

00:19:37,900 --> 00:19:41,740
awesome thanks of thanks Paul so I also

00:19:40,210 --> 00:19:43,540
just want to mention yeah I'm really

00:19:41,740 --> 00:19:44,830
excited about our collaboration - I'm

00:19:43,540 --> 00:19:46,660
really excited to get these features in

00:19:44,830 --> 00:19:49,030
open source of America they're gonna be

00:19:46,660 --> 00:19:51,820
a big help for us I also want to mention

00:19:49,030 --> 00:19:53,740
Autodesk is hiring so here's a link come

00:19:51,820 --> 00:19:55,980
check it out come join us thanks

00:19:53,740 --> 00:19:55,980
everyone

00:20:01,330 --> 00:20:03,390

YouTube URL: https://www.youtube.com/watch?v=SZfvptxlEYE


