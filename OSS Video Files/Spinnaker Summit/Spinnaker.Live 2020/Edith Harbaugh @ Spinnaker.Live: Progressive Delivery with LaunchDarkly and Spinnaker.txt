Title: Edith Harbaugh @ Spinnaker.Live: Progressive Delivery with LaunchDarkly and Spinnaker
Publication date: 2020-06-22
Playlist: Spinnaker.Live 2020
Description: 
	Progressive Delivery is the next step of continuous delivery. Edith Harbaugh, CEO LaunchDarkly speaks about how Spinnaker and Feature Management combine to deliver functionality safely and quickly at the right time.
Captions: 
	00:00:02,780 --> 00:00:07,890
well hi everybody at home I am speaking

00:00:05,790 --> 00:00:10,139
to you live from my apartment in

00:00:07,890 --> 00:00:12,270
downtown Oakland I'm here today to talk

00:00:10,139 --> 00:00:15,600
about progressive delivery subject which

00:00:12,270 --> 00:00:17,970
I am very very very excited about so

00:00:15,600 --> 00:00:20,850
first thank you very much to spinnaker

00:00:17,970 --> 00:00:23,130
for inviting me to speak today for

00:00:20,850 --> 00:00:25,280
myself I'm Edith Harbor I'm the

00:00:23,130 --> 00:00:27,870
co-founder and CEO of lunch dirkly

00:00:25,280 --> 00:00:30,360
launched shortly is a feature management

00:00:27,870 --> 00:00:32,669
platform which has thousands of

00:00:30,360 --> 00:00:35,400
customers worldwide and we serve

00:00:32,669 --> 00:00:38,250
trillions of feature flags every day and

00:00:35,400 --> 00:00:42,030
co-host of to be continuous of podcasts

00:00:38,250 --> 00:00:44,850
about the continuous delivery with Paul

00:00:42,030 --> 00:00:47,250
Baker of circle CI and I'm also a

00:00:44,850 --> 00:00:50,190
contributing writer to read ray info QD

00:00:47,250 --> 00:00:53,040
zone as for my background I started off

00:00:50,190 --> 00:00:55,680
in engineering and then I became a

00:00:53,040 --> 00:00:57,960
product manager and from everything I

00:00:55,680 --> 00:01:01,410
saw an engineering and product I went on

00:00:57,960 --> 00:01:03,890
to found launch Darkly so let's let's

00:01:01,410 --> 00:01:06,360
let's get back for a second to why

00:01:03,890 --> 00:01:09,389
progressive delivery matters and what is

00:01:06,360 --> 00:01:11,670
it so you know just in my lifetime has

00:01:09,389 --> 00:01:14,549
been this really really rapid increase

00:01:11,670 --> 00:01:17,159
in the pace of technology you know

00:01:14,549 --> 00:01:19,950
technology used to take decades to get

00:01:17,159 --> 00:01:22,380
adopted widely now something like the

00:01:19,950 --> 00:01:26,009
smartphone can go from you know just

00:01:22,380 --> 00:01:28,049
kind of a glint and Steve Jobs I just

00:01:26,009 --> 00:01:29,880
something that is widely adopted so

00:01:28,049 --> 00:01:31,939
technology is moving faster and faster

00:01:29,880 --> 00:01:34,319
and faster

00:01:31,939 --> 00:01:37,939
how does continuous delivery fit into

00:01:34,319 --> 00:01:41,729
that so when I started off in software

00:01:37,939 --> 00:01:45,569
about 20 years ago it was the heyday of

00:01:41,729 --> 00:01:47,669
the big release the big release was

00:01:45,569 --> 00:01:50,789
something that Microsoft I think had the

00:01:47,669 --> 00:01:52,439
biggest one of which was Windows 95 or

00:01:50,789 --> 00:01:55,219
you know you have you spent about three

00:01:52,439 --> 00:01:57,810
years building something one year to

00:01:55,219 --> 00:01:59,369
plan it one year to build it when you're

00:01:57,810 --> 00:02:01,979
to test it and then you have this

00:01:59,369 --> 00:02:03,569
massive big release including Bill Gates

00:02:01,979 --> 00:02:06,479
and Steve Ballmer getting up on stage

00:02:03,569 --> 00:02:08,550
and dancing to start me up by the

00:02:06,479 --> 00:02:10,530
Rolling Stones we don't see that anymore

00:02:08,550 --> 00:02:12,780
and the reason why we don't seen anymore

00:02:10,530 --> 00:02:16,080
is that that sale of software

00:02:12,780 --> 00:02:16,530
development has a lot of issues you know

00:02:16,080 --> 00:02:18,480
if you're

00:02:16,530 --> 00:02:20,550
three years building something you're

00:02:18,480 --> 00:02:23,910
really likely to get it wrong or

00:02:20,550 --> 00:02:26,160
off-kilter it's hard to react and it's

00:02:23,910 --> 00:02:29,640
hard to fix bugs you know a bug could be

00:02:26,160 --> 00:02:31,260
down the field for a long long time so

00:02:29,640 --> 00:02:32,430
the idea of continuous delivery was to

00:02:31,260 --> 00:02:34,440
really change the style of development

00:02:32,430 --> 00:02:35,760
you know instead of having a release

00:02:34,440 --> 00:02:39,420
every three years to make it so that

00:02:35,760 --> 00:02:41,970
releasing was quick easy and just

00:02:39,420 --> 00:02:44,160
something that you could just do instead

00:02:41,970 --> 00:02:45,840
of a release being something that you

00:02:44,160 --> 00:02:48,780
planned for months why not be able to

00:02:45,840 --> 00:02:50,190
release every day and then if the theory

00:02:48,780 --> 00:02:51,300
was why can't you release every day that

00:02:50,190 --> 00:02:54,120
it would get to why can't we release

00:02:51,300 --> 00:02:56,970
every hour and every minute even so

00:02:54,120 --> 00:02:58,850
getting this really tight cycle of a

00:02:56,970 --> 00:03:01,319
product owner thinks of something

00:02:58,850 --> 00:03:03,900
developers build it let's test it let's

00:03:01,319 --> 00:03:05,640
deploy it let's release and this really

00:03:03,900 --> 00:03:09,830
led to a lot of companies like Facebook

00:03:05,640 --> 00:03:09,830
and Netflix being extremely successful

00:03:09,860 --> 00:03:16,260
what's the problem though so a problem I

00:03:13,530 --> 00:03:18,330
saw when I was a product manager was

00:03:16,260 --> 00:03:21,930
that though we could release all the

00:03:18,330 --> 00:03:23,850
time sometimes we didn't want to you

00:03:21,930 --> 00:03:26,070
know you could have a feature that you

00:03:23,850 --> 00:03:28,470
are really excited about that you think

00:03:26,070 --> 00:03:29,910
is a good idea but that you really want

00:03:28,470 --> 00:03:31,980
to try to test with just a couple people

00:03:29,910 --> 00:03:34,620
you know maybe you want to just push it

00:03:31,980 --> 00:03:36,900
out to your QA and have them see if it

00:03:34,620 --> 00:03:39,000
works maybe you have a small beta group

00:03:36,900 --> 00:03:40,739
of testers who are your best customers

00:03:39,000 --> 00:03:44,100
you want to test it maybe you want to

00:03:40,739 --> 00:03:47,370
give it to your scalability team and/or

00:03:44,100 --> 00:03:51,480
your site reliability engineers first so

00:03:47,370 --> 00:03:53,280
they could kind of really see it so from

00:03:51,480 --> 00:03:56,820
continuous delivery kind of evolved

00:03:53,280 --> 00:03:59,280
progressive delivery and what the idea

00:03:56,820 --> 00:04:00,900
of progressive delivery is is that yes

00:03:59,280 --> 00:04:03,480
it's great to release all the time and

00:04:00,900 --> 00:04:05,489
that is I think a necessary benefit that

00:04:03,480 --> 00:04:07,920
you have to have to have a robust

00:04:05,489 --> 00:04:10,140
software culture but instead of pushing

00:04:07,920 --> 00:04:13,350
something out to everybody which can be

00:04:10,140 --> 00:04:15,630
very very very destructive why don't you

00:04:13,350 --> 00:04:18,630
try to push it out to limited groups of

00:04:15,630 --> 00:04:22,109
people slowly or quickly and get their

00:04:18,630 --> 00:04:24,300
reaction so the two core areas of

00:04:22,109 --> 00:04:27,630
progressive delivery are release

00:04:24,300 --> 00:04:30,030
progression and delegation so release

00:04:27,630 --> 00:04:32,130
progression goes by a lot of diff

00:04:30,030 --> 00:04:36,180
names I've also heard a called canary

00:04:32,130 --> 00:04:38,820
launches betas ring-ring releases but

00:04:36,180 --> 00:04:40,680
it's it's just the same basic idea that

00:04:38,820 --> 00:04:43,650
instead of pushing and release out to

00:04:40,680 --> 00:04:45,660
everybody and I call that the push and

00:04:43,650 --> 00:04:47,040
prey release because you're pushing out

00:04:45,660 --> 00:04:50,700
to everybody and then you're praying

00:04:47,040 --> 00:04:51,240
that nothing happens why don't you push

00:04:50,700 --> 00:04:53,580
it out

00:04:51,240 --> 00:04:58,170
to just the right people at the right

00:04:53,580 --> 00:05:01,590
time so there's a lot of well-known best

00:04:58,170 --> 00:05:04,380
practices here you can push it out to

00:05:01,590 --> 00:05:05,790
internal users just to get feedback like

00:05:04,380 --> 00:05:08,670
hey are we on the right track is this

00:05:05,790 --> 00:05:13,200
what we wanted to do you could then push

00:05:08,670 --> 00:05:15,030
it out to QA so they can really test in

00:05:13,200 --> 00:05:17,400
production and make sure that stuff

00:05:15,030 --> 00:05:19,770
works in real life and then you could

00:05:17,400 --> 00:05:23,130
start to push out too you know I call it

00:05:19,770 --> 00:05:24,930
the the classic wave of your early

00:05:23,130 --> 00:05:27,900
adopters for eager to see new features

00:05:24,930 --> 00:05:29,310
and then your late adopters who are like

00:05:27,900 --> 00:05:33,330
I don't want to see this thing until it

00:05:29,310 --> 00:05:36,360
is absolutely battleheart it the second

00:05:33,330 --> 00:05:37,350
key part of this is delegation if you

00:05:36,360 --> 00:05:38,970
say hey this is great

00:05:37,350 --> 00:05:42,020
we can push stuff out to the right

00:05:38,970 --> 00:05:44,160
people at the right time it's also

00:05:42,020 --> 00:05:48,360
empowering the right person in that work

00:05:44,160 --> 00:05:52,260
to do that pushing whether it be the

00:05:48,360 --> 00:05:53,820
product owner or a marketer if they're

00:05:52,260 --> 00:05:57,030
running a beta and they want PR to see

00:05:53,820 --> 00:05:58,500
it at the right time or if it's even the

00:05:57,030 --> 00:06:00,240
sales team if they say we have a

00:05:58,500 --> 00:06:03,030
customer who really wants to try this

00:06:00,240 --> 00:06:05,790
new feature and I want to turn it on for

00:06:03,030 --> 00:06:08,430
them without the developers having to

00:06:05,790 --> 00:06:13,080
run a release so those are kind of the

00:06:08,430 --> 00:06:16,050
core ideas of progressive delivery so we

00:06:13,080 --> 00:06:17,790
sum it up as deploy when you want which

00:06:16,050 --> 00:06:19,920
is just being able to push whenever you

00:06:17,790 --> 00:06:23,790
want code just push it you know don't

00:06:19,920 --> 00:06:25,830
don't wait for don't wait for everything

00:06:23,790 --> 00:06:27,840
to be ready but release it when your

00:06:25,830 --> 00:06:29,580
customers ready so it's this core idea

00:06:27,840 --> 00:06:31,860
of separating out deployment from

00:06:29,580 --> 00:06:33,690
release where traditionally they've been

00:06:31,860 --> 00:06:35,130
so tightly intertwined that it's just

00:06:33,690 --> 00:06:37,440
been really hard to function as an

00:06:35,130 --> 00:06:40,320
engineering org because it's like well

00:06:37,440 --> 00:06:43,140
if I finish this feature and I merge it

00:06:40,320 --> 00:06:43,950
into my main line it's gonna just go out

00:06:43,140 --> 00:06:46,020
to everybody because

00:06:43,950 --> 00:06:47,430
doing continuous delivery the idea of

00:06:46,020 --> 00:06:49,860
progressive delivery is that you can

00:06:47,430 --> 00:06:52,920
merge stuff in and then selectively

00:06:49,860 --> 00:06:55,350
control it so that this this is an

00:06:52,920 --> 00:06:59,810
incredibly powerful concept that you can

00:06:55,350 --> 00:07:03,570
suddenly have code that's not that's

00:06:59,810 --> 00:07:05,100
deployed but selectively on for

00:07:03,570 --> 00:07:07,040
different people so I mean I'm gonna

00:07:05,100 --> 00:07:10,830
talk a little bit more about that

00:07:07,040 --> 00:07:13,800
so how spinnaker fits into this so I

00:07:10,830 --> 00:07:16,350
wrote a blog post in 2017 when spinnaker

00:07:13,800 --> 00:07:17,940
for starting a popular because you know

00:07:16,350 --> 00:07:22,560
my company launched Darkly does feature

00:07:17,940 --> 00:07:25,050
Flags feature management and the talk

00:07:22,560 --> 00:07:27,720
back then was what was fin occur you

00:07:25,050 --> 00:07:30,510
have all these great pipelines and it's

00:07:27,720 --> 00:07:32,430
really easy to control pipelines that

00:07:30,510 --> 00:07:34,200
make stuff go faster out all the time

00:07:32,430 --> 00:07:37,110
they can control what box and stuff goes

00:07:34,200 --> 00:07:39,600
to do we still need feature flags Jewish

00:07:37,110 --> 00:07:41,880
still need feature management and my

00:07:39,600 --> 00:07:44,460
answer is absolutely yes there are two

00:07:41,880 --> 00:07:46,980
things that go great together if you

00:07:44,460 --> 00:07:50,580
have a reliable pipeline like like

00:07:46,980 --> 00:07:53,430
spinnaker users and launched Oracle uses

00:07:50,580 --> 00:07:56,250
internally that can guarantee reliable

00:07:53,430 --> 00:07:58,950
delivery of code to different boxes that

00:07:56,250 --> 00:08:01,530
is amazing that is absolutely necessary

00:07:58,950 --> 00:08:03,360
but then and then there's all sorts of

00:08:01,530 --> 00:08:06,350
nice techniques that spinnaker has where

00:08:03,360 --> 00:08:08,430
you could do load testing and so

00:08:06,350 --> 00:08:10,890
failover between different boxes and

00:08:08,430 --> 00:08:12,630
make sure that everything works you

00:08:10,890 --> 00:08:14,670
still leave that next step of okay now

00:08:12,630 --> 00:08:18,240
that I have this rock-solid guarantee

00:08:14,670 --> 00:08:19,650
that everything is where it needs to be

00:08:18,240 --> 00:08:21,780
I still want to be able to control the

00:08:19,650 --> 00:08:23,580
actual features and that that's where

00:08:21,780 --> 00:08:26,340
feature management tools like lunch

00:08:23,580 --> 00:08:28,980
Darkly or you know homegrown solutions

00:08:26,340 --> 00:08:30,780
come in is okay everything can get out

00:08:28,980 --> 00:08:33,390
where I want it to be in a safe

00:08:30,780 --> 00:08:34,680
sustained matter how do I then get make

00:08:33,390 --> 00:08:37,950
sure that it is getting to the right

00:08:34,680 --> 00:08:42,200
person and the right functionality so

00:08:37,950 --> 00:08:42,200
I'm gonna walk through some use cases

00:08:42,229 --> 00:08:46,830
that we see people using in spinnaker

00:08:44,940 --> 00:08:49,710
and feature management together for for

00:08:46,830 --> 00:08:51,420
progressive delivery the number one is

00:08:49,710 --> 00:08:54,240
just really the the mind swap of

00:08:51,420 --> 00:08:56,250
separating out deploy and release if you

00:08:54,240 --> 00:08:58,020
could separate these two out suddenly

00:08:56,250 --> 00:08:59,940
release has become really

00:08:58,020 --> 00:09:01,590
which I like I'm a boring person you

00:08:59,940 --> 00:09:02,880
know I don't like stress releases where

00:09:01,590 --> 00:09:04,590
your fingers are crossed and you're

00:09:02,880 --> 00:09:06,660
you're hoping that everything gets the

00:09:04,590 --> 00:09:09,090
right place at the right time you know I

00:09:06,660 --> 00:09:10,710
have a couple patents and deployment and

00:09:09,090 --> 00:09:12,330
it was just all about just bundling up

00:09:10,710 --> 00:09:13,410
stuff and making sure was delivered that

00:09:12,330 --> 00:09:16,110
should be easy

00:09:13,410 --> 00:09:19,740
that should it be hard so if you have a

00:09:16,110 --> 00:09:21,240
guaranteed sense that you've deployed

00:09:19,740 --> 00:09:25,050
stuff then you can get into the fun

00:09:21,240 --> 00:09:26,310
stuff of actually releasing it along

00:09:25,050 --> 00:09:28,560
with that you can also do a lot of

00:09:26,310 --> 00:09:30,960
really cool use cases around test and

00:09:28,560 --> 00:09:33,480
production which is if you could control

00:09:30,960 --> 00:09:36,390
who sees something in production you

00:09:33,480 --> 00:09:39,120
have the ability to really battle test

00:09:36,390 --> 00:09:40,590
something in production what I found

00:09:39,120 --> 00:09:42,270
over and over and as an engineering

00:09:40,590 --> 00:09:44,670
manager is that no matter how much we

00:09:42,270 --> 00:09:46,440
test on QA there would always be

00:09:44,670 --> 00:09:50,040
something in the real world that would

00:09:46,440 --> 00:09:51,930
change so with progressive delivery you

00:09:50,040 --> 00:09:54,720
can test a production and then quickly

00:09:51,930 --> 00:09:57,150
turn stuff off same with targeted

00:09:54,720 --> 00:09:59,130
rollouts and carry launches you have

00:09:57,150 --> 00:10:01,830
really a lot of control to push stuff

00:09:59,130 --> 00:10:02,840
out to the right people or if you find

00:10:01,830 --> 00:10:05,790
you've pushed it out to the wrong people

00:10:02,840 --> 00:10:07,860
quickly turn it off so we have a lot of

00:10:05,790 --> 00:10:10,530
for example customers who are in

00:10:07,860 --> 00:10:13,080
regulated industries where for example

00:10:10,530 --> 00:10:14,310
people in one province have to see

00:10:13,080 --> 00:10:16,710
something different than and another

00:10:14,310 --> 00:10:20,520
province and progressive delivery really

00:10:16,710 --> 00:10:22,980
helps with that kill switches it's such

00:10:20,520 --> 00:10:26,280
a killer feature sorry for my pun I said

00:10:22,980 --> 00:10:28,290
I was a boring person you know if you

00:10:26,280 --> 00:10:30,510
don't have a kill switch a bad release

00:10:28,290 --> 00:10:32,820
it's really really painful it means that

00:10:30,510 --> 00:10:35,730
you have to physically figure out what

00:10:32,820 --> 00:10:37,290
went wrong and redeploy it even if

00:10:35,730 --> 00:10:40,530
you're a pretty sharp dev shop that

00:10:37,290 --> 00:10:42,150
could take a lot of time so with a kill

00:10:40,530 --> 00:10:43,770
switch you could just say hey something

00:10:42,150 --> 00:10:46,230
is not going right let me turn it off

00:10:43,770 --> 00:10:51,330
and then figure out what went wrong and

00:10:46,230 --> 00:10:54,090
fix it I talked earlier about just the

00:10:51,330 --> 00:10:55,620
ability to learn you know if you push

00:10:54,090 --> 00:10:57,150
something out to everybody all at once

00:10:55,620 --> 00:10:59,160
what I discover it over and over and

00:10:57,150 --> 00:11:01,590
engineering product managers sometimes

00:10:59,160 --> 00:11:02,730
you got it really wrong you would have

00:11:01,590 --> 00:11:05,760
something that you thought was a great

00:11:02,730 --> 00:11:07,710
idea and it just flopped which was

00:11:05,760 --> 00:11:10,350
really painful

00:11:07,710 --> 00:11:10,760
with the ability to do beta groups you

00:11:10,350 --> 00:11:12,320
can

00:11:10,760 --> 00:11:16,220
discover what's working what's not

00:11:12,320 --> 00:11:20,480
iterate a couple more times and finally

00:11:16,220 --> 00:11:23,620
there's a lot of use cases for more I'd

00:11:20,480 --> 00:11:26,360
say the business side a really classic

00:11:23,620 --> 00:11:28,700
classic pain point when I was an

00:11:26,360 --> 00:11:30,620
engineering again was somebody would say

00:11:28,700 --> 00:11:33,260
hey we have this big important customer

00:11:30,620 --> 00:11:35,960
and they don't want this feature for

00:11:33,260 --> 00:11:36,500
some regulatory reason and what that

00:11:35,960 --> 00:11:38,480
would mean

00:11:36,500 --> 00:11:40,010
without progressive delivery is we would

00:11:38,480 --> 00:11:41,840
have to go in and hard code it so we

00:11:40,010 --> 00:11:43,460
would somewhere have sometimes even two

00:11:41,840 --> 00:11:45,170
branches which is extremely extremely

00:11:43,460 --> 00:11:47,120
painful

00:11:45,170 --> 00:11:48,950
so with progressive delivery you have

00:11:47,120 --> 00:11:50,330
the ability to say hey this customer

00:11:48,950 --> 00:11:52,780
doesn't get it and that's okay we're

00:11:50,330 --> 00:11:52,780
going to manage that

00:11:53,470 --> 00:11:59,900
so again progressive delivery helps I'd

00:11:57,380 --> 00:12:02,240
say primarily developers you know

00:11:59,900 --> 00:12:04,220
developers are the the main benefit of

00:12:02,240 --> 00:12:05,750
it but then there's so much of the rest

00:12:04,220 --> 00:12:06,080
of the work that also gets benefits from

00:12:05,750 --> 00:12:09,320
it

00:12:06,080 --> 00:12:12,680
it's it's something that truly empowers

00:12:09,320 --> 00:12:17,120
everyone to more safely deliver and

00:12:12,680 --> 00:12:20,120
control their software uh so in summary

00:12:17,120 --> 00:12:22,450
you know spinnaker and feature

00:12:20,120 --> 00:12:25,460
management really pack together this

00:12:22,450 --> 00:12:29,390
incredibly powerful use cases of

00:12:25,460 --> 00:12:30,590
deployment and release that are better

00:12:29,390 --> 00:12:34,130
together

00:12:30,590 --> 00:12:36,050
if deployment is a hassle and I deal II

00:12:34,130 --> 00:12:38,630
remember those days and I'm glad they're

00:12:36,050 --> 00:12:41,330
gone if deployment is a hassle you get

00:12:38,630 --> 00:12:42,890
scared to deploy if every time you

00:12:41,330 --> 00:12:44,090
deploy you're worried that something is

00:12:42,890 --> 00:12:47,720
gonna break and you're gonna have a

00:12:44,090 --> 00:12:49,610
five-hour build party to figure out why

00:12:47,720 --> 00:12:52,340
something didn't deploy you don't

00:12:49,610 --> 00:12:54,980
release very often if you have the

00:12:52,340 --> 00:12:56,960
ability to safely and easily deploy

00:12:54,980 --> 00:12:58,970
regularly that gives you a lot of

00:12:56,960 --> 00:13:01,700
confidence to move quicker and saves

00:12:58,970 --> 00:13:03,350
time then the next part of that is if

00:13:01,700 --> 00:13:06,200
you do have that then you can release

00:13:03,350 --> 00:13:07,670
when your customer is ready you could do

00:13:06,200 --> 00:13:09,140
things like hey we have this really

00:13:07,670 --> 00:13:11,690
important feature that's coming out next

00:13:09,140 --> 00:13:13,370
week and it's already ready to go we

00:13:11,690 --> 00:13:15,380
deployed it that's not the nervous part

00:13:13,370 --> 00:13:16,670
all we have to do next week is just flip

00:13:15,380 --> 00:13:19,910
the switch and turn it on for our

00:13:16,670 --> 00:13:22,610
customers so it again you know this is

00:13:19,910 --> 00:13:24,499
super super powerful and I think it's a

00:13:22,610 --> 00:13:26,149
really needed step in

00:13:24,499 --> 00:13:29,839
software delivery and that that's why we

00:13:26,149 --> 00:13:31,279
were calling it progressive delivery so

00:13:29,839 --> 00:13:33,409
I want to leave time for questions at

00:13:31,279 --> 00:13:35,269
the end I mentioned that I had written a

00:13:33,409 --> 00:13:37,819
blog if there's a link to it if you'd

00:13:35,269 --> 00:13:39,619
like these slides there's also a link

00:13:37,819 --> 00:13:44,989
there you could go there and download

00:13:39,619 --> 00:13:48,949
the slides well I I have a question I

00:13:44,989 --> 00:13:51,199
guess I went to a I went the last time I

00:13:48,949 --> 00:13:55,179
heard about progressive delivery was at

00:13:51,199 --> 00:13:58,549
delivery comp and I heard a talk from

00:13:55,179 --> 00:14:00,559
LinkedIn about progressive delivery and

00:13:58,549 --> 00:14:00,949
I've had I've had a few more talks at

00:14:00,559 --> 00:14:03,319
around

00:14:00,949 --> 00:14:06,169
I think LinkedIn's delivery strategy is

00:14:03,319 --> 00:14:07,579
interesting so we can or cannot talk

00:14:06,169 --> 00:14:10,989
about that but I'm just wondering do you

00:14:07,579 --> 00:14:13,369
have any like can you talk about how

00:14:10,989 --> 00:14:15,589
enterprises are using this and talk a

00:14:13,369 --> 00:14:17,359
little bit more about about how how

00:14:15,589 --> 00:14:18,619
that's kind of supported their business

00:14:17,359 --> 00:14:20,839
goals and how that's kind of different

00:14:18,619 --> 00:14:22,609
for each because every SDLC is a

00:14:20,839 --> 00:14:25,009
snowflake right so how do you how does

00:14:22,609 --> 00:14:29,089
launch Darkly deal with that yeah I'd

00:14:25,009 --> 00:14:31,159
say uh enterprises I'd say initially

00:14:29,089 --> 00:14:33,289
we're very good resistant continuously

00:14:31,159 --> 00:14:35,809
really because it doesn't fit their

00:14:33,289 --> 00:14:37,759
business patterns like a Facebook or a

00:14:35,809 --> 00:14:40,999
LinkedIn you know with millions of

00:14:37,759 --> 00:14:43,069
consumer customers can't afford to push

00:14:40,999 --> 00:14:46,399
stuff you know hundreds or thousands of

00:14:43,069 --> 00:14:48,919
times a day if you're a bank or a

00:14:46,399 --> 00:14:51,709
financial institution you can't do that

00:14:48,919 --> 00:14:53,869
you're in a regulated industry and there

00:14:51,709 --> 00:14:55,519
might be training involved you know some

00:14:53,869 --> 00:14:57,649
real examples we heard is like we can't

00:14:55,519 --> 00:14:59,809
update this more than once a week

00:14:57,649 --> 00:15:02,089
because we have to retrain everybody all

00:14:59,809 --> 00:15:05,569
the tellers are all the call center

00:15:02,089 --> 00:15:07,999
people who use that so banks and

00:15:05,569 --> 00:15:09,889
financial institutions and Airlines

00:15:07,999 --> 00:15:11,389
really love progressive delivery because

00:15:09,889 --> 00:15:13,609
it's like okay we get all the benefits

00:15:11,389 --> 00:15:15,409
of continuous delivery you know of being

00:15:13,609 --> 00:15:18,349
able to iterate quicker being able to

00:15:15,409 --> 00:15:19,849
have more stuff ready to go but we had

00:15:18,349 --> 00:15:21,769
we can use progressive delivery to have

00:15:19,849 --> 00:15:25,099
the gates we need to have it fit back

00:15:21,769 --> 00:15:26,899
into our own business patents that makes

00:15:25,099 --> 00:15:28,339
sense that makes sense and I we got

00:15:26,899 --> 00:15:31,849
another great question from the audience

00:15:28,339 --> 00:15:34,339
if you Killswitch a feature how should

00:15:31,849 --> 00:15:36,649
the other areas of the platform cope do

00:15:34,339 --> 00:15:37,759
you preemptively plan for this so he

00:15:36,649 --> 00:15:38,220
wants to know a little bit more about

00:15:37,759 --> 00:15:41,340
the date

00:15:38,220 --> 00:15:46,320
on that Killswitch feature yeah I mean

00:15:41,340 --> 00:15:47,820
it's a shift in thinking I hate to say

00:15:46,320 --> 00:15:50,730
the word microservices because that's so

00:15:47,820 --> 00:15:52,740
loaded at this point but um it's a shift

00:15:50,730 --> 00:15:56,670
of thinking of making sure that your

00:15:52,740 --> 00:15:58,950
code is wrapped as a feature so that if

00:15:56,670 --> 00:16:01,430
you do kill something or turn it off

00:15:58,950 --> 00:16:03,750
that everything else gracefully degrades

00:16:01,430 --> 00:16:04,920
again to go back to the the banking

00:16:03,750 --> 00:16:07,950
example because we have a lot of banking

00:16:04,920 --> 00:16:10,400
customers if you know some back-end

00:16:07,950 --> 00:16:13,230
system is sometimes a little bit flaky

00:16:10,400 --> 00:16:15,750
and that if it doesn't get a response it

00:16:13,230 --> 00:16:17,970
might bring down your entire system you

00:16:15,750 --> 00:16:20,010
want to gracefully wrap that so say if a

00:16:17,970 --> 00:16:23,310
mortgage rate isn't coming in when you

00:16:20,010 --> 00:16:26,760
expect it to your entire lending app

00:16:23,310 --> 00:16:28,290
doesn't fall over so that that's just it

00:16:26,760 --> 00:16:30,630
just requires something about how you're

00:16:28,290 --> 00:16:32,850
going to handle it and having that

00:16:30,630 --> 00:16:34,620
safeguard what we found over and over is

00:16:32,850 --> 00:16:37,890
that our customers just start to think

00:16:34,620 --> 00:16:39,060
that way you know even in the even

00:16:37,890 --> 00:16:40,950
before the bill but just in the design

00:16:39,060 --> 00:16:43,950
they're like how do we wrap this so that

00:16:40,950 --> 00:16:46,280
it could safely fail which is definitely

00:16:43,950 --> 00:16:46,280
mindSHIFT

00:16:46,310 --> 00:16:52,980
gotcha

00:16:47,520 --> 00:16:54,720
that's yeah it is a mind shift and it's

00:16:52,980 --> 00:16:56,520
really a whole shift just talking about

00:16:54,720 --> 00:16:57,960
this with Kelsey earlier to like just

00:16:56,520 --> 00:17:01,500
it's a shift in the way that you think

00:16:57,960 --> 00:17:03,630
about engineering your software and the

00:17:01,500 --> 00:17:06,449
way you think about quality kind of and

00:17:03,630 --> 00:17:08,730
how you can isolate it right yeah I mean

00:17:06,449 --> 00:17:11,100
the one thing I'll quickly sakes I know

00:17:08,730 --> 00:17:13,740
we're right at time is people think well

00:17:11,100 --> 00:17:14,970
if I have features everywhere you know

00:17:13,740 --> 00:17:16,589
that means that people aren't caring

00:17:14,970 --> 00:17:18,660
about quality no you're absolutely are

00:17:16,589 --> 00:17:20,310
still carrying about quality you're just

00:17:18,660 --> 00:17:22,380
designing in for the very beginning of

00:17:20,310 --> 00:17:25,050
okay if this fails how can I recover

00:17:22,380 --> 00:17:26,339
instead of having the the assumption

00:17:25,050 --> 00:17:30,720
that nothing will ever fail so I don't

00:17:26,339 --> 00:17:32,640
have to think about this right well that

00:17:30,720 --> 00:17:34,440
that's a good sound bite to end with

00:17:32,640 --> 00:17:36,210
thank you so much eat it thank you so

00:17:34,440 --> 00:17:37,710
much for your talk and for sharing the

00:17:36,210 --> 00:17:39,750
launch Darkly story with us and we're

00:17:37,710 --> 00:17:43,380
like I said we're so excited that not

00:17:39,750 --> 00:17:45,240
only not only does to launch darkly and

00:17:43,380 --> 00:17:47,760
spinnaker work really well together for

00:17:45,240 --> 00:17:50,490
our customers s DLCs but also launch

00:17:47,760 --> 00:17:51,940
darkly uses the armory distro of

00:17:50,490 --> 00:17:53,350
spinnaker internally to

00:17:51,940 --> 00:17:55,600
they're their products so we're just

00:17:53,350 --> 00:17:56,889
like eating our own dog food and in our

00:17:55,600 --> 00:17:59,679
own kool-aid all over the place and

00:17:56,889 --> 00:18:00,909
loving each other so much so looking

00:17:59,679 --> 00:18:02,830
forward to continue to innovate with you

00:18:00,909 --> 00:18:06,600
and look up to you thanks for you thanks

00:18:02,830 --> 00:18:06,600

YouTube URL: https://www.youtube.com/watch?v=8u9ichbEaQk


